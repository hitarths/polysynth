(set-option :produce-models true); benchmark generated from python API
(set-info :status unknown)
(declare-fun l_0_0_1 () Real)
(declare-fun l_0_0_2 () Real)
(declare-fun l_0_0_3 () Real)
(declare-fun l_0_1_1 () Real)
(declare-fun l_0_1_2 () Real)
(declare-fun l_0_1_5 () Real)
(declare-fun l_0_1_4 () Real)
(declare-fun l_0_1_3 () Real)
(declare-fun l_0_2_2 () Real)
(declare-fun l_0_2_1 () Real)
(declare-fun l_0_2_7 () Real)
(declare-fun l_0_2_6 () Real)
(declare-fun l_0_2_5 () Real)
(declare-fun l_0_2_4 () Real)
(declare-fun l_0_2_3 () Real)
(declare-fun l_0_3_2 () Real)
(declare-fun l_0_3_1 () Real)
(declare-fun l_0_3_9 () Real)
(declare-fun l_0_3_8 () Real)
(declare-fun l_0_3_7 () Real)
(declare-fun l_0_3_6 () Real)
(declare-fun l_0_3_5 () Real)
(declare-fun l_0_3_4 () Real)
(declare-fun l_0_3_3 () Real)
(declare-fun l_0_4_226 () Real)
(declare-fun l_0_4_181 () Real)
(declare-fun l_0_4_46 () Real)
(declare-fun l_0_4_259 () Real)
(declare-fun l_0_4_246 () Real)
(declare-fun l_0_4_258 () Real)
(declare-fun l_0_4_245 () Real)
(declare-fun l_0_4_257 () Real)
(declare-fun l_0_4_244 () Real)
(declare-fun l_0_4_256 () Real)
(declare-fun l_0_4_243 () Real)
(declare-fun l_0_4_255 () Real)
(declare-fun l_0_4_242 () Real)
(declare-fun l_0_4_254 () Real)
(declare-fun l_0_4_241 () Real)
(declare-fun l_0_4_214 () Real)
(declare-fun l_0_4_201 () Real)
(declare-fun l_0_4_213 () Real)
(declare-fun l_0_4_200 () Real)
(declare-fun l_0_4_212 () Real)
(declare-fun l_0_4_199 () Real)
(declare-fun l_0_4_211 () Real)
(declare-fun l_0_4_198 () Real)
(declare-fun l_0_4_210 () Real)
(declare-fun l_0_4_197 () Real)
(declare-fun l_0_4_209 () Real)
(declare-fun l_0_4_196 () Real)
(declare-fun l_0_4_1 () Real)
(declare-fun l_0_4_47 () Real)
(declare-fun l_0_4_151 () Real)
(declare-fun l_0_4_136 () Real)
(declare-fun l_0_4_91 () Real)
(declare-fun l_0_4_106 () Real)
(declare-fun l_0_4_2 () Real)
(declare-fun l_0_4_79 () Real)
(declare-fun l_0_4_66 () Real)
(declare-fun l_0_4_78 () Real)
(declare-fun l_0_4_65 () Real)
(declare-fun l_0_4_77 () Real)
(declare-fun l_0_4_64 () Real)
(declare-fun l_0_4_76 () Real)
(declare-fun l_0_4_63 () Real)
(declare-fun l_0_4_75 () Real)
(declare-fun l_0_4_62 () Real)
(declare-fun l_0_4_74 () Real)
(declare-fun l_0_4_61 () Real)
(declare-fun l_0_4_49 () Real)
(declare-fun l_0_4_34 () Real)
(declare-fun l_0_4_21 () Real)
(declare-fun l_0_4_33 () Real)
(declare-fun l_0_4_20 () Real)
(declare-fun l_0_4_32 () Real)
(declare-fun l_0_4_19 () Real)
(declare-fun l_0_4_31 () Real)
(declare-fun l_0_4_18 () Real)
(declare-fun l_0_4_30 () Real)
(declare-fun l_0_4_17 () Real)
(declare-fun l_0_4_29 () Real)
(declare-fun l_0_4_16 () Real)
(declare-fun l_0_4_4 () Real)
(declare-fun l_0_4_52 () Real)
(declare-fun l_0_4_7 () Real)
(declare-fun l_0_4_56 () Real)
(declare-fun l_0_4_169 () Real)
(declare-fun l_0_4_156 () Real)
(declare-fun l_0_4_168 () Real)
(declare-fun l_0_4_155 () Real)
(declare-fun l_0_4_167 () Real)
(declare-fun l_0_4_154 () Real)
(declare-fun l_0_4_166 () Real)
(declare-fun l_0_4_153 () Real)
(declare-fun l_0_4_165 () Real)
(declare-fun l_0_4_152 () Real)
(declare-fun l_0_4_164 () Real)
(declare-fun l_0_4_124 () Real)
(declare-fun l_0_4_111 () Real)
(declare-fun l_0_4_123 () Real)
(declare-fun l_0_4_110 () Real)
(declare-fun l_0_4_122 () Real)
(declare-fun l_0_4_109 () Real)
(declare-fun l_0_4_121 () Real)
(declare-fun l_0_4_108 () Real)
(declare-fun l_0_4_120 () Real)
(declare-fun l_0_4_107 () Real)
(declare-fun l_0_4_119 () Real)
(declare-fun l_0_4_11 () Real)
(declare-fun l_0_4_67 () Real)
(declare-fun l_0_4_22 () Real)
(declare-fun l_0_4_82 () Real)
(declare-fun l_0_4_37 () Real)
(declare-fun l_0_4_48 () Real)
(declare-fun l_0_4_3 () Real)
(declare-fun l_0_4_138 () Real)
(declare-fun l_0_4_137 () Real)
(declare-fun l_0_4_93 () Real)
(declare-fun l_0_4_92 () Real)
(declare-fun l_0_4_50 () Real)
(declare-fun l_0_4_5 () Real)
(declare-fun l_0_4_141 () Real)
(declare-fun l_0_4_140 () Real)
(declare-fun l_0_4_139 () Real)
(declare-fun l_0_4_96 () Real)
(declare-fun l_0_4_95 () Real)
(declare-fun l_0_4_94 () Real)
(declare-fun l_0_4_53 () Real)
(declare-fun l_0_4_8 () Real)
(declare-fun l_0_4_145 () Real)
(declare-fun l_0_4_144 () Real)
(declare-fun l_0_4_143 () Real)
(declare-fun l_0_4_142 () Real)
(declare-fun l_0_4_99 () Real)
(declare-fun l_0_4_98 () Real)
(declare-fun l_0_4_97 () Real)
(declare-fun l_0_4_100 () Real)
(declare-fun l_0_4_57 () Real)
(declare-fun l_0_4_150 () Real)
(declare-fun l_0_4_149 () Real)
(declare-fun l_0_4_148 () Real)
(declare-fun l_0_4_147 () Real)
(declare-fun l_0_4_146 () Real)
(declare-fun l_0_4_12 () Real)
(declare-fun l_0_4_105 () Real)
(declare-fun l_0_4_104 () Real)
(declare-fun l_0_4_103 () Real)
(declare-fun l_0_4_102 () Real)
(declare-fun l_0_4_101 () Real)
(declare-fun l_0_4_68 () Real)
(declare-fun l_0_4_23 () Real)
(declare-fun l_0_4_162 () Real)
(declare-fun l_0_4_161 () Real)
(declare-fun l_0_4_160 () Real)
(declare-fun l_0_4_159 () Real)
(declare-fun l_0_4_158 () Real)
(declare-fun l_0_4_157 () Real)
(declare-fun l_0_4_117 () Real)
(declare-fun l_0_4_116 () Real)
(declare-fun l_0_4_115 () Real)
(declare-fun l_0_4_114 () Real)
(declare-fun l_0_4_113 () Real)
(declare-fun l_0_4_112 () Real)
(declare-fun l_0_4_83 () Real)
(declare-fun l_0_4_38 () Real)
(declare-fun l_0_4_177 () Real)
(declare-fun l_0_4_176 () Real)
(declare-fun l_0_4_175 () Real)
(declare-fun l_0_4_174 () Real)
(declare-fun l_0_4_173 () Real)
(declare-fun l_0_4_172 () Real)
(declare-fun l_0_4_132 () Real)
(declare-fun l_0_4_131 () Real)
(declare-fun l_0_4_130 () Real)
(declare-fun l_0_4_129 () Real)
(declare-fun l_0_4_128 () Real)
(declare-fun l_0_4_127 () Real)
(declare-fun l_0_4_6 () Real)
(declare-fun l_0_4_51 () Real)
(declare-fun l_0_4_9 () Real)
(declare-fun l_0_4_54 () Real)
(declare-fun l_0_4_58 () Real)
(declare-fun l_0_4_13 () Real)
(declare-fun l_0_4_69 () Real)
(declare-fun l_0_4_24 () Real)
(declare-fun l_0_4_84 () Real)
(declare-fun l_0_4_39 () Real)
(declare-fun l_0_4_55 () Real)
(declare-fun l_0_4_10 () Real)
(declare-fun l_0_4_59 () Real)
(declare-fun l_0_4_14 () Real)
(declare-fun l_0_4_70 () Real)
(declare-fun l_0_4_25 () Real)
(declare-fun l_0_4_85 () Real)
(declare-fun l_0_4_40 () Real)
(declare-fun l_0_4_60 () Real)
(declare-fun l_0_4_15 () Real)
(declare-fun l_0_4_71 () Real)
(declare-fun l_0_4_26 () Real)
(declare-fun l_0_4_86 () Real)
(declare-fun l_0_4_41 () Real)
(declare-fun l_0_4_72 () Real)
(declare-fun l_0_4_27 () Real)
(declare-fun l_0_4_87 () Real)
(declare-fun l_0_4_42 () Real)
(declare-fun l_0_4_73 () Real)
(declare-fun l_0_4_28 () Real)
(declare-fun l_0_4_80 () Real)
(declare-fun l_0_4_35 () Real)
(declare-fun l_0_4_88 () Real)
(declare-fun l_0_4_43 () Real)
(declare-fun l_0_4_81 () Real)
(declare-fun l_0_4_36 () Real)
(declare-fun l_0_4_89 () Real)
(declare-fun l_0_4_44 () Real)
(declare-fun l_0_4_90 () Real)
(declare-fun l_0_4_45 () Real)
(declare-fun l_0_4_250 () Real)
(declare-fun l_0_4_235 () Real)
(declare-fun l_0_4_249 () Real)
(declare-fun l_0_4_234 () Real)
(declare-fun l_0_4_248 () Real)
(declare-fun l_0_4_233 () Real)
(declare-fun l_0_4_247 () Real)
(declare-fun l_0_4_232 () Real)
(declare-fun l_0_4_205 () Real)
(declare-fun l_0_4_190 () Real)
(declare-fun l_0_4_204 () Real)
(declare-fun l_0_4_189 () Real)
(declare-fun l_0_4_203 () Real)
(declare-fun l_0_4_188 () Real)
(declare-fun l_0_4_202 () Real)
(declare-fun l_0_4_187 () Real)
(declare-fun l_0_4_229 () Real)
(declare-fun l_0_4_184 () Real)
(declare-fun l_0_4_230 () Real)
(declare-fun l_0_4_228 () Real)
(declare-fun l_0_4_227 () Real)
(declare-fun l_0_4_185 () Real)
(declare-fun l_0_4_183 () Real)
(declare-fun l_0_4_182 () Real)
(declare-fun l_0_4_231 () Real)
(declare-fun l_0_4_186 () Real)
(declare-fun l_0_4_238 () Real)
(declare-fun l_0_4_237 () Real)
(declare-fun l_0_4_236 () Real)
(declare-fun l_0_4_193 () Real)
(declare-fun l_0_4_192 () Real)
(declare-fun l_0_4_191 () Real)
(declare-fun l_0_4_264 () Real)
(declare-fun l_0_4_263 () Real)
(declare-fun l_0_4_262 () Real)
(declare-fun l_0_4_219 () Real)
(declare-fun l_0_4_218 () Real)
(declare-fun l_0_4_217 () Real)
(declare-fun l_0_4_268 () Real)
(declare-fun l_0_4_253 () Real)
(declare-fun l_0_4_267 () Real)
(declare-fun l_0_4_252 () Real)
(declare-fun l_0_4_266 () Real)
(declare-fun l_0_4_251 () Real)
(declare-fun l_0_4_265 () Real)
(declare-fun l_0_4_223 () Real)
(declare-fun l_0_4_208 () Real)
(declare-fun l_0_4_222 () Real)
(declare-fun l_0_4_207 () Real)
(declare-fun l_0_4_221 () Real)
(declare-fun l_0_4_206 () Real)
(declare-fun l_0_4_220 () Real)
(declare-fun l_0_4_178 () Real)
(declare-fun l_0_4_163 () Real)
(declare-fun l_0_4_133 () Real)
(declare-fun l_0_4_118 () Real)
(declare-fun l_0_4_170 () Real)
(declare-fun l_0_4_125 () Real)
(declare-fun l_0_4_171 () Real)
(declare-fun l_0_4_126 () Real)
(declare-fun l_0_4_179 () Real)
(declare-fun l_0_4_134 () Real)
(declare-fun l_0_4_180 () Real)
(declare-fun l_0_4_135 () Real)
(declare-fun l_0_4_239 () Real)
(declare-fun l_0_4_194 () Real)
(declare-fun l_0_4_240 () Real)
(declare-fun l_0_4_195 () Real)
(declare-fun l_0_4_260 () Real)
(declare-fun l_0_4_215 () Real)
(declare-fun l_0_4_261 () Real)
(declare-fun l_0_4_216 () Real)
(declare-fun l_0_4_269 () Real)
(declare-fun l_0_4_224 () Real)
(declare-fun l_0_4_270 () Real)
(declare-fun l_0_4_225 () Real)
(declare-fun l_0_5_46 () Real)
(declare-fun l_0_5_304 () Real)
(declare-fun l_0_5_291 () Real)
(declare-fun l_0_5_303 () Real)
(declare-fun l_0_5_290 () Real)
(declare-fun l_0_5_302 () Real)
(declare-fun l_0_5_289 () Real)
(declare-fun l_0_5_301 () Real)
(declare-fun l_0_5_288 () Real)
(declare-fun l_0_5_300 () Real)
(declare-fun l_0_5_287 () Real)
(declare-fun l_0_5_299 () Real)
(declare-fun l_0_5_286 () Real)
(declare-fun l_0_5_214 () Real)
(declare-fun l_0_5_201 () Real)
(declare-fun l_0_5_213 () Real)
(declare-fun l_0_5_200 () Real)
(declare-fun l_0_5_212 () Real)
(declare-fun l_0_5_199 () Real)
(declare-fun l_0_5_211 () Real)
(declare-fun l_0_5_198 () Real)
(declare-fun l_0_5_210 () Real)
(declare-fun l_0_5_197 () Real)
(declare-fun l_0_5_209 () Real)
(declare-fun l_0_5_196 () Real)
(declare-fun l_0_5_1 () Real)
(declare-fun l_0_5_91 () Real)
(declare-fun l_0_5_273 () Real)
(declare-fun l_0_5_272 () Real)
(declare-fun l_0_5_183 () Real)
(declare-fun l_0_5_182 () Real)
(declare-fun l_0_5_136 () Real)
(declare-fun l_0_5_313 () Real)
(declare-fun l_0_5_298 () Real)
(declare-fun l_0_5_312 () Real)
(declare-fun l_0_5_297 () Real)
(declare-fun l_0_5_311 () Real)
(declare-fun l_0_5_296 () Real)
(declare-fun l_0_5_310 () Real)
(declare-fun l_0_5_295 () Real)
(declare-fun l_0_5_309 () Real)
(declare-fun l_0_5_294 () Real)
(declare-fun l_0_5_308 () Real)
(declare-fun l_0_5_293 () Real)
(declare-fun l_0_5_307 () Real)
(declare-fun l_0_5_292 () Real)
(declare-fun l_0_5_223 () Real)
(declare-fun l_0_5_208 () Real)
(declare-fun l_0_5_222 () Real)
(declare-fun l_0_5_207 () Real)
(declare-fun l_0_5_221 () Real)
(declare-fun l_0_5_206 () Real)
(declare-fun l_0_5_220 () Real)
(declare-fun l_0_5_205 () Real)
(declare-fun l_0_5_219 () Real)
(declare-fun l_0_5_204 () Real)
(declare-fun l_0_5_218 () Real)
(declare-fun l_0_5_203 () Real)
(declare-fun l_0_5_217 () Real)
(declare-fun l_0_5_202 () Real)
(declare-fun _a_3_ () Real)
(declare-fun l_0_5_271 () Real)
(declare-fun l_0_5_181 () Real)
(declare-fun _a_4_ () Real)
(declare-fun l_0_5_280 () Real)
(declare-fun l_0_5_279 () Real)
(declare-fun l_0_5_278 () Real)
(declare-fun l_0_5_277 () Real)
(declare-fun l_0_5_190 () Real)
(declare-fun l_0_5_189 () Real)
(declare-fun l_0_5_188 () Real)
(declare-fun l_0_5_187 () Real)
(declare-fun _a_5_ () Real)
(declare-fun _a_0_ () Real)
(declare-fun l_0_5_274 () Real)
(declare-fun l_0_5_226 () Real)
(declare-fun l_0_5_184 () Real)
(declare-fun _a_1_ () Real)
(declare-fun l_0_5_281 () Real)
(declare-fun l_0_5_191 () Real)
(declare-fun _a_2_ () Real)
(declare-fun l_0_5_47 () Real)
(declare-fun l_0_5_151 () Real)
(declare-fun l_0_5_106 () Real)
(declare-fun l_0_5_2 () Real)
(declare-fun l_0_5_79 () Real)
(declare-fun l_0_5_66 () Real)
(declare-fun l_0_5_78 () Real)
(declare-fun l_0_5_65 () Real)
(declare-fun l_0_5_77 () Real)
(declare-fun l_0_5_64 () Real)
(declare-fun l_0_5_76 () Real)
(declare-fun l_0_5_63 () Real)
(declare-fun l_0_5_75 () Real)
(declare-fun l_0_5_62 () Real)
(declare-fun l_0_5_74 () Real)
(declare-fun l_0_5_61 () Real)
(declare-fun l_0_5_49 () Real)
(declare-fun l_0_5_259 () Real)
(declare-fun l_0_5_246 () Real)
(declare-fun l_0_5_258 () Real)
(declare-fun l_0_5_245 () Real)
(declare-fun l_0_5_257 () Real)
(declare-fun l_0_5_244 () Real)
(declare-fun l_0_5_256 () Real)
(declare-fun l_0_5_243 () Real)
(declare-fun l_0_5_255 () Real)
(declare-fun l_0_5_242 () Real)
(declare-fun l_0_5_254 () Real)
(declare-fun l_0_5_241 () Real)
(declare-fun l_0_5_34 () Real)
(declare-fun l_0_5_21 () Real)
(declare-fun l_0_5_33 () Real)
(declare-fun l_0_5_20 () Real)
(declare-fun l_0_5_32 () Real)
(declare-fun l_0_5_19 () Real)
(declare-fun l_0_5_31 () Real)
(declare-fun l_0_5_18 () Real)
(declare-fun l_0_5_30 () Real)
(declare-fun l_0_5_17 () Real)
(declare-fun l_0_5_29 () Real)
(declare-fun l_0_5_16 () Real)
(declare-fun l_0_5_4 () Real)
(declare-fun l_0_5_52 () Real)
(declare-fun l_0_5_7 () Real)
(declare-fun l_0_5_56 () Real)
(declare-fun l_0_5_169 () Real)
(declare-fun l_0_5_156 () Real)
(declare-fun l_0_5_168 () Real)
(declare-fun l_0_5_155 () Real)
(declare-fun l_0_5_167 () Real)
(declare-fun l_0_5_154 () Real)
(declare-fun l_0_5_166 () Real)
(declare-fun l_0_5_153 () Real)
(declare-fun l_0_5_165 () Real)
(declare-fun l_0_5_152 () Real)
(declare-fun l_0_5_164 () Real)
(declare-fun l_0_5_124 () Real)
(declare-fun l_0_5_111 () Real)
(declare-fun l_0_5_123 () Real)
(declare-fun l_0_5_110 () Real)
(declare-fun l_0_5_122 () Real)
(declare-fun l_0_5_109 () Real)
(declare-fun l_0_5_121 () Real)
(declare-fun l_0_5_108 () Real)
(declare-fun l_0_5_120 () Real)
(declare-fun l_0_5_107 () Real)
(declare-fun l_0_5_119 () Real)
(declare-fun l_0_5_11 () Real)
(declare-fun l_0_5_67 () Real)
(declare-fun l_0_5_22 () Real)
(declare-fun l_0_5_82 () Real)
(declare-fun l_0_5_37 () Real)
(declare-fun l_0_5_48 () Real)
(declare-fun l_0_5_3 () Real)
(declare-fun l_0_5_138 () Real)
(declare-fun l_0_5_137 () Real)
(declare-fun l_0_5_93 () Real)
(declare-fun l_0_5_92 () Real)
(declare-fun l_0_5_50 () Real)
(declare-fun l_0_5_5 () Real)
(declare-fun l_0_5_141 () Real)
(declare-fun l_0_5_140 () Real)
(declare-fun l_0_5_139 () Real)
(declare-fun l_0_5_96 () Real)
(declare-fun l_0_5_95 () Real)
(declare-fun l_0_5_94 () Real)
(declare-fun l_0_5_53 () Real)
(declare-fun l_0_5_8 () Real)
(declare-fun l_0_5_145 () Real)
(declare-fun l_0_5_144 () Real)
(declare-fun l_0_5_143 () Real)
(declare-fun l_0_5_142 () Real)
(declare-fun l_0_5_99 () Real)
(declare-fun l_0_5_98 () Real)
(declare-fun l_0_5_97 () Real)
(declare-fun l_0_5_100 () Real)
(declare-fun l_0_5_57 () Real)
(declare-fun l_0_5_150 () Real)
(declare-fun l_0_5_149 () Real)
(declare-fun l_0_5_148 () Real)
(declare-fun l_0_5_147 () Real)
(declare-fun l_0_5_146 () Real)
(declare-fun l_0_5_12 () Real)
(declare-fun l_0_5_105 () Real)
(declare-fun l_0_5_104 () Real)
(declare-fun l_0_5_103 () Real)
(declare-fun l_0_5_102 () Real)
(declare-fun l_0_5_101 () Real)
(declare-fun l_0_5_68 () Real)
(declare-fun l_0_5_23 () Real)
(declare-fun l_0_5_162 () Real)
(declare-fun l_0_5_161 () Real)
(declare-fun l_0_5_160 () Real)
(declare-fun l_0_5_159 () Real)
(declare-fun l_0_5_158 () Real)
(declare-fun l_0_5_157 () Real)
(declare-fun l_0_5_117 () Real)
(declare-fun l_0_5_116 () Real)
(declare-fun l_0_5_115 () Real)
(declare-fun l_0_5_114 () Real)
(declare-fun l_0_5_113 () Real)
(declare-fun l_0_5_112 () Real)
(declare-fun l_0_5_83 () Real)
(declare-fun l_0_5_38 () Real)
(declare-fun l_0_5_177 () Real)
(declare-fun l_0_5_176 () Real)
(declare-fun l_0_5_175 () Real)
(declare-fun l_0_5_174 () Real)
(declare-fun l_0_5_173 () Real)
(declare-fun l_0_5_172 () Real)
(declare-fun l_0_5_132 () Real)
(declare-fun l_0_5_131 () Real)
(declare-fun l_0_5_130 () Real)
(declare-fun l_0_5_129 () Real)
(declare-fun l_0_5_128 () Real)
(declare-fun l_0_5_127 () Real)
(declare-fun l_0_5_6 () Real)
(declare-fun l_0_5_51 () Real)
(declare-fun l_0_5_9 () Real)
(declare-fun l_0_5_54 () Real)
(declare-fun l_0_5_58 () Real)
(declare-fun l_0_5_13 () Real)
(declare-fun l_0_5_69 () Real)
(declare-fun l_0_5_24 () Real)
(declare-fun l_0_5_84 () Real)
(declare-fun l_0_5_39 () Real)
(declare-fun l_0_5_55 () Real)
(declare-fun l_0_5_10 () Real)
(declare-fun l_0_5_59 () Real)
(declare-fun l_0_5_14 () Real)
(declare-fun l_0_5_70 () Real)
(declare-fun l_0_5_25 () Real)
(declare-fun l_0_5_85 () Real)
(declare-fun l_0_5_40 () Real)
(declare-fun l_0_5_60 () Real)
(declare-fun l_0_5_15 () Real)
(declare-fun l_0_5_71 () Real)
(declare-fun l_0_5_26 () Real)
(declare-fun l_0_5_86 () Real)
(declare-fun l_0_5_41 () Real)
(declare-fun l_0_5_72 () Real)
(declare-fun l_0_5_27 () Real)
(declare-fun l_0_5_87 () Real)
(declare-fun l_0_5_42 () Real)
(declare-fun l_0_5_73 () Real)
(declare-fun l_0_5_28 () Real)
(declare-fun l_0_5_80 () Real)
(declare-fun l_0_5_35 () Real)
(declare-fun l_0_5_88 () Real)
(declare-fun l_0_5_43 () Real)
(declare-fun l_0_5_81 () Real)
(declare-fun l_0_5_36 () Real)
(declare-fun l_0_5_89 () Real)
(declare-fun l_0_5_44 () Real)
(declare-fun l_0_5_90 () Real)
(declare-fun l_0_5_45 () Real)
(declare-fun l_0_5_250 () Real)
(declare-fun l_0_5_235 () Real)
(declare-fun l_0_5_249 () Real)
(declare-fun l_0_5_234 () Real)
(declare-fun l_0_5_248 () Real)
(declare-fun l_0_5_233 () Real)
(declare-fun l_0_5_247 () Real)
(declare-fun l_0_5_232 () Real)
(declare-fun l_0_5_275 () Real)
(declare-fun l_0_5_227 () Real)
(declare-fun l_0_5_185 () Real)
(declare-fun l_0_5_276 () Real)
(declare-fun l_0_5_229 () Real)
(declare-fun l_0_5_186 () Real)
(declare-fun l_0_5_283 () Real)
(declare-fun l_0_5_282 () Real)
(declare-fun l_0_5_236 () Real)
(declare-fun l_0_5_193 () Real)
(declare-fun l_0_5_192 () Real)
(declare-fun l_0_5_262 () Real)
(declare-fun l_0_5_228 () Real)
(declare-fun l_0_5_230 () Real)
(declare-fun l_0_5_237 () Real)
(declare-fun l_0_5_263 () Real)
(declare-fun l_0_5_231 () Real)
(declare-fun l_0_5_238 () Real)
(declare-fun l_0_5_264 () Real)
(declare-fun l_0_5_239 () Real)
(declare-fun l_0_5_265 () Real)
(declare-fun l_0_5_240 () Real)
(declare-fun l_0_5_251 () Real)
(declare-fun l_0_5_266 () Real)
(declare-fun l_0_5_252 () Real)
(declare-fun l_0_5_267 () Real)
(declare-fun l_0_5_253 () Real)
(declare-fun l_0_5_260 () Real)
(declare-fun l_0_5_268 () Real)
(declare-fun l_0_5_261 () Real)
(declare-fun l_0_5_269 () Real)
(declare-fun l_0_5_270 () Real)
(declare-fun l_0_5_178 () Real)
(declare-fun l_0_5_163 () Real)
(declare-fun l_0_5_133 () Real)
(declare-fun l_0_5_118 () Real)
(declare-fun l_0_5_170 () Real)
(declare-fun l_0_5_125 () Real)
(declare-fun l_0_5_171 () Real)
(declare-fun l_0_5_126 () Real)
(declare-fun l_0_5_179 () Real)
(declare-fun l_0_5_134 () Real)
(declare-fun l_0_5_180 () Real)
(declare-fun l_0_5_135 () Real)
(declare-fun l_0_5_284 () Real)
(declare-fun l_0_5_194 () Real)
(declare-fun l_0_5_285 () Real)
(declare-fun l_0_5_195 () Real)
(declare-fun l_0_5_305 () Real)
(declare-fun l_0_5_215 () Real)
(declare-fun l_0_5_306 () Real)
(declare-fun l_0_5_216 () Real)
(declare-fun l_0_5_314 () Real)
(declare-fun l_0_5_224 () Real)
(declare-fun l_0_5_315 () Real)
(declare-fun l_0_5_225 () Real)
(declare-fun l_0_6_316 () Real)
(declare-fun l_0_6_271 () Real)
(declare-fun l_0_6_181 () Real)
(declare-fun l_0_6_46 () Real)
(declare-fun l_0_6_319 () Real)
(declare-fun l_0_6_274 () Real)
(declare-fun l_0_6_226 () Real)
(declare-fun l_0_6_184 () Real)
(declare-fun l_0_6_1 () Real)
(declare-fun l_0_6_91 () Real)
(declare-fun l_0_6_326 () Real)
(declare-fun l_0_6_281 () Real)
(declare-fun l_0_6_191 () Real)
(declare-fun l_0_6_136 () Real)
(declare-fun l_0_6_349 () Real)
(declare-fun l_0_6_336 () Real)
(declare-fun l_0_6_348 () Real)
(declare-fun l_0_6_335 () Real)
(declare-fun l_0_6_347 () Real)
(declare-fun l_0_6_334 () Real)
(declare-fun l_0_6_346 () Real)
(declare-fun l_0_6_333 () Real)
(declare-fun l_0_6_345 () Real)
(declare-fun l_0_6_332 () Real)
(declare-fun l_0_6_344 () Real)
(declare-fun l_0_6_331 () Real)
(declare-fun l_0_6_304 () Real)
(declare-fun l_0_6_291 () Real)
(declare-fun l_0_6_303 () Real)
(declare-fun l_0_6_290 () Real)
(declare-fun l_0_6_302 () Real)
(declare-fun l_0_6_289 () Real)
(declare-fun l_0_6_301 () Real)
(declare-fun l_0_6_288 () Real)
(declare-fun l_0_6_300 () Real)
(declare-fun l_0_6_287 () Real)
(declare-fun l_0_6_299 () Real)
(declare-fun l_0_6_286 () Real)
(declare-fun l_0_6_214 () Real)
(declare-fun l_0_6_201 () Real)
(declare-fun l_0_6_213 () Real)
(declare-fun l_0_6_200 () Real)
(declare-fun l_0_6_212 () Real)
(declare-fun l_0_6_199 () Real)
(declare-fun l_0_6_211 () Real)
(declare-fun l_0_6_198 () Real)
(declare-fun l_0_6_210 () Real)
(declare-fun l_0_6_197 () Real)
(declare-fun l_0_6_209 () Real)
(declare-fun l_0_6_196 () Real)
(declare-fun l_0_6_318 () Real)
(declare-fun l_0_6_317 () Real)
(declare-fun l_0_6_273 () Real)
(declare-fun l_0_6_272 () Real)
(declare-fun l_0_6_183 () Real)
(declare-fun l_0_6_182 () Real)
(declare-fun l_0_6_358 () Real)
(declare-fun l_0_6_343 () Real)
(declare-fun l_0_6_357 () Real)
(declare-fun l_0_6_342 () Real)
(declare-fun l_0_6_356 () Real)
(declare-fun l_0_6_341 () Real)
(declare-fun l_0_6_355 () Real)
(declare-fun l_0_6_340 () Real)
(declare-fun l_0_6_354 () Real)
(declare-fun l_0_6_339 () Real)
(declare-fun l_0_6_353 () Real)
(declare-fun l_0_6_338 () Real)
(declare-fun l_0_6_352 () Real)
(declare-fun l_0_6_337 () Real)
(declare-fun l_0_6_313 () Real)
(declare-fun l_0_6_298 () Real)
(declare-fun l_0_6_312 () Real)
(declare-fun l_0_6_297 () Real)
(declare-fun l_0_6_311 () Real)
(declare-fun l_0_6_296 () Real)
(declare-fun l_0_6_310 () Real)
(declare-fun l_0_6_295 () Real)
(declare-fun l_0_6_309 () Real)
(declare-fun l_0_6_294 () Real)
(declare-fun l_0_6_308 () Real)
(declare-fun l_0_6_293 () Real)
(declare-fun l_0_6_307 () Real)
(declare-fun l_0_6_292 () Real)
(declare-fun l_0_6_223 () Real)
(declare-fun l_0_6_208 () Real)
(declare-fun l_0_6_222 () Real)
(declare-fun l_0_6_207 () Real)
(declare-fun l_0_6_221 () Real)
(declare-fun l_0_6_206 () Real)
(declare-fun l_0_6_220 () Real)
(declare-fun l_0_6_205 () Real)
(declare-fun l_0_6_219 () Real)
(declare-fun l_0_6_204 () Real)
(declare-fun l_0_6_218 () Real)
(declare-fun l_0_6_203 () Real)
(declare-fun l_0_6_217 () Real)
(declare-fun l_0_6_202 () Real)
(declare-fun l_0_6_325 () Real)
(declare-fun l_0_6_324 () Real)
(declare-fun l_0_6_323 () Real)
(declare-fun l_0_6_322 () Real)
(declare-fun l_0_6_280 () Real)
(declare-fun l_0_6_279 () Real)
(declare-fun l_0_6_278 () Real)
(declare-fun l_0_6_277 () Real)
(declare-fun l_0_6_190 () Real)
(declare-fun l_0_6_189 () Real)
(declare-fun l_0_6_188 () Real)
(declare-fun l_0_6_187 () Real)
(declare-fun l_0_6_47 () Real)
(declare-fun l_0_6_151 () Real)
(declare-fun l_0_6_106 () Real)
(declare-fun l_0_6_2 () Real)
(declare-fun l_0_6_79 () Real)
(declare-fun l_0_6_66 () Real)
(declare-fun l_0_6_78 () Real)
(declare-fun l_0_6_65 () Real)
(declare-fun l_0_6_77 () Real)
(declare-fun l_0_6_64 () Real)
(declare-fun l_0_6_76 () Real)
(declare-fun l_0_6_63 () Real)
(declare-fun l_0_6_75 () Real)
(declare-fun l_0_6_62 () Real)
(declare-fun l_0_6_74 () Real)
(declare-fun l_0_6_61 () Real)
(declare-fun l_0_6_49 () Real)
(declare-fun l_0_6_259 () Real)
(declare-fun l_0_6_246 () Real)
(declare-fun l_0_6_258 () Real)
(declare-fun l_0_6_245 () Real)
(declare-fun l_0_6_257 () Real)
(declare-fun l_0_6_244 () Real)
(declare-fun l_0_6_256 () Real)
(declare-fun l_0_6_243 () Real)
(declare-fun l_0_6_255 () Real)
(declare-fun l_0_6_242 () Real)
(declare-fun l_0_6_254 () Real)
(declare-fun l_0_6_241 () Real)
(declare-fun l_0_6_34 () Real)
(declare-fun l_0_6_21 () Real)
(declare-fun l_0_6_33 () Real)
(declare-fun l_0_6_20 () Real)
(declare-fun l_0_6_32 () Real)
(declare-fun l_0_6_19 () Real)
(declare-fun l_0_6_31 () Real)
(declare-fun l_0_6_18 () Real)
(declare-fun l_0_6_30 () Real)
(declare-fun l_0_6_17 () Real)
(declare-fun l_0_6_29 () Real)
(declare-fun l_0_6_16 () Real)
(declare-fun l_0_6_4 () Real)
(declare-fun l_0_6_52 () Real)
(declare-fun l_0_6_7 () Real)
(declare-fun l_0_6_56 () Real)
(declare-fun l_0_6_169 () Real)
(declare-fun l_0_6_156 () Real)
(declare-fun l_0_6_168 () Real)
(declare-fun l_0_6_155 () Real)
(declare-fun l_0_6_167 () Real)
(declare-fun l_0_6_154 () Real)
(declare-fun l_0_6_166 () Real)
(declare-fun l_0_6_153 () Real)
(declare-fun l_0_6_165 () Real)
(declare-fun l_0_6_152 () Real)
(declare-fun l_0_6_164 () Real)
(declare-fun l_0_6_124 () Real)
(declare-fun l_0_6_111 () Real)
(declare-fun l_0_6_123 () Real)
(declare-fun l_0_6_110 () Real)
(declare-fun l_0_6_122 () Real)
(declare-fun l_0_6_109 () Real)
(declare-fun l_0_6_121 () Real)
(declare-fun l_0_6_108 () Real)
(declare-fun l_0_6_120 () Real)
(declare-fun l_0_6_107 () Real)
(declare-fun l_0_6_119 () Real)
(declare-fun l_0_6_11 () Real)
(declare-fun l_0_6_67 () Real)
(declare-fun l_0_6_22 () Real)
(declare-fun l_0_6_82 () Real)
(declare-fun l_0_6_37 () Real)
(declare-fun l_0_6_48 () Real)
(declare-fun l_0_6_3 () Real)
(declare-fun l_0_6_138 () Real)
(declare-fun l_0_6_137 () Real)
(declare-fun l_0_6_93 () Real)
(declare-fun l_0_6_92 () Real)
(declare-fun l_0_6_50 () Real)
(declare-fun l_0_6_5 () Real)
(declare-fun l_0_6_141 () Real)
(declare-fun l_0_6_140 () Real)
(declare-fun l_0_6_139 () Real)
(declare-fun l_0_6_96 () Real)
(declare-fun l_0_6_95 () Real)
(declare-fun l_0_6_94 () Real)
(declare-fun l_0_6_53 () Real)
(declare-fun l_0_6_8 () Real)
(declare-fun l_0_6_145 () Real)
(declare-fun l_0_6_144 () Real)
(declare-fun l_0_6_143 () Real)
(declare-fun l_0_6_142 () Real)
(declare-fun l_0_6_99 () Real)
(declare-fun l_0_6_98 () Real)
(declare-fun l_0_6_97 () Real)
(declare-fun l_0_6_100 () Real)
(declare-fun l_0_6_57 () Real)
(declare-fun l_0_6_150 () Real)
(declare-fun l_0_6_149 () Real)
(declare-fun l_0_6_148 () Real)
(declare-fun l_0_6_147 () Real)
(declare-fun l_0_6_146 () Real)
(declare-fun l_0_6_12 () Real)
(declare-fun l_0_6_105 () Real)
(declare-fun l_0_6_104 () Real)
(declare-fun l_0_6_103 () Real)
(declare-fun l_0_6_102 () Real)
(declare-fun l_0_6_101 () Real)
(declare-fun l_0_6_68 () Real)
(declare-fun l_0_6_23 () Real)
(declare-fun l_0_6_162 () Real)
(declare-fun l_0_6_161 () Real)
(declare-fun l_0_6_160 () Real)
(declare-fun l_0_6_159 () Real)
(declare-fun l_0_6_158 () Real)
(declare-fun l_0_6_157 () Real)
(declare-fun l_0_6_117 () Real)
(declare-fun l_0_6_116 () Real)
(declare-fun l_0_6_115 () Real)
(declare-fun l_0_6_114 () Real)
(declare-fun l_0_6_113 () Real)
(declare-fun l_0_6_112 () Real)
(declare-fun l_0_6_83 () Real)
(declare-fun l_0_6_38 () Real)
(declare-fun l_0_6_177 () Real)
(declare-fun l_0_6_176 () Real)
(declare-fun l_0_6_175 () Real)
(declare-fun l_0_6_174 () Real)
(declare-fun l_0_6_173 () Real)
(declare-fun l_0_6_172 () Real)
(declare-fun l_0_6_132 () Real)
(declare-fun l_0_6_131 () Real)
(declare-fun l_0_6_130 () Real)
(declare-fun l_0_6_129 () Real)
(declare-fun l_0_6_128 () Real)
(declare-fun l_0_6_127 () Real)
(declare-fun l_0_6_6 () Real)
(declare-fun l_0_6_51 () Real)
(declare-fun l_0_6_9 () Real)
(declare-fun l_0_6_54 () Real)
(declare-fun l_0_6_58 () Real)
(declare-fun l_0_6_13 () Real)
(declare-fun l_0_6_69 () Real)
(declare-fun l_0_6_24 () Real)
(declare-fun l_0_6_84 () Real)
(declare-fun l_0_6_39 () Real)
(declare-fun l_0_6_55 () Real)
(declare-fun l_0_6_10 () Real)
(declare-fun l_0_6_59 () Real)
(declare-fun l_0_6_14 () Real)
(declare-fun l_0_6_70 () Real)
(declare-fun l_0_6_25 () Real)
(declare-fun l_0_6_85 () Real)
(declare-fun l_0_6_40 () Real)
(declare-fun l_0_6_60 () Real)
(declare-fun l_0_6_15 () Real)
(declare-fun l_0_6_71 () Real)
(declare-fun l_0_6_26 () Real)
(declare-fun l_0_6_86 () Real)
(declare-fun l_0_6_41 () Real)
(declare-fun l_0_6_72 () Real)
(declare-fun l_0_6_27 () Real)
(declare-fun l_0_6_87 () Real)
(declare-fun l_0_6_42 () Real)
(declare-fun l_0_6_73 () Real)
(declare-fun l_0_6_28 () Real)
(declare-fun l_0_6_80 () Real)
(declare-fun l_0_6_35 () Real)
(declare-fun l_0_6_88 () Real)
(declare-fun l_0_6_43 () Real)
(declare-fun l_0_6_81 () Real)
(declare-fun l_0_6_36 () Real)
(declare-fun l_0_6_89 () Real)
(declare-fun l_0_6_44 () Real)
(declare-fun l_0_6_90 () Real)
(declare-fun l_0_6_45 () Real)
(declare-fun l_0_6_250 () Real)
(declare-fun l_0_6_235 () Real)
(declare-fun l_0_6_249 () Real)
(declare-fun l_0_6_234 () Real)
(declare-fun l_0_6_248 () Real)
(declare-fun l_0_6_233 () Real)
(declare-fun l_0_6_247 () Real)
(declare-fun l_0_6_232 () Real)
(declare-fun l_0_6_320 () Real)
(declare-fun l_0_6_275 () Real)
(declare-fun l_0_6_227 () Real)
(declare-fun l_0_6_185 () Real)
(declare-fun l_0_6_321 () Real)
(declare-fun l_0_6_276 () Real)
(declare-fun l_0_6_229 () Real)
(declare-fun l_0_6_186 () Real)
(declare-fun l_0_6_328 () Real)
(declare-fun l_0_6_327 () Real)
(declare-fun l_0_6_283 () Real)
(declare-fun l_0_6_282 () Real)
(declare-fun l_0_6_236 () Real)
(declare-fun l_0_6_193 () Real)
(declare-fun l_0_6_192 () Real)
(declare-fun l_0_6_262 () Real)
(declare-fun l_0_6_228 () Real)
(declare-fun l_0_6_230 () Real)
(declare-fun l_0_6_237 () Real)
(declare-fun l_0_6_263 () Real)
(declare-fun l_0_6_231 () Real)
(declare-fun l_0_6_238 () Real)
(declare-fun l_0_6_264 () Real)
(declare-fun l_0_6_239 () Real)
(declare-fun l_0_6_265 () Real)
(declare-fun l_0_6_240 () Real)
(declare-fun l_0_6_251 () Real)
(declare-fun l_0_6_266 () Real)
(declare-fun l_0_6_252 () Real)
(declare-fun l_0_6_267 () Real)
(declare-fun l_0_6_253 () Real)
(declare-fun l_0_6_260 () Real)
(declare-fun l_0_6_268 () Real)
(declare-fun l_0_6_261 () Real)
(declare-fun l_0_6_269 () Real)
(declare-fun l_0_6_270 () Real)
(declare-fun l_0_6_178 () Real)
(declare-fun l_0_6_163 () Real)
(declare-fun l_0_6_133 () Real)
(declare-fun l_0_6_118 () Real)
(declare-fun l_0_6_170 () Real)
(declare-fun l_0_6_125 () Real)
(declare-fun l_0_6_171 () Real)
(declare-fun l_0_6_126 () Real)
(declare-fun l_0_6_179 () Real)
(declare-fun l_0_6_134 () Real)
(declare-fun l_0_6_180 () Real)
(declare-fun l_0_6_135 () Real)
(declare-fun l_0_6_329 () Real)
(declare-fun l_0_6_284 () Real)
(declare-fun l_0_6_194 () Real)
(declare-fun l_0_6_330 () Real)
(declare-fun l_0_6_285 () Real)
(declare-fun l_0_6_195 () Real)
(declare-fun l_0_6_350 () Real)
(declare-fun l_0_6_305 () Real)
(declare-fun l_0_6_215 () Real)
(declare-fun l_0_6_351 () Real)
(declare-fun l_0_6_306 () Real)
(declare-fun l_0_6_216 () Real)
(declare-fun l_0_6_359 () Real)
(declare-fun l_0_6_314 () Real)
(declare-fun l_0_6_224 () Real)
(declare-fun l_0_6_360 () Real)
(declare-fun l_0_6_315 () Real)
(declare-fun l_0_6_225 () Real)
(declare-fun l_0_7_91 () Real)
(declare-fun l_0_7_403 () Real)
(declare-fun l_0_7_388 () Real)
(declare-fun l_0_7_402 () Real)
(declare-fun l_0_7_387 () Real)
(declare-fun l_0_7_401 () Real)
(declare-fun l_0_7_386 () Real)
(declare-fun l_0_7_400 () Real)
(declare-fun l_0_7_385 () Real)
(declare-fun l_0_7_399 () Real)
(declare-fun l_0_7_384 () Real)
(declare-fun l_0_7_398 () Real)
(declare-fun l_0_7_383 () Real)
(declare-fun l_0_7_397 () Real)
(declare-fun l_0_7_382 () Real)
(declare-fun l_0_7_358 () Real)
(declare-fun l_0_7_343 () Real)
(declare-fun l_0_7_357 () Real)
(declare-fun l_0_7_342 () Real)
(declare-fun l_0_7_356 () Real)
(declare-fun l_0_7_341 () Real)
(declare-fun l_0_7_355 () Real)
(declare-fun l_0_7_340 () Real)
(declare-fun l_0_7_354 () Real)
(declare-fun l_0_7_339 () Real)
(declare-fun l_0_7_353 () Real)
(declare-fun l_0_7_338 () Real)
(declare-fun l_0_7_352 () Real)
(declare-fun l_0_7_337 () Real)
(declare-fun l_0_7_313 () Real)
(declare-fun l_0_7_298 () Real)
(declare-fun l_0_7_312 () Real)
(declare-fun l_0_7_297 () Real)
(declare-fun l_0_7_311 () Real)
(declare-fun l_0_7_296 () Real)
(declare-fun l_0_7_310 () Real)
(declare-fun l_0_7_295 () Real)
(declare-fun l_0_7_309 () Real)
(declare-fun l_0_7_294 () Real)
(declare-fun l_0_7_308 () Real)
(declare-fun l_0_7_293 () Real)
(declare-fun l_0_7_307 () Real)
(declare-fun l_0_7_292 () Real)
(declare-fun l_0_7_223 () Real)
(declare-fun l_0_7_208 () Real)
(declare-fun l_0_7_222 () Real)
(declare-fun l_0_7_207 () Real)
(declare-fun l_0_7_221 () Real)
(declare-fun l_0_7_206 () Real)
(declare-fun l_0_7_220 () Real)
(declare-fun l_0_7_205 () Real)
(declare-fun l_0_7_219 () Real)
(declare-fun l_0_7_204 () Real)
(declare-fun l_0_7_218 () Real)
(declare-fun l_0_7_203 () Real)
(declare-fun l_0_7_217 () Real)
(declare-fun l_0_7_202 () Real)
(declare-fun l_0_7_136 () Real)
(declare-fun l_0_7_390 () Real)
(declare-fun l_0_7_363 () Real)
(declare-fun l_0_7_389 () Real)
(declare-fun l_0_7_362 () Real)
(declare-fun l_0_7_345 () Real)
(declare-fun l_0_7_318 () Real)
(declare-fun l_0_7_344 () Real)
(declare-fun l_0_7_317 () Real)
(declare-fun l_0_7_300 () Real)
(declare-fun l_0_7_273 () Real)
(declare-fun l_0_7_299 () Real)
(declare-fun l_0_7_272 () Real)
(declare-fun l_0_7_210 () Real)
(declare-fun l_0_7_183 () Real)
(declare-fun l_0_7_209 () Real)
(declare-fun l_0_7_182 () Real)
(declare-fun l_0_7_371 () Real)
(declare-fun l_0_7_361 () Real)
(declare-fun l_0_7_326 () Real)
(declare-fun l_0_7_316 () Real)
(declare-fun l_0_7_281 () Real)
(declare-fun l_0_7_271 () Real)
(declare-fun l_0_7_226 () Real)
(declare-fun l_0_7_191 () Real)
(declare-fun l_0_7_181 () Real)
(declare-fun l_0_7_46 () Real)
(declare-fun l_0_7_394 () Real)
(declare-fun l_0_7_381 () Real)
(declare-fun l_0_7_393 () Real)
(declare-fun l_0_7_380 () Real)
(declare-fun l_0_7_392 () Real)
(declare-fun l_0_7_379 () Real)
(declare-fun l_0_7_391 () Real)
(declare-fun l_0_7_378 () Real)
(declare-fun l_0_7_377 () Real)
(declare-fun l_0_7_376 () Real)
(declare-fun l_0_7_349 () Real)
(declare-fun l_0_7_336 () Real)
(declare-fun l_0_7_348 () Real)
(declare-fun l_0_7_335 () Real)
(declare-fun l_0_7_347 () Real)
(declare-fun l_0_7_334 () Real)
(declare-fun l_0_7_346 () Real)
(declare-fun l_0_7_333 () Real)
(declare-fun l_0_7_332 () Real)
(declare-fun l_0_7_331 () Real)
(declare-fun l_0_7_304 () Real)
(declare-fun l_0_7_291 () Real)
(declare-fun l_0_7_303 () Real)
(declare-fun l_0_7_290 () Real)
(declare-fun l_0_7_302 () Real)
(declare-fun l_0_7_289 () Real)
(declare-fun l_0_7_301 () Real)
(declare-fun l_0_7_288 () Real)
(declare-fun l_0_7_287 () Real)
(declare-fun l_0_7_286 () Real)
(declare-fun l_0_7_214 () Real)
(declare-fun l_0_7_201 () Real)
(declare-fun l_0_7_213 () Real)
(declare-fun l_0_7_200 () Real)
(declare-fun l_0_7_212 () Real)
(declare-fun l_0_7_199 () Real)
(declare-fun l_0_7_211 () Real)
(declare-fun l_0_7_198 () Real)
(declare-fun l_0_7_197 () Real)
(declare-fun l_0_7_196 () Real)
(declare-fun l_0_7_1 () Real)
(declare-fun l_0_7_47 () Real)
(declare-fun l_0_7_151 () Real)
(declare-fun l_0_7_106 () Real)
(declare-fun l_0_7_2 () Real)
(declare-fun l_0_7_79 () Real)
(declare-fun l_0_7_66 () Real)
(declare-fun l_0_7_78 () Real)
(declare-fun l_0_7_65 () Real)
(declare-fun l_0_7_77 () Real)
(declare-fun l_0_7_64 () Real)
(declare-fun l_0_7_76 () Real)
(declare-fun l_0_7_63 () Real)
(declare-fun l_0_7_75 () Real)
(declare-fun l_0_7_62 () Real)
(declare-fun l_0_7_74 () Real)
(declare-fun l_0_7_61 () Real)
(declare-fun l_0_7_49 () Real)
(declare-fun l_0_7_259 () Real)
(declare-fun l_0_7_246 () Real)
(declare-fun l_0_7_258 () Real)
(declare-fun l_0_7_245 () Real)
(declare-fun l_0_7_257 () Real)
(declare-fun l_0_7_244 () Real)
(declare-fun l_0_7_256 () Real)
(declare-fun l_0_7_243 () Real)
(declare-fun l_0_7_255 () Real)
(declare-fun l_0_7_242 () Real)
(declare-fun l_0_7_254 () Real)
(declare-fun l_0_7_241 () Real)
(declare-fun l_0_7_34 () Real)
(declare-fun l_0_7_21 () Real)
(declare-fun l_0_7_33 () Real)
(declare-fun l_0_7_20 () Real)
(declare-fun l_0_7_32 () Real)
(declare-fun l_0_7_19 () Real)
(declare-fun l_0_7_31 () Real)
(declare-fun l_0_7_18 () Real)
(declare-fun l_0_7_30 () Real)
(declare-fun l_0_7_17 () Real)
(declare-fun l_0_7_29 () Real)
(declare-fun l_0_7_16 () Real)
(declare-fun l_0_7_4 () Real)
(declare-fun l_0_7_52 () Real)
(declare-fun l_0_7_7 () Real)
(declare-fun l_0_7_56 () Real)
(declare-fun l_0_7_169 () Real)
(declare-fun l_0_7_156 () Real)
(declare-fun l_0_7_168 () Real)
(declare-fun l_0_7_155 () Real)
(declare-fun l_0_7_167 () Real)
(declare-fun l_0_7_154 () Real)
(declare-fun l_0_7_166 () Real)
(declare-fun l_0_7_153 () Real)
(declare-fun l_0_7_165 () Real)
(declare-fun l_0_7_152 () Real)
(declare-fun l_0_7_164 () Real)
(declare-fun l_0_7_124 () Real)
(declare-fun l_0_7_111 () Real)
(declare-fun l_0_7_123 () Real)
(declare-fun l_0_7_110 () Real)
(declare-fun l_0_7_122 () Real)
(declare-fun l_0_7_109 () Real)
(declare-fun l_0_7_121 () Real)
(declare-fun l_0_7_108 () Real)
(declare-fun l_0_7_120 () Real)
(declare-fun l_0_7_107 () Real)
(declare-fun l_0_7_119 () Real)
(declare-fun l_0_7_11 () Real)
(declare-fun l_0_7_67 () Real)
(declare-fun l_0_7_22 () Real)
(declare-fun l_0_7_82 () Real)
(declare-fun l_0_7_37 () Real)
(declare-fun l_0_7_48 () Real)
(declare-fun l_0_7_3 () Real)
(declare-fun l_0_7_138 () Real)
(declare-fun l_0_7_137 () Real)
(declare-fun l_0_7_93 () Real)
(declare-fun l_0_7_92 () Real)
(declare-fun l_0_7_50 () Real)
(declare-fun l_0_7_5 () Real)
(declare-fun l_0_7_141 () Real)
(declare-fun l_0_7_140 () Real)
(declare-fun l_0_7_139 () Real)
(declare-fun l_0_7_96 () Real)
(declare-fun l_0_7_95 () Real)
(declare-fun l_0_7_94 () Real)
(declare-fun l_0_7_53 () Real)
(declare-fun l_0_7_8 () Real)
(declare-fun l_0_7_145 () Real)
(declare-fun l_0_7_144 () Real)
(declare-fun l_0_7_143 () Real)
(declare-fun l_0_7_142 () Real)
(declare-fun l_0_7_99 () Real)
(declare-fun l_0_7_98 () Real)
(declare-fun l_0_7_97 () Real)
(declare-fun l_0_7_100 () Real)
(declare-fun l_0_7_57 () Real)
(declare-fun l_0_7_150 () Real)
(declare-fun l_0_7_149 () Real)
(declare-fun l_0_7_148 () Real)
(declare-fun l_0_7_147 () Real)
(declare-fun l_0_7_146 () Real)
(declare-fun l_0_7_12 () Real)
(declare-fun l_0_7_105 () Real)
(declare-fun l_0_7_104 () Real)
(declare-fun l_0_7_103 () Real)
(declare-fun l_0_7_102 () Real)
(declare-fun l_0_7_101 () Real)
(declare-fun l_0_7_68 () Real)
(declare-fun l_0_7_23 () Real)
(declare-fun l_0_7_162 () Real)
(declare-fun l_0_7_161 () Real)
(declare-fun l_0_7_160 () Real)
(declare-fun l_0_7_159 () Real)
(declare-fun l_0_7_158 () Real)
(declare-fun l_0_7_157 () Real)
(declare-fun l_0_7_117 () Real)
(declare-fun l_0_7_116 () Real)
(declare-fun l_0_7_115 () Real)
(declare-fun l_0_7_114 () Real)
(declare-fun l_0_7_113 () Real)
(declare-fun l_0_7_112 () Real)
(declare-fun l_0_7_83 () Real)
(declare-fun l_0_7_38 () Real)
(declare-fun l_0_7_177 () Real)
(declare-fun l_0_7_176 () Real)
(declare-fun l_0_7_175 () Real)
(declare-fun l_0_7_174 () Real)
(declare-fun l_0_7_173 () Real)
(declare-fun l_0_7_172 () Real)
(declare-fun l_0_7_132 () Real)
(declare-fun l_0_7_131 () Real)
(declare-fun l_0_7_130 () Real)
(declare-fun l_0_7_129 () Real)
(declare-fun l_0_7_128 () Real)
(declare-fun l_0_7_127 () Real)
(declare-fun l_0_7_6 () Real)
(declare-fun l_0_7_51 () Real)
(declare-fun l_0_7_9 () Real)
(declare-fun l_0_7_54 () Real)
(declare-fun l_0_7_58 () Real)
(declare-fun l_0_7_13 () Real)
(declare-fun l_0_7_69 () Real)
(declare-fun l_0_7_24 () Real)
(declare-fun l_0_7_84 () Real)
(declare-fun l_0_7_39 () Real)
(declare-fun l_0_7_55 () Real)
(declare-fun l_0_7_10 () Real)
(declare-fun l_0_7_59 () Real)
(declare-fun l_0_7_14 () Real)
(declare-fun l_0_7_70 () Real)
(declare-fun l_0_7_25 () Real)
(declare-fun l_0_7_85 () Real)
(declare-fun l_0_7_40 () Real)
(declare-fun l_0_7_60 () Real)
(declare-fun l_0_7_15 () Real)
(declare-fun l_0_7_71 () Real)
(declare-fun l_0_7_26 () Real)
(declare-fun l_0_7_86 () Real)
(declare-fun l_0_7_41 () Real)
(declare-fun l_0_7_72 () Real)
(declare-fun l_0_7_27 () Real)
(declare-fun l_0_7_87 () Real)
(declare-fun l_0_7_42 () Real)
(declare-fun l_0_7_73 () Real)
(declare-fun l_0_7_28 () Real)
(declare-fun l_0_7_80 () Real)
(declare-fun l_0_7_35 () Real)
(declare-fun l_0_7_88 () Real)
(declare-fun l_0_7_43 () Real)
(declare-fun l_0_7_81 () Real)
(declare-fun l_0_7_36 () Real)
(declare-fun l_0_7_89 () Real)
(declare-fun l_0_7_44 () Real)
(declare-fun l_0_7_90 () Real)
(declare-fun l_0_7_45 () Real)
(declare-fun l_0_7_370 () Real)
(declare-fun l_0_7_369 () Real)
(declare-fun l_0_7_368 () Real)
(declare-fun l_0_7_367 () Real)
(declare-fun l_0_7_325 () Real)
(declare-fun l_0_7_324 () Real)
(declare-fun l_0_7_323 () Real)
(declare-fun l_0_7_322 () Real)
(declare-fun l_0_7_280 () Real)
(declare-fun l_0_7_279 () Real)
(declare-fun l_0_7_278 () Real)
(declare-fun l_0_7_277 () Real)
(declare-fun l_0_7_190 () Real)
(declare-fun l_0_7_189 () Real)
(declare-fun l_0_7_188 () Real)
(declare-fun l_0_7_187 () Real)
(declare-fun l_0_7_250 () Real)
(declare-fun l_0_7_235 () Real)
(declare-fun l_0_7_249 () Real)
(declare-fun l_0_7_234 () Real)
(declare-fun l_0_7_248 () Real)
(declare-fun l_0_7_233 () Real)
(declare-fun l_0_7_247 () Real)
(declare-fun l_0_7_232 () Real)
(declare-fun l_0_7_364 () Real)
(declare-fun l_0_7_319 () Real)
(declare-fun l_0_7_274 () Real)
(declare-fun l_0_7_184 () Real)
(declare-fun l_0_7_365 () Real)
(declare-fun l_0_7_320 () Real)
(declare-fun l_0_7_275 () Real)
(declare-fun l_0_7_227 () Real)
(declare-fun l_0_7_185 () Real)
(declare-fun l_0_7_366 () Real)
(declare-fun l_0_7_321 () Real)
(declare-fun l_0_7_276 () Real)
(declare-fun l_0_7_229 () Real)
(declare-fun l_0_7_186 () Real)
(declare-fun l_0_7_373 () Real)
(declare-fun l_0_7_372 () Real)
(declare-fun l_0_7_328 () Real)
(declare-fun l_0_7_327 () Real)
(declare-fun l_0_7_283 () Real)
(declare-fun l_0_7_282 () Real)
(declare-fun l_0_7_236 () Real)
(declare-fun l_0_7_193 () Real)
(declare-fun l_0_7_192 () Real)
(declare-fun l_0_7_262 () Real)
(declare-fun l_0_7_228 () Real)
(declare-fun l_0_7_230 () Real)
(declare-fun l_0_7_237 () Real)
(declare-fun l_0_7_263 () Real)
(declare-fun l_0_7_231 () Real)
(declare-fun l_0_7_238 () Real)
(declare-fun l_0_7_264 () Real)
(declare-fun l_0_7_239 () Real)
(declare-fun l_0_7_265 () Real)
(declare-fun l_0_7_240 () Real)
(declare-fun l_0_7_251 () Real)
(declare-fun l_0_7_266 () Real)
(declare-fun l_0_7_252 () Real)
(declare-fun l_0_7_267 () Real)
(declare-fun l_0_7_253 () Real)
(declare-fun l_0_7_260 () Real)
(declare-fun l_0_7_268 () Real)
(declare-fun l_0_7_261 () Real)
(declare-fun l_0_7_269 () Real)
(declare-fun l_0_7_270 () Real)
(declare-fun l_0_7_178 () Real)
(declare-fun l_0_7_163 () Real)
(declare-fun l_0_7_133 () Real)
(declare-fun l_0_7_118 () Real)
(declare-fun l_0_7_170 () Real)
(declare-fun l_0_7_125 () Real)
(declare-fun l_0_7_171 () Real)
(declare-fun l_0_7_126 () Real)
(declare-fun l_0_7_179 () Real)
(declare-fun l_0_7_134 () Real)
(declare-fun l_0_7_180 () Real)
(declare-fun l_0_7_135 () Real)
(declare-fun l_0_7_374 () Real)
(declare-fun l_0_7_329 () Real)
(declare-fun l_0_7_284 () Real)
(declare-fun l_0_7_194 () Real)
(declare-fun l_0_7_375 () Real)
(declare-fun l_0_7_330 () Real)
(declare-fun l_0_7_285 () Real)
(declare-fun l_0_7_195 () Real)
(declare-fun l_0_7_395 () Real)
(declare-fun l_0_7_350 () Real)
(declare-fun l_0_7_305 () Real)
(declare-fun l_0_7_215 () Real)
(declare-fun l_0_7_396 () Real)
(declare-fun l_0_7_351 () Real)
(declare-fun l_0_7_306 () Real)
(declare-fun l_0_7_216 () Real)
(declare-fun l_0_7_404 () Real)
(declare-fun l_0_7_359 () Real)
(declare-fun l_0_7_314 () Real)
(declare-fun l_0_7_224 () Real)
(declare-fun l_0_7_405 () Real)
(declare-fun l_0_7_360 () Real)
(declare-fun l_0_7_315 () Real)
(declare-fun l_0_7_225 () Real)
(declare-fun l_0_8_91 () Real)
(declare-fun l_0_8_416 () Real)
(declare-fun l_0_8_406 () Real)
(declare-fun l_0_8_371 () Real)
(declare-fun l_0_8_361 () Real)
(declare-fun l_0_8_326 () Real)
(declare-fun l_0_8_316 () Real)
(declare-fun l_0_8_281 () Real)
(declare-fun l_0_8_271 () Real)
(declare-fun l_0_8_226 () Real)
(declare-fun l_0_8_191 () Real)
(declare-fun l_0_8_181 () Real)
(declare-fun l_0_8_136 () Real)
(declare-fun l_0_8_448 () Real)
(declare-fun l_0_8_433 () Real)
(declare-fun l_0_8_447 () Real)
(declare-fun l_0_8_432 () Real)
(declare-fun l_0_8_446 () Real)
(declare-fun l_0_8_431 () Real)
(declare-fun l_0_8_445 () Real)
(declare-fun l_0_8_430 () Real)
(declare-fun l_0_8_444 () Real)
(declare-fun l_0_8_429 () Real)
(declare-fun l_0_8_443 () Real)
(declare-fun l_0_8_428 () Real)
(declare-fun l_0_8_442 () Real)
(declare-fun l_0_8_427 () Real)
(declare-fun l_0_8_403 () Real)
(declare-fun l_0_8_388 () Real)
(declare-fun l_0_8_402 () Real)
(declare-fun l_0_8_387 () Real)
(declare-fun l_0_8_401 () Real)
(declare-fun l_0_8_386 () Real)
(declare-fun l_0_8_400 () Real)
(declare-fun l_0_8_385 () Real)
(declare-fun l_0_8_399 () Real)
(declare-fun l_0_8_384 () Real)
(declare-fun l_0_8_398 () Real)
(declare-fun l_0_8_383 () Real)
(declare-fun l_0_8_397 () Real)
(declare-fun l_0_8_382 () Real)
(declare-fun l_0_8_358 () Real)
(declare-fun l_0_8_343 () Real)
(declare-fun l_0_8_357 () Real)
(declare-fun l_0_8_342 () Real)
(declare-fun l_0_8_356 () Real)
(declare-fun l_0_8_341 () Real)
(declare-fun l_0_8_355 () Real)
(declare-fun l_0_8_340 () Real)
(declare-fun l_0_8_354 () Real)
(declare-fun l_0_8_339 () Real)
(declare-fun l_0_8_353 () Real)
(declare-fun l_0_8_338 () Real)
(declare-fun l_0_8_352 () Real)
(declare-fun l_0_8_337 () Real)
(declare-fun l_0_8_313 () Real)
(declare-fun l_0_8_298 () Real)
(declare-fun l_0_8_312 () Real)
(declare-fun l_0_8_297 () Real)
(declare-fun l_0_8_311 () Real)
(declare-fun l_0_8_296 () Real)
(declare-fun l_0_8_310 () Real)
(declare-fun l_0_8_295 () Real)
(declare-fun l_0_8_309 () Real)
(declare-fun l_0_8_294 () Real)
(declare-fun l_0_8_308 () Real)
(declare-fun l_0_8_293 () Real)
(declare-fun l_0_8_307 () Real)
(declare-fun l_0_8_292 () Real)
(declare-fun l_0_8_223 () Real)
(declare-fun l_0_8_208 () Real)
(declare-fun l_0_8_222 () Real)
(declare-fun l_0_8_207 () Real)
(declare-fun l_0_8_221 () Real)
(declare-fun l_0_8_206 () Real)
(declare-fun l_0_8_220 () Real)
(declare-fun l_0_8_205 () Real)
(declare-fun l_0_8_219 () Real)
(declare-fun l_0_8_204 () Real)
(declare-fun l_0_8_218 () Real)
(declare-fun l_0_8_203 () Real)
(declare-fun l_0_8_217 () Real)
(declare-fun l_0_8_202 () Real)
(declare-fun l_0_8_435 () Real)
(declare-fun l_0_8_408 () Real)
(declare-fun l_0_8_434 () Real)
(declare-fun l_0_8_407 () Real)
(declare-fun l_0_8_390 () Real)
(declare-fun l_0_8_363 () Real)
(declare-fun l_0_8_389 () Real)
(declare-fun l_0_8_362 () Real)
(declare-fun l_0_8_345 () Real)
(declare-fun l_0_8_318 () Real)
(declare-fun l_0_8_344 () Real)
(declare-fun l_0_8_317 () Real)
(declare-fun l_0_8_300 () Real)
(declare-fun l_0_8_273 () Real)
(declare-fun l_0_8_299 () Real)
(declare-fun l_0_8_272 () Real)
(declare-fun l_0_8_210 () Real)
(declare-fun l_0_8_183 () Real)
(declare-fun l_0_8_209 () Real)
(declare-fun l_0_8_182 () Real)
(declare-fun l_0_8_46 () Real)
(declare-fun l_0_8_439 () Real)
(declare-fun l_0_8_426 () Real)
(declare-fun l_0_8_438 () Real)
(declare-fun l_0_8_425 () Real)
(declare-fun l_0_8_437 () Real)
(declare-fun l_0_8_424 () Real)
(declare-fun l_0_8_436 () Real)
(declare-fun l_0_8_423 () Real)
(declare-fun l_0_8_422 () Real)
(declare-fun l_0_8_421 () Real)
(declare-fun l_0_8_394 () Real)
(declare-fun l_0_8_381 () Real)
(declare-fun l_0_8_393 () Real)
(declare-fun l_0_8_380 () Real)
(declare-fun l_0_8_392 () Real)
(declare-fun l_0_8_379 () Real)
(declare-fun l_0_8_391 () Real)
(declare-fun l_0_8_378 () Real)
(declare-fun l_0_8_377 () Real)
(declare-fun l_0_8_376 () Real)
(declare-fun l_0_8_349 () Real)
(declare-fun l_0_8_336 () Real)
(declare-fun l_0_8_348 () Real)
(declare-fun l_0_8_335 () Real)
(declare-fun l_0_8_347 () Real)
(declare-fun l_0_8_334 () Real)
(declare-fun l_0_8_346 () Real)
(declare-fun l_0_8_333 () Real)
(declare-fun l_0_8_332 () Real)
(declare-fun l_0_8_331 () Real)
(declare-fun l_0_8_304 () Real)
(declare-fun l_0_8_291 () Real)
(declare-fun l_0_8_303 () Real)
(declare-fun l_0_8_290 () Real)
(declare-fun l_0_8_302 () Real)
(declare-fun l_0_8_289 () Real)
(declare-fun l_0_8_301 () Real)
(declare-fun l_0_8_288 () Real)
(declare-fun l_0_8_287 () Real)
(declare-fun l_0_8_286 () Real)
(declare-fun l_0_8_214 () Real)
(declare-fun l_0_8_201 () Real)
(declare-fun l_0_8_213 () Real)
(declare-fun l_0_8_200 () Real)
(declare-fun l_0_8_212 () Real)
(declare-fun l_0_8_199 () Real)
(declare-fun l_0_8_211 () Real)
(declare-fun l_0_8_198 () Real)
(declare-fun l_0_8_197 () Real)
(declare-fun l_0_8_196 () Real)
(declare-fun l_0_8_1 () Real)
(declare-fun l_0_8_47 () Real)
(declare-fun l_0_8_151 () Real)
(declare-fun l_0_8_106 () Real)
(declare-fun l_0_8_2 () Real)
(declare-fun l_0_8_79 () Real)
(declare-fun l_0_8_66 () Real)
(declare-fun l_0_8_78 () Real)
(declare-fun l_0_8_65 () Real)
(declare-fun l_0_8_77 () Real)
(declare-fun l_0_8_64 () Real)
(declare-fun l_0_8_76 () Real)
(declare-fun l_0_8_63 () Real)
(declare-fun l_0_8_75 () Real)
(declare-fun l_0_8_62 () Real)
(declare-fun l_0_8_74 () Real)
(declare-fun l_0_8_61 () Real)
(declare-fun l_0_8_49 () Real)
(declare-fun l_0_8_259 () Real)
(declare-fun l_0_8_246 () Real)
(declare-fun l_0_8_258 () Real)
(declare-fun l_0_8_245 () Real)
(declare-fun l_0_8_257 () Real)
(declare-fun l_0_8_244 () Real)
(declare-fun l_0_8_256 () Real)
(declare-fun l_0_8_243 () Real)
(declare-fun l_0_8_255 () Real)
(declare-fun l_0_8_242 () Real)
(declare-fun l_0_8_254 () Real)
(declare-fun l_0_8_241 () Real)
(declare-fun l_0_8_34 () Real)
(declare-fun l_0_8_21 () Real)
(declare-fun l_0_8_33 () Real)
(declare-fun l_0_8_20 () Real)
(declare-fun l_0_8_32 () Real)
(declare-fun l_0_8_19 () Real)
(declare-fun l_0_8_31 () Real)
(declare-fun l_0_8_18 () Real)
(declare-fun l_0_8_30 () Real)
(declare-fun l_0_8_17 () Real)
(declare-fun l_0_8_29 () Real)
(declare-fun l_0_8_16 () Real)
(declare-fun l_0_8_4 () Real)
(declare-fun l_0_8_52 () Real)
(declare-fun l_0_8_7 () Real)
(declare-fun l_0_8_56 () Real)
(declare-fun l_0_8_169 () Real)
(declare-fun l_0_8_156 () Real)
(declare-fun l_0_8_168 () Real)
(declare-fun l_0_8_155 () Real)
(declare-fun l_0_8_167 () Real)
(declare-fun l_0_8_154 () Real)
(declare-fun l_0_8_166 () Real)
(declare-fun l_0_8_153 () Real)
(declare-fun l_0_8_165 () Real)
(declare-fun l_0_8_152 () Real)
(declare-fun l_0_8_164 () Real)
(declare-fun l_0_8_124 () Real)
(declare-fun l_0_8_111 () Real)
(declare-fun l_0_8_123 () Real)
(declare-fun l_0_8_110 () Real)
(declare-fun l_0_8_122 () Real)
(declare-fun l_0_8_109 () Real)
(declare-fun l_0_8_121 () Real)
(declare-fun l_0_8_108 () Real)
(declare-fun l_0_8_120 () Real)
(declare-fun l_0_8_107 () Real)
(declare-fun l_0_8_119 () Real)
(declare-fun l_0_8_11 () Real)
(declare-fun l_0_8_67 () Real)
(declare-fun l_0_8_22 () Real)
(declare-fun l_0_8_82 () Real)
(declare-fun l_0_8_37 () Real)
(declare-fun l_0_8_48 () Real)
(declare-fun l_0_8_3 () Real)
(declare-fun l_0_8_138 () Real)
(declare-fun l_0_8_137 () Real)
(declare-fun l_0_8_93 () Real)
(declare-fun l_0_8_92 () Real)
(declare-fun l_0_8_50 () Real)
(declare-fun l_0_8_5 () Real)
(declare-fun l_0_8_141 () Real)
(declare-fun l_0_8_140 () Real)
(declare-fun l_0_8_139 () Real)
(declare-fun l_0_8_96 () Real)
(declare-fun l_0_8_95 () Real)
(declare-fun l_0_8_94 () Real)
(declare-fun l_0_8_53 () Real)
(declare-fun l_0_8_8 () Real)
(declare-fun l_0_8_145 () Real)
(declare-fun l_0_8_144 () Real)
(declare-fun l_0_8_143 () Real)
(declare-fun l_0_8_142 () Real)
(declare-fun l_0_8_99 () Real)
(declare-fun l_0_8_98 () Real)
(declare-fun l_0_8_97 () Real)
(declare-fun l_0_8_100 () Real)
(declare-fun l_0_8_57 () Real)
(declare-fun l_0_8_150 () Real)
(declare-fun l_0_8_149 () Real)
(declare-fun l_0_8_148 () Real)
(declare-fun l_0_8_147 () Real)
(declare-fun l_0_8_146 () Real)
(declare-fun l_0_8_12 () Real)
(declare-fun l_0_8_105 () Real)
(declare-fun l_0_8_104 () Real)
(declare-fun l_0_8_103 () Real)
(declare-fun l_0_8_102 () Real)
(declare-fun l_0_8_101 () Real)
(declare-fun l_0_8_68 () Real)
(declare-fun l_0_8_23 () Real)
(declare-fun l_0_8_162 () Real)
(declare-fun l_0_8_161 () Real)
(declare-fun l_0_8_160 () Real)
(declare-fun l_0_8_159 () Real)
(declare-fun l_0_8_158 () Real)
(declare-fun l_0_8_157 () Real)
(declare-fun l_0_8_117 () Real)
(declare-fun l_0_8_116 () Real)
(declare-fun l_0_8_115 () Real)
(declare-fun l_0_8_114 () Real)
(declare-fun l_0_8_113 () Real)
(declare-fun l_0_8_112 () Real)
(declare-fun l_0_8_83 () Real)
(declare-fun l_0_8_38 () Real)
(declare-fun l_0_8_177 () Real)
(declare-fun l_0_8_176 () Real)
(declare-fun l_0_8_175 () Real)
(declare-fun l_0_8_174 () Real)
(declare-fun l_0_8_173 () Real)
(declare-fun l_0_8_172 () Real)
(declare-fun l_0_8_132 () Real)
(declare-fun l_0_8_131 () Real)
(declare-fun l_0_8_130 () Real)
(declare-fun l_0_8_129 () Real)
(declare-fun l_0_8_128 () Real)
(declare-fun l_0_8_127 () Real)
(declare-fun l_0_8_6 () Real)
(declare-fun l_0_8_51 () Real)
(declare-fun l_0_8_9 () Real)
(declare-fun l_0_8_54 () Real)
(declare-fun l_0_8_58 () Real)
(declare-fun l_0_8_13 () Real)
(declare-fun l_0_8_69 () Real)
(declare-fun l_0_8_24 () Real)
(declare-fun l_0_8_84 () Real)
(declare-fun l_0_8_39 () Real)
(declare-fun l_0_8_55 () Real)
(declare-fun l_0_8_10 () Real)
(declare-fun l_0_8_59 () Real)
(declare-fun l_0_8_14 () Real)
(declare-fun l_0_8_70 () Real)
(declare-fun l_0_8_25 () Real)
(declare-fun l_0_8_85 () Real)
(declare-fun l_0_8_40 () Real)
(declare-fun l_0_8_60 () Real)
(declare-fun l_0_8_15 () Real)
(declare-fun l_0_8_71 () Real)
(declare-fun l_0_8_26 () Real)
(declare-fun l_0_8_86 () Real)
(declare-fun l_0_8_41 () Real)
(declare-fun l_0_8_72 () Real)
(declare-fun l_0_8_27 () Real)
(declare-fun l_0_8_87 () Real)
(declare-fun l_0_8_42 () Real)
(declare-fun l_0_8_73 () Real)
(declare-fun l_0_8_28 () Real)
(declare-fun l_0_8_80 () Real)
(declare-fun l_0_8_35 () Real)
(declare-fun l_0_8_88 () Real)
(declare-fun l_0_8_43 () Real)
(declare-fun l_0_8_81 () Real)
(declare-fun l_0_8_36 () Real)
(declare-fun l_0_8_89 () Real)
(declare-fun l_0_8_44 () Real)
(declare-fun l_0_8_90 () Real)
(declare-fun l_0_8_45 () Real)
(declare-fun l_0_8_415 () Real)
(declare-fun l_0_8_414 () Real)
(declare-fun l_0_8_413 () Real)
(declare-fun l_0_8_412 () Real)
(declare-fun l_0_8_370 () Real)
(declare-fun l_0_8_369 () Real)
(declare-fun l_0_8_368 () Real)
(declare-fun l_0_8_367 () Real)
(declare-fun l_0_8_325 () Real)
(declare-fun l_0_8_324 () Real)
(declare-fun l_0_8_323 () Real)
(declare-fun l_0_8_322 () Real)
(declare-fun l_0_8_280 () Real)
(declare-fun l_0_8_279 () Real)
(declare-fun l_0_8_278 () Real)
(declare-fun l_0_8_277 () Real)
(declare-fun l_0_8_190 () Real)
(declare-fun l_0_8_189 () Real)
(declare-fun l_0_8_188 () Real)
(declare-fun l_0_8_187 () Real)
(declare-fun l_0_8_250 () Real)
(declare-fun l_0_8_235 () Real)
(declare-fun l_0_8_249 () Real)
(declare-fun l_0_8_234 () Real)
(declare-fun l_0_8_248 () Real)
(declare-fun l_0_8_233 () Real)
(declare-fun l_0_8_247 () Real)
(declare-fun l_0_8_232 () Real)
(declare-fun l_0_8_409 () Real)
(declare-fun l_0_8_364 () Real)
(declare-fun l_0_8_319 () Real)
(declare-fun l_0_8_274 () Real)
(declare-fun l_0_8_184 () Real)
(declare-fun l_0_8_410 () Real)
(declare-fun l_0_8_365 () Real)
(declare-fun l_0_8_320 () Real)
(declare-fun l_0_8_275 () Real)
(declare-fun l_0_8_227 () Real)
(declare-fun l_0_8_185 () Real)
(declare-fun l_0_8_411 () Real)
(declare-fun l_0_8_366 () Real)
(declare-fun l_0_8_321 () Real)
(declare-fun l_0_8_276 () Real)
(declare-fun l_0_8_229 () Real)
(declare-fun l_0_8_186 () Real)
(declare-fun l_0_8_418 () Real)
(declare-fun l_0_8_417 () Real)
(declare-fun l_0_8_373 () Real)
(declare-fun l_0_8_372 () Real)
(declare-fun l_0_8_328 () Real)
(declare-fun l_0_8_327 () Real)
(declare-fun l_0_8_283 () Real)
(declare-fun l_0_8_282 () Real)
(declare-fun l_0_8_236 () Real)
(declare-fun l_0_8_193 () Real)
(declare-fun l_0_8_192 () Real)
(declare-fun l_0_8_262 () Real)
(declare-fun l_0_8_228 () Real)
(declare-fun l_0_8_230 () Real)
(declare-fun l_0_8_237 () Real)
(declare-fun l_0_8_263 () Real)
(declare-fun l_0_8_231 () Real)
(declare-fun l_0_8_238 () Real)
(declare-fun l_0_8_264 () Real)
(declare-fun l_0_8_239 () Real)
(declare-fun l_0_8_265 () Real)
(declare-fun l_0_8_240 () Real)
(declare-fun l_0_8_251 () Real)
(declare-fun l_0_8_266 () Real)
(declare-fun l_0_8_252 () Real)
(declare-fun l_0_8_267 () Real)
(declare-fun l_0_8_253 () Real)
(declare-fun l_0_8_260 () Real)
(declare-fun l_0_8_268 () Real)
(declare-fun l_0_8_261 () Real)
(declare-fun l_0_8_269 () Real)
(declare-fun l_0_8_270 () Real)
(declare-fun l_0_8_178 () Real)
(declare-fun l_0_8_163 () Real)
(declare-fun l_0_8_133 () Real)
(declare-fun l_0_8_118 () Real)
(declare-fun l_0_8_170 () Real)
(declare-fun l_0_8_125 () Real)
(declare-fun l_0_8_171 () Real)
(declare-fun l_0_8_126 () Real)
(declare-fun l_0_8_179 () Real)
(declare-fun l_0_8_134 () Real)
(declare-fun l_0_8_180 () Real)
(declare-fun l_0_8_135 () Real)
(declare-fun l_0_8_419 () Real)
(declare-fun l_0_8_374 () Real)
(declare-fun l_0_8_329 () Real)
(declare-fun l_0_8_284 () Real)
(declare-fun l_0_8_194 () Real)
(declare-fun l_0_8_420 () Real)
(declare-fun l_0_8_375 () Real)
(declare-fun l_0_8_330 () Real)
(declare-fun l_0_8_285 () Real)
(declare-fun l_0_8_195 () Real)
(declare-fun l_0_8_440 () Real)
(declare-fun l_0_8_395 () Real)
(declare-fun l_0_8_350 () Real)
(declare-fun l_0_8_305 () Real)
(declare-fun l_0_8_215 () Real)
(declare-fun l_0_8_441 () Real)
(declare-fun l_0_8_396 () Real)
(declare-fun l_0_8_351 () Real)
(declare-fun l_0_8_306 () Real)
(declare-fun l_0_8_216 () Real)
(declare-fun l_0_8_449 () Real)
(declare-fun l_0_8_404 () Real)
(declare-fun l_0_8_359 () Real)
(declare-fun l_0_8_314 () Real)
(declare-fun l_0_8_224 () Real)
(declare-fun l_0_8_450 () Real)
(declare-fun l_0_8_405 () Real)
(declare-fun l_0_8_360 () Real)
(declare-fun l_0_8_315 () Real)
(declare-fun l_0_8_225 () Real)
(declare-fun l_0_9_46 () Real)
(declare-fun l_0_9_304 () Real)
(declare-fun l_0_9_291 () Real)
(declare-fun l_0_9_303 () Real)
(declare-fun l_0_9_290 () Real)
(declare-fun l_0_9_302 () Real)
(declare-fun l_0_9_289 () Real)
(declare-fun l_0_9_301 () Real)
(declare-fun l_0_9_288 () Real)
(declare-fun l_0_9_300 () Real)
(declare-fun l_0_9_287 () Real)
(declare-fun l_0_9_299 () Real)
(declare-fun l_0_9_286 () Real)
(declare-fun l_0_9_214 () Real)
(declare-fun l_0_9_201 () Real)
(declare-fun l_0_9_213 () Real)
(declare-fun l_0_9_200 () Real)
(declare-fun l_0_9_212 () Real)
(declare-fun l_0_9_199 () Real)
(declare-fun l_0_9_211 () Real)
(declare-fun l_0_9_198 () Real)
(declare-fun l_0_9_210 () Real)
(declare-fun l_0_9_197 () Real)
(declare-fun l_0_9_209 () Real)
(declare-fun l_0_9_196 () Real)
(declare-fun l_0_9_1 () Real)
(declare-fun l_0_9_295 () Real)
(declare-fun l_0_9_280 () Real)
(declare-fun l_0_9_294 () Real)
(declare-fun l_0_9_279 () Real)
(declare-fun l_0_9_293 () Real)
(declare-fun l_0_9_278 () Real)
(declare-fun l_0_9_292 () Real)
(declare-fun l_0_9_277 () Real)
(declare-fun l_0_9_205 () Real)
(declare-fun l_0_9_190 () Real)
(declare-fun l_0_9_204 () Real)
(declare-fun l_0_9_189 () Real)
(declare-fun l_0_9_203 () Real)
(declare-fun l_0_9_188 () Real)
(declare-fun l_0_9_202 () Real)
(declare-fun l_0_9_187 () Real)
(declare-fun l_0_9_274 () Real)
(declare-fun l_0_9_271 () Real)
(declare-fun l_0_9_226 () Real)
(declare-fun l_0_9_184 () Real)
(declare-fun l_0_9_181 () Real)
(declare-fun l_0_9_47 () Real)
(declare-fun l_0_9_151 () Real)
(declare-fun l_0_9_136 () Real)
(declare-fun l_0_9_91 () Real)
(declare-fun l_0_9_106 () Real)
(declare-fun l_0_9_2 () Real)
(declare-fun l_0_9_79 () Real)
(declare-fun l_0_9_66 () Real)
(declare-fun l_0_9_78 () Real)
(declare-fun l_0_9_65 () Real)
(declare-fun l_0_9_77 () Real)
(declare-fun l_0_9_64 () Real)
(declare-fun l_0_9_76 () Real)
(declare-fun l_0_9_63 () Real)
(declare-fun l_0_9_75 () Real)
(declare-fun l_0_9_62 () Real)
(declare-fun l_0_9_74 () Real)
(declare-fun l_0_9_61 () Real)
(declare-fun l_0_9_49 () Real)
(declare-fun l_0_9_259 () Real)
(declare-fun l_0_9_246 () Real)
(declare-fun l_0_9_258 () Real)
(declare-fun l_0_9_245 () Real)
(declare-fun l_0_9_257 () Real)
(declare-fun l_0_9_244 () Real)
(declare-fun l_0_9_256 () Real)
(declare-fun l_0_9_243 () Real)
(declare-fun l_0_9_255 () Real)
(declare-fun l_0_9_242 () Real)
(declare-fun l_0_9_254 () Real)
(declare-fun l_0_9_241 () Real)
(declare-fun l_0_9_34 () Real)
(declare-fun l_0_9_21 () Real)
(declare-fun l_0_9_33 () Real)
(declare-fun l_0_9_20 () Real)
(declare-fun l_0_9_32 () Real)
(declare-fun l_0_9_19 () Real)
(declare-fun l_0_9_31 () Real)
(declare-fun l_0_9_18 () Real)
(declare-fun l_0_9_30 () Real)
(declare-fun l_0_9_17 () Real)
(declare-fun l_0_9_29 () Real)
(declare-fun l_0_9_16 () Real)
(declare-fun l_0_9_4 () Real)
(declare-fun l_0_9_52 () Real)
(declare-fun l_0_9_7 () Real)
(declare-fun l_0_9_56 () Real)
(declare-fun l_0_9_169 () Real)
(declare-fun l_0_9_156 () Real)
(declare-fun l_0_9_168 () Real)
(declare-fun l_0_9_155 () Real)
(declare-fun l_0_9_167 () Real)
(declare-fun l_0_9_154 () Real)
(declare-fun l_0_9_166 () Real)
(declare-fun l_0_9_153 () Real)
(declare-fun l_0_9_165 () Real)
(declare-fun l_0_9_152 () Real)
(declare-fun l_0_9_164 () Real)
(declare-fun l_0_9_124 () Real)
(declare-fun l_0_9_111 () Real)
(declare-fun l_0_9_123 () Real)
(declare-fun l_0_9_110 () Real)
(declare-fun l_0_9_122 () Real)
(declare-fun l_0_9_109 () Real)
(declare-fun l_0_9_121 () Real)
(declare-fun l_0_9_108 () Real)
(declare-fun l_0_9_120 () Real)
(declare-fun l_0_9_107 () Real)
(declare-fun l_0_9_119 () Real)
(declare-fun l_0_9_11 () Real)
(declare-fun l_0_9_67 () Real)
(declare-fun l_0_9_22 () Real)
(declare-fun l_0_9_82 () Real)
(declare-fun l_0_9_37 () Real)
(declare-fun l_0_9_48 () Real)
(declare-fun l_0_9_3 () Real)
(declare-fun l_0_9_138 () Real)
(declare-fun l_0_9_137 () Real)
(declare-fun l_0_9_93 () Real)
(declare-fun l_0_9_92 () Real)
(declare-fun l_0_9_50 () Real)
(declare-fun l_0_9_5 () Real)
(declare-fun l_0_9_141 () Real)
(declare-fun l_0_9_140 () Real)
(declare-fun l_0_9_139 () Real)
(declare-fun l_0_9_96 () Real)
(declare-fun l_0_9_95 () Real)
(declare-fun l_0_9_94 () Real)
(declare-fun l_0_9_53 () Real)
(declare-fun l_0_9_8 () Real)
(declare-fun l_0_9_145 () Real)
(declare-fun l_0_9_144 () Real)
(declare-fun l_0_9_143 () Real)
(declare-fun l_0_9_142 () Real)
(declare-fun l_0_9_99 () Real)
(declare-fun l_0_9_98 () Real)
(declare-fun l_0_9_97 () Real)
(declare-fun l_0_9_100 () Real)
(declare-fun l_0_9_57 () Real)
(declare-fun l_0_9_150 () Real)
(declare-fun l_0_9_149 () Real)
(declare-fun l_0_9_148 () Real)
(declare-fun l_0_9_147 () Real)
(declare-fun l_0_9_146 () Real)
(declare-fun l_0_9_12 () Real)
(declare-fun l_0_9_105 () Real)
(declare-fun l_0_9_104 () Real)
(declare-fun l_0_9_103 () Real)
(declare-fun l_0_9_102 () Real)
(declare-fun l_0_9_101 () Real)
(declare-fun l_0_9_68 () Real)
(declare-fun l_0_9_23 () Real)
(declare-fun l_0_9_162 () Real)
(declare-fun l_0_9_161 () Real)
(declare-fun l_0_9_160 () Real)
(declare-fun l_0_9_159 () Real)
(declare-fun l_0_9_158 () Real)
(declare-fun l_0_9_157 () Real)
(declare-fun l_0_9_117 () Real)
(declare-fun l_0_9_116 () Real)
(declare-fun l_0_9_115 () Real)
(declare-fun l_0_9_114 () Real)
(declare-fun l_0_9_113 () Real)
(declare-fun l_0_9_112 () Real)
(declare-fun l_0_9_83 () Real)
(declare-fun l_0_9_38 () Real)
(declare-fun l_0_9_177 () Real)
(declare-fun l_0_9_176 () Real)
(declare-fun l_0_9_175 () Real)
(declare-fun l_0_9_174 () Real)
(declare-fun l_0_9_173 () Real)
(declare-fun l_0_9_172 () Real)
(declare-fun l_0_9_132 () Real)
(declare-fun l_0_9_131 () Real)
(declare-fun l_0_9_130 () Real)
(declare-fun l_0_9_129 () Real)
(declare-fun l_0_9_128 () Real)
(declare-fun l_0_9_127 () Real)
(declare-fun l_0_9_6 () Real)
(declare-fun l_0_9_51 () Real)
(declare-fun l_0_9_9 () Real)
(declare-fun l_0_9_54 () Real)
(declare-fun l_0_9_58 () Real)
(declare-fun l_0_9_13 () Real)
(declare-fun l_0_9_69 () Real)
(declare-fun l_0_9_24 () Real)
(declare-fun l_0_9_84 () Real)
(declare-fun l_0_9_39 () Real)
(declare-fun l_0_9_55 () Real)
(declare-fun l_0_9_10 () Real)
(declare-fun l_0_9_59 () Real)
(declare-fun l_0_9_14 () Real)
(declare-fun l_0_9_70 () Real)
(declare-fun l_0_9_25 () Real)
(declare-fun l_0_9_85 () Real)
(declare-fun l_0_9_40 () Real)
(declare-fun l_0_9_60 () Real)
(declare-fun l_0_9_15 () Real)
(declare-fun l_0_9_71 () Real)
(declare-fun l_0_9_26 () Real)
(declare-fun l_0_9_86 () Real)
(declare-fun l_0_9_41 () Real)
(declare-fun l_0_9_72 () Real)
(declare-fun l_0_9_27 () Real)
(declare-fun l_0_9_87 () Real)
(declare-fun l_0_9_42 () Real)
(declare-fun l_0_9_73 () Real)
(declare-fun l_0_9_28 () Real)
(declare-fun l_0_9_80 () Real)
(declare-fun l_0_9_35 () Real)
(declare-fun l_0_9_88 () Real)
(declare-fun l_0_9_43 () Real)
(declare-fun l_0_9_81 () Real)
(declare-fun l_0_9_36 () Real)
(declare-fun l_0_9_89 () Real)
(declare-fun l_0_9_44 () Real)
(declare-fun l_0_9_90 () Real)
(declare-fun l_0_9_45 () Real)
(declare-fun l_0_9_250 () Real)
(declare-fun l_0_9_235 () Real)
(declare-fun l_0_9_249 () Real)
(declare-fun l_0_9_234 () Real)
(declare-fun l_0_9_248 () Real)
(declare-fun l_0_9_233 () Real)
(declare-fun l_0_9_247 () Real)
(declare-fun l_0_9_232 () Real)
(declare-fun l_0_9_275 () Real)
(declare-fun l_0_9_273 () Real)
(declare-fun l_0_9_272 () Real)
(declare-fun l_0_9_227 () Real)
(declare-fun l_0_9_185 () Real)
(declare-fun l_0_9_183 () Real)
(declare-fun l_0_9_182 () Real)
(declare-fun l_0_9_276 () Real)
(declare-fun l_0_9_229 () Real)
(declare-fun l_0_9_186 () Real)
(declare-fun l_0_9_283 () Real)
(declare-fun l_0_9_282 () Real)
(declare-fun l_0_9_281 () Real)
(declare-fun l_0_9_236 () Real)
(declare-fun l_0_9_193 () Real)
(declare-fun l_0_9_192 () Real)
(declare-fun l_0_9_191 () Real)
(declare-fun l_0_9_309 () Real)
(declare-fun l_0_9_308 () Real)
(declare-fun l_0_9_307 () Real)
(declare-fun l_0_9_262 () Real)
(declare-fun l_0_9_219 () Real)
(declare-fun l_0_9_218 () Real)
(declare-fun l_0_9_217 () Real)
(declare-fun l_0_9_228 () Real)
(declare-fun l_0_9_230 () Real)
(declare-fun l_0_9_237 () Real)
(declare-fun l_0_9_263 () Real)
(declare-fun l_0_9_231 () Real)
(declare-fun l_0_9_238 () Real)
(declare-fun l_0_9_264 () Real)
(declare-fun l_0_9_239 () Real)
(declare-fun l_0_9_265 () Real)
(declare-fun l_0_9_240 () Real)
(declare-fun l_0_9_251 () Real)
(declare-fun l_0_9_266 () Real)
(declare-fun l_0_9_252 () Real)
(declare-fun l_0_9_267 () Real)
(declare-fun l_0_9_253 () Real)
(declare-fun l_0_9_260 () Real)
(declare-fun l_0_9_268 () Real)
(declare-fun l_0_9_261 () Real)
(declare-fun l_0_9_269 () Real)
(declare-fun l_0_9_270 () Real)
(declare-fun l_0_9_313 () Real)
(declare-fun l_0_9_298 () Real)
(declare-fun l_0_9_312 () Real)
(declare-fun l_0_9_297 () Real)
(declare-fun l_0_9_311 () Real)
(declare-fun l_0_9_296 () Real)
(declare-fun l_0_9_310 () Real)
(declare-fun l_0_9_223 () Real)
(declare-fun l_0_9_208 () Real)
(declare-fun l_0_9_222 () Real)
(declare-fun l_0_9_207 () Real)
(declare-fun l_0_9_221 () Real)
(declare-fun l_0_9_206 () Real)
(declare-fun l_0_9_220 () Real)
(declare-fun l_0_9_178 () Real)
(declare-fun l_0_9_163 () Real)
(declare-fun l_0_9_133 () Real)
(declare-fun l_0_9_118 () Real)
(declare-fun l_0_9_170 () Real)
(declare-fun l_0_9_125 () Real)
(declare-fun l_0_9_171 () Real)
(declare-fun l_0_9_126 () Real)
(declare-fun l_0_9_179 () Real)
(declare-fun l_0_9_134 () Real)
(declare-fun l_0_9_180 () Real)
(declare-fun l_0_9_135 () Real)
(declare-fun l_0_9_284 () Real)
(declare-fun l_0_9_194 () Real)
(declare-fun l_0_9_285 () Real)
(declare-fun l_0_9_195 () Real)
(declare-fun l_0_9_305 () Real)
(declare-fun l_0_9_215 () Real)
(declare-fun l_0_9_306 () Real)
(declare-fun l_0_9_216 () Real)
(declare-fun l_0_9_314 () Real)
(declare-fun l_0_9_224 () Real)
(declare-fun l_0_9_315 () Real)
(declare-fun l_0_9_225 () Real)
(declare-fun l_0_10_46 () Real)
(declare-fun l_0_10_319 () Real)
(declare-fun l_0_10_316 () Real)
(declare-fun l_0_10_274 () Real)
(declare-fun l_0_10_271 () Real)
(declare-fun l_0_10_226 () Real)
(declare-fun l_0_10_184 () Real)
(declare-fun l_0_10_181 () Real)
(declare-fun l_0_10_1 () Real)
(declare-fun l_0_10_349 () Real)
(declare-fun l_0_10_336 () Real)
(declare-fun l_0_10_348 () Real)
(declare-fun l_0_10_335 () Real)
(declare-fun l_0_10_347 () Real)
(declare-fun l_0_10_334 () Real)
(declare-fun l_0_10_346 () Real)
(declare-fun l_0_10_333 () Real)
(declare-fun l_0_10_345 () Real)
(declare-fun l_0_10_332 () Real)
(declare-fun l_0_10_344 () Real)
(declare-fun l_0_10_331 () Real)
(declare-fun l_0_10_304 () Real)
(declare-fun l_0_10_291 () Real)
(declare-fun l_0_10_303 () Real)
(declare-fun l_0_10_290 () Real)
(declare-fun l_0_10_302 () Real)
(declare-fun l_0_10_289 () Real)
(declare-fun l_0_10_301 () Real)
(declare-fun l_0_10_288 () Real)
(declare-fun l_0_10_300 () Real)
(declare-fun l_0_10_287 () Real)
(declare-fun l_0_10_299 () Real)
(declare-fun l_0_10_286 () Real)
(declare-fun l_0_10_214 () Real)
(declare-fun l_0_10_201 () Real)
(declare-fun l_0_10_213 () Real)
(declare-fun l_0_10_200 () Real)
(declare-fun l_0_10_212 () Real)
(declare-fun l_0_10_199 () Real)
(declare-fun l_0_10_211 () Real)
(declare-fun l_0_10_198 () Real)
(declare-fun l_0_10_210 () Real)
(declare-fun l_0_10_197 () Real)
(declare-fun l_0_10_209 () Real)
(declare-fun l_0_10_196 () Real)
(declare-fun l_0_10_340 () Real)
(declare-fun l_0_10_325 () Real)
(declare-fun l_0_10_339 () Real)
(declare-fun l_0_10_324 () Real)
(declare-fun l_0_10_338 () Real)
(declare-fun l_0_10_323 () Real)
(declare-fun l_0_10_337 () Real)
(declare-fun l_0_10_322 () Real)
(declare-fun l_0_10_295 () Real)
(declare-fun l_0_10_280 () Real)
(declare-fun l_0_10_294 () Real)
(declare-fun l_0_10_279 () Real)
(declare-fun l_0_10_293 () Real)
(declare-fun l_0_10_278 () Real)
(declare-fun l_0_10_292 () Real)
(declare-fun l_0_10_277 () Real)
(declare-fun l_0_10_205 () Real)
(declare-fun l_0_10_190 () Real)
(declare-fun l_0_10_204 () Real)
(declare-fun l_0_10_189 () Real)
(declare-fun l_0_10_203 () Real)
(declare-fun l_0_10_188 () Real)
(declare-fun l_0_10_202 () Real)
(declare-fun l_0_10_187 () Real)
(declare-fun l_0_10_47 () Real)
(declare-fun l_0_10_151 () Real)
(declare-fun l_0_10_136 () Real)
(declare-fun l_0_10_91 () Real)
(declare-fun l_0_10_106 () Real)
(declare-fun l_0_10_2 () Real)
(declare-fun l_0_10_79 () Real)
(declare-fun l_0_10_66 () Real)
(declare-fun l_0_10_78 () Real)
(declare-fun l_0_10_65 () Real)
(declare-fun l_0_10_77 () Real)
(declare-fun l_0_10_64 () Real)
(declare-fun l_0_10_76 () Real)
(declare-fun l_0_10_63 () Real)
(declare-fun l_0_10_75 () Real)
(declare-fun l_0_10_62 () Real)
(declare-fun l_0_10_74 () Real)
(declare-fun l_0_10_61 () Real)
(declare-fun l_0_10_49 () Real)
(declare-fun l_0_10_259 () Real)
(declare-fun l_0_10_246 () Real)
(declare-fun l_0_10_258 () Real)
(declare-fun l_0_10_245 () Real)
(declare-fun l_0_10_257 () Real)
(declare-fun l_0_10_244 () Real)
(declare-fun l_0_10_256 () Real)
(declare-fun l_0_10_243 () Real)
(declare-fun l_0_10_255 () Real)
(declare-fun l_0_10_242 () Real)
(declare-fun l_0_10_254 () Real)
(declare-fun l_0_10_241 () Real)
(declare-fun l_0_10_34 () Real)
(declare-fun l_0_10_21 () Real)
(declare-fun l_0_10_33 () Real)
(declare-fun l_0_10_20 () Real)
(declare-fun l_0_10_32 () Real)
(declare-fun l_0_10_19 () Real)
(declare-fun l_0_10_31 () Real)
(declare-fun l_0_10_18 () Real)
(declare-fun l_0_10_30 () Real)
(declare-fun l_0_10_17 () Real)
(declare-fun l_0_10_29 () Real)
(declare-fun l_0_10_16 () Real)
(declare-fun l_0_10_4 () Real)
(declare-fun l_0_10_52 () Real)
(declare-fun l_0_10_7 () Real)
(declare-fun l_0_10_56 () Real)
(declare-fun l_0_10_169 () Real)
(declare-fun l_0_10_156 () Real)
(declare-fun l_0_10_168 () Real)
(declare-fun l_0_10_155 () Real)
(declare-fun l_0_10_167 () Real)
(declare-fun l_0_10_154 () Real)
(declare-fun l_0_10_166 () Real)
(declare-fun l_0_10_153 () Real)
(declare-fun l_0_10_165 () Real)
(declare-fun l_0_10_152 () Real)
(declare-fun l_0_10_164 () Real)
(declare-fun l_0_10_124 () Real)
(declare-fun l_0_10_111 () Real)
(declare-fun l_0_10_123 () Real)
(declare-fun l_0_10_110 () Real)
(declare-fun l_0_10_122 () Real)
(declare-fun l_0_10_109 () Real)
(declare-fun l_0_10_121 () Real)
(declare-fun l_0_10_108 () Real)
(declare-fun l_0_10_120 () Real)
(declare-fun l_0_10_107 () Real)
(declare-fun l_0_10_119 () Real)
(declare-fun l_0_10_11 () Real)
(declare-fun l_0_10_67 () Real)
(declare-fun l_0_10_22 () Real)
(declare-fun l_0_10_82 () Real)
(declare-fun l_0_10_37 () Real)
(declare-fun l_0_10_48 () Real)
(declare-fun l_0_10_3 () Real)
(declare-fun l_0_10_138 () Real)
(declare-fun l_0_10_137 () Real)
(declare-fun l_0_10_93 () Real)
(declare-fun l_0_10_92 () Real)
(declare-fun l_0_10_50 () Real)
(declare-fun l_0_10_5 () Real)
(declare-fun l_0_10_141 () Real)
(declare-fun l_0_10_140 () Real)
(declare-fun l_0_10_139 () Real)
(declare-fun l_0_10_96 () Real)
(declare-fun l_0_10_95 () Real)
(declare-fun l_0_10_94 () Real)
(declare-fun l_0_10_53 () Real)
(declare-fun l_0_10_8 () Real)
(declare-fun l_0_10_145 () Real)
(declare-fun l_0_10_144 () Real)
(declare-fun l_0_10_143 () Real)
(declare-fun l_0_10_142 () Real)
(declare-fun l_0_10_99 () Real)
(declare-fun l_0_10_98 () Real)
(declare-fun l_0_10_97 () Real)
(declare-fun l_0_10_100 () Real)
(declare-fun l_0_10_57 () Real)
(declare-fun l_0_10_150 () Real)
(declare-fun l_0_10_149 () Real)
(declare-fun l_0_10_148 () Real)
(declare-fun l_0_10_147 () Real)
(declare-fun l_0_10_146 () Real)
(declare-fun l_0_10_12 () Real)
(declare-fun l_0_10_105 () Real)
(declare-fun l_0_10_104 () Real)
(declare-fun l_0_10_103 () Real)
(declare-fun l_0_10_102 () Real)
(declare-fun l_0_10_101 () Real)
(declare-fun l_0_10_68 () Real)
(declare-fun l_0_10_23 () Real)
(declare-fun l_0_10_162 () Real)
(declare-fun l_0_10_161 () Real)
(declare-fun l_0_10_160 () Real)
(declare-fun l_0_10_159 () Real)
(declare-fun l_0_10_158 () Real)
(declare-fun l_0_10_157 () Real)
(declare-fun l_0_10_117 () Real)
(declare-fun l_0_10_116 () Real)
(declare-fun l_0_10_115 () Real)
(declare-fun l_0_10_114 () Real)
(declare-fun l_0_10_113 () Real)
(declare-fun l_0_10_112 () Real)
(declare-fun l_0_10_83 () Real)
(declare-fun l_0_10_38 () Real)
(declare-fun l_0_10_177 () Real)
(declare-fun l_0_10_176 () Real)
(declare-fun l_0_10_175 () Real)
(declare-fun l_0_10_174 () Real)
(declare-fun l_0_10_173 () Real)
(declare-fun l_0_10_172 () Real)
(declare-fun l_0_10_132 () Real)
(declare-fun l_0_10_131 () Real)
(declare-fun l_0_10_130 () Real)
(declare-fun l_0_10_129 () Real)
(declare-fun l_0_10_128 () Real)
(declare-fun l_0_10_127 () Real)
(declare-fun l_0_10_6 () Real)
(declare-fun l_0_10_51 () Real)
(declare-fun l_0_10_9 () Real)
(declare-fun l_0_10_54 () Real)
(declare-fun l_0_10_58 () Real)
(declare-fun l_0_10_13 () Real)
(declare-fun l_0_10_69 () Real)
(declare-fun l_0_10_24 () Real)
(declare-fun l_0_10_84 () Real)
(declare-fun l_0_10_39 () Real)
(declare-fun l_0_10_55 () Real)
(declare-fun l_0_10_10 () Real)
(declare-fun l_0_10_59 () Real)
(declare-fun l_0_10_14 () Real)
(declare-fun l_0_10_70 () Real)
(declare-fun l_0_10_25 () Real)
(declare-fun l_0_10_85 () Real)
(declare-fun l_0_10_40 () Real)
(declare-fun l_0_10_60 () Real)
(declare-fun l_0_10_15 () Real)
(declare-fun l_0_10_71 () Real)
(declare-fun l_0_10_26 () Real)
(declare-fun l_0_10_86 () Real)
(declare-fun l_0_10_41 () Real)
(declare-fun l_0_10_72 () Real)
(declare-fun l_0_10_27 () Real)
(declare-fun l_0_10_87 () Real)
(declare-fun l_0_10_42 () Real)
(declare-fun l_0_10_73 () Real)
(declare-fun l_0_10_28 () Real)
(declare-fun l_0_10_80 () Real)
(declare-fun l_0_10_35 () Real)
(declare-fun l_0_10_88 () Real)
(declare-fun l_0_10_43 () Real)
(declare-fun l_0_10_81 () Real)
(declare-fun l_0_10_36 () Real)
(declare-fun l_0_10_89 () Real)
(declare-fun l_0_10_44 () Real)
(declare-fun l_0_10_90 () Real)
(declare-fun l_0_10_45 () Real)
(declare-fun l_0_10_250 () Real)
(declare-fun l_0_10_235 () Real)
(declare-fun l_0_10_249 () Real)
(declare-fun l_0_10_234 () Real)
(declare-fun l_0_10_248 () Real)
(declare-fun l_0_10_233 () Real)
(declare-fun l_0_10_247 () Real)
(declare-fun l_0_10_232 () Real)
(declare-fun l_0_10_320 () Real)
(declare-fun l_0_10_318 () Real)
(declare-fun l_0_10_317 () Real)
(declare-fun l_0_10_275 () Real)
(declare-fun l_0_10_273 () Real)
(declare-fun l_0_10_272 () Real)
(declare-fun l_0_10_227 () Real)
(declare-fun l_0_10_185 () Real)
(declare-fun l_0_10_183 () Real)
(declare-fun l_0_10_182 () Real)
(declare-fun l_0_10_321 () Real)
(declare-fun l_0_10_276 () Real)
(declare-fun l_0_10_229 () Real)
(declare-fun l_0_10_186 () Real)
(declare-fun l_0_10_328 () Real)
(declare-fun l_0_10_327 () Real)
(declare-fun l_0_10_326 () Real)
(declare-fun l_0_10_283 () Real)
(declare-fun l_0_10_282 () Real)
(declare-fun l_0_10_281 () Real)
(declare-fun l_0_10_236 () Real)
(declare-fun l_0_10_193 () Real)
(declare-fun l_0_10_192 () Real)
(declare-fun l_0_10_191 () Real)
(declare-fun l_0_10_354 () Real)
(declare-fun l_0_10_353 () Real)
(declare-fun l_0_10_352 () Real)
(declare-fun l_0_10_309 () Real)
(declare-fun l_0_10_308 () Real)
(declare-fun l_0_10_307 () Real)
(declare-fun l_0_10_262 () Real)
(declare-fun l_0_10_219 () Real)
(declare-fun l_0_10_218 () Real)
(declare-fun l_0_10_217 () Real)
(declare-fun l_0_10_228 () Real)
(declare-fun l_0_10_230 () Real)
(declare-fun l_0_10_237 () Real)
(declare-fun l_0_10_263 () Real)
(declare-fun l_0_10_231 () Real)
(declare-fun l_0_10_238 () Real)
(declare-fun l_0_10_264 () Real)
(declare-fun l_0_10_239 () Real)
(declare-fun l_0_10_265 () Real)
(declare-fun l_0_10_240 () Real)
(declare-fun l_0_10_251 () Real)
(declare-fun l_0_10_266 () Real)
(declare-fun l_0_10_252 () Real)
(declare-fun l_0_10_267 () Real)
(declare-fun l_0_10_253 () Real)
(declare-fun l_0_10_260 () Real)
(declare-fun l_0_10_268 () Real)
(declare-fun l_0_10_261 () Real)
(declare-fun l_0_10_269 () Real)
(declare-fun l_0_10_270 () Real)
(declare-fun l_0_10_358 () Real)
(declare-fun l_0_10_343 () Real)
(declare-fun l_0_10_357 () Real)
(declare-fun l_0_10_342 () Real)
(declare-fun l_0_10_356 () Real)
(declare-fun l_0_10_341 () Real)
(declare-fun l_0_10_355 () Real)
(declare-fun l_0_10_313 () Real)
(declare-fun l_0_10_298 () Real)
(declare-fun l_0_10_312 () Real)
(declare-fun l_0_10_297 () Real)
(declare-fun l_0_10_311 () Real)
(declare-fun l_0_10_296 () Real)
(declare-fun l_0_10_310 () Real)
(declare-fun l_0_10_223 () Real)
(declare-fun l_0_10_208 () Real)
(declare-fun l_0_10_222 () Real)
(declare-fun l_0_10_207 () Real)
(declare-fun l_0_10_221 () Real)
(declare-fun l_0_10_206 () Real)
(declare-fun l_0_10_220 () Real)
(declare-fun l_0_10_178 () Real)
(declare-fun l_0_10_163 () Real)
(declare-fun l_0_10_133 () Real)
(declare-fun l_0_10_118 () Real)
(declare-fun l_0_10_170 () Real)
(declare-fun l_0_10_125 () Real)
(declare-fun l_0_10_171 () Real)
(declare-fun l_0_10_126 () Real)
(declare-fun l_0_10_179 () Real)
(declare-fun l_0_10_134 () Real)
(declare-fun l_0_10_180 () Real)
(declare-fun l_0_10_135 () Real)
(declare-fun l_0_10_329 () Real)
(declare-fun l_0_10_284 () Real)
(declare-fun l_0_10_194 () Real)
(declare-fun l_0_10_330 () Real)
(declare-fun l_0_10_285 () Real)
(declare-fun l_0_10_195 () Real)
(declare-fun l_0_10_350 () Real)
(declare-fun l_0_10_305 () Real)
(declare-fun l_0_10_215 () Real)
(declare-fun l_0_10_351 () Real)
(declare-fun l_0_10_306 () Real)
(declare-fun l_0_10_216 () Real)
(declare-fun l_0_10_359 () Real)
(declare-fun l_0_10_314 () Real)
(declare-fun l_0_10_224 () Real)
(declare-fun l_0_10_360 () Real)
(declare-fun l_0_10_315 () Real)
(declare-fun l_0_10_225 () Real)
(declare-fun l_0_11_91 () Real)
(declare-fun l_0_11_403 () Real)
(declare-fun l_0_11_388 () Real)
(declare-fun l_0_11_402 () Real)
(declare-fun l_0_11_387 () Real)
(declare-fun l_0_11_401 () Real)
(declare-fun l_0_11_386 () Real)
(declare-fun l_0_11_400 () Real)
(declare-fun l_0_11_385 () Real)
(declare-fun l_0_11_399 () Real)
(declare-fun l_0_11_384 () Real)
(declare-fun l_0_11_398 () Real)
(declare-fun l_0_11_383 () Real)
(declare-fun l_0_11_397 () Real)
(declare-fun l_0_11_382 () Real)
(declare-fun l_0_11_358 () Real)
(declare-fun l_0_11_343 () Real)
(declare-fun l_0_11_357 () Real)
(declare-fun l_0_11_342 () Real)
(declare-fun l_0_11_356 () Real)
(declare-fun l_0_11_341 () Real)
(declare-fun l_0_11_355 () Real)
(declare-fun l_0_11_340 () Real)
(declare-fun l_0_11_354 () Real)
(declare-fun l_0_11_339 () Real)
(declare-fun l_0_11_353 () Real)
(declare-fun l_0_11_338 () Real)
(declare-fun l_0_11_352 () Real)
(declare-fun l_0_11_337 () Real)
(declare-fun l_0_11_313 () Real)
(declare-fun l_0_11_298 () Real)
(declare-fun l_0_11_312 () Real)
(declare-fun l_0_11_297 () Real)
(declare-fun l_0_11_311 () Real)
(declare-fun l_0_11_296 () Real)
(declare-fun l_0_11_310 () Real)
(declare-fun l_0_11_295 () Real)
(declare-fun l_0_11_309 () Real)
(declare-fun l_0_11_294 () Real)
(declare-fun l_0_11_308 () Real)
(declare-fun l_0_11_293 () Real)
(declare-fun l_0_11_307 () Real)
(declare-fun l_0_11_292 () Real)
(declare-fun l_0_11_223 () Real)
(declare-fun l_0_11_208 () Real)
(declare-fun l_0_11_222 () Real)
(declare-fun l_0_11_207 () Real)
(declare-fun l_0_11_221 () Real)
(declare-fun l_0_11_206 () Real)
(declare-fun l_0_11_220 () Real)
(declare-fun l_0_11_205 () Real)
(declare-fun l_0_11_219 () Real)
(declare-fun l_0_11_204 () Real)
(declare-fun l_0_11_218 () Real)
(declare-fun l_0_11_203 () Real)
(declare-fun l_0_11_217 () Real)
(declare-fun l_0_11_202 () Real)
(declare-fun l_0_11_136 () Real)
(declare-fun l_0_11_46 () Real)
(declare-fun l_0_11_370 () Real)
(declare-fun l_0_11_369 () Real)
(declare-fun l_0_11_368 () Real)
(declare-fun l_0_11_367 () Real)
(declare-fun l_0_11_325 () Real)
(declare-fun l_0_11_324 () Real)
(declare-fun l_0_11_323 () Real)
(declare-fun l_0_11_322 () Real)
(declare-fun l_0_11_280 () Real)
(declare-fun l_0_11_279 () Real)
(declare-fun l_0_11_278 () Real)
(declare-fun l_0_11_277 () Real)
(declare-fun l_0_11_190 () Real)
(declare-fun l_0_11_189 () Real)
(declare-fun l_0_11_188 () Real)
(declare-fun l_0_11_187 () Real)
(declare-fun l_0_11_1 () Real)
(declare-fun l_0_11_390 () Real)
(declare-fun l_0_11_363 () Real)
(declare-fun l_0_11_389 () Real)
(declare-fun l_0_11_362 () Real)
(declare-fun l_0_11_345 () Real)
(declare-fun l_0_11_318 () Real)
(declare-fun l_0_11_344 () Real)
(declare-fun l_0_11_317 () Real)
(declare-fun l_0_11_300 () Real)
(declare-fun l_0_11_273 () Real)
(declare-fun l_0_11_299 () Real)
(declare-fun l_0_11_272 () Real)
(declare-fun l_0_11_210 () Real)
(declare-fun l_0_11_183 () Real)
(declare-fun l_0_11_209 () Real)
(declare-fun l_0_11_182 () Real)
(declare-fun _a_9_ () Real)
(declare-fun l_0_11_361 () Real)
(declare-fun l_0_11_316 () Real)
(declare-fun l_0_11_271 () Real)
(declare-fun l_0_11_181 () Real)
(declare-fun _a_10_ () Real)
(declare-fun l_0_11_394 () Real)
(declare-fun l_0_11_381 () Real)
(declare-fun l_0_11_393 () Real)
(declare-fun l_0_11_380 () Real)
(declare-fun l_0_11_392 () Real)
(declare-fun l_0_11_379 () Real)
(declare-fun l_0_11_391 () Real)
(declare-fun l_0_11_378 () Real)
(declare-fun l_0_11_377 () Real)
(declare-fun l_0_11_376 () Real)
(declare-fun l_0_11_349 () Real)
(declare-fun l_0_11_336 () Real)
(declare-fun l_0_11_348 () Real)
(declare-fun l_0_11_335 () Real)
(declare-fun l_0_11_347 () Real)
(declare-fun l_0_11_334 () Real)
(declare-fun l_0_11_346 () Real)
(declare-fun l_0_11_333 () Real)
(declare-fun l_0_11_332 () Real)
(declare-fun l_0_11_331 () Real)
(declare-fun l_0_11_304 () Real)
(declare-fun l_0_11_291 () Real)
(declare-fun l_0_11_303 () Real)
(declare-fun l_0_11_290 () Real)
(declare-fun l_0_11_302 () Real)
(declare-fun l_0_11_289 () Real)
(declare-fun l_0_11_301 () Real)
(declare-fun l_0_11_288 () Real)
(declare-fun l_0_11_287 () Real)
(declare-fun l_0_11_286 () Real)
(declare-fun l_0_11_214 () Real)
(declare-fun l_0_11_201 () Real)
(declare-fun l_0_11_213 () Real)
(declare-fun l_0_11_200 () Real)
(declare-fun l_0_11_212 () Real)
(declare-fun l_0_11_199 () Real)
(declare-fun l_0_11_211 () Real)
(declare-fun l_0_11_198 () Real)
(declare-fun l_0_11_197 () Real)
(declare-fun l_0_11_196 () Real)
(declare-fun _a_11_ () Real)
(declare-fun _a_6_ () Real)
(declare-fun l_0_11_364 () Real)
(declare-fun l_0_11_319 () Real)
(declare-fun l_0_11_274 () Real)
(declare-fun l_0_11_226 () Real)
(declare-fun l_0_11_184 () Real)
(declare-fun _a_7_ () Real)
(declare-fun l_0_11_371 () Real)
(declare-fun l_0_11_326 () Real)
(declare-fun l_0_11_281 () Real)
(declare-fun l_0_11_191 () Real)
(declare-fun _a_8_ () Real)
(declare-fun l_0_11_47 () Real)
(declare-fun l_0_11_151 () Real)
(declare-fun l_0_11_106 () Real)
(declare-fun l_0_11_2 () Real)
(declare-fun l_0_11_79 () Real)
(declare-fun l_0_11_66 () Real)
(declare-fun l_0_11_78 () Real)
(declare-fun l_0_11_65 () Real)
(declare-fun l_0_11_77 () Real)
(declare-fun l_0_11_64 () Real)
(declare-fun l_0_11_76 () Real)
(declare-fun l_0_11_63 () Real)
(declare-fun l_0_11_75 () Real)
(declare-fun l_0_11_62 () Real)
(declare-fun l_0_11_74 () Real)
(declare-fun l_0_11_61 () Real)
(declare-fun l_0_11_49 () Real)
(declare-fun l_0_11_259 () Real)
(declare-fun l_0_11_246 () Real)
(declare-fun l_0_11_258 () Real)
(declare-fun l_0_11_245 () Real)
(declare-fun l_0_11_257 () Real)
(declare-fun l_0_11_244 () Real)
(declare-fun l_0_11_256 () Real)
(declare-fun l_0_11_243 () Real)
(declare-fun l_0_11_255 () Real)
(declare-fun l_0_11_242 () Real)
(declare-fun l_0_11_254 () Real)
(declare-fun l_0_11_241 () Real)
(declare-fun l_0_11_34 () Real)
(declare-fun l_0_11_21 () Real)
(declare-fun l_0_11_33 () Real)
(declare-fun l_0_11_20 () Real)
(declare-fun l_0_11_32 () Real)
(declare-fun l_0_11_19 () Real)
(declare-fun l_0_11_31 () Real)
(declare-fun l_0_11_18 () Real)
(declare-fun l_0_11_30 () Real)
(declare-fun l_0_11_17 () Real)
(declare-fun l_0_11_29 () Real)
(declare-fun l_0_11_16 () Real)
(declare-fun l_0_11_4 () Real)
(declare-fun l_0_11_52 () Real)
(declare-fun l_0_11_7 () Real)
(declare-fun l_0_11_56 () Real)
(declare-fun l_0_11_169 () Real)
(declare-fun l_0_11_156 () Real)
(declare-fun l_0_11_168 () Real)
(declare-fun l_0_11_155 () Real)
(declare-fun l_0_11_167 () Real)
(declare-fun l_0_11_154 () Real)
(declare-fun l_0_11_166 () Real)
(declare-fun l_0_11_153 () Real)
(declare-fun l_0_11_165 () Real)
(declare-fun l_0_11_152 () Real)
(declare-fun l_0_11_164 () Real)
(declare-fun l_0_11_124 () Real)
(declare-fun l_0_11_111 () Real)
(declare-fun l_0_11_123 () Real)
(declare-fun l_0_11_110 () Real)
(declare-fun l_0_11_122 () Real)
(declare-fun l_0_11_109 () Real)
(declare-fun l_0_11_121 () Real)
(declare-fun l_0_11_108 () Real)
(declare-fun l_0_11_120 () Real)
(declare-fun l_0_11_107 () Real)
(declare-fun l_0_11_119 () Real)
(declare-fun l_0_11_11 () Real)
(declare-fun l_0_11_67 () Real)
(declare-fun l_0_11_22 () Real)
(declare-fun l_0_11_82 () Real)
(declare-fun l_0_11_37 () Real)
(declare-fun l_0_11_48 () Real)
(declare-fun l_0_11_3 () Real)
(declare-fun l_0_11_138 () Real)
(declare-fun l_0_11_137 () Real)
(declare-fun l_0_11_93 () Real)
(declare-fun l_0_11_92 () Real)
(declare-fun l_0_11_50 () Real)
(declare-fun l_0_11_5 () Real)
(declare-fun l_0_11_141 () Real)
(declare-fun l_0_11_140 () Real)
(declare-fun l_0_11_139 () Real)
(declare-fun l_0_11_96 () Real)
(declare-fun l_0_11_95 () Real)
(declare-fun l_0_11_94 () Real)
(declare-fun l_0_11_53 () Real)
(declare-fun l_0_11_8 () Real)
(declare-fun l_0_11_145 () Real)
(declare-fun l_0_11_144 () Real)
(declare-fun l_0_11_143 () Real)
(declare-fun l_0_11_142 () Real)
(declare-fun l_0_11_99 () Real)
(declare-fun l_0_11_98 () Real)
(declare-fun l_0_11_97 () Real)
(declare-fun l_0_11_100 () Real)
(declare-fun l_0_11_57 () Real)
(declare-fun l_0_11_150 () Real)
(declare-fun l_0_11_149 () Real)
(declare-fun l_0_11_148 () Real)
(declare-fun l_0_11_147 () Real)
(declare-fun l_0_11_146 () Real)
(declare-fun l_0_11_12 () Real)
(declare-fun l_0_11_105 () Real)
(declare-fun l_0_11_104 () Real)
(declare-fun l_0_11_103 () Real)
(declare-fun l_0_11_102 () Real)
(declare-fun l_0_11_101 () Real)
(declare-fun l_0_11_68 () Real)
(declare-fun l_0_11_23 () Real)
(declare-fun l_0_11_162 () Real)
(declare-fun l_0_11_161 () Real)
(declare-fun l_0_11_160 () Real)
(declare-fun l_0_11_159 () Real)
(declare-fun l_0_11_158 () Real)
(declare-fun l_0_11_157 () Real)
(declare-fun l_0_11_117 () Real)
(declare-fun l_0_11_116 () Real)
(declare-fun l_0_11_115 () Real)
(declare-fun l_0_11_114 () Real)
(declare-fun l_0_11_113 () Real)
(declare-fun l_0_11_112 () Real)
(declare-fun l_0_11_83 () Real)
(declare-fun l_0_11_38 () Real)
(declare-fun l_0_11_177 () Real)
(declare-fun l_0_11_176 () Real)
(declare-fun l_0_11_175 () Real)
(declare-fun l_0_11_174 () Real)
(declare-fun l_0_11_173 () Real)
(declare-fun l_0_11_172 () Real)
(declare-fun l_0_11_132 () Real)
(declare-fun l_0_11_131 () Real)
(declare-fun l_0_11_130 () Real)
(declare-fun l_0_11_129 () Real)
(declare-fun l_0_11_128 () Real)
(declare-fun l_0_11_127 () Real)
(declare-fun l_0_11_6 () Real)
(declare-fun l_0_11_51 () Real)
(declare-fun l_0_11_9 () Real)
(declare-fun l_0_11_54 () Real)
(declare-fun l_0_11_58 () Real)
(declare-fun l_0_11_13 () Real)
(declare-fun l_0_11_69 () Real)
(declare-fun l_0_11_24 () Real)
(declare-fun l_0_11_84 () Real)
(declare-fun l_0_11_39 () Real)
(declare-fun l_0_11_55 () Real)
(declare-fun l_0_11_10 () Real)
(declare-fun l_0_11_59 () Real)
(declare-fun l_0_11_14 () Real)
(declare-fun l_0_11_70 () Real)
(declare-fun l_0_11_25 () Real)
(declare-fun l_0_11_85 () Real)
(declare-fun l_0_11_40 () Real)
(declare-fun l_0_11_60 () Real)
(declare-fun l_0_11_15 () Real)
(declare-fun l_0_11_71 () Real)
(declare-fun l_0_11_26 () Real)
(declare-fun l_0_11_86 () Real)
(declare-fun l_0_11_41 () Real)
(declare-fun l_0_11_72 () Real)
(declare-fun l_0_11_27 () Real)
(declare-fun l_0_11_87 () Real)
(declare-fun l_0_11_42 () Real)
(declare-fun l_0_11_73 () Real)
(declare-fun l_0_11_28 () Real)
(declare-fun l_0_11_80 () Real)
(declare-fun l_0_11_35 () Real)
(declare-fun l_0_11_88 () Real)
(declare-fun l_0_11_43 () Real)
(declare-fun l_0_11_81 () Real)
(declare-fun l_0_11_36 () Real)
(declare-fun l_0_11_89 () Real)
(declare-fun l_0_11_44 () Real)
(declare-fun l_0_11_90 () Real)
(declare-fun l_0_11_45 () Real)
(declare-fun l_0_11_250 () Real)
(declare-fun l_0_11_235 () Real)
(declare-fun l_0_11_249 () Real)
(declare-fun l_0_11_234 () Real)
(declare-fun l_0_11_248 () Real)
(declare-fun l_0_11_233 () Real)
(declare-fun l_0_11_247 () Real)
(declare-fun l_0_11_232 () Real)
(declare-fun l_0_11_365 () Real)
(declare-fun l_0_11_320 () Real)
(declare-fun l_0_11_275 () Real)
(declare-fun l_0_11_227 () Real)
(declare-fun l_0_11_185 () Real)
(declare-fun l_0_11_366 () Real)
(declare-fun l_0_11_321 () Real)
(declare-fun l_0_11_276 () Real)
(declare-fun l_0_11_229 () Real)
(declare-fun l_0_11_186 () Real)
(declare-fun l_0_11_373 () Real)
(declare-fun l_0_11_372 () Real)
(declare-fun l_0_11_328 () Real)
(declare-fun l_0_11_327 () Real)
(declare-fun l_0_11_283 () Real)
(declare-fun l_0_11_282 () Real)
(declare-fun l_0_11_236 () Real)
(declare-fun l_0_11_193 () Real)
(declare-fun l_0_11_192 () Real)
(declare-fun l_0_11_262 () Real)
(declare-fun l_0_11_228 () Real)
(declare-fun l_0_11_230 () Real)
(declare-fun l_0_11_237 () Real)
(declare-fun l_0_11_263 () Real)
(declare-fun l_0_11_231 () Real)
(declare-fun l_0_11_238 () Real)
(declare-fun l_0_11_264 () Real)
(declare-fun l_0_11_239 () Real)
(declare-fun l_0_11_265 () Real)
(declare-fun l_0_11_240 () Real)
(declare-fun l_0_11_251 () Real)
(declare-fun l_0_11_266 () Real)
(declare-fun l_0_11_252 () Real)
(declare-fun l_0_11_267 () Real)
(declare-fun l_0_11_253 () Real)
(declare-fun l_0_11_260 () Real)
(declare-fun l_0_11_268 () Real)
(declare-fun l_0_11_261 () Real)
(declare-fun l_0_11_269 () Real)
(declare-fun l_0_11_270 () Real)
(declare-fun l_0_11_178 () Real)
(declare-fun l_0_11_163 () Real)
(declare-fun l_0_11_133 () Real)
(declare-fun l_0_11_118 () Real)
(declare-fun l_0_11_170 () Real)
(declare-fun l_0_11_125 () Real)
(declare-fun l_0_11_171 () Real)
(declare-fun l_0_11_126 () Real)
(declare-fun l_0_11_179 () Real)
(declare-fun l_0_11_134 () Real)
(declare-fun l_0_11_180 () Real)
(declare-fun l_0_11_135 () Real)
(declare-fun l_0_11_374 () Real)
(declare-fun l_0_11_329 () Real)
(declare-fun l_0_11_284 () Real)
(declare-fun l_0_11_194 () Real)
(declare-fun l_0_11_375 () Real)
(declare-fun l_0_11_330 () Real)
(declare-fun l_0_11_285 () Real)
(declare-fun l_0_11_195 () Real)
(declare-fun l_0_11_395 () Real)
(declare-fun l_0_11_350 () Real)
(declare-fun l_0_11_305 () Real)
(declare-fun l_0_11_215 () Real)
(declare-fun l_0_11_396 () Real)
(declare-fun l_0_11_351 () Real)
(declare-fun l_0_11_306 () Real)
(declare-fun l_0_11_216 () Real)
(declare-fun l_0_11_404 () Real)
(declare-fun l_0_11_359 () Real)
(declare-fun l_0_11_314 () Real)
(declare-fun l_0_11_224 () Real)
(declare-fun l_0_11_405 () Real)
(declare-fun l_0_11_360 () Real)
(declare-fun l_0_11_315 () Real)
(declare-fun l_0_11_225 () Real)
(declare-fun l_0_12_406 () Real)
(declare-fun l_0_12_361 () Real)
(declare-fun l_0_12_316 () Real)
(declare-fun l_0_12_271 () Real)
(declare-fun l_0_12_181 () Real)
(declare-fun l_0_12_46 () Real)
(declare-fun l_0_12_409 () Real)
(declare-fun l_0_12_364 () Real)
(declare-fun l_0_12_319 () Real)
(declare-fun l_0_12_274 () Real)
(declare-fun l_0_12_226 () Real)
(declare-fun l_0_12_184 () Real)
(declare-fun l_0_12_1 () Real)
(declare-fun l_0_12_91 () Real)
(declare-fun l_0_12_416 () Real)
(declare-fun l_0_12_371 () Real)
(declare-fun l_0_12_326 () Real)
(declare-fun l_0_12_281 () Real)
(declare-fun l_0_12_191 () Real)
(declare-fun l_0_12_136 () Real)
(declare-fun l_0_12_448 () Real)
(declare-fun l_0_12_433 () Real)
(declare-fun l_0_12_447 () Real)
(declare-fun l_0_12_432 () Real)
(declare-fun l_0_12_446 () Real)
(declare-fun l_0_12_431 () Real)
(declare-fun l_0_12_445 () Real)
(declare-fun l_0_12_430 () Real)
(declare-fun l_0_12_444 () Real)
(declare-fun l_0_12_429 () Real)
(declare-fun l_0_12_443 () Real)
(declare-fun l_0_12_428 () Real)
(declare-fun l_0_12_442 () Real)
(declare-fun l_0_12_427 () Real)
(declare-fun l_0_12_403 () Real)
(declare-fun l_0_12_388 () Real)
(declare-fun l_0_12_402 () Real)
(declare-fun l_0_12_387 () Real)
(declare-fun l_0_12_401 () Real)
(declare-fun l_0_12_386 () Real)
(declare-fun l_0_12_400 () Real)
(declare-fun l_0_12_385 () Real)
(declare-fun l_0_12_399 () Real)
(declare-fun l_0_12_384 () Real)
(declare-fun l_0_12_398 () Real)
(declare-fun l_0_12_383 () Real)
(declare-fun l_0_12_397 () Real)
(declare-fun l_0_12_382 () Real)
(declare-fun l_0_12_358 () Real)
(declare-fun l_0_12_343 () Real)
(declare-fun l_0_12_357 () Real)
(declare-fun l_0_12_342 () Real)
(declare-fun l_0_12_356 () Real)
(declare-fun l_0_12_341 () Real)
(declare-fun l_0_12_355 () Real)
(declare-fun l_0_12_340 () Real)
(declare-fun l_0_12_354 () Real)
(declare-fun l_0_12_339 () Real)
(declare-fun l_0_12_353 () Real)
(declare-fun l_0_12_338 () Real)
(declare-fun l_0_12_352 () Real)
(declare-fun l_0_12_337 () Real)
(declare-fun l_0_12_313 () Real)
(declare-fun l_0_12_298 () Real)
(declare-fun l_0_12_312 () Real)
(declare-fun l_0_12_297 () Real)
(declare-fun l_0_12_311 () Real)
(declare-fun l_0_12_296 () Real)
(declare-fun l_0_12_310 () Real)
(declare-fun l_0_12_295 () Real)
(declare-fun l_0_12_309 () Real)
(declare-fun l_0_12_294 () Real)
(declare-fun l_0_12_308 () Real)
(declare-fun l_0_12_293 () Real)
(declare-fun l_0_12_307 () Real)
(declare-fun l_0_12_292 () Real)
(declare-fun l_0_12_223 () Real)
(declare-fun l_0_12_208 () Real)
(declare-fun l_0_12_222 () Real)
(declare-fun l_0_12_207 () Real)
(declare-fun l_0_12_221 () Real)
(declare-fun l_0_12_206 () Real)
(declare-fun l_0_12_220 () Real)
(declare-fun l_0_12_205 () Real)
(declare-fun l_0_12_219 () Real)
(declare-fun l_0_12_204 () Real)
(declare-fun l_0_12_218 () Real)
(declare-fun l_0_12_203 () Real)
(declare-fun l_0_12_217 () Real)
(declare-fun l_0_12_202 () Real)
(declare-fun l_0_12_415 () Real)
(declare-fun l_0_12_414 () Real)
(declare-fun l_0_12_413 () Real)
(declare-fun l_0_12_412 () Real)
(declare-fun l_0_12_370 () Real)
(declare-fun l_0_12_369 () Real)
(declare-fun l_0_12_368 () Real)
(declare-fun l_0_12_367 () Real)
(declare-fun l_0_12_325 () Real)
(declare-fun l_0_12_324 () Real)
(declare-fun l_0_12_323 () Real)
(declare-fun l_0_12_322 () Real)
(declare-fun l_0_12_280 () Real)
(declare-fun l_0_12_279 () Real)
(declare-fun l_0_12_278 () Real)
(declare-fun l_0_12_277 () Real)
(declare-fun l_0_12_190 () Real)
(declare-fun l_0_12_189 () Real)
(declare-fun l_0_12_188 () Real)
(declare-fun l_0_12_187 () Real)
(declare-fun l_0_12_435 () Real)
(declare-fun l_0_12_408 () Real)
(declare-fun l_0_12_434 () Real)
(declare-fun l_0_12_407 () Real)
(declare-fun l_0_12_390 () Real)
(declare-fun l_0_12_363 () Real)
(declare-fun l_0_12_389 () Real)
(declare-fun l_0_12_362 () Real)
(declare-fun l_0_12_345 () Real)
(declare-fun l_0_12_318 () Real)
(declare-fun l_0_12_344 () Real)
(declare-fun l_0_12_317 () Real)
(declare-fun l_0_12_300 () Real)
(declare-fun l_0_12_273 () Real)
(declare-fun l_0_12_299 () Real)
(declare-fun l_0_12_272 () Real)
(declare-fun l_0_12_210 () Real)
(declare-fun l_0_12_183 () Real)
(declare-fun l_0_12_209 () Real)
(declare-fun l_0_12_182 () Real)
(declare-fun l_0_12_439 () Real)
(declare-fun l_0_12_426 () Real)
(declare-fun l_0_12_438 () Real)
(declare-fun l_0_12_425 () Real)
(declare-fun l_0_12_437 () Real)
(declare-fun l_0_12_424 () Real)
(declare-fun l_0_12_436 () Real)
(declare-fun l_0_12_423 () Real)
(declare-fun l_0_12_422 () Real)
(declare-fun l_0_12_421 () Real)
(declare-fun l_0_12_394 () Real)
(declare-fun l_0_12_381 () Real)
(declare-fun l_0_12_393 () Real)
(declare-fun l_0_12_380 () Real)
(declare-fun l_0_12_392 () Real)
(declare-fun l_0_12_379 () Real)
(declare-fun l_0_12_391 () Real)
(declare-fun l_0_12_378 () Real)
(declare-fun l_0_12_377 () Real)
(declare-fun l_0_12_376 () Real)
(declare-fun l_0_12_349 () Real)
(declare-fun l_0_12_336 () Real)
(declare-fun l_0_12_348 () Real)
(declare-fun l_0_12_335 () Real)
(declare-fun l_0_12_347 () Real)
(declare-fun l_0_12_334 () Real)
(declare-fun l_0_12_346 () Real)
(declare-fun l_0_12_333 () Real)
(declare-fun l_0_12_332 () Real)
(declare-fun l_0_12_331 () Real)
(declare-fun l_0_12_304 () Real)
(declare-fun l_0_12_291 () Real)
(declare-fun l_0_12_303 () Real)
(declare-fun l_0_12_290 () Real)
(declare-fun l_0_12_302 () Real)
(declare-fun l_0_12_289 () Real)
(declare-fun l_0_12_301 () Real)
(declare-fun l_0_12_288 () Real)
(declare-fun l_0_12_287 () Real)
(declare-fun l_0_12_286 () Real)
(declare-fun l_0_12_214 () Real)
(declare-fun l_0_12_201 () Real)
(declare-fun l_0_12_213 () Real)
(declare-fun l_0_12_200 () Real)
(declare-fun l_0_12_212 () Real)
(declare-fun l_0_12_199 () Real)
(declare-fun l_0_12_211 () Real)
(declare-fun l_0_12_198 () Real)
(declare-fun l_0_12_197 () Real)
(declare-fun l_0_12_196 () Real)
(declare-fun l_0_12_47 () Real)
(declare-fun l_0_12_151 () Real)
(declare-fun l_0_12_106 () Real)
(declare-fun l_0_12_2 () Real)
(declare-fun l_0_12_79 () Real)
(declare-fun l_0_12_66 () Real)
(declare-fun l_0_12_78 () Real)
(declare-fun l_0_12_65 () Real)
(declare-fun l_0_12_77 () Real)
(declare-fun l_0_12_64 () Real)
(declare-fun l_0_12_76 () Real)
(declare-fun l_0_12_63 () Real)
(declare-fun l_0_12_75 () Real)
(declare-fun l_0_12_62 () Real)
(declare-fun l_0_12_74 () Real)
(declare-fun l_0_12_61 () Real)
(declare-fun l_0_12_49 () Real)
(declare-fun l_0_12_259 () Real)
(declare-fun l_0_12_246 () Real)
(declare-fun l_0_12_258 () Real)
(declare-fun l_0_12_245 () Real)
(declare-fun l_0_12_257 () Real)
(declare-fun l_0_12_244 () Real)
(declare-fun l_0_12_256 () Real)
(declare-fun l_0_12_243 () Real)
(declare-fun l_0_12_255 () Real)
(declare-fun l_0_12_242 () Real)
(declare-fun l_0_12_254 () Real)
(declare-fun l_0_12_241 () Real)
(declare-fun l_0_12_34 () Real)
(declare-fun l_0_12_21 () Real)
(declare-fun l_0_12_33 () Real)
(declare-fun l_0_12_20 () Real)
(declare-fun l_0_12_32 () Real)
(declare-fun l_0_12_19 () Real)
(declare-fun l_0_12_31 () Real)
(declare-fun l_0_12_18 () Real)
(declare-fun l_0_12_30 () Real)
(declare-fun l_0_12_17 () Real)
(declare-fun l_0_12_29 () Real)
(declare-fun l_0_12_16 () Real)
(declare-fun l_0_12_4 () Real)
(declare-fun l_0_12_52 () Real)
(declare-fun l_0_12_7 () Real)
(declare-fun l_0_12_56 () Real)
(declare-fun l_0_12_169 () Real)
(declare-fun l_0_12_156 () Real)
(declare-fun l_0_12_168 () Real)
(declare-fun l_0_12_155 () Real)
(declare-fun l_0_12_167 () Real)
(declare-fun l_0_12_154 () Real)
(declare-fun l_0_12_166 () Real)
(declare-fun l_0_12_153 () Real)
(declare-fun l_0_12_165 () Real)
(declare-fun l_0_12_152 () Real)
(declare-fun l_0_12_164 () Real)
(declare-fun l_0_12_124 () Real)
(declare-fun l_0_12_111 () Real)
(declare-fun l_0_12_123 () Real)
(declare-fun l_0_12_110 () Real)
(declare-fun l_0_12_122 () Real)
(declare-fun l_0_12_109 () Real)
(declare-fun l_0_12_121 () Real)
(declare-fun l_0_12_108 () Real)
(declare-fun l_0_12_120 () Real)
(declare-fun l_0_12_107 () Real)
(declare-fun l_0_12_119 () Real)
(declare-fun l_0_12_11 () Real)
(declare-fun l_0_12_67 () Real)
(declare-fun l_0_12_22 () Real)
(declare-fun l_0_12_82 () Real)
(declare-fun l_0_12_37 () Real)
(declare-fun l_0_12_48 () Real)
(declare-fun l_0_12_3 () Real)
(declare-fun l_0_12_138 () Real)
(declare-fun l_0_12_137 () Real)
(declare-fun l_0_12_93 () Real)
(declare-fun l_0_12_92 () Real)
(declare-fun l_0_12_50 () Real)
(declare-fun l_0_12_5 () Real)
(declare-fun l_0_12_141 () Real)
(declare-fun l_0_12_140 () Real)
(declare-fun l_0_12_139 () Real)
(declare-fun l_0_12_96 () Real)
(declare-fun l_0_12_95 () Real)
(declare-fun l_0_12_94 () Real)
(declare-fun l_0_12_53 () Real)
(declare-fun l_0_12_8 () Real)
(declare-fun l_0_12_145 () Real)
(declare-fun l_0_12_144 () Real)
(declare-fun l_0_12_143 () Real)
(declare-fun l_0_12_142 () Real)
(declare-fun l_0_12_99 () Real)
(declare-fun l_0_12_98 () Real)
(declare-fun l_0_12_97 () Real)
(declare-fun l_0_12_100 () Real)
(declare-fun l_0_12_57 () Real)
(declare-fun l_0_12_150 () Real)
(declare-fun l_0_12_149 () Real)
(declare-fun l_0_12_148 () Real)
(declare-fun l_0_12_147 () Real)
(declare-fun l_0_12_146 () Real)
(declare-fun l_0_12_12 () Real)
(declare-fun l_0_12_105 () Real)
(declare-fun l_0_12_104 () Real)
(declare-fun l_0_12_103 () Real)
(declare-fun l_0_12_102 () Real)
(declare-fun l_0_12_101 () Real)
(declare-fun l_0_12_68 () Real)
(declare-fun l_0_12_23 () Real)
(declare-fun l_0_12_162 () Real)
(declare-fun l_0_12_161 () Real)
(declare-fun l_0_12_160 () Real)
(declare-fun l_0_12_159 () Real)
(declare-fun l_0_12_158 () Real)
(declare-fun l_0_12_157 () Real)
(declare-fun l_0_12_117 () Real)
(declare-fun l_0_12_116 () Real)
(declare-fun l_0_12_115 () Real)
(declare-fun l_0_12_114 () Real)
(declare-fun l_0_12_113 () Real)
(declare-fun l_0_12_112 () Real)
(declare-fun l_0_12_83 () Real)
(declare-fun l_0_12_38 () Real)
(declare-fun l_0_12_177 () Real)
(declare-fun l_0_12_176 () Real)
(declare-fun l_0_12_175 () Real)
(declare-fun l_0_12_174 () Real)
(declare-fun l_0_12_173 () Real)
(declare-fun l_0_12_172 () Real)
(declare-fun l_0_12_132 () Real)
(declare-fun l_0_12_131 () Real)
(declare-fun l_0_12_130 () Real)
(declare-fun l_0_12_129 () Real)
(declare-fun l_0_12_128 () Real)
(declare-fun l_0_12_127 () Real)
(declare-fun l_0_12_6 () Real)
(declare-fun l_0_12_51 () Real)
(declare-fun l_0_12_9 () Real)
(declare-fun l_0_12_54 () Real)
(declare-fun l_0_12_58 () Real)
(declare-fun l_0_12_13 () Real)
(declare-fun l_0_12_69 () Real)
(declare-fun l_0_12_24 () Real)
(declare-fun l_0_12_84 () Real)
(declare-fun l_0_12_39 () Real)
(declare-fun l_0_12_55 () Real)
(declare-fun l_0_12_10 () Real)
(declare-fun l_0_12_59 () Real)
(declare-fun l_0_12_14 () Real)
(declare-fun l_0_12_70 () Real)
(declare-fun l_0_12_25 () Real)
(declare-fun l_0_12_85 () Real)
(declare-fun l_0_12_40 () Real)
(declare-fun l_0_12_60 () Real)
(declare-fun l_0_12_15 () Real)
(declare-fun l_0_12_71 () Real)
(declare-fun l_0_12_26 () Real)
(declare-fun l_0_12_86 () Real)
(declare-fun l_0_12_41 () Real)
(declare-fun l_0_12_72 () Real)
(declare-fun l_0_12_27 () Real)
(declare-fun l_0_12_87 () Real)
(declare-fun l_0_12_42 () Real)
(declare-fun l_0_12_73 () Real)
(declare-fun l_0_12_28 () Real)
(declare-fun l_0_12_80 () Real)
(declare-fun l_0_12_35 () Real)
(declare-fun l_0_12_88 () Real)
(declare-fun l_0_12_43 () Real)
(declare-fun l_0_12_81 () Real)
(declare-fun l_0_12_36 () Real)
(declare-fun l_0_12_89 () Real)
(declare-fun l_0_12_44 () Real)
(declare-fun l_0_12_90 () Real)
(declare-fun l_0_12_45 () Real)
(declare-fun l_0_12_250 () Real)
(declare-fun l_0_12_235 () Real)
(declare-fun l_0_12_249 () Real)
(declare-fun l_0_12_234 () Real)
(declare-fun l_0_12_248 () Real)
(declare-fun l_0_12_233 () Real)
(declare-fun l_0_12_247 () Real)
(declare-fun l_0_12_232 () Real)
(declare-fun l_0_12_410 () Real)
(declare-fun l_0_12_365 () Real)
(declare-fun l_0_12_320 () Real)
(declare-fun l_0_12_275 () Real)
(declare-fun l_0_12_227 () Real)
(declare-fun l_0_12_185 () Real)
(declare-fun l_0_12_411 () Real)
(declare-fun l_0_12_366 () Real)
(declare-fun l_0_12_321 () Real)
(declare-fun l_0_12_276 () Real)
(declare-fun l_0_12_229 () Real)
(declare-fun l_0_12_186 () Real)
(declare-fun l_0_12_418 () Real)
(declare-fun l_0_12_417 () Real)
(declare-fun l_0_12_373 () Real)
(declare-fun l_0_12_372 () Real)
(declare-fun l_0_12_328 () Real)
(declare-fun l_0_12_327 () Real)
(declare-fun l_0_12_283 () Real)
(declare-fun l_0_12_282 () Real)
(declare-fun l_0_12_236 () Real)
(declare-fun l_0_12_193 () Real)
(declare-fun l_0_12_192 () Real)
(declare-fun l_0_12_262 () Real)
(declare-fun l_0_12_228 () Real)
(declare-fun l_0_12_230 () Real)
(declare-fun l_0_12_237 () Real)
(declare-fun l_0_12_263 () Real)
(declare-fun l_0_12_231 () Real)
(declare-fun l_0_12_238 () Real)
(declare-fun l_0_12_264 () Real)
(declare-fun l_0_12_239 () Real)
(declare-fun l_0_12_265 () Real)
(declare-fun l_0_12_240 () Real)
(declare-fun l_0_12_251 () Real)
(declare-fun l_0_12_266 () Real)
(declare-fun l_0_12_252 () Real)
(declare-fun l_0_12_267 () Real)
(declare-fun l_0_12_253 () Real)
(declare-fun l_0_12_260 () Real)
(declare-fun l_0_12_268 () Real)
(declare-fun l_0_12_261 () Real)
(declare-fun l_0_12_269 () Real)
(declare-fun l_0_12_270 () Real)
(declare-fun l_0_12_178 () Real)
(declare-fun l_0_12_163 () Real)
(declare-fun l_0_12_133 () Real)
(declare-fun l_0_12_118 () Real)
(declare-fun l_0_12_170 () Real)
(declare-fun l_0_12_125 () Real)
(declare-fun l_0_12_171 () Real)
(declare-fun l_0_12_126 () Real)
(declare-fun l_0_12_179 () Real)
(declare-fun l_0_12_134 () Real)
(declare-fun l_0_12_180 () Real)
(declare-fun l_0_12_135 () Real)
(declare-fun l_0_12_419 () Real)
(declare-fun l_0_12_374 () Real)
(declare-fun l_0_12_329 () Real)
(declare-fun l_0_12_284 () Real)
(declare-fun l_0_12_194 () Real)
(declare-fun l_0_12_420 () Real)
(declare-fun l_0_12_375 () Real)
(declare-fun l_0_12_330 () Real)
(declare-fun l_0_12_285 () Real)
(declare-fun l_0_12_195 () Real)
(declare-fun l_0_12_440 () Real)
(declare-fun l_0_12_395 () Real)
(declare-fun l_0_12_350 () Real)
(declare-fun l_0_12_305 () Real)
(declare-fun l_0_12_215 () Real)
(declare-fun l_0_12_441 () Real)
(declare-fun l_0_12_396 () Real)
(declare-fun l_0_12_351 () Real)
(declare-fun l_0_12_306 () Real)
(declare-fun l_0_12_216 () Real)
(declare-fun l_0_12_449 () Real)
(declare-fun l_0_12_404 () Real)
(declare-fun l_0_12_359 () Real)
(declare-fun l_0_12_314 () Real)
(declare-fun l_0_12_224 () Real)
(declare-fun l_0_12_450 () Real)
(declare-fun l_0_12_405 () Real)
(declare-fun l_0_12_360 () Real)
(declare-fun l_0_12_315 () Real)
(declare-fun l_0_12_225 () Real)
(assert
 (= (- l_0_0_1) 0.0))
(assert
 (= (- l_0_0_2) 0.0))
(assert
 (= (- l_0_0_3) 0.0))
(assert
 (>= l_0_0_1 0.0))
(assert
 (>= l_0_0_2 0.0))
(assert
 (>= l_0_0_3 0.0))
(assert
 (= (- l_0_1_1) 0.0))
(assert
 (= (- l_0_1_2) 0.0))
(assert
 (= (- (- (- l_0_1_3) l_0_1_4) l_0_1_5) 0.0))
(assert
 (>= l_0_1_1 0.0))
(assert
 (>= l_0_1_2 0.0))
(assert
 (>= l_0_1_3 0.0))
(assert
 (>= l_0_1_4 0.0))
(assert
 (>= l_0_1_5 0.0))
(assert
 (= (- l_0_2_2) 0.0))
(assert
 (= (- l_0_2_1) 0.0))
(assert
 (= (- (- (- (- (- l_0_2_3) l_0_2_4) l_0_2_5) l_0_2_6) l_0_2_7) 0.0))
(assert
 (>= l_0_2_1 0.0))
(assert
 (>= l_0_2_2 0.0))
(assert
 (>= l_0_2_3 0.0))
(assert
 (>= l_0_2_4 0.0))
(assert
 (>= l_0_2_5 0.0))
(assert
 (>= l_0_2_6 0.0))
(assert
 (>= l_0_2_7 0.0))
(assert
 (= (- l_0_3_2) 0.0))
(assert
 (= (- l_0_3_1) 0.0))
(assert
 (let ((?x3479 (- (- (- (- (- (- l_0_3_3) l_0_3_4) l_0_3_5) l_0_3_6) l_0_3_7) l_0_3_8)))
 (= (- ?x3479 l_0_3_9) 0.0)))
(assert
 (>= l_0_3_1 0.0))
(assert
 (>= l_0_3_2 0.0))
(assert
 (>= l_0_3_3 0.0))
(assert
 (>= l_0_3_4 0.0))
(assert
 (>= l_0_3_5 0.0))
(assert
 (>= l_0_3_6 0.0))
(assert
 (>= l_0_3_7 0.0))
(assert
 (>= l_0_3_8 0.0))
(assert
 (>= l_0_3_9 0.0))
(assert
 (let ((?x3516 (+ (- (* 1.0 (* l_0_4_181 l_0_4_181)) (* l_0_4_226 l_0_4_226)) 1.0)))
 (= ?x3516 0.0)))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x3529 (+ (+ (* (- l_0_4_1) l_0_4_1) (* (* 2.0 l_0_4_196) l_0_4_209)) (* (* 2.0 l_0_4_197) l_0_4_210))))
 (let ((?x3535 (+ (+ ?x3529 (* (* 2.0 l_0_4_198) l_0_4_211)) (* (* 2.0 l_0_4_199) l_0_4_212))))
 (let ((?x3541 (+ (+ ?x3535 (* (* 2.0 l_0_4_200) l_0_4_213)) (* (* 2.0 l_0_4_201) l_0_4_214))))
 (let ((?x3547 (- (- ?x3541 (* (* 2.0 l_0_4_241) l_0_4_254)) (* (* 2.0 l_0_4_242) l_0_4_255))))
 (let ((?x3553 (- (- ?x3547 (* (* 2.0 l_0_4_243) l_0_4_256)) (* (* 2.0 l_0_4_244) l_0_4_257))))
 (let ((?x3559 (- (- ?x3553 (* (* 2.0 l_0_4_245) l_0_4_258)) (* (* 2.0 l_0_4_246) l_0_4_259))))
 (= (+ ?x3559 ?x3560) 0.0)))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3627 (* ?x3626 l_0_4_47)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x3624 (* ?x3623 l_0_4_151)))
 (let ((?x3620 (* 2.0 l_0_4_106)))
 (let ((?x3621 (* ?x3620 l_0_4_91)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3619 (* ?x3618 l_0_4_2)))
 (= (+ (+ (- ?x3619 ?x3621) ?x3624) ?x3627) 0.0))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x3682 (* ?x3681 l_0_4_79)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x3679 (* ?x3678 l_0_4_78)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x3676 (* ?x3675 l_0_4_77)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x3673 (* ?x3672 l_0_4_76)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x3670 (* ?x3669 l_0_4_75)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x3667 (* ?x3666 l_0_4_74)))
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3664 (* ?x3626 l_0_4_49)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x3662 (* ?x3661 l_0_4_34)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x3659 (* ?x3658 l_0_4_33)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x3656 (* ?x3655 l_0_4_32)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x3653 (* ?x3652 l_0_4_31)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x3650 (* ?x3649 l_0_4_30)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x3642 (* ?x3641 l_0_4_29)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3639 (* ?x3618 l_0_4_4)))
 (let ((?x3665 (+ (+ (+ (+ (+ (+ (+ ?x3639 ?x3642) ?x3650) ?x3653) ?x3656) ?x3659) ?x3662) ?x3664)))
 (= (- (- (- (- (- (- ?x3665 ?x3667) ?x3670) ?x3673) ?x3676) ?x3679) ?x3682) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3749 (* ?x3626 l_0_4_52)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_7) ?x3749) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3794 (* ?x3626 l_0_4_56)))
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x3792 (* ?x3791 l_0_4_169)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x3789 (* ?x3788 l_0_4_168)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x3786 (* ?x3785 l_0_4_167)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x3783 (* ?x3782 l_0_4_166)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x3780 (* ?x3779 l_0_4_165)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x3777 (* ?x3776 l_0_4_164)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x3774 (* ?x3773 l_0_4_124)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x3771 (* ?x3770 l_0_4_123)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x3768 (* ?x3767 l_0_4_122)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3765 (* ?x3764 l_0_4_121)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3762 (* ?x3761 l_0_4_120)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3753 (* ?x3618 l_0_4_11)))
 (let ((?x3769 (+ (+ (+ (+ ?x3753 (* (* 2.0 l_0_4_106) l_0_4_119)) ?x3762) ?x3765) ?x3768)))
 (let ((?x3790 (- (- (- (- (- (+ (+ ?x3769 ?x3771) ?x3774) ?x3777) ?x3780) ?x3783) ?x3786) ?x3789)))
 (= (+ (- ?x3790 ?x3792) ?x3794) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3850 (* ?x3626 l_0_4_61)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_16) ?x3850) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3866 (* ?x3626 l_0_4_67)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_22) ?x3866) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3876 (* ?x3626 l_0_4_74)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_29) ?x3876) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3886 (* ?x3626 l_0_4_82)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3884 (* ?x3618 l_0_4_37)))
 (= (+ ?x3884 ?x3886) 0.0))))))
(assert
 (let ((?x3915 (* l_0_4_48 l_0_4_48)))
 (let ((?x3913 (* l_0_4_47 l_0_4_47)))
 (let ((?x3911 (* l_0_4_3 l_0_4_3)))
 (let ((?x3909 (* l_0_4_2 l_0_4_2)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x3907 (* ?x3906 l_0_4_152)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x3904 (* ?x3903 l_0_4_151)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3897 (* ?x3761 l_0_4_93)))
 (let ((?x3908 (+ (+ (- (* (* (- 2.0) l_0_4_106) l_0_4_92) ?x3897) ?x3904) ?x3907)))
 (= (+ (+ (- (- ?x3908 ?x3909) ?x3911) ?x3913) ?x3915) 0.0)))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x3968 (* ?x3967 l_0_4_50)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x3965 (* ?x3964 l_0_4_49)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x3962 (* ?x3961 l_0_4_5)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x3959 (* ?x3958 l_0_4_4)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x3956 (* ?x3955 l_0_4_153)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x3953 (* ?x3952 l_0_4_152)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x3950 (* ?x3949 l_0_4_151)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3947 (* ?x3764 l_0_4_96)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3945 (* ?x3761 l_0_4_95)))
 (let ((?x3954 (+ (+ (- (- (* (* (- 2.0) l_0_4_106) l_0_4_94) ?x3945) ?x3947) ?x3950) ?x3953)))
 (let ((?x3957 (+ ?x3954 ?x3956)))
 (= (+ (+ (- (- ?x3957 ?x3959) ?x3962) ?x3965) ?x3968) 0.0))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4040 (* ?x3967 l_0_4_53)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4038 (* ?x3964 l_0_4_52)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4036 (* ?x3961 l_0_4_8)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4034 (* ?x3958 l_0_4_7)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x4032 (* ?x4031 l_0_4_154)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x4029 (* ?x4028 l_0_4_153)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x4026 (* ?x4025 l_0_4_152)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x4023 (* ?x4022 l_0_4_151)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4020 (* ?x3764 l_0_4_99)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4018 (* ?x3761 l_0_4_98)))
 (let ((?x3620 (* 2.0 l_0_4_106)))
 (let ((?x4008 (* ?x3620 l_0_4_97)))
 (let ((?x4024 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_109) ?x4008) ?x4018) ?x4020) ?x4023)))
 (let ((?x4033 (+ (+ (+ ?x4024 ?x4026) ?x4029) ?x4032)))
 (= (+ (+ (- (- ?x4033 ?x4034) ?x4036) ?x4038) ?x4040) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4132 (* ?x3967 l_0_4_57)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4130 (* ?x3964 l_0_4_56)))
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x4128 (* ?x4127 l_0_4_155)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x4125 (* ?x4124 l_0_4_154)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x4122 (* ?x4121 l_0_4_153)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x4119 (* ?x4118 l_0_4_152)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x4116 (* ?x4115 l_0_4_151)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4113 (* ?x4112 l_0_4_3)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x4110 (* ?x4109 l_0_4_2)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x4107 (* ?x4106 l_0_4_110)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x4104 (* ?x4103 l_0_4_109)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x4101 (* ?x4100 l_0_4_108)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x4098 (* ?x4088 l_0_4_107)))
 (let ((?x4108 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_106) ?x4098) ?x4101) ?x4104) ?x4107)))
 (let ((?x4129 (+ (+ (+ (+ (+ (- (- ?x4108 ?x4110) ?x4113) ?x4116) ?x4119) ?x4122) ?x4125) ?x4128)))
 (= (+ (+ ?x4129 ?x4130) ?x4132) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4220 (* ?x3967 l_0_4_62)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4218 (* ?x3964 l_0_4_61)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4216 (* ?x3649 l_0_4_3)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x4214 (* ?x3641 l_0_4_2)))
 (let ((?x4212 (* l_0_4_156 l_0_4_156)))
 (let ((?x4210 (* l_0_4_155 l_0_4_155)))
 (let ((?x4208 (* l_0_4_154 l_0_4_154)))
 (let ((?x4206 (* l_0_4_153 l_0_4_153)))
 (let ((?x4204 (* l_0_4_152 l_0_4_152)))
 (let ((?x4202 (* l_0_4_151 l_0_4_151)))
 (let ((?x4200 (* l_0_4_111 l_0_4_111)))
 (let ((?x4198 (* l_0_4_110 l_0_4_110)))
 (let ((?x4186 (* l_0_4_109 l_0_4_109)))
 (let ((?x4182 (* l_0_4_108 l_0_4_108)))
 (let ((?x4184 (- (- (* (- l_0_4_106) l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x4182)))
 (let ((?x4209 (+ (+ (+ (+ (- (- (- ?x4184 ?x4186) ?x4198) ?x4200) ?x4202) ?x4204) ?x4206) ?x4208)))
 (let ((?x4213 (+ (+ ?x4209 ?x4210) ?x4212)))
 (= (+ (+ (- (- ?x4213 ?x4214) ?x4216) ?x4218) ?x4220) 0.0)))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4296 (* ?x3967 l_0_4_68)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4294 (* ?x3964 l_0_4_67)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4292 (* ?x4291 l_0_4_3)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4289 (* ?x3958 l_0_4_22)))
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4287 (* ?x3791 l_0_4_162)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4285 (* ?x3788 l_0_4_161)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4283 (* ?x3785 l_0_4_160)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4281 (* ?x3782 l_0_4_159)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4279 (* ?x3779 l_0_4_158)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4277 (* ?x3776 l_0_4_157)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4275 (* ?x3773 l_0_4_117)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4273 (* ?x3770 l_0_4_116)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4271 (* ?x3767 l_0_4_115)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4269 (* ?x3764 l_0_4_114)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4257 (* ?x3761 l_0_4_113)))
 (let ((?x4274 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_112) ?x4257) ?x4269) ?x4271) ?x4273)))
 (let ((?x4288 (+ (+ (+ (+ (+ (+ (- ?x4274 ?x4275) ?x4277) ?x4279) ?x4281) ?x4283) ?x4285) ?x4287)))
 (= (+ (+ (- (- ?x4288 ?x4289) ?x4292) ?x4294) ?x4296) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4387 (* ?x3967 l_0_4_75)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4385 (* ?x3964 l_0_4_74)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4383 (* ?x3961 l_0_4_30)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4381 (* ?x3958 l_0_4_29)))
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x3792 (* ?x3791 l_0_4_169)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x3789 (* ?x3788 l_0_4_168)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x3786 (* ?x3785 l_0_4_167)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x3783 (* ?x3782 l_0_4_166)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x3780 (* ?x3779 l_0_4_165)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x3777 (* ?x3776 l_0_4_164)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x3774 (* ?x3773 l_0_4_124)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x3771 (* ?x3770 l_0_4_123)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x3768 (* ?x3767 l_0_4_122)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3765 (* ?x3764 l_0_4_121)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3762 (* ?x3761 l_0_4_120)))
 (let ((?x4373 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_119) ?x3762) ?x3765) ?x3768) ?x3771)))
 (let ((?x4380 (+ (+ (+ (+ (+ (+ (- ?x4373 ?x3774) ?x3777) ?x3780) ?x3783) ?x3786) ?x3789) ?x3792)))
 (= (+ (+ (- (- ?x4380 ?x4381) ?x4383) ?x4385) ?x4387) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4453 (* ?x3967 l_0_4_83)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4451 (* ?x3964 l_0_4_82)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4449 (* ?x3961 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4447 (* ?x3958 l_0_4_37)))
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4445 (* ?x3791 l_0_4_177)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4443 (* ?x3788 l_0_4_176)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4441 (* ?x3785 l_0_4_175)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4439 (* ?x3782 l_0_4_174)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4437 (* ?x3779 l_0_4_173)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4435 (* ?x3776 l_0_4_172)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4433 (* ?x3773 l_0_4_132)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4431 (* ?x3770 l_0_4_131)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4429 (* ?x3767 l_0_4_130)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4427 (* ?x3764 l_0_4_129)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4421 (* ?x3761 l_0_4_128)))
 (let ((?x4432 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_127) ?x4421) ?x4427) ?x4429) ?x4431)))
 (let ((?x4446 (+ (+ (+ (+ (+ (+ (- ?x4432 ?x4433) ?x4435) ?x4437) ?x4439) ?x4441) ?x4443) ?x4445)))
 (= (+ (+ (- (- ?x4446 ?x4447) ?x4449) ?x4451) ?x4453) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4536 (* l_0_4_6 l_0_4_6)))
 (let ((?x4534 (* l_0_4_51 l_0_4_51)))
 (let ((?x4532 (* l_0_4_50 l_0_4_50)))
 (let ((?x4530 (* l_0_4_5 l_0_4_5)))
 (let ((?x4533 (+ (- (+ (* (- l_0_4_4) l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4530) ?x4532)))
 (= (- (+ ?x4533 ?x4534) ?x4536) 0.0)))))))
(assert
 (let ((?x4566 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4563 (* ?x4562 l_0_4_54)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4560 (* ?x4559 l_0_4_53)))
 (let ((?x4557 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4554 (* ?x4553 l_0_4_52)))
 (let ((?x4564 (+ (+ (- (+ (* (* (- 2.0) l_0_4_4) l_0_4_7) ?x4554) ?x4557) ?x4560) ?x4563)))
 (= (- ?x4564 ?x4566) 0.0)))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4608 (* ?x4562 l_0_4_58)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4606 (* ?x4559 l_0_4_57)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4604 (* ?x4553 l_0_4_56)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4602 (* ?x4601 l_0_4_6)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4599 (* ?x4112 l_0_4_5)))
 (let ((?x4607 (+ (+ (- (- (* (* (- 2.0) l_0_4_11) l_0_4_4) ?x4599) ?x4602) ?x4604) ?x4606)))
 (= (+ ?x4607 ?x4608) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4644 (* ?x4562 l_0_4_63)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4642 (* ?x4559 l_0_4_62)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4640 (* ?x4553 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4638 (* ?x3652 l_0_4_6)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4630 (* ?x3649 l_0_4_5)))
 (let ((?x4643 (+ (+ (- (- (* (* (- 2.0) l_0_4_16) l_0_4_4) ?x4630) ?x4638) ?x4640) ?x4642)))
 (= (+ ?x4643 ?x4644) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4681 (* ?x4562 l_0_4_69)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4679 (* ?x4559 l_0_4_68)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4677 (* ?x4553 l_0_4_67)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4675 (* ?x4674 l_0_4_6)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4666 (* ?x4291 l_0_4_5)))
 (let ((?x4680 (+ (+ (- (- (* (* (- 2.0) l_0_4_22) l_0_4_4) ?x4666) ?x4675) ?x4677) ?x4679)))
 (= (+ ?x4680 ?x4681) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4719 (* ?x4562 l_0_4_76)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4717 (* ?x4559 l_0_4_75)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4715 (* ?x4553 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4713 (* ?x4712 l_0_4_6)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4704 (* ?x4703 l_0_4_5)))
 (let ((?x4718 (+ (+ (- (- (* (* (- 2.0) l_0_4_29) l_0_4_4) ?x4704) ?x4713) ?x4715) ?x4717)))
 (= (+ ?x4718 ?x4719) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4757 (* ?x4562 l_0_4_84)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4755 (* ?x4559 l_0_4_83)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4753 (* ?x4553 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x4751 (* ?x4750 l_0_4_6)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x4742 (* ?x4741 l_0_4_5)))
 (let ((?x4756 (+ (+ (- (- (* (* (- 2.0) l_0_4_37) l_0_4_4) ?x4742) ?x4751) ?x4753) ?x4755)))
 (= (+ ?x4756 ?x4757) 0.0)))))))))))))
(assert
 (let ((?x4797 (* l_0_4_9 l_0_4_9)))
 (let ((?x4795 (* l_0_4_8 l_0_4_8)))
 (let ((?x4793 (* l_0_4_7 l_0_4_7)))
 (let ((?x4791 (* l_0_4_55 l_0_4_55)))
 (let ((?x4789 (* l_0_4_54 l_0_4_54)))
 (let ((?x4787 (* l_0_4_53 l_0_4_53)))
 (let ((?x4790 (+ (+ (+ (* (- l_0_4_10) l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4787) ?x4789)))
 (= (- (- (- (+ ?x4790 ?x4791) ?x4793) ?x4795) ?x4797) 0.0)))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4832 (* ?x4831 l_0_4_59)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4829 (* ?x4828 l_0_4_58)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4826 (* ?x4825 l_0_4_57)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4823 (* ?x4822 l_0_4_56)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4820 (* ?x4601 l_0_4_9)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4818 (* ?x4112 l_0_4_8)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x4816 (* ?x4109 l_0_4_7)))
 (let ((?x4824 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_14) ?x4816) ?x4818) ?x4820) ?x4823)))
 (= (+ (+ (+ ?x4824 ?x4826) ?x4829) ?x4832) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4879 (* ?x4831 l_0_4_64)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4877 (* ?x4828 l_0_4_63)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4875 (* ?x4825 l_0_4_62)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4873 (* ?x4822 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4871 (* ?x3652 l_0_4_9)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4862 (* ?x3649 l_0_4_8)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x4858 (* ?x3641 l_0_4_7)))
 (let ((?x4874 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_19) ?x4858) ?x4862) ?x4871) ?x4873)))
 (= (+ (+ (+ ?x4874 ?x4875) ?x4877) ?x4879) 0.0)))))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x3682 (* ?x3681 l_0_4_79)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x3679 (* ?x3678 l_0_4_78)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x3676 (* ?x3675 l_0_4_77)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x3673 (* ?x3672 l_0_4_76)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x3670 (* ?x3669 l_0_4_75)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x3667 (* ?x3666 l_0_4_74)))
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4933 (* ?x4831 l_0_4_70)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4931 (* ?x4828 l_0_4_69)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4929 (* ?x4825 l_0_4_68)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4927 (* ?x4822 l_0_4_67)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4925 (* ?x4674 l_0_4_9)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4923 (* ?x4291 l_0_4_8)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x4921 (* ?x4920 l_0_4_7)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x3662 (* ?x3661 l_0_4_34)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x3659 (* ?x3658 l_0_4_33)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x3656 (* ?x3655 l_0_4_32)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x3653 (* ?x3652 l_0_4_31)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x3650 (* ?x3649 l_0_4_30)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x3642 (* ?x3641 l_0_4_29)))
 (let ((?x4814 (* (- 2.0) l_0_4_10)))
 (let ((?x4903 (* ?x4814 l_0_4_25)))
 (let ((?x4922 (- (- (- (- (- (- (- ?x4903 ?x3642) ?x3650) ?x3653) ?x3656) ?x3659) ?x3662) ?x4921)))
 (let ((?x4935 (+ (+ (+ (+ (+ (- (- ?x4922 ?x4923) ?x4925) ?x4927) ?x4929) ?x4931) ?x4933) ?x3667)))
 (= (+ (+ (+ (+ (+ ?x4935 ?x3670) ?x3673) ?x3676) ?x3679) ?x3682) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5005 (* ?x4831 l_0_4_77)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5003 (* ?x4828 l_0_4_76)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5001 (* ?x4825 l_0_4_75)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4999 (* ?x4822 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4997 (* ?x4712 l_0_4_9)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4988 (* ?x4703 l_0_4_8)))
 (let ((?x4983 (* 2.0 l_0_4_29)))
 (let ((?x4985 (* ?x4983 l_0_4_7)))
 (let ((?x5000 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_32) ?x4985) ?x4988) ?x4997) ?x4999)))
 (= (+ (+ (+ ?x5000 ?x5001) ?x5003) ?x5005) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5053 (* ?x4831 l_0_4_85)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5051 (* ?x4828 l_0_4_84)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5049 (* ?x4825 l_0_4_83)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x5047 (* ?x4822 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x5045 (* ?x4750 l_0_4_9)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x5036 (* ?x4741 l_0_4_8)))
 (let ((?x5031 (* 2.0 l_0_4_37)))
 (let ((?x5033 (* ?x5031 l_0_4_7)))
 (let ((?x4814 (* (- 2.0) l_0_4_10)))
 (let ((?x5029 (* ?x4814 l_0_4_40)))
 (let ((?x5054 (+ (+ (+ (+ (- (- (- ?x5029 ?x5033) ?x5036) ?x5045) ?x5047) ?x5049) ?x5051) ?x5053)))
 (= ?x5054 0.0)))))))))))))))))))
(assert
 (let ((?x5105 (* l_0_4_60 l_0_4_60)))
 (let ((?x5103 (* l_0_4_59 l_0_4_59)))
 (let ((?x5101 (* l_0_4_58 l_0_4_58)))
 (let ((?x5099 (* l_0_4_57 l_0_4_57)))
 (let ((?x5097 (* l_0_4_56 l_0_4_56)))
 (let ((?x5095 (* l_0_4_15 l_0_4_15)))
 (let ((?x5093 (* l_0_4_14 l_0_4_14)))
 (let ((?x5084 (* l_0_4_13 l_0_4_13)))
 (let ((?x5094 (- (- (- (* (- l_0_4_11) l_0_4_11) (* l_0_4_12 l_0_4_12)) ?x5084) ?x5093)))
 (= (+ (+ (+ (+ (+ (- ?x5094 ?x5095) ?x5097) ?x5099) ?x5101) ?x5103) ?x5105) 0.0)))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5154 (* ?x5153 l_0_4_65)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5151 (* ?x5150 l_0_4_64)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5148 (* ?x5147 l_0_4_63)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5145 (* ?x5144 l_0_4_62)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5142 (* ?x5141 l_0_4_61)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5139 (* ?x5138 l_0_4_20)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5136 (* ?x5135 l_0_4_19)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5133 (* ?x4601 l_0_4_18)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5131 (* ?x4112 l_0_4_17)))
 (let ((?x5140 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_16) ?x5131) ?x5133) ?x5136) ?x5139)))
 (= (+ (+ (+ (+ (+ ?x5140 ?x5142) ?x5145) ?x5148) ?x5151) ?x5154) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5213 (* ?x5153 l_0_4_71)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5211 (* ?x5150 l_0_4_70)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5209 (* ?x5147 l_0_4_69)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5207 (* ?x5144 l_0_4_68)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5205 (* ?x5141 l_0_4_67)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5203 (* ?x5138 l_0_4_26)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5193 (* ?x5135 l_0_4_25)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5190 (* ?x4601 l_0_4_24)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5186 (* ?x4112 l_0_4_23)))
 (let ((?x5204 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_22) ?x5186) ?x5190) ?x5193) ?x5203)))
 (= (+ (+ (+ (+ (+ ?x5204 ?x5205) ?x5207) ?x5209) ?x5211) ?x5213) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5272 (* ?x5153 l_0_4_78)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5270 (* ?x5150 l_0_4_77)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5268 (* ?x5147 l_0_4_76)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5266 (* ?x5144 l_0_4_75)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5264 (* ?x5141 l_0_4_74)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5262 (* ?x5138 l_0_4_33)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5252 (* ?x5135 l_0_4_32)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5249 (* ?x4601 l_0_4_31)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5245 (* ?x4112 l_0_4_30)))
 (let ((?x5263 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_29) ?x5245) ?x5249) ?x5252) ?x5262)))
 (= (+ (+ (+ (+ (+ ?x5263 ?x5264) ?x5266) ?x5268) ?x5270) ?x5272) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5331 (* ?x5153 l_0_4_86)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5329 (* ?x5150 l_0_4_85)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5327 (* ?x5147 l_0_4_84)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5325 (* ?x5144 l_0_4_83)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5323 (* ?x5141 l_0_4_82)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5321 (* ?x5138 l_0_4_41)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5311 (* ?x5135 l_0_4_40)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5308 (* ?x4601 l_0_4_39)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5304 (* ?x4112 l_0_4_38)))
 (let ((?x5322 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_37) ?x5304) ?x5308) ?x5311) ?x5321)))
 (= (+ (+ (+ (+ (+ ?x5322 ?x5323) ?x5325) ?x5327) ?x5329) ?x5331) 0.0)))))))))))))))))))))
(assert
 (let ((?x5395 (* l_0_4_66 l_0_4_66)))
 (let ((?x5393 (* l_0_4_65 l_0_4_65)))
 (let ((?x5391 (* l_0_4_64 l_0_4_64)))
 (let ((?x5389 (* l_0_4_63 l_0_4_63)))
 (let ((?x5387 (* l_0_4_62 l_0_4_62)))
 (let ((?x5385 (* l_0_4_61 l_0_4_61)))
 (let ((?x5383 (* l_0_4_21 l_0_4_21)))
 (let ((?x5381 (* l_0_4_20 l_0_4_20)))
 (let ((?x5379 (* l_0_4_19 l_0_4_19)))
 (let ((?x5369 (* l_0_4_18 l_0_4_18)))
 (let ((?x5380 (- (- (- (* (- l_0_4_16) l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5369) ?x5379)))
 (let ((?x5394 (+ (+ (+ (+ (+ (- (- ?x5380 ?x5381) ?x5383) ?x5385) ?x5387) ?x5389) ?x5391) ?x5393)))
 (= (+ ?x5394 ?x5395) 0.0))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5445 (* ?x3681 l_0_4_72)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5443 (* ?x3678 l_0_4_71)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5441 (* ?x3675 l_0_4_70)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5439 (* ?x3672 l_0_4_69)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5437 (* ?x3669 l_0_4_68)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5435 (* ?x3666 l_0_4_67)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5433 (* ?x3661 l_0_4_27)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5431 (* ?x3658 l_0_4_26)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5429 (* ?x3655 l_0_4_25)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5427 (* ?x3652 l_0_4_24)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5425 (* ?x3649 l_0_4_23)))
 (let ((?x5432 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_22) ?x5425) ?x5427) ?x5429) ?x5431)))
 (let ((?x5446 (+ (+ (+ (+ (+ (+ (- ?x5432 ?x5433) ?x5435) ?x5437) ?x5439) ?x5441) ?x5443) ?x5445)))
 (= ?x5446 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x3682 (* ?x3681 l_0_4_79)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x3679 (* ?x3678 l_0_4_78)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x3676 (* ?x3675 l_0_4_77)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x3673 (* ?x3672 l_0_4_76)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x3670 (* ?x3669 l_0_4_75)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x3667 (* ?x3666 l_0_4_74)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x3662 (* ?x3661 l_0_4_34)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x3659 (* ?x3658 l_0_4_33)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x3656 (* ?x3655 l_0_4_32)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x3653 (* ?x3652 l_0_4_31)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x3650 (* ?x3649 l_0_4_30)))
 (let ((?x5489 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_29) ?x3650) ?x3653) ?x3656) ?x3659)))
 (let ((?x5506 (+ (+ (+ (+ (+ (+ (- ?x5489 ?x3662) ?x3667) ?x3670) ?x3673) ?x3676) ?x3679) ?x3682)))
 (= ?x5506 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5541 (* ?x3681 l_0_4_87)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5539 (* ?x3678 l_0_4_86)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5537 (* ?x3675 l_0_4_85)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5535 (* ?x3672 l_0_4_84)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5533 (* ?x3669 l_0_4_83)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5531 (* ?x3666 l_0_4_82)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5529 (* ?x3661 l_0_4_42)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5527 (* ?x3658 l_0_4_41)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5525 (* ?x3655 l_0_4_40)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5523 (* ?x3652 l_0_4_39)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5521 (* ?x3649 l_0_4_38)))
 (let ((?x5528 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_37) ?x5521) ?x5523) ?x5525) ?x5527)))
 (let ((?x5542 (+ (+ (+ (+ (+ (+ (- ?x5528 ?x5529) ?x5531) ?x5533) ?x5535) ?x5537) ?x5539) ?x5541)))
 (= ?x5542 0.0))))))))))))))))))))))))))
(assert
 (let ((?x5617 (* l_0_4_73 l_0_4_73)))
 (let ((?x5615 (* l_0_4_72 l_0_4_72)))
 (let ((?x5613 (* l_0_4_71 l_0_4_71)))
 (let ((?x5611 (* l_0_4_70 l_0_4_70)))
 (let ((?x5609 (* l_0_4_69 l_0_4_69)))
 (let ((?x5607 (* l_0_4_68 l_0_4_68)))
 (let ((?x5605 (* l_0_4_67 l_0_4_67)))
 (let ((?x5603 (* l_0_4_28 l_0_4_28)))
 (let ((?x5601 (* l_0_4_27 l_0_4_27)))
 (let ((?x5599 (* l_0_4_26 l_0_4_26)))
 (let ((?x5588 (* l_0_4_25 l_0_4_25)))
 (let ((?x5585 (* l_0_4_24 l_0_4_24)))
 (let ((?x5598 (- (- (- (* (- l_0_4_22) l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5585) ?x5588)))
 (let ((?x5612 (+ (+ (+ (+ (- (- (- ?x5598 ?x5599) ?x5601) ?x5603) ?x5605) ?x5607) ?x5609) ?x5611)))
 (= (+ (+ (+ ?x5612 ?x5613) ?x5615) ?x5617) 0.0))))))))))))))))
(assert
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5686 (* ?x5685 l_0_4_80)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5683 (* ?x5682 l_0_4_79)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5680 (* ?x5679 l_0_4_78)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5677 (* ?x5676 l_0_4_77)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5674 (* ?x5673 l_0_4_76)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5671 (* ?x5670 l_0_4_75)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5668 (* ?x5667 l_0_4_74)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5665 (* ?x5664 l_0_4_35)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5662 (* ?x5661 l_0_4_34)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5659 (* ?x5658 l_0_4_33)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5656 (* ?x5655 l_0_4_32)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5653 (* ?x4674 l_0_4_31)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5651 (* ?x4291 l_0_4_30)))
 (let ((?x5660 (- (- (- (- (* (* (- 2.0) l_0_4_22) l_0_4_29) ?x5651) ?x5653) ?x5656) ?x5659)))
 (let ((?x5681 (+ (+ (+ (+ (+ (- (- ?x5660 ?x5662) ?x5665) ?x5668) ?x5671) ?x5674) ?x5677) ?x5680)))
 (= (+ (+ ?x5681 ?x5683) ?x5686) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5770 (* ?x5685 l_0_4_88)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5768 (* ?x5682 l_0_4_87)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5766 (* ?x5679 l_0_4_86)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5764 (* ?x5676 l_0_4_85)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5762 (* ?x5673 l_0_4_84)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5760 (* ?x5670 l_0_4_83)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5758 (* ?x5667 l_0_4_82)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5756 (* ?x5664 l_0_4_43)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5754 (* ?x5661 l_0_4_42)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5752 (* ?x5658 l_0_4_41)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5740 (* ?x5655 l_0_4_40)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5736 (* ?x4674 l_0_4_39)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5732 (* ?x4291 l_0_4_38)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x5728 (* ?x4920 l_0_4_37)))
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x3792 (* ?x3791 l_0_4_169)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x3789 (* ?x3788 l_0_4_168)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x3786 (* ?x3785 l_0_4_167)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x3783 (* ?x3782 l_0_4_166)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x3780 (* ?x3779 l_0_4_165)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x3777 (* ?x3776 l_0_4_164)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x3774 (* ?x3773 l_0_4_124)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x3771 (* ?x3770 l_0_4_123)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x3768 (* ?x3767 l_0_4_122)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3765 (* ?x3764 l_0_4_121)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3762 (* ?x3761 l_0_4_120)))
 (let ((?x4373 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_119) ?x3762) ?x3765) ?x3768) ?x3771)))
 (let ((?x4380 (+ (+ (+ (+ (+ (+ (- ?x4373 ?x3774) ?x3777) ?x3780) ?x3783) ?x3786) ?x3789) ?x3792)))
 (let ((?x5757 (- (- (- (- (- (- (- ?x4380 ?x5728) ?x5732) ?x5736) ?x5740) ?x5752) ?x5754) ?x5756)))
 (let ((?x5771 (+ (+ (+ (+ (+ (+ (+ ?x5757 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (= ?x5771 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5861 (* l_0_4_81 l_0_4_81)))
 (let ((?x5859 (* l_0_4_80 l_0_4_80)))
 (let ((?x5857 (* l_0_4_79 l_0_4_79)))
 (let ((?x5855 (* l_0_4_78 l_0_4_78)))
 (let ((?x5853 (* l_0_4_77 l_0_4_77)))
 (let ((?x5851 (* l_0_4_76 l_0_4_76)))
 (let ((?x5849 (* l_0_4_75 l_0_4_75)))
 (let ((?x5847 (* l_0_4_74 l_0_4_74)))
 (let ((?x5845 (* l_0_4_36 l_0_4_36)))
 (let ((?x5843 (* l_0_4_35 l_0_4_35)))
 (let ((?x5841 (* l_0_4_34 l_0_4_34)))
 (let ((?x5839 (* l_0_4_33 l_0_4_33)))
 (let ((?x5828 (* l_0_4_32 l_0_4_32)))
 (let ((?x5824 (* l_0_4_31 l_0_4_31)))
 (let ((?x5829 (- (- (- (* (- l_0_4_29) l_0_4_29) (* l_0_4_30 l_0_4_30)) ?x5824) ?x5828)))
 (let ((?x5852 (+ (+ (+ (- (- (- (- ?x5829 ?x5839) ?x5841) ?x5843) ?x5845) ?x5847) ?x5849) ?x5851)))
 (= (+ (+ (+ (+ (+ ?x5852 ?x5853) ?x5855) ?x5857) ?x5859) ?x5861) 0.0))))))))))))))))))
(assert
 (let ((?x5940 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5937 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5934 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5931 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5928 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5925 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5922 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5919 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5916 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5913 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5910 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5907 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5904 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x5901 (* ?x4712 l_0_4_39)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x5899 (* ?x4703 l_0_4_38)))
 (let ((?x5908 (- (- (- (- (* (* (- 2.0) l_0_4_29) l_0_4_37) ?x5899) ?x5901) ?x5904) ?x5907)))
 (let ((?x5929 (+ (+ (+ (+ (- (- (- ?x5908 ?x5910) ?x5913) ?x5916) ?x5919) ?x5922) ?x5925) ?x5928)))
 (= (+ (+ (+ (+ ?x5929 ?x5931) ?x5934) ?x5937) ?x5940) 0.0)))))))))))))))))))))
(assert
 (let ((?x6040 (* l_0_4_90 l_0_4_90)))
 (let ((?x6038 (* l_0_4_89 l_0_4_89)))
 (let ((?x6036 (* l_0_4_88 l_0_4_88)))
 (let ((?x6034 (* l_0_4_87 l_0_4_87)))
 (let ((?x6032 (* l_0_4_86 l_0_4_86)))
 (let ((?x6030 (* l_0_4_85 l_0_4_85)))
 (let ((?x6028 (* l_0_4_84 l_0_4_84)))
 (let ((?x6026 (* l_0_4_83 l_0_4_83)))
 (let ((?x6024 (* l_0_4_82 l_0_4_82)))
 (let ((?x6022 (* l_0_4_45 l_0_4_45)))
 (let ((?x6020 (* l_0_4_44 l_0_4_44)))
 (let ((?x6018 (* l_0_4_43 l_0_4_43)))
 (let ((?x6016 (* l_0_4_42 l_0_4_42)))
 (let ((?x6003 (* l_0_4_41 l_0_4_41)))
 (let ((?x6000 (* l_0_4_40 l_0_4_40)))
 (let ((?x5996 (* l_0_4_39 l_0_4_39)))
 (let ((?x6002 (- (- (- (* (- l_0_4_37) l_0_4_37) (* l_0_4_38 l_0_4_38)) ?x5996) ?x6000)))
 (let ((?x6027 (+ (+ (- (- (- (- (- ?x6002 ?x6003) ?x6016) ?x6018) ?x6020) ?x6022) ?x6024) ?x6026)))
 (let ((?x6041 (+ (+ (+ (+ (+ (+ (+ ?x6027 ?x6028) ?x6030) ?x6032) ?x6034) ?x6036) ?x6038) ?x6040)))
 (= ?x6041 0.0)))))))))))))))))))))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x6086 (+ (+ (* (- l_0_4_1) l_0_4_1) (* (* 2.0 l_0_4_187) l_0_4_202)) (* (* 2.0 l_0_4_188) l_0_4_203))))
 (let ((?x6092 (+ (+ ?x6086 (* (* 2.0 l_0_4_189) l_0_4_204)) (* (* 2.0 l_0_4_190) l_0_4_205))))
 (let ((?x6098 (- (- ?x6092 (* (* 2.0 l_0_4_232) l_0_4_247)) (* (* 2.0 l_0_4_233) l_0_4_248))))
 (let ((?x6104 (- (- ?x6098 (* (* 2.0 l_0_4_234) l_0_4_249)) (* (* 2.0 l_0_4_235) l_0_4_250))))
 (= (+ ?x6104 ?x3560) 0.0)))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3627 (* ?x3626 l_0_4_47)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3619 (* ?x3618 l_0_4_2)))
 (= (+ ?x3619 ?x3627) 0.0))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4933 (* ?x4831 l_0_4_70)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4931 (* ?x4828 l_0_4_69)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4929 (* ?x4825 l_0_4_68)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4927 (* ?x4822 l_0_4_67)))
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3664 (* ?x3626 l_0_4_49)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4925 (* ?x4674 l_0_4_9)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4923 (* ?x4291 l_0_4_8)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x4921 (* ?x4920 l_0_4_7)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3639 (* ?x3618 l_0_4_4)))
 (let ((?x6152 (+ (+ (+ (+ ?x3639 (* (* 2.0 l_0_4_10) l_0_4_25)) ?x4921) ?x4923) ?x4925)))
 (= (- (- (- (- (+ ?x6152 ?x3664) ?x4927) ?x4929) ?x4931) ?x4933) 0.0)))))))))))))))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3749 (* ?x3626 l_0_4_52)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_7) ?x3749) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3794 (* ?x3626 l_0_4_56)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6196 (* ?x4031 l_0_4_160)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6194 (* ?x4028 l_0_4_159)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6192 (* ?x4025 l_0_4_158)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6190 (* ?x4022 l_0_4_157)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x6188 (* ?x6187 l_0_4_99)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x6185 (* ?x6184 l_0_4_98)))
 (let ((?x6181 (* 2.0 l_0_4_112)))
 (let ((?x6182 (* ?x6181 l_0_4_97)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3753 (* ?x3618 l_0_4_11)))
 (let ((?x6189 (+ (+ (+ (+ ?x3753 (* (* 2.0 l_0_4_100) l_0_4_115)) ?x6182) ?x6185) ?x6188)))
 (= (+ (- (- (- (- ?x6189 ?x6190) ?x6192) ?x6194) ?x6196) ?x3794) 0.0)))))))))))))))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3850 (* ?x3626 l_0_4_61)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_16) ?x3850) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3866 (* ?x3626 l_0_4_67)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_22) ?x3866) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3876 (* ?x3626 l_0_4_74)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_29) ?x3876) 0.0))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x6244 (* ?x6243 l_0_4_97)))
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3886 (* ?x3626 l_0_4_82)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x6234 (* ?x3623 l_0_4_142)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3884 (* ?x3618 l_0_4_37)))
 (= (- (+ (+ ?x3884 ?x6234) ?x3886) ?x6244) 0.0))))))))))
(assert
 (let ((?x3915 (* l_0_4_48 l_0_4_48)))
 (let ((?x3913 (* l_0_4_47 l_0_4_47)))
 (let ((?x6265 (+ (+ (- (* (- l_0_4_2) l_0_4_2) (* l_0_4_3 l_0_4_3)) ?x3913) ?x3915)))
 (= ?x6265 0.0)))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x3968 (* ?x3967 l_0_4_50)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x3965 (* ?x3964 l_0_4_49)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x3962 (* ?x3961 l_0_4_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_4) ?x3962) ?x3965) ?x3968) 0.0))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4040 (* ?x3967 l_0_4_53)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4038 (* ?x3964 l_0_4_52)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4036 (* ?x3961 l_0_4_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_7) ?x4036) ?x4038) ?x4040) 0.0))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4132 (* ?x3967 l_0_4_57)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4130 (* ?x3964 l_0_4_56)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4113 (* ?x4112 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_11) l_0_4_2) ?x4113) ?x4130) ?x4132) 0.0))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4220 (* ?x3967 l_0_4_62)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4218 (* ?x3964 l_0_4_61)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4216 (* ?x3649 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_16) l_0_4_2) ?x4216) ?x4218) ?x4220) 0.0))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4296 (* ?x3967 l_0_4_68)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4294 (* ?x3964 l_0_4_67)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4292 (* ?x4291 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_22) ?x4292) ?x4294) ?x4296) 0.0))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4387 (* ?x3967 l_0_4_75)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4385 (* ?x3964 l_0_4_74)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4383 (* ?x3961 l_0_4_30)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4381 (* ?x3958 l_0_4_29)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6196 (* ?x4031 l_0_4_160)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6194 (* ?x4028 l_0_4_159)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6192 (* ?x4025 l_0_4_158)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6190 (* ?x4022 l_0_4_157)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x6188 (* ?x6187 l_0_4_99)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x6185 (* ?x6184 l_0_4_98)))
 (let ((?x6181 (* 2.0 l_0_4_112)))
 (let ((?x6182 (* ?x6181 l_0_4_97)))
 (let ((?x6331 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_115) ?x6182) ?x6185) ?x6188) ?x6190)))
 (let ((?x6334 (+ (+ (+ ?x6331 ?x6192) ?x6194) ?x6196)))
 (= (+ (+ (- (- ?x6334 ?x4381) ?x4383) ?x4385) ?x4387) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x6369 (* ?x6368 l_0_4_98)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x6366 (* ?x6365 l_0_4_97)))
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4453 (* ?x3967 l_0_4_83)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4451 (* ?x3964 l_0_4_82)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4449 (* ?x3961 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4447 (* ?x3958 l_0_4_37)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x6359 (* ?x3906 l_0_4_143)))
 (let ((?x6360 (+ (* (* 2.0 l_0_4_137) l_0_4_142) ?x6359)))
 (= (- (- (+ (+ (- (- ?x6360 ?x4447) ?x4449) ?x4451) ?x4453) ?x6366) ?x6369) 0.0)))))))))))))))))
(assert
 (let ((?x4536 (* l_0_4_6 l_0_4_6)))
 (let ((?x4534 (* l_0_4_51 l_0_4_51)))
 (let ((?x4532 (* l_0_4_50 l_0_4_50)))
 (let ((?x4530 (* l_0_4_5 l_0_4_5)))
 (let ((?x4533 (+ (- (+ (* (- l_0_4_4) l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4530) ?x4532)))
 (= (- (+ ?x4533 ?x4534) ?x4536) 0.0)))))))
(assert
 (let ((?x4566 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4563 (* ?x4562 l_0_4_54)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4560 (* ?x4559 l_0_4_53)))
 (let ((?x4557 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4554 (* ?x4553 l_0_4_52)))
 (let ((?x4564 (+ (+ (- (+ (* (* (- 2.0) l_0_4_4) l_0_4_7) ?x4554) ?x4557) ?x4560) ?x4563)))
 (= (- ?x4564 ?x4566) 0.0)))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4608 (* ?x4562 l_0_4_58)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4606 (* ?x4559 l_0_4_57)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4604 (* ?x4553 l_0_4_56)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4602 (* ?x4601 l_0_4_6)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4599 (* ?x4112 l_0_4_5)))
 (let ((?x4607 (+ (+ (- (- (* (* (- 2.0) l_0_4_11) l_0_4_4) ?x4599) ?x4602) ?x4604) ?x4606)))
 (= (+ ?x4607 ?x4608) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4644 (* ?x4562 l_0_4_63)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4642 (* ?x4559 l_0_4_62)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4640 (* ?x4553 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4638 (* ?x3652 l_0_4_6)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4630 (* ?x3649 l_0_4_5)))
 (let ((?x4643 (+ (+ (- (- (* (* (- 2.0) l_0_4_16) l_0_4_4) ?x4630) ?x4638) ?x4640) ?x4642)))
 (= (+ ?x4643 ?x4644) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4681 (* ?x4562 l_0_4_69)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4679 (* ?x4559 l_0_4_68)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4677 (* ?x4553 l_0_4_67)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4675 (* ?x4674 l_0_4_6)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4666 (* ?x4291 l_0_4_5)))
 (let ((?x4680 (+ (+ (- (- (* (* (- 2.0) l_0_4_22) l_0_4_4) ?x4666) ?x4675) ?x4677) ?x4679)))
 (= (+ ?x4680 ?x4681) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4719 (* ?x4562 l_0_4_76)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4717 (* ?x4559 l_0_4_75)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4715 (* ?x4553 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4713 (* ?x4712 l_0_4_6)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4704 (* ?x4703 l_0_4_5)))
 (let ((?x4718 (+ (+ (- (- (* (* (- 2.0) l_0_4_29) l_0_4_4) ?x4704) ?x4713) ?x4715) ?x4717)))
 (= (+ ?x4718 ?x4719) 0.0)))))))))))))
(assert
 (let ((?x6419 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x6416 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x6413 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4757 (* ?x4562 l_0_4_84)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4755 (* ?x4559 l_0_4_83)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4753 (* ?x4553 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x4751 (* ?x4750 l_0_4_6)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x4742 (* ?x4741 l_0_4_5)))
 (let ((?x5031 (* 2.0 l_0_4_37)))
 (let ((?x6405 (* ?x5031 l_0_4_4)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x6403 (* ?x3955 l_0_4_144)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x6401 (* ?x3952 l_0_4_143)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x6400 (* ?x3949 l_0_4_142)))
 (let ((?x6404 (+ (+ ?x6400 ?x6401) ?x6403)))
 (let ((?x6414 (- (+ (+ (+ (- (- (- ?x6404 ?x6405) ?x4742) ?x4751) ?x4753) ?x4755) ?x4757) ?x6413)))
 (= (- (- ?x6414 ?x6416) ?x6419) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x4797 (* l_0_4_9 l_0_4_9)))
 (let ((?x4795 (* l_0_4_8 l_0_4_8)))
 (let ((?x4793 (* l_0_4_7 l_0_4_7)))
 (let ((?x4791 (* l_0_4_55 l_0_4_55)))
 (let ((?x4789 (* l_0_4_54 l_0_4_54)))
 (let ((?x4787 (* l_0_4_53 l_0_4_53)))
 (let ((?x4790 (+ (+ (+ (* (- l_0_4_10) l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4787) ?x4789)))
 (= (- (- (- (+ ?x4790 ?x4791) ?x4793) ?x4795) ?x4797) 0.0)))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4832 (* ?x4831 l_0_4_59)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4829 (* ?x4828 l_0_4_58)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4826 (* ?x4825 l_0_4_57)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4823 (* ?x4822 l_0_4_56)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4820 (* ?x4601 l_0_4_9)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4818 (* ?x4112 l_0_4_8)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x4816 (* ?x4109 l_0_4_7)))
 (let ((?x4824 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_14) ?x4816) ?x4818) ?x4820) ?x4823)))
 (= (+ (+ (+ ?x4824 ?x4826) ?x4829) ?x4832) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4879 (* ?x4831 l_0_4_64)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4877 (* ?x4828 l_0_4_63)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4875 (* ?x4825 l_0_4_62)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4873 (* ?x4822 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4871 (* ?x3652 l_0_4_9)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4862 (* ?x3649 l_0_4_8)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x4858 (* ?x3641 l_0_4_7)))
 (let ((?x4874 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_19) ?x4858) ?x4862) ?x4871) ?x4873)))
 (= (+ (+ (+ ?x4874 ?x4875) ?x4877) ?x4879) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4933 (* ?x4831 l_0_4_70)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4931 (* ?x4828 l_0_4_69)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4929 (* ?x4825 l_0_4_68)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4927 (* ?x4822 l_0_4_67)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4925 (* ?x4674 l_0_4_9)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4923 (* ?x4291 l_0_4_8)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x4921 (* ?x4920 l_0_4_7)))
 (let ((?x4814 (* (- 2.0) l_0_4_10)))
 (let ((?x4903 (* ?x4814 l_0_4_25)))
 (let ((?x6469 (+ (+ (+ (+ (- (- (- ?x4903 ?x4921) ?x4923) ?x4925) ?x4927) ?x4929) ?x4931) ?x4933)))
 (= ?x6469 0.0)))))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5005 (* ?x4831 l_0_4_77)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5003 (* ?x4828 l_0_4_76)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5001 (* ?x4825 l_0_4_75)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4999 (* ?x4822 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4997 (* ?x4712 l_0_4_9)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4988 (* ?x4703 l_0_4_8)))
 (let ((?x4983 (* 2.0 l_0_4_29)))
 (let ((?x4985 (* ?x4983 l_0_4_7)))
 (let ((?x5000 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_32) ?x4985) ?x4988) ?x4997) ?x4999)))
 (= (+ (+ (+ ?x5000 ?x5001) ?x5003) ?x5005) 0.0)))))))))))))))))
(assert
 (let ((?x6500 (* l_0_4_99 l_0_4_99)))
 (let ((?x6498 (* l_0_4_98 l_0_4_98)))
 (let ((?x6496 (* l_0_4_97 l_0_4_97)))
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5053 (* ?x4831 l_0_4_85)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5051 (* ?x4828 l_0_4_84)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5049 (* ?x4825 l_0_4_83)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x5047 (* ?x4822 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x5045 (* ?x4750 l_0_4_9)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x5036 (* ?x4741 l_0_4_8)))
 (let ((?x5031 (* 2.0 l_0_4_37)))
 (let ((?x5033 (* ?x5031 l_0_4_7)))
 (let ((?x6487 (* l_0_4_145 l_0_4_145)))
 (let ((?x6485 (* l_0_4_144 l_0_4_144)))
 (let ((?x6483 (* l_0_4_143 l_0_4_143)))
 (let ((?x6481 (* l_0_4_142 l_0_4_142)))
 (let ((?x6482 (+ (- (* (* (- 2.0) l_0_4_10) l_0_4_40) (* l_0_4_100 l_0_4_100)) ?x6481)))
 (let ((?x6492 (+ (- (- (- (+ (+ (+ ?x6482 ?x6483) ?x6485) ?x6487) ?x5033) ?x5036) ?x5045) ?x5047)))
 (= (- (- (- (+ (+ (+ ?x6492 ?x5049) ?x5051) ?x5053) ?x6496) ?x6498) ?x6500) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x5105 (* l_0_4_60 l_0_4_60)))
 (let ((?x5103 (* l_0_4_59 l_0_4_59)))
 (let ((?x5101 (* l_0_4_58 l_0_4_58)))
 (let ((?x5099 (* l_0_4_57 l_0_4_57)))
 (let ((?x5097 (* l_0_4_56 l_0_4_56)))
 (let ((?x5095 (* l_0_4_15 l_0_4_15)))
 (let ((?x5093 (* l_0_4_14 l_0_4_14)))
 (let ((?x5084 (* l_0_4_13 l_0_4_13)))
 (let ((?x5094 (- (- (- (* (- l_0_4_11) l_0_4_11) (* l_0_4_12 l_0_4_12)) ?x5084) ?x5093)))
 (= (+ (+ (+ (+ (+ (- ?x5094 ?x5095) ?x5097) ?x5099) ?x5101) ?x5103) ?x5105) 0.0)))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5154 (* ?x5153 l_0_4_65)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5151 (* ?x5150 l_0_4_64)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5148 (* ?x5147 l_0_4_63)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5145 (* ?x5144 l_0_4_62)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5142 (* ?x5141 l_0_4_61)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5139 (* ?x5138 l_0_4_20)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5136 (* ?x5135 l_0_4_19)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5133 (* ?x4601 l_0_4_18)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5131 (* ?x4112 l_0_4_17)))
 (let ((?x5140 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_16) ?x5131) ?x5133) ?x5136) ?x5139)))
 (= (+ (+ (+ (+ (+ ?x5140 ?x5142) ?x5145) ?x5148) ?x5151) ?x5154) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5213 (* ?x5153 l_0_4_71)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5211 (* ?x5150 l_0_4_70)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5209 (* ?x5147 l_0_4_69)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5207 (* ?x5144 l_0_4_68)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5205 (* ?x5141 l_0_4_67)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5203 (* ?x5138 l_0_4_26)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5193 (* ?x5135 l_0_4_25)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5190 (* ?x4601 l_0_4_24)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5186 (* ?x4112 l_0_4_23)))
 (let ((?x5204 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_22) ?x5186) ?x5190) ?x5193) ?x5203)))
 (= (+ (+ (+ (+ (+ ?x5204 ?x5205) ?x5207) ?x5209) ?x5211) ?x5213) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5272 (* ?x5153 l_0_4_78)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5270 (* ?x5150 l_0_4_77)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5268 (* ?x5147 l_0_4_76)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5266 (* ?x5144 l_0_4_75)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5264 (* ?x5141 l_0_4_74)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5262 (* ?x5138 l_0_4_33)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5252 (* ?x5135 l_0_4_32)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5249 (* ?x4601 l_0_4_31)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5245 (* ?x4112 l_0_4_30)))
 (let ((?x5263 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_29) ?x5245) ?x5249) ?x5252) ?x5262)))
 (= (+ (+ (+ (+ (+ ?x5263 ?x5264) ?x5266) ?x5268) ?x5270) ?x5272) 0.0)))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5331 (* ?x5153 l_0_4_86)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5329 (* ?x5150 l_0_4_85)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5327 (* ?x5147 l_0_4_84)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5325 (* ?x5144 l_0_4_83)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5323 (* ?x5141 l_0_4_82)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5321 (* ?x5138 l_0_4_41)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6551 (* ?x4031 l_0_4_149)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6549 (* ?x4028 l_0_4_148)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6547 (* ?x4025 l_0_4_147)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6545 (* ?x4022 l_0_4_146)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5311 (* ?x5135 l_0_4_40)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5308 (* ?x4601 l_0_4_39)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5304 (* ?x4112 l_0_4_38)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x6540 (* ?x4109 l_0_4_37)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x6538 (* ?x4100 l_0_4_99)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x6536 (* ?x4088 l_0_4_98)))
 (let ((?x6533 (* 2.0 l_0_4_101)))
 (let ((?x6534 (* ?x6533 l_0_4_97)))
 (let ((?x6539 (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_104) ?x6534) ?x6536) ?x6538)))
 (let ((?x6550 (+ (+ (+ (- (- (- (- ?x6539 ?x6540) ?x5304) ?x5308) ?x5311) ?x6545) ?x6547) ?x6549)))
 (let ((?x6558 (+ (+ (+ (+ (+ (- (+ ?x6550 ?x6551) ?x5321) ?x5323) ?x5325) ?x5327) ?x5329) ?x5331)))
 (= ?x6558 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5395 (* l_0_4_66 l_0_4_66)))
 (let ((?x5393 (* l_0_4_65 l_0_4_65)))
 (let ((?x5391 (* l_0_4_64 l_0_4_64)))
 (let ((?x5389 (* l_0_4_63 l_0_4_63)))
 (let ((?x5387 (* l_0_4_62 l_0_4_62)))
 (let ((?x5385 (* l_0_4_61 l_0_4_61)))
 (let ((?x5383 (* l_0_4_21 l_0_4_21)))
 (let ((?x5381 (* l_0_4_20 l_0_4_20)))
 (let ((?x5379 (* l_0_4_19 l_0_4_19)))
 (let ((?x5369 (* l_0_4_18 l_0_4_18)))
 (let ((?x5380 (- (- (- (* (- l_0_4_16) l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5369) ?x5379)))
 (let ((?x5394 (+ (+ (+ (+ (+ (- (- ?x5380 ?x5381) ?x5383) ?x5385) ?x5387) ?x5389) ?x5391) ?x5393)))
 (= (+ ?x5394 ?x5395) 0.0))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5445 (* ?x3681 l_0_4_72)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5443 (* ?x3678 l_0_4_71)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5441 (* ?x3675 l_0_4_70)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5439 (* ?x3672 l_0_4_69)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5437 (* ?x3669 l_0_4_68)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5435 (* ?x3666 l_0_4_67)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5433 (* ?x3661 l_0_4_27)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5431 (* ?x3658 l_0_4_26)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5429 (* ?x3655 l_0_4_25)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5427 (* ?x3652 l_0_4_24)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5425 (* ?x3649 l_0_4_23)))
 (let ((?x5432 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_22) ?x5425) ?x5427) ?x5429) ?x5431)))
 (let ((?x5446 (+ (+ (+ (+ (+ (+ (- ?x5432 ?x5433) ?x5435) ?x5437) ?x5439) ?x5441) ?x5443) ?x5445)))
 (= ?x5446 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5541 (* ?x3681 l_0_4_87)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5539 (* ?x3678 l_0_4_86)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5537 (* ?x3675 l_0_4_85)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5535 (* ?x3672 l_0_4_84)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5533 (* ?x3669 l_0_4_83)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5531 (* ?x3666 l_0_4_82)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5529 (* ?x3661 l_0_4_42)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5527 (* ?x3658 l_0_4_41)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5525 (* ?x3655 l_0_4_40)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5523 (* ?x3652 l_0_4_39)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5521 (* ?x3649 l_0_4_38)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x6605 (* ?x3641 l_0_4_37)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x4032 (* ?x4031 l_0_4_154)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x4029 (* ?x4028 l_0_4_153)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x4026 (* ?x4025 l_0_4_152)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x4023 (* ?x4022 l_0_4_151)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4020 (* ?x3764 l_0_4_99)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4018 (* ?x3761 l_0_4_98)))
 (let ((?x3620 (* 2.0 l_0_4_106)))
 (let ((?x4008 (* ?x3620 l_0_4_97)))
 (let ((?x4024 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_109) ?x4008) ?x4018) ?x4020) ?x4023)))
 (let ((?x4033 (+ (+ (+ ?x4024 ?x4026) ?x4029) ?x4032)))
 (let ((?x6619 (+ (- (- (- (- (- (- ?x4033 ?x6605) ?x5521) ?x5523) ?x5525) ?x5527) ?x5529) ?x5531)))
 (= (+ (+ (+ (+ (+ ?x6619 ?x5533) ?x5535) ?x5537) ?x5539) ?x5541) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5617 (* l_0_4_73 l_0_4_73)))
 (let ((?x5615 (* l_0_4_72 l_0_4_72)))
 (let ((?x5613 (* l_0_4_71 l_0_4_71)))
 (let ((?x5611 (* l_0_4_70 l_0_4_70)))
 (let ((?x5609 (* l_0_4_69 l_0_4_69)))
 (let ((?x5607 (* l_0_4_68 l_0_4_68)))
 (let ((?x5605 (* l_0_4_67 l_0_4_67)))
 (let ((?x5603 (* l_0_4_28 l_0_4_28)))
 (let ((?x5601 (* l_0_4_27 l_0_4_27)))
 (let ((?x5599 (* l_0_4_26 l_0_4_26)))
 (let ((?x5588 (* l_0_4_25 l_0_4_25)))
 (let ((?x5585 (* l_0_4_24 l_0_4_24)))
 (let ((?x5598 (- (- (- (* (- l_0_4_22) l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5585) ?x5588)))
 (let ((?x5612 (+ (+ (+ (+ (- (- (- ?x5598 ?x5599) ?x5601) ?x5603) ?x5605) ?x5607) ?x5609) ?x5611)))
 (= (+ (+ (+ ?x5612 ?x5613) ?x5615) ?x5617) 0.0))))))))))))))))
(assert
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5686 (* ?x5685 l_0_4_80)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5683 (* ?x5682 l_0_4_79)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5680 (* ?x5679 l_0_4_78)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5677 (* ?x5676 l_0_4_77)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5674 (* ?x5673 l_0_4_76)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5671 (* ?x5670 l_0_4_75)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5668 (* ?x5667 l_0_4_74)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5665 (* ?x5664 l_0_4_35)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5662 (* ?x5661 l_0_4_34)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5659 (* ?x5658 l_0_4_33)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5656 (* ?x5655 l_0_4_32)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5653 (* ?x4674 l_0_4_31)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5651 (* ?x4291 l_0_4_30)))
 (let ((?x5660 (- (- (- (- (* (* (- 2.0) l_0_4_22) l_0_4_29) ?x5651) ?x5653) ?x5656) ?x5659)))
 (let ((?x5681 (+ (+ (+ (+ (+ (- (- ?x5660 ?x5662) ?x5665) ?x5668) ?x5671) ?x5674) ?x5677) ?x5680)))
 (= (+ (+ ?x5681 ?x5683) ?x5686) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5770 (* ?x5685 l_0_4_88)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5768 (* ?x5682 l_0_4_87)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5766 (* ?x5679 l_0_4_86)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5764 (* ?x5676 l_0_4_85)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5762 (* ?x5673 l_0_4_84)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5760 (* ?x5670 l_0_4_83)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5758 (* ?x5667 l_0_4_82)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5756 (* ?x5664 l_0_4_43)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5754 (* ?x5661 l_0_4_42)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5752 (* ?x5658 l_0_4_41)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5740 (* ?x5655 l_0_4_40)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5736 (* ?x4674 l_0_4_39)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5732 (* ?x4291 l_0_4_38)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x5728 (* ?x4920 l_0_4_37)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6196 (* ?x4031 l_0_4_160)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6194 (* ?x4028 l_0_4_159)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6192 (* ?x4025 l_0_4_158)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6190 (* ?x4022 l_0_4_157)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x6188 (* ?x6187 l_0_4_99)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x6185 (* ?x6184 l_0_4_98)))
 (let ((?x6181 (* 2.0 l_0_4_112)))
 (let ((?x6182 (* ?x6181 l_0_4_97)))
 (let ((?x6331 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_115) ?x6182) ?x6185) ?x6188) ?x6190)))
 (let ((?x6334 (+ (+ (+ ?x6331 ?x6192) ?x6194) ?x6196)))
 (let ((?x6653 (- (- (- (- (- (- (- ?x6334 ?x5728) ?x5732) ?x5736) ?x5740) ?x5752) ?x5754) ?x5756)))
 (let ((?x6660 (+ (+ (+ (+ (+ (+ (+ ?x6653 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (= ?x6660 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5861 (* l_0_4_81 l_0_4_81)))
 (let ((?x5859 (* l_0_4_80 l_0_4_80)))
 (let ((?x5857 (* l_0_4_79 l_0_4_79)))
 (let ((?x5855 (* l_0_4_78 l_0_4_78)))
 (let ((?x5853 (* l_0_4_77 l_0_4_77)))
 (let ((?x5851 (* l_0_4_76 l_0_4_76)))
 (let ((?x5849 (* l_0_4_75 l_0_4_75)))
 (let ((?x5847 (* l_0_4_74 l_0_4_74)))
 (let ((?x5845 (* l_0_4_36 l_0_4_36)))
 (let ((?x5843 (* l_0_4_35 l_0_4_35)))
 (let ((?x5841 (* l_0_4_34 l_0_4_34)))
 (let ((?x5839 (* l_0_4_33 l_0_4_33)))
 (let ((?x5828 (* l_0_4_32 l_0_4_32)))
 (let ((?x5824 (* l_0_4_31 l_0_4_31)))
 (let ((?x5829 (- (- (- (* (- l_0_4_29) l_0_4_29) (* l_0_4_30 l_0_4_30)) ?x5824) ?x5828)))
 (let ((?x5852 (+ (+ (+ (- (- (- (- ?x5829 ?x5839) ?x5841) ?x5843) ?x5845) ?x5847) ?x5849) ?x5851)))
 (= (+ (+ (+ (+ (+ ?x5852 ?x5853) ?x5855) ?x5857) ?x5859) ?x5861) 0.0))))))))))))))))))
(assert
 (let ((?x5940 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5937 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5934 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5931 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5928 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5925 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5922 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5919 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5916 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5913 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5910 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5907 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5904 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x5901 (* ?x4712 l_0_4_39)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x5899 (* ?x4703 l_0_4_38)))
 (let ((?x4983 (* 2.0 l_0_4_29)))
 (let ((?x6703 (* ?x4983 l_0_4_37)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6701 (* ?x4031 l_0_4_167)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6699 (* ?x4028 l_0_4_166)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6697 (* ?x4025 l_0_4_165)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6695 (* ?x4022 l_0_4_164)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x6693 (* ?x6692 l_0_4_99)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x6690 (* ?x6689 l_0_4_98)))
 (let ((?x6686 (* 2.0 l_0_4_119)))
 (let ((?x6687 (* ?x6686 l_0_4_97)))
 (let ((?x6696 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_122) ?x6687) ?x6690) ?x6693) ?x6695)))
 (let ((?x6702 (+ (+ (+ ?x6696 ?x6697) ?x6699) ?x6701)))
 (let ((?x6710 (- (- (- (- (- (- (- ?x6702 ?x6703) ?x5899) ?x5901) ?x5904) ?x5907) ?x5910) ?x5913)))
 (let ((?x6717 (+ (+ (+ (+ (+ (+ (- ?x6710 ?x5916) ?x5919) ?x5922) ?x5925) ?x5928) ?x5931) ?x5934)))
 (= (+ (+ ?x6717 ?x5937) ?x5940) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6040 (* l_0_4_90 l_0_4_90)))
 (let ((?x6038 (* l_0_4_89 l_0_4_89)))
 (let ((?x6036 (* l_0_4_88 l_0_4_88)))
 (let ((?x6034 (* l_0_4_87 l_0_4_87)))
 (let ((?x6032 (* l_0_4_86 l_0_4_86)))
 (let ((?x6030 (* l_0_4_85 l_0_4_85)))
 (let ((?x6028 (* l_0_4_84 l_0_4_84)))
 (let ((?x6026 (* l_0_4_83 l_0_4_83)))
 (let ((?x6024 (* l_0_4_82 l_0_4_82)))
 (let ((?x6022 (* l_0_4_45 l_0_4_45)))
 (let ((?x6020 (* l_0_4_44 l_0_4_44)))
 (let ((?x6018 (* l_0_4_43 l_0_4_43)))
 (let ((?x6016 (* l_0_4_42 l_0_4_42)))
 (let ((?x6003 (* l_0_4_41 l_0_4_41)))
 (let ((?x6000 (* l_0_4_40 l_0_4_40)))
 (let ((?x5996 (* l_0_4_39 l_0_4_39)))
 (let ((?x5992 (* l_0_4_38 l_0_4_38)))
 (let ((?x6044 (* l_0_4_37 l_0_4_37)))
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6798 (* ?x4031 l_0_4_175)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6796 (* ?x4028 l_0_4_174)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6794 (* ?x4025 l_0_4_173)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6792 (* ?x4022 l_0_4_172)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x6790 (* ?x6789 l_0_4_99)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x6787 (* ?x6786 l_0_4_98)))
 (let ((?x6783 (* 2.0 l_0_4_127)))
 (let ((?x6784 (* ?x6783 l_0_4_97)))
 (let ((?x6793 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_130) ?x6784) ?x6787) ?x6790) ?x6792)))
 (let ((?x6799 (+ (+ (+ ?x6793 ?x6794) ?x6796) ?x6798)))
 (let ((?x6806 (- (- (- (- (- (- (- ?x6799 ?x6044) ?x5992) ?x5996) ?x6000) ?x6003) ?x6016) ?x6018)))
 (let ((?x6813 (+ (+ (+ (+ (+ (- (- ?x6806 ?x6020) ?x6022) ?x6024) ?x6026) ?x6028) ?x6030) ?x6032)))
 (= (+ (+ (+ (+ ?x6813 ?x6034) ?x6036) ?x6038) ?x6040) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x6878 (- (+ (* l_0_4_1 l_0_4_1) (* (* 2.0 l_0_4_181) l_0_4_184)) (* (* 2.0 l_0_4_226) l_0_4_229))))
 (= (- ?x6878 ?x3560) 0.0))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3627 (* ?x3626 l_0_4_47)))
 (let ((?x6900 (+ (* (* 2.0 l_0_4_1) l_0_4_2) (* (* 2.0 l_0_4_182) l_0_4_184))))
 (let ((?x6906 (- (+ ?x6900 (* (* 2.0 l_0_4_183) l_0_4_185)) (* (* 2.0 l_0_4_227) l_0_4_229))))
 (= (- (- ?x6906 (* (* 2.0 l_0_4_228) l_0_4_230)) ?x3627) 0.0))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3664 (* ?x3626 l_0_4_49)))
 (let ((?x6947 (* l_0_4_231 l_0_4_231)))
 (let ((?x6945 (* l_0_4_230 l_0_4_230)))
 (let ((?x6943 (* l_0_4_229 l_0_4_229)))
 (let ((?x6936 (+ (* (* 2.0 l_0_4_1) l_0_4_4) (* 1.0 (* l_0_4_184 l_0_4_184)))))
 (let ((?x6942 (+ (+ ?x6936 (* 1.0 (* l_0_4_185 l_0_4_185))) (* 1.0 (* l_0_4_186 l_0_4_186)))))
 (= (- (- (- (- ?x6942 ?x6943) ?x6945) ?x6947) ?x3664) 0.0)))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3749 (* ?x3626 l_0_4_52)))
 (let ((?x6968 (+ (* (* 2.0 l_0_4_1) l_0_4_7) (* (* 2.0 l_0_4_184) l_0_4_187))))
 (let ((?x6974 (+ (+ ?x6968 (* (* 2.0 l_0_4_185) l_0_4_188)) (* (* 2.0 l_0_4_186) l_0_4_189))))
 (let ((?x6980 (- (- ?x6974 (* (* 2.0 l_0_4_229) l_0_4_232)) (* (* 2.0 l_0_4_230) l_0_4_233))))
 (= (- (- ?x6980 (* (* 2.0 l_0_4_231) l_0_4_234)) ?x3749) 0.0)))))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x7032 (* ?x6243 l_0_4_94)))
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3794 (* ?x3626 l_0_4_56)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x7017 (* ?x3623 l_0_4_139)))
 (let ((?x7020 (+ (- (* (* 2.0 l_0_4_1) l_0_4_11) ?x7017) (* (* 2.0 l_0_4_184) l_0_4_191))))
 (let ((?x7024 (+ (+ ?x7020 (* (* 2.0 l_0_4_185) l_0_4_192)) (* (* 2.0 l_0_4_186) l_0_4_193))))
 (let ((?x7028 (- (- ?x7024 (* (* 2.0 l_0_4_229) l_0_4_236)) (* (* 2.0 l_0_4_230) l_0_4_237))))
 (= (+ (- (- ?x7028 (* (* 2.0 l_0_4_231) l_0_4_238)) ?x3794) ?x7032) 0.0)))))))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3850 (* ?x3626 l_0_4_61)))
 (let ((?x7075 (+ (* (* 2.0 l_0_4_1) l_0_4_16) (* (* 2.0 l_0_4_184) l_0_4_196))))
 (let ((?x7079 (+ (+ ?x7075 (* (* 2.0 l_0_4_185) l_0_4_197)) (* (* 2.0 l_0_4_186) l_0_4_198))))
 (let ((?x7083 (- (- ?x7079 (* (* 2.0 l_0_4_229) l_0_4_241)) (* (* 2.0 l_0_4_230) l_0_4_242))))
 (= (- (- ?x7083 (* (* 2.0 l_0_4_231) l_0_4_243)) ?x3850) 0.0)))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3866 (* ?x3626 l_0_4_67)))
 (let ((?x7120 (+ (* (* 2.0 l_0_4_1) l_0_4_22) (* (* 2.0 l_0_4_184) l_0_4_202))))
 (let ((?x7124 (+ (+ ?x7120 (* (* 2.0 l_0_4_185) l_0_4_203)) (* (* 2.0 l_0_4_186) l_0_4_204))))
 (let ((?x7128 (- (- ?x7124 (* (* 2.0 l_0_4_229) l_0_4_247)) (* (* 2.0 l_0_4_230) l_0_4_248))))
 (= (- (- ?x7128 (* (* 2.0 l_0_4_231) l_0_4_249)) ?x3866) 0.0)))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3876 (* ?x3626 l_0_4_74)))
 (let ((?x7165 (+ (* (* 2.0 l_0_4_1) l_0_4_29) (* (* 2.0 l_0_4_184) l_0_4_209))))
 (let ((?x7169 (+ (+ ?x7165 (* (* 2.0 l_0_4_185) l_0_4_210)) (* (* 2.0 l_0_4_186) l_0_4_211))))
 (let ((?x7173 (- (- ?x7169 (* (* 2.0 l_0_4_229) l_0_4_254)) (* (* 2.0 l_0_4_230) l_0_4_255))))
 (= (- (- ?x7173 (* (* 2.0 l_0_4_231) l_0_4_256)) ?x3876) 0.0)))))))
(assert
 (let ((?x3626 (* 2.0 l_0_4_46)))
 (let ((?x3886 (* ?x3626 l_0_4_82)))
 (let ((?x7210 (+ (* (* 2.0 l_0_4_1) l_0_4_37) (* (* 2.0 l_0_4_184) l_0_4_217))))
 (let ((?x7214 (+ (+ ?x7210 (* (* 2.0 l_0_4_185) l_0_4_218)) (* (* 2.0 l_0_4_186) l_0_4_219))))
 (let ((?x7218 (- (- ?x7214 (* (* 2.0 l_0_4_229) l_0_4_262)) (* (* 2.0 l_0_4_230) l_0_4_263))))
 (= (- (- ?x7218 (* (* 2.0 l_0_4_231) l_0_4_264)) ?x3886) 0.0)))))))
(assert
 (let ((?x3915 (* l_0_4_48 l_0_4_48)))
 (let ((?x3913 (* l_0_4_47 l_0_4_47)))
 (= (- (- (+ (* l_0_4_2 l_0_4_2) (* l_0_4_3 l_0_4_3)) ?x3913) ?x3915) 0.0))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x3968 (* ?x3967 l_0_4_50)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x3965 (* ?x3964 l_0_4_49)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x3962 (* ?x3961 l_0_4_5)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x3959 (* ?x3958 l_0_4_4)))
 (= (- (- (+ ?x3959 ?x3962) ?x3965) ?x3968) 0.0))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4040 (* ?x3967 l_0_4_53)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4038 (* ?x3964 l_0_4_52)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4036 (* ?x3961 l_0_4_8)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4034 (* ?x3958 l_0_4_7)))
 (= (- (- (+ ?x4034 ?x4036) ?x4038) ?x4040) 0.0))))))))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x7288 (* ?x6368 l_0_4_95)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x7286 (* ?x6365 l_0_4_94)))
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4132 (* ?x3967 l_0_4_57)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4130 (* ?x3964 l_0_4_56)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x7282 (* ?x3906 l_0_4_140)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x7280 (* ?x3903 l_0_4_139)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4113 (* ?x4112 l_0_4_3)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x4110 (* ?x4109 l_0_4_2)))
 (let ((?x7289 (+ (+ (- (- (- (- (+ ?x4110 ?x4113) ?x7280) ?x7282) ?x4130) ?x4132) ?x7286) ?x7288)))
 (= ?x7289 0.0)))))))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4220 (* ?x3967 l_0_4_62)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4218 (* ?x3964 l_0_4_61)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4216 (* ?x3649 l_0_4_3)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x4214 (* ?x3641 l_0_4_2)))
 (= (- (- (+ ?x4214 ?x4216) ?x4218) ?x4220) 0.0))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4296 (* ?x3967 l_0_4_68)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4294 (* ?x3964 l_0_4_67)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4292 (* ?x4291 l_0_4_3)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4289 (* ?x3958 l_0_4_22)))
 (= (- (- (+ ?x4289 ?x4292) ?x4294) ?x4296) 0.0))))))))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x7032 (* ?x6243 l_0_4_94)))
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4387 (* ?x3967 l_0_4_75)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4385 (* ?x3964 l_0_4_74)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4383 (* ?x3961 l_0_4_30)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4381 (* ?x3958 l_0_4_29)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x7017 (* ?x3623 l_0_4_139)))
 (= (- (- (- (+ (+ ?x7017 ?x4381) ?x4383) ?x4385) ?x4387) ?x7032) 0.0))))))))))))))
(assert
 (let ((?x3967 (* 2.0 l_0_4_48)))
 (let ((?x4453 (* ?x3967 l_0_4_83)))
 (let ((?x3964 (* 2.0 l_0_4_47)))
 (let ((?x4451 (* ?x3964 l_0_4_82)))
 (let ((?x3961 (* 2.0 l_0_4_3)))
 (let ((?x4449 (* ?x3961 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4447 (* ?x3958 l_0_4_37)))
 (= (- (- (+ ?x4447 ?x4449) ?x4451) ?x4453) 0.0))))))))))
(assert
 (let ((?x4536 (* l_0_4_6 l_0_4_6)))
 (let ((?x4534 (* l_0_4_51 l_0_4_51)))
 (let ((?x4532 (* l_0_4_50 l_0_4_50)))
 (let ((?x4530 (* l_0_4_5 l_0_4_5)))
 (let ((?x7368 (- (+ (- (* l_0_4_4 l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4530) ?x4532)))
 (= (+ (- ?x7368 ?x4534) ?x4536) 0.0)))))))
(assert
 (let ((?x4566 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4563 (* ?x4562 l_0_4_54)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4560 (* ?x4559 l_0_4_53)))
 (let ((?x4557 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4554 (* ?x4553 l_0_4_52)))
 (let ((?x7387 (- (- (+ (- (* (* 2.0 l_0_4_4) l_0_4_7) ?x4554) ?x4557) ?x4560) ?x4563)))
 (= (+ ?x7387 ?x4566) 0.0)))))))))))
(assert
 (let ((?x7416 (* l_0_4_96 l_0_4_96)))
 (let ((?x7414 (* l_0_4_95 l_0_4_95)))
 (let ((?x7412 (* l_0_4_94 l_0_4_94)))
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4608 (* ?x4562 l_0_4_58)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4606 (* ?x4559 l_0_4_57)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4604 (* ?x4553 l_0_4_56)))
 (let ((?x7407 (* l_0_4_141 l_0_4_141)))
 (let ((?x7405 (* l_0_4_140 l_0_4_140)))
 (let ((?x7403 (* l_0_4_139 l_0_4_139)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4602 (* ?x4601 l_0_4_6)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4599 (* ?x4112 l_0_4_5)))
 (let ((?x7406 (- (- (+ (+ (* (* 2.0 l_0_4_11) l_0_4_4) ?x4599) ?x4602) ?x7403) ?x7405)))
 (let ((?x7417 (+ (+ (+ (- (- (- (- ?x7406 ?x7407) ?x4604) ?x4606) ?x4608) ?x7412) ?x7414) ?x7416)))
 (= ?x7417 0.0))))))))))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4644 (* ?x4562 l_0_4_63)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4642 (* ?x4559 l_0_4_62)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4640 (* ?x4553 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4638 (* ?x3652 l_0_4_6)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4630 (* ?x3649 l_0_4_5)))
 (let ((?x7447 (- (- (+ (+ (* (* 2.0 l_0_4_16) l_0_4_4) ?x4630) ?x4638) ?x4640) ?x4642)))
 (= (- ?x7447 ?x4644) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4681 (* ?x4562 l_0_4_69)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4679 (* ?x4559 l_0_4_68)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4677 (* ?x4553 l_0_4_67)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x4675 (* ?x4674 l_0_4_6)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x4666 (* ?x4291 l_0_4_5)))
 (let ((?x7466 (- (- (+ (+ (* (* 2.0 l_0_4_22) l_0_4_4) ?x4666) ?x4675) ?x4677) ?x4679)))
 (= (- ?x7466 ?x4681) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4719 (* ?x4562 l_0_4_76)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4717 (* ?x4559 l_0_4_75)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4715 (* ?x4553 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4713 (* ?x4712 l_0_4_6)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4704 (* ?x4703 l_0_4_5)))
 (let ((?x7485 (- (- (+ (+ (* (* 2.0 l_0_4_29) l_0_4_4) ?x4704) ?x4713) ?x4715) ?x4717)))
 (= (- ?x7485 ?x4719) 0.0)))))))))))))
(assert
 (let ((?x4562 (* 2.0 l_0_4_51)))
 (let ((?x4757 (* ?x4562 l_0_4_84)))
 (let ((?x4559 (* 2.0 l_0_4_50)))
 (let ((?x4755 (* ?x4559 l_0_4_83)))
 (let ((?x4553 (* 2.0 l_0_4_49)))
 (let ((?x4753 (* ?x4553 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x4751 (* ?x4750 l_0_4_6)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x4742 (* ?x4741 l_0_4_5)))
 (let ((?x5031 (* 2.0 l_0_4_37)))
 (let ((?x6405 (* ?x5031 l_0_4_4)))
 (= (- (- (- (+ (+ ?x6405 ?x4742) ?x4751) ?x4753) ?x4755) ?x4757) 0.0))))))))))))))
(assert
 (let ((?x4797 (* l_0_4_9 l_0_4_9)))
 (let ((?x4795 (* l_0_4_8 l_0_4_8)))
 (let ((?x4793 (* l_0_4_7 l_0_4_7)))
 (let ((?x4791 (* l_0_4_55 l_0_4_55)))
 (let ((?x4789 (* l_0_4_54 l_0_4_54)))
 (let ((?x4787 (* l_0_4_53 l_0_4_53)))
 (let ((?x7517 (- (- (- (* l_0_4_10 l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4787) ?x4789)))
 (= (+ (+ (+ (- ?x7517 ?x4791) ?x4793) ?x4795) ?x4797) 0.0)))))))))
(assert
 (let ((?x6419 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x6416 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x6413 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4832 (* ?x4831 l_0_4_59)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4829 (* ?x4828 l_0_4_58)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4826 (* ?x4825 l_0_4_57)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4823 (* ?x4822 l_0_4_56)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x6403 (* ?x3955 l_0_4_144)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x6401 (* ?x3952 l_0_4_143)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x6400 (* ?x3949 l_0_4_142)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x4820 (* ?x4601 l_0_4_9)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x4818 (* ?x4112 l_0_4_8)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x4816 (* ?x4109 l_0_4_7)))
 (let ((?x7539 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_14) ?x4816) ?x4818) ?x4820) ?x6400)))
 (let ((?x7546 (+ (- (- (- (- (- (- ?x7539 ?x6401) ?x6403) ?x4823) ?x4826) ?x4829) ?x4832) ?x6413)))
 (= (+ (+ ?x7546 ?x6416) ?x6419) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x4879 (* ?x4831 l_0_4_64)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x4877 (* ?x4828 l_0_4_63)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x4875 (* ?x4825 l_0_4_62)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4873 (* ?x4822 l_0_4_61)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x4871 (* ?x3652 l_0_4_9)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x4862 (* ?x3649 l_0_4_8)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x4858 (* ?x3641 l_0_4_7)))
 (let ((?x7582 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_19) ?x4858) ?x4862) ?x4871) ?x4873)))
 (= (- (- (- ?x7582 ?x4875) ?x4877) ?x4879) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5005 (* ?x4831 l_0_4_77)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5003 (* ?x4828 l_0_4_76)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5001 (* ?x4825 l_0_4_75)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x4999 (* ?x4822 l_0_4_74)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x4997 (* ?x4712 l_0_4_9)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x4988 (* ?x4703 l_0_4_8)))
 (let ((?x4983 (* 2.0 l_0_4_29)))
 (let ((?x4985 (* ?x4983 l_0_4_7)))
 (let ((?x7607 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_32) ?x4985) ?x4988) ?x4997) ?x4999)))
 (= (- (- (- ?x7607 ?x5001) ?x5003) ?x5005) 0.0)))))))))))))))))
(assert
 (let ((?x4831 (* 2.0 l_0_4_55)))
 (let ((?x5053 (* ?x4831 l_0_4_85)))
 (let ((?x4828 (* 2.0 l_0_4_54)))
 (let ((?x5051 (* ?x4828 l_0_4_84)))
 (let ((?x4825 (* 2.0 l_0_4_53)))
 (let ((?x5049 (* ?x4825 l_0_4_83)))
 (let ((?x4822 (* 2.0 l_0_4_52)))
 (let ((?x5047 (* ?x4822 l_0_4_82)))
 (let ((?x4750 (* 2.0 l_0_4_39)))
 (let ((?x5045 (* ?x4750 l_0_4_9)))
 (let ((?x4741 (* 2.0 l_0_4_38)))
 (let ((?x5036 (* ?x4741 l_0_4_8)))
 (let ((?x5031 (* 2.0 l_0_4_37)))
 (let ((?x5033 (* ?x5031 l_0_4_7)))
 (let ((?x7632 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_40) ?x5033) ?x5036) ?x5045) ?x5047)))
 (= (- (- (- ?x7632 ?x5049) ?x5051) ?x5053) 0.0)))))))))))))))))
(assert
 (let ((?x5105 (* l_0_4_60 l_0_4_60)))
 (let ((?x5103 (* l_0_4_59 l_0_4_59)))
 (let ((?x5101 (* l_0_4_58 l_0_4_58)))
 (let ((?x5099 (* l_0_4_57 l_0_4_57)))
 (let ((?x5097 (* l_0_4_56 l_0_4_56)))
 (let ((?x5095 (* l_0_4_15 l_0_4_15)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7662 (* ?x3955 l_0_4_148)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7660 (* ?x3952 l_0_4_147)))
 (let ((?x5093 (* l_0_4_14 l_0_4_14)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7657 (* ?x3949 l_0_4_146)))
 (let ((?x5084 (* l_0_4_13 l_0_4_13)))
 (let ((?x5081 (* l_0_4_12 l_0_4_12)))
 (let ((?x5109 (* l_0_4_11 l_0_4_11)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x7652 (* ?x4100 l_0_4_96)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x7650 (* ?x4088 l_0_4_95)))
 (let ((?x7655 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_94) ?x7650) ?x7652) ?x5109) ?x5081)))
 (let ((?x7665 (- (+ (- (- (+ (- (+ ?x7655 ?x5084) ?x7657) ?x5093) ?x7660) ?x7662) ?x5095) ?x5097)))
 (= (- (- (- (- ?x7665 ?x5099) ?x5101) ?x5103) ?x5105) 0.0))))))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5154 (* ?x5153 l_0_4_65)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5151 (* ?x5150 l_0_4_64)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5148 (* ?x5147 l_0_4_63)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5145 (* ?x5144 l_0_4_62)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5142 (* ?x5141 l_0_4_61)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5139 (* ?x5138 l_0_4_20)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x3956 (* ?x3955 l_0_4_153)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x3953 (* ?x3952 l_0_4_152)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5136 (* ?x5135 l_0_4_19)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x3950 (* ?x3949 l_0_4_151)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5133 (* ?x4601 l_0_4_18)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5131 (* ?x4112 l_0_4_17)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3947 (* ?x3764 l_0_4_96)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3945 (* ?x3761 l_0_4_95)))
 (let ((?x7713 (+ (+ (+ (* (* 2.0 l_0_4_106) l_0_4_94) ?x3945) ?x3947) (* (* 2.0 l_0_4_11) l_0_4_16))))
 (let ((?x7720 (+ (- (- (+ (- (+ (+ ?x7713 ?x5131) ?x5133) ?x3950) ?x5136) ?x3953) ?x3956) ?x5139)))
 (= (- (- (- (- (- ?x7720 ?x5142) ?x5145) ?x5148) ?x5151) ?x5154) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5213 (* ?x5153 l_0_4_71)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5211 (* ?x5150 l_0_4_70)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5209 (* ?x5147 l_0_4_69)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5207 (* ?x5144 l_0_4_68)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5205 (* ?x5141 l_0_4_67)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5203 (* ?x5138 l_0_4_26)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7774 (* ?x3955 l_0_4_159)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7772 (* ?x3952 l_0_4_158)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5193 (* ?x5135 l_0_4_25)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7769 (* ?x3949 l_0_4_157)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5190 (* ?x4601 l_0_4_24)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5186 (* ?x4112 l_0_4_23)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x7765 (* ?x6187 l_0_4_96)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x7763 (* ?x6184 l_0_4_95)))
 (let ((?x7762 (+ (* (* 2.0 l_0_4_11) l_0_4_22) (* (* 2.0 l_0_4_112) l_0_4_94))))
 (let ((?x7773 (- (+ (- (+ (+ (+ (+ ?x7762 ?x7763) ?x7765) ?x5186) ?x5190) ?x7769) ?x5193) ?x7772)))
 (let ((?x7781 (- (- (- (- (- (+ (- ?x7773 ?x7774) ?x5203) ?x5205) ?x5207) ?x5209) ?x5211) ?x5213)))
 (= ?x7781 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5272 (* ?x5153 l_0_4_78)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5270 (* ?x5150 l_0_4_77)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5268 (* ?x5147 l_0_4_76)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5266 (* ?x5144 l_0_4_75)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5264 (* ?x5141 l_0_4_74)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5262 (* ?x5138 l_0_4_33)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7845 (* ?x3955 l_0_4_166)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7843 (* ?x3952 l_0_4_165)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5252 (* ?x5135 l_0_4_32)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7840 (* ?x3949 l_0_4_164)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5249 (* ?x4601 l_0_4_31)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x7837 (* ?x6692 l_0_4_96)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x7835 (* ?x6689 l_0_4_95)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5245 (* ?x4112 l_0_4_30)))
 (let ((?x7833 (+ (* (* 2.0 l_0_4_11) l_0_4_29) (* (* 2.0 l_0_4_119) l_0_4_94))))
 (let ((?x7844 (- (+ (- (+ (+ (+ (+ ?x7833 ?x5245) ?x7835) ?x7837) ?x5249) ?x7840) ?x5252) ?x7843)))
 (let ((?x7852 (- (- (- (- (- (+ (- ?x7844 ?x7845) ?x5262) ?x5264) ?x5266) ?x5268) ?x5270) ?x5272)))
 (= ?x7852 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x5153 (* 2.0 l_0_4_60)))
 (let ((?x5331 (* ?x5153 l_0_4_86)))
 (let ((?x5150 (* 2.0 l_0_4_59)))
 (let ((?x5329 (* ?x5150 l_0_4_85)))
 (let ((?x5147 (* 2.0 l_0_4_58)))
 (let ((?x5327 (* ?x5147 l_0_4_84)))
 (let ((?x5144 (* 2.0 l_0_4_57)))
 (let ((?x5325 (* ?x5144 l_0_4_83)))
 (let ((?x5141 (* 2.0 l_0_4_56)))
 (let ((?x5323 (* ?x5141 l_0_4_82)))
 (let ((?x5138 (* 2.0 l_0_4_15)))
 (let ((?x5321 (* ?x5138 l_0_4_41)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7915 (* ?x3955 l_0_4_174)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7913 (* ?x3952 l_0_4_173)))
 (let ((?x5135 (* 2.0 l_0_4_14)))
 (let ((?x5311 (* ?x5135 l_0_4_40)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7910 (* ?x3949 l_0_4_172)))
 (let ((?x4601 (* 2.0 l_0_4_13)))
 (let ((?x5308 (* ?x4601 l_0_4_39)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x7907 (* ?x6789 l_0_4_96)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x7905 (* ?x6786 l_0_4_95)))
 (let ((?x4112 (* 2.0 l_0_4_12)))
 (let ((?x5304 (* ?x4112 l_0_4_38)))
 (let ((?x4109 (* 2.0 l_0_4_11)))
 (let ((?x6540 (* ?x4109 l_0_4_37)))
 (let ((?x7908 (+ (+ (+ (+ ?x6540 ?x5304) (* (* 2.0 l_0_4_127) l_0_4_94)) ?x7905) ?x7907)))
 (let ((?x7918 (- (+ (- (- (+ (- (+ ?x7908 ?x5308) ?x7910) ?x5311) ?x7913) ?x7915) ?x5321) ?x5323)))
 (= (- (- (- (- ?x7918 ?x5325) ?x5327) ?x5329) ?x5331) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5395 (* l_0_4_66 l_0_4_66)))
 (let ((?x5393 (* l_0_4_65 l_0_4_65)))
 (let ((?x5391 (* l_0_4_64 l_0_4_64)))
 (let ((?x5389 (* l_0_4_63 l_0_4_63)))
 (let ((?x5387 (* l_0_4_62 l_0_4_62)))
 (let ((?x5385 (* l_0_4_61 l_0_4_61)))
 (let ((?x5383 (* l_0_4_21 l_0_4_21)))
 (let ((?x5381 (* l_0_4_20 l_0_4_20)))
 (let ((?x5379 (* l_0_4_19 l_0_4_19)))
 (let ((?x5369 (* l_0_4_18 l_0_4_18)))
 (let ((?x7969 (+ (+ (+ (* l_0_4_16 l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5369) ?x5379)))
 (let ((?x7976 (- (- (- (- (- (+ (+ ?x7969 ?x5381) ?x5383) ?x5385) ?x5387) ?x5389) ?x5391) ?x5393)))
 (= (- ?x7976 ?x5395) 0.0))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5445 (* ?x3681 l_0_4_72)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5443 (* ?x3678 l_0_4_71)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5441 (* ?x3675 l_0_4_70)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5439 (* ?x3672 l_0_4_69)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5437 (* ?x3669 l_0_4_68)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5435 (* ?x3666 l_0_4_67)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5433 (* ?x3661 l_0_4_27)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5431 (* ?x3658 l_0_4_26)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5429 (* ?x3655 l_0_4_25)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5427 (* ?x3652 l_0_4_24)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5425 (* ?x3649 l_0_4_23)))
 (let ((?x7995 (+ (+ (+ (+ (* (* 2.0 l_0_4_16) l_0_4_22) ?x5425) ?x5427) ?x5429) ?x5431)))
 (let ((?x8002 (- (- (- (- (- (- (+ ?x7995 ?x5433) ?x5435) ?x5437) ?x5439) ?x5441) ?x5443) ?x5445)))
 (= ?x8002 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3681 (* 2.0 l_0_4_66)))
 (let ((?x5541 (* ?x3681 l_0_4_87)))
 (let ((?x3678 (* 2.0 l_0_4_65)))
 (let ((?x5539 (* ?x3678 l_0_4_86)))
 (let ((?x3675 (* 2.0 l_0_4_64)))
 (let ((?x5537 (* ?x3675 l_0_4_85)))
 (let ((?x3672 (* 2.0 l_0_4_63)))
 (let ((?x5535 (* ?x3672 l_0_4_84)))
 (let ((?x3669 (* 2.0 l_0_4_62)))
 (let ((?x5533 (* ?x3669 l_0_4_83)))
 (let ((?x3666 (* 2.0 l_0_4_61)))
 (let ((?x5531 (* ?x3666 l_0_4_82)))
 (let ((?x3661 (* 2.0 l_0_4_21)))
 (let ((?x5529 (* ?x3661 l_0_4_42)))
 (let ((?x3658 (* 2.0 l_0_4_20)))
 (let ((?x5527 (* ?x3658 l_0_4_41)))
 (let ((?x3655 (* 2.0 l_0_4_19)))
 (let ((?x5525 (* ?x3655 l_0_4_40)))
 (let ((?x3652 (* 2.0 l_0_4_18)))
 (let ((?x5523 (* ?x3652 l_0_4_39)))
 (let ((?x3649 (* 2.0 l_0_4_17)))
 (let ((?x5521 (* ?x3649 l_0_4_38)))
 (let ((?x3641 (* 2.0 l_0_4_16)))
 (let ((?x6605 (* ?x3641 l_0_4_37)))
 (let ((?x8034 (- (- (+ (+ (+ (+ (+ ?x6605 ?x5521) ?x5523) ?x5525) ?x5527) ?x5529) ?x5531) ?x5533)))
 (= (- (- (- (- ?x8034 ?x5535) ?x5537) ?x5539) ?x5541) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x5617 (* l_0_4_73 l_0_4_73)))
 (let ((?x5615 (* l_0_4_72 l_0_4_72)))
 (let ((?x5613 (* l_0_4_71 l_0_4_71)))
 (let ((?x5611 (* l_0_4_70 l_0_4_70)))
 (let ((?x5609 (* l_0_4_69 l_0_4_69)))
 (let ((?x5607 (* l_0_4_68 l_0_4_68)))
 (let ((?x5605 (* l_0_4_67 l_0_4_67)))
 (let ((?x5603 (* l_0_4_28 l_0_4_28)))
 (let ((?x5601 (* l_0_4_27 l_0_4_27)))
 (let ((?x5599 (* l_0_4_26 l_0_4_26)))
 (let ((?x5588 (* l_0_4_25 l_0_4_25)))
 (let ((?x5585 (* l_0_4_24 l_0_4_24)))
 (let ((?x8060 (+ (+ (+ (* l_0_4_22 l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5585) ?x5588)))
 (let ((?x8067 (- (- (- (- (+ (+ (+ ?x8060 ?x5599) ?x5601) ?x5603) ?x5605) ?x5607) ?x5609) ?x5611)))
 (= (- (- (- ?x8067 ?x5613) ?x5615) ?x5617) 0.0))))))))))))))))
(assert
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5686 (* ?x5685 l_0_4_80)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5683 (* ?x5682 l_0_4_79)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5680 (* ?x5679 l_0_4_78)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5677 (* ?x5676 l_0_4_77)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5674 (* ?x5673 l_0_4_76)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5671 (* ?x5670 l_0_4_75)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5668 (* ?x5667 l_0_4_74)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5665 (* ?x5664 l_0_4_35)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5662 (* ?x5661 l_0_4_34)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5659 (* ?x5658 l_0_4_33)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5656 (* ?x5655 l_0_4_32)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5653 (* ?x4674 l_0_4_31)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5651 (* ?x4291 l_0_4_30)))
 (let ((?x8090 (+ (+ (+ (+ (* (* 2.0 l_0_4_22) l_0_4_29) ?x5651) ?x5653) ?x5656) ?x5659)))
 (let ((?x8097 (- (- (- (- (- (+ (+ ?x8090 ?x5662) ?x5665) ?x5668) ?x5671) ?x5674) ?x5677) ?x5680)))
 (= (- (- ?x8097 ?x5683) ?x5686) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x7032 (* ?x6243 l_0_4_94)))
 (let ((?x5685 (* 2.0 l_0_4_73)))
 (let ((?x5770 (* ?x5685 l_0_4_88)))
 (let ((?x5682 (* 2.0 l_0_4_72)))
 (let ((?x5768 (* ?x5682 l_0_4_87)))
 (let ((?x5679 (* 2.0 l_0_4_71)))
 (let ((?x5766 (* ?x5679 l_0_4_86)))
 (let ((?x5676 (* 2.0 l_0_4_70)))
 (let ((?x5764 (* ?x5676 l_0_4_85)))
 (let ((?x5673 (* 2.0 l_0_4_69)))
 (let ((?x5762 (* ?x5673 l_0_4_84)))
 (let ((?x5670 (* 2.0 l_0_4_68)))
 (let ((?x5760 (* ?x5670 l_0_4_83)))
 (let ((?x5667 (* 2.0 l_0_4_67)))
 (let ((?x5758 (* ?x5667 l_0_4_82)))
 (let ((?x5664 (* 2.0 l_0_4_28)))
 (let ((?x5756 (* ?x5664 l_0_4_43)))
 (let ((?x5661 (* 2.0 l_0_4_27)))
 (let ((?x5754 (* ?x5661 l_0_4_42)))
 (let ((?x5658 (* 2.0 l_0_4_26)))
 (let ((?x5752 (* ?x5658 l_0_4_41)))
 (let ((?x5655 (* 2.0 l_0_4_25)))
 (let ((?x5740 (* ?x5655 l_0_4_40)))
 (let ((?x4674 (* 2.0 l_0_4_24)))
 (let ((?x5736 (* ?x4674 l_0_4_39)))
 (let ((?x4291 (* 2.0 l_0_4_23)))
 (let ((?x5732 (* ?x4291 l_0_4_38)))
 (let ((?x4920 (* 2.0 l_0_4_22)))
 (let ((?x5728 (* ?x4920 l_0_4_37)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x7017 (* ?x3623 l_0_4_139)))
 (let ((?x8135 (+ (+ (+ (+ (+ (+ (+ ?x7017 ?x5728) ?x5732) ?x5736) ?x5740) ?x5752) ?x5754) ?x5756)))
 (let ((?x8142 (- (- (- (- (- (- (- ?x8135 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (= (- ?x8142 ?x7032) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5861 (* l_0_4_81 l_0_4_81)))
 (let ((?x5859 (* l_0_4_80 l_0_4_80)))
 (let ((?x5857 (* l_0_4_79 l_0_4_79)))
 (let ((?x5855 (* l_0_4_78 l_0_4_78)))
 (let ((?x5853 (* l_0_4_77 l_0_4_77)))
 (let ((?x5851 (* l_0_4_76 l_0_4_76)))
 (let ((?x5849 (* l_0_4_75 l_0_4_75)))
 (let ((?x5847 (* l_0_4_74 l_0_4_74)))
 (let ((?x5845 (* l_0_4_36 l_0_4_36)))
 (let ((?x5843 (* l_0_4_35 l_0_4_35)))
 (let ((?x5841 (* l_0_4_34 l_0_4_34)))
 (let ((?x5839 (* l_0_4_33 l_0_4_33)))
 (let ((?x5828 (* l_0_4_32 l_0_4_32)))
 (let ((?x5824 (* l_0_4_31 l_0_4_31)))
 (let ((?x8172 (+ (+ (+ (* l_0_4_29 l_0_4_29) (* l_0_4_30 l_0_4_30)) ?x5824) ?x5828)))
 (let ((?x8179 (- (- (- (+ (+ (+ (+ ?x8172 ?x5839) ?x5841) ?x5843) ?x5845) ?x5847) ?x5849) ?x5851)))
 (= (- (- (- (- (- ?x8179 ?x5853) ?x5855) ?x5857) ?x5859) ?x5861) 0.0))))))))))))))))))
(assert
 (let ((?x5940 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5937 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5934 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5931 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5928 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5925 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5922 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5919 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5916 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5913 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5910 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5907 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5904 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4712 (* 2.0 l_0_4_31)))
 (let ((?x5901 (* ?x4712 l_0_4_39)))
 (let ((?x4703 (* 2.0 l_0_4_30)))
 (let ((?x5899 (* ?x4703 l_0_4_38)))
 (let ((?x4983 (* 2.0 l_0_4_29)))
 (let ((?x6703 (* ?x4983 l_0_4_37)))
 (let ((?x8208 (+ (+ (+ (+ (+ (+ (+ ?x6703 ?x5899) ?x5901) ?x5904) ?x5907) ?x5910) ?x5913) ?x5916)))
 (let ((?x8215 (- (- (- (- (- (- (- ?x8208 ?x5919) ?x5922) ?x5925) ?x5928) ?x5931) ?x5934) ?x5937)))
 (= (- ?x8215 ?x5940) 0.0)))))))))))))))))))))))
(assert
 (let ((?x6040 (* l_0_4_90 l_0_4_90)))
 (let ((?x6038 (* l_0_4_89 l_0_4_89)))
 (let ((?x6036 (* l_0_4_88 l_0_4_88)))
 (let ((?x6034 (* l_0_4_87 l_0_4_87)))
 (let ((?x6032 (* l_0_4_86 l_0_4_86)))
 (let ((?x6030 (* l_0_4_85 l_0_4_85)))
 (let ((?x6028 (* l_0_4_84 l_0_4_84)))
 (let ((?x6026 (* l_0_4_83 l_0_4_83)))
 (let ((?x6024 (* l_0_4_82 l_0_4_82)))
 (let ((?x6022 (* l_0_4_45 l_0_4_45)))
 (let ((?x6020 (* l_0_4_44 l_0_4_44)))
 (let ((?x6018 (* l_0_4_43 l_0_4_43)))
 (let ((?x6016 (* l_0_4_42 l_0_4_42)))
 (let ((?x6003 (* l_0_4_41 l_0_4_41)))
 (let ((?x6000 (* l_0_4_40 l_0_4_40)))
 (let ((?x5996 (* l_0_4_39 l_0_4_39)))
 (let ((?x8244 (+ (+ (+ (* l_0_4_37 l_0_4_37) (* l_0_4_38 l_0_4_38)) ?x5996) ?x6000)))
 (let ((?x8251 (- (- (+ (+ (+ (+ (+ ?x8244 ?x6003) ?x6016) ?x6018) ?x6020) ?x6022) ?x6024) ?x6026)))
 (let ((?x8258 (- (- (- (- (- (- (- ?x8251 ?x6028) ?x6030) ?x6032) ?x6034) ?x6036) ?x6038) ?x6040)))
 (= ?x8258 0.0)))))))))))))))))))))
(assert
 (let ((?x8321 (* l_0_4_91 l_0_4_91)))
 (let ((?x8284 (+ (+ (* l_0_4_136 l_0_4_136) (* (* 2.0 l_0_4_202) l_0_4_217)) (* (* 2.0 l_0_4_203) l_0_4_218))))
 (let ((?x8290 (+ (+ ?x8284 (* (* 2.0 l_0_4_204) l_0_4_219)) (* (* 2.0 l_0_4_205) l_0_4_220))))
 (let ((?x8296 (+ (+ ?x8290 (* (* 2.0 l_0_4_206) l_0_4_221)) (* (* 2.0 l_0_4_207) l_0_4_222))))
 (let ((?x8302 (- (+ ?x8296 (* (* 2.0 l_0_4_208) l_0_4_223)) (* (* 2.0 l_0_4_247) l_0_4_262))))
 (let ((?x8308 (- (- ?x8302 (* (* 2.0 l_0_4_248) l_0_4_263)) (* (* 2.0 l_0_4_249) l_0_4_264))))
 (let ((?x8314 (- (- ?x8308 (* (* 2.0 l_0_4_250) l_0_4_265)) (* (* 2.0 l_0_4_251) l_0_4_266))))
 (let ((?x8320 (- (- ?x8314 (* (* 2.0 l_0_4_252) l_0_4_267)) (* (* 2.0 l_0_4_253) l_0_4_268))))
 (= (- ?x8320 ?x8321) 0.0))))))))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x8386 (* ?x6243 l_0_4_92)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_137) ?x8386) 0.0))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x8438 (* ?x8437 l_0_4_178)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x8435 (* ?x8434 l_0_4_177)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x8432 (* ?x8431 l_0_4_176)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x8429 (* ?x8428 l_0_4_175)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x8426 (* ?x8425 l_0_4_174)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x8423 (* ?x8422 l_0_4_173)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x8420 (* ?x8419 l_0_4_172)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8417 (* ?x3623 l_0_4_146)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x8415 (* ?x8414 l_0_4_133)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x8412 (* ?x8411 l_0_4_132)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x8409 (* ?x8408 l_0_4_131)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x8406 (* ?x8405 l_0_4_130)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x8403 (* ?x6187 l_0_4_129)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8401 (* ?x6184 l_0_4_128)))
 (let ((?x4085 (* (- 2.0) l_0_4_101)))
 (let ((?x8398 (* ?x4085 l_0_4_91)))
 (let ((?x8407 (+ (+ (+ (+ ?x8398 (* (* 2.0 l_0_4_112) l_0_4_127)) ?x8401) ?x8403) ?x8406)))
 (let ((?x8427 (- (- (- (+ (+ (+ (+ ?x8407 ?x8409) ?x8412) ?x8415) ?x8417) ?x8420) ?x8423) ?x8426)))
 (= (- (- (- (- ?x8427 ?x8429) ?x8432) ?x8435) ?x8438) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x3624 (* ?x3623 l_0_4_151)))
 (= (+ (* (* (- 2.0) l_0_4_106) l_0_4_91) ?x3624) 0.0))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8521 (* ?x3623 l_0_4_157)))
 (= (+ (* (* (- 2.0) l_0_4_112) l_0_4_91) ?x8521) 0.0))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8528 (* ?x3623 l_0_4_164)))
 (= (+ (* (* (- 2.0) l_0_4_119) l_0_4_91) ?x8528) 0.0))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8539 (* ?x3623 l_0_4_172)))
 (= (+ (* (* (- 2.0) l_0_4_127) l_0_4_91) ?x8539) 0.0))))
(assert
 (let ((?x8557 (* l_0_4_93 l_0_4_93)))
 (let ((?x8555 (* l_0_4_92 l_0_4_92)))
 (let ((?x8549 (* l_0_4_138 l_0_4_138)))
 (let ((?x8547 (* l_0_4_137 l_0_4_137)))
 (let ((?x8550 (+ ?x8547 ?x8549)))
 (= (- (- ?x8550 ?x8555) ?x8557) 0.0)))))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x7288 (* ?x6368 l_0_4_95)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x7286 (* ?x6365 l_0_4_94)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x7282 (* ?x3906 l_0_4_140)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x7280 (* ?x3903 l_0_4_139)))
 (= (- (- (+ ?x7280 ?x7282) ?x7286) ?x7288) 0.0))))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8586 (* ?x3906 l_0_4_147)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8584 (* ?x3903 l_0_4_146)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8582 (* ?x4088 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_101) l_0_4_92) ?x8582) ?x8584) ?x8586) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x3907 (* ?x3906 l_0_4_152)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x3904 (* ?x3903 l_0_4_151)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3897 (* ?x3761 l_0_4_93)))
 (let ((?x3908 (+ (+ (- (* (* (- 2.0) l_0_4_106) l_0_4_92) ?x3897) ?x3904) ?x3907)))
 (= ?x3908 0.0)))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8612 (* ?x3906 l_0_4_158)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8610 (* ?x3903 l_0_4_157)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8608 (* ?x6184 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_112) l_0_4_92) ?x8608) ?x8610) ?x8612) 0.0))))))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x8438 (* ?x8437 l_0_4_178)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x8435 (* ?x8434 l_0_4_177)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x8432 (* ?x8431 l_0_4_176)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x8429 (* ?x8428 l_0_4_175)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x8426 (* ?x8425 l_0_4_174)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x8423 (* ?x8422 l_0_4_173)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x8420 (* ?x8419 l_0_4_172)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8643 (* ?x3906 l_0_4_165)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8641 (* ?x3903 l_0_4_164)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x8639 (* ?x6689 l_0_4_93)))
 (let ((?x6686 (* 2.0 l_0_4_119)))
 (let ((?x8637 (* ?x6686 l_0_4_92)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x8415 (* ?x8414 l_0_4_133)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x8412 (* ?x8411 l_0_4_132)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x8409 (* ?x8408 l_0_4_131)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x8406 (* ?x8405 l_0_4_130)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x8403 (* ?x6187 l_0_4_129)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8401 (* ?x6184 l_0_4_128)))
 (let ((?x8634 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_127) ?x8401) ?x8403) ?x8406) ?x8409)))
 (let ((?x8636 (- (- ?x8634 ?x8412) ?x8415)))
 (let ((?x8647 (+ (+ (+ (+ (+ (- (- ?x8636 ?x8637) ?x8639) ?x8641) ?x8643) ?x8420) ?x8423) ?x8426)))
 (= (+ (+ (+ (+ ?x8647 ?x8429) ?x8432) ?x8435) ?x8438) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8694 (* ?x3906 l_0_4_173)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8692 (* ?x3903 l_0_4_172)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x8686 (* ?x6786 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_127) l_0_4_92) ?x8686) ?x8692) ?x8694) 0.0))))))))
(assert
 (let ((?x7416 (* l_0_4_96 l_0_4_96)))
 (let ((?x7414 (* l_0_4_95 l_0_4_95)))
 (let ((?x7412 (* l_0_4_94 l_0_4_94)))
 (let ((?x7407 (* l_0_4_141 l_0_4_141)))
 (let ((?x8709 (- (+ (+ (* l_0_4_139 l_0_4_139) (* l_0_4_140 l_0_4_140)) ?x7407) ?x7412)))
 (= (- (- ?x8709 ?x7414) ?x7416) 0.0)))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7662 (* ?x3955 l_0_4_148)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7660 (* ?x3952 l_0_4_147)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7657 (* ?x3949 l_0_4_146)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x7652 (* ?x4100 l_0_4_96)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x7650 (* ?x4088 l_0_4_95)))
 (let ((?x8733 (+ (+ (- (- (* (* (- 2.0) l_0_4_101) l_0_4_94) ?x7650) ?x7652) ?x7657) ?x7660)))
 (= (+ ?x8733 ?x7662) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x3956 (* ?x3955 l_0_4_153)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x3953 (* ?x3952 l_0_4_152)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x3950 (* ?x3949 l_0_4_151)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x3947 (* ?x3764 l_0_4_96)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3945 (* ?x3761 l_0_4_95)))
 (let ((?x3954 (+ (+ (- (- (* (* (- 2.0) l_0_4_106) l_0_4_94) ?x3945) ?x3947) ?x3950) ?x3953)))
 (let ((?x3957 (+ ?x3954 ?x3956)))
 (= ?x3957 0.0))))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7774 (* ?x3955 l_0_4_159)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7772 (* ?x3952 l_0_4_158)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7769 (* ?x3949 l_0_4_157)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x7765 (* ?x6187 l_0_4_96)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x7763 (* ?x6184 l_0_4_95)))
 (let ((?x8754 (+ (+ (- (- (* (* (- 2.0) l_0_4_112) l_0_4_94) ?x7763) ?x7765) ?x7769) ?x7772)))
 (= (+ ?x8754 ?x7774) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7845 (* ?x3955 l_0_4_166)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7843 (* ?x3952 l_0_4_165)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7840 (* ?x3949 l_0_4_164)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x7837 (* ?x6692 l_0_4_96)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x7835 (* ?x6689 l_0_4_95)))
 (let ((?x8772 (+ (+ (- (- (* (* (- 2.0) l_0_4_119) l_0_4_94) ?x7835) ?x7837) ?x7840) ?x7843)))
 (= (+ ?x8772 ?x7845) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7915 (* ?x3955 l_0_4_174)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7913 (* ?x3952 l_0_4_173)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7910 (* ?x3949 l_0_4_172)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x7907 (* ?x6789 l_0_4_96)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x7905 (* ?x6786 l_0_4_95)))
 (let ((?x8790 (+ (+ (- (- (* (* (- 2.0) l_0_4_127) l_0_4_94) ?x7905) ?x7907) ?x7910) ?x7913)))
 (= (+ ?x8790 ?x7915) 0.0)))))))))))))
(assert
 (let ((?x8822 (* l_0_4_150 l_0_4_150)))
 (let ((?x8820 (* l_0_4_149 l_0_4_149)))
 (let ((?x8818 (* l_0_4_148 l_0_4_148)))
 (let ((?x8816 (* l_0_4_147 l_0_4_147)))
 (let ((?x8814 (* l_0_4_146 l_0_4_146)))
 (let ((?x8812 (* l_0_4_105 l_0_4_105)))
 (let ((?x8810 (* l_0_4_104 l_0_4_104)))
 (let ((?x8808 (* l_0_4_103 l_0_4_103)))
 (let ((?x8809 (- (- (* (- l_0_4_101) l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x8808)))
 (let ((?x8823 (+ (+ (+ (+ (+ (- (- ?x8809 ?x8810) ?x8812) ?x8814) ?x8816) ?x8818) ?x8820) ?x8822)))
 (= ?x8823 0.0))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x4128 (* ?x4127 l_0_4_155)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x4125 (* ?x4124 l_0_4_154)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x4122 (* ?x4121 l_0_4_153)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x4119 (* ?x4118 l_0_4_152)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x4116 (* ?x4115 l_0_4_151)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x4107 (* ?x4106 l_0_4_110)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x4104 (* ?x4103 l_0_4_109)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x4101 (* ?x4100 l_0_4_108)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x4098 (* ?x4088 l_0_4_107)))
 (let ((?x4108 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_106) ?x4098) ?x4101) ?x4104) ?x4107)))
 (= (+ (+ (+ (+ (+ ?x4108 ?x4116) ?x4119) ?x4122) ?x4125) ?x4128) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8877 (* ?x4127 l_0_4_161)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8875 (* ?x4124 l_0_4_160)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8873 (* ?x4121 l_0_4_159)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8871 (* ?x4118 l_0_4_158)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8869 (* ?x4115 l_0_4_157)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8867 (* ?x4106 l_0_4_116)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8865 (* ?x4103 l_0_4_115)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8863 (* ?x4100 l_0_4_114)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8861 (* ?x4088 l_0_4_113)))
 (let ((?x8868 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_112) ?x8861) ?x8863) ?x8865) ?x8867)))
 (= (+ (+ (+ (+ (+ ?x8868 ?x8869) ?x8871) ?x8873) ?x8875) ?x8877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8936 (* ?x4127 l_0_4_168)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8934 (* ?x4124 l_0_4_167)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8932 (* ?x4121 l_0_4_166)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8930 (* ?x4118 l_0_4_165)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8928 (* ?x4115 l_0_4_164)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8926 (* ?x4106 l_0_4_123)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8916 (* ?x4103 l_0_4_122)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8913 (* ?x4100 l_0_4_121)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8909 (* ?x4088 l_0_4_120)))
 (let ((?x8927 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_119) ?x8909) ?x8913) ?x8916) ?x8926)))
 (= (+ (+ (+ (+ (+ ?x8927 ?x8928) ?x8930) ?x8932) ?x8934) ?x8936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8995 (* ?x4127 l_0_4_176)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8993 (* ?x4124 l_0_4_175)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8991 (* ?x4121 l_0_4_174)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8989 (* ?x4118 l_0_4_173)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8987 (* ?x4115 l_0_4_172)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8985 (* ?x4106 l_0_4_131)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8975 (* ?x4103 l_0_4_130)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8972 (* ?x4100 l_0_4_129)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8968 (* ?x4088 l_0_4_128)))
 (let ((?x8986 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_127) ?x8968) ?x8972) ?x8975) ?x8985)))
 (= (+ (+ (+ (+ (+ ?x8986 ?x8987) ?x8989) ?x8991) ?x8993) ?x8995) 0.0)))))))))))))))))))))
(assert
 (let ((?x4212 (* l_0_4_156 l_0_4_156)))
 (let ((?x4210 (* l_0_4_155 l_0_4_155)))
 (let ((?x4208 (* l_0_4_154 l_0_4_154)))
 (let ((?x4206 (* l_0_4_153 l_0_4_153)))
 (let ((?x4204 (* l_0_4_152 l_0_4_152)))
 (let ((?x4202 (* l_0_4_151 l_0_4_151)))
 (let ((?x4200 (* l_0_4_111 l_0_4_111)))
 (let ((?x4198 (* l_0_4_110 l_0_4_110)))
 (let ((?x4186 (* l_0_4_109 l_0_4_109)))
 (let ((?x4182 (* l_0_4_108 l_0_4_108)))
 (let ((?x4184 (- (- (* (- l_0_4_106) l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x4182)))
 (let ((?x4209 (+ (+ (+ (+ (- (- (- ?x4184 ?x4186) ?x4198) ?x4200) ?x4202) ?x4204) ?x4206) ?x4208)))
 (let ((?x4213 (+ (+ ?x4209 ?x4210) ?x4212)))
 (= ?x4213 0.0)))))))))))))))
(assert
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4287 (* ?x3791 l_0_4_162)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4285 (* ?x3788 l_0_4_161)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4283 (* ?x3785 l_0_4_160)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4281 (* ?x3782 l_0_4_159)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4279 (* ?x3779 l_0_4_158)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4277 (* ?x3776 l_0_4_157)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4275 (* ?x3773 l_0_4_117)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4273 (* ?x3770 l_0_4_116)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4271 (* ?x3767 l_0_4_115)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4269 (* ?x3764 l_0_4_114)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4257 (* ?x3761 l_0_4_113)))
 (let ((?x4274 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_112) ?x4257) ?x4269) ?x4271) ?x4273)))
 (let ((?x4288 (+ (+ (+ (+ (+ (+ (- ?x4274 ?x4275) ?x4277) ?x4279) ?x4281) ?x4283) ?x4285) ?x4287)))
 (= ?x4288 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4445 (* ?x3791 l_0_4_177)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4443 (* ?x3788 l_0_4_176)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4441 (* ?x3785 l_0_4_175)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4439 (* ?x3782 l_0_4_174)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4437 (* ?x3779 l_0_4_173)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4435 (* ?x3776 l_0_4_172)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4433 (* ?x3773 l_0_4_132)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4431 (* ?x3770 l_0_4_131)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4429 (* ?x3767 l_0_4_130)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4427 (* ?x3764 l_0_4_129)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4421 (* ?x3761 l_0_4_128)))
 (let ((?x4432 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_127) ?x4421) ?x4427) ?x4429) ?x4431)))
 (let ((?x4446 (+ (+ (+ (+ (+ (+ (- ?x4432 ?x4433) ?x4435) ?x4437) ?x4439) ?x4441) ?x4443) ?x4445)))
 (= ?x4446 0.0))))))))))))))))))))))))))
(assert
 (let ((?x9072 (* l_0_4_163 l_0_4_163)))
 (let ((?x9070 (* l_0_4_162 l_0_4_162)))
 (let ((?x9068 (* l_0_4_161 l_0_4_161)))
 (let ((?x9066 (* l_0_4_160 l_0_4_160)))
 (let ((?x9064 (* l_0_4_159 l_0_4_159)))
 (let ((?x9062 (* l_0_4_158 l_0_4_158)))
 (let ((?x9060 (* l_0_4_157 l_0_4_157)))
 (let ((?x9058 (* l_0_4_118 l_0_4_118)))
 (let ((?x9056 (* l_0_4_117 l_0_4_117)))
 (let ((?x9054 (* l_0_4_116 l_0_4_116)))
 (let ((?x9052 (* l_0_4_115 l_0_4_115)))
 (let ((?x9050 (* l_0_4_114 l_0_4_114)))
 (let ((?x9051 (- (- (* (- l_0_4_112) l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x9050)))
 (let ((?x9065 (+ (+ (+ (- (- (- (- ?x9051 ?x9052) ?x9054) ?x9056) ?x9058) ?x9060) ?x9062) ?x9064)))
 (= (+ (+ (+ (+ ?x9065 ?x9066) ?x9068) ?x9070) ?x9072) 0.0))))))))))))))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x9130 (* ?x8437 l_0_4_170)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x9128 (* ?x8434 l_0_4_169)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x9126 (* ?x8431 l_0_4_168)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x9124 (* ?x8428 l_0_4_167)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x9122 (* ?x8425 l_0_4_166)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x9120 (* ?x8422 l_0_4_165)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x9118 (* ?x8419 l_0_4_164)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x9116 (* ?x8414 l_0_4_125)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x9114 (* ?x8411 l_0_4_124)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x9112 (* ?x8408 l_0_4_123)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x9110 (* ?x8405 l_0_4_122)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x9108 (* ?x6187 l_0_4_121)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x9106 (* ?x6184 l_0_4_120)))
 (let ((?x9113 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_119) ?x9106) ?x9108) ?x9110) ?x9112)))
 (let ((?x9127 (+ (+ (+ (+ (+ (- (- ?x9113 ?x9114) ?x9116) ?x9118) ?x9120) ?x9122) ?x9124) ?x9126)))
 (= (+ (+ ?x9127 ?x9128) ?x9130) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x8438 (* ?x8437 l_0_4_178)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x8435 (* ?x8434 l_0_4_177)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x8432 (* ?x8431 l_0_4_176)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x8429 (* ?x8428 l_0_4_175)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x8426 (* ?x8425 l_0_4_174)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x8423 (* ?x8422 l_0_4_173)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x8420 (* ?x8419 l_0_4_172)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x8415 (* ?x8414 l_0_4_133)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x8412 (* ?x8411 l_0_4_132)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x8409 (* ?x8408 l_0_4_131)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x8406 (* ?x8405 l_0_4_130)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x8403 (* ?x6187 l_0_4_129)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8401 (* ?x6184 l_0_4_128)))
 (let ((?x8634 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_127) ?x8401) ?x8403) ?x8406) ?x8409)))
 (let ((?x8636 (- (- ?x8634 ?x8412) ?x8415)))
 (let ((?x9184 (+ (+ (+ (+ (+ (+ (+ ?x8636 ?x8420) ?x8423) ?x8426) ?x8429) ?x8432) ?x8435) ?x8438)))
 (= ?x9184 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x9228 (* l_0_4_171 l_0_4_171)))
 (let ((?x9226 (* l_0_4_170 l_0_4_170)))
 (let ((?x9224 (* l_0_4_169 l_0_4_169)))
 (let ((?x9222 (* l_0_4_168 l_0_4_168)))
 (let ((?x9220 (* l_0_4_167 l_0_4_167)))
 (let ((?x9218 (* l_0_4_166 l_0_4_166)))
 (let ((?x9216 (* l_0_4_165 l_0_4_165)))
 (let ((?x9214 (* l_0_4_164 l_0_4_164)))
 (let ((?x9212 (* l_0_4_126 l_0_4_126)))
 (let ((?x9210 (* l_0_4_125 l_0_4_125)))
 (let ((?x9208 (* l_0_4_124 l_0_4_124)))
 (let ((?x9206 (* l_0_4_123 l_0_4_123)))
 (let ((?x9204 (* l_0_4_122 l_0_4_122)))
 (let ((?x9202 (* l_0_4_121 l_0_4_121)))
 (let ((?x9203 (- (- (* (- l_0_4_119) l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9202)))
 (let ((?x9217 (+ (+ (- (- (- (- (- ?x9203 ?x9204) ?x9206) ?x9208) ?x9210) ?x9212) ?x9214) ?x9216)))
 (= (+ (+ (+ (+ (+ (+ ?x9217 ?x9218) ?x9220) ?x9222) ?x9224) ?x9226) ?x9228) 0.0))))))))))))))))))
(assert
 (let ((?x9307 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9304 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9301 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9298 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9295 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9292 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9289 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9286 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9283 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9280 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9277 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9274 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9271 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x9268 (* ?x6692 l_0_4_129)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x9266 (* ?x6689 l_0_4_128)))
 (let ((?x9275 (- (- (- (- (* (* (- 2.0) l_0_4_119) l_0_4_127) ?x9266) ?x9268) ?x9271) ?x9274)))
 (let ((?x9296 (+ (+ (+ (+ (- (- (- ?x9275 ?x9277) ?x9280) ?x9283) ?x9286) ?x9289) ?x9292) ?x9295)))
 (= (+ (+ (+ (+ ?x9296 ?x9298) ?x9301) ?x9304) ?x9307) 0.0)))))))))))))))))))))
(assert
 (let ((?x9407 (* l_0_4_180 l_0_4_180)))
 (let ((?x9405 (* l_0_4_179 l_0_4_179)))
 (let ((?x9403 (* l_0_4_178 l_0_4_178)))
 (let ((?x9401 (* l_0_4_177 l_0_4_177)))
 (let ((?x9399 (* l_0_4_176 l_0_4_176)))
 (let ((?x9397 (* l_0_4_175 l_0_4_175)))
 (let ((?x9395 (* l_0_4_174 l_0_4_174)))
 (let ((?x9393 (* l_0_4_173 l_0_4_173)))
 (let ((?x9391 (* l_0_4_172 l_0_4_172)))
 (let ((?x9389 (* l_0_4_135 l_0_4_135)))
 (let ((?x9387 (* l_0_4_134 l_0_4_134)))
 (let ((?x9385 (* l_0_4_133 l_0_4_133)))
 (let ((?x9383 (* l_0_4_132 l_0_4_132)))
 (let ((?x9370 (* l_0_4_131 l_0_4_131)))
 (let ((?x9367 (* l_0_4_130 l_0_4_130)))
 (let ((?x9363 (* l_0_4_129 l_0_4_129)))
 (let ((?x9365 (- (- (* (- l_0_4_127) l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9363)))
 (let ((?x9392 (+ (- (- (- (- (- (- ?x9365 ?x9367) ?x9370) ?x9383) ?x9385) ?x9387) ?x9389) ?x9391)))
 (let ((?x9406 (+ (+ (+ (+ (+ (+ (+ ?x9392 ?x9393) ?x9395) ?x9397) ?x9399) ?x9401) ?x9403) ?x9405)))
 (= (+ ?x9406 ?x9407) 0.0)))))))))))))))))))))
(assert
 (let ((?x8321 (* l_0_4_91 l_0_4_91)))
 (let ((?x9451 (+ (+ (* l_0_4_136 l_0_4_136) (* (* 2.0 l_0_4_182) l_0_4_209)) (* (* 2.0 l_0_4_183) l_0_4_210))))
 (let ((?x9455 (- (- ?x9451 (* (* 2.0 l_0_4_227) l_0_4_254)) (* (* 2.0 l_0_4_228) l_0_4_255))))
 (= (- ?x9455 ?x8321) 0.0)))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x8386 (* ?x6243 l_0_4_92)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_137) ?x8386) 0.0))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x6244 (* ?x6243 l_0_4_97)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x6234 (* ?x3623 l_0_4_142)))
 (= (- ?x6234 ?x6244) 0.0))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8643 (* ?x3906 l_0_4_165)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8641 (* ?x3903 l_0_4_164)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8417 (* ?x3623 l_0_4_146)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x8639 (* ?x6689 l_0_4_93)))
 (let ((?x6686 (* 2.0 l_0_4_119)))
 (let ((?x8637 (* ?x6686 l_0_4_92)))
 (let ((?x4085 (* (- 2.0) l_0_4_101)))
 (let ((?x8398 (* ?x4085 l_0_4_91)))
 (= (- (- (+ (+ (+ ?x8398 ?x8637) ?x8639) ?x8417) ?x8641) ?x8643) 0.0))))))))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8521 (* ?x3623 l_0_4_157)))
 (= (+ (* (* (- 2.0) l_0_4_112) l_0_4_91) ?x8521) 0.0))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8528 (* ?x3623 l_0_4_164)))
 (= (+ (* (* (- 2.0) l_0_4_119) l_0_4_91) ?x8528) 0.0))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8539 (* ?x3623 l_0_4_172)))
 (= (+ (* (* (- 2.0) l_0_4_127) l_0_4_91) ?x8539) 0.0))))
(assert
 (let ((?x8557 (* l_0_4_93 l_0_4_93)))
 (let ((?x8555 (* l_0_4_92 l_0_4_92)))
 (let ((?x8549 (* l_0_4_138 l_0_4_138)))
 (let ((?x8547 (* l_0_4_137 l_0_4_137)))
 (let ((?x8550 (+ ?x8547 ?x8549)))
 (= (- (- ?x8550 ?x8555) ?x8557) 0.0)))))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x7288 (* ?x6368 l_0_4_95)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x7286 (* ?x6365 l_0_4_94)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x7282 (* ?x3906 l_0_4_140)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x7280 (* ?x3903 l_0_4_139)))
 (= (- (- (+ ?x7280 ?x7282) ?x7286) ?x7288) 0.0))))))))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x6369 (* ?x6368 l_0_4_98)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x6366 (* ?x6365 l_0_4_97)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x6359 (* ?x3906 l_0_4_143)))
 (let ((?x6360 (+ (* (* 2.0 l_0_4_137) l_0_4_142) ?x6359)))
 (= (- (- ?x6360 ?x6366) ?x6369) 0.0)))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8586 (* ?x3906 l_0_4_147)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8584 (* ?x3903 l_0_4_146)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8582 (* ?x4088 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_101) l_0_4_92) ?x8582) ?x8584) ?x8586) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8612 (* ?x3906 l_0_4_158)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8610 (* ?x3903 l_0_4_157)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8608 (* ?x6184 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_112) l_0_4_92) ?x8608) ?x8610) ?x8612) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8643 (* ?x3906 l_0_4_165)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8641 (* ?x3903 l_0_4_164)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x8639 (* ?x6689 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_119) l_0_4_92) ?x8639) ?x8641) ?x8643) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8694 (* ?x3906 l_0_4_173)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8692 (* ?x3903 l_0_4_172)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x8686 (* ?x6786 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_127) l_0_4_92) ?x8686) ?x8692) ?x8694) 0.0))))))))
(assert
 (let ((?x7416 (* l_0_4_96 l_0_4_96)))
 (let ((?x7414 (* l_0_4_95 l_0_4_95)))
 (let ((?x7412 (* l_0_4_94 l_0_4_94)))
 (let ((?x7407 (* l_0_4_141 l_0_4_141)))
 (let ((?x8709 (- (+ (+ (* l_0_4_139 l_0_4_139) (* l_0_4_140 l_0_4_140)) ?x7407) ?x7412)))
 (= (- (- ?x8709 ?x7414) ?x7416) 0.0)))))))
(assert
 (let ((?x6419 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x6416 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x6413 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x6403 (* ?x3955 l_0_4_144)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x6401 (* ?x3952 l_0_4_143)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x6400 (* ?x3949 l_0_4_142)))
 (let ((?x6404 (+ (+ ?x6400 ?x6401) ?x6403)))
 (= (- (- (- ?x6404 ?x6413) ?x6416) ?x6419) 0.0))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7662 (* ?x3955 l_0_4_148)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7660 (* ?x3952 l_0_4_147)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7657 (* ?x3949 l_0_4_146)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x7652 (* ?x4100 l_0_4_96)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x7650 (* ?x4088 l_0_4_95)))
 (let ((?x8733 (+ (+ (- (- (* (* (- 2.0) l_0_4_101) l_0_4_94) ?x7650) ?x7652) ?x7657) ?x7660)))
 (= (+ ?x8733 ?x7662) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7774 (* ?x3955 l_0_4_159)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7772 (* ?x3952 l_0_4_158)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7769 (* ?x3949 l_0_4_157)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x7765 (* ?x6187 l_0_4_96)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x7763 (* ?x6184 l_0_4_95)))
 (let ((?x8754 (+ (+ (- (- (* (* (- 2.0) l_0_4_112) l_0_4_94) ?x7763) ?x7765) ?x7769) ?x7772)))
 (= (+ ?x8754 ?x7774) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7845 (* ?x3955 l_0_4_166)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7843 (* ?x3952 l_0_4_165)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7840 (* ?x3949 l_0_4_164)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x7837 (* ?x6692 l_0_4_96)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x7835 (* ?x6689 l_0_4_95)))
 (let ((?x8772 (+ (+ (- (- (* (* (- 2.0) l_0_4_119) l_0_4_94) ?x7835) ?x7837) ?x7840) ?x7843)))
 (= (+ ?x8772 ?x7845) 0.0)))))))))))))
(assert
 (let ((?x3955 (* 2.0 l_0_4_141)))
 (let ((?x7915 (* ?x3955 l_0_4_174)))
 (let ((?x3952 (* 2.0 l_0_4_140)))
 (let ((?x7913 (* ?x3952 l_0_4_173)))
 (let ((?x3949 (* 2.0 l_0_4_139)))
 (let ((?x7910 (* ?x3949 l_0_4_172)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x7907 (* ?x6789 l_0_4_96)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x7905 (* ?x6786 l_0_4_95)))
 (let ((?x8790 (+ (+ (- (- (* (* (- 2.0) l_0_4_127) l_0_4_94) ?x7905) ?x7907) ?x7910) ?x7913)))
 (= (+ ?x8790 ?x7915) 0.0)))))))))))))
(assert
 (let ((?x6500 (* l_0_4_99 l_0_4_99)))
 (let ((?x6498 (* l_0_4_98 l_0_4_98)))
 (let ((?x6496 (* l_0_4_97 l_0_4_97)))
 (let ((?x6487 (* l_0_4_145 l_0_4_145)))
 (let ((?x6485 (* l_0_4_144 l_0_4_144)))
 (let ((?x6483 (* l_0_4_143 l_0_4_143)))
 (let ((?x9531 (+ (+ (* (- l_0_4_100) l_0_4_100) (* l_0_4_142 l_0_4_142)) ?x6483)))
 (= (- (- (- (+ (+ ?x9531 ?x6485) ?x6487) ?x6496) ?x6498) ?x6500) 0.0)))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6551 (* ?x4031 l_0_4_149)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6549 (* ?x4028 l_0_4_148)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6547 (* ?x4025 l_0_4_147)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6545 (* ?x4022 l_0_4_146)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x6538 (* ?x4100 l_0_4_99)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x6536 (* ?x4088 l_0_4_98)))
 (let ((?x6533 (* 2.0 l_0_4_101)))
 (let ((?x6534 (* ?x6533 l_0_4_97)))
 (let ((?x6539 (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_104) ?x6534) ?x6536) ?x6538)))
 (= (+ (+ (+ (+ ?x6539 ?x6545) ?x6547) ?x6549) ?x6551) 0.0)))))))))))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6701 (* ?x4031 l_0_4_167)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6699 (* ?x4028 l_0_4_166)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6697 (* ?x4025 l_0_4_165)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6695 (* ?x4022 l_0_4_164)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x6693 (* ?x6692 l_0_4_99)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x6690 (* ?x6689 l_0_4_98)))
 (let ((?x6686 (* 2.0 l_0_4_119)))
 (let ((?x6687 (* ?x6686 l_0_4_97)))
 (let ((?x6696 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_122) ?x6687) ?x6690) ?x6693) ?x6695)))
 (let ((?x6702 (+ (+ (+ ?x6696 ?x6697) ?x6699) ?x6701)))
 (= ?x6702 0.0))))))))))))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6798 (* ?x4031 l_0_4_175)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6796 (* ?x4028 l_0_4_174)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6794 (* ?x4025 l_0_4_173)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6792 (* ?x4022 l_0_4_172)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x6790 (* ?x6789 l_0_4_99)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x6787 (* ?x6786 l_0_4_98)))
 (let ((?x6783 (* 2.0 l_0_4_127)))
 (let ((?x6784 (* ?x6783 l_0_4_97)))
 (let ((?x6793 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_130) ?x6784) ?x6787) ?x6790) ?x6792)))
 (let ((?x6799 (+ (+ (+ ?x6793 ?x6794) ?x6796) ?x6798)))
 (= ?x6799 0.0))))))))))))))))))
(assert
 (let ((?x8822 (* l_0_4_150 l_0_4_150)))
 (let ((?x8820 (* l_0_4_149 l_0_4_149)))
 (let ((?x8818 (* l_0_4_148 l_0_4_148)))
 (let ((?x8816 (* l_0_4_147 l_0_4_147)))
 (let ((?x8814 (* l_0_4_146 l_0_4_146)))
 (let ((?x8812 (* l_0_4_105 l_0_4_105)))
 (let ((?x8810 (* l_0_4_104 l_0_4_104)))
 (let ((?x8808 (* l_0_4_103 l_0_4_103)))
 (let ((?x8809 (- (- (* (- l_0_4_101) l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x8808)))
 (let ((?x8823 (+ (+ (+ (+ (+ (- (- ?x8809 ?x8810) ?x8812) ?x8814) ?x8816) ?x8818) ?x8820) ?x8822)))
 (= ?x8823 0.0))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8877 (* ?x4127 l_0_4_161)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8875 (* ?x4124 l_0_4_160)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8873 (* ?x4121 l_0_4_159)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8871 (* ?x4118 l_0_4_158)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8869 (* ?x4115 l_0_4_157)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8867 (* ?x4106 l_0_4_116)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8865 (* ?x4103 l_0_4_115)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8863 (* ?x4100 l_0_4_114)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8861 (* ?x4088 l_0_4_113)))
 (let ((?x8868 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_112) ?x8861) ?x8863) ?x8865) ?x8867)))
 (= (+ (+ (+ (+ (+ ?x8868 ?x8869) ?x8871) ?x8873) ?x8875) ?x8877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8936 (* ?x4127 l_0_4_168)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8934 (* ?x4124 l_0_4_167)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8932 (* ?x4121 l_0_4_166)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8930 (* ?x4118 l_0_4_165)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8928 (* ?x4115 l_0_4_164)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8926 (* ?x4106 l_0_4_123)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8916 (* ?x4103 l_0_4_122)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8913 (* ?x4100 l_0_4_121)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8909 (* ?x4088 l_0_4_120)))
 (let ((?x8927 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_119) ?x8909) ?x8913) ?x8916) ?x8926)))
 (= (+ (+ (+ (+ (+ ?x8927 ?x8928) ?x8930) ?x8932) ?x8934) ?x8936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8995 (* ?x4127 l_0_4_176)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8993 (* ?x4124 l_0_4_175)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8991 (* ?x4121 l_0_4_174)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8989 (* ?x4118 l_0_4_173)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8987 (* ?x4115 l_0_4_172)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8985 (* ?x4106 l_0_4_131)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8975 (* ?x4103 l_0_4_130)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8972 (* ?x4100 l_0_4_129)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8968 (* ?x4088 l_0_4_128)))
 (let ((?x8986 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_127) ?x8968) ?x8972) ?x8975) ?x8985)))
 (= (+ (+ (+ (+ (+ ?x8986 ?x8987) ?x8989) ?x8991) ?x8993) ?x8995) 0.0)))))))))))))))))))))
(assert
 (let ((?x9072 (* l_0_4_163 l_0_4_163)))
 (let ((?x9070 (* l_0_4_162 l_0_4_162)))
 (let ((?x9068 (* l_0_4_161 l_0_4_161)))
 (let ((?x9066 (* l_0_4_160 l_0_4_160)))
 (let ((?x9064 (* l_0_4_159 l_0_4_159)))
 (let ((?x9062 (* l_0_4_158 l_0_4_158)))
 (let ((?x9060 (* l_0_4_157 l_0_4_157)))
 (let ((?x9058 (* l_0_4_118 l_0_4_118)))
 (let ((?x9056 (* l_0_4_117 l_0_4_117)))
 (let ((?x9054 (* l_0_4_116 l_0_4_116)))
 (let ((?x9052 (* l_0_4_115 l_0_4_115)))
 (let ((?x9050 (* l_0_4_114 l_0_4_114)))
 (let ((?x9051 (- (- (* (- l_0_4_112) l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x9050)))
 (let ((?x9065 (+ (+ (+ (- (- (- (- ?x9051 ?x9052) ?x9054) ?x9056) ?x9058) ?x9060) ?x9062) ?x9064)))
 (= (+ (+ (+ (+ ?x9065 ?x9066) ?x9068) ?x9070) ?x9072) 0.0))))))))))))))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x9130 (* ?x8437 l_0_4_170)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x9128 (* ?x8434 l_0_4_169)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x9126 (* ?x8431 l_0_4_168)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x9124 (* ?x8428 l_0_4_167)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x9122 (* ?x8425 l_0_4_166)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x9120 (* ?x8422 l_0_4_165)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x9118 (* ?x8419 l_0_4_164)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x9116 (* ?x8414 l_0_4_125)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x9114 (* ?x8411 l_0_4_124)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x9112 (* ?x8408 l_0_4_123)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x9110 (* ?x8405 l_0_4_122)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x9108 (* ?x6187 l_0_4_121)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x9106 (* ?x6184 l_0_4_120)))
 (let ((?x9113 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_119) ?x9106) ?x9108) ?x9110) ?x9112)))
 (let ((?x9127 (+ (+ (+ (+ (+ (- (- ?x9113 ?x9114) ?x9116) ?x9118) ?x9120) ?x9122) ?x9124) ?x9126)))
 (= (+ (+ ?x9127 ?x9128) ?x9130) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x9228 (* l_0_4_171 l_0_4_171)))
 (let ((?x9226 (* l_0_4_170 l_0_4_170)))
 (let ((?x9224 (* l_0_4_169 l_0_4_169)))
 (let ((?x9222 (* l_0_4_168 l_0_4_168)))
 (let ((?x9220 (* l_0_4_167 l_0_4_167)))
 (let ((?x9218 (* l_0_4_166 l_0_4_166)))
 (let ((?x9216 (* l_0_4_165 l_0_4_165)))
 (let ((?x9214 (* l_0_4_164 l_0_4_164)))
 (let ((?x9212 (* l_0_4_126 l_0_4_126)))
 (let ((?x9210 (* l_0_4_125 l_0_4_125)))
 (let ((?x9208 (* l_0_4_124 l_0_4_124)))
 (let ((?x9206 (* l_0_4_123 l_0_4_123)))
 (let ((?x9204 (* l_0_4_122 l_0_4_122)))
 (let ((?x9202 (* l_0_4_121 l_0_4_121)))
 (let ((?x9203 (- (- (* (- l_0_4_119) l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9202)))
 (let ((?x9217 (+ (+ (- (- (- (- (- ?x9203 ?x9204) ?x9206) ?x9208) ?x9210) ?x9212) ?x9214) ?x9216)))
 (= (+ (+ (+ (+ (+ (+ ?x9217 ?x9218) ?x9220) ?x9222) ?x9224) ?x9226) ?x9228) 0.0))))))))))))))))))
(assert
 (let ((?x9307 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9304 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9301 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9298 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9295 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9292 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9289 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9286 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9283 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9280 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9277 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9274 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9271 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x9268 (* ?x6692 l_0_4_129)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x9266 (* ?x6689 l_0_4_128)))
 (let ((?x9275 (- (- (- (- (* (* (- 2.0) l_0_4_119) l_0_4_127) ?x9266) ?x9268) ?x9271) ?x9274)))
 (let ((?x9296 (+ (+ (+ (+ (- (- (- ?x9275 ?x9277) ?x9280) ?x9283) ?x9286) ?x9289) ?x9292) ?x9295)))
 (= (+ (+ (+ (+ ?x9296 ?x9298) ?x9301) ?x9304) ?x9307) 0.0)))))))))))))))))))))
(assert
 (let ((?x9407 (* l_0_4_180 l_0_4_180)))
 (let ((?x9405 (* l_0_4_179 l_0_4_179)))
 (let ((?x9403 (* l_0_4_178 l_0_4_178)))
 (let ((?x9401 (* l_0_4_177 l_0_4_177)))
 (let ((?x9399 (* l_0_4_176 l_0_4_176)))
 (let ((?x9397 (* l_0_4_175 l_0_4_175)))
 (let ((?x9395 (* l_0_4_174 l_0_4_174)))
 (let ((?x9393 (* l_0_4_173 l_0_4_173)))
 (let ((?x9391 (* l_0_4_172 l_0_4_172)))
 (let ((?x9389 (* l_0_4_135 l_0_4_135)))
 (let ((?x9387 (* l_0_4_134 l_0_4_134)))
 (let ((?x9385 (* l_0_4_133 l_0_4_133)))
 (let ((?x9383 (* l_0_4_132 l_0_4_132)))
 (let ((?x9370 (* l_0_4_131 l_0_4_131)))
 (let ((?x9367 (* l_0_4_130 l_0_4_130)))
 (let ((?x9363 (* l_0_4_129 l_0_4_129)))
 (let ((?x9365 (- (- (* (- l_0_4_127) l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9363)))
 (let ((?x9392 (+ (- (- (- (- (- (- ?x9365 ?x9367) ?x9370) ?x9383) ?x9385) ?x9387) ?x9389) ?x9391)))
 (let ((?x9406 (+ (+ (+ (+ (+ (+ (+ ?x9392 ?x9393) ?x9395) ?x9397) ?x9399) ?x9401) ?x9403) ?x9405)))
 (= (+ ?x9406 ?x9407) 0.0)))))))))))))))))))))
(assert
 (let ((?x8321 (* l_0_4_91 l_0_4_91)))
 (let ((?x9564 (+ (* (- l_0_4_136) l_0_4_136) (* (* 2.0 l_0_4_181) l_0_4_191))))
 (= (+ (- ?x9564 (* (* 2.0 l_0_4_226) l_0_4_236)) ?x8321) 0.0))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x8386 (* ?x6243 l_0_4_92)))
 (let ((?x9586 (+ (* (* (- 2.0) l_0_4_136) l_0_4_137) (* (* 2.0 l_0_4_182) l_0_4_191))))
 (let ((?x9590 (- (+ ?x9586 (* (* 2.0 l_0_4_183) l_0_4_192)) (* (* 2.0 l_0_4_227) l_0_4_236))))
 (= (+ (- ?x9590 (* (* 2.0 l_0_4_228) l_0_4_237)) ?x8386) 0.0))))))
(assert
 (let ((?x6243 (* 2.0 l_0_4_91)))
 (let ((?x6244 (* ?x6243 l_0_4_97)))
 (let ((?x9619 (+ (* (* (- 2.0) l_0_4_136) l_0_4_142) (* (* 2.0 l_0_4_187) l_0_4_191))))
 (let ((?x9623 (+ (+ ?x9619 (* (* 2.0 l_0_4_188) l_0_4_192)) (* (* 2.0 l_0_4_189) l_0_4_193))))
 (let ((?x9627 (- (+ ?x9623 (* (* 2.0 l_0_4_190) l_0_4_194)) (* (* 2.0 l_0_4_232) l_0_4_236))))
 (let ((?x9631 (- (- ?x9627 (* (* 2.0 l_0_4_233) l_0_4_237)) (* (* 2.0 l_0_4_234) l_0_4_238))))
 (= (+ (- ?x9631 (* (* 2.0 l_0_4_235) l_0_4_239)) ?x6244) 0.0))))))))
(assert
 (let ((?x9700 (* l_0_4_240 l_0_4_240)))
 (let ((?x9698 (* l_0_4_239 l_0_4_239)))
 (let ((?x9696 (* l_0_4_238 l_0_4_238)))
 (let ((?x9694 (* l_0_4_237 l_0_4_237)))
 (let ((?x9692 (* l_0_4_236 l_0_4_236)))
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8417 (* ?x3623 l_0_4_146)))
 (let ((?x9679 (+ (- (* (* 2.0 l_0_4_101) l_0_4_91) ?x8417) (* 1.0 (* l_0_4_191 l_0_4_191)))))
 (let ((?x9685 (+ (+ ?x9679 (* 1.0 (* l_0_4_192 l_0_4_192))) (* 1.0 (* l_0_4_193 l_0_4_193)))))
 (let ((?x9691 (+ (+ ?x9685 (* 1.0 (* l_0_4_194 l_0_4_194))) (* 1.0 (* l_0_4_195 l_0_4_195)))))
 (= (- (- (- (- (- ?x9691 ?x9692) ?x9694) ?x9696) ?x9698) ?x9700) 0.0))))))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x3624 (* ?x3623 l_0_4_151)))
 (let ((?x3620 (* 2.0 l_0_4_106)))
 (let ((?x3621 (* ?x3620 l_0_4_91)))
 (let ((?x9729 (+ (+ (- ?x3621 ?x3624) (* (* 2.0 l_0_4_191) l_0_4_196)) (* (* 2.0 l_0_4_192) l_0_4_197))))
 (let ((?x9735 (+ (+ ?x9729 (* (* 2.0 l_0_4_193) l_0_4_198)) (* (* 2.0 l_0_4_194) l_0_4_199))))
 (let ((?x9741 (- (+ ?x9735 (* (* 2.0 l_0_4_195) l_0_4_200)) (* (* 2.0 l_0_4_236) l_0_4_241))))
 (let ((?x9747 (- (- ?x9741 (* (* 2.0 l_0_4_237) l_0_4_242)) (* (* 2.0 l_0_4_238) l_0_4_243))))
 (let ((?x9753 (- (- ?x9747 (* (* 2.0 l_0_4_239) l_0_4_244)) (* (* 2.0 l_0_4_240) l_0_4_245))))
 (= ?x9753 0.0)))))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8521 (* ?x3623 l_0_4_157)))
 (let ((?x9802 (+ (- (* (* 2.0 l_0_4_112) l_0_4_91) ?x8521) (* (* 2.0 l_0_4_191) l_0_4_202))))
 (let ((?x9806 (+ (+ ?x9802 (* (* 2.0 l_0_4_192) l_0_4_203)) (* (* 2.0 l_0_4_193) l_0_4_204))))
 (let ((?x9810 (+ (+ ?x9806 (* (* 2.0 l_0_4_194) l_0_4_205)) (* (* 2.0 l_0_4_195) l_0_4_206))))
 (let ((?x9814 (- (- ?x9810 (* (* 2.0 l_0_4_236) l_0_4_247)) (* (* 2.0 l_0_4_237) l_0_4_248))))
 (let ((?x9818 (- (- ?x9814 (* (* 2.0 l_0_4_238) l_0_4_249)) (* (* 2.0 l_0_4_239) l_0_4_250))))
 (= (- ?x9818 (* (* 2.0 l_0_4_240) l_0_4_251)) 0.0)))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8528 (* ?x3623 l_0_4_164)))
 (let ((?x9870 (+ (- (* (* 2.0 l_0_4_119) l_0_4_91) ?x8528) (* (* 2.0 l_0_4_191) l_0_4_209))))
 (let ((?x9874 (+ (+ ?x9870 (* (* 2.0 l_0_4_192) l_0_4_210)) (* (* 2.0 l_0_4_193) l_0_4_211))))
 (let ((?x9878 (+ (+ ?x9874 (* (* 2.0 l_0_4_194) l_0_4_212)) (* (* 2.0 l_0_4_195) l_0_4_213))))
 (let ((?x9882 (- (- ?x9878 (* (* 2.0 l_0_4_236) l_0_4_254)) (* (* 2.0 l_0_4_237) l_0_4_255))))
 (let ((?x9886 (- (- ?x9882 (* (* 2.0 l_0_4_238) l_0_4_256)) (* (* 2.0 l_0_4_239) l_0_4_257))))
 (= (- ?x9886 (* (* 2.0 l_0_4_240) l_0_4_258)) 0.0)))))))))
(assert
 (let ((?x3623 (* 2.0 l_0_4_136)))
 (let ((?x8539 (* ?x3623 l_0_4_172)))
 (let ((?x9938 (+ (- (* (* 2.0 l_0_4_127) l_0_4_91) ?x8539) (* (* 2.0 l_0_4_191) l_0_4_217))))
 (let ((?x9942 (+ (+ ?x9938 (* (* 2.0 l_0_4_192) l_0_4_218)) (* (* 2.0 l_0_4_193) l_0_4_219))))
 (let ((?x9946 (+ (+ ?x9942 (* (* 2.0 l_0_4_194) l_0_4_220)) (* (* 2.0 l_0_4_195) l_0_4_221))))
 (let ((?x9950 (- (- ?x9946 (* (* 2.0 l_0_4_236) l_0_4_262)) (* (* 2.0 l_0_4_237) l_0_4_263))))
 (let ((?x9954 (- (- ?x9950 (* (* 2.0 l_0_4_238) l_0_4_264)) (* (* 2.0 l_0_4_239) l_0_4_265))))
 (= (- ?x9954 (* (* 2.0 l_0_4_240) l_0_4_266)) 0.0)))))))))
(assert
 (let ((?x8557 (* l_0_4_93 l_0_4_93)))
 (let ((?x8555 (* l_0_4_92 l_0_4_92)))
 (let ((?x10006 (+ (- (* (- l_0_4_137) l_0_4_137) (* l_0_4_138 l_0_4_138)) ?x8555)))
 (= (+ ?x10006 ?x8557) 0.0)))))
(assert
 (let ((?x6368 (* 2.0 l_0_4_93)))
 (let ((?x6369 (* ?x6368 l_0_4_98)))
 (let ((?x6365 (* 2.0 l_0_4_92)))
 (let ((?x6366 (* ?x6365 l_0_4_97)))
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x6359 (* ?x3906 l_0_4_143)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_137) l_0_4_142) ?x6359) ?x6366) ?x6369) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8586 (* ?x3906 l_0_4_147)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8584 (* ?x3903 l_0_4_146)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8582 (* ?x4088 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_101) l_0_4_92) ?x8582) ?x8584) ?x8586) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x3907 (* ?x3906 l_0_4_152)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x3904 (* ?x3903 l_0_4_151)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x3897 (* ?x3761 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_106) l_0_4_92) ?x3897) ?x3904) ?x3907) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8612 (* ?x3906 l_0_4_158)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8610 (* ?x3903 l_0_4_157)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x8608 (* ?x6184 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_112) l_0_4_92) ?x8608) ?x8610) ?x8612) 0.0))))))))
(assert
 (let ((?x3906 (* 2.0 l_0_4_138)))
 (let ((?x8694 (* ?x3906 l_0_4_173)))
 (let ((?x3903 (* 2.0 l_0_4_137)))
 (let ((?x8692 (* ?x3903 l_0_4_172)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x8686 (* ?x6786 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_127) l_0_4_92) ?x8686) ?x8692) ?x8694) 0.0))))))))
(assert
 (let ((?x6500 (* l_0_4_99 l_0_4_99)))
 (let ((?x6498 (* l_0_4_98 l_0_4_98)))
 (let ((?x6496 (* l_0_4_97 l_0_4_97)))
 (let ((?x6487 (* l_0_4_145 l_0_4_145)))
 (let ((?x6485 (* l_0_4_144 l_0_4_144)))
 (let ((?x6483 (* l_0_4_143 l_0_4_143)))
 (let ((?x10074 (- (- (- (* l_0_4_100 l_0_4_100) (* l_0_4_142 l_0_4_142)) ?x6483) ?x6485)))
 (= (+ (+ (+ (- ?x10074 ?x6487) ?x6496) ?x6498) ?x6500) 0.0)))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6551 (* ?x4031 l_0_4_149)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6549 (* ?x4028 l_0_4_148)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6547 (* ?x4025 l_0_4_147)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6545 (* ?x4022 l_0_4_146)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x6538 (* ?x4100 l_0_4_99)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x6536 (* ?x4088 l_0_4_98)))
 (let ((?x6533 (* 2.0 l_0_4_101)))
 (let ((?x6534 (* ?x6533 l_0_4_97)))
 (let ((?x10091 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_104) ?x6534) ?x6536) ?x6538) ?x6545)))
 (= (- (- (- ?x10091 ?x6547) ?x6549) ?x6551) 0.0)))))))))))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x4032 (* ?x4031 l_0_4_154)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x4029 (* ?x4028 l_0_4_153)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x4026 (* ?x4025 l_0_4_152)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x4023 (* ?x4022 l_0_4_151)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4020 (* ?x3764 l_0_4_99)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4018 (* ?x3761 l_0_4_98)))
 (let ((?x3620 (* 2.0 l_0_4_106)))
 (let ((?x4008 (* ?x3620 l_0_4_97)))
 (let ((?x10112 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_109) ?x4008) ?x4018) ?x4020) ?x4023)))
 (= (- (- (- ?x10112 ?x4026) ?x4029) ?x4032) 0.0)))))))))))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6701 (* ?x4031 l_0_4_167)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6699 (* ?x4028 l_0_4_166)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6697 (* ?x4025 l_0_4_165)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6695 (* ?x4022 l_0_4_164)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x6693 (* ?x6692 l_0_4_99)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x6690 (* ?x6689 l_0_4_98)))
 (let ((?x6686 (* 2.0 l_0_4_119)))
 (let ((?x6687 (* ?x6686 l_0_4_97)))
 (let ((?x10135 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_122) ?x6687) ?x6690) ?x6693) ?x6695)))
 (= (- (- (- ?x10135 ?x6697) ?x6699) ?x6701) 0.0)))))))))))))))))
(assert
 (let ((?x4031 (* 2.0 l_0_4_145)))
 (let ((?x6798 (* ?x4031 l_0_4_175)))
 (let ((?x4028 (* 2.0 l_0_4_144)))
 (let ((?x6796 (* ?x4028 l_0_4_174)))
 (let ((?x4025 (* 2.0 l_0_4_143)))
 (let ((?x6794 (* ?x4025 l_0_4_173)))
 (let ((?x4022 (* 2.0 l_0_4_142)))
 (let ((?x6792 (* ?x4022 l_0_4_172)))
 (let ((?x6789 (* 2.0 l_0_4_129)))
 (let ((?x6790 (* ?x6789 l_0_4_99)))
 (let ((?x6786 (* 2.0 l_0_4_128)))
 (let ((?x6787 (* ?x6786 l_0_4_98)))
 (let ((?x6783 (* 2.0 l_0_4_127)))
 (let ((?x6784 (* ?x6783 l_0_4_97)))
 (let ((?x10156 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_130) ?x6784) ?x6787) ?x6790) ?x6792)))
 (= (- (- (- ?x10156 ?x6794) ?x6796) ?x6798) 0.0)))))))))))))))))
(assert
 (let ((?x8822 (* l_0_4_150 l_0_4_150)))
 (let ((?x8820 (* l_0_4_149 l_0_4_149)))
 (let ((?x8818 (* l_0_4_148 l_0_4_148)))
 (let ((?x8816 (* l_0_4_147 l_0_4_147)))
 (let ((?x8814 (* l_0_4_146 l_0_4_146)))
 (let ((?x8812 (* l_0_4_105 l_0_4_105)))
 (let ((?x8810 (* l_0_4_104 l_0_4_104)))
 (let ((?x8808 (* l_0_4_103 l_0_4_103)))
 (let ((?x10175 (+ (+ (+ (* l_0_4_101 l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x8808) ?x8810)))
 (= (- (- (- (- (- (+ ?x10175 ?x8812) ?x8814) ?x8816) ?x8818) ?x8820) ?x8822) 0.0)))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x4128 (* ?x4127 l_0_4_155)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x4125 (* ?x4124 l_0_4_154)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x4122 (* ?x4121 l_0_4_153)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x4119 (* ?x4118 l_0_4_152)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x4116 (* ?x4115 l_0_4_151)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x4107 (* ?x4106 l_0_4_110)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x4104 (* ?x4103 l_0_4_109)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x4101 (* ?x4100 l_0_4_108)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x4098 (* ?x4088 l_0_4_107)))
 (let ((?x10197 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_106) ?x4098) ?x4101) ?x4104) ?x4107)))
 (= (- (- (- (- (- ?x10197 ?x4116) ?x4119) ?x4122) ?x4125) ?x4128) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8877 (* ?x4127 l_0_4_161)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8875 (* ?x4124 l_0_4_160)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8873 (* ?x4121 l_0_4_159)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8871 (* ?x4118 l_0_4_158)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8869 (* ?x4115 l_0_4_157)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8867 (* ?x4106 l_0_4_116)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8865 (* ?x4103 l_0_4_115)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8863 (* ?x4100 l_0_4_114)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8861 (* ?x4088 l_0_4_113)))
 (let ((?x10223 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_112) ?x8861) ?x8863) ?x8865) ?x8867)))
 (= (- (- (- (- (- ?x10223 ?x8869) ?x8871) ?x8873) ?x8875) ?x8877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8936 (* ?x4127 l_0_4_168)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8934 (* ?x4124 l_0_4_167)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8932 (* ?x4121 l_0_4_166)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8930 (* ?x4118 l_0_4_165)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8928 (* ?x4115 l_0_4_164)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8926 (* ?x4106 l_0_4_123)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8916 (* ?x4103 l_0_4_122)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8913 (* ?x4100 l_0_4_121)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8909 (* ?x4088 l_0_4_120)))
 (let ((?x10254 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_119) ?x8909) ?x8913) ?x8916) ?x8926)))
 (= (- (- (- (- (- ?x10254 ?x8928) ?x8930) ?x8932) ?x8934) ?x8936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4127 (* 2.0 l_0_4_150)))
 (let ((?x8995 (* ?x4127 l_0_4_176)))
 (let ((?x4124 (* 2.0 l_0_4_149)))
 (let ((?x8993 (* ?x4124 l_0_4_175)))
 (let ((?x4121 (* 2.0 l_0_4_148)))
 (let ((?x8991 (* ?x4121 l_0_4_174)))
 (let ((?x4118 (* 2.0 l_0_4_147)))
 (let ((?x8989 (* ?x4118 l_0_4_173)))
 (let ((?x4115 (* 2.0 l_0_4_146)))
 (let ((?x8987 (* ?x4115 l_0_4_172)))
 (let ((?x4106 (* 2.0 l_0_4_105)))
 (let ((?x8985 (* ?x4106 l_0_4_131)))
 (let ((?x4103 (* 2.0 l_0_4_104)))
 (let ((?x8975 (* ?x4103 l_0_4_130)))
 (let ((?x4100 (* 2.0 l_0_4_103)))
 (let ((?x8972 (* ?x4100 l_0_4_129)))
 (let ((?x4088 (* 2.0 l_0_4_102)))
 (let ((?x8968 (* ?x4088 l_0_4_128)))
 (let ((?x10285 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_127) ?x8968) ?x8972) ?x8975) ?x8985)))
 (= (- (- (- (- (- ?x10285 ?x8987) ?x8989) ?x8991) ?x8993) ?x8995) 0.0)))))))))))))))))))))
(assert
 (let ((?x4212 (* l_0_4_156 l_0_4_156)))
 (let ((?x4210 (* l_0_4_155 l_0_4_155)))
 (let ((?x4208 (* l_0_4_154 l_0_4_154)))
 (let ((?x4206 (* l_0_4_153 l_0_4_153)))
 (let ((?x4204 (* l_0_4_152 l_0_4_152)))
 (let ((?x4202 (* l_0_4_151 l_0_4_151)))
 (let ((?x4200 (* l_0_4_111 l_0_4_111)))
 (let ((?x4198 (* l_0_4_110 l_0_4_110)))
 (let ((?x4186 (* l_0_4_109 l_0_4_109)))
 (let ((?x4182 (* l_0_4_108 l_0_4_108)))
 (let ((?x10314 (+ (+ (+ (* l_0_4_106 l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x4182) ?x4186)))
 (let ((?x10321 (- (- (- (- (- (+ (+ ?x10314 ?x4198) ?x4200) ?x4202) ?x4204) ?x4206) ?x4208) ?x4210)))
 (= (- ?x10321 ?x4212) 0.0))))))))))))))
(assert
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4287 (* ?x3791 l_0_4_162)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4285 (* ?x3788 l_0_4_161)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4283 (* ?x3785 l_0_4_160)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4281 (* ?x3782 l_0_4_159)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4279 (* ?x3779 l_0_4_158)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4277 (* ?x3776 l_0_4_157)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4275 (* ?x3773 l_0_4_117)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4273 (* ?x3770 l_0_4_116)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4271 (* ?x3767 l_0_4_115)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4269 (* ?x3764 l_0_4_114)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4257 (* ?x3761 l_0_4_113)))
 (let ((?x10340 (+ (+ (+ (+ (* (* 2.0 l_0_4_106) l_0_4_112) ?x4257) ?x4269) ?x4271) ?x4273)))
 (let ((?x10347 (- (- (- (- (- (- (+ ?x10340 ?x4275) ?x4277) ?x4279) ?x4281) ?x4283) ?x4285) ?x4287)))
 (= ?x10347 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3791 (* 2.0 l_0_4_156)))
 (let ((?x4445 (* ?x3791 l_0_4_177)))
 (let ((?x3788 (* 2.0 l_0_4_155)))
 (let ((?x4443 (* ?x3788 l_0_4_176)))
 (let ((?x3785 (* 2.0 l_0_4_154)))
 (let ((?x4441 (* ?x3785 l_0_4_175)))
 (let ((?x3782 (* 2.0 l_0_4_153)))
 (let ((?x4439 (* ?x3782 l_0_4_174)))
 (let ((?x3779 (* 2.0 l_0_4_152)))
 (let ((?x4437 (* ?x3779 l_0_4_173)))
 (let ((?x3776 (* 2.0 l_0_4_151)))
 (let ((?x4435 (* ?x3776 l_0_4_172)))
 (let ((?x3773 (* 2.0 l_0_4_111)))
 (let ((?x4433 (* ?x3773 l_0_4_132)))
 (let ((?x3770 (* 2.0 l_0_4_110)))
 (let ((?x4431 (* ?x3770 l_0_4_131)))
 (let ((?x3767 (* 2.0 l_0_4_109)))
 (let ((?x4429 (* ?x3767 l_0_4_130)))
 (let ((?x3764 (* 2.0 l_0_4_108)))
 (let ((?x4427 (* ?x3764 l_0_4_129)))
 (let ((?x3761 (* 2.0 l_0_4_107)))
 (let ((?x4421 (* ?x3761 l_0_4_128)))
 (let ((?x10371 (+ (+ (+ (+ (* (* 2.0 l_0_4_106) l_0_4_127) ?x4421) ?x4427) ?x4429) ?x4431)))
 (let ((?x10378 (- (- (- (- (- (- (+ ?x10371 ?x4433) ?x4435) ?x4437) ?x4439) ?x4441) ?x4443) ?x4445)))
 (= ?x10378 0.0))))))))))))))))))))))))))
(assert
 (let ((?x9072 (* l_0_4_163 l_0_4_163)))
 (let ((?x9070 (* l_0_4_162 l_0_4_162)))
 (let ((?x9068 (* l_0_4_161 l_0_4_161)))
 (let ((?x9066 (* l_0_4_160 l_0_4_160)))
 (let ((?x9064 (* l_0_4_159 l_0_4_159)))
 (let ((?x9062 (* l_0_4_158 l_0_4_158)))
 (let ((?x9060 (* l_0_4_157 l_0_4_157)))
 (let ((?x9058 (* l_0_4_118 l_0_4_118)))
 (let ((?x9056 (* l_0_4_117 l_0_4_117)))
 (let ((?x9054 (* l_0_4_116 l_0_4_116)))
 (let ((?x9052 (* l_0_4_115 l_0_4_115)))
 (let ((?x9050 (* l_0_4_114 l_0_4_114)))
 (let ((?x10400 (+ (+ (+ (* l_0_4_112 l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x9050) ?x9052)))
 (let ((?x10407 (- (- (- (- (+ (+ (+ ?x10400 ?x9054) ?x9056) ?x9058) ?x9060) ?x9062) ?x9064) ?x9066)))
 (= (- (- (- ?x10407 ?x9068) ?x9070) ?x9072) 0.0))))))))))))))))
(assert
 (let ((?x8437 (* 2.0 l_0_4_163)))
 (let ((?x9130 (* ?x8437 l_0_4_170)))
 (let ((?x8434 (* 2.0 l_0_4_162)))
 (let ((?x9128 (* ?x8434 l_0_4_169)))
 (let ((?x8431 (* 2.0 l_0_4_161)))
 (let ((?x9126 (* ?x8431 l_0_4_168)))
 (let ((?x8428 (* 2.0 l_0_4_160)))
 (let ((?x9124 (* ?x8428 l_0_4_167)))
 (let ((?x8425 (* 2.0 l_0_4_159)))
 (let ((?x9122 (* ?x8425 l_0_4_166)))
 (let ((?x8422 (* 2.0 l_0_4_158)))
 (let ((?x9120 (* ?x8422 l_0_4_165)))
 (let ((?x8419 (* 2.0 l_0_4_157)))
 (let ((?x9118 (* ?x8419 l_0_4_164)))
 (let ((?x8414 (* 2.0 l_0_4_118)))
 (let ((?x9116 (* ?x8414 l_0_4_125)))
 (let ((?x8411 (* 2.0 l_0_4_117)))
 (let ((?x9114 (* ?x8411 l_0_4_124)))
 (let ((?x8408 (* 2.0 l_0_4_116)))
 (let ((?x9112 (* ?x8408 l_0_4_123)))
 (let ((?x8405 (* 2.0 l_0_4_115)))
 (let ((?x9110 (* ?x8405 l_0_4_122)))
 (let ((?x6187 (* 2.0 l_0_4_114)))
 (let ((?x9108 (* ?x6187 l_0_4_121)))
 (let ((?x6184 (* 2.0 l_0_4_113)))
 (let ((?x9106 (* ?x6184 l_0_4_120)))
 (let ((?x10430 (+ (+ (+ (+ (* (* 2.0 l_0_4_112) l_0_4_119) ?x9106) ?x9108) ?x9110) ?x9112)))
 (let ((?x10437 (- (- (- (- (- (+ (+ ?x10430 ?x9114) ?x9116) ?x9118) ?x9120) ?x9122) ?x9124) ?x9126)))
 (= (- (- ?x10437 ?x9128) ?x9130) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x9228 (* l_0_4_171 l_0_4_171)))
 (let ((?x9226 (* l_0_4_170 l_0_4_170)))
 (let ((?x9224 (* l_0_4_169 l_0_4_169)))
 (let ((?x9222 (* l_0_4_168 l_0_4_168)))
 (let ((?x9220 (* l_0_4_167 l_0_4_167)))
 (let ((?x9218 (* l_0_4_166 l_0_4_166)))
 (let ((?x9216 (* l_0_4_165 l_0_4_165)))
 (let ((?x9214 (* l_0_4_164 l_0_4_164)))
 (let ((?x9212 (* l_0_4_126 l_0_4_126)))
 (let ((?x9210 (* l_0_4_125 l_0_4_125)))
 (let ((?x9208 (* l_0_4_124 l_0_4_124)))
 (let ((?x9206 (* l_0_4_123 l_0_4_123)))
 (let ((?x9204 (* l_0_4_122 l_0_4_122)))
 (let ((?x9202 (* l_0_4_121 l_0_4_121)))
 (let ((?x10471 (+ (+ (+ (* l_0_4_119 l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9202) ?x9204)))
 (let ((?x10478 (- (- (- (+ (+ (+ (+ ?x10471 ?x9206) ?x9208) ?x9210) ?x9212) ?x9214) ?x9216) ?x9218)))
 (= (- (- (- (- (- ?x10478 ?x9220) ?x9222) ?x9224) ?x9226) ?x9228) 0.0))))))))))))))))))
(assert
 (let ((?x9307 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9304 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9301 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9298 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9295 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9292 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9289 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9286 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9283 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9280 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9277 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9274 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9271 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x6692 (* 2.0 l_0_4_121)))
 (let ((?x9268 (* ?x6692 l_0_4_129)))
 (let ((?x6689 (* 2.0 l_0_4_120)))
 (let ((?x9266 (* ?x6689 l_0_4_128)))
 (let ((?x10505 (+ (+ (+ (+ (* (* 2.0 l_0_4_119) l_0_4_127) ?x9266) ?x9268) ?x9271) ?x9274)))
 (let ((?x10512 (- (- (- (- (+ (+ (+ ?x10505 ?x9277) ?x9280) ?x9283) ?x9286) ?x9289) ?x9292) ?x9295)))
 (= (- (- (- (- ?x10512 ?x9298) ?x9301) ?x9304) ?x9307) 0.0)))))))))))))))))))))
(assert
 (let ((?x9407 (* l_0_4_180 l_0_4_180)))
 (let ((?x9405 (* l_0_4_179 l_0_4_179)))
 (let ((?x9403 (* l_0_4_178 l_0_4_178)))
 (let ((?x9401 (* l_0_4_177 l_0_4_177)))
 (let ((?x9399 (* l_0_4_176 l_0_4_176)))
 (let ((?x9397 (* l_0_4_175 l_0_4_175)))
 (let ((?x9395 (* l_0_4_174 l_0_4_174)))
 (let ((?x9393 (* l_0_4_173 l_0_4_173)))
 (let ((?x9391 (* l_0_4_172 l_0_4_172)))
 (let ((?x9389 (* l_0_4_135 l_0_4_135)))
 (let ((?x9387 (* l_0_4_134 l_0_4_134)))
 (let ((?x9385 (* l_0_4_133 l_0_4_133)))
 (let ((?x9383 (* l_0_4_132 l_0_4_132)))
 (let ((?x9370 (* l_0_4_131 l_0_4_131)))
 (let ((?x9367 (* l_0_4_130 l_0_4_130)))
 (let ((?x9363 (* l_0_4_129 l_0_4_129)))
 (let ((?x10552 (+ (+ (+ (* l_0_4_127 l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9363) ?x9367)))
 (let ((?x10559 (- (- (+ (+ (+ (+ (+ ?x10552 ?x9370) ?x9383) ?x9385) ?x9387) ?x9389) ?x9391) ?x9393)))
 (let ((?x10566 (- (- (- (- (- (- (- ?x10559 ?x9395) ?x9397) ?x9399) ?x9401) ?x9403) ?x9405) ?x9407)))
 (= ?x10566 0.0)))))))))))))))))))))
(assert
 (let ((?x10588 (- (* (* 2.0 l_0_4_181) l_0_4_182) (* (* 2.0 l_0_4_226) l_0_4_227))))
 (= ?x10588 0.0)))
(assert
 (let ((?x10601 (- (* (* 2.0 l_0_4_181) l_0_4_187) (* (* 2.0 l_0_4_226) l_0_4_232))))
 (= ?x10601 0.0)))
(assert
 (let ((?x10614 (- (* (* 2.0 l_0_4_181) l_0_4_196) (* (* 2.0 l_0_4_226) l_0_4_241))))
 (= ?x10614 0.0)))
(assert
 (let ((?x10627 (- (* (* 2.0 l_0_4_181) l_0_4_202) (* (* 2.0 l_0_4_226) l_0_4_247))))
 (= ?x10627 0.0)))
(assert
 (let ((?x10640 (- (* (* 2.0 l_0_4_181) l_0_4_209) (* (* 2.0 l_0_4_226) l_0_4_254))))
 (= ?x10640 0.0)))
(assert
 (let ((?x10653 (- (* (* 2.0 l_0_4_181) l_0_4_217) (* (* 2.0 l_0_4_226) l_0_4_262))))
 (= ?x10653 0.0)))
(assert
 (let ((?x10671 (* l_0_4_228 l_0_4_228)))
 (let ((?x10669 (* l_0_4_227 l_0_4_227)))
 (let ((?x10668 (+ (* 1.0 (* l_0_4_182 l_0_4_182)) (* 1.0 (* l_0_4_183 l_0_4_183)))))
 (= (- (- ?x10668 ?x10669) ?x10671) 0.0)))))
(assert
 (let ((?x10684 (+ (* (* 2.0 l_0_4_182) l_0_4_187) (* (* 2.0 l_0_4_183) l_0_4_188))))
 (let ((?x10688 (- (- ?x10684 (* (* 2.0 l_0_4_227) l_0_4_232)) (* (* 2.0 l_0_4_228) l_0_4_233))))
 (= ?x10688 0.0))))
(assert
 (let ((?x10710 (+ (* (* 2.0 l_0_4_182) l_0_4_196) (* (* 2.0 l_0_4_183) l_0_4_197))))
 (let ((?x10714 (- (- ?x10710 (* (* 2.0 l_0_4_227) l_0_4_241)) (* (* 2.0 l_0_4_228) l_0_4_242))))
 (= ?x10714 0.0))))
(assert
 (let ((?x10736 (+ (* (* 2.0 l_0_4_182) l_0_4_202) (* (* 2.0 l_0_4_183) l_0_4_203))))
 (let ((?x10740 (- (- ?x10736 (* (* 2.0 l_0_4_227) l_0_4_247)) (* (* 2.0 l_0_4_228) l_0_4_248))))
 (= ?x10740 0.0))))
(assert
 (let ((?x10762 (+ (* (* 2.0 l_0_4_182) l_0_4_217) (* (* 2.0 l_0_4_183) l_0_4_218))))
 (let ((?x10766 (- (- ?x10762 (* (* 2.0 l_0_4_227) l_0_4_262)) (* (* 2.0 l_0_4_228) l_0_4_263))))
 (= ?x10766 0.0))))
(assert
 (let ((?x10803 (* l_0_4_235 l_0_4_235)))
 (let ((?x10801 (* l_0_4_234 l_0_4_234)))
 (let ((?x10799 (* l_0_4_233 l_0_4_233)))
 (let ((?x10797 (* l_0_4_232 l_0_4_232)))
 (let ((?x10790 (+ (* 1.0 (* l_0_4_187 l_0_4_187)) (* 1.0 (* l_0_4_188 l_0_4_188)))))
 (let ((?x10796 (+ (+ ?x10790 (* 1.0 (* l_0_4_189 l_0_4_189))) (* 1.0 (* l_0_4_190 l_0_4_190)))))
 (= (- (- (- (- ?x10796 ?x10797) ?x10799) ?x10801) ?x10803) 0.0))))))))
(assert
 (let ((?x10822 (+ (* (* 2.0 l_0_4_187) l_0_4_196) (* (* 2.0 l_0_4_188) l_0_4_197))))
 (let ((?x10826 (+ (+ ?x10822 (* (* 2.0 l_0_4_189) l_0_4_198)) (* (* 2.0 l_0_4_190) l_0_4_199))))
 (let ((?x10830 (- (- ?x10826 (* (* 2.0 l_0_4_232) l_0_4_241)) (* (* 2.0 l_0_4_233) l_0_4_242))))
 (let ((?x10834 (- (- ?x10830 (* (* 2.0 l_0_4_234) l_0_4_243)) (* (* 2.0 l_0_4_235) l_0_4_244))))
 (= ?x10834 0.0))))))
(assert
 (let ((?x10872 (+ (* (* 2.0 l_0_4_187) l_0_4_209) (* (* 2.0 l_0_4_188) l_0_4_210))))
 (let ((?x10876 (+ (+ ?x10872 (* (* 2.0 l_0_4_189) l_0_4_211)) (* (* 2.0 l_0_4_190) l_0_4_212))))
 (let ((?x10880 (- (- ?x10876 (* (* 2.0 l_0_4_232) l_0_4_254)) (* (* 2.0 l_0_4_233) l_0_4_255))))
 (let ((?x10884 (- (- ?x10880 (* (* 2.0 l_0_4_234) l_0_4_256)) (* (* 2.0 l_0_4_235) l_0_4_257))))
 (= ?x10884 0.0))))))
(assert
 (let ((?x10922 (+ (* (* 2.0 l_0_4_187) l_0_4_217) (* (* 2.0 l_0_4_188) l_0_4_218))))
 (let ((?x10926 (+ (+ ?x10922 (* (* 2.0 l_0_4_189) l_0_4_219)) (* (* 2.0 l_0_4_190) l_0_4_220))))
 (let ((?x10930 (- (- ?x10926 (* (* 2.0 l_0_4_232) l_0_4_262)) (* (* 2.0 l_0_4_233) l_0_4_263))))
 (let ((?x10934 (- (- ?x10930 (* (* 2.0 l_0_4_234) l_0_4_264)) (* (* 2.0 l_0_4_235) l_0_4_265))))
 (= ?x10934 0.0))))))
(assert
 (let ((?x10997 (* l_0_4_246 l_0_4_246)))
 (let ((?x10995 (* l_0_4_245 l_0_4_245)))
 (let ((?x10993 (* l_0_4_244 l_0_4_244)))
 (let ((?x10991 (* l_0_4_243 l_0_4_243)))
 (let ((?x10989 (* l_0_4_242 l_0_4_242)))
 (let ((?x10987 (* l_0_4_241 l_0_4_241)))
 (let ((?x10974 (+ (* 1.0 (* l_0_4_196 l_0_4_196)) (* 1.0 (* l_0_4_197 l_0_4_197)))))
 (let ((?x10980 (+ (+ ?x10974 (* 1.0 (* l_0_4_198 l_0_4_198))) (* 1.0 (* l_0_4_199 l_0_4_199)))))
 (let ((?x10986 (+ (+ ?x10980 (* 1.0 (* l_0_4_200 l_0_4_200))) (* 1.0 (* l_0_4_201 l_0_4_201)))))
 (= (- (- (- (- (- (- ?x10986 ?x10987) ?x10989) ?x10991) ?x10993) ?x10995) ?x10997) 0.0)))))))))))
(assert
 (let ((?x11022 (+ (* (* 2.0 l_0_4_196) l_0_4_202) (* (* 2.0 l_0_4_197) l_0_4_203))))
 (let ((?x11026 (+ (+ ?x11022 (* (* 2.0 l_0_4_198) l_0_4_204)) (* (* 2.0 l_0_4_199) l_0_4_205))))
 (let ((?x11030 (+ (+ ?x11026 (* (* 2.0 l_0_4_200) l_0_4_206)) (* (* 2.0 l_0_4_201) l_0_4_207))))
 (let ((?x11034 (- (- ?x11030 (* (* 2.0 l_0_4_241) l_0_4_247)) (* (* 2.0 l_0_4_242) l_0_4_248))))
 (let ((?x11038 (- (- ?x11034 (* (* 2.0 l_0_4_243) l_0_4_249)) (* (* 2.0 l_0_4_244) l_0_4_250))))
 (let ((?x11042 (- (- ?x11038 (* (* 2.0 l_0_4_245) l_0_4_251)) (* (* 2.0 l_0_4_246) l_0_4_252))))
 (= ?x11042 0.0))))))))
(assert
 (let ((?x11096 (+ (* (* 2.0 l_0_4_196) l_0_4_217) (* (* 2.0 l_0_4_197) l_0_4_218))))
 (let ((?x11100 (+ (+ ?x11096 (* (* 2.0 l_0_4_198) l_0_4_219)) (* (* 2.0 l_0_4_199) l_0_4_220))))
 (let ((?x11104 (+ (+ ?x11100 (* (* 2.0 l_0_4_200) l_0_4_221)) (* (* 2.0 l_0_4_201) l_0_4_222))))
 (let ((?x11108 (- (- ?x11104 (* (* 2.0 l_0_4_241) l_0_4_262)) (* (* 2.0 l_0_4_242) l_0_4_263))))
 (let ((?x11112 (- (- ?x11108 (* (* 2.0 l_0_4_243) l_0_4_264)) (* (* 2.0 l_0_4_244) l_0_4_265))))
 (let ((?x11116 (- (- ?x11112 (* (* 2.0 l_0_4_245) l_0_4_266)) (* (* 2.0 l_0_4_246) l_0_4_267))))
 (= ?x11116 0.0))))))))
(assert
 (let ((?x11200 (* l_0_4_253 l_0_4_253)))
 (let ((?x11198 (* l_0_4_252 l_0_4_252)))
 (let ((?x11196 (* l_0_4_251 l_0_4_251)))
 (let ((?x11194 (* l_0_4_250 l_0_4_250)))
 (let ((?x11192 (* l_0_4_249 l_0_4_249)))
 (let ((?x11190 (* l_0_4_248 l_0_4_248)))
 (let ((?x11188 (* l_0_4_247 l_0_4_247)))
 (let ((?x11172 (+ (* 1.0 (* l_0_4_202 l_0_4_202)) (* 1.0 (* l_0_4_203 l_0_4_203)))))
 (let ((?x11178 (+ (+ ?x11172 (* 1.0 (* l_0_4_204 l_0_4_204))) (* 1.0 (* l_0_4_205 l_0_4_205)))))
 (let ((?x11184 (+ (+ ?x11178 (* 1.0 (* l_0_4_206 l_0_4_206))) (* 1.0 (* l_0_4_207 l_0_4_207)))))
 (let ((?x11193 (- (- (- (+ ?x11184 (* 1.0 (* l_0_4_208 l_0_4_208))) ?x11188) ?x11190) ?x11192)))
 (= (- (- (- (- ?x11193 ?x11194) ?x11196) ?x11198) ?x11200) 0.0)))))))))))))
(assert
 (let ((?x11228 (+ (* (* 2.0 l_0_4_202) l_0_4_209) (* (* 2.0 l_0_4_203) l_0_4_210))))
 (let ((?x11232 (+ (+ ?x11228 (* (* 2.0 l_0_4_204) l_0_4_211)) (* (* 2.0 l_0_4_205) l_0_4_212))))
 (let ((?x11236 (+ (+ ?x11232 (* (* 2.0 l_0_4_206) l_0_4_213)) (* (* 2.0 l_0_4_207) l_0_4_214))))
 (let ((?x11240 (- (+ ?x11236 (* (* 2.0 l_0_4_208) l_0_4_215)) (* (* 2.0 l_0_4_247) l_0_4_254))))
 (let ((?x11244 (- (- ?x11240 (* (* 2.0 l_0_4_248) l_0_4_255)) (* (* 2.0 l_0_4_249) l_0_4_256))))
 (let ((?x11248 (- (- ?x11244 (* (* 2.0 l_0_4_250) l_0_4_257)) (* (* 2.0 l_0_4_251) l_0_4_258))))
 (let ((?x11252 (- (- ?x11248 (* (* 2.0 l_0_4_252) l_0_4_259)) (* (* 2.0 l_0_4_253) l_0_4_260))))
 (= ?x11252 0.0)))))))))
(assert
 (let ((?x11349 (* l_0_4_261 l_0_4_261)))
 (let ((?x11347 (* l_0_4_260 l_0_4_260)))
 (let ((?x11345 (* l_0_4_259 l_0_4_259)))
 (let ((?x11343 (* l_0_4_258 l_0_4_258)))
 (let ((?x11341 (* l_0_4_257 l_0_4_257)))
 (let ((?x11339 (* l_0_4_256 l_0_4_256)))
 (let ((?x11337 (* l_0_4_255 l_0_4_255)))
 (let ((?x11335 (* l_0_4_254 l_0_4_254)))
 (let ((?x11316 (+ (* 1.0 (* l_0_4_209 l_0_4_209)) (* 1.0 (* l_0_4_210 l_0_4_210)))))
 (let ((?x11322 (+ (+ ?x11316 (* 1.0 (* l_0_4_211 l_0_4_211))) (* 1.0 (* l_0_4_212 l_0_4_212)))))
 (let ((?x11328 (+ (+ ?x11322 (* 1.0 (* l_0_4_213 l_0_4_213))) (* 1.0 (* l_0_4_214 l_0_4_214)))))
 (let ((?x11334 (+ (+ ?x11328 (* 1.0 (* l_0_4_215 l_0_4_215))) (* 1.0 (* l_0_4_216 l_0_4_216)))))
 (let ((?x11348 (- (- (- (- (- (- (- ?x11334 ?x11335) ?x11337) ?x11339) ?x11341) ?x11343) ?x11345) ?x11347)))
 (= (- ?x11348 ?x11349) 0.0)))))))))))))))
(assert
 (let ((?x11382 (+ (* (* 2.0 l_0_4_209) l_0_4_217) (* (* 2.0 l_0_4_210) l_0_4_218))))
 (let ((?x11388 (+ (+ ?x11382 (* (* 2.0 l_0_4_211) l_0_4_219)) (* (* 2.0 l_0_4_212) l_0_4_220))))
 (let ((?x11394 (+ (+ ?x11388 (* (* 2.0 l_0_4_213) l_0_4_221)) (* (* 2.0 l_0_4_214) l_0_4_222))))
 (let ((?x11400 (+ (+ ?x11394 (* (* 2.0 l_0_4_215) l_0_4_223)) (* (* 2.0 l_0_4_216) l_0_4_224))))
 (let ((?x11406 (- (- ?x11400 (* (* 2.0 l_0_4_254) l_0_4_262)) (* (* 2.0 l_0_4_255) l_0_4_263))))
 (let ((?x11412 (- (- ?x11406 (* (* 2.0 l_0_4_256) l_0_4_264)) (* (* 2.0 l_0_4_257) l_0_4_265))))
 (let ((?x11418 (- (- ?x11412 (* (* 2.0 l_0_4_258) l_0_4_266)) (* (* 2.0 l_0_4_259) l_0_4_267))))
 (let ((?x11424 (- (- ?x11418 (* (* 2.0 l_0_4_260) l_0_4_268)) (* (* 2.0 l_0_4_261) l_0_4_269))))
 (= ?x11424 0.0))))))))))
(assert
 (let ((?x11534 (* l_0_4_270 l_0_4_270)))
 (let ((?x11532 (* l_0_4_269 l_0_4_269)))
 (let ((?x11530 (* l_0_4_268 l_0_4_268)))
 (let ((?x11528 (* l_0_4_267 l_0_4_267)))
 (let ((?x11526 (* l_0_4_266 l_0_4_266)))
 (let ((?x11524 (* l_0_4_265 l_0_4_265)))
 (let ((?x11522 (* l_0_4_264 l_0_4_264)))
 (let ((?x11520 (* l_0_4_263 l_0_4_263)))
 (let ((?x11518 (* l_0_4_262 l_0_4_262)))
 (let ((?x11496 (+ (* 1.0 (* l_0_4_217 l_0_4_217)) (* 1.0 (* l_0_4_218 l_0_4_218)))))
 (let ((?x11502 (+ (+ ?x11496 (* 1.0 (* l_0_4_219 l_0_4_219))) (* 1.0 (* l_0_4_220 l_0_4_220)))))
 (let ((?x11508 (+ (+ ?x11502 (* 1.0 (* l_0_4_221 l_0_4_221))) (* 1.0 (* l_0_4_222 l_0_4_222)))))
 (let ((?x11514 (+ (+ ?x11508 (* 1.0 (* l_0_4_223 l_0_4_223))) (* 1.0 (* l_0_4_224 l_0_4_224)))))
 (let ((?x11523 (- (- (- (+ ?x11514 (* 1.0 (* l_0_4_225 l_0_4_225))) ?x11518) ?x11520) ?x11522)))
 (= (- (- (- (- (- (- ?x11523 ?x11524) ?x11526) ?x11528) ?x11530) ?x11532) ?x11534) 0.0))))))))))))))))
(assert
 (>= l_0_4_1 0.0))
(assert
 (>= l_0_4_3 0.0))
(assert
 (>= l_0_4_6 0.0))
(assert
 (>= l_0_4_10 0.0))
(assert
 (>= l_0_4_15 0.0))
(assert
 (>= l_0_4_21 0.0))
(assert
 (>= l_0_4_28 0.0))
(assert
 (>= l_0_4_36 0.0))
(assert
 (>= l_0_4_45 0.0))
(assert
 (>= l_0_4_46 0.0))
(assert
 (>= l_0_4_48 0.0))
(assert
 (>= l_0_4_51 0.0))
(assert
 (>= l_0_4_55 0.0))
(assert
 (>= l_0_4_60 0.0))
(assert
 (>= l_0_4_66 0.0))
(assert
 (>= l_0_4_73 0.0))
(assert
 (>= l_0_4_81 0.0))
(assert
 (>= l_0_4_90 0.0))
(assert
 (>= l_0_4_91 0.0))
(assert
 (>= l_0_4_93 0.0))
(assert
 (>= l_0_4_96 0.0))
(assert
 (>= l_0_4_100 0.0))
(assert
 (>= l_0_4_105 0.0))
(assert
 (>= l_0_4_111 0.0))
(assert
 (>= l_0_4_118 0.0))
(assert
 (>= l_0_4_126 0.0))
(assert
 (>= l_0_4_135 0.0))
(assert
 (>= l_0_4_136 0.0))
(assert
 (>= l_0_4_138 0.0))
(assert
 (>= l_0_4_141 0.0))
(assert
 (>= l_0_4_145 0.0))
(assert
 (>= l_0_4_150 0.0))
(assert
 (>= l_0_4_156 0.0))
(assert
 (>= l_0_4_163 0.0))
(assert
 (>= l_0_4_171 0.0))
(assert
 (>= l_0_4_180 0.0))
(assert
 (>= l_0_4_181 0.0))
(assert
 (>= l_0_4_183 0.0))
(assert
 (>= l_0_4_186 0.0))
(assert
 (>= l_0_4_190 0.0))
(assert
 (>= l_0_4_195 0.0))
(assert
 (>= l_0_4_201 0.0))
(assert
 (>= l_0_4_208 0.0))
(assert
 (>= l_0_4_216 0.0))
(assert
 (>= l_0_4_225 0.0))
(assert
 (>= l_0_4_226 0.0))
(assert
 (>= l_0_4_228 0.0))
(assert
 (>= l_0_4_231 0.0))
(assert
 (>= l_0_4_235 0.0))
(assert
 (>= l_0_4_240 0.0))
(assert
 (>= l_0_4_246 0.0))
(assert
 (>= l_0_4_253 0.0))
(assert
 (>= l_0_4_261 0.0))
(assert
 (>= l_0_4_270 0.0))
(assert
 (let ((?x11658 (* l_0_5_46 l_0_5_46)))
 (let ((?x11627 (- (- (* (- l_0_5_1) l_0_5_1) (* (* 2.0 l_0_5_196) l_0_5_209)) (* (* 2.0 l_0_5_197) l_0_5_210))))
 (let ((?x11633 (- (- ?x11627 (* (* 2.0 l_0_5_198) l_0_5_211)) (* (* 2.0 l_0_5_199) l_0_5_212))))
 (let ((?x11639 (- (- ?x11633 (* (* 2.0 l_0_5_200) l_0_5_213)) (* (* 2.0 l_0_5_201) l_0_5_214))))
 (let ((?x11645 (- (- ?x11639 (* (* 2.0 l_0_5_286) l_0_5_299)) (* (* 2.0 l_0_5_287) l_0_5_300))))
 (let ((?x11651 (- (- ?x11645 (* (* 2.0 l_0_5_288) l_0_5_301)) (* (* 2.0 l_0_5_289) l_0_5_302))))
 (let ((?x11657 (- (- ?x11651 (* (* 2.0 l_0_5_290) l_0_5_303)) (* (* 2.0 l_0_5_291) l_0_5_304))))
 (= (+ (+ ?x11657 ?x11658) 1.0) 0.0)))))))))
(assert
 (let ((?x11752 (* l_0_5_91 l_0_5_91)))
 (let ((?x11745 (- (- (* l_0_5_136 l_0_5_136) (* (* 2.0 l_0_5_182) l_0_5_209)) (* (* 2.0 l_0_5_183) l_0_5_210))))
 (let ((?x11751 (- (- ?x11745 (* (* 2.0 l_0_5_272) l_0_5_299)) (* (* 2.0 l_0_5_273) l_0_5_300))))
 (= (- (- ?x11751 ?x11752) 1.0) 0.0)))))
(assert
 (let ((?x11752 (* l_0_5_91 l_0_5_91)))
 (let ((?x11790 (- (+ _a_3_ (* l_0_5_136 l_0_5_136)) (* (* 2.0 l_0_5_202) l_0_5_217))))
 (let ((?x11796 (- (- ?x11790 (* (* 2.0 l_0_5_203) l_0_5_218)) (* (* 2.0 l_0_5_204) l_0_5_219))))
 (let ((?x11802 (- (- ?x11796 (* (* 2.0 l_0_5_205) l_0_5_220)) (* (* 2.0 l_0_5_206) l_0_5_221))))
 (let ((?x11808 (- (- ?x11802 (* (* 2.0 l_0_5_207) l_0_5_222)) (* (* 2.0 l_0_5_208) l_0_5_223))))
 (let ((?x11814 (- (- ?x11808 (* (* 2.0 l_0_5_292) l_0_5_307)) (* (* 2.0 l_0_5_293) l_0_5_308))))
 (let ((?x11820 (- (- ?x11814 (* (* 2.0 l_0_5_294) l_0_5_309)) (* (* 2.0 l_0_5_295) l_0_5_310))))
 (let ((?x11826 (- (- ?x11820 (* (* 2.0 l_0_5_296) l_0_5_311)) (* (* 2.0 l_0_5_297) l_0_5_312))))
 (= (- (- ?x11826 (* (* 2.0 l_0_5_298) l_0_5_313)) ?x11752) 0.0))))))))))
(assert
 (let ((?x11924 (- (- _a_4_ (* (* 2.0 l_0_5_181) l_0_5_202)) (* (* 2.0 l_0_5_271) l_0_5_292))))
 (= ?x11924 0.0)))
(assert
 (let ((?x11658 (* l_0_5_46 l_0_5_46)))
 (let ((?x11942 (- (- _a_5_ (* l_0_5_1 l_0_5_1)) (* (* 2.0 l_0_5_187) l_0_5_202))))
 (let ((?x11948 (- (- ?x11942 (* (* 2.0 l_0_5_188) l_0_5_203)) (* (* 2.0 l_0_5_189) l_0_5_204))))
 (let ((?x11954 (- (- ?x11948 (* (* 2.0 l_0_5_190) l_0_5_205)) (* (* 2.0 l_0_5_277) l_0_5_292))))
 (let ((?x11960 (- (- ?x11954 (* (* 2.0 l_0_5_278) l_0_5_293)) (* (* 2.0 l_0_5_279) l_0_5_294))))
 (= (+ (- ?x11960 (* (* 2.0 l_0_5_280) l_0_5_295)) ?x11658) 0.0)))))))
(assert
 (let ((?x12021 (* l_0_5_271 l_0_5_271)))
 (= (- (- (- _a_0_) (* (* 1.0 l_0_5_181) l_0_5_181)) ?x12021) 0.0)))
(assert
 (let ((?x11658 (* l_0_5_46 l_0_5_46)))
 (let ((?x12037 (* l_0_5_226 l_0_5_226)))
 (let ((?x12036 (- (+ (- _a_1_) (* l_0_5_1 l_0_5_1)) (* (* 2.0 l_0_5_181) l_0_5_184))))
 (= (- (- (- ?x12036 ?x12037) (* (* 2.0 l_0_5_271) l_0_5_274)) ?x11658) 0.0)))))
(assert
 (let ((?x11752 (* l_0_5_91 l_0_5_91)))
 (let ((?x12037 (* l_0_5_226 l_0_5_226)))
 (let ((?x12068 (- (- (- _a_2_) (* l_0_5_136 l_0_5_136)) (* (* 2.0 l_0_5_181) l_0_5_191))))
 (= (+ (- (+ ?x12068 ?x12037) (* (* 2.0 l_0_5_271) l_0_5_281)) ?x11752) 0.0)))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12101 (* ?x12100 l_0_5_47)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x12098 (* ?x12097 l_0_5_151)))
 (let ((?x12094 (* 2.0 l_0_5_106)))
 (let ((?x12095 (* ?x12094 l_0_5_91)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12093 (* ?x12090 l_0_5_2)))
 (= (+ (+ (- ?x12093 ?x12095) ?x12098) ?x12101) 0.0))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x12174 (* ?x12173 l_0_5_79)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x12171 (* ?x12170 l_0_5_78)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x12168 (* ?x12167 l_0_5_77)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x12165 (* ?x12164 l_0_5_76)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x12162 (* ?x12161 l_0_5_75)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x12159 (* ?x12158 l_0_5_74)))
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12156 (* ?x12100 l_0_5_49)))
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x12154 (* ?x12153 l_0_5_259)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x12151 (* ?x12150 l_0_5_258)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x12148 (* ?x12147 l_0_5_257)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x12145 (* ?x12144 l_0_5_256)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x12142 (* ?x12141 l_0_5_255)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x12139 (* ?x12138 l_0_5_254)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x12136 (* ?x12135 l_0_5_34)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x12133 (* ?x12132 l_0_5_33)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x12130 (* ?x12129 l_0_5_32)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x12127 (* ?x12126 l_0_5_31)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12124 (* ?x12123 l_0_5_30)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x12116 (* ?x12115 l_0_5_29)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12113 (* ?x12090 l_0_5_4)))
 (let ((?x12140 (- (+ (+ (+ (+ (+ (+ ?x12113 ?x12116) ?x12124) ?x12127) ?x12130) ?x12133) ?x12136) ?x12139)))
 (let ((?x12160 (- (+ (- (- (- (- (- ?x12140 ?x12142) ?x12145) ?x12148) ?x12151) ?x12154) ?x12156) ?x12159)))
 (= (- (- (- (- (- ?x12160 ?x12162) ?x12165) ?x12168) ?x12171) ?x12174) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12278 (* ?x12100 l_0_5_52)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_7) ?x12278) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12329 (* ?x12100 l_0_5_56)))
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x12154 (* ?x12153 l_0_5_259)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x12151 (* ?x12150 l_0_5_258)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x12148 (* ?x12147 l_0_5_257)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x12145 (* ?x12144 l_0_5_256)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x12142 (* ?x12141 l_0_5_255)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x12139 (* ?x12138 l_0_5_254)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12321 (* ?x12320 l_0_5_169)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12318 (* ?x12317 l_0_5_168)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12315 (* ?x12314 l_0_5_167)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12312 (* ?x12311 l_0_5_166)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12309 (* ?x12308 l_0_5_165)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12306 (* ?x12305 l_0_5_164)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12303 (* ?x12302 l_0_5_124)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12300 (* ?x12299 l_0_5_123)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12297 (* ?x12296 l_0_5_122)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12294 (* ?x12293 l_0_5_121)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12291 (* ?x12290 l_0_5_120)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12282 (* ?x12090 l_0_5_11)))
 (let ((?x12298 (+ (+ (+ (+ ?x12282 (* (* 2.0 l_0_5_106) l_0_5_119)) ?x12291) ?x12294) ?x12297)))
 (let ((?x12319 (- (- (- (- (- (+ (+ ?x12298 ?x12300) ?x12303) ?x12306) ?x12309) ?x12312) ?x12315) ?x12318)))
 (let ((?x12328 (+ (+ (+ (+ (+ (+ (- ?x12319 ?x12321) ?x12139) ?x12142) ?x12145) ?x12148) ?x12151) ?x12154)))
 (= (+ ?x12328 ?x12329) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12388 (* ?x12100 l_0_5_61)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_16) ?x12388) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12394 (* ?x12100 l_0_5_67)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_22) ?x12394) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12404 (* ?x12100 l_0_5_74)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_29) ?x12404) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12414 (* ?x12100 l_0_5_82)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12412 (* ?x12090 l_0_5_37)))
 (= (+ ?x12412 ?x12414) 0.0))))))
(assert
 (let ((?x12443 (* l_0_5_48 l_0_5_48)))
 (let ((?x12441 (* l_0_5_47 l_0_5_47)))
 (let ((?x12439 (* l_0_5_3 l_0_5_3)))
 (let ((?x12437 (* l_0_5_2 l_0_5_2)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x12435 (* ?x12434 l_0_5_152)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x12432 (* ?x12431 l_0_5_151)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12425 (* ?x12290 l_0_5_93)))
 (let ((?x12436 (+ (+ (- (* (* (- 2.0) l_0_5_106) l_0_5_92) ?x12425) ?x12432) ?x12435)))
 (= (+ (+ (- (- ?x12436 ?x12437) ?x12439) ?x12441) ?x12443) 0.0)))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12496 (* ?x12495 l_0_5_50)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12493 (* ?x12492 l_0_5_49)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12490 (* ?x12489 l_0_5_5)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12487 (* ?x12486 l_0_5_4)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x12484 (* ?x12483 l_0_5_153)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x12481 (* ?x12480 l_0_5_152)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x12478 (* ?x12477 l_0_5_151)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12475 (* ?x12293 l_0_5_96)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12473 (* ?x12290 l_0_5_95)))
 (let ((?x12482 (+ (+ (- (- (* (* (- 2.0) l_0_5_106) l_0_5_94) ?x12473) ?x12475) ?x12478) ?x12481)))
 (let ((?x12485 (+ ?x12482 ?x12484)))
 (= (+ (+ (- (- ?x12485 ?x12487) ?x12490) ?x12493) ?x12496) 0.0))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12495 l_0_5_53)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12492 l_0_5_52)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12564 (* ?x12489 l_0_5_8)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12562 (* ?x12486 l_0_5_7)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x12560 (* ?x12559 l_0_5_154)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x12557 (* ?x12556 l_0_5_153)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x12554 (* ?x12553 l_0_5_152)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x12551 (* ?x12550 l_0_5_151)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12548 (* ?x12293 l_0_5_99)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12546 (* ?x12290 l_0_5_98)))
 (let ((?x12094 (* 2.0 l_0_5_106)))
 (let ((?x12536 (* ?x12094 l_0_5_97)))
 (let ((?x12552 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_109) ?x12536) ?x12546) ?x12548) ?x12551)))
 (let ((?x12561 (+ (+ (+ ?x12552 ?x12554) ?x12557) ?x12560)))
 (= (+ (+ (- (- ?x12561 ?x12562) ?x12564) ?x12566) ?x12568) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12660 (* ?x12495 l_0_5_57)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12658 (* ?x12492 l_0_5_56)))
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x12656 (* ?x12655 l_0_5_155)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x12653 (* ?x12652 l_0_5_154)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x12650 (* ?x12649 l_0_5_153)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x12647 (* ?x12646 l_0_5_152)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x12644 (* ?x12643 l_0_5_151)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x12641 (* ?x12640 l_0_5_3)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x12638 (* ?x12637 l_0_5_2)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x12635 (* ?x12634 l_0_5_110)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x12632 (* ?x12631 l_0_5_109)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x12629 (* ?x12628 l_0_5_108)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x12626 (* ?x12616 l_0_5_107)))
 (let ((?x12636 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_106) ?x12626) ?x12629) ?x12632) ?x12635)))
 (let ((?x12657 (+ (+ (+ (+ (+ (- (- ?x12636 ?x12638) ?x12641) ?x12644) ?x12647) ?x12650) ?x12653) ?x12656)))
 (= (+ (+ ?x12657 ?x12658) ?x12660) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12748 (* ?x12495 l_0_5_62)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12746 (* ?x12492 l_0_5_61)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12744 (* ?x12123 l_0_5_3)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x12742 (* ?x12115 l_0_5_2)))
 (let ((?x12740 (* l_0_5_156 l_0_5_156)))
 (let ((?x12738 (* l_0_5_155 l_0_5_155)))
 (let ((?x12736 (* l_0_5_154 l_0_5_154)))
 (let ((?x12734 (* l_0_5_153 l_0_5_153)))
 (let ((?x12732 (* l_0_5_152 l_0_5_152)))
 (let ((?x12730 (* l_0_5_151 l_0_5_151)))
 (let ((?x12728 (* l_0_5_111 l_0_5_111)))
 (let ((?x12726 (* l_0_5_110 l_0_5_110)))
 (let ((?x12714 (* l_0_5_109 l_0_5_109)))
 (let ((?x12710 (* l_0_5_108 l_0_5_108)))
 (let ((?x12712 (- (- (* (- l_0_5_106) l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x12710)))
 (let ((?x12737 (+ (+ (+ (+ (- (- (- ?x12712 ?x12714) ?x12726) ?x12728) ?x12730) ?x12732) ?x12734) ?x12736)))
 (let ((?x12741 (+ (+ ?x12737 ?x12738) ?x12740)))
 (= (+ (+ (- (- ?x12741 ?x12742) ?x12744) ?x12746) ?x12748) 0.0)))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12824 (* ?x12495 l_0_5_68)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12822 (* ?x12492 l_0_5_67)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x12820 (* ?x12819 l_0_5_3)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12817 (* ?x12486 l_0_5_22)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12815 (* ?x12320 l_0_5_162)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12813 (* ?x12317 l_0_5_161)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12811 (* ?x12314 l_0_5_160)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12809 (* ?x12311 l_0_5_159)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12807 (* ?x12308 l_0_5_158)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12805 (* ?x12305 l_0_5_157)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12803 (* ?x12302 l_0_5_117)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12801 (* ?x12299 l_0_5_116)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12799 (* ?x12296 l_0_5_115)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12797 (* ?x12293 l_0_5_114)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12785 (* ?x12290 l_0_5_113)))
 (let ((?x12802 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_112) ?x12785) ?x12797) ?x12799) ?x12801)))
 (let ((?x12816 (+ (+ (+ (+ (+ (+ (- ?x12802 ?x12803) ?x12805) ?x12807) ?x12809) ?x12811) ?x12813) ?x12815)))
 (= (+ (+ (- (- ?x12816 ?x12817) ?x12820) ?x12822) ?x12824) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12915 (* ?x12495 l_0_5_75)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12913 (* ?x12492 l_0_5_74)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12911 (* ?x12489 l_0_5_30)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12909 (* ?x12486 l_0_5_29)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12321 (* ?x12320 l_0_5_169)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12318 (* ?x12317 l_0_5_168)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12315 (* ?x12314 l_0_5_167)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12312 (* ?x12311 l_0_5_166)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12309 (* ?x12308 l_0_5_165)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12306 (* ?x12305 l_0_5_164)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12303 (* ?x12302 l_0_5_124)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12300 (* ?x12299 l_0_5_123)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12297 (* ?x12296 l_0_5_122)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12294 (* ?x12293 l_0_5_121)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12291 (* ?x12290 l_0_5_120)))
 (let ((?x12901 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_119) ?x12291) ?x12294) ?x12297) ?x12300)))
 (let ((?x12908 (+ (+ (+ (+ (+ (+ (- ?x12901 ?x12303) ?x12306) ?x12309) ?x12312) ?x12315) ?x12318) ?x12321)))
 (= (+ (+ (- (- ?x12908 ?x12909) ?x12911) ?x12913) ?x12915) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12987 (* ?x12495 l_0_5_83)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12985 (* ?x12492 l_0_5_82)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12983 (* ?x12489 l_0_5_38)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12981 (* ?x12486 l_0_5_37)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12979 (* ?x12320 l_0_5_177)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12977 (* ?x12317 l_0_5_176)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12975 (* ?x12314 l_0_5_175)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12973 (* ?x12311 l_0_5_174)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12971 (* ?x12308 l_0_5_173)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12969 (* ?x12305 l_0_5_172)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12967 (* ?x12302 l_0_5_132)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12965 (* ?x12299 l_0_5_131)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12963 (* ?x12296 l_0_5_130)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12961 (* ?x12293 l_0_5_129)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12955 (* ?x12290 l_0_5_128)))
 (let ((?x12966 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_127) ?x12955) ?x12961) ?x12963) ?x12965)))
 (let ((?x12980 (+ (+ (+ (+ (+ (+ (- ?x12966 ?x12967) ?x12969) ?x12971) ?x12973) ?x12975) ?x12977) ?x12979)))
 (= (+ (+ (- (- ?x12980 ?x12981) ?x12983) ?x12985) ?x12987) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13070 (* l_0_5_6 l_0_5_6)))
 (let ((?x13068 (* l_0_5_51 l_0_5_51)))
 (let ((?x13066 (* l_0_5_50 l_0_5_50)))
 (let ((?x13064 (* l_0_5_5 l_0_5_5)))
 (let ((?x13067 (+ (- (+ (* (- l_0_5_4) l_0_5_4) (* l_0_5_49 l_0_5_49)) ?x13064) ?x13066)))
 (= (- (+ ?x13067 ?x13068) ?x13070) 0.0)))))))
(assert
 (let ((?x13100 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13097 (* ?x13096 l_0_5_54)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13094 (* ?x13093 l_0_5_53)))
 (let ((?x13091 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13088 (* ?x13087 l_0_5_52)))
 (let ((?x13098 (+ (+ (- (+ (* (* (- 2.0) l_0_5_4) l_0_5_7) ?x13088) ?x13091) ?x13094) ?x13097)))
 (= (- ?x13098 ?x13100) 0.0)))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13142 (* ?x13096 l_0_5_58)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13140 (* ?x13093 l_0_5_57)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13138 (* ?x13087 l_0_5_56)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13136 (* ?x13135 l_0_5_6)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13133 (* ?x12640 l_0_5_5)))
 (let ((?x13141 (+ (+ (- (- (* (* (- 2.0) l_0_5_11) l_0_5_4) ?x13133) ?x13136) ?x13138) ?x13140)))
 (= (+ ?x13141 ?x13142) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13178 (* ?x13096 l_0_5_63)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13176 (* ?x13093 l_0_5_62)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13174 (* ?x13087 l_0_5_61)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13172 (* ?x12126 l_0_5_6)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13164 (* ?x12123 l_0_5_5)))
 (let ((?x13177 (+ (+ (- (- (* (* (- 2.0) l_0_5_16) l_0_5_4) ?x13164) ?x13172) ?x13174) ?x13176)))
 (= (+ ?x13177 ?x13178) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13215 (* ?x13096 l_0_5_69)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13213 (* ?x13093 l_0_5_68)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13211 (* ?x13087 l_0_5_67)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13209 (* ?x13208 l_0_5_6)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13200 (* ?x12819 l_0_5_5)))
 (let ((?x13214 (+ (+ (- (- (* (* (- 2.0) l_0_5_22) l_0_5_4) ?x13200) ?x13209) ?x13211) ?x13213)))
 (= (+ ?x13214 ?x13215) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13253 (* ?x13096 l_0_5_76)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13251 (* ?x13093 l_0_5_75)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13249 (* ?x13087 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13247 (* ?x13246 l_0_5_6)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13238 (* ?x13237 l_0_5_5)))
 (let ((?x13252 (+ (+ (- (- (* (* (- 2.0) l_0_5_29) l_0_5_4) ?x13238) ?x13247) ?x13249) ?x13251)))
 (= (+ ?x13252 ?x13253) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13291 (* ?x13096 l_0_5_84)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13289 (* ?x13093 l_0_5_83)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13287 (* ?x13087 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13285 (* ?x13284 l_0_5_6)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13276 (* ?x13275 l_0_5_5)))
 (let ((?x13290 (+ (+ (- (- (* (* (- 2.0) l_0_5_37) l_0_5_4) ?x13276) ?x13285) ?x13287) ?x13289)))
 (= (+ ?x13290 ?x13291) 0.0)))))))))))))
(assert
 (let ((?x13331 (* l_0_5_9 l_0_5_9)))
 (let ((?x13329 (* l_0_5_8 l_0_5_8)))
 (let ((?x13327 (* l_0_5_7 l_0_5_7)))
 (let ((?x13325 (* l_0_5_55 l_0_5_55)))
 (let ((?x13323 (* l_0_5_54 l_0_5_54)))
 (let ((?x13321 (* l_0_5_53 l_0_5_53)))
 (let ((?x13324 (+ (+ (+ (* (- l_0_5_10) l_0_5_10) (* l_0_5_52 l_0_5_52)) ?x13321) ?x13323)))
 (= (- (- (- (+ ?x13324 ?x13325) ?x13327) ?x13329) ?x13331) 0.0)))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13366 (* ?x13365 l_0_5_59)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13363 (* ?x13362 l_0_5_58)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13360 (* ?x13359 l_0_5_57)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13357 (* ?x13356 l_0_5_56)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13354 (* ?x13135 l_0_5_9)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13352 (* ?x12640 l_0_5_8)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x13350 (* ?x12637 l_0_5_7)))
 (let ((?x13358 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_14) ?x13350) ?x13352) ?x13354) ?x13357)))
 (= (+ (+ (+ ?x13358 ?x13360) ?x13363) ?x13366) 0.0)))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13413 (* ?x13365 l_0_5_64)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13411 (* ?x13362 l_0_5_63)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13409 (* ?x13359 l_0_5_62)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13407 (* ?x13356 l_0_5_61)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13405 (* ?x12126 l_0_5_9)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13396 (* ?x12123 l_0_5_8)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x13392 (* ?x12115 l_0_5_7)))
 (let ((?x13408 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_19) ?x13392) ?x13396) ?x13405) ?x13407)))
 (= (+ (+ (+ ?x13408 ?x13409) ?x13411) ?x13413) 0.0)))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x12174 (* ?x12173 l_0_5_79)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x12171 (* ?x12170 l_0_5_78)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x12168 (* ?x12167 l_0_5_77)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x12165 (* ?x12164 l_0_5_76)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x12162 (* ?x12161 l_0_5_75)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x12159 (* ?x12158 l_0_5_74)))
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13467 (* ?x13365 l_0_5_70)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13465 (* ?x13362 l_0_5_69)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13463 (* ?x13359 l_0_5_68)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13461 (* ?x13356 l_0_5_67)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13459 (* ?x13208 l_0_5_9)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13457 (* ?x12819 l_0_5_8)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x13455 (* ?x13454 l_0_5_7)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x12136 (* ?x12135 l_0_5_34)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x12133 (* ?x12132 l_0_5_33)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x12130 (* ?x12129 l_0_5_32)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x12127 (* ?x12126 l_0_5_31)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12124 (* ?x12123 l_0_5_30)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x12116 (* ?x12115 l_0_5_29)))
 (let ((?x13348 (* (- 2.0) l_0_5_10)))
 (let ((?x13437 (* ?x13348 l_0_5_25)))
 (let ((?x13456 (- (- (- (- (- (- (- ?x13437 ?x12116) ?x12124) ?x12127) ?x12130) ?x12133) ?x12136) ?x13455)))
 (let ((?x13469 (+ (+ (+ (+ (+ (- (- ?x13456 ?x13457) ?x13459) ?x13461) ?x13463) ?x13465) ?x13467) ?x12159)))
 (= (+ (+ (+ (+ (+ ?x13469 ?x12162) ?x12165) ?x12168) ?x12171) ?x12174) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13539 (* ?x13365 l_0_5_77)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13537 (* ?x13362 l_0_5_76)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13535 (* ?x13359 l_0_5_75)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13533 (* ?x13356 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13531 (* ?x13246 l_0_5_9)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13522 (* ?x13237 l_0_5_8)))
 (let ((?x13517 (* 2.0 l_0_5_29)))
 (let ((?x13519 (* ?x13517 l_0_5_7)))
 (let ((?x13534 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_32) ?x13519) ?x13522) ?x13531) ?x13533)))
 (= (+ (+ (+ ?x13534 ?x13535) ?x13537) ?x13539) 0.0)))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13587 (* ?x13365 l_0_5_85)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13585 (* ?x13362 l_0_5_84)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13583 (* ?x13359 l_0_5_83)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13581 (* ?x13356 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13579 (* ?x13284 l_0_5_9)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13570 (* ?x13275 l_0_5_8)))
 (let ((?x13565 (* 2.0 l_0_5_37)))
 (let ((?x13567 (* ?x13565 l_0_5_7)))
 (let ((?x13348 (* (- 2.0) l_0_5_10)))
 (let ((?x13563 (* ?x13348 l_0_5_40)))
 (let ((?x13588 (+ (+ (+ (+ (- (- (- ?x13563 ?x13567) ?x13570) ?x13579) ?x13581) ?x13583) ?x13585) ?x13587)))
 (= ?x13588 0.0)))))))))))))))))))
(assert
 (let ((?x13639 (* l_0_5_60 l_0_5_60)))
 (let ((?x13637 (* l_0_5_59 l_0_5_59)))
 (let ((?x13635 (* l_0_5_58 l_0_5_58)))
 (let ((?x13633 (* l_0_5_57 l_0_5_57)))
 (let ((?x13631 (* l_0_5_56 l_0_5_56)))
 (let ((?x13629 (* l_0_5_15 l_0_5_15)))
 (let ((?x13627 (* l_0_5_14 l_0_5_14)))
 (let ((?x13618 (* l_0_5_13 l_0_5_13)))
 (let ((?x13628 (- (- (- (* (- l_0_5_11) l_0_5_11) (* l_0_5_12 l_0_5_12)) ?x13618) ?x13627)))
 (= (+ (+ (+ (+ (+ (- ?x13628 ?x13629) ?x13631) ?x13633) ?x13635) ?x13637) ?x13639) 0.0)))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13688 (* ?x13687 l_0_5_65)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13685 (* ?x13684 l_0_5_64)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13682 (* ?x13681 l_0_5_63)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13679 (* ?x13678 l_0_5_62)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13676 (* ?x13675 l_0_5_61)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13673 (* ?x13672 l_0_5_20)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13670 (* ?x13669 l_0_5_19)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13667 (* ?x13135 l_0_5_18)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13665 (* ?x12640 l_0_5_17)))
 (let ((?x13674 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_16) ?x13665) ?x13667) ?x13670) ?x13673)))
 (= (+ (+ (+ (+ (+ ?x13674 ?x13676) ?x13679) ?x13682) ?x13685) ?x13688) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13747 (* ?x13687 l_0_5_71)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13745 (* ?x13684 l_0_5_70)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13743 (* ?x13681 l_0_5_69)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13741 (* ?x13678 l_0_5_68)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13739 (* ?x13675 l_0_5_67)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13737 (* ?x13672 l_0_5_26)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13727 (* ?x13669 l_0_5_25)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13724 (* ?x13135 l_0_5_24)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13720 (* ?x12640 l_0_5_23)))
 (let ((?x13738 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_22) ?x13720) ?x13724) ?x13727) ?x13737)))
 (= (+ (+ (+ (+ (+ ?x13738 ?x13739) ?x13741) ?x13743) ?x13745) ?x13747) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13806 (* ?x13687 l_0_5_78)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13804 (* ?x13684 l_0_5_77)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13802 (* ?x13681 l_0_5_76)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13800 (* ?x13678 l_0_5_75)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13798 (* ?x13675 l_0_5_74)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13796 (* ?x13672 l_0_5_33)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13786 (* ?x13669 l_0_5_32)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13783 (* ?x13135 l_0_5_31)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13779 (* ?x12640 l_0_5_30)))
 (let ((?x13797 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_29) ?x13779) ?x13783) ?x13786) ?x13796)))
 (= (+ (+ (+ (+ (+ ?x13797 ?x13798) ?x13800) ?x13802) ?x13804) ?x13806) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13865 (* ?x13687 l_0_5_86)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13863 (* ?x13684 l_0_5_85)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13861 (* ?x13681 l_0_5_84)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13859 (* ?x13678 l_0_5_83)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13857 (* ?x13675 l_0_5_82)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13855 (* ?x13672 l_0_5_41)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13845 (* ?x13669 l_0_5_40)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13842 (* ?x13135 l_0_5_39)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13838 (* ?x12640 l_0_5_38)))
 (let ((?x13856 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_37) ?x13838) ?x13842) ?x13845) ?x13855)))
 (= (+ (+ (+ (+ (+ ?x13856 ?x13857) ?x13859) ?x13861) ?x13863) ?x13865) 0.0)))))))))))))))))))))
(assert
 (let ((?x13929 (* l_0_5_66 l_0_5_66)))
 (let ((?x13927 (* l_0_5_65 l_0_5_65)))
 (let ((?x13925 (* l_0_5_64 l_0_5_64)))
 (let ((?x13923 (* l_0_5_63 l_0_5_63)))
 (let ((?x13921 (* l_0_5_62 l_0_5_62)))
 (let ((?x13919 (* l_0_5_61 l_0_5_61)))
 (let ((?x13917 (* l_0_5_21 l_0_5_21)))
 (let ((?x13915 (* l_0_5_20 l_0_5_20)))
 (let ((?x13913 (* l_0_5_19 l_0_5_19)))
 (let ((?x13903 (* l_0_5_18 l_0_5_18)))
 (let ((?x13914 (- (- (- (* (- l_0_5_16) l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13903) ?x13913)))
 (let ((?x13928 (+ (+ (+ (+ (+ (- (- ?x13914 ?x13915) ?x13917) ?x13919) ?x13921) ?x13923) ?x13925) ?x13927)))
 (= (+ ?x13928 ?x13929) 0.0))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x13979 (* ?x12173 l_0_5_72)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x13977 (* ?x12170 l_0_5_71)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x13975 (* ?x12167 l_0_5_70)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x13973 (* ?x12164 l_0_5_69)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x13971 (* ?x12161 l_0_5_68)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x13969 (* ?x12158 l_0_5_67)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x13967 (* ?x12135 l_0_5_27)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x13965 (* ?x12132 l_0_5_26)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x13963 (* ?x12129 l_0_5_25)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13961 (* ?x12126 l_0_5_24)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13959 (* ?x12123 l_0_5_23)))
 (let ((?x13966 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_22) ?x13959) ?x13961) ?x13963) ?x13965)))
 (let ((?x13980 (+ (+ (+ (+ (+ (+ (- ?x13966 ?x13967) ?x13969) ?x13971) ?x13973) ?x13975) ?x13977) ?x13979)))
 (= ?x13980 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x12174 (* ?x12173 l_0_5_79)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x12171 (* ?x12170 l_0_5_78)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x12168 (* ?x12167 l_0_5_77)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x12165 (* ?x12164 l_0_5_76)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x12162 (* ?x12161 l_0_5_75)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x12159 (* ?x12158 l_0_5_74)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x12136 (* ?x12135 l_0_5_34)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x12133 (* ?x12132 l_0_5_33)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x12130 (* ?x12129 l_0_5_32)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x12127 (* ?x12126 l_0_5_31)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12124 (* ?x12123 l_0_5_30)))
 (let ((?x14023 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_29) ?x12124) ?x12127) ?x12130) ?x12133)))
 (let ((?x14040 (+ (+ (+ (+ (+ (+ (- ?x14023 ?x12136) ?x12159) ?x12162) ?x12165) ?x12168) ?x12171) ?x12174)))
 (= ?x14040 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x14075 (* ?x12173 l_0_5_87)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x14073 (* ?x12170 l_0_5_86)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x14071 (* ?x12167 l_0_5_85)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x14069 (* ?x12164 l_0_5_84)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x14067 (* ?x12161 l_0_5_83)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x14065 (* ?x12158 l_0_5_82)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x14063 (* ?x12135 l_0_5_42)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x14061 (* ?x12132 l_0_5_41)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x14059 (* ?x12129 l_0_5_40)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x14057 (* ?x12126 l_0_5_39)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x14055 (* ?x12123 l_0_5_38)))
 (let ((?x14062 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_37) ?x14055) ?x14057) ?x14059) ?x14061)))
 (let ((?x14076 (+ (+ (+ (+ (+ (+ (- ?x14062 ?x14063) ?x14065) ?x14067) ?x14069) ?x14071) ?x14073) ?x14075)))
 (= ?x14076 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14151 (* l_0_5_73 l_0_5_73)))
 (let ((?x14149 (* l_0_5_72 l_0_5_72)))
 (let ((?x14147 (* l_0_5_71 l_0_5_71)))
 (let ((?x14145 (* l_0_5_70 l_0_5_70)))
 (let ((?x14143 (* l_0_5_69 l_0_5_69)))
 (let ((?x14141 (* l_0_5_68 l_0_5_68)))
 (let ((?x14139 (* l_0_5_67 l_0_5_67)))
 (let ((?x14137 (* l_0_5_28 l_0_5_28)))
 (let ((?x14135 (* l_0_5_27 l_0_5_27)))
 (let ((?x14133 (* l_0_5_26 l_0_5_26)))
 (let ((?x14122 (* l_0_5_25 l_0_5_25)))
 (let ((?x14119 (* l_0_5_24 l_0_5_24)))
 (let ((?x14132 (- (- (- (* (- l_0_5_22) l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x14119) ?x14122)))
 (let ((?x14146 (+ (+ (+ (+ (- (- (- ?x14132 ?x14133) ?x14135) ?x14137) ?x14139) ?x14141) ?x14143) ?x14145)))
 (= (+ (+ (+ ?x14146 ?x14147) ?x14149) ?x14151) 0.0))))))))))))))))
(assert
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14220 (* ?x14219 l_0_5_80)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14217 (* ?x14216 l_0_5_79)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14214 (* ?x14213 l_0_5_78)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14211 (* ?x14210 l_0_5_77)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14208 (* ?x14207 l_0_5_76)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14205 (* ?x14204 l_0_5_75)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14202 (* ?x14201 l_0_5_74)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14199 (* ?x14198 l_0_5_35)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14196 (* ?x14195 l_0_5_34)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14193 (* ?x14192 l_0_5_33)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14190 (* ?x14189 l_0_5_32)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14187 (* ?x13208 l_0_5_31)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14185 (* ?x12819 l_0_5_30)))
 (let ((?x14194 (- (- (- (- (* (* (- 2.0) l_0_5_22) l_0_5_29) ?x14185) ?x14187) ?x14190) ?x14193)))
 (let ((?x14215 (+ (+ (+ (+ (+ (- (- ?x14194 ?x14196) ?x14199) ?x14202) ?x14205) ?x14208) ?x14211) ?x14214)))
 (= (+ (+ ?x14215 ?x14217) ?x14220) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14304 (* ?x14219 l_0_5_88)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14302 (* ?x14216 l_0_5_87)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14300 (* ?x14213 l_0_5_86)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14298 (* ?x14210 l_0_5_85)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14296 (* ?x14207 l_0_5_84)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14294 (* ?x14204 l_0_5_83)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14292 (* ?x14201 l_0_5_82)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14290 (* ?x14198 l_0_5_43)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14288 (* ?x14195 l_0_5_42)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14286 (* ?x14192 l_0_5_41)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14274 (* ?x14189 l_0_5_40)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14270 (* ?x13208 l_0_5_39)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14266 (* ?x12819 l_0_5_38)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x14262 (* ?x13454 l_0_5_37)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12321 (* ?x12320 l_0_5_169)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12318 (* ?x12317 l_0_5_168)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12315 (* ?x12314 l_0_5_167)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12312 (* ?x12311 l_0_5_166)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12309 (* ?x12308 l_0_5_165)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12306 (* ?x12305 l_0_5_164)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12303 (* ?x12302 l_0_5_124)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12300 (* ?x12299 l_0_5_123)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12297 (* ?x12296 l_0_5_122)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12294 (* ?x12293 l_0_5_121)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12291 (* ?x12290 l_0_5_120)))
 (let ((?x12901 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_119) ?x12291) ?x12294) ?x12297) ?x12300)))
 (let ((?x12908 (+ (+ (+ (+ (+ (+ (- ?x12901 ?x12303) ?x12306) ?x12309) ?x12312) ?x12315) ?x12318) ?x12321)))
 (let ((?x14291 (- (- (- (- (- (- (- ?x12908 ?x14262) ?x14266) ?x14270) ?x14274) ?x14286) ?x14288) ?x14290)))
 (let ((?x14305 (+ (+ (+ (+ (+ (+ (+ ?x14291 ?x14292) ?x14294) ?x14296) ?x14298) ?x14300) ?x14302) ?x14304)))
 (= ?x14305 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14395 (* l_0_5_81 l_0_5_81)))
 (let ((?x14393 (* l_0_5_80 l_0_5_80)))
 (let ((?x14391 (* l_0_5_79 l_0_5_79)))
 (let ((?x14389 (* l_0_5_78 l_0_5_78)))
 (let ((?x14387 (* l_0_5_77 l_0_5_77)))
 (let ((?x14385 (* l_0_5_76 l_0_5_76)))
 (let ((?x14383 (* l_0_5_75 l_0_5_75)))
 (let ((?x14381 (* l_0_5_74 l_0_5_74)))
 (let ((?x14379 (* l_0_5_36 l_0_5_36)))
 (let ((?x14377 (* l_0_5_35 l_0_5_35)))
 (let ((?x14375 (* l_0_5_34 l_0_5_34)))
 (let ((?x14373 (* l_0_5_33 l_0_5_33)))
 (let ((?x14362 (* l_0_5_32 l_0_5_32)))
 (let ((?x14358 (* l_0_5_31 l_0_5_31)))
 (let ((?x14363 (- (- (- (* (- l_0_5_29) l_0_5_29) (* l_0_5_30 l_0_5_30)) ?x14358) ?x14362)))
 (let ((?x14386 (+ (+ (+ (- (- (- (- ?x14363 ?x14373) ?x14375) ?x14377) ?x14379) ?x14381) ?x14383) ?x14385)))
 (= (+ (+ (+ (+ (+ ?x14386 ?x14387) ?x14389) ?x14391) ?x14393) ?x14395) 0.0))))))))))))))))))
(assert
 (let ((?x14474 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14471 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14468 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14465 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14462 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14459 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14456 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14453 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14450 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14447 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14444 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14441 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14438 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x14435 (* ?x13246 l_0_5_39)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x14433 (* ?x13237 l_0_5_38)))
 (let ((?x14442 (- (- (- (- (* (* (- 2.0) l_0_5_29) l_0_5_37) ?x14433) ?x14435) ?x14438) ?x14441)))
 (let ((?x14463 (+ (+ (+ (+ (- (- (- ?x14442 ?x14444) ?x14447) ?x14450) ?x14453) ?x14456) ?x14459) ?x14462)))
 (= (+ (+ (+ (+ ?x14463 ?x14465) ?x14468) ?x14471) ?x14474) 0.0)))))))))))))))))))))
(assert
 (let ((?x14574 (* l_0_5_90 l_0_5_90)))
 (let ((?x14572 (* l_0_5_89 l_0_5_89)))
 (let ((?x14570 (* l_0_5_88 l_0_5_88)))
 (let ((?x14568 (* l_0_5_87 l_0_5_87)))
 (let ((?x14566 (* l_0_5_86 l_0_5_86)))
 (let ((?x14564 (* l_0_5_85 l_0_5_85)))
 (let ((?x14562 (* l_0_5_84 l_0_5_84)))
 (let ((?x14560 (* l_0_5_83 l_0_5_83)))
 (let ((?x14558 (* l_0_5_82 l_0_5_82)))
 (let ((?x14556 (* l_0_5_45 l_0_5_45)))
 (let ((?x14554 (* l_0_5_44 l_0_5_44)))
 (let ((?x14552 (* l_0_5_43 l_0_5_43)))
 (let ((?x14550 (* l_0_5_42 l_0_5_42)))
 (let ((?x14537 (* l_0_5_41 l_0_5_41)))
 (let ((?x14534 (* l_0_5_40 l_0_5_40)))
 (let ((?x14530 (* l_0_5_39 l_0_5_39)))
 (let ((?x14536 (- (- (- (* (- l_0_5_37) l_0_5_37) (* l_0_5_38 l_0_5_38)) ?x14530) ?x14534)))
 (let ((?x14561 (+ (+ (- (- (- (- (- ?x14536 ?x14537) ?x14550) ?x14552) ?x14554) ?x14556) ?x14558) ?x14560)))
 (let ((?x14575 (+ (+ (+ (+ (+ (+ (+ ?x14561 ?x14562) ?x14564) ?x14566) ?x14568) ?x14570) ?x14572) ?x14574)))
 (= ?x14575 0.0)))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12101 (* ?x12100 l_0_5_47)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12093 (* ?x12090 l_0_5_2)))
 (= (+ ?x12093 ?x12101) 0.0))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13467 (* ?x13365 l_0_5_70)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13465 (* ?x13362 l_0_5_69)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13463 (* ?x13359 l_0_5_68)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13461 (* ?x13356 l_0_5_67)))
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12156 (* ?x12100 l_0_5_49)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13459 (* ?x13208 l_0_5_9)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x14635 (* ?x14634 l_0_5_250)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x14632 (* ?x14631 l_0_5_249)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x14629 (* ?x14628 l_0_5_248)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x14626 (* ?x14625 l_0_5_247)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13457 (* ?x12819 l_0_5_8)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x13455 (* ?x13454 l_0_5_7)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12113 (* ?x12090 l_0_5_4)))
 (let ((?x14627 (- (+ (+ (+ ?x12113 (* (* 2.0 l_0_5_10) l_0_5_25)) ?x13455) ?x13457) ?x14626)))
 (let ((?x14640 (- (- (+ (+ (- (- (- ?x14627 ?x14629) ?x14632) ?x14635) ?x13459) ?x12156) ?x13461) ?x13463)))
 (= (- (- ?x14640 ?x13465) ?x13467) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12278 (* ?x12100 l_0_5_52)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_7) ?x12278) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12329 (* ?x12100 l_0_5_56)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x14635 (* ?x14634 l_0_5_250)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x14632 (* ?x14631 l_0_5_249)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x14629 (* ?x14628 l_0_5_248)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x14626 (* ?x14625 l_0_5_247)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x14706 (* ?x12559 l_0_5_160)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x14704 (* ?x12556 l_0_5_159)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x14702 (* ?x12553 l_0_5_158)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x14700 (* ?x12550 l_0_5_157)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x14698 (* ?x14697 l_0_5_99)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x14695 (* ?x14694 l_0_5_98)))
 (let ((?x14691 (* 2.0 l_0_5_112)))
 (let ((?x14692 (* ?x14691 l_0_5_97)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12282 (* ?x12090 l_0_5_11)))
 (let ((?x14699 (+ (+ (+ (+ ?x12282 (* (* 2.0 l_0_5_100) l_0_5_115)) ?x14692) ?x14695) ?x14698)))
 (let ((?x14710 (+ (+ (+ (- (- (- (- ?x14699 ?x14700) ?x14702) ?x14704) ?x14706) ?x14626) ?x14629) ?x14632)))
 (= (+ (+ ?x14710 ?x14635) ?x12329) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12388 (* ?x12100 l_0_5_61)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_16) ?x12388) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12394 (* ?x12100 l_0_5_67)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_22) ?x12394) 0.0))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12404 (* ?x12100 l_0_5_74)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_29) ?x12404) 0.0))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x14759 (* ?x14758 l_0_5_97)))
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12414 (* ?x12100 l_0_5_82)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x14747 (* ?x12097 l_0_5_142)))
 (let ((?x12090 (* (- 2.0) l_0_5_1)))
 (let ((?x12412 (* ?x12090 l_0_5_37)))
 (= (- (+ (+ ?x12412 ?x14747) ?x12414) ?x14759) 0.0))))))))))
(assert
 (let ((?x12443 (* l_0_5_48 l_0_5_48)))
 (let ((?x12441 (* l_0_5_47 l_0_5_47)))
 (let ((?x14780 (+ (+ (- (* (- l_0_5_2) l_0_5_2) (* l_0_5_3 l_0_5_3)) ?x12441) ?x12443)))
 (= ?x14780 0.0)))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12496 (* ?x12495 l_0_5_50)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12493 (* ?x12492 l_0_5_49)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12490 (* ?x12489 l_0_5_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_4) ?x12490) ?x12493) ?x12496) 0.0))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12495 l_0_5_53)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12492 l_0_5_52)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12564 (* ?x12489 l_0_5_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_7) ?x12564) ?x12566) ?x12568) 0.0))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12660 (* ?x12495 l_0_5_57)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12658 (* ?x12492 l_0_5_56)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x12641 (* ?x12640 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_11) l_0_5_2) ?x12641) ?x12658) ?x12660) 0.0))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12748 (* ?x12495 l_0_5_62)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12746 (* ?x12492 l_0_5_61)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12744 (* ?x12123 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_16) l_0_5_2) ?x12744) ?x12746) ?x12748) 0.0))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12824 (* ?x12495 l_0_5_68)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12822 (* ?x12492 l_0_5_67)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x12820 (* ?x12819 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_22) ?x12820) ?x12822) ?x12824) 0.0))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12915 (* ?x12495 l_0_5_75)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12913 (* ?x12492 l_0_5_74)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12911 (* ?x12489 l_0_5_30)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12909 (* ?x12486 l_0_5_29)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x14706 (* ?x12559 l_0_5_160)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x14704 (* ?x12556 l_0_5_159)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x14702 (* ?x12553 l_0_5_158)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x14700 (* ?x12550 l_0_5_157)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x14698 (* ?x14697 l_0_5_99)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x14695 (* ?x14694 l_0_5_98)))
 (let ((?x14691 (* 2.0 l_0_5_112)))
 (let ((?x14692 (* ?x14691 l_0_5_97)))
 (let ((?x14846 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_115) ?x14692) ?x14695) ?x14698) ?x14700)))
 (let ((?x14849 (+ (+ (+ ?x14846 ?x14702) ?x14704) ?x14706)))
 (= (+ (+ (- (- ?x14849 ?x12909) ?x12911) ?x12913) ?x12915) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x14884 (* ?x14883 l_0_5_98)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x14881 (* ?x14880 l_0_5_97)))
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12987 (* ?x12495 l_0_5_83)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12985 (* ?x12492 l_0_5_82)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12983 (* ?x12489 l_0_5_38)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12981 (* ?x12486 l_0_5_37)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x14874 (* ?x12434 l_0_5_143)))
 (let ((?x14875 (+ (* (* 2.0 l_0_5_137) l_0_5_142) ?x14874)))
 (= (- (- (+ (+ (- (- ?x14875 ?x12981) ?x12983) ?x12985) ?x12987) ?x14881) ?x14884) 0.0)))))))))))))))))
(assert
 (let ((?x13070 (* l_0_5_6 l_0_5_6)))
 (let ((?x13068 (* l_0_5_51 l_0_5_51)))
 (let ((?x13066 (* l_0_5_50 l_0_5_50)))
 (let ((?x13064 (* l_0_5_5 l_0_5_5)))
 (let ((?x13067 (+ (- (+ (* (- l_0_5_4) l_0_5_4) (* l_0_5_49 l_0_5_49)) ?x13064) ?x13066)))
 (= (- (+ ?x13067 ?x13068) ?x13070) 0.0)))))))
(assert
 (let ((?x13100 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13097 (* ?x13096 l_0_5_54)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13094 (* ?x13093 l_0_5_53)))
 (let ((?x13091 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13088 (* ?x13087 l_0_5_52)))
 (let ((?x13098 (+ (+ (- (+ (* (* (- 2.0) l_0_5_4) l_0_5_7) ?x13088) ?x13091) ?x13094) ?x13097)))
 (= (- ?x13098 ?x13100) 0.0)))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13142 (* ?x13096 l_0_5_58)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13140 (* ?x13093 l_0_5_57)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13138 (* ?x13087 l_0_5_56)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13136 (* ?x13135 l_0_5_6)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13133 (* ?x12640 l_0_5_5)))
 (let ((?x13141 (+ (+ (- (- (* (* (- 2.0) l_0_5_11) l_0_5_4) ?x13133) ?x13136) ?x13138) ?x13140)))
 (= (+ ?x13141 ?x13142) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13178 (* ?x13096 l_0_5_63)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13176 (* ?x13093 l_0_5_62)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13174 (* ?x13087 l_0_5_61)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13172 (* ?x12126 l_0_5_6)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13164 (* ?x12123 l_0_5_5)))
 (let ((?x13177 (+ (+ (- (- (* (* (- 2.0) l_0_5_16) l_0_5_4) ?x13164) ?x13172) ?x13174) ?x13176)))
 (= (+ ?x13177 ?x13178) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13215 (* ?x13096 l_0_5_69)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13213 (* ?x13093 l_0_5_68)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13211 (* ?x13087 l_0_5_67)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13209 (* ?x13208 l_0_5_6)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13200 (* ?x12819 l_0_5_5)))
 (let ((?x13214 (+ (+ (- (- (* (* (- 2.0) l_0_5_22) l_0_5_4) ?x13200) ?x13209) ?x13211) ?x13213)))
 (= (+ ?x13214 ?x13215) 0.0)))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13253 (* ?x13096 l_0_5_76)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13251 (* ?x13093 l_0_5_75)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13249 (* ?x13087 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13247 (* ?x13246 l_0_5_6)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13238 (* ?x13237 l_0_5_5)))
 (let ((?x13252 (+ (+ (- (- (* (* (- 2.0) l_0_5_29) l_0_5_4) ?x13238) ?x13247) ?x13249) ?x13251)))
 (= (+ ?x13252 ?x13253) 0.0)))))))))))))
(assert
 (let ((?x14934 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x14931 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x14928 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13291 (* ?x13096 l_0_5_84)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13289 (* ?x13093 l_0_5_83)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13287 (* ?x13087 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13285 (* ?x13284 l_0_5_6)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13276 (* ?x13275 l_0_5_5)))
 (let ((?x13565 (* 2.0 l_0_5_37)))
 (let ((?x14920 (* ?x13565 l_0_5_4)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x14918 (* ?x12483 l_0_5_144)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x14916 (* ?x12480 l_0_5_143)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x14915 (* ?x12477 l_0_5_142)))
 (let ((?x14919 (+ (+ ?x14915 ?x14916) ?x14918)))
 (let ((?x14929 (- (+ (+ (+ (- (- (- ?x14919 ?x14920) ?x13276) ?x13285) ?x13287) ?x13289) ?x13291) ?x14928)))
 (= (- (- ?x14929 ?x14931) ?x14934) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x13331 (* l_0_5_9 l_0_5_9)))
 (let ((?x13329 (* l_0_5_8 l_0_5_8)))
 (let ((?x13327 (* l_0_5_7 l_0_5_7)))
 (let ((?x13325 (* l_0_5_55 l_0_5_55)))
 (let ((?x13323 (* l_0_5_54 l_0_5_54)))
 (let ((?x13321 (* l_0_5_53 l_0_5_53)))
 (let ((?x13324 (+ (+ (+ (* (- l_0_5_10) l_0_5_10) (* l_0_5_52 l_0_5_52)) ?x13321) ?x13323)))
 (= (- (- (- (+ ?x13324 ?x13325) ?x13327) ?x13329) ?x13331) 0.0)))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13366 (* ?x13365 l_0_5_59)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13363 (* ?x13362 l_0_5_58)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13360 (* ?x13359 l_0_5_57)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13357 (* ?x13356 l_0_5_56)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13354 (* ?x13135 l_0_5_9)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13352 (* ?x12640 l_0_5_8)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x13350 (* ?x12637 l_0_5_7)))
 (let ((?x13358 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_14) ?x13350) ?x13352) ?x13354) ?x13357)))
 (= (+ (+ (+ ?x13358 ?x13360) ?x13363) ?x13366) 0.0)))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13413 (* ?x13365 l_0_5_64)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13411 (* ?x13362 l_0_5_63)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13409 (* ?x13359 l_0_5_62)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13407 (* ?x13356 l_0_5_61)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13405 (* ?x12126 l_0_5_9)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13396 (* ?x12123 l_0_5_8)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x13392 (* ?x12115 l_0_5_7)))
 (let ((?x13408 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_19) ?x13392) ?x13396) ?x13405) ?x13407)))
 (= (+ (+ (+ ?x13408 ?x13409) ?x13411) ?x13413) 0.0)))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13467 (* ?x13365 l_0_5_70)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13465 (* ?x13362 l_0_5_69)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13463 (* ?x13359 l_0_5_68)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13461 (* ?x13356 l_0_5_67)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13459 (* ?x13208 l_0_5_9)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13457 (* ?x12819 l_0_5_8)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x13455 (* ?x13454 l_0_5_7)))
 (let ((?x13348 (* (- 2.0) l_0_5_10)))
 (let ((?x13437 (* ?x13348 l_0_5_25)))
 (let ((?x14984 (+ (+ (+ (+ (- (- (- ?x13437 ?x13455) ?x13457) ?x13459) ?x13461) ?x13463) ?x13465) ?x13467)))
 (= ?x14984 0.0)))))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13539 (* ?x13365 l_0_5_77)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13537 (* ?x13362 l_0_5_76)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13535 (* ?x13359 l_0_5_75)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13533 (* ?x13356 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13531 (* ?x13246 l_0_5_9)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13522 (* ?x13237 l_0_5_8)))
 (let ((?x13517 (* 2.0 l_0_5_29)))
 (let ((?x13519 (* ?x13517 l_0_5_7)))
 (let ((?x13534 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_32) ?x13519) ?x13522) ?x13531) ?x13533)))
 (= (+ (+ (+ ?x13534 ?x13535) ?x13537) ?x13539) 0.0)))))))))))))))))
(assert
 (let ((?x15015 (* l_0_5_99 l_0_5_99)))
 (let ((?x15013 (* l_0_5_98 l_0_5_98)))
 (let ((?x15011 (* l_0_5_97 l_0_5_97)))
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13587 (* ?x13365 l_0_5_85)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13585 (* ?x13362 l_0_5_84)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13583 (* ?x13359 l_0_5_83)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13581 (* ?x13356 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13579 (* ?x13284 l_0_5_9)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13570 (* ?x13275 l_0_5_8)))
 (let ((?x13565 (* 2.0 l_0_5_37)))
 (let ((?x13567 (* ?x13565 l_0_5_7)))
 (let ((?x15002 (* l_0_5_145 l_0_5_145)))
 (let ((?x15000 (* l_0_5_144 l_0_5_144)))
 (let ((?x14998 (* l_0_5_143 l_0_5_143)))
 (let ((?x14996 (* l_0_5_142 l_0_5_142)))
 (let ((?x14997 (+ (- (* (* (- 2.0) l_0_5_10) l_0_5_40) (* l_0_5_100 l_0_5_100)) ?x14996)))
 (let ((?x15007 (+ (- (- (- (+ (+ (+ ?x14997 ?x14998) ?x15000) ?x15002) ?x13567) ?x13570) ?x13579) ?x13581)))
 (= (- (- (- (+ (+ (+ ?x15007 ?x13583) ?x13585) ?x13587) ?x15011) ?x15013) ?x15015) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x13639 (* l_0_5_60 l_0_5_60)))
 (let ((?x13637 (* l_0_5_59 l_0_5_59)))
 (let ((?x13635 (* l_0_5_58 l_0_5_58)))
 (let ((?x13633 (* l_0_5_57 l_0_5_57)))
 (let ((?x13631 (* l_0_5_56 l_0_5_56)))
 (let ((?x13629 (* l_0_5_15 l_0_5_15)))
 (let ((?x13627 (* l_0_5_14 l_0_5_14)))
 (let ((?x13618 (* l_0_5_13 l_0_5_13)))
 (let ((?x13628 (- (- (- (* (- l_0_5_11) l_0_5_11) (* l_0_5_12 l_0_5_12)) ?x13618) ?x13627)))
 (= (+ (+ (+ (+ (+ (- ?x13628 ?x13629) ?x13631) ?x13633) ?x13635) ?x13637) ?x13639) 0.0)))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13688 (* ?x13687 l_0_5_65)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13685 (* ?x13684 l_0_5_64)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13682 (* ?x13681 l_0_5_63)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13679 (* ?x13678 l_0_5_62)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13676 (* ?x13675 l_0_5_61)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13673 (* ?x13672 l_0_5_20)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13670 (* ?x13669 l_0_5_19)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13667 (* ?x13135 l_0_5_18)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13665 (* ?x12640 l_0_5_17)))
 (let ((?x13674 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_16) ?x13665) ?x13667) ?x13670) ?x13673)))
 (= (+ (+ (+ (+ (+ ?x13674 ?x13676) ?x13679) ?x13682) ?x13685) ?x13688) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13747 (* ?x13687 l_0_5_71)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13745 (* ?x13684 l_0_5_70)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13743 (* ?x13681 l_0_5_69)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13741 (* ?x13678 l_0_5_68)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13739 (* ?x13675 l_0_5_67)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13737 (* ?x13672 l_0_5_26)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13727 (* ?x13669 l_0_5_25)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13724 (* ?x13135 l_0_5_24)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13720 (* ?x12640 l_0_5_23)))
 (let ((?x13738 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_22) ?x13720) ?x13724) ?x13727) ?x13737)))
 (= (+ (+ (+ (+ (+ ?x13738 ?x13739) ?x13741) ?x13743) ?x13745) ?x13747) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13806 (* ?x13687 l_0_5_78)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13804 (* ?x13684 l_0_5_77)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13802 (* ?x13681 l_0_5_76)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13800 (* ?x13678 l_0_5_75)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13798 (* ?x13675 l_0_5_74)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13796 (* ?x13672 l_0_5_33)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13786 (* ?x13669 l_0_5_32)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13783 (* ?x13135 l_0_5_31)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13779 (* ?x12640 l_0_5_30)))
 (let ((?x13797 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_29) ?x13779) ?x13783) ?x13786) ?x13796)))
 (= (+ (+ (+ (+ (+ ?x13797 ?x13798) ?x13800) ?x13802) ?x13804) ?x13806) 0.0)))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13865 (* ?x13687 l_0_5_86)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13863 (* ?x13684 l_0_5_85)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13861 (* ?x13681 l_0_5_84)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13859 (* ?x13678 l_0_5_83)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13857 (* ?x13675 l_0_5_82)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13855 (* ?x13672 l_0_5_41)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15066 (* ?x12559 l_0_5_149)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15064 (* ?x12556 l_0_5_148)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15062 (* ?x12553 l_0_5_147)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15060 (* ?x12550 l_0_5_146)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13845 (* ?x13669 l_0_5_40)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13842 (* ?x13135 l_0_5_39)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13838 (* ?x12640 l_0_5_38)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x15055 (* ?x12637 l_0_5_37)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x15053 (* ?x12628 l_0_5_99)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x15051 (* ?x12616 l_0_5_98)))
 (let ((?x15048 (* 2.0 l_0_5_101)))
 (let ((?x15049 (* ?x15048 l_0_5_97)))
 (let ((?x15054 (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_104) ?x15049) ?x15051) ?x15053)))
 (let ((?x15065 (+ (+ (+ (- (- (- (- ?x15054 ?x15055) ?x13838) ?x13842) ?x13845) ?x15060) ?x15062) ?x15064)))
 (let ((?x15073 (+ (+ (+ (+ (+ (- (+ ?x15065 ?x15066) ?x13855) ?x13857) ?x13859) ?x13861) ?x13863) ?x13865)))
 (= ?x15073 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13929 (* l_0_5_66 l_0_5_66)))
 (let ((?x13927 (* l_0_5_65 l_0_5_65)))
 (let ((?x13925 (* l_0_5_64 l_0_5_64)))
 (let ((?x13923 (* l_0_5_63 l_0_5_63)))
 (let ((?x13921 (* l_0_5_62 l_0_5_62)))
 (let ((?x13919 (* l_0_5_61 l_0_5_61)))
 (let ((?x13917 (* l_0_5_21 l_0_5_21)))
 (let ((?x13915 (* l_0_5_20 l_0_5_20)))
 (let ((?x13913 (* l_0_5_19 l_0_5_19)))
 (let ((?x13903 (* l_0_5_18 l_0_5_18)))
 (let ((?x13914 (- (- (- (* (- l_0_5_16) l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13903) ?x13913)))
 (let ((?x13928 (+ (+ (+ (+ (+ (- (- ?x13914 ?x13915) ?x13917) ?x13919) ?x13921) ?x13923) ?x13925) ?x13927)))
 (= (+ ?x13928 ?x13929) 0.0))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x13979 (* ?x12173 l_0_5_72)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x13977 (* ?x12170 l_0_5_71)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x13975 (* ?x12167 l_0_5_70)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x13973 (* ?x12164 l_0_5_69)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x13971 (* ?x12161 l_0_5_68)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x13969 (* ?x12158 l_0_5_67)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x13967 (* ?x12135 l_0_5_27)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x13965 (* ?x12132 l_0_5_26)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x13963 (* ?x12129 l_0_5_25)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13961 (* ?x12126 l_0_5_24)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13959 (* ?x12123 l_0_5_23)))
 (let ((?x13966 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_22) ?x13959) ?x13961) ?x13963) ?x13965)))
 (let ((?x13980 (+ (+ (+ (+ (+ (+ (- ?x13966 ?x13967) ?x13969) ?x13971) ?x13973) ?x13975) ?x13977) ?x13979)))
 (= ?x13980 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x14075 (* ?x12173 l_0_5_87)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x14073 (* ?x12170 l_0_5_86)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x14071 (* ?x12167 l_0_5_85)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x14069 (* ?x12164 l_0_5_84)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x14067 (* ?x12161 l_0_5_83)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x14065 (* ?x12158 l_0_5_82)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x14063 (* ?x12135 l_0_5_42)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x14061 (* ?x12132 l_0_5_41)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x14059 (* ?x12129 l_0_5_40)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x14057 (* ?x12126 l_0_5_39)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x14055 (* ?x12123 l_0_5_38)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x15120 (* ?x12115 l_0_5_37)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x12560 (* ?x12559 l_0_5_154)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x12557 (* ?x12556 l_0_5_153)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x12554 (* ?x12553 l_0_5_152)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x12551 (* ?x12550 l_0_5_151)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12548 (* ?x12293 l_0_5_99)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12546 (* ?x12290 l_0_5_98)))
 (let ((?x12094 (* 2.0 l_0_5_106)))
 (let ((?x12536 (* ?x12094 l_0_5_97)))
 (let ((?x12552 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_109) ?x12536) ?x12546) ?x12548) ?x12551)))
 (let ((?x12561 (+ (+ (+ ?x12552 ?x12554) ?x12557) ?x12560)))
 (let ((?x15134 (+ (- (- (- (- (- (- ?x12561 ?x15120) ?x14055) ?x14057) ?x14059) ?x14061) ?x14063) ?x14065)))
 (= (+ (+ (+ (+ (+ ?x15134 ?x14067) ?x14069) ?x14071) ?x14073) ?x14075) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14151 (* l_0_5_73 l_0_5_73)))
 (let ((?x14149 (* l_0_5_72 l_0_5_72)))
 (let ((?x14147 (* l_0_5_71 l_0_5_71)))
 (let ((?x14145 (* l_0_5_70 l_0_5_70)))
 (let ((?x14143 (* l_0_5_69 l_0_5_69)))
 (let ((?x14141 (* l_0_5_68 l_0_5_68)))
 (let ((?x14139 (* l_0_5_67 l_0_5_67)))
 (let ((?x14137 (* l_0_5_28 l_0_5_28)))
 (let ((?x14135 (* l_0_5_27 l_0_5_27)))
 (let ((?x14133 (* l_0_5_26 l_0_5_26)))
 (let ((?x14122 (* l_0_5_25 l_0_5_25)))
 (let ((?x14119 (* l_0_5_24 l_0_5_24)))
 (let ((?x14132 (- (- (- (* (- l_0_5_22) l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x14119) ?x14122)))
 (let ((?x14146 (+ (+ (+ (+ (- (- (- ?x14132 ?x14133) ?x14135) ?x14137) ?x14139) ?x14141) ?x14143) ?x14145)))
 (= (+ (+ (+ ?x14146 ?x14147) ?x14149) ?x14151) 0.0))))))))))))))))
(assert
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14220 (* ?x14219 l_0_5_80)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14217 (* ?x14216 l_0_5_79)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14214 (* ?x14213 l_0_5_78)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14211 (* ?x14210 l_0_5_77)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14208 (* ?x14207 l_0_5_76)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14205 (* ?x14204 l_0_5_75)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14202 (* ?x14201 l_0_5_74)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14199 (* ?x14198 l_0_5_35)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14196 (* ?x14195 l_0_5_34)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14193 (* ?x14192 l_0_5_33)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14190 (* ?x14189 l_0_5_32)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14187 (* ?x13208 l_0_5_31)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14185 (* ?x12819 l_0_5_30)))
 (let ((?x14194 (- (- (- (- (* (* (- 2.0) l_0_5_22) l_0_5_29) ?x14185) ?x14187) ?x14190) ?x14193)))
 (let ((?x14215 (+ (+ (+ (+ (+ (- (- ?x14194 ?x14196) ?x14199) ?x14202) ?x14205) ?x14208) ?x14211) ?x14214)))
 (= (+ (+ ?x14215 ?x14217) ?x14220) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14304 (* ?x14219 l_0_5_88)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14302 (* ?x14216 l_0_5_87)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14300 (* ?x14213 l_0_5_86)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14298 (* ?x14210 l_0_5_85)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14296 (* ?x14207 l_0_5_84)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14294 (* ?x14204 l_0_5_83)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14292 (* ?x14201 l_0_5_82)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14290 (* ?x14198 l_0_5_43)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14288 (* ?x14195 l_0_5_42)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14286 (* ?x14192 l_0_5_41)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14274 (* ?x14189 l_0_5_40)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14270 (* ?x13208 l_0_5_39)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14266 (* ?x12819 l_0_5_38)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x14262 (* ?x13454 l_0_5_37)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x14706 (* ?x12559 l_0_5_160)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x14704 (* ?x12556 l_0_5_159)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x14702 (* ?x12553 l_0_5_158)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x14700 (* ?x12550 l_0_5_157)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x14698 (* ?x14697 l_0_5_99)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x14695 (* ?x14694 l_0_5_98)))
 (let ((?x14691 (* 2.0 l_0_5_112)))
 (let ((?x14692 (* ?x14691 l_0_5_97)))
 (let ((?x14846 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_115) ?x14692) ?x14695) ?x14698) ?x14700)))
 (let ((?x14849 (+ (+ (+ ?x14846 ?x14702) ?x14704) ?x14706)))
 (let ((?x15168 (- (- (- (- (- (- (- ?x14849 ?x14262) ?x14266) ?x14270) ?x14274) ?x14286) ?x14288) ?x14290)))
 (let ((?x15175 (+ (+ (+ (+ (+ (+ (+ ?x15168 ?x14292) ?x14294) ?x14296) ?x14298) ?x14300) ?x14302) ?x14304)))
 (= ?x15175 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14395 (* l_0_5_81 l_0_5_81)))
 (let ((?x14393 (* l_0_5_80 l_0_5_80)))
 (let ((?x14391 (* l_0_5_79 l_0_5_79)))
 (let ((?x14389 (* l_0_5_78 l_0_5_78)))
 (let ((?x14387 (* l_0_5_77 l_0_5_77)))
 (let ((?x14385 (* l_0_5_76 l_0_5_76)))
 (let ((?x14383 (* l_0_5_75 l_0_5_75)))
 (let ((?x14381 (* l_0_5_74 l_0_5_74)))
 (let ((?x14379 (* l_0_5_36 l_0_5_36)))
 (let ((?x14377 (* l_0_5_35 l_0_5_35)))
 (let ((?x14375 (* l_0_5_34 l_0_5_34)))
 (let ((?x14373 (* l_0_5_33 l_0_5_33)))
 (let ((?x14362 (* l_0_5_32 l_0_5_32)))
 (let ((?x14358 (* l_0_5_31 l_0_5_31)))
 (let ((?x14363 (- (- (- (* (- l_0_5_29) l_0_5_29) (* l_0_5_30 l_0_5_30)) ?x14358) ?x14362)))
 (let ((?x14386 (+ (+ (+ (- (- (- (- ?x14363 ?x14373) ?x14375) ?x14377) ?x14379) ?x14381) ?x14383) ?x14385)))
 (= (+ (+ (+ (+ (+ ?x14386 ?x14387) ?x14389) ?x14391) ?x14393) ?x14395) 0.0))))))))))))))))))
(assert
 (let ((?x14474 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14471 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14468 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14465 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14462 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14459 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14456 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14453 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14450 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14447 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14444 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14441 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14438 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x14435 (* ?x13246 l_0_5_39)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x14433 (* ?x13237 l_0_5_38)))
 (let ((?x13517 (* 2.0 l_0_5_29)))
 (let ((?x15218 (* ?x13517 l_0_5_37)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15216 (* ?x12559 l_0_5_167)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15214 (* ?x12556 l_0_5_166)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15212 (* ?x12553 l_0_5_165)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15210 (* ?x12550 l_0_5_164)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x15208 (* ?x15207 l_0_5_99)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x15205 (* ?x15204 l_0_5_98)))
 (let ((?x15201 (* 2.0 l_0_5_119)))
 (let ((?x15202 (* ?x15201 l_0_5_97)))
 (let ((?x15211 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_122) ?x15202) ?x15205) ?x15208) ?x15210)))
 (let ((?x15217 (+ (+ (+ ?x15211 ?x15212) ?x15214) ?x15216)))
 (let ((?x15225 (- (- (- (- (- (- (- ?x15217 ?x15218) ?x14433) ?x14435) ?x14438) ?x14441) ?x14444) ?x14447)))
 (let ((?x15232 (+ (+ (+ (+ (+ (+ (- ?x15225 ?x14450) ?x14453) ?x14456) ?x14459) ?x14462) ?x14465) ?x14468)))
 (= (+ (+ ?x15232 ?x14471) ?x14474) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14574 (* l_0_5_90 l_0_5_90)))
 (let ((?x14572 (* l_0_5_89 l_0_5_89)))
 (let ((?x14570 (* l_0_5_88 l_0_5_88)))
 (let ((?x14568 (* l_0_5_87 l_0_5_87)))
 (let ((?x14566 (* l_0_5_86 l_0_5_86)))
 (let ((?x14564 (* l_0_5_85 l_0_5_85)))
 (let ((?x14562 (* l_0_5_84 l_0_5_84)))
 (let ((?x14560 (* l_0_5_83 l_0_5_83)))
 (let ((?x14558 (* l_0_5_82 l_0_5_82)))
 (let ((?x14556 (* l_0_5_45 l_0_5_45)))
 (let ((?x14554 (* l_0_5_44 l_0_5_44)))
 (let ((?x14552 (* l_0_5_43 l_0_5_43)))
 (let ((?x14550 (* l_0_5_42 l_0_5_42)))
 (let ((?x14537 (* l_0_5_41 l_0_5_41)))
 (let ((?x14534 (* l_0_5_40 l_0_5_40)))
 (let ((?x14530 (* l_0_5_39 l_0_5_39)))
 (let ((?x14526 (* l_0_5_38 l_0_5_38)))
 (let ((?x14578 (* l_0_5_37 l_0_5_37)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15313 (* ?x12559 l_0_5_175)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15311 (* ?x12556 l_0_5_174)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15309 (* ?x12553 l_0_5_173)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15307 (* ?x12550 l_0_5_172)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x15305 (* ?x15304 l_0_5_99)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x15302 (* ?x15301 l_0_5_98)))
 (let ((?x15298 (* 2.0 l_0_5_127)))
 (let ((?x15299 (* ?x15298 l_0_5_97)))
 (let ((?x15308 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_130) ?x15299) ?x15302) ?x15305) ?x15307)))
 (let ((?x15314 (+ (+ (+ ?x15308 ?x15309) ?x15311) ?x15313)))
 (let ((?x15321 (- (- (- (- (- (- (- ?x15314 ?x14578) ?x14526) ?x14530) ?x14534) ?x14537) ?x14550) ?x14552)))
 (let ((?x15328 (+ (+ (+ (+ (+ (- (- ?x15321 ?x14554) ?x14556) ?x14558) ?x14560) ?x14562) ?x14564) ?x14566)))
 (= (+ (+ (+ (+ ?x15328 ?x14568) ?x14570) ?x14572) ?x14574) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12101 (* ?x12100 l_0_5_47)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15395 (* ?x15394 l_0_5_227)))
 (let ((?x15391 (- (* (* 2.0 l_0_5_1) l_0_5_2) (* (* 2.0 l_0_5_182) l_0_5_184))))
 (let ((?x15398 (- (- (- ?x15391 (* (* 2.0 l_0_5_183) l_0_5_185)) ?x15395) (* (* 2.0 l_0_5_272) l_0_5_274))))
 (= (- (- ?x15398 (* (* 2.0 l_0_5_273) l_0_5_275)) ?x12101) 0.0))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12156 (* ?x12100 l_0_5_49)))
 (let ((?x15453 (* l_0_5_276 l_0_5_276)))
 (let ((?x15451 (* l_0_5_275 l_0_5_275)))
 (let ((?x15449 (* l_0_5_274 l_0_5_274)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15447 (* ?x15394 l_0_5_229)))
 (let ((?x15440 (- (* (* 2.0 l_0_5_1) l_0_5_4) (* (* 1.0 l_0_5_184) l_0_5_184))))
 (let ((?x15446 (- (- ?x15440 (* (* 1.0 l_0_5_185) l_0_5_185)) (* (* 1.0 l_0_5_186) l_0_5_186))))
 (= (- (- (- (- (- ?x15446 ?x15447) ?x15449) ?x15451) ?x15453) ?x12156) 0.0)))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12278 (* ?x12100 l_0_5_52)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15497 (* ?x15394 l_0_5_232)))
 (let ((?x15490 (- (* (* 2.0 l_0_5_1) l_0_5_7) (* (* 2.0 l_0_5_184) l_0_5_187))))
 (let ((?x15496 (- (- ?x15490 (* (* 2.0 l_0_5_185) l_0_5_188)) (* (* 2.0 l_0_5_186) l_0_5_189))))
 (let ((?x15504 (- (- (- ?x15496 ?x15497) (* (* 2.0 l_0_5_274) l_0_5_277)) (* (* 2.0 l_0_5_275) l_0_5_278))))
 (= (- (- ?x15504 (* (* 2.0 l_0_5_276) l_0_5_279)) ?x12278) 0.0)))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x15576 (* ?x14758 l_0_5_94)))
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12329 (* ?x12100 l_0_5_56)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15567 (* ?x15394 l_0_5_236)))
 (let ((?x15447 (* ?x15394 l_0_5_229)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x15558 (* ?x12097 l_0_5_139)))
 (let ((?x15561 (- (- (* (* 2.0 l_0_5_1) l_0_5_11) ?x15558) (* (* 2.0 l_0_5_184) l_0_5_191))))
 (let ((?x15565 (- (- ?x15561 (* (* 2.0 l_0_5_185) l_0_5_192)) (* (* 2.0 l_0_5_186) l_0_5_193))))
 (let ((?x15572 (- (- (- (+ ?x15565 ?x15447) ?x15567) (* (* 2.0 l_0_5_274) l_0_5_281)) (* (* 2.0 l_0_5_275) l_0_5_282))))
 (= (+ (- (- ?x15572 (* (* 2.0 l_0_5_276) l_0_5_283)) ?x12329) ?x15576) 0.0))))))))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12388 (* ?x12100 l_0_5_61)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15642 (* ?x15394 l_0_5_241)))
 (let ((?x15637 (- (* (* 2.0 l_0_5_1) l_0_5_16) (* (* 2.0 l_0_5_184) l_0_5_196))))
 (let ((?x15641 (- (- ?x15637 (* (* 2.0 l_0_5_185) l_0_5_197)) (* (* 2.0 l_0_5_186) l_0_5_198))))
 (let ((?x15647 (- (- (- ?x15641 ?x15642) (* (* 2.0 l_0_5_274) l_0_5_286)) (* (* 2.0 l_0_5_275) l_0_5_287))))
 (= (- (- ?x15647 (* (* 2.0 l_0_5_276) l_0_5_288)) ?x12388) 0.0)))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12394 (* ?x12100 l_0_5_67)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15706 (* ?x15394 l_0_5_247)))
 (let ((?x15701 (- (* (* 2.0 l_0_5_1) l_0_5_22) (* (* 2.0 l_0_5_184) l_0_5_202))))
 (let ((?x15705 (- (- ?x15701 (* (* 2.0 l_0_5_185) l_0_5_203)) (* (* 2.0 l_0_5_186) l_0_5_204))))
 (let ((?x15711 (- (- (- ?x15705 ?x15706) (* (* 2.0 l_0_5_274) l_0_5_292)) (* (* 2.0 l_0_5_275) l_0_5_293))))
 (= (- (- ?x15711 (* (* 2.0 l_0_5_276) l_0_5_294)) ?x12394) 0.0)))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12404 (* ?x12100 l_0_5_74)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15770 (* ?x15394 l_0_5_254)))
 (let ((?x15765 (- (* (* 2.0 l_0_5_1) l_0_5_29) (* (* 2.0 l_0_5_184) l_0_5_209))))
 (let ((?x15769 (- (- ?x15765 (* (* 2.0 l_0_5_185) l_0_5_210)) (* (* 2.0 l_0_5_186) l_0_5_211))))
 (let ((?x15775 (- (- (- ?x15769 ?x15770) (* (* 2.0 l_0_5_274) l_0_5_299)) (* (* 2.0 l_0_5_275) l_0_5_300))))
 (= (- (- ?x15775 (* (* 2.0 l_0_5_276) l_0_5_301)) ?x12404) 0.0)))))))))
(assert
 (let ((?x12100 (* 2.0 l_0_5_46)))
 (let ((?x12414 (* ?x12100 l_0_5_82)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15834 (* ?x15394 l_0_5_262)))
 (let ((?x15829 (- (* (* 2.0 l_0_5_1) l_0_5_37) (* (* 2.0 l_0_5_184) l_0_5_217))))
 (let ((?x15833 (- (- ?x15829 (* (* 2.0 l_0_5_185) l_0_5_218)) (* (* 2.0 l_0_5_186) l_0_5_219))))
 (let ((?x15839 (- (- (- ?x15833 ?x15834) (* (* 2.0 l_0_5_274) l_0_5_307)) (* (* 2.0 l_0_5_275) l_0_5_308))))
 (= (- (- ?x15839 (* (* 2.0 l_0_5_276) l_0_5_309)) ?x12414) 0.0)))))))))
(assert
 (let ((?x12443 (* l_0_5_48 l_0_5_48)))
 (let ((?x12441 (* l_0_5_47 l_0_5_47)))
 (let ((?x12439 (* l_0_5_3 l_0_5_3)))
 (let ((?x15892 (* l_0_5_228 l_0_5_228)))
 (let ((?x15894 (+ (- (- (* l_0_5_2 l_0_5_2) (* l_0_5_227 l_0_5_227)) ?x15892) ?x12439)))
 (= (- (- ?x15894 ?x12441) ?x12443) 0.0)))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12496 (* ?x12495 l_0_5_50)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12493 (* ?x12492 l_0_5_49)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12490 (* ?x12489 l_0_5_5)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x15913 (* ?x15912 l_0_5_230)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x15910 (* ?x15909 l_0_5_229)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12487 (* ?x12486 l_0_5_4)))
 (= (- (- (+ (- (- ?x12487 ?x15910) ?x15913) ?x12490) ?x12493) ?x12496) 0.0))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12495 l_0_5_53)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12492 l_0_5_52)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12564 (* ?x12489 l_0_5_8)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x15941 (* ?x15912 l_0_5_233)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x15939 (* ?x15909 l_0_5_232)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12562 (* ?x12486 l_0_5_7)))
 (= (- (- (+ (- (- ?x12562 ?x15939) ?x15941) ?x12564) ?x12566) ?x12568) 0.0))))))))))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x15982 (* ?x14883 l_0_5_95)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x15980 (* ?x14880 l_0_5_94)))
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12660 (* ?x12495 l_0_5_57)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12658 (* ?x12492 l_0_5_56)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x15976 (* ?x15912 l_0_5_237)))
 (let ((?x15913 (* ?x15912 l_0_5_230)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x15973 (* ?x15909 l_0_5_236)))
 (let ((?x15910 (* ?x15909 l_0_5_229)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x15970 (* ?x12434 l_0_5_140)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x15968 (* ?x12431 l_0_5_139)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x12641 (* ?x12640 l_0_5_3)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x12638 (* ?x12637 l_0_5_2)))
 (let ((?x15977 (- (+ (- (+ (- (- (+ ?x12638 ?x12641) ?x15968) ?x15970) ?x15910) ?x15973) ?x15913) ?x15976)))
 (= (+ (+ (- (- ?x15977 ?x12658) ?x12660) ?x15980) ?x15982) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12748 (* ?x12495 l_0_5_62)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12746 (* ?x12492 l_0_5_61)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16027 (* ?x15912 l_0_5_242)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16025 (* ?x15909 l_0_5_241)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x12744 (* ?x12123 l_0_5_3)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x12742 (* ?x12115 l_0_5_2)))
 (= (- (- (- (- (+ ?x12742 ?x12744) ?x16025) ?x16027) ?x12746) ?x12748) 0.0))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12824 (* ?x12495 l_0_5_68)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12822 (* ?x12492 l_0_5_67)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x12820 (* ?x12819 l_0_5_3)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16054 (* ?x15912 l_0_5_248)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16052 (* ?x15909 l_0_5_247)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12817 (* ?x12486 l_0_5_22)))
 (= (- (- (+ (- (- ?x12817 ?x16052) ?x16054) ?x12820) ?x12822) ?x12824) 0.0))))))))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x15576 (* ?x14758 l_0_5_94)))
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12915 (* ?x12495 l_0_5_75)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12913 (* ?x12492 l_0_5_74)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12911 (* ?x12489 l_0_5_30)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16083 (* ?x15912 l_0_5_255)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16081 (* ?x15909 l_0_5_254)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12909 (* ?x12486 l_0_5_29)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x15558 (* ?x12097 l_0_5_139)))
 (let ((?x16088 (- (- (- (+ (- (- (+ ?x15558 ?x12909) ?x16081) ?x16083) ?x12911) ?x12913) ?x12915) ?x15576)))
 (= ?x16088 0.0)))))))))))))))))))
(assert
 (let ((?x12495 (* 2.0 l_0_5_48)))
 (let ((?x12987 (* ?x12495 l_0_5_83)))
 (let ((?x12492 (* 2.0 l_0_5_47)))
 (let ((?x12985 (* ?x12492 l_0_5_82)))
 (let ((?x12489 (* 2.0 l_0_5_3)))
 (let ((?x12983 (* ?x12489 l_0_5_38)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16117 (* ?x15912 l_0_5_263)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16115 (* ?x15909 l_0_5_262)))
 (let ((?x12486 (* 2.0 l_0_5_2)))
 (let ((?x12981 (* ?x12486 l_0_5_37)))
 (= (- (- (+ (- (- ?x12981 ?x16115) ?x16117) ?x12983) ?x12985) ?x12987) 0.0))))))))))))))
(assert
 (let ((?x13070 (* l_0_5_6 l_0_5_6)))
 (let ((?x13068 (* l_0_5_51 l_0_5_51)))
 (let ((?x13066 (* l_0_5_50 l_0_5_50)))
 (let ((?x13064 (* l_0_5_5 l_0_5_5)))
 (let ((?x13051 (* l_0_5_49 l_0_5_49)))
 (let ((?x13074 (* l_0_5_4 l_0_5_4)))
 (let ((?x16147 (* l_0_5_231 l_0_5_231)))
 (let ((?x16148 (- (- (* (- l_0_5_229) l_0_5_229) (* l_0_5_230 l_0_5_230)) ?x16147)))
 (= (+ (- (- (+ (- (+ ?x16148 ?x13074) ?x13051) ?x13064) ?x13066) ?x13068) ?x13070) 0.0))))))))))
(assert
 (let ((?x13100 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13097 (* ?x13096 l_0_5_54)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13094 (* ?x13093 l_0_5_53)))
 (let ((?x13091 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13088 (* ?x13087 l_0_5_52)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16184 (* ?x16183 l_0_5_234)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16181 (* ?x16180 l_0_5_233)))
 (let ((?x16188 (+ (- (- (* (* (- 2.0) l_0_5_229) l_0_5_232) ?x16181) ?x16184) (* (* 2.0 l_0_5_4) l_0_5_7))))
 (= (+ (- (- (+ (- ?x16188 ?x13088) ?x13091) ?x13094) ?x13097) ?x13100) 0.0)))))))))))))))
(assert
 (let ((?x16248 (* l_0_5_96 l_0_5_96)))
 (let ((?x16246 (* l_0_5_95 l_0_5_95)))
 (let ((?x16244 (* l_0_5_94 l_0_5_94)))
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13142 (* ?x13096 l_0_5_58)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13140 (* ?x13093 l_0_5_57)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13138 (* ?x13087 l_0_5_56)))
 (let ((?x16147 (* l_0_5_231 l_0_5_231)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16238 (* ?x16183 l_0_5_238)))
 (let ((?x16145 (* l_0_5_230 l_0_5_230)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16235 (* ?x16180 l_0_5_237)))
 (let ((?x16157 (* l_0_5_229 l_0_5_229)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16232 (* ?x16231 l_0_5_236)))
 (let ((?x16229 (* l_0_5_141 l_0_5_141)))
 (let ((?x16227 (* l_0_5_140 l_0_5_140)))
 (let ((?x16225 (* l_0_5_139 l_0_5_139)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13136 (* ?x13135 l_0_5_6)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13133 (* ?x12640 l_0_5_5)))
 (let ((?x16228 (- (- (+ (+ (* (* 2.0 l_0_5_11) l_0_5_4) ?x13133) ?x13136) ?x16225) ?x16227)))
 (let ((?x16240 (+ (- (+ (- (+ (- (- ?x16228 ?x16229) ?x16232) ?x16157) ?x16235) ?x16145) ?x16238) ?x16147)))
 (= (+ (+ (+ (- (- (- ?x16240 ?x13138) ?x13140) ?x13142) ?x16244) ?x16246) ?x16248) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13178 (* ?x13096 l_0_5_63)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13176 (* ?x13093 l_0_5_62)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13174 (* ?x13087 l_0_5_61)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16303 (* ?x16183 l_0_5_243)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16301 (* ?x16180 l_0_5_242)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16299 (* ?x16231 l_0_5_241)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13172 (* ?x12126 l_0_5_6)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13164 (* ?x12123 l_0_5_5)))
 (let ((?x16302 (- (- (+ (+ (* (* 2.0 l_0_5_16) l_0_5_4) ?x13164) ?x13172) ?x16299) ?x16301)))
 (= (- (- (- (- ?x16302 ?x16303) ?x13174) ?x13176) ?x13178) 0.0)))))))))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13215 (* ?x13096 l_0_5_69)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13213 (* ?x13093 l_0_5_68)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13211 (* ?x13087 l_0_5_67)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x13209 (* ?x13208 l_0_5_6)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16347 (* ?x16183 l_0_5_249)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16345 (* ?x16180 l_0_5_248)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x13200 (* ?x12819 l_0_5_5)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16342 (* ?x16231 l_0_5_247)))
 (let ((?x16348 (- (- (+ (- (* (* 2.0 l_0_5_22) l_0_5_4) ?x16342) ?x13200) ?x16345) ?x16347)))
 (= (- (- (- (+ ?x16348 ?x13209) ?x13211) ?x13213) ?x13215) 0.0)))))))))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13253 (* ?x13096 l_0_5_76)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13251 (* ?x13093 l_0_5_75)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13249 (* ?x13087 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13247 (* ?x13246 l_0_5_6)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13238 (* ?x13237 l_0_5_5)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16390 (* ?x16183 l_0_5_256)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16388 (* ?x16180 l_0_5_255)))
 (let ((?x16393 (+ (- (- (* (* (- 2.0) l_0_5_229) l_0_5_254) ?x16388) ?x16390) (* (* 2.0 l_0_5_29) l_0_5_4))))
 (= (- (- (- (+ (+ ?x16393 ?x13238) ?x13247) ?x13249) ?x13251) ?x13253) 0.0)))))))))))))))))
(assert
 (let ((?x13096 (* 2.0 l_0_5_51)))
 (let ((?x13291 (* ?x13096 l_0_5_84)))
 (let ((?x13093 (* 2.0 l_0_5_50)))
 (let ((?x13289 (* ?x13093 l_0_5_83)))
 (let ((?x13087 (* 2.0 l_0_5_49)))
 (let ((?x13287 (* ?x13087 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13285 (* ?x13284 l_0_5_6)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13276 (* ?x13275 l_0_5_5)))
 (let ((?x13565 (* 2.0 l_0_5_37)))
 (let ((?x14920 (* ?x13565 l_0_5_4)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16431 (* ?x16183 l_0_5_264)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16429 (* ?x16180 l_0_5_263)))
 (let ((?x16434 (+ (+ (- (- (* (* (- 2.0) l_0_5_229) l_0_5_262) ?x16429) ?x16431) ?x14920) ?x13276)))
 (= (- (- (- (+ ?x16434 ?x13285) ?x13287) ?x13289) ?x13291) 0.0)))))))))))))))))))
(assert
 (let ((?x13331 (* l_0_5_9 l_0_5_9)))
 (let ((?x13329 (* l_0_5_8 l_0_5_8)))
 (let ((?x13327 (* l_0_5_7 l_0_5_7)))
 (let ((?x13325 (* l_0_5_55 l_0_5_55)))
 (let ((?x13323 (* l_0_5_54 l_0_5_54)))
 (let ((?x13321 (* l_0_5_53 l_0_5_53)))
 (let ((?x13313 (* l_0_5_52 l_0_5_52)))
 (let ((?x16471 (* l_0_5_235 l_0_5_235)))
 (let ((?x16469 (* l_0_5_234 l_0_5_234)))
 (let ((?x16467 (* l_0_5_233 l_0_5_233)))
 (let ((?x16470 (- (- (- (* l_0_5_10 l_0_5_10) (* l_0_5_232 l_0_5_232)) ?x16467) ?x16469)))
 (let ((?x16478 (+ (+ (- (- (- (- (- ?x16470 ?x16471) ?x13313) ?x13321) ?x13323) ?x13325) ?x13327) ?x13329)))
 (= (+ ?x16478 ?x13331) 0.0))))))))))))))
(assert
 (let ((?x14934 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x14931 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x14928 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13366 (* ?x13365 l_0_5_59)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13363 (* ?x13362 l_0_5_58)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13360 (* ?x13359 l_0_5_57)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13357 (* ?x13356 l_0_5_56)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16523 (* ?x14634 l_0_5_239)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16521 (* ?x14631 l_0_5_238)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16519 (* ?x14628 l_0_5_237)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16517 (* ?x14625 l_0_5_236)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16184 (* ?x16183 l_0_5_234)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16181 (* ?x16180 l_0_5_233)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x14918 (* ?x12483 l_0_5_144)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x14916 (* ?x12480 l_0_5_143)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x14915 (* ?x12477 l_0_5_142)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13354 (* ?x13135 l_0_5_9)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13352 (* ?x12640 l_0_5_8)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x13350 (* ?x12637 l_0_5_7)))
 (let ((?x16510 (- (+ (+ (+ (* (* 2.0 l_0_5_10) l_0_5_14) ?x13350) ?x13352) ?x13354) ?x14915)))
 (let ((?x16515 (+ (+ (- (- ?x16510 ?x14916) ?x14918) (* (* 2.0 l_0_5_229) l_0_5_232)) ?x16181)))
 (let ((?x16526 (- (- (- (- (- (- (+ ?x16515 ?x16184) ?x16517) ?x16519) ?x16521) ?x16523) ?x13357) ?x13360)))
 (= (+ (+ (+ (- (- ?x16526 ?x13363) ?x13366) ?x14928) ?x14931) ?x14934) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13413 (* ?x13365 l_0_5_64)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13411 (* ?x13362 l_0_5_63)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13409 (* ?x13359 l_0_5_62)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13407 (* ?x13356 l_0_5_61)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16597 (* ?x14634 l_0_5_244)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16595 (* ?x14631 l_0_5_243)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16593 (* ?x14628 l_0_5_242)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16591 (* ?x14625 l_0_5_241)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13405 (* ?x12126 l_0_5_9)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13396 (* ?x12123 l_0_5_8)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x13392 (* ?x12115 l_0_5_7)))
 (let ((?x16592 (- (+ (+ (+ (* (* 2.0 l_0_5_10) l_0_5_19) ?x13392) ?x13396) ?x13405) ?x16591)))
 (let ((?x16602 (- (- (- (- (- (- (- ?x16592 ?x16593) ?x16595) ?x16597) ?x13407) ?x13409) ?x13411) ?x13413)))
 (= ?x16602 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13539 (* ?x13365 l_0_5_77)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13537 (* ?x13362 l_0_5_76)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13535 (* ?x13359 l_0_5_75)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13533 (* ?x13356 l_0_5_74)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x13531 (* ?x13246 l_0_5_9)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x13522 (* ?x13237 l_0_5_8)))
 (let ((?x13517 (* 2.0 l_0_5_29)))
 (let ((?x13519 (* ?x13517 l_0_5_7)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16653 (* ?x14634 l_0_5_257)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16651 (* ?x14631 l_0_5_256)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16649 (* ?x14628 l_0_5_255)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16647 (* ?x14625 l_0_5_254)))
 (let ((?x16654 (- (- (- (- (* (* 2.0 l_0_5_10) l_0_5_32) ?x16647) ?x16649) ?x16651) ?x16653)))
 (let ((?x16661 (- (- (- (- (+ (+ (+ ?x16654 ?x13519) ?x13522) ?x13531) ?x13533) ?x13535) ?x13537) ?x13539)))
 (= ?x16661 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13365 (* 2.0 l_0_5_55)))
 (let ((?x13587 (* ?x13365 l_0_5_85)))
 (let ((?x13362 (* 2.0 l_0_5_54)))
 (let ((?x13585 (* ?x13362 l_0_5_84)))
 (let ((?x13359 (* 2.0 l_0_5_53)))
 (let ((?x13583 (* ?x13359 l_0_5_83)))
 (let ((?x13356 (* 2.0 l_0_5_52)))
 (let ((?x13581 (* ?x13356 l_0_5_82)))
 (let ((?x13284 (* 2.0 l_0_5_39)))
 (let ((?x13579 (* ?x13284 l_0_5_9)))
 (let ((?x13275 (* 2.0 l_0_5_38)))
 (let ((?x13570 (* ?x13275 l_0_5_8)))
 (let ((?x13565 (* 2.0 l_0_5_37)))
 (let ((?x13567 (* ?x13565 l_0_5_7)))
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16712 (* ?x14634 l_0_5_265)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16710 (* ?x14631 l_0_5_264)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16708 (* ?x14628 l_0_5_263)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16706 (* ?x14625 l_0_5_262)))
 (let ((?x16713 (- (- (- (- (* (* 2.0 l_0_5_10) l_0_5_40) ?x16706) ?x16708) ?x16710) ?x16712)))
 (let ((?x16720 (- (- (- (- (+ (+ (+ ?x16713 ?x13567) ?x13570) ?x13579) ?x13581) ?x13583) ?x13585) ?x13587)))
 (= ?x16720 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13639 (* l_0_5_60 l_0_5_60)))
 (let ((?x13637 (* l_0_5_59 l_0_5_59)))
 (let ((?x13635 (* l_0_5_58 l_0_5_58)))
 (let ((?x13633 (* l_0_5_57 l_0_5_57)))
 (let ((?x13631 (* l_0_5_56 l_0_5_56)))
 (let ((?x16787 (* l_0_5_240 l_0_5_240)))
 (let ((?x16785 (* l_0_5_239 l_0_5_239)))
 (let ((?x16783 (* l_0_5_238 l_0_5_238)))
 (let ((?x16781 (* l_0_5_237 l_0_5_237)))
 (let ((?x16779 (* l_0_5_236 l_0_5_236)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16238 (* ?x16183 l_0_5_238)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16235 (* ?x16180 l_0_5_237)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16232 (* ?x16231 l_0_5_236)))
 (let ((?x13629 (* l_0_5_15 l_0_5_15)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16773 (* ?x12483 l_0_5_148)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16771 (* ?x12480 l_0_5_147)))
 (let ((?x13627 (* l_0_5_14 l_0_5_14)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16768 (* ?x12477 l_0_5_146)))
 (let ((?x13618 (* l_0_5_13 l_0_5_13)))
 (let ((?x13615 (* l_0_5_12 l_0_5_12)))
 (let ((?x13643 (* l_0_5_11 l_0_5_11)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x16763 (* ?x12628 l_0_5_96)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x16761 (* ?x12616 l_0_5_95)))
 (let ((?x16766 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_94) ?x16761) ?x16763) ?x13643) ?x13615)))
 (let ((?x16776 (+ (+ (- (- (+ (- (+ ?x16766 ?x13618) ?x16768) ?x13627) ?x16771) ?x16773) ?x13629) ?x16232)))
 (let ((?x16788 (- (- (- (- (- (+ (+ ?x16776 ?x16235) ?x16238) ?x16779) ?x16781) ?x16783) ?x16785) ?x16787)))
 (= (- (- (- (- (- ?x16788 ?x13631) ?x13633) ?x13635) ?x13637) ?x13639) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13688 (* ?x13687 l_0_5_65)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13685 (* ?x13684 l_0_5_64)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13682 (* ?x13681 l_0_5_63)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13679 (* ?x13678 l_0_5_62)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13676 (* ?x13675 l_0_5_61)))
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x16876 (* ?x16875 l_0_5_245)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x16873 (* ?x16872 l_0_5_244)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x16870 (* ?x16869 l_0_5_243)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x16867 (* ?x16866 l_0_5_242)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x16864 (* ?x16863 l_0_5_241)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16303 (* ?x16183 l_0_5_243)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16301 (* ?x16180 l_0_5_242)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16299 (* ?x16231 l_0_5_241)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13673 (* ?x13672 l_0_5_20)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x12484 (* ?x12483 l_0_5_153)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x12481 (* ?x12480 l_0_5_152)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13670 (* ?x13669 l_0_5_19)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x12478 (* ?x12477 l_0_5_151)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13667 (* ?x13135 l_0_5_18)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13665 (* ?x12640 l_0_5_17)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12475 (* ?x12293 l_0_5_96)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12473 (* ?x12290 l_0_5_95)))
 (let ((?x16852 (+ (+ (+ (* (* 2.0 l_0_5_106) l_0_5_94) ?x12473) ?x12475) (* (* 2.0 l_0_5_11) l_0_5_16))))
 (let ((?x16859 (+ (- (- (+ (- (+ (+ ?x16852 ?x13665) ?x13667) ?x12478) ?x13670) ?x12481) ?x12484) ?x13673)))
 (let ((?x16874 (- (- (- (- (+ (+ (+ ?x16859 ?x16299) ?x16301) ?x16303) ?x16864) ?x16867) ?x16870) ?x16873)))
 (= (- (- (- (- (- (- ?x16874 ?x16876) ?x13676) ?x13679) ?x13682) ?x13685) ?x13688) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13747 (* ?x13687 l_0_5_71)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13745 (* ?x13684 l_0_5_70)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13743 (* ?x13681 l_0_5_69)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13741 (* ?x13678 l_0_5_68)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13739 (* ?x13675 l_0_5_67)))
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x16975 (* ?x16875 l_0_5_251)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x16973 (* ?x16872 l_0_5_250)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x16971 (* ?x16869 l_0_5_249)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x16969 (* ?x16866 l_0_5_248)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x16967 (* ?x16863 l_0_5_247)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16347 (* ?x16183 l_0_5_249)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16345 (* ?x16180 l_0_5_248)))
 (let ((?x16231 (* 2.0 l_0_5_229)))
 (let ((?x16342 (* ?x16231 l_0_5_247)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13737 (* ?x13672 l_0_5_26)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16961 (* ?x12483 l_0_5_159)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16959 (* ?x12480 l_0_5_158)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13727 (* ?x13669 l_0_5_25)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16956 (* ?x12477 l_0_5_157)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13724 (* ?x13135 l_0_5_24)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13720 (* ?x12640 l_0_5_23)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x16952 (* ?x14697 l_0_5_96)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x16950 (* ?x14694 l_0_5_95)))
 (let ((?x16949 (+ (* (* 2.0 l_0_5_11) l_0_5_22) (* (* 2.0 l_0_5_112) l_0_5_94))))
 (let ((?x16960 (- (+ (- (+ (+ (+ (+ ?x16949 ?x16950) ?x16952) ?x13720) ?x13724) ?x16956) ?x13727) ?x16959)))
 (let ((?x16970 (- (- (+ (+ (+ (+ (- ?x16960 ?x16961) ?x13737) ?x16342) ?x16345) ?x16347) ?x16967) ?x16969)))
 (let ((?x16980 (- (- (- (- (- (- (- ?x16970 ?x16971) ?x16973) ?x16975) ?x13739) ?x13741) ?x13743) ?x13745)))
 (= (- ?x16980 ?x13747) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13806 (* ?x13687 l_0_5_78)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13804 (* ?x13684 l_0_5_77)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13802 (* ?x13681 l_0_5_76)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13800 (* ?x13678 l_0_5_75)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13798 (* ?x13675 l_0_5_74)))
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x17090 (* ?x16875 l_0_5_258)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x17088 (* ?x16872 l_0_5_257)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x17086 (* ?x16869 l_0_5_256)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x17084 (* ?x16866 l_0_5_255)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x17082 (* ?x16863 l_0_5_254)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16390 (* ?x16183 l_0_5_256)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16388 (* ?x16180 l_0_5_255)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13796 (* ?x13672 l_0_5_33)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17075 (* ?x12483 l_0_5_166)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17073 (* ?x12480 l_0_5_165)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13786 (* ?x13669 l_0_5_32)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17070 (* ?x12477 l_0_5_164)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13783 (* ?x13135 l_0_5_31)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x17067 (* ?x15207 l_0_5_96)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x17065 (* ?x15204 l_0_5_95)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13779 (* ?x12640 l_0_5_30)))
 (let ((?x17063 (+ (* (* 2.0 l_0_5_11) l_0_5_29) (* (* 2.0 l_0_5_119) l_0_5_94))))
 (let ((?x17074 (- (+ (- (+ (+ (+ (+ ?x17063 ?x13779) ?x17065) ?x17067) ?x13783) ?x17070) ?x13786) ?x17073)))
 (let ((?x17080 (+ (+ (+ (- ?x17074 ?x17075) ?x13796) (* (* 2.0 l_0_5_229) l_0_5_254)) ?x16388)))
 (let ((?x17092 (- (- (- (- (- (- (+ ?x17080 ?x16390) ?x17082) ?x17084) ?x17086) ?x17088) ?x17090) ?x13798)))
 (= (- (- (- (- ?x17092 ?x13800) ?x13802) ?x13804) ?x13806) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13687 (* 2.0 l_0_5_60)))
 (let ((?x13865 (* ?x13687 l_0_5_86)))
 (let ((?x13684 (* 2.0 l_0_5_59)))
 (let ((?x13863 (* ?x13684 l_0_5_85)))
 (let ((?x13681 (* 2.0 l_0_5_58)))
 (let ((?x13861 (* ?x13681 l_0_5_84)))
 (let ((?x13678 (* 2.0 l_0_5_57)))
 (let ((?x13859 (* ?x13678 l_0_5_83)))
 (let ((?x13675 (* 2.0 l_0_5_56)))
 (let ((?x13857 (* ?x13675 l_0_5_82)))
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x17205 (* ?x16875 l_0_5_266)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x17203 (* ?x16872 l_0_5_265)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x17201 (* ?x16869 l_0_5_264)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x17199 (* ?x16866 l_0_5_263)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x17197 (* ?x16863 l_0_5_262)))
 (let ((?x16183 (* 2.0 l_0_5_231)))
 (let ((?x16431 (* ?x16183 l_0_5_264)))
 (let ((?x16180 (* 2.0 l_0_5_230)))
 (let ((?x16429 (* ?x16180 l_0_5_263)))
 (let ((?x13672 (* 2.0 l_0_5_15)))
 (let ((?x13855 (* ?x13672 l_0_5_41)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17190 (* ?x12483 l_0_5_174)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17188 (* ?x12480 l_0_5_173)))
 (let ((?x13669 (* 2.0 l_0_5_14)))
 (let ((?x13845 (* ?x13669 l_0_5_40)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17185 (* ?x12477 l_0_5_172)))
 (let ((?x13135 (* 2.0 l_0_5_13)))
 (let ((?x13842 (* ?x13135 l_0_5_39)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x17182 (* ?x15304 l_0_5_96)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x17180 (* ?x15301 l_0_5_95)))
 (let ((?x12640 (* 2.0 l_0_5_12)))
 (let ((?x13838 (* ?x12640 l_0_5_38)))
 (let ((?x12637 (* 2.0 l_0_5_11)))
 (let ((?x15055 (* ?x12637 l_0_5_37)))
 (let ((?x17183 (+ (+ (+ (+ ?x15055 ?x13838) (* (* 2.0 l_0_5_127) l_0_5_94)) ?x17180) ?x17182)))
 (let ((?x17194 (+ (+ (- (- (+ (- (+ ?x17183 ?x13842) ?x17185) ?x13845) ?x17188) ?x17190) ?x13855) (* (* 2.0 l_0_5_229) l_0_5_262))))
 (let ((?x17206 (- (- (- (- (- (+ (+ ?x17194 ?x16429) ?x16431) ?x17197) ?x17199) ?x17201) ?x17203) ?x17205)))
 (= (- (- (- (- (- ?x17206 ?x13857) ?x13859) ?x13861) ?x13863) ?x13865) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13929 (* l_0_5_66 l_0_5_66)))
 (let ((?x13927 (* l_0_5_65 l_0_5_65)))
 (let ((?x13925 (* l_0_5_64 l_0_5_64)))
 (let ((?x13923 (* l_0_5_63 l_0_5_63)))
 (let ((?x13921 (* l_0_5_62 l_0_5_62)))
 (let ((?x13919 (* l_0_5_61 l_0_5_61)))
 (let ((?x17302 (* l_0_5_246 l_0_5_246)))
 (let ((?x17300 (* l_0_5_245 l_0_5_245)))
 (let ((?x17298 (* l_0_5_244 l_0_5_244)))
 (let ((?x17296 (* l_0_5_243 l_0_5_243)))
 (let ((?x17294 (* l_0_5_242 l_0_5_242)))
 (let ((?x17292 (* l_0_5_241 l_0_5_241)))
 (let ((?x13917 (* l_0_5_21 l_0_5_21)))
 (let ((?x13915 (* l_0_5_20 l_0_5_20)))
 (let ((?x13913 (* l_0_5_19 l_0_5_19)))
 (let ((?x13903 (* l_0_5_18 l_0_5_18)))
 (let ((?x17289 (+ (+ (+ (* l_0_5_16 l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13903) ?x13913)))
 (let ((?x17301 (- (- (- (- (- (+ (+ ?x17289 ?x13915) ?x13917) ?x17292) ?x17294) ?x17296) ?x17298) ?x17300)))
 (let ((?x17309 (- (- (- (- (- (- (- ?x17301 ?x17302) ?x13919) ?x13921) ?x13923) ?x13925) ?x13927) ?x13929)))
 (= ?x17309 0.0)))))))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x13979 (* ?x12173 l_0_5_72)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x13977 (* ?x12170 l_0_5_71)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x13975 (* ?x12167 l_0_5_70)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x13973 (* ?x12164 l_0_5_69)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x13971 (* ?x12161 l_0_5_68)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x13969 (* ?x12158 l_0_5_67)))
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x17359 (* ?x12153 l_0_5_252)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x17357 (* ?x12150 l_0_5_251)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x17355 (* ?x12147 l_0_5_250)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x17353 (* ?x12144 l_0_5_249)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x17351 (* ?x12141 l_0_5_248)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x17349 (* ?x12138 l_0_5_247)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x13967 (* ?x12135 l_0_5_27)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x13965 (* ?x12132 l_0_5_26)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x13963 (* ?x12129 l_0_5_25)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x13961 (* ?x12126 l_0_5_24)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x13959 (* ?x12123 l_0_5_23)))
 (let ((?x17347 (+ (+ (+ (+ (* (* 2.0 l_0_5_16) l_0_5_22) ?x13959) ?x13961) ?x13963) ?x13965)))
 (let ((?x17360 (- (- (- (- (- (- (+ ?x17347 ?x13967) ?x17349) ?x17351) ?x17353) ?x17355) ?x17357) ?x17359)))
 (= (- (- (- (- (- (- ?x17360 ?x13969) ?x13971) ?x13973) ?x13975) ?x13977) ?x13979) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12173 (* 2.0 l_0_5_66)))
 (let ((?x14075 (* ?x12173 l_0_5_87)))
 (let ((?x12170 (* 2.0 l_0_5_65)))
 (let ((?x14073 (* ?x12170 l_0_5_86)))
 (let ((?x12167 (* 2.0 l_0_5_64)))
 (let ((?x14071 (* ?x12167 l_0_5_85)))
 (let ((?x12164 (* 2.0 l_0_5_63)))
 (let ((?x14069 (* ?x12164 l_0_5_84)))
 (let ((?x12161 (* 2.0 l_0_5_62)))
 (let ((?x14067 (* ?x12161 l_0_5_83)))
 (let ((?x12158 (* 2.0 l_0_5_61)))
 (let ((?x14065 (* ?x12158 l_0_5_82)))
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x17445 (* ?x12153 l_0_5_267)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x17443 (* ?x12150 l_0_5_266)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x17441 (* ?x12147 l_0_5_265)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x17439 (* ?x12144 l_0_5_264)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x17437 (* ?x12141 l_0_5_263)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x17435 (* ?x12138 l_0_5_262)))
 (let ((?x12135 (* 2.0 l_0_5_21)))
 (let ((?x14063 (* ?x12135 l_0_5_42)))
 (let ((?x12132 (* 2.0 l_0_5_20)))
 (let ((?x14061 (* ?x12132 l_0_5_41)))
 (let ((?x12129 (* 2.0 l_0_5_19)))
 (let ((?x14059 (* ?x12129 l_0_5_40)))
 (let ((?x12126 (* 2.0 l_0_5_18)))
 (let ((?x14057 (* ?x12126 l_0_5_39)))
 (let ((?x12123 (* 2.0 l_0_5_17)))
 (let ((?x14055 (* ?x12123 l_0_5_38)))
 (let ((?x12115 (* 2.0 l_0_5_16)))
 (let ((?x15120 (* ?x12115 l_0_5_37)))
 (let ((?x17438 (- (- (+ (+ (+ (+ (+ ?x15120 ?x14055) ?x14057) ?x14059) ?x14061) ?x14063) ?x17435) ?x17437)))
 (let ((?x17449 (- (- (- (- (- (- (- ?x17438 ?x17439) ?x17441) ?x17443) ?x17445) ?x14065) ?x14067) ?x14069)))
 (= (- (- (- ?x17449 ?x14071) ?x14073) ?x14075) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14151 (* l_0_5_73 l_0_5_73)))
 (let ((?x14149 (* l_0_5_72 l_0_5_72)))
 (let ((?x14147 (* l_0_5_71 l_0_5_71)))
 (let ((?x14145 (* l_0_5_70 l_0_5_70)))
 (let ((?x14143 (* l_0_5_69 l_0_5_69)))
 (let ((?x14141 (* l_0_5_68 l_0_5_68)))
 (let ((?x14139 (* l_0_5_67 l_0_5_67)))
 (let ((?x14137 (* l_0_5_28 l_0_5_28)))
 (let ((?x14135 (* l_0_5_27 l_0_5_27)))
 (let ((?x14133 (* l_0_5_26 l_0_5_26)))
 (let ((?x17525 (* l_0_5_253 l_0_5_253)))
 (let ((?x17523 (* l_0_5_252 l_0_5_252)))
 (let ((?x17521 (* l_0_5_251 l_0_5_251)))
 (let ((?x17519 (* l_0_5_250 l_0_5_250)))
 (let ((?x14122 (* l_0_5_25 l_0_5_25)))
 (let ((?x17516 (* l_0_5_249 l_0_5_249)))
 (let ((?x17514 (* l_0_5_248 l_0_5_248)))
 (let ((?x17512 (* l_0_5_247 l_0_5_247)))
 (let ((?x14119 (* l_0_5_24 l_0_5_24)))
 (let ((?x17513 (- (+ (+ (* l_0_5_22 l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x14119) ?x17512)))
 (let ((?x17526 (- (- (- (- (+ (- (- ?x17513 ?x17514) ?x17516) ?x14122) ?x17519) ?x17521) ?x17523) ?x17525)))
 (let ((?x17533 (- (- (- (- (+ (+ (+ ?x17526 ?x14133) ?x14135) ?x14137) ?x14139) ?x14141) ?x14143) ?x14145)))
 (= (- (- (- ?x17533 ?x14147) ?x14149) ?x14151) 0.0))))))))))))))))))))))))
(assert
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14220 (* ?x14219 l_0_5_80)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14217 (* ?x14216 l_0_5_79)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14214 (* ?x14213 l_0_5_78)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14211 (* ?x14210 l_0_5_77)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14208 (* ?x14207 l_0_5_76)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14205 (* ?x14204 l_0_5_75)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14202 (* ?x14201 l_0_5_74)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14199 (* ?x14198 l_0_5_35)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14196 (* ?x14195 l_0_5_34)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14193 (* ?x14192 l_0_5_33)))
 (let ((?x17599 (* 2.0 l_0_5_253)))
 (let ((?x17600 (* ?x17599 l_0_5_260)))
 (let ((?x17596 (* 2.0 l_0_5_252)))
 (let ((?x17597 (* ?x17596 l_0_5_259)))
 (let ((?x17593 (* 2.0 l_0_5_251)))
 (let ((?x17594 (* ?x17593 l_0_5_258)))
 (let ((?x17590 (* 2.0 l_0_5_250)))
 (let ((?x17591 (* ?x17590 l_0_5_257)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14190 (* ?x14189 l_0_5_32)))
 (let ((?x17586 (* 2.0 l_0_5_249)))
 (let ((?x17587 (* ?x17586 l_0_5_256)))
 (let ((?x17583 (* 2.0 l_0_5_248)))
 (let ((?x17584 (* ?x17583 l_0_5_255)))
 (let ((?x17580 (* 2.0 l_0_5_247)))
 (let ((?x17581 (* ?x17580 l_0_5_254)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14187 (* ?x13208 l_0_5_31)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14185 (* ?x12819 l_0_5_30)))
 (let ((?x17585 (- (- (+ (+ (* (* 2.0 l_0_5_22) l_0_5_29) ?x14185) ?x14187) ?x17581) ?x17584)))
 (let ((?x17602 (+ (- (- (- (- (+ (- ?x17585 ?x17587) ?x14190) ?x17591) ?x17594) ?x17597) ?x17600) ?x14193)))
 (let ((?x17609 (- (- (- (- (- (+ (+ ?x17602 ?x14196) ?x14199) ?x14202) ?x14205) ?x14208) ?x14211) ?x14214)))
 (= (- (- ?x17609 ?x14217) ?x14220) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x15576 (* ?x14758 l_0_5_94)))
 (let ((?x14219 (* 2.0 l_0_5_73)))
 (let ((?x14304 (* ?x14219 l_0_5_88)))
 (let ((?x14216 (* 2.0 l_0_5_72)))
 (let ((?x14302 (* ?x14216 l_0_5_87)))
 (let ((?x14213 (* 2.0 l_0_5_71)))
 (let ((?x14300 (* ?x14213 l_0_5_86)))
 (let ((?x14210 (* 2.0 l_0_5_70)))
 (let ((?x14298 (* ?x14210 l_0_5_85)))
 (let ((?x14207 (* 2.0 l_0_5_69)))
 (let ((?x14296 (* ?x14207 l_0_5_84)))
 (let ((?x14204 (* 2.0 l_0_5_68)))
 (let ((?x14294 (* ?x14204 l_0_5_83)))
 (let ((?x14201 (* 2.0 l_0_5_67)))
 (let ((?x14292 (* ?x14201 l_0_5_82)))
 (let ((?x14198 (* 2.0 l_0_5_28)))
 (let ((?x14290 (* ?x14198 l_0_5_43)))
 (let ((?x14195 (* 2.0 l_0_5_27)))
 (let ((?x14288 (* ?x14195 l_0_5_42)))
 (let ((?x14192 (* 2.0 l_0_5_26)))
 (let ((?x14286 (* ?x14192 l_0_5_41)))
 (let ((?x17599 (* 2.0 l_0_5_253)))
 (let ((?x17703 (* ?x17599 l_0_5_268)))
 (let ((?x17596 (* 2.0 l_0_5_252)))
 (let ((?x17701 (* ?x17596 l_0_5_267)))
 (let ((?x17593 (* 2.0 l_0_5_251)))
 (let ((?x17699 (* ?x17593 l_0_5_266)))
 (let ((?x17590 (* 2.0 l_0_5_250)))
 (let ((?x17697 (* ?x17590 l_0_5_265)))
 (let ((?x14189 (* 2.0 l_0_5_25)))
 (let ((?x14274 (* ?x14189 l_0_5_40)))
 (let ((?x17586 (* 2.0 l_0_5_249)))
 (let ((?x17694 (* ?x17586 l_0_5_264)))
 (let ((?x17583 (* 2.0 l_0_5_248)))
 (let ((?x17692 (* ?x17583 l_0_5_263)))
 (let ((?x17580 (* 2.0 l_0_5_247)))
 (let ((?x17690 (* ?x17580 l_0_5_262)))
 (let ((?x13208 (* 2.0 l_0_5_24)))
 (let ((?x14270 (* ?x13208 l_0_5_39)))
 (let ((?x12819 (* 2.0 l_0_5_23)))
 (let ((?x14266 (* ?x12819 l_0_5_38)))
 (let ((?x13454 (* 2.0 l_0_5_22)))
 (let ((?x14262 (* ?x13454 l_0_5_37)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x15558 (* ?x12097 l_0_5_139)))
 (let ((?x17696 (+ (- (- (- (+ (+ (+ ?x15558 ?x14262) ?x14266) ?x14270) ?x17690) ?x17692) ?x17694) ?x14274)))
 (let ((?x17707 (+ (+ (+ (- (- (- (- ?x17696 ?x17697) ?x17699) ?x17701) ?x17703) ?x14286) ?x14288) ?x14290)))
 (let ((?x17714 (- (- (- (- (- (- (- ?x17707 ?x14292) ?x14294) ?x14296) ?x14298) ?x14300) ?x14302) ?x14304)))
 (= (- ?x17714 ?x15576) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14395 (* l_0_5_81 l_0_5_81)))
 (let ((?x14393 (* l_0_5_80 l_0_5_80)))
 (let ((?x14391 (* l_0_5_79 l_0_5_79)))
 (let ((?x14389 (* l_0_5_78 l_0_5_78)))
 (let ((?x14387 (* l_0_5_77 l_0_5_77)))
 (let ((?x14385 (* l_0_5_76 l_0_5_76)))
 (let ((?x14383 (* l_0_5_75 l_0_5_75)))
 (let ((?x14381 (* l_0_5_74 l_0_5_74)))
 (let ((?x14379 (* l_0_5_36 l_0_5_36)))
 (let ((?x14377 (* l_0_5_35 l_0_5_35)))
 (let ((?x14375 (* l_0_5_34 l_0_5_34)))
 (let ((?x14373 (* l_0_5_33 l_0_5_33)))
 (let ((?x14362 (* l_0_5_32 l_0_5_32)))
 (let ((?x14358 (* l_0_5_31 l_0_5_31)))
 (let ((?x14354 (* l_0_5_30 l_0_5_30)))
 (let ((?x14399 (* l_0_5_29 l_0_5_29)))
 (let ((?x17800 (* l_0_5_261 l_0_5_261)))
 (let ((?x17798 (* l_0_5_260 l_0_5_260)))
 (let ((?x17796 (* l_0_5_259 l_0_5_259)))
 (let ((?x17794 (* l_0_5_258 l_0_5_258)))
 (let ((?x17792 (* l_0_5_257 l_0_5_257)))
 (let ((?x17790 (* l_0_5_256 l_0_5_256)))
 (let ((?x17791 (- (- (* (- l_0_5_254) l_0_5_254) (* l_0_5_255 l_0_5_255)) ?x17790)))
 (let ((?x17803 (+ (+ (- (- (- (- (- ?x17791 ?x17792) ?x17794) ?x17796) ?x17798) ?x17800) ?x14399) ?x14354)))
 (let ((?x17810 (- (+ (+ (+ (+ (+ (+ ?x17803 ?x14358) ?x14362) ?x14373) ?x14375) ?x14377) ?x14379) ?x14381)))
 (let ((?x17817 (- (- (- (- (- (- (- ?x17810 ?x14383) ?x14385) ?x14387) ?x14389) ?x14391) ?x14393) ?x14395)))
 (= ?x17817 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x14474 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14471 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14468 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14465 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14462 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14459 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14456 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14453 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14450 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14447 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14444 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14441 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14438 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x13246 (* 2.0 l_0_5_31)))
 (let ((?x14435 (* ?x13246 l_0_5_39)))
 (let ((?x13237 (* 2.0 l_0_5_30)))
 (let ((?x14433 (* ?x13237 l_0_5_38)))
 (let ((?x13517 (* 2.0 l_0_5_29)))
 (let ((?x15218 (* ?x13517 l_0_5_37)))
 (let ((?x17882 (* (* 2.0 l_0_5_261) l_0_5_269)))
 (let ((?x17879 (* (* 2.0 l_0_5_260) l_0_5_268)))
 (let ((?x17876 (* (* 2.0 l_0_5_259) l_0_5_267)))
 (let ((?x17873 (* (* 2.0 l_0_5_258) l_0_5_266)))
 (let ((?x17870 (* (* 2.0 l_0_5_257) l_0_5_265)))
 (let ((?x17867 (* (* 2.0 l_0_5_256) l_0_5_264)))
 (let ((?x17864 (* (* 2.0 l_0_5_255) l_0_5_263)))
 (let ((?x17874 (- (- (- (- (* (* (- 2.0) l_0_5_254) l_0_5_262) ?x17864) ?x17867) ?x17870) ?x17873)))
 (let ((?x17887 (+ (+ (+ (+ (- (- (- ?x17874 ?x17876) ?x17879) ?x17882) ?x15218) ?x14433) ?x14435) ?x14438)))
 (let ((?x17894 (- (- (- (+ (+ (+ (+ ?x17887 ?x14441) ?x14444) ?x14447) ?x14450) ?x14453) ?x14456) ?x14459)))
 (= (- (- (- (- (- ?x17894 ?x14462) ?x14465) ?x14468) ?x14471) ?x14474) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x14574 (* l_0_5_90 l_0_5_90)))
 (let ((?x14572 (* l_0_5_89 l_0_5_89)))
 (let ((?x14570 (* l_0_5_88 l_0_5_88)))
 (let ((?x14568 (* l_0_5_87 l_0_5_87)))
 (let ((?x14566 (* l_0_5_86 l_0_5_86)))
 (let ((?x14564 (* l_0_5_85 l_0_5_85)))
 (let ((?x14562 (* l_0_5_84 l_0_5_84)))
 (let ((?x14560 (* l_0_5_83 l_0_5_83)))
 (let ((?x14558 (* l_0_5_82 l_0_5_82)))
 (let ((?x14556 (* l_0_5_45 l_0_5_45)))
 (let ((?x14554 (* l_0_5_44 l_0_5_44)))
 (let ((?x14552 (* l_0_5_43 l_0_5_43)))
 (let ((?x14550 (* l_0_5_42 l_0_5_42)))
 (let ((?x14537 (* l_0_5_41 l_0_5_41)))
 (let ((?x14534 (* l_0_5_40 l_0_5_40)))
 (let ((?x14530 (* l_0_5_39 l_0_5_39)))
 (let ((?x14526 (* l_0_5_38 l_0_5_38)))
 (let ((?x14578 (* l_0_5_37 l_0_5_37)))
 (let ((?x17987 (* l_0_5_270 l_0_5_270)))
 (let ((?x17985 (* l_0_5_269 l_0_5_269)))
 (let ((?x17983 (* l_0_5_268 l_0_5_268)))
 (let ((?x17981 (* l_0_5_267 l_0_5_267)))
 (let ((?x17979 (* l_0_5_266 l_0_5_266)))
 (let ((?x17977 (* l_0_5_265 l_0_5_265)))
 (let ((?x17975 (* l_0_5_264 l_0_5_264)))
 (let ((?x17976 (- (- (* (- l_0_5_262) l_0_5_262) (* l_0_5_263 l_0_5_263)) ?x17975)))
 (let ((?x17989 (+ (- (- (- (- (- (- ?x17976 ?x17977) ?x17979) ?x17981) ?x17983) ?x17985) ?x17987) ?x14578)))
 (let ((?x17996 (+ (+ (+ (+ (+ (+ (+ ?x17989 ?x14526) ?x14530) ?x14534) ?x14537) ?x14550) ?x14552) ?x14554)))
 (let ((?x18003 (- (- (- (- (- (- (+ ?x17996 ?x14556) ?x14558) ?x14560) ?x14562) ?x14564) ?x14566) ?x14568)))
 (= (- (- (- ?x18003 ?x14570) ?x14572) ?x14574) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x18056 (* ?x14758 l_0_5_92)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_137) ?x18056) 0.0))))
(assert
 (let ((?x17599 (* 2.0 l_0_5_253)))
 (let ((?x17703 (* ?x17599 l_0_5_268)))
 (let ((?x17596 (* 2.0 l_0_5_252)))
 (let ((?x17701 (* ?x17596 l_0_5_267)))
 (let ((?x17593 (* 2.0 l_0_5_251)))
 (let ((?x17699 (* ?x17593 l_0_5_266)))
 (let ((?x17590 (* 2.0 l_0_5_250)))
 (let ((?x17697 (* ?x17590 l_0_5_265)))
 (let ((?x17586 (* 2.0 l_0_5_249)))
 (let ((?x17694 (* ?x17586 l_0_5_264)))
 (let ((?x17583 (* 2.0 l_0_5_248)))
 (let ((?x17692 (* ?x17583 l_0_5_263)))
 (let ((?x17580 (* 2.0 l_0_5_247)))
 (let ((?x17690 (* ?x17580 l_0_5_262)))
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18108 (* ?x18107 l_0_5_178)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18105 (* ?x18104 l_0_5_177)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18102 (* ?x18101 l_0_5_176)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18099 (* ?x18098 l_0_5_175)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18096 (* ?x18095 l_0_5_174)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18093 (* ?x18092 l_0_5_173)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18090 (* ?x18089 l_0_5_172)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18087 (* ?x12097 l_0_5_146)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18085 (* ?x18084 l_0_5_133)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18082 (* ?x18081 l_0_5_132)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18079 (* ?x18078 l_0_5_131)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18076 (* ?x18075 l_0_5_130)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18073 (* ?x14697 l_0_5_129)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18071 (* ?x14694 l_0_5_128)))
 (let ((?x12613 (* (- 2.0) l_0_5_101)))
 (let ((?x18068 (* ?x12613 l_0_5_91)))
 (let ((?x18077 (+ (+ (+ (+ ?x18068 (* (* 2.0 l_0_5_112) l_0_5_127)) ?x18071) ?x18073) ?x18076)))
 (let ((?x18097 (- (- (- (+ (+ (+ (+ ?x18077 ?x18079) ?x18082) ?x18085) ?x18087) ?x18090) ?x18093) ?x18096)))
 (let ((?x18112 (+ (+ (+ (- (- (- (- ?x18097 ?x18099) ?x18102) ?x18105) ?x18108) ?x17690) ?x17692) ?x17694)))
 (= (+ (+ (+ (+ ?x18112 ?x17697) ?x17699) ?x17701) ?x17703) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x12098 (* ?x12097 l_0_5_151)))
 (= (+ (* (* (- 2.0) l_0_5_106) l_0_5_91) ?x12098) 0.0))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18189 (* ?x12097 l_0_5_157)))
 (= (+ (* (* (- 2.0) l_0_5_112) l_0_5_91) ?x18189) 0.0))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18196 (* ?x12097 l_0_5_164)))
 (= (+ (* (* (- 2.0) l_0_5_119) l_0_5_91) ?x18196) 0.0))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18207 (* ?x12097 l_0_5_172)))
 (= (+ (* (* (- 2.0) l_0_5_127) l_0_5_91) ?x18207) 0.0))))
(assert
 (let ((?x18225 (* l_0_5_93 l_0_5_93)))
 (let ((?x18223 (* l_0_5_92 l_0_5_92)))
 (let ((?x18217 (* l_0_5_138 l_0_5_138)))
 (let ((?x18215 (* l_0_5_137 l_0_5_137)))
 (let ((?x18218 (+ ?x18215 ?x18217)))
 (= (- (- ?x18218 ?x18223) ?x18225) 0.0)))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x15982 (* ?x14883 l_0_5_95)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x15980 (* ?x14880 l_0_5_94)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x15970 (* ?x12434 l_0_5_140)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x15968 (* ?x12431 l_0_5_139)))
 (= (- (- (+ ?x15968 ?x15970) ?x15980) ?x15982) 0.0))))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18254 (* ?x12434 l_0_5_147)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18252 (* ?x12431 l_0_5_146)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18250 (* ?x12616 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_101) l_0_5_92) ?x18250) ?x18252) ?x18254) 0.0))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x12435 (* ?x12434 l_0_5_152)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x12432 (* ?x12431 l_0_5_151)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12425 (* ?x12290 l_0_5_93)))
 (let ((?x12436 (+ (+ (- (* (* (- 2.0) l_0_5_106) l_0_5_92) ?x12425) ?x12432) ?x12435)))
 (= ?x12436 0.0)))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18280 (* ?x12434 l_0_5_158)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18278 (* ?x12431 l_0_5_157)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18276 (* ?x14694 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_112) l_0_5_92) ?x18276) ?x18278) ?x18280) 0.0))))))))
(assert
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18108 (* ?x18107 l_0_5_178)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18105 (* ?x18104 l_0_5_177)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18102 (* ?x18101 l_0_5_176)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18099 (* ?x18098 l_0_5_175)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18096 (* ?x18095 l_0_5_174)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18093 (* ?x18092 l_0_5_173)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18090 (* ?x18089 l_0_5_172)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18311 (* ?x12434 l_0_5_165)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18309 (* ?x12431 l_0_5_164)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18307 (* ?x15204 l_0_5_93)))
 (let ((?x15201 (* 2.0 l_0_5_119)))
 (let ((?x18305 (* ?x15201 l_0_5_92)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18085 (* ?x18084 l_0_5_133)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18082 (* ?x18081 l_0_5_132)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18079 (* ?x18078 l_0_5_131)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18076 (* ?x18075 l_0_5_130)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18073 (* ?x14697 l_0_5_129)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18071 (* ?x14694 l_0_5_128)))
 (let ((?x18302 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_127) ?x18071) ?x18073) ?x18076) ?x18079)))
 (let ((?x18304 (- (- ?x18302 ?x18082) ?x18085)))
 (let ((?x18315 (+ (+ (+ (+ (+ (- (- ?x18304 ?x18305) ?x18307) ?x18309) ?x18311) ?x18090) ?x18093) ?x18096)))
 (= (+ (+ (+ (+ ?x18315 ?x18099) ?x18102) ?x18105) ?x18108) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18369 (* ?x12434 l_0_5_173)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18367 (* ?x12431 l_0_5_172)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x18361 (* ?x15301 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_127) l_0_5_92) ?x18361) ?x18367) ?x18369) 0.0))))))))
(assert
 (let ((?x16248 (* l_0_5_96 l_0_5_96)))
 (let ((?x16246 (* l_0_5_95 l_0_5_95)))
 (let ((?x16244 (* l_0_5_94 l_0_5_94)))
 (let ((?x16229 (* l_0_5_141 l_0_5_141)))
 (let ((?x18384 (- (+ (+ (* l_0_5_139 l_0_5_139) (* l_0_5_140 l_0_5_140)) ?x16229) ?x16244)))
 (= (- (- ?x18384 ?x16246) ?x16248) 0.0)))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16773 (* ?x12483 l_0_5_148)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16771 (* ?x12480 l_0_5_147)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16768 (* ?x12477 l_0_5_146)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x16763 (* ?x12628 l_0_5_96)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x16761 (* ?x12616 l_0_5_95)))
 (let ((?x18408 (+ (+ (- (- (* (* (- 2.0) l_0_5_101) l_0_5_94) ?x16761) ?x16763) ?x16768) ?x16771)))
 (= (+ ?x18408 ?x16773) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x12484 (* ?x12483 l_0_5_153)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x12481 (* ?x12480 l_0_5_152)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x12478 (* ?x12477 l_0_5_151)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12475 (* ?x12293 l_0_5_96)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12473 (* ?x12290 l_0_5_95)))
 (let ((?x12482 (+ (+ (- (- (* (* (- 2.0) l_0_5_106) l_0_5_94) ?x12473) ?x12475) ?x12478) ?x12481)))
 (let ((?x12485 (+ ?x12482 ?x12484)))
 (= ?x12485 0.0))))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16961 (* ?x12483 l_0_5_159)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16959 (* ?x12480 l_0_5_158)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16956 (* ?x12477 l_0_5_157)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x16952 (* ?x14697 l_0_5_96)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x16950 (* ?x14694 l_0_5_95)))
 (let ((?x18429 (+ (+ (- (- (* (* (- 2.0) l_0_5_112) l_0_5_94) ?x16950) ?x16952) ?x16956) ?x16959)))
 (= (+ ?x18429 ?x16961) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17075 (* ?x12483 l_0_5_166)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17073 (* ?x12480 l_0_5_165)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17070 (* ?x12477 l_0_5_164)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x17067 (* ?x15207 l_0_5_96)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x17065 (* ?x15204 l_0_5_95)))
 (let ((?x18447 (+ (+ (- (- (* (* (- 2.0) l_0_5_119) l_0_5_94) ?x17065) ?x17067) ?x17070) ?x17073)))
 (= (+ ?x18447 ?x17075) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17190 (* ?x12483 l_0_5_174)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17188 (* ?x12480 l_0_5_173)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17185 (* ?x12477 l_0_5_172)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x17182 (* ?x15304 l_0_5_96)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x17180 (* ?x15301 l_0_5_95)))
 (let ((?x18465 (+ (+ (- (- (* (* (- 2.0) l_0_5_127) l_0_5_94) ?x17180) ?x17182) ?x17185) ?x17188)))
 (= (+ ?x18465 ?x17190) 0.0)))))))))))))
(assert
 (let ((?x18497 (* l_0_5_150 l_0_5_150)))
 (let ((?x18495 (* l_0_5_149 l_0_5_149)))
 (let ((?x18493 (* l_0_5_148 l_0_5_148)))
 (let ((?x18491 (* l_0_5_147 l_0_5_147)))
 (let ((?x18489 (* l_0_5_146 l_0_5_146)))
 (let ((?x18487 (* l_0_5_105 l_0_5_105)))
 (let ((?x18485 (* l_0_5_104 l_0_5_104)))
 (let ((?x18483 (* l_0_5_103 l_0_5_103)))
 (let ((?x18484 (- (- (* (- l_0_5_101) l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x18483)))
 (let ((?x18498 (+ (+ (+ (+ (+ (- (- ?x18484 ?x18485) ?x18487) ?x18489) ?x18491) ?x18493) ?x18495) ?x18497)))
 (= ?x18498 0.0))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x12656 (* ?x12655 l_0_5_155)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x12653 (* ?x12652 l_0_5_154)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x12650 (* ?x12649 l_0_5_153)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x12647 (* ?x12646 l_0_5_152)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x12644 (* ?x12643 l_0_5_151)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x12635 (* ?x12634 l_0_5_110)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x12632 (* ?x12631 l_0_5_109)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x12629 (* ?x12628 l_0_5_108)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x12626 (* ?x12616 l_0_5_107)))
 (let ((?x12636 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_106) ?x12626) ?x12629) ?x12632) ?x12635)))
 (= (+ (+ (+ (+ (+ ?x12636 ?x12644) ?x12647) ?x12650) ?x12653) ?x12656) 0.0)))))))))))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18552 (* ?x12655 l_0_5_161)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18550 (* ?x12652 l_0_5_160)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18548 (* ?x12649 l_0_5_159)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18546 (* ?x12646 l_0_5_158)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18544 (* ?x12643 l_0_5_157)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18542 (* ?x12634 l_0_5_116)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18540 (* ?x12631 l_0_5_115)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18538 (* ?x12628 l_0_5_114)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18536 (* ?x12616 l_0_5_113)))
 (let ((?x18543 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_112) ?x18536) ?x18538) ?x18540) ?x18542)))
 (= (+ (+ (+ (+ (+ ?x18543 ?x18544) ?x18546) ?x18548) ?x18550) ?x18552) 0.0)))))))))))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18611 (* ?x12655 l_0_5_168)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18609 (* ?x12652 l_0_5_167)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18607 (* ?x12649 l_0_5_166)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18605 (* ?x12646 l_0_5_165)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18603 (* ?x12643 l_0_5_164)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18601 (* ?x12634 l_0_5_123)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18591 (* ?x12631 l_0_5_122)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18588 (* ?x12628 l_0_5_121)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18584 (* ?x12616 l_0_5_120)))
 (let ((?x18602 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_119) ?x18584) ?x18588) ?x18591) ?x18601)))
 (= (+ (+ (+ (+ (+ ?x18602 ?x18603) ?x18605) ?x18607) ?x18609) ?x18611) 0.0)))))))))))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18670 (* ?x12655 l_0_5_176)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18668 (* ?x12652 l_0_5_175)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18666 (* ?x12649 l_0_5_174)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18664 (* ?x12646 l_0_5_173)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18662 (* ?x12643 l_0_5_172)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18660 (* ?x12634 l_0_5_131)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18650 (* ?x12631 l_0_5_130)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18647 (* ?x12628 l_0_5_129)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18643 (* ?x12616 l_0_5_128)))
 (let ((?x18661 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_127) ?x18643) ?x18647) ?x18650) ?x18660)))
 (= (+ (+ (+ (+ (+ ?x18661 ?x18662) ?x18664) ?x18666) ?x18668) ?x18670) 0.0)))))))))))))))))))))
(assert
 (let ((?x12740 (* l_0_5_156 l_0_5_156)))
 (let ((?x12738 (* l_0_5_155 l_0_5_155)))
 (let ((?x12736 (* l_0_5_154 l_0_5_154)))
 (let ((?x12734 (* l_0_5_153 l_0_5_153)))
 (let ((?x12732 (* l_0_5_152 l_0_5_152)))
 (let ((?x12730 (* l_0_5_151 l_0_5_151)))
 (let ((?x12728 (* l_0_5_111 l_0_5_111)))
 (let ((?x12726 (* l_0_5_110 l_0_5_110)))
 (let ((?x12714 (* l_0_5_109 l_0_5_109)))
 (let ((?x12710 (* l_0_5_108 l_0_5_108)))
 (let ((?x12712 (- (- (* (- l_0_5_106) l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x12710)))
 (let ((?x12737 (+ (+ (+ (+ (- (- (- ?x12712 ?x12714) ?x12726) ?x12728) ?x12730) ?x12732) ?x12734) ?x12736)))
 (let ((?x12741 (+ (+ ?x12737 ?x12738) ?x12740)))
 (= ?x12741 0.0)))))))))))))))
(assert
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12815 (* ?x12320 l_0_5_162)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12813 (* ?x12317 l_0_5_161)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12811 (* ?x12314 l_0_5_160)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12809 (* ?x12311 l_0_5_159)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12807 (* ?x12308 l_0_5_158)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12805 (* ?x12305 l_0_5_157)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12803 (* ?x12302 l_0_5_117)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12801 (* ?x12299 l_0_5_116)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12799 (* ?x12296 l_0_5_115)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12797 (* ?x12293 l_0_5_114)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12785 (* ?x12290 l_0_5_113)))
 (let ((?x12802 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_112) ?x12785) ?x12797) ?x12799) ?x12801)))
 (let ((?x12816 (+ (+ (+ (+ (+ (+ (- ?x12802 ?x12803) ?x12805) ?x12807) ?x12809) ?x12811) ?x12813) ?x12815)))
 (= ?x12816 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12979 (* ?x12320 l_0_5_177)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12977 (* ?x12317 l_0_5_176)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12975 (* ?x12314 l_0_5_175)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12973 (* ?x12311 l_0_5_174)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12971 (* ?x12308 l_0_5_173)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12969 (* ?x12305 l_0_5_172)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12967 (* ?x12302 l_0_5_132)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12965 (* ?x12299 l_0_5_131)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12963 (* ?x12296 l_0_5_130)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12961 (* ?x12293 l_0_5_129)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12955 (* ?x12290 l_0_5_128)))
 (let ((?x12966 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_127) ?x12955) ?x12961) ?x12963) ?x12965)))
 (let ((?x12980 (+ (+ (+ (+ (+ (+ (- ?x12966 ?x12967) ?x12969) ?x12971) ?x12973) ?x12975) ?x12977) ?x12979)))
 (= ?x12980 0.0))))))))))))))))))))))))))
(assert
 (let ((?x18747 (* l_0_5_163 l_0_5_163)))
 (let ((?x18745 (* l_0_5_162 l_0_5_162)))
 (let ((?x18743 (* l_0_5_161 l_0_5_161)))
 (let ((?x18741 (* l_0_5_160 l_0_5_160)))
 (let ((?x18739 (* l_0_5_159 l_0_5_159)))
 (let ((?x18737 (* l_0_5_158 l_0_5_158)))
 (let ((?x18735 (* l_0_5_157 l_0_5_157)))
 (let ((?x18733 (* l_0_5_118 l_0_5_118)))
 (let ((?x18731 (* l_0_5_117 l_0_5_117)))
 (let ((?x18729 (* l_0_5_116 l_0_5_116)))
 (let ((?x18727 (* l_0_5_115 l_0_5_115)))
 (let ((?x18725 (* l_0_5_114 l_0_5_114)))
 (let ((?x18726 (- (- (* (- l_0_5_112) l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18725)))
 (let ((?x18740 (+ (+ (+ (- (- (- (- ?x18726 ?x18727) ?x18729) ?x18731) ?x18733) ?x18735) ?x18737) ?x18739)))
 (= (+ (+ (+ (+ ?x18740 ?x18741) ?x18743) ?x18745) ?x18747) 0.0))))))))))))))))
(assert
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18805 (* ?x18107 l_0_5_170)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18803 (* ?x18104 l_0_5_169)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18801 (* ?x18101 l_0_5_168)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18799 (* ?x18098 l_0_5_167)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18797 (* ?x18095 l_0_5_166)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18795 (* ?x18092 l_0_5_165)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18793 (* ?x18089 l_0_5_164)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18791 (* ?x18084 l_0_5_125)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18789 (* ?x18081 l_0_5_124)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18787 (* ?x18078 l_0_5_123)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18785 (* ?x18075 l_0_5_122)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18783 (* ?x14697 l_0_5_121)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18781 (* ?x14694 l_0_5_120)))
 (let ((?x18788 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_119) ?x18781) ?x18783) ?x18785) ?x18787)))
 (let ((?x18802 (+ (+ (+ (+ (+ (- (- ?x18788 ?x18789) ?x18791) ?x18793) ?x18795) ?x18797) ?x18799) ?x18801)))
 (= (+ (+ ?x18802 ?x18803) ?x18805) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18108 (* ?x18107 l_0_5_178)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18105 (* ?x18104 l_0_5_177)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18102 (* ?x18101 l_0_5_176)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18099 (* ?x18098 l_0_5_175)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18096 (* ?x18095 l_0_5_174)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18093 (* ?x18092 l_0_5_173)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18090 (* ?x18089 l_0_5_172)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18085 (* ?x18084 l_0_5_133)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18082 (* ?x18081 l_0_5_132)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18079 (* ?x18078 l_0_5_131)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18076 (* ?x18075 l_0_5_130)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18073 (* ?x14697 l_0_5_129)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18071 (* ?x14694 l_0_5_128)))
 (let ((?x18302 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_127) ?x18071) ?x18073) ?x18076) ?x18079)))
 (let ((?x18304 (- (- ?x18302 ?x18082) ?x18085)))
 (let ((?x18859 (+ (+ (+ (+ (+ (+ (+ ?x18304 ?x18090) ?x18093) ?x18096) ?x18099) ?x18102) ?x18105) ?x18108)))
 (= ?x18859 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x18903 (* l_0_5_171 l_0_5_171)))
 (let ((?x18901 (* l_0_5_170 l_0_5_170)))
 (let ((?x18899 (* l_0_5_169 l_0_5_169)))
 (let ((?x18897 (* l_0_5_168 l_0_5_168)))
 (let ((?x18895 (* l_0_5_167 l_0_5_167)))
 (let ((?x18893 (* l_0_5_166 l_0_5_166)))
 (let ((?x18891 (* l_0_5_165 l_0_5_165)))
 (let ((?x18889 (* l_0_5_164 l_0_5_164)))
 (let ((?x18887 (* l_0_5_126 l_0_5_126)))
 (let ((?x18885 (* l_0_5_125 l_0_5_125)))
 (let ((?x18883 (* l_0_5_124 l_0_5_124)))
 (let ((?x18881 (* l_0_5_123 l_0_5_123)))
 (let ((?x18879 (* l_0_5_122 l_0_5_122)))
 (let ((?x18877 (* l_0_5_121 l_0_5_121)))
 (let ((?x18878 (- (- (* (- l_0_5_119) l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18877)))
 (let ((?x18892 (+ (+ (- (- (- (- (- ?x18878 ?x18879) ?x18881) ?x18883) ?x18885) ?x18887) ?x18889) ?x18891)))
 (= (+ (+ (+ (+ (+ (+ ?x18892 ?x18893) ?x18895) ?x18897) ?x18899) ?x18901) ?x18903) 0.0))))))))))))))))))
(assert
 (let ((?x18982 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18979 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18976 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18973 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18970 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18967 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18964 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18961 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18958 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18955 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18952 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18949 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18946 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x18943 (* ?x15207 l_0_5_129)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18941 (* ?x15204 l_0_5_128)))
 (let ((?x18950 (- (- (- (- (* (* (- 2.0) l_0_5_119) l_0_5_127) ?x18941) ?x18943) ?x18946) ?x18949)))
 (let ((?x18971 (+ (+ (+ (+ (- (- (- ?x18950 ?x18952) ?x18955) ?x18958) ?x18961) ?x18964) ?x18967) ?x18970)))
 (= (+ (+ (+ (+ ?x18971 ?x18973) ?x18976) ?x18979) ?x18982) 0.0)))))))))))))))))))))
(assert
 (let ((?x19082 (* l_0_5_180 l_0_5_180)))
 (let ((?x19080 (* l_0_5_179 l_0_5_179)))
 (let ((?x19078 (* l_0_5_178 l_0_5_178)))
 (let ((?x19076 (* l_0_5_177 l_0_5_177)))
 (let ((?x19074 (* l_0_5_176 l_0_5_176)))
 (let ((?x19072 (* l_0_5_175 l_0_5_175)))
 (let ((?x19070 (* l_0_5_174 l_0_5_174)))
 (let ((?x19068 (* l_0_5_173 l_0_5_173)))
 (let ((?x19066 (* l_0_5_172 l_0_5_172)))
 (let ((?x19064 (* l_0_5_135 l_0_5_135)))
 (let ((?x19062 (* l_0_5_134 l_0_5_134)))
 (let ((?x19060 (* l_0_5_133 l_0_5_133)))
 (let ((?x19058 (* l_0_5_132 l_0_5_132)))
 (let ((?x19045 (* l_0_5_131 l_0_5_131)))
 (let ((?x19042 (* l_0_5_130 l_0_5_130)))
 (let ((?x19038 (* l_0_5_129 l_0_5_129)))
 (let ((?x19040 (- (- (* (- l_0_5_127) l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x19038)))
 (let ((?x19067 (+ (- (- (- (- (- (- ?x19040 ?x19042) ?x19045) ?x19058) ?x19060) ?x19062) ?x19064) ?x19066)))
 (let ((?x19081 (+ (+ (+ (+ (+ (+ (+ ?x19067 ?x19068) ?x19070) ?x19072) ?x19074) ?x19076) ?x19078) ?x19080)))
 (= (+ ?x19081 ?x19082) 0.0)))))))))))))))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x18056 (* ?x14758 l_0_5_92)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_137) ?x18056) 0.0))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x14759 (* ?x14758 l_0_5_97)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x14747 (* ?x12097 l_0_5_142)))
 (= (- ?x14747 ?x14759) 0.0))))))
(assert
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16083 (* ?x15912 l_0_5_255)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16081 (* ?x15909 l_0_5_254)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18311 (* ?x12434 l_0_5_165)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18309 (* ?x12431 l_0_5_164)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18087 (* ?x12097 l_0_5_146)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18307 (* ?x15204 l_0_5_93)))
 (let ((?x15201 (* 2.0 l_0_5_119)))
 (let ((?x18305 (* ?x15201 l_0_5_92)))
 (let ((?x12613 (* (- 2.0) l_0_5_101)))
 (let ((?x18068 (* ?x12613 l_0_5_91)))
 (let ((?x19134 (+ (+ (- (- (+ (+ (+ ?x18068 ?x18305) ?x18307) ?x18087) ?x18309) ?x18311) ?x16081) ?x16083)))
 (= ?x19134 0.0)))))))))))))))))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18189 (* ?x12097 l_0_5_157)))
 (= (+ (* (* (- 2.0) l_0_5_112) l_0_5_91) ?x18189) 0.0))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18196 (* ?x12097 l_0_5_164)))
 (= (+ (* (* (- 2.0) l_0_5_119) l_0_5_91) ?x18196) 0.0))))
(assert
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18207 (* ?x12097 l_0_5_172)))
 (= (+ (* (* (- 2.0) l_0_5_127) l_0_5_91) ?x18207) 0.0))))
(assert
 (let ((?x18225 (* l_0_5_93 l_0_5_93)))
 (let ((?x18223 (* l_0_5_92 l_0_5_92)))
 (let ((?x18217 (* l_0_5_138 l_0_5_138)))
 (let ((?x18215 (* l_0_5_137 l_0_5_137)))
 (let ((?x18218 (+ ?x18215 ?x18217)))
 (= (- (- ?x18218 ?x18223) ?x18225) 0.0)))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x15982 (* ?x14883 l_0_5_95)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x15980 (* ?x14880 l_0_5_94)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x15970 (* ?x12434 l_0_5_140)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x15968 (* ?x12431 l_0_5_139)))
 (= (- (- (+ ?x15968 ?x15970) ?x15980) ?x15982) 0.0))))))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x14884 (* ?x14883 l_0_5_98)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x14881 (* ?x14880 l_0_5_97)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x14874 (* ?x12434 l_0_5_143)))
 (let ((?x14875 (+ (* (* 2.0 l_0_5_137) l_0_5_142) ?x14874)))
 (= (- (- ?x14875 ?x14881) ?x14884) 0.0)))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18254 (* ?x12434 l_0_5_147)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18252 (* ?x12431 l_0_5_146)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18250 (* ?x12616 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_101) l_0_5_92) ?x18250) ?x18252) ?x18254) 0.0))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18280 (* ?x12434 l_0_5_158)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18278 (* ?x12431 l_0_5_157)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18276 (* ?x14694 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_112) l_0_5_92) ?x18276) ?x18278) ?x18280) 0.0))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18311 (* ?x12434 l_0_5_165)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18309 (* ?x12431 l_0_5_164)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18307 (* ?x15204 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_119) l_0_5_92) ?x18307) ?x18309) ?x18311) 0.0))))))))
(assert
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18369 (* ?x12434 l_0_5_173)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18367 (* ?x12431 l_0_5_172)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x18361 (* ?x15301 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_127) l_0_5_92) ?x18361) ?x18367) ?x18369) 0.0))))))))
(assert
 (let ((?x16248 (* l_0_5_96 l_0_5_96)))
 (let ((?x16246 (* l_0_5_95 l_0_5_95)))
 (let ((?x16244 (* l_0_5_94 l_0_5_94)))
 (let ((?x16229 (* l_0_5_141 l_0_5_141)))
 (let ((?x18384 (- (+ (+ (* l_0_5_139 l_0_5_139) (* l_0_5_140 l_0_5_140)) ?x16229) ?x16244)))
 (= (- (- ?x18384 ?x16246) ?x16248) 0.0)))))))
(assert
 (let ((?x14934 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x14931 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x14928 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x14918 (* ?x12483 l_0_5_144)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x14916 (* ?x12480 l_0_5_143)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x14915 (* ?x12477 l_0_5_142)))
 (let ((?x14919 (+ (+ ?x14915 ?x14916) ?x14918)))
 (= (- (- (- ?x14919 ?x14928) ?x14931) ?x14934) 0.0))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16773 (* ?x12483 l_0_5_148)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16771 (* ?x12480 l_0_5_147)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16768 (* ?x12477 l_0_5_146)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x16763 (* ?x12628 l_0_5_96)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x16761 (* ?x12616 l_0_5_95)))
 (let ((?x18408 (+ (+ (- (- (* (* (- 2.0) l_0_5_101) l_0_5_94) ?x16761) ?x16763) ?x16768) ?x16771)))
 (= (+ ?x18408 ?x16773) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x16961 (* ?x12483 l_0_5_159)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x16959 (* ?x12480 l_0_5_158)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x16956 (* ?x12477 l_0_5_157)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x16952 (* ?x14697 l_0_5_96)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x16950 (* ?x14694 l_0_5_95)))
 (let ((?x18429 (+ (+ (- (- (* (* (- 2.0) l_0_5_112) l_0_5_94) ?x16950) ?x16952) ?x16956) ?x16959)))
 (= (+ ?x18429 ?x16961) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17075 (* ?x12483 l_0_5_166)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17073 (* ?x12480 l_0_5_165)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17070 (* ?x12477 l_0_5_164)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x17067 (* ?x15207 l_0_5_96)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x17065 (* ?x15204 l_0_5_95)))
 (let ((?x18447 (+ (+ (- (- (* (* (- 2.0) l_0_5_119) l_0_5_94) ?x17065) ?x17067) ?x17070) ?x17073)))
 (= (+ ?x18447 ?x17075) 0.0)))))))))))))
(assert
 (let ((?x12483 (* 2.0 l_0_5_141)))
 (let ((?x17190 (* ?x12483 l_0_5_174)))
 (let ((?x12480 (* 2.0 l_0_5_140)))
 (let ((?x17188 (* ?x12480 l_0_5_173)))
 (let ((?x12477 (* 2.0 l_0_5_139)))
 (let ((?x17185 (* ?x12477 l_0_5_172)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x17182 (* ?x15304 l_0_5_96)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x17180 (* ?x15301 l_0_5_95)))
 (let ((?x18465 (+ (+ (- (- (* (* (- 2.0) l_0_5_127) l_0_5_94) ?x17180) ?x17182) ?x17185) ?x17188)))
 (= (+ ?x18465 ?x17190) 0.0)))))))))))))
(assert
 (let ((?x15015 (* l_0_5_99 l_0_5_99)))
 (let ((?x15013 (* l_0_5_98 l_0_5_98)))
 (let ((?x15011 (* l_0_5_97 l_0_5_97)))
 (let ((?x15002 (* l_0_5_145 l_0_5_145)))
 (let ((?x15000 (* l_0_5_144 l_0_5_144)))
 (let ((?x14998 (* l_0_5_143 l_0_5_143)))
 (let ((?x19178 (+ (+ (* (- l_0_5_100) l_0_5_100) (* l_0_5_142 l_0_5_142)) ?x14998)))
 (= (- (- (- (+ (+ ?x19178 ?x15000) ?x15002) ?x15011) ?x15013) ?x15015) 0.0)))))))))
(assert
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15066 (* ?x12559 l_0_5_149)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15064 (* ?x12556 l_0_5_148)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15062 (* ?x12553 l_0_5_147)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15060 (* ?x12550 l_0_5_146)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x15053 (* ?x12628 l_0_5_99)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x15051 (* ?x12616 l_0_5_98)))
 (let ((?x15048 (* 2.0 l_0_5_101)))
 (let ((?x15049 (* ?x15048 l_0_5_97)))
 (let ((?x15054 (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_104) ?x15049) ?x15051) ?x15053)))
 (= (+ (+ (+ (+ ?x15054 ?x15060) ?x15062) ?x15064) ?x15066) 0.0)))))))))))))))))
(assert
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15216 (* ?x12559 l_0_5_167)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15214 (* ?x12556 l_0_5_166)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15212 (* ?x12553 l_0_5_165)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15210 (* ?x12550 l_0_5_164)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x15208 (* ?x15207 l_0_5_99)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x15205 (* ?x15204 l_0_5_98)))
 (let ((?x15201 (* 2.0 l_0_5_119)))
 (let ((?x15202 (* ?x15201 l_0_5_97)))
 (let ((?x15211 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_122) ?x15202) ?x15205) ?x15208) ?x15210)))
 (let ((?x15217 (+ (+ (+ ?x15211 ?x15212) ?x15214) ?x15216)))
 (= ?x15217 0.0))))))))))))))))))
(assert
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15313 (* ?x12559 l_0_5_175)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15311 (* ?x12556 l_0_5_174)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15309 (* ?x12553 l_0_5_173)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15307 (* ?x12550 l_0_5_172)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x15305 (* ?x15304 l_0_5_99)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x15302 (* ?x15301 l_0_5_98)))
 (let ((?x15298 (* 2.0 l_0_5_127)))
 (let ((?x15299 (* ?x15298 l_0_5_97)))
 (let ((?x15308 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_130) ?x15299) ?x15302) ?x15305) ?x15307)))
 (let ((?x15314 (+ (+ (+ ?x15308 ?x15309) ?x15311) ?x15313)))
 (= ?x15314 0.0))))))))))))))))))
(assert
 (let ((?x18497 (* l_0_5_150 l_0_5_150)))
 (let ((?x18495 (* l_0_5_149 l_0_5_149)))
 (let ((?x18493 (* l_0_5_148 l_0_5_148)))
 (let ((?x18491 (* l_0_5_147 l_0_5_147)))
 (let ((?x18489 (* l_0_5_146 l_0_5_146)))
 (let ((?x18487 (* l_0_5_105 l_0_5_105)))
 (let ((?x18485 (* l_0_5_104 l_0_5_104)))
 (let ((?x18483 (* l_0_5_103 l_0_5_103)))
 (let ((?x18484 (- (- (* (- l_0_5_101) l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x18483)))
 (let ((?x18498 (+ (+ (+ (+ (+ (- (- ?x18484 ?x18485) ?x18487) ?x18489) ?x18491) ?x18493) ?x18495) ?x18497)))
 (= ?x18498 0.0))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18552 (* ?x12655 l_0_5_161)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18550 (* ?x12652 l_0_5_160)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18548 (* ?x12649 l_0_5_159)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18546 (* ?x12646 l_0_5_158)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18544 (* ?x12643 l_0_5_157)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18542 (* ?x12634 l_0_5_116)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18540 (* ?x12631 l_0_5_115)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18538 (* ?x12628 l_0_5_114)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18536 (* ?x12616 l_0_5_113)))
 (let ((?x18543 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_112) ?x18536) ?x18538) ?x18540) ?x18542)))
 (= (+ (+ (+ (+ (+ ?x18543 ?x18544) ?x18546) ?x18548) ?x18550) ?x18552) 0.0)))))))))))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18611 (* ?x12655 l_0_5_168)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18609 (* ?x12652 l_0_5_167)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18607 (* ?x12649 l_0_5_166)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18605 (* ?x12646 l_0_5_165)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18603 (* ?x12643 l_0_5_164)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18601 (* ?x12634 l_0_5_123)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18591 (* ?x12631 l_0_5_122)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18588 (* ?x12628 l_0_5_121)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18584 (* ?x12616 l_0_5_120)))
 (let ((?x18602 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_119) ?x18584) ?x18588) ?x18591) ?x18601)))
 (= (+ (+ (+ (+ (+ ?x18602 ?x18603) ?x18605) ?x18607) ?x18609) ?x18611) 0.0)))))))))))))))))))))
(assert
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18670 (* ?x12655 l_0_5_176)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18668 (* ?x12652 l_0_5_175)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18666 (* ?x12649 l_0_5_174)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18664 (* ?x12646 l_0_5_173)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18662 (* ?x12643 l_0_5_172)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18660 (* ?x12634 l_0_5_131)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18650 (* ?x12631 l_0_5_130)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18647 (* ?x12628 l_0_5_129)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18643 (* ?x12616 l_0_5_128)))
 (let ((?x18661 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_127) ?x18643) ?x18647) ?x18650) ?x18660)))
 (= (+ (+ (+ (+ (+ ?x18661 ?x18662) ?x18664) ?x18666) ?x18668) ?x18670) 0.0)))))))))))))))))))))
(assert
 (let ((?x18747 (* l_0_5_163 l_0_5_163)))
 (let ((?x18745 (* l_0_5_162 l_0_5_162)))
 (let ((?x18743 (* l_0_5_161 l_0_5_161)))
 (let ((?x18741 (* l_0_5_160 l_0_5_160)))
 (let ((?x18739 (* l_0_5_159 l_0_5_159)))
 (let ((?x18737 (* l_0_5_158 l_0_5_158)))
 (let ((?x18735 (* l_0_5_157 l_0_5_157)))
 (let ((?x18733 (* l_0_5_118 l_0_5_118)))
 (let ((?x18731 (* l_0_5_117 l_0_5_117)))
 (let ((?x18729 (* l_0_5_116 l_0_5_116)))
 (let ((?x18727 (* l_0_5_115 l_0_5_115)))
 (let ((?x18725 (* l_0_5_114 l_0_5_114)))
 (let ((?x18726 (- (- (* (- l_0_5_112) l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18725)))
 (let ((?x18740 (+ (+ (+ (- (- (- (- ?x18726 ?x18727) ?x18729) ?x18731) ?x18733) ?x18735) ?x18737) ?x18739)))
 (= (+ (+ (+ (+ ?x18740 ?x18741) ?x18743) ?x18745) ?x18747) 0.0))))))))))))))))
(assert
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18805 (* ?x18107 l_0_5_170)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18803 (* ?x18104 l_0_5_169)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18801 (* ?x18101 l_0_5_168)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18799 (* ?x18098 l_0_5_167)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18797 (* ?x18095 l_0_5_166)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18795 (* ?x18092 l_0_5_165)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18793 (* ?x18089 l_0_5_164)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18791 (* ?x18084 l_0_5_125)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18789 (* ?x18081 l_0_5_124)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18787 (* ?x18078 l_0_5_123)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18785 (* ?x18075 l_0_5_122)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18783 (* ?x14697 l_0_5_121)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18781 (* ?x14694 l_0_5_120)))
 (let ((?x18788 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_119) ?x18781) ?x18783) ?x18785) ?x18787)))
 (let ((?x18802 (+ (+ (+ (+ (+ (- (- ?x18788 ?x18789) ?x18791) ?x18793) ?x18795) ?x18797) ?x18799) ?x18801)))
 (= (+ (+ ?x18802 ?x18803) ?x18805) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x18903 (* l_0_5_171 l_0_5_171)))
 (let ((?x18901 (* l_0_5_170 l_0_5_170)))
 (let ((?x18899 (* l_0_5_169 l_0_5_169)))
 (let ((?x18897 (* l_0_5_168 l_0_5_168)))
 (let ((?x18895 (* l_0_5_167 l_0_5_167)))
 (let ((?x18893 (* l_0_5_166 l_0_5_166)))
 (let ((?x18891 (* l_0_5_165 l_0_5_165)))
 (let ((?x18889 (* l_0_5_164 l_0_5_164)))
 (let ((?x18887 (* l_0_5_126 l_0_5_126)))
 (let ((?x18885 (* l_0_5_125 l_0_5_125)))
 (let ((?x18883 (* l_0_5_124 l_0_5_124)))
 (let ((?x18881 (* l_0_5_123 l_0_5_123)))
 (let ((?x18879 (* l_0_5_122 l_0_5_122)))
 (let ((?x18877 (* l_0_5_121 l_0_5_121)))
 (let ((?x18878 (- (- (* (- l_0_5_119) l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18877)))
 (let ((?x18892 (+ (+ (- (- (- (- (- ?x18878 ?x18879) ?x18881) ?x18883) ?x18885) ?x18887) ?x18889) ?x18891)))
 (= (+ (+ (+ (+ (+ (+ ?x18892 ?x18893) ?x18895) ?x18897) ?x18899) ?x18901) ?x18903) 0.0))))))))))))))))))
(assert
 (let ((?x18982 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18979 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18976 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18973 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18970 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18967 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18964 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18961 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18958 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18955 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18952 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18949 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18946 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x18943 (* ?x15207 l_0_5_129)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18941 (* ?x15204 l_0_5_128)))
 (let ((?x18950 (- (- (- (- (* (* (- 2.0) l_0_5_119) l_0_5_127) ?x18941) ?x18943) ?x18946) ?x18949)))
 (let ((?x18971 (+ (+ (+ (+ (- (- (- ?x18950 ?x18952) ?x18955) ?x18958) ?x18961) ?x18964) ?x18967) ?x18970)))
 (= (+ (+ (+ (+ ?x18971 ?x18973) ?x18976) ?x18979) ?x18982) 0.0)))))))))))))))))))))
(assert
 (let ((?x19082 (* l_0_5_180 l_0_5_180)))
 (let ((?x19080 (* l_0_5_179 l_0_5_179)))
 (let ((?x19078 (* l_0_5_178 l_0_5_178)))
 (let ((?x19076 (* l_0_5_177 l_0_5_177)))
 (let ((?x19074 (* l_0_5_176 l_0_5_176)))
 (let ((?x19072 (* l_0_5_175 l_0_5_175)))
 (let ((?x19070 (* l_0_5_174 l_0_5_174)))
 (let ((?x19068 (* l_0_5_173 l_0_5_173)))
 (let ((?x19066 (* l_0_5_172 l_0_5_172)))
 (let ((?x19064 (* l_0_5_135 l_0_5_135)))
 (let ((?x19062 (* l_0_5_134 l_0_5_134)))
 (let ((?x19060 (* l_0_5_133 l_0_5_133)))
 (let ((?x19058 (* l_0_5_132 l_0_5_132)))
 (let ((?x19045 (* l_0_5_131 l_0_5_131)))
 (let ((?x19042 (* l_0_5_130 l_0_5_130)))
 (let ((?x19038 (* l_0_5_129 l_0_5_129)))
 (let ((?x19040 (- (- (* (- l_0_5_127) l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x19038)))
 (let ((?x19067 (+ (- (- (- (- (- (- ?x19040 ?x19042) ?x19045) ?x19058) ?x19060) ?x19062) ?x19064) ?x19066)))
 (let ((?x19081 (+ (+ (+ (+ (+ (+ (+ ?x19067 ?x19068) ?x19070) ?x19072) ?x19074) ?x19076) ?x19078) ?x19080)))
 (= (+ ?x19081 ?x19082) 0.0)))))))))))))))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x18056 (* ?x14758 l_0_5_92)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15395 (* ?x15394 l_0_5_227)))
 (let ((?x19211 (- (* (* (- 2.0) l_0_5_136) l_0_5_137) (* (* 2.0 l_0_5_182) l_0_5_191))))
 (let ((?x19216 (- (+ (- ?x19211 (* (* 2.0 l_0_5_183) l_0_5_192)) ?x15395) (* (* 2.0 l_0_5_272) l_0_5_281))))
 (= (+ (- ?x19216 (* (* 2.0 l_0_5_273) l_0_5_282)) ?x18056) 0.0))))))))
(assert
 (let ((?x14758 (* 2.0 l_0_5_91)))
 (let ((?x14759 (* ?x14758 l_0_5_97)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15497 (* ?x15394 l_0_5_232)))
 (let ((?x19251 (- (* (* (- 2.0) l_0_5_136) l_0_5_142) (* (* 2.0 l_0_5_187) l_0_5_191))))
 (let ((?x19255 (- (- ?x19251 (* (* 2.0 l_0_5_188) l_0_5_192)) (* (* 2.0 l_0_5_189) l_0_5_193))))
 (let ((?x19260 (- (+ (- ?x19255 (* (* 2.0 l_0_5_190) l_0_5_194)) ?x15497) (* (* 2.0 l_0_5_277) l_0_5_281))))
 (let ((?x19264 (- (- ?x19260 (* (* 2.0 l_0_5_278) l_0_5_282)) (* (* 2.0 l_0_5_279) l_0_5_283))))
 (= (+ (- ?x19264 (* (* 2.0 l_0_5_280) l_0_5_284)) ?x14759) 0.0))))))))))
(assert
 (let ((?x19346 (* l_0_5_285 l_0_5_285)))
 (let ((?x19344 (* l_0_5_284 l_0_5_284)))
 (let ((?x19342 (* l_0_5_283 l_0_5_283)))
 (let ((?x19340 (* l_0_5_282 l_0_5_282)))
 (let ((?x19338 (* l_0_5_281 l_0_5_281)))
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15567 (* ?x15394 l_0_5_236)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18087 (* ?x12097 l_0_5_146)))
 (let ((?x19324 (- (- (* (* 2.0 l_0_5_101) l_0_5_91) ?x18087) (* (* 1.0 l_0_5_191) l_0_5_191))))
 (let ((?x19330 (- (- ?x19324 (* (* 1.0 l_0_5_192) l_0_5_192)) (* (* 1.0 l_0_5_193) l_0_5_193))))
 (let ((?x19336 (- (- ?x19330 (* (* 1.0 l_0_5_194) l_0_5_194)) (* (* 1.0 l_0_5_195) l_0_5_195))))
 (= (- (- (- (- (- (+ ?x19336 ?x15567) ?x19338) ?x19340) ?x19342) ?x19344) ?x19346) 0.0))))))))))))))
(assert
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15642 (* ?x15394 l_0_5_241)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x12098 (* ?x12097 l_0_5_151)))
 (let ((?x12094 (* 2.0 l_0_5_106)))
 (let ((?x12095 (* ?x12094 l_0_5_91)))
 (let ((?x19397 (- (- (- ?x12095 ?x12098) (* (* 2.0 l_0_5_191) l_0_5_196)) (* (* 2.0 l_0_5_192) l_0_5_197))))
 (let ((?x19403 (- (- ?x19397 (* (* 2.0 l_0_5_193) l_0_5_198)) (* (* 2.0 l_0_5_194) l_0_5_199))))
 (let ((?x19410 (- (+ (- ?x19403 (* (* 2.0 l_0_5_195) l_0_5_200)) ?x15642) (* (* 2.0 l_0_5_281) l_0_5_286))))
 (let ((?x19416 (- (- ?x19410 (* (* 2.0 l_0_5_282) l_0_5_287)) (* (* 2.0 l_0_5_283) l_0_5_288))))
 (let ((?x19422 (- (- ?x19416 (* (* 2.0 l_0_5_284) l_0_5_289)) (* (* 2.0 l_0_5_285) l_0_5_290))))
 (= ?x19422 0.0)))))))))))))
(assert
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15706 (* ?x15394 l_0_5_247)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18189 (* ?x12097 l_0_5_157)))
 (let ((?x19491 (- (- (* (* 2.0 l_0_5_112) l_0_5_91) ?x18189) (* (* 2.0 l_0_5_191) l_0_5_202))))
 (let ((?x19495 (- (- ?x19491 (* (* 2.0 l_0_5_192) l_0_5_203)) (* (* 2.0 l_0_5_193) l_0_5_204))))
 (let ((?x19499 (- (- ?x19495 (* (* 2.0 l_0_5_194) l_0_5_205)) (* (* 2.0 l_0_5_195) l_0_5_206))))
 (let ((?x19504 (- (- (+ ?x19499 ?x15706) (* (* 2.0 l_0_5_281) l_0_5_292)) (* (* 2.0 l_0_5_282) l_0_5_293))))
 (let ((?x19508 (- (- ?x19504 (* (* 2.0 l_0_5_283) l_0_5_294)) (* (* 2.0 l_0_5_284) l_0_5_295))))
 (= (- ?x19508 (* (* 2.0 l_0_5_285) l_0_5_296)) 0.0)))))))))))
(assert
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15770 (* ?x15394 l_0_5_254)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18196 (* ?x12097 l_0_5_164)))
 (let ((?x19580 (- (- (* (* 2.0 l_0_5_119) l_0_5_91) ?x18196) (* (* 2.0 l_0_5_191) l_0_5_209))))
 (let ((?x19584 (- (- ?x19580 (* (* 2.0 l_0_5_192) l_0_5_210)) (* (* 2.0 l_0_5_193) l_0_5_211))))
 (let ((?x19588 (- (- ?x19584 (* (* 2.0 l_0_5_194) l_0_5_212)) (* (* 2.0 l_0_5_195) l_0_5_213))))
 (let ((?x19593 (- (- (+ ?x19588 ?x15770) (* (* 2.0 l_0_5_281) l_0_5_299)) (* (* 2.0 l_0_5_282) l_0_5_300))))
 (let ((?x19597 (- (- ?x19593 (* (* 2.0 l_0_5_283) l_0_5_301)) (* (* 2.0 l_0_5_284) l_0_5_302))))
 (= (- ?x19597 (* (* 2.0 l_0_5_285) l_0_5_303)) 0.0)))))))))))
(assert
 (let ((?x15394 (* 2.0 l_0_5_226)))
 (let ((?x15834 (* ?x15394 l_0_5_262)))
 (let ((?x12097 (* 2.0 l_0_5_136)))
 (let ((?x18207 (* ?x12097 l_0_5_172)))
 (let ((?x19669 (- (- (* (* 2.0 l_0_5_127) l_0_5_91) ?x18207) (* (* 2.0 l_0_5_191) l_0_5_217))))
 (let ((?x19673 (- (- ?x19669 (* (* 2.0 l_0_5_192) l_0_5_218)) (* (* 2.0 l_0_5_193) l_0_5_219))))
 (let ((?x19677 (- (- ?x19673 (* (* 2.0 l_0_5_194) l_0_5_220)) (* (* 2.0 l_0_5_195) l_0_5_221))))
 (let ((?x19682 (- (- (+ ?x19677 ?x15834) (* (* 2.0 l_0_5_281) l_0_5_307)) (* (* 2.0 l_0_5_282) l_0_5_308))))
 (let ((?x19686 (- (- ?x19682 (* (* 2.0 l_0_5_283) l_0_5_309)) (* (* 2.0 l_0_5_284) l_0_5_310))))
 (= (- ?x19686 (* (* 2.0 l_0_5_285) l_0_5_311)) 0.0)))))))))))
(assert
 (let ((?x18225 (* l_0_5_93 l_0_5_93)))
 (let ((?x18223 (* l_0_5_92 l_0_5_92)))
 (let ((?x15892 (* l_0_5_228 l_0_5_228)))
 (let ((?x15890 (* l_0_5_227 l_0_5_227)))
 (let ((?x19758 (+ (- (* (- l_0_5_137) l_0_5_137) (* l_0_5_138 l_0_5_138)) ?x15890)))
 (= (+ (+ (+ ?x19758 ?x15892) ?x18223) ?x18225) 0.0)))))))
(assert
 (let ((?x14883 (* 2.0 l_0_5_93)))
 (let ((?x14884 (* ?x14883 l_0_5_98)))
 (let ((?x14880 (* 2.0 l_0_5_92)))
 (let ((?x14881 (* ?x14880 l_0_5_97)))
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x15941 (* ?x15912 l_0_5_233)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x15939 (* ?x15909 l_0_5_232)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x14874 (* ?x12434 l_0_5_143)))
 (let ((?x19774 (+ (+ (+ (- (* (* (- 2.0) l_0_5_137) l_0_5_142) ?x14874) ?x15939) ?x15941) ?x14881)))
 (= (+ ?x19774 ?x14884) 0.0)))))))))))))
(assert
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x15976 (* ?x15912 l_0_5_237)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x15973 (* ?x15909 l_0_5_236)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18254 (* ?x12434 l_0_5_147)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18252 (* ?x12431 l_0_5_146)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18250 (* ?x12616 l_0_5_93)))
 (let ((?x19786 (+ (- (- (+ (* (* 2.0 l_0_5_101) l_0_5_92) ?x18250) ?x18252) ?x18254) ?x15973)))
 (= (+ ?x19786 ?x15976) 0.0)))))))))))))
(assert
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16027 (* ?x15912 l_0_5_242)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16025 (* ?x15909 l_0_5_241)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x12435 (* ?x12434 l_0_5_152)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x12432 (* ?x12431 l_0_5_151)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12425 (* ?x12290 l_0_5_93)))
 (let ((?x19803 (+ (- (- (+ (* (* 2.0 l_0_5_106) l_0_5_92) ?x12425) ?x12432) ?x12435) ?x16025)))
 (= (+ ?x19803 ?x16027) 0.0)))))))))))))
(assert
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16054 (* ?x15912 l_0_5_248)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16052 (* ?x15909 l_0_5_247)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18280 (* ?x12434 l_0_5_158)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18278 (* ?x12431 l_0_5_157)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18276 (* ?x14694 l_0_5_93)))
 (let ((?x19818 (+ (- (- (+ (* (* 2.0 l_0_5_112) l_0_5_92) ?x18276) ?x18278) ?x18280) ?x16052)))
 (= (+ ?x19818 ?x16054) 0.0)))))))))))))
(assert
 (let ((?x15912 (* 2.0 l_0_5_228)))
 (let ((?x16117 (* ?x15912 l_0_5_263)))
 (let ((?x15909 (* 2.0 l_0_5_227)))
 (let ((?x16115 (* ?x15909 l_0_5_262)))
 (let ((?x12434 (* 2.0 l_0_5_138)))
 (let ((?x18369 (* ?x12434 l_0_5_173)))
 (let ((?x12431 (* 2.0 l_0_5_137)))
 (let ((?x18367 (* ?x12431 l_0_5_172)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x18361 (* ?x15301 l_0_5_93)))
 (let ((?x19835 (+ (- (- (+ (* (* 2.0 l_0_5_127) l_0_5_92) ?x18361) ?x18367) ?x18369) ?x16115)))
 (= (+ ?x19835 ?x16117) 0.0)))))))))))))
(assert
 (let ((?x15015 (* l_0_5_99 l_0_5_99)))
 (let ((?x15013 (* l_0_5_98 l_0_5_98)))
 (let ((?x15011 (* l_0_5_97 l_0_5_97)))
 (let ((?x16471 (* l_0_5_235 l_0_5_235)))
 (let ((?x16469 (* l_0_5_234 l_0_5_234)))
 (let ((?x16467 (* l_0_5_233 l_0_5_233)))
 (let ((?x16465 (* l_0_5_232 l_0_5_232)))
 (let ((?x15002 (* l_0_5_145 l_0_5_145)))
 (let ((?x15000 (* l_0_5_144 l_0_5_144)))
 (let ((?x14998 (* l_0_5_143 l_0_5_143)))
 (let ((?x19850 (- (- (- (* l_0_5_100 l_0_5_100) (* l_0_5_142 l_0_5_142)) ?x14998) ?x15000)))
 (let ((?x19857 (+ (+ (+ (+ (+ (+ (- ?x19850 ?x15002) ?x16465) ?x16467) ?x16469) ?x16471) ?x15011) ?x15013)))
 (= (+ ?x19857 ?x15015) 0.0))))))))))))))
(assert
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16523 (* ?x14634 l_0_5_239)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16521 (* ?x14631 l_0_5_238)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16519 (* ?x14628 l_0_5_237)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16517 (* ?x14625 l_0_5_236)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15066 (* ?x12559 l_0_5_149)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15064 (* ?x12556 l_0_5_148)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15062 (* ?x12553 l_0_5_147)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15060 (* ?x12550 l_0_5_146)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x15053 (* ?x12628 l_0_5_99)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x15051 (* ?x12616 l_0_5_98)))
 (let ((?x15048 (* 2.0 l_0_5_101)))
 (let ((?x15049 (* ?x15048 l_0_5_97)))
 (let ((?x19873 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_104) ?x15049) ?x15051) ?x15053) ?x15060)))
 (let ((?x19880 (+ (+ (+ (+ (- (- (- ?x19873 ?x15062) ?x15064) ?x15066) ?x16517) ?x16519) ?x16521) ?x16523)))
 (= ?x19880 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16597 (* ?x14634 l_0_5_244)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16595 (* ?x14631 l_0_5_243)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16593 (* ?x14628 l_0_5_242)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16591 (* ?x14625 l_0_5_241)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x12560 (* ?x12559 l_0_5_154)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x12557 (* ?x12556 l_0_5_153)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x12554 (* ?x12553 l_0_5_152)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x12551 (* ?x12550 l_0_5_151)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12548 (* ?x12293 l_0_5_99)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12546 (* ?x12290 l_0_5_98)))
 (let ((?x12094 (* 2.0 l_0_5_106)))
 (let ((?x12536 (* ?x12094 l_0_5_97)))
 (let ((?x19900 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_109) ?x12536) ?x12546) ?x12548) ?x12551)))
 (let ((?x19907 (+ (+ (+ (+ (- (- (- ?x19900 ?x12554) ?x12557) ?x12560) ?x16591) ?x16593) ?x16595) ?x16597)))
 (= ?x19907 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16653 (* ?x14634 l_0_5_257)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16651 (* ?x14631 l_0_5_256)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16649 (* ?x14628 l_0_5_255)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16647 (* ?x14625 l_0_5_254)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15216 (* ?x12559 l_0_5_167)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15214 (* ?x12556 l_0_5_166)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15212 (* ?x12553 l_0_5_165)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15210 (* ?x12550 l_0_5_164)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x15208 (* ?x15207 l_0_5_99)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x15205 (* ?x15204 l_0_5_98)))
 (let ((?x15201 (* 2.0 l_0_5_119)))
 (let ((?x15202 (* ?x15201 l_0_5_97)))
 (let ((?x19928 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_122) ?x15202) ?x15205) ?x15208) ?x15210)))
 (let ((?x19935 (+ (+ (+ (+ (- (- (- ?x19928 ?x15212) ?x15214) ?x15216) ?x16647) ?x16649) ?x16651) ?x16653)))
 (= ?x19935 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14634 (* 2.0 l_0_5_235)))
 (let ((?x16712 (* ?x14634 l_0_5_265)))
 (let ((?x14631 (* 2.0 l_0_5_234)))
 (let ((?x16710 (* ?x14631 l_0_5_264)))
 (let ((?x14628 (* 2.0 l_0_5_233)))
 (let ((?x16708 (* ?x14628 l_0_5_263)))
 (let ((?x14625 (* 2.0 l_0_5_232)))
 (let ((?x16706 (* ?x14625 l_0_5_262)))
 (let ((?x12559 (* 2.0 l_0_5_145)))
 (let ((?x15313 (* ?x12559 l_0_5_175)))
 (let ((?x12556 (* 2.0 l_0_5_144)))
 (let ((?x15311 (* ?x12556 l_0_5_174)))
 (let ((?x12553 (* 2.0 l_0_5_143)))
 (let ((?x15309 (* ?x12553 l_0_5_173)))
 (let ((?x12550 (* 2.0 l_0_5_142)))
 (let ((?x15307 (* ?x12550 l_0_5_172)))
 (let ((?x15304 (* 2.0 l_0_5_129)))
 (let ((?x15305 (* ?x15304 l_0_5_99)))
 (let ((?x15301 (* 2.0 l_0_5_128)))
 (let ((?x15302 (* ?x15301 l_0_5_98)))
 (let ((?x15298 (* 2.0 l_0_5_127)))
 (let ((?x15299 (* ?x15298 l_0_5_97)))
 (let ((?x19955 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_130) ?x15299) ?x15302) ?x15305) ?x15307)))
 (let ((?x19962 (+ (+ (+ (+ (- (- (- ?x19955 ?x15309) ?x15311) ?x15313) ?x16706) ?x16708) ?x16710) ?x16712)))
 (= ?x19962 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16787 (* l_0_5_240 l_0_5_240)))
 (let ((?x16785 (* l_0_5_239 l_0_5_239)))
 (let ((?x16783 (* l_0_5_238 l_0_5_238)))
 (let ((?x16781 (* l_0_5_237 l_0_5_237)))
 (let ((?x16779 (* l_0_5_236 l_0_5_236)))
 (let ((?x18497 (* l_0_5_150 l_0_5_150)))
 (let ((?x18495 (* l_0_5_149 l_0_5_149)))
 (let ((?x18493 (* l_0_5_148 l_0_5_148)))
 (let ((?x18491 (* l_0_5_147 l_0_5_147)))
 (let ((?x18489 (* l_0_5_146 l_0_5_146)))
 (let ((?x18487 (* l_0_5_105 l_0_5_105)))
 (let ((?x18485 (* l_0_5_104 l_0_5_104)))
 (let ((?x18483 (* l_0_5_103 l_0_5_103)))
 (let ((?x19980 (+ (+ (+ (* l_0_5_101 l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x18483) ?x18485)))
 (let ((?x19987 (+ (- (- (- (- (- (+ ?x19980 ?x18487) ?x18489) ?x18491) ?x18493) ?x18495) ?x18497) ?x16779)))
 (= (+ (+ (+ (+ ?x19987 ?x16781) ?x16783) ?x16785) ?x16787) 0.0)))))))))))))))))
(assert
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x16876 (* ?x16875 l_0_5_245)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x16873 (* ?x16872 l_0_5_244)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x16870 (* ?x16869 l_0_5_243)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x16867 (* ?x16866 l_0_5_242)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x16864 (* ?x16863 l_0_5_241)))
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x12656 (* ?x12655 l_0_5_155)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x12653 (* ?x12652 l_0_5_154)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x12650 (* ?x12649 l_0_5_153)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x12647 (* ?x12646 l_0_5_152)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x12644 (* ?x12643 l_0_5_151)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x12635 (* ?x12634 l_0_5_110)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x12632 (* ?x12631 l_0_5_109)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x12629 (* ?x12628 l_0_5_108)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x12626 (* ?x12616 l_0_5_107)))
 (let ((?x20009 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_106) ?x12626) ?x12629) ?x12632) ?x12635)))
 (let ((?x20016 (+ (+ (- (- (- (- (- ?x20009 ?x12644) ?x12647) ?x12650) ?x12653) ?x12656) ?x16864) ?x16867)))
 (= (+ (+ (+ ?x20016 ?x16870) ?x16873) ?x16876) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x16975 (* ?x16875 l_0_5_251)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x16973 (* ?x16872 l_0_5_250)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x16971 (* ?x16869 l_0_5_249)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x16969 (* ?x16866 l_0_5_248)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x16967 (* ?x16863 l_0_5_247)))
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18552 (* ?x12655 l_0_5_161)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18550 (* ?x12652 l_0_5_160)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18548 (* ?x12649 l_0_5_159)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18546 (* ?x12646 l_0_5_158)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18544 (* ?x12643 l_0_5_157)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18542 (* ?x12634 l_0_5_116)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18540 (* ?x12631 l_0_5_115)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18538 (* ?x12628 l_0_5_114)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18536 (* ?x12616 l_0_5_113)))
 (let ((?x20042 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_112) ?x18536) ?x18538) ?x18540) ?x18542)))
 (let ((?x20049 (+ (+ (- (- (- (- (- ?x20042 ?x18544) ?x18546) ?x18548) ?x18550) ?x18552) ?x16967) ?x16969)))
 (= (+ (+ (+ ?x20049 ?x16971) ?x16973) ?x16975) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x17090 (* ?x16875 l_0_5_258)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x17088 (* ?x16872 l_0_5_257)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x17086 (* ?x16869 l_0_5_256)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x17084 (* ?x16866 l_0_5_255)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x17082 (* ?x16863 l_0_5_254)))
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18611 (* ?x12655 l_0_5_168)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18609 (* ?x12652 l_0_5_167)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18607 (* ?x12649 l_0_5_166)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18605 (* ?x12646 l_0_5_165)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18603 (* ?x12643 l_0_5_164)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18601 (* ?x12634 l_0_5_123)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18591 (* ?x12631 l_0_5_122)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18588 (* ?x12628 l_0_5_121)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18584 (* ?x12616 l_0_5_120)))
 (let ((?x20080 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_119) ?x18584) ?x18588) ?x18591) ?x18601)))
 (let ((?x20087 (+ (+ (- (- (- (- (- ?x20080 ?x18603) ?x18605) ?x18607) ?x18609) ?x18611) ?x17082) ?x17084)))
 (= (+ (+ (+ ?x20087 ?x17086) ?x17088) ?x17090) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16875 (* 2.0 l_0_5_240)))
 (let ((?x17205 (* ?x16875 l_0_5_266)))
 (let ((?x16872 (* 2.0 l_0_5_239)))
 (let ((?x17203 (* ?x16872 l_0_5_265)))
 (let ((?x16869 (* 2.0 l_0_5_238)))
 (let ((?x17201 (* ?x16869 l_0_5_264)))
 (let ((?x16866 (* 2.0 l_0_5_237)))
 (let ((?x17199 (* ?x16866 l_0_5_263)))
 (let ((?x16863 (* 2.0 l_0_5_236)))
 (let ((?x17197 (* ?x16863 l_0_5_262)))
 (let ((?x12655 (* 2.0 l_0_5_150)))
 (let ((?x18670 (* ?x12655 l_0_5_176)))
 (let ((?x12652 (* 2.0 l_0_5_149)))
 (let ((?x18668 (* ?x12652 l_0_5_175)))
 (let ((?x12649 (* 2.0 l_0_5_148)))
 (let ((?x18666 (* ?x12649 l_0_5_174)))
 (let ((?x12646 (* 2.0 l_0_5_147)))
 (let ((?x18664 (* ?x12646 l_0_5_173)))
 (let ((?x12643 (* 2.0 l_0_5_146)))
 (let ((?x18662 (* ?x12643 l_0_5_172)))
 (let ((?x12634 (* 2.0 l_0_5_105)))
 (let ((?x18660 (* ?x12634 l_0_5_131)))
 (let ((?x12631 (* 2.0 l_0_5_104)))
 (let ((?x18650 (* ?x12631 l_0_5_130)))
 (let ((?x12628 (* 2.0 l_0_5_103)))
 (let ((?x18647 (* ?x12628 l_0_5_129)))
 (let ((?x12616 (* 2.0 l_0_5_102)))
 (let ((?x18643 (* ?x12616 l_0_5_128)))
 (let ((?x20118 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_127) ?x18643) ?x18647) ?x18650) ?x18660)))
 (let ((?x20125 (+ (+ (- (- (- (- (- ?x20118 ?x18662) ?x18664) ?x18666) ?x18668) ?x18670) ?x17197) ?x17199)))
 (= (+ (+ (+ ?x20125 ?x17201) ?x17203) ?x17205) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x17302 (* l_0_5_246 l_0_5_246)))
 (let ((?x17300 (* l_0_5_245 l_0_5_245)))
 (let ((?x17298 (* l_0_5_244 l_0_5_244)))
 (let ((?x17296 (* l_0_5_243 l_0_5_243)))
 (let ((?x17294 (* l_0_5_242 l_0_5_242)))
 (let ((?x17292 (* l_0_5_241 l_0_5_241)))
 (let ((?x12740 (* l_0_5_156 l_0_5_156)))
 (let ((?x12738 (* l_0_5_155 l_0_5_155)))
 (let ((?x12736 (* l_0_5_154 l_0_5_154)))
 (let ((?x12734 (* l_0_5_153 l_0_5_153)))
 (let ((?x12732 (* l_0_5_152 l_0_5_152)))
 (let ((?x12730 (* l_0_5_151 l_0_5_151)))
 (let ((?x12728 (* l_0_5_111 l_0_5_111)))
 (let ((?x12726 (* l_0_5_110 l_0_5_110)))
 (let ((?x12714 (* l_0_5_109 l_0_5_109)))
 (let ((?x12710 (* l_0_5_108 l_0_5_108)))
 (let ((?x20154 (+ (+ (+ (* l_0_5_106 l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x12710) ?x12714)))
 (let ((?x20161 (- (- (- (- (- (+ (+ ?x20154 ?x12726) ?x12728) ?x12730) ?x12732) ?x12734) ?x12736) ?x12738)))
 (let ((?x20168 (+ (+ (+ (+ (+ (+ (- ?x20161 ?x12740) ?x17292) ?x17294) ?x17296) ?x17298) ?x17300) ?x17302)))
 (= ?x20168 0.0)))))))))))))))))))))
(assert
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x17359 (* ?x12153 l_0_5_252)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x17357 (* ?x12150 l_0_5_251)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x17355 (* ?x12147 l_0_5_250)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x17353 (* ?x12144 l_0_5_249)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x17351 (* ?x12141 l_0_5_248)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x17349 (* ?x12138 l_0_5_247)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12815 (* ?x12320 l_0_5_162)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12813 (* ?x12317 l_0_5_161)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12811 (* ?x12314 l_0_5_160)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12809 (* ?x12311 l_0_5_159)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12807 (* ?x12308 l_0_5_158)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12805 (* ?x12305 l_0_5_157)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12803 (* ?x12302 l_0_5_117)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12801 (* ?x12299 l_0_5_116)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12799 (* ?x12296 l_0_5_115)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12797 (* ?x12293 l_0_5_114)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12785 (* ?x12290 l_0_5_113)))
 (let ((?x20188 (+ (+ (+ (+ (* (* 2.0 l_0_5_106) l_0_5_112) ?x12785) ?x12797) ?x12799) ?x12801)))
 (let ((?x20195 (- (- (- (- (- (- (+ ?x20188 ?x12803) ?x12805) ?x12807) ?x12809) ?x12811) ?x12813) ?x12815)))
 (= (+ (+ (+ (+ (+ (+ ?x20195 ?x17349) ?x17351) ?x17353) ?x17355) ?x17357) ?x17359) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12153 (* 2.0 l_0_5_246)))
 (let ((?x17445 (* ?x12153 l_0_5_267)))
 (let ((?x12150 (* 2.0 l_0_5_245)))
 (let ((?x17443 (* ?x12150 l_0_5_266)))
 (let ((?x12147 (* 2.0 l_0_5_244)))
 (let ((?x17441 (* ?x12147 l_0_5_265)))
 (let ((?x12144 (* 2.0 l_0_5_243)))
 (let ((?x17439 (* ?x12144 l_0_5_264)))
 (let ((?x12141 (* 2.0 l_0_5_242)))
 (let ((?x17437 (* ?x12141 l_0_5_263)))
 (let ((?x12138 (* 2.0 l_0_5_241)))
 (let ((?x17435 (* ?x12138 l_0_5_262)))
 (let ((?x12320 (* 2.0 l_0_5_156)))
 (let ((?x12979 (* ?x12320 l_0_5_177)))
 (let ((?x12317 (* 2.0 l_0_5_155)))
 (let ((?x12977 (* ?x12317 l_0_5_176)))
 (let ((?x12314 (* 2.0 l_0_5_154)))
 (let ((?x12975 (* ?x12314 l_0_5_175)))
 (let ((?x12311 (* 2.0 l_0_5_153)))
 (let ((?x12973 (* ?x12311 l_0_5_174)))
 (let ((?x12308 (* 2.0 l_0_5_152)))
 (let ((?x12971 (* ?x12308 l_0_5_173)))
 (let ((?x12305 (* 2.0 l_0_5_151)))
 (let ((?x12969 (* ?x12305 l_0_5_172)))
 (let ((?x12302 (* 2.0 l_0_5_111)))
 (let ((?x12967 (* ?x12302 l_0_5_132)))
 (let ((?x12299 (* 2.0 l_0_5_110)))
 (let ((?x12965 (* ?x12299 l_0_5_131)))
 (let ((?x12296 (* 2.0 l_0_5_109)))
 (let ((?x12963 (* ?x12296 l_0_5_130)))
 (let ((?x12293 (* 2.0 l_0_5_108)))
 (let ((?x12961 (* ?x12293 l_0_5_129)))
 (let ((?x12290 (* 2.0 l_0_5_107)))
 (let ((?x12955 (* ?x12290 l_0_5_128)))
 (let ((?x20227 (+ (+ (+ (+ (* (* 2.0 l_0_5_106) l_0_5_127) ?x12955) ?x12961) ?x12963) ?x12965)))
 (let ((?x20234 (- (- (- (- (- (- (+ ?x20227 ?x12967) ?x12969) ?x12971) ?x12973) ?x12975) ?x12977) ?x12979)))
 (= (+ (+ (+ (+ (+ (+ ?x20234 ?x17435) ?x17437) ?x17439) ?x17441) ?x17443) ?x17445) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17525 (* l_0_5_253 l_0_5_253)))
 (let ((?x17523 (* l_0_5_252 l_0_5_252)))
 (let ((?x17521 (* l_0_5_251 l_0_5_251)))
 (let ((?x17519 (* l_0_5_250 l_0_5_250)))
 (let ((?x17516 (* l_0_5_249 l_0_5_249)))
 (let ((?x17514 (* l_0_5_248 l_0_5_248)))
 (let ((?x17512 (* l_0_5_247 l_0_5_247)))
 (let ((?x18747 (* l_0_5_163 l_0_5_163)))
 (let ((?x18745 (* l_0_5_162 l_0_5_162)))
 (let ((?x18743 (* l_0_5_161 l_0_5_161)))
 (let ((?x18741 (* l_0_5_160 l_0_5_160)))
 (let ((?x18739 (* l_0_5_159 l_0_5_159)))
 (let ((?x18737 (* l_0_5_158 l_0_5_158)))
 (let ((?x18735 (* l_0_5_157 l_0_5_157)))
 (let ((?x18733 (* l_0_5_118 l_0_5_118)))
 (let ((?x18731 (* l_0_5_117 l_0_5_117)))
 (let ((?x18729 (* l_0_5_116 l_0_5_116)))
 (let ((?x18727 (* l_0_5_115 l_0_5_115)))
 (let ((?x18725 (* l_0_5_114 l_0_5_114)))
 (let ((?x20264 (+ (+ (+ (* l_0_5_112 l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18725) ?x18727)))
 (let ((?x20271 (- (- (- (- (+ (+ (+ ?x20264 ?x18729) ?x18731) ?x18733) ?x18735) ?x18737) ?x18739) ?x18741)))
 (let ((?x20278 (+ (+ (+ (+ (- (- (- ?x20271 ?x18743) ?x18745) ?x18747) ?x17512) ?x17514) ?x17516) ?x17519)))
 (= (+ (+ (+ ?x20278 ?x17521) ?x17523) ?x17525) 0.0))))))))))))))))))))))))
(assert
 (let ((?x17599 (* 2.0 l_0_5_253)))
 (let ((?x17600 (* ?x17599 l_0_5_260)))
 (let ((?x17596 (* 2.0 l_0_5_252)))
 (let ((?x17597 (* ?x17596 l_0_5_259)))
 (let ((?x17593 (* 2.0 l_0_5_251)))
 (let ((?x17594 (* ?x17593 l_0_5_258)))
 (let ((?x17590 (* 2.0 l_0_5_250)))
 (let ((?x17591 (* ?x17590 l_0_5_257)))
 (let ((?x17586 (* 2.0 l_0_5_249)))
 (let ((?x17587 (* ?x17586 l_0_5_256)))
 (let ((?x17583 (* 2.0 l_0_5_248)))
 (let ((?x17584 (* ?x17583 l_0_5_255)))
 (let ((?x17580 (* 2.0 l_0_5_247)))
 (let ((?x17581 (* ?x17580 l_0_5_254)))
 (let ((?x18107 (* 2.0 l_0_5_163)))
 (let ((?x18805 (* ?x18107 l_0_5_170)))
 (let ((?x18104 (* 2.0 l_0_5_162)))
 (let ((?x18803 (* ?x18104 l_0_5_169)))
 (let ((?x18101 (* 2.0 l_0_5_161)))
 (let ((?x18801 (* ?x18101 l_0_5_168)))
 (let ((?x18098 (* 2.0 l_0_5_160)))
 (let ((?x18799 (* ?x18098 l_0_5_167)))
 (let ((?x18095 (* 2.0 l_0_5_159)))
 (let ((?x18797 (* ?x18095 l_0_5_166)))
 (let ((?x18092 (* 2.0 l_0_5_158)))
 (let ((?x18795 (* ?x18092 l_0_5_165)))
 (let ((?x18089 (* 2.0 l_0_5_157)))
 (let ((?x18793 (* ?x18089 l_0_5_164)))
 (let ((?x18084 (* 2.0 l_0_5_118)))
 (let ((?x18791 (* ?x18084 l_0_5_125)))
 (let ((?x18081 (* 2.0 l_0_5_117)))
 (let ((?x18789 (* ?x18081 l_0_5_124)))
 (let ((?x18078 (* 2.0 l_0_5_116)))
 (let ((?x18787 (* ?x18078 l_0_5_123)))
 (let ((?x18075 (* 2.0 l_0_5_115)))
 (let ((?x18785 (* ?x18075 l_0_5_122)))
 (let ((?x14697 (* 2.0 l_0_5_114)))
 (let ((?x18783 (* ?x14697 l_0_5_121)))
 (let ((?x14694 (* 2.0 l_0_5_113)))
 (let ((?x18781 (* ?x14694 l_0_5_120)))
 (let ((?x20303 (+ (+ (+ (+ (* (* 2.0 l_0_5_112) l_0_5_119) ?x18781) ?x18783) ?x18785) ?x18787)))
 (let ((?x20310 (- (- (- (- (- (+ (+ ?x20303 ?x18789) ?x18791) ?x18793) ?x18795) ?x18797) ?x18799) ?x18801)))
 (let ((?x20317 (+ (+ (+ (+ (+ (- (- ?x20310 ?x18803) ?x18805) ?x17581) ?x17584) ?x17587) ?x17591) ?x17594)))
 (= (+ (+ ?x20317 ?x17597) ?x17600) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17800 (* l_0_5_261 l_0_5_261)))
 (let ((?x17798 (* l_0_5_260 l_0_5_260)))
 (let ((?x17796 (* l_0_5_259 l_0_5_259)))
 (let ((?x17794 (* l_0_5_258 l_0_5_258)))
 (let ((?x17792 (* l_0_5_257 l_0_5_257)))
 (let ((?x17790 (* l_0_5_256 l_0_5_256)))
 (let ((?x17788 (* l_0_5_255 l_0_5_255)))
 (let ((?x17820 (* l_0_5_254 l_0_5_254)))
 (let ((?x18903 (* l_0_5_171 l_0_5_171)))
 (let ((?x18901 (* l_0_5_170 l_0_5_170)))
 (let ((?x18899 (* l_0_5_169 l_0_5_169)))
 (let ((?x18897 (* l_0_5_168 l_0_5_168)))
 (let ((?x18895 (* l_0_5_167 l_0_5_167)))
 (let ((?x18893 (* l_0_5_166 l_0_5_166)))
 (let ((?x18891 (* l_0_5_165 l_0_5_165)))
 (let ((?x18889 (* l_0_5_164 l_0_5_164)))
 (let ((?x18887 (* l_0_5_126 l_0_5_126)))
 (let ((?x18885 (* l_0_5_125 l_0_5_125)))
 (let ((?x18883 (* l_0_5_124 l_0_5_124)))
 (let ((?x18881 (* l_0_5_123 l_0_5_123)))
 (let ((?x18879 (* l_0_5_122 l_0_5_122)))
 (let ((?x18877 (* l_0_5_121 l_0_5_121)))
 (let ((?x20353 (+ (+ (+ (* l_0_5_119 l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18877) ?x18879)))
 (let ((?x20360 (- (- (- (+ (+ (+ (+ ?x20353 ?x18881) ?x18883) ?x18885) ?x18887) ?x18889) ?x18891) ?x18893)))
 (let ((?x20367 (+ (+ (- (- (- (- (- ?x20360 ?x18895) ?x18897) ?x18899) ?x18901) ?x18903) ?x17820) ?x17788)))
 (= (+ (+ (+ (+ (+ (+ ?x20367 ?x17790) ?x17792) ?x17794) ?x17796) ?x17798) ?x17800) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x17882 (* (* 2.0 l_0_5_261) l_0_5_269)))
 (let ((?x17879 (* (* 2.0 l_0_5_260) l_0_5_268)))
 (let ((?x17876 (* (* 2.0 l_0_5_259) l_0_5_267)))
 (let ((?x17873 (* (* 2.0 l_0_5_258) l_0_5_266)))
 (let ((?x17870 (* (* 2.0 l_0_5_257) l_0_5_265)))
 (let ((?x17867 (* (* 2.0 l_0_5_256) l_0_5_264)))
 (let ((?x17864 (* (* 2.0 l_0_5_255) l_0_5_263)))
 (let ((?x18982 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18979 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18976 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18973 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18970 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18967 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18964 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18961 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18958 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18955 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18952 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18949 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18946 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x15207 (* 2.0 l_0_5_121)))
 (let ((?x18943 (* ?x15207 l_0_5_129)))
 (let ((?x15204 (* 2.0 l_0_5_120)))
 (let ((?x18941 (* ?x15204 l_0_5_128)))
 (let ((?x20397 (+ (+ (+ (+ (* (* 2.0 l_0_5_119) l_0_5_127) ?x18941) ?x18943) ?x18946) ?x18949)))
 (let ((?x20404 (- (- (- (- (+ (+ (+ ?x20397 ?x18952) ?x18955) ?x18958) ?x18961) ?x18964) ?x18967) ?x18970)))
 (let ((?x20411 (+ (- (- (- (- ?x20404 ?x18973) ?x18976) ?x18979) ?x18982) (* (* 2.0 l_0_5_254) l_0_5_262))))
 (let ((?x20418 (+ (+ (+ (+ (+ (+ (+ ?x20411 ?x17864) ?x17867) ?x17870) ?x17873) ?x17876) ?x17879) ?x17882)))
 (= ?x20418 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17987 (* l_0_5_270 l_0_5_270)))
 (let ((?x17985 (* l_0_5_269 l_0_5_269)))
 (let ((?x17983 (* l_0_5_268 l_0_5_268)))
 (let ((?x17981 (* l_0_5_267 l_0_5_267)))
 (let ((?x17979 (* l_0_5_266 l_0_5_266)))
 (let ((?x17977 (* l_0_5_265 l_0_5_265)))
 (let ((?x17975 (* l_0_5_264 l_0_5_264)))
 (let ((?x17973 (* l_0_5_263 l_0_5_263)))
 (let ((?x18009 (* l_0_5_262 l_0_5_262)))
 (let ((?x19082 (* l_0_5_180 l_0_5_180)))
 (let ((?x19080 (* l_0_5_179 l_0_5_179)))
 (let ((?x19078 (* l_0_5_178 l_0_5_178)))
 (let ((?x19076 (* l_0_5_177 l_0_5_177)))
 (let ((?x19074 (* l_0_5_176 l_0_5_176)))
 (let ((?x19072 (* l_0_5_175 l_0_5_175)))
 (let ((?x19070 (* l_0_5_174 l_0_5_174)))
 (let ((?x19068 (* l_0_5_173 l_0_5_173)))
 (let ((?x19066 (* l_0_5_172 l_0_5_172)))
 (let ((?x19064 (* l_0_5_135 l_0_5_135)))
 (let ((?x19062 (* l_0_5_134 l_0_5_134)))
 (let ((?x19060 (* l_0_5_133 l_0_5_133)))
 (let ((?x19058 (* l_0_5_132 l_0_5_132)))
 (let ((?x19045 (* l_0_5_131 l_0_5_131)))
 (let ((?x19042 (* l_0_5_130 l_0_5_130)))
 (let ((?x19038 (* l_0_5_129 l_0_5_129)))
 (let ((?x20457 (+ (+ (+ (* l_0_5_127 l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x19038) ?x19042)))
 (let ((?x20464 (- (- (+ (+ (+ (+ (+ ?x20457 ?x19045) ?x19058) ?x19060) ?x19062) ?x19064) ?x19066) ?x19068)))
 (let ((?x20471 (- (- (- (- (- (- (- ?x20464 ?x19070) ?x19072) ?x19074) ?x19076) ?x19078) ?x19080) ?x19082)))
 (let ((?x20478 (+ (+ (+ (+ (+ (+ (+ ?x20471 ?x18009) ?x17973) ?x17975) ?x17977) ?x17979) ?x17981) ?x17983)))
 (= (+ (+ ?x20478 ?x17985) ?x17987) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x20505 (- (* (* (- 2.0) l_0_5_181) l_0_5_182) (* (* 2.0 l_0_5_271) l_0_5_272))))
 (= ?x20505 0.0)))
(assert
 (let ((?x20520 (- (* (* (- 2.0) l_0_5_181) l_0_5_187) (* (* 2.0 l_0_5_271) l_0_5_277))))
 (= ?x20520 0.0)))
(assert
 (let ((?x20535 (- (* (* (- 2.0) l_0_5_181) l_0_5_196) (* (* 2.0 l_0_5_271) l_0_5_286))))
 (= ?x20535 0.0)))
(assert
 (let ((?x20550 (- (* (* (- 2.0) l_0_5_181) l_0_5_209) (* (* 2.0 l_0_5_271) l_0_5_299))))
 (= ?x20550 0.0)))
(assert
 (let ((?x20565 (- (* (* (- 2.0) l_0_5_181) l_0_5_217) (* (* 2.0 l_0_5_271) l_0_5_307))))
 (= ?x20565 0.0)))
(assert
 (let ((?x20585 (* l_0_5_273 l_0_5_273)))
 (let ((?x20583 (* l_0_5_272 l_0_5_272)))
 (let ((?x20582 (- (* (* (- 1.0) l_0_5_182) l_0_5_182) (* (* 1.0 l_0_5_183) l_0_5_183))))
 (= (- (- ?x20582 ?x20583) ?x20585) 0.0)))))
(assert
 (let ((?x20604 (- (* (* (- 2.0) l_0_5_182) l_0_5_187) (* (* 2.0 l_0_5_183) l_0_5_188))))
 (let ((?x20608 (- (- ?x20604 (* (* 2.0 l_0_5_272) l_0_5_277)) (* (* 2.0 l_0_5_273) l_0_5_278))))
 (= ?x20608 0.0))))
(assert
 (let ((?x20635 (- (* (* (- 2.0) l_0_5_182) l_0_5_196) (* (* 2.0 l_0_5_183) l_0_5_197))))
 (let ((?x20639 (- (- ?x20635 (* (* 2.0 l_0_5_272) l_0_5_286)) (* (* 2.0 l_0_5_273) l_0_5_287))))
 (= ?x20639 0.0))))
(assert
 (let ((?x20666 (- (* (* (- 2.0) l_0_5_182) l_0_5_202) (* (* 2.0 l_0_5_183) l_0_5_203))))
 (let ((?x20670 (- (- ?x20666 (* (* 2.0 l_0_5_272) l_0_5_292)) (* (* 2.0 l_0_5_273) l_0_5_293))))
 (= ?x20670 0.0))))
(assert
 (let ((?x20697 (- (* (* (- 2.0) l_0_5_182) l_0_5_217) (* (* 2.0 l_0_5_183) l_0_5_218))))
 (let ((?x20701 (- (- ?x20697 (* (* 2.0 l_0_5_272) l_0_5_307)) (* (* 2.0 l_0_5_273) l_0_5_308))))
 (= ?x20701 0.0))))
(assert
 (let ((?x20743 (* l_0_5_280 l_0_5_280)))
 (let ((?x20741 (* l_0_5_279 l_0_5_279)))
 (let ((?x20739 (* l_0_5_278 l_0_5_278)))
 (let ((?x20737 (* l_0_5_277 l_0_5_277)))
 (let ((?x20730 (- (* (* (- 1.0) l_0_5_187) l_0_5_187) (* (* 1.0 l_0_5_188) l_0_5_188))))
 (let ((?x20736 (- (- ?x20730 (* (* 1.0 l_0_5_189) l_0_5_189)) (* (* 1.0 l_0_5_190) l_0_5_190))))
 (= (- (- (- (- ?x20736 ?x20737) ?x20739) ?x20741) ?x20743) 0.0))))))))
(assert
 (let ((?x20776 (- (* (* (- 2.0) l_0_5_187) l_0_5_196) (* (* 2.0 l_0_5_188) l_0_5_197))))
 (let ((?x20780 (- (- ?x20776 (* (* 2.0 l_0_5_189) l_0_5_198)) (* (* 2.0 l_0_5_190) l_0_5_199))))
 (let ((?x20784 (- (- ?x20780 (* (* 2.0 l_0_5_277) l_0_5_286)) (* (* 2.0 l_0_5_278) l_0_5_287))))
 (let ((?x20788 (- (- ?x20784 (* (* 2.0 l_0_5_279) l_0_5_288)) (* (* 2.0 l_0_5_280) l_0_5_289))))
 (= ?x20788 0.0))))))
(assert
 (let ((?x20839 (- (* (* (- 2.0) l_0_5_187) l_0_5_209) (* (* 2.0 l_0_5_188) l_0_5_210))))
 (let ((?x20843 (- (- ?x20839 (* (* 2.0 l_0_5_189) l_0_5_211)) (* (* 2.0 l_0_5_190) l_0_5_212))))
 (let ((?x20847 (- (- ?x20843 (* (* 2.0 l_0_5_277) l_0_5_299)) (* (* 2.0 l_0_5_278) l_0_5_300))))
 (let ((?x20851 (- (- ?x20847 (* (* 2.0 l_0_5_279) l_0_5_301)) (* (* 2.0 l_0_5_280) l_0_5_302))))
 (= ?x20851 0.0))))))
(assert
 (let ((?x20902 (- (* (* (- 2.0) l_0_5_187) l_0_5_217) (* (* 2.0 l_0_5_188) l_0_5_218))))
 (let ((?x20906 (- (- ?x20902 (* (* 2.0 l_0_5_189) l_0_5_219)) (* (* 2.0 l_0_5_190) l_0_5_220))))
 (let ((?x20910 (- (- ?x20906 (* (* 2.0 l_0_5_277) l_0_5_307)) (* (* 2.0 l_0_5_278) l_0_5_308))))
 (let ((?x20914 (- (- ?x20910 (* (* 2.0 l_0_5_279) l_0_5_309)) (* (* 2.0 l_0_5_280) l_0_5_310))))
 (= ?x20914 0.0))))))
(assert
 (let ((?x20990 (* l_0_5_291 l_0_5_291)))
 (let ((?x20988 (* l_0_5_290 l_0_5_290)))
 (let ((?x20986 (* l_0_5_289 l_0_5_289)))
 (let ((?x20984 (* l_0_5_288 l_0_5_288)))
 (let ((?x20982 (* l_0_5_287 l_0_5_287)))
 (let ((?x20980 (* l_0_5_286 l_0_5_286)))
 (let ((?x20967 (- (* (* (- 1.0) l_0_5_196) l_0_5_196) (* (* 1.0 l_0_5_197) l_0_5_197))))
 (let ((?x20973 (- (- ?x20967 (* (* 1.0 l_0_5_198) l_0_5_198)) (* (* 1.0 l_0_5_199) l_0_5_199))))
 (let ((?x20979 (- (- ?x20973 (* (* 1.0 l_0_5_200) l_0_5_200)) (* (* 1.0 l_0_5_201) l_0_5_201))))
 (= (- (- (- (- (- (- ?x20979 ?x20980) ?x20982) ?x20984) ?x20986) ?x20988) ?x20990) 0.0)))))))))))
(assert
 (let ((?x21037 (- (* (* (- 2.0) l_0_5_196) l_0_5_202) (* (* 2.0 l_0_5_197) l_0_5_203))))
 (let ((?x21041 (- (- ?x21037 (* (* 2.0 l_0_5_198) l_0_5_204)) (* (* 2.0 l_0_5_199) l_0_5_205))))
 (let ((?x21045 (- (- ?x21041 (* (* 2.0 l_0_5_200) l_0_5_206)) (* (* 2.0 l_0_5_201) l_0_5_207))))
 (let ((?x21049 (- (- ?x21045 (* (* 2.0 l_0_5_286) l_0_5_292)) (* (* 2.0 l_0_5_287) l_0_5_293))))
 (let ((?x21053 (- (- ?x21049 (* (* 2.0 l_0_5_288) l_0_5_294)) (* (* 2.0 l_0_5_289) l_0_5_295))))
 (let ((?x21057 (- (- ?x21053 (* (* 2.0 l_0_5_290) l_0_5_296)) (* (* 2.0 l_0_5_291) l_0_5_297))))
 (= ?x21057 0.0))))))))
(assert
 (let ((?x21132 (- (* (* (- 2.0) l_0_5_196) l_0_5_217) (* (* 2.0 l_0_5_197) l_0_5_218))))
 (let ((?x21136 (- (- ?x21132 (* (* 2.0 l_0_5_198) l_0_5_219)) (* (* 2.0 l_0_5_199) l_0_5_220))))
 (let ((?x21140 (- (- ?x21136 (* (* 2.0 l_0_5_200) l_0_5_221)) (* (* 2.0 l_0_5_201) l_0_5_222))))
 (let ((?x21144 (- (- ?x21140 (* (* 2.0 l_0_5_286) l_0_5_307)) (* (* 2.0 l_0_5_287) l_0_5_308))))
 (let ((?x21148 (- (- ?x21144 (* (* 2.0 l_0_5_288) l_0_5_309)) (* (* 2.0 l_0_5_289) l_0_5_310))))
 (let ((?x21152 (- (- ?x21148 (* (* 2.0 l_0_5_290) l_0_5_311)) (* (* 2.0 l_0_5_291) l_0_5_312))))
 (= ?x21152 0.0))))))))
(assert
 (let ((?x21257 (* l_0_5_298 l_0_5_298)))
 (let ((?x21255 (* l_0_5_297 l_0_5_297)))
 (let ((?x21253 (* l_0_5_296 l_0_5_296)))
 (let ((?x21251 (* l_0_5_295 l_0_5_295)))
 (let ((?x21249 (* l_0_5_294 l_0_5_294)))
 (let ((?x21247 (* l_0_5_293 l_0_5_293)))
 (let ((?x21245 (* l_0_5_292 l_0_5_292)))
 (let ((?x21229 (- (* (* (- 1.0) l_0_5_202) l_0_5_202) (* (* 1.0 l_0_5_203) l_0_5_203))))
 (let ((?x21235 (- (- ?x21229 (* (* 1.0 l_0_5_204) l_0_5_204)) (* (* 1.0 l_0_5_205) l_0_5_205))))
 (let ((?x21241 (- (- ?x21235 (* (* 1.0 l_0_5_206) l_0_5_206)) (* (* 1.0 l_0_5_207) l_0_5_207))))
 (let ((?x21250 (- (- (- (- ?x21241 (* (* 1.0 l_0_5_208) l_0_5_208)) ?x21245) ?x21247) ?x21249)))
 (= (- (- (- (- ?x21250 ?x21251) ?x21253) ?x21255) ?x21257) 0.0)))))))))))))
(assert
 (let ((?x21311 (- (* (* (- 2.0) l_0_5_202) l_0_5_209) (* (* 2.0 l_0_5_203) l_0_5_210))))
 (let ((?x21315 (- (- ?x21311 (* (* 2.0 l_0_5_204) l_0_5_211)) (* (* 2.0 l_0_5_205) l_0_5_212))))
 (let ((?x21319 (- (- ?x21315 (* (* 2.0 l_0_5_206) l_0_5_213)) (* (* 2.0 l_0_5_207) l_0_5_214))))
 (let ((?x21323 (- (- ?x21319 (* (* 2.0 l_0_5_208) l_0_5_215)) (* (* 2.0 l_0_5_292) l_0_5_299))))
 (let ((?x21327 (- (- ?x21323 (* (* 2.0 l_0_5_293) l_0_5_300)) (* (* 2.0 l_0_5_294) l_0_5_301))))
 (let ((?x21331 (- (- ?x21327 (* (* 2.0 l_0_5_295) l_0_5_302)) (* (* 2.0 l_0_5_296) l_0_5_303))))
 (let ((?x21335 (- (- ?x21331 (* (* 2.0 l_0_5_297) l_0_5_304)) (* (* 2.0 l_0_5_298) l_0_5_305))))
 (= ?x21335 0.0)))))))))
(assert
 (let ((?x21457 (* l_0_5_306 l_0_5_306)))
 (let ((?x21455 (* l_0_5_305 l_0_5_305)))
 (let ((?x21453 (* l_0_5_304 l_0_5_304)))
 (let ((?x21451 (* l_0_5_303 l_0_5_303)))
 (let ((?x21449 (* l_0_5_302 l_0_5_302)))
 (let ((?x21447 (* l_0_5_301 l_0_5_301)))
 (let ((?x21445 (* l_0_5_300 l_0_5_300)))
 (let ((?x21443 (* l_0_5_299 l_0_5_299)))
 (let ((?x21424 (- (* (* (- 1.0) l_0_5_209) l_0_5_209) (* (* 1.0 l_0_5_210) l_0_5_210))))
 (let ((?x21430 (- (- ?x21424 (* (* 1.0 l_0_5_211) l_0_5_211)) (* (* 1.0 l_0_5_212) l_0_5_212))))
 (let ((?x21436 (- (- ?x21430 (* (* 1.0 l_0_5_213) l_0_5_213)) (* (* 1.0 l_0_5_214) l_0_5_214))))
 (let ((?x21442 (- (- ?x21436 (* (* 1.0 l_0_5_215) l_0_5_215)) (* (* 1.0 l_0_5_216) l_0_5_216))))
 (let ((?x21456 (- (- (- (- (- (- (- ?x21442 ?x21443) ?x21445) ?x21447) ?x21449) ?x21451) ?x21453) ?x21455)))
 (= (- ?x21456 ?x21457) 0.0)))))))))))))))
(assert
 (let ((?x21519 (- (* (* (- 2.0) l_0_5_209) l_0_5_217) (* (* 2.0 l_0_5_210) l_0_5_218))))
 (let ((?x21525 (- (- ?x21519 (* (* 2.0 l_0_5_211) l_0_5_219)) (* (* 2.0 l_0_5_212) l_0_5_220))))
 (let ((?x21531 (- (- ?x21525 (* (* 2.0 l_0_5_213) l_0_5_221)) (* (* 2.0 l_0_5_214) l_0_5_222))))
 (let ((?x21537 (- (- ?x21531 (* (* 2.0 l_0_5_215) l_0_5_223)) (* (* 2.0 l_0_5_216) l_0_5_224))))
 (let ((?x21543 (- (- ?x21537 (* (* 2.0 l_0_5_299) l_0_5_307)) (* (* 2.0 l_0_5_300) l_0_5_308))))
 (let ((?x21549 (- (- ?x21543 (* (* 2.0 l_0_5_301) l_0_5_309)) (* (* 2.0 l_0_5_302) l_0_5_310))))
 (let ((?x21555 (- (- ?x21549 (* (* 2.0 l_0_5_303) l_0_5_311)) (* (* 2.0 l_0_5_304) l_0_5_312))))
 (let ((?x21561 (- (- ?x21555 (* (* 2.0 l_0_5_305) l_0_5_313)) (* (* 2.0 l_0_5_306) l_0_5_314))))
 (= ?x21561 0.0))))))))))
(assert
 (let ((?x21700 (* l_0_5_315 l_0_5_315)))
 (let ((?x21698 (* l_0_5_314 l_0_5_314)))
 (let ((?x21696 (* l_0_5_313 l_0_5_313)))
 (let ((?x21694 (* l_0_5_312 l_0_5_312)))
 (let ((?x21692 (* l_0_5_311 l_0_5_311)))
 (let ((?x21690 (* l_0_5_310 l_0_5_310)))
 (let ((?x21688 (* l_0_5_309 l_0_5_309)))
 (let ((?x21686 (* l_0_5_308 l_0_5_308)))
 (let ((?x21684 (* l_0_5_307 l_0_5_307)))
 (let ((?x21662 (- (* (* (- 1.0) l_0_5_217) l_0_5_217) (* (* 1.0 l_0_5_218) l_0_5_218))))
 (let ((?x21668 (- (- ?x21662 (* (* 1.0 l_0_5_219) l_0_5_219)) (* (* 1.0 l_0_5_220) l_0_5_220))))
 (let ((?x21674 (- (- ?x21668 (* (* 1.0 l_0_5_221) l_0_5_221)) (* (* 1.0 l_0_5_222) l_0_5_222))))
 (let ((?x21680 (- (- ?x21674 (* (* 1.0 l_0_5_223) l_0_5_223)) (* (* 1.0 l_0_5_224) l_0_5_224))))
 (let ((?x21689 (- (- (- (- ?x21680 (* (* 1.0 l_0_5_225) l_0_5_225)) ?x21684) ?x21686) ?x21688)))
 (= (- (- (- (- (- (- ?x21689 ?x21690) ?x21692) ?x21694) ?x21696) ?x21698) ?x21700) 0.0))))))))))))))))
(assert
 (>= l_0_5_1 0.0))
(assert
 (>= l_0_5_3 0.0))
(assert
 (>= l_0_5_6 0.0))
(assert
 (>= l_0_5_10 0.0))
(assert
 (>= l_0_5_15 0.0))
(assert
 (>= l_0_5_21 0.0))
(assert
 (>= l_0_5_28 0.0))
(assert
 (>= l_0_5_36 0.0))
(assert
 (>= l_0_5_45 0.0))
(assert
 (>= l_0_5_46 0.0))
(assert
 (>= l_0_5_48 0.0))
(assert
 (>= l_0_5_51 0.0))
(assert
 (>= l_0_5_55 0.0))
(assert
 (>= l_0_5_60 0.0))
(assert
 (>= l_0_5_66 0.0))
(assert
 (>= l_0_5_73 0.0))
(assert
 (>= l_0_5_81 0.0))
(assert
 (>= l_0_5_90 0.0))
(assert
 (>= l_0_5_91 0.0))
(assert
 (>= l_0_5_93 0.0))
(assert
 (>= l_0_5_96 0.0))
(assert
 (>= l_0_5_100 0.0))
(assert
 (>= l_0_5_105 0.0))
(assert
 (>= l_0_5_111 0.0))
(assert
 (>= l_0_5_118 0.0))
(assert
 (>= l_0_5_126 0.0))
(assert
 (>= l_0_5_135 0.0))
(assert
 (>= l_0_5_136 0.0))
(assert
 (>= l_0_5_138 0.0))
(assert
 (>= l_0_5_141 0.0))
(assert
 (>= l_0_5_145 0.0))
(assert
 (>= l_0_5_150 0.0))
(assert
 (>= l_0_5_156 0.0))
(assert
 (>= l_0_5_163 0.0))
(assert
 (>= l_0_5_171 0.0))
(assert
 (>= l_0_5_180 0.0))
(assert
 (>= l_0_5_181 0.0))
(assert
 (>= l_0_5_183 0.0))
(assert
 (>= l_0_5_186 0.0))
(assert
 (>= l_0_5_190 0.0))
(assert
 (>= l_0_5_195 0.0))
(assert
 (>= l_0_5_201 0.0))
(assert
 (>= l_0_5_208 0.0))
(assert
 (>= l_0_5_216 0.0))
(assert
 (>= l_0_5_225 0.0))
(assert
 (>= l_0_5_226 0.0))
(assert
 (>= l_0_5_228 0.0))
(assert
 (>= l_0_5_231 0.0))
(assert
 (>= l_0_5_235 0.0))
(assert
 (>= l_0_5_240 0.0))
(assert
 (>= l_0_5_246 0.0))
(assert
 (>= l_0_5_253 0.0))
(assert
 (>= l_0_5_261 0.0))
(assert
 (>= l_0_5_270 0.0))
(assert
 (>= l_0_5_271 0.0))
(assert
 (>= l_0_5_273 0.0))
(assert
 (>= l_0_5_276 0.0))
(assert
 (>= l_0_5_280 0.0))
(assert
 (>= l_0_5_285 0.0))
(assert
 (>= l_0_5_291 0.0))
(assert
 (>= l_0_5_298 0.0))
(assert
 (>= l_0_5_306 0.0))
(assert
 (>= l_0_5_315 0.0))
(assert
 (let ((?x21833 (* l_0_6_316 l_0_6_316)))
 (let ((?x21831 (* l_0_6_271 l_0_6_271)))
 (= (- (- (- _a_0_ (* (* 1.0 l_0_6_181) l_0_6_181)) ?x21831) ?x21833) 0.0))))
(assert
 (let ((?x21859 (* l_0_6_46 l_0_6_46)))
 (let ((?x21851 (* l_0_6_226 l_0_6_226)))
 (let ((?x21850 (- (+ _a_1_ (* l_0_6_1 l_0_6_1)) (* (* 2.0 l_0_6_181) l_0_6_184))))
 (let ((?x21858 (- (- (- ?x21850 ?x21851) (* (* 2.0 l_0_6_271) l_0_6_274)) (* (* 2.0 l_0_6_316) l_0_6_319))))
 (= (- ?x21858 ?x21859) 0.0))))))
(assert
 (let ((?x21896 (* l_0_6_91 l_0_6_91)))
 (let ((?x21851 (* l_0_6_226 l_0_6_226)))
 (let ((?x21890 (- (- _a_2_ (* l_0_6_136 l_0_6_136)) (* (* 2.0 l_0_6_181) l_0_6_191))))
 (let ((?x21895 (- (- (+ ?x21890 ?x21851) (* (* 2.0 l_0_6_271) l_0_6_281)) (* (* 2.0 l_0_6_316) l_0_6_326))))
 (= (+ ?x21895 ?x21896) 0.0))))))
(assert
 (let ((?x21859 (* l_0_6_46 l_0_6_46)))
 (let ((?x21929 (- (- (* (- l_0_6_1) l_0_6_1) (* (* 2.0 l_0_6_196) l_0_6_209)) (* (* 2.0 l_0_6_197) l_0_6_210))))
 (let ((?x21935 (- (- ?x21929 (* (* 2.0 l_0_6_198) l_0_6_211)) (* (* 2.0 l_0_6_199) l_0_6_212))))
 (let ((?x21941 (- (- ?x21935 (* (* 2.0 l_0_6_200) l_0_6_213)) (* (* 2.0 l_0_6_201) l_0_6_214))))
 (let ((?x21947 (- (- ?x21941 (* (* 2.0 l_0_6_286) l_0_6_299)) (* (* 2.0 l_0_6_287) l_0_6_300))))
 (let ((?x21953 (- (- ?x21947 (* (* 2.0 l_0_6_288) l_0_6_301)) (* (* 2.0 l_0_6_289) l_0_6_302))))
 (let ((?x21959 (- (- ?x21953 (* (* 2.0 l_0_6_290) l_0_6_303)) (* (* 2.0 l_0_6_291) l_0_6_304))))
 (let ((?x21965 (- (- ?x21959 (* (* 2.0 l_0_6_331) l_0_6_344)) (* (* 2.0 l_0_6_332) l_0_6_345))))
 (let ((?x21971 (- (- ?x21965 (* (* 2.0 l_0_6_333) l_0_6_346)) (* (* 2.0 l_0_6_334) l_0_6_347))))
 (let ((?x21977 (- (- ?x21971 (* (* 2.0 l_0_6_335) l_0_6_348)) (* (* 2.0 l_0_6_336) l_0_6_349))))
 (= (- (+ ?x21977 ?x21859) 1.0) 0.0))))))))))))
(assert
 (let ((?x21896 (* l_0_6_91 l_0_6_91)))
 (let ((?x22101 (- (- (* l_0_6_136 l_0_6_136) (* (* 2.0 l_0_6_182) l_0_6_209)) (* (* 2.0 l_0_6_183) l_0_6_210))))
 (let ((?x22107 (- (- ?x22101 (* (* 2.0 l_0_6_272) l_0_6_299)) (* (* 2.0 l_0_6_273) l_0_6_300))))
 (let ((?x22113 (- (- ?x22107 (* (* 2.0 l_0_6_317) l_0_6_344)) (* (* 2.0 l_0_6_318) l_0_6_345))))
 (= (+ (- ?x22113 ?x21896) 1.0) 0.0))))))
(assert
 (let ((?x21896 (* l_0_6_91 l_0_6_91)))
 (let ((?x22161 (- (+ (- _a_3_) (* l_0_6_136 l_0_6_136)) (* (* 2.0 l_0_6_202) l_0_6_217))))
 (let ((?x22167 (- (- ?x22161 (* (* 2.0 l_0_6_203) l_0_6_218)) (* (* 2.0 l_0_6_204) l_0_6_219))))
 (let ((?x22173 (- (- ?x22167 (* (* 2.0 l_0_6_205) l_0_6_220)) (* (* 2.0 l_0_6_206) l_0_6_221))))
 (let ((?x22179 (- (- ?x22173 (* (* 2.0 l_0_6_207) l_0_6_222)) (* (* 2.0 l_0_6_208) l_0_6_223))))
 (let ((?x22185 (- (- ?x22179 (* (* 2.0 l_0_6_292) l_0_6_307)) (* (* 2.0 l_0_6_293) l_0_6_308))))
 (let ((?x22191 (- (- ?x22185 (* (* 2.0 l_0_6_294) l_0_6_309)) (* (* 2.0 l_0_6_295) l_0_6_310))))
 (let ((?x22197 (- (- ?x22191 (* (* 2.0 l_0_6_296) l_0_6_311)) (* (* 2.0 l_0_6_297) l_0_6_312))))
 (let ((?x22203 (- (- ?x22197 (* (* 2.0 l_0_6_298) l_0_6_313)) (* (* 2.0 l_0_6_337) l_0_6_352))))
 (let ((?x22209 (- (- ?x22203 (* (* 2.0 l_0_6_338) l_0_6_353)) (* (* 2.0 l_0_6_339) l_0_6_354))))
 (let ((?x22215 (- (- ?x22209 (* (* 2.0 l_0_6_340) l_0_6_355)) (* (* 2.0 l_0_6_341) l_0_6_356))))
 (let ((?x22221 (- (- ?x22215 (* (* 2.0 l_0_6_342) l_0_6_357)) (* (* 2.0 l_0_6_343) l_0_6_358))))
 (= (- ?x22221 ?x21896) 0.0))))))))))))))
(assert
 (let ((?x22360 (- (- (- _a_4_) (* (* 2.0 l_0_6_181) l_0_6_202)) (* (* 2.0 l_0_6_271) l_0_6_292))))
 (= (- ?x22360 (* (* 2.0 l_0_6_316) l_0_6_337)) 0.0)))
(assert
 (let ((?x21859 (* l_0_6_46 l_0_6_46)))
 (let ((?x22389 (- (- (- _a_5_) (* l_0_6_1 l_0_6_1)) (* (* 2.0 l_0_6_187) l_0_6_202))))
 (let ((?x22395 (- (- ?x22389 (* (* 2.0 l_0_6_188) l_0_6_203)) (* (* 2.0 l_0_6_189) l_0_6_204))))
 (let ((?x22401 (- (- ?x22395 (* (* 2.0 l_0_6_190) l_0_6_205)) (* (* 2.0 l_0_6_277) l_0_6_292))))
 (let ((?x22407 (- (- ?x22401 (* (* 2.0 l_0_6_278) l_0_6_293)) (* (* 2.0 l_0_6_279) l_0_6_294))))
 (let ((?x22413 (- (- ?x22407 (* (* 2.0 l_0_6_280) l_0_6_295)) (* (* 2.0 l_0_6_322) l_0_6_337))))
 (let ((?x22419 (- (- ?x22413 (* (* 2.0 l_0_6_323) l_0_6_338)) (* (* 2.0 l_0_6_324) l_0_6_339))))
 (= (+ (- ?x22419 (* (* 2.0 l_0_6_325) l_0_6_340)) ?x21859) 0.0)))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22462 (* ?x22461 l_0_6_47)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x22459 (* ?x22458 l_0_6_151)))
 (let ((?x22455 (* 2.0 l_0_6_106)))
 (let ((?x22456 (* ?x22455 l_0_6_91)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22454 (* ?x3593 l_0_6_2)))
 (= (+ (+ (- ?x22454 ?x22456) ?x22459) ?x22462) 0.0))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x22530 (* ?x22529 l_0_6_79)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x22527 (* ?x22526 l_0_6_78)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x22524 (* ?x22523 l_0_6_77)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x22521 (* ?x22520 l_0_6_76)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x22518 (* ?x22517 l_0_6_75)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x22515 (* ?x22514 l_0_6_74)))
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22512 (* ?x22461 l_0_6_49)))
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x22510 (* ?x22509 l_0_6_259)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x22507 (* ?x22506 l_0_6_258)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x22504 (* ?x22503 l_0_6_257)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x22501 (* ?x22500 l_0_6_256)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x22498 (* ?x22497 l_0_6_255)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x22495 (* ?x22494 l_0_6_254)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x22492 (* ?x22491 l_0_6_34)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x22489 (* ?x22488 l_0_6_33)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x22486 (* ?x22485 l_0_6_32)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x22483 (* ?x22482 l_0_6_31)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x22480 (* ?x22479 l_0_6_30)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x22477 (* ?x22476 l_0_6_29)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22475 (* ?x3593 l_0_6_4)))
 (let ((?x22496 (- (+ (+ (+ (+ (+ (+ ?x22475 ?x22477) ?x22480) ?x22483) ?x22486) ?x22489) ?x22492) ?x22495)))
 (let ((?x22516 (- (+ (- (- (- (- (- ?x22496 ?x22498) ?x22501) ?x22504) ?x22507) ?x22510) ?x22512) ?x22515)))
 (= (- (- (- (- (- ?x22516 ?x22518) ?x22521) ?x22524) ?x22527) ?x22530) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22593 (* ?x22461 l_0_6_52)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) ?x22593) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22644 (* ?x22461 l_0_6_56)))
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x22510 (* ?x22509 l_0_6_259)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x22507 (* ?x22506 l_0_6_258)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x22504 (* ?x22503 l_0_6_257)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x22501 (* ?x22500 l_0_6_256)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x22498 (* ?x22497 l_0_6_255)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x22495 (* ?x22494 l_0_6_254)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x22636 (* ?x22635 l_0_6_169)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x22633 (* ?x22632 l_0_6_168)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x22630 (* ?x22629 l_0_6_167)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x22627 (* ?x22626 l_0_6_166)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x22624 (* ?x22623 l_0_6_165)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x22621 (* ?x22620 l_0_6_164)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x22618 (* ?x22617 l_0_6_124)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x22615 (* ?x22614 l_0_6_123)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x22612 (* ?x22611 l_0_6_122)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22609 (* ?x22608 l_0_6_121)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22606 (* ?x22605 l_0_6_120)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22597 (* ?x3593 l_0_6_11)))
 (let ((?x22613 (+ (+ (+ (+ ?x22597 (* (* 2.0 l_0_6_106) l_0_6_119)) ?x22606) ?x22609) ?x22612)))
 (let ((?x22634 (- (- (- (- (- (+ (+ ?x22613 ?x22615) ?x22618) ?x22621) ?x22624) ?x22627) ?x22630) ?x22633)))
 (let ((?x22643 (+ (+ (+ (+ (+ (+ (- ?x22634 ?x22636) ?x22495) ?x22498) ?x22501) ?x22504) ?x22507) ?x22510)))
 (= (+ ?x22643 ?x22644) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22684 (* ?x22461 l_0_6_61)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x22684) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22690 (* ?x22461 l_0_6_67)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_22) ?x22690) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22700 (* ?x22461 l_0_6_74)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_29) ?x22700) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22710 (* ?x22461 l_0_6_82)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22708 (* ?x3593 l_0_6_37)))
 (= (+ ?x22708 ?x22710) 0.0))))))
(assert
 (let ((?x22739 (* l_0_6_48 l_0_6_48)))
 (let ((?x22737 (* l_0_6_47 l_0_6_47)))
 (let ((?x22735 (* l_0_6_3 l_0_6_3)))
 (let ((?x22733 (* l_0_6_2 l_0_6_2)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x22731 (* ?x22730 l_0_6_152)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x22728 (* ?x22727 l_0_6_151)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22721 (* ?x22605 l_0_6_93)))
 (let ((?x22732 (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_92) ?x22721) ?x22728) ?x22731)))
 (= (+ (+ (- (- ?x22732 ?x22733) ?x22735) ?x22737) ?x22739) 0.0)))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22790 (* ?x22789 l_0_6_50)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22787 (* ?x22786 l_0_6_49)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22784 (* ?x22783 l_0_6_5)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x22781 (* ?x22780 l_0_6_4)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x22778 (* ?x22777 l_0_6_153)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x22775 (* ?x22774 l_0_6_152)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x22772 (* ?x22771 l_0_6_151)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22769 (* ?x22608 l_0_6_96)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22767 (* ?x22605 l_0_6_95)))
 (let ((?x22776 (+ (+ (- (- (* (* (- 2.0) l_0_6_106) l_0_6_94) ?x22767) ?x22769) ?x22772) ?x22775)))
 (let ((?x22779 (+ ?x22776 ?x22778)))
 (= (+ (+ (- (- ?x22779 ?x22781) ?x22784) ?x22787) ?x22790) 0.0))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22859 (* ?x22789 l_0_6_53)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22857 (* ?x22786 l_0_6_52)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22855 (* ?x22783 l_0_6_8)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x22853 (* ?x22780 l_0_6_7)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x22851 (* ?x22850 l_0_6_154)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x22848 (* ?x22847 l_0_6_153)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x22845 (* ?x22844 l_0_6_152)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x22842 (* ?x22841 l_0_6_151)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22839 (* ?x22608 l_0_6_99)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22837 (* ?x22605 l_0_6_98)))
 (let ((?x22455 (* 2.0 l_0_6_106)))
 (let ((?x22827 (* ?x22455 l_0_6_97)))
 (let ((?x22843 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_109) ?x22827) ?x22837) ?x22839) ?x22842)))
 (let ((?x22852 (+ (+ (+ ?x22843 ?x22845) ?x22848) ?x22851)))
 (= (+ (+ (- (- ?x22852 ?x22853) ?x22855) ?x22857) ?x22859) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22941 (* ?x22789 l_0_6_57)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22939 (* ?x22786 l_0_6_56)))
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x22937 (* ?x22936 l_0_6_155)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x22934 (* ?x22933 l_0_6_154)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x22931 (* ?x22930 l_0_6_153)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x22928 (* ?x22927 l_0_6_152)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x22925 (* ?x22924 l_0_6_151)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x22922 (* ?x22921 l_0_6_3)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x22919 (* ?x22918 l_0_6_2)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x22916 (* ?x22915 l_0_6_110)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x22913 (* ?x22912 l_0_6_109)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x22910 (* ?x22909 l_0_6_108)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x22907 (* ?x22897 l_0_6_107)))
 (let ((?x22917 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_106) ?x22907) ?x22910) ?x22913) ?x22916)))
 (let ((?x22938 (+ (+ (+ (+ (+ (- (- ?x22917 ?x22919) ?x22922) ?x22925) ?x22928) ?x22931) ?x22934) ?x22937)))
 (= (+ (+ ?x22938 ?x22939) ?x22941) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23024 (* ?x22789 l_0_6_62)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23022 (* ?x22786 l_0_6_61)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23020 (* ?x22479 l_0_6_3)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x23018 (* ?x22476 l_0_6_2)))
 (let ((?x23016 (* l_0_6_156 l_0_6_156)))
 (let ((?x23014 (* l_0_6_155 l_0_6_155)))
 (let ((?x23012 (* l_0_6_154 l_0_6_154)))
 (let ((?x23010 (* l_0_6_153 l_0_6_153)))
 (let ((?x23008 (* l_0_6_152 l_0_6_152)))
 (let ((?x23006 (* l_0_6_151 l_0_6_151)))
 (let ((?x23004 (* l_0_6_111 l_0_6_111)))
 (let ((?x23002 (* l_0_6_110 l_0_6_110)))
 (let ((?x22990 (* l_0_6_109 l_0_6_109)))
 (let ((?x22986 (* l_0_6_108 l_0_6_108)))
 (let ((?x22988 (- (- (* (- l_0_6_106) l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x22986)))
 (let ((?x23013 (+ (+ (+ (+ (- (- (- ?x22988 ?x22990) ?x23002) ?x23004) ?x23006) ?x23008) ?x23010) ?x23012)))
 (let ((?x23017 (+ (+ ?x23013 ?x23014) ?x23016)))
 (= (+ (+ (- (- ?x23017 ?x23018) ?x23020) ?x23022) ?x23024) 0.0)))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23096 (* ?x22789 l_0_6_68)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23094 (* ?x22786 l_0_6_67)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23092 (* ?x23091 l_0_6_3)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23089 (* ?x22780 l_0_6_22)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23087 (* ?x22635 l_0_6_162)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23085 (* ?x22632 l_0_6_161)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23083 (* ?x22629 l_0_6_160)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23081 (* ?x22626 l_0_6_159)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23079 (* ?x22623 l_0_6_158)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23077 (* ?x22620 l_0_6_157)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23075 (* ?x22617 l_0_6_117)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23073 (* ?x22614 l_0_6_116)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23071 (* ?x22611 l_0_6_115)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23069 (* ?x22608 l_0_6_114)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23057 (* ?x22605 l_0_6_113)))
 (let ((?x23074 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x23057) ?x23069) ?x23071) ?x23073)))
 (let ((?x23088 (+ (+ (+ (+ (+ (+ (- ?x23074 ?x23075) ?x23077) ?x23079) ?x23081) ?x23083) ?x23085) ?x23087)))
 (= (+ (+ (- (- ?x23088 ?x23089) ?x23092) ?x23094) ?x23096) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23183 (* ?x22789 l_0_6_75)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23181 (* ?x22786 l_0_6_74)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23179 (* ?x22783 l_0_6_30)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23177 (* ?x22780 l_0_6_29)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x22636 (* ?x22635 l_0_6_169)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x22633 (* ?x22632 l_0_6_168)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x22630 (* ?x22629 l_0_6_167)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x22627 (* ?x22626 l_0_6_166)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x22624 (* ?x22623 l_0_6_165)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x22621 (* ?x22620 l_0_6_164)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x22618 (* ?x22617 l_0_6_124)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x22615 (* ?x22614 l_0_6_123)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x22612 (* ?x22611 l_0_6_122)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22609 (* ?x22608 l_0_6_121)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22606 (* ?x22605 l_0_6_120)))
 (let ((?x23169 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_119) ?x22606) ?x22609) ?x22612) ?x22615)))
 (let ((?x23176 (+ (+ (+ (+ (+ (+ (- ?x23169 ?x22618) ?x22621) ?x22624) ?x22627) ?x22630) ?x22633) ?x22636)))
 (= (+ (+ (- (- ?x23176 ?x23177) ?x23179) ?x23181) ?x23183) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23251 (* ?x22789 l_0_6_83)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23249 (* ?x22786 l_0_6_82)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23247 (* ?x22783 l_0_6_38)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23245 (* ?x22780 l_0_6_37)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23243 (* ?x22635 l_0_6_177)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23241 (* ?x22632 l_0_6_176)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23239 (* ?x22629 l_0_6_175)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23237 (* ?x22626 l_0_6_174)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23235 (* ?x22623 l_0_6_173)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23233 (* ?x22620 l_0_6_172)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23231 (* ?x22617 l_0_6_132)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23229 (* ?x22614 l_0_6_131)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23227 (* ?x22611 l_0_6_130)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23225 (* ?x22608 l_0_6_129)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23223 (* ?x22605 l_0_6_128)))
 (let ((?x23230 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_127) ?x23223) ?x23225) ?x23227) ?x23229)))
 (let ((?x23244 (+ (+ (+ (+ (+ (+ (- ?x23230 ?x23231) ?x23233) ?x23235) ?x23237) ?x23239) ?x23241) ?x23243)))
 (= (+ (+ (- (- ?x23244 ?x23245) ?x23247) ?x23249) ?x23251) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23315 (* l_0_6_6 l_0_6_6)))
 (let ((?x23313 (* l_0_6_51 l_0_6_51)))
 (let ((?x23311 (* l_0_6_50 l_0_6_50)))
 (let ((?x23309 (* l_0_6_5 l_0_6_5)))
 (let ((?x23312 (+ (- (+ (* (- l_0_6_4) l_0_6_4) (* l_0_6_49 l_0_6_49)) ?x23309) ?x23311)))
 (= (- (+ ?x23312 ?x23313) ?x23315) 0.0)))))))
(assert
 (let ((?x23345 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23342 (* ?x23341 l_0_6_54)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23339 (* ?x23338 l_0_6_53)))
 (let ((?x23336 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23333 (* ?x23332 l_0_6_52)))
 (let ((?x23343 (+ (+ (- (+ (* (* (- 2.0) l_0_6_4) l_0_6_7) ?x23333) ?x23336) ?x23339) ?x23342)))
 (= (- ?x23343 ?x23345) 0.0)))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23386 (* ?x23341 l_0_6_58)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23384 (* ?x23338 l_0_6_57)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23382 (* ?x23332 l_0_6_56)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23380 (* ?x23379 l_0_6_6)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23377 (* ?x22921 l_0_6_5)))
 (let ((?x23385 (+ (+ (- (- (* (* (- 2.0) l_0_6_11) l_0_6_4) ?x23377) ?x23380) ?x23382) ?x23384)))
 (= (+ ?x23385 ?x23386) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23417 (* ?x23341 l_0_6_63)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23415 (* ?x23338 l_0_6_62)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23413 (* ?x23332 l_0_6_61)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23411 (* ?x22482 l_0_6_6)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23403 (* ?x22479 l_0_6_5)))
 (let ((?x23416 (+ (+ (- (- (* (* (- 2.0) l_0_6_16) l_0_6_4) ?x23403) ?x23411) ?x23413) ?x23415)))
 (= (+ ?x23416 ?x23417) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23454 (* ?x23341 l_0_6_69)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23452 (* ?x23338 l_0_6_68)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23450 (* ?x23332 l_0_6_67)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23448 (* ?x23447 l_0_6_6)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23439 (* ?x23091 l_0_6_5)))
 (let ((?x23453 (+ (+ (- (- (* (* (- 2.0) l_0_6_22) l_0_6_4) ?x23439) ?x23448) ?x23450) ?x23452)))
 (= (+ ?x23453 ?x23454) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23492 (* ?x23341 l_0_6_76)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23490 (* ?x23338 l_0_6_75)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23488 (* ?x23332 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23486 (* ?x23485 l_0_6_6)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23477 (* ?x23476 l_0_6_5)))
 (let ((?x23491 (+ (+ (- (- (* (* (- 2.0) l_0_6_29) l_0_6_4) ?x23477) ?x23486) ?x23488) ?x23490)))
 (= (+ ?x23491 ?x23492) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23530 (* ?x23341 l_0_6_84)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23528 (* ?x23338 l_0_6_83)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23526 (* ?x23332 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23524 (* ?x23523 l_0_6_6)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23515 (* ?x23514 l_0_6_5)))
 (let ((?x23529 (+ (+ (- (- (* (* (- 2.0) l_0_6_37) l_0_6_4) ?x23515) ?x23524) ?x23526) ?x23528)))
 (= (+ ?x23529 ?x23530) 0.0)))))))))))))
(assert
 (let ((?x23570 (* l_0_6_9 l_0_6_9)))
 (let ((?x23568 (* l_0_6_8 l_0_6_8)))
 (let ((?x23566 (* l_0_6_7 l_0_6_7)))
 (let ((?x23564 (* l_0_6_55 l_0_6_55)))
 (let ((?x23562 (* l_0_6_54 l_0_6_54)))
 (let ((?x23560 (* l_0_6_53 l_0_6_53)))
 (let ((?x23563 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_52 l_0_6_52)) ?x23560) ?x23562)))
 (= (- (- (- (+ ?x23563 ?x23564) ?x23566) ?x23568) ?x23570) 0.0)))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23605 (* ?x23604 l_0_6_59)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23602 (* ?x23601 l_0_6_58)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23599 (* ?x23598 l_0_6_57)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23596 (* ?x23595 l_0_6_56)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23593 (* ?x23379 l_0_6_9)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23591 (* ?x22921 l_0_6_8)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x23589 (* ?x22918 l_0_6_7)))
 (let ((?x23597 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_14) ?x23589) ?x23591) ?x23593) ?x23596)))
 (= (+ (+ (+ ?x23597 ?x23599) ?x23602) ?x23605) 0.0)))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23644 (* ?x23604 l_0_6_64)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23642 (* ?x23601 l_0_6_63)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23640 (* ?x23598 l_0_6_62)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23638 (* ?x23595 l_0_6_61)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23636 (* ?x22482 l_0_6_9)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23627 (* ?x22479 l_0_6_8)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x23623 (* ?x22476 l_0_6_7)))
 (let ((?x23639 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_19) ?x23623) ?x23627) ?x23636) ?x23638)))
 (= (+ (+ (+ ?x23639 ?x23640) ?x23642) ?x23644) 0.0)))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x22530 (* ?x22529 l_0_6_79)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x22527 (* ?x22526 l_0_6_78)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x22524 (* ?x22523 l_0_6_77)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x22521 (* ?x22520 l_0_6_76)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x22518 (* ?x22517 l_0_6_75)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x22515 (* ?x22514 l_0_6_74)))
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23698 (* ?x23604 l_0_6_70)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23696 (* ?x23601 l_0_6_69)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23694 (* ?x23598 l_0_6_68)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23692 (* ?x23595 l_0_6_67)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23690 (* ?x23447 l_0_6_9)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23688 (* ?x23091 l_0_6_8)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x23686 (* ?x23685 l_0_6_7)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x22492 (* ?x22491 l_0_6_34)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x22489 (* ?x22488 l_0_6_33)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x22486 (* ?x22485 l_0_6_32)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x22483 (* ?x22482 l_0_6_31)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x22480 (* ?x22479 l_0_6_30)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x22477 (* ?x22476 l_0_6_29)))
 (let ((?x23587 (* (- 2.0) l_0_6_10)))
 (let ((?x23668 (* ?x23587 l_0_6_25)))
 (let ((?x23687 (- (- (- (- (- (- (- ?x23668 ?x22477) ?x22480) ?x22483) ?x22486) ?x22489) ?x22492) ?x23686)))
 (let ((?x23700 (+ (+ (+ (+ (+ (- (- ?x23687 ?x23688) ?x23690) ?x23692) ?x23694) ?x23696) ?x23698) ?x22515)))
 (= (+ (+ (+ (+ (+ ?x23700 ?x22518) ?x22521) ?x22524) ?x22527) ?x22530) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23744 (* ?x23604 l_0_6_77)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23742 (* ?x23601 l_0_6_76)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23740 (* ?x23598 l_0_6_75)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23738 (* ?x23595 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23736 (* ?x23485 l_0_6_9)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23734 (* ?x23476 l_0_6_8)))
 (let ((?x23731 (* 2.0 l_0_6_29)))
 (let ((?x23732 (* ?x23731 l_0_6_7)))
 (let ((?x23739 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_32) ?x23732) ?x23734) ?x23736) ?x23738)))
 (= (+ (+ (+ ?x23739 ?x23740) ?x23742) ?x23744) 0.0)))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23792 (* ?x23604 l_0_6_85)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23790 (* ?x23601 l_0_6_84)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23788 (* ?x23598 l_0_6_83)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23786 (* ?x23595 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23784 (* ?x23523 l_0_6_9)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23775 (* ?x23514 l_0_6_8)))
 (let ((?x23770 (* 2.0 l_0_6_37)))
 (let ((?x23772 (* ?x23770 l_0_6_7)))
 (let ((?x23587 (* (- 2.0) l_0_6_10)))
 (let ((?x23768 (* ?x23587 l_0_6_40)))
 (let ((?x23793 (+ (+ (+ (+ (- (- (- ?x23768 ?x23772) ?x23775) ?x23784) ?x23786) ?x23788) ?x23790) ?x23792)))
 (= ?x23793 0.0)))))))))))))))))))
(assert
 (let ((?x23834 (* l_0_6_60 l_0_6_60)))
 (let ((?x23832 (* l_0_6_59 l_0_6_59)))
 (let ((?x23830 (* l_0_6_58 l_0_6_58)))
 (let ((?x23828 (* l_0_6_57 l_0_6_57)))
 (let ((?x23826 (* l_0_6_56 l_0_6_56)))
 (let ((?x23824 (* l_0_6_15 l_0_6_15)))
 (let ((?x23822 (* l_0_6_14 l_0_6_14)))
 (let ((?x23813 (* l_0_6_13 l_0_6_13)))
 (let ((?x23823 (- (- (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x23813) ?x23822)))
 (= (+ (+ (+ (+ (+ (- ?x23823 ?x23824) ?x23826) ?x23828) ?x23830) ?x23832) ?x23834) 0.0)))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23878 (* ?x23877 l_0_6_65)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23875 (* ?x23874 l_0_6_64)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23872 (* ?x23871 l_0_6_63)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23869 (* ?x23868 l_0_6_62)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23866 (* ?x23865 l_0_6_61)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23863 (* ?x23862 l_0_6_20)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23860 (* ?x23859 l_0_6_19)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23857 (* ?x23379 l_0_6_18)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23855 (* ?x22921 l_0_6_17)))
 (let ((?x23864 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_16) ?x23855) ?x23857) ?x23860) ?x23863)))
 (= (+ (+ (+ (+ (+ ?x23864 ?x23866) ?x23869) ?x23872) ?x23875) ?x23878) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23930 (* ?x23877 l_0_6_71)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23928 (* ?x23874 l_0_6_70)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23926 (* ?x23871 l_0_6_69)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23924 (* ?x23868 l_0_6_68)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23922 (* ?x23865 l_0_6_67)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23920 (* ?x23862 l_0_6_26)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23910 (* ?x23859 l_0_6_25)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23907 (* ?x23379 l_0_6_24)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23903 (* ?x22921 l_0_6_23)))
 (let ((?x23921 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_22) ?x23903) ?x23907) ?x23910) ?x23920)))
 (= (+ (+ (+ (+ (+ ?x23921 ?x23922) ?x23924) ?x23926) ?x23928) ?x23930) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23970 (* ?x23877 l_0_6_78)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23968 (* ?x23874 l_0_6_77)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23966 (* ?x23871 l_0_6_76)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23964 (* ?x23868 l_0_6_75)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23962 (* ?x23865 l_0_6_74)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23960 (* ?x23862 l_0_6_33)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23950 (* ?x23859 l_0_6_32)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x6062 (* ?x23379 l_0_6_31)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x6056 (* ?x22921 l_0_6_30)))
 (let ((?x23961 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_29) ?x6056) ?x6062) ?x23950) ?x23960)))
 (= (+ (+ (+ (+ (+ ?x23961 ?x23962) ?x23964) ?x23966) ?x23968) ?x23970) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x24016 (* ?x23877 l_0_6_86)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x24014 (* ?x23874 l_0_6_85)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x24012 (* ?x23871 l_0_6_84)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x24010 (* ?x23868 l_0_6_83)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x24008 (* ?x23865 l_0_6_82)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x24006 (* ?x23862 l_0_6_41)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23996 (* ?x23859 l_0_6_40)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23993 (* ?x23379 l_0_6_39)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23989 (* ?x22921 l_0_6_38)))
 (let ((?x24007 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_37) ?x23989) ?x23993) ?x23996) ?x24006)))
 (= (+ (+ (+ (+ (+ ?x24007 ?x24008) ?x24010) ?x24012) ?x24014) ?x24016) 0.0)))))))))))))))))))))
(assert
 (let ((?x24070 (* l_0_6_66 l_0_6_66)))
 (let ((?x24068 (* l_0_6_65 l_0_6_65)))
 (let ((?x24066 (* l_0_6_64 l_0_6_64)))
 (let ((?x24064 (* l_0_6_63 l_0_6_63)))
 (let ((?x24062 (* l_0_6_62 l_0_6_62)))
 (let ((?x24060 (* l_0_6_61 l_0_6_61)))
 (let ((?x24058 (* l_0_6_21 l_0_6_21)))
 (let ((?x24056 (* l_0_6_20 l_0_6_20)))
 (let ((?x24054 (* l_0_6_19 l_0_6_19)))
 (let ((?x24044 (* l_0_6_18 l_0_6_18)))
 (let ((?x24055 (- (- (- (* (- l_0_6_16) l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x24044) ?x24054)))
 (let ((?x24069 (+ (+ (+ (+ (+ (- (- ?x24055 ?x24056) ?x24058) ?x24060) ?x24062) ?x24064) ?x24066) ?x24068)))
 (= (+ ?x24069 ?x24070) 0.0))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24111 (* ?x22529 l_0_6_72)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24109 (* ?x22526 l_0_6_71)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24107 (* ?x22523 l_0_6_70)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24105 (* ?x22520 l_0_6_69)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24103 (* ?x22517 l_0_6_68)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24101 (* ?x22514 l_0_6_67)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24099 (* ?x22491 l_0_6_27)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24097 (* ?x22488 l_0_6_26)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24095 (* ?x22485 l_0_6_25)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24093 (* ?x22482 l_0_6_24)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24091 (* ?x22479 l_0_6_23)))
 (let ((?x24098 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_22) ?x24091) ?x24093) ?x24095) ?x24097)))
 (let ((?x24112 (+ (+ (+ (+ (+ (+ (- ?x24098 ?x24099) ?x24101) ?x24103) ?x24105) ?x24107) ?x24109) ?x24111)))
 (= ?x24112 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x22530 (* ?x22529 l_0_6_79)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x22527 (* ?x22526 l_0_6_78)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x22524 (* ?x22523 l_0_6_77)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x22521 (* ?x22520 l_0_6_76)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x22518 (* ?x22517 l_0_6_75)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x22515 (* ?x22514 l_0_6_74)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x22492 (* ?x22491 l_0_6_34)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x22489 (* ?x22488 l_0_6_33)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x22486 (* ?x22485 l_0_6_32)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x22483 (* ?x22482 l_0_6_31)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x22480 (* ?x22479 l_0_6_30)))
 (let ((?x6229 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_29) ?x22480) ?x22483) ?x22486) ?x22489)))
 (let ((?x24142 (+ (+ (+ (+ (+ (+ (- ?x6229 ?x22492) ?x22515) ?x22518) ?x22521) ?x22524) ?x22527) ?x22530)))
 (= ?x24142 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24174 (* ?x22529 l_0_6_87)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24172 (* ?x22526 l_0_6_86)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24170 (* ?x22523 l_0_6_85)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24168 (* ?x22520 l_0_6_84)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24166 (* ?x22517 l_0_6_83)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24164 (* ?x22514 l_0_6_82)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24162 (* ?x22491 l_0_6_42)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24160 (* ?x22488 l_0_6_41)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24158 (* ?x22485 l_0_6_40)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24156 (* ?x22482 l_0_6_39)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24154 (* ?x22479 l_0_6_38)))
 (let ((?x24161 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_37) ?x24154) ?x24156) ?x24158) ?x24160)))
 (let ((?x24175 (+ (+ (+ (+ (+ (+ (- ?x24161 ?x24162) ?x24164) ?x24166) ?x24168) ?x24170) ?x24172) ?x24174)))
 (= ?x24175 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24241 (* l_0_6_73 l_0_6_73)))
 (let ((?x24239 (* l_0_6_72 l_0_6_72)))
 (let ((?x24237 (* l_0_6_71 l_0_6_71)))
 (let ((?x24235 (* l_0_6_70 l_0_6_70)))
 (let ((?x24233 (* l_0_6_69 l_0_6_69)))
 (let ((?x24231 (* l_0_6_68 l_0_6_68)))
 (let ((?x24229 (* l_0_6_67 l_0_6_67)))
 (let ((?x24227 (* l_0_6_28 l_0_6_28)))
 (let ((?x24225 (* l_0_6_27 l_0_6_27)))
 (let ((?x24223 (* l_0_6_26 l_0_6_26)))
 (let ((?x24212 (* l_0_6_25 l_0_6_25)))
 (let ((?x24209 (* l_0_6_24 l_0_6_24)))
 (let ((?x24222 (- (- (- (* (- l_0_6_22) l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24209) ?x24212)))
 (let ((?x24236 (+ (+ (+ (+ (- (- (- ?x24222 ?x24223) ?x24225) ?x24227) ?x24229) ?x24231) ?x24233) ?x24235)))
 (= (+ (+ (+ ?x24236 ?x24237) ?x24239) ?x24241) 0.0))))))))))))))))
(assert
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24310 (* ?x24309 l_0_6_80)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24307 (* ?x24306 l_0_6_79)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24304 (* ?x24303 l_0_6_78)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24301 (* ?x24300 l_0_6_77)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24298 (* ?x24297 l_0_6_76)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24295 (* ?x24294 l_0_6_75)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24292 (* ?x24291 l_0_6_74)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24289 (* ?x24288 l_0_6_35)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24286 (* ?x24285 l_0_6_34)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24283 (* ?x24282 l_0_6_33)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24280 (* ?x24279 l_0_6_32)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24277 (* ?x23447 l_0_6_31)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x24275 (* ?x23091 l_0_6_30)))
 (let ((?x24284 (- (- (- (- (* (* (- 2.0) l_0_6_22) l_0_6_29) ?x24275) ?x24277) ?x24280) ?x24283)))
 (let ((?x24305 (+ (+ (+ (+ (+ (- (- ?x24284 ?x24286) ?x24289) ?x24292) ?x24295) ?x24298) ?x24301) ?x24304)))
 (= (+ (+ ?x24305 ?x24307) ?x24310) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24368 (* ?x24309 l_0_6_88)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24366 (* ?x24306 l_0_6_87)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24364 (* ?x24303 l_0_6_86)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24362 (* ?x24300 l_0_6_85)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24360 (* ?x24297 l_0_6_84)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24358 (* ?x24294 l_0_6_83)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24356 (* ?x24291 l_0_6_82)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24354 (* ?x24288 l_0_6_43)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24352 (* ?x24285 l_0_6_42)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24350 (* ?x24282 l_0_6_41)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24338 (* ?x24279 l_0_6_40)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24334 (* ?x23447 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x6433 (* ?x23091 l_0_6_38)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x6434 (* ?x23685 l_0_6_37)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x22636 (* ?x22635 l_0_6_169)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x22633 (* ?x22632 l_0_6_168)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x22630 (* ?x22629 l_0_6_167)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x22627 (* ?x22626 l_0_6_166)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x22624 (* ?x22623 l_0_6_165)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x22621 (* ?x22620 l_0_6_164)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x22618 (* ?x22617 l_0_6_124)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x22615 (* ?x22614 l_0_6_123)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x22612 (* ?x22611 l_0_6_122)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22609 (* ?x22608 l_0_6_121)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22606 (* ?x22605 l_0_6_120)))
 (let ((?x23169 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_119) ?x22606) ?x22609) ?x22612) ?x22615)))
 (let ((?x23176 (+ (+ (+ (+ (+ (+ (- ?x23169 ?x22618) ?x22621) ?x22624) ?x22627) ?x22630) ?x22633) ?x22636)))
 (let ((?x24355 (- (- (- (- (- (- (- ?x23176 ?x6434) ?x6433) ?x24334) ?x24338) ?x24350) ?x24352) ?x24354)))
 (let ((?x24369 (+ (+ (+ (+ (+ (+ (+ ?x24355 ?x24356) ?x24358) ?x24360) ?x24362) ?x24364) ?x24366) ?x24368)))
 (= ?x24369 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24438 (* l_0_6_81 l_0_6_81)))
 (let ((?x24436 (* l_0_6_80 l_0_6_80)))
 (let ((?x24434 (* l_0_6_79 l_0_6_79)))
 (let ((?x24432 (* l_0_6_78 l_0_6_78)))
 (let ((?x24430 (* l_0_6_77 l_0_6_77)))
 (let ((?x24428 (* l_0_6_76 l_0_6_76)))
 (let ((?x24426 (* l_0_6_75 l_0_6_75)))
 (let ((?x24424 (* l_0_6_74 l_0_6_74)))
 (let ((?x24422 (* l_0_6_36 l_0_6_36)))
 (let ((?x24420 (* l_0_6_35 l_0_6_35)))
 (let ((?x24418 (* l_0_6_34 l_0_6_34)))
 (let ((?x24416 (* l_0_6_33 l_0_6_33)))
 (let ((?x24414 (* l_0_6_32 l_0_6_32)))
 (let ((?x24412 (* l_0_6_31 l_0_6_31)))
 (let ((?x24415 (- (- (- (* (- l_0_6_29) l_0_6_29) (* l_0_6_30 l_0_6_30)) ?x24412) ?x24414)))
 (let ((?x24429 (+ (+ (+ (- (- (- (- ?x24415 ?x24416) ?x24418) ?x24420) ?x24422) ?x24424) ?x24426) ?x24428)))
 (= (+ (+ (+ (+ (+ ?x24429 ?x24430) ?x24432) ?x24434) ?x24436) ?x24438) 0.0))))))))))))))))))
(assert
 (let ((?x24501 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24498 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24495 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24492 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24489 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24486 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24483 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24480 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24477 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24474 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24471 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24468 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24465 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x24462 (* ?x23485 l_0_6_39)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x24460 (* ?x23476 l_0_6_38)))
 (let ((?x24469 (- (- (- (- (* (* (- 2.0) l_0_6_29) l_0_6_37) ?x24460) ?x24462) ?x24465) ?x24468)))
 (let ((?x24490 (+ (+ (+ (+ (- (- (- ?x24469 ?x24471) ?x24474) ?x24477) ?x24480) ?x24483) ?x24486) ?x24489)))
 (= (+ (+ (+ (+ ?x24490 ?x24492) ?x24495) ?x24498) ?x24501) 0.0)))))))))))))))))))))
(assert
 (let ((?x24581 (* l_0_6_90 l_0_6_90)))
 (let ((?x24579 (* l_0_6_89 l_0_6_89)))
 (let ((?x24577 (* l_0_6_88 l_0_6_88)))
 (let ((?x24575 (* l_0_6_87 l_0_6_87)))
 (let ((?x24573 (* l_0_6_86 l_0_6_86)))
 (let ((?x24571 (* l_0_6_85 l_0_6_85)))
 (let ((?x24569 (* l_0_6_84 l_0_6_84)))
 (let ((?x24567 (* l_0_6_83 l_0_6_83)))
 (let ((?x24565 (* l_0_6_82 l_0_6_82)))
 (let ((?x24563 (* l_0_6_45 l_0_6_45)))
 (let ((?x24561 (* l_0_6_44 l_0_6_44)))
 (let ((?x24559 (* l_0_6_43 l_0_6_43)))
 (let ((?x24557 (* l_0_6_42 l_0_6_42)))
 (let ((?x24544 (* l_0_6_41 l_0_6_41)))
 (let ((?x24541 (* l_0_6_40 l_0_6_40)))
 (let ((?x24537 (* l_0_6_39 l_0_6_39)))
 (let ((?x24543 (- (- (- (* (- l_0_6_37) l_0_6_37) (* l_0_6_38 l_0_6_38)) ?x24537) ?x24541)))
 (let ((?x24568 (+ (+ (- (- (- (- (- ?x24543 ?x24544) ?x24557) ?x24559) ?x24561) ?x24563) ?x24565) ?x24567)))
 (let ((?x24582 (+ (+ (+ (+ (+ (+ (+ ?x24568 ?x24569) ?x24571) ?x24573) ?x24575) ?x24577) ?x24579) ?x24581)))
 (= ?x24582 0.0)))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22462 (* ?x22461 l_0_6_47)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22454 (* ?x3593 l_0_6_2)))
 (= (+ ?x22454 ?x22462) 0.0))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23698 (* ?x23604 l_0_6_70)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23696 (* ?x23601 l_0_6_69)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23694 (* ?x23598 l_0_6_68)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23692 (* ?x23595 l_0_6_67)))
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22512 (* ?x22461 l_0_6_49)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23690 (* ?x23447 l_0_6_9)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x24621 (* ?x24620 l_0_6_250)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x24618 (* ?x24617 l_0_6_249)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x24615 (* ?x24614 l_0_6_248)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x24612 (* ?x24611 l_0_6_247)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23688 (* ?x23091 l_0_6_8)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x23686 (* ?x23685 l_0_6_7)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22475 (* ?x3593 l_0_6_4)))
 (let ((?x24613 (- (+ (+ (+ ?x22475 (* (* 2.0 l_0_6_10) l_0_6_25)) ?x23686) ?x23688) ?x24612)))
 (let ((?x24626 (- (- (+ (+ (- (- (- ?x24613 ?x24615) ?x24618) ?x24621) ?x23690) ?x22512) ?x23692) ?x23694)))
 (= (- (- ?x24626 ?x23696) ?x23698) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22593 (* ?x22461 l_0_6_52)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) ?x22593) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22644 (* ?x22461 l_0_6_56)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x24621 (* ?x24620 l_0_6_250)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x24618 (* ?x24617 l_0_6_249)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x24615 (* ?x24614 l_0_6_248)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x24612 (* ?x24611 l_0_6_247)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24662 (* ?x22850 l_0_6_160)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24660 (* ?x22847 l_0_6_159)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24658 (* ?x22844 l_0_6_158)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24656 (* ?x22841 l_0_6_157)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x24654 (* ?x24653 l_0_6_99)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x24651 (* ?x24650 l_0_6_98)))
 (let ((?x24647 (* 2.0 l_0_6_112)))
 (let ((?x24648 (* ?x24647 l_0_6_97)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22597 (* ?x3593 l_0_6_11)))
 (let ((?x24655 (+ (+ (+ (+ ?x22597 (* (* 2.0 l_0_6_100) l_0_6_115)) ?x24648) ?x24651) ?x24654)))
 (let ((?x24666 (+ (+ (+ (- (- (- (- ?x24655 ?x24656) ?x24658) ?x24660) ?x24662) ?x24612) ?x24615) ?x24618)))
 (= (+ (+ ?x24666 ?x24621) ?x22644) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22684 (* ?x22461 l_0_6_61)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x22684) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22690 (* ?x22461 l_0_6_67)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_22) ?x22690) 0.0))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22700 (* ?x22461 l_0_6_74)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_29) ?x22700) 0.0))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x24692 (* ?x24691 l_0_6_97)))
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22710 (* ?x22461 l_0_6_82)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x6848 (* ?x22458 l_0_6_142)))
 (let ((?x3593 (* (- 2.0) l_0_6_1)))
 (let ((?x22708 (* ?x3593 l_0_6_37)))
 (= (- (+ (+ ?x22708 ?x6848) ?x22710) ?x24692) 0.0))))))))))
(assert
 (let ((?x22739 (* l_0_6_48 l_0_6_48)))
 (let ((?x22737 (* l_0_6_47 l_0_6_47)))
 (let ((?x24709 (+ (+ (- (* (- l_0_6_2) l_0_6_2) (* l_0_6_3 l_0_6_3)) ?x22737) ?x22739)))
 (= ?x24709 0.0)))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22790 (* ?x22789 l_0_6_50)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22787 (* ?x22786 l_0_6_49)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22784 (* ?x22783 l_0_6_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_4) ?x22784) ?x22787) ?x22790) 0.0))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22859 (* ?x22789 l_0_6_53)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22857 (* ?x22786 l_0_6_52)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22855 (* ?x22783 l_0_6_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_7) ?x22855) ?x22857) ?x22859) 0.0))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22941 (* ?x22789 l_0_6_57)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22939 (* ?x22786 l_0_6_56)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x22922 (* ?x22921 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_11) l_0_6_2) ?x22922) ?x22939) ?x22941) 0.0))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23024 (* ?x22789 l_0_6_62)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23022 (* ?x22786 l_0_6_61)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23020 (* ?x22479 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_16) l_0_6_2) ?x23020) ?x23022) ?x23024) 0.0))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23096 (* ?x22789 l_0_6_68)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23094 (* ?x22786 l_0_6_67)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23092 (* ?x23091 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_22) ?x23092) ?x23094) ?x23096) 0.0))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23183 (* ?x22789 l_0_6_75)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23181 (* ?x22786 l_0_6_74)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23179 (* ?x22783 l_0_6_30)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23177 (* ?x22780 l_0_6_29)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24662 (* ?x22850 l_0_6_160)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24660 (* ?x22847 l_0_6_159)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24658 (* ?x22844 l_0_6_158)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24656 (* ?x22841 l_0_6_157)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x24654 (* ?x24653 l_0_6_99)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x24651 (* ?x24650 l_0_6_98)))
 (let ((?x24647 (* 2.0 l_0_6_112)))
 (let ((?x24648 (* ?x24647 l_0_6_97)))
 (let ((?x24746 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_115) ?x24648) ?x24651) ?x24654) ?x24656)))
 (let ((?x24749 (+ (+ (+ ?x24746 ?x24658) ?x24660) ?x24662)))
 (= (+ (+ (- (- ?x24749 ?x23177) ?x23179) ?x23181) ?x23183) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x24762 (* ?x24761 l_0_6_98)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x24759 (* ?x24758 l_0_6_97)))
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23251 (* ?x22789 l_0_6_83)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23249 (* ?x22786 l_0_6_82)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23247 (* ?x22783 l_0_6_38)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23245 (* ?x22780 l_0_6_37)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x6996 (* ?x22730 l_0_6_143)))
 (let ((?x6961 (+ (* (* 2.0 l_0_6_137) l_0_6_142) ?x6996)))
 (= (- (- (+ (+ (- (- ?x6961 ?x23245) ?x23247) ?x23249) ?x23251) ?x24759) ?x24762) 0.0)))))))))))))))))
(assert
 (let ((?x23315 (* l_0_6_6 l_0_6_6)))
 (let ((?x23313 (* l_0_6_51 l_0_6_51)))
 (let ((?x23311 (* l_0_6_50 l_0_6_50)))
 (let ((?x23309 (* l_0_6_5 l_0_6_5)))
 (let ((?x23312 (+ (- (+ (* (- l_0_6_4) l_0_6_4) (* l_0_6_49 l_0_6_49)) ?x23309) ?x23311)))
 (= (- (+ ?x23312 ?x23313) ?x23315) 0.0)))))))
(assert
 (let ((?x23345 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23342 (* ?x23341 l_0_6_54)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23339 (* ?x23338 l_0_6_53)))
 (let ((?x23336 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23333 (* ?x23332 l_0_6_52)))
 (let ((?x23343 (+ (+ (- (+ (* (* (- 2.0) l_0_6_4) l_0_6_7) ?x23333) ?x23336) ?x23339) ?x23342)))
 (= (- ?x23343 ?x23345) 0.0)))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23386 (* ?x23341 l_0_6_58)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23384 (* ?x23338 l_0_6_57)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23382 (* ?x23332 l_0_6_56)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23380 (* ?x23379 l_0_6_6)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23377 (* ?x22921 l_0_6_5)))
 (let ((?x23385 (+ (+ (- (- (* (* (- 2.0) l_0_6_11) l_0_6_4) ?x23377) ?x23380) ?x23382) ?x23384)))
 (= (+ ?x23385 ?x23386) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23417 (* ?x23341 l_0_6_63)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23415 (* ?x23338 l_0_6_62)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23413 (* ?x23332 l_0_6_61)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23411 (* ?x22482 l_0_6_6)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23403 (* ?x22479 l_0_6_5)))
 (let ((?x23416 (+ (+ (- (- (* (* (- 2.0) l_0_6_16) l_0_6_4) ?x23403) ?x23411) ?x23413) ?x23415)))
 (= (+ ?x23416 ?x23417) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23454 (* ?x23341 l_0_6_69)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23452 (* ?x23338 l_0_6_68)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23450 (* ?x23332 l_0_6_67)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23448 (* ?x23447 l_0_6_6)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23439 (* ?x23091 l_0_6_5)))
 (let ((?x23453 (+ (+ (- (- (* (* (- 2.0) l_0_6_22) l_0_6_4) ?x23439) ?x23448) ?x23450) ?x23452)))
 (= (+ ?x23453 ?x23454) 0.0)))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23492 (* ?x23341 l_0_6_76)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23490 (* ?x23338 l_0_6_75)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23488 (* ?x23332 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23486 (* ?x23485 l_0_6_6)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23477 (* ?x23476 l_0_6_5)))
 (let ((?x23491 (+ (+ (- (- (* (* (- 2.0) l_0_6_29) l_0_6_4) ?x23477) ?x23486) ?x23488) ?x23490)))
 (= (+ ?x23491 ?x23492) 0.0)))))))))))))
(assert
 (let ((?x24797 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x24794 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x24791 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23530 (* ?x23341 l_0_6_84)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23528 (* ?x23338 l_0_6_83)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23526 (* ?x23332 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23524 (* ?x23523 l_0_6_6)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23515 (* ?x23514 l_0_6_5)))
 (let ((?x23770 (* 2.0 l_0_6_37)))
 (let ((?x24783 (* ?x23770 l_0_6_4)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x24781 (* ?x22777 l_0_6_144)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x7037 (* ?x22774 l_0_6_143)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x7040 (* ?x22771 l_0_6_142)))
 (let ((?x24782 (+ (+ ?x7040 ?x7037) ?x24781)))
 (let ((?x24792 (- (+ (+ (+ (- (- (- ?x24782 ?x24783) ?x23515) ?x23524) ?x23526) ?x23528) ?x23530) ?x24791)))
 (= (- (- ?x24792 ?x24794) ?x24797) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x23570 (* l_0_6_9 l_0_6_9)))
 (let ((?x23568 (* l_0_6_8 l_0_6_8)))
 (let ((?x23566 (* l_0_6_7 l_0_6_7)))
 (let ((?x23564 (* l_0_6_55 l_0_6_55)))
 (let ((?x23562 (* l_0_6_54 l_0_6_54)))
 (let ((?x23560 (* l_0_6_53 l_0_6_53)))
 (let ((?x23563 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_52 l_0_6_52)) ?x23560) ?x23562)))
 (= (- (- (- (+ ?x23563 ?x23564) ?x23566) ?x23568) ?x23570) 0.0)))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23605 (* ?x23604 l_0_6_59)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23602 (* ?x23601 l_0_6_58)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23599 (* ?x23598 l_0_6_57)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23596 (* ?x23595 l_0_6_56)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23593 (* ?x23379 l_0_6_9)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23591 (* ?x22921 l_0_6_8)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x23589 (* ?x22918 l_0_6_7)))
 (let ((?x23597 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_14) ?x23589) ?x23591) ?x23593) ?x23596)))
 (= (+ (+ (+ ?x23597 ?x23599) ?x23602) ?x23605) 0.0)))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23644 (* ?x23604 l_0_6_64)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23642 (* ?x23601 l_0_6_63)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23640 (* ?x23598 l_0_6_62)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23638 (* ?x23595 l_0_6_61)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23636 (* ?x22482 l_0_6_9)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23627 (* ?x22479 l_0_6_8)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x23623 (* ?x22476 l_0_6_7)))
 (let ((?x23639 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_19) ?x23623) ?x23627) ?x23636) ?x23638)))
 (= (+ (+ (+ ?x23639 ?x23640) ?x23642) ?x23644) 0.0)))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23698 (* ?x23604 l_0_6_70)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23696 (* ?x23601 l_0_6_69)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23694 (* ?x23598 l_0_6_68)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23692 (* ?x23595 l_0_6_67)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23690 (* ?x23447 l_0_6_9)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23688 (* ?x23091 l_0_6_8)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x23686 (* ?x23685 l_0_6_7)))
 (let ((?x23587 (* (- 2.0) l_0_6_10)))
 (let ((?x23668 (* ?x23587 l_0_6_25)))
 (let ((?x7066 (+ (+ (+ (+ (- (- (- ?x23668 ?x23686) ?x23688) ?x23690) ?x23692) ?x23694) ?x23696) ?x23698)))
 (= ?x7066 0.0)))))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23744 (* ?x23604 l_0_6_77)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23742 (* ?x23601 l_0_6_76)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23740 (* ?x23598 l_0_6_75)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23738 (* ?x23595 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23736 (* ?x23485 l_0_6_9)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23734 (* ?x23476 l_0_6_8)))
 (let ((?x23731 (* 2.0 l_0_6_29)))
 (let ((?x23732 (* ?x23731 l_0_6_7)))
 (let ((?x23739 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_32) ?x23732) ?x23734) ?x23736) ?x23738)))
 (= (+ (+ (+ ?x23739 ?x23740) ?x23742) ?x23744) 0.0)))))))))))))))))
(assert
 (let ((?x24858 (* l_0_6_99 l_0_6_99)))
 (let ((?x24856 (* l_0_6_98 l_0_6_98)))
 (let ((?x24854 (* l_0_6_97 l_0_6_97)))
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23792 (* ?x23604 l_0_6_85)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23790 (* ?x23601 l_0_6_84)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23788 (* ?x23598 l_0_6_83)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23786 (* ?x23595 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23784 (* ?x23523 l_0_6_9)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23775 (* ?x23514 l_0_6_8)))
 (let ((?x23770 (* 2.0 l_0_6_37)))
 (let ((?x23772 (* ?x23770 l_0_6_7)))
 (let ((?x24845 (* l_0_6_145 l_0_6_145)))
 (let ((?x24843 (* l_0_6_144 l_0_6_144)))
 (let ((?x24841 (* l_0_6_143 l_0_6_143)))
 (let ((?x24839 (* l_0_6_142 l_0_6_142)))
 (let ((?x24840 (+ (- (* (* (- 2.0) l_0_6_10) l_0_6_40) (* l_0_6_100 l_0_6_100)) ?x24839)))
 (let ((?x24850 (+ (- (- (- (+ (+ (+ ?x24840 ?x24841) ?x24843) ?x24845) ?x23772) ?x23775) ?x23784) ?x23786)))
 (= (- (- (- (+ (+ (+ ?x24850 ?x23788) ?x23790) ?x23792) ?x24854) ?x24856) ?x24858) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x23834 (* l_0_6_60 l_0_6_60)))
 (let ((?x23832 (* l_0_6_59 l_0_6_59)))
 (let ((?x23830 (* l_0_6_58 l_0_6_58)))
 (let ((?x23828 (* l_0_6_57 l_0_6_57)))
 (let ((?x23826 (* l_0_6_56 l_0_6_56)))
 (let ((?x23824 (* l_0_6_15 l_0_6_15)))
 (let ((?x23822 (* l_0_6_14 l_0_6_14)))
 (let ((?x23813 (* l_0_6_13 l_0_6_13)))
 (let ((?x23823 (- (- (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x23813) ?x23822)))
 (= (+ (+ (+ (+ (+ (- ?x23823 ?x23824) ?x23826) ?x23828) ?x23830) ?x23832) ?x23834) 0.0)))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23878 (* ?x23877 l_0_6_65)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23875 (* ?x23874 l_0_6_64)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23872 (* ?x23871 l_0_6_63)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23869 (* ?x23868 l_0_6_62)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23866 (* ?x23865 l_0_6_61)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23863 (* ?x23862 l_0_6_20)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23860 (* ?x23859 l_0_6_19)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23857 (* ?x23379 l_0_6_18)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23855 (* ?x22921 l_0_6_17)))
 (let ((?x23864 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_16) ?x23855) ?x23857) ?x23860) ?x23863)))
 (= (+ (+ (+ (+ (+ ?x23864 ?x23866) ?x23869) ?x23872) ?x23875) ?x23878) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23930 (* ?x23877 l_0_6_71)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23928 (* ?x23874 l_0_6_70)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23926 (* ?x23871 l_0_6_69)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23924 (* ?x23868 l_0_6_68)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23922 (* ?x23865 l_0_6_67)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23920 (* ?x23862 l_0_6_26)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23910 (* ?x23859 l_0_6_25)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23907 (* ?x23379 l_0_6_24)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23903 (* ?x22921 l_0_6_23)))
 (let ((?x23921 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_22) ?x23903) ?x23907) ?x23910) ?x23920)))
 (= (+ (+ (+ (+ (+ ?x23921 ?x23922) ?x23924) ?x23926) ?x23928) ?x23930) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23970 (* ?x23877 l_0_6_78)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23968 (* ?x23874 l_0_6_77)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23966 (* ?x23871 l_0_6_76)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23964 (* ?x23868 l_0_6_75)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23962 (* ?x23865 l_0_6_74)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23960 (* ?x23862 l_0_6_33)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23950 (* ?x23859 l_0_6_32)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x6062 (* ?x23379 l_0_6_31)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x6056 (* ?x22921 l_0_6_30)))
 (let ((?x23961 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_29) ?x6056) ?x6062) ?x23950) ?x23960)))
 (= (+ (+ (+ (+ (+ ?x23961 ?x23962) ?x23964) ?x23966) ?x23968) ?x23970) 0.0)))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x24016 (* ?x23877 l_0_6_86)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x24014 (* ?x23874 l_0_6_85)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x24012 (* ?x23871 l_0_6_84)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x24010 (* ?x23868 l_0_6_83)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x24008 (* ?x23865 l_0_6_82)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x24006 (* ?x23862 l_0_6_41)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24901 (* ?x22850 l_0_6_149)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24899 (* ?x22847 l_0_6_148)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24897 (* ?x22844 l_0_6_147)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24895 (* ?x22841 l_0_6_146)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23996 (* ?x23859 l_0_6_40)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23993 (* ?x23379 l_0_6_39)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23989 (* ?x22921 l_0_6_38)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x24890 (* ?x22918 l_0_6_37)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x24888 (* ?x22909 l_0_6_99)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x24885 (* ?x22897 l_0_6_98)))
 (let ((?x24882 (* 2.0 l_0_6_101)))
 (let ((?x24884 (* ?x24882 l_0_6_97)))
 (let ((?x24889 (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_104) ?x24884) ?x24885) ?x24888)))
 (let ((?x24900 (+ (+ (+ (- (- (- (- ?x24889 ?x24890) ?x23989) ?x23993) ?x23996) ?x24895) ?x24897) ?x24899)))
 (let ((?x24908 (+ (+ (+ (+ (+ (- (+ ?x24900 ?x24901) ?x24006) ?x24008) ?x24010) ?x24012) ?x24014) ?x24016)))
 (= ?x24908 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24070 (* l_0_6_66 l_0_6_66)))
 (let ((?x24068 (* l_0_6_65 l_0_6_65)))
 (let ((?x24066 (* l_0_6_64 l_0_6_64)))
 (let ((?x24064 (* l_0_6_63 l_0_6_63)))
 (let ((?x24062 (* l_0_6_62 l_0_6_62)))
 (let ((?x24060 (* l_0_6_61 l_0_6_61)))
 (let ((?x24058 (* l_0_6_21 l_0_6_21)))
 (let ((?x24056 (* l_0_6_20 l_0_6_20)))
 (let ((?x24054 (* l_0_6_19 l_0_6_19)))
 (let ((?x24044 (* l_0_6_18 l_0_6_18)))
 (let ((?x24055 (- (- (- (* (- l_0_6_16) l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x24044) ?x24054)))
 (let ((?x24069 (+ (+ (+ (+ (+ (- (- ?x24055 ?x24056) ?x24058) ?x24060) ?x24062) ?x24064) ?x24066) ?x24068)))
 (= (+ ?x24069 ?x24070) 0.0))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24111 (* ?x22529 l_0_6_72)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24109 (* ?x22526 l_0_6_71)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24107 (* ?x22523 l_0_6_70)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24105 (* ?x22520 l_0_6_69)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24103 (* ?x22517 l_0_6_68)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24101 (* ?x22514 l_0_6_67)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24099 (* ?x22491 l_0_6_27)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24097 (* ?x22488 l_0_6_26)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24095 (* ?x22485 l_0_6_25)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24093 (* ?x22482 l_0_6_24)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24091 (* ?x22479 l_0_6_23)))
 (let ((?x24098 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_22) ?x24091) ?x24093) ?x24095) ?x24097)))
 (let ((?x24112 (+ (+ (+ (+ (+ (+ (- ?x24098 ?x24099) ?x24101) ?x24103) ?x24105) ?x24107) ?x24109) ?x24111)))
 (= ?x24112 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24174 (* ?x22529 l_0_6_87)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24172 (* ?x22526 l_0_6_86)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24170 (* ?x22523 l_0_6_85)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24168 (* ?x22520 l_0_6_84)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24166 (* ?x22517 l_0_6_83)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24164 (* ?x22514 l_0_6_82)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24162 (* ?x22491 l_0_6_42)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24160 (* ?x22488 l_0_6_41)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24158 (* ?x22485 l_0_6_40)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24156 (* ?x22482 l_0_6_39)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24154 (* ?x22479 l_0_6_38)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x7194 (* ?x22476 l_0_6_37)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x22851 (* ?x22850 l_0_6_154)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x22848 (* ?x22847 l_0_6_153)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x22845 (* ?x22844 l_0_6_152)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x22842 (* ?x22841 l_0_6_151)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22839 (* ?x22608 l_0_6_99)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22837 (* ?x22605 l_0_6_98)))
 (let ((?x22455 (* 2.0 l_0_6_106)))
 (let ((?x22827 (* ?x22455 l_0_6_97)))
 (let ((?x22843 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_109) ?x22827) ?x22837) ?x22839) ?x22842)))
 (let ((?x22852 (+ (+ (+ ?x22843 ?x22845) ?x22848) ?x22851)))
 (let ((?x24941 (+ (- (- (- (- (- (- ?x22852 ?x7194) ?x24154) ?x24156) ?x24158) ?x24160) ?x24162) ?x24164)))
 (= (+ (+ (+ (+ (+ ?x24941 ?x24166) ?x24168) ?x24170) ?x24172) ?x24174) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24241 (* l_0_6_73 l_0_6_73)))
 (let ((?x24239 (* l_0_6_72 l_0_6_72)))
 (let ((?x24237 (* l_0_6_71 l_0_6_71)))
 (let ((?x24235 (* l_0_6_70 l_0_6_70)))
 (let ((?x24233 (* l_0_6_69 l_0_6_69)))
 (let ((?x24231 (* l_0_6_68 l_0_6_68)))
 (let ((?x24229 (* l_0_6_67 l_0_6_67)))
 (let ((?x24227 (* l_0_6_28 l_0_6_28)))
 (let ((?x24225 (* l_0_6_27 l_0_6_27)))
 (let ((?x24223 (* l_0_6_26 l_0_6_26)))
 (let ((?x24212 (* l_0_6_25 l_0_6_25)))
 (let ((?x24209 (* l_0_6_24 l_0_6_24)))
 (let ((?x24222 (- (- (- (* (- l_0_6_22) l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24209) ?x24212)))
 (let ((?x24236 (+ (+ (+ (+ (- (- (- ?x24222 ?x24223) ?x24225) ?x24227) ?x24229) ?x24231) ?x24233) ?x24235)))
 (= (+ (+ (+ ?x24236 ?x24237) ?x24239) ?x24241) 0.0))))))))))))))))
(assert
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24310 (* ?x24309 l_0_6_80)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24307 (* ?x24306 l_0_6_79)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24304 (* ?x24303 l_0_6_78)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24301 (* ?x24300 l_0_6_77)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24298 (* ?x24297 l_0_6_76)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24295 (* ?x24294 l_0_6_75)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24292 (* ?x24291 l_0_6_74)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24289 (* ?x24288 l_0_6_35)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24286 (* ?x24285 l_0_6_34)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24283 (* ?x24282 l_0_6_33)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24280 (* ?x24279 l_0_6_32)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24277 (* ?x23447 l_0_6_31)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x24275 (* ?x23091 l_0_6_30)))
 (let ((?x24284 (- (- (- (- (* (* (- 2.0) l_0_6_22) l_0_6_29) ?x24275) ?x24277) ?x24280) ?x24283)))
 (let ((?x24305 (+ (+ (+ (+ (+ (- (- ?x24284 ?x24286) ?x24289) ?x24292) ?x24295) ?x24298) ?x24301) ?x24304)))
 (= (+ (+ ?x24305 ?x24307) ?x24310) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24368 (* ?x24309 l_0_6_88)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24366 (* ?x24306 l_0_6_87)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24364 (* ?x24303 l_0_6_86)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24362 (* ?x24300 l_0_6_85)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24360 (* ?x24297 l_0_6_84)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24358 (* ?x24294 l_0_6_83)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24356 (* ?x24291 l_0_6_82)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24354 (* ?x24288 l_0_6_43)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24352 (* ?x24285 l_0_6_42)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24350 (* ?x24282 l_0_6_41)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24338 (* ?x24279 l_0_6_40)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24334 (* ?x23447 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x6433 (* ?x23091 l_0_6_38)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x6434 (* ?x23685 l_0_6_37)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24662 (* ?x22850 l_0_6_160)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24660 (* ?x22847 l_0_6_159)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24658 (* ?x22844 l_0_6_158)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24656 (* ?x22841 l_0_6_157)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x24654 (* ?x24653 l_0_6_99)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x24651 (* ?x24650 l_0_6_98)))
 (let ((?x24647 (* 2.0 l_0_6_112)))
 (let ((?x24648 (* ?x24647 l_0_6_97)))
 (let ((?x24746 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_115) ?x24648) ?x24651) ?x24654) ?x24656)))
 (let ((?x24749 (+ (+ (+ ?x24746 ?x24658) ?x24660) ?x24662)))
 (let ((?x7245 (- (- (- (- (- (- (- ?x24749 ?x6434) ?x6433) ?x24334) ?x24338) ?x24350) ?x24352) ?x24354)))
 (let ((?x24959 (+ (+ (+ (+ (+ (+ (+ ?x7245 ?x24356) ?x24358) ?x24360) ?x24362) ?x24364) ?x24366) ?x24368)))
 (= ?x24959 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24438 (* l_0_6_81 l_0_6_81)))
 (let ((?x24436 (* l_0_6_80 l_0_6_80)))
 (let ((?x24434 (* l_0_6_79 l_0_6_79)))
 (let ((?x24432 (* l_0_6_78 l_0_6_78)))
 (let ((?x24430 (* l_0_6_77 l_0_6_77)))
 (let ((?x24428 (* l_0_6_76 l_0_6_76)))
 (let ((?x24426 (* l_0_6_75 l_0_6_75)))
 (let ((?x24424 (* l_0_6_74 l_0_6_74)))
 (let ((?x24422 (* l_0_6_36 l_0_6_36)))
 (let ((?x24420 (* l_0_6_35 l_0_6_35)))
 (let ((?x24418 (* l_0_6_34 l_0_6_34)))
 (let ((?x24416 (* l_0_6_33 l_0_6_33)))
 (let ((?x24414 (* l_0_6_32 l_0_6_32)))
 (let ((?x24412 (* l_0_6_31 l_0_6_31)))
 (let ((?x24415 (- (- (- (* (- l_0_6_29) l_0_6_29) (* l_0_6_30 l_0_6_30)) ?x24412) ?x24414)))
 (let ((?x24429 (+ (+ (+ (- (- (- (- ?x24415 ?x24416) ?x24418) ?x24420) ?x24422) ?x24424) ?x24426) ?x24428)))
 (= (+ (+ (+ (+ (+ ?x24429 ?x24430) ?x24432) ?x24434) ?x24436) ?x24438) 0.0))))))))))))))))))
(assert
 (let ((?x24501 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24498 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24495 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24492 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24489 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24486 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24483 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24480 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24477 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24474 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24471 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24468 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24465 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x24462 (* ?x23485 l_0_6_39)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x24460 (* ?x23476 l_0_6_38)))
 (let ((?x23731 (* 2.0 l_0_6_29)))
 (let ((?x24996 (* ?x23731 l_0_6_37)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24994 (* ?x22850 l_0_6_167)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24992 (* ?x22847 l_0_6_166)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24990 (* ?x22844 l_0_6_165)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24988 (* ?x22841 l_0_6_164)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x24986 (* ?x24985 l_0_6_99)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x7256 (* ?x7258 l_0_6_98)))
 (let ((?x7264 (* 2.0 l_0_6_119)))
 (let ((?x7265 (* ?x7264 l_0_6_97)))
 (let ((?x24989 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_122) ?x7265) ?x7256) ?x24986) ?x24988)))
 (let ((?x24995 (+ (+ (+ ?x24989 ?x24990) ?x24992) ?x24994)))
 (let ((?x25003 (- (- (- (- (- (- (- ?x24995 ?x24996) ?x24460) ?x24462) ?x24465) ?x24468) ?x24471) ?x24474)))
 (let ((?x25010 (+ (+ (+ (+ (+ (+ (- ?x25003 ?x24477) ?x24480) ?x24483) ?x24486) ?x24489) ?x24492) ?x24495)))
 (= (+ (+ ?x25010 ?x24498) ?x24501) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24581 (* l_0_6_90 l_0_6_90)))
 (let ((?x24579 (* l_0_6_89 l_0_6_89)))
 (let ((?x24577 (* l_0_6_88 l_0_6_88)))
 (let ((?x24575 (* l_0_6_87 l_0_6_87)))
 (let ((?x24573 (* l_0_6_86 l_0_6_86)))
 (let ((?x24571 (* l_0_6_85 l_0_6_85)))
 (let ((?x24569 (* l_0_6_84 l_0_6_84)))
 (let ((?x24567 (* l_0_6_83 l_0_6_83)))
 (let ((?x24565 (* l_0_6_82 l_0_6_82)))
 (let ((?x24563 (* l_0_6_45 l_0_6_45)))
 (let ((?x24561 (* l_0_6_44 l_0_6_44)))
 (let ((?x24559 (* l_0_6_43 l_0_6_43)))
 (let ((?x24557 (* l_0_6_42 l_0_6_42)))
 (let ((?x24544 (* l_0_6_41 l_0_6_41)))
 (let ((?x24541 (* l_0_6_40 l_0_6_40)))
 (let ((?x24537 (* l_0_6_39 l_0_6_39)))
 (let ((?x24533 (* l_0_6_38 l_0_6_38)))
 (let ((?x24585 (* l_0_6_37 l_0_6_37)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x25057 (* ?x22850 l_0_6_175)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x25055 (* ?x22847 l_0_6_174)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x25053 (* ?x22844 l_0_6_173)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x25051 (* ?x22841 l_0_6_172)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x25049 (* ?x25048 l_0_6_99)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x25046 (* ?x25045 l_0_6_98)))
 (let ((?x25042 (* 2.0 l_0_6_127)))
 (let ((?x25043 (* ?x25042 l_0_6_97)))
 (let ((?x25052 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_130) ?x25043) ?x25046) ?x25049) ?x25051)))
 (let ((?x25058 (+ (+ (+ ?x25052 ?x25053) ?x25055) ?x25057)))
 (let ((?x25065 (- (- (- (- (- (- (- ?x25058 ?x24585) ?x24533) ?x24537) ?x24541) ?x24544) ?x24557) ?x24559)))
 (let ((?x25072 (+ (+ (+ (+ (+ (- (- ?x25065 ?x24561) ?x24563) ?x24565) ?x24567) ?x24569) ?x24571) ?x24573)))
 (= (+ (+ (+ (+ ?x25072 ?x24575) ?x24577) ?x24579) ?x24581) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22462 (* ?x22461 l_0_6_47)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x7381 (* ?x7391 l_0_6_227)))
 (let ((?x7421 (- (* (* 2.0 l_0_6_1) l_0_6_2) (* (* 2.0 l_0_6_182) l_0_6_184))))
 (let ((?x7377 (- (- (- ?x7421 (* (* 2.0 l_0_6_183) l_0_6_185)) ?x7381) (* (* 2.0 l_0_6_272) l_0_6_274))))
 (let ((?x7363 (- (- ?x7377 (* (* 2.0 l_0_6_273) l_0_6_275)) (* (* 2.0 l_0_6_317) l_0_6_319))))
 (= (- (- ?x7363 (* (* 2.0 l_0_6_318) l_0_6_320)) ?x22462) 0.0)))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22512 (* ?x22461 l_0_6_49)))
 (let ((?x25145 (* l_0_6_321 l_0_6_321)))
 (let ((?x25143 (* l_0_6_320 l_0_6_320)))
 (let ((?x25141 (* l_0_6_319 l_0_6_319)))
 (let ((?x25139 (* l_0_6_276 l_0_6_276)))
 (let ((?x25137 (* l_0_6_275 l_0_6_275)))
 (let ((?x25135 (* l_0_6_274 l_0_6_274)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25133 (* ?x7391 l_0_6_229)))
 (let ((?x25126 (- (* (* 2.0 l_0_6_1) l_0_6_4) (* (* 1.0 l_0_6_184) l_0_6_184))))
 (let ((?x25132 (- (- ?x25126 (* (* 1.0 l_0_6_185) l_0_6_185)) (* (* 1.0 l_0_6_186) l_0_6_186))))
 (let ((?x25146 (- (- (- (- (- (- (- ?x25132 ?x25133) ?x25135) ?x25137) ?x25139) ?x25141) ?x25143) ?x25145)))
 (= (- ?x25146 ?x22512) 0.0)))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22593 (* ?x22461 l_0_6_52)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25181 (* ?x7391 l_0_6_232)))
 (let ((?x25174 (- (* (* 2.0 l_0_6_1) l_0_6_7) (* (* 2.0 l_0_6_184) l_0_6_187))))
 (let ((?x25180 (- (- ?x25174 (* (* 2.0 l_0_6_185) l_0_6_188)) (* (* 2.0 l_0_6_186) l_0_6_189))))
 (let ((?x25188 (- (- (- ?x25180 ?x25181) (* (* 2.0 l_0_6_274) l_0_6_277)) (* (* 2.0 l_0_6_275) l_0_6_278))))
 (let ((?x25194 (- (- ?x25188 (* (* 2.0 l_0_6_276) l_0_6_279)) (* (* 2.0 l_0_6_319) l_0_6_322))))
 (let ((?x25200 (- (- ?x25194 (* (* 2.0 l_0_6_320) l_0_6_323)) (* (* 2.0 l_0_6_321) l_0_6_324))))
 (= (- ?x25200 ?x22593) 0.0)))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x25259 (* ?x24691 l_0_6_94)))
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22644 (* ?x22461 l_0_6_56)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25244 (* ?x7391 l_0_6_236)))
 (let ((?x25133 (* ?x7391 l_0_6_229)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x25235 (* ?x22458 l_0_6_139)))
 (let ((?x25238 (- (- (* (* 2.0 l_0_6_1) l_0_6_11) ?x25235) (* (* 2.0 l_0_6_184) l_0_6_191))))
 (let ((?x25242 (- (- ?x25238 (* (* 2.0 l_0_6_185) l_0_6_192)) (* (* 2.0 l_0_6_186) l_0_6_193))))
 (let ((?x25249 (- (- (- (+ ?x25242 ?x25133) ?x25244) (* (* 2.0 l_0_6_274) l_0_6_281)) (* (* 2.0 l_0_6_275) l_0_6_282))))
 (let ((?x25253 (- (- ?x25249 (* (* 2.0 l_0_6_276) l_0_6_283)) (* (* 2.0 l_0_6_319) l_0_6_326))))
 (let ((?x25257 (- (- ?x25253 (* (* 2.0 l_0_6_320) l_0_6_327)) (* (* 2.0 l_0_6_321) l_0_6_328))))
 (= (+ (- ?x25257 ?x22644) ?x25259) 0.0))))))))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22684 (* ?x22461 l_0_6_61)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25302 (* ?x7391 l_0_6_241)))
 (let ((?x25297 (- (* (* 2.0 l_0_6_1) l_0_6_16) (* (* 2.0 l_0_6_184) l_0_6_196))))
 (let ((?x25301 (- (- ?x25297 (* (* 2.0 l_0_6_185) l_0_6_197)) (* (* 2.0 l_0_6_186) l_0_6_198))))
 (let ((?x25307 (- (- (- ?x25301 ?x25302) (* (* 2.0 l_0_6_274) l_0_6_286)) (* (* 2.0 l_0_6_275) l_0_6_287))))
 (let ((?x25311 (- (- ?x25307 (* (* 2.0 l_0_6_276) l_0_6_288)) (* (* 2.0 l_0_6_319) l_0_6_331))))
 (let ((?x25315 (- (- ?x25311 (* (* 2.0 l_0_6_320) l_0_6_332)) (* (* 2.0 l_0_6_321) l_0_6_333))))
 (= (- ?x25315 ?x22684) 0.0)))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22690 (* ?x22461 l_0_6_67)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25361 (* ?x7391 l_0_6_247)))
 (let ((?x25356 (- (* (* 2.0 l_0_6_1) l_0_6_22) (* (* 2.0 l_0_6_184) l_0_6_202))))
 (let ((?x25360 (- (- ?x25356 (* (* 2.0 l_0_6_185) l_0_6_203)) (* (* 2.0 l_0_6_186) l_0_6_204))))
 (let ((?x25366 (- (- (- ?x25360 ?x25361) (* (* 2.0 l_0_6_274) l_0_6_292)) (* (* 2.0 l_0_6_275) l_0_6_293))))
 (let ((?x25370 (- (- ?x25366 (* (* 2.0 l_0_6_276) l_0_6_294)) (* (* 2.0 l_0_6_319) l_0_6_337))))
 (let ((?x25374 (- (- ?x25370 (* (* 2.0 l_0_6_320) l_0_6_338)) (* (* 2.0 l_0_6_321) l_0_6_339))))
 (= (- ?x25374 ?x22690) 0.0)))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22700 (* ?x22461 l_0_6_74)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25413 (* ?x7391 l_0_6_254)))
 (let ((?x25408 (- (* (* 2.0 l_0_6_1) l_0_6_29) (* (* 2.0 l_0_6_184) l_0_6_209))))
 (let ((?x25412 (- (- ?x25408 (* (* 2.0 l_0_6_185) l_0_6_210)) (* (* 2.0 l_0_6_186) l_0_6_211))))
 (let ((?x25418 (- (- (- ?x25412 ?x25413) (* (* 2.0 l_0_6_274) l_0_6_299)) (* (* 2.0 l_0_6_275) l_0_6_300))))
 (let ((?x25422 (- (- ?x25418 (* (* 2.0 l_0_6_276) l_0_6_301)) (* (* 2.0 l_0_6_319) l_0_6_344))))
 (let ((?x25426 (- (- ?x25422 (* (* 2.0 l_0_6_320) l_0_6_345)) (* (* 2.0 l_0_6_321) l_0_6_346))))
 (= (- ?x25426 ?x22700) 0.0)))))))))))
(assert
 (let ((?x22461 (* 2.0 l_0_6_46)))
 (let ((?x22710 (* ?x22461 l_0_6_82)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25468 (* ?x7391 l_0_6_262)))
 (let ((?x25463 (- (* (* 2.0 l_0_6_1) l_0_6_37) (* (* 2.0 l_0_6_184) l_0_6_217))))
 (let ((?x25467 (- (- ?x25463 (* (* 2.0 l_0_6_185) l_0_6_218)) (* (* 2.0 l_0_6_186) l_0_6_219))))
 (let ((?x25473 (- (- (- ?x25467 ?x25468) (* (* 2.0 l_0_6_274) l_0_6_307)) (* (* 2.0 l_0_6_275) l_0_6_308))))
 (let ((?x25477 (- (- ?x25473 (* (* 2.0 l_0_6_276) l_0_6_309)) (* (* 2.0 l_0_6_319) l_0_6_352))))
 (let ((?x25481 (- (- ?x25477 (* (* 2.0 l_0_6_320) l_0_6_353)) (* (* 2.0 l_0_6_321) l_0_6_354))))
 (= (- ?x25481 ?x22710) 0.0)))))))))))
(assert
 (let ((?x22739 (* l_0_6_48 l_0_6_48)))
 (let ((?x22737 (* l_0_6_47 l_0_6_47)))
 (let ((?x22735 (* l_0_6_3 l_0_6_3)))
 (let ((?x25515 (* l_0_6_228 l_0_6_228)))
 (let ((?x25517 (+ (- (- (* l_0_6_2 l_0_6_2) (* l_0_6_227 l_0_6_227)) ?x25515) ?x22735)))
 (= (- (- ?x25517 ?x22737) ?x22739) 0.0)))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22790 (* ?x22789 l_0_6_50)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22787 (* ?x22786 l_0_6_49)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22784 (* ?x22783 l_0_6_5)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25533 (* ?x25532 l_0_6_230)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25530 (* ?x25529 l_0_6_229)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x22781 (* ?x22780 l_0_6_4)))
 (= (- (- (+ (- (- ?x22781 ?x25530) ?x25533) ?x22784) ?x22787) ?x22790) 0.0))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22859 (* ?x22789 l_0_6_53)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22857 (* ?x22786 l_0_6_52)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x22855 (* ?x22783 l_0_6_8)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25553 (* ?x25532 l_0_6_233)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25551 (* ?x25529 l_0_6_232)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x22853 (* ?x22780 l_0_6_7)))
 (= (- (- (+ (- (- ?x22853 ?x25551) ?x25553) ?x22855) ?x22857) ?x22859) 0.0))))))))))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x25588 (* ?x24761 l_0_6_95)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x25586 (* ?x24758 l_0_6_94)))
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x22941 (* ?x22789 l_0_6_57)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x22939 (* ?x22786 l_0_6_56)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25582 (* ?x25532 l_0_6_237)))
 (let ((?x25533 (* ?x25532 l_0_6_230)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25579 (* ?x25529 l_0_6_236)))
 (let ((?x25530 (* ?x25529 l_0_6_229)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x25576 (* ?x22730 l_0_6_140)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x25574 (* ?x22727 l_0_6_139)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x22922 (* ?x22921 l_0_6_3)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x22919 (* ?x22918 l_0_6_2)))
 (let ((?x25583 (- (+ (- (+ (- (- (+ ?x22919 ?x22922) ?x25574) ?x25576) ?x25530) ?x25579) ?x25533) ?x25582)))
 (= (+ (+ (- (- ?x25583 ?x22939) ?x22941) ?x25586) ?x25588) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23024 (* ?x22789 l_0_6_62)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23022 (* ?x22786 l_0_6_61)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25617 (* ?x25532 l_0_6_242)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25615 (* ?x25529 l_0_6_241)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23020 (* ?x22479 l_0_6_3)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x23018 (* ?x22476 l_0_6_2)))
 (= (- (- (- (- (+ ?x23018 ?x23020) ?x25615) ?x25617) ?x23022) ?x23024) 0.0))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23096 (* ?x22789 l_0_6_68)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23094 (* ?x22786 l_0_6_67)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23092 (* ?x23091 l_0_6_3)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25633 (* ?x25532 l_0_6_248)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x8042 (* ?x25529 l_0_6_247)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23089 (* ?x22780 l_0_6_22)))
 (= (- (- (+ (- (- ?x23089 ?x8042) ?x25633) ?x23092) ?x23094) ?x23096) 0.0))))))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x25259 (* ?x24691 l_0_6_94)))
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23183 (* ?x22789 l_0_6_75)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23181 (* ?x22786 l_0_6_74)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23179 (* ?x22783 l_0_6_30)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25654 (* ?x25532 l_0_6_255)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25652 (* ?x25529 l_0_6_254)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23177 (* ?x22780 l_0_6_29)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x25235 (* ?x22458 l_0_6_139)))
 (let ((?x25659 (- (- (- (+ (- (- (+ ?x25235 ?x23177) ?x25652) ?x25654) ?x23179) ?x23181) ?x23183) ?x25259)))
 (= ?x25659 0.0)))))))))))))))))))
(assert
 (let ((?x22789 (* 2.0 l_0_6_48)))
 (let ((?x23251 (* ?x22789 l_0_6_83)))
 (let ((?x22786 (* 2.0 l_0_6_47)))
 (let ((?x23249 (* ?x22786 l_0_6_82)))
 (let ((?x22783 (* 2.0 l_0_6_3)))
 (let ((?x23247 (* ?x22783 l_0_6_38)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25679 (* ?x25532 l_0_6_263)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25677 (* ?x25529 l_0_6_262)))
 (let ((?x22780 (* 2.0 l_0_6_2)))
 (let ((?x23245 (* ?x22780 l_0_6_37)))
 (= (- (- (+ (- (- ?x23245 ?x25677) ?x25679) ?x23247) ?x23249) ?x23251) 0.0))))))))))))))
(assert
 (let ((?x23315 (* l_0_6_6 l_0_6_6)))
 (let ((?x23313 (* l_0_6_51 l_0_6_51)))
 (let ((?x23311 (* l_0_6_50 l_0_6_50)))
 (let ((?x23309 (* l_0_6_5 l_0_6_5)))
 (let ((?x23296 (* l_0_6_49 l_0_6_49)))
 (let ((?x23319 (* l_0_6_4 l_0_6_4)))
 (let ((?x25701 (* l_0_6_231 l_0_6_231)))
 (let ((?x25702 (- (- (* (- l_0_6_229) l_0_6_229) (* l_0_6_230 l_0_6_230)) ?x25701)))
 (= (+ (- (- (+ (- (+ ?x25702 ?x23319) ?x23296) ?x23309) ?x23311) ?x23313) ?x23315) 0.0))))))))))
(assert
 (let ((?x23345 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23342 (* ?x23341 l_0_6_54)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23339 (* ?x23338 l_0_6_53)))
 (let ((?x23336 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23333 (* ?x23332 l_0_6_52)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25738 (* ?x25737 l_0_6_234)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25735 (* ?x25734 l_0_6_233)))
 (let ((?x25742 (+ (- (- (* (* (- 2.0) l_0_6_229) l_0_6_232) ?x25735) ?x25738) (* (* 2.0 l_0_6_4) l_0_6_7))))
 (= (+ (- (- (+ (- ?x25742 ?x23333) ?x23336) ?x23339) ?x23342) ?x23345) 0.0)))))))))))))))
(assert
 (let ((?x25786 (* l_0_6_96 l_0_6_96)))
 (let ((?x25784 (* l_0_6_95 l_0_6_95)))
 (let ((?x25782 (* l_0_6_94 l_0_6_94)))
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23386 (* ?x23341 l_0_6_58)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23384 (* ?x23338 l_0_6_57)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23382 (* ?x23332 l_0_6_56)))
 (let ((?x25701 (* l_0_6_231 l_0_6_231)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25776 (* ?x25737 l_0_6_238)))
 (let ((?x25699 (* l_0_6_230 l_0_6_230)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25773 (* ?x25734 l_0_6_237)))
 (let ((?x25711 (* l_0_6_229 l_0_6_229)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25770 (* ?x25769 l_0_6_236)))
 (let ((?x25767 (* l_0_6_141 l_0_6_141)))
 (let ((?x25765 (* l_0_6_140 l_0_6_140)))
 (let ((?x25763 (* l_0_6_139 l_0_6_139)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23380 (* ?x23379 l_0_6_6)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23377 (* ?x22921 l_0_6_5)))
 (let ((?x25766 (- (- (+ (+ (* (* 2.0 l_0_6_11) l_0_6_4) ?x23377) ?x23380) ?x25763) ?x25765)))
 (let ((?x25778 (+ (- (+ (- (+ (- (- ?x25766 ?x25767) ?x25770) ?x25711) ?x25773) ?x25699) ?x25776) ?x25701)))
 (= (+ (+ (+ (- (- (- ?x25778 ?x23382) ?x23384) ?x23386) ?x25782) ?x25784) ?x25786) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23417 (* ?x23341 l_0_6_63)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23415 (* ?x23338 l_0_6_62)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23413 (* ?x23332 l_0_6_61)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25814 (* ?x25737 l_0_6_243)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25812 (* ?x25734 l_0_6_242)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25810 (* ?x25769 l_0_6_241)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23411 (* ?x22482 l_0_6_6)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23403 (* ?x22479 l_0_6_5)))
 (let ((?x25813 (- (- (+ (+ (* (* 2.0 l_0_6_16) l_0_6_4) ?x23403) ?x23411) ?x25810) ?x25812)))
 (= (- (- (- (- ?x25813 ?x25814) ?x23413) ?x23415) ?x23417) 0.0)))))))))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23454 (* ?x23341 l_0_6_69)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23452 (* ?x23338 l_0_6_68)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23450 (* ?x23332 l_0_6_67)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x23448 (* ?x23447 l_0_6_6)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25838 (* ?x25737 l_0_6_249)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25836 (* ?x25734 l_0_6_248)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x23439 (* ?x23091 l_0_6_5)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25833 (* ?x25769 l_0_6_247)))
 (let ((?x25839 (- (- (+ (- (* (* 2.0 l_0_6_22) l_0_6_4) ?x25833) ?x23439) ?x25836) ?x25838)))
 (= (- (- (- (+ ?x25839 ?x23448) ?x23450) ?x23452) ?x23454) 0.0)))))))))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23492 (* ?x23341 l_0_6_76)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23490 (* ?x23338 l_0_6_75)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23488 (* ?x23332 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23486 (* ?x23485 l_0_6_6)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23477 (* ?x23476 l_0_6_5)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25863 (* ?x25737 l_0_6_256)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25861 (* ?x25734 l_0_6_255)))
 (let ((?x25866 (+ (- (- (* (* (- 2.0) l_0_6_229) l_0_6_254) ?x25861) ?x25863) (* (* 2.0 l_0_6_29) l_0_6_4))))
 (= (- (- (- (+ (+ ?x25866 ?x23477) ?x23486) ?x23488) ?x23490) ?x23492) 0.0)))))))))))))))))
(assert
 (let ((?x23341 (* 2.0 l_0_6_51)))
 (let ((?x23530 (* ?x23341 l_0_6_84)))
 (let ((?x23338 (* 2.0 l_0_6_50)))
 (let ((?x23528 (* ?x23338 l_0_6_83)))
 (let ((?x23332 (* 2.0 l_0_6_49)))
 (let ((?x23526 (* ?x23332 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23524 (* ?x23523 l_0_6_6)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23515 (* ?x23514 l_0_6_5)))
 (let ((?x23770 (* 2.0 l_0_6_37)))
 (let ((?x24783 (* ?x23770 l_0_6_4)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25889 (* ?x25737 l_0_6_264)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25887 (* ?x25734 l_0_6_263)))
 (let ((?x25892 (+ (+ (- (- (* (* (- 2.0) l_0_6_229) l_0_6_262) ?x25887) ?x25889) ?x24783) ?x23515)))
 (= (- (- (- (+ ?x25892 ?x23524) ?x23526) ?x23528) ?x23530) 0.0)))))))))))))))))))
(assert
 (let ((?x23570 (* l_0_6_9 l_0_6_9)))
 (let ((?x23568 (* l_0_6_8 l_0_6_8)))
 (let ((?x23566 (* l_0_6_7 l_0_6_7)))
 (let ((?x23564 (* l_0_6_55 l_0_6_55)))
 (let ((?x23562 (* l_0_6_54 l_0_6_54)))
 (let ((?x23560 (* l_0_6_53 l_0_6_53)))
 (let ((?x23552 (* l_0_6_52 l_0_6_52)))
 (let ((?x25923 (* l_0_6_235 l_0_6_235)))
 (let ((?x25921 (* l_0_6_234 l_0_6_234)))
 (let ((?x25919 (* l_0_6_233 l_0_6_233)))
 (let ((?x25922 (- (- (- (* l_0_6_10 l_0_6_10) (* l_0_6_232 l_0_6_232)) ?x25919) ?x25921)))
 (let ((?x25930 (+ (+ (- (- (- (- (- ?x25922 ?x25923) ?x23552) ?x23560) ?x23562) ?x23564) ?x23566) ?x23568)))
 (= (+ ?x25930 ?x23570) 0.0))))))))))))))
(assert
 (let ((?x24797 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x24794 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x24791 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23605 (* ?x23604 l_0_6_59)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23602 (* ?x23601 l_0_6_58)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23599 (* ?x23598 l_0_6_57)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23596 (* ?x23595 l_0_6_56)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x25965 (* ?x24620 l_0_6_239)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x25963 (* ?x24617 l_0_6_238)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x25961 (* ?x24614 l_0_6_237)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x25959 (* ?x24611 l_0_6_236)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25738 (* ?x25737 l_0_6_234)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25735 (* ?x25734 l_0_6_233)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x24781 (* ?x22777 l_0_6_144)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x7037 (* ?x22774 l_0_6_143)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x7040 (* ?x22771 l_0_6_142)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23593 (* ?x23379 l_0_6_9)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23591 (* ?x22921 l_0_6_8)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x23589 (* ?x22918 l_0_6_7)))
 (let ((?x25952 (- (+ (+ (+ (* (* 2.0 l_0_6_10) l_0_6_14) ?x23589) ?x23591) ?x23593) ?x7040)))
 (let ((?x25957 (+ (+ (- (- ?x25952 ?x7037) ?x24781) (* (* 2.0 l_0_6_229) l_0_6_232)) ?x25735)))
 (let ((?x25968 (- (- (- (- (- (- (+ ?x25957 ?x25738) ?x25959) ?x25961) ?x25963) ?x25965) ?x23596) ?x23599)))
 (= (+ (+ (+ (- (- ?x25968 ?x23602) ?x23605) ?x24791) ?x24794) ?x24797) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23644 (* ?x23604 l_0_6_64)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23642 (* ?x23601 l_0_6_63)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23640 (* ?x23598 l_0_6_62)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23638 (* ?x23595 l_0_6_61)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x25995 (* ?x24620 l_0_6_244)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x25993 (* ?x24617 l_0_6_243)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x25991 (* ?x24614 l_0_6_242)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x25989 (* ?x24611 l_0_6_241)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x23636 (* ?x22482 l_0_6_9)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x23627 (* ?x22479 l_0_6_8)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x23623 (* ?x22476 l_0_6_7)))
 (let ((?x25990 (- (+ (+ (+ (* (* 2.0 l_0_6_10) l_0_6_19) ?x23623) ?x23627) ?x23636) ?x25989)))
 (let ((?x26000 (- (- (- (- (- (- (- ?x25990 ?x25991) ?x25993) ?x25995) ?x23638) ?x23640) ?x23642) ?x23644)))
 (= ?x26000 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23744 (* ?x23604 l_0_6_77)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23742 (* ?x23601 l_0_6_76)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23740 (* ?x23598 l_0_6_75)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23738 (* ?x23595 l_0_6_74)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x23736 (* ?x23485 l_0_6_9)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x23734 (* ?x23476 l_0_6_8)))
 (let ((?x23731 (* 2.0 l_0_6_29)))
 (let ((?x23732 (* ?x23731 l_0_6_7)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x26045 (* ?x24620 l_0_6_257)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x26043 (* ?x24617 l_0_6_256)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x26041 (* ?x24614 l_0_6_255)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x26039 (* ?x24611 l_0_6_254)))
 (let ((?x26046 (- (- (- (- (* (* 2.0 l_0_6_10) l_0_6_32) ?x26039) ?x26041) ?x26043) ?x26045)))
 (let ((?x26053 (- (- (- (- (+ (+ (+ ?x26046 ?x23732) ?x23734) ?x23736) ?x23738) ?x23740) ?x23742) ?x23744)))
 (= ?x26053 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23604 (* 2.0 l_0_6_55)))
 (let ((?x23792 (* ?x23604 l_0_6_85)))
 (let ((?x23601 (* 2.0 l_0_6_54)))
 (let ((?x23790 (* ?x23601 l_0_6_84)))
 (let ((?x23598 (* 2.0 l_0_6_53)))
 (let ((?x23788 (* ?x23598 l_0_6_83)))
 (let ((?x23595 (* 2.0 l_0_6_52)))
 (let ((?x23786 (* ?x23595 l_0_6_82)))
 (let ((?x23523 (* 2.0 l_0_6_39)))
 (let ((?x23784 (* ?x23523 l_0_6_9)))
 (let ((?x23514 (* 2.0 l_0_6_38)))
 (let ((?x23775 (* ?x23514 l_0_6_8)))
 (let ((?x23770 (* 2.0 l_0_6_37)))
 (let ((?x23772 (* ?x23770 l_0_6_7)))
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x26103 (* ?x24620 l_0_6_265)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x26101 (* ?x24617 l_0_6_264)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x26099 (* ?x24614 l_0_6_263)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x26097 (* ?x24611 l_0_6_262)))
 (let ((?x26104 (- (- (- (- (* (* 2.0 l_0_6_10) l_0_6_40) ?x26097) ?x26099) ?x26101) ?x26103)))
 (let ((?x26111 (- (- (- (- (+ (+ (+ ?x26104 ?x23772) ?x23775) ?x23784) ?x23786) ?x23788) ?x23790) ?x23792)))
 (= ?x26111 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23834 (* l_0_6_60 l_0_6_60)))
 (let ((?x23832 (* l_0_6_59 l_0_6_59)))
 (let ((?x23830 (* l_0_6_58 l_0_6_58)))
 (let ((?x23828 (* l_0_6_57 l_0_6_57)))
 (let ((?x23826 (* l_0_6_56 l_0_6_56)))
 (let ((?x26175 (* l_0_6_240 l_0_6_240)))
 (let ((?x26173 (* l_0_6_239 l_0_6_239)))
 (let ((?x26171 (* l_0_6_238 l_0_6_238)))
 (let ((?x26169 (* l_0_6_237 l_0_6_237)))
 (let ((?x26167 (* l_0_6_236 l_0_6_236)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25776 (* ?x25737 l_0_6_238)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25773 (* ?x25734 l_0_6_237)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25770 (* ?x25769 l_0_6_236)))
 (let ((?x23824 (* l_0_6_15 l_0_6_15)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26161 (* ?x22777 l_0_6_148)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26159 (* ?x22774 l_0_6_147)))
 (let ((?x23822 (* l_0_6_14 l_0_6_14)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26156 (* ?x22771 l_0_6_146)))
 (let ((?x23813 (* l_0_6_13 l_0_6_13)))
 (let ((?x23810 (* l_0_6_12 l_0_6_12)))
 (let ((?x23838 (* l_0_6_11 l_0_6_11)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x26151 (* ?x22909 l_0_6_96)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x26149 (* ?x22897 l_0_6_95)))
 (let ((?x26154 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_94) ?x26149) ?x26151) ?x23838) ?x23810)))
 (let ((?x26164 (+ (+ (- (- (+ (- (+ ?x26154 ?x23813) ?x26156) ?x23822) ?x26159) ?x26161) ?x23824) ?x25770)))
 (let ((?x26176 (- (- (- (- (- (+ (+ ?x26164 ?x25773) ?x25776) ?x26167) ?x26169) ?x26171) ?x26173) ?x26175)))
 (= (- (- (- (- (- ?x26176 ?x23826) ?x23828) ?x23830) ?x23832) ?x23834) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23878 (* ?x23877 l_0_6_65)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23875 (* ?x23874 l_0_6_64)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23872 (* ?x23871 l_0_6_63)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23869 (* ?x23868 l_0_6_62)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23866 (* ?x23865 l_0_6_61)))
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26264 (* ?x26263 l_0_6_245)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26261 (* ?x26260 l_0_6_244)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26258 (* ?x26257 l_0_6_243)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26255 (* ?x26254 l_0_6_242)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26252 (* ?x26251 l_0_6_241)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25814 (* ?x25737 l_0_6_243)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25812 (* ?x25734 l_0_6_242)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25810 (* ?x25769 l_0_6_241)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23863 (* ?x23862 l_0_6_20)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x22778 (* ?x22777 l_0_6_153)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x22775 (* ?x22774 l_0_6_152)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23860 (* ?x23859 l_0_6_19)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x22772 (* ?x22771 l_0_6_151)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23857 (* ?x23379 l_0_6_18)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23855 (* ?x22921 l_0_6_17)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22769 (* ?x22608 l_0_6_96)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22767 (* ?x22605 l_0_6_95)))
 (let ((?x26240 (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_94) ?x22767) ?x22769) (* (* 2.0 l_0_6_11) l_0_6_16))))
 (let ((?x26247 (+ (- (- (+ (- (+ (+ ?x26240 ?x23855) ?x23857) ?x22772) ?x23860) ?x22775) ?x22778) ?x23863)))
 (let ((?x26262 (- (- (- (- (+ (+ (+ ?x26247 ?x25810) ?x25812) ?x25814) ?x26252) ?x26255) ?x26258) ?x26261)))
 (= (- (- (- (- (- (- ?x26262 ?x26264) ?x23866) ?x23869) ?x23872) ?x23875) ?x23878) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23930 (* ?x23877 l_0_6_71)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23928 (* ?x23874 l_0_6_70)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23926 (* ?x23871 l_0_6_69)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23924 (* ?x23868 l_0_6_68)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23922 (* ?x23865 l_0_6_67)))
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26331 (* ?x26263 l_0_6_251)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26329 (* ?x26260 l_0_6_250)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26327 (* ?x26257 l_0_6_249)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26325 (* ?x26254 l_0_6_248)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26323 (* ?x26251 l_0_6_247)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25838 (* ?x25737 l_0_6_249)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25836 (* ?x25734 l_0_6_248)))
 (let ((?x25769 (* 2.0 l_0_6_229)))
 (let ((?x25833 (* ?x25769 l_0_6_247)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23920 (* ?x23862 l_0_6_26)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26317 (* ?x22777 l_0_6_159)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26315 (* ?x22774 l_0_6_158)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23910 (* ?x23859 l_0_6_25)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26312 (* ?x22771 l_0_6_157)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23907 (* ?x23379 l_0_6_24)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23903 (* ?x22921 l_0_6_23)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x26308 (* ?x24653 l_0_6_96)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x9496 (* ?x24650 l_0_6_95)))
 (let ((?x9505 (+ (* (* 2.0 l_0_6_11) l_0_6_22) (* (* 2.0 l_0_6_112) l_0_6_94))))
 (let ((?x26316 (- (+ (- (+ (+ (+ (+ ?x9505 ?x9496) ?x26308) ?x23903) ?x23907) ?x26312) ?x23910) ?x26315)))
 (let ((?x26326 (- (- (+ (+ (+ (+ (- ?x26316 ?x26317) ?x23920) ?x25833) ?x25836) ?x25838) ?x26323) ?x26325)))
 (let ((?x26336 (- (- (- (- (- (- (- ?x26326 ?x26327) ?x26329) ?x26331) ?x23922) ?x23924) ?x23926) ?x23928)))
 (= (- ?x26336 ?x23930) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x23970 (* ?x23877 l_0_6_78)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x23968 (* ?x23874 l_0_6_77)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x23966 (* ?x23871 l_0_6_76)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x23964 (* ?x23868 l_0_6_75)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x23962 (* ?x23865 l_0_6_74)))
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26362 (* ?x26263 l_0_6_258)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26360 (* ?x26260 l_0_6_257)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26358 (* ?x26257 l_0_6_256)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26356 (* ?x26254 l_0_6_255)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26354 (* ?x26251 l_0_6_254)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25863 (* ?x25737 l_0_6_256)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25861 (* ?x25734 l_0_6_255)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x23960 (* ?x23862 l_0_6_33)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x6520 (* ?x22777 l_0_6_166)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x9665 (* ?x22774 l_0_6_165)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23950 (* ?x23859 l_0_6_32)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x9667 (* ?x22771 l_0_6_164)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x6062 (* ?x23379 l_0_6_31)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x9649 (* ?x24985 l_0_6_96)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x9704 (* ?x7258 l_0_6_95)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x6056 (* ?x22921 l_0_6_30)))
 (let ((?x9777 (+ (* (* 2.0 l_0_6_11) l_0_6_29) (* (* 2.0 l_0_6_119) l_0_6_94))))
 (let ((?x9666 (- (+ (- (+ (+ (+ (+ ?x9777 ?x6056) ?x9704) ?x9649) ?x6062) ?x9667) ?x23950) ?x9665)))
 (let ((?x26352 (+ (+ (+ (- ?x9666 ?x6520) ?x23960) (* (* 2.0 l_0_6_229) l_0_6_254)) ?x25861)))
 (let ((?x26364 (- (- (- (- (- (- (+ ?x26352 ?x25863) ?x26354) ?x26356) ?x26358) ?x26360) ?x26362) ?x23962)))
 (= (- (- (- (- ?x26364 ?x23964) ?x23966) ?x23968) ?x23970) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23877 (* 2.0 l_0_6_60)))
 (let ((?x24016 (* ?x23877 l_0_6_86)))
 (let ((?x23874 (* 2.0 l_0_6_59)))
 (let ((?x24014 (* ?x23874 l_0_6_85)))
 (let ((?x23871 (* 2.0 l_0_6_58)))
 (let ((?x24012 (* ?x23871 l_0_6_84)))
 (let ((?x23868 (* 2.0 l_0_6_57)))
 (let ((?x24010 (* ?x23868 l_0_6_83)))
 (let ((?x23865 (* 2.0 l_0_6_56)))
 (let ((?x24008 (* ?x23865 l_0_6_82)))
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26422 (* ?x26263 l_0_6_266)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26420 (* ?x26260 l_0_6_265)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26418 (* ?x26257 l_0_6_264)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26416 (* ?x26254 l_0_6_263)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26414 (* ?x26251 l_0_6_262)))
 (let ((?x25737 (* 2.0 l_0_6_231)))
 (let ((?x25889 (* ?x25737 l_0_6_264)))
 (let ((?x25734 (* 2.0 l_0_6_230)))
 (let ((?x25887 (* ?x25734 l_0_6_263)))
 (let ((?x23862 (* 2.0 l_0_6_15)))
 (let ((?x24006 (* ?x23862 l_0_6_41)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26407 (* ?x22777 l_0_6_174)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26405 (* ?x22774 l_0_6_173)))
 (let ((?x23859 (* 2.0 l_0_6_14)))
 (let ((?x23996 (* ?x23859 l_0_6_40)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26402 (* ?x22771 l_0_6_172)))
 (let ((?x23379 (* 2.0 l_0_6_13)))
 (let ((?x23993 (* ?x23379 l_0_6_39)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x26399 (* ?x25048 l_0_6_96)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x9907 (* ?x25045 l_0_6_95)))
 (let ((?x22921 (* 2.0 l_0_6_12)))
 (let ((?x23989 (* ?x22921 l_0_6_38)))
 (let ((?x22918 (* 2.0 l_0_6_11)))
 (let ((?x24890 (* ?x22918 l_0_6_37)))
 (let ((?x26400 (+ (+ (+ (+ ?x24890 ?x23989) (* (* 2.0 l_0_6_127) l_0_6_94)) ?x9907) ?x26399)))
 (let ((?x26411 (+ (+ (- (- (+ (- (+ ?x26400 ?x23993) ?x26402) ?x23996) ?x26405) ?x26407) ?x24006) (* (* 2.0 l_0_6_229) l_0_6_262))))
 (let ((?x26423 (- (- (- (- (- (+ (+ ?x26411 ?x25887) ?x25889) ?x26414) ?x26416) ?x26418) ?x26420) ?x26422)))
 (= (- (- (- (- (- ?x26423 ?x24008) ?x24010) ?x24012) ?x24014) ?x24016) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24070 (* l_0_6_66 l_0_6_66)))
 (let ((?x24068 (* l_0_6_65 l_0_6_65)))
 (let ((?x24066 (* l_0_6_64 l_0_6_64)))
 (let ((?x24064 (* l_0_6_63 l_0_6_63)))
 (let ((?x24062 (* l_0_6_62 l_0_6_62)))
 (let ((?x24060 (* l_0_6_61 l_0_6_61)))
 (let ((?x26476 (* l_0_6_246 l_0_6_246)))
 (let ((?x26474 (* l_0_6_245 l_0_6_245)))
 (let ((?x26472 (* l_0_6_244 l_0_6_244)))
 (let ((?x26470 (* l_0_6_243 l_0_6_243)))
 (let ((?x26468 (* l_0_6_242 l_0_6_242)))
 (let ((?x26466 (* l_0_6_241 l_0_6_241)))
 (let ((?x24058 (* l_0_6_21 l_0_6_21)))
 (let ((?x24056 (* l_0_6_20 l_0_6_20)))
 (let ((?x24054 (* l_0_6_19 l_0_6_19)))
 (let ((?x24044 (* l_0_6_18 l_0_6_18)))
 (let ((?x26463 (+ (+ (+ (* l_0_6_16 l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x24044) ?x24054)))
 (let ((?x26475 (- (- (- (- (- (+ (+ ?x26463 ?x24056) ?x24058) ?x26466) ?x26468) ?x26470) ?x26472) ?x26474)))
 (let ((?x26483 (- (- (- (- (- (- (- ?x26475 ?x26476) ?x24060) ?x24062) ?x24064) ?x24066) ?x24068) ?x24070)))
 (= ?x26483 0.0)))))))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24111 (* ?x22529 l_0_6_72)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24109 (* ?x22526 l_0_6_71)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24107 (* ?x22523 l_0_6_70)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24105 (* ?x22520 l_0_6_69)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24103 (* ?x22517 l_0_6_68)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24101 (* ?x22514 l_0_6_67)))
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x26517 (* ?x22509 l_0_6_252)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x26515 (* ?x22506 l_0_6_251)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x26513 (* ?x22503 l_0_6_250)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x26511 (* ?x22500 l_0_6_249)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x26509 (* ?x22497 l_0_6_248)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x26507 (* ?x22494 l_0_6_247)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24099 (* ?x22491 l_0_6_27)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24097 (* ?x22488 l_0_6_26)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24095 (* ?x22485 l_0_6_25)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24093 (* ?x22482 l_0_6_24)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24091 (* ?x22479 l_0_6_23)))
 (let ((?x26505 (+ (+ (+ (+ (* (* 2.0 l_0_6_16) l_0_6_22) ?x24091) ?x24093) ?x24095) ?x24097)))
 (let ((?x26518 (- (- (- (- (- (- (+ ?x26505 ?x24099) ?x26507) ?x26509) ?x26511) ?x26513) ?x26515) ?x26517)))
 (= (- (- (- (- (- (- ?x26518 ?x24101) ?x24103) ?x24105) ?x24107) ?x24109) ?x24111) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22529 (* 2.0 l_0_6_66)))
 (let ((?x24174 (* ?x22529 l_0_6_87)))
 (let ((?x22526 (* 2.0 l_0_6_65)))
 (let ((?x24172 (* ?x22526 l_0_6_86)))
 (let ((?x22523 (* 2.0 l_0_6_64)))
 (let ((?x24170 (* ?x22523 l_0_6_85)))
 (let ((?x22520 (* 2.0 l_0_6_63)))
 (let ((?x24168 (* ?x22520 l_0_6_84)))
 (let ((?x22517 (* 2.0 l_0_6_62)))
 (let ((?x24166 (* ?x22517 l_0_6_83)))
 (let ((?x22514 (* 2.0 l_0_6_61)))
 (let ((?x24164 (* ?x22514 l_0_6_82)))
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x26561 (* ?x22509 l_0_6_267)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x26559 (* ?x22506 l_0_6_266)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x26557 (* ?x22503 l_0_6_265)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x26555 (* ?x22500 l_0_6_264)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x26553 (* ?x22497 l_0_6_263)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x26551 (* ?x22494 l_0_6_262)))
 (let ((?x22491 (* 2.0 l_0_6_21)))
 (let ((?x24162 (* ?x22491 l_0_6_42)))
 (let ((?x22488 (* 2.0 l_0_6_20)))
 (let ((?x24160 (* ?x22488 l_0_6_41)))
 (let ((?x22485 (* 2.0 l_0_6_19)))
 (let ((?x24158 (* ?x22485 l_0_6_40)))
 (let ((?x22482 (* 2.0 l_0_6_18)))
 (let ((?x24156 (* ?x22482 l_0_6_39)))
 (let ((?x22479 (* 2.0 l_0_6_17)))
 (let ((?x24154 (* ?x22479 l_0_6_38)))
 (let ((?x22476 (* 2.0 l_0_6_16)))
 (let ((?x7194 (* ?x22476 l_0_6_37)))
 (let ((?x26554 (- (- (+ (+ (+ (+ (+ ?x7194 ?x24154) ?x24156) ?x24158) ?x24160) ?x24162) ?x26551) ?x26553)))
 (let ((?x26565 (- (- (- (- (- (- (- ?x26554 ?x26555) ?x26557) ?x26559) ?x26561) ?x24164) ?x24166) ?x24168)))
 (= (- (- (- ?x26565 ?x24170) ?x24172) ?x24174) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24241 (* l_0_6_73 l_0_6_73)))
 (let ((?x24239 (* l_0_6_72 l_0_6_72)))
 (let ((?x24237 (* l_0_6_71 l_0_6_71)))
 (let ((?x24235 (* l_0_6_70 l_0_6_70)))
 (let ((?x24233 (* l_0_6_69 l_0_6_69)))
 (let ((?x24231 (* l_0_6_68 l_0_6_68)))
 (let ((?x24229 (* l_0_6_67 l_0_6_67)))
 (let ((?x24227 (* l_0_6_28 l_0_6_28)))
 (let ((?x24225 (* l_0_6_27 l_0_6_27)))
 (let ((?x24223 (* l_0_6_26 l_0_6_26)))
 (let ((?x26617 (* l_0_6_253 l_0_6_253)))
 (let ((?x26615 (* l_0_6_252 l_0_6_252)))
 (let ((?x26613 (* l_0_6_251 l_0_6_251)))
 (let ((?x26611 (* l_0_6_250 l_0_6_250)))
 (let ((?x24212 (* l_0_6_25 l_0_6_25)))
 (let ((?x26608 (* l_0_6_249 l_0_6_249)))
 (let ((?x26606 (* l_0_6_248 l_0_6_248)))
 (let ((?x26604 (* l_0_6_247 l_0_6_247)))
 (let ((?x24209 (* l_0_6_24 l_0_6_24)))
 (let ((?x26605 (- (+ (+ (* l_0_6_22 l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24209) ?x26604)))
 (let ((?x26618 (- (- (- (- (+ (- (- ?x26605 ?x26606) ?x26608) ?x24212) ?x26611) ?x26613) ?x26615) ?x26617)))
 (let ((?x26625 (- (- (- (- (+ (+ (+ ?x26618 ?x24223) ?x24225) ?x24227) ?x24229) ?x24231) ?x24233) ?x24235)))
 (= (- (- (- ?x26625 ?x24237) ?x24239) ?x24241) 0.0))))))))))))))))))))))))
(assert
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24310 (* ?x24309 l_0_6_80)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24307 (* ?x24306 l_0_6_79)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24304 (* ?x24303 l_0_6_78)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24301 (* ?x24300 l_0_6_77)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24298 (* ?x24297 l_0_6_76)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24295 (* ?x24294 l_0_6_75)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24292 (* ?x24291 l_0_6_74)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24289 (* ?x24288 l_0_6_35)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24286 (* ?x24285 l_0_6_34)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24283 (* ?x24282 l_0_6_33)))
 (let ((?x26675 (* 2.0 l_0_6_253)))
 (let ((?x26676 (* ?x26675 l_0_6_260)))
 (let ((?x26672 (* 2.0 l_0_6_252)))
 (let ((?x26673 (* ?x26672 l_0_6_259)))
 (let ((?x26669 (* 2.0 l_0_6_251)))
 (let ((?x26670 (* ?x26669 l_0_6_258)))
 (let ((?x26666 (* 2.0 l_0_6_250)))
 (let ((?x26667 (* ?x26666 l_0_6_257)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24280 (* ?x24279 l_0_6_32)))
 (let ((?x26662 (* 2.0 l_0_6_249)))
 (let ((?x26663 (* ?x26662 l_0_6_256)))
 (let ((?x26659 (* 2.0 l_0_6_248)))
 (let ((?x26660 (* ?x26659 l_0_6_255)))
 (let ((?x26656 (* 2.0 l_0_6_247)))
 (let ((?x26657 (* ?x26656 l_0_6_254)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24277 (* ?x23447 l_0_6_31)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x24275 (* ?x23091 l_0_6_30)))
 (let ((?x26661 (- (- (+ (+ (* (* 2.0 l_0_6_22) l_0_6_29) ?x24275) ?x24277) ?x26657) ?x26660)))
 (let ((?x26678 (+ (- (- (- (- (+ (- ?x26661 ?x26663) ?x24280) ?x26667) ?x26670) ?x26673) ?x26676) ?x24283)))
 (let ((?x26685 (- (- (- (- (- (+ (+ ?x26678 ?x24286) ?x24289) ?x24292) ?x24295) ?x24298) ?x24301) ?x24304)))
 (= (- (- ?x26685 ?x24307) ?x24310) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x25259 (* ?x24691 l_0_6_94)))
 (let ((?x24309 (* 2.0 l_0_6_73)))
 (let ((?x24368 (* ?x24309 l_0_6_88)))
 (let ((?x24306 (* 2.0 l_0_6_72)))
 (let ((?x24366 (* ?x24306 l_0_6_87)))
 (let ((?x24303 (* 2.0 l_0_6_71)))
 (let ((?x24364 (* ?x24303 l_0_6_86)))
 (let ((?x24300 (* 2.0 l_0_6_70)))
 (let ((?x24362 (* ?x24300 l_0_6_85)))
 (let ((?x24297 (* 2.0 l_0_6_69)))
 (let ((?x24360 (* ?x24297 l_0_6_84)))
 (let ((?x24294 (* 2.0 l_0_6_68)))
 (let ((?x24358 (* ?x24294 l_0_6_83)))
 (let ((?x24291 (* 2.0 l_0_6_67)))
 (let ((?x24356 (* ?x24291 l_0_6_82)))
 (let ((?x24288 (* 2.0 l_0_6_28)))
 (let ((?x24354 (* ?x24288 l_0_6_43)))
 (let ((?x24285 (* 2.0 l_0_6_27)))
 (let ((?x24352 (* ?x24285 l_0_6_42)))
 (let ((?x24282 (* 2.0 l_0_6_26)))
 (let ((?x24350 (* ?x24282 l_0_6_41)))
 (let ((?x26675 (* 2.0 l_0_6_253)))
 (let ((?x26734 (* ?x26675 l_0_6_268)))
 (let ((?x26672 (* 2.0 l_0_6_252)))
 (let ((?x26732 (* ?x26672 l_0_6_267)))
 (let ((?x26669 (* 2.0 l_0_6_251)))
 (let ((?x26730 (* ?x26669 l_0_6_266)))
 (let ((?x26666 (* 2.0 l_0_6_250)))
 (let ((?x26728 (* ?x26666 l_0_6_265)))
 (let ((?x24279 (* 2.0 l_0_6_25)))
 (let ((?x24338 (* ?x24279 l_0_6_40)))
 (let ((?x26662 (* 2.0 l_0_6_249)))
 (let ((?x26725 (* ?x26662 l_0_6_264)))
 (let ((?x26659 (* 2.0 l_0_6_248)))
 (let ((?x26723 (* ?x26659 l_0_6_263)))
 (let ((?x26656 (* 2.0 l_0_6_247)))
 (let ((?x26721 (* ?x26656 l_0_6_262)))
 (let ((?x23447 (* 2.0 l_0_6_24)))
 (let ((?x24334 (* ?x23447 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_23)))
 (let ((?x6433 (* ?x23091 l_0_6_38)))
 (let ((?x23685 (* 2.0 l_0_6_22)))
 (let ((?x6434 (* ?x23685 l_0_6_37)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x25235 (* ?x22458 l_0_6_139)))
 (let ((?x26727 (+ (- (- (- (+ (+ (+ ?x25235 ?x6434) ?x6433) ?x24334) ?x26721) ?x26723) ?x26725) ?x24338)))
 (let ((?x26738 (+ (+ (+ (- (- (- (- ?x26727 ?x26728) ?x26730) ?x26732) ?x26734) ?x24350) ?x24352) ?x24354)))
 (let ((?x26745 (- (- (- (- (- (- (- ?x26738 ?x24356) ?x24358) ?x24360) ?x24362) ?x24364) ?x24366) ?x24368)))
 (= (- ?x26745 ?x25259) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24438 (* l_0_6_81 l_0_6_81)))
 (let ((?x24436 (* l_0_6_80 l_0_6_80)))
 (let ((?x24434 (* l_0_6_79 l_0_6_79)))
 (let ((?x24432 (* l_0_6_78 l_0_6_78)))
 (let ((?x24430 (* l_0_6_77 l_0_6_77)))
 (let ((?x24428 (* l_0_6_76 l_0_6_76)))
 (let ((?x24426 (* l_0_6_75 l_0_6_75)))
 (let ((?x24424 (* l_0_6_74 l_0_6_74)))
 (let ((?x24422 (* l_0_6_36 l_0_6_36)))
 (let ((?x24420 (* l_0_6_35 l_0_6_35)))
 (let ((?x24418 (* l_0_6_34 l_0_6_34)))
 (let ((?x24416 (* l_0_6_33 l_0_6_33)))
 (let ((?x24414 (* l_0_6_32 l_0_6_32)))
 (let ((?x24412 (* l_0_6_31 l_0_6_31)))
 (let ((?x24410 (* l_0_6_30 l_0_6_30)))
 (let ((?x6507 (* l_0_6_29 l_0_6_29)))
 (let ((?x26797 (* l_0_6_261 l_0_6_261)))
 (let ((?x26795 (* l_0_6_260 l_0_6_260)))
 (let ((?x26793 (* l_0_6_259 l_0_6_259)))
 (let ((?x26791 (* l_0_6_258 l_0_6_258)))
 (let ((?x26789 (* l_0_6_257 l_0_6_257)))
 (let ((?x26787 (* l_0_6_256 l_0_6_256)))
 (let ((?x26788 (- (- (* (- l_0_6_254) l_0_6_254) (* l_0_6_255 l_0_6_255)) ?x26787)))
 (let ((?x26800 (+ (+ (- (- (- (- (- ?x26788 ?x26789) ?x26791) ?x26793) ?x26795) ?x26797) ?x6507) ?x24410)))
 (let ((?x26807 (- (+ (+ (+ (+ (+ (+ ?x26800 ?x24412) ?x24414) ?x24416) ?x24418) ?x24420) ?x24422) ?x24424)))
 (let ((?x26814 (- (- (- (- (- (- (- ?x26807 ?x24426) ?x24428) ?x24430) ?x24432) ?x24434) ?x24436) ?x24438)))
 (= ?x26814 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x24501 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24498 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24495 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24492 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24489 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24486 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24483 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24480 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24477 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24474 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24471 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24468 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24465 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23485 (* 2.0 l_0_6_31)))
 (let ((?x24462 (* ?x23485 l_0_6_39)))
 (let ((?x23476 (* 2.0 l_0_6_30)))
 (let ((?x24460 (* ?x23476 l_0_6_38)))
 (let ((?x23731 (* 2.0 l_0_6_29)))
 (let ((?x24996 (* ?x23731 l_0_6_37)))
 (let ((?x26869 (* (* 2.0 l_0_6_261) l_0_6_269)))
 (let ((?x26866 (* (* 2.0 l_0_6_260) l_0_6_268)))
 (let ((?x26863 (* (* 2.0 l_0_6_259) l_0_6_267)))
 (let ((?x26860 (* (* 2.0 l_0_6_258) l_0_6_266)))
 (let ((?x26857 (* (* 2.0 l_0_6_257) l_0_6_265)))
 (let ((?x26854 (* (* 2.0 l_0_6_256) l_0_6_264)))
 (let ((?x26851 (* (* 2.0 l_0_6_255) l_0_6_263)))
 (let ((?x26861 (- (- (- (- (* (* (- 2.0) l_0_6_254) l_0_6_262) ?x26851) ?x26854) ?x26857) ?x26860)))
 (let ((?x26874 (+ (+ (+ (+ (- (- (- ?x26861 ?x26863) ?x26866) ?x26869) ?x24996) ?x24460) ?x24462) ?x24465)))
 (let ((?x26881 (- (- (- (+ (+ (+ (+ ?x26874 ?x24468) ?x24471) ?x24474) ?x24477) ?x24480) ?x24483) ?x24486)))
 (= (- (- (- (- (- ?x26881 ?x24489) ?x24492) ?x24495) ?x24498) ?x24501) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x24581 (* l_0_6_90 l_0_6_90)))
 (let ((?x24579 (* l_0_6_89 l_0_6_89)))
 (let ((?x24577 (* l_0_6_88 l_0_6_88)))
 (let ((?x24575 (* l_0_6_87 l_0_6_87)))
 (let ((?x24573 (* l_0_6_86 l_0_6_86)))
 (let ((?x24571 (* l_0_6_85 l_0_6_85)))
 (let ((?x24569 (* l_0_6_84 l_0_6_84)))
 (let ((?x24567 (* l_0_6_83 l_0_6_83)))
 (let ((?x24565 (* l_0_6_82 l_0_6_82)))
 (let ((?x24563 (* l_0_6_45 l_0_6_45)))
 (let ((?x24561 (* l_0_6_44 l_0_6_44)))
 (let ((?x24559 (* l_0_6_43 l_0_6_43)))
 (let ((?x24557 (* l_0_6_42 l_0_6_42)))
 (let ((?x24544 (* l_0_6_41 l_0_6_41)))
 (let ((?x24541 (* l_0_6_40 l_0_6_40)))
 (let ((?x24537 (* l_0_6_39 l_0_6_39)))
 (let ((?x24533 (* l_0_6_38 l_0_6_38)))
 (let ((?x24585 (* l_0_6_37 l_0_6_37)))
 (let ((?x26944 (* l_0_6_270 l_0_6_270)))
 (let ((?x26942 (* l_0_6_269 l_0_6_269)))
 (let ((?x26940 (* l_0_6_268 l_0_6_268)))
 (let ((?x26938 (* l_0_6_267 l_0_6_267)))
 (let ((?x26936 (* l_0_6_266 l_0_6_266)))
 (let ((?x26934 (* l_0_6_265 l_0_6_265)))
 (let ((?x26932 (* l_0_6_264 l_0_6_264)))
 (let ((?x26933 (- (- (* (- l_0_6_262) l_0_6_262) (* l_0_6_263 l_0_6_263)) ?x26932)))
 (let ((?x26946 (+ (- (- (- (- (- (- ?x26933 ?x26934) ?x26936) ?x26938) ?x26940) ?x26942) ?x26944) ?x24585)))
 (let ((?x26953 (+ (+ (+ (+ (+ (+ (+ ?x26946 ?x24533) ?x24537) ?x24541) ?x24544) ?x24557) ?x24559) ?x24561)))
 (let ((?x26960 (- (- (- (- (- (- (+ ?x26953 ?x24563) ?x24565) ?x24567) ?x24569) ?x24571) ?x24573) ?x24575)))
 (= (- (- (- ?x26960 ?x24577) ?x24579) ?x24581) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x26993 (* ?x24691 l_0_6_92)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_137) ?x26993) 0.0))))
(assert
 (let ((?x26675 (* 2.0 l_0_6_253)))
 (let ((?x26734 (* ?x26675 l_0_6_268)))
 (let ((?x26672 (* 2.0 l_0_6_252)))
 (let ((?x26732 (* ?x26672 l_0_6_267)))
 (let ((?x26669 (* 2.0 l_0_6_251)))
 (let ((?x26730 (* ?x26669 l_0_6_266)))
 (let ((?x26666 (* 2.0 l_0_6_250)))
 (let ((?x26728 (* ?x26666 l_0_6_265)))
 (let ((?x26662 (* 2.0 l_0_6_249)))
 (let ((?x26725 (* ?x26662 l_0_6_264)))
 (let ((?x26659 (* 2.0 l_0_6_248)))
 (let ((?x26723 (* ?x26659 l_0_6_263)))
 (let ((?x26656 (* 2.0 l_0_6_247)))
 (let ((?x26721 (* ?x26656 l_0_6_262)))
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27043 (* ?x27042 l_0_6_178)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27040 (* ?x27039 l_0_6_177)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27037 (* ?x27036 l_0_6_176)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27034 (* ?x27033 l_0_6_175)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27031 (* ?x27030 l_0_6_174)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27028 (* ?x27027 l_0_6_173)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27025 (* ?x27024 l_0_6_172)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27022 (* ?x22458 l_0_6_146)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27020 (* ?x27019 l_0_6_133)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27017 (* ?x27016 l_0_6_132)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27014 (* ?x27013 l_0_6_131)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27011 (* ?x27010 l_0_6_130)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27008 (* ?x24653 l_0_6_129)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27006 (* ?x24650 l_0_6_128)))
 (let ((?x22894 (* (- 2.0) l_0_6_101)))
 (let ((?x10417 (* ?x22894 l_0_6_91)))
 (let ((?x27012 (+ (+ (+ (+ ?x10417 (* (* 2.0 l_0_6_112) l_0_6_127)) ?x27006) ?x27008) ?x27011)))
 (let ((?x27032 (- (- (- (+ (+ (+ (+ ?x27012 ?x27014) ?x27017) ?x27020) ?x27022) ?x27025) ?x27028) ?x27031)))
 (let ((?x27047 (+ (+ (+ (- (- (- (- ?x27032 ?x27034) ?x27037) ?x27040) ?x27043) ?x26721) ?x26723) ?x26725)))
 (= (+ (+ (+ (+ ?x27047 ?x26728) ?x26730) ?x26732) ?x26734) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x22459 (* ?x22458 l_0_6_151)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_91) ?x22459) 0.0))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27111 (* ?x22458 l_0_6_157)))
 (= (+ (* (* (- 2.0) l_0_6_112) l_0_6_91) ?x27111) 0.0))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27118 (* ?x22458 l_0_6_164)))
 (= (+ (* (* (- 2.0) l_0_6_119) l_0_6_91) ?x27118) 0.0))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27129 (* ?x22458 l_0_6_172)))
 (= (+ (* (* (- 2.0) l_0_6_127) l_0_6_91) ?x27129) 0.0))))
(assert
 (let ((?x27147 (* l_0_6_93 l_0_6_93)))
 (let ((?x27145 (* l_0_6_92 l_0_6_92)))
 (let ((?x27139 (* l_0_6_138 l_0_6_138)))
 (let ((?x27137 (* l_0_6_137 l_0_6_137)))
 (let ((?x27140 (+ ?x27137 ?x27139)))
 (= (- (- ?x27140 ?x27145) ?x27147) 0.0)))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x25588 (* ?x24761 l_0_6_95)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x25586 (* ?x24758 l_0_6_94)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x25576 (* ?x22730 l_0_6_140)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x25574 (* ?x22727 l_0_6_139)))
 (= (- (- (+ ?x25574 ?x25576) ?x25586) ?x25588) 0.0))))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27164 (* ?x22730 l_0_6_147)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27162 (* ?x22727 l_0_6_146)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10456 (* ?x22897 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_101) l_0_6_92) ?x10456) ?x27162) ?x27164) 0.0))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x22731 (* ?x22730 l_0_6_152)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x22728 (* ?x22727 l_0_6_151)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22721 (* ?x22605 l_0_6_93)))
 (let ((?x22732 (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_92) ?x22721) ?x22728) ?x22731)))
 (= ?x22732 0.0)))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27190 (* ?x22730 l_0_6_158)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27188 (* ?x22727 l_0_6_157)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27186 (* ?x24650 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_112) l_0_6_92) ?x27186) ?x27188) ?x27190) 0.0))))))))
(assert
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27043 (* ?x27042 l_0_6_178)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27040 (* ?x27039 l_0_6_177)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27037 (* ?x27036 l_0_6_176)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27034 (* ?x27033 l_0_6_175)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27031 (* ?x27030 l_0_6_174)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27028 (* ?x27027 l_0_6_173)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27025 (* ?x27024 l_0_6_172)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27217 (* ?x22730 l_0_6_165)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27215 (* ?x22727 l_0_6_164)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27213 (* ?x7258 l_0_6_93)))
 (let ((?x7264 (* 2.0 l_0_6_119)))
 (let ((?x27211 (* ?x7264 l_0_6_92)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27020 (* ?x27019 l_0_6_133)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27017 (* ?x27016 l_0_6_132)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27014 (* ?x27013 l_0_6_131)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27011 (* ?x27010 l_0_6_130)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27008 (* ?x24653 l_0_6_129)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27006 (* ?x24650 l_0_6_128)))
 (let ((?x27208 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_127) ?x27006) ?x27008) ?x27011) ?x27014)))
 (let ((?x27210 (- (- ?x27208 ?x27017) ?x27020)))
 (let ((?x27221 (+ (+ (+ (+ (+ (- (- ?x27210 ?x27211) ?x27213) ?x27215) ?x27217) ?x27025) ?x27028) ?x27031)))
 (= (+ (+ (+ (+ ?x27221 ?x27034) ?x27037) ?x27040) ?x27043) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27251 (* ?x22730 l_0_6_173)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27249 (* ?x22727 l_0_6_172)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x27247 (* ?x25045 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_127) l_0_6_92) ?x27247) ?x27249) ?x27251) 0.0))))))))
(assert
 (let ((?x25786 (* l_0_6_96 l_0_6_96)))
 (let ((?x25784 (* l_0_6_95 l_0_6_95)))
 (let ((?x25782 (* l_0_6_94 l_0_6_94)))
 (let ((?x25767 (* l_0_6_141 l_0_6_141)))
 (let ((?x27262 (- (+ (+ (* l_0_6_139 l_0_6_139) (* l_0_6_140 l_0_6_140)) ?x25767) ?x25782)))
 (= (- (- ?x27262 ?x25784) ?x25786) 0.0)))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26161 (* ?x22777 l_0_6_148)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26159 (* ?x22774 l_0_6_147)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26156 (* ?x22771 l_0_6_146)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x26151 (* ?x22909 l_0_6_96)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x26149 (* ?x22897 l_0_6_95)))
 (let ((?x27278 (+ (+ (- (- (* (* (- 2.0) l_0_6_101) l_0_6_94) ?x26149) ?x26151) ?x26156) ?x26159)))
 (= (+ ?x27278 ?x26161) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x22778 (* ?x22777 l_0_6_153)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x22775 (* ?x22774 l_0_6_152)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x22772 (* ?x22771 l_0_6_151)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22769 (* ?x22608 l_0_6_96)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22767 (* ?x22605 l_0_6_95)))
 (let ((?x22776 (+ (+ (- (- (* (* (- 2.0) l_0_6_106) l_0_6_94) ?x22767) ?x22769) ?x22772) ?x22775)))
 (let ((?x22779 (+ ?x22776 ?x22778)))
 (= ?x22779 0.0))))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26317 (* ?x22777 l_0_6_159)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26315 (* ?x22774 l_0_6_158)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26312 (* ?x22771 l_0_6_157)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x26308 (* ?x24653 l_0_6_96)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x9496 (* ?x24650 l_0_6_95)))
 (let ((?x27287 (+ (+ (- (- (* (* (- 2.0) l_0_6_112) l_0_6_94) ?x9496) ?x26308) ?x26312) ?x26315)))
 (= (+ ?x27287 ?x26317) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x6520 (* ?x22777 l_0_6_166)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x9665 (* ?x22774 l_0_6_165)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x9667 (* ?x22771 l_0_6_164)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x9649 (* ?x24985 l_0_6_96)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x9704 (* ?x7258 l_0_6_95)))
 (let ((?x27301 (+ (+ (- (- (* (* (- 2.0) l_0_6_119) l_0_6_94) ?x9704) ?x9649) ?x9667) ?x9665)))
 (= (+ ?x27301 ?x6520) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26407 (* ?x22777 l_0_6_174)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26405 (* ?x22774 l_0_6_173)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26402 (* ?x22771 l_0_6_172)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x26399 (* ?x25048 l_0_6_96)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x9907 (* ?x25045 l_0_6_95)))
 (let ((?x27311 (+ (+ (- (- (* (* (- 2.0) l_0_6_127) l_0_6_94) ?x9907) ?x26399) ?x26402) ?x26405)))
 (= (+ ?x27311 ?x26407) 0.0)))))))))))))
(assert
 (let ((?x27335 (* l_0_6_150 l_0_6_150)))
 (let ((?x27333 (* l_0_6_149 l_0_6_149)))
 (let ((?x27331 (* l_0_6_148 l_0_6_148)))
 (let ((?x27329 (* l_0_6_147 l_0_6_147)))
 (let ((?x27327 (* l_0_6_146 l_0_6_146)))
 (let ((?x27325 (* l_0_6_105 l_0_6_105)))
 (let ((?x27323 (* l_0_6_104 l_0_6_104)))
 (let ((?x27321 (* l_0_6_103 l_0_6_103)))
 (let ((?x27322 (- (- (* (- l_0_6_101) l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x27321)))
 (let ((?x27336 (+ (+ (+ (+ (+ (- (- ?x27322 ?x27323) ?x27325) ?x27327) ?x27329) ?x27331) ?x27333) ?x27335)))
 (= ?x27336 0.0))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x22937 (* ?x22936 l_0_6_155)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x22934 (* ?x22933 l_0_6_154)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x22931 (* ?x22930 l_0_6_153)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x22928 (* ?x22927 l_0_6_152)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x22925 (* ?x22924 l_0_6_151)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x22916 (* ?x22915 l_0_6_110)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x22913 (* ?x22912 l_0_6_109)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x22910 (* ?x22909 l_0_6_108)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x22907 (* ?x22897 l_0_6_107)))
 (let ((?x22917 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_106) ?x22907) ?x22910) ?x22913) ?x22916)))
 (= (+ (+ (+ (+ (+ ?x22917 ?x22925) ?x22928) ?x22931) ?x22934) ?x22937) 0.0)))))))))))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27384 (* ?x22936 l_0_6_161)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27382 (* ?x22933 l_0_6_160)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27380 (* ?x22930 l_0_6_159)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27378 (* ?x22927 l_0_6_158)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27376 (* ?x22924 l_0_6_157)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27374 (* ?x22915 l_0_6_116)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27372 (* ?x22912 l_0_6_115)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27370 (* ?x22909 l_0_6_114)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27368 (* ?x22897 l_0_6_113)))
 (let ((?x27375 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_112) ?x27368) ?x27370) ?x27372) ?x27374)))
 (= (+ (+ (+ (+ (+ ?x27375 ?x27376) ?x27378) ?x27380) ?x27382) ?x27384) 0.0)))))))))))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27421 (* ?x22936 l_0_6_168)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27419 (* ?x22933 l_0_6_167)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27417 (* ?x22930 l_0_6_166)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27415 (* ?x22927 l_0_6_165)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27413 (* ?x22924 l_0_6_164)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27411 (* ?x22915 l_0_6_123)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27401 (* ?x22912 l_0_6_122)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x10679 (* ?x22909 l_0_6_121)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10647 (* ?x22897 l_0_6_120)))
 (let ((?x27412 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_119) ?x10647) ?x10679) ?x27401) ?x27411)))
 (= (+ (+ (+ (+ (+ ?x27412 ?x27413) ?x27415) ?x27417) ?x27419) ?x27421) 0.0)))))))))))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27464 (* ?x22936 l_0_6_176)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27462 (* ?x22933 l_0_6_175)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27460 (* ?x22930 l_0_6_174)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27458 (* ?x22927 l_0_6_173)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27456 (* ?x22924 l_0_6_172)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27454 (* ?x22915 l_0_6_131)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27444 (* ?x22912 l_0_6_130)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27441 (* ?x22909 l_0_6_129)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27437 (* ?x22897 l_0_6_128)))
 (let ((?x27455 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_127) ?x27437) ?x27441) ?x27444) ?x27454)))
 (= (+ (+ (+ (+ (+ ?x27455 ?x27456) ?x27458) ?x27460) ?x27462) ?x27464) 0.0)))))))))))))))))))))
(assert
 (let ((?x23016 (* l_0_6_156 l_0_6_156)))
 (let ((?x23014 (* l_0_6_155 l_0_6_155)))
 (let ((?x23012 (* l_0_6_154 l_0_6_154)))
 (let ((?x23010 (* l_0_6_153 l_0_6_153)))
 (let ((?x23008 (* l_0_6_152 l_0_6_152)))
 (let ((?x23006 (* l_0_6_151 l_0_6_151)))
 (let ((?x23004 (* l_0_6_111 l_0_6_111)))
 (let ((?x23002 (* l_0_6_110 l_0_6_110)))
 (let ((?x22990 (* l_0_6_109 l_0_6_109)))
 (let ((?x22986 (* l_0_6_108 l_0_6_108)))
 (let ((?x22988 (- (- (* (- l_0_6_106) l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x22986)))
 (let ((?x23013 (+ (+ (+ (+ (- (- (- ?x22988 ?x22990) ?x23002) ?x23004) ?x23006) ?x23008) ?x23010) ?x23012)))
 (let ((?x23017 (+ (+ ?x23013 ?x23014) ?x23016)))
 (= ?x23017 0.0)))))))))))))))
(assert
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23087 (* ?x22635 l_0_6_162)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23085 (* ?x22632 l_0_6_161)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23083 (* ?x22629 l_0_6_160)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23081 (* ?x22626 l_0_6_159)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23079 (* ?x22623 l_0_6_158)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23077 (* ?x22620 l_0_6_157)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23075 (* ?x22617 l_0_6_117)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23073 (* ?x22614 l_0_6_116)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23071 (* ?x22611 l_0_6_115)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23069 (* ?x22608 l_0_6_114)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23057 (* ?x22605 l_0_6_113)))
 (let ((?x23074 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x23057) ?x23069) ?x23071) ?x23073)))
 (let ((?x23088 (+ (+ (+ (+ (+ (+ (- ?x23074 ?x23075) ?x23077) ?x23079) ?x23081) ?x23083) ?x23085) ?x23087)))
 (= ?x23088 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23243 (* ?x22635 l_0_6_177)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23241 (* ?x22632 l_0_6_176)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23239 (* ?x22629 l_0_6_175)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23237 (* ?x22626 l_0_6_174)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23235 (* ?x22623 l_0_6_173)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23233 (* ?x22620 l_0_6_172)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23231 (* ?x22617 l_0_6_132)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23229 (* ?x22614 l_0_6_131)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23227 (* ?x22611 l_0_6_130)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23225 (* ?x22608 l_0_6_129)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23223 (* ?x22605 l_0_6_128)))
 (let ((?x23230 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_127) ?x23223) ?x23225) ?x23227) ?x23229)))
 (let ((?x23244 (+ (+ (+ (+ (+ (+ (- ?x23230 ?x23231) ?x23233) ?x23235) ?x23237) ?x23239) ?x23241) ?x23243)))
 (= ?x23244 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27521 (* l_0_6_163 l_0_6_163)))
 (let ((?x27519 (* l_0_6_162 l_0_6_162)))
 (let ((?x27517 (* l_0_6_161 l_0_6_161)))
 (let ((?x27515 (* l_0_6_160 l_0_6_160)))
 (let ((?x27513 (* l_0_6_159 l_0_6_159)))
 (let ((?x27511 (* l_0_6_158 l_0_6_158)))
 (let ((?x27509 (* l_0_6_157 l_0_6_157)))
 (let ((?x27507 (* l_0_6_118 l_0_6_118)))
 (let ((?x27505 (* l_0_6_117 l_0_6_117)))
 (let ((?x27503 (* l_0_6_116 l_0_6_116)))
 (let ((?x27501 (* l_0_6_115 l_0_6_115)))
 (let ((?x27491 (* l_0_6_114 l_0_6_114)))
 (let ((?x27500 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27491)))
 (let ((?x27514 (+ (+ (+ (- (- (- (- ?x27500 ?x27501) ?x27503) ?x27505) ?x27507) ?x27509) ?x27511) ?x27513)))
 (= (+ (+ (+ (+ ?x27514 ?x27515) ?x27517) ?x27519) ?x27521) 0.0))))))))))))))))
(assert
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27575 (* ?x27042 l_0_6_170)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27573 (* ?x27039 l_0_6_169)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27571 (* ?x27036 l_0_6_168)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27569 (* ?x27033 l_0_6_167)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27567 (* ?x27030 l_0_6_166)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27565 (* ?x27027 l_0_6_165)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27563 (* ?x27024 l_0_6_164)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27019 l_0_6_125)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27016 l_0_6_124)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27557 (* ?x27013 l_0_6_123)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27555 (* ?x27010 l_0_6_122)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27553 (* ?x24653 l_0_6_121)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27551 (* ?x24650 l_0_6_120)))
 (let ((?x27558 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_119) ?x27551) ?x27553) ?x27555) ?x27557)))
 (let ((?x27572 (+ (+ (+ (+ (+ (- (- ?x27558 ?x27559) ?x27561) ?x27563) ?x27565) ?x27567) ?x27569) ?x27571)))
 (= (+ (+ ?x27572 ?x27573) ?x27575) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27043 (* ?x27042 l_0_6_178)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27040 (* ?x27039 l_0_6_177)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27037 (* ?x27036 l_0_6_176)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27034 (* ?x27033 l_0_6_175)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27031 (* ?x27030 l_0_6_174)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27028 (* ?x27027 l_0_6_173)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27025 (* ?x27024 l_0_6_172)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27020 (* ?x27019 l_0_6_133)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27017 (* ?x27016 l_0_6_132)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27014 (* ?x27013 l_0_6_131)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27011 (* ?x27010 l_0_6_130)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27008 (* ?x24653 l_0_6_129)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27006 (* ?x24650 l_0_6_128)))
 (let ((?x27208 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_127) ?x27006) ?x27008) ?x27011) ?x27014)))
 (let ((?x27210 (- (- ?x27208 ?x27017) ?x27020)))
 (let ((?x27593 (+ (+ (+ (+ (+ (+ (+ ?x27210 ?x27025) ?x27028) ?x27031) ?x27034) ?x27037) ?x27040) ?x27043)))
 (= ?x27593 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x27637 (* l_0_6_171 l_0_6_171)))
 (let ((?x27635 (* l_0_6_170 l_0_6_170)))
 (let ((?x27633 (* l_0_6_169 l_0_6_169)))
 (let ((?x27631 (* l_0_6_168 l_0_6_168)))
 (let ((?x27629 (* l_0_6_167 l_0_6_167)))
 (let ((?x27627 (* l_0_6_166 l_0_6_166)))
 (let ((?x27625 (* l_0_6_165 l_0_6_165)))
 (let ((?x27623 (* l_0_6_164 l_0_6_164)))
 (let ((?x27621 (* l_0_6_126 l_0_6_126)))
 (let ((?x27619 (* l_0_6_125 l_0_6_125)))
 (let ((?x27617 (* l_0_6_124 l_0_6_124)))
 (let ((?x27615 (* l_0_6_123 l_0_6_123)))
 (let ((?x27613 (* l_0_6_122 l_0_6_122)))
 (let ((?x27611 (* l_0_6_121 l_0_6_121)))
 (let ((?x27612 (- (- (* (- l_0_6_119) l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27611)))
 (let ((?x27626 (+ (+ (- (- (- (- (- ?x27612 ?x27613) ?x27615) ?x27617) ?x27619) ?x27621) ?x27623) ?x27625)))
 (= (+ (+ (+ (+ (+ (+ ?x27626 ?x27627) ?x27629) ?x27631) ?x27633) ?x27635) ?x27637) 0.0))))))))))))))))))
(assert
 (let ((?x27716 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27713 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27710 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27707 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27704 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27701 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27698 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27695 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27692 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27689 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27686 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27683 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27680 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x27677 (* ?x24985 l_0_6_129)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27675 (* ?x7258 l_0_6_128)))
 (let ((?x27684 (- (- (- (- (* (* (- 2.0) l_0_6_119) l_0_6_127) ?x27675) ?x27677) ?x27680) ?x27683)))
 (let ((?x27705 (+ (+ (+ (+ (- (- (- ?x27684 ?x27686) ?x27689) ?x27692) ?x27695) ?x27698) ?x27701) ?x27704)))
 (= (+ (+ (+ (+ ?x27705 ?x27707) ?x27710) ?x27713) ?x27716) 0.0)))))))))))))))))))))
(assert
 (let ((?x27792 (* l_0_6_180 l_0_6_180)))
 (let ((?x27790 (* l_0_6_179 l_0_6_179)))
 (let ((?x27788 (* l_0_6_178 l_0_6_178)))
 (let ((?x27786 (* l_0_6_177 l_0_6_177)))
 (let ((?x27784 (* l_0_6_176 l_0_6_176)))
 (let ((?x27782 (* l_0_6_175 l_0_6_175)))
 (let ((?x27780 (* l_0_6_174 l_0_6_174)))
 (let ((?x27778 (* l_0_6_173 l_0_6_173)))
 (let ((?x27776 (* l_0_6_172 l_0_6_172)))
 (let ((?x27774 (* l_0_6_135 l_0_6_135)))
 (let ((?x27772 (* l_0_6_134 l_0_6_134)))
 (let ((?x27770 (* l_0_6_133 l_0_6_133)))
 (let ((?x27768 (* l_0_6_132 l_0_6_132)))
 (let ((?x27755 (* l_0_6_131 l_0_6_131)))
 (let ((?x27752 (* l_0_6_130 l_0_6_130)))
 (let ((?x27748 (* l_0_6_129 l_0_6_129)))
 (let ((?x27750 (- (- (* (- l_0_6_127) l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27748)))
 (let ((?x27777 (+ (- (- (- (- (- (- ?x27750 ?x27752) ?x27755) ?x27768) ?x27770) ?x27772) ?x27774) ?x27776)))
 (let ((?x27791 (+ (+ (+ (+ (+ (+ (+ ?x27777 ?x27778) ?x27780) ?x27782) ?x27784) ?x27786) ?x27788) ?x27790)))
 (= (+ ?x27791 ?x27792) 0.0)))))))))))))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x26993 (* ?x24691 l_0_6_92)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_137) ?x26993) 0.0))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x24692 (* ?x24691 l_0_6_97)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x6848 (* ?x22458 l_0_6_142)))
 (= (- ?x6848 ?x24692) 0.0))))))
(assert
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25654 (* ?x25532 l_0_6_255)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25652 (* ?x25529 l_0_6_254)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27217 (* ?x22730 l_0_6_165)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27215 (* ?x22727 l_0_6_164)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27022 (* ?x22458 l_0_6_146)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27213 (* ?x7258 l_0_6_93)))
 (let ((?x7264 (* 2.0 l_0_6_119)))
 (let ((?x27211 (* ?x7264 l_0_6_92)))
 (let ((?x22894 (* (- 2.0) l_0_6_101)))
 (let ((?x10417 (* ?x22894 l_0_6_91)))
 (let ((?x27825 (+ (+ (- (- (+ (+ (+ ?x10417 ?x27211) ?x27213) ?x27022) ?x27215) ?x27217) ?x25652) ?x25654)))
 (= ?x27825 0.0)))))))))))))))))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27111 (* ?x22458 l_0_6_157)))
 (= (+ (* (* (- 2.0) l_0_6_112) l_0_6_91) ?x27111) 0.0))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27118 (* ?x22458 l_0_6_164)))
 (= (+ (* (* (- 2.0) l_0_6_119) l_0_6_91) ?x27118) 0.0))))
(assert
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27129 (* ?x22458 l_0_6_172)))
 (= (+ (* (* (- 2.0) l_0_6_127) l_0_6_91) ?x27129) 0.0))))
(assert
 (let ((?x27147 (* l_0_6_93 l_0_6_93)))
 (let ((?x27145 (* l_0_6_92 l_0_6_92)))
 (let ((?x27139 (* l_0_6_138 l_0_6_138)))
 (let ((?x27137 (* l_0_6_137 l_0_6_137)))
 (let ((?x27140 (+ ?x27137 ?x27139)))
 (= (- (- ?x27140 ?x27145) ?x27147) 0.0)))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x25588 (* ?x24761 l_0_6_95)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x25586 (* ?x24758 l_0_6_94)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x25576 (* ?x22730 l_0_6_140)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x25574 (* ?x22727 l_0_6_139)))
 (= (- (- (+ ?x25574 ?x25576) ?x25586) ?x25588) 0.0))))))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x24762 (* ?x24761 l_0_6_98)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x24759 (* ?x24758 l_0_6_97)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x6996 (* ?x22730 l_0_6_143)))
 (let ((?x6961 (+ (* (* 2.0 l_0_6_137) l_0_6_142) ?x6996)))
 (= (- (- ?x6961 ?x24759) ?x24762) 0.0)))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27164 (* ?x22730 l_0_6_147)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27162 (* ?x22727 l_0_6_146)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10456 (* ?x22897 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_101) l_0_6_92) ?x10456) ?x27162) ?x27164) 0.0))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27190 (* ?x22730 l_0_6_158)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27188 (* ?x22727 l_0_6_157)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27186 (* ?x24650 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_112) l_0_6_92) ?x27186) ?x27188) ?x27190) 0.0))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27217 (* ?x22730 l_0_6_165)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27215 (* ?x22727 l_0_6_164)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27213 (* ?x7258 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_119) l_0_6_92) ?x27213) ?x27215) ?x27217) 0.0))))))))
(assert
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27251 (* ?x22730 l_0_6_173)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27249 (* ?x22727 l_0_6_172)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x27247 (* ?x25045 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_127) l_0_6_92) ?x27247) ?x27249) ?x27251) 0.0))))))))
(assert
 (let ((?x25786 (* l_0_6_96 l_0_6_96)))
 (let ((?x25784 (* l_0_6_95 l_0_6_95)))
 (let ((?x25782 (* l_0_6_94 l_0_6_94)))
 (let ((?x25767 (* l_0_6_141 l_0_6_141)))
 (let ((?x27262 (- (+ (+ (* l_0_6_139 l_0_6_139) (* l_0_6_140 l_0_6_140)) ?x25767) ?x25782)))
 (= (- (- ?x27262 ?x25784) ?x25786) 0.0)))))))
(assert
 (let ((?x24797 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x24794 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x24791 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x24781 (* ?x22777 l_0_6_144)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x7037 (* ?x22774 l_0_6_143)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x7040 (* ?x22771 l_0_6_142)))
 (let ((?x24782 (+ (+ ?x7040 ?x7037) ?x24781)))
 (= (- (- (- ?x24782 ?x24791) ?x24794) ?x24797) 0.0))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26161 (* ?x22777 l_0_6_148)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26159 (* ?x22774 l_0_6_147)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26156 (* ?x22771 l_0_6_146)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x26151 (* ?x22909 l_0_6_96)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x26149 (* ?x22897 l_0_6_95)))
 (let ((?x27278 (+ (+ (- (- (* (* (- 2.0) l_0_6_101) l_0_6_94) ?x26149) ?x26151) ?x26156) ?x26159)))
 (= (+ ?x27278 ?x26161) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26317 (* ?x22777 l_0_6_159)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26315 (* ?x22774 l_0_6_158)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26312 (* ?x22771 l_0_6_157)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x26308 (* ?x24653 l_0_6_96)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x9496 (* ?x24650 l_0_6_95)))
 (let ((?x27287 (+ (+ (- (- (* (* (- 2.0) l_0_6_112) l_0_6_94) ?x9496) ?x26308) ?x26312) ?x26315)))
 (= (+ ?x27287 ?x26317) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x6520 (* ?x22777 l_0_6_166)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x9665 (* ?x22774 l_0_6_165)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x9667 (* ?x22771 l_0_6_164)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x9649 (* ?x24985 l_0_6_96)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x9704 (* ?x7258 l_0_6_95)))
 (let ((?x27301 (+ (+ (- (- (* (* (- 2.0) l_0_6_119) l_0_6_94) ?x9704) ?x9649) ?x9667) ?x9665)))
 (= (+ ?x27301 ?x6520) 0.0)))))))))))))
(assert
 (let ((?x22777 (* 2.0 l_0_6_141)))
 (let ((?x26407 (* ?x22777 l_0_6_174)))
 (let ((?x22774 (* 2.0 l_0_6_140)))
 (let ((?x26405 (* ?x22774 l_0_6_173)))
 (let ((?x22771 (* 2.0 l_0_6_139)))
 (let ((?x26402 (* ?x22771 l_0_6_172)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x26399 (* ?x25048 l_0_6_96)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x9907 (* ?x25045 l_0_6_95)))
 (let ((?x27311 (+ (+ (- (- (* (* (- 2.0) l_0_6_127) l_0_6_94) ?x9907) ?x26399) ?x26402) ?x26405)))
 (= (+ ?x27311 ?x26407) 0.0)))))))))))))
(assert
 (let ((?x24858 (* l_0_6_99 l_0_6_99)))
 (let ((?x24856 (* l_0_6_98 l_0_6_98)))
 (let ((?x24854 (* l_0_6_97 l_0_6_97)))
 (let ((?x24845 (* l_0_6_145 l_0_6_145)))
 (let ((?x24843 (* l_0_6_144 l_0_6_144)))
 (let ((?x24841 (* l_0_6_143 l_0_6_143)))
 (let ((?x27855 (+ (+ (* (- l_0_6_100) l_0_6_100) (* l_0_6_142 l_0_6_142)) ?x24841)))
 (= (- (- (- (+ (+ ?x27855 ?x24843) ?x24845) ?x24854) ?x24856) ?x24858) 0.0)))))))))
(assert
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24901 (* ?x22850 l_0_6_149)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24899 (* ?x22847 l_0_6_148)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24897 (* ?x22844 l_0_6_147)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24895 (* ?x22841 l_0_6_146)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x24888 (* ?x22909 l_0_6_99)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x24885 (* ?x22897 l_0_6_98)))
 (let ((?x24882 (* 2.0 l_0_6_101)))
 (let ((?x24884 (* ?x24882 l_0_6_97)))
 (let ((?x24889 (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_104) ?x24884) ?x24885) ?x24888)))
 (= (+ (+ (+ (+ ?x24889 ?x24895) ?x24897) ?x24899) ?x24901) 0.0)))))))))))))))))
(assert
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24994 (* ?x22850 l_0_6_167)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24992 (* ?x22847 l_0_6_166)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24990 (* ?x22844 l_0_6_165)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24988 (* ?x22841 l_0_6_164)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x24986 (* ?x24985 l_0_6_99)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x7256 (* ?x7258 l_0_6_98)))
 (let ((?x7264 (* 2.0 l_0_6_119)))
 (let ((?x7265 (* ?x7264 l_0_6_97)))
 (let ((?x24989 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_122) ?x7265) ?x7256) ?x24986) ?x24988)))
 (let ((?x24995 (+ (+ (+ ?x24989 ?x24990) ?x24992) ?x24994)))
 (= ?x24995 0.0))))))))))))))))))
(assert
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x25057 (* ?x22850 l_0_6_175)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x25055 (* ?x22847 l_0_6_174)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x25053 (* ?x22844 l_0_6_173)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x25051 (* ?x22841 l_0_6_172)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x25049 (* ?x25048 l_0_6_99)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x25046 (* ?x25045 l_0_6_98)))
 (let ((?x25042 (* 2.0 l_0_6_127)))
 (let ((?x25043 (* ?x25042 l_0_6_97)))
 (let ((?x25052 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_130) ?x25043) ?x25046) ?x25049) ?x25051)))
 (let ((?x25058 (+ (+ (+ ?x25052 ?x25053) ?x25055) ?x25057)))
 (= ?x25058 0.0))))))))))))))))))
(assert
 (let ((?x27335 (* l_0_6_150 l_0_6_150)))
 (let ((?x27333 (* l_0_6_149 l_0_6_149)))
 (let ((?x27331 (* l_0_6_148 l_0_6_148)))
 (let ((?x27329 (* l_0_6_147 l_0_6_147)))
 (let ((?x27327 (* l_0_6_146 l_0_6_146)))
 (let ((?x27325 (* l_0_6_105 l_0_6_105)))
 (let ((?x27323 (* l_0_6_104 l_0_6_104)))
 (let ((?x27321 (* l_0_6_103 l_0_6_103)))
 (let ((?x27322 (- (- (* (- l_0_6_101) l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x27321)))
 (let ((?x27336 (+ (+ (+ (+ (+ (- (- ?x27322 ?x27323) ?x27325) ?x27327) ?x27329) ?x27331) ?x27333) ?x27335)))
 (= ?x27336 0.0))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27384 (* ?x22936 l_0_6_161)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27382 (* ?x22933 l_0_6_160)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27380 (* ?x22930 l_0_6_159)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27378 (* ?x22927 l_0_6_158)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27376 (* ?x22924 l_0_6_157)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27374 (* ?x22915 l_0_6_116)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27372 (* ?x22912 l_0_6_115)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27370 (* ?x22909 l_0_6_114)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27368 (* ?x22897 l_0_6_113)))
 (let ((?x27375 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_112) ?x27368) ?x27370) ?x27372) ?x27374)))
 (= (+ (+ (+ (+ (+ ?x27375 ?x27376) ?x27378) ?x27380) ?x27382) ?x27384) 0.0)))))))))))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27421 (* ?x22936 l_0_6_168)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27419 (* ?x22933 l_0_6_167)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27417 (* ?x22930 l_0_6_166)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27415 (* ?x22927 l_0_6_165)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27413 (* ?x22924 l_0_6_164)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27411 (* ?x22915 l_0_6_123)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27401 (* ?x22912 l_0_6_122)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x10679 (* ?x22909 l_0_6_121)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10647 (* ?x22897 l_0_6_120)))
 (let ((?x27412 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_119) ?x10647) ?x10679) ?x27401) ?x27411)))
 (= (+ (+ (+ (+ (+ ?x27412 ?x27413) ?x27415) ?x27417) ?x27419) ?x27421) 0.0)))))))))))))))))))))
(assert
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27464 (* ?x22936 l_0_6_176)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27462 (* ?x22933 l_0_6_175)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27460 (* ?x22930 l_0_6_174)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27458 (* ?x22927 l_0_6_173)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27456 (* ?x22924 l_0_6_172)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27454 (* ?x22915 l_0_6_131)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27444 (* ?x22912 l_0_6_130)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27441 (* ?x22909 l_0_6_129)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27437 (* ?x22897 l_0_6_128)))
 (let ((?x27455 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_127) ?x27437) ?x27441) ?x27444) ?x27454)))
 (= (+ (+ (+ (+ (+ ?x27455 ?x27456) ?x27458) ?x27460) ?x27462) ?x27464) 0.0)))))))))))))))))))))
(assert
 (let ((?x27521 (* l_0_6_163 l_0_6_163)))
 (let ((?x27519 (* l_0_6_162 l_0_6_162)))
 (let ((?x27517 (* l_0_6_161 l_0_6_161)))
 (let ((?x27515 (* l_0_6_160 l_0_6_160)))
 (let ((?x27513 (* l_0_6_159 l_0_6_159)))
 (let ((?x27511 (* l_0_6_158 l_0_6_158)))
 (let ((?x27509 (* l_0_6_157 l_0_6_157)))
 (let ((?x27507 (* l_0_6_118 l_0_6_118)))
 (let ((?x27505 (* l_0_6_117 l_0_6_117)))
 (let ((?x27503 (* l_0_6_116 l_0_6_116)))
 (let ((?x27501 (* l_0_6_115 l_0_6_115)))
 (let ((?x27491 (* l_0_6_114 l_0_6_114)))
 (let ((?x27500 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27491)))
 (let ((?x27514 (+ (+ (+ (- (- (- (- ?x27500 ?x27501) ?x27503) ?x27505) ?x27507) ?x27509) ?x27511) ?x27513)))
 (= (+ (+ (+ (+ ?x27514 ?x27515) ?x27517) ?x27519) ?x27521) 0.0))))))))))))))))
(assert
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27575 (* ?x27042 l_0_6_170)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27573 (* ?x27039 l_0_6_169)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27571 (* ?x27036 l_0_6_168)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27569 (* ?x27033 l_0_6_167)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27567 (* ?x27030 l_0_6_166)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27565 (* ?x27027 l_0_6_165)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27563 (* ?x27024 l_0_6_164)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27019 l_0_6_125)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27016 l_0_6_124)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27557 (* ?x27013 l_0_6_123)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27555 (* ?x27010 l_0_6_122)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27553 (* ?x24653 l_0_6_121)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27551 (* ?x24650 l_0_6_120)))
 (let ((?x27558 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_119) ?x27551) ?x27553) ?x27555) ?x27557)))
 (let ((?x27572 (+ (+ (+ (+ (+ (- (- ?x27558 ?x27559) ?x27561) ?x27563) ?x27565) ?x27567) ?x27569) ?x27571)))
 (= (+ (+ ?x27572 ?x27573) ?x27575) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27637 (* l_0_6_171 l_0_6_171)))
 (let ((?x27635 (* l_0_6_170 l_0_6_170)))
 (let ((?x27633 (* l_0_6_169 l_0_6_169)))
 (let ((?x27631 (* l_0_6_168 l_0_6_168)))
 (let ((?x27629 (* l_0_6_167 l_0_6_167)))
 (let ((?x27627 (* l_0_6_166 l_0_6_166)))
 (let ((?x27625 (* l_0_6_165 l_0_6_165)))
 (let ((?x27623 (* l_0_6_164 l_0_6_164)))
 (let ((?x27621 (* l_0_6_126 l_0_6_126)))
 (let ((?x27619 (* l_0_6_125 l_0_6_125)))
 (let ((?x27617 (* l_0_6_124 l_0_6_124)))
 (let ((?x27615 (* l_0_6_123 l_0_6_123)))
 (let ((?x27613 (* l_0_6_122 l_0_6_122)))
 (let ((?x27611 (* l_0_6_121 l_0_6_121)))
 (let ((?x27612 (- (- (* (- l_0_6_119) l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27611)))
 (let ((?x27626 (+ (+ (- (- (- (- (- ?x27612 ?x27613) ?x27615) ?x27617) ?x27619) ?x27621) ?x27623) ?x27625)))
 (= (+ (+ (+ (+ (+ (+ ?x27626 ?x27627) ?x27629) ?x27631) ?x27633) ?x27635) ?x27637) 0.0))))))))))))))))))
(assert
 (let ((?x27716 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27713 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27710 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27707 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27704 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27701 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27698 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27695 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27692 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27689 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27686 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27683 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27680 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x27677 (* ?x24985 l_0_6_129)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27675 (* ?x7258 l_0_6_128)))
 (let ((?x27684 (- (- (- (- (* (* (- 2.0) l_0_6_119) l_0_6_127) ?x27675) ?x27677) ?x27680) ?x27683)))
 (let ((?x27705 (+ (+ (+ (+ (- (- (- ?x27684 ?x27686) ?x27689) ?x27692) ?x27695) ?x27698) ?x27701) ?x27704)))
 (= (+ (+ (+ (+ ?x27705 ?x27707) ?x27710) ?x27713) ?x27716) 0.0)))))))))))))))))))))
(assert
 (let ((?x27792 (* l_0_6_180 l_0_6_180)))
 (let ((?x27790 (* l_0_6_179 l_0_6_179)))
 (let ((?x27788 (* l_0_6_178 l_0_6_178)))
 (let ((?x27786 (* l_0_6_177 l_0_6_177)))
 (let ((?x27784 (* l_0_6_176 l_0_6_176)))
 (let ((?x27782 (* l_0_6_175 l_0_6_175)))
 (let ((?x27780 (* l_0_6_174 l_0_6_174)))
 (let ((?x27778 (* l_0_6_173 l_0_6_173)))
 (let ((?x27776 (* l_0_6_172 l_0_6_172)))
 (let ((?x27774 (* l_0_6_135 l_0_6_135)))
 (let ((?x27772 (* l_0_6_134 l_0_6_134)))
 (let ((?x27770 (* l_0_6_133 l_0_6_133)))
 (let ((?x27768 (* l_0_6_132 l_0_6_132)))
 (let ((?x27755 (* l_0_6_131 l_0_6_131)))
 (let ((?x27752 (* l_0_6_130 l_0_6_130)))
 (let ((?x27748 (* l_0_6_129 l_0_6_129)))
 (let ((?x27750 (- (- (* (- l_0_6_127) l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27748)))
 (let ((?x27777 (+ (- (- (- (- (- (- ?x27750 ?x27752) ?x27755) ?x27768) ?x27770) ?x27772) ?x27774) ?x27776)))
 (let ((?x27791 (+ (+ (+ (+ (+ (+ (+ ?x27777 ?x27778) ?x27780) ?x27782) ?x27784) ?x27786) ?x27788) ?x27790)))
 (= (+ ?x27791 ?x27792) 0.0)))))))))))))))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x26993 (* ?x24691 l_0_6_92)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x7381 (* ?x7391 l_0_6_227)))
 (let ((?x27887 (- (* (* (- 2.0) l_0_6_136) l_0_6_137) (* (* 2.0 l_0_6_182) l_0_6_191))))
 (let ((?x27893 (- (+ (- ?x27887 (* (* 2.0 l_0_6_183) l_0_6_192)) ?x7381) (* (* 2.0 l_0_6_272) l_0_6_281))))
 (let ((?x27897 (- (- ?x27893 (* (* 2.0 l_0_6_273) l_0_6_282)) (* (* 2.0 l_0_6_317) l_0_6_326))))
 (= (+ (- ?x27897 (* (* 2.0 l_0_6_318) l_0_6_327)) ?x26993) 0.0)))))))))
(assert
 (let ((?x24691 (* 2.0 l_0_6_91)))
 (let ((?x24692 (* ?x24691 l_0_6_97)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25181 (* ?x7391 l_0_6_232)))
 (let ((?x27944 (- (* (* (- 2.0) l_0_6_136) l_0_6_142) (* (* 2.0 l_0_6_187) l_0_6_191))))
 (let ((?x27948 (- (- ?x27944 (* (* 2.0 l_0_6_188) l_0_6_192)) (* (* 2.0 l_0_6_189) l_0_6_193))))
 (let ((?x27953 (- (+ (- ?x27948 (* (* 2.0 l_0_6_190) l_0_6_194)) ?x25181) (* (* 2.0 l_0_6_277) l_0_6_281))))
 (let ((?x27957 (- (- ?x27953 (* (* 2.0 l_0_6_278) l_0_6_282)) (* (* 2.0 l_0_6_279) l_0_6_283))))
 (let ((?x27961 (- (- ?x27957 (* (* 2.0 l_0_6_280) l_0_6_284)) (* (* 2.0 l_0_6_322) l_0_6_326))))
 (let ((?x27965 (- (- ?x27961 (* (* 2.0 l_0_6_323) l_0_6_327)) (* (* 2.0 l_0_6_324) l_0_6_328))))
 (= (+ (- ?x27965 (* (* 2.0 l_0_6_325) l_0_6_329)) ?x24692) 0.0))))))))))))
(assert
 (let ((?x28051 (* l_0_6_330 l_0_6_330)))
 (let ((?x28049 (* l_0_6_329 l_0_6_329)))
 (let ((?x28047 (* l_0_6_328 l_0_6_328)))
 (let ((?x28045 (* l_0_6_327 l_0_6_327)))
 (let ((?x28043 (* l_0_6_326 l_0_6_326)))
 (let ((?x28041 (* l_0_6_285 l_0_6_285)))
 (let ((?x28039 (* l_0_6_284 l_0_6_284)))
 (let ((?x28037 (* l_0_6_283 l_0_6_283)))
 (let ((?x28035 (* l_0_6_282 l_0_6_282)))
 (let ((?x28033 (* l_0_6_281 l_0_6_281)))
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25244 (* ?x7391 l_0_6_236)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27022 (* ?x22458 l_0_6_146)))
 (let ((?x28019 (- (- (* (* 2.0 l_0_6_101) l_0_6_91) ?x27022) (* (* 1.0 l_0_6_191) l_0_6_191))))
 (let ((?x28025 (- (- ?x28019 (* (* 1.0 l_0_6_192) l_0_6_192)) (* (* 1.0 l_0_6_193) l_0_6_193))))
 (let ((?x28031 (- (- ?x28025 (* (* 1.0 l_0_6_194) l_0_6_194)) (* (* 1.0 l_0_6_195) l_0_6_195))))
 (let ((?x28044 (- (- (- (- (- (- (+ ?x28031 ?x25244) ?x28033) ?x28035) ?x28037) ?x28039) ?x28041) ?x28043)))
 (= (- (- (- (- ?x28044 ?x28045) ?x28047) ?x28049) ?x28051) 0.0))))))))))))))))))))
(assert
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25302 (* ?x7391 l_0_6_241)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x22459 (* ?x22458 l_0_6_151)))
 (let ((?x22455 (* 2.0 l_0_6_106)))
 (let ((?x22456 (* ?x22455 l_0_6_91)))
 (let ((?x28089 (- (- (- ?x22456 ?x22459) (* (* 2.0 l_0_6_191) l_0_6_196)) (* (* 2.0 l_0_6_192) l_0_6_197))))
 (let ((?x28095 (- (- ?x28089 (* (* 2.0 l_0_6_193) l_0_6_198)) (* (* 2.0 l_0_6_194) l_0_6_199))))
 (let ((?x28102 (- (+ (- ?x28095 (* (* 2.0 l_0_6_195) l_0_6_200)) ?x25302) (* (* 2.0 l_0_6_281) l_0_6_286))))
 (let ((?x28108 (- (- ?x28102 (* (* 2.0 l_0_6_282) l_0_6_287)) (* (* 2.0 l_0_6_283) l_0_6_288))))
 (let ((?x28114 (- (- ?x28108 (* (* 2.0 l_0_6_284) l_0_6_289)) (* (* 2.0 l_0_6_285) l_0_6_290))))
 (let ((?x28120 (- (- ?x28114 (* (* 2.0 l_0_6_326) l_0_6_331)) (* (* 2.0 l_0_6_327) l_0_6_332))))
 (let ((?x28126 (- (- ?x28120 (* (* 2.0 l_0_6_328) l_0_6_333)) (* (* 2.0 l_0_6_329) l_0_6_334))))
 (= (- ?x28126 (* (* 2.0 l_0_6_330) l_0_6_335)) 0.0)))))))))))))))
(assert
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25361 (* ?x7391 l_0_6_247)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27111 (* ?x22458 l_0_6_157)))
 (let ((?x28165 (- (- (* (* 2.0 l_0_6_112) l_0_6_91) ?x27111) (* (* 2.0 l_0_6_191) l_0_6_202))))
 (let ((?x28169 (- (- ?x28165 (* (* 2.0 l_0_6_192) l_0_6_203)) (* (* 2.0 l_0_6_193) l_0_6_204))))
 (let ((?x28173 (- (- ?x28169 (* (* 2.0 l_0_6_194) l_0_6_205)) (* (* 2.0 l_0_6_195) l_0_6_206))))
 (let ((?x28178 (- (- (+ ?x28173 ?x25361) (* (* 2.0 l_0_6_281) l_0_6_292)) (* (* 2.0 l_0_6_282) l_0_6_293))))
 (let ((?x28182 (- (- ?x28178 (* (* 2.0 l_0_6_283) l_0_6_294)) (* (* 2.0 l_0_6_284) l_0_6_295))))
 (let ((?x28186 (- (- ?x28182 (* (* 2.0 l_0_6_285) l_0_6_296)) (* (* 2.0 l_0_6_326) l_0_6_337))))
 (let ((?x28190 (- (- ?x28186 (* (* 2.0 l_0_6_327) l_0_6_338)) (* (* 2.0 l_0_6_328) l_0_6_339))))
 (let ((?x28194 (- (- ?x28190 (* (* 2.0 l_0_6_329) l_0_6_340)) (* (* 2.0 l_0_6_330) l_0_6_341))))
 (= ?x28194 0.0))))))))))))))
(assert
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25413 (* ?x7391 l_0_6_254)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27118 (* ?x22458 l_0_6_164)))
 (let ((?x28215 (- (- (* (* 2.0 l_0_6_119) l_0_6_91) ?x27118) (* (* 2.0 l_0_6_191) l_0_6_209))))
 (let ((?x28219 (- (- ?x28215 (* (* 2.0 l_0_6_192) l_0_6_210)) (* (* 2.0 l_0_6_193) l_0_6_211))))
 (let ((?x28223 (- (- ?x28219 (* (* 2.0 l_0_6_194) l_0_6_212)) (* (* 2.0 l_0_6_195) l_0_6_213))))
 (let ((?x28228 (- (- (+ ?x28223 ?x25413) (* (* 2.0 l_0_6_281) l_0_6_299)) (* (* 2.0 l_0_6_282) l_0_6_300))))
 (let ((?x28232 (- (- ?x28228 (* (* 2.0 l_0_6_283) l_0_6_301)) (* (* 2.0 l_0_6_284) l_0_6_302))))
 (let ((?x28236 (- (- ?x28232 (* (* 2.0 l_0_6_285) l_0_6_303)) (* (* 2.0 l_0_6_326) l_0_6_344))))
 (let ((?x28240 (- (- ?x28236 (* (* 2.0 l_0_6_327) l_0_6_345)) (* (* 2.0 l_0_6_328) l_0_6_346))))
 (let ((?x28244 (- (- ?x28240 (* (* 2.0 l_0_6_329) l_0_6_347)) (* (* 2.0 l_0_6_330) l_0_6_348))))
 (= ?x28244 0.0))))))))))))))
(assert
 (let ((?x7391 (* 2.0 l_0_6_226)))
 (let ((?x25468 (* ?x7391 l_0_6_262)))
 (let ((?x22458 (* 2.0 l_0_6_136)))
 (let ((?x27129 (* ?x22458 l_0_6_172)))
 (let ((?x28295 (- (- (* (* 2.0 l_0_6_127) l_0_6_91) ?x27129) (* (* 2.0 l_0_6_191) l_0_6_217))))
 (let ((?x28299 (- (- ?x28295 (* (* 2.0 l_0_6_192) l_0_6_218)) (* (* 2.0 l_0_6_193) l_0_6_219))))
 (let ((?x28303 (- (- ?x28299 (* (* 2.0 l_0_6_194) l_0_6_220)) (* (* 2.0 l_0_6_195) l_0_6_221))))
 (let ((?x28308 (- (- (+ ?x28303 ?x25468) (* (* 2.0 l_0_6_281) l_0_6_307)) (* (* 2.0 l_0_6_282) l_0_6_308))))
 (let ((?x28312 (- (- ?x28308 (* (* 2.0 l_0_6_283) l_0_6_309)) (* (* 2.0 l_0_6_284) l_0_6_310))))
 (let ((?x28316 (- (- ?x28312 (* (* 2.0 l_0_6_285) l_0_6_311)) (* (* 2.0 l_0_6_326) l_0_6_352))))
 (let ((?x28320 (- (- ?x28316 (* (* 2.0 l_0_6_327) l_0_6_353)) (* (* 2.0 l_0_6_328) l_0_6_354))))
 (let ((?x28324 (- (- ?x28320 (* (* 2.0 l_0_6_329) l_0_6_355)) (* (* 2.0 l_0_6_330) l_0_6_356))))
 (= ?x28324 0.0))))))))))))))
(assert
 (let ((?x27147 (* l_0_6_93 l_0_6_93)))
 (let ((?x27145 (* l_0_6_92 l_0_6_92)))
 (let ((?x25515 (* l_0_6_228 l_0_6_228)))
 (let ((?x25513 (* l_0_6_227 l_0_6_227)))
 (let ((?x28354 (+ (- (* (- l_0_6_137) l_0_6_137) (* l_0_6_138 l_0_6_138)) ?x25513)))
 (= (+ (+ (+ ?x28354 ?x25515) ?x27145) ?x27147) 0.0)))))))
(assert
 (let ((?x24761 (* 2.0 l_0_6_93)))
 (let ((?x24762 (* ?x24761 l_0_6_98)))
 (let ((?x24758 (* 2.0 l_0_6_92)))
 (let ((?x24759 (* ?x24758 l_0_6_97)))
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25553 (* ?x25532 l_0_6_233)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25551 (* ?x25529 l_0_6_232)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x6996 (* ?x22730 l_0_6_143)))
 (let ((?x28367 (+ (+ (+ (- (* (* (- 2.0) l_0_6_137) l_0_6_142) ?x6996) ?x25551) ?x25553) ?x24759)))
 (= (+ ?x28367 ?x24762) 0.0)))))))))))))
(assert
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25582 (* ?x25532 l_0_6_237)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25579 (* ?x25529 l_0_6_236)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27164 (* ?x22730 l_0_6_147)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27162 (* ?x22727 l_0_6_146)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10456 (* ?x22897 l_0_6_93)))
 (let ((?x28376 (+ (- (- (+ (* (* 2.0 l_0_6_101) l_0_6_92) ?x10456) ?x27162) ?x27164) ?x25579)))
 (= (+ ?x28376 ?x25582) 0.0)))))))))))))
(assert
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25617 (* ?x25532 l_0_6_242)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25615 (* ?x25529 l_0_6_241)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x22731 (* ?x22730 l_0_6_152)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x22728 (* ?x22727 l_0_6_151)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22721 (* ?x22605 l_0_6_93)))
 (let ((?x28383 (+ (- (- (+ (* (* 2.0 l_0_6_106) l_0_6_92) ?x22721) ?x22728) ?x22731) ?x25615)))
 (= (+ ?x28383 ?x25617) 0.0)))))))))))))
(assert
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25633 (* ?x25532 l_0_6_248)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x8042 (* ?x25529 l_0_6_247)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27190 (* ?x22730 l_0_6_158)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27188 (* ?x22727 l_0_6_157)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27186 (* ?x24650 l_0_6_93)))
 (let ((?x28389 (+ (- (- (+ (* (* 2.0 l_0_6_112) l_0_6_92) ?x27186) ?x27188) ?x27190) ?x8042)))
 (= (+ ?x28389 ?x25633) 0.0)))))))))))))
(assert
 (let ((?x25532 (* 2.0 l_0_6_228)))
 (let ((?x25679 (* ?x25532 l_0_6_263)))
 (let ((?x25529 (* 2.0 l_0_6_227)))
 (let ((?x25677 (* ?x25529 l_0_6_262)))
 (let ((?x22730 (* 2.0 l_0_6_138)))
 (let ((?x27251 (* ?x22730 l_0_6_173)))
 (let ((?x22727 (* 2.0 l_0_6_137)))
 (let ((?x27249 (* ?x22727 l_0_6_172)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x27247 (* ?x25045 l_0_6_93)))
 (let ((?x12220 (+ (- (- (+ (* (* 2.0 l_0_6_127) l_0_6_92) ?x27247) ?x27249) ?x27251) ?x25677)))
 (= (+ ?x12220 ?x25679) 0.0)))))))))))))
(assert
 (let ((?x24858 (* l_0_6_99 l_0_6_99)))
 (let ((?x24856 (* l_0_6_98 l_0_6_98)))
 (let ((?x24854 (* l_0_6_97 l_0_6_97)))
 (let ((?x25923 (* l_0_6_235 l_0_6_235)))
 (let ((?x25921 (* l_0_6_234 l_0_6_234)))
 (let ((?x25919 (* l_0_6_233 l_0_6_233)))
 (let ((?x25917 (* l_0_6_232 l_0_6_232)))
 (let ((?x24845 (* l_0_6_145 l_0_6_145)))
 (let ((?x24843 (* l_0_6_144 l_0_6_144)))
 (let ((?x24841 (* l_0_6_143 l_0_6_143)))
 (let ((?x28396 (- (- (- (* l_0_6_100 l_0_6_100) (* l_0_6_142 l_0_6_142)) ?x24841) ?x24843)))
 (let ((?x28403 (+ (+ (+ (+ (+ (+ (- ?x28396 ?x24845) ?x25917) ?x25919) ?x25921) ?x25923) ?x24854) ?x24856)))
 (= (+ ?x28403 ?x24858) 0.0))))))))))))))
(assert
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x25965 (* ?x24620 l_0_6_239)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x25963 (* ?x24617 l_0_6_238)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x25961 (* ?x24614 l_0_6_237)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x25959 (* ?x24611 l_0_6_236)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24901 (* ?x22850 l_0_6_149)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24899 (* ?x22847 l_0_6_148)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24897 (* ?x22844 l_0_6_147)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24895 (* ?x22841 l_0_6_146)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x24888 (* ?x22909 l_0_6_99)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x24885 (* ?x22897 l_0_6_98)))
 (let ((?x24882 (* 2.0 l_0_6_101)))
 (let ((?x24884 (* ?x24882 l_0_6_97)))
 (let ((?x28415 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_104) ?x24884) ?x24885) ?x24888) ?x24895)))
 (let ((?x28422 (+ (+ (+ (+ (- (- (- ?x28415 ?x24897) ?x24899) ?x24901) ?x25959) ?x25961) ?x25963) ?x25965)))
 (= ?x28422 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x25995 (* ?x24620 l_0_6_244)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x25993 (* ?x24617 l_0_6_243)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x25991 (* ?x24614 l_0_6_242)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x25989 (* ?x24611 l_0_6_241)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x22851 (* ?x22850 l_0_6_154)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x22848 (* ?x22847 l_0_6_153)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x22845 (* ?x22844 l_0_6_152)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x22842 (* ?x22841 l_0_6_151)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x22839 (* ?x22608 l_0_6_99)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x22837 (* ?x22605 l_0_6_98)))
 (let ((?x22455 (* 2.0 l_0_6_106)))
 (let ((?x22827 (* ?x22455 l_0_6_97)))
 (let ((?x28434 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_109) ?x22827) ?x22837) ?x22839) ?x22842)))
 (let ((?x28441 (+ (+ (+ (+ (- (- (- ?x28434 ?x22845) ?x22848) ?x22851) ?x25989) ?x25991) ?x25993) ?x25995)))
 (= ?x28441 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x26045 (* ?x24620 l_0_6_257)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x26043 (* ?x24617 l_0_6_256)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x26041 (* ?x24614 l_0_6_255)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x26039 (* ?x24611 l_0_6_254)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x24994 (* ?x22850 l_0_6_167)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x24992 (* ?x22847 l_0_6_166)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x24990 (* ?x22844 l_0_6_165)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x24988 (* ?x22841 l_0_6_164)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x24986 (* ?x24985 l_0_6_99)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x7256 (* ?x7258 l_0_6_98)))
 (let ((?x7264 (* 2.0 l_0_6_119)))
 (let ((?x7265 (* ?x7264 l_0_6_97)))
 (let ((?x28455 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_122) ?x7265) ?x7256) ?x24986) ?x24988)))
 (let ((?x28462 (+ (+ (+ (+ (- (- (- ?x28455 ?x24990) ?x24992) ?x24994) ?x26039) ?x26041) ?x26043) ?x26045)))
 (= ?x28462 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24620 (* 2.0 l_0_6_235)))
 (let ((?x26103 (* ?x24620 l_0_6_265)))
 (let ((?x24617 (* 2.0 l_0_6_234)))
 (let ((?x26101 (* ?x24617 l_0_6_264)))
 (let ((?x24614 (* 2.0 l_0_6_233)))
 (let ((?x26099 (* ?x24614 l_0_6_263)))
 (let ((?x24611 (* 2.0 l_0_6_232)))
 (let ((?x26097 (* ?x24611 l_0_6_262)))
 (let ((?x22850 (* 2.0 l_0_6_145)))
 (let ((?x25057 (* ?x22850 l_0_6_175)))
 (let ((?x22847 (* 2.0 l_0_6_144)))
 (let ((?x25055 (* ?x22847 l_0_6_174)))
 (let ((?x22844 (* 2.0 l_0_6_143)))
 (let ((?x25053 (* ?x22844 l_0_6_173)))
 (let ((?x22841 (* 2.0 l_0_6_142)))
 (let ((?x25051 (* ?x22841 l_0_6_172)))
 (let ((?x25048 (* 2.0 l_0_6_129)))
 (let ((?x25049 (* ?x25048 l_0_6_99)))
 (let ((?x25045 (* 2.0 l_0_6_128)))
 (let ((?x25046 (* ?x25045 l_0_6_98)))
 (let ((?x25042 (* 2.0 l_0_6_127)))
 (let ((?x25043 (* ?x25042 l_0_6_97)))
 (let ((?x28474 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_130) ?x25043) ?x25046) ?x25049) ?x25051)))
 (let ((?x28481 (+ (+ (+ (+ (- (- (- ?x28474 ?x25053) ?x25055) ?x25057) ?x26097) ?x26099) ?x26101) ?x26103)))
 (= ?x28481 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26175 (* l_0_6_240 l_0_6_240)))
 (let ((?x26173 (* l_0_6_239 l_0_6_239)))
 (let ((?x26171 (* l_0_6_238 l_0_6_238)))
 (let ((?x26169 (* l_0_6_237 l_0_6_237)))
 (let ((?x26167 (* l_0_6_236 l_0_6_236)))
 (let ((?x27335 (* l_0_6_150 l_0_6_150)))
 (let ((?x27333 (* l_0_6_149 l_0_6_149)))
 (let ((?x27331 (* l_0_6_148 l_0_6_148)))
 (let ((?x27329 (* l_0_6_147 l_0_6_147)))
 (let ((?x27327 (* l_0_6_146 l_0_6_146)))
 (let ((?x27325 (* l_0_6_105 l_0_6_105)))
 (let ((?x27323 (* l_0_6_104 l_0_6_104)))
 (let ((?x27321 (* l_0_6_103 l_0_6_103)))
 (let ((?x28490 (+ (+ (+ (* l_0_6_101 l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x27321) ?x27323)))
 (let ((?x28497 (+ (- (- (- (- (- (+ ?x28490 ?x27325) ?x27327) ?x27329) ?x27331) ?x27333) ?x27335) ?x26167)))
 (= (+ (+ (+ (+ ?x28497 ?x26169) ?x26171) ?x26173) ?x26175) 0.0)))))))))))))))))
(assert
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26264 (* ?x26263 l_0_6_245)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26261 (* ?x26260 l_0_6_244)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26258 (* ?x26257 l_0_6_243)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26255 (* ?x26254 l_0_6_242)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26252 (* ?x26251 l_0_6_241)))
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x22937 (* ?x22936 l_0_6_155)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x22934 (* ?x22933 l_0_6_154)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x22931 (* ?x22930 l_0_6_153)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x22928 (* ?x22927 l_0_6_152)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x22925 (* ?x22924 l_0_6_151)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x22916 (* ?x22915 l_0_6_110)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x22913 (* ?x22912 l_0_6_109)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x22910 (* ?x22909 l_0_6_108)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x22907 (* ?x22897 l_0_6_107)))
 (let ((?x28519 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_106) ?x22907) ?x22910) ?x22913) ?x22916)))
 (let ((?x28526 (+ (+ (- (- (- (- (- ?x28519 ?x22925) ?x22928) ?x22931) ?x22934) ?x22937) ?x26252) ?x26255)))
 (= (+ (+ (+ ?x28526 ?x26258) ?x26261) ?x26264) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26331 (* ?x26263 l_0_6_251)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26329 (* ?x26260 l_0_6_250)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26327 (* ?x26257 l_0_6_249)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26325 (* ?x26254 l_0_6_248)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26323 (* ?x26251 l_0_6_247)))
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27384 (* ?x22936 l_0_6_161)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27382 (* ?x22933 l_0_6_160)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27380 (* ?x22930 l_0_6_159)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27378 (* ?x22927 l_0_6_158)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27376 (* ?x22924 l_0_6_157)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27374 (* ?x22915 l_0_6_116)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27372 (* ?x22912 l_0_6_115)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27370 (* ?x22909 l_0_6_114)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27368 (* ?x22897 l_0_6_113)))
 (let ((?x28548 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_112) ?x27368) ?x27370) ?x27372) ?x27374)))
 (let ((?x28555 (+ (+ (- (- (- (- (- ?x28548 ?x27376) ?x27378) ?x27380) ?x27382) ?x27384) ?x26323) ?x26325)))
 (= (+ (+ (+ ?x28555 ?x26327) ?x26329) ?x26331) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26362 (* ?x26263 l_0_6_258)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26360 (* ?x26260 l_0_6_257)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26358 (* ?x26257 l_0_6_256)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26356 (* ?x26254 l_0_6_255)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26354 (* ?x26251 l_0_6_254)))
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27421 (* ?x22936 l_0_6_168)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27419 (* ?x22933 l_0_6_167)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27417 (* ?x22930 l_0_6_166)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27415 (* ?x22927 l_0_6_165)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27413 (* ?x22924 l_0_6_164)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27411 (* ?x22915 l_0_6_123)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27401 (* ?x22912 l_0_6_122)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x10679 (* ?x22909 l_0_6_121)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x10647 (* ?x22897 l_0_6_120)))
 (let ((?x28580 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_119) ?x10647) ?x10679) ?x27401) ?x27411)))
 (let ((?x28587 (+ (+ (- (- (- (- (- ?x28580 ?x27413) ?x27415) ?x27417) ?x27419) ?x27421) ?x26354) ?x26356)))
 (= (+ (+ (+ ?x28587 ?x26358) ?x26360) ?x26362) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26263 (* 2.0 l_0_6_240)))
 (let ((?x26422 (* ?x26263 l_0_6_266)))
 (let ((?x26260 (* 2.0 l_0_6_239)))
 (let ((?x26420 (* ?x26260 l_0_6_265)))
 (let ((?x26257 (* 2.0 l_0_6_238)))
 (let ((?x26418 (* ?x26257 l_0_6_264)))
 (let ((?x26254 (* 2.0 l_0_6_237)))
 (let ((?x26416 (* ?x26254 l_0_6_263)))
 (let ((?x26251 (* 2.0 l_0_6_236)))
 (let ((?x26414 (* ?x26251 l_0_6_262)))
 (let ((?x22936 (* 2.0 l_0_6_150)))
 (let ((?x27464 (* ?x22936 l_0_6_176)))
 (let ((?x22933 (* 2.0 l_0_6_149)))
 (let ((?x27462 (* ?x22933 l_0_6_175)))
 (let ((?x22930 (* 2.0 l_0_6_148)))
 (let ((?x27460 (* ?x22930 l_0_6_174)))
 (let ((?x22927 (* 2.0 l_0_6_147)))
 (let ((?x27458 (* ?x22927 l_0_6_173)))
 (let ((?x22924 (* 2.0 l_0_6_146)))
 (let ((?x27456 (* ?x22924 l_0_6_172)))
 (let ((?x22915 (* 2.0 l_0_6_105)))
 (let ((?x27454 (* ?x22915 l_0_6_131)))
 (let ((?x22912 (* 2.0 l_0_6_104)))
 (let ((?x27444 (* ?x22912 l_0_6_130)))
 (let ((?x22909 (* 2.0 l_0_6_103)))
 (let ((?x27441 (* ?x22909 l_0_6_129)))
 (let ((?x22897 (* 2.0 l_0_6_102)))
 (let ((?x27437 (* ?x22897 l_0_6_128)))
 (let ((?x28601 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_127) ?x27437) ?x27441) ?x27444) ?x27454)))
 (let ((?x28608 (+ (+ (- (- (- (- (- ?x28601 ?x27456) ?x27458) ?x27460) ?x27462) ?x27464) ?x26414) ?x26416)))
 (= (+ (+ (+ ?x28608 ?x26418) ?x26420) ?x26422) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26476 (* l_0_6_246 l_0_6_246)))
 (let ((?x26474 (* l_0_6_245 l_0_6_245)))
 (let ((?x26472 (* l_0_6_244 l_0_6_244)))
 (let ((?x26470 (* l_0_6_243 l_0_6_243)))
 (let ((?x26468 (* l_0_6_242 l_0_6_242)))
 (let ((?x26466 (* l_0_6_241 l_0_6_241)))
 (let ((?x23016 (* l_0_6_156 l_0_6_156)))
 (let ((?x23014 (* l_0_6_155 l_0_6_155)))
 (let ((?x23012 (* l_0_6_154 l_0_6_154)))
 (let ((?x23010 (* l_0_6_153 l_0_6_153)))
 (let ((?x23008 (* l_0_6_152 l_0_6_152)))
 (let ((?x23006 (* l_0_6_151 l_0_6_151)))
 (let ((?x23004 (* l_0_6_111 l_0_6_111)))
 (let ((?x23002 (* l_0_6_110 l_0_6_110)))
 (let ((?x22990 (* l_0_6_109 l_0_6_109)))
 (let ((?x22986 (* l_0_6_108 l_0_6_108)))
 (let ((?x28631 (+ (+ (+ (* l_0_6_106 l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x22986) ?x22990)))
 (let ((?x28638 (- (- (- (- (- (+ (+ ?x28631 ?x23002) ?x23004) ?x23006) ?x23008) ?x23010) ?x23012) ?x23014)))
 (let ((?x28645 (+ (+ (+ (+ (+ (+ (- ?x28638 ?x23016) ?x26466) ?x26468) ?x26470) ?x26472) ?x26474) ?x26476)))
 (= ?x28645 0.0)))))))))))))))))))))
(assert
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x26517 (* ?x22509 l_0_6_252)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x26515 (* ?x22506 l_0_6_251)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x26513 (* ?x22503 l_0_6_250)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x26511 (* ?x22500 l_0_6_249)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x26509 (* ?x22497 l_0_6_248)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x26507 (* ?x22494 l_0_6_247)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23087 (* ?x22635 l_0_6_162)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23085 (* ?x22632 l_0_6_161)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23083 (* ?x22629 l_0_6_160)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23081 (* ?x22626 l_0_6_159)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23079 (* ?x22623 l_0_6_158)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23077 (* ?x22620 l_0_6_157)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23075 (* ?x22617 l_0_6_117)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23073 (* ?x22614 l_0_6_116)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23071 (* ?x22611 l_0_6_115)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23069 (* ?x22608 l_0_6_114)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23057 (* ?x22605 l_0_6_113)))
 (let ((?x28664 (+ (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_112) ?x23057) ?x23069) ?x23071) ?x23073)))
 (let ((?x28671 (- (- (- (- (- (- (+ ?x28664 ?x23075) ?x23077) ?x23079) ?x23081) ?x23083) ?x23085) ?x23087)))
 (= (+ (+ (+ (+ (+ (+ ?x28671 ?x26507) ?x26509) ?x26511) ?x26513) ?x26515) ?x26517) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22509 (* 2.0 l_0_6_246)))
 (let ((?x26561 (* ?x22509 l_0_6_267)))
 (let ((?x22506 (* 2.0 l_0_6_245)))
 (let ((?x26559 (* ?x22506 l_0_6_266)))
 (let ((?x22503 (* 2.0 l_0_6_244)))
 (let ((?x26557 (* ?x22503 l_0_6_265)))
 (let ((?x22500 (* 2.0 l_0_6_243)))
 (let ((?x26555 (* ?x22500 l_0_6_264)))
 (let ((?x22497 (* 2.0 l_0_6_242)))
 (let ((?x26553 (* ?x22497 l_0_6_263)))
 (let ((?x22494 (* 2.0 l_0_6_241)))
 (let ((?x26551 (* ?x22494 l_0_6_262)))
 (let ((?x22635 (* 2.0 l_0_6_156)))
 (let ((?x23243 (* ?x22635 l_0_6_177)))
 (let ((?x22632 (* 2.0 l_0_6_155)))
 (let ((?x23241 (* ?x22632 l_0_6_176)))
 (let ((?x22629 (* 2.0 l_0_6_154)))
 (let ((?x23239 (* ?x22629 l_0_6_175)))
 (let ((?x22626 (* 2.0 l_0_6_153)))
 (let ((?x23237 (* ?x22626 l_0_6_174)))
 (let ((?x22623 (* 2.0 l_0_6_152)))
 (let ((?x23235 (* ?x22623 l_0_6_173)))
 (let ((?x22620 (* 2.0 l_0_6_151)))
 (let ((?x23233 (* ?x22620 l_0_6_172)))
 (let ((?x22617 (* 2.0 l_0_6_111)))
 (let ((?x23231 (* ?x22617 l_0_6_132)))
 (let ((?x22614 (* 2.0 l_0_6_110)))
 (let ((?x23229 (* ?x22614 l_0_6_131)))
 (let ((?x22611 (* 2.0 l_0_6_109)))
 (let ((?x23227 (* ?x22611 l_0_6_130)))
 (let ((?x22608 (* 2.0 l_0_6_108)))
 (let ((?x23225 (* ?x22608 l_0_6_129)))
 (let ((?x22605 (* 2.0 l_0_6_107)))
 (let ((?x23223 (* ?x22605 l_0_6_128)))
 (let ((?x14048 (+ (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_127) ?x23223) ?x23225) ?x23227) ?x23229)))
 (let ((?x28688 (- (- (- (- (- (- (+ ?x14048 ?x23231) ?x23233) ?x23235) ?x23237) ?x23239) ?x23241) ?x23243)))
 (= (+ (+ (+ (+ (+ (+ ?x28688 ?x26551) ?x26553) ?x26555) ?x26557) ?x26559) ?x26561) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26617 (* l_0_6_253 l_0_6_253)))
 (let ((?x26615 (* l_0_6_252 l_0_6_252)))
 (let ((?x26613 (* l_0_6_251 l_0_6_251)))
 (let ((?x26611 (* l_0_6_250 l_0_6_250)))
 (let ((?x26608 (* l_0_6_249 l_0_6_249)))
 (let ((?x26606 (* l_0_6_248 l_0_6_248)))
 (let ((?x26604 (* l_0_6_247 l_0_6_247)))
 (let ((?x27521 (* l_0_6_163 l_0_6_163)))
 (let ((?x27519 (* l_0_6_162 l_0_6_162)))
 (let ((?x27517 (* l_0_6_161 l_0_6_161)))
 (let ((?x27515 (* l_0_6_160 l_0_6_160)))
 (let ((?x27513 (* l_0_6_159 l_0_6_159)))
 (let ((?x27511 (* l_0_6_158 l_0_6_158)))
 (let ((?x27509 (* l_0_6_157 l_0_6_157)))
 (let ((?x27507 (* l_0_6_118 l_0_6_118)))
 (let ((?x27505 (* l_0_6_117 l_0_6_117)))
 (let ((?x27503 (* l_0_6_116 l_0_6_116)))
 (let ((?x27501 (* l_0_6_115 l_0_6_115)))
 (let ((?x27491 (* l_0_6_114 l_0_6_114)))
 (let ((?x28706 (+ (+ (+ (* l_0_6_112 l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27491) ?x27501)))
 (let ((?x28713 (- (- (- (- (+ (+ (+ ?x28706 ?x27503) ?x27505) ?x27507) ?x27509) ?x27511) ?x27513) ?x27515)))
 (let ((?x28720 (+ (+ (+ (+ (- (- (- ?x28713 ?x27517) ?x27519) ?x27521) ?x26604) ?x26606) ?x26608) ?x26611)))
 (= (+ (+ (+ ?x28720 ?x26613) ?x26615) ?x26617) 0.0))))))))))))))))))))))))
(assert
 (let ((?x26675 (* 2.0 l_0_6_253)))
 (let ((?x26676 (* ?x26675 l_0_6_260)))
 (let ((?x26672 (* 2.0 l_0_6_252)))
 (let ((?x26673 (* ?x26672 l_0_6_259)))
 (let ((?x26669 (* 2.0 l_0_6_251)))
 (let ((?x26670 (* ?x26669 l_0_6_258)))
 (let ((?x26666 (* 2.0 l_0_6_250)))
 (let ((?x26667 (* ?x26666 l_0_6_257)))
 (let ((?x26662 (* 2.0 l_0_6_249)))
 (let ((?x26663 (* ?x26662 l_0_6_256)))
 (let ((?x26659 (* 2.0 l_0_6_248)))
 (let ((?x26660 (* ?x26659 l_0_6_255)))
 (let ((?x26656 (* 2.0 l_0_6_247)))
 (let ((?x26657 (* ?x26656 l_0_6_254)))
 (let ((?x27042 (* 2.0 l_0_6_163)))
 (let ((?x27575 (* ?x27042 l_0_6_170)))
 (let ((?x27039 (* 2.0 l_0_6_162)))
 (let ((?x27573 (* ?x27039 l_0_6_169)))
 (let ((?x27036 (* 2.0 l_0_6_161)))
 (let ((?x27571 (* ?x27036 l_0_6_168)))
 (let ((?x27033 (* 2.0 l_0_6_160)))
 (let ((?x27569 (* ?x27033 l_0_6_167)))
 (let ((?x27030 (* 2.0 l_0_6_159)))
 (let ((?x27567 (* ?x27030 l_0_6_166)))
 (let ((?x27027 (* 2.0 l_0_6_158)))
 (let ((?x27565 (* ?x27027 l_0_6_165)))
 (let ((?x27024 (* 2.0 l_0_6_157)))
 (let ((?x27563 (* ?x27024 l_0_6_164)))
 (let ((?x27019 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27019 l_0_6_125)))
 (let ((?x27016 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27016 l_0_6_124)))
 (let ((?x27013 (* 2.0 l_0_6_116)))
 (let ((?x27557 (* ?x27013 l_0_6_123)))
 (let ((?x27010 (* 2.0 l_0_6_115)))
 (let ((?x27555 (* ?x27010 l_0_6_122)))
 (let ((?x24653 (* 2.0 l_0_6_114)))
 (let ((?x27553 (* ?x24653 l_0_6_121)))
 (let ((?x24650 (* 2.0 l_0_6_113)))
 (let ((?x27551 (* ?x24650 l_0_6_120)))
 (let ((?x14322 (+ (+ (+ (+ (* (* 2.0 l_0_6_112) l_0_6_119) ?x27551) ?x27553) ?x27555) ?x27557)))
 (let ((?x28742 (- (- (- (- (- (+ (+ ?x14322 ?x27559) ?x27561) ?x27563) ?x27565) ?x27567) ?x27569) ?x27571)))
 (let ((?x28749 (+ (+ (+ (+ (+ (- (- ?x28742 ?x27573) ?x27575) ?x26657) ?x26660) ?x26663) ?x26667) ?x26670)))
 (= (+ (+ ?x28749 ?x26673) ?x26676) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26797 (* l_0_6_261 l_0_6_261)))
 (let ((?x26795 (* l_0_6_260 l_0_6_260)))
 (let ((?x26793 (* l_0_6_259 l_0_6_259)))
 (let ((?x26791 (* l_0_6_258 l_0_6_258)))
 (let ((?x26789 (* l_0_6_257 l_0_6_257)))
 (let ((?x26787 (* l_0_6_256 l_0_6_256)))
 (let ((?x26785 (* l_0_6_255 l_0_6_255)))
 (let ((?x26817 (* l_0_6_254 l_0_6_254)))
 (let ((?x27637 (* l_0_6_171 l_0_6_171)))
 (let ((?x27635 (* l_0_6_170 l_0_6_170)))
 (let ((?x27633 (* l_0_6_169 l_0_6_169)))
 (let ((?x27631 (* l_0_6_168 l_0_6_168)))
 (let ((?x27629 (* l_0_6_167 l_0_6_167)))
 (let ((?x27627 (* l_0_6_166 l_0_6_166)))
 (let ((?x27625 (* l_0_6_165 l_0_6_165)))
 (let ((?x27623 (* l_0_6_164 l_0_6_164)))
 (let ((?x27621 (* l_0_6_126 l_0_6_126)))
 (let ((?x27619 (* l_0_6_125 l_0_6_125)))
 (let ((?x27617 (* l_0_6_124 l_0_6_124)))
 (let ((?x27615 (* l_0_6_123 l_0_6_123)))
 (let ((?x27613 (* l_0_6_122 l_0_6_122)))
 (let ((?x27611 (* l_0_6_121 l_0_6_121)))
 (let ((?x14597 (+ (+ (+ (* l_0_6_119 l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27611) ?x27613)))
 (let ((?x14590 (- (- (- (+ (+ (+ (+ ?x14597 ?x27615) ?x27617) ?x27619) ?x27621) ?x27623) ?x27625) ?x27627)))
 (let ((?x28764 (+ (+ (- (- (- (- (- ?x14590 ?x27629) ?x27631) ?x27633) ?x27635) ?x27637) ?x26817) ?x26785)))
 (= (+ (+ (+ (+ (+ (+ ?x28764 ?x26787) ?x26789) ?x26791) ?x26793) ?x26795) ?x26797) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26869 (* (* 2.0 l_0_6_261) l_0_6_269)))
 (let ((?x26866 (* (* 2.0 l_0_6_260) l_0_6_268)))
 (let ((?x26863 (* (* 2.0 l_0_6_259) l_0_6_267)))
 (let ((?x26860 (* (* 2.0 l_0_6_258) l_0_6_266)))
 (let ((?x26857 (* (* 2.0 l_0_6_257) l_0_6_265)))
 (let ((?x26854 (* (* 2.0 l_0_6_256) l_0_6_264)))
 (let ((?x26851 (* (* 2.0 l_0_6_255) l_0_6_263)))
 (let ((?x27716 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27713 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27710 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27707 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27704 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27701 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27698 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27695 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27692 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27689 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27686 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27683 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27680 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x24985 (* 2.0 l_0_6_121)))
 (let ((?x27677 (* ?x24985 l_0_6_129)))
 (let ((?x7258 (* 2.0 l_0_6_120)))
 (let ((?x27675 (* ?x7258 l_0_6_128)))
 (let ((?x14660 (+ (+ (+ (+ (* (* 2.0 l_0_6_119) l_0_6_127) ?x27675) ?x27677) ?x27680) ?x27683)))
 (let ((?x28788 (- (- (- (- (+ (+ (+ ?x14660 ?x27686) ?x27689) ?x27692) ?x27695) ?x27698) ?x27701) ?x27704)))
 (let ((?x28795 (+ (- (- (- (- ?x28788 ?x27707) ?x27710) ?x27713) ?x27716) (* (* 2.0 l_0_6_254) l_0_6_262))))
 (let ((?x28802 (+ (+ (+ (+ (+ (+ (+ ?x28795 ?x26851) ?x26854) ?x26857) ?x26860) ?x26863) ?x26866) ?x26869)))
 (= ?x28802 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x26944 (* l_0_6_270 l_0_6_270)))
 (let ((?x26942 (* l_0_6_269 l_0_6_269)))
 (let ((?x26940 (* l_0_6_268 l_0_6_268)))
 (let ((?x26938 (* l_0_6_267 l_0_6_267)))
 (let ((?x26936 (* l_0_6_266 l_0_6_266)))
 (let ((?x26934 (* l_0_6_265 l_0_6_265)))
 (let ((?x26932 (* l_0_6_264 l_0_6_264)))
 (let ((?x26930 (* l_0_6_263 l_0_6_263)))
 (let ((?x10386 (* l_0_6_262 l_0_6_262)))
 (let ((?x27792 (* l_0_6_180 l_0_6_180)))
 (let ((?x27790 (* l_0_6_179 l_0_6_179)))
 (let ((?x27788 (* l_0_6_178 l_0_6_178)))
 (let ((?x27786 (* l_0_6_177 l_0_6_177)))
 (let ((?x27784 (* l_0_6_176 l_0_6_176)))
 (let ((?x27782 (* l_0_6_175 l_0_6_175)))
 (let ((?x27780 (* l_0_6_174 l_0_6_174)))
 (let ((?x27778 (* l_0_6_173 l_0_6_173)))
 (let ((?x27776 (* l_0_6_172 l_0_6_172)))
 (let ((?x27774 (* l_0_6_135 l_0_6_135)))
 (let ((?x27772 (* l_0_6_134 l_0_6_134)))
 (let ((?x27770 (* l_0_6_133 l_0_6_133)))
 (let ((?x27768 (* l_0_6_132 l_0_6_132)))
 (let ((?x27755 (* l_0_6_131 l_0_6_131)))
 (let ((?x27752 (* l_0_6_130 l_0_6_130)))
 (let ((?x27748 (* l_0_6_129 l_0_6_129)))
 (let ((?x12778 (+ (+ (+ (* l_0_6_127 l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27748) ?x27752)))
 (let ((?x14803 (- (- (+ (+ (+ (+ (+ ?x12778 ?x27755) ?x27768) ?x27770) ?x27772) ?x27774) ?x27776) ?x27778)))
 (let ((?x28804 (- (- (- (- (- (- (- ?x14803 ?x27780) ?x27782) ?x27784) ?x27786) ?x27788) ?x27790) ?x27792)))
 (let ((?x28811 (+ (+ (+ (+ (+ (+ (+ ?x28804 ?x10386) ?x26930) ?x26932) ?x26934) ?x26936) ?x26938) ?x26940)))
 (= (+ (+ ?x28811 ?x26942) ?x26944) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x14894 (- (* (* (- 2.0) l_0_6_181) l_0_6_182) (* (* 2.0 l_0_6_271) l_0_6_272))))
 (= (- ?x14894 (* (* 2.0 l_0_6_316) l_0_6_317)) 0.0)))
(assert
 (let ((?x28842 (- (* (* (- 2.0) l_0_6_181) l_0_6_187) (* (* 2.0 l_0_6_271) l_0_6_277))))
 (= (- ?x28842 (* (* 2.0 l_0_6_316) l_0_6_322)) 0.0)))
(assert
 (let ((?x28856 (- (* (* (- 2.0) l_0_6_181) l_0_6_196) (* (* 2.0 l_0_6_271) l_0_6_286))))
 (= (- ?x28856 (* (* 2.0 l_0_6_316) l_0_6_331)) 0.0)))
(assert
 (let ((?x28873 (- (* (* (- 2.0) l_0_6_181) l_0_6_209) (* (* 2.0 l_0_6_271) l_0_6_299))))
 (= (- ?x28873 (* (* 2.0 l_0_6_316) l_0_6_344)) 0.0)))
(assert
 (let ((?x28891 (- (* (* (- 2.0) l_0_6_181) l_0_6_217) (* (* 2.0 l_0_6_271) l_0_6_307))))
 (= (- ?x28891 (* (* 2.0 l_0_6_316) l_0_6_352)) 0.0)))
(assert
 (let ((?x28915 (* l_0_6_318 l_0_6_318)))
 (let ((?x28913 (* l_0_6_317 l_0_6_317)))
 (let ((?x28911 (* l_0_6_273 l_0_6_273)))
 (let ((?x28909 (* l_0_6_272 l_0_6_272)))
 (let ((?x28908 (- (* (* (- 1.0) l_0_6_182) l_0_6_182) (* (* 1.0 l_0_6_183) l_0_6_183))))
 (= (- (- (- (- ?x28908 ?x28909) ?x28911) ?x28913) ?x28915) 0.0)))))))
(assert
 (let ((?x28931 (- (* (* (- 2.0) l_0_6_182) l_0_6_187) (* (* 2.0 l_0_6_183) l_0_6_188))))
 (let ((?x28935 (- (- ?x28931 (* (* 2.0 l_0_6_272) l_0_6_277)) (* (* 2.0 l_0_6_273) l_0_6_278))))
 (let ((?x28939 (- (- ?x28935 (* (* 2.0 l_0_6_317) l_0_6_322)) (* (* 2.0 l_0_6_318) l_0_6_323))))
 (= ?x28939 0.0)))))
(assert
 (let ((?x28967 (- (* (* (- 2.0) l_0_6_182) l_0_6_196) (* (* 2.0 l_0_6_183) l_0_6_197))))
 (let ((?x28971 (- (- ?x28967 (* (* 2.0 l_0_6_272) l_0_6_286)) (* (* 2.0 l_0_6_273) l_0_6_287))))
 (let ((?x28975 (- (- ?x28971 (* (* 2.0 l_0_6_317) l_0_6_331)) (* (* 2.0 l_0_6_318) l_0_6_332))))
 (= ?x28975 0.0)))))
(assert
 (let ((?x28993 (- (* (* (- 2.0) l_0_6_182) l_0_6_202) (* (* 2.0 l_0_6_183) l_0_6_203))))
 (let ((?x28997 (- (- ?x28993 (* (* 2.0 l_0_6_272) l_0_6_292)) (* (* 2.0 l_0_6_273) l_0_6_293))))
 (let ((?x29001 (- (- ?x28997 (* (* 2.0 l_0_6_317) l_0_6_337)) (* (* 2.0 l_0_6_318) l_0_6_338))))
 (= ?x29001 0.0)))))
(assert
 (let ((?x29020 (- (* (* (- 2.0) l_0_6_182) l_0_6_217) (* (* 2.0 l_0_6_183) l_0_6_218))))
 (let ((?x29024 (- (- ?x29020 (* (* 2.0 l_0_6_272) l_0_6_307)) (* (* 2.0 l_0_6_273) l_0_6_308))))
 (let ((?x29028 (- (- ?x29024 (* (* 2.0 l_0_6_317) l_0_6_352)) (* (* 2.0 l_0_6_318) l_0_6_353))))
 (= ?x29028 0.0)))))
(assert
 (let ((?x29077 (* l_0_6_325 l_0_6_325)))
 (let ((?x29075 (* l_0_6_324 l_0_6_324)))
 (let ((?x29073 (* l_0_6_323 l_0_6_323)))
 (let ((?x29071 (* l_0_6_322 l_0_6_322)))
 (let ((?x29069 (* l_0_6_280 l_0_6_280)))
 (let ((?x29067 (* l_0_6_279 l_0_6_279)))
 (let ((?x29065 (* l_0_6_278 l_0_6_278)))
 (let ((?x29063 (* l_0_6_277 l_0_6_277)))
 (let ((?x29056 (- (* (* (- 1.0) l_0_6_187) l_0_6_187) (* (* 1.0 l_0_6_188) l_0_6_188))))
 (let ((?x29062 (- (- ?x29056 (* (* 1.0 l_0_6_189) l_0_6_189)) (* (* 1.0 l_0_6_190) l_0_6_190))))
 (let ((?x29076 (- (- (- (- (- (- (- ?x29062 ?x29063) ?x29065) ?x29067) ?x29069) ?x29071) ?x29073) ?x29075)))
 (= (- ?x29076 ?x29077) 0.0)))))))))))))
(assert
 (let ((?x29105 (- (* (* (- 2.0) l_0_6_187) l_0_6_196) (* (* 2.0 l_0_6_188) l_0_6_197))))
 (let ((?x29109 (- (- ?x29105 (* (* 2.0 l_0_6_189) l_0_6_198)) (* (* 2.0 l_0_6_190) l_0_6_199))))
 (let ((?x29113 (- (- ?x29109 (* (* 2.0 l_0_6_277) l_0_6_286)) (* (* 2.0 l_0_6_278) l_0_6_287))))
 (let ((?x29117 (- (- ?x29113 (* (* 2.0 l_0_6_279) l_0_6_288)) (* (* 2.0 l_0_6_280) l_0_6_289))))
 (let ((?x29121 (- (- ?x29117 (* (* 2.0 l_0_6_322) l_0_6_331)) (* (* 2.0 l_0_6_323) l_0_6_332))))
 (let ((?x29125 (- (- ?x29121 (* (* 2.0 l_0_6_324) l_0_6_333)) (* (* 2.0 l_0_6_325) l_0_6_334))))
 (= ?x29125 0.0))))))))
(assert
 (let ((?x29181 (- (* (* (- 2.0) l_0_6_187) l_0_6_209) (* (* 2.0 l_0_6_188) l_0_6_210))))
 (let ((?x29185 (- (- ?x29181 (* (* 2.0 l_0_6_189) l_0_6_211)) (* (* 2.0 l_0_6_190) l_0_6_212))))
 (let ((?x29189 (- (- ?x29185 (* (* 2.0 l_0_6_277) l_0_6_299)) (* (* 2.0 l_0_6_278) l_0_6_300))))
 (let ((?x29193 (- (- ?x29189 (* (* 2.0 l_0_6_279) l_0_6_301)) (* (* 2.0 l_0_6_280) l_0_6_302))))
 (let ((?x29197 (- (- ?x29193 (* (* 2.0 l_0_6_322) l_0_6_344)) (* (* 2.0 l_0_6_323) l_0_6_345))))
 (let ((?x29201 (- (- ?x29197 (* (* 2.0 l_0_6_324) l_0_6_346)) (* (* 2.0 l_0_6_325) l_0_6_347))))
 (= ?x29201 0.0))))))))
(assert
 (let ((?x29229 (- (* (* (- 2.0) l_0_6_187) l_0_6_217) (* (* 2.0 l_0_6_188) l_0_6_218))))
 (let ((?x29233 (- (- ?x29229 (* (* 2.0 l_0_6_189) l_0_6_219)) (* (* 2.0 l_0_6_190) l_0_6_220))))
 (let ((?x29237 (- (- ?x29233 (* (* 2.0 l_0_6_277) l_0_6_307)) (* (* 2.0 l_0_6_278) l_0_6_308))))
 (let ((?x29241 (- (- ?x29237 (* (* 2.0 l_0_6_279) l_0_6_309)) (* (* 2.0 l_0_6_280) l_0_6_310))))
 (let ((?x29245 (- (- ?x29241 (* (* 2.0 l_0_6_322) l_0_6_352)) (* (* 2.0 l_0_6_323) l_0_6_353))))
 (let ((?x29249 (- (- ?x29245 (* (* 2.0 l_0_6_324) l_0_6_354)) (* (* 2.0 l_0_6_325) l_0_6_355))))
 (= ?x29249 0.0))))))))
(assert
 (let ((?x29324 (* l_0_6_336 l_0_6_336)))
 (let ((?x29322 (* l_0_6_335 l_0_6_335)))
 (let ((?x29320 (* l_0_6_334 l_0_6_334)))
 (let ((?x29318 (* l_0_6_333 l_0_6_333)))
 (let ((?x29316 (* l_0_6_332 l_0_6_332)))
 (let ((?x29314 (* l_0_6_331 l_0_6_331)))
 (let ((?x29312 (* l_0_6_291 l_0_6_291)))
 (let ((?x29310 (* l_0_6_290 l_0_6_290)))
 (let ((?x29308 (* l_0_6_289 l_0_6_289)))
 (let ((?x29306 (* l_0_6_288 l_0_6_288)))
 (let ((?x29304 (* l_0_6_287 l_0_6_287)))
 (let ((?x29302 (* l_0_6_286 l_0_6_286)))
 (let ((?x29289 (- (* (* (- 1.0) l_0_6_196) l_0_6_196) (* (* 1.0 l_0_6_197) l_0_6_197))))
 (let ((?x29295 (- (- ?x29289 (* (* 1.0 l_0_6_198) l_0_6_198)) (* (* 1.0 l_0_6_199) l_0_6_199))))
 (let ((?x29301 (- (- ?x29295 (* (* 1.0 l_0_6_200) l_0_6_200)) (* (* 1.0 l_0_6_201) l_0_6_201))))
 (let ((?x29315 (- (- (- (- (- (- (- ?x29301 ?x29302) ?x29304) ?x29306) ?x29308) ?x29310) ?x29312) ?x29314)))
 (= (- (- (- (- (- ?x29315 ?x29316) ?x29318) ?x29320) ?x29322) ?x29324) 0.0))))))))))))))))))
(assert
 (let ((?x29361 (- (* (* (- 2.0) l_0_6_196) l_0_6_202) (* (* 2.0 l_0_6_197) l_0_6_203))))
 (let ((?x29365 (- (- ?x29361 (* (* 2.0 l_0_6_198) l_0_6_204)) (* (* 2.0 l_0_6_199) l_0_6_205))))
 (let ((?x29369 (- (- ?x29365 (* (* 2.0 l_0_6_200) l_0_6_206)) (* (* 2.0 l_0_6_201) l_0_6_207))))
 (let ((?x29373 (- (- ?x29369 (* (* 2.0 l_0_6_286) l_0_6_292)) (* (* 2.0 l_0_6_287) l_0_6_293))))
 (let ((?x29377 (- (- ?x29373 (* (* 2.0 l_0_6_288) l_0_6_294)) (* (* 2.0 l_0_6_289) l_0_6_295))))
 (let ((?x29381 (- (- ?x29377 (* (* 2.0 l_0_6_290) l_0_6_296)) (* (* 2.0 l_0_6_291) l_0_6_297))))
 (let ((?x29385 (- (- ?x29381 (* (* 2.0 l_0_6_331) l_0_6_337)) (* (* 2.0 l_0_6_332) l_0_6_338))))
 (let ((?x29389 (- (- ?x29385 (* (* 2.0 l_0_6_333) l_0_6_339)) (* (* 2.0 l_0_6_334) l_0_6_340))))
 (let ((?x29393 (- (- ?x29389 (* (* 2.0 l_0_6_335) l_0_6_341)) (* (* 2.0 l_0_6_336) l_0_6_342))))
 (= ?x29393 0.0)))))))))))
(assert
 (let ((?x29426 (- (* (* (- 2.0) l_0_6_196) l_0_6_217) (* (* 2.0 l_0_6_197) l_0_6_218))))
 (let ((?x29430 (- (- ?x29426 (* (* 2.0 l_0_6_198) l_0_6_219)) (* (* 2.0 l_0_6_199) l_0_6_220))))
 (let ((?x29434 (- (- ?x29430 (* (* 2.0 l_0_6_200) l_0_6_221)) (* (* 2.0 l_0_6_201) l_0_6_222))))
 (let ((?x29438 (- (- ?x29434 (* (* 2.0 l_0_6_286) l_0_6_307)) (* (* 2.0 l_0_6_287) l_0_6_308))))
 (let ((?x29442 (- (- ?x29438 (* (* 2.0 l_0_6_288) l_0_6_309)) (* (* 2.0 l_0_6_289) l_0_6_310))))
 (let ((?x29446 (- (- ?x29442 (* (* 2.0 l_0_6_290) l_0_6_311)) (* (* 2.0 l_0_6_291) l_0_6_312))))
 (let ((?x29450 (- (- ?x29446 (* (* 2.0 l_0_6_331) l_0_6_352)) (* (* 2.0 l_0_6_332) l_0_6_353))))
 (let ((?x29454 (- (- ?x29450 (* (* 2.0 l_0_6_333) l_0_6_354)) (* (* 2.0 l_0_6_334) l_0_6_355))))
 (let ((?x29458 (- (- ?x29454 (* (* 2.0 l_0_6_335) l_0_6_356)) (* (* 2.0 l_0_6_336) l_0_6_357))))
 (= ?x29458 0.0)))))))))))
(assert
 (let ((?x29564 (* l_0_6_343 l_0_6_343)))
 (let ((?x29562 (* l_0_6_342 l_0_6_342)))
 (let ((?x29560 (* l_0_6_341 l_0_6_341)))
 (let ((?x29558 (* l_0_6_340 l_0_6_340)))
 (let ((?x29556 (* l_0_6_339 l_0_6_339)))
 (let ((?x29554 (* l_0_6_338 l_0_6_338)))
 (let ((?x29552 (* l_0_6_337 l_0_6_337)))
 (let ((?x29550 (* l_0_6_298 l_0_6_298)))
 (let ((?x29548 (* l_0_6_297 l_0_6_297)))
 (let ((?x29546 (* l_0_6_296 l_0_6_296)))
 (let ((?x29544 (* l_0_6_295 l_0_6_295)))
 (let ((?x29542 (* l_0_6_294 l_0_6_294)))
 (let ((?x29540 (* l_0_6_293 l_0_6_293)))
 (let ((?x29538 (* l_0_6_292 l_0_6_292)))
 (let ((?x29522 (- (* (* (- 1.0) l_0_6_202) l_0_6_202) (* (* 1.0 l_0_6_203) l_0_6_203))))
 (let ((?x29528 (- (- ?x29522 (* (* 1.0 l_0_6_204) l_0_6_204)) (* (* 1.0 l_0_6_205) l_0_6_205))))
 (let ((?x29534 (- (- ?x29528 (* (* 1.0 l_0_6_206) l_0_6_206)) (* (* 1.0 l_0_6_207) l_0_6_207))))
 (let ((?x29543 (- (- (- (- ?x29534 (* (* 1.0 l_0_6_208) l_0_6_208)) ?x29538) ?x29540) ?x29542)))
 (let ((?x29557 (- (- (- (- (- (- (- ?x29543 ?x29544) ?x29546) ?x29548) ?x29550) ?x29552) ?x29554) ?x29556)))
 (= (- (- (- (- ?x29557 ?x29558) ?x29560) ?x29562) ?x29564) 0.0)))))))))))))))))))))
(assert
 (let ((?x29613 (- (* (* (- 2.0) l_0_6_202) l_0_6_209) (* (* 2.0 l_0_6_203) l_0_6_210))))
 (let ((?x29617 (- (- ?x29613 (* (* 2.0 l_0_6_204) l_0_6_211)) (* (* 2.0 l_0_6_205) l_0_6_212))))
 (let ((?x29621 (- (- ?x29617 (* (* 2.0 l_0_6_206) l_0_6_213)) (* (* 2.0 l_0_6_207) l_0_6_214))))
 (let ((?x29625 (- (- ?x29621 (* (* 2.0 l_0_6_208) l_0_6_215)) (* (* 2.0 l_0_6_292) l_0_6_299))))
 (let ((?x29629 (- (- ?x29625 (* (* 2.0 l_0_6_293) l_0_6_300)) (* (* 2.0 l_0_6_294) l_0_6_301))))
 (let ((?x29633 (- (- ?x29629 (* (* 2.0 l_0_6_295) l_0_6_302)) (* (* 2.0 l_0_6_296) l_0_6_303))))
 (let ((?x29637 (- (- ?x29633 (* (* 2.0 l_0_6_297) l_0_6_304)) (* (* 2.0 l_0_6_298) l_0_6_305))))
 (let ((?x29641 (- (- ?x29637 (* (* 2.0 l_0_6_337) l_0_6_344)) (* (* 2.0 l_0_6_338) l_0_6_345))))
 (let ((?x29645 (- (- ?x29641 (* (* 2.0 l_0_6_339) l_0_6_346)) (* (* 2.0 l_0_6_340) l_0_6_347))))
 (let ((?x29649 (- (- ?x29645 (* (* 2.0 l_0_6_341) l_0_6_348)) (* (* 2.0 l_0_6_342) l_0_6_349))))
 (= (- ?x29649 (* (* 2.0 l_0_6_343) l_0_6_350)) 0.0))))))))))))
(assert
 (let ((?x29738 (* l_0_6_351 l_0_6_351)))
 (let ((?x29736 (* l_0_6_350 l_0_6_350)))
 (let ((?x29734 (* l_0_6_349 l_0_6_349)))
 (let ((?x29732 (* l_0_6_348 l_0_6_348)))
 (let ((?x29730 (* l_0_6_347 l_0_6_347)))
 (let ((?x29728 (* l_0_6_346 l_0_6_346)))
 (let ((?x29726 (* l_0_6_345 l_0_6_345)))
 (let ((?x29724 (* l_0_6_344 l_0_6_344)))
 (let ((?x29722 (* l_0_6_306 l_0_6_306)))
 (let ((?x29720 (* l_0_6_305 l_0_6_305)))
 (let ((?x29718 (* l_0_6_304 l_0_6_304)))
 (let ((?x29716 (* l_0_6_303 l_0_6_303)))
 (let ((?x29714 (* l_0_6_302 l_0_6_302)))
 (let ((?x29712 (* l_0_6_301 l_0_6_301)))
 (let ((?x29710 (* l_0_6_300 l_0_6_300)))
 (let ((?x29708 (* l_0_6_299 l_0_6_299)))
 (let ((?x16165 (- (* (* (- 1.0) l_0_6_209) l_0_6_209) (* (* 1.0 l_0_6_210) l_0_6_210))))
 (let ((?x29695 (- (- ?x16165 (* (* 1.0 l_0_6_211) l_0_6_211)) (* (* 1.0 l_0_6_212) l_0_6_212))))
 (let ((?x29701 (- (- ?x29695 (* (* 1.0 l_0_6_213) l_0_6_213)) (* (* 1.0 l_0_6_214) l_0_6_214))))
 (let ((?x29707 (- (- ?x29701 (* (* 1.0 l_0_6_215) l_0_6_215)) (* (* 1.0 l_0_6_216) l_0_6_216))))
 (let ((?x29721 (- (- (- (- (- (- (- ?x29707 ?x29708) ?x29710) ?x29712) ?x29714) ?x29716) ?x29718) ?x29720)))
 (let ((?x29735 (- (- (- (- (- (- (- ?x29721 ?x29722) ?x29724) ?x29726) ?x29728) ?x29730) ?x29732) ?x29734)))
 (= (- (- ?x29735 ?x29736) ?x29738) 0.0))))))))))))))))))))))))
(assert
 (let ((?x29787 (- (* (* (- 2.0) l_0_6_209) l_0_6_217) (* (* 2.0 l_0_6_210) l_0_6_218))))
 (let ((?x29793 (- (- ?x29787 (* (* 2.0 l_0_6_211) l_0_6_219)) (* (* 2.0 l_0_6_212) l_0_6_220))))
 (let ((?x29799 (- (- ?x29793 (* (* 2.0 l_0_6_213) l_0_6_221)) (* (* 2.0 l_0_6_214) l_0_6_222))))
 (let ((?x29805 (- (- ?x29799 (* (* 2.0 l_0_6_215) l_0_6_223)) (* (* 2.0 l_0_6_216) l_0_6_224))))
 (let ((?x29811 (- (- ?x29805 (* (* 2.0 l_0_6_299) l_0_6_307)) (* (* 2.0 l_0_6_300) l_0_6_308))))
 (let ((?x29817 (- (- ?x29811 (* (* 2.0 l_0_6_301) l_0_6_309)) (* (* 2.0 l_0_6_302) l_0_6_310))))
 (let ((?x29823 (- (- ?x29817 (* (* 2.0 l_0_6_303) l_0_6_311)) (* (* 2.0 l_0_6_304) l_0_6_312))))
 (let ((?x29829 (- (- ?x29823 (* (* 2.0 l_0_6_305) l_0_6_313)) (* (* 2.0 l_0_6_306) l_0_6_314))))
 (let ((?x29835 (- (- ?x29829 (* (* 2.0 l_0_6_344) l_0_6_352)) (* (* 2.0 l_0_6_345) l_0_6_353))))
 (let ((?x29841 (- (- ?x29835 (* (* 2.0 l_0_6_346) l_0_6_354)) (* (* 2.0 l_0_6_347) l_0_6_355))))
 (let ((?x29847 (- (- ?x29841 (* (* 2.0 l_0_6_348) l_0_6_356)) (* (* 2.0 l_0_6_349) l_0_6_357))))
 (let ((?x29853 (- (- ?x29847 (* (* 2.0 l_0_6_350) l_0_6_358)) (* (* 2.0 l_0_6_351) l_0_6_359))))
 (= ?x29853 0.0))))))))))))))
(assert
 (let ((?x29986 (* l_0_6_360 l_0_6_360)))
 (let ((?x29984 (* l_0_6_359 l_0_6_359)))
 (let ((?x29982 (* l_0_6_358 l_0_6_358)))
 (let ((?x29980 (* l_0_6_357 l_0_6_357)))
 (let ((?x29978 (* l_0_6_356 l_0_6_356)))
 (let ((?x29976 (* l_0_6_355 l_0_6_355)))
 (let ((?x29974 (* l_0_6_354 l_0_6_354)))
 (let ((?x29972 (* l_0_6_353 l_0_6_353)))
 (let ((?x29970 (* l_0_6_352 l_0_6_352)))
 (let ((?x29968 (* l_0_6_315 l_0_6_315)))
 (let ((?x29966 (* l_0_6_314 l_0_6_314)))
 (let ((?x29964 (* l_0_6_313 l_0_6_313)))
 (let ((?x29962 (* l_0_6_312 l_0_6_312)))
 (let ((?x29960 (* l_0_6_311 l_0_6_311)))
 (let ((?x29958 (* l_0_6_310 l_0_6_310)))
 (let ((?x29956 (* l_0_6_309 l_0_6_309)))
 (let ((?x29954 (* l_0_6_308 l_0_6_308)))
 (let ((?x29952 (* l_0_6_307 l_0_6_307)))
 (let ((?x29930 (- (* (* (- 1.0) l_0_6_217) l_0_6_217) (* (* 1.0 l_0_6_218) l_0_6_218))))
 (let ((?x29936 (- (- ?x29930 (* (* 1.0 l_0_6_219) l_0_6_219)) (* (* 1.0 l_0_6_220) l_0_6_220))))
 (let ((?x29942 (- (- ?x29936 (* (* 1.0 l_0_6_221) l_0_6_221)) (* (* 1.0 l_0_6_222) l_0_6_222))))
 (let ((?x29948 (- (- ?x29942 (* (* 1.0 l_0_6_223) l_0_6_223)) (* (* 1.0 l_0_6_224) l_0_6_224))))
 (let ((?x29957 (- (- (- (- ?x29948 (* (* 1.0 l_0_6_225) l_0_6_225)) ?x29952) ?x29954) ?x29956)))
 (let ((?x29971 (- (- (- (- (- (- (- ?x29957 ?x29958) ?x29960) ?x29962) ?x29964) ?x29966) ?x29968) ?x29970)))
 (let ((?x29985 (- (- (- (- (- (- (- ?x29971 ?x29972) ?x29974) ?x29976) ?x29978) ?x29980) ?x29982) ?x29984)))
 (= (- ?x29985 ?x29986) 0.0)))))))))))))))))))))))))))
(assert
 (>= l_0_6_1 0.0))
(assert
 (>= l_0_6_3 0.0))
(assert
 (>= l_0_6_6 0.0))
(assert
 (>= l_0_6_10 0.0))
(assert
 (>= l_0_6_15 0.0))
(assert
 (>= l_0_6_21 0.0))
(assert
 (>= l_0_6_28 0.0))
(assert
 (>= l_0_6_36 0.0))
(assert
 (>= l_0_6_45 0.0))
(assert
 (>= l_0_6_46 0.0))
(assert
 (>= l_0_6_48 0.0))
(assert
 (>= l_0_6_51 0.0))
(assert
 (>= l_0_6_55 0.0))
(assert
 (>= l_0_6_60 0.0))
(assert
 (>= l_0_6_66 0.0))
(assert
 (>= l_0_6_73 0.0))
(assert
 (>= l_0_6_81 0.0))
(assert
 (>= l_0_6_90 0.0))
(assert
 (>= l_0_6_91 0.0))
(assert
 (>= l_0_6_93 0.0))
(assert
 (>= l_0_6_96 0.0))
(assert
 (>= l_0_6_100 0.0))
(assert
 (>= l_0_6_105 0.0))
(assert
 (>= l_0_6_111 0.0))
(assert
 (>= l_0_6_118 0.0))
(assert
 (>= l_0_6_126 0.0))
(assert
 (>= l_0_6_135 0.0))
(assert
 (>= l_0_6_136 0.0))
(assert
 (>= l_0_6_138 0.0))
(assert
 (>= l_0_6_141 0.0))
(assert
 (>= l_0_6_145 0.0))
(assert
 (>= l_0_6_150 0.0))
(assert
 (>= l_0_6_156 0.0))
(assert
 (>= l_0_6_163 0.0))
(assert
 (>= l_0_6_171 0.0))
(assert
 (>= l_0_6_180 0.0))
(assert
 (>= l_0_6_181 0.0))
(assert
 (>= l_0_6_183 0.0))
(assert
 (>= l_0_6_186 0.0))
(assert
 (>= l_0_6_190 0.0))
(assert
 (>= l_0_6_195 0.0))
(assert
 (>= l_0_6_201 0.0))
(assert
 (>= l_0_6_208 0.0))
(assert
 (>= l_0_6_216 0.0))
(assert
 (>= l_0_6_225 0.0))
(assert
 (>= l_0_6_226 0.0))
(assert
 (>= l_0_6_228 0.0))
(assert
 (>= l_0_6_231 0.0))
(assert
 (>= l_0_6_235 0.0))
(assert
 (>= l_0_6_240 0.0))
(assert
 (>= l_0_6_246 0.0))
(assert
 (>= l_0_6_253 0.0))
(assert
 (>= l_0_6_261 0.0))
(assert
 (>= l_0_6_270 0.0))
(assert
 (>= l_0_6_271 0.0))
(assert
 (>= l_0_6_273 0.0))
(assert
 (>= l_0_6_276 0.0))
(assert
 (>= l_0_6_280 0.0))
(assert
 (>= l_0_6_285 0.0))
(assert
 (>= l_0_6_291 0.0))
(assert
 (>= l_0_6_298 0.0))
(assert
 (>= l_0_6_306 0.0))
(assert
 (>= l_0_6_315 0.0))
(assert
 (>= l_0_6_316 0.0))
(assert
 (>= l_0_6_318 0.0))
(assert
 (>= l_0_6_321 0.0))
(assert
 (>= l_0_6_325 0.0))
(assert
 (>= l_0_6_330 0.0))
(assert
 (>= l_0_6_336 0.0))
(assert
 (>= l_0_6_343 0.0))
(assert
 (>= l_0_6_351 0.0))
(assert
 (>= l_0_6_360 0.0))
(assert
 (let ((?x30188 (* l_0_7_91 l_0_7_91)))
 (let ((?x30109 (- (- (* l_0_7_136 l_0_7_136) (* (* 2.0 l_0_7_202) l_0_7_217)) (* (* 2.0 l_0_7_203) l_0_7_218))))
 (let ((?x30115 (- (- ?x30109 (* (* 2.0 l_0_7_204) l_0_7_219)) (* (* 2.0 l_0_7_205) l_0_7_220))))
 (let ((?x30121 (- (- ?x30115 (* (* 2.0 l_0_7_206) l_0_7_221)) (* (* 2.0 l_0_7_207) l_0_7_222))))
 (let ((?x30127 (- (- ?x30121 (* (* 2.0 l_0_7_208) l_0_7_223)) (* (* 2.0 l_0_7_292) l_0_7_307))))
 (let ((?x30133 (- (- ?x30127 (* (* 2.0 l_0_7_293) l_0_7_308)) (* (* 2.0 l_0_7_294) l_0_7_309))))
 (let ((?x30139 (- (- ?x30133 (* (* 2.0 l_0_7_295) l_0_7_310)) (* (* 2.0 l_0_7_296) l_0_7_311))))
 (let ((?x30145 (- (- ?x30139 (* (* 2.0 l_0_7_297) l_0_7_312)) (* (* 2.0 l_0_7_298) l_0_7_313))))
 (let ((?x30151 (- (- ?x30145 (* (* 2.0 l_0_7_337) l_0_7_352)) (* (* 2.0 l_0_7_338) l_0_7_353))))
 (let ((?x30157 (- (- ?x30151 (* (* 2.0 l_0_7_339) l_0_7_354)) (* (* 2.0 l_0_7_340) l_0_7_355))))
 (let ((?x30163 (- (- ?x30157 (* (* 2.0 l_0_7_341) l_0_7_356)) (* (* 2.0 l_0_7_342) l_0_7_357))))
 (let ((?x30169 (- (- ?x30163 (* (* 2.0 l_0_7_343) l_0_7_358)) (* (* 2.0 l_0_7_382) l_0_7_397))))
 (let ((?x30175 (- (- ?x30169 (* (* 2.0 l_0_7_383) l_0_7_398)) (* (* 2.0 l_0_7_384) l_0_7_399))))
 (let ((?x30181 (- (- ?x30175 (* (* 2.0 l_0_7_385) l_0_7_400)) (* (* 2.0 l_0_7_386) l_0_7_401))))
 (let ((?x30187 (- (- ?x30181 (* (* 2.0 l_0_7_387) l_0_7_402)) (* (* 2.0 l_0_7_388) l_0_7_403))))
 (= (+ (- ?x30187 ?x30188) 1.0) 0.0)))))))))))))))))
(assert
 (let ((?x30188 (* l_0_7_91 l_0_7_91)))
 (let ((?x30284 (- (- (* l_0_7_136 l_0_7_136) (* (* 2.0 l_0_7_182) l_0_7_209)) (* (* 2.0 l_0_7_183) l_0_7_210))))
 (let ((?x30290 (- (- ?x30284 (* (* 2.0 l_0_7_272) l_0_7_299)) (* (* 2.0 l_0_7_273) l_0_7_300))))
 (let ((?x30296 (- (- ?x30290 (* (* 2.0 l_0_7_317) l_0_7_344)) (* (* 2.0 l_0_7_318) l_0_7_345))))
 (let ((?x30302 (- (- ?x30296 (* (* 2.0 l_0_7_362) l_0_7_389)) (* (* 2.0 l_0_7_363) l_0_7_390))))
 (= (+ (- ?x30302 ?x30188) 1.0) 0.0)))))))
(assert
 (let ((?x30188 (* l_0_7_91 l_0_7_91)))
 (let ((?x30333 (* l_0_7_226 l_0_7_226)))
 (let ((?x16805 (- (* (- l_0_7_136) l_0_7_136) (* (* 2.0 l_0_7_181) l_0_7_191))))
 (let ((?x30340 (- (- (+ ?x16805 ?x30333) (* (* 2.0 l_0_7_271) l_0_7_281)) (* (* 2.0 l_0_7_316) l_0_7_326))))
 (= (- (+ (- ?x30340 (* (* 2.0 l_0_7_361) l_0_7_371)) ?x30188) 1.0) 0.0))))))
(assert
 (let ((?x30441 (* l_0_7_46 l_0_7_46)))
 (let ((?x30374 (- (- (* (- l_0_7_1) l_0_7_1) (* (* 2.0 l_0_7_196) l_0_7_209)) (* (* 2.0 l_0_7_197) l_0_7_210))))
 (let ((?x30380 (- (- ?x30374 (* (* 2.0 l_0_7_198) l_0_7_211)) (* (* 2.0 l_0_7_199) l_0_7_212))))
 (let ((?x30386 (- (- ?x30380 (* (* 2.0 l_0_7_200) l_0_7_213)) (* (* 2.0 l_0_7_201) l_0_7_214))))
 (let ((?x30392 (- (- ?x30386 (* (* 2.0 l_0_7_286) l_0_7_299)) (* (* 2.0 l_0_7_287) l_0_7_300))))
 (let ((?x30398 (- (- ?x30392 (* (* 2.0 l_0_7_288) l_0_7_301)) (* (* 2.0 l_0_7_289) l_0_7_302))))
 (let ((?x30404 (- (- ?x30398 (* (* 2.0 l_0_7_290) l_0_7_303)) (* (* 2.0 l_0_7_291) l_0_7_304))))
 (let ((?x30410 (- (- ?x30404 (* (* 2.0 l_0_7_331) l_0_7_344)) (* (* 2.0 l_0_7_332) l_0_7_345))))
 (let ((?x30416 (- (- ?x30410 (* (* 2.0 l_0_7_333) l_0_7_346)) (* (* 2.0 l_0_7_334) l_0_7_347))))
 (let ((?x30422 (- (- ?x30416 (* (* 2.0 l_0_7_335) l_0_7_348)) (* (* 2.0 l_0_7_336) l_0_7_349))))
 (let ((?x30428 (- (- ?x30422 (* (* 2.0 l_0_7_376) l_0_7_389)) (* (* 2.0 l_0_7_377) l_0_7_390))))
 (let ((?x30434 (- (- ?x30428 (* (* 2.0 l_0_7_378) l_0_7_391)) (* (* 2.0 l_0_7_379) l_0_7_392))))
 (let ((?x30440 (- (- ?x30434 (* (* 2.0 l_0_7_380) l_0_7_393)) (* (* 2.0 l_0_7_381) l_0_7_394))))
 (= (+ ?x30440 ?x30441) 0.0)))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30535 (* ?x30534 l_0_7_47)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x30532 (* ?x30531 l_0_7_151)))
 (let ((?x30528 (* 2.0 l_0_7_106)))
 (let ((?x30529 (* ?x30528 l_0_7_91)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30527 (* ?x17013 l_0_7_2)))
 (= (+ (+ (- ?x30527 ?x30529) ?x30532) ?x30535) 0.0))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x30604 (* ?x30603 l_0_7_79)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x30601 (* ?x30600 l_0_7_78)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x30598 (* ?x30597 l_0_7_77)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x30595 (* ?x30594 l_0_7_76)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x30592 (* ?x30591 l_0_7_75)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x30589 (* ?x30588 l_0_7_74)))
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30586 (* ?x30534 l_0_7_49)))
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x30584 (* ?x30583 l_0_7_259)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x30581 (* ?x30580 l_0_7_258)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x30578 (* ?x30577 l_0_7_257)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x30575 (* ?x30574 l_0_7_256)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x30572 (* ?x30571 l_0_7_255)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x30569 (* ?x30568 l_0_7_254)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x30566 (* ?x30565 l_0_7_34)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x30563 (* ?x30562 l_0_7_33)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x30560 (* ?x30559 l_0_7_32)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x30557 (* ?x30556 l_0_7_31)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x30554 (* ?x30553 l_0_7_30)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x30551 (* ?x30550 l_0_7_29)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30549 (* ?x17013 l_0_7_4)))
 (let ((?x30570 (- (+ (+ (+ (+ (+ (+ ?x30549 ?x30551) ?x30554) ?x30557) ?x30560) ?x30563) ?x30566) ?x30569)))
 (let ((?x30590 (- (+ (- (- (- (- (- ?x30570 ?x30572) ?x30575) ?x30578) ?x30581) ?x30584) ?x30586) ?x30589)))
 (= (- (- (- (- (- ?x30590 ?x30592) ?x30595) ?x30598) ?x30601) ?x30604) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30668 (* ?x30534 l_0_7_52)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) ?x30668) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30719 (* ?x30534 l_0_7_56)))
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x30584 (* ?x30583 l_0_7_259)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x30581 (* ?x30580 l_0_7_258)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x30578 (* ?x30577 l_0_7_257)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x30575 (* ?x30574 l_0_7_256)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x30572 (* ?x30571 l_0_7_255)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x30569 (* ?x30568 l_0_7_254)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x30711 (* ?x30710 l_0_7_169)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x30708 (* ?x30707 l_0_7_168)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x30705 (* ?x30704 l_0_7_167)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x30702 (* ?x30701 l_0_7_166)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x30699 (* ?x30698 l_0_7_165)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x30696 (* ?x30695 l_0_7_164)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x30693 (* ?x30692 l_0_7_124)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x30690 (* ?x30689 l_0_7_123)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x30687 (* ?x30686 l_0_7_122)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30684 (* ?x30683 l_0_7_121)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30681 (* ?x30680 l_0_7_120)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30672 (* ?x17013 l_0_7_11)))
 (let ((?x30688 (+ (+ (+ (+ ?x30672 (* (* 2.0 l_0_7_106) l_0_7_119)) ?x30681) ?x30684) ?x30687)))
 (let ((?x30709 (- (- (- (- (- (+ (+ ?x30688 ?x30690) ?x30693) ?x30696) ?x30699) ?x30702) ?x30705) ?x30708)))
 (let ((?x30718 (+ (+ (+ (+ (+ (+ (- ?x30709 ?x30711) ?x30569) ?x30572) ?x30575) ?x30578) ?x30581) ?x30584)))
 (= (+ ?x30718 ?x30719) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x17152 (* ?x30534 l_0_7_61)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x17152) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30765 (* ?x30534 l_0_7_67)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_22) ?x30765) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30775 (* ?x30534 l_0_7_74)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_29) ?x30775) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30785 (* ?x30534 l_0_7_82)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30783 (* ?x17013 l_0_7_37)))
 (= (+ ?x30783 ?x30785) 0.0))))))
(assert
 (let ((?x30814 (* l_0_7_48 l_0_7_48)))
 (let ((?x30812 (* l_0_7_47 l_0_7_47)))
 (let ((?x30810 (* l_0_7_3 l_0_7_3)))
 (let ((?x30808 (* l_0_7_2 l_0_7_2)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x30806 (* ?x30805 l_0_7_152)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x30803 (* ?x30802 l_0_7_151)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30796 (* ?x30680 l_0_7_93)))
 (let ((?x30807 (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_92) ?x30796) ?x30803) ?x30806)))
 (= (+ (+ (- (- ?x30807 ?x30808) ?x30810) ?x30812) ?x30814) 0.0)))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30858 (* ?x30857 l_0_7_50)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30855 (* ?x30854 l_0_7_49)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30852 (* ?x30851 l_0_7_5)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x30849 (* ?x30848 l_0_7_4)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x30846 (* ?x30845 l_0_7_153)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x30843 (* ?x30842 l_0_7_152)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x30840 (* ?x30839 l_0_7_151)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30837 (* ?x30683 l_0_7_96)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30835 (* ?x30680 l_0_7_95)))
 (let ((?x30844 (+ (+ (- (- (* (* (- 2.0) l_0_7_106) l_0_7_94) ?x30835) ?x30837) ?x30840) ?x30843)))
 (let ((?x30847 (+ ?x30844 ?x30846)))
 (= (+ (+ (- (- ?x30847 ?x30849) ?x30852) ?x30855) ?x30858) 0.0))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30918 (* ?x30857 l_0_7_53)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30916 (* ?x30854 l_0_7_52)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30914 (* ?x30851 l_0_7_8)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x30912 (* ?x30848 l_0_7_7)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x30910 (* ?x30909 l_0_7_154)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x30907 (* ?x30906 l_0_7_153)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x30904 (* ?x30903 l_0_7_152)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x30901 (* ?x30900 l_0_7_151)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30898 (* ?x30683 l_0_7_99)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30896 (* ?x30680 l_0_7_98)))
 (let ((?x30528 (* 2.0 l_0_7_106)))
 (let ((?x30886 (* ?x30528 l_0_7_97)))
 (let ((?x30902 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_109) ?x30886) ?x30896) ?x30898) ?x30901)))
 (let ((?x30911 (+ (+ (+ ?x30902 ?x30904) ?x30907) ?x30910)))
 (= (+ (+ (- (- ?x30911 ?x30912) ?x30914) ?x30916) ?x30918) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30993 (* ?x30857 l_0_7_57)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30991 (* ?x30854 l_0_7_56)))
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x30989 (* ?x30988 l_0_7_155)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x30986 (* ?x30985 l_0_7_154)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x30983 (* ?x30982 l_0_7_153)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x30980 (* ?x30979 l_0_7_152)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x30977 (* ?x30976 l_0_7_151)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x30974 (* ?x30973 l_0_7_3)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x30971 (* ?x30970 l_0_7_2)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x30968 (* ?x30967 l_0_7_110)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x30965 (* ?x30964 l_0_7_109)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x30962 (* ?x30961 l_0_7_108)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x30959 (* ?x30949 l_0_7_107)))
 (let ((?x30969 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_106) ?x30959) ?x30962) ?x30965) ?x30968)))
 (let ((?x30990 (+ (+ (+ (+ (+ (- (- ?x30969 ?x30971) ?x30974) ?x30977) ?x30980) ?x30983) ?x30986) ?x30989)))
 (= (+ (+ ?x30990 ?x30991) ?x30993) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31063 (* ?x30857 l_0_7_62)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31061 (* ?x30854 l_0_7_61)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31059 (* ?x30553 l_0_7_3)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x31057 (* ?x30550 l_0_7_2)))
 (let ((?x31055 (* l_0_7_156 l_0_7_156)))
 (let ((?x31053 (* l_0_7_155 l_0_7_155)))
 (let ((?x31051 (* l_0_7_154 l_0_7_154)))
 (let ((?x31049 (* l_0_7_153 l_0_7_153)))
 (let ((?x31047 (* l_0_7_152 l_0_7_152)))
 (let ((?x31045 (* l_0_7_151 l_0_7_151)))
 (let ((?x31043 (* l_0_7_111 l_0_7_111)))
 (let ((?x31041 (* l_0_7_110 l_0_7_110)))
 (let ((?x31029 (* l_0_7_109 l_0_7_109)))
 (let ((?x31025 (* l_0_7_108 l_0_7_108)))
 (let ((?x31027 (- (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31025)))
 (let ((?x31052 (+ (+ (+ (+ (- (- (- ?x31027 ?x31029) ?x31041) ?x31043) ?x31045) ?x31047) ?x31049) ?x31051)))
 (let ((?x31056 (+ (+ ?x31052 ?x31053) ?x31055)))
 (= (+ (+ (- (- ?x31056 ?x31057) ?x31059) ?x31061) ?x31063) 0.0)))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31123 (* ?x30857 l_0_7_68)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31121 (* ?x30854 l_0_7_67)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31119 (* ?x31118 l_0_7_3)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31116 (* ?x30848 l_0_7_22)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31114 (* ?x30710 l_0_7_162)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31112 (* ?x30707 l_0_7_161)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31110 (* ?x30704 l_0_7_160)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31108 (* ?x30701 l_0_7_159)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31106 (* ?x30698 l_0_7_158)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31104 (* ?x30695 l_0_7_157)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31102 (* ?x30692 l_0_7_117)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31100 (* ?x30689 l_0_7_116)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31098 (* ?x30686 l_0_7_115)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31096 (* ?x30683 l_0_7_114)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31084 (* ?x30680 l_0_7_113)))
 (let ((?x31101 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x31084) ?x31096) ?x31098) ?x31100)))
 (let ((?x31115 (+ (+ (+ (+ (+ (+ (- ?x31101 ?x31102) ?x31104) ?x31106) ?x31108) ?x31110) ?x31112) ?x31114)))
 (= (+ (+ (- (- ?x31115 ?x31116) ?x31119) ?x31121) ?x31123) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31194 (* ?x30857 l_0_7_75)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31192 (* ?x30854 l_0_7_74)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31190 (* ?x30851 l_0_7_30)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31188 (* ?x30848 l_0_7_29)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x30711 (* ?x30710 l_0_7_169)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x30708 (* ?x30707 l_0_7_168)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x30705 (* ?x30704 l_0_7_167)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x30702 (* ?x30701 l_0_7_166)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x30699 (* ?x30698 l_0_7_165)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x30696 (* ?x30695 l_0_7_164)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x30693 (* ?x30692 l_0_7_124)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x30690 (* ?x30689 l_0_7_123)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x30687 (* ?x30686 l_0_7_122)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30684 (* ?x30683 l_0_7_121)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30681 (* ?x30680 l_0_7_120)))
 (let ((?x31180 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_119) ?x30681) ?x30684) ?x30687) ?x30690)))
 (let ((?x31187 (+ (+ (+ (+ (+ (+ (- ?x31180 ?x30693) ?x30696) ?x30699) ?x30702) ?x30705) ?x30708) ?x30711)))
 (= (+ (+ (- (- ?x31187 ?x31188) ?x31190) ?x31192) ?x31194) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31246 (* ?x30857 l_0_7_83)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31244 (* ?x30854 l_0_7_82)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31242 (* ?x30851 l_0_7_38)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31240 (* ?x30848 l_0_7_37)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31238 (* ?x30710 l_0_7_177)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31236 (* ?x30707 l_0_7_176)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31234 (* ?x30704 l_0_7_175)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31232 (* ?x30701 l_0_7_174)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31230 (* ?x30698 l_0_7_173)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31228 (* ?x30695 l_0_7_172)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31226 (* ?x30692 l_0_7_132)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31224 (* ?x30689 l_0_7_131)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31222 (* ?x30686 l_0_7_130)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31220 (* ?x30683 l_0_7_129)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31218 (* ?x30680 l_0_7_128)))
 (let ((?x31225 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_127) ?x31218) ?x31220) ?x31222) ?x31224)))
 (let ((?x31239 (+ (+ (+ (+ (+ (+ (- ?x31225 ?x31226) ?x31228) ?x31230) ?x31232) ?x31234) ?x31236) ?x31238)))
 (= (+ (+ (- (- ?x31239 ?x31240) ?x31242) ?x31244) ?x31246) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31307 (* l_0_7_6 l_0_7_6)))
 (let ((?x31305 (* l_0_7_51 l_0_7_51)))
 (let ((?x31303 (* l_0_7_50 l_0_7_50)))
 (let ((?x31301 (* l_0_7_5 l_0_7_5)))
 (let ((?x31304 (+ (- (+ (* (- l_0_7_4) l_0_7_4) (* l_0_7_49 l_0_7_49)) ?x31301) ?x31303)))
 (= (- (+ ?x31304 ?x31305) ?x31307) 0.0)))))))
(assert
 (let ((?x31334 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31331 (* ?x31330 l_0_7_54)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31328 (* ?x31327 l_0_7_53)))
 (let ((?x31325 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31322 (* ?x31321 l_0_7_52)))
 (let ((?x31332 (+ (+ (- (+ (* (* (- 2.0) l_0_7_4) l_0_7_7) ?x31322) ?x31325) ?x31328) ?x31331)))
 (= (- ?x31332 ?x31334) 0.0)))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31373 (* ?x31330 l_0_7_58)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31371 (* ?x31327 l_0_7_57)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31369 (* ?x31321 l_0_7_56)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31367 (* ?x31366 l_0_7_6)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31364 (* ?x30973 l_0_7_5)))
 (let ((?x31372 (+ (+ (- (- (* (* (- 2.0) l_0_7_11) l_0_7_4) ?x31364) ?x31367) ?x31369) ?x31371)))
 (= (+ ?x31372 ?x31373) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31400 (* ?x31330 l_0_7_63)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31398 (* ?x31327 l_0_7_62)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31396 (* ?x31321 l_0_7_61)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31394 (* ?x30556 l_0_7_6)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31386 (* ?x30553 l_0_7_5)))
 (let ((?x31399 (+ (+ (- (- (* (* (- 2.0) l_0_7_16) l_0_7_4) ?x31386) ?x31394) ?x31396) ?x31398)))
 (= (+ ?x31399 ?x31400) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31431 (* ?x31330 l_0_7_69)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31429 (* ?x31327 l_0_7_68)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31427 (* ?x31321 l_0_7_67)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31425 (* ?x31424 l_0_7_6)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31416 (* ?x31118 l_0_7_5)))
 (let ((?x31430 (+ (+ (- (- (* (* (- 2.0) l_0_7_22) l_0_7_4) ?x31416) ?x31425) ?x31427) ?x31429)))
 (= (+ ?x31430 ?x31431) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31465 (* ?x31330 l_0_7_76)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31463 (* ?x31327 l_0_7_75)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31461 (* ?x31321 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31459 (* ?x31458 l_0_7_6)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31456 (* ?x31455 l_0_7_5)))
 (let ((?x31464 (+ (+ (- (- (* (* (- 2.0) l_0_7_29) l_0_7_4) ?x31456) ?x31459) ?x31461) ?x31463)))
 (= (+ ?x31464 ?x31465) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31497 (* ?x31330 l_0_7_84)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31495 (* ?x31327 l_0_7_83)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31493 (* ?x31321 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31491 (* ?x31490 l_0_7_6)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31482 (* ?x31481 l_0_7_5)))
 (let ((?x31496 (+ (+ (- (- (* (* (- 2.0) l_0_7_37) l_0_7_4) ?x31482) ?x31491) ?x31493) ?x31495)))
 (= (+ ?x31496 ?x31497) 0.0)))))))))))))
(assert
 (let ((?x31528 (* l_0_7_9 l_0_7_9)))
 (let ((?x31526 (* l_0_7_8 l_0_7_8)))
 (let ((?x31524 (* l_0_7_7 l_0_7_7)))
 (let ((?x31522 (* l_0_7_55 l_0_7_55)))
 (let ((?x31520 (* l_0_7_54 l_0_7_54)))
 (let ((?x31518 (* l_0_7_53 l_0_7_53)))
 (let ((?x31521 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_52 l_0_7_52)) ?x31518) ?x31520)))
 (= (- (- (- (+ ?x31521 ?x31522) ?x31524) ?x31526) ?x31528) 0.0)))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31556 (* ?x31555 l_0_7_59)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31553 (* ?x31552 l_0_7_58)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31550 (* ?x31549 l_0_7_57)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31547 (* ?x31546 l_0_7_56)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31544 (* ?x31366 l_0_7_9)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31542 (* ?x30973 l_0_7_8)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x31540 (* ?x30970 l_0_7_7)))
 (let ((?x31548 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_14) ?x31540) ?x31542) ?x31544) ?x31547)))
 (= (+ (+ (+ ?x31548 ?x31550) ?x31553) ?x31556) 0.0)))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31595 (* ?x31555 l_0_7_64)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31593 (* ?x31552 l_0_7_63)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31591 (* ?x31549 l_0_7_62)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31589 (* ?x31546 l_0_7_61)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31587 (* ?x30556 l_0_7_9)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31578 (* ?x30553 l_0_7_8)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x31574 (* ?x30550 l_0_7_7)))
 (let ((?x31590 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) ?x31574) ?x31578) ?x31587) ?x31589)))
 (= (+ (+ (+ ?x31590 ?x31591) ?x31593) ?x31595) 0.0)))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x30604 (* ?x30603 l_0_7_79)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x30601 (* ?x30600 l_0_7_78)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x30598 (* ?x30597 l_0_7_77)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x30595 (* ?x30594 l_0_7_76)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x30592 (* ?x30591 l_0_7_75)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x30589 (* ?x30588 l_0_7_74)))
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31640 (* ?x31555 l_0_7_70)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31638 (* ?x31552 l_0_7_69)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31636 (* ?x31549 l_0_7_68)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31634 (* ?x31546 l_0_7_67)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31632 (* ?x31424 l_0_7_9)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31630 (* ?x31118 l_0_7_8)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x31628 (* ?x31627 l_0_7_7)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x30566 (* ?x30565 l_0_7_34)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x30563 (* ?x30562 l_0_7_33)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x30560 (* ?x30559 l_0_7_32)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x30557 (* ?x30556 l_0_7_31)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x30554 (* ?x30553 l_0_7_30)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x30551 (* ?x30550 l_0_7_29)))
 (let ((?x17557 (* (- 2.0) l_0_7_10)))
 (let ((?x31613 (* ?x17557 l_0_7_25)))
 (let ((?x31629 (- (- (- (- (- (- (- ?x31613 ?x30551) ?x30554) ?x30557) ?x30560) ?x30563) ?x30566) ?x31628)))
 (let ((?x31642 (+ (+ (+ (+ (+ (- (- ?x31629 ?x31630) ?x31632) ?x31634) ?x31636) ?x31638) ?x31640) ?x30589)))
 (= (+ (+ (+ (+ (+ ?x31642 ?x30592) ?x30595) ?x30598) ?x30601) ?x30604) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31679 (* ?x31555 l_0_7_77)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31677 (* ?x31552 l_0_7_76)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31675 (* ?x31549 l_0_7_75)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31673 (* ?x31546 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31671 (* ?x31458 l_0_7_9)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31669 (* ?x31455 l_0_7_8)))
 (let ((?x31666 (* 2.0 l_0_7_29)))
 (let ((?x31667 (* ?x31666 l_0_7_7)))
 (let ((?x31674 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_32) ?x31667) ?x31669) ?x31671) ?x31673)))
 (= (+ (+ (+ ?x31674 ?x31675) ?x31677) ?x31679) 0.0)))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31715 (* ?x31555 l_0_7_85)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31713 (* ?x31552 l_0_7_84)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31711 (* ?x31549 l_0_7_83)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31709 (* ?x31546 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31707 (* ?x31490 l_0_7_9)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31698 (* ?x31481 l_0_7_8)))
 (let ((?x17680 (* 2.0 l_0_7_37)))
 (let ((?x31695 (* ?x17680 l_0_7_7)))
 (let ((?x17557 (* (- 2.0) l_0_7_10)))
 (let ((?x17678 (* ?x17557 l_0_7_40)))
 (let ((?x31716 (+ (+ (+ (+ (- (- (- ?x17678 ?x31695) ?x31698) ?x31707) ?x31709) ?x31711) ?x31713) ?x31715)))
 (= ?x31716 0.0)))))))))))))))))))
(assert
 (let ((?x31757 (* l_0_7_60 l_0_7_60)))
 (let ((?x31755 (* l_0_7_59 l_0_7_59)))
 (let ((?x31753 (* l_0_7_58 l_0_7_58)))
 (let ((?x31751 (* l_0_7_57 l_0_7_57)))
 (let ((?x31749 (* l_0_7_56 l_0_7_56)))
 (let ((?x31747 (* l_0_7_15 l_0_7_15)))
 (let ((?x31745 (* l_0_7_14 l_0_7_14)))
 (let ((?x31736 (* l_0_7_13 l_0_7_13)))
 (let ((?x31746 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x31736) ?x31745)))
 (= (+ (+ (+ (+ (+ (- ?x31746 ?x31747) ?x31749) ?x31751) ?x31753) ?x31755) ?x31757) 0.0)))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31799 (* ?x31798 l_0_7_65)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31796 (* ?x31795 l_0_7_64)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31793 (* ?x31792 l_0_7_63)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31790 (* ?x31789 l_0_7_62)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31787 (* ?x31786 l_0_7_61)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31784 (* ?x31783 l_0_7_20)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31781 (* ?x31780 l_0_7_19)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31778 (* ?x31366 l_0_7_18)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31776 (* ?x30973 l_0_7_17)))
 (let ((?x31785 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_16) ?x31776) ?x31778) ?x31781) ?x31784)))
 (= (+ (+ (+ (+ (+ ?x31785 ?x31787) ?x31790) ?x31793) ?x31796) ?x31799) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31845 (* ?x31798 l_0_7_71)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31843 (* ?x31795 l_0_7_70)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31841 (* ?x31792 l_0_7_69)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31839 (* ?x31789 l_0_7_68)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31837 (* ?x31786 l_0_7_67)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31835 (* ?x31783 l_0_7_26)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31825 (* ?x31780 l_0_7_25)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31822 (* ?x31366 l_0_7_24)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31818 (* ?x30973 l_0_7_23)))
 (let ((?x31836 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_22) ?x31818) ?x31822) ?x31825) ?x31835)))
 (= (+ (+ (+ (+ (+ ?x31836 ?x31837) ?x31839) ?x31841) ?x31843) ?x31845) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31889 (* ?x31798 l_0_7_78)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31887 (* ?x31795 l_0_7_77)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31885 (* ?x31792 l_0_7_76)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31883 (* ?x31789 l_0_7_75)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31881 (* ?x31786 l_0_7_74)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31879 (* ?x31783 l_0_7_33)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31869 (* ?x31780 l_0_7_32)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31866 (* ?x31366 l_0_7_31)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x17777 (* ?x30973 l_0_7_30)))
 (let ((?x31880 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_29) ?x17777) ?x31866) ?x31869) ?x31879)))
 (= (+ (+ (+ (+ (+ ?x31880 ?x31881) ?x31883) ?x31885) ?x31887) ?x31889) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31934 (* ?x31798 l_0_7_86)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31932 (* ?x31795 l_0_7_85)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31930 (* ?x31792 l_0_7_84)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31928 (* ?x31789 l_0_7_83)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31926 (* ?x31786 l_0_7_82)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31924 (* ?x31783 l_0_7_41)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31914 (* ?x31780 l_0_7_40)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31911 (* ?x31366 l_0_7_39)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31907 (* ?x30973 l_0_7_38)))
 (let ((?x31925 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_37) ?x31907) ?x31911) ?x31914) ?x31924)))
 (= (+ (+ (+ (+ (+ ?x31925 ?x31926) ?x31928) ?x31930) ?x31932) ?x31934) 0.0)))))))))))))))))))))
(assert
 (let ((?x31989 (* l_0_7_66 l_0_7_66)))
 (let ((?x31987 (* l_0_7_65 l_0_7_65)))
 (let ((?x31985 (* l_0_7_64 l_0_7_64)))
 (let ((?x31983 (* l_0_7_63 l_0_7_63)))
 (let ((?x31981 (* l_0_7_62 l_0_7_62)))
 (let ((?x31979 (* l_0_7_61 l_0_7_61)))
 (let ((?x31977 (* l_0_7_21 l_0_7_21)))
 (let ((?x31975 (* l_0_7_20 l_0_7_20)))
 (let ((?x31973 (* l_0_7_19 l_0_7_19)))
 (let ((?x31963 (* l_0_7_18 l_0_7_18)))
 (let ((?x31974 (- (- (- (* (- l_0_7_16) l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31963) ?x31973)))
 (let ((?x31988 (+ (+ (+ (+ (+ (- (- ?x31974 ?x31975) ?x31977) ?x31979) ?x31981) ?x31983) ?x31985) ?x31987)))
 (= (+ ?x31988 ?x31989) 0.0))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32032 (* ?x30603 l_0_7_72)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32030 (* ?x30600 l_0_7_71)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32028 (* ?x30597 l_0_7_70)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32026 (* ?x30594 l_0_7_69)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32024 (* ?x30591 l_0_7_68)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32022 (* ?x30588 l_0_7_67)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32020 (* ?x30565 l_0_7_27)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32018 (* ?x30562 l_0_7_26)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32016 (* ?x30559 l_0_7_25)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32014 (* ?x30556 l_0_7_24)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32012 (* ?x30553 l_0_7_23)))
 (let ((?x32019 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_22) ?x32012) ?x32014) ?x32016) ?x32018)))
 (let ((?x32033 (+ (+ (+ (+ (+ (+ (- ?x32019 ?x32020) ?x32022) ?x32024) ?x32026) ?x32028) ?x32030) ?x32032)))
 (= ?x32033 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x30604 (* ?x30603 l_0_7_79)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x30601 (* ?x30600 l_0_7_78)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x30598 (* ?x30597 l_0_7_77)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x30595 (* ?x30594 l_0_7_76)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x30592 (* ?x30591 l_0_7_75)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x30589 (* ?x30588 l_0_7_74)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x30566 (* ?x30565 l_0_7_34)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x30563 (* ?x30562 l_0_7_33)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x30560 (* ?x30559 l_0_7_32)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x30557 (* ?x30556 l_0_7_31)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x30554 (* ?x30553 l_0_7_30)))
 (let ((?x32057 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_29) ?x30554) ?x30557) ?x30560) ?x30563)))
 (let ((?x32074 (+ (+ (+ (+ (+ (+ (- ?x32057 ?x30566) ?x30589) ?x30592) ?x30595) ?x30598) ?x30601) ?x30604)))
 (= ?x32074 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32106 (* ?x30603 l_0_7_87)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32104 (* ?x30600 l_0_7_86)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32102 (* ?x30597 l_0_7_85)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32100 (* ?x30594 l_0_7_84)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32098 (* ?x30591 l_0_7_83)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32096 (* ?x30588 l_0_7_82)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32094 (* ?x30565 l_0_7_42)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32092 (* ?x30562 l_0_7_41)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32090 (* ?x30559 l_0_7_40)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32088 (* ?x30556 l_0_7_39)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32086 (* ?x30553 l_0_7_38)))
 (let ((?x32093 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_37) ?x32086) ?x32088) ?x32090) ?x32092)))
 (let ((?x32107 (+ (+ (+ (+ (+ (+ (- ?x32093 ?x32094) ?x32096) ?x32098) ?x32100) ?x32102) ?x32104) ?x32106)))
 (= ?x32107 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32175 (* l_0_7_73 l_0_7_73)))
 (let ((?x32173 (* l_0_7_72 l_0_7_72)))
 (let ((?x32171 (* l_0_7_71 l_0_7_71)))
 (let ((?x32169 (* l_0_7_70 l_0_7_70)))
 (let ((?x32167 (* l_0_7_69 l_0_7_69)))
 (let ((?x32165 (* l_0_7_68 l_0_7_68)))
 (let ((?x32163 (* l_0_7_67 l_0_7_67)))
 (let ((?x32161 (* l_0_7_28 l_0_7_28)))
 (let ((?x32159 (* l_0_7_27 l_0_7_27)))
 (let ((?x32157 (* l_0_7_26 l_0_7_26)))
 (let ((?x32146 (* l_0_7_25 l_0_7_25)))
 (let ((?x32143 (* l_0_7_24 l_0_7_24)))
 (let ((?x32156 (- (- (- (* (- l_0_7_22) l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32143) ?x32146)))
 (let ((?x32170 (+ (+ (+ (+ (- (- (- ?x32156 ?x32157) ?x32159) ?x32161) ?x32163) ?x32165) ?x32167) ?x32169)))
 (= (+ (+ (+ ?x32170 ?x32171) ?x32173) ?x32175) 0.0))))))))))))))))
(assert
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32238 (* ?x32237 l_0_7_80)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32235 (* ?x32234 l_0_7_79)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32232 (* ?x32231 l_0_7_78)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32229 (* ?x32228 l_0_7_77)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32226 (* ?x32225 l_0_7_76)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32223 (* ?x32222 l_0_7_75)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32220 (* ?x32219 l_0_7_74)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32217 (* ?x32216 l_0_7_35)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32214 (* ?x32213 l_0_7_34)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32211 (* ?x32210 l_0_7_33)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32208 (* ?x32207 l_0_7_32)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32205 (* ?x31424 l_0_7_31)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32203 (* ?x31118 l_0_7_30)))
 (let ((?x32212 (- (- (- (- (* (* (- 2.0) l_0_7_22) l_0_7_29) ?x32203) ?x32205) ?x32208) ?x32211)))
 (let ((?x32233 (+ (+ (+ (+ (+ (- (- ?x32212 ?x32214) ?x32217) ?x32220) ?x32223) ?x32226) ?x32229) ?x32232)))
 (= (+ (+ ?x32233 ?x32235) ?x32238) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32304 (* ?x32237 l_0_7_88)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32302 (* ?x32234 l_0_7_87)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32300 (* ?x32231 l_0_7_86)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32298 (* ?x32228 l_0_7_85)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32296 (* ?x32225 l_0_7_84)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32294 (* ?x32222 l_0_7_83)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32292 (* ?x32219 l_0_7_82)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32290 (* ?x32216 l_0_7_43)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32288 (* ?x32213 l_0_7_42)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32286 (* ?x32210 l_0_7_41)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32274 (* ?x32207 l_0_7_40)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32270 (* ?x31424 l_0_7_39)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32266 (* ?x31118 l_0_7_38)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x17967 (* ?x31627 l_0_7_37)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x30711 (* ?x30710 l_0_7_169)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x30708 (* ?x30707 l_0_7_168)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x30705 (* ?x30704 l_0_7_167)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x30702 (* ?x30701 l_0_7_166)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x30699 (* ?x30698 l_0_7_165)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x30696 (* ?x30695 l_0_7_164)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x30693 (* ?x30692 l_0_7_124)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x30690 (* ?x30689 l_0_7_123)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x30687 (* ?x30686 l_0_7_122)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30684 (* ?x30683 l_0_7_121)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30681 (* ?x30680 l_0_7_120)))
 (let ((?x31180 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_119) ?x30681) ?x30684) ?x30687) ?x30690)))
 (let ((?x31187 (+ (+ (+ (+ (+ (+ (- ?x31180 ?x30693) ?x30696) ?x30699) ?x30702) ?x30705) ?x30708) ?x30711)))
 (let ((?x32291 (- (- (- (- (- (- (- ?x31187 ?x17967) ?x32266) ?x32270) ?x32274) ?x32286) ?x32288) ?x32290)))
 (let ((?x32305 (+ (+ (+ (+ (+ (+ (+ ?x32291 ?x32292) ?x32294) ?x32296) ?x32298) ?x32300) ?x32302) ?x32304)))
 (= ?x32305 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32372 (* l_0_7_81 l_0_7_81)))
 (let ((?x32370 (* l_0_7_80 l_0_7_80)))
 (let ((?x32368 (* l_0_7_79 l_0_7_79)))
 (let ((?x32366 (* l_0_7_78 l_0_7_78)))
 (let ((?x32364 (* l_0_7_77 l_0_7_77)))
 (let ((?x32362 (* l_0_7_76 l_0_7_76)))
 (let ((?x32360 (* l_0_7_75 l_0_7_75)))
 (let ((?x32358 (* l_0_7_74 l_0_7_74)))
 (let ((?x32356 (* l_0_7_36 l_0_7_36)))
 (let ((?x32354 (* l_0_7_35 l_0_7_35)))
 (let ((?x32352 (* l_0_7_34 l_0_7_34)))
 (let ((?x32350 (* l_0_7_33 l_0_7_33)))
 (let ((?x32348 (* l_0_7_32 l_0_7_32)))
 (let ((?x32346 (* l_0_7_31 l_0_7_31)))
 (let ((?x32349 (- (- (- (* (- l_0_7_29) l_0_7_29) (* l_0_7_30 l_0_7_30)) ?x32346) ?x32348)))
 (let ((?x32363 (+ (+ (+ (- (- (- (- ?x32349 ?x32350) ?x32352) ?x32354) ?x32356) ?x32358) ?x32360) ?x32362)))
 (= (+ (+ (+ (+ (+ ?x32363 ?x32364) ?x32366) ?x32368) ?x32370) ?x32372) 0.0))))))))))))))))))
(assert
 (let ((?x32441 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32438 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32435 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32432 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32429 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32426 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32423 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32420 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32417 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32414 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32411 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32408 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32405 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x32402 (* ?x31458 l_0_7_39)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x32400 (* ?x31455 l_0_7_38)))
 (let ((?x32409 (- (- (- (- (* (* (- 2.0) l_0_7_29) l_0_7_37) ?x32400) ?x32402) ?x32405) ?x32408)))
 (let ((?x32430 (+ (+ (+ (+ (- (- (- ?x32409 ?x32411) ?x32414) ?x32417) ?x32420) ?x32423) ?x32426) ?x32429)))
 (= (+ (+ (+ (+ ?x32430 ?x32432) ?x32435) ?x32438) ?x32441) 0.0)))))))))))))))))))))
(assert
 (let ((?x32524 (* l_0_7_90 l_0_7_90)))
 (let ((?x32522 (* l_0_7_89 l_0_7_89)))
 (let ((?x32520 (* l_0_7_88 l_0_7_88)))
 (let ((?x32518 (* l_0_7_87 l_0_7_87)))
 (let ((?x32516 (* l_0_7_86 l_0_7_86)))
 (let ((?x32514 (* l_0_7_85 l_0_7_85)))
 (let ((?x32512 (* l_0_7_84 l_0_7_84)))
 (let ((?x32510 (* l_0_7_83 l_0_7_83)))
 (let ((?x32508 (* l_0_7_82 l_0_7_82)))
 (let ((?x32506 (* l_0_7_45 l_0_7_45)))
 (let ((?x32504 (* l_0_7_44 l_0_7_44)))
 (let ((?x32502 (* l_0_7_43 l_0_7_43)))
 (let ((?x32500 (* l_0_7_42 l_0_7_42)))
 (let ((?x32487 (* l_0_7_41 l_0_7_41)))
 (let ((?x32484 (* l_0_7_40 l_0_7_40)))
 (let ((?x32480 (* l_0_7_39 l_0_7_39)))
 (let ((?x32486 (- (- (- (* (- l_0_7_37) l_0_7_37) (* l_0_7_38 l_0_7_38)) ?x32480) ?x32484)))
 (let ((?x32511 (+ (+ (- (- (- (- (- ?x32486 ?x32487) ?x32500) ?x32502) ?x32504) ?x32506) ?x32508) ?x32510)))
 (let ((?x32525 (+ (+ (+ (+ (+ (+ (+ ?x32511 ?x32512) ?x32514) ?x32516) ?x32518) ?x32520) ?x32522) ?x32524)))
 (= ?x32525 0.0)))))))))))))))))))))
(assert
 (let ((?x30441 (* l_0_7_46 l_0_7_46)))
 (let ((?x32563 (- (- (* (- l_0_7_1) l_0_7_1) (* (* 2.0 l_0_7_187) l_0_7_202)) (* (* 2.0 l_0_7_188) l_0_7_203))))
 (let ((?x32569 (- (- ?x32563 (* (* 2.0 l_0_7_189) l_0_7_204)) (* (* 2.0 l_0_7_190) l_0_7_205))))
 (let ((?x32575 (- (- ?x32569 (* (* 2.0 l_0_7_277) l_0_7_292)) (* (* 2.0 l_0_7_278) l_0_7_293))))
 (let ((?x32581 (- (- ?x32575 (* (* 2.0 l_0_7_279) l_0_7_294)) (* (* 2.0 l_0_7_280) l_0_7_295))))
 (let ((?x32587 (- (- ?x32581 (* (* 2.0 l_0_7_322) l_0_7_337)) (* (* 2.0 l_0_7_323) l_0_7_338))))
 (let ((?x32593 (- (- ?x32587 (* (* 2.0 l_0_7_324) l_0_7_339)) (* (* 2.0 l_0_7_325) l_0_7_340))))
 (let ((?x32599 (- (- ?x32593 (* (* 2.0 l_0_7_367) l_0_7_382)) (* (* 2.0 l_0_7_368) l_0_7_383))))
 (let ((?x32605 (- (- ?x32599 (* (* 2.0 l_0_7_369) l_0_7_384)) (* (* 2.0 l_0_7_370) l_0_7_385))))
 (= (+ ?x32605 ?x30441) 0.0)))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30535 (* ?x30534 l_0_7_47)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30527 (* ?x17013 l_0_7_2)))
 (= (+ ?x30527 ?x30535) 0.0))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31640 (* ?x31555 l_0_7_70)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31638 (* ?x31552 l_0_7_69)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31636 (* ?x31549 l_0_7_68)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31634 (* ?x31546 l_0_7_67)))
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30586 (* ?x30534 l_0_7_49)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31632 (* ?x31424 l_0_7_9)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x32720 (* ?x32719 l_0_7_250)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x32717 (* ?x32716 l_0_7_249)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x32714 (* ?x32713 l_0_7_248)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x32711 (* ?x32710 l_0_7_247)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31630 (* ?x31118 l_0_7_8)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x31628 (* ?x31627 l_0_7_7)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30549 (* ?x17013 l_0_7_4)))
 (let ((?x32712 (- (+ (+ (+ ?x30549 (* (* 2.0 l_0_7_10) l_0_7_25)) ?x31628) ?x31630) ?x32711)))
 (let ((?x32725 (- (- (+ (+ (- (- (- ?x32712 ?x32714) ?x32717) ?x32720) ?x31632) ?x30586) ?x31634) ?x31636)))
 (= (- (- ?x32725 ?x31638) ?x31640) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30668 (* ?x30534 l_0_7_52)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) ?x30668) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30719 (* ?x30534 l_0_7_56)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x32720 (* ?x32719 l_0_7_250)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x32717 (* ?x32716 l_0_7_249)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x32714 (* ?x32713 l_0_7_248)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x32711 (* ?x32710 l_0_7_247)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x32788 (* ?x30909 l_0_7_160)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x32786 (* ?x30906 l_0_7_159)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x32784 (* ?x30903 l_0_7_158)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x32782 (* ?x30900 l_0_7_157)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x32780 (* ?x32779 l_0_7_99)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x32777 (* ?x32776 l_0_7_98)))
 (let ((?x32773 (* 2.0 l_0_7_112)))
 (let ((?x32774 (* ?x32773 l_0_7_97)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30672 (* ?x17013 l_0_7_11)))
 (let ((?x32781 (+ (+ (+ (+ ?x30672 (* (* 2.0 l_0_7_100) l_0_7_115)) ?x32774) ?x32777) ?x32780)))
 (let ((?x32792 (+ (+ (+ (- (- (- (- ?x32781 ?x32782) ?x32784) ?x32786) ?x32788) ?x32711) ?x32714) ?x32717)))
 (= (+ (+ ?x32792 ?x32720) ?x30719) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x17152 (* ?x30534 l_0_7_61)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x17152) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30765 (* ?x30534 l_0_7_67)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_22) ?x30765) 0.0))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30775 (* ?x30534 l_0_7_74)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_29) ?x30775) 0.0))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x32835 (* ?x32834 l_0_7_97)))
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30785 (* ?x30534 l_0_7_82)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x32831 (* ?x30531 l_0_7_142)))
 (let ((?x17013 (* (- 2.0) l_0_7_1)))
 (let ((?x30783 (* ?x17013 l_0_7_37)))
 (= (- (+ (+ ?x30783 ?x32831) ?x30785) ?x32835) 0.0))))))))))
(assert
 (let ((?x30814 (* l_0_7_48 l_0_7_48)))
 (let ((?x30812 (* l_0_7_47 l_0_7_47)))
 (let ((?x32856 (+ (+ (- (* (- l_0_7_2) l_0_7_2) (* l_0_7_3 l_0_7_3)) ?x30812) ?x30814)))
 (= ?x32856 0.0)))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30858 (* ?x30857 l_0_7_50)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30855 (* ?x30854 l_0_7_49)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30852 (* ?x30851 l_0_7_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_4) ?x30852) ?x30855) ?x30858) 0.0))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30918 (* ?x30857 l_0_7_53)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30916 (* ?x30854 l_0_7_52)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30914 (* ?x30851 l_0_7_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_7) ?x30914) ?x30916) ?x30918) 0.0))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30993 (* ?x30857 l_0_7_57)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30991 (* ?x30854 l_0_7_56)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x30974 (* ?x30973 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_11) l_0_7_2) ?x30974) ?x30991) ?x30993) 0.0))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31063 (* ?x30857 l_0_7_62)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31061 (* ?x30854 l_0_7_61)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31059 (* ?x30553 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_16) l_0_7_2) ?x31059) ?x31061) ?x31063) 0.0))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31123 (* ?x30857 l_0_7_68)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31121 (* ?x30854 l_0_7_67)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31119 (* ?x31118 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_22) ?x31119) ?x31121) ?x31123) 0.0))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31194 (* ?x30857 l_0_7_75)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31192 (* ?x30854 l_0_7_74)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31190 (* ?x30851 l_0_7_30)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31188 (* ?x30848 l_0_7_29)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x32788 (* ?x30909 l_0_7_160)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x32786 (* ?x30906 l_0_7_159)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x32784 (* ?x30903 l_0_7_158)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x32782 (* ?x30900 l_0_7_157)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x32780 (* ?x32779 l_0_7_99)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x32777 (* ?x32776 l_0_7_98)))
 (let ((?x32773 (* 2.0 l_0_7_112)))
 (let ((?x32774 (* ?x32773 l_0_7_97)))
 (let ((?x32922 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_115) ?x32774) ?x32777) ?x32780) ?x32782)))
 (let ((?x32925 (+ (+ (+ ?x32922 ?x32784) ?x32786) ?x32788)))
 (= (+ (+ (- (- ?x32925 ?x31188) ?x31190) ?x31192) ?x31194) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x32945 (* ?x32944 l_0_7_98)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x32942 (* ?x32941 l_0_7_97)))
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31246 (* ?x30857 l_0_7_83)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31244 (* ?x30854 l_0_7_82)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31242 (* ?x30851 l_0_7_38)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31240 (* ?x30848 l_0_7_37)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x19150 (* ?x30805 l_0_7_143)))
 (let ((?x32936 (+ (* (* 2.0 l_0_7_137) l_0_7_142) ?x19150)))
 (= (- (- (+ (+ (- (- ?x32936 ?x31240) ?x31242) ?x31244) ?x31246) ?x32942) ?x32945) 0.0)))))))))))))))))
(assert
 (let ((?x31307 (* l_0_7_6 l_0_7_6)))
 (let ((?x31305 (* l_0_7_51 l_0_7_51)))
 (let ((?x31303 (* l_0_7_50 l_0_7_50)))
 (let ((?x31301 (* l_0_7_5 l_0_7_5)))
 (let ((?x31304 (+ (- (+ (* (- l_0_7_4) l_0_7_4) (* l_0_7_49 l_0_7_49)) ?x31301) ?x31303)))
 (= (- (+ ?x31304 ?x31305) ?x31307) 0.0)))))))
(assert
 (let ((?x31334 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31331 (* ?x31330 l_0_7_54)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31328 (* ?x31327 l_0_7_53)))
 (let ((?x31325 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31322 (* ?x31321 l_0_7_52)))
 (let ((?x31332 (+ (+ (- (+ (* (* (- 2.0) l_0_7_4) l_0_7_7) ?x31322) ?x31325) ?x31328) ?x31331)))
 (= (- ?x31332 ?x31334) 0.0)))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31373 (* ?x31330 l_0_7_58)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31371 (* ?x31327 l_0_7_57)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31369 (* ?x31321 l_0_7_56)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31367 (* ?x31366 l_0_7_6)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31364 (* ?x30973 l_0_7_5)))
 (let ((?x31372 (+ (+ (- (- (* (* (- 2.0) l_0_7_11) l_0_7_4) ?x31364) ?x31367) ?x31369) ?x31371)))
 (= (+ ?x31372 ?x31373) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31400 (* ?x31330 l_0_7_63)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31398 (* ?x31327 l_0_7_62)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31396 (* ?x31321 l_0_7_61)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31394 (* ?x30556 l_0_7_6)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31386 (* ?x30553 l_0_7_5)))
 (let ((?x31399 (+ (+ (- (- (* (* (- 2.0) l_0_7_16) l_0_7_4) ?x31386) ?x31394) ?x31396) ?x31398)))
 (= (+ ?x31399 ?x31400) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31431 (* ?x31330 l_0_7_69)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31429 (* ?x31327 l_0_7_68)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31427 (* ?x31321 l_0_7_67)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31425 (* ?x31424 l_0_7_6)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31416 (* ?x31118 l_0_7_5)))
 (let ((?x31430 (+ (+ (- (- (* (* (- 2.0) l_0_7_22) l_0_7_4) ?x31416) ?x31425) ?x31427) ?x31429)))
 (= (+ ?x31430 ?x31431) 0.0)))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31465 (* ?x31330 l_0_7_76)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31463 (* ?x31327 l_0_7_75)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31461 (* ?x31321 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31459 (* ?x31458 l_0_7_6)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31456 (* ?x31455 l_0_7_5)))
 (let ((?x31464 (+ (+ (- (- (* (* (- 2.0) l_0_7_29) l_0_7_4) ?x31456) ?x31459) ?x31461) ?x31463)))
 (= (+ ?x31464 ?x31465) 0.0)))))))))))))
(assert
 (let ((?x32975 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x32972 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x32969 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31497 (* ?x31330 l_0_7_84)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31495 (* ?x31327 l_0_7_83)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31493 (* ?x31321 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31491 (* ?x31490 l_0_7_6)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31482 (* ?x31481 l_0_7_5)))
 (let ((?x17680 (* 2.0 l_0_7_37)))
 (let ((?x32961 (* ?x17680 l_0_7_4)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x19191 (* ?x30845 l_0_7_144)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x15264 (* ?x30842 l_0_7_143)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x15362 (* ?x30839 l_0_7_142)))
 (let ((?x32960 (+ (+ ?x15362 ?x15264) ?x19191)))
 (let ((?x32970 (- (+ (+ (+ (- (- (- ?x32960 ?x32961) ?x31482) ?x31491) ?x31493) ?x31495) ?x31497) ?x32969)))
 (= (- (- ?x32970 ?x32972) ?x32975) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x31528 (* l_0_7_9 l_0_7_9)))
 (let ((?x31526 (* l_0_7_8 l_0_7_8)))
 (let ((?x31524 (* l_0_7_7 l_0_7_7)))
 (let ((?x31522 (* l_0_7_55 l_0_7_55)))
 (let ((?x31520 (* l_0_7_54 l_0_7_54)))
 (let ((?x31518 (* l_0_7_53 l_0_7_53)))
 (let ((?x31521 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_52 l_0_7_52)) ?x31518) ?x31520)))
 (= (- (- (- (+ ?x31521 ?x31522) ?x31524) ?x31526) ?x31528) 0.0)))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31556 (* ?x31555 l_0_7_59)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31553 (* ?x31552 l_0_7_58)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31550 (* ?x31549 l_0_7_57)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31547 (* ?x31546 l_0_7_56)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31544 (* ?x31366 l_0_7_9)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31542 (* ?x30973 l_0_7_8)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x31540 (* ?x30970 l_0_7_7)))
 (let ((?x31548 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_14) ?x31540) ?x31542) ?x31544) ?x31547)))
 (= (+ (+ (+ ?x31548 ?x31550) ?x31553) ?x31556) 0.0)))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31595 (* ?x31555 l_0_7_64)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31593 (* ?x31552 l_0_7_63)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31591 (* ?x31549 l_0_7_62)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31589 (* ?x31546 l_0_7_61)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31587 (* ?x30556 l_0_7_9)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31578 (* ?x30553 l_0_7_8)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x31574 (* ?x30550 l_0_7_7)))
 (let ((?x31590 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) ?x31574) ?x31578) ?x31587) ?x31589)))
 (= (+ (+ (+ ?x31590 ?x31591) ?x31593) ?x31595) 0.0)))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31640 (* ?x31555 l_0_7_70)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31638 (* ?x31552 l_0_7_69)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31636 (* ?x31549 l_0_7_68)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31634 (* ?x31546 l_0_7_67)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31632 (* ?x31424 l_0_7_9)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31630 (* ?x31118 l_0_7_8)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x31628 (* ?x31627 l_0_7_7)))
 (let ((?x17557 (* (- 2.0) l_0_7_10)))
 (let ((?x31613 (* ?x17557 l_0_7_25)))
 (let ((?x33008 (+ (+ (+ (+ (- (- (- ?x31613 ?x31628) ?x31630) ?x31632) ?x31634) ?x31636) ?x31638) ?x31640)))
 (= ?x33008 0.0)))))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31679 (* ?x31555 l_0_7_77)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31677 (* ?x31552 l_0_7_76)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31675 (* ?x31549 l_0_7_75)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31673 (* ?x31546 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31671 (* ?x31458 l_0_7_9)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31669 (* ?x31455 l_0_7_8)))
 (let ((?x31666 (* 2.0 l_0_7_29)))
 (let ((?x31667 (* ?x31666 l_0_7_7)))
 (let ((?x31674 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_32) ?x31667) ?x31669) ?x31671) ?x31673)))
 (= (+ (+ (+ ?x31674 ?x31675) ?x31677) ?x31679) 0.0)))))))))))))))))
(assert
 (let ((?x33039 (* l_0_7_99 l_0_7_99)))
 (let ((?x33037 (* l_0_7_98 l_0_7_98)))
 (let ((?x33035 (* l_0_7_97 l_0_7_97)))
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31715 (* ?x31555 l_0_7_85)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31713 (* ?x31552 l_0_7_84)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31711 (* ?x31549 l_0_7_83)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31709 (* ?x31546 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31707 (* ?x31490 l_0_7_9)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31698 (* ?x31481 l_0_7_8)))
 (let ((?x17680 (* 2.0 l_0_7_37)))
 (let ((?x31695 (* ?x17680 l_0_7_7)))
 (let ((?x33026 (* l_0_7_145 l_0_7_145)))
 (let ((?x33024 (* l_0_7_144 l_0_7_144)))
 (let ((?x33022 (* l_0_7_143 l_0_7_143)))
 (let ((?x33020 (* l_0_7_142 l_0_7_142)))
 (let ((?x33021 (+ (- (* (* (- 2.0) l_0_7_10) l_0_7_40) (* l_0_7_100 l_0_7_100)) ?x33020)))
 (let ((?x33031 (+ (- (- (- (+ (+ (+ ?x33021 ?x33022) ?x33024) ?x33026) ?x31695) ?x31698) ?x31707) ?x31709)))
 (= (- (- (- (+ (+ (+ ?x33031 ?x31711) ?x31713) ?x31715) ?x33035) ?x33037) ?x33039) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x31757 (* l_0_7_60 l_0_7_60)))
 (let ((?x31755 (* l_0_7_59 l_0_7_59)))
 (let ((?x31753 (* l_0_7_58 l_0_7_58)))
 (let ((?x31751 (* l_0_7_57 l_0_7_57)))
 (let ((?x31749 (* l_0_7_56 l_0_7_56)))
 (let ((?x31747 (* l_0_7_15 l_0_7_15)))
 (let ((?x31745 (* l_0_7_14 l_0_7_14)))
 (let ((?x31736 (* l_0_7_13 l_0_7_13)))
 (let ((?x31746 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x31736) ?x31745)))
 (= (+ (+ (+ (+ (+ (- ?x31746 ?x31747) ?x31749) ?x31751) ?x31753) ?x31755) ?x31757) 0.0)))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31799 (* ?x31798 l_0_7_65)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31796 (* ?x31795 l_0_7_64)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31793 (* ?x31792 l_0_7_63)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31790 (* ?x31789 l_0_7_62)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31787 (* ?x31786 l_0_7_61)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31784 (* ?x31783 l_0_7_20)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31781 (* ?x31780 l_0_7_19)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31778 (* ?x31366 l_0_7_18)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31776 (* ?x30973 l_0_7_17)))
 (let ((?x31785 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_16) ?x31776) ?x31778) ?x31781) ?x31784)))
 (= (+ (+ (+ (+ (+ ?x31785 ?x31787) ?x31790) ?x31793) ?x31796) ?x31799) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31845 (* ?x31798 l_0_7_71)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31843 (* ?x31795 l_0_7_70)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31841 (* ?x31792 l_0_7_69)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31839 (* ?x31789 l_0_7_68)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31837 (* ?x31786 l_0_7_67)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31835 (* ?x31783 l_0_7_26)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31825 (* ?x31780 l_0_7_25)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31822 (* ?x31366 l_0_7_24)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31818 (* ?x30973 l_0_7_23)))
 (let ((?x31836 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_22) ?x31818) ?x31822) ?x31825) ?x31835)))
 (= (+ (+ (+ (+ (+ ?x31836 ?x31837) ?x31839) ?x31841) ?x31843) ?x31845) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31889 (* ?x31798 l_0_7_78)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31887 (* ?x31795 l_0_7_77)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31885 (* ?x31792 l_0_7_76)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31883 (* ?x31789 l_0_7_75)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31881 (* ?x31786 l_0_7_74)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31879 (* ?x31783 l_0_7_33)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31869 (* ?x31780 l_0_7_32)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31866 (* ?x31366 l_0_7_31)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x17777 (* ?x30973 l_0_7_30)))
 (let ((?x31880 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_29) ?x17777) ?x31866) ?x31869) ?x31879)))
 (= (+ (+ (+ (+ (+ ?x31880 ?x31881) ?x31883) ?x31885) ?x31887) ?x31889) 0.0)))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31934 (* ?x31798 l_0_7_86)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31932 (* ?x31795 l_0_7_85)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31930 (* ?x31792 l_0_7_84)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31928 (* ?x31789 l_0_7_83)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31926 (* ?x31786 l_0_7_82)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31924 (* ?x31783 l_0_7_41)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33085 (* ?x30909 l_0_7_149)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33083 (* ?x30906 l_0_7_148)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33081 (* ?x30903 l_0_7_147)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33079 (* ?x30900 l_0_7_146)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31914 (* ?x31780 l_0_7_40)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31911 (* ?x31366 l_0_7_39)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31907 (* ?x30973 l_0_7_38)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x33074 (* ?x30970 l_0_7_37)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x33072 (* ?x30961 l_0_7_99)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x33070 (* ?x30949 l_0_7_98)))
 (let ((?x19277 (* 2.0 l_0_7_101)))
 (let ((?x19278 (* ?x19277 l_0_7_97)))
 (let ((?x33073 (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_104) ?x19278) ?x33070) ?x33072)))
 (let ((?x33084 (+ (+ (+ (- (- (- (- ?x33073 ?x33074) ?x31907) ?x31911) ?x31914) ?x33079) ?x33081) ?x33083)))
 (let ((?x33092 (+ (+ (+ (+ (+ (- (+ ?x33084 ?x33085) ?x31924) ?x31926) ?x31928) ?x31930) ?x31932) ?x31934)))
 (= ?x33092 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31989 (* l_0_7_66 l_0_7_66)))
 (let ((?x31987 (* l_0_7_65 l_0_7_65)))
 (let ((?x31985 (* l_0_7_64 l_0_7_64)))
 (let ((?x31983 (* l_0_7_63 l_0_7_63)))
 (let ((?x31981 (* l_0_7_62 l_0_7_62)))
 (let ((?x31979 (* l_0_7_61 l_0_7_61)))
 (let ((?x31977 (* l_0_7_21 l_0_7_21)))
 (let ((?x31975 (* l_0_7_20 l_0_7_20)))
 (let ((?x31973 (* l_0_7_19 l_0_7_19)))
 (let ((?x31963 (* l_0_7_18 l_0_7_18)))
 (let ((?x31974 (- (- (- (* (- l_0_7_16) l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31963) ?x31973)))
 (let ((?x31988 (+ (+ (+ (+ (+ (- (- ?x31974 ?x31975) ?x31977) ?x31979) ?x31981) ?x31983) ?x31985) ?x31987)))
 (= (+ ?x31988 ?x31989) 0.0))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32032 (* ?x30603 l_0_7_72)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32030 (* ?x30600 l_0_7_71)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32028 (* ?x30597 l_0_7_70)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32026 (* ?x30594 l_0_7_69)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32024 (* ?x30591 l_0_7_68)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32022 (* ?x30588 l_0_7_67)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32020 (* ?x30565 l_0_7_27)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32018 (* ?x30562 l_0_7_26)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32016 (* ?x30559 l_0_7_25)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32014 (* ?x30556 l_0_7_24)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32012 (* ?x30553 l_0_7_23)))
 (let ((?x32019 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_22) ?x32012) ?x32014) ?x32016) ?x32018)))
 (let ((?x32033 (+ (+ (+ (+ (+ (+ (- ?x32019 ?x32020) ?x32022) ?x32024) ?x32026) ?x32028) ?x32030) ?x32032)))
 (= ?x32033 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32106 (* ?x30603 l_0_7_87)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32104 (* ?x30600 l_0_7_86)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32102 (* ?x30597 l_0_7_85)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32100 (* ?x30594 l_0_7_84)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32098 (* ?x30591 l_0_7_83)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32096 (* ?x30588 l_0_7_82)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32094 (* ?x30565 l_0_7_42)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32092 (* ?x30562 l_0_7_41)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32090 (* ?x30559 l_0_7_40)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32088 (* ?x30556 l_0_7_39)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32086 (* ?x30553 l_0_7_38)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x19353 (* ?x30550 l_0_7_37)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x30910 (* ?x30909 l_0_7_154)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x30907 (* ?x30906 l_0_7_153)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x30904 (* ?x30903 l_0_7_152)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x30901 (* ?x30900 l_0_7_151)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30898 (* ?x30683 l_0_7_99)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30896 (* ?x30680 l_0_7_98)))
 (let ((?x30528 (* 2.0 l_0_7_106)))
 (let ((?x30886 (* ?x30528 l_0_7_97)))
 (let ((?x30902 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_109) ?x30886) ?x30896) ?x30898) ?x30901)))
 (let ((?x30911 (+ (+ (+ ?x30902 ?x30904) ?x30907) ?x30910)))
 (let ((?x19285 (+ (- (- (- (- (- (- ?x30911 ?x19353) ?x32086) ?x32088) ?x32090) ?x32092) ?x32094) ?x32096)))
 (= (+ (+ (+ (+ (+ ?x19285 ?x32098) ?x32100) ?x32102) ?x32104) ?x32106) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32175 (* l_0_7_73 l_0_7_73)))
 (let ((?x32173 (* l_0_7_72 l_0_7_72)))
 (let ((?x32171 (* l_0_7_71 l_0_7_71)))
 (let ((?x32169 (* l_0_7_70 l_0_7_70)))
 (let ((?x32167 (* l_0_7_69 l_0_7_69)))
 (let ((?x32165 (* l_0_7_68 l_0_7_68)))
 (let ((?x32163 (* l_0_7_67 l_0_7_67)))
 (let ((?x32161 (* l_0_7_28 l_0_7_28)))
 (let ((?x32159 (* l_0_7_27 l_0_7_27)))
 (let ((?x32157 (* l_0_7_26 l_0_7_26)))
 (let ((?x32146 (* l_0_7_25 l_0_7_25)))
 (let ((?x32143 (* l_0_7_24 l_0_7_24)))
 (let ((?x32156 (- (- (- (* (- l_0_7_22) l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32143) ?x32146)))
 (let ((?x32170 (+ (+ (+ (+ (- (- (- ?x32156 ?x32157) ?x32159) ?x32161) ?x32163) ?x32165) ?x32167) ?x32169)))
 (= (+ (+ (+ ?x32170 ?x32171) ?x32173) ?x32175) 0.0))))))))))))))))
(assert
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32238 (* ?x32237 l_0_7_80)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32235 (* ?x32234 l_0_7_79)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32232 (* ?x32231 l_0_7_78)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32229 (* ?x32228 l_0_7_77)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32226 (* ?x32225 l_0_7_76)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32223 (* ?x32222 l_0_7_75)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32220 (* ?x32219 l_0_7_74)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32217 (* ?x32216 l_0_7_35)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32214 (* ?x32213 l_0_7_34)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32211 (* ?x32210 l_0_7_33)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32208 (* ?x32207 l_0_7_32)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32205 (* ?x31424 l_0_7_31)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32203 (* ?x31118 l_0_7_30)))
 (let ((?x32212 (- (- (- (- (* (* (- 2.0) l_0_7_22) l_0_7_29) ?x32203) ?x32205) ?x32208) ?x32211)))
 (let ((?x32233 (+ (+ (+ (+ (+ (- (- ?x32212 ?x32214) ?x32217) ?x32220) ?x32223) ?x32226) ?x32229) ?x32232)))
 (= (+ (+ ?x32233 ?x32235) ?x32238) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32304 (* ?x32237 l_0_7_88)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32302 (* ?x32234 l_0_7_87)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32300 (* ?x32231 l_0_7_86)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32298 (* ?x32228 l_0_7_85)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32296 (* ?x32225 l_0_7_84)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32294 (* ?x32222 l_0_7_83)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32292 (* ?x32219 l_0_7_82)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32290 (* ?x32216 l_0_7_43)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32288 (* ?x32213 l_0_7_42)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32286 (* ?x32210 l_0_7_41)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32274 (* ?x32207 l_0_7_40)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32270 (* ?x31424 l_0_7_39)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32266 (* ?x31118 l_0_7_38)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x17967 (* ?x31627 l_0_7_37)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x32788 (* ?x30909 l_0_7_160)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x32786 (* ?x30906 l_0_7_159)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x32784 (* ?x30903 l_0_7_158)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x32782 (* ?x30900 l_0_7_157)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x32780 (* ?x32779 l_0_7_99)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x32777 (* ?x32776 l_0_7_98)))
 (let ((?x32773 (* 2.0 l_0_7_112)))
 (let ((?x32774 (* ?x32773 l_0_7_97)))
 (let ((?x32922 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_115) ?x32774) ?x32777) ?x32780) ?x32782)))
 (let ((?x32925 (+ (+ (+ ?x32922 ?x32784) ?x32786) ?x32788)))
 (let ((?x33133 (- (- (- (- (- (- (- ?x32925 ?x17967) ?x32266) ?x32270) ?x32274) ?x32286) ?x32288) ?x32290)))
 (let ((?x33140 (+ (+ (+ (+ (+ (+ (+ ?x33133 ?x32292) ?x32294) ?x32296) ?x32298) ?x32300) ?x32302) ?x32304)))
 (= ?x33140 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32372 (* l_0_7_81 l_0_7_81)))
 (let ((?x32370 (* l_0_7_80 l_0_7_80)))
 (let ((?x32368 (* l_0_7_79 l_0_7_79)))
 (let ((?x32366 (* l_0_7_78 l_0_7_78)))
 (let ((?x32364 (* l_0_7_77 l_0_7_77)))
 (let ((?x32362 (* l_0_7_76 l_0_7_76)))
 (let ((?x32360 (* l_0_7_75 l_0_7_75)))
 (let ((?x32358 (* l_0_7_74 l_0_7_74)))
 (let ((?x32356 (* l_0_7_36 l_0_7_36)))
 (let ((?x32354 (* l_0_7_35 l_0_7_35)))
 (let ((?x32352 (* l_0_7_34 l_0_7_34)))
 (let ((?x32350 (* l_0_7_33 l_0_7_33)))
 (let ((?x32348 (* l_0_7_32 l_0_7_32)))
 (let ((?x32346 (* l_0_7_31 l_0_7_31)))
 (let ((?x32349 (- (- (- (* (- l_0_7_29) l_0_7_29) (* l_0_7_30 l_0_7_30)) ?x32346) ?x32348)))
 (let ((?x32363 (+ (+ (+ (- (- (- (- ?x32349 ?x32350) ?x32352) ?x32354) ?x32356) ?x32358) ?x32360) ?x32362)))
 (= (+ (+ (+ (+ (+ ?x32363 ?x32364) ?x32366) ?x32368) ?x32370) ?x32372) 0.0))))))))))))))))))
(assert
 (let ((?x32441 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32438 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32435 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32432 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32429 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32426 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32423 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32420 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32417 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32414 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32411 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32408 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32405 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x32402 (* ?x31458 l_0_7_39)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x32400 (* ?x31455 l_0_7_38)))
 (let ((?x31666 (* 2.0 l_0_7_29)))
 (let ((?x33176 (* ?x31666 l_0_7_37)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33174 (* ?x30909 l_0_7_167)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33172 (* ?x30906 l_0_7_166)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33170 (* ?x30903 l_0_7_165)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33168 (* ?x30900 l_0_7_164)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x33166 (* ?x33156 l_0_7_99)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x19428 (* ?x19427 l_0_7_98)))
 (let ((?x19433 (* 2.0 l_0_7_119)))
 (let ((?x19434 (* ?x19433 l_0_7_97)))
 (let ((?x33169 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_122) ?x19434) ?x19428) ?x33166) ?x33168)))
 (let ((?x33175 (+ (+ (+ ?x33169 ?x33170) ?x33172) ?x33174)))
 (let ((?x33183 (- (- (- (- (- (- (- ?x33175 ?x33176) ?x32400) ?x32402) ?x32405) ?x32408) ?x32411) ?x32414)))
 (let ((?x33190 (+ (+ (+ (+ (+ (+ (- ?x33183 ?x32417) ?x32420) ?x32423) ?x32426) ?x32429) ?x32432) ?x32435)))
 (= (+ (+ ?x33190 ?x32438) ?x32441) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32524 (* l_0_7_90 l_0_7_90)))
 (let ((?x32522 (* l_0_7_89 l_0_7_89)))
 (let ((?x32520 (* l_0_7_88 l_0_7_88)))
 (let ((?x32518 (* l_0_7_87 l_0_7_87)))
 (let ((?x32516 (* l_0_7_86 l_0_7_86)))
 (let ((?x32514 (* l_0_7_85 l_0_7_85)))
 (let ((?x32512 (* l_0_7_84 l_0_7_84)))
 (let ((?x32510 (* l_0_7_83 l_0_7_83)))
 (let ((?x32508 (* l_0_7_82 l_0_7_82)))
 (let ((?x32506 (* l_0_7_45 l_0_7_45)))
 (let ((?x32504 (* l_0_7_44 l_0_7_44)))
 (let ((?x32502 (* l_0_7_43 l_0_7_43)))
 (let ((?x32500 (* l_0_7_42 l_0_7_42)))
 (let ((?x32487 (* l_0_7_41 l_0_7_41)))
 (let ((?x32484 (* l_0_7_40 l_0_7_40)))
 (let ((?x32480 (* l_0_7_39 l_0_7_39)))
 (let ((?x32476 (* l_0_7_38 l_0_7_38)))
 (let ((?x32528 (* l_0_7_37 l_0_7_37)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33228 (* ?x30909 l_0_7_175)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33226 (* ?x30906 l_0_7_174)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33224 (* ?x30903 l_0_7_173)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33222 (* ?x30900 l_0_7_172)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x33220 (* ?x33219 l_0_7_99)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x33217 (* ?x33216 l_0_7_98)))
 (let ((?x33213 (* 2.0 l_0_7_127)))
 (let ((?x33214 (* ?x33213 l_0_7_97)))
 (let ((?x33223 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_130) ?x33214) ?x33217) ?x33220) ?x33222)))
 (let ((?x33229 (+ (+ (+ ?x33223 ?x33224) ?x33226) ?x33228)))
 (let ((?x33236 (- (- (- (- (- (- (- ?x33229 ?x32528) ?x32476) ?x32480) ?x32484) ?x32487) ?x32500) ?x32502)))
 (let ((?x33243 (+ (+ (+ (+ (+ (- (- ?x33236 ?x32504) ?x32506) ?x32508) ?x32510) ?x32512) ?x32514) ?x32516)))
 (= (+ (+ (+ (+ ?x33243 ?x32518) ?x32520) ?x32522) ?x32524) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30441 (* l_0_7_46 l_0_7_46)))
 (let ((?x30333 (* l_0_7_226 l_0_7_226)))
 (let ((?x19612 (- (- (* l_0_7_1 l_0_7_1) (* (* 2.0 l_0_7_181) l_0_7_184)) ?x30333)))
 (let ((?x19573 (- (- ?x19612 (* (* 2.0 l_0_7_271) l_0_7_274)) (* (* 2.0 l_0_7_316) l_0_7_319))))
 (= (- (- ?x19573 (* (* 2.0 l_0_7_361) l_0_7_364)) ?x30441) 0.0))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30535 (* ?x30534 l_0_7_47)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33275 (* ?x33274 l_0_7_227)))
 (let ((?x33271 (- (* (* 2.0 l_0_7_1) l_0_7_2) (* (* 2.0 l_0_7_182) l_0_7_184))))
 (let ((?x33278 (- (- (- ?x33271 (* (* 2.0 l_0_7_183) l_0_7_185)) ?x33275) (* (* 2.0 l_0_7_272) l_0_7_274))))
 (let ((?x33282 (- (- ?x33278 (* (* 2.0 l_0_7_273) l_0_7_275)) (* (* 2.0 l_0_7_317) l_0_7_319))))
 (let ((?x33286 (- (- ?x33282 (* (* 2.0 l_0_7_318) l_0_7_320)) (* (* 2.0 l_0_7_362) l_0_7_364))))
 (= (- (- ?x33286 (* (* 2.0 l_0_7_363) l_0_7_365)) ?x30535) 0.0))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30586 (* ?x30534 l_0_7_49)))
 (let ((?x33333 (* l_0_7_366 l_0_7_366)))
 (let ((?x33331 (* l_0_7_365 l_0_7_365)))
 (let ((?x33329 (* l_0_7_364 l_0_7_364)))
 (let ((?x33327 (* l_0_7_321 l_0_7_321)))
 (let ((?x33325 (* l_0_7_320 l_0_7_320)))
 (let ((?x33323 (* l_0_7_319 l_0_7_319)))
 (let ((?x33321 (* l_0_7_276 l_0_7_276)))
 (let ((?x33319 (* l_0_7_275 l_0_7_275)))
 (let ((?x33317 (* l_0_7_274 l_0_7_274)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33315 (* ?x33274 l_0_7_229)))
 (let ((?x33308 (- (* (* 2.0 l_0_7_1) l_0_7_4) (* (* 1.0 l_0_7_184) l_0_7_184))))
 (let ((?x33314 (- (- ?x33308 (* (* 1.0 l_0_7_185) l_0_7_185)) (* (* 1.0 l_0_7_186) l_0_7_186))))
 (let ((?x33328 (- (- (- (- (- (- (- ?x33314 ?x33315) ?x33317) ?x33319) ?x33321) ?x33323) ?x33325) ?x33327)))
 (= (- (- (- (- ?x33328 ?x33329) ?x33331) ?x33333) ?x30586) 0.0))))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30668 (* ?x30534 l_0_7_52)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33375 (* ?x33274 l_0_7_232)))
 (let ((?x33368 (- (* (* 2.0 l_0_7_1) l_0_7_7) (* (* 2.0 l_0_7_184) l_0_7_187))))
 (let ((?x33374 (- (- ?x33368 (* (* 2.0 l_0_7_185) l_0_7_188)) (* (* 2.0 l_0_7_186) l_0_7_189))))
 (let ((?x33382 (- (- (- ?x33374 ?x33375) (* (* 2.0 l_0_7_274) l_0_7_277)) (* (* 2.0 l_0_7_275) l_0_7_278))))
 (let ((?x33388 (- (- ?x33382 (* (* 2.0 l_0_7_276) l_0_7_279)) (* (* 2.0 l_0_7_319) l_0_7_322))))
 (let ((?x33394 (- (- ?x33388 (* (* 2.0 l_0_7_320) l_0_7_323)) (* (* 2.0 l_0_7_321) l_0_7_324))))
 (let ((?x33400 (- (- ?x33394 (* (* 2.0 l_0_7_364) l_0_7_367)) (* (* 2.0 l_0_7_365) l_0_7_368))))
 (= (- (- ?x33400 (* (* 2.0 l_0_7_366) l_0_7_369)) ?x30668) 0.0))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x33488 (* ?x32834 l_0_7_94)))
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30719 (* ?x30534 l_0_7_56)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33467 (* ?x33274 l_0_7_236)))
 (let ((?x33315 (* ?x33274 l_0_7_229)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x33458 (* ?x30531 l_0_7_139)))
 (let ((?x33461 (- (- (* (* 2.0 l_0_7_1) l_0_7_11) ?x33458) (* (* 2.0 l_0_7_184) l_0_7_191))))
 (let ((?x33465 (- (- ?x33461 (* (* 2.0 l_0_7_185) l_0_7_192)) (* (* 2.0 l_0_7_186) l_0_7_193))))
 (let ((?x33472 (- (- (- (+ ?x33465 ?x33315) ?x33467) (* (* 2.0 l_0_7_274) l_0_7_281)) (* (* 2.0 l_0_7_275) l_0_7_282))))
 (let ((?x33476 (- (- ?x33472 (* (* 2.0 l_0_7_276) l_0_7_283)) (* (* 2.0 l_0_7_319) l_0_7_326))))
 (let ((?x33480 (- (- ?x33476 (* (* 2.0 l_0_7_320) l_0_7_327)) (* (* 2.0 l_0_7_321) l_0_7_328))))
 (let ((?x33484 (- (- ?x33480 (* (* 2.0 l_0_7_364) l_0_7_371)) (* (* 2.0 l_0_7_365) l_0_7_372))))
 (= (+ (- (- ?x33484 (* (* 2.0 l_0_7_366) l_0_7_373)) ?x30719) ?x33488) 0.0)))))))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x17152 (* ?x30534 l_0_7_61)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33551 (* ?x33274 l_0_7_241)))
 (let ((?x33546 (- (* (* 2.0 l_0_7_1) l_0_7_16) (* (* 2.0 l_0_7_184) l_0_7_196))))
 (let ((?x33550 (- (- ?x33546 (* (* 2.0 l_0_7_185) l_0_7_197)) (* (* 2.0 l_0_7_186) l_0_7_198))))
 (let ((?x33556 (- (- (- ?x33550 ?x33551) (* (* 2.0 l_0_7_274) l_0_7_286)) (* (* 2.0 l_0_7_275) l_0_7_287))))
 (let ((?x33560 (- (- ?x33556 (* (* 2.0 l_0_7_276) l_0_7_288)) (* (* 2.0 l_0_7_319) l_0_7_331))))
 (let ((?x33564 (- (- ?x33560 (* (* 2.0 l_0_7_320) l_0_7_332)) (* (* 2.0 l_0_7_321) l_0_7_333))))
 (let ((?x33568 (- (- ?x33564 (* (* 2.0 l_0_7_364) l_0_7_376)) (* (* 2.0 l_0_7_365) l_0_7_377))))
 (= (- (- ?x33568 (* (* 2.0 l_0_7_366) l_0_7_378)) ?x17152) 0.0))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30765 (* ?x30534 l_0_7_67)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33641 (* ?x33274 l_0_7_247)))
 (let ((?x33636 (- (* (* 2.0 l_0_7_1) l_0_7_22) (* (* 2.0 l_0_7_184) l_0_7_202))))
 (let ((?x33640 (- (- ?x33636 (* (* 2.0 l_0_7_185) l_0_7_203)) (* (* 2.0 l_0_7_186) l_0_7_204))))
 (let ((?x33646 (- (- (- ?x33640 ?x33641) (* (* 2.0 l_0_7_274) l_0_7_292)) (* (* 2.0 l_0_7_275) l_0_7_293))))
 (let ((?x33650 (- (- ?x33646 (* (* 2.0 l_0_7_276) l_0_7_294)) (* (* 2.0 l_0_7_319) l_0_7_337))))
 (let ((?x33654 (- (- ?x33650 (* (* 2.0 l_0_7_320) l_0_7_338)) (* (* 2.0 l_0_7_321) l_0_7_339))))
 (let ((?x33658 (- (- ?x33654 (* (* 2.0 l_0_7_364) l_0_7_382)) (* (* 2.0 l_0_7_365) l_0_7_383))))
 (= (- (- ?x33658 (* (* 2.0 l_0_7_366) l_0_7_384)) ?x30765) 0.0))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30775 (* ?x30534 l_0_7_74)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33722 (* ?x33274 l_0_7_254)))
 (let ((?x33717 (- (* (* 2.0 l_0_7_1) l_0_7_29) (* (* 2.0 l_0_7_184) l_0_7_209))))
 (let ((?x33721 (- (- ?x33717 (* (* 2.0 l_0_7_185) l_0_7_210)) (* (* 2.0 l_0_7_186) l_0_7_211))))
 (let ((?x33727 (- (- (- ?x33721 ?x33722) (* (* 2.0 l_0_7_274) l_0_7_299)) (* (* 2.0 l_0_7_275) l_0_7_300))))
 (let ((?x33731 (- (- ?x33727 (* (* 2.0 l_0_7_276) l_0_7_301)) (* (* 2.0 l_0_7_319) l_0_7_344))))
 (let ((?x33735 (- (- ?x33731 (* (* 2.0 l_0_7_320) l_0_7_345)) (* (* 2.0 l_0_7_321) l_0_7_346))))
 (let ((?x33739 (- (- ?x33735 (* (* 2.0 l_0_7_364) l_0_7_389)) (* (* 2.0 l_0_7_365) l_0_7_390))))
 (= (- (- ?x33739 (* (* 2.0 l_0_7_366) l_0_7_391)) ?x30775) 0.0))))))))))))
(assert
 (let ((?x30534 (* 2.0 l_0_7_46)))
 (let ((?x30785 (* ?x30534 l_0_7_82)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33800 (* ?x33274 l_0_7_262)))
 (let ((?x33795 (- (* (* 2.0 l_0_7_1) l_0_7_37) (* (* 2.0 l_0_7_184) l_0_7_217))))
 (let ((?x33799 (- (- ?x33795 (* (* 2.0 l_0_7_185) l_0_7_218)) (* (* 2.0 l_0_7_186) l_0_7_219))))
 (let ((?x33805 (- (- (- ?x33799 ?x33800) (* (* 2.0 l_0_7_274) l_0_7_307)) (* (* 2.0 l_0_7_275) l_0_7_308))))
 (let ((?x33809 (- (- ?x33805 (* (* 2.0 l_0_7_276) l_0_7_309)) (* (* 2.0 l_0_7_319) l_0_7_352))))
 (let ((?x33813 (- (- ?x33809 (* (* 2.0 l_0_7_320) l_0_7_353)) (* (* 2.0 l_0_7_321) l_0_7_354))))
 (let ((?x33817 (- (- ?x33813 (* (* 2.0 l_0_7_364) l_0_7_397)) (* (* 2.0 l_0_7_365) l_0_7_398))))
 (= (- (- ?x33817 (* (* 2.0 l_0_7_366) l_0_7_399)) ?x30785) 0.0))))))))))))
(assert
 (let ((?x30814 (* l_0_7_48 l_0_7_48)))
 (let ((?x30812 (* l_0_7_47 l_0_7_47)))
 (let ((?x30810 (* l_0_7_3 l_0_7_3)))
 (let ((?x33875 (* l_0_7_228 l_0_7_228)))
 (let ((?x33877 (+ (- (- (* l_0_7_2 l_0_7_2) (* l_0_7_227 l_0_7_227)) ?x33875) ?x30810)))
 (= (- (- ?x33877 ?x30812) ?x30814) 0.0)))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30858 (* ?x30857 l_0_7_50)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30855 (* ?x30854 l_0_7_49)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30852 (* ?x30851 l_0_7_5)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33892 (* ?x33891 l_0_7_230)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x20220 (* ?x20219 l_0_7_229)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x30849 (* ?x30848 l_0_7_4)))
 (= (- (- (+ (- (- ?x30849 ?x20220) ?x33892) ?x30852) ?x30855) ?x30858) 0.0))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30918 (* ?x30857 l_0_7_53)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30916 (* ?x30854 l_0_7_52)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x30914 (* ?x30851 l_0_7_8)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33921 (* ?x33891 l_0_7_233)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33919 (* ?x20219 l_0_7_232)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x30912 (* ?x30848 l_0_7_7)))
 (= (- (- (+ (- (- ?x30912 ?x33919) ?x33921) ?x30914) ?x30916) ?x30918) 0.0))))))))))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x33950 (* ?x32944 l_0_7_95)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x33948 (* ?x32941 l_0_7_94)))
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x30993 (* ?x30857 l_0_7_57)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x30991 (* ?x30854 l_0_7_56)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33944 (* ?x33891 l_0_7_237)))
 (let ((?x33892 (* ?x33891 l_0_7_230)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33941 (* ?x20219 l_0_7_236)))
 (let ((?x20220 (* ?x20219 l_0_7_229)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x33938 (* ?x30805 l_0_7_140)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x33936 (* ?x30802 l_0_7_139)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x30974 (* ?x30973 l_0_7_3)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x30971 (* ?x30970 l_0_7_2)))
 (let ((?x33945 (- (+ (- (+ (- (- (+ ?x30971 ?x30974) ?x33936) ?x33938) ?x20220) ?x33941) ?x33892) ?x33944)))
 (= (+ (+ (- (- ?x33945 ?x30991) ?x30993) ?x33948) ?x33950) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31063 (* ?x30857 l_0_7_62)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31061 (* ?x30854 l_0_7_61)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33983 (* ?x33891 l_0_7_242)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33977 (* ?x20219 l_0_7_241)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31059 (* ?x30553 l_0_7_3)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x31057 (* ?x30550 l_0_7_2)))
 (= (- (- (- (- (+ ?x31057 ?x31059) ?x33977) ?x33983) ?x31061) ?x31063) 0.0))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31123 (* ?x30857 l_0_7_68)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31121 (* ?x30854 l_0_7_67)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31119 (* ?x31118 l_0_7_3)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34000 (* ?x33891 l_0_7_248)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x20292 (* ?x20219 l_0_7_247)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31116 (* ?x30848 l_0_7_22)))
 (= (- (- (+ (- (- ?x31116 ?x20292) ?x34000) ?x31119) ?x31121) ?x31123) 0.0))))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x33488 (* ?x32834 l_0_7_94)))
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31194 (* ?x30857 l_0_7_75)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31192 (* ?x30854 l_0_7_74)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31190 (* ?x30851 l_0_7_30)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34026 (* ?x33891 l_0_7_255)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x34024 (* ?x20219 l_0_7_254)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31188 (* ?x30848 l_0_7_29)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x33458 (* ?x30531 l_0_7_139)))
 (let ((?x34031 (- (- (- (+ (- (- (+ ?x33458 ?x31188) ?x34024) ?x34026) ?x31190) ?x31192) ?x31194) ?x33488)))
 (= ?x34031 0.0)))))))))))))))))))
(assert
 (let ((?x30857 (* 2.0 l_0_7_48)))
 (let ((?x31246 (* ?x30857 l_0_7_83)))
 (let ((?x30854 (* 2.0 l_0_7_47)))
 (let ((?x31244 (* ?x30854 l_0_7_82)))
 (let ((?x30851 (* 2.0 l_0_7_3)))
 (let ((?x31242 (* ?x30851 l_0_7_38)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34053 (* ?x33891 l_0_7_263)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x20327 (* ?x20219 l_0_7_262)))
 (let ((?x30848 (* 2.0 l_0_7_2)))
 (let ((?x31240 (* ?x30848 l_0_7_37)))
 (= (- (- (+ (- (- ?x31240 ?x20327) ?x34053) ?x31242) ?x31244) ?x31246) 0.0))))))))))))))
(assert
 (let ((?x31307 (* l_0_7_6 l_0_7_6)))
 (let ((?x31305 (* l_0_7_51 l_0_7_51)))
 (let ((?x31303 (* l_0_7_50 l_0_7_50)))
 (let ((?x31301 (* l_0_7_5 l_0_7_5)))
 (let ((?x31288 (* l_0_7_49 l_0_7_49)))
 (let ((?x31311 (* l_0_7_4 l_0_7_4)))
 (let ((?x34075 (* l_0_7_231 l_0_7_231)))
 (let ((?x34076 (- (- (* (- l_0_7_229) l_0_7_229) (* l_0_7_230 l_0_7_230)) ?x34075)))
 (= (+ (- (- (+ (- (+ ?x34076 ?x31311) ?x31288) ?x31301) ?x31303) ?x31305) ?x31307) 0.0))))))))))
(assert
 (let ((?x31334 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31331 (* ?x31330 l_0_7_54)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31328 (* ?x31327 l_0_7_53)))
 (let ((?x31325 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31322 (* ?x31321 l_0_7_52)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34108 (* ?x34107 l_0_7_234)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34105 (* ?x34104 l_0_7_233)))
 (let ((?x34112 (+ (- (- (* (* (- 2.0) l_0_7_229) l_0_7_232) ?x34105) ?x34108) (* (* 2.0 l_0_7_4) l_0_7_7))))
 (= (+ (- (- (+ (- ?x34112 ?x31322) ?x31325) ?x31328) ?x31331) ?x31334) 0.0)))))))))))))))
(assert
 (let ((?x34162 (* l_0_7_96 l_0_7_96)))
 (let ((?x34160 (* l_0_7_95 l_0_7_95)))
 (let ((?x34158 (* l_0_7_94 l_0_7_94)))
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31373 (* ?x31330 l_0_7_58)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31371 (* ?x31327 l_0_7_57)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31369 (* ?x31321 l_0_7_56)))
 (let ((?x34075 (* l_0_7_231 l_0_7_231)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34152 (* ?x34107 l_0_7_238)))
 (let ((?x34073 (* l_0_7_230 l_0_7_230)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34149 (* ?x34104 l_0_7_237)))
 (let ((?x34085 (* l_0_7_229 l_0_7_229)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x34146 (* ?x34145 l_0_7_236)))
 (let ((?x34143 (* l_0_7_141 l_0_7_141)))
 (let ((?x34141 (* l_0_7_140 l_0_7_140)))
 (let ((?x34139 (* l_0_7_139 l_0_7_139)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31367 (* ?x31366 l_0_7_6)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31364 (* ?x30973 l_0_7_5)))
 (let ((?x34142 (- (- (+ (+ (* (* 2.0 l_0_7_11) l_0_7_4) ?x31364) ?x31367) ?x34139) ?x34141)))
 (let ((?x34154 (+ (- (+ (- (+ (- (- ?x34142 ?x34143) ?x34146) ?x34085) ?x34149) ?x34073) ?x34152) ?x34075)))
 (= (+ (+ (+ (- (- (- ?x34154 ?x31369) ?x31371) ?x31373) ?x34158) ?x34160) ?x34162) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31400 (* ?x31330 l_0_7_63)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31398 (* ?x31327 l_0_7_62)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31396 (* ?x31321 l_0_7_61)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34203 (* ?x34107 l_0_7_243)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34201 (* ?x34104 l_0_7_242)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x34199 (* ?x34145 l_0_7_241)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31394 (* ?x30556 l_0_7_6)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31386 (* ?x30553 l_0_7_5)))
 (let ((?x34202 (- (- (+ (+ (* (* 2.0 l_0_7_16) l_0_7_4) ?x31386) ?x31394) ?x34199) ?x34201)))
 (= (- (- (- (- ?x34202 ?x34203) ?x31396) ?x31398) ?x31400) 0.0)))))))))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31431 (* ?x31330 l_0_7_69)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31429 (* ?x31327 l_0_7_68)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31427 (* ?x31321 l_0_7_67)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x31425 (* ?x31424 l_0_7_6)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34223 (* ?x34107 l_0_7_249)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34221 (* ?x34104 l_0_7_248)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x31416 (* ?x31118 l_0_7_5)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x20442 (* ?x34145 l_0_7_247)))
 (let ((?x34224 (- (- (+ (- (* (* 2.0 l_0_7_22) l_0_7_4) ?x20442) ?x31416) ?x34221) ?x34223)))
 (= (- (- (- (+ ?x34224 ?x31425) ?x31427) ?x31429) ?x31431) 0.0)))))))))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31465 (* ?x31330 l_0_7_76)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31463 (* ?x31327 l_0_7_75)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31461 (* ?x31321 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31459 (* ?x31458 l_0_7_6)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31456 (* ?x31455 l_0_7_5)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34256 (* ?x34107 l_0_7_256)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34254 (* ?x34104 l_0_7_255)))
 (let ((?x34259 (+ (- (- (* (* (- 2.0) l_0_7_229) l_0_7_254) ?x34254) ?x34256) (* (* 2.0 l_0_7_29) l_0_7_4))))
 (= (- (- (- (+ (+ ?x34259 ?x31456) ?x31459) ?x31461) ?x31463) ?x31465) 0.0)))))))))))))))))
(assert
 (let ((?x31330 (* 2.0 l_0_7_51)))
 (let ((?x31497 (* ?x31330 l_0_7_84)))
 (let ((?x31327 (* 2.0 l_0_7_50)))
 (let ((?x31495 (* ?x31327 l_0_7_83)))
 (let ((?x31321 (* 2.0 l_0_7_49)))
 (let ((?x31493 (* ?x31321 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31491 (* ?x31490 l_0_7_6)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31482 (* ?x31481 l_0_7_5)))
 (let ((?x17680 (* 2.0 l_0_7_37)))
 (let ((?x32961 (* ?x17680 l_0_7_4)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34283 (* ?x34107 l_0_7_264)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34281 (* ?x34104 l_0_7_263)))
 (let ((?x34286 (+ (+ (- (- (* (* (- 2.0) l_0_7_229) l_0_7_262) ?x34281) ?x34283) ?x32961) ?x31482)))
 (= (- (- (- (+ ?x34286 ?x31491) ?x31493) ?x31495) ?x31497) 0.0)))))))))))))))))))
(assert
 (let ((?x31528 (* l_0_7_9 l_0_7_9)))
 (let ((?x31526 (* l_0_7_8 l_0_7_8)))
 (let ((?x31524 (* l_0_7_7 l_0_7_7)))
 (let ((?x31522 (* l_0_7_55 l_0_7_55)))
 (let ((?x31520 (* l_0_7_54 l_0_7_54)))
 (let ((?x31518 (* l_0_7_53 l_0_7_53)))
 (let ((?x17550 (* l_0_7_52 l_0_7_52)))
 (let ((?x34313 (* l_0_7_235 l_0_7_235)))
 (let ((?x20512 (* l_0_7_234 l_0_7_234)))
 (let ((?x20527 (* l_0_7_233 l_0_7_233)))
 (let ((?x34312 (- (- (- (* l_0_7_10 l_0_7_10) (* l_0_7_232 l_0_7_232)) ?x20527) ?x20512)))
 (let ((?x34320 (+ (+ (- (- (- (- (- ?x34312 ?x34313) ?x17550) ?x31518) ?x31520) ?x31522) ?x31524) ?x31526)))
 (= (+ ?x34320 ?x31528) 0.0))))))))))))))
(assert
 (let ((?x32975 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x32972 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x32969 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31556 (* ?x31555 l_0_7_59)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31553 (* ?x31552 l_0_7_58)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31550 (* ?x31549 l_0_7_57)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31547 (* ?x31546 l_0_7_56)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x34345 (* ?x32719 l_0_7_239)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x34343 (* ?x32716 l_0_7_238)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x34341 (* ?x32713 l_0_7_237)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x34339 (* ?x32710 l_0_7_236)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34108 (* ?x34107 l_0_7_234)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34105 (* ?x34104 l_0_7_233)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x19191 (* ?x30845 l_0_7_144)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x15264 (* ?x30842 l_0_7_143)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x15362 (* ?x30839 l_0_7_142)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31544 (* ?x31366 l_0_7_9)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31542 (* ?x30973 l_0_7_8)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x31540 (* ?x30970 l_0_7_7)))
 (let ((?x34332 (- (+ (+ (+ (* (* 2.0 l_0_7_10) l_0_7_14) ?x31540) ?x31542) ?x31544) ?x15362)))
 (let ((?x34337 (+ (+ (- (- ?x34332 ?x15264) ?x19191) (* (* 2.0 l_0_7_229) l_0_7_232)) ?x34105)))
 (let ((?x34348 (- (- (- (- (- (- (+ ?x34337 ?x34108) ?x34339) ?x34341) ?x34343) ?x34345) ?x31547) ?x31550)))
 (= (+ (+ (+ (- (- ?x34348 ?x31553) ?x31556) ?x32969) ?x32972) ?x32975) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31595 (* ?x31555 l_0_7_64)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31593 (* ?x31552 l_0_7_63)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31591 (* ?x31549 l_0_7_62)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31589 (* ?x31546 l_0_7_61)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20715 (* ?x32719 l_0_7_244)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20761 (* ?x32716 l_0_7_243)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20769 (* ?x32713 l_0_7_242)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20770 (* ?x32710 l_0_7_241)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x31587 (* ?x30556 l_0_7_9)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x31578 (* ?x30553 l_0_7_8)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x31574 (* ?x30550 l_0_7_7)))
 (let ((?x20767 (- (+ (+ (+ (* (* 2.0 l_0_7_10) l_0_7_19) ?x31574) ?x31578) ?x31587) ?x20770)))
 (let ((?x20720 (- (- (- (- (- (- (- ?x20767 ?x20769) ?x20761) ?x20715) ?x31589) ?x31591) ?x31593) ?x31595)))
 (= ?x20720 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31679 (* ?x31555 l_0_7_77)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31677 (* ?x31552 l_0_7_76)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31675 (* ?x31549 l_0_7_75)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31673 (* ?x31546 l_0_7_74)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x31671 (* ?x31458 l_0_7_9)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x31669 (* ?x31455 l_0_7_8)))
 (let ((?x31666 (* 2.0 l_0_7_29)))
 (let ((?x31667 (* ?x31666 l_0_7_7)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20833 (* ?x32719 l_0_7_257)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20826 (* ?x32716 l_0_7_256)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20814 (* ?x32713 l_0_7_255)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20802 (* ?x32710 l_0_7_254)))
 (let ((?x20827 (- (- (- (- (* (* 2.0 l_0_7_10) l_0_7_32) ?x20802) ?x20814) ?x20826) ?x20833)))
 (let ((?x34379 (- (- (- (- (+ (+ (+ ?x20827 ?x31667) ?x31669) ?x31671) ?x31673) ?x31675) ?x31677) ?x31679)))
 (= ?x34379 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31555 (* 2.0 l_0_7_55)))
 (let ((?x31715 (* ?x31555 l_0_7_85)))
 (let ((?x31552 (* 2.0 l_0_7_54)))
 (let ((?x31713 (* ?x31552 l_0_7_84)))
 (let ((?x31549 (* 2.0 l_0_7_53)))
 (let ((?x31711 (* ?x31549 l_0_7_83)))
 (let ((?x31546 (* 2.0 l_0_7_52)))
 (let ((?x31709 (* ?x31546 l_0_7_82)))
 (let ((?x31490 (* 2.0 l_0_7_39)))
 (let ((?x31707 (* ?x31490 l_0_7_9)))
 (let ((?x31481 (* 2.0 l_0_7_38)))
 (let ((?x31698 (* ?x31481 l_0_7_8)))
 (let ((?x17680 (* 2.0 l_0_7_37)))
 (let ((?x31695 (* ?x17680 l_0_7_7)))
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20894 (* ?x32719 l_0_7_265)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20890 (* ?x32716 l_0_7_264)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20895 (* ?x32713 l_0_7_263)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20945 (* ?x32710 l_0_7_262)))
 (let ((?x20887 (- (- (- (- (* (* 2.0 l_0_7_10) l_0_7_40) ?x20945) ?x20895) ?x20890) ?x20894)))
 (let ((?x34400 (- (- (- (- (+ (+ (+ ?x20887 ?x31695) ?x31698) ?x31707) ?x31709) ?x31711) ?x31713) ?x31715)))
 (= ?x34400 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31757 (* l_0_7_60 l_0_7_60)))
 (let ((?x31755 (* l_0_7_59 l_0_7_59)))
 (let ((?x31753 (* l_0_7_58 l_0_7_58)))
 (let ((?x31751 (* l_0_7_57 l_0_7_57)))
 (let ((?x31749 (* l_0_7_56 l_0_7_56)))
 (let ((?x34437 (* l_0_7_240 l_0_7_240)))
 (let ((?x34435 (* l_0_7_239 l_0_7_239)))
 (let ((?x34433 (* l_0_7_238 l_0_7_238)))
 (let ((?x34431 (* l_0_7_237 l_0_7_237)))
 (let ((?x34429 (* l_0_7_236 l_0_7_236)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34152 (* ?x34107 l_0_7_238)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34149 (* ?x34104 l_0_7_237)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x34146 (* ?x34145 l_0_7_236)))
 (let ((?x31747 (* l_0_7_15 l_0_7_15)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34423 (* ?x30845 l_0_7_148)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34421 (* ?x30842 l_0_7_147)))
 (let ((?x31745 (* l_0_7_14 l_0_7_14)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34418 (* ?x30839 l_0_7_146)))
 (let ((?x31736 (* l_0_7_13 l_0_7_13)))
 (let ((?x31733 (* l_0_7_12 l_0_7_12)))
 (let ((?x31761 (* l_0_7_11 l_0_7_11)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x34413 (* ?x30961 l_0_7_96)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x34411 (* ?x30949 l_0_7_95)))
 (let ((?x34416 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_94) ?x34411) ?x34413) ?x31761) ?x31733)))
 (let ((?x34426 (+ (+ (- (- (+ (- (+ ?x34416 ?x31736) ?x34418) ?x31745) ?x34421) ?x34423) ?x31747) ?x34146)))
 (let ((?x34438 (- (- (- (- (- (+ (+ ?x34426 ?x34149) ?x34152) ?x34429) ?x34431) ?x34433) ?x34435) ?x34437)))
 (= (- (- (- (- (- ?x34438 ?x31749) ?x31751) ?x31753) ?x31755) ?x31757) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31799 (* ?x31798 l_0_7_65)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31796 (* ?x31795 l_0_7_64)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31793 (* ?x31792 l_0_7_63)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31790 (* ?x31789 l_0_7_62)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31787 (* ?x31786 l_0_7_61)))
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34494 (* ?x34493 l_0_7_245)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34491 (* ?x34490 l_0_7_244)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34488 (* ?x34487 l_0_7_243)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34485 (* ?x34484 l_0_7_242)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34482 (* ?x34481 l_0_7_241)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34203 (* ?x34107 l_0_7_243)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34201 (* ?x34104 l_0_7_242)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x34199 (* ?x34145 l_0_7_241)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31784 (* ?x31783 l_0_7_20)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x30846 (* ?x30845 l_0_7_153)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x30843 (* ?x30842 l_0_7_152)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31781 (* ?x31780 l_0_7_19)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x30840 (* ?x30839 l_0_7_151)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31778 (* ?x31366 l_0_7_18)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31776 (* ?x30973 l_0_7_17)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30837 (* ?x30683 l_0_7_96)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30835 (* ?x30680 l_0_7_95)))
 (let ((?x34470 (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_94) ?x30835) ?x30837) (* (* 2.0 l_0_7_11) l_0_7_16))))
 (let ((?x34477 (+ (- (- (+ (- (+ (+ ?x34470 ?x31776) ?x31778) ?x30840) ?x31781) ?x30843) ?x30846) ?x31784)))
 (let ((?x34492 (- (- (- (- (+ (+ (+ ?x34477 ?x34199) ?x34201) ?x34203) ?x34482) ?x34485) ?x34488) ?x34491)))
 (= (- (- (- (- (- (- ?x34492 ?x34494) ?x31787) ?x31790) ?x31793) ?x31796) ?x31799) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31845 (* ?x31798 l_0_7_71)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31843 (* ?x31795 l_0_7_70)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31841 (* ?x31792 l_0_7_69)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31839 (* ?x31789 l_0_7_68)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31837 (* ?x31786 l_0_7_67)))
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34517 (* ?x34493 l_0_7_251)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34515 (* ?x34490 l_0_7_250)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34513 (* ?x34487 l_0_7_249)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34511 (* ?x34484 l_0_7_248)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34509 (* ?x34481 l_0_7_247)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34223 (* ?x34107 l_0_7_249)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34221 (* ?x34104 l_0_7_248)))
 (let ((?x34145 (* 2.0 l_0_7_229)))
 (let ((?x20442 (* ?x34145 l_0_7_247)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31835 (* ?x31783 l_0_7_26)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21219 (* ?x30845 l_0_7_159)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21215 (* ?x30842 l_0_7_158)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31825 (* ?x31780 l_0_7_25)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21214 (* ?x30839 l_0_7_157)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31822 (* ?x31366 l_0_7_24)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31818 (* ?x30973 l_0_7_23)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x21190 (* ?x32779 l_0_7_96)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x21178 (* ?x32776 l_0_7_95)))
 (let ((?x21172 (+ (* (* 2.0 l_0_7_11) l_0_7_22) (* (* 2.0 l_0_7_112) l_0_7_94))))
 (let ((?x21218 (- (+ (- (+ (+ (+ (+ ?x21172 ?x21178) ?x21190) ?x31818) ?x31822) ?x21214) ?x31825) ?x21215)))
 (let ((?x34512 (- (- (+ (+ (+ (+ (- ?x21218 ?x21219) ?x31835) ?x20442) ?x34221) ?x34223) ?x34509) ?x34511)))
 (let ((?x34522 (- (- (- (- (- (- (- ?x34512 ?x34513) ?x34515) ?x34517) ?x31837) ?x31839) ?x31841) ?x31843)))
 (= (- ?x34522 ?x31845) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31889 (* ?x31798 l_0_7_78)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31887 (* ?x31795 l_0_7_77)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31885 (* ?x31792 l_0_7_76)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31883 (* ?x31789 l_0_7_75)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31881 (* ?x31786 l_0_7_74)))
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34570 (* ?x34493 l_0_7_258)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34568 (* ?x34490 l_0_7_257)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34566 (* ?x34487 l_0_7_256)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34564 (* ?x34484 l_0_7_255)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34562 (* ?x34481 l_0_7_254)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34256 (* ?x34107 l_0_7_256)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34254 (* ?x34104 l_0_7_255)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31879 (* ?x31783 l_0_7_33)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34555 (* ?x30845 l_0_7_166)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34553 (* ?x30842 l_0_7_165)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31869 (* ?x31780 l_0_7_32)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34550 (* ?x30839 l_0_7_164)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31866 (* ?x31366 l_0_7_31)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x34547 (* ?x33156 l_0_7_96)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x34545 (* ?x19427 l_0_7_95)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x17777 (* ?x30973 l_0_7_30)))
 (let ((?x34543 (+ (* (* 2.0 l_0_7_11) l_0_7_29) (* (* 2.0 l_0_7_119) l_0_7_94))))
 (let ((?x34554 (- (+ (- (+ (+ (+ (+ ?x34543 ?x17777) ?x34545) ?x34547) ?x31866) ?x34550) ?x31869) ?x34553)))
 (let ((?x34560 (+ (+ (+ (- ?x34554 ?x34555) ?x31879) (* (* 2.0 l_0_7_229) l_0_7_254)) ?x34254)))
 (let ((?x34572 (- (- (- (- (- (- (+ ?x34560 ?x34256) ?x34562) ?x34564) ?x34566) ?x34568) ?x34570) ?x31881)))
 (= (- (- (- (- ?x34572 ?x31883) ?x31885) ?x31887) ?x31889) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31798 (* 2.0 l_0_7_60)))
 (let ((?x31934 (* ?x31798 l_0_7_86)))
 (let ((?x31795 (* 2.0 l_0_7_59)))
 (let ((?x31932 (* ?x31795 l_0_7_85)))
 (let ((?x31792 (* 2.0 l_0_7_58)))
 (let ((?x31930 (* ?x31792 l_0_7_84)))
 (let ((?x31789 (* 2.0 l_0_7_57)))
 (let ((?x31928 (* ?x31789 l_0_7_83)))
 (let ((?x31786 (* 2.0 l_0_7_56)))
 (let ((?x31926 (* ?x31786 l_0_7_82)))
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34608 (* ?x34493 l_0_7_266)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34606 (* ?x34490 l_0_7_265)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34604 (* ?x34487 l_0_7_264)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34602 (* ?x34484 l_0_7_263)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34600 (* ?x34481 l_0_7_262)))
 (let ((?x34107 (* 2.0 l_0_7_231)))
 (let ((?x34283 (* ?x34107 l_0_7_264)))
 (let ((?x34104 (* 2.0 l_0_7_230)))
 (let ((?x34281 (* ?x34104 l_0_7_263)))
 (let ((?x31783 (* 2.0 l_0_7_15)))
 (let ((?x31924 (* ?x31783 l_0_7_41)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21511 (* ?x30845 l_0_7_174)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21512 (* ?x30842 l_0_7_173)))
 (let ((?x31780 (* 2.0 l_0_7_14)))
 (let ((?x31914 (* ?x31780 l_0_7_40)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21478 (* ?x30839 l_0_7_172)))
 (let ((?x31366 (* 2.0 l_0_7_13)))
 (let ((?x31911 (* ?x31366 l_0_7_39)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x21466 (* ?x33219 l_0_7_96)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x21507 (* ?x33216 l_0_7_95)))
 (let ((?x30973 (* 2.0 l_0_7_12)))
 (let ((?x31907 (* ?x30973 l_0_7_38)))
 (let ((?x30970 (* 2.0 l_0_7_11)))
 (let ((?x33074 (* ?x30970 l_0_7_37)))
 (let ((?x21470 (+ (+ (+ (+ ?x33074 ?x31907) (* (* 2.0 l_0_7_127) l_0_7_94)) ?x21507) ?x21466)))
 (let ((?x34597 (+ (+ (- (- (+ (- (+ ?x21470 ?x31911) ?x21478) ?x31914) ?x21512) ?x21511) ?x31924) (* (* 2.0 l_0_7_229) l_0_7_262))))
 (let ((?x34609 (- (- (- (- (- (+ (+ ?x34597 ?x34281) ?x34283) ?x34600) ?x34602) ?x34604) ?x34606) ?x34608)))
 (= (- (- (- (- (- ?x34609 ?x31926) ?x31928) ?x31930) ?x31932) ?x31934) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31989 (* l_0_7_66 l_0_7_66)))
 (let ((?x31987 (* l_0_7_65 l_0_7_65)))
 (let ((?x31985 (* l_0_7_64 l_0_7_64)))
 (let ((?x31983 (* l_0_7_63 l_0_7_63)))
 (let ((?x31981 (* l_0_7_62 l_0_7_62)))
 (let ((?x31979 (* l_0_7_61 l_0_7_61)))
 (let ((?x21648 (* l_0_7_246 l_0_7_246)))
 (let ((?x21653 (* l_0_7_245 l_0_7_245)))
 (let ((?x21641 (* l_0_7_244 l_0_7_244)))
 (let ((?x21629 (* l_0_7_243 l_0_7_243)))
 (let ((?x21617 (* l_0_7_242 l_0_7_242)))
 (let ((?x21605 (* l_0_7_241 l_0_7_241)))
 (let ((?x31977 (* l_0_7_21 l_0_7_21)))
 (let ((?x31975 (* l_0_7_20 l_0_7_20)))
 (let ((?x31973 (* l_0_7_19 l_0_7_19)))
 (let ((?x31963 (* l_0_7_18 l_0_7_18)))
 (let ((?x21587 (+ (+ (+ (* l_0_7_16 l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31963) ?x31973)))
 (let ((?x21654 (- (- (- (- (- (+ (+ ?x21587 ?x31975) ?x31977) ?x21605) ?x21617) ?x21629) ?x21641) ?x21653)))
 (let ((?x34659 (- (- (- (- (- (- (- ?x21654 ?x21648) ?x31979) ?x31981) ?x31983) ?x31985) ?x31987) ?x31989)))
 (= ?x34659 0.0)))))))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32032 (* ?x30603 l_0_7_72)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32030 (* ?x30600 l_0_7_71)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32028 (* ?x30597 l_0_7_70)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32026 (* ?x30594 l_0_7_69)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32024 (* ?x30591 l_0_7_68)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32022 (* ?x30588 l_0_7_67)))
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x34689 (* ?x30583 l_0_7_252)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x34687 (* ?x30580 l_0_7_251)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x34685 (* ?x30577 l_0_7_250)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x34683 (* ?x30574 l_0_7_249)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x34681 (* ?x30571 l_0_7_248)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x34679 (* ?x30568 l_0_7_247)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32020 (* ?x30565 l_0_7_27)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32018 (* ?x30562 l_0_7_26)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32016 (* ?x30559 l_0_7_25)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32014 (* ?x30556 l_0_7_24)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32012 (* ?x30553 l_0_7_23)))
 (let ((?x34677 (+ (+ (+ (+ (* (* 2.0 l_0_7_16) l_0_7_22) ?x32012) ?x32014) ?x32016) ?x32018)))
 (let ((?x34690 (- (- (- (- (- (- (+ ?x34677 ?x32020) ?x34679) ?x34681) ?x34683) ?x34685) ?x34687) ?x34689)))
 (= (- (- (- (- (- (- ?x34690 ?x32022) ?x32024) ?x32026) ?x32028) ?x32030) ?x32032) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30603 (* 2.0 l_0_7_66)))
 (let ((?x32106 (* ?x30603 l_0_7_87)))
 (let ((?x30600 (* 2.0 l_0_7_65)))
 (let ((?x32104 (* ?x30600 l_0_7_86)))
 (let ((?x30597 (* 2.0 l_0_7_64)))
 (let ((?x32102 (* ?x30597 l_0_7_85)))
 (let ((?x30594 (* 2.0 l_0_7_63)))
 (let ((?x32100 (* ?x30594 l_0_7_84)))
 (let ((?x30591 (* 2.0 l_0_7_62)))
 (let ((?x32098 (* ?x30591 l_0_7_83)))
 (let ((?x30588 (* 2.0 l_0_7_61)))
 (let ((?x32096 (* ?x30588 l_0_7_82)))
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x34701 (* ?x30583 l_0_7_267)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x34699 (* ?x30580 l_0_7_266)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x21761 (* ?x30577 l_0_7_265)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x21762 (* ?x30574 l_0_7_264)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x21729 (* ?x30571 l_0_7_263)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x21721 (* ?x30568 l_0_7_262)))
 (let ((?x30565 (* 2.0 l_0_7_21)))
 (let ((?x32094 (* ?x30565 l_0_7_42)))
 (let ((?x30562 (* 2.0 l_0_7_20)))
 (let ((?x32092 (* ?x30562 l_0_7_41)))
 (let ((?x30559 (* 2.0 l_0_7_19)))
 (let ((?x32090 (* ?x30559 l_0_7_40)))
 (let ((?x30556 (* 2.0 l_0_7_18)))
 (let ((?x32088 (* ?x30556 l_0_7_39)))
 (let ((?x30553 (* 2.0 l_0_7_17)))
 (let ((?x32086 (* ?x30553 l_0_7_38)))
 (let ((?x30550 (* 2.0 l_0_7_16)))
 (let ((?x19353 (* ?x30550 l_0_7_37)))
 (let ((?x21733 (- (- (+ (+ (+ (+ (+ ?x19353 ?x32086) ?x32088) ?x32090) ?x32092) ?x32094) ?x21721) ?x21729)))
 (let ((?x34705 (- (- (- (- (- (- (- ?x21733 ?x21762) ?x21761) ?x34699) ?x34701) ?x32096) ?x32098) ?x32100)))
 (= (- (- (- ?x34705 ?x32102) ?x32104) ?x32106) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32175 (* l_0_7_73 l_0_7_73)))
 (let ((?x32173 (* l_0_7_72 l_0_7_72)))
 (let ((?x32171 (* l_0_7_71 l_0_7_71)))
 (let ((?x32169 (* l_0_7_70 l_0_7_70)))
 (let ((?x32167 (* l_0_7_69 l_0_7_69)))
 (let ((?x32165 (* l_0_7_68 l_0_7_68)))
 (let ((?x32163 (* l_0_7_67 l_0_7_67)))
 (let ((?x32161 (* l_0_7_28 l_0_7_28)))
 (let ((?x32159 (* l_0_7_27 l_0_7_27)))
 (let ((?x32157 (* l_0_7_26 l_0_7_26)))
 (let ((?x34757 (* l_0_7_253 l_0_7_253)))
 (let ((?x34755 (* l_0_7_252 l_0_7_252)))
 (let ((?x34753 (* l_0_7_251 l_0_7_251)))
 (let ((?x34751 (* l_0_7_250 l_0_7_250)))
 (let ((?x32146 (* l_0_7_25 l_0_7_25)))
 (let ((?x34748 (* l_0_7_249 l_0_7_249)))
 (let ((?x34746 (* l_0_7_248 l_0_7_248)))
 (let ((?x34744 (* l_0_7_247 l_0_7_247)))
 (let ((?x32143 (* l_0_7_24 l_0_7_24)))
 (let ((?x34745 (- (+ (+ (* l_0_7_22 l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32143) ?x34744)))
 (let ((?x34758 (- (- (- (- (+ (- (- ?x34745 ?x34746) ?x34748) ?x32146) ?x34751) ?x34753) ?x34755) ?x34757)))
 (let ((?x34765 (- (- (- (- (+ (+ (+ ?x34758 ?x32157) ?x32159) ?x32161) ?x32163) ?x32165) ?x32167) ?x32169)))
 (= (- (- (- ?x34765 ?x32171) ?x32173) ?x32175) 0.0))))))))))))))))))))))))
(assert
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32238 (* ?x32237 l_0_7_80)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32235 (* ?x32234 l_0_7_79)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32232 (* ?x32231 l_0_7_78)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32229 (* ?x32228 l_0_7_77)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32226 (* ?x32225 l_0_7_76)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32223 (* ?x32222 l_0_7_75)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32220 (* ?x32219 l_0_7_74)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32217 (* ?x32216 l_0_7_35)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32214 (* ?x32213 l_0_7_34)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32211 (* ?x32210 l_0_7_33)))
 (let ((?x34794 (* 2.0 l_0_7_253)))
 (let ((?x34795 (* ?x34794 l_0_7_260)))
 (let ((?x22084 (* 2.0 l_0_7_252)))
 (let ((?x22087 (* ?x22084 l_0_7_259)))
 (let ((?x22093 (* 2.0 l_0_7_251)))
 (let ((?x22091 (* ?x22093 l_0_7_258)))
 (let ((?x22077 (* 2.0 l_0_7_250)))
 (let ((?x22083 (* ?x22077 l_0_7_257)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32208 (* ?x32207 l_0_7_32)))
 (let ((?x22053 (* 2.0 l_0_7_249)))
 (let ((?x22059 (* ?x22053 l_0_7_256)))
 (let ((?x22035 (* 2.0 l_0_7_248)))
 (let ((?x22041 (* ?x22035 l_0_7_255)))
 (let ((?x22017 (* 2.0 l_0_7_247)))
 (let ((?x22023 (* ?x22017 l_0_7_254)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32205 (* ?x31424 l_0_7_31)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32203 (* ?x31118 l_0_7_30)))
 (let ((?x22047 (- (- (+ (+ (* (* 2.0 l_0_7_22) l_0_7_29) ?x32203) ?x32205) ?x22023) ?x22041)))
 (let ((?x34797 (+ (- (- (- (- (+ (- ?x22047 ?x22059) ?x32208) ?x22083) ?x22091) ?x22087) ?x34795) ?x32211)))
 (let ((?x34804 (- (- (- (- (- (+ (+ ?x34797 ?x32214) ?x32217) ?x32220) ?x32223) ?x32226) ?x32229) ?x32232)))
 (= (- (- ?x34804 ?x32235) ?x32238) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x33488 (* ?x32834 l_0_7_94)))
 (let ((?x32237 (* 2.0 l_0_7_73)))
 (let ((?x32304 (* ?x32237 l_0_7_88)))
 (let ((?x32234 (* 2.0 l_0_7_72)))
 (let ((?x32302 (* ?x32234 l_0_7_87)))
 (let ((?x32231 (* 2.0 l_0_7_71)))
 (let ((?x32300 (* ?x32231 l_0_7_86)))
 (let ((?x32228 (* 2.0 l_0_7_70)))
 (let ((?x32298 (* ?x32228 l_0_7_85)))
 (let ((?x32225 (* 2.0 l_0_7_69)))
 (let ((?x32296 (* ?x32225 l_0_7_84)))
 (let ((?x32222 (* 2.0 l_0_7_68)))
 (let ((?x32294 (* ?x32222 l_0_7_83)))
 (let ((?x32219 (* 2.0 l_0_7_67)))
 (let ((?x32292 (* ?x32219 l_0_7_82)))
 (let ((?x32216 (* 2.0 l_0_7_28)))
 (let ((?x32290 (* ?x32216 l_0_7_43)))
 (let ((?x32213 (* 2.0 l_0_7_27)))
 (let ((?x32288 (* ?x32213 l_0_7_42)))
 (let ((?x32210 (* 2.0 l_0_7_26)))
 (let ((?x32286 (* ?x32210 l_0_7_41)))
 (let ((?x34794 (* 2.0 l_0_7_253)))
 (let ((?x34843 (* ?x34794 l_0_7_268)))
 (let ((?x22084 (* 2.0 l_0_7_252)))
 (let ((?x34841 (* ?x22084 l_0_7_267)))
 (let ((?x22093 (* 2.0 l_0_7_251)))
 (let ((?x34839 (* ?x22093 l_0_7_266)))
 (let ((?x22077 (* 2.0 l_0_7_250)))
 (let ((?x34837 (* ?x22077 l_0_7_265)))
 (let ((?x32207 (* 2.0 l_0_7_25)))
 (let ((?x32274 (* ?x32207 l_0_7_40)))
 (let ((?x22053 (* 2.0 l_0_7_249)))
 (let ((?x34834 (* ?x22053 l_0_7_264)))
 (let ((?x22035 (* 2.0 l_0_7_248)))
 (let ((?x34832 (* ?x22035 l_0_7_263)))
 (let ((?x22017 (* 2.0 l_0_7_247)))
 (let ((?x34830 (* ?x22017 l_0_7_262)))
 (let ((?x31424 (* 2.0 l_0_7_24)))
 (let ((?x32270 (* ?x31424 l_0_7_39)))
 (let ((?x31118 (* 2.0 l_0_7_23)))
 (let ((?x32266 (* ?x31118 l_0_7_38)))
 (let ((?x31627 (* 2.0 l_0_7_22)))
 (let ((?x17967 (* ?x31627 l_0_7_37)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x33458 (* ?x30531 l_0_7_139)))
 (let ((?x34836 (+ (- (- (- (+ (+ (+ ?x33458 ?x17967) ?x32266) ?x32270) ?x34830) ?x34832) ?x34834) ?x32274)))
 (let ((?x34847 (+ (+ (+ (- (- (- (- ?x34836 ?x34837) ?x34839) ?x34841) ?x34843) ?x32286) ?x32288) ?x32290)))
 (let ((?x34854 (- (- (- (- (- (- (- ?x34847 ?x32292) ?x32294) ?x32296) ?x32298) ?x32300) ?x32302) ?x32304)))
 (= (- ?x34854 ?x33488) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32372 (* l_0_7_81 l_0_7_81)))
 (let ((?x32370 (* l_0_7_80 l_0_7_80)))
 (let ((?x32368 (* l_0_7_79 l_0_7_79)))
 (let ((?x32366 (* l_0_7_78 l_0_7_78)))
 (let ((?x32364 (* l_0_7_77 l_0_7_77)))
 (let ((?x32362 (* l_0_7_76 l_0_7_76)))
 (let ((?x32360 (* l_0_7_75 l_0_7_75)))
 (let ((?x32358 (* l_0_7_74 l_0_7_74)))
 (let ((?x32356 (* l_0_7_36 l_0_7_36)))
 (let ((?x32354 (* l_0_7_35 l_0_7_35)))
 (let ((?x32352 (* l_0_7_34 l_0_7_34)))
 (let ((?x32350 (* l_0_7_33 l_0_7_33)))
 (let ((?x32348 (* l_0_7_32 l_0_7_32)))
 (let ((?x32346 (* l_0_7_31 l_0_7_31)))
 (let ((?x32344 (* l_0_7_30 l_0_7_30)))
 (let ((?x32376 (* l_0_7_29 l_0_7_29)))
 (let ((?x22338 (* l_0_7_261 l_0_7_261)))
 (let ((?x22326 (* l_0_7_260 l_0_7_260)))
 (let ((?x22314 (* l_0_7_259 l_0_7_259)))
 (let ((?x22302 (* l_0_7_258 l_0_7_258)))
 (let ((?x22290 (* l_0_7_257 l_0_7_257)))
 (let ((?x22278 (* l_0_7_256 l_0_7_256)))
 (let ((?x22284 (- (- (* (- l_0_7_254) l_0_7_254) (* l_0_7_255 l_0_7_255)) ?x22278)))
 (let ((?x22353 (+ (+ (- (- (- (- (- ?x22284 ?x22290) ?x22302) ?x22314) ?x22326) ?x22338) ?x32376) ?x32344)))
 (let ((?x34894 (- (+ (+ (+ (+ (+ (+ ?x22353 ?x32346) ?x32348) ?x32350) ?x32352) ?x32354) ?x32356) ?x32358)))
 (let ((?x34901 (- (- (- (- (- (- (- ?x34894 ?x32360) ?x32362) ?x32364) ?x32366) ?x32368) ?x32370) ?x32372)))
 (= ?x34901 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x32441 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32438 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32435 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32432 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32429 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32426 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32423 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32420 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32417 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32414 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32411 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32408 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32405 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31458 (* 2.0 l_0_7_31)))
 (let ((?x32402 (* ?x31458 l_0_7_39)))
 (let ((?x31455 (* 2.0 l_0_7_30)))
 (let ((?x32400 (* ?x31455 l_0_7_38)))
 (let ((?x31666 (* 2.0 l_0_7_29)))
 (let ((?x33176 (* ?x31666 l_0_7_37)))
 (let ((?x34949 (* (* 2.0 l_0_7_261) l_0_7_269)))
 (let ((?x34946 (* (* 2.0 l_0_7_260) l_0_7_268)))
 (let ((?x34943 (* (* 2.0 l_0_7_259) l_0_7_267)))
 (let ((?x34940 (* (* 2.0 l_0_7_258) l_0_7_266)))
 (let ((?x34937 (* (* 2.0 l_0_7_257) l_0_7_265)))
 (let ((?x34934 (* (* 2.0 l_0_7_256) l_0_7_264)))
 (let ((?x34931 (* (* 2.0 l_0_7_255) l_0_7_263)))
 (let ((?x34941 (- (- (- (- (* (* (- 2.0) l_0_7_254) l_0_7_262) ?x34931) ?x34934) ?x34937) ?x34940)))
 (let ((?x34954 (+ (+ (+ (+ (- (- (- ?x34941 ?x34943) ?x34946) ?x34949) ?x33176) ?x32400) ?x32402) ?x32405)))
 (let ((?x34961 (- (- (- (+ (+ (+ (+ ?x34954 ?x32408) ?x32411) ?x32414) ?x32417) ?x32420) ?x32423) ?x32426)))
 (= (- (- (- (- (- ?x34961 ?x32429) ?x32432) ?x32435) ?x32438) ?x32441) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x32524 (* l_0_7_90 l_0_7_90)))
 (let ((?x32522 (* l_0_7_89 l_0_7_89)))
 (let ((?x32520 (* l_0_7_88 l_0_7_88)))
 (let ((?x32518 (* l_0_7_87 l_0_7_87)))
 (let ((?x32516 (* l_0_7_86 l_0_7_86)))
 (let ((?x32514 (* l_0_7_85 l_0_7_85)))
 (let ((?x32512 (* l_0_7_84 l_0_7_84)))
 (let ((?x32510 (* l_0_7_83 l_0_7_83)))
 (let ((?x32508 (* l_0_7_82 l_0_7_82)))
 (let ((?x32506 (* l_0_7_45 l_0_7_45)))
 (let ((?x32504 (* l_0_7_44 l_0_7_44)))
 (let ((?x32502 (* l_0_7_43 l_0_7_43)))
 (let ((?x32500 (* l_0_7_42 l_0_7_42)))
 (let ((?x32487 (* l_0_7_41 l_0_7_41)))
 (let ((?x32484 (* l_0_7_40 l_0_7_40)))
 (let ((?x32480 (* l_0_7_39 l_0_7_39)))
 (let ((?x32476 (* l_0_7_38 l_0_7_38)))
 (let ((?x32528 (* l_0_7_37 l_0_7_37)))
 (let ((?x35007 (* l_0_7_270 l_0_7_270)))
 (let ((?x35005 (* l_0_7_269 l_0_7_269)))
 (let ((?x35003 (* l_0_7_268 l_0_7_268)))
 (let ((?x3589 (* l_0_7_267 l_0_7_267)))
 (let ((?x3591 (* l_0_7_266 l_0_7_266)))
 (let ((?x22437 (* l_0_7_265 l_0_7_265)))
 (let ((?x22453 (* l_0_7_264 l_0_7_264)))
 (let ((?x22431 (- (- (* (- l_0_7_262) l_0_7_262) (* l_0_7_263 l_0_7_263)) ?x22453)))
 (let ((?x35009 (+ (- (- (- (- (- (- ?x22431 ?x22437) ?x3591) ?x3589) ?x35003) ?x35005) ?x35007) ?x32528)))
 (let ((?x35016 (+ (+ (+ (+ (+ (+ (+ ?x35009 ?x32476) ?x32480) ?x32484) ?x32487) ?x32500) ?x32502) ?x32504)))
 (let ((?x35023 (- (- (- (- (- (- (+ ?x35016 ?x32506) ?x32508) ?x32510) ?x32512) ?x32514) ?x32516) ?x32518)))
 (= (- (- (- ?x35023 ?x32520) ?x32522) ?x32524) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x35058 (* ?x32834 l_0_7_92)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_137) ?x35058) 0.0))))
(assert
 (let ((?x34794 (* 2.0 l_0_7_253)))
 (let ((?x34843 (* ?x34794 l_0_7_268)))
 (let ((?x22084 (* 2.0 l_0_7_252)))
 (let ((?x34841 (* ?x22084 l_0_7_267)))
 (let ((?x22093 (* 2.0 l_0_7_251)))
 (let ((?x34839 (* ?x22093 l_0_7_266)))
 (let ((?x22077 (* 2.0 l_0_7_250)))
 (let ((?x34837 (* ?x22077 l_0_7_265)))
 (let ((?x22053 (* 2.0 l_0_7_249)))
 (let ((?x34834 (* ?x22053 l_0_7_264)))
 (let ((?x22035 (* 2.0 l_0_7_248)))
 (let ((?x34832 (* ?x22035 l_0_7_263)))
 (let ((?x22017 (* 2.0 l_0_7_247)))
 (let ((?x34830 (* ?x22017 l_0_7_262)))
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35107 (* ?x35106 l_0_7_178)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35104 (* ?x35103 l_0_7_177)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35101 (* ?x35100 l_0_7_176)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35098 (* ?x35097 l_0_7_175)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35095 (* ?x35094 l_0_7_174)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35092 (* ?x35091 l_0_7_173)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35089 (* ?x35088 l_0_7_172)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35086 (* ?x30531 l_0_7_146)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35084 (* ?x35083 l_0_7_133)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35081 (* ?x35080 l_0_7_132)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35078 (* ?x35077 l_0_7_131)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35075 (* ?x35074 l_0_7_130)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35072 (* ?x32779 l_0_7_129)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35070 (* ?x32776 l_0_7_128)))
 (let ((?x17250 (* (- 2.0) l_0_7_101)))
 (let ((?x22574 (* ?x17250 l_0_7_91)))
 (let ((?x35076 (+ (+ (+ (+ ?x22574 (* (* 2.0 l_0_7_112) l_0_7_127)) ?x35070) ?x35072) ?x35075)))
 (let ((?x35096 (- (- (- (+ (+ (+ (+ ?x35076 ?x35078) ?x35081) ?x35084) ?x35086) ?x35089) ?x35092) ?x35095)))
 (let ((?x35111 (+ (+ (+ (- (- (- (- ?x35096 ?x35098) ?x35101) ?x35104) ?x35107) ?x34830) ?x34832) ?x34834)))
 (= (+ (+ (+ (+ ?x35111 ?x34837) ?x34839) ?x34841) ?x34843) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x30532 (* ?x30531 l_0_7_151)))
 (= (+ (* (* (- 2.0) l_0_7_106) l_0_7_91) ?x30532) 0.0))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35162 (* ?x30531 l_0_7_157)))
 (= (+ (* (* (- 2.0) l_0_7_112) l_0_7_91) ?x35162) 0.0))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35169 (* ?x30531 l_0_7_164)))
 (= (+ (* (* (- 2.0) l_0_7_119) l_0_7_91) ?x35169) 0.0))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35180 (* ?x30531 l_0_7_172)))
 (= (+ (* (* (- 2.0) l_0_7_127) l_0_7_91) ?x35180) 0.0))))
(assert
 (let ((?x35198 (* l_0_7_93 l_0_7_93)))
 (let ((?x35196 (* l_0_7_92 l_0_7_92)))
 (let ((?x35190 (* l_0_7_138 l_0_7_138)))
 (let ((?x35188 (* l_0_7_137 l_0_7_137)))
 (let ((?x35191 (+ ?x35188 ?x35190)))
 (= (- (- ?x35191 ?x35196) ?x35198) 0.0)))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x33950 (* ?x32944 l_0_7_95)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x33948 (* ?x32941 l_0_7_94)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x33938 (* ?x30805 l_0_7_140)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x33936 (* ?x30802 l_0_7_139)))
 (= (- (- (+ ?x33936 ?x33938) ?x33948) ?x33950) 0.0))))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35220 (* ?x30805 l_0_7_147)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35218 (* ?x30802 l_0_7_146)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35216 (* ?x30949 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_101) l_0_7_92) ?x35216) ?x35218) ?x35220) 0.0))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x30806 (* ?x30805 l_0_7_152)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x30803 (* ?x30802 l_0_7_151)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30796 (* ?x30680 l_0_7_93)))
 (let ((?x30807 (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_92) ?x30796) ?x30803) ?x30806)))
 (= ?x30807 0.0)))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35245 (* ?x30805 l_0_7_158)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35243 (* ?x30802 l_0_7_157)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35241 (* ?x32776 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_112) l_0_7_92) ?x35241) ?x35243) ?x35245) 0.0))))))))
(assert
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35107 (* ?x35106 l_0_7_178)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35104 (* ?x35103 l_0_7_177)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35101 (* ?x35100 l_0_7_176)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35098 (* ?x35097 l_0_7_175)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35095 (* ?x35094 l_0_7_174)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35092 (* ?x35091 l_0_7_173)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35089 (* ?x35088 l_0_7_172)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35271 (* ?x30805 l_0_7_165)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35269 (* ?x30802 l_0_7_164)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35267 (* ?x19427 l_0_7_93)))
 (let ((?x19433 (* 2.0 l_0_7_119)))
 (let ((?x35265 (* ?x19433 l_0_7_92)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35084 (* ?x35083 l_0_7_133)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35081 (* ?x35080 l_0_7_132)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35078 (* ?x35077 l_0_7_131)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35075 (* ?x35074 l_0_7_130)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35072 (* ?x32779 l_0_7_129)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35070 (* ?x32776 l_0_7_128)))
 (let ((?x35262 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_127) ?x35070) ?x35072) ?x35075) ?x35078)))
 (let ((?x35264 (- (- ?x35262 ?x35081) ?x35084)))
 (let ((?x35275 (+ (+ (+ (+ (+ (- (- ?x35264 ?x35265) ?x35267) ?x35269) ?x35271) ?x35089) ?x35092) ?x35095)))
 (= (+ (+ (+ (+ ?x35275 ?x35098) ?x35101) ?x35104) ?x35107) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35307 (* ?x30805 l_0_7_173)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35305 (* ?x30802 l_0_7_172)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x22967 (* ?x33216 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_127) l_0_7_92) ?x22967) ?x35305) ?x35307) 0.0))))))))
(assert
 (let ((?x34162 (* l_0_7_96 l_0_7_96)))
 (let ((?x34160 (* l_0_7_95 l_0_7_95)))
 (let ((?x34158 (* l_0_7_94 l_0_7_94)))
 (let ((?x34143 (* l_0_7_141 l_0_7_141)))
 (let ((?x35322 (- (+ (+ (* l_0_7_139 l_0_7_139) (* l_0_7_140 l_0_7_140)) ?x34143) ?x34158)))
 (= (- (- ?x35322 ?x34160) ?x34162) 0.0)))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34423 (* ?x30845 l_0_7_148)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34421 (* ?x30842 l_0_7_147)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34418 (* ?x30839 l_0_7_146)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x34413 (* ?x30961 l_0_7_96)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x34411 (* ?x30949 l_0_7_95)))
 (let ((?x35341 (+ (+ (- (- (* (* (- 2.0) l_0_7_101) l_0_7_94) ?x34411) ?x34413) ?x34418) ?x34421)))
 (= (+ ?x35341 ?x34423) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x30846 (* ?x30845 l_0_7_153)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x30843 (* ?x30842 l_0_7_152)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x30840 (* ?x30839 l_0_7_151)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30837 (* ?x30683 l_0_7_96)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30835 (* ?x30680 l_0_7_95)))
 (let ((?x30844 (+ (+ (- (- (* (* (- 2.0) l_0_7_106) l_0_7_94) ?x30835) ?x30837) ?x30840) ?x30843)))
 (let ((?x30847 (+ ?x30844 ?x30846)))
 (= ?x30847 0.0))))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21219 (* ?x30845 l_0_7_159)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21215 (* ?x30842 l_0_7_158)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21214 (* ?x30839 l_0_7_157)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x21190 (* ?x32779 l_0_7_96)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x21178 (* ?x32776 l_0_7_95)))
 (let ((?x35357 (+ (+ (- (- (* (* (- 2.0) l_0_7_112) l_0_7_94) ?x21178) ?x21190) ?x21214) ?x21215)))
 (= (+ ?x35357 ?x21219) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34555 (* ?x30845 l_0_7_166)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34553 (* ?x30842 l_0_7_165)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34550 (* ?x30839 l_0_7_164)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x34547 (* ?x33156 l_0_7_96)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x34545 (* ?x19427 l_0_7_95)))
 (let ((?x35375 (+ (+ (- (- (* (* (- 2.0) l_0_7_119) l_0_7_94) ?x34545) ?x34547) ?x34550) ?x34553)))
 (= (+ ?x35375 ?x34555) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21511 (* ?x30845 l_0_7_174)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21512 (* ?x30842 l_0_7_173)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21478 (* ?x30839 l_0_7_172)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x21466 (* ?x33219 l_0_7_96)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x21507 (* ?x33216 l_0_7_95)))
 (let ((?x35392 (+ (+ (- (- (* (* (- 2.0) l_0_7_127) l_0_7_94) ?x21507) ?x21466) ?x21478) ?x21512)))
 (= (+ ?x35392 ?x21511) 0.0)))))))))))))
(assert
 (let ((?x35421 (* l_0_7_150 l_0_7_150)))
 (let ((?x35419 (* l_0_7_149 l_0_7_149)))
 (let ((?x35417 (* l_0_7_148 l_0_7_148)))
 (let ((?x35415 (* l_0_7_147 l_0_7_147)))
 (let ((?x35413 (* l_0_7_146 l_0_7_146)))
 (let ((?x35411 (* l_0_7_105 l_0_7_105)))
 (let ((?x35409 (* l_0_7_104 l_0_7_104)))
 (let ((?x35407 (* l_0_7_103 l_0_7_103)))
 (let ((?x35408 (- (- (* (- l_0_7_101) l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x35407)))
 (let ((?x35422 (+ (+ (+ (+ (+ (- (- ?x35408 ?x35409) ?x35411) ?x35413) ?x35415) ?x35417) ?x35419) ?x35421)))
 (= ?x35422 0.0))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x30989 (* ?x30988 l_0_7_155)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x30986 (* ?x30985 l_0_7_154)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x30983 (* ?x30982 l_0_7_153)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x30980 (* ?x30979 l_0_7_152)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x30977 (* ?x30976 l_0_7_151)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x30968 (* ?x30967 l_0_7_110)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x30965 (* ?x30964 l_0_7_109)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x30962 (* ?x30961 l_0_7_108)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x30959 (* ?x30949 l_0_7_107)))
 (let ((?x30969 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_106) ?x30959) ?x30962) ?x30965) ?x30968)))
 (= (+ (+ (+ (+ (+ ?x30969 ?x30977) ?x30980) ?x30983) ?x30986) ?x30989) 0.0)))))))))))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35472 (* ?x30988 l_0_7_161)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35470 (* ?x30985 l_0_7_160)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35468 (* ?x30982 l_0_7_159)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35466 (* ?x30979 l_0_7_158)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35464 (* ?x30976 l_0_7_157)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35462 (* ?x30967 l_0_7_116)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35460 (* ?x30964 l_0_7_115)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35458 (* ?x30961 l_0_7_114)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35456 (* ?x30949 l_0_7_113)))
 (let ((?x35463 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_112) ?x35456) ?x35458) ?x35460) ?x35462)))
 (= (+ (+ (+ (+ (+ ?x35463 ?x35464) ?x35466) ?x35468) ?x35470) ?x35472) 0.0)))))))))))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35531 (* ?x30988 l_0_7_168)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35529 (* ?x30985 l_0_7_167)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35527 (* ?x30982 l_0_7_166)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35525 (* ?x30979 l_0_7_165)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35523 (* ?x30976 l_0_7_164)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35521 (* ?x30967 l_0_7_123)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35511 (* ?x30964 l_0_7_122)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35508 (* ?x30961 l_0_7_121)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35504 (* ?x30949 l_0_7_120)))
 (let ((?x35522 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_119) ?x35504) ?x35508) ?x35511) ?x35521)))
 (= (+ (+ (+ (+ (+ ?x35522 ?x35523) ?x35525) ?x35527) ?x35529) ?x35531) 0.0)))))))))))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35586 (* ?x30988 l_0_7_176)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35584 (* ?x30985 l_0_7_175)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35582 (* ?x30982 l_0_7_174)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35580 (* ?x30979 l_0_7_173)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35578 (* ?x30976 l_0_7_172)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35576 (* ?x30967 l_0_7_131)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35566 (* ?x30964 l_0_7_130)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35563 (* ?x30961 l_0_7_129)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35559 (* ?x30949 l_0_7_128)))
 (let ((?x35577 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_127) ?x35559) ?x35563) ?x35566) ?x35576)))
 (= (+ (+ (+ (+ (+ ?x35577 ?x35578) ?x35580) ?x35582) ?x35584) ?x35586) 0.0)))))))))))))))))))))
(assert
 (let ((?x31055 (* l_0_7_156 l_0_7_156)))
 (let ((?x31053 (* l_0_7_155 l_0_7_155)))
 (let ((?x31051 (* l_0_7_154 l_0_7_154)))
 (let ((?x31049 (* l_0_7_153 l_0_7_153)))
 (let ((?x31047 (* l_0_7_152 l_0_7_152)))
 (let ((?x31045 (* l_0_7_151 l_0_7_151)))
 (let ((?x31043 (* l_0_7_111 l_0_7_111)))
 (let ((?x31041 (* l_0_7_110 l_0_7_110)))
 (let ((?x31029 (* l_0_7_109 l_0_7_109)))
 (let ((?x31025 (* l_0_7_108 l_0_7_108)))
 (let ((?x31027 (- (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31025)))
 (let ((?x31052 (+ (+ (+ (+ (- (- (- ?x31027 ?x31029) ?x31041) ?x31043) ?x31045) ?x31047) ?x31049) ?x31051)))
 (let ((?x31056 (+ (+ ?x31052 ?x31053) ?x31055)))
 (= ?x31056 0.0)))))))))))))))
(assert
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31114 (* ?x30710 l_0_7_162)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31112 (* ?x30707 l_0_7_161)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31110 (* ?x30704 l_0_7_160)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31108 (* ?x30701 l_0_7_159)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31106 (* ?x30698 l_0_7_158)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31104 (* ?x30695 l_0_7_157)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31102 (* ?x30692 l_0_7_117)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31100 (* ?x30689 l_0_7_116)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31098 (* ?x30686 l_0_7_115)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31096 (* ?x30683 l_0_7_114)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31084 (* ?x30680 l_0_7_113)))
 (let ((?x31101 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x31084) ?x31096) ?x31098) ?x31100)))
 (let ((?x31115 (+ (+ (+ (+ (+ (+ (- ?x31101 ?x31102) ?x31104) ?x31106) ?x31108) ?x31110) ?x31112) ?x31114)))
 (= ?x31115 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31238 (* ?x30710 l_0_7_177)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31236 (* ?x30707 l_0_7_176)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31234 (* ?x30704 l_0_7_175)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31232 (* ?x30701 l_0_7_174)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31230 (* ?x30698 l_0_7_173)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31228 (* ?x30695 l_0_7_172)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31226 (* ?x30692 l_0_7_132)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31224 (* ?x30689 l_0_7_131)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31222 (* ?x30686 l_0_7_130)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31220 (* ?x30683 l_0_7_129)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31218 (* ?x30680 l_0_7_128)))
 (let ((?x31225 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_127) ?x31218) ?x31220) ?x31222) ?x31224)))
 (let ((?x31239 (+ (+ (+ (+ (+ (+ (- ?x31225 ?x31226) ?x31228) ?x31230) ?x31232) ?x31234) ?x31236) ?x31238)))
 (= ?x31239 0.0))))))))))))))))))))))))))
(assert
 (let ((?x35660 (* l_0_7_163 l_0_7_163)))
 (let ((?x35658 (* l_0_7_162 l_0_7_162)))
 (let ((?x35656 (* l_0_7_161 l_0_7_161)))
 (let ((?x35654 (* l_0_7_160 l_0_7_160)))
 (let ((?x35652 (* l_0_7_159 l_0_7_159)))
 (let ((?x35650 (* l_0_7_158 l_0_7_158)))
 (let ((?x35648 (* l_0_7_157 l_0_7_157)))
 (let ((?x35646 (* l_0_7_118 l_0_7_118)))
 (let ((?x35644 (* l_0_7_117 l_0_7_117)))
 (let ((?x35642 (* l_0_7_116 l_0_7_116)))
 (let ((?x35640 (* l_0_7_115 l_0_7_115)))
 (let ((?x35638 (* l_0_7_114 l_0_7_114)))
 (let ((?x35639 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35638)))
 (let ((?x35653 (+ (+ (+ (- (- (- (- ?x35639 ?x35640) ?x35642) ?x35644) ?x35646) ?x35648) ?x35650) ?x35652)))
 (= (+ (+ (+ (+ ?x35653 ?x35654) ?x35656) ?x35658) ?x35660) 0.0))))))))))))))))
(assert
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35716 (* ?x35106 l_0_7_170)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35714 (* ?x35103 l_0_7_169)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35712 (* ?x35100 l_0_7_168)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35710 (* ?x35097 l_0_7_167)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35708 (* ?x35094 l_0_7_166)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35706 (* ?x35091 l_0_7_165)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35704 (* ?x35088 l_0_7_164)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35702 (* ?x35083 l_0_7_125)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35700 (* ?x35080 l_0_7_124)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35698 (* ?x35077 l_0_7_123)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35696 (* ?x35074 l_0_7_122)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35694 (* ?x32779 l_0_7_121)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35692 (* ?x32776 l_0_7_120)))
 (let ((?x35699 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_119) ?x35692) ?x35694) ?x35696) ?x35698)))
 (let ((?x35713 (+ (+ (+ (+ (+ (- (- ?x35699 ?x35700) ?x35702) ?x35704) ?x35706) ?x35708) ?x35710) ?x35712)))
 (= (+ (+ ?x35713 ?x35714) ?x35716) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35107 (* ?x35106 l_0_7_178)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35104 (* ?x35103 l_0_7_177)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35101 (* ?x35100 l_0_7_176)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35098 (* ?x35097 l_0_7_175)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35095 (* ?x35094 l_0_7_174)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35092 (* ?x35091 l_0_7_173)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35089 (* ?x35088 l_0_7_172)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35084 (* ?x35083 l_0_7_133)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35081 (* ?x35080 l_0_7_132)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35078 (* ?x35077 l_0_7_131)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35075 (* ?x35074 l_0_7_130)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35072 (* ?x32779 l_0_7_129)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35070 (* ?x32776 l_0_7_128)))
 (let ((?x35262 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_127) ?x35070) ?x35072) ?x35075) ?x35078)))
 (let ((?x35264 (- (- ?x35262 ?x35081) ?x35084)))
 (let ((?x35761 (+ (+ (+ (+ (+ (+ (+ ?x35264 ?x35089) ?x35092) ?x35095) ?x35098) ?x35101) ?x35104) ?x35107)))
 (= ?x35761 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x35795 (* l_0_7_171 l_0_7_171)))
 (let ((?x35793 (* l_0_7_170 l_0_7_170)))
 (let ((?x35791 (* l_0_7_169 l_0_7_169)))
 (let ((?x35789 (* l_0_7_168 l_0_7_168)))
 (let ((?x35787 (* l_0_7_167 l_0_7_167)))
 (let ((?x35785 (* l_0_7_166 l_0_7_166)))
 (let ((?x35783 (* l_0_7_165 l_0_7_165)))
 (let ((?x35781 (* l_0_7_164 l_0_7_164)))
 (let ((?x35779 (* l_0_7_126 l_0_7_126)))
 (let ((?x35777 (* l_0_7_125 l_0_7_125)))
 (let ((?x35775 (* l_0_7_124 l_0_7_124)))
 (let ((?x35773 (* l_0_7_123 l_0_7_123)))
 (let ((?x35771 (* l_0_7_122 l_0_7_122)))
 (let ((?x35769 (* l_0_7_121 l_0_7_121)))
 (let ((?x35770 (- (- (* (- l_0_7_119) l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35769)))
 (let ((?x35784 (+ (+ (- (- (- (- (- ?x35770 ?x35771) ?x35773) ?x35775) ?x35777) ?x35779) ?x35781) ?x35783)))
 (= (+ (+ (+ (+ (+ (+ ?x35784 ?x35785) ?x35787) ?x35789) ?x35791) ?x35793) ?x35795) 0.0))))))))))))))))))
(assert
 (let ((?x35874 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35871 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35868 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35865 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35862 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35859 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35856 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35853 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35850 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35847 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35844 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35841 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35838 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x35835 (* ?x33156 l_0_7_129)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35833 (* ?x19427 l_0_7_128)))
 (let ((?x35842 (- (- (- (- (* (* (- 2.0) l_0_7_119) l_0_7_127) ?x35833) ?x35835) ?x35838) ?x35841)))
 (let ((?x35863 (+ (+ (+ (+ (- (- (- ?x35842 ?x35844) ?x35847) ?x35850) ?x35853) ?x35856) ?x35859) ?x35862)))
 (= (+ (+ (+ (+ ?x35863 ?x35865) ?x35868) ?x35871) ?x35874) 0.0)))))))))))))))))))))
(assert
 (let ((?x35971 (* l_0_7_180 l_0_7_180)))
 (let ((?x35969 (* l_0_7_179 l_0_7_179)))
 (let ((?x35967 (* l_0_7_178 l_0_7_178)))
 (let ((?x35965 (* l_0_7_177 l_0_7_177)))
 (let ((?x35963 (* l_0_7_176 l_0_7_176)))
 (let ((?x35961 (* l_0_7_175 l_0_7_175)))
 (let ((?x35959 (* l_0_7_174 l_0_7_174)))
 (let ((?x35957 (* l_0_7_173 l_0_7_173)))
 (let ((?x35955 (* l_0_7_172 l_0_7_172)))
 (let ((?x35953 (* l_0_7_135 l_0_7_135)))
 (let ((?x35951 (* l_0_7_134 l_0_7_134)))
 (let ((?x35949 (* l_0_7_133 l_0_7_133)))
 (let ((?x35947 (* l_0_7_132 l_0_7_132)))
 (let ((?x35934 (* l_0_7_131 l_0_7_131)))
 (let ((?x35931 (* l_0_7_130 l_0_7_130)))
 (let ((?x35927 (* l_0_7_129 l_0_7_129)))
 (let ((?x35929 (- (- (* (- l_0_7_127) l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35927)))
 (let ((?x35956 (+ (- (- (- (- (- (- ?x35929 ?x35931) ?x35934) ?x35947) ?x35949) ?x35951) ?x35953) ?x35955)))
 (let ((?x35970 (+ (+ (+ (+ (+ (+ (+ ?x35956 ?x35957) ?x35959) ?x35961) ?x35963) ?x35965) ?x35967) ?x35969)))
 (= (+ ?x35970 ?x35971) 0.0)))))))))))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x35058 (* ?x32834 l_0_7_92)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_137) ?x35058) 0.0))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x32835 (* ?x32834 l_0_7_97)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x32831 (* ?x30531 l_0_7_142)))
 (= (- ?x32831 ?x32835) 0.0))))))
(assert
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34026 (* ?x33891 l_0_7_255)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x34024 (* ?x20219 l_0_7_254)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35271 (* ?x30805 l_0_7_165)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35269 (* ?x30802 l_0_7_164)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35086 (* ?x30531 l_0_7_146)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35267 (* ?x19427 l_0_7_93)))
 (let ((?x19433 (* 2.0 l_0_7_119)))
 (let ((?x35265 (* ?x19433 l_0_7_92)))
 (let ((?x17250 (* (- 2.0) l_0_7_101)))
 (let ((?x22574 (* ?x17250 l_0_7_91)))
 (let ((?x36022 (+ (+ (- (- (+ (+ (+ ?x22574 ?x35265) ?x35267) ?x35086) ?x35269) ?x35271) ?x34024) ?x34026)))
 (= ?x36022 0.0)))))))))))))))))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35162 (* ?x30531 l_0_7_157)))
 (= (+ (* (* (- 2.0) l_0_7_112) l_0_7_91) ?x35162) 0.0))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35169 (* ?x30531 l_0_7_164)))
 (= (+ (* (* (- 2.0) l_0_7_119) l_0_7_91) ?x35169) 0.0))))
(assert
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35180 (* ?x30531 l_0_7_172)))
 (= (+ (* (* (- 2.0) l_0_7_127) l_0_7_91) ?x35180) 0.0))))
(assert
 (let ((?x35198 (* l_0_7_93 l_0_7_93)))
 (let ((?x35196 (* l_0_7_92 l_0_7_92)))
 (let ((?x35190 (* l_0_7_138 l_0_7_138)))
 (let ((?x35188 (* l_0_7_137 l_0_7_137)))
 (let ((?x35191 (+ ?x35188 ?x35190)))
 (= (- (- ?x35191 ?x35196) ?x35198) 0.0)))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x33950 (* ?x32944 l_0_7_95)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x33948 (* ?x32941 l_0_7_94)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x33938 (* ?x30805 l_0_7_140)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x33936 (* ?x30802 l_0_7_139)))
 (= (- (- (+ ?x33936 ?x33938) ?x33948) ?x33950) 0.0))))))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x32945 (* ?x32944 l_0_7_98)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x32942 (* ?x32941 l_0_7_97)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x19150 (* ?x30805 l_0_7_143)))
 (let ((?x32936 (+ (* (* 2.0 l_0_7_137) l_0_7_142) ?x19150)))
 (= (- (- ?x32936 ?x32942) ?x32945) 0.0)))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35220 (* ?x30805 l_0_7_147)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35218 (* ?x30802 l_0_7_146)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35216 (* ?x30949 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_101) l_0_7_92) ?x35216) ?x35218) ?x35220) 0.0))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35245 (* ?x30805 l_0_7_158)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35243 (* ?x30802 l_0_7_157)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35241 (* ?x32776 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_112) l_0_7_92) ?x35241) ?x35243) ?x35245) 0.0))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35271 (* ?x30805 l_0_7_165)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35269 (* ?x30802 l_0_7_164)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35267 (* ?x19427 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_119) l_0_7_92) ?x35267) ?x35269) ?x35271) 0.0))))))))
(assert
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35307 (* ?x30805 l_0_7_173)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35305 (* ?x30802 l_0_7_172)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x22967 (* ?x33216 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_127) l_0_7_92) ?x22967) ?x35305) ?x35307) 0.0))))))))
(assert
 (let ((?x34162 (* l_0_7_96 l_0_7_96)))
 (let ((?x34160 (* l_0_7_95 l_0_7_95)))
 (let ((?x34158 (* l_0_7_94 l_0_7_94)))
 (let ((?x34143 (* l_0_7_141 l_0_7_141)))
 (let ((?x35322 (- (+ (+ (* l_0_7_139 l_0_7_139) (* l_0_7_140 l_0_7_140)) ?x34143) ?x34158)))
 (= (- (- ?x35322 ?x34160) ?x34162) 0.0)))))))
(assert
 (let ((?x32975 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x32972 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x32969 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x19191 (* ?x30845 l_0_7_144)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x15264 (* ?x30842 l_0_7_143)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x15362 (* ?x30839 l_0_7_142)))
 (let ((?x32960 (+ (+ ?x15362 ?x15264) ?x19191)))
 (= (- (- (- ?x32960 ?x32969) ?x32972) ?x32975) 0.0))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34423 (* ?x30845 l_0_7_148)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34421 (* ?x30842 l_0_7_147)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34418 (* ?x30839 l_0_7_146)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x34413 (* ?x30961 l_0_7_96)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x34411 (* ?x30949 l_0_7_95)))
 (let ((?x35341 (+ (+ (- (- (* (* (- 2.0) l_0_7_101) l_0_7_94) ?x34411) ?x34413) ?x34418) ?x34421)))
 (= (+ ?x35341 ?x34423) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21219 (* ?x30845 l_0_7_159)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21215 (* ?x30842 l_0_7_158)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21214 (* ?x30839 l_0_7_157)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x21190 (* ?x32779 l_0_7_96)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x21178 (* ?x32776 l_0_7_95)))
 (let ((?x35357 (+ (+ (- (- (* (* (- 2.0) l_0_7_112) l_0_7_94) ?x21178) ?x21190) ?x21214) ?x21215)))
 (= (+ ?x35357 ?x21219) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x34555 (* ?x30845 l_0_7_166)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x34553 (* ?x30842 l_0_7_165)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x34550 (* ?x30839 l_0_7_164)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x34547 (* ?x33156 l_0_7_96)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x34545 (* ?x19427 l_0_7_95)))
 (let ((?x35375 (+ (+ (- (- (* (* (- 2.0) l_0_7_119) l_0_7_94) ?x34545) ?x34547) ?x34550) ?x34553)))
 (= (+ ?x35375 ?x34555) 0.0)))))))))))))
(assert
 (let ((?x30845 (* 2.0 l_0_7_141)))
 (let ((?x21511 (* ?x30845 l_0_7_174)))
 (let ((?x30842 (* 2.0 l_0_7_140)))
 (let ((?x21512 (* ?x30842 l_0_7_173)))
 (let ((?x30839 (* 2.0 l_0_7_139)))
 (let ((?x21478 (* ?x30839 l_0_7_172)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x21466 (* ?x33219 l_0_7_96)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x21507 (* ?x33216 l_0_7_95)))
 (let ((?x35392 (+ (+ (- (- (* (* (- 2.0) l_0_7_127) l_0_7_94) ?x21507) ?x21466) ?x21478) ?x21512)))
 (= (+ ?x35392 ?x21511) 0.0)))))))))))))
(assert
 (let ((?x33039 (* l_0_7_99 l_0_7_99)))
 (let ((?x33037 (* l_0_7_98 l_0_7_98)))
 (let ((?x33035 (* l_0_7_97 l_0_7_97)))
 (let ((?x33026 (* l_0_7_145 l_0_7_145)))
 (let ((?x33024 (* l_0_7_144 l_0_7_144)))
 (let ((?x33022 (* l_0_7_143 l_0_7_143)))
 (let ((?x36061 (+ (+ (* (- l_0_7_100) l_0_7_100) (* l_0_7_142 l_0_7_142)) ?x33022)))
 (= (- (- (- (+ (+ ?x36061 ?x33024) ?x33026) ?x33035) ?x33037) ?x33039) 0.0)))))))))
(assert
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33085 (* ?x30909 l_0_7_149)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33083 (* ?x30906 l_0_7_148)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33081 (* ?x30903 l_0_7_147)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33079 (* ?x30900 l_0_7_146)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x33072 (* ?x30961 l_0_7_99)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x33070 (* ?x30949 l_0_7_98)))
 (let ((?x19277 (* 2.0 l_0_7_101)))
 (let ((?x19278 (* ?x19277 l_0_7_97)))
 (let ((?x33073 (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_104) ?x19278) ?x33070) ?x33072)))
 (= (+ (+ (+ (+ ?x33073 ?x33079) ?x33081) ?x33083) ?x33085) 0.0)))))))))))))))))
(assert
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33174 (* ?x30909 l_0_7_167)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33172 (* ?x30906 l_0_7_166)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33170 (* ?x30903 l_0_7_165)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33168 (* ?x30900 l_0_7_164)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x33166 (* ?x33156 l_0_7_99)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x19428 (* ?x19427 l_0_7_98)))
 (let ((?x19433 (* 2.0 l_0_7_119)))
 (let ((?x19434 (* ?x19433 l_0_7_97)))
 (let ((?x33169 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_122) ?x19434) ?x19428) ?x33166) ?x33168)))
 (let ((?x33175 (+ (+ (+ ?x33169 ?x33170) ?x33172) ?x33174)))
 (= ?x33175 0.0))))))))))))))))))
(assert
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33228 (* ?x30909 l_0_7_175)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33226 (* ?x30906 l_0_7_174)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33224 (* ?x30903 l_0_7_173)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33222 (* ?x30900 l_0_7_172)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x33220 (* ?x33219 l_0_7_99)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x33217 (* ?x33216 l_0_7_98)))
 (let ((?x33213 (* 2.0 l_0_7_127)))
 (let ((?x33214 (* ?x33213 l_0_7_97)))
 (let ((?x33223 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_130) ?x33214) ?x33217) ?x33220) ?x33222)))
 (let ((?x33229 (+ (+ (+ ?x33223 ?x33224) ?x33226) ?x33228)))
 (= ?x33229 0.0))))))))))))))))))
(assert
 (let ((?x35421 (* l_0_7_150 l_0_7_150)))
 (let ((?x35419 (* l_0_7_149 l_0_7_149)))
 (let ((?x35417 (* l_0_7_148 l_0_7_148)))
 (let ((?x35415 (* l_0_7_147 l_0_7_147)))
 (let ((?x35413 (* l_0_7_146 l_0_7_146)))
 (let ((?x35411 (* l_0_7_105 l_0_7_105)))
 (let ((?x35409 (* l_0_7_104 l_0_7_104)))
 (let ((?x35407 (* l_0_7_103 l_0_7_103)))
 (let ((?x35408 (- (- (* (- l_0_7_101) l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x35407)))
 (let ((?x35422 (+ (+ (+ (+ (+ (- (- ?x35408 ?x35409) ?x35411) ?x35413) ?x35415) ?x35417) ?x35419) ?x35421)))
 (= ?x35422 0.0))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35472 (* ?x30988 l_0_7_161)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35470 (* ?x30985 l_0_7_160)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35468 (* ?x30982 l_0_7_159)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35466 (* ?x30979 l_0_7_158)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35464 (* ?x30976 l_0_7_157)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35462 (* ?x30967 l_0_7_116)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35460 (* ?x30964 l_0_7_115)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35458 (* ?x30961 l_0_7_114)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35456 (* ?x30949 l_0_7_113)))
 (let ((?x35463 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_112) ?x35456) ?x35458) ?x35460) ?x35462)))
 (= (+ (+ (+ (+ (+ ?x35463 ?x35464) ?x35466) ?x35468) ?x35470) ?x35472) 0.0)))))))))))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35531 (* ?x30988 l_0_7_168)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35529 (* ?x30985 l_0_7_167)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35527 (* ?x30982 l_0_7_166)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35525 (* ?x30979 l_0_7_165)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35523 (* ?x30976 l_0_7_164)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35521 (* ?x30967 l_0_7_123)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35511 (* ?x30964 l_0_7_122)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35508 (* ?x30961 l_0_7_121)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35504 (* ?x30949 l_0_7_120)))
 (let ((?x35522 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_119) ?x35504) ?x35508) ?x35511) ?x35521)))
 (= (+ (+ (+ (+ (+ ?x35522 ?x35523) ?x35525) ?x35527) ?x35529) ?x35531) 0.0)))))))))))))))))))))
(assert
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35586 (* ?x30988 l_0_7_176)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35584 (* ?x30985 l_0_7_175)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35582 (* ?x30982 l_0_7_174)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35580 (* ?x30979 l_0_7_173)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35578 (* ?x30976 l_0_7_172)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35576 (* ?x30967 l_0_7_131)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35566 (* ?x30964 l_0_7_130)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35563 (* ?x30961 l_0_7_129)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35559 (* ?x30949 l_0_7_128)))
 (let ((?x35577 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_127) ?x35559) ?x35563) ?x35566) ?x35576)))
 (= (+ (+ (+ (+ (+ ?x35577 ?x35578) ?x35580) ?x35582) ?x35584) ?x35586) 0.0)))))))))))))))))))))
(assert
 (let ((?x35660 (* l_0_7_163 l_0_7_163)))
 (let ((?x35658 (* l_0_7_162 l_0_7_162)))
 (let ((?x35656 (* l_0_7_161 l_0_7_161)))
 (let ((?x35654 (* l_0_7_160 l_0_7_160)))
 (let ((?x35652 (* l_0_7_159 l_0_7_159)))
 (let ((?x35650 (* l_0_7_158 l_0_7_158)))
 (let ((?x35648 (* l_0_7_157 l_0_7_157)))
 (let ((?x35646 (* l_0_7_118 l_0_7_118)))
 (let ((?x35644 (* l_0_7_117 l_0_7_117)))
 (let ((?x35642 (* l_0_7_116 l_0_7_116)))
 (let ((?x35640 (* l_0_7_115 l_0_7_115)))
 (let ((?x35638 (* l_0_7_114 l_0_7_114)))
 (let ((?x35639 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35638)))
 (let ((?x35653 (+ (+ (+ (- (- (- (- ?x35639 ?x35640) ?x35642) ?x35644) ?x35646) ?x35648) ?x35650) ?x35652)))
 (= (+ (+ (+ (+ ?x35653 ?x35654) ?x35656) ?x35658) ?x35660) 0.0))))))))))))))))
(assert
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35716 (* ?x35106 l_0_7_170)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35714 (* ?x35103 l_0_7_169)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35712 (* ?x35100 l_0_7_168)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35710 (* ?x35097 l_0_7_167)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35708 (* ?x35094 l_0_7_166)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35706 (* ?x35091 l_0_7_165)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35704 (* ?x35088 l_0_7_164)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35702 (* ?x35083 l_0_7_125)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35700 (* ?x35080 l_0_7_124)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35698 (* ?x35077 l_0_7_123)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35696 (* ?x35074 l_0_7_122)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35694 (* ?x32779 l_0_7_121)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35692 (* ?x32776 l_0_7_120)))
 (let ((?x35699 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_119) ?x35692) ?x35694) ?x35696) ?x35698)))
 (let ((?x35713 (+ (+ (+ (+ (+ (- (- ?x35699 ?x35700) ?x35702) ?x35704) ?x35706) ?x35708) ?x35710) ?x35712)))
 (= (+ (+ ?x35713 ?x35714) ?x35716) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35795 (* l_0_7_171 l_0_7_171)))
 (let ((?x35793 (* l_0_7_170 l_0_7_170)))
 (let ((?x35791 (* l_0_7_169 l_0_7_169)))
 (let ((?x35789 (* l_0_7_168 l_0_7_168)))
 (let ((?x35787 (* l_0_7_167 l_0_7_167)))
 (let ((?x35785 (* l_0_7_166 l_0_7_166)))
 (let ((?x35783 (* l_0_7_165 l_0_7_165)))
 (let ((?x35781 (* l_0_7_164 l_0_7_164)))
 (let ((?x35779 (* l_0_7_126 l_0_7_126)))
 (let ((?x35777 (* l_0_7_125 l_0_7_125)))
 (let ((?x35775 (* l_0_7_124 l_0_7_124)))
 (let ((?x35773 (* l_0_7_123 l_0_7_123)))
 (let ((?x35771 (* l_0_7_122 l_0_7_122)))
 (let ((?x35769 (* l_0_7_121 l_0_7_121)))
 (let ((?x35770 (- (- (* (- l_0_7_119) l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35769)))
 (let ((?x35784 (+ (+ (- (- (- (- (- ?x35770 ?x35771) ?x35773) ?x35775) ?x35777) ?x35779) ?x35781) ?x35783)))
 (= (+ (+ (+ (+ (+ (+ ?x35784 ?x35785) ?x35787) ?x35789) ?x35791) ?x35793) ?x35795) 0.0))))))))))))))))))
(assert
 (let ((?x35874 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35871 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35868 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35865 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35862 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35859 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35856 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35853 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35850 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35847 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35844 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35841 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35838 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x35835 (* ?x33156 l_0_7_129)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35833 (* ?x19427 l_0_7_128)))
 (let ((?x35842 (- (- (- (- (* (* (- 2.0) l_0_7_119) l_0_7_127) ?x35833) ?x35835) ?x35838) ?x35841)))
 (let ((?x35863 (+ (+ (+ (+ (- (- (- ?x35842 ?x35844) ?x35847) ?x35850) ?x35853) ?x35856) ?x35859) ?x35862)))
 (= (+ (+ (+ (+ ?x35863 ?x35865) ?x35868) ?x35871) ?x35874) 0.0)))))))))))))))))))))
(assert
 (let ((?x35971 (* l_0_7_180 l_0_7_180)))
 (let ((?x35969 (* l_0_7_179 l_0_7_179)))
 (let ((?x35967 (* l_0_7_178 l_0_7_178)))
 (let ((?x35965 (* l_0_7_177 l_0_7_177)))
 (let ((?x35963 (* l_0_7_176 l_0_7_176)))
 (let ((?x35961 (* l_0_7_175 l_0_7_175)))
 (let ((?x35959 (* l_0_7_174 l_0_7_174)))
 (let ((?x35957 (* l_0_7_173 l_0_7_173)))
 (let ((?x35955 (* l_0_7_172 l_0_7_172)))
 (let ((?x35953 (* l_0_7_135 l_0_7_135)))
 (let ((?x35951 (* l_0_7_134 l_0_7_134)))
 (let ((?x35949 (* l_0_7_133 l_0_7_133)))
 (let ((?x35947 (* l_0_7_132 l_0_7_132)))
 (let ((?x35934 (* l_0_7_131 l_0_7_131)))
 (let ((?x35931 (* l_0_7_130 l_0_7_130)))
 (let ((?x35927 (* l_0_7_129 l_0_7_129)))
 (let ((?x35929 (- (- (* (- l_0_7_127) l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35927)))
 (let ((?x35956 (+ (- (- (- (- (- (- ?x35929 ?x35931) ?x35934) ?x35947) ?x35949) ?x35951) ?x35953) ?x35955)))
 (let ((?x35970 (+ (+ (+ (+ (+ (+ (+ ?x35956 ?x35957) ?x35959) ?x35961) ?x35963) ?x35965) ?x35967) ?x35969)))
 (= (+ ?x35970 ?x35971) 0.0)))))))))))))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x35058 (* ?x32834 l_0_7_92)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33275 (* ?x33274 l_0_7_227)))
 (let ((?x36094 (- (* (* (- 2.0) l_0_7_136) l_0_7_137) (* (* 2.0 l_0_7_182) l_0_7_191))))
 (let ((?x36099 (- (+ (- ?x36094 (* (* 2.0 l_0_7_183) l_0_7_192)) ?x33275) (* (* 2.0 l_0_7_272) l_0_7_281))))
 (let ((?x36103 (- (- ?x36099 (* (* 2.0 l_0_7_273) l_0_7_282)) (* (* 2.0 l_0_7_317) l_0_7_326))))
 (let ((?x36107 (- (- ?x36103 (* (* 2.0 l_0_7_318) l_0_7_327)) (* (* 2.0 l_0_7_362) l_0_7_371))))
 (= (+ (- ?x36107 (* (* 2.0 l_0_7_363) l_0_7_372)) ?x35058) 0.0))))))))))
(assert
 (let ((?x32834 (* 2.0 l_0_7_91)))
 (let ((?x32835 (* ?x32834 l_0_7_97)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33375 (* ?x33274 l_0_7_232)))
 (let ((?x36166 (- (* (* (- 2.0) l_0_7_136) l_0_7_142) (* (* 2.0 l_0_7_187) l_0_7_191))))
 (let ((?x36170 (- (- ?x36166 (* (* 2.0 l_0_7_188) l_0_7_192)) (* (* 2.0 l_0_7_189) l_0_7_193))))
 (let ((?x36175 (- (+ (- ?x36170 (* (* 2.0 l_0_7_190) l_0_7_194)) ?x33375) (* (* 2.0 l_0_7_277) l_0_7_281))))
 (let ((?x36179 (- (- ?x36175 (* (* 2.0 l_0_7_278) l_0_7_282)) (* (* 2.0 l_0_7_279) l_0_7_283))))
 (let ((?x36183 (- (- ?x36179 (* (* 2.0 l_0_7_280) l_0_7_284)) (* (* 2.0 l_0_7_322) l_0_7_326))))
 (let ((?x36187 (- (- ?x36183 (* (* 2.0 l_0_7_323) l_0_7_327)) (* (* 2.0 l_0_7_324) l_0_7_328))))
 (let ((?x36191 (- (- ?x36187 (* (* 2.0 l_0_7_325) l_0_7_329)) (* (* 2.0 l_0_7_367) l_0_7_371))))
 (let ((?x36195 (- (- ?x36191 (* (* 2.0 l_0_7_368) l_0_7_372)) (* (* 2.0 l_0_7_369) l_0_7_373))))
 (= (+ (- ?x36195 (* (* 2.0 l_0_7_370) l_0_7_374)) ?x32835) 0.0))))))))))))))
(assert
 (let ((?x36318 (* l_0_7_375 l_0_7_375)))
 (let ((?x36316 (* l_0_7_374 l_0_7_374)))
 (let ((?x36314 (* l_0_7_373 l_0_7_373)))
 (let ((?x36312 (* l_0_7_372 l_0_7_372)))
 (let ((?x36310 (* l_0_7_371 l_0_7_371)))
 (let ((?x36308 (* l_0_7_330 l_0_7_330)))
 (let ((?x36306 (* l_0_7_329 l_0_7_329)))
 (let ((?x36304 (* l_0_7_328 l_0_7_328)))
 (let ((?x36302 (* l_0_7_327 l_0_7_327)))
 (let ((?x36300 (* l_0_7_326 l_0_7_326)))
 (let ((?x36298 (* l_0_7_285 l_0_7_285)))
 (let ((?x36296 (* l_0_7_284 l_0_7_284)))
 (let ((?x36294 (* l_0_7_283 l_0_7_283)))
 (let ((?x36292 (* l_0_7_282 l_0_7_282)))
 (let ((?x36290 (* l_0_7_281 l_0_7_281)))
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33467 (* ?x33274 l_0_7_236)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35086 (* ?x30531 l_0_7_146)))
 (let ((?x36276 (- (- (* (* 2.0 l_0_7_101) l_0_7_91) ?x35086) (* (* 1.0 l_0_7_191) l_0_7_191))))
 (let ((?x36282 (- (- ?x36276 (* (* 1.0 l_0_7_192) l_0_7_192)) (* (* 1.0 l_0_7_193) l_0_7_193))))
 (let ((?x36288 (- (- ?x36282 (* (* 1.0 l_0_7_194) l_0_7_194)) (* (* 1.0 l_0_7_195) l_0_7_195))))
 (let ((?x36301 (- (- (- (- (- (- (+ ?x36288 ?x33467) ?x36290) ?x36292) ?x36294) ?x36296) ?x36298) ?x36300)))
 (let ((?x36315 (- (- (- (- (- (- (- ?x36301 ?x36302) ?x36304) ?x36306) ?x36308) ?x36310) ?x36312) ?x36314)))
 (= (- (- ?x36315 ?x36316) ?x36318) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33551 (* ?x33274 l_0_7_241)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x30532 (* ?x30531 l_0_7_151)))
 (let ((?x30528 (* 2.0 l_0_7_106)))
 (let ((?x30529 (* ?x30528 l_0_7_91)))
 (let ((?x36373 (- (- (- ?x30529 ?x30532) (* (* 2.0 l_0_7_191) l_0_7_196)) (* (* 2.0 l_0_7_192) l_0_7_197))))
 (let ((?x36379 (- (- ?x36373 (* (* 2.0 l_0_7_193) l_0_7_198)) (* (* 2.0 l_0_7_194) l_0_7_199))))
 (let ((?x36386 (- (+ (- ?x36379 (* (* 2.0 l_0_7_195) l_0_7_200)) ?x33551) (* (* 2.0 l_0_7_281) l_0_7_286))))
 (let ((?x36392 (- (- ?x36386 (* (* 2.0 l_0_7_282) l_0_7_287)) (* (* 2.0 l_0_7_283) l_0_7_288))))
 (let ((?x36398 (- (- ?x36392 (* (* 2.0 l_0_7_284) l_0_7_289)) (* (* 2.0 l_0_7_285) l_0_7_290))))
 (let ((?x36404 (- (- ?x36398 (* (* 2.0 l_0_7_326) l_0_7_331)) (* (* 2.0 l_0_7_327) l_0_7_332))))
 (let ((?x36410 (- (- ?x36404 (* (* 2.0 l_0_7_328) l_0_7_333)) (* (* 2.0 l_0_7_329) l_0_7_334))))
 (let ((?x36416 (- (- ?x36410 (* (* 2.0 l_0_7_330) l_0_7_335)) (* (* 2.0 l_0_7_371) l_0_7_376))))
 (let ((?x36422 (- (- ?x36416 (* (* 2.0 l_0_7_372) l_0_7_377)) (* (* 2.0 l_0_7_373) l_0_7_378))))
 (let ((?x36428 (- (- ?x36422 (* (* 2.0 l_0_7_374) l_0_7_379)) (* (* 2.0 l_0_7_375) l_0_7_380))))
 (= ?x36428 0.0))))))))))))))))))
(assert
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33641 (* ?x33274 l_0_7_247)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35162 (* ?x30531 l_0_7_157)))
 (let ((?x36483 (- (- (* (* 2.0 l_0_7_112) l_0_7_91) ?x35162) (* (* 2.0 l_0_7_191) l_0_7_202))))
 (let ((?x36487 (- (- ?x36483 (* (* 2.0 l_0_7_192) l_0_7_203)) (* (* 2.0 l_0_7_193) l_0_7_204))))
 (let ((?x36491 (- (- ?x36487 (* (* 2.0 l_0_7_194) l_0_7_205)) (* (* 2.0 l_0_7_195) l_0_7_206))))
 (let ((?x36496 (- (- (+ ?x36491 ?x33641) (* (* 2.0 l_0_7_281) l_0_7_292)) (* (* 2.0 l_0_7_282) l_0_7_293))))
 (let ((?x36500 (- (- ?x36496 (* (* 2.0 l_0_7_283) l_0_7_294)) (* (* 2.0 l_0_7_284) l_0_7_295))))
 (let ((?x36504 (- (- ?x36500 (* (* 2.0 l_0_7_285) l_0_7_296)) (* (* 2.0 l_0_7_326) l_0_7_337))))
 (let ((?x36508 (- (- ?x36504 (* (* 2.0 l_0_7_327) l_0_7_338)) (* (* 2.0 l_0_7_328) l_0_7_339))))
 (let ((?x36512 (- (- ?x36508 (* (* 2.0 l_0_7_329) l_0_7_340)) (* (* 2.0 l_0_7_330) l_0_7_341))))
 (let ((?x36516 (- (- ?x36512 (* (* 2.0 l_0_7_371) l_0_7_382)) (* (* 2.0 l_0_7_372) l_0_7_383))))
 (let ((?x36520 (- (- ?x36516 (* (* 2.0 l_0_7_373) l_0_7_384)) (* (* 2.0 l_0_7_374) l_0_7_385))))
 (= (- ?x36520 (* (* 2.0 l_0_7_375) l_0_7_386)) 0.0))))))))))))))))
(assert
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33722 (* ?x33274 l_0_7_254)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35169 (* ?x30531 l_0_7_164)))
 (let ((?x36561 (- (- (* (* 2.0 l_0_7_119) l_0_7_91) ?x35169) (* (* 2.0 l_0_7_191) l_0_7_209))))
 (let ((?x36565 (- (- ?x36561 (* (* 2.0 l_0_7_192) l_0_7_210)) (* (* 2.0 l_0_7_193) l_0_7_211))))
 (let ((?x36569 (- (- ?x36565 (* (* 2.0 l_0_7_194) l_0_7_212)) (* (* 2.0 l_0_7_195) l_0_7_213))))
 (let ((?x36574 (- (- (+ ?x36569 ?x33722) (* (* 2.0 l_0_7_281) l_0_7_299)) (* (* 2.0 l_0_7_282) l_0_7_300))))
 (let ((?x36578 (- (- ?x36574 (* (* 2.0 l_0_7_283) l_0_7_301)) (* (* 2.0 l_0_7_284) l_0_7_302))))
 (let ((?x36582 (- (- ?x36578 (* (* 2.0 l_0_7_285) l_0_7_303)) (* (* 2.0 l_0_7_326) l_0_7_344))))
 (let ((?x36586 (- (- ?x36582 (* (* 2.0 l_0_7_327) l_0_7_345)) (* (* 2.0 l_0_7_328) l_0_7_346))))
 (let ((?x36590 (- (- ?x36586 (* (* 2.0 l_0_7_329) l_0_7_347)) (* (* 2.0 l_0_7_330) l_0_7_348))))
 (let ((?x36594 (- (- ?x36590 (* (* 2.0 l_0_7_371) l_0_7_389)) (* (* 2.0 l_0_7_372) l_0_7_390))))
 (let ((?x36598 (- (- ?x36594 (* (* 2.0 l_0_7_373) l_0_7_391)) (* (* 2.0 l_0_7_374) l_0_7_392))))
 (= (- ?x36598 (* (* 2.0 l_0_7_375) l_0_7_393)) 0.0))))))))))))))))
(assert
 (let ((?x33274 (* 2.0 l_0_7_226)))
 (let ((?x33800 (* ?x33274 l_0_7_262)))
 (let ((?x30531 (* 2.0 l_0_7_136)))
 (let ((?x35180 (* ?x30531 l_0_7_172)))
 (let ((?x36678 (- (- (* (* 2.0 l_0_7_127) l_0_7_91) ?x35180) (* (* 2.0 l_0_7_191) l_0_7_217))))
 (let ((?x36682 (- (- ?x36678 (* (* 2.0 l_0_7_192) l_0_7_218)) (* (* 2.0 l_0_7_193) l_0_7_219))))
 (let ((?x36686 (- (- ?x36682 (* (* 2.0 l_0_7_194) l_0_7_220)) (* (* 2.0 l_0_7_195) l_0_7_221))))
 (let ((?x36691 (- (- (+ ?x36686 ?x33800) (* (* 2.0 l_0_7_281) l_0_7_307)) (* (* 2.0 l_0_7_282) l_0_7_308))))
 (let ((?x36695 (- (- ?x36691 (* (* 2.0 l_0_7_283) l_0_7_309)) (* (* 2.0 l_0_7_284) l_0_7_310))))
 (let ((?x36699 (- (- ?x36695 (* (* 2.0 l_0_7_285) l_0_7_311)) (* (* 2.0 l_0_7_326) l_0_7_352))))
 (let ((?x36703 (- (- ?x36699 (* (* 2.0 l_0_7_327) l_0_7_353)) (* (* 2.0 l_0_7_328) l_0_7_354))))
 (let ((?x36707 (- (- ?x36703 (* (* 2.0 l_0_7_329) l_0_7_355)) (* (* 2.0 l_0_7_330) l_0_7_356))))
 (let ((?x36711 (- (- ?x36707 (* (* 2.0 l_0_7_371) l_0_7_397)) (* (* 2.0 l_0_7_372) l_0_7_398))))
 (let ((?x36715 (- (- ?x36711 (* (* 2.0 l_0_7_373) l_0_7_399)) (* (* 2.0 l_0_7_374) l_0_7_400))))
 (= (- ?x36715 (* (* 2.0 l_0_7_375) l_0_7_401)) 0.0))))))))))))))))
(assert
 (let ((?x35198 (* l_0_7_93 l_0_7_93)))
 (let ((?x35196 (* l_0_7_92 l_0_7_92)))
 (let ((?x33875 (* l_0_7_228 l_0_7_228)))
 (let ((?x33873 (* l_0_7_227 l_0_7_227)))
 (let ((?x25157 (+ (- (* (- l_0_7_137) l_0_7_137) (* l_0_7_138 l_0_7_138)) ?x33873)))
 (= (+ (+ (+ ?x25157 ?x33875) ?x35196) ?x35198) 0.0)))))))
(assert
 (let ((?x32944 (* 2.0 l_0_7_93)))
 (let ((?x32945 (* ?x32944 l_0_7_98)))
 (let ((?x32941 (* 2.0 l_0_7_92)))
 (let ((?x32942 (* ?x32941 l_0_7_97)))
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33921 (* ?x33891 l_0_7_233)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33919 (* ?x20219 l_0_7_232)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x19150 (* ?x30805 l_0_7_143)))
 (let ((?x36782 (+ (+ (+ (- (* (* (- 2.0) l_0_7_137) l_0_7_142) ?x19150) ?x33919) ?x33921) ?x32942)))
 (= (+ ?x36782 ?x32945) 0.0)))))))))))))
(assert
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33944 (* ?x33891 l_0_7_237)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33941 (* ?x20219 l_0_7_236)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35220 (* ?x30805 l_0_7_147)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35218 (* ?x30802 l_0_7_146)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35216 (* ?x30949 l_0_7_93)))
 (let ((?x36791 (+ (- (- (+ (* (* 2.0 l_0_7_101) l_0_7_92) ?x35216) ?x35218) ?x35220) ?x33941)))
 (= (+ ?x36791 ?x33944) 0.0)))))))))))))
(assert
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x33983 (* ?x33891 l_0_7_242)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x33977 (* ?x20219 l_0_7_241)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x30806 (* ?x30805 l_0_7_152)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x30803 (* ?x30802 l_0_7_151)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30796 (* ?x30680 l_0_7_93)))
 (let ((?x36799 (+ (- (- (+ (* (* 2.0 l_0_7_106) l_0_7_92) ?x30796) ?x30803) ?x30806) ?x33977)))
 (= (+ ?x36799 ?x33983) 0.0)))))))))))))
(assert
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34000 (* ?x33891 l_0_7_248)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x20292 (* ?x20219 l_0_7_247)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35245 (* ?x30805 l_0_7_158)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35243 (* ?x30802 l_0_7_157)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35241 (* ?x32776 l_0_7_93)))
 (let ((?x36809 (+ (- (- (+ (* (* 2.0 l_0_7_112) l_0_7_92) ?x35241) ?x35243) ?x35245) ?x20292)))
 (= (+ ?x36809 ?x34000) 0.0)))))))))))))
(assert
 (let ((?x33891 (* 2.0 l_0_7_228)))
 (let ((?x34053 (* ?x33891 l_0_7_263)))
 (let ((?x20219 (* 2.0 l_0_7_227)))
 (let ((?x20327 (* ?x20219 l_0_7_262)))
 (let ((?x30805 (* 2.0 l_0_7_138)))
 (let ((?x35307 (* ?x30805 l_0_7_173)))
 (let ((?x30802 (* 2.0 l_0_7_137)))
 (let ((?x35305 (* ?x30802 l_0_7_172)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x22967 (* ?x33216 l_0_7_93)))
 (let ((?x25225 (+ (- (- (+ (* (* 2.0 l_0_7_127) l_0_7_92) ?x22967) ?x35305) ?x35307) ?x20327)))
 (= (+ ?x25225 ?x34053) 0.0)))))))))))))
(assert
 (let ((?x33039 (* l_0_7_99 l_0_7_99)))
 (let ((?x33037 (* l_0_7_98 l_0_7_98)))
 (let ((?x33035 (* l_0_7_97 l_0_7_97)))
 (let ((?x34313 (* l_0_7_235 l_0_7_235)))
 (let ((?x20512 (* l_0_7_234 l_0_7_234)))
 (let ((?x20527 (* l_0_7_233 l_0_7_233)))
 (let ((?x20529 (* l_0_7_232 l_0_7_232)))
 (let ((?x33026 (* l_0_7_145 l_0_7_145)))
 (let ((?x33024 (* l_0_7_144 l_0_7_144)))
 (let ((?x33022 (* l_0_7_143 l_0_7_143)))
 (let ((?x7573 (- (- (- (* l_0_7_100 l_0_7_100) (* l_0_7_142 l_0_7_142)) ?x33022) ?x33024)))
 (let ((?x36822 (+ (+ (+ (+ (+ (+ (- ?x7573 ?x33026) ?x20529) ?x20527) ?x20512) ?x34313) ?x33035) ?x33037)))
 (= (+ ?x36822 ?x33039) 0.0))))))))))))))
(assert
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x34345 (* ?x32719 l_0_7_239)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x34343 (* ?x32716 l_0_7_238)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x34341 (* ?x32713 l_0_7_237)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x34339 (* ?x32710 l_0_7_236)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33085 (* ?x30909 l_0_7_149)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33083 (* ?x30906 l_0_7_148)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33081 (* ?x30903 l_0_7_147)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33079 (* ?x30900 l_0_7_146)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x33072 (* ?x30961 l_0_7_99)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x33070 (* ?x30949 l_0_7_98)))
 (let ((?x19277 (* 2.0 l_0_7_101)))
 (let ((?x19278 (* ?x19277 l_0_7_97)))
 (let ((?x36831 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_104) ?x19278) ?x33070) ?x33072) ?x33079)))
 (let ((?x36838 (+ (+ (+ (+ (- (- (- ?x36831 ?x33081) ?x33083) ?x33085) ?x34339) ?x34341) ?x34343) ?x34345)))
 (= ?x36838 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20715 (* ?x32719 l_0_7_244)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20761 (* ?x32716 l_0_7_243)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20769 (* ?x32713 l_0_7_242)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20770 (* ?x32710 l_0_7_241)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x30910 (* ?x30909 l_0_7_154)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x30907 (* ?x30906 l_0_7_153)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x30904 (* ?x30903 l_0_7_152)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x30901 (* ?x30900 l_0_7_151)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x30898 (* ?x30683 l_0_7_99)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x30896 (* ?x30680 l_0_7_98)))
 (let ((?x30528 (* 2.0 l_0_7_106)))
 (let ((?x30886 (* ?x30528 l_0_7_97)))
 (let ((?x36847 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_109) ?x30886) ?x30896) ?x30898) ?x30901)))
 (let ((?x36854 (+ (+ (+ (+ (- (- (- ?x36847 ?x30904) ?x30907) ?x30910) ?x20770) ?x20769) ?x20761) ?x20715)))
 (= ?x36854 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20833 (* ?x32719 l_0_7_257)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20826 (* ?x32716 l_0_7_256)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20814 (* ?x32713 l_0_7_255)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20802 (* ?x32710 l_0_7_254)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33174 (* ?x30909 l_0_7_167)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33172 (* ?x30906 l_0_7_166)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33170 (* ?x30903 l_0_7_165)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33168 (* ?x30900 l_0_7_164)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x33166 (* ?x33156 l_0_7_99)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x19428 (* ?x19427 l_0_7_98)))
 (let ((?x19433 (* 2.0 l_0_7_119)))
 (let ((?x19434 (* ?x19433 l_0_7_97)))
 (let ((?x25283 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_122) ?x19434) ?x19428) ?x33166) ?x33168)))
 (let ((?x7640 (+ (+ (+ (+ (- (- (- ?x25283 ?x33170) ?x33172) ?x33174) ?x20802) ?x20814) ?x20826) ?x20833)))
 (= ?x7640 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32719 (* 2.0 l_0_7_235)))
 (let ((?x20894 (* ?x32719 l_0_7_265)))
 (let ((?x32716 (* 2.0 l_0_7_234)))
 (let ((?x20890 (* ?x32716 l_0_7_264)))
 (let ((?x32713 (* 2.0 l_0_7_233)))
 (let ((?x20895 (* ?x32713 l_0_7_263)))
 (let ((?x32710 (* 2.0 l_0_7_232)))
 (let ((?x20945 (* ?x32710 l_0_7_262)))
 (let ((?x30909 (* 2.0 l_0_7_145)))
 (let ((?x33228 (* ?x30909 l_0_7_175)))
 (let ((?x30906 (* 2.0 l_0_7_144)))
 (let ((?x33226 (* ?x30906 l_0_7_174)))
 (let ((?x30903 (* 2.0 l_0_7_143)))
 (let ((?x33224 (* ?x30903 l_0_7_173)))
 (let ((?x30900 (* 2.0 l_0_7_142)))
 (let ((?x33222 (* ?x30900 l_0_7_172)))
 (let ((?x33219 (* 2.0 l_0_7_129)))
 (let ((?x33220 (* ?x33219 l_0_7_99)))
 (let ((?x33216 (* 2.0 l_0_7_128)))
 (let ((?x33217 (* ?x33216 l_0_7_98)))
 (let ((?x33213 (* 2.0 l_0_7_127)))
 (let ((?x33214 (* ?x33213 l_0_7_97)))
 (let ((?x25342 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_130) ?x33214) ?x33217) ?x33220) ?x33222)))
 (let ((?x36858 (+ (+ (+ (+ (- (- (- ?x25342 ?x33224) ?x33226) ?x33228) ?x20945) ?x20895) ?x20890) ?x20894)))
 (= ?x36858 0.0))))))))))))))))))))))))))
(assert
 (let ((?x34437 (* l_0_7_240 l_0_7_240)))
 (let ((?x34435 (* l_0_7_239 l_0_7_239)))
 (let ((?x34433 (* l_0_7_238 l_0_7_238)))
 (let ((?x34431 (* l_0_7_237 l_0_7_237)))
 (let ((?x34429 (* l_0_7_236 l_0_7_236)))
 (let ((?x35421 (* l_0_7_150 l_0_7_150)))
 (let ((?x35419 (* l_0_7_149 l_0_7_149)))
 (let ((?x35417 (* l_0_7_148 l_0_7_148)))
 (let ((?x35415 (* l_0_7_147 l_0_7_147)))
 (let ((?x35413 (* l_0_7_146 l_0_7_146)))
 (let ((?x35411 (* l_0_7_105 l_0_7_105)))
 (let ((?x35409 (* l_0_7_104 l_0_7_104)))
 (let ((?x35407 (* l_0_7_103 l_0_7_103)))
 (let ((?x7740 (+ (+ (+ (* l_0_7_101 l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x35407) ?x35409)))
 (let ((?x25322 (+ (- (- (- (- (- (+ ?x7740 ?x35411) ?x35413) ?x35415) ?x35417) ?x35419) ?x35421) ?x34429)))
 (= (+ (+ (+ (+ ?x25322 ?x34431) ?x34433) ?x34435) ?x34437) 0.0)))))))))))))))))
(assert
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34494 (* ?x34493 l_0_7_245)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34491 (* ?x34490 l_0_7_244)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34488 (* ?x34487 l_0_7_243)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34485 (* ?x34484 l_0_7_242)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34482 (* ?x34481 l_0_7_241)))
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x30989 (* ?x30988 l_0_7_155)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x30986 (* ?x30985 l_0_7_154)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x30983 (* ?x30982 l_0_7_153)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x30980 (* ?x30979 l_0_7_152)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x30977 (* ?x30976 l_0_7_151)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x30968 (* ?x30967 l_0_7_110)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x30965 (* ?x30964 l_0_7_109)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x30962 (* ?x30961 l_0_7_108)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x30959 (* ?x30949 l_0_7_107)))
 (let ((?x36869 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_106) ?x30959) ?x30962) ?x30965) ?x30968)))
 (let ((?x36876 (+ (+ (- (- (- (- (- ?x36869 ?x30977) ?x30980) ?x30983) ?x30986) ?x30989) ?x34482) ?x34485)))
 (= (+ (+ (+ ?x36876 ?x34488) ?x34491) ?x34494) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34517 (* ?x34493 l_0_7_251)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34515 (* ?x34490 l_0_7_250)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34513 (* ?x34487 l_0_7_249)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34511 (* ?x34484 l_0_7_248)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34509 (* ?x34481 l_0_7_247)))
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35472 (* ?x30988 l_0_7_161)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35470 (* ?x30985 l_0_7_160)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35468 (* ?x30982 l_0_7_159)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35466 (* ?x30979 l_0_7_158)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35464 (* ?x30976 l_0_7_157)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35462 (* ?x30967 l_0_7_116)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35460 (* ?x30964 l_0_7_115)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35458 (* ?x30961 l_0_7_114)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35456 (* ?x30949 l_0_7_113)))
 (let ((?x25402 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_112) ?x35456) ?x35458) ?x35460) ?x35462)))
 (let ((?x7799 (+ (+ (- (- (- (- (- ?x25402 ?x35464) ?x35466) ?x35468) ?x35470) ?x35472) ?x34509) ?x34511)))
 (= (+ (+ (+ ?x7799 ?x34513) ?x34515) ?x34517) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34570 (* ?x34493 l_0_7_258)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34568 (* ?x34490 l_0_7_257)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34566 (* ?x34487 l_0_7_256)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34564 (* ?x34484 l_0_7_255)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34562 (* ?x34481 l_0_7_254)))
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35531 (* ?x30988 l_0_7_168)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35529 (* ?x30985 l_0_7_167)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35527 (* ?x30982 l_0_7_166)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35525 (* ?x30979 l_0_7_165)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35523 (* ?x30976 l_0_7_164)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35521 (* ?x30967 l_0_7_123)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35511 (* ?x30964 l_0_7_122)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35508 (* ?x30961 l_0_7_121)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35504 (* ?x30949 l_0_7_120)))
 (let ((?x36891 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_119) ?x35504) ?x35508) ?x35511) ?x35521)))
 (let ((?x36898 (+ (+ (- (- (- (- (- ?x36891 ?x35523) ?x35525) ?x35527) ?x35529) ?x35531) ?x34562) ?x34564)))
 (= (+ (+ (+ ?x36898 ?x34566) ?x34568) ?x34570) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34493 (* 2.0 l_0_7_240)))
 (let ((?x34608 (* ?x34493 l_0_7_266)))
 (let ((?x34490 (* 2.0 l_0_7_239)))
 (let ((?x34606 (* ?x34490 l_0_7_265)))
 (let ((?x34487 (* 2.0 l_0_7_238)))
 (let ((?x34604 (* ?x34487 l_0_7_264)))
 (let ((?x34484 (* 2.0 l_0_7_237)))
 (let ((?x34602 (* ?x34484 l_0_7_263)))
 (let ((?x34481 (* 2.0 l_0_7_236)))
 (let ((?x34600 (* ?x34481 l_0_7_262)))
 (let ((?x30988 (* 2.0 l_0_7_150)))
 (let ((?x35586 (* ?x30988 l_0_7_176)))
 (let ((?x30985 (* 2.0 l_0_7_149)))
 (let ((?x35584 (* ?x30985 l_0_7_175)))
 (let ((?x30982 (* 2.0 l_0_7_148)))
 (let ((?x35582 (* ?x30982 l_0_7_174)))
 (let ((?x30979 (* 2.0 l_0_7_147)))
 (let ((?x35580 (* ?x30979 l_0_7_173)))
 (let ((?x30976 (* 2.0 l_0_7_146)))
 (let ((?x35578 (* ?x30976 l_0_7_172)))
 (let ((?x30967 (* 2.0 l_0_7_105)))
 (let ((?x35576 (* ?x30967 l_0_7_131)))
 (let ((?x30964 (* 2.0 l_0_7_104)))
 (let ((?x35566 (* ?x30964 l_0_7_130)))
 (let ((?x30961 (* 2.0 l_0_7_103)))
 (let ((?x35563 (* ?x30961 l_0_7_129)))
 (let ((?x30949 (* 2.0 l_0_7_102)))
 (let ((?x35559 (* ?x30949 l_0_7_128)))
 (let ((?x7896 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_127) ?x35559) ?x35563) ?x35566) ?x35576)))
 (let ((?x7880 (+ (+ (- (- (- (- (- ?x7896 ?x35578) ?x35580) ?x35582) ?x35584) ?x35586) ?x34600) ?x34602)))
 (= (+ (+ (+ ?x7880 ?x34604) ?x34606) ?x34608) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x21648 (* l_0_7_246 l_0_7_246)))
 (let ((?x21653 (* l_0_7_245 l_0_7_245)))
 (let ((?x21641 (* l_0_7_244 l_0_7_244)))
 (let ((?x21629 (* l_0_7_243 l_0_7_243)))
 (let ((?x21617 (* l_0_7_242 l_0_7_242)))
 (let ((?x21605 (* l_0_7_241 l_0_7_241)))
 (let ((?x31055 (* l_0_7_156 l_0_7_156)))
 (let ((?x31053 (* l_0_7_155 l_0_7_155)))
 (let ((?x31051 (* l_0_7_154 l_0_7_154)))
 (let ((?x31049 (* l_0_7_153 l_0_7_153)))
 (let ((?x31047 (* l_0_7_152 l_0_7_152)))
 (let ((?x31045 (* l_0_7_151 l_0_7_151)))
 (let ((?x31043 (* l_0_7_111 l_0_7_111)))
 (let ((?x31041 (* l_0_7_110 l_0_7_110)))
 (let ((?x31029 (* l_0_7_109 l_0_7_109)))
 (let ((?x31025 (* l_0_7_108 l_0_7_108)))
 (let ((?x7963 (+ (+ (+ (* l_0_7_106 l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31025) ?x31029)))
 (let ((?x25488 (- (- (- (- (- (+ (+ ?x7963 ?x31041) ?x31043) ?x31045) ?x31047) ?x31049) ?x31051) ?x31053)))
 (let ((?x36908 (+ (+ (+ (+ (+ (+ (- ?x25488 ?x31055) ?x21605) ?x21617) ?x21629) ?x21641) ?x21653) ?x21648)))
 (= ?x36908 0.0)))))))))))))))))))))
(assert
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x34689 (* ?x30583 l_0_7_252)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x34687 (* ?x30580 l_0_7_251)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x34685 (* ?x30577 l_0_7_250)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x34683 (* ?x30574 l_0_7_249)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x34681 (* ?x30571 l_0_7_248)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x34679 (* ?x30568 l_0_7_247)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31114 (* ?x30710 l_0_7_162)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31112 (* ?x30707 l_0_7_161)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31110 (* ?x30704 l_0_7_160)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31108 (* ?x30701 l_0_7_159)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31106 (* ?x30698 l_0_7_158)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31104 (* ?x30695 l_0_7_157)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31102 (* ?x30692 l_0_7_117)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31100 (* ?x30689 l_0_7_116)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31098 (* ?x30686 l_0_7_115)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31096 (* ?x30683 l_0_7_114)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31084 (* ?x30680 l_0_7_113)))
 (let ((?x25562 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_112) ?x31084) ?x31096) ?x31098) ?x31100)))
 (let ((?x36920 (- (- (- (- (- (- (+ ?x25562 ?x31102) ?x31104) ?x31106) ?x31108) ?x31110) ?x31112) ?x31114)))
 (= (+ (+ (+ (+ (+ (+ ?x36920 ?x34679) ?x34681) ?x34683) ?x34685) ?x34687) ?x34689) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30583 (* 2.0 l_0_7_246)))
 (let ((?x34701 (* ?x30583 l_0_7_267)))
 (let ((?x30580 (* 2.0 l_0_7_245)))
 (let ((?x34699 (* ?x30580 l_0_7_266)))
 (let ((?x30577 (* 2.0 l_0_7_244)))
 (let ((?x21761 (* ?x30577 l_0_7_265)))
 (let ((?x30574 (* 2.0 l_0_7_243)))
 (let ((?x21762 (* ?x30574 l_0_7_264)))
 (let ((?x30571 (* 2.0 l_0_7_242)))
 (let ((?x21729 (* ?x30571 l_0_7_263)))
 (let ((?x30568 (* 2.0 l_0_7_241)))
 (let ((?x21721 (* ?x30568 l_0_7_262)))
 (let ((?x30710 (* 2.0 l_0_7_156)))
 (let ((?x31238 (* ?x30710 l_0_7_177)))
 (let ((?x30707 (* 2.0 l_0_7_155)))
 (let ((?x31236 (* ?x30707 l_0_7_176)))
 (let ((?x30704 (* 2.0 l_0_7_154)))
 (let ((?x31234 (* ?x30704 l_0_7_175)))
 (let ((?x30701 (* 2.0 l_0_7_153)))
 (let ((?x31232 (* ?x30701 l_0_7_174)))
 (let ((?x30698 (* 2.0 l_0_7_152)))
 (let ((?x31230 (* ?x30698 l_0_7_173)))
 (let ((?x30695 (* 2.0 l_0_7_151)))
 (let ((?x31228 (* ?x30695 l_0_7_172)))
 (let ((?x30692 (* 2.0 l_0_7_111)))
 (let ((?x31226 (* ?x30692 l_0_7_132)))
 (let ((?x30689 (* 2.0 l_0_7_110)))
 (let ((?x31224 (* ?x30689 l_0_7_131)))
 (let ((?x30686 (* 2.0 l_0_7_109)))
 (let ((?x31222 (* ?x30686 l_0_7_130)))
 (let ((?x30683 (* 2.0 l_0_7_108)))
 (let ((?x31220 (* ?x30683 l_0_7_129)))
 (let ((?x30680 (* 2.0 l_0_7_107)))
 (let ((?x31218 (* ?x30680 l_0_7_128)))
 (let ((?x25622 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_127) ?x31218) ?x31220) ?x31222) ?x31224)))
 (let ((?x25604 (- (- (- (- (- (- (+ ?x25622 ?x31226) ?x31228) ?x31230) ?x31232) ?x31234) ?x31236) ?x31238)))
 (= (+ (+ (+ (+ (+ (+ ?x25604 ?x21721) ?x21729) ?x21762) ?x21761) ?x34699) ?x34701) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34757 (* l_0_7_253 l_0_7_253)))
 (let ((?x34755 (* l_0_7_252 l_0_7_252)))
 (let ((?x34753 (* l_0_7_251 l_0_7_251)))
 (let ((?x34751 (* l_0_7_250 l_0_7_250)))
 (let ((?x34748 (* l_0_7_249 l_0_7_249)))
 (let ((?x34746 (* l_0_7_248 l_0_7_248)))
 (let ((?x34744 (* l_0_7_247 l_0_7_247)))
 (let ((?x35660 (* l_0_7_163 l_0_7_163)))
 (let ((?x35658 (* l_0_7_162 l_0_7_162)))
 (let ((?x35656 (* l_0_7_161 l_0_7_161)))
 (let ((?x35654 (* l_0_7_160 l_0_7_160)))
 (let ((?x35652 (* l_0_7_159 l_0_7_159)))
 (let ((?x35650 (* l_0_7_158 l_0_7_158)))
 (let ((?x35648 (* l_0_7_157 l_0_7_157)))
 (let ((?x35646 (* l_0_7_118 l_0_7_118)))
 (let ((?x35644 (* l_0_7_117 l_0_7_117)))
 (let ((?x35642 (* l_0_7_116 l_0_7_116)))
 (let ((?x35640 (* l_0_7_115 l_0_7_115)))
 (let ((?x35638 (* l_0_7_114 l_0_7_114)))
 (let ((?x8076 (+ (+ (+ (* l_0_7_112 l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35638) ?x35640)))
 (let ((?x25664 (- (- (- (- (+ (+ (+ ?x8076 ?x35642) ?x35644) ?x35646) ?x35648) ?x35650) ?x35652) ?x35654)))
 (let ((?x25646 (+ (+ (+ (+ (- (- (- ?x25664 ?x35656) ?x35658) ?x35660) ?x34744) ?x34746) ?x34748) ?x34751)))
 (= (+ (+ (+ ?x25646 ?x34753) ?x34755) ?x34757) 0.0))))))))))))))))))))))))
(assert
 (let ((?x34794 (* 2.0 l_0_7_253)))
 (let ((?x34795 (* ?x34794 l_0_7_260)))
 (let ((?x22084 (* 2.0 l_0_7_252)))
 (let ((?x22087 (* ?x22084 l_0_7_259)))
 (let ((?x22093 (* 2.0 l_0_7_251)))
 (let ((?x22091 (* ?x22093 l_0_7_258)))
 (let ((?x22077 (* 2.0 l_0_7_250)))
 (let ((?x22083 (* ?x22077 l_0_7_257)))
 (let ((?x22053 (* 2.0 l_0_7_249)))
 (let ((?x22059 (* ?x22053 l_0_7_256)))
 (let ((?x22035 (* 2.0 l_0_7_248)))
 (let ((?x22041 (* ?x22035 l_0_7_255)))
 (let ((?x22017 (* 2.0 l_0_7_247)))
 (let ((?x22023 (* ?x22017 l_0_7_254)))
 (let ((?x35106 (* 2.0 l_0_7_163)))
 (let ((?x35716 (* ?x35106 l_0_7_170)))
 (let ((?x35103 (* 2.0 l_0_7_162)))
 (let ((?x35714 (* ?x35103 l_0_7_169)))
 (let ((?x35100 (* 2.0 l_0_7_161)))
 (let ((?x35712 (* ?x35100 l_0_7_168)))
 (let ((?x35097 (* 2.0 l_0_7_160)))
 (let ((?x35710 (* ?x35097 l_0_7_167)))
 (let ((?x35094 (* 2.0 l_0_7_159)))
 (let ((?x35708 (* ?x35094 l_0_7_166)))
 (let ((?x35091 (* 2.0 l_0_7_158)))
 (let ((?x35706 (* ?x35091 l_0_7_165)))
 (let ((?x35088 (* 2.0 l_0_7_157)))
 (let ((?x35704 (* ?x35088 l_0_7_164)))
 (let ((?x35083 (* 2.0 l_0_7_118)))
 (let ((?x35702 (* ?x35083 l_0_7_125)))
 (let ((?x35080 (* 2.0 l_0_7_117)))
 (let ((?x35700 (* ?x35080 l_0_7_124)))
 (let ((?x35077 (* 2.0 l_0_7_116)))
 (let ((?x35698 (* ?x35077 l_0_7_123)))
 (let ((?x35074 (* 2.0 l_0_7_115)))
 (let ((?x35696 (* ?x35074 l_0_7_122)))
 (let ((?x32779 (* 2.0 l_0_7_114)))
 (let ((?x35694 (* ?x32779 l_0_7_121)))
 (let ((?x32776 (* 2.0 l_0_7_113)))
 (let ((?x35692 (* ?x32776 l_0_7_120)))
 (let ((?x25694 (+ (+ (+ (+ (* (* 2.0 l_0_7_112) l_0_7_119) ?x35692) ?x35694) ?x35696) ?x35698)))
 (let ((?x36950 (- (- (- (- (- (+ (+ ?x25694 ?x35700) ?x35702) ?x35704) ?x35706) ?x35708) ?x35710) ?x35712)))
 (let ((?x36957 (+ (+ (+ (+ (+ (- (- ?x36950 ?x35714) ?x35716) ?x22023) ?x22041) ?x22059) ?x22083) ?x22091)))
 (= (+ (+ ?x36957 ?x22087) ?x34795) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22338 (* l_0_7_261 l_0_7_261)))
 (let ((?x22326 (* l_0_7_260 l_0_7_260)))
 (let ((?x22314 (* l_0_7_259 l_0_7_259)))
 (let ((?x22302 (* l_0_7_258 l_0_7_258)))
 (let ((?x22290 (* l_0_7_257 l_0_7_257)))
 (let ((?x22278 (* l_0_7_256 l_0_7_256)))
 (let ((?x22266 (* l_0_7_255 l_0_7_255)))
 (let ((?x34904 (* l_0_7_254 l_0_7_254)))
 (let ((?x35795 (* l_0_7_171 l_0_7_171)))
 (let ((?x35793 (* l_0_7_170 l_0_7_170)))
 (let ((?x35791 (* l_0_7_169 l_0_7_169)))
 (let ((?x35789 (* l_0_7_168 l_0_7_168)))
 (let ((?x35787 (* l_0_7_167 l_0_7_167)))
 (let ((?x35785 (* l_0_7_166 l_0_7_166)))
 (let ((?x35783 (* l_0_7_165 l_0_7_165)))
 (let ((?x35781 (* l_0_7_164 l_0_7_164)))
 (let ((?x35779 (* l_0_7_126 l_0_7_126)))
 (let ((?x35777 (* l_0_7_125 l_0_7_125)))
 (let ((?x35775 (* l_0_7_124 l_0_7_124)))
 (let ((?x35773 (* l_0_7_123 l_0_7_123)))
 (let ((?x35771 (* l_0_7_122 l_0_7_122)))
 (let ((?x35769 (* l_0_7_121 l_0_7_121)))
 (let ((?x8125 (+ (+ (+ (* l_0_7_119 l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35769) ?x35771)))
 (let ((?x8110 (- (- (- (+ (+ (+ (+ ?x8125 ?x35773) ?x35775) ?x35777) ?x35779) ?x35781) ?x35783) ?x35785)))
 (let ((?x25719 (+ (+ (- (- (- (- (- ?x8110 ?x35787) ?x35789) ?x35791) ?x35793) ?x35795) ?x34904) ?x22266)))
 (= (+ (+ (+ (+ (+ (+ ?x25719 ?x22278) ?x22290) ?x22302) ?x22314) ?x22326) ?x22338) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x34949 (* (* 2.0 l_0_7_261) l_0_7_269)))
 (let ((?x34946 (* (* 2.0 l_0_7_260) l_0_7_268)))
 (let ((?x34943 (* (* 2.0 l_0_7_259) l_0_7_267)))
 (let ((?x34940 (* (* 2.0 l_0_7_258) l_0_7_266)))
 (let ((?x34937 (* (* 2.0 l_0_7_257) l_0_7_265)))
 (let ((?x34934 (* (* 2.0 l_0_7_256) l_0_7_264)))
 (let ((?x34931 (* (* 2.0 l_0_7_255) l_0_7_263)))
 (let ((?x35874 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35871 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35868 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35865 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35862 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35859 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35856 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35853 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35850 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35847 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35844 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35841 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35838 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x33156 (* 2.0 l_0_7_121)))
 (let ((?x35835 (* ?x33156 l_0_7_129)))
 (let ((?x19427 (* 2.0 l_0_7_120)))
 (let ((?x35833 (* ?x19427 l_0_7_128)))
 (let ((?x8152 (+ (+ (+ (+ (* (* 2.0 l_0_7_119) l_0_7_127) ?x35833) ?x35835) ?x35838) ?x35841)))
 (let ((?x36981 (- (- (- (- (+ (+ (+ ?x8152 ?x35844) ?x35847) ?x35850) ?x35853) ?x35856) ?x35859) ?x35862)))
 (let ((?x36988 (+ (- (- (- (- ?x36981 ?x35865) ?x35868) ?x35871) ?x35874) (* (* 2.0 l_0_7_254) l_0_7_262))))
 (let ((?x36995 (+ (+ (+ (+ (+ (+ (+ ?x36988 ?x34931) ?x34934) ?x34937) ?x34940) ?x34943) ?x34946) ?x34949)))
 (= ?x36995 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35007 (* l_0_7_270 l_0_7_270)))
 (let ((?x35005 (* l_0_7_269 l_0_7_269)))
 (let ((?x35003 (* l_0_7_268 l_0_7_268)))
 (let ((?x3589 (* l_0_7_267 l_0_7_267)))
 (let ((?x3591 (* l_0_7_266 l_0_7_266)))
 (let ((?x22437 (* l_0_7_265 l_0_7_265)))
 (let ((?x22453 (* l_0_7_264 l_0_7_264)))
 (let ((?x3485 (* l_0_7_263 l_0_7_263)))
 (let ((?x35029 (* l_0_7_262 l_0_7_262)))
 (let ((?x35971 (* l_0_7_180 l_0_7_180)))
 (let ((?x35969 (* l_0_7_179 l_0_7_179)))
 (let ((?x35967 (* l_0_7_178 l_0_7_178)))
 (let ((?x35965 (* l_0_7_177 l_0_7_177)))
 (let ((?x35963 (* l_0_7_176 l_0_7_176)))
 (let ((?x35961 (* l_0_7_175 l_0_7_175)))
 (let ((?x35959 (* l_0_7_174 l_0_7_174)))
 (let ((?x35957 (* l_0_7_173 l_0_7_173)))
 (let ((?x35955 (* l_0_7_172 l_0_7_172)))
 (let ((?x35953 (* l_0_7_135 l_0_7_135)))
 (let ((?x35951 (* l_0_7_134 l_0_7_134)))
 (let ((?x35949 (* l_0_7_133 l_0_7_133)))
 (let ((?x35947 (* l_0_7_132 l_0_7_132)))
 (let ((?x35934 (* l_0_7_131 l_0_7_131)))
 (let ((?x35931 (* l_0_7_130 l_0_7_130)))
 (let ((?x35927 (* l_0_7_129 l_0_7_129)))
 (let ((?x8226 (+ (+ (+ (* l_0_7_127 l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35927) ?x35931)))
 (let ((?x8221 (- (- (+ (+ (+ (+ (+ ?x8226 ?x35934) ?x35947) ?x35949) ?x35951) ?x35953) ?x35955) ?x35957)))
 (let ((?x37002 (- (- (- (- (- (- (- ?x8221 ?x35959) ?x35961) ?x35963) ?x35965) ?x35967) ?x35969) ?x35971)))
 (let ((?x37009 (+ (+ (+ (+ (+ (+ (+ ?x37002 ?x35029) ?x3485) ?x22453) ?x22437) ?x3591) ?x3589) ?x35003)))
 (= (+ (+ ?x37009 ?x35005) ?x35007) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x37027 (* l_0_7_361 l_0_7_361)))
 (let ((?x25880 (* l_0_7_316 l_0_7_316)))
 (let ((?x25881 (- (- (* (* (- 1.0) l_0_7_181) l_0_7_181) (* l_0_7_271 l_0_7_271)) ?x25880)))
 (= (- ?x25881 ?x37027) 0.0)))))
(assert
 (let ((?x8265 (- (* (* (- 2.0) l_0_7_181) l_0_7_182) (* (* 2.0 l_0_7_271) l_0_7_272))))
 (let ((?x37043 (- (- ?x8265 (* (* 2.0 l_0_7_316) l_0_7_317)) (* (* 2.0 l_0_7_361) l_0_7_362))))
 (= ?x37043 0.0))))
(assert
 (let ((?x37064 (- (* (* (- 2.0) l_0_7_181) l_0_7_187) (* (* 2.0 l_0_7_271) l_0_7_277))))
 (let ((?x37068 (- (- ?x37064 (* (* 2.0 l_0_7_316) l_0_7_322)) (* (* 2.0 l_0_7_361) l_0_7_367))))
 (= ?x37068 0.0))))
(assert
 (let ((?x8273 (- (* (* (- 2.0) l_0_7_181) l_0_7_196) (* (* 2.0 l_0_7_271) l_0_7_286))))
 (let ((?x37085 (- (- ?x8273 (* (* 2.0 l_0_7_316) l_0_7_331)) (* (* 2.0 l_0_7_361) l_0_7_376))))
 (= ?x37085 0.0))))
(assert
 (let ((?x37102 (- (* (* (- 2.0) l_0_7_181) l_0_7_202) (* (* 2.0 l_0_7_271) l_0_7_292))))
 (let ((?x37106 (- (- ?x37102 (* (* 2.0 l_0_7_316) l_0_7_337)) (* (* 2.0 l_0_7_361) l_0_7_382))))
 (= ?x37106 0.0))))
(assert
 (let ((?x37117 (- (* (* (- 2.0) l_0_7_181) l_0_7_209) (* (* 2.0 l_0_7_271) l_0_7_299))))
 (let ((?x37121 (- (- ?x37117 (* (* 2.0 l_0_7_316) l_0_7_344)) (* (* 2.0 l_0_7_361) l_0_7_389))))
 (= ?x37121 0.0))))
(assert
 (let ((?x37141 (- (* (* (- 2.0) l_0_7_181) l_0_7_217) (* (* 2.0 l_0_7_271) l_0_7_307))))
 (let ((?x37145 (- (- ?x37141 (* (* 2.0 l_0_7_316) l_0_7_352)) (* (* 2.0 l_0_7_361) l_0_7_397))))
 (= ?x37145 0.0))))
(assert
 (let ((?x37176 (* l_0_7_363 l_0_7_363)))
 (let ((?x37174 (* l_0_7_362 l_0_7_362)))
 (let ((?x37172 (* l_0_7_318 l_0_7_318)))
 (let ((?x37170 (* l_0_7_317 l_0_7_317)))
 (let ((?x37168 (* l_0_7_273 l_0_7_273)))
 (let ((?x37166 (* l_0_7_272 l_0_7_272)))
 (let ((?x37165 (- (* (* (- 1.0) l_0_7_182) l_0_7_182) (* (* 1.0 l_0_7_183) l_0_7_183))))
 (= (- (- (- (- (- (- ?x37165 ?x37166) ?x37168) ?x37170) ?x37172) ?x37174) ?x37176) 0.0)))))))))
(assert
 (let ((?x37199 (- (* (* (- 2.0) l_0_7_182) l_0_7_187) (* (* 2.0 l_0_7_183) l_0_7_188))))
 (let ((?x37203 (- (- ?x37199 (* (* 2.0 l_0_7_272) l_0_7_277)) (* (* 2.0 l_0_7_273) l_0_7_278))))
 (let ((?x37207 (- (- ?x37203 (* (* 2.0 l_0_7_317) l_0_7_322)) (* (* 2.0 l_0_7_318) l_0_7_323))))
 (let ((?x37211 (- (- ?x37207 (* (* 2.0 l_0_7_362) l_0_7_367)) (* (* 2.0 l_0_7_363) l_0_7_368))))
 (= ?x37211 0.0))))))
(assert
 (let ((?x37241 (- (* (* (- 2.0) l_0_7_182) l_0_7_196) (* (* 2.0 l_0_7_183) l_0_7_197))))
 (let ((?x37245 (- (- ?x37241 (* (* 2.0 l_0_7_272) l_0_7_286)) (* (* 2.0 l_0_7_273) l_0_7_287))))
 (let ((?x37249 (- (- ?x37245 (* (* 2.0 l_0_7_317) l_0_7_331)) (* (* 2.0 l_0_7_318) l_0_7_332))))
 (let ((?x37253 (- (- ?x37249 (* (* 2.0 l_0_7_362) l_0_7_376)) (* (* 2.0 l_0_7_363) l_0_7_377))))
 (= ?x37253 0.0))))))
(assert
 (let ((?x37283 (- (* (* (- 2.0) l_0_7_182) l_0_7_202) (* (* 2.0 l_0_7_183) l_0_7_203))))
 (let ((?x37287 (- (- ?x37283 (* (* 2.0 l_0_7_272) l_0_7_292)) (* (* 2.0 l_0_7_273) l_0_7_293))))
 (let ((?x37291 (- (- ?x37287 (* (* 2.0 l_0_7_317) l_0_7_337)) (* (* 2.0 l_0_7_318) l_0_7_338))))
 (let ((?x37295 (- (- ?x37291 (* (* 2.0 l_0_7_362) l_0_7_382)) (* (* 2.0 l_0_7_363) l_0_7_383))))
 (= ?x37295 0.0))))))
(assert
 (let ((?x37327 (- (* (* (- 2.0) l_0_7_182) l_0_7_217) (* (* 2.0 l_0_7_183) l_0_7_218))))
 (let ((?x37331 (- (- ?x37327 (* (* 2.0 l_0_7_272) l_0_7_307)) (* (* 2.0 l_0_7_273) l_0_7_308))))
 (let ((?x37335 (- (- ?x37331 (* (* 2.0 l_0_7_317) l_0_7_352)) (* (* 2.0 l_0_7_318) l_0_7_353))))
 (let ((?x37339 (- (- ?x37335 (* (* 2.0 l_0_7_362) l_0_7_397)) (* (* 2.0 l_0_7_363) l_0_7_398))))
 (= ?x37339 0.0))))))
(assert
 (let ((?x37399 (* l_0_7_370 l_0_7_370)))
 (let ((?x37397 (* l_0_7_369 l_0_7_369)))
 (let ((?x37395 (* l_0_7_368 l_0_7_368)))
 (let ((?x37393 (* l_0_7_367 l_0_7_367)))
 (let ((?x37391 (* l_0_7_325 l_0_7_325)))
 (let ((?x37389 (* l_0_7_324 l_0_7_324)))
 (let ((?x37387 (* l_0_7_323 l_0_7_323)))
 (let ((?x37385 (* l_0_7_322 l_0_7_322)))
 (let ((?x37383 (* l_0_7_280 l_0_7_280)))
 (let ((?x37381 (* l_0_7_279 l_0_7_279)))
 (let ((?x37379 (* l_0_7_278 l_0_7_278)))
 (let ((?x37377 (* l_0_7_277 l_0_7_277)))
 (let ((?x37370 (- (* (* (- 1.0) l_0_7_187) l_0_7_187) (* (* 1.0 l_0_7_188) l_0_7_188))))
 (let ((?x37376 (- (- ?x37370 (* (* 1.0 l_0_7_189) l_0_7_189)) (* (* 1.0 l_0_7_190) l_0_7_190))))
 (let ((?x37390 (- (- (- (- (- (- (- ?x37376 ?x37377) ?x37379) ?x37381) ?x37383) ?x37385) ?x37387) ?x37389)))
 (= (- (- (- (- (- ?x37390 ?x37391) ?x37393) ?x37395) ?x37397) ?x37399) 0.0)))))))))))))))))
(assert
 (let ((?x37433 (- (* (* (- 2.0) l_0_7_187) l_0_7_196) (* (* 2.0 l_0_7_188) l_0_7_197))))
 (let ((?x37437 (- (- ?x37433 (* (* 2.0 l_0_7_189) l_0_7_198)) (* (* 2.0 l_0_7_190) l_0_7_199))))
 (let ((?x37441 (- (- ?x37437 (* (* 2.0 l_0_7_277) l_0_7_286)) (* (* 2.0 l_0_7_278) l_0_7_287))))
 (let ((?x37445 (- (- ?x37441 (* (* 2.0 l_0_7_279) l_0_7_288)) (* (* 2.0 l_0_7_280) l_0_7_289))))
 (let ((?x37449 (- (- ?x37445 (* (* 2.0 l_0_7_322) l_0_7_331)) (* (* 2.0 l_0_7_323) l_0_7_332))))
 (let ((?x37453 (- (- ?x37449 (* (* 2.0 l_0_7_324) l_0_7_333)) (* (* 2.0 l_0_7_325) l_0_7_334))))
 (let ((?x37457 (- (- ?x37453 (* (* 2.0 l_0_7_367) l_0_7_376)) (* (* 2.0 l_0_7_368) l_0_7_377))))
 (let ((?x37461 (- (- ?x37457 (* (* 2.0 l_0_7_369) l_0_7_378)) (* (* 2.0 l_0_7_370) l_0_7_379))))
 (= ?x37461 0.0))))))))))
(assert
 (let ((?x37529 (- (* (* (- 2.0) l_0_7_187) l_0_7_209) (* (* 2.0 l_0_7_188) l_0_7_210))))
 (let ((?x37533 (- (- ?x37529 (* (* 2.0 l_0_7_189) l_0_7_211)) (* (* 2.0 l_0_7_190) l_0_7_212))))
 (let ((?x37537 (- (- ?x37533 (* (* 2.0 l_0_7_277) l_0_7_299)) (* (* 2.0 l_0_7_278) l_0_7_300))))
 (let ((?x37541 (- (- ?x37537 (* (* 2.0 l_0_7_279) l_0_7_301)) (* (* 2.0 l_0_7_280) l_0_7_302))))
 (let ((?x37545 (- (- ?x37541 (* (* 2.0 l_0_7_322) l_0_7_344)) (* (* 2.0 l_0_7_323) l_0_7_345))))
 (let ((?x37549 (- (- ?x37545 (* (* 2.0 l_0_7_324) l_0_7_346)) (* (* 2.0 l_0_7_325) l_0_7_347))))
 (let ((?x37553 (- (- ?x37549 (* (* 2.0 l_0_7_367) l_0_7_389)) (* (* 2.0 l_0_7_368) l_0_7_390))))
 (let ((?x37557 (- (- ?x37553 (* (* 2.0 l_0_7_369) l_0_7_391)) (* (* 2.0 l_0_7_370) l_0_7_392))))
 (= ?x37557 0.0))))))))))
(assert
 (let ((?x37610 (- (* (* (- 2.0) l_0_7_187) l_0_7_217) (* (* 2.0 l_0_7_188) l_0_7_218))))
 (let ((?x37614 (- (- ?x37610 (* (* 2.0 l_0_7_189) l_0_7_219)) (* (* 2.0 l_0_7_190) l_0_7_220))))
 (let ((?x37618 (- (- ?x37614 (* (* 2.0 l_0_7_277) l_0_7_307)) (* (* 2.0 l_0_7_278) l_0_7_308))))
 (let ((?x37622 (- (- ?x37618 (* (* 2.0 l_0_7_279) l_0_7_309)) (* (* 2.0 l_0_7_280) l_0_7_310))))
 (let ((?x37626 (- (- ?x37622 (* (* 2.0 l_0_7_322) l_0_7_352)) (* (* 2.0 l_0_7_323) l_0_7_353))))
 (let ((?x37630 (- (- ?x37626 (* (* 2.0 l_0_7_324) l_0_7_354)) (* (* 2.0 l_0_7_325) l_0_7_355))))
 (let ((?x37634 (- (- ?x37630 (* (* 2.0 l_0_7_367) l_0_7_397)) (* (* 2.0 l_0_7_368) l_0_7_398))))
 (let ((?x37638 (- (- ?x37634 (* (* 2.0 l_0_7_369) l_0_7_399)) (* (* 2.0 l_0_7_370) l_0_7_400))))
 (= ?x37638 0.0))))))))))
(assert
 (let ((?x37743 (* l_0_7_381 l_0_7_381)))
 (let ((?x37741 (* l_0_7_380 l_0_7_380)))
 (let ((?x37739 (* l_0_7_379 l_0_7_379)))
 (let ((?x37737 (* l_0_7_378 l_0_7_378)))
 (let ((?x37735 (* l_0_7_377 l_0_7_377)))
 (let ((?x37733 (* l_0_7_376 l_0_7_376)))
 (let ((?x37731 (* l_0_7_336 l_0_7_336)))
 (let ((?x37729 (* l_0_7_335 l_0_7_335)))
 (let ((?x37727 (* l_0_7_334 l_0_7_334)))
 (let ((?x37725 (* l_0_7_333 l_0_7_333)))
 (let ((?x37723 (* l_0_7_332 l_0_7_332)))
 (let ((?x37721 (* l_0_7_331 l_0_7_331)))
 (let ((?x37719 (* l_0_7_291 l_0_7_291)))
 (let ((?x37717 (* l_0_7_290 l_0_7_290)))
 (let ((?x37715 (* l_0_7_289 l_0_7_289)))
 (let ((?x37713 (* l_0_7_288 l_0_7_288)))
 (let ((?x37711 (* l_0_7_287 l_0_7_287)))
 (let ((?x37709 (* l_0_7_286 l_0_7_286)))
 (let ((?x37696 (- (* (* (- 1.0) l_0_7_196) l_0_7_196) (* (* 1.0 l_0_7_197) l_0_7_197))))
 (let ((?x37702 (- (- ?x37696 (* (* 1.0 l_0_7_198) l_0_7_198)) (* (* 1.0 l_0_7_199) l_0_7_199))))
 (let ((?x37708 (- (- ?x37702 (* (* 1.0 l_0_7_200) l_0_7_200)) (* (* 1.0 l_0_7_201) l_0_7_201))))
 (let ((?x37722 (- (- (- (- (- (- (- ?x37708 ?x37709) ?x37711) ?x37713) ?x37715) ?x37717) ?x37719) ?x37721)))
 (let ((?x37736 (- (- (- (- (- (- (- ?x37722 ?x37723) ?x37725) ?x37727) ?x37729) ?x37731) ?x37733) ?x37735)))
 (= (- (- (- (- ?x37736 ?x37737) ?x37739) ?x37741) ?x37743) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x37790 (- (* (* (- 2.0) l_0_7_196) l_0_7_202) (* (* 2.0 l_0_7_197) l_0_7_203))))
 (let ((?x37794 (- (- ?x37790 (* (* 2.0 l_0_7_198) l_0_7_204)) (* (* 2.0 l_0_7_199) l_0_7_205))))
 (let ((?x37798 (- (- ?x37794 (* (* 2.0 l_0_7_200) l_0_7_206)) (* (* 2.0 l_0_7_201) l_0_7_207))))
 (let ((?x37802 (- (- ?x37798 (* (* 2.0 l_0_7_286) l_0_7_292)) (* (* 2.0 l_0_7_287) l_0_7_293))))
 (let ((?x37806 (- (- ?x37802 (* (* 2.0 l_0_7_288) l_0_7_294)) (* (* 2.0 l_0_7_289) l_0_7_295))))
 (let ((?x37810 (- (- ?x37806 (* (* 2.0 l_0_7_290) l_0_7_296)) (* (* 2.0 l_0_7_291) l_0_7_297))))
 (let ((?x37814 (- (- ?x37810 (* (* 2.0 l_0_7_331) l_0_7_337)) (* (* 2.0 l_0_7_332) l_0_7_338))))
 (let ((?x37818 (- (- ?x37814 (* (* 2.0 l_0_7_333) l_0_7_339)) (* (* 2.0 l_0_7_334) l_0_7_340))))
 (let ((?x37822 (- (- ?x37818 (* (* 2.0 l_0_7_335) l_0_7_341)) (* (* 2.0 l_0_7_336) l_0_7_342))))
 (let ((?x37826 (- (- ?x37822 (* (* 2.0 l_0_7_376) l_0_7_382)) (* (* 2.0 l_0_7_377) l_0_7_383))))
 (let ((?x37830 (- (- ?x37826 (* (* 2.0 l_0_7_378) l_0_7_384)) (* (* 2.0 l_0_7_379) l_0_7_385))))
 (let ((?x37834 (- (- ?x37830 (* (* 2.0 l_0_7_380) l_0_7_386)) (* (* 2.0 l_0_7_381) l_0_7_387))))
 (= ?x37834 0.0))))))))))))))
(assert
 (let ((?x37898 (- (* (* (- 2.0) l_0_7_196) l_0_7_217) (* (* 2.0 l_0_7_197) l_0_7_218))))
 (let ((?x37902 (- (- ?x37898 (* (* 2.0 l_0_7_198) l_0_7_219)) (* (* 2.0 l_0_7_199) l_0_7_220))))
 (let ((?x37906 (- (- ?x37902 (* (* 2.0 l_0_7_200) l_0_7_221)) (* (* 2.0 l_0_7_201) l_0_7_222))))
 (let ((?x37910 (- (- ?x37906 (* (* 2.0 l_0_7_286) l_0_7_307)) (* (* 2.0 l_0_7_287) l_0_7_308))))
 (let ((?x37914 (- (- ?x37910 (* (* 2.0 l_0_7_288) l_0_7_309)) (* (* 2.0 l_0_7_289) l_0_7_310))))
 (let ((?x37918 (- (- ?x37914 (* (* 2.0 l_0_7_290) l_0_7_311)) (* (* 2.0 l_0_7_291) l_0_7_312))))
 (let ((?x37922 (- (- ?x37918 (* (* 2.0 l_0_7_331) l_0_7_352)) (* (* 2.0 l_0_7_332) l_0_7_353))))
 (let ((?x37926 (- (- ?x37922 (* (* 2.0 l_0_7_333) l_0_7_354)) (* (* 2.0 l_0_7_334) l_0_7_355))))
 (let ((?x37930 (- (- ?x37926 (* (* 2.0 l_0_7_335) l_0_7_356)) (* (* 2.0 l_0_7_336) l_0_7_357))))
 (let ((?x37934 (- (- ?x37930 (* (* 2.0 l_0_7_376) l_0_7_397)) (* (* 2.0 l_0_7_377) l_0_7_398))))
 (let ((?x37938 (- (- ?x37934 (* (* 2.0 l_0_7_378) l_0_7_399)) (* (* 2.0 l_0_7_379) l_0_7_400))))
 (let ((?x37942 (- (- ?x37938 (* (* 2.0 l_0_7_380) l_0_7_401)) (* (* 2.0 l_0_7_381) l_0_7_402))))
 (= ?x37942 0.0))))))))))))))
(assert
 (let ((?x38091 (* l_0_7_388 l_0_7_388)))
 (let ((?x38089 (* l_0_7_387 l_0_7_387)))
 (let ((?x38087 (* l_0_7_386 l_0_7_386)))
 (let ((?x38085 (* l_0_7_385 l_0_7_385)))
 (let ((?x38083 (* l_0_7_384 l_0_7_384)))
 (let ((?x38081 (* l_0_7_383 l_0_7_383)))
 (let ((?x38079 (* l_0_7_382 l_0_7_382)))
 (let ((?x38077 (* l_0_7_343 l_0_7_343)))
 (let ((?x38075 (* l_0_7_342 l_0_7_342)))
 (let ((?x38073 (* l_0_7_341 l_0_7_341)))
 (let ((?x38071 (* l_0_7_340 l_0_7_340)))
 (let ((?x38069 (* l_0_7_339 l_0_7_339)))
 (let ((?x38067 (* l_0_7_338 l_0_7_338)))
 (let ((?x38065 (* l_0_7_337 l_0_7_337)))
 (let ((?x38063 (* l_0_7_298 l_0_7_298)))
 (let ((?x38061 (* l_0_7_297 l_0_7_297)))
 (let ((?x38059 (* l_0_7_296 l_0_7_296)))
 (let ((?x38057 (* l_0_7_295 l_0_7_295)))
 (let ((?x38055 (* l_0_7_294 l_0_7_294)))
 (let ((?x38053 (* l_0_7_293 l_0_7_293)))
 (let ((?x38051 (* l_0_7_292 l_0_7_292)))
 (let ((?x38035 (- (* (* (- 1.0) l_0_7_202) l_0_7_202) (* (* 1.0 l_0_7_203) l_0_7_203))))
 (let ((?x38041 (- (- ?x38035 (* (* 1.0 l_0_7_204) l_0_7_204)) (* (* 1.0 l_0_7_205) l_0_7_205))))
 (let ((?x38047 (- (- ?x38041 (* (* 1.0 l_0_7_206) l_0_7_206)) (* (* 1.0 l_0_7_207) l_0_7_207))))
 (let ((?x38056 (- (- (- (- ?x38047 (* (* 1.0 l_0_7_208) l_0_7_208)) ?x38051) ?x38053) ?x38055)))
 (let ((?x38070 (- (- (- (- (- (- (- ?x38056 ?x38057) ?x38059) ?x38061) ?x38063) ?x38065) ?x38067) ?x38069)))
 (let ((?x38084 (- (- (- (- (- (- (- ?x38070 ?x38071) ?x38073) ?x38075) ?x38077) ?x38079) ?x38081) ?x38083)))
 (= (- (- (- (- ?x38084 ?x38085) ?x38087) ?x38089) ?x38091) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x38144 (- (* (* (- 2.0) l_0_7_202) l_0_7_209) (* (* 2.0 l_0_7_203) l_0_7_210))))
 (let ((?x38148 (- (- ?x38144 (* (* 2.0 l_0_7_204) l_0_7_211)) (* (* 2.0 l_0_7_205) l_0_7_212))))
 (let ((?x38152 (- (- ?x38148 (* (* 2.0 l_0_7_206) l_0_7_213)) (* (* 2.0 l_0_7_207) l_0_7_214))))
 (let ((?x38156 (- (- ?x38152 (* (* 2.0 l_0_7_208) l_0_7_215)) (* (* 2.0 l_0_7_292) l_0_7_299))))
 (let ((?x38160 (- (- ?x38156 (* (* 2.0 l_0_7_293) l_0_7_300)) (* (* 2.0 l_0_7_294) l_0_7_301))))
 (let ((?x38164 (- (- ?x38160 (* (* 2.0 l_0_7_295) l_0_7_302)) (* (* 2.0 l_0_7_296) l_0_7_303))))
 (let ((?x38168 (- (- ?x38164 (* (* 2.0 l_0_7_297) l_0_7_304)) (* (* 2.0 l_0_7_298) l_0_7_305))))
 (let ((?x38172 (- (- ?x38168 (* (* 2.0 l_0_7_337) l_0_7_344)) (* (* 2.0 l_0_7_338) l_0_7_345))))
 (let ((?x38176 (- (- ?x38172 (* (* 2.0 l_0_7_339) l_0_7_346)) (* (* 2.0 l_0_7_340) l_0_7_347))))
 (let ((?x38180 (- (- ?x38176 (* (* 2.0 l_0_7_341) l_0_7_348)) (* (* 2.0 l_0_7_342) l_0_7_349))))
 (let ((?x38184 (- (- ?x38180 (* (* 2.0 l_0_7_343) l_0_7_350)) (* (* 2.0 l_0_7_382) l_0_7_389))))
 (let ((?x38188 (- (- ?x38184 (* (* 2.0 l_0_7_383) l_0_7_390)) (* (* 2.0 l_0_7_384) l_0_7_391))))
 (let ((?x38192 (- (- ?x38188 (* (* 2.0 l_0_7_385) l_0_7_392)) (* (* 2.0 l_0_7_386) l_0_7_393))))
 (let ((?x38196 (- (- ?x38192 (* (* 2.0 l_0_7_387) l_0_7_394)) (* (* 2.0 l_0_7_388) l_0_7_395))))
 (= ?x38196 0.0))))))))))))))))
(assert
 (let ((?x38324 (* l_0_7_396 l_0_7_396)))
 (let ((?x38322 (* l_0_7_395 l_0_7_395)))
 (let ((?x38320 (* l_0_7_394 l_0_7_394)))
 (let ((?x38318 (* l_0_7_393 l_0_7_393)))
 (let ((?x38316 (* l_0_7_392 l_0_7_392)))
 (let ((?x38314 (* l_0_7_391 l_0_7_391)))
 (let ((?x38312 (* l_0_7_390 l_0_7_390)))
 (let ((?x38310 (* l_0_7_389 l_0_7_389)))
 (let ((?x38308 (* l_0_7_351 l_0_7_351)))
 (let ((?x38306 (* l_0_7_350 l_0_7_350)))
 (let ((?x38304 (* l_0_7_349 l_0_7_349)))
 (let ((?x38302 (* l_0_7_348 l_0_7_348)))
 (let ((?x38300 (* l_0_7_347 l_0_7_347)))
 (let ((?x38298 (* l_0_7_346 l_0_7_346)))
 (let ((?x38296 (* l_0_7_345 l_0_7_345)))
 (let ((?x38294 (* l_0_7_344 l_0_7_344)))
 (let ((?x38292 (* l_0_7_306 l_0_7_306)))
 (let ((?x38290 (* l_0_7_305 l_0_7_305)))
 (let ((?x38288 (* l_0_7_304 l_0_7_304)))
 (let ((?x38286 (* l_0_7_303 l_0_7_303)))
 (let ((?x38284 (* l_0_7_302 l_0_7_302)))
 (let ((?x38282 (* l_0_7_301 l_0_7_301)))
 (let ((?x38280 (* l_0_7_300 l_0_7_300)))
 (let ((?x38278 (* l_0_7_299 l_0_7_299)))
 (let ((?x38259 (- (* (* (- 1.0) l_0_7_209) l_0_7_209) (* (* 1.0 l_0_7_210) l_0_7_210))))
 (let ((?x38265 (- (- ?x38259 (* (* 1.0 l_0_7_211) l_0_7_211)) (* (* 1.0 l_0_7_212) l_0_7_212))))
 (let ((?x38271 (- (- ?x38265 (* (* 1.0 l_0_7_213) l_0_7_213)) (* (* 1.0 l_0_7_214) l_0_7_214))))
 (let ((?x38277 (- (- ?x38271 (* (* 1.0 l_0_7_215) l_0_7_215)) (* (* 1.0 l_0_7_216) l_0_7_216))))
 (let ((?x38291 (- (- (- (- (- (- (- ?x38277 ?x38278) ?x38280) ?x38282) ?x38284) ?x38286) ?x38288) ?x38290)))
 (let ((?x38305 (- (- (- (- (- (- (- ?x38291 ?x38292) ?x38294) ?x38296) ?x38298) ?x38300) ?x38302) ?x38304)))
 (let ((?x38319 (- (- (- (- (- (- (- ?x38305 ?x38306) ?x38308) ?x38310) ?x38312) ?x38314) ?x38316) ?x38318)))
 (= (- (- (- ?x38319 ?x38320) ?x38322) ?x38324) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x38389 (- (* (* (- 2.0) l_0_7_209) l_0_7_217) (* (* 2.0 l_0_7_210) l_0_7_218))))
 (let ((?x38395 (- (- ?x38389 (* (* 2.0 l_0_7_211) l_0_7_219)) (* (* 2.0 l_0_7_212) l_0_7_220))))
 (let ((?x38401 (- (- ?x38395 (* (* 2.0 l_0_7_213) l_0_7_221)) (* (* 2.0 l_0_7_214) l_0_7_222))))
 (let ((?x38407 (- (- ?x38401 (* (* 2.0 l_0_7_215) l_0_7_223)) (* (* 2.0 l_0_7_216) l_0_7_224))))
 (let ((?x38413 (- (- ?x38407 (* (* 2.0 l_0_7_299) l_0_7_307)) (* (* 2.0 l_0_7_300) l_0_7_308))))
 (let ((?x38419 (- (- ?x38413 (* (* 2.0 l_0_7_301) l_0_7_309)) (* (* 2.0 l_0_7_302) l_0_7_310))))
 (let ((?x38425 (- (- ?x38419 (* (* 2.0 l_0_7_303) l_0_7_311)) (* (* 2.0 l_0_7_304) l_0_7_312))))
 (let ((?x38431 (- (- ?x38425 (* (* 2.0 l_0_7_305) l_0_7_313)) (* (* 2.0 l_0_7_306) l_0_7_314))))
 (let ((?x38437 (- (- ?x38431 (* (* 2.0 l_0_7_344) l_0_7_352)) (* (* 2.0 l_0_7_345) l_0_7_353))))
 (let ((?x38443 (- (- ?x38437 (* (* 2.0 l_0_7_346) l_0_7_354)) (* (* 2.0 l_0_7_347) l_0_7_355))))
 (let ((?x38449 (- (- ?x38443 (* (* 2.0 l_0_7_348) l_0_7_356)) (* (* 2.0 l_0_7_349) l_0_7_357))))
 (let ((?x38455 (- (- ?x38449 (* (* 2.0 l_0_7_350) l_0_7_358)) (* (* 2.0 l_0_7_351) l_0_7_359))))
 (let ((?x38461 (- (- ?x38455 (* (* 2.0 l_0_7_389) l_0_7_397)) (* (* 2.0 l_0_7_390) l_0_7_398))))
 (let ((?x38467 (- (- ?x38461 (* (* 2.0 l_0_7_391) l_0_7_399)) (* (* 2.0 l_0_7_392) l_0_7_400))))
 (let ((?x38473 (- (- ?x38467 (* (* 2.0 l_0_7_393) l_0_7_401)) (* (* 2.0 l_0_7_394) l_0_7_402))))
 (let ((?x38479 (- (- ?x38473 (* (* 2.0 l_0_7_395) l_0_7_403)) (* (* 2.0 l_0_7_396) l_0_7_404))))
 (= ?x38479 0.0))))))))))))))))))
(assert
 (let ((?x38666 (* l_0_7_405 l_0_7_405)))
 (let ((?x38664 (* l_0_7_404 l_0_7_404)))
 (let ((?x38662 (* l_0_7_403 l_0_7_403)))
 (let ((?x38660 (* l_0_7_402 l_0_7_402)))
 (let ((?x38658 (* l_0_7_401 l_0_7_401)))
 (let ((?x38656 (* l_0_7_400 l_0_7_400)))
 (let ((?x38654 (* l_0_7_399 l_0_7_399)))
 (let ((?x38652 (* l_0_7_398 l_0_7_398)))
 (let ((?x38650 (* l_0_7_397 l_0_7_397)))
 (let ((?x38648 (* l_0_7_360 l_0_7_360)))
 (let ((?x38646 (* l_0_7_359 l_0_7_359)))
 (let ((?x38644 (* l_0_7_358 l_0_7_358)))
 (let ((?x38642 (* l_0_7_357 l_0_7_357)))
 (let ((?x38640 (* l_0_7_356 l_0_7_356)))
 (let ((?x38638 (* l_0_7_355 l_0_7_355)))
 (let ((?x38636 (* l_0_7_354 l_0_7_354)))
 (let ((?x38634 (* l_0_7_353 l_0_7_353)))
 (let ((?x38632 (* l_0_7_352 l_0_7_352)))
 (let ((?x38630 (* l_0_7_315 l_0_7_315)))
 (let ((?x38628 (* l_0_7_314 l_0_7_314)))
 (let ((?x38626 (* l_0_7_313 l_0_7_313)))
 (let ((?x38624 (* l_0_7_312 l_0_7_312)))
 (let ((?x38622 (* l_0_7_311 l_0_7_311)))
 (let ((?x38620 (* l_0_7_310 l_0_7_310)))
 (let ((?x38618 (* l_0_7_309 l_0_7_309)))
 (let ((?x38616 (* l_0_7_308 l_0_7_308)))
 (let ((?x38614 (* l_0_7_307 l_0_7_307)))
 (let ((?x38592 (- (* (* (- 1.0) l_0_7_217) l_0_7_217) (* (* 1.0 l_0_7_218) l_0_7_218))))
 (let ((?x38598 (- (- ?x38592 (* (* 1.0 l_0_7_219) l_0_7_219)) (* (* 1.0 l_0_7_220) l_0_7_220))))
 (let ((?x38604 (- (- ?x38598 (* (* 1.0 l_0_7_221) l_0_7_221)) (* (* 1.0 l_0_7_222) l_0_7_222))))
 (let ((?x38610 (- (- ?x38604 (* (* 1.0 l_0_7_223) l_0_7_223)) (* (* 1.0 l_0_7_224) l_0_7_224))))
 (let ((?x38619 (- (- (- (- ?x38610 (* (* 1.0 l_0_7_225) l_0_7_225)) ?x38614) ?x38616) ?x38618)))
 (let ((?x38633 (- (- (- (- (- (- (- ?x38619 ?x38620) ?x38622) ?x38624) ?x38626) ?x38628) ?x38630) ?x38632)))
 (let ((?x38647 (- (- (- (- (- (- (- ?x38633 ?x38634) ?x38636) ?x38638) ?x38640) ?x38642) ?x38644) ?x38646)))
 (let ((?x38661 (- (- (- (- (- (- (- ?x38647 ?x38648) ?x38650) ?x38652) ?x38654) ?x38656) ?x38658) ?x38660)))
 (= (- (- (- ?x38661 ?x38662) ?x38664) ?x38666) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_7_1 0.0))
(assert
 (>= l_0_7_3 0.0))
(assert
 (>= l_0_7_6 0.0))
(assert
 (>= l_0_7_10 0.0))
(assert
 (>= l_0_7_15 0.0))
(assert
 (>= l_0_7_21 0.0))
(assert
 (>= l_0_7_28 0.0))
(assert
 (>= l_0_7_36 0.0))
(assert
 (>= l_0_7_45 0.0))
(assert
 (>= l_0_7_46 0.0))
(assert
 (>= l_0_7_48 0.0))
(assert
 (>= l_0_7_51 0.0))
(assert
 (>= l_0_7_55 0.0))
(assert
 (>= l_0_7_60 0.0))
(assert
 (>= l_0_7_66 0.0))
(assert
 (>= l_0_7_73 0.0))
(assert
 (>= l_0_7_81 0.0))
(assert
 (>= l_0_7_90 0.0))
(assert
 (>= l_0_7_91 0.0))
(assert
 (>= l_0_7_93 0.0))
(assert
 (>= l_0_7_96 0.0))
(assert
 (>= l_0_7_100 0.0))
(assert
 (>= l_0_7_105 0.0))
(assert
 (>= l_0_7_111 0.0))
(assert
 (>= l_0_7_118 0.0))
(assert
 (>= l_0_7_126 0.0))
(assert
 (>= l_0_7_135 0.0))
(assert
 (>= l_0_7_136 0.0))
(assert
 (>= l_0_7_138 0.0))
(assert
 (>= l_0_7_141 0.0))
(assert
 (>= l_0_7_145 0.0))
(assert
 (>= l_0_7_150 0.0))
(assert
 (>= l_0_7_156 0.0))
(assert
 (>= l_0_7_163 0.0))
(assert
 (>= l_0_7_171 0.0))
(assert
 (>= l_0_7_180 0.0))
(assert
 (>= l_0_7_181 0.0))
(assert
 (>= l_0_7_183 0.0))
(assert
 (>= l_0_7_186 0.0))
(assert
 (>= l_0_7_190 0.0))
(assert
 (>= l_0_7_195 0.0))
(assert
 (>= l_0_7_201 0.0))
(assert
 (>= l_0_7_208 0.0))
(assert
 (>= l_0_7_216 0.0))
(assert
 (>= l_0_7_225 0.0))
(assert
 (>= l_0_7_226 0.0))
(assert
 (>= l_0_7_228 0.0))
(assert
 (>= l_0_7_231 0.0))
(assert
 (>= l_0_7_235 0.0))
(assert
 (>= l_0_7_240 0.0))
(assert
 (>= l_0_7_246 0.0))
(assert
 (>= l_0_7_253 0.0))
(assert
 (>= l_0_7_261 0.0))
(assert
 (>= l_0_7_270 0.0))
(assert
 (>= l_0_7_271 0.0))
(assert
 (>= l_0_7_273 0.0))
(assert
 (>= l_0_7_276 0.0))
(assert
 (>= l_0_7_280 0.0))
(assert
 (>= l_0_7_285 0.0))
(assert
 (>= l_0_7_291 0.0))
(assert
 (>= l_0_7_298 0.0))
(assert
 (>= l_0_7_306 0.0))
(assert
 (>= l_0_7_315 0.0))
(assert
 (>= l_0_7_316 0.0))
(assert
 (>= l_0_7_318 0.0))
(assert
 (>= l_0_7_321 0.0))
(assert
 (>= l_0_7_325 0.0))
(assert
 (>= l_0_7_330 0.0))
(assert
 (>= l_0_7_336 0.0))
(assert
 (>= l_0_7_343 0.0))
(assert
 (>= l_0_7_351 0.0))
(assert
 (>= l_0_7_360 0.0))
(assert
 (>= l_0_7_361 0.0))
(assert
 (>= l_0_7_363 0.0))
(assert
 (>= l_0_7_366 0.0))
(assert
 (>= l_0_7_370 0.0))
(assert
 (>= l_0_7_375 0.0))
(assert
 (>= l_0_7_381 0.0))
(assert
 (>= l_0_7_388 0.0))
(assert
 (>= l_0_7_396 0.0))
(assert
 (>= l_0_7_405 0.0))
(assert
 (let ((?x38881 (* l_0_8_91 l_0_8_91)))
 (let ((?x38867 (* l_0_8_226 l_0_8_226)))
 (let ((?x38866 (- (* (- l_0_8_136) l_0_8_136) (* (* 2.0 l_0_8_181) l_0_8_191))))
 (let ((?x38874 (- (- (+ ?x38866 ?x38867) (* (* 2.0 l_0_8_271) l_0_8_281)) (* (* 2.0 l_0_8_316) l_0_8_326))))
 (let ((?x38880 (- (- ?x38874 (* (* 2.0 l_0_8_361) l_0_8_371)) (* (* 2.0 l_0_8_406) l_0_8_416))))
 (= (+ (+ ?x38880 ?x38881) 1.0) 0.0)))))))
(assert
 (let ((?x38881 (* l_0_8_91 l_0_8_91)))
 (let ((?x38926 (- (- (* l_0_8_136 l_0_8_136) (* (* 2.0 l_0_8_202) l_0_8_217)) (* (* 2.0 l_0_8_203) l_0_8_218))))
 (let ((?x38932 (- (- ?x38926 (* (* 2.0 l_0_8_204) l_0_8_219)) (* (* 2.0 l_0_8_205) l_0_8_220))))
 (let ((?x38938 (- (- ?x38932 (* (* 2.0 l_0_8_206) l_0_8_221)) (* (* 2.0 l_0_8_207) l_0_8_222))))
 (let ((?x38944 (- (- ?x38938 (* (* 2.0 l_0_8_208) l_0_8_223)) (* (* 2.0 l_0_8_292) l_0_8_307))))
 (let ((?x38950 (- (- ?x38944 (* (* 2.0 l_0_8_293) l_0_8_308)) (* (* 2.0 l_0_8_294) l_0_8_309))))
 (let ((?x38956 (- (- ?x38950 (* (* 2.0 l_0_8_295) l_0_8_310)) (* (* 2.0 l_0_8_296) l_0_8_311))))
 (let ((?x38962 (- (- ?x38956 (* (* 2.0 l_0_8_297) l_0_8_312)) (* (* 2.0 l_0_8_298) l_0_8_313))))
 (let ((?x38968 (- (- ?x38962 (* (* 2.0 l_0_8_337) l_0_8_352)) (* (* 2.0 l_0_8_338) l_0_8_353))))
 (let ((?x38974 (- (- ?x38968 (* (* 2.0 l_0_8_339) l_0_8_354)) (* (* 2.0 l_0_8_340) l_0_8_355))))
 (let ((?x38980 (- (- ?x38974 (* (* 2.0 l_0_8_341) l_0_8_356)) (* (* 2.0 l_0_8_342) l_0_8_357))))
 (let ((?x38986 (- (- ?x38980 (* (* 2.0 l_0_8_343) l_0_8_358)) (* (* 2.0 l_0_8_382) l_0_8_397))))
 (let ((?x38992 (- (- ?x38986 (* (* 2.0 l_0_8_383) l_0_8_398)) (* (* 2.0 l_0_8_384) l_0_8_399))))
 (let ((?x38998 (- (- ?x38992 (* (* 2.0 l_0_8_385) l_0_8_400)) (* (* 2.0 l_0_8_386) l_0_8_401))))
 (let ((?x39004 (- (- ?x38998 (* (* 2.0 l_0_8_387) l_0_8_402)) (* (* 2.0 l_0_8_388) l_0_8_403))))
 (let ((?x39010 (- (- ?x39004 (* (* 2.0 l_0_8_427) l_0_8_442)) (* (* 2.0 l_0_8_428) l_0_8_443))))
 (let ((?x39016 (- (- ?x39010 (* (* 2.0 l_0_8_429) l_0_8_444)) (* (* 2.0 l_0_8_430) l_0_8_445))))
 (let ((?x39022 (- (- ?x39016 (* (* 2.0 l_0_8_431) l_0_8_446)) (* (* 2.0 l_0_8_432) l_0_8_447))))
 (= (- (- (- ?x39022 (* (* 2.0 l_0_8_433) l_0_8_448)) ?x38881) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x38881 (* l_0_8_91 l_0_8_91)))
 (let ((?x39140 (- (- (* l_0_8_136 l_0_8_136) (* (* 2.0 l_0_8_182) l_0_8_209)) (* (* 2.0 l_0_8_183) l_0_8_210))))
 (let ((?x39146 (- (- ?x39140 (* (* 2.0 l_0_8_272) l_0_8_299)) (* (* 2.0 l_0_8_273) l_0_8_300))))
 (let ((?x39152 (- (- ?x39146 (* (* 2.0 l_0_8_317) l_0_8_344)) (* (* 2.0 l_0_8_318) l_0_8_345))))
 (let ((?x39158 (- (- ?x39152 (* (* 2.0 l_0_8_362) l_0_8_389)) (* (* 2.0 l_0_8_363) l_0_8_390))))
 (let ((?x39164 (- (- ?x39158 (* (* 2.0 l_0_8_407) l_0_8_434)) (* (* 2.0 l_0_8_408) l_0_8_435))))
 (= (- (- ?x39164 ?x38881) 1.0) 0.0))))))))
(assert
 (let ((?x39284 (* l_0_8_46 l_0_8_46)))
 (let ((?x39199 (- (- (* (- l_0_8_1) l_0_8_1) (* (* 2.0 l_0_8_196) l_0_8_209)) (* (* 2.0 l_0_8_197) l_0_8_210))))
 (let ((?x39205 (- (- ?x39199 (* (* 2.0 l_0_8_198) l_0_8_211)) (* (* 2.0 l_0_8_199) l_0_8_212))))
 (let ((?x39211 (- (- ?x39205 (* (* 2.0 l_0_8_200) l_0_8_213)) (* (* 2.0 l_0_8_201) l_0_8_214))))
 (let ((?x39217 (- (- ?x39211 (* (* 2.0 l_0_8_286) l_0_8_299)) (* (* 2.0 l_0_8_287) l_0_8_300))))
 (let ((?x39223 (- (- ?x39217 (* (* 2.0 l_0_8_288) l_0_8_301)) (* (* 2.0 l_0_8_289) l_0_8_302))))
 (let ((?x39229 (- (- ?x39223 (* (* 2.0 l_0_8_290) l_0_8_303)) (* (* 2.0 l_0_8_291) l_0_8_304))))
 (let ((?x39235 (- (- ?x39229 (* (* 2.0 l_0_8_331) l_0_8_344)) (* (* 2.0 l_0_8_332) l_0_8_345))))
 (let ((?x39241 (- (- ?x39235 (* (* 2.0 l_0_8_333) l_0_8_346)) (* (* 2.0 l_0_8_334) l_0_8_347))))
 (let ((?x39247 (- (- ?x39241 (* (* 2.0 l_0_8_335) l_0_8_348)) (* (* 2.0 l_0_8_336) l_0_8_349))))
 (let ((?x39253 (- (- ?x39247 (* (* 2.0 l_0_8_376) l_0_8_389)) (* (* 2.0 l_0_8_377) l_0_8_390))))
 (let ((?x39259 (- (- ?x39253 (* (* 2.0 l_0_8_378) l_0_8_391)) (* (* 2.0 l_0_8_379) l_0_8_392))))
 (let ((?x39265 (- (- ?x39259 (* (* 2.0 l_0_8_380) l_0_8_393)) (* (* 2.0 l_0_8_381) l_0_8_394))))
 (let ((?x39271 (- (- ?x39265 (* (* 2.0 l_0_8_421) l_0_8_434)) (* (* 2.0 l_0_8_422) l_0_8_435))))
 (let ((?x39277 (- (- ?x39271 (* (* 2.0 l_0_8_423) l_0_8_436)) (* (* 2.0 l_0_8_424) l_0_8_437))))
 (let ((?x39283 (- (- ?x39277 (* (* 2.0 l_0_8_425) l_0_8_438)) (* (* 2.0 l_0_8_426) l_0_8_439))))
 (= (+ ?x39283 ?x39284) 0.0))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39361 (* ?x39360 l_0_8_47)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x39358 (* ?x39357 l_0_8_151)))
 (let ((?x39354 (* 2.0 l_0_8_106)))
 (let ((?x39355 (* ?x39354 l_0_8_91)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39353 (* ?x28209 l_0_8_2)))
 (= (+ (+ (- ?x39353 ?x39355) ?x39358) ?x39361) 0.0))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x39429 (* ?x39428 l_0_8_79)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x39426 (* ?x39425 l_0_8_78)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x39423 (* ?x39422 l_0_8_77)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x39420 (* ?x39419 l_0_8_76)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x39417 (* ?x39416 l_0_8_75)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x39414 (* ?x39413 l_0_8_74)))
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39411 (* ?x39360 l_0_8_49)))
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x39409 (* ?x39408 l_0_8_259)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x39406 (* ?x39405 l_0_8_258)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x39403 (* ?x39402 l_0_8_257)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x39400 (* ?x39399 l_0_8_256)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x39397 (* ?x39396 l_0_8_255)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x39394 (* ?x39393 l_0_8_254)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x39391 (* ?x39390 l_0_8_34)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x39388 (* ?x39387 l_0_8_33)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x39385 (* ?x39384 l_0_8_32)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x39382 (* ?x39381 l_0_8_31)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39379 (* ?x39378 l_0_8_30)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x39376 (* ?x39375 l_0_8_29)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39374 (* ?x28209 l_0_8_4)))
 (let ((?x39395 (- (+ (+ (+ (+ (+ (+ ?x39374 ?x39376) ?x39379) ?x39382) ?x39385) ?x39388) ?x39391) ?x39394)))
 (let ((?x39415 (- (+ (- (- (- (- (- ?x39395 ?x39397) ?x39400) ?x39403) ?x39406) ?x39409) ?x39411) ?x39414)))
 (= (- (- (- (- (- ?x39415 ?x39417) ?x39420) ?x39423) ?x39426) ?x39429) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39486 (* ?x39360 l_0_8_52)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) ?x39486) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39537 (* ?x39360 l_0_8_56)))
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x39409 (* ?x39408 l_0_8_259)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x39406 (* ?x39405 l_0_8_258)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x39403 (* ?x39402 l_0_8_257)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x39400 (* ?x39399 l_0_8_256)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x39397 (* ?x39396 l_0_8_255)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x39394 (* ?x39393 l_0_8_254)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39529 (* ?x39528 l_0_8_169)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39526 (* ?x39525 l_0_8_168)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39523 (* ?x39522 l_0_8_167)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39520 (* ?x39519 l_0_8_166)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39517 (* ?x39516 l_0_8_165)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39514 (* ?x39513 l_0_8_164)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39511 (* ?x39510 l_0_8_124)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39508 (* ?x39507 l_0_8_123)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39505 (* ?x39504 l_0_8_122)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39502 (* ?x39501 l_0_8_121)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39499 (* ?x39498 l_0_8_120)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39490 (* ?x28209 l_0_8_11)))
 (let ((?x39506 (+ (+ (+ (+ ?x39490 (* (* 2.0 l_0_8_106) l_0_8_119)) ?x39499) ?x39502) ?x39505)))
 (let ((?x39527 (- (- (- (- (- (+ (+ ?x39506 ?x39508) ?x39511) ?x39514) ?x39517) ?x39520) ?x39523) ?x39526)))
 (let ((?x39536 (+ (+ (+ (+ (+ (+ (- ?x39527 ?x39529) ?x39394) ?x39397) ?x39400) ?x39403) ?x39406) ?x39409)))
 (= (+ ?x39536 ?x39537) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39574 (* ?x39360 l_0_8_61)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x39574) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39580 (* ?x39360 l_0_8_67)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_22) ?x39580) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39590 (* ?x39360 l_0_8_74)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_29) ?x39590) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39600 (* ?x39360 l_0_8_82)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39598 (* ?x28209 l_0_8_37)))
 (= (+ ?x39598 ?x39600) 0.0))))))
(assert
 (let ((?x39629 (* l_0_8_48 l_0_8_48)))
 (let ((?x39627 (* l_0_8_47 l_0_8_47)))
 (let ((?x39625 (* l_0_8_3 l_0_8_3)))
 (let ((?x39623 (* l_0_8_2 l_0_8_2)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x39621 (* ?x39620 l_0_8_152)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x39618 (* ?x39617 l_0_8_151)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39611 (* ?x39498 l_0_8_93)))
 (let ((?x39622 (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_92) ?x39611) ?x39618) ?x39621)))
 (= (+ (+ (- (- ?x39622 ?x39623) ?x39625) ?x39627) ?x39629) 0.0)))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39677 (* ?x39676 l_0_8_50)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39674 (* ?x39673 l_0_8_49)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39671 (* ?x39670 l_0_8_5)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39668 (* ?x39667 l_0_8_4)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x39665 (* ?x39664 l_0_8_153)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x39662 (* ?x39661 l_0_8_152)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x39659 (* ?x39658 l_0_8_151)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39656 (* ?x39501 l_0_8_96)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39654 (* ?x39498 l_0_8_95)))
 (let ((?x39663 (+ (+ (- (- (* (* (- 2.0) l_0_8_106) l_0_8_94) ?x39654) ?x39656) ?x39659) ?x39662)))
 (let ((?x39666 (+ ?x39663 ?x39665)))
 (= (+ (+ (- (- ?x39666 ?x39668) ?x39671) ?x39674) ?x39677) 0.0))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39736 (* ?x39676 l_0_8_53)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39734 (* ?x39673 l_0_8_52)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39732 (* ?x39670 l_0_8_8)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39730 (* ?x39667 l_0_8_7)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x39728 (* ?x39727 l_0_8_154)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x39725 (* ?x39724 l_0_8_153)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x39722 (* ?x39721 l_0_8_152)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x39719 (* ?x39718 l_0_8_151)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39716 (* ?x39501 l_0_8_99)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39714 (* ?x39498 l_0_8_98)))
 (let ((?x39354 (* 2.0 l_0_8_106)))
 (let ((?x39704 (* ?x39354 l_0_8_97)))
 (let ((?x39720 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_109) ?x39704) ?x39714) ?x39716) ?x39719)))
 (let ((?x39729 (+ (+ (+ ?x39720 ?x39722) ?x39725) ?x39728)))
 (= (+ (+ (- (- ?x39729 ?x39730) ?x39732) ?x39734) ?x39736) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39813 (* ?x39676 l_0_8_57)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39811 (* ?x39673 l_0_8_56)))
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x39809 (* ?x39808 l_0_8_155)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x39806 (* ?x39805 l_0_8_154)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x39803 (* ?x39802 l_0_8_153)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x39800 (* ?x39799 l_0_8_152)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x39797 (* ?x39796 l_0_8_151)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x39794 (* ?x39793 l_0_8_3)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x39791 (* ?x39790 l_0_8_2)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x39788 (* ?x39787 l_0_8_110)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x39785 (* ?x39784 l_0_8_109)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x39782 (* ?x39781 l_0_8_108)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x39779 (* ?x39769 l_0_8_107)))
 (let ((?x39789 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_106) ?x39779) ?x39782) ?x39785) ?x39788)))
 (let ((?x39810 (+ (+ (+ (+ (+ (- (- ?x39789 ?x39791) ?x39794) ?x39797) ?x39800) ?x39803) ?x39806) ?x39809)))
 (= (+ (+ ?x39810 ?x39811) ?x39813) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39870 (* ?x39676 l_0_8_62)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39868 (* ?x39673 l_0_8_61)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39866 (* ?x39378 l_0_8_3)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x39864 (* ?x39375 l_0_8_2)))
 (let ((?x39862 (* l_0_8_156 l_0_8_156)))
 (let ((?x39860 (* l_0_8_155 l_0_8_155)))
 (let ((?x39858 (* l_0_8_154 l_0_8_154)))
 (let ((?x39856 (* l_0_8_153 l_0_8_153)))
 (let ((?x39854 (* l_0_8_152 l_0_8_152)))
 (let ((?x39852 (* l_0_8_151 l_0_8_151)))
 (let ((?x39850 (* l_0_8_111 l_0_8_111)))
 (let ((?x39848 (* l_0_8_110 l_0_8_110)))
 (let ((?x39846 (* l_0_8_109 l_0_8_109)))
 (let ((?x39844 (* l_0_8_108 l_0_8_108)))
 (let ((?x39845 (- (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x39844)))
 (let ((?x39859 (+ (+ (+ (+ (- (- (- ?x39845 ?x39846) ?x39848) ?x39850) ?x39852) ?x39854) ?x39856) ?x39858)))
 (let ((?x39863 (+ (+ ?x39859 ?x39860) ?x39862)))
 (= (+ (+ (- (- ?x39863 ?x39864) ?x39866) ?x39868) ?x39870) 0.0)))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39928 (* ?x39676 l_0_8_68)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39926 (* ?x39673 l_0_8_67)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x39924 (* ?x39923 l_0_8_3)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39921 (* ?x39667 l_0_8_22)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39919 (* ?x39528 l_0_8_162)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39917 (* ?x39525 l_0_8_161)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39915 (* ?x39522 l_0_8_160)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39913 (* ?x39519 l_0_8_159)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39911 (* ?x39516 l_0_8_158)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39909 (* ?x39513 l_0_8_157)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39907 (* ?x39510 l_0_8_117)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39905 (* ?x39507 l_0_8_116)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39903 (* ?x39504 l_0_8_115)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39901 (* ?x39501 l_0_8_114)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39899 (* ?x39498 l_0_8_113)))
 (let ((?x39906 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x39899) ?x39901) ?x39903) ?x39905)))
 (let ((?x39920 (+ (+ (+ (+ (+ (+ (- ?x39906 ?x39907) ?x39909) ?x39911) ?x39913) ?x39915) ?x39917) ?x39919)))
 (= (+ (+ (- (- ?x39920 ?x39921) ?x39924) ?x39926) ?x39928) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39988 (* ?x39676 l_0_8_75)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39986 (* ?x39673 l_0_8_74)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39984 (* ?x39670 l_0_8_30)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39982 (* ?x39667 l_0_8_29)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39529 (* ?x39528 l_0_8_169)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39526 (* ?x39525 l_0_8_168)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39523 (* ?x39522 l_0_8_167)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39520 (* ?x39519 l_0_8_166)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39517 (* ?x39516 l_0_8_165)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39514 (* ?x39513 l_0_8_164)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39511 (* ?x39510 l_0_8_124)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39508 (* ?x39507 l_0_8_123)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39505 (* ?x39504 l_0_8_122)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39502 (* ?x39501 l_0_8_121)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39499 (* ?x39498 l_0_8_120)))
 (let ((?x39974 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_119) ?x39499) ?x39502) ?x39505) ?x39508)))
 (let ((?x39981 (+ (+ (+ (+ (+ (+ (- ?x39974 ?x39511) ?x39514) ?x39517) ?x39520) ?x39523) ?x39526) ?x39529)))
 (= (+ (+ (- (- ?x39981 ?x39982) ?x39984) ?x39986) ?x39988) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x40048 (* ?x39676 l_0_8_83)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x40046 (* ?x39673 l_0_8_82)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x40044 (* ?x39670 l_0_8_38)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x40042 (* ?x39667 l_0_8_37)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x40040 (* ?x39528 l_0_8_177)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x40038 (* ?x39525 l_0_8_176)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x40036 (* ?x39522 l_0_8_175)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x40034 (* ?x39519 l_0_8_174)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x40032 (* ?x39516 l_0_8_173)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x40030 (* ?x39513 l_0_8_172)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x40028 (* ?x39510 l_0_8_132)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x40026 (* ?x39507 l_0_8_131)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x40024 (* ?x39504 l_0_8_130)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x40022 (* ?x39501 l_0_8_129)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x40020 (* ?x39498 l_0_8_128)))
 (let ((?x40027 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_127) ?x40020) ?x40022) ?x40024) ?x40026)))
 (let ((?x40041 (+ (+ (+ (+ (+ (+ (- ?x40027 ?x40028) ?x40030) ?x40032) ?x40034) ?x40036) ?x40038) ?x40040)))
 (= (+ (+ (- (- ?x40041 ?x40042) ?x40044) ?x40046) ?x40048) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40112 (* l_0_8_6 l_0_8_6)))
 (let ((?x40110 (* l_0_8_51 l_0_8_51)))
 (let ((?x40108 (* l_0_8_50 l_0_8_50)))
 (let ((?x40106 (* l_0_8_5 l_0_8_5)))
 (let ((?x40109 (+ (- (+ (* (- l_0_8_4) l_0_8_4) (* l_0_8_49 l_0_8_49)) ?x40106) ?x40108)))
 (= (- (+ ?x40109 ?x40110) ?x40112) 0.0)))))))
(assert
 (let ((?x40142 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40139 (* ?x40138 l_0_8_54)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40136 (* ?x40135 l_0_8_53)))
 (let ((?x40133 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40130 (* ?x40129 l_0_8_52)))
 (let ((?x40140 (+ (+ (- (+ (* (* (- 2.0) l_0_8_4) l_0_8_7) ?x40130) ?x40133) ?x40136) ?x40139)))
 (= (- ?x40140 ?x40142) 0.0)))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40174 (* ?x40138 l_0_8_58)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40172 (* ?x40135 l_0_8_57)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40170 (* ?x40129 l_0_8_56)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40168 (* ?x40167 l_0_8_6)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40165 (* ?x39793 l_0_8_5)))
 (let ((?x40173 (+ (+ (- (- (* (* (- 2.0) l_0_8_11) l_0_8_4) ?x40165) ?x40168) ?x40170) ?x40172)))
 (= (+ ?x40173 ?x40174) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40205 (* ?x40138 l_0_8_63)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40203 (* ?x40135 l_0_8_62)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40201 (* ?x40129 l_0_8_61)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40199 (* ?x39381 l_0_8_6)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40197 (* ?x39378 l_0_8_5)))
 (let ((?x40204 (+ (+ (- (- (* (* (- 2.0) l_0_8_16) l_0_8_4) ?x40197) ?x40199) ?x40201) ?x40203)))
 (= (+ ?x40204 ?x40205) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40233 (* ?x40138 l_0_8_69)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40231 (* ?x40135 l_0_8_68)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40229 (* ?x40129 l_0_8_67)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40227 (* ?x40226 l_0_8_6)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40224 (* ?x39923 l_0_8_5)))
 (let ((?x40232 (+ (+ (- (- (* (* (- 2.0) l_0_8_22) l_0_8_4) ?x40224) ?x40227) ?x40229) ?x40231)))
 (= (+ ?x40232 ?x40233) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40266 (* ?x40138 l_0_8_76)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40264 (* ?x40135 l_0_8_75)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40262 (* ?x40129 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40260 (* ?x40259 l_0_8_6)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40257 (* ?x40256 l_0_8_5)))
 (let ((?x40265 (+ (+ (- (- (* (* (- 2.0) l_0_8_29) l_0_8_4) ?x40257) ?x40260) ?x40262) ?x40264)))
 (= (+ ?x40265 ?x40266) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40304 (* ?x40138 l_0_8_84)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40302 (* ?x40135 l_0_8_83)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40300 (* ?x40129 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40298 (* ?x40297 l_0_8_6)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40289 (* ?x40288 l_0_8_5)))
 (let ((?x40303 (+ (+ (- (- (* (* (- 2.0) l_0_8_37) l_0_8_4) ?x40289) ?x40298) ?x40300) ?x40302)))
 (= (+ ?x40303 ?x40304) 0.0)))))))))))))
(assert
 (let ((?x40339 (* l_0_8_9 l_0_8_9)))
 (let ((?x40337 (* l_0_8_8 l_0_8_8)))
 (let ((?x40335 (* l_0_8_7 l_0_8_7)))
 (let ((?x40333 (* l_0_8_55 l_0_8_55)))
 (let ((?x40331 (* l_0_8_54 l_0_8_54)))
 (let ((?x40329 (* l_0_8_53 l_0_8_53)))
 (let ((?x40332 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_52 l_0_8_52)) ?x40329) ?x40331)))
 (= (- (- (- (+ ?x40332 ?x40333) ?x40335) ?x40337) ?x40339) 0.0)))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40370 (* ?x40369 l_0_8_59)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40367 (* ?x40366 l_0_8_58)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40364 (* ?x40363 l_0_8_57)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40361 (* ?x40360 l_0_8_56)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40358 (* ?x40167 l_0_8_9)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40356 (* ?x39793 l_0_8_8)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x40354 (* ?x39790 l_0_8_7)))
 (let ((?x40362 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_14) ?x40354) ?x40356) ?x40358) ?x40361)))
 (= (+ (+ (+ ?x40362 ?x40364) ?x40367) ?x40370) 0.0)))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40409 (* ?x40369 l_0_8_64)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40407 (* ?x40366 l_0_8_63)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40405 (* ?x40363 l_0_8_62)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40403 (* ?x40360 l_0_8_61)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40401 (* ?x39381 l_0_8_9)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40392 (* ?x39378 l_0_8_8)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x40388 (* ?x39375 l_0_8_7)))
 (let ((?x40404 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) ?x40388) ?x40392) ?x40401) ?x40403)))
 (= (+ (+ (+ ?x40404 ?x40405) ?x40407) ?x40409) 0.0)))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x39429 (* ?x39428 l_0_8_79)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x39426 (* ?x39425 l_0_8_78)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x39423 (* ?x39422 l_0_8_77)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x39420 (* ?x39419 l_0_8_76)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x39417 (* ?x39416 l_0_8_75)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x39414 (* ?x39413 l_0_8_74)))
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40453 (* ?x40369 l_0_8_70)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40451 (* ?x40366 l_0_8_69)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40449 (* ?x40363 l_0_8_68)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40447 (* ?x40360 l_0_8_67)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40445 (* ?x40226 l_0_8_9)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40443 (* ?x39923 l_0_8_8)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x40441 (* ?x40440 l_0_8_7)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x39391 (* ?x39390 l_0_8_34)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x39388 (* ?x39387 l_0_8_33)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x39385 (* ?x39384 l_0_8_32)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x39382 (* ?x39381 l_0_8_31)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39379 (* ?x39378 l_0_8_30)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x39376 (* ?x39375 l_0_8_29)))
 (let ((?x40352 (* (- 2.0) l_0_8_10)))
 (let ((?x28510 (* ?x40352 l_0_8_25)))
 (let ((?x40442 (- (- (- (- (- (- (- ?x28510 ?x39376) ?x39379) ?x39382) ?x39385) ?x39388) ?x39391) ?x40441)))
 (let ((?x40455 (+ (+ (+ (+ (+ (- (- ?x40442 ?x40443) ?x40445) ?x40447) ?x40449) ?x40451) ?x40453) ?x39414)))
 (= (+ (+ (+ (+ (+ ?x40455 ?x39417) ?x39420) ?x39423) ?x39426) ?x39429) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40505 (* ?x40369 l_0_8_77)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40503 (* ?x40366 l_0_8_76)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40501 (* ?x40363 l_0_8_75)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40499 (* ?x40360 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40497 (* ?x40259 l_0_8_9)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40495 (* ?x40256 l_0_8_8)))
 (let ((?x40492 (* 2.0 l_0_8_29)))
 (let ((?x40493 (* ?x40492 l_0_8_7)))
 (let ((?x40500 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_32) ?x40493) ?x40495) ?x40497) ?x40499)))
 (= (+ (+ (+ ?x40500 ?x40501) ?x40503) ?x40505) 0.0)))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40541 (* ?x40369 l_0_8_85)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40539 (* ?x40366 l_0_8_84)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40537 (* ?x40363 l_0_8_83)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40535 (* ?x40360 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40533 (* ?x40297 l_0_8_9)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40524 (* ?x40288 l_0_8_8)))
 (let ((?x28571 (* 2.0 l_0_8_37)))
 (let ((?x40521 (* ?x28571 l_0_8_7)))
 (let ((?x40352 (* (- 2.0) l_0_8_10)))
 (let ((?x28569 (* ?x40352 l_0_8_40)))
 (let ((?x40542 (+ (+ (+ (+ (- (- (- ?x28569 ?x40521) ?x40524) ?x40533) ?x40535) ?x40537) ?x40539) ?x40541)))
 (= ?x40542 0.0)))))))))))))))))))
(assert
 (let ((?x40589 (* l_0_8_60 l_0_8_60)))
 (let ((?x40587 (* l_0_8_59 l_0_8_59)))
 (let ((?x40585 (* l_0_8_58 l_0_8_58)))
 (let ((?x40583 (* l_0_8_57 l_0_8_57)))
 (let ((?x40581 (* l_0_8_56 l_0_8_56)))
 (let ((?x40579 (* l_0_8_15 l_0_8_15)))
 (let ((?x40577 (* l_0_8_14 l_0_8_14)))
 (let ((?x40568 (* l_0_8_13 l_0_8_13)))
 (let ((?x40578 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x40568) ?x40577)))
 (= (+ (+ (+ (+ (+ (- ?x40578 ?x40579) ?x40581) ?x40583) ?x40585) ?x40587) ?x40589) 0.0)))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40634 (* ?x40633 l_0_8_65)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40631 (* ?x40630 l_0_8_64)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40628 (* ?x40627 l_0_8_63)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40625 (* ?x40624 l_0_8_62)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40622 (* ?x40621 l_0_8_61)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40619 (* ?x40618 l_0_8_20)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40616 (* ?x40615 l_0_8_19)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40613 (* ?x40167 l_0_8_18)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40611 (* ?x39793 l_0_8_17)))
 (let ((?x40620 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_16) ?x40611) ?x40613) ?x40616) ?x40619)))
 (= (+ (+ (+ (+ (+ ?x40620 ?x40622) ?x40625) ?x40628) ?x40631) ?x40634) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40681 (* ?x40633 l_0_8_71)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40679 (* ?x40630 l_0_8_70)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40677 (* ?x40627 l_0_8_69)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40675 (* ?x40624 l_0_8_68)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40673 (* ?x40621 l_0_8_67)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40671 (* ?x40618 l_0_8_26)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40661 (* ?x40615 l_0_8_25)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40658 (* ?x40167 l_0_8_24)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40654 (* ?x39793 l_0_8_23)))
 (let ((?x40672 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_22) ?x40654) ?x40658) ?x40661) ?x40671)))
 (= (+ (+ (+ (+ (+ ?x40672 ?x40673) ?x40675) ?x40677) ?x40679) ?x40681) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40728 (* ?x40633 l_0_8_78)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40726 (* ?x40630 l_0_8_77)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40724 (* ?x40627 l_0_8_76)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40722 (* ?x40624 l_0_8_75)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40720 (* ?x40621 l_0_8_74)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40718 (* ?x40618 l_0_8_33)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40708 (* ?x40615 l_0_8_32)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40705 (* ?x40167 l_0_8_31)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x28614 (* ?x39793 l_0_8_30)))
 (let ((?x40719 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_29) ?x28614) ?x40705) ?x40708) ?x40718)))
 (= (+ (+ (+ (+ (+ ?x40719 ?x40720) ?x40722) ?x40724) ?x40726) ?x40728) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40779 (* ?x40633 l_0_8_86)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40777 (* ?x40630 l_0_8_85)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40775 (* ?x40627 l_0_8_84)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40773 (* ?x40624 l_0_8_83)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40771 (* ?x40621 l_0_8_82)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40769 (* ?x40618 l_0_8_41)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40759 (* ?x40615 l_0_8_40)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40756 (* ?x40167 l_0_8_39)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40752 (* ?x39793 l_0_8_38)))
 (let ((?x40770 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_37) ?x40752) ?x40756) ?x40759) ?x40769)))
 (= (+ (+ (+ (+ (+ ?x40770 ?x40771) ?x40773) ?x40775) ?x40777) ?x40779) 0.0)))))))))))))))))))))
(assert
 (let ((?x40837 (* l_0_8_66 l_0_8_66)))
 (let ((?x40835 (* l_0_8_65 l_0_8_65)))
 (let ((?x40833 (* l_0_8_64 l_0_8_64)))
 (let ((?x40831 (* l_0_8_63 l_0_8_63)))
 (let ((?x40829 (* l_0_8_62 l_0_8_62)))
 (let ((?x40827 (* l_0_8_61 l_0_8_61)))
 (let ((?x40825 (* l_0_8_21 l_0_8_21)))
 (let ((?x40823 (* l_0_8_20 l_0_8_20)))
 (let ((?x40821 (* l_0_8_19 l_0_8_19)))
 (let ((?x40811 (* l_0_8_18 l_0_8_18)))
 (let ((?x40822 (- (- (- (* (- l_0_8_16) l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40811) ?x40821)))
 (let ((?x40836 (+ (+ (+ (+ (+ (- (- ?x40822 ?x40823) ?x40825) ?x40827) ?x40829) ?x40831) ?x40833) ?x40835)))
 (= (+ ?x40836 ?x40837) 0.0))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40881 (* ?x39428 l_0_8_72)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40879 (* ?x39425 l_0_8_71)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40877 (* ?x39422 l_0_8_70)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40875 (* ?x39419 l_0_8_69)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40873 (* ?x39416 l_0_8_68)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40871 (* ?x39413 l_0_8_67)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40869 (* ?x39390 l_0_8_27)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40867 (* ?x39387 l_0_8_26)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40865 (* ?x39384 l_0_8_25)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40863 (* ?x39381 l_0_8_24)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40861 (* ?x39378 l_0_8_23)))
 (let ((?x40868 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_22) ?x40861) ?x40863) ?x40865) ?x40867)))
 (let ((?x40882 (+ (+ (+ (+ (+ (+ (- ?x40868 ?x40869) ?x40871) ?x40873) ?x40875) ?x40877) ?x40879) ?x40881)))
 (= ?x40882 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x39429 (* ?x39428 l_0_8_79)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x39426 (* ?x39425 l_0_8_78)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x39423 (* ?x39422 l_0_8_77)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x39420 (* ?x39419 l_0_8_76)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x39417 (* ?x39416 l_0_8_75)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x39414 (* ?x39413 l_0_8_74)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x39391 (* ?x39390 l_0_8_34)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x39388 (* ?x39387 l_0_8_33)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x39385 (* ?x39384 l_0_8_32)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x39382 (* ?x39381 l_0_8_31)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39379 (* ?x39378 l_0_8_30)))
 (let ((?x40918 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_29) ?x39379) ?x39382) ?x39385) ?x39388)))
 (let ((?x40925 (+ (+ (+ (+ (+ (+ (- ?x40918 ?x39391) ?x39414) ?x39417) ?x39420) ?x39423) ?x39426) ?x39429)))
 (= ?x40925 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40960 (* ?x39428 l_0_8_87)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40958 (* ?x39425 l_0_8_86)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40956 (* ?x39422 l_0_8_85)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40954 (* ?x39419 l_0_8_84)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40952 (* ?x39416 l_0_8_83)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40950 (* ?x39413 l_0_8_82)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40948 (* ?x39390 l_0_8_42)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40946 (* ?x39387 l_0_8_41)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40944 (* ?x39384 l_0_8_40)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40942 (* ?x39381 l_0_8_39)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40940 (* ?x39378 l_0_8_38)))
 (let ((?x40947 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_37) ?x40940) ?x40942) ?x40944) ?x40946)))
 (let ((?x40961 (+ (+ (+ (+ (+ (+ (- ?x40947 ?x40948) ?x40950) ?x40952) ?x40954) ?x40956) ?x40958) ?x40960)))
 (= ?x40961 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41028 (* l_0_8_73 l_0_8_73)))
 (let ((?x41026 (* l_0_8_72 l_0_8_72)))
 (let ((?x41024 (* l_0_8_71 l_0_8_71)))
 (let ((?x41022 (* l_0_8_70 l_0_8_70)))
 (let ((?x41020 (* l_0_8_69 l_0_8_69)))
 (let ((?x41018 (* l_0_8_68 l_0_8_68)))
 (let ((?x41016 (* l_0_8_67 l_0_8_67)))
 (let ((?x41014 (* l_0_8_28 l_0_8_28)))
 (let ((?x41012 (* l_0_8_27 l_0_8_27)))
 (let ((?x41010 (* l_0_8_26 l_0_8_26)))
 (let ((?x40999 (* l_0_8_25 l_0_8_25)))
 (let ((?x40996 (* l_0_8_24 l_0_8_24)))
 (let ((?x41009 (- (- (- (* (- l_0_8_22) l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40996) ?x40999)))
 (let ((?x41023 (+ (+ (+ (+ (- (- (- ?x41009 ?x41010) ?x41012) ?x41014) ?x41016) ?x41018) ?x41020) ?x41022)))
 (= (+ (+ (+ ?x41023 ?x41024) ?x41026) ?x41028) 0.0))))))))))))))))
(assert
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41093 (* ?x41092 l_0_8_80)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41090 (* ?x41089 l_0_8_79)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41087 (* ?x41086 l_0_8_78)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41084 (* ?x41083 l_0_8_77)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41081 (* ?x41080 l_0_8_76)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41078 (* ?x41077 l_0_8_75)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41075 (* ?x41074 l_0_8_74)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41072 (* ?x41071 l_0_8_35)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41069 (* ?x41068 l_0_8_34)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41066 (* ?x41065 l_0_8_33)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41063 (* ?x41062 l_0_8_32)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41060 (* ?x40226 l_0_8_31)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41058 (* ?x39923 l_0_8_30)))
 (let ((?x41067 (- (- (- (- (* (* (- 2.0) l_0_8_22) l_0_8_29) ?x41058) ?x41060) ?x41063) ?x41066)))
 (let ((?x41088 (+ (+ (+ (+ (+ (- (- ?x41067 ?x41069) ?x41072) ?x41075) ?x41078) ?x41081) ?x41084) ?x41087)))
 (= (+ (+ ?x41088 ?x41090) ?x41093) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41165 (* ?x41092 l_0_8_88)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41163 (* ?x41089 l_0_8_87)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41161 (* ?x41086 l_0_8_86)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41159 (* ?x41083 l_0_8_85)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41157 (* ?x41080 l_0_8_84)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41155 (* ?x41077 l_0_8_83)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41153 (* ?x41074 l_0_8_82)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41151 (* ?x41071 l_0_8_43)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41149 (* ?x41068 l_0_8_42)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41147 (* ?x41065 l_0_8_41)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41135 (* ?x41062 l_0_8_40)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41131 (* ?x40226 l_0_8_39)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41127 (* ?x39923 l_0_8_38)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x41125 (* ?x40440 l_0_8_37)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39529 (* ?x39528 l_0_8_169)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39526 (* ?x39525 l_0_8_168)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39523 (* ?x39522 l_0_8_167)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39520 (* ?x39519 l_0_8_166)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39517 (* ?x39516 l_0_8_165)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39514 (* ?x39513 l_0_8_164)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39511 (* ?x39510 l_0_8_124)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39508 (* ?x39507 l_0_8_123)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39505 (* ?x39504 l_0_8_122)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39502 (* ?x39501 l_0_8_121)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39499 (* ?x39498 l_0_8_120)))
 (let ((?x39974 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_119) ?x39499) ?x39502) ?x39505) ?x39508)))
 (let ((?x39981 (+ (+ (+ (+ (+ (+ (- ?x39974 ?x39511) ?x39514) ?x39517) ?x39520) ?x39523) ?x39526) ?x39529)))
 (let ((?x41152 (- (- (- (- (- (- (- ?x39981 ?x41125) ?x41127) ?x41131) ?x41135) ?x41147) ?x41149) ?x41151)))
 (let ((?x41166 (+ (+ (+ (+ (+ (+ (+ ?x41152 ?x41153) ?x41155) ?x41157) ?x41159) ?x41161) ?x41163) ?x41165)))
 (= ?x41166 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41242 (* l_0_8_81 l_0_8_81)))
 (let ((?x41240 (* l_0_8_80 l_0_8_80)))
 (let ((?x41238 (* l_0_8_79 l_0_8_79)))
 (let ((?x41236 (* l_0_8_78 l_0_8_78)))
 (let ((?x41234 (* l_0_8_77 l_0_8_77)))
 (let ((?x41232 (* l_0_8_76 l_0_8_76)))
 (let ((?x41230 (* l_0_8_75 l_0_8_75)))
 (let ((?x41228 (* l_0_8_74 l_0_8_74)))
 (let ((?x41226 (* l_0_8_36 l_0_8_36)))
 (let ((?x41224 (* l_0_8_35 l_0_8_35)))
 (let ((?x41222 (* l_0_8_34 l_0_8_34)))
 (let ((?x41220 (* l_0_8_33 l_0_8_33)))
 (let ((?x41218 (* l_0_8_32 l_0_8_32)))
 (let ((?x41216 (* l_0_8_31 l_0_8_31)))
 (let ((?x41219 (- (- (- (* (- l_0_8_29) l_0_8_29) (* l_0_8_30 l_0_8_30)) ?x41216) ?x41218)))
 (let ((?x41233 (+ (+ (+ (- (- (- (- ?x41219 ?x41220) ?x41222) ?x41224) ?x41226) ?x41228) ?x41230) ?x41232)))
 (= (+ (+ (+ (+ (+ ?x41233 ?x41234) ?x41236) ?x41238) ?x41240) ?x41242) 0.0))))))))))))))))))
(assert
 (let ((?x41312 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41309 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41306 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41303 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41300 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41297 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41294 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41291 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41288 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41285 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41282 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41279 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41276 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x41273 (* ?x40259 l_0_8_39)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x41271 (* ?x40256 l_0_8_38)))
 (let ((?x41280 (- (- (- (- (* (* (- 2.0) l_0_8_29) l_0_8_37) ?x41271) ?x41273) ?x41276) ?x41279)))
 (let ((?x41301 (+ (+ (+ (+ (- (- (- ?x41280 ?x41282) ?x41285) ?x41288) ?x41291) ?x41294) ?x41297) ?x41300)))
 (= (+ (+ (+ (+ ?x41301 ?x41303) ?x41306) ?x41309) ?x41312) 0.0)))))))))))))))))))))
(assert
 (let ((?x41400 (* l_0_8_90 l_0_8_90)))
 (let ((?x41398 (* l_0_8_89 l_0_8_89)))
 (let ((?x41396 (* l_0_8_88 l_0_8_88)))
 (let ((?x41394 (* l_0_8_87 l_0_8_87)))
 (let ((?x41392 (* l_0_8_86 l_0_8_86)))
 (let ((?x41390 (* l_0_8_85 l_0_8_85)))
 (let ((?x41388 (* l_0_8_84 l_0_8_84)))
 (let ((?x41386 (* l_0_8_83 l_0_8_83)))
 (let ((?x41384 (* l_0_8_82 l_0_8_82)))
 (let ((?x41382 (* l_0_8_45 l_0_8_45)))
 (let ((?x41380 (* l_0_8_44 l_0_8_44)))
 (let ((?x41378 (* l_0_8_43 l_0_8_43)))
 (let ((?x41376 (* l_0_8_42 l_0_8_42)))
 (let ((?x41363 (* l_0_8_41 l_0_8_41)))
 (let ((?x41360 (* l_0_8_40 l_0_8_40)))
 (let ((?x41356 (* l_0_8_39 l_0_8_39)))
 (let ((?x41362 (- (- (- (* (- l_0_8_37) l_0_8_37) (* l_0_8_38 l_0_8_38)) ?x41356) ?x41360)))
 (let ((?x41387 (+ (+ (- (- (- (- (- ?x41362 ?x41363) ?x41376) ?x41378) ?x41380) ?x41382) ?x41384) ?x41386)))
 (let ((?x41401 (+ (+ (+ (+ (+ (+ (+ ?x41387 ?x41388) ?x41390) ?x41392) ?x41394) ?x41396) ?x41398) ?x41400)))
 (= ?x41401 0.0)))))))))))))))))))))
(assert
 (let ((?x39284 (* l_0_8_46 l_0_8_46)))
 (let ((?x41434 (- (- (* (- l_0_8_1) l_0_8_1) (* (* 2.0 l_0_8_187) l_0_8_202)) (* (* 2.0 l_0_8_188) l_0_8_203))))
 (let ((?x41440 (- (- ?x41434 (* (* 2.0 l_0_8_189) l_0_8_204)) (* (* 2.0 l_0_8_190) l_0_8_205))))
 (let ((?x41446 (- (- ?x41440 (* (* 2.0 l_0_8_277) l_0_8_292)) (* (* 2.0 l_0_8_278) l_0_8_293))))
 (let ((?x41452 (- (- ?x41446 (* (* 2.0 l_0_8_279) l_0_8_294)) (* (* 2.0 l_0_8_280) l_0_8_295))))
 (let ((?x41458 (- (- ?x41452 (* (* 2.0 l_0_8_322) l_0_8_337)) (* (* 2.0 l_0_8_323) l_0_8_338))))
 (let ((?x41464 (- (- ?x41458 (* (* 2.0 l_0_8_324) l_0_8_339)) (* (* 2.0 l_0_8_325) l_0_8_340))))
 (let ((?x41470 (- (- ?x41464 (* (* 2.0 l_0_8_367) l_0_8_382)) (* (* 2.0 l_0_8_368) l_0_8_383))))
 (let ((?x41476 (- (- ?x41470 (* (* 2.0 l_0_8_369) l_0_8_384)) (* (* 2.0 l_0_8_370) l_0_8_385))))
 (let ((?x41482 (- (- ?x41476 (* (* 2.0 l_0_8_412) l_0_8_427)) (* (* 2.0 l_0_8_413) l_0_8_428))))
 (let ((?x41488 (- (- ?x41482 (* (* 2.0 l_0_8_414) l_0_8_429)) (* (* 2.0 l_0_8_415) l_0_8_430))))
 (= (+ ?x41488 ?x39284) 0.0)))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39361 (* ?x39360 l_0_8_47)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39353 (* ?x28209 l_0_8_2)))
 (= (+ ?x39353 ?x39361) 0.0))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40453 (* ?x40369 l_0_8_70)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40451 (* ?x40366 l_0_8_69)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40449 (* ?x40363 l_0_8_68)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40447 (* ?x40360 l_0_8_67)))
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39411 (* ?x39360 l_0_8_49)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40445 (* ?x40226 l_0_8_9)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x41588 (* ?x41587 l_0_8_250)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x41585 (* ?x41584 l_0_8_249)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x41582 (* ?x41581 l_0_8_248)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x41579 (* ?x41578 l_0_8_247)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40443 (* ?x39923 l_0_8_8)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x40441 (* ?x40440 l_0_8_7)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39374 (* ?x28209 l_0_8_4)))
 (let ((?x41580 (- (+ (+ (+ ?x39374 (* (* 2.0 l_0_8_10) l_0_8_25)) ?x40441) ?x40443) ?x41579)))
 (let ((?x41593 (- (- (+ (+ (- (- (- ?x41580 ?x41582) ?x41585) ?x41588) ?x40445) ?x39411) ?x40447) ?x40449)))
 (= (- (- ?x41593 ?x40451) ?x40453) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39486 (* ?x39360 l_0_8_52)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) ?x39486) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39537 (* ?x39360 l_0_8_56)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x41588 (* ?x41587 l_0_8_250)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x41585 (* ?x41584 l_0_8_249)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x41582 (* ?x41581 l_0_8_248)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x41579 (* ?x41578 l_0_8_247)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41636 (* ?x39727 l_0_8_160)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41634 (* ?x39724 l_0_8_159)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41632 (* ?x39721 l_0_8_158)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41630 (* ?x39718 l_0_8_157)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x41628 (* ?x41627 l_0_8_99)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x41625 (* ?x41624 l_0_8_98)))
 (let ((?x41621 (* 2.0 l_0_8_112)))
 (let ((?x41622 (* ?x41621 l_0_8_97)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39490 (* ?x28209 l_0_8_11)))
 (let ((?x41629 (+ (+ (+ (+ ?x39490 (* (* 2.0 l_0_8_100) l_0_8_115)) ?x41622) ?x41625) ?x41628)))
 (let ((?x41640 (+ (+ (+ (- (- (- (- ?x41629 ?x41630) ?x41632) ?x41634) ?x41636) ?x41579) ?x41582) ?x41585)))
 (= (+ (+ ?x41640 ?x41588) ?x39537) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39574 (* ?x39360 l_0_8_61)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x39574) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39580 (* ?x39360 l_0_8_67)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_22) ?x39580) 0.0))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39590 (* ?x39360 l_0_8_74)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_29) ?x39590) 0.0))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x28836 (* ?x28835 l_0_8_97)))
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39600 (* ?x39360 l_0_8_82)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x28837 (* ?x39357 l_0_8_142)))
 (let ((?x28209 (* (- 2.0) l_0_8_1)))
 (let ((?x39598 (* ?x28209 l_0_8_37)))
 (= (- (+ (+ ?x39598 ?x28837) ?x39600) ?x28836) 0.0))))))))))
(assert
 (let ((?x39629 (* l_0_8_48 l_0_8_48)))
 (let ((?x39627 (* l_0_8_47 l_0_8_47)))
 (let ((?x14949 (+ (+ (- (* (- l_0_8_2) l_0_8_2) (* l_0_8_3 l_0_8_3)) ?x39627) ?x39629)))
 (= ?x14949 0.0)))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39677 (* ?x39676 l_0_8_50)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39674 (* ?x39673 l_0_8_49)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39671 (* ?x39670 l_0_8_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_4) ?x39671) ?x39674) ?x39677) 0.0))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39736 (* ?x39676 l_0_8_53)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39734 (* ?x39673 l_0_8_52)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39732 (* ?x39670 l_0_8_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_7) ?x39732) ?x39734) ?x39736) 0.0))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39813 (* ?x39676 l_0_8_57)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39811 (* ?x39673 l_0_8_56)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x39794 (* ?x39793 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_11) l_0_8_2) ?x39794) ?x39811) ?x39813) 0.0))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39870 (* ?x39676 l_0_8_62)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39868 (* ?x39673 l_0_8_61)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39866 (* ?x39378 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_16) l_0_8_2) ?x39866) ?x39868) ?x39870) 0.0))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39928 (* ?x39676 l_0_8_68)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39926 (* ?x39673 l_0_8_67)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x39924 (* ?x39923 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_22) ?x39924) ?x39926) ?x39928) 0.0))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39988 (* ?x39676 l_0_8_75)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39986 (* ?x39673 l_0_8_74)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39984 (* ?x39670 l_0_8_30)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39982 (* ?x39667 l_0_8_29)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41636 (* ?x39727 l_0_8_160)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41634 (* ?x39724 l_0_8_159)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41632 (* ?x39721 l_0_8_158)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41630 (* ?x39718 l_0_8_157)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x41628 (* ?x41627 l_0_8_99)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x41625 (* ?x41624 l_0_8_98)))
 (let ((?x41621 (* 2.0 l_0_8_112)))
 (let ((?x41622 (* ?x41621 l_0_8_97)))
 (let ((?x41714 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_115) ?x41622) ?x41625) ?x41628) ?x41630)))
 (let ((?x41717 (+ (+ (+ ?x41714 ?x41632) ?x41634) ?x41636)))
 (= (+ (+ (- (- ?x41717 ?x39982) ?x39984) ?x39986) ?x39988) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x41734 (* ?x41733 l_0_8_98)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x41731 (* ?x41730 l_0_8_97)))
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x40048 (* ?x39676 l_0_8_83)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x40046 (* ?x39673 l_0_8_82)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x40044 (* ?x39670 l_0_8_38)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x40042 (* ?x39667 l_0_8_37)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x15023 (* ?x39620 l_0_8_143)))
 (let ((?x41725 (+ (* (* 2.0 l_0_8_137) l_0_8_142) ?x15023)))
 (= (- (- (+ (+ (- (- ?x41725 ?x40042) ?x40044) ?x40046) ?x40048) ?x41731) ?x41734) 0.0)))))))))))))))))
(assert
 (let ((?x40112 (* l_0_8_6 l_0_8_6)))
 (let ((?x40110 (* l_0_8_51 l_0_8_51)))
 (let ((?x40108 (* l_0_8_50 l_0_8_50)))
 (let ((?x40106 (* l_0_8_5 l_0_8_5)))
 (let ((?x40109 (+ (- (+ (* (- l_0_8_4) l_0_8_4) (* l_0_8_49 l_0_8_49)) ?x40106) ?x40108)))
 (= (- (+ ?x40109 ?x40110) ?x40112) 0.0)))))))
(assert
 (let ((?x40142 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40139 (* ?x40138 l_0_8_54)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40136 (* ?x40135 l_0_8_53)))
 (let ((?x40133 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40130 (* ?x40129 l_0_8_52)))
 (let ((?x40140 (+ (+ (- (+ (* (* (- 2.0) l_0_8_4) l_0_8_7) ?x40130) ?x40133) ?x40136) ?x40139)))
 (= (- ?x40140 ?x40142) 0.0)))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40174 (* ?x40138 l_0_8_58)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40172 (* ?x40135 l_0_8_57)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40170 (* ?x40129 l_0_8_56)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40168 (* ?x40167 l_0_8_6)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40165 (* ?x39793 l_0_8_5)))
 (let ((?x40173 (+ (+ (- (- (* (* (- 2.0) l_0_8_11) l_0_8_4) ?x40165) ?x40168) ?x40170) ?x40172)))
 (= (+ ?x40173 ?x40174) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40205 (* ?x40138 l_0_8_63)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40203 (* ?x40135 l_0_8_62)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40201 (* ?x40129 l_0_8_61)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40199 (* ?x39381 l_0_8_6)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40197 (* ?x39378 l_0_8_5)))
 (let ((?x40204 (+ (+ (- (- (* (* (- 2.0) l_0_8_16) l_0_8_4) ?x40197) ?x40199) ?x40201) ?x40203)))
 (= (+ ?x40204 ?x40205) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40233 (* ?x40138 l_0_8_69)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40231 (* ?x40135 l_0_8_68)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40229 (* ?x40129 l_0_8_67)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40227 (* ?x40226 l_0_8_6)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40224 (* ?x39923 l_0_8_5)))
 (let ((?x40232 (+ (+ (- (- (* (* (- 2.0) l_0_8_22) l_0_8_4) ?x40224) ?x40227) ?x40229) ?x40231)))
 (= (+ ?x40232 ?x40233) 0.0)))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40266 (* ?x40138 l_0_8_76)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40264 (* ?x40135 l_0_8_75)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40262 (* ?x40129 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40260 (* ?x40259 l_0_8_6)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40257 (* ?x40256 l_0_8_5)))
 (let ((?x40265 (+ (+ (- (- (* (* (- 2.0) l_0_8_29) l_0_8_4) ?x40257) ?x40260) ?x40262) ?x40264)))
 (= (+ ?x40265 ?x40266) 0.0)))))))))))))
(assert
 (let ((?x41760 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x41757 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x41754 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40304 (* ?x40138 l_0_8_84)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40302 (* ?x40135 l_0_8_83)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40300 (* ?x40129 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40298 (* ?x40297 l_0_8_6)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40289 (* ?x40288 l_0_8_5)))
 (let ((?x28571 (* 2.0 l_0_8_37)))
 (let ((?x41746 (* ?x28571 l_0_8_4)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x41744 (* ?x39664 l_0_8_144)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x15142 (* ?x39661 l_0_8_143)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x13884 (* ?x39658 l_0_8_142)))
 (let ((?x41745 (+ (+ ?x13884 ?x15142) ?x41744)))
 (let ((?x41755 (- (+ (+ (+ (- (- (- ?x41745 ?x41746) ?x40289) ?x40298) ?x40300) ?x40302) ?x40304) ?x41754)))
 (= (- (- ?x41755 ?x41757) ?x41760) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x40339 (* l_0_8_9 l_0_8_9)))
 (let ((?x40337 (* l_0_8_8 l_0_8_8)))
 (let ((?x40335 (* l_0_8_7 l_0_8_7)))
 (let ((?x40333 (* l_0_8_55 l_0_8_55)))
 (let ((?x40331 (* l_0_8_54 l_0_8_54)))
 (let ((?x40329 (* l_0_8_53 l_0_8_53)))
 (let ((?x40332 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_52 l_0_8_52)) ?x40329) ?x40331)))
 (= (- (- (- (+ ?x40332 ?x40333) ?x40335) ?x40337) ?x40339) 0.0)))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40370 (* ?x40369 l_0_8_59)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40367 (* ?x40366 l_0_8_58)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40364 (* ?x40363 l_0_8_57)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40361 (* ?x40360 l_0_8_56)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40358 (* ?x40167 l_0_8_9)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40356 (* ?x39793 l_0_8_8)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x40354 (* ?x39790 l_0_8_7)))
 (let ((?x40362 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_14) ?x40354) ?x40356) ?x40358) ?x40361)))
 (= (+ (+ (+ ?x40362 ?x40364) ?x40367) ?x40370) 0.0)))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40409 (* ?x40369 l_0_8_64)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40407 (* ?x40366 l_0_8_63)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40405 (* ?x40363 l_0_8_62)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40403 (* ?x40360 l_0_8_61)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40401 (* ?x39381 l_0_8_9)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40392 (* ?x39378 l_0_8_8)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x40388 (* ?x39375 l_0_8_7)))
 (let ((?x40404 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) ?x40388) ?x40392) ?x40401) ?x40403)))
 (= (+ (+ (+ ?x40404 ?x40405) ?x40407) ?x40409) 0.0)))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40453 (* ?x40369 l_0_8_70)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40451 (* ?x40366 l_0_8_69)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40449 (* ?x40363 l_0_8_68)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40447 (* ?x40360 l_0_8_67)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40445 (* ?x40226 l_0_8_9)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40443 (* ?x39923 l_0_8_8)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x40441 (* ?x40440 l_0_8_7)))
 (let ((?x40352 (* (- 2.0) l_0_8_10)))
 (let ((?x28510 (* ?x40352 l_0_8_25)))
 (let ((?x41786 (+ (+ (+ (+ (- (- (- ?x28510 ?x40441) ?x40443) ?x40445) ?x40447) ?x40449) ?x40451) ?x40453)))
 (= ?x41786 0.0)))))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40505 (* ?x40369 l_0_8_77)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40503 (* ?x40366 l_0_8_76)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40501 (* ?x40363 l_0_8_75)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40499 (* ?x40360 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40497 (* ?x40259 l_0_8_9)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40495 (* ?x40256 l_0_8_8)))
 (let ((?x40492 (* 2.0 l_0_8_29)))
 (let ((?x40493 (* ?x40492 l_0_8_7)))
 (let ((?x40500 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_32) ?x40493) ?x40495) ?x40497) ?x40499)))
 (= (+ (+ (+ ?x40500 ?x40501) ?x40503) ?x40505) 0.0)))))))))))))))))
(assert
 (let ((?x41817 (* l_0_8_99 l_0_8_99)))
 (let ((?x41815 (* l_0_8_98 l_0_8_98)))
 (let ((?x41813 (* l_0_8_97 l_0_8_97)))
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40541 (* ?x40369 l_0_8_85)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40539 (* ?x40366 l_0_8_84)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40537 (* ?x40363 l_0_8_83)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40535 (* ?x40360 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40533 (* ?x40297 l_0_8_9)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40524 (* ?x40288 l_0_8_8)))
 (let ((?x28571 (* 2.0 l_0_8_37)))
 (let ((?x40521 (* ?x28571 l_0_8_7)))
 (let ((?x41804 (* l_0_8_145 l_0_8_145)))
 (let ((?x41802 (* l_0_8_144 l_0_8_144)))
 (let ((?x41800 (* l_0_8_143 l_0_8_143)))
 (let ((?x41798 (* l_0_8_142 l_0_8_142)))
 (let ((?x41799 (+ (- (* (* (- 2.0) l_0_8_10) l_0_8_40) (* l_0_8_100 l_0_8_100)) ?x41798)))
 (let ((?x41809 (+ (- (- (- (+ (+ (+ ?x41799 ?x41800) ?x41802) ?x41804) ?x40521) ?x40524) ?x40533) ?x40535)))
 (= (- (- (- (+ (+ (+ ?x41809 ?x40537) ?x40539) ?x40541) ?x41813) ?x41815) ?x41817) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x40589 (* l_0_8_60 l_0_8_60)))
 (let ((?x40587 (* l_0_8_59 l_0_8_59)))
 (let ((?x40585 (* l_0_8_58 l_0_8_58)))
 (let ((?x40583 (* l_0_8_57 l_0_8_57)))
 (let ((?x40581 (* l_0_8_56 l_0_8_56)))
 (let ((?x40579 (* l_0_8_15 l_0_8_15)))
 (let ((?x40577 (* l_0_8_14 l_0_8_14)))
 (let ((?x40568 (* l_0_8_13 l_0_8_13)))
 (let ((?x40578 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x40568) ?x40577)))
 (= (+ (+ (+ (+ (+ (- ?x40578 ?x40579) ?x40581) ?x40583) ?x40585) ?x40587) ?x40589) 0.0)))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40634 (* ?x40633 l_0_8_65)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40631 (* ?x40630 l_0_8_64)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40628 (* ?x40627 l_0_8_63)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40625 (* ?x40624 l_0_8_62)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40622 (* ?x40621 l_0_8_61)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40619 (* ?x40618 l_0_8_20)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40616 (* ?x40615 l_0_8_19)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40613 (* ?x40167 l_0_8_18)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40611 (* ?x39793 l_0_8_17)))
 (let ((?x40620 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_16) ?x40611) ?x40613) ?x40616) ?x40619)))
 (= (+ (+ (+ (+ (+ ?x40620 ?x40622) ?x40625) ?x40628) ?x40631) ?x40634) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40681 (* ?x40633 l_0_8_71)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40679 (* ?x40630 l_0_8_70)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40677 (* ?x40627 l_0_8_69)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40675 (* ?x40624 l_0_8_68)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40673 (* ?x40621 l_0_8_67)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40671 (* ?x40618 l_0_8_26)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40661 (* ?x40615 l_0_8_25)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40658 (* ?x40167 l_0_8_24)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40654 (* ?x39793 l_0_8_23)))
 (let ((?x40672 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_22) ?x40654) ?x40658) ?x40661) ?x40671)))
 (= (+ (+ (+ (+ (+ ?x40672 ?x40673) ?x40675) ?x40677) ?x40679) ?x40681) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40728 (* ?x40633 l_0_8_78)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40726 (* ?x40630 l_0_8_77)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40724 (* ?x40627 l_0_8_76)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40722 (* ?x40624 l_0_8_75)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40720 (* ?x40621 l_0_8_74)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40718 (* ?x40618 l_0_8_33)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40708 (* ?x40615 l_0_8_32)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40705 (* ?x40167 l_0_8_31)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x28614 (* ?x39793 l_0_8_30)))
 (let ((?x40719 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_29) ?x28614) ?x40705) ?x40708) ?x40718)))
 (= (+ (+ (+ (+ (+ ?x40719 ?x40720) ?x40722) ?x40724) ?x40726) ?x40728) 0.0)))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40779 (* ?x40633 l_0_8_86)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40777 (* ?x40630 l_0_8_85)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40775 (* ?x40627 l_0_8_84)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40773 (* ?x40624 l_0_8_83)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40771 (* ?x40621 l_0_8_82)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40769 (* ?x40618 l_0_8_41)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41850 (* ?x39727 l_0_8_149)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41848 (* ?x39724 l_0_8_148)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41846 (* ?x39721 l_0_8_147)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41844 (* ?x39718 l_0_8_146)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40759 (* ?x40615 l_0_8_40)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40756 (* ?x40167 l_0_8_39)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40752 (* ?x39793 l_0_8_38)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x41839 (* ?x39790 l_0_8_37)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x41837 (* ?x39781 l_0_8_99)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x29038 (* ?x39769 l_0_8_98)))
 (let ((?x15177 (* 2.0 l_0_8_101)))
 (let ((?x15179 (* ?x15177 l_0_8_97)))
 (let ((?x41838 (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_104) ?x15179) ?x29038) ?x41837)))
 (let ((?x41849 (+ (+ (+ (- (- (- (- ?x41838 ?x41839) ?x40752) ?x40756) ?x40759) ?x41844) ?x41846) ?x41848)))
 (let ((?x41857 (+ (+ (+ (+ (+ (- (+ ?x41849 ?x41850) ?x40769) ?x40771) ?x40773) ?x40775) ?x40777) ?x40779)))
 (= ?x41857 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40837 (* l_0_8_66 l_0_8_66)))
 (let ((?x40835 (* l_0_8_65 l_0_8_65)))
 (let ((?x40833 (* l_0_8_64 l_0_8_64)))
 (let ((?x40831 (* l_0_8_63 l_0_8_63)))
 (let ((?x40829 (* l_0_8_62 l_0_8_62)))
 (let ((?x40827 (* l_0_8_61 l_0_8_61)))
 (let ((?x40825 (* l_0_8_21 l_0_8_21)))
 (let ((?x40823 (* l_0_8_20 l_0_8_20)))
 (let ((?x40821 (* l_0_8_19 l_0_8_19)))
 (let ((?x40811 (* l_0_8_18 l_0_8_18)))
 (let ((?x40822 (- (- (- (* (- l_0_8_16) l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40811) ?x40821)))
 (let ((?x40836 (+ (+ (+ (+ (+ (- (- ?x40822 ?x40823) ?x40825) ?x40827) ?x40829) ?x40831) ?x40833) ?x40835)))
 (= (+ ?x40836 ?x40837) 0.0))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40881 (* ?x39428 l_0_8_72)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40879 (* ?x39425 l_0_8_71)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40877 (* ?x39422 l_0_8_70)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40875 (* ?x39419 l_0_8_69)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40873 (* ?x39416 l_0_8_68)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40871 (* ?x39413 l_0_8_67)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40869 (* ?x39390 l_0_8_27)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40867 (* ?x39387 l_0_8_26)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40865 (* ?x39384 l_0_8_25)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40863 (* ?x39381 l_0_8_24)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40861 (* ?x39378 l_0_8_23)))
 (let ((?x40868 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_22) ?x40861) ?x40863) ?x40865) ?x40867)))
 (let ((?x40882 (+ (+ (+ (+ (+ (+ (- ?x40868 ?x40869) ?x40871) ?x40873) ?x40875) ?x40877) ?x40879) ?x40881)))
 (= ?x40882 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40960 (* ?x39428 l_0_8_87)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40958 (* ?x39425 l_0_8_86)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40956 (* ?x39422 l_0_8_85)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40954 (* ?x39419 l_0_8_84)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40952 (* ?x39416 l_0_8_83)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40950 (* ?x39413 l_0_8_82)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40948 (* ?x39390 l_0_8_42)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40946 (* ?x39387 l_0_8_41)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40944 (* ?x39384 l_0_8_40)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40942 (* ?x39381 l_0_8_39)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40940 (* ?x39378 l_0_8_38)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x15270 (* ?x39375 l_0_8_37)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x39728 (* ?x39727 l_0_8_154)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x39725 (* ?x39724 l_0_8_153)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x39722 (* ?x39721 l_0_8_152)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x39719 (* ?x39718 l_0_8_151)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39716 (* ?x39501 l_0_8_99)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39714 (* ?x39498 l_0_8_98)))
 (let ((?x39354 (* 2.0 l_0_8_106)))
 (let ((?x39704 (* ?x39354 l_0_8_97)))
 (let ((?x39720 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_109) ?x39704) ?x39714) ?x39716) ?x39719)))
 (let ((?x39729 (+ (+ (+ ?x39720 ?x39722) ?x39725) ?x39728)))
 (let ((?x41884 (+ (- (- (- (- (- (- ?x39729 ?x15270) ?x40940) ?x40942) ?x40944) ?x40946) ?x40948) ?x40950)))
 (= (+ (+ (+ (+ (+ ?x41884 ?x40952) ?x40954) ?x40956) ?x40958) ?x40960) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41028 (* l_0_8_73 l_0_8_73)))
 (let ((?x41026 (* l_0_8_72 l_0_8_72)))
 (let ((?x41024 (* l_0_8_71 l_0_8_71)))
 (let ((?x41022 (* l_0_8_70 l_0_8_70)))
 (let ((?x41020 (* l_0_8_69 l_0_8_69)))
 (let ((?x41018 (* l_0_8_68 l_0_8_68)))
 (let ((?x41016 (* l_0_8_67 l_0_8_67)))
 (let ((?x41014 (* l_0_8_28 l_0_8_28)))
 (let ((?x41012 (* l_0_8_27 l_0_8_27)))
 (let ((?x41010 (* l_0_8_26 l_0_8_26)))
 (let ((?x40999 (* l_0_8_25 l_0_8_25)))
 (let ((?x40996 (* l_0_8_24 l_0_8_24)))
 (let ((?x41009 (- (- (- (* (- l_0_8_22) l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40996) ?x40999)))
 (let ((?x41023 (+ (+ (+ (+ (- (- (- ?x41009 ?x41010) ?x41012) ?x41014) ?x41016) ?x41018) ?x41020) ?x41022)))
 (= (+ (+ (+ ?x41023 ?x41024) ?x41026) ?x41028) 0.0))))))))))))))))
(assert
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41093 (* ?x41092 l_0_8_80)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41090 (* ?x41089 l_0_8_79)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41087 (* ?x41086 l_0_8_78)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41084 (* ?x41083 l_0_8_77)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41081 (* ?x41080 l_0_8_76)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41078 (* ?x41077 l_0_8_75)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41075 (* ?x41074 l_0_8_74)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41072 (* ?x41071 l_0_8_35)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41069 (* ?x41068 l_0_8_34)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41066 (* ?x41065 l_0_8_33)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41063 (* ?x41062 l_0_8_32)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41060 (* ?x40226 l_0_8_31)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41058 (* ?x39923 l_0_8_30)))
 (let ((?x41067 (- (- (- (- (* (* (- 2.0) l_0_8_22) l_0_8_29) ?x41058) ?x41060) ?x41063) ?x41066)))
 (let ((?x41088 (+ (+ (+ (+ (+ (- (- ?x41067 ?x41069) ?x41072) ?x41075) ?x41078) ?x41081) ?x41084) ?x41087)))
 (= (+ (+ ?x41088 ?x41090) ?x41093) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41165 (* ?x41092 l_0_8_88)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41163 (* ?x41089 l_0_8_87)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41161 (* ?x41086 l_0_8_86)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41159 (* ?x41083 l_0_8_85)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41157 (* ?x41080 l_0_8_84)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41155 (* ?x41077 l_0_8_83)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41153 (* ?x41074 l_0_8_82)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41151 (* ?x41071 l_0_8_43)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41149 (* ?x41068 l_0_8_42)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41147 (* ?x41065 l_0_8_41)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41135 (* ?x41062 l_0_8_40)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41131 (* ?x40226 l_0_8_39)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41127 (* ?x39923 l_0_8_38)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x41125 (* ?x40440 l_0_8_37)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41636 (* ?x39727 l_0_8_160)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41634 (* ?x39724 l_0_8_159)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41632 (* ?x39721 l_0_8_158)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41630 (* ?x39718 l_0_8_157)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x41628 (* ?x41627 l_0_8_99)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x41625 (* ?x41624 l_0_8_98)))
 (let ((?x41621 (* 2.0 l_0_8_112)))
 (let ((?x41622 (* ?x41621 l_0_8_97)))
 (let ((?x41714 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_115) ?x41622) ?x41625) ?x41628) ?x41630)))
 (let ((?x41717 (+ (+ (+ ?x41714 ?x41632) ?x41634) ?x41636)))
 (let ((?x29100 (- (- (- (- (- (- (- ?x41717 ?x41125) ?x41127) ?x41131) ?x41135) ?x41147) ?x41149) ?x41151)))
 (let ((?x41897 (+ (+ (+ (+ (+ (+ (+ ?x29100 ?x41153) ?x41155) ?x41157) ?x41159) ?x41161) ?x41163) ?x41165)))
 (= ?x41897 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41242 (* l_0_8_81 l_0_8_81)))
 (let ((?x41240 (* l_0_8_80 l_0_8_80)))
 (let ((?x41238 (* l_0_8_79 l_0_8_79)))
 (let ((?x41236 (* l_0_8_78 l_0_8_78)))
 (let ((?x41234 (* l_0_8_77 l_0_8_77)))
 (let ((?x41232 (* l_0_8_76 l_0_8_76)))
 (let ((?x41230 (* l_0_8_75 l_0_8_75)))
 (let ((?x41228 (* l_0_8_74 l_0_8_74)))
 (let ((?x41226 (* l_0_8_36 l_0_8_36)))
 (let ((?x41224 (* l_0_8_35 l_0_8_35)))
 (let ((?x41222 (* l_0_8_34 l_0_8_34)))
 (let ((?x41220 (* l_0_8_33 l_0_8_33)))
 (let ((?x41218 (* l_0_8_32 l_0_8_32)))
 (let ((?x41216 (* l_0_8_31 l_0_8_31)))
 (let ((?x41219 (- (- (- (* (- l_0_8_29) l_0_8_29) (* l_0_8_30 l_0_8_30)) ?x41216) ?x41218)))
 (let ((?x41233 (+ (+ (+ (- (- (- (- ?x41219 ?x41220) ?x41222) ?x41224) ?x41226) ?x41228) ?x41230) ?x41232)))
 (= (+ (+ (+ (+ (+ ?x41233 ?x41234) ?x41236) ?x41238) ?x41240) ?x41242) 0.0))))))))))))))))))
(assert
 (let ((?x41312 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41309 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41306 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41303 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41300 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41297 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41294 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41291 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41288 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41285 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41282 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41279 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41276 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x41273 (* ?x40259 l_0_8_39)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x41271 (* ?x40256 l_0_8_38)))
 (let ((?x40492 (* 2.0 l_0_8_29)))
 (let ((?x41931 (* ?x40492 l_0_8_37)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41929 (* ?x39727 l_0_8_167)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41927 (* ?x39724 l_0_8_166)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41925 (* ?x39721 l_0_8_165)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41923 (* ?x39718 l_0_8_164)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x41921 (* ?x41920 l_0_8_99)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x29154 (* ?x29153 l_0_8_98)))
 (let ((?x29158 (* 2.0 l_0_8_119)))
 (let ((?x29159 (* ?x29158 l_0_8_97)))
 (let ((?x41924 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_122) ?x29159) ?x29154) ?x41921) ?x41923)))
 (let ((?x41930 (+ (+ (+ ?x41924 ?x41925) ?x41927) ?x41929)))
 (let ((?x41938 (- (- (- (- (- (- (- ?x41930 ?x41931) ?x41271) ?x41273) ?x41276) ?x41279) ?x41282) ?x41285)))
 (let ((?x41945 (+ (+ (+ (+ (+ (+ (- ?x41938 ?x41288) ?x41291) ?x41294) ?x41297) ?x41300) ?x41303) ?x41306)))
 (= (+ (+ ?x41945 ?x41309) ?x41312) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41400 (* l_0_8_90 l_0_8_90)))
 (let ((?x41398 (* l_0_8_89 l_0_8_89)))
 (let ((?x41396 (* l_0_8_88 l_0_8_88)))
 (let ((?x41394 (* l_0_8_87 l_0_8_87)))
 (let ((?x41392 (* l_0_8_86 l_0_8_86)))
 (let ((?x41390 (* l_0_8_85 l_0_8_85)))
 (let ((?x41388 (* l_0_8_84 l_0_8_84)))
 (let ((?x41386 (* l_0_8_83 l_0_8_83)))
 (let ((?x41384 (* l_0_8_82 l_0_8_82)))
 (let ((?x41382 (* l_0_8_45 l_0_8_45)))
 (let ((?x41380 (* l_0_8_44 l_0_8_44)))
 (let ((?x41378 (* l_0_8_43 l_0_8_43)))
 (let ((?x41376 (* l_0_8_42 l_0_8_42)))
 (let ((?x41363 (* l_0_8_41 l_0_8_41)))
 (let ((?x41360 (* l_0_8_40 l_0_8_40)))
 (let ((?x41356 (* l_0_8_39 l_0_8_39)))
 (let ((?x41352 (* l_0_8_38 l_0_8_38)))
 (let ((?x41404 (* l_0_8_37 l_0_8_37)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41981 (* ?x39727 l_0_8_175)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41979 (* ?x39724 l_0_8_174)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41977 (* ?x39721 l_0_8_173)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41975 (* ?x39718 l_0_8_172)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x41973 (* ?x41972 l_0_8_99)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x29174 (* ?x15370 l_0_8_98)))
 (let ((?x29155 (* 2.0 l_0_8_127)))
 (let ((?x29160 (* ?x29155 l_0_8_97)))
 (let ((?x41976 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_130) ?x29160) ?x29174) ?x41973) ?x41975)))
 (let ((?x41982 (+ (+ (+ ?x41976 ?x41977) ?x41979) ?x41981)))
 (let ((?x41989 (- (- (- (- (- (- (- ?x41982 ?x41404) ?x41352) ?x41356) ?x41360) ?x41363) ?x41376) ?x41378)))
 (let ((?x41996 (+ (+ (+ (+ (+ (- (- ?x41989 ?x41380) ?x41382) ?x41384) ?x41386) ?x41388) ?x41390) ?x41392)))
 (= (+ (+ (+ (+ ?x41996 ?x41394) ?x41396) ?x41398) ?x41400) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39284 (* l_0_8_46 l_0_8_46)))
 (let ((?x38867 (* l_0_8_226 l_0_8_226)))
 (let ((?x29270 (- (- (* l_0_8_1 l_0_8_1) (* (* 2.0 l_0_8_181) l_0_8_184)) ?x38867)))
 (let ((?x29260 (- (- ?x29270 (* (* 2.0 l_0_8_271) l_0_8_274)) (* (* 2.0 l_0_8_316) l_0_8_319))))
 (let ((?x15378 (- (- ?x29260 (* (* 2.0 l_0_8_361) l_0_8_364)) (* (* 2.0 l_0_8_406) l_0_8_409))))
 (= (- ?x15378 ?x39284) 0.0)))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39361 (* ?x39360 l_0_8_47)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x15462 (* ?x29217 l_0_8_227)))
 (let ((?x29281 (- (* (* 2.0 l_0_8_1) l_0_8_2) (* (* 2.0 l_0_8_182) l_0_8_184))))
 (let ((?x29207 (- (- (- ?x29281 (* (* 2.0 l_0_8_183) l_0_8_185)) ?x15462) (* (* 2.0 l_0_8_272) l_0_8_274))))
 (let ((?x29225 (- (- ?x29207 (* (* 2.0 l_0_8_273) l_0_8_275)) (* (* 2.0 l_0_8_317) l_0_8_319))))
 (let ((?x42027 (- (- ?x29225 (* (* 2.0 l_0_8_318) l_0_8_320)) (* (* 2.0 l_0_8_362) l_0_8_364))))
 (let ((?x42031 (- (- ?x42027 (* (* 2.0 l_0_8_363) l_0_8_365)) (* (* 2.0 l_0_8_407) l_0_8_409))))
 (= (- (- ?x42031 (* (* 2.0 l_0_8_408) l_0_8_410)) ?x39361) 0.0)))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39411 (* ?x39360 l_0_8_49)))
 (let ((?x42084 (* l_0_8_411 l_0_8_411)))
 (let ((?x42082 (* l_0_8_410 l_0_8_410)))
 (let ((?x42080 (* l_0_8_409 l_0_8_409)))
 (let ((?x42078 (* l_0_8_366 l_0_8_366)))
 (let ((?x42076 (* l_0_8_365 l_0_8_365)))
 (let ((?x42074 (* l_0_8_364 l_0_8_364)))
 (let ((?x42072 (* l_0_8_321 l_0_8_321)))
 (let ((?x42070 (* l_0_8_320 l_0_8_320)))
 (let ((?x42068 (* l_0_8_319 l_0_8_319)))
 (let ((?x42066 (* l_0_8_276 l_0_8_276)))
 (let ((?x42064 (* l_0_8_275 l_0_8_275)))
 (let ((?x42062 (* l_0_8_274 l_0_8_274)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42060 (* ?x29217 l_0_8_229)))
 (let ((?x42053 (- (* (* 2.0 l_0_8_1) l_0_8_4) (* (* 1.0 l_0_8_184) l_0_8_184))))
 (let ((?x42059 (- (- ?x42053 (* (* 1.0 l_0_8_185) l_0_8_185)) (* (* 1.0 l_0_8_186) l_0_8_186))))
 (let ((?x42073 (- (- (- (- (- (- (- ?x42059 ?x42060) ?x42062) ?x42064) ?x42066) ?x42068) ?x42070) ?x42072)))
 (let ((?x42086 (- (- (- (- (- (- (- ?x42073 ?x42074) ?x42076) ?x42078) ?x42080) ?x42082) ?x42084) ?x39411)))
 (= ?x42086 0.0))))))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39486 (* ?x39360 l_0_8_52)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42111 (* ?x29217 l_0_8_232)))
 (let ((?x42104 (- (* (* 2.0 l_0_8_1) l_0_8_7) (* (* 2.0 l_0_8_184) l_0_8_187))))
 (let ((?x42110 (- (- ?x42104 (* (* 2.0 l_0_8_185) l_0_8_188)) (* (* 2.0 l_0_8_186) l_0_8_189))))
 (let ((?x42118 (- (- (- ?x42110 ?x42111) (* (* 2.0 l_0_8_274) l_0_8_277)) (* (* 2.0 l_0_8_275) l_0_8_278))))
 (let ((?x42124 (- (- ?x42118 (* (* 2.0 l_0_8_276) l_0_8_279)) (* (* 2.0 l_0_8_319) l_0_8_322))))
 (let ((?x42130 (- (- ?x42124 (* (* 2.0 l_0_8_320) l_0_8_323)) (* (* 2.0 l_0_8_321) l_0_8_324))))
 (let ((?x42136 (- (- ?x42130 (* (* 2.0 l_0_8_364) l_0_8_367)) (* (* 2.0 l_0_8_365) l_0_8_368))))
 (let ((?x42142 (- (- ?x42136 (* (* 2.0 l_0_8_366) l_0_8_369)) (* (* 2.0 l_0_8_409) l_0_8_412))))
 (let ((?x42148 (- (- ?x42142 (* (* 2.0 l_0_8_410) l_0_8_413)) (* (* 2.0 l_0_8_411) l_0_8_414))))
 (= (- ?x42148 ?x39486) 0.0))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x42215 (* ?x28835 l_0_8_94)))
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39537 (* ?x39360 l_0_8_56)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x15887 (* ?x29217 l_0_8_236)))
 (let ((?x42060 (* ?x29217 l_0_8_229)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x29517 (* ?x39357 l_0_8_139)))
 (let ((?x29474 (- (- (* (* 2.0 l_0_8_1) l_0_8_11) ?x29517) (* (* 2.0 l_0_8_184) l_0_8_191))))
 (let ((?x15902 (- (- ?x29474 (* (* 2.0 l_0_8_185) l_0_8_192)) (* (* 2.0 l_0_8_186) l_0_8_193))))
 (let ((?x42193 (- (- (- (+ ?x15902 ?x42060) ?x15887) (* (* 2.0 l_0_8_274) l_0_8_281)) (* (* 2.0 l_0_8_275) l_0_8_282))))
 (let ((?x42197 (- (- ?x42193 (* (* 2.0 l_0_8_276) l_0_8_283)) (* (* 2.0 l_0_8_319) l_0_8_326))))
 (let ((?x42201 (- (- ?x42197 (* (* 2.0 l_0_8_320) l_0_8_327)) (* (* 2.0 l_0_8_321) l_0_8_328))))
 (let ((?x42205 (- (- ?x42201 (* (* 2.0 l_0_8_364) l_0_8_371)) (* (* 2.0 l_0_8_365) l_0_8_372))))
 (let ((?x42209 (- (- ?x42205 (* (* 2.0 l_0_8_366) l_0_8_373)) (* (* 2.0 l_0_8_409) l_0_8_416))))
 (let ((?x42213 (- (- ?x42209 (* (* 2.0 l_0_8_410) l_0_8_417)) (* (* 2.0 l_0_8_411) l_0_8_418))))
 (= (+ (- ?x42213 ?x39537) ?x42215) 0.0)))))))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39574 (* ?x39360 l_0_8_61)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42260 (* ?x29217 l_0_8_241)))
 (let ((?x42255 (- (* (* 2.0 l_0_8_1) l_0_8_16) (* (* 2.0 l_0_8_184) l_0_8_196))))
 (let ((?x42259 (- (- ?x42255 (* (* 2.0 l_0_8_185) l_0_8_197)) (* (* 2.0 l_0_8_186) l_0_8_198))))
 (let ((?x42265 (- (- (- ?x42259 ?x42260) (* (* 2.0 l_0_8_274) l_0_8_286)) (* (* 2.0 l_0_8_275) l_0_8_287))))
 (let ((?x42269 (- (- ?x42265 (* (* 2.0 l_0_8_276) l_0_8_288)) (* (* 2.0 l_0_8_319) l_0_8_331))))
 (let ((?x42273 (- (- ?x42269 (* (* 2.0 l_0_8_320) l_0_8_332)) (* (* 2.0 l_0_8_321) l_0_8_333))))
 (let ((?x42277 (- (- ?x42273 (* (* 2.0 l_0_8_364) l_0_8_376)) (* (* 2.0 l_0_8_365) l_0_8_377))))
 (let ((?x42281 (- (- ?x42277 (* (* 2.0 l_0_8_366) l_0_8_378)) (* (* 2.0 l_0_8_409) l_0_8_421))))
 (let ((?x42285 (- (- ?x42281 (* (* 2.0 l_0_8_410) l_0_8_422)) (* (* 2.0 l_0_8_411) l_0_8_423))))
 (= (- ?x42285 ?x39574) 0.0))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39580 (* ?x39360 l_0_8_67)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42335 (* ?x29217 l_0_8_247)))
 (let ((?x16173 (- (* (* 2.0 l_0_8_1) l_0_8_22) (* (* 2.0 l_0_8_184) l_0_8_202))))
 (let ((?x42334 (- (- ?x16173 (* (* 2.0 l_0_8_185) l_0_8_203)) (* (* 2.0 l_0_8_186) l_0_8_204))))
 (let ((?x42340 (- (- (- ?x42334 ?x42335) (* (* 2.0 l_0_8_274) l_0_8_292)) (* (* 2.0 l_0_8_275) l_0_8_293))))
 (let ((?x42344 (- (- ?x42340 (* (* 2.0 l_0_8_276) l_0_8_294)) (* (* 2.0 l_0_8_319) l_0_8_337))))
 (let ((?x42348 (- (- ?x42344 (* (* 2.0 l_0_8_320) l_0_8_338)) (* (* 2.0 l_0_8_321) l_0_8_339))))
 (let ((?x42352 (- (- ?x42348 (* (* 2.0 l_0_8_364) l_0_8_382)) (* (* 2.0 l_0_8_365) l_0_8_383))))
 (let ((?x42356 (- (- ?x42352 (* (* 2.0 l_0_8_366) l_0_8_384)) (* (* 2.0 l_0_8_409) l_0_8_427))))
 (let ((?x42360 (- (- ?x42356 (* (* 2.0 l_0_8_410) l_0_8_428)) (* (* 2.0 l_0_8_411) l_0_8_429))))
 (= (- ?x42360 ?x39580) 0.0))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39590 (* ?x39360 l_0_8_74)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42395 (* ?x29217 l_0_8_254)))
 (let ((?x42390 (- (* (* 2.0 l_0_8_1) l_0_8_29) (* (* 2.0 l_0_8_184) l_0_8_209))))
 (let ((?x42394 (- (- ?x42390 (* (* 2.0 l_0_8_185) l_0_8_210)) (* (* 2.0 l_0_8_186) l_0_8_211))))
 (let ((?x42400 (- (- (- ?x42394 ?x42395) (* (* 2.0 l_0_8_274) l_0_8_299)) (* (* 2.0 l_0_8_275) l_0_8_300))))
 (let ((?x42404 (- (- ?x42400 (* (* 2.0 l_0_8_276) l_0_8_301)) (* (* 2.0 l_0_8_319) l_0_8_344))))
 (let ((?x42408 (- (- ?x42404 (* (* 2.0 l_0_8_320) l_0_8_345)) (* (* 2.0 l_0_8_321) l_0_8_346))))
 (let ((?x42412 (- (- ?x42408 (* (* 2.0 l_0_8_364) l_0_8_389)) (* (* 2.0 l_0_8_365) l_0_8_390))))
 (let ((?x42416 (- (- ?x42412 (* (* 2.0 l_0_8_366) l_0_8_391)) (* (* 2.0 l_0_8_409) l_0_8_434))))
 (let ((?x42420 (- (- ?x42416 (* (* 2.0 l_0_8_410) l_0_8_435)) (* (* 2.0 l_0_8_411) l_0_8_436))))
 (= (- ?x42420 ?x39590) 0.0))))))))))))))
(assert
 (let ((?x39360 (* 2.0 l_0_8_46)))
 (let ((?x39600 (* ?x39360 l_0_8_82)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x29861 (* ?x29217 l_0_8_262)))
 (let ((?x29911 (- (* (* 2.0 l_0_8_1) l_0_8_37) (* (* 2.0 l_0_8_184) l_0_8_217))))
 (let ((?x29856 (- (- ?x29911 (* (* 2.0 l_0_8_185) l_0_8_218)) (* (* 2.0 l_0_8_186) l_0_8_219))))
 (let ((?x16444 (- (- (- ?x29856 ?x29861) (* (* 2.0 l_0_8_274) l_0_8_307)) (* (* 2.0 l_0_8_275) l_0_8_308))))
 (let ((?x42457 (- (- ?x16444 (* (* 2.0 l_0_8_276) l_0_8_309)) (* (* 2.0 l_0_8_319) l_0_8_352))))
 (let ((?x42461 (- (- ?x42457 (* (* 2.0 l_0_8_320) l_0_8_353)) (* (* 2.0 l_0_8_321) l_0_8_354))))
 (let ((?x42465 (- (- ?x42461 (* (* 2.0 l_0_8_364) l_0_8_397)) (* (* 2.0 l_0_8_365) l_0_8_398))))
 (let ((?x42469 (- (- ?x42465 (* (* 2.0 l_0_8_366) l_0_8_399)) (* (* 2.0 l_0_8_409) l_0_8_442))))
 (let ((?x42473 (- (- ?x42469 (* (* 2.0 l_0_8_410) l_0_8_443)) (* (* 2.0 l_0_8_411) l_0_8_444))))
 (= (- ?x42473 ?x39600) 0.0))))))))))))))
(assert
 (let ((?x39629 (* l_0_8_48 l_0_8_48)))
 (let ((?x39627 (* l_0_8_47 l_0_8_47)))
 (let ((?x39625 (* l_0_8_3 l_0_8_3)))
 (let ((?x42499 (* l_0_8_228 l_0_8_228)))
 (let ((?x42501 (+ (- (- (* l_0_8_2 l_0_8_2) (* l_0_8_227 l_0_8_227)) ?x42499) ?x39625)))
 (= (- (- ?x42501 ?x39627) ?x39629) 0.0)))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39677 (* ?x39676 l_0_8_50)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39674 (* ?x39673 l_0_8_49)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39671 (* ?x39670 l_0_8_5)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42517 (* ?x42516 l_0_8_230)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42514 (* ?x42513 l_0_8_229)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39668 (* ?x39667 l_0_8_4)))
 (= (- (- (+ (- (- ?x39668 ?x42514) ?x42517) ?x39671) ?x39674) ?x39677) 0.0))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39736 (* ?x39676 l_0_8_53)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39734 (* ?x39673 l_0_8_52)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39732 (* ?x39670 l_0_8_8)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42536 (* ?x42516 l_0_8_233)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42534 (* ?x42513 l_0_8_232)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39730 (* ?x39667 l_0_8_7)))
 (= (- (- (+ (- (- ?x39730 ?x42534) ?x42536) ?x39732) ?x39734) ?x39736) 0.0))))))))))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x42565 (* ?x41733 l_0_8_95)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x42563 (* ?x41730 l_0_8_94)))
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39813 (* ?x39676 l_0_8_57)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39811 (* ?x39673 l_0_8_56)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42559 (* ?x42516 l_0_8_237)))
 (let ((?x42517 (* ?x42516 l_0_8_230)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42556 (* ?x42513 l_0_8_236)))
 (let ((?x42514 (* ?x42513 l_0_8_229)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x42553 (* ?x39620 l_0_8_140)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x42551 (* ?x39617 l_0_8_139)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x39794 (* ?x39793 l_0_8_3)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x39791 (* ?x39790 l_0_8_2)))
 (let ((?x42560 (- (+ (- (+ (- (- (+ ?x39791 ?x39794) ?x42551) ?x42553) ?x42514) ?x42556) ?x42517) ?x42559)))
 (= (+ (+ (- (- ?x42560 ?x39811) ?x39813) ?x42563) ?x42565) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39870 (* ?x39676 l_0_8_62)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39868 (* ?x39673 l_0_8_61)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42595 (* ?x42516 l_0_8_242)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42593 (* ?x42513 l_0_8_241)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x39866 (* ?x39378 l_0_8_3)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x39864 (* ?x39375 l_0_8_2)))
 (= (- (- (- (- (+ ?x39864 ?x39866) ?x42593) ?x42595) ?x39868) ?x39870) 0.0))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39928 (* ?x39676 l_0_8_68)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39926 (* ?x39673 l_0_8_67)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x39924 (* ?x39923 l_0_8_3)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42616 (* ?x42516 l_0_8_248)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42614 (* ?x42513 l_0_8_247)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39921 (* ?x39667 l_0_8_22)))
 (= (- (- (+ (- (- ?x39921 ?x42614) ?x42616) ?x39924) ?x39926) ?x39928) 0.0))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x42215 (* ?x28835 l_0_8_94)))
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x39988 (* ?x39676 l_0_8_75)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x39986 (* ?x39673 l_0_8_74)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x39984 (* ?x39670 l_0_8_30)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x30242 (* ?x42516 l_0_8_255)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x30238 (* ?x42513 l_0_8_254)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x39982 (* ?x39667 l_0_8_29)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x29517 (* ?x39357 l_0_8_139)))
 (let ((?x30256 (- (- (- (+ (- (- (+ ?x29517 ?x39982) ?x30238) ?x30242) ?x39984) ?x39986) ?x39988) ?x42215)))
 (= ?x30256 0.0)))))))))))))))))))
(assert
 (let ((?x39676 (* 2.0 l_0_8_48)))
 (let ((?x40048 (* ?x39676 l_0_8_83)))
 (let ((?x39673 (* 2.0 l_0_8_47)))
 (let ((?x40046 (* ?x39673 l_0_8_82)))
 (let ((?x39670 (* 2.0 l_0_8_3)))
 (let ((?x40044 (* ?x39670 l_0_8_38)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42629 (* ?x42516 l_0_8_263)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42627 (* ?x42513 l_0_8_262)))
 (let ((?x39667 (* 2.0 l_0_8_2)))
 (let ((?x40042 (* ?x39667 l_0_8_37)))
 (= (- (- (+ (- (- ?x40042 ?x42627) ?x42629) ?x40044) ?x40046) ?x40048) 0.0))))))))))))))
(assert
 (let ((?x40112 (* l_0_8_6 l_0_8_6)))
 (let ((?x40110 (* l_0_8_51 l_0_8_51)))
 (let ((?x40108 (* l_0_8_50 l_0_8_50)))
 (let ((?x40106 (* l_0_8_5 l_0_8_5)))
 (let ((?x40093 (* l_0_8_49 l_0_8_49)))
 (let ((?x12602 (* l_0_8_4 l_0_8_4)))
 (let ((?x30310 (* l_0_8_231 l_0_8_231)))
 (let ((?x30316 (- (- (* (- l_0_8_229) l_0_8_229) (* l_0_8_230 l_0_8_230)) ?x30310)))
 (= (+ (- (- (+ (- (+ ?x30316 ?x12602) ?x40093) ?x40106) ?x40108) ?x40110) ?x40112) 0.0))))))))))
(assert
 (let ((?x40142 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40139 (* ?x40138 l_0_8_54)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40136 (* ?x40135 l_0_8_53)))
 (let ((?x40133 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40130 (* ?x40129 l_0_8_52)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42670 (* ?x42669 l_0_8_234)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42667 (* ?x42666 l_0_8_233)))
 (let ((?x42674 (+ (- (- (* (* (- 2.0) l_0_8_229) l_0_8_232) ?x42667) ?x42670) (* (* 2.0 l_0_8_4) l_0_8_7))))
 (= (+ (- (- (+ (- ?x42674 ?x40130) ?x40133) ?x40136) ?x40139) ?x40142) 0.0)))))))))))))))
(assert
 (let ((?x42717 (* l_0_8_96 l_0_8_96)))
 (let ((?x42715 (* l_0_8_95 l_0_8_95)))
 (let ((?x42713 (* l_0_8_94 l_0_8_94)))
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40174 (* ?x40138 l_0_8_58)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40172 (* ?x40135 l_0_8_57)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40170 (* ?x40129 l_0_8_56)))
 (let ((?x30310 (* l_0_8_231 l_0_8_231)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42707 (* ?x42669 l_0_8_238)))
 (let ((?x16755 (* l_0_8_230 l_0_8_230)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42704 (* ?x42666 l_0_8_237)))
 (let ((?x42652 (* l_0_8_229 l_0_8_229)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42701 (* ?x42700 l_0_8_236)))
 (let ((?x42698 (* l_0_8_141 l_0_8_141)))
 (let ((?x42696 (* l_0_8_140 l_0_8_140)))
 (let ((?x42694 (* l_0_8_139 l_0_8_139)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40168 (* ?x40167 l_0_8_6)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40165 (* ?x39793 l_0_8_5)))
 (let ((?x42697 (- (- (+ (+ (* (* 2.0 l_0_8_11) l_0_8_4) ?x40165) ?x40168) ?x42694) ?x42696)))
 (let ((?x42709 (+ (- (+ (- (+ (- (- ?x42697 ?x42698) ?x42701) ?x42652) ?x42704) ?x16755) ?x42707) ?x30310)))
 (= (+ (+ (+ (- (- (- ?x42709 ?x40170) ?x40172) ?x40174) ?x42713) ?x42715) ?x42717) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40205 (* ?x40138 l_0_8_63)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40203 (* ?x40135 l_0_8_62)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40201 (* ?x40129 l_0_8_61)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42749 (* ?x42669 l_0_8_243)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42747 (* ?x42666 l_0_8_242)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42745 (* ?x42700 l_0_8_241)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40199 (* ?x39381 l_0_8_6)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40197 (* ?x39378 l_0_8_5)))
 (let ((?x42748 (- (- (+ (+ (* (* 2.0 l_0_8_16) l_0_8_4) ?x40197) ?x40199) ?x42745) ?x42747)))
 (= (- (- (- (- ?x42748 ?x42749) ?x40201) ?x40203) ?x40205) 0.0)))))))))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40233 (* ?x40138 l_0_8_69)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40231 (* ?x40135 l_0_8_68)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40229 (* ?x40129 l_0_8_67)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x40227 (* ?x40226 l_0_8_6)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42774 (* ?x42669 l_0_8_249)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42772 (* ?x42666 l_0_8_248)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x40224 (* ?x39923 l_0_8_5)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42769 (* ?x42700 l_0_8_247)))
 (let ((?x42775 (- (- (+ (- (* (* 2.0 l_0_8_22) l_0_8_4) ?x42769) ?x40224) ?x42772) ?x42774)))
 (= (- (- (- (+ ?x42775 ?x40227) ?x40229) ?x40231) ?x40233) 0.0)))))))))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40266 (* ?x40138 l_0_8_76)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40264 (* ?x40135 l_0_8_75)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40262 (* ?x40129 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40260 (* ?x40259 l_0_8_6)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40257 (* ?x40256 l_0_8_5)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x16894 (* ?x42669 l_0_8_256)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x30543 (* ?x42666 l_0_8_255)))
 (let ((?x30480 (+ (- (- (* (* (- 2.0) l_0_8_229) l_0_8_254) ?x30543) ?x16894) (* (* 2.0 l_0_8_29) l_0_8_4))))
 (= (- (- (- (+ (+ ?x30480 ?x40257) ?x40260) ?x40262) ?x40264) ?x40266) 0.0)))))))))))))))))
(assert
 (let ((?x40138 (* 2.0 l_0_8_51)))
 (let ((?x40304 (* ?x40138 l_0_8_84)))
 (let ((?x40135 (* 2.0 l_0_8_50)))
 (let ((?x40302 (* ?x40135 l_0_8_83)))
 (let ((?x40129 (* 2.0 l_0_8_49)))
 (let ((?x40300 (* ?x40129 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40298 (* ?x40297 l_0_8_6)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40289 (* ?x40288 l_0_8_5)))
 (let ((?x28571 (* 2.0 l_0_8_37)))
 (let ((?x41746 (* ?x28571 l_0_8_4)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42797 (* ?x42669 l_0_8_264)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x17045 (* ?x42666 l_0_8_263)))
 (let ((?x42800 (+ (+ (- (- (* (* (- 2.0) l_0_8_229) l_0_8_262) ?x17045) ?x42797) ?x41746) ?x40289)))
 (= (- (- (- (+ ?x42800 ?x40298) ?x40300) ?x40302) ?x40304) 0.0)))))))))))))))))))
(assert
 (let ((?x40339 (* l_0_8_9 l_0_8_9)))
 (let ((?x40337 (* l_0_8_8 l_0_8_8)))
 (let ((?x40335 (* l_0_8_7 l_0_8_7)))
 (let ((?x40333 (* l_0_8_55 l_0_8_55)))
 (let ((?x40331 (* l_0_8_54 l_0_8_54)))
 (let ((?x40329 (* l_0_8_53 l_0_8_53)))
 (let ((?x40327 (* l_0_8_52 l_0_8_52)))
 (let ((?x42833 (* l_0_8_235 l_0_8_235)))
 (let ((?x42831 (* l_0_8_234 l_0_8_234)))
 (let ((?x42829 (* l_0_8_233 l_0_8_233)))
 (let ((?x42832 (- (- (- (* l_0_8_10 l_0_8_10) (* l_0_8_232 l_0_8_232)) ?x42829) ?x42831)))
 (let ((?x42840 (+ (+ (- (- (- (- (- ?x42832 ?x42833) ?x40327) ?x40329) ?x40331) ?x40333) ?x40335) ?x40337)))
 (= (+ ?x42840 ?x40339) 0.0))))))))))))))
(assert
 (let ((?x41760 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x41757 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x41754 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40370 (* ?x40369 l_0_8_59)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40367 (* ?x40366 l_0_8_58)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40364 (* ?x40363 l_0_8_57)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40361 (* ?x40360 l_0_8_56)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42866 (* ?x41587 l_0_8_239)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42864 (* ?x41584 l_0_8_238)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42862 (* ?x41581 l_0_8_237)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42860 (* ?x41578 l_0_8_236)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42670 (* ?x42669 l_0_8_234)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42667 (* ?x42666 l_0_8_233)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x41744 (* ?x39664 l_0_8_144)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x15142 (* ?x39661 l_0_8_143)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x13884 (* ?x39658 l_0_8_142)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40358 (* ?x40167 l_0_8_9)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40356 (* ?x39793 l_0_8_8)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x40354 (* ?x39790 l_0_8_7)))
 (let ((?x30660 (- (+ (+ (+ (* (* 2.0 l_0_8_10) l_0_8_14) ?x40354) ?x40356) ?x40358) ?x13884)))
 (let ((?x42858 (+ (+ (- (- ?x30660 ?x15142) ?x41744) (* (* 2.0 l_0_8_229) l_0_8_232)) ?x42667)))
 (let ((?x42869 (- (- (- (- (- (- (+ ?x42858 ?x42670) ?x42860) ?x42862) ?x42864) ?x42866) ?x40361) ?x40364)))
 (= (+ (+ (+ (- (- ?x42869 ?x40367) ?x40370) ?x41754) ?x41757) ?x41760) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40409 (* ?x40369 l_0_8_64)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40407 (* ?x40366 l_0_8_63)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40405 (* ?x40363 l_0_8_62)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40403 (* ?x40360 l_0_8_61)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42909 (* ?x41587 l_0_8_244)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42907 (* ?x41584 l_0_8_243)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42905 (* ?x41581 l_0_8_242)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42903 (* ?x41578 l_0_8_241)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40401 (* ?x39381 l_0_8_9)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40392 (* ?x39378 l_0_8_8)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x40388 (* ?x39375 l_0_8_7)))
 (let ((?x42904 (- (+ (+ (+ (* (* 2.0 l_0_8_10) l_0_8_19) ?x40388) ?x40392) ?x40401) ?x42903)))
 (let ((?x42914 (- (- (- (- (- (- (- ?x42904 ?x42905) ?x42907) ?x42909) ?x40403) ?x40405) ?x40407) ?x40409)))
 (= ?x42914 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40505 (* ?x40369 l_0_8_77)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40503 (* ?x40366 l_0_8_76)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40501 (* ?x40363 l_0_8_75)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40499 (* ?x40360 l_0_8_74)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x40497 (* ?x40259 l_0_8_9)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x40495 (* ?x40256 l_0_8_8)))
 (let ((?x40492 (* 2.0 l_0_8_29)))
 (let ((?x40493 (* ?x40492 l_0_8_7)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42955 (* ?x41587 l_0_8_257)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42953 (* ?x41584 l_0_8_256)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42951 (* ?x41581 l_0_8_255)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42949 (* ?x41578 l_0_8_254)))
 (let ((?x42956 (- (- (- (- (* (* 2.0 l_0_8_10) l_0_8_32) ?x42949) ?x42951) ?x42953) ?x42955)))
 (let ((?x42963 (- (- (- (- (+ (+ (+ ?x42956 ?x40493) ?x40495) ?x40497) ?x40499) ?x40501) ?x40503) ?x40505)))
 (= ?x42963 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40369 (* 2.0 l_0_8_55)))
 (let ((?x40541 (* ?x40369 l_0_8_85)))
 (let ((?x40366 (* 2.0 l_0_8_54)))
 (let ((?x40539 (* ?x40366 l_0_8_84)))
 (let ((?x40363 (* 2.0 l_0_8_53)))
 (let ((?x40537 (* ?x40363 l_0_8_83)))
 (let ((?x40360 (* 2.0 l_0_8_52)))
 (let ((?x40535 (* ?x40360 l_0_8_82)))
 (let ((?x40297 (* 2.0 l_0_8_39)))
 (let ((?x40533 (* ?x40297 l_0_8_9)))
 (let ((?x40288 (* 2.0 l_0_8_38)))
 (let ((?x40524 (* ?x40288 l_0_8_8)))
 (let ((?x28571 (* 2.0 l_0_8_37)))
 (let ((?x40521 (* ?x28571 l_0_8_7)))
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x43005 (* ?x41587 l_0_8_265)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x43003 (* ?x41584 l_0_8_264)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x43001 (* ?x41581 l_0_8_263)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42999 (* ?x41578 l_0_8_262)))
 (let ((?x43006 (- (- (- (- (* (* 2.0 l_0_8_10) l_0_8_40) ?x42999) ?x43001) ?x43003) ?x43005)))
 (let ((?x43013 (- (- (- (- (+ (+ (+ ?x43006 ?x40521) ?x40524) ?x40533) ?x40535) ?x40537) ?x40539) ?x40541)))
 (= ?x43013 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40589 (* l_0_8_60 l_0_8_60)))
 (let ((?x40587 (* l_0_8_59 l_0_8_59)))
 (let ((?x40585 (* l_0_8_58 l_0_8_58)))
 (let ((?x40583 (* l_0_8_57 l_0_8_57)))
 (let ((?x40581 (* l_0_8_56 l_0_8_56)))
 (let ((?x43077 (* l_0_8_240 l_0_8_240)))
 (let ((?x43075 (* l_0_8_239 l_0_8_239)))
 (let ((?x43073 (* l_0_8_238 l_0_8_238)))
 (let ((?x43071 (* l_0_8_237 l_0_8_237)))
 (let ((?x43069 (* l_0_8_236 l_0_8_236)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42707 (* ?x42669 l_0_8_238)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42704 (* ?x42666 l_0_8_237)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42701 (* ?x42700 l_0_8_236)))
 (let ((?x40579 (* l_0_8_15 l_0_8_15)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43063 (* ?x39664 l_0_8_148)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43061 (* ?x39661 l_0_8_147)))
 (let ((?x40577 (* l_0_8_14 l_0_8_14)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43058 (* ?x39658 l_0_8_146)))
 (let ((?x40568 (* l_0_8_13 l_0_8_13)))
 (let ((?x40565 (* l_0_8_12 l_0_8_12)))
 (let ((?x40593 (* l_0_8_11 l_0_8_11)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x43053 (* ?x39781 l_0_8_96)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x43051 (* ?x39769 l_0_8_95)))
 (let ((?x43056 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_94) ?x43051) ?x43053) ?x40593) ?x40565)))
 (let ((?x43066 (+ (+ (- (- (+ (- (+ ?x43056 ?x40568) ?x43058) ?x40577) ?x43061) ?x43063) ?x40579) ?x42701)))
 (let ((?x43078 (- (- (- (- (- (+ (+ ?x43066 ?x42704) ?x42707) ?x43069) ?x43071) ?x43073) ?x43075) ?x43077)))
 (= (- (- (- (- (- ?x43078 ?x40581) ?x40583) ?x40585) ?x40587) ?x40589) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40634 (* ?x40633 l_0_8_65)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40631 (* ?x40630 l_0_8_64)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40628 (* ?x40627 l_0_8_63)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40625 (* ?x40624 l_0_8_62)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40622 (* ?x40621 l_0_8_61)))
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43162 (* ?x43161 l_0_8_245)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43159 (* ?x43158 l_0_8_244)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43156 (* ?x43155 l_0_8_243)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43153 (* ?x43152 l_0_8_242)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43150 (* ?x43149 l_0_8_241)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42749 (* ?x42669 l_0_8_243)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42747 (* ?x42666 l_0_8_242)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42745 (* ?x42700 l_0_8_241)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40619 (* ?x40618 l_0_8_20)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x39665 (* ?x39664 l_0_8_153)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x39662 (* ?x39661 l_0_8_152)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40616 (* ?x40615 l_0_8_19)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x39659 (* ?x39658 l_0_8_151)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40613 (* ?x40167 l_0_8_18)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40611 (* ?x39793 l_0_8_17)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39656 (* ?x39501 l_0_8_96)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39654 (* ?x39498 l_0_8_95)))
 (let ((?x43138 (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_94) ?x39654) ?x39656) (* (* 2.0 l_0_8_11) l_0_8_16))))
 (let ((?x43145 (+ (- (- (+ (- (+ (+ ?x43138 ?x40611) ?x40613) ?x39659) ?x40616) ?x39662) ?x39665) ?x40619)))
 (let ((?x43160 (- (- (- (- (+ (+ (+ ?x43145 ?x42745) ?x42747) ?x42749) ?x43150) ?x43153) ?x43156) ?x43159)))
 (= (- (- (- (- (- (- ?x43160 ?x43162) ?x40622) ?x40625) ?x40628) ?x40631) ?x40634) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40681 (* ?x40633 l_0_8_71)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40679 (* ?x40630 l_0_8_70)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40677 (* ?x40627 l_0_8_69)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40675 (* ?x40624 l_0_8_68)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40673 (* ?x40621 l_0_8_67)))
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43235 (* ?x43161 l_0_8_251)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43233 (* ?x43158 l_0_8_250)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43231 (* ?x43155 l_0_8_249)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43229 (* ?x43152 l_0_8_248)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43227 (* ?x43149 l_0_8_247)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42774 (* ?x42669 l_0_8_249)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x42772 (* ?x42666 l_0_8_248)))
 (let ((?x42700 (* 2.0 l_0_8_229)))
 (let ((?x42769 (* ?x42700 l_0_8_247)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40671 (* ?x40618 l_0_8_26)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43221 (* ?x39664 l_0_8_159)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43219 (* ?x39661 l_0_8_158)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40661 (* ?x40615 l_0_8_25)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43216 (* ?x39658 l_0_8_157)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40658 (* ?x40167 l_0_8_24)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40654 (* ?x39793 l_0_8_23)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43212 (* ?x41627 l_0_8_96)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43210 (* ?x41624 l_0_8_95)))
 (let ((?x43209 (+ (* (* 2.0 l_0_8_11) l_0_8_22) (* (* 2.0 l_0_8_112) l_0_8_94))))
 (let ((?x43220 (- (+ (- (+ (+ (+ (+ ?x43209 ?x43210) ?x43212) ?x40654) ?x40658) ?x43216) ?x40661) ?x43219)))
 (let ((?x43230 (- (- (+ (+ (+ (+ (- ?x43220 ?x43221) ?x40671) ?x42769) ?x42772) ?x42774) ?x43227) ?x43229)))
 (let ((?x43240 (- (- (- (- (- (- (- ?x43230 ?x43231) ?x43233) ?x43235) ?x40673) ?x40675) ?x40677) ?x40679)))
 (= (- ?x43240 ?x40681) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40728 (* ?x40633 l_0_8_78)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40726 (* ?x40630 l_0_8_77)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40724 (* ?x40627 l_0_8_76)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40722 (* ?x40624 l_0_8_75)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40720 (* ?x40621 l_0_8_74)))
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43322 (* ?x43161 l_0_8_258)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43320 (* ?x43158 l_0_8_257)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43318 (* ?x43155 l_0_8_256)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43316 (* ?x43152 l_0_8_255)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43314 (* ?x43149 l_0_8_254)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x16894 (* ?x42669 l_0_8_256)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x30543 (* ?x42666 l_0_8_255)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40718 (* ?x40618 l_0_8_33)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43307 (* ?x39664 l_0_8_166)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43305 (* ?x39661 l_0_8_165)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40708 (* ?x40615 l_0_8_32)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43302 (* ?x39658 l_0_8_164)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40705 (* ?x40167 l_0_8_31)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x43299 (* ?x41920 l_0_8_96)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x43297 (* ?x29153 l_0_8_95)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x28614 (* ?x39793 l_0_8_30)))
 (let ((?x17926 (+ (* (* 2.0 l_0_8_11) l_0_8_29) (* (* 2.0 l_0_8_119) l_0_8_94))))
 (let ((?x43306 (- (+ (- (+ (+ (+ (+ ?x17926 ?x28614) ?x43297) ?x43299) ?x40705) ?x43302) ?x40708) ?x43305)))
 (let ((?x43312 (+ (+ (+ (- ?x43306 ?x43307) ?x40718) (* (* 2.0 l_0_8_229) l_0_8_254)) ?x30543)))
 (let ((?x43324 (- (- (- (- (- (- (+ ?x43312 ?x16894) ?x43314) ?x43316) ?x43318) ?x43320) ?x43322) ?x40720)))
 (= (- (- (- (- ?x43324 ?x40722) ?x40724) ?x40726) ?x40728) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40633 (* 2.0 l_0_8_60)))
 (let ((?x40779 (* ?x40633 l_0_8_86)))
 (let ((?x40630 (* 2.0 l_0_8_59)))
 (let ((?x40777 (* ?x40630 l_0_8_85)))
 (let ((?x40627 (* 2.0 l_0_8_58)))
 (let ((?x40775 (* ?x40627 l_0_8_84)))
 (let ((?x40624 (* 2.0 l_0_8_57)))
 (let ((?x40773 (* ?x40624 l_0_8_83)))
 (let ((?x40621 (* 2.0 l_0_8_56)))
 (let ((?x40771 (* ?x40621 l_0_8_82)))
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43415 (* ?x43161 l_0_8_266)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43413 (* ?x43158 l_0_8_265)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43411 (* ?x43155 l_0_8_264)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43409 (* ?x43152 l_0_8_263)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43407 (* ?x43149 l_0_8_262)))
 (let ((?x42669 (* 2.0 l_0_8_231)))
 (let ((?x42797 (* ?x42669 l_0_8_264)))
 (let ((?x42666 (* 2.0 l_0_8_230)))
 (let ((?x17045 (* ?x42666 l_0_8_263)))
 (let ((?x40618 (* 2.0 l_0_8_15)))
 (let ((?x40769 (* ?x40618 l_0_8_41)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43400 (* ?x39664 l_0_8_174)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43398 (* ?x39661 l_0_8_173)))
 (let ((?x40615 (* 2.0 l_0_8_14)))
 (let ((?x40759 (* ?x40615 l_0_8_40)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43395 (* ?x39658 l_0_8_172)))
 (let ((?x40167 (* 2.0 l_0_8_13)))
 (let ((?x40756 (* ?x40167 l_0_8_39)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x43392 (* ?x41972 l_0_8_96)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x43390 (* ?x15370 l_0_8_95)))
 (let ((?x39793 (* 2.0 l_0_8_12)))
 (let ((?x40752 (* ?x39793 l_0_8_38)))
 (let ((?x39790 (* 2.0 l_0_8_11)))
 (let ((?x41839 (* ?x39790 l_0_8_37)))
 (let ((?x43393 (+ (+ (+ (+ ?x41839 ?x40752) (* (* 2.0 l_0_8_127) l_0_8_94)) ?x43390) ?x43392)))
 (let ((?x43404 (+ (+ (- (- (+ (- (+ ?x43393 ?x40756) ?x43395) ?x40759) ?x43398) ?x43400) ?x40769) (* (* 2.0 l_0_8_229) l_0_8_262))))
 (let ((?x43416 (- (- (- (- (- (+ (+ ?x43404 ?x17045) ?x42797) ?x43407) ?x43409) ?x43411) ?x43413) ?x43415)))
 (= (- (- (- (- (- ?x43416 ?x40771) ?x40773) ?x40775) ?x40777) ?x40779) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40837 (* l_0_8_66 l_0_8_66)))
 (let ((?x40835 (* l_0_8_65 l_0_8_65)))
 (let ((?x40833 (* l_0_8_64 l_0_8_64)))
 (let ((?x40831 (* l_0_8_63 l_0_8_63)))
 (let ((?x40829 (* l_0_8_62 l_0_8_62)))
 (let ((?x40827 (* l_0_8_61 l_0_8_61)))
 (let ((?x43480 (* l_0_8_246 l_0_8_246)))
 (let ((?x43478 (* l_0_8_245 l_0_8_245)))
 (let ((?x43476 (* l_0_8_244 l_0_8_244)))
 (let ((?x43474 (* l_0_8_243 l_0_8_243)))
 (let ((?x43472 (* l_0_8_242 l_0_8_242)))
 (let ((?x43470 (* l_0_8_241 l_0_8_241)))
 (let ((?x40825 (* l_0_8_21 l_0_8_21)))
 (let ((?x40823 (* l_0_8_20 l_0_8_20)))
 (let ((?x40821 (* l_0_8_19 l_0_8_19)))
 (let ((?x40811 (* l_0_8_18 l_0_8_18)))
 (let ((?x43467 (+ (+ (+ (* l_0_8_16 l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40811) ?x40821)))
 (let ((?x43479 (- (- (- (- (- (+ (+ ?x43467 ?x40823) ?x40825) ?x43470) ?x43472) ?x43474) ?x43476) ?x43478)))
 (let ((?x43487 (- (- (- (- (- (- (- ?x43479 ?x43480) ?x40827) ?x40829) ?x40831) ?x40833) ?x40835) ?x40837)))
 (= ?x43487 0.0)))))))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40881 (* ?x39428 l_0_8_72)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40879 (* ?x39425 l_0_8_71)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40877 (* ?x39422 l_0_8_70)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40875 (* ?x39419 l_0_8_69)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40873 (* ?x39416 l_0_8_68)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40871 (* ?x39413 l_0_8_67)))
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x43522 (* ?x39408 l_0_8_252)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x43520 (* ?x39405 l_0_8_251)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x43518 (* ?x39402 l_0_8_250)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x43516 (* ?x39399 l_0_8_249)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x43514 (* ?x39396 l_0_8_248)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x43512 (* ?x39393 l_0_8_247)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40869 (* ?x39390 l_0_8_27)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40867 (* ?x39387 l_0_8_26)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40865 (* ?x39384 l_0_8_25)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40863 (* ?x39381 l_0_8_24)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40861 (* ?x39378 l_0_8_23)))
 (let ((?x43510 (+ (+ (+ (+ (* (* 2.0 l_0_8_16) l_0_8_22) ?x40861) ?x40863) ?x40865) ?x40867)))
 (let ((?x43523 (- (- (- (- (- (- (+ ?x43510 ?x40869) ?x43512) ?x43514) ?x43516) ?x43518) ?x43520) ?x43522)))
 (= (- (- (- (- (- (- ?x43523 ?x40871) ?x40873) ?x40875) ?x40877) ?x40879) ?x40881) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39428 (* 2.0 l_0_8_66)))
 (let ((?x40960 (* ?x39428 l_0_8_87)))
 (let ((?x39425 (* 2.0 l_0_8_65)))
 (let ((?x40958 (* ?x39425 l_0_8_86)))
 (let ((?x39422 (* 2.0 l_0_8_64)))
 (let ((?x40956 (* ?x39422 l_0_8_85)))
 (let ((?x39419 (* 2.0 l_0_8_63)))
 (let ((?x40954 (* ?x39419 l_0_8_84)))
 (let ((?x39416 (* 2.0 l_0_8_62)))
 (let ((?x40952 (* ?x39416 l_0_8_83)))
 (let ((?x39413 (* 2.0 l_0_8_61)))
 (let ((?x40950 (* ?x39413 l_0_8_82)))
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x32694 (* ?x39408 l_0_8_267)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x32690 (* ?x39405 l_0_8_266)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x32695 (* ?x39402 l_0_8_265)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x32683 (* ?x39399 l_0_8_264)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x32671 (* ?x39396 l_0_8_263)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x32660 (* ?x39393 l_0_8_262)))
 (let ((?x39390 (* 2.0 l_0_8_21)))
 (let ((?x40948 (* ?x39390 l_0_8_42)))
 (let ((?x39387 (* 2.0 l_0_8_20)))
 (let ((?x40946 (* ?x39387 l_0_8_41)))
 (let ((?x39384 (* 2.0 l_0_8_19)))
 (let ((?x40944 (* ?x39384 l_0_8_40)))
 (let ((?x39381 (* 2.0 l_0_8_18)))
 (let ((?x40942 (* ?x39381 l_0_8_39)))
 (let ((?x39378 (* 2.0 l_0_8_17)))
 (let ((?x40940 (* ?x39378 l_0_8_38)))
 (let ((?x39375 (* 2.0 l_0_8_16)))
 (let ((?x15270 (* ?x39375 l_0_8_37)))
 (let ((?x32677 (- (- (+ (+ (+ (+ (+ ?x15270 ?x40940) ?x40942) ?x40944) ?x40946) ?x40948) ?x32660) ?x32671)))
 (let ((?x43548 (- (- (- (- (- (- (- ?x32677 ?x32683) ?x32695) ?x32690) ?x32694) ?x40950) ?x40952) ?x40954)))
 (= (- (- (- ?x43548 ?x40956) ?x40958) ?x40960) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41028 (* l_0_8_73 l_0_8_73)))
 (let ((?x41026 (* l_0_8_72 l_0_8_72)))
 (let ((?x41024 (* l_0_8_71 l_0_8_71)))
 (let ((?x41022 (* l_0_8_70 l_0_8_70)))
 (let ((?x41020 (* l_0_8_69 l_0_8_69)))
 (let ((?x41018 (* l_0_8_68 l_0_8_68)))
 (let ((?x41016 (* l_0_8_67 l_0_8_67)))
 (let ((?x41014 (* l_0_8_28 l_0_8_28)))
 (let ((?x41012 (* l_0_8_27 l_0_8_27)))
 (let ((?x41010 (* l_0_8_26 l_0_8_26)))
 (let ((?x43600 (* l_0_8_253 l_0_8_253)))
 (let ((?x43598 (* l_0_8_252 l_0_8_252)))
 (let ((?x43596 (* l_0_8_251 l_0_8_251)))
 (let ((?x43594 (* l_0_8_250 l_0_8_250)))
 (let ((?x40999 (* l_0_8_25 l_0_8_25)))
 (let ((?x43591 (* l_0_8_249 l_0_8_249)))
 (let ((?x43589 (* l_0_8_248 l_0_8_248)))
 (let ((?x43587 (* l_0_8_247 l_0_8_247)))
 (let ((?x40996 (* l_0_8_24 l_0_8_24)))
 (let ((?x43588 (- (+ (+ (* l_0_8_22 l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40996) ?x43587)))
 (let ((?x43601 (- (- (- (- (+ (- (- ?x43588 ?x43589) ?x43591) ?x40999) ?x43594) ?x43596) ?x43598) ?x43600)))
 (let ((?x43608 (- (- (- (- (+ (+ (+ ?x43601 ?x41010) ?x41012) ?x41014) ?x41016) ?x41018) ?x41020) ?x41022)))
 (= (- (- (- ?x43608 ?x41024) ?x41026) ?x41028) 0.0))))))))))))))))))))))))
(assert
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41093 (* ?x41092 l_0_8_80)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41090 (* ?x41089 l_0_8_79)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41087 (* ?x41086 l_0_8_78)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41084 (* ?x41083 l_0_8_77)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41081 (* ?x41080 l_0_8_76)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41078 (* ?x41077 l_0_8_75)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41075 (* ?x41074 l_0_8_74)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41072 (* ?x41071 l_0_8_35)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41069 (* ?x41068 l_0_8_34)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41066 (* ?x41065 l_0_8_33)))
 (let ((?x43660 (* 2.0 l_0_8_253)))
 (let ((?x43661 (* ?x43660 l_0_8_260)))
 (let ((?x43657 (* 2.0 l_0_8_252)))
 (let ((?x43658 (* ?x43657 l_0_8_259)))
 (let ((?x43654 (* 2.0 l_0_8_251)))
 (let ((?x43655 (* ?x43654 l_0_8_258)))
 (let ((?x43651 (* 2.0 l_0_8_250)))
 (let ((?x43652 (* ?x43651 l_0_8_257)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41063 (* ?x41062 l_0_8_32)))
 (let ((?x43647 (* 2.0 l_0_8_249)))
 (let ((?x43648 (* ?x43647 l_0_8_256)))
 (let ((?x43644 (* 2.0 l_0_8_248)))
 (let ((?x43645 (* ?x43644 l_0_8_255)))
 (let ((?x43641 (* 2.0 l_0_8_247)))
 (let ((?x43642 (* ?x43641 l_0_8_254)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41060 (* ?x40226 l_0_8_31)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41058 (* ?x39923 l_0_8_30)))
 (let ((?x43646 (- (- (+ (+ (* (* 2.0 l_0_8_22) l_0_8_29) ?x41058) ?x41060) ?x43642) ?x43645)))
 (let ((?x43663 (+ (- (- (- (- (+ (- ?x43646 ?x43648) ?x41063) ?x43652) ?x43655) ?x43658) ?x43661) ?x41066)))
 (let ((?x43670 (- (- (- (- (- (+ (+ ?x43663 ?x41069) ?x41072) ?x41075) ?x41078) ?x41081) ?x41084) ?x41087)))
 (= (- (- ?x43670 ?x41090) ?x41093) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x42215 (* ?x28835 l_0_8_94)))
 (let ((?x41092 (* 2.0 l_0_8_73)))
 (let ((?x41165 (* ?x41092 l_0_8_88)))
 (let ((?x41089 (* 2.0 l_0_8_72)))
 (let ((?x41163 (* ?x41089 l_0_8_87)))
 (let ((?x41086 (* 2.0 l_0_8_71)))
 (let ((?x41161 (* ?x41086 l_0_8_86)))
 (let ((?x41083 (* 2.0 l_0_8_70)))
 (let ((?x41159 (* ?x41083 l_0_8_85)))
 (let ((?x41080 (* 2.0 l_0_8_69)))
 (let ((?x41157 (* ?x41080 l_0_8_84)))
 (let ((?x41077 (* 2.0 l_0_8_68)))
 (let ((?x41155 (* ?x41077 l_0_8_83)))
 (let ((?x41074 (* 2.0 l_0_8_67)))
 (let ((?x41153 (* ?x41074 l_0_8_82)))
 (let ((?x41071 (* 2.0 l_0_8_28)))
 (let ((?x41151 (* ?x41071 l_0_8_43)))
 (let ((?x41068 (* 2.0 l_0_8_27)))
 (let ((?x41149 (* ?x41068 l_0_8_42)))
 (let ((?x41065 (* 2.0 l_0_8_26)))
 (let ((?x41147 (* ?x41065 l_0_8_41)))
 (let ((?x43660 (* 2.0 l_0_8_253)))
 (let ((?x43702 (* ?x43660 l_0_8_268)))
 (let ((?x43657 (* 2.0 l_0_8_252)))
 (let ((?x43700 (* ?x43657 l_0_8_267)))
 (let ((?x43654 (* 2.0 l_0_8_251)))
 (let ((?x43698 (* ?x43654 l_0_8_266)))
 (let ((?x43651 (* 2.0 l_0_8_250)))
 (let ((?x43696 (* ?x43651 l_0_8_265)))
 (let ((?x41062 (* 2.0 l_0_8_25)))
 (let ((?x41135 (* ?x41062 l_0_8_40)))
 (let ((?x43647 (* 2.0 l_0_8_249)))
 (let ((?x43693 (* ?x43647 l_0_8_264)))
 (let ((?x43644 (* 2.0 l_0_8_248)))
 (let ((?x43691 (* ?x43644 l_0_8_263)))
 (let ((?x43641 (* 2.0 l_0_8_247)))
 (let ((?x43689 (* ?x43641 l_0_8_262)))
 (let ((?x40226 (* 2.0 l_0_8_24)))
 (let ((?x41131 (* ?x40226 l_0_8_39)))
 (let ((?x39923 (* 2.0 l_0_8_23)))
 (let ((?x41127 (* ?x39923 l_0_8_38)))
 (let ((?x40440 (* 2.0 l_0_8_22)))
 (let ((?x41125 (* ?x40440 l_0_8_37)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x29517 (* ?x39357 l_0_8_139)))
 (let ((?x43695 (+ (- (- (- (+ (+ (+ ?x29517 ?x41125) ?x41127) ?x41131) ?x43689) ?x43691) ?x43693) ?x41135)))
 (let ((?x43706 (+ (+ (+ (- (- (- (- ?x43695 ?x43696) ?x43698) ?x43700) ?x43702) ?x41147) ?x41149) ?x41151)))
 (let ((?x43713 (- (- (- (- (- (- (- ?x43706 ?x41153) ?x41155) ?x41157) ?x41159) ?x41161) ?x41163) ?x41165)))
 (= (- ?x43713 ?x42215) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41242 (* l_0_8_81 l_0_8_81)))
 (let ((?x41240 (* l_0_8_80 l_0_8_80)))
 (let ((?x41238 (* l_0_8_79 l_0_8_79)))
 (let ((?x41236 (* l_0_8_78 l_0_8_78)))
 (let ((?x41234 (* l_0_8_77 l_0_8_77)))
 (let ((?x41232 (* l_0_8_76 l_0_8_76)))
 (let ((?x41230 (* l_0_8_75 l_0_8_75)))
 (let ((?x41228 (* l_0_8_74 l_0_8_74)))
 (let ((?x41226 (* l_0_8_36 l_0_8_36)))
 (let ((?x41224 (* l_0_8_35 l_0_8_35)))
 (let ((?x41222 (* l_0_8_34 l_0_8_34)))
 (let ((?x41220 (* l_0_8_33 l_0_8_33)))
 (let ((?x41218 (* l_0_8_32 l_0_8_32)))
 (let ((?x41216 (* l_0_8_31 l_0_8_31)))
 (let ((?x41214 (* l_0_8_30 l_0_8_30)))
 (let ((?x28727 (* l_0_8_29 l_0_8_29)))
 (let ((?x43752 (* l_0_8_261 l_0_8_261)))
 (let ((?x43750 (* l_0_8_260 l_0_8_260)))
 (let ((?x43748 (* l_0_8_259 l_0_8_259)))
 (let ((?x43746 (* l_0_8_258 l_0_8_258)))
 (let ((?x43744 (* l_0_8_257 l_0_8_257)))
 (let ((?x43742 (* l_0_8_256 l_0_8_256)))
 (let ((?x43743 (- (- (* (- l_0_8_254) l_0_8_254) (* l_0_8_255 l_0_8_255)) ?x43742)))
 (let ((?x43755 (+ (+ (- (- (- (- (- ?x43743 ?x43744) ?x43746) ?x43748) ?x43750) ?x43752) ?x28727) ?x41214)))
 (let ((?x43762 (- (+ (+ (+ (+ (+ (+ ?x43755 ?x41216) ?x41218) ?x41220) ?x41222) ?x41224) ?x41226) ?x41228)))
 (let ((?x43769 (- (- (- (- (- (- (- ?x43762 ?x41230) ?x41232) ?x41234) ?x41236) ?x41238) ?x41240) ?x41242)))
 (= ?x43769 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x41312 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41309 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41306 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41303 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41300 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41297 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41294 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41291 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41288 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41285 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41282 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41279 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41276 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x40259 (* 2.0 l_0_8_31)))
 (let ((?x41273 (* ?x40259 l_0_8_39)))
 (let ((?x40256 (* 2.0 l_0_8_30)))
 (let ((?x41271 (* ?x40256 l_0_8_38)))
 (let ((?x40492 (* 2.0 l_0_8_29)))
 (let ((?x41931 (* ?x40492 l_0_8_37)))
 (let ((?x43818 (* (* 2.0 l_0_8_261) l_0_8_269)))
 (let ((?x43815 (* (* 2.0 l_0_8_260) l_0_8_268)))
 (let ((?x43812 (* (* 2.0 l_0_8_259) l_0_8_267)))
 (let ((?x43809 (* (* 2.0 l_0_8_258) l_0_8_266)))
 (let ((?x43806 (* (* 2.0 l_0_8_257) l_0_8_265)))
 (let ((?x43803 (* (* 2.0 l_0_8_256) l_0_8_264)))
 (let ((?x43800 (* (* 2.0 l_0_8_255) l_0_8_263)))
 (let ((?x43810 (- (- (- (- (* (* (- 2.0) l_0_8_254) l_0_8_262) ?x43800) ?x43803) ?x43806) ?x43809)))
 (let ((?x43823 (+ (+ (+ (+ (- (- (- ?x43810 ?x43812) ?x43815) ?x43818) ?x41931) ?x41271) ?x41273) ?x41276)))
 (let ((?x43830 (- (- (- (+ (+ (+ (+ ?x43823 ?x41279) ?x41282) ?x41285) ?x41288) ?x41291) ?x41294) ?x41297)))
 (= (- (- (- (- (- ?x43830 ?x41300) ?x41303) ?x41306) ?x41309) ?x41312) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x41400 (* l_0_8_90 l_0_8_90)))
 (let ((?x41398 (* l_0_8_89 l_0_8_89)))
 (let ((?x41396 (* l_0_8_88 l_0_8_88)))
 (let ((?x41394 (* l_0_8_87 l_0_8_87)))
 (let ((?x41392 (* l_0_8_86 l_0_8_86)))
 (let ((?x41390 (* l_0_8_85 l_0_8_85)))
 (let ((?x41388 (* l_0_8_84 l_0_8_84)))
 (let ((?x41386 (* l_0_8_83 l_0_8_83)))
 (let ((?x41384 (* l_0_8_82 l_0_8_82)))
 (let ((?x41382 (* l_0_8_45 l_0_8_45)))
 (let ((?x41380 (* l_0_8_44 l_0_8_44)))
 (let ((?x41378 (* l_0_8_43 l_0_8_43)))
 (let ((?x41376 (* l_0_8_42 l_0_8_42)))
 (let ((?x41363 (* l_0_8_41 l_0_8_41)))
 (let ((?x41360 (* l_0_8_40 l_0_8_40)))
 (let ((?x41356 (* l_0_8_39 l_0_8_39)))
 (let ((?x41352 (* l_0_8_38 l_0_8_38)))
 (let ((?x41404 (* l_0_8_37 l_0_8_37)))
 (let ((?x43893 (* l_0_8_270 l_0_8_270)))
 (let ((?x43891 (* l_0_8_269 l_0_8_269)))
 (let ((?x43889 (* l_0_8_268 l_0_8_268)))
 (let ((?x43887 (* l_0_8_267 l_0_8_267)))
 (let ((?x43885 (* l_0_8_266 l_0_8_266)))
 (let ((?x43883 (* l_0_8_265 l_0_8_265)))
 (let ((?x43881 (* l_0_8_264 l_0_8_264)))
 (let ((?x43882 (- (- (* (- l_0_8_262) l_0_8_262) (* l_0_8_263 l_0_8_263)) ?x43881)))
 (let ((?x43895 (+ (- (- (- (- (- (- ?x43882 ?x43883) ?x43885) ?x43887) ?x43889) ?x43891) ?x43893) ?x41404)))
 (let ((?x43902 (+ (+ (+ (+ (+ (+ (+ ?x43895 ?x41352) ?x41356) ?x41360) ?x41363) ?x41376) ?x41378) ?x41380)))
 (let ((?x43909 (- (- (- (- (- (- (+ ?x43902 ?x41382) ?x41384) ?x41386) ?x41388) ?x41390) ?x41392) ?x41394)))
 (= (- (- (- ?x43909 ?x41396) ?x41398) ?x41400) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x19650 (* ?x28835 l_0_8_92)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_137) ?x19650) 0.0))))
(assert
 (let ((?x43660 (* 2.0 l_0_8_253)))
 (let ((?x43702 (* ?x43660 l_0_8_268)))
 (let ((?x43657 (* 2.0 l_0_8_252)))
 (let ((?x43700 (* ?x43657 l_0_8_267)))
 (let ((?x43654 (* 2.0 l_0_8_251)))
 (let ((?x43698 (* ?x43654 l_0_8_266)))
 (let ((?x43651 (* 2.0 l_0_8_250)))
 (let ((?x43696 (* ?x43651 l_0_8_265)))
 (let ((?x43647 (* 2.0 l_0_8_249)))
 (let ((?x43693 (* ?x43647 l_0_8_264)))
 (let ((?x43644 (* 2.0 l_0_8_248)))
 (let ((?x43691 (* ?x43644 l_0_8_263)))
 (let ((?x43641 (* 2.0 l_0_8_247)))
 (let ((?x43689 (* ?x43641 l_0_8_262)))
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x43997 (* ?x43996 l_0_8_178)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x43994 (* ?x43993 l_0_8_177)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x43991 (* ?x43990 l_0_8_176)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x43988 (* ?x43987 l_0_8_175)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x43985 (* ?x43984 l_0_8_174)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x43982 (* ?x43981 l_0_8_173)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x43979 (* ?x43978 l_0_8_172)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x43976 (* ?x39357 l_0_8_146)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x43974 (* ?x43973 l_0_8_133)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x43971 (* ?x43970 l_0_8_132)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x43968 (* ?x43967 l_0_8_131)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x43965 (* ?x43964 l_0_8_130)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43962 (* ?x41627 l_0_8_129)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43960 (* ?x41624 l_0_8_128)))
 (let ((?x12058 (* (- 2.0) l_0_8_101)))
 (let ((?x43957 (* ?x12058 l_0_8_91)))
 (let ((?x43966 (+ (+ (+ (+ ?x43957 (* (* 2.0 l_0_8_112) l_0_8_127)) ?x43960) ?x43962) ?x43965)))
 (let ((?x43986 (- (- (- (+ (+ (+ (+ ?x43966 ?x43968) ?x43971) ?x43974) ?x43976) ?x43979) ?x43982) ?x43985)))
 (let ((?x44001 (+ (+ (+ (- (- (- (- ?x43986 ?x43988) ?x43991) ?x43994) ?x43997) ?x43689) ?x43691) ?x43693)))
 (= (+ (+ (+ (+ ?x44001 ?x43696) ?x43698) ?x43700) ?x43702) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x39358 (* ?x39357 l_0_8_151)))
 (= (+ (* (* (- 2.0) l_0_8_106) l_0_8_91) ?x39358) 0.0))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44053 (* ?x39357 l_0_8_157)))
 (= (+ (* (* (- 2.0) l_0_8_112) l_0_8_91) ?x44053) 0.0))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44060 (* ?x39357 l_0_8_164)))
 (= (+ (* (* (- 2.0) l_0_8_119) l_0_8_91) ?x44060) 0.0))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44071 (* ?x39357 l_0_8_172)))
 (= (+ (* (* (- 2.0) l_0_8_127) l_0_8_91) ?x44071) 0.0))))
(assert
 (let ((?x44089 (* l_0_8_93 l_0_8_93)))
 (let ((?x44087 (* l_0_8_92 l_0_8_92)))
 (let ((?x44081 (* l_0_8_138 l_0_8_138)))
 (let ((?x44079 (* l_0_8_137 l_0_8_137)))
 (let ((?x44082 (+ ?x44079 ?x44081)))
 (= (- (- ?x44082 ?x44087) ?x44089) 0.0)))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x42565 (* ?x41733 l_0_8_95)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x42563 (* ?x41730 l_0_8_94)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x42553 (* ?x39620 l_0_8_140)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x42551 (* ?x39617 l_0_8_139)))
 (= (- (- (+ ?x42551 ?x42553) ?x42563) ?x42565) 0.0))))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44110 (* ?x39620 l_0_8_147)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44108 (* ?x39617 l_0_8_146)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44106 (* ?x39769 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_101) l_0_8_92) ?x44106) ?x44108) ?x44110) 0.0))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x39621 (* ?x39620 l_0_8_152)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x39618 (* ?x39617 l_0_8_151)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39611 (* ?x39498 l_0_8_93)))
 (let ((?x39622 (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_92) ?x39611) ?x39618) ?x39621)))
 (= ?x39622 0.0)))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44132 (* ?x39620 l_0_8_158)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44130 (* ?x39617 l_0_8_157)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44128 (* ?x41624 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_112) l_0_8_92) ?x44128) ?x44130) ?x44132) 0.0))))))))
(assert
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x43997 (* ?x43996 l_0_8_178)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x43994 (* ?x43993 l_0_8_177)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x43991 (* ?x43990 l_0_8_176)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x43988 (* ?x43987 l_0_8_175)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x43985 (* ?x43984 l_0_8_174)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x43982 (* ?x43981 l_0_8_173)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x43979 (* ?x43978 l_0_8_172)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44149 (* ?x39620 l_0_8_165)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44147 (* ?x39617 l_0_8_164)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44145 (* ?x29153 l_0_8_93)))
 (let ((?x29158 (* 2.0 l_0_8_119)))
 (let ((?x44143 (* ?x29158 l_0_8_92)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x43974 (* ?x43973 l_0_8_133)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x43971 (* ?x43970 l_0_8_132)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x43968 (* ?x43967 l_0_8_131)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x43965 (* ?x43964 l_0_8_130)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43962 (* ?x41627 l_0_8_129)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43960 (* ?x41624 l_0_8_128)))
 (let ((?x19766 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_127) ?x43960) ?x43962) ?x43965) ?x43968)))
 (let ((?x44142 (- (- ?x19766 ?x43971) ?x43974)))
 (let ((?x44153 (+ (+ (+ (+ (+ (- (- ?x44142 ?x44143) ?x44145) ?x44147) ?x44149) ?x43979) ?x43982) ?x43985)))
 (= (+ (+ (+ (+ ?x44153 ?x43988) ?x43991) ?x43994) ?x43997) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x33345 (* ?x39620 l_0_8_173)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x33415 (* ?x39617 l_0_8_172)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x33411 (* ?x15370 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_127) l_0_8_92) ?x33411) ?x33415) ?x33345) 0.0))))))))
(assert
 (let ((?x42717 (* l_0_8_96 l_0_8_96)))
 (let ((?x42715 (* l_0_8_95 l_0_8_95)))
 (let ((?x42713 (* l_0_8_94 l_0_8_94)))
 (let ((?x42698 (* l_0_8_141 l_0_8_141)))
 (let ((?x44175 (- (+ (+ (* l_0_8_139 l_0_8_139) (* l_0_8_140 l_0_8_140)) ?x42698) ?x42713)))
 (= (- (- ?x44175 ?x42715) ?x42717) 0.0)))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43063 (* ?x39664 l_0_8_148)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43061 (* ?x39661 l_0_8_147)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43058 (* ?x39658 l_0_8_146)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x43053 (* ?x39781 l_0_8_96)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x43051 (* ?x39769 l_0_8_95)))
 (let ((?x44184 (+ (+ (- (- (* (* (- 2.0) l_0_8_101) l_0_8_94) ?x43051) ?x43053) ?x43058) ?x43061)))
 (= (+ ?x44184 ?x43063) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x39665 (* ?x39664 l_0_8_153)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x39662 (* ?x39661 l_0_8_152)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x39659 (* ?x39658 l_0_8_151)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39656 (* ?x39501 l_0_8_96)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39654 (* ?x39498 l_0_8_95)))
 (let ((?x39663 (+ (+ (- (- (* (* (- 2.0) l_0_8_106) l_0_8_94) ?x39654) ?x39656) ?x39659) ?x39662)))
 (let ((?x39666 (+ ?x39663 ?x39665)))
 (= ?x39666 0.0))))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43221 (* ?x39664 l_0_8_159)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43219 (* ?x39661 l_0_8_158)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43216 (* ?x39658 l_0_8_157)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43212 (* ?x41627 l_0_8_96)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43210 (* ?x41624 l_0_8_95)))
 (let ((?x44196 (+ (+ (- (- (* (* (- 2.0) l_0_8_112) l_0_8_94) ?x43210) ?x43212) ?x43216) ?x43219)))
 (= (+ ?x44196 ?x43221) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43307 (* ?x39664 l_0_8_166)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43305 (* ?x39661 l_0_8_165)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43302 (* ?x39658 l_0_8_164)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x43299 (* ?x41920 l_0_8_96)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x43297 (* ?x29153 l_0_8_95)))
 (let ((?x44211 (+ (+ (- (- (* (* (- 2.0) l_0_8_119) l_0_8_94) ?x43297) ?x43299) ?x43302) ?x43305)))
 (= (+ ?x44211 ?x43307) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43400 (* ?x39664 l_0_8_174)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43398 (* ?x39661 l_0_8_173)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43395 (* ?x39658 l_0_8_172)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x43392 (* ?x41972 l_0_8_96)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x43390 (* ?x15370 l_0_8_95)))
 (let ((?x33451 (+ (+ (- (- (* (* (- 2.0) l_0_8_127) l_0_8_94) ?x43390) ?x43392) ?x43395) ?x43398)))
 (= (+ ?x33451 ?x43400) 0.0)))))))))))))
(assert
 (let ((?x44228 (* l_0_8_150 l_0_8_150)))
 (let ((?x44226 (* l_0_8_149 l_0_8_149)))
 (let ((?x44224 (* l_0_8_148 l_0_8_148)))
 (let ((?x44222 (* l_0_8_147 l_0_8_147)))
 (let ((?x44220 (* l_0_8_146 l_0_8_146)))
 (let ((?x44218 (* l_0_8_105 l_0_8_105)))
 (let ((?x19890 (* l_0_8_104 l_0_8_104)))
 (let ((?x33455 (* l_0_8_103 l_0_8_103)))
 (let ((?x19889 (- (- (* (- l_0_8_101) l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x33455)))
 (let ((?x44229 (+ (+ (+ (+ (+ (- (- ?x19889 ?x19890) ?x44218) ?x44220) ?x44222) ?x44224) ?x44226) ?x44228)))
 (= ?x44229 0.0))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x39809 (* ?x39808 l_0_8_155)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x39806 (* ?x39805 l_0_8_154)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x39803 (* ?x39802 l_0_8_153)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x39800 (* ?x39799 l_0_8_152)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x39797 (* ?x39796 l_0_8_151)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x39788 (* ?x39787 l_0_8_110)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x39785 (* ?x39784 l_0_8_109)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x39782 (* ?x39781 l_0_8_108)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x39779 (* ?x39769 l_0_8_107)))
 (let ((?x39789 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_106) ?x39779) ?x39782) ?x39785) ?x39788)))
 (= (+ (+ (+ (+ (+ ?x39789 ?x39797) ?x39800) ?x39803) ?x39806) ?x39809) 0.0)))))))))))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44268 (* ?x39808 l_0_8_161)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44266 (* ?x39805 l_0_8_160)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44264 (* ?x39802 l_0_8_159)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44262 (* ?x39799 l_0_8_158)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44260 (* ?x39796 l_0_8_157)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44258 (* ?x39787 l_0_8_116)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44256 (* ?x39784 l_0_8_115)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44254 (* ?x39781 l_0_8_114)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44252 (* ?x39769 l_0_8_113)))
 (let ((?x44259 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_112) ?x44252) ?x44254) ?x44256) ?x44258)))
 (= (+ (+ (+ (+ (+ ?x44259 ?x44260) ?x44262) ?x44264) ?x44266) ?x44268) 0.0)))))))))))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44311 (* ?x39808 l_0_8_168)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44309 (* ?x39805 l_0_8_167)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44307 (* ?x39802 l_0_8_166)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44305 (* ?x39799 l_0_8_165)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44303 (* ?x39796 l_0_8_164)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44301 (* ?x39787 l_0_8_123)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44299 (* ?x39784 l_0_8_122)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44297 (* ?x39781 l_0_8_121)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44295 (* ?x39769 l_0_8_120)))
 (let ((?x44302 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_119) ?x44295) ?x44297) ?x44299) ?x44301)))
 (= (+ (+ (+ (+ (+ ?x44302 ?x44303) ?x44305) ?x44307) ?x44309) ?x44311) 0.0)))))))))))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44361 (* ?x39808 l_0_8_176)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44359 (* ?x39805 l_0_8_175)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44357 (* ?x39802 l_0_8_174)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44355 (* ?x39799 l_0_8_173)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44353 (* ?x39796 l_0_8_172)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44351 (* ?x39787 l_0_8_131)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44341 (* ?x39784 l_0_8_130)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44338 (* ?x39781 l_0_8_129)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44334 (* ?x39769 l_0_8_128)))
 (let ((?x44352 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_127) ?x44334) ?x44338) ?x44341) ?x44351)))
 (= (+ (+ (+ (+ (+ ?x44352 ?x44353) ?x44355) ?x44357) ?x44359) ?x44361) 0.0)))))))))))))))))))))
(assert
 (let ((?x39862 (* l_0_8_156 l_0_8_156)))
 (let ((?x39860 (* l_0_8_155 l_0_8_155)))
 (let ((?x39858 (* l_0_8_154 l_0_8_154)))
 (let ((?x39856 (* l_0_8_153 l_0_8_153)))
 (let ((?x39854 (* l_0_8_152 l_0_8_152)))
 (let ((?x39852 (* l_0_8_151 l_0_8_151)))
 (let ((?x39850 (* l_0_8_111 l_0_8_111)))
 (let ((?x39848 (* l_0_8_110 l_0_8_110)))
 (let ((?x39846 (* l_0_8_109 l_0_8_109)))
 (let ((?x39844 (* l_0_8_108 l_0_8_108)))
 (let ((?x39845 (- (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x39844)))
 (let ((?x39859 (+ (+ (+ (+ (- (- (- ?x39845 ?x39846) ?x39848) ?x39850) ?x39852) ?x39854) ?x39856) ?x39858)))
 (let ((?x39863 (+ (+ ?x39859 ?x39860) ?x39862)))
 (= ?x39863 0.0)))))))))))))))
(assert
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39919 (* ?x39528 l_0_8_162)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39917 (* ?x39525 l_0_8_161)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39915 (* ?x39522 l_0_8_160)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39913 (* ?x39519 l_0_8_159)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39911 (* ?x39516 l_0_8_158)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39909 (* ?x39513 l_0_8_157)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39907 (* ?x39510 l_0_8_117)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39905 (* ?x39507 l_0_8_116)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39903 (* ?x39504 l_0_8_115)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39901 (* ?x39501 l_0_8_114)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39899 (* ?x39498 l_0_8_113)))
 (let ((?x39906 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x39899) ?x39901) ?x39903) ?x39905)))
 (let ((?x39920 (+ (+ (+ (+ (+ (+ (- ?x39906 ?x39907) ?x39909) ?x39911) ?x39913) ?x39915) ?x39917) ?x39919)))
 (= ?x39920 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x40040 (* ?x39528 l_0_8_177)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x40038 (* ?x39525 l_0_8_176)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x40036 (* ?x39522 l_0_8_175)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x40034 (* ?x39519 l_0_8_174)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x40032 (* ?x39516 l_0_8_173)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x40030 (* ?x39513 l_0_8_172)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x40028 (* ?x39510 l_0_8_132)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x40026 (* ?x39507 l_0_8_131)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x40024 (* ?x39504 l_0_8_130)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x40022 (* ?x39501 l_0_8_129)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x40020 (* ?x39498 l_0_8_128)))
 (let ((?x40027 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_127) ?x40020) ?x40022) ?x40024) ?x40026)))
 (let ((?x40041 (+ (+ (+ (+ (+ (+ (- ?x40027 ?x40028) ?x40030) ?x40032) ?x40034) ?x40036) ?x40038) ?x40040)))
 (= ?x40041 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x44394 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393)))
 (let ((?x44408 (+ (+ (+ (- (- (- (- ?x44394 ?x44395) ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407)))
 (= (+ (+ (+ (+ ?x44408 ?x44409) ?x44411) ?x44413) ?x44415) 0.0))))))))))))))))
(assert
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x44470 (* ?x43996 l_0_8_170)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x44468 (* ?x43993 l_0_8_169)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x44466 (* ?x43990 l_0_8_168)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x44464 (* ?x43987 l_0_8_167)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x44462 (* ?x43984 l_0_8_166)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x44460 (* ?x43981 l_0_8_165)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x44458 (* ?x43978 l_0_8_164)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x44456 (* ?x43973 l_0_8_125)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x44454 (* ?x43970 l_0_8_124)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x44452 (* ?x43967 l_0_8_123)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x44450 (* ?x43964 l_0_8_122)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x41627 l_0_8_121)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x41624 l_0_8_120)))
 (let ((?x44453 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44450) ?x44452)))
 (let ((?x44467 (+ (+ (+ (+ (+ (- (- ?x44453 ?x44454) ?x44456) ?x44458) ?x44460) ?x44462) ?x44464) ?x44466)))
 (= (+ (+ ?x44467 ?x44468) ?x44470) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x43997 (* ?x43996 l_0_8_178)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x43994 (* ?x43993 l_0_8_177)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x43991 (* ?x43990 l_0_8_176)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x43988 (* ?x43987 l_0_8_175)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x43985 (* ?x43984 l_0_8_174)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x43982 (* ?x43981 l_0_8_173)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x43979 (* ?x43978 l_0_8_172)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x43974 (* ?x43973 l_0_8_133)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x43971 (* ?x43970 l_0_8_132)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x43968 (* ?x43967 l_0_8_131)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x43965 (* ?x43964 l_0_8_130)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43962 (* ?x41627 l_0_8_129)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43960 (* ?x41624 l_0_8_128)))
 (let ((?x19766 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_127) ?x43960) ?x43962) ?x43965) ?x43968)))
 (let ((?x44142 (- (- ?x19766 ?x43971) ?x43974)))
 (let ((?x44496 (+ (+ (+ (+ (+ (+ (+ ?x44142 ?x43979) ?x43982) ?x43985) ?x43988) ?x43991) ?x43994) ?x43997)))
 (= ?x44496 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x44541 (* l_0_8_171 l_0_8_171)))
 (let ((?x44539 (* l_0_8_170 l_0_8_170)))
 (let ((?x44537 (* l_0_8_169 l_0_8_169)))
 (let ((?x44535 (* l_0_8_168 l_0_8_168)))
 (let ((?x44533 (* l_0_8_167 l_0_8_167)))
 (let ((?x44531 (* l_0_8_166 l_0_8_166)))
 (let ((?x44529 (* l_0_8_165 l_0_8_165)))
 (let ((?x44527 (* l_0_8_164 l_0_8_164)))
 (let ((?x44525 (* l_0_8_126 l_0_8_126)))
 (let ((?x44523 (* l_0_8_125 l_0_8_125)))
 (let ((?x44521 (* l_0_8_124 l_0_8_124)))
 (let ((?x44519 (* l_0_8_123 l_0_8_123)))
 (let ((?x44517 (* l_0_8_122 l_0_8_122)))
 (let ((?x44515 (* l_0_8_121 l_0_8_121)))
 (let ((?x44516 (- (- (* (- l_0_8_119) l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44515)))
 (let ((?x44530 (+ (+ (- (- (- (- (- ?x44516 ?x44517) ?x44519) ?x44521) ?x44523) ?x44525) ?x44527) ?x44529)))
 (= (+ (+ (+ (+ (+ (+ ?x44530 ?x44531) ?x44533) ?x44535) ?x44537) ?x44539) ?x44541) 0.0))))))))))))))))))
(assert
 (let ((?x44620 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44617 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44614 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44611 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44608 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44605 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44602 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44599 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44596 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44593 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44590 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44587 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44584 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x44581 (* ?x41920 l_0_8_129)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44579 (* ?x29153 l_0_8_128)))
 (let ((?x44588 (- (- (- (- (* (* (- 2.0) l_0_8_119) l_0_8_127) ?x44579) ?x44581) ?x44584) ?x44587)))
 (let ((?x44609 (+ (+ (+ (+ (- (- (- ?x44588 ?x44590) ?x44593) ?x44596) ?x44599) ?x44602) ?x44605) ?x44608)))
 (= (+ (+ (+ (+ ?x44609 ?x44611) ?x44614) ?x44617) ?x44620) 0.0)))))))))))))))))))))
(assert
 (let ((?x44693 (* l_0_8_180 l_0_8_180)))
 (let ((?x44691 (* l_0_8_179 l_0_8_179)))
 (let ((?x44689 (* l_0_8_178 l_0_8_178)))
 (let ((?x44687 (* l_0_8_177 l_0_8_177)))
 (let ((?x44685 (* l_0_8_176 l_0_8_176)))
 (let ((?x44683 (* l_0_8_175 l_0_8_175)))
 (let ((?x44681 (* l_0_8_174 l_0_8_174)))
 (let ((?x44679 (* l_0_8_173 l_0_8_173)))
 (let ((?x44677 (* l_0_8_172 l_0_8_172)))
 (let ((?x44675 (* l_0_8_135 l_0_8_135)))
 (let ((?x44673 (* l_0_8_134 l_0_8_134)))
 (let ((?x44671 (* l_0_8_133 l_0_8_133)))
 (let ((?x44669 (* l_0_8_132 l_0_8_132)))
 (let ((?x44656 (* l_0_8_131 l_0_8_131)))
 (let ((?x44653 (* l_0_8_130 l_0_8_130)))
 (let ((?x44649 (* l_0_8_129 l_0_8_129)))
 (let ((?x44651 (- (- (* (- l_0_8_127) l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44649)))
 (let ((?x44678 (+ (- (- (- (- (- (- ?x44651 ?x44653) ?x44656) ?x44669) ?x44671) ?x44673) ?x44675) ?x44677)))
 (let ((?x44692 (+ (+ (+ (+ (+ (+ (+ ?x44678 ?x44679) ?x44681) ?x44683) ?x44685) ?x44687) ?x44689) ?x44691)))
 (= (+ ?x44692 ?x44693) 0.0)))))))))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x19650 (* ?x28835 l_0_8_92)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_137) ?x19650) 0.0))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x28836 (* ?x28835 l_0_8_97)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x28837 (* ?x39357 l_0_8_142)))
 (= (- ?x28837 ?x28836) 0.0))))))
(assert
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x30242 (* ?x42516 l_0_8_255)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x30238 (* ?x42513 l_0_8_254)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44149 (* ?x39620 l_0_8_165)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44147 (* ?x39617 l_0_8_164)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x43976 (* ?x39357 l_0_8_146)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44145 (* ?x29153 l_0_8_93)))
 (let ((?x29158 (* 2.0 l_0_8_119)))
 (let ((?x44143 (* ?x29158 l_0_8_92)))
 (let ((?x12058 (* (- 2.0) l_0_8_101)))
 (let ((?x43957 (* ?x12058 l_0_8_91)))
 (let ((?x44730 (+ (+ (- (- (+ (+ (+ ?x43957 ?x44143) ?x44145) ?x43976) ?x44147) ?x44149) ?x30238) ?x30242)))
 (= ?x44730 0.0)))))))))))))))))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44053 (* ?x39357 l_0_8_157)))
 (= (+ (* (* (- 2.0) l_0_8_112) l_0_8_91) ?x44053) 0.0))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44060 (* ?x39357 l_0_8_164)))
 (= (+ (* (* (- 2.0) l_0_8_119) l_0_8_91) ?x44060) 0.0))))
(assert
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44071 (* ?x39357 l_0_8_172)))
 (= (+ (* (* (- 2.0) l_0_8_127) l_0_8_91) ?x44071) 0.0))))
(assert
 (let ((?x44089 (* l_0_8_93 l_0_8_93)))
 (let ((?x44087 (* l_0_8_92 l_0_8_92)))
 (let ((?x44081 (* l_0_8_138 l_0_8_138)))
 (let ((?x44079 (* l_0_8_137 l_0_8_137)))
 (let ((?x44082 (+ ?x44079 ?x44081)))
 (= (- (- ?x44082 ?x44087) ?x44089) 0.0)))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x42565 (* ?x41733 l_0_8_95)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x42563 (* ?x41730 l_0_8_94)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x42553 (* ?x39620 l_0_8_140)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x42551 (* ?x39617 l_0_8_139)))
 (= (- (- (+ ?x42551 ?x42553) ?x42563) ?x42565) 0.0))))))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x41734 (* ?x41733 l_0_8_98)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x41731 (* ?x41730 l_0_8_97)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x15023 (* ?x39620 l_0_8_143)))
 (let ((?x41725 (+ (* (* 2.0 l_0_8_137) l_0_8_142) ?x15023)))
 (= (- (- ?x41725 ?x41731) ?x41734) 0.0)))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44110 (* ?x39620 l_0_8_147)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44108 (* ?x39617 l_0_8_146)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44106 (* ?x39769 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_101) l_0_8_92) ?x44106) ?x44108) ?x44110) 0.0))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44132 (* ?x39620 l_0_8_158)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44130 (* ?x39617 l_0_8_157)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44128 (* ?x41624 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_112) l_0_8_92) ?x44128) ?x44130) ?x44132) 0.0))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44149 (* ?x39620 l_0_8_165)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44147 (* ?x39617 l_0_8_164)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44145 (* ?x29153 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_119) l_0_8_92) ?x44145) ?x44147) ?x44149) 0.0))))))))
(assert
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x33345 (* ?x39620 l_0_8_173)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x33415 (* ?x39617 l_0_8_172)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x33411 (* ?x15370 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_127) l_0_8_92) ?x33411) ?x33415) ?x33345) 0.0))))))))
(assert
 (let ((?x42717 (* l_0_8_96 l_0_8_96)))
 (let ((?x42715 (* l_0_8_95 l_0_8_95)))
 (let ((?x42713 (* l_0_8_94 l_0_8_94)))
 (let ((?x42698 (* l_0_8_141 l_0_8_141)))
 (let ((?x44175 (- (+ (+ (* l_0_8_139 l_0_8_139) (* l_0_8_140 l_0_8_140)) ?x42698) ?x42713)))
 (= (- (- ?x44175 ?x42715) ?x42717) 0.0)))))))
(assert
 (let ((?x41760 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x41757 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x41754 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x41744 (* ?x39664 l_0_8_144)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x15142 (* ?x39661 l_0_8_143)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x13884 (* ?x39658 l_0_8_142)))
 (let ((?x41745 (+ (+ ?x13884 ?x15142) ?x41744)))
 (= (- (- (- ?x41745 ?x41754) ?x41757) ?x41760) 0.0))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43063 (* ?x39664 l_0_8_148)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43061 (* ?x39661 l_0_8_147)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43058 (* ?x39658 l_0_8_146)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x43053 (* ?x39781 l_0_8_96)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x43051 (* ?x39769 l_0_8_95)))
 (let ((?x44184 (+ (+ (- (- (* (* (- 2.0) l_0_8_101) l_0_8_94) ?x43051) ?x43053) ?x43058) ?x43061)))
 (= (+ ?x44184 ?x43063) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43221 (* ?x39664 l_0_8_159)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43219 (* ?x39661 l_0_8_158)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43216 (* ?x39658 l_0_8_157)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x43212 (* ?x41627 l_0_8_96)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x43210 (* ?x41624 l_0_8_95)))
 (let ((?x44196 (+ (+ (- (- (* (* (- 2.0) l_0_8_112) l_0_8_94) ?x43210) ?x43212) ?x43216) ?x43219)))
 (= (+ ?x44196 ?x43221) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43307 (* ?x39664 l_0_8_166)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43305 (* ?x39661 l_0_8_165)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43302 (* ?x39658 l_0_8_164)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x43299 (* ?x41920 l_0_8_96)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x43297 (* ?x29153 l_0_8_95)))
 (let ((?x44211 (+ (+ (- (- (* (* (- 2.0) l_0_8_119) l_0_8_94) ?x43297) ?x43299) ?x43302) ?x43305)))
 (= (+ ?x44211 ?x43307) 0.0)))))))))))))
(assert
 (let ((?x39664 (* 2.0 l_0_8_141)))
 (let ((?x43400 (* ?x39664 l_0_8_174)))
 (let ((?x39661 (* 2.0 l_0_8_140)))
 (let ((?x43398 (* ?x39661 l_0_8_173)))
 (let ((?x39658 (* 2.0 l_0_8_139)))
 (let ((?x43395 (* ?x39658 l_0_8_172)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x43392 (* ?x41972 l_0_8_96)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x43390 (* ?x15370 l_0_8_95)))
 (let ((?x33451 (+ (+ (- (- (* (* (- 2.0) l_0_8_127) l_0_8_94) ?x43390) ?x43392) ?x43395) ?x43398)))
 (= (+ ?x33451 ?x43400) 0.0)))))))))))))
(assert
 (let ((?x41817 (* l_0_8_99 l_0_8_99)))
 (let ((?x41815 (* l_0_8_98 l_0_8_98)))
 (let ((?x41813 (* l_0_8_97 l_0_8_97)))
 (let ((?x41804 (* l_0_8_145 l_0_8_145)))
 (let ((?x41802 (* l_0_8_144 l_0_8_144)))
 (let ((?x41800 (* l_0_8_143 l_0_8_143)))
 (let ((?x44765 (+ (+ (* (- l_0_8_100) l_0_8_100) (* l_0_8_142 l_0_8_142)) ?x41800)))
 (= (- (- (- (+ (+ ?x44765 ?x41802) ?x41804) ?x41813) ?x41815) ?x41817) 0.0)))))))))
(assert
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41850 (* ?x39727 l_0_8_149)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41848 (* ?x39724 l_0_8_148)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41846 (* ?x39721 l_0_8_147)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41844 (* ?x39718 l_0_8_146)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x41837 (* ?x39781 l_0_8_99)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x29038 (* ?x39769 l_0_8_98)))
 (let ((?x15177 (* 2.0 l_0_8_101)))
 (let ((?x15179 (* ?x15177 l_0_8_97)))
 (let ((?x41838 (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_104) ?x15179) ?x29038) ?x41837)))
 (= (+ (+ (+ (+ ?x41838 ?x41844) ?x41846) ?x41848) ?x41850) 0.0)))))))))))))))))
(assert
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41929 (* ?x39727 l_0_8_167)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41927 (* ?x39724 l_0_8_166)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41925 (* ?x39721 l_0_8_165)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41923 (* ?x39718 l_0_8_164)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x41921 (* ?x41920 l_0_8_99)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x29154 (* ?x29153 l_0_8_98)))
 (let ((?x29158 (* 2.0 l_0_8_119)))
 (let ((?x29159 (* ?x29158 l_0_8_97)))
 (let ((?x41924 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_122) ?x29159) ?x29154) ?x41921) ?x41923)))
 (let ((?x41930 (+ (+ (+ ?x41924 ?x41925) ?x41927) ?x41929)))
 (= ?x41930 0.0))))))))))))))))))
(assert
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41981 (* ?x39727 l_0_8_175)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41979 (* ?x39724 l_0_8_174)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41977 (* ?x39721 l_0_8_173)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41975 (* ?x39718 l_0_8_172)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x41973 (* ?x41972 l_0_8_99)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x29174 (* ?x15370 l_0_8_98)))
 (let ((?x29155 (* 2.0 l_0_8_127)))
 (let ((?x29160 (* ?x29155 l_0_8_97)))
 (let ((?x41976 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_130) ?x29160) ?x29174) ?x41973) ?x41975)))
 (let ((?x41982 (+ (+ (+ ?x41976 ?x41977) ?x41979) ?x41981)))
 (= ?x41982 0.0))))))))))))))))))
(assert
 (let ((?x44228 (* l_0_8_150 l_0_8_150)))
 (let ((?x44226 (* l_0_8_149 l_0_8_149)))
 (let ((?x44224 (* l_0_8_148 l_0_8_148)))
 (let ((?x44222 (* l_0_8_147 l_0_8_147)))
 (let ((?x44220 (* l_0_8_146 l_0_8_146)))
 (let ((?x44218 (* l_0_8_105 l_0_8_105)))
 (let ((?x19890 (* l_0_8_104 l_0_8_104)))
 (let ((?x33455 (* l_0_8_103 l_0_8_103)))
 (let ((?x19889 (- (- (* (- l_0_8_101) l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x33455)))
 (let ((?x44229 (+ (+ (+ (+ (+ (- (- ?x19889 ?x19890) ?x44218) ?x44220) ?x44222) ?x44224) ?x44226) ?x44228)))
 (= ?x44229 0.0))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44268 (* ?x39808 l_0_8_161)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44266 (* ?x39805 l_0_8_160)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44264 (* ?x39802 l_0_8_159)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44262 (* ?x39799 l_0_8_158)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44260 (* ?x39796 l_0_8_157)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44258 (* ?x39787 l_0_8_116)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44256 (* ?x39784 l_0_8_115)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44254 (* ?x39781 l_0_8_114)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44252 (* ?x39769 l_0_8_113)))
 (let ((?x44259 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_112) ?x44252) ?x44254) ?x44256) ?x44258)))
 (= (+ (+ (+ (+ (+ ?x44259 ?x44260) ?x44262) ?x44264) ?x44266) ?x44268) 0.0)))))))))))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44311 (* ?x39808 l_0_8_168)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44309 (* ?x39805 l_0_8_167)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44307 (* ?x39802 l_0_8_166)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44305 (* ?x39799 l_0_8_165)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44303 (* ?x39796 l_0_8_164)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44301 (* ?x39787 l_0_8_123)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44299 (* ?x39784 l_0_8_122)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44297 (* ?x39781 l_0_8_121)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44295 (* ?x39769 l_0_8_120)))
 (let ((?x44302 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_119) ?x44295) ?x44297) ?x44299) ?x44301)))
 (= (+ (+ (+ (+ (+ ?x44302 ?x44303) ?x44305) ?x44307) ?x44309) ?x44311) 0.0)))))))))))))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44361 (* ?x39808 l_0_8_176)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44359 (* ?x39805 l_0_8_175)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44357 (* ?x39802 l_0_8_174)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44355 (* ?x39799 l_0_8_173)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44353 (* ?x39796 l_0_8_172)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44351 (* ?x39787 l_0_8_131)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44341 (* ?x39784 l_0_8_130)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44338 (* ?x39781 l_0_8_129)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44334 (* ?x39769 l_0_8_128)))
 (let ((?x44352 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_127) ?x44334) ?x44338) ?x44341) ?x44351)))
 (= (+ (+ (+ (+ (+ ?x44352 ?x44353) ?x44355) ?x44357) ?x44359) ?x44361) 0.0)))))))))))))))))))))
(assert
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x44394 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393)))
 (let ((?x44408 (+ (+ (+ (- (- (- (- ?x44394 ?x44395) ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407)))
 (= (+ (+ (+ (+ ?x44408 ?x44409) ?x44411) ?x44413) ?x44415) 0.0))))))))))))))))
(assert
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x44470 (* ?x43996 l_0_8_170)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x44468 (* ?x43993 l_0_8_169)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x44466 (* ?x43990 l_0_8_168)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x44464 (* ?x43987 l_0_8_167)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x44462 (* ?x43984 l_0_8_166)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x44460 (* ?x43981 l_0_8_165)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x44458 (* ?x43978 l_0_8_164)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x44456 (* ?x43973 l_0_8_125)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x44454 (* ?x43970 l_0_8_124)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x44452 (* ?x43967 l_0_8_123)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x44450 (* ?x43964 l_0_8_122)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x41627 l_0_8_121)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x41624 l_0_8_120)))
 (let ((?x44453 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44450) ?x44452)))
 (let ((?x44467 (+ (+ (+ (+ (+ (- (- ?x44453 ?x44454) ?x44456) ?x44458) ?x44460) ?x44462) ?x44464) ?x44466)))
 (= (+ (+ ?x44467 ?x44468) ?x44470) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x44541 (* l_0_8_171 l_0_8_171)))
 (let ((?x44539 (* l_0_8_170 l_0_8_170)))
 (let ((?x44537 (* l_0_8_169 l_0_8_169)))
 (let ((?x44535 (* l_0_8_168 l_0_8_168)))
 (let ((?x44533 (* l_0_8_167 l_0_8_167)))
 (let ((?x44531 (* l_0_8_166 l_0_8_166)))
 (let ((?x44529 (* l_0_8_165 l_0_8_165)))
 (let ((?x44527 (* l_0_8_164 l_0_8_164)))
 (let ((?x44525 (* l_0_8_126 l_0_8_126)))
 (let ((?x44523 (* l_0_8_125 l_0_8_125)))
 (let ((?x44521 (* l_0_8_124 l_0_8_124)))
 (let ((?x44519 (* l_0_8_123 l_0_8_123)))
 (let ((?x44517 (* l_0_8_122 l_0_8_122)))
 (let ((?x44515 (* l_0_8_121 l_0_8_121)))
 (let ((?x44516 (- (- (* (- l_0_8_119) l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44515)))
 (let ((?x44530 (+ (+ (- (- (- (- (- ?x44516 ?x44517) ?x44519) ?x44521) ?x44523) ?x44525) ?x44527) ?x44529)))
 (= (+ (+ (+ (+ (+ (+ ?x44530 ?x44531) ?x44533) ?x44535) ?x44537) ?x44539) ?x44541) 0.0))))))))))))))))))
(assert
 (let ((?x44620 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44617 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44614 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44611 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44608 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44605 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44602 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44599 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44596 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44593 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44590 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44587 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44584 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x44581 (* ?x41920 l_0_8_129)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44579 (* ?x29153 l_0_8_128)))
 (let ((?x44588 (- (- (- (- (* (* (- 2.0) l_0_8_119) l_0_8_127) ?x44579) ?x44581) ?x44584) ?x44587)))
 (let ((?x44609 (+ (+ (+ (+ (- (- (- ?x44588 ?x44590) ?x44593) ?x44596) ?x44599) ?x44602) ?x44605) ?x44608)))
 (= (+ (+ (+ (+ ?x44609 ?x44611) ?x44614) ?x44617) ?x44620) 0.0)))))))))))))))))))))
(assert
 (let ((?x44693 (* l_0_8_180 l_0_8_180)))
 (let ((?x44691 (* l_0_8_179 l_0_8_179)))
 (let ((?x44689 (* l_0_8_178 l_0_8_178)))
 (let ((?x44687 (* l_0_8_177 l_0_8_177)))
 (let ((?x44685 (* l_0_8_176 l_0_8_176)))
 (let ((?x44683 (* l_0_8_175 l_0_8_175)))
 (let ((?x44681 (* l_0_8_174 l_0_8_174)))
 (let ((?x44679 (* l_0_8_173 l_0_8_173)))
 (let ((?x44677 (* l_0_8_172 l_0_8_172)))
 (let ((?x44675 (* l_0_8_135 l_0_8_135)))
 (let ((?x44673 (* l_0_8_134 l_0_8_134)))
 (let ((?x44671 (* l_0_8_133 l_0_8_133)))
 (let ((?x44669 (* l_0_8_132 l_0_8_132)))
 (let ((?x44656 (* l_0_8_131 l_0_8_131)))
 (let ((?x44653 (* l_0_8_130 l_0_8_130)))
 (let ((?x44649 (* l_0_8_129 l_0_8_129)))
 (let ((?x44651 (- (- (* (- l_0_8_127) l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44649)))
 (let ((?x44678 (+ (- (- (- (- (- (- ?x44651 ?x44653) ?x44656) ?x44669) ?x44671) ?x44673) ?x44675) ?x44677)))
 (let ((?x44692 (+ (+ (+ (+ (+ (+ (+ ?x44678 ?x44679) ?x44681) ?x44683) ?x44685) ?x44687) ?x44689) ?x44691)))
 (= (+ ?x44692 ?x44693) 0.0)))))))))))))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x19650 (* ?x28835 l_0_8_92)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x15462 (* ?x29217 l_0_8_227)))
 (let ((?x44800 (- (* (* (- 2.0) l_0_8_136) l_0_8_137) (* (* 2.0 l_0_8_182) l_0_8_191))))
 (let ((?x44803 (- (+ (- ?x44800 (* (* 2.0 l_0_8_183) l_0_8_192)) ?x15462) (* (* 2.0 l_0_8_272) l_0_8_281))))
 (let ((?x44807 (- (- ?x44803 (* (* 2.0 l_0_8_273) l_0_8_282)) (* (* 2.0 l_0_8_317) l_0_8_326))))
 (let ((?x44811 (- (- ?x44807 (* (* 2.0 l_0_8_318) l_0_8_327)) (* (* 2.0 l_0_8_362) l_0_8_371))))
 (let ((?x44815 (- (- ?x44811 (* (* 2.0 l_0_8_363) l_0_8_372)) (* (* 2.0 l_0_8_407) l_0_8_416))))
 (= (+ (- ?x44815 (* (* 2.0 l_0_8_408) l_0_8_417)) ?x19650) 0.0)))))))))))
(assert
 (let ((?x28835 (* 2.0 l_0_8_91)))
 (let ((?x28836 (* ?x28835 l_0_8_97)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42111 (* ?x29217 l_0_8_232)))
 (let ((?x44886 (- (* (* (- 2.0) l_0_8_136) l_0_8_142) (* (* 2.0 l_0_8_187) l_0_8_191))))
 (let ((?x44890 (- (- ?x44886 (* (* 2.0 l_0_8_188) l_0_8_192)) (* (* 2.0 l_0_8_189) l_0_8_193))))
 (let ((?x44895 (- (+ (- ?x44890 (* (* 2.0 l_0_8_190) l_0_8_194)) ?x42111) (* (* 2.0 l_0_8_277) l_0_8_281))))
 (let ((?x44899 (- (- ?x44895 (* (* 2.0 l_0_8_278) l_0_8_282)) (* (* 2.0 l_0_8_279) l_0_8_283))))
 (let ((?x44903 (- (- ?x44899 (* (* 2.0 l_0_8_280) l_0_8_284)) (* (* 2.0 l_0_8_322) l_0_8_326))))
 (let ((?x44907 (- (- ?x44903 (* (* 2.0 l_0_8_323) l_0_8_327)) (* (* 2.0 l_0_8_324) l_0_8_328))))
 (let ((?x44911 (- (- ?x44907 (* (* 2.0 l_0_8_325) l_0_8_329)) (* (* 2.0 l_0_8_367) l_0_8_371))))
 (let ((?x44915 (- (- ?x44911 (* (* 2.0 l_0_8_368) l_0_8_372)) (* (* 2.0 l_0_8_369) l_0_8_373))))
 (let ((?x44919 (- (- ?x44915 (* (* 2.0 l_0_8_370) l_0_8_374)) (* (* 2.0 l_0_8_412) l_0_8_416))))
 (let ((?x44923 (- (- ?x44919 (* (* 2.0 l_0_8_413) l_0_8_417)) (* (* 2.0 l_0_8_414) l_0_8_418))))
 (= (+ (- ?x44923 (* (* 2.0 l_0_8_415) l_0_8_419)) ?x28836) 0.0))))))))))))))))
(assert
 (let ((?x45021 (* l_0_8_420 l_0_8_420)))
 (let ((?x45019 (* l_0_8_419 l_0_8_419)))
 (let ((?x45017 (* l_0_8_418 l_0_8_418)))
 (let ((?x45015 (* l_0_8_417 l_0_8_417)))
 (let ((?x45013 (* l_0_8_416 l_0_8_416)))
 (let ((?x45011 (* l_0_8_375 l_0_8_375)))
 (let ((?x45009 (* l_0_8_374 l_0_8_374)))
 (let ((?x45007 (* l_0_8_373 l_0_8_373)))
 (let ((?x45005 (* l_0_8_372 l_0_8_372)))
 (let ((?x45003 (* l_0_8_371 l_0_8_371)))
 (let ((?x45001 (* l_0_8_330 l_0_8_330)))
 (let ((?x44999 (* l_0_8_329 l_0_8_329)))
 (let ((?x44997 (* l_0_8_328 l_0_8_328)))
 (let ((?x44995 (* l_0_8_327 l_0_8_327)))
 (let ((?x44993 (* l_0_8_326 l_0_8_326)))
 (let ((?x44991 (* l_0_8_285 l_0_8_285)))
 (let ((?x44989 (* l_0_8_284 l_0_8_284)))
 (let ((?x44987 (* l_0_8_283 l_0_8_283)))
 (let ((?x44985 (* l_0_8_282 l_0_8_282)))
 (let ((?x44983 (* l_0_8_281 l_0_8_281)))
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x15887 (* ?x29217 l_0_8_236)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x43976 (* ?x39357 l_0_8_146)))
 (let ((?x44969 (- (- (* (* 2.0 l_0_8_101) l_0_8_91) ?x43976) (* (* 1.0 l_0_8_191) l_0_8_191))))
 (let ((?x44975 (- (- ?x44969 (* (* 1.0 l_0_8_192) l_0_8_192)) (* (* 1.0 l_0_8_193) l_0_8_193))))
 (let ((?x44981 (- (- ?x44975 (* (* 1.0 l_0_8_194) l_0_8_194)) (* (* 1.0 l_0_8_195) l_0_8_195))))
 (let ((?x44994 (- (- (- (- (- (- (+ ?x44981 ?x15887) ?x44983) ?x44985) ?x44987) ?x44989) ?x44991) ?x44993)))
 (let ((?x45008 (- (- (- (- (- (- (- ?x44994 ?x44995) ?x44997) ?x44999) ?x45001) ?x45003) ?x45005) ?x45007)))
 (let ((?x45022 (- (- (- (- (- (- (- ?x45008 ?x45009) ?x45011) ?x45013) ?x45015) ?x45017) ?x45019) ?x45021)))
 (= ?x45022 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42260 (* ?x29217 l_0_8_241)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x39358 (* ?x39357 l_0_8_151)))
 (let ((?x39354 (* 2.0 l_0_8_106)))
 (let ((?x39355 (* ?x39354 l_0_8_91)))
 (let ((?x45059 (- (- (- ?x39355 ?x39358) (* (* 2.0 l_0_8_191) l_0_8_196)) (* (* 2.0 l_0_8_192) l_0_8_197))))
 (let ((?x45065 (- (- ?x45059 (* (* 2.0 l_0_8_193) l_0_8_198)) (* (* 2.0 l_0_8_194) l_0_8_199))))
 (let ((?x45072 (- (+ (- ?x45065 (* (* 2.0 l_0_8_195) l_0_8_200)) ?x42260) (* (* 2.0 l_0_8_281) l_0_8_286))))
 (let ((?x45078 (- (- ?x45072 (* (* 2.0 l_0_8_282) l_0_8_287)) (* (* 2.0 l_0_8_283) l_0_8_288))))
 (let ((?x45084 (- (- ?x45078 (* (* 2.0 l_0_8_284) l_0_8_289)) (* (* 2.0 l_0_8_285) l_0_8_290))))
 (let ((?x45090 (- (- ?x45084 (* (* 2.0 l_0_8_326) l_0_8_331)) (* (* 2.0 l_0_8_327) l_0_8_332))))
 (let ((?x45096 (- (- ?x45090 (* (* 2.0 l_0_8_328) l_0_8_333)) (* (* 2.0 l_0_8_329) l_0_8_334))))
 (let ((?x45102 (- (- ?x45096 (* (* 2.0 l_0_8_330) l_0_8_335)) (* (* 2.0 l_0_8_371) l_0_8_376))))
 (let ((?x45108 (- (- ?x45102 (* (* 2.0 l_0_8_372) l_0_8_377)) (* (* 2.0 l_0_8_373) l_0_8_378))))
 (let ((?x45114 (- (- ?x45108 (* (* 2.0 l_0_8_374) l_0_8_379)) (* (* 2.0 l_0_8_375) l_0_8_380))))
 (let ((?x45120 (- (- ?x45114 (* (* 2.0 l_0_8_416) l_0_8_421)) (* (* 2.0 l_0_8_417) l_0_8_422))))
 (let ((?x45126 (- (- ?x45120 (* (* 2.0 l_0_8_418) l_0_8_423)) (* (* 2.0 l_0_8_419) l_0_8_424))))
 (= (- ?x45126 (* (* 2.0 l_0_8_420) l_0_8_425)) 0.0))))))))))))))))))))
(assert
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42335 (* ?x29217 l_0_8_247)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44053 (* ?x39357 l_0_8_157)))
 (let ((?x45198 (- (- (* (* 2.0 l_0_8_112) l_0_8_91) ?x44053) (* (* 2.0 l_0_8_191) l_0_8_202))))
 (let ((?x45202 (- (- ?x45198 (* (* 2.0 l_0_8_192) l_0_8_203)) (* (* 2.0 l_0_8_193) l_0_8_204))))
 (let ((?x45206 (- (- ?x45202 (* (* 2.0 l_0_8_194) l_0_8_205)) (* (* 2.0 l_0_8_195) l_0_8_206))))
 (let ((?x45211 (- (- (+ ?x45206 ?x42335) (* (* 2.0 l_0_8_281) l_0_8_292)) (* (* 2.0 l_0_8_282) l_0_8_293))))
 (let ((?x45215 (- (- ?x45211 (* (* 2.0 l_0_8_283) l_0_8_294)) (* (* 2.0 l_0_8_284) l_0_8_295))))
 (let ((?x45219 (- (- ?x45215 (* (* 2.0 l_0_8_285) l_0_8_296)) (* (* 2.0 l_0_8_326) l_0_8_337))))
 (let ((?x45223 (- (- ?x45219 (* (* 2.0 l_0_8_327) l_0_8_338)) (* (* 2.0 l_0_8_328) l_0_8_339))))
 (let ((?x45227 (- (- ?x45223 (* (* 2.0 l_0_8_329) l_0_8_340)) (* (* 2.0 l_0_8_330) l_0_8_341))))
 (let ((?x45231 (- (- ?x45227 (* (* 2.0 l_0_8_371) l_0_8_382)) (* (* 2.0 l_0_8_372) l_0_8_383))))
 (let ((?x45235 (- (- ?x45231 (* (* 2.0 l_0_8_373) l_0_8_384)) (* (* 2.0 l_0_8_374) l_0_8_385))))
 (let ((?x45239 (- (- ?x45235 (* (* 2.0 l_0_8_375) l_0_8_386)) (* (* 2.0 l_0_8_416) l_0_8_427))))
 (let ((?x45243 (- (- ?x45239 (* (* 2.0 l_0_8_417) l_0_8_428)) (* (* 2.0 l_0_8_418) l_0_8_429))))
 (let ((?x45247 (- (- ?x45243 (* (* 2.0 l_0_8_419) l_0_8_430)) (* (* 2.0 l_0_8_420) l_0_8_431))))
 (= ?x45247 0.0)))))))))))))))))))
(assert
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x42395 (* ?x29217 l_0_8_254)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44060 (* ?x39357 l_0_8_164)))
 (let ((?x45287 (- (- (* (* 2.0 l_0_8_119) l_0_8_91) ?x44060) (* (* 2.0 l_0_8_191) l_0_8_209))))
 (let ((?x45291 (- (- ?x45287 (* (* 2.0 l_0_8_192) l_0_8_210)) (* (* 2.0 l_0_8_193) l_0_8_211))))
 (let ((?x45295 (- (- ?x45291 (* (* 2.0 l_0_8_194) l_0_8_212)) (* (* 2.0 l_0_8_195) l_0_8_213))))
 (let ((?x45300 (- (- (+ ?x45295 ?x42395) (* (* 2.0 l_0_8_281) l_0_8_299)) (* (* 2.0 l_0_8_282) l_0_8_300))))
 (let ((?x45304 (- (- ?x45300 (* (* 2.0 l_0_8_283) l_0_8_301)) (* (* 2.0 l_0_8_284) l_0_8_302))))
 (let ((?x45308 (- (- ?x45304 (* (* 2.0 l_0_8_285) l_0_8_303)) (* (* 2.0 l_0_8_326) l_0_8_344))))
 (let ((?x45312 (- (- ?x45308 (* (* 2.0 l_0_8_327) l_0_8_345)) (* (* 2.0 l_0_8_328) l_0_8_346))))
 (let ((?x45316 (- (- ?x45312 (* (* 2.0 l_0_8_329) l_0_8_347)) (* (* 2.0 l_0_8_330) l_0_8_348))))
 (let ((?x45320 (- (- ?x45316 (* (* 2.0 l_0_8_371) l_0_8_389)) (* (* 2.0 l_0_8_372) l_0_8_390))))
 (let ((?x45324 (- (- ?x45320 (* (* 2.0 l_0_8_373) l_0_8_391)) (* (* 2.0 l_0_8_374) l_0_8_392))))
 (let ((?x45328 (- (- ?x45324 (* (* 2.0 l_0_8_375) l_0_8_393)) (* (* 2.0 l_0_8_416) l_0_8_434))))
 (let ((?x45332 (- (- ?x45328 (* (* 2.0 l_0_8_417) l_0_8_435)) (* (* 2.0 l_0_8_418) l_0_8_436))))
 (let ((?x45336 (- (- ?x45332 (* (* 2.0 l_0_8_419) l_0_8_437)) (* (* 2.0 l_0_8_420) l_0_8_438))))
 (= ?x45336 0.0)))))))))))))))))))
(assert
 (let ((?x29217 (* 2.0 l_0_8_226)))
 (let ((?x29861 (* ?x29217 l_0_8_262)))
 (let ((?x39357 (* 2.0 l_0_8_136)))
 (let ((?x44071 (* ?x39357 l_0_8_172)))
 (let ((?x45425 (- (- (* (* 2.0 l_0_8_127) l_0_8_91) ?x44071) (* (* 2.0 l_0_8_191) l_0_8_217))))
 (let ((?x45429 (- (- ?x45425 (* (* 2.0 l_0_8_192) l_0_8_218)) (* (* 2.0 l_0_8_193) l_0_8_219))))
 (let ((?x45433 (- (- ?x45429 (* (* 2.0 l_0_8_194) l_0_8_220)) (* (* 2.0 l_0_8_195) l_0_8_221))))
 (let ((?x45438 (- (- (+ ?x45433 ?x29861) (* (* 2.0 l_0_8_281) l_0_8_307)) (* (* 2.0 l_0_8_282) l_0_8_308))))
 (let ((?x45442 (- (- ?x45438 (* (* 2.0 l_0_8_283) l_0_8_309)) (* (* 2.0 l_0_8_284) l_0_8_310))))
 (let ((?x45446 (- (- ?x45442 (* (* 2.0 l_0_8_285) l_0_8_311)) (* (* 2.0 l_0_8_326) l_0_8_352))))
 (let ((?x45450 (- (- ?x45446 (* (* 2.0 l_0_8_327) l_0_8_353)) (* (* 2.0 l_0_8_328) l_0_8_354))))
 (let ((?x45454 (- (- ?x45450 (* (* 2.0 l_0_8_329) l_0_8_355)) (* (* 2.0 l_0_8_330) l_0_8_356))))
 (let ((?x45458 (- (- ?x45454 (* (* 2.0 l_0_8_371) l_0_8_397)) (* (* 2.0 l_0_8_372) l_0_8_398))))
 (let ((?x45462 (- (- ?x45458 (* (* 2.0 l_0_8_373) l_0_8_399)) (* (* 2.0 l_0_8_374) l_0_8_400))))
 (let ((?x45466 (- (- ?x45462 (* (* 2.0 l_0_8_375) l_0_8_401)) (* (* 2.0 l_0_8_416) l_0_8_442))))
 (let ((?x45470 (- (- ?x45466 (* (* 2.0 l_0_8_417) l_0_8_443)) (* (* 2.0 l_0_8_418) l_0_8_444))))
 (let ((?x45474 (- (- ?x45470 (* (* 2.0 l_0_8_419) l_0_8_445)) (* (* 2.0 l_0_8_420) l_0_8_446))))
 (= ?x45474 0.0)))))))))))))))))))
(assert
 (let ((?x44089 (* l_0_8_93 l_0_8_93)))
 (let ((?x44087 (* l_0_8_92 l_0_8_92)))
 (let ((?x42499 (* l_0_8_228 l_0_8_228)))
 (let ((?x42497 (* l_0_8_227 l_0_8_227)))
 (let ((?x45555 (+ (- (* (- l_0_8_137) l_0_8_137) (* l_0_8_138 l_0_8_138)) ?x42497)))
 (= (+ (+ (+ ?x45555 ?x42499) ?x44087) ?x44089) 0.0)))))))
(assert
 (let ((?x41733 (* 2.0 l_0_8_93)))
 (let ((?x41734 (* ?x41733 l_0_8_98)))
 (let ((?x41730 (* 2.0 l_0_8_92)))
 (let ((?x41731 (* ?x41730 l_0_8_97)))
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42536 (* ?x42516 l_0_8_233)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42534 (* ?x42513 l_0_8_232)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x15023 (* ?x39620 l_0_8_143)))
 (let ((?x45567 (+ (+ (+ (- (* (* (- 2.0) l_0_8_137) l_0_8_142) ?x15023) ?x42534) ?x42536) ?x41731)))
 (= (+ ?x45567 ?x41734) 0.0)))))))))))))
(assert
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42559 (* ?x42516 l_0_8_237)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42556 (* ?x42513 l_0_8_236)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44110 (* ?x39620 l_0_8_147)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44108 (* ?x39617 l_0_8_146)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44106 (* ?x39769 l_0_8_93)))
 (let ((?x45578 (+ (- (- (+ (* (* 2.0 l_0_8_101) l_0_8_92) ?x44106) ?x44108) ?x44110) ?x42556)))
 (= (+ ?x45578 ?x42559) 0.0)))))))))))))
(assert
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42595 (* ?x42516 l_0_8_242)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42593 (* ?x42513 l_0_8_241)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x39621 (* ?x39620 l_0_8_152)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x39618 (* ?x39617 l_0_8_151)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39611 (* ?x39498 l_0_8_93)))
 (let ((?x45588 (+ (- (- (+ (* (* 2.0 l_0_8_106) l_0_8_92) ?x39611) ?x39618) ?x39621) ?x42593)))
 (= (+ ?x45588 ?x42595) 0.0)))))))))))))
(assert
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42616 (* ?x42516 l_0_8_248)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42614 (* ?x42513 l_0_8_247)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x44132 (* ?x39620 l_0_8_158)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x44130 (* ?x39617 l_0_8_157)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44128 (* ?x41624 l_0_8_93)))
 (let ((?x34452 (+ (- (- (+ (* (* 2.0 l_0_8_112) l_0_8_92) ?x44128) ?x44130) ?x44132) ?x42614)))
 (= (+ ?x34452 ?x42616) 0.0)))))))))))))
(assert
 (let ((?x42516 (* 2.0 l_0_8_228)))
 (let ((?x42629 (* ?x42516 l_0_8_263)))
 (let ((?x42513 (* 2.0 l_0_8_227)))
 (let ((?x42627 (* ?x42513 l_0_8_262)))
 (let ((?x39620 (* 2.0 l_0_8_138)))
 (let ((?x33345 (* ?x39620 l_0_8_173)))
 (let ((?x39617 (* 2.0 l_0_8_137)))
 (let ((?x33415 (* ?x39617 l_0_8_172)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x33411 (* ?x15370 l_0_8_93)))
 (let ((?x45601 (+ (- (- (+ (* (* 2.0 l_0_8_127) l_0_8_92) ?x33411) ?x33415) ?x33345) ?x42627)))
 (= (+ ?x45601 ?x42629) 0.0)))))))))))))
(assert
 (let ((?x41817 (* l_0_8_99 l_0_8_99)))
 (let ((?x41815 (* l_0_8_98 l_0_8_98)))
 (let ((?x41813 (* l_0_8_97 l_0_8_97)))
 (let ((?x42833 (* l_0_8_235 l_0_8_235)))
 (let ((?x42831 (* l_0_8_234 l_0_8_234)))
 (let ((?x42829 (* l_0_8_233 l_0_8_233)))
 (let ((?x42827 (* l_0_8_232 l_0_8_232)))
 (let ((?x41804 (* l_0_8_145 l_0_8_145)))
 (let ((?x41802 (* l_0_8_144 l_0_8_144)))
 (let ((?x41800 (* l_0_8_143 l_0_8_143)))
 (let ((?x45608 (- (- (- (* l_0_8_100 l_0_8_100) (* l_0_8_142 l_0_8_142)) ?x41800) ?x41802)))
 (let ((?x45615 (+ (+ (+ (+ (+ (+ (- ?x45608 ?x41804) ?x42827) ?x42829) ?x42831) ?x42833) ?x41813) ?x41815)))
 (= (+ ?x45615 ?x41817) 0.0))))))))))))))
(assert
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42866 (* ?x41587 l_0_8_239)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42864 (* ?x41584 l_0_8_238)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42862 (* ?x41581 l_0_8_237)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42860 (* ?x41578 l_0_8_236)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41850 (* ?x39727 l_0_8_149)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41848 (* ?x39724 l_0_8_148)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41846 (* ?x39721 l_0_8_147)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41844 (* ?x39718 l_0_8_146)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x41837 (* ?x39781 l_0_8_99)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x29038 (* ?x39769 l_0_8_98)))
 (let ((?x15177 (* 2.0 l_0_8_101)))
 (let ((?x15179 (* ?x15177 l_0_8_97)))
 (let ((?x45625 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_104) ?x15179) ?x29038) ?x41837) ?x41844)))
 (let ((?x45632 (+ (+ (+ (+ (- (- (- ?x45625 ?x41846) ?x41848) ?x41850) ?x42860) ?x42862) ?x42864) ?x42866)))
 (= ?x45632 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42909 (* ?x41587 l_0_8_244)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42907 (* ?x41584 l_0_8_243)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42905 (* ?x41581 l_0_8_242)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42903 (* ?x41578 l_0_8_241)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x39728 (* ?x39727 l_0_8_154)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x39725 (* ?x39724 l_0_8_153)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x39722 (* ?x39721 l_0_8_152)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x39719 (* ?x39718 l_0_8_151)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39716 (* ?x39501 l_0_8_99)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39714 (* ?x39498 l_0_8_98)))
 (let ((?x39354 (* 2.0 l_0_8_106)))
 (let ((?x39704 (* ?x39354 l_0_8_97)))
 (let ((?x45645 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_109) ?x39704) ?x39714) ?x39716) ?x39719)))
 (let ((?x45652 (+ (+ (+ (+ (- (- (- ?x45645 ?x39722) ?x39725) ?x39728) ?x42903) ?x42905) ?x42907) ?x42909)))
 (= ?x45652 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x42955 (* ?x41587 l_0_8_257)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x42953 (* ?x41584 l_0_8_256)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x42951 (* ?x41581 l_0_8_255)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42949 (* ?x41578 l_0_8_254)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41929 (* ?x39727 l_0_8_167)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41927 (* ?x39724 l_0_8_166)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41925 (* ?x39721 l_0_8_165)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41923 (* ?x39718 l_0_8_164)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x41921 (* ?x41920 l_0_8_99)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x29154 (* ?x29153 l_0_8_98)))
 (let ((?x29158 (* 2.0 l_0_8_119)))
 (let ((?x29159 (* ?x29158 l_0_8_97)))
 (let ((?x21123 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_122) ?x29159) ?x29154) ?x41921) ?x41923)))
 (let ((?x45663 (+ (+ (+ (+ (- (- (- ?x21123 ?x41925) ?x41927) ?x41929) ?x42949) ?x42951) ?x42953) ?x42955)))
 (= ?x45663 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41587 (* 2.0 l_0_8_235)))
 (let ((?x43005 (* ?x41587 l_0_8_265)))
 (let ((?x41584 (* 2.0 l_0_8_234)))
 (let ((?x43003 (* ?x41584 l_0_8_264)))
 (let ((?x41581 (* 2.0 l_0_8_233)))
 (let ((?x43001 (* ?x41581 l_0_8_263)))
 (let ((?x41578 (* 2.0 l_0_8_232)))
 (let ((?x42999 (* ?x41578 l_0_8_262)))
 (let ((?x39727 (* 2.0 l_0_8_145)))
 (let ((?x41981 (* ?x39727 l_0_8_175)))
 (let ((?x39724 (* 2.0 l_0_8_144)))
 (let ((?x41979 (* ?x39724 l_0_8_174)))
 (let ((?x39721 (* 2.0 l_0_8_143)))
 (let ((?x41977 (* ?x39721 l_0_8_173)))
 (let ((?x39718 (* 2.0 l_0_8_142)))
 (let ((?x41975 (* ?x39718 l_0_8_172)))
 (let ((?x41972 (* 2.0 l_0_8_129)))
 (let ((?x41973 (* ?x41972 l_0_8_99)))
 (let ((?x15370 (* 2.0 l_0_8_128)))
 (let ((?x29174 (* ?x15370 l_0_8_98)))
 (let ((?x29155 (* 2.0 l_0_8_127)))
 (let ((?x29160 (* ?x29155 l_0_8_97)))
 (let ((?x34532 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_130) ?x29160) ?x29174) ?x41973) ?x41975)))
 (let ((?x45667 (+ (+ (+ (+ (- (- (- ?x34532 ?x41977) ?x41979) ?x41981) ?x42999) ?x43001) ?x43003) ?x43005)))
 (= ?x45667 0.0))))))))))))))))))))))))))
(assert
 (let ((?x43077 (* l_0_8_240 l_0_8_240)))
 (let ((?x43075 (* l_0_8_239 l_0_8_239)))
 (let ((?x43073 (* l_0_8_238 l_0_8_238)))
 (let ((?x43071 (* l_0_8_237 l_0_8_237)))
 (let ((?x43069 (* l_0_8_236 l_0_8_236)))
 (let ((?x44228 (* l_0_8_150 l_0_8_150)))
 (let ((?x44226 (* l_0_8_149 l_0_8_149)))
 (let ((?x44224 (* l_0_8_148 l_0_8_148)))
 (let ((?x44222 (* l_0_8_147 l_0_8_147)))
 (let ((?x44220 (* l_0_8_146 l_0_8_146)))
 (let ((?x44218 (* l_0_8_105 l_0_8_105)))
 (let ((?x19890 (* l_0_8_104 l_0_8_104)))
 (let ((?x33455 (* l_0_8_103 l_0_8_103)))
 (let ((?x21278 (+ (+ (+ (* l_0_8_101 l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x33455) ?x19890)))
 (let ((?x45677 (+ (- (- (- (- (- (+ ?x21278 ?x44218) ?x44220) ?x44222) ?x44224) ?x44226) ?x44228) ?x43069)))
 (= (+ (+ (+ (+ ?x45677 ?x43071) ?x43073) ?x43075) ?x43077) 0.0)))))))))))))))))
(assert
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43162 (* ?x43161 l_0_8_245)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43159 (* ?x43158 l_0_8_244)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43156 (* ?x43155 l_0_8_243)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43153 (* ?x43152 l_0_8_242)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43150 (* ?x43149 l_0_8_241)))
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x39809 (* ?x39808 l_0_8_155)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x39806 (* ?x39805 l_0_8_154)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x39803 (* ?x39802 l_0_8_153)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x39800 (* ?x39799 l_0_8_152)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x39797 (* ?x39796 l_0_8_151)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x39788 (* ?x39787 l_0_8_110)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x39785 (* ?x39784 l_0_8_109)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x39782 (* ?x39781 l_0_8_108)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x39779 (* ?x39769 l_0_8_107)))
 (let ((?x21372 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_106) ?x39779) ?x39782) ?x39785) ?x39788)))
 (let ((?x45694 (+ (+ (- (- (- (- (- ?x21372 ?x39797) ?x39800) ?x39803) ?x39806) ?x39809) ?x43150) ?x43153)))
 (= (+ (+ (+ ?x45694 ?x43156) ?x43159) ?x43162) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43235 (* ?x43161 l_0_8_251)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43233 (* ?x43158 l_0_8_250)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43231 (* ?x43155 l_0_8_249)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43229 (* ?x43152 l_0_8_248)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43227 (* ?x43149 l_0_8_247)))
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44268 (* ?x39808 l_0_8_161)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44266 (* ?x39805 l_0_8_160)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44264 (* ?x39802 l_0_8_159)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44262 (* ?x39799 l_0_8_158)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44260 (* ?x39796 l_0_8_157)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44258 (* ?x39787 l_0_8_116)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44256 (* ?x39784 l_0_8_115)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44254 (* ?x39781 l_0_8_114)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44252 (* ?x39769 l_0_8_113)))
 (let ((?x34589 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_112) ?x44252) ?x44254) ?x44256) ?x44258)))
 (let ((?x45715 (+ (+ (- (- (- (- (- ?x34589 ?x44260) ?x44262) ?x44264) ?x44266) ?x44268) ?x43227) ?x43229)))
 (= (+ (+ (+ ?x45715 ?x43231) ?x43233) ?x43235) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43322 (* ?x43161 l_0_8_258)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43320 (* ?x43158 l_0_8_257)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43318 (* ?x43155 l_0_8_256)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43316 (* ?x43152 l_0_8_255)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43314 (* ?x43149 l_0_8_254)))
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44311 (* ?x39808 l_0_8_168)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44309 (* ?x39805 l_0_8_167)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44307 (* ?x39802 l_0_8_166)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44305 (* ?x39799 l_0_8_165)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44303 (* ?x39796 l_0_8_164)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44301 (* ?x39787 l_0_8_123)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44299 (* ?x39784 l_0_8_122)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44297 (* ?x39781 l_0_8_121)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44295 (* ?x39769 l_0_8_120)))
 (let ((?x21496 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_119) ?x44295) ?x44297) ?x44299) ?x44301)))
 (let ((?x45732 (+ (+ (- (- (- (- (- ?x21496 ?x44303) ?x44305) ?x44307) ?x44309) ?x44311) ?x43314) ?x43316)))
 (= (+ (+ (+ ?x45732 ?x43318) ?x43320) ?x43322) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43161 (* 2.0 l_0_8_240)))
 (let ((?x43415 (* ?x43161 l_0_8_266)))
 (let ((?x43158 (* 2.0 l_0_8_239)))
 (let ((?x43413 (* ?x43158 l_0_8_265)))
 (let ((?x43155 (* 2.0 l_0_8_238)))
 (let ((?x43411 (* ?x43155 l_0_8_264)))
 (let ((?x43152 (* 2.0 l_0_8_237)))
 (let ((?x43409 (* ?x43152 l_0_8_263)))
 (let ((?x43149 (* 2.0 l_0_8_236)))
 (let ((?x43407 (* ?x43149 l_0_8_262)))
 (let ((?x39808 (* 2.0 l_0_8_150)))
 (let ((?x44361 (* ?x39808 l_0_8_176)))
 (let ((?x39805 (* 2.0 l_0_8_149)))
 (let ((?x44359 (* ?x39805 l_0_8_175)))
 (let ((?x39802 (* 2.0 l_0_8_148)))
 (let ((?x44357 (* ?x39802 l_0_8_174)))
 (let ((?x39799 (* 2.0 l_0_8_147)))
 (let ((?x44355 (* ?x39799 l_0_8_173)))
 (let ((?x39796 (* 2.0 l_0_8_146)))
 (let ((?x44353 (* ?x39796 l_0_8_172)))
 (let ((?x39787 (* 2.0 l_0_8_105)))
 (let ((?x44351 (* ?x39787 l_0_8_131)))
 (let ((?x39784 (* 2.0 l_0_8_104)))
 (let ((?x44341 (* ?x39784 l_0_8_130)))
 (let ((?x39781 (* 2.0 l_0_8_103)))
 (let ((?x44338 (* ?x39781 l_0_8_129)))
 (let ((?x39769 (* 2.0 l_0_8_102)))
 (let ((?x44334 (* ?x39769 l_0_8_128)))
 (let ((?x34633 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_127) ?x44334) ?x44338) ?x44341) ?x44351)))
 (let ((?x45744 (+ (+ (- (- (- (- (- ?x34633 ?x44353) ?x44355) ?x44357) ?x44359) ?x44361) ?x43407) ?x43409)))
 (= (+ (+ (+ ?x45744 ?x43411) ?x43413) ?x43415) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43480 (* l_0_8_246 l_0_8_246)))
 (let ((?x43478 (* l_0_8_245 l_0_8_245)))
 (let ((?x43476 (* l_0_8_244 l_0_8_244)))
 (let ((?x43474 (* l_0_8_243 l_0_8_243)))
 (let ((?x43472 (* l_0_8_242 l_0_8_242)))
 (let ((?x43470 (* l_0_8_241 l_0_8_241)))
 (let ((?x39862 (* l_0_8_156 l_0_8_156)))
 (let ((?x39860 (* l_0_8_155 l_0_8_155)))
 (let ((?x39858 (* l_0_8_154 l_0_8_154)))
 (let ((?x39856 (* l_0_8_153 l_0_8_153)))
 (let ((?x39854 (* l_0_8_152 l_0_8_152)))
 (let ((?x39852 (* l_0_8_151 l_0_8_151)))
 (let ((?x39850 (* l_0_8_111 l_0_8_111)))
 (let ((?x39848 (* l_0_8_110 l_0_8_110)))
 (let ((?x39846 (* l_0_8_109 l_0_8_109)))
 (let ((?x39844 (* l_0_8_108 l_0_8_108)))
 (let ((?x21645 (+ (+ (+ (* l_0_8_106 l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x39844) ?x39846)))
 (let ((?x45755 (- (- (- (- (- (+ (+ ?x21645 ?x39848) ?x39850) ?x39852) ?x39854) ?x39856) ?x39858) ?x39860)))
 (let ((?x45762 (+ (+ (+ (+ (+ (+ (- ?x45755 ?x39862) ?x43470) ?x43472) ?x43474) ?x43476) ?x43478) ?x43480)))
 (= ?x45762 0.0)))))))))))))))))))))
(assert
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x43522 (* ?x39408 l_0_8_252)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x43520 (* ?x39405 l_0_8_251)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x43518 (* ?x39402 l_0_8_250)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x43516 (* ?x39399 l_0_8_249)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x43514 (* ?x39396 l_0_8_248)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x43512 (* ?x39393 l_0_8_247)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x39919 (* ?x39528 l_0_8_162)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x39917 (* ?x39525 l_0_8_161)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x39915 (* ?x39522 l_0_8_160)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x39913 (* ?x39519 l_0_8_159)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x39911 (* ?x39516 l_0_8_158)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x39909 (* ?x39513 l_0_8_157)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x39907 (* ?x39510 l_0_8_117)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x39905 (* ?x39507 l_0_8_116)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x39903 (* ?x39504 l_0_8_115)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x39901 (* ?x39501 l_0_8_114)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x39899 (* ?x39498 l_0_8_113)))
 (let ((?x34665 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_112) ?x39899) ?x39901) ?x39903) ?x39905)))
 (let ((?x45777 (- (- (- (- (- (- (+ ?x34665 ?x39907) ?x39909) ?x39911) ?x39913) ?x39915) ?x39917) ?x39919)))
 (= (+ (+ (+ (+ (+ (+ ?x45777 ?x43512) ?x43514) ?x43516) ?x43518) ?x43520) ?x43522) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39408 (* 2.0 l_0_8_246)))
 (let ((?x32694 (* ?x39408 l_0_8_267)))
 (let ((?x39405 (* 2.0 l_0_8_245)))
 (let ((?x32690 (* ?x39405 l_0_8_266)))
 (let ((?x39402 (* 2.0 l_0_8_244)))
 (let ((?x32695 (* ?x39402 l_0_8_265)))
 (let ((?x39399 (* 2.0 l_0_8_243)))
 (let ((?x32683 (* ?x39399 l_0_8_264)))
 (let ((?x39396 (* 2.0 l_0_8_242)))
 (let ((?x32671 (* ?x39396 l_0_8_263)))
 (let ((?x39393 (* 2.0 l_0_8_241)))
 (let ((?x32660 (* ?x39393 l_0_8_262)))
 (let ((?x39528 (* 2.0 l_0_8_156)))
 (let ((?x40040 (* ?x39528 l_0_8_177)))
 (let ((?x39525 (* 2.0 l_0_8_155)))
 (let ((?x40038 (* ?x39525 l_0_8_176)))
 (let ((?x39522 (* 2.0 l_0_8_154)))
 (let ((?x40036 (* ?x39522 l_0_8_175)))
 (let ((?x39519 (* 2.0 l_0_8_153)))
 (let ((?x40034 (* ?x39519 l_0_8_174)))
 (let ((?x39516 (* 2.0 l_0_8_152)))
 (let ((?x40032 (* ?x39516 l_0_8_173)))
 (let ((?x39513 (* 2.0 l_0_8_151)))
 (let ((?x40030 (* ?x39513 l_0_8_172)))
 (let ((?x39510 (* 2.0 l_0_8_111)))
 (let ((?x40028 (* ?x39510 l_0_8_132)))
 (let ((?x39507 (* 2.0 l_0_8_110)))
 (let ((?x40026 (* ?x39507 l_0_8_131)))
 (let ((?x39504 (* 2.0 l_0_8_109)))
 (let ((?x40024 (* ?x39504 l_0_8_130)))
 (let ((?x39501 (* 2.0 l_0_8_108)))
 (let ((?x40022 (* ?x39501 l_0_8_129)))
 (let ((?x39498 (* 2.0 l_0_8_107)))
 (let ((?x40020 (* ?x39498 l_0_8_128)))
 (let ((?x45793 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_127) ?x40020) ?x40022) ?x40024) ?x40026)))
 (let ((?x45800 (- (- (- (- (- (- (+ ?x45793 ?x40028) ?x40030) ?x40032) ?x40034) ?x40036) ?x40038) ?x40040)))
 (= (+ (+ (+ (+ (+ (+ ?x45800 ?x32660) ?x32671) ?x32683) ?x32695) ?x32690) ?x32694) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43600 (* l_0_8_253 l_0_8_253)))
 (let ((?x43598 (* l_0_8_252 l_0_8_252)))
 (let ((?x43596 (* l_0_8_251 l_0_8_251)))
 (let ((?x43594 (* l_0_8_250 l_0_8_250)))
 (let ((?x43591 (* l_0_8_249 l_0_8_249)))
 (let ((?x43589 (* l_0_8_248 l_0_8_248)))
 (let ((?x43587 (* l_0_8_247 l_0_8_247)))
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x22009 (+ (+ (+ (* l_0_8_112 l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393) ?x44395)))
 (let ((?x21915 (- (- (- (- (+ (+ (+ ?x22009 ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407) ?x44409)))
 (let ((?x45811 (+ (+ (+ (+ (- (- (- ?x21915 ?x44411) ?x44413) ?x44415) ?x43587) ?x43589) ?x43591) ?x43594)))
 (= (+ (+ (+ ?x45811 ?x43596) ?x43598) ?x43600) 0.0))))))))))))))))))))))))
(assert
 (let ((?x43660 (* 2.0 l_0_8_253)))
 (let ((?x43661 (* ?x43660 l_0_8_260)))
 (let ((?x43657 (* 2.0 l_0_8_252)))
 (let ((?x43658 (* ?x43657 l_0_8_259)))
 (let ((?x43654 (* 2.0 l_0_8_251)))
 (let ((?x43655 (* ?x43654 l_0_8_258)))
 (let ((?x43651 (* 2.0 l_0_8_250)))
 (let ((?x43652 (* ?x43651 l_0_8_257)))
 (let ((?x43647 (* 2.0 l_0_8_249)))
 (let ((?x43648 (* ?x43647 l_0_8_256)))
 (let ((?x43644 (* 2.0 l_0_8_248)))
 (let ((?x43645 (* ?x43644 l_0_8_255)))
 (let ((?x43641 (* 2.0 l_0_8_247)))
 (let ((?x43642 (* ?x43641 l_0_8_254)))
 (let ((?x43996 (* 2.0 l_0_8_163)))
 (let ((?x44470 (* ?x43996 l_0_8_170)))
 (let ((?x43993 (* 2.0 l_0_8_162)))
 (let ((?x44468 (* ?x43993 l_0_8_169)))
 (let ((?x43990 (* 2.0 l_0_8_161)))
 (let ((?x44466 (* ?x43990 l_0_8_168)))
 (let ((?x43987 (* 2.0 l_0_8_160)))
 (let ((?x44464 (* ?x43987 l_0_8_167)))
 (let ((?x43984 (* 2.0 l_0_8_159)))
 (let ((?x44462 (* ?x43984 l_0_8_166)))
 (let ((?x43981 (* 2.0 l_0_8_158)))
 (let ((?x44460 (* ?x43981 l_0_8_165)))
 (let ((?x43978 (* 2.0 l_0_8_157)))
 (let ((?x44458 (* ?x43978 l_0_8_164)))
 (let ((?x43973 (* 2.0 l_0_8_118)))
 (let ((?x44456 (* ?x43973 l_0_8_125)))
 (let ((?x43970 (* 2.0 l_0_8_117)))
 (let ((?x44454 (* ?x43970 l_0_8_124)))
 (let ((?x43967 (* 2.0 l_0_8_116)))
 (let ((?x44452 (* ?x43967 l_0_8_123)))
 (let ((?x43964 (* 2.0 l_0_8_115)))
 (let ((?x44450 (* ?x43964 l_0_8_122)))
 (let ((?x41627 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x41627 l_0_8_121)))
 (let ((?x41624 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x41624 l_0_8_120)))
 (let ((?x34722 (+ (+ (+ (+ (* (* 2.0 l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44450) ?x44452)))
 (let ((?x45831 (- (- (- (- (- (+ (+ ?x34722 ?x44454) ?x44456) ?x44458) ?x44460) ?x44462) ?x44464) ?x44466)))
 (let ((?x45838 (+ (+ (+ (+ (+ (- (- ?x45831 ?x44468) ?x44470) ?x43642) ?x43645) ?x43648) ?x43652) ?x43655)))
 (= (+ (+ ?x45838 ?x43658) ?x43661) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43752 (* l_0_8_261 l_0_8_261)))
 (let ((?x43750 (* l_0_8_260 l_0_8_260)))
 (let ((?x43748 (* l_0_8_259 l_0_8_259)))
 (let ((?x43746 (* l_0_8_258 l_0_8_258)))
 (let ((?x43744 (* l_0_8_257 l_0_8_257)))
 (let ((?x43742 (* l_0_8_256 l_0_8_256)))
 (let ((?x43740 (* l_0_8_255 l_0_8_255)))
 (let ((?x33149 (* l_0_8_254 l_0_8_254)))
 (let ((?x44541 (* l_0_8_171 l_0_8_171)))
 (let ((?x44539 (* l_0_8_170 l_0_8_170)))
 (let ((?x44537 (* l_0_8_169 l_0_8_169)))
 (let ((?x44535 (* l_0_8_168 l_0_8_168)))
 (let ((?x44533 (* l_0_8_167 l_0_8_167)))
 (let ((?x44531 (* l_0_8_166 l_0_8_166)))
 (let ((?x44529 (* l_0_8_165 l_0_8_165)))
 (let ((?x44527 (* l_0_8_164 l_0_8_164)))
 (let ((?x44525 (* l_0_8_126 l_0_8_126)))
 (let ((?x44523 (* l_0_8_125 l_0_8_125)))
 (let ((?x44521 (* l_0_8_124 l_0_8_124)))
 (let ((?x44519 (* l_0_8_123 l_0_8_123)))
 (let ((?x44517 (* l_0_8_122 l_0_8_122)))
 (let ((?x44515 (* l_0_8_121 l_0_8_121)))
 (let ((?x34786 (+ (+ (+ (* l_0_8_119 l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44515) ?x44517)))
 (let ((?x34778 (- (- (- (+ (+ (+ (+ ?x34786 ?x44519) ?x44521) ?x44523) ?x44525) ?x44527) ?x44529) ?x44531)))
 (let ((?x45847 (+ (+ (- (- (- (- (- ?x34778 ?x44533) ?x44535) ?x44537) ?x44539) ?x44541) ?x33149) ?x43740)))
 (= (+ (+ (+ (+ (+ (+ ?x45847 ?x43742) ?x43744) ?x43746) ?x43748) ?x43750) ?x43752) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x43818 (* (* 2.0 l_0_8_261) l_0_8_269)))
 (let ((?x43815 (* (* 2.0 l_0_8_260) l_0_8_268)))
 (let ((?x43812 (* (* 2.0 l_0_8_259) l_0_8_267)))
 (let ((?x43809 (* (* 2.0 l_0_8_258) l_0_8_266)))
 (let ((?x43806 (* (* 2.0 l_0_8_257) l_0_8_265)))
 (let ((?x43803 (* (* 2.0 l_0_8_256) l_0_8_264)))
 (let ((?x43800 (* (* 2.0 l_0_8_255) l_0_8_263)))
 (let ((?x44620 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44617 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44614 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44611 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44608 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44605 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44602 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44599 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44596 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44593 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44590 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44587 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44584 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x41920 (* 2.0 l_0_8_121)))
 (let ((?x44581 (* ?x41920 l_0_8_129)))
 (let ((?x29153 (* 2.0 l_0_8_120)))
 (let ((?x44579 (* ?x29153 l_0_8_128)))
 (let ((?x45867 (+ (+ (+ (+ (* (* 2.0 l_0_8_119) l_0_8_127) ?x44579) ?x44581) ?x44584) ?x44587)))
 (let ((?x45874 (- (- (- (- (+ (+ (+ ?x45867 ?x44590) ?x44593) ?x44596) ?x44599) ?x44602) ?x44605) ?x44608)))
 (let ((?x45881 (+ (- (- (- (- ?x45874 ?x44611) ?x44614) ?x44617) ?x44620) (* (* 2.0 l_0_8_254) l_0_8_262))))
 (let ((?x45888 (+ (+ (+ (+ (+ (+ (+ ?x45881 ?x43800) ?x43803) ?x43806) ?x43809) ?x43812) ?x43815) ?x43818)))
 (= ?x45888 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x43893 (* l_0_8_270 l_0_8_270)))
 (let ((?x43891 (* l_0_8_269 l_0_8_269)))
 (let ((?x43889 (* l_0_8_268 l_0_8_268)))
 (let ((?x43887 (* l_0_8_267 l_0_8_267)))
 (let ((?x43885 (* l_0_8_266 l_0_8_266)))
 (let ((?x43883 (* l_0_8_265 l_0_8_265)))
 (let ((?x43881 (* l_0_8_264 l_0_8_264)))
 (let ((?x43879 (* l_0_8_263 l_0_8_263)))
 (let ((?x43915 (* l_0_8_262 l_0_8_262)))
 (let ((?x44693 (* l_0_8_180 l_0_8_180)))
 (let ((?x44691 (* l_0_8_179 l_0_8_179)))
 (let ((?x44689 (* l_0_8_178 l_0_8_178)))
 (let ((?x44687 (* l_0_8_177 l_0_8_177)))
 (let ((?x44685 (* l_0_8_176 l_0_8_176)))
 (let ((?x44683 (* l_0_8_175 l_0_8_175)))
 (let ((?x44681 (* l_0_8_174 l_0_8_174)))
 (let ((?x44679 (* l_0_8_173 l_0_8_173)))
 (let ((?x44677 (* l_0_8_172 l_0_8_172)))
 (let ((?x44675 (* l_0_8_135 l_0_8_135)))
 (let ((?x44673 (* l_0_8_134 l_0_8_134)))
 (let ((?x44671 (* l_0_8_133 l_0_8_133)))
 (let ((?x44669 (* l_0_8_132 l_0_8_132)))
 (let ((?x44656 (* l_0_8_131 l_0_8_131)))
 (let ((?x44653 (* l_0_8_130 l_0_8_130)))
 (let ((?x44649 (* l_0_8_129 l_0_8_129)))
 (let ((?x22255 (+ (+ (+ (* l_0_8_127 l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44649) ?x44653)))
 (let ((?x45891 (- (- (+ (+ (+ (+ (+ ?x22255 ?x44656) ?x44669) ?x44671) ?x44673) ?x44675) ?x44677) ?x44679)))
 (let ((?x45898 (- (- (- (- (- (- (- ?x45891 ?x44681) ?x44683) ?x44685) ?x44687) ?x44689) ?x44691) ?x44693)))
 (let ((?x45905 (+ (+ (+ (+ (+ (+ (+ ?x45898 ?x43915) ?x43879) ?x43881) ?x43883) ?x43885) ?x43887) ?x43889)))
 (= (+ (+ ?x45905 ?x43891) ?x43893) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x45923 (* l_0_8_406 l_0_8_406)))
 (let ((?x22282 (* l_0_8_361 l_0_8_361)))
 (let ((?x22277 (* l_0_8_316 l_0_8_316)))
 (let ((?x22279 (- (- (* (* (- 1.0) l_0_8_181) l_0_8_181) (* l_0_8_271 l_0_8_271)) ?x22277)))
 (= (- (- ?x22279 ?x22282) ?x45923) 0.0))))))
(assert
 (let ((?x45938 (- (* (* (- 2.0) l_0_8_181) l_0_8_182) (* (* 2.0 l_0_8_271) l_0_8_272))))
 (let ((?x45942 (- (- ?x45938 (* (* 2.0 l_0_8_316) l_0_8_317)) (* (* 2.0 l_0_8_361) l_0_8_362))))
 (= (- ?x45942 (* (* 2.0 l_0_8_406) l_0_8_407)) 0.0))))
(assert
 (let ((?x45967 (- (* (* (- 2.0) l_0_8_181) l_0_8_187) (* (* 2.0 l_0_8_271) l_0_8_277))))
 (let ((?x45971 (- (- ?x45967 (* (* 2.0 l_0_8_316) l_0_8_322)) (* (* 2.0 l_0_8_361) l_0_8_367))))
 (= (- ?x45971 (* (* 2.0 l_0_8_406) l_0_8_412)) 0.0))))
(assert
 (let ((?x45994 (- (* (* (- 2.0) l_0_8_181) l_0_8_196) (* (* 2.0 l_0_8_271) l_0_8_286))))
 (let ((?x45998 (- (- ?x45994 (* (* 2.0 l_0_8_316) l_0_8_331)) (* (* 2.0 l_0_8_361) l_0_8_376))))
 (= (- ?x45998 (* (* 2.0 l_0_8_406) l_0_8_421)) 0.0))))
(assert
 (let ((?x46019 (- (* (* (- 2.0) l_0_8_181) l_0_8_202) (* (* 2.0 l_0_8_271) l_0_8_292))))
 (let ((?x46023 (- (- ?x46019 (* (* 2.0 l_0_8_316) l_0_8_337)) (* (* 2.0 l_0_8_361) l_0_8_382))))
 (= (- ?x46023 (* (* 2.0 l_0_8_406) l_0_8_427)) 0.0))))
(assert
 (let ((?x46044 (- (* (* (- 2.0) l_0_8_181) l_0_8_209) (* (* 2.0 l_0_8_271) l_0_8_299))))
 (let ((?x46048 (- (- ?x46044 (* (* 2.0 l_0_8_316) l_0_8_344)) (* (* 2.0 l_0_8_361) l_0_8_389))))
 (= (- ?x46048 (* (* 2.0 l_0_8_406) l_0_8_434)) 0.0))))
(assert
 (let ((?x46073 (- (* (* (- 2.0) l_0_8_181) l_0_8_217) (* (* 2.0 l_0_8_271) l_0_8_307))))
 (let ((?x46077 (- (- ?x46073 (* (* 2.0 l_0_8_316) l_0_8_352)) (* (* 2.0 l_0_8_361) l_0_8_397))))
 (= (- ?x46077 (* (* 2.0 l_0_8_406) l_0_8_442)) 0.0))))
(assert
 (let ((?x46109 (* l_0_8_408 l_0_8_408)))
 (let ((?x46107 (* l_0_8_407 l_0_8_407)))
 (let ((?x46105 (* l_0_8_363 l_0_8_363)))
 (let ((?x46103 (* l_0_8_362 l_0_8_362)))
 (let ((?x46101 (* l_0_8_318 l_0_8_318)))
 (let ((?x46099 (* l_0_8_317 l_0_8_317)))
 (let ((?x46097 (* l_0_8_273 l_0_8_273)))
 (let ((?x46095 (* l_0_8_272 l_0_8_272)))
 (let ((?x46094 (- (* (* (- 1.0) l_0_8_182) l_0_8_182) (* (* 1.0 l_0_8_183) l_0_8_183))))
 (let ((?x46108 (- (- (- (- (- (- (- ?x46094 ?x46095) ?x46097) ?x46099) ?x46101) ?x46103) ?x46105) ?x46107)))
 (= (- ?x46108 ?x46109) 0.0))))))))))))
(assert
 (let ((?x46134 (- (* (* (- 2.0) l_0_8_182) l_0_8_187) (* (* 2.0 l_0_8_183) l_0_8_188))))
 (let ((?x46138 (- (- ?x46134 (* (* 2.0 l_0_8_272) l_0_8_277)) (* (* 2.0 l_0_8_273) l_0_8_278))))
 (let ((?x46142 (- (- ?x46138 (* (* 2.0 l_0_8_317) l_0_8_322)) (* (* 2.0 l_0_8_318) l_0_8_323))))
 (let ((?x46146 (- (- ?x46142 (* (* 2.0 l_0_8_362) l_0_8_367)) (* (* 2.0 l_0_8_363) l_0_8_368))))
 (let ((?x46150 (- (- ?x46146 (* (* 2.0 l_0_8_407) l_0_8_412)) (* (* 2.0 l_0_8_408) l_0_8_413))))
 (= ?x46150 0.0)))))))
(assert
 (let ((?x46188 (- (* (* (- 2.0) l_0_8_182) l_0_8_196) (* (* 2.0 l_0_8_183) l_0_8_197))))
 (let ((?x46192 (- (- ?x46188 (* (* 2.0 l_0_8_272) l_0_8_286)) (* (* 2.0 l_0_8_273) l_0_8_287))))
 (let ((?x46196 (- (- ?x46192 (* (* 2.0 l_0_8_317) l_0_8_331)) (* (* 2.0 l_0_8_318) l_0_8_332))))
 (let ((?x46200 (- (- ?x46196 (* (* 2.0 l_0_8_362) l_0_8_376)) (* (* 2.0 l_0_8_363) l_0_8_377))))
 (let ((?x46204 (- (- ?x46200 (* (* 2.0 l_0_8_407) l_0_8_421)) (* (* 2.0 l_0_8_408) l_0_8_422))))
 (= ?x46204 0.0)))))))
(assert
 (let ((?x46226 (- (* (* (- 2.0) l_0_8_182) l_0_8_202) (* (* 2.0 l_0_8_183) l_0_8_203))))
 (let ((?x46230 (- (- ?x46226 (* (* 2.0 l_0_8_272) l_0_8_292)) (* (* 2.0 l_0_8_273) l_0_8_293))))
 (let ((?x46234 (- (- ?x46230 (* (* 2.0 l_0_8_317) l_0_8_337)) (* (* 2.0 l_0_8_318) l_0_8_338))))
 (let ((?x46238 (- (- ?x46234 (* (* 2.0 l_0_8_362) l_0_8_382)) (* (* 2.0 l_0_8_363) l_0_8_383))))
 (let ((?x46242 (- (- ?x46238 (* (* 2.0 l_0_8_407) l_0_8_427)) (* (* 2.0 l_0_8_408) l_0_8_428))))
 (= ?x46242 0.0)))))))
(assert
 (let ((?x46271 (- (* (* (- 2.0) l_0_8_182) l_0_8_217) (* (* 2.0 l_0_8_183) l_0_8_218))))
 (let ((?x46275 (- (- ?x46271 (* (* 2.0 l_0_8_272) l_0_8_307)) (* (* 2.0 l_0_8_273) l_0_8_308))))
 (let ((?x46279 (- (- ?x46275 (* (* 2.0 l_0_8_317) l_0_8_352)) (* (* 2.0 l_0_8_318) l_0_8_353))))
 (let ((?x46283 (- (- ?x46279 (* (* 2.0 l_0_8_362) l_0_8_397)) (* (* 2.0 l_0_8_363) l_0_8_398))))
 (let ((?x46287 (- (- ?x46283 (* (* 2.0 l_0_8_407) l_0_8_442)) (* (* 2.0 l_0_8_408) l_0_8_443))))
 (= ?x46287 0.0)))))))
(assert
 (let ((?x46377 (* l_0_8_415 l_0_8_415)))
 (let ((?x46375 (* l_0_8_414 l_0_8_414)))
 (let ((?x46373 (* l_0_8_413 l_0_8_413)))
 (let ((?x46371 (* l_0_8_412 l_0_8_412)))
 (let ((?x46369 (* l_0_8_370 l_0_8_370)))
 (let ((?x46367 (* l_0_8_369 l_0_8_369)))
 (let ((?x46365 (* l_0_8_368 l_0_8_368)))
 (let ((?x46363 (* l_0_8_367 l_0_8_367)))
 (let ((?x46361 (* l_0_8_325 l_0_8_325)))
 (let ((?x46359 (* l_0_8_324 l_0_8_324)))
 (let ((?x46357 (* l_0_8_323 l_0_8_323)))
 (let ((?x46355 (* l_0_8_322 l_0_8_322)))
 (let ((?x46353 (* l_0_8_280 l_0_8_280)))
 (let ((?x46351 (* l_0_8_279 l_0_8_279)))
 (let ((?x46349 (* l_0_8_278 l_0_8_278)))
 (let ((?x46347 (* l_0_8_277 l_0_8_277)))
 (let ((?x46340 (- (* (* (- 1.0) l_0_8_187) l_0_8_187) (* (* 1.0 l_0_8_188) l_0_8_188))))
 (let ((?x46346 (- (- ?x46340 (* (* 1.0 l_0_8_189) l_0_8_189)) (* (* 1.0 l_0_8_190) l_0_8_190))))
 (let ((?x46360 (- (- (- (- (- (- (- ?x46346 ?x46347) ?x46349) ?x46351) ?x46353) ?x46355) ?x46357) ?x46359)))
 (let ((?x46374 (- (- (- (- (- (- (- ?x46360 ?x46361) ?x46363) ?x46365) ?x46367) ?x46369) ?x46371) ?x46373)))
 (= (- (- ?x46374 ?x46375) ?x46377) 0.0))))))))))))))))))))))
(assert
 (let ((?x46440 (- (* (* (- 2.0) l_0_8_187) l_0_8_196) (* (* 2.0 l_0_8_188) l_0_8_197))))
 (let ((?x46444 (- (- ?x46440 (* (* 2.0 l_0_8_189) l_0_8_198)) (* (* 2.0 l_0_8_190) l_0_8_199))))
 (let ((?x46448 (- (- ?x46444 (* (* 2.0 l_0_8_277) l_0_8_286)) (* (* 2.0 l_0_8_278) l_0_8_287))))
 (let ((?x46452 (- (- ?x46448 (* (* 2.0 l_0_8_279) l_0_8_288)) (* (* 2.0 l_0_8_280) l_0_8_289))))
 (let ((?x46456 (- (- ?x46452 (* (* 2.0 l_0_8_322) l_0_8_331)) (* (* 2.0 l_0_8_323) l_0_8_332))))
 (let ((?x46460 (- (- ?x46456 (* (* 2.0 l_0_8_324) l_0_8_333)) (* (* 2.0 l_0_8_325) l_0_8_334))))
 (let ((?x46464 (- (- ?x46460 (* (* 2.0 l_0_8_367) l_0_8_376)) (* (* 2.0 l_0_8_368) l_0_8_377))))
 (let ((?x46468 (- (- ?x46464 (* (* 2.0 l_0_8_369) l_0_8_378)) (* (* 2.0 l_0_8_370) l_0_8_379))))
 (let ((?x46472 (- (- ?x46468 (* (* 2.0 l_0_8_412) l_0_8_421)) (* (* 2.0 l_0_8_413) l_0_8_422))))
 (let ((?x46476 (- (- ?x46472 (* (* 2.0 l_0_8_414) l_0_8_423)) (* (* 2.0 l_0_8_415) l_0_8_424))))
 (= ?x46476 0.0))))))))))))
(assert
 (let ((?x46596 (- (* (* (- 2.0) l_0_8_187) l_0_8_209) (* (* 2.0 l_0_8_188) l_0_8_210))))
 (let ((?x46600 (- (- ?x46596 (* (* 2.0 l_0_8_189) l_0_8_211)) (* (* 2.0 l_0_8_190) l_0_8_212))))
 (let ((?x46604 (- (- ?x46600 (* (* 2.0 l_0_8_277) l_0_8_299)) (* (* 2.0 l_0_8_278) l_0_8_300))))
 (let ((?x46608 (- (- ?x46604 (* (* 2.0 l_0_8_279) l_0_8_301)) (* (* 2.0 l_0_8_280) l_0_8_302))))
 (let ((?x46612 (- (- ?x46608 (* (* 2.0 l_0_8_322) l_0_8_344)) (* (* 2.0 l_0_8_323) l_0_8_345))))
 (let ((?x46616 (- (- ?x46612 (* (* 2.0 l_0_8_324) l_0_8_346)) (* (* 2.0 l_0_8_325) l_0_8_347))))
 (let ((?x46620 (- (- ?x46616 (* (* 2.0 l_0_8_367) l_0_8_389)) (* (* 2.0 l_0_8_368) l_0_8_390))))
 (let ((?x46624 (- (- ?x46620 (* (* 2.0 l_0_8_369) l_0_8_391)) (* (* 2.0 l_0_8_370) l_0_8_392))))
 (let ((?x46628 (- (- ?x46624 (* (* 2.0 l_0_8_412) l_0_8_434)) (* (* 2.0 l_0_8_413) l_0_8_435))))
 (let ((?x46632 (- (- ?x46628 (* (* 2.0 l_0_8_414) l_0_8_436)) (* (* 2.0 l_0_8_415) l_0_8_437))))
 (= ?x46632 0.0))))))))))))
(assert
 (let ((?x46722 (- (* (* (- 2.0) l_0_8_187) l_0_8_217) (* (* 2.0 l_0_8_188) l_0_8_218))))
 (let ((?x46726 (- (- ?x46722 (* (* 2.0 l_0_8_189) l_0_8_219)) (* (* 2.0 l_0_8_190) l_0_8_220))))
 (let ((?x46730 (- (- ?x46726 (* (* 2.0 l_0_8_277) l_0_8_307)) (* (* 2.0 l_0_8_278) l_0_8_308))))
 (let ((?x46734 (- (- ?x46730 (* (* 2.0 l_0_8_279) l_0_8_309)) (* (* 2.0 l_0_8_280) l_0_8_310))))
 (let ((?x46738 (- (- ?x46734 (* (* 2.0 l_0_8_322) l_0_8_352)) (* (* 2.0 l_0_8_323) l_0_8_353))))
 (let ((?x46742 (- (- ?x46738 (* (* 2.0 l_0_8_324) l_0_8_354)) (* (* 2.0 l_0_8_325) l_0_8_355))))
 (let ((?x46746 (- (- ?x46742 (* (* 2.0 l_0_8_367) l_0_8_397)) (* (* 2.0 l_0_8_368) l_0_8_398))))
 (let ((?x46750 (- (- ?x46746 (* (* 2.0 l_0_8_369) l_0_8_399)) (* (* 2.0 l_0_8_370) l_0_8_400))))
 (let ((?x46754 (- (- ?x46750 (* (* 2.0 l_0_8_412) l_0_8_442)) (* (* 2.0 l_0_8_413) l_0_8_443))))
 (let ((?x46758 (- (- ?x46754 (* (* 2.0 l_0_8_414) l_0_8_444)) (* (* 2.0 l_0_8_415) l_0_8_445))))
 (= ?x46758 0.0))))))))))))
(assert
 (let ((?x46877 (* l_0_8_426 l_0_8_426)))
 (let ((?x46875 (* l_0_8_425 l_0_8_425)))
 (let ((?x46873 (* l_0_8_424 l_0_8_424)))
 (let ((?x46871 (* l_0_8_423 l_0_8_423)))
 (let ((?x46869 (* l_0_8_422 l_0_8_422)))
 (let ((?x46867 (* l_0_8_421 l_0_8_421)))
 (let ((?x46865 (* l_0_8_381 l_0_8_381)))
 (let ((?x46863 (* l_0_8_380 l_0_8_380)))
 (let ((?x46861 (* l_0_8_379 l_0_8_379)))
 (let ((?x46859 (* l_0_8_378 l_0_8_378)))
 (let ((?x46857 (* l_0_8_377 l_0_8_377)))
 (let ((?x46855 (* l_0_8_376 l_0_8_376)))
 (let ((?x46853 (* l_0_8_336 l_0_8_336)))
 (let ((?x46851 (* l_0_8_335 l_0_8_335)))
 (let ((?x46849 (* l_0_8_334 l_0_8_334)))
 (let ((?x46847 (* l_0_8_333 l_0_8_333)))
 (let ((?x46845 (* l_0_8_332 l_0_8_332)))
 (let ((?x46843 (* l_0_8_331 l_0_8_331)))
 (let ((?x46841 (* l_0_8_291 l_0_8_291)))
 (let ((?x46839 (* l_0_8_290 l_0_8_290)))
 (let ((?x46837 (* l_0_8_289 l_0_8_289)))
 (let ((?x46835 (* l_0_8_288 l_0_8_288)))
 (let ((?x46833 (* l_0_8_287 l_0_8_287)))
 (let ((?x46831 (* l_0_8_286 l_0_8_286)))
 (let ((?x46818 (- (* (* (- 1.0) l_0_8_196) l_0_8_196) (* (* 1.0 l_0_8_197) l_0_8_197))))
 (let ((?x46824 (- (- ?x46818 (* (* 1.0 l_0_8_198) l_0_8_198)) (* (* 1.0 l_0_8_199) l_0_8_199))))
 (let ((?x46830 (- (- ?x46824 (* (* 1.0 l_0_8_200) l_0_8_200)) (* (* 1.0 l_0_8_201) l_0_8_201))))
 (let ((?x46844 (- (- (- (- (- (- (- ?x46830 ?x46831) ?x46833) ?x46835) ?x46837) ?x46839) ?x46841) ?x46843)))
 (let ((?x46858 (- (- (- (- (- (- (- ?x46844 ?x46845) ?x46847) ?x46849) ?x46851) ?x46853) ?x46855) ?x46857)))
 (let ((?x46872 (- (- (- (- (- (- (- ?x46858 ?x46859) ?x46861) ?x46863) ?x46865) ?x46867) ?x46869) ?x46871)))
 (= (- (- (- ?x46872 ?x46873) ?x46875) ?x46877) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x36265 (- (* (* (- 2.0) l_0_8_196) l_0_8_202) (* (* 2.0 l_0_8_197) l_0_8_203))))
 (let ((?x46917 (- (- ?x36265 (* (* 2.0 l_0_8_198) l_0_8_204)) (* (* 2.0 l_0_8_199) l_0_8_205))))
 (let ((?x46921 (- (- ?x46917 (* (* 2.0 l_0_8_200) l_0_8_206)) (* (* 2.0 l_0_8_201) l_0_8_207))))
 (let ((?x46925 (- (- ?x46921 (* (* 2.0 l_0_8_286) l_0_8_292)) (* (* 2.0 l_0_8_287) l_0_8_293))))
 (let ((?x46929 (- (- ?x46925 (* (* 2.0 l_0_8_288) l_0_8_294)) (* (* 2.0 l_0_8_289) l_0_8_295))))
 (let ((?x46933 (- (- ?x46929 (* (* 2.0 l_0_8_290) l_0_8_296)) (* (* 2.0 l_0_8_291) l_0_8_297))))
 (let ((?x46937 (- (- ?x46933 (* (* 2.0 l_0_8_331) l_0_8_337)) (* (* 2.0 l_0_8_332) l_0_8_338))))
 (let ((?x46941 (- (- ?x46937 (* (* 2.0 l_0_8_333) l_0_8_339)) (* (* 2.0 l_0_8_334) l_0_8_340))))
 (let ((?x46945 (- (- ?x46941 (* (* 2.0 l_0_8_335) l_0_8_341)) (* (* 2.0 l_0_8_336) l_0_8_342))))
 (let ((?x46949 (- (- ?x46945 (* (* 2.0 l_0_8_376) l_0_8_382)) (* (* 2.0 l_0_8_377) l_0_8_383))))
 (let ((?x46953 (- (- ?x46949 (* (* 2.0 l_0_8_378) l_0_8_384)) (* (* 2.0 l_0_8_379) l_0_8_385))))
 (let ((?x46957 (- (- ?x46953 (* (* 2.0 l_0_8_380) l_0_8_386)) (* (* 2.0 l_0_8_381) l_0_8_387))))
 (let ((?x46961 (- (- ?x46957 (* (* 2.0 l_0_8_421) l_0_8_427)) (* (* 2.0 l_0_8_422) l_0_8_428))))
 (let ((?x46965 (- (- ?x46961 (* (* 2.0 l_0_8_423) l_0_8_429)) (* (* 2.0 l_0_8_424) l_0_8_430))))
 (let ((?x46969 (- (- ?x46965 (* (* 2.0 l_0_8_425) l_0_8_431)) (* (* 2.0 l_0_8_426) l_0_8_432))))
 (= ?x46969 0.0)))))))))))))))))
(assert
 (let ((?x6049 (- (* (* (- 2.0) l_0_8_196) l_0_8_217) (* (* 2.0 l_0_8_197) l_0_8_218))))
 (let ((?x47022 (- (- ?x6049 (* (* 2.0 l_0_8_198) l_0_8_219)) (* (* 2.0 l_0_8_199) l_0_8_220))))
 (let ((?x47026 (- (- ?x47022 (* (* 2.0 l_0_8_200) l_0_8_221)) (* (* 2.0 l_0_8_201) l_0_8_222))))
 (let ((?x47030 (- (- ?x47026 (* (* 2.0 l_0_8_286) l_0_8_307)) (* (* 2.0 l_0_8_287) l_0_8_308))))
 (let ((?x47034 (- (- ?x47030 (* (* 2.0 l_0_8_288) l_0_8_309)) (* (* 2.0 l_0_8_289) l_0_8_310))))
 (let ((?x47038 (- (- ?x47034 (* (* 2.0 l_0_8_290) l_0_8_311)) (* (* 2.0 l_0_8_291) l_0_8_312))))
 (let ((?x47042 (- (- ?x47038 (* (* 2.0 l_0_8_331) l_0_8_352)) (* (* 2.0 l_0_8_332) l_0_8_353))))
 (let ((?x47046 (- (- ?x47042 (* (* 2.0 l_0_8_333) l_0_8_354)) (* (* 2.0 l_0_8_334) l_0_8_355))))
 (let ((?x47050 (- (- ?x47046 (* (* 2.0 l_0_8_335) l_0_8_356)) (* (* 2.0 l_0_8_336) l_0_8_357))))
 (let ((?x47054 (- (- ?x47050 (* (* 2.0 l_0_8_376) l_0_8_397)) (* (* 2.0 l_0_8_377) l_0_8_398))))
 (let ((?x47058 (- (- ?x47054 (* (* 2.0 l_0_8_378) l_0_8_399)) (* (* 2.0 l_0_8_379) l_0_8_400))))
 (let ((?x47062 (- (- ?x47058 (* (* 2.0 l_0_8_380) l_0_8_401)) (* (* 2.0 l_0_8_381) l_0_8_402))))
 (let ((?x47066 (- (- ?x47062 (* (* 2.0 l_0_8_421) l_0_8_442)) (* (* 2.0 l_0_8_422) l_0_8_443))))
 (let ((?x47070 (- (- ?x47066 (* (* 2.0 l_0_8_423) l_0_8_444)) (* (* 2.0 l_0_8_424) l_0_8_445))))
 (let ((?x47074 (- (- ?x47070 (* (* 2.0 l_0_8_425) l_0_8_446)) (* (* 2.0 l_0_8_426) l_0_8_447))))
 (= ?x47074 0.0)))))))))))))))))
(assert
 (let ((?x47246 (* l_0_8_433 l_0_8_433)))
 (let ((?x47244 (* l_0_8_432 l_0_8_432)))
 (let ((?x47242 (* l_0_8_431 l_0_8_431)))
 (let ((?x47240 (* l_0_8_430 l_0_8_430)))
 (let ((?x47238 (* l_0_8_429 l_0_8_429)))
 (let ((?x47236 (* l_0_8_428 l_0_8_428)))
 (let ((?x47234 (* l_0_8_427 l_0_8_427)))
 (let ((?x47232 (* l_0_8_388 l_0_8_388)))
 (let ((?x47230 (* l_0_8_387 l_0_8_387)))
 (let ((?x47228 (* l_0_8_386 l_0_8_386)))
 (let ((?x47226 (* l_0_8_385 l_0_8_385)))
 (let ((?x47224 (* l_0_8_384 l_0_8_384)))
 (let ((?x47222 (* l_0_8_383 l_0_8_383)))
 (let ((?x47220 (* l_0_8_382 l_0_8_382)))
 (let ((?x47218 (* l_0_8_343 l_0_8_343)))
 (let ((?x47216 (* l_0_8_342 l_0_8_342)))
 (let ((?x47214 (* l_0_8_341 l_0_8_341)))
 (let ((?x47212 (* l_0_8_340 l_0_8_340)))
 (let ((?x47210 (* l_0_8_339 l_0_8_339)))
 (let ((?x47208 (* l_0_8_338 l_0_8_338)))
 (let ((?x47206 (* l_0_8_337 l_0_8_337)))
 (let ((?x47204 (* l_0_8_298 l_0_8_298)))
 (let ((?x47202 (* l_0_8_297 l_0_8_297)))
 (let ((?x47200 (* l_0_8_296 l_0_8_296)))
 (let ((?x47198 (* l_0_8_295 l_0_8_295)))
 (let ((?x47196 (* l_0_8_294 l_0_8_294)))
 (let ((?x47194 (* l_0_8_293 l_0_8_293)))
 (let ((?x47192 (* l_0_8_292 l_0_8_292)))
 (let ((?x47176 (- (* (* (- 1.0) l_0_8_202) l_0_8_202) (* (* 1.0 l_0_8_203) l_0_8_203))))
 (let ((?x47182 (- (- ?x47176 (* (* 1.0 l_0_8_204) l_0_8_204)) (* (* 1.0 l_0_8_205) l_0_8_205))))
 (let ((?x47188 (- (- ?x47182 (* (* 1.0 l_0_8_206) l_0_8_206)) (* (* 1.0 l_0_8_207) l_0_8_207))))
 (let ((?x47197 (- (- (- (- ?x47188 (* (* 1.0 l_0_8_208) l_0_8_208)) ?x47192) ?x47194) ?x47196)))
 (let ((?x47211 (- (- (- (- (- (- (- ?x47197 ?x47198) ?x47200) ?x47202) ?x47204) ?x47206) ?x47208) ?x47210)))
 (let ((?x47225 (- (- (- (- (- (- (- ?x47211 ?x47212) ?x47214) ?x47216) ?x47218) ?x47220) ?x47222) ?x47224)))
 (let ((?x47239 (- (- (- (- (- (- (- ?x47225 ?x47226) ?x47228) ?x47230) ?x47232) ?x47234) ?x47236) ?x47238)))
 (= (- (- (- (- ?x47239 ?x47240) ?x47242) ?x47244) ?x47246) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36669 (- (* (* (- 2.0) l_0_8_202) l_0_8_209) (* (* 2.0 l_0_8_203) l_0_8_210))))
 (let ((?x47300 (- (- ?x36669 (* (* 2.0 l_0_8_204) l_0_8_211)) (* (* 2.0 l_0_8_205) l_0_8_212))))
 (let ((?x47304 (- (- ?x47300 (* (* 2.0 l_0_8_206) l_0_8_213)) (* (* 2.0 l_0_8_207) l_0_8_214))))
 (let ((?x47308 (- (- ?x47304 (* (* 2.0 l_0_8_208) l_0_8_215)) (* (* 2.0 l_0_8_292) l_0_8_299))))
 (let ((?x47312 (- (- ?x47308 (* (* 2.0 l_0_8_293) l_0_8_300)) (* (* 2.0 l_0_8_294) l_0_8_301))))
 (let ((?x47316 (- (- ?x47312 (* (* 2.0 l_0_8_295) l_0_8_302)) (* (* 2.0 l_0_8_296) l_0_8_303))))
 (let ((?x47320 (- (- ?x47316 (* (* 2.0 l_0_8_297) l_0_8_304)) (* (* 2.0 l_0_8_298) l_0_8_305))))
 (let ((?x47324 (- (- ?x47320 (* (* 2.0 l_0_8_337) l_0_8_344)) (* (* 2.0 l_0_8_338) l_0_8_345))))
 (let ((?x47328 (- (- ?x47324 (* (* 2.0 l_0_8_339) l_0_8_346)) (* (* 2.0 l_0_8_340) l_0_8_347))))
 (let ((?x47332 (- (- ?x47328 (* (* 2.0 l_0_8_341) l_0_8_348)) (* (* 2.0 l_0_8_342) l_0_8_349))))
 (let ((?x47336 (- (- ?x47332 (* (* 2.0 l_0_8_343) l_0_8_350)) (* (* 2.0 l_0_8_382) l_0_8_389))))
 (let ((?x47340 (- (- ?x47336 (* (* 2.0 l_0_8_383) l_0_8_390)) (* (* 2.0 l_0_8_384) l_0_8_391))))
 (let ((?x47344 (- (- ?x47340 (* (* 2.0 l_0_8_385) l_0_8_392)) (* (* 2.0 l_0_8_386) l_0_8_393))))
 (let ((?x47348 (- (- ?x47344 (* (* 2.0 l_0_8_387) l_0_8_394)) (* (* 2.0 l_0_8_388) l_0_8_395))))
 (let ((?x47352 (- (- ?x47348 (* (* 2.0 l_0_8_427) l_0_8_434)) (* (* 2.0 l_0_8_428) l_0_8_435))))
 (let ((?x47356 (- (- ?x47352 (* (* 2.0 l_0_8_429) l_0_8_436)) (* (* 2.0 l_0_8_430) l_0_8_437))))
 (let ((?x47360 (- (- ?x47356 (* (* 2.0 l_0_8_431) l_0_8_438)) (* (* 2.0 l_0_8_432) l_0_8_439))))
 (= (- ?x47360 (* (* 2.0 l_0_8_433) l_0_8_440)) 0.0)))))))))))))))))))
(assert
 (let ((?x47514 (* l_0_8_441 l_0_8_441)))
 (let ((?x47512 (* l_0_8_440 l_0_8_440)))
 (let ((?x47510 (* l_0_8_439 l_0_8_439)))
 (let ((?x47508 (* l_0_8_438 l_0_8_438)))
 (let ((?x47506 (* l_0_8_437 l_0_8_437)))
 (let ((?x47504 (* l_0_8_436 l_0_8_436)))
 (let ((?x47502 (* l_0_8_435 l_0_8_435)))
 (let ((?x47500 (* l_0_8_434 l_0_8_434)))
 (let ((?x47498 (* l_0_8_396 l_0_8_396)))
 (let ((?x47496 (* l_0_8_395 l_0_8_395)))
 (let ((?x47494 (* l_0_8_394 l_0_8_394)))
 (let ((?x47492 (* l_0_8_393 l_0_8_393)))
 (let ((?x47490 (* l_0_8_392 l_0_8_392)))
 (let ((?x47488 (* l_0_8_391 l_0_8_391)))
 (let ((?x47486 (* l_0_8_390 l_0_8_390)))
 (let ((?x47484 (* l_0_8_389 l_0_8_389)))
 (let ((?x47482 (* l_0_8_351 l_0_8_351)))
 (let ((?x47480 (* l_0_8_350 l_0_8_350)))
 (let ((?x47478 (* l_0_8_349 l_0_8_349)))
 (let ((?x47476 (* l_0_8_348 l_0_8_348)))
 (let ((?x47474 (* l_0_8_347 l_0_8_347)))
 (let ((?x47472 (* l_0_8_346 l_0_8_346)))
 (let ((?x47470 (* l_0_8_345 l_0_8_345)))
 (let ((?x47468 (* l_0_8_344 l_0_8_344)))
 (let ((?x47466 (* l_0_8_306 l_0_8_306)))
 (let ((?x47464 (* l_0_8_305 l_0_8_305)))
 (let ((?x47462 (* l_0_8_304 l_0_8_304)))
 (let ((?x47460 (* l_0_8_303 l_0_8_303)))
 (let ((?x47458 (* l_0_8_302 l_0_8_302)))
 (let ((?x47456 (* l_0_8_301 l_0_8_301)))
 (let ((?x47454 (* l_0_8_300 l_0_8_300)))
 (let ((?x47452 (* l_0_8_299 l_0_8_299)))
 (let ((?x47433 (- (* (* (- 1.0) l_0_8_209) l_0_8_209) (* (* 1.0 l_0_8_210) l_0_8_210))))
 (let ((?x47439 (- (- ?x47433 (* (* 1.0 l_0_8_211) l_0_8_211)) (* (* 1.0 l_0_8_212) l_0_8_212))))
 (let ((?x47445 (- (- ?x47439 (* (* 1.0 l_0_8_213) l_0_8_213)) (* (* 1.0 l_0_8_214) l_0_8_214))))
 (let ((?x47451 (- (- ?x47445 (* (* 1.0 l_0_8_215) l_0_8_215)) (* (* 1.0 l_0_8_216) l_0_8_216))))
 (let ((?x47465 (- (- (- (- (- (- (- ?x47451 ?x47452) ?x47454) ?x47456) ?x47458) ?x47460) ?x47462) ?x47464)))
 (let ((?x47479 (- (- (- (- (- (- (- ?x47465 ?x47466) ?x47468) ?x47470) ?x47472) ?x47474) ?x47476) ?x47478)))
 (let ((?x47493 (- (- (- (- (- (- (- ?x47479 ?x47480) ?x47482) ?x47484) ?x47486) ?x47488) ?x47490) ?x47492)))
 (let ((?x47507 (- (- (- (- (- (- (- ?x47493 ?x47494) ?x47496) ?x47498) ?x47500) ?x47502) ?x47504) ?x47506)))
 (= (- (- (- (- ?x47507 ?x47508) ?x47510) ?x47512) ?x47514) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47601 (- (* (* (- 2.0) l_0_8_209) l_0_8_217) (* (* 2.0 l_0_8_210) l_0_8_218))))
 (let ((?x47607 (- (- ?x47601 (* (* 2.0 l_0_8_211) l_0_8_219)) (* (* 2.0 l_0_8_212) l_0_8_220))))
 (let ((?x47613 (- (- ?x47607 (* (* 2.0 l_0_8_213) l_0_8_221)) (* (* 2.0 l_0_8_214) l_0_8_222))))
 (let ((?x47619 (- (- ?x47613 (* (* 2.0 l_0_8_215) l_0_8_223)) (* (* 2.0 l_0_8_216) l_0_8_224))))
 (let ((?x47625 (- (- ?x47619 (* (* 2.0 l_0_8_299) l_0_8_307)) (* (* 2.0 l_0_8_300) l_0_8_308))))
 (let ((?x47631 (- (- ?x47625 (* (* 2.0 l_0_8_301) l_0_8_309)) (* (* 2.0 l_0_8_302) l_0_8_310))))
 (let ((?x47637 (- (- ?x47631 (* (* 2.0 l_0_8_303) l_0_8_311)) (* (* 2.0 l_0_8_304) l_0_8_312))))
 (let ((?x47643 (- (- ?x47637 (* (* 2.0 l_0_8_305) l_0_8_313)) (* (* 2.0 l_0_8_306) l_0_8_314))))
 (let ((?x47649 (- (- ?x47643 (* (* 2.0 l_0_8_344) l_0_8_352)) (* (* 2.0 l_0_8_345) l_0_8_353))))
 (let ((?x47655 (- (- ?x47649 (* (* 2.0 l_0_8_346) l_0_8_354)) (* (* 2.0 l_0_8_347) l_0_8_355))))
 (let ((?x47661 (- (- ?x47655 (* (* 2.0 l_0_8_348) l_0_8_356)) (* (* 2.0 l_0_8_349) l_0_8_357))))
 (let ((?x47667 (- (- ?x47661 (* (* 2.0 l_0_8_350) l_0_8_358)) (* (* 2.0 l_0_8_351) l_0_8_359))))
 (let ((?x47673 (- (- ?x47667 (* (* 2.0 l_0_8_389) l_0_8_397)) (* (* 2.0 l_0_8_390) l_0_8_398))))
 (let ((?x47679 (- (- ?x47673 (* (* 2.0 l_0_8_391) l_0_8_399)) (* (* 2.0 l_0_8_392) l_0_8_400))))
 (let ((?x47685 (- (- ?x47679 (* (* 2.0 l_0_8_393) l_0_8_401)) (* (* 2.0 l_0_8_394) l_0_8_402))))
 (let ((?x47691 (- (- ?x47685 (* (* 2.0 l_0_8_395) l_0_8_403)) (* (* 2.0 l_0_8_396) l_0_8_404))))
 (let ((?x47697 (- (- ?x47691 (* (* 2.0 l_0_8_434) l_0_8_442)) (* (* 2.0 l_0_8_435) l_0_8_443))))
 (let ((?x47703 (- (- ?x47697 (* (* 2.0 l_0_8_436) l_0_8_444)) (* (* 2.0 l_0_8_437) l_0_8_445))))
 (let ((?x47709 (- (- ?x47703 (* (* 2.0 l_0_8_438) l_0_8_446)) (* (* 2.0 l_0_8_439) l_0_8_447))))
 (let ((?x47715 (- (- ?x47709 (* (* 2.0 l_0_8_440) l_0_8_448)) (* (* 2.0 l_0_8_441) l_0_8_449))))
 (= ?x47715 0.0))))))))))))))))))))))
(assert
 (let ((?x47961 (* l_0_8_450 l_0_8_450)))
 (let ((?x47959 (* l_0_8_449 l_0_8_449)))
 (let ((?x47957 (* l_0_8_448 l_0_8_448)))
 (let ((?x47955 (* l_0_8_447 l_0_8_447)))
 (let ((?x47953 (* l_0_8_446 l_0_8_446)))
 (let ((?x47951 (* l_0_8_445 l_0_8_445)))
 (let ((?x47949 (* l_0_8_444 l_0_8_444)))
 (let ((?x47947 (* l_0_8_443 l_0_8_443)))
 (let ((?x47945 (* l_0_8_442 l_0_8_442)))
 (let ((?x47943 (* l_0_8_405 l_0_8_405)))
 (let ((?x47941 (* l_0_8_404 l_0_8_404)))
 (let ((?x47939 (* l_0_8_403 l_0_8_403)))
 (let ((?x47937 (* l_0_8_402 l_0_8_402)))
 (let ((?x47935 (* l_0_8_401 l_0_8_401)))
 (let ((?x47933 (* l_0_8_400 l_0_8_400)))
 (let ((?x47931 (* l_0_8_399 l_0_8_399)))
 (let ((?x47929 (* l_0_8_398 l_0_8_398)))
 (let ((?x47927 (* l_0_8_397 l_0_8_397)))
 (let ((?x47925 (* l_0_8_360 l_0_8_360)))
 (let ((?x47923 (* l_0_8_359 l_0_8_359)))
 (let ((?x47921 (* l_0_8_358 l_0_8_358)))
 (let ((?x47919 (* l_0_8_357 l_0_8_357)))
 (let ((?x47917 (* l_0_8_356 l_0_8_356)))
 (let ((?x47915 (* l_0_8_355 l_0_8_355)))
 (let ((?x47913 (* l_0_8_354 l_0_8_354)))
 (let ((?x47911 (* l_0_8_353 l_0_8_353)))
 (let ((?x47909 (* l_0_8_352 l_0_8_352)))
 (let ((?x47907 (* l_0_8_315 l_0_8_315)))
 (let ((?x47905 (* l_0_8_314 l_0_8_314)))
 (let ((?x47903 (* l_0_8_313 l_0_8_313)))
 (let ((?x47901 (* l_0_8_312 l_0_8_312)))
 (let ((?x47899 (* l_0_8_311 l_0_8_311)))
 (let ((?x47897 (* l_0_8_310 l_0_8_310)))
 (let ((?x47895 (* l_0_8_309 l_0_8_309)))
 (let ((?x47893 (* l_0_8_308 l_0_8_308)))
 (let ((?x47891 (* l_0_8_307 l_0_8_307)))
 (let ((?x47869 (- (* (* (- 1.0) l_0_8_217) l_0_8_217) (* (* 1.0 l_0_8_218) l_0_8_218))))
 (let ((?x47875 (- (- ?x47869 (* (* 1.0 l_0_8_219) l_0_8_219)) (* (* 1.0 l_0_8_220) l_0_8_220))))
 (let ((?x47881 (- (- ?x47875 (* (* 1.0 l_0_8_221) l_0_8_221)) (* (* 1.0 l_0_8_222) l_0_8_222))))
 (let ((?x47887 (- (- ?x47881 (* (* 1.0 l_0_8_223) l_0_8_223)) (* (* 1.0 l_0_8_224) l_0_8_224))))
 (let ((?x47896 (- (- (- (- ?x47887 (* (* 1.0 l_0_8_225) l_0_8_225)) ?x47891) ?x47893) ?x47895)))
 (let ((?x47910 (- (- (- (- (- (- (- ?x47896 ?x47897) ?x47899) ?x47901) ?x47903) ?x47905) ?x47907) ?x47909)))
 (let ((?x47924 (- (- (- (- (- (- (- ?x47910 ?x47911) ?x47913) ?x47915) ?x47917) ?x47919) ?x47921) ?x47923)))
 (let ((?x47938 (- (- (- (- (- (- (- ?x47924 ?x47925) ?x47927) ?x47929) ?x47931) ?x47933) ?x47935) ?x47937)))
 (let ((?x47952 (- (- (- (- (- (- (- ?x47938 ?x47939) ?x47941) ?x47943) ?x47945) ?x47947) ?x47949) ?x47951)))
 (= (- (- (- (- (- ?x47952 ?x47953) ?x47955) ?x47957) ?x47959) ?x47961) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_8_1 0.0))
(assert
 (>= l_0_8_3 0.0))
(assert
 (>= l_0_8_6 0.0))
(assert
 (>= l_0_8_10 0.0))
(assert
 (>= l_0_8_15 0.0))
(assert
 (>= l_0_8_21 0.0))
(assert
 (>= l_0_8_28 0.0))
(assert
 (>= l_0_8_36 0.0))
(assert
 (>= l_0_8_45 0.0))
(assert
 (>= l_0_8_46 0.0))
(assert
 (>= l_0_8_48 0.0))
(assert
 (>= l_0_8_51 0.0))
(assert
 (>= l_0_8_55 0.0))
(assert
 (>= l_0_8_60 0.0))
(assert
 (>= l_0_8_66 0.0))
(assert
 (>= l_0_8_73 0.0))
(assert
 (>= l_0_8_81 0.0))
(assert
 (>= l_0_8_90 0.0))
(assert
 (>= l_0_8_91 0.0))
(assert
 (>= l_0_8_93 0.0))
(assert
 (>= l_0_8_96 0.0))
(assert
 (>= l_0_8_100 0.0))
(assert
 (>= l_0_8_105 0.0))
(assert
 (>= l_0_8_111 0.0))
(assert
 (>= l_0_8_118 0.0))
(assert
 (>= l_0_8_126 0.0))
(assert
 (>= l_0_8_135 0.0))
(assert
 (>= l_0_8_136 0.0))
(assert
 (>= l_0_8_138 0.0))
(assert
 (>= l_0_8_141 0.0))
(assert
 (>= l_0_8_145 0.0))
(assert
 (>= l_0_8_150 0.0))
(assert
 (>= l_0_8_156 0.0))
(assert
 (>= l_0_8_163 0.0))
(assert
 (>= l_0_8_171 0.0))
(assert
 (>= l_0_8_180 0.0))
(assert
 (>= l_0_8_181 0.0))
(assert
 (>= l_0_8_183 0.0))
(assert
 (>= l_0_8_186 0.0))
(assert
 (>= l_0_8_190 0.0))
(assert
 (>= l_0_8_195 0.0))
(assert
 (>= l_0_8_201 0.0))
(assert
 (>= l_0_8_208 0.0))
(assert
 (>= l_0_8_216 0.0))
(assert
 (>= l_0_8_225 0.0))
(assert
 (>= l_0_8_226 0.0))
(assert
 (>= l_0_8_228 0.0))
(assert
 (>= l_0_8_231 0.0))
(assert
 (>= l_0_8_235 0.0))
(assert
 (>= l_0_8_240 0.0))
(assert
 (>= l_0_8_246 0.0))
(assert
 (>= l_0_8_253 0.0))
(assert
 (>= l_0_8_261 0.0))
(assert
 (>= l_0_8_270 0.0))
(assert
 (>= l_0_8_271 0.0))
(assert
 (>= l_0_8_273 0.0))
(assert
 (>= l_0_8_276 0.0))
(assert
 (>= l_0_8_280 0.0))
(assert
 (>= l_0_8_285 0.0))
(assert
 (>= l_0_8_291 0.0))
(assert
 (>= l_0_8_298 0.0))
(assert
 (>= l_0_8_306 0.0))
(assert
 (>= l_0_8_315 0.0))
(assert
 (>= l_0_8_316 0.0))
(assert
 (>= l_0_8_318 0.0))
(assert
 (>= l_0_8_321 0.0))
(assert
 (>= l_0_8_325 0.0))
(assert
 (>= l_0_8_330 0.0))
(assert
 (>= l_0_8_336 0.0))
(assert
 (>= l_0_8_343 0.0))
(assert
 (>= l_0_8_351 0.0))
(assert
 (>= l_0_8_360 0.0))
(assert
 (>= l_0_8_361 0.0))
(assert
 (>= l_0_8_363 0.0))
(assert
 (>= l_0_8_366 0.0))
(assert
 (>= l_0_8_370 0.0))
(assert
 (>= l_0_8_375 0.0))
(assert
 (>= l_0_8_381 0.0))
(assert
 (>= l_0_8_388 0.0))
(assert
 (>= l_0_8_396 0.0))
(assert
 (>= l_0_8_405 0.0))
(assert
 (>= l_0_8_406 0.0))
(assert
 (>= l_0_8_408 0.0))
(assert
 (>= l_0_8_411 0.0))
(assert
 (>= l_0_8_415 0.0))
(assert
 (>= l_0_8_420 0.0))
(assert
 (>= l_0_8_426 0.0))
(assert
 (>= l_0_8_433 0.0))
(assert
 (>= l_0_8_441 0.0))
(assert
 (>= l_0_8_450 0.0))
(assert
 (let ((?x48183 (* l_0_9_46 l_0_9_46)))
 (let ((?x48152 (- (- (* (- l_0_9_1) l_0_9_1) (* (* 2.0 l_0_9_196) l_0_9_209)) (* (* 2.0 l_0_9_197) l_0_9_210))))
 (let ((?x48158 (- (- ?x48152 (* (* 2.0 l_0_9_198) l_0_9_211)) (* (* 2.0 l_0_9_199) l_0_9_212))))
 (let ((?x48164 (- (- ?x48158 (* (* 2.0 l_0_9_200) l_0_9_213)) (* (* 2.0 l_0_9_201) l_0_9_214))))
 (let ((?x48170 (- (- ?x48164 (* (* 2.0 l_0_9_286) l_0_9_299)) (* (* 2.0 l_0_9_287) l_0_9_300))))
 (let ((?x48176 (- (- ?x48170 (* (* 2.0 l_0_9_288) l_0_9_301)) (* (* 2.0 l_0_9_289) l_0_9_302))))
 (let ((?x48182 (- (- ?x48176 (* (* 2.0 l_0_9_290) l_0_9_303)) (* (* 2.0 l_0_9_291) l_0_9_304))))
 (= (+ (+ ?x48182 ?x48183) 1.0) 0.0)))))))))
(assert
 (let ((?x48183 (* l_0_9_46 l_0_9_46)))
 (let ((?x48253 (- (- (* (- l_0_9_1) l_0_9_1) (* (* 2.0 l_0_9_187) l_0_9_202)) (* (* 2.0 l_0_9_188) l_0_9_203))))
 (let ((?x48259 (- (- ?x48253 (* (* 2.0 l_0_9_189) l_0_9_204)) (* (* 2.0 l_0_9_190) l_0_9_205))))
 (let ((?x48265 (- (- ?x48259 (* (* 2.0 l_0_9_277) l_0_9_292)) (* (* 2.0 l_0_9_278) l_0_9_293))))
 (let ((?x48271 (- (- ?x48265 (* (* 2.0 l_0_9_279) l_0_9_294)) (* (* 2.0 l_0_9_280) l_0_9_295))))
 (= (+ (+ ?x48271 ?x48183) 1.0) 0.0)))))))
(assert
 (let ((?x48183 (* l_0_9_46 l_0_9_46)))
 (let ((?x8105 (* l_0_9_226 l_0_9_226)))
 (let ((?x8109 (+ (- (* l_0_9_1 l_0_9_1) (* (* 2.0 l_0_9_181) l_0_9_184)) ?x8105)))
 (= (- (- (- ?x8109 (* (* 2.0 l_0_9_271) l_0_9_274)) ?x48183) 1.0) 0.0)))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48323 (* ?x48322 l_0_9_47)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x48320 (* ?x48319 l_0_9_151)))
 (let ((?x48316 (* 2.0 l_0_9_106)))
 (let ((?x48317 (* ?x48316 l_0_9_91)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48315 (* ?x48314 l_0_9_2)))
 (= (+ (+ (- ?x48315 ?x48317) ?x48320) ?x48323) 0.0))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x48393 (* ?x48392 l_0_9_79)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x48390 (* ?x48389 l_0_9_78)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x48387 (* ?x48386 l_0_9_77)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x48384 (* ?x48383 l_0_9_76)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x48381 (* ?x48380 l_0_9_75)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x48378 (* ?x48377 l_0_9_74)))
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48375 (* ?x48322 l_0_9_49)))
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x48373 (* ?x48372 l_0_9_259)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x48370 (* ?x48369 l_0_9_258)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x48367 (* ?x48366 l_0_9_257)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x48364 (* ?x48363 l_0_9_256)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x48361 (* ?x48360 l_0_9_255)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x48358 (* ?x48357 l_0_9_254)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x48355 (* ?x48354 l_0_9_34)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x48352 (* ?x48351 l_0_9_33)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x48349 (* ?x48348 l_0_9_32)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x48346 (* ?x48345 l_0_9_31)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48343 (* ?x48342 l_0_9_30)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x48340 (* ?x48339 l_0_9_29)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48338 (* ?x48314 l_0_9_4)))
 (let ((?x48359 (+ (+ (+ (+ (+ (+ (+ ?x48338 ?x48340) ?x48343) ?x48346) ?x48349) ?x48352) ?x48355) ?x48358)))
 (let ((?x48379 (- (+ (+ (+ (+ (+ (+ ?x48359 ?x48361) ?x48364) ?x48367) ?x48370) ?x48373) ?x48375) ?x48378)))
 (= (- (- (- (- (- ?x48379 ?x48381) ?x48384) ?x48387) ?x48390) ?x48393) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48322 l_0_9_52)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) ?x48470) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48521 (* ?x48322 l_0_9_56)))
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x48373 (* ?x48372 l_0_9_259)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x48370 (* ?x48369 l_0_9_258)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x48367 (* ?x48366 l_0_9_257)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x48364 (* ?x48363 l_0_9_256)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x48361 (* ?x48360 l_0_9_255)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x48358 (* ?x48357 l_0_9_254)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48513 (* ?x48512 l_0_9_169)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48510 (* ?x48509 l_0_9_168)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48507 (* ?x48506 l_0_9_167)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48504 (* ?x48503 l_0_9_166)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48501 (* ?x48500 l_0_9_165)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48498 (* ?x48497 l_0_9_164)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48495 (* ?x48494 l_0_9_124)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48492 (* ?x48491 l_0_9_123)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48489 (* ?x48488 l_0_9_122)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48486 (* ?x48485 l_0_9_121)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48483 (* ?x48482 l_0_9_120)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48474 (* ?x48314 l_0_9_11)))
 (let ((?x48490 (+ (+ (+ (+ ?x48474 (* (* 2.0 l_0_9_106) l_0_9_119)) ?x48483) ?x48486) ?x48489)))
 (let ((?x48511 (- (- (- (- (- (+ (+ ?x48490 ?x48492) ?x48495) ?x48498) ?x48501) ?x48504) ?x48507) ?x48510)))
 (let ((?x48520 (- (- (- (- (- (- (- ?x48511 ?x48513) ?x48358) ?x48361) ?x48364) ?x48367) ?x48370) ?x48373)))
 (= (+ ?x48520 ?x48521) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x8189 (* ?x48322 l_0_9_61)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x8189) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48577 (* ?x48322 l_0_9_67)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_22) ?x48577) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48587 (* ?x48322 l_0_9_74)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_29) ?x48587) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48597 (* ?x48322 l_0_9_82)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48595 (* ?x48314 l_0_9_37)))
 (= (+ ?x48595 ?x48597) 0.0))))))
(assert
 (let ((?x48626 (* l_0_9_48 l_0_9_48)))
 (let ((?x48624 (* l_0_9_47 l_0_9_47)))
 (let ((?x48622 (* l_0_9_3 l_0_9_3)))
 (let ((?x48620 (* l_0_9_2 l_0_9_2)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x48618 (* ?x48617 l_0_9_152)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x48615 (* ?x48614 l_0_9_151)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48608 (* ?x48482 l_0_9_93)))
 (let ((?x48619 (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_92) ?x48608) ?x48615) ?x48618)))
 (= (+ (+ (- (- ?x48619 ?x48620) ?x48622) ?x48624) ?x48626) 0.0)))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48673 (* ?x48672 l_0_9_50)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48670 (* ?x48669 l_0_9_49)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48667 (* ?x48666 l_0_9_5)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48664 (* ?x48663 l_0_9_4)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x48661 (* ?x48660 l_0_9_153)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x48658 (* ?x48657 l_0_9_152)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x48655 (* ?x48654 l_0_9_151)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48652 (* ?x48485 l_0_9_96)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48650 (* ?x48482 l_0_9_95)))
 (let ((?x48659 (+ (+ (- (- (* (* (- 2.0) l_0_9_106) l_0_9_94) ?x48650) ?x48652) ?x48655) ?x48658)))
 (let ((?x48662 (+ ?x48659 ?x48661)))
 (= (+ (+ (- (- ?x48662 ?x48664) ?x48667) ?x48670) ?x48673) 0.0))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48731 (* ?x48672 l_0_9_53)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48729 (* ?x48669 l_0_9_52)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48727 (* ?x48666 l_0_9_8)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48725 (* ?x48663 l_0_9_7)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x48723 (* ?x48722 l_0_9_154)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x48720 (* ?x48719 l_0_9_153)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x48717 (* ?x48716 l_0_9_152)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x48714 (* ?x48713 l_0_9_151)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48711 (* ?x48485 l_0_9_99)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48709 (* ?x48482 l_0_9_98)))
 (let ((?x48316 (* 2.0 l_0_9_106)))
 (let ((?x48707 (* ?x48316 l_0_9_97)))
 (let ((?x48715 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_109) ?x48707) ?x48709) ?x48711) ?x48714)))
 (let ((?x48724 (+ (+ (+ ?x48715 ?x48717) ?x48720) ?x48723)))
 (= (+ (+ (- (- ?x48724 ?x48725) ?x48727) ?x48729) ?x48731) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48811 (* ?x48672 l_0_9_57)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48809 (* ?x48669 l_0_9_56)))
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x48807 (* ?x48806 l_0_9_155)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x48804 (* ?x48803 l_0_9_154)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x48801 (* ?x48800 l_0_9_153)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x48798 (* ?x48797 l_0_9_152)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x48795 (* ?x48794 l_0_9_151)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x48792 (* ?x48791 l_0_9_3)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x48789 (* ?x48788 l_0_9_2)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x48786 (* ?x48785 l_0_9_110)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x48783 (* ?x48782 l_0_9_109)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x48780 (* ?x48779 l_0_9_108)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x48777 (* ?x48767 l_0_9_107)))
 (let ((?x48787 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_106) ?x48777) ?x48780) ?x48783) ?x48786)))
 (let ((?x48808 (+ (+ (+ (+ (+ (- (- ?x48787 ?x48789) ?x48792) ?x48795) ?x48798) ?x48801) ?x48804) ?x48807)))
 (= (+ (+ ?x48808 ?x48809) ?x48811) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48869 (* ?x48672 l_0_9_62)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48867 (* ?x48669 l_0_9_61)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48865 (* ?x48342 l_0_9_3)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x48863 (* ?x48339 l_0_9_2)))
 (let ((?x48861 (* l_0_9_156 l_0_9_156)))
 (let ((?x48859 (* l_0_9_155 l_0_9_155)))
 (let ((?x48857 (* l_0_9_154 l_0_9_154)))
 (let ((?x48855 (* l_0_9_153 l_0_9_153)))
 (let ((?x48853 (* l_0_9_152 l_0_9_152)))
 (let ((?x48851 (* l_0_9_151 l_0_9_151)))
 (let ((?x48849 (* l_0_9_111 l_0_9_111)))
 (let ((?x48847 (* l_0_9_110 l_0_9_110)))
 (let ((?x48845 (* l_0_9_109 l_0_9_109)))
 (let ((?x48843 (* l_0_9_108 l_0_9_108)))
 (let ((?x48844 (- (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x48843)))
 (let ((?x48858 (+ (+ (+ (+ (- (- (- ?x48844 ?x48845) ?x48847) ?x48849) ?x48851) ?x48853) ?x48855) ?x48857)))
 (let ((?x48862 (+ (+ ?x48858 ?x48859) ?x48861)))
 (= (+ (+ (- (- ?x48862 ?x48863) ?x48865) ?x48867) ?x48869) 0.0)))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48924 (* ?x48672 l_0_9_68)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48922 (* ?x48669 l_0_9_67)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x48920 (* ?x48919 l_0_9_3)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48917 (* ?x48663 l_0_9_22)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48915 (* ?x48512 l_0_9_162)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48913 (* ?x48509 l_0_9_161)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48911 (* ?x48506 l_0_9_160)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48909 (* ?x48503 l_0_9_159)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48907 (* ?x48500 l_0_9_158)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48905 (* ?x48497 l_0_9_157)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48903 (* ?x48494 l_0_9_117)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48901 (* ?x48491 l_0_9_116)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48899 (* ?x48488 l_0_9_115)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48897 (* ?x48485 l_0_9_114)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x8346 (* ?x48482 l_0_9_113)))
 (let ((?x48902 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x8346) ?x48897) ?x48899) ?x48901)))
 (let ((?x48916 (+ (+ (+ (+ (+ (+ (- ?x48902 ?x48903) ?x48905) ?x48907) ?x48909) ?x48911) ?x48913) ?x48915)))
 (= (+ (+ (- (- ?x48916 ?x48917) ?x48920) ?x48922) ?x48924) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48971 (* ?x48672 l_0_9_75)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48969 (* ?x48669 l_0_9_74)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48967 (* ?x48666 l_0_9_30)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48965 (* ?x48663 l_0_9_29)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48513 (* ?x48512 l_0_9_169)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48510 (* ?x48509 l_0_9_168)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48507 (* ?x48506 l_0_9_167)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48504 (* ?x48503 l_0_9_166)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48501 (* ?x48500 l_0_9_165)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48498 (* ?x48497 l_0_9_164)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48495 (* ?x48494 l_0_9_124)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48492 (* ?x48491 l_0_9_123)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48489 (* ?x48488 l_0_9_122)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48486 (* ?x48485 l_0_9_121)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48483 (* ?x48482 l_0_9_120)))
 (let ((?x48957 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_119) ?x48483) ?x48486) ?x48489) ?x48492)))
 (let ((?x48964 (+ (+ (+ (+ (+ (+ (- ?x48957 ?x48495) ?x48498) ?x48501) ?x48504) ?x48507) ?x48510) ?x48513)))
 (= (+ (+ (- (- ?x48964 ?x48965) ?x48967) ?x48969) ?x48971) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x49006 (* ?x48672 l_0_9_83)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x49004 (* ?x48669 l_0_9_82)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x49002 (* ?x48666 l_0_9_38)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x49000 (* ?x48663 l_0_9_37)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48998 (* ?x48512 l_0_9_177)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48996 (* ?x48509 l_0_9_176)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48994 (* ?x48506 l_0_9_175)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48992 (* ?x48503 l_0_9_174)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48990 (* ?x48500 l_0_9_173)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48988 (* ?x48497 l_0_9_172)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48986 (* ?x48494 l_0_9_132)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48984 (* ?x48491 l_0_9_131)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48982 (* ?x48488 l_0_9_130)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48980 (* ?x48485 l_0_9_129)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x37236 (* ?x48482 l_0_9_128)))
 (let ((?x48985 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_127) ?x37236) ?x48980) ?x48982) ?x48984)))
 (let ((?x48999 (+ (+ (+ (+ (+ (+ (- ?x48985 ?x48986) ?x48988) ?x48990) ?x48992) ?x48994) ?x48996) ?x48998)))
 (= (+ (+ (- (- ?x48999 ?x49000) ?x49002) ?x49004) ?x49006) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49062 (* l_0_9_6 l_0_9_6)))
 (let ((?x49060 (* l_0_9_51 l_0_9_51)))
 (let ((?x49058 (* l_0_9_50 l_0_9_50)))
 (let ((?x49056 (* l_0_9_5 l_0_9_5)))
 (let ((?x49059 (+ (- (+ (* (- l_0_9_4) l_0_9_4) (* l_0_9_49 l_0_9_49)) ?x49056) ?x49058)))
 (= (- (+ ?x49059 ?x49060) ?x49062) 0.0)))))))
(assert
 (let ((?x49090 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49087 (* ?x49086 l_0_9_54)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49084 (* ?x49083 l_0_9_53)))
 (let ((?x49081 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49078 (* ?x49077 l_0_9_52)))
 (let ((?x49088 (+ (+ (- (+ (* (* (- 2.0) l_0_9_4) l_0_9_7) ?x49078) ?x49081) ?x49084) ?x49087)))
 (= (- ?x49088 ?x49090) 0.0)))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49121 (* ?x49086 l_0_9_58)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49119 (* ?x49083 l_0_9_57)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49117 (* ?x49077 l_0_9_56)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49115 (* ?x49114 l_0_9_6)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49112 (* ?x48791 l_0_9_5)))
 (let ((?x49120 (+ (+ (- (- (* (* (- 2.0) l_0_9_11) l_0_9_4) ?x49112) ?x49115) ?x49117) ?x49119)))
 (= (+ ?x49120 ?x49121) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49151 (* ?x49086 l_0_9_63)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49149 (* ?x49083 l_0_9_62)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49147 (* ?x49077 l_0_9_61)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49145 (* ?x48345 l_0_9_6)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49137 (* ?x48342 l_0_9_5)))
 (let ((?x49150 (+ (+ (- (- (* (* (- 2.0) l_0_9_16) l_0_9_4) ?x49137) ?x49145) ?x49147) ?x49149)))
 (= (+ ?x49150 ?x49151) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49172 (* ?x49086 l_0_9_69)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49170 (* ?x49083 l_0_9_68)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49168 (* ?x49077 l_0_9_67)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49166 (* ?x49165 l_0_9_6)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x37323 (* ?x48919 l_0_9_5)))
 (let ((?x49171 (+ (+ (- (- (* (* (- 2.0) l_0_9_22) l_0_9_4) ?x37323) ?x49166) ?x49168) ?x49170)))
 (= (+ ?x49171 ?x49172) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49204 (* ?x49086 l_0_9_76)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49202 (* ?x49083 l_0_9_75)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49200 (* ?x49077 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49198 (* ?x49197 l_0_9_6)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49195 (* ?x49194 l_0_9_5)))
 (let ((?x49203 (+ (+ (- (- (* (* (- 2.0) l_0_9_29) l_0_9_4) ?x49195) ?x49198) ?x49200) ?x49202)))
 (= (+ ?x49203 ?x49204) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49238 (* ?x49086 l_0_9_84)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49236 (* ?x49083 l_0_9_83)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49234 (* ?x49077 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49232 (* ?x49231 l_0_9_6)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49229 (* ?x49228 l_0_9_5)))
 (let ((?x49237 (+ (+ (- (- (* (* (- 2.0) l_0_9_37) l_0_9_4) ?x49229) ?x49232) ?x49234) ?x49236)))
 (= (+ ?x49237 ?x49238) 0.0)))))))))))))
(assert
 (let ((?x49272 (* l_0_9_9 l_0_9_9)))
 (let ((?x49270 (* l_0_9_8 l_0_9_8)))
 (let ((?x49268 (* l_0_9_7 l_0_9_7)))
 (let ((?x49266 (* l_0_9_55 l_0_9_55)))
 (let ((?x49264 (* l_0_9_54 l_0_9_54)))
 (let ((?x49262 (* l_0_9_53 l_0_9_53)))
 (let ((?x49265 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_52 l_0_9_52)) ?x49262) ?x49264)))
 (= (- (- (- (+ ?x49265 ?x49266) ?x49268) ?x49270) ?x49272) 0.0)))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49292 (* ?x49291 l_0_9_59)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49289 (* ?x49288 l_0_9_58)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49286 (* ?x49285 l_0_9_57)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x37362 (* ?x26137 l_0_9_56)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x37347 (* ?x49114 l_0_9_9)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x37364 (* ?x48791 l_0_9_8)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x37359 (* ?x48788 l_0_9_7)))
 (let ((?x37363 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_14) ?x37359) ?x37364) ?x37347) ?x37362)))
 (= (+ (+ (+ ?x37363 ?x49286) ?x49289) ?x49292) 0.0)))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49328 (* ?x49291 l_0_9_64)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49326 (* ?x49288 l_0_9_63)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49324 (* ?x49285 l_0_9_62)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49322 (* ?x26137 l_0_9_61)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49320 (* ?x48345 l_0_9_9)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49311 (* ?x48342 l_0_9_8)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x49307 (* ?x48339 l_0_9_7)))
 (let ((?x49323 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) ?x49307) ?x49311) ?x49320) ?x49322)))
 (= (+ (+ (+ ?x49323 ?x49324) ?x49326) ?x49328) 0.0)))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x48393 (* ?x48392 l_0_9_79)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x48390 (* ?x48389 l_0_9_78)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x48387 (* ?x48386 l_0_9_77)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x48384 (* ?x48383 l_0_9_76)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x48381 (* ?x48380 l_0_9_75)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x48378 (* ?x48377 l_0_9_74)))
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49368 (* ?x49291 l_0_9_70)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49366 (* ?x49288 l_0_9_69)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49364 (* ?x49285 l_0_9_68)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49362 (* ?x26137 l_0_9_67)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49360 (* ?x49165 l_0_9_9)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49358 (* ?x48919 l_0_9_8)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49356 (* ?x49355 l_0_9_7)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x48355 (* ?x48354 l_0_9_34)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x48352 (* ?x48351 l_0_9_33)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x48349 (* ?x48348 l_0_9_32)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x48346 (* ?x48345 l_0_9_31)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48343 (* ?x48342 l_0_9_30)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x48340 (* ?x48339 l_0_9_29)))
 (let ((?x37353 (* (- 2.0) l_0_9_10)))
 (let ((?x49342 (* ?x37353 l_0_9_25)))
 (let ((?x49357 (- (- (- (- (- (- (- ?x49342 ?x48340) ?x48343) ?x48346) ?x48349) ?x48352) ?x48355) ?x49356)))
 (let ((?x49370 (+ (+ (+ (+ (+ (- (- ?x49357 ?x49358) ?x49360) ?x49362) ?x49364) ?x49366) ?x49368) ?x48378)))
 (= (+ (+ (+ (+ (+ ?x49370 ?x48381) ?x48384) ?x48387) ?x48390) ?x48393) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49393 (* ?x49291 l_0_9_77)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49391 (* ?x49288 l_0_9_76)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49389 (* ?x49285 l_0_9_75)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49387 (* ?x26137 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49385 (* ?x49197 l_0_9_9)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49383 (* ?x49194 l_0_9_8)))
 (let ((?x37428 (* 2.0 l_0_9_29)))
 (let ((?x49381 (* ?x37428 l_0_9_7)))
 (let ((?x49388 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_32) ?x49381) ?x49383) ?x49385) ?x49387)))
 (= (+ (+ (+ ?x49388 ?x49389) ?x49391) ?x49393) 0.0)))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49432 (* ?x49291 l_0_9_85)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49430 (* ?x49288 l_0_9_84)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49428 (* ?x49285 l_0_9_83)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49426 (* ?x26137 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49424 (* ?x49231 l_0_9_9)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49415 (* ?x49228 l_0_9_8)))
 (let ((?x49410 (* 2.0 l_0_9_37)))
 (let ((?x49412 (* ?x49410 l_0_9_7)))
 (let ((?x37353 (* (- 2.0) l_0_9_10)))
 (let ((?x49408 (* ?x37353 l_0_9_40)))
 (let ((?x49433 (+ (+ (+ (+ (- (- (- ?x49408 ?x49412) ?x49415) ?x49424) ?x49426) ?x49428) ?x49430) ?x49432)))
 (= ?x49433 0.0)))))))))))))))))))
(assert
 (let ((?x49456 (* l_0_9_60 l_0_9_60)))
 (let ((?x49454 (* l_0_9_59 l_0_9_59)))
 (let ((?x49452 (* l_0_9_58 l_0_9_58)))
 (let ((?x49450 (* l_0_9_57 l_0_9_57)))
 (let ((?x49448 (* l_0_9_56 l_0_9_56)))
 (let ((?x49446 (* l_0_9_15 l_0_9_15)))
 (let ((?x49444 (* l_0_9_14 l_0_9_14)))
 (let ((?x37464 (* l_0_9_13 l_0_9_13)))
 (let ((?x49445 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x37464) ?x49444)))
 (= (+ (+ (+ (+ (+ (- ?x49445 ?x49446) ?x49448) ?x49450) ?x49452) ?x49454) ?x49456) 0.0)))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49499 (* ?x49498 l_0_9_65)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49496 (* ?x49495 l_0_9_64)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49493 (* ?x49492 l_0_9_63)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49490 (* ?x49489 l_0_9_62)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49487 (* ?x49486 l_0_9_61)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49484 (* ?x49483 l_0_9_20)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49481 (* ?x49480 l_0_9_19)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49478 (* ?x49114 l_0_9_18)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49476 (* ?x48791 l_0_9_17)))
 (let ((?x49485 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_16) ?x49476) ?x49478) ?x49481) ?x49484)))
 (= (+ (+ (+ (+ (+ ?x49485 ?x49487) ?x49490) ?x49493) ?x49496) ?x49499) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49545 (* ?x49498 l_0_9_71)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49543 (* ?x49495 l_0_9_70)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49541 (* ?x49492 l_0_9_69)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49539 (* ?x49489 l_0_9_68)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49537 (* ?x49486 l_0_9_67)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49535 (* ?x49483 l_0_9_26)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49533 (* ?x49480 l_0_9_25)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49531 (* ?x49114 l_0_9_24)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49529 (* ?x48791 l_0_9_23)))
 (let ((?x49536 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_22) ?x49529) ?x49531) ?x49533) ?x49535)))
 (= (+ (+ (+ (+ (+ ?x49536 ?x49537) ?x49539) ?x49541) ?x49543) ?x49545) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49589 (* ?x49498 l_0_9_78)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49587 (* ?x49495 l_0_9_77)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49585 (* ?x49492 l_0_9_76)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49583 (* ?x49489 l_0_9_75)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49581 (* ?x49486 l_0_9_74)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49579 (* ?x49483 l_0_9_33)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49569 (* ?x49480 l_0_9_32)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x26350 (* ?x49114 l_0_9_31)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x26347 (* ?x48791 l_0_9_30)))
 (let ((?x49580 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_29) ?x26347) ?x26350) ?x49569) ?x49579)))
 (= (+ (+ (+ (+ (+ ?x49580 ?x49581) ?x49583) ?x49585) ?x49587) ?x49589) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49622 (* ?x49498 l_0_9_86)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49620 (* ?x49495 l_0_9_85)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49618 (* ?x49492 l_0_9_84)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49616 (* ?x49489 l_0_9_83)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49614 (* ?x49486 l_0_9_82)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49612 (* ?x49483 l_0_9_41)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49610 (* ?x49480 l_0_9_40)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49608 (* ?x49114 l_0_9_39)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49606 (* ?x48791 l_0_9_38)))
 (let ((?x49613 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_37) ?x49606) ?x49608) ?x49610) ?x49612)))
 (= (+ (+ (+ (+ (+ ?x49613 ?x49614) ?x49616) ?x49618) ?x49620) ?x49622) 0.0)))))))))))))))))))))
(assert
 (let ((?x49677 (* l_0_9_66 l_0_9_66)))
 (let ((?x49675 (* l_0_9_65 l_0_9_65)))
 (let ((?x49673 (* l_0_9_64 l_0_9_64)))
 (let ((?x49671 (* l_0_9_63 l_0_9_63)))
 (let ((?x49669 (* l_0_9_62 l_0_9_62)))
 (let ((?x49667 (* l_0_9_61 l_0_9_61)))
 (let ((?x49665 (* l_0_9_21 l_0_9_21)))
 (let ((?x49663 (* l_0_9_20 l_0_9_20)))
 (let ((?x49661 (* l_0_9_19 l_0_9_19)))
 (let ((?x49651 (* l_0_9_18 l_0_9_18)))
 (let ((?x49662 (- (- (- (* (- l_0_9_16) l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49651) ?x49661)))
 (let ((?x49676 (+ (+ (+ (+ (+ (- (- ?x49662 ?x49663) ?x49665) ?x49667) ?x49669) ?x49671) ?x49673) ?x49675)))
 (= (+ ?x49676 ?x49677) 0.0))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49721 (* ?x48392 l_0_9_72)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49719 (* ?x48389 l_0_9_71)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49717 (* ?x48386 l_0_9_70)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49715 (* ?x48383 l_0_9_69)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49713 (* ?x48380 l_0_9_68)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49711 (* ?x48377 l_0_9_67)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49709 (* ?x48354 l_0_9_27)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49707 (* ?x48351 l_0_9_26)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49705 (* ?x48348 l_0_9_25)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49703 (* ?x48345 l_0_9_24)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49701 (* ?x48342 l_0_9_23)))
 (let ((?x49708 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_22) ?x49701) ?x49703) ?x49705) ?x49707)))
 (let ((?x49722 (+ (+ (+ (+ (+ (+ (- ?x49708 ?x49709) ?x49711) ?x49713) ?x49715) ?x49717) ?x49719) ?x49721)))
 (= ?x49722 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x48393 (* ?x48392 l_0_9_79)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x48390 (* ?x48389 l_0_9_78)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x48387 (* ?x48386 l_0_9_77)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x48384 (* ?x48383 l_0_9_76)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x48381 (* ?x48380 l_0_9_75)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x48378 (* ?x48377 l_0_9_74)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x48355 (* ?x48354 l_0_9_34)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x48352 (* ?x48351 l_0_9_33)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x48349 (* ?x48348 l_0_9_32)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x48346 (* ?x48345 l_0_9_31)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48343 (* ?x48342 l_0_9_30)))
 (let ((?x49742 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_29) ?x48343) ?x48346) ?x48349) ?x48352)))
 (let ((?x49758 (+ (+ (+ (+ (+ (+ (- ?x49742 ?x48355) ?x48378) ?x48381) ?x48384) ?x48387) ?x48390) ?x48393)))
 (= ?x49758 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49793 (* ?x48392 l_0_9_87)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49791 (* ?x48389 l_0_9_86)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49789 (* ?x48386 l_0_9_85)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49787 (* ?x48383 l_0_9_84)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49785 (* ?x48380 l_0_9_83)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49783 (* ?x48377 l_0_9_82)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49781 (* ?x48354 l_0_9_42)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49779 (* ?x48351 l_0_9_41)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49777 (* ?x48348 l_0_9_40)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49775 (* ?x48345 l_0_9_39)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49773 (* ?x48342 l_0_9_38)))
 (let ((?x49780 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_37) ?x49773) ?x49775) ?x49777) ?x49779)))
 (let ((?x49794 (+ (+ (+ (+ (+ (+ (- ?x49780 ?x49781) ?x49783) ?x49785) ?x49787) ?x49789) ?x49791) ?x49793)))
 (= ?x49794 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49842 (* l_0_9_73 l_0_9_73)))
 (let ((?x49840 (* l_0_9_72 l_0_9_72)))
 (let ((?x49838 (* l_0_9_71 l_0_9_71)))
 (let ((?x49836 (* l_0_9_70 l_0_9_70)))
 (let ((?x49834 (* l_0_9_69 l_0_9_69)))
 (let ((?x49832 (* l_0_9_68 l_0_9_68)))
 (let ((?x49830 (* l_0_9_67 l_0_9_67)))
 (let ((?x49828 (* l_0_9_28 l_0_9_28)))
 (let ((?x49826 (* l_0_9_27 l_0_9_27)))
 (let ((?x49824 (* l_0_9_26 l_0_9_26)))
 (let ((?x37688 (* l_0_9_25 l_0_9_25)))
 (let ((?x37682 (* l_0_9_24 l_0_9_24)))
 (let ((?x49823 (- (- (- (* (- l_0_9_22) l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x37682) ?x37688)))
 (let ((?x49837 (+ (+ (+ (+ (- (- (- ?x49823 ?x49824) ?x49826) ?x49828) ?x49830) ?x49832) ?x49834) ?x49836)))
 (= (+ (+ (+ ?x49837 ?x49838) ?x49840) ?x49842) 0.0))))))))))))))))
(assert
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49905 (* ?x49904 l_0_9_80)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49902 (* ?x49901 l_0_9_79)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49899 (* ?x49898 l_0_9_78)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49896 (* ?x49895 l_0_9_77)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49893 (* ?x49892 l_0_9_76)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49890 (* ?x49889 l_0_9_75)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49887 (* ?x49886 l_0_9_74)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49884 (* ?x49883 l_0_9_35)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49881 (* ?x49880 l_0_9_34)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49878 (* ?x49877 l_0_9_33)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49875 (* ?x49874 l_0_9_32)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49872 (* ?x49165 l_0_9_31)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49870 (* ?x48919 l_0_9_30)))
 (let ((?x49879 (- (- (- (- (* (* (- 2.0) l_0_9_22) l_0_9_29) ?x49870) ?x49872) ?x49875) ?x49878)))
 (let ((?x49900 (+ (+ (+ (+ (+ (- (- ?x49879 ?x49881) ?x49884) ?x49887) ?x49890) ?x49893) ?x49896) ?x49899)))
 (= (+ (+ ?x49900 ?x49902) ?x49905) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49965 (* ?x49904 l_0_9_88)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49963 (* ?x49901 l_0_9_87)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49961 (* ?x49898 l_0_9_86)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49959 (* ?x49895 l_0_9_85)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49957 (* ?x49892 l_0_9_84)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49955 (* ?x49889 l_0_9_83)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49953 (* ?x49886 l_0_9_82)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49951 (* ?x49883 l_0_9_43)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49949 (* ?x49880 l_0_9_42)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49947 (* ?x49877 l_0_9_41)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49935 (* ?x49874 l_0_9_40)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49931 (* ?x49165 l_0_9_39)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49927 (* ?x48919 l_0_9_38)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49925 (* ?x49355 l_0_9_37)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48513 (* ?x48512 l_0_9_169)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48510 (* ?x48509 l_0_9_168)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48507 (* ?x48506 l_0_9_167)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48504 (* ?x48503 l_0_9_166)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48501 (* ?x48500 l_0_9_165)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48498 (* ?x48497 l_0_9_164)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48495 (* ?x48494 l_0_9_124)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48492 (* ?x48491 l_0_9_123)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48489 (* ?x48488 l_0_9_122)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48486 (* ?x48485 l_0_9_121)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48483 (* ?x48482 l_0_9_120)))
 (let ((?x48957 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_119) ?x48483) ?x48486) ?x48489) ?x48492)))
 (let ((?x48964 (+ (+ (+ (+ (+ (+ (- ?x48957 ?x48495) ?x48498) ?x48501) ?x48504) ?x48507) ?x48510) ?x48513)))
 (let ((?x49952 (- (- (- (- (- (- (- ?x48964 ?x49925) ?x49927) ?x49931) ?x49935) ?x49947) ?x49949) ?x49951)))
 (let ((?x49966 (+ (+ (+ (+ (+ (+ (+ ?x49952 ?x49953) ?x49955) ?x49957) ?x49959) ?x49961) ?x49963) ?x49965)))
 (= ?x49966 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50013 (* l_0_9_81 l_0_9_81)))
 (let ((?x50011 (* l_0_9_80 l_0_9_80)))
 (let ((?x50009 (* l_0_9_79 l_0_9_79)))
 (let ((?x50007 (* l_0_9_78 l_0_9_78)))
 (let ((?x50005 (* l_0_9_77 l_0_9_77)))
 (let ((?x50003 (* l_0_9_76 l_0_9_76)))
 (let ((?x50001 (* l_0_9_75 l_0_9_75)))
 (let ((?x49999 (* l_0_9_74 l_0_9_74)))
 (let ((?x49997 (* l_0_9_36 l_0_9_36)))
 (let ((?x49995 (* l_0_9_35 l_0_9_35)))
 (let ((?x49993 (* l_0_9_34 l_0_9_34)))
 (let ((?x9919 (* l_0_9_33 l_0_9_33)))
 (let ((?x37757 (* l_0_9_32 l_0_9_32)))
 (let ((?x37786 (* l_0_9_31 l_0_9_31)))
 (let ((?x26438 (- (- (- (* (- l_0_9_29) l_0_9_29) (* l_0_9_30 l_0_9_30)) ?x37786) ?x37757)))
 (let ((?x50004 (+ (+ (+ (- (- (- (- ?x26438 ?x9919) ?x49993) ?x49995) ?x49997) ?x49999) ?x50001) ?x50003)))
 (= (+ (+ (+ (+ (+ ?x50004 ?x50005) ?x50007) ?x50009) ?x50011) ?x50013) 0.0))))))))))))))))))
(assert
 (let ((?x50083 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50080 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50077 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50074 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50071 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50068 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50065 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50062 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50059 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50056 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50053 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50050 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50047 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x50044 (* ?x49197 l_0_9_39)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x50042 (* ?x49194 l_0_9_38)))
 (let ((?x50051 (- (- (- (- (* (* (- 2.0) l_0_9_29) l_0_9_37) ?x50042) ?x50044) ?x50047) ?x50050)))
 (let ((?x50072 (+ (+ (+ (+ (- (- (- ?x50051 ?x50053) ?x50056) ?x50059) ?x50062) ?x50065) ?x50068) ?x50071)))
 (= (+ (+ (+ (+ ?x50072 ?x50074) ?x50077) ?x50080) ?x50083) 0.0)))))))))))))))))))))
(assert
 (let ((?x50162 (* l_0_9_90 l_0_9_90)))
 (let ((?x50160 (* l_0_9_89 l_0_9_89)))
 (let ((?x50158 (* l_0_9_88 l_0_9_88)))
 (let ((?x50156 (* l_0_9_87 l_0_9_87)))
 (let ((?x50154 (* l_0_9_86 l_0_9_86)))
 (let ((?x50152 (* l_0_9_85 l_0_9_85)))
 (let ((?x50150 (* l_0_9_84 l_0_9_84)))
 (let ((?x50148 (* l_0_9_83 l_0_9_83)))
 (let ((?x50146 (* l_0_9_82 l_0_9_82)))
 (let ((?x50144 (* l_0_9_45 l_0_9_45)))
 (let ((?x50142 (* l_0_9_44 l_0_9_44)))
 (let ((?x50140 (* l_0_9_43 l_0_9_43)))
 (let ((?x50138 (* l_0_9_42 l_0_9_42)))
 (let ((?x50125 (* l_0_9_41 l_0_9_41)))
 (let ((?x50122 (* l_0_9_40 l_0_9_40)))
 (let ((?x50118 (* l_0_9_39 l_0_9_39)))
 (let ((?x50124 (- (- (- (* (- l_0_9_37) l_0_9_37) (* l_0_9_38 l_0_9_38)) ?x50118) ?x50122)))
 (let ((?x50149 (+ (+ (- (- (- (- (- ?x50124 ?x50125) ?x50138) ?x50140) ?x50142) ?x50144) ?x50146) ?x50148)))
 (let ((?x50163 (+ (+ (+ (+ (+ (+ (+ ?x50149 ?x50150) ?x50152) ?x50154) ?x50156) ?x50158) ?x50160) ?x50162)))
 (= ?x50163 0.0)))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48323 (* ?x48322 l_0_9_47)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48315 (* ?x48314 l_0_9_2)))
 (= (+ ?x48315 ?x48323) 0.0))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49368 (* ?x49291 l_0_9_70)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49366 (* ?x49288 l_0_9_69)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49364 (* ?x49285 l_0_9_68)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49362 (* ?x26137 l_0_9_67)))
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48375 (* ?x48322 l_0_9_49)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49360 (* ?x49165 l_0_9_9)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x50212 (* ?x50211 l_0_9_250)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x50209 (* ?x50208 l_0_9_249)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x50206 (* ?x50205 l_0_9_248)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x50203 (* ?x50202 l_0_9_247)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49358 (* ?x48919 l_0_9_8)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49356 (* ?x49355 l_0_9_7)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48338 (* ?x48314 l_0_9_4)))
 (let ((?x50204 (+ (+ (+ (+ ?x48338 (* (* 2.0 l_0_9_10) l_0_9_25)) ?x49356) ?x49358) ?x50203)))
 (let ((?x50217 (- (- (+ (+ (+ (+ (+ ?x50204 ?x50206) ?x50209) ?x50212) ?x49360) ?x48375) ?x49362) ?x49364)))
 (= (- (- ?x50217 ?x49366) ?x49368) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48322 l_0_9_52)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) ?x48470) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48521 (* ?x48322 l_0_9_56)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x50212 (* ?x50211 l_0_9_250)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x50209 (* ?x50208 l_0_9_249)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x50206 (* ?x50205 l_0_9_248)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x50203 (* ?x50202 l_0_9_247)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x37837 (* ?x48722 l_0_9_160)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x37886 (* ?x48719 l_0_9_159)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x37877 (* ?x48716 l_0_9_158)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26488 (* ?x48713 l_0_9_157)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x9971 (* ?x37891 l_0_9_99)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x37880 (* ?x37873 l_0_9_98)))
 (let ((?x37865 (* 2.0 l_0_9_112)))
 (let ((?x37867 (* ?x37865 l_0_9_97)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48474 (* ?x48314 l_0_9_11)))
 (let ((?x37856 (+ (+ (+ (+ ?x48474 (* (* 2.0 l_0_9_100) l_0_9_115)) ?x37867) ?x37880) ?x9971)))
 (let ((?x10104 (- (- (- (- (- (- (- ?x37856 ?x26488) ?x37877) ?x37886) ?x37837) ?x50203) ?x50206) ?x50209)))
 (= (+ (- ?x10104 ?x50212) ?x48521) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x8189 (* ?x48322 l_0_9_61)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x8189) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48577 (* ?x48322 l_0_9_67)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_22) ?x48577) 0.0))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48587 (* ?x48322 l_0_9_74)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_29) ?x48587) 0.0))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50262 (* ?x50261 l_0_9_97)))
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48597 (* ?x48322 l_0_9_82)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x37986 (* ?x48319 l_0_9_142)))
 (let ((?x48314 (* (- 2.0) l_0_9_1)))
 (let ((?x48595 (* ?x48314 l_0_9_37)))
 (= (- (+ (+ ?x48595 ?x37986) ?x48597) ?x50262) 0.0))))))))))
(assert
 (let ((?x48626 (* l_0_9_48 l_0_9_48)))
 (let ((?x48624 (* l_0_9_47 l_0_9_47)))
 (let ((?x50275 (+ (+ (- (* (- l_0_9_2) l_0_9_2) (* l_0_9_3 l_0_9_3)) ?x48624) ?x48626)))
 (= ?x50275 0.0)))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48673 (* ?x48672 l_0_9_50)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48670 (* ?x48669 l_0_9_49)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48667 (* ?x48666 l_0_9_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_4) ?x48667) ?x48670) ?x48673) 0.0))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48731 (* ?x48672 l_0_9_53)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48729 (* ?x48669 l_0_9_52)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48727 (* ?x48666 l_0_9_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_7) ?x48727) ?x48729) ?x48731) 0.0))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48811 (* ?x48672 l_0_9_57)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48809 (* ?x48669 l_0_9_56)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x48792 (* ?x48791 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_11) l_0_9_2) ?x48792) ?x48809) ?x48811) 0.0))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48869 (* ?x48672 l_0_9_62)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48867 (* ?x48669 l_0_9_61)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48865 (* ?x48342 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_16) l_0_9_2) ?x48865) ?x48867) ?x48869) 0.0))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48924 (* ?x48672 l_0_9_68)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48922 (* ?x48669 l_0_9_67)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x48920 (* ?x48919 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_22) ?x48920) ?x48922) ?x48924) 0.0))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48971 (* ?x48672 l_0_9_75)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48969 (* ?x48669 l_0_9_74)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48967 (* ?x48666 l_0_9_30)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48965 (* ?x48663 l_0_9_29)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x37837 (* ?x48722 l_0_9_160)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x37886 (* ?x48719 l_0_9_159)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x37877 (* ?x48716 l_0_9_158)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26488 (* ?x48713 l_0_9_157)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x9971 (* ?x37891 l_0_9_99)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x37880 (* ?x37873 l_0_9_98)))
 (let ((?x37865 (* 2.0 l_0_9_112)))
 (let ((?x37867 (* ?x37865 l_0_9_97)))
 (let ((?x50324 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_115) ?x37867) ?x37880) ?x9971) ?x26488)))
 (let ((?x50327 (+ (+ (+ ?x50324 ?x37877) ?x37886) ?x37837)))
 (= (+ (+ (- (- ?x50327 ?x48965) ?x48967) ?x48969) ?x48971) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x38014 (* ?x37999 l_0_9_98)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x37972 (* ?x37954 l_0_9_97)))
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x49006 (* ?x48672 l_0_9_83)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x49004 (* ?x48669 l_0_9_82)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x49002 (* ?x48666 l_0_9_38)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x49000 (* ?x48663 l_0_9_37)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x38109 (* ?x48617 l_0_9_143)))
 (let ((?x37970 (+ (* (* 2.0 l_0_9_137) l_0_9_142) ?x38109)))
 (= (- (- (+ (+ (- (- ?x37970 ?x49000) ?x49002) ?x49004) ?x49006) ?x37972) ?x38014) 0.0)))))))))))))))))
(assert
 (let ((?x49062 (* l_0_9_6 l_0_9_6)))
 (let ((?x49060 (* l_0_9_51 l_0_9_51)))
 (let ((?x49058 (* l_0_9_50 l_0_9_50)))
 (let ((?x49056 (* l_0_9_5 l_0_9_5)))
 (let ((?x49059 (+ (- (+ (* (- l_0_9_4) l_0_9_4) (* l_0_9_49 l_0_9_49)) ?x49056) ?x49058)))
 (= (- (+ ?x49059 ?x49060) ?x49062) 0.0)))))))
(assert
 (let ((?x49090 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49087 (* ?x49086 l_0_9_54)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49084 (* ?x49083 l_0_9_53)))
 (let ((?x49081 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49078 (* ?x49077 l_0_9_52)))
 (let ((?x49088 (+ (+ (- (+ (* (* (- 2.0) l_0_9_4) l_0_9_7) ?x49078) ?x49081) ?x49084) ?x49087)))
 (= (- ?x49088 ?x49090) 0.0)))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49121 (* ?x49086 l_0_9_58)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49119 (* ?x49083 l_0_9_57)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49117 (* ?x49077 l_0_9_56)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49115 (* ?x49114 l_0_9_6)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49112 (* ?x48791 l_0_9_5)))
 (let ((?x49120 (+ (+ (- (- (* (* (- 2.0) l_0_9_11) l_0_9_4) ?x49112) ?x49115) ?x49117) ?x49119)))
 (= (+ ?x49120 ?x49121) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49151 (* ?x49086 l_0_9_63)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49149 (* ?x49083 l_0_9_62)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49147 (* ?x49077 l_0_9_61)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49145 (* ?x48345 l_0_9_6)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49137 (* ?x48342 l_0_9_5)))
 (let ((?x49150 (+ (+ (- (- (* (* (- 2.0) l_0_9_16) l_0_9_4) ?x49137) ?x49145) ?x49147) ?x49149)))
 (= (+ ?x49150 ?x49151) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49172 (* ?x49086 l_0_9_69)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49170 (* ?x49083 l_0_9_68)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49168 (* ?x49077 l_0_9_67)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49166 (* ?x49165 l_0_9_6)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x37323 (* ?x48919 l_0_9_5)))
 (let ((?x49171 (+ (+ (- (- (* (* (- 2.0) l_0_9_22) l_0_9_4) ?x37323) ?x49166) ?x49168) ?x49170)))
 (= (+ ?x49171 ?x49172) 0.0)))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49204 (* ?x49086 l_0_9_76)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49202 (* ?x49083 l_0_9_75)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49200 (* ?x49077 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49198 (* ?x49197 l_0_9_6)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49195 (* ?x49194 l_0_9_5)))
 (let ((?x49203 (+ (+ (- (- (* (* (- 2.0) l_0_9_29) l_0_9_4) ?x49195) ?x49198) ?x49200) ?x49202)))
 (= (+ ?x49203 ?x49204) 0.0)))))))))))))
(assert
 (let ((?x50343 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x50340 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x50337 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49238 (* ?x49086 l_0_9_84)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49236 (* ?x49083 l_0_9_83)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49234 (* ?x49077 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49232 (* ?x49231 l_0_9_6)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49229 (* ?x49228 l_0_9_5)))
 (let ((?x49410 (* 2.0 l_0_9_37)))
 (let ((?x10161 (* ?x49410 l_0_9_4)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x26648 (* ?x48660 l_0_9_144)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x26649 (* ?x48657 l_0_9_143)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x38120 (* ?x48654 l_0_9_142)))
 (let ((?x38030 (+ (+ ?x38120 ?x26649) ?x26648)))
 (let ((?x50338 (- (+ (+ (+ (- (- (- ?x38030 ?x10161) ?x49229) ?x49232) ?x49234) ?x49236) ?x49238) ?x50337)))
 (= (- (- ?x50338 ?x50340) ?x50343) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x49272 (* l_0_9_9 l_0_9_9)))
 (let ((?x49270 (* l_0_9_8 l_0_9_8)))
 (let ((?x49268 (* l_0_9_7 l_0_9_7)))
 (let ((?x49266 (* l_0_9_55 l_0_9_55)))
 (let ((?x49264 (* l_0_9_54 l_0_9_54)))
 (let ((?x49262 (* l_0_9_53 l_0_9_53)))
 (let ((?x49265 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_52 l_0_9_52)) ?x49262) ?x49264)))
 (= (- (- (- (+ ?x49265 ?x49266) ?x49268) ?x49270) ?x49272) 0.0)))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49292 (* ?x49291 l_0_9_59)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49289 (* ?x49288 l_0_9_58)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49286 (* ?x49285 l_0_9_57)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x37362 (* ?x26137 l_0_9_56)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x37347 (* ?x49114 l_0_9_9)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x37364 (* ?x48791 l_0_9_8)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x37359 (* ?x48788 l_0_9_7)))
 (let ((?x37363 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_14) ?x37359) ?x37364) ?x37347) ?x37362)))
 (= (+ (+ (+ ?x37363 ?x49286) ?x49289) ?x49292) 0.0)))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49328 (* ?x49291 l_0_9_64)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49326 (* ?x49288 l_0_9_63)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49324 (* ?x49285 l_0_9_62)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49322 (* ?x26137 l_0_9_61)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49320 (* ?x48345 l_0_9_9)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49311 (* ?x48342 l_0_9_8)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x49307 (* ?x48339 l_0_9_7)))
 (let ((?x49323 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) ?x49307) ?x49311) ?x49320) ?x49322)))
 (= (+ (+ (+ ?x49323 ?x49324) ?x49326) ?x49328) 0.0)))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49368 (* ?x49291 l_0_9_70)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49366 (* ?x49288 l_0_9_69)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49364 (* ?x49285 l_0_9_68)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49362 (* ?x26137 l_0_9_67)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49360 (* ?x49165 l_0_9_9)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49358 (* ?x48919 l_0_9_8)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49356 (* ?x49355 l_0_9_7)))
 (let ((?x37353 (* (- 2.0) l_0_9_10)))
 (let ((?x49342 (* ?x37353 l_0_9_25)))
 (let ((?x50377 (+ (+ (+ (+ (- (- (- ?x49342 ?x49356) ?x49358) ?x49360) ?x49362) ?x49364) ?x49366) ?x49368)))
 (= ?x50377 0.0)))))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49393 (* ?x49291 l_0_9_77)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49391 (* ?x49288 l_0_9_76)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49389 (* ?x49285 l_0_9_75)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49387 (* ?x26137 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49385 (* ?x49197 l_0_9_9)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49383 (* ?x49194 l_0_9_8)))
 (let ((?x37428 (* 2.0 l_0_9_29)))
 (let ((?x49381 (* ?x37428 l_0_9_7)))
 (let ((?x49388 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_32) ?x49381) ?x49383) ?x49385) ?x49387)))
 (= (+ (+ (+ ?x49388 ?x49389) ?x49391) ?x49393) 0.0)))))))))))))))))
(assert
 (let ((?x50408 (* l_0_9_99 l_0_9_99)))
 (let ((?x50406 (* l_0_9_98 l_0_9_98)))
 (let ((?x50404 (* l_0_9_97 l_0_9_97)))
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49432 (* ?x49291 l_0_9_85)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49430 (* ?x49288 l_0_9_84)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49428 (* ?x49285 l_0_9_83)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49426 (* ?x26137 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49424 (* ?x49231 l_0_9_9)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49415 (* ?x49228 l_0_9_8)))
 (let ((?x49410 (* 2.0 l_0_9_37)))
 (let ((?x49412 (* ?x49410 l_0_9_7)))
 (let ((?x50395 (* l_0_9_145 l_0_9_145)))
 (let ((?x50393 (* l_0_9_144 l_0_9_144)))
 (let ((?x50391 (* l_0_9_143 l_0_9_143)))
 (let ((?x50389 (* l_0_9_142 l_0_9_142)))
 (let ((?x50390 (+ (- (* (* (- 2.0) l_0_9_10) l_0_9_40) (* l_0_9_100 l_0_9_100)) ?x50389)))
 (let ((?x50400 (+ (- (- (- (+ (+ (+ ?x50390 ?x50391) ?x50393) ?x50395) ?x49412) ?x49415) ?x49424) ?x49426)))
 (= (- (- (- (+ (+ (+ ?x50400 ?x49428) ?x49430) ?x49432) ?x50404) ?x50406) ?x50408) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x49456 (* l_0_9_60 l_0_9_60)))
 (let ((?x49454 (* l_0_9_59 l_0_9_59)))
 (let ((?x49452 (* l_0_9_58 l_0_9_58)))
 (let ((?x49450 (* l_0_9_57 l_0_9_57)))
 (let ((?x49448 (* l_0_9_56 l_0_9_56)))
 (let ((?x49446 (* l_0_9_15 l_0_9_15)))
 (let ((?x49444 (* l_0_9_14 l_0_9_14)))
 (let ((?x37464 (* l_0_9_13 l_0_9_13)))
 (let ((?x49445 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x37464) ?x49444)))
 (= (+ (+ (+ (+ (+ (- ?x49445 ?x49446) ?x49448) ?x49450) ?x49452) ?x49454) ?x49456) 0.0)))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49499 (* ?x49498 l_0_9_65)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49496 (* ?x49495 l_0_9_64)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49493 (* ?x49492 l_0_9_63)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49490 (* ?x49489 l_0_9_62)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49487 (* ?x49486 l_0_9_61)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49484 (* ?x49483 l_0_9_20)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49481 (* ?x49480 l_0_9_19)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49478 (* ?x49114 l_0_9_18)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49476 (* ?x48791 l_0_9_17)))
 (let ((?x49485 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_16) ?x49476) ?x49478) ?x49481) ?x49484)))
 (= (+ (+ (+ (+ (+ ?x49485 ?x49487) ?x49490) ?x49493) ?x49496) ?x49499) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49545 (* ?x49498 l_0_9_71)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49543 (* ?x49495 l_0_9_70)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49541 (* ?x49492 l_0_9_69)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49539 (* ?x49489 l_0_9_68)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49537 (* ?x49486 l_0_9_67)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49535 (* ?x49483 l_0_9_26)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49533 (* ?x49480 l_0_9_25)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49531 (* ?x49114 l_0_9_24)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49529 (* ?x48791 l_0_9_23)))
 (let ((?x49536 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_22) ?x49529) ?x49531) ?x49533) ?x49535)))
 (= (+ (+ (+ (+ (+ ?x49536 ?x49537) ?x49539) ?x49541) ?x49543) ?x49545) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49589 (* ?x49498 l_0_9_78)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49587 (* ?x49495 l_0_9_77)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49585 (* ?x49492 l_0_9_76)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49583 (* ?x49489 l_0_9_75)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49581 (* ?x49486 l_0_9_74)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49579 (* ?x49483 l_0_9_33)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49569 (* ?x49480 l_0_9_32)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x26350 (* ?x49114 l_0_9_31)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x26347 (* ?x48791 l_0_9_30)))
 (let ((?x49580 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_29) ?x26347) ?x26350) ?x49569) ?x49579)))
 (= (+ (+ (+ (+ (+ ?x49580 ?x49581) ?x49583) ?x49585) ?x49587) ?x49589) 0.0)))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49622 (* ?x49498 l_0_9_86)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49620 (* ?x49495 l_0_9_85)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49618 (* ?x49492 l_0_9_84)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49616 (* ?x49489 l_0_9_83)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49614 (* ?x49486 l_0_9_82)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49612 (* ?x49483 l_0_9_41)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x38100 (* ?x48722 l_0_9_149)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x26699 (* ?x48719 l_0_9_148)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x26696 (* ?x48716 l_0_9_147)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26690 (* ?x48713 l_0_9_146)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49610 (* ?x49480 l_0_9_40)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49608 (* ?x49114 l_0_9_39)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49606 (* ?x48791 l_0_9_38)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x38123 (* ?x48788 l_0_9_37)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x26650 (* ?x48779 l_0_9_99)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x38113 (* ?x48767 l_0_9_98)))
 (let ((?x38202 (* 2.0 l_0_9_101)))
 (let ((?x38203 (* ?x38202 l_0_9_97)))
 (let ((?x10185 (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_104) ?x38203) ?x38113) ?x26650)))
 (let ((?x38139 (+ (+ (+ (- (- (- (- ?x10185 ?x38123) ?x49606) ?x49608) ?x49610) ?x26690) ?x26696) ?x26699)))
 (let ((?x50429 (+ (+ (+ (+ (+ (- (+ ?x38139 ?x38100) ?x49612) ?x49614) ?x49616) ?x49618) ?x49620) ?x49622)))
 (= ?x50429 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49677 (* l_0_9_66 l_0_9_66)))
 (let ((?x49675 (* l_0_9_65 l_0_9_65)))
 (let ((?x49673 (* l_0_9_64 l_0_9_64)))
 (let ((?x49671 (* l_0_9_63 l_0_9_63)))
 (let ((?x49669 (* l_0_9_62 l_0_9_62)))
 (let ((?x49667 (* l_0_9_61 l_0_9_61)))
 (let ((?x49665 (* l_0_9_21 l_0_9_21)))
 (let ((?x49663 (* l_0_9_20 l_0_9_20)))
 (let ((?x49661 (* l_0_9_19 l_0_9_19)))
 (let ((?x49651 (* l_0_9_18 l_0_9_18)))
 (let ((?x49662 (- (- (- (* (- l_0_9_16) l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49651) ?x49661)))
 (let ((?x49676 (+ (+ (+ (+ (+ (- (- ?x49662 ?x49663) ?x49665) ?x49667) ?x49669) ?x49671) ?x49673) ?x49675)))
 (= (+ ?x49676 ?x49677) 0.0))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49721 (* ?x48392 l_0_9_72)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49719 (* ?x48389 l_0_9_71)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49717 (* ?x48386 l_0_9_70)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49715 (* ?x48383 l_0_9_69)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49713 (* ?x48380 l_0_9_68)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49711 (* ?x48377 l_0_9_67)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49709 (* ?x48354 l_0_9_27)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49707 (* ?x48351 l_0_9_26)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49705 (* ?x48348 l_0_9_25)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49703 (* ?x48345 l_0_9_24)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49701 (* ?x48342 l_0_9_23)))
 (let ((?x49708 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_22) ?x49701) ?x49703) ?x49705) ?x49707)))
 (let ((?x49722 (+ (+ (+ (+ (+ (+ (- ?x49708 ?x49709) ?x49711) ?x49713) ?x49715) ?x49717) ?x49719) ?x49721)))
 (= ?x49722 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49793 (* ?x48392 l_0_9_87)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49791 (* ?x48389 l_0_9_86)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49789 (* ?x48386 l_0_9_85)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49787 (* ?x48383 l_0_9_84)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49785 (* ?x48380 l_0_9_83)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49783 (* ?x48377 l_0_9_82)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49781 (* ?x48354 l_0_9_42)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49779 (* ?x48351 l_0_9_41)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49777 (* ?x48348 l_0_9_40)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49775 (* ?x48345 l_0_9_39)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49773 (* ?x48342 l_0_9_38)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x26719 (* ?x48339 l_0_9_37)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x48723 (* ?x48722 l_0_9_154)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x48720 (* ?x48719 l_0_9_153)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x48717 (* ?x48716 l_0_9_152)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x48714 (* ?x48713 l_0_9_151)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48711 (* ?x48485 l_0_9_99)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48709 (* ?x48482 l_0_9_98)))
 (let ((?x48316 (* 2.0 l_0_9_106)))
 (let ((?x48707 (* ?x48316 l_0_9_97)))
 (let ((?x48715 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_109) ?x48707) ?x48709) ?x48711) ?x48714)))
 (let ((?x48724 (+ (+ (+ ?x48715 ?x48717) ?x48720) ?x48723)))
 (let ((?x50475 (+ (- (- (- (- (- (- ?x48724 ?x26719) ?x49773) ?x49775) ?x49777) ?x49779) ?x49781) ?x49783)))
 (= (+ (+ (+ (+ (+ ?x50475 ?x49785) ?x49787) ?x49789) ?x49791) ?x49793) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49842 (* l_0_9_73 l_0_9_73)))
 (let ((?x49840 (* l_0_9_72 l_0_9_72)))
 (let ((?x49838 (* l_0_9_71 l_0_9_71)))
 (let ((?x49836 (* l_0_9_70 l_0_9_70)))
 (let ((?x49834 (* l_0_9_69 l_0_9_69)))
 (let ((?x49832 (* l_0_9_68 l_0_9_68)))
 (let ((?x49830 (* l_0_9_67 l_0_9_67)))
 (let ((?x49828 (* l_0_9_28 l_0_9_28)))
 (let ((?x49826 (* l_0_9_27 l_0_9_27)))
 (let ((?x49824 (* l_0_9_26 l_0_9_26)))
 (let ((?x37688 (* l_0_9_25 l_0_9_25)))
 (let ((?x37682 (* l_0_9_24 l_0_9_24)))
 (let ((?x49823 (- (- (- (* (- l_0_9_22) l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x37682) ?x37688)))
 (let ((?x49837 (+ (+ (+ (+ (- (- (- ?x49823 ?x49824) ?x49826) ?x49828) ?x49830) ?x49832) ?x49834) ?x49836)))
 (= (+ (+ (+ ?x49837 ?x49838) ?x49840) ?x49842) 0.0))))))))))))))))
(assert
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49905 (* ?x49904 l_0_9_80)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49902 (* ?x49901 l_0_9_79)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49899 (* ?x49898 l_0_9_78)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49896 (* ?x49895 l_0_9_77)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49893 (* ?x49892 l_0_9_76)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49890 (* ?x49889 l_0_9_75)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49887 (* ?x49886 l_0_9_74)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49884 (* ?x49883 l_0_9_35)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49881 (* ?x49880 l_0_9_34)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49878 (* ?x49877 l_0_9_33)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49875 (* ?x49874 l_0_9_32)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49872 (* ?x49165 l_0_9_31)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49870 (* ?x48919 l_0_9_30)))
 (let ((?x49879 (- (- (- (- (* (* (- 2.0) l_0_9_22) l_0_9_29) ?x49870) ?x49872) ?x49875) ?x49878)))
 (let ((?x49900 (+ (+ (+ (+ (+ (- (- ?x49879 ?x49881) ?x49884) ?x49887) ?x49890) ?x49893) ?x49896) ?x49899)))
 (= (+ (+ ?x49900 ?x49902) ?x49905) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49965 (* ?x49904 l_0_9_88)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49963 (* ?x49901 l_0_9_87)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49961 (* ?x49898 l_0_9_86)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49959 (* ?x49895 l_0_9_85)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49957 (* ?x49892 l_0_9_84)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49955 (* ?x49889 l_0_9_83)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49953 (* ?x49886 l_0_9_82)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49951 (* ?x49883 l_0_9_43)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49949 (* ?x49880 l_0_9_42)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49947 (* ?x49877 l_0_9_41)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49935 (* ?x49874 l_0_9_40)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49931 (* ?x49165 l_0_9_39)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49927 (* ?x48919 l_0_9_38)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49925 (* ?x49355 l_0_9_37)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x37837 (* ?x48722 l_0_9_160)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x37886 (* ?x48719 l_0_9_159)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x37877 (* ?x48716 l_0_9_158)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26488 (* ?x48713 l_0_9_157)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x9971 (* ?x37891 l_0_9_99)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x37880 (* ?x37873 l_0_9_98)))
 (let ((?x37865 (* 2.0 l_0_9_112)))
 (let ((?x37867 (* ?x37865 l_0_9_97)))
 (let ((?x50324 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_115) ?x37867) ?x37880) ?x9971) ?x26488)))
 (let ((?x50327 (+ (+ (+ ?x50324 ?x37877) ?x37886) ?x37837)))
 (let ((?x50492 (- (- (- (- (- (- (- ?x50327 ?x49925) ?x49927) ?x49931) ?x49935) ?x49947) ?x49949) ?x49951)))
 (let ((?x50501 (+ (+ (+ (+ (+ (+ (+ ?x50492 ?x49953) ?x49955) ?x49957) ?x49959) ?x49961) ?x49963) ?x49965)))
 (= ?x50501 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50013 (* l_0_9_81 l_0_9_81)))
 (let ((?x50011 (* l_0_9_80 l_0_9_80)))
 (let ((?x50009 (* l_0_9_79 l_0_9_79)))
 (let ((?x50007 (* l_0_9_78 l_0_9_78)))
 (let ((?x50005 (* l_0_9_77 l_0_9_77)))
 (let ((?x50003 (* l_0_9_76 l_0_9_76)))
 (let ((?x50001 (* l_0_9_75 l_0_9_75)))
 (let ((?x49999 (* l_0_9_74 l_0_9_74)))
 (let ((?x49997 (* l_0_9_36 l_0_9_36)))
 (let ((?x49995 (* l_0_9_35 l_0_9_35)))
 (let ((?x49993 (* l_0_9_34 l_0_9_34)))
 (let ((?x9919 (* l_0_9_33 l_0_9_33)))
 (let ((?x37757 (* l_0_9_32 l_0_9_32)))
 (let ((?x37786 (* l_0_9_31 l_0_9_31)))
 (let ((?x26438 (- (- (- (* (- l_0_9_29) l_0_9_29) (* l_0_9_30 l_0_9_30)) ?x37786) ?x37757)))
 (let ((?x50004 (+ (+ (+ (- (- (- (- ?x26438 ?x9919) ?x49993) ?x49995) ?x49997) ?x49999) ?x50001) ?x50003)))
 (= (+ (+ (+ (+ (+ ?x50004 ?x50005) ?x50007) ?x50009) ?x50011) ?x50013) 0.0))))))))))))))))))
(assert
 (let ((?x50083 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50080 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50077 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50074 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50071 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50068 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50065 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50062 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50059 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50056 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50053 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50050 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50047 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x50044 (* ?x49197 l_0_9_39)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x50042 (* ?x49194 l_0_9_38)))
 (let ((?x37428 (* 2.0 l_0_9_29)))
 (let ((?x50534 (* ?x37428 l_0_9_37)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50532 (* ?x48722 l_0_9_167)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50530 (* ?x48719 l_0_9_166)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50528 (* ?x48716 l_0_9_165)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50526 (* ?x48713 l_0_9_164)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x50524 (* ?x50523 l_0_9_99)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x50521 (* ?x50520 l_0_9_98)))
 (let ((?x26758 (* 2.0 l_0_9_119)))
 (let ((?x26752 (* ?x26758 l_0_9_97)))
 (let ((?x50527 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_122) ?x26752) ?x50521) ?x50524) ?x50526)))
 (let ((?x50533 (+ (+ (+ ?x50527 ?x50528) ?x50530) ?x50532)))
 (let ((?x50541 (- (- (- (- (- (- (- ?x50533 ?x50534) ?x50042) ?x50044) ?x50047) ?x50050) ?x50053) ?x50056)))
 (let ((?x50548 (+ (+ (+ (+ (+ (+ (- ?x50541 ?x50059) ?x50062) ?x50065) ?x50068) ?x50071) ?x50074) ?x50077)))
 (= (+ (+ ?x50548 ?x50080) ?x50083) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50162 (* l_0_9_90 l_0_9_90)))
 (let ((?x50160 (* l_0_9_89 l_0_9_89)))
 (let ((?x50158 (* l_0_9_88 l_0_9_88)))
 (let ((?x50156 (* l_0_9_87 l_0_9_87)))
 (let ((?x50154 (* l_0_9_86 l_0_9_86)))
 (let ((?x50152 (* l_0_9_85 l_0_9_85)))
 (let ((?x50150 (* l_0_9_84 l_0_9_84)))
 (let ((?x50148 (* l_0_9_83 l_0_9_83)))
 (let ((?x50146 (* l_0_9_82 l_0_9_82)))
 (let ((?x50144 (* l_0_9_45 l_0_9_45)))
 (let ((?x50142 (* l_0_9_44 l_0_9_44)))
 (let ((?x50140 (* l_0_9_43 l_0_9_43)))
 (let ((?x50138 (* l_0_9_42 l_0_9_42)))
 (let ((?x50125 (* l_0_9_41 l_0_9_41)))
 (let ((?x50122 (* l_0_9_40 l_0_9_40)))
 (let ((?x50118 (* l_0_9_39 l_0_9_39)))
 (let ((?x50114 (* l_0_9_38 l_0_9_38)))
 (let ((?x50166 (* l_0_9_37 l_0_9_37)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50602 (* ?x48722 l_0_9_175)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50600 (* ?x48719 l_0_9_174)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50598 (* ?x48716 l_0_9_173)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50596 (* ?x48713 l_0_9_172)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x50594 (* ?x50593 l_0_9_99)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x50591 (* ?x50590 l_0_9_98)))
 (let ((?x50587 (* 2.0 l_0_9_127)))
 (let ((?x50588 (* ?x50587 l_0_9_97)))
 (let ((?x50597 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_130) ?x50588) ?x50591) ?x50594) ?x50596)))
 (let ((?x50603 (+ (+ (+ ?x50597 ?x50598) ?x50600) ?x50602)))
 (let ((?x50610 (- (- (- (- (- (- (- ?x50603 ?x50166) ?x50114) ?x50118) ?x50122) ?x50125) ?x50138) ?x50140)))
 (let ((?x50617 (+ (+ (+ (+ (+ (- (- ?x50610 ?x50142) ?x50144) ?x50146) ?x50148) ?x50150) ?x50152) ?x50154)))
 (= (+ (+ (+ (+ ?x50617 ?x50156) ?x50158) ?x50160) ?x50162) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48323 (* ?x48322 l_0_9_47)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38340 (* ?x38342 l_0_9_227)))
 (let ((?x38352 (- (* (* 2.0 l_0_9_1) l_0_9_2) (* (* 2.0 l_0_9_182) l_0_9_184))))
 (let ((?x38216 (- (+ (- ?x38352 (* (* 2.0 l_0_9_183) l_0_9_185)) ?x38340) (* (* 2.0 l_0_9_272) l_0_9_274))))
 (= (- (- ?x38216 (* (* 2.0 l_0_9_273) l_0_9_275)) ?x48323) 0.0))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48375 (* ?x48322 l_0_9_49)))
 (let ((?x50653 (* l_0_9_276 l_0_9_276)))
 (let ((?x50651 (* l_0_9_275 l_0_9_275)))
 (let ((?x50649 (* l_0_9_274 l_0_9_274)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50647 (* ?x38342 l_0_9_229)))
 (let ((?x38204 (- (* (* 2.0 l_0_9_1) l_0_9_4) (* (* 1.0 l_0_9_184) l_0_9_184))))
 (let ((?x50646 (- (- ?x38204 (* (* 1.0 l_0_9_185) l_0_9_185)) (* (* 1.0 l_0_9_186) l_0_9_186))))
 (= (- (- (- (- (+ ?x50646 ?x50647) ?x50649) ?x50651) ?x50653) ?x48375) 0.0)))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48322 l_0_9_52)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38366 (* ?x38342 l_0_9_232)))
 (let ((?x10352 (- (* (* 2.0 l_0_9_1) l_0_9_7) (* (* 2.0 l_0_9_184) l_0_9_187))))
 (let ((?x4338 (- (- ?x10352 (* (* 2.0 l_0_9_185) l_0_9_188)) (* (* 2.0 l_0_9_186) l_0_9_189))))
 (let ((?x26914 (- (- (+ ?x4338 ?x38366) (* (* 2.0 l_0_9_274) l_0_9_277)) (* (* 2.0 l_0_9_275) l_0_9_278))))
 (= (- (- ?x26914 (* (* 2.0 l_0_9_276) l_0_9_279)) ?x48470) 0.0)))))))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50711 (* ?x50261 l_0_9_94)))
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48521 (* ?x48322 l_0_9_56)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50702 (* ?x38342 l_0_9_236)))
 (let ((?x50647 (* ?x38342 l_0_9_229)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x50693 (* ?x48319 l_0_9_139)))
 (let ((?x50696 (- (- (* (* 2.0 l_0_9_1) l_0_9_11) ?x50693) (* (* 2.0 l_0_9_184) l_0_9_191))))
 (let ((?x50700 (- (- ?x50696 (* (* 2.0 l_0_9_185) l_0_9_192)) (* (* 2.0 l_0_9_186) l_0_9_193))))
 (let ((?x50707 (- (- (+ (- ?x50700 ?x50647) ?x50702) (* (* 2.0 l_0_9_274) l_0_9_281)) (* (* 2.0 l_0_9_275) l_0_9_282))))
 (= (+ (- (- ?x50707 (* (* 2.0 l_0_9_276) l_0_9_283)) ?x48521) ?x50711) 0.0))))))))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x8189 (* ?x48322 l_0_9_61)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50747 (* ?x38342 l_0_9_241)))
 (let ((?x50742 (- (* (* 2.0 l_0_9_1) l_0_9_16) (* (* 2.0 l_0_9_184) l_0_9_196))))
 (let ((?x50746 (- (- ?x50742 (* (* 2.0 l_0_9_185) l_0_9_197)) (* (* 2.0 l_0_9_186) l_0_9_198))))
 (let ((?x50752 (- (- (+ ?x50746 ?x50747) (* (* 2.0 l_0_9_274) l_0_9_286)) (* (* 2.0 l_0_9_275) l_0_9_287))))
 (= (- (- ?x50752 (* (* 2.0 l_0_9_276) l_0_9_288)) ?x8189) 0.0)))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48577 (* ?x48322 l_0_9_67)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50790 (* ?x38342 l_0_9_247)))
 (let ((?x50785 (- (* (* 2.0 l_0_9_1) l_0_9_22) (* (* 2.0 l_0_9_184) l_0_9_202))))
 (let ((?x50789 (- (- ?x50785 (* (* 2.0 l_0_9_185) l_0_9_203)) (* (* 2.0 l_0_9_186) l_0_9_204))))
 (let ((?x50795 (- (- (+ ?x50789 ?x50790) (* (* 2.0 l_0_9_274) l_0_9_292)) (* (* 2.0 l_0_9_275) l_0_9_293))))
 (= (- (- ?x50795 (* (* 2.0 l_0_9_276) l_0_9_294)) ?x48577) 0.0)))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48587 (* ?x48322 l_0_9_74)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50833 (* ?x38342 l_0_9_254)))
 (let ((?x50828 (- (* (* 2.0 l_0_9_1) l_0_9_29) (* (* 2.0 l_0_9_184) l_0_9_209))))
 (let ((?x50832 (- (- ?x50828 (* (* 2.0 l_0_9_185) l_0_9_210)) (* (* 2.0 l_0_9_186) l_0_9_211))))
 (let ((?x50838 (- (- (+ ?x50832 ?x50833) (* (* 2.0 l_0_9_274) l_0_9_299)) (* (* 2.0 l_0_9_275) l_0_9_300))))
 (= (- (- ?x50838 (* (* 2.0 l_0_9_276) l_0_9_301)) ?x48587) 0.0)))))))))
(assert
 (let ((?x48322 (* 2.0 l_0_9_46)))
 (let ((?x48597 (* ?x48322 l_0_9_82)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38535 (* ?x38342 l_0_9_262)))
 (let ((?x38580 (- (* (* 2.0 l_0_9_1) l_0_9_37) (* (* 2.0 l_0_9_184) l_0_9_217))))
 (let ((?x10381 (- (- ?x38580 (* (* 2.0 l_0_9_185) l_0_9_218)) (* (* 2.0 l_0_9_186) l_0_9_219))))
 (let ((?x38564 (- (- (+ ?x10381 ?x38535) (* (* 2.0 l_0_9_274) l_0_9_307)) (* (* 2.0 l_0_9_275) l_0_9_308))))
 (= (- (- ?x38564 (* (* 2.0 l_0_9_276) l_0_9_309)) ?x48597) 0.0)))))))))
(assert
 (let ((?x48626 (* l_0_9_48 l_0_9_48)))
 (let ((?x48624 (* l_0_9_47 l_0_9_47)))
 (let ((?x48622 (* l_0_9_3 l_0_9_3)))
 (let ((?x50867 (* l_0_9_228 l_0_9_228)))
 (let ((?x50869 (+ (+ (+ (* l_0_9_2 l_0_9_2) (* l_0_9_227 l_0_9_227)) ?x50867) ?x48622)))
 (= (- (- ?x50869 ?x48624) ?x48626) 0.0)))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48673 (* ?x48672 l_0_9_50)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48670 (* ?x48669 l_0_9_49)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48667 (* ?x48666 l_0_9_5)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50881 (* ?x50880 l_0_9_230)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50878 (* ?x50877 l_0_9_229)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48664 (* ?x48663 l_0_9_4)))
 (= (- (- (+ (+ (+ ?x48664 ?x50878) ?x50881) ?x48667) ?x48670) ?x48673) 0.0))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48731 (* ?x48672 l_0_9_53)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48729 (* ?x48669 l_0_9_52)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48727 (* ?x48666 l_0_9_8)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50900 (* ?x50880 l_0_9_233)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50898 (* ?x50877 l_0_9_232)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48725 (* ?x48663 l_0_9_7)))
 (= (- (- (+ (+ (+ ?x48725 ?x50898) ?x50900) ?x48727) ?x48729) ?x48731) 0.0))))))))))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x50927 (* ?x37999 l_0_9_95)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x50925 (* ?x37954 l_0_9_94)))
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48811 (* ?x48672 l_0_9_57)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48809 (* ?x48669 l_0_9_56)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50921 (* ?x50880 l_0_9_237)))
 (let ((?x50881 (* ?x50880 l_0_9_230)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50918 (* ?x50877 l_0_9_236)))
 (let ((?x50878 (* ?x50877 l_0_9_229)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x50915 (* ?x48617 l_0_9_140)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x50913 (* ?x48614 l_0_9_139)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x48792 (* ?x48791 l_0_9_3)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x48789 (* ?x48788 l_0_9_2)))
 (let ((?x50922 (+ (- (+ (- (- (- (+ ?x48789 ?x48792) ?x50913) ?x50915) ?x50878) ?x50918) ?x50881) ?x50921)))
 (= (+ (+ (- (- ?x50922 ?x48809) ?x48811) ?x50925) ?x50927) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48869 (* ?x48672 l_0_9_62)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48867 (* ?x48669 l_0_9_61)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x38767 (* ?x50880 l_0_9_242)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x38761 (* ?x50877 l_0_9_241)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x48865 (* ?x48342 l_0_9_3)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x48863 (* ?x48339 l_0_9_2)))
 (= (- (- (+ (+ (+ ?x48863 ?x48865) ?x38761) ?x38767) ?x48867) ?x48869) 0.0))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48924 (* ?x48672 l_0_9_68)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48922 (* ?x48669 l_0_9_67)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x48920 (* ?x48919 l_0_9_3)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x38775 (* ?x50880 l_0_9_248)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x38698 (* ?x50877 l_0_9_247)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48917 (* ?x48663 l_0_9_22)))
 (= (- (- (+ (+ (+ ?x48917 ?x38698) ?x38775) ?x48920) ?x48922) ?x48924) 0.0))))))))))))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50711 (* ?x50261 l_0_9_94)))
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x48971 (* ?x48672 l_0_9_75)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x48969 (* ?x48669 l_0_9_74)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x48967 (* ?x48666 l_0_9_30)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50949 (* ?x50880 l_0_9_255)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50947 (* ?x50877 l_0_9_254)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x48965 (* ?x48663 l_0_9_29)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x50693 (* ?x48319 l_0_9_139)))
 (let ((?x50954 (- (- (- (+ (+ (+ (+ ?x50693 ?x48965) ?x50947) ?x50949) ?x48967) ?x48969) ?x48971) ?x50711)))
 (= ?x50954 0.0)))))))))))))))))))
(assert
 (let ((?x48672 (* 2.0 l_0_9_48)))
 (let ((?x49006 (* ?x48672 l_0_9_83)))
 (let ((?x48669 (* 2.0 l_0_9_47)))
 (let ((?x49004 (* ?x48669 l_0_9_82)))
 (let ((?x48666 (* 2.0 l_0_9_3)))
 (let ((?x49002 (* ?x48666 l_0_9_38)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50973 (* ?x50880 l_0_9_263)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50971 (* ?x50877 l_0_9_262)))
 (let ((?x48663 (* 2.0 l_0_9_2)))
 (let ((?x49000 (* ?x48663 l_0_9_37)))
 (= (- (- (+ (+ (+ ?x49000 ?x50971) ?x50973) ?x49002) ?x49004) ?x49006) 0.0))))))))))))))
(assert
 (let ((?x49062 (* l_0_9_6 l_0_9_6)))
 (let ((?x49060 (* l_0_9_51 l_0_9_51)))
 (let ((?x49058 (* l_0_9_50 l_0_9_50)))
 (let ((?x49056 (* l_0_9_5 l_0_9_5)))
 (let ((?x37256 (* l_0_9_49 l_0_9_49)))
 (let ((?x37301 (* l_0_9_4 l_0_9_4)))
 (let ((?x50991 (* l_0_9_231 l_0_9_231)))
 (let ((?x50993 (+ (+ (+ (* l_0_9_229 l_0_9_229) (* l_0_9_230 l_0_9_230)) ?x50991) ?x37301)))
 (= (+ (- (- (+ (- ?x50993 ?x37256) ?x49056) ?x49058) ?x49060) ?x49062) 0.0))))))))))
(assert
 (let ((?x49090 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49087 (* ?x49086 l_0_9_54)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49084 (* ?x49083 l_0_9_53)))
 (let ((?x49081 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49078 (* ?x49077 l_0_9_52)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51022 (* ?x51021 l_0_9_234)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51019 (* ?x51018 l_0_9_233)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51017 (* ?x51011 l_0_9_232)))
 (let ((?x51027 (- (+ (+ (+ ?x51017 ?x51019) ?x51022) (* (* 2.0 l_0_9_4) l_0_9_7)) ?x49078)))
 (= (+ (- (- (+ ?x51027 ?x49081) ?x49084) ?x49087) ?x49090) 0.0)))))))))))))))))
(assert
 (let ((?x51072 (* l_0_9_96 l_0_9_96)))
 (let ((?x51070 (* l_0_9_95 l_0_9_95)))
 (let ((?x51068 (* l_0_9_94 l_0_9_94)))
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49121 (* ?x49086 l_0_9_58)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49119 (* ?x49083 l_0_9_57)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49117 (* ?x49077 l_0_9_56)))
 (let ((?x50991 (* l_0_9_231 l_0_9_231)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51062 (* ?x51021 l_0_9_238)))
 (let ((?x50989 (* l_0_9_230 l_0_9_230)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51059 (* ?x51018 l_0_9_237)))
 (let ((?x39056 (* l_0_9_229 l_0_9_229)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51056 (* ?x51011 l_0_9_236)))
 (let ((?x51054 (* l_0_9_141 l_0_9_141)))
 (let ((?x51052 (* l_0_9_140 l_0_9_140)))
 (let ((?x51050 (* l_0_9_139 l_0_9_139)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49115 (* ?x49114 l_0_9_6)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49112 (* ?x48791 l_0_9_5)))
 (let ((?x51053 (- (- (+ (+ (* (* 2.0 l_0_9_11) l_0_9_4) ?x49112) ?x49115) ?x51050) ?x51052)))
 (let ((?x51064 (- (+ (- (+ (- (+ (- ?x51053 ?x51054) ?x51056) ?x39056) ?x51059) ?x50989) ?x51062) ?x50991)))
 (= (+ (+ (+ (- (- (- ?x51064 ?x49117) ?x49119) ?x49121) ?x51068) ?x51070) ?x51072) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49151 (* ?x49086 l_0_9_63)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49149 (* ?x49083 l_0_9_62)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49147 (* ?x49077 l_0_9_61)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51097 (* ?x51021 l_0_9_243)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51095 (* ?x51018 l_0_9_242)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51093 (* ?x51011 l_0_9_241)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49145 (* ?x48345 l_0_9_6)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49137 (* ?x48342 l_0_9_5)))
 (let ((?x51096 (+ (+ (+ (+ (* (* 2.0 l_0_9_16) l_0_9_4) ?x49137) ?x49145) ?x51093) ?x51095)))
 (= (- (- (- (+ ?x51096 ?x51097) ?x49147) ?x49149) ?x49151) 0.0)))))))))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49172 (* ?x49086 l_0_9_69)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49170 (* ?x49083 l_0_9_68)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49168 (* ?x49077 l_0_9_67)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49166 (* ?x49165 l_0_9_6)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51121 (* ?x51021 l_0_9_249)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51119 (* ?x51018 l_0_9_248)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x37323 (* ?x48919 l_0_9_5)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51116 (* ?x51011 l_0_9_247)))
 (let ((?x51122 (+ (+ (+ (+ (* (* 2.0 l_0_9_22) l_0_9_4) ?x51116) ?x37323) ?x51119) ?x51121)))
 (= (- (- (- (+ ?x51122 ?x49166) ?x49168) ?x49170) ?x49172) 0.0)))))))))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49204 (* ?x49086 l_0_9_76)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49202 (* ?x49083 l_0_9_75)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49200 (* ?x49077 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49198 (* ?x49197 l_0_9_6)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49195 (* ?x49194 l_0_9_5)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51144 (* ?x51021 l_0_9_256)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51142 (* ?x51018 l_0_9_255)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51141 (* ?x51011 l_0_9_254)))
 (let ((?x51148 (+ (+ (+ (+ ?x51141 ?x51142) ?x51144) (* (* 2.0 l_0_9_29) l_0_9_4)) ?x49195)))
 (= (- (- (- (+ ?x51148 ?x49198) ?x49200) ?x49202) ?x49204) 0.0)))))))))))))))))))
(assert
 (let ((?x49086 (* 2.0 l_0_9_51)))
 (let ((?x49238 (* ?x49086 l_0_9_84)))
 (let ((?x49083 (* 2.0 l_0_9_50)))
 (let ((?x49236 (* ?x49083 l_0_9_83)))
 (let ((?x49077 (* 2.0 l_0_9_49)))
 (let ((?x49234 (* ?x49077 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49232 (* ?x49231 l_0_9_6)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49229 (* ?x49228 l_0_9_5)))
 (let ((?x49410 (* 2.0 l_0_9_37)))
 (let ((?x10161 (* ?x49410 l_0_9_4)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51170 (* ?x51021 l_0_9_264)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51168 (* ?x51018 l_0_9_263)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51167 (* ?x51011 l_0_9_262)))
 (let ((?x51176 (- (- (+ (+ (+ (+ (+ ?x51167 ?x51168) ?x51170) ?x10161) ?x49229) ?x49232) ?x49234) ?x49236)))
 (= (- ?x51176 ?x49238) 0.0)))))))))))))))))))))
(assert
 (let ((?x49272 (* l_0_9_9 l_0_9_9)))
 (let ((?x49270 (* l_0_9_8 l_0_9_8)))
 (let ((?x49268 (* l_0_9_7 l_0_9_7)))
 (let ((?x49266 (* l_0_9_55 l_0_9_55)))
 (let ((?x49264 (* l_0_9_54 l_0_9_54)))
 (let ((?x49262 (* l_0_9_53 l_0_9_53)))
 (let ((?x49254 (* l_0_9_52 l_0_9_52)))
 (let ((?x51196 (* l_0_9_235 l_0_9_235)))
 (let ((?x51194 (* l_0_9_234 l_0_9_234)))
 (let ((?x51192 (* l_0_9_233 l_0_9_233)))
 (let ((?x51195 (+ (+ (+ (* l_0_9_10 l_0_9_10) (* l_0_9_232 l_0_9_232)) ?x51192) ?x51194)))
 (let ((?x51203 (+ (+ (- (- (- (- (+ ?x51195 ?x51196) ?x49254) ?x49262) ?x49264) ?x49266) ?x49268) ?x49270)))
 (= (+ ?x51203 ?x49272) 0.0))))))))))))))
(assert
 (let ((?x50343 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x50340 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x50337 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49292 (* ?x49291 l_0_9_59)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49289 (* ?x49288 l_0_9_58)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49286 (* ?x49285 l_0_9_57)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x37362 (* ?x26137 l_0_9_56)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x51234 (* ?x50211 l_0_9_239)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x51232 (* ?x50208 l_0_9_238)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x51230 (* ?x50205 l_0_9_237)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x51228 (* ?x50202 l_0_9_236)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51022 (* ?x51021 l_0_9_234)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51019 (* ?x51018 l_0_9_233)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51017 (* ?x51011 l_0_9_232)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x26648 (* ?x48660 l_0_9_144)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x26649 (* ?x48657 l_0_9_143)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x38120 (* ?x48654 l_0_9_142)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x37347 (* ?x49114 l_0_9_9)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x37364 (* ?x48791 l_0_9_8)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x37359 (* ?x48788 l_0_9_7)))
 (let ((?x51222 (- (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_14) ?x37359) ?x37364) ?x37347) ?x38120)))
 (let ((?x51231 (+ (+ (- (- (- (- (- ?x51222 ?x26649) ?x26648) ?x51017) ?x51019) ?x51022) ?x51228) ?x51230)))
 (let ((?x51240 (+ (- (- (- (- (+ (+ ?x51231 ?x51232) ?x51234) ?x37362) ?x49286) ?x49289) ?x49292) ?x50337)))
 (= (+ (+ ?x51240 ?x50340) ?x50343) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49328 (* ?x49291 l_0_9_64)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49326 (* ?x49288 l_0_9_63)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49324 (* ?x49285 l_0_9_62)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49322 (* ?x26137 l_0_9_61)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x27937 (* ?x50211 l_0_9_244)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x39109 (* ?x50208 l_0_9_243)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x27912 (* ?x50205 l_0_9_242)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x39104 (* ?x50202 l_0_9_241)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49320 (* ?x48345 l_0_9_9)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49311 (* ?x48342 l_0_9_8)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x49307 (* ?x48339 l_0_9_7)))
 (let ((?x27868 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_19) ?x49307) ?x49311) ?x49320) ?x39104)))
 (let ((?x39128 (- (- (- (- (+ (+ (+ ?x27868 ?x27912) ?x39109) ?x27937) ?x49322) ?x49324) ?x49326) ?x49328)))
 (= ?x39128 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49393 (* ?x49291 l_0_9_77)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49391 (* ?x49288 l_0_9_76)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49389 (* ?x49285 l_0_9_75)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49387 (* ?x26137 l_0_9_74)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x49385 (* ?x49197 l_0_9_9)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x49383 (* ?x49194 l_0_9_8)))
 (let ((?x37428 (* 2.0 l_0_9_29)))
 (let ((?x49381 (* ?x37428 l_0_9_7)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x39184 (* ?x50211 l_0_9_257)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x39180 (* ?x50208 l_0_9_256)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x39175 (* ?x50205 l_0_9_255)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x39297 (* ?x50202 l_0_9_254)))
 (let ((?x11214 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_32) ?x39297) ?x39175) ?x39180) ?x39184)))
 (let ((?x39133 (- (- (- (- (+ (+ (+ ?x11214 ?x49381) ?x49383) ?x49385) ?x49387) ?x49389) ?x49391) ?x49393)))
 (= ?x39133 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49291 (* 2.0 l_0_9_55)))
 (let ((?x49432 (* ?x49291 l_0_9_85)))
 (let ((?x49288 (* 2.0 l_0_9_54)))
 (let ((?x49430 (* ?x49288 l_0_9_84)))
 (let ((?x49285 (* 2.0 l_0_9_53)))
 (let ((?x49428 (* ?x49285 l_0_9_83)))
 (let ((?x26137 (* 2.0 l_0_9_52)))
 (let ((?x49426 (* ?x26137 l_0_9_82)))
 (let ((?x49231 (* 2.0 l_0_9_39)))
 (let ((?x49424 (* ?x49231 l_0_9_9)))
 (let ((?x49228 (* 2.0 l_0_9_38)))
 (let ((?x49415 (* ?x49228 l_0_9_8)))
 (let ((?x49410 (* 2.0 l_0_9_37)))
 (let ((?x49412 (* ?x49410 l_0_9_7)))
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x51266 (* ?x50211 l_0_9_265)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x51264 (* ?x50208 l_0_9_264)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x51262 (* ?x50205 l_0_9_263)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x51260 (* ?x50202 l_0_9_262)))
 (let ((?x51267 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_40) ?x51260) ?x51262) ?x51264) ?x51266)))
 (let ((?x51274 (- (- (- (- (+ (+ (+ ?x51267 ?x49412) ?x49415) ?x49424) ?x49426) ?x49428) ?x49430) ?x49432)))
 (= ?x51274 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49456 (* l_0_9_60 l_0_9_60)))
 (let ((?x49454 (* l_0_9_59 l_0_9_59)))
 (let ((?x49452 (* l_0_9_58 l_0_9_58)))
 (let ((?x49450 (* l_0_9_57 l_0_9_57)))
 (let ((?x49448 (* l_0_9_56 l_0_9_56)))
 (let ((?x51319 (* l_0_9_240 l_0_9_240)))
 (let ((?x51317 (* l_0_9_239 l_0_9_239)))
 (let ((?x51315 (* l_0_9_238 l_0_9_238)))
 (let ((?x51313 (* l_0_9_237 l_0_9_237)))
 (let ((?x51311 (* l_0_9_236 l_0_9_236)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51062 (* ?x51021 l_0_9_238)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51059 (* ?x51018 l_0_9_237)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51056 (* ?x51011 l_0_9_236)))
 (let ((?x49446 (* l_0_9_15 l_0_9_15)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51305 (* ?x48660 l_0_9_148)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51303 (* ?x48657 l_0_9_147)))
 (let ((?x49444 (* l_0_9_14 l_0_9_14)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51300 (* ?x48654 l_0_9_146)))
 (let ((?x37464 (* l_0_9_13 l_0_9_13)))
 (let ((?x37519 (* l_0_9_12 l_0_9_12)))
 (let ((?x49460 (* l_0_9_11 l_0_9_11)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x51295 (* ?x48779 l_0_9_96)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x51293 (* ?x48767 l_0_9_95)))
 (let ((?x51298 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_94) ?x51293) ?x51295) ?x49460) ?x37519)))
 (let ((?x51308 (- (+ (- (- (+ (- (+ ?x51298 ?x37464) ?x51300) ?x49444) ?x51303) ?x51305) ?x49446) ?x51056)))
 (let ((?x51320 (+ (+ (+ (+ (+ (- (- ?x51308 ?x51059) ?x51062) ?x51311) ?x51313) ?x51315) ?x51317) ?x51319)))
 (= (- (- (- (- (- ?x51320 ?x49448) ?x49450) ?x49452) ?x49454) ?x49456) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49499 (* ?x49498 l_0_9_65)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49496 (* ?x49495 l_0_9_64)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49493 (* ?x49492 l_0_9_63)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49490 (* ?x49489 l_0_9_62)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49487 (* ?x49486 l_0_9_61)))
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51385 (* ?x51384 l_0_9_245)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51382 (* ?x51381 l_0_9_244)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51379 (* ?x51378 l_0_9_243)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51376 (* ?x51375 l_0_9_242)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51373 (* ?x51372 l_0_9_241)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51097 (* ?x51021 l_0_9_243)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51095 (* ?x51018 l_0_9_242)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51093 (* ?x51011 l_0_9_241)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49484 (* ?x49483 l_0_9_20)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x48661 (* ?x48660 l_0_9_153)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x48658 (* ?x48657 l_0_9_152)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49481 (* ?x49480 l_0_9_19)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x48655 (* ?x48654 l_0_9_151)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49478 (* ?x49114 l_0_9_18)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49476 (* ?x48791 l_0_9_17)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48652 (* ?x48485 l_0_9_96)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48650 (* ?x48482 l_0_9_95)))
 (let ((?x51361 (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_94) ?x48650) ?x48652) (* (* 2.0 l_0_9_11) l_0_9_16))))
 (let ((?x51368 (+ (- (- (+ (- (+ (+ ?x51361 ?x49476) ?x49478) ?x48655) ?x49481) ?x48658) ?x48661) ?x49484)))
 (let ((?x51383 (+ (+ (+ (+ (- (- (- ?x51368 ?x51093) ?x51095) ?x51097) ?x51373) ?x51376) ?x51379) ?x51382)))
 (= (- (- (- (- (- (+ ?x51383 ?x51385) ?x49487) ?x49490) ?x49493) ?x49496) ?x49499) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49545 (* ?x49498 l_0_9_71)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49543 (* ?x49495 l_0_9_70)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49541 (* ?x49492 l_0_9_69)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49539 (* ?x49489 l_0_9_68)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49537 (* ?x49486 l_0_9_67)))
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51412 (* ?x51384 l_0_9_251)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x39348 (* ?x51381 l_0_9_250)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x11776 (* ?x51378 l_0_9_249)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x11785 (* ?x51375 l_0_9_248)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x39292 (* ?x51372 l_0_9_247)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51121 (* ?x51021 l_0_9_249)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51119 (* ?x51018 l_0_9_248)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51116 (* ?x51011 l_0_9_247)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49535 (* ?x49483 l_0_9_26)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x11478 (* ?x48660 l_0_9_159)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x11466 (* ?x48657 l_0_9_158)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49533 (* ?x49480 l_0_9_25)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x11442 (* ?x48654 l_0_9_157)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49531 (* ?x49114 l_0_9_24)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49529 (* ?x48791 l_0_9_23)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x39351 (* ?x37891 l_0_9_96)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x39347 (* ?x37873 l_0_9_95)))
 (let ((?x39345 (+ (* (* 2.0 l_0_9_11) l_0_9_22) (* (* 2.0 l_0_9_112) l_0_9_94))))
 (let ((?x11472 (- (+ (- (+ (+ (+ (+ ?x39345 ?x39347) ?x39351) ?x49529) ?x49531) ?x11442) ?x49533) ?x11466)))
 (let ((?x11773 (+ (+ (- (- (- (+ (- ?x11472 ?x11478) ?x49535) ?x51116) ?x51119) ?x51121) ?x39292) ?x11785)))
 (let ((?x51417 (- (- (- (- (+ (+ (+ ?x11773 ?x11776) ?x39348) ?x51412) ?x49537) ?x49539) ?x49541) ?x49543)))
 (= (- ?x51417 ?x49545) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49589 (* ?x49498 l_0_9_78)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49587 (* ?x49495 l_0_9_77)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49585 (* ?x49492 l_0_9_76)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49583 (* ?x49489 l_0_9_75)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49581 (* ?x49486 l_0_9_74)))
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51454 (* ?x51384 l_0_9_258)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51452 (* ?x51381 l_0_9_257)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51450 (* ?x51378 l_0_9_256)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51448 (* ?x51375 l_0_9_255)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51446 (* ?x51372 l_0_9_254)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51144 (* ?x51021 l_0_9_256)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51142 (* ?x51018 l_0_9_255)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51141 (* ?x51011 l_0_9_254)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49579 (* ?x49483 l_0_9_33)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x28273 (* ?x48660 l_0_9_166)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x39476 (* ?x48657 l_0_9_165)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49569 (* ?x49480 l_0_9_32)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x39475 (* ?x48654 l_0_9_164)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x26350 (* ?x49114 l_0_9_31)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x39463 (* ?x50523 l_0_9_96)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x39477 (* ?x50520 l_0_9_95)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x26347 (* ?x48791 l_0_9_30)))
 (let ((?x39564 (+ (* (* 2.0 l_0_9_11) l_0_9_29) (* (* 2.0 l_0_9_119) l_0_9_94))))
 (let ((?x11895 (- (+ (- (+ (+ (+ (+ ?x39564 ?x26347) ?x39477) ?x39463) ?x26350) ?x39475) ?x49569) ?x39476)))
 (let ((?x51449 (+ (+ (- (- (- (+ (- ?x11895 ?x28273) ?x49579) ?x51141) ?x51142) ?x51144) ?x51446) ?x51448)))
 (let ((?x51459 (- (- (- (- (+ (+ (+ ?x51449 ?x51450) ?x51452) ?x51454) ?x49581) ?x49583) ?x49585) ?x49587)))
 (= (- ?x51459 ?x49589) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49498 (* 2.0 l_0_9_60)))
 (let ((?x49622 (* ?x49498 l_0_9_86)))
 (let ((?x49495 (* 2.0 l_0_9_59)))
 (let ((?x49620 (* ?x49495 l_0_9_85)))
 (let ((?x49492 (* 2.0 l_0_9_58)))
 (let ((?x49618 (* ?x49492 l_0_9_84)))
 (let ((?x49489 (* 2.0 l_0_9_57)))
 (let ((?x49616 (* ?x49489 l_0_9_83)))
 (let ((?x49486 (* 2.0 l_0_9_56)))
 (let ((?x49614 (* ?x49486 l_0_9_82)))
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51546 (* ?x51384 l_0_9_266)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51544 (* ?x51381 l_0_9_265)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51542 (* ?x51378 l_0_9_264)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51540 (* ?x51375 l_0_9_263)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51538 (* ?x51372 l_0_9_262)))
 (let ((?x51021 (* 2.0 l_0_9_231)))
 (let ((?x51170 (* ?x51021 l_0_9_264)))
 (let ((?x51018 (* 2.0 l_0_9_230)))
 (let ((?x51168 (* ?x51018 l_0_9_263)))
 (let ((?x51011 (* 2.0 l_0_9_229)))
 (let ((?x51167 (* ?x51011 l_0_9_262)))
 (let ((?x49483 (* 2.0 l_0_9_15)))
 (let ((?x49612 (* ?x49483 l_0_9_41)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51532 (* ?x48660 l_0_9_174)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51530 (* ?x48657 l_0_9_173)))
 (let ((?x49480 (* 2.0 l_0_9_14)))
 (let ((?x49610 (* ?x49480 l_0_9_40)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51527 (* ?x48654 l_0_9_172)))
 (let ((?x49114 (* 2.0 l_0_9_13)))
 (let ((?x49608 (* ?x49114 l_0_9_39)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x51524 (* ?x50593 l_0_9_96)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x51522 (* ?x50590 l_0_9_95)))
 (let ((?x48791 (* 2.0 l_0_9_12)))
 (let ((?x49606 (* ?x48791 l_0_9_38)))
 (let ((?x48788 (* 2.0 l_0_9_11)))
 (let ((?x38123 (* ?x48788 l_0_9_37)))
 (let ((?x51525 (+ (+ (+ (+ ?x38123 ?x49606) (* (* 2.0 l_0_9_127) l_0_9_94)) ?x51522) ?x51524)))
 (let ((?x51535 (- (+ (- (- (+ (- (+ ?x51525 ?x49608) ?x51527) ?x49610) ?x51530) ?x51532) ?x49612) ?x51167)))
 (let ((?x51547 (+ (+ (+ (+ (+ (- (- ?x51535 ?x51168) ?x51170) ?x51538) ?x51540) ?x51542) ?x51544) ?x51546)))
 (= (- (- (- (- (- ?x51547 ?x49614) ?x49616) ?x49618) ?x49620) ?x49622) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49677 (* l_0_9_66 l_0_9_66)))
 (let ((?x49675 (* l_0_9_65 l_0_9_65)))
 (let ((?x49673 (* l_0_9_64 l_0_9_64)))
 (let ((?x49671 (* l_0_9_63 l_0_9_63)))
 (let ((?x49669 (* l_0_9_62 l_0_9_62)))
 (let ((?x49667 (* l_0_9_61 l_0_9_61)))
 (let ((?x51629 (* l_0_9_246 l_0_9_246)))
 (let ((?x51627 (* l_0_9_245 l_0_9_245)))
 (let ((?x51625 (* l_0_9_244 l_0_9_244)))
 (let ((?x51623 (* l_0_9_243 l_0_9_243)))
 (let ((?x51621 (* l_0_9_242 l_0_9_242)))
 (let ((?x51619 (* l_0_9_241 l_0_9_241)))
 (let ((?x49665 (* l_0_9_21 l_0_9_21)))
 (let ((?x49663 (* l_0_9_20 l_0_9_20)))
 (let ((?x49661 (* l_0_9_19 l_0_9_19)))
 (let ((?x49651 (* l_0_9_18 l_0_9_18)))
 (let ((?x51616 (+ (+ (+ (* l_0_9_16 l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49651) ?x49661)))
 (let ((?x51628 (+ (+ (+ (+ (+ (+ (+ ?x51616 ?x49663) ?x49665) ?x51619) ?x51621) ?x51623) ?x51625) ?x51627)))
 (let ((?x51636 (- (- (- (- (- (- (+ ?x51628 ?x51629) ?x49667) ?x49669) ?x49671) ?x49673) ?x49675) ?x49677)))
 (= ?x51636 0.0)))))))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49721 (* ?x48392 l_0_9_72)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49719 (* ?x48389 l_0_9_71)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49717 (* ?x48386 l_0_9_70)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49715 (* ?x48383 l_0_9_69)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49713 (* ?x48380 l_0_9_68)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49711 (* ?x48377 l_0_9_67)))
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x51668 (* ?x48372 l_0_9_252)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x51666 (* ?x48369 l_0_9_251)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x51664 (* ?x48366 l_0_9_250)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x51662 (* ?x48363 l_0_9_249)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x51660 (* ?x48360 l_0_9_248)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x51658 (* ?x48357 l_0_9_247)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49709 (* ?x48354 l_0_9_27)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49707 (* ?x48351 l_0_9_26)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49705 (* ?x48348 l_0_9_25)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49703 (* ?x48345 l_0_9_24)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49701 (* ?x48342 l_0_9_23)))
 (let ((?x51656 (+ (+ (+ (+ (* (* 2.0 l_0_9_16) l_0_9_22) ?x49701) ?x49703) ?x49705) ?x49707)))
 (let ((?x51669 (+ (+ (+ (+ (+ (+ (+ ?x51656 ?x49709) ?x51658) ?x51660) ?x51662) ?x51664) ?x51666) ?x51668)))
 (= (- (- (- (- (- (- ?x51669 ?x49711) ?x49713) ?x49715) ?x49717) ?x49719) ?x49721) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48392 (* 2.0 l_0_9_66)))
 (let ((?x49793 (* ?x48392 l_0_9_87)))
 (let ((?x48389 (* 2.0 l_0_9_65)))
 (let ((?x49791 (* ?x48389 l_0_9_86)))
 (let ((?x48386 (* 2.0 l_0_9_64)))
 (let ((?x49789 (* ?x48386 l_0_9_85)))
 (let ((?x48383 (* 2.0 l_0_9_63)))
 (let ((?x49787 (* ?x48383 l_0_9_84)))
 (let ((?x48380 (* 2.0 l_0_9_62)))
 (let ((?x49785 (* ?x48380 l_0_9_83)))
 (let ((?x48377 (* 2.0 l_0_9_61)))
 (let ((?x49783 (* ?x48377 l_0_9_82)))
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x51722 (* ?x48372 l_0_9_267)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x51720 (* ?x48369 l_0_9_266)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x51718 (* ?x48366 l_0_9_265)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x51716 (* ?x48363 l_0_9_264)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x51714 (* ?x48360 l_0_9_263)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x51712 (* ?x48357 l_0_9_262)))
 (let ((?x48354 (* 2.0 l_0_9_21)))
 (let ((?x49781 (* ?x48354 l_0_9_42)))
 (let ((?x48351 (* 2.0 l_0_9_20)))
 (let ((?x49779 (* ?x48351 l_0_9_41)))
 (let ((?x48348 (* 2.0 l_0_9_19)))
 (let ((?x49777 (* ?x48348 l_0_9_40)))
 (let ((?x48345 (* 2.0 l_0_9_18)))
 (let ((?x49775 (* ?x48345 l_0_9_39)))
 (let ((?x48342 (* 2.0 l_0_9_17)))
 (let ((?x49773 (* ?x48342 l_0_9_38)))
 (let ((?x48339 (* 2.0 l_0_9_16)))
 (let ((?x26719 (* ?x48339 l_0_9_37)))
 (let ((?x51715 (+ (+ (+ (+ (+ (+ (+ ?x26719 ?x49773) ?x49775) ?x49777) ?x49779) ?x49781) ?x51712) ?x51714)))
 (let ((?x51726 (- (- (- (+ (+ (+ (+ ?x51715 ?x51716) ?x51718) ?x51720) ?x51722) ?x49783) ?x49785) ?x49787)))
 (= (- (- (- ?x51726 ?x49789) ?x49791) ?x49793) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49842 (* l_0_9_73 l_0_9_73)))
 (let ((?x49840 (* l_0_9_72 l_0_9_72)))
 (let ((?x49838 (* l_0_9_71 l_0_9_71)))
 (let ((?x49836 (* l_0_9_70 l_0_9_70)))
 (let ((?x49834 (* l_0_9_69 l_0_9_69)))
 (let ((?x49832 (* l_0_9_68 l_0_9_68)))
 (let ((?x49830 (* l_0_9_67 l_0_9_67)))
 (let ((?x49828 (* l_0_9_28 l_0_9_28)))
 (let ((?x49826 (* l_0_9_27 l_0_9_27)))
 (let ((?x49824 (* l_0_9_26 l_0_9_26)))
 (let ((?x51778 (* l_0_9_253 l_0_9_253)))
 (let ((?x51776 (* l_0_9_252 l_0_9_252)))
 (let ((?x51774 (* l_0_9_251 l_0_9_251)))
 (let ((?x51772 (* l_0_9_250 l_0_9_250)))
 (let ((?x37688 (* l_0_9_25 l_0_9_25)))
 (let ((?x51769 (* l_0_9_249 l_0_9_249)))
 (let ((?x51767 (* l_0_9_248 l_0_9_248)))
 (let ((?x51765 (* l_0_9_247 l_0_9_247)))
 (let ((?x37682 (* l_0_9_24 l_0_9_24)))
 (let ((?x51766 (+ (+ (+ (* l_0_9_22 l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x37682) ?x51765)))
 (let ((?x51779 (+ (+ (+ (+ (+ (+ (+ ?x51766 ?x51767) ?x51769) ?x37688) ?x51772) ?x51774) ?x51776) ?x51778)))
 (let ((?x51786 (- (- (- (- (+ (+ (+ ?x51779 ?x49824) ?x49826) ?x49828) ?x49830) ?x49832) ?x49834) ?x49836)))
 (= (- (- (- ?x51786 ?x49838) ?x49840) ?x49842) 0.0))))))))))))))))))))))))
(assert
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49905 (* ?x49904 l_0_9_80)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49902 (* ?x49901 l_0_9_79)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49899 (* ?x49898 l_0_9_78)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49896 (* ?x49895 l_0_9_77)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49893 (* ?x49892 l_0_9_76)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49890 (* ?x49889 l_0_9_75)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49887 (* ?x49886 l_0_9_74)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49884 (* ?x49883 l_0_9_35)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49881 (* ?x49880 l_0_9_34)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49878 (* ?x49877 l_0_9_33)))
 (let ((?x51829 (* 2.0 l_0_9_253)))
 (let ((?x51830 (* ?x51829 l_0_9_260)))
 (let ((?x51826 (* 2.0 l_0_9_252)))
 (let ((?x51827 (* ?x51826 l_0_9_259)))
 (let ((?x51823 (* 2.0 l_0_9_251)))
 (let ((?x51824 (* ?x51823 l_0_9_258)))
 (let ((?x51820 (* 2.0 l_0_9_250)))
 (let ((?x51821 (* ?x51820 l_0_9_257)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49875 (* ?x49874 l_0_9_32)))
 (let ((?x51816 (* 2.0 l_0_9_249)))
 (let ((?x51817 (* ?x51816 l_0_9_256)))
 (let ((?x51813 (* 2.0 l_0_9_248)))
 (let ((?x51814 (* ?x51813 l_0_9_255)))
 (let ((?x51810 (* 2.0 l_0_9_247)))
 (let ((?x51811 (* ?x51810 l_0_9_254)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49872 (* ?x49165 l_0_9_31)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49870 (* ?x48919 l_0_9_30)))
 (let ((?x51815 (+ (+ (+ (+ (* (* 2.0 l_0_9_22) l_0_9_29) ?x49870) ?x49872) ?x51811) ?x51814)))
 (let ((?x51832 (+ (+ (+ (+ (+ (+ (+ ?x51815 ?x51817) ?x49875) ?x51821) ?x51824) ?x51827) ?x51830) ?x49878)))
 (let ((?x51839 (- (- (- (- (- (+ (+ ?x51832 ?x49881) ?x49884) ?x49887) ?x49890) ?x49893) ?x49896) ?x49899)))
 (= (- (- ?x51839 ?x49902) ?x49905) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50711 (* ?x50261 l_0_9_94)))
 (let ((?x49904 (* 2.0 l_0_9_73)))
 (let ((?x49965 (* ?x49904 l_0_9_88)))
 (let ((?x49901 (* 2.0 l_0_9_72)))
 (let ((?x49963 (* ?x49901 l_0_9_87)))
 (let ((?x49898 (* 2.0 l_0_9_71)))
 (let ((?x49961 (* ?x49898 l_0_9_86)))
 (let ((?x49895 (* 2.0 l_0_9_70)))
 (let ((?x49959 (* ?x49895 l_0_9_85)))
 (let ((?x49892 (* 2.0 l_0_9_69)))
 (let ((?x49957 (* ?x49892 l_0_9_84)))
 (let ((?x49889 (* 2.0 l_0_9_68)))
 (let ((?x49955 (* ?x49889 l_0_9_83)))
 (let ((?x49886 (* 2.0 l_0_9_67)))
 (let ((?x49953 (* ?x49886 l_0_9_82)))
 (let ((?x49883 (* 2.0 l_0_9_28)))
 (let ((?x49951 (* ?x49883 l_0_9_43)))
 (let ((?x49880 (* 2.0 l_0_9_27)))
 (let ((?x49949 (* ?x49880 l_0_9_42)))
 (let ((?x49877 (* 2.0 l_0_9_26)))
 (let ((?x49947 (* ?x49877 l_0_9_41)))
 (let ((?x51829 (* 2.0 l_0_9_253)))
 (let ((?x51886 (* ?x51829 l_0_9_268)))
 (let ((?x51826 (* 2.0 l_0_9_252)))
 (let ((?x51884 (* ?x51826 l_0_9_267)))
 (let ((?x51823 (* 2.0 l_0_9_251)))
 (let ((?x51882 (* ?x51823 l_0_9_266)))
 (let ((?x51820 (* 2.0 l_0_9_250)))
 (let ((?x51880 (* ?x51820 l_0_9_265)))
 (let ((?x49874 (* 2.0 l_0_9_25)))
 (let ((?x49935 (* ?x49874 l_0_9_40)))
 (let ((?x51816 (* 2.0 l_0_9_249)))
 (let ((?x51877 (* ?x51816 l_0_9_264)))
 (let ((?x51813 (* 2.0 l_0_9_248)))
 (let ((?x51875 (* ?x51813 l_0_9_263)))
 (let ((?x51810 (* 2.0 l_0_9_247)))
 (let ((?x51873 (* ?x51810 l_0_9_262)))
 (let ((?x49165 (* 2.0 l_0_9_24)))
 (let ((?x49931 (* ?x49165 l_0_9_39)))
 (let ((?x48919 (* 2.0 l_0_9_23)))
 (let ((?x49927 (* ?x48919 l_0_9_38)))
 (let ((?x49355 (* 2.0 l_0_9_22)))
 (let ((?x49925 (* ?x49355 l_0_9_37)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x50693 (* ?x48319 l_0_9_139)))
 (let ((?x51879 (+ (+ (+ (+ (+ (+ (+ ?x50693 ?x49925) ?x49927) ?x49931) ?x51873) ?x51875) ?x51877) ?x49935)))
 (let ((?x51890 (+ (+ (+ (+ (+ (+ (+ ?x51879 ?x51880) ?x51882) ?x51884) ?x51886) ?x49947) ?x49949) ?x49951)))
 (let ((?x51897 (- (- (- (- (- (- (- ?x51890 ?x49953) ?x49955) ?x49957) ?x49959) ?x49961) ?x49963) ?x49965)))
 (= (- ?x51897 ?x50711) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50013 (* l_0_9_81 l_0_9_81)))
 (let ((?x50011 (* l_0_9_80 l_0_9_80)))
 (let ((?x50009 (* l_0_9_79 l_0_9_79)))
 (let ((?x50007 (* l_0_9_78 l_0_9_78)))
 (let ((?x50005 (* l_0_9_77 l_0_9_77)))
 (let ((?x50003 (* l_0_9_76 l_0_9_76)))
 (let ((?x50001 (* l_0_9_75 l_0_9_75)))
 (let ((?x49999 (* l_0_9_74 l_0_9_74)))
 (let ((?x49997 (* l_0_9_36 l_0_9_36)))
 (let ((?x49995 (* l_0_9_35 l_0_9_35)))
 (let ((?x49993 (* l_0_9_34 l_0_9_34)))
 (let ((?x9919 (* l_0_9_33 l_0_9_33)))
 (let ((?x37757 (* l_0_9_32 l_0_9_32)))
 (let ((?x37786 (* l_0_9_31 l_0_9_31)))
 (let ((?x37784 (* l_0_9_30 l_0_9_30)))
 (let ((?x50017 (* l_0_9_29 l_0_9_29)))
 (let ((?x51959 (* l_0_9_261 l_0_9_261)))
 (let ((?x51957 (* l_0_9_260 l_0_9_260)))
 (let ((?x51955 (* l_0_9_259 l_0_9_259)))
 (let ((?x51953 (* l_0_9_258 l_0_9_258)))
 (let ((?x51951 (* l_0_9_257 l_0_9_257)))
 (let ((?x51949 (* l_0_9_256 l_0_9_256)))
 (let ((?x51952 (+ (+ (+ (* l_0_9_254 l_0_9_254) (* l_0_9_255 l_0_9_255)) ?x51949) ?x51951)))
 (let ((?x51963 (+ (+ (+ (+ (+ (+ (+ ?x51952 ?x51953) ?x51955) ?x51957) ?x51959) ?x50017) ?x37784) ?x37786)))
 (let ((?x51970 (- (- (+ (+ (+ (+ (+ ?x51963 ?x37757) ?x9919) ?x49993) ?x49995) ?x49997) ?x49999) ?x50001)))
 (= (- (- (- (- (- (- ?x51970 ?x50003) ?x50005) ?x50007) ?x50009) ?x50011) ?x50013) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x50083 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50080 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50077 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50074 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50071 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50068 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50065 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50062 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50059 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50056 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50053 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50050 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50047 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49197 (* 2.0 l_0_9_31)))
 (let ((?x50044 (* ?x49197 l_0_9_39)))
 (let ((?x49194 (* 2.0 l_0_9_30)))
 (let ((?x50042 (* ?x49194 l_0_9_38)))
 (let ((?x37428 (* 2.0 l_0_9_29)))
 (let ((?x50534 (* ?x37428 l_0_9_37)))
 (let ((?x52012 (* (* 2.0 l_0_9_261) l_0_9_269)))
 (let ((?x52009 (* (* 2.0 l_0_9_260) l_0_9_268)))
 (let ((?x52006 (* (* 2.0 l_0_9_259) l_0_9_267)))
 (let ((?x52003 (* (* 2.0 l_0_9_258) l_0_9_266)))
 (let ((?x52000 (* (* 2.0 l_0_9_257) l_0_9_265)))
 (let ((?x51997 (* (* 2.0 l_0_9_256) l_0_9_264)))
 (let ((?x51994 (* (* 2.0 l_0_9_255) l_0_9_263)))
 (let ((?x51992 (* (* 2.0 l_0_9_254) l_0_9_262)))
 (let ((?x52013 (+ (+ (+ (+ (+ (+ (+ ?x51992 ?x51994) ?x51997) ?x52000) ?x52003) ?x52006) ?x52009) ?x52012)))
 (let ((?x52020 (+ (+ (+ (+ (+ (+ (+ ?x52013 ?x50534) ?x50042) ?x50044) ?x50047) ?x50050) ?x50053) ?x50056)))
 (let ((?x52027 (- (- (- (- (- (- (+ ?x52020 ?x50059) ?x50062) ?x50065) ?x50068) ?x50071) ?x50074) ?x50077)))
 (= (- (- ?x52027 ?x50080) ?x50083) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x50162 (* l_0_9_90 l_0_9_90)))
 (let ((?x50160 (* l_0_9_89 l_0_9_89)))
 (let ((?x50158 (* l_0_9_88 l_0_9_88)))
 (let ((?x50156 (* l_0_9_87 l_0_9_87)))
 (let ((?x50154 (* l_0_9_86 l_0_9_86)))
 (let ((?x50152 (* l_0_9_85 l_0_9_85)))
 (let ((?x50150 (* l_0_9_84 l_0_9_84)))
 (let ((?x50148 (* l_0_9_83 l_0_9_83)))
 (let ((?x50146 (* l_0_9_82 l_0_9_82)))
 (let ((?x50144 (* l_0_9_45 l_0_9_45)))
 (let ((?x50142 (* l_0_9_44 l_0_9_44)))
 (let ((?x50140 (* l_0_9_43 l_0_9_43)))
 (let ((?x50138 (* l_0_9_42 l_0_9_42)))
 (let ((?x50125 (* l_0_9_41 l_0_9_41)))
 (let ((?x50122 (* l_0_9_40 l_0_9_40)))
 (let ((?x50118 (* l_0_9_39 l_0_9_39)))
 (let ((?x50114 (* l_0_9_38 l_0_9_38)))
 (let ((?x50166 (* l_0_9_37 l_0_9_37)))
 (let ((?x52088 (* l_0_9_270 l_0_9_270)))
 (let ((?x52086 (* l_0_9_269 l_0_9_269)))
 (let ((?x52084 (* l_0_9_268 l_0_9_268)))
 (let ((?x52082 (* l_0_9_267 l_0_9_267)))
 (let ((?x52080 (* l_0_9_266 l_0_9_266)))
 (let ((?x52078 (* l_0_9_265 l_0_9_265)))
 (let ((?x52076 (* l_0_9_264 l_0_9_264)))
 (let ((?x52079 (+ (+ (+ (* l_0_9_262 l_0_9_262) (* l_0_9_263 l_0_9_263)) ?x52076) ?x52078)))
 (let ((?x52091 (+ (+ (+ (+ (+ (+ (+ ?x52079 ?x52080) ?x52082) ?x52084) ?x52086) ?x52088) ?x50166) ?x50114)))
 (let ((?x52098 (+ (+ (+ (+ (+ (+ (+ ?x52091 ?x50118) ?x50122) ?x50125) ?x50138) ?x50140) ?x50142) ?x50144)))
 (let ((?x52105 (- (- (- (- (- (- (- ?x52098 ?x50146) ?x50148) ?x50150) ?x50152) ?x50154) ?x50156) ?x50158)))
 (= (- (- ?x52105 ?x50160) ?x50162) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x52172 (* l_0_9_91 l_0_9_91)))
 (let ((?x52135 (- (- (* l_0_9_136 l_0_9_136) (* (* 2.0 l_0_9_202) l_0_9_217)) (* (* 2.0 l_0_9_203) l_0_9_218))))
 (let ((?x52141 (- (- ?x52135 (* (* 2.0 l_0_9_204) l_0_9_219)) (* (* 2.0 l_0_9_205) l_0_9_220))))
 (let ((?x52147 (- (- ?x52141 (* (* 2.0 l_0_9_206) l_0_9_221)) (* (* 2.0 l_0_9_207) l_0_9_222))))
 (let ((?x52153 (- (- ?x52147 (* (* 2.0 l_0_9_208) l_0_9_223)) (* (* 2.0 l_0_9_292) l_0_9_307))))
 (let ((?x52159 (- (- ?x52153 (* (* 2.0 l_0_9_293) l_0_9_308)) (* (* 2.0 l_0_9_294) l_0_9_309))))
 (let ((?x52165 (- (- ?x52159 (* (* 2.0 l_0_9_295) l_0_9_310)) (* (* 2.0 l_0_9_296) l_0_9_311))))
 (let ((?x52171 (- (- ?x52165 (* (* 2.0 l_0_9_297) l_0_9_312)) (* (* 2.0 l_0_9_298) l_0_9_313))))
 (= (- ?x52171 ?x52172) 0.0))))))))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x52238 (* ?x50261 l_0_9_92)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_137) ?x52238) 0.0))))
(assert
 (let ((?x51829 (* 2.0 l_0_9_253)))
 (let ((?x51886 (* ?x51829 l_0_9_268)))
 (let ((?x51826 (* 2.0 l_0_9_252)))
 (let ((?x51884 (* ?x51826 l_0_9_267)))
 (let ((?x51823 (* 2.0 l_0_9_251)))
 (let ((?x51882 (* ?x51823 l_0_9_266)))
 (let ((?x51820 (* 2.0 l_0_9_250)))
 (let ((?x51880 (* ?x51820 l_0_9_265)))
 (let ((?x51816 (* 2.0 l_0_9_249)))
 (let ((?x51877 (* ?x51816 l_0_9_264)))
 (let ((?x51813 (* 2.0 l_0_9_248)))
 (let ((?x51875 (* ?x51813 l_0_9_263)))
 (let ((?x51810 (* 2.0 l_0_9_247)))
 (let ((?x51873 (* ?x51810 l_0_9_262)))
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52288 (* ?x52287 l_0_9_178)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52285 (* ?x52284 l_0_9_177)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52282 (* ?x52281 l_0_9_176)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52279 (* ?x52278 l_0_9_175)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52276 (* ?x52275 l_0_9_174)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52273 (* ?x52272 l_0_9_173)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52270 (* ?x52269 l_0_9_172)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52267 (* ?x48319 l_0_9_146)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52265 (* ?x52264 l_0_9_133)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52262 (* ?x52261 l_0_9_132)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52259 (* ?x52258 l_0_9_131)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52256 (* ?x52255 l_0_9_130)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52253 (* ?x37891 l_0_9_129)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52251 (* ?x37873 l_0_9_128)))
 (let ((?x37036 (* (- 2.0) l_0_9_101)))
 (let ((?x40982 (* ?x37036 l_0_9_91)))
 (let ((?x52257 (+ (+ (+ (+ ?x40982 (* (* 2.0 l_0_9_112) l_0_9_127)) ?x52251) ?x52253) ?x52256)))
 (let ((?x52277 (- (- (- (+ (+ (+ (+ ?x52257 ?x52259) ?x52262) ?x52265) ?x52267) ?x52270) ?x52273) ?x52276)))
 (let ((?x52292 (- (- (- (- (- (- (- ?x52277 ?x52279) ?x52282) ?x52285) ?x52288) ?x51873) ?x51875) ?x51877)))
 (= (- (- (- (- ?x52292 ?x51880) ?x51882) ?x51884) ?x51886) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x48320 (* ?x48319 l_0_9_151)))
 (= (+ (* (* (- 2.0) l_0_9_106) l_0_9_91) ?x48320) 0.0))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52379 (* ?x48319 l_0_9_157)))
 (= (+ (* (* (- 2.0) l_0_9_112) l_0_9_91) ?x52379) 0.0))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52386 (* ?x48319 l_0_9_164)))
 (= (+ (* (* (- 2.0) l_0_9_119) l_0_9_91) ?x52386) 0.0))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52397 (* ?x48319 l_0_9_172)))
 (= (+ (* (* (- 2.0) l_0_9_127) l_0_9_91) ?x52397) 0.0))))
(assert
 (let ((?x52415 (* l_0_9_93 l_0_9_93)))
 (let ((?x52413 (* l_0_9_92 l_0_9_92)))
 (let ((?x52407 (* l_0_9_138 l_0_9_138)))
 (let ((?x52405 (* l_0_9_137 l_0_9_137)))
 (let ((?x52408 (+ ?x52405 ?x52407)))
 (= (- (- ?x52408 ?x52413) ?x52415) 0.0)))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x50927 (* ?x37999 l_0_9_95)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x50925 (* ?x37954 l_0_9_94)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x50915 (* ?x48617 l_0_9_140)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x50913 (* ?x48614 l_0_9_139)))
 (= (- (- (+ ?x50913 ?x50915) ?x50925) ?x50927) 0.0))))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52436 (* ?x48617 l_0_9_147)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52434 (* ?x48614 l_0_9_146)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52432 (* ?x48767 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_101) l_0_9_92) ?x52432) ?x52434) ?x52436) 0.0))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x48618 (* ?x48617 l_0_9_152)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x48615 (* ?x48614 l_0_9_151)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48608 (* ?x48482 l_0_9_93)))
 (let ((?x48619 (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_92) ?x48608) ?x48615) ?x48618)))
 (= ?x48619 0.0)))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52459 (* ?x48617 l_0_9_158)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52457 (* ?x48614 l_0_9_157)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52455 (* ?x37873 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_112) l_0_9_92) ?x52455) ?x52457) ?x52459) 0.0))))))))
(assert
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52288 (* ?x52287 l_0_9_178)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52285 (* ?x52284 l_0_9_177)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52282 (* ?x52281 l_0_9_176)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52279 (* ?x52278 l_0_9_175)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52276 (* ?x52275 l_0_9_174)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52273 (* ?x52272 l_0_9_173)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52270 (* ?x52269 l_0_9_172)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52485 (* ?x48617 l_0_9_165)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52483 (* ?x48614 l_0_9_164)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52481 (* ?x50520 l_0_9_93)))
 (let ((?x26758 (* 2.0 l_0_9_119)))
 (let ((?x52479 (* ?x26758 l_0_9_92)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52265 (* ?x52264 l_0_9_133)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52262 (* ?x52261 l_0_9_132)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52259 (* ?x52258 l_0_9_131)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52256 (* ?x52255 l_0_9_130)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52253 (* ?x37891 l_0_9_129)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52251 (* ?x37873 l_0_9_128)))
 (let ((?x52476 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_127) ?x52251) ?x52253) ?x52256) ?x52259)))
 (let ((?x52478 (- (- ?x52476 ?x52262) ?x52265)))
 (let ((?x52489 (+ (+ (+ (+ (+ (- (- ?x52478 ?x52479) ?x52481) ?x52483) ?x52485) ?x52270) ?x52273) ?x52276)))
 (= (+ (+ (+ (+ ?x52489 ?x52279) ?x52282) ?x52285) ?x52288) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52503 (* ?x48617 l_0_9_173)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x41510 (* ?x48614 l_0_9_172)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x52501 (* ?x50590 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_127) l_0_9_92) ?x52501) ?x41510) ?x52503) 0.0))))))))
(assert
 (let ((?x51072 (* l_0_9_96 l_0_9_96)))
 (let ((?x51070 (* l_0_9_95 l_0_9_95)))
 (let ((?x51068 (* l_0_9_94 l_0_9_94)))
 (let ((?x51054 (* l_0_9_141 l_0_9_141)))
 (let ((?x52519 (- (+ (+ (* l_0_9_139 l_0_9_139) (* l_0_9_140 l_0_9_140)) ?x51054) ?x51068)))
 (= (- (- ?x52519 ?x51070) ?x51072) 0.0)))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51305 (* ?x48660 l_0_9_148)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51303 (* ?x48657 l_0_9_147)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51300 (* ?x48654 l_0_9_146)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x51295 (* ?x48779 l_0_9_96)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x51293 (* ?x48767 l_0_9_95)))
 (let ((?x52529 (+ (+ (- (- (* (* (- 2.0) l_0_9_101) l_0_9_94) ?x51293) ?x51295) ?x51300) ?x51303)))
 (= (+ ?x52529 ?x51305) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x48661 (* ?x48660 l_0_9_153)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x48658 (* ?x48657 l_0_9_152)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x48655 (* ?x48654 l_0_9_151)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48652 (* ?x48485 l_0_9_96)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48650 (* ?x48482 l_0_9_95)))
 (let ((?x48659 (+ (+ (- (- (* (* (- 2.0) l_0_9_106) l_0_9_94) ?x48650) ?x48652) ?x48655) ?x48658)))
 (let ((?x48662 (+ ?x48659 ?x48661)))
 (= ?x48662 0.0))))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x11478 (* ?x48660 l_0_9_159)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x11466 (* ?x48657 l_0_9_158)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x11442 (* ?x48654 l_0_9_157)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x39351 (* ?x37891 l_0_9_96)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x39347 (* ?x37873 l_0_9_95)))
 (let ((?x52541 (+ (+ (- (- (* (* (- 2.0) l_0_9_112) l_0_9_94) ?x39347) ?x39351) ?x11442) ?x11466)))
 (= (+ ?x52541 ?x11478) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x28273 (* ?x48660 l_0_9_166)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x39476 (* ?x48657 l_0_9_165)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x39475 (* ?x48654 l_0_9_164)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x39463 (* ?x50523 l_0_9_96)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x39477 (* ?x50520 l_0_9_95)))
 (let ((?x52556 (+ (+ (- (- (* (* (- 2.0) l_0_9_119) l_0_9_94) ?x39477) ?x39463) ?x39475) ?x39476)))
 (= (+ ?x52556 ?x28273) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51532 (* ?x48660 l_0_9_174)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51530 (* ?x48657 l_0_9_173)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51527 (* ?x48654 l_0_9_172)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x51524 (* ?x50593 l_0_9_96)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x51522 (* ?x50590 l_0_9_95)))
 (let ((?x52562 (+ (+ (- (- (* (* (- 2.0) l_0_9_127) l_0_9_94) ?x51522) ?x51524) ?x51527) ?x51530)))
 (= (+ ?x52562 ?x51532) 0.0)))))))))))))
(assert
 (let ((?x14734 (* l_0_9_150 l_0_9_150)))
 (let ((?x41555 (* l_0_9_149 l_0_9_149)))
 (let ((?x41543 (* l_0_9_148 l_0_9_148)))
 (let ((?x41511 (* l_0_9_147 l_0_9_147)))
 (let ((?x41495 (* l_0_9_146 l_0_9_146)))
 (let ((?x41525 (* l_0_9_105 l_0_9_105)))
 (let ((?x28776 (* l_0_9_104 l_0_9_104)))
 (let ((?x41569 (* l_0_9_103 l_0_9_103)))
 (let ((?x41515 (- (- (* (- l_0_9_101) l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x41569)))
 (let ((?x14726 (+ (+ (+ (+ (+ (- (- ?x41515 ?x28776) ?x41525) ?x41495) ?x41511) ?x41543) ?x41555) ?x14734)))
 (= ?x14726 0.0))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x48807 (* ?x48806 l_0_9_155)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x48804 (* ?x48803 l_0_9_154)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x48801 (* ?x48800 l_0_9_153)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x48798 (* ?x48797 l_0_9_152)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x48795 (* ?x48794 l_0_9_151)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x48786 (* ?x48785 l_0_9_110)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x48783 (* ?x48782 l_0_9_109)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x48780 (* ?x48779 l_0_9_108)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x48777 (* ?x48767 l_0_9_107)))
 (let ((?x48787 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_106) ?x48777) ?x48780) ?x48783) ?x48786)))
 (= (+ (+ (+ (+ (+ ?x48787 ?x48795) ?x48798) ?x48801) ?x48804) ?x48807) 0.0)))))))))))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52600 (* ?x48806 l_0_9_161)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52598 (* ?x48803 l_0_9_160)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52596 (* ?x48800 l_0_9_159)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52594 (* ?x48797 l_0_9_158)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52592 (* ?x48794 l_0_9_157)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52590 (* ?x48785 l_0_9_116)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52588 (* ?x48782 l_0_9_115)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52586 (* ?x48779 l_0_9_114)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52584 (* ?x48767 l_0_9_113)))
 (let ((?x52591 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_112) ?x52584) ?x52586) ?x52588) ?x52590)))
 (= (+ (+ (+ (+ (+ ?x52591 ?x52592) ?x52594) ?x52596) ?x52598) ?x52600) 0.0)))))))))))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52635 (* ?x48806 l_0_9_168)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52633 (* ?x48803 l_0_9_167)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52631 (* ?x48800 l_0_9_166)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52629 (* ?x48797 l_0_9_165)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52627 (* ?x48794 l_0_9_164)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52625 (* ?x48785 l_0_9_123)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x28823 (* ?x48782 l_0_9_122)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x41599 (* ?x48779 l_0_9_121)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x28822 (* ?x48767 l_0_9_120)))
 (let ((?x52626 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_119) ?x28822) ?x41599) ?x28823) ?x52625)))
 (= (+ (+ (+ (+ (+ ?x52626 ?x52627) ?x52629) ?x52631) ?x52633) ?x52635) 0.0)))))))))))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52685 (* ?x48806 l_0_9_176)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52683 (* ?x48803 l_0_9_175)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52681 (* ?x48800 l_0_9_174)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52679 (* ?x48797 l_0_9_173)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52677 (* ?x48794 l_0_9_172)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52675 (* ?x48785 l_0_9_131)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52665 (* ?x48782 l_0_9_130)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52662 (* ?x48779 l_0_9_129)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52658 (* ?x48767 l_0_9_128)))
 (let ((?x52676 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_127) ?x52658) ?x52662) ?x52665) ?x52675)))
 (= (+ (+ (+ (+ (+ ?x52676 ?x52677) ?x52679) ?x52681) ?x52683) ?x52685) 0.0)))))))))))))))))))))
(assert
 (let ((?x48861 (* l_0_9_156 l_0_9_156)))
 (let ((?x48859 (* l_0_9_155 l_0_9_155)))
 (let ((?x48857 (* l_0_9_154 l_0_9_154)))
 (let ((?x48855 (* l_0_9_153 l_0_9_153)))
 (let ((?x48853 (* l_0_9_152 l_0_9_152)))
 (let ((?x48851 (* l_0_9_151 l_0_9_151)))
 (let ((?x48849 (* l_0_9_111 l_0_9_111)))
 (let ((?x48847 (* l_0_9_110 l_0_9_110)))
 (let ((?x48845 (* l_0_9_109 l_0_9_109)))
 (let ((?x48843 (* l_0_9_108 l_0_9_108)))
 (let ((?x48844 (- (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x48843)))
 (let ((?x48858 (+ (+ (+ (+ (- (- (- ?x48844 ?x48845) ?x48847) ?x48849) ?x48851) ?x48853) ?x48855) ?x48857)))
 (let ((?x48862 (+ (+ ?x48858 ?x48859) ?x48861)))
 (= ?x48862 0.0)))))))))))))))
(assert
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48915 (* ?x48512 l_0_9_162)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48913 (* ?x48509 l_0_9_161)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48911 (* ?x48506 l_0_9_160)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48909 (* ?x48503 l_0_9_159)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48907 (* ?x48500 l_0_9_158)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48905 (* ?x48497 l_0_9_157)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48903 (* ?x48494 l_0_9_117)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48901 (* ?x48491 l_0_9_116)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48899 (* ?x48488 l_0_9_115)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48897 (* ?x48485 l_0_9_114)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x8346 (* ?x48482 l_0_9_113)))
 (let ((?x48902 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x8346) ?x48897) ?x48899) ?x48901)))
 (let ((?x48916 (+ (+ (+ (+ (+ (+ (- ?x48902 ?x48903) ?x48905) ?x48907) ?x48909) ?x48911) ?x48913) ?x48915)))
 (= ?x48916 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48998 (* ?x48512 l_0_9_177)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48996 (* ?x48509 l_0_9_176)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48994 (* ?x48506 l_0_9_175)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48992 (* ?x48503 l_0_9_174)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48990 (* ?x48500 l_0_9_173)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48988 (* ?x48497 l_0_9_172)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48986 (* ?x48494 l_0_9_132)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48984 (* ?x48491 l_0_9_131)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48982 (* ?x48488 l_0_9_130)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48980 (* ?x48485 l_0_9_129)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x37236 (* ?x48482 l_0_9_128)))
 (let ((?x48985 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_127) ?x37236) ?x48980) ?x48982) ?x48984)))
 (let ((?x48999 (+ (+ (+ (+ (+ (+ (- ?x48985 ?x48986) ?x48988) ?x48990) ?x48992) ?x48994) ?x48996) ?x48998)))
 (= ?x48999 0.0))))))))))))))))))))))))))
(assert
 (let ((?x52746 (* l_0_9_163 l_0_9_163)))
 (let ((?x52744 (* l_0_9_162 l_0_9_162)))
 (let ((?x52742 (* l_0_9_161 l_0_9_161)))
 (let ((?x52740 (* l_0_9_160 l_0_9_160)))
 (let ((?x52738 (* l_0_9_159 l_0_9_159)))
 (let ((?x52736 (* l_0_9_158 l_0_9_158)))
 (let ((?x52734 (* l_0_9_157 l_0_9_157)))
 (let ((?x52732 (* l_0_9_118 l_0_9_118)))
 (let ((?x52730 (* l_0_9_117 l_0_9_117)))
 (let ((?x52728 (* l_0_9_116 l_0_9_116)))
 (let ((?x52726 (* l_0_9_115 l_0_9_115)))
 (let ((?x52716 (* l_0_9_114 l_0_9_114)))
 (let ((?x52717 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52716)))
 (let ((?x52739 (+ (+ (+ (- (- (- (- ?x52717 ?x52726) ?x52728) ?x52730) ?x52732) ?x52734) ?x52736) ?x52738)))
 (= (+ (+ (+ (+ ?x52739 ?x52740) ?x52742) ?x52744) ?x52746) 0.0))))))))))))))))
(assert
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52798 (* ?x52287 l_0_9_170)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52796 (* ?x52284 l_0_9_169)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52794 (* ?x52281 l_0_9_168)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52792 (* ?x52278 l_0_9_167)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52790 (* ?x52275 l_0_9_166)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52788 (* ?x52272 l_0_9_165)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52786 (* ?x52269 l_0_9_164)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52784 (* ?x52264 l_0_9_125)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52782 (* ?x52261 l_0_9_124)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52780 (* ?x52258 l_0_9_123)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52778 (* ?x52255 l_0_9_122)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52776 (* ?x37891 l_0_9_121)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52774 (* ?x37873 l_0_9_120)))
 (let ((?x52781 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_119) ?x52774) ?x52776) ?x52778) ?x52780)))
 (let ((?x52795 (+ (+ (+ (+ (+ (- (- ?x52781 ?x52782) ?x52784) ?x52786) ?x52788) ?x52790) ?x52792) ?x52794)))
 (= (+ (+ ?x52795 ?x52796) ?x52798) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52288 (* ?x52287 l_0_9_178)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52285 (* ?x52284 l_0_9_177)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52282 (* ?x52281 l_0_9_176)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52279 (* ?x52278 l_0_9_175)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52276 (* ?x52275 l_0_9_174)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52273 (* ?x52272 l_0_9_173)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52270 (* ?x52269 l_0_9_172)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52265 (* ?x52264 l_0_9_133)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52262 (* ?x52261 l_0_9_132)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52259 (* ?x52258 l_0_9_131)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52256 (* ?x52255 l_0_9_130)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52253 (* ?x37891 l_0_9_129)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52251 (* ?x37873 l_0_9_128)))
 (let ((?x52476 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_127) ?x52251) ?x52253) ?x52256) ?x52259)))
 (let ((?x52478 (- (- ?x52476 ?x52262) ?x52265)))
 (let ((?x52826 (+ (+ (+ (+ (+ (+ (+ ?x52478 ?x52270) ?x52273) ?x52276) ?x52279) ?x52282) ?x52285) ?x52288)))
 (= ?x52826 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x52868 (* l_0_9_171 l_0_9_171)))
 (let ((?x52866 (* l_0_9_170 l_0_9_170)))
 (let ((?x52864 (* l_0_9_169 l_0_9_169)))
 (let ((?x52862 (* l_0_9_168 l_0_9_168)))
 (let ((?x52860 (* l_0_9_167 l_0_9_167)))
 (let ((?x52858 (* l_0_9_166 l_0_9_166)))
 (let ((?x52856 (* l_0_9_165 l_0_9_165)))
 (let ((?x52854 (* l_0_9_164 l_0_9_164)))
 (let ((?x52852 (* l_0_9_126 l_0_9_126)))
 (let ((?x52850 (* l_0_9_125 l_0_9_125)))
 (let ((?x52848 (* l_0_9_124 l_0_9_124)))
 (let ((?x52846 (* l_0_9_123 l_0_9_123)))
 (let ((?x52844 (* l_0_9_122 l_0_9_122)))
 (let ((?x52842 (* l_0_9_121 l_0_9_121)))
 (let ((?x52843 (- (- (* (- l_0_9_119) l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52842)))
 (let ((?x52857 (+ (+ (- (- (- (- (- ?x52843 ?x52844) ?x52846) ?x52848) ?x52850) ?x52852) ?x52854) ?x52856)))
 (= (+ (+ (+ (+ (+ (+ ?x52857 ?x52858) ?x52860) ?x52862) ?x52864) ?x52866) ?x52868) 0.0))))))))))))))))))
(assert
 (let ((?x52947 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52944 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52941 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52938 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52935 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52932 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52929 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52926 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52923 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52920 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52917 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52914 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52911 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x52908 (* ?x50523 l_0_9_129)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52906 (* ?x50520 l_0_9_128)))
 (let ((?x52915 (- (- (- (- (* (* (- 2.0) l_0_9_119) l_0_9_127) ?x52906) ?x52908) ?x52911) ?x52914)))
 (let ((?x52936 (+ (+ (+ (+ (- (- (- ?x52915 ?x52917) ?x52920) ?x52923) ?x52926) ?x52929) ?x52932) ?x52935)))
 (= (+ (+ (+ (+ ?x52936 ?x52938) ?x52941) ?x52944) ?x52947) 0.0)))))))))))))))))))))
(assert
 (let ((?x53031 (* l_0_9_180 l_0_9_180)))
 (let ((?x53029 (* l_0_9_179 l_0_9_179)))
 (let ((?x53027 (* l_0_9_178 l_0_9_178)))
 (let ((?x53025 (* l_0_9_177 l_0_9_177)))
 (let ((?x53023 (* l_0_9_176 l_0_9_176)))
 (let ((?x53021 (* l_0_9_175 l_0_9_175)))
 (let ((?x53019 (* l_0_9_174 l_0_9_174)))
 (let ((?x53017 (* l_0_9_173 l_0_9_173)))
 (let ((?x53015 (* l_0_9_172 l_0_9_172)))
 (let ((?x53013 (* l_0_9_135 l_0_9_135)))
 (let ((?x53011 (* l_0_9_134 l_0_9_134)))
 (let ((?x53009 (* l_0_9_133 l_0_9_133)))
 (let ((?x53007 (* l_0_9_132 l_0_9_132)))
 (let ((?x52994 (* l_0_9_131 l_0_9_131)))
 (let ((?x52991 (* l_0_9_130 l_0_9_130)))
 (let ((?x52987 (* l_0_9_129 l_0_9_129)))
 (let ((?x52989 (- (- (* (- l_0_9_127) l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52987)))
 (let ((?x53016 (+ (- (- (- (- (- (- ?x52989 ?x52991) ?x52994) ?x53007) ?x53009) ?x53011) ?x53013) ?x53015)))
 (let ((?x53030 (+ (+ (+ (+ (+ (+ (+ ?x53016 ?x53017) ?x53019) ?x53021) ?x53023) ?x53025) ?x53027) ?x53029)))
 (= (+ ?x53030 ?x53031) 0.0)))))))))))))))))))))
(assert
 (let ((?x52172 (* l_0_9_91 l_0_9_91)))
 (let ((?x53057 (- (- (* l_0_9_136 l_0_9_136) (* (* 2.0 l_0_9_182) l_0_9_209)) (* (* 2.0 l_0_9_183) l_0_9_210))))
 (let ((?x53061 (- (- ?x53057 (* (* 2.0 l_0_9_272) l_0_9_299)) (* (* 2.0 l_0_9_273) l_0_9_300))))
 (= (- ?x53061 ?x52172) 0.0)))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x52238 (* ?x50261 l_0_9_92)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_137) ?x52238) 0.0))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50262 (* ?x50261 l_0_9_97)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x37986 (* ?x48319 l_0_9_142)))
 (= (- ?x37986 ?x50262) 0.0))))))
(assert
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50949 (* ?x50880 l_0_9_255)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50947 (* ?x50877 l_0_9_254)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52485 (* ?x48617 l_0_9_165)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52483 (* ?x48614 l_0_9_164)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52267 (* ?x48319 l_0_9_146)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52481 (* ?x50520 l_0_9_93)))
 (let ((?x26758 (* 2.0 l_0_9_119)))
 (let ((?x52479 (* ?x26758 l_0_9_92)))
 (let ((?x37036 (* (- 2.0) l_0_9_101)))
 (let ((?x40982 (* ?x37036 l_0_9_91)))
 (let ((?x53087 (- (- (- (- (+ (+ (+ ?x40982 ?x52479) ?x52481) ?x52267) ?x52483) ?x52485) ?x50947) ?x50949)))
 (= ?x53087 0.0)))))))))))))))))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52379 (* ?x48319 l_0_9_157)))
 (= (+ (* (* (- 2.0) l_0_9_112) l_0_9_91) ?x52379) 0.0))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52386 (* ?x48319 l_0_9_164)))
 (= (+ (* (* (- 2.0) l_0_9_119) l_0_9_91) ?x52386) 0.0))))
(assert
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52397 (* ?x48319 l_0_9_172)))
 (= (+ (* (* (- 2.0) l_0_9_127) l_0_9_91) ?x52397) 0.0))))
(assert
 (let ((?x52415 (* l_0_9_93 l_0_9_93)))
 (let ((?x52413 (* l_0_9_92 l_0_9_92)))
 (let ((?x52407 (* l_0_9_138 l_0_9_138)))
 (let ((?x52405 (* l_0_9_137 l_0_9_137)))
 (let ((?x52408 (+ ?x52405 ?x52407)))
 (= (- (- ?x52408 ?x52413) ?x52415) 0.0)))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x50927 (* ?x37999 l_0_9_95)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x50925 (* ?x37954 l_0_9_94)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x50915 (* ?x48617 l_0_9_140)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x50913 (* ?x48614 l_0_9_139)))
 (= (- (- (+ ?x50913 ?x50915) ?x50925) ?x50927) 0.0))))))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x38014 (* ?x37999 l_0_9_98)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x37972 (* ?x37954 l_0_9_97)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x38109 (* ?x48617 l_0_9_143)))
 (let ((?x37970 (+ (* (* 2.0 l_0_9_137) l_0_9_142) ?x38109)))
 (= (- (- ?x37970 ?x37972) ?x38014) 0.0)))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52436 (* ?x48617 l_0_9_147)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52434 (* ?x48614 l_0_9_146)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52432 (* ?x48767 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_101) l_0_9_92) ?x52432) ?x52434) ?x52436) 0.0))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52459 (* ?x48617 l_0_9_158)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52457 (* ?x48614 l_0_9_157)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52455 (* ?x37873 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_112) l_0_9_92) ?x52455) ?x52457) ?x52459) 0.0))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52485 (* ?x48617 l_0_9_165)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52483 (* ?x48614 l_0_9_164)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52481 (* ?x50520 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_119) l_0_9_92) ?x52481) ?x52483) ?x52485) 0.0))))))))
(assert
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52503 (* ?x48617 l_0_9_173)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x41510 (* ?x48614 l_0_9_172)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x52501 (* ?x50590 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_127) l_0_9_92) ?x52501) ?x41510) ?x52503) 0.0))))))))
(assert
 (let ((?x51072 (* l_0_9_96 l_0_9_96)))
 (let ((?x51070 (* l_0_9_95 l_0_9_95)))
 (let ((?x51068 (* l_0_9_94 l_0_9_94)))
 (let ((?x51054 (* l_0_9_141 l_0_9_141)))
 (let ((?x52519 (- (+ (+ (* l_0_9_139 l_0_9_139) (* l_0_9_140 l_0_9_140)) ?x51054) ?x51068)))
 (= (- (- ?x52519 ?x51070) ?x51072) 0.0)))))))
(assert
 (let ((?x50343 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x50340 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x50337 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x26648 (* ?x48660 l_0_9_144)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x26649 (* ?x48657 l_0_9_143)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x38120 (* ?x48654 l_0_9_142)))
 (let ((?x38030 (+ (+ ?x38120 ?x26649) ?x26648)))
 (= (- (- (- ?x38030 ?x50337) ?x50340) ?x50343) 0.0))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51305 (* ?x48660 l_0_9_148)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51303 (* ?x48657 l_0_9_147)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51300 (* ?x48654 l_0_9_146)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x51295 (* ?x48779 l_0_9_96)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x51293 (* ?x48767 l_0_9_95)))
 (let ((?x52529 (+ (+ (- (- (* (* (- 2.0) l_0_9_101) l_0_9_94) ?x51293) ?x51295) ?x51300) ?x51303)))
 (= (+ ?x52529 ?x51305) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x11478 (* ?x48660 l_0_9_159)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x11466 (* ?x48657 l_0_9_158)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x11442 (* ?x48654 l_0_9_157)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x39351 (* ?x37891 l_0_9_96)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x39347 (* ?x37873 l_0_9_95)))
 (let ((?x52541 (+ (+ (- (- (* (* (- 2.0) l_0_9_112) l_0_9_94) ?x39347) ?x39351) ?x11442) ?x11466)))
 (= (+ ?x52541 ?x11478) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x28273 (* ?x48660 l_0_9_166)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x39476 (* ?x48657 l_0_9_165)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x39475 (* ?x48654 l_0_9_164)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x39463 (* ?x50523 l_0_9_96)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x39477 (* ?x50520 l_0_9_95)))
 (let ((?x52556 (+ (+ (- (- (* (* (- 2.0) l_0_9_119) l_0_9_94) ?x39477) ?x39463) ?x39475) ?x39476)))
 (= (+ ?x52556 ?x28273) 0.0)))))))))))))
(assert
 (let ((?x48660 (* 2.0 l_0_9_141)))
 (let ((?x51532 (* ?x48660 l_0_9_174)))
 (let ((?x48657 (* 2.0 l_0_9_140)))
 (let ((?x51530 (* ?x48657 l_0_9_173)))
 (let ((?x48654 (* 2.0 l_0_9_139)))
 (let ((?x51527 (* ?x48654 l_0_9_172)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x51524 (* ?x50593 l_0_9_96)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x51522 (* ?x50590 l_0_9_95)))
 (let ((?x52562 (+ (+ (- (- (* (* (- 2.0) l_0_9_127) l_0_9_94) ?x51522) ?x51524) ?x51527) ?x51530)))
 (= (+ ?x52562 ?x51532) 0.0)))))))))))))
(assert
 (let ((?x50408 (* l_0_9_99 l_0_9_99)))
 (let ((?x50406 (* l_0_9_98 l_0_9_98)))
 (let ((?x50404 (* l_0_9_97 l_0_9_97)))
 (let ((?x50395 (* l_0_9_145 l_0_9_145)))
 (let ((?x50393 (* l_0_9_144 l_0_9_144)))
 (let ((?x50391 (* l_0_9_143 l_0_9_143)))
 (let ((?x53112 (+ (+ (* (- l_0_9_100) l_0_9_100) (* l_0_9_142 l_0_9_142)) ?x50391)))
 (= (- (- (- (+ (+ ?x53112 ?x50393) ?x50395) ?x50404) ?x50406) ?x50408) 0.0)))))))))
(assert
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x38100 (* ?x48722 l_0_9_149)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x26699 (* ?x48719 l_0_9_148)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x26696 (* ?x48716 l_0_9_147)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26690 (* ?x48713 l_0_9_146)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x26650 (* ?x48779 l_0_9_99)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x38113 (* ?x48767 l_0_9_98)))
 (let ((?x38202 (* 2.0 l_0_9_101)))
 (let ((?x38203 (* ?x38202 l_0_9_97)))
 (let ((?x10185 (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_104) ?x38203) ?x38113) ?x26650)))
 (= (+ (+ (+ (+ ?x10185 ?x26690) ?x26696) ?x26699) ?x38100) 0.0)))))))))))))))))
(assert
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50532 (* ?x48722 l_0_9_167)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50530 (* ?x48719 l_0_9_166)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50528 (* ?x48716 l_0_9_165)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50526 (* ?x48713 l_0_9_164)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x50524 (* ?x50523 l_0_9_99)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x50521 (* ?x50520 l_0_9_98)))
 (let ((?x26758 (* 2.0 l_0_9_119)))
 (let ((?x26752 (* ?x26758 l_0_9_97)))
 (let ((?x50527 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_122) ?x26752) ?x50521) ?x50524) ?x50526)))
 (let ((?x50533 (+ (+ (+ ?x50527 ?x50528) ?x50530) ?x50532)))
 (= ?x50533 0.0))))))))))))))))))
(assert
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50602 (* ?x48722 l_0_9_175)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50600 (* ?x48719 l_0_9_174)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50598 (* ?x48716 l_0_9_173)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50596 (* ?x48713 l_0_9_172)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x50594 (* ?x50593 l_0_9_99)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x50591 (* ?x50590 l_0_9_98)))
 (let ((?x50587 (* 2.0 l_0_9_127)))
 (let ((?x50588 (* ?x50587 l_0_9_97)))
 (let ((?x50597 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_130) ?x50588) ?x50591) ?x50594) ?x50596)))
 (let ((?x50603 (+ (+ (+ ?x50597 ?x50598) ?x50600) ?x50602)))
 (= ?x50603 0.0))))))))))))))))))
(assert
 (let ((?x14734 (* l_0_9_150 l_0_9_150)))
 (let ((?x41555 (* l_0_9_149 l_0_9_149)))
 (let ((?x41543 (* l_0_9_148 l_0_9_148)))
 (let ((?x41511 (* l_0_9_147 l_0_9_147)))
 (let ((?x41495 (* l_0_9_146 l_0_9_146)))
 (let ((?x41525 (* l_0_9_105 l_0_9_105)))
 (let ((?x28776 (* l_0_9_104 l_0_9_104)))
 (let ((?x41569 (* l_0_9_103 l_0_9_103)))
 (let ((?x41515 (- (- (* (- l_0_9_101) l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x41569)))
 (let ((?x14726 (+ (+ (+ (+ (+ (- (- ?x41515 ?x28776) ?x41525) ?x41495) ?x41511) ?x41543) ?x41555) ?x14734)))
 (= ?x14726 0.0))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52600 (* ?x48806 l_0_9_161)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52598 (* ?x48803 l_0_9_160)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52596 (* ?x48800 l_0_9_159)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52594 (* ?x48797 l_0_9_158)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52592 (* ?x48794 l_0_9_157)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52590 (* ?x48785 l_0_9_116)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52588 (* ?x48782 l_0_9_115)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52586 (* ?x48779 l_0_9_114)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52584 (* ?x48767 l_0_9_113)))
 (let ((?x52591 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_112) ?x52584) ?x52586) ?x52588) ?x52590)))
 (= (+ (+ (+ (+ (+ ?x52591 ?x52592) ?x52594) ?x52596) ?x52598) ?x52600) 0.0)))))))))))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52635 (* ?x48806 l_0_9_168)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52633 (* ?x48803 l_0_9_167)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52631 (* ?x48800 l_0_9_166)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52629 (* ?x48797 l_0_9_165)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52627 (* ?x48794 l_0_9_164)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52625 (* ?x48785 l_0_9_123)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x28823 (* ?x48782 l_0_9_122)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x41599 (* ?x48779 l_0_9_121)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x28822 (* ?x48767 l_0_9_120)))
 (let ((?x52626 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_119) ?x28822) ?x41599) ?x28823) ?x52625)))
 (= (+ (+ (+ (+ (+ ?x52626 ?x52627) ?x52629) ?x52631) ?x52633) ?x52635) 0.0)))))))))))))))))))))
(assert
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52685 (* ?x48806 l_0_9_176)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52683 (* ?x48803 l_0_9_175)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52681 (* ?x48800 l_0_9_174)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52679 (* ?x48797 l_0_9_173)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52677 (* ?x48794 l_0_9_172)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52675 (* ?x48785 l_0_9_131)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52665 (* ?x48782 l_0_9_130)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52662 (* ?x48779 l_0_9_129)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52658 (* ?x48767 l_0_9_128)))
 (let ((?x52676 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_127) ?x52658) ?x52662) ?x52665) ?x52675)))
 (= (+ (+ (+ (+ (+ ?x52676 ?x52677) ?x52679) ?x52681) ?x52683) ?x52685) 0.0)))))))))))))))))))))
(assert
 (let ((?x52746 (* l_0_9_163 l_0_9_163)))
 (let ((?x52744 (* l_0_9_162 l_0_9_162)))
 (let ((?x52742 (* l_0_9_161 l_0_9_161)))
 (let ((?x52740 (* l_0_9_160 l_0_9_160)))
 (let ((?x52738 (* l_0_9_159 l_0_9_159)))
 (let ((?x52736 (* l_0_9_158 l_0_9_158)))
 (let ((?x52734 (* l_0_9_157 l_0_9_157)))
 (let ((?x52732 (* l_0_9_118 l_0_9_118)))
 (let ((?x52730 (* l_0_9_117 l_0_9_117)))
 (let ((?x52728 (* l_0_9_116 l_0_9_116)))
 (let ((?x52726 (* l_0_9_115 l_0_9_115)))
 (let ((?x52716 (* l_0_9_114 l_0_9_114)))
 (let ((?x52717 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52716)))
 (let ((?x52739 (+ (+ (+ (- (- (- (- ?x52717 ?x52726) ?x52728) ?x52730) ?x52732) ?x52734) ?x52736) ?x52738)))
 (= (+ (+ (+ (+ ?x52739 ?x52740) ?x52742) ?x52744) ?x52746) 0.0))))))))))))))))
(assert
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52798 (* ?x52287 l_0_9_170)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52796 (* ?x52284 l_0_9_169)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52794 (* ?x52281 l_0_9_168)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52792 (* ?x52278 l_0_9_167)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52790 (* ?x52275 l_0_9_166)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52788 (* ?x52272 l_0_9_165)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52786 (* ?x52269 l_0_9_164)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52784 (* ?x52264 l_0_9_125)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52782 (* ?x52261 l_0_9_124)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52780 (* ?x52258 l_0_9_123)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52778 (* ?x52255 l_0_9_122)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52776 (* ?x37891 l_0_9_121)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52774 (* ?x37873 l_0_9_120)))
 (let ((?x52781 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_119) ?x52774) ?x52776) ?x52778) ?x52780)))
 (let ((?x52795 (+ (+ (+ (+ (+ (- (- ?x52781 ?x52782) ?x52784) ?x52786) ?x52788) ?x52790) ?x52792) ?x52794)))
 (= (+ (+ ?x52795 ?x52796) ?x52798) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52868 (* l_0_9_171 l_0_9_171)))
 (let ((?x52866 (* l_0_9_170 l_0_9_170)))
 (let ((?x52864 (* l_0_9_169 l_0_9_169)))
 (let ((?x52862 (* l_0_9_168 l_0_9_168)))
 (let ((?x52860 (* l_0_9_167 l_0_9_167)))
 (let ((?x52858 (* l_0_9_166 l_0_9_166)))
 (let ((?x52856 (* l_0_9_165 l_0_9_165)))
 (let ((?x52854 (* l_0_9_164 l_0_9_164)))
 (let ((?x52852 (* l_0_9_126 l_0_9_126)))
 (let ((?x52850 (* l_0_9_125 l_0_9_125)))
 (let ((?x52848 (* l_0_9_124 l_0_9_124)))
 (let ((?x52846 (* l_0_9_123 l_0_9_123)))
 (let ((?x52844 (* l_0_9_122 l_0_9_122)))
 (let ((?x52842 (* l_0_9_121 l_0_9_121)))
 (let ((?x52843 (- (- (* (- l_0_9_119) l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52842)))
 (let ((?x52857 (+ (+ (- (- (- (- (- ?x52843 ?x52844) ?x52846) ?x52848) ?x52850) ?x52852) ?x52854) ?x52856)))
 (= (+ (+ (+ (+ (+ (+ ?x52857 ?x52858) ?x52860) ?x52862) ?x52864) ?x52866) ?x52868) 0.0))))))))))))))))))
(assert
 (let ((?x52947 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52944 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52941 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52938 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52935 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52932 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52929 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52926 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52923 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52920 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52917 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52914 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52911 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x52908 (* ?x50523 l_0_9_129)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52906 (* ?x50520 l_0_9_128)))
 (let ((?x52915 (- (- (- (- (* (* (- 2.0) l_0_9_119) l_0_9_127) ?x52906) ?x52908) ?x52911) ?x52914)))
 (let ((?x52936 (+ (+ (+ (+ (- (- (- ?x52915 ?x52917) ?x52920) ?x52923) ?x52926) ?x52929) ?x52932) ?x52935)))
 (= (+ (+ (+ (+ ?x52936 ?x52938) ?x52941) ?x52944) ?x52947) 0.0)))))))))))))))))))))
(assert
 (let ((?x53031 (* l_0_9_180 l_0_9_180)))
 (let ((?x53029 (* l_0_9_179 l_0_9_179)))
 (let ((?x53027 (* l_0_9_178 l_0_9_178)))
 (let ((?x53025 (* l_0_9_177 l_0_9_177)))
 (let ((?x53023 (* l_0_9_176 l_0_9_176)))
 (let ((?x53021 (* l_0_9_175 l_0_9_175)))
 (let ((?x53019 (* l_0_9_174 l_0_9_174)))
 (let ((?x53017 (* l_0_9_173 l_0_9_173)))
 (let ((?x53015 (* l_0_9_172 l_0_9_172)))
 (let ((?x53013 (* l_0_9_135 l_0_9_135)))
 (let ((?x53011 (* l_0_9_134 l_0_9_134)))
 (let ((?x53009 (* l_0_9_133 l_0_9_133)))
 (let ((?x53007 (* l_0_9_132 l_0_9_132)))
 (let ((?x52994 (* l_0_9_131 l_0_9_131)))
 (let ((?x52991 (* l_0_9_130 l_0_9_130)))
 (let ((?x52987 (* l_0_9_129 l_0_9_129)))
 (let ((?x52989 (- (- (* (- l_0_9_127) l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52987)))
 (let ((?x53016 (+ (- (- (- (- (- (- ?x52989 ?x52991) ?x52994) ?x53007) ?x53009) ?x53011) ?x53013) ?x53015)))
 (let ((?x53030 (+ (+ (+ (+ (+ (+ (+ ?x53016 ?x53017) ?x53019) ?x53021) ?x53023) ?x53025) ?x53027) ?x53029)))
 (= (+ ?x53030 ?x53031) 0.0)))))))))))))))))))))
(assert
 (let ((?x52172 (* l_0_9_91 l_0_9_91)))
 (let ((?x8105 (* l_0_9_226 l_0_9_226)))
 (let ((?x53143 (- (* (- l_0_9_136) l_0_9_136) (* (* 2.0 l_0_9_181) l_0_9_191))))
 (= (+ (- (- ?x53143 ?x8105) (* (* 2.0 l_0_9_271) l_0_9_281)) ?x52172) 0.0)))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x52238 (* ?x50261 l_0_9_92)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38340 (* ?x38342 l_0_9_227)))
 (let ((?x53172 (- (* (* (- 2.0) l_0_9_136) l_0_9_137) (* (* 2.0 l_0_9_182) l_0_9_191))))
 (let ((?x53177 (- (- (- ?x53172 (* (* 2.0 l_0_9_183) l_0_9_192)) ?x38340) (* (* 2.0 l_0_9_272) l_0_9_281))))
 (= (+ (- ?x53177 (* (* 2.0 l_0_9_273) l_0_9_282)) ?x52238) 0.0))))))))
(assert
 (let ((?x50261 (* 2.0 l_0_9_91)))
 (let ((?x50262 (* ?x50261 l_0_9_97)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38366 (* ?x38342 l_0_9_232)))
 (let ((?x53214 (- (* (* (- 2.0) l_0_9_136) l_0_9_142) (* (* 2.0 l_0_9_187) l_0_9_191))))
 (let ((?x53218 (- (- ?x53214 (* (* 2.0 l_0_9_188) l_0_9_192)) (* (* 2.0 l_0_9_189) l_0_9_193))))
 (let ((?x53223 (- (- (- ?x53218 (* (* 2.0 l_0_9_190) l_0_9_194)) ?x38366) (* (* 2.0 l_0_9_277) l_0_9_281))))
 (let ((?x53227 (- (- ?x53223 (* (* 2.0 l_0_9_278) l_0_9_282)) (* (* 2.0 l_0_9_279) l_0_9_283))))
 (= (+ (- ?x53227 (* (* 2.0 l_0_9_280) l_0_9_284)) ?x50262) 0.0))))))))))
(assert
 (let ((?x53285 (* l_0_9_285 l_0_9_285)))
 (let ((?x53283 (* l_0_9_284 l_0_9_284)))
 (let ((?x53281 (* l_0_9_283 l_0_9_283)))
 (let ((?x53279 (* l_0_9_282 l_0_9_282)))
 (let ((?x53277 (* l_0_9_281 l_0_9_281)))
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50702 (* ?x38342 l_0_9_236)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52267 (* ?x48319 l_0_9_146)))
 (let ((?x53263 (- (- (* (* 2.0 l_0_9_101) l_0_9_91) ?x52267) (* (* 1.0 l_0_9_191) l_0_9_191))))
 (let ((?x53269 (- (- ?x53263 (* (* 1.0 l_0_9_192) l_0_9_192)) (* (* 1.0 l_0_9_193) l_0_9_193))))
 (let ((?x53275 (- (- ?x53269 (* (* 1.0 l_0_9_194) l_0_9_194)) (* (* 1.0 l_0_9_195) l_0_9_195))))
 (= (- (- (- (- (- (- ?x53275 ?x50702) ?x53277) ?x53279) ?x53281) ?x53283) ?x53285) 0.0))))))))))))))
(assert
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50747 (* ?x38342 l_0_9_241)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x48320 (* ?x48319 l_0_9_151)))
 (let ((?x48316 (* 2.0 l_0_9_106)))
 (let ((?x48317 (* ?x48316 l_0_9_91)))
 (let ((?x53320 (- (- (- ?x48317 ?x48320) (* (* 2.0 l_0_9_191) l_0_9_196)) (* (* 2.0 l_0_9_192) l_0_9_197))))
 (let ((?x53326 (- (- ?x53320 (* (* 2.0 l_0_9_193) l_0_9_198)) (* (* 2.0 l_0_9_194) l_0_9_199))))
 (let ((?x53333 (- (- (- ?x53326 (* (* 2.0 l_0_9_195) l_0_9_200)) ?x50747) (* (* 2.0 l_0_9_281) l_0_9_286))))
 (let ((?x53339 (- (- ?x53333 (* (* 2.0 l_0_9_282) l_0_9_287)) (* (* 2.0 l_0_9_283) l_0_9_288))))
 (let ((?x53345 (- (- ?x53339 (* (* 2.0 l_0_9_284) l_0_9_289)) (* (* 2.0 l_0_9_285) l_0_9_290))))
 (= ?x53345 0.0)))))))))))))
(assert
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50790 (* ?x38342 l_0_9_247)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52379 (* ?x48319 l_0_9_157)))
 (let ((?x29348 (- (- (* (* 2.0 l_0_9_112) l_0_9_91) ?x52379) (* (* 2.0 l_0_9_191) l_0_9_202))))
 (let ((?x53373 (- (- ?x29348 (* (* 2.0 l_0_9_192) l_0_9_203)) (* (* 2.0 l_0_9_193) l_0_9_204))))
 (let ((?x53377 (- (- ?x53373 (* (* 2.0 l_0_9_194) l_0_9_205)) (* (* 2.0 l_0_9_195) l_0_9_206))))
 (let ((?x53382 (- (- (- ?x53377 ?x50790) (* (* 2.0 l_0_9_281) l_0_9_292)) (* (* 2.0 l_0_9_282) l_0_9_293))))
 (let ((?x53386 (- (- ?x53382 (* (* 2.0 l_0_9_283) l_0_9_294)) (* (* 2.0 l_0_9_284) l_0_9_295))))
 (= (- ?x53386 (* (* 2.0 l_0_9_285) l_0_9_296)) 0.0)))))))))))
(assert
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x50833 (* ?x38342 l_0_9_254)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52386 (* ?x48319 l_0_9_164)))
 (let ((?x42036 (- (- (* (* 2.0 l_0_9_119) l_0_9_91) ?x52386) (* (* 2.0 l_0_9_191) l_0_9_209))))
 (let ((?x15742 (- (- ?x42036 (* (* 2.0 l_0_9_192) l_0_9_210)) (* (* 2.0 l_0_9_193) l_0_9_211))))
 (let ((?x53409 (- (- ?x15742 (* (* 2.0 l_0_9_194) l_0_9_212)) (* (* 2.0 l_0_9_195) l_0_9_213))))
 (let ((?x53414 (- (- (- ?x53409 ?x50833) (* (* 2.0 l_0_9_281) l_0_9_299)) (* (* 2.0 l_0_9_282) l_0_9_300))))
 (let ((?x53418 (- (- ?x53414 (* (* 2.0 l_0_9_283) l_0_9_301)) (* (* 2.0 l_0_9_284) l_0_9_302))))
 (= (- ?x53418 (* (* 2.0 l_0_9_285) l_0_9_303)) 0.0)))))))))))
(assert
 (let ((?x38342 (* 2.0 l_0_9_226)))
 (let ((?x38535 (* ?x38342 l_0_9_262)))
 (let ((?x48319 (* 2.0 l_0_9_136)))
 (let ((?x52397 (* ?x48319 l_0_9_172)))
 (let ((?x53446 (- (- (* (* 2.0 l_0_9_127) l_0_9_91) ?x52397) (* (* 2.0 l_0_9_191) l_0_9_217))))
 (let ((?x53450 (- (- ?x53446 (* (* 2.0 l_0_9_192) l_0_9_218)) (* (* 2.0 l_0_9_193) l_0_9_219))))
 (let ((?x53454 (- (- ?x53450 (* (* 2.0 l_0_9_194) l_0_9_220)) (* (* 2.0 l_0_9_195) l_0_9_221))))
 (let ((?x53459 (- (- (- ?x53454 ?x38535) (* (* 2.0 l_0_9_281) l_0_9_307)) (* (* 2.0 l_0_9_282) l_0_9_308))))
 (let ((?x53463 (- (- ?x53459 (* (* 2.0 l_0_9_283) l_0_9_309)) (* (* 2.0 l_0_9_284) l_0_9_310))))
 (= (- ?x53463 (* (* 2.0 l_0_9_285) l_0_9_311)) 0.0)))))))))))
(assert
 (let ((?x52415 (* l_0_9_93 l_0_9_93)))
 (let ((?x52413 (* l_0_9_92 l_0_9_92)))
 (let ((?x50867 (* l_0_9_228 l_0_9_228)))
 (let ((?x50865 (* l_0_9_227 l_0_9_227)))
 (let ((?x42167 (- (- (* (- l_0_9_137) l_0_9_137) (* l_0_9_138 l_0_9_138)) ?x50865)))
 (= (+ (+ (- ?x42167 ?x50867) ?x52413) ?x52415) 0.0)))))))
(assert
 (let ((?x37999 (* 2.0 l_0_9_93)))
 (let ((?x38014 (* ?x37999 l_0_9_98)))
 (let ((?x37954 (* 2.0 l_0_9_92)))
 (let ((?x37972 (* ?x37954 l_0_9_97)))
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50900 (* ?x50880 l_0_9_233)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50898 (* ?x50877 l_0_9_232)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x38109 (* ?x48617 l_0_9_143)))
 (let ((?x53504 (+ (- (- (- (* (* (- 2.0) l_0_9_137) l_0_9_142) ?x38109) ?x50898) ?x50900) ?x37972)))
 (= (+ ?x53504 ?x38014) 0.0)))))))))))))
(assert
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50921 (* ?x50880 l_0_9_237)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50918 (* ?x50877 l_0_9_236)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52436 (* ?x48617 l_0_9_147)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52434 (* ?x48614 l_0_9_146)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52432 (* ?x48767 l_0_9_93)))
 (let ((?x53516 (- (- (- (+ (* (* 2.0 l_0_9_101) l_0_9_92) ?x52432) ?x52434) ?x52436) ?x50918)))
 (= (- ?x53516 ?x50921) 0.0)))))))))))))
(assert
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x38767 (* ?x50880 l_0_9_242)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x38761 (* ?x50877 l_0_9_241)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x48618 (* ?x48617 l_0_9_152)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x48615 (* ?x48614 l_0_9_151)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48608 (* ?x48482 l_0_9_93)))
 (let ((?x53528 (- (- (- (+ (* (* 2.0 l_0_9_106) l_0_9_92) ?x48608) ?x48615) ?x48618) ?x38761)))
 (= (- ?x53528 ?x38767) 0.0)))))))))))))
(assert
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x38775 (* ?x50880 l_0_9_248)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x38698 (* ?x50877 l_0_9_247)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52459 (* ?x48617 l_0_9_158)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x52457 (* ?x48614 l_0_9_157)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52455 (* ?x37873 l_0_9_93)))
 (let ((?x53535 (- (- (- (+ (* (* 2.0 l_0_9_112) l_0_9_92) ?x52455) ?x52457) ?x52459) ?x38698)))
 (= (- ?x53535 ?x38775) 0.0)))))))))))))
(assert
 (let ((?x50880 (* 2.0 l_0_9_228)))
 (let ((?x50973 (* ?x50880 l_0_9_263)))
 (let ((?x50877 (* 2.0 l_0_9_227)))
 (let ((?x50971 (* ?x50877 l_0_9_262)))
 (let ((?x48617 (* 2.0 l_0_9_138)))
 (let ((?x52503 (* ?x48617 l_0_9_173)))
 (let ((?x48614 (* 2.0 l_0_9_137)))
 (let ((?x41510 (* ?x48614 l_0_9_172)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x52501 (* ?x50590 l_0_9_93)))
 (let ((?x42234 (- (- (- (+ (* (* 2.0 l_0_9_127) l_0_9_92) ?x52501) ?x41510) ?x52503) ?x50971)))
 (= (- ?x42234 ?x50973) 0.0)))))))))))))
(assert
 (let ((?x50408 (* l_0_9_99 l_0_9_99)))
 (let ((?x50406 (* l_0_9_98 l_0_9_98)))
 (let ((?x50404 (* l_0_9_97 l_0_9_97)))
 (let ((?x51196 (* l_0_9_235 l_0_9_235)))
 (let ((?x51194 (* l_0_9_234 l_0_9_234)))
 (let ((?x51192 (* l_0_9_233 l_0_9_233)))
 (let ((?x39124 (* l_0_9_232 l_0_9_232)))
 (let ((?x50395 (* l_0_9_145 l_0_9_145)))
 (let ((?x50393 (* l_0_9_144 l_0_9_144)))
 (let ((?x50391 (* l_0_9_143 l_0_9_143)))
 (let ((?x42240 (- (- (- (* l_0_9_100 l_0_9_100) (* l_0_9_142 l_0_9_142)) ?x50391) ?x50393)))
 (let ((?x53544 (+ (+ (- (- (- (- (- ?x42240 ?x50395) ?x39124) ?x51192) ?x51194) ?x51196) ?x50404) ?x50406)))
 (= (+ ?x53544 ?x50408) 0.0))))))))))))))
(assert
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x51234 (* ?x50211 l_0_9_239)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x51232 (* ?x50208 l_0_9_238)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x51230 (* ?x50205 l_0_9_237)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x51228 (* ?x50202 l_0_9_236)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x38100 (* ?x48722 l_0_9_149)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x26699 (* ?x48719 l_0_9_148)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x26696 (* ?x48716 l_0_9_147)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x26690 (* ?x48713 l_0_9_146)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x26650 (* ?x48779 l_0_9_99)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x38113 (* ?x48767 l_0_9_98)))
 (let ((?x38202 (* 2.0 l_0_9_101)))
 (let ((?x38203 (* ?x38202 l_0_9_97)))
 (let ((?x53560 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_104) ?x38203) ?x38113) ?x26650) ?x26690)))
 (let ((?x53567 (- (- (- (- (- (- (- ?x53560 ?x26696) ?x26699) ?x38100) ?x51228) ?x51230) ?x51232) ?x51234)))
 (= ?x53567 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x27937 (* ?x50211 l_0_9_244)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x39109 (* ?x50208 l_0_9_243)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x27912 (* ?x50205 l_0_9_242)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x39104 (* ?x50202 l_0_9_241)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x48723 (* ?x48722 l_0_9_154)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x48720 (* ?x48719 l_0_9_153)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x48717 (* ?x48716 l_0_9_152)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x48714 (* ?x48713 l_0_9_151)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48711 (* ?x48485 l_0_9_99)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x48709 (* ?x48482 l_0_9_98)))
 (let ((?x48316 (* 2.0 l_0_9_106)))
 (let ((?x48707 (* ?x48316 l_0_9_97)))
 (let ((?x42322 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_109) ?x48707) ?x48709) ?x48711) ?x48714)))
 (let ((?x42331 (- (- (- (- (- (- (- ?x42322 ?x48717) ?x48720) ?x48723) ?x39104) ?x27912) ?x39109) ?x27937)))
 (= ?x42331 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x39184 (* ?x50211 l_0_9_257)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x39180 (* ?x50208 l_0_9_256)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x39175 (* ?x50205 l_0_9_255)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x39297 (* ?x50202 l_0_9_254)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50532 (* ?x48722 l_0_9_167)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50530 (* ?x48719 l_0_9_166)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50528 (* ?x48716 l_0_9_165)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50526 (* ?x48713 l_0_9_164)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x50524 (* ?x50523 l_0_9_99)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x50521 (* ?x50520 l_0_9_98)))
 (let ((?x26758 (* 2.0 l_0_9_119)))
 (let ((?x26752 (* ?x26758 l_0_9_97)))
 (let ((?x53578 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_122) ?x26752) ?x50521) ?x50524) ?x50526)))
 (let ((?x53585 (- (- (- (- (- (- (- ?x53578 ?x50528) ?x50530) ?x50532) ?x39297) ?x39175) ?x39180) ?x39184)))
 (= ?x53585 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50211 (* 2.0 l_0_9_235)))
 (let ((?x51266 (* ?x50211 l_0_9_265)))
 (let ((?x50208 (* 2.0 l_0_9_234)))
 (let ((?x51264 (* ?x50208 l_0_9_264)))
 (let ((?x50205 (* 2.0 l_0_9_233)))
 (let ((?x51262 (* ?x50205 l_0_9_263)))
 (let ((?x50202 (* 2.0 l_0_9_232)))
 (let ((?x51260 (* ?x50202 l_0_9_262)))
 (let ((?x48722 (* 2.0 l_0_9_145)))
 (let ((?x50602 (* ?x48722 l_0_9_175)))
 (let ((?x48719 (* 2.0 l_0_9_144)))
 (let ((?x50600 (* ?x48719 l_0_9_174)))
 (let ((?x48716 (* 2.0 l_0_9_143)))
 (let ((?x50598 (* ?x48716 l_0_9_173)))
 (let ((?x48713 (* 2.0 l_0_9_142)))
 (let ((?x50596 (* ?x48713 l_0_9_172)))
 (let ((?x50593 (* 2.0 l_0_9_129)))
 (let ((?x50594 (* ?x50593 l_0_9_99)))
 (let ((?x50590 (* 2.0 l_0_9_128)))
 (let ((?x50591 (* ?x50590 l_0_9_98)))
 (let ((?x50587 (* 2.0 l_0_9_127)))
 (let ((?x50588 (* ?x50587 l_0_9_97)))
 (let ((?x16257 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_130) ?x50588) ?x50591) ?x50594) ?x50596)))
 (let ((?x42385 (- (- (- (- (- (- (- ?x16257 ?x50598) ?x50600) ?x50602) ?x51260) ?x51262) ?x51264) ?x51266)))
 (= ?x42385 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51319 (* l_0_9_240 l_0_9_240)))
 (let ((?x51317 (* l_0_9_239 l_0_9_239)))
 (let ((?x51315 (* l_0_9_238 l_0_9_238)))
 (let ((?x51313 (* l_0_9_237 l_0_9_237)))
 (let ((?x51311 (* l_0_9_236 l_0_9_236)))
 (let ((?x14734 (* l_0_9_150 l_0_9_150)))
 (let ((?x41555 (* l_0_9_149 l_0_9_149)))
 (let ((?x41543 (* l_0_9_148 l_0_9_148)))
 (let ((?x41511 (* l_0_9_147 l_0_9_147)))
 (let ((?x41495 (* l_0_9_146 l_0_9_146)))
 (let ((?x41525 (* l_0_9_105 l_0_9_105)))
 (let ((?x28776 (* l_0_9_104 l_0_9_104)))
 (let ((?x41569 (* l_0_9_103 l_0_9_103)))
 (let ((?x42449 (+ (+ (+ (* l_0_9_101 l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x41569) ?x28776)))
 (let ((?x53588 (- (- (- (- (- (- (+ ?x42449 ?x41525) ?x41495) ?x41511) ?x41543) ?x41555) ?x14734) ?x51311)))
 (= (- (- (- (- ?x53588 ?x51313) ?x51315) ?x51317) ?x51319) 0.0)))))))))))))))))
(assert
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51385 (* ?x51384 l_0_9_245)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51382 (* ?x51381 l_0_9_244)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51379 (* ?x51378 l_0_9_243)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51376 (* ?x51375 l_0_9_242)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51373 (* ?x51372 l_0_9_241)))
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x48807 (* ?x48806 l_0_9_155)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x48804 (* ?x48803 l_0_9_154)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x48801 (* ?x48800 l_0_9_153)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x48798 (* ?x48797 l_0_9_152)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x48795 (* ?x48794 l_0_9_151)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x48786 (* ?x48785 l_0_9_110)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x48783 (* ?x48782 l_0_9_109)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x48780 (* ?x48779 l_0_9_108)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x48777 (* ?x48767 l_0_9_107)))
 (let ((?x29897 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_106) ?x48777) ?x48780) ?x48783) ?x48786)))
 (let ((?x53614 (- (- (- (- (- (- (- ?x29897 ?x48795) ?x48798) ?x48801) ?x48804) ?x48807) ?x51373) ?x51376)))
 (= (- (- (- ?x53614 ?x51379) ?x51382) ?x51385) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51412 (* ?x51384 l_0_9_251)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x39348 (* ?x51381 l_0_9_250)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x11776 (* ?x51378 l_0_9_249)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x11785 (* ?x51375 l_0_9_248)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x39292 (* ?x51372 l_0_9_247)))
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52600 (* ?x48806 l_0_9_161)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52598 (* ?x48803 l_0_9_160)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52596 (* ?x48800 l_0_9_159)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52594 (* ?x48797 l_0_9_158)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52592 (* ?x48794 l_0_9_157)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52590 (* ?x48785 l_0_9_116)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52588 (* ?x48782 l_0_9_115)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52586 (* ?x48779 l_0_9_114)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52584 (* ?x48767 l_0_9_113)))
 (let ((?x53629 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_112) ?x52584) ?x52586) ?x52588) ?x52590)))
 (let ((?x53636 (- (- (- (- (- (- (- ?x53629 ?x52592) ?x52594) ?x52596) ?x52598) ?x52600) ?x39292) ?x11785)))
 (= (- (- (- ?x53636 ?x11776) ?x39348) ?x51412) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51454 (* ?x51384 l_0_9_258)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51452 (* ?x51381 l_0_9_257)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51450 (* ?x51378 l_0_9_256)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51448 (* ?x51375 l_0_9_255)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51446 (* ?x51372 l_0_9_254)))
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52635 (* ?x48806 l_0_9_168)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52633 (* ?x48803 l_0_9_167)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52631 (* ?x48800 l_0_9_166)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52629 (* ?x48797 l_0_9_165)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52627 (* ?x48794 l_0_9_164)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52625 (* ?x48785 l_0_9_123)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x28823 (* ?x48782 l_0_9_122)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x41599 (* ?x48779 l_0_9_121)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x28822 (* ?x48767 l_0_9_120)))
 (let ((?x16548 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_119) ?x28822) ?x41599) ?x28823) ?x52625)))
 (let ((?x42493 (- (- (- (- (- (- (- ?x16548 ?x52627) ?x52629) ?x52631) ?x52633) ?x52635) ?x51446) ?x51448)))
 (= (- (- (- ?x42493 ?x51450) ?x51452) ?x51454) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51384 (* 2.0 l_0_9_240)))
 (let ((?x51546 (* ?x51384 l_0_9_266)))
 (let ((?x51381 (* 2.0 l_0_9_239)))
 (let ((?x51544 (* ?x51381 l_0_9_265)))
 (let ((?x51378 (* 2.0 l_0_9_238)))
 (let ((?x51542 (* ?x51378 l_0_9_264)))
 (let ((?x51375 (* 2.0 l_0_9_237)))
 (let ((?x51540 (* ?x51375 l_0_9_263)))
 (let ((?x51372 (* 2.0 l_0_9_236)))
 (let ((?x51538 (* ?x51372 l_0_9_262)))
 (let ((?x48806 (* 2.0 l_0_9_150)))
 (let ((?x52685 (* ?x48806 l_0_9_176)))
 (let ((?x48803 (* 2.0 l_0_9_149)))
 (let ((?x52683 (* ?x48803 l_0_9_175)))
 (let ((?x48800 (* 2.0 l_0_9_148)))
 (let ((?x52681 (* ?x48800 l_0_9_174)))
 (let ((?x48797 (* 2.0 l_0_9_147)))
 (let ((?x52679 (* ?x48797 l_0_9_173)))
 (let ((?x48794 (* 2.0 l_0_9_146)))
 (let ((?x52677 (* ?x48794 l_0_9_172)))
 (let ((?x48785 (* 2.0 l_0_9_105)))
 (let ((?x52675 (* ?x48785 l_0_9_131)))
 (let ((?x48782 (* 2.0 l_0_9_104)))
 (let ((?x52665 (* ?x48782 l_0_9_130)))
 (let ((?x48779 (* 2.0 l_0_9_103)))
 (let ((?x52662 (* ?x48779 l_0_9_129)))
 (let ((?x48767 (* 2.0 l_0_9_102)))
 (let ((?x52658 (* ?x48767 l_0_9_128)))
 (let ((?x42610 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_127) ?x52658) ?x52662) ?x52665) ?x52675)))
 (let ((?x42586 (- (- (- (- (- (- (- ?x42610 ?x52677) ?x52679) ?x52681) ?x52683) ?x52685) ?x51538) ?x51540)))
 (= (- (- (- ?x42586 ?x51542) ?x51544) ?x51546) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51629 (* l_0_9_246 l_0_9_246)))
 (let ((?x51627 (* l_0_9_245 l_0_9_245)))
 (let ((?x51625 (* l_0_9_244 l_0_9_244)))
 (let ((?x51623 (* l_0_9_243 l_0_9_243)))
 (let ((?x51621 (* l_0_9_242 l_0_9_242)))
 (let ((?x51619 (* l_0_9_241 l_0_9_241)))
 (let ((?x48861 (* l_0_9_156 l_0_9_156)))
 (let ((?x48859 (* l_0_9_155 l_0_9_155)))
 (let ((?x48857 (* l_0_9_154 l_0_9_154)))
 (let ((?x48855 (* l_0_9_153 l_0_9_153)))
 (let ((?x48853 (* l_0_9_152 l_0_9_152)))
 (let ((?x48851 (* l_0_9_151 l_0_9_151)))
 (let ((?x48849 (* l_0_9_111 l_0_9_111)))
 (let ((?x48847 (* l_0_9_110 l_0_9_110)))
 (let ((?x48845 (* l_0_9_109 l_0_9_109)))
 (let ((?x48843 (* l_0_9_108 l_0_9_108)))
 (let ((?x42692 (+ (+ (+ (* l_0_9_106 l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x48843) ?x48845)))
 (let ((?x42644 (- (- (- (- (- (+ (+ ?x42692 ?x48847) ?x48849) ?x48851) ?x48853) ?x48855) ?x48857) ?x48859)))
 (let ((?x16695 (- (- (- (- (- (- (- ?x42644 ?x48861) ?x51619) ?x51621) ?x51623) ?x51625) ?x51627) ?x51629)))
 (= ?x16695 0.0)))))))))))))))))))))
(assert
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x51668 (* ?x48372 l_0_9_252)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x51666 (* ?x48369 l_0_9_251)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x51664 (* ?x48366 l_0_9_250)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x51662 (* ?x48363 l_0_9_249)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x51660 (* ?x48360 l_0_9_248)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x51658 (* ?x48357 l_0_9_247)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48915 (* ?x48512 l_0_9_162)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48913 (* ?x48509 l_0_9_161)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48911 (* ?x48506 l_0_9_160)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48909 (* ?x48503 l_0_9_159)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48907 (* ?x48500 l_0_9_158)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48905 (* ?x48497 l_0_9_157)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48903 (* ?x48494 l_0_9_117)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48901 (* ?x48491 l_0_9_116)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48899 (* ?x48488 l_0_9_115)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48897 (* ?x48485 l_0_9_114)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x8346 (* ?x48482 l_0_9_113)))
 (let ((?x53658 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_112) ?x8346) ?x48897) ?x48899) ?x48901)))
 (let ((?x53665 (- (- (- (- (- (- (+ ?x53658 ?x48903) ?x48905) ?x48907) ?x48909) ?x48911) ?x48913) ?x48915)))
 (= (- (- (- (- (- (- ?x53665 ?x51658) ?x51660) ?x51662) ?x51664) ?x51666) ?x51668) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48372 (* 2.0 l_0_9_246)))
 (let ((?x51722 (* ?x48372 l_0_9_267)))
 (let ((?x48369 (* 2.0 l_0_9_245)))
 (let ((?x51720 (* ?x48369 l_0_9_266)))
 (let ((?x48366 (* 2.0 l_0_9_244)))
 (let ((?x51718 (* ?x48366 l_0_9_265)))
 (let ((?x48363 (* 2.0 l_0_9_243)))
 (let ((?x51716 (* ?x48363 l_0_9_264)))
 (let ((?x48360 (* 2.0 l_0_9_242)))
 (let ((?x51714 (* ?x48360 l_0_9_263)))
 (let ((?x48357 (* 2.0 l_0_9_241)))
 (let ((?x51712 (* ?x48357 l_0_9_262)))
 (let ((?x48512 (* 2.0 l_0_9_156)))
 (let ((?x48998 (* ?x48512 l_0_9_177)))
 (let ((?x48509 (* 2.0 l_0_9_155)))
 (let ((?x48996 (* ?x48509 l_0_9_176)))
 (let ((?x48506 (* 2.0 l_0_9_154)))
 (let ((?x48994 (* ?x48506 l_0_9_175)))
 (let ((?x48503 (* 2.0 l_0_9_153)))
 (let ((?x48992 (* ?x48503 l_0_9_174)))
 (let ((?x48500 (* 2.0 l_0_9_152)))
 (let ((?x48990 (* ?x48500 l_0_9_173)))
 (let ((?x48497 (* 2.0 l_0_9_151)))
 (let ((?x48988 (* ?x48497 l_0_9_172)))
 (let ((?x48494 (* 2.0 l_0_9_111)))
 (let ((?x48986 (* ?x48494 l_0_9_132)))
 (let ((?x48491 (* 2.0 l_0_9_110)))
 (let ((?x48984 (* ?x48491 l_0_9_131)))
 (let ((?x48488 (* 2.0 l_0_9_109)))
 (let ((?x48982 (* ?x48488 l_0_9_130)))
 (let ((?x48485 (* 2.0 l_0_9_108)))
 (let ((?x48980 (* ?x48485 l_0_9_129)))
 (let ((?x48482 (* 2.0 l_0_9_107)))
 (let ((?x37236 (* ?x48482 l_0_9_128)))
 (let ((?x42755 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_127) ?x37236) ?x48980) ?x48982) ?x48984)))
 (let ((?x42720 (- (- (- (- (- (- (+ ?x42755 ?x48986) ?x48988) ?x48990) ?x48992) ?x48994) ?x48996) ?x48998)))
 (= (- (- (- (- (- (- ?x42720 ?x51712) ?x51714) ?x51716) ?x51718) ?x51720) ?x51722) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51778 (* l_0_9_253 l_0_9_253)))
 (let ((?x51776 (* l_0_9_252 l_0_9_252)))
 (let ((?x51774 (* l_0_9_251 l_0_9_251)))
 (let ((?x51772 (* l_0_9_250 l_0_9_250)))
 (let ((?x51769 (* l_0_9_249 l_0_9_249)))
 (let ((?x51767 (* l_0_9_248 l_0_9_248)))
 (let ((?x51765 (* l_0_9_247 l_0_9_247)))
 (let ((?x52746 (* l_0_9_163 l_0_9_163)))
 (let ((?x52744 (* l_0_9_162 l_0_9_162)))
 (let ((?x52742 (* l_0_9_161 l_0_9_161)))
 (let ((?x52740 (* l_0_9_160 l_0_9_160)))
 (let ((?x52738 (* l_0_9_159 l_0_9_159)))
 (let ((?x52736 (* l_0_9_158 l_0_9_158)))
 (let ((?x52734 (* l_0_9_157 l_0_9_157)))
 (let ((?x52732 (* l_0_9_118 l_0_9_118)))
 (let ((?x52730 (* l_0_9_117 l_0_9_117)))
 (let ((?x52728 (* l_0_9_116 l_0_9_116)))
 (let ((?x52726 (* l_0_9_115 l_0_9_115)))
 (let ((?x52716 (* l_0_9_114 l_0_9_114)))
 (let ((?x42824 (+ (+ (+ (* l_0_9_112 l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52716) ?x52726)))
 (let ((?x17039 (- (- (- (- (+ (+ (+ ?x42824 ?x52728) ?x52730) ?x52732) ?x52734) ?x52736) ?x52738) ?x52740)))
 (let ((?x16995 (- (- (- (- (- (- (- ?x17039 ?x52742) ?x52744) ?x52746) ?x51765) ?x51767) ?x51769) ?x51772)))
 (= (- (- (- ?x16995 ?x51774) ?x51776) ?x51778) 0.0))))))))))))))))))))))))
(assert
 (let ((?x51829 (* 2.0 l_0_9_253)))
 (let ((?x51830 (* ?x51829 l_0_9_260)))
 (let ((?x51826 (* 2.0 l_0_9_252)))
 (let ((?x51827 (* ?x51826 l_0_9_259)))
 (let ((?x51823 (* 2.0 l_0_9_251)))
 (let ((?x51824 (* ?x51823 l_0_9_258)))
 (let ((?x51820 (* 2.0 l_0_9_250)))
 (let ((?x51821 (* ?x51820 l_0_9_257)))
 (let ((?x51816 (* 2.0 l_0_9_249)))
 (let ((?x51817 (* ?x51816 l_0_9_256)))
 (let ((?x51813 (* 2.0 l_0_9_248)))
 (let ((?x51814 (* ?x51813 l_0_9_255)))
 (let ((?x51810 (* 2.0 l_0_9_247)))
 (let ((?x51811 (* ?x51810 l_0_9_254)))
 (let ((?x52287 (* 2.0 l_0_9_163)))
 (let ((?x52798 (* ?x52287 l_0_9_170)))
 (let ((?x52284 (* 2.0 l_0_9_162)))
 (let ((?x52796 (* ?x52284 l_0_9_169)))
 (let ((?x52281 (* 2.0 l_0_9_161)))
 (let ((?x52794 (* ?x52281 l_0_9_168)))
 (let ((?x52278 (* 2.0 l_0_9_160)))
 (let ((?x52792 (* ?x52278 l_0_9_167)))
 (let ((?x52275 (* 2.0 l_0_9_159)))
 (let ((?x52790 (* ?x52275 l_0_9_166)))
 (let ((?x52272 (* 2.0 l_0_9_158)))
 (let ((?x52788 (* ?x52272 l_0_9_165)))
 (let ((?x52269 (* 2.0 l_0_9_157)))
 (let ((?x52786 (* ?x52269 l_0_9_164)))
 (let ((?x52264 (* 2.0 l_0_9_118)))
 (let ((?x52784 (* ?x52264 l_0_9_125)))
 (let ((?x52261 (* 2.0 l_0_9_117)))
 (let ((?x52782 (* ?x52261 l_0_9_124)))
 (let ((?x52258 (* 2.0 l_0_9_116)))
 (let ((?x52780 (* ?x52258 l_0_9_123)))
 (let ((?x52255 (* 2.0 l_0_9_115)))
 (let ((?x52778 (* ?x52255 l_0_9_122)))
 (let ((?x37891 (* 2.0 l_0_9_114)))
 (let ((?x52776 (* ?x37891 l_0_9_121)))
 (let ((?x37873 (* 2.0 l_0_9_113)))
 (let ((?x52774 (* ?x37873 l_0_9_120)))
 (let ((?x53679 (+ (+ (+ (+ (* (* 2.0 l_0_9_112) l_0_9_119) ?x52774) ?x52776) ?x52778) ?x52780)))
 (let ((?x53686 (- (- (- (- (- (+ (+ ?x53679 ?x52782) ?x52784) ?x52786) ?x52788) ?x52790) ?x52792) ?x52794)))
 (let ((?x53693 (- (- (- (- (- (- (- ?x53686 ?x52796) ?x52798) ?x51811) ?x51814) ?x51817) ?x51821) ?x51824)))
 (= (- (- ?x53693 ?x51827) ?x51830) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51959 (* l_0_9_261 l_0_9_261)))
 (let ((?x51957 (* l_0_9_260 l_0_9_260)))
 (let ((?x51955 (* l_0_9_259 l_0_9_259)))
 (let ((?x51953 (* l_0_9_258 l_0_9_258)))
 (let ((?x51951 (* l_0_9_257 l_0_9_257)))
 (let ((?x51949 (* l_0_9_256 l_0_9_256)))
 (let ((?x51947 (* l_0_9_255 l_0_9_255)))
 (let ((?x51946 (* l_0_9_254 l_0_9_254)))
 (let ((?x52868 (* l_0_9_171 l_0_9_171)))
 (let ((?x52866 (* l_0_9_170 l_0_9_170)))
 (let ((?x52864 (* l_0_9_169 l_0_9_169)))
 (let ((?x52862 (* l_0_9_168 l_0_9_168)))
 (let ((?x52860 (* l_0_9_167 l_0_9_167)))
 (let ((?x52858 (* l_0_9_166 l_0_9_166)))
 (let ((?x52856 (* l_0_9_165 l_0_9_165)))
 (let ((?x52854 (* l_0_9_164 l_0_9_164)))
 (let ((?x52852 (* l_0_9_126 l_0_9_126)))
 (let ((?x52850 (* l_0_9_125 l_0_9_125)))
 (let ((?x52848 (* l_0_9_124 l_0_9_124)))
 (let ((?x52846 (* l_0_9_123 l_0_9_123)))
 (let ((?x52844 (* l_0_9_122 l_0_9_122)))
 (let ((?x52842 (* l_0_9_121 l_0_9_121)))
 (let ((?x53700 (+ (+ (+ (* l_0_9_119 l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52842) ?x52844)))
 (let ((?x53707 (- (- (- (+ (+ (+ (+ ?x53700 ?x52846) ?x52848) ?x52850) ?x52852) ?x52854) ?x52856) ?x52858)))
 (let ((?x53714 (- (- (- (- (- (- (- ?x53707 ?x52860) ?x52862) ?x52864) ?x52866) ?x52868) ?x51946) ?x51947)))
 (= (- (- (- (- (- (- ?x53714 ?x51949) ?x51951) ?x51953) ?x51955) ?x51957) ?x51959) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x52012 (* (* 2.0 l_0_9_261) l_0_9_269)))
 (let ((?x52009 (* (* 2.0 l_0_9_260) l_0_9_268)))
 (let ((?x52006 (* (* 2.0 l_0_9_259) l_0_9_267)))
 (let ((?x52003 (* (* 2.0 l_0_9_258) l_0_9_266)))
 (let ((?x52000 (* (* 2.0 l_0_9_257) l_0_9_265)))
 (let ((?x51997 (* (* 2.0 l_0_9_256) l_0_9_264)))
 (let ((?x51994 (* (* 2.0 l_0_9_255) l_0_9_263)))
 (let ((?x51992 (* (* 2.0 l_0_9_254) l_0_9_262)))
 (let ((?x52947 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52944 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52941 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52938 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52935 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52932 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52929 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52926 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52923 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52920 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52917 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52914 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52911 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x50523 (* 2.0 l_0_9_121)))
 (let ((?x52908 (* ?x50523 l_0_9_129)))
 (let ((?x50520 (* 2.0 l_0_9_120)))
 (let ((?x52906 (* ?x50520 l_0_9_128)))
 (let ((?x53743 (+ (+ (+ (+ (* (* 2.0 l_0_9_119) l_0_9_127) ?x52906) ?x52908) ?x52911) ?x52914)))
 (let ((?x53750 (- (- (- (- (+ (+ (+ ?x53743 ?x52917) ?x52920) ?x52923) ?x52926) ?x52929) ?x52932) ?x52935)))
 (let ((?x53757 (- (- (- (- (- (- (- ?x53750 ?x52938) ?x52941) ?x52944) ?x52947) ?x51992) ?x51994) ?x51997)))
 (= (- (- (- (- (- ?x53757 ?x52000) ?x52003) ?x52006) ?x52009) ?x52012) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52088 (* l_0_9_270 l_0_9_270)))
 (let ((?x52086 (* l_0_9_269 l_0_9_269)))
 (let ((?x52084 (* l_0_9_268 l_0_9_268)))
 (let ((?x52082 (* l_0_9_267 l_0_9_267)))
 (let ((?x52080 (* l_0_9_266 l_0_9_266)))
 (let ((?x52078 (* l_0_9_265 l_0_9_265)))
 (let ((?x52076 (* l_0_9_264 l_0_9_264)))
 (let ((?x52074 (* l_0_9_263 l_0_9_263)))
 (let ((?x52073 (* l_0_9_262 l_0_9_262)))
 (let ((?x53031 (* l_0_9_180 l_0_9_180)))
 (let ((?x53029 (* l_0_9_179 l_0_9_179)))
 (let ((?x53027 (* l_0_9_178 l_0_9_178)))
 (let ((?x53025 (* l_0_9_177 l_0_9_177)))
 (let ((?x53023 (* l_0_9_176 l_0_9_176)))
 (let ((?x53021 (* l_0_9_175 l_0_9_175)))
 (let ((?x53019 (* l_0_9_174 l_0_9_174)))
 (let ((?x53017 (* l_0_9_173 l_0_9_173)))
 (let ((?x53015 (* l_0_9_172 l_0_9_172)))
 (let ((?x53013 (* l_0_9_135 l_0_9_135)))
 (let ((?x53011 (* l_0_9_134 l_0_9_134)))
 (let ((?x53009 (* l_0_9_133 l_0_9_133)))
 (let ((?x53007 (* l_0_9_132 l_0_9_132)))
 (let ((?x52994 (* l_0_9_131 l_0_9_131)))
 (let ((?x52991 (* l_0_9_130 l_0_9_130)))
 (let ((?x52987 (* l_0_9_129 l_0_9_129)))
 (let ((?x43044 (+ (+ (+ (* l_0_9_127 l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52987) ?x52991)))
 (let ((?x53766 (- (- (+ (+ (+ (+ (+ ?x43044 ?x52994) ?x53007) ?x53009) ?x53011) ?x53013) ?x53015) ?x53017)))
 (let ((?x53773 (- (- (- (- (- (- (- ?x53766 ?x53019) ?x53021) ?x53023) ?x53025) ?x53027) ?x53029) ?x53031)))
 (let ((?x53780 (- (- (- (- (- (- (- ?x53773 ?x52073) ?x52074) ?x52076) ?x52078) ?x52080) ?x52082) ?x52084)))
 (= (- (- ?x53780 ?x52086) ?x52088) 0.0)))))))))))))))))))))))))))))))
(assert
 (= (- (* (* (- 1.0) l_0_9_181) l_0_9_181) (* l_0_9_271 l_0_9_271)) 0.0))
(assert
 (let ((?x53817 (- (* (* (- 2.0) l_0_9_181) l_0_9_182) (* (* 2.0 l_0_9_271) l_0_9_272))))
 (= ?x53817 0.0)))
(assert
 (let ((?x53828 (- (* (* (- 2.0) l_0_9_181) l_0_9_187) (* (* 2.0 l_0_9_271) l_0_9_277))))
 (= ?x53828 0.0)))
(assert
 (let ((?x53839 (- (* (* (- 2.0) l_0_9_181) l_0_9_196) (* (* 2.0 l_0_9_271) l_0_9_286))))
 (= ?x53839 0.0)))
(assert
 (let ((?x53854 (- (* (* (- 2.0) l_0_9_181) l_0_9_202) (* (* 2.0 l_0_9_271) l_0_9_292))))
 (= ?x53854 0.0)))
(assert
 (let ((?x53866 (- (* (* (- 2.0) l_0_9_181) l_0_9_209) (* (* 2.0 l_0_9_271) l_0_9_299))))
 (= ?x53866 0.0)))
(assert
 (let ((?x53877 (- (* (* (- 2.0) l_0_9_181) l_0_9_217) (* (* 2.0 l_0_9_271) l_0_9_307))))
 (= ?x53877 0.0)))
(assert
 (let ((?x53897 (* l_0_9_273 l_0_9_273)))
 (let ((?x53895 (* l_0_9_272 l_0_9_272)))
 (let ((?x53894 (- (* (* (- 1.0) l_0_9_182) l_0_9_182) (* (* 1.0 l_0_9_183) l_0_9_183))))
 (= (- (- ?x53894 ?x53895) ?x53897) 0.0)))))
(assert
 (let ((?x53916 (- (* (* (- 2.0) l_0_9_182) l_0_9_187) (* (* 2.0 l_0_9_183) l_0_9_188))))
 (let ((?x53920 (- (- ?x53916 (* (* 2.0 l_0_9_272) l_0_9_277)) (* (* 2.0 l_0_9_273) l_0_9_278))))
 (= ?x53920 0.0))))
(assert
 (let ((?x53938 (- (* (* (- 2.0) l_0_9_182) l_0_9_196) (* (* 2.0 l_0_9_183) l_0_9_197))))
 (let ((?x53942 (- (- ?x53938 (* (* 2.0 l_0_9_272) l_0_9_286)) (* (* 2.0 l_0_9_273) l_0_9_287))))
 (= ?x53942 0.0))))
(assert
 (let ((?x53959 (- (* (* (- 2.0) l_0_9_182) l_0_9_202) (* (* 2.0 l_0_9_183) l_0_9_203))))
 (let ((?x53963 (- (- ?x53959 (* (* 2.0 l_0_9_272) l_0_9_292)) (* (* 2.0 l_0_9_273) l_0_9_293))))
 (= ?x53963 0.0))))
(assert
 (let ((?x53982 (- (* (* (- 2.0) l_0_9_182) l_0_9_217) (* (* 2.0 l_0_9_183) l_0_9_218))))
 (let ((?x53986 (- (- ?x53982 (* (* 2.0 l_0_9_272) l_0_9_307)) (* (* 2.0 l_0_9_273) l_0_9_308))))
 (= ?x53986 0.0))))
(assert
 (let ((?x54020 (* l_0_9_280 l_0_9_280)))
 (let ((?x54018 (* l_0_9_279 l_0_9_279)))
 (let ((?x54016 (* l_0_9_278 l_0_9_278)))
 (let ((?x54014 (* l_0_9_277 l_0_9_277)))
 (let ((?x54007 (- (* (* (- 1.0) l_0_9_187) l_0_9_187) (* (* 1.0 l_0_9_188) l_0_9_188))))
 (let ((?x54013 (- (- ?x54007 (* (* 1.0 l_0_9_189) l_0_9_189)) (* (* 1.0 l_0_9_190) l_0_9_190))))
 (= (- (- (- (- ?x54013 ?x54014) ?x54016) ?x54018) ?x54020) 0.0))))))))
(assert
 (let ((?x54042 (- (* (* (- 2.0) l_0_9_187) l_0_9_196) (* (* 2.0 l_0_9_188) l_0_9_197))))
 (let ((?x54046 (- (- ?x54042 (* (* 2.0 l_0_9_189) l_0_9_198)) (* (* 2.0 l_0_9_190) l_0_9_199))))
 (let ((?x54050 (- (- ?x54046 (* (* 2.0 l_0_9_277) l_0_9_286)) (* (* 2.0 l_0_9_278) l_0_9_287))))
 (let ((?x54054 (- (- ?x54050 (* (* 2.0 l_0_9_279) l_0_9_288)) (* (* 2.0 l_0_9_280) l_0_9_289))))
 (= ?x54054 0.0))))))
(assert
 (let ((?x54093 (- (* (* (- 2.0) l_0_9_187) l_0_9_209) (* (* 2.0 l_0_9_188) l_0_9_210))))
 (let ((?x54097 (- (- ?x54093 (* (* 2.0 l_0_9_189) l_0_9_211)) (* (* 2.0 l_0_9_190) l_0_9_212))))
 (let ((?x54101 (- (- ?x54097 (* (* 2.0 l_0_9_277) l_0_9_299)) (* (* 2.0 l_0_9_278) l_0_9_300))))
 (let ((?x54105 (- (- ?x54101 (* (* 2.0 l_0_9_279) l_0_9_301)) (* (* 2.0 l_0_9_280) l_0_9_302))))
 (= ?x54105 0.0))))))
(assert
 (let ((?x54133 (- (* (* (- 2.0) l_0_9_187) l_0_9_217) (* (* 2.0 l_0_9_188) l_0_9_218))))
 (let ((?x54137 (- (- ?x54133 (* (* 2.0 l_0_9_189) l_0_9_219)) (* (* 2.0 l_0_9_190) l_0_9_220))))
 (let ((?x54141 (- (- ?x54137 (* (* 2.0 l_0_9_277) l_0_9_307)) (* (* 2.0 l_0_9_278) l_0_9_308))))
 (let ((?x54145 (- (- ?x54141 (* (* 2.0 l_0_9_279) l_0_9_309)) (* (* 2.0 l_0_9_280) l_0_9_310))))
 (= ?x54145 0.0))))))
(assert
 (let ((?x54201 (* l_0_9_291 l_0_9_291)))
 (let ((?x54199 (* l_0_9_290 l_0_9_290)))
 (let ((?x54197 (* l_0_9_289 l_0_9_289)))
 (let ((?x54195 (* l_0_9_288 l_0_9_288)))
 (let ((?x54193 (* l_0_9_287 l_0_9_287)))
 (let ((?x54191 (* l_0_9_286 l_0_9_286)))
 (let ((?x54178 (- (* (* (- 1.0) l_0_9_196) l_0_9_196) (* (* 1.0 l_0_9_197) l_0_9_197))))
 (let ((?x54184 (- (- ?x54178 (* (* 1.0 l_0_9_198) l_0_9_198)) (* (* 1.0 l_0_9_199) l_0_9_199))))
 (let ((?x54190 (- (- ?x54184 (* (* 1.0 l_0_9_200) l_0_9_200)) (* (* 1.0 l_0_9_201) l_0_9_201))))
 (= (- (- (- (- (- (- ?x54190 ?x54191) ?x54193) ?x54195) ?x54197) ?x54199) ?x54201) 0.0)))))))))))
(assert
 (let ((?x54233 (- (* (* (- 2.0) l_0_9_196) l_0_9_202) (* (* 2.0 l_0_9_197) l_0_9_203))))
 (let ((?x54237 (- (- ?x54233 (* (* 2.0 l_0_9_198) l_0_9_204)) (* (* 2.0 l_0_9_199) l_0_9_205))))
 (let ((?x54241 (- (- ?x54237 (* (* 2.0 l_0_9_200) l_0_9_206)) (* (* 2.0 l_0_9_201) l_0_9_207))))
 (let ((?x54245 (- (- ?x54241 (* (* 2.0 l_0_9_286) l_0_9_292)) (* (* 2.0 l_0_9_287) l_0_9_293))))
 (let ((?x54249 (- (- ?x54245 (* (* 2.0 l_0_9_288) l_0_9_294)) (* (* 2.0 l_0_9_289) l_0_9_295))))
 (let ((?x54253 (- (- ?x54249 (* (* 2.0 l_0_9_290) l_0_9_296)) (* (* 2.0 l_0_9_291) l_0_9_297))))
 (= ?x54253 0.0))))))))
(assert
 (let ((?x54283 (- (* (* (- 2.0) l_0_9_196) l_0_9_217) (* (* 2.0 l_0_9_197) l_0_9_218))))
 (let ((?x54287 (- (- ?x54283 (* (* 2.0 l_0_9_198) l_0_9_219)) (* (* 2.0 l_0_9_199) l_0_9_220))))
 (let ((?x54291 (- (- ?x54287 (* (* 2.0 l_0_9_200) l_0_9_221)) (* (* 2.0 l_0_9_201) l_0_9_222))))
 (let ((?x54295 (- (- ?x54291 (* (* 2.0 l_0_9_286) l_0_9_307)) (* (* 2.0 l_0_9_287) l_0_9_308))))
 (let ((?x54299 (- (- ?x54295 (* (* 2.0 l_0_9_288) l_0_9_309)) (* (* 2.0 l_0_9_289) l_0_9_310))))
 (let ((?x54303 (- (- ?x54299 (* (* 2.0 l_0_9_290) l_0_9_311)) (* (* 2.0 l_0_9_291) l_0_9_312))))
 (= ?x54303 0.0))))))))
(assert
 (let ((?x54387 (* l_0_9_298 l_0_9_298)))
 (let ((?x54385 (* l_0_9_297 l_0_9_297)))
 (let ((?x54383 (* l_0_9_296 l_0_9_296)))
 (let ((?x54381 (* l_0_9_295 l_0_9_295)))
 (let ((?x54379 (* l_0_9_294 l_0_9_294)))
 (let ((?x54377 (* l_0_9_293 l_0_9_293)))
 (let ((?x54375 (* l_0_9_292 l_0_9_292)))
 (let ((?x54359 (- (* (* (- 1.0) l_0_9_202) l_0_9_202) (* (* 1.0 l_0_9_203) l_0_9_203))))
 (let ((?x54365 (- (- ?x54359 (* (* 1.0 l_0_9_204) l_0_9_204)) (* (* 1.0 l_0_9_205) l_0_9_205))))
 (let ((?x54371 (- (- ?x54365 (* (* 1.0 l_0_9_206) l_0_9_206)) (* (* 1.0 l_0_9_207) l_0_9_207))))
 (let ((?x54380 (- (- (- (- ?x54371 (* (* 1.0 l_0_9_208) l_0_9_208)) ?x54375) ?x54377) ?x54379)))
 (= (- (- (- (- ?x54380 ?x54381) ?x54383) ?x54385) ?x54387) 0.0)))))))))))))
(assert
 (let ((?x54415 (- (* (* (- 2.0) l_0_9_202) l_0_9_209) (* (* 2.0 l_0_9_203) l_0_9_210))))
 (let ((?x54419 (- (- ?x54415 (* (* 2.0 l_0_9_204) l_0_9_211)) (* (* 2.0 l_0_9_205) l_0_9_212))))
 (let ((?x54423 (- (- ?x54419 (* (* 2.0 l_0_9_206) l_0_9_213)) (* (* 2.0 l_0_9_207) l_0_9_214))))
 (let ((?x54427 (- (- ?x54423 (* (* 2.0 l_0_9_208) l_0_9_215)) (* (* 2.0 l_0_9_292) l_0_9_299))))
 (let ((?x54431 (- (- ?x54427 (* (* 2.0 l_0_9_293) l_0_9_300)) (* (* 2.0 l_0_9_294) l_0_9_301))))
 (let ((?x54435 (- (- ?x54431 (* (* 2.0 l_0_9_295) l_0_9_302)) (* (* 2.0 l_0_9_296) l_0_9_303))))
 (let ((?x54439 (- (- ?x54435 (* (* 2.0 l_0_9_297) l_0_9_304)) (* (* 2.0 l_0_9_298) l_0_9_305))))
 (= ?x54439 0.0)))))))))
(assert
 (let ((?x54509 (* l_0_9_306 l_0_9_306)))
 (let ((?x54507 (* l_0_9_305 l_0_9_305)))
 (let ((?x54505 (* l_0_9_304 l_0_9_304)))
 (let ((?x54503 (* l_0_9_303 l_0_9_303)))
 (let ((?x54501 (* l_0_9_302 l_0_9_302)))
 (let ((?x54499 (* l_0_9_301 l_0_9_301)))
 (let ((?x54497 (* l_0_9_300 l_0_9_300)))
 (let ((?x54495 (* l_0_9_299 l_0_9_299)))
 (let ((?x54476 (- (* (* (- 1.0) l_0_9_209) l_0_9_209) (* (* 1.0 l_0_9_210) l_0_9_210))))
 (let ((?x54482 (- (- ?x54476 (* (* 1.0 l_0_9_211) l_0_9_211)) (* (* 1.0 l_0_9_212) l_0_9_212))))
 (let ((?x54488 (- (- ?x54482 (* (* 1.0 l_0_9_213) l_0_9_213)) (* (* 1.0 l_0_9_214) l_0_9_214))))
 (let ((?x54494 (- (- ?x54488 (* (* 1.0 l_0_9_215) l_0_9_215)) (* (* 1.0 l_0_9_216) l_0_9_216))))
 (let ((?x54508 (- (- (- (- (- (- (- ?x54494 ?x54495) ?x54497) ?x54499) ?x54501) ?x54503) ?x54505) ?x54507)))
 (= (- ?x54508 ?x54509) 0.0)))))))))))))))
(assert
 (let ((?x54550 (- (* (* (- 2.0) l_0_9_209) l_0_9_217) (* (* 2.0 l_0_9_210) l_0_9_218))))
 (let ((?x54556 (- (- ?x54550 (* (* 2.0 l_0_9_211) l_0_9_219)) (* (* 2.0 l_0_9_212) l_0_9_220))))
 (let ((?x54562 (- (- ?x54556 (* (* 2.0 l_0_9_213) l_0_9_221)) (* (* 2.0 l_0_9_214) l_0_9_222))))
 (let ((?x54568 (- (- ?x54562 (* (* 2.0 l_0_9_215) l_0_9_223)) (* (* 2.0 l_0_9_216) l_0_9_224))))
 (let ((?x54574 (- (- ?x54568 (* (* 2.0 l_0_9_299) l_0_9_307)) (* (* 2.0 l_0_9_300) l_0_9_308))))
 (let ((?x54580 (- (- ?x54574 (* (* 2.0 l_0_9_301) l_0_9_309)) (* (* 2.0 l_0_9_302) l_0_9_310))))
 (let ((?x54586 (- (- ?x54580 (* (* 2.0 l_0_9_303) l_0_9_311)) (* (* 2.0 l_0_9_304) l_0_9_312))))
 (let ((?x54592 (- (- ?x54586 (* (* 2.0 l_0_9_305) l_0_9_313)) (* (* 2.0 l_0_9_306) l_0_9_314))))
 (= ?x54592 0.0))))))))))
(assert
 (let ((?x54683 (* l_0_9_315 l_0_9_315)))
 (let ((?x54681 (* l_0_9_314 l_0_9_314)))
 (let ((?x54679 (* l_0_9_313 l_0_9_313)))
 (let ((?x54677 (* l_0_9_312 l_0_9_312)))
 (let ((?x54675 (* l_0_9_311 l_0_9_311)))
 (let ((?x54673 (* l_0_9_310 l_0_9_310)))
 (let ((?x54671 (* l_0_9_309 l_0_9_309)))
 (let ((?x54669 (* l_0_9_308 l_0_9_308)))
 (let ((?x54667 (* l_0_9_307 l_0_9_307)))
 (let ((?x54645 (- (* (* (- 1.0) l_0_9_217) l_0_9_217) (* (* 1.0 l_0_9_218) l_0_9_218))))
 (let ((?x54651 (- (- ?x54645 (* (* 1.0 l_0_9_219) l_0_9_219)) (* (* 1.0 l_0_9_220) l_0_9_220))))
 (let ((?x54657 (- (- ?x54651 (* (* 1.0 l_0_9_221) l_0_9_221)) (* (* 1.0 l_0_9_222) l_0_9_222))))
 (let ((?x54663 (- (- ?x54657 (* (* 1.0 l_0_9_223) l_0_9_223)) (* (* 1.0 l_0_9_224) l_0_9_224))))
 (let ((?x54672 (- (- (- (- ?x54663 (* (* 1.0 l_0_9_225) l_0_9_225)) ?x54667) ?x54669) ?x54671)))
 (= (- (- (- (- (- (- ?x54672 ?x54673) ?x54675) ?x54677) ?x54679) ?x54681) ?x54683) 0.0))))))))))))))))
(assert
 (>= l_0_9_1 0.0))
(assert
 (>= l_0_9_3 0.0))
(assert
 (>= l_0_9_6 0.0))
(assert
 (>= l_0_9_10 0.0))
(assert
 (>= l_0_9_15 0.0))
(assert
 (>= l_0_9_21 0.0))
(assert
 (>= l_0_9_28 0.0))
(assert
 (>= l_0_9_36 0.0))
(assert
 (>= l_0_9_45 0.0))
(assert
 (>= l_0_9_46 0.0))
(assert
 (>= l_0_9_48 0.0))
(assert
 (>= l_0_9_51 0.0))
(assert
 (>= l_0_9_55 0.0))
(assert
 (>= l_0_9_60 0.0))
(assert
 (>= l_0_9_66 0.0))
(assert
 (>= l_0_9_73 0.0))
(assert
 (>= l_0_9_81 0.0))
(assert
 (>= l_0_9_90 0.0))
(assert
 (>= l_0_9_91 0.0))
(assert
 (>= l_0_9_93 0.0))
(assert
 (>= l_0_9_96 0.0))
(assert
 (>= l_0_9_100 0.0))
(assert
 (>= l_0_9_105 0.0))
(assert
 (>= l_0_9_111 0.0))
(assert
 (>= l_0_9_118 0.0))
(assert
 (>= l_0_9_126 0.0))
(assert
 (>= l_0_9_135 0.0))
(assert
 (>= l_0_9_136 0.0))
(assert
 (>= l_0_9_138 0.0))
(assert
 (>= l_0_9_141 0.0))
(assert
 (>= l_0_9_145 0.0))
(assert
 (>= l_0_9_150 0.0))
(assert
 (>= l_0_9_156 0.0))
(assert
 (>= l_0_9_163 0.0))
(assert
 (>= l_0_9_171 0.0))
(assert
 (>= l_0_9_180 0.0))
(assert
 (>= l_0_9_181 0.0))
(assert
 (>= l_0_9_183 0.0))
(assert
 (>= l_0_9_186 0.0))
(assert
 (>= l_0_9_190 0.0))
(assert
 (>= l_0_9_195 0.0))
(assert
 (>= l_0_9_201 0.0))
(assert
 (>= l_0_9_208 0.0))
(assert
 (>= l_0_9_216 0.0))
(assert
 (>= l_0_9_225 0.0))
(assert
 (>= l_0_9_226 0.0))
(assert
 (>= l_0_9_228 0.0))
(assert
 (>= l_0_9_231 0.0))
(assert
 (>= l_0_9_235 0.0))
(assert
 (>= l_0_9_240 0.0))
(assert
 (>= l_0_9_246 0.0))
(assert
 (>= l_0_9_253 0.0))
(assert
 (>= l_0_9_261 0.0))
(assert
 (>= l_0_9_270 0.0))
(assert
 (>= l_0_9_271 0.0))
(assert
 (>= l_0_9_273 0.0))
(assert
 (>= l_0_9_276 0.0))
(assert
 (>= l_0_9_280 0.0))
(assert
 (>= l_0_9_285 0.0))
(assert
 (>= l_0_9_291 0.0))
(assert
 (>= l_0_9_298 0.0))
(assert
 (>= l_0_9_306 0.0))
(assert
 (>= l_0_9_315 0.0))
(assert
 (let ((?x54798 (* l_0_10_46 l_0_10_46)))
 (let ((?x54790 (* l_0_10_226 l_0_10_226)))
 (let ((?x54791 (+ (- (* l_0_10_1 l_0_10_1) (* (* 2.0 l_0_10_181) l_0_10_184)) ?x54790)))
 (let ((?x54797 (- (- ?x54791 (* (* 2.0 l_0_10_271) l_0_10_274)) (* (* 2.0 l_0_10_316) l_0_10_319))))
 (= (+ (- ?x54797 ?x54798) 1.0) 0.0))))))
(assert
 (let ((?x54798 (* l_0_10_46 l_0_10_46)))
 (let ((?x54817 (* (- l_0_10_1) l_0_10_1)))
 (let ((?x54823 (- (- ?x54817 (* (* 2.0 l_0_10_196) l_0_10_209)) (* (* 2.0 l_0_10_197) l_0_10_210))))
 (let ((?x54829 (- (- ?x54823 (* (* 2.0 l_0_10_198) l_0_10_211)) (* (* 2.0 l_0_10_199) l_0_10_212))))
 (let ((?x54835 (- (- ?x54829 (* (* 2.0 l_0_10_200) l_0_10_213)) (* (* 2.0 l_0_10_201) l_0_10_214))))
 (let ((?x54841 (- (- ?x54835 (* (* 2.0 l_0_10_286) l_0_10_299)) (* (* 2.0 l_0_10_287) l_0_10_300))))
 (let ((?x54847 (- (- ?x54841 (* (* 2.0 l_0_10_288) l_0_10_301)) (* (* 2.0 l_0_10_289) l_0_10_302))))
 (let ((?x54853 (- (- ?x54847 (* (* 2.0 l_0_10_290) l_0_10_303)) (* (* 2.0 l_0_10_291) l_0_10_304))))
 (let ((?x54859 (- (- ?x54853 (* (* 2.0 l_0_10_331) l_0_10_344)) (* (* 2.0 l_0_10_332) l_0_10_345))))
 (let ((?x54865 (- (- ?x54859 (* (* 2.0 l_0_10_333) l_0_10_346)) (* (* 2.0 l_0_10_334) l_0_10_347))))
 (let ((?x54871 (- (- ?x54865 (* (* 2.0 l_0_10_335) l_0_10_348)) (* (* 2.0 l_0_10_336) l_0_10_349))))
 (= (- (+ ?x54871 ?x54798) 1.0) 0.0)))))))))))))
(assert
 (let ((?x54798 (* l_0_10_46 l_0_10_46)))
 (let ((?x54817 (* (- l_0_10_1) l_0_10_1)))
 (let ((?x54938 (- (- ?x54817 (* (* 2.0 l_0_10_187) l_0_10_202)) (* (* 2.0 l_0_10_188) l_0_10_203))))
 (let ((?x54944 (- (- ?x54938 (* (* 2.0 l_0_10_189) l_0_10_204)) (* (* 2.0 l_0_10_190) l_0_10_205))))
 (let ((?x54950 (- (- ?x54944 (* (* 2.0 l_0_10_277) l_0_10_292)) (* (* 2.0 l_0_10_278) l_0_10_293))))
 (let ((?x54956 (- (- ?x54950 (* (* 2.0 l_0_10_279) l_0_10_294)) (* (* 2.0 l_0_10_280) l_0_10_295))))
 (let ((?x54962 (- (- ?x54956 (* (* 2.0 l_0_10_322) l_0_10_337)) (* (* 2.0 l_0_10_323) l_0_10_338))))
 (let ((?x54968 (- (- ?x54962 (* (* 2.0 l_0_10_324) l_0_10_339)) (* (* 2.0 l_0_10_325) l_0_10_340))))
 (= (- (+ ?x54968 ?x54798) 1.0) 0.0))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55017 (* ?x55016 l_0_10_47)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x55014 (* ?x55013 l_0_10_151)))
 (let ((?x55010 (* 2.0 l_0_10_106)))
 (let ((?x55011 (* ?x55010 l_0_10_91)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55009 (* ?x55008 l_0_10_2)))
 (= (+ (+ (- ?x55009 ?x55011) ?x55014) ?x55017) 0.0))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x55087 (* ?x55086 l_0_10_79)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x55084 (* ?x55083 l_0_10_78)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x55081 (* ?x55080 l_0_10_77)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x55078 (* ?x55077 l_0_10_76)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x55075 (* ?x55074 l_0_10_75)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x55072 (* ?x55071 l_0_10_74)))
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55069 (* ?x55016 l_0_10_49)))
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x55067 (* ?x55066 l_0_10_259)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x55064 (* ?x55063 l_0_10_258)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x55061 (* ?x55060 l_0_10_257)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x55058 (* ?x55057 l_0_10_256)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x55055 (* ?x55054 l_0_10_255)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x55052 (* ?x55051 l_0_10_254)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x55049 (* ?x55048 l_0_10_34)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x55046 (* ?x55045 l_0_10_33)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x55043 (* ?x55042 l_0_10_32)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55040 (* ?x55039 l_0_10_31)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55037 (* ?x55036 l_0_10_30)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x55034 (* ?x55033 l_0_10_29)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55032 (* ?x55008 l_0_10_4)))
 (let ((?x55053 (+ (+ (+ (+ (+ (+ (+ ?x55032 ?x55034) ?x55037) ?x55040) ?x55043) ?x55046) ?x55049) ?x55052)))
 (let ((?x55073 (- (+ (+ (+ (+ (+ (+ ?x55053 ?x55055) ?x55058) ?x55061) ?x55064) ?x55067) ?x55069) ?x55072)))
 (= (- (- (- (- (- ?x55073 ?x55075) ?x55078) ?x55081) ?x55084) ?x55087) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55156 (* ?x55016 l_0_10_52)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) ?x55156) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55207 (* ?x55016 l_0_10_56)))
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x55067 (* ?x55066 l_0_10_259)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x55064 (* ?x55063 l_0_10_258)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x55061 (* ?x55060 l_0_10_257)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x55058 (* ?x55057 l_0_10_256)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x55055 (* ?x55054 l_0_10_255)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x55052 (* ?x55051 l_0_10_254)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55199 (* ?x55198 l_0_10_169)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55196 (* ?x55195 l_0_10_168)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55193 (* ?x55192 l_0_10_167)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55190 (* ?x55189 l_0_10_166)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55187 (* ?x55186 l_0_10_165)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55184 (* ?x55183 l_0_10_164)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55181 (* ?x55180 l_0_10_124)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55178 (* ?x55177 l_0_10_123)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55175 (* ?x55174 l_0_10_122)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55172 (* ?x55171 l_0_10_121)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55169 (* ?x55168 l_0_10_120)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55160 (* ?x55008 l_0_10_11)))
 (let ((?x55176 (+ (+ (+ (+ ?x55160 (* (* 2.0 l_0_10_106) l_0_10_119)) ?x55169) ?x55172) ?x55175)))
 (let ((?x55197 (- (- (- (- (- (+ (+ ?x55176 ?x55178) ?x55181) ?x55184) ?x55187) ?x55190) ?x55193) ?x55196)))
 (let ((?x55206 (- (- (- (- (- (- (- ?x55197 ?x55199) ?x55052) ?x55055) ?x55058) ?x55061) ?x55064) ?x55067)))
 (= (+ ?x55206 ?x55207) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55265 (* ?x55016 l_0_10_61)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x55265) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55281 (* ?x55016 l_0_10_67)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_22) ?x55281) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55291 (* ?x55016 l_0_10_74)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_29) ?x55291) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55301 (* ?x55016 l_0_10_82)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55299 (* ?x55008 l_0_10_37)))
 (= (+ ?x55299 ?x55301) 0.0))))))
(assert
 (let ((?x55330 (* l_0_10_48 l_0_10_48)))
 (let ((?x55328 (* l_0_10_47 l_0_10_47)))
 (let ((?x55326 (* l_0_10_3 l_0_10_3)))
 (let ((?x55324 (* l_0_10_2 l_0_10_2)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x55322 (* ?x55321 l_0_10_152)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x55319 (* ?x55318 l_0_10_151)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55312 (* ?x55168 l_0_10_93)))
 (let ((?x55323 (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_92) ?x55312) ?x55319) ?x55322)))
 (= (+ (+ (- (- ?x55323 ?x55324) ?x55326) ?x55328) ?x55330) 0.0)))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55383 (* ?x55382 l_0_10_50)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55380 (* ?x55379 l_0_10_49)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55377 (* ?x55376 l_0_10_5)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55374 (* ?x55373 l_0_10_4)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x55371 (* ?x55370 l_0_10_153)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x55368 (* ?x55367 l_0_10_152)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x55365 (* ?x55364 l_0_10_151)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55362 (* ?x55171 l_0_10_96)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55360 (* ?x55168 l_0_10_95)))
 (let ((?x55369 (+ (+ (- (- (* (* (- 2.0) l_0_10_106) l_0_10_94) ?x55360) ?x55362) ?x55365) ?x55368)))
 (let ((?x55372 (+ ?x55369 ?x55371)))
 (= (+ (+ (- (- ?x55372 ?x55374) ?x55377) ?x55380) ?x55383) 0.0))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55454 (* ?x55382 l_0_10_53)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55452 (* ?x55379 l_0_10_52)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55450 (* ?x55376 l_0_10_8)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55448 (* ?x55373 l_0_10_7)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x55446 (* ?x55445 l_0_10_154)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x55443 (* ?x55442 l_0_10_153)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x55440 (* ?x55439 l_0_10_152)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x55437 (* ?x55436 l_0_10_151)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55434 (* ?x55171 l_0_10_99)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55432 (* ?x55168 l_0_10_98)))
 (let ((?x55010 (* 2.0 l_0_10_106)))
 (let ((?x55422 (* ?x55010 l_0_10_97)))
 (let ((?x55438 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_109) ?x55422) ?x55432) ?x55434) ?x55437)))
 (let ((?x55447 (+ (+ (+ ?x55438 ?x55440) ?x55443) ?x55446)))
 (= (+ (+ (- (- ?x55447 ?x55448) ?x55450) ?x55452) ?x55454) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55546 (* ?x55382 l_0_10_57)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55544 (* ?x55379 l_0_10_56)))
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x55542 (* ?x55541 l_0_10_155)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x55539 (* ?x55538 l_0_10_154)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x55536 (* ?x55535 l_0_10_153)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x55533 (* ?x55532 l_0_10_152)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x55530 (* ?x55529 l_0_10_151)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x55527 (* ?x55526 l_0_10_3)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x55524 (* ?x55523 l_0_10_2)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x55521 (* ?x55520 l_0_10_110)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x55518 (* ?x55517 l_0_10_109)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x55515 (* ?x55514 l_0_10_108)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x55512 (* ?x55502 l_0_10_107)))
 (let ((?x55522 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_106) ?x55512) ?x55515) ?x55518) ?x55521)))
 (let ((?x55543 (+ (+ (+ (+ (+ (- (- ?x55522 ?x55524) ?x55527) ?x55530) ?x55533) ?x55536) ?x55539) ?x55542)))
 (= (+ (+ ?x55543 ?x55544) ?x55546) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55634 (* ?x55382 l_0_10_62)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55632 (* ?x55379 l_0_10_61)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55630 (* ?x55036 l_0_10_3)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x55628 (* ?x55033 l_0_10_2)))
 (let ((?x55626 (* l_0_10_156 l_0_10_156)))
 (let ((?x55624 (* l_0_10_155 l_0_10_155)))
 (let ((?x55622 (* l_0_10_154 l_0_10_154)))
 (let ((?x55620 (* l_0_10_153 l_0_10_153)))
 (let ((?x55618 (* l_0_10_152 l_0_10_152)))
 (let ((?x55616 (* l_0_10_151 l_0_10_151)))
 (let ((?x55614 (* l_0_10_111 l_0_10_111)))
 (let ((?x55612 (* l_0_10_110 l_0_10_110)))
 (let ((?x55600 (* l_0_10_109 l_0_10_109)))
 (let ((?x55596 (* l_0_10_108 l_0_10_108)))
 (let ((?x55598 (- (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x55596)))
 (let ((?x55623 (+ (+ (+ (+ (- (- (- ?x55598 ?x55600) ?x55612) ?x55614) ?x55616) ?x55618) ?x55620) ?x55622)))
 (let ((?x55627 (+ (+ ?x55623 ?x55624) ?x55626)))
 (= (+ (+ (- (- ?x55627 ?x55628) ?x55630) ?x55632) ?x55634) 0.0)))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55708 (* ?x55382 l_0_10_68)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55706 (* ?x55379 l_0_10_67)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x55704 (* ?x55703 l_0_10_3)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55701 (* ?x55373 l_0_10_22)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55699 (* ?x55198 l_0_10_162)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55697 (* ?x55195 l_0_10_161)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55695 (* ?x55192 l_0_10_160)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55693 (* ?x55189 l_0_10_159)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55691 (* ?x55186 l_0_10_158)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55689 (* ?x55183 l_0_10_157)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55687 (* ?x55180 l_0_10_117)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55685 (* ?x55177 l_0_10_116)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55683 (* ?x55174 l_0_10_115)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55681 (* ?x55171 l_0_10_114)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55669 (* ?x55168 l_0_10_113)))
 (let ((?x55686 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x55669) ?x55681) ?x55683) ?x55685)))
 (let ((?x55700 (+ (+ (+ (+ (+ (+ (- ?x55686 ?x55687) ?x55689) ?x55691) ?x55693) ?x55695) ?x55697) ?x55699)))
 (= (+ (+ (- (- ?x55700 ?x55701) ?x55704) ?x55706) ?x55708) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55799 (* ?x55382 l_0_10_75)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55797 (* ?x55379 l_0_10_74)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55795 (* ?x55376 l_0_10_30)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55793 (* ?x55373 l_0_10_29)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55199 (* ?x55198 l_0_10_169)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55196 (* ?x55195 l_0_10_168)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55193 (* ?x55192 l_0_10_167)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55190 (* ?x55189 l_0_10_166)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55187 (* ?x55186 l_0_10_165)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55184 (* ?x55183 l_0_10_164)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55181 (* ?x55180 l_0_10_124)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55178 (* ?x55177 l_0_10_123)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55175 (* ?x55174 l_0_10_122)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55172 (* ?x55171 l_0_10_121)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55169 (* ?x55168 l_0_10_120)))
 (let ((?x55785 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_119) ?x55169) ?x55172) ?x55175) ?x55178)))
 (let ((?x55792 (+ (+ (+ (+ (+ (+ (- ?x55785 ?x55181) ?x55184) ?x55187) ?x55190) ?x55193) ?x55196) ?x55199)))
 (= (+ (+ (- (- ?x55792 ?x55793) ?x55795) ?x55797) ?x55799) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55850 (* ?x55382 l_0_10_83)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55848 (* ?x55379 l_0_10_82)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55846 (* ?x55376 l_0_10_38)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55844 (* ?x55373 l_0_10_37)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55842 (* ?x55198 l_0_10_177)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55840 (* ?x55195 l_0_10_176)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55838 (* ?x55192 l_0_10_175)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55836 (* ?x55189 l_0_10_174)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55834 (* ?x55186 l_0_10_173)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55832 (* ?x55183 l_0_10_172)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55830 (* ?x55180 l_0_10_132)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55828 (* ?x55177 l_0_10_131)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55826 (* ?x55174 l_0_10_130)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55824 (* ?x55171 l_0_10_129)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55822 (* ?x55168 l_0_10_128)))
 (let ((?x55829 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_127) ?x55822) ?x55824) ?x55826) ?x55828)))
 (let ((?x55843 (+ (+ (+ (+ (+ (+ (- ?x55829 ?x55830) ?x55832) ?x55834) ?x55836) ?x55838) ?x55840) ?x55842)))
 (= (+ (+ (- (- ?x55843 ?x55844) ?x55846) ?x55848) ?x55850) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55904 (* l_0_10_6 l_0_10_6)))
 (let ((?x55902 (* l_0_10_51 l_0_10_51)))
 (let ((?x55900 (* l_0_10_50 l_0_10_50)))
 (let ((?x55898 (* l_0_10_5 l_0_10_5)))
 (let ((?x55901 (+ (- (+ (* (- l_0_10_4) l_0_10_4) (* l_0_10_49 l_0_10_49)) ?x55898) ?x55900)))
 (= (- (+ ?x55901 ?x55902) ?x55904) 0.0)))))))
(assert
 (let ((?x55937 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55934 (* ?x55933 l_0_10_54)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55931 (* ?x55930 l_0_10_53)))
 (let ((?x55928 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55925 (* ?x55924 l_0_10_52)))
 (let ((?x55935 (+ (+ (- (+ (* (* (- 2.0) l_0_10_4) l_0_10_7) ?x55925) ?x55928) ?x55931) ?x55934)))
 (= (- ?x55935 ?x55937) 0.0)))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55966 (* ?x55933 l_0_10_58)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55964 (* ?x55930 l_0_10_57)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55962 (* ?x55924 l_0_10_56)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x55960 (* ?x55959 l_0_10_6)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x44830 (* ?x55526 l_0_10_5)))
 (let ((?x55965 (+ (+ (- (- (* (* (- 2.0) l_0_10_11) l_0_10_4) ?x44830) ?x55960) ?x55962) ?x55964)))
 (= (+ ?x55965 ?x55966) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55990 (* ?x55933 l_0_10_63)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55988 (* ?x55930 l_0_10_62)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55986 (* ?x55924 l_0_10_61)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55984 (* ?x55039 l_0_10_6)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x44847 (* ?x55036 l_0_10_5)))
 (let ((?x55989 (+ (+ (- (- (* (* (- 2.0) l_0_10_16) l_0_10_4) ?x44847) ?x55984) ?x55986) ?x55988)))
 (= (+ ?x55989 ?x55990) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56022 (* ?x55933 l_0_10_69)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56020 (* ?x55930 l_0_10_68)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56018 (* ?x55924 l_0_10_67)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56016 (* ?x56015 l_0_10_6)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56013 (* ?x55703 l_0_10_5)))
 (let ((?x56021 (+ (+ (- (- (* (* (- 2.0) l_0_10_22) l_0_10_4) ?x56013) ?x56016) ?x56018) ?x56020)))
 (= (+ ?x56021 ?x56022) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56052 (* ?x55933 l_0_10_76)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56050 (* ?x55930 l_0_10_75)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56048 (* ?x55924 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56046 (* ?x56045 l_0_10_6)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56037 (* ?x56036 l_0_10_5)))
 (let ((?x56051 (+ (+ (- (- (* (* (- 2.0) l_0_10_29) l_0_10_4) ?x56037) ?x56046) ?x56048) ?x56050)))
 (= (+ ?x56051 ?x56052) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56085 (* ?x55933 l_0_10_84)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56083 (* ?x55930 l_0_10_83)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56081 (* ?x55924 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x56079 (* ?x56078 l_0_10_6)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x56076 (* ?x56075 l_0_10_5)))
 (let ((?x56084 (+ (+ (- (- (* (* (- 2.0) l_0_10_37) l_0_10_4) ?x56076) ?x56079) ?x56081) ?x56083)))
 (= (+ ?x56084 ?x56085) 0.0)))))))))))))
(assert
 (let ((?x56118 (* l_0_10_9 l_0_10_9)))
 (let ((?x56116 (* l_0_10_8 l_0_10_8)))
 (let ((?x56114 (* l_0_10_7 l_0_10_7)))
 (let ((?x56112 (* l_0_10_55 l_0_10_55)))
 (let ((?x56110 (* l_0_10_54 l_0_10_54)))
 (let ((?x56108 (* l_0_10_53 l_0_10_53)))
 (let ((?x56109 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_52 l_0_10_52)) ?x56108)))
 (= (- (- (- (+ (+ ?x56109 ?x56110) ?x56112) ?x56114) ?x56116) ?x56118) 0.0)))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x56149 l_0_10_59)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56147 (* ?x56146 l_0_10_58)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56144 (* ?x56143 l_0_10_57)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56141 (* ?x56140 l_0_10_56)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56138 (* ?x55959 l_0_10_9)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56136 (* ?x55526 l_0_10_8)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x56134 (* ?x55523 l_0_10_7)))
 (let ((?x56142 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_14) ?x56134) ?x56136) ?x56138) ?x56141)))
 (= (+ (+ (+ ?x56142 ?x56144) ?x56147) ?x56150) 0.0)))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56186 (* ?x56149 l_0_10_64)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56184 (* ?x56146 l_0_10_63)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56182 (* ?x56143 l_0_10_62)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56180 (* ?x56140 l_0_10_61)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56178 (* ?x55039 l_0_10_9)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56176 (* ?x55036 l_0_10_8)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x56174 (* ?x55033 l_0_10_7)))
 (let ((?x56181 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x56174) ?x56176) ?x56178) ?x56180)))
 (= (+ (+ (+ ?x56181 ?x56182) ?x56184) ?x56186) 0.0)))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x55087 (* ?x55086 l_0_10_79)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x55084 (* ?x55083 l_0_10_78)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x55081 (* ?x55080 l_0_10_77)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x55078 (* ?x55077 l_0_10_76)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x55075 (* ?x55074 l_0_10_75)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x55072 (* ?x55071 l_0_10_74)))
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56228 (* ?x56149 l_0_10_70)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56226 (* ?x56146 l_0_10_69)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56224 (* ?x56143 l_0_10_68)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56222 (* ?x56140 l_0_10_67)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56220 (* ?x56015 l_0_10_9)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56218 (* ?x55703 l_0_10_8)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x56216 (* ?x56215 l_0_10_7)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x55049 (* ?x55048 l_0_10_34)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x55046 (* ?x55045 l_0_10_33)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x55043 (* ?x55042 l_0_10_32)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55040 (* ?x55039 l_0_10_31)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55037 (* ?x55036 l_0_10_30)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x55034 (* ?x55033 l_0_10_29)))
 (let ((?x56132 (* (- 2.0) l_0_10_10)))
 (let ((?x33759 (* ?x56132 l_0_10_25)))
 (let ((?x56217 (- (- (- (- (- (- (- ?x33759 ?x55034) ?x55037) ?x55040) ?x55043) ?x55046) ?x55049) ?x56216)))
 (let ((?x56230 (+ (+ (+ (+ (+ (- (- ?x56217 ?x56218) ?x56220) ?x56222) ?x56224) ?x56226) ?x56228) ?x55072)))
 (= (+ (+ (+ (+ (+ ?x56230 ?x55075) ?x55078) ?x55081) ?x55084) ?x55087) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56269 (* ?x56149 l_0_10_77)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56267 (* ?x56146 l_0_10_76)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56265 (* ?x56143 l_0_10_75)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56263 (* ?x56140 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56261 (* ?x56045 l_0_10_9)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56259 (* ?x56036 l_0_10_8)))
 (let ((?x56256 (* 2.0 l_0_10_29)))
 (let ((?x56257 (* ?x56256 l_0_10_7)))
 (let ((?x56264 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_32) ?x56257) ?x56259) ?x56261) ?x56263)))
 (= (+ (+ (+ ?x56264 ?x56265) ?x56267) ?x56269) 0.0)))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56284 (* ?x56149 l_0_10_85)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56282 (* ?x56146 l_0_10_84)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56280 (* ?x56143 l_0_10_83)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x20148 (* ?x56140 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x20178 (* ?x56078 l_0_10_9)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x44955 (* ?x56075 l_0_10_8)))
 (let ((?x44928 (* 2.0 l_0_10_37)))
 (let ((?x20130 (* ?x44928 l_0_10_7)))
 (let ((?x56132 (* (- 2.0) l_0_10_10)))
 (let ((?x33824 (* ?x56132 l_0_10_40)))
 (let ((?x56285 (+ (+ (+ (+ (- (- (- ?x33824 ?x20130) ?x44955) ?x20178) ?x20148) ?x56280) ?x56282) ?x56284)))
 (= ?x56285 0.0)))))))))))))))))))
(assert
 (let ((?x56320 (* l_0_10_60 l_0_10_60)))
 (let ((?x56318 (* l_0_10_59 l_0_10_59)))
 (let ((?x56316 (* l_0_10_58 l_0_10_58)))
 (let ((?x56314 (* l_0_10_57 l_0_10_57)))
 (let ((?x56312 (* l_0_10_56 l_0_10_56)))
 (let ((?x56310 (* l_0_10_15 l_0_10_15)))
 (let ((?x56308 (* l_0_10_14 l_0_10_14)))
 (let ((?x56306 (* l_0_10_13 l_0_10_13)))
 (let ((?x56307 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x56306)))
 (let ((?x56321 (+ (+ (+ (+ (+ (- (- ?x56307 ?x56308) ?x56310) ?x56312) ?x56314) ?x56316) ?x56318) ?x56320)))
 (= ?x56321 0.0))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56361 (* ?x56360 l_0_10_65)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56358 (* ?x56357 l_0_10_64)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56355 (* ?x56354 l_0_10_63)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56352 (* ?x56351 l_0_10_62)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56349 (* ?x56348 l_0_10_61)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56346 (* ?x56345 l_0_10_20)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56343 (* ?x56342 l_0_10_19)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56340 (* ?x55959 l_0_10_18)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56338 (* ?x55526 l_0_10_17)))
 (let ((?x56347 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_16) ?x56338) ?x56340) ?x56343) ?x56346)))
 (= (+ (+ (+ (+ (+ ?x56347 ?x56349) ?x56352) ?x56355) ?x56358) ?x56361) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56406 (* ?x56360 l_0_10_71)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56404 (* ?x56357 l_0_10_70)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56402 (* ?x56354 l_0_10_69)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56400 (* ?x56351 l_0_10_68)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56398 (* ?x56348 l_0_10_67)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56396 (* ?x56345 l_0_10_26)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56386 (* ?x56342 l_0_10_25)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56383 (* ?x55959 l_0_10_24)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56379 (* ?x55526 l_0_10_23)))
 (let ((?x56397 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_22) ?x56379) ?x56383) ?x56386) ?x56396)))
 (= (+ (+ (+ (+ (+ ?x56397 ?x56398) ?x56400) ?x56402) ?x56404) ?x56406) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56449 (* ?x56360 l_0_10_78)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56447 (* ?x56357 l_0_10_77)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56445 (* ?x56354 l_0_10_76)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56443 (* ?x56351 l_0_10_75)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56441 (* ?x56348 l_0_10_74)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56439 (* ?x56345 l_0_10_33)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56429 (* ?x56342 l_0_10_32)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x20246 (* ?x55959 l_0_10_31)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x45135 (* ?x55526 l_0_10_30)))
 (let ((?x56440 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_29) ?x45135) ?x20246) ?x56429) ?x56439)))
 (= (+ (+ (+ (+ (+ ?x56440 ?x56441) ?x56443) ?x56445) ?x56447) ?x56449) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56498 (* ?x56360 l_0_10_86)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56496 (* ?x56357 l_0_10_85)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56494 (* ?x56354 l_0_10_84)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56492 (* ?x56351 l_0_10_83)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56490 (* ?x56348 l_0_10_82)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56488 (* ?x56345 l_0_10_41)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56478 (* ?x56342 l_0_10_40)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56475 (* ?x55959 l_0_10_39)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56471 (* ?x55526 l_0_10_38)))
 (let ((?x56489 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_37) ?x56471) ?x56475) ?x56478) ?x56488)))
 (= (+ (+ (+ (+ (+ ?x56489 ?x56490) ?x56492) ?x56494) ?x56496) ?x56498) 0.0)))))))))))))))))))))
(assert
 (let ((?x56552 (* l_0_10_66 l_0_10_66)))
 (let ((?x56550 (* l_0_10_65 l_0_10_65)))
 (let ((?x56548 (* l_0_10_64 l_0_10_64)))
 (let ((?x56546 (* l_0_10_63 l_0_10_63)))
 (let ((?x56544 (* l_0_10_62 l_0_10_62)))
 (let ((?x56542 (* l_0_10_61 l_0_10_61)))
 (let ((?x56540 (* l_0_10_21 l_0_10_21)))
 (let ((?x56538 (* l_0_10_20 l_0_10_20)))
 (let ((?x56536 (* l_0_10_19 l_0_10_19)))
 (let ((?x56534 (* l_0_10_18 l_0_10_18)))
 (let ((?x56535 (- (- (* (- l_0_10_16) l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56534)))
 (let ((?x56549 (+ (+ (+ (+ (- (- (- ?x56535 ?x56536) ?x56538) ?x56540) ?x56542) ?x56544) ?x56546) ?x56548)))
 (= (+ (+ ?x56549 ?x56550) ?x56552) 0.0))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56596 (* ?x55086 l_0_10_72)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56594 (* ?x55083 l_0_10_71)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56592 (* ?x55080 l_0_10_70)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56590 (* ?x55077 l_0_10_69)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56588 (* ?x55074 l_0_10_68)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56586 (* ?x55071 l_0_10_67)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56584 (* ?x55048 l_0_10_27)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56582 (* ?x55045 l_0_10_26)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56580 (* ?x55042 l_0_10_25)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56578 (* ?x55039 l_0_10_24)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56576 (* ?x55036 l_0_10_23)))
 (let ((?x56583 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_22) ?x56576) ?x56578) ?x56580) ?x56582)))
 (let ((?x56597 (+ (+ (+ (+ (+ (+ (- ?x56583 ?x56584) ?x56586) ?x56588) ?x56590) ?x56592) ?x56594) ?x56596)))
 (= ?x56597 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x55087 (* ?x55086 l_0_10_79)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x55084 (* ?x55083 l_0_10_78)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x55081 (* ?x55080 l_0_10_77)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x55078 (* ?x55077 l_0_10_76)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x55075 (* ?x55074 l_0_10_75)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x55072 (* ?x55071 l_0_10_74)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x55049 (* ?x55048 l_0_10_34)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x55046 (* ?x55045 l_0_10_33)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x55043 (* ?x55042 l_0_10_32)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55040 (* ?x55039 l_0_10_31)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55037 (* ?x55036 l_0_10_30)))
 (let ((?x56619 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_29) ?x55037) ?x55040) ?x55043) ?x55046)))
 (let ((?x56636 (+ (+ (+ (+ (+ (+ (- ?x56619 ?x55049) ?x55072) ?x55075) ?x55078) ?x55081) ?x55084) ?x55087)))
 (= ?x56636 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56668 (* ?x55086 l_0_10_87)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56666 (* ?x55083 l_0_10_86)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56664 (* ?x55080 l_0_10_85)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56662 (* ?x55077 l_0_10_84)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56660 (* ?x55074 l_0_10_83)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56658 (* ?x55071 l_0_10_82)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56656 (* ?x55048 l_0_10_42)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56654 (* ?x55045 l_0_10_41)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56652 (* ?x55042 l_0_10_40)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56650 (* ?x55039 l_0_10_39)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56648 (* ?x55036 l_0_10_38)))
 (let ((?x56655 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_37) ?x56648) ?x56650) ?x56652) ?x56654)))
 (let ((?x56669 (+ (+ (+ (+ (+ (+ (- ?x56655 ?x56656) ?x56658) ?x56660) ?x56662) ?x56664) ?x56666) ?x56668)))
 (= ?x56669 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56738 (* l_0_10_73 l_0_10_73)))
 (let ((?x56736 (* l_0_10_72 l_0_10_72)))
 (let ((?x56734 (* l_0_10_71 l_0_10_71)))
 (let ((?x56732 (* l_0_10_70 l_0_10_70)))
 (let ((?x56730 (* l_0_10_69 l_0_10_69)))
 (let ((?x56728 (* l_0_10_68 l_0_10_68)))
 (let ((?x56726 (* l_0_10_67 l_0_10_67)))
 (let ((?x56724 (* l_0_10_28 l_0_10_28)))
 (let ((?x56722 (* l_0_10_27 l_0_10_27)))
 (let ((?x56720 (* l_0_10_26 l_0_10_26)))
 (let ((?x56709 (* l_0_10_25 l_0_10_25)))
 (let ((?x56706 (* l_0_10_24 l_0_10_24)))
 (let ((?x56708 (- (- (* (- l_0_10_22) l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56706)))
 (let ((?x56731 (+ (+ (+ (- (- (- (- ?x56708 ?x56709) ?x56720) ?x56722) ?x56724) ?x56726) ?x56728) ?x56730)))
 (= (+ (+ (+ (+ ?x56731 ?x56732) ?x56734) ?x56736) ?x56738) 0.0))))))))))))))))
(assert
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56801 (* ?x56800 l_0_10_80)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56798 (* ?x56797 l_0_10_79)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56795 (* ?x56794 l_0_10_78)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56792 (* ?x56791 l_0_10_77)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56789 (* ?x56788 l_0_10_76)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56786 (* ?x56785 l_0_10_75)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56783 (* ?x56782 l_0_10_74)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56780 (* ?x56779 l_0_10_35)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56777 (* ?x56776 l_0_10_34)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56774 (* ?x56773 l_0_10_33)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56771 (* ?x56770 l_0_10_32)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56768 (* ?x56015 l_0_10_31)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56766 (* ?x55703 l_0_10_30)))
 (let ((?x56775 (- (- (- (- (* (* (- 2.0) l_0_10_22) l_0_10_29) ?x56766) ?x56768) ?x56771) ?x56774)))
 (let ((?x56796 (+ (+ (+ (+ (+ (- (- ?x56775 ?x56777) ?x56780) ?x56783) ?x56786) ?x56789) ?x56792) ?x56795)))
 (= (+ (+ ?x56796 ?x56798) ?x56801) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56841 (* ?x56800 l_0_10_88)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56839 (* ?x56797 l_0_10_87)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56837 (* ?x56794 l_0_10_86)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56835 (* ?x56791 l_0_10_85)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56833 (* ?x56788 l_0_10_84)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56831 (* ?x56785 l_0_10_83)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56829 (* ?x56782 l_0_10_82)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56827 (* ?x56779 l_0_10_43)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56825 (* ?x56776 l_0_10_42)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56823 (* ?x56773 l_0_10_41)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56821 (* ?x56770 l_0_10_40)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56819 (* ?x56015 l_0_10_39)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x45194 (* ?x55703 l_0_10_38)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x20330 (* ?x56215 l_0_10_37)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55199 (* ?x55198 l_0_10_169)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55196 (* ?x55195 l_0_10_168)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55193 (* ?x55192 l_0_10_167)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55190 (* ?x55189 l_0_10_166)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55187 (* ?x55186 l_0_10_165)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55184 (* ?x55183 l_0_10_164)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55181 (* ?x55180 l_0_10_124)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55178 (* ?x55177 l_0_10_123)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55175 (* ?x55174 l_0_10_122)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55172 (* ?x55171 l_0_10_121)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55169 (* ?x55168 l_0_10_120)))
 (let ((?x55785 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_119) ?x55169) ?x55172) ?x55175) ?x55178)))
 (let ((?x55792 (+ (+ (+ (+ (+ (+ (- ?x55785 ?x55181) ?x55184) ?x55187) ?x55190) ?x55193) ?x55196) ?x55199)))
 (let ((?x56828 (- (- (- (- (- (- (- ?x55792 ?x20330) ?x45194) ?x56819) ?x56821) ?x56823) ?x56825) ?x56827)))
 (let ((?x56842 (+ (+ (+ (+ (+ (+ (+ ?x56828 ?x56829) ?x56831) ?x56833) ?x56835) ?x56837) ?x56839) ?x56841)))
 (= ?x56842 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56903 (* l_0_10_81 l_0_10_81)))
 (let ((?x56901 (* l_0_10_80 l_0_10_80)))
 (let ((?x56899 (* l_0_10_79 l_0_10_79)))
 (let ((?x56897 (* l_0_10_78 l_0_10_78)))
 (let ((?x56895 (* l_0_10_77 l_0_10_77)))
 (let ((?x56893 (* l_0_10_76 l_0_10_76)))
 (let ((?x56891 (* l_0_10_75 l_0_10_75)))
 (let ((?x56889 (* l_0_10_74 l_0_10_74)))
 (let ((?x56887 (* l_0_10_36 l_0_10_36)))
 (let ((?x56885 (* l_0_10_35 l_0_10_35)))
 (let ((?x56883 (* l_0_10_34 l_0_10_34)))
 (let ((?x56881 (* l_0_10_33 l_0_10_33)))
 (let ((?x56879 (* l_0_10_32 l_0_10_32)))
 (let ((?x56877 (* l_0_10_31 l_0_10_31)))
 (let ((?x56878 (- (- (* (- l_0_10_29) l_0_10_29) (* l_0_10_30 l_0_10_30)) ?x56877)))
 (let ((?x56892 (+ (+ (- (- (- (- (- ?x56878 ?x56879) ?x56881) ?x56883) ?x56885) ?x56887) ?x56889) ?x56891)))
 (= (+ (+ (+ (+ (+ (+ ?x56892 ?x56893) ?x56895) ?x56897) ?x56899) ?x56901) ?x56903) 0.0))))))))))))))))))
(assert
 (let ((?x56970 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56967 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56964 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56961 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56958 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56955 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56952 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56949 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56946 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56943 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56940 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56937 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56934 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56931 (* ?x56045 l_0_10_39)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56929 (* ?x56036 l_0_10_38)))
 (let ((?x56938 (- (- (- (- (* (* (- 2.0) l_0_10_29) l_0_10_37) ?x56929) ?x56931) ?x56934) ?x56937)))
 (let ((?x56959 (+ (+ (+ (+ (- (- (- ?x56938 ?x56940) ?x56943) ?x56946) ?x56949) ?x56952) ?x56955) ?x56958)))
 (= (+ (+ (+ (+ ?x56959 ?x56961) ?x56964) ?x56967) ?x56970) 0.0)))))))))))))))))))))
(assert
 (let ((?x57042 (* l_0_10_90 l_0_10_90)))
 (let ((?x57040 (* l_0_10_89 l_0_10_89)))
 (let ((?x57038 (* l_0_10_88 l_0_10_88)))
 (let ((?x57036 (* l_0_10_87 l_0_10_87)))
 (let ((?x57034 (* l_0_10_86 l_0_10_86)))
 (let ((?x57032 (* l_0_10_85 l_0_10_85)))
 (let ((?x57030 (* l_0_10_84 l_0_10_84)))
 (let ((?x57028 (* l_0_10_83 l_0_10_83)))
 (let ((?x57026 (* l_0_10_82 l_0_10_82)))
 (let ((?x57024 (* l_0_10_45 l_0_10_45)))
 (let ((?x57022 (* l_0_10_44 l_0_10_44)))
 (let ((?x57020 (* l_0_10_43 l_0_10_43)))
 (let ((?x57018 (* l_0_10_42 l_0_10_42)))
 (let ((?x57005 (* l_0_10_41 l_0_10_41)))
 (let ((?x57002 (* l_0_10_40 l_0_10_40)))
 (let ((?x56998 (* l_0_10_39 l_0_10_39)))
 (let ((?x57000 (- (- (* (- l_0_10_37) l_0_10_37) (* l_0_10_38 l_0_10_38)) ?x56998)))
 (let ((?x57027 (+ (- (- (- (- (- (- ?x57000 ?x57002) ?x57005) ?x57018) ?x57020) ?x57022) ?x57024) ?x57026)))
 (let ((?x57041 (+ (+ (+ (+ (+ (+ (+ ?x57027 ?x57028) ?x57030) ?x57032) ?x57034) ?x57036) ?x57038) ?x57040)))
 (= (+ ?x57041 ?x57042) 0.0)))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55017 (* ?x55016 l_0_10_47)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55009 (* ?x55008 l_0_10_2)))
 (= (+ ?x55009 ?x55017) 0.0))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56228 (* ?x56149 l_0_10_70)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56226 (* ?x56146 l_0_10_69)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56224 (* ?x56143 l_0_10_68)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56222 (* ?x56140 l_0_10_67)))
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55069 (* ?x55016 l_0_10_49)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56220 (* ?x56015 l_0_10_9)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x57088 (* ?x57087 l_0_10_250)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x57085 (* ?x57084 l_0_10_249)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x57082 (* ?x57081 l_0_10_248)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x57079 (* ?x57078 l_0_10_247)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56218 (* ?x55703 l_0_10_8)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x56216 (* ?x56215 l_0_10_7)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55032 (* ?x55008 l_0_10_4)))
 (let ((?x57080 (+ (+ (+ (+ ?x55032 (* (* 2.0 l_0_10_10) l_0_10_25)) ?x56216) ?x56218) ?x57079)))
 (let ((?x57093 (- (- (+ (+ (+ (+ (+ ?x57080 ?x57082) ?x57085) ?x57088) ?x56220) ?x55069) ?x56222) ?x56224)))
 (= (- (- ?x57093 ?x56226) ?x56228) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55156 (* ?x55016 l_0_10_52)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) ?x55156) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55207 (* ?x55016 l_0_10_56)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x57088 (* ?x57087 l_0_10_250)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x57085 (* ?x57084 l_0_10_249)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x57082 (* ?x57081 l_0_10_248)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x57079 (* ?x57078 l_0_10_247)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57128 (* ?x55445 l_0_10_160)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57126 (* ?x55442 l_0_10_159)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57124 (* ?x55439 l_0_10_158)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57122 (* ?x55436 l_0_10_157)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x57120 (* ?x57119 l_0_10_99)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x57117 (* ?x57116 l_0_10_98)))
 (let ((?x57113 (* 2.0 l_0_10_112)))
 (let ((?x57114 (* ?x57113 l_0_10_97)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55160 (* ?x55008 l_0_10_11)))
 (let ((?x57121 (+ (+ (+ (+ ?x55160 (* (* 2.0 l_0_10_100) l_0_10_115)) ?x57114) ?x57117) ?x57120)))
 (let ((?x57132 (- (- (- (- (- (- (- ?x57121 ?x57122) ?x57124) ?x57126) ?x57128) ?x57079) ?x57082) ?x57085)))
 (= (+ (- ?x57132 ?x57088) ?x55207) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55265 (* ?x55016 l_0_10_61)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x55265) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55281 (* ?x55016 l_0_10_67)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_22) ?x55281) 0.0))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55291 (* ?x55016 l_0_10_74)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_29) ?x55291) 0.0))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57161 (* ?x57160 l_0_10_97)))
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55301 (* ?x55016 l_0_10_82)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x45376 (* ?x55013 l_0_10_142)))
 (let ((?x55008 (* (- 2.0) l_0_10_1)))
 (let ((?x55299 (* ?x55008 l_0_10_37)))
 (= (- (+ (+ ?x55299 ?x45376) ?x55301) ?x57161) 0.0))))))))))
(assert
 (let ((?x55330 (* l_0_10_48 l_0_10_48)))
 (let ((?x55328 (* l_0_10_47 l_0_10_47)))
 (let ((?x57179 (+ (+ (- (* (- l_0_10_2) l_0_10_2) (* l_0_10_3 l_0_10_3)) ?x55328) ?x55330)))
 (= ?x57179 0.0)))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55383 (* ?x55382 l_0_10_50)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55380 (* ?x55379 l_0_10_49)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55377 (* ?x55376 l_0_10_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_4) ?x55377) ?x55380) ?x55383) 0.0))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55454 (* ?x55382 l_0_10_53)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55452 (* ?x55379 l_0_10_52)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55450 (* ?x55376 l_0_10_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_7) ?x55450) ?x55452) ?x55454) 0.0))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55546 (* ?x55382 l_0_10_57)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55544 (* ?x55379 l_0_10_56)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x55527 (* ?x55526 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_11) l_0_10_2) ?x55527) ?x55544) ?x55546) 0.0))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55634 (* ?x55382 l_0_10_62)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55632 (* ?x55379 l_0_10_61)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55630 (* ?x55036 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_16) l_0_10_2) ?x55630) ?x55632) ?x55634) 0.0))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55708 (* ?x55382 l_0_10_68)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55706 (* ?x55379 l_0_10_67)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x55704 (* ?x55703 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_22) ?x55704) ?x55706) ?x55708) 0.0))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55799 (* ?x55382 l_0_10_75)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55797 (* ?x55379 l_0_10_74)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55795 (* ?x55376 l_0_10_30)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55793 (* ?x55373 l_0_10_29)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57128 (* ?x55445 l_0_10_160)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57126 (* ?x55442 l_0_10_159)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57124 (* ?x55439 l_0_10_158)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57122 (* ?x55436 l_0_10_157)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x57120 (* ?x57119 l_0_10_99)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x57117 (* ?x57116 l_0_10_98)))
 (let ((?x57113 (* 2.0 l_0_10_112)))
 (let ((?x57114 (* ?x57113 l_0_10_97)))
 (let ((?x57227 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_115) ?x57114) ?x57117) ?x57120) ?x57122)))
 (let ((?x57230 (+ (+ (+ ?x57227 ?x57124) ?x57126) ?x57128)))
 (= (+ (+ (- (- ?x57230 ?x55793) ?x55795) ?x55797) ?x55799) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x45361 (* ?x45358 l_0_10_98)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x45417 (* ?x45405 l_0_10_97)))
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55850 (* ?x55382 l_0_10_83)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55848 (* ?x55379 l_0_10_82)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55846 (* ?x55376 l_0_10_38)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55844 (* ?x55373 l_0_10_37)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x45378 (* ?x55321 l_0_10_143)))
 (let ((?x45380 (+ (* (* 2.0 l_0_10_137) l_0_10_142) ?x45378)))
 (= (- (- (+ (+ (- (- ?x45380 ?x55844) ?x55846) ?x55848) ?x55850) ?x45417) ?x45361) 0.0)))))))))))))))))
(assert
 (let ((?x55904 (* l_0_10_6 l_0_10_6)))
 (let ((?x55902 (* l_0_10_51 l_0_10_51)))
 (let ((?x55900 (* l_0_10_50 l_0_10_50)))
 (let ((?x55898 (* l_0_10_5 l_0_10_5)))
 (let ((?x55901 (+ (- (+ (* (- l_0_10_4) l_0_10_4) (* l_0_10_49 l_0_10_49)) ?x55898) ?x55900)))
 (= (- (+ ?x55901 ?x55902) ?x55904) 0.0)))))))
(assert
 (let ((?x55937 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55934 (* ?x55933 l_0_10_54)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55931 (* ?x55930 l_0_10_53)))
 (let ((?x55928 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55925 (* ?x55924 l_0_10_52)))
 (let ((?x55935 (+ (+ (- (+ (* (* (- 2.0) l_0_10_4) l_0_10_7) ?x55925) ?x55928) ?x55931) ?x55934)))
 (= (- ?x55935 ?x55937) 0.0)))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55966 (* ?x55933 l_0_10_58)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55964 (* ?x55930 l_0_10_57)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55962 (* ?x55924 l_0_10_56)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x55960 (* ?x55959 l_0_10_6)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x44830 (* ?x55526 l_0_10_5)))
 (let ((?x55965 (+ (+ (- (- (* (* (- 2.0) l_0_10_11) l_0_10_4) ?x44830) ?x55960) ?x55962) ?x55964)))
 (= (+ ?x55965 ?x55966) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55990 (* ?x55933 l_0_10_63)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55988 (* ?x55930 l_0_10_62)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55986 (* ?x55924 l_0_10_61)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55984 (* ?x55039 l_0_10_6)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x44847 (* ?x55036 l_0_10_5)))
 (let ((?x55989 (+ (+ (- (- (* (* (- 2.0) l_0_10_16) l_0_10_4) ?x44847) ?x55984) ?x55986) ?x55988)))
 (= (+ ?x55989 ?x55990) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56022 (* ?x55933 l_0_10_69)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56020 (* ?x55930 l_0_10_68)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56018 (* ?x55924 l_0_10_67)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56016 (* ?x56015 l_0_10_6)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56013 (* ?x55703 l_0_10_5)))
 (let ((?x56021 (+ (+ (- (- (* (* (- 2.0) l_0_10_22) l_0_10_4) ?x56013) ?x56016) ?x56018) ?x56020)))
 (= (+ ?x56021 ?x56022) 0.0)))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56052 (* ?x55933 l_0_10_76)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56050 (* ?x55930 l_0_10_75)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56048 (* ?x55924 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56046 (* ?x56045 l_0_10_6)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56037 (* ?x56036 l_0_10_5)))
 (let ((?x56051 (+ (+ (- (- (* (* (- 2.0) l_0_10_29) l_0_10_4) ?x56037) ?x56046) ?x56048) ?x56050)))
 (= (+ ?x56051 ?x56052) 0.0)))))))))))))
(assert
 (let ((?x57258 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x57255 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x57252 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56085 (* ?x55933 l_0_10_84)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56083 (* ?x55930 l_0_10_83)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56081 (* ?x55924 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x56079 (* ?x56078 l_0_10_6)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x56076 (* ?x56075 l_0_10_5)))
 (let ((?x44928 (* 2.0 l_0_10_37)))
 (let ((?x57244 (* ?x44928 l_0_10_4)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x57242 (* ?x55370 l_0_10_144)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x20709 (* ?x55367 l_0_10_143)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x20714 (* ?x55364 l_0_10_142)))
 (let ((?x57243 (+ (+ ?x20714 ?x20709) ?x57242)))
 (let ((?x57253 (- (+ (+ (+ (- (- (- ?x57243 ?x57244) ?x56076) ?x56079) ?x56081) ?x56083) ?x56085) ?x57252)))
 (= (- (- ?x57253 ?x57255) ?x57258) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x56118 (* l_0_10_9 l_0_10_9)))
 (let ((?x56116 (* l_0_10_8 l_0_10_8)))
 (let ((?x56114 (* l_0_10_7 l_0_10_7)))
 (let ((?x56112 (* l_0_10_55 l_0_10_55)))
 (let ((?x56110 (* l_0_10_54 l_0_10_54)))
 (let ((?x56108 (* l_0_10_53 l_0_10_53)))
 (let ((?x56109 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_52 l_0_10_52)) ?x56108)))
 (= (- (- (- (+ (+ ?x56109 ?x56110) ?x56112) ?x56114) ?x56116) ?x56118) 0.0)))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x56149 l_0_10_59)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56147 (* ?x56146 l_0_10_58)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56144 (* ?x56143 l_0_10_57)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56141 (* ?x56140 l_0_10_56)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56138 (* ?x55959 l_0_10_9)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56136 (* ?x55526 l_0_10_8)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x56134 (* ?x55523 l_0_10_7)))
 (let ((?x56142 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_14) ?x56134) ?x56136) ?x56138) ?x56141)))
 (= (+ (+ (+ ?x56142 ?x56144) ?x56147) ?x56150) 0.0)))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56186 (* ?x56149 l_0_10_64)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56184 (* ?x56146 l_0_10_63)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56182 (* ?x56143 l_0_10_62)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56180 (* ?x56140 l_0_10_61)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56178 (* ?x55039 l_0_10_9)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56176 (* ?x55036 l_0_10_8)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x56174 (* ?x55033 l_0_10_7)))
 (let ((?x56181 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x56174) ?x56176) ?x56178) ?x56180)))
 (= (+ (+ (+ ?x56181 ?x56182) ?x56184) ?x56186) 0.0)))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56228 (* ?x56149 l_0_10_70)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56226 (* ?x56146 l_0_10_69)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56224 (* ?x56143 l_0_10_68)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56222 (* ?x56140 l_0_10_67)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56220 (* ?x56015 l_0_10_9)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56218 (* ?x55703 l_0_10_8)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x56216 (* ?x56215 l_0_10_7)))
 (let ((?x56132 (* (- 2.0) l_0_10_10)))
 (let ((?x33759 (* ?x56132 l_0_10_25)))
 (let ((?x57295 (+ (+ (+ (+ (- (- (- ?x33759 ?x56216) ?x56218) ?x56220) ?x56222) ?x56224) ?x56226) ?x56228)))
 (= ?x57295 0.0)))))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56269 (* ?x56149 l_0_10_77)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56267 (* ?x56146 l_0_10_76)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56265 (* ?x56143 l_0_10_75)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56263 (* ?x56140 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56261 (* ?x56045 l_0_10_9)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56259 (* ?x56036 l_0_10_8)))
 (let ((?x56256 (* 2.0 l_0_10_29)))
 (let ((?x56257 (* ?x56256 l_0_10_7)))
 (let ((?x56264 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_32) ?x56257) ?x56259) ?x56261) ?x56263)))
 (= (+ (+ (+ ?x56264 ?x56265) ?x56267) ?x56269) 0.0)))))))))))))))))
(assert
 (let ((?x57326 (* l_0_10_99 l_0_10_99)))
 (let ((?x57324 (* l_0_10_98 l_0_10_98)))
 (let ((?x57322 (* l_0_10_97 l_0_10_97)))
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56284 (* ?x56149 l_0_10_85)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56282 (* ?x56146 l_0_10_84)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56280 (* ?x56143 l_0_10_83)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x20148 (* ?x56140 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x20178 (* ?x56078 l_0_10_9)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x44955 (* ?x56075 l_0_10_8)))
 (let ((?x44928 (* 2.0 l_0_10_37)))
 (let ((?x20130 (* ?x44928 l_0_10_7)))
 (let ((?x57313 (* l_0_10_145 l_0_10_145)))
 (let ((?x57311 (* l_0_10_144 l_0_10_144)))
 (let ((?x57309 (* l_0_10_143 l_0_10_143)))
 (let ((?x57308 (* l_0_10_142 l_0_10_142)))
 (let ((?x57307 (* l_0_10_100 l_0_10_100)))
 (let ((?x56132 (* (- 2.0) l_0_10_10)))
 (let ((?x33824 (* ?x56132 l_0_10_40)))
 (let ((?x57316 (- (- (+ (+ (+ (+ (- ?x33824 ?x57307) ?x57308) ?x57309) ?x57311) ?x57313) ?x20130) ?x44955)))
 (let ((?x57325 (- (- (+ (+ (+ (+ (- ?x57316 ?x20178) ?x20148) ?x56280) ?x56282) ?x56284) ?x57322) ?x57324)))
 (= (- ?x57325 ?x57326) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x56320 (* l_0_10_60 l_0_10_60)))
 (let ((?x56318 (* l_0_10_59 l_0_10_59)))
 (let ((?x56316 (* l_0_10_58 l_0_10_58)))
 (let ((?x56314 (* l_0_10_57 l_0_10_57)))
 (let ((?x56312 (* l_0_10_56 l_0_10_56)))
 (let ((?x56310 (* l_0_10_15 l_0_10_15)))
 (let ((?x56308 (* l_0_10_14 l_0_10_14)))
 (let ((?x56306 (* l_0_10_13 l_0_10_13)))
 (let ((?x56307 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x56306)))
 (let ((?x56321 (+ (+ (+ (+ (+ (- (- ?x56307 ?x56308) ?x56310) ?x56312) ?x56314) ?x56316) ?x56318) ?x56320)))
 (= ?x56321 0.0))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56361 (* ?x56360 l_0_10_65)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56358 (* ?x56357 l_0_10_64)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56355 (* ?x56354 l_0_10_63)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56352 (* ?x56351 l_0_10_62)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56349 (* ?x56348 l_0_10_61)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56346 (* ?x56345 l_0_10_20)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56343 (* ?x56342 l_0_10_19)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56340 (* ?x55959 l_0_10_18)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56338 (* ?x55526 l_0_10_17)))
 (let ((?x56347 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_16) ?x56338) ?x56340) ?x56343) ?x56346)))
 (= (+ (+ (+ (+ (+ ?x56347 ?x56349) ?x56352) ?x56355) ?x56358) ?x56361) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56406 (* ?x56360 l_0_10_71)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56404 (* ?x56357 l_0_10_70)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56402 (* ?x56354 l_0_10_69)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56400 (* ?x56351 l_0_10_68)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56398 (* ?x56348 l_0_10_67)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56396 (* ?x56345 l_0_10_26)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56386 (* ?x56342 l_0_10_25)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56383 (* ?x55959 l_0_10_24)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56379 (* ?x55526 l_0_10_23)))
 (let ((?x56397 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_22) ?x56379) ?x56383) ?x56386) ?x56396)))
 (= (+ (+ (+ (+ (+ ?x56397 ?x56398) ?x56400) ?x56402) ?x56404) ?x56406) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56449 (* ?x56360 l_0_10_78)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56447 (* ?x56357 l_0_10_77)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56445 (* ?x56354 l_0_10_76)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56443 (* ?x56351 l_0_10_75)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56441 (* ?x56348 l_0_10_74)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56439 (* ?x56345 l_0_10_33)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56429 (* ?x56342 l_0_10_32)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x20246 (* ?x55959 l_0_10_31)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x45135 (* ?x55526 l_0_10_30)))
 (let ((?x56440 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_29) ?x45135) ?x20246) ?x56429) ?x56439)))
 (= (+ (+ (+ (+ (+ ?x56440 ?x56441) ?x56443) ?x56445) ?x56447) ?x56449) 0.0)))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56498 (* ?x56360 l_0_10_86)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56496 (* ?x56357 l_0_10_85)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56494 (* ?x56354 l_0_10_84)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56492 (* ?x56351 l_0_10_83)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56490 (* ?x56348 l_0_10_82)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56488 (* ?x56345 l_0_10_41)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57359 (* ?x55445 l_0_10_149)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57357 (* ?x55442 l_0_10_148)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57355 (* ?x55439 l_0_10_147)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57353 (* ?x55436 l_0_10_146)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56478 (* ?x56342 l_0_10_40)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56475 (* ?x55959 l_0_10_39)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56471 (* ?x55526 l_0_10_38)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x57348 (* ?x55523 l_0_10_37)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x57346 (* ?x55514 l_0_10_99)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x45504 (* ?x55502 l_0_10_98)))
 (let ((?x34372 (* 2.0 l_0_10_101)))
 (let ((?x20813 (* ?x34372 l_0_10_97)))
 (let ((?x57347 (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_104) ?x20813) ?x45504) ?x57346)))
 (let ((?x57358 (+ (+ (+ (- (- (- (- ?x57347 ?x57348) ?x56471) ?x56475) ?x56478) ?x57353) ?x57355) ?x57357)))
 (let ((?x57366 (+ (+ (+ (+ (+ (- (+ ?x57358 ?x57359) ?x56488) ?x56490) ?x56492) ?x56494) ?x56496) ?x56498)))
 (= ?x57366 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56552 (* l_0_10_66 l_0_10_66)))
 (let ((?x56550 (* l_0_10_65 l_0_10_65)))
 (let ((?x56548 (* l_0_10_64 l_0_10_64)))
 (let ((?x56546 (* l_0_10_63 l_0_10_63)))
 (let ((?x56544 (* l_0_10_62 l_0_10_62)))
 (let ((?x56542 (* l_0_10_61 l_0_10_61)))
 (let ((?x56540 (* l_0_10_21 l_0_10_21)))
 (let ((?x56538 (* l_0_10_20 l_0_10_20)))
 (let ((?x56536 (* l_0_10_19 l_0_10_19)))
 (let ((?x56534 (* l_0_10_18 l_0_10_18)))
 (let ((?x56535 (- (- (* (- l_0_10_16) l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56534)))
 (let ((?x56549 (+ (+ (+ (+ (- (- (- ?x56535 ?x56536) ?x56538) ?x56540) ?x56542) ?x56544) ?x56546) ?x56548)))
 (= (+ (+ ?x56549 ?x56550) ?x56552) 0.0))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56596 (* ?x55086 l_0_10_72)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56594 (* ?x55083 l_0_10_71)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56592 (* ?x55080 l_0_10_70)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56590 (* ?x55077 l_0_10_69)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56588 (* ?x55074 l_0_10_68)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56586 (* ?x55071 l_0_10_67)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56584 (* ?x55048 l_0_10_27)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56582 (* ?x55045 l_0_10_26)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56580 (* ?x55042 l_0_10_25)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56578 (* ?x55039 l_0_10_24)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56576 (* ?x55036 l_0_10_23)))
 (let ((?x56583 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_22) ?x56576) ?x56578) ?x56580) ?x56582)))
 (let ((?x56597 (+ (+ (+ (+ (+ (+ (- ?x56583 ?x56584) ?x56586) ?x56588) ?x56590) ?x56592) ?x56594) ?x56596)))
 (= ?x56597 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56668 (* ?x55086 l_0_10_87)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56666 (* ?x55083 l_0_10_86)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56664 (* ?x55080 l_0_10_85)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56662 (* ?x55077 l_0_10_84)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56660 (* ?x55074 l_0_10_83)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56658 (* ?x55071 l_0_10_82)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56656 (* ?x55048 l_0_10_42)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56654 (* ?x55045 l_0_10_41)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56652 (* ?x55042 l_0_10_40)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56650 (* ?x55039 l_0_10_39)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56648 (* ?x55036 l_0_10_38)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x34386 (* ?x55033 l_0_10_37)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x55446 (* ?x55445 l_0_10_154)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x55443 (* ?x55442 l_0_10_153)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x55440 (* ?x55439 l_0_10_152)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x55437 (* ?x55436 l_0_10_151)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55434 (* ?x55171 l_0_10_99)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55432 (* ?x55168 l_0_10_98)))
 (let ((?x55010 (* 2.0 l_0_10_106)))
 (let ((?x55422 (* ?x55010 l_0_10_97)))
 (let ((?x55438 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_109) ?x55422) ?x55432) ?x55434) ?x55437)))
 (let ((?x55447 (+ (+ (+ ?x55438 ?x55440) ?x55443) ?x55446)))
 (let ((?x57400 (+ (- (- (- (- (- (- ?x55447 ?x34386) ?x56648) ?x56650) ?x56652) ?x56654) ?x56656) ?x56658)))
 (= (+ (+ (+ (+ (+ ?x57400 ?x56660) ?x56662) ?x56664) ?x56666) ?x56668) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56738 (* l_0_10_73 l_0_10_73)))
 (let ((?x56736 (* l_0_10_72 l_0_10_72)))
 (let ((?x56734 (* l_0_10_71 l_0_10_71)))
 (let ((?x56732 (* l_0_10_70 l_0_10_70)))
 (let ((?x56730 (* l_0_10_69 l_0_10_69)))
 (let ((?x56728 (* l_0_10_68 l_0_10_68)))
 (let ((?x56726 (* l_0_10_67 l_0_10_67)))
 (let ((?x56724 (* l_0_10_28 l_0_10_28)))
 (let ((?x56722 (* l_0_10_27 l_0_10_27)))
 (let ((?x56720 (* l_0_10_26 l_0_10_26)))
 (let ((?x56709 (* l_0_10_25 l_0_10_25)))
 (let ((?x56706 (* l_0_10_24 l_0_10_24)))
 (let ((?x56708 (- (- (* (- l_0_10_22) l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56706)))
 (let ((?x56731 (+ (+ (+ (- (- (- (- ?x56708 ?x56709) ?x56720) ?x56722) ?x56724) ?x56726) ?x56728) ?x56730)))
 (= (+ (+ (+ (+ ?x56731 ?x56732) ?x56734) ?x56736) ?x56738) 0.0))))))))))))))))
(assert
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56801 (* ?x56800 l_0_10_80)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56798 (* ?x56797 l_0_10_79)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56795 (* ?x56794 l_0_10_78)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56792 (* ?x56791 l_0_10_77)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56789 (* ?x56788 l_0_10_76)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56786 (* ?x56785 l_0_10_75)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56783 (* ?x56782 l_0_10_74)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56780 (* ?x56779 l_0_10_35)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56777 (* ?x56776 l_0_10_34)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56774 (* ?x56773 l_0_10_33)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56771 (* ?x56770 l_0_10_32)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56768 (* ?x56015 l_0_10_31)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56766 (* ?x55703 l_0_10_30)))
 (let ((?x56775 (- (- (- (- (* (* (- 2.0) l_0_10_22) l_0_10_29) ?x56766) ?x56768) ?x56771) ?x56774)))
 (let ((?x56796 (+ (+ (+ (+ (+ (- (- ?x56775 ?x56777) ?x56780) ?x56783) ?x56786) ?x56789) ?x56792) ?x56795)))
 (= (+ (+ ?x56796 ?x56798) ?x56801) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56841 (* ?x56800 l_0_10_88)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56839 (* ?x56797 l_0_10_87)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56837 (* ?x56794 l_0_10_86)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56835 (* ?x56791 l_0_10_85)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56833 (* ?x56788 l_0_10_84)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56831 (* ?x56785 l_0_10_83)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56829 (* ?x56782 l_0_10_82)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56827 (* ?x56779 l_0_10_43)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56825 (* ?x56776 l_0_10_42)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56823 (* ?x56773 l_0_10_41)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56821 (* ?x56770 l_0_10_40)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56819 (* ?x56015 l_0_10_39)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x45194 (* ?x55703 l_0_10_38)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x20330 (* ?x56215 l_0_10_37)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57128 (* ?x55445 l_0_10_160)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57126 (* ?x55442 l_0_10_159)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57124 (* ?x55439 l_0_10_158)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57122 (* ?x55436 l_0_10_157)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x57120 (* ?x57119 l_0_10_99)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x57117 (* ?x57116 l_0_10_98)))
 (let ((?x57113 (* 2.0 l_0_10_112)))
 (let ((?x57114 (* ?x57113 l_0_10_97)))
 (let ((?x57227 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_115) ?x57114) ?x57117) ?x57120) ?x57122)))
 (let ((?x57230 (+ (+ (+ ?x57227 ?x57124) ?x57126) ?x57128)))
 (let ((?x57416 (- (- (- (- (- (- (- ?x57230 ?x20330) ?x45194) ?x56819) ?x56821) ?x56823) ?x56825) ?x56827)))
 (let ((?x57423 (+ (+ (+ (+ (+ (+ (+ ?x57416 ?x56829) ?x56831) ?x56833) ?x56835) ?x56837) ?x56839) ?x56841)))
 (= ?x57423 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56903 (* l_0_10_81 l_0_10_81)))
 (let ((?x56901 (* l_0_10_80 l_0_10_80)))
 (let ((?x56899 (* l_0_10_79 l_0_10_79)))
 (let ((?x56897 (* l_0_10_78 l_0_10_78)))
 (let ((?x56895 (* l_0_10_77 l_0_10_77)))
 (let ((?x56893 (* l_0_10_76 l_0_10_76)))
 (let ((?x56891 (* l_0_10_75 l_0_10_75)))
 (let ((?x56889 (* l_0_10_74 l_0_10_74)))
 (let ((?x56887 (* l_0_10_36 l_0_10_36)))
 (let ((?x56885 (* l_0_10_35 l_0_10_35)))
 (let ((?x56883 (* l_0_10_34 l_0_10_34)))
 (let ((?x56881 (* l_0_10_33 l_0_10_33)))
 (let ((?x56879 (* l_0_10_32 l_0_10_32)))
 (let ((?x56877 (* l_0_10_31 l_0_10_31)))
 (let ((?x56878 (- (- (* (- l_0_10_29) l_0_10_29) (* l_0_10_30 l_0_10_30)) ?x56877)))
 (let ((?x56892 (+ (+ (- (- (- (- (- ?x56878 ?x56879) ?x56881) ?x56883) ?x56885) ?x56887) ?x56889) ?x56891)))
 (= (+ (+ (+ (+ (+ (+ ?x56892 ?x56893) ?x56895) ?x56897) ?x56899) ?x56901) ?x56903) 0.0))))))))))))))))))
(assert
 (let ((?x56970 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56967 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56964 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56961 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56958 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56955 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56952 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56949 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56946 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56943 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56940 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56937 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56934 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56931 (* ?x56045 l_0_10_39)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56929 (* ?x56036 l_0_10_38)))
 (let ((?x56256 (* 2.0 l_0_10_29)))
 (let ((?x45529 (* ?x56256 l_0_10_37)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x20872 (* ?x55445 l_0_10_167)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x20803 (* ?x55442 l_0_10_166)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x45550 (* ?x55439 l_0_10_165)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x45541 (* ?x55436 l_0_10_164)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x34383 (* ?x45531 l_0_10_99)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x45507 (* ?x45505 l_0_10_98)))
 (let ((?x45483 (* 2.0 l_0_10_119)))
 (let ((?x45481 (* ?x45483 l_0_10_97)))
 (let ((?x45543 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_122) ?x45481) ?x45507) ?x34383) ?x45541)))
 (let ((?x20884 (+ (+ (+ ?x45543 ?x45550) ?x20803) ?x20872)))
 (let ((?x34410 (- (- (- (- (- (- (- ?x20884 ?x45529) ?x56929) ?x56931) ?x56934) ?x56937) ?x56940) ?x56943)))
 (let ((?x20929 (+ (+ (+ (+ (+ (+ (- ?x34410 ?x56946) ?x56949) ?x56952) ?x56955) ?x56958) ?x56961) ?x56964)))
 (= (+ (+ ?x20929 ?x56967) ?x56970) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57042 (* l_0_10_90 l_0_10_90)))
 (let ((?x57040 (* l_0_10_89 l_0_10_89)))
 (let ((?x57038 (* l_0_10_88 l_0_10_88)))
 (let ((?x57036 (* l_0_10_87 l_0_10_87)))
 (let ((?x57034 (* l_0_10_86 l_0_10_86)))
 (let ((?x57032 (* l_0_10_85 l_0_10_85)))
 (let ((?x57030 (* l_0_10_84 l_0_10_84)))
 (let ((?x57028 (* l_0_10_83 l_0_10_83)))
 (let ((?x57026 (* l_0_10_82 l_0_10_82)))
 (let ((?x57024 (* l_0_10_45 l_0_10_45)))
 (let ((?x57022 (* l_0_10_44 l_0_10_44)))
 (let ((?x57020 (* l_0_10_43 l_0_10_43)))
 (let ((?x57018 (* l_0_10_42 l_0_10_42)))
 (let ((?x57005 (* l_0_10_41 l_0_10_41)))
 (let ((?x57002 (* l_0_10_40 l_0_10_40)))
 (let ((?x56998 (* l_0_10_39 l_0_10_39)))
 (let ((?x56994 (* l_0_10_38 l_0_10_38)))
 (let ((?x57046 (* l_0_10_37 l_0_10_37)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57494 (* ?x55445 l_0_10_175)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57492 (* ?x55442 l_0_10_174)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57490 (* ?x55439 l_0_10_173)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57488 (* ?x55436 l_0_10_172)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x57486 (* ?x57485 l_0_10_99)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x57483 (* ?x57482 l_0_10_98)))
 (let ((?x57479 (* 2.0 l_0_10_127)))
 (let ((?x57480 (* ?x57479 l_0_10_97)))
 (let ((?x57489 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_130) ?x57480) ?x57483) ?x57486) ?x57488)))
 (let ((?x57495 (+ (+ (+ ?x57489 ?x57490) ?x57492) ?x57494)))
 (let ((?x57502 (- (- (- (- (- (- (- ?x57495 ?x57046) ?x56994) ?x56998) ?x57002) ?x57005) ?x57018) ?x57020)))
 (let ((?x57509 (+ (+ (+ (+ (+ (- (- ?x57502 ?x57022) ?x57024) ?x57026) ?x57028) ?x57030) ?x57032) ?x57034)))
 (= (+ (+ (+ (+ ?x57509 ?x57036) ?x57038) ?x57040) ?x57042) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55017 (* ?x55016 l_0_10_47)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57538 (* ?x21111 l_0_10_227)))
 (let ((?x45641 (- (* (* 2.0 l_0_10_1) l_0_10_2) (* (* 2.0 l_0_10_182) l_0_10_184))))
 (let ((?x57542 (- (+ (- ?x45641 (* (* 2.0 l_0_10_183) l_0_10_185)) ?x57538) (* (* 2.0 l_0_10_272) l_0_10_274))))
 (let ((?x57548 (- (- ?x57542 (* (* 2.0 l_0_10_273) l_0_10_275)) (* (* 2.0 l_0_10_317) l_0_10_319))))
 (= (- (- ?x57548 (* (* 2.0 l_0_10_318) l_0_10_320)) ?x55017) 0.0)))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55069 (* ?x55016 l_0_10_49)))
 (let ((?x57604 (* l_0_10_321 l_0_10_321)))
 (let ((?x57602 (* l_0_10_320 l_0_10_320)))
 (let ((?x57600 (* l_0_10_319 l_0_10_319)))
 (let ((?x57598 (* l_0_10_276 l_0_10_276)))
 (let ((?x57596 (* l_0_10_275 l_0_10_275)))
 (let ((?x57594 (* l_0_10_274 l_0_10_274)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57592 (* ?x21111 l_0_10_229)))
 (let ((?x57585 (- (* (* 2.0 l_0_10_1) l_0_10_4) (* (* 1.0 l_0_10_184) l_0_10_184))))
 (let ((?x57591 (- (- ?x57585 (* (* 1.0 l_0_10_185) l_0_10_185)) (* (* 1.0 l_0_10_186) l_0_10_186))))
 (let ((?x57605 (- (- (- (- (- (- (+ ?x57591 ?x57592) ?x57594) ?x57596) ?x57598) ?x57600) ?x57602) ?x57604)))
 (= (- ?x57605 ?x55069) 0.0)))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55156 (* ?x55016 l_0_10_52)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57640 (* ?x21111 l_0_10_232)))
 (let ((?x57633 (- (* (* 2.0 l_0_10_1) l_0_10_7) (* (* 2.0 l_0_10_184) l_0_10_187))))
 (let ((?x57639 (- (- ?x57633 (* (* 2.0 l_0_10_185) l_0_10_188)) (* (* 2.0 l_0_10_186) l_0_10_189))))
 (let ((?x57647 (- (- (+ ?x57639 ?x57640) (* (* 2.0 l_0_10_274) l_0_10_277)) (* (* 2.0 l_0_10_275) l_0_10_278))))
 (let ((?x57653 (- (- ?x57647 (* (* 2.0 l_0_10_276) l_0_10_279)) (* (* 2.0 l_0_10_319) l_0_10_322))))
 (let ((?x57659 (- (- ?x57653 (* (* 2.0 l_0_10_320) l_0_10_323)) (* (* 2.0 l_0_10_321) l_0_10_324))))
 (= (- ?x57659 ?x55156) 0.0)))))))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57730 (* ?x57160 l_0_10_94)))
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55207 (* ?x55016 l_0_10_56)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57715 (* ?x21111 l_0_10_236)))
 (let ((?x57592 (* ?x21111 l_0_10_229)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x57706 (* ?x55013 l_0_10_139)))
 (let ((?x57709 (- (- (* (* 2.0 l_0_10_1) l_0_10_11) ?x57706) (* (* 2.0 l_0_10_184) l_0_10_191))))
 (let ((?x57713 (- (- ?x57709 (* (* 2.0 l_0_10_185) l_0_10_192)) (* (* 2.0 l_0_10_186) l_0_10_193))))
 (let ((?x57720 (- (- (+ (- ?x57713 ?x57592) ?x57715) (* (* 2.0 l_0_10_274) l_0_10_281)) (* (* 2.0 l_0_10_275) l_0_10_282))))
 (let ((?x57724 (- (- ?x57720 (* (* 2.0 l_0_10_276) l_0_10_283)) (* (* 2.0 l_0_10_319) l_0_10_326))))
 (let ((?x57728 (- (- ?x57724 (* (* 2.0 l_0_10_320) l_0_10_327)) (* (* 2.0 l_0_10_321) l_0_10_328))))
 (= (+ (- ?x57728 ?x55207) ?x57730) 0.0))))))))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55265 (* ?x55016 l_0_10_61)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57774 (* ?x21111 l_0_10_241)))
 (let ((?x57769 (- (* (* 2.0 l_0_10_1) l_0_10_16) (* (* 2.0 l_0_10_184) l_0_10_196))))
 (let ((?x57773 (- (- ?x57769 (* (* 2.0 l_0_10_185) l_0_10_197)) (* (* 2.0 l_0_10_186) l_0_10_198))))
 (let ((?x57779 (- (- (+ ?x57773 ?x57774) (* (* 2.0 l_0_10_274) l_0_10_286)) (* (* 2.0 l_0_10_275) l_0_10_287))))
 (let ((?x57783 (- (- ?x57779 (* (* 2.0 l_0_10_276) l_0_10_288)) (* (* 2.0 l_0_10_319) l_0_10_331))))
 (let ((?x57787 (- (- ?x57783 (* (* 2.0 l_0_10_320) l_0_10_332)) (* (* 2.0 l_0_10_321) l_0_10_333))))
 (= (- ?x57787 ?x55265) 0.0)))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55281 (* ?x55016 l_0_10_67)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57847 (* ?x21111 l_0_10_247)))
 (let ((?x57842 (- (* (* 2.0 l_0_10_1) l_0_10_22) (* (* 2.0 l_0_10_184) l_0_10_202))))
 (let ((?x57846 (- (- ?x57842 (* (* 2.0 l_0_10_185) l_0_10_203)) (* (* 2.0 l_0_10_186) l_0_10_204))))
 (let ((?x57852 (- (- (+ ?x57846 ?x57847) (* (* 2.0 l_0_10_274) l_0_10_292)) (* (* 2.0 l_0_10_275) l_0_10_293))))
 (let ((?x57856 (- (- ?x57852 (* (* 2.0 l_0_10_276) l_0_10_294)) (* (* 2.0 l_0_10_319) l_0_10_337))))
 (let ((?x57860 (- (- ?x57856 (* (* 2.0 l_0_10_320) l_0_10_338)) (* (* 2.0 l_0_10_321) l_0_10_339))))
 (= (- ?x57860 ?x55281) 0.0)))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55291 (* ?x55016 l_0_10_74)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57911 (* ?x21111 l_0_10_254)))
 (let ((?x57906 (- (* (* 2.0 l_0_10_1) l_0_10_29) (* (* 2.0 l_0_10_184) l_0_10_209))))
 (let ((?x57910 (- (- ?x57906 (* (* 2.0 l_0_10_185) l_0_10_210)) (* (* 2.0 l_0_10_186) l_0_10_211))))
 (let ((?x57916 (- (- (+ ?x57910 ?x57911) (* (* 2.0 l_0_10_274) l_0_10_299)) (* (* 2.0 l_0_10_275) l_0_10_300))))
 (let ((?x57920 (- (- ?x57916 (* (* 2.0 l_0_10_276) l_0_10_301)) (* (* 2.0 l_0_10_319) l_0_10_344))))
 (let ((?x57924 (- (- ?x57920 (* (* 2.0 l_0_10_320) l_0_10_345)) (* (* 2.0 l_0_10_321) l_0_10_346))))
 (= (- ?x57924 ?x55291) 0.0)))))))))))
(assert
 (let ((?x55016 (* 2.0 l_0_10_46)))
 (let ((?x55301 (* ?x55016 l_0_10_82)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57983 (* ?x21111 l_0_10_262)))
 (let ((?x57978 (- (* (* 2.0 l_0_10_1) l_0_10_37) (* (* 2.0 l_0_10_184) l_0_10_217))))
 (let ((?x57982 (- (- ?x57978 (* (* 2.0 l_0_10_185) l_0_10_218)) (* (* 2.0 l_0_10_186) l_0_10_219))))
 (let ((?x57988 (- (- (+ ?x57982 ?x57983) (* (* 2.0 l_0_10_274) l_0_10_307)) (* (* 2.0 l_0_10_275) l_0_10_308))))
 (let ((?x57992 (- (- ?x57988 (* (* 2.0 l_0_10_276) l_0_10_309)) (* (* 2.0 l_0_10_319) l_0_10_352))))
 (let ((?x57996 (- (- ?x57992 (* (* 2.0 l_0_10_320) l_0_10_353)) (* (* 2.0 l_0_10_321) l_0_10_354))))
 (= (- ?x57996 ?x55301) 0.0)))))))))))
(assert
 (let ((?x55330 (* l_0_10_48 l_0_10_48)))
 (let ((?x55328 (* l_0_10_47 l_0_10_47)))
 (let ((?x55326 (* l_0_10_3 l_0_10_3)))
 (let ((?x58038 (* l_0_10_228 l_0_10_228)))
 (let ((?x58040 (+ (+ (+ (* l_0_10_2 l_0_10_2) (* l_0_10_227 l_0_10_227)) ?x58038) ?x55326)))
 (= (- (- ?x58040 ?x55328) ?x55330) 0.0)))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55383 (* ?x55382 l_0_10_50)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55380 (* ?x55379 l_0_10_49)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55377 (* ?x55376 l_0_10_5)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58054 (* ?x58053 l_0_10_230)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58051 (* ?x58050 l_0_10_229)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55374 (* ?x55373 l_0_10_4)))
 (= (- (- (+ (+ (+ ?x55374 ?x58051) ?x58054) ?x55377) ?x55380) ?x55383) 0.0))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55454 (* ?x55382 l_0_10_53)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55452 (* ?x55379 l_0_10_52)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55450 (* ?x55376 l_0_10_8)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58070 (* ?x58053 l_0_10_233)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58068 (* ?x58050 l_0_10_232)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55448 (* ?x55373 l_0_10_7)))
 (= (- (- (+ (+ (+ ?x55448 ?x58068) ?x58070) ?x55450) ?x55452) ?x55454) 0.0))))))))))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x58095 (* ?x45358 l_0_10_95)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x58093 (* ?x45405 l_0_10_94)))
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55546 (* ?x55382 l_0_10_57)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55544 (* ?x55379 l_0_10_56)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58089 (* ?x58053 l_0_10_237)))
 (let ((?x58054 (* ?x58053 l_0_10_230)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58086 (* ?x58050 l_0_10_236)))
 (let ((?x58051 (* ?x58050 l_0_10_229)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x58083 (* ?x55321 l_0_10_140)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x21981 (* ?x55318 l_0_10_139)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x55527 (* ?x55526 l_0_10_3)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x55524 (* ?x55523 l_0_10_2)))
 (let ((?x58090 (+ (- (+ (- (- (- (+ ?x55524 ?x55527) ?x21981) ?x58083) ?x58051) ?x58086) ?x58054) ?x58089)))
 (= (+ (+ (- (- ?x58090 ?x55544) ?x55546) ?x58093) ?x58095) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55634 (* ?x55382 l_0_10_62)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55632 (* ?x55379 l_0_10_61)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58130 (* ?x58053 l_0_10_242)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58122 (* ?x58050 l_0_10_241)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x55630 (* ?x55036 l_0_10_3)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x55628 (* ?x55033 l_0_10_2)))
 (= (- (- (+ (+ (+ ?x55628 ?x55630) ?x58122) ?x58130) ?x55632) ?x55634) 0.0))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55708 (* ?x55382 l_0_10_68)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55706 (* ?x55379 l_0_10_67)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x55704 (* ?x55703 l_0_10_3)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58147 (* ?x58053 l_0_10_248)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58145 (* ?x58050 l_0_10_247)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55701 (* ?x55373 l_0_10_22)))
 (= (- (- (+ (+ (+ ?x55701 ?x58145) ?x58147) ?x55704) ?x55706) ?x55708) 0.0))))))))))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57730 (* ?x57160 l_0_10_94)))
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55799 (* ?x55382 l_0_10_75)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55797 (* ?x55379 l_0_10_74)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55795 (* ?x55376 l_0_10_30)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58164 (* ?x58053 l_0_10_255)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58162 (* ?x58050 l_0_10_254)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55793 (* ?x55373 l_0_10_29)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x57706 (* ?x55013 l_0_10_139)))
 (let ((?x58169 (- (- (- (+ (+ (+ (+ ?x57706 ?x55793) ?x58162) ?x58164) ?x55795) ?x55797) ?x55799) ?x57730)))
 (= ?x58169 0.0)))))))))))))))))))
(assert
 (let ((?x55382 (* 2.0 l_0_10_48)))
 (let ((?x55850 (* ?x55382 l_0_10_83)))
 (let ((?x55379 (* 2.0 l_0_10_47)))
 (let ((?x55848 (* ?x55379 l_0_10_82)))
 (let ((?x55376 (* 2.0 l_0_10_3)))
 (let ((?x55846 (* ?x55376 l_0_10_38)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58185 (* ?x58053 l_0_10_263)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58183 (* ?x58050 l_0_10_262)))
 (let ((?x55373 (* 2.0 l_0_10_2)))
 (let ((?x55844 (* ?x55373 l_0_10_37)))
 (= (- (- (+ (+ (+ ?x55844 ?x58183) ?x58185) ?x55846) ?x55848) ?x55850) 0.0))))))))))))))
(assert
 (let ((?x55904 (* l_0_10_6 l_0_10_6)))
 (let ((?x55902 (* l_0_10_51 l_0_10_51)))
 (let ((?x55900 (* l_0_10_50 l_0_10_50)))
 (let ((?x55898 (* l_0_10_5 l_0_10_5)))
 (let ((?x44779 (* l_0_10_49 l_0_10_49)))
 (let ((?x42021 (* l_0_10_4 l_0_10_4)))
 (let ((?x58207 (* l_0_10_231 l_0_10_231)))
 (let ((?x58208 (+ (+ (* l_0_10_229 l_0_10_229) (* l_0_10_230 l_0_10_230)) ?x58207)))
 (= (+ (- (- (+ (- (+ ?x58208 ?x42021) ?x44779) ?x55898) ?x55900) ?x55902) ?x55904) 0.0))))))))))
(assert
 (let ((?x55937 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55934 (* ?x55933 l_0_10_54)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55931 (* ?x55930 l_0_10_53)))
 (let ((?x55928 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55925 (* ?x55924 l_0_10_52)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58230 (* ?x58229 l_0_10_234)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58227 (* ?x58226 l_0_10_233)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58225 (* ?x58224 l_0_10_232)))
 (let ((?x58235 (- (+ (+ (+ ?x58225 ?x58227) ?x58230) (* (* 2.0 l_0_10_4) l_0_10_7)) ?x55925)))
 (= (+ (- (- (+ ?x58235 ?x55928) ?x55931) ?x55934) ?x55937) 0.0)))))))))))))))))
(assert
 (let ((?x58288 (* l_0_10_96 l_0_10_96)))
 (let ((?x58286 (* l_0_10_95 l_0_10_95)))
 (let ((?x58284 (* l_0_10_94 l_0_10_94)))
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55966 (* ?x55933 l_0_10_58)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55964 (* ?x55930 l_0_10_57)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55962 (* ?x55924 l_0_10_56)))
 (let ((?x58207 (* l_0_10_231 l_0_10_231)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58278 (* ?x58229 l_0_10_238)))
 (let ((?x58205 (* l_0_10_230 l_0_10_230)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58275 (* ?x58226 l_0_10_237)))
 (let ((?x58204 (* l_0_10_229 l_0_10_229)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58272 (* ?x58224 l_0_10_236)))
 (let ((?x58270 (* l_0_10_141 l_0_10_141)))
 (let ((?x58268 (* l_0_10_140 l_0_10_140)))
 (let ((?x58266 (* l_0_10_139 l_0_10_139)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x55960 (* ?x55959 l_0_10_6)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x44830 (* ?x55526 l_0_10_5)))
 (let ((?x58269 (- (- (+ (+ (* (* 2.0 l_0_10_11) l_0_10_4) ?x44830) ?x55960) ?x58266) ?x58268)))
 (let ((?x58280 (- (+ (- (+ (- (+ (- ?x58269 ?x58270) ?x58272) ?x58204) ?x58275) ?x58205) ?x58278) ?x58207)))
 (= (+ (+ (+ (- (- (- ?x58280 ?x55962) ?x55964) ?x55966) ?x58284) ?x58286) ?x58288) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x55990 (* ?x55933 l_0_10_63)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x55988 (* ?x55930 l_0_10_62)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x55986 (* ?x55924 l_0_10_61)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58316 (* ?x58229 l_0_10_243)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58314 (* ?x58226 l_0_10_242)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58312 (* ?x58224 l_0_10_241)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x55984 (* ?x55039 l_0_10_6)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x44847 (* ?x55036 l_0_10_5)))
 (let ((?x58315 (+ (+ (+ (+ (* (* 2.0 l_0_10_16) l_0_10_4) ?x44847) ?x55984) ?x58312) ?x58314)))
 (= (- (- (- (+ ?x58315 ?x58316) ?x55986) ?x55988) ?x55990) 0.0)))))))))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56022 (* ?x55933 l_0_10_69)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56020 (* ?x55930 l_0_10_68)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56018 (* ?x55924 l_0_10_67)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56016 (* ?x56015 l_0_10_6)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58349 (* ?x58229 l_0_10_249)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58347 (* ?x58226 l_0_10_248)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56013 (* ?x55703 l_0_10_5)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58344 (* ?x58224 l_0_10_247)))
 (let ((?x58350 (+ (+ (+ (+ (* (* 2.0 l_0_10_22) l_0_10_4) ?x58344) ?x56013) ?x58347) ?x58349)))
 (= (- (- (- (+ ?x58350 ?x56016) ?x56018) ?x56020) ?x56022) 0.0)))))))))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56052 (* ?x55933 l_0_10_76)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56050 (* ?x55930 l_0_10_75)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56048 (* ?x55924 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56046 (* ?x56045 l_0_10_6)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56037 (* ?x56036 l_0_10_5)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58369 (* ?x58229 l_0_10_256)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58367 (* ?x58226 l_0_10_255)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58366 (* ?x58224 l_0_10_254)))
 (let ((?x58373 (+ (+ (+ (+ ?x58366 ?x58367) ?x58369) (* (* 2.0 l_0_10_29) l_0_10_4)) ?x56037)))
 (= (- (- (- (+ ?x58373 ?x56046) ?x56048) ?x56050) ?x56052) 0.0)))))))))))))))))))
(assert
 (let ((?x55933 (* 2.0 l_0_10_51)))
 (let ((?x56085 (* ?x55933 l_0_10_84)))
 (let ((?x55930 (* 2.0 l_0_10_50)))
 (let ((?x56083 (* ?x55930 l_0_10_83)))
 (let ((?x55924 (* 2.0 l_0_10_49)))
 (let ((?x56081 (* ?x55924 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x56079 (* ?x56078 l_0_10_6)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x56076 (* ?x56075 l_0_10_5)))
 (let ((?x44928 (* 2.0 l_0_10_37)))
 (let ((?x57244 (* ?x44928 l_0_10_4)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58405 (* ?x58229 l_0_10_264)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58403 (* ?x58226 l_0_10_263)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58402 (* ?x58224 l_0_10_262)))
 (let ((?x58411 (- (- (+ (+ (+ (+ (+ ?x58402 ?x58403) ?x58405) ?x57244) ?x56076) ?x56079) ?x56081) ?x56083)))
 (= (- ?x58411 ?x56085) 0.0)))))))))))))))))))))
(assert
 (let ((?x56118 (* l_0_10_9 l_0_10_9)))
 (let ((?x56116 (* l_0_10_8 l_0_10_8)))
 (let ((?x56114 (* l_0_10_7 l_0_10_7)))
 (let ((?x56112 (* l_0_10_55 l_0_10_55)))
 (let ((?x56110 (* l_0_10_54 l_0_10_54)))
 (let ((?x56108 (* l_0_10_53 l_0_10_53)))
 (let ((?x56100 (* l_0_10_52 l_0_10_52)))
 (let ((?x58433 (* l_0_10_235 l_0_10_235)))
 (let ((?x58431 (* l_0_10_234 l_0_10_234)))
 (let ((?x58429 (* l_0_10_233 l_0_10_233)))
 (let ((?x58432 (+ (+ (+ (* l_0_10_10 l_0_10_10) (* l_0_10_232 l_0_10_232)) ?x58429) ?x58431)))
 (let ((?x58440 (+ (+ (- (- (- (- (+ ?x58432 ?x58433) ?x56100) ?x56108) ?x56110) ?x56112) ?x56114) ?x56116)))
 (= (+ ?x58440 ?x56118) 0.0))))))))))))))
(assert
 (let ((?x57258 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x57255 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x57252 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x56149 l_0_10_59)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56147 (* ?x56146 l_0_10_58)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56144 (* ?x56143 l_0_10_57)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56141 (* ?x56140 l_0_10_56)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58470 (* ?x57087 l_0_10_239)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58468 (* ?x57084 l_0_10_238)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58466 (* ?x57081 l_0_10_237)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58464 (* ?x57078 l_0_10_236)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58230 (* ?x58229 l_0_10_234)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58227 (* ?x58226 l_0_10_233)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58225 (* ?x58224 l_0_10_232)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x57242 (* ?x55370 l_0_10_144)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x20709 (* ?x55367 l_0_10_143)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x20714 (* ?x55364 l_0_10_142)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56138 (* ?x55959 l_0_10_9)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56136 (* ?x55526 l_0_10_8)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x56134 (* ?x55523 l_0_10_7)))
 (let ((?x58458 (- (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_14) ?x56134) ?x56136) ?x56138) ?x20714)))
 (let ((?x58467 (+ (+ (- (- (- (- (- ?x58458 ?x20709) ?x57242) ?x58225) ?x58227) ?x58230) ?x58464) ?x58466)))
 (let ((?x58476 (+ (- (- (- (- (+ (+ ?x58467 ?x58468) ?x58470) ?x56141) ?x56144) ?x56147) ?x56150) ?x57252)))
 (= (+ (+ ?x58476 ?x57255) ?x57258) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56186 (* ?x56149 l_0_10_64)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56184 (* ?x56146 l_0_10_63)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56182 (* ?x56143 l_0_10_62)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56180 (* ?x56140 l_0_10_61)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58507 (* ?x57087 l_0_10_244)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58505 (* ?x57084 l_0_10_243)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58503 (* ?x57081 l_0_10_242)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58501 (* ?x57078 l_0_10_241)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56178 (* ?x55039 l_0_10_9)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56176 (* ?x55036 l_0_10_8)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x56174 (* ?x55033 l_0_10_7)))
 (let ((?x58502 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_19) ?x56174) ?x56176) ?x56178) ?x58501)))
 (let ((?x58512 (- (- (- (- (+ (+ (+ ?x58502 ?x58503) ?x58505) ?x58507) ?x56180) ?x56182) ?x56184) ?x56186)))
 (= ?x58512 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56269 (* ?x56149 l_0_10_77)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56267 (* ?x56146 l_0_10_76)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56265 (* ?x56143 l_0_10_75)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x56263 (* ?x56140 l_0_10_74)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56261 (* ?x56045 l_0_10_9)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56259 (* ?x56036 l_0_10_8)))
 (let ((?x56256 (* 2.0 l_0_10_29)))
 (let ((?x56257 (* ?x56256 l_0_10_7)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58539 (* ?x57087 l_0_10_257)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58537 (* ?x57084 l_0_10_256)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58535 (* ?x57081 l_0_10_255)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58533 (* ?x57078 l_0_10_254)))
 (let ((?x58540 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_32) ?x58533) ?x58535) ?x58537) ?x58539)))
 (let ((?x58547 (- (- (- (- (+ (+ (+ ?x58540 ?x56257) ?x56259) ?x56261) ?x56263) ?x56265) ?x56267) ?x56269)))
 (= ?x58547 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56149 (* 2.0 l_0_10_55)))
 (let ((?x56284 (* ?x56149 l_0_10_85)))
 (let ((?x56146 (* 2.0 l_0_10_54)))
 (let ((?x56282 (* ?x56146 l_0_10_84)))
 (let ((?x56143 (* 2.0 l_0_10_53)))
 (let ((?x56280 (* ?x56143 l_0_10_83)))
 (let ((?x56140 (* 2.0 l_0_10_52)))
 (let ((?x20148 (* ?x56140 l_0_10_82)))
 (let ((?x56078 (* 2.0 l_0_10_39)))
 (let ((?x20178 (* ?x56078 l_0_10_9)))
 (let ((?x56075 (* 2.0 l_0_10_38)))
 (let ((?x44955 (* ?x56075 l_0_10_8)))
 (let ((?x44928 (* 2.0 l_0_10_37)))
 (let ((?x20130 (* ?x44928 l_0_10_7)))
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58561 (* ?x57087 l_0_10_265)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x34873 (* ?x57084 l_0_10_264)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x34874 (* ?x57081 l_0_10_263)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x22301 (* ?x57078 l_0_10_262)))
 (let ((?x58562 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_40) ?x22301) ?x34874) ?x34873) ?x58561)))
 (let ((?x58569 (- (- (- (- (+ (+ (+ ?x58562 ?x20130) ?x44955) ?x20178) ?x20148) ?x56280) ?x56282) ?x56284)))
 (= ?x58569 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56320 (* l_0_10_60 l_0_10_60)))
 (let ((?x56318 (* l_0_10_59 l_0_10_59)))
 (let ((?x56316 (* l_0_10_58 l_0_10_58)))
 (let ((?x56314 (* l_0_10_57 l_0_10_57)))
 (let ((?x56312 (* l_0_10_56 l_0_10_56)))
 (let ((?x58619 (* l_0_10_240 l_0_10_240)))
 (let ((?x58617 (* l_0_10_239 l_0_10_239)))
 (let ((?x58615 (* l_0_10_238 l_0_10_238)))
 (let ((?x58613 (* l_0_10_237 l_0_10_237)))
 (let ((?x58611 (* l_0_10_236 l_0_10_236)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58278 (* ?x58229 l_0_10_238)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58275 (* ?x58226 l_0_10_237)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58272 (* ?x58224 l_0_10_236)))
 (let ((?x56310 (* l_0_10_15 l_0_10_15)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58605 (* ?x55370 l_0_10_148)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58603 (* ?x55367 l_0_10_147)))
 (let ((?x56308 (* l_0_10_14 l_0_10_14)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58600 (* ?x55364 l_0_10_146)))
 (let ((?x56306 (* l_0_10_13 l_0_10_13)))
 (let ((?x56304 (* l_0_10_12 l_0_10_12)))
 (let ((?x56324 (* l_0_10_11 l_0_10_11)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x58595 (* ?x55514 l_0_10_96)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x58593 (* ?x55502 l_0_10_95)))
 (let ((?x58598 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_94) ?x58593) ?x58595) ?x56324) ?x56304)))
 (let ((?x58608 (- (+ (- (- (+ (- (+ ?x58598 ?x56306) ?x58600) ?x56308) ?x58603) ?x58605) ?x56310) ?x58272)))
 (let ((?x58620 (+ (+ (+ (+ (+ (- (- ?x58608 ?x58275) ?x58278) ?x58611) ?x58613) ?x58615) ?x58617) ?x58619)))
 (= (- (- (- (- (- ?x58620 ?x56312) ?x56314) ?x56316) ?x56318) ?x56320) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56361 (* ?x56360 l_0_10_65)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56358 (* ?x56357 l_0_10_64)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56355 (* ?x56354 l_0_10_63)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56352 (* ?x56351 l_0_10_62)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56349 (* ?x56348 l_0_10_61)))
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58681 (* ?x58680 l_0_10_245)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58678 (* ?x58677 l_0_10_244)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58675 (* ?x58674 l_0_10_243)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58672 (* ?x58671 l_0_10_242)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58669 (* ?x58668 l_0_10_241)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58316 (* ?x58229 l_0_10_243)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58314 (* ?x58226 l_0_10_242)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58312 (* ?x58224 l_0_10_241)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56346 (* ?x56345 l_0_10_20)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x55371 (* ?x55370 l_0_10_153)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x55368 (* ?x55367 l_0_10_152)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56343 (* ?x56342 l_0_10_19)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x55365 (* ?x55364 l_0_10_151)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56340 (* ?x55959 l_0_10_18)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56338 (* ?x55526 l_0_10_17)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55362 (* ?x55171 l_0_10_96)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55360 (* ?x55168 l_0_10_95)))
 (let ((?x58657 (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_94) ?x55360) ?x55362) (* (* 2.0 l_0_10_11) l_0_10_16))))
 (let ((?x58664 (+ (- (- (+ (- (+ (+ ?x58657 ?x56338) ?x56340) ?x55365) ?x56343) ?x55368) ?x55371) ?x56346)))
 (let ((?x58679 (+ (+ (+ (+ (- (- (- ?x58664 ?x58312) ?x58314) ?x58316) ?x58669) ?x58672) ?x58675) ?x58678)))
 (= (- (- (- (- (- (+ ?x58679 ?x58681) ?x56349) ?x56352) ?x56355) ?x56358) ?x56361) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56406 (* ?x56360 l_0_10_71)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56404 (* ?x56357 l_0_10_70)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56402 (* ?x56354 l_0_10_69)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56400 (* ?x56351 l_0_10_68)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56398 (* ?x56348 l_0_10_67)))
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58697 (* ?x58680 l_0_10_251)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58695 (* ?x58677 l_0_10_250)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58693 (* ?x58674 l_0_10_249)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58691 (* ?x58671 l_0_10_248)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58689 (* ?x58668 l_0_10_247)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58349 (* ?x58229 l_0_10_249)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58347 (* ?x58226 l_0_10_248)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58344 (* ?x58224 l_0_10_247)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56396 (* ?x56345 l_0_10_26)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x46087 (* ?x55370 l_0_10_159)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x22442 (* ?x55367 l_0_10_158)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56386 (* ?x56342 l_0_10_25)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46125 (* ?x55364 l_0_10_157)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56383 (* ?x55959 l_0_10_24)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56379 (* ?x55526 l_0_10_23)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x46129 (* ?x57119 l_0_10_96)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x46126 (* ?x57116 l_0_10_95)))
 (let ((?x3449 (+ (* (* 2.0 l_0_10_11) l_0_10_22) (* (* 2.0 l_0_10_112) l_0_10_94))))
 (let ((?x46082 (- (+ (- (+ (+ (+ (+ ?x3449 ?x46126) ?x46129) ?x56379) ?x56383) ?x46125) ?x56386) ?x22442)))
 (let ((?x58692 (+ (+ (- (- (- (+ (- ?x46082 ?x46087) ?x56396) ?x58344) ?x58347) ?x58349) ?x58689) ?x58691)))
 (let ((?x58702 (- (- (- (- (+ (+ (+ ?x58692 ?x58693) ?x58695) ?x58697) ?x56398) ?x56400) ?x56402) ?x56404)))
 (= (- ?x58702 ?x56406) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56449 (* ?x56360 l_0_10_78)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56447 (* ?x56357 l_0_10_77)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56445 (* ?x56354 l_0_10_76)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56443 (* ?x56351 l_0_10_75)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56441 (* ?x56348 l_0_10_74)))
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58747 (* ?x58680 l_0_10_258)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58745 (* ?x58677 l_0_10_257)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58743 (* ?x58674 l_0_10_256)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58741 (* ?x58671 l_0_10_255)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58739 (* ?x58668 l_0_10_254)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58369 (* ?x58229 l_0_10_256)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58367 (* ?x58226 l_0_10_255)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58366 (* ?x58224 l_0_10_254)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56439 (* ?x56345 l_0_10_33)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58733 (* ?x55370 l_0_10_166)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58731 (* ?x55367 l_0_10_165)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56429 (* ?x56342 l_0_10_32)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58728 (* ?x55364 l_0_10_164)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x20246 (* ?x55959 l_0_10_31)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x58725 (* ?x45531 l_0_10_96)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x58723 (* ?x45505 l_0_10_95)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x45135 (* ?x55526 l_0_10_30)))
 (let ((?x46209 (+ (* (* 2.0 l_0_10_11) l_0_10_29) (* (* 2.0 l_0_10_119) l_0_10_94))))
 (let ((?x58732 (- (+ (- (+ (+ (+ (+ ?x46209 ?x45135) ?x58723) ?x58725) ?x20246) ?x58728) ?x56429) ?x58731)))
 (let ((?x58742 (+ (+ (- (- (- (+ (- ?x58732 ?x58733) ?x56439) ?x58366) ?x58367) ?x58369) ?x58739) ?x58741)))
 (let ((?x58752 (- (- (- (- (+ (+ (+ ?x58742 ?x58743) ?x58745) ?x58747) ?x56441) ?x56443) ?x56445) ?x56447)))
 (= (- ?x58752 ?x56449) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56360 (* 2.0 l_0_10_60)))
 (let ((?x56498 (* ?x56360 l_0_10_86)))
 (let ((?x56357 (* 2.0 l_0_10_59)))
 (let ((?x56496 (* ?x56357 l_0_10_85)))
 (let ((?x56354 (* 2.0 l_0_10_58)))
 (let ((?x56494 (* ?x56354 l_0_10_84)))
 (let ((?x56351 (* 2.0 l_0_10_57)))
 (let ((?x56492 (* ?x56351 l_0_10_83)))
 (let ((?x56348 (* 2.0 l_0_10_56)))
 (let ((?x56490 (* ?x56348 l_0_10_82)))
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58791 (* ?x58680 l_0_10_266)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58789 (* ?x58677 l_0_10_265)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58787 (* ?x58674 l_0_10_264)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58785 (* ?x58671 l_0_10_263)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58783 (* ?x58668 l_0_10_262)))
 (let ((?x58229 (* 2.0 l_0_10_231)))
 (let ((?x58405 (* ?x58229 l_0_10_264)))
 (let ((?x58226 (* 2.0 l_0_10_230)))
 (let ((?x58403 (* ?x58226 l_0_10_263)))
 (let ((?x58224 (* 2.0 l_0_10_229)))
 (let ((?x58402 (* ?x58224 l_0_10_262)))
 (let ((?x56345 (* 2.0 l_0_10_15)))
 (let ((?x56488 (* ?x56345 l_0_10_41)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58777 (* ?x55370 l_0_10_174)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x46265 (* ?x55367 l_0_10_173)))
 (let ((?x56342 (* 2.0 l_0_10_14)))
 (let ((?x56478 (* ?x56342 l_0_10_40)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46250 (* ?x55364 l_0_10_172)))
 (let ((?x55959 (* 2.0 l_0_10_13)))
 (let ((?x56475 (* ?x55959 l_0_10_39)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x46261 (* ?x57485 l_0_10_96)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x22570 (* ?x57482 l_0_10_95)))
 (let ((?x55526 (* 2.0 l_0_10_12)))
 (let ((?x56471 (* ?x55526 l_0_10_38)))
 (let ((?x55523 (* 2.0 l_0_10_11)))
 (let ((?x57348 (* ?x55523 l_0_10_37)))
 (let ((?x46264 (+ (+ (+ (+ ?x57348 ?x56471) (* (* 2.0 l_0_10_127) l_0_10_94)) ?x22570) ?x46261)))
 (let ((?x58780 (- (+ (- (- (+ (- (+ ?x46264 ?x56475) ?x46250) ?x56478) ?x46265) ?x58777) ?x56488) ?x58402)))
 (let ((?x58792 (+ (+ (+ (+ (+ (- (- ?x58780 ?x58403) ?x58405) ?x58783) ?x58785) ?x58787) ?x58789) ?x58791)))
 (= (- (- (- (- (- ?x58792 ?x56490) ?x56492) ?x56494) ?x56496) ?x56498) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56552 (* l_0_10_66 l_0_10_66)))
 (let ((?x56550 (* l_0_10_65 l_0_10_65)))
 (let ((?x56548 (* l_0_10_64 l_0_10_64)))
 (let ((?x56546 (* l_0_10_63 l_0_10_63)))
 (let ((?x56544 (* l_0_10_62 l_0_10_62)))
 (let ((?x56542 (* l_0_10_61 l_0_10_61)))
 (let ((?x58853 (* l_0_10_246 l_0_10_246)))
 (let ((?x58851 (* l_0_10_245 l_0_10_245)))
 (let ((?x58849 (* l_0_10_244 l_0_10_244)))
 (let ((?x58847 (* l_0_10_243 l_0_10_243)))
 (let ((?x58845 (* l_0_10_242 l_0_10_242)))
 (let ((?x58843 (* l_0_10_241 l_0_10_241)))
 (let ((?x56540 (* l_0_10_21 l_0_10_21)))
 (let ((?x56538 (* l_0_10_20 l_0_10_20)))
 (let ((?x56536 (* l_0_10_19 l_0_10_19)))
 (let ((?x56534 (* l_0_10_18 l_0_10_18)))
 (let ((?x58840 (+ (+ (+ (* l_0_10_16 l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56534) ?x56536)))
 (let ((?x58852 (+ (+ (+ (+ (+ (+ (+ ?x58840 ?x56538) ?x56540) ?x58843) ?x58845) ?x58847) ?x58849) ?x58851)))
 (let ((?x58860 (- (- (- (- (- (- (+ ?x58852 ?x58853) ?x56542) ?x56544) ?x56546) ?x56548) ?x56550) ?x56552)))
 (= ?x58860 0.0)))))))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56596 (* ?x55086 l_0_10_72)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56594 (* ?x55083 l_0_10_71)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56592 (* ?x55080 l_0_10_70)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56590 (* ?x55077 l_0_10_69)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56588 (* ?x55074 l_0_10_68)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56586 (* ?x55071 l_0_10_67)))
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x58884 (* ?x55066 l_0_10_252)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x58882 (* ?x55063 l_0_10_251)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x58880 (* ?x55060 l_0_10_250)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x58878 (* ?x55057 l_0_10_249)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x58876 (* ?x55054 l_0_10_248)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x58874 (* ?x55051 l_0_10_247)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56584 (* ?x55048 l_0_10_27)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56582 (* ?x55045 l_0_10_26)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56580 (* ?x55042 l_0_10_25)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56578 (* ?x55039 l_0_10_24)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56576 (* ?x55036 l_0_10_23)))
 (let ((?x58872 (+ (+ (+ (+ (* (* 2.0 l_0_10_16) l_0_10_22) ?x56576) ?x56578) ?x56580) ?x56582)))
 (let ((?x58885 (+ (+ (+ (+ (+ (+ (+ ?x58872 ?x56584) ?x58874) ?x58876) ?x58878) ?x58880) ?x58882) ?x58884)))
 (= (- (- (- (- (- (- ?x58885 ?x56586) ?x56588) ?x56590) ?x56592) ?x56594) ?x56596) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55086 (* 2.0 l_0_10_66)))
 (let ((?x56668 (* ?x55086 l_0_10_87)))
 (let ((?x55083 (* 2.0 l_0_10_65)))
 (let ((?x56666 (* ?x55083 l_0_10_86)))
 (let ((?x55080 (* 2.0 l_0_10_64)))
 (let ((?x56664 (* ?x55080 l_0_10_85)))
 (let ((?x55077 (* 2.0 l_0_10_63)))
 (let ((?x56662 (* ?x55077 l_0_10_84)))
 (let ((?x55074 (* 2.0 l_0_10_62)))
 (let ((?x56660 (* ?x55074 l_0_10_83)))
 (let ((?x55071 (* 2.0 l_0_10_61)))
 (let ((?x56658 (* ?x55071 l_0_10_82)))
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x46431 (* ?x55066 l_0_10_267)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x46390 (* ?x55063 l_0_10_266)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x46432 (* ?x55060 l_0_10_265)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x46426 (* ?x55057 l_0_10_264)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x46420 (* ?x55054 l_0_10_263)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x46414 (* ?x55051 l_0_10_262)))
 (let ((?x55048 (* 2.0 l_0_10_21)))
 (let ((?x56656 (* ?x55048 l_0_10_42)))
 (let ((?x55045 (* 2.0 l_0_10_20)))
 (let ((?x56654 (* ?x55045 l_0_10_41)))
 (let ((?x55042 (* 2.0 l_0_10_19)))
 (let ((?x56652 (* ?x55042 l_0_10_40)))
 (let ((?x55039 (* 2.0 l_0_10_18)))
 (let ((?x56650 (* ?x55039 l_0_10_39)))
 (let ((?x55036 (* 2.0 l_0_10_17)))
 (let ((?x56648 (* ?x55036 l_0_10_38)))
 (let ((?x55033 (* 2.0 l_0_10_16)))
 (let ((?x34386 (* ?x55033 l_0_10_37)))
 (let ((?x46423 (+ (+ (+ (+ (+ (+ (+ ?x34386 ?x56648) ?x56650) ?x56652) ?x56654) ?x56656) ?x46414) ?x46420)))
 (let ((?x58899 (- (- (- (+ (+ (+ (+ ?x46423 ?x46426) ?x46432) ?x46390) ?x46431) ?x56658) ?x56660) ?x56662)))
 (= (- (- (- ?x58899 ?x56664) ?x56666) ?x56668) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56738 (* l_0_10_73 l_0_10_73)))
 (let ((?x56736 (* l_0_10_72 l_0_10_72)))
 (let ((?x56734 (* l_0_10_71 l_0_10_71)))
 (let ((?x56732 (* l_0_10_70 l_0_10_70)))
 (let ((?x56730 (* l_0_10_69 l_0_10_69)))
 (let ((?x56728 (* l_0_10_68 l_0_10_68)))
 (let ((?x56726 (* l_0_10_67 l_0_10_67)))
 (let ((?x56724 (* l_0_10_28 l_0_10_28)))
 (let ((?x56722 (* l_0_10_27 l_0_10_27)))
 (let ((?x56720 (* l_0_10_26 l_0_10_26)))
 (let ((?x58945 (* l_0_10_253 l_0_10_253)))
 (let ((?x58943 (* l_0_10_252 l_0_10_252)))
 (let ((?x58941 (* l_0_10_251 l_0_10_251)))
 (let ((?x58939 (* l_0_10_250 l_0_10_250)))
 (let ((?x56709 (* l_0_10_25 l_0_10_25)))
 (let ((?x58936 (* l_0_10_249 l_0_10_249)))
 (let ((?x58934 (* l_0_10_248 l_0_10_248)))
 (let ((?x58932 (* l_0_10_247 l_0_10_247)))
 (let ((?x56706 (* l_0_10_24 l_0_10_24)))
 (let ((?x58933 (+ (+ (+ (* l_0_10_22 l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56706) ?x58932)))
 (let ((?x58946 (+ (+ (+ (+ (+ (+ (+ ?x58933 ?x58934) ?x58936) ?x56709) ?x58939) ?x58941) ?x58943) ?x58945)))
 (let ((?x58953 (- (- (- (- (+ (+ (+ ?x58946 ?x56720) ?x56722) ?x56724) ?x56726) ?x56728) ?x56730) ?x56732)))
 (= (- (- (- ?x58953 ?x56734) ?x56736) ?x56738) 0.0))))))))))))))))))))))))
(assert
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56801 (* ?x56800 l_0_10_80)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56798 (* ?x56797 l_0_10_79)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56795 (* ?x56794 l_0_10_78)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56792 (* ?x56791 l_0_10_77)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56789 (* ?x56788 l_0_10_76)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56786 (* ?x56785 l_0_10_75)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56783 (* ?x56782 l_0_10_74)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56780 (* ?x56779 l_0_10_35)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56777 (* ?x56776 l_0_10_34)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56774 (* ?x56773 l_0_10_33)))
 (let ((?x58990 (* 2.0 l_0_10_253)))
 (let ((?x58991 (* ?x58990 l_0_10_260)))
 (let ((?x58987 (* 2.0 l_0_10_252)))
 (let ((?x58988 (* ?x58987 l_0_10_259)))
 (let ((?x58984 (* 2.0 l_0_10_251)))
 (let ((?x58985 (* ?x58984 l_0_10_258)))
 (let ((?x58981 (* 2.0 l_0_10_250)))
 (let ((?x58982 (* ?x58981 l_0_10_257)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56771 (* ?x56770 l_0_10_32)))
 (let ((?x58977 (* 2.0 l_0_10_249)))
 (let ((?x58978 (* ?x58977 l_0_10_256)))
 (let ((?x58974 (* 2.0 l_0_10_248)))
 (let ((?x58975 (* ?x58974 l_0_10_255)))
 (let ((?x58971 (* 2.0 l_0_10_247)))
 (let ((?x58972 (* ?x58971 l_0_10_254)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56768 (* ?x56015 l_0_10_31)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x56766 (* ?x55703 l_0_10_30)))
 (let ((?x58976 (+ (+ (+ (+ (* (* 2.0 l_0_10_22) l_0_10_29) ?x56766) ?x56768) ?x58972) ?x58975)))
 (let ((?x58993 (+ (+ (+ (+ (+ (+ (+ ?x58976 ?x58978) ?x56771) ?x58982) ?x58985) ?x58988) ?x58991) ?x56774)))
 (let ((?x59000 (- (- (- (- (- (+ (+ ?x58993 ?x56777) ?x56780) ?x56783) ?x56786) ?x56789) ?x56792) ?x56795)))
 (= (- (- ?x59000 ?x56798) ?x56801) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57730 (* ?x57160 l_0_10_94)))
 (let ((?x56800 (* 2.0 l_0_10_73)))
 (let ((?x56841 (* ?x56800 l_0_10_88)))
 (let ((?x56797 (* 2.0 l_0_10_72)))
 (let ((?x56839 (* ?x56797 l_0_10_87)))
 (let ((?x56794 (* 2.0 l_0_10_71)))
 (let ((?x56837 (* ?x56794 l_0_10_86)))
 (let ((?x56791 (* 2.0 l_0_10_70)))
 (let ((?x56835 (* ?x56791 l_0_10_85)))
 (let ((?x56788 (* 2.0 l_0_10_69)))
 (let ((?x56833 (* ?x56788 l_0_10_84)))
 (let ((?x56785 (* 2.0 l_0_10_68)))
 (let ((?x56831 (* ?x56785 l_0_10_83)))
 (let ((?x56782 (* 2.0 l_0_10_67)))
 (let ((?x56829 (* ?x56782 l_0_10_82)))
 (let ((?x56779 (* 2.0 l_0_10_28)))
 (let ((?x56827 (* ?x56779 l_0_10_43)))
 (let ((?x56776 (* 2.0 l_0_10_27)))
 (let ((?x56825 (* ?x56776 l_0_10_42)))
 (let ((?x56773 (* 2.0 l_0_10_26)))
 (let ((?x56823 (* ?x56773 l_0_10_41)))
 (let ((?x58990 (* 2.0 l_0_10_253)))
 (let ((?x59022 (* ?x58990 l_0_10_268)))
 (let ((?x58987 (* 2.0 l_0_10_252)))
 (let ((?x59020 (* ?x58987 l_0_10_267)))
 (let ((?x58984 (* 2.0 l_0_10_251)))
 (let ((?x46587 (* ?x58984 l_0_10_266)))
 (let ((?x58981 (* 2.0 l_0_10_250)))
 (let ((?x46590 (* ?x58981 l_0_10_265)))
 (let ((?x56770 (* 2.0 l_0_10_25)))
 (let ((?x56821 (* ?x56770 l_0_10_40)))
 (let ((?x58977 (* 2.0 l_0_10_249)))
 (let ((?x46577 (* ?x58977 l_0_10_264)))
 (let ((?x58974 (* 2.0 l_0_10_248)))
 (let ((?x46565 (* ?x58974 l_0_10_263)))
 (let ((?x58971 (* 2.0 l_0_10_247)))
 (let ((?x46550 (* ?x58971 l_0_10_262)))
 (let ((?x56015 (* 2.0 l_0_10_24)))
 (let ((?x56819 (* ?x56015 l_0_10_39)))
 (let ((?x55703 (* 2.0 l_0_10_23)))
 (let ((?x45194 (* ?x55703 l_0_10_38)))
 (let ((?x56215 (* 2.0 l_0_10_22)))
 (let ((?x20330 (* ?x56215 l_0_10_37)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x57706 (* ?x55013 l_0_10_139)))
 (let ((?x46589 (+ (+ (+ (+ (+ (+ (+ ?x57706 ?x20330) ?x45194) ?x56819) ?x46550) ?x46565) ?x46577) ?x56821)))
 (let ((?x59026 (+ (+ (+ (+ (+ (+ (+ ?x46589 ?x46590) ?x46587) ?x59020) ?x59022) ?x56823) ?x56825) ?x56827)))
 (let ((?x59033 (- (- (- (- (- (- (- ?x59026 ?x56829) ?x56831) ?x56833) ?x56835) ?x56837) ?x56839) ?x56841)))
 (= (- ?x59033 ?x57730) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56903 (* l_0_10_81 l_0_10_81)))
 (let ((?x56901 (* l_0_10_80 l_0_10_80)))
 (let ((?x56899 (* l_0_10_79 l_0_10_79)))
 (let ((?x56897 (* l_0_10_78 l_0_10_78)))
 (let ((?x56895 (* l_0_10_77 l_0_10_77)))
 (let ((?x56893 (* l_0_10_76 l_0_10_76)))
 (let ((?x56891 (* l_0_10_75 l_0_10_75)))
 (let ((?x56889 (* l_0_10_74 l_0_10_74)))
 (let ((?x56887 (* l_0_10_36 l_0_10_36)))
 (let ((?x56885 (* l_0_10_35 l_0_10_35)))
 (let ((?x56883 (* l_0_10_34 l_0_10_34)))
 (let ((?x56881 (* l_0_10_33 l_0_10_33)))
 (let ((?x56879 (* l_0_10_32 l_0_10_32)))
 (let ((?x56877 (* l_0_10_31 l_0_10_31)))
 (let ((?x56875 (* l_0_10_30 l_0_10_30)))
 (let ((?x56907 (* l_0_10_29 l_0_10_29)))
 (let ((?x59074 (* l_0_10_261 l_0_10_261)))
 (let ((?x59072 (* l_0_10_260 l_0_10_260)))
 (let ((?x59070 (* l_0_10_259 l_0_10_259)))
 (let ((?x59068 (* l_0_10_258 l_0_10_258)))
 (let ((?x59066 (* l_0_10_257 l_0_10_257)))
 (let ((?x59064 (* l_0_10_256 l_0_10_256)))
 (let ((?x59065 (+ (+ (* l_0_10_254 l_0_10_254) (* l_0_10_255 l_0_10_255)) ?x59064)))
 (let ((?x59077 (+ (+ (+ (+ (+ (+ (+ ?x59065 ?x59066) ?x59068) ?x59070) ?x59072) ?x59074) ?x56907) ?x56875)))
 (let ((?x59084 (- (+ (+ (+ (+ (+ (+ ?x59077 ?x56877) ?x56879) ?x56881) ?x56883) ?x56885) ?x56887) ?x56889)))
 (let ((?x59091 (- (- (- (- (- (- (- ?x59084 ?x56891) ?x56893) ?x56895) ?x56897) ?x56899) ?x56901) ?x56903)))
 (= ?x59091 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x56970 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56967 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56964 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56961 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56958 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56955 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56952 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56949 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56946 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56943 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56940 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56937 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56934 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x56045 (* 2.0 l_0_10_31)))
 (let ((?x56931 (* ?x56045 l_0_10_39)))
 (let ((?x56036 (* 2.0 l_0_10_30)))
 (let ((?x56929 (* ?x56036 l_0_10_38)))
 (let ((?x56256 (* 2.0 l_0_10_29)))
 (let ((?x45529 (* ?x56256 l_0_10_37)))
 (let ((?x59123 (* (* 2.0 l_0_10_261) l_0_10_269)))
 (let ((?x59120 (* (* 2.0 l_0_10_260) l_0_10_268)))
 (let ((?x59117 (* (* 2.0 l_0_10_259) l_0_10_267)))
 (let ((?x59114 (* (* 2.0 l_0_10_258) l_0_10_266)))
 (let ((?x59111 (* (* 2.0 l_0_10_257) l_0_10_265)))
 (let ((?x59108 (* (* 2.0 l_0_10_256) l_0_10_264)))
 (let ((?x59105 (* (* 2.0 l_0_10_255) l_0_10_263)))
 (let ((?x46681 (* (* 2.0 l_0_10_254) l_0_10_262)))
 (let ((?x59124 (+ (+ (+ (+ (+ (+ (+ ?x46681 ?x59105) ?x59108) ?x59111) ?x59114) ?x59117) ?x59120) ?x59123)))
 (let ((?x59131 (+ (+ (+ (+ (+ (+ (+ ?x59124 ?x45529) ?x56929) ?x56931) ?x56934) ?x56937) ?x56940) ?x56943)))
 (let ((?x59138 (- (- (- (- (- (- (+ ?x59131 ?x56946) ?x56949) ?x56952) ?x56955) ?x56958) ?x56961) ?x56964)))
 (= (- (- ?x59138 ?x56967) ?x56970) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x57042 (* l_0_10_90 l_0_10_90)))
 (let ((?x57040 (* l_0_10_89 l_0_10_89)))
 (let ((?x57038 (* l_0_10_88 l_0_10_88)))
 (let ((?x57036 (* l_0_10_87 l_0_10_87)))
 (let ((?x57034 (* l_0_10_86 l_0_10_86)))
 (let ((?x57032 (* l_0_10_85 l_0_10_85)))
 (let ((?x57030 (* l_0_10_84 l_0_10_84)))
 (let ((?x57028 (* l_0_10_83 l_0_10_83)))
 (let ((?x57026 (* l_0_10_82 l_0_10_82)))
 (let ((?x57024 (* l_0_10_45 l_0_10_45)))
 (let ((?x57022 (* l_0_10_44 l_0_10_44)))
 (let ((?x57020 (* l_0_10_43 l_0_10_43)))
 (let ((?x57018 (* l_0_10_42 l_0_10_42)))
 (let ((?x57005 (* l_0_10_41 l_0_10_41)))
 (let ((?x57002 (* l_0_10_40 l_0_10_40)))
 (let ((?x56998 (* l_0_10_39 l_0_10_39)))
 (let ((?x56994 (* l_0_10_38 l_0_10_38)))
 (let ((?x57046 (* l_0_10_37 l_0_10_37)))
 (let ((?x59187 (* l_0_10_270 l_0_10_270)))
 (let ((?x59185 (* l_0_10_269 l_0_10_269)))
 (let ((?x59183 (* l_0_10_268 l_0_10_268)))
 (let ((?x59181 (* l_0_10_267 l_0_10_267)))
 (let ((?x59179 (* l_0_10_266 l_0_10_266)))
 (let ((?x59177 (* l_0_10_265 l_0_10_265)))
 (let ((?x59175 (* l_0_10_264 l_0_10_264)))
 (let ((?x59176 (+ (+ (* l_0_10_262 l_0_10_262) (* l_0_10_263 l_0_10_263)) ?x59175)))
 (let ((?x59189 (+ (+ (+ (+ (+ (+ (+ ?x59176 ?x59177) ?x59179) ?x59181) ?x59183) ?x59185) ?x59187) ?x57046)))
 (let ((?x59196 (+ (+ (+ (+ (+ (+ (+ ?x59189 ?x56994) ?x56998) ?x57002) ?x57005) ?x57018) ?x57020) ?x57022)))
 (let ((?x59203 (- (- (- (- (- (- (+ ?x59196 ?x57024) ?x57026) ?x57028) ?x57030) ?x57032) ?x57034) ?x57036)))
 (= (- (- (- ?x59203 ?x57038) ?x57040) ?x57042) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59286 (* l_0_10_91 l_0_10_91)))
 (let ((?x24038 (* l_0_10_136 l_0_10_136)))
 (let ((?x59228 (- (- ?x24038 (* (* 2.0 l_0_10_202) l_0_10_217)) (* (* 2.0 l_0_10_203) l_0_10_218))))
 (let ((?x59234 (- (- ?x59228 (* (* 2.0 l_0_10_204) l_0_10_219)) (* (* 2.0 l_0_10_205) l_0_10_220))))
 (let ((?x59240 (- (- ?x59234 (* (* 2.0 l_0_10_206) l_0_10_221)) (* (* 2.0 l_0_10_207) l_0_10_222))))
 (let ((?x59246 (- (- ?x59240 (* (* 2.0 l_0_10_208) l_0_10_223)) (* (* 2.0 l_0_10_292) l_0_10_307))))
 (let ((?x59252 (- (- ?x59246 (* (* 2.0 l_0_10_293) l_0_10_308)) (* (* 2.0 l_0_10_294) l_0_10_309))))
 (let ((?x59258 (- (- ?x59252 (* (* 2.0 l_0_10_295) l_0_10_310)) (* (* 2.0 l_0_10_296) l_0_10_311))))
 (let ((?x59264 (- (- ?x59258 (* (* 2.0 l_0_10_297) l_0_10_312)) (* (* 2.0 l_0_10_298) l_0_10_313))))
 (let ((?x59270 (- (- ?x59264 (* (* 2.0 l_0_10_337) l_0_10_352)) (* (* 2.0 l_0_10_338) l_0_10_353))))
 (let ((?x59276 (- (- ?x59270 (* (* 2.0 l_0_10_339) l_0_10_354)) (* (* 2.0 l_0_10_340) l_0_10_355))))
 (let ((?x59282 (- (- ?x59276 (* (* 2.0 l_0_10_341) l_0_10_356)) (* (* 2.0 l_0_10_342) l_0_10_357))))
 (= (- (- ?x59282 (* (* 2.0 l_0_10_343) l_0_10_358)) ?x59286) 0.0))))))))))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x46805 (* ?x57160 l_0_10_92)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_137) ?x46805) 0.0))))
(assert
 (let ((?x58990 (* 2.0 l_0_10_253)))
 (let ((?x59022 (* ?x58990 l_0_10_268)))
 (let ((?x58987 (* 2.0 l_0_10_252)))
 (let ((?x59020 (* ?x58987 l_0_10_267)))
 (let ((?x58984 (* 2.0 l_0_10_251)))
 (let ((?x46587 (* ?x58984 l_0_10_266)))
 (let ((?x58981 (* 2.0 l_0_10_250)))
 (let ((?x46590 (* ?x58981 l_0_10_265)))
 (let ((?x58977 (* 2.0 l_0_10_249)))
 (let ((?x46577 (* ?x58977 l_0_10_264)))
 (let ((?x58974 (* 2.0 l_0_10_248)))
 (let ((?x46565 (* ?x58974 l_0_10_263)))
 (let ((?x58971 (* 2.0 l_0_10_247)))
 (let ((?x46550 (* ?x58971 l_0_10_262)))
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59386 (* ?x59385 l_0_10_178)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59383 (* ?x59382 l_0_10_177)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59380 (* ?x59379 l_0_10_176)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59377 (* ?x59376 l_0_10_175)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59374 (* ?x59373 l_0_10_174)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59371 (* ?x59370 l_0_10_173)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59368 (* ?x59367 l_0_10_172)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59365 (* ?x55013 l_0_10_146)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59363 (* ?x59362 l_0_10_133)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59360 (* ?x59359 l_0_10_132)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59357 (* ?x59356 l_0_10_131)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59354 (* ?x59353 l_0_10_130)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59351 (* ?x57119 l_0_10_129)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59349 (* ?x57116 l_0_10_128)))
 (let ((?x55499 (* (- 2.0) l_0_10_101)))
 (let ((?x59346 (* ?x55499 l_0_10_91)))
 (let ((?x59355 (+ (+ (+ (+ ?x59346 (* (* 2.0 l_0_10_112) l_0_10_127)) ?x59349) ?x59351) ?x59354)))
 (let ((?x59375 (- (- (- (+ (+ (+ (+ ?x59355 ?x59357) ?x59360) ?x59363) ?x59365) ?x59368) ?x59371) ?x59374)))
 (let ((?x59390 (- (- (- (- (- (- (- ?x59375 ?x59377) ?x59380) ?x59383) ?x59386) ?x46550) ?x46565) ?x46577)))
 (= (- (- (- (- ?x59390 ?x46590) ?x46587) ?x59020) ?x59022) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x55014 (* ?x55013 l_0_10_151)))
 (= (+ (* (* (- 2.0) l_0_10_106) l_0_10_91) ?x55014) 0.0))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59427 (* ?x55013 l_0_10_157)))
 (= (+ (* (* (- 2.0) l_0_10_112) l_0_10_91) ?x59427) 0.0))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59434 (* ?x55013 l_0_10_164)))
 (= (+ (* (* (- 2.0) l_0_10_119) l_0_10_91) ?x59434) 0.0))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59445 (* ?x55013 l_0_10_172)))
 (= (+ (* (* (- 2.0) l_0_10_127) l_0_10_91) ?x59445) 0.0))))
(assert
 (let ((?x59463 (* l_0_10_93 l_0_10_93)))
 (let ((?x59461 (* l_0_10_92 l_0_10_92)))
 (let ((?x59455 (* l_0_10_138 l_0_10_138)))
 (let ((?x59453 (* l_0_10_137 l_0_10_137)))
 (let ((?x59456 (+ ?x59453 ?x59455)))
 (= (- (- ?x59456 ?x59461) ?x59463) 0.0)))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x58095 (* ?x45358 l_0_10_95)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x58093 (* ?x45405 l_0_10_94)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x58083 (* ?x55321 l_0_10_140)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x21981 (* ?x55318 l_0_10_139)))
 (= (- (- (+ ?x21981 ?x58083) ?x58093) ?x58095) 0.0))))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x36253 (* ?x55321 l_0_10_147)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x36247 (* ?x55318 l_0_10_146)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x24199 (* ?x55502 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_101) l_0_10_92) ?x24199) ?x36247) ?x36253) 0.0))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x55322 (* ?x55321 l_0_10_152)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x55319 (* ?x55318 l_0_10_151)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55312 (* ?x55168 l_0_10_93)))
 (let ((?x55323 (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_92) ?x55312) ?x55319) ?x55322)))
 (= ?x55323 0.0)))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59479 (* ?x55321 l_0_10_158)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59477 (* ?x55318 l_0_10_157)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59475 (* ?x57116 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_112) l_0_10_92) ?x59475) ?x59477) ?x59479) 0.0))))))))
(assert
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59386 (* ?x59385 l_0_10_178)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59383 (* ?x59382 l_0_10_177)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59380 (* ?x59379 l_0_10_176)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59377 (* ?x59376 l_0_10_175)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59374 (* ?x59373 l_0_10_174)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59371 (* ?x59370 l_0_10_173)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59368 (* ?x59367 l_0_10_172)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59506 (* ?x55321 l_0_10_165)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59504 (* ?x55318 l_0_10_164)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59502 (* ?x45505 l_0_10_93)))
 (let ((?x45483 (* 2.0 l_0_10_119)))
 (let ((?x59500 (* ?x45483 l_0_10_92)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59363 (* ?x59362 l_0_10_133)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59360 (* ?x59359 l_0_10_132)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59357 (* ?x59356 l_0_10_131)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59354 (* ?x59353 l_0_10_130)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59351 (* ?x57119 l_0_10_129)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59349 (* ?x57116 l_0_10_128)))
 (let ((?x59497 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_127) ?x59349) ?x59351) ?x59354) ?x59357)))
 (let ((?x59499 (- (- ?x59497 ?x59360) ?x59363)))
 (let ((?x59510 (+ (+ (+ (+ (+ (- (- ?x59499 ?x59500) ?x59502) ?x59504) ?x59506) ?x59368) ?x59371) ?x59374)))
 (= (+ (+ (+ (+ ?x59510 ?x59377) ?x59380) ?x59383) ?x59386) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59524 (* ?x55321 l_0_10_173)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x46999 (* ?x55318 l_0_10_172)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x46998 (* ?x57482 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_127) l_0_10_92) ?x46998) ?x46999) ?x59524) 0.0))))))))
(assert
 (let ((?x58288 (* l_0_10_96 l_0_10_96)))
 (let ((?x58286 (* l_0_10_95 l_0_10_95)))
 (let ((?x58284 (* l_0_10_94 l_0_10_94)))
 (let ((?x58270 (* l_0_10_141 l_0_10_141)))
 (let ((?x59538 (+ (+ (* l_0_10_139 l_0_10_139) (* l_0_10_140 l_0_10_140)) ?x58270)))
 (= (- (- (- ?x59538 ?x58284) ?x58286) ?x58288) 0.0)))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58605 (* ?x55370 l_0_10_148)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58603 (* ?x55367 l_0_10_147)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58600 (* ?x55364 l_0_10_146)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x58595 (* ?x55514 l_0_10_96)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x58593 (* ?x55502 l_0_10_95)))
 (let ((?x59554 (+ (+ (- (- (* (* (- 2.0) l_0_10_101) l_0_10_94) ?x58593) ?x58595) ?x58600) ?x58603)))
 (= (+ ?x59554 ?x58605) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x55371 (* ?x55370 l_0_10_153)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x55368 (* ?x55367 l_0_10_152)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x55365 (* ?x55364 l_0_10_151)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55362 (* ?x55171 l_0_10_96)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55360 (* ?x55168 l_0_10_95)))
 (let ((?x55369 (+ (+ (- (- (* (* (- 2.0) l_0_10_106) l_0_10_94) ?x55360) ?x55362) ?x55365) ?x55368)))
 (let ((?x55372 (+ ?x55369 ?x55371)))
 (= ?x55372 0.0))))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x46087 (* ?x55370 l_0_10_159)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x22442 (* ?x55367 l_0_10_158)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46125 (* ?x55364 l_0_10_157)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x46129 (* ?x57119 l_0_10_96)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x46126 (* ?x57116 l_0_10_95)))
 (let ((?x59563 (+ (+ (- (- (* (* (- 2.0) l_0_10_112) l_0_10_94) ?x46126) ?x46129) ?x46125) ?x22442)))
 (= (+ ?x59563 ?x46087) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58733 (* ?x55370 l_0_10_166)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58731 (* ?x55367 l_0_10_165)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58728 (* ?x55364 l_0_10_164)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x58725 (* ?x45531 l_0_10_96)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x58723 (* ?x45505 l_0_10_95)))
 (let ((?x59575 (+ (+ (- (- (* (* (- 2.0) l_0_10_119) l_0_10_94) ?x58723) ?x58725) ?x58728) ?x58731)))
 (= (+ ?x59575 ?x58733) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58777 (* ?x55370 l_0_10_174)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x46265 (* ?x55367 l_0_10_173)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46250 (* ?x55364 l_0_10_172)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x46261 (* ?x57485 l_0_10_96)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x22570 (* ?x57482 l_0_10_95)))
 (let ((?x59584 (+ (+ (- (- (* (* (- 2.0) l_0_10_127) l_0_10_94) ?x22570) ?x46261) ?x46250) ?x46265)))
 (= (+ ?x59584 ?x58777) 0.0)))))))))))))
(assert
 (let ((?x59604 (* l_0_10_150 l_0_10_150)))
 (let ((?x59602 (* l_0_10_149 l_0_10_149)))
 (let ((?x59600 (* l_0_10_148 l_0_10_148)))
 (let ((?x59598 (* l_0_10_147 l_0_10_147)))
 (let ((?x59596 (* l_0_10_146 l_0_10_146)))
 (let ((?x59594 (* l_0_10_105 l_0_10_105)))
 (let ((?x59592 (* l_0_10_104 l_0_10_104)))
 (let ((?x59590 (* l_0_10_103 l_0_10_103)))
 (let ((?x59591 (- (- (* (- l_0_10_101) l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x59590)))
 (let ((?x59605 (+ (+ (+ (+ (+ (- (- ?x59591 ?x59592) ?x59594) ?x59596) ?x59598) ?x59600) ?x59602) ?x59604)))
 (= ?x59605 0.0))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x55542 (* ?x55541 l_0_10_155)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x55539 (* ?x55538 l_0_10_154)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x55536 (* ?x55535 l_0_10_153)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x55533 (* ?x55532 l_0_10_152)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x55530 (* ?x55529 l_0_10_151)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x55521 (* ?x55520 l_0_10_110)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x55518 (* ?x55517 l_0_10_109)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x55515 (* ?x55514 l_0_10_108)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x55512 (* ?x55502 l_0_10_107)))
 (let ((?x55522 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_106) ?x55512) ?x55515) ?x55518) ?x55521)))
 (= (+ (+ (+ (+ (+ ?x55522 ?x55530) ?x55533) ?x55536) ?x55539) ?x55542) 0.0)))))))))))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59623 (* ?x55541 l_0_10_161)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59621 (* ?x55538 l_0_10_160)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59619 (* ?x55535 l_0_10_159)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59617 (* ?x55532 l_0_10_158)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x36536 (* ?x55529 l_0_10_157)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x24808 (* ?x55520 l_0_10_116)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x46977 (* ?x55517 l_0_10_115)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x24717 (* ?x55514 l_0_10_114)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x47018 (* ?x55502 l_0_10_113)))
 (let ((?x23543 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_112) ?x47018) ?x24717) ?x46977) ?x24808)))
 (= (+ (+ (+ (+ (+ ?x23543 ?x36536) ?x59617) ?x59619) ?x59621) ?x59623) 0.0)))))))))))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59663 (* ?x55541 l_0_10_168)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59661 (* ?x55538 l_0_10_167)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59659 (* ?x55535 l_0_10_166)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59657 (* ?x55532 l_0_10_165)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59655 (* ?x55529 l_0_10_164)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59653 (* ?x55520 l_0_10_123)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59651 (* ?x55517 l_0_10_122)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59649 (* ?x55514 l_0_10_121)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59647 (* ?x55502 l_0_10_120)))
 (let ((?x59654 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_119) ?x59647) ?x59649) ?x59651) ?x59653)))
 (= (+ (+ (+ (+ (+ ?x59654 ?x59655) ?x59657) ?x59659) ?x59661) ?x59663) 0.0)))))))))))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59713 (* ?x55541 l_0_10_176)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59711 (* ?x55538 l_0_10_175)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59709 (* ?x55535 l_0_10_174)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59707 (* ?x55532 l_0_10_173)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59705 (* ?x55529 l_0_10_172)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59703 (* ?x55520 l_0_10_131)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59693 (* ?x55517 l_0_10_130)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59690 (* ?x55514 l_0_10_129)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59686 (* ?x55502 l_0_10_128)))
 (let ((?x59704 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_127) ?x59686) ?x59690) ?x59693) ?x59703)))
 (= (+ (+ (+ (+ (+ ?x59704 ?x59705) ?x59707) ?x59709) ?x59711) ?x59713) 0.0)))))))))))))))))))))
(assert
 (let ((?x55626 (* l_0_10_156 l_0_10_156)))
 (let ((?x55624 (* l_0_10_155 l_0_10_155)))
 (let ((?x55622 (* l_0_10_154 l_0_10_154)))
 (let ((?x55620 (* l_0_10_153 l_0_10_153)))
 (let ((?x55618 (* l_0_10_152 l_0_10_152)))
 (let ((?x55616 (* l_0_10_151 l_0_10_151)))
 (let ((?x55614 (* l_0_10_111 l_0_10_111)))
 (let ((?x55612 (* l_0_10_110 l_0_10_110)))
 (let ((?x55600 (* l_0_10_109 l_0_10_109)))
 (let ((?x55596 (* l_0_10_108 l_0_10_108)))
 (let ((?x55598 (- (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x55596)))
 (let ((?x55623 (+ (+ (+ (+ (- (- (- ?x55598 ?x55600) ?x55612) ?x55614) ?x55616) ?x55618) ?x55620) ?x55622)))
 (let ((?x55627 (+ (+ ?x55623 ?x55624) ?x55626)))
 (= ?x55627 0.0)))))))))))))))
(assert
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55699 (* ?x55198 l_0_10_162)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55697 (* ?x55195 l_0_10_161)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55695 (* ?x55192 l_0_10_160)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55693 (* ?x55189 l_0_10_159)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55691 (* ?x55186 l_0_10_158)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55689 (* ?x55183 l_0_10_157)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55687 (* ?x55180 l_0_10_117)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55685 (* ?x55177 l_0_10_116)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55683 (* ?x55174 l_0_10_115)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55681 (* ?x55171 l_0_10_114)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55669 (* ?x55168 l_0_10_113)))
 (let ((?x55686 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x55669) ?x55681) ?x55683) ?x55685)))
 (let ((?x55700 (+ (+ (+ (+ (+ (+ (- ?x55686 ?x55687) ?x55689) ?x55691) ?x55693) ?x55695) ?x55697) ?x55699)))
 (= ?x55700 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55842 (* ?x55198 l_0_10_177)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55840 (* ?x55195 l_0_10_176)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55838 (* ?x55192 l_0_10_175)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55836 (* ?x55189 l_0_10_174)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55834 (* ?x55186 l_0_10_173)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55832 (* ?x55183 l_0_10_172)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55830 (* ?x55180 l_0_10_132)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55828 (* ?x55177 l_0_10_131)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55826 (* ?x55174 l_0_10_130)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55824 (* ?x55171 l_0_10_129)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55822 (* ?x55168 l_0_10_128)))
 (let ((?x55829 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_127) ?x55822) ?x55824) ?x55826) ?x55828)))
 (let ((?x55843 (+ (+ (+ (+ (+ (+ (- ?x55829 ?x55830) ?x55832) ?x55834) ?x55836) ?x55838) ?x55840) ?x55842)))
 (= ?x55843 0.0))))))))))))))))))))))))))
(assert
 (let ((?x59778 (* l_0_10_163 l_0_10_163)))
 (let ((?x59776 (* l_0_10_162 l_0_10_162)))
 (let ((?x59774 (* l_0_10_161 l_0_10_161)))
 (let ((?x59772 (* l_0_10_160 l_0_10_160)))
 (let ((?x59770 (* l_0_10_159 l_0_10_159)))
 (let ((?x59768 (* l_0_10_158 l_0_10_158)))
 (let ((?x59766 (* l_0_10_157 l_0_10_157)))
 (let ((?x59764 (* l_0_10_118 l_0_10_118)))
 (let ((?x59762 (* l_0_10_117 l_0_10_117)))
 (let ((?x59760 (* l_0_10_116 l_0_10_116)))
 (let ((?x59758 (* l_0_10_115 l_0_10_115)))
 (let ((?x59756 (* l_0_10_114 l_0_10_114)))
 (let ((?x59757 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59756)))
 (let ((?x59771 (+ (+ (+ (- (- (- (- ?x59757 ?x59758) ?x59760) ?x59762) ?x59764) ?x59766) ?x59768) ?x59770)))
 (= (+ (+ (+ (+ ?x59771 ?x59772) ?x59774) ?x59776) ?x59778) 0.0))))))))))))))))
(assert
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59833 (* ?x59385 l_0_10_170)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59831 (* ?x59382 l_0_10_169)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59829 (* ?x59379 l_0_10_168)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59827 (* ?x59376 l_0_10_167)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59825 (* ?x59373 l_0_10_166)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59823 (* ?x59370 l_0_10_165)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59821 (* ?x59367 l_0_10_164)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59819 (* ?x59362 l_0_10_125)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59817 (* ?x59359 l_0_10_124)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59815 (* ?x59356 l_0_10_123)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59813 (* ?x59353 l_0_10_122)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59811 (* ?x57119 l_0_10_121)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59809 (* ?x57116 l_0_10_120)))
 (let ((?x59816 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_119) ?x59809) ?x59811) ?x59813) ?x59815)))
 (let ((?x59830 (+ (+ (+ (+ (+ (- (- ?x59816 ?x59817) ?x59819) ?x59821) ?x59823) ?x59825) ?x59827) ?x59829)))
 (= (+ (+ ?x59830 ?x59831) ?x59833) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59386 (* ?x59385 l_0_10_178)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59383 (* ?x59382 l_0_10_177)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59380 (* ?x59379 l_0_10_176)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59377 (* ?x59376 l_0_10_175)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59374 (* ?x59373 l_0_10_174)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59371 (* ?x59370 l_0_10_173)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59368 (* ?x59367 l_0_10_172)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59363 (* ?x59362 l_0_10_133)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59360 (* ?x59359 l_0_10_132)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59357 (* ?x59356 l_0_10_131)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59354 (* ?x59353 l_0_10_130)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59351 (* ?x57119 l_0_10_129)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59349 (* ?x57116 l_0_10_128)))
 (let ((?x59497 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_127) ?x59349) ?x59351) ?x59354) ?x59357)))
 (let ((?x59499 (- (- ?x59497 ?x59360) ?x59363)))
 (let ((?x59872 (+ (+ (+ (+ (+ (+ (+ ?x59499 ?x59368) ?x59371) ?x59374) ?x59377) ?x59380) ?x59383) ?x59386)))
 (= ?x59872 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59906 (* l_0_10_171 l_0_10_171)))
 (let ((?x59904 (* l_0_10_170 l_0_10_170)))
 (let ((?x59902 (* l_0_10_169 l_0_10_169)))
 (let ((?x59900 (* l_0_10_168 l_0_10_168)))
 (let ((?x59898 (* l_0_10_167 l_0_10_167)))
 (let ((?x59896 (* l_0_10_166 l_0_10_166)))
 (let ((?x59894 (* l_0_10_165 l_0_10_165)))
 (let ((?x59892 (* l_0_10_164 l_0_10_164)))
 (let ((?x59890 (* l_0_10_126 l_0_10_126)))
 (let ((?x59888 (* l_0_10_125 l_0_10_125)))
 (let ((?x59886 (* l_0_10_124 l_0_10_124)))
 (let ((?x59884 (* l_0_10_123 l_0_10_123)))
 (let ((?x59882 (* l_0_10_122 l_0_10_122)))
 (let ((?x59880 (* l_0_10_121 l_0_10_121)))
 (let ((?x59881 (- (- (* (- l_0_10_119) l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59880)))
 (let ((?x59895 (+ (+ (- (- (- (- (- ?x59881 ?x59882) ?x59884) ?x59886) ?x59888) ?x59890) ?x59892) ?x59894)))
 (= (+ (+ (+ (+ (+ (+ ?x59895 ?x59896) ?x59898) ?x59900) ?x59902) ?x59904) ?x59906) 0.0))))))))))))))))))
(assert
 (let ((?x59985 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59982 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59979 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59976 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59973 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59970 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59967 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59964 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59961 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59958 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59955 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59952 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59949 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x59946 (* ?x45531 l_0_10_129)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59944 (* ?x45505 l_0_10_128)))
 (let ((?x59953 (- (- (- (- (* (* (- 2.0) l_0_10_119) l_0_10_127) ?x59944) ?x59946) ?x59949) ?x59952)))
 (let ((?x59974 (+ (+ (+ (+ (- (- (- ?x59953 ?x59955) ?x59958) ?x59961) ?x59964) ?x59967) ?x59970) ?x59973)))
 (= (+ (+ (+ (+ ?x59974 ?x59976) ?x59979) ?x59982) ?x59985) 0.0)))))))))))))))))))))
(assert
 (let ((?x60034 (* l_0_10_180 l_0_10_180)))
 (let ((?x60032 (* l_0_10_179 l_0_10_179)))
 (let ((?x60030 (* l_0_10_178 l_0_10_178)))
 (let ((?x60028 (* l_0_10_177 l_0_10_177)))
 (let ((?x60026 (* l_0_10_176 l_0_10_176)))
 (let ((?x60024 (* l_0_10_175 l_0_10_175)))
 (let ((?x60022 (* l_0_10_174 l_0_10_174)))
 (let ((?x60020 (* l_0_10_173 l_0_10_173)))
 (let ((?x60018 (* l_0_10_172 l_0_10_172)))
 (let ((?x60016 (* l_0_10_135 l_0_10_135)))
 (let ((?x47168 (* l_0_10_134 l_0_10_134)))
 (let ((?x24970 (* l_0_10_133 l_0_10_133)))
 (let ((?x47156 (* l_0_10_132 l_0_10_132)))
 (let ((?x47118 (* l_0_10_131 l_0_10_131)))
 (let ((?x47088 (* l_0_10_130 l_0_10_130)))
 (let ((?x47077 (* l_0_10_129 l_0_10_129)))
 (let ((?x47082 (- (- (* (- l_0_10_127) l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47077)))
 (let ((?x60019 (+ (- (- (- (- (- (- ?x47082 ?x47088) ?x47118) ?x47156) ?x24970) ?x47168) ?x60016) ?x60018)))
 (let ((?x60033 (+ (+ (+ (+ (+ (+ (+ ?x60019 ?x60020) ?x60022) ?x60024) ?x60026) ?x60028) ?x60030) ?x60032)))
 (= (+ ?x60033 ?x60034) 0.0)))))))))))))))))))))
(assert
 (let ((?x59286 (* l_0_10_91 l_0_10_91)))
 (let ((?x24038 (* l_0_10_136 l_0_10_136)))
 (let ((?x60062 (- (- ?x24038 (* (* 2.0 l_0_10_182) l_0_10_209)) (* (* 2.0 l_0_10_183) l_0_10_210))))
 (let ((?x60066 (- (- ?x60062 (* (* 2.0 l_0_10_272) l_0_10_299)) (* (* 2.0 l_0_10_273) l_0_10_300))))
 (let ((?x60070 (- (- ?x60066 (* (* 2.0 l_0_10_317) l_0_10_344)) (* (* 2.0 l_0_10_318) l_0_10_345))))
 (= (- ?x60070 ?x59286) 0.0)))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x46805 (* ?x57160 l_0_10_92)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_137) ?x46805) 0.0))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57161 (* ?x57160 l_0_10_97)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x45376 (* ?x55013 l_0_10_142)))
 (= (- ?x45376 ?x57161) 0.0))))))
(assert
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58164 (* ?x58053 l_0_10_255)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58162 (* ?x58050 l_0_10_254)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59506 (* ?x55321 l_0_10_165)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59504 (* ?x55318 l_0_10_164)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59365 (* ?x55013 l_0_10_146)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59502 (* ?x45505 l_0_10_93)))
 (let ((?x45483 (* 2.0 l_0_10_119)))
 (let ((?x59500 (* ?x45483 l_0_10_92)))
 (let ((?x55499 (* (- 2.0) l_0_10_101)))
 (let ((?x59346 (* ?x55499 l_0_10_91)))
 (let ((?x60092 (- (- (- (- (+ (+ (+ ?x59346 ?x59500) ?x59502) ?x59365) ?x59504) ?x59506) ?x58162) ?x58164)))
 (= ?x60092 0.0)))))))))))))))))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59427 (* ?x55013 l_0_10_157)))
 (= (+ (* (* (- 2.0) l_0_10_112) l_0_10_91) ?x59427) 0.0))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59434 (* ?x55013 l_0_10_164)))
 (= (+ (* (* (- 2.0) l_0_10_119) l_0_10_91) ?x59434) 0.0))))
(assert
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59445 (* ?x55013 l_0_10_172)))
 (= (+ (* (* (- 2.0) l_0_10_127) l_0_10_91) ?x59445) 0.0))))
(assert
 (let ((?x59463 (* l_0_10_93 l_0_10_93)))
 (let ((?x59461 (* l_0_10_92 l_0_10_92)))
 (let ((?x59455 (* l_0_10_138 l_0_10_138)))
 (let ((?x59453 (* l_0_10_137 l_0_10_137)))
 (let ((?x59456 (+ ?x59453 ?x59455)))
 (= (- (- ?x59456 ?x59461) ?x59463) 0.0)))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x58095 (* ?x45358 l_0_10_95)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x58093 (* ?x45405 l_0_10_94)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x58083 (* ?x55321 l_0_10_140)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x21981 (* ?x55318 l_0_10_139)))
 (= (- (- (+ ?x21981 ?x58083) ?x58093) ?x58095) 0.0))))))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x45361 (* ?x45358 l_0_10_98)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x45417 (* ?x45405 l_0_10_97)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x45378 (* ?x55321 l_0_10_143)))
 (let ((?x45380 (+ (* (* 2.0 l_0_10_137) l_0_10_142) ?x45378)))
 (= (- (- ?x45380 ?x45417) ?x45361) 0.0)))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x36253 (* ?x55321 l_0_10_147)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x36247 (* ?x55318 l_0_10_146)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x24199 (* ?x55502 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_101) l_0_10_92) ?x24199) ?x36247) ?x36253) 0.0))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59479 (* ?x55321 l_0_10_158)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59477 (* ?x55318 l_0_10_157)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59475 (* ?x57116 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_112) l_0_10_92) ?x59475) ?x59477) ?x59479) 0.0))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59506 (* ?x55321 l_0_10_165)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59504 (* ?x55318 l_0_10_164)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59502 (* ?x45505 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_119) l_0_10_92) ?x59502) ?x59504) ?x59506) 0.0))))))))
(assert
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59524 (* ?x55321 l_0_10_173)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x46999 (* ?x55318 l_0_10_172)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x46998 (* ?x57482 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_127) l_0_10_92) ?x46998) ?x46999) ?x59524) 0.0))))))))
(assert
 (let ((?x58288 (* l_0_10_96 l_0_10_96)))
 (let ((?x58286 (* l_0_10_95 l_0_10_95)))
 (let ((?x58284 (* l_0_10_94 l_0_10_94)))
 (let ((?x58270 (* l_0_10_141 l_0_10_141)))
 (let ((?x59538 (+ (+ (* l_0_10_139 l_0_10_139) (* l_0_10_140 l_0_10_140)) ?x58270)))
 (= (- (- (- ?x59538 ?x58284) ?x58286) ?x58288) 0.0)))))))
(assert
 (let ((?x57258 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x57255 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x57252 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x57242 (* ?x55370 l_0_10_144)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x20709 (* ?x55367 l_0_10_143)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x20714 (* ?x55364 l_0_10_142)))
 (let ((?x57243 (+ (+ ?x20714 ?x20709) ?x57242)))
 (= (- (- (- ?x57243 ?x57252) ?x57255) ?x57258) 0.0))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58605 (* ?x55370 l_0_10_148)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58603 (* ?x55367 l_0_10_147)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58600 (* ?x55364 l_0_10_146)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x58595 (* ?x55514 l_0_10_96)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x58593 (* ?x55502 l_0_10_95)))
 (let ((?x59554 (+ (+ (- (- (* (* (- 2.0) l_0_10_101) l_0_10_94) ?x58593) ?x58595) ?x58600) ?x58603)))
 (= (+ ?x59554 ?x58605) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x46087 (* ?x55370 l_0_10_159)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x22442 (* ?x55367 l_0_10_158)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46125 (* ?x55364 l_0_10_157)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x46129 (* ?x57119 l_0_10_96)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x46126 (* ?x57116 l_0_10_95)))
 (let ((?x59563 (+ (+ (- (- (* (* (- 2.0) l_0_10_112) l_0_10_94) ?x46126) ?x46129) ?x46125) ?x22442)))
 (= (+ ?x59563 ?x46087) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58733 (* ?x55370 l_0_10_166)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x58731 (* ?x55367 l_0_10_165)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x58728 (* ?x55364 l_0_10_164)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x58725 (* ?x45531 l_0_10_96)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x58723 (* ?x45505 l_0_10_95)))
 (let ((?x59575 (+ (+ (- (- (* (* (- 2.0) l_0_10_119) l_0_10_94) ?x58723) ?x58725) ?x58728) ?x58731)))
 (= (+ ?x59575 ?x58733) 0.0)))))))))))))
(assert
 (let ((?x55370 (* 2.0 l_0_10_141)))
 (let ((?x58777 (* ?x55370 l_0_10_174)))
 (let ((?x55367 (* 2.0 l_0_10_140)))
 (let ((?x46265 (* ?x55367 l_0_10_173)))
 (let ((?x55364 (* 2.0 l_0_10_139)))
 (let ((?x46250 (* ?x55364 l_0_10_172)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x46261 (* ?x57485 l_0_10_96)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x22570 (* ?x57482 l_0_10_95)))
 (let ((?x59584 (+ (+ (- (- (* (* (- 2.0) l_0_10_127) l_0_10_94) ?x22570) ?x46261) ?x46250) ?x46265)))
 (= (+ ?x59584 ?x58777) 0.0)))))))))))))
(assert
 (let ((?x57326 (* l_0_10_99 l_0_10_99)))
 (let ((?x57324 (* l_0_10_98 l_0_10_98)))
 (let ((?x57322 (* l_0_10_97 l_0_10_97)))
 (let ((?x57313 (* l_0_10_145 l_0_10_145)))
 (let ((?x57311 (* l_0_10_144 l_0_10_144)))
 (let ((?x57309 (* l_0_10_143 l_0_10_143)))
 (let ((?x36610 (+ (+ (* (- l_0_10_100) l_0_10_100) (* l_0_10_142 l_0_10_142)) ?x57309)))
 (= (- (- (- (+ (+ ?x36610 ?x57311) ?x57313) ?x57322) ?x57324) ?x57326) 0.0)))))))))
(assert
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57359 (* ?x55445 l_0_10_149)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57357 (* ?x55442 l_0_10_148)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57355 (* ?x55439 l_0_10_147)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57353 (* ?x55436 l_0_10_146)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x57346 (* ?x55514 l_0_10_99)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x45504 (* ?x55502 l_0_10_98)))
 (let ((?x34372 (* 2.0 l_0_10_101)))
 (let ((?x20813 (* ?x34372 l_0_10_97)))
 (let ((?x57347 (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_104) ?x20813) ?x45504) ?x57346)))
 (= (+ (+ (+ (+ ?x57347 ?x57353) ?x57355) ?x57357) ?x57359) 0.0)))))))))))))))))
(assert
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x20872 (* ?x55445 l_0_10_167)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x20803 (* ?x55442 l_0_10_166)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x45550 (* ?x55439 l_0_10_165)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x45541 (* ?x55436 l_0_10_164)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x34383 (* ?x45531 l_0_10_99)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x45507 (* ?x45505 l_0_10_98)))
 (let ((?x45483 (* 2.0 l_0_10_119)))
 (let ((?x45481 (* ?x45483 l_0_10_97)))
 (let ((?x45543 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_122) ?x45481) ?x45507) ?x34383) ?x45541)))
 (let ((?x20884 (+ (+ (+ ?x45543 ?x45550) ?x20803) ?x20872)))
 (= ?x20884 0.0))))))))))))))))))
(assert
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57494 (* ?x55445 l_0_10_175)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57492 (* ?x55442 l_0_10_174)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57490 (* ?x55439 l_0_10_173)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57488 (* ?x55436 l_0_10_172)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x57486 (* ?x57485 l_0_10_99)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x57483 (* ?x57482 l_0_10_98)))
 (let ((?x57479 (* 2.0 l_0_10_127)))
 (let ((?x57480 (* ?x57479 l_0_10_97)))
 (let ((?x57489 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_130) ?x57480) ?x57483) ?x57486) ?x57488)))
 (let ((?x57495 (+ (+ (+ ?x57489 ?x57490) ?x57492) ?x57494)))
 (= ?x57495 0.0))))))))))))))))))
(assert
 (let ((?x59604 (* l_0_10_150 l_0_10_150)))
 (let ((?x59602 (* l_0_10_149 l_0_10_149)))
 (let ((?x59600 (* l_0_10_148 l_0_10_148)))
 (let ((?x59598 (* l_0_10_147 l_0_10_147)))
 (let ((?x59596 (* l_0_10_146 l_0_10_146)))
 (let ((?x59594 (* l_0_10_105 l_0_10_105)))
 (let ((?x59592 (* l_0_10_104 l_0_10_104)))
 (let ((?x59590 (* l_0_10_103 l_0_10_103)))
 (let ((?x59591 (- (- (* (- l_0_10_101) l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x59590)))
 (let ((?x59605 (+ (+ (+ (+ (+ (- (- ?x59591 ?x59592) ?x59594) ?x59596) ?x59598) ?x59600) ?x59602) ?x59604)))
 (= ?x59605 0.0))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59623 (* ?x55541 l_0_10_161)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59621 (* ?x55538 l_0_10_160)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59619 (* ?x55535 l_0_10_159)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59617 (* ?x55532 l_0_10_158)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x36536 (* ?x55529 l_0_10_157)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x24808 (* ?x55520 l_0_10_116)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x46977 (* ?x55517 l_0_10_115)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x24717 (* ?x55514 l_0_10_114)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x47018 (* ?x55502 l_0_10_113)))
 (let ((?x23543 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_112) ?x47018) ?x24717) ?x46977) ?x24808)))
 (= (+ (+ (+ (+ (+ ?x23543 ?x36536) ?x59617) ?x59619) ?x59621) ?x59623) 0.0)))))))))))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59663 (* ?x55541 l_0_10_168)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59661 (* ?x55538 l_0_10_167)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59659 (* ?x55535 l_0_10_166)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59657 (* ?x55532 l_0_10_165)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59655 (* ?x55529 l_0_10_164)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59653 (* ?x55520 l_0_10_123)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59651 (* ?x55517 l_0_10_122)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59649 (* ?x55514 l_0_10_121)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59647 (* ?x55502 l_0_10_120)))
 (let ((?x59654 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_119) ?x59647) ?x59649) ?x59651) ?x59653)))
 (= (+ (+ (+ (+ (+ ?x59654 ?x59655) ?x59657) ?x59659) ?x59661) ?x59663) 0.0)))))))))))))))))))))
(assert
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59713 (* ?x55541 l_0_10_176)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59711 (* ?x55538 l_0_10_175)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59709 (* ?x55535 l_0_10_174)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59707 (* ?x55532 l_0_10_173)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59705 (* ?x55529 l_0_10_172)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59703 (* ?x55520 l_0_10_131)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59693 (* ?x55517 l_0_10_130)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59690 (* ?x55514 l_0_10_129)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59686 (* ?x55502 l_0_10_128)))
 (let ((?x59704 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_127) ?x59686) ?x59690) ?x59693) ?x59703)))
 (= (+ (+ (+ (+ (+ ?x59704 ?x59705) ?x59707) ?x59709) ?x59711) ?x59713) 0.0)))))))))))))))))))))
(assert
 (let ((?x59778 (* l_0_10_163 l_0_10_163)))
 (let ((?x59776 (* l_0_10_162 l_0_10_162)))
 (let ((?x59774 (* l_0_10_161 l_0_10_161)))
 (let ((?x59772 (* l_0_10_160 l_0_10_160)))
 (let ((?x59770 (* l_0_10_159 l_0_10_159)))
 (let ((?x59768 (* l_0_10_158 l_0_10_158)))
 (let ((?x59766 (* l_0_10_157 l_0_10_157)))
 (let ((?x59764 (* l_0_10_118 l_0_10_118)))
 (let ((?x59762 (* l_0_10_117 l_0_10_117)))
 (let ((?x59760 (* l_0_10_116 l_0_10_116)))
 (let ((?x59758 (* l_0_10_115 l_0_10_115)))
 (let ((?x59756 (* l_0_10_114 l_0_10_114)))
 (let ((?x59757 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59756)))
 (let ((?x59771 (+ (+ (+ (- (- (- (- ?x59757 ?x59758) ?x59760) ?x59762) ?x59764) ?x59766) ?x59768) ?x59770)))
 (= (+ (+ (+ (+ ?x59771 ?x59772) ?x59774) ?x59776) ?x59778) 0.0))))))))))))))))
(assert
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59833 (* ?x59385 l_0_10_170)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59831 (* ?x59382 l_0_10_169)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59829 (* ?x59379 l_0_10_168)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59827 (* ?x59376 l_0_10_167)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59825 (* ?x59373 l_0_10_166)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59823 (* ?x59370 l_0_10_165)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59821 (* ?x59367 l_0_10_164)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59819 (* ?x59362 l_0_10_125)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59817 (* ?x59359 l_0_10_124)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59815 (* ?x59356 l_0_10_123)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59813 (* ?x59353 l_0_10_122)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59811 (* ?x57119 l_0_10_121)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59809 (* ?x57116 l_0_10_120)))
 (let ((?x59816 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_119) ?x59809) ?x59811) ?x59813) ?x59815)))
 (let ((?x59830 (+ (+ (+ (+ (+ (- (- ?x59816 ?x59817) ?x59819) ?x59821) ?x59823) ?x59825) ?x59827) ?x59829)))
 (= (+ (+ ?x59830 ?x59831) ?x59833) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x59906 (* l_0_10_171 l_0_10_171)))
 (let ((?x59904 (* l_0_10_170 l_0_10_170)))
 (let ((?x59902 (* l_0_10_169 l_0_10_169)))
 (let ((?x59900 (* l_0_10_168 l_0_10_168)))
 (let ((?x59898 (* l_0_10_167 l_0_10_167)))
 (let ((?x59896 (* l_0_10_166 l_0_10_166)))
 (let ((?x59894 (* l_0_10_165 l_0_10_165)))
 (let ((?x59892 (* l_0_10_164 l_0_10_164)))
 (let ((?x59890 (* l_0_10_126 l_0_10_126)))
 (let ((?x59888 (* l_0_10_125 l_0_10_125)))
 (let ((?x59886 (* l_0_10_124 l_0_10_124)))
 (let ((?x59884 (* l_0_10_123 l_0_10_123)))
 (let ((?x59882 (* l_0_10_122 l_0_10_122)))
 (let ((?x59880 (* l_0_10_121 l_0_10_121)))
 (let ((?x59881 (- (- (* (- l_0_10_119) l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59880)))
 (let ((?x59895 (+ (+ (- (- (- (- (- ?x59881 ?x59882) ?x59884) ?x59886) ?x59888) ?x59890) ?x59892) ?x59894)))
 (= (+ (+ (+ (+ (+ (+ ?x59895 ?x59896) ?x59898) ?x59900) ?x59902) ?x59904) ?x59906) 0.0))))))))))))))))))
(assert
 (let ((?x59985 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59982 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59979 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59976 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59973 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59970 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59967 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59964 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59961 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59958 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59955 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59952 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59949 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x59946 (* ?x45531 l_0_10_129)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59944 (* ?x45505 l_0_10_128)))
 (let ((?x59953 (- (- (- (- (* (* (- 2.0) l_0_10_119) l_0_10_127) ?x59944) ?x59946) ?x59949) ?x59952)))
 (let ((?x59974 (+ (+ (+ (+ (- (- (- ?x59953 ?x59955) ?x59958) ?x59961) ?x59964) ?x59967) ?x59970) ?x59973)))
 (= (+ (+ (+ (+ ?x59974 ?x59976) ?x59979) ?x59982) ?x59985) 0.0)))))))))))))))))))))
(assert
 (let ((?x60034 (* l_0_10_180 l_0_10_180)))
 (let ((?x60032 (* l_0_10_179 l_0_10_179)))
 (let ((?x60030 (* l_0_10_178 l_0_10_178)))
 (let ((?x60028 (* l_0_10_177 l_0_10_177)))
 (let ((?x60026 (* l_0_10_176 l_0_10_176)))
 (let ((?x60024 (* l_0_10_175 l_0_10_175)))
 (let ((?x60022 (* l_0_10_174 l_0_10_174)))
 (let ((?x60020 (* l_0_10_173 l_0_10_173)))
 (let ((?x60018 (* l_0_10_172 l_0_10_172)))
 (let ((?x60016 (* l_0_10_135 l_0_10_135)))
 (let ((?x47168 (* l_0_10_134 l_0_10_134)))
 (let ((?x24970 (* l_0_10_133 l_0_10_133)))
 (let ((?x47156 (* l_0_10_132 l_0_10_132)))
 (let ((?x47118 (* l_0_10_131 l_0_10_131)))
 (let ((?x47088 (* l_0_10_130 l_0_10_130)))
 (let ((?x47077 (* l_0_10_129 l_0_10_129)))
 (let ((?x47082 (- (- (* (- l_0_10_127) l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47077)))
 (let ((?x60019 (+ (- (- (- (- (- (- ?x47082 ?x47088) ?x47118) ?x47156) ?x24970) ?x47168) ?x60016) ?x60018)))
 (let ((?x60033 (+ (+ (+ (+ (+ (+ (+ ?x60019 ?x60020) ?x60022) ?x60024) ?x60026) ?x60028) ?x60030) ?x60032)))
 (= (+ ?x60033 ?x60034) 0.0)))))))))))))))))))))
(assert
 (let ((?x59286 (* l_0_10_91 l_0_10_91)))
 (let ((?x54790 (* l_0_10_226 l_0_10_226)))
 (let ((?x60128 (- (* (- l_0_10_136) l_0_10_136) (* (* 2.0 l_0_10_181) l_0_10_191))))
 (let ((?x60133 (- (- (- ?x60128 ?x54790) (* (* 2.0 l_0_10_271) l_0_10_281)) (* (* 2.0 l_0_10_316) l_0_10_326))))
 (= (+ ?x60133 ?x59286) 0.0))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x46805 (* ?x57160 l_0_10_92)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57538 (* ?x21111 l_0_10_227)))
 (let ((?x60162 (- (* (* (- 2.0) l_0_10_136) l_0_10_137) (* (* 2.0 l_0_10_182) l_0_10_191))))
 (let ((?x60167 (- (- (- ?x60162 (* (* 2.0 l_0_10_183) l_0_10_192)) ?x57538) (* (* 2.0 l_0_10_272) l_0_10_281))))
 (let ((?x60171 (- (- ?x60167 (* (* 2.0 l_0_10_273) l_0_10_282)) (* (* 2.0 l_0_10_317) l_0_10_326))))
 (= (+ (- ?x60171 (* (* 2.0 l_0_10_318) l_0_10_327)) ?x46805) 0.0)))))))))
(assert
 (let ((?x57160 (* 2.0 l_0_10_91)))
 (let ((?x57161 (* ?x57160 l_0_10_97)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57640 (* ?x21111 l_0_10_232)))
 (let ((?x60220 (- (* (* (- 2.0) l_0_10_136) l_0_10_142) (* (* 2.0 l_0_10_187) l_0_10_191))))
 (let ((?x60224 (- (- ?x60220 (* (* 2.0 l_0_10_188) l_0_10_192)) (* (* 2.0 l_0_10_189) l_0_10_193))))
 (let ((?x60229 (- (- (- ?x60224 (* (* 2.0 l_0_10_190) l_0_10_194)) ?x57640) (* (* 2.0 l_0_10_277) l_0_10_281))))
 (let ((?x60233 (- (- ?x60229 (* (* 2.0 l_0_10_278) l_0_10_282)) (* (* 2.0 l_0_10_279) l_0_10_283))))
 (let ((?x60237 (- (- ?x60233 (* (* 2.0 l_0_10_280) l_0_10_284)) (* (* 2.0 l_0_10_322) l_0_10_326))))
 (let ((?x60241 (- (- ?x60237 (* (* 2.0 l_0_10_323) l_0_10_327)) (* (* 2.0 l_0_10_324) l_0_10_328))))
 (= (+ (- ?x60241 (* (* 2.0 l_0_10_325) l_0_10_329)) ?x57161) 0.0))))))))))))
(assert
 (let ((?x60320 (* l_0_10_330 l_0_10_330)))
 (let ((?x60318 (* l_0_10_329 l_0_10_329)))
 (let ((?x60316 (* l_0_10_328 l_0_10_328)))
 (let ((?x60314 (* l_0_10_327 l_0_10_327)))
 (let ((?x60312 (* l_0_10_326 l_0_10_326)))
 (let ((?x60310 (* l_0_10_285 l_0_10_285)))
 (let ((?x60308 (* l_0_10_284 l_0_10_284)))
 (let ((?x60306 (* l_0_10_283 l_0_10_283)))
 (let ((?x60304 (* l_0_10_282 l_0_10_282)))
 (let ((?x60302 (* l_0_10_281 l_0_10_281)))
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57715 (* ?x21111 l_0_10_236)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59365 (* ?x55013 l_0_10_146)))
 (let ((?x60288 (- (- (* (* 2.0 l_0_10_101) l_0_10_91) ?x59365) (* (* 1.0 l_0_10_191) l_0_10_191))))
 (let ((?x60294 (- (- ?x60288 (* (* 1.0 l_0_10_192) l_0_10_192)) (* (* 1.0 l_0_10_193) l_0_10_193))))
 (let ((?x60300 (- (- ?x60294 (* (* 1.0 l_0_10_194) l_0_10_194)) (* (* 1.0 l_0_10_195) l_0_10_195))))
 (let ((?x60313 (- (- (- (- (- (- (- ?x60300 ?x57715) ?x60302) ?x60304) ?x60306) ?x60308) ?x60310) ?x60312)))
 (= (- (- (- (- ?x60313 ?x60314) ?x60316) ?x60318) ?x60320) 0.0))))))))))))))))))))
(assert
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57774 (* ?x21111 l_0_10_241)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x55014 (* ?x55013 l_0_10_151)))
 (let ((?x55010 (* 2.0 l_0_10_106)))
 (let ((?x55011 (* ?x55010 l_0_10_91)))
 (let ((?x60363 (- (- (- ?x55011 ?x55014) (* (* 2.0 l_0_10_191) l_0_10_196)) (* (* 2.0 l_0_10_192) l_0_10_197))))
 (let ((?x60369 (- (- ?x60363 (* (* 2.0 l_0_10_193) l_0_10_198)) (* (* 2.0 l_0_10_194) l_0_10_199))))
 (let ((?x60376 (- (- (- ?x60369 (* (* 2.0 l_0_10_195) l_0_10_200)) ?x57774) (* (* 2.0 l_0_10_281) l_0_10_286))))
 (let ((?x60382 (- (- ?x60376 (* (* 2.0 l_0_10_282) l_0_10_287)) (* (* 2.0 l_0_10_283) l_0_10_288))))
 (let ((?x60388 (- (- ?x60382 (* (* 2.0 l_0_10_284) l_0_10_289)) (* (* 2.0 l_0_10_285) l_0_10_290))))
 (let ((?x60394 (- (- ?x60388 (* (* 2.0 l_0_10_326) l_0_10_331)) (* (* 2.0 l_0_10_327) l_0_10_332))))
 (let ((?x60400 (- (- ?x60394 (* (* 2.0 l_0_10_328) l_0_10_333)) (* (* 2.0 l_0_10_329) l_0_10_334))))
 (= (- ?x60400 (* (* 2.0 l_0_10_330) l_0_10_335)) 0.0)))))))))))))))
(assert
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57847 (* ?x21111 l_0_10_247)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59427 (* ?x55013 l_0_10_157)))
 (let ((?x7562 (- (- (* (* 2.0 l_0_10_112) l_0_10_91) ?x59427) (* (* 2.0 l_0_10_191) l_0_10_202))))
 (let ((?x7394 (- (- ?x7562 (* (* 2.0 l_0_10_192) l_0_10_203)) (* (* 2.0 l_0_10_193) l_0_10_204))))
 (let ((?x25208 (- (- ?x7394 (* (* 2.0 l_0_10_194) l_0_10_205)) (* (* 2.0 l_0_10_195) l_0_10_206))))
 (let ((?x36772 (- (- (- ?x25208 ?x57847) (* (* 2.0 l_0_10_281) l_0_10_292)) (* (* 2.0 l_0_10_282) l_0_10_293))))
 (let ((?x47400 (- (- ?x36772 (* (* 2.0 l_0_10_283) l_0_10_294)) (* (* 2.0 l_0_10_284) l_0_10_295))))
 (let ((?x47365 (- (- ?x47400 (* (* 2.0 l_0_10_285) l_0_10_296)) (* (* 2.0 l_0_10_326) l_0_10_337))))
 (let ((?x36844 (- (- ?x47365 (* (* 2.0 l_0_10_327) l_0_10_338)) (* (* 2.0 l_0_10_328) l_0_10_339))))
 (let ((?x60454 (- (- ?x36844 (* (* 2.0 l_0_10_329) l_0_10_340)) (* (* 2.0 l_0_10_330) l_0_10_341))))
 (= ?x60454 0.0))))))))))))))
(assert
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57911 (* ?x21111 l_0_10_254)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59434 (* ?x55013 l_0_10_164)))
 (let ((?x47568 (- (- (* (* 2.0 l_0_10_119) l_0_10_91) ?x59434) (* (* 2.0 l_0_10_191) l_0_10_209))))
 (let ((?x25328 (- (- ?x47568 (* (* 2.0 l_0_10_192) l_0_10_210)) (* (* 2.0 l_0_10_193) l_0_10_211))))
 (let ((?x25335 (- (- ?x25328 (* (* 2.0 l_0_10_194) l_0_10_212)) (* (* 2.0 l_0_10_195) l_0_10_213))))
 (let ((?x47591 (- (- (- ?x25335 ?x57911) (* (* 2.0 l_0_10_281) l_0_10_299)) (* (* 2.0 l_0_10_282) l_0_10_300))))
 (let ((?x47531 (- (- ?x47591 (* (* 2.0 l_0_10_283) l_0_10_301)) (* (* 2.0 l_0_10_284) l_0_10_302))))
 (let ((?x36863 (- (- ?x47531 (* (* 2.0 l_0_10_285) l_0_10_303)) (* (* 2.0 l_0_10_326) l_0_10_344))))
 (let ((?x60465 (- (- ?x36863 (* (* 2.0 l_0_10_327) l_0_10_345)) (* (* 2.0 l_0_10_328) l_0_10_346))))
 (let ((?x60469 (- (- ?x60465 (* (* 2.0 l_0_10_329) l_0_10_347)) (* (* 2.0 l_0_10_330) l_0_10_348))))
 (= ?x60469 0.0))))))))))))))
(assert
 (let ((?x21111 (* 2.0 l_0_10_226)))
 (let ((?x57983 (* ?x21111 l_0_10_262)))
 (let ((?x55013 (* 2.0 l_0_10_136)))
 (let ((?x59445 (* ?x55013 l_0_10_172)))
 (let ((?x60531 (- (- (* (* 2.0 l_0_10_127) l_0_10_91) ?x59445) (* (* 2.0 l_0_10_191) l_0_10_217))))
 (let ((?x60535 (- (- ?x60531 (* (* 2.0 l_0_10_192) l_0_10_218)) (* (* 2.0 l_0_10_193) l_0_10_219))))
 (let ((?x60539 (- (- ?x60535 (* (* 2.0 l_0_10_194) l_0_10_220)) (* (* 2.0 l_0_10_195) l_0_10_221))))
 (let ((?x60544 (- (- (- ?x60539 ?x57983) (* (* 2.0 l_0_10_281) l_0_10_307)) (* (* 2.0 l_0_10_282) l_0_10_308))))
 (let ((?x60548 (- (- ?x60544 (* (* 2.0 l_0_10_283) l_0_10_309)) (* (* 2.0 l_0_10_284) l_0_10_310))))
 (let ((?x60552 (- (- ?x60548 (* (* 2.0 l_0_10_285) l_0_10_311)) (* (* 2.0 l_0_10_326) l_0_10_352))))
 (let ((?x60556 (- (- ?x60552 (* (* 2.0 l_0_10_327) l_0_10_353)) (* (* 2.0 l_0_10_328) l_0_10_354))))
 (let ((?x60560 (- (- ?x60556 (* (* 2.0 l_0_10_329) l_0_10_355)) (* (* 2.0 l_0_10_330) l_0_10_356))))
 (= ?x60560 0.0))))))))))))))
(assert
 (let ((?x59463 (* l_0_10_93 l_0_10_93)))
 (let ((?x59461 (* l_0_10_92 l_0_10_92)))
 (let ((?x58038 (* l_0_10_228 l_0_10_228)))
 (let ((?x58036 (* l_0_10_227 l_0_10_227)))
 (let ((?x60613 (- (- (* (- l_0_10_137) l_0_10_137) (* l_0_10_138 l_0_10_138)) ?x58036)))
 (= (+ (+ (- ?x60613 ?x58038) ?x59461) ?x59463) 0.0)))))))
(assert
 (let ((?x45358 (* 2.0 l_0_10_93)))
 (let ((?x45361 (* ?x45358 l_0_10_98)))
 (let ((?x45405 (* 2.0 l_0_10_92)))
 (let ((?x45417 (* ?x45405 l_0_10_97)))
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58070 (* ?x58053 l_0_10_233)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58068 (* ?x58050 l_0_10_232)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x45378 (* ?x55321 l_0_10_143)))
 (let ((?x47733 (+ (- (- (- (* (* (- 2.0) l_0_10_137) l_0_10_142) ?x45378) ?x58068) ?x58070) ?x45417)))
 (= (+ ?x47733 ?x45361) 0.0)))))))))))))
(assert
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58089 (* ?x58053 l_0_10_237)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58086 (* ?x58050 l_0_10_236)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x36253 (* ?x55321 l_0_10_147)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x36247 (* ?x55318 l_0_10_146)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x24199 (* ?x55502 l_0_10_93)))
 (let ((?x47822 (- (- (- (+ (* (* 2.0 l_0_10_101) l_0_10_92) ?x24199) ?x36247) ?x36253) ?x58086)))
 (= (- ?x47822 ?x58089) 0.0)))))))))))))
(assert
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58130 (* ?x58053 l_0_10_242)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58122 (* ?x58050 l_0_10_241)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x55322 (* ?x55321 l_0_10_152)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x55319 (* ?x55318 l_0_10_151)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55312 (* ?x55168 l_0_10_93)))
 (let ((?x47998 (- (- (- (+ (* (* 2.0 l_0_10_106) l_0_10_92) ?x55312) ?x55319) ?x55322) ?x58122)))
 (= (- ?x47998 ?x58130) 0.0)))))))))))))
(assert
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58147 (* ?x58053 l_0_10_248)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58145 (* ?x58050 l_0_10_247)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59479 (* ?x55321 l_0_10_158)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x59477 (* ?x55318 l_0_10_157)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59475 (* ?x57116 l_0_10_93)))
 (let ((?x48014 (- (- (- (+ (* (* 2.0 l_0_10_112) l_0_10_92) ?x59475) ?x59477) ?x59479) ?x58145)))
 (= (- ?x48014 ?x58147) 0.0)))))))))))))
(assert
 (let ((?x58053 (* 2.0 l_0_10_228)))
 (let ((?x58185 (* ?x58053 l_0_10_263)))
 (let ((?x58050 (* 2.0 l_0_10_227)))
 (let ((?x58183 (* ?x58050 l_0_10_262)))
 (let ((?x55321 (* 2.0 l_0_10_138)))
 (let ((?x59524 (* ?x55321 l_0_10_173)))
 (let ((?x55318 (* 2.0 l_0_10_137)))
 (let ((?x46999 (* ?x55318 l_0_10_172)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x46998 (* ?x57482 l_0_10_93)))
 (let ((?x25442 (- (- (- (+ (* (* 2.0 l_0_10_127) l_0_10_92) ?x46998) ?x46999) ?x59524) ?x58183)))
 (= (- ?x25442 ?x58185) 0.0)))))))))))))
(assert
 (let ((?x57326 (* l_0_10_99 l_0_10_99)))
 (let ((?x57324 (* l_0_10_98 l_0_10_98)))
 (let ((?x57322 (* l_0_10_97 l_0_10_97)))
 (let ((?x58433 (* l_0_10_235 l_0_10_235)))
 (let ((?x58431 (* l_0_10_234 l_0_10_234)))
 (let ((?x58429 (* l_0_10_233 l_0_10_233)))
 (let ((?x34814 (* l_0_10_232 l_0_10_232)))
 (let ((?x57313 (* l_0_10_145 l_0_10_145)))
 (let ((?x57311 (* l_0_10_144 l_0_10_144)))
 (let ((?x57309 (* l_0_10_143 l_0_10_143)))
 (let ((?x48002 (- (- (* l_0_10_100 l_0_10_100) (* l_0_10_142 l_0_10_142)) ?x57309)))
 (let ((?x48011 (+ (- (- (- (- (- (- ?x48002 ?x57311) ?x57313) ?x34814) ?x58429) ?x58431) ?x58433) ?x57322)))
 (= (+ (+ ?x48011 ?x57324) ?x57326) 0.0))))))))))))))
(assert
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58470 (* ?x57087 l_0_10_239)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58468 (* ?x57084 l_0_10_238)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58466 (* ?x57081 l_0_10_237)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58464 (* ?x57078 l_0_10_236)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57359 (* ?x55445 l_0_10_149)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57357 (* ?x55442 l_0_10_148)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57355 (* ?x55439 l_0_10_147)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57353 (* ?x55436 l_0_10_146)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x57346 (* ?x55514 l_0_10_99)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x45504 (* ?x55502 l_0_10_98)))
 (let ((?x34372 (* 2.0 l_0_10_101)))
 (let ((?x20813 (* ?x34372 l_0_10_97)))
 (let ((?x17426 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_104) ?x20813) ?x45504) ?x57346) ?x57353)))
 (let ((?x8048 (- (- (- (- (- (- (- ?x17426 ?x57355) ?x57357) ?x57359) ?x58464) ?x58466) ?x58468) ?x58470)))
 (= ?x8048 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58507 (* ?x57087 l_0_10_244)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58505 (* ?x57084 l_0_10_243)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58503 (* ?x57081 l_0_10_242)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58501 (* ?x57078 l_0_10_241)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x55446 (* ?x55445 l_0_10_154)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x55443 (* ?x55442 l_0_10_153)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x55440 (* ?x55439 l_0_10_152)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x55437 (* ?x55436 l_0_10_151)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55434 (* ?x55171 l_0_10_99)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55432 (* ?x55168 l_0_10_98)))
 (let ((?x55010 (* 2.0 l_0_10_106)))
 (let ((?x55422 (* ?x55010 l_0_10_97)))
 (let ((?x25687 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_109) ?x55422) ?x55432) ?x55434) ?x55437)))
 (let ((?x48242 (- (- (- (- (- (- (- ?x25687 ?x55440) ?x55443) ?x55446) ?x58501) ?x58503) ?x58505) ?x58507)))
 (= ?x48242 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58539 (* ?x57087 l_0_10_257)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x58537 (* ?x57084 l_0_10_256)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x58535 (* ?x57081 l_0_10_255)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x58533 (* ?x57078 l_0_10_254)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x20872 (* ?x55445 l_0_10_167)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x20803 (* ?x55442 l_0_10_166)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x45550 (* ?x55439 l_0_10_165)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x45541 (* ?x55436 l_0_10_164)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x34383 (* ?x45531 l_0_10_99)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x45507 (* ?x45505 l_0_10_98)))
 (let ((?x45483 (* 2.0 l_0_10_119)))
 (let ((?x45481 (* ?x45483 l_0_10_97)))
 (let ((?x48285 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_122) ?x45481) ?x45507) ?x34383) ?x45541)))
 (let ((?x25712 (- (- (- (- (- (- (- ?x48285 ?x45550) ?x20803) ?x20872) ?x58533) ?x58535) ?x58537) ?x58539)))
 (= ?x25712 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57087 (* 2.0 l_0_10_235)))
 (let ((?x58561 (* ?x57087 l_0_10_265)))
 (let ((?x57084 (* 2.0 l_0_10_234)))
 (let ((?x34873 (* ?x57084 l_0_10_264)))
 (let ((?x57081 (* 2.0 l_0_10_233)))
 (let ((?x34874 (* ?x57081 l_0_10_263)))
 (let ((?x57078 (* 2.0 l_0_10_232)))
 (let ((?x22301 (* ?x57078 l_0_10_262)))
 (let ((?x55445 (* 2.0 l_0_10_145)))
 (let ((?x57494 (* ?x55445 l_0_10_175)))
 (let ((?x55442 (* 2.0 l_0_10_144)))
 (let ((?x57492 (* ?x55442 l_0_10_174)))
 (let ((?x55439 (* 2.0 l_0_10_143)))
 (let ((?x57490 (* ?x55439 l_0_10_173)))
 (let ((?x55436 (* 2.0 l_0_10_142)))
 (let ((?x57488 (* ?x55436 l_0_10_172)))
 (let ((?x57485 (* 2.0 l_0_10_129)))
 (let ((?x57486 (* ?x57485 l_0_10_99)))
 (let ((?x57482 (* 2.0 l_0_10_128)))
 (let ((?x57483 (* ?x57482 l_0_10_98)))
 (let ((?x57479 (* 2.0 l_0_10_127)))
 (let ((?x57480 (* ?x57479 l_0_10_97)))
 (let ((?x48449 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_130) ?x57480) ?x57483) ?x57486) ?x57488)))
 (let ((?x25661 (- (- (- (- (- (- (- ?x48449 ?x57490) ?x57492) ?x57494) ?x22301) ?x34874) ?x34873) ?x58561)))
 (= ?x25661 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58619 (* l_0_10_240 l_0_10_240)))
 (let ((?x58617 (* l_0_10_239 l_0_10_239)))
 (let ((?x58615 (* l_0_10_238 l_0_10_238)))
 (let ((?x58613 (* l_0_10_237 l_0_10_237)))
 (let ((?x58611 (* l_0_10_236 l_0_10_236)))
 (let ((?x59604 (* l_0_10_150 l_0_10_150)))
 (let ((?x59602 (* l_0_10_149 l_0_10_149)))
 (let ((?x59600 (* l_0_10_148 l_0_10_148)))
 (let ((?x59598 (* l_0_10_147 l_0_10_147)))
 (let ((?x59596 (* l_0_10_146 l_0_10_146)))
 (let ((?x59594 (* l_0_10_105 l_0_10_105)))
 (let ((?x59592 (* l_0_10_104 l_0_10_104)))
 (let ((?x59590 (* l_0_10_103 l_0_10_103)))
 (let ((?x48543 (+ (+ (* l_0_10_101 l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x59590)))
 (let ((?x25848 (- (- (- (- (- (+ (+ ?x48543 ?x59592) ?x59594) ?x59596) ?x59598) ?x59600) ?x59602) ?x59604)))
 (= (- (- (- (- (- ?x25848 ?x58611) ?x58613) ?x58615) ?x58617) ?x58619) 0.0)))))))))))))))))
(assert
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58681 (* ?x58680 l_0_10_245)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58678 (* ?x58677 l_0_10_244)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58675 (* ?x58674 l_0_10_243)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58672 (* ?x58671 l_0_10_242)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58669 (* ?x58668 l_0_10_241)))
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x55542 (* ?x55541 l_0_10_155)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x55539 (* ?x55538 l_0_10_154)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x55536 (* ?x55535 l_0_10_153)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x55533 (* ?x55532 l_0_10_152)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x55530 (* ?x55529 l_0_10_151)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x55521 (* ?x55520 l_0_10_110)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x55518 (* ?x55517 l_0_10_109)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x55515 (* ?x55514 l_0_10_108)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x55512 (* ?x55502 l_0_10_107)))
 (let ((?x60637 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_106) ?x55512) ?x55515) ?x55518) ?x55521)))
 (let ((?x60644 (- (- (- (- (- (- (- ?x60637 ?x55530) ?x55533) ?x55536) ?x55539) ?x55542) ?x58669) ?x58672)))
 (= (- (- (- ?x60644 ?x58675) ?x58678) ?x58681) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58697 (* ?x58680 l_0_10_251)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58695 (* ?x58677 l_0_10_250)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58693 (* ?x58674 l_0_10_249)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58691 (* ?x58671 l_0_10_248)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58689 (* ?x58668 l_0_10_247)))
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59623 (* ?x55541 l_0_10_161)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59621 (* ?x55538 l_0_10_160)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59619 (* ?x55535 l_0_10_159)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59617 (* ?x55532 l_0_10_158)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x36536 (* ?x55529 l_0_10_157)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x24808 (* ?x55520 l_0_10_116)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x46977 (* ?x55517 l_0_10_115)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x24717 (* ?x55514 l_0_10_114)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x47018 (* ?x55502 l_0_10_113)))
 (let ((?x60675 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_112) ?x47018) ?x24717) ?x46977) ?x24808)))
 (let ((?x60682 (- (- (- (- (- (- (- ?x60675 ?x36536) ?x59617) ?x59619) ?x59621) ?x59623) ?x58689) ?x58691)))
 (= (- (- (- ?x60682 ?x58693) ?x58695) ?x58697) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58747 (* ?x58680 l_0_10_258)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58745 (* ?x58677 l_0_10_257)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58743 (* ?x58674 l_0_10_256)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58741 (* ?x58671 l_0_10_255)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58739 (* ?x58668 l_0_10_254)))
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59663 (* ?x55541 l_0_10_168)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59661 (* ?x55538 l_0_10_167)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59659 (* ?x55535 l_0_10_166)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59657 (* ?x55532 l_0_10_165)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59655 (* ?x55529 l_0_10_164)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59653 (* ?x55520 l_0_10_123)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59651 (* ?x55517 l_0_10_122)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59649 (* ?x55514 l_0_10_121)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59647 (* ?x55502 l_0_10_120)))
 (let ((?x60727 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_119) ?x59647) ?x59649) ?x59651) ?x59653)))
 (let ((?x60734 (- (- (- (- (- (- (- ?x60727 ?x59655) ?x59657) ?x59659) ?x59661) ?x59663) ?x58739) ?x58741)))
 (= (- (- (- ?x60734 ?x58743) ?x58745) ?x58747) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58680 (* 2.0 l_0_10_240)))
 (let ((?x58791 (* ?x58680 l_0_10_266)))
 (let ((?x58677 (* 2.0 l_0_10_239)))
 (let ((?x58789 (* ?x58677 l_0_10_265)))
 (let ((?x58674 (* 2.0 l_0_10_238)))
 (let ((?x58787 (* ?x58674 l_0_10_264)))
 (let ((?x58671 (* 2.0 l_0_10_237)))
 (let ((?x58785 (* ?x58671 l_0_10_263)))
 (let ((?x58668 (* 2.0 l_0_10_236)))
 (let ((?x58783 (* ?x58668 l_0_10_262)))
 (let ((?x55541 (* 2.0 l_0_10_150)))
 (let ((?x59713 (* ?x55541 l_0_10_176)))
 (let ((?x55538 (* 2.0 l_0_10_149)))
 (let ((?x59711 (* ?x55538 l_0_10_175)))
 (let ((?x55535 (* 2.0 l_0_10_148)))
 (let ((?x59709 (* ?x55535 l_0_10_174)))
 (let ((?x55532 (* 2.0 l_0_10_147)))
 (let ((?x59707 (* ?x55532 l_0_10_173)))
 (let ((?x55529 (* 2.0 l_0_10_146)))
 (let ((?x59705 (* ?x55529 l_0_10_172)))
 (let ((?x55520 (* 2.0 l_0_10_105)))
 (let ((?x59703 (* ?x55520 l_0_10_131)))
 (let ((?x55517 (* 2.0 l_0_10_104)))
 (let ((?x59693 (* ?x55517 l_0_10_130)))
 (let ((?x55514 (* 2.0 l_0_10_103)))
 (let ((?x59690 (* ?x55514 l_0_10_129)))
 (let ((?x55502 (* 2.0 l_0_10_102)))
 (let ((?x59686 (* ?x55502 l_0_10_128)))
 (let ((?x60764 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_127) ?x59686) ?x59690) ?x59693) ?x59703)))
 (let ((?x60771 (- (- (- (- (- (- (- ?x60764 ?x59705) ?x59707) ?x59709) ?x59711) ?x59713) ?x58783) ?x58785)))
 (= (- (- (- ?x60771 ?x58787) ?x58789) ?x58791) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58853 (* l_0_10_246 l_0_10_246)))
 (let ((?x58851 (* l_0_10_245 l_0_10_245)))
 (let ((?x58849 (* l_0_10_244 l_0_10_244)))
 (let ((?x58847 (* l_0_10_243 l_0_10_243)))
 (let ((?x58845 (* l_0_10_242 l_0_10_242)))
 (let ((?x58843 (* l_0_10_241 l_0_10_241)))
 (let ((?x55626 (* l_0_10_156 l_0_10_156)))
 (let ((?x55624 (* l_0_10_155 l_0_10_155)))
 (let ((?x55622 (* l_0_10_154 l_0_10_154)))
 (let ((?x55620 (* l_0_10_153 l_0_10_153)))
 (let ((?x55618 (* l_0_10_152 l_0_10_152)))
 (let ((?x55616 (* l_0_10_151 l_0_10_151)))
 (let ((?x55614 (* l_0_10_111 l_0_10_111)))
 (let ((?x55612 (* l_0_10_110 l_0_10_110)))
 (let ((?x55600 (* l_0_10_109 l_0_10_109)))
 (let ((?x55596 (* l_0_10_108 l_0_10_108)))
 (let ((?x60805 (+ (+ (* l_0_10_106 l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x55596)))
 (let ((?x60812 (- (- (- (- (+ (+ (+ ?x60805 ?x55600) ?x55612) ?x55614) ?x55616) ?x55618) ?x55620) ?x55622)))
 (let ((?x60819 (- (- (- (- (- (- (- ?x60812 ?x55624) ?x55626) ?x58843) ?x58845) ?x58847) ?x58849) ?x58851)))
 (= (- ?x60819 ?x58853) 0.0)))))))))))))))))))))
(assert
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x58884 (* ?x55066 l_0_10_252)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x58882 (* ?x55063 l_0_10_251)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x58880 (* ?x55060 l_0_10_250)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x58878 (* ?x55057 l_0_10_249)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x58876 (* ?x55054 l_0_10_248)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x58874 (* ?x55051 l_0_10_247)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55699 (* ?x55198 l_0_10_162)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55697 (* ?x55195 l_0_10_161)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55695 (* ?x55192 l_0_10_160)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55693 (* ?x55189 l_0_10_159)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55691 (* ?x55186 l_0_10_158)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55689 (* ?x55183 l_0_10_157)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55687 (* ?x55180 l_0_10_117)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55685 (* ?x55177 l_0_10_116)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55683 (* ?x55174 l_0_10_115)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55681 (* ?x55171 l_0_10_114)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55669 (* ?x55168 l_0_10_113)))
 (let ((?x60849 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_112) ?x55669) ?x55681) ?x55683) ?x55685)))
 (let ((?x60856 (- (- (- (- (- (- (+ ?x60849 ?x55687) ?x55689) ?x55691) ?x55693) ?x55695) ?x55697) ?x55699)))
 (= (- (- (- (- (- (- ?x60856 ?x58874) ?x58876) ?x58878) ?x58880) ?x58882) ?x58884) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55066 (* 2.0 l_0_10_246)))
 (let ((?x46431 (* ?x55066 l_0_10_267)))
 (let ((?x55063 (* 2.0 l_0_10_245)))
 (let ((?x46390 (* ?x55063 l_0_10_266)))
 (let ((?x55060 (* 2.0 l_0_10_244)))
 (let ((?x46432 (* ?x55060 l_0_10_265)))
 (let ((?x55057 (* 2.0 l_0_10_243)))
 (let ((?x46426 (* ?x55057 l_0_10_264)))
 (let ((?x55054 (* 2.0 l_0_10_242)))
 (let ((?x46420 (* ?x55054 l_0_10_263)))
 (let ((?x55051 (* 2.0 l_0_10_241)))
 (let ((?x46414 (* ?x55051 l_0_10_262)))
 (let ((?x55198 (* 2.0 l_0_10_156)))
 (let ((?x55842 (* ?x55198 l_0_10_177)))
 (let ((?x55195 (* 2.0 l_0_10_155)))
 (let ((?x55840 (* ?x55195 l_0_10_176)))
 (let ((?x55192 (* 2.0 l_0_10_154)))
 (let ((?x55838 (* ?x55192 l_0_10_175)))
 (let ((?x55189 (* 2.0 l_0_10_153)))
 (let ((?x55836 (* ?x55189 l_0_10_174)))
 (let ((?x55186 (* 2.0 l_0_10_152)))
 (let ((?x55834 (* ?x55186 l_0_10_173)))
 (let ((?x55183 (* 2.0 l_0_10_151)))
 (let ((?x55832 (* ?x55183 l_0_10_172)))
 (let ((?x55180 (* 2.0 l_0_10_111)))
 (let ((?x55830 (* ?x55180 l_0_10_132)))
 (let ((?x55177 (* 2.0 l_0_10_110)))
 (let ((?x55828 (* ?x55177 l_0_10_131)))
 (let ((?x55174 (* 2.0 l_0_10_109)))
 (let ((?x55826 (* ?x55174 l_0_10_130)))
 (let ((?x55171 (* 2.0 l_0_10_108)))
 (let ((?x55824 (* ?x55171 l_0_10_129)))
 (let ((?x55168 (* 2.0 l_0_10_107)))
 (let ((?x55822 (* ?x55168 l_0_10_128)))
 (let ((?x60881 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_127) ?x55822) ?x55824) ?x55826) ?x55828)))
 (let ((?x60888 (- (- (- (- (- (- (+ ?x60881 ?x55830) ?x55832) ?x55834) ?x55836) ?x55838) ?x55840) ?x55842)))
 (= (- (- (- (- (- (- ?x60888 ?x46414) ?x46420) ?x46426) ?x46432) ?x46390) ?x46431) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58945 (* l_0_10_253 l_0_10_253)))
 (let ((?x58943 (* l_0_10_252 l_0_10_252)))
 (let ((?x58941 (* l_0_10_251 l_0_10_251)))
 (let ((?x58939 (* l_0_10_250 l_0_10_250)))
 (let ((?x58936 (* l_0_10_249 l_0_10_249)))
 (let ((?x58934 (* l_0_10_248 l_0_10_248)))
 (let ((?x58932 (* l_0_10_247 l_0_10_247)))
 (let ((?x59778 (* l_0_10_163 l_0_10_163)))
 (let ((?x59776 (* l_0_10_162 l_0_10_162)))
 (let ((?x59774 (* l_0_10_161 l_0_10_161)))
 (let ((?x59772 (* l_0_10_160 l_0_10_160)))
 (let ((?x59770 (* l_0_10_159 l_0_10_159)))
 (let ((?x59768 (* l_0_10_158 l_0_10_158)))
 (let ((?x59766 (* l_0_10_157 l_0_10_157)))
 (let ((?x59764 (* l_0_10_118 l_0_10_118)))
 (let ((?x59762 (* l_0_10_117 l_0_10_117)))
 (let ((?x59760 (* l_0_10_116 l_0_10_116)))
 (let ((?x59758 (* l_0_10_115 l_0_10_115)))
 (let ((?x59756 (* l_0_10_114 l_0_10_114)))
 (let ((?x50175 (+ (+ (* l_0_10_112 l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59756)))
 (let ((?x60901 (- (- (- (+ (+ (+ (+ ?x50175 ?x59758) ?x59760) ?x59762) ?x59764) ?x59766) ?x59768) ?x59770)))
 (let ((?x60908 (- (- (- (- (- (- (- ?x60901 ?x59772) ?x59774) ?x59776) ?x59778) ?x58932) ?x58934) ?x58936)))
 (= (- (- (- (- ?x60908 ?x58939) ?x58941) ?x58943) ?x58945) 0.0))))))))))))))))))))))))
(assert
 (let ((?x58990 (* 2.0 l_0_10_253)))
 (let ((?x58991 (* ?x58990 l_0_10_260)))
 (let ((?x58987 (* 2.0 l_0_10_252)))
 (let ((?x58988 (* ?x58987 l_0_10_259)))
 (let ((?x58984 (* 2.0 l_0_10_251)))
 (let ((?x58985 (* ?x58984 l_0_10_258)))
 (let ((?x58981 (* 2.0 l_0_10_250)))
 (let ((?x58982 (* ?x58981 l_0_10_257)))
 (let ((?x58977 (* 2.0 l_0_10_249)))
 (let ((?x58978 (* ?x58977 l_0_10_256)))
 (let ((?x58974 (* 2.0 l_0_10_248)))
 (let ((?x58975 (* ?x58974 l_0_10_255)))
 (let ((?x58971 (* 2.0 l_0_10_247)))
 (let ((?x58972 (* ?x58971 l_0_10_254)))
 (let ((?x59385 (* 2.0 l_0_10_163)))
 (let ((?x59833 (* ?x59385 l_0_10_170)))
 (let ((?x59382 (* 2.0 l_0_10_162)))
 (let ((?x59831 (* ?x59382 l_0_10_169)))
 (let ((?x59379 (* 2.0 l_0_10_161)))
 (let ((?x59829 (* ?x59379 l_0_10_168)))
 (let ((?x59376 (* 2.0 l_0_10_160)))
 (let ((?x59827 (* ?x59376 l_0_10_167)))
 (let ((?x59373 (* 2.0 l_0_10_159)))
 (let ((?x59825 (* ?x59373 l_0_10_166)))
 (let ((?x59370 (* 2.0 l_0_10_158)))
 (let ((?x59823 (* ?x59370 l_0_10_165)))
 (let ((?x59367 (* 2.0 l_0_10_157)))
 (let ((?x59821 (* ?x59367 l_0_10_164)))
 (let ((?x59362 (* 2.0 l_0_10_118)))
 (let ((?x59819 (* ?x59362 l_0_10_125)))
 (let ((?x59359 (* 2.0 l_0_10_117)))
 (let ((?x59817 (* ?x59359 l_0_10_124)))
 (let ((?x59356 (* 2.0 l_0_10_116)))
 (let ((?x59815 (* ?x59356 l_0_10_123)))
 (let ((?x59353 (* 2.0 l_0_10_115)))
 (let ((?x59813 (* ?x59353 l_0_10_122)))
 (let ((?x57119 (* 2.0 l_0_10_114)))
 (let ((?x59811 (* ?x57119 l_0_10_121)))
 (let ((?x57116 (* 2.0 l_0_10_113)))
 (let ((?x59809 (* ?x57116 l_0_10_120)))
 (let ((?x60934 (+ (+ (+ (+ (* (* 2.0 l_0_10_112) l_0_10_119) ?x59809) ?x59811) ?x59813) ?x59815)))
 (let ((?x60941 (- (- (- (- (- (+ (+ ?x60934 ?x59817) ?x59819) ?x59821) ?x59823) ?x59825) ?x59827) ?x59829)))
 (let ((?x60948 (- (- (- (- (- (- (- ?x60941 ?x59831) ?x59833) ?x58972) ?x58975) ?x58978) ?x58982) ?x58985)))
 (= (- (- ?x60948 ?x58988) ?x58991) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59074 (* l_0_10_261 l_0_10_261)))
 (let ((?x59072 (* l_0_10_260 l_0_10_260)))
 (let ((?x59070 (* l_0_10_259 l_0_10_259)))
 (let ((?x59068 (* l_0_10_258 l_0_10_258)))
 (let ((?x59066 (* l_0_10_257 l_0_10_257)))
 (let ((?x59064 (* l_0_10_256 l_0_10_256)))
 (let ((?x59062 (* l_0_10_255 l_0_10_255)))
 (let ((?x59061 (* l_0_10_254 l_0_10_254)))
 (let ((?x59906 (* l_0_10_171 l_0_10_171)))
 (let ((?x59904 (* l_0_10_170 l_0_10_170)))
 (let ((?x59902 (* l_0_10_169 l_0_10_169)))
 (let ((?x59900 (* l_0_10_168 l_0_10_168)))
 (let ((?x59898 (* l_0_10_167 l_0_10_167)))
 (let ((?x59896 (* l_0_10_166 l_0_10_166)))
 (let ((?x59894 (* l_0_10_165 l_0_10_165)))
 (let ((?x59892 (* l_0_10_164 l_0_10_164)))
 (let ((?x59890 (* l_0_10_126 l_0_10_126)))
 (let ((?x59888 (* l_0_10_125 l_0_10_125)))
 (let ((?x59886 (* l_0_10_124 l_0_10_124)))
 (let ((?x59884 (* l_0_10_123 l_0_10_123)))
 (let ((?x59882 (* l_0_10_122 l_0_10_122)))
 (let ((?x59880 (* l_0_10_121 l_0_10_121)))
 (let ((?x49248 (+ (+ (* l_0_10_119 l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59880)))
 (let ((?x38026 (- (- (+ (+ (+ (+ (+ ?x49248 ?x59882) ?x59884) ?x59886) ?x59888) ?x59890) ?x59892) ?x59894)))
 (let ((?x37980 (- (- (- (- (- (- (- ?x38026 ?x59896) ?x59898) ?x59900) ?x59902) ?x59904) ?x59906) ?x59061)))
 (let ((?x37982 (- (- (- (- (- (- (- ?x37980 ?x59062) ?x59064) ?x59066) ?x59068) ?x59070) ?x59072) ?x59074)))
 (= ?x37982 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x59123 (* (* 2.0 l_0_10_261) l_0_10_269)))
 (let ((?x59120 (* (* 2.0 l_0_10_260) l_0_10_268)))
 (let ((?x59117 (* (* 2.0 l_0_10_259) l_0_10_267)))
 (let ((?x59114 (* (* 2.0 l_0_10_258) l_0_10_266)))
 (let ((?x59111 (* (* 2.0 l_0_10_257) l_0_10_265)))
 (let ((?x59108 (* (* 2.0 l_0_10_256) l_0_10_264)))
 (let ((?x59105 (* (* 2.0 l_0_10_255) l_0_10_263)))
 (let ((?x46681 (* (* 2.0 l_0_10_254) l_0_10_262)))
 (let ((?x59985 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59982 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59979 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59976 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59973 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59970 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59967 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59964 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59961 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59958 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59955 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59952 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59949 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x45531 (* 2.0 l_0_10_121)))
 (let ((?x59946 (* ?x45531 l_0_10_129)))
 (let ((?x45505 (* 2.0 l_0_10_120)))
 (let ((?x59944 (* ?x45505 l_0_10_128)))
 (let ((?x60974 (+ (+ (+ (+ (* (* 2.0 l_0_10_119) l_0_10_127) ?x59944) ?x59946) ?x59949) ?x59952)))
 (let ((?x60981 (- (- (- (- (+ (+ (+ ?x60974 ?x59955) ?x59958) ?x59961) ?x59964) ?x59967) ?x59970) ?x59973)))
 (let ((?x60988 (- (- (- (- (- (- (- ?x60981 ?x59976) ?x59979) ?x59982) ?x59985) ?x46681) ?x59105) ?x59108)))
 (= (- (- (- (- (- ?x60988 ?x59111) ?x59114) ?x59117) ?x59120) ?x59123) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x59187 (* l_0_10_270 l_0_10_270)))
 (let ((?x59185 (* l_0_10_269 l_0_10_269)))
 (let ((?x59183 (* l_0_10_268 l_0_10_268)))
 (let ((?x59181 (* l_0_10_267 l_0_10_267)))
 (let ((?x59179 (* l_0_10_266 l_0_10_266)))
 (let ((?x59177 (* l_0_10_265 l_0_10_265)))
 (let ((?x59175 (* l_0_10_264 l_0_10_264)))
 (let ((?x59173 (* l_0_10_263 l_0_10_263)))
 (let ((?x46703 (* l_0_10_262 l_0_10_262)))
 (let ((?x60034 (* l_0_10_180 l_0_10_180)))
 (let ((?x60032 (* l_0_10_179 l_0_10_179)))
 (let ((?x60030 (* l_0_10_178 l_0_10_178)))
 (let ((?x60028 (* l_0_10_177 l_0_10_177)))
 (let ((?x60026 (* l_0_10_176 l_0_10_176)))
 (let ((?x60024 (* l_0_10_175 l_0_10_175)))
 (let ((?x60022 (* l_0_10_174 l_0_10_174)))
 (let ((?x60020 (* l_0_10_173 l_0_10_173)))
 (let ((?x60018 (* l_0_10_172 l_0_10_172)))
 (let ((?x60016 (* l_0_10_135 l_0_10_135)))
 (let ((?x47168 (* l_0_10_134 l_0_10_134)))
 (let ((?x24970 (* l_0_10_133 l_0_10_133)))
 (let ((?x47156 (* l_0_10_132 l_0_10_132)))
 (let ((?x47118 (* l_0_10_131 l_0_10_131)))
 (let ((?x47088 (* l_0_10_130 l_0_10_130)))
 (let ((?x47077 (* l_0_10_129 l_0_10_129)))
 (let ((?x50090 (+ (+ (* l_0_10_127 l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47077)))
 (let ((?x26706 (- (+ (+ (+ (+ (+ (+ ?x50090 ?x47088) ?x47118) ?x47156) ?x24970) ?x47168) ?x60016) ?x60018)))
 (let ((?x61000 (- (- (- (- (- (- (- ?x26706 ?x60020) ?x60022) ?x60024) ?x60026) ?x60028) ?x60030) ?x60032)))
 (let ((?x61007 (- (- (- (- (- (- (- ?x61000 ?x60034) ?x46703) ?x59173) ?x59175) ?x59177) ?x59179) ?x59181)))
 (= (- (- (- ?x61007 ?x59183) ?x59185) ?x59187) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x50167 (* l_0_10_316 l_0_10_316)))
 (let ((?x37878 (* l_0_10_271 l_0_10_271)))
 (= (- (- (* (* (- 1.0) l_0_10_181) l_0_10_181) ?x37878) ?x50167) 0.0))))
(assert
 (let ((?x61044 (- (* (* (- 2.0) l_0_10_181) l_0_10_182) (* (* 2.0 l_0_10_271) l_0_10_272))))
 (= (- ?x61044 (* (* 2.0 l_0_10_316) l_0_10_317)) 0.0)))
(assert
 (let ((?x61063 (- (* (* (- 2.0) l_0_10_181) l_0_10_187) (* (* 2.0 l_0_10_271) l_0_10_277))))
 (= (- ?x61063 (* (* 2.0 l_0_10_316) l_0_10_322)) 0.0)))
(assert
 (let ((?x61080 (- (* (* (- 2.0) l_0_10_181) l_0_10_196) (* (* 2.0 l_0_10_271) l_0_10_286))))
 (= (- ?x61080 (* (* 2.0 l_0_10_316) l_0_10_331)) 0.0)))
(assert
 (let ((?x61092 (- (* (* (- 2.0) l_0_10_181) l_0_10_202) (* (* 2.0 l_0_10_271) l_0_10_292))))
 (= (- ?x61092 (* (* 2.0 l_0_10_316) l_0_10_337)) 0.0)))
(assert
 (let ((?x61106 (- (* (* (- 2.0) l_0_10_181) l_0_10_209) (* (* 2.0 l_0_10_271) l_0_10_299))))
 (= (- ?x61106 (* (* 2.0 l_0_10_316) l_0_10_344)) 0.0)))
(assert
 (let ((?x26843 (- (* (* (- 2.0) l_0_10_181) l_0_10_217) (* (* 2.0 l_0_10_271) l_0_10_307))))
 (= (- ?x26843 (* (* 2.0 l_0_10_316) l_0_10_352)) 0.0)))
(assert
 (let ((?x61146 (* l_0_10_318 l_0_10_318)))
 (let ((?x61144 (* l_0_10_317 l_0_10_317)))
 (let ((?x61142 (* l_0_10_273 l_0_10_273)))
 (let ((?x61140 (* l_0_10_272 l_0_10_272)))
 (let ((?x61139 (- (* (* (- 1.0) l_0_10_182) l_0_10_182) (* (* 1.0 l_0_10_183) l_0_10_183))))
 (= (- (- (- (- ?x61139 ?x61140) ?x61142) ?x61144) ?x61146) 0.0)))))))
(assert
 (let ((?x61164 (- (* (* (- 2.0) l_0_10_182) l_0_10_187) (* (* 2.0 l_0_10_183) l_0_10_188))))
 (let ((?x61168 (- (- ?x61164 (* (* 2.0 l_0_10_272) l_0_10_277)) (* (* 2.0 l_0_10_273) l_0_10_278))))
 (let ((?x61172 (- (- ?x61168 (* (* 2.0 l_0_10_317) l_0_10_322)) (* (* 2.0 l_0_10_318) l_0_10_323))))
 (= ?x61172 0.0)))))
(assert
 (let ((?x61190 (- (* (* (- 2.0) l_0_10_182) l_0_10_196) (* (* 2.0 l_0_10_183) l_0_10_197))))
 (let ((?x61194 (- (- ?x61190 (* (* 2.0 l_0_10_272) l_0_10_286)) (* (* 2.0 l_0_10_273) l_0_10_287))))
 (let ((?x61198 (- (- ?x61194 (* (* 2.0 l_0_10_317) l_0_10_331)) (* (* 2.0 l_0_10_318) l_0_10_332))))
 (= ?x61198 0.0)))))
(assert
 (let ((?x61221 (- (* (* (- 2.0) l_0_10_182) l_0_10_202) (* (* 2.0 l_0_10_183) l_0_10_203))))
 (let ((?x61225 (- (- ?x61221 (* (* 2.0 l_0_10_272) l_0_10_292)) (* (* 2.0 l_0_10_273) l_0_10_293))))
 (let ((?x61229 (- (- ?x61225 (* (* 2.0 l_0_10_317) l_0_10_337)) (* (* 2.0 l_0_10_318) l_0_10_338))))
 (= ?x61229 0.0)))))
(assert
 (let ((?x61248 (- (* (* (- 2.0) l_0_10_182) l_0_10_217) (* (* 2.0 l_0_10_183) l_0_10_218))))
 (let ((?x61252 (- (- ?x61248 (* (* 2.0 l_0_10_272) l_0_10_307)) (* (* 2.0 l_0_10_273) l_0_10_308))))
 (let ((?x61256 (- (- ?x61252 (* (* 2.0 l_0_10_317) l_0_10_352)) (* (* 2.0 l_0_10_318) l_0_10_353))))
 (= ?x61256 0.0)))))
(assert
 (let ((?x61297 (* l_0_10_325 l_0_10_325)))
 (let ((?x61295 (* l_0_10_324 l_0_10_324)))
 (let ((?x61293 (* l_0_10_323 l_0_10_323)))
 (let ((?x61291 (* l_0_10_322 l_0_10_322)))
 (let ((?x61289 (* l_0_10_280 l_0_10_280)))
 (let ((?x61287 (* l_0_10_279 l_0_10_279)))
 (let ((?x61285 (* l_0_10_278 l_0_10_278)))
 (let ((?x61283 (* l_0_10_277 l_0_10_277)))
 (let ((?x61276 (- (* (* (- 1.0) l_0_10_187) l_0_10_187) (* (* 1.0 l_0_10_188) l_0_10_188))))
 (let ((?x61282 (- (- ?x61276 (* (* 1.0 l_0_10_189) l_0_10_189)) (* (* 1.0 l_0_10_190) l_0_10_190))))
 (let ((?x61296 (- (- (- (- (- (- (- ?x61282 ?x61283) ?x61285) ?x61287) ?x61289) ?x61291) ?x61293) ?x61295)))
 (= (- ?x61296 ?x61297) 0.0)))))))))))))
(assert
 (let ((?x61327 (- (* (* (- 2.0) l_0_10_187) l_0_10_196) (* (* 2.0 l_0_10_188) l_0_10_197))))
 (let ((?x61331 (- (- ?x61327 (* (* 2.0 l_0_10_189) l_0_10_198)) (* (* 2.0 l_0_10_190) l_0_10_199))))
 (let ((?x61335 (- (- ?x61331 (* (* 2.0 l_0_10_277) l_0_10_286)) (* (* 2.0 l_0_10_278) l_0_10_287))))
 (let ((?x61339 (- (- ?x61335 (* (* 2.0 l_0_10_279) l_0_10_288)) (* (* 2.0 l_0_10_280) l_0_10_289))))
 (let ((?x61343 (- (- ?x61339 (* (* 2.0 l_0_10_322) l_0_10_331)) (* (* 2.0 l_0_10_323) l_0_10_332))))
 (let ((?x61347 (- (- ?x61343 (* (* 2.0 l_0_10_324) l_0_10_333)) (* (* 2.0 l_0_10_325) l_0_10_334))))
 (= ?x61347 0.0))))))))
(assert
 (let ((?x61391 (- (* (* (- 2.0) l_0_10_187) l_0_10_209) (* (* 2.0 l_0_10_188) l_0_10_210))))
 (let ((?x61395 (- (- ?x61391 (* (* 2.0 l_0_10_189) l_0_10_211)) (* (* 2.0 l_0_10_190) l_0_10_212))))
 (let ((?x61399 (- (- ?x61395 (* (* 2.0 l_0_10_277) l_0_10_299)) (* (* 2.0 l_0_10_278) l_0_10_300))))
 (let ((?x61403 (- (- ?x61399 (* (* 2.0 l_0_10_279) l_0_10_301)) (* (* 2.0 l_0_10_280) l_0_10_302))))
 (let ((?x61407 (- (- ?x61403 (* (* 2.0 l_0_10_322) l_0_10_344)) (* (* 2.0 l_0_10_323) l_0_10_345))))
 (let ((?x61411 (- (- ?x61407 (* (* 2.0 l_0_10_324) l_0_10_346)) (* (* 2.0 l_0_10_325) l_0_10_347))))
 (= ?x61411 0.0))))))))
(assert
 (let ((?x50894 (- (* (* (- 2.0) l_0_10_187) l_0_10_217) (* (* 2.0 l_0_10_188) l_0_10_218))))
 (let ((?x61438 (- (- ?x50894 (* (* 2.0 l_0_10_189) l_0_10_219)) (* (* 2.0 l_0_10_190) l_0_10_220))))
 (let ((?x61442 (- (- ?x61438 (* (* 2.0 l_0_10_277) l_0_10_307)) (* (* 2.0 l_0_10_278) l_0_10_308))))
 (let ((?x61446 (- (- ?x61442 (* (* 2.0 l_0_10_279) l_0_10_309)) (* (* 2.0 l_0_10_280) l_0_10_310))))
 (let ((?x61450 (- (- ?x61446 (* (* 2.0 l_0_10_322) l_0_10_352)) (* (* 2.0 l_0_10_323) l_0_10_353))))
 (let ((?x61454 (- (- ?x61450 (* (* 2.0 l_0_10_324) l_0_10_354)) (* (* 2.0 l_0_10_325) l_0_10_355))))
 (= ?x61454 0.0))))))))
(assert
 (let ((?x61531 (* l_0_10_336 l_0_10_336)))
 (let ((?x61529 (* l_0_10_335 l_0_10_335)))
 (let ((?x61527 (* l_0_10_334 l_0_10_334)))
 (let ((?x61525 (* l_0_10_333 l_0_10_333)))
 (let ((?x61523 (* l_0_10_332 l_0_10_332)))
 (let ((?x61521 (* l_0_10_331 l_0_10_331)))
 (let ((?x61519 (* l_0_10_291 l_0_10_291)))
 (let ((?x61517 (* l_0_10_290 l_0_10_290)))
 (let ((?x61515 (* l_0_10_289 l_0_10_289)))
 (let ((?x61513 (* l_0_10_288 l_0_10_288)))
 (let ((?x61511 (* l_0_10_287 l_0_10_287)))
 (let ((?x61509 (* l_0_10_286 l_0_10_286)))
 (let ((?x61496 (- (* (* (- 1.0) l_0_10_196) l_0_10_196) (* (* 1.0 l_0_10_197) l_0_10_197))))
 (let ((?x61502 (- (- ?x61496 (* (* 1.0 l_0_10_198) l_0_10_198)) (* (* 1.0 l_0_10_199) l_0_10_199))))
 (let ((?x61508 (- (- ?x61502 (* (* 1.0 l_0_10_200) l_0_10_200)) (* (* 1.0 l_0_10_201) l_0_10_201))))
 (let ((?x61522 (- (- (- (- (- (- (- ?x61508 ?x61509) ?x61511) ?x61513) ?x61515) ?x61517) ?x61519) ?x61521)))
 (= (- (- (- (- (- ?x61522 ?x61523) ?x61525) ?x61527) ?x61529) ?x61531) 0.0))))))))))))))))))
(assert
 (let ((?x61561 (- (* (* (- 2.0) l_0_10_196) l_0_10_202) (* (* 2.0 l_0_10_197) l_0_10_203))))
 (let ((?x61565 (- (- ?x61561 (* (* 2.0 l_0_10_198) l_0_10_204)) (* (* 2.0 l_0_10_199) l_0_10_205))))
 (let ((?x61569 (- (- ?x61565 (* (* 2.0 l_0_10_200) l_0_10_206)) (* (* 2.0 l_0_10_201) l_0_10_207))))
 (let ((?x61573 (- (- ?x61569 (* (* 2.0 l_0_10_286) l_0_10_292)) (* (* 2.0 l_0_10_287) l_0_10_293))))
 (let ((?x61577 (- (- ?x61573 (* (* 2.0 l_0_10_288) l_0_10_294)) (* (* 2.0 l_0_10_289) l_0_10_295))))
 (let ((?x61581 (- (- ?x61577 (* (* 2.0 l_0_10_290) l_0_10_296)) (* (* 2.0 l_0_10_291) l_0_10_297))))
 (let ((?x61585 (- (- ?x61581 (* (* 2.0 l_0_10_331) l_0_10_337)) (* (* 2.0 l_0_10_332) l_0_10_338))))
 (let ((?x61589 (- (- ?x61585 (* (* 2.0 l_0_10_333) l_0_10_339)) (* (* 2.0 l_0_10_334) l_0_10_340))))
 (let ((?x61593 (- (- ?x61589 (* (* 2.0 l_0_10_335) l_0_10_341)) (* (* 2.0 l_0_10_336) l_0_10_342))))
 (= ?x61593 0.0)))))))))))
(assert
 (let ((?x61635 (- (* (* (- 2.0) l_0_10_196) l_0_10_217) (* (* 2.0 l_0_10_197) l_0_10_218))))
 (let ((?x61639 (- (- ?x61635 (* (* 2.0 l_0_10_198) l_0_10_219)) (* (* 2.0 l_0_10_199) l_0_10_220))))
 (let ((?x61643 (- (- ?x61639 (* (* 2.0 l_0_10_200) l_0_10_221)) (* (* 2.0 l_0_10_201) l_0_10_222))))
 (let ((?x61647 (- (- ?x61643 (* (* 2.0 l_0_10_286) l_0_10_307)) (* (* 2.0 l_0_10_287) l_0_10_308))))
 (let ((?x61651 (- (- ?x61647 (* (* 2.0 l_0_10_288) l_0_10_309)) (* (* 2.0 l_0_10_289) l_0_10_310))))
 (let ((?x61655 (- (- ?x61651 (* (* 2.0 l_0_10_290) l_0_10_311)) (* (* 2.0 l_0_10_291) l_0_10_312))))
 (let ((?x61659 (- (- ?x61655 (* (* 2.0 l_0_10_331) l_0_10_352)) (* (* 2.0 l_0_10_332) l_0_10_353))))
 (let ((?x61663 (- (- ?x61659 (* (* 2.0 l_0_10_333) l_0_10_354)) (* (* 2.0 l_0_10_334) l_0_10_355))))
 (let ((?x61667 (- (- ?x61663 (* (* 2.0 l_0_10_335) l_0_10_356)) (* (* 2.0 l_0_10_336) l_0_10_357))))
 (= ?x61667 0.0)))))))))))
(assert
 (let ((?x61776 (* l_0_10_343 l_0_10_343)))
 (let ((?x61774 (* l_0_10_342 l_0_10_342)))
 (let ((?x61772 (* l_0_10_341 l_0_10_341)))
 (let ((?x61770 (* l_0_10_340 l_0_10_340)))
 (let ((?x61768 (* l_0_10_339 l_0_10_339)))
 (let ((?x61766 (* l_0_10_338 l_0_10_338)))
 (let ((?x61764 (* l_0_10_337 l_0_10_337)))
 (let ((?x61762 (* l_0_10_298 l_0_10_298)))
 (let ((?x61760 (* l_0_10_297 l_0_10_297)))
 (let ((?x61758 (* l_0_10_296 l_0_10_296)))
 (let ((?x61756 (* l_0_10_295 l_0_10_295)))
 (let ((?x61754 (* l_0_10_294 l_0_10_294)))
 (let ((?x61752 (* l_0_10_293 l_0_10_293)))
 (let ((?x61750 (* l_0_10_292 l_0_10_292)))
 (let ((?x61734 (- (* (* (- 1.0) l_0_10_202) l_0_10_202) (* (* 1.0 l_0_10_203) l_0_10_203))))
 (let ((?x61740 (- (- ?x61734 (* (* 1.0 l_0_10_204) l_0_10_204)) (* (* 1.0 l_0_10_205) l_0_10_205))))
 (let ((?x61746 (- (- ?x61740 (* (* 1.0 l_0_10_206) l_0_10_206)) (* (* 1.0 l_0_10_207) l_0_10_207))))
 (let ((?x61755 (- (- (- (- ?x61746 (* (* 1.0 l_0_10_208) l_0_10_208)) ?x61750) ?x61752) ?x61754)))
 (let ((?x61769 (- (- (- (- (- (- (- ?x61755 ?x61756) ?x61758) ?x61760) ?x61762) ?x61764) ?x61766) ?x61768)))
 (= (- (- (- (- ?x61769 ?x61770) ?x61772) ?x61774) ?x61776) 0.0)))))))))))))))))))))
(assert
 (let ((?x61821 (- (* (* (- 2.0) l_0_10_202) l_0_10_209) (* (* 2.0 l_0_10_203) l_0_10_210))))
 (let ((?x61825 (- (- ?x61821 (* (* 2.0 l_0_10_204) l_0_10_211)) (* (* 2.0 l_0_10_205) l_0_10_212))))
 (let ((?x61829 (- (- ?x61825 (* (* 2.0 l_0_10_206) l_0_10_213)) (* (* 2.0 l_0_10_207) l_0_10_214))))
 (let ((?x61833 (- (- ?x61829 (* (* 2.0 l_0_10_208) l_0_10_215)) (* (* 2.0 l_0_10_292) l_0_10_299))))
 (let ((?x61837 (- (- ?x61833 (* (* 2.0 l_0_10_293) l_0_10_300)) (* (* 2.0 l_0_10_294) l_0_10_301))))
 (let ((?x61841 (- (- ?x61837 (* (* 2.0 l_0_10_295) l_0_10_302)) (* (* 2.0 l_0_10_296) l_0_10_303))))
 (let ((?x61845 (- (- ?x61841 (* (* 2.0 l_0_10_297) l_0_10_304)) (* (* 2.0 l_0_10_298) l_0_10_305))))
 (let ((?x61849 (- (- ?x61845 (* (* 2.0 l_0_10_337) l_0_10_344)) (* (* 2.0 l_0_10_338) l_0_10_345))))
 (let ((?x61853 (- (- ?x61849 (* (* 2.0 l_0_10_339) l_0_10_346)) (* (* 2.0 l_0_10_340) l_0_10_347))))
 (let ((?x61857 (- (- ?x61853 (* (* 2.0 l_0_10_341) l_0_10_348)) (* (* 2.0 l_0_10_342) l_0_10_349))))
 (= (- ?x61857 (* (* 2.0 l_0_10_343) l_0_10_350)) 0.0))))))))))))
(assert
 (let ((?x61961 (* l_0_10_351 l_0_10_351)))
 (let ((?x61959 (* l_0_10_350 l_0_10_350)))
 (let ((?x61957 (* l_0_10_349 l_0_10_349)))
 (let ((?x61955 (* l_0_10_348 l_0_10_348)))
 (let ((?x61953 (* l_0_10_347 l_0_10_347)))
 (let ((?x61951 (* l_0_10_346 l_0_10_346)))
 (let ((?x61949 (* l_0_10_345 l_0_10_345)))
 (let ((?x61947 (* l_0_10_344 l_0_10_344)))
 (let ((?x61945 (* l_0_10_306 l_0_10_306)))
 (let ((?x61943 (* l_0_10_305 l_0_10_305)))
 (let ((?x61941 (* l_0_10_304 l_0_10_304)))
 (let ((?x61939 (* l_0_10_303 l_0_10_303)))
 (let ((?x61937 (* l_0_10_302 l_0_10_302)))
 (let ((?x61935 (* l_0_10_301 l_0_10_301)))
 (let ((?x61933 (* l_0_10_300 l_0_10_300)))
 (let ((?x61931 (* l_0_10_299 l_0_10_299)))
 (let ((?x61912 (- (* (* (- 1.0) l_0_10_209) l_0_10_209) (* (* 1.0 l_0_10_210) l_0_10_210))))
 (let ((?x61918 (- (- ?x61912 (* (* 1.0 l_0_10_211) l_0_10_211)) (* (* 1.0 l_0_10_212) l_0_10_212))))
 (let ((?x61924 (- (- ?x61918 (* (* 1.0 l_0_10_213) l_0_10_213)) (* (* 1.0 l_0_10_214) l_0_10_214))))
 (let ((?x61930 (- (- ?x61924 (* (* 1.0 l_0_10_215) l_0_10_215)) (* (* 1.0 l_0_10_216) l_0_10_216))))
 (let ((?x61944 (- (- (- (- (- (- (- ?x61930 ?x61931) ?x61933) ?x61935) ?x61937) ?x61939) ?x61941) ?x61943)))
 (let ((?x61958 (- (- (- (- (- (- (- ?x61944 ?x61945) ?x61947) ?x61949) ?x61951) ?x61953) ?x61955) ?x61957)))
 (= (- (- ?x61958 ?x61959) ?x61961) 0.0))))))))))))))))))))))))
(assert
 (let ((?x11834 (- (* (* (- 2.0) l_0_10_209) l_0_10_217) (* (* 2.0 l_0_10_210) l_0_10_218))))
 (let ((?x62014 (- (- ?x11834 (* (* 2.0 l_0_10_211) l_0_10_219)) (* (* 2.0 l_0_10_212) l_0_10_220))))
 (let ((?x62020 (- (- ?x62014 (* (* 2.0 l_0_10_213) l_0_10_221)) (* (* 2.0 l_0_10_214) l_0_10_222))))
 (let ((?x62026 (- (- ?x62020 (* (* 2.0 l_0_10_215) l_0_10_223)) (* (* 2.0 l_0_10_216) l_0_10_224))))
 (let ((?x62032 (- (- ?x62026 (* (* 2.0 l_0_10_299) l_0_10_307)) (* (* 2.0 l_0_10_300) l_0_10_308))))
 (let ((?x62038 (- (- ?x62032 (* (* 2.0 l_0_10_301) l_0_10_309)) (* (* 2.0 l_0_10_302) l_0_10_310))))
 (let ((?x62044 (- (- ?x62038 (* (* 2.0 l_0_10_303) l_0_10_311)) (* (* 2.0 l_0_10_304) l_0_10_312))))
 (let ((?x62050 (- (- ?x62044 (* (* 2.0 l_0_10_305) l_0_10_313)) (* (* 2.0 l_0_10_306) l_0_10_314))))
 (let ((?x62056 (- (- ?x62050 (* (* 2.0 l_0_10_344) l_0_10_352)) (* (* 2.0 l_0_10_345) l_0_10_353))))
 (let ((?x62062 (- (- ?x62056 (* (* 2.0 l_0_10_346) l_0_10_354)) (* (* 2.0 l_0_10_347) l_0_10_355))))
 (let ((?x62068 (- (- ?x62062 (* (* 2.0 l_0_10_348) l_0_10_356)) (* (* 2.0 l_0_10_349) l_0_10_357))))
 (let ((?x62074 (- (- ?x62068 (* (* 2.0 l_0_10_350) l_0_10_358)) (* (* 2.0 l_0_10_351) l_0_10_359))))
 (= ?x62074 0.0))))))))))))))
(assert
 (let ((?x62209 (* l_0_10_360 l_0_10_360)))
 (let ((?x62207 (* l_0_10_359 l_0_10_359)))
 (let ((?x62205 (* l_0_10_358 l_0_10_358)))
 (let ((?x62203 (* l_0_10_357 l_0_10_357)))
 (let ((?x62201 (* l_0_10_356 l_0_10_356)))
 (let ((?x62199 (* l_0_10_355 l_0_10_355)))
 (let ((?x62197 (* l_0_10_354 l_0_10_354)))
 (let ((?x62195 (* l_0_10_353 l_0_10_353)))
 (let ((?x62193 (* l_0_10_352 l_0_10_352)))
 (let ((?x62191 (* l_0_10_315 l_0_10_315)))
 (let ((?x62189 (* l_0_10_314 l_0_10_314)))
 (let ((?x62187 (* l_0_10_313 l_0_10_313)))
 (let ((?x62185 (* l_0_10_312 l_0_10_312)))
 (let ((?x62183 (* l_0_10_311 l_0_10_311)))
 (let ((?x62181 (* l_0_10_310 l_0_10_310)))
 (let ((?x62179 (* l_0_10_309 l_0_10_309)))
 (let ((?x62177 (* l_0_10_308 l_0_10_308)))
 (let ((?x62175 (* l_0_10_307 l_0_10_307)))
 (let ((?x62153 (- (* (* (- 1.0) l_0_10_217) l_0_10_217) (* (* 1.0 l_0_10_218) l_0_10_218))))
 (let ((?x62159 (- (- ?x62153 (* (* 1.0 l_0_10_219) l_0_10_219)) (* (* 1.0 l_0_10_220) l_0_10_220))))
 (let ((?x62165 (- (- ?x62159 (* (* 1.0 l_0_10_221) l_0_10_221)) (* (* 1.0 l_0_10_222) l_0_10_222))))
 (let ((?x62171 (- (- ?x62165 (* (* 1.0 l_0_10_223) l_0_10_223)) (* (* 1.0 l_0_10_224) l_0_10_224))))
 (let ((?x62180 (- (- (- (- ?x62171 (* (* 1.0 l_0_10_225) l_0_10_225)) ?x62175) ?x62177) ?x62179)))
 (let ((?x62194 (- (- (- (- (- (- (- ?x62180 ?x62181) ?x62183) ?x62185) ?x62187) ?x62189) ?x62191) ?x62193)))
 (let ((?x62208 (- (- (- (- (- (- (- ?x62194 ?x62195) ?x62197) ?x62199) ?x62201) ?x62203) ?x62205) ?x62207)))
 (= (- ?x62208 ?x62209) 0.0)))))))))))))))))))))))))))
(assert
 (>= l_0_10_1 0.0))
(assert
 (>= l_0_10_3 0.0))
(assert
 (>= l_0_10_6 0.0))
(assert
 (>= l_0_10_10 0.0))
(assert
 (>= l_0_10_15 0.0))
(assert
 (>= l_0_10_21 0.0))
(assert
 (>= l_0_10_28 0.0))
(assert
 (>= l_0_10_36 0.0))
(assert
 (>= l_0_10_45 0.0))
(assert
 (>= l_0_10_46 0.0))
(assert
 (>= l_0_10_48 0.0))
(assert
 (>= l_0_10_51 0.0))
(assert
 (>= l_0_10_55 0.0))
(assert
 (>= l_0_10_60 0.0))
(assert
 (>= l_0_10_66 0.0))
(assert
 (>= l_0_10_73 0.0))
(assert
 (>= l_0_10_81 0.0))
(assert
 (>= l_0_10_90 0.0))
(assert
 (>= l_0_10_91 0.0))
(assert
 (>= l_0_10_93 0.0))
(assert
 (>= l_0_10_96 0.0))
(assert
 (>= l_0_10_100 0.0))
(assert
 (>= l_0_10_105 0.0))
(assert
 (>= l_0_10_111 0.0))
(assert
 (>= l_0_10_118 0.0))
(assert
 (>= l_0_10_126 0.0))
(assert
 (>= l_0_10_135 0.0))
(assert
 (>= l_0_10_136 0.0))
(assert
 (>= l_0_10_138 0.0))
(assert
 (>= l_0_10_141 0.0))
(assert
 (>= l_0_10_145 0.0))
(assert
 (>= l_0_10_150 0.0))
(assert
 (>= l_0_10_156 0.0))
(assert
 (>= l_0_10_163 0.0))
(assert
 (>= l_0_10_171 0.0))
(assert
 (>= l_0_10_180 0.0))
(assert
 (>= l_0_10_181 0.0))
(assert
 (>= l_0_10_183 0.0))
(assert
 (>= l_0_10_186 0.0))
(assert
 (>= l_0_10_190 0.0))
(assert
 (>= l_0_10_195 0.0))
(assert
 (>= l_0_10_201 0.0))
(assert
 (>= l_0_10_208 0.0))
(assert
 (>= l_0_10_216 0.0))
(assert
 (>= l_0_10_225 0.0))
(assert
 (>= l_0_10_226 0.0))
(assert
 (>= l_0_10_228 0.0))
(assert
 (>= l_0_10_231 0.0))
(assert
 (>= l_0_10_235 0.0))
(assert
 (>= l_0_10_240 0.0))
(assert
 (>= l_0_10_246 0.0))
(assert
 (>= l_0_10_253 0.0))
(assert
 (>= l_0_10_261 0.0))
(assert
 (>= l_0_10_270 0.0))
(assert
 (>= l_0_10_271 0.0))
(assert
 (>= l_0_10_273 0.0))
(assert
 (>= l_0_10_276 0.0))
(assert
 (>= l_0_10_280 0.0))
(assert
 (>= l_0_10_285 0.0))
(assert
 (>= l_0_10_291 0.0))
(assert
 (>= l_0_10_298 0.0))
(assert
 (>= l_0_10_306 0.0))
(assert
 (>= l_0_10_315 0.0))
(assert
 (>= l_0_10_316 0.0))
(assert
 (>= l_0_10_318 0.0))
(assert
 (>= l_0_10_321 0.0))
(assert
 (>= l_0_10_325 0.0))
(assert
 (>= l_0_10_330 0.0))
(assert
 (>= l_0_10_336 0.0))
(assert
 (>= l_0_10_343 0.0))
(assert
 (>= l_0_10_351 0.0))
(assert
 (>= l_0_10_360 0.0))
(assert
 (let ((?x62412 (* l_0_11_91 l_0_11_91)))
 (let ((?x62327 (* l_0_11_136 l_0_11_136)))
 (let ((?x62333 (- (- ?x62327 (* (* 2.0 l_0_11_202) l_0_11_217)) (* (* 2.0 l_0_11_203) l_0_11_218))))
 (let ((?x62339 (- (- ?x62333 (* (* 2.0 l_0_11_204) l_0_11_219)) (* (* 2.0 l_0_11_205) l_0_11_220))))
 (let ((?x62345 (- (- ?x62339 (* (* 2.0 l_0_11_206) l_0_11_221)) (* (* 2.0 l_0_11_207) l_0_11_222))))
 (let ((?x62351 (- (- ?x62345 (* (* 2.0 l_0_11_208) l_0_11_223)) (* (* 2.0 l_0_11_292) l_0_11_307))))
 (let ((?x62357 (- (- ?x62351 (* (* 2.0 l_0_11_293) l_0_11_308)) (* (* 2.0 l_0_11_294) l_0_11_309))))
 (let ((?x62363 (- (- ?x62357 (* (* 2.0 l_0_11_295) l_0_11_310)) (* (* 2.0 l_0_11_296) l_0_11_311))))
 (let ((?x62369 (- (- ?x62363 (* (* 2.0 l_0_11_297) l_0_11_312)) (* (* 2.0 l_0_11_298) l_0_11_313))))
 (let ((?x62375 (- (- ?x62369 (* (* 2.0 l_0_11_337) l_0_11_352)) (* (* 2.0 l_0_11_338) l_0_11_353))))
 (let ((?x62381 (- (- ?x62375 (* (* 2.0 l_0_11_339) l_0_11_354)) (* (* 2.0 l_0_11_340) l_0_11_355))))
 (let ((?x62387 (- (- ?x62381 (* (* 2.0 l_0_11_341) l_0_11_356)) (* (* 2.0 l_0_11_342) l_0_11_357))))
 (let ((?x62393 (- (- ?x62387 (* (* 2.0 l_0_11_343) l_0_11_358)) (* (* 2.0 l_0_11_382) l_0_11_397))))
 (let ((?x62399 (- (- ?x62393 (* (* 2.0 l_0_11_383) l_0_11_398)) (* (* 2.0 l_0_11_384) l_0_11_399))))
 (let ((?x62405 (- (- ?x62399 (* (* 2.0 l_0_11_385) l_0_11_400)) (* (* 2.0 l_0_11_386) l_0_11_401))))
 (let ((?x62411 (- (- ?x62405 (* (* 2.0 l_0_11_387) l_0_11_402)) (* (* 2.0 l_0_11_388) l_0_11_403))))
 (= (+ (- ?x62411 ?x62412) 1.0) 0.0))))))))))))))))))
(assert
 (let ((?x62557 (* l_0_11_46 l_0_11_46)))
 (let ((?x62511 (- (* (- l_0_11_1) l_0_11_1) (* (* 2.0 l_0_11_187) l_0_11_202))))
 (let ((?x62517 (- (- ?x62511 (* (* 2.0 l_0_11_188) l_0_11_203)) (* (* 2.0 l_0_11_189) l_0_11_204))))
 (let ((?x62523 (- (- ?x62517 (* (* 2.0 l_0_11_190) l_0_11_205)) (* (* 2.0 l_0_11_277) l_0_11_292))))
 (let ((?x62529 (- (- ?x62523 (* (* 2.0 l_0_11_278) l_0_11_293)) (* (* 2.0 l_0_11_279) l_0_11_294))))
 (let ((?x62535 (- (- ?x62529 (* (* 2.0 l_0_11_280) l_0_11_295)) (* (* 2.0 l_0_11_322) l_0_11_337))))
 (let ((?x62541 (- (- ?x62535 (* (* 2.0 l_0_11_323) l_0_11_338)) (* (* 2.0 l_0_11_324) l_0_11_339))))
 (let ((?x62547 (- (- ?x62541 (* (* 2.0 l_0_11_325) l_0_11_340)) (* (* 2.0 l_0_11_367) l_0_11_382))))
 (let ((?x62553 (- (- ?x62547 (* (* 2.0 l_0_11_368) l_0_11_383)) (* (* 2.0 l_0_11_369) l_0_11_384))))
 (= (- (+ (- ?x62553 (* (* 2.0 l_0_11_370) l_0_11_385)) ?x62557) 1.0) 0.0)))))))))))
(assert
 (let ((?x62412 (* l_0_11_91 l_0_11_91)))
 (let ((?x62607 (- (+ _a_9_ (* l_0_11_136 l_0_11_136)) (* (* 2.0 l_0_11_182) l_0_11_209))))
 (let ((?x62613 (- (- ?x62607 (* (* 2.0 l_0_11_183) l_0_11_210)) (* (* 2.0 l_0_11_272) l_0_11_299))))
 (let ((?x62619 (- (- ?x62613 (* (* 2.0 l_0_11_273) l_0_11_300)) (* (* 2.0 l_0_11_317) l_0_11_344))))
 (let ((?x62625 (- (- ?x62619 (* (* 2.0 l_0_11_318) l_0_11_345)) (* (* 2.0 l_0_11_362) l_0_11_389))))
 (= (- (- ?x62625 (* (* 2.0 l_0_11_363) l_0_11_390)) ?x62412) 0.0)))))))
(assert
 (let ((?x62662 (- (- _a_10_ (* (* 2.0 l_0_11_181) l_0_11_209)) (* (* 2.0 l_0_11_271) l_0_11_299))))
 (let ((?x62668 (- (- ?x62662 (* (* 2.0 l_0_11_316) l_0_11_344)) (* (* 2.0 l_0_11_361) l_0_11_389))))
 (= ?x62668 0.0))))
(assert
 (let ((?x62557 (* l_0_11_46 l_0_11_46)))
 (let ((?x62687 (- (- _a_11_ (* l_0_11_1 l_0_11_1)) (* (* 2.0 l_0_11_196) l_0_11_209))))
 (let ((?x62693 (- (- ?x62687 (* (* 2.0 l_0_11_197) l_0_11_210)) (* (* 2.0 l_0_11_198) l_0_11_211))))
 (let ((?x62699 (- (- ?x62693 (* (* 2.0 l_0_11_199) l_0_11_212)) (* (* 2.0 l_0_11_200) l_0_11_213))))
 (let ((?x62705 (- (- ?x62699 (* (* 2.0 l_0_11_201) l_0_11_214)) (* (* 2.0 l_0_11_286) l_0_11_299))))
 (let ((?x62711 (- (- ?x62705 (* (* 2.0 l_0_11_287) l_0_11_300)) (* (* 2.0 l_0_11_288) l_0_11_301))))
 (let ((?x62717 (- (- ?x62711 (* (* 2.0 l_0_11_289) l_0_11_302)) (* (* 2.0 l_0_11_290) l_0_11_303))))
 (let ((?x62723 (- (- ?x62717 (* (* 2.0 l_0_11_291) l_0_11_304)) (* (* 2.0 l_0_11_331) l_0_11_344))))
 (let ((?x62729 (- (- ?x62723 (* (* 2.0 l_0_11_332) l_0_11_345)) (* (* 2.0 l_0_11_333) l_0_11_346))))
 (let ((?x62735 (- (- ?x62729 (* (* 2.0 l_0_11_334) l_0_11_347)) (* (* 2.0 l_0_11_335) l_0_11_348))))
 (let ((?x62741 (- (- ?x62735 (* (* 2.0 l_0_11_336) l_0_11_349)) (* (* 2.0 l_0_11_376) l_0_11_389))))
 (let ((?x62747 (- (- ?x62741 (* (* 2.0 l_0_11_377) l_0_11_390)) (* (* 2.0 l_0_11_378) l_0_11_391))))
 (let ((?x62753 (- (- ?x62747 (* (* 2.0 l_0_11_379) l_0_11_392)) (* (* 2.0 l_0_11_380) l_0_11_393))))
 (= (+ (- ?x62753 (* (* 2.0 l_0_11_381) l_0_11_394)) ?x62557) 0.0)))))))))))))))
(assert
 (let ((?x62828 (* l_0_11_361 l_0_11_361)))
 (let ((?x62826 (* l_0_11_316 l_0_11_316)))
 (let ((?x62824 (* l_0_11_271 l_0_11_271)))
 (let ((?x62827 (- (- (- (- _a_6_) (* (* 1.0 l_0_11_181) l_0_11_181)) ?x62824) ?x62826)))
 (= (- ?x62827 ?x62828) 0.0))))))
(assert
 (let ((?x62557 (* l_0_11_46 l_0_11_46)))
 (let ((?x62847 (* l_0_11_226 l_0_11_226)))
 (let ((?x62846 (- (+ (- _a_7_) (* l_0_11_1 l_0_11_1)) (* (* 2.0 l_0_11_181) l_0_11_184))))
 (let ((?x62852 (- (- (+ ?x62846 ?x62847) (* (* 2.0 l_0_11_271) l_0_11_274)) (* (* 2.0 l_0_11_316) l_0_11_319))))
 (= (- (- ?x62852 (* (* 2.0 l_0_11_361) l_0_11_364)) ?x62557) 0.0))))))
(assert
 (let ((?x62412 (* l_0_11_91 l_0_11_91)))
 (let ((?x62847 (* l_0_11_226 l_0_11_226)))
 (let ((?x62880 (- (- (- _a_8_) (* l_0_11_136 l_0_11_136)) (* (* 2.0 l_0_11_181) l_0_11_191))))
 (let ((?x62885 (- (- (- ?x62880 ?x62847) (* (* 2.0 l_0_11_271) l_0_11_281)) (* (* 2.0 l_0_11_316) l_0_11_326))))
 (= (+ (- ?x62885 (* (* 2.0 l_0_11_361) l_0_11_371)) ?x62412) 0.0))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62917 (* ?x62916 l_0_11_47)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x62914 (* ?x62913 l_0_11_151)))
 (let ((?x62910 (* 2.0 l_0_11_106)))
 (let ((?x62911 (* ?x62910 l_0_11_91)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x62909 (* ?x41193 l_0_11_2)))
 (= (+ (+ (- ?x62909 ?x62911) ?x62914) ?x62917) 0.0))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x62990 (* ?x62989 l_0_11_79)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x62987 (* ?x62986 l_0_11_78)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x62984 (* ?x62983 l_0_11_77)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x62981 (* ?x62980 l_0_11_76)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x62978 (* ?x62977 l_0_11_75)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x62975 (* ?x62974 l_0_11_74)))
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62972 (* ?x62916 l_0_11_49)))
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x62970 (* ?x62969 l_0_11_259)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x62967 (* ?x62966 l_0_11_258)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x62964 (* ?x62963 l_0_11_257)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x62961 (* ?x62960 l_0_11_256)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x62958 (* ?x62957 l_0_11_255)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x62955 (* ?x62954 l_0_11_254)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x62952 (* ?x62951 l_0_11_34)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x62949 (* ?x62948 l_0_11_33)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x62946 (* ?x62945 l_0_11_32)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x62943 (* ?x62942 l_0_11_31)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x62940 (* ?x62939 l_0_11_30)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x62932 (* ?x62931 l_0_11_29)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x62929 (* ?x41193 l_0_11_4)))
 (let ((?x62956 (+ (+ (+ (+ (+ (+ (+ ?x62929 ?x62932) ?x62940) ?x62943) ?x62946) ?x62949) ?x62952) ?x62955)))
 (let ((?x62976 (- (+ (+ (+ (+ (+ (+ ?x62956 ?x62958) ?x62961) ?x62964) ?x62967) ?x62970) ?x62972) ?x62975)))
 (= (- (- (- (- (- ?x62976 ?x62978) ?x62981) ?x62984) ?x62987) ?x62990) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63070 (* ?x62916 l_0_11_52)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) ?x63070) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63121 (* ?x62916 l_0_11_56)))
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x62970 (* ?x62969 l_0_11_259)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x62967 (* ?x62966 l_0_11_258)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x62964 (* ?x62963 l_0_11_257)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x62961 (* ?x62960 l_0_11_256)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x62958 (* ?x62957 l_0_11_255)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x62955 (* ?x62954 l_0_11_254)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63113 (* ?x63112 l_0_11_169)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63110 (* ?x63109 l_0_11_168)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63107 (* ?x63106 l_0_11_167)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63104 (* ?x63103 l_0_11_166)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63101 (* ?x63100 l_0_11_165)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63098 (* ?x63097 l_0_11_164)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63095 (* ?x63094 l_0_11_124)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63092 (* ?x63091 l_0_11_123)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63089 (* ?x63088 l_0_11_122)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63086 (* ?x63085 l_0_11_121)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63083 (* ?x63082 l_0_11_120)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x63074 (* ?x41193 l_0_11_11)))
 (let ((?x63090 (+ (+ (+ (+ ?x63074 (* (* 2.0 l_0_11_106) l_0_11_119)) ?x63083) ?x63086) ?x63089)))
 (let ((?x63111 (- (- (- (- (- (+ (+ ?x63090 ?x63092) ?x63095) ?x63098) ?x63101) ?x63104) ?x63107) ?x63110)))
 (let ((?x63120 (- (- (- (- (- (- (- ?x63111 ?x63113) ?x62955) ?x62958) ?x62961) ?x62964) ?x62967) ?x62970)))
 (= (+ ?x63120 ?x63121) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63189 (* ?x62916 l_0_11_61)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x63189) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63205 (* ?x62916 l_0_11_67)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_22) ?x63205) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63215 (* ?x62916 l_0_11_74)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_29) ?x63215) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63225 (* ?x62916 l_0_11_82)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x63223 (* ?x41193 l_0_11_37)))
 (= (+ ?x63223 ?x63225) 0.0))))))
(assert
 (let ((?x63254 (* l_0_11_48 l_0_11_48)))
 (let ((?x63252 (* l_0_11_47 l_0_11_47)))
 (let ((?x63250 (* l_0_11_3 l_0_11_3)))
 (let ((?x63248 (* l_0_11_2 l_0_11_2)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x63246 (* ?x63245 l_0_11_152)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x63243 (* ?x63242 l_0_11_151)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63236 (* ?x63082 l_0_11_93)))
 (let ((?x63247 (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_92) ?x63236) ?x63243) ?x63246)))
 (= (+ (+ (- (- ?x63247 ?x63248) ?x63250) ?x63252) ?x63254) 0.0)))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63307 (* ?x63306 l_0_11_50)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63304 (* ?x63303 l_0_11_49)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63301 (* ?x63300 l_0_11_5)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63298 (* ?x63297 l_0_11_4)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x63295 (* ?x63294 l_0_11_153)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x63292 (* ?x63291 l_0_11_152)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x63289 (* ?x63288 l_0_11_151)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63286 (* ?x63085 l_0_11_96)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63284 (* ?x63082 l_0_11_95)))
 (let ((?x63293 (+ (+ (- (- (* (* (- 2.0) l_0_11_106) l_0_11_94) ?x63284) ?x63286) ?x63289) ?x63292)))
 (let ((?x63296 (+ ?x63293 ?x63295)))
 (= (+ (+ (- (- ?x63296 ?x63298) ?x63301) ?x63304) ?x63307) 0.0))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63379 (* ?x63306 l_0_11_53)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63377 (* ?x63303 l_0_11_52)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63375 (* ?x63300 l_0_11_8)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63373 (* ?x63297 l_0_11_7)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x63371 (* ?x63370 l_0_11_154)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x63368 (* ?x63367 l_0_11_153)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x63365 (* ?x63364 l_0_11_152)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x63362 (* ?x63361 l_0_11_151)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63359 (* ?x63085 l_0_11_99)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63357 (* ?x63082 l_0_11_98)))
 (let ((?x62910 (* 2.0 l_0_11_106)))
 (let ((?x63347 (* ?x62910 l_0_11_97)))
 (let ((?x63363 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_109) ?x63347) ?x63357) ?x63359) ?x63362)))
 (let ((?x63372 (+ (+ (+ ?x63363 ?x63365) ?x63368) ?x63371)))
 (= (+ (+ (- (- ?x63372 ?x63373) ?x63375) ?x63377) ?x63379) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63468 (* ?x63306 l_0_11_57)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63466 (* ?x63303 l_0_11_56)))
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x63464 (* ?x63463 l_0_11_155)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x63461 (* ?x63460 l_0_11_154)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x63458 (* ?x63457 l_0_11_153)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x63455 (* ?x63454 l_0_11_152)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x63452 (* ?x63451 l_0_11_151)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63449 (* ?x63448 l_0_11_3)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x63446 (* ?x63445 l_0_11_2)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x63443 (* ?x63442 l_0_11_110)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x63440 (* ?x63439 l_0_11_109)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x63437 (* ?x63436 l_0_11_108)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x63434 (* ?x63424 l_0_11_107)))
 (let ((?x63444 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_106) ?x63434) ?x63437) ?x63440) ?x63443)))
 (let ((?x63465 (+ (+ (+ (+ (+ (- (- ?x63444 ?x63446) ?x63449) ?x63452) ?x63455) ?x63458) ?x63461) ?x63464)))
 (= (+ (+ ?x63465 ?x63466) ?x63468) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63556 (* ?x63306 l_0_11_62)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63554 (* ?x63303 l_0_11_61)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x63552 (* ?x62939 l_0_11_3)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x63550 (* ?x62931 l_0_11_2)))
 (let ((?x63548 (* l_0_11_156 l_0_11_156)))
 (let ((?x63546 (* l_0_11_155 l_0_11_155)))
 (let ((?x63544 (* l_0_11_154 l_0_11_154)))
 (let ((?x63542 (* l_0_11_153 l_0_11_153)))
 (let ((?x63540 (* l_0_11_152 l_0_11_152)))
 (let ((?x63538 (* l_0_11_151 l_0_11_151)))
 (let ((?x63536 (* l_0_11_111 l_0_11_111)))
 (let ((?x63534 (* l_0_11_110 l_0_11_110)))
 (let ((?x63522 (* l_0_11_109 l_0_11_109)))
 (let ((?x63518 (* l_0_11_108 l_0_11_108)))
 (let ((?x63520 (- (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x63518)))
 (let ((?x63545 (+ (+ (+ (+ (- (- (- ?x63520 ?x63522) ?x63534) ?x63536) ?x63538) ?x63540) ?x63542) ?x63544)))
 (let ((?x63549 (+ (+ ?x63545 ?x63546) ?x63548)))
 (= (+ (+ (- (- ?x63549 ?x63550) ?x63552) ?x63554) ?x63556) 0.0)))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63632 (* ?x63306 l_0_11_68)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63630 (* ?x63303 l_0_11_67)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63628 (* ?x63627 l_0_11_3)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63625 (* ?x63297 l_0_11_22)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63623 (* ?x63112 l_0_11_162)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63621 (* ?x63109 l_0_11_161)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63619 (* ?x63106 l_0_11_160)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63617 (* ?x63103 l_0_11_159)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63615 (* ?x63100 l_0_11_158)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63613 (* ?x63097 l_0_11_157)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63611 (* ?x63094 l_0_11_117)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63609 (* ?x63091 l_0_11_116)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63607 (* ?x63088 l_0_11_115)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63605 (* ?x63085 l_0_11_114)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63082 l_0_11_113)))
 (let ((?x63610 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x63593) ?x63605) ?x63607) ?x63609)))
 (let ((?x63624 (+ (+ (+ (+ (+ (+ (- ?x63610 ?x63611) ?x63613) ?x63615) ?x63617) ?x63619) ?x63621) ?x63623)))
 (= (+ (+ (- (- ?x63624 ?x63625) ?x63628) ?x63630) ?x63632) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63690 (* ?x63306 l_0_11_75)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63688 (* ?x63303 l_0_11_74)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63686 (* ?x63300 l_0_11_30)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63684 (* ?x63297 l_0_11_29)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63113 (* ?x63112 l_0_11_169)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63110 (* ?x63109 l_0_11_168)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63107 (* ?x63106 l_0_11_167)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63104 (* ?x63103 l_0_11_166)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63101 (* ?x63100 l_0_11_165)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63098 (* ?x63097 l_0_11_164)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63095 (* ?x63094 l_0_11_124)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63092 (* ?x63091 l_0_11_123)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63089 (* ?x63088 l_0_11_122)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63086 (* ?x63085 l_0_11_121)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63083 (* ?x63082 l_0_11_120)))
 (let ((?x63676 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_119) ?x63083) ?x63086) ?x63089) ?x63092)))
 (let ((?x63683 (+ (+ (+ (+ (+ (+ (- ?x63676 ?x63095) ?x63098) ?x63101) ?x63104) ?x63107) ?x63110) ?x63113)))
 (= (+ (+ (- (- ?x63683 ?x63684) ?x63686) ?x63688) ?x63690) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63729 (* ?x63306 l_0_11_83)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63727 (* ?x63303 l_0_11_82)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63725 (* ?x63300 l_0_11_38)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63723 (* ?x63297 l_0_11_37)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63721 (* ?x63112 l_0_11_177)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63719 (* ?x63109 l_0_11_176)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63717 (* ?x63106 l_0_11_175)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63715 (* ?x63103 l_0_11_174)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63713 (* ?x63100 l_0_11_173)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63711 (* ?x63097 l_0_11_172)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63709 (* ?x63094 l_0_11_132)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63707 (* ?x63091 l_0_11_131)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63705 (* ?x63088 l_0_11_130)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63703 (* ?x63085 l_0_11_129)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63701 (* ?x63082 l_0_11_128)))
 (let ((?x63708 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_127) ?x63701) ?x63703) ?x63705) ?x63707)))
 (let ((?x63722 (+ (+ (+ (+ (+ (+ (- ?x63708 ?x63709) ?x63711) ?x63713) ?x63715) ?x63717) ?x63719) ?x63721)))
 (= (+ (+ (- (- ?x63722 ?x63723) ?x63725) ?x63727) ?x63729) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63790 (* l_0_11_6 l_0_11_6)))
 (let ((?x63788 (* l_0_11_51 l_0_11_51)))
 (let ((?x63786 (* l_0_11_50 l_0_11_50)))
 (let ((?x63784 (* l_0_11_5 l_0_11_5)))
 (let ((?x63787 (+ (- (+ (* (- l_0_11_4) l_0_11_4) (* l_0_11_49 l_0_11_49)) ?x63784) ?x63786)))
 (= (- (+ ?x63787 ?x63788) ?x63790) 0.0)))))))
(assert
 (let ((?x63818 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63815 (* ?x63814 l_0_11_54)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63812 (* ?x63811 l_0_11_53)))
 (let ((?x63809 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63806 (* ?x63805 l_0_11_52)))
 (let ((?x63816 (+ (+ (- (+ (* (* (- 2.0) l_0_11_4) l_0_11_7) ?x63806) ?x63809) ?x63812) ?x63815)))
 (= (- ?x63816 ?x63818) 0.0)))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63852 (* ?x63814 l_0_11_58)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63850 (* ?x63811 l_0_11_57)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63848 (* ?x63805 l_0_11_56)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x63846 (* ?x63845 l_0_11_6)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63843 (* ?x63448 l_0_11_5)))
 (let ((?x63851 (+ (+ (- (- (* (* (- 2.0) l_0_11_11) l_0_11_4) ?x63843) ?x63846) ?x63848) ?x63850)))
 (= (+ ?x63851 ?x63852) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63872 (* ?x63814 l_0_11_63)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63870 (* ?x63811 l_0_11_62)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63868 (* ?x63805 l_0_11_61)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x63866 (* ?x62942 l_0_11_6)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53207 (* ?x62939 l_0_11_5)))
 (let ((?x63871 (+ (+ (- (- (* (* (- 2.0) l_0_11_16) l_0_11_4) ?x53207) ?x63866) ?x63868) ?x63870)))
 (= (+ ?x63871 ?x63872) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63906 (* ?x63814 l_0_11_69)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63904 (* ?x63811 l_0_11_68)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63902 (* ?x63805 l_0_11_67)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x63900 (* ?x63899 l_0_11_6)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63897 (* ?x63627 l_0_11_5)))
 (let ((?x63905 (+ (+ (- (- (* (* (- 2.0) l_0_11_22) l_0_11_4) ?x63897) ?x63900) ?x63902) ?x63904)))
 (= (+ ?x63905 ?x63906) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63940 (* ?x63814 l_0_11_76)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63938 (* ?x63811 l_0_11_75)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63936 (* ?x63805 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x63934 (* ?x63933 l_0_11_6)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x63931 (* ?x63930 l_0_11_5)))
 (let ((?x63939 (+ (+ (- (- (* (* (- 2.0) l_0_11_29) l_0_11_4) ?x63931) ?x63934) ?x63936) ?x63938)))
 (= (+ ?x63939 ?x63940) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63971 (* ?x63814 l_0_11_84)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63969 (* ?x63811 l_0_11_83)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63967 (* ?x63805 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x63965 (* ?x63964 l_0_11_6)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x63962 (* ?x63961 l_0_11_5)))
 (let ((?x63970 (+ (+ (- (- (* (* (- 2.0) l_0_11_37) l_0_11_4) ?x63962) ?x63965) ?x63967) ?x63969)))
 (= (+ ?x63970 ?x63971) 0.0)))))))))))))
(assert
 (let ((?x64005 (* l_0_11_9 l_0_11_9)))
 (let ((?x64003 (* l_0_11_8 l_0_11_8)))
 (let ((?x64001 (* l_0_11_7 l_0_11_7)))
 (let ((?x63999 (* l_0_11_55 l_0_11_55)))
 (let ((?x63997 (* l_0_11_54 l_0_11_54)))
 (let ((?x63995 (* l_0_11_53 l_0_11_53)))
 (let ((?x63996 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_52 l_0_11_52)) ?x63995)))
 (= (- (- (- (+ (+ ?x63996 ?x63997) ?x63999) ?x64001) ?x64003) ?x64005) 0.0)))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64037 (* ?x64036 l_0_11_59)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64034 (* ?x64033 l_0_11_58)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64031 (* ?x64030 l_0_11_57)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64028 (* ?x64027 l_0_11_56)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64025 (* ?x63845 l_0_11_9)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64023 (* ?x63448 l_0_11_8)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x64021 (* ?x63445 l_0_11_7)))
 (let ((?x64029 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_14) ?x64021) ?x64023) ?x64025) ?x64028)))
 (= (+ (+ (+ ?x64029 ?x64031) ?x64034) ?x64037) 0.0)))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64064 (* ?x64036 l_0_11_64)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64062 (* ?x64033 l_0_11_63)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64060 (* ?x64030 l_0_11_62)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64058 (* ?x64027 l_0_11_61)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64056 (* ?x62942 l_0_11_9)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53293 (* ?x62939 l_0_11_8)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x53254 (* ?x62931 l_0_11_7)))
 (let ((?x64059 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x53254) ?x53293) ?x64056) ?x64058)))
 (= (+ (+ (+ ?x64059 ?x64060) ?x64062) ?x64064) 0.0)))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x62990 (* ?x62989 l_0_11_79)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x62987 (* ?x62986 l_0_11_78)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x62984 (* ?x62983 l_0_11_77)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x62981 (* ?x62980 l_0_11_76)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x62978 (* ?x62977 l_0_11_75)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x62975 (* ?x62974 l_0_11_74)))
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64106 (* ?x64036 l_0_11_70)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64104 (* ?x64033 l_0_11_69)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64102 (* ?x64030 l_0_11_68)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64100 (* ?x64027 l_0_11_67)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64098 (* ?x63899 l_0_11_9)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64096 (* ?x63627 l_0_11_8)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64094 (* ?x64093 l_0_11_7)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x62952 (* ?x62951 l_0_11_34)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x62949 (* ?x62948 l_0_11_33)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x62946 (* ?x62945 l_0_11_32)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x62943 (* ?x62942 l_0_11_31)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x62940 (* ?x62939 l_0_11_30)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x62932 (* ?x62931 l_0_11_29)))
 (let ((?x64019 (* (- 2.0) l_0_11_10)))
 (let ((?x64086 (* ?x64019 l_0_11_25)))
 (let ((?x64095 (- (- (- (- (- (- (- ?x64086 ?x62932) ?x62940) ?x62943) ?x62946) ?x62949) ?x62952) ?x64094)))
 (let ((?x64108 (+ (+ (+ (+ (+ (- (- ?x64095 ?x64096) ?x64098) ?x64100) ?x64102) ?x64104) ?x64106) ?x62975)))
 (= (+ (+ (+ (+ (+ ?x64108 ?x62978) ?x62981) ?x62984) ?x62987) ?x62990) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64137 (* ?x64036 l_0_11_77)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64135 (* ?x64033 l_0_11_76)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64133 (* ?x64030 l_0_11_75)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64131 (* ?x64027 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64129 (* ?x63933 l_0_11_9)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64120 (* ?x63930 l_0_11_8)))
 (let ((?x64119 (* 2.0 l_0_11_29)))
 (let ((?x14494 (* ?x64119 l_0_11_7)))
 (let ((?x64132 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_32) ?x14494) ?x64120) ?x64129) ?x64131)))
 (= (+ (+ (+ ?x64132 ?x64133) ?x64135) ?x64137) 0.0)))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64173 (* ?x64036 l_0_11_85)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64171 (* ?x64033 l_0_11_84)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64169 (* ?x64030 l_0_11_83)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64167 (* ?x64027 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x64165 (* ?x63964 l_0_11_9)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x64156 (* ?x63961 l_0_11_8)))
 (let ((?x64151 (* 2.0 l_0_11_37)))
 (let ((?x64153 (* ?x64151 l_0_11_7)))
 (let ((?x64019 (* (- 2.0) l_0_11_10)))
 (let ((?x53368 (* ?x64019 l_0_11_40)))
 (let ((?x64174 (+ (+ (+ (+ (- (- (- ?x53368 ?x64153) ?x64156) ?x64165) ?x64167) ?x64169) ?x64171) ?x64173)))
 (= ?x64174 0.0)))))))))))))))))))
(assert
 (let ((?x64203 (* l_0_11_60 l_0_11_60)))
 (let ((?x64201 (* l_0_11_59 l_0_11_59)))
 (let ((?x64199 (* l_0_11_58 l_0_11_58)))
 (let ((?x64197 (* l_0_11_57 l_0_11_57)))
 (let ((?x64195 (* l_0_11_56 l_0_11_56)))
 (let ((?x64193 (* l_0_11_15 l_0_11_15)))
 (let ((?x64191 (* l_0_11_14 l_0_11_14)))
 (let ((?x64189 (* l_0_11_13 l_0_11_13)))
 (let ((?x64190 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x64189)))
 (let ((?x64204 (+ (+ (+ (+ (+ (- (- ?x64190 ?x64191) ?x64193) ?x64195) ?x64197) ?x64199) ?x64201) ?x64203)))
 (= ?x64204 0.0))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64246 (* ?x64245 l_0_11_65)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64243 (* ?x64242 l_0_11_64)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64240 (* ?x64239 l_0_11_63)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64237 (* ?x64236 l_0_11_62)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64234 (* ?x64233 l_0_11_61)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64231 (* ?x64230 l_0_11_20)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64228 (* ?x64227 l_0_11_19)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64225 (* ?x63845 l_0_11_18)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64223 (* ?x63448 l_0_11_17)))
 (let ((?x64232 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_16) ?x64223) ?x64225) ?x64228) ?x64231)))
 (= (+ (+ (+ (+ (+ ?x64232 ?x64234) ?x64237) ?x64240) ?x64243) ?x64246) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64296 (* ?x64245 l_0_11_71)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64294 (* ?x64242 l_0_11_70)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64292 (* ?x64239 l_0_11_69)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64290 (* ?x64236 l_0_11_68)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64288 (* ?x64233 l_0_11_67)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64286 (* ?x64230 l_0_11_26)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64276 (* ?x64227 l_0_11_25)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64273 (* ?x63845 l_0_11_24)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64269 (* ?x63448 l_0_11_23)))
 (let ((?x64287 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_22) ?x64269) ?x64273) ?x64276) ?x64286)))
 (= (+ (+ (+ (+ (+ ?x64287 ?x64288) ?x64290) ?x64292) ?x64294) ?x64296) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64329 (* ?x64245 l_0_11_78)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64327 (* ?x64242 l_0_11_77)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64325 (* ?x64239 l_0_11_76)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64323 (* ?x64236 l_0_11_75)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64321 (* ?x64233 l_0_11_74)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64319 (* ?x64230 l_0_11_33)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x53406 (* ?x64227 l_0_11_32)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x15679 (* ?x63845 l_0_11_31)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x53403 (* ?x63448 l_0_11_30)))
 (let ((?x64320 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_29) ?x53403) ?x15679) ?x53406) ?x64319)))
 (= (+ (+ (+ (+ (+ ?x64320 ?x64321) ?x64323) ?x64325) ?x64327) ?x64329) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64381 (* ?x64245 l_0_11_86)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64379 (* ?x64242 l_0_11_85)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64377 (* ?x64239 l_0_11_84)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64375 (* ?x64236 l_0_11_83)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64373 (* ?x64233 l_0_11_82)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64371 (* ?x64230 l_0_11_41)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64361 (* ?x64227 l_0_11_40)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64358 (* ?x63845 l_0_11_39)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64354 (* ?x63448 l_0_11_38)))
 (let ((?x64372 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_37) ?x64354) ?x64358) ?x64361) ?x64371)))
 (= (+ (+ (+ (+ (+ ?x64372 ?x64373) ?x64375) ?x64377) ?x64379) ?x64381) 0.0)))))))))))))))))))))
(assert
 (let ((?x64436 (* l_0_11_66 l_0_11_66)))
 (let ((?x64434 (* l_0_11_65 l_0_11_65)))
 (let ((?x64432 (* l_0_11_64 l_0_11_64)))
 (let ((?x64430 (* l_0_11_63 l_0_11_63)))
 (let ((?x64428 (* l_0_11_62 l_0_11_62)))
 (let ((?x64426 (* l_0_11_61 l_0_11_61)))
 (let ((?x64424 (* l_0_11_21 l_0_11_21)))
 (let ((?x64422 (* l_0_11_20 l_0_11_20)))
 (let ((?x64420 (* l_0_11_19 l_0_11_19)))
 (let ((?x64410 (* l_0_11_18 l_0_11_18)))
 (let ((?x64411 (- (- (* (- l_0_11_16) l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64410)))
 (let ((?x64433 (+ (+ (+ (+ (- (- (- ?x64411 ?x64420) ?x64422) ?x64424) ?x64426) ?x64428) ?x64430) ?x64432)))
 (= (+ (+ ?x64433 ?x64434) ?x64436) 0.0))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64480 (* ?x62989 l_0_11_72)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64478 (* ?x62986 l_0_11_71)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64476 (* ?x62983 l_0_11_70)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64474 (* ?x62980 l_0_11_69)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64472 (* ?x62977 l_0_11_68)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64470 (* ?x62974 l_0_11_67)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64468 (* ?x62951 l_0_11_27)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64466 (* ?x62948 l_0_11_26)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64464 (* ?x62945 l_0_11_25)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64462 (* ?x62942 l_0_11_24)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64460 (* ?x62939 l_0_11_23)))
 (let ((?x64467 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_22) ?x64460) ?x64462) ?x64464) ?x64466)))
 (let ((?x64481 (+ (+ (+ (+ (+ (+ (- ?x64467 ?x64468) ?x64470) ?x64472) ?x64474) ?x64476) ?x64478) ?x64480)))
 (= ?x64481 0.0))))))))))))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x62990 (* ?x62989 l_0_11_79)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x62987 (* ?x62986 l_0_11_78)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x62984 (* ?x62983 l_0_11_77)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x62981 (* ?x62980 l_0_11_76)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x62978 (* ?x62977 l_0_11_75)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x62975 (* ?x62974 l_0_11_74)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x62952 (* ?x62951 l_0_11_34)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x62949 (* ?x62948 l_0_11_33)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x62946 (* ?x62945 l_0_11_32)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x62943 (* ?x62942 l_0_11_31)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x62940 (* ?x62939 l_0_11_30)))
 (let ((?x15797 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_29) ?x62940) ?x62943) ?x62946) ?x62949)))
 (let ((?x64511 (+ (+ (+ (+ (+ (+ (- ?x15797 ?x62952) ?x62975) ?x62978) ?x62981) ?x62984) ?x62987) ?x62990)))
 (= ?x64511 0.0))))))))))))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64543 (* ?x62989 l_0_11_87)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64541 (* ?x62986 l_0_11_86)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64539 (* ?x62983 l_0_11_85)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64537 (* ?x62980 l_0_11_84)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64535 (* ?x62977 l_0_11_83)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64533 (* ?x62974 l_0_11_82)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64531 (* ?x62951 l_0_11_42)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64529 (* ?x62948 l_0_11_41)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64527 (* ?x62945 l_0_11_40)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64525 (* ?x62942 l_0_11_39)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64523 (* ?x62939 l_0_11_38)))
 (let ((?x64530 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_37) ?x64523) ?x64525) ?x64527) ?x64529)))
 (let ((?x64544 (+ (+ (+ (+ (+ (+ (- ?x64530 ?x64531) ?x64533) ?x64535) ?x64537) ?x64539) ?x64541) ?x64543)))
 (= ?x64544 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64613 (* l_0_11_73 l_0_11_73)))
 (let ((?x64611 (* l_0_11_72 l_0_11_72)))
 (let ((?x64609 (* l_0_11_71 l_0_11_71)))
 (let ((?x64607 (* l_0_11_70 l_0_11_70)))
 (let ((?x64605 (* l_0_11_69 l_0_11_69)))
 (let ((?x64603 (* l_0_11_68 l_0_11_68)))
 (let ((?x64601 (* l_0_11_67 l_0_11_67)))
 (let ((?x64599 (* l_0_11_28 l_0_11_28)))
 (let ((?x64597 (* l_0_11_27 l_0_11_27)))
 (let ((?x64595 (* l_0_11_26 l_0_11_26)))
 (let ((?x64584 (* l_0_11_25 l_0_11_25)))
 (let ((?x64581 (* l_0_11_24 l_0_11_24)))
 (let ((?x64583 (- (- (* (- l_0_11_22) l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64581)))
 (let ((?x64606 (+ (+ (+ (- (- (- (- ?x64583 ?x64584) ?x64595) ?x64597) ?x64599) ?x64601) ?x64603) ?x64605)))
 (= (+ (+ (+ (+ ?x64606 ?x64607) ?x64609) ?x64611) ?x64613) 0.0))))))))))))))))
(assert
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64679 (* ?x64678 l_0_11_80)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64676 (* ?x64675 l_0_11_79)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64673 (* ?x64672 l_0_11_78)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64670 (* ?x64669 l_0_11_77)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64667 (* ?x64666 l_0_11_76)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64664 (* ?x64663 l_0_11_75)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64661 (* ?x64660 l_0_11_74)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64658 (* ?x64657 l_0_11_35)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64655 (* ?x64654 l_0_11_34)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64652 (* ?x64651 l_0_11_33)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64649 (* ?x64648 l_0_11_32)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64646 (* ?x63899 l_0_11_31)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64644 (* ?x63627 l_0_11_30)))
 (let ((?x64653 (- (- (- (- (* (* (- 2.0) l_0_11_22) l_0_11_29) ?x64644) ?x64646) ?x64649) ?x64652)))
 (let ((?x64674 (+ (+ (+ (+ (+ (- (- ?x64653 ?x64655) ?x64658) ?x64661) ?x64664) ?x64667) ?x64670) ?x64673)))
 (= (+ (+ ?x64674 ?x64676) ?x64679) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64734 (* ?x64678 l_0_11_88)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64732 (* ?x64675 l_0_11_87)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64730 (* ?x64672 l_0_11_86)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64728 (* ?x64669 l_0_11_85)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64726 (* ?x64666 l_0_11_84)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64724 (* ?x64663 l_0_11_83)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64722 (* ?x64660 l_0_11_82)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64720 (* ?x64657 l_0_11_43)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64718 (* ?x64654 l_0_11_42)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64716 (* ?x64651 l_0_11_41)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64714 (* ?x64648 l_0_11_40)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64712 (* ?x63899 l_0_11_39)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64710 (* ?x63627 l_0_11_38)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64708 (* ?x64093 l_0_11_37)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63113 (* ?x63112 l_0_11_169)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63110 (* ?x63109 l_0_11_168)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63107 (* ?x63106 l_0_11_167)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63104 (* ?x63103 l_0_11_166)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63101 (* ?x63100 l_0_11_165)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63098 (* ?x63097 l_0_11_164)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63095 (* ?x63094 l_0_11_124)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63092 (* ?x63091 l_0_11_123)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63089 (* ?x63088 l_0_11_122)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63086 (* ?x63085 l_0_11_121)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63083 (* ?x63082 l_0_11_120)))
 (let ((?x63676 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_119) ?x63083) ?x63086) ?x63089) ?x63092)))
 (let ((?x63683 (+ (+ (+ (+ (+ (+ (- ?x63676 ?x63095) ?x63098) ?x63101) ?x63104) ?x63107) ?x63110) ?x63113)))
 (let ((?x64721 (- (- (- (- (- (- (- ?x63683 ?x64708) ?x64710) ?x64712) ?x64714) ?x64716) ?x64718) ?x64720)))
 (let ((?x64735 (+ (+ (+ (+ (+ (+ (+ ?x64721 ?x64722) ?x64724) ?x64726) ?x64728) ?x64730) ?x64732) ?x64734)))
 (= ?x64735 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64801 (* l_0_11_81 l_0_11_81)))
 (let ((?x64799 (* l_0_11_80 l_0_11_80)))
 (let ((?x64797 (* l_0_11_79 l_0_11_79)))
 (let ((?x64795 (* l_0_11_78 l_0_11_78)))
 (let ((?x64793 (* l_0_11_77 l_0_11_77)))
 (let ((?x64791 (* l_0_11_76 l_0_11_76)))
 (let ((?x64789 (* l_0_11_75 l_0_11_75)))
 (let ((?x64787 (* l_0_11_74 l_0_11_74)))
 (let ((?x64785 (* l_0_11_36 l_0_11_36)))
 (let ((?x64783 (* l_0_11_35 l_0_11_35)))
 (let ((?x64781 (* l_0_11_34 l_0_11_34)))
 (let ((?x64779 (* l_0_11_33 l_0_11_33)))
 (let ((?x64777 (* l_0_11_32 l_0_11_32)))
 (let ((?x64775 (* l_0_11_31 l_0_11_31)))
 (let ((?x64776 (- (- (* (- l_0_11_29) l_0_11_29) (* l_0_11_30 l_0_11_30)) ?x64775)))
 (let ((?x64790 (+ (+ (- (- (- (- (- ?x64776 ?x64777) ?x64779) ?x64781) ?x64783) ?x64785) ?x64787) ?x64789)))
 (= (+ (+ (+ (+ (+ (+ ?x64790 ?x64791) ?x64793) ?x64795) ?x64797) ?x64799) ?x64801) 0.0))))))))))))))))))
(assert
 (let ((?x64868 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64865 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64862 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64859 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64856 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64853 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64850 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64847 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64844 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64841 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64838 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64835 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64832 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64829 (* ?x63933 l_0_11_39)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64827 (* ?x63930 l_0_11_38)))
 (let ((?x64836 (- (- (- (- (* (* (- 2.0) l_0_11_29) l_0_11_37) ?x64827) ?x64829) ?x64832) ?x64835)))
 (let ((?x64857 (+ (+ (+ (+ (- (- (- ?x64836 ?x64838) ?x64841) ?x64844) ?x64847) ?x64850) ?x64853) ?x64856)))
 (= (+ (+ (+ (+ ?x64857 ?x64859) ?x64862) ?x64865) ?x64868) 0.0)))))))))))))))))))))
(assert
 (let ((?x64949 (* l_0_11_90 l_0_11_90)))
 (let ((?x64947 (* l_0_11_89 l_0_11_89)))
 (let ((?x64945 (* l_0_11_88 l_0_11_88)))
 (let ((?x64943 (* l_0_11_87 l_0_11_87)))
 (let ((?x64941 (* l_0_11_86 l_0_11_86)))
 (let ((?x64939 (* l_0_11_85 l_0_11_85)))
 (let ((?x64937 (* l_0_11_84 l_0_11_84)))
 (let ((?x64935 (* l_0_11_83 l_0_11_83)))
 (let ((?x64933 (* l_0_11_82 l_0_11_82)))
 (let ((?x64931 (* l_0_11_45 l_0_11_45)))
 (let ((?x64929 (* l_0_11_44 l_0_11_44)))
 (let ((?x64927 (* l_0_11_43 l_0_11_43)))
 (let ((?x64925 (* l_0_11_42 l_0_11_42)))
 (let ((?x64912 (* l_0_11_41 l_0_11_41)))
 (let ((?x64909 (* l_0_11_40 l_0_11_40)))
 (let ((?x64905 (* l_0_11_39 l_0_11_39)))
 (let ((?x64907 (- (- (* (- l_0_11_37) l_0_11_37) (* l_0_11_38 l_0_11_38)) ?x64905)))
 (let ((?x64934 (+ (- (- (- (- (- (- ?x64907 ?x64909) ?x64912) ?x64925) ?x64927) ?x64929) ?x64931) ?x64933)))
 (let ((?x64948 (+ (+ (+ (+ (+ (+ (+ ?x64934 ?x64935) ?x64937) ?x64939) ?x64941) ?x64943) ?x64945) ?x64947)))
 (= (+ ?x64948 ?x64949) 0.0)))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62917 (* ?x62916 l_0_11_47)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x62909 (* ?x41193 l_0_11_2)))
 (= (+ ?x62909 ?x62917) 0.0))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64106 (* ?x64036 l_0_11_70)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64104 (* ?x64033 l_0_11_69)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64102 (* ?x64030 l_0_11_68)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64100 (* ?x64027 l_0_11_67)))
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62972 (* ?x62916 l_0_11_49)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64098 (* ?x63899 l_0_11_9)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x64997 (* ?x64996 l_0_11_250)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x64994 (* ?x64993 l_0_11_249)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x64991 (* ?x64990 l_0_11_248)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x64988 (* ?x64987 l_0_11_247)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64096 (* ?x63627 l_0_11_8)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64094 (* ?x64093 l_0_11_7)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x62929 (* ?x41193 l_0_11_4)))
 (let ((?x64989 (+ (+ (+ (+ ?x62929 (* (* 2.0 l_0_11_10) l_0_11_25)) ?x64094) ?x64096) ?x64988)))
 (let ((?x65002 (- (- (+ (+ (+ (+ (+ ?x64989 ?x64991) ?x64994) ?x64997) ?x64098) ?x62972) ?x64100) ?x64102)))
 (= (- (- ?x65002 ?x64104) ?x64106) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63070 (* ?x62916 l_0_11_52)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) ?x63070) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63121 (* ?x62916 l_0_11_56)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x64997 (* ?x64996 l_0_11_250)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x64994 (* ?x64993 l_0_11_249)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x64991 (* ?x64990 l_0_11_248)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x64988 (* ?x64987 l_0_11_247)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65030 (* ?x63370 l_0_11_160)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65028 (* ?x63367 l_0_11_159)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65026 (* ?x63364 l_0_11_158)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65024 (* ?x63361 l_0_11_157)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x65022 (* ?x65021 l_0_11_99)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x65019 (* ?x65018 l_0_11_98)))
 (let ((?x42311 (* 2.0 l_0_11_112)))
 (let ((?x65016 (* ?x42311 l_0_11_97)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x63074 (* ?x41193 l_0_11_11)))
 (let ((?x65023 (+ (+ (+ (+ ?x63074 (* (* 2.0 l_0_11_100) l_0_11_115)) ?x65016) ?x65019) ?x65022)))
 (let ((?x65034 (- (- (- (- (- (- (- ?x65023 ?x65024) ?x65026) ?x65028) ?x65030) ?x64988) ?x64991) ?x64994)))
 (= (+ (- ?x65034 ?x64997) ?x63121) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63189 (* ?x62916 l_0_11_61)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x63189) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63205 (* ?x62916 l_0_11_67)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_22) ?x63205) 0.0))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63215 (* ?x62916 l_0_11_74)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_29) ?x63215) 0.0))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65068 (* ?x65067 l_0_11_97)))
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63225 (* ?x62916 l_0_11_82)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x29689 (* ?x62913 l_0_11_142)))
 (let ((?x41193 (* (- 2.0) l_0_11_1)))
 (let ((?x63223 (* ?x41193 l_0_11_37)))
 (= (- (+ (+ ?x63223 ?x29689) ?x63225) ?x65068) 0.0))))))))))
(assert
 (let ((?x63254 (* l_0_11_48 l_0_11_48)))
 (let ((?x63252 (* l_0_11_47 l_0_11_47)))
 (let ((?x65084 (+ (+ (- (* (- l_0_11_2) l_0_11_2) (* l_0_11_3 l_0_11_3)) ?x63252) ?x63254)))
 (= ?x65084 0.0)))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63307 (* ?x63306 l_0_11_50)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63304 (* ?x63303 l_0_11_49)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63301 (* ?x63300 l_0_11_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_4) ?x63301) ?x63304) ?x63307) 0.0))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63379 (* ?x63306 l_0_11_53)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63377 (* ?x63303 l_0_11_52)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63375 (* ?x63300 l_0_11_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_7) ?x63375) ?x63377) ?x63379) 0.0))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63468 (* ?x63306 l_0_11_57)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63466 (* ?x63303 l_0_11_56)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63449 (* ?x63448 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_11) l_0_11_2) ?x63449) ?x63466) ?x63468) 0.0))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63556 (* ?x63306 l_0_11_62)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63554 (* ?x63303 l_0_11_61)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x63552 (* ?x62939 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_16) l_0_11_2) ?x63552) ?x63554) ?x63556) 0.0))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63632 (* ?x63306 l_0_11_68)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63630 (* ?x63303 l_0_11_67)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63628 (* ?x63627 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_22) ?x63628) ?x63630) ?x63632) 0.0))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63690 (* ?x63306 l_0_11_75)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63688 (* ?x63303 l_0_11_74)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63686 (* ?x63300 l_0_11_30)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63684 (* ?x63297 l_0_11_29)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65030 (* ?x63370 l_0_11_160)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65028 (* ?x63367 l_0_11_159)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65026 (* ?x63364 l_0_11_158)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65024 (* ?x63361 l_0_11_157)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x65022 (* ?x65021 l_0_11_99)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x65019 (* ?x65018 l_0_11_98)))
 (let ((?x42311 (* 2.0 l_0_11_112)))
 (let ((?x65016 (* ?x42311 l_0_11_97)))
 (let ((?x65133 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_115) ?x65016) ?x65019) ?x65022) ?x65024)))
 (let ((?x65136 (+ (+ (+ ?x65133 ?x65026) ?x65028) ?x65030)))
 (= (+ (+ (- (- ?x65136 ?x63684) ?x63686) ?x63688) ?x63690) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x65151 (* ?x65150 l_0_11_98)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x65148 (* ?x65147 l_0_11_97)))
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63729 (* ?x63306 l_0_11_83)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63727 (* ?x63303 l_0_11_82)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63725 (* ?x63300 l_0_11_38)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63723 (* ?x63297 l_0_11_37)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x16271 (* ?x63245 l_0_11_143)))
 (let ((?x16309 (+ (* (* 2.0 l_0_11_137) l_0_11_142) ?x16271)))
 (= (- (- (+ (+ (- (- ?x16309 ?x63723) ?x63725) ?x63727) ?x63729) ?x65148) ?x65151) 0.0)))))))))))))))))
(assert
 (let ((?x63790 (* l_0_11_6 l_0_11_6)))
 (let ((?x63788 (* l_0_11_51 l_0_11_51)))
 (let ((?x63786 (* l_0_11_50 l_0_11_50)))
 (let ((?x63784 (* l_0_11_5 l_0_11_5)))
 (let ((?x63787 (+ (- (+ (* (- l_0_11_4) l_0_11_4) (* l_0_11_49 l_0_11_49)) ?x63784) ?x63786)))
 (= (- (+ ?x63787 ?x63788) ?x63790) 0.0)))))))
(assert
 (let ((?x63818 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63815 (* ?x63814 l_0_11_54)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63812 (* ?x63811 l_0_11_53)))
 (let ((?x63809 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63806 (* ?x63805 l_0_11_52)))
 (let ((?x63816 (+ (+ (- (+ (* (* (- 2.0) l_0_11_4) l_0_11_7) ?x63806) ?x63809) ?x63812) ?x63815)))
 (= (- ?x63816 ?x63818) 0.0)))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63852 (* ?x63814 l_0_11_58)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63850 (* ?x63811 l_0_11_57)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63848 (* ?x63805 l_0_11_56)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x63846 (* ?x63845 l_0_11_6)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63843 (* ?x63448 l_0_11_5)))
 (let ((?x63851 (+ (+ (- (- (* (* (- 2.0) l_0_11_11) l_0_11_4) ?x63843) ?x63846) ?x63848) ?x63850)))
 (= (+ ?x63851 ?x63852) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63872 (* ?x63814 l_0_11_63)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63870 (* ?x63811 l_0_11_62)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63868 (* ?x63805 l_0_11_61)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x63866 (* ?x62942 l_0_11_6)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53207 (* ?x62939 l_0_11_5)))
 (let ((?x63871 (+ (+ (- (- (* (* (- 2.0) l_0_11_16) l_0_11_4) ?x53207) ?x63866) ?x63868) ?x63870)))
 (= (+ ?x63871 ?x63872) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63906 (* ?x63814 l_0_11_69)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63904 (* ?x63811 l_0_11_68)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63902 (* ?x63805 l_0_11_67)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x63900 (* ?x63899 l_0_11_6)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63897 (* ?x63627 l_0_11_5)))
 (let ((?x63905 (+ (+ (- (- (* (* (- 2.0) l_0_11_22) l_0_11_4) ?x63897) ?x63900) ?x63902) ?x63904)))
 (= (+ ?x63905 ?x63906) 0.0)))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63940 (* ?x63814 l_0_11_76)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63938 (* ?x63811 l_0_11_75)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63936 (* ?x63805 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x63934 (* ?x63933 l_0_11_6)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x63931 (* ?x63930 l_0_11_5)))
 (let ((?x63939 (+ (+ (- (- (* (* (- 2.0) l_0_11_29) l_0_11_4) ?x63931) ?x63934) ?x63936) ?x63938)))
 (= (+ ?x63939 ?x63940) 0.0)))))))))))))
(assert
 (let ((?x65189 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x65186 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x65183 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63971 (* ?x63814 l_0_11_84)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63969 (* ?x63811 l_0_11_83)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63967 (* ?x63805 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x63965 (* ?x63964 l_0_11_6)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x63962 (* ?x63961 l_0_11_5)))
 (let ((?x64151 (* 2.0 l_0_11_37)))
 (let ((?x65175 (* ?x64151 l_0_11_4)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x65173 (* ?x63294 l_0_11_144)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x65171 (* ?x63291 l_0_11_143)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x65170 (* ?x63288 l_0_11_142)))
 (let ((?x65174 (+ (+ ?x65170 ?x65171) ?x65173)))
 (let ((?x65184 (- (+ (+ (+ (- (- (- ?x65174 ?x65175) ?x63962) ?x63965) ?x63967) ?x63969) ?x63971) ?x65183)))
 (= (- (- ?x65184 ?x65186) ?x65189) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x64005 (* l_0_11_9 l_0_11_9)))
 (let ((?x64003 (* l_0_11_8 l_0_11_8)))
 (let ((?x64001 (* l_0_11_7 l_0_11_7)))
 (let ((?x63999 (* l_0_11_55 l_0_11_55)))
 (let ((?x63997 (* l_0_11_54 l_0_11_54)))
 (let ((?x63995 (* l_0_11_53 l_0_11_53)))
 (let ((?x63996 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_52 l_0_11_52)) ?x63995)))
 (= (- (- (- (+ (+ ?x63996 ?x63997) ?x63999) ?x64001) ?x64003) ?x64005) 0.0)))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64037 (* ?x64036 l_0_11_59)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64034 (* ?x64033 l_0_11_58)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64031 (* ?x64030 l_0_11_57)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64028 (* ?x64027 l_0_11_56)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64025 (* ?x63845 l_0_11_9)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64023 (* ?x63448 l_0_11_8)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x64021 (* ?x63445 l_0_11_7)))
 (let ((?x64029 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_14) ?x64021) ?x64023) ?x64025) ?x64028)))
 (= (+ (+ (+ ?x64029 ?x64031) ?x64034) ?x64037) 0.0)))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64064 (* ?x64036 l_0_11_64)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64062 (* ?x64033 l_0_11_63)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64060 (* ?x64030 l_0_11_62)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64058 (* ?x64027 l_0_11_61)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64056 (* ?x62942 l_0_11_9)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53293 (* ?x62939 l_0_11_8)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x53254 (* ?x62931 l_0_11_7)))
 (let ((?x64059 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x53254) ?x53293) ?x64056) ?x64058)))
 (= (+ (+ (+ ?x64059 ?x64060) ?x64062) ?x64064) 0.0)))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64106 (* ?x64036 l_0_11_70)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64104 (* ?x64033 l_0_11_69)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64102 (* ?x64030 l_0_11_68)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64100 (* ?x64027 l_0_11_67)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64098 (* ?x63899 l_0_11_9)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64096 (* ?x63627 l_0_11_8)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64094 (* ?x64093 l_0_11_7)))
 (let ((?x64019 (* (- 2.0) l_0_11_10)))
 (let ((?x64086 (* ?x64019 l_0_11_25)))
 (let ((?x65227 (+ (+ (+ (+ (- (- (- ?x64086 ?x64094) ?x64096) ?x64098) ?x64100) ?x64102) ?x64104) ?x64106)))
 (= ?x65227 0.0)))))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64137 (* ?x64036 l_0_11_77)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64135 (* ?x64033 l_0_11_76)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64133 (* ?x64030 l_0_11_75)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64131 (* ?x64027 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64129 (* ?x63933 l_0_11_9)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64120 (* ?x63930 l_0_11_8)))
 (let ((?x64119 (* 2.0 l_0_11_29)))
 (let ((?x14494 (* ?x64119 l_0_11_7)))
 (let ((?x64132 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_32) ?x14494) ?x64120) ?x64129) ?x64131)))
 (= (+ (+ (+ ?x64132 ?x64133) ?x64135) ?x64137) 0.0)))))))))))))))))
(assert
 (let ((?x65258 (* l_0_11_99 l_0_11_99)))
 (let ((?x65256 (* l_0_11_98 l_0_11_98)))
 (let ((?x65254 (* l_0_11_97 l_0_11_97)))
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64173 (* ?x64036 l_0_11_85)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64171 (* ?x64033 l_0_11_84)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64169 (* ?x64030 l_0_11_83)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64167 (* ?x64027 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x64165 (* ?x63964 l_0_11_9)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x64156 (* ?x63961 l_0_11_8)))
 (let ((?x64151 (* 2.0 l_0_11_37)))
 (let ((?x64153 (* ?x64151 l_0_11_7)))
 (let ((?x65245 (* l_0_11_145 l_0_11_145)))
 (let ((?x65243 (* l_0_11_144 l_0_11_144)))
 (let ((?x65241 (* l_0_11_143 l_0_11_143)))
 (let ((?x65239 (* l_0_11_142 l_0_11_142)))
 (let ((?x65235 (* l_0_11_100 l_0_11_100)))
 (let ((?x64019 (* (- 2.0) l_0_11_10)))
 (let ((?x53368 (* ?x64019 l_0_11_40)))
 (let ((?x65248 (- (- (+ (+ (+ (+ (- ?x53368 ?x65235) ?x65239) ?x65241) ?x65243) ?x65245) ?x64153) ?x64156)))
 (let ((?x65257 (- (- (+ (+ (+ (+ (- ?x65248 ?x64165) ?x64167) ?x64169) ?x64171) ?x64173) ?x65254) ?x65256)))
 (= (- ?x65257 ?x65258) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x64203 (* l_0_11_60 l_0_11_60)))
 (let ((?x64201 (* l_0_11_59 l_0_11_59)))
 (let ((?x64199 (* l_0_11_58 l_0_11_58)))
 (let ((?x64197 (* l_0_11_57 l_0_11_57)))
 (let ((?x64195 (* l_0_11_56 l_0_11_56)))
 (let ((?x64193 (* l_0_11_15 l_0_11_15)))
 (let ((?x64191 (* l_0_11_14 l_0_11_14)))
 (let ((?x64189 (* l_0_11_13 l_0_11_13)))
 (let ((?x64190 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x64189)))
 (let ((?x64204 (+ (+ (+ (+ (+ (- (- ?x64190 ?x64191) ?x64193) ?x64195) ?x64197) ?x64199) ?x64201) ?x64203)))
 (= ?x64204 0.0))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64246 (* ?x64245 l_0_11_65)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64243 (* ?x64242 l_0_11_64)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64240 (* ?x64239 l_0_11_63)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64237 (* ?x64236 l_0_11_62)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64234 (* ?x64233 l_0_11_61)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64231 (* ?x64230 l_0_11_20)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64228 (* ?x64227 l_0_11_19)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64225 (* ?x63845 l_0_11_18)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64223 (* ?x63448 l_0_11_17)))
 (let ((?x64232 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_16) ?x64223) ?x64225) ?x64228) ?x64231)))
 (= (+ (+ (+ (+ (+ ?x64232 ?x64234) ?x64237) ?x64240) ?x64243) ?x64246) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64296 (* ?x64245 l_0_11_71)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64294 (* ?x64242 l_0_11_70)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64292 (* ?x64239 l_0_11_69)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64290 (* ?x64236 l_0_11_68)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64288 (* ?x64233 l_0_11_67)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64286 (* ?x64230 l_0_11_26)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64276 (* ?x64227 l_0_11_25)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64273 (* ?x63845 l_0_11_24)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64269 (* ?x63448 l_0_11_23)))
 (let ((?x64287 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_22) ?x64269) ?x64273) ?x64276) ?x64286)))
 (= (+ (+ (+ (+ (+ ?x64287 ?x64288) ?x64290) ?x64292) ?x64294) ?x64296) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64329 (* ?x64245 l_0_11_78)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64327 (* ?x64242 l_0_11_77)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64325 (* ?x64239 l_0_11_76)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64323 (* ?x64236 l_0_11_75)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64321 (* ?x64233 l_0_11_74)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64319 (* ?x64230 l_0_11_33)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x53406 (* ?x64227 l_0_11_32)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x15679 (* ?x63845 l_0_11_31)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x53403 (* ?x63448 l_0_11_30)))
 (let ((?x64320 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_29) ?x53403) ?x15679) ?x53406) ?x64319)))
 (= (+ (+ (+ (+ (+ ?x64320 ?x64321) ?x64323) ?x64325) ?x64327) ?x64329) 0.0)))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64381 (* ?x64245 l_0_11_86)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64379 (* ?x64242 l_0_11_85)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64377 (* ?x64239 l_0_11_84)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64375 (* ?x64236 l_0_11_83)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64373 (* ?x64233 l_0_11_82)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64371 (* ?x64230 l_0_11_41)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65293 (* ?x63370 l_0_11_149)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65291 (* ?x63367 l_0_11_148)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65289 (* ?x63364 l_0_11_147)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65287 (* ?x63361 l_0_11_146)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64361 (* ?x64227 l_0_11_40)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64358 (* ?x63845 l_0_11_39)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64354 (* ?x63448 l_0_11_38)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x65282 (* ?x63445 l_0_11_37)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x65280 (* ?x63436 l_0_11_99)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x42441 (* ?x63424 l_0_11_98)))
 (let ((?x65278 (* 2.0 l_0_11_101)))
 (let ((?x29907 (* ?x65278 l_0_11_97)))
 (let ((?x65281 (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_104) ?x29907) ?x42441) ?x65280)))
 (let ((?x65292 (+ (+ (+ (- (- (- (- ?x65281 ?x65282) ?x64354) ?x64358) ?x64361) ?x65287) ?x65289) ?x65291)))
 (let ((?x65300 (+ (+ (+ (+ (+ (- (+ ?x65292 ?x65293) ?x64371) ?x64373) ?x64375) ?x64377) ?x64379) ?x64381)))
 (= ?x65300 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64436 (* l_0_11_66 l_0_11_66)))
 (let ((?x64434 (* l_0_11_65 l_0_11_65)))
 (let ((?x64432 (* l_0_11_64 l_0_11_64)))
 (let ((?x64430 (* l_0_11_63 l_0_11_63)))
 (let ((?x64428 (* l_0_11_62 l_0_11_62)))
 (let ((?x64426 (* l_0_11_61 l_0_11_61)))
 (let ((?x64424 (* l_0_11_21 l_0_11_21)))
 (let ((?x64422 (* l_0_11_20 l_0_11_20)))
 (let ((?x64420 (* l_0_11_19 l_0_11_19)))
 (let ((?x64410 (* l_0_11_18 l_0_11_18)))
 (let ((?x64411 (- (- (* (- l_0_11_16) l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64410)))
 (let ((?x64433 (+ (+ (+ (+ (- (- (- ?x64411 ?x64420) ?x64422) ?x64424) ?x64426) ?x64428) ?x64430) ?x64432)))
 (= (+ (+ ?x64433 ?x64434) ?x64436) 0.0))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64480 (* ?x62989 l_0_11_72)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64478 (* ?x62986 l_0_11_71)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64476 (* ?x62983 l_0_11_70)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64474 (* ?x62980 l_0_11_69)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64472 (* ?x62977 l_0_11_68)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64470 (* ?x62974 l_0_11_67)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64468 (* ?x62951 l_0_11_27)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64466 (* ?x62948 l_0_11_26)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64464 (* ?x62945 l_0_11_25)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64462 (* ?x62942 l_0_11_24)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64460 (* ?x62939 l_0_11_23)))
 (let ((?x64467 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_22) ?x64460) ?x64462) ?x64464) ?x64466)))
 (let ((?x64481 (+ (+ (+ (+ (+ (+ (- ?x64467 ?x64468) ?x64470) ?x64472) ?x64474) ?x64476) ?x64478) ?x64480)))
 (= ?x64481 0.0))))))))))))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64543 (* ?x62989 l_0_11_87)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64541 (* ?x62986 l_0_11_86)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64539 (* ?x62983 l_0_11_85)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64537 (* ?x62980 l_0_11_84)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64535 (* ?x62977 l_0_11_83)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64533 (* ?x62974 l_0_11_82)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64531 (* ?x62951 l_0_11_42)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64529 (* ?x62948 l_0_11_41)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64527 (* ?x62945 l_0_11_40)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64525 (* ?x62942 l_0_11_39)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64523 (* ?x62939 l_0_11_38)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x29870 (* ?x62931 l_0_11_37)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x63371 (* ?x63370 l_0_11_154)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x63368 (* ?x63367 l_0_11_153)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x63365 (* ?x63364 l_0_11_152)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x63362 (* ?x63361 l_0_11_151)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63359 (* ?x63085 l_0_11_99)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63357 (* ?x63082 l_0_11_98)))
 (let ((?x62910 (* 2.0 l_0_11_106)))
 (let ((?x63347 (* ?x62910 l_0_11_97)))
 (let ((?x63363 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_109) ?x63347) ?x63357) ?x63359) ?x63362)))
 (let ((?x63372 (+ (+ (+ ?x63363 ?x63365) ?x63368) ?x63371)))
 (let ((?x65344 (+ (- (- (- (- (- (- ?x63372 ?x29870) ?x64523) ?x64525) ?x64527) ?x64529) ?x64531) ?x64533)))
 (= (+ (+ (+ (+ (+ ?x65344 ?x64535) ?x64537) ?x64539) ?x64541) ?x64543) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64613 (* l_0_11_73 l_0_11_73)))
 (let ((?x64611 (* l_0_11_72 l_0_11_72)))
 (let ((?x64609 (* l_0_11_71 l_0_11_71)))
 (let ((?x64607 (* l_0_11_70 l_0_11_70)))
 (let ((?x64605 (* l_0_11_69 l_0_11_69)))
 (let ((?x64603 (* l_0_11_68 l_0_11_68)))
 (let ((?x64601 (* l_0_11_67 l_0_11_67)))
 (let ((?x64599 (* l_0_11_28 l_0_11_28)))
 (let ((?x64597 (* l_0_11_27 l_0_11_27)))
 (let ((?x64595 (* l_0_11_26 l_0_11_26)))
 (let ((?x64584 (* l_0_11_25 l_0_11_25)))
 (let ((?x64581 (* l_0_11_24 l_0_11_24)))
 (let ((?x64583 (- (- (* (- l_0_11_22) l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64581)))
 (let ((?x64606 (+ (+ (+ (- (- (- (- ?x64583 ?x64584) ?x64595) ?x64597) ?x64599) ?x64601) ?x64603) ?x64605)))
 (= (+ (+ (+ (+ ?x64606 ?x64607) ?x64609) ?x64611) ?x64613) 0.0))))))))))))))))
(assert
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64679 (* ?x64678 l_0_11_80)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64676 (* ?x64675 l_0_11_79)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64673 (* ?x64672 l_0_11_78)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64670 (* ?x64669 l_0_11_77)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64667 (* ?x64666 l_0_11_76)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64664 (* ?x64663 l_0_11_75)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64661 (* ?x64660 l_0_11_74)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64658 (* ?x64657 l_0_11_35)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64655 (* ?x64654 l_0_11_34)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64652 (* ?x64651 l_0_11_33)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64649 (* ?x64648 l_0_11_32)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64646 (* ?x63899 l_0_11_31)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64644 (* ?x63627 l_0_11_30)))
 (let ((?x64653 (- (- (- (- (* (* (- 2.0) l_0_11_22) l_0_11_29) ?x64644) ?x64646) ?x64649) ?x64652)))
 (let ((?x64674 (+ (+ (+ (+ (+ (- (- ?x64653 ?x64655) ?x64658) ?x64661) ?x64664) ?x64667) ?x64670) ?x64673)))
 (= (+ (+ ?x64674 ?x64676) ?x64679) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64734 (* ?x64678 l_0_11_88)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64732 (* ?x64675 l_0_11_87)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64730 (* ?x64672 l_0_11_86)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64728 (* ?x64669 l_0_11_85)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64726 (* ?x64666 l_0_11_84)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64724 (* ?x64663 l_0_11_83)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64722 (* ?x64660 l_0_11_82)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64720 (* ?x64657 l_0_11_43)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64718 (* ?x64654 l_0_11_42)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64716 (* ?x64651 l_0_11_41)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64714 (* ?x64648 l_0_11_40)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64712 (* ?x63899 l_0_11_39)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64710 (* ?x63627 l_0_11_38)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64708 (* ?x64093 l_0_11_37)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65030 (* ?x63370 l_0_11_160)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65028 (* ?x63367 l_0_11_159)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65026 (* ?x63364 l_0_11_158)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65024 (* ?x63361 l_0_11_157)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x65022 (* ?x65021 l_0_11_99)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x65019 (* ?x65018 l_0_11_98)))
 (let ((?x42311 (* 2.0 l_0_11_112)))
 (let ((?x65016 (* ?x42311 l_0_11_97)))
 (let ((?x65133 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_115) ?x65016) ?x65019) ?x65022) ?x65024)))
 (let ((?x65136 (+ (+ (+ ?x65133 ?x65026) ?x65028) ?x65030)))
 (let ((?x65360 (- (- (- (- (- (- (- ?x65136 ?x64708) ?x64710) ?x64712) ?x64714) ?x64716) ?x64718) ?x64720)))
 (let ((?x65367 (+ (+ (+ (+ (+ (+ (+ ?x65360 ?x64722) ?x64724) ?x64726) ?x64728) ?x64730) ?x64732) ?x64734)))
 (= ?x65367 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64801 (* l_0_11_81 l_0_11_81)))
 (let ((?x64799 (* l_0_11_80 l_0_11_80)))
 (let ((?x64797 (* l_0_11_79 l_0_11_79)))
 (let ((?x64795 (* l_0_11_78 l_0_11_78)))
 (let ((?x64793 (* l_0_11_77 l_0_11_77)))
 (let ((?x64791 (* l_0_11_76 l_0_11_76)))
 (let ((?x64789 (* l_0_11_75 l_0_11_75)))
 (let ((?x64787 (* l_0_11_74 l_0_11_74)))
 (let ((?x64785 (* l_0_11_36 l_0_11_36)))
 (let ((?x64783 (* l_0_11_35 l_0_11_35)))
 (let ((?x64781 (* l_0_11_34 l_0_11_34)))
 (let ((?x64779 (* l_0_11_33 l_0_11_33)))
 (let ((?x64777 (* l_0_11_32 l_0_11_32)))
 (let ((?x64775 (* l_0_11_31 l_0_11_31)))
 (let ((?x64776 (- (- (* (- l_0_11_29) l_0_11_29) (* l_0_11_30 l_0_11_30)) ?x64775)))
 (let ((?x64790 (+ (+ (- (- (- (- (- ?x64776 ?x64777) ?x64779) ?x64781) ?x64783) ?x64785) ?x64787) ?x64789)))
 (= (+ (+ (+ (+ (+ (+ ?x64790 ?x64791) ?x64793) ?x64795) ?x64797) ?x64799) ?x64801) 0.0))))))))))))))))))
(assert
 (let ((?x64868 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64865 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64862 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64859 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64856 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64853 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64850 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64847 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64844 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64841 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64838 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64835 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64832 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64829 (* ?x63933 l_0_11_39)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64827 (* ?x63930 l_0_11_38)))
 (let ((?x64119 (* 2.0 l_0_11_29)))
 (let ((?x65397 (* ?x64119 l_0_11_37)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65395 (* ?x63370 l_0_11_167)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65393 (* ?x63367 l_0_11_166)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65391 (* ?x63364 l_0_11_165)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65389 (* ?x63361 l_0_11_164)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x65387 (* ?x65386 l_0_11_99)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x65384 (* ?x65383 l_0_11_98)))
 (let ((?x16372 (* 2.0 l_0_11_119)))
 (let ((?x29912 (* ?x16372 l_0_11_97)))
 (let ((?x65390 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_122) ?x29912) ?x65384) ?x65387) ?x65389)))
 (let ((?x65396 (+ (+ (+ ?x65390 ?x65391) ?x65393) ?x65395)))
 (let ((?x65404 (- (- (- (- (- (- (- ?x65396 ?x65397) ?x64827) ?x64829) ?x64832) ?x64835) ?x64838) ?x64841)))
 (let ((?x65411 (+ (+ (+ (+ (+ (+ (- ?x65404 ?x64844) ?x64847) ?x64850) ?x64853) ?x64856) ?x64859) ?x64862)))
 (= (+ (+ ?x65411 ?x64865) ?x64868) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64949 (* l_0_11_90 l_0_11_90)))
 (let ((?x64947 (* l_0_11_89 l_0_11_89)))
 (let ((?x64945 (* l_0_11_88 l_0_11_88)))
 (let ((?x64943 (* l_0_11_87 l_0_11_87)))
 (let ((?x64941 (* l_0_11_86 l_0_11_86)))
 (let ((?x64939 (* l_0_11_85 l_0_11_85)))
 (let ((?x64937 (* l_0_11_84 l_0_11_84)))
 (let ((?x64935 (* l_0_11_83 l_0_11_83)))
 (let ((?x64933 (* l_0_11_82 l_0_11_82)))
 (let ((?x64931 (* l_0_11_45 l_0_11_45)))
 (let ((?x64929 (* l_0_11_44 l_0_11_44)))
 (let ((?x64927 (* l_0_11_43 l_0_11_43)))
 (let ((?x64925 (* l_0_11_42 l_0_11_42)))
 (let ((?x64912 (* l_0_11_41 l_0_11_41)))
 (let ((?x64909 (* l_0_11_40 l_0_11_40)))
 (let ((?x64905 (* l_0_11_39 l_0_11_39)))
 (let ((?x64901 (* l_0_11_38 l_0_11_38)))
 (let ((?x64953 (* l_0_11_37 l_0_11_37)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65455 (* ?x63370 l_0_11_175)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65453 (* ?x63367 l_0_11_174)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65451 (* ?x63364 l_0_11_173)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65449 (* ?x63361 l_0_11_172)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x65447 (* ?x65446 l_0_11_99)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x65444 (* ?x65443 l_0_11_98)))
 (let ((?x65440 (* 2.0 l_0_11_127)))
 (let ((?x65441 (* ?x65440 l_0_11_97)))
 (let ((?x65450 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_130) ?x65441) ?x65444) ?x65447) ?x65449)))
 (let ((?x65456 (+ (+ (+ ?x65450 ?x65451) ?x65453) ?x65455)))
 (let ((?x65463 (- (- (- (- (- (- (- ?x65456 ?x64953) ?x64901) ?x64905) ?x64909) ?x64912) ?x64925) ?x64927)))
 (let ((?x65470 (+ (+ (+ (+ (+ (- (- ?x65463 ?x64929) ?x64931) ?x64933) ?x64935) ?x64937) ?x64939) ?x64941)))
 (= (+ (+ (+ (+ ?x65470 ?x64943) ?x64945) ?x64947) ?x64949) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62917 (* ?x62916 l_0_11_47)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65498 (* ?x65497 l_0_11_227)))
 (let ((?x65494 (- (* (* 2.0 l_0_11_1) l_0_11_2) (* (* 2.0 l_0_11_182) l_0_11_184))))
 (let ((?x65501 (- (+ (- ?x65494 (* (* 2.0 l_0_11_183) l_0_11_185)) ?x65498) (* (* 2.0 l_0_11_272) l_0_11_274))))
 (let ((?x65505 (- (- ?x65501 (* (* 2.0 l_0_11_273) l_0_11_275)) (* (* 2.0 l_0_11_317) l_0_11_319))))
 (let ((?x65509 (- (- ?x65505 (* (* 2.0 l_0_11_318) l_0_11_320)) (* (* 2.0 l_0_11_362) l_0_11_364))))
 (= (- (- ?x65509 (* (* 2.0 l_0_11_363) l_0_11_365)) ?x62917) 0.0))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x62972 (* ?x62916 l_0_11_49)))
 (let ((?x65568 (* l_0_11_366 l_0_11_366)))
 (let ((?x65566 (* l_0_11_365 l_0_11_365)))
 (let ((?x65564 (* l_0_11_364 l_0_11_364)))
 (let ((?x65562 (* l_0_11_321 l_0_11_321)))
 (let ((?x65560 (* l_0_11_320 l_0_11_320)))
 (let ((?x65558 (* l_0_11_319 l_0_11_319)))
 (let ((?x65556 (* l_0_11_276 l_0_11_276)))
 (let ((?x65554 (* l_0_11_275 l_0_11_275)))
 (let ((?x65552 (* l_0_11_274 l_0_11_274)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65550 (* ?x65497 l_0_11_229)))
 (let ((?x65543 (- (* (* 2.0 l_0_11_1) l_0_11_4) (* (* 1.0 l_0_11_184) l_0_11_184))))
 (let ((?x65549 (- (- ?x65543 (* (* 1.0 l_0_11_185) l_0_11_185)) (* (* 1.0 l_0_11_186) l_0_11_186))))
 (let ((?x65563 (- (- (- (- (- (- (+ ?x65549 ?x65550) ?x65552) ?x65554) ?x65556) ?x65558) ?x65560) ?x65562)))
 (= (- (- (- (- ?x65563 ?x65564) ?x65566) ?x65568) ?x62972) 0.0))))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63070 (* ?x62916 l_0_11_52)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65613 (* ?x65497 l_0_11_232)))
 (let ((?x65606 (- (* (* 2.0 l_0_11_1) l_0_11_7) (* (* 2.0 l_0_11_184) l_0_11_187))))
 (let ((?x65612 (- (- ?x65606 (* (* 2.0 l_0_11_185) l_0_11_188)) (* (* 2.0 l_0_11_186) l_0_11_189))))
 (let ((?x65620 (- (- (+ ?x65612 ?x65613) (* (* 2.0 l_0_11_274) l_0_11_277)) (* (* 2.0 l_0_11_275) l_0_11_278))))
 (let ((?x65626 (- (- ?x65620 (* (* 2.0 l_0_11_276) l_0_11_279)) (* (* 2.0 l_0_11_319) l_0_11_322))))
 (let ((?x65632 (- (- ?x65626 (* (* 2.0 l_0_11_320) l_0_11_323)) (* (* 2.0 l_0_11_321) l_0_11_324))))
 (let ((?x65638 (- (- ?x65632 (* (* 2.0 l_0_11_364) l_0_11_367)) (* (* 2.0 l_0_11_365) l_0_11_368))))
 (= (- (- ?x65638 (* (* 2.0 l_0_11_366) l_0_11_369)) ?x63070) 0.0))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65719 (* ?x65067 l_0_11_94)))
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63121 (* ?x62916 l_0_11_56)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65698 (* ?x65497 l_0_11_236)))
 (let ((?x65550 (* ?x65497 l_0_11_229)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x65689 (* ?x62913 l_0_11_139)))
 (let ((?x65692 (- (- (* (* 2.0 l_0_11_1) l_0_11_11) ?x65689) (* (* 2.0 l_0_11_184) l_0_11_191))))
 (let ((?x65696 (- (- ?x65692 (* (* 2.0 l_0_11_185) l_0_11_192)) (* (* 2.0 l_0_11_186) l_0_11_193))))
 (let ((?x65703 (- (- (+ (- ?x65696 ?x65550) ?x65698) (* (* 2.0 l_0_11_274) l_0_11_281)) (* (* 2.0 l_0_11_275) l_0_11_282))))
 (let ((?x65707 (- (- ?x65703 (* (* 2.0 l_0_11_276) l_0_11_283)) (* (* 2.0 l_0_11_319) l_0_11_326))))
 (let ((?x65711 (- (- ?x65707 (* (* 2.0 l_0_11_320) l_0_11_327)) (* (* 2.0 l_0_11_321) l_0_11_328))))
 (let ((?x65715 (- (- ?x65711 (* (* 2.0 l_0_11_364) l_0_11_371)) (* (* 2.0 l_0_11_365) l_0_11_372))))
 (= (+ (- (- ?x65715 (* (* 2.0 l_0_11_366) l_0_11_373)) ?x63121) ?x65719) 0.0)))))))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63189 (* ?x62916 l_0_11_61)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65777 (* ?x65497 l_0_11_241)))
 (let ((?x65772 (- (* (* 2.0 l_0_11_1) l_0_11_16) (* (* 2.0 l_0_11_184) l_0_11_196))))
 (let ((?x65776 (- (- ?x65772 (* (* 2.0 l_0_11_185) l_0_11_197)) (* (* 2.0 l_0_11_186) l_0_11_198))))
 (let ((?x65782 (- (- (+ ?x65776 ?x65777) (* (* 2.0 l_0_11_274) l_0_11_286)) (* (* 2.0 l_0_11_275) l_0_11_287))))
 (let ((?x65786 (- (- ?x65782 (* (* 2.0 l_0_11_276) l_0_11_288)) (* (* 2.0 l_0_11_319) l_0_11_331))))
 (let ((?x65790 (- (- ?x65786 (* (* 2.0 l_0_11_320) l_0_11_332)) (* (* 2.0 l_0_11_321) l_0_11_333))))
 (let ((?x65794 (- (- ?x65790 (* (* 2.0 l_0_11_364) l_0_11_376)) (* (* 2.0 l_0_11_365) l_0_11_377))))
 (= (- (- ?x65794 (* (* 2.0 l_0_11_366) l_0_11_378)) ?x63189) 0.0))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63205 (* ?x62916 l_0_11_67)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65862 (* ?x65497 l_0_11_247)))
 (let ((?x65857 (- (* (* 2.0 l_0_11_1) l_0_11_22) (* (* 2.0 l_0_11_184) l_0_11_202))))
 (let ((?x65861 (- (- ?x65857 (* (* 2.0 l_0_11_185) l_0_11_203)) (* (* 2.0 l_0_11_186) l_0_11_204))))
 (let ((?x65867 (- (- (+ ?x65861 ?x65862) (* (* 2.0 l_0_11_274) l_0_11_292)) (* (* 2.0 l_0_11_275) l_0_11_293))))
 (let ((?x65871 (- (- ?x65867 (* (* 2.0 l_0_11_276) l_0_11_294)) (* (* 2.0 l_0_11_319) l_0_11_337))))
 (let ((?x65875 (- (- ?x65871 (* (* 2.0 l_0_11_320) l_0_11_338)) (* (* 2.0 l_0_11_321) l_0_11_339))))
 (let ((?x65879 (- (- ?x65875 (* (* 2.0 l_0_11_364) l_0_11_382)) (* (* 2.0 l_0_11_365) l_0_11_383))))
 (= (- (- ?x65879 (* (* 2.0 l_0_11_366) l_0_11_384)) ?x63205) 0.0))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63215 (* ?x62916 l_0_11_74)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65941 (* ?x65497 l_0_11_254)))
 (let ((?x65936 (- (* (* 2.0 l_0_11_1) l_0_11_29) (* (* 2.0 l_0_11_184) l_0_11_209))))
 (let ((?x65940 (- (- ?x65936 (* (* 2.0 l_0_11_185) l_0_11_210)) (* (* 2.0 l_0_11_186) l_0_11_211))))
 (let ((?x65946 (- (- (+ ?x65940 ?x65941) (* (* 2.0 l_0_11_274) l_0_11_299)) (* (* 2.0 l_0_11_275) l_0_11_300))))
 (let ((?x65950 (- (- ?x65946 (* (* 2.0 l_0_11_276) l_0_11_301)) (* (* 2.0 l_0_11_319) l_0_11_344))))
 (let ((?x65954 (- (- ?x65950 (* (* 2.0 l_0_11_320) l_0_11_345)) (* (* 2.0 l_0_11_321) l_0_11_346))))
 (let ((?x65958 (- (- ?x65954 (* (* 2.0 l_0_11_364) l_0_11_389)) (* (* 2.0 l_0_11_365) l_0_11_390))))
 (= (- (- ?x65958 (* (* 2.0 l_0_11_366) l_0_11_391)) ?x63215) 0.0))))))))))))
(assert
 (let ((?x62916 (* 2.0 l_0_11_46)))
 (let ((?x63225 (* ?x62916 l_0_11_82)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x66014 (* ?x65497 l_0_11_262)))
 (let ((?x66009 (- (* (* 2.0 l_0_11_1) l_0_11_37) (* (* 2.0 l_0_11_184) l_0_11_217))))
 (let ((?x66013 (- (- ?x66009 (* (* 2.0 l_0_11_185) l_0_11_218)) (* (* 2.0 l_0_11_186) l_0_11_219))))
 (let ((?x66019 (- (- (+ ?x66013 ?x66014) (* (* 2.0 l_0_11_274) l_0_11_307)) (* (* 2.0 l_0_11_275) l_0_11_308))))
 (let ((?x66023 (- (- ?x66019 (* (* 2.0 l_0_11_276) l_0_11_309)) (* (* 2.0 l_0_11_319) l_0_11_352))))
 (let ((?x66027 (- (- ?x66023 (* (* 2.0 l_0_11_320) l_0_11_353)) (* (* 2.0 l_0_11_321) l_0_11_354))))
 (let ((?x66031 (- (- ?x66027 (* (* 2.0 l_0_11_364) l_0_11_397)) (* (* 2.0 l_0_11_365) l_0_11_398))))
 (= (- (- ?x66031 (* (* 2.0 l_0_11_366) l_0_11_399)) ?x63225) 0.0))))))))))))
(assert
 (let ((?x63254 (* l_0_11_48 l_0_11_48)))
 (let ((?x63252 (* l_0_11_47 l_0_11_47)))
 (let ((?x63250 (* l_0_11_3 l_0_11_3)))
 (let ((?x66085 (* l_0_11_228 l_0_11_228)))
 (let ((?x66087 (+ (+ (+ (* l_0_11_2 l_0_11_2) (* l_0_11_227 l_0_11_227)) ?x66085) ?x63250)))
 (= (- (- ?x66087 ?x63252) ?x63254) 0.0)))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63307 (* ?x63306 l_0_11_50)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63304 (* ?x63303 l_0_11_49)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63301 (* ?x63300 l_0_11_5)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66098 (* ?x66097 l_0_11_230)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x17314 (* ?x17323 l_0_11_229)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63298 (* ?x63297 l_0_11_4)))
 (= (- (- (+ (+ (+ ?x63298 ?x17314) ?x66098) ?x63301) ?x63304) ?x63307) 0.0))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63379 (* ?x63306 l_0_11_53)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63377 (* ?x63303 l_0_11_52)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63375 (* ?x63300 l_0_11_8)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66115 (* ?x66097 l_0_11_233)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x42968 (* ?x17323 l_0_11_232)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63373 (* ?x63297 l_0_11_7)))
 (= (- (- (+ (+ (+ ?x63373 ?x42968) ?x66115) ?x63375) ?x63377) ?x63379) 0.0))))))))))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x66144 (* ?x65150 l_0_11_95)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x66142 (* ?x65147 l_0_11_94)))
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63468 (* ?x63306 l_0_11_57)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63466 (* ?x63303 l_0_11_56)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66138 (* ?x66097 l_0_11_237)))
 (let ((?x66098 (* ?x66097 l_0_11_230)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66135 (* ?x17323 l_0_11_236)))
 (let ((?x17314 (* ?x17323 l_0_11_229)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x66132 (* ?x63245 l_0_11_140)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x66130 (* ?x63242 l_0_11_139)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63449 (* ?x63448 l_0_11_3)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x63446 (* ?x63445 l_0_11_2)))
 (let ((?x66139 (+ (- (+ (- (- (- (+ ?x63446 ?x63449) ?x66130) ?x66132) ?x17314) ?x66135) ?x66098) ?x66138)))
 (= (+ (+ (- (- ?x66139 ?x63466) ?x63468) ?x66142) ?x66144) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63556 (* ?x63306 l_0_11_62)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63554 (* ?x63303 l_0_11_61)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66177 (* ?x66097 l_0_11_242)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66175 (* ?x17323 l_0_11_241)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x63552 (* ?x62939 l_0_11_3)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x63550 (* ?x62931 l_0_11_2)))
 (= (- (- (+ (+ (+ ?x63550 ?x63552) ?x66175) ?x66177) ?x63554) ?x63556) 0.0))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63632 (* ?x63306 l_0_11_68)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63630 (* ?x63303 l_0_11_67)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63628 (* ?x63627 l_0_11_3)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66193 (* ?x66097 l_0_11_248)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66191 (* ?x17323 l_0_11_247)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63625 (* ?x63297 l_0_11_22)))
 (= (- (- (+ (+ (+ ?x63625 ?x66191) ?x66193) ?x63628) ?x63630) ?x63632) 0.0))))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65719 (* ?x65067 l_0_11_94)))
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63690 (* ?x63306 l_0_11_75)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63688 (* ?x63303 l_0_11_74)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63686 (* ?x63300 l_0_11_30)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66210 (* ?x66097 l_0_11_255)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66208 (* ?x17323 l_0_11_254)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63684 (* ?x63297 l_0_11_29)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x65689 (* ?x62913 l_0_11_139)))
 (let ((?x66215 (- (- (- (+ (+ (+ (+ ?x65689 ?x63684) ?x66208) ?x66210) ?x63686) ?x63688) ?x63690) ?x65719)))
 (= ?x66215 0.0)))))))))))))))))))
(assert
 (let ((?x63306 (* 2.0 l_0_11_48)))
 (let ((?x63729 (* ?x63306 l_0_11_83)))
 (let ((?x63303 (* 2.0 l_0_11_47)))
 (let ((?x63727 (* ?x63303 l_0_11_82)))
 (let ((?x63300 (* 2.0 l_0_11_3)))
 (let ((?x63725 (* ?x63300 l_0_11_38)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66231 (* ?x66097 l_0_11_263)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66229 (* ?x17323 l_0_11_262)))
 (let ((?x63297 (* 2.0 l_0_11_2)))
 (let ((?x63723 (* ?x63297 l_0_11_37)))
 (= (- (- (+ (+ (+ ?x63723 ?x66229) ?x66231) ?x63725) ?x63727) ?x63729) 0.0))))))))))))))
(assert
 (let ((?x63790 (* l_0_11_6 l_0_11_6)))
 (let ((?x63788 (* l_0_11_51 l_0_11_51)))
 (let ((?x63786 (* l_0_11_50 l_0_11_50)))
 (let ((?x63784 (* l_0_11_5 l_0_11_5)))
 (let ((?x53163 (* l_0_11_49 l_0_11_49)))
 (let ((?x63794 (* l_0_11_4 l_0_11_4)))
 (let ((?x66253 (* l_0_11_231 l_0_11_231)))
 (let ((?x66254 (+ (+ (* l_0_11_229 l_0_11_229) (* l_0_11_230 l_0_11_230)) ?x66253)))
 (= (+ (- (- (+ (- (+ ?x66254 ?x63794) ?x53163) ?x63784) ?x63786) ?x63788) ?x63790) 0.0))))))))))
(assert
 (let ((?x63818 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63815 (* ?x63814 l_0_11_54)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63812 (* ?x63811 l_0_11_53)))
 (let ((?x63809 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63806 (* ?x63805 l_0_11_52)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66273 (* ?x66272 l_0_11_234)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66270 (* ?x66269 l_0_11_233)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66268 (* ?x66262 l_0_11_232)))
 (let ((?x66278 (- (+ (+ (+ ?x66268 ?x66270) ?x66273) (* (* 2.0 l_0_11_4) l_0_11_7)) ?x63806)))
 (= (+ (- (- (+ ?x66278 ?x63809) ?x63812) ?x63815) ?x63818) 0.0)))))))))))))))))
(assert
 (let ((?x66331 (* l_0_11_96 l_0_11_96)))
 (let ((?x66329 (* l_0_11_95 l_0_11_95)))
 (let ((?x66327 (* l_0_11_94 l_0_11_94)))
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63852 (* ?x63814 l_0_11_58)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63850 (* ?x63811 l_0_11_57)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63848 (* ?x63805 l_0_11_56)))
 (let ((?x66253 (* l_0_11_231 l_0_11_231)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66321 (* ?x66272 l_0_11_238)))
 (let ((?x66251 (* l_0_11_230 l_0_11_230)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66318 (* ?x66269 l_0_11_237)))
 (let ((?x66250 (* l_0_11_229 l_0_11_229)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66315 (* ?x66262 l_0_11_236)))
 (let ((?x66313 (* l_0_11_141 l_0_11_141)))
 (let ((?x66311 (* l_0_11_140 l_0_11_140)))
 (let ((?x66309 (* l_0_11_139 l_0_11_139)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x63846 (* ?x63845 l_0_11_6)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x63843 (* ?x63448 l_0_11_5)))
 (let ((?x66312 (- (- (+ (+ (* (* 2.0 l_0_11_11) l_0_11_4) ?x63843) ?x63846) ?x66309) ?x66311)))
 (let ((?x66323 (- (+ (- (+ (- (+ (- ?x66312 ?x66313) ?x66315) ?x66250) ?x66318) ?x66251) ?x66321) ?x66253)))
 (= (+ (+ (+ (- (- (- ?x66323 ?x63848) ?x63850) ?x63852) ?x66327) ?x66329) ?x66331) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63872 (* ?x63814 l_0_11_63)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63870 (* ?x63811 l_0_11_62)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63868 (* ?x63805 l_0_11_61)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66353 (* ?x66272 l_0_11_243)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66351 (* ?x66269 l_0_11_242)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66349 (* ?x66262 l_0_11_241)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x63866 (* ?x62942 l_0_11_6)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53207 (* ?x62939 l_0_11_5)))
 (let ((?x66352 (+ (+ (+ (+ (* (* 2.0 l_0_11_16) l_0_11_4) ?x53207) ?x63866) ?x66349) ?x66351)))
 (= (- (- (- (+ ?x66352 ?x66353) ?x63868) ?x63870) ?x63872) 0.0)))))))))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63906 (* ?x63814 l_0_11_69)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63904 (* ?x63811 l_0_11_68)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63902 (* ?x63805 l_0_11_67)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x63900 (* ?x63899 l_0_11_6)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66382 (* ?x66272 l_0_11_249)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66380 (* ?x66269 l_0_11_248)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x63897 (* ?x63627 l_0_11_5)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66377 (* ?x66262 l_0_11_247)))
 (let ((?x66383 (+ (+ (+ (+ (* (* 2.0 l_0_11_22) l_0_11_4) ?x66377) ?x63897) ?x66380) ?x66382)))
 (= (- (- (- (+ ?x66383 ?x63900) ?x63902) ?x63904) ?x63906) 0.0)))))))))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63940 (* ?x63814 l_0_11_76)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63938 (* ?x63811 l_0_11_75)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63936 (* ?x63805 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x63934 (* ?x63933 l_0_11_6)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x63931 (* ?x63930 l_0_11_5)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66408 (* ?x66272 l_0_11_256)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66406 (* ?x66269 l_0_11_255)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66405 (* ?x66262 l_0_11_254)))
 (let ((?x66412 (+ (+ (+ (+ ?x66405 ?x66406) ?x66408) (* (* 2.0 l_0_11_29) l_0_11_4)) ?x63931)))
 (= (- (- (- (+ ?x66412 ?x63934) ?x63936) ?x63938) ?x63940) 0.0)))))))))))))))))))
(assert
 (let ((?x63814 (* 2.0 l_0_11_51)))
 (let ((?x63971 (* ?x63814 l_0_11_84)))
 (let ((?x63811 (* 2.0 l_0_11_50)))
 (let ((?x63969 (* ?x63811 l_0_11_83)))
 (let ((?x63805 (* 2.0 l_0_11_49)))
 (let ((?x63967 (* ?x63805 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x63965 (* ?x63964 l_0_11_6)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x63962 (* ?x63961 l_0_11_5)))
 (let ((?x64151 (* 2.0 l_0_11_37)))
 (let ((?x65175 (* ?x64151 l_0_11_4)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66436 (* ?x66272 l_0_11_264)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66434 (* ?x66269 l_0_11_263)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66433 (* ?x66262 l_0_11_262)))
 (let ((?x66442 (- (- (+ (+ (+ (+ (+ ?x66433 ?x66434) ?x66436) ?x65175) ?x63962) ?x63965) ?x63967) ?x63969)))
 (= (- ?x66442 ?x63971) 0.0)))))))))))))))))))))
(assert
 (let ((?x64005 (* l_0_11_9 l_0_11_9)))
 (let ((?x64003 (* l_0_11_8 l_0_11_8)))
 (let ((?x64001 (* l_0_11_7 l_0_11_7)))
 (let ((?x63999 (* l_0_11_55 l_0_11_55)))
 (let ((?x63997 (* l_0_11_54 l_0_11_54)))
 (let ((?x63995 (* l_0_11_53 l_0_11_53)))
 (let ((?x63987 (* l_0_11_52 l_0_11_52)))
 (let ((?x66464 (* l_0_11_235 l_0_11_235)))
 (let ((?x66462 (* l_0_11_234 l_0_11_234)))
 (let ((?x66460 (* l_0_11_233 l_0_11_233)))
 (let ((?x66463 (+ (+ (+ (* l_0_11_10 l_0_11_10) (* l_0_11_232 l_0_11_232)) ?x66460) ?x66462)))
 (let ((?x66471 (+ (+ (- (- (- (- (+ ?x66463 ?x66464) ?x63987) ?x63995) ?x63997) ?x63999) ?x64001) ?x64003)))
 (= (+ ?x66471 ?x64005) 0.0))))))))))))))
(assert
 (let ((?x65189 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x65186 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x65183 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64037 (* ?x64036 l_0_11_59)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64034 (* ?x64033 l_0_11_58)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64031 (* ?x64030 l_0_11_57)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64028 (* ?x64027 l_0_11_56)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x66507 (* ?x64996 l_0_11_239)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x66505 (* ?x64993 l_0_11_238)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x66503 (* ?x64990 l_0_11_237)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x66501 (* ?x64987 l_0_11_236)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66273 (* ?x66272 l_0_11_234)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66270 (* ?x66269 l_0_11_233)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66268 (* ?x66262 l_0_11_232)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x65173 (* ?x63294 l_0_11_144)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x65171 (* ?x63291 l_0_11_143)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x65170 (* ?x63288 l_0_11_142)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64025 (* ?x63845 l_0_11_9)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64023 (* ?x63448 l_0_11_8)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x64021 (* ?x63445 l_0_11_7)))
 (let ((?x66495 (- (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_14) ?x64021) ?x64023) ?x64025) ?x65170)))
 (let ((?x66504 (+ (+ (- (- (- (- (- ?x66495 ?x65171) ?x65173) ?x66268) ?x66270) ?x66273) ?x66501) ?x66503)))
 (let ((?x66513 (+ (- (- (- (- (+ (+ ?x66504 ?x66505) ?x66507) ?x64028) ?x64031) ?x64034) ?x64037) ?x65183)))
 (= (+ (+ ?x66513 ?x65186) ?x65189) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64064 (* ?x64036 l_0_11_64)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64062 (* ?x64033 l_0_11_63)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64060 (* ?x64030 l_0_11_62)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64058 (* ?x64027 l_0_11_61)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x53845 (* ?x64996 l_0_11_244)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x53847 (* ?x64993 l_0_11_243)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x53860 (* ?x64990 l_0_11_242)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53862 (* ?x64987 l_0_11_241)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64056 (* ?x62942 l_0_11_9)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x53293 (* ?x62939 l_0_11_8)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x53254 (* ?x62931 l_0_11_7)))
 (let ((?x43256 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_19) ?x53254) ?x53293) ?x64056) ?x53862)))
 (let ((?x53824 (- (- (- (- (+ (+ (+ ?x43256 ?x53860) ?x53847) ?x53845) ?x64058) ?x64060) ?x64062) ?x64064)))
 (= ?x53824 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64137 (* ?x64036 l_0_11_77)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64135 (* ?x64033 l_0_11_76)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64133 (* ?x64030 l_0_11_75)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64131 (* ?x64027 l_0_11_74)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64129 (* ?x63933 l_0_11_9)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64120 (* ?x63930 l_0_11_8)))
 (let ((?x64119 (* 2.0 l_0_11_29)))
 (let ((?x14494 (* ?x64119 l_0_11_7)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x66541 (* ?x64996 l_0_11_257)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x53884 (* ?x64993 l_0_11_256)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x53886 (* ?x64990 l_0_11_255)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53933 (* ?x64987 l_0_11_254)))
 (let ((?x66542 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_32) ?x53933) ?x53886) ?x53884) ?x66541)))
 (let ((?x66549 (- (- (- (- (+ (+ (+ ?x66542 ?x14494) ?x64120) ?x64129) ?x64131) ?x64133) ?x64135) ?x64137)))
 (= ?x66549 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64036 (* 2.0 l_0_11_55)))
 (let ((?x64173 (* ?x64036 l_0_11_85)))
 (let ((?x64033 (* 2.0 l_0_11_54)))
 (let ((?x64171 (* ?x64033 l_0_11_84)))
 (let ((?x64030 (* 2.0 l_0_11_53)))
 (let ((?x64169 (* ?x64030 l_0_11_83)))
 (let ((?x64027 (* 2.0 l_0_11_52)))
 (let ((?x64167 (* ?x64027 l_0_11_82)))
 (let ((?x63964 (* 2.0 l_0_11_39)))
 (let ((?x64165 (* ?x63964 l_0_11_9)))
 (let ((?x63961 (* 2.0 l_0_11_38)))
 (let ((?x64156 (* ?x63961 l_0_11_8)))
 (let ((?x64151 (* 2.0 l_0_11_37)))
 (let ((?x64153 (* ?x64151 l_0_11_7)))
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x43291 (* ?x64996 l_0_11_265)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x43296 (* ?x64993 l_0_11_264)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x32077 (* ?x64990 l_0_11_263)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53971 (* ?x64987 l_0_11_262)))
 (let ((?x43285 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_40) ?x53971) ?x32077) ?x43296) ?x43291)))
 (let ((?x66566 (- (- (- (- (+ (+ (+ ?x43285 ?x64153) ?x64156) ?x64165) ?x64167) ?x64169) ?x64171) ?x64173)))
 (= ?x66566 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64203 (* l_0_11_60 l_0_11_60)))
 (let ((?x64201 (* l_0_11_59 l_0_11_59)))
 (let ((?x64199 (* l_0_11_58 l_0_11_58)))
 (let ((?x64197 (* l_0_11_57 l_0_11_57)))
 (let ((?x64195 (* l_0_11_56 l_0_11_56)))
 (let ((?x66622 (* l_0_11_240 l_0_11_240)))
 (let ((?x66620 (* l_0_11_239 l_0_11_239)))
 (let ((?x66618 (* l_0_11_238 l_0_11_238)))
 (let ((?x66616 (* l_0_11_237 l_0_11_237)))
 (let ((?x66614 (* l_0_11_236 l_0_11_236)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66321 (* ?x66272 l_0_11_238)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66318 (* ?x66269 l_0_11_237)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66315 (* ?x66262 l_0_11_236)))
 (let ((?x64193 (* l_0_11_15 l_0_11_15)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66608 (* ?x63294 l_0_11_148)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66606 (* ?x63291 l_0_11_147)))
 (let ((?x64191 (* l_0_11_14 l_0_11_14)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66603 (* ?x63288 l_0_11_146)))
 (let ((?x64189 (* l_0_11_13 l_0_11_13)))
 (let ((?x64187 (* l_0_11_12 l_0_11_12)))
 (let ((?x64207 (* l_0_11_11 l_0_11_11)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x66598 (* ?x63436 l_0_11_96)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x66596 (* ?x63424 l_0_11_95)))
 (let ((?x66601 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_94) ?x66596) ?x66598) ?x64207) ?x64187)))
 (let ((?x66611 (- (+ (- (- (+ (- (+ ?x66601 ?x64189) ?x66603) ?x64191) ?x66606) ?x66608) ?x64193) ?x66315)))
 (let ((?x66623 (+ (+ (+ (+ (+ (- (- ?x66611 ?x66318) ?x66321) ?x66614) ?x66616) ?x66618) ?x66620) ?x66622)))
 (= (- (- (- (- (- ?x66623 ?x64195) ?x64197) ?x64199) ?x64201) ?x64203) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64246 (* ?x64245 l_0_11_65)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64243 (* ?x64242 l_0_11_64)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64240 (* ?x64239 l_0_11_63)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64237 (* ?x64236 l_0_11_62)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64234 (* ?x64233 l_0_11_61)))
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66681 (* ?x66680 l_0_11_245)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66678 (* ?x66677 l_0_11_244)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66675 (* ?x66674 l_0_11_243)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66672 (* ?x66671 l_0_11_242)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66669 (* ?x66668 l_0_11_241)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66353 (* ?x66272 l_0_11_243)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66351 (* ?x66269 l_0_11_242)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66349 (* ?x66262 l_0_11_241)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64231 (* ?x64230 l_0_11_20)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x63295 (* ?x63294 l_0_11_153)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x63292 (* ?x63291 l_0_11_152)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64228 (* ?x64227 l_0_11_19)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x63289 (* ?x63288 l_0_11_151)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64225 (* ?x63845 l_0_11_18)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64223 (* ?x63448 l_0_11_17)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63286 (* ?x63085 l_0_11_96)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63284 (* ?x63082 l_0_11_95)))
 (let ((?x66657 (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_94) ?x63284) ?x63286) (* (* 2.0 l_0_11_11) l_0_11_16))))
 (let ((?x66664 (+ (- (- (+ (- (+ (+ ?x66657 ?x64223) ?x64225) ?x63289) ?x64228) ?x63292) ?x63295) ?x64231)))
 (let ((?x66679 (+ (+ (+ (+ (- (- (- ?x66664 ?x66349) ?x66351) ?x66353) ?x66669) ?x66672) ?x66675) ?x66678)))
 (= (- (- (- (- (- (+ ?x66679 ?x66681) ?x64234) ?x64237) ?x64240) ?x64243) ?x64246) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64296 (* ?x64245 l_0_11_71)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64294 (* ?x64242 l_0_11_70)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64292 (* ?x64239 l_0_11_69)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64290 (* ?x64236 l_0_11_68)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64288 (* ?x64233 l_0_11_67)))
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66712 (* ?x66680 l_0_11_251)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66710 (* ?x66677 l_0_11_250)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66708 (* ?x66674 l_0_11_249)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66706 (* ?x66671 l_0_11_248)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66704 (* ?x66668 l_0_11_247)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66382 (* ?x66272 l_0_11_249)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66380 (* ?x66269 l_0_11_248)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66377 (* ?x66262 l_0_11_247)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64286 (* ?x64230 l_0_11_26)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66698 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66696 (* ?x63291 l_0_11_158)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64276 (* ?x64227 l_0_11_25)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66693 (* ?x63288 l_0_11_157)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64273 (* ?x63845 l_0_11_24)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64269 (* ?x63448 l_0_11_23)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x18034 (* ?x65021 l_0_11_96)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x54113 (* ?x65018 l_0_11_95)))
 (let ((?x54108 (+ (* (* 2.0 l_0_11_11) l_0_11_22) (* (* 2.0 l_0_11_112) l_0_11_94))))
 (let ((?x66697 (- (+ (- (+ (+ (+ (+ ?x54108 ?x54113) ?x18034) ?x64269) ?x64273) ?x66693) ?x64276) ?x66696)))
 (let ((?x66707 (+ (+ (- (- (- (+ (- ?x66697 ?x66698) ?x64286) ?x66377) ?x66380) ?x66382) ?x66704) ?x66706)))
 (let ((?x66717 (- (- (- (- (+ (+ (+ ?x66707 ?x66708) ?x66710) ?x66712) ?x64288) ?x64290) ?x64292) ?x64294)))
 (= (- ?x66717 ?x64296) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64329 (* ?x64245 l_0_11_78)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64327 (* ?x64242 l_0_11_77)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64325 (* ?x64239 l_0_11_76)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64323 (* ?x64236 l_0_11_75)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64321 (* ?x64233 l_0_11_74)))
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66745 (* ?x66680 l_0_11_258)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66743 (* ?x66677 l_0_11_257)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66741 (* ?x66674 l_0_11_256)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66739 (* ?x66671 l_0_11_255)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66737 (* ?x66668 l_0_11_254)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66408 (* ?x66272 l_0_11_256)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66406 (* ?x66269 l_0_11_255)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66405 (* ?x66262 l_0_11_254)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64319 (* ?x64230 l_0_11_33)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66731 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66729 (* ?x63291 l_0_11_165)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x53406 (* ?x64227 l_0_11_32)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x54171 (* ?x63288 l_0_11_164)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x15679 (* ?x63845 l_0_11_31)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x54216 (* ?x65386 l_0_11_96)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x32539 (* ?x65383 l_0_11_95)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x53403 (* ?x63448 l_0_11_30)))
 (let ((?x32542 (+ (* (* 2.0 l_0_11_11) l_0_11_29) (* (* 2.0 l_0_11_119) l_0_11_94))))
 (let ((?x66730 (- (+ (- (+ (+ (+ (+ ?x32542 ?x53403) ?x32539) ?x54216) ?x15679) ?x54171) ?x53406) ?x66729)))
 (let ((?x66740 (+ (+ (- (- (- (+ (- ?x66730 ?x66731) ?x64319) ?x66405) ?x66406) ?x66408) ?x66737) ?x66739)))
 (let ((?x66750 (- (- (- (- (+ (+ (+ ?x66740 ?x66741) ?x66743) ?x66745) ?x64321) ?x64323) ?x64325) ?x64327)))
 (= (- ?x66750 ?x64329) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64245 (* 2.0 l_0_11_60)))
 (let ((?x64381 (* ?x64245 l_0_11_86)))
 (let ((?x64242 (* 2.0 l_0_11_59)))
 (let ((?x64379 (* ?x64242 l_0_11_85)))
 (let ((?x64239 (* 2.0 l_0_11_58)))
 (let ((?x64377 (* ?x64239 l_0_11_84)))
 (let ((?x64236 (* 2.0 l_0_11_57)))
 (let ((?x64375 (* ?x64236 l_0_11_83)))
 (let ((?x64233 (* 2.0 l_0_11_56)))
 (let ((?x64373 (* ?x64233 l_0_11_82)))
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66800 (* ?x66680 l_0_11_266)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66798 (* ?x66677 l_0_11_265)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66796 (* ?x66674 l_0_11_264)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66794 (* ?x66671 l_0_11_263)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66792 (* ?x66668 l_0_11_262)))
 (let ((?x66272 (* 2.0 l_0_11_231)))
 (let ((?x66436 (* ?x66272 l_0_11_264)))
 (let ((?x66269 (* 2.0 l_0_11_230)))
 (let ((?x66434 (* ?x66269 l_0_11_263)))
 (let ((?x66262 (* 2.0 l_0_11_229)))
 (let ((?x66433 (* ?x66262 l_0_11_262)))
 (let ((?x64230 (* 2.0 l_0_11_15)))
 (let ((?x64371 (* ?x64230 l_0_11_41)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66786 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66784 (* ?x63291 l_0_11_173)))
 (let ((?x64227 (* 2.0 l_0_11_14)))
 (let ((?x64361 (* ?x64227 l_0_11_40)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66781 (* ?x63288 l_0_11_172)))
 (let ((?x63845 (* 2.0 l_0_11_13)))
 (let ((?x64358 (* ?x63845 l_0_11_39)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x66778 (* ?x65446 l_0_11_96)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x66776 (* ?x65443 l_0_11_95)))
 (let ((?x63448 (* 2.0 l_0_11_12)))
 (let ((?x64354 (* ?x63448 l_0_11_38)))
 (let ((?x63445 (* 2.0 l_0_11_11)))
 (let ((?x65282 (* ?x63445 l_0_11_37)))
 (let ((?x66779 (+ (+ (+ (+ ?x65282 ?x64354) (* (* 2.0 l_0_11_127) l_0_11_94)) ?x66776) ?x66778)))
 (let ((?x66789 (- (+ (- (- (+ (- (+ ?x66779 ?x64358) ?x66781) ?x64361) ?x66784) ?x66786) ?x64371) ?x66433)))
 (let ((?x66801 (+ (+ (+ (+ (+ (- (- ?x66789 ?x66434) ?x66436) ?x66792) ?x66794) ?x66796) ?x66798) ?x66800)))
 (= (- (- (- (- (- ?x66801 ?x64373) ?x64375) ?x64377) ?x64379) ?x64381) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64436 (* l_0_11_66 l_0_11_66)))
 (let ((?x64434 (* l_0_11_65 l_0_11_65)))
 (let ((?x64432 (* l_0_11_64 l_0_11_64)))
 (let ((?x64430 (* l_0_11_63 l_0_11_63)))
 (let ((?x64428 (* l_0_11_62 l_0_11_62)))
 (let ((?x64426 (* l_0_11_61 l_0_11_61)))
 (let ((?x66829 (* l_0_11_246 l_0_11_246)))
 (let ((?x66827 (* l_0_11_245 l_0_11_245)))
 (let ((?x66825 (* l_0_11_244 l_0_11_244)))
 (let ((?x66823 (* l_0_11_243 l_0_11_243)))
 (let ((?x43569 (* l_0_11_242 l_0_11_242)))
 (let ((?x54405 (* l_0_11_241 l_0_11_241)))
 (let ((?x64424 (* l_0_11_21 l_0_11_21)))
 (let ((?x64422 (* l_0_11_20 l_0_11_20)))
 (let ((?x64420 (* l_0_11_19 l_0_11_19)))
 (let ((?x64410 (* l_0_11_18 l_0_11_18)))
 (let ((?x54410 (+ (+ (+ (* l_0_11_16 l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64410) ?x64420)))
 (let ((?x66828 (+ (+ (+ (+ (+ (+ (+ ?x54410 ?x64422) ?x64424) ?x54405) ?x43569) ?x66823) ?x66825) ?x66827)))
 (let ((?x66836 (- (- (- (- (- (- (+ ?x66828 ?x66829) ?x64426) ?x64428) ?x64430) ?x64432) ?x64434) ?x64436)))
 (= ?x66836 0.0)))))))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64480 (* ?x62989 l_0_11_72)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64478 (* ?x62986 l_0_11_71)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64476 (* ?x62983 l_0_11_70)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64474 (* ?x62980 l_0_11_69)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64472 (* ?x62977 l_0_11_68)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64470 (* ?x62974 l_0_11_67)))
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x66865 (* ?x62969 l_0_11_252)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x66863 (* ?x62966 l_0_11_251)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x66861 (* ?x62963 l_0_11_250)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x66859 (* ?x62960 l_0_11_249)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x66857 (* ?x62957 l_0_11_248)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x66855 (* ?x62954 l_0_11_247)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64468 (* ?x62951 l_0_11_27)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64466 (* ?x62948 l_0_11_26)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64464 (* ?x62945 l_0_11_25)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64462 (* ?x62942 l_0_11_24)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64460 (* ?x62939 l_0_11_23)))
 (let ((?x66853 (+ (+ (+ (+ (* (* 2.0 l_0_11_16) l_0_11_22) ?x64460) ?x64462) ?x64464) ?x64466)))
 (let ((?x66866 (+ (+ (+ (+ (+ (+ (+ ?x66853 ?x64468) ?x66855) ?x66857) ?x66859) ?x66861) ?x66863) ?x66865)))
 (= (- (- (- (- (- (- ?x66866 ?x64470) ?x64472) ?x64474) ?x64476) ?x64478) ?x64480) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62989 (* 2.0 l_0_11_66)))
 (let ((?x64543 (* ?x62989 l_0_11_87)))
 (let ((?x62986 (* 2.0 l_0_11_65)))
 (let ((?x64541 (* ?x62986 l_0_11_86)))
 (let ((?x62983 (* 2.0 l_0_11_64)))
 (let ((?x64539 (* ?x62983 l_0_11_85)))
 (let ((?x62980 (* 2.0 l_0_11_63)))
 (let ((?x64537 (* ?x62980 l_0_11_84)))
 (let ((?x62977 (* 2.0 l_0_11_62)))
 (let ((?x64535 (* ?x62977 l_0_11_83)))
 (let ((?x62974 (* 2.0 l_0_11_61)))
 (let ((?x64533 (* ?x62974 l_0_11_82)))
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x66903 (* ?x62969 l_0_11_267)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x66901 (* ?x62966 l_0_11_266)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x66899 (* ?x62963 l_0_11_265)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x66897 (* ?x62960 l_0_11_264)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x66895 (* ?x62957 l_0_11_263)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x66893 (* ?x62954 l_0_11_262)))
 (let ((?x62951 (* 2.0 l_0_11_21)))
 (let ((?x64531 (* ?x62951 l_0_11_42)))
 (let ((?x62948 (* 2.0 l_0_11_20)))
 (let ((?x64529 (* ?x62948 l_0_11_41)))
 (let ((?x62945 (* 2.0 l_0_11_19)))
 (let ((?x64527 (* ?x62945 l_0_11_40)))
 (let ((?x62942 (* 2.0 l_0_11_18)))
 (let ((?x64525 (* ?x62942 l_0_11_39)))
 (let ((?x62939 (* 2.0 l_0_11_17)))
 (let ((?x64523 (* ?x62939 l_0_11_38)))
 (let ((?x62931 (* 2.0 l_0_11_16)))
 (let ((?x29870 (* ?x62931 l_0_11_37)))
 (let ((?x66896 (+ (+ (+ (+ (+ (+ (+ ?x29870 ?x64523) ?x64525) ?x64527) ?x64529) ?x64531) ?x66893) ?x66895)))
 (let ((?x66907 (- (- (- (+ (+ (+ (+ ?x66896 ?x66897) ?x66899) ?x66901) ?x66903) ?x64533) ?x64535) ?x64537)))
 (= (- (- (- ?x66907 ?x64539) ?x64541) ?x64543) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64613 (* l_0_11_73 l_0_11_73)))
 (let ((?x64611 (* l_0_11_72 l_0_11_72)))
 (let ((?x64609 (* l_0_11_71 l_0_11_71)))
 (let ((?x64607 (* l_0_11_70 l_0_11_70)))
 (let ((?x64605 (* l_0_11_69 l_0_11_69)))
 (let ((?x64603 (* l_0_11_68 l_0_11_68)))
 (let ((?x64601 (* l_0_11_67 l_0_11_67)))
 (let ((?x64599 (* l_0_11_28 l_0_11_28)))
 (let ((?x64597 (* l_0_11_27 l_0_11_27)))
 (let ((?x64595 (* l_0_11_26 l_0_11_26)))
 (let ((?x54467 (* l_0_11_253 l_0_11_253)))
 (let ((?x43634 (* l_0_11_252 l_0_11_252)))
 (let ((?x54442 (* l_0_11_251 l_0_11_251)))
 (let ((?x43630 (* l_0_11_250 l_0_11_250)))
 (let ((?x64584 (* l_0_11_25 l_0_11_25)))
 (let ((?x32816 (* l_0_11_249 l_0_11_249)))
 (let ((?x43620 (* l_0_11_248 l_0_11_248)))
 (let ((?x54456 (* l_0_11_247 l_0_11_247)))
 (let ((?x64581 (* l_0_11_24 l_0_11_24)))
 (let ((?x54462 (+ (+ (+ (* l_0_11_22 l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64581) ?x54456)))
 (let ((?x54468 (+ (+ (+ (+ (+ (+ (+ ?x54462 ?x43620) ?x32816) ?x64584) ?x43630) ?x54442) ?x43634) ?x54467)))
 (let ((?x66946 (- (- (- (- (+ (+ (+ ?x54468 ?x64595) ?x64597) ?x64599) ?x64601) ?x64603) ?x64605) ?x64607)))
 (= (- (- (- ?x66946 ?x64609) ?x64611) ?x64613) 0.0))))))))))))))))))))))))
(assert
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64679 (* ?x64678 l_0_11_80)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64676 (* ?x64675 l_0_11_79)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64673 (* ?x64672 l_0_11_78)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64670 (* ?x64669 l_0_11_77)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64667 (* ?x64666 l_0_11_76)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64664 (* ?x64663 l_0_11_75)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64661 (* ?x64660 l_0_11_74)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64658 (* ?x64657 l_0_11_35)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64655 (* ?x64654 l_0_11_34)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64652 (* ?x64651 l_0_11_33)))
 (let ((?x66982 (* 2.0 l_0_11_253)))
 (let ((?x66983 (* ?x66982 l_0_11_260)))
 (let ((?x66979 (* 2.0 l_0_11_252)))
 (let ((?x66980 (* ?x66979 l_0_11_259)))
 (let ((?x66976 (* 2.0 l_0_11_251)))
 (let ((?x66977 (* ?x66976 l_0_11_258)))
 (let ((?x66973 (* 2.0 l_0_11_250)))
 (let ((?x66974 (* ?x66973 l_0_11_257)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64649 (* ?x64648 l_0_11_32)))
 (let ((?x66969 (* 2.0 l_0_11_249)))
 (let ((?x66970 (* ?x66969 l_0_11_256)))
 (let ((?x66966 (* 2.0 l_0_11_248)))
 (let ((?x66967 (* ?x66966 l_0_11_255)))
 (let ((?x66963 (* 2.0 l_0_11_247)))
 (let ((?x66964 (* ?x66963 l_0_11_254)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64646 (* ?x63899 l_0_11_31)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64644 (* ?x63627 l_0_11_30)))
 (let ((?x66968 (+ (+ (+ (+ (* (* 2.0 l_0_11_22) l_0_11_29) ?x64644) ?x64646) ?x66964) ?x66967)))
 (let ((?x66985 (+ (+ (+ (+ (+ (+ (+ ?x66968 ?x66970) ?x64649) ?x66974) ?x66977) ?x66980) ?x66983) ?x64652)))
 (let ((?x66992 (- (- (- (- (- (+ (+ ?x66985 ?x64655) ?x64658) ?x64661) ?x64664) ?x64667) ?x64670) ?x64673)))
 (= (- (- ?x66992 ?x64676) ?x64679) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65719 (* ?x65067 l_0_11_94)))
 (let ((?x64678 (* 2.0 l_0_11_73)))
 (let ((?x64734 (* ?x64678 l_0_11_88)))
 (let ((?x64675 (* 2.0 l_0_11_72)))
 (let ((?x64732 (* ?x64675 l_0_11_87)))
 (let ((?x64672 (* 2.0 l_0_11_71)))
 (let ((?x64730 (* ?x64672 l_0_11_86)))
 (let ((?x64669 (* 2.0 l_0_11_70)))
 (let ((?x64728 (* ?x64669 l_0_11_85)))
 (let ((?x64666 (* 2.0 l_0_11_69)))
 (let ((?x64726 (* ?x64666 l_0_11_84)))
 (let ((?x64663 (* 2.0 l_0_11_68)))
 (let ((?x64724 (* ?x64663 l_0_11_83)))
 (let ((?x64660 (* 2.0 l_0_11_67)))
 (let ((?x64722 (* ?x64660 l_0_11_82)))
 (let ((?x64657 (* 2.0 l_0_11_28)))
 (let ((?x64720 (* ?x64657 l_0_11_43)))
 (let ((?x64654 (* 2.0 l_0_11_27)))
 (let ((?x64718 (* ?x64654 l_0_11_42)))
 (let ((?x64651 (* 2.0 l_0_11_26)))
 (let ((?x64716 (* ?x64651 l_0_11_41)))
 (let ((?x66982 (* 2.0 l_0_11_253)))
 (let ((?x67016 (* ?x66982 l_0_11_268)))
 (let ((?x66979 (* 2.0 l_0_11_252)))
 (let ((?x67014 (* ?x66979 l_0_11_267)))
 (let ((?x66976 (* 2.0 l_0_11_251)))
 (let ((?x67012 (* ?x66976 l_0_11_266)))
 (let ((?x66973 (* 2.0 l_0_11_250)))
 (let ((?x67010 (* ?x66973 l_0_11_265)))
 (let ((?x64648 (* 2.0 l_0_11_25)))
 (let ((?x64714 (* ?x64648 l_0_11_40)))
 (let ((?x66969 (* 2.0 l_0_11_249)))
 (let ((?x67007 (* ?x66969 l_0_11_264)))
 (let ((?x66966 (* 2.0 l_0_11_248)))
 (let ((?x43683 (* ?x66966 l_0_11_263)))
 (let ((?x66963 (* 2.0 l_0_11_247)))
 (let ((?x54543 (* ?x66963 l_0_11_262)))
 (let ((?x63899 (* 2.0 l_0_11_24)))
 (let ((?x64712 (* ?x63899 l_0_11_39)))
 (let ((?x63627 (* 2.0 l_0_11_23)))
 (let ((?x64710 (* ?x63627 l_0_11_38)))
 (let ((?x64093 (* 2.0 l_0_11_22)))
 (let ((?x64708 (* ?x64093 l_0_11_37)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x65689 (* ?x62913 l_0_11_139)))
 (let ((?x67009 (+ (+ (+ (+ (+ (+ (+ ?x65689 ?x64708) ?x64710) ?x64712) ?x54543) ?x43683) ?x67007) ?x64714)))
 (let ((?x67020 (+ (+ (+ (+ (+ (+ (+ ?x67009 ?x67010) ?x67012) ?x67014) ?x67016) ?x64716) ?x64718) ?x64720)))
 (let ((?x67027 (- (- (- (- (- (- (- ?x67020 ?x64722) ?x64724) ?x64726) ?x64728) ?x64730) ?x64732) ?x64734)))
 (= (- ?x67027 ?x65719) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64801 (* l_0_11_81 l_0_11_81)))
 (let ((?x64799 (* l_0_11_80 l_0_11_80)))
 (let ((?x64797 (* l_0_11_79 l_0_11_79)))
 (let ((?x64795 (* l_0_11_78 l_0_11_78)))
 (let ((?x64793 (* l_0_11_77 l_0_11_77)))
 (let ((?x64791 (* l_0_11_76 l_0_11_76)))
 (let ((?x64789 (* l_0_11_75 l_0_11_75)))
 (let ((?x64787 (* l_0_11_74 l_0_11_74)))
 (let ((?x64785 (* l_0_11_36 l_0_11_36)))
 (let ((?x64783 (* l_0_11_35 l_0_11_35)))
 (let ((?x64781 (* l_0_11_34 l_0_11_34)))
 (let ((?x64779 (* l_0_11_33 l_0_11_33)))
 (let ((?x64777 (* l_0_11_32 l_0_11_32)))
 (let ((?x64775 (* l_0_11_31 l_0_11_31)))
 (let ((?x64773 (* l_0_11_30 l_0_11_30)))
 (let ((?x64805 (* l_0_11_29 l_0_11_29)))
 (let ((?x67082 (* l_0_11_261 l_0_11_261)))
 (let ((?x67080 (* l_0_11_260 l_0_11_260)))
 (let ((?x67078 (* l_0_11_259 l_0_11_259)))
 (let ((?x67076 (* l_0_11_258 l_0_11_258)))
 (let ((?x67074 (* l_0_11_257 l_0_11_257)))
 (let ((?x67072 (* l_0_11_256 l_0_11_256)))
 (let ((?x67073 (+ (+ (* l_0_11_254 l_0_11_254) (* l_0_11_255 l_0_11_255)) ?x67072)))
 (let ((?x67085 (+ (+ (+ (+ (+ (+ (+ ?x67073 ?x67074) ?x67076) ?x67078) ?x67080) ?x67082) ?x64805) ?x64773)))
 (let ((?x67092 (- (+ (+ (+ (+ (+ (+ ?x67085 ?x64775) ?x64777) ?x64779) ?x64781) ?x64783) ?x64785) ?x64787)))
 (let ((?x67099 (- (- (- (- (- (- (- ?x67092 ?x64789) ?x64791) ?x64793) ?x64795) ?x64797) ?x64799) ?x64801)))
 (= ?x67099 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x64868 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64865 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64862 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64859 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64856 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64853 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64850 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64847 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64844 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64841 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64838 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64835 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64832 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63933 (* 2.0 l_0_11_31)))
 (let ((?x64829 (* ?x63933 l_0_11_39)))
 (let ((?x63930 (* 2.0 l_0_11_30)))
 (let ((?x64827 (* ?x63930 l_0_11_38)))
 (let ((?x64119 (* 2.0 l_0_11_29)))
 (let ((?x65397 (* ?x64119 l_0_11_37)))
 (let ((?x67134 (* (* 2.0 l_0_11_261) l_0_11_269)))
 (let ((?x67131 (* (* 2.0 l_0_11_260) l_0_11_268)))
 (let ((?x67128 (* (* 2.0 l_0_11_259) l_0_11_267)))
 (let ((?x67125 (* (* 2.0 l_0_11_258) l_0_11_266)))
 (let ((?x67122 (* (* 2.0 l_0_11_257) l_0_11_265)))
 (let ((?x67119 (* (* 2.0 l_0_11_256) l_0_11_264)))
 (let ((?x67116 (* (* 2.0 l_0_11_255) l_0_11_263)))
 (let ((?x67114 (* (* 2.0 l_0_11_254) l_0_11_262)))
 (let ((?x67135 (+ (+ (+ (+ (+ (+ (+ ?x67114 ?x67116) ?x67119) ?x67122) ?x67125) ?x67128) ?x67131) ?x67134)))
 (let ((?x67142 (+ (+ (+ (+ (+ (+ (+ ?x67135 ?x65397) ?x64827) ?x64829) ?x64832) ?x64835) ?x64838) ?x64841)))
 (let ((?x67149 (- (- (- (- (- (- (+ ?x67142 ?x64844) ?x64847) ?x64850) ?x64853) ?x64856) ?x64859) ?x64862)))
 (= (- (- ?x67149 ?x64865) ?x64868) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x64949 (* l_0_11_90 l_0_11_90)))
 (let ((?x64947 (* l_0_11_89 l_0_11_89)))
 (let ((?x64945 (* l_0_11_88 l_0_11_88)))
 (let ((?x64943 (* l_0_11_87 l_0_11_87)))
 (let ((?x64941 (* l_0_11_86 l_0_11_86)))
 (let ((?x64939 (* l_0_11_85 l_0_11_85)))
 (let ((?x64937 (* l_0_11_84 l_0_11_84)))
 (let ((?x64935 (* l_0_11_83 l_0_11_83)))
 (let ((?x64933 (* l_0_11_82 l_0_11_82)))
 (let ((?x64931 (* l_0_11_45 l_0_11_45)))
 (let ((?x64929 (* l_0_11_44 l_0_11_44)))
 (let ((?x64927 (* l_0_11_43 l_0_11_43)))
 (let ((?x64925 (* l_0_11_42 l_0_11_42)))
 (let ((?x64912 (* l_0_11_41 l_0_11_41)))
 (let ((?x64909 (* l_0_11_40 l_0_11_40)))
 (let ((?x64905 (* l_0_11_39 l_0_11_39)))
 (let ((?x64901 (* l_0_11_38 l_0_11_38)))
 (let ((?x64953 (* l_0_11_37 l_0_11_37)))
 (let ((?x31938 (* l_0_11_270 l_0_11_270)))
 (let ((?x33015 (* l_0_11_269 l_0_11_269)))
 (let ((?x54600 (* l_0_11_268 l_0_11_268)))
 (let ((?x54639 (* l_0_11_267 l_0_11_267)))
 (let ((?x33049 (* l_0_11_266 l_0_11_266)))
 (let ((?x54622 (* l_0_11_265 l_0_11_265)))
 (let ((?x54612 (* l_0_11_264 l_0_11_264)))
 (let ((?x54620 (+ (+ (* l_0_11_262 l_0_11_262) (* l_0_11_263 l_0_11_263)) ?x54612)))
 (let ((?x54637 (+ (+ (+ (+ (+ (+ (+ ?x54620 ?x54622) ?x33049) ?x54639) ?x54600) ?x33015) ?x31938) ?x64953)))
 (let ((?x67186 (+ (+ (+ (+ (+ (+ (+ ?x54637 ?x64901) ?x64905) ?x64909) ?x64912) ?x64925) ?x64927) ?x64929)))
 (let ((?x67193 (- (- (- (- (- (- (+ ?x67186 ?x64931) ?x64933) ?x64935) ?x64937) ?x64939) ?x64941) ?x64943)))
 (= (- (- (- ?x67193 ?x64945) ?x64947) ?x64949) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x67211 (* ?x65067 l_0_11_92)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_137) ?x67211) 0.0))))
(assert
 (let ((?x66982 (* 2.0 l_0_11_253)))
 (let ((?x67016 (* ?x66982 l_0_11_268)))
 (let ((?x66979 (* 2.0 l_0_11_252)))
 (let ((?x67014 (* ?x66979 l_0_11_267)))
 (let ((?x66976 (* 2.0 l_0_11_251)))
 (let ((?x67012 (* ?x66976 l_0_11_266)))
 (let ((?x66973 (* 2.0 l_0_11_250)))
 (let ((?x67010 (* ?x66973 l_0_11_265)))
 (let ((?x66969 (* 2.0 l_0_11_249)))
 (let ((?x67007 (* ?x66969 l_0_11_264)))
 (let ((?x66966 (* 2.0 l_0_11_248)))
 (let ((?x43683 (* ?x66966 l_0_11_263)))
 (let ((?x66963 (* 2.0 l_0_11_247)))
 (let ((?x54543 (* ?x66963 l_0_11_262)))
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67259 (* ?x67258 l_0_11_178)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67256 (* ?x67255 l_0_11_177)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67253 (* ?x67252 l_0_11_176)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67250 (* ?x67249 l_0_11_175)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67247 (* ?x67246 l_0_11_174)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67244 (* ?x67243 l_0_11_173)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67241 (* ?x67240 l_0_11_172)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67238 (* ?x62913 l_0_11_146)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67236 (* ?x67235 l_0_11_133)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67233 (* ?x67232 l_0_11_132)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67230 (* ?x67229 l_0_11_131)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67227 (* ?x67226 l_0_11_130)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67224 (* ?x65021 l_0_11_129)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67222 (* ?x65018 l_0_11_128)))
 (let ((?x63421 (* (- 2.0) l_0_11_101)))
 (let ((?x54713 (* ?x63421 l_0_11_91)))
 (let ((?x67228 (+ (+ (+ (+ ?x54713 (* (* 2.0 l_0_11_112) l_0_11_127)) ?x67222) ?x67224) ?x67227)))
 (let ((?x67248 (- (- (- (+ (+ (+ (+ ?x67228 ?x67230) ?x67233) ?x67236) ?x67238) ?x67241) ?x67244) ?x67247)))
 (let ((?x67263 (- (- (- (- (- (- (- ?x67248 ?x67250) ?x67253) ?x67256) ?x67259) ?x54543) ?x43683) ?x67007)))
 (= (- (- (- (- ?x67263 ?x67010) ?x67012) ?x67014) ?x67016) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x62914 (* ?x62913 l_0_11_151)))
 (= (+ (* (* (- 2.0) l_0_11_106) l_0_11_91) ?x62914) 0.0))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67306 (* ?x62913 l_0_11_157)))
 (= (+ (* (* (- 2.0) l_0_11_112) l_0_11_91) ?x67306) 0.0))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67313 (* ?x62913 l_0_11_164)))
 (= (+ (* (* (- 2.0) l_0_11_119) l_0_11_91) ?x67313) 0.0))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67324 (* ?x62913 l_0_11_172)))
 (= (+ (* (* (- 2.0) l_0_11_127) l_0_11_91) ?x67324) 0.0))))
(assert
 (let ((?x67342 (* l_0_11_93 l_0_11_93)))
 (let ((?x67340 (* l_0_11_92 l_0_11_92)))
 (let ((?x67334 (* l_0_11_138 l_0_11_138)))
 (let ((?x67332 (* l_0_11_137 l_0_11_137)))
 (let ((?x67335 (+ ?x67332 ?x67334)))
 (= (- (- ?x67335 ?x67340) ?x67342) 0.0)))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x66144 (* ?x65150 l_0_11_95)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x66142 (* ?x65147 l_0_11_94)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x66132 (* ?x63245 l_0_11_140)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x66130 (* ?x63242 l_0_11_139)))
 (= (- (- (+ ?x66130 ?x66132) ?x66142) ?x66144) 0.0))))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67363 (* ?x63245 l_0_11_147)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67361 (* ?x63242 l_0_11_146)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67359 (* ?x63424 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_101) l_0_11_92) ?x67359) ?x67361) ?x67363) 0.0))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x63246 (* ?x63245 l_0_11_152)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x63243 (* ?x63242 l_0_11_151)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63236 (* ?x63082 l_0_11_93)))
 (let ((?x63247 (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_92) ?x63236) ?x63243) ?x63246)))
 (= ?x63247 0.0)))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67385 (* ?x63245 l_0_11_158)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67383 (* ?x63242 l_0_11_157)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67381 (* ?x65018 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_112) l_0_11_92) ?x67381) ?x67383) ?x67385) 0.0))))))))
(assert
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67259 (* ?x67258 l_0_11_178)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67256 (* ?x67255 l_0_11_177)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67253 (* ?x67252 l_0_11_176)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67250 (* ?x67249 l_0_11_175)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67247 (* ?x67246 l_0_11_174)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67244 (* ?x67243 l_0_11_173)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67241 (* ?x67240 l_0_11_172)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67412 (* ?x63245 l_0_11_165)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67410 (* ?x63242 l_0_11_164)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67408 (* ?x65383 l_0_11_93)))
 (let ((?x16372 (* 2.0 l_0_11_119)))
 (let ((?x67406 (* ?x16372 l_0_11_92)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67236 (* ?x67235 l_0_11_133)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67233 (* ?x67232 l_0_11_132)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67230 (* ?x67229 l_0_11_131)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67227 (* ?x67226 l_0_11_130)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67224 (* ?x65021 l_0_11_129)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67222 (* ?x65018 l_0_11_128)))
 (let ((?x67403 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_127) ?x67222) ?x67224) ?x67227) ?x67230)))
 (let ((?x67405 (- (- ?x67403 ?x67233) ?x67236)))
 (let ((?x67416 (+ (+ (+ (+ (+ (- (- ?x67405 ?x67406) ?x67408) ?x67410) ?x67412) ?x67241) ?x67244) ?x67247)))
 (= (+ (+ (+ (+ ?x67416 ?x67250) ?x67253) ?x67256) ?x67259) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x54923 (* ?x63245 l_0_11_173)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x54981 (* ?x63242 l_0_11_172)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x19547 (* ?x65443 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_127) l_0_11_92) ?x19547) ?x54981) ?x54923) 0.0))))))))
(assert
 (let ((?x66331 (* l_0_11_96 l_0_11_96)))
 (let ((?x66329 (* l_0_11_95 l_0_11_95)))
 (let ((?x66327 (* l_0_11_94 l_0_11_94)))
 (let ((?x66313 (* l_0_11_141 l_0_11_141)))
 (let ((?x67427 (+ (+ (* l_0_11_139 l_0_11_139) (* l_0_11_140 l_0_11_140)) ?x66313)))
 (= (- (- (- ?x67427 ?x66327) ?x66329) ?x66331) 0.0)))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66608 (* ?x63294 l_0_11_148)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66606 (* ?x63291 l_0_11_147)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66603 (* ?x63288 l_0_11_146)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x66598 (* ?x63436 l_0_11_96)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x66596 (* ?x63424 l_0_11_95)))
 (let ((?x67438 (+ (+ (- (- (* (* (- 2.0) l_0_11_101) l_0_11_94) ?x66596) ?x66598) ?x66603) ?x66606)))
 (= (+ ?x67438 ?x66608) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x63295 (* ?x63294 l_0_11_153)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x63292 (* ?x63291 l_0_11_152)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x63289 (* ?x63288 l_0_11_151)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63286 (* ?x63085 l_0_11_96)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63284 (* ?x63082 l_0_11_95)))
 (let ((?x63293 (+ (+ (- (- (* (* (- 2.0) l_0_11_106) l_0_11_94) ?x63284) ?x63286) ?x63289) ?x63292)))
 (let ((?x63296 (+ ?x63293 ?x63295)))
 (= ?x63296 0.0))))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66698 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66696 (* ?x63291 l_0_11_158)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66693 (* ?x63288 l_0_11_157)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x18034 (* ?x65021 l_0_11_96)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x54113 (* ?x65018 l_0_11_95)))
 (let ((?x67447 (+ (+ (- (- (* (* (- 2.0) l_0_11_112) l_0_11_94) ?x54113) ?x18034) ?x66693) ?x66696)))
 (= (+ ?x67447 ?x66698) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66731 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66729 (* ?x63291 l_0_11_165)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x54171 (* ?x63288 l_0_11_164)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x54216 (* ?x65386 l_0_11_96)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x32539 (* ?x65383 l_0_11_95)))
 (let ((?x43927 (+ (+ (- (- (* (* (- 2.0) l_0_11_119) l_0_11_94) ?x32539) ?x54216) ?x54171) ?x66729)))
 (= (+ ?x43927 ?x66731) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66786 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66784 (* ?x63291 l_0_11_173)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66781 (* ?x63288 l_0_11_172)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x66778 (* ?x65446 l_0_11_96)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x66776 (* ?x65443 l_0_11_95)))
 (let ((?x55005 (+ (+ (- (- (* (* (- 2.0) l_0_11_127) l_0_11_94) ?x66776) ?x66778) ?x66781) ?x66784)))
 (= (+ ?x55005 ?x66786) 0.0)))))))))))))
(assert
 (let ((?x67478 (* l_0_11_150 l_0_11_150)))
 (let ((?x67476 (* l_0_11_149 l_0_11_149)))
 (let ((?x67474 (* l_0_11_148 l_0_11_148)))
 (let ((?x67472 (* l_0_11_147 l_0_11_147)))
 (let ((?x67470 (* l_0_11_146 l_0_11_146)))
 (let ((?x67468 (* l_0_11_105 l_0_11_105)))
 (let ((?x67466 (* l_0_11_104 l_0_11_104)))
 (let ((?x67464 (* l_0_11_103 l_0_11_103)))
 (let ((?x67465 (- (- (* (- l_0_11_101) l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x67464)))
 (let ((?x67479 (+ (+ (+ (+ (+ (- (- ?x67465 ?x67466) ?x67468) ?x67470) ?x67472) ?x67474) ?x67476) ?x67478)))
 (= ?x67479 0.0))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x63464 (* ?x63463 l_0_11_155)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x63461 (* ?x63460 l_0_11_154)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x63458 (* ?x63457 l_0_11_153)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x63455 (* ?x63454 l_0_11_152)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x63452 (* ?x63451 l_0_11_151)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x63443 (* ?x63442 l_0_11_110)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x63440 (* ?x63439 l_0_11_109)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x63437 (* ?x63436 l_0_11_108)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x63434 (* ?x63424 l_0_11_107)))
 (let ((?x63444 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_106) ?x63434) ?x63437) ?x63440) ?x63443)))
 (= (+ (+ (+ (+ (+ ?x63444 ?x63452) ?x63455) ?x63458) ?x63461) ?x63464) 0.0)))))))))))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67517 (* ?x63463 l_0_11_161)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67515 (* ?x63460 l_0_11_160)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67513 (* ?x63457 l_0_11_159)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67511 (* ?x63454 l_0_11_158)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67509 (* ?x63451 l_0_11_157)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67507 (* ?x63442 l_0_11_116)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67505 (* ?x63439 l_0_11_115)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67503 (* ?x63436 l_0_11_114)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67501 (* ?x63424 l_0_11_113)))
 (let ((?x67508 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_112) ?x67501) ?x67503) ?x67505) ?x67507)))
 (= (+ (+ (+ (+ (+ ?x67508 ?x67509) ?x67511) ?x67513) ?x67515) ?x67517) 0.0)))))))))))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67561 (* ?x63463 l_0_11_168)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67559 (* ?x63460 l_0_11_167)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67557 (* ?x63457 l_0_11_166)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67555 (* ?x63454 l_0_11_165)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67553 (* ?x63451 l_0_11_164)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67551 (* ?x63442 l_0_11_123)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67541 (* ?x63439 l_0_11_122)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67537 (* ?x63436 l_0_11_121)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x55251 (* ?x63424 l_0_11_120)))
 (let ((?x67552 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_119) ?x55251) ?x67537) ?x67541) ?x67551)))
 (= (+ (+ (+ (+ (+ ?x67552 ?x67553) ?x67555) ?x67557) ?x67559) ?x67561) 0.0)))))))))))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67611 (* ?x63463 l_0_11_176)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67609 (* ?x63460 l_0_11_175)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67607 (* ?x63457 l_0_11_174)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67605 (* ?x63454 l_0_11_173)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67603 (* ?x63451 l_0_11_172)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67601 (* ?x63442 l_0_11_131)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67591 (* ?x63439 l_0_11_130)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67588 (* ?x63436 l_0_11_129)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67584 (* ?x63424 l_0_11_128)))
 (let ((?x67602 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_127) ?x67584) ?x67588) ?x67591) ?x67601)))
 (= (+ (+ (+ (+ (+ ?x67602 ?x67603) ?x67605) ?x67607) ?x67609) ?x67611) 0.0)))))))))))))))))))))
(assert
 (let ((?x63548 (* l_0_11_156 l_0_11_156)))
 (let ((?x63546 (* l_0_11_155 l_0_11_155)))
 (let ((?x63544 (* l_0_11_154 l_0_11_154)))
 (let ((?x63542 (* l_0_11_153 l_0_11_153)))
 (let ((?x63540 (* l_0_11_152 l_0_11_152)))
 (let ((?x63538 (* l_0_11_151 l_0_11_151)))
 (let ((?x63536 (* l_0_11_111 l_0_11_111)))
 (let ((?x63534 (* l_0_11_110 l_0_11_110)))
 (let ((?x63522 (* l_0_11_109 l_0_11_109)))
 (let ((?x63518 (* l_0_11_108 l_0_11_108)))
 (let ((?x63520 (- (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x63518)))
 (let ((?x63545 (+ (+ (+ (+ (- (- (- ?x63520 ?x63522) ?x63534) ?x63536) ?x63538) ?x63540) ?x63542) ?x63544)))
 (let ((?x63549 (+ (+ ?x63545 ?x63546) ?x63548)))
 (= ?x63549 0.0)))))))))))))))
(assert
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63623 (* ?x63112 l_0_11_162)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63621 (* ?x63109 l_0_11_161)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63619 (* ?x63106 l_0_11_160)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63617 (* ?x63103 l_0_11_159)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63615 (* ?x63100 l_0_11_158)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63613 (* ?x63097 l_0_11_157)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63611 (* ?x63094 l_0_11_117)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63609 (* ?x63091 l_0_11_116)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63607 (* ?x63088 l_0_11_115)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63605 (* ?x63085 l_0_11_114)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63082 l_0_11_113)))
 (let ((?x63610 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x63593) ?x63605) ?x63607) ?x63609)))
 (let ((?x63624 (+ (+ (+ (+ (+ (+ (- ?x63610 ?x63611) ?x63613) ?x63615) ?x63617) ?x63619) ?x63621) ?x63623)))
 (= ?x63624 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63721 (* ?x63112 l_0_11_177)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63719 (* ?x63109 l_0_11_176)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63717 (* ?x63106 l_0_11_175)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63715 (* ?x63103 l_0_11_174)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63713 (* ?x63100 l_0_11_173)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63711 (* ?x63097 l_0_11_172)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63709 (* ?x63094 l_0_11_132)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63707 (* ?x63091 l_0_11_131)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63705 (* ?x63088 l_0_11_130)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63703 (* ?x63085 l_0_11_129)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63701 (* ?x63082 l_0_11_128)))
 (let ((?x63708 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_127) ?x63701) ?x63703) ?x63705) ?x63707)))
 (let ((?x63722 (+ (+ (+ (+ (+ (+ (- ?x63708 ?x63709) ?x63711) ?x63713) ?x63715) ?x63717) ?x63719) ?x63721)))
 (= ?x63722 0.0))))))))))))))))))))))))))
(assert
 (let ((?x67668 (* l_0_11_163 l_0_11_163)))
 (let ((?x67666 (* l_0_11_162 l_0_11_162)))
 (let ((?x67664 (* l_0_11_161 l_0_11_161)))
 (let ((?x67662 (* l_0_11_160 l_0_11_160)))
 (let ((?x67660 (* l_0_11_159 l_0_11_159)))
 (let ((?x67658 (* l_0_11_158 l_0_11_158)))
 (let ((?x67656 (* l_0_11_157 l_0_11_157)))
 (let ((?x67654 (* l_0_11_118 l_0_11_118)))
 (let ((?x67652 (* l_0_11_117 l_0_11_117)))
 (let ((?x67650 (* l_0_11_116 l_0_11_116)))
 (let ((?x67648 (* l_0_11_115 l_0_11_115)))
 (let ((?x67646 (* l_0_11_114 l_0_11_114)))
 (let ((?x67647 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x67646)))
 (let ((?x67661 (+ (+ (+ (- (- (- (- ?x67647 ?x67648) ?x67650) ?x67652) ?x67654) ?x67656) ?x67658) ?x67660)))
 (= (+ (+ (+ (+ ?x67661 ?x67662) ?x67664) ?x67666) ?x67668) 0.0))))))))))))))))
(assert
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67726 (* ?x67258 l_0_11_170)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67724 (* ?x67255 l_0_11_169)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67722 (* ?x67252 l_0_11_168)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67720 (* ?x67249 l_0_11_167)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67718 (* ?x67246 l_0_11_166)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67716 (* ?x67243 l_0_11_165)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67714 (* ?x67240 l_0_11_164)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67712 (* ?x67235 l_0_11_125)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67710 (* ?x67232 l_0_11_124)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67708 (* ?x67229 l_0_11_123)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67706 (* ?x67226 l_0_11_122)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67704 (* ?x65021 l_0_11_121)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67702 (* ?x65018 l_0_11_120)))
 (let ((?x67709 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_119) ?x67702) ?x67704) ?x67706) ?x67708)))
 (let ((?x67723 (+ (+ (+ (+ (+ (- (- ?x67709 ?x67710) ?x67712) ?x67714) ?x67716) ?x67718) ?x67720) ?x67722)))
 (= (+ (+ ?x67723 ?x67724) ?x67726) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67259 (* ?x67258 l_0_11_178)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67256 (* ?x67255 l_0_11_177)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67253 (* ?x67252 l_0_11_176)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67250 (* ?x67249 l_0_11_175)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67247 (* ?x67246 l_0_11_174)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67244 (* ?x67243 l_0_11_173)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67241 (* ?x67240 l_0_11_172)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67236 (* ?x67235 l_0_11_133)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67233 (* ?x67232 l_0_11_132)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67230 (* ?x67229 l_0_11_131)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67227 (* ?x67226 l_0_11_130)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67224 (* ?x65021 l_0_11_129)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67222 (* ?x65018 l_0_11_128)))
 (let ((?x67403 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_127) ?x67222) ?x67224) ?x67227) ?x67230)))
 (let ((?x67405 (- (- ?x67403 ?x67233) ?x67236)))
 (let ((?x67768 (+ (+ (+ (+ (+ (+ (+ ?x67405 ?x67241) ?x67244) ?x67247) ?x67250) ?x67253) ?x67256) ?x67259)))
 (= ?x67768 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x67812 (* l_0_11_171 l_0_11_171)))
 (let ((?x67810 (* l_0_11_170 l_0_11_170)))
 (let ((?x67808 (* l_0_11_169 l_0_11_169)))
 (let ((?x67806 (* l_0_11_168 l_0_11_168)))
 (let ((?x67804 (* l_0_11_167 l_0_11_167)))
 (let ((?x67802 (* l_0_11_166 l_0_11_166)))
 (let ((?x67800 (* l_0_11_165 l_0_11_165)))
 (let ((?x67798 (* l_0_11_164 l_0_11_164)))
 (let ((?x67796 (* l_0_11_126 l_0_11_126)))
 (let ((?x67794 (* l_0_11_125 l_0_11_125)))
 (let ((?x67792 (* l_0_11_124 l_0_11_124)))
 (let ((?x67790 (* l_0_11_123 l_0_11_123)))
 (let ((?x67788 (* l_0_11_122 l_0_11_122)))
 (let ((?x67786 (* l_0_11_121 l_0_11_121)))
 (let ((?x67787 (- (- (* (- l_0_11_119) l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67786)))
 (let ((?x67801 (+ (+ (- (- (- (- (- ?x67787 ?x67788) ?x67790) ?x67792) ?x67794) ?x67796) ?x67798) ?x67800)))
 (= (+ (+ (+ (+ (+ (+ ?x67801 ?x67802) ?x67804) ?x67806) ?x67808) ?x67810) ?x67812) 0.0))))))))))))))))))
(assert
 (let ((?x67891 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67888 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67885 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67882 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67879 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67876 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67873 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67870 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67867 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67864 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67861 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67858 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67855 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x67852 (* ?x65386 l_0_11_129)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67850 (* ?x65383 l_0_11_128)))
 (let ((?x67859 (- (- (- (- (* (* (- 2.0) l_0_11_119) l_0_11_127) ?x67850) ?x67852) ?x67855) ?x67858)))
 (let ((?x67880 (+ (+ (+ (+ (- (- (- ?x67859 ?x67861) ?x67864) ?x67867) ?x67870) ?x67873) ?x67876) ?x67879)))
 (= (+ (+ (+ (+ ?x67880 ?x67882) ?x67885) ?x67888) ?x67891) 0.0)))))))))))))))))))))
(assert
 (let ((?x67983 (* l_0_11_180 l_0_11_180)))
 (let ((?x67981 (* l_0_11_179 l_0_11_179)))
 (let ((?x67979 (* l_0_11_178 l_0_11_178)))
 (let ((?x67977 (* l_0_11_177 l_0_11_177)))
 (let ((?x67975 (* l_0_11_176 l_0_11_176)))
 (let ((?x67973 (* l_0_11_175 l_0_11_175)))
 (let ((?x67971 (* l_0_11_174 l_0_11_174)))
 (let ((?x67969 (* l_0_11_173 l_0_11_173)))
 (let ((?x67967 (* l_0_11_172 l_0_11_172)))
 (let ((?x67965 (* l_0_11_135 l_0_11_135)))
 (let ((?x67963 (* l_0_11_134 l_0_11_134)))
 (let ((?x67961 (* l_0_11_133 l_0_11_133)))
 (let ((?x67959 (* l_0_11_132 l_0_11_132)))
 (let ((?x67946 (* l_0_11_131 l_0_11_131)))
 (let ((?x67943 (* l_0_11_130 l_0_11_130)))
 (let ((?x67939 (* l_0_11_129 l_0_11_129)))
 (let ((?x67941 (- (- (* (- l_0_11_127) l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x67939)))
 (let ((?x67968 (+ (- (- (- (- (- (- ?x67941 ?x67943) ?x67946) ?x67959) ?x67961) ?x67963) ?x67965) ?x67967)))
 (let ((?x67982 (+ (+ (+ (+ (+ (+ (+ ?x67968 ?x67969) ?x67971) ?x67973) ?x67975) ?x67977) ?x67979) ?x67981)))
 (= (+ ?x67982 ?x67983) 0.0)))))))))))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x67211 (* ?x65067 l_0_11_92)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_137) ?x67211) 0.0))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65068 (* ?x65067 l_0_11_97)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x29689 (* ?x62913 l_0_11_142)))
 (= (- ?x29689 ?x65068) 0.0))))))
(assert
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66210 (* ?x66097 l_0_11_255)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66208 (* ?x17323 l_0_11_254)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67412 (* ?x63245 l_0_11_165)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67410 (* ?x63242 l_0_11_164)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67238 (* ?x62913 l_0_11_146)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67408 (* ?x65383 l_0_11_93)))
 (let ((?x16372 (* 2.0 l_0_11_119)))
 (let ((?x67406 (* ?x16372 l_0_11_92)))
 (let ((?x63421 (* (- 2.0) l_0_11_101)))
 (let ((?x54713 (* ?x63421 l_0_11_91)))
 (let ((?x68030 (- (- (- (- (+ (+ (+ ?x54713 ?x67406) ?x67408) ?x67238) ?x67410) ?x67412) ?x66208) ?x66210)))
 (= ?x68030 0.0)))))))))))))))))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67306 (* ?x62913 l_0_11_157)))
 (= (+ (* (* (- 2.0) l_0_11_112) l_0_11_91) ?x67306) 0.0))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67313 (* ?x62913 l_0_11_164)))
 (= (+ (* (* (- 2.0) l_0_11_119) l_0_11_91) ?x67313) 0.0))))
(assert
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67324 (* ?x62913 l_0_11_172)))
 (= (+ (* (* (- 2.0) l_0_11_127) l_0_11_91) ?x67324) 0.0))))
(assert
 (let ((?x67342 (* l_0_11_93 l_0_11_93)))
 (let ((?x67340 (* l_0_11_92 l_0_11_92)))
 (let ((?x67334 (* l_0_11_138 l_0_11_138)))
 (let ((?x67332 (* l_0_11_137 l_0_11_137)))
 (let ((?x67335 (+ ?x67332 ?x67334)))
 (= (- (- ?x67335 ?x67340) ?x67342) 0.0)))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x66144 (* ?x65150 l_0_11_95)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x66142 (* ?x65147 l_0_11_94)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x66132 (* ?x63245 l_0_11_140)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x66130 (* ?x63242 l_0_11_139)))
 (= (- (- (+ ?x66130 ?x66132) ?x66142) ?x66144) 0.0))))))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x65151 (* ?x65150 l_0_11_98)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x65148 (* ?x65147 l_0_11_97)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x16271 (* ?x63245 l_0_11_143)))
 (let ((?x16309 (+ (* (* 2.0 l_0_11_137) l_0_11_142) ?x16271)))
 (= (- (- ?x16309 ?x65148) ?x65151) 0.0)))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67363 (* ?x63245 l_0_11_147)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67361 (* ?x63242 l_0_11_146)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67359 (* ?x63424 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_101) l_0_11_92) ?x67359) ?x67361) ?x67363) 0.0))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67385 (* ?x63245 l_0_11_158)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67383 (* ?x63242 l_0_11_157)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67381 (* ?x65018 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_112) l_0_11_92) ?x67381) ?x67383) ?x67385) 0.0))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67412 (* ?x63245 l_0_11_165)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67410 (* ?x63242 l_0_11_164)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67408 (* ?x65383 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_119) l_0_11_92) ?x67408) ?x67410) ?x67412) 0.0))))))))
(assert
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x54923 (* ?x63245 l_0_11_173)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x54981 (* ?x63242 l_0_11_172)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x19547 (* ?x65443 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_127) l_0_11_92) ?x19547) ?x54981) ?x54923) 0.0))))))))
(assert
 (let ((?x66331 (* l_0_11_96 l_0_11_96)))
 (let ((?x66329 (* l_0_11_95 l_0_11_95)))
 (let ((?x66327 (* l_0_11_94 l_0_11_94)))
 (let ((?x66313 (* l_0_11_141 l_0_11_141)))
 (let ((?x67427 (+ (+ (* l_0_11_139 l_0_11_139) (* l_0_11_140 l_0_11_140)) ?x66313)))
 (= (- (- (- ?x67427 ?x66327) ?x66329) ?x66331) 0.0)))))))
(assert
 (let ((?x65189 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x65186 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x65183 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x65173 (* ?x63294 l_0_11_144)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x65171 (* ?x63291 l_0_11_143)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x65170 (* ?x63288 l_0_11_142)))
 (let ((?x65174 (+ (+ ?x65170 ?x65171) ?x65173)))
 (= (- (- (- ?x65174 ?x65183) ?x65186) ?x65189) 0.0))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66608 (* ?x63294 l_0_11_148)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66606 (* ?x63291 l_0_11_147)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66603 (* ?x63288 l_0_11_146)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x66598 (* ?x63436 l_0_11_96)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x66596 (* ?x63424 l_0_11_95)))
 (let ((?x67438 (+ (+ (- (- (* (* (- 2.0) l_0_11_101) l_0_11_94) ?x66596) ?x66598) ?x66603) ?x66606)))
 (= (+ ?x67438 ?x66608) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66698 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66696 (* ?x63291 l_0_11_158)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66693 (* ?x63288 l_0_11_157)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x18034 (* ?x65021 l_0_11_96)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x54113 (* ?x65018 l_0_11_95)))
 (let ((?x67447 (+ (+ (- (- (* (* (- 2.0) l_0_11_112) l_0_11_94) ?x54113) ?x18034) ?x66693) ?x66696)))
 (= (+ ?x67447 ?x66698) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66731 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66729 (* ?x63291 l_0_11_165)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x54171 (* ?x63288 l_0_11_164)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x54216 (* ?x65386 l_0_11_96)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x32539 (* ?x65383 l_0_11_95)))
 (let ((?x43927 (+ (+ (- (- (* (* (- 2.0) l_0_11_119) l_0_11_94) ?x32539) ?x54216) ?x54171) ?x66729)))
 (= (+ ?x43927 ?x66731) 0.0)))))))))))))
(assert
 (let ((?x63294 (* 2.0 l_0_11_141)))
 (let ((?x66786 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_140)))
 (let ((?x66784 (* ?x63291 l_0_11_173)))
 (let ((?x63288 (* 2.0 l_0_11_139)))
 (let ((?x66781 (* ?x63288 l_0_11_172)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x66778 (* ?x65446 l_0_11_96)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x66776 (* ?x65443 l_0_11_95)))
 (let ((?x55005 (+ (+ (- (- (* (* (- 2.0) l_0_11_127) l_0_11_94) ?x66776) ?x66778) ?x66781) ?x66784)))
 (= (+ ?x55005 ?x66786) 0.0)))))))))))))
(assert
 (let ((?x65258 (* l_0_11_99 l_0_11_99)))
 (let ((?x65256 (* l_0_11_98 l_0_11_98)))
 (let ((?x65254 (* l_0_11_97 l_0_11_97)))
 (let ((?x65245 (* l_0_11_145 l_0_11_145)))
 (let ((?x65243 (* l_0_11_144 l_0_11_144)))
 (let ((?x65241 (* l_0_11_143 l_0_11_143)))
 (let ((?x68079 (+ (+ (* (- l_0_11_100) l_0_11_100) (* l_0_11_142 l_0_11_142)) ?x65241)))
 (= (- (- (- (+ (+ ?x68079 ?x65243) ?x65245) ?x65254) ?x65256) ?x65258) 0.0)))))))))
(assert
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65293 (* ?x63370 l_0_11_149)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65291 (* ?x63367 l_0_11_148)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65289 (* ?x63364 l_0_11_147)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65287 (* ?x63361 l_0_11_146)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x65280 (* ?x63436 l_0_11_99)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x42441 (* ?x63424 l_0_11_98)))
 (let ((?x65278 (* 2.0 l_0_11_101)))
 (let ((?x29907 (* ?x65278 l_0_11_97)))
 (let ((?x65281 (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_104) ?x29907) ?x42441) ?x65280)))
 (= (+ (+ (+ (+ ?x65281 ?x65287) ?x65289) ?x65291) ?x65293) 0.0)))))))))))))))))
(assert
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65395 (* ?x63370 l_0_11_167)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65393 (* ?x63367 l_0_11_166)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65391 (* ?x63364 l_0_11_165)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65389 (* ?x63361 l_0_11_164)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x65387 (* ?x65386 l_0_11_99)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x65384 (* ?x65383 l_0_11_98)))
 (let ((?x16372 (* 2.0 l_0_11_119)))
 (let ((?x29912 (* ?x16372 l_0_11_97)))
 (let ((?x65390 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_122) ?x29912) ?x65384) ?x65387) ?x65389)))
 (let ((?x65396 (+ (+ (+ ?x65390 ?x65391) ?x65393) ?x65395)))
 (= ?x65396 0.0))))))))))))))))))
(assert
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65455 (* ?x63370 l_0_11_175)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65453 (* ?x63367 l_0_11_174)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65451 (* ?x63364 l_0_11_173)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65449 (* ?x63361 l_0_11_172)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x65447 (* ?x65446 l_0_11_99)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x65444 (* ?x65443 l_0_11_98)))
 (let ((?x65440 (* 2.0 l_0_11_127)))
 (let ((?x65441 (* ?x65440 l_0_11_97)))
 (let ((?x65450 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_130) ?x65441) ?x65444) ?x65447) ?x65449)))
 (let ((?x65456 (+ (+ (+ ?x65450 ?x65451) ?x65453) ?x65455)))
 (= ?x65456 0.0))))))))))))))))))
(assert
 (let ((?x67478 (* l_0_11_150 l_0_11_150)))
 (let ((?x67476 (* l_0_11_149 l_0_11_149)))
 (let ((?x67474 (* l_0_11_148 l_0_11_148)))
 (let ((?x67472 (* l_0_11_147 l_0_11_147)))
 (let ((?x67470 (* l_0_11_146 l_0_11_146)))
 (let ((?x67468 (* l_0_11_105 l_0_11_105)))
 (let ((?x67466 (* l_0_11_104 l_0_11_104)))
 (let ((?x67464 (* l_0_11_103 l_0_11_103)))
 (let ((?x67465 (- (- (* (- l_0_11_101) l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x67464)))
 (let ((?x67479 (+ (+ (+ (+ (+ (- (- ?x67465 ?x67466) ?x67468) ?x67470) ?x67472) ?x67474) ?x67476) ?x67478)))
 (= ?x67479 0.0))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67517 (* ?x63463 l_0_11_161)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67515 (* ?x63460 l_0_11_160)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67513 (* ?x63457 l_0_11_159)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67511 (* ?x63454 l_0_11_158)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67509 (* ?x63451 l_0_11_157)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67507 (* ?x63442 l_0_11_116)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67505 (* ?x63439 l_0_11_115)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67503 (* ?x63436 l_0_11_114)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67501 (* ?x63424 l_0_11_113)))
 (let ((?x67508 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_112) ?x67501) ?x67503) ?x67505) ?x67507)))
 (= (+ (+ (+ (+ (+ ?x67508 ?x67509) ?x67511) ?x67513) ?x67515) ?x67517) 0.0)))))))))))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67561 (* ?x63463 l_0_11_168)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67559 (* ?x63460 l_0_11_167)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67557 (* ?x63457 l_0_11_166)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67555 (* ?x63454 l_0_11_165)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67553 (* ?x63451 l_0_11_164)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67551 (* ?x63442 l_0_11_123)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67541 (* ?x63439 l_0_11_122)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67537 (* ?x63436 l_0_11_121)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x55251 (* ?x63424 l_0_11_120)))
 (let ((?x67552 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_119) ?x55251) ?x67537) ?x67541) ?x67551)))
 (= (+ (+ (+ (+ (+ ?x67552 ?x67553) ?x67555) ?x67557) ?x67559) ?x67561) 0.0)))))))))))))))))))))
(assert
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67611 (* ?x63463 l_0_11_176)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67609 (* ?x63460 l_0_11_175)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67607 (* ?x63457 l_0_11_174)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67605 (* ?x63454 l_0_11_173)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67603 (* ?x63451 l_0_11_172)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67601 (* ?x63442 l_0_11_131)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67591 (* ?x63439 l_0_11_130)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67588 (* ?x63436 l_0_11_129)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67584 (* ?x63424 l_0_11_128)))
 (let ((?x67602 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_127) ?x67584) ?x67588) ?x67591) ?x67601)))
 (= (+ (+ (+ (+ (+ ?x67602 ?x67603) ?x67605) ?x67607) ?x67609) ?x67611) 0.0)))))))))))))))))))))
(assert
 (let ((?x67668 (* l_0_11_163 l_0_11_163)))
 (let ((?x67666 (* l_0_11_162 l_0_11_162)))
 (let ((?x67664 (* l_0_11_161 l_0_11_161)))
 (let ((?x67662 (* l_0_11_160 l_0_11_160)))
 (let ((?x67660 (* l_0_11_159 l_0_11_159)))
 (let ((?x67658 (* l_0_11_158 l_0_11_158)))
 (let ((?x67656 (* l_0_11_157 l_0_11_157)))
 (let ((?x67654 (* l_0_11_118 l_0_11_118)))
 (let ((?x67652 (* l_0_11_117 l_0_11_117)))
 (let ((?x67650 (* l_0_11_116 l_0_11_116)))
 (let ((?x67648 (* l_0_11_115 l_0_11_115)))
 (let ((?x67646 (* l_0_11_114 l_0_11_114)))
 (let ((?x67647 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x67646)))
 (let ((?x67661 (+ (+ (+ (- (- (- (- ?x67647 ?x67648) ?x67650) ?x67652) ?x67654) ?x67656) ?x67658) ?x67660)))
 (= (+ (+ (+ (+ ?x67661 ?x67662) ?x67664) ?x67666) ?x67668) 0.0))))))))))))))))
(assert
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67726 (* ?x67258 l_0_11_170)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67724 (* ?x67255 l_0_11_169)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67722 (* ?x67252 l_0_11_168)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67720 (* ?x67249 l_0_11_167)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67718 (* ?x67246 l_0_11_166)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67716 (* ?x67243 l_0_11_165)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67714 (* ?x67240 l_0_11_164)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67712 (* ?x67235 l_0_11_125)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67710 (* ?x67232 l_0_11_124)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67708 (* ?x67229 l_0_11_123)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67706 (* ?x67226 l_0_11_122)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67704 (* ?x65021 l_0_11_121)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67702 (* ?x65018 l_0_11_120)))
 (let ((?x67709 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_119) ?x67702) ?x67704) ?x67706) ?x67708)))
 (let ((?x67723 (+ (+ (+ (+ (+ (- (- ?x67709 ?x67710) ?x67712) ?x67714) ?x67716) ?x67718) ?x67720) ?x67722)))
 (= (+ (+ ?x67723 ?x67724) ?x67726) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67812 (* l_0_11_171 l_0_11_171)))
 (let ((?x67810 (* l_0_11_170 l_0_11_170)))
 (let ((?x67808 (* l_0_11_169 l_0_11_169)))
 (let ((?x67806 (* l_0_11_168 l_0_11_168)))
 (let ((?x67804 (* l_0_11_167 l_0_11_167)))
 (let ((?x67802 (* l_0_11_166 l_0_11_166)))
 (let ((?x67800 (* l_0_11_165 l_0_11_165)))
 (let ((?x67798 (* l_0_11_164 l_0_11_164)))
 (let ((?x67796 (* l_0_11_126 l_0_11_126)))
 (let ((?x67794 (* l_0_11_125 l_0_11_125)))
 (let ((?x67792 (* l_0_11_124 l_0_11_124)))
 (let ((?x67790 (* l_0_11_123 l_0_11_123)))
 (let ((?x67788 (* l_0_11_122 l_0_11_122)))
 (let ((?x67786 (* l_0_11_121 l_0_11_121)))
 (let ((?x67787 (- (- (* (- l_0_11_119) l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67786)))
 (let ((?x67801 (+ (+ (- (- (- (- (- ?x67787 ?x67788) ?x67790) ?x67792) ?x67794) ?x67796) ?x67798) ?x67800)))
 (= (+ (+ (+ (+ (+ (+ ?x67801 ?x67802) ?x67804) ?x67806) ?x67808) ?x67810) ?x67812) 0.0))))))))))))))))))
(assert
 (let ((?x67891 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67888 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67885 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67882 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67879 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67876 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67873 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67870 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67867 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67864 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67861 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67858 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67855 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x67852 (* ?x65386 l_0_11_129)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67850 (* ?x65383 l_0_11_128)))
 (let ((?x67859 (- (- (- (- (* (* (- 2.0) l_0_11_119) l_0_11_127) ?x67850) ?x67852) ?x67855) ?x67858)))
 (let ((?x67880 (+ (+ (+ (+ (- (- (- ?x67859 ?x67861) ?x67864) ?x67867) ?x67870) ?x67873) ?x67876) ?x67879)))
 (= (+ (+ (+ (+ ?x67880 ?x67882) ?x67885) ?x67888) ?x67891) 0.0)))))))))))))))))))))
(assert
 (let ((?x67983 (* l_0_11_180 l_0_11_180)))
 (let ((?x67981 (* l_0_11_179 l_0_11_179)))
 (let ((?x67979 (* l_0_11_178 l_0_11_178)))
 (let ((?x67977 (* l_0_11_177 l_0_11_177)))
 (let ((?x67975 (* l_0_11_176 l_0_11_176)))
 (let ((?x67973 (* l_0_11_175 l_0_11_175)))
 (let ((?x67971 (* l_0_11_174 l_0_11_174)))
 (let ((?x67969 (* l_0_11_173 l_0_11_173)))
 (let ((?x67967 (* l_0_11_172 l_0_11_172)))
 (let ((?x67965 (* l_0_11_135 l_0_11_135)))
 (let ((?x67963 (* l_0_11_134 l_0_11_134)))
 (let ((?x67961 (* l_0_11_133 l_0_11_133)))
 (let ((?x67959 (* l_0_11_132 l_0_11_132)))
 (let ((?x67946 (* l_0_11_131 l_0_11_131)))
 (let ((?x67943 (* l_0_11_130 l_0_11_130)))
 (let ((?x67939 (* l_0_11_129 l_0_11_129)))
 (let ((?x67941 (- (- (* (- l_0_11_127) l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x67939)))
 (let ((?x67968 (+ (- (- (- (- (- (- ?x67941 ?x67943) ?x67946) ?x67959) ?x67961) ?x67963) ?x67965) ?x67967)))
 (let ((?x67982 (+ (+ (+ (+ (+ (+ (+ ?x67968 ?x67969) ?x67971) ?x67973) ?x67975) ?x67977) ?x67979) ?x67981)))
 (= (+ ?x67982 ?x67983) 0.0)))))))))))))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x67211 (* ?x65067 l_0_11_92)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65498 (* ?x65497 l_0_11_227)))
 (let ((?x68116 (- (* (* (- 2.0) l_0_11_136) l_0_11_137) (* (* 2.0 l_0_11_182) l_0_11_191))))
 (let ((?x68121 (- (- (- ?x68116 (* (* 2.0 l_0_11_183) l_0_11_192)) ?x65498) (* (* 2.0 l_0_11_272) l_0_11_281))))
 (let ((?x68125 (- (- ?x68121 (* (* 2.0 l_0_11_273) l_0_11_282)) (* (* 2.0 l_0_11_317) l_0_11_326))))
 (let ((?x68129 (- (- ?x68125 (* (* 2.0 l_0_11_318) l_0_11_327)) (* (* 2.0 l_0_11_362) l_0_11_371))))
 (= (+ (- ?x68129 (* (* 2.0 l_0_11_363) l_0_11_372)) ?x67211) 0.0))))))))))
(assert
 (let ((?x65067 (* 2.0 l_0_11_91)))
 (let ((?x65068 (* ?x65067 l_0_11_97)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65613 (* ?x65497 l_0_11_232)))
 (let ((?x68191 (- (* (* (- 2.0) l_0_11_136) l_0_11_142) (* (* 2.0 l_0_11_187) l_0_11_191))))
 (let ((?x68195 (- (- ?x68191 (* (* 2.0 l_0_11_188) l_0_11_192)) (* (* 2.0 l_0_11_189) l_0_11_193))))
 (let ((?x68200 (- (- (- ?x68195 (* (* 2.0 l_0_11_190) l_0_11_194)) ?x65613) (* (* 2.0 l_0_11_277) l_0_11_281))))
 (let ((?x68204 (- (- ?x68200 (* (* 2.0 l_0_11_278) l_0_11_282)) (* (* 2.0 l_0_11_279) l_0_11_283))))
 (let ((?x68208 (- (- ?x68204 (* (* 2.0 l_0_11_280) l_0_11_284)) (* (* 2.0 l_0_11_322) l_0_11_326))))
 (let ((?x68212 (- (- ?x68208 (* (* 2.0 l_0_11_323) l_0_11_327)) (* (* 2.0 l_0_11_324) l_0_11_328))))
 (let ((?x68216 (- (- ?x68212 (* (* 2.0 l_0_11_325) l_0_11_329)) (* (* 2.0 l_0_11_367) l_0_11_371))))
 (let ((?x68220 (- (- ?x68216 (* (* 2.0 l_0_11_368) l_0_11_372)) (* (* 2.0 l_0_11_369) l_0_11_373))))
 (= (+ (- ?x68220 (* (* 2.0 l_0_11_370) l_0_11_374)) ?x65068) 0.0))))))))))))))
(assert
 (let ((?x68350 (* l_0_11_375 l_0_11_375)))
 (let ((?x68348 (* l_0_11_374 l_0_11_374)))
 (let ((?x68346 (* l_0_11_373 l_0_11_373)))
 (let ((?x68344 (* l_0_11_372 l_0_11_372)))
 (let ((?x68342 (* l_0_11_371 l_0_11_371)))
 (let ((?x68340 (* l_0_11_330 l_0_11_330)))
 (let ((?x68338 (* l_0_11_329 l_0_11_329)))
 (let ((?x68336 (* l_0_11_328 l_0_11_328)))
 (let ((?x68334 (* l_0_11_327 l_0_11_327)))
 (let ((?x68332 (* l_0_11_326 l_0_11_326)))
 (let ((?x68330 (* l_0_11_285 l_0_11_285)))
 (let ((?x68328 (* l_0_11_284 l_0_11_284)))
 (let ((?x68326 (* l_0_11_283 l_0_11_283)))
 (let ((?x68324 (* l_0_11_282 l_0_11_282)))
 (let ((?x68322 (* l_0_11_281 l_0_11_281)))
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65698 (* ?x65497 l_0_11_236)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67238 (* ?x62913 l_0_11_146)))
 (let ((?x68308 (- (- (* (* 2.0 l_0_11_101) l_0_11_91) ?x67238) (* (* 1.0 l_0_11_191) l_0_11_191))))
 (let ((?x68314 (- (- ?x68308 (* (* 1.0 l_0_11_192) l_0_11_192)) (* (* 1.0 l_0_11_193) l_0_11_193))))
 (let ((?x68320 (- (- ?x68314 (* (* 1.0 l_0_11_194) l_0_11_194)) (* (* 1.0 l_0_11_195) l_0_11_195))))
 (let ((?x68333 (- (- (- (- (- (- (- ?x68320 ?x65698) ?x68322) ?x68324) ?x68326) ?x68328) ?x68330) ?x68332)))
 (let ((?x68347 (- (- (- (- (- (- (- ?x68333 ?x68334) ?x68336) ?x68338) ?x68340) ?x68342) ?x68344) ?x68346)))
 (= (- (- ?x68347 ?x68348) ?x68350) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65777 (* ?x65497 l_0_11_241)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x62914 (* ?x62913 l_0_11_151)))
 (let ((?x62910 (* 2.0 l_0_11_106)))
 (let ((?x62911 (* ?x62910 l_0_11_91)))
 (let ((?x68421 (- (- (- ?x62911 ?x62914) (* (* 2.0 l_0_11_191) l_0_11_196)) (* (* 2.0 l_0_11_192) l_0_11_197))))
 (let ((?x68427 (- (- ?x68421 (* (* 2.0 l_0_11_193) l_0_11_198)) (* (* 2.0 l_0_11_194) l_0_11_199))))
 (let ((?x68434 (- (- (- ?x68427 (* (* 2.0 l_0_11_195) l_0_11_200)) ?x65777) (* (* 2.0 l_0_11_281) l_0_11_286))))
 (let ((?x68440 (- (- ?x68434 (* (* 2.0 l_0_11_282) l_0_11_287)) (* (* 2.0 l_0_11_283) l_0_11_288))))
 (let ((?x68446 (- (- ?x68440 (* (* 2.0 l_0_11_284) l_0_11_289)) (* (* 2.0 l_0_11_285) l_0_11_290))))
 (let ((?x68452 (- (- ?x68446 (* (* 2.0 l_0_11_326) l_0_11_331)) (* (* 2.0 l_0_11_327) l_0_11_332))))
 (let ((?x68458 (- (- ?x68452 (* (* 2.0 l_0_11_328) l_0_11_333)) (* (* 2.0 l_0_11_329) l_0_11_334))))
 (let ((?x68464 (- (- ?x68458 (* (* 2.0 l_0_11_330) l_0_11_335)) (* (* 2.0 l_0_11_371) l_0_11_376))))
 (let ((?x68470 (- (- ?x68464 (* (* 2.0 l_0_11_372) l_0_11_377)) (* (* 2.0 l_0_11_373) l_0_11_378))))
 (let ((?x68476 (- (- ?x68470 (* (* 2.0 l_0_11_374) l_0_11_379)) (* (* 2.0 l_0_11_375) l_0_11_380))))
 (= ?x68476 0.0))))))))))))))))))
(assert
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65862 (* ?x65497 l_0_11_247)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67306 (* ?x62913 l_0_11_157)))
 (let ((?x68575 (- (- (* (* 2.0 l_0_11_112) l_0_11_91) ?x67306) (* (* 2.0 l_0_11_191) l_0_11_202))))
 (let ((?x68579 (- (- ?x68575 (* (* 2.0 l_0_11_192) l_0_11_203)) (* (* 2.0 l_0_11_193) l_0_11_204))))
 (let ((?x68583 (- (- ?x68579 (* (* 2.0 l_0_11_194) l_0_11_205)) (* (* 2.0 l_0_11_195) l_0_11_206))))
 (let ((?x68588 (- (- (- ?x68583 ?x65862) (* (* 2.0 l_0_11_281) l_0_11_292)) (* (* 2.0 l_0_11_282) l_0_11_293))))
 (let ((?x68592 (- (- ?x68588 (* (* 2.0 l_0_11_283) l_0_11_294)) (* (* 2.0 l_0_11_284) l_0_11_295))))
 (let ((?x68596 (- (- ?x68592 (* (* 2.0 l_0_11_285) l_0_11_296)) (* (* 2.0 l_0_11_326) l_0_11_337))))
 (let ((?x68600 (- (- ?x68596 (* (* 2.0 l_0_11_327) l_0_11_338)) (* (* 2.0 l_0_11_328) l_0_11_339))))
 (let ((?x68604 (- (- ?x68600 (* (* 2.0 l_0_11_329) l_0_11_340)) (* (* 2.0 l_0_11_330) l_0_11_341))))
 (let ((?x68608 (- (- ?x68604 (* (* 2.0 l_0_11_371) l_0_11_382)) (* (* 2.0 l_0_11_372) l_0_11_383))))
 (let ((?x68612 (- (- ?x68608 (* (* 2.0 l_0_11_373) l_0_11_384)) (* (* 2.0 l_0_11_374) l_0_11_385))))
 (= (- ?x68612 (* (* 2.0 l_0_11_375) l_0_11_386)) 0.0))))))))))))))))
(assert
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x65941 (* ?x65497 l_0_11_254)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67313 (* ?x62913 l_0_11_164)))
 (let ((?x68666 (- (- (* (* 2.0 l_0_11_119) l_0_11_91) ?x67313) (* (* 2.0 l_0_11_191) l_0_11_209))))
 (let ((?x68670 (- (- ?x68666 (* (* 2.0 l_0_11_192) l_0_11_210)) (* (* 2.0 l_0_11_193) l_0_11_211))))
 (let ((?x68674 (- (- ?x68670 (* (* 2.0 l_0_11_194) l_0_11_212)) (* (* 2.0 l_0_11_195) l_0_11_213))))
 (let ((?x68679 (- (- (- ?x68674 ?x65941) (* (* 2.0 l_0_11_281) l_0_11_299)) (* (* 2.0 l_0_11_282) l_0_11_300))))
 (let ((?x68683 (- (- ?x68679 (* (* 2.0 l_0_11_283) l_0_11_301)) (* (* 2.0 l_0_11_284) l_0_11_302))))
 (let ((?x68687 (- (- ?x68683 (* (* 2.0 l_0_11_285) l_0_11_303)) (* (* 2.0 l_0_11_326) l_0_11_344))))
 (let ((?x68691 (- (- ?x68687 (* (* 2.0 l_0_11_327) l_0_11_345)) (* (* 2.0 l_0_11_328) l_0_11_346))))
 (let ((?x68695 (- (- ?x68691 (* (* 2.0 l_0_11_329) l_0_11_347)) (* (* 2.0 l_0_11_330) l_0_11_348))))
 (let ((?x68699 (- (- ?x68695 (* (* 2.0 l_0_11_371) l_0_11_389)) (* (* 2.0 l_0_11_372) l_0_11_390))))
 (let ((?x68703 (- (- ?x68699 (* (* 2.0 l_0_11_373) l_0_11_391)) (* (* 2.0 l_0_11_374) l_0_11_392))))
 (= (- ?x68703 (* (* 2.0 l_0_11_375) l_0_11_393)) 0.0))))))))))))))))
(assert
 (let ((?x65497 (* 2.0 l_0_11_226)))
 (let ((?x66014 (* ?x65497 l_0_11_262)))
 (let ((?x62913 (* 2.0 l_0_11_136)))
 (let ((?x67324 (* ?x62913 l_0_11_172)))
 (let ((?x68775 (- (- (* (* 2.0 l_0_11_127) l_0_11_91) ?x67324) (* (* 2.0 l_0_11_191) l_0_11_217))))
 (let ((?x68779 (- (- ?x68775 (* (* 2.0 l_0_11_192) l_0_11_218)) (* (* 2.0 l_0_11_193) l_0_11_219))))
 (let ((?x68783 (- (- ?x68779 (* (* 2.0 l_0_11_194) l_0_11_220)) (* (* 2.0 l_0_11_195) l_0_11_221))))
 (let ((?x68788 (- (- (- ?x68783 ?x66014) (* (* 2.0 l_0_11_281) l_0_11_307)) (* (* 2.0 l_0_11_282) l_0_11_308))))
 (let ((?x68792 (- (- ?x68788 (* (* 2.0 l_0_11_283) l_0_11_309)) (* (* 2.0 l_0_11_284) l_0_11_310))))
 (let ((?x68796 (- (- ?x68792 (* (* 2.0 l_0_11_285) l_0_11_311)) (* (* 2.0 l_0_11_326) l_0_11_352))))
 (let ((?x68800 (- (- ?x68796 (* (* 2.0 l_0_11_327) l_0_11_353)) (* (* 2.0 l_0_11_328) l_0_11_354))))
 (let ((?x68804 (- (- ?x68800 (* (* 2.0 l_0_11_329) l_0_11_355)) (* (* 2.0 l_0_11_330) l_0_11_356))))
 (let ((?x68808 (- (- ?x68804 (* (* 2.0 l_0_11_371) l_0_11_397)) (* (* 2.0 l_0_11_372) l_0_11_398))))
 (let ((?x68812 (- (- ?x68808 (* (* 2.0 l_0_11_373) l_0_11_399)) (* (* 2.0 l_0_11_374) l_0_11_400))))
 (= (- ?x68812 (* (* 2.0 l_0_11_375) l_0_11_401)) 0.0))))))))))))))))
(assert
 (let ((?x67342 (* l_0_11_93 l_0_11_93)))
 (let ((?x67340 (* l_0_11_92 l_0_11_92)))
 (let ((?x66085 (* l_0_11_228 l_0_11_228)))
 (let ((?x66083 (* l_0_11_227 l_0_11_227)))
 (let ((?x68866 (- (- (* (- l_0_11_137) l_0_11_137) (* l_0_11_138 l_0_11_138)) ?x66083)))
 (= (+ (+ (- ?x68866 ?x66085) ?x67340) ?x67342) 0.0)))))))
(assert
 (let ((?x65150 (* 2.0 l_0_11_93)))
 (let ((?x65151 (* ?x65150 l_0_11_98)))
 (let ((?x65147 (* 2.0 l_0_11_92)))
 (let ((?x65148 (* ?x65147 l_0_11_97)))
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66115 (* ?x66097 l_0_11_233)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x42968 (* ?x17323 l_0_11_232)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x16271 (* ?x63245 l_0_11_143)))
 (let ((?x68886 (+ (- (- (- (* (* (- 2.0) l_0_11_137) l_0_11_142) ?x16271) ?x42968) ?x66115) ?x65148)))
 (= (+ ?x68886 ?x65151) 0.0)))))))))))))
(assert
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66138 (* ?x66097 l_0_11_237)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66135 (* ?x17323 l_0_11_236)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67363 (* ?x63245 l_0_11_147)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67361 (* ?x63242 l_0_11_146)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67359 (* ?x63424 l_0_11_93)))
 (let ((?x68894 (- (- (- (+ (* (* 2.0 l_0_11_101) l_0_11_92) ?x67359) ?x67361) ?x67363) ?x66135)))
 (= (- ?x68894 ?x66138) 0.0)))))))))))))
(assert
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66177 (* ?x66097 l_0_11_242)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66175 (* ?x17323 l_0_11_241)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x63246 (* ?x63245 l_0_11_152)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x63243 (* ?x63242 l_0_11_151)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63236 (* ?x63082 l_0_11_93)))
 (let ((?x68909 (- (- (- (+ (* (* 2.0 l_0_11_106) l_0_11_92) ?x63236) ?x63243) ?x63246) ?x66175)))
 (= (- ?x68909 ?x66177) 0.0)))))))))))))
(assert
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66193 (* ?x66097 l_0_11_248)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66191 (* ?x17323 l_0_11_247)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x67385 (* ?x63245 l_0_11_158)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x67383 (* ?x63242 l_0_11_157)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67381 (* ?x65018 l_0_11_93)))
 (let ((?x68920 (- (- (- (+ (* (* 2.0 l_0_11_112) l_0_11_92) ?x67381) ?x67383) ?x67385) ?x66191)))
 (= (- ?x68920 ?x66193) 0.0)))))))))))))
(assert
 (let ((?x66097 (* 2.0 l_0_11_228)))
 (let ((?x66231 (* ?x66097 l_0_11_263)))
 (let ((?x17323 (* 2.0 l_0_11_227)))
 (let ((?x66229 (* ?x17323 l_0_11_262)))
 (let ((?x63245 (* 2.0 l_0_11_138)))
 (let ((?x54923 (* ?x63245 l_0_11_173)))
 (let ((?x63242 (* 2.0 l_0_11_137)))
 (let ((?x54981 (* ?x63242 l_0_11_172)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x19547 (* ?x65443 l_0_11_93)))
 (let ((?x45279 (- (- (- (+ (* (* 2.0 l_0_11_127) l_0_11_92) ?x19547) ?x54981) ?x54923) ?x66229)))
 (= (- ?x45279 ?x66231) 0.0)))))))))))))
(assert
 (let ((?x65258 (* l_0_11_99 l_0_11_99)))
 (let ((?x65256 (* l_0_11_98 l_0_11_98)))
 (let ((?x65254 (* l_0_11_97 l_0_11_97)))
 (let ((?x66464 (* l_0_11_235 l_0_11_235)))
 (let ((?x66462 (* l_0_11_234 l_0_11_234)))
 (let ((?x66460 (* l_0_11_233 l_0_11_233)))
 (let ((?x66458 (* l_0_11_232 l_0_11_232)))
 (let ((?x65245 (* l_0_11_145 l_0_11_145)))
 (let ((?x65243 (* l_0_11_144 l_0_11_144)))
 (let ((?x65241 (* l_0_11_143 l_0_11_143)))
 (let ((?x57614 (- (- (* l_0_11_100 l_0_11_100) (* l_0_11_142 l_0_11_142)) ?x65241)))
 (let ((?x57578 (+ (- (- (- (- (- (- ?x57614 ?x65243) ?x65245) ?x66458) ?x66460) ?x66462) ?x66464) ?x65254)))
 (= (+ (+ ?x57578 ?x65256) ?x65258) 0.0))))))))))))))
(assert
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x66507 (* ?x64996 l_0_11_239)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x66505 (* ?x64993 l_0_11_238)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x66503 (* ?x64990 l_0_11_237)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x66501 (* ?x64987 l_0_11_236)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65293 (* ?x63370 l_0_11_149)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65291 (* ?x63367 l_0_11_148)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65289 (* ?x63364 l_0_11_147)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65287 (* ?x63361 l_0_11_146)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x65280 (* ?x63436 l_0_11_99)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x42441 (* ?x63424 l_0_11_98)))
 (let ((?x65278 (* 2.0 l_0_11_101)))
 (let ((?x29907 (* ?x65278 l_0_11_97)))
 (let ((?x57612 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_104) ?x29907) ?x42441) ?x65280) ?x65287)))
 (let ((?x68933 (- (- (- (- (- (- (- ?x57612 ?x65289) ?x65291) ?x65293) ?x66501) ?x66503) ?x66505) ?x66507)))
 (= ?x68933 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x53845 (* ?x64996 l_0_11_244)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x53847 (* ?x64993 l_0_11_243)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x53860 (* ?x64990 l_0_11_242)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53862 (* ?x64987 l_0_11_241)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x63371 (* ?x63370 l_0_11_154)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x63368 (* ?x63367 l_0_11_153)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x63365 (* ?x63364 l_0_11_152)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x63362 (* ?x63361 l_0_11_151)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63359 (* ?x63085 l_0_11_99)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63357 (* ?x63082 l_0_11_98)))
 (let ((?x62910 (* 2.0 l_0_11_106)))
 (let ((?x63347 (* ?x62910 l_0_11_97)))
 (let ((?x21362 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_109) ?x63347) ?x63357) ?x63359) ?x63362)))
 (let ((?x68942 (- (- (- (- (- (- (- ?x21362 ?x63365) ?x63368) ?x63371) ?x53862) ?x53860) ?x53847) ?x53845)))
 (= ?x68942 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x66541 (* ?x64996 l_0_11_257)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x53884 (* ?x64993 l_0_11_256)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x53886 (* ?x64990 l_0_11_255)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53933 (* ?x64987 l_0_11_254)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65395 (* ?x63370 l_0_11_167)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65393 (* ?x63367 l_0_11_166)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65391 (* ?x63364 l_0_11_165)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65389 (* ?x63361 l_0_11_164)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x65387 (* ?x65386 l_0_11_99)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x65384 (* ?x65383 l_0_11_98)))
 (let ((?x16372 (* 2.0 l_0_11_119)))
 (let ((?x29912 (* ?x16372 l_0_11_97)))
 (let ((?x57753 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_122) ?x29912) ?x65384) ?x65387) ?x65389)))
 (let ((?x68948 (- (- (- (- (- (- (- ?x57753 ?x65391) ?x65393) ?x65395) ?x53933) ?x53886) ?x53884) ?x66541)))
 (= ?x68948 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64996 (* 2.0 l_0_11_235)))
 (let ((?x43291 (* ?x64996 l_0_11_265)))
 (let ((?x64993 (* 2.0 l_0_11_234)))
 (let ((?x43296 (* ?x64993 l_0_11_264)))
 (let ((?x64990 (* 2.0 l_0_11_233)))
 (let ((?x32077 (* ?x64990 l_0_11_263)))
 (let ((?x64987 (* 2.0 l_0_11_232)))
 (let ((?x53971 (* ?x64987 l_0_11_262)))
 (let ((?x63370 (* 2.0 l_0_11_145)))
 (let ((?x65455 (* ?x63370 l_0_11_175)))
 (let ((?x63367 (* 2.0 l_0_11_144)))
 (let ((?x65453 (* ?x63367 l_0_11_174)))
 (let ((?x63364 (* 2.0 l_0_11_143)))
 (let ((?x65451 (* ?x63364 l_0_11_173)))
 (let ((?x63361 (* 2.0 l_0_11_142)))
 (let ((?x65449 (* ?x63361 l_0_11_172)))
 (let ((?x65446 (* 2.0 l_0_11_129)))
 (let ((?x65447 (* ?x65446 l_0_11_99)))
 (let ((?x65443 (* 2.0 l_0_11_128)))
 (let ((?x65444 (* ?x65443 l_0_11_98)))
 (let ((?x65440 (* 2.0 l_0_11_127)))
 (let ((?x65441 (* ?x65440 l_0_11_97)))
 (let ((?x57760 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_130) ?x65441) ?x65444) ?x65447) ?x65449)))
 (let ((?x21338 (- (- (- (- (- (- (- ?x57760 ?x65451) ?x65453) ?x65455) ?x53971) ?x32077) ?x43296) ?x43291)))
 (= ?x21338 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66622 (* l_0_11_240 l_0_11_240)))
 (let ((?x66620 (* l_0_11_239 l_0_11_239)))
 (let ((?x66618 (* l_0_11_238 l_0_11_238)))
 (let ((?x66616 (* l_0_11_237 l_0_11_237)))
 (let ((?x66614 (* l_0_11_236 l_0_11_236)))
 (let ((?x67478 (* l_0_11_150 l_0_11_150)))
 (let ((?x67476 (* l_0_11_149 l_0_11_149)))
 (let ((?x67474 (* l_0_11_148 l_0_11_148)))
 (let ((?x67472 (* l_0_11_147 l_0_11_147)))
 (let ((?x67470 (* l_0_11_146 l_0_11_146)))
 (let ((?x67468 (* l_0_11_105 l_0_11_105)))
 (let ((?x67466 (* l_0_11_104 l_0_11_104)))
 (let ((?x67464 (* l_0_11_103 l_0_11_103)))
 (let ((?x57871 (+ (+ (* l_0_11_101 l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x67464)))
 (let ((?x21630 (- (- (- (- (- (+ (+ ?x57871 ?x67466) ?x67468) ?x67470) ?x67472) ?x67474) ?x67476) ?x67478)))
 (= (- (- (- (- (- ?x21630 ?x66614) ?x66616) ?x66618) ?x66620) ?x66622) 0.0)))))))))))))))))
(assert
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66681 (* ?x66680 l_0_11_245)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66678 (* ?x66677 l_0_11_244)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66675 (* ?x66674 l_0_11_243)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66672 (* ?x66671 l_0_11_242)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66669 (* ?x66668 l_0_11_241)))
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x63464 (* ?x63463 l_0_11_155)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x63461 (* ?x63460 l_0_11_154)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x63458 (* ?x63457 l_0_11_153)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x63455 (* ?x63454 l_0_11_152)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x63452 (* ?x63451 l_0_11_151)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x63443 (* ?x63442 l_0_11_110)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x63440 (* ?x63439 l_0_11_109)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x63437 (* ?x63436 l_0_11_108)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x63434 (* ?x63424 l_0_11_107)))
 (let ((?x21639 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_106) ?x63434) ?x63437) ?x63440) ?x63443)))
 (let ((?x68953 (- (- (- (- (- (- (- ?x21639 ?x63452) ?x63455) ?x63458) ?x63461) ?x63464) ?x66669) ?x66672)))
 (= (- (- (- ?x68953 ?x66675) ?x66678) ?x66681) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66712 (* ?x66680 l_0_11_251)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66710 (* ?x66677 l_0_11_250)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66708 (* ?x66674 l_0_11_249)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66706 (* ?x66671 l_0_11_248)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66704 (* ?x66668 l_0_11_247)))
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67517 (* ?x63463 l_0_11_161)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67515 (* ?x63460 l_0_11_160)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67513 (* ?x63457 l_0_11_159)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67511 (* ?x63454 l_0_11_158)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67509 (* ?x63451 l_0_11_157)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67507 (* ?x63442 l_0_11_116)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67505 (* ?x63439 l_0_11_115)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67503 (* ?x63436 l_0_11_114)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67501 (* ?x63424 l_0_11_113)))
 (let ((?x57966 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_112) ?x67501) ?x67503) ?x67505) ?x67507)))
 (let ((?x68963 (- (- (- (- (- (- (- ?x57966 ?x67509) ?x67511) ?x67513) ?x67515) ?x67517) ?x66704) ?x66706)))
 (= (- (- (- ?x68963 ?x66708) ?x66710) ?x66712) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66745 (* ?x66680 l_0_11_258)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66743 (* ?x66677 l_0_11_257)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66741 (* ?x66674 l_0_11_256)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66739 (* ?x66671 l_0_11_255)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66737 (* ?x66668 l_0_11_254)))
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67561 (* ?x63463 l_0_11_168)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67559 (* ?x63460 l_0_11_167)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67557 (* ?x63457 l_0_11_166)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67555 (* ?x63454 l_0_11_165)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67553 (* ?x63451 l_0_11_164)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67551 (* ?x63442 l_0_11_123)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67541 (* ?x63439 l_0_11_122)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67537 (* ?x63436 l_0_11_121)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x55251 (* ?x63424 l_0_11_120)))
 (let ((?x58027 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_119) ?x55251) ?x67537) ?x67541) ?x67551)))
 (let ((?x58031 (- (- (- (- (- (- (- ?x58027 ?x67553) ?x67555) ?x67557) ?x67559) ?x67561) ?x66737) ?x66739)))
 (= (- (- (- ?x58031 ?x66741) ?x66743) ?x66745) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66680 (* 2.0 l_0_11_240)))
 (let ((?x66800 (* ?x66680 l_0_11_266)))
 (let ((?x66677 (* 2.0 l_0_11_239)))
 (let ((?x66798 (* ?x66677 l_0_11_265)))
 (let ((?x66674 (* 2.0 l_0_11_238)))
 (let ((?x66796 (* ?x66674 l_0_11_264)))
 (let ((?x66671 (* 2.0 l_0_11_237)))
 (let ((?x66794 (* ?x66671 l_0_11_263)))
 (let ((?x66668 (* 2.0 l_0_11_236)))
 (let ((?x66792 (* ?x66668 l_0_11_262)))
 (let ((?x63463 (* 2.0 l_0_11_150)))
 (let ((?x67611 (* ?x63463 l_0_11_176)))
 (let ((?x63460 (* 2.0 l_0_11_149)))
 (let ((?x67609 (* ?x63460 l_0_11_175)))
 (let ((?x63457 (* 2.0 l_0_11_148)))
 (let ((?x67607 (* ?x63457 l_0_11_174)))
 (let ((?x63454 (* 2.0 l_0_11_147)))
 (let ((?x67605 (* ?x63454 l_0_11_173)))
 (let ((?x63451 (* 2.0 l_0_11_146)))
 (let ((?x67603 (* ?x63451 l_0_11_172)))
 (let ((?x63442 (* 2.0 l_0_11_105)))
 (let ((?x67601 (* ?x63442 l_0_11_131)))
 (let ((?x63439 (* 2.0 l_0_11_104)))
 (let ((?x67591 (* ?x63439 l_0_11_130)))
 (let ((?x63436 (* 2.0 l_0_11_103)))
 (let ((?x67588 (* ?x63436 l_0_11_129)))
 (let ((?x63424 (* 2.0 l_0_11_102)))
 (let ((?x67584 (* ?x63424 l_0_11_128)))
 (let ((?x58180 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_127) ?x67584) ?x67588) ?x67591) ?x67601)))
 (let ((?x68979 (- (- (- (- (- (- (- ?x58180 ?x67603) ?x67605) ?x67607) ?x67609) ?x67611) ?x66792) ?x66794)))
 (= (- (- (- ?x68979 ?x66796) ?x66798) ?x66800) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66829 (* l_0_11_246 l_0_11_246)))
 (let ((?x66827 (* l_0_11_245 l_0_11_245)))
 (let ((?x66825 (* l_0_11_244 l_0_11_244)))
 (let ((?x66823 (* l_0_11_243 l_0_11_243)))
 (let ((?x43569 (* l_0_11_242 l_0_11_242)))
 (let ((?x54405 (* l_0_11_241 l_0_11_241)))
 (let ((?x63548 (* l_0_11_156 l_0_11_156)))
 (let ((?x63546 (* l_0_11_155 l_0_11_155)))
 (let ((?x63544 (* l_0_11_154 l_0_11_154)))
 (let ((?x63542 (* l_0_11_153 l_0_11_153)))
 (let ((?x63540 (* l_0_11_152 l_0_11_152)))
 (let ((?x63538 (* l_0_11_151 l_0_11_151)))
 (let ((?x63536 (* l_0_11_111 l_0_11_111)))
 (let ((?x63534 (* l_0_11_110 l_0_11_110)))
 (let ((?x63522 (* l_0_11_109 l_0_11_109)))
 (let ((?x63518 (* l_0_11_108 l_0_11_108)))
 (let ((?x58337 (+ (+ (* l_0_11_106 l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x63518)))
 (let ((?x68986 (- (- (- (- (+ (+ (+ ?x58337 ?x63522) ?x63534) ?x63536) ?x63538) ?x63540) ?x63542) ?x63544)))
 (let ((?x68993 (- (- (- (- (- (- (- ?x68986 ?x63546) ?x63548) ?x54405) ?x43569) ?x66823) ?x66825) ?x66827)))
 (= (- ?x68993 ?x66829) 0.0)))))))))))))))))))))
(assert
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x66865 (* ?x62969 l_0_11_252)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x66863 (* ?x62966 l_0_11_251)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x66861 (* ?x62963 l_0_11_250)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x66859 (* ?x62960 l_0_11_249)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x66857 (* ?x62957 l_0_11_248)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x66855 (* ?x62954 l_0_11_247)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63623 (* ?x63112 l_0_11_162)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63621 (* ?x63109 l_0_11_161)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63619 (* ?x63106 l_0_11_160)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63617 (* ?x63103 l_0_11_159)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63615 (* ?x63100 l_0_11_158)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63613 (* ?x63097 l_0_11_157)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63611 (* ?x63094 l_0_11_117)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63609 (* ?x63091 l_0_11_116)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63607 (* ?x63088 l_0_11_115)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63605 (* ?x63085 l_0_11_114)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63082 l_0_11_113)))
 (let ((?x69014 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_112) ?x63593) ?x63605) ?x63607) ?x63609)))
 (let ((?x69021 (- (- (- (- (- (- (+ ?x69014 ?x63611) ?x63613) ?x63615) ?x63617) ?x63619) ?x63621) ?x63623)))
 (= (- (- (- (- (- (- ?x69021 ?x66855) ?x66857) ?x66859) ?x66861) ?x66863) ?x66865) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62969 (* 2.0 l_0_11_246)))
 (let ((?x66903 (* ?x62969 l_0_11_267)))
 (let ((?x62966 (* 2.0 l_0_11_245)))
 (let ((?x66901 (* ?x62966 l_0_11_266)))
 (let ((?x62963 (* 2.0 l_0_11_244)))
 (let ((?x66899 (* ?x62963 l_0_11_265)))
 (let ((?x62960 (* 2.0 l_0_11_243)))
 (let ((?x66897 (* ?x62960 l_0_11_264)))
 (let ((?x62957 (* 2.0 l_0_11_242)))
 (let ((?x66895 (* ?x62957 l_0_11_263)))
 (let ((?x62954 (* 2.0 l_0_11_241)))
 (let ((?x66893 (* ?x62954 l_0_11_262)))
 (let ((?x63112 (* 2.0 l_0_11_156)))
 (let ((?x63721 (* ?x63112 l_0_11_177)))
 (let ((?x63109 (* 2.0 l_0_11_155)))
 (let ((?x63719 (* ?x63109 l_0_11_176)))
 (let ((?x63106 (* 2.0 l_0_11_154)))
 (let ((?x63717 (* ?x63106 l_0_11_175)))
 (let ((?x63103 (* 2.0 l_0_11_153)))
 (let ((?x63715 (* ?x63103 l_0_11_174)))
 (let ((?x63100 (* 2.0 l_0_11_152)))
 (let ((?x63713 (* ?x63100 l_0_11_173)))
 (let ((?x63097 (* 2.0 l_0_11_151)))
 (let ((?x63711 (* ?x63097 l_0_11_172)))
 (let ((?x63094 (* 2.0 l_0_11_111)))
 (let ((?x63709 (* ?x63094 l_0_11_132)))
 (let ((?x63091 (* 2.0 l_0_11_110)))
 (let ((?x63707 (* ?x63091 l_0_11_131)))
 (let ((?x63088 (* 2.0 l_0_11_109)))
 (let ((?x63705 (* ?x63088 l_0_11_130)))
 (let ((?x63085 (* 2.0 l_0_11_108)))
 (let ((?x63703 (* ?x63085 l_0_11_129)))
 (let ((?x63082 (* 2.0 l_0_11_107)))
 (let ((?x63701 (* ?x63082 l_0_11_128)))
 (let ((?x69034 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_127) ?x63701) ?x63703) ?x63705) ?x63707)))
 (let ((?x69041 (- (- (- (- (- (- (+ ?x69034 ?x63709) ?x63711) ?x63713) ?x63715) ?x63717) ?x63719) ?x63721)))
 (= (- (- (- (- (- (- ?x69041 ?x66893) ?x66895) ?x66897) ?x66899) ?x66901) ?x66903) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54467 (* l_0_11_253 l_0_11_253)))
 (let ((?x43634 (* l_0_11_252 l_0_11_252)))
 (let ((?x54442 (* l_0_11_251 l_0_11_251)))
 (let ((?x43630 (* l_0_11_250 l_0_11_250)))
 (let ((?x32816 (* l_0_11_249 l_0_11_249)))
 (let ((?x43620 (* l_0_11_248 l_0_11_248)))
 (let ((?x54456 (* l_0_11_247 l_0_11_247)))
 (let ((?x67668 (* l_0_11_163 l_0_11_163)))
 (let ((?x67666 (* l_0_11_162 l_0_11_162)))
 (let ((?x67664 (* l_0_11_161 l_0_11_161)))
 (let ((?x67662 (* l_0_11_160 l_0_11_160)))
 (let ((?x67660 (* l_0_11_159 l_0_11_159)))
 (let ((?x67658 (* l_0_11_158 l_0_11_158)))
 (let ((?x67656 (* l_0_11_157 l_0_11_157)))
 (let ((?x67654 (* l_0_11_118 l_0_11_118)))
 (let ((?x67652 (* l_0_11_117 l_0_11_117)))
 (let ((?x67650 (* l_0_11_116 l_0_11_116)))
 (let ((?x67648 (* l_0_11_115 l_0_11_115)))
 (let ((?x67646 (* l_0_11_114 l_0_11_114)))
 (let ((?x45954 (+ (+ (* l_0_11_112 l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x67646)))
 (let ((?x45913 (- (- (- (+ (+ (+ (+ ?x45954 ?x67648) ?x67650) ?x67652) ?x67654) ?x67656) ?x67658) ?x67660)))
 (let ((?x69054 (- (- (- (- (- (- (- ?x45913 ?x67662) ?x67664) ?x67666) ?x67668) ?x54456) ?x43620) ?x32816)))
 (= (- (- (- (- ?x69054 ?x43630) ?x54442) ?x43634) ?x54467) 0.0))))))))))))))))))))))))
(assert
 (let ((?x66982 (* 2.0 l_0_11_253)))
 (let ((?x66983 (* ?x66982 l_0_11_260)))
 (let ((?x66979 (* 2.0 l_0_11_252)))
 (let ((?x66980 (* ?x66979 l_0_11_259)))
 (let ((?x66976 (* 2.0 l_0_11_251)))
 (let ((?x66977 (* ?x66976 l_0_11_258)))
 (let ((?x66973 (* 2.0 l_0_11_250)))
 (let ((?x66974 (* ?x66973 l_0_11_257)))
 (let ((?x66969 (* 2.0 l_0_11_249)))
 (let ((?x66970 (* ?x66969 l_0_11_256)))
 (let ((?x66966 (* 2.0 l_0_11_248)))
 (let ((?x66967 (* ?x66966 l_0_11_255)))
 (let ((?x66963 (* 2.0 l_0_11_247)))
 (let ((?x66964 (* ?x66963 l_0_11_254)))
 (let ((?x67258 (* 2.0 l_0_11_163)))
 (let ((?x67726 (* ?x67258 l_0_11_170)))
 (let ((?x67255 (* 2.0 l_0_11_162)))
 (let ((?x67724 (* ?x67255 l_0_11_169)))
 (let ((?x67252 (* 2.0 l_0_11_161)))
 (let ((?x67722 (* ?x67252 l_0_11_168)))
 (let ((?x67249 (* 2.0 l_0_11_160)))
 (let ((?x67720 (* ?x67249 l_0_11_167)))
 (let ((?x67246 (* 2.0 l_0_11_159)))
 (let ((?x67718 (* ?x67246 l_0_11_166)))
 (let ((?x67243 (* 2.0 l_0_11_158)))
 (let ((?x67716 (* ?x67243 l_0_11_165)))
 (let ((?x67240 (* 2.0 l_0_11_157)))
 (let ((?x67714 (* ?x67240 l_0_11_164)))
 (let ((?x67235 (* 2.0 l_0_11_118)))
 (let ((?x67712 (* ?x67235 l_0_11_125)))
 (let ((?x67232 (* 2.0 l_0_11_117)))
 (let ((?x67710 (* ?x67232 l_0_11_124)))
 (let ((?x67229 (* 2.0 l_0_11_116)))
 (let ((?x67708 (* ?x67229 l_0_11_123)))
 (let ((?x67226 (* 2.0 l_0_11_115)))
 (let ((?x67706 (* ?x67226 l_0_11_122)))
 (let ((?x65021 (* 2.0 l_0_11_114)))
 (let ((?x67704 (* ?x65021 l_0_11_121)))
 (let ((?x65018 (* 2.0 l_0_11_113)))
 (let ((?x67702 (* ?x65018 l_0_11_120)))
 (let ((?x69071 (+ (+ (+ (+ (* (* 2.0 l_0_11_112) l_0_11_119) ?x67702) ?x67704) ?x67706) ?x67708)))
 (let ((?x69078 (- (- (- (- (- (+ (+ ?x69071 ?x67710) ?x67712) ?x67714) ?x67716) ?x67718) ?x67720) ?x67722)))
 (let ((?x69085 (- (- (- (- (- (- (- ?x69078 ?x67724) ?x67726) ?x66964) ?x66967) ?x66970) ?x66974) ?x66977)))
 (= (- (- ?x69085 ?x66980) ?x66983) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67082 (* l_0_11_261 l_0_11_261)))
 (let ((?x67080 (* l_0_11_260 l_0_11_260)))
 (let ((?x67078 (* l_0_11_259 l_0_11_259)))
 (let ((?x67076 (* l_0_11_258 l_0_11_258)))
 (let ((?x67074 (* l_0_11_257 l_0_11_257)))
 (let ((?x67072 (* l_0_11_256 l_0_11_256)))
 (let ((?x67070 (* l_0_11_255 l_0_11_255)))
 (let ((?x67069 (* l_0_11_254 l_0_11_254)))
 (let ((?x67812 (* l_0_11_171 l_0_11_171)))
 (let ((?x67810 (* l_0_11_170 l_0_11_170)))
 (let ((?x67808 (* l_0_11_169 l_0_11_169)))
 (let ((?x67806 (* l_0_11_168 l_0_11_168)))
 (let ((?x67804 (* l_0_11_167 l_0_11_167)))
 (let ((?x67802 (* l_0_11_166 l_0_11_166)))
 (let ((?x67800 (* l_0_11_165 l_0_11_165)))
 (let ((?x67798 (* l_0_11_164 l_0_11_164)))
 (let ((?x67796 (* l_0_11_126 l_0_11_126)))
 (let ((?x67794 (* l_0_11_125 l_0_11_125)))
 (let ((?x67792 (* l_0_11_124 l_0_11_124)))
 (let ((?x67790 (* l_0_11_123 l_0_11_123)))
 (let ((?x67788 (* l_0_11_122 l_0_11_122)))
 (let ((?x67786 (* l_0_11_121 l_0_11_121)))
 (let ((?x58710 (+ (+ (* l_0_11_119 l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67786)))
 (let ((?x46086 (- (- (+ (+ (+ (+ (+ ?x58710 ?x67788) ?x67790) ?x67792) ?x67794) ?x67796) ?x67798) ?x67800)))
 (let ((?x69090 (- (- (- (- (- (- (- ?x46086 ?x67802) ?x67804) ?x67806) ?x67808) ?x67810) ?x67812) ?x67069)))
 (let ((?x69097 (- (- (- (- (- (- (- ?x69090 ?x67070) ?x67072) ?x67074) ?x67076) ?x67078) ?x67080) ?x67082)))
 (= ?x69097 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x67134 (* (* 2.0 l_0_11_261) l_0_11_269)))
 (let ((?x67131 (* (* 2.0 l_0_11_260) l_0_11_268)))
 (let ((?x67128 (* (* 2.0 l_0_11_259) l_0_11_267)))
 (let ((?x67125 (* (* 2.0 l_0_11_258) l_0_11_266)))
 (let ((?x67122 (* (* 2.0 l_0_11_257) l_0_11_265)))
 (let ((?x67119 (* (* 2.0 l_0_11_256) l_0_11_264)))
 (let ((?x67116 (* (* 2.0 l_0_11_255) l_0_11_263)))
 (let ((?x67114 (* (* 2.0 l_0_11_254) l_0_11_262)))
 (let ((?x67891 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67888 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67885 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67882 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67879 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67876 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67873 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67870 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67867 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67864 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67861 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67858 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67855 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x65386 (* 2.0 l_0_11_121)))
 (let ((?x67852 (* ?x65386 l_0_11_129)))
 (let ((?x65383 (* 2.0 l_0_11_120)))
 (let ((?x67850 (* ?x65383 l_0_11_128)))
 (let ((?x69119 (+ (+ (+ (+ (* (* 2.0 l_0_11_119) l_0_11_127) ?x67850) ?x67852) ?x67855) ?x67858)))
 (let ((?x69126 (- (- (- (- (+ (+ (+ ?x69119 ?x67861) ?x67864) ?x67867) ?x67870) ?x67873) ?x67876) ?x67879)))
 (let ((?x69133 (- (- (- (- (- (- (- ?x69126 ?x67882) ?x67885) ?x67888) ?x67891) ?x67114) ?x67116) ?x67119)))
 (= (- (- (- (- (- ?x69133 ?x67122) ?x67125) ?x67128) ?x67131) ?x67134) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x31938 (* l_0_11_270 l_0_11_270)))
 (let ((?x33015 (* l_0_11_269 l_0_11_269)))
 (let ((?x54600 (* l_0_11_268 l_0_11_268)))
 (let ((?x54639 (* l_0_11_267 l_0_11_267)))
 (let ((?x33049 (* l_0_11_266 l_0_11_266)))
 (let ((?x54622 (* l_0_11_265 l_0_11_265)))
 (let ((?x54612 (* l_0_11_264 l_0_11_264)))
 (let ((?x54626 (* l_0_11_263 l_0_11_263)))
 (let ((?x54697 (* l_0_11_262 l_0_11_262)))
 (let ((?x67983 (* l_0_11_180 l_0_11_180)))
 (let ((?x67981 (* l_0_11_179 l_0_11_179)))
 (let ((?x67979 (* l_0_11_178 l_0_11_178)))
 (let ((?x67977 (* l_0_11_177 l_0_11_177)))
 (let ((?x67975 (* l_0_11_176 l_0_11_176)))
 (let ((?x67973 (* l_0_11_175 l_0_11_175)))
 (let ((?x67971 (* l_0_11_174 l_0_11_174)))
 (let ((?x67969 (* l_0_11_173 l_0_11_173)))
 (let ((?x67967 (* l_0_11_172 l_0_11_172)))
 (let ((?x67965 (* l_0_11_135 l_0_11_135)))
 (let ((?x67963 (* l_0_11_134 l_0_11_134)))
 (let ((?x67961 (* l_0_11_133 l_0_11_133)))
 (let ((?x67959 (* l_0_11_132 l_0_11_132)))
 (let ((?x67946 (* l_0_11_131 l_0_11_131)))
 (let ((?x67943 (* l_0_11_130 l_0_11_130)))
 (let ((?x67939 (* l_0_11_129 l_0_11_129)))
 (let ((?x46314 (+ (+ (* l_0_11_127 l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x67939)))
 (let ((?x69140 (- (+ (+ (+ (+ (+ (+ ?x46314 ?x67943) ?x67946) ?x67959) ?x67961) ?x67963) ?x67965) ?x67967)))
 (let ((?x69147 (- (- (- (- (- (- (- ?x69140 ?x67969) ?x67971) ?x67973) ?x67975) ?x67977) ?x67979) ?x67981)))
 (let ((?x69154 (- (- (- (- (- (- (- ?x69147 ?x67983) ?x54697) ?x54626) ?x54612) ?x54622) ?x33049) ?x54639)))
 (= (- (- (- ?x69154 ?x54600) ?x33015) ?x31938) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x58810 (- (* (* (- 2.0) l_0_11_181) l_0_11_182) (* (* 2.0 l_0_11_271) l_0_11_272))))
 (let ((?x46395 (- (- ?x58810 (* (* 2.0 l_0_11_316) l_0_11_317)) (* (* 2.0 l_0_11_361) l_0_11_362))))
 (= ?x46395 0.0))))
(assert
 (let ((?x69195 (- (* (* (- 2.0) l_0_11_181) l_0_11_187) (* (* 2.0 l_0_11_271) l_0_11_277))))
 (let ((?x69199 (- (- ?x69195 (* (* 2.0 l_0_11_316) l_0_11_322)) (* (* 2.0 l_0_11_361) l_0_11_367))))
 (= ?x69199 0.0))))
(assert
 (let ((?x69218 (- (* (* (- 2.0) l_0_11_181) l_0_11_196) (* (* 2.0 l_0_11_271) l_0_11_286))))
 (let ((?x69222 (- (- ?x69218 (* (* 2.0 l_0_11_316) l_0_11_331)) (* (* 2.0 l_0_11_361) l_0_11_376))))
 (= ?x69222 0.0))))
(assert
 (let ((?x69241 (- (* (* (- 2.0) l_0_11_181) l_0_11_202) (* (* 2.0 l_0_11_271) l_0_11_292))))
 (let ((?x69245 (- (- ?x69241 (* (* 2.0 l_0_11_316) l_0_11_337)) (* (* 2.0 l_0_11_361) l_0_11_382))))
 (= ?x69245 0.0))))
(assert
 (let ((?x69262 (- (* (* (- 2.0) l_0_11_181) l_0_11_217) (* (* 2.0 l_0_11_271) l_0_11_307))))
 (let ((?x69266 (- (- ?x69262 (* (* 2.0 l_0_11_316) l_0_11_352)) (* (* 2.0 l_0_11_361) l_0_11_397))))
 (= ?x69266 0.0))))
(assert
 (let ((?x69297 (* l_0_11_363 l_0_11_363)))
 (let ((?x69295 (* l_0_11_362 l_0_11_362)))
 (let ((?x69293 (* l_0_11_318 l_0_11_318)))
 (let ((?x69291 (* l_0_11_317 l_0_11_317)))
 (let ((?x69289 (* l_0_11_273 l_0_11_273)))
 (let ((?x69287 (* l_0_11_272 l_0_11_272)))
 (let ((?x69286 (- (* (* (- 1.0) l_0_11_182) l_0_11_182) (* (* 1.0 l_0_11_183) l_0_11_183))))
 (= (- (- (- (- (- (- ?x69286 ?x69287) ?x69289) ?x69291) ?x69293) ?x69295) ?x69297) 0.0)))))))))
(assert
 (let ((?x69321 (- (* (* (- 2.0) l_0_11_182) l_0_11_187) (* (* 2.0 l_0_11_183) l_0_11_188))))
 (let ((?x69325 (- (- ?x69321 (* (* 2.0 l_0_11_272) l_0_11_277)) (* (* 2.0 l_0_11_273) l_0_11_278))))
 (let ((?x69329 (- (- ?x69325 (* (* 2.0 l_0_11_317) l_0_11_322)) (* (* 2.0 l_0_11_318) l_0_11_323))))
 (let ((?x69333 (- (- ?x69329 (* (* 2.0 l_0_11_362) l_0_11_367)) (* (* 2.0 l_0_11_363) l_0_11_368))))
 (= ?x69333 0.0))))))
(assert
 (let ((?x69371 (- (* (* (- 2.0) l_0_11_182) l_0_11_196) (* (* 2.0 l_0_11_183) l_0_11_197))))
 (let ((?x69375 (- (- ?x69371 (* (* 2.0 l_0_11_272) l_0_11_286)) (* (* 2.0 l_0_11_273) l_0_11_287))))
 (let ((?x69379 (- (- ?x69375 (* (* 2.0 l_0_11_317) l_0_11_331)) (* (* 2.0 l_0_11_318) l_0_11_332))))
 (let ((?x69383 (- (- ?x69379 (* (* 2.0 l_0_11_362) l_0_11_376)) (* (* 2.0 l_0_11_363) l_0_11_377))))
 (= ?x69383 0.0))))))
(assert
 (let ((?x46570 (- (* (* (- 2.0) l_0_11_182) l_0_11_202) (* (* 2.0 l_0_11_183) l_0_11_203))))
 (let ((?x46581 (- (- ?x46570 (* (* 2.0 l_0_11_272) l_0_11_292)) (* (* 2.0 l_0_11_273) l_0_11_293))))
 (let ((?x69415 (- (- ?x46581 (* (* 2.0 l_0_11_317) l_0_11_337)) (* (* 2.0 l_0_11_318) l_0_11_338))))
 (let ((?x69419 (- (- ?x69415 (* (* 2.0 l_0_11_362) l_0_11_382)) (* (* 2.0 l_0_11_363) l_0_11_383))))
 (= ?x69419 0.0))))))
(assert
 (let ((?x69449 (- (* (* (- 2.0) l_0_11_182) l_0_11_217) (* (* 2.0 l_0_11_183) l_0_11_218))))
 (let ((?x69453 (- (- ?x69449 (* (* 2.0 l_0_11_272) l_0_11_307)) (* (* 2.0 l_0_11_273) l_0_11_308))))
 (let ((?x69457 (- (- ?x69453 (* (* 2.0 l_0_11_317) l_0_11_352)) (* (* 2.0 l_0_11_318) l_0_11_353))))
 (let ((?x69461 (- (- ?x69457 (* (* 2.0 l_0_11_362) l_0_11_397)) (* (* 2.0 l_0_11_363) l_0_11_398))))
 (= ?x69461 0.0))))))
(assert
 (let ((?x69524 (* l_0_11_370 l_0_11_370)))
 (let ((?x69522 (* l_0_11_369 l_0_11_369)))
 (let ((?x69520 (* l_0_11_368 l_0_11_368)))
 (let ((?x69518 (* l_0_11_367 l_0_11_367)))
 (let ((?x69516 (* l_0_11_325 l_0_11_325)))
 (let ((?x69514 (* l_0_11_324 l_0_11_324)))
 (let ((?x69512 (* l_0_11_323 l_0_11_323)))
 (let ((?x69510 (* l_0_11_322 l_0_11_322)))
 (let ((?x69508 (* l_0_11_280 l_0_11_280)))
 (let ((?x69506 (* l_0_11_279 l_0_11_279)))
 (let ((?x69504 (* l_0_11_278 l_0_11_278)))
 (let ((?x69502 (* l_0_11_277 l_0_11_277)))
 (let ((?x69495 (- (* (* (- 1.0) l_0_11_187) l_0_11_187) (* (* 1.0 l_0_11_188) l_0_11_188))))
 (let ((?x69501 (- (- ?x69495 (* (* 1.0 l_0_11_189) l_0_11_189)) (* (* 1.0 l_0_11_190) l_0_11_190))))
 (let ((?x69515 (- (- (- (- (- (- (- ?x69501 ?x69502) ?x69504) ?x69506) ?x69508) ?x69510) ?x69512) ?x69514)))
 (= (- (- (- (- (- ?x69515 ?x69516) ?x69518) ?x69520) ?x69522) ?x69524) 0.0)))))))))))))))))
(assert
 (let ((?x69560 (- (* (* (- 2.0) l_0_11_187) l_0_11_196) (* (* 2.0 l_0_11_188) l_0_11_197))))
 (let ((?x69564 (- (- ?x69560 (* (* 2.0 l_0_11_189) l_0_11_198)) (* (* 2.0 l_0_11_190) l_0_11_199))))
 (let ((?x69568 (- (- ?x69564 (* (* 2.0 l_0_11_277) l_0_11_286)) (* (* 2.0 l_0_11_278) l_0_11_287))))
 (let ((?x69572 (- (- ?x69568 (* (* 2.0 l_0_11_279) l_0_11_288)) (* (* 2.0 l_0_11_280) l_0_11_289))))
 (let ((?x69576 (- (- ?x69572 (* (* 2.0 l_0_11_322) l_0_11_331)) (* (* 2.0 l_0_11_323) l_0_11_332))))
 (let ((?x69580 (- (- ?x69576 (* (* 2.0 l_0_11_324) l_0_11_333)) (* (* 2.0 l_0_11_325) l_0_11_334))))
 (let ((?x69584 (- (- ?x69580 (* (* 2.0 l_0_11_367) l_0_11_376)) (* (* 2.0 l_0_11_368) l_0_11_377))))
 (let ((?x69588 (- (- ?x69584 (* (* 2.0 l_0_11_369) l_0_11_378)) (* (* 2.0 l_0_11_370) l_0_11_379))))
 (= ?x69588 0.0))))))))))
(assert
 (let ((?x69655 (- (* (* (- 2.0) l_0_11_187) l_0_11_209) (* (* 2.0 l_0_11_188) l_0_11_210))))
 (let ((?x69659 (- (- ?x69655 (* (* 2.0 l_0_11_189) l_0_11_211)) (* (* 2.0 l_0_11_190) l_0_11_212))))
 (let ((?x69663 (- (- ?x69659 (* (* 2.0 l_0_11_277) l_0_11_299)) (* (* 2.0 l_0_11_278) l_0_11_300))))
 (let ((?x69667 (- (- ?x69663 (* (* 2.0 l_0_11_279) l_0_11_301)) (* (* 2.0 l_0_11_280) l_0_11_302))))
 (let ((?x69671 (- (- ?x69667 (* (* 2.0 l_0_11_322) l_0_11_344)) (* (* 2.0 l_0_11_323) l_0_11_345))))
 (let ((?x69675 (- (- ?x69671 (* (* 2.0 l_0_11_324) l_0_11_346)) (* (* 2.0 l_0_11_325) l_0_11_347))))
 (let ((?x69679 (- (- ?x69675 (* (* 2.0 l_0_11_367) l_0_11_389)) (* (* 2.0 l_0_11_368) l_0_11_390))))
 (let ((?x69683 (- (- ?x69679 (* (* 2.0 l_0_11_369) l_0_11_391)) (* (* 2.0 l_0_11_370) l_0_11_392))))
 (= ?x69683 0.0))))))))))
(assert
 (let ((?x69722 (- (* (* (- 2.0) l_0_11_187) l_0_11_217) (* (* 2.0 l_0_11_188) l_0_11_218))))
 (let ((?x69726 (- (- ?x69722 (* (* 2.0 l_0_11_189) l_0_11_219)) (* (* 2.0 l_0_11_190) l_0_11_220))))
 (let ((?x69730 (- (- ?x69726 (* (* 2.0 l_0_11_277) l_0_11_307)) (* (* 2.0 l_0_11_278) l_0_11_308))))
 (let ((?x69734 (- (- ?x69730 (* (* 2.0 l_0_11_279) l_0_11_309)) (* (* 2.0 l_0_11_280) l_0_11_310))))
 (let ((?x69738 (- (- ?x69734 (* (* 2.0 l_0_11_322) l_0_11_352)) (* (* 2.0 l_0_11_323) l_0_11_353))))
 (let ((?x69742 (- (- ?x69738 (* (* 2.0 l_0_11_324) l_0_11_354)) (* (* 2.0 l_0_11_325) l_0_11_355))))
 (let ((?x69746 (- (- ?x69742 (* (* 2.0 l_0_11_367) l_0_11_397)) (* (* 2.0 l_0_11_368) l_0_11_398))))
 (let ((?x69750 (- (- ?x69746 (* (* 2.0 l_0_11_369) l_0_11_399)) (* (* 2.0 l_0_11_370) l_0_11_400))))
 (= ?x69750 0.0))))))))))
(assert
 (let ((?x69854 (* l_0_11_381 l_0_11_381)))
 (let ((?x69852 (* l_0_11_380 l_0_11_380)))
 (let ((?x69850 (* l_0_11_379 l_0_11_379)))
 (let ((?x69848 (* l_0_11_378 l_0_11_378)))
 (let ((?x69846 (* l_0_11_377 l_0_11_377)))
 (let ((?x69844 (* l_0_11_376 l_0_11_376)))
 (let ((?x69842 (* l_0_11_336 l_0_11_336)))
 (let ((?x69840 (* l_0_11_335 l_0_11_335)))
 (let ((?x69838 (* l_0_11_334 l_0_11_334)))
 (let ((?x69836 (* l_0_11_333 l_0_11_333)))
 (let ((?x69834 (* l_0_11_332 l_0_11_332)))
 (let ((?x69832 (* l_0_11_331 l_0_11_331)))
 (let ((?x69830 (* l_0_11_291 l_0_11_291)))
 (let ((?x69828 (* l_0_11_290 l_0_11_290)))
 (let ((?x69826 (* l_0_11_289 l_0_11_289)))
 (let ((?x69824 (* l_0_11_288 l_0_11_288)))
 (let ((?x69822 (* l_0_11_287 l_0_11_287)))
 (let ((?x69820 (* l_0_11_286 l_0_11_286)))
 (let ((?x69807 (- (* (* (- 1.0) l_0_11_196) l_0_11_196) (* (* 1.0 l_0_11_197) l_0_11_197))))
 (let ((?x69813 (- (- ?x69807 (* (* 1.0 l_0_11_198) l_0_11_198)) (* (* 1.0 l_0_11_199) l_0_11_199))))
 (let ((?x69819 (- (- ?x69813 (* (* 1.0 l_0_11_200) l_0_11_200)) (* (* 1.0 l_0_11_201) l_0_11_201))))
 (let ((?x69833 (- (- (- (- (- (- (- ?x69819 ?x69820) ?x69822) ?x69824) ?x69826) ?x69828) ?x69830) ?x69832)))
 (let ((?x69847 (- (- (- (- (- (- (- ?x69833 ?x69834) ?x69836) ?x69838) ?x69840) ?x69842) ?x69844) ?x69846)))
 (= (- (- (- (- ?x69847 ?x69848) ?x69850) ?x69852) ?x69854) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x69908 (- (* (* (- 2.0) l_0_11_196) l_0_11_202) (* (* 2.0 l_0_11_197) l_0_11_203))))
 (let ((?x69912 (- (- ?x69908 (* (* 2.0 l_0_11_198) l_0_11_204)) (* (* 2.0 l_0_11_199) l_0_11_205))))
 (let ((?x69916 (- (- ?x69912 (* (* 2.0 l_0_11_200) l_0_11_206)) (* (* 2.0 l_0_11_201) l_0_11_207))))
 (let ((?x69920 (- (- ?x69916 (* (* 2.0 l_0_11_286) l_0_11_292)) (* (* 2.0 l_0_11_287) l_0_11_293))))
 (let ((?x69924 (- (- ?x69920 (* (* 2.0 l_0_11_288) l_0_11_294)) (* (* 2.0 l_0_11_289) l_0_11_295))))
 (let ((?x69928 (- (- ?x69924 (* (* 2.0 l_0_11_290) l_0_11_296)) (* (* 2.0 l_0_11_291) l_0_11_297))))
 (let ((?x69932 (- (- ?x69928 (* (* 2.0 l_0_11_331) l_0_11_337)) (* (* 2.0 l_0_11_332) l_0_11_338))))
 (let ((?x69936 (- (- ?x69932 (* (* 2.0 l_0_11_333) l_0_11_339)) (* (* 2.0 l_0_11_334) l_0_11_340))))
 (let ((?x69940 (- (- ?x69936 (* (* 2.0 l_0_11_335) l_0_11_341)) (* (* 2.0 l_0_11_336) l_0_11_342))))
 (let ((?x69944 (- (- ?x69940 (* (* 2.0 l_0_11_376) l_0_11_382)) (* (* 2.0 l_0_11_377) l_0_11_383))))
 (let ((?x69948 (- (- ?x69944 (* (* 2.0 l_0_11_378) l_0_11_384)) (* (* 2.0 l_0_11_379) l_0_11_385))))
 (let ((?x69952 (- (- ?x69948 (* (* 2.0 l_0_11_380) l_0_11_386)) (* (* 2.0 l_0_11_381) l_0_11_387))))
 (= ?x69952 0.0))))))))))))))
(assert
 (let ((?x70090 (- (* (* (- 2.0) l_0_11_196) l_0_11_217) (* (* 2.0 l_0_11_197) l_0_11_218))))
 (let ((?x70094 (- (- ?x70090 (* (* 2.0 l_0_11_198) l_0_11_219)) (* (* 2.0 l_0_11_199) l_0_11_220))))
 (let ((?x70098 (- (- ?x70094 (* (* 2.0 l_0_11_200) l_0_11_221)) (* (* 2.0 l_0_11_201) l_0_11_222))))
 (let ((?x70102 (- (- ?x70098 (* (* 2.0 l_0_11_286) l_0_11_307)) (* (* 2.0 l_0_11_287) l_0_11_308))))
 (let ((?x70106 (- (- ?x70102 (* (* 2.0 l_0_11_288) l_0_11_309)) (* (* 2.0 l_0_11_289) l_0_11_310))))
 (let ((?x70110 (- (- ?x70106 (* (* 2.0 l_0_11_290) l_0_11_311)) (* (* 2.0 l_0_11_291) l_0_11_312))))
 (let ((?x70114 (- (- ?x70110 (* (* 2.0 l_0_11_331) l_0_11_352)) (* (* 2.0 l_0_11_332) l_0_11_353))))
 (let ((?x70118 (- (- ?x70114 (* (* 2.0 l_0_11_333) l_0_11_354)) (* (* 2.0 l_0_11_334) l_0_11_355))))
 (let ((?x70122 (- (- ?x70118 (* (* 2.0 l_0_11_335) l_0_11_356)) (* (* 2.0 l_0_11_336) l_0_11_357))))
 (let ((?x70126 (- (- ?x70122 (* (* 2.0 l_0_11_376) l_0_11_397)) (* (* 2.0 l_0_11_377) l_0_11_398))))
 (let ((?x70130 (- (- ?x70126 (* (* 2.0 l_0_11_378) l_0_11_399)) (* (* 2.0 l_0_11_379) l_0_11_400))))
 (let ((?x70134 (- (- ?x70130 (* (* 2.0 l_0_11_380) l_0_11_401)) (* (* 2.0 l_0_11_381) l_0_11_402))))
 (= ?x70134 0.0))))))))))))))
(assert
 (let ((?x70294 (* l_0_11_388 l_0_11_388)))
 (let ((?x70292 (* l_0_11_387 l_0_11_387)))
 (let ((?x70290 (* l_0_11_386 l_0_11_386)))
 (let ((?x70288 (* l_0_11_385 l_0_11_385)))
 (let ((?x70286 (* l_0_11_384 l_0_11_384)))
 (let ((?x70284 (* l_0_11_383 l_0_11_383)))
 (let ((?x70282 (* l_0_11_382 l_0_11_382)))
 (let ((?x70280 (* l_0_11_343 l_0_11_343)))
 (let ((?x70278 (* l_0_11_342 l_0_11_342)))
 (let ((?x70276 (* l_0_11_341 l_0_11_341)))
 (let ((?x70274 (* l_0_11_340 l_0_11_340)))
 (let ((?x70272 (* l_0_11_339 l_0_11_339)))
 (let ((?x70270 (* l_0_11_338 l_0_11_338)))
 (let ((?x70268 (* l_0_11_337 l_0_11_337)))
 (let ((?x70266 (* l_0_11_298 l_0_11_298)))
 (let ((?x70264 (* l_0_11_297 l_0_11_297)))
 (let ((?x70262 (* l_0_11_296 l_0_11_296)))
 (let ((?x70260 (* l_0_11_295 l_0_11_295)))
 (let ((?x70258 (* l_0_11_294 l_0_11_294)))
 (let ((?x70256 (* l_0_11_293 l_0_11_293)))
 (let ((?x70254 (* l_0_11_292 l_0_11_292)))
 (let ((?x70238 (- (* (* (- 1.0) l_0_11_202) l_0_11_202) (* (* 1.0 l_0_11_203) l_0_11_203))))
 (let ((?x70244 (- (- ?x70238 (* (* 1.0 l_0_11_204) l_0_11_204)) (* (* 1.0 l_0_11_205) l_0_11_205))))
 (let ((?x70250 (- (- ?x70244 (* (* 1.0 l_0_11_206) l_0_11_206)) (* (* 1.0 l_0_11_207) l_0_11_207))))
 (let ((?x70259 (- (- (- (- ?x70250 (* (* 1.0 l_0_11_208) l_0_11_208)) ?x70254) ?x70256) ?x70258)))
 (let ((?x70273 (- (- (- (- (- (- (- ?x70259 ?x70260) ?x70262) ?x70264) ?x70266) ?x70268) ?x70270) ?x70272)))
 (let ((?x70287 (- (- (- (- (- (- (- ?x70273 ?x70274) ?x70276) ?x70278) ?x70280) ?x70282) ?x70284) ?x70286)))
 (= (- (- (- (- ?x70287 ?x70288) ?x70290) ?x70292) ?x70294) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x70345 (- (* (* (- 2.0) l_0_11_202) l_0_11_209) (* (* 2.0 l_0_11_203) l_0_11_210))))
 (let ((?x70349 (- (- ?x70345 (* (* 2.0 l_0_11_204) l_0_11_211)) (* (* 2.0 l_0_11_205) l_0_11_212))))
 (let ((?x70353 (- (- ?x70349 (* (* 2.0 l_0_11_206) l_0_11_213)) (* (* 2.0 l_0_11_207) l_0_11_214))))
 (let ((?x70357 (- (- ?x70353 (* (* 2.0 l_0_11_208) l_0_11_215)) (* (* 2.0 l_0_11_292) l_0_11_299))))
 (let ((?x70361 (- (- ?x70357 (* (* 2.0 l_0_11_293) l_0_11_300)) (* (* 2.0 l_0_11_294) l_0_11_301))))
 (let ((?x70365 (- (- ?x70361 (* (* 2.0 l_0_11_295) l_0_11_302)) (* (* 2.0 l_0_11_296) l_0_11_303))))
 (let ((?x70369 (- (- ?x70365 (* (* 2.0 l_0_11_297) l_0_11_304)) (* (* 2.0 l_0_11_298) l_0_11_305))))
 (let ((?x70373 (- (- ?x70369 (* (* 2.0 l_0_11_337) l_0_11_344)) (* (* 2.0 l_0_11_338) l_0_11_345))))
 (let ((?x70377 (- (- ?x70373 (* (* 2.0 l_0_11_339) l_0_11_346)) (* (* 2.0 l_0_11_340) l_0_11_347))))
 (let ((?x70381 (- (- ?x70377 (* (* 2.0 l_0_11_341) l_0_11_348)) (* (* 2.0 l_0_11_342) l_0_11_349))))
 (let ((?x70385 (- (- ?x70381 (* (* 2.0 l_0_11_343) l_0_11_350)) (* (* 2.0 l_0_11_382) l_0_11_389))))
 (let ((?x70389 (- (- ?x70385 (* (* 2.0 l_0_11_383) l_0_11_390)) (* (* 2.0 l_0_11_384) l_0_11_391))))
 (let ((?x70393 (- (- ?x70389 (* (* 2.0 l_0_11_385) l_0_11_392)) (* (* 2.0 l_0_11_386) l_0_11_393))))
 (let ((?x70397 (- (- ?x70393 (* (* 2.0 l_0_11_387) l_0_11_394)) (* (* 2.0 l_0_11_388) l_0_11_395))))
 (= ?x70397 0.0))))))))))))))))
(assert
 (let ((?x70498 (* l_0_11_396 l_0_11_396)))
 (let ((?x70496 (* l_0_11_395 l_0_11_395)))
 (let ((?x70494 (* l_0_11_394 l_0_11_394)))
 (let ((?x70492 (* l_0_11_393 l_0_11_393)))
 (let ((?x70490 (* l_0_11_392 l_0_11_392)))
 (let ((?x70488 (* l_0_11_391 l_0_11_391)))
 (let ((?x70486 (* l_0_11_390 l_0_11_390)))
 (let ((?x70484 (* l_0_11_389 l_0_11_389)))
 (let ((?x70482 (* l_0_11_351 l_0_11_351)))
 (let ((?x70480 (* l_0_11_350 l_0_11_350)))
 (let ((?x70478 (* l_0_11_349 l_0_11_349)))
 (let ((?x70476 (* l_0_11_348 l_0_11_348)))
 (let ((?x70474 (* l_0_11_347 l_0_11_347)))
 (let ((?x70472 (* l_0_11_346 l_0_11_346)))
 (let ((?x70470 (* l_0_11_345 l_0_11_345)))
 (let ((?x70468 (* l_0_11_344 l_0_11_344)))
 (let ((?x70466 (* l_0_11_306 l_0_11_306)))
 (let ((?x70464 (* l_0_11_305 l_0_11_305)))
 (let ((?x70462 (* l_0_11_304 l_0_11_304)))
 (let ((?x70460 (* l_0_11_303 l_0_11_303)))
 (let ((?x70458 (* l_0_11_302 l_0_11_302)))
 (let ((?x70456 (* l_0_11_301 l_0_11_301)))
 (let ((?x70454 (* l_0_11_300 l_0_11_300)))
 (let ((?x70452 (* l_0_11_299 l_0_11_299)))
 (let ((?x60356 (- (* (* (- 1.0) l_0_11_209) l_0_11_209) (* (* 1.0 l_0_11_210) l_0_11_210))))
 (let ((?x70439 (- (- ?x60356 (* (* 1.0 l_0_11_211) l_0_11_211)) (* (* 1.0 l_0_11_212) l_0_11_212))))
 (let ((?x70445 (- (- ?x70439 (* (* 1.0 l_0_11_213) l_0_11_213)) (* (* 1.0 l_0_11_214) l_0_11_214))))
 (let ((?x70451 (- (- ?x70445 (* (* 1.0 l_0_11_215) l_0_11_215)) (* (* 1.0 l_0_11_216) l_0_11_216))))
 (let ((?x70465 (- (- (- (- (- (- (- ?x70451 ?x70452) ?x70454) ?x70456) ?x70458) ?x70460) ?x70462) ?x70464)))
 (let ((?x70479 (- (- (- (- (- (- (- ?x70465 ?x70466) ?x70468) ?x70470) ?x70472) ?x70474) ?x70476) ?x70478)))
 (let ((?x70493 (- (- (- (- (- (- (- ?x70479 ?x70480) ?x70482) ?x70484) ?x70486) ?x70488) ?x70490) ?x70492)))
 (= (- (- (- ?x70493 ?x70494) ?x70496) ?x70498) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x47537 (- (* (* (- 2.0) l_0_11_209) l_0_11_217) (* (* 2.0 l_0_11_210) l_0_11_218))))
 (let ((?x47533 (- (- ?x47537 (* (* 2.0 l_0_11_211) l_0_11_219)) (* (* 2.0 l_0_11_212) l_0_11_220))))
 (let ((?x70560 (- (- ?x47533 (* (* 2.0 l_0_11_213) l_0_11_221)) (* (* 2.0 l_0_11_214) l_0_11_222))))
 (let ((?x70566 (- (- ?x70560 (* (* 2.0 l_0_11_215) l_0_11_223)) (* (* 2.0 l_0_11_216) l_0_11_224))))
 (let ((?x70572 (- (- ?x70566 (* (* 2.0 l_0_11_299) l_0_11_307)) (* (* 2.0 l_0_11_300) l_0_11_308))))
 (let ((?x70578 (- (- ?x70572 (* (* 2.0 l_0_11_301) l_0_11_309)) (* (* 2.0 l_0_11_302) l_0_11_310))))
 (let ((?x70584 (- (- ?x70578 (* (* 2.0 l_0_11_303) l_0_11_311)) (* (* 2.0 l_0_11_304) l_0_11_312))))
 (let ((?x70590 (- (- ?x70584 (* (* 2.0 l_0_11_305) l_0_11_313)) (* (* 2.0 l_0_11_306) l_0_11_314))))
 (let ((?x70596 (- (- ?x70590 (* (* 2.0 l_0_11_344) l_0_11_352)) (* (* 2.0 l_0_11_345) l_0_11_353))))
 (let ((?x70602 (- (- ?x70596 (* (* 2.0 l_0_11_346) l_0_11_354)) (* (* 2.0 l_0_11_347) l_0_11_355))))
 (let ((?x70608 (- (- ?x70602 (* (* 2.0 l_0_11_348) l_0_11_356)) (* (* 2.0 l_0_11_349) l_0_11_357))))
 (let ((?x70614 (- (- ?x70608 (* (* 2.0 l_0_11_350) l_0_11_358)) (* (* 2.0 l_0_11_351) l_0_11_359))))
 (let ((?x70620 (- (- ?x70614 (* (* 2.0 l_0_11_389) l_0_11_397)) (* (* 2.0 l_0_11_390) l_0_11_398))))
 (let ((?x70626 (- (- ?x70620 (* (* 2.0 l_0_11_391) l_0_11_399)) (* (* 2.0 l_0_11_392) l_0_11_400))))
 (let ((?x70632 (- (- ?x70626 (* (* 2.0 l_0_11_393) l_0_11_401)) (* (* 2.0 l_0_11_394) l_0_11_402))))
 (let ((?x70638 (- (- ?x70632 (* (* 2.0 l_0_11_395) l_0_11_403)) (* (* 2.0 l_0_11_396) l_0_11_404))))
 (= ?x70638 0.0))))))))))))))))))
(assert
 (let ((?x70807 (* l_0_11_405 l_0_11_405)))
 (let ((?x70805 (* l_0_11_404 l_0_11_404)))
 (let ((?x70803 (* l_0_11_403 l_0_11_403)))
 (let ((?x70801 (* l_0_11_402 l_0_11_402)))
 (let ((?x70799 (* l_0_11_401 l_0_11_401)))
 (let ((?x70797 (* l_0_11_400 l_0_11_400)))
 (let ((?x70795 (* l_0_11_399 l_0_11_399)))
 (let ((?x70793 (* l_0_11_398 l_0_11_398)))
 (let ((?x70791 (* l_0_11_397 l_0_11_397)))
 (let ((?x70789 (* l_0_11_360 l_0_11_360)))
 (let ((?x70787 (* l_0_11_359 l_0_11_359)))
 (let ((?x70785 (* l_0_11_358 l_0_11_358)))
 (let ((?x70783 (* l_0_11_357 l_0_11_357)))
 (let ((?x70781 (* l_0_11_356 l_0_11_356)))
 (let ((?x70779 (* l_0_11_355 l_0_11_355)))
 (let ((?x70777 (* l_0_11_354 l_0_11_354)))
 (let ((?x70775 (* l_0_11_353 l_0_11_353)))
 (let ((?x70773 (* l_0_11_352 l_0_11_352)))
 (let ((?x70771 (* l_0_11_315 l_0_11_315)))
 (let ((?x70769 (* l_0_11_314 l_0_11_314)))
 (let ((?x70767 (* l_0_11_313 l_0_11_313)))
 (let ((?x70765 (* l_0_11_312 l_0_11_312)))
 (let ((?x70763 (* l_0_11_311 l_0_11_311)))
 (let ((?x70761 (* l_0_11_310 l_0_11_310)))
 (let ((?x70759 (* l_0_11_309 l_0_11_309)))
 (let ((?x70757 (* l_0_11_308 l_0_11_308)))
 (let ((?x70755 (* l_0_11_307 l_0_11_307)))
 (let ((?x70733 (- (* (* (- 1.0) l_0_11_217) l_0_11_217) (* (* 1.0 l_0_11_218) l_0_11_218))))
 (let ((?x70739 (- (- ?x70733 (* (* 1.0 l_0_11_219) l_0_11_219)) (* (* 1.0 l_0_11_220) l_0_11_220))))
 (let ((?x70745 (- (- ?x70739 (* (* 1.0 l_0_11_221) l_0_11_221)) (* (* 1.0 l_0_11_222) l_0_11_222))))
 (let ((?x70751 (- (- ?x70745 (* (* 1.0 l_0_11_223) l_0_11_223)) (* (* 1.0 l_0_11_224) l_0_11_224))))
 (let ((?x70760 (- (- (- (- ?x70751 (* (* 1.0 l_0_11_225) l_0_11_225)) ?x70755) ?x70757) ?x70759)))
 (let ((?x70774 (- (- (- (- (- (- (- ?x70760 ?x70761) ?x70763) ?x70765) ?x70767) ?x70769) ?x70771) ?x70773)))
 (let ((?x70788 (- (- (- (- (- (- (- ?x70774 ?x70775) ?x70777) ?x70779) ?x70781) ?x70783) ?x70785) ?x70787)))
 (let ((?x70802 (- (- (- (- (- (- (- ?x70788 ?x70789) ?x70791) ?x70793) ?x70795) ?x70797) ?x70799) ?x70801)))
 (= (- (- (- ?x70802 ?x70803) ?x70805) ?x70807) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_11_1 0.0))
(assert
 (>= l_0_11_3 0.0))
(assert
 (>= l_0_11_6 0.0))
(assert
 (>= l_0_11_10 0.0))
(assert
 (>= l_0_11_15 0.0))
(assert
 (>= l_0_11_21 0.0))
(assert
 (>= l_0_11_28 0.0))
(assert
 (>= l_0_11_36 0.0))
(assert
 (>= l_0_11_45 0.0))
(assert
 (>= l_0_11_46 0.0))
(assert
 (>= l_0_11_48 0.0))
(assert
 (>= l_0_11_51 0.0))
(assert
 (>= l_0_11_55 0.0))
(assert
 (>= l_0_11_60 0.0))
(assert
 (>= l_0_11_66 0.0))
(assert
 (>= l_0_11_73 0.0))
(assert
 (>= l_0_11_81 0.0))
(assert
 (>= l_0_11_90 0.0))
(assert
 (>= l_0_11_91 0.0))
(assert
 (>= l_0_11_93 0.0))
(assert
 (>= l_0_11_96 0.0))
(assert
 (>= l_0_11_100 0.0))
(assert
 (>= l_0_11_105 0.0))
(assert
 (>= l_0_11_111 0.0))
(assert
 (>= l_0_11_118 0.0))
(assert
 (>= l_0_11_126 0.0))
(assert
 (>= l_0_11_135 0.0))
(assert
 (>= l_0_11_136 0.0))
(assert
 (>= l_0_11_138 0.0))
(assert
 (>= l_0_11_141 0.0))
(assert
 (>= l_0_11_145 0.0))
(assert
 (>= l_0_11_150 0.0))
(assert
 (>= l_0_11_156 0.0))
(assert
 (>= l_0_11_163 0.0))
(assert
 (>= l_0_11_171 0.0))
(assert
 (>= l_0_11_180 0.0))
(assert
 (>= l_0_11_181 0.0))
(assert
 (>= l_0_11_183 0.0))
(assert
 (>= l_0_11_186 0.0))
(assert
 (>= l_0_11_190 0.0))
(assert
 (>= l_0_11_195 0.0))
(assert
 (>= l_0_11_201 0.0))
(assert
 (>= l_0_11_208 0.0))
(assert
 (>= l_0_11_216 0.0))
(assert
 (>= l_0_11_225 0.0))
(assert
 (>= l_0_11_226 0.0))
(assert
 (>= l_0_11_228 0.0))
(assert
 (>= l_0_11_231 0.0))
(assert
 (>= l_0_11_235 0.0))
(assert
 (>= l_0_11_240 0.0))
(assert
 (>= l_0_11_246 0.0))
(assert
 (>= l_0_11_253 0.0))
(assert
 (>= l_0_11_261 0.0))
(assert
 (>= l_0_11_270 0.0))
(assert
 (>= l_0_11_271 0.0))
(assert
 (>= l_0_11_273 0.0))
(assert
 (>= l_0_11_276 0.0))
(assert
 (>= l_0_11_280 0.0))
(assert
 (>= l_0_11_285 0.0))
(assert
 (>= l_0_11_291 0.0))
(assert
 (>= l_0_11_298 0.0))
(assert
 (>= l_0_11_306 0.0))
(assert
 (>= l_0_11_315 0.0))
(assert
 (>= l_0_11_316 0.0))
(assert
 (>= l_0_11_318 0.0))
(assert
 (>= l_0_11_321 0.0))
(assert
 (>= l_0_11_325 0.0))
(assert
 (>= l_0_11_330 0.0))
(assert
 (>= l_0_11_336 0.0))
(assert
 (>= l_0_11_343 0.0))
(assert
 (>= l_0_11_351 0.0))
(assert
 (>= l_0_11_360 0.0))
(assert
 (>= l_0_11_361 0.0))
(assert
 (>= l_0_11_363 0.0))
(assert
 (>= l_0_11_366 0.0))
(assert
 (>= l_0_11_370 0.0))
(assert
 (>= l_0_11_375 0.0))
(assert
 (>= l_0_11_381 0.0))
(assert
 (>= l_0_11_388 0.0))
(assert
 (>= l_0_11_396 0.0))
(assert
 (>= l_0_11_405 0.0))
(assert
 (let ((?x70951 (* l_0_12_406 l_0_12_406)))
 (let ((?x70949 (* l_0_12_361 l_0_12_361)))
 (let ((?x70947 (* l_0_12_316 l_0_12_316)))
 (let ((?x70945 (* l_0_12_271 l_0_12_271)))
 (let ((?x70948 (- (- (- _a_6_ (* (* 1.0 l_0_12_181) l_0_12_181)) ?x70945) ?x70947)))
 (= (- (- ?x70948 ?x70949) ?x70951) 0.0)))))))
(assert
 (let ((?x70986 (* l_0_12_46 l_0_12_46)))
 (let ((?x70972 (* l_0_12_226 l_0_12_226)))
 (let ((?x70967 (* l_0_12_1 l_0_12_1)))
 (let ((?x70968 (+ _a_7_ ?x70967)))
 (let ((?x70976 (- (+ (- ?x70968 (* (* 2.0 l_0_12_181) l_0_12_184)) ?x70972) (* (* 2.0 l_0_12_271) l_0_12_274))))
 (let ((?x70982 (- (- ?x70976 (* (* 2.0 l_0_12_316) l_0_12_319)) (* (* 2.0 l_0_12_361) l_0_12_364))))
 (= (- (- ?x70982 (* (* 2.0 l_0_12_406) l_0_12_409)) ?x70986) 0.0))))))))
(assert
 (let ((?x71003 (* l_0_12_91 l_0_12_91)))
 (let ((?x70972 (* l_0_12_226 l_0_12_226)))
 (let ((?x60587 (- (- _a_8_ (* l_0_12_136 l_0_12_136)) (* (* 2.0 l_0_12_181) l_0_12_191))))
 (let ((?x25500 (- (- (- ?x60587 ?x70972) (* (* 2.0 l_0_12_271) l_0_12_281)) (* (* 2.0 l_0_12_316) l_0_12_326))))
 (let ((?x71002 (- (- ?x25500 (* (* 2.0 l_0_12_361) l_0_12_371)) (* (* 2.0 l_0_12_406) l_0_12_416))))
 (= (+ ?x71002 ?x71003) 0.0)))))))
(assert
 (let ((?x71003 (* l_0_12_91 l_0_12_91)))
 (let ((?x60623 (* l_0_12_136 l_0_12_136)))
 (let ((?x71029 (- (- ?x60623 (* (* 2.0 l_0_12_202) l_0_12_217)) (* (* 2.0 l_0_12_203) l_0_12_218))))
 (let ((?x71035 (- (- ?x71029 (* (* 2.0 l_0_12_204) l_0_12_219)) (* (* 2.0 l_0_12_205) l_0_12_220))))
 (let ((?x71041 (- (- ?x71035 (* (* 2.0 l_0_12_206) l_0_12_221)) (* (* 2.0 l_0_12_207) l_0_12_222))))
 (let ((?x71047 (- (- ?x71041 (* (* 2.0 l_0_12_208) l_0_12_223)) (* (* 2.0 l_0_12_292) l_0_12_307))))
 (let ((?x71053 (- (- ?x71047 (* (* 2.0 l_0_12_293) l_0_12_308)) (* (* 2.0 l_0_12_294) l_0_12_309))))
 (let ((?x71059 (- (- ?x71053 (* (* 2.0 l_0_12_295) l_0_12_310)) (* (* 2.0 l_0_12_296) l_0_12_311))))
 (let ((?x71065 (- (- ?x71059 (* (* 2.0 l_0_12_297) l_0_12_312)) (* (* 2.0 l_0_12_298) l_0_12_313))))
 (let ((?x71071 (- (- ?x71065 (* (* 2.0 l_0_12_337) l_0_12_352)) (* (* 2.0 l_0_12_338) l_0_12_353))))
 (let ((?x71077 (- (- ?x71071 (* (* 2.0 l_0_12_339) l_0_12_354)) (* (* 2.0 l_0_12_340) l_0_12_355))))
 (let ((?x71083 (- (- ?x71077 (* (* 2.0 l_0_12_341) l_0_12_356)) (* (* 2.0 l_0_12_342) l_0_12_357))))
 (let ((?x71089 (- (- ?x71083 (* (* 2.0 l_0_12_343) l_0_12_358)) (* (* 2.0 l_0_12_382) l_0_12_397))))
 (let ((?x71095 (- (- ?x71089 (* (* 2.0 l_0_12_383) l_0_12_398)) (* (* 2.0 l_0_12_384) l_0_12_399))))
 (let ((?x71101 (- (- ?x71095 (* (* 2.0 l_0_12_385) l_0_12_400)) (* (* 2.0 l_0_12_386) l_0_12_401))))
 (let ((?x71107 (- (- ?x71101 (* (* 2.0 l_0_12_387) l_0_12_402)) (* (* 2.0 l_0_12_388) l_0_12_403))))
 (let ((?x71113 (- (- ?x71107 (* (* 2.0 l_0_12_427) l_0_12_442)) (* (* 2.0 l_0_12_428) l_0_12_443))))
 (let ((?x71119 (- (- ?x71113 (* (* 2.0 l_0_12_429) l_0_12_444)) (* (* 2.0 l_0_12_430) l_0_12_445))))
 (let ((?x71125 (- (- ?x71119 (* (* 2.0 l_0_12_431) l_0_12_446)) (* (* 2.0 l_0_12_432) l_0_12_447))))
 (= (- (- (- ?x71125 (* (* 2.0 l_0_12_433) l_0_12_448)) ?x71003) 1.0) 0.0)))))))))))))))))))))
(assert
 (let ((?x70986 (* l_0_12_46 l_0_12_46)))
 (let ((?x71246 (- (* (- l_0_12_1) l_0_12_1) (* (* 2.0 l_0_12_187) l_0_12_202))))
 (let ((?x71252 (- (- ?x71246 (* (* 2.0 l_0_12_188) l_0_12_203)) (* (* 2.0 l_0_12_189) l_0_12_204))))
 (let ((?x71258 (- (- ?x71252 (* (* 2.0 l_0_12_190) l_0_12_205)) (* (* 2.0 l_0_12_277) l_0_12_292))))
 (let ((?x71264 (- (- ?x71258 (* (* 2.0 l_0_12_278) l_0_12_293)) (* (* 2.0 l_0_12_279) l_0_12_294))))
 (let ((?x71270 (- (- ?x71264 (* (* 2.0 l_0_12_280) l_0_12_295)) (* (* 2.0 l_0_12_322) l_0_12_337))))
 (let ((?x71276 (- (- ?x71270 (* (* 2.0 l_0_12_323) l_0_12_338)) (* (* 2.0 l_0_12_324) l_0_12_339))))
 (let ((?x71282 (- (- ?x71276 (* (* 2.0 l_0_12_325) l_0_12_340)) (* (* 2.0 l_0_12_367) l_0_12_382))))
 (let ((?x71288 (- (- ?x71282 (* (* 2.0 l_0_12_368) l_0_12_383)) (* (* 2.0 l_0_12_369) l_0_12_384))))
 (let ((?x71294 (- (- ?x71288 (* (* 2.0 l_0_12_370) l_0_12_385)) (* (* 2.0 l_0_12_412) l_0_12_427))))
 (let ((?x71300 (- (- ?x71294 (* (* 2.0 l_0_12_413) l_0_12_428)) (* (* 2.0 l_0_12_414) l_0_12_429))))
 (= (+ (+ (- ?x71300 (* (* 2.0 l_0_12_415) l_0_12_430)) ?x70986) 1.0) 0.0)))))))))))))
(assert
 (let ((?x71003 (* l_0_12_91 l_0_12_91)))
 (let ((?x71377 (- (+ (- _a_9_) (* l_0_12_136 l_0_12_136)) (* (* 2.0 l_0_12_182) l_0_12_209))))
 (let ((?x71383 (- (- ?x71377 (* (* 2.0 l_0_12_183) l_0_12_210)) (* (* 2.0 l_0_12_272) l_0_12_299))))
 (let ((?x71389 (- (- ?x71383 (* (* 2.0 l_0_12_273) l_0_12_300)) (* (* 2.0 l_0_12_317) l_0_12_344))))
 (let ((?x71395 (- (- ?x71389 (* (* 2.0 l_0_12_318) l_0_12_345)) (* (* 2.0 l_0_12_362) l_0_12_389))))
 (let ((?x71401 (- (- ?x71395 (* (* 2.0 l_0_12_363) l_0_12_390)) (* (* 2.0 l_0_12_407) l_0_12_434))))
 (= (- (- ?x71401 (* (* 2.0 l_0_12_408) l_0_12_435)) ?x71003) 0.0))))))))
(assert
 (let ((?x71447 (- (- (- _a_10_) (* (* 2.0 l_0_12_181) l_0_12_209)) (* (* 2.0 l_0_12_271) l_0_12_299))))
 (let ((?x71451 (- (- ?x71447 (* (* 2.0 l_0_12_316) l_0_12_344)) (* (* 2.0 l_0_12_361) l_0_12_389))))
 (= (- ?x71451 (* (* 2.0 l_0_12_406) l_0_12_434)) 0.0))))
(assert
 (let ((?x70986 (* l_0_12_46 l_0_12_46)))
 (let ((?x71486 (- (- (- _a_11_) (* l_0_12_1 l_0_12_1)) (* (* 2.0 l_0_12_196) l_0_12_209))))
 (let ((?x71492 (- (- ?x71486 (* (* 2.0 l_0_12_197) l_0_12_210)) (* (* 2.0 l_0_12_198) l_0_12_211))))
 (let ((?x71498 (- (- ?x71492 (* (* 2.0 l_0_12_199) l_0_12_212)) (* (* 2.0 l_0_12_200) l_0_12_213))))
 (let ((?x71504 (- (- ?x71498 (* (* 2.0 l_0_12_201) l_0_12_214)) (* (* 2.0 l_0_12_286) l_0_12_299))))
 (let ((?x71510 (- (- ?x71504 (* (* 2.0 l_0_12_287) l_0_12_300)) (* (* 2.0 l_0_12_288) l_0_12_301))))
 (let ((?x71516 (- (- ?x71510 (* (* 2.0 l_0_12_289) l_0_12_302)) (* (* 2.0 l_0_12_290) l_0_12_303))))
 (let ((?x71522 (- (- ?x71516 (* (* 2.0 l_0_12_291) l_0_12_304)) (* (* 2.0 l_0_12_331) l_0_12_344))))
 (let ((?x71528 (- (- ?x71522 (* (* 2.0 l_0_12_332) l_0_12_345)) (* (* 2.0 l_0_12_333) l_0_12_346))))
 (let ((?x71534 (- (- ?x71528 (* (* 2.0 l_0_12_334) l_0_12_347)) (* (* 2.0 l_0_12_335) l_0_12_348))))
 (let ((?x71540 (- (- ?x71534 (* (* 2.0 l_0_12_336) l_0_12_349)) (* (* 2.0 l_0_12_376) l_0_12_389))))
 (let ((?x71546 (- (- ?x71540 (* (* 2.0 l_0_12_377) l_0_12_390)) (* (* 2.0 l_0_12_378) l_0_12_391))))
 (let ((?x71552 (- (- ?x71546 (* (* 2.0 l_0_12_379) l_0_12_392)) (* (* 2.0 l_0_12_380) l_0_12_393))))
 (let ((?x71558 (- (- ?x71552 (* (* 2.0 l_0_12_381) l_0_12_394)) (* (* 2.0 l_0_12_421) l_0_12_434))))
 (let ((?x71564 (- (- ?x71558 (* (* 2.0 l_0_12_422) l_0_12_435)) (* (* 2.0 l_0_12_423) l_0_12_436))))
 (let ((?x71570 (- (- ?x71564 (* (* 2.0 l_0_12_424) l_0_12_437)) (* (* 2.0 l_0_12_425) l_0_12_438))))
 (= (+ (- ?x71570 (* (* 2.0 l_0_12_426) l_0_12_439)) ?x70986) 0.0))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71681 (* ?x71680 l_0_12_47)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x71678 (* ?x71677 l_0_12_151)))
 (let ((?x71674 (* 2.0 l_0_12_106)))
 (let ((?x71675 (* ?x71674 l_0_12_91)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71673 (* ?x60745 l_0_12_2)))
 (= (+ (+ (- ?x71673 ?x71675) ?x71678) ?x71681) 0.0))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x71754 (* ?x71753 l_0_12_79)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x71751 (* ?x71750 l_0_12_78)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x71748 (* ?x71747 l_0_12_77)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x71745 (* ?x71744 l_0_12_76)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x71742 (* ?x71741 l_0_12_75)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x71739 (* ?x71738 l_0_12_74)))
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71736 (* ?x71680 l_0_12_49)))
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x71734 (* ?x71733 l_0_12_259)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x71731 (* ?x71730 l_0_12_258)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x71728 (* ?x71727 l_0_12_257)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x71725 (* ?x71724 l_0_12_256)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x71722 (* ?x71721 l_0_12_255)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x71719 (* ?x71718 l_0_12_254)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x71716 (* ?x71715 l_0_12_34)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x71713 (* ?x71712 l_0_12_33)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x71710 (* ?x71709 l_0_12_32)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x71707 (* ?x71706 l_0_12_31)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x71704 (* ?x71703 l_0_12_30)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x71696 (* ?x71695 l_0_12_29)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71693 (* ?x60745 l_0_12_4)))
 (let ((?x71720 (+ (+ (+ (+ (+ (+ (+ ?x71693 ?x71696) ?x71704) ?x71707) ?x71710) ?x71713) ?x71716) ?x71719)))
 (let ((?x71740 (- (+ (+ (+ (+ (+ (+ ?x71720 ?x71722) ?x71725) ?x71728) ?x71731) ?x71734) ?x71736) ?x71739)))
 (= (- (- (- (- (- ?x71740 ?x71742) ?x71745) ?x71748) ?x71751) ?x71754) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71825 (* ?x71680 l_0_12_52)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) ?x71825) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71876 (* ?x71680 l_0_12_56)))
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x71734 (* ?x71733 l_0_12_259)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x71731 (* ?x71730 l_0_12_258)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x71728 (* ?x71727 l_0_12_257)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x71725 (* ?x71724 l_0_12_256)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x71722 (* ?x71721 l_0_12_255)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x71719 (* ?x71718 l_0_12_254)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x71868 (* ?x71867 l_0_12_169)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x71865 (* ?x71864 l_0_12_168)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x71862 (* ?x71861 l_0_12_167)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x71859 (* ?x71858 l_0_12_166)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x71856 (* ?x71855 l_0_12_165)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x71853 (* ?x71852 l_0_12_164)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x71850 (* ?x71849 l_0_12_124)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x71847 (* ?x71846 l_0_12_123)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x71844 (* ?x71843 l_0_12_122)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x71841 (* ?x71840 l_0_12_121)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71838 (* ?x71837 l_0_12_120)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71829 (* ?x60745 l_0_12_11)))
 (let ((?x71845 (+ (+ (+ (+ ?x71829 (* (* 2.0 l_0_12_106) l_0_12_119)) ?x71838) ?x71841) ?x71844)))
 (let ((?x71866 (- (- (- (- (- (+ (+ ?x71845 ?x71847) ?x71850) ?x71853) ?x71856) ?x71859) ?x71862) ?x71865)))
 (let ((?x71875 (- (- (- (- (- (- (- ?x71866 ?x71868) ?x71719) ?x71722) ?x71725) ?x71728) ?x71731) ?x71734)))
 (= (+ ?x71875 ?x71876) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71915 (* ?x71680 l_0_12_61)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x71915) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71931 (* ?x71680 l_0_12_67)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_22) ?x71931) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71941 (* ?x71680 l_0_12_74)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_29) ?x71941) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71951 (* ?x71680 l_0_12_82)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71949 (* ?x60745 l_0_12_37)))
 (= (+ ?x71949 ?x71951) 0.0))))))
(assert
 (let ((?x71980 (* l_0_12_48 l_0_12_48)))
 (let ((?x71978 (* l_0_12_47 l_0_12_47)))
 (let ((?x71976 (* l_0_12_3 l_0_12_3)))
 (let ((?x71974 (* l_0_12_2 l_0_12_2)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x71972 (* ?x71971 l_0_12_152)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x71969 (* ?x71968 l_0_12_151)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71962 (* ?x71837 l_0_12_93)))
 (let ((?x71973 (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_92) ?x71962) ?x71969) ?x71972)))
 (= (+ (+ (- (- ?x71973 ?x71974) ?x71976) ?x71978) ?x71980) 0.0)))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72025 (* ?x72024 l_0_12_50)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72022 (* ?x72021 l_0_12_49)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72019 (* ?x72018 l_0_12_5)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72016 (* ?x72015 l_0_12_4)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x72013 (* ?x72012 l_0_12_153)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x72010 (* ?x72009 l_0_12_152)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x72007 (* ?x72006 l_0_12_151)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72004 (* ?x71840 l_0_12_96)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72002 (* ?x71837 l_0_12_95)))
 (let ((?x72011 (+ (+ (- (- (* (* (- 2.0) l_0_12_106) l_0_12_94) ?x72002) ?x72004) ?x72007) ?x72010)))
 (let ((?x72014 (+ ?x72011 ?x72013)))
 (= (+ (+ (- (- ?x72014 ?x72016) ?x72019) ?x72022) ?x72025) 0.0))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72085 (* ?x72024 l_0_12_53)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72083 (* ?x72021 l_0_12_52)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72081 (* ?x72018 l_0_12_8)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72079 (* ?x72015 l_0_12_7)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x72077 (* ?x72076 l_0_12_154)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x72074 (* ?x72073 l_0_12_153)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x72071 (* ?x72070 l_0_12_152)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x72068 (* ?x72067 l_0_12_151)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72065 (* ?x71840 l_0_12_99)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72063 (* ?x71837 l_0_12_98)))
 (let ((?x71674 (* 2.0 l_0_12_106)))
 (let ((?x72053 (* ?x71674 l_0_12_97)))
 (let ((?x72069 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_109) ?x72053) ?x72063) ?x72065) ?x72068)))
 (let ((?x72078 (+ (+ (+ ?x72069 ?x72071) ?x72074) ?x72077)))
 (= (+ (+ (- (- ?x72078 ?x72079) ?x72081) ?x72083) ?x72085) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72164 (* ?x72024 l_0_12_57)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72162 (* ?x72021 l_0_12_56)))
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x72160 (* ?x72159 l_0_12_155)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x72157 (* ?x72156 l_0_12_154)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x72154 (* ?x72153 l_0_12_153)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x72151 (* ?x72150 l_0_12_152)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x72148 (* ?x72147 l_0_12_151)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72145 (* ?x72144 l_0_12_3)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x72142 (* ?x72141 l_0_12_2)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x72139 (* ?x72138 l_0_12_110)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x72136 (* ?x72135 l_0_12_109)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x72133 (* ?x72132 l_0_12_108)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x72130 (* ?x72120 l_0_12_107)))
 (let ((?x72140 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_106) ?x72130) ?x72133) ?x72136) ?x72139)))
 (let ((?x72161 (+ (+ (+ (+ (+ (- (- ?x72140 ?x72142) ?x72145) ?x72148) ?x72151) ?x72154) ?x72157) ?x72160)))
 (= (+ (+ ?x72161 ?x72162) ?x72164) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72241 (* ?x72024 l_0_12_62)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72239 (* ?x72021 l_0_12_61)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72237 (* ?x71703 l_0_12_3)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x72235 (* ?x71695 l_0_12_2)))
 (let ((?x72233 (* l_0_12_156 l_0_12_156)))
 (let ((?x72231 (* l_0_12_155 l_0_12_155)))
 (let ((?x72229 (* l_0_12_154 l_0_12_154)))
 (let ((?x72227 (* l_0_12_153 l_0_12_153)))
 (let ((?x72225 (* l_0_12_152 l_0_12_152)))
 (let ((?x72223 (* l_0_12_151 l_0_12_151)))
 (let ((?x72221 (* l_0_12_111 l_0_12_111)))
 (let ((?x72219 (* l_0_12_110 l_0_12_110)))
 (let ((?x72207 (* l_0_12_109 l_0_12_109)))
 (let ((?x72203 (* l_0_12_108 l_0_12_108)))
 (let ((?x72205 (- (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x72203)))
 (let ((?x72230 (+ (+ (+ (+ (- (- (- ?x72205 ?x72207) ?x72219) ?x72221) ?x72223) ?x72225) ?x72227) ?x72229)))
 (let ((?x72234 (+ (+ ?x72230 ?x72231) ?x72233)))
 (= (+ (+ (- (- ?x72234 ?x72235) ?x72237) ?x72239) ?x72241) 0.0)))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72308 (* ?x72024 l_0_12_68)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72306 (* ?x72021 l_0_12_67)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72304 (* ?x72303 l_0_12_3)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72301 (* ?x72015 l_0_12_22)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72299 (* ?x71867 l_0_12_162)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72297 (* ?x71864 l_0_12_161)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72295 (* ?x71861 l_0_12_160)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72293 (* ?x71858 l_0_12_159)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72291 (* ?x71855 l_0_12_158)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72289 (* ?x71852 l_0_12_157)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72287 (* ?x71849 l_0_12_117)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72285 (* ?x71846 l_0_12_116)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72283 (* ?x71843 l_0_12_115)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72281 (* ?x71840 l_0_12_114)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72269 (* ?x71837 l_0_12_113)))
 (let ((?x72286 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x72269) ?x72281) ?x72283) ?x72285)))
 (let ((?x72300 (+ (+ (+ (+ (+ (+ (- ?x72286 ?x72287) ?x72289) ?x72291) ?x72293) ?x72295) ?x72297) ?x72299)))
 (= (+ (+ (- (- ?x72300 ?x72301) ?x72304) ?x72306) ?x72308) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72368 (* ?x72024 l_0_12_75)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72366 (* ?x72021 l_0_12_74)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72364 (* ?x72018 l_0_12_30)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72362 (* ?x72015 l_0_12_29)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x71868 (* ?x71867 l_0_12_169)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x71865 (* ?x71864 l_0_12_168)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x71862 (* ?x71861 l_0_12_167)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x71859 (* ?x71858 l_0_12_166)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x71856 (* ?x71855 l_0_12_165)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x71853 (* ?x71852 l_0_12_164)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x71850 (* ?x71849 l_0_12_124)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x71847 (* ?x71846 l_0_12_123)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x71844 (* ?x71843 l_0_12_122)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x71841 (* ?x71840 l_0_12_121)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71838 (* ?x71837 l_0_12_120)))
 (let ((?x72354 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_119) ?x71838) ?x71841) ?x71844) ?x71847)))
 (let ((?x72361 (+ (+ (+ (+ (+ (+ (- ?x72354 ?x71850) ?x71853) ?x71856) ?x71859) ?x71862) ?x71865) ?x71868)))
 (= (+ (+ (- (- ?x72361 ?x72362) ?x72364) ?x72366) ?x72368) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72410 (* ?x72024 l_0_12_83)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72408 (* ?x72021 l_0_12_82)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72406 (* ?x72018 l_0_12_38)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72404 (* ?x72015 l_0_12_37)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72402 (* ?x71867 l_0_12_177)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72400 (* ?x71864 l_0_12_176)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72398 (* ?x71861 l_0_12_175)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72396 (* ?x71858 l_0_12_174)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72394 (* ?x71855 l_0_12_173)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72392 (* ?x71852 l_0_12_172)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72390 (* ?x71849 l_0_12_132)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72388 (* ?x71846 l_0_12_131)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72386 (* ?x71843 l_0_12_130)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72384 (* ?x71840 l_0_12_129)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72382 (* ?x71837 l_0_12_128)))
 (let ((?x72389 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_127) ?x72382) ?x72384) ?x72386) ?x72388)))
 (let ((?x72403 (+ (+ (+ (+ (+ (+ (- ?x72389 ?x72390) ?x72392) ?x72394) ?x72396) ?x72398) ?x72400) ?x72402)))
 (= (+ (+ (- (- ?x72403 ?x72404) ?x72406) ?x72408) ?x72410) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72479 (* l_0_12_6 l_0_12_6)))
 (let ((?x72477 (* l_0_12_51 l_0_12_51)))
 (let ((?x72475 (* l_0_12_50 l_0_12_50)))
 (let ((?x72473 (* l_0_12_5 l_0_12_5)))
 (let ((?x72476 (+ (- (+ (* (- l_0_12_4) l_0_12_4) (* l_0_12_49 l_0_12_49)) ?x72473) ?x72475)))
 (= (- (+ ?x72476 ?x72477) ?x72479) 0.0)))))))
(assert
 (let ((?x72506 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72503 (* ?x72502 l_0_12_54)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72500 (* ?x72499 l_0_12_53)))
 (let ((?x72497 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72494 (* ?x72493 l_0_12_52)))
 (let ((?x72504 (+ (+ (- (+ (* (* (- 2.0) l_0_12_4) l_0_12_7) ?x72494) ?x72497) ?x72500) ?x72503)))
 (= (- ?x72504 ?x72506) 0.0)))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72539 (* ?x72502 l_0_12_58)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72537 (* ?x72499 l_0_12_57)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72535 (* ?x72493 l_0_12_56)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72533 (* ?x72532 l_0_12_6)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72530 (* ?x72144 l_0_12_5)))
 (let ((?x72538 (+ (+ (- (- (* (* (- 2.0) l_0_12_11) l_0_12_4) ?x72530) ?x72533) ?x72535) ?x72537)))
 (= (+ ?x72538 ?x72539) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72569 (* ?x72502 l_0_12_63)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72567 (* ?x72499 l_0_12_62)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72565 (* ?x72493 l_0_12_61)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72563 (* ?x71706 l_0_12_6)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72555 (* ?x71703 l_0_12_5)))
 (let ((?x72568 (+ (+ (- (- (* (* (- 2.0) l_0_12_16) l_0_12_4) ?x72555) ?x72563) ?x72565) ?x72567)))
 (= (+ ?x72568 ?x72569) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72601 (* ?x72502 l_0_12_69)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72599 (* ?x72499 l_0_12_68)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72597 (* ?x72493 l_0_12_67)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72595 (* ?x72594 l_0_12_6)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72586 (* ?x72303 l_0_12_5)))
 (let ((?x72600 (+ (+ (- (- (* (* (- 2.0) l_0_12_22) l_0_12_4) ?x72586) ?x72595) ?x72597) ?x72599)))
 (= (+ ?x72600 ?x72601) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72636 (* ?x72502 l_0_12_76)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72634 (* ?x72499 l_0_12_75)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72632 (* ?x72493 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x72630 (* ?x72629 l_0_12_6)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x72627 (* ?x72626 l_0_12_5)))
 (let ((?x72635 (+ (+ (- (- (* (* (- 2.0) l_0_12_29) l_0_12_4) ?x72627) ?x72630) ?x72632) ?x72634)))
 (= (+ ?x72635 ?x72636) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72667 (* ?x72502 l_0_12_84)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72665 (* ?x72499 l_0_12_83)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72663 (* ?x72493 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72661 (* ?x72660 l_0_12_6)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72658 (* ?x72657 l_0_12_5)))
 (let ((?x72666 (+ (+ (- (- (* (* (- 2.0) l_0_12_37) l_0_12_4) ?x72658) ?x72661) ?x72663) ?x72665)))
 (= (+ ?x72666 ?x72667) 0.0)))))))))))))
(assert
 (let ((?x72694 (* l_0_12_9 l_0_12_9)))
 (let ((?x72692 (* l_0_12_8 l_0_12_8)))
 (let ((?x72690 (* l_0_12_7 l_0_12_7)))
 (let ((?x72688 (* l_0_12_55 l_0_12_55)))
 (let ((?x72686 (* l_0_12_54 l_0_12_54)))
 (let ((?x72684 (* l_0_12_53 l_0_12_53)))
 (let ((?x72685 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_52 l_0_12_52)) ?x72684)))
 (= (- (- (- (+ (+ ?x72685 ?x72686) ?x72688) ?x72690) ?x72692) ?x72694) 0.0)))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72729 (* ?x72728 l_0_12_59)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72726 (* ?x72725 l_0_12_58)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72723 (* ?x72722 l_0_12_57)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72720 (* ?x72719 l_0_12_56)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72717 (* ?x72532 l_0_12_9)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72715 (* ?x72144 l_0_12_8)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x72713 (* ?x72141 l_0_12_7)))
 (let ((?x72721 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_14) ?x72713) ?x72715) ?x72717) ?x72720)))
 (= (+ (+ (+ ?x72721 ?x72723) ?x72726) ?x72729) 0.0)))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72770 (* ?x72728 l_0_12_64)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72768 (* ?x72725 l_0_12_63)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72766 (* ?x72722 l_0_12_62)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72764 (* ?x72719 l_0_12_61)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72762 (* ?x71706 l_0_12_9)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72753 (* ?x71703 l_0_12_8)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x72749 (* ?x71695 l_0_12_7)))
 (let ((?x72765 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x72749) ?x72753) ?x72762) ?x72764)))
 (= (+ (+ (+ ?x72765 ?x72766) ?x72768) ?x72770) 0.0)))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x71754 (* ?x71753 l_0_12_79)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x71751 (* ?x71750 l_0_12_78)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x71748 (* ?x71747 l_0_12_77)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x71745 (* ?x71744 l_0_12_76)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x71742 (* ?x71741 l_0_12_75)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x71739 (* ?x71738 l_0_12_74)))
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72814 (* ?x72728 l_0_12_70)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72812 (* ?x72725 l_0_12_69)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72810 (* ?x72722 l_0_12_68)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72808 (* ?x72719 l_0_12_67)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72806 (* ?x72594 l_0_12_9)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72804 (* ?x72303 l_0_12_8)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x72802 (* ?x72801 l_0_12_7)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x71716 (* ?x71715 l_0_12_34)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x71713 (* ?x71712 l_0_12_33)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x71710 (* ?x71709 l_0_12_32)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x71707 (* ?x71706 l_0_12_31)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x71704 (* ?x71703 l_0_12_30)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x71696 (* ?x71695 l_0_12_29)))
 (let ((?x72711 (* (- 2.0) l_0_12_10)))
 (let ((?x72794 (* ?x72711 l_0_12_25)))
 (let ((?x72803 (- (- (- (- (- (- (- ?x72794 ?x71696) ?x71704) ?x71707) ?x71710) ?x71713) ?x71716) ?x72802)))
 (let ((?x72816 (+ (+ (+ (+ (+ (- (- ?x72803 ?x72804) ?x72806) ?x72808) ?x72810) ?x72812) ?x72814) ?x71739)))
 (= (+ (+ (+ (+ (+ ?x72816 ?x71742) ?x71745) ?x71748) ?x71751) ?x71754) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72850 (* ?x72728 l_0_12_77)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72848 (* ?x72725 l_0_12_76)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72846 (* ?x72722 l_0_12_75)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x50357 (* ?x72719 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x38122 (* ?x72629 l_0_12_9)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x50278 (* ?x72626 l_0_12_8)))
 (let ((?x72840 (* 2.0 l_0_12_29)))
 (let ((?x72842 (* ?x72840 l_0_12_7)))
 (let ((?x72845 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_32) ?x72842) ?x50278) ?x38122) ?x50357)))
 (= (+ (+ (+ ?x72845 ?x72846) ?x72848) ?x72850) 0.0)))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72890 (* ?x72728 l_0_12_85)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72888 (* ?x72725 l_0_12_84)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72886 (* ?x72722 l_0_12_83)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72884 (* ?x72719 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72882 (* ?x72660 l_0_12_9)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72873 (* ?x72657 l_0_12_8)))
 (let ((?x72868 (* 2.0 l_0_12_37)))
 (let ((?x72870 (* ?x72868 l_0_12_7)))
 (let ((?x72711 (* (- 2.0) l_0_12_10)))
 (let ((?x72866 (* ?x72711 l_0_12_40)))
 (let ((?x72891 (+ (+ (+ (+ (- (- (- ?x72866 ?x72870) ?x72873) ?x72882) ?x72884) ?x72886) ?x72888) ?x72890)))
 (= ?x72891 0.0)))))))))))))))))))
(assert
 (let ((?x72934 (* l_0_12_60 l_0_12_60)))
 (let ((?x72932 (* l_0_12_59 l_0_12_59)))
 (let ((?x72930 (* l_0_12_58 l_0_12_58)))
 (let ((?x72928 (* l_0_12_57 l_0_12_57)))
 (let ((?x72926 (* l_0_12_56 l_0_12_56)))
 (let ((?x72924 (* l_0_12_15 l_0_12_15)))
 (let ((?x72922 (* l_0_12_14 l_0_12_14)))
 (let ((?x72913 (* l_0_12_13 l_0_12_13)))
 (let ((?x72921 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x72913)))
 (let ((?x72935 (+ (+ (+ (+ (+ (- (- ?x72921 ?x72922) ?x72924) ?x72926) ?x72928) ?x72930) ?x72932) ?x72934)))
 (= ?x72935 0.0))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x72979 (* ?x72978 l_0_12_65)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x72976 (* ?x72975 l_0_12_64)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x72973 (* ?x72972 l_0_12_63)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x72970 (* ?x72969 l_0_12_62)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x72967 (* ?x72966 l_0_12_61)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x72964 (* ?x72963 l_0_12_20)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x72961 (* ?x72960 l_0_12_19)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72958 (* ?x72532 l_0_12_18)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72956 (* ?x72144 l_0_12_17)))
 (let ((?x72965 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_16) ?x72956) ?x72958) ?x72961) ?x72964)))
 (= (+ (+ (+ (+ (+ ?x72965 ?x72967) ?x72970) ?x72973) ?x72976) ?x72979) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73028 (* ?x72978 l_0_12_71)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73026 (* ?x72975 l_0_12_70)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73024 (* ?x72972 l_0_12_69)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73022 (* ?x72969 l_0_12_68)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73020 (* ?x72966 l_0_12_67)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73018 (* ?x72963 l_0_12_26)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73008 (* ?x72960 l_0_12_25)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73005 (* ?x72532 l_0_12_24)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73001 (* ?x72144 l_0_12_23)))
 (let ((?x73019 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_22) ?x73001) ?x73005) ?x73008) ?x73018)))
 (= (+ (+ (+ (+ (+ ?x73019 ?x73020) ?x73022) ?x73024) ?x73026) ?x73028) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73069 (* ?x72978 l_0_12_78)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73067 (* ?x72975 l_0_12_77)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73065 (* ?x72972 l_0_12_76)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73063 (* ?x72969 l_0_12_75)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73061 (* ?x72966 l_0_12_74)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73059 (* ?x72963 l_0_12_33)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73057 (* ?x72960 l_0_12_32)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73055 (* ?x72532 l_0_12_31)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73053 (* ?x72144 l_0_12_30)))
 (let ((?x73060 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_29) ?x73053) ?x73055) ?x73057) ?x73059)))
 (= (+ (+ (+ (+ (+ ?x73060 ?x73061) ?x73063) ?x73065) ?x73067) ?x73069) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73119 (* ?x72978 l_0_12_86)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73117 (* ?x72975 l_0_12_85)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73115 (* ?x72972 l_0_12_84)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73113 (* ?x72969 l_0_12_83)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73111 (* ?x72966 l_0_12_82)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73109 (* ?x72963 l_0_12_41)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73099 (* ?x72960 l_0_12_40)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73096 (* ?x72532 l_0_12_39)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73092 (* ?x72144 l_0_12_38)))
 (let ((?x73110 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_37) ?x73092) ?x73096) ?x73099) ?x73109)))
 (= (+ (+ (+ (+ (+ ?x73110 ?x73111) ?x73113) ?x73115) ?x73117) ?x73119) 0.0)))))))))))))))))))))
(assert
 (let ((?x73176 (* l_0_12_66 l_0_12_66)))
 (let ((?x73174 (* l_0_12_65 l_0_12_65)))
 (let ((?x73172 (* l_0_12_64 l_0_12_64)))
 (let ((?x73170 (* l_0_12_63 l_0_12_63)))
 (let ((?x73168 (* l_0_12_62 l_0_12_62)))
 (let ((?x73166 (* l_0_12_61 l_0_12_61)))
 (let ((?x73164 (* l_0_12_21 l_0_12_21)))
 (let ((?x73162 (* l_0_12_20 l_0_12_20)))
 (let ((?x73160 (* l_0_12_19 l_0_12_19)))
 (let ((?x73158 (* l_0_12_18 l_0_12_18)))
 (let ((?x73159 (- (- (* (- l_0_12_16) l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73158)))
 (let ((?x73173 (+ (+ (+ (+ (- (- (- ?x73159 ?x73160) ?x73162) ?x73164) ?x73166) ?x73168) ?x73170) ?x73172)))
 (= (+ (+ ?x73173 ?x73174) ?x73176) 0.0))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73220 (* ?x71753 l_0_12_72)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73218 (* ?x71750 l_0_12_71)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73216 (* ?x71747 l_0_12_70)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73214 (* ?x71744 l_0_12_69)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73212 (* ?x71741 l_0_12_68)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73210 (* ?x71738 l_0_12_67)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73208 (* ?x71715 l_0_12_27)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73206 (* ?x71712 l_0_12_26)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73204 (* ?x71709 l_0_12_25)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73202 (* ?x71706 l_0_12_24)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73200 (* ?x71703 l_0_12_23)))
 (let ((?x73207 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_22) ?x73200) ?x73202) ?x73204) ?x73206)))
 (let ((?x73221 (+ (+ (+ (+ (+ (+ (- ?x73207 ?x73208) ?x73210) ?x73212) ?x73214) ?x73216) ?x73218) ?x73220)))
 (= ?x73221 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x71754 (* ?x71753 l_0_12_79)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x71751 (* ?x71750 l_0_12_78)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x71748 (* ?x71747 l_0_12_77)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x71745 (* ?x71744 l_0_12_76)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x71742 (* ?x71741 l_0_12_75)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x71739 (* ?x71738 l_0_12_74)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x71716 (* ?x71715 l_0_12_34)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x71713 (* ?x71712 l_0_12_33)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x71710 (* ?x71709 l_0_12_32)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x71707 (* ?x71706 l_0_12_31)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x71704 (* ?x71703 l_0_12_30)))
 (let ((?x73255 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_29) ?x71704) ?x71707) ?x71710) ?x71713)))
 (let ((?x73262 (+ (+ (+ (+ (+ (+ (- ?x73255 ?x71716) ?x71739) ?x71742) ?x71745) ?x71748) ?x71751) ?x71754)))
 (= ?x73262 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73297 (* ?x71753 l_0_12_87)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73295 (* ?x71750 l_0_12_86)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73293 (* ?x71747 l_0_12_85)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73291 (* ?x71744 l_0_12_84)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73289 (* ?x71741 l_0_12_83)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73287 (* ?x71738 l_0_12_82)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73285 (* ?x71715 l_0_12_42)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73283 (* ?x71712 l_0_12_41)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73281 (* ?x71709 l_0_12_40)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73279 (* ?x71706 l_0_12_39)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73277 (* ?x71703 l_0_12_38)))
 (let ((?x73284 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_37) ?x73277) ?x73279) ?x73281) ?x73283)))
 (let ((?x73298 (+ (+ (+ (+ (+ (+ (- ?x73284 ?x73285) ?x73287) ?x73289) ?x73291) ?x73293) ?x73295) ?x73297)))
 (= ?x73298 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73348 (* l_0_12_73 l_0_12_73)))
 (let ((?x73346 (* l_0_12_72 l_0_12_72)))
 (let ((?x73344 (* l_0_12_71 l_0_12_71)))
 (let ((?x73342 (* l_0_12_70 l_0_12_70)))
 (let ((?x73340 (* l_0_12_69 l_0_12_69)))
 (let ((?x73338 (* l_0_12_68 l_0_12_68)))
 (let ((?x73336 (* l_0_12_67 l_0_12_67)))
 (let ((?x73334 (* l_0_12_28 l_0_12_28)))
 (let ((?x73332 (* l_0_12_27 l_0_12_27)))
 (let ((?x73330 (* l_0_12_26 l_0_12_26)))
 (let ((?x73319 (* l_0_12_25 l_0_12_25)))
 (let ((?x50515 (* l_0_12_24 l_0_12_24)))
 (let ((?x10238 (- (- (* (- l_0_12_22) l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x50515)))
 (let ((?x73341 (+ (+ (+ (- (- (- (- ?x10238 ?x73319) ?x73330) ?x73332) ?x73334) ?x73336) ?x73338) ?x73340)))
 (= (+ (+ (+ (+ ?x73341 ?x73342) ?x73344) ?x73346) ?x73348) 0.0))))))))))))))))
(assert
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73413 (* ?x73412 l_0_12_80)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73410 (* ?x73409 l_0_12_79)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73407 (* ?x73406 l_0_12_78)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73404 (* ?x73403 l_0_12_77)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73401 (* ?x73400 l_0_12_76)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73398 (* ?x73397 l_0_12_75)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73395 (* ?x73394 l_0_12_74)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73392 (* ?x73391 l_0_12_35)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73389 (* ?x73388 l_0_12_34)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73386 (* ?x73385 l_0_12_33)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73383 (* ?x73382 l_0_12_32)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73380 (* ?x72594 l_0_12_31)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73378 (* ?x72303 l_0_12_30)))
 (let ((?x73387 (- (- (- (- (* (* (- 2.0) l_0_12_22) l_0_12_29) ?x73378) ?x73380) ?x73383) ?x73386)))
 (let ((?x73408 (+ (+ (+ (+ (+ (- (- ?x73387 ?x73389) ?x73392) ?x73395) ?x73398) ?x73401) ?x73404) ?x73407)))
 (= (+ (+ ?x73408 ?x73410) ?x73413) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73481 (* ?x73412 l_0_12_88)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73479 (* ?x73409 l_0_12_87)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73477 (* ?x73406 l_0_12_86)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73475 (* ?x73403 l_0_12_85)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73473 (* ?x73400 l_0_12_84)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73471 (* ?x73397 l_0_12_83)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73469 (* ?x73394 l_0_12_82)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73467 (* ?x73391 l_0_12_43)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73465 (* ?x73388 l_0_12_42)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73463 (* ?x73385 l_0_12_41)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73461 (* ?x73382 l_0_12_40)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73459 (* ?x72594 l_0_12_39)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73457 (* ?x72303 l_0_12_38)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x73455 (* ?x72801 l_0_12_37)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x71868 (* ?x71867 l_0_12_169)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x71865 (* ?x71864 l_0_12_168)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x71862 (* ?x71861 l_0_12_167)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x71859 (* ?x71858 l_0_12_166)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x71856 (* ?x71855 l_0_12_165)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x71853 (* ?x71852 l_0_12_164)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x71850 (* ?x71849 l_0_12_124)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x71847 (* ?x71846 l_0_12_123)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x71844 (* ?x71843 l_0_12_122)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x71841 (* ?x71840 l_0_12_121)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71838 (* ?x71837 l_0_12_120)))
 (let ((?x72354 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_119) ?x71838) ?x71841) ?x71844) ?x71847)))
 (let ((?x72361 (+ (+ (+ (+ (+ (+ (- ?x72354 ?x71850) ?x71853) ?x71856) ?x71859) ?x71862) ?x71865) ?x71868)))
 (let ((?x73468 (- (- (- (- (- (- (- ?x72361 ?x73455) ?x73457) ?x73459) ?x73461) ?x73463) ?x73465) ?x73467)))
 (let ((?x73482 (+ (+ (+ (+ (+ (+ (+ ?x73468 ?x73469) ?x73471) ?x73473) ?x73475) ?x73477) ?x73479) ?x73481)))
 (= ?x73482 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73551 (* l_0_12_81 l_0_12_81)))
 (let ((?x73549 (* l_0_12_80 l_0_12_80)))
 (let ((?x73547 (* l_0_12_79 l_0_12_79)))
 (let ((?x73545 (* l_0_12_78 l_0_12_78)))
 (let ((?x73543 (* l_0_12_77 l_0_12_77)))
 (let ((?x73541 (* l_0_12_76 l_0_12_76)))
 (let ((?x73539 (* l_0_12_75 l_0_12_75)))
 (let ((?x73537 (* l_0_12_74 l_0_12_74)))
 (let ((?x73535 (* l_0_12_36 l_0_12_36)))
 (let ((?x73533 (* l_0_12_35 l_0_12_35)))
 (let ((?x73531 (* l_0_12_34 l_0_12_34)))
 (let ((?x73529 (* l_0_12_33 l_0_12_33)))
 (let ((?x73518 (* l_0_12_32 l_0_12_32)))
 (let ((?x61053 (* l_0_12_31 l_0_12_31)))
 (let ((?x73516 (- (- (* (- l_0_12_29) l_0_12_29) (* l_0_12_30 l_0_12_30)) ?x61053)))
 (let ((?x73540 (+ (+ (- (- (- (- (- ?x73516 ?x73518) ?x73529) ?x73531) ?x73533) ?x73535) ?x73537) ?x73539)))
 (= (+ (+ (+ (+ (+ (+ ?x73540 ?x73541) ?x73543) ?x73545) ?x73547) ?x73549) ?x73551) 0.0))))))))))))))))))
(assert
 (let ((?x73612 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73609 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73606 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73603 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73600 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73597 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73594 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73591 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73588 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73585 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73582 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73579 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73576 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x73573 (* ?x72629 l_0_12_39)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x73571 (* ?x72626 l_0_12_38)))
 (let ((?x73580 (- (- (- (- (* (* (- 2.0) l_0_12_29) l_0_12_37) ?x73571) ?x73573) ?x73576) ?x73579)))
 (let ((?x73601 (+ (+ (+ (+ (- (- (- ?x73580 ?x73582) ?x73585) ?x73588) ?x73591) ?x73594) ?x73597) ?x73600)))
 (= (+ (+ (+ (+ ?x73601 ?x73603) ?x73606) ?x73609) ?x73612) 0.0)))))))))))))))))))))
(assert
 (let ((?x73675 (* l_0_12_90 l_0_12_90)))
 (let ((?x73673 (* l_0_12_89 l_0_12_89)))
 (let ((?x73671 (* l_0_12_88 l_0_12_88)))
 (let ((?x73669 (* l_0_12_87 l_0_12_87)))
 (let ((?x73667 (* l_0_12_86 l_0_12_86)))
 (let ((?x73665 (* l_0_12_85 l_0_12_85)))
 (let ((?x73663 (* l_0_12_84 l_0_12_84)))
 (let ((?x73661 (* l_0_12_83 l_0_12_83)))
 (let ((?x73659 (* l_0_12_82 l_0_12_82)))
 (let ((?x73657 (* l_0_12_45 l_0_12_45)))
 (let ((?x73655 (* l_0_12_44 l_0_12_44)))
 (let ((?x73653 (* l_0_12_43 l_0_12_43)))
 (let ((?x73651 (* l_0_12_42 l_0_12_42)))
 (let ((?x73638 (* l_0_12_41 l_0_12_41)))
 (let ((?x73635 (* l_0_12_40 l_0_12_40)))
 (let ((?x73631 (* l_0_12_39 l_0_12_39)))
 (let ((?x73633 (- (- (* (- l_0_12_37) l_0_12_37) (* l_0_12_38 l_0_12_38)) ?x73631)))
 (let ((?x73660 (+ (- (- (- (- (- (- ?x73633 ?x73635) ?x73638) ?x73651) ?x73653) ?x73655) ?x73657) ?x73659)))
 (let ((?x73674 (+ (+ (+ (+ (+ (+ (+ ?x73660 ?x73661) ?x73663) ?x73665) ?x73667) ?x73669) ?x73671) ?x73673)))
 (= (+ ?x73674 ?x73675) 0.0)))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71681 (* ?x71680 l_0_12_47)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71673 (* ?x60745 l_0_12_2)))
 (= (+ ?x71673 ?x71681) 0.0))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72814 (* ?x72728 l_0_12_70)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72812 (* ?x72725 l_0_12_69)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72810 (* ?x72722 l_0_12_68)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72808 (* ?x72719 l_0_12_67)))
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71736 (* ?x71680 l_0_12_49)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72806 (* ?x72594 l_0_12_9)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x73719 (* ?x73718 l_0_12_250)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x73716 (* ?x73715 l_0_12_249)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x73713 (* ?x73712 l_0_12_248)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x73710 (* ?x73709 l_0_12_247)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72804 (* ?x72303 l_0_12_8)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x72802 (* ?x72801 l_0_12_7)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71693 (* ?x60745 l_0_12_4)))
 (let ((?x73711 (+ (+ (+ (+ ?x71693 (* (* 2.0 l_0_12_10) l_0_12_25)) ?x72802) ?x72804) ?x73710)))
 (let ((?x73724 (- (- (+ (+ (+ (+ (+ ?x73711 ?x73713) ?x73716) ?x73719) ?x72806) ?x71736) ?x72808) ?x72810)))
 (= (- (- ?x73724 ?x72812) ?x72814) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71825 (* ?x71680 l_0_12_52)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) ?x71825) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71876 (* ?x71680 l_0_12_56)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x73719 (* ?x73718 l_0_12_250)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x73716 (* ?x73715 l_0_12_249)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x73713 (* ?x73712 l_0_12_248)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x73710 (* ?x73709 l_0_12_247)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73748 (* ?x72076 l_0_12_160)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73746 (* ?x72073 l_0_12_159)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73744 (* ?x72070 l_0_12_158)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73742 (* ?x72067 l_0_12_157)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x73740 (* ?x73739 l_0_12_99)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x73737 (* ?x73736 l_0_12_98)))
 (let ((?x10390 (* 2.0 l_0_12_112)))
 (let ((?x10358 (* ?x10390 l_0_12_97)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71829 (* ?x60745 l_0_12_11)))
 (let ((?x73741 (+ (+ (+ (+ ?x71829 (* (* 2.0 l_0_12_100) l_0_12_115)) ?x10358) ?x73737) ?x73740)))
 (let ((?x73752 (- (- (- (- (- (- (- ?x73741 ?x73742) ?x73744) ?x73746) ?x73748) ?x73710) ?x73713) ?x73716)))
 (= (+ (- ?x73752 ?x73719) ?x71876) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71915 (* ?x71680 l_0_12_61)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x71915) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71931 (* ?x71680 l_0_12_67)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_22) ?x71931) 0.0))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71941 (* ?x71680 l_0_12_74)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_29) ?x71941) 0.0))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x38528 (* ?x50783 l_0_12_97)))
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71951 (* ?x71680 l_0_12_82)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x61271 (* ?x71677 l_0_12_142)))
 (let ((?x60745 (* (- 2.0) l_0_12_1)))
 (let ((?x71949 (* ?x60745 l_0_12_37)))
 (= (- (+ (+ ?x71949 ?x61271) ?x71951) ?x38528) 0.0))))))))))
(assert
 (let ((?x71980 (* l_0_12_48 l_0_12_48)))
 (let ((?x71978 (* l_0_12_47 l_0_12_47)))
 (let ((?x73772 (+ (+ (- (* (- l_0_12_2) l_0_12_2) (* l_0_12_3 l_0_12_3)) ?x71978) ?x71980)))
 (= ?x73772 0.0)))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72025 (* ?x72024 l_0_12_50)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72022 (* ?x72021 l_0_12_49)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72019 (* ?x72018 l_0_12_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_4) ?x72019) ?x72022) ?x72025) 0.0))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72085 (* ?x72024 l_0_12_53)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72083 (* ?x72021 l_0_12_52)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72081 (* ?x72018 l_0_12_8)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_7) ?x72081) ?x72083) ?x72085) 0.0))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72164 (* ?x72024 l_0_12_57)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72162 (* ?x72021 l_0_12_56)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72145 (* ?x72144 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_11) l_0_12_2) ?x72145) ?x72162) ?x72164) 0.0))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72241 (* ?x72024 l_0_12_62)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72239 (* ?x72021 l_0_12_61)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72237 (* ?x71703 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_16) l_0_12_2) ?x72237) ?x72239) ?x72241) 0.0))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72308 (* ?x72024 l_0_12_68)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72306 (* ?x72021 l_0_12_67)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72304 (* ?x72303 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_22) ?x72304) ?x72306) ?x72308) 0.0))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72368 (* ?x72024 l_0_12_75)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72366 (* ?x72021 l_0_12_74)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72364 (* ?x72018 l_0_12_30)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72362 (* ?x72015 l_0_12_29)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73748 (* ?x72076 l_0_12_160)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73746 (* ?x72073 l_0_12_159)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73744 (* ?x72070 l_0_12_158)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73742 (* ?x72067 l_0_12_157)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x73740 (* ?x73739 l_0_12_99)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x73737 (* ?x73736 l_0_12_98)))
 (let ((?x10390 (* 2.0 l_0_12_112)))
 (let ((?x10358 (* ?x10390 l_0_12_97)))
 (let ((?x73809 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_115) ?x10358) ?x73737) ?x73740) ?x73742)))
 (let ((?x73812 (+ (+ (+ ?x73809 ?x73744) ?x73746) ?x73748)))
 (= (+ (+ (- (- ?x73812 ?x72362) ?x72364) ?x72366) ?x72368) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x73836 (* ?x73835 l_0_12_98)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x73833 (* ?x73832 l_0_12_97)))
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72410 (* ?x72024 l_0_12_83)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72408 (* ?x72021 l_0_12_82)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72406 (* ?x72018 l_0_12_38)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72404 (* ?x72015 l_0_12_37)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x73826 (* ?x71971 l_0_12_143)))
 (let ((?x73827 (+ (* (* 2.0 l_0_12_137) l_0_12_142) ?x73826)))
 (= (- (- (+ (+ (- (- ?x73827 ?x72404) ?x72406) ?x72408) ?x72410) ?x73833) ?x73836) 0.0)))))))))))))))))
(assert
 (let ((?x72479 (* l_0_12_6 l_0_12_6)))
 (let ((?x72477 (* l_0_12_51 l_0_12_51)))
 (let ((?x72475 (* l_0_12_50 l_0_12_50)))
 (let ((?x72473 (* l_0_12_5 l_0_12_5)))
 (let ((?x72476 (+ (- (+ (* (- l_0_12_4) l_0_12_4) (* l_0_12_49 l_0_12_49)) ?x72473) ?x72475)))
 (= (- (+ ?x72476 ?x72477) ?x72479) 0.0)))))))
(assert
 (let ((?x72506 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72503 (* ?x72502 l_0_12_54)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72500 (* ?x72499 l_0_12_53)))
 (let ((?x72497 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72494 (* ?x72493 l_0_12_52)))
 (let ((?x72504 (+ (+ (- (+ (* (* (- 2.0) l_0_12_4) l_0_12_7) ?x72494) ?x72497) ?x72500) ?x72503)))
 (= (- ?x72504 ?x72506) 0.0)))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72539 (* ?x72502 l_0_12_58)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72537 (* ?x72499 l_0_12_57)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72535 (* ?x72493 l_0_12_56)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72533 (* ?x72532 l_0_12_6)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72530 (* ?x72144 l_0_12_5)))
 (let ((?x72538 (+ (+ (- (- (* (* (- 2.0) l_0_12_11) l_0_12_4) ?x72530) ?x72533) ?x72535) ?x72537)))
 (= (+ ?x72538 ?x72539) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72569 (* ?x72502 l_0_12_63)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72567 (* ?x72499 l_0_12_62)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72565 (* ?x72493 l_0_12_61)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72563 (* ?x71706 l_0_12_6)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72555 (* ?x71703 l_0_12_5)))
 (let ((?x72568 (+ (+ (- (- (* (* (- 2.0) l_0_12_16) l_0_12_4) ?x72555) ?x72563) ?x72565) ?x72567)))
 (= (+ ?x72568 ?x72569) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72601 (* ?x72502 l_0_12_69)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72599 (* ?x72499 l_0_12_68)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72597 (* ?x72493 l_0_12_67)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72595 (* ?x72594 l_0_12_6)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72586 (* ?x72303 l_0_12_5)))
 (let ((?x72600 (+ (+ (- (- (* (* (- 2.0) l_0_12_22) l_0_12_4) ?x72586) ?x72595) ?x72597) ?x72599)))
 (= (+ ?x72600 ?x72601) 0.0)))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72636 (* ?x72502 l_0_12_76)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72634 (* ?x72499 l_0_12_75)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72632 (* ?x72493 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x72630 (* ?x72629 l_0_12_6)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x72627 (* ?x72626 l_0_12_5)))
 (let ((?x72635 (+ (+ (- (- (* (* (- 2.0) l_0_12_29) l_0_12_4) ?x72627) ?x72630) ?x72632) ?x72634)))
 (= (+ ?x72635 ?x72636) 0.0)))))))))))))
(assert
 (let ((?x73856 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x73853 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x73850 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72667 (* ?x72502 l_0_12_84)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72665 (* ?x72499 l_0_12_83)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72663 (* ?x72493 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72661 (* ?x72660 l_0_12_6)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72658 (* ?x72657 l_0_12_5)))
 (let ((?x72868 (* 2.0 l_0_12_37)))
 (let ((?x61355 (* ?x72868 l_0_12_4)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x38575 (* ?x72012 l_0_12_144)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x38505 (* ?x72009 l_0_12_143)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x38696 (* ?x72006 l_0_12_142)))
 (let ((?x61350 (+ (+ ?x38696 ?x38505) ?x38575)))
 (let ((?x73851 (- (+ (+ (+ (- (- (- ?x61350 ?x61355) ?x72658) ?x72661) ?x72663) ?x72665) ?x72667) ?x73850)))
 (= (- (- ?x73851 ?x73853) ?x73856) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x72694 (* l_0_12_9 l_0_12_9)))
 (let ((?x72692 (* l_0_12_8 l_0_12_8)))
 (let ((?x72690 (* l_0_12_7 l_0_12_7)))
 (let ((?x72688 (* l_0_12_55 l_0_12_55)))
 (let ((?x72686 (* l_0_12_54 l_0_12_54)))
 (let ((?x72684 (* l_0_12_53 l_0_12_53)))
 (let ((?x72685 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_52 l_0_12_52)) ?x72684)))
 (= (- (- (- (+ (+ ?x72685 ?x72686) ?x72688) ?x72690) ?x72692) ?x72694) 0.0)))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72729 (* ?x72728 l_0_12_59)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72726 (* ?x72725 l_0_12_58)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72723 (* ?x72722 l_0_12_57)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72720 (* ?x72719 l_0_12_56)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72717 (* ?x72532 l_0_12_9)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72715 (* ?x72144 l_0_12_8)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x72713 (* ?x72141 l_0_12_7)))
 (let ((?x72721 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_14) ?x72713) ?x72715) ?x72717) ?x72720)))
 (= (+ (+ (+ ?x72721 ?x72723) ?x72726) ?x72729) 0.0)))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72770 (* ?x72728 l_0_12_64)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72768 (* ?x72725 l_0_12_63)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72766 (* ?x72722 l_0_12_62)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72764 (* ?x72719 l_0_12_61)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72762 (* ?x71706 l_0_12_9)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72753 (* ?x71703 l_0_12_8)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x72749 (* ?x71695 l_0_12_7)))
 (let ((?x72765 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x72749) ?x72753) ?x72762) ?x72764)))
 (= (+ (+ (+ ?x72765 ?x72766) ?x72768) ?x72770) 0.0)))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72814 (* ?x72728 l_0_12_70)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72812 (* ?x72725 l_0_12_69)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72810 (* ?x72722 l_0_12_68)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72808 (* ?x72719 l_0_12_67)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72806 (* ?x72594 l_0_12_9)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72804 (* ?x72303 l_0_12_8)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x72802 (* ?x72801 l_0_12_7)))
 (let ((?x72711 (* (- 2.0) l_0_12_10)))
 (let ((?x72794 (* ?x72711 l_0_12_25)))
 (let ((?x73895 (+ (+ (+ (+ (- (- (- ?x72794 ?x72802) ?x72804) ?x72806) ?x72808) ?x72810) ?x72812) ?x72814)))
 (= ?x73895 0.0)))))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72850 (* ?x72728 l_0_12_77)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72848 (* ?x72725 l_0_12_76)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72846 (* ?x72722 l_0_12_75)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x50357 (* ?x72719 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x38122 (* ?x72629 l_0_12_9)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x50278 (* ?x72626 l_0_12_8)))
 (let ((?x72840 (* 2.0 l_0_12_29)))
 (let ((?x72842 (* ?x72840 l_0_12_7)))
 (let ((?x72845 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_32) ?x72842) ?x50278) ?x38122) ?x50357)))
 (= (+ (+ (+ ?x72845 ?x72846) ?x72848) ?x72850) 0.0)))))))))))))))))
(assert
 (let ((?x73926 (* l_0_12_99 l_0_12_99)))
 (let ((?x73924 (* l_0_12_98 l_0_12_98)))
 (let ((?x73922 (* l_0_12_97 l_0_12_97)))
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72890 (* ?x72728 l_0_12_85)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72888 (* ?x72725 l_0_12_84)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72886 (* ?x72722 l_0_12_83)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72884 (* ?x72719 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72882 (* ?x72660 l_0_12_9)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72873 (* ?x72657 l_0_12_8)))
 (let ((?x72868 (* 2.0 l_0_12_37)))
 (let ((?x72870 (* ?x72868 l_0_12_7)))
 (let ((?x73913 (* l_0_12_145 l_0_12_145)))
 (let ((?x73911 (* l_0_12_144 l_0_12_144)))
 (let ((?x73909 (* l_0_12_143 l_0_12_143)))
 (let ((?x73907 (* l_0_12_142 l_0_12_142)))
 (let ((?x73903 (* l_0_12_100 l_0_12_100)))
 (let ((?x72711 (* (- 2.0) l_0_12_10)))
 (let ((?x72866 (* ?x72711 l_0_12_40)))
 (let ((?x73916 (- (- (+ (+ (+ (+ (- ?x72866 ?x73903) ?x73907) ?x73909) ?x73911) ?x73913) ?x72870) ?x72873)))
 (let ((?x73925 (- (- (+ (+ (+ (+ (- ?x73916 ?x72882) ?x72884) ?x72886) ?x72888) ?x72890) ?x73922) ?x73924)))
 (= (- ?x73925 ?x73926) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x72934 (* l_0_12_60 l_0_12_60)))
 (let ((?x72932 (* l_0_12_59 l_0_12_59)))
 (let ((?x72930 (* l_0_12_58 l_0_12_58)))
 (let ((?x72928 (* l_0_12_57 l_0_12_57)))
 (let ((?x72926 (* l_0_12_56 l_0_12_56)))
 (let ((?x72924 (* l_0_12_15 l_0_12_15)))
 (let ((?x72922 (* l_0_12_14 l_0_12_14)))
 (let ((?x72913 (* l_0_12_13 l_0_12_13)))
 (let ((?x72921 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x72913)))
 (let ((?x72935 (+ (+ (+ (+ (+ (- (- ?x72921 ?x72922) ?x72924) ?x72926) ?x72928) ?x72930) ?x72932) ?x72934)))
 (= ?x72935 0.0))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x72979 (* ?x72978 l_0_12_65)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x72976 (* ?x72975 l_0_12_64)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x72973 (* ?x72972 l_0_12_63)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x72970 (* ?x72969 l_0_12_62)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x72967 (* ?x72966 l_0_12_61)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x72964 (* ?x72963 l_0_12_20)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x72961 (* ?x72960 l_0_12_19)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72958 (* ?x72532 l_0_12_18)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72956 (* ?x72144 l_0_12_17)))
 (let ((?x72965 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_16) ?x72956) ?x72958) ?x72961) ?x72964)))
 (= (+ (+ (+ (+ (+ ?x72965 ?x72967) ?x72970) ?x72973) ?x72976) ?x72979) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73028 (* ?x72978 l_0_12_71)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73026 (* ?x72975 l_0_12_70)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73024 (* ?x72972 l_0_12_69)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73022 (* ?x72969 l_0_12_68)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73020 (* ?x72966 l_0_12_67)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73018 (* ?x72963 l_0_12_26)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73008 (* ?x72960 l_0_12_25)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73005 (* ?x72532 l_0_12_24)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73001 (* ?x72144 l_0_12_23)))
 (let ((?x73019 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_22) ?x73001) ?x73005) ?x73008) ?x73018)))
 (= (+ (+ (+ (+ (+ ?x73019 ?x73020) ?x73022) ?x73024) ?x73026) ?x73028) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73069 (* ?x72978 l_0_12_78)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73067 (* ?x72975 l_0_12_77)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73065 (* ?x72972 l_0_12_76)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73063 (* ?x72969 l_0_12_75)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73061 (* ?x72966 l_0_12_74)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73059 (* ?x72963 l_0_12_33)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73057 (* ?x72960 l_0_12_32)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73055 (* ?x72532 l_0_12_31)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73053 (* ?x72144 l_0_12_30)))
 (let ((?x73060 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_29) ?x73053) ?x73055) ?x73057) ?x73059)))
 (= (+ (+ (+ (+ (+ ?x73060 ?x73061) ?x73063) ?x73065) ?x73067) ?x73069) 0.0)))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73119 (* ?x72978 l_0_12_86)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73117 (* ?x72975 l_0_12_85)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73115 (* ?x72972 l_0_12_84)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73113 (* ?x72969 l_0_12_83)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73111 (* ?x72966 l_0_12_82)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73109 (* ?x72963 l_0_12_41)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73968 (* ?x72076 l_0_12_149)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73966 (* ?x72073 l_0_12_148)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73964 (* ?x72070 l_0_12_147)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73962 (* ?x72067 l_0_12_146)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73099 (* ?x72960 l_0_12_40)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73096 (* ?x72532 l_0_12_39)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73092 (* ?x72144 l_0_12_38)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x73957 (* ?x72141 l_0_12_37)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x73955 (* ?x72132 l_0_12_99)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x73953 (* ?x72120 l_0_12_98)))
 (let ((?x38739 (* 2.0 l_0_12_101)))
 (let ((?x38745 (* ?x38739 l_0_12_97)))
 (let ((?x73956 (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_104) ?x38745) ?x73953) ?x73955)))
 (let ((?x73967 (+ (+ (+ (- (- (- (- ?x73956 ?x73957) ?x73092) ?x73096) ?x73099) ?x73962) ?x73964) ?x73966)))
 (let ((?x73975 (+ (+ (+ (+ (+ (- (+ ?x73967 ?x73968) ?x73109) ?x73111) ?x73113) ?x73115) ?x73117) ?x73119)))
 (= ?x73975 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73176 (* l_0_12_66 l_0_12_66)))
 (let ((?x73174 (* l_0_12_65 l_0_12_65)))
 (let ((?x73172 (* l_0_12_64 l_0_12_64)))
 (let ((?x73170 (* l_0_12_63 l_0_12_63)))
 (let ((?x73168 (* l_0_12_62 l_0_12_62)))
 (let ((?x73166 (* l_0_12_61 l_0_12_61)))
 (let ((?x73164 (* l_0_12_21 l_0_12_21)))
 (let ((?x73162 (* l_0_12_20 l_0_12_20)))
 (let ((?x73160 (* l_0_12_19 l_0_12_19)))
 (let ((?x73158 (* l_0_12_18 l_0_12_18)))
 (let ((?x73159 (- (- (* (- l_0_12_16) l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73158)))
 (let ((?x73173 (+ (+ (+ (+ (- (- (- ?x73159 ?x73160) ?x73162) ?x73164) ?x73166) ?x73168) ?x73170) ?x73172)))
 (= (+ (+ ?x73173 ?x73174) ?x73176) 0.0))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73220 (* ?x71753 l_0_12_72)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73218 (* ?x71750 l_0_12_71)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73216 (* ?x71747 l_0_12_70)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73214 (* ?x71744 l_0_12_69)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73212 (* ?x71741 l_0_12_68)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73210 (* ?x71738 l_0_12_67)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73208 (* ?x71715 l_0_12_27)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73206 (* ?x71712 l_0_12_26)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73204 (* ?x71709 l_0_12_25)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73202 (* ?x71706 l_0_12_24)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73200 (* ?x71703 l_0_12_23)))
 (let ((?x73207 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_22) ?x73200) ?x73202) ?x73204) ?x73206)))
 (let ((?x73221 (+ (+ (+ (+ (+ (+ (- ?x73207 ?x73208) ?x73210) ?x73212) ?x73214) ?x73216) ?x73218) ?x73220)))
 (= ?x73221 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73297 (* ?x71753 l_0_12_87)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73295 (* ?x71750 l_0_12_86)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73293 (* ?x71747 l_0_12_85)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73291 (* ?x71744 l_0_12_84)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73289 (* ?x71741 l_0_12_83)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73287 (* ?x71738 l_0_12_82)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73285 (* ?x71715 l_0_12_42)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73283 (* ?x71712 l_0_12_41)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73281 (* ?x71709 l_0_12_40)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73279 (* ?x71706 l_0_12_39)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73277 (* ?x71703 l_0_12_38)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x38686 (* ?x71695 l_0_12_37)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x72077 (* ?x72076 l_0_12_154)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x72074 (* ?x72073 l_0_12_153)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x72071 (* ?x72070 l_0_12_152)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x72068 (* ?x72067 l_0_12_151)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72065 (* ?x71840 l_0_12_99)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72063 (* ?x71837 l_0_12_98)))
 (let ((?x71674 (* 2.0 l_0_12_106)))
 (let ((?x72053 (* ?x71674 l_0_12_97)))
 (let ((?x72069 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_109) ?x72053) ?x72063) ?x72065) ?x72068)))
 (let ((?x72078 (+ (+ (+ ?x72069 ?x72071) ?x72074) ?x72077)))
 (let ((?x61435 (+ (- (- (- (- (- (- ?x72078 ?x38686) ?x73277) ?x73279) ?x73281) ?x73283) ?x73285) ?x73287)))
 (= (+ (+ (+ (+ (+ ?x61435 ?x73289) ?x73291) ?x73293) ?x73295) ?x73297) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73348 (* l_0_12_73 l_0_12_73)))
 (let ((?x73346 (* l_0_12_72 l_0_12_72)))
 (let ((?x73344 (* l_0_12_71 l_0_12_71)))
 (let ((?x73342 (* l_0_12_70 l_0_12_70)))
 (let ((?x73340 (* l_0_12_69 l_0_12_69)))
 (let ((?x73338 (* l_0_12_68 l_0_12_68)))
 (let ((?x73336 (* l_0_12_67 l_0_12_67)))
 (let ((?x73334 (* l_0_12_28 l_0_12_28)))
 (let ((?x73332 (* l_0_12_27 l_0_12_27)))
 (let ((?x73330 (* l_0_12_26 l_0_12_26)))
 (let ((?x73319 (* l_0_12_25 l_0_12_25)))
 (let ((?x50515 (* l_0_12_24 l_0_12_24)))
 (let ((?x10238 (- (- (* (- l_0_12_22) l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x50515)))
 (let ((?x73341 (+ (+ (+ (- (- (- (- ?x10238 ?x73319) ?x73330) ?x73332) ?x73334) ?x73336) ?x73338) ?x73340)))
 (= (+ (+ (+ (+ ?x73341 ?x73342) ?x73344) ?x73346) ?x73348) 0.0))))))))))))))))
(assert
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73413 (* ?x73412 l_0_12_80)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73410 (* ?x73409 l_0_12_79)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73407 (* ?x73406 l_0_12_78)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73404 (* ?x73403 l_0_12_77)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73401 (* ?x73400 l_0_12_76)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73398 (* ?x73397 l_0_12_75)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73395 (* ?x73394 l_0_12_74)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73392 (* ?x73391 l_0_12_35)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73389 (* ?x73388 l_0_12_34)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73386 (* ?x73385 l_0_12_33)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73383 (* ?x73382 l_0_12_32)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73380 (* ?x72594 l_0_12_31)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73378 (* ?x72303 l_0_12_30)))
 (let ((?x73387 (- (- (- (- (* (* (- 2.0) l_0_12_22) l_0_12_29) ?x73378) ?x73380) ?x73383) ?x73386)))
 (let ((?x73408 (+ (+ (+ (+ (+ (- (- ?x73387 ?x73389) ?x73392) ?x73395) ?x73398) ?x73401) ?x73404) ?x73407)))
 (= (+ (+ ?x73408 ?x73410) ?x73413) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73481 (* ?x73412 l_0_12_88)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73479 (* ?x73409 l_0_12_87)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73477 (* ?x73406 l_0_12_86)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73475 (* ?x73403 l_0_12_85)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73473 (* ?x73400 l_0_12_84)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73471 (* ?x73397 l_0_12_83)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73469 (* ?x73394 l_0_12_82)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73467 (* ?x73391 l_0_12_43)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73465 (* ?x73388 l_0_12_42)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73463 (* ?x73385 l_0_12_41)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73461 (* ?x73382 l_0_12_40)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73459 (* ?x72594 l_0_12_39)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73457 (* ?x72303 l_0_12_38)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x73455 (* ?x72801 l_0_12_37)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73748 (* ?x72076 l_0_12_160)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73746 (* ?x72073 l_0_12_159)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73744 (* ?x72070 l_0_12_158)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73742 (* ?x72067 l_0_12_157)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x73740 (* ?x73739 l_0_12_99)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x73737 (* ?x73736 l_0_12_98)))
 (let ((?x10390 (* 2.0 l_0_12_112)))
 (let ((?x10358 (* ?x10390 l_0_12_97)))
 (let ((?x73809 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_115) ?x10358) ?x73737) ?x73740) ?x73742)))
 (let ((?x73812 (+ (+ (+ ?x73809 ?x73744) ?x73746) ?x73748)))
 (let ((?x61487 (- (- (- (- (- (- (- ?x73812 ?x73455) ?x73457) ?x73459) ?x73461) ?x73463) ?x73465) ?x73467)))
 (let ((?x38683 (+ (+ (+ (+ (+ (+ (+ ?x61487 ?x73469) ?x73471) ?x73473) ?x73475) ?x73477) ?x73479) ?x73481)))
 (= ?x38683 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73551 (* l_0_12_81 l_0_12_81)))
 (let ((?x73549 (* l_0_12_80 l_0_12_80)))
 (let ((?x73547 (* l_0_12_79 l_0_12_79)))
 (let ((?x73545 (* l_0_12_78 l_0_12_78)))
 (let ((?x73543 (* l_0_12_77 l_0_12_77)))
 (let ((?x73541 (* l_0_12_76 l_0_12_76)))
 (let ((?x73539 (* l_0_12_75 l_0_12_75)))
 (let ((?x73537 (* l_0_12_74 l_0_12_74)))
 (let ((?x73535 (* l_0_12_36 l_0_12_36)))
 (let ((?x73533 (* l_0_12_35 l_0_12_35)))
 (let ((?x73531 (* l_0_12_34 l_0_12_34)))
 (let ((?x73529 (* l_0_12_33 l_0_12_33)))
 (let ((?x73518 (* l_0_12_32 l_0_12_32)))
 (let ((?x61053 (* l_0_12_31 l_0_12_31)))
 (let ((?x73516 (- (- (* (- l_0_12_29) l_0_12_29) (* l_0_12_30 l_0_12_30)) ?x61053)))
 (let ((?x73540 (+ (+ (- (- (- (- (- ?x73516 ?x73518) ?x73529) ?x73531) ?x73533) ?x73535) ?x73537) ?x73539)))
 (= (+ (+ (+ (+ (+ (+ ?x73540 ?x73541) ?x73543) ?x73545) ?x73547) ?x73549) ?x73551) 0.0))))))))))))))))))
(assert
 (let ((?x73612 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73609 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73606 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73603 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73600 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73597 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73594 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73591 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73588 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73585 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73582 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73579 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73576 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x73573 (* ?x72629 l_0_12_39)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x73571 (* ?x72626 l_0_12_38)))
 (let ((?x72840 (* 2.0 l_0_12_29)))
 (let ((?x74038 (* ?x72840 l_0_12_37)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74036 (* ?x72076 l_0_12_167)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74034 (* ?x72073 l_0_12_166)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x74032 (* ?x72070 l_0_12_165)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x74030 (* ?x72067 l_0_12_164)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x74028 (* ?x74027 l_0_12_99)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x61546 (* ?x50938 l_0_12_98)))
 (let ((?x50942 (* 2.0 l_0_12_119)))
 (let ((?x61547 (* ?x50942 l_0_12_97)))
 (let ((?x74031 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_122) ?x61547) ?x61546) ?x74028) ?x74030)))
 (let ((?x74037 (+ (+ (+ ?x74031 ?x74032) ?x74034) ?x74036)))
 (let ((?x74045 (- (- (- (- (- (- (- ?x74037 ?x74038) ?x73571) ?x73573) ?x73576) ?x73579) ?x73582) ?x73585)))
 (let ((?x74052 (+ (+ (+ (+ (+ (+ (- ?x74045 ?x73588) ?x73591) ?x73594) ?x73597) ?x73600) ?x73603) ?x73606)))
 (= (+ (+ ?x74052 ?x73609) ?x73612) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73675 (* l_0_12_90 l_0_12_90)))
 (let ((?x73673 (* l_0_12_89 l_0_12_89)))
 (let ((?x73671 (* l_0_12_88 l_0_12_88)))
 (let ((?x73669 (* l_0_12_87 l_0_12_87)))
 (let ((?x73667 (* l_0_12_86 l_0_12_86)))
 (let ((?x73665 (* l_0_12_85 l_0_12_85)))
 (let ((?x73663 (* l_0_12_84 l_0_12_84)))
 (let ((?x73661 (* l_0_12_83 l_0_12_83)))
 (let ((?x73659 (* l_0_12_82 l_0_12_82)))
 (let ((?x73657 (* l_0_12_45 l_0_12_45)))
 (let ((?x73655 (* l_0_12_44 l_0_12_44)))
 (let ((?x73653 (* l_0_12_43 l_0_12_43)))
 (let ((?x73651 (* l_0_12_42 l_0_12_42)))
 (let ((?x73638 (* l_0_12_41 l_0_12_41)))
 (let ((?x73635 (* l_0_12_40 l_0_12_40)))
 (let ((?x73631 (* l_0_12_39 l_0_12_39)))
 (let ((?x38384 (* l_0_12_38 l_0_12_38)))
 (let ((?x73679 (* l_0_12_37 l_0_12_37)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74077 (* ?x72076 l_0_12_175)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74075 (* ?x72073 l_0_12_174)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x50987 (* ?x72070 l_0_12_173)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x51008 (* ?x72067 l_0_12_172)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x51010 (* ?x61549 l_0_12_99)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x61540 (* ?x51005 l_0_12_98)))
 (let ((?x50986 (* 2.0 l_0_12_127)))
 (let ((?x51003 (* ?x50986 l_0_12_97)))
 (let ((?x51000 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_130) ?x51003) ?x61540) ?x51010) ?x51008)))
 (let ((?x74078 (+ (+ (+ ?x51000 ?x50987) ?x74075) ?x74077)))
 (let ((?x74085 (- (- (- (- (- (- (- ?x74078 ?x73679) ?x38384) ?x73631) ?x73635) ?x73638) ?x73651) ?x73653)))
 (let ((?x74092 (+ (+ (+ (+ (+ (- (- ?x74085 ?x73655) ?x73657) ?x73659) ?x73661) ?x73663) ?x73665) ?x73667)))
 (= (+ (+ (+ (+ ?x74092 ?x73669) ?x73671) ?x73673) ?x73675) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71681 (* ?x71680 l_0_12_47)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x61607 (* ?x51082 l_0_12_227)))
 (let ((?x51045 (- (* (* 2.0 l_0_12_1) l_0_12_2) (* (* 2.0 l_0_12_182) l_0_12_184))))
 (let ((?x61618 (- (+ (- ?x51045 (* (* 2.0 l_0_12_183) l_0_12_185)) ?x61607) (* (* 2.0 l_0_12_272) l_0_12_274))))
 (let ((?x39061 (- (- ?x61618 (* (* 2.0 l_0_12_273) l_0_12_275)) (* (* 2.0 l_0_12_317) l_0_12_319))))
 (let ((?x61630 (- (- ?x39061 (* (* 2.0 l_0_12_318) l_0_12_320)) (* (* 2.0 l_0_12_362) l_0_12_364))))
 (let ((?x61620 (- (- ?x61630 (* (* 2.0 l_0_12_363) l_0_12_365)) (* (* 2.0 l_0_12_407) l_0_12_409))))
 (= (- (- ?x61620 (* (* 2.0 l_0_12_408) l_0_12_410)) ?x71681) 0.0)))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71736 (* ?x71680 l_0_12_49)))
 (let ((?x74186 (* l_0_12_411 l_0_12_411)))
 (let ((?x74184 (* l_0_12_410 l_0_12_410)))
 (let ((?x74182 (* l_0_12_409 l_0_12_409)))
 (let ((?x74180 (* l_0_12_366 l_0_12_366)))
 (let ((?x74178 (* l_0_12_365 l_0_12_365)))
 (let ((?x74176 (* l_0_12_364 l_0_12_364)))
 (let ((?x74174 (* l_0_12_321 l_0_12_321)))
 (let ((?x74172 (* l_0_12_320 l_0_12_320)))
 (let ((?x74170 (* l_0_12_319 l_0_12_319)))
 (let ((?x74168 (* l_0_12_276 l_0_12_276)))
 (let ((?x74166 (* l_0_12_275 l_0_12_275)))
 (let ((?x74164 (* l_0_12_274 l_0_12_274)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74162 (* ?x51082 l_0_12_229)))
 (let ((?x74155 (- (* (* 2.0 l_0_12_1) l_0_12_4) (* (* 1.0 l_0_12_184) l_0_12_184))))
 (let ((?x74161 (- (- ?x74155 (* (* 1.0 l_0_12_185) l_0_12_185)) (* (* 1.0 l_0_12_186) l_0_12_186))))
 (let ((?x74175 (- (- (- (- (- (- (+ ?x74161 ?x74162) ?x74164) ?x74166) ?x74168) ?x74170) ?x74172) ?x74174)))
 (let ((?x74188 (- (- (- (- (- (- (- ?x74175 ?x74176) ?x74178) ?x74180) ?x74182) ?x74184) ?x74186) ?x71736)))
 (= ?x74188 0.0))))))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71825 (* ?x71680 l_0_12_52)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74203 (* ?x51082 l_0_12_232)))
 (let ((?x74196 (- (* (* 2.0 l_0_12_1) l_0_12_7) (* (* 2.0 l_0_12_184) l_0_12_187))))
 (let ((?x74202 (- (- ?x74196 (* (* 2.0 l_0_12_185) l_0_12_188)) (* (* 2.0 l_0_12_186) l_0_12_189))))
 (let ((?x74210 (- (- (+ ?x74202 ?x74203) (* (* 2.0 l_0_12_274) l_0_12_277)) (* (* 2.0 l_0_12_275) l_0_12_278))))
 (let ((?x74216 (- (- ?x74210 (* (* 2.0 l_0_12_276) l_0_12_279)) (* (* 2.0 l_0_12_319) l_0_12_322))))
 (let ((?x74222 (- (- ?x74216 (* (* 2.0 l_0_12_320) l_0_12_323)) (* (* 2.0 l_0_12_321) l_0_12_324))))
 (let ((?x74228 (- (- ?x74222 (* (* 2.0 l_0_12_364) l_0_12_367)) (* (* 2.0 l_0_12_365) l_0_12_368))))
 (let ((?x74234 (- (- ?x74228 (* (* 2.0 l_0_12_366) l_0_12_369)) (* (* 2.0 l_0_12_409) l_0_12_412))))
 (let ((?x74240 (- (- ?x74234 (* (* 2.0 l_0_12_410) l_0_12_413)) (* (* 2.0 l_0_12_411) l_0_12_414))))
 (= (- ?x74240 ?x71825) 0.0))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x74321 (* ?x50783 l_0_12_94)))
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71876 (* ?x71680 l_0_12_56)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74294 (* ?x51082 l_0_12_236)))
 (let ((?x74162 (* ?x51082 l_0_12_229)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x74285 (* ?x71677 l_0_12_139)))
 (let ((?x74288 (- (- (* (* 2.0 l_0_12_1) l_0_12_11) ?x74285) (* (* 2.0 l_0_12_184) l_0_12_191))))
 (let ((?x74292 (- (- ?x74288 (* (* 2.0 l_0_12_185) l_0_12_192)) (* (* 2.0 l_0_12_186) l_0_12_193))))
 (let ((?x74299 (- (- (+ (- ?x74292 ?x74162) ?x74294) (* (* 2.0 l_0_12_274) l_0_12_281)) (* (* 2.0 l_0_12_275) l_0_12_282))))
 (let ((?x74303 (- (- ?x74299 (* (* 2.0 l_0_12_276) l_0_12_283)) (* (* 2.0 l_0_12_319) l_0_12_326))))
 (let ((?x74307 (- (- ?x74303 (* (* 2.0 l_0_12_320) l_0_12_327)) (* (* 2.0 l_0_12_321) l_0_12_328))))
 (let ((?x74311 (- (- ?x74307 (* (* 2.0 l_0_12_364) l_0_12_371)) (* (* 2.0 l_0_12_365) l_0_12_372))))
 (let ((?x74315 (- (- ?x74311 (* (* 2.0 l_0_12_366) l_0_12_373)) (* (* 2.0 l_0_12_409) l_0_12_416))))
 (let ((?x74319 (- (- ?x74315 (* (* 2.0 l_0_12_410) l_0_12_417)) (* (* 2.0 l_0_12_411) l_0_12_418))))
 (= (+ (- ?x74319 ?x71876) ?x74321) 0.0)))))))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71915 (* ?x71680 l_0_12_61)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x51351 (* ?x51082 l_0_12_241)))
 (let ((?x51353 (- (* (* 2.0 l_0_12_1) l_0_12_16) (* (* 2.0 l_0_12_184) l_0_12_196))))
 (let ((?x61890 (- (- ?x51353 (* (* 2.0 l_0_12_185) l_0_12_197)) (* (* 2.0 l_0_12_186) l_0_12_198))))
 (let ((?x61905 (- (- (+ ?x61890 ?x51351) (* (* 2.0 l_0_12_274) l_0_12_286)) (* (* 2.0 l_0_12_275) l_0_12_287))))
 (let ((?x74360 (- (- ?x61905 (* (* 2.0 l_0_12_276) l_0_12_288)) (* (* 2.0 l_0_12_319) l_0_12_331))))
 (let ((?x74364 (- (- ?x74360 (* (* 2.0 l_0_12_320) l_0_12_332)) (* (* 2.0 l_0_12_321) l_0_12_333))))
 (let ((?x74368 (- (- ?x74364 (* (* 2.0 l_0_12_364) l_0_12_376)) (* (* 2.0 l_0_12_365) l_0_12_377))))
 (let ((?x74372 (- (- ?x74368 (* (* 2.0 l_0_12_366) l_0_12_378)) (* (* 2.0 l_0_12_409) l_0_12_421))))
 (let ((?x74376 (- (- ?x74372 (* (* 2.0 l_0_12_410) l_0_12_422)) (* (* 2.0 l_0_12_411) l_0_12_423))))
 (= (- ?x74376 ?x71915) 0.0))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71931 (* ?x71680 l_0_12_67)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74427 (* ?x51082 l_0_12_247)))
 (let ((?x74422 (- (* (* 2.0 l_0_12_1) l_0_12_22) (* (* 2.0 l_0_12_184) l_0_12_202))))
 (let ((?x74426 (- (- ?x74422 (* (* 2.0 l_0_12_185) l_0_12_203)) (* (* 2.0 l_0_12_186) l_0_12_204))))
 (let ((?x74432 (- (- (+ ?x74426 ?x74427) (* (* 2.0 l_0_12_274) l_0_12_292)) (* (* 2.0 l_0_12_275) l_0_12_293))))
 (let ((?x74436 (- (- ?x74432 (* (* 2.0 l_0_12_276) l_0_12_294)) (* (* 2.0 l_0_12_319) l_0_12_337))))
 (let ((?x74440 (- (- ?x74436 (* (* 2.0 l_0_12_320) l_0_12_338)) (* (* 2.0 l_0_12_321) l_0_12_339))))
 (let ((?x74444 (- (- ?x74440 (* (* 2.0 l_0_12_364) l_0_12_382)) (* (* 2.0 l_0_12_365) l_0_12_383))))
 (let ((?x74448 (- (- ?x74444 (* (* 2.0 l_0_12_366) l_0_12_384)) (* (* 2.0 l_0_12_409) l_0_12_427))))
 (let ((?x74452 (- (- ?x74448 (* (* 2.0 l_0_12_410) l_0_12_428)) (* (* 2.0 l_0_12_411) l_0_12_429))))
 (= (- ?x74452 ?x71931) 0.0))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71941 (* ?x71680 l_0_12_74)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x51481 (* ?x51082 l_0_12_254)))
 (let ((?x62095 (- (* (* 2.0 l_0_12_1) l_0_12_29) (* (* 2.0 l_0_12_184) l_0_12_209))))
 (let ((?x11927 (- (- ?x62095 (* (* 2.0 l_0_12_185) l_0_12_210)) (* (* 2.0 l_0_12_186) l_0_12_211))))
 (let ((?x62077 (- (- (+ ?x11927 ?x51481) (* (* 2.0 l_0_12_274) l_0_12_299)) (* (* 2.0 l_0_12_275) l_0_12_300))))
 (let ((?x51472 (- (- ?x62077 (* (* 2.0 l_0_12_276) l_0_12_301)) (* (* 2.0 l_0_12_319) l_0_12_344))))
 (let ((?x62145 (- (- ?x51472 (* (* 2.0 l_0_12_320) l_0_12_345)) (* (* 2.0 l_0_12_321) l_0_12_346))))
 (let ((?x74500 (- (- ?x62145 (* (* 2.0 l_0_12_364) l_0_12_389)) (* (* 2.0 l_0_12_365) l_0_12_390))))
 (let ((?x74504 (- (- ?x74500 (* (* 2.0 l_0_12_366) l_0_12_391)) (* (* 2.0 l_0_12_409) l_0_12_434))))
 (let ((?x74508 (- (- ?x74504 (* (* 2.0 l_0_12_410) l_0_12_435)) (* (* 2.0 l_0_12_411) l_0_12_436))))
 (= (- ?x74508 ?x71941) 0.0))))))))))))))
(assert
 (let ((?x71680 (* 2.0 l_0_12_46)))
 (let ((?x71951 (* ?x71680 l_0_12_82)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74534 (* ?x51082 l_0_12_262)))
 (let ((?x62231 (- (* (* 2.0 l_0_12_1) l_0_12_37) (* (* 2.0 l_0_12_184) l_0_12_217))))
 (let ((?x74533 (- (- ?x62231 (* (* 2.0 l_0_12_185) l_0_12_218)) (* (* 2.0 l_0_12_186) l_0_12_219))))
 (let ((?x74539 (- (- (+ ?x74533 ?x74534) (* (* 2.0 l_0_12_274) l_0_12_307)) (* (* 2.0 l_0_12_275) l_0_12_308))))
 (let ((?x74543 (- (- ?x74539 (* (* 2.0 l_0_12_276) l_0_12_309)) (* (* 2.0 l_0_12_319) l_0_12_352))))
 (let ((?x74547 (- (- ?x74543 (* (* 2.0 l_0_12_320) l_0_12_353)) (* (* 2.0 l_0_12_321) l_0_12_354))))
 (let ((?x74551 (- (- ?x74547 (* (* 2.0 l_0_12_364) l_0_12_397)) (* (* 2.0 l_0_12_365) l_0_12_398))))
 (let ((?x74555 (- (- ?x74551 (* (* 2.0 l_0_12_366) l_0_12_399)) (* (* 2.0 l_0_12_409) l_0_12_442))))
 (let ((?x74559 (- (- ?x74555 (* (* 2.0 l_0_12_410) l_0_12_443)) (* (* 2.0 l_0_12_411) l_0_12_444))))
 (= (- ?x74559 ?x71951) 0.0))))))))))))))
(assert
 (let ((?x71980 (* l_0_12_48 l_0_12_48)))
 (let ((?x71978 (* l_0_12_47 l_0_12_47)))
 (let ((?x71976 (* l_0_12_3 l_0_12_3)))
 (let ((?x74618 (* l_0_12_228 l_0_12_228)))
 (let ((?x74620 (+ (+ (+ (* l_0_12_2 l_0_12_2) (* l_0_12_227 l_0_12_227)) ?x74618) ?x71976)))
 (= (- (- ?x74620 ?x71978) ?x71980) 0.0)))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72025 (* ?x72024 l_0_12_50)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72022 (* ?x72021 l_0_12_49)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72019 (* ?x72018 l_0_12_5)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74631 (* ?x74630 l_0_12_230)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74628 (* ?x62488 l_0_12_229)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72016 (* ?x72015 l_0_12_4)))
 (= (- (- (+ (+ (+ ?x72016 ?x74628) ?x74631) ?x72019) ?x72022) ?x72025) 0.0))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72085 (* ?x72024 l_0_12_53)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72083 (* ?x72021 l_0_12_52)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72081 (* ?x72018 l_0_12_8)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74648 (* ?x74630 l_0_12_233)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x62490 (* ?x62488 l_0_12_232)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72079 (* ?x72015 l_0_12_7)))
 (= (- (- (+ (+ (+ ?x72079 ?x62490) ?x74648) ?x72081) ?x72083) ?x72085) 0.0))))))))))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x74675 (* ?x73835 l_0_12_95)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x74673 (* ?x73832 l_0_12_94)))
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72164 (* ?x72024 l_0_12_57)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72162 (* ?x72021 l_0_12_56)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74669 (* ?x74630 l_0_12_237)))
 (let ((?x74631 (* ?x74630 l_0_12_230)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74666 (* ?x62488 l_0_12_236)))
 (let ((?x74628 (* ?x62488 l_0_12_229)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x74663 (* ?x71971 l_0_12_140)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x74661 (* ?x71968 l_0_12_139)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72145 (* ?x72144 l_0_12_3)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x72142 (* ?x72141 l_0_12_2)))
 (let ((?x74670 (+ (- (+ (- (- (- (+ ?x72142 ?x72145) ?x74661) ?x74663) ?x74628) ?x74666) ?x74631) ?x74669)))
 (= (+ (+ (- (- ?x74670 ?x72162) ?x72164) ?x74673) ?x74675) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72241 (* ?x72024 l_0_12_62)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72239 (* ?x72021 l_0_12_61)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x40318 (* ?x74630 l_0_12_242)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x51856 (* ?x62488 l_0_12_241)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72237 (* ?x71703 l_0_12_3)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x72235 (* ?x71695 l_0_12_2)))
 (= (- (- (+ (+ (+ ?x72235 ?x72237) ?x51856) ?x40318) ?x72239) ?x72241) 0.0))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72308 (* ?x72024 l_0_12_68)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72306 (* ?x72021 l_0_12_67)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72304 (* ?x72303 l_0_12_3)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74693 (* ?x74630 l_0_12_248)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74691 (* ?x62488 l_0_12_247)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72301 (* ?x72015 l_0_12_22)))
 (= (- (- (+ (+ (+ ?x72301 ?x74691) ?x74693) ?x72304) ?x72306) ?x72308) 0.0))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x74321 (* ?x50783 l_0_12_94)))
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72368 (* ?x72024 l_0_12_75)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72366 (* ?x72021 l_0_12_74)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72364 (* ?x72018 l_0_12_30)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74708 (* ?x74630 l_0_12_255)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x62583 (* ?x62488 l_0_12_254)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72362 (* ?x72015 l_0_12_29)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x74285 (* ?x71677 l_0_12_139)))
 (let ((?x74713 (- (- (- (+ (+ (+ (+ ?x74285 ?x72362) ?x62583) ?x74708) ?x72364) ?x72366) ?x72368) ?x74321)))
 (= ?x74713 0.0)))))))))))))))))))
(assert
 (let ((?x72024 (* 2.0 l_0_12_48)))
 (let ((?x72410 (* ?x72024 l_0_12_83)))
 (let ((?x72021 (* 2.0 l_0_12_47)))
 (let ((?x72408 (* ?x72021 l_0_12_82)))
 (let ((?x72018 (* 2.0 l_0_12_3)))
 (let ((?x72406 (* ?x72018 l_0_12_38)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74730 (* ?x74630 l_0_12_263)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74728 (* ?x62488 l_0_12_262)))
 (let ((?x72015 (* 2.0 l_0_12_2)))
 (let ((?x72404 (* ?x72015 l_0_12_37)))
 (= (- (- (+ (+ (+ ?x72404 ?x74728) ?x74730) ?x72406) ?x72408) ?x72410) 0.0))))))))))))))
(assert
 (let ((?x72479 (* l_0_12_6 l_0_12_6)))
 (let ((?x72477 (* l_0_12_51 l_0_12_51)))
 (let ((?x72475 (* l_0_12_50 l_0_12_50)))
 (let ((?x72473 (* l_0_12_5 l_0_12_5)))
 (let ((?x72460 (* l_0_12_49 l_0_12_49)))
 (let ((?x72483 (* l_0_12_4 l_0_12_4)))
 (let ((?x74754 (* l_0_12_231 l_0_12_231)))
 (let ((?x74755 (+ (+ (* l_0_12_229 l_0_12_229) (* l_0_12_230 l_0_12_230)) ?x74754)))
 (= (+ (- (- (+ (- (+ ?x74755 ?x72483) ?x72460) ?x72473) ?x72475) ?x72477) ?x72479) 0.0))))))))))
(assert
 (let ((?x72506 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72503 (* ?x72502 l_0_12_54)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72500 (* ?x72499 l_0_12_53)))
 (let ((?x72497 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72494 (* ?x72493 l_0_12_52)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74782 (* ?x74781 l_0_12_234)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74779 (* ?x74778 l_0_12_233)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74777 (* ?x74771 l_0_12_232)))
 (let ((?x74787 (- (+ (+ (+ ?x74777 ?x74779) ?x74782) (* (* 2.0 l_0_12_4) l_0_12_7)) ?x72494)))
 (= (+ (- (- (+ ?x74787 ?x72497) ?x72500) ?x72503) ?x72506) 0.0)))))))))))))))))
(assert
 (let ((?x74835 (* l_0_12_96 l_0_12_96)))
 (let ((?x74833 (* l_0_12_95 l_0_12_95)))
 (let ((?x74831 (* l_0_12_94 l_0_12_94)))
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72539 (* ?x72502 l_0_12_58)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72537 (* ?x72499 l_0_12_57)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72535 (* ?x72493 l_0_12_56)))
 (let ((?x74754 (* l_0_12_231 l_0_12_231)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74825 (* ?x74781 l_0_12_238)))
 (let ((?x74752 (* l_0_12_230 l_0_12_230)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74822 (* ?x74778 l_0_12_237)))
 (let ((?x74751 (* l_0_12_229 l_0_12_229)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74819 (* ?x74771 l_0_12_236)))
 (let ((?x74817 (* l_0_12_141 l_0_12_141)))
 (let ((?x74815 (* l_0_12_140 l_0_12_140)))
 (let ((?x74813 (* l_0_12_139 l_0_12_139)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72533 (* ?x72532 l_0_12_6)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72530 (* ?x72144 l_0_12_5)))
 (let ((?x74816 (- (- (+ (+ (* (* 2.0 l_0_12_11) l_0_12_4) ?x72530) ?x72533) ?x74813) ?x74815)))
 (let ((?x74827 (- (+ (- (+ (- (+ (- ?x74816 ?x74817) ?x74819) ?x74751) ?x74822) ?x74752) ?x74825) ?x74754)))
 (= (+ (+ (+ (- (- (- ?x74827 ?x72535) ?x72537) ?x72539) ?x74831) ?x74833) ?x74835) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72569 (* ?x72502 l_0_12_63)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72567 (* ?x72499 l_0_12_62)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72565 (* ?x72493 l_0_12_61)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x51931 (* ?x74781 l_0_12_243)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x40484 (* ?x74778 l_0_12_242)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x28539 (* ?x74771 l_0_12_241)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72563 (* ?x71706 l_0_12_6)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72555 (* ?x71703 l_0_12_5)))
 (let ((?x51930 (+ (+ (+ (+ (* (* 2.0 l_0_12_16) l_0_12_4) ?x72555) ?x72563) ?x28539) ?x40484)))
 (= (- (- (- (+ ?x51930 ?x51931) ?x72565) ?x72567) ?x72569) 0.0)))))))))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72601 (* ?x72502 l_0_12_69)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72599 (* ?x72499 l_0_12_68)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72597 (* ?x72493 l_0_12_67)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x72595 (* ?x72594 l_0_12_6)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74854 (* ?x74781 l_0_12_249)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74852 (* ?x74778 l_0_12_248)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x72586 (* ?x72303 l_0_12_5)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x62657 (* ?x74771 l_0_12_247)))
 (let ((?x74855 (+ (+ (+ (+ (* (* 2.0 l_0_12_22) l_0_12_4) ?x62657) ?x72586) ?x74852) ?x74854)))
 (= (- (- (- (+ ?x74855 ?x72595) ?x72597) ?x72599) ?x72601) 0.0)))))))))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72636 (* ?x72502 l_0_12_76)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72634 (* ?x72499 l_0_12_75)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72632 (* ?x72493 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x72630 (* ?x72629 l_0_12_6)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x72627 (* ?x72626 l_0_12_5)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74874 (* ?x74781 l_0_12_256)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74872 (* ?x74778 l_0_12_255)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74871 (* ?x74771 l_0_12_254)))
 (let ((?x74878 (+ (+ (+ (+ ?x74871 ?x74872) ?x74874) (* (* 2.0 l_0_12_29) l_0_12_4)) ?x72627)))
 (= (- (- (- (+ ?x74878 ?x72630) ?x72632) ?x72634) ?x72636) 0.0)))))))))))))))))))
(assert
 (let ((?x72502 (* 2.0 l_0_12_51)))
 (let ((?x72667 (* ?x72502 l_0_12_84)))
 (let ((?x72499 (* 2.0 l_0_12_50)))
 (let ((?x72665 (* ?x72499 l_0_12_83)))
 (let ((?x72493 (* 2.0 l_0_12_49)))
 (let ((?x72663 (* ?x72493 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72661 (* ?x72660 l_0_12_6)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72658 (* ?x72657 l_0_12_5)))
 (let ((?x72868 (* 2.0 l_0_12_37)))
 (let ((?x61355 (* ?x72868 l_0_12_4)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74897 (* ?x74781 l_0_12_264)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74895 (* ?x74778 l_0_12_263)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74894 (* ?x74771 l_0_12_262)))
 (let ((?x74903 (- (- (+ (+ (+ (+ (+ ?x74894 ?x74895) ?x74897) ?x61355) ?x72658) ?x72661) ?x72663) ?x72665)))
 (= (- ?x74903 ?x72667) 0.0)))))))))))))))))))))
(assert
 (let ((?x72694 (* l_0_12_9 l_0_12_9)))
 (let ((?x72692 (* l_0_12_8 l_0_12_8)))
 (let ((?x72690 (* l_0_12_7 l_0_12_7)))
 (let ((?x72688 (* l_0_12_55 l_0_12_55)))
 (let ((?x72686 (* l_0_12_54 l_0_12_54)))
 (let ((?x72684 (* l_0_12_53 l_0_12_53)))
 (let ((?x72682 (* l_0_12_52 l_0_12_52)))
 (let ((?x74925 (* l_0_12_235 l_0_12_235)))
 (let ((?x74923 (* l_0_12_234 l_0_12_234)))
 (let ((?x74921 (* l_0_12_233 l_0_12_233)))
 (let ((?x74924 (+ (+ (+ (* l_0_12_10 l_0_12_10) (* l_0_12_232 l_0_12_232)) ?x74921) ?x74923)))
 (let ((?x74932 (+ (+ (- (- (- (- (+ ?x74924 ?x74925) ?x72682) ?x72684) ?x72686) ?x72688) ?x72690) ?x72692)))
 (= (+ ?x74932 ?x72694) 0.0))))))))))))))
(assert
 (let ((?x73856 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x73853 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x73850 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72729 (* ?x72728 l_0_12_59)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72726 (* ?x72725 l_0_12_58)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72723 (* ?x72722 l_0_12_57)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72720 (* ?x72719 l_0_12_56)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x74966 (* ?x73718 l_0_12_239)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x74964 (* ?x73715 l_0_12_238)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x74962 (* ?x73712 l_0_12_237)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x74960 (* ?x73709 l_0_12_236)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74782 (* ?x74781 l_0_12_234)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74779 (* ?x74778 l_0_12_233)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74777 (* ?x74771 l_0_12_232)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x38575 (* ?x72012 l_0_12_144)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x38505 (* ?x72009 l_0_12_143)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x38696 (* ?x72006 l_0_12_142)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72717 (* ?x72532 l_0_12_9)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72715 (* ?x72144 l_0_12_8)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x72713 (* ?x72141 l_0_12_7)))
 (let ((?x74954 (- (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_14) ?x72713) ?x72715) ?x72717) ?x38696)))
 (let ((?x74963 (+ (+ (- (- (- (- (- ?x74954 ?x38505) ?x38575) ?x74777) ?x74779) ?x74782) ?x74960) ?x74962)))
 (let ((?x74972 (+ (- (- (- (- (+ (+ ?x74963 ?x74964) ?x74966) ?x72720) ?x72723) ?x72726) ?x72729) ?x73850)))
 (= (+ (+ ?x74972 ?x73853) ?x73856) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72770 (* ?x72728 l_0_12_64)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72768 (* ?x72725 l_0_12_63)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72766 (* ?x72722 l_0_12_62)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72764 (* ?x72719 l_0_12_61)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x74980 (* ?x73718 l_0_12_244)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x62790 (* ?x73715 l_0_12_243)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x62811 (* ?x73712 l_0_12_242)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x62820 (* ?x73709 l_0_12_241)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x72762 (* ?x71706 l_0_12_9)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x72753 (* ?x71703 l_0_12_8)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x72749 (* ?x71695 l_0_12_7)))
 (let ((?x62814 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_19) ?x72749) ?x72753) ?x72762) ?x62820)))
 (let ((?x74985 (- (- (- (- (+ (+ (+ ?x62814 ?x62811) ?x62790) ?x74980) ?x72764) ?x72766) ?x72768) ?x72770)))
 (= ?x74985 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72850 (* ?x72728 l_0_12_77)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72848 (* ?x72725 l_0_12_76)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72846 (* ?x72722 l_0_12_75)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x50357 (* ?x72719 l_0_12_74)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x38122 (* ?x72629 l_0_12_9)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x50278 (* ?x72626 l_0_12_8)))
 (let ((?x72840 (* 2.0 l_0_12_29)))
 (let ((?x72842 (* ?x72840 l_0_12_7)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x75008 (* ?x73718 l_0_12_257)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x75006 (* ?x73715 l_0_12_256)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x75004 (* ?x73712 l_0_12_255)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x75002 (* ?x73709 l_0_12_254)))
 (let ((?x75009 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_32) ?x75002) ?x75004) ?x75006) ?x75008)))
 (let ((?x75016 (- (- (- (- (+ (+ (+ ?x75009 ?x72842) ?x50278) ?x38122) ?x50357) ?x72846) ?x72848) ?x72850)))
 (= ?x75016 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72728 (* 2.0 l_0_12_55)))
 (let ((?x72890 (* ?x72728 l_0_12_85)))
 (let ((?x72725 (* 2.0 l_0_12_54)))
 (let ((?x72888 (* ?x72725 l_0_12_84)))
 (let ((?x72722 (* 2.0 l_0_12_53)))
 (let ((?x72886 (* ?x72722 l_0_12_83)))
 (let ((?x72719 (* 2.0 l_0_12_52)))
 (let ((?x72884 (* ?x72719 l_0_12_82)))
 (let ((?x72660 (* 2.0 l_0_12_39)))
 (let ((?x72882 (* ?x72660 l_0_12_9)))
 (let ((?x72657 (* 2.0 l_0_12_38)))
 (let ((?x72873 (* ?x72657 l_0_12_8)))
 (let ((?x72868 (* 2.0 l_0_12_37)))
 (let ((?x72870 (* ?x72868 l_0_12_7)))
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x62869 (* ?x73718 l_0_12_265)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x28424 (* ?x73715 l_0_12_264)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x41171 (* ?x73712 l_0_12_263)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x62873 (* ?x73709 l_0_12_262)))
 (let ((?x52340 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_40) ?x62873) ?x41171) ?x28424) ?x62869)))
 (let ((?x75030 (- (- (- (- (+ (+ (+ ?x52340 ?x72870) ?x72873) ?x72882) ?x72884) ?x72886) ?x72888) ?x72890)))
 (= ?x75030 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72934 (* l_0_12_60 l_0_12_60)))
 (let ((?x72932 (* l_0_12_59 l_0_12_59)))
 (let ((?x72930 (* l_0_12_58 l_0_12_58)))
 (let ((?x72928 (* l_0_12_57 l_0_12_57)))
 (let ((?x72926 (* l_0_12_56 l_0_12_56)))
 (let ((?x75077 (* l_0_12_240 l_0_12_240)))
 (let ((?x75075 (* l_0_12_239 l_0_12_239)))
 (let ((?x75073 (* l_0_12_238 l_0_12_238)))
 (let ((?x75071 (* l_0_12_237 l_0_12_237)))
 (let ((?x75069 (* l_0_12_236 l_0_12_236)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74825 (* ?x74781 l_0_12_238)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74822 (* ?x74778 l_0_12_237)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74819 (* ?x74771 l_0_12_236)))
 (let ((?x72924 (* l_0_12_15 l_0_12_15)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75063 (* ?x72012 l_0_12_148)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75061 (* ?x72009 l_0_12_147)))
 (let ((?x72922 (* l_0_12_14 l_0_12_14)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75058 (* ?x72006 l_0_12_146)))
 (let ((?x72913 (* l_0_12_13 l_0_12_13)))
 (let ((?x72910 (* l_0_12_12 l_0_12_12)))
 (let ((?x50382 (* l_0_12_11 l_0_12_11)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x75053 (* ?x72132 l_0_12_96)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x75051 (* ?x72120 l_0_12_95)))
 (let ((?x75056 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_94) ?x75051) ?x75053) ?x50382) ?x72910)))
 (let ((?x75066 (- (+ (- (- (+ (- (+ ?x75056 ?x72913) ?x75058) ?x72922) ?x75061) ?x75063) ?x72924) ?x74819)))
 (let ((?x75078 (+ (+ (+ (+ (+ (- (- ?x75066 ?x74822) ?x74825) ?x75069) ?x75071) ?x75073) ?x75075) ?x75077)))
 (= (- (- (- (- (- ?x75078 ?x72926) ?x72928) ?x72930) ?x72932) ?x72934) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x72979 (* ?x72978 l_0_12_65)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x72976 (* ?x72975 l_0_12_64)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x72973 (* ?x72972 l_0_12_63)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x72970 (* ?x72969 l_0_12_62)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x72967 (* ?x72966 l_0_12_61)))
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75144 (* ?x75143 l_0_12_245)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75141 (* ?x75140 l_0_12_244)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75138 (* ?x75137 l_0_12_243)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75135 (* ?x75134 l_0_12_242)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75132 (* ?x75131 l_0_12_241)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x51931 (* ?x74781 l_0_12_243)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x40484 (* ?x74778 l_0_12_242)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x28539 (* ?x74771 l_0_12_241)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x72964 (* ?x72963 l_0_12_20)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x72013 (* ?x72012 l_0_12_153)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x72010 (* ?x72009 l_0_12_152)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x72961 (* ?x72960 l_0_12_19)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x72007 (* ?x72006 l_0_12_151)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x72958 (* ?x72532 l_0_12_18)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x72956 (* ?x72144 l_0_12_17)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72004 (* ?x71840 l_0_12_96)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72002 (* ?x71837 l_0_12_95)))
 (let ((?x75120 (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_94) ?x72002) ?x72004) (* (* 2.0 l_0_12_11) l_0_12_16))))
 (let ((?x75127 (+ (- (- (+ (- (+ (+ ?x75120 ?x72956) ?x72958) ?x72007) ?x72961) ?x72010) ?x72013) ?x72964)))
 (let ((?x75142 (+ (+ (+ (+ (- (- (- ?x75127 ?x28539) ?x40484) ?x51931) ?x75132) ?x75135) ?x75138) ?x75141)))
 (= (- (- (- (- (- (+ ?x75142 ?x75144) ?x72967) ?x72970) ?x72973) ?x72976) ?x72979) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73028 (* ?x72978 l_0_12_71)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73026 (* ?x72975 l_0_12_70)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73024 (* ?x72972 l_0_12_69)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73022 (* ?x72969 l_0_12_68)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73020 (* ?x72966 l_0_12_67)))
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75196 (* ?x75143 l_0_12_251)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75194 (* ?x75140 l_0_12_250)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75192 (* ?x75137 l_0_12_249)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75190 (* ?x75134 l_0_12_248)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75188 (* ?x75131 l_0_12_247)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74854 (* ?x74781 l_0_12_249)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74852 (* ?x74778 l_0_12_248)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x62657 (* ?x74771 l_0_12_247)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73018 (* ?x72963 l_0_12_26)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75182 (* ?x72012 l_0_12_159)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75180 (* ?x72009 l_0_12_158)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73008 (* ?x72960 l_0_12_25)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75177 (* ?x72006 l_0_12_157)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73005 (* ?x72532 l_0_12_24)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73001 (* ?x72144 l_0_12_23)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75173 (* ?x73739 l_0_12_96)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75171 (* ?x73736 l_0_12_95)))
 (let ((?x75170 (+ (* (* 2.0 l_0_12_11) l_0_12_22) (* (* 2.0 l_0_12_112) l_0_12_94))))
 (let ((?x75181 (- (+ (- (+ (+ (+ (+ ?x75170 ?x75171) ?x75173) ?x73001) ?x73005) ?x75177) ?x73008) ?x75180)))
 (let ((?x75191 (+ (+ (- (- (- (+ (- ?x75181 ?x75182) ?x73018) ?x62657) ?x74852) ?x74854) ?x75188) ?x75190)))
 (let ((?x75201 (- (- (- (- (+ (+ (+ ?x75191 ?x75192) ?x75194) ?x75196) ?x73020) ?x73022) ?x73024) ?x73026)))
 (= (- ?x75201 ?x73028) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73069 (* ?x72978 l_0_12_78)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73067 (* ?x72975 l_0_12_77)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73065 (* ?x72972 l_0_12_76)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73063 (* ?x72969 l_0_12_75)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73061 (* ?x72966 l_0_12_74)))
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75275 (* ?x75143 l_0_12_258)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75273 (* ?x75140 l_0_12_257)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75271 (* ?x75137 l_0_12_256)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75269 (* ?x75134 l_0_12_255)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75267 (* ?x75131 l_0_12_254)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74874 (* ?x74781 l_0_12_256)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74872 (* ?x74778 l_0_12_255)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74871 (* ?x74771 l_0_12_254)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73059 (* ?x72963 l_0_12_33)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75261 (* ?x72012 l_0_12_166)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75259 (* ?x72009 l_0_12_165)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73057 (* ?x72960 l_0_12_32)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75256 (* ?x72006 l_0_12_164)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73055 (* ?x72532 l_0_12_31)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x75253 (* ?x74027 l_0_12_96)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x75251 (* ?x50938 l_0_12_95)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73053 (* ?x72144 l_0_12_30)))
 (let ((?x75249 (+ (* (* 2.0 l_0_12_11) l_0_12_29) (* (* 2.0 l_0_12_119) l_0_12_94))))
 (let ((?x75260 (- (+ (- (+ (+ (+ (+ ?x75249 ?x73053) ?x75251) ?x75253) ?x73055) ?x75256) ?x73057) ?x75259)))
 (let ((?x75270 (+ (+ (- (- (- (+ (- ?x75260 ?x75261) ?x73059) ?x74871) ?x74872) ?x74874) ?x75267) ?x75269)))
 (let ((?x75280 (- (- (- (- (+ (+ (+ ?x75270 ?x75271) ?x75273) ?x75275) ?x73061) ?x73063) ?x73065) ?x73067)))
 (= (- ?x75280 ?x73069) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72978 (* 2.0 l_0_12_60)))
 (let ((?x73119 (* ?x72978 l_0_12_86)))
 (let ((?x72975 (* 2.0 l_0_12_59)))
 (let ((?x73117 (* ?x72975 l_0_12_85)))
 (let ((?x72972 (* 2.0 l_0_12_58)))
 (let ((?x73115 (* ?x72972 l_0_12_84)))
 (let ((?x72969 (* 2.0 l_0_12_57)))
 (let ((?x73113 (* ?x72969 l_0_12_83)))
 (let ((?x72966 (* 2.0 l_0_12_56)))
 (let ((?x73111 (* ?x72966 l_0_12_82)))
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75369 (* ?x75143 l_0_12_266)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75367 (* ?x75140 l_0_12_265)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75365 (* ?x75137 l_0_12_264)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75363 (* ?x75134 l_0_12_263)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75361 (* ?x75131 l_0_12_262)))
 (let ((?x74781 (* 2.0 l_0_12_231)))
 (let ((?x74897 (* ?x74781 l_0_12_264)))
 (let ((?x74778 (* 2.0 l_0_12_230)))
 (let ((?x74895 (* ?x74778 l_0_12_263)))
 (let ((?x74771 (* 2.0 l_0_12_229)))
 (let ((?x74894 (* ?x74771 l_0_12_262)))
 (let ((?x72963 (* 2.0 l_0_12_15)))
 (let ((?x73109 (* ?x72963 l_0_12_41)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75355 (* ?x72012 l_0_12_174)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75353 (* ?x72009 l_0_12_173)))
 (let ((?x72960 (* 2.0 l_0_12_14)))
 (let ((?x73099 (* ?x72960 l_0_12_40)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75350 (* ?x72006 l_0_12_172)))
 (let ((?x72532 (* 2.0 l_0_12_13)))
 (let ((?x73096 (* ?x72532 l_0_12_39)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x75347 (* ?x61549 l_0_12_96)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x75345 (* ?x51005 l_0_12_95)))
 (let ((?x72144 (* 2.0 l_0_12_12)))
 (let ((?x73092 (* ?x72144 l_0_12_38)))
 (let ((?x72141 (* 2.0 l_0_12_11)))
 (let ((?x73957 (* ?x72141 l_0_12_37)))
 (let ((?x75348 (+ (+ (+ (+ ?x73957 ?x73092) (* (* 2.0 l_0_12_127) l_0_12_94)) ?x75345) ?x75347)))
 (let ((?x75358 (- (+ (- (- (+ (- (+ ?x75348 ?x73096) ?x75350) ?x73099) ?x75353) ?x75355) ?x73109) ?x74894)))
 (let ((?x75370 (+ (+ (+ (+ (+ (- (- ?x75358 ?x74895) ?x74897) ?x75361) ?x75363) ?x75365) ?x75367) ?x75369)))
 (= (- (- (- (- (- ?x75370 ?x73111) ?x73113) ?x73115) ?x73117) ?x73119) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73176 (* l_0_12_66 l_0_12_66)))
 (let ((?x73174 (* l_0_12_65 l_0_12_65)))
 (let ((?x73172 (* l_0_12_64 l_0_12_64)))
 (let ((?x73170 (* l_0_12_63 l_0_12_63)))
 (let ((?x73168 (* l_0_12_62 l_0_12_62)))
 (let ((?x73166 (* l_0_12_61 l_0_12_61)))
 (let ((?x75461 (* l_0_12_246 l_0_12_246)))
 (let ((?x75459 (* l_0_12_245 l_0_12_245)))
 (let ((?x75457 (* l_0_12_244 l_0_12_244)))
 (let ((?x75455 (* l_0_12_243 l_0_12_243)))
 (let ((?x75453 (* l_0_12_242 l_0_12_242)))
 (let ((?x75451 (* l_0_12_241 l_0_12_241)))
 (let ((?x73164 (* l_0_12_21 l_0_12_21)))
 (let ((?x73162 (* l_0_12_20 l_0_12_20)))
 (let ((?x73160 (* l_0_12_19 l_0_12_19)))
 (let ((?x73158 (* l_0_12_18 l_0_12_18)))
 (let ((?x75448 (+ (+ (+ (* l_0_12_16 l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73158) ?x73160)))
 (let ((?x75460 (+ (+ (+ (+ (+ (+ (+ ?x75448 ?x73162) ?x73164) ?x75451) ?x75453) ?x75455) ?x75457) ?x75459)))
 (let ((?x75468 (- (- (- (- (- (- (+ ?x75460 ?x75461) ?x73166) ?x73168) ?x73170) ?x73172) ?x73174) ?x73176)))
 (= ?x75468 0.0)))))))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73220 (* ?x71753 l_0_12_72)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73218 (* ?x71750 l_0_12_71)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73216 (* ?x71747 l_0_12_70)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73214 (* ?x71744 l_0_12_69)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73212 (* ?x71741 l_0_12_68)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73210 (* ?x71738 l_0_12_67)))
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x75500 (* ?x71733 l_0_12_252)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x75498 (* ?x71730 l_0_12_251)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x75496 (* ?x71727 l_0_12_250)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x75494 (* ?x71724 l_0_12_249)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x75492 (* ?x71721 l_0_12_248)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x75490 (* ?x71718 l_0_12_247)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73208 (* ?x71715 l_0_12_27)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73206 (* ?x71712 l_0_12_26)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73204 (* ?x71709 l_0_12_25)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73202 (* ?x71706 l_0_12_24)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73200 (* ?x71703 l_0_12_23)))
 (let ((?x75488 (+ (+ (+ (+ (* (* 2.0 l_0_12_16) l_0_12_22) ?x73200) ?x73202) ?x73204) ?x73206)))
 (let ((?x75501 (+ (+ (+ (+ (+ (+ (+ ?x75488 ?x73208) ?x75490) ?x75492) ?x75494) ?x75496) ?x75498) ?x75500)))
 (= (- (- (- (- (- (- ?x75501 ?x73210) ?x73212) ?x73214) ?x73216) ?x73218) ?x73220) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71753 (* 2.0 l_0_12_66)))
 (let ((?x73297 (* ?x71753 l_0_12_87)))
 (let ((?x71750 (* 2.0 l_0_12_65)))
 (let ((?x73295 (* ?x71750 l_0_12_86)))
 (let ((?x71747 (* 2.0 l_0_12_64)))
 (let ((?x73293 (* ?x71747 l_0_12_85)))
 (let ((?x71744 (* 2.0 l_0_12_63)))
 (let ((?x73291 (* ?x71744 l_0_12_84)))
 (let ((?x71741 (* 2.0 l_0_12_62)))
 (let ((?x73289 (* ?x71741 l_0_12_83)))
 (let ((?x71738 (* 2.0 l_0_12_61)))
 (let ((?x73287 (* ?x71738 l_0_12_82)))
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x75551 (* ?x71733 l_0_12_267)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x75549 (* ?x71730 l_0_12_266)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x75547 (* ?x71727 l_0_12_265)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x75545 (* ?x71724 l_0_12_264)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x75543 (* ?x71721 l_0_12_263)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x75541 (* ?x71718 l_0_12_262)))
 (let ((?x71715 (* 2.0 l_0_12_21)))
 (let ((?x73285 (* ?x71715 l_0_12_42)))
 (let ((?x71712 (* 2.0 l_0_12_20)))
 (let ((?x73283 (* ?x71712 l_0_12_41)))
 (let ((?x71709 (* 2.0 l_0_12_19)))
 (let ((?x73281 (* ?x71709 l_0_12_40)))
 (let ((?x71706 (* 2.0 l_0_12_18)))
 (let ((?x73279 (* ?x71706 l_0_12_39)))
 (let ((?x71703 (* 2.0 l_0_12_17)))
 (let ((?x73277 (* ?x71703 l_0_12_38)))
 (let ((?x71695 (* 2.0 l_0_12_16)))
 (let ((?x38686 (* ?x71695 l_0_12_37)))
 (let ((?x75544 (+ (+ (+ (+ (+ (+ (+ ?x38686 ?x73277) ?x73279) ?x73281) ?x73283) ?x73285) ?x75541) ?x75543)))
 (let ((?x75555 (- (- (- (+ (+ (+ (+ ?x75544 ?x75545) ?x75547) ?x75549) ?x75551) ?x73287) ?x73289) ?x73291)))
 (= (- (- (- ?x75555 ?x73293) ?x73295) ?x73297) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73348 (* l_0_12_73 l_0_12_73)))
 (let ((?x73346 (* l_0_12_72 l_0_12_72)))
 (let ((?x73344 (* l_0_12_71 l_0_12_71)))
 (let ((?x73342 (* l_0_12_70 l_0_12_70)))
 (let ((?x73340 (* l_0_12_69 l_0_12_69)))
 (let ((?x73338 (* l_0_12_68 l_0_12_68)))
 (let ((?x73336 (* l_0_12_67 l_0_12_67)))
 (let ((?x73334 (* l_0_12_28 l_0_12_28)))
 (let ((?x73332 (* l_0_12_27 l_0_12_27)))
 (let ((?x73330 (* l_0_12_26 l_0_12_26)))
 (let ((?x75606 (* l_0_12_253 l_0_12_253)))
 (let ((?x75604 (* l_0_12_252 l_0_12_252)))
 (let ((?x75602 (* l_0_12_251 l_0_12_251)))
 (let ((?x75600 (* l_0_12_250 l_0_12_250)))
 (let ((?x73319 (* l_0_12_25 l_0_12_25)))
 (let ((?x75597 (* l_0_12_249 l_0_12_249)))
 (let ((?x75595 (* l_0_12_248 l_0_12_248)))
 (let ((?x75593 (* l_0_12_247 l_0_12_247)))
 (let ((?x50515 (* l_0_12_24 l_0_12_24)))
 (let ((?x75594 (+ (+ (+ (* l_0_12_22 l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x50515) ?x75593)))
 (let ((?x75607 (+ (+ (+ (+ (+ (+ (+ ?x75594 ?x75595) ?x75597) ?x73319) ?x75600) ?x75602) ?x75604) ?x75606)))
 (let ((?x75614 (- (- (- (- (+ (+ (+ ?x75607 ?x73330) ?x73332) ?x73334) ?x73336) ?x73338) ?x73340) ?x73342)))
 (= (- (- (- ?x75614 ?x73344) ?x73346) ?x73348) 0.0))))))))))))))))))))))))
(assert
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73413 (* ?x73412 l_0_12_80)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73410 (* ?x73409 l_0_12_79)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73407 (* ?x73406 l_0_12_78)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73404 (* ?x73403 l_0_12_77)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73401 (* ?x73400 l_0_12_76)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73398 (* ?x73397 l_0_12_75)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73395 (* ?x73394 l_0_12_74)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73392 (* ?x73391 l_0_12_35)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73389 (* ?x73388 l_0_12_34)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73386 (* ?x73385 l_0_12_33)))
 (let ((?x75652 (* 2.0 l_0_12_253)))
 (let ((?x75653 (* ?x75652 l_0_12_260)))
 (let ((?x75649 (* 2.0 l_0_12_252)))
 (let ((?x75650 (* ?x75649 l_0_12_259)))
 (let ((?x75646 (* 2.0 l_0_12_251)))
 (let ((?x75647 (* ?x75646 l_0_12_258)))
 (let ((?x75643 (* 2.0 l_0_12_250)))
 (let ((?x75644 (* ?x75643 l_0_12_257)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73383 (* ?x73382 l_0_12_32)))
 (let ((?x75639 (* 2.0 l_0_12_249)))
 (let ((?x75640 (* ?x75639 l_0_12_256)))
 (let ((?x75636 (* 2.0 l_0_12_248)))
 (let ((?x75637 (* ?x75636 l_0_12_255)))
 (let ((?x75633 (* 2.0 l_0_12_247)))
 (let ((?x75634 (* ?x75633 l_0_12_254)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73380 (* ?x72594 l_0_12_31)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73378 (* ?x72303 l_0_12_30)))
 (let ((?x75638 (+ (+ (+ (+ (* (* 2.0 l_0_12_22) l_0_12_29) ?x73378) ?x73380) ?x75634) ?x75637)))
 (let ((?x75655 (+ (+ (+ (+ (+ (+ (+ ?x75638 ?x75640) ?x73383) ?x75644) ?x75647) ?x75650) ?x75653) ?x73386)))
 (let ((?x75662 (- (- (- (- (- (+ (+ ?x75655 ?x73389) ?x73392) ?x73395) ?x73398) ?x73401) ?x73404) ?x73407)))
 (= (- (- ?x75662 ?x73410) ?x73413) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x74321 (* ?x50783 l_0_12_94)))
 (let ((?x73412 (* 2.0 l_0_12_73)))
 (let ((?x73481 (* ?x73412 l_0_12_88)))
 (let ((?x73409 (* 2.0 l_0_12_72)))
 (let ((?x73479 (* ?x73409 l_0_12_87)))
 (let ((?x73406 (* 2.0 l_0_12_71)))
 (let ((?x73477 (* ?x73406 l_0_12_86)))
 (let ((?x73403 (* 2.0 l_0_12_70)))
 (let ((?x73475 (* ?x73403 l_0_12_85)))
 (let ((?x73400 (* 2.0 l_0_12_69)))
 (let ((?x73473 (* ?x73400 l_0_12_84)))
 (let ((?x73397 (* 2.0 l_0_12_68)))
 (let ((?x73471 (* ?x73397 l_0_12_83)))
 (let ((?x73394 (* 2.0 l_0_12_67)))
 (let ((?x73469 (* ?x73394 l_0_12_82)))
 (let ((?x73391 (* 2.0 l_0_12_28)))
 (let ((?x73467 (* ?x73391 l_0_12_43)))
 (let ((?x73388 (* 2.0 l_0_12_27)))
 (let ((?x73465 (* ?x73388 l_0_12_42)))
 (let ((?x73385 (* 2.0 l_0_12_26)))
 (let ((?x73463 (* ?x73385 l_0_12_41)))
 (let ((?x75652 (* 2.0 l_0_12_253)))
 (let ((?x75730 (* ?x75652 l_0_12_268)))
 (let ((?x75649 (* 2.0 l_0_12_252)))
 (let ((?x75728 (* ?x75649 l_0_12_267)))
 (let ((?x75646 (* 2.0 l_0_12_251)))
 (let ((?x75726 (* ?x75646 l_0_12_266)))
 (let ((?x75643 (* 2.0 l_0_12_250)))
 (let ((?x75724 (* ?x75643 l_0_12_265)))
 (let ((?x73382 (* 2.0 l_0_12_25)))
 (let ((?x73461 (* ?x73382 l_0_12_40)))
 (let ((?x75639 (* 2.0 l_0_12_249)))
 (let ((?x75721 (* ?x75639 l_0_12_264)))
 (let ((?x75636 (* 2.0 l_0_12_248)))
 (let ((?x75719 (* ?x75636 l_0_12_263)))
 (let ((?x75633 (* 2.0 l_0_12_247)))
 (let ((?x75717 (* ?x75633 l_0_12_262)))
 (let ((?x72594 (* 2.0 l_0_12_24)))
 (let ((?x73459 (* ?x72594 l_0_12_39)))
 (let ((?x72303 (* 2.0 l_0_12_23)))
 (let ((?x73457 (* ?x72303 l_0_12_38)))
 (let ((?x72801 (* 2.0 l_0_12_22)))
 (let ((?x73455 (* ?x72801 l_0_12_37)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x74285 (* ?x71677 l_0_12_139)))
 (let ((?x75723 (+ (+ (+ (+ (+ (+ (+ ?x74285 ?x73455) ?x73457) ?x73459) ?x75717) ?x75719) ?x75721) ?x73461)))
 (let ((?x75734 (+ (+ (+ (+ (+ (+ (+ ?x75723 ?x75724) ?x75726) ?x75728) ?x75730) ?x73463) ?x73465) ?x73467)))
 (let ((?x75741 (- (- (- (- (- (- (- ?x75734 ?x73469) ?x73471) ?x73473) ?x73475) ?x73477) ?x73479) ?x73481)))
 (= (- ?x75741 ?x74321) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73551 (* l_0_12_81 l_0_12_81)))
 (let ((?x73549 (* l_0_12_80 l_0_12_80)))
 (let ((?x73547 (* l_0_12_79 l_0_12_79)))
 (let ((?x73545 (* l_0_12_78 l_0_12_78)))
 (let ((?x73543 (* l_0_12_77 l_0_12_77)))
 (let ((?x73541 (* l_0_12_76 l_0_12_76)))
 (let ((?x73539 (* l_0_12_75 l_0_12_75)))
 (let ((?x73537 (* l_0_12_74 l_0_12_74)))
 (let ((?x73535 (* l_0_12_36 l_0_12_36)))
 (let ((?x73533 (* l_0_12_35 l_0_12_35)))
 (let ((?x73531 (* l_0_12_34 l_0_12_34)))
 (let ((?x73529 (* l_0_12_33 l_0_12_33)))
 (let ((?x73518 (* l_0_12_32 l_0_12_32)))
 (let ((?x61053 (* l_0_12_31 l_0_12_31)))
 (let ((?x61039 (* l_0_12_30 l_0_12_30)))
 (let ((?x73555 (* l_0_12_29 l_0_12_29)))
 (let ((?x75793 (* l_0_12_261 l_0_12_261)))
 (let ((?x75791 (* l_0_12_260 l_0_12_260)))
 (let ((?x75789 (* l_0_12_259 l_0_12_259)))
 (let ((?x75787 (* l_0_12_258 l_0_12_258)))
 (let ((?x75785 (* l_0_12_257 l_0_12_257)))
 (let ((?x75783 (* l_0_12_256 l_0_12_256)))
 (let ((?x75784 (+ (+ (* l_0_12_254 l_0_12_254) (* l_0_12_255 l_0_12_255)) ?x75783)))
 (let ((?x75796 (+ (+ (+ (+ (+ (+ (+ ?x75784 ?x75785) ?x75787) ?x75789) ?x75791) ?x75793) ?x73555) ?x61039)))
 (let ((?x75803 (- (+ (+ (+ (+ (+ (+ ?x75796 ?x61053) ?x73518) ?x73529) ?x73531) ?x73533) ?x73535) ?x73537)))
 (let ((?x75810 (- (- (- (- (- (- (- ?x75803 ?x73539) ?x73541) ?x73543) ?x73545) ?x73547) ?x73549) ?x73551)))
 (= ?x75810 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x73612 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73609 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73606 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73603 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73600 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73597 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73594 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73591 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73588 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73585 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73582 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73579 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73576 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72629 (* 2.0 l_0_12_31)))
 (let ((?x73573 (* ?x72629 l_0_12_39)))
 (let ((?x72626 (* 2.0 l_0_12_30)))
 (let ((?x73571 (* ?x72626 l_0_12_38)))
 (let ((?x72840 (* 2.0 l_0_12_29)))
 (let ((?x74038 (* ?x72840 l_0_12_37)))
 (let ((?x75843 (* (* 2.0 l_0_12_261) l_0_12_269)))
 (let ((?x75840 (* (* 2.0 l_0_12_260) l_0_12_268)))
 (let ((?x75837 (* (* 2.0 l_0_12_259) l_0_12_267)))
 (let ((?x75834 (* (* 2.0 l_0_12_258) l_0_12_266)))
 (let ((?x75831 (* (* 2.0 l_0_12_257) l_0_12_265)))
 (let ((?x75828 (* (* 2.0 l_0_12_256) l_0_12_264)))
 (let ((?x75825 (* (* 2.0 l_0_12_255) l_0_12_263)))
 (let ((?x64517 (* (* 2.0 l_0_12_254) l_0_12_262)))
 (let ((?x75844 (+ (+ (+ (+ (+ (+ (+ ?x64517 ?x75825) ?x75828) ?x75831) ?x75834) ?x75837) ?x75840) ?x75843)))
 (let ((?x75851 (+ (+ (+ (+ (+ (+ (+ ?x75844 ?x74038) ?x73571) ?x73573) ?x73576) ?x73579) ?x73582) ?x73585)))
 (let ((?x75858 (- (- (- (- (- (- (+ ?x75851 ?x73588) ?x73591) ?x73594) ?x73597) ?x73600) ?x73603) ?x73606)))
 (= (- (- ?x75858 ?x73609) ?x73612) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x73675 (* l_0_12_90 l_0_12_90)))
 (let ((?x73673 (* l_0_12_89 l_0_12_89)))
 (let ((?x73671 (* l_0_12_88 l_0_12_88)))
 (let ((?x73669 (* l_0_12_87 l_0_12_87)))
 (let ((?x73667 (* l_0_12_86 l_0_12_86)))
 (let ((?x73665 (* l_0_12_85 l_0_12_85)))
 (let ((?x73663 (* l_0_12_84 l_0_12_84)))
 (let ((?x73661 (* l_0_12_83 l_0_12_83)))
 (let ((?x73659 (* l_0_12_82 l_0_12_82)))
 (let ((?x73657 (* l_0_12_45 l_0_12_45)))
 (let ((?x73655 (* l_0_12_44 l_0_12_44)))
 (let ((?x73653 (* l_0_12_43 l_0_12_43)))
 (let ((?x73651 (* l_0_12_42 l_0_12_42)))
 (let ((?x73638 (* l_0_12_41 l_0_12_41)))
 (let ((?x73635 (* l_0_12_40 l_0_12_40)))
 (let ((?x73631 (* l_0_12_39 l_0_12_39)))
 (let ((?x38384 (* l_0_12_38 l_0_12_38)))
 (let ((?x73679 (* l_0_12_37 l_0_12_37)))
 (let ((?x75905 (* l_0_12_270 l_0_12_270)))
 (let ((?x75903 (* l_0_12_269 l_0_12_269)))
 (let ((?x75901 (* l_0_12_268 l_0_12_268)))
 (let ((?x75899 (* l_0_12_267 l_0_12_267)))
 (let ((?x75897 (* l_0_12_266 l_0_12_266)))
 (let ((?x75895 (* l_0_12_265 l_0_12_265)))
 (let ((?x75893 (* l_0_12_264 l_0_12_264)))
 (let ((?x75894 (+ (+ (* l_0_12_262 l_0_12_262) (* l_0_12_263 l_0_12_263)) ?x75893)))
 (let ((?x75907 (+ (+ (+ (+ (+ (+ (+ ?x75894 ?x75895) ?x75897) ?x75899) ?x75901) ?x75903) ?x75905) ?x73679)))
 (let ((?x75914 (+ (+ (+ (+ (+ (+ (+ ?x75907 ?x38384) ?x73631) ?x73635) ?x73638) ?x73651) ?x73653) ?x73655)))
 (let ((?x75921 (- (- (- (- (- (- (+ ?x75914 ?x73657) ?x73659) ?x73661) ?x73663) ?x73665) ?x73667) ?x73669)))
 (= (- (- (- ?x75921 ?x73671) ?x73673) ?x73675) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x75944 (* ?x50783 l_0_12_92)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_137) ?x75944) 0.0))))
(assert
 (let ((?x75652 (* 2.0 l_0_12_253)))
 (let ((?x75730 (* ?x75652 l_0_12_268)))
 (let ((?x75649 (* 2.0 l_0_12_252)))
 (let ((?x75728 (* ?x75649 l_0_12_267)))
 (let ((?x75646 (* 2.0 l_0_12_251)))
 (let ((?x75726 (* ?x75646 l_0_12_266)))
 (let ((?x75643 (* 2.0 l_0_12_250)))
 (let ((?x75724 (* ?x75643 l_0_12_265)))
 (let ((?x75639 (* 2.0 l_0_12_249)))
 (let ((?x75721 (* ?x75639 l_0_12_264)))
 (let ((?x75636 (* 2.0 l_0_12_248)))
 (let ((?x75719 (* ?x75636 l_0_12_263)))
 (let ((?x75633 (* 2.0 l_0_12_247)))
 (let ((?x75717 (* ?x75633 l_0_12_262)))
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x75996 (* ?x75995 l_0_12_178)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x75993 (* ?x75992 l_0_12_177)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x75990 (* ?x75989 l_0_12_176)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x75987 (* ?x75986 l_0_12_175)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x75984 (* ?x75983 l_0_12_174)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x75981 (* ?x75980 l_0_12_173)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x75978 (* ?x75977 l_0_12_172)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x75975 (* ?x71677 l_0_12_146)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x75973 (* ?x75972 l_0_12_133)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x75970 (* ?x75969 l_0_12_132)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x75967 (* ?x75966 l_0_12_131)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x75964 (* ?x75963 l_0_12_130)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75961 (* ?x73739 l_0_12_129)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75959 (* ?x73736 l_0_12_128)))
 (let ((?x72119 (* (- 2.0) l_0_12_101)))
 (let ((?x75956 (* ?x72119 l_0_12_91)))
 (let ((?x75965 (+ (+ (+ (+ ?x75956 (* (* 2.0 l_0_12_112) l_0_12_127)) ?x75959) ?x75961) ?x75964)))
 (let ((?x75985 (- (- (- (+ (+ (+ (+ ?x75965 ?x75967) ?x75970) ?x75973) ?x75975) ?x75978) ?x75981) ?x75984)))
 (let ((?x76000 (- (- (- (- (- (- (- ?x75985 ?x75987) ?x75990) ?x75993) ?x75996) ?x75717) ?x75719) ?x75721)))
 (= (- (- (- (- ?x76000 ?x75724) ?x75726) ?x75728) ?x75730) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x71678 (* ?x71677 l_0_12_151)))
 (= (+ (* (* (- 2.0) l_0_12_106) l_0_12_91) ?x71678) 0.0))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76092 (* ?x71677 l_0_12_157)))
 (= (+ (* (* (- 2.0) l_0_12_112) l_0_12_91) ?x76092) 0.0))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76099 (* ?x71677 l_0_12_164)))
 (= (+ (* (* (- 2.0) l_0_12_119) l_0_12_91) ?x76099) 0.0))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76110 (* ?x71677 l_0_12_172)))
 (= (+ (* (* (- 2.0) l_0_12_127) l_0_12_91) ?x76110) 0.0))))
(assert
 (let ((?x76128 (* l_0_12_93 l_0_12_93)))
 (let ((?x76126 (* l_0_12_92 l_0_12_92)))
 (let ((?x76120 (* l_0_12_138 l_0_12_138)))
 (let ((?x76118 (* l_0_12_137 l_0_12_137)))
 (let ((?x76121 (+ ?x76118 ?x76120)))
 (= (- (- ?x76121 ?x76126) ?x76128) 0.0)))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x74675 (* ?x73835 l_0_12_95)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x74673 (* ?x73832 l_0_12_94)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x74663 (* ?x71971 l_0_12_140)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x74661 (* ?x71968 l_0_12_139)))
 (= (- (- (+ ?x74661 ?x74663) ?x74673) ?x74675) 0.0))))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x71971 l_0_12_147)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x71968 l_0_12_146)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76142 (* ?x72120 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_101) l_0_12_92) ?x76142) ?x76144) ?x76146) 0.0))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x71972 (* ?x71971 l_0_12_152)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x71969 (* ?x71968 l_0_12_151)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71962 (* ?x71837 l_0_12_93)))
 (let ((?x71973 (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_92) ?x71962) ?x71969) ?x71972)))
 (= ?x71973 0.0)))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76168 (* ?x71971 l_0_12_158)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76166 (* ?x71968 l_0_12_157)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76164 (* ?x73736 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_112) l_0_12_92) ?x76164) ?x76166) ?x76168) 0.0))))))))
(assert
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x75996 (* ?x75995 l_0_12_178)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x75993 (* ?x75992 l_0_12_177)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x75990 (* ?x75989 l_0_12_176)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x75987 (* ?x75986 l_0_12_175)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x75984 (* ?x75983 l_0_12_174)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x75981 (* ?x75980 l_0_12_173)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x75978 (* ?x75977 l_0_12_172)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76195 (* ?x71971 l_0_12_165)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76193 (* ?x71968 l_0_12_164)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76191 (* ?x50938 l_0_12_93)))
 (let ((?x50942 (* 2.0 l_0_12_119)))
 (let ((?x76189 (* ?x50942 l_0_12_92)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x75973 (* ?x75972 l_0_12_133)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x75970 (* ?x75969 l_0_12_132)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x75967 (* ?x75966 l_0_12_131)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x75964 (* ?x75963 l_0_12_130)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75961 (* ?x73739 l_0_12_129)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75959 (* ?x73736 l_0_12_128)))
 (let ((?x76186 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_127) ?x75959) ?x75961) ?x75964) ?x75967)))
 (let ((?x76188 (- (- ?x76186 ?x75970) ?x75973)))
 (let ((?x76199 (+ (+ (+ (+ (+ (- (- ?x76188 ?x76189) ?x76191) ?x76193) ?x76195) ?x75978) ?x75981) ?x75984)))
 (= (+ (+ (+ (+ ?x76199 ?x75987) ?x75990) ?x75993) ?x75996) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76214 (* ?x71971 l_0_12_173)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76212 (* ?x71968 l_0_12_172)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x76210 (* ?x51005 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_127) l_0_12_92) ?x76210) ?x76212) ?x76214) 0.0))))))))
(assert
 (let ((?x74835 (* l_0_12_96 l_0_12_96)))
 (let ((?x74833 (* l_0_12_95 l_0_12_95)))
 (let ((?x74831 (* l_0_12_94 l_0_12_94)))
 (let ((?x74817 (* l_0_12_141 l_0_12_141)))
 (let ((?x76225 (+ (+ (* l_0_12_139 l_0_12_139) (* l_0_12_140 l_0_12_140)) ?x74817)))
 (= (- (- (- ?x76225 ?x74831) ?x74833) ?x74835) 0.0)))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75063 (* ?x72012 l_0_12_148)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75061 (* ?x72009 l_0_12_147)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75058 (* ?x72006 l_0_12_146)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x75053 (* ?x72132 l_0_12_96)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x75051 (* ?x72120 l_0_12_95)))
 (let ((?x76244 (+ (+ (- (- (* (* (- 2.0) l_0_12_101) l_0_12_94) ?x75051) ?x75053) ?x75058) ?x75061)))
 (= (+ ?x76244 ?x75063) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x72013 (* ?x72012 l_0_12_153)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x72010 (* ?x72009 l_0_12_152)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x72007 (* ?x72006 l_0_12_151)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72004 (* ?x71840 l_0_12_96)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72002 (* ?x71837 l_0_12_95)))
 (let ((?x72011 (+ (+ (- (- (* (* (- 2.0) l_0_12_106) l_0_12_94) ?x72002) ?x72004) ?x72007) ?x72010)))
 (let ((?x72014 (+ ?x72011 ?x72013)))
 (= ?x72014 0.0))))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75182 (* ?x72012 l_0_12_159)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75180 (* ?x72009 l_0_12_158)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75177 (* ?x72006 l_0_12_157)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75173 (* ?x73739 l_0_12_96)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75171 (* ?x73736 l_0_12_95)))
 (let ((?x65055 (+ (+ (- (- (* (* (- 2.0) l_0_12_112) l_0_12_94) ?x75171) ?x75173) ?x75177) ?x75180)))
 (= (+ ?x65055 ?x75182) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75261 (* ?x72012 l_0_12_166)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75259 (* ?x72009 l_0_12_165)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75256 (* ?x72006 l_0_12_164)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x75253 (* ?x74027 l_0_12_96)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x75251 (* ?x50938 l_0_12_95)))
 (let ((?x63505 (+ (+ (- (- (* (* (- 2.0) l_0_12_119) l_0_12_94) ?x75251) ?x75253) ?x75256) ?x75259)))
 (= (+ ?x63505 ?x75261) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75355 (* ?x72012 l_0_12_174)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75353 (* ?x72009 l_0_12_173)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75350 (* ?x72006 l_0_12_172)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x75347 (* ?x61549 l_0_12_96)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x75345 (* ?x51005 l_0_12_95)))
 (let ((?x76264 (+ (+ (- (- (* (* (- 2.0) l_0_12_127) l_0_12_94) ?x75345) ?x75347) ?x75350) ?x75353)))
 (= (+ ?x76264 ?x75355) 0.0)))))))))))))
(assert
 (let ((?x76278 (* l_0_12_150 l_0_12_150)))
 (let ((?x76276 (* l_0_12_149 l_0_12_149)))
 (let ((?x76274 (* l_0_12_148 l_0_12_148)))
 (let ((?x76272 (* l_0_12_147 l_0_12_147)))
 (let ((?x76270 (* l_0_12_146 l_0_12_146)))
 (let ((?x65142 (* l_0_12_105 l_0_12_105)))
 (let ((?x16278 (* l_0_12_104 l_0_12_104)))
 (let ((?x63770 (* l_0_12_103 l_0_12_103)))
 (let ((?x16321 (- (- (* (- l_0_12_101) l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x63770)))
 (let ((?x76279 (+ (+ (+ (+ (+ (- (- ?x16321 ?x16278) ?x65142) ?x76270) ?x76272) ?x76274) ?x76276) ?x76278)))
 (= ?x76279 0.0))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x72160 (* ?x72159 l_0_12_155)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x72157 (* ?x72156 l_0_12_154)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x72154 (* ?x72153 l_0_12_153)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x72151 (* ?x72150 l_0_12_152)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x72148 (* ?x72147 l_0_12_151)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x72139 (* ?x72138 l_0_12_110)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x72136 (* ?x72135 l_0_12_109)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x72133 (* ?x72132 l_0_12_108)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x72130 (* ?x72120 l_0_12_107)))
 (let ((?x72140 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_106) ?x72130) ?x72133) ?x72136) ?x72139)))
 (= (+ (+ (+ (+ (+ ?x72140 ?x72148) ?x72151) ?x72154) ?x72157) ?x72160) 0.0)))))))))))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76324 (* ?x72159 l_0_12_161)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76322 (* ?x72156 l_0_12_160)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76320 (* ?x72153 l_0_12_159)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76318 (* ?x72150 l_0_12_158)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76316 (* ?x72147 l_0_12_157)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76314 (* ?x72138 l_0_12_116)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76312 (* ?x72135 l_0_12_115)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76310 (* ?x72132 l_0_12_114)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76308 (* ?x72120 l_0_12_113)))
 (let ((?x76315 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_112) ?x76308) ?x76310) ?x76312) ?x76314)))
 (= (+ (+ (+ (+ (+ ?x76315 ?x76316) ?x76318) ?x76320) ?x76322) ?x76324) 0.0)))))))))))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76361 (* ?x72159 l_0_12_168)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76359 (* ?x72156 l_0_12_167)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76357 (* ?x72153 l_0_12_166)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76355 (* ?x72150 l_0_12_165)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76353 (* ?x72147 l_0_12_164)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76351 (* ?x72138 l_0_12_123)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x65264 (* ?x72135 l_0_12_122)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x65233 (* ?x72132 l_0_12_121)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76341 (* ?x72120 l_0_12_120)))
 (let ((?x76352 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_119) ?x76341) ?x65233) ?x65264) ?x76351)))
 (= (+ (+ (+ (+ (+ ?x76352 ?x76353) ?x76355) ?x76357) ?x76359) ?x76361) 0.0)))))))))))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76406 (* ?x72159 l_0_12_176)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76404 (* ?x72156 l_0_12_175)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76402 (* ?x72153 l_0_12_174)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76400 (* ?x72150 l_0_12_173)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76398 (* ?x72147 l_0_12_172)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76396 (* ?x72138 l_0_12_131)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76394 (* ?x72135 l_0_12_130)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76392 (* ?x72132 l_0_12_129)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76390 (* ?x72120 l_0_12_128)))
 (let ((?x76397 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_127) ?x76390) ?x76392) ?x76394) ?x76396)))
 (= (+ (+ (+ (+ (+ ?x76397 ?x76398) ?x76400) ?x76402) ?x76404) ?x76406) 0.0)))))))))))))))))))))
(assert
 (let ((?x72233 (* l_0_12_156 l_0_12_156)))
 (let ((?x72231 (* l_0_12_155 l_0_12_155)))
 (let ((?x72229 (* l_0_12_154 l_0_12_154)))
 (let ((?x72227 (* l_0_12_153 l_0_12_153)))
 (let ((?x72225 (* l_0_12_152 l_0_12_152)))
 (let ((?x72223 (* l_0_12_151 l_0_12_151)))
 (let ((?x72221 (* l_0_12_111 l_0_12_111)))
 (let ((?x72219 (* l_0_12_110 l_0_12_110)))
 (let ((?x72207 (* l_0_12_109 l_0_12_109)))
 (let ((?x72203 (* l_0_12_108 l_0_12_108)))
 (let ((?x72205 (- (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x72203)))
 (let ((?x72230 (+ (+ (+ (+ (- (- (- ?x72205 ?x72207) ?x72219) ?x72221) ?x72223) ?x72225) ?x72227) ?x72229)))
 (let ((?x72234 (+ (+ ?x72230 ?x72231) ?x72233)))
 (= ?x72234 0.0)))))))))))))))
(assert
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72299 (* ?x71867 l_0_12_162)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72297 (* ?x71864 l_0_12_161)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72295 (* ?x71861 l_0_12_160)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72293 (* ?x71858 l_0_12_159)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72291 (* ?x71855 l_0_12_158)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72289 (* ?x71852 l_0_12_157)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72287 (* ?x71849 l_0_12_117)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72285 (* ?x71846 l_0_12_116)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72283 (* ?x71843 l_0_12_115)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72281 (* ?x71840 l_0_12_114)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72269 (* ?x71837 l_0_12_113)))
 (let ((?x72286 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x72269) ?x72281) ?x72283) ?x72285)))
 (let ((?x72300 (+ (+ (+ (+ (+ (+ (- ?x72286 ?x72287) ?x72289) ?x72291) ?x72293) ?x72295) ?x72297) ?x72299)))
 (= ?x72300 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72402 (* ?x71867 l_0_12_177)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72400 (* ?x71864 l_0_12_176)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72398 (* ?x71861 l_0_12_175)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72396 (* ?x71858 l_0_12_174)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72394 (* ?x71855 l_0_12_173)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72392 (* ?x71852 l_0_12_172)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72390 (* ?x71849 l_0_12_132)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72388 (* ?x71846 l_0_12_131)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72386 (* ?x71843 l_0_12_130)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72384 (* ?x71840 l_0_12_129)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72382 (* ?x71837 l_0_12_128)))
 (let ((?x72389 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_127) ?x72382) ?x72384) ?x72386) ?x72388)))
 (let ((?x72403 (+ (+ (+ (+ (+ (+ (- ?x72389 ?x72390) ?x72392) ?x72394) ?x72396) ?x72398) ?x72400) ?x72402)))
 (= ?x72403 0.0))))))))))))))))))))))))))
(assert
 (let ((?x76473 (* l_0_12_163 l_0_12_163)))
 (let ((?x76471 (* l_0_12_162 l_0_12_162)))
 (let ((?x76469 (* l_0_12_161 l_0_12_161)))
 (let ((?x76467 (* l_0_12_160 l_0_12_160)))
 (let ((?x76465 (* l_0_12_159 l_0_12_159)))
 (let ((?x76463 (* l_0_12_158 l_0_12_158)))
 (let ((?x76461 (* l_0_12_157 l_0_12_157)))
 (let ((?x76459 (* l_0_12_118 l_0_12_118)))
 (let ((?x76457 (* l_0_12_117 l_0_12_117)))
 (let ((?x76455 (* l_0_12_116 l_0_12_116)))
 (let ((?x76453 (* l_0_12_115 l_0_12_115)))
 (let ((?x76451 (* l_0_12_114 l_0_12_114)))
 (let ((?x76452 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76451)))
 (let ((?x76466 (+ (+ (+ (- (- (- (- ?x76452 ?x76453) ?x76455) ?x76457) ?x76459) ?x76461) ?x76463) ?x76465)))
 (= (+ (+ (+ (+ ?x76466 ?x76467) ?x76469) ?x76471) ?x76473) 0.0))))))))))))))))
(assert
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x76527 (* ?x75995 l_0_12_170)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x76525 (* ?x75992 l_0_12_169)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x76523 (* ?x75989 l_0_12_168)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x76521 (* ?x75986 l_0_12_167)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x76519 (* ?x75983 l_0_12_166)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x76517 (* ?x75980 l_0_12_165)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x76515 (* ?x75977 l_0_12_164)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x76513 (* ?x75972 l_0_12_125)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x76511 (* ?x75969 l_0_12_124)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x76509 (* ?x75966 l_0_12_123)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x76507 (* ?x75963 l_0_12_122)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x76505 (* ?x73739 l_0_12_121)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76503 (* ?x73736 l_0_12_120)))
 (let ((?x76510 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_119) ?x76503) ?x76505) ?x76507) ?x76509)))
 (let ((?x76524 (+ (+ (+ (+ (+ (- (- ?x76510 ?x76511) ?x76513) ?x76515) ?x76517) ?x76519) ?x76521) ?x76523)))
 (= (+ (+ ?x76524 ?x76525) ?x76527) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x75996 (* ?x75995 l_0_12_178)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x75993 (* ?x75992 l_0_12_177)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x75990 (* ?x75989 l_0_12_176)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x75987 (* ?x75986 l_0_12_175)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x75984 (* ?x75983 l_0_12_174)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x75981 (* ?x75980 l_0_12_173)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x75978 (* ?x75977 l_0_12_172)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x75973 (* ?x75972 l_0_12_133)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x75970 (* ?x75969 l_0_12_132)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x75967 (* ?x75966 l_0_12_131)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x75964 (* ?x75963 l_0_12_130)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75961 (* ?x73739 l_0_12_129)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75959 (* ?x73736 l_0_12_128)))
 (let ((?x76186 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_127) ?x75959) ?x75961) ?x75964) ?x75967)))
 (let ((?x76188 (- (- ?x76186 ?x75970) ?x75973)))
 (let ((?x76545 (+ (+ (+ (+ (+ (+ (+ ?x76188 ?x75978) ?x75981) ?x75984) ?x75987) ?x75990) ?x75993) ?x75996)))
 (= ?x76545 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x76588 (* l_0_12_171 l_0_12_171)))
 (let ((?x76586 (* l_0_12_170 l_0_12_170)))
 (let ((?x76584 (* l_0_12_169 l_0_12_169)))
 (let ((?x76582 (* l_0_12_168 l_0_12_168)))
 (let ((?x76580 (* l_0_12_167 l_0_12_167)))
 (let ((?x76578 (* l_0_12_166 l_0_12_166)))
 (let ((?x76576 (* l_0_12_165 l_0_12_165)))
 (let ((?x76574 (* l_0_12_164 l_0_12_164)))
 (let ((?x76572 (* l_0_12_126 l_0_12_126)))
 (let ((?x76570 (* l_0_12_125 l_0_12_125)))
 (let ((?x76568 (* l_0_12_124 l_0_12_124)))
 (let ((?x76566 (* l_0_12_123 l_0_12_123)))
 (let ((?x76564 (* l_0_12_122 l_0_12_122)))
 (let ((?x76562 (* l_0_12_121 l_0_12_121)))
 (let ((?x76563 (- (- (* (- l_0_12_119) l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76562)))
 (let ((?x76577 (+ (+ (- (- (- (- (- ?x76563 ?x76564) ?x76566) ?x76568) ?x76570) ?x76572) ?x76574) ?x76576)))
 (= (+ (+ (+ (+ (+ (+ ?x76577 ?x76578) ?x76580) ?x76582) ?x76584) ?x76586) ?x76588) 0.0))))))))))))))))))
(assert
 (let ((?x76667 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76664 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76661 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76658 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76655 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76652 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76649 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76646 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76643 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76640 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76637 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76634 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76631 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x76628 (* ?x74027 l_0_12_129)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76626 (* ?x50938 l_0_12_128)))
 (let ((?x76635 (- (- (- (- (* (* (- 2.0) l_0_12_119) l_0_12_127) ?x76626) ?x76628) ?x76631) ?x76634)))
 (let ((?x76656 (+ (+ (+ (+ (- (- (- ?x76635 ?x76637) ?x76640) ?x76643) ?x76646) ?x76649) ?x76652) ?x76655)))
 (= (+ (+ (+ (+ ?x76656 ?x76658) ?x76661) ?x76664) ?x76667) 0.0)))))))))))))))))))))
(assert
 (let ((?x76755 (* l_0_12_180 l_0_12_180)))
 (let ((?x76753 (* l_0_12_179 l_0_12_179)))
 (let ((?x76751 (* l_0_12_178 l_0_12_178)))
 (let ((?x76749 (* l_0_12_177 l_0_12_177)))
 (let ((?x76747 (* l_0_12_176 l_0_12_176)))
 (let ((?x76745 (* l_0_12_175 l_0_12_175)))
 (let ((?x76743 (* l_0_12_174 l_0_12_174)))
 (let ((?x76741 (* l_0_12_173 l_0_12_173)))
 (let ((?x76739 (* l_0_12_172 l_0_12_172)))
 (let ((?x76737 (* l_0_12_135 l_0_12_135)))
 (let ((?x76735 (* l_0_12_134 l_0_12_134)))
 (let ((?x76733 (* l_0_12_133 l_0_12_133)))
 (let ((?x76731 (* l_0_12_132 l_0_12_132)))
 (let ((?x76718 (* l_0_12_131 l_0_12_131)))
 (let ((?x76715 (* l_0_12_130 l_0_12_130)))
 (let ((?x76711 (* l_0_12_129 l_0_12_129)))
 (let ((?x76713 (- (- (* (- l_0_12_127) l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76711)))
 (let ((?x76740 (+ (- (- (- (- (- (- ?x76713 ?x76715) ?x76718) ?x76731) ?x76733) ?x76735) ?x76737) ?x76739)))
 (let ((?x76754 (+ (+ (+ (+ (+ (+ (+ ?x76740 ?x76741) ?x76743) ?x76745) ?x76747) ?x76749) ?x76751) ?x76753)))
 (= (+ ?x76754 ?x76755) 0.0)))))))))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x75944 (* ?x50783 l_0_12_92)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_137) ?x75944) 0.0))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x38528 (* ?x50783 l_0_12_97)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x61271 (* ?x71677 l_0_12_142)))
 (= (- ?x61271 ?x38528) 0.0))))))
(assert
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74708 (* ?x74630 l_0_12_255)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x62583 (* ?x62488 l_0_12_254)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76195 (* ?x71971 l_0_12_165)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76193 (* ?x71968 l_0_12_164)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x75975 (* ?x71677 l_0_12_146)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76191 (* ?x50938 l_0_12_93)))
 (let ((?x50942 (* 2.0 l_0_12_119)))
 (let ((?x76189 (* ?x50942 l_0_12_92)))
 (let ((?x72119 (* (- 2.0) l_0_12_101)))
 (let ((?x75956 (* ?x72119 l_0_12_91)))
 (let ((?x76788 (- (- (- (- (+ (+ (+ ?x75956 ?x76189) ?x76191) ?x75975) ?x76193) ?x76195) ?x62583) ?x74708)))
 (= ?x76788 0.0)))))))))))))))))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76092 (* ?x71677 l_0_12_157)))
 (= (+ (* (* (- 2.0) l_0_12_112) l_0_12_91) ?x76092) 0.0))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76099 (* ?x71677 l_0_12_164)))
 (= (+ (* (* (- 2.0) l_0_12_119) l_0_12_91) ?x76099) 0.0))))
(assert
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76110 (* ?x71677 l_0_12_172)))
 (= (+ (* (* (- 2.0) l_0_12_127) l_0_12_91) ?x76110) 0.0))))
(assert
 (let ((?x76128 (* l_0_12_93 l_0_12_93)))
 (let ((?x76126 (* l_0_12_92 l_0_12_92)))
 (let ((?x76120 (* l_0_12_138 l_0_12_138)))
 (let ((?x76118 (* l_0_12_137 l_0_12_137)))
 (let ((?x76121 (+ ?x76118 ?x76120)))
 (= (- (- ?x76121 ?x76126) ?x76128) 0.0)))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x74675 (* ?x73835 l_0_12_95)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x74673 (* ?x73832 l_0_12_94)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x74663 (* ?x71971 l_0_12_140)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x74661 (* ?x71968 l_0_12_139)))
 (= (- (- (+ ?x74661 ?x74663) ?x74673) ?x74675) 0.0))))))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x73836 (* ?x73835 l_0_12_98)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x73833 (* ?x73832 l_0_12_97)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x73826 (* ?x71971 l_0_12_143)))
 (let ((?x73827 (+ (* (* 2.0 l_0_12_137) l_0_12_142) ?x73826)))
 (= (- (- ?x73827 ?x73833) ?x73836) 0.0)))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x71971 l_0_12_147)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x71968 l_0_12_146)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76142 (* ?x72120 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_101) l_0_12_92) ?x76142) ?x76144) ?x76146) 0.0))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76168 (* ?x71971 l_0_12_158)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76166 (* ?x71968 l_0_12_157)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76164 (* ?x73736 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_112) l_0_12_92) ?x76164) ?x76166) ?x76168) 0.0))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76195 (* ?x71971 l_0_12_165)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76193 (* ?x71968 l_0_12_164)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76191 (* ?x50938 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_119) l_0_12_92) ?x76191) ?x76193) ?x76195) 0.0))))))))
(assert
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76214 (* ?x71971 l_0_12_173)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76212 (* ?x71968 l_0_12_172)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x76210 (* ?x51005 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_127) l_0_12_92) ?x76210) ?x76212) ?x76214) 0.0))))))))
(assert
 (let ((?x74835 (* l_0_12_96 l_0_12_96)))
 (let ((?x74833 (* l_0_12_95 l_0_12_95)))
 (let ((?x74831 (* l_0_12_94 l_0_12_94)))
 (let ((?x74817 (* l_0_12_141 l_0_12_141)))
 (let ((?x76225 (+ (+ (* l_0_12_139 l_0_12_139) (* l_0_12_140 l_0_12_140)) ?x74817)))
 (= (- (- (- ?x76225 ?x74831) ?x74833) ?x74835) 0.0)))))))
(assert
 (let ((?x73856 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x73853 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x73850 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x38575 (* ?x72012 l_0_12_144)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x38505 (* ?x72009 l_0_12_143)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x38696 (* ?x72006 l_0_12_142)))
 (let ((?x61350 (+ (+ ?x38696 ?x38505) ?x38575)))
 (= (- (- (- ?x61350 ?x73850) ?x73853) ?x73856) 0.0))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75063 (* ?x72012 l_0_12_148)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75061 (* ?x72009 l_0_12_147)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75058 (* ?x72006 l_0_12_146)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x75053 (* ?x72132 l_0_12_96)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x75051 (* ?x72120 l_0_12_95)))
 (let ((?x76244 (+ (+ (- (- (* (* (- 2.0) l_0_12_101) l_0_12_94) ?x75051) ?x75053) ?x75058) ?x75061)))
 (= (+ ?x76244 ?x75063) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75182 (* ?x72012 l_0_12_159)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75180 (* ?x72009 l_0_12_158)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75177 (* ?x72006 l_0_12_157)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x75173 (* ?x73739 l_0_12_96)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x75171 (* ?x73736 l_0_12_95)))
 (let ((?x65055 (+ (+ (- (- (* (* (- 2.0) l_0_12_112) l_0_12_94) ?x75171) ?x75173) ?x75177) ?x75180)))
 (= (+ ?x65055 ?x75182) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75261 (* ?x72012 l_0_12_166)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75259 (* ?x72009 l_0_12_165)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75256 (* ?x72006 l_0_12_164)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x75253 (* ?x74027 l_0_12_96)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x75251 (* ?x50938 l_0_12_95)))
 (let ((?x63505 (+ (+ (- (- (* (* (- 2.0) l_0_12_119) l_0_12_94) ?x75251) ?x75253) ?x75256) ?x75259)))
 (= (+ ?x63505 ?x75261) 0.0)))))))))))))
(assert
 (let ((?x72012 (* 2.0 l_0_12_141)))
 (let ((?x75355 (* ?x72012 l_0_12_174)))
 (let ((?x72009 (* 2.0 l_0_12_140)))
 (let ((?x75353 (* ?x72009 l_0_12_173)))
 (let ((?x72006 (* 2.0 l_0_12_139)))
 (let ((?x75350 (* ?x72006 l_0_12_172)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x75347 (* ?x61549 l_0_12_96)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x75345 (* ?x51005 l_0_12_95)))
 (let ((?x76264 (+ (+ (- (- (* (* (- 2.0) l_0_12_127) l_0_12_94) ?x75345) ?x75347) ?x75350) ?x75353)))
 (= (+ ?x76264 ?x75355) 0.0)))))))))))))
(assert
 (let ((?x73926 (* l_0_12_99 l_0_12_99)))
 (let ((?x73924 (* l_0_12_98 l_0_12_98)))
 (let ((?x73922 (* l_0_12_97 l_0_12_97)))
 (let ((?x73913 (* l_0_12_145 l_0_12_145)))
 (let ((?x73911 (* l_0_12_144 l_0_12_144)))
 (let ((?x73909 (* l_0_12_143 l_0_12_143)))
 (let ((?x76827 (+ (+ (* (- l_0_12_100) l_0_12_100) (* l_0_12_142 l_0_12_142)) ?x73909)))
 (= (- (- (- (+ (+ ?x76827 ?x73911) ?x73913) ?x73922) ?x73924) ?x73926) 0.0)))))))))
(assert
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73968 (* ?x72076 l_0_12_149)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73966 (* ?x72073 l_0_12_148)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73964 (* ?x72070 l_0_12_147)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73962 (* ?x72067 l_0_12_146)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x73955 (* ?x72132 l_0_12_99)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x73953 (* ?x72120 l_0_12_98)))
 (let ((?x38739 (* 2.0 l_0_12_101)))
 (let ((?x38745 (* ?x38739 l_0_12_97)))
 (let ((?x73956 (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_104) ?x38745) ?x73953) ?x73955)))
 (= (+ (+ (+ (+ ?x73956 ?x73962) ?x73964) ?x73966) ?x73968) 0.0)))))))))))))))))
(assert
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74036 (* ?x72076 l_0_12_167)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74034 (* ?x72073 l_0_12_166)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x74032 (* ?x72070 l_0_12_165)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x74030 (* ?x72067 l_0_12_164)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x74028 (* ?x74027 l_0_12_99)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x61546 (* ?x50938 l_0_12_98)))
 (let ((?x50942 (* 2.0 l_0_12_119)))
 (let ((?x61547 (* ?x50942 l_0_12_97)))
 (let ((?x74031 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_122) ?x61547) ?x61546) ?x74028) ?x74030)))
 (let ((?x74037 (+ (+ (+ ?x74031 ?x74032) ?x74034) ?x74036)))
 (= ?x74037 0.0))))))))))))))))))
(assert
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74077 (* ?x72076 l_0_12_175)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74075 (* ?x72073 l_0_12_174)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x50987 (* ?x72070 l_0_12_173)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x51008 (* ?x72067 l_0_12_172)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x51010 (* ?x61549 l_0_12_99)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x61540 (* ?x51005 l_0_12_98)))
 (let ((?x50986 (* 2.0 l_0_12_127)))
 (let ((?x51003 (* ?x50986 l_0_12_97)))
 (let ((?x51000 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_130) ?x51003) ?x61540) ?x51010) ?x51008)))
 (let ((?x74078 (+ (+ (+ ?x51000 ?x50987) ?x74075) ?x74077)))
 (= ?x74078 0.0))))))))))))))))))
(assert
 (let ((?x76278 (* l_0_12_150 l_0_12_150)))
 (let ((?x76276 (* l_0_12_149 l_0_12_149)))
 (let ((?x76274 (* l_0_12_148 l_0_12_148)))
 (let ((?x76272 (* l_0_12_147 l_0_12_147)))
 (let ((?x76270 (* l_0_12_146 l_0_12_146)))
 (let ((?x65142 (* l_0_12_105 l_0_12_105)))
 (let ((?x16278 (* l_0_12_104 l_0_12_104)))
 (let ((?x63770 (* l_0_12_103 l_0_12_103)))
 (let ((?x16321 (- (- (* (- l_0_12_101) l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x63770)))
 (let ((?x76279 (+ (+ (+ (+ (+ (- (- ?x16321 ?x16278) ?x65142) ?x76270) ?x76272) ?x76274) ?x76276) ?x76278)))
 (= ?x76279 0.0))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76324 (* ?x72159 l_0_12_161)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76322 (* ?x72156 l_0_12_160)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76320 (* ?x72153 l_0_12_159)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76318 (* ?x72150 l_0_12_158)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76316 (* ?x72147 l_0_12_157)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76314 (* ?x72138 l_0_12_116)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76312 (* ?x72135 l_0_12_115)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76310 (* ?x72132 l_0_12_114)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76308 (* ?x72120 l_0_12_113)))
 (let ((?x76315 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_112) ?x76308) ?x76310) ?x76312) ?x76314)))
 (= (+ (+ (+ (+ (+ ?x76315 ?x76316) ?x76318) ?x76320) ?x76322) ?x76324) 0.0)))))))))))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76361 (* ?x72159 l_0_12_168)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76359 (* ?x72156 l_0_12_167)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76357 (* ?x72153 l_0_12_166)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76355 (* ?x72150 l_0_12_165)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76353 (* ?x72147 l_0_12_164)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76351 (* ?x72138 l_0_12_123)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x65264 (* ?x72135 l_0_12_122)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x65233 (* ?x72132 l_0_12_121)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76341 (* ?x72120 l_0_12_120)))
 (let ((?x76352 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_119) ?x76341) ?x65233) ?x65264) ?x76351)))
 (= (+ (+ (+ (+ (+ ?x76352 ?x76353) ?x76355) ?x76357) ?x76359) ?x76361) 0.0)))))))))))))))))))))
(assert
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76406 (* ?x72159 l_0_12_176)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76404 (* ?x72156 l_0_12_175)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76402 (* ?x72153 l_0_12_174)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76400 (* ?x72150 l_0_12_173)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76398 (* ?x72147 l_0_12_172)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76396 (* ?x72138 l_0_12_131)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76394 (* ?x72135 l_0_12_130)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76392 (* ?x72132 l_0_12_129)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76390 (* ?x72120 l_0_12_128)))
 (let ((?x76397 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_127) ?x76390) ?x76392) ?x76394) ?x76396)))
 (= (+ (+ (+ (+ (+ ?x76397 ?x76398) ?x76400) ?x76402) ?x76404) ?x76406) 0.0)))))))))))))))))))))
(assert
 (let ((?x76473 (* l_0_12_163 l_0_12_163)))
 (let ((?x76471 (* l_0_12_162 l_0_12_162)))
 (let ((?x76469 (* l_0_12_161 l_0_12_161)))
 (let ((?x76467 (* l_0_12_160 l_0_12_160)))
 (let ((?x76465 (* l_0_12_159 l_0_12_159)))
 (let ((?x76463 (* l_0_12_158 l_0_12_158)))
 (let ((?x76461 (* l_0_12_157 l_0_12_157)))
 (let ((?x76459 (* l_0_12_118 l_0_12_118)))
 (let ((?x76457 (* l_0_12_117 l_0_12_117)))
 (let ((?x76455 (* l_0_12_116 l_0_12_116)))
 (let ((?x76453 (* l_0_12_115 l_0_12_115)))
 (let ((?x76451 (* l_0_12_114 l_0_12_114)))
 (let ((?x76452 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76451)))
 (let ((?x76466 (+ (+ (+ (- (- (- (- ?x76452 ?x76453) ?x76455) ?x76457) ?x76459) ?x76461) ?x76463) ?x76465)))
 (= (+ (+ (+ (+ ?x76466 ?x76467) ?x76469) ?x76471) ?x76473) 0.0))))))))))))))))
(assert
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x76527 (* ?x75995 l_0_12_170)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x76525 (* ?x75992 l_0_12_169)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x76523 (* ?x75989 l_0_12_168)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x76521 (* ?x75986 l_0_12_167)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x76519 (* ?x75983 l_0_12_166)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x76517 (* ?x75980 l_0_12_165)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x76515 (* ?x75977 l_0_12_164)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x76513 (* ?x75972 l_0_12_125)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x76511 (* ?x75969 l_0_12_124)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x76509 (* ?x75966 l_0_12_123)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x76507 (* ?x75963 l_0_12_122)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x76505 (* ?x73739 l_0_12_121)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76503 (* ?x73736 l_0_12_120)))
 (let ((?x76510 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_119) ?x76503) ?x76505) ?x76507) ?x76509)))
 (let ((?x76524 (+ (+ (+ (+ (+ (- (- ?x76510 ?x76511) ?x76513) ?x76515) ?x76517) ?x76519) ?x76521) ?x76523)))
 (= (+ (+ ?x76524 ?x76525) ?x76527) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x76588 (* l_0_12_171 l_0_12_171)))
 (let ((?x76586 (* l_0_12_170 l_0_12_170)))
 (let ((?x76584 (* l_0_12_169 l_0_12_169)))
 (let ((?x76582 (* l_0_12_168 l_0_12_168)))
 (let ((?x76580 (* l_0_12_167 l_0_12_167)))
 (let ((?x76578 (* l_0_12_166 l_0_12_166)))
 (let ((?x76576 (* l_0_12_165 l_0_12_165)))
 (let ((?x76574 (* l_0_12_164 l_0_12_164)))
 (let ((?x76572 (* l_0_12_126 l_0_12_126)))
 (let ((?x76570 (* l_0_12_125 l_0_12_125)))
 (let ((?x76568 (* l_0_12_124 l_0_12_124)))
 (let ((?x76566 (* l_0_12_123 l_0_12_123)))
 (let ((?x76564 (* l_0_12_122 l_0_12_122)))
 (let ((?x76562 (* l_0_12_121 l_0_12_121)))
 (let ((?x76563 (- (- (* (- l_0_12_119) l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76562)))
 (let ((?x76577 (+ (+ (- (- (- (- (- ?x76563 ?x76564) ?x76566) ?x76568) ?x76570) ?x76572) ?x76574) ?x76576)))
 (= (+ (+ (+ (+ (+ (+ ?x76577 ?x76578) ?x76580) ?x76582) ?x76584) ?x76586) ?x76588) 0.0))))))))))))))))))
(assert
 (let ((?x76667 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76664 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76661 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76658 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76655 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76652 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76649 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76646 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76643 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76640 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76637 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76634 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76631 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x76628 (* ?x74027 l_0_12_129)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76626 (* ?x50938 l_0_12_128)))
 (let ((?x76635 (- (- (- (- (* (* (- 2.0) l_0_12_119) l_0_12_127) ?x76626) ?x76628) ?x76631) ?x76634)))
 (let ((?x76656 (+ (+ (+ (+ (- (- (- ?x76635 ?x76637) ?x76640) ?x76643) ?x76646) ?x76649) ?x76652) ?x76655)))
 (= (+ (+ (+ (+ ?x76656 ?x76658) ?x76661) ?x76664) ?x76667) 0.0)))))))))))))))))))))
(assert
 (let ((?x76755 (* l_0_12_180 l_0_12_180)))
 (let ((?x76753 (* l_0_12_179 l_0_12_179)))
 (let ((?x76751 (* l_0_12_178 l_0_12_178)))
 (let ((?x76749 (* l_0_12_177 l_0_12_177)))
 (let ((?x76747 (* l_0_12_176 l_0_12_176)))
 (let ((?x76745 (* l_0_12_175 l_0_12_175)))
 (let ((?x76743 (* l_0_12_174 l_0_12_174)))
 (let ((?x76741 (* l_0_12_173 l_0_12_173)))
 (let ((?x76739 (* l_0_12_172 l_0_12_172)))
 (let ((?x76737 (* l_0_12_135 l_0_12_135)))
 (let ((?x76735 (* l_0_12_134 l_0_12_134)))
 (let ((?x76733 (* l_0_12_133 l_0_12_133)))
 (let ((?x76731 (* l_0_12_132 l_0_12_132)))
 (let ((?x76718 (* l_0_12_131 l_0_12_131)))
 (let ((?x76715 (* l_0_12_130 l_0_12_130)))
 (let ((?x76711 (* l_0_12_129 l_0_12_129)))
 (let ((?x76713 (- (- (* (- l_0_12_127) l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76711)))
 (let ((?x76740 (+ (- (- (- (- (- (- ?x76713 ?x76715) ?x76718) ?x76731) ?x76733) ?x76735) ?x76737) ?x76739)))
 (let ((?x76754 (+ (+ (+ (+ (+ (+ (+ ?x76740 ?x76741) ?x76743) ?x76745) ?x76747) ?x76749) ?x76751) ?x76753)))
 (= (+ ?x76754 ?x76755) 0.0)))))))))))))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x75944 (* ?x50783 l_0_12_92)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x61607 (* ?x51082 l_0_12_227)))
 (let ((?x76858 (- (* (* (- 2.0) l_0_12_136) l_0_12_137) (* (* 2.0 l_0_12_182) l_0_12_191))))
 (let ((?x76864 (- (- (- ?x76858 (* (* 2.0 l_0_12_183) l_0_12_192)) ?x61607) (* (* 2.0 l_0_12_272) l_0_12_281))))
 (let ((?x76868 (- (- ?x76864 (* (* 2.0 l_0_12_273) l_0_12_282)) (* (* 2.0 l_0_12_317) l_0_12_326))))
 (let ((?x76872 (- (- ?x76868 (* (* 2.0 l_0_12_318) l_0_12_327)) (* (* 2.0 l_0_12_362) l_0_12_371))))
 (let ((?x76876 (- (- ?x76872 (* (* 2.0 l_0_12_363) l_0_12_372)) (* (* 2.0 l_0_12_407) l_0_12_416))))
 (= (+ (- ?x76876 (* (* 2.0 l_0_12_408) l_0_12_417)) ?x75944) 0.0)))))))))))
(assert
 (let ((?x50783 (* 2.0 l_0_12_91)))
 (let ((?x38528 (* ?x50783 l_0_12_97)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74203 (* ?x51082 l_0_12_232)))
 (let ((?x76949 (- (* (* (- 2.0) l_0_12_136) l_0_12_142) (* (* 2.0 l_0_12_187) l_0_12_191))))
 (let ((?x76953 (- (- ?x76949 (* (* 2.0 l_0_12_188) l_0_12_192)) (* (* 2.0 l_0_12_189) l_0_12_193))))
 (let ((?x76958 (- (- (- ?x76953 (* (* 2.0 l_0_12_190) l_0_12_194)) ?x74203) (* (* 2.0 l_0_12_277) l_0_12_281))))
 (let ((?x76962 (- (- ?x76958 (* (* 2.0 l_0_12_278) l_0_12_282)) (* (* 2.0 l_0_12_279) l_0_12_283))))
 (let ((?x76966 (- (- ?x76962 (* (* 2.0 l_0_12_280) l_0_12_284)) (* (* 2.0 l_0_12_322) l_0_12_326))))
 (let ((?x76970 (- (- ?x76966 (* (* 2.0 l_0_12_323) l_0_12_327)) (* (* 2.0 l_0_12_324) l_0_12_328))))
 (let ((?x76974 (- (- ?x76970 (* (* 2.0 l_0_12_325) l_0_12_329)) (* (* 2.0 l_0_12_367) l_0_12_371))))
 (let ((?x76978 (- (- ?x76974 (* (* 2.0 l_0_12_368) l_0_12_372)) (* (* 2.0 l_0_12_369) l_0_12_373))))
 (let ((?x76982 (- (- ?x76978 (* (* 2.0 l_0_12_370) l_0_12_374)) (* (* 2.0 l_0_12_412) l_0_12_416))))
 (let ((?x76986 (- (- ?x76982 (* (* 2.0 l_0_12_413) l_0_12_417)) (* (* 2.0 l_0_12_414) l_0_12_418))))
 (= (+ (- ?x76986 (* (* 2.0 l_0_12_415) l_0_12_419)) ?x38528) 0.0))))))))))))))))
(assert
 (let ((?x77072 (* l_0_12_420 l_0_12_420)))
 (let ((?x77070 (* l_0_12_419 l_0_12_419)))
 (let ((?x77068 (* l_0_12_418 l_0_12_418)))
 (let ((?x77066 (* l_0_12_417 l_0_12_417)))
 (let ((?x77064 (* l_0_12_416 l_0_12_416)))
 (let ((?x77062 (* l_0_12_375 l_0_12_375)))
 (let ((?x77060 (* l_0_12_374 l_0_12_374)))
 (let ((?x77058 (* l_0_12_373 l_0_12_373)))
 (let ((?x77056 (* l_0_12_372 l_0_12_372)))
 (let ((?x77054 (* l_0_12_371 l_0_12_371)))
 (let ((?x77052 (* l_0_12_330 l_0_12_330)))
 (let ((?x77050 (* l_0_12_329 l_0_12_329)))
 (let ((?x77048 (* l_0_12_328 l_0_12_328)))
 (let ((?x77046 (* l_0_12_327 l_0_12_327)))
 (let ((?x77044 (* l_0_12_326 l_0_12_326)))
 (let ((?x77042 (* l_0_12_285 l_0_12_285)))
 (let ((?x77040 (* l_0_12_284 l_0_12_284)))
 (let ((?x77038 (* l_0_12_283 l_0_12_283)))
 (let ((?x77036 (* l_0_12_282 l_0_12_282)))
 (let ((?x77034 (* l_0_12_281 l_0_12_281)))
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74294 (* ?x51082 l_0_12_236)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x75975 (* ?x71677 l_0_12_146)))
 (let ((?x77020 (- (- (* (* 2.0 l_0_12_101) l_0_12_91) ?x75975) (* (* 1.0 l_0_12_191) l_0_12_191))))
 (let ((?x77026 (- (- ?x77020 (* (* 1.0 l_0_12_192) l_0_12_192)) (* (* 1.0 l_0_12_193) l_0_12_193))))
 (let ((?x77032 (- (- ?x77026 (* (* 1.0 l_0_12_194) l_0_12_194)) (* (* 1.0 l_0_12_195) l_0_12_195))))
 (let ((?x77045 (- (- (- (- (- (- (- ?x77032 ?x74294) ?x77034) ?x77036) ?x77038) ?x77040) ?x77042) ?x77044)))
 (let ((?x77059 (- (- (- (- (- (- (- ?x77045 ?x77046) ?x77048) ?x77050) ?x77052) ?x77054) ?x77056) ?x77058)))
 (let ((?x77073 (- (- (- (- (- (- (- ?x77059 ?x77060) ?x77062) ?x77064) ?x77066) ?x77068) ?x77070) ?x77072)))
 (= ?x77073 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x51351 (* ?x51082 l_0_12_241)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x71678 (* ?x71677 l_0_12_151)))
 (let ((?x71674 (* 2.0 l_0_12_106)))
 (let ((?x71675 (* ?x71674 l_0_12_91)))
 (let ((?x77114 (- (- (- ?x71675 ?x71678) (* (* 2.0 l_0_12_191) l_0_12_196)) (* (* 2.0 l_0_12_192) l_0_12_197))))
 (let ((?x77120 (- (- ?x77114 (* (* 2.0 l_0_12_193) l_0_12_198)) (* (* 2.0 l_0_12_194) l_0_12_199))))
 (let ((?x77127 (- (- (- ?x77120 (* (* 2.0 l_0_12_195) l_0_12_200)) ?x51351) (* (* 2.0 l_0_12_281) l_0_12_286))))
 (let ((?x77133 (- (- ?x77127 (* (* 2.0 l_0_12_282) l_0_12_287)) (* (* 2.0 l_0_12_283) l_0_12_288))))
 (let ((?x77139 (- (- ?x77133 (* (* 2.0 l_0_12_284) l_0_12_289)) (* (* 2.0 l_0_12_285) l_0_12_290))))
 (let ((?x77145 (- (- ?x77139 (* (* 2.0 l_0_12_326) l_0_12_331)) (* (* 2.0 l_0_12_327) l_0_12_332))))
 (let ((?x77151 (- (- ?x77145 (* (* 2.0 l_0_12_328) l_0_12_333)) (* (* 2.0 l_0_12_329) l_0_12_334))))
 (let ((?x77157 (- (- ?x77151 (* (* 2.0 l_0_12_330) l_0_12_335)) (* (* 2.0 l_0_12_371) l_0_12_376))))
 (let ((?x77163 (- (- ?x77157 (* (* 2.0 l_0_12_372) l_0_12_377)) (* (* 2.0 l_0_12_373) l_0_12_378))))
 (let ((?x77169 (- (- ?x77163 (* (* 2.0 l_0_12_374) l_0_12_379)) (* (* 2.0 l_0_12_375) l_0_12_380))))
 (let ((?x77175 (- (- ?x77169 (* (* 2.0 l_0_12_416) l_0_12_421)) (* (* 2.0 l_0_12_417) l_0_12_422))))
 (let ((?x77181 (- (- ?x77175 (* (* 2.0 l_0_12_418) l_0_12_423)) (* (* 2.0 l_0_12_419) l_0_12_424))))
 (= (- ?x77181 (* (* 2.0 l_0_12_420) l_0_12_425)) 0.0))))))))))))))))))))
(assert
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74427 (* ?x51082 l_0_12_247)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76092 (* ?x71677 l_0_12_157)))
 (let ((?x77238 (- (- (* (* 2.0 l_0_12_112) l_0_12_91) ?x76092) (* (* 2.0 l_0_12_191) l_0_12_202))))
 (let ((?x77242 (- (- ?x77238 (* (* 2.0 l_0_12_192) l_0_12_203)) (* (* 2.0 l_0_12_193) l_0_12_204))))
 (let ((?x77246 (- (- ?x77242 (* (* 2.0 l_0_12_194) l_0_12_205)) (* (* 2.0 l_0_12_195) l_0_12_206))))
 (let ((?x77251 (- (- (- ?x77246 ?x74427) (* (* 2.0 l_0_12_281) l_0_12_292)) (* (* 2.0 l_0_12_282) l_0_12_293))))
 (let ((?x77255 (- (- ?x77251 (* (* 2.0 l_0_12_283) l_0_12_294)) (* (* 2.0 l_0_12_284) l_0_12_295))))
 (let ((?x77259 (- (- ?x77255 (* (* 2.0 l_0_12_285) l_0_12_296)) (* (* 2.0 l_0_12_326) l_0_12_337))))
 (let ((?x77263 (- (- ?x77259 (* (* 2.0 l_0_12_327) l_0_12_338)) (* (* 2.0 l_0_12_328) l_0_12_339))))
 (let ((?x77267 (- (- ?x77263 (* (* 2.0 l_0_12_329) l_0_12_340)) (* (* 2.0 l_0_12_330) l_0_12_341))))
 (let ((?x77271 (- (- ?x77267 (* (* 2.0 l_0_12_371) l_0_12_382)) (* (* 2.0 l_0_12_372) l_0_12_383))))
 (let ((?x77275 (- (- ?x77271 (* (* 2.0 l_0_12_373) l_0_12_384)) (* (* 2.0 l_0_12_374) l_0_12_385))))
 (let ((?x77279 (- (- ?x77275 (* (* 2.0 l_0_12_375) l_0_12_386)) (* (* 2.0 l_0_12_416) l_0_12_427))))
 (let ((?x77283 (- (- ?x77279 (* (* 2.0 l_0_12_417) l_0_12_428)) (* (* 2.0 l_0_12_418) l_0_12_429))))
 (let ((?x77287 (- (- ?x77283 (* (* 2.0 l_0_12_419) l_0_12_430)) (* (* 2.0 l_0_12_420) l_0_12_431))))
 (= ?x77287 0.0)))))))))))))))))))
(assert
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x51481 (* ?x51082 l_0_12_254)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76099 (* ?x71677 l_0_12_164)))
 (let ((?x66080 (- (- (* (* 2.0 l_0_12_119) l_0_12_91) ?x76099) (* (* 2.0 l_0_12_191) l_0_12_209))))
 (let ((?x77317 (- (- ?x66080 (* (* 2.0 l_0_12_192) l_0_12_210)) (* (* 2.0 l_0_12_193) l_0_12_211))))
 (let ((?x77321 (- (- ?x77317 (* (* 2.0 l_0_12_194) l_0_12_212)) (* (* 2.0 l_0_12_195) l_0_12_213))))
 (let ((?x77326 (- (- (- ?x77321 ?x51481) (* (* 2.0 l_0_12_281) l_0_12_299)) (* (* 2.0 l_0_12_282) l_0_12_300))))
 (let ((?x77330 (- (- ?x77326 (* (* 2.0 l_0_12_283) l_0_12_301)) (* (* 2.0 l_0_12_284) l_0_12_302))))
 (let ((?x77334 (- (- ?x77330 (* (* 2.0 l_0_12_285) l_0_12_303)) (* (* 2.0 l_0_12_326) l_0_12_344))))
 (let ((?x77338 (- (- ?x77334 (* (* 2.0 l_0_12_327) l_0_12_345)) (* (* 2.0 l_0_12_328) l_0_12_346))))
 (let ((?x77342 (- (- ?x77338 (* (* 2.0 l_0_12_329) l_0_12_347)) (* (* 2.0 l_0_12_330) l_0_12_348))))
 (let ((?x77346 (- (- ?x77342 (* (* 2.0 l_0_12_371) l_0_12_389)) (* (* 2.0 l_0_12_372) l_0_12_390))))
 (let ((?x77350 (- (- ?x77346 (* (* 2.0 l_0_12_373) l_0_12_391)) (* (* 2.0 l_0_12_374) l_0_12_392))))
 (let ((?x77354 (- (- ?x77350 (* (* 2.0 l_0_12_375) l_0_12_393)) (* (* 2.0 l_0_12_416) l_0_12_434))))
 (let ((?x77358 (- (- ?x77354 (* (* 2.0 l_0_12_417) l_0_12_435)) (* (* 2.0 l_0_12_418) l_0_12_436))))
 (let ((?x77362 (- (- ?x77358 (* (* 2.0 l_0_12_419) l_0_12_437)) (* (* 2.0 l_0_12_420) l_0_12_438))))
 (= ?x77362 0.0)))))))))))))))))))
(assert
 (let ((?x51082 (* 2.0 l_0_12_226)))
 (let ((?x74534 (* ?x51082 l_0_12_262)))
 (let ((?x71677 (* 2.0 l_0_12_136)))
 (let ((?x76110 (* ?x71677 l_0_12_172)))
 (let ((?x77449 (- (- (* (* 2.0 l_0_12_127) l_0_12_91) ?x76110) (* (* 2.0 l_0_12_191) l_0_12_217))))
 (let ((?x77453 (- (- ?x77449 (* (* 2.0 l_0_12_192) l_0_12_218)) (* (* 2.0 l_0_12_193) l_0_12_219))))
 (let ((?x77457 (- (- ?x77453 (* (* 2.0 l_0_12_194) l_0_12_220)) (* (* 2.0 l_0_12_195) l_0_12_221))))
 (let ((?x77462 (- (- (- ?x77457 ?x74534) (* (* 2.0 l_0_12_281) l_0_12_307)) (* (* 2.0 l_0_12_282) l_0_12_308))))
 (let ((?x77466 (- (- ?x77462 (* (* 2.0 l_0_12_283) l_0_12_309)) (* (* 2.0 l_0_12_284) l_0_12_310))))
 (let ((?x77470 (- (- ?x77466 (* (* 2.0 l_0_12_285) l_0_12_311)) (* (* 2.0 l_0_12_326) l_0_12_352))))
 (let ((?x77474 (- (- ?x77470 (* (* 2.0 l_0_12_327) l_0_12_353)) (* (* 2.0 l_0_12_328) l_0_12_354))))
 (let ((?x77478 (- (- ?x77474 (* (* 2.0 l_0_12_329) l_0_12_355)) (* (* 2.0 l_0_12_330) l_0_12_356))))
 (let ((?x77482 (- (- ?x77478 (* (* 2.0 l_0_12_371) l_0_12_397)) (* (* 2.0 l_0_12_372) l_0_12_398))))
 (let ((?x77486 (- (- ?x77482 (* (* 2.0 l_0_12_373) l_0_12_399)) (* (* 2.0 l_0_12_374) l_0_12_400))))
 (let ((?x77490 (- (- ?x77486 (* (* 2.0 l_0_12_375) l_0_12_401)) (* (* 2.0 l_0_12_416) l_0_12_442))))
 (let ((?x77494 (- (- ?x77490 (* (* 2.0 l_0_12_417) l_0_12_443)) (* (* 2.0 l_0_12_418) l_0_12_444))))
 (let ((?x77498 (- (- ?x77494 (* (* 2.0 l_0_12_419) l_0_12_445)) (* (* 2.0 l_0_12_420) l_0_12_446))))
 (= ?x77498 0.0)))))))))))))))))))
(assert
 (let ((?x76128 (* l_0_12_93 l_0_12_93)))
 (let ((?x76126 (* l_0_12_92 l_0_12_92)))
 (let ((?x74618 (* l_0_12_228 l_0_12_228)))
 (let ((?x74616 (* l_0_12_227 l_0_12_227)))
 (let ((?x77562 (- (- (* (- l_0_12_137) l_0_12_137) (* l_0_12_138 l_0_12_138)) ?x74616)))
 (= (+ (+ (- ?x77562 ?x74618) ?x76126) ?x76128) 0.0)))))))
(assert
 (let ((?x73835 (* 2.0 l_0_12_93)))
 (let ((?x73836 (* ?x73835 l_0_12_98)))
 (let ((?x73832 (* 2.0 l_0_12_92)))
 (let ((?x73833 (* ?x73832 l_0_12_97)))
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74648 (* ?x74630 l_0_12_233)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x62490 (* ?x62488 l_0_12_232)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x73826 (* ?x71971 l_0_12_143)))
 (let ((?x77581 (+ (- (- (- (* (* (- 2.0) l_0_12_137) l_0_12_142) ?x73826) ?x62490) ?x74648) ?x73833)))
 (= (+ ?x77581 ?x73836) 0.0)))))))))))))
(assert
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74669 (* ?x74630 l_0_12_237)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74666 (* ?x62488 l_0_12_236)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x71971 l_0_12_147)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x71968 l_0_12_146)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76142 (* ?x72120 l_0_12_93)))
 (let ((?x77592 (- (- (- (+ (* (* 2.0 l_0_12_101) l_0_12_92) ?x76142) ?x76144) ?x76146) ?x74666)))
 (= (- ?x77592 ?x74669) 0.0)))))))))))))
(assert
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x40318 (* ?x74630 l_0_12_242)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x51856 (* ?x62488 l_0_12_241)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x71972 (* ?x71971 l_0_12_152)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x71969 (* ?x71968 l_0_12_151)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x71962 (* ?x71837 l_0_12_93)))
 (let ((?x77602 (- (- (- (+ (* (* 2.0 l_0_12_106) l_0_12_92) ?x71962) ?x71969) ?x71972) ?x51856)))
 (= (- ?x77602 ?x40318) 0.0)))))))))))))
(assert
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74693 (* ?x74630 l_0_12_248)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74691 (* ?x62488 l_0_12_247)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76168 (* ?x71971 l_0_12_158)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76166 (* ?x71968 l_0_12_157)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76164 (* ?x73736 l_0_12_93)))
 (let ((?x77618 (- (- (- (+ (* (* 2.0 l_0_12_112) l_0_12_92) ?x76164) ?x76166) ?x76168) ?x74691)))
 (= (- ?x77618 ?x74693) 0.0)))))))))))))
(assert
 (let ((?x74630 (* 2.0 l_0_12_228)))
 (let ((?x74730 (* ?x74630 l_0_12_263)))
 (let ((?x62488 (* 2.0 l_0_12_227)))
 (let ((?x74728 (* ?x62488 l_0_12_262)))
 (let ((?x71971 (* 2.0 l_0_12_138)))
 (let ((?x76214 (* ?x71971 l_0_12_173)))
 (let ((?x71968 (* 2.0 l_0_12_137)))
 (let ((?x76212 (* ?x71968 l_0_12_172)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x76210 (* ?x51005 l_0_12_93)))
 (let ((?x53907 (- (- (- (+ (* (* 2.0 l_0_12_127) l_0_12_92) ?x76210) ?x76212) ?x76214) ?x74728)))
 (= (- ?x53907 ?x74730) 0.0)))))))))))))
(assert
 (let ((?x73926 (* l_0_12_99 l_0_12_99)))
 (let ((?x73924 (* l_0_12_98 l_0_12_98)))
 (let ((?x73922 (* l_0_12_97 l_0_12_97)))
 (let ((?x74925 (* l_0_12_235 l_0_12_235)))
 (let ((?x74923 (* l_0_12_234 l_0_12_234)))
 (let ((?x74921 (* l_0_12_233 l_0_12_233)))
 (let ((?x74919 (* l_0_12_232 l_0_12_232)))
 (let ((?x73913 (* l_0_12_145 l_0_12_145)))
 (let ((?x73911 (* l_0_12_144 l_0_12_144)))
 (let ((?x73909 (* l_0_12_143 l_0_12_143)))
 (let ((?x66587 (- (- (* l_0_12_100 l_0_12_100) (* l_0_12_142 l_0_12_142)) ?x73909)))
 (let ((?x77631 (+ (- (- (- (- (- (- ?x66587 ?x73911) ?x73913) ?x74919) ?x74921) ?x74923) ?x74925) ?x73922)))
 (= (+ (+ ?x77631 ?x73924) ?x73926) 0.0))))))))))))))
(assert
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x74966 (* ?x73718 l_0_12_239)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x74964 (* ?x73715 l_0_12_238)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x74962 (* ?x73712 l_0_12_237)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x74960 (* ?x73709 l_0_12_236)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x73968 (* ?x72076 l_0_12_149)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x73966 (* ?x72073 l_0_12_148)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x73964 (* ?x72070 l_0_12_147)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x73962 (* ?x72067 l_0_12_146)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x73955 (* ?x72132 l_0_12_99)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x73953 (* ?x72120 l_0_12_98)))
 (let ((?x38739 (* 2.0 l_0_12_101)))
 (let ((?x38745 (* ?x38739 l_0_12_97)))
 (let ((?x66640 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_104) ?x38745) ?x73953) ?x73955) ?x73962)))
 (let ((?x66589 (- (- (- (- (- (- (- ?x66640 ?x73964) ?x73966) ?x73968) ?x74960) ?x74962) ?x74964) ?x74966)))
 (= ?x66589 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x74980 (* ?x73718 l_0_12_244)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x62790 (* ?x73715 l_0_12_243)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x62811 (* ?x73712 l_0_12_242)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x62820 (* ?x73709 l_0_12_241)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x72077 (* ?x72076 l_0_12_154)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x72074 (* ?x72073 l_0_12_153)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x72071 (* ?x72070 l_0_12_152)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x72068 (* ?x72067 l_0_12_151)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72065 (* ?x71840 l_0_12_99)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72063 (* ?x71837 l_0_12_98)))
 (let ((?x71674 (* 2.0 l_0_12_106)))
 (let ((?x72053 (* ?x71674 l_0_12_97)))
 (let ((?x43342 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_109) ?x72053) ?x72063) ?x72065) ?x72068)))
 (let ((?x77657 (- (- (- (- (- (- (- ?x43342 ?x72071) ?x72074) ?x72077) ?x62820) ?x62811) ?x62790) ?x74980)))
 (= ?x77657 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x75008 (* ?x73718 l_0_12_257)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x75006 (* ?x73715 l_0_12_256)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x75004 (* ?x73712 l_0_12_255)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x75002 (* ?x73709 l_0_12_254)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74036 (* ?x72076 l_0_12_167)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74034 (* ?x72073 l_0_12_166)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x74032 (* ?x72070 l_0_12_165)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x74030 (* ?x72067 l_0_12_164)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x74028 (* ?x74027 l_0_12_99)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x61546 (* ?x50938 l_0_12_98)))
 (let ((?x50942 (* 2.0 l_0_12_119)))
 (let ((?x61547 (* ?x50942 l_0_12_97)))
 (let ((?x66365 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_122) ?x61547) ?x61546) ?x74028) ?x74030)))
 (let ((?x77663 (- (- (- (- (- (- (- ?x66365 ?x74032) ?x74034) ?x74036) ?x75002) ?x75004) ?x75006) ?x75008)))
 (= ?x77663 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73718 (* 2.0 l_0_12_235)))
 (let ((?x62869 (* ?x73718 l_0_12_265)))
 (let ((?x73715 (* 2.0 l_0_12_234)))
 (let ((?x28424 (* ?x73715 l_0_12_264)))
 (let ((?x73712 (* 2.0 l_0_12_233)))
 (let ((?x41171 (* ?x73712 l_0_12_263)))
 (let ((?x73709 (* 2.0 l_0_12_232)))
 (let ((?x62873 (* ?x73709 l_0_12_262)))
 (let ((?x72076 (* 2.0 l_0_12_145)))
 (let ((?x74077 (* ?x72076 l_0_12_175)))
 (let ((?x72073 (* 2.0 l_0_12_144)))
 (let ((?x74075 (* ?x72073 l_0_12_174)))
 (let ((?x72070 (* 2.0 l_0_12_143)))
 (let ((?x50987 (* ?x72070 l_0_12_173)))
 (let ((?x72067 (* 2.0 l_0_12_142)))
 (let ((?x51008 (* ?x72067 l_0_12_172)))
 (let ((?x61549 (* 2.0 l_0_12_129)))
 (let ((?x51010 (* ?x61549 l_0_12_99)))
 (let ((?x51005 (* 2.0 l_0_12_128)))
 (let ((?x61540 (* ?x51005 l_0_12_98)))
 (let ((?x50986 (* 2.0 l_0_12_127)))
 (let ((?x51003 (* ?x50986 l_0_12_97)))
 (let ((?x54130 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_130) ?x51003) ?x61540) ?x51010) ?x51008)))
 (let ((?x77671 (- (- (- (- (- (- (- ?x54130 ?x50987) ?x74075) ?x74077) ?x62873) ?x41171) ?x28424) ?x62869)))
 (= ?x77671 0.0))))))))))))))))))))))))))
(assert
 (let ((?x75077 (* l_0_12_240 l_0_12_240)))
 (let ((?x75075 (* l_0_12_239 l_0_12_239)))
 (let ((?x75073 (* l_0_12_238 l_0_12_238)))
 (let ((?x75071 (* l_0_12_237 l_0_12_237)))
 (let ((?x75069 (* l_0_12_236 l_0_12_236)))
 (let ((?x76278 (* l_0_12_150 l_0_12_150)))
 (let ((?x76276 (* l_0_12_149 l_0_12_149)))
 (let ((?x76274 (* l_0_12_148 l_0_12_148)))
 (let ((?x76272 (* l_0_12_147 l_0_12_147)))
 (let ((?x76270 (* l_0_12_146 l_0_12_146)))
 (let ((?x65142 (* l_0_12_105 l_0_12_105)))
 (let ((?x16278 (* l_0_12_104 l_0_12_104)))
 (let ((?x63770 (* l_0_12_103 l_0_12_103)))
 (let ((?x54321 (+ (+ (* l_0_12_101 l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x63770)))
 (let ((?x77674 (- (- (- (- (- (+ (+ ?x54321 ?x16278) ?x65142) ?x76270) ?x76272) ?x76274) ?x76276) ?x76278)))
 (= (- (- (- (- (- ?x77674 ?x75069) ?x75071) ?x75073) ?x75075) ?x75077) 0.0)))))))))))))))))
(assert
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75144 (* ?x75143 l_0_12_245)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75141 (* ?x75140 l_0_12_244)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75138 (* ?x75137 l_0_12_243)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75135 (* ?x75134 l_0_12_242)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75132 (* ?x75131 l_0_12_241)))
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x72160 (* ?x72159 l_0_12_155)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x72157 (* ?x72156 l_0_12_154)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x72154 (* ?x72153 l_0_12_153)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x72151 (* ?x72150 l_0_12_152)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x72148 (* ?x72147 l_0_12_151)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x72139 (* ?x72138 l_0_12_110)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x72136 (* ?x72135 l_0_12_109)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x72133 (* ?x72132 l_0_12_108)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x72130 (* ?x72120 l_0_12_107)))
 (let ((?x54334 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_106) ?x72130) ?x72133) ?x72136) ?x72139)))
 (let ((?x77689 (- (- (- (- (- (- (- ?x54334 ?x72148) ?x72151) ?x72154) ?x72157) ?x72160) ?x75132) ?x75135)))
 (= (- (- (- ?x77689 ?x75138) ?x75141) ?x75144) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75196 (* ?x75143 l_0_12_251)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75194 (* ?x75140 l_0_12_250)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75192 (* ?x75137 l_0_12_249)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75190 (* ?x75134 l_0_12_248)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75188 (* ?x75131 l_0_12_247)))
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76324 (* ?x72159 l_0_12_161)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76322 (* ?x72156 l_0_12_160)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76320 (* ?x72153 l_0_12_159)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76318 (* ?x72150 l_0_12_158)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76316 (* ?x72147 l_0_12_157)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76314 (* ?x72138 l_0_12_116)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76312 (* ?x72135 l_0_12_115)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76310 (* ?x72132 l_0_12_114)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76308 (* ?x72120 l_0_12_113)))
 (let ((?x77702 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_112) ?x76308) ?x76310) ?x76312) ?x76314)))
 (let ((?x77709 (- (- (- (- (- (- (- ?x77702 ?x76316) ?x76318) ?x76320) ?x76322) ?x76324) ?x75188) ?x75190)))
 (= (- (- (- ?x77709 ?x75192) ?x75194) ?x75196) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75275 (* ?x75143 l_0_12_258)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75273 (* ?x75140 l_0_12_257)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75271 (* ?x75137 l_0_12_256)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75269 (* ?x75134 l_0_12_255)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75267 (* ?x75131 l_0_12_254)))
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76361 (* ?x72159 l_0_12_168)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76359 (* ?x72156 l_0_12_167)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76357 (* ?x72153 l_0_12_166)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76355 (* ?x72150 l_0_12_165)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76353 (* ?x72147 l_0_12_164)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76351 (* ?x72138 l_0_12_123)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x65264 (* ?x72135 l_0_12_122)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x65233 (* ?x72132 l_0_12_121)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76341 (* ?x72120 l_0_12_120)))
 (let ((?x66885 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_119) ?x76341) ?x65233) ?x65264) ?x76351)))
 (let ((?x77725 (- (- (- (- (- (- (- ?x66885 ?x76353) ?x76355) ?x76357) ?x76359) ?x76361) ?x75267) ?x75269)))
 (= (- (- (- ?x77725 ?x75271) ?x75273) ?x75275) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75143 (* 2.0 l_0_12_240)))
 (let ((?x75369 (* ?x75143 l_0_12_266)))
 (let ((?x75140 (* 2.0 l_0_12_239)))
 (let ((?x75367 (* ?x75140 l_0_12_265)))
 (let ((?x75137 (* 2.0 l_0_12_238)))
 (let ((?x75365 (* ?x75137 l_0_12_264)))
 (let ((?x75134 (* 2.0 l_0_12_237)))
 (let ((?x75363 (* ?x75134 l_0_12_263)))
 (let ((?x75131 (* 2.0 l_0_12_236)))
 (let ((?x75361 (* ?x75131 l_0_12_262)))
 (let ((?x72159 (* 2.0 l_0_12_150)))
 (let ((?x76406 (* ?x72159 l_0_12_176)))
 (let ((?x72156 (* 2.0 l_0_12_149)))
 (let ((?x76404 (* ?x72156 l_0_12_175)))
 (let ((?x72153 (* 2.0 l_0_12_148)))
 (let ((?x76402 (* ?x72153 l_0_12_174)))
 (let ((?x72150 (* 2.0 l_0_12_147)))
 (let ((?x76400 (* ?x72150 l_0_12_173)))
 (let ((?x72147 (* 2.0 l_0_12_146)))
 (let ((?x76398 (* ?x72147 l_0_12_172)))
 (let ((?x72138 (* 2.0 l_0_12_105)))
 (let ((?x76396 (* ?x72138 l_0_12_131)))
 (let ((?x72135 (* 2.0 l_0_12_104)))
 (let ((?x76394 (* ?x72135 l_0_12_130)))
 (let ((?x72132 (* 2.0 l_0_12_103)))
 (let ((?x76392 (* ?x72132 l_0_12_129)))
 (let ((?x72120 (* 2.0 l_0_12_102)))
 (let ((?x76390 (* ?x72120 l_0_12_128)))
 (let ((?x77746 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_127) ?x76390) ?x76392) ?x76394) ?x76396)))
 (let ((?x77753 (- (- (- (- (- (- (- ?x77746 ?x76398) ?x76400) ?x76402) ?x76404) ?x76406) ?x75361) ?x75363)))
 (= (- (- (- ?x77753 ?x75365) ?x75367) ?x75369) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75461 (* l_0_12_246 l_0_12_246)))
 (let ((?x75459 (* l_0_12_245 l_0_12_245)))
 (let ((?x75457 (* l_0_12_244 l_0_12_244)))
 (let ((?x75455 (* l_0_12_243 l_0_12_243)))
 (let ((?x75453 (* l_0_12_242 l_0_12_242)))
 (let ((?x75451 (* l_0_12_241 l_0_12_241)))
 (let ((?x72233 (* l_0_12_156 l_0_12_156)))
 (let ((?x72231 (* l_0_12_155 l_0_12_155)))
 (let ((?x72229 (* l_0_12_154 l_0_12_154)))
 (let ((?x72227 (* l_0_12_153 l_0_12_153)))
 (let ((?x72225 (* l_0_12_152 l_0_12_152)))
 (let ((?x72223 (* l_0_12_151 l_0_12_151)))
 (let ((?x72221 (* l_0_12_111 l_0_12_111)))
 (let ((?x72219 (* l_0_12_110 l_0_12_110)))
 (let ((?x72207 (* l_0_12_109 l_0_12_109)))
 (let ((?x72203 (* l_0_12_108 l_0_12_108)))
 (let ((?x67042 (+ (+ (* l_0_12_106 l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x72203)))
 (let ((?x54611 (- (- (- (- (+ (+ (+ ?x67042 ?x72207) ?x72219) ?x72221) ?x72223) ?x72225) ?x72227) ?x72229)))
 (let ((?x77767 (- (- (- (- (- (- (- ?x54611 ?x72231) ?x72233) ?x75451) ?x75453) ?x75455) ?x75457) ?x75459)))
 (= (- ?x77767 ?x75461) 0.0)))))))))))))))))))))
(assert
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x75500 (* ?x71733 l_0_12_252)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x75498 (* ?x71730 l_0_12_251)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x75496 (* ?x71727 l_0_12_250)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x75494 (* ?x71724 l_0_12_249)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x75492 (* ?x71721 l_0_12_248)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x75490 (* ?x71718 l_0_12_247)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72299 (* ?x71867 l_0_12_162)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72297 (* ?x71864 l_0_12_161)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72295 (* ?x71861 l_0_12_160)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72293 (* ?x71858 l_0_12_159)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72291 (* ?x71855 l_0_12_158)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72289 (* ?x71852 l_0_12_157)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72287 (* ?x71849 l_0_12_117)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72285 (* ?x71846 l_0_12_116)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72283 (* ?x71843 l_0_12_115)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72281 (* ?x71840 l_0_12_114)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72269 (* ?x71837 l_0_12_113)))
 (let ((?x77777 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_112) ?x72269) ?x72281) ?x72283) ?x72285)))
 (let ((?x77784 (- (- (- (- (- (- (+ ?x77777 ?x72287) ?x72289) ?x72291) ?x72293) ?x72295) ?x72297) ?x72299)))
 (= (- (- (- (- (- (- ?x77784 ?x75490) ?x75492) ?x75494) ?x75496) ?x75498) ?x75500) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71733 (* 2.0 l_0_12_246)))
 (let ((?x75551 (* ?x71733 l_0_12_267)))
 (let ((?x71730 (* 2.0 l_0_12_245)))
 (let ((?x75549 (* ?x71730 l_0_12_266)))
 (let ((?x71727 (* 2.0 l_0_12_244)))
 (let ((?x75547 (* ?x71727 l_0_12_265)))
 (let ((?x71724 (* 2.0 l_0_12_243)))
 (let ((?x75545 (* ?x71724 l_0_12_264)))
 (let ((?x71721 (* 2.0 l_0_12_242)))
 (let ((?x75543 (* ?x71721 l_0_12_263)))
 (let ((?x71718 (* 2.0 l_0_12_241)))
 (let ((?x75541 (* ?x71718 l_0_12_262)))
 (let ((?x71867 (* 2.0 l_0_12_156)))
 (let ((?x72402 (* ?x71867 l_0_12_177)))
 (let ((?x71864 (* 2.0 l_0_12_155)))
 (let ((?x72400 (* ?x71864 l_0_12_176)))
 (let ((?x71861 (* 2.0 l_0_12_154)))
 (let ((?x72398 (* ?x71861 l_0_12_175)))
 (let ((?x71858 (* 2.0 l_0_12_153)))
 (let ((?x72396 (* ?x71858 l_0_12_174)))
 (let ((?x71855 (* 2.0 l_0_12_152)))
 (let ((?x72394 (* ?x71855 l_0_12_173)))
 (let ((?x71852 (* 2.0 l_0_12_151)))
 (let ((?x72392 (* ?x71852 l_0_12_172)))
 (let ((?x71849 (* 2.0 l_0_12_111)))
 (let ((?x72390 (* ?x71849 l_0_12_132)))
 (let ((?x71846 (* 2.0 l_0_12_110)))
 (let ((?x72388 (* ?x71846 l_0_12_131)))
 (let ((?x71843 (* 2.0 l_0_12_109)))
 (let ((?x72386 (* ?x71843 l_0_12_130)))
 (let ((?x71840 (* 2.0 l_0_12_108)))
 (let ((?x72384 (* ?x71840 l_0_12_129)))
 (let ((?x71837 (* 2.0 l_0_12_107)))
 (let ((?x72382 (* ?x71837 l_0_12_128)))
 (let ((?x77798 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_127) ?x72382) ?x72384) ?x72386) ?x72388)))
 (let ((?x77805 (- (- (- (- (- (- (+ ?x77798 ?x72390) ?x72392) ?x72394) ?x72396) ?x72398) ?x72400) ?x72402)))
 (= (- (- (- (- (- (- ?x77805 ?x75541) ?x75543) ?x75545) ?x75547) ?x75549) ?x75551) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x75606 (* l_0_12_253 l_0_12_253)))
 (let ((?x75604 (* l_0_12_252 l_0_12_252)))
 (let ((?x75602 (* l_0_12_251 l_0_12_251)))
 (let ((?x75600 (* l_0_12_250 l_0_12_250)))
 (let ((?x75597 (* l_0_12_249 l_0_12_249)))
 (let ((?x75595 (* l_0_12_248 l_0_12_248)))
 (let ((?x75593 (* l_0_12_247 l_0_12_247)))
 (let ((?x76473 (* l_0_12_163 l_0_12_163)))
 (let ((?x76471 (* l_0_12_162 l_0_12_162)))
 (let ((?x76469 (* l_0_12_161 l_0_12_161)))
 (let ((?x76467 (* l_0_12_160 l_0_12_160)))
 (let ((?x76465 (* l_0_12_159 l_0_12_159)))
 (let ((?x76463 (* l_0_12_158 l_0_12_158)))
 (let ((?x76461 (* l_0_12_157 l_0_12_157)))
 (let ((?x76459 (* l_0_12_118 l_0_12_118)))
 (let ((?x76457 (* l_0_12_117 l_0_12_117)))
 (let ((?x76455 (* l_0_12_116 l_0_12_116)))
 (let ((?x76453 (* l_0_12_115 l_0_12_115)))
 (let ((?x76451 (* l_0_12_114 l_0_12_114)))
 (let ((?x54721 (+ (+ (* l_0_12_112 l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76451)))
 (let ((?x54892 (- (- (- (+ (+ (+ (+ ?x54721 ?x76453) ?x76455) ?x76457) ?x76459) ?x76461) ?x76463) ?x76465)))
 (let ((?x77820 (- (- (- (- (- (- (- ?x54892 ?x76467) ?x76469) ?x76471) ?x76473) ?x75593) ?x75595) ?x75597)))
 (= (- (- (- (- ?x77820 ?x75600) ?x75602) ?x75604) ?x75606) 0.0))))))))))))))))))))))))
(assert
 (let ((?x75652 (* 2.0 l_0_12_253)))
 (let ((?x75653 (* ?x75652 l_0_12_260)))
 (let ((?x75649 (* 2.0 l_0_12_252)))
 (let ((?x75650 (* ?x75649 l_0_12_259)))
 (let ((?x75646 (* 2.0 l_0_12_251)))
 (let ((?x75647 (* ?x75646 l_0_12_258)))
 (let ((?x75643 (* 2.0 l_0_12_250)))
 (let ((?x75644 (* ?x75643 l_0_12_257)))
 (let ((?x75639 (* 2.0 l_0_12_249)))
 (let ((?x75640 (* ?x75639 l_0_12_256)))
 (let ((?x75636 (* 2.0 l_0_12_248)))
 (let ((?x75637 (* ?x75636 l_0_12_255)))
 (let ((?x75633 (* 2.0 l_0_12_247)))
 (let ((?x75634 (* ?x75633 l_0_12_254)))
 (let ((?x75995 (* 2.0 l_0_12_163)))
 (let ((?x76527 (* ?x75995 l_0_12_170)))
 (let ((?x75992 (* 2.0 l_0_12_162)))
 (let ((?x76525 (* ?x75992 l_0_12_169)))
 (let ((?x75989 (* 2.0 l_0_12_161)))
 (let ((?x76523 (* ?x75989 l_0_12_168)))
 (let ((?x75986 (* 2.0 l_0_12_160)))
 (let ((?x76521 (* ?x75986 l_0_12_167)))
 (let ((?x75983 (* 2.0 l_0_12_159)))
 (let ((?x76519 (* ?x75983 l_0_12_166)))
 (let ((?x75980 (* 2.0 l_0_12_158)))
 (let ((?x76517 (* ?x75980 l_0_12_165)))
 (let ((?x75977 (* 2.0 l_0_12_157)))
 (let ((?x76515 (* ?x75977 l_0_12_164)))
 (let ((?x75972 (* 2.0 l_0_12_118)))
 (let ((?x76513 (* ?x75972 l_0_12_125)))
 (let ((?x75969 (* 2.0 l_0_12_117)))
 (let ((?x76511 (* ?x75969 l_0_12_124)))
 (let ((?x75966 (* 2.0 l_0_12_116)))
 (let ((?x76509 (* ?x75966 l_0_12_123)))
 (let ((?x75963 (* 2.0 l_0_12_115)))
 (let ((?x76507 (* ?x75963 l_0_12_122)))
 (let ((?x73739 (* 2.0 l_0_12_114)))
 (let ((?x76505 (* ?x73739 l_0_12_121)))
 (let ((?x73736 (* 2.0 l_0_12_113)))
 (let ((?x76503 (* ?x73736 l_0_12_120)))
 (let ((?x77864 (+ (+ (+ (+ (* (* 2.0 l_0_12_112) l_0_12_119) ?x76503) ?x76505) ?x76507) ?x76509)))
 (let ((?x77871 (- (- (- (- (- (+ (+ ?x77864 ?x76511) ?x76513) ?x76515) ?x76517) ?x76519) ?x76521) ?x76523)))
 (let ((?x77878 (- (- (- (- (- (- (- ?x77871 ?x76525) ?x76527) ?x75634) ?x75637) ?x75640) ?x75644) ?x75647)))
 (= (- (- ?x77878 ?x75650) ?x75653) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x75793 (* l_0_12_261 l_0_12_261)))
 (let ((?x75791 (* l_0_12_260 l_0_12_260)))
 (let ((?x75789 (* l_0_12_259 l_0_12_259)))
 (let ((?x75787 (* l_0_12_258 l_0_12_258)))
 (let ((?x75785 (* l_0_12_257 l_0_12_257)))
 (let ((?x75783 (* l_0_12_256 l_0_12_256)))
 (let ((?x75781 (* l_0_12_255 l_0_12_255)))
 (let ((?x75780 (* l_0_12_254 l_0_12_254)))
 (let ((?x76588 (* l_0_12_171 l_0_12_171)))
 (let ((?x76586 (* l_0_12_170 l_0_12_170)))
 (let ((?x76584 (* l_0_12_169 l_0_12_169)))
 (let ((?x76582 (* l_0_12_168 l_0_12_168)))
 (let ((?x76580 (* l_0_12_167 l_0_12_167)))
 (let ((?x76578 (* l_0_12_166 l_0_12_166)))
 (let ((?x76576 (* l_0_12_165 l_0_12_165)))
 (let ((?x76574 (* l_0_12_164 l_0_12_164)))
 (let ((?x76572 (* l_0_12_126 l_0_12_126)))
 (let ((?x76570 (* l_0_12_125 l_0_12_125)))
 (let ((?x76568 (* l_0_12_124 l_0_12_124)))
 (let ((?x76566 (* l_0_12_123 l_0_12_123)))
 (let ((?x76564 (* l_0_12_122 l_0_12_122)))
 (let ((?x76562 (* l_0_12_121 l_0_12_121)))
 (let ((?x77927 (+ (+ (* l_0_12_119 l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76562)))
 (let ((?x77934 (- (- (+ (+ (+ (+ (+ ?x77927 ?x76564) ?x76566) ?x76568) ?x76570) ?x76572) ?x76574) ?x76576)))
 (let ((?x77941 (- (- (- (- (- (- (- ?x77934 ?x76578) ?x76580) ?x76582) ?x76584) ?x76586) ?x76588) ?x75780)))
 (let ((?x77948 (- (- (- (- (- (- (- ?x77941 ?x75781) ?x75783) ?x75785) ?x75787) ?x75789) ?x75791) ?x75793)))
 (= ?x77948 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x75843 (* (* 2.0 l_0_12_261) l_0_12_269)))
 (let ((?x75840 (* (* 2.0 l_0_12_260) l_0_12_268)))
 (let ((?x75837 (* (* 2.0 l_0_12_259) l_0_12_267)))
 (let ((?x75834 (* (* 2.0 l_0_12_258) l_0_12_266)))
 (let ((?x75831 (* (* 2.0 l_0_12_257) l_0_12_265)))
 (let ((?x75828 (* (* 2.0 l_0_12_256) l_0_12_264)))
 (let ((?x75825 (* (* 2.0 l_0_12_255) l_0_12_263)))
 (let ((?x64517 (* (* 2.0 l_0_12_254) l_0_12_262)))
 (let ((?x76667 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76664 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76661 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76658 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76655 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76652 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76649 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76646 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76643 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76640 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76637 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76634 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76631 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x74027 (* 2.0 l_0_12_121)))
 (let ((?x76628 (* ?x74027 l_0_12_129)))
 (let ((?x50938 (* 2.0 l_0_12_120)))
 (let ((?x76626 (* ?x50938 l_0_12_128)))
 (let ((?x77996 (+ (+ (+ (+ (* (* 2.0 l_0_12_119) l_0_12_127) ?x76626) ?x76628) ?x76631) ?x76634)))
 (let ((?x78003 (- (- (- (- (+ (+ (+ ?x77996 ?x76637) ?x76640) ?x76643) ?x76646) ?x76649) ?x76652) ?x76655)))
 (let ((?x78010 (- (- (- (- (- (- (- ?x78003 ?x76658) ?x76661) ?x76664) ?x76667) ?x64517) ?x75825) ?x75828)))
 (= (- (- (- (- (- ?x78010 ?x75831) ?x75834) ?x75837) ?x75840) ?x75843) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x75905 (* l_0_12_270 l_0_12_270)))
 (let ((?x75903 (* l_0_12_269 l_0_12_269)))
 (let ((?x75901 (* l_0_12_268 l_0_12_268)))
 (let ((?x75899 (* l_0_12_267 l_0_12_267)))
 (let ((?x75897 (* l_0_12_266 l_0_12_266)))
 (let ((?x75895 (* l_0_12_265 l_0_12_265)))
 (let ((?x75893 (* l_0_12_264 l_0_12_264)))
 (let ((?x75891 (* l_0_12_263 l_0_12_263)))
 (let ((?x64566 (* l_0_12_262 l_0_12_262)))
 (let ((?x76755 (* l_0_12_180 l_0_12_180)))
 (let ((?x76753 (* l_0_12_179 l_0_12_179)))
 (let ((?x76751 (* l_0_12_178 l_0_12_178)))
 (let ((?x76749 (* l_0_12_177 l_0_12_177)))
 (let ((?x76747 (* l_0_12_176 l_0_12_176)))
 (let ((?x76745 (* l_0_12_175 l_0_12_175)))
 (let ((?x76743 (* l_0_12_174 l_0_12_174)))
 (let ((?x76741 (* l_0_12_173 l_0_12_173)))
 (let ((?x76739 (* l_0_12_172 l_0_12_172)))
 (let ((?x76737 (* l_0_12_135 l_0_12_135)))
 (let ((?x76735 (* l_0_12_134 l_0_12_134)))
 (let ((?x76733 (* l_0_12_133 l_0_12_133)))
 (let ((?x76731 (* l_0_12_132 l_0_12_132)))
 (let ((?x76718 (* l_0_12_131 l_0_12_131)))
 (let ((?x76715 (* l_0_12_130 l_0_12_130)))
 (let ((?x76711 (* l_0_12_129 l_0_12_129)))
 (let ((?x42377 (+ (+ (* l_0_12_127 l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76711)))
 (let ((?x78037 (- (+ (+ (+ (+ (+ (+ ?x42377 ?x76715) ?x76718) ?x76731) ?x76733) ?x76735) ?x76737) ?x76739)))
 (let ((?x78044 (- (- (- (- (- (- (- ?x78037 ?x76741) ?x76743) ?x76745) ?x76747) ?x76749) ?x76751) ?x76753)))
 (let ((?x78051 (- (- (- (- (- (- (- ?x78044 ?x76755) ?x64566) ?x75891) ?x75893) ?x75895) ?x75897) ?x75899)))
 (= (- (- (- ?x78051 ?x75901) ?x75903) ?x75905) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x68183 (- (* (* (- 2.0) l_0_12_181) l_0_12_182) (* (* 2.0 l_0_12_271) l_0_12_272))))
 (let ((?x78072 (- (- ?x68183 (* (* 2.0 l_0_12_316) l_0_12_317)) (* (* 2.0 l_0_12_361) l_0_12_362))))
 (= (- ?x78072 (* (* 2.0 l_0_12_406) l_0_12_407)) 0.0))))
(assert
 (let ((?x78095 (- (* (* (- 2.0) l_0_12_181) l_0_12_187) (* (* 2.0 l_0_12_271) l_0_12_277))))
 (let ((?x78099 (- (- ?x78095 (* (* 2.0 l_0_12_316) l_0_12_322)) (* (* 2.0 l_0_12_361) l_0_12_367))))
 (= (- ?x78099 (* (* 2.0 l_0_12_406) l_0_12_412)) 0.0))))
(assert
 (let ((?x78122 (- (* (* (- 2.0) l_0_12_181) l_0_12_196) (* (* 2.0 l_0_12_271) l_0_12_286))))
 (let ((?x78126 (- (- ?x78122 (* (* 2.0 l_0_12_316) l_0_12_331)) (* (* 2.0 l_0_12_361) l_0_12_376))))
 (= (- ?x78126 (* (* 2.0 l_0_12_406) l_0_12_421)) 0.0))))
(assert
 (let ((?x78152 (- (* (* (- 2.0) l_0_12_181) l_0_12_202) (* (* 2.0 l_0_12_271) l_0_12_292))))
 (let ((?x78156 (- (- ?x78152 (* (* 2.0 l_0_12_316) l_0_12_337)) (* (* 2.0 l_0_12_361) l_0_12_382))))
 (= (- ?x78156 (* (* 2.0 l_0_12_406) l_0_12_427)) 0.0))))
(assert
 (let ((?x68253 (- (* (* (- 2.0) l_0_12_181) l_0_12_217) (* (* 2.0 l_0_12_271) l_0_12_307))))
 (let ((?x68279 (- (- ?x68253 (* (* 2.0 l_0_12_316) l_0_12_352)) (* (* 2.0 l_0_12_361) l_0_12_397))))
 (= (- ?x68279 (* (* 2.0 l_0_12_406) l_0_12_442)) 0.0))))
(assert
 (let ((?x78205 (* l_0_12_408 l_0_12_408)))
 (let ((?x78203 (* l_0_12_407 l_0_12_407)))
 (let ((?x78201 (* l_0_12_363 l_0_12_363)))
 (let ((?x78199 (* l_0_12_362 l_0_12_362)))
 (let ((?x78197 (* l_0_12_318 l_0_12_318)))
 (let ((?x78195 (* l_0_12_317 l_0_12_317)))
 (let ((?x78193 (* l_0_12_273 l_0_12_273)))
 (let ((?x78191 (* l_0_12_272 l_0_12_272)))
 (let ((?x78190 (- (* (* (- 1.0) l_0_12_182) l_0_12_182) (* (* 1.0 l_0_12_183) l_0_12_183))))
 (let ((?x78204 (- (- (- (- (- (- (- ?x78190 ?x78191) ?x78193) ?x78195) ?x78197) ?x78199) ?x78201) ?x78203)))
 (= (- ?x78204 ?x78205) 0.0))))))))))))
(assert
 (let ((?x78226 (- (* (* (- 2.0) l_0_12_182) l_0_12_187) (* (* 2.0 l_0_12_183) l_0_12_188))))
 (let ((?x78230 (- (- ?x78226 (* (* 2.0 l_0_12_272) l_0_12_277)) (* (* 2.0 l_0_12_273) l_0_12_278))))
 (let ((?x78234 (- (- ?x78230 (* (* 2.0 l_0_12_317) l_0_12_322)) (* (* 2.0 l_0_12_318) l_0_12_323))))
 (let ((?x78238 (- (- ?x78234 (* (* 2.0 l_0_12_362) l_0_12_367)) (* (* 2.0 l_0_12_363) l_0_12_368))))
 (let ((?x78242 (- (- ?x78238 (* (* 2.0 l_0_12_407) l_0_12_412)) (* (* 2.0 l_0_12_408) l_0_12_413))))
 (= ?x78242 0.0)))))))
(assert
 (let ((?x68408 (- (* (* (- 2.0) l_0_12_182) l_0_12_196) (* (* 2.0 l_0_12_183) l_0_12_197))))
 (let ((?x78261 (- (- ?x68408 (* (* 2.0 l_0_12_272) l_0_12_286)) (* (* 2.0 l_0_12_273) l_0_12_287))))
 (let ((?x78265 (- (- ?x78261 (* (* 2.0 l_0_12_317) l_0_12_331)) (* (* 2.0 l_0_12_318) l_0_12_332))))
 (let ((?x78269 (- (- ?x78265 (* (* 2.0 l_0_12_362) l_0_12_376)) (* (* 2.0 l_0_12_363) l_0_12_377))))
 (let ((?x78273 (- (- ?x78269 (* (* 2.0 l_0_12_407) l_0_12_421)) (* (* 2.0 l_0_12_408) l_0_12_422))))
 (= ?x78273 0.0)))))))
(assert
 (let ((?x78312 (- (* (* (- 2.0) l_0_12_182) l_0_12_202) (* (* 2.0 l_0_12_183) l_0_12_203))))
 (let ((?x78316 (- (- ?x78312 (* (* 2.0 l_0_12_272) l_0_12_292)) (* (* 2.0 l_0_12_273) l_0_12_293))))
 (let ((?x78320 (- (- ?x78316 (* (* 2.0 l_0_12_317) l_0_12_337)) (* (* 2.0 l_0_12_318) l_0_12_338))))
 (let ((?x78324 (- (- ?x78320 (* (* 2.0 l_0_12_362) l_0_12_382)) (* (* 2.0 l_0_12_363) l_0_12_383))))
 (let ((?x78328 (- (- ?x78324 (* (* 2.0 l_0_12_407) l_0_12_427)) (* (* 2.0 l_0_12_408) l_0_12_428))))
 (= ?x78328 0.0)))))))
(assert
 (let ((?x56520 (- (* (* (- 2.0) l_0_12_182) l_0_12_217) (* (* 2.0 l_0_12_183) l_0_12_218))))
 (let ((?x68484 (- (- ?x56520 (* (* 2.0 l_0_12_272) l_0_12_307)) (* (* 2.0 l_0_12_273) l_0_12_308))))
 (let ((?x68521 (- (- ?x68484 (* (* 2.0 l_0_12_317) l_0_12_352)) (* (* 2.0 l_0_12_318) l_0_12_353))))
 (let ((?x68562 (- (- ?x68521 (* (* 2.0 l_0_12_362) l_0_12_397)) (* (* 2.0 l_0_12_363) l_0_12_398))))
 (let ((?x68566 (- (- ?x68562 (* (* 2.0 l_0_12_407) l_0_12_442)) (* (* 2.0 l_0_12_408) l_0_12_443))))
 (= ?x68566 0.0)))))))
(assert
 (let ((?x78439 (* l_0_12_415 l_0_12_415)))
 (let ((?x78437 (* l_0_12_414 l_0_12_414)))
 (let ((?x78435 (* l_0_12_413 l_0_12_413)))
 (let ((?x78433 (* l_0_12_412 l_0_12_412)))
 (let ((?x78431 (* l_0_12_370 l_0_12_370)))
 (let ((?x78429 (* l_0_12_369 l_0_12_369)))
 (let ((?x78427 (* l_0_12_368 l_0_12_368)))
 (let ((?x78425 (* l_0_12_367 l_0_12_367)))
 (let ((?x78423 (* l_0_12_325 l_0_12_325)))
 (let ((?x78421 (* l_0_12_324 l_0_12_324)))
 (let ((?x78419 (* l_0_12_323 l_0_12_323)))
 (let ((?x78417 (* l_0_12_322 l_0_12_322)))
 (let ((?x78415 (* l_0_12_280 l_0_12_280)))
 (let ((?x78413 (* l_0_12_279 l_0_12_279)))
 (let ((?x78411 (* l_0_12_278 l_0_12_278)))
 (let ((?x78409 (* l_0_12_277 l_0_12_277)))
 (let ((?x78402 (- (* (* (- 1.0) l_0_12_187) l_0_12_187) (* (* 1.0 l_0_12_188) l_0_12_188))))
 (let ((?x78408 (- (- ?x78402 (* (* 1.0 l_0_12_189) l_0_12_189)) (* (* 1.0 l_0_12_190) l_0_12_190))))
 (let ((?x78422 (- (- (- (- (- (- (- ?x78408 ?x78409) ?x78411) ?x78413) ?x78415) ?x78417) ?x78419) ?x78421)))
 (let ((?x78436 (- (- (- (- (- (- (- ?x78422 ?x78423) ?x78425) ?x78427) ?x78429) ?x78431) ?x78433) ?x78435)))
 (= (- (- ?x78436 ?x78437) ?x78439) 0.0))))))))))))))))))))))
(assert
 (let ((?x78481 (- (* (* (- 2.0) l_0_12_187) l_0_12_196) (* (* 2.0 l_0_12_188) l_0_12_197))))
 (let ((?x78485 (- (- ?x78481 (* (* 2.0 l_0_12_189) l_0_12_198)) (* (* 2.0 l_0_12_190) l_0_12_199))))
 (let ((?x78489 (- (- ?x78485 (* (* 2.0 l_0_12_277) l_0_12_286)) (* (* 2.0 l_0_12_278) l_0_12_287))))
 (let ((?x78493 (- (- ?x78489 (* (* 2.0 l_0_12_279) l_0_12_288)) (* (* 2.0 l_0_12_280) l_0_12_289))))
 (let ((?x78497 (- (- ?x78493 (* (* 2.0 l_0_12_322) l_0_12_331)) (* (* 2.0 l_0_12_323) l_0_12_332))))
 (let ((?x78501 (- (- ?x78497 (* (* 2.0 l_0_12_324) l_0_12_333)) (* (* 2.0 l_0_12_325) l_0_12_334))))
 (let ((?x78505 (- (- ?x78501 (* (* 2.0 l_0_12_367) l_0_12_376)) (* (* 2.0 l_0_12_368) l_0_12_377))))
 (let ((?x78509 (- (- ?x78505 (* (* 2.0 l_0_12_369) l_0_12_378)) (* (* 2.0 l_0_12_370) l_0_12_379))))
 (let ((?x78513 (- (- ?x78509 (* (* 2.0 l_0_12_412) l_0_12_421)) (* (* 2.0 l_0_12_413) l_0_12_422))))
 (let ((?x78517 (- (- ?x78513 (* (* 2.0 l_0_12_414) l_0_12_423)) (* (* 2.0 l_0_12_415) l_0_12_424))))
 (= ?x78517 0.0))))))))))))
(assert
 (let ((?x78582 (- (* (* (- 2.0) l_0_12_187) l_0_12_209) (* (* 2.0 l_0_12_188) l_0_12_210))))
 (let ((?x78586 (- (- ?x78582 (* (* 2.0 l_0_12_189) l_0_12_211)) (* (* 2.0 l_0_12_190) l_0_12_212))))
 (let ((?x78590 (- (- ?x78586 (* (* 2.0 l_0_12_277) l_0_12_299)) (* (* 2.0 l_0_12_278) l_0_12_300))))
 (let ((?x78594 (- (- ?x78590 (* (* 2.0 l_0_12_279) l_0_12_301)) (* (* 2.0 l_0_12_280) l_0_12_302))))
 (let ((?x78598 (- (- ?x78594 (* (* 2.0 l_0_12_322) l_0_12_344)) (* (* 2.0 l_0_12_323) l_0_12_345))))
 (let ((?x78602 (- (- ?x78598 (* (* 2.0 l_0_12_324) l_0_12_346)) (* (* 2.0 l_0_12_325) l_0_12_347))))
 (let ((?x78606 (- (- ?x78602 (* (* 2.0 l_0_12_367) l_0_12_389)) (* (* 2.0 l_0_12_368) l_0_12_390))))
 (let ((?x78610 (- (- ?x78606 (* (* 2.0 l_0_12_369) l_0_12_391)) (* (* 2.0 l_0_12_370) l_0_12_392))))
 (let ((?x78614 (- (- ?x78610 (* (* 2.0 l_0_12_412) l_0_12_434)) (* (* 2.0 l_0_12_413) l_0_12_435))))
 (let ((?x78618 (- (- ?x78614 (* (* 2.0 l_0_12_414) l_0_12_436)) (* (* 2.0 l_0_12_415) l_0_12_437))))
 (= ?x78618 0.0))))))))))))
(assert
 (let ((?x78665 (- (* (* (- 2.0) l_0_12_187) l_0_12_217) (* (* 2.0 l_0_12_188) l_0_12_218))))
 (let ((?x78669 (- (- ?x78665 (* (* 2.0 l_0_12_189) l_0_12_219)) (* (* 2.0 l_0_12_190) l_0_12_220))))
 (let ((?x78673 (- (- ?x78669 (* (* 2.0 l_0_12_277) l_0_12_307)) (* (* 2.0 l_0_12_278) l_0_12_308))))
 (let ((?x78677 (- (- ?x78673 (* (* 2.0 l_0_12_279) l_0_12_309)) (* (* 2.0 l_0_12_280) l_0_12_310))))
 (let ((?x78681 (- (- ?x78677 (* (* 2.0 l_0_12_322) l_0_12_352)) (* (* 2.0 l_0_12_323) l_0_12_353))))
 (let ((?x78685 (- (- ?x78681 (* (* 2.0 l_0_12_324) l_0_12_354)) (* (* 2.0 l_0_12_325) l_0_12_355))))
 (let ((?x78689 (- (- ?x78685 (* (* 2.0 l_0_12_367) l_0_12_397)) (* (* 2.0 l_0_12_368) l_0_12_398))))
 (let ((?x78693 (- (- ?x78689 (* (* 2.0 l_0_12_369) l_0_12_399)) (* (* 2.0 l_0_12_370) l_0_12_400))))
 (let ((?x78697 (- (- ?x78693 (* (* 2.0 l_0_12_412) l_0_12_442)) (* (* 2.0 l_0_12_413) l_0_12_443))))
 (let ((?x78701 (- (- ?x78697 (* (* 2.0 l_0_12_414) l_0_12_444)) (* (* 2.0 l_0_12_415) l_0_12_445))))
 (= ?x78701 0.0))))))))))))
(assert
 (let ((?x78806 (* l_0_12_426 l_0_12_426)))
 (let ((?x78804 (* l_0_12_425 l_0_12_425)))
 (let ((?x78802 (* l_0_12_424 l_0_12_424)))
 (let ((?x78800 (* l_0_12_423 l_0_12_423)))
 (let ((?x78798 (* l_0_12_422 l_0_12_422)))
 (let ((?x78796 (* l_0_12_421 l_0_12_421)))
 (let ((?x78794 (* l_0_12_381 l_0_12_381)))
 (let ((?x78792 (* l_0_12_380 l_0_12_380)))
 (let ((?x78790 (* l_0_12_379 l_0_12_379)))
 (let ((?x78788 (* l_0_12_378 l_0_12_378)))
 (let ((?x78786 (* l_0_12_377 l_0_12_377)))
 (let ((?x78784 (* l_0_12_376 l_0_12_376)))
 (let ((?x78782 (* l_0_12_336 l_0_12_336)))
 (let ((?x78780 (* l_0_12_335 l_0_12_335)))
 (let ((?x78778 (* l_0_12_334 l_0_12_334)))
 (let ((?x78776 (* l_0_12_333 l_0_12_333)))
 (let ((?x78774 (* l_0_12_332 l_0_12_332)))
 (let ((?x78772 (* l_0_12_331 l_0_12_331)))
 (let ((?x78770 (* l_0_12_291 l_0_12_291)))
 (let ((?x78768 (* l_0_12_290 l_0_12_290)))
 (let ((?x78766 (* l_0_12_289 l_0_12_289)))
 (let ((?x78764 (* l_0_12_288 l_0_12_288)))
 (let ((?x57437 (* l_0_12_287 l_0_12_287)))
 (let ((?x20344 (* l_0_12_286 l_0_12_286)))
 (let ((?x68849 (- (* (* (- 1.0) l_0_12_196) l_0_12_196) (* (* 1.0 l_0_12_197) l_0_12_197))))
 (let ((?x68836 (- (- ?x68849 (* (* 1.0 l_0_12_198) l_0_12_198)) (* (* 1.0 l_0_12_199) l_0_12_199))))
 (let ((?x68859 (- (- ?x68836 (* (* 1.0 l_0_12_200) l_0_12_200)) (* (* 1.0 l_0_12_201) l_0_12_201))))
 (let ((?x78773 (- (- (- (- (- (- (- ?x68859 ?x20344) ?x57437) ?x78764) ?x78766) ?x78768) ?x78770) ?x78772)))
 (let ((?x78787 (- (- (- (- (- (- (- ?x78773 ?x78774) ?x78776) ?x78778) ?x78780) ?x78782) ?x78784) ?x78786)))
 (let ((?x78801 (- (- (- (- (- (- (- ?x78787 ?x78788) ?x78790) ?x78792) ?x78794) ?x78796) ?x78798) ?x78800)))
 (= (- (- (- ?x78801 ?x78802) ?x78804) ?x78806) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x45607 (- (* (* (- 2.0) l_0_12_196) l_0_12_202) (* (* 2.0 l_0_12_197) l_0_12_203))))
 (let ((?x78869 (- (- ?x45607 (* (* 2.0 l_0_12_198) l_0_12_204)) (* (* 2.0 l_0_12_199) l_0_12_205))))
 (let ((?x78873 (- (- ?x78869 (* (* 2.0 l_0_12_200) l_0_12_206)) (* (* 2.0 l_0_12_201) l_0_12_207))))
 (let ((?x78877 (- (- ?x78873 (* (* 2.0 l_0_12_286) l_0_12_292)) (* (* 2.0 l_0_12_287) l_0_12_293))))
 (let ((?x78881 (- (- ?x78877 (* (* 2.0 l_0_12_288) l_0_12_294)) (* (* 2.0 l_0_12_289) l_0_12_295))))
 (let ((?x78885 (- (- ?x78881 (* (* 2.0 l_0_12_290) l_0_12_296)) (* (* 2.0 l_0_12_291) l_0_12_297))))
 (let ((?x78889 (- (- ?x78885 (* (* 2.0 l_0_12_331) l_0_12_337)) (* (* 2.0 l_0_12_332) l_0_12_338))))
 (let ((?x78893 (- (- ?x78889 (* (* 2.0 l_0_12_333) l_0_12_339)) (* (* 2.0 l_0_12_334) l_0_12_340))))
 (let ((?x78897 (- (- ?x78893 (* (* 2.0 l_0_12_335) l_0_12_341)) (* (* 2.0 l_0_12_336) l_0_12_342))))
 (let ((?x78901 (- (- ?x78897 (* (* 2.0 l_0_12_376) l_0_12_382)) (* (* 2.0 l_0_12_377) l_0_12_383))))
 (let ((?x78905 (- (- ?x78901 (* (* 2.0 l_0_12_378) l_0_12_384)) (* (* 2.0 l_0_12_379) l_0_12_385))))
 (let ((?x78909 (- (- ?x78905 (* (* 2.0 l_0_12_380) l_0_12_386)) (* (* 2.0 l_0_12_381) l_0_12_387))))
 (let ((?x78913 (- (- ?x78909 (* (* 2.0 l_0_12_421) l_0_12_427)) (* (* 2.0 l_0_12_422) l_0_12_428))))
 (let ((?x78917 (- (- ?x78913 (* (* 2.0 l_0_12_423) l_0_12_429)) (* (* 2.0 l_0_12_424) l_0_12_430))))
 (let ((?x78921 (- (- ?x78917 (* (* 2.0 l_0_12_425) l_0_12_431)) (* (* 2.0 l_0_12_426) l_0_12_432))))
 (= ?x78921 0.0)))))))))))))))))
(assert
 (let ((?x78999 (- (* (* (- 2.0) l_0_12_196) l_0_12_217) (* (* 2.0 l_0_12_197) l_0_12_218))))
 (let ((?x79003 (- (- ?x78999 (* (* 2.0 l_0_12_198) l_0_12_219)) (* (* 2.0 l_0_12_199) l_0_12_220))))
 (let ((?x79007 (- (- ?x79003 (* (* 2.0 l_0_12_200) l_0_12_221)) (* (* 2.0 l_0_12_201) l_0_12_222))))
 (let ((?x79011 (- (- ?x79007 (* (* 2.0 l_0_12_286) l_0_12_307)) (* (* 2.0 l_0_12_287) l_0_12_308))))
 (let ((?x79015 (- (- ?x79011 (* (* 2.0 l_0_12_288) l_0_12_309)) (* (* 2.0 l_0_12_289) l_0_12_310))))
 (let ((?x79019 (- (- ?x79015 (* (* 2.0 l_0_12_290) l_0_12_311)) (* (* 2.0 l_0_12_291) l_0_12_312))))
 (let ((?x79023 (- (- ?x79019 (* (* 2.0 l_0_12_331) l_0_12_352)) (* (* 2.0 l_0_12_332) l_0_12_353))))
 (let ((?x79027 (- (- ?x79023 (* (* 2.0 l_0_12_333) l_0_12_354)) (* (* 2.0 l_0_12_334) l_0_12_355))))
 (let ((?x79031 (- (- ?x79027 (* (* 2.0 l_0_12_335) l_0_12_356)) (* (* 2.0 l_0_12_336) l_0_12_357))))
 (let ((?x79035 (- (- ?x79031 (* (* 2.0 l_0_12_376) l_0_12_397)) (* (* 2.0 l_0_12_377) l_0_12_398))))
 (let ((?x79039 (- (- ?x79035 (* (* 2.0 l_0_12_378) l_0_12_399)) (* (* 2.0 l_0_12_379) l_0_12_400))))
 (let ((?x79043 (- (- ?x79039 (* (* 2.0 l_0_12_380) l_0_12_401)) (* (* 2.0 l_0_12_381) l_0_12_402))))
 (let ((?x79047 (- (- ?x79043 (* (* 2.0 l_0_12_421) l_0_12_442)) (* (* 2.0 l_0_12_422) l_0_12_443))))
 (let ((?x79051 (- (- ?x79047 (* (* 2.0 l_0_12_423) l_0_12_444)) (* (* 2.0 l_0_12_424) l_0_12_445))))
 (let ((?x79055 (- (- ?x79051 (* (* 2.0 l_0_12_425) l_0_12_446)) (* (* 2.0 l_0_12_426) l_0_12_447))))
 (= ?x79055 0.0)))))))))))))))))
(assert
 (let ((?x79248 (* l_0_12_433 l_0_12_433)))
 (let ((?x79246 (* l_0_12_432 l_0_12_432)))
 (let ((?x79244 (* l_0_12_431 l_0_12_431)))
 (let ((?x79242 (* l_0_12_430 l_0_12_430)))
 (let ((?x79240 (* l_0_12_429 l_0_12_429)))
 (let ((?x79238 (* l_0_12_428 l_0_12_428)))
 (let ((?x79236 (* l_0_12_427 l_0_12_427)))
 (let ((?x79234 (* l_0_12_388 l_0_12_388)))
 (let ((?x79232 (* l_0_12_387 l_0_12_387)))
 (let ((?x79230 (* l_0_12_386 l_0_12_386)))
 (let ((?x79228 (* l_0_12_385 l_0_12_385)))
 (let ((?x79226 (* l_0_12_384 l_0_12_384)))
 (let ((?x79224 (* l_0_12_383 l_0_12_383)))
 (let ((?x79222 (* l_0_12_382 l_0_12_382)))
 (let ((?x79220 (* l_0_12_343 l_0_12_343)))
 (let ((?x79218 (* l_0_12_342 l_0_12_342)))
 (let ((?x79216 (* l_0_12_341 l_0_12_341)))
 (let ((?x79214 (* l_0_12_340 l_0_12_340)))
 (let ((?x79212 (* l_0_12_339 l_0_12_339)))
 (let ((?x79210 (* l_0_12_338 l_0_12_338)))
 (let ((?x79208 (* l_0_12_337 l_0_12_337)))
 (let ((?x79206 (* l_0_12_298 l_0_12_298)))
 (let ((?x79204 (* l_0_12_297 l_0_12_297)))
 (let ((?x79202 (* l_0_12_296 l_0_12_296)))
 (let ((?x79200 (* l_0_12_295 l_0_12_295)))
 (let ((?x79198 (* l_0_12_294 l_0_12_294)))
 (let ((?x79196 (* l_0_12_293 l_0_12_293)))
 (let ((?x79194 (* l_0_12_292 l_0_12_292)))
 (let ((?x79178 (- (* (* (- 1.0) l_0_12_202) l_0_12_202) (* (* 1.0 l_0_12_203) l_0_12_203))))
 (let ((?x79184 (- (- ?x79178 (* (* 1.0 l_0_12_204) l_0_12_204)) (* (* 1.0 l_0_12_205) l_0_12_205))))
 (let ((?x79190 (- (- ?x79184 (* (* 1.0 l_0_12_206) l_0_12_206)) (* (* 1.0 l_0_12_207) l_0_12_207))))
 (let ((?x79199 (- (- (- (- ?x79190 (* (* 1.0 l_0_12_208) l_0_12_208)) ?x79194) ?x79196) ?x79198)))
 (let ((?x79213 (- (- (- (- (- (- (- ?x79199 ?x79200) ?x79202) ?x79204) ?x79206) ?x79208) ?x79210) ?x79212)))
 (let ((?x79227 (- (- (- (- (- (- (- ?x79213 ?x79214) ?x79216) ?x79218) ?x79220) ?x79222) ?x79224) ?x79226)))
 (let ((?x79241 (- (- (- (- (- (- (- ?x79227 ?x79228) ?x79230) ?x79232) ?x79234) ?x79236) ?x79238) ?x79240)))
 (= (- (- (- (- ?x79241 ?x79242) ?x79244) ?x79246) ?x79248) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x79328 (- (* (* (- 2.0) l_0_12_202) l_0_12_209) (* (* 2.0 l_0_12_203) l_0_12_210))))
 (let ((?x79332 (- (- ?x79328 (* (* 2.0 l_0_12_204) l_0_12_211)) (* (* 2.0 l_0_12_205) l_0_12_212))))
 (let ((?x79336 (- (- ?x79332 (* (* 2.0 l_0_12_206) l_0_12_213)) (* (* 2.0 l_0_12_207) l_0_12_214))))
 (let ((?x79340 (- (- ?x79336 (* (* 2.0 l_0_12_208) l_0_12_215)) (* (* 2.0 l_0_12_292) l_0_12_299))))
 (let ((?x79344 (- (- ?x79340 (* (* 2.0 l_0_12_293) l_0_12_300)) (* (* 2.0 l_0_12_294) l_0_12_301))))
 (let ((?x79348 (- (- ?x79344 (* (* 2.0 l_0_12_295) l_0_12_302)) (* (* 2.0 l_0_12_296) l_0_12_303))))
 (let ((?x79352 (- (- ?x79348 (* (* 2.0 l_0_12_297) l_0_12_304)) (* (* 2.0 l_0_12_298) l_0_12_305))))
 (let ((?x79356 (- (- ?x79352 (* (* 2.0 l_0_12_337) l_0_12_344)) (* (* 2.0 l_0_12_338) l_0_12_345))))
 (let ((?x79360 (- (- ?x79356 (* (* 2.0 l_0_12_339) l_0_12_346)) (* (* 2.0 l_0_12_340) l_0_12_347))))
 (let ((?x79364 (- (- ?x79360 (* (* 2.0 l_0_12_341) l_0_12_348)) (* (* 2.0 l_0_12_342) l_0_12_349))))
 (let ((?x79368 (- (- ?x79364 (* (* 2.0 l_0_12_343) l_0_12_350)) (* (* 2.0 l_0_12_382) l_0_12_389))))
 (let ((?x79372 (- (- ?x79368 (* (* 2.0 l_0_12_383) l_0_12_390)) (* (* 2.0 l_0_12_384) l_0_12_391))))
 (let ((?x79376 (- (- ?x79372 (* (* 2.0 l_0_12_385) l_0_12_392)) (* (* 2.0 l_0_12_386) l_0_12_393))))
 (let ((?x79380 (- (- ?x79376 (* (* 2.0 l_0_12_387) l_0_12_394)) (* (* 2.0 l_0_12_388) l_0_12_395))))
 (let ((?x79384 (- (- ?x79380 (* (* 2.0 l_0_12_427) l_0_12_434)) (* (* 2.0 l_0_12_428) l_0_12_435))))
 (let ((?x79388 (- (- ?x79384 (* (* 2.0 l_0_12_429) l_0_12_436)) (* (* 2.0 l_0_12_430) l_0_12_437))))
 (let ((?x79392 (- (- ?x79388 (* (* 2.0 l_0_12_431) l_0_12_438)) (* (* 2.0 l_0_12_432) l_0_12_439))))
 (= (- ?x79392 (* (* 2.0 l_0_12_433) l_0_12_440)) 0.0)))))))))))))))))))
(assert
 (let ((?x79578 (* l_0_12_441 l_0_12_441)))
 (let ((?x79576 (* l_0_12_440 l_0_12_440)))
 (let ((?x79574 (* l_0_12_439 l_0_12_439)))
 (let ((?x79572 (* l_0_12_438 l_0_12_438)))
 (let ((?x79570 (* l_0_12_437 l_0_12_437)))
 (let ((?x79568 (* l_0_12_436 l_0_12_436)))
 (let ((?x79566 (* l_0_12_435 l_0_12_435)))
 (let ((?x79564 (* l_0_12_434 l_0_12_434)))
 (let ((?x79562 (* l_0_12_396 l_0_12_396)))
 (let ((?x79560 (* l_0_12_395 l_0_12_395)))
 (let ((?x79558 (* l_0_12_394 l_0_12_394)))
 (let ((?x79556 (* l_0_12_393 l_0_12_393)))
 (let ((?x79554 (* l_0_12_392 l_0_12_392)))
 (let ((?x79552 (* l_0_12_391 l_0_12_391)))
 (let ((?x79550 (* l_0_12_390 l_0_12_390)))
 (let ((?x79548 (* l_0_12_389 l_0_12_389)))
 (let ((?x79546 (* l_0_12_351 l_0_12_351)))
 (let ((?x79544 (* l_0_12_350 l_0_12_350)))
 (let ((?x79542 (* l_0_12_349 l_0_12_349)))
 (let ((?x79540 (* l_0_12_348 l_0_12_348)))
 (let ((?x79538 (* l_0_12_347 l_0_12_347)))
 (let ((?x79536 (* l_0_12_346 l_0_12_346)))
 (let ((?x79534 (* l_0_12_345 l_0_12_345)))
 (let ((?x79532 (* l_0_12_344 l_0_12_344)))
 (let ((?x79530 (* l_0_12_306 l_0_12_306)))
 (let ((?x79528 (* l_0_12_305 l_0_12_305)))
 (let ((?x79526 (* l_0_12_304 l_0_12_304)))
 (let ((?x79524 (* l_0_12_303 l_0_12_303)))
 (let ((?x79522 (* l_0_12_302 l_0_12_302)))
 (let ((?x79520 (* l_0_12_301 l_0_12_301)))
 (let ((?x79518 (* l_0_12_300 l_0_12_300)))
 (let ((?x79516 (* l_0_12_299 l_0_12_299)))
 (let ((?x79497 (- (* (* (- 1.0) l_0_12_209) l_0_12_209) (* (* 1.0 l_0_12_210) l_0_12_210))))
 (let ((?x79503 (- (- ?x79497 (* (* 1.0 l_0_12_211) l_0_12_211)) (* (* 1.0 l_0_12_212) l_0_12_212))))
 (let ((?x79509 (- (- ?x79503 (* (* 1.0 l_0_12_213) l_0_12_213)) (* (* 1.0 l_0_12_214) l_0_12_214))))
 (let ((?x79515 (- (- ?x79509 (* (* 1.0 l_0_12_215) l_0_12_215)) (* (* 1.0 l_0_12_216) l_0_12_216))))
 (let ((?x79529 (- (- (- (- (- (- (- ?x79515 ?x79516) ?x79518) ?x79520) ?x79522) ?x79524) ?x79526) ?x79528)))
 (let ((?x79543 (- (- (- (- (- (- (- ?x79529 ?x79530) ?x79532) ?x79534) ?x79536) ?x79538) ?x79540) ?x79542)))
 (let ((?x79557 (- (- (- (- (- (- (- ?x79543 ?x79544) ?x79546) ?x79548) ?x79550) ?x79552) ?x79554) ?x79556)))
 (let ((?x79571 (- (- (- (- (- (- (- ?x79557 ?x79558) ?x79560) ?x79562) ?x79564) ?x79566) ?x79568) ?x79570)))
 (= (- (- (- (- ?x79571 ?x79572) ?x79574) ?x79576) ?x79578) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x79649 (- (* (* (- 2.0) l_0_12_209) l_0_12_217) (* (* 2.0 l_0_12_210) l_0_12_218))))
 (let ((?x79655 (- (- ?x79649 (* (* 2.0 l_0_12_211) l_0_12_219)) (* (* 2.0 l_0_12_212) l_0_12_220))))
 (let ((?x79661 (- (- ?x79655 (* (* 2.0 l_0_12_213) l_0_12_221)) (* (* 2.0 l_0_12_214) l_0_12_222))))
 (let ((?x79667 (- (- ?x79661 (* (* 2.0 l_0_12_215) l_0_12_223)) (* (* 2.0 l_0_12_216) l_0_12_224))))
 (let ((?x79673 (- (- ?x79667 (* (* 2.0 l_0_12_299) l_0_12_307)) (* (* 2.0 l_0_12_300) l_0_12_308))))
 (let ((?x79679 (- (- ?x79673 (* (* 2.0 l_0_12_301) l_0_12_309)) (* (* 2.0 l_0_12_302) l_0_12_310))))
 (let ((?x79685 (- (- ?x79679 (* (* 2.0 l_0_12_303) l_0_12_311)) (* (* 2.0 l_0_12_304) l_0_12_312))))
 (let ((?x79691 (- (- ?x79685 (* (* 2.0 l_0_12_305) l_0_12_313)) (* (* 2.0 l_0_12_306) l_0_12_314))))
 (let ((?x79697 (- (- ?x79691 (* (* 2.0 l_0_12_344) l_0_12_352)) (* (* 2.0 l_0_12_345) l_0_12_353))))
 (let ((?x79703 (- (- ?x79697 (* (* 2.0 l_0_12_346) l_0_12_354)) (* (* 2.0 l_0_12_347) l_0_12_355))))
 (let ((?x79709 (- (- ?x79703 (* (* 2.0 l_0_12_348) l_0_12_356)) (* (* 2.0 l_0_12_349) l_0_12_357))))
 (let ((?x79715 (- (- ?x79709 (* (* 2.0 l_0_12_350) l_0_12_358)) (* (* 2.0 l_0_12_351) l_0_12_359))))
 (let ((?x79721 (- (- ?x79715 (* (* 2.0 l_0_12_389) l_0_12_397)) (* (* 2.0 l_0_12_390) l_0_12_398))))
 (let ((?x79727 (- (- ?x79721 (* (* 2.0 l_0_12_391) l_0_12_399)) (* (* 2.0 l_0_12_392) l_0_12_400))))
 (let ((?x79733 (- (- ?x79727 (* (* 2.0 l_0_12_393) l_0_12_401)) (* (* 2.0 l_0_12_394) l_0_12_402))))
 (let ((?x79739 (- (- ?x79733 (* (* 2.0 l_0_12_395) l_0_12_403)) (* (* 2.0 l_0_12_396) l_0_12_404))))
 (let ((?x79745 (- (- ?x79739 (* (* 2.0 l_0_12_434) l_0_12_442)) (* (* 2.0 l_0_12_435) l_0_12_443))))
 (let ((?x79751 (- (- ?x79745 (* (* 2.0 l_0_12_436) l_0_12_444)) (* (* 2.0 l_0_12_437) l_0_12_445))))
 (let ((?x79757 (- (- ?x79751 (* (* 2.0 l_0_12_438) l_0_12_446)) (* (* 2.0 l_0_12_439) l_0_12_447))))
 (let ((?x79763 (- (- ?x79757 (* (* 2.0 l_0_12_440) l_0_12_448)) (* (* 2.0 l_0_12_441) l_0_12_449))))
 (= ?x79763 0.0))))))))))))))))))))))
(assert
 (let ((?x79983 (* l_0_12_450 l_0_12_450)))
 (let ((?x79981 (* l_0_12_449 l_0_12_449)))
 (let ((?x79979 (* l_0_12_448 l_0_12_448)))
 (let ((?x79977 (* l_0_12_447 l_0_12_447)))
 (let ((?x79975 (* l_0_12_446 l_0_12_446)))
 (let ((?x79973 (* l_0_12_445 l_0_12_445)))
 (let ((?x79971 (* l_0_12_444 l_0_12_444)))
 (let ((?x79969 (* l_0_12_443 l_0_12_443)))
 (let ((?x79967 (* l_0_12_442 l_0_12_442)))
 (let ((?x79965 (* l_0_12_405 l_0_12_405)))
 (let ((?x79963 (* l_0_12_404 l_0_12_404)))
 (let ((?x79961 (* l_0_12_403 l_0_12_403)))
 (let ((?x79959 (* l_0_12_402 l_0_12_402)))
 (let ((?x79957 (* l_0_12_401 l_0_12_401)))
 (let ((?x79955 (* l_0_12_400 l_0_12_400)))
 (let ((?x79953 (* l_0_12_399 l_0_12_399)))
 (let ((?x79951 (* l_0_12_398 l_0_12_398)))
 (let ((?x79949 (* l_0_12_397 l_0_12_397)))
 (let ((?x79947 (* l_0_12_360 l_0_12_360)))
 (let ((?x79945 (* l_0_12_359 l_0_12_359)))
 (let ((?x79943 (* l_0_12_358 l_0_12_358)))
 (let ((?x79941 (* l_0_12_357 l_0_12_357)))
 (let ((?x79939 (* l_0_12_356 l_0_12_356)))
 (let ((?x79937 (* l_0_12_355 l_0_12_355)))
 (let ((?x79935 (* l_0_12_354 l_0_12_354)))
 (let ((?x79933 (* l_0_12_353 l_0_12_353)))
 (let ((?x79931 (* l_0_12_352 l_0_12_352)))
 (let ((?x79929 (* l_0_12_315 l_0_12_315)))
 (let ((?x79927 (* l_0_12_314 l_0_12_314)))
 (let ((?x79925 (* l_0_12_313 l_0_12_313)))
 (let ((?x79923 (* l_0_12_312 l_0_12_312)))
 (let ((?x79921 (* l_0_12_311 l_0_12_311)))
 (let ((?x79919 (* l_0_12_310 l_0_12_310)))
 (let ((?x79917 (* l_0_12_309 l_0_12_309)))
 (let ((?x79915 (* l_0_12_308 l_0_12_308)))
 (let ((?x79913 (* l_0_12_307 l_0_12_307)))
 (let ((?x79891 (- (* (* (- 1.0) l_0_12_217) l_0_12_217) (* (* 1.0 l_0_12_218) l_0_12_218))))
 (let ((?x79897 (- (- ?x79891 (* (* 1.0 l_0_12_219) l_0_12_219)) (* (* 1.0 l_0_12_220) l_0_12_220))))
 (let ((?x79903 (- (- ?x79897 (* (* 1.0 l_0_12_221) l_0_12_221)) (* (* 1.0 l_0_12_222) l_0_12_222))))
 (let ((?x79909 (- (- ?x79903 (* (* 1.0 l_0_12_223) l_0_12_223)) (* (* 1.0 l_0_12_224) l_0_12_224))))
 (let ((?x79918 (- (- (- (- ?x79909 (* (* 1.0 l_0_12_225) l_0_12_225)) ?x79913) ?x79915) ?x79917)))
 (let ((?x79932 (- (- (- (- (- (- (- ?x79918 ?x79919) ?x79921) ?x79923) ?x79925) ?x79927) ?x79929) ?x79931)))
 (let ((?x79946 (- (- (- (- (- (- (- ?x79932 ?x79933) ?x79935) ?x79937) ?x79939) ?x79941) ?x79943) ?x79945)))
 (let ((?x79960 (- (- (- (- (- (- (- ?x79946 ?x79947) ?x79949) ?x79951) ?x79953) ?x79955) ?x79957) ?x79959)))
 (let ((?x79974 (- (- (- (- (- (- (- ?x79960 ?x79961) ?x79963) ?x79965) ?x79967) ?x79969) ?x79971) ?x79973)))
 (= (- (- (- (- (- ?x79974 ?x79975) ?x79977) ?x79979) ?x79981) ?x79983) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_12_1 0.0))
(assert
 (>= l_0_12_3 0.0))
(assert
 (>= l_0_12_6 0.0))
(assert
 (>= l_0_12_10 0.0))
(assert
 (>= l_0_12_15 0.0))
(assert
 (>= l_0_12_21 0.0))
(assert
 (>= l_0_12_28 0.0))
(assert
 (>= l_0_12_36 0.0))
(assert
 (>= l_0_12_45 0.0))
(assert
 (>= l_0_12_46 0.0))
(assert
 (>= l_0_12_48 0.0))
(assert
 (>= l_0_12_51 0.0))
(assert
 (>= l_0_12_55 0.0))
(assert
 (>= l_0_12_60 0.0))
(assert
 (>= l_0_12_66 0.0))
(assert
 (>= l_0_12_73 0.0))
(assert
 (>= l_0_12_81 0.0))
(assert
 (>= l_0_12_90 0.0))
(assert
 (>= l_0_12_91 0.0))
(assert
 (>= l_0_12_93 0.0))
(assert
 (>= l_0_12_96 0.0))
(assert
 (>= l_0_12_100 0.0))
(assert
 (>= l_0_12_105 0.0))
(assert
 (>= l_0_12_111 0.0))
(assert
 (>= l_0_12_118 0.0))
(assert
 (>= l_0_12_126 0.0))
(assert
 (>= l_0_12_135 0.0))
(assert
 (>= l_0_12_136 0.0))
(assert
 (>= l_0_12_138 0.0))
(assert
 (>= l_0_12_141 0.0))
(assert
 (>= l_0_12_145 0.0))
(assert
 (>= l_0_12_150 0.0))
(assert
 (>= l_0_12_156 0.0))
(assert
 (>= l_0_12_163 0.0))
(assert
 (>= l_0_12_171 0.0))
(assert
 (>= l_0_12_180 0.0))
(assert
 (>= l_0_12_181 0.0))
(assert
 (>= l_0_12_183 0.0))
(assert
 (>= l_0_12_186 0.0))
(assert
 (>= l_0_12_190 0.0))
(assert
 (>= l_0_12_195 0.0))
(assert
 (>= l_0_12_201 0.0))
(assert
 (>= l_0_12_208 0.0))
(assert
 (>= l_0_12_216 0.0))
(assert
 (>= l_0_12_225 0.0))
(assert
 (>= l_0_12_226 0.0))
(assert
 (>= l_0_12_228 0.0))
(assert
 (>= l_0_12_231 0.0))
(assert
 (>= l_0_12_235 0.0))
(assert
 (>= l_0_12_240 0.0))
(assert
 (>= l_0_12_246 0.0))
(assert
 (>= l_0_12_253 0.0))
(assert
 (>= l_0_12_261 0.0))
(assert
 (>= l_0_12_270 0.0))
(assert
 (>= l_0_12_271 0.0))
(assert
 (>= l_0_12_273 0.0))
(assert
 (>= l_0_12_276 0.0))
(assert
 (>= l_0_12_280 0.0))
(assert
 (>= l_0_12_285 0.0))
(assert
 (>= l_0_12_291 0.0))
(assert
 (>= l_0_12_298 0.0))
(assert
 (>= l_0_12_306 0.0))
(assert
 (>= l_0_12_315 0.0))
(assert
 (>= l_0_12_316 0.0))
(assert
 (>= l_0_12_318 0.0))
(assert
 (>= l_0_12_321 0.0))
(assert
 (>= l_0_12_325 0.0))
(assert
 (>= l_0_12_330 0.0))
(assert
 (>= l_0_12_336 0.0))
(assert
 (>= l_0_12_343 0.0))
(assert
 (>= l_0_12_351 0.0))
(assert
 (>= l_0_12_360 0.0))
(assert
 (>= l_0_12_361 0.0))
(assert
 (>= l_0_12_363 0.0))
(assert
 (>= l_0_12_366 0.0))
(assert
 (>= l_0_12_370 0.0))
(assert
 (>= l_0_12_375 0.0))
(assert
 (>= l_0_12_381 0.0))
(assert
 (>= l_0_12_388 0.0))
(assert
 (>= l_0_12_396 0.0))
(assert
 (>= l_0_12_405 0.0))
(assert
 (>= l_0_12_406 0.0))
(assert
 (>= l_0_12_408 0.0))
(assert
 (>= l_0_12_411 0.0))
(assert
 (>= l_0_12_415 0.0))
(assert
 (>= l_0_12_420 0.0))
(assert
 (>= l_0_12_426 0.0))
(assert
 (>= l_0_12_433 0.0))
(assert
 (>= l_0_12_441 0.0))
(assert
 (>= l_0_12_450 0.0))
(check-sat)
(get-model)