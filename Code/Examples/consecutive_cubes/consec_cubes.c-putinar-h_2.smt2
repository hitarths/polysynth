(set-option :produce-models true); benchmark generated from python API
(set-info :status unknown)
(declare-fun l_0_0_2 () Real)
(declare-fun l_0_0_1 () Real)
(declare-fun l_0_1_3 () Real)
(declare-fun l_0_1_2 () Real)
(declare-fun l_0_1_1 () Real)
(declare-fun l_0_2_4 () Real)
(declare-fun l_0_2_3 () Real)
(declare-fun l_0_2_2 () Real)
(declare-fun l_0_2_1 () Real)
(declare-fun l_0_3_5 () Real)
(declare-fun l_0_3_4 () Real)
(declare-fun l_0_3_3 () Real)
(declare-fun l_0_3_2 () Real)
(declare-fun l_0_3_1 () Real)
(declare-fun l_0_4_6 () Real)
(declare-fun l_0_4_5 () Real)
(declare-fun l_0_4_4 () Real)
(declare-fun l_0_4_3 () Real)
(declare-fun l_0_4_2 () Real)
(declare-fun l_0_4_1 () Real)
(declare-fun l_0_5_7 () Real)
(declare-fun l_0_5_6 () Real)
(declare-fun l_0_5_5 () Real)
(declare-fun l_0_5_4 () Real)
(declare-fun l_0_5_3 () Real)
(declare-fun l_0_5_2 () Real)
(declare-fun l_0_5_1 () Real)
(declare-fun l_0_6_66 () Real)
(declare-fun l_0_6_65 () Real)
(declare-fun l_0_6_45 () Real)
(declare-fun l_0_6_44 () Real)
(declare-fun l_0_6_3 () Real)
(declare-fun l_0_6_24 () Real)
(declare-fun l_0_6_23 () Real)
(declare-fun l_0_6_2 () Real)
(declare-fun l_0_6_150 () Real)
(declare-fun l_0_6_149 () Real)
(declare-fun l_0_6_22 () Real)
(declare-fun l_0_6_1 () Real)
(declare-fun l_0_6_64 () Real)
(declare-fun l_0_6_43 () Real)
(declare-fun l_0_6_148 () Real)
(declare-fun l_0_6_25 () Real)
(declare-fun l_0_6_127 () Real)
(declare-fun l_0_6_4 () Real)
(declare-fun l_0_6_28 () Real)
(declare-fun l_0_6_7 () Real)
(declare-fun l_0_6_32 () Real)
(declare-fun l_0_6_11 () Real)
(declare-fun l_0_6_85 () Real)
(declare-fun l_0_6_37 () Real)
(declare-fun l_0_6_106 () Real)
(declare-fun l_0_6_16 () Real)
(declare-fun l_0_6_67 () Real)
(declare-fun l_0_6_46 () Real)
(declare-fun l_0_6_5 () Real)
(declare-fun l_0_6_26 () Real)
(declare-fun l_0_6_151 () Real)
(declare-fun l_0_6_128 () Real)
(declare-fun l_0_6_70 () Real)
(declare-fun l_0_6_49 () Real)
(declare-fun l_0_6_8 () Real)
(declare-fun l_0_6_29 () Real)
(declare-fun l_0_6_154 () Real)
(declare-fun l_0_6_74 () Real)
(declare-fun l_0_6_53 () Real)
(declare-fun l_0_6_33 () Real)
(declare-fun l_0_6_158 () Real)
(declare-fun l_0_6_12 () Real)
(declare-fun l_0_6_86 () Real)
(declare-fun l_0_6_79 () Real)
(declare-fun l_0_6_58 () Real)
(declare-fun l_0_6_38 () Real)
(declare-fun l_0_6_17 () Real)
(declare-fun l_0_6_163 () Real)
(declare-fun l_0_6_107 () Real)
(declare-fun l_0_6_6 () Real)
(declare-fun l_0_6_27 () Real)
(declare-fun l_0_6_130 () Real)
(declare-fun l_0_6_9 () Real)
(declare-fun l_0_6_30 () Real)
(declare-fun l_0_6_133 () Real)
(declare-fun l_0_6_34 () Real)
(declare-fun l_0_6_13 () Real)
(declare-fun l_0_6_137 () Real)
(declare-fun l_0_6_88 () Real)
(declare-fun l_0_6_39 () Real)
(declare-fun l_0_6_18 () Real)
(declare-fun l_0_6_142 () Real)
(declare-fun l_0_6_109 () Real)
(declare-fun l_0_6_31 () Real)
(declare-fun l_0_6_10 () Real)
(declare-fun l_0_6_35 () Real)
(declare-fun l_0_6_14 () Real)
(declare-fun l_0_6_91 () Real)
(declare-fun l_0_6_40 () Real)
(declare-fun l_0_6_112 () Real)
(declare-fun l_0_6_19 () Real)
(declare-fun l_0_6_36 () Real)
(declare-fun l_0_6_15 () Real)
(declare-fun l_0_6_95 () Real)
(declare-fun l_0_6_41 () Real)
(declare-fun l_0_6_20 () Real)
(declare-fun l_0_6_116 () Real)
(declare-fun l_0_6_42 () Real)
(declare-fun l_0_6_21 () Real)
(declare-fun l_0_6_121 () Real)
(declare-fun l_0_6_100 () Real)
(declare-fun l_0_6_68 () Real)
(declare-fun l_0_6_47 () Real)
(declare-fun l_0_6_152 () Real)
(declare-fun l_0_6_129 () Real)
(declare-fun l_0_6_69 () Real)
(declare-fun l_0_6_48 () Real)
(declare-fun l_0_6_153 () Real)
(declare-fun l_0_6_131 () Real)
(declare-fun l_0_6_72 () Real)
(declare-fun l_0_6_71 () Real)
(declare-fun l_0_6_51 () Real)
(declare-fun l_0_6_50 () Real)
(declare-fun l_0_6_156 () Real)
(declare-fun l_0_6_155 () Real)
(declare-fun l_0_6_134 () Real)
(declare-fun l_0_6_76 () Real)
(declare-fun l_0_6_75 () Real)
(declare-fun l_0_6_55 () Real)
(declare-fun l_0_6_54 () Real)
(declare-fun l_0_6_160 () Real)
(declare-fun l_0_6_159 () Real)
(declare-fun l_0_6_138 () Real)
(declare-fun l_0_6_89 () Real)
(declare-fun l_0_6_87 () Real)
(declare-fun l_0_6_81 () Real)
(declare-fun l_0_6_80 () Real)
(declare-fun l_0_6_60 () Real)
(declare-fun l_0_6_59 () Real)
(declare-fun l_0_6_165 () Real)
(declare-fun l_0_6_164 () Real)
(declare-fun l_0_6_143 () Real)
(declare-fun l_0_6_110 () Real)
(declare-fun l_0_6_108 () Real)
(declare-fun l_0_6_132 () Real)
(declare-fun l_0_6_135 () Real)
(declare-fun l_0_6_139 () Real)
(declare-fun l_0_6_90 () Real)
(declare-fun l_0_6_144 () Real)
(declare-fun l_0_6_111 () Real)
(declare-fun l_0_6_73 () Real)
(declare-fun l_0_6_52 () Real)
(declare-fun l_0_6_136 () Real)
(declare-fun l_0_6_77 () Real)
(declare-fun l_0_6_56 () Real)
(declare-fun l_0_6_140 () Real)
(declare-fun l_0_6_93 () Real)
(declare-fun l_0_6_92 () Real)
(declare-fun l_0_6_82 () Real)
(declare-fun l_0_6_61 () Real)
(declare-fun l_0_6_145 () Real)
(declare-fun l_0_6_114 () Real)
(declare-fun l_0_6_113 () Real)
(declare-fun l_0_6_78 () Real)
(declare-fun l_0_6_57 () Real)
(declare-fun l_0_6_141 () Real)
(declare-fun l_0_6_97 () Real)
(declare-fun l_0_6_96 () Real)
(declare-fun l_0_6_83 () Real)
(declare-fun l_0_6_62 () Real)
(declare-fun l_0_6_146 () Real)
(declare-fun l_0_6_118 () Real)
(declare-fun l_0_6_117 () Real)
(declare-fun l_0_6_84 () Real)
(declare-fun l_0_6_63 () Real)
(declare-fun l_0_6_147 () Real)
(declare-fun l_0_6_123 () Real)
(declare-fun l_0_6_122 () Real)
(declare-fun l_0_6_102 () Real)
(declare-fun l_0_6_101 () Real)
(declare-fun l_0_6_157 () Real)
(declare-fun l_0_6_161 () Real)
(declare-fun l_0_6_166 () Real)
(declare-fun l_0_6_162 () Real)
(declare-fun l_0_6_167 () Real)
(declare-fun l_0_6_168 () Real)
(declare-fun l_0_6_94 () Real)
(declare-fun l_0_6_115 () Real)
(declare-fun l_0_6_98 () Real)
(declare-fun l_0_6_119 () Real)
(declare-fun l_0_6_124 () Real)
(declare-fun l_0_6_103 () Real)
(declare-fun l_0_6_99 () Real)
(declare-fun l_0_6_120 () Real)
(declare-fun l_0_6_125 () Real)
(declare-fun l_0_6_104 () Real)
(declare-fun l_0_6_126 () Real)
(declare-fun l_0_6_105 () Real)
(declare-fun l_0_7_66 () Real)
(declare-fun l_0_7_65 () Real)
(declare-fun l_0_7_45 () Real)
(declare-fun l_0_7_44 () Real)
(declare-fun l_0_7_3 () Real)
(declare-fun l_0_7_24 () Real)
(declare-fun l_0_7_23 () Real)
(declare-fun l_0_7_2 () Real)
(declare-fun l_0_7_192 () Real)
(declare-fun l_0_7_191 () Real)
(declare-fun _a_12_ () Real)
(declare-fun l_0_7_64 () Real)
(declare-fun l_0_7_43 () Real)
(declare-fun l_0_7_22 () Real)
(declare-fun l_0_7_190 () Real)
(declare-fun l_0_7_1 () Real)
(declare-fun _a_13_ () Real)
(declare-fun l_0_7_68 () Real)
(declare-fun l_0_7_67 () Real)
(declare-fun l_0_7_47 () Real)
(declare-fun l_0_7_46 () Real)
(declare-fun l_0_7_5 () Real)
(declare-fun l_0_7_26 () Real)
(declare-fun l_0_7_25 () Real)
(declare-fun l_0_7_4 () Real)
(declare-fun l_0_7_194 () Real)
(declare-fun l_0_7_193 () Real)
(declare-fun l_0_7_129 () Real)
(declare-fun l_0_7_128 () Real)
(declare-fun l_0_7_127 () Real)
(declare-fun l_0_7_28 () Real)
(declare-fun l_0_7_7 () Real)
(declare-fun l_0_7_32 () Real)
(declare-fun l_0_7_11 () Real)
(declare-fun l_0_7_85 () Real)
(declare-fun l_0_7_37 () Real)
(declare-fun l_0_7_169 () Real)
(declare-fun l_0_7_148 () Real)
(declare-fun l_0_7_106 () Real)
(declare-fun l_0_7_16 () Real)
(declare-fun l_0_7_70 () Real)
(declare-fun l_0_7_49 () Real)
(declare-fun l_0_7_8 () Real)
(declare-fun l_0_7_29 () Real)
(declare-fun l_0_7_196 () Real)
(declare-fun l_0_7_74 () Real)
(declare-fun l_0_7_53 () Real)
(declare-fun l_0_7_33 () Real)
(declare-fun l_0_7_200 () Real)
(declare-fun l_0_7_12 () Real)
(declare-fun l_0_7_86 () Real)
(declare-fun l_0_7_79 () Real)
(declare-fun l_0_7_58 () Real)
(declare-fun l_0_7_38 () Real)
(declare-fun l_0_7_205 () Real)
(declare-fun l_0_7_17 () Real)
(declare-fun l_0_7_170 () Real)
(declare-fun l_0_7_149 () Real)
(declare-fun l_0_7_107 () Real)
(declare-fun l_0_7_6 () Real)
(declare-fun l_0_7_27 () Real)
(declare-fun l_0_7_130 () Real)
(declare-fun l_0_7_9 () Real)
(declare-fun l_0_7_30 () Real)
(declare-fun l_0_7_133 () Real)
(declare-fun l_0_7_34 () Real)
(declare-fun l_0_7_13 () Real)
(declare-fun l_0_7_137 () Real)
(declare-fun l_0_7_88 () Real)
(declare-fun l_0_7_39 () Real)
(declare-fun l_0_7_18 () Real)
(declare-fun l_0_7_172 () Real)
(declare-fun l_0_7_151 () Real)
(declare-fun l_0_7_142 () Real)
(declare-fun l_0_7_109 () Real)
(declare-fun l_0_7_31 () Real)
(declare-fun l_0_7_10 () Real)
(declare-fun l_0_7_35 () Real)
(declare-fun l_0_7_14 () Real)
(declare-fun l_0_7_91 () Real)
(declare-fun l_0_7_40 () Real)
(declare-fun l_0_7_175 () Real)
(declare-fun l_0_7_154 () Real)
(declare-fun l_0_7_112 () Real)
(declare-fun l_0_7_19 () Real)
(declare-fun l_0_7_36 () Real)
(declare-fun l_0_7_15 () Real)
(declare-fun l_0_7_95 () Real)
(declare-fun l_0_7_41 () Real)
(declare-fun l_0_7_179 () Real)
(declare-fun l_0_7_20 () Real)
(declare-fun l_0_7_158 () Real)
(declare-fun l_0_7_116 () Real)
(declare-fun l_0_7_42 () Real)
(declare-fun l_0_7_21 () Real)
(declare-fun l_0_7_184 () Real)
(declare-fun l_0_7_163 () Real)
(declare-fun l_0_7_121 () Real)
(declare-fun l_0_7_100 () Real)
(declare-fun l_0_7_69 () Real)
(declare-fun l_0_7_48 () Real)
(declare-fun l_0_7_195 () Real)
(declare-fun l_0_7_131 () Real)
(declare-fun l_0_7_72 () Real)
(declare-fun l_0_7_71 () Real)
(declare-fun l_0_7_51 () Real)
(declare-fun l_0_7_50 () Real)
(declare-fun l_0_7_198 () Real)
(declare-fun l_0_7_197 () Real)
(declare-fun l_0_7_134 () Real)
(declare-fun l_0_7_76 () Real)
(declare-fun l_0_7_75 () Real)
(declare-fun l_0_7_55 () Real)
(declare-fun l_0_7_54 () Real)
(declare-fun l_0_7_202 () Real)
(declare-fun l_0_7_201 () Real)
(declare-fun l_0_7_138 () Real)
(declare-fun l_0_7_89 () Real)
(declare-fun l_0_7_87 () Real)
(declare-fun l_0_7_81 () Real)
(declare-fun l_0_7_80 () Real)
(declare-fun l_0_7_60 () Real)
(declare-fun l_0_7_59 () Real)
(declare-fun l_0_7_207 () Real)
(declare-fun l_0_7_206 () Real)
(declare-fun l_0_7_173 () Real)
(declare-fun l_0_7_171 () Real)
(declare-fun l_0_7_152 () Real)
(declare-fun l_0_7_150 () Real)
(declare-fun l_0_7_143 () Real)
(declare-fun l_0_7_110 () Real)
(declare-fun l_0_7_108 () Real)
(declare-fun l_0_7_132 () Real)
(declare-fun l_0_7_135 () Real)
(declare-fun l_0_7_139 () Real)
(declare-fun l_0_7_90 () Real)
(declare-fun l_0_7_174 () Real)
(declare-fun l_0_7_153 () Real)
(declare-fun l_0_7_144 () Real)
(declare-fun l_0_7_111 () Real)
(declare-fun l_0_7_73 () Real)
(declare-fun l_0_7_52 () Real)
(declare-fun l_0_7_136 () Real)
(declare-fun l_0_7_77 () Real)
(declare-fun l_0_7_56 () Real)
(declare-fun l_0_7_140 () Real)
(declare-fun l_0_7_93 () Real)
(declare-fun l_0_7_92 () Real)
(declare-fun l_0_7_82 () Real)
(declare-fun l_0_7_61 () Real)
(declare-fun l_0_7_177 () Real)
(declare-fun l_0_7_176 () Real)
(declare-fun l_0_7_156 () Real)
(declare-fun l_0_7_155 () Real)
(declare-fun l_0_7_145 () Real)
(declare-fun l_0_7_114 () Real)
(declare-fun l_0_7_113 () Real)
(declare-fun l_0_7_78 () Real)
(declare-fun l_0_7_57 () Real)
(declare-fun l_0_7_141 () Real)
(declare-fun l_0_7_97 () Real)
(declare-fun l_0_7_96 () Real)
(declare-fun l_0_7_83 () Real)
(declare-fun l_0_7_62 () Real)
(declare-fun l_0_7_181 () Real)
(declare-fun l_0_7_180 () Real)
(declare-fun l_0_7_160 () Real)
(declare-fun l_0_7_159 () Real)
(declare-fun l_0_7_146 () Real)
(declare-fun l_0_7_118 () Real)
(declare-fun l_0_7_117 () Real)
(declare-fun l_0_7_84 () Real)
(declare-fun l_0_7_63 () Real)
(declare-fun l_0_7_186 () Real)
(declare-fun l_0_7_185 () Real)
(declare-fun l_0_7_165 () Real)
(declare-fun l_0_7_164 () Real)
(declare-fun l_0_7_147 () Real)
(declare-fun l_0_7_123 () Real)
(declare-fun l_0_7_122 () Real)
(declare-fun l_0_7_102 () Real)
(declare-fun l_0_7_101 () Real)
(declare-fun l_0_7_199 () Real)
(declare-fun l_0_7_203 () Real)
(declare-fun l_0_7_208 () Real)
(declare-fun l_0_7_204 () Real)
(declare-fun l_0_7_209 () Real)
(declare-fun l_0_7_210 () Real)
(declare-fun l_0_7_94 () Real)
(declare-fun l_0_7_178 () Real)
(declare-fun l_0_7_157 () Real)
(declare-fun l_0_7_115 () Real)
(declare-fun l_0_7_98 () Real)
(declare-fun l_0_7_182 () Real)
(declare-fun l_0_7_161 () Real)
(declare-fun l_0_7_119 () Real)
(declare-fun l_0_7_187 () Real)
(declare-fun l_0_7_166 () Real)
(declare-fun l_0_7_124 () Real)
(declare-fun l_0_7_103 () Real)
(declare-fun l_0_7_99 () Real)
(declare-fun l_0_7_183 () Real)
(declare-fun l_0_7_162 () Real)
(declare-fun l_0_7_120 () Real)
(declare-fun l_0_7_188 () Real)
(declare-fun l_0_7_167 () Real)
(declare-fun l_0_7_125 () Real)
(declare-fun l_0_7_104 () Real)
(declare-fun l_0_7_189 () Real)
(declare-fun l_0_7_168 () Real)
(declare-fun l_0_7_126 () Real)
(declare-fun l_0_7_105 () Real)
(declare-fun l_0_8_66 () Real)
(declare-fun l_0_8_68 () Real)
(declare-fun l_0_8_65 () Real)
(declare-fun l_0_8_67 () Real)
(declare-fun l_0_8_45 () Real)
(declare-fun l_0_8_47 () Real)
(declare-fun l_0_8_44 () Real)
(declare-fun l_0_8_46 () Real)
(declare-fun l_0_8_3 () Real)
(declare-fun l_0_8_5 () Real)
(declare-fun l_0_8_24 () Real)
(declare-fun l_0_8_26 () Real)
(declare-fun l_0_8_23 () Real)
(declare-fun l_0_8_25 () Real)
(declare-fun l_0_8_215 () Real)
(declare-fun l_0_8_213 () Real)
(declare-fun l_0_8_214 () Real)
(declare-fun l_0_8_212 () Real)
(declare-fun l_0_8_2 () Real)
(declare-fun l_0_8_4 () Real)
(declare-fun l_0_8_194 () Real)
(declare-fun l_0_8_192 () Real)
(declare-fun l_0_8_193 () Real)
(declare-fun l_0_8_191 () Real)
(declare-fun l_0_8_129 () Real)
(declare-fun l_0_8_128 () Real)
(declare-fun l_0_8_64 () Real)
(declare-fun l_0_8_43 () Real)
(declare-fun l_0_8_22 () Real)
(declare-fun l_0_8_211 () Real)
(declare-fun l_0_8_190 () Real)
(declare-fun l_0_8_1 () Real)
(declare-fun l_0_8_127 () Real)
(declare-fun l_0_8_28 () Real)
(declare-fun l_0_8_7 () Real)
(declare-fun l_0_8_32 () Real)
(declare-fun l_0_8_11 () Real)
(declare-fun l_0_8_85 () Real)
(declare-fun l_0_8_37 () Real)
(declare-fun l_0_8_169 () Real)
(declare-fun l_0_8_148 () Real)
(declare-fun l_0_8_106 () Real)
(declare-fun l_0_8_16 () Real)
(declare-fun l_0_8_70 () Real)
(declare-fun l_0_8_49 () Real)
(declare-fun l_0_8_8 () Real)
(declare-fun l_0_8_29 () Real)
(declare-fun l_0_8_217 () Real)
(declare-fun l_0_8_196 () Real)
(declare-fun l_0_8_74 () Real)
(declare-fun l_0_8_53 () Real)
(declare-fun l_0_8_33 () Real)
(declare-fun l_0_8_221 () Real)
(declare-fun l_0_8_200 () Real)
(declare-fun l_0_8_12 () Real)
(declare-fun l_0_8_86 () Real)
(declare-fun l_0_8_79 () Real)
(declare-fun l_0_8_58 () Real)
(declare-fun l_0_8_38 () Real)
(declare-fun l_0_8_226 () Real)
(declare-fun l_0_8_205 () Real)
(declare-fun l_0_8_17 () Real)
(declare-fun l_0_8_170 () Real)
(declare-fun l_0_8_149 () Real)
(declare-fun l_0_8_107 () Real)
(declare-fun l_0_8_6 () Real)
(declare-fun l_0_8_27 () Real)
(declare-fun l_0_8_130 () Real)
(declare-fun l_0_8_9 () Real)
(declare-fun l_0_8_30 () Real)
(declare-fun l_0_8_133 () Real)
(declare-fun l_0_8_34 () Real)
(declare-fun l_0_8_13 () Real)
(declare-fun l_0_8_137 () Real)
(declare-fun l_0_8_88 () Real)
(declare-fun l_0_8_39 () Real)
(declare-fun l_0_8_18 () Real)
(declare-fun l_0_8_172 () Real)
(declare-fun l_0_8_151 () Real)
(declare-fun l_0_8_142 () Real)
(declare-fun l_0_8_109 () Real)
(declare-fun l_0_8_31 () Real)
(declare-fun l_0_8_10 () Real)
(declare-fun l_0_8_35 () Real)
(declare-fun l_0_8_14 () Real)
(declare-fun l_0_8_91 () Real)
(declare-fun l_0_8_40 () Real)
(declare-fun l_0_8_175 () Real)
(declare-fun l_0_8_154 () Real)
(declare-fun l_0_8_112 () Real)
(declare-fun l_0_8_19 () Real)
(declare-fun l_0_8_36 () Real)
(declare-fun l_0_8_15 () Real)
(declare-fun l_0_8_95 () Real)
(declare-fun l_0_8_41 () Real)
(declare-fun l_0_8_179 () Real)
(declare-fun l_0_8_20 () Real)
(declare-fun l_0_8_158 () Real)
(declare-fun l_0_8_116 () Real)
(declare-fun l_0_8_42 () Real)
(declare-fun l_0_8_21 () Real)
(declare-fun l_0_8_184 () Real)
(declare-fun l_0_8_163 () Real)
(declare-fun l_0_8_121 () Real)
(declare-fun l_0_8_100 () Real)
(declare-fun l_0_8_69 () Real)
(declare-fun l_0_8_48 () Real)
(declare-fun l_0_8_216 () Real)
(declare-fun l_0_8_195 () Real)
(declare-fun l_0_8_131 () Real)
(declare-fun l_0_8_72 () Real)
(declare-fun l_0_8_71 () Real)
(declare-fun l_0_8_51 () Real)
(declare-fun l_0_8_50 () Real)
(declare-fun l_0_8_219 () Real)
(declare-fun l_0_8_218 () Real)
(declare-fun l_0_8_198 () Real)
(declare-fun l_0_8_197 () Real)
(declare-fun l_0_8_134 () Real)
(declare-fun l_0_8_76 () Real)
(declare-fun l_0_8_75 () Real)
(declare-fun l_0_8_55 () Real)
(declare-fun l_0_8_54 () Real)
(declare-fun l_0_8_223 () Real)
(declare-fun l_0_8_222 () Real)
(declare-fun l_0_8_202 () Real)
(declare-fun l_0_8_201 () Real)
(declare-fun l_0_8_138 () Real)
(declare-fun l_0_8_89 () Real)
(declare-fun l_0_8_87 () Real)
(declare-fun l_0_8_81 () Real)
(declare-fun l_0_8_80 () Real)
(declare-fun l_0_8_60 () Real)
(declare-fun l_0_8_59 () Real)
(declare-fun l_0_8_228 () Real)
(declare-fun l_0_8_227 () Real)
(declare-fun l_0_8_207 () Real)
(declare-fun l_0_8_206 () Real)
(declare-fun l_0_8_173 () Real)
(declare-fun l_0_8_171 () Real)
(declare-fun l_0_8_152 () Real)
(declare-fun l_0_8_150 () Real)
(declare-fun l_0_8_143 () Real)
(declare-fun l_0_8_110 () Real)
(declare-fun l_0_8_108 () Real)
(declare-fun l_0_8_132 () Real)
(declare-fun l_0_8_135 () Real)
(declare-fun l_0_8_139 () Real)
(declare-fun l_0_8_90 () Real)
(declare-fun l_0_8_174 () Real)
(declare-fun l_0_8_153 () Real)
(declare-fun l_0_8_144 () Real)
(declare-fun l_0_8_111 () Real)
(declare-fun l_0_8_73 () Real)
(declare-fun l_0_8_52 () Real)
(declare-fun l_0_8_136 () Real)
(declare-fun l_0_8_77 () Real)
(declare-fun l_0_8_56 () Real)
(declare-fun l_0_8_140 () Real)
(declare-fun l_0_8_93 () Real)
(declare-fun l_0_8_92 () Real)
(declare-fun l_0_8_82 () Real)
(declare-fun l_0_8_61 () Real)
(declare-fun l_0_8_177 () Real)
(declare-fun l_0_8_176 () Real)
(declare-fun l_0_8_156 () Real)
(declare-fun l_0_8_155 () Real)
(declare-fun l_0_8_145 () Real)
(declare-fun l_0_8_114 () Real)
(declare-fun l_0_8_113 () Real)
(declare-fun l_0_8_78 () Real)
(declare-fun l_0_8_57 () Real)
(declare-fun l_0_8_141 () Real)
(declare-fun l_0_8_97 () Real)
(declare-fun l_0_8_96 () Real)
(declare-fun l_0_8_83 () Real)
(declare-fun l_0_8_62 () Real)
(declare-fun l_0_8_181 () Real)
(declare-fun l_0_8_180 () Real)
(declare-fun l_0_8_160 () Real)
(declare-fun l_0_8_159 () Real)
(declare-fun l_0_8_146 () Real)
(declare-fun l_0_8_118 () Real)
(declare-fun l_0_8_117 () Real)
(declare-fun l_0_8_84 () Real)
(declare-fun l_0_8_63 () Real)
(declare-fun l_0_8_186 () Real)
(declare-fun l_0_8_185 () Real)
(declare-fun l_0_8_165 () Real)
(declare-fun l_0_8_164 () Real)
(declare-fun l_0_8_147 () Real)
(declare-fun l_0_8_123 () Real)
(declare-fun l_0_8_122 () Real)
(declare-fun l_0_8_102 () Real)
(declare-fun l_0_8_101 () Real)
(declare-fun l_0_8_220 () Real)
(declare-fun l_0_8_199 () Real)
(declare-fun l_0_8_224 () Real)
(declare-fun l_0_8_203 () Real)
(declare-fun l_0_8_229 () Real)
(declare-fun l_0_8_208 () Real)
(declare-fun l_0_8_225 () Real)
(declare-fun l_0_8_204 () Real)
(declare-fun l_0_8_230 () Real)
(declare-fun l_0_8_209 () Real)
(declare-fun l_0_8_231 () Real)
(declare-fun l_0_8_210 () Real)
(declare-fun l_0_8_94 () Real)
(declare-fun l_0_8_178 () Real)
(declare-fun l_0_8_157 () Real)
(declare-fun l_0_8_115 () Real)
(declare-fun l_0_8_98 () Real)
(declare-fun l_0_8_182 () Real)
(declare-fun l_0_8_161 () Real)
(declare-fun l_0_8_119 () Real)
(declare-fun l_0_8_187 () Real)
(declare-fun l_0_8_166 () Real)
(declare-fun l_0_8_124 () Real)
(declare-fun l_0_8_103 () Real)
(declare-fun l_0_8_99 () Real)
(declare-fun l_0_8_183 () Real)
(declare-fun l_0_8_162 () Real)
(declare-fun l_0_8_120 () Real)
(declare-fun l_0_8_188 () Real)
(declare-fun l_0_8_167 () Real)
(declare-fun l_0_8_125 () Real)
(declare-fun l_0_8_104 () Real)
(declare-fun l_0_8_189 () Real)
(declare-fun l_0_8_168 () Real)
(declare-fun l_0_8_126 () Real)
(declare-fun l_0_8_105 () Real)
(declare-fun l_0_9_69 () Real)
(declare-fun l_0_9_68 () Real)
(declare-fun l_0_9_67 () Real)
(declare-fun l_0_9_66 () Real)
(declare-fun l_0_9_65 () Real)
(declare-fun l_0_9_6 () Real)
(declare-fun l_0_9_5 () Real)
(declare-fun l_0_9_48 () Real)
(declare-fun l_0_9_47 () Real)
(declare-fun l_0_9_46 () Real)
(declare-fun l_0_9_45 () Real)
(declare-fun l_0_9_44 () Real)
(declare-fun l_0_9_4 () Real)
(declare-fun l_0_9_3 () Real)
(declare-fun l_0_9_27 () Real)
(declare-fun l_0_9_26 () Real)
(declare-fun l_0_9_25 () Real)
(declare-fun l_0_9_24 () Real)
(declare-fun l_0_9_237 () Real)
(declare-fun l_0_9_236 () Real)
(declare-fun l_0_9_235 () Real)
(declare-fun l_0_9_23 () Real)
(declare-fun l_0_9_216 () Real)
(declare-fun l_0_9_215 () Real)
(declare-fun l_0_9_214 () Real)
(declare-fun l_0_9_2 () Real)
(declare-fun l_0_9_195 () Real)
(declare-fun l_0_9_194 () Real)
(declare-fun l_0_9_193 () Real)
(declare-fun l_0_9_131 () Real)
(declare-fun l_0_9_129 () Real)
(declare-fun l_0_9_130 () Real)
(declare-fun l_0_9_128 () Real)
(declare-fun l_0_9_234 () Real)
(declare-fun l_0_9_233 () Real)
(declare-fun l_0_9_213 () Real)
(declare-fun l_0_9_212 () Real)
(declare-fun l_0_9_192 () Real)
(declare-fun l_0_9_191 () Real)
(declare-fun _a_6_ () Real)
(declare-fun l_0_9_64 () Real)
(declare-fun l_0_9_43 () Real)
(declare-fun l_0_9_232 () Real)
(declare-fun l_0_9_22 () Real)
(declare-fun l_0_9_211 () Real)
(declare-fun l_0_9_190 () Real)
(declare-fun l_0_9_1 () Real)
(declare-fun _a_7_ () Real)
(declare-fun l_0_9_71 () Real)
(declare-fun l_0_9_70 () Real)
(declare-fun l_0_9_50 () Real)
(declare-fun l_0_9_49 () Real)
(declare-fun l_0_9_8 () Real)
(declare-fun l_0_9_29 () Real)
(declare-fun l_0_9_239 () Real)
(declare-fun l_0_9_238 () Real)
(declare-fun l_0_9_28 () Real)
(declare-fun l_0_9_218 () Real)
(declare-fun l_0_9_217 () Real)
(declare-fun l_0_9_7 () Real)
(declare-fun l_0_9_197 () Real)
(declare-fun l_0_9_196 () Real)
(declare-fun _a_8_ () Real)
(declare-fun _a_9_ () Real)
(declare-fun _a_10_ () Real)
(declare-fun l_0_9_9 () Real)
(declare-fun l_0_9_73 () Real)
(declare-fun l_0_9_72 () Real)
(declare-fun l_0_9_52 () Real)
(declare-fun l_0_9_51 () Real)
(declare-fun l_0_9_31 () Real)
(declare-fun l_0_9_30 () Real)
(declare-fun l_0_9_241 () Real)
(declare-fun l_0_9_240 () Real)
(declare-fun l_0_9_220 () Real)
(declare-fun l_0_9_219 () Real)
(declare-fun l_0_9_199 () Real)
(declare-fun l_0_9_198 () Real)
(declare-fun l_0_9_10 () Real)
(declare-fun _a_11_ () Real)
(declare-fun l_0_9_127 () Real)
(declare-fun l_0_9_32 () Real)
(declare-fun l_0_9_11 () Real)
(declare-fun l_0_9_85 () Real)
(declare-fun l_0_9_37 () Real)
(declare-fun l_0_9_169 () Real)
(declare-fun l_0_9_148 () Real)
(declare-fun l_0_9_106 () Real)
(declare-fun l_0_9_16 () Real)
(declare-fun l_0_9_74 () Real)
(declare-fun l_0_9_53 () Real)
(declare-fun l_0_9_33 () Real)
(declare-fun l_0_9_242 () Real)
(declare-fun l_0_9_221 () Real)
(declare-fun l_0_9_200 () Real)
(declare-fun l_0_9_12 () Real)
(declare-fun l_0_9_86 () Real)
(declare-fun l_0_9_79 () Real)
(declare-fun l_0_9_58 () Real)
(declare-fun l_0_9_38 () Real)
(declare-fun l_0_9_247 () Real)
(declare-fun l_0_9_226 () Real)
(declare-fun l_0_9_205 () Real)
(declare-fun l_0_9_17 () Real)
(declare-fun l_0_9_170 () Real)
(declare-fun l_0_9_149 () Real)
(declare-fun l_0_9_107 () Real)
(declare-fun l_0_9_133 () Real)
(declare-fun l_0_9_34 () Real)
(declare-fun l_0_9_13 () Real)
(declare-fun l_0_9_137 () Real)
(declare-fun l_0_9_88 () Real)
(declare-fun l_0_9_39 () Real)
(declare-fun l_0_9_18 () Real)
(declare-fun l_0_9_172 () Real)
(declare-fun l_0_9_151 () Real)
(declare-fun l_0_9_142 () Real)
(declare-fun l_0_9_109 () Real)
(declare-fun l_0_9_35 () Real)
(declare-fun l_0_9_14 () Real)
(declare-fun l_0_9_91 () Real)
(declare-fun l_0_9_40 () Real)
(declare-fun l_0_9_175 () Real)
(declare-fun l_0_9_154 () Real)
(declare-fun l_0_9_112 () Real)
(declare-fun l_0_9_19 () Real)
(declare-fun l_0_9_36 () Real)
(declare-fun l_0_9_15 () Real)
(declare-fun l_0_9_95 () Real)
(declare-fun l_0_9_41 () Real)
(declare-fun l_0_9_179 () Real)
(declare-fun l_0_9_20 () Real)
(declare-fun l_0_9_158 () Real)
(declare-fun l_0_9_116 () Real)
(declare-fun l_0_9_42 () Real)
(declare-fun l_0_9_21 () Real)
(declare-fun l_0_9_184 () Real)
(declare-fun l_0_9_163 () Real)
(declare-fun l_0_9_121 () Real)
(declare-fun l_0_9_100 () Real)
(declare-fun l_0_9_134 () Real)
(declare-fun l_0_9_76 () Real)
(declare-fun l_0_9_75 () Real)
(declare-fun l_0_9_55 () Real)
(declare-fun l_0_9_54 () Real)
(declare-fun l_0_9_244 () Real)
(declare-fun l_0_9_243 () Real)
(declare-fun l_0_9_223 () Real)
(declare-fun l_0_9_222 () Real)
(declare-fun l_0_9_202 () Real)
(declare-fun l_0_9_201 () Real)
(declare-fun l_0_9_138 () Real)
(declare-fun l_0_9_89 () Real)
(declare-fun l_0_9_87 () Real)
(declare-fun l_0_9_81 () Real)
(declare-fun l_0_9_80 () Real)
(declare-fun l_0_9_60 () Real)
(declare-fun l_0_9_59 () Real)
(declare-fun l_0_9_249 () Real)
(declare-fun l_0_9_248 () Real)
(declare-fun l_0_9_228 () Real)
(declare-fun l_0_9_227 () Real)
(declare-fun l_0_9_207 () Real)
(declare-fun l_0_9_206 () Real)
(declare-fun l_0_9_173 () Real)
(declare-fun l_0_9_171 () Real)
(declare-fun l_0_9_152 () Real)
(declare-fun l_0_9_150 () Real)
(declare-fun l_0_9_143 () Real)
(declare-fun l_0_9_110 () Real)
(declare-fun l_0_9_108 () Real)
(declare-fun l_0_9_132 () Real)
(declare-fun l_0_9_135 () Real)
(declare-fun l_0_9_139 () Real)
(declare-fun l_0_9_90 () Real)
(declare-fun l_0_9_174 () Real)
(declare-fun l_0_9_153 () Real)
(declare-fun l_0_9_144 () Real)
(declare-fun l_0_9_111 () Real)
(declare-fun l_0_9_136 () Real)
(declare-fun l_0_9_77 () Real)
(declare-fun l_0_9_56 () Real)
(declare-fun l_0_9_140 () Real)
(declare-fun l_0_9_93 () Real)
(declare-fun l_0_9_92 () Real)
(declare-fun l_0_9_82 () Real)
(declare-fun l_0_9_61 () Real)
(declare-fun l_0_9_177 () Real)
(declare-fun l_0_9_176 () Real)
(declare-fun l_0_9_156 () Real)
(declare-fun l_0_9_155 () Real)
(declare-fun l_0_9_145 () Real)
(declare-fun l_0_9_114 () Real)
(declare-fun l_0_9_113 () Real)
(declare-fun l_0_9_78 () Real)
(declare-fun l_0_9_57 () Real)
(declare-fun l_0_9_141 () Real)
(declare-fun l_0_9_97 () Real)
(declare-fun l_0_9_96 () Real)
(declare-fun l_0_9_83 () Real)
(declare-fun l_0_9_62 () Real)
(declare-fun l_0_9_181 () Real)
(declare-fun l_0_9_180 () Real)
(declare-fun l_0_9_160 () Real)
(declare-fun l_0_9_159 () Real)
(declare-fun l_0_9_146 () Real)
(declare-fun l_0_9_118 () Real)
(declare-fun l_0_9_117 () Real)
(declare-fun l_0_9_84 () Real)
(declare-fun l_0_9_63 () Real)
(declare-fun l_0_9_186 () Real)
(declare-fun l_0_9_185 () Real)
(declare-fun l_0_9_165 () Real)
(declare-fun l_0_9_164 () Real)
(declare-fun l_0_9_147 () Real)
(declare-fun l_0_9_123 () Real)
(declare-fun l_0_9_122 () Real)
(declare-fun l_0_9_102 () Real)
(declare-fun l_0_9_101 () Real)
(declare-fun l_0_9_245 () Real)
(declare-fun l_0_9_224 () Real)
(declare-fun l_0_9_203 () Real)
(declare-fun l_0_9_250 () Real)
(declare-fun l_0_9_229 () Real)
(declare-fun l_0_9_208 () Real)
(declare-fun l_0_9_246 () Real)
(declare-fun l_0_9_225 () Real)
(declare-fun l_0_9_204 () Real)
(declare-fun l_0_9_251 () Real)
(declare-fun l_0_9_230 () Real)
(declare-fun l_0_9_209 () Real)
(declare-fun l_0_9_252 () Real)
(declare-fun l_0_9_231 () Real)
(declare-fun l_0_9_210 () Real)
(declare-fun l_0_9_94 () Real)
(declare-fun l_0_9_178 () Real)
(declare-fun l_0_9_157 () Real)
(declare-fun l_0_9_115 () Real)
(declare-fun l_0_9_98 () Real)
(declare-fun l_0_9_182 () Real)
(declare-fun l_0_9_161 () Real)
(declare-fun l_0_9_119 () Real)
(declare-fun l_0_9_187 () Real)
(declare-fun l_0_9_166 () Real)
(declare-fun l_0_9_124 () Real)
(declare-fun l_0_9_103 () Real)
(declare-fun l_0_9_99 () Real)
(declare-fun l_0_9_183 () Real)
(declare-fun l_0_9_162 () Real)
(declare-fun l_0_9_120 () Real)
(declare-fun l_0_9_188 () Real)
(declare-fun l_0_9_167 () Real)
(declare-fun l_0_9_125 () Real)
(declare-fun l_0_9_104 () Real)
(declare-fun l_0_9_189 () Real)
(declare-fun l_0_9_168 () Real)
(declare-fun l_0_9_126 () Real)
(declare-fun l_0_9_105 () Real)
(declare-fun l_0_10_66 () Real)
(declare-fun l_0_10_65 () Real)
(declare-fun l_0_10_45 () Real)
(declare-fun l_0_10_44 () Real)
(declare-fun l_0_10_3 () Real)
(declare-fun l_0_10_255 () Real)
(declare-fun l_0_10_254 () Real)
(declare-fun l_0_10_24 () Real)
(declare-fun l_0_10_234 () Real)
(declare-fun l_0_10_233 () Real)
(declare-fun l_0_10_23 () Real)
(declare-fun l_0_10_213 () Real)
(declare-fun l_0_10_212 () Real)
(declare-fun l_0_10_2 () Real)
(declare-fun l_0_10_192 () Real)
(declare-fun l_0_10_191 () Real)
(declare-fun l_0_10_64 () Real)
(declare-fun l_0_10_43 () Real)
(declare-fun l_0_10_253 () Real)
(declare-fun l_0_10_232 () Real)
(declare-fun l_0_10_22 () Real)
(declare-fun l_0_10_211 () Real)
(declare-fun l_0_10_190 () Real)
(declare-fun l_0_10_1 () Real)
(declare-fun l_0_10_71 () Real)
(declare-fun l_0_10_70 () Real)
(declare-fun l_0_10_50 () Real)
(declare-fun l_0_10_49 () Real)
(declare-fun l_0_10_8 () Real)
(declare-fun l_0_10_260 () Real)
(declare-fun l_0_10_259 () Real)
(declare-fun l_0_10_29 () Real)
(declare-fun l_0_10_239 () Real)
(declare-fun l_0_10_238 () Real)
(declare-fun l_0_10_28 () Real)
(declare-fun l_0_10_218 () Real)
(declare-fun l_0_10_217 () Real)
(declare-fun l_0_10_7 () Real)
(declare-fun l_0_10_197 () Real)
(declare-fun l_0_10_196 () Real)
(declare-fun l_0_10_9 () Real)
(declare-fun l_0_10_73 () Real)
(declare-fun l_0_10_72 () Real)
(declare-fun l_0_10_52 () Real)
(declare-fun l_0_10_51 () Real)
(declare-fun l_0_10_31 () Real)
(declare-fun l_0_10_30 () Real)
(declare-fun l_0_10_262 () Real)
(declare-fun l_0_10_261 () Real)
(declare-fun l_0_10_241 () Real)
(declare-fun l_0_10_240 () Real)
(declare-fun l_0_10_220 () Real)
(declare-fun l_0_10_219 () Real)
(declare-fun l_0_10_199 () Real)
(declare-fun l_0_10_198 () Real)
(declare-fun l_0_10_10 () Real)
(declare-fun l_0_10_69 () Real)
(declare-fun l_0_10_68 () Real)
(declare-fun l_0_10_67 () Real)
(declare-fun l_0_10_6 () Real)
(declare-fun l_0_10_5 () Real)
(declare-fun l_0_10_48 () Real)
(declare-fun l_0_10_47 () Real)
(declare-fun l_0_10_46 () Real)
(declare-fun l_0_10_4 () Real)
(declare-fun l_0_10_27 () Real)
(declare-fun l_0_10_26 () Real)
(declare-fun l_0_10_258 () Real)
(declare-fun l_0_10_257 () Real)
(declare-fun l_0_10_256 () Real)
(declare-fun l_0_10_25 () Real)
(declare-fun l_0_10_237 () Real)
(declare-fun l_0_10_236 () Real)
(declare-fun l_0_10_235 () Real)
(declare-fun l_0_10_216 () Real)
(declare-fun l_0_10_215 () Real)
(declare-fun l_0_10_214 () Real)
(declare-fun l_0_10_195 () Real)
(declare-fun l_0_10_194 () Real)
(declare-fun l_0_10_193 () Real)
(declare-fun l_0_10_131 () Real)
(declare-fun l_0_10_129 () Real)
(declare-fun l_0_10_130 () Real)
(declare-fun l_0_10_128 () Real)
(declare-fun l_0_10_127 () Real)
(declare-fun l_0_10_32 () Real)
(declare-fun l_0_10_11 () Real)
(declare-fun l_0_10_85 () Real)
(declare-fun l_0_10_37 () Real)
(declare-fun l_0_10_169 () Real)
(declare-fun l_0_10_148 () Real)
(declare-fun l_0_10_106 () Real)
(declare-fun l_0_10_16 () Real)
(declare-fun l_0_10_74 () Real)
(declare-fun l_0_10_53 () Real)
(declare-fun l_0_10_263 () Real)
(declare-fun l_0_10_33 () Real)
(declare-fun l_0_10_242 () Real)
(declare-fun l_0_10_221 () Real)
(declare-fun l_0_10_200 () Real)
(declare-fun l_0_10_12 () Real)
(declare-fun l_0_10_86 () Real)
(declare-fun l_0_10_79 () Real)
(declare-fun l_0_10_58 () Real)
(declare-fun l_0_10_268 () Real)
(declare-fun l_0_10_38 () Real)
(declare-fun l_0_10_247 () Real)
(declare-fun l_0_10_226 () Real)
(declare-fun l_0_10_205 () Real)
(declare-fun l_0_10_17 () Real)
(declare-fun l_0_10_170 () Real)
(declare-fun l_0_10_149 () Real)
(declare-fun l_0_10_107 () Real)
(declare-fun l_0_10_133 () Real)
(declare-fun l_0_10_34 () Real)
(declare-fun l_0_10_13 () Real)
(declare-fun l_0_10_137 () Real)
(declare-fun l_0_10_88 () Real)
(declare-fun l_0_10_39 () Real)
(declare-fun l_0_10_18 () Real)
(declare-fun l_0_10_172 () Real)
(declare-fun l_0_10_151 () Real)
(declare-fun l_0_10_142 () Real)
(declare-fun l_0_10_109 () Real)
(declare-fun l_0_10_35 () Real)
(declare-fun l_0_10_14 () Real)
(declare-fun l_0_10_91 () Real)
(declare-fun l_0_10_40 () Real)
(declare-fun l_0_10_175 () Real)
(declare-fun l_0_10_154 () Real)
(declare-fun l_0_10_112 () Real)
(declare-fun l_0_10_19 () Real)
(declare-fun l_0_10_36 () Real)
(declare-fun l_0_10_15 () Real)
(declare-fun l_0_10_95 () Real)
(declare-fun l_0_10_41 () Real)
(declare-fun l_0_10_179 () Real)
(declare-fun l_0_10_20 () Real)
(declare-fun l_0_10_158 () Real)
(declare-fun l_0_10_116 () Real)
(declare-fun l_0_10_42 () Real)
(declare-fun l_0_10_21 () Real)
(declare-fun l_0_10_184 () Real)
(declare-fun l_0_10_163 () Real)
(declare-fun l_0_10_121 () Real)
(declare-fun l_0_10_100 () Real)
(declare-fun l_0_10_134 () Real)
(declare-fun l_0_10_76 () Real)
(declare-fun l_0_10_75 () Real)
(declare-fun l_0_10_55 () Real)
(declare-fun l_0_10_54 () Real)
(declare-fun l_0_10_265 () Real)
(declare-fun l_0_10_264 () Real)
(declare-fun l_0_10_244 () Real)
(declare-fun l_0_10_243 () Real)
(declare-fun l_0_10_223 () Real)
(declare-fun l_0_10_222 () Real)
(declare-fun l_0_10_202 () Real)
(declare-fun l_0_10_201 () Real)
(declare-fun l_0_10_138 () Real)
(declare-fun l_0_10_89 () Real)
(declare-fun l_0_10_87 () Real)
(declare-fun l_0_10_81 () Real)
(declare-fun l_0_10_80 () Real)
(declare-fun l_0_10_60 () Real)
(declare-fun l_0_10_59 () Real)
(declare-fun l_0_10_270 () Real)
(declare-fun l_0_10_269 () Real)
(declare-fun l_0_10_249 () Real)
(declare-fun l_0_10_248 () Real)
(declare-fun l_0_10_228 () Real)
(declare-fun l_0_10_227 () Real)
(declare-fun l_0_10_207 () Real)
(declare-fun l_0_10_206 () Real)
(declare-fun l_0_10_173 () Real)
(declare-fun l_0_10_171 () Real)
(declare-fun l_0_10_152 () Real)
(declare-fun l_0_10_150 () Real)
(declare-fun l_0_10_143 () Real)
(declare-fun l_0_10_110 () Real)
(declare-fun l_0_10_108 () Real)
(declare-fun l_0_10_132 () Real)
(declare-fun l_0_10_135 () Real)
(declare-fun l_0_10_139 () Real)
(declare-fun l_0_10_90 () Real)
(declare-fun l_0_10_174 () Real)
(declare-fun l_0_10_153 () Real)
(declare-fun l_0_10_144 () Real)
(declare-fun l_0_10_111 () Real)
(declare-fun l_0_10_136 () Real)
(declare-fun l_0_10_77 () Real)
(declare-fun l_0_10_56 () Real)
(declare-fun l_0_10_140 () Real)
(declare-fun l_0_10_93 () Real)
(declare-fun l_0_10_92 () Real)
(declare-fun l_0_10_82 () Real)
(declare-fun l_0_10_61 () Real)
(declare-fun l_0_10_177 () Real)
(declare-fun l_0_10_176 () Real)
(declare-fun l_0_10_156 () Real)
(declare-fun l_0_10_155 () Real)
(declare-fun l_0_10_145 () Real)
(declare-fun l_0_10_114 () Real)
(declare-fun l_0_10_113 () Real)
(declare-fun l_0_10_78 () Real)
(declare-fun l_0_10_57 () Real)
(declare-fun l_0_10_141 () Real)
(declare-fun l_0_10_97 () Real)
(declare-fun l_0_10_96 () Real)
(declare-fun l_0_10_83 () Real)
(declare-fun l_0_10_62 () Real)
(declare-fun l_0_10_181 () Real)
(declare-fun l_0_10_180 () Real)
(declare-fun l_0_10_160 () Real)
(declare-fun l_0_10_159 () Real)
(declare-fun l_0_10_146 () Real)
(declare-fun l_0_10_118 () Real)
(declare-fun l_0_10_117 () Real)
(declare-fun l_0_10_84 () Real)
(declare-fun l_0_10_63 () Real)
(declare-fun l_0_10_186 () Real)
(declare-fun l_0_10_185 () Real)
(declare-fun l_0_10_165 () Real)
(declare-fun l_0_10_164 () Real)
(declare-fun l_0_10_147 () Real)
(declare-fun l_0_10_123 () Real)
(declare-fun l_0_10_122 () Real)
(declare-fun l_0_10_102 () Real)
(declare-fun l_0_10_101 () Real)
(declare-fun l_0_10_266 () Real)
(declare-fun l_0_10_245 () Real)
(declare-fun l_0_10_224 () Real)
(declare-fun l_0_10_203 () Real)
(declare-fun l_0_10_271 () Real)
(declare-fun l_0_10_250 () Real)
(declare-fun l_0_10_229 () Real)
(declare-fun l_0_10_208 () Real)
(declare-fun l_0_10_267 () Real)
(declare-fun l_0_10_246 () Real)
(declare-fun l_0_10_225 () Real)
(declare-fun l_0_10_204 () Real)
(declare-fun l_0_10_272 () Real)
(declare-fun l_0_10_251 () Real)
(declare-fun l_0_10_230 () Real)
(declare-fun l_0_10_209 () Real)
(declare-fun l_0_10_273 () Real)
(declare-fun l_0_10_252 () Real)
(declare-fun l_0_10_231 () Real)
(declare-fun l_0_10_210 () Real)
(declare-fun l_0_10_94 () Real)
(declare-fun l_0_10_178 () Real)
(declare-fun l_0_10_157 () Real)
(declare-fun l_0_10_115 () Real)
(declare-fun l_0_10_98 () Real)
(declare-fun l_0_10_182 () Real)
(declare-fun l_0_10_161 () Real)
(declare-fun l_0_10_119 () Real)
(declare-fun l_0_10_187 () Real)
(declare-fun l_0_10_166 () Real)
(declare-fun l_0_10_124 () Real)
(declare-fun l_0_10_103 () Real)
(declare-fun l_0_10_99 () Real)
(declare-fun l_0_10_183 () Real)
(declare-fun l_0_10_162 () Real)
(declare-fun l_0_10_120 () Real)
(declare-fun l_0_10_188 () Real)
(declare-fun l_0_10_167 () Real)
(declare-fun l_0_10_125 () Real)
(declare-fun l_0_10_104 () Real)
(declare-fun l_0_10_189 () Real)
(declare-fun l_0_10_168 () Real)
(declare-fun l_0_10_126 () Real)
(declare-fun l_0_10_105 () Real)
(declare-fun l_0_11_66 () Real)
(declare-fun l_0_11_65 () Real)
(declare-fun l_0_11_45 () Real)
(declare-fun l_0_11_44 () Real)
(declare-fun l_0_11_3 () Real)
(declare-fun l_0_11_276 () Real)
(declare-fun l_0_11_275 () Real)
(declare-fun l_0_11_255 () Real)
(declare-fun l_0_11_254 () Real)
(declare-fun l_0_11_24 () Real)
(declare-fun l_0_11_234 () Real)
(declare-fun l_0_11_233 () Real)
(declare-fun l_0_11_23 () Real)
(declare-fun l_0_11_213 () Real)
(declare-fun l_0_11_212 () Real)
(declare-fun l_0_11_2 () Real)
(declare-fun l_0_11_192 () Real)
(declare-fun l_0_11_191 () Real)
(declare-fun _a_0_ () Real)
(declare-fun l_0_11_92 () Real)
(declare-fun l_0_11_87 () Real)
(declare-fun l_0_11_91 () Real)
(declare-fun l_0_11_86 () Real)
(declare-fun l_0_11_82 () Real)
(declare-fun l_0_11_73 () Real)
(declare-fun l_0_11_81 () Real)
(declare-fun l_0_11_72 () Real)
(declare-fun l_0_11_80 () Real)
(declare-fun l_0_11_71 () Real)
(declare-fun l_0_11_79 () Real)
(declare-fun l_0_11_70 () Real)
(declare-fun l_0_11_61 () Real)
(declare-fun l_0_11_52 () Real)
(declare-fun l_0_11_60 () Real)
(declare-fun l_0_11_51 () Real)
(declare-fun l_0_11_59 () Real)
(declare-fun l_0_11_50 () Real)
(declare-fun l_0_11_58 () Real)
(declare-fun l_0_11_49 () Real)
(declare-fun l_0_11_40 () Real)
(declare-fun l_0_11_31 () Real)
(declare-fun l_0_11_39 () Real)
(declare-fun l_0_11_30 () Real)
(declare-fun l_0_11_38 () Real)
(declare-fun l_0_11_29 () Real)
(declare-fun l_0_11_292 () Real)
(declare-fun l_0_11_283 () Real)
(declare-fun l_0_11_291 () Real)
(declare-fun l_0_11_282 () Real)
(declare-fun l_0_11_290 () Real)
(declare-fun l_0_11_281 () Real)
(declare-fun l_0_11_289 () Real)
(declare-fun l_0_11_280 () Real)
(declare-fun l_0_11_37 () Real)
(declare-fun l_0_11_28 () Real)
(declare-fun l_0_11_271 () Real)
(declare-fun l_0_11_262 () Real)
(declare-fun l_0_11_270 () Real)
(declare-fun l_0_11_261 () Real)
(declare-fun l_0_11_269 () Real)
(declare-fun l_0_11_260 () Real)
(declare-fun l_0_11_268 () Real)
(declare-fun l_0_11_259 () Real)
(declare-fun l_0_11_250 () Real)
(declare-fun l_0_11_241 () Real)
(declare-fun l_0_11_249 () Real)
(declare-fun l_0_11_240 () Real)
(declare-fun l_0_11_248 () Real)
(declare-fun l_0_11_239 () Real)
(declare-fun l_0_11_247 () Real)
(declare-fun l_0_11_238 () Real)
(declare-fun l_0_11_229 () Real)
(declare-fun l_0_11_220 () Real)
(declare-fun l_0_11_228 () Real)
(declare-fun l_0_11_219 () Real)
(declare-fun l_0_11_227 () Real)
(declare-fun l_0_11_218 () Real)
(declare-fun l_0_11_226 () Real)
(declare-fun l_0_11_217 () Real)
(declare-fun l_0_11_208 () Real)
(declare-fun l_0_11_199 () Real)
(declare-fun l_0_11_207 () Real)
(declare-fun l_0_11_198 () Real)
(declare-fun l_0_11_206 () Real)
(declare-fun l_0_11_197 () Real)
(declare-fun l_0_11_205 () Real)
(declare-fun l_0_11_196 () Real)
(declare-fun l_0_11_9 () Real)
(declare-fun l_0_11_18 () Real)
(declare-fun l_0_11_176 () Real)
(declare-fun l_0_11_171 () Real)
(declare-fun l_0_11_175 () Real)
(declare-fun l_0_11_170 () Real)
(declare-fun l_0_11_8 () Real)
(declare-fun l_0_11_17 () Real)
(declare-fun l_0_11_7 () Real)
(declare-fun l_0_11_16 () Real)
(declare-fun l_0_11_155 () Real)
(declare-fun l_0_11_150 () Real)
(declare-fun l_0_11_154 () Real)
(declare-fun l_0_11_149 () Real)
(declare-fun l_0_11_113 () Real)
(declare-fun l_0_11_108 () Real)
(declare-fun l_0_11_112 () Real)
(declare-fun l_0_11_107 () Real)
(declare-fun l_0_11_19 () Real)
(declare-fun l_0_11_10 () Real)
(declare-fun _a_1_ () Real)
(declare-fun _a_2_ () Real)
(declare-fun _a_3_ () Real)
(declare-fun l_0_11_84 () Real)
(declare-fun l_0_11_83 () Real)
(declare-fun l_0_11_63 () Real)
(declare-fun l_0_11_62 () Real)
(declare-fun l_0_11_42 () Real)
(declare-fun l_0_11_41 () Real)
(declare-fun l_0_11_294 () Real)
(declare-fun l_0_11_293 () Real)
(declare-fun l_0_11_273 () Real)
(declare-fun l_0_11_272 () Real)
(declare-fun l_0_11_252 () Real)
(declare-fun l_0_11_251 () Real)
(declare-fun l_0_11_231 () Real)
(declare-fun l_0_11_230 () Real)
(declare-fun l_0_11_210 () Real)
(declare-fun l_0_11_21 () Real)
(declare-fun l_0_11_209 () Real)
(declare-fun l_0_11_20 () Real)
(declare-fun l_0_11_185 () Real)
(declare-fun l_0_11_184 () Real)
(declare-fun l_0_11_164 () Real)
(declare-fun l_0_11_163 () Real)
(declare-fun l_0_11_122 () Real)
(declare-fun l_0_11_121 () Real)
(declare-fun l_0_11_101 () Real)
(declare-fun l_0_11_100 () Real)
(declare-fun _a_4_ () Real)
(declare-fun _a_5_ () Real)
(declare-fun l_0_11_69 () Real)
(declare-fun l_0_11_68 () Real)
(declare-fun l_0_11_67 () Real)
(declare-fun l_0_11_6 () Real)
(declare-fun l_0_11_5 () Real)
(declare-fun l_0_11_48 () Real)
(declare-fun l_0_11_47 () Real)
(declare-fun l_0_11_46 () Real)
(declare-fun l_0_11_4 () Real)
(declare-fun l_0_11_27 () Real)
(declare-fun l_0_11_26 () Real)
(declare-fun l_0_11_25 () Real)
(declare-fun l_0_11_132 () Real)
(declare-fun l_0_11_131 () Real)
(declare-fun l_0_11_130 () Real)
(declare-fun l_0_11_279 () Real)
(declare-fun l_0_11_278 () Real)
(declare-fun l_0_11_277 () Real)
(declare-fun l_0_11_258 () Real)
(declare-fun l_0_11_257 () Real)
(declare-fun l_0_11_256 () Real)
(declare-fun l_0_11_237 () Real)
(declare-fun l_0_11_236 () Real)
(declare-fun l_0_11_235 () Real)
(declare-fun l_0_11_216 () Real)
(declare-fun l_0_11_215 () Real)
(declare-fun l_0_11_214 () Real)
(declare-fun l_0_11_195 () Real)
(declare-fun l_0_11_194 () Real)
(declare-fun l_0_11_193 () Real)
(declare-fun l_0_11_129 () Real)
(declare-fun l_0_11_128 () Real)
(declare-fun l_0_11_22 () Real)
(declare-fun l_0_11_1 () Real)
(declare-fun l_0_11_64 () Real)
(declare-fun l_0_11_43 () Real)
(declare-fun l_0_11_274 () Real)
(declare-fun l_0_11_253 () Real)
(declare-fun l_0_11_232 () Real)
(declare-fun l_0_11_211 () Real)
(declare-fun l_0_11_190 () Real)
(declare-fun l_0_11_127 () Real)
(declare-fun l_0_11_32 () Real)
(declare-fun l_0_11_11 () Real)
(declare-fun l_0_11_85 () Real)
(declare-fun l_0_11_169 () Real)
(declare-fun l_0_11_148 () Real)
(declare-fun l_0_11_106 () Real)
(declare-fun l_0_11_74 () Real)
(declare-fun l_0_11_53 () Real)
(declare-fun l_0_11_284 () Real)
(declare-fun l_0_11_263 () Real)
(declare-fun l_0_11_33 () Real)
(declare-fun l_0_11_242 () Real)
(declare-fun l_0_11_221 () Real)
(declare-fun l_0_11_200 () Real)
(declare-fun l_0_11_12 () Real)
(declare-fun l_0_11_133 () Real)
(declare-fun l_0_11_34 () Real)
(declare-fun l_0_11_13 () Real)
(declare-fun l_0_11_137 () Real)
(declare-fun l_0_11_88 () Real)
(declare-fun l_0_11_172 () Real)
(declare-fun l_0_11_151 () Real)
(declare-fun l_0_11_142 () Real)
(declare-fun l_0_11_109 () Real)
(declare-fun l_0_11_35 () Real)
(declare-fun l_0_11_14 () Real)
(declare-fun l_0_11_36 () Real)
(declare-fun l_0_11_15 () Real)
(declare-fun l_0_11_95 () Real)
(declare-fun l_0_11_179 () Real)
(declare-fun l_0_11_158 () Real)
(declare-fun l_0_11_116 () Real)
(declare-fun l_0_11_134 () Real)
(declare-fun l_0_11_76 () Real)
(declare-fun l_0_11_75 () Real)
(declare-fun l_0_11_55 () Real)
(declare-fun l_0_11_54 () Real)
(declare-fun l_0_11_286 () Real)
(declare-fun l_0_11_285 () Real)
(declare-fun l_0_11_265 () Real)
(declare-fun l_0_11_264 () Real)
(declare-fun l_0_11_244 () Real)
(declare-fun l_0_11_243 () Real)
(declare-fun l_0_11_223 () Real)
(declare-fun l_0_11_222 () Real)
(declare-fun l_0_11_202 () Real)
(declare-fun l_0_11_201 () Real)
(declare-fun l_0_11_138 () Real)
(declare-fun l_0_11_89 () Real)
(declare-fun l_0_11_173 () Real)
(declare-fun l_0_11_152 () Real)
(declare-fun l_0_11_143 () Real)
(declare-fun l_0_11_110 () Real)
(declare-fun l_0_11_135 () Real)
(declare-fun l_0_11_139 () Real)
(declare-fun l_0_11_90 () Real)
(declare-fun l_0_11_174 () Real)
(declare-fun l_0_11_153 () Real)
(declare-fun l_0_11_144 () Real)
(declare-fun l_0_11_111 () Real)
(declare-fun l_0_11_136 () Real)
(declare-fun l_0_11_77 () Real)
(declare-fun l_0_11_56 () Real)
(declare-fun l_0_11_140 () Real)
(declare-fun l_0_11_93 () Real)
(declare-fun l_0_11_177 () Real)
(declare-fun l_0_11_156 () Real)
(declare-fun l_0_11_145 () Real)
(declare-fun l_0_11_114 () Real)
(declare-fun l_0_11_78 () Real)
(declare-fun l_0_11_57 () Real)
(declare-fun l_0_11_141 () Real)
(declare-fun l_0_11_97 () Real)
(declare-fun l_0_11_96 () Real)
(declare-fun l_0_11_181 () Real)
(declare-fun l_0_11_180 () Real)
(declare-fun l_0_11_160 () Real)
(declare-fun l_0_11_159 () Real)
(declare-fun l_0_11_146 () Real)
(declare-fun l_0_11_118 () Real)
(declare-fun l_0_11_117 () Real)
(declare-fun l_0_11_186 () Real)
(declare-fun l_0_11_165 () Real)
(declare-fun l_0_11_147 () Real)
(declare-fun l_0_11_123 () Real)
(declare-fun l_0_11_102 () Real)
(declare-fun l_0_11_287 () Real)
(declare-fun l_0_11_266 () Real)
(declare-fun l_0_11_245 () Real)
(declare-fun l_0_11_224 () Real)
(declare-fun l_0_11_203 () Real)
(declare-fun l_0_11_288 () Real)
(declare-fun l_0_11_267 () Real)
(declare-fun l_0_11_246 () Real)
(declare-fun l_0_11_225 () Real)
(declare-fun l_0_11_204 () Real)
(declare-fun l_0_11_94 () Real)
(declare-fun l_0_11_178 () Real)
(declare-fun l_0_11_157 () Real)
(declare-fun l_0_11_115 () Real)
(declare-fun l_0_11_98 () Real)
(declare-fun l_0_11_182 () Real)
(declare-fun l_0_11_161 () Real)
(declare-fun l_0_11_119 () Real)
(declare-fun l_0_11_187 () Real)
(declare-fun l_0_11_166 () Real)
(declare-fun l_0_11_124 () Real)
(declare-fun l_0_11_103 () Real)
(declare-fun l_0_11_99 () Real)
(declare-fun l_0_11_183 () Real)
(declare-fun l_0_11_162 () Real)
(declare-fun l_0_11_120 () Real)
(declare-fun l_0_11_188 () Real)
(declare-fun l_0_11_167 () Real)
(declare-fun l_0_11_125 () Real)
(declare-fun l_0_11_104 () Real)
(declare-fun l_0_11_189 () Real)
(declare-fun l_0_11_168 () Real)
(declare-fun l_0_11_126 () Real)
(declare-fun l_0_11_105 () Real)
(declare-fun l_0_12_87 () Real)
(declare-fun l_0_12_86 () Real)
(declare-fun l_0_12_69 () Real)
(declare-fun l_0_12_68 () Real)
(declare-fun l_0_12_67 () Real)
(declare-fun l_0_12_66 () Real)
(declare-fun l_0_12_65 () Real)
(declare-fun l_0_12_6 () Real)
(declare-fun l_0_12_5 () Real)
(declare-fun l_0_12_48 () Real)
(declare-fun l_0_12_47 () Real)
(declare-fun l_0_12_46 () Real)
(declare-fun l_0_12_45 () Real)
(declare-fun l_0_12_44 () Real)
(declare-fun l_0_12_4 () Real)
(declare-fun l_0_12_27 () Real)
(declare-fun l_0_12_26 () Real)
(declare-fun l_0_12_25 () Real)
(declare-fun l_0_12_171 () Real)
(declare-fun l_0_12_170 () Real)
(declare-fun l_0_12_150 () Real)
(declare-fun l_0_12_149 () Real)
(declare-fun l_0_12_132 () Real)
(declare-fun l_0_12_131 () Real)
(declare-fun l_0_12_130 () Real)
(declare-fun l_0_12_108 () Real)
(declare-fun l_0_12_107 () Real)
(declare-fun l_0_12_300 () Real)
(declare-fun l_0_12_3 () Real)
(declare-fun l_0_12_299 () Real)
(declare-fun l_0_12_298 () Real)
(declare-fun l_0_12_279 () Real)
(declare-fun l_0_12_278 () Real)
(declare-fun l_0_12_277 () Real)
(declare-fun l_0_12_258 () Real)
(declare-fun l_0_12_257 () Real)
(declare-fun l_0_12_256 () Real)
(declare-fun l_0_12_24 () Real)
(declare-fun l_0_12_237 () Real)
(declare-fun l_0_12_236 () Real)
(declare-fun l_0_12_235 () Real)
(declare-fun l_0_12_23 () Real)
(declare-fun l_0_12_216 () Real)
(declare-fun l_0_12_215 () Real)
(declare-fun l_0_12_214 () Real)
(declare-fun l_0_12_2 () Real)
(declare-fun l_0_12_195 () Real)
(declare-fun l_0_12_194 () Real)
(declare-fun l_0_12_193 () Real)
(declare-fun l_0_12_129 () Real)
(declare-fun l_0_12_128 () Real)
(declare-fun l_0_12_297 () Real)
(declare-fun l_0_12_296 () Real)
(declare-fun l_0_12_276 () Real)
(declare-fun l_0_12_275 () Real)
(declare-fun l_0_12_255 () Real)
(declare-fun l_0_12_254 () Real)
(declare-fun l_0_12_234 () Real)
(declare-fun l_0_12_233 () Real)
(declare-fun l_0_12_213 () Real)
(declare-fun l_0_12_212 () Real)
(declare-fun l_0_12_192 () Real)
(declare-fun l_0_12_191 () Real)
(declare-fun l_0_12_92 () Real)
(declare-fun l_0_12_91 () Real)
(declare-fun l_0_12_82 () Real)
(declare-fun l_0_12_73 () Real)
(declare-fun l_0_12_81 () Real)
(declare-fun l_0_12_72 () Real)
(declare-fun l_0_12_80 () Real)
(declare-fun l_0_12_71 () Real)
(declare-fun l_0_12_79 () Real)
(declare-fun l_0_12_70 () Real)
(declare-fun l_0_12_61 () Real)
(declare-fun l_0_12_52 () Real)
(declare-fun l_0_12_60 () Real)
(declare-fun l_0_12_51 () Real)
(declare-fun l_0_12_59 () Real)
(declare-fun l_0_12_50 () Real)
(declare-fun l_0_12_58 () Real)
(declare-fun l_0_12_49 () Real)
(declare-fun l_0_12_40 () Real)
(declare-fun l_0_12_31 () Real)
(declare-fun l_0_12_313 () Real)
(declare-fun l_0_12_304 () Real)
(declare-fun l_0_12_312 () Real)
(declare-fun l_0_12_303 () Real)
(declare-fun l_0_12_311 () Real)
(declare-fun l_0_12_302 () Real)
(declare-fun l_0_12_310 () Real)
(declare-fun l_0_12_301 () Real)
(declare-fun l_0_12_39 () Real)
(declare-fun l_0_12_30 () Real)
(declare-fun l_0_12_38 () Real)
(declare-fun l_0_12_29 () Real)
(declare-fun l_0_12_292 () Real)
(declare-fun l_0_12_283 () Real)
(declare-fun l_0_12_291 () Real)
(declare-fun l_0_12_282 () Real)
(declare-fun l_0_12_290 () Real)
(declare-fun l_0_12_281 () Real)
(declare-fun l_0_12_289 () Real)
(declare-fun l_0_12_280 () Real)
(declare-fun l_0_12_37 () Real)
(declare-fun l_0_12_28 () Real)
(declare-fun l_0_12_271 () Real)
(declare-fun l_0_12_262 () Real)
(declare-fun l_0_12_270 () Real)
(declare-fun l_0_12_261 () Real)
(declare-fun l_0_12_269 () Real)
(declare-fun l_0_12_260 () Real)
(declare-fun l_0_12_268 () Real)
(declare-fun l_0_12_259 () Real)
(declare-fun l_0_12_250 () Real)
(declare-fun l_0_12_241 () Real)
(declare-fun l_0_12_249 () Real)
(declare-fun l_0_12_240 () Real)
(declare-fun l_0_12_248 () Real)
(declare-fun l_0_12_239 () Real)
(declare-fun l_0_12_247 () Real)
(declare-fun l_0_12_238 () Real)
(declare-fun l_0_12_229 () Real)
(declare-fun l_0_12_220 () Real)
(declare-fun l_0_12_228 () Real)
(declare-fun l_0_12_219 () Real)
(declare-fun l_0_12_227 () Real)
(declare-fun l_0_12_218 () Real)
(declare-fun l_0_12_226 () Real)
(declare-fun l_0_12_217 () Real)
(declare-fun l_0_12_208 () Real)
(declare-fun l_0_12_199 () Real)
(declare-fun l_0_12_207 () Real)
(declare-fun l_0_12_198 () Real)
(declare-fun l_0_12_206 () Real)
(declare-fun l_0_12_197 () Real)
(declare-fun l_0_12_205 () Real)
(declare-fun l_0_12_196 () Real)
(declare-fun l_0_12_9 () Real)
(declare-fun l_0_12_18 () Real)
(declare-fun l_0_12_176 () Real)
(declare-fun l_0_12_175 () Real)
(declare-fun l_0_12_8 () Real)
(declare-fun l_0_12_17 () Real)
(declare-fun l_0_12_7 () Real)
(declare-fun l_0_12_16 () Real)
(declare-fun l_0_12_155 () Real)
(declare-fun l_0_12_154 () Real)
(declare-fun l_0_12_113 () Real)
(declare-fun l_0_12_112 () Real)
(declare-fun l_0_12_19 () Real)
(declare-fun l_0_12_10 () Real)
(declare-fun l_0_12_84 () Real)
(declare-fun l_0_12_83 () Real)
(declare-fun l_0_12_63 () Real)
(declare-fun l_0_12_62 () Real)
(declare-fun l_0_12_42 () Real)
(declare-fun l_0_12_41 () Real)
(declare-fun l_0_12_315 () Real)
(declare-fun l_0_12_314 () Real)
(declare-fun l_0_12_294 () Real)
(declare-fun l_0_12_293 () Real)
(declare-fun l_0_12_273 () Real)
(declare-fun l_0_12_272 () Real)
(declare-fun l_0_12_252 () Real)
(declare-fun l_0_12_251 () Real)
(declare-fun l_0_12_231 () Real)
(declare-fun l_0_12_230 () Real)
(declare-fun l_0_12_210 () Real)
(declare-fun l_0_12_21 () Real)
(declare-fun l_0_12_209 () Real)
(declare-fun l_0_12_20 () Real)
(declare-fun l_0_12_185 () Real)
(declare-fun l_0_12_184 () Real)
(declare-fun l_0_12_164 () Real)
(declare-fun l_0_12_163 () Real)
(declare-fun l_0_12_122 () Real)
(declare-fun l_0_12_121 () Real)
(declare-fun l_0_12_101 () Real)
(declare-fun l_0_12_100 () Real)
(declare-fun l_0_12_22 () Real)
(declare-fun l_0_12_1 () Real)
(declare-fun l_0_12_64 () Real)
(declare-fun l_0_12_43 () Real)
(declare-fun l_0_12_295 () Real)
(declare-fun l_0_12_274 () Real)
(declare-fun l_0_12_253 () Real)
(declare-fun l_0_12_232 () Real)
(declare-fun l_0_12_211 () Real)
(declare-fun l_0_12_190 () Real)
(declare-fun l_0_12_127 () Real)
(declare-fun l_0_12_32 () Real)
(declare-fun l_0_12_11 () Real)
(declare-fun l_0_12_85 () Real)
(declare-fun l_0_12_169 () Real)
(declare-fun l_0_12_148 () Real)
(declare-fun l_0_12_106 () Real)
(declare-fun l_0_12_74 () Real)
(declare-fun l_0_12_53 () Real)
(declare-fun l_0_12_305 () Real)
(declare-fun l_0_12_284 () Real)
(declare-fun l_0_12_263 () Real)
(declare-fun l_0_12_33 () Real)
(declare-fun l_0_12_242 () Real)
(declare-fun l_0_12_221 () Real)
(declare-fun l_0_12_200 () Real)
(declare-fun l_0_12_12 () Real)
(declare-fun l_0_12_133 () Real)
(declare-fun l_0_12_34 () Real)
(declare-fun l_0_12_13 () Real)
(declare-fun l_0_12_137 () Real)
(declare-fun l_0_12_88 () Real)
(declare-fun l_0_12_172 () Real)
(declare-fun l_0_12_151 () Real)
(declare-fun l_0_12_142 () Real)
(declare-fun l_0_12_109 () Real)
(declare-fun l_0_12_35 () Real)
(declare-fun l_0_12_14 () Real)
(declare-fun l_0_12_36 () Real)
(declare-fun l_0_12_15 () Real)
(declare-fun l_0_12_95 () Real)
(declare-fun l_0_12_179 () Real)
(declare-fun l_0_12_158 () Real)
(declare-fun l_0_12_116 () Real)
(declare-fun l_0_12_134 () Real)
(declare-fun l_0_12_76 () Real)
(declare-fun l_0_12_75 () Real)
(declare-fun l_0_12_55 () Real)
(declare-fun l_0_12_54 () Real)
(declare-fun l_0_12_307 () Real)
(declare-fun l_0_12_306 () Real)
(declare-fun l_0_12_286 () Real)
(declare-fun l_0_12_285 () Real)
(declare-fun l_0_12_265 () Real)
(declare-fun l_0_12_264 () Real)
(declare-fun l_0_12_244 () Real)
(declare-fun l_0_12_243 () Real)
(declare-fun l_0_12_223 () Real)
(declare-fun l_0_12_222 () Real)
(declare-fun l_0_12_202 () Real)
(declare-fun l_0_12_201 () Real)
(declare-fun l_0_12_138 () Real)
(declare-fun l_0_12_89 () Real)
(declare-fun l_0_12_173 () Real)
(declare-fun l_0_12_152 () Real)
(declare-fun l_0_12_143 () Real)
(declare-fun l_0_12_110 () Real)
(declare-fun l_0_12_135 () Real)
(declare-fun l_0_12_139 () Real)
(declare-fun l_0_12_90 () Real)
(declare-fun l_0_12_174 () Real)
(declare-fun l_0_12_153 () Real)
(declare-fun l_0_12_144 () Real)
(declare-fun l_0_12_111 () Real)
(declare-fun l_0_12_136 () Real)
(declare-fun l_0_12_77 () Real)
(declare-fun l_0_12_56 () Real)
(declare-fun l_0_12_140 () Real)
(declare-fun l_0_12_93 () Real)
(declare-fun l_0_12_177 () Real)
(declare-fun l_0_12_156 () Real)
(declare-fun l_0_12_145 () Real)
(declare-fun l_0_12_114 () Real)
(declare-fun l_0_12_78 () Real)
(declare-fun l_0_12_57 () Real)
(declare-fun l_0_12_141 () Real)
(declare-fun l_0_12_97 () Real)
(declare-fun l_0_12_96 () Real)
(declare-fun l_0_12_181 () Real)
(declare-fun l_0_12_180 () Real)
(declare-fun l_0_12_160 () Real)
(declare-fun l_0_12_159 () Real)
(declare-fun l_0_12_146 () Real)
(declare-fun l_0_12_118 () Real)
(declare-fun l_0_12_117 () Real)
(declare-fun l_0_12_186 () Real)
(declare-fun l_0_12_165 () Real)
(declare-fun l_0_12_147 () Real)
(declare-fun l_0_12_123 () Real)
(declare-fun l_0_12_102 () Real)
(declare-fun l_0_12_308 () Real)
(declare-fun l_0_12_287 () Real)
(declare-fun l_0_12_266 () Real)
(declare-fun l_0_12_245 () Real)
(declare-fun l_0_12_224 () Real)
(declare-fun l_0_12_203 () Real)
(declare-fun l_0_12_309 () Real)
(declare-fun l_0_12_288 () Real)
(declare-fun l_0_12_267 () Real)
(declare-fun l_0_12_246 () Real)
(declare-fun l_0_12_225 () Real)
(declare-fun l_0_12_204 () Real)
(declare-fun l_0_12_94 () Real)
(declare-fun l_0_12_178 () Real)
(declare-fun l_0_12_157 () Real)
(declare-fun l_0_12_115 () Real)
(declare-fun l_0_12_98 () Real)
(declare-fun l_0_12_182 () Real)
(declare-fun l_0_12_161 () Real)
(declare-fun l_0_12_119 () Real)
(declare-fun l_0_12_187 () Real)
(declare-fun l_0_12_166 () Real)
(declare-fun l_0_12_124 () Real)
(declare-fun l_0_12_103 () Real)
(declare-fun l_0_12_99 () Real)
(declare-fun l_0_12_183 () Real)
(declare-fun l_0_12_162 () Real)
(declare-fun l_0_12_120 () Real)
(declare-fun l_0_12_188 () Real)
(declare-fun l_0_12_167 () Real)
(declare-fun l_0_12_125 () Real)
(declare-fun l_0_12_104 () Real)
(declare-fun l_0_12_189 () Real)
(declare-fun l_0_12_168 () Real)
(declare-fun l_0_12_126 () Real)
(declare-fun l_0_12_105 () Real)
(declare-fun l_0_13_66 () Real)
(declare-fun l_0_13_65 () Real)
(declare-fun l_0_13_45 () Real)
(declare-fun l_0_13_44 () Real)
(declare-fun l_0_13_3 () Real)
(declare-fun l_0_13_24 () Real)
(declare-fun l_0_13_23 () Real)
(declare-fun l_0_13_2 () Real)
(declare-fun l_0_13_192 () Real)
(declare-fun l_0_13_191 () Real)
(declare-fun l_0_13_64 () Real)
(declare-fun l_0_13_43 () Real)
(declare-fun l_0_13_22 () Real)
(declare-fun l_0_13_190 () Real)
(declare-fun l_0_13_1 () Real)
(declare-fun l_0_13_68 () Real)
(declare-fun l_0_13_67 () Real)
(declare-fun l_0_13_47 () Real)
(declare-fun l_0_13_46 () Real)
(declare-fun l_0_13_5 () Real)
(declare-fun l_0_13_26 () Real)
(declare-fun l_0_13_25 () Real)
(declare-fun l_0_13_4 () Real)
(declare-fun l_0_13_194 () Real)
(declare-fun l_0_13_193 () Real)
(declare-fun l_0_13_129 () Real)
(declare-fun l_0_13_128 () Real)
(declare-fun l_0_13_127 () Real)
(declare-fun l_0_13_28 () Real)
(declare-fun l_0_13_7 () Real)
(declare-fun l_0_13_32 () Real)
(declare-fun l_0_13_11 () Real)
(declare-fun l_0_13_85 () Real)
(declare-fun l_0_13_37 () Real)
(declare-fun l_0_13_169 () Real)
(declare-fun l_0_13_148 () Real)
(declare-fun l_0_13_106 () Real)
(declare-fun l_0_13_16 () Real)
(declare-fun l_0_13_70 () Real)
(declare-fun l_0_13_49 () Real)
(declare-fun l_0_13_8 () Real)
(declare-fun l_0_13_29 () Real)
(declare-fun l_0_13_196 () Real)
(declare-fun l_0_13_74 () Real)
(declare-fun l_0_13_53 () Real)
(declare-fun l_0_13_33 () Real)
(declare-fun l_0_13_200 () Real)
(declare-fun l_0_13_12 () Real)
(declare-fun l_0_13_86 () Real)
(declare-fun l_0_13_79 () Real)
(declare-fun l_0_13_58 () Real)
(declare-fun l_0_13_38 () Real)
(declare-fun l_0_13_205 () Real)
(declare-fun l_0_13_17 () Real)
(declare-fun l_0_13_170 () Real)
(declare-fun l_0_13_149 () Real)
(declare-fun l_0_13_107 () Real)
(declare-fun l_0_13_6 () Real)
(declare-fun l_0_13_27 () Real)
(declare-fun l_0_13_130 () Real)
(declare-fun l_0_13_9 () Real)
(declare-fun l_0_13_30 () Real)
(declare-fun l_0_13_133 () Real)
(declare-fun l_0_13_34 () Real)
(declare-fun l_0_13_13 () Real)
(declare-fun l_0_13_137 () Real)
(declare-fun l_0_13_88 () Real)
(declare-fun l_0_13_39 () Real)
(declare-fun l_0_13_18 () Real)
(declare-fun l_0_13_172 () Real)
(declare-fun l_0_13_151 () Real)
(declare-fun l_0_13_142 () Real)
(declare-fun l_0_13_109 () Real)
(declare-fun l_0_13_31 () Real)
(declare-fun l_0_13_10 () Real)
(declare-fun l_0_13_35 () Real)
(declare-fun l_0_13_14 () Real)
(declare-fun l_0_13_91 () Real)
(declare-fun l_0_13_40 () Real)
(declare-fun l_0_13_175 () Real)
(declare-fun l_0_13_154 () Real)
(declare-fun l_0_13_112 () Real)
(declare-fun l_0_13_19 () Real)
(declare-fun l_0_13_36 () Real)
(declare-fun l_0_13_15 () Real)
(declare-fun l_0_13_95 () Real)
(declare-fun l_0_13_41 () Real)
(declare-fun l_0_13_179 () Real)
(declare-fun l_0_13_20 () Real)
(declare-fun l_0_13_158 () Real)
(declare-fun l_0_13_116 () Real)
(declare-fun l_0_13_42 () Real)
(declare-fun l_0_13_21 () Real)
(declare-fun l_0_13_184 () Real)
(declare-fun l_0_13_163 () Real)
(declare-fun l_0_13_121 () Real)
(declare-fun l_0_13_100 () Real)
(declare-fun l_0_13_69 () Real)
(declare-fun l_0_13_48 () Real)
(declare-fun l_0_13_195 () Real)
(declare-fun l_0_13_131 () Real)
(declare-fun l_0_13_72 () Real)
(declare-fun l_0_13_71 () Real)
(declare-fun l_0_13_51 () Real)
(declare-fun l_0_13_50 () Real)
(declare-fun l_0_13_198 () Real)
(declare-fun l_0_13_197 () Real)
(declare-fun l_0_13_134 () Real)
(declare-fun l_0_13_76 () Real)
(declare-fun l_0_13_75 () Real)
(declare-fun l_0_13_55 () Real)
(declare-fun l_0_13_54 () Real)
(declare-fun l_0_13_202 () Real)
(declare-fun l_0_13_201 () Real)
(declare-fun l_0_13_138 () Real)
(declare-fun l_0_13_89 () Real)
(declare-fun l_0_13_87 () Real)
(declare-fun l_0_13_81 () Real)
(declare-fun l_0_13_80 () Real)
(declare-fun l_0_13_60 () Real)
(declare-fun l_0_13_59 () Real)
(declare-fun l_0_13_207 () Real)
(declare-fun l_0_13_206 () Real)
(declare-fun l_0_13_173 () Real)
(declare-fun l_0_13_171 () Real)
(declare-fun l_0_13_152 () Real)
(declare-fun l_0_13_150 () Real)
(declare-fun l_0_13_143 () Real)
(declare-fun l_0_13_110 () Real)
(declare-fun l_0_13_108 () Real)
(declare-fun l_0_13_132 () Real)
(declare-fun l_0_13_135 () Real)
(declare-fun l_0_13_139 () Real)
(declare-fun l_0_13_90 () Real)
(declare-fun l_0_13_174 () Real)
(declare-fun l_0_13_153 () Real)
(declare-fun l_0_13_144 () Real)
(declare-fun l_0_13_111 () Real)
(declare-fun l_0_13_73 () Real)
(declare-fun l_0_13_52 () Real)
(declare-fun l_0_13_136 () Real)
(declare-fun l_0_13_77 () Real)
(declare-fun l_0_13_56 () Real)
(declare-fun l_0_13_140 () Real)
(declare-fun l_0_13_93 () Real)
(declare-fun l_0_13_92 () Real)
(declare-fun l_0_13_82 () Real)
(declare-fun l_0_13_61 () Real)
(declare-fun l_0_13_177 () Real)
(declare-fun l_0_13_176 () Real)
(declare-fun l_0_13_156 () Real)
(declare-fun l_0_13_155 () Real)
(declare-fun l_0_13_145 () Real)
(declare-fun l_0_13_114 () Real)
(declare-fun l_0_13_113 () Real)
(declare-fun l_0_13_78 () Real)
(declare-fun l_0_13_57 () Real)
(declare-fun l_0_13_141 () Real)
(declare-fun l_0_13_97 () Real)
(declare-fun l_0_13_96 () Real)
(declare-fun l_0_13_83 () Real)
(declare-fun l_0_13_62 () Real)
(declare-fun l_0_13_181 () Real)
(declare-fun l_0_13_180 () Real)
(declare-fun l_0_13_160 () Real)
(declare-fun l_0_13_159 () Real)
(declare-fun l_0_13_146 () Real)
(declare-fun l_0_13_118 () Real)
(declare-fun l_0_13_117 () Real)
(declare-fun l_0_13_84 () Real)
(declare-fun l_0_13_63 () Real)
(declare-fun l_0_13_186 () Real)
(declare-fun l_0_13_185 () Real)
(declare-fun l_0_13_165 () Real)
(declare-fun l_0_13_164 () Real)
(declare-fun l_0_13_147 () Real)
(declare-fun l_0_13_123 () Real)
(declare-fun l_0_13_122 () Real)
(declare-fun l_0_13_102 () Real)
(declare-fun l_0_13_101 () Real)
(declare-fun l_0_13_199 () Real)
(declare-fun l_0_13_203 () Real)
(declare-fun l_0_13_208 () Real)
(declare-fun l_0_13_204 () Real)
(declare-fun l_0_13_209 () Real)
(declare-fun l_0_13_210 () Real)
(declare-fun l_0_13_94 () Real)
(declare-fun l_0_13_178 () Real)
(declare-fun l_0_13_157 () Real)
(declare-fun l_0_13_115 () Real)
(declare-fun l_0_13_98 () Real)
(declare-fun l_0_13_182 () Real)
(declare-fun l_0_13_161 () Real)
(declare-fun l_0_13_119 () Real)
(declare-fun l_0_13_187 () Real)
(declare-fun l_0_13_166 () Real)
(declare-fun l_0_13_124 () Real)
(declare-fun l_0_13_103 () Real)
(declare-fun l_0_13_99 () Real)
(declare-fun l_0_13_183 () Real)
(declare-fun l_0_13_162 () Real)
(declare-fun l_0_13_120 () Real)
(declare-fun l_0_13_188 () Real)
(declare-fun l_0_13_167 () Real)
(declare-fun l_0_13_125 () Real)
(declare-fun l_0_13_104 () Real)
(declare-fun l_0_13_189 () Real)
(declare-fun l_0_13_168 () Real)
(declare-fun l_0_13_126 () Real)
(declare-fun l_0_13_105 () Real)
(declare-fun l_0_14_66 () Real)
(declare-fun l_0_14_68 () Real)
(declare-fun l_0_14_65 () Real)
(declare-fun l_0_14_67 () Real)
(declare-fun l_0_14_45 () Real)
(declare-fun l_0_14_47 () Real)
(declare-fun l_0_14_44 () Real)
(declare-fun l_0_14_46 () Real)
(declare-fun l_0_14_3 () Real)
(declare-fun l_0_14_5 () Real)
(declare-fun l_0_14_24 () Real)
(declare-fun l_0_14_26 () Real)
(declare-fun l_0_14_23 () Real)
(declare-fun l_0_14_25 () Real)
(declare-fun l_0_14_215 () Real)
(declare-fun l_0_14_213 () Real)
(declare-fun l_0_14_214 () Real)
(declare-fun l_0_14_212 () Real)
(declare-fun l_0_14_2 () Real)
(declare-fun l_0_14_4 () Real)
(declare-fun l_0_14_194 () Real)
(declare-fun l_0_14_192 () Real)
(declare-fun l_0_14_193 () Real)
(declare-fun l_0_14_191 () Real)
(declare-fun l_0_14_129 () Real)
(declare-fun l_0_14_128 () Real)
(declare-fun l_0_14_64 () Real)
(declare-fun l_0_14_43 () Real)
(declare-fun l_0_14_22 () Real)
(declare-fun l_0_14_211 () Real)
(declare-fun l_0_14_190 () Real)
(declare-fun l_0_14_1 () Real)
(declare-fun l_0_14_127 () Real)
(declare-fun l_0_14_28 () Real)
(declare-fun l_0_14_7 () Real)
(declare-fun l_0_14_32 () Real)
(declare-fun l_0_14_11 () Real)
(declare-fun l_0_14_85 () Real)
(declare-fun l_0_14_37 () Real)
(declare-fun l_0_14_169 () Real)
(declare-fun l_0_14_148 () Real)
(declare-fun l_0_14_106 () Real)
(declare-fun l_0_14_16 () Real)
(declare-fun l_0_14_70 () Real)
(declare-fun l_0_14_49 () Real)
(declare-fun l_0_14_8 () Real)
(declare-fun l_0_14_29 () Real)
(declare-fun l_0_14_217 () Real)
(declare-fun l_0_14_196 () Real)
(declare-fun l_0_14_74 () Real)
(declare-fun l_0_14_53 () Real)
(declare-fun l_0_14_33 () Real)
(declare-fun l_0_14_221 () Real)
(declare-fun l_0_14_200 () Real)
(declare-fun l_0_14_12 () Real)
(declare-fun l_0_14_86 () Real)
(declare-fun l_0_14_79 () Real)
(declare-fun l_0_14_58 () Real)
(declare-fun l_0_14_38 () Real)
(declare-fun l_0_14_226 () Real)
(declare-fun l_0_14_205 () Real)
(declare-fun l_0_14_17 () Real)
(declare-fun l_0_14_170 () Real)
(declare-fun l_0_14_149 () Real)
(declare-fun l_0_14_107 () Real)
(declare-fun l_0_14_6 () Real)
(declare-fun l_0_14_27 () Real)
(declare-fun l_0_14_130 () Real)
(declare-fun l_0_14_9 () Real)
(declare-fun l_0_14_30 () Real)
(declare-fun l_0_14_133 () Real)
(declare-fun l_0_14_34 () Real)
(declare-fun l_0_14_13 () Real)
(declare-fun l_0_14_137 () Real)
(declare-fun l_0_14_88 () Real)
(declare-fun l_0_14_39 () Real)
(declare-fun l_0_14_18 () Real)
(declare-fun l_0_14_172 () Real)
(declare-fun l_0_14_151 () Real)
(declare-fun l_0_14_142 () Real)
(declare-fun l_0_14_109 () Real)
(declare-fun l_0_14_31 () Real)
(declare-fun l_0_14_10 () Real)
(declare-fun l_0_14_35 () Real)
(declare-fun l_0_14_14 () Real)
(declare-fun l_0_14_91 () Real)
(declare-fun l_0_14_40 () Real)
(declare-fun l_0_14_175 () Real)
(declare-fun l_0_14_154 () Real)
(declare-fun l_0_14_112 () Real)
(declare-fun l_0_14_19 () Real)
(declare-fun l_0_14_36 () Real)
(declare-fun l_0_14_15 () Real)
(declare-fun l_0_14_95 () Real)
(declare-fun l_0_14_41 () Real)
(declare-fun l_0_14_179 () Real)
(declare-fun l_0_14_20 () Real)
(declare-fun l_0_14_158 () Real)
(declare-fun l_0_14_116 () Real)
(declare-fun l_0_14_42 () Real)
(declare-fun l_0_14_21 () Real)
(declare-fun l_0_14_184 () Real)
(declare-fun l_0_14_163 () Real)
(declare-fun l_0_14_121 () Real)
(declare-fun l_0_14_100 () Real)
(declare-fun l_0_14_69 () Real)
(declare-fun l_0_14_48 () Real)
(declare-fun l_0_14_216 () Real)
(declare-fun l_0_14_195 () Real)
(declare-fun l_0_14_131 () Real)
(declare-fun l_0_14_72 () Real)
(declare-fun l_0_14_71 () Real)
(declare-fun l_0_14_51 () Real)
(declare-fun l_0_14_50 () Real)
(declare-fun l_0_14_219 () Real)
(declare-fun l_0_14_218 () Real)
(declare-fun l_0_14_198 () Real)
(declare-fun l_0_14_197 () Real)
(declare-fun l_0_14_134 () Real)
(declare-fun l_0_14_76 () Real)
(declare-fun l_0_14_75 () Real)
(declare-fun l_0_14_55 () Real)
(declare-fun l_0_14_54 () Real)
(declare-fun l_0_14_223 () Real)
(declare-fun l_0_14_222 () Real)
(declare-fun l_0_14_202 () Real)
(declare-fun l_0_14_201 () Real)
(declare-fun l_0_14_138 () Real)
(declare-fun l_0_14_89 () Real)
(declare-fun l_0_14_87 () Real)
(declare-fun l_0_14_81 () Real)
(declare-fun l_0_14_80 () Real)
(declare-fun l_0_14_60 () Real)
(declare-fun l_0_14_59 () Real)
(declare-fun l_0_14_228 () Real)
(declare-fun l_0_14_227 () Real)
(declare-fun l_0_14_207 () Real)
(declare-fun l_0_14_206 () Real)
(declare-fun l_0_14_173 () Real)
(declare-fun l_0_14_171 () Real)
(declare-fun l_0_14_152 () Real)
(declare-fun l_0_14_150 () Real)
(declare-fun l_0_14_143 () Real)
(declare-fun l_0_14_110 () Real)
(declare-fun l_0_14_108 () Real)
(declare-fun l_0_14_132 () Real)
(declare-fun l_0_14_135 () Real)
(declare-fun l_0_14_139 () Real)
(declare-fun l_0_14_90 () Real)
(declare-fun l_0_14_174 () Real)
(declare-fun l_0_14_153 () Real)
(declare-fun l_0_14_144 () Real)
(declare-fun l_0_14_111 () Real)
(declare-fun l_0_14_73 () Real)
(declare-fun l_0_14_52 () Real)
(declare-fun l_0_14_136 () Real)
(declare-fun l_0_14_77 () Real)
(declare-fun l_0_14_56 () Real)
(declare-fun l_0_14_140 () Real)
(declare-fun l_0_14_93 () Real)
(declare-fun l_0_14_92 () Real)
(declare-fun l_0_14_82 () Real)
(declare-fun l_0_14_61 () Real)
(declare-fun l_0_14_177 () Real)
(declare-fun l_0_14_176 () Real)
(declare-fun l_0_14_156 () Real)
(declare-fun l_0_14_155 () Real)
(declare-fun l_0_14_145 () Real)
(declare-fun l_0_14_114 () Real)
(declare-fun l_0_14_113 () Real)
(declare-fun l_0_14_78 () Real)
(declare-fun l_0_14_57 () Real)
(declare-fun l_0_14_141 () Real)
(declare-fun l_0_14_97 () Real)
(declare-fun l_0_14_96 () Real)
(declare-fun l_0_14_83 () Real)
(declare-fun l_0_14_62 () Real)
(declare-fun l_0_14_181 () Real)
(declare-fun l_0_14_180 () Real)
(declare-fun l_0_14_160 () Real)
(declare-fun l_0_14_159 () Real)
(declare-fun l_0_14_146 () Real)
(declare-fun l_0_14_118 () Real)
(declare-fun l_0_14_117 () Real)
(declare-fun l_0_14_84 () Real)
(declare-fun l_0_14_63 () Real)
(declare-fun l_0_14_186 () Real)
(declare-fun l_0_14_185 () Real)
(declare-fun l_0_14_165 () Real)
(declare-fun l_0_14_164 () Real)
(declare-fun l_0_14_147 () Real)
(declare-fun l_0_14_123 () Real)
(declare-fun l_0_14_122 () Real)
(declare-fun l_0_14_102 () Real)
(declare-fun l_0_14_101 () Real)
(declare-fun l_0_14_220 () Real)
(declare-fun l_0_14_199 () Real)
(declare-fun l_0_14_224 () Real)
(declare-fun l_0_14_203 () Real)
(declare-fun l_0_14_229 () Real)
(declare-fun l_0_14_208 () Real)
(declare-fun l_0_14_225 () Real)
(declare-fun l_0_14_204 () Real)
(declare-fun l_0_14_230 () Real)
(declare-fun l_0_14_209 () Real)
(declare-fun l_0_14_231 () Real)
(declare-fun l_0_14_210 () Real)
(declare-fun l_0_14_94 () Real)
(declare-fun l_0_14_178 () Real)
(declare-fun l_0_14_157 () Real)
(declare-fun l_0_14_115 () Real)
(declare-fun l_0_14_98 () Real)
(declare-fun l_0_14_182 () Real)
(declare-fun l_0_14_161 () Real)
(declare-fun l_0_14_119 () Real)
(declare-fun l_0_14_187 () Real)
(declare-fun l_0_14_166 () Real)
(declare-fun l_0_14_124 () Real)
(declare-fun l_0_14_103 () Real)
(declare-fun l_0_14_99 () Real)
(declare-fun l_0_14_183 () Real)
(declare-fun l_0_14_162 () Real)
(declare-fun l_0_14_120 () Real)
(declare-fun l_0_14_188 () Real)
(declare-fun l_0_14_167 () Real)
(declare-fun l_0_14_125 () Real)
(declare-fun l_0_14_104 () Real)
(declare-fun l_0_14_189 () Real)
(declare-fun l_0_14_168 () Real)
(declare-fun l_0_14_126 () Real)
(declare-fun l_0_14_105 () Real)
(declare-fun l_0_15_69 () Real)
(declare-fun l_0_15_68 () Real)
(declare-fun l_0_15_67 () Real)
(declare-fun l_0_15_66 () Real)
(declare-fun l_0_15_65 () Real)
(declare-fun l_0_15_6 () Real)
(declare-fun l_0_15_5 () Real)
(declare-fun l_0_15_48 () Real)
(declare-fun l_0_15_47 () Real)
(declare-fun l_0_15_46 () Real)
(declare-fun l_0_15_45 () Real)
(declare-fun l_0_15_44 () Real)
(declare-fun l_0_15_4 () Real)
(declare-fun l_0_15_3 () Real)
(declare-fun l_0_15_27 () Real)
(declare-fun l_0_15_26 () Real)
(declare-fun l_0_15_25 () Real)
(declare-fun l_0_15_24 () Real)
(declare-fun l_0_15_237 () Real)
(declare-fun l_0_15_236 () Real)
(declare-fun l_0_15_235 () Real)
(declare-fun l_0_15_23 () Real)
(declare-fun l_0_15_216 () Real)
(declare-fun l_0_15_215 () Real)
(declare-fun l_0_15_214 () Real)
(declare-fun l_0_15_2 () Real)
(declare-fun l_0_15_195 () Real)
(declare-fun l_0_15_194 () Real)
(declare-fun l_0_15_193 () Real)
(declare-fun l_0_15_131 () Real)
(declare-fun l_0_15_129 () Real)
(declare-fun l_0_15_130 () Real)
(declare-fun l_0_15_128 () Real)
(declare-fun l_0_15_234 () Real)
(declare-fun l_0_15_233 () Real)
(declare-fun l_0_15_213 () Real)
(declare-fun l_0_15_212 () Real)
(declare-fun l_0_15_192 () Real)
(declare-fun l_0_15_191 () Real)
(declare-fun l_0_15_64 () Real)
(declare-fun l_0_15_43 () Real)
(declare-fun l_0_15_232 () Real)
(declare-fun l_0_15_22 () Real)
(declare-fun l_0_15_211 () Real)
(declare-fun l_0_15_190 () Real)
(declare-fun l_0_15_1 () Real)
(declare-fun l_0_15_71 () Real)
(declare-fun l_0_15_70 () Real)
(declare-fun l_0_15_50 () Real)
(declare-fun l_0_15_49 () Real)
(declare-fun l_0_15_8 () Real)
(declare-fun l_0_15_29 () Real)
(declare-fun l_0_15_239 () Real)
(declare-fun l_0_15_238 () Real)
(declare-fun l_0_15_28 () Real)
(declare-fun l_0_15_218 () Real)
(declare-fun l_0_15_217 () Real)
(declare-fun l_0_15_7 () Real)
(declare-fun l_0_15_197 () Real)
(declare-fun l_0_15_196 () Real)
(declare-fun l_0_15_9 () Real)
(declare-fun l_0_15_73 () Real)
(declare-fun l_0_15_72 () Real)
(declare-fun l_0_15_52 () Real)
(declare-fun l_0_15_51 () Real)
(declare-fun l_0_15_31 () Real)
(declare-fun l_0_15_30 () Real)
(declare-fun l_0_15_241 () Real)
(declare-fun l_0_15_240 () Real)
(declare-fun l_0_15_220 () Real)
(declare-fun l_0_15_219 () Real)
(declare-fun l_0_15_199 () Real)
(declare-fun l_0_15_198 () Real)
(declare-fun l_0_15_10 () Real)
(declare-fun l_0_15_127 () Real)
(declare-fun l_0_15_32 () Real)
(declare-fun l_0_15_11 () Real)
(declare-fun l_0_15_85 () Real)
(declare-fun l_0_15_37 () Real)
(declare-fun l_0_15_169 () Real)
(declare-fun l_0_15_148 () Real)
(declare-fun l_0_15_106 () Real)
(declare-fun l_0_15_16 () Real)
(declare-fun l_0_15_74 () Real)
(declare-fun l_0_15_53 () Real)
(declare-fun l_0_15_33 () Real)
(declare-fun l_0_15_242 () Real)
(declare-fun l_0_15_221 () Real)
(declare-fun l_0_15_200 () Real)
(declare-fun l_0_15_12 () Real)
(declare-fun l_0_15_86 () Real)
(declare-fun l_0_15_79 () Real)
(declare-fun l_0_15_58 () Real)
(declare-fun l_0_15_38 () Real)
(declare-fun l_0_15_247 () Real)
(declare-fun l_0_15_226 () Real)
(declare-fun l_0_15_205 () Real)
(declare-fun l_0_15_17 () Real)
(declare-fun l_0_15_170 () Real)
(declare-fun l_0_15_149 () Real)
(declare-fun l_0_15_107 () Real)
(declare-fun l_0_15_133 () Real)
(declare-fun l_0_15_34 () Real)
(declare-fun l_0_15_13 () Real)
(declare-fun l_0_15_137 () Real)
(declare-fun l_0_15_88 () Real)
(declare-fun l_0_15_39 () Real)
(declare-fun l_0_15_18 () Real)
(declare-fun l_0_15_172 () Real)
(declare-fun l_0_15_151 () Real)
(declare-fun l_0_15_142 () Real)
(declare-fun l_0_15_109 () Real)
(declare-fun l_0_15_35 () Real)
(declare-fun l_0_15_14 () Real)
(declare-fun l_0_15_91 () Real)
(declare-fun l_0_15_40 () Real)
(declare-fun l_0_15_175 () Real)
(declare-fun l_0_15_154 () Real)
(declare-fun l_0_15_112 () Real)
(declare-fun l_0_15_19 () Real)
(declare-fun l_0_15_36 () Real)
(declare-fun l_0_15_15 () Real)
(declare-fun l_0_15_95 () Real)
(declare-fun l_0_15_41 () Real)
(declare-fun l_0_15_179 () Real)
(declare-fun l_0_15_20 () Real)
(declare-fun l_0_15_158 () Real)
(declare-fun l_0_15_116 () Real)
(declare-fun l_0_15_42 () Real)
(declare-fun l_0_15_21 () Real)
(declare-fun l_0_15_184 () Real)
(declare-fun l_0_15_163 () Real)
(declare-fun l_0_15_121 () Real)
(declare-fun l_0_15_100 () Real)
(declare-fun l_0_15_134 () Real)
(declare-fun l_0_15_76 () Real)
(declare-fun l_0_15_75 () Real)
(declare-fun l_0_15_55 () Real)
(declare-fun l_0_15_54 () Real)
(declare-fun l_0_15_244 () Real)
(declare-fun l_0_15_243 () Real)
(declare-fun l_0_15_223 () Real)
(declare-fun l_0_15_222 () Real)
(declare-fun l_0_15_202 () Real)
(declare-fun l_0_15_201 () Real)
(declare-fun l_0_15_138 () Real)
(declare-fun l_0_15_89 () Real)
(declare-fun l_0_15_87 () Real)
(declare-fun l_0_15_81 () Real)
(declare-fun l_0_15_80 () Real)
(declare-fun l_0_15_60 () Real)
(declare-fun l_0_15_59 () Real)
(declare-fun l_0_15_249 () Real)
(declare-fun l_0_15_248 () Real)
(declare-fun l_0_15_228 () Real)
(declare-fun l_0_15_227 () Real)
(declare-fun l_0_15_207 () Real)
(declare-fun l_0_15_206 () Real)
(declare-fun l_0_15_173 () Real)
(declare-fun l_0_15_171 () Real)
(declare-fun l_0_15_152 () Real)
(declare-fun l_0_15_150 () Real)
(declare-fun l_0_15_143 () Real)
(declare-fun l_0_15_110 () Real)
(declare-fun l_0_15_108 () Real)
(declare-fun l_0_15_132 () Real)
(declare-fun l_0_15_135 () Real)
(declare-fun l_0_15_139 () Real)
(declare-fun l_0_15_90 () Real)
(declare-fun l_0_15_174 () Real)
(declare-fun l_0_15_153 () Real)
(declare-fun l_0_15_144 () Real)
(declare-fun l_0_15_111 () Real)
(declare-fun l_0_15_136 () Real)
(declare-fun l_0_15_77 () Real)
(declare-fun l_0_15_56 () Real)
(declare-fun l_0_15_140 () Real)
(declare-fun l_0_15_93 () Real)
(declare-fun l_0_15_92 () Real)
(declare-fun l_0_15_82 () Real)
(declare-fun l_0_15_61 () Real)
(declare-fun l_0_15_177 () Real)
(declare-fun l_0_15_176 () Real)
(declare-fun l_0_15_156 () Real)
(declare-fun l_0_15_155 () Real)
(declare-fun l_0_15_145 () Real)
(declare-fun l_0_15_114 () Real)
(declare-fun l_0_15_113 () Real)
(declare-fun l_0_15_78 () Real)
(declare-fun l_0_15_57 () Real)
(declare-fun l_0_15_141 () Real)
(declare-fun l_0_15_97 () Real)
(declare-fun l_0_15_96 () Real)
(declare-fun l_0_15_83 () Real)
(declare-fun l_0_15_62 () Real)
(declare-fun l_0_15_181 () Real)
(declare-fun l_0_15_180 () Real)
(declare-fun l_0_15_160 () Real)
(declare-fun l_0_15_159 () Real)
(declare-fun l_0_15_146 () Real)
(declare-fun l_0_15_118 () Real)
(declare-fun l_0_15_117 () Real)
(declare-fun l_0_15_84 () Real)
(declare-fun l_0_15_63 () Real)
(declare-fun l_0_15_186 () Real)
(declare-fun l_0_15_185 () Real)
(declare-fun l_0_15_165 () Real)
(declare-fun l_0_15_164 () Real)
(declare-fun l_0_15_147 () Real)
(declare-fun l_0_15_123 () Real)
(declare-fun l_0_15_122 () Real)
(declare-fun l_0_15_102 () Real)
(declare-fun l_0_15_101 () Real)
(declare-fun l_0_15_245 () Real)
(declare-fun l_0_15_224 () Real)
(declare-fun l_0_15_203 () Real)
(declare-fun l_0_15_250 () Real)
(declare-fun l_0_15_229 () Real)
(declare-fun l_0_15_208 () Real)
(declare-fun l_0_15_246 () Real)
(declare-fun l_0_15_225 () Real)
(declare-fun l_0_15_204 () Real)
(declare-fun l_0_15_251 () Real)
(declare-fun l_0_15_230 () Real)
(declare-fun l_0_15_209 () Real)
(declare-fun l_0_15_252 () Real)
(declare-fun l_0_15_231 () Real)
(declare-fun l_0_15_210 () Real)
(declare-fun l_0_15_94 () Real)
(declare-fun l_0_15_178 () Real)
(declare-fun l_0_15_157 () Real)
(declare-fun l_0_15_115 () Real)
(declare-fun l_0_15_98 () Real)
(declare-fun l_0_15_182 () Real)
(declare-fun l_0_15_161 () Real)
(declare-fun l_0_15_119 () Real)
(declare-fun l_0_15_187 () Real)
(declare-fun l_0_15_166 () Real)
(declare-fun l_0_15_124 () Real)
(declare-fun l_0_15_103 () Real)
(declare-fun l_0_15_99 () Real)
(declare-fun l_0_15_183 () Real)
(declare-fun l_0_15_162 () Real)
(declare-fun l_0_15_120 () Real)
(declare-fun l_0_15_188 () Real)
(declare-fun l_0_15_167 () Real)
(declare-fun l_0_15_125 () Real)
(declare-fun l_0_15_104 () Real)
(declare-fun l_0_15_189 () Real)
(declare-fun l_0_15_168 () Real)
(declare-fun l_0_15_126 () Real)
(declare-fun l_0_15_105 () Real)
(declare-fun l_0_16_66 () Real)
(declare-fun l_0_16_65 () Real)
(declare-fun l_0_16_45 () Real)
(declare-fun l_0_16_44 () Real)
(declare-fun l_0_16_3 () Real)
(declare-fun l_0_16_255 () Real)
(declare-fun l_0_16_254 () Real)
(declare-fun l_0_16_24 () Real)
(declare-fun l_0_16_234 () Real)
(declare-fun l_0_16_233 () Real)
(declare-fun l_0_16_23 () Real)
(declare-fun l_0_16_213 () Real)
(declare-fun l_0_16_212 () Real)
(declare-fun l_0_16_2 () Real)
(declare-fun l_0_16_192 () Real)
(declare-fun l_0_16_191 () Real)
(declare-fun l_0_16_64 () Real)
(declare-fun l_0_16_43 () Real)
(declare-fun l_0_16_253 () Real)
(declare-fun l_0_16_232 () Real)
(declare-fun l_0_16_22 () Real)
(declare-fun l_0_16_211 () Real)
(declare-fun l_0_16_190 () Real)
(declare-fun l_0_16_1 () Real)
(declare-fun l_0_16_71 () Real)
(declare-fun l_0_16_70 () Real)
(declare-fun l_0_16_50 () Real)
(declare-fun l_0_16_49 () Real)
(declare-fun l_0_16_8 () Real)
(declare-fun l_0_16_260 () Real)
(declare-fun l_0_16_259 () Real)
(declare-fun l_0_16_29 () Real)
(declare-fun l_0_16_239 () Real)
(declare-fun l_0_16_238 () Real)
(declare-fun l_0_16_28 () Real)
(declare-fun l_0_16_218 () Real)
(declare-fun l_0_16_217 () Real)
(declare-fun l_0_16_7 () Real)
(declare-fun l_0_16_197 () Real)
(declare-fun l_0_16_196 () Real)
(declare-fun l_0_16_9 () Real)
(declare-fun l_0_16_73 () Real)
(declare-fun l_0_16_72 () Real)
(declare-fun l_0_16_52 () Real)
(declare-fun l_0_16_51 () Real)
(declare-fun l_0_16_31 () Real)
(declare-fun l_0_16_30 () Real)
(declare-fun l_0_16_262 () Real)
(declare-fun l_0_16_261 () Real)
(declare-fun l_0_16_241 () Real)
(declare-fun l_0_16_240 () Real)
(declare-fun l_0_16_220 () Real)
(declare-fun l_0_16_219 () Real)
(declare-fun l_0_16_199 () Real)
(declare-fun l_0_16_198 () Real)
(declare-fun l_0_16_10 () Real)
(declare-fun l_0_16_69 () Real)
(declare-fun l_0_16_68 () Real)
(declare-fun l_0_16_67 () Real)
(declare-fun l_0_16_6 () Real)
(declare-fun l_0_16_5 () Real)
(declare-fun l_0_16_48 () Real)
(declare-fun l_0_16_47 () Real)
(declare-fun l_0_16_46 () Real)
(declare-fun l_0_16_4 () Real)
(declare-fun l_0_16_27 () Real)
(declare-fun l_0_16_26 () Real)
(declare-fun l_0_16_258 () Real)
(declare-fun l_0_16_257 () Real)
(declare-fun l_0_16_256 () Real)
(declare-fun l_0_16_25 () Real)
(declare-fun l_0_16_237 () Real)
(declare-fun l_0_16_236 () Real)
(declare-fun l_0_16_235 () Real)
(declare-fun l_0_16_216 () Real)
(declare-fun l_0_16_215 () Real)
(declare-fun l_0_16_214 () Real)
(declare-fun l_0_16_195 () Real)
(declare-fun l_0_16_194 () Real)
(declare-fun l_0_16_193 () Real)
(declare-fun l_0_16_131 () Real)
(declare-fun l_0_16_129 () Real)
(declare-fun l_0_16_130 () Real)
(declare-fun l_0_16_128 () Real)
(declare-fun l_0_16_127 () Real)
(declare-fun l_0_16_32 () Real)
(declare-fun l_0_16_11 () Real)
(declare-fun l_0_16_85 () Real)
(declare-fun l_0_16_37 () Real)
(declare-fun l_0_16_169 () Real)
(declare-fun l_0_16_148 () Real)
(declare-fun l_0_16_106 () Real)
(declare-fun l_0_16_16 () Real)
(declare-fun l_0_16_74 () Real)
(declare-fun l_0_16_53 () Real)
(declare-fun l_0_16_263 () Real)
(declare-fun l_0_16_33 () Real)
(declare-fun l_0_16_242 () Real)
(declare-fun l_0_16_221 () Real)
(declare-fun l_0_16_200 () Real)
(declare-fun l_0_16_12 () Real)
(declare-fun l_0_16_86 () Real)
(declare-fun l_0_16_79 () Real)
(declare-fun l_0_16_58 () Real)
(declare-fun l_0_16_268 () Real)
(declare-fun l_0_16_38 () Real)
(declare-fun l_0_16_247 () Real)
(declare-fun l_0_16_226 () Real)
(declare-fun l_0_16_205 () Real)
(declare-fun l_0_16_17 () Real)
(declare-fun l_0_16_170 () Real)
(declare-fun l_0_16_149 () Real)
(declare-fun l_0_16_107 () Real)
(declare-fun l_0_16_133 () Real)
(declare-fun l_0_16_34 () Real)
(declare-fun l_0_16_13 () Real)
(declare-fun l_0_16_137 () Real)
(declare-fun l_0_16_88 () Real)
(declare-fun l_0_16_39 () Real)
(declare-fun l_0_16_18 () Real)
(declare-fun l_0_16_172 () Real)
(declare-fun l_0_16_151 () Real)
(declare-fun l_0_16_142 () Real)
(declare-fun l_0_16_109 () Real)
(declare-fun l_0_16_35 () Real)
(declare-fun l_0_16_14 () Real)
(declare-fun l_0_16_91 () Real)
(declare-fun l_0_16_40 () Real)
(declare-fun l_0_16_175 () Real)
(declare-fun l_0_16_154 () Real)
(declare-fun l_0_16_112 () Real)
(declare-fun l_0_16_19 () Real)
(declare-fun l_0_16_36 () Real)
(declare-fun l_0_16_15 () Real)
(declare-fun l_0_16_95 () Real)
(declare-fun l_0_16_41 () Real)
(declare-fun l_0_16_179 () Real)
(declare-fun l_0_16_20 () Real)
(declare-fun l_0_16_158 () Real)
(declare-fun l_0_16_116 () Real)
(declare-fun l_0_16_42 () Real)
(declare-fun l_0_16_21 () Real)
(declare-fun l_0_16_184 () Real)
(declare-fun l_0_16_163 () Real)
(declare-fun l_0_16_121 () Real)
(declare-fun l_0_16_100 () Real)
(declare-fun l_0_16_134 () Real)
(declare-fun l_0_16_76 () Real)
(declare-fun l_0_16_75 () Real)
(declare-fun l_0_16_55 () Real)
(declare-fun l_0_16_54 () Real)
(declare-fun l_0_16_265 () Real)
(declare-fun l_0_16_264 () Real)
(declare-fun l_0_16_244 () Real)
(declare-fun l_0_16_243 () Real)
(declare-fun l_0_16_223 () Real)
(declare-fun l_0_16_222 () Real)
(declare-fun l_0_16_202 () Real)
(declare-fun l_0_16_201 () Real)
(declare-fun l_0_16_138 () Real)
(declare-fun l_0_16_89 () Real)
(declare-fun l_0_16_87 () Real)
(declare-fun l_0_16_81 () Real)
(declare-fun l_0_16_80 () Real)
(declare-fun l_0_16_60 () Real)
(declare-fun l_0_16_59 () Real)
(declare-fun l_0_16_270 () Real)
(declare-fun l_0_16_269 () Real)
(declare-fun l_0_16_249 () Real)
(declare-fun l_0_16_248 () Real)
(declare-fun l_0_16_228 () Real)
(declare-fun l_0_16_227 () Real)
(declare-fun l_0_16_207 () Real)
(declare-fun l_0_16_206 () Real)
(declare-fun l_0_16_173 () Real)
(declare-fun l_0_16_171 () Real)
(declare-fun l_0_16_152 () Real)
(declare-fun l_0_16_150 () Real)
(declare-fun l_0_16_143 () Real)
(declare-fun l_0_16_110 () Real)
(declare-fun l_0_16_108 () Real)
(declare-fun l_0_16_132 () Real)
(declare-fun l_0_16_135 () Real)
(declare-fun l_0_16_139 () Real)
(declare-fun l_0_16_90 () Real)
(declare-fun l_0_16_174 () Real)
(declare-fun l_0_16_153 () Real)
(declare-fun l_0_16_144 () Real)
(declare-fun l_0_16_111 () Real)
(declare-fun l_0_16_136 () Real)
(declare-fun l_0_16_77 () Real)
(declare-fun l_0_16_56 () Real)
(declare-fun l_0_16_140 () Real)
(declare-fun l_0_16_93 () Real)
(declare-fun l_0_16_92 () Real)
(declare-fun l_0_16_82 () Real)
(declare-fun l_0_16_61 () Real)
(declare-fun l_0_16_177 () Real)
(declare-fun l_0_16_176 () Real)
(declare-fun l_0_16_156 () Real)
(declare-fun l_0_16_155 () Real)
(declare-fun l_0_16_145 () Real)
(declare-fun l_0_16_114 () Real)
(declare-fun l_0_16_113 () Real)
(declare-fun l_0_16_78 () Real)
(declare-fun l_0_16_57 () Real)
(declare-fun l_0_16_141 () Real)
(declare-fun l_0_16_97 () Real)
(declare-fun l_0_16_96 () Real)
(declare-fun l_0_16_83 () Real)
(declare-fun l_0_16_62 () Real)
(declare-fun l_0_16_181 () Real)
(declare-fun l_0_16_180 () Real)
(declare-fun l_0_16_160 () Real)
(declare-fun l_0_16_159 () Real)
(declare-fun l_0_16_146 () Real)
(declare-fun l_0_16_118 () Real)
(declare-fun l_0_16_117 () Real)
(declare-fun l_0_16_84 () Real)
(declare-fun l_0_16_63 () Real)
(declare-fun l_0_16_186 () Real)
(declare-fun l_0_16_185 () Real)
(declare-fun l_0_16_165 () Real)
(declare-fun l_0_16_164 () Real)
(declare-fun l_0_16_147 () Real)
(declare-fun l_0_16_123 () Real)
(declare-fun l_0_16_122 () Real)
(declare-fun l_0_16_102 () Real)
(declare-fun l_0_16_101 () Real)
(declare-fun l_0_16_266 () Real)
(declare-fun l_0_16_245 () Real)
(declare-fun l_0_16_224 () Real)
(declare-fun l_0_16_203 () Real)
(declare-fun l_0_16_271 () Real)
(declare-fun l_0_16_250 () Real)
(declare-fun l_0_16_229 () Real)
(declare-fun l_0_16_208 () Real)
(declare-fun l_0_16_267 () Real)
(declare-fun l_0_16_246 () Real)
(declare-fun l_0_16_225 () Real)
(declare-fun l_0_16_204 () Real)
(declare-fun l_0_16_272 () Real)
(declare-fun l_0_16_251 () Real)
(declare-fun l_0_16_230 () Real)
(declare-fun l_0_16_209 () Real)
(declare-fun l_0_16_273 () Real)
(declare-fun l_0_16_252 () Real)
(declare-fun l_0_16_231 () Real)
(declare-fun l_0_16_210 () Real)
(declare-fun l_0_16_94 () Real)
(declare-fun l_0_16_178 () Real)
(declare-fun l_0_16_157 () Real)
(declare-fun l_0_16_115 () Real)
(declare-fun l_0_16_98 () Real)
(declare-fun l_0_16_182 () Real)
(declare-fun l_0_16_161 () Real)
(declare-fun l_0_16_119 () Real)
(declare-fun l_0_16_187 () Real)
(declare-fun l_0_16_166 () Real)
(declare-fun l_0_16_124 () Real)
(declare-fun l_0_16_103 () Real)
(declare-fun l_0_16_99 () Real)
(declare-fun l_0_16_183 () Real)
(declare-fun l_0_16_162 () Real)
(declare-fun l_0_16_120 () Real)
(declare-fun l_0_16_188 () Real)
(declare-fun l_0_16_167 () Real)
(declare-fun l_0_16_125 () Real)
(declare-fun l_0_16_104 () Real)
(declare-fun l_0_16_189 () Real)
(declare-fun l_0_16_168 () Real)
(declare-fun l_0_16_126 () Real)
(declare-fun l_0_16_105 () Real)
(declare-fun l_0_17_66 () Real)
(declare-fun l_0_17_65 () Real)
(declare-fun l_0_17_45 () Real)
(declare-fun l_0_17_44 () Real)
(declare-fun l_0_17_3 () Real)
(declare-fun l_0_17_276 () Real)
(declare-fun l_0_17_275 () Real)
(declare-fun l_0_17_255 () Real)
(declare-fun l_0_17_254 () Real)
(declare-fun l_0_17_24 () Real)
(declare-fun l_0_17_234 () Real)
(declare-fun l_0_17_233 () Real)
(declare-fun l_0_17_23 () Real)
(declare-fun l_0_17_213 () Real)
(declare-fun l_0_17_212 () Real)
(declare-fun l_0_17_2 () Real)
(declare-fun l_0_17_192 () Real)
(declare-fun l_0_17_191 () Real)
(declare-fun l_0_17_92 () Real)
(declare-fun l_0_17_87 () Real)
(declare-fun l_0_17_91 () Real)
(declare-fun l_0_17_86 () Real)
(declare-fun l_0_17_82 () Real)
(declare-fun l_0_17_73 () Real)
(declare-fun l_0_17_81 () Real)
(declare-fun l_0_17_72 () Real)
(declare-fun l_0_17_80 () Real)
(declare-fun l_0_17_71 () Real)
(declare-fun l_0_17_79 () Real)
(declare-fun l_0_17_70 () Real)
(declare-fun l_0_17_61 () Real)
(declare-fun l_0_17_52 () Real)
(declare-fun l_0_17_60 () Real)
(declare-fun l_0_17_51 () Real)
(declare-fun l_0_17_59 () Real)
(declare-fun l_0_17_50 () Real)
(declare-fun l_0_17_58 () Real)
(declare-fun l_0_17_49 () Real)
(declare-fun l_0_17_40 () Real)
(declare-fun l_0_17_31 () Real)
(declare-fun l_0_17_39 () Real)
(declare-fun l_0_17_30 () Real)
(declare-fun l_0_17_38 () Real)
(declare-fun l_0_17_29 () Real)
(declare-fun l_0_17_292 () Real)
(declare-fun l_0_17_283 () Real)
(declare-fun l_0_17_291 () Real)
(declare-fun l_0_17_282 () Real)
(declare-fun l_0_17_290 () Real)
(declare-fun l_0_17_281 () Real)
(declare-fun l_0_17_289 () Real)
(declare-fun l_0_17_280 () Real)
(declare-fun l_0_17_37 () Real)
(declare-fun l_0_17_28 () Real)
(declare-fun l_0_17_271 () Real)
(declare-fun l_0_17_262 () Real)
(declare-fun l_0_17_270 () Real)
(declare-fun l_0_17_261 () Real)
(declare-fun l_0_17_269 () Real)
(declare-fun l_0_17_260 () Real)
(declare-fun l_0_17_268 () Real)
(declare-fun l_0_17_259 () Real)
(declare-fun l_0_17_250 () Real)
(declare-fun l_0_17_241 () Real)
(declare-fun l_0_17_249 () Real)
(declare-fun l_0_17_240 () Real)
(declare-fun l_0_17_248 () Real)
(declare-fun l_0_17_239 () Real)
(declare-fun l_0_17_247 () Real)
(declare-fun l_0_17_238 () Real)
(declare-fun l_0_17_229 () Real)
(declare-fun l_0_17_220 () Real)
(declare-fun l_0_17_228 () Real)
(declare-fun l_0_17_219 () Real)
(declare-fun l_0_17_227 () Real)
(declare-fun l_0_17_218 () Real)
(declare-fun l_0_17_226 () Real)
(declare-fun l_0_17_217 () Real)
(declare-fun l_0_17_208 () Real)
(declare-fun l_0_17_199 () Real)
(declare-fun l_0_17_207 () Real)
(declare-fun l_0_17_198 () Real)
(declare-fun l_0_17_206 () Real)
(declare-fun l_0_17_197 () Real)
(declare-fun l_0_17_205 () Real)
(declare-fun l_0_17_196 () Real)
(declare-fun l_0_17_9 () Real)
(declare-fun l_0_17_18 () Real)
(declare-fun l_0_17_176 () Real)
(declare-fun l_0_17_171 () Real)
(declare-fun l_0_17_175 () Real)
(declare-fun l_0_17_170 () Real)
(declare-fun l_0_17_8 () Real)
(declare-fun l_0_17_17 () Real)
(declare-fun l_0_17_7 () Real)
(declare-fun l_0_17_16 () Real)
(declare-fun l_0_17_155 () Real)
(declare-fun l_0_17_150 () Real)
(declare-fun l_0_17_154 () Real)
(declare-fun l_0_17_149 () Real)
(declare-fun l_0_17_113 () Real)
(declare-fun l_0_17_108 () Real)
(declare-fun l_0_17_112 () Real)
(declare-fun l_0_17_107 () Real)
(declare-fun l_0_17_19 () Real)
(declare-fun l_0_17_10 () Real)
(declare-fun l_0_17_84 () Real)
(declare-fun l_0_17_83 () Real)
(declare-fun l_0_17_63 () Real)
(declare-fun l_0_17_62 () Real)
(declare-fun l_0_17_42 () Real)
(declare-fun l_0_17_41 () Real)
(declare-fun l_0_17_294 () Real)
(declare-fun l_0_17_293 () Real)
(declare-fun l_0_17_273 () Real)
(declare-fun l_0_17_272 () Real)
(declare-fun l_0_17_252 () Real)
(declare-fun l_0_17_251 () Real)
(declare-fun l_0_17_231 () Real)
(declare-fun l_0_17_230 () Real)
(declare-fun l_0_17_210 () Real)
(declare-fun l_0_17_21 () Real)
(declare-fun l_0_17_209 () Real)
(declare-fun l_0_17_20 () Real)
(declare-fun l_0_17_185 () Real)
(declare-fun l_0_17_184 () Real)
(declare-fun l_0_17_164 () Real)
(declare-fun l_0_17_163 () Real)
(declare-fun l_0_17_122 () Real)
(declare-fun l_0_17_121 () Real)
(declare-fun l_0_17_101 () Real)
(declare-fun l_0_17_100 () Real)
(declare-fun l_0_17_69 () Real)
(declare-fun l_0_17_68 () Real)
(declare-fun l_0_17_67 () Real)
(declare-fun l_0_17_6 () Real)
(declare-fun l_0_17_5 () Real)
(declare-fun l_0_17_48 () Real)
(declare-fun l_0_17_47 () Real)
(declare-fun l_0_17_46 () Real)
(declare-fun l_0_17_4 () Real)
(declare-fun l_0_17_27 () Real)
(declare-fun l_0_17_26 () Real)
(declare-fun l_0_17_25 () Real)
(declare-fun l_0_17_132 () Real)
(declare-fun l_0_17_131 () Real)
(declare-fun l_0_17_130 () Real)
(declare-fun l_0_17_279 () Real)
(declare-fun l_0_17_278 () Real)
(declare-fun l_0_17_277 () Real)
(declare-fun l_0_17_258 () Real)
(declare-fun l_0_17_257 () Real)
(declare-fun l_0_17_256 () Real)
(declare-fun l_0_17_237 () Real)
(declare-fun l_0_17_236 () Real)
(declare-fun l_0_17_235 () Real)
(declare-fun l_0_17_216 () Real)
(declare-fun l_0_17_215 () Real)
(declare-fun l_0_17_214 () Real)
(declare-fun l_0_17_195 () Real)
(declare-fun l_0_17_194 () Real)
(declare-fun l_0_17_193 () Real)
(declare-fun l_0_17_129 () Real)
(declare-fun l_0_17_128 () Real)
(declare-fun l_0_17_22 () Real)
(declare-fun l_0_17_1 () Real)
(declare-fun l_0_17_64 () Real)
(declare-fun l_0_17_43 () Real)
(declare-fun l_0_17_274 () Real)
(declare-fun l_0_17_253 () Real)
(declare-fun l_0_17_232 () Real)
(declare-fun l_0_17_211 () Real)
(declare-fun l_0_17_190 () Real)
(declare-fun l_0_17_127 () Real)
(declare-fun l_0_17_32 () Real)
(declare-fun l_0_17_11 () Real)
(declare-fun l_0_17_85 () Real)
(declare-fun l_0_17_169 () Real)
(declare-fun l_0_17_148 () Real)
(declare-fun l_0_17_106 () Real)
(declare-fun l_0_17_74 () Real)
(declare-fun l_0_17_53 () Real)
(declare-fun l_0_17_284 () Real)
(declare-fun l_0_17_263 () Real)
(declare-fun l_0_17_33 () Real)
(declare-fun l_0_17_242 () Real)
(declare-fun l_0_17_221 () Real)
(declare-fun l_0_17_200 () Real)
(declare-fun l_0_17_12 () Real)
(declare-fun l_0_17_133 () Real)
(declare-fun l_0_17_34 () Real)
(declare-fun l_0_17_13 () Real)
(declare-fun l_0_17_137 () Real)
(declare-fun l_0_17_88 () Real)
(declare-fun l_0_17_172 () Real)
(declare-fun l_0_17_151 () Real)
(declare-fun l_0_17_142 () Real)
(declare-fun l_0_17_109 () Real)
(declare-fun l_0_17_35 () Real)
(declare-fun l_0_17_14 () Real)
(declare-fun l_0_17_36 () Real)
(declare-fun l_0_17_15 () Real)
(declare-fun l_0_17_95 () Real)
(declare-fun l_0_17_179 () Real)
(declare-fun l_0_17_158 () Real)
(declare-fun l_0_17_116 () Real)
(declare-fun l_0_17_134 () Real)
(declare-fun l_0_17_76 () Real)
(declare-fun l_0_17_75 () Real)
(declare-fun l_0_17_55 () Real)
(declare-fun l_0_17_54 () Real)
(declare-fun l_0_17_286 () Real)
(declare-fun l_0_17_285 () Real)
(declare-fun l_0_17_265 () Real)
(declare-fun l_0_17_264 () Real)
(declare-fun l_0_17_244 () Real)
(declare-fun l_0_17_243 () Real)
(declare-fun l_0_17_223 () Real)
(declare-fun l_0_17_222 () Real)
(declare-fun l_0_17_202 () Real)
(declare-fun l_0_17_201 () Real)
(declare-fun l_0_17_138 () Real)
(declare-fun l_0_17_89 () Real)
(declare-fun l_0_17_173 () Real)
(declare-fun l_0_17_152 () Real)
(declare-fun l_0_17_143 () Real)
(declare-fun l_0_17_110 () Real)
(declare-fun l_0_17_135 () Real)
(declare-fun l_0_17_139 () Real)
(declare-fun l_0_17_90 () Real)
(declare-fun l_0_17_174 () Real)
(declare-fun l_0_17_153 () Real)
(declare-fun l_0_17_144 () Real)
(declare-fun l_0_17_111 () Real)
(declare-fun l_0_17_136 () Real)
(declare-fun l_0_17_77 () Real)
(declare-fun l_0_17_56 () Real)
(declare-fun l_0_17_140 () Real)
(declare-fun l_0_17_93 () Real)
(declare-fun l_0_17_177 () Real)
(declare-fun l_0_17_156 () Real)
(declare-fun l_0_17_145 () Real)
(declare-fun l_0_17_114 () Real)
(declare-fun l_0_17_78 () Real)
(declare-fun l_0_17_57 () Real)
(declare-fun l_0_17_141 () Real)
(declare-fun l_0_17_97 () Real)
(declare-fun l_0_17_96 () Real)
(declare-fun l_0_17_181 () Real)
(declare-fun l_0_17_180 () Real)
(declare-fun l_0_17_160 () Real)
(declare-fun l_0_17_159 () Real)
(declare-fun l_0_17_146 () Real)
(declare-fun l_0_17_118 () Real)
(declare-fun l_0_17_117 () Real)
(declare-fun l_0_17_186 () Real)
(declare-fun l_0_17_165 () Real)
(declare-fun l_0_17_147 () Real)
(declare-fun l_0_17_123 () Real)
(declare-fun l_0_17_102 () Real)
(declare-fun l_0_17_287 () Real)
(declare-fun l_0_17_266 () Real)
(declare-fun l_0_17_245 () Real)
(declare-fun l_0_17_224 () Real)
(declare-fun l_0_17_203 () Real)
(declare-fun l_0_17_288 () Real)
(declare-fun l_0_17_267 () Real)
(declare-fun l_0_17_246 () Real)
(declare-fun l_0_17_225 () Real)
(declare-fun l_0_17_204 () Real)
(declare-fun l_0_17_94 () Real)
(declare-fun l_0_17_178 () Real)
(declare-fun l_0_17_157 () Real)
(declare-fun l_0_17_115 () Real)
(declare-fun l_0_17_98 () Real)
(declare-fun l_0_17_182 () Real)
(declare-fun l_0_17_161 () Real)
(declare-fun l_0_17_119 () Real)
(declare-fun l_0_17_187 () Real)
(declare-fun l_0_17_166 () Real)
(declare-fun l_0_17_124 () Real)
(declare-fun l_0_17_103 () Real)
(declare-fun l_0_17_99 () Real)
(declare-fun l_0_17_183 () Real)
(declare-fun l_0_17_162 () Real)
(declare-fun l_0_17_120 () Real)
(declare-fun l_0_17_188 () Real)
(declare-fun l_0_17_167 () Real)
(declare-fun l_0_17_125 () Real)
(declare-fun l_0_17_104 () Real)
(declare-fun l_0_17_189 () Real)
(declare-fun l_0_17_168 () Real)
(declare-fun l_0_17_126 () Real)
(declare-fun l_0_17_105 () Real)
(declare-fun l_0_18_87 () Real)
(declare-fun l_0_18_86 () Real)
(declare-fun l_0_18_69 () Real)
(declare-fun l_0_18_68 () Real)
(declare-fun l_0_18_67 () Real)
(declare-fun l_0_18_66 () Real)
(declare-fun l_0_18_65 () Real)
(declare-fun l_0_18_6 () Real)
(declare-fun l_0_18_5 () Real)
(declare-fun l_0_18_48 () Real)
(declare-fun l_0_18_47 () Real)
(declare-fun l_0_18_46 () Real)
(declare-fun l_0_18_45 () Real)
(declare-fun l_0_18_44 () Real)
(declare-fun l_0_18_4 () Real)
(declare-fun l_0_18_27 () Real)
(declare-fun l_0_18_26 () Real)
(declare-fun l_0_18_25 () Real)
(declare-fun l_0_18_171 () Real)
(declare-fun l_0_18_170 () Real)
(declare-fun l_0_18_150 () Real)
(declare-fun l_0_18_149 () Real)
(declare-fun l_0_18_132 () Real)
(declare-fun l_0_18_131 () Real)
(declare-fun l_0_18_130 () Real)
(declare-fun l_0_18_108 () Real)
(declare-fun l_0_18_107 () Real)
(declare-fun l_0_18_300 () Real)
(declare-fun l_0_18_3 () Real)
(declare-fun l_0_18_299 () Real)
(declare-fun l_0_18_298 () Real)
(declare-fun l_0_18_279 () Real)
(declare-fun l_0_18_278 () Real)
(declare-fun l_0_18_277 () Real)
(declare-fun l_0_18_258 () Real)
(declare-fun l_0_18_257 () Real)
(declare-fun l_0_18_256 () Real)
(declare-fun l_0_18_24 () Real)
(declare-fun l_0_18_237 () Real)
(declare-fun l_0_18_236 () Real)
(declare-fun l_0_18_235 () Real)
(declare-fun l_0_18_23 () Real)
(declare-fun l_0_18_216 () Real)
(declare-fun l_0_18_215 () Real)
(declare-fun l_0_18_214 () Real)
(declare-fun l_0_18_2 () Real)
(declare-fun l_0_18_195 () Real)
(declare-fun l_0_18_194 () Real)
(declare-fun l_0_18_193 () Real)
(declare-fun l_0_18_129 () Real)
(declare-fun l_0_18_128 () Real)
(declare-fun l_0_18_297 () Real)
(declare-fun l_0_18_296 () Real)
(declare-fun l_0_18_276 () Real)
(declare-fun l_0_18_275 () Real)
(declare-fun l_0_18_255 () Real)
(declare-fun l_0_18_254 () Real)
(declare-fun l_0_18_234 () Real)
(declare-fun l_0_18_233 () Real)
(declare-fun l_0_18_213 () Real)
(declare-fun l_0_18_212 () Real)
(declare-fun l_0_18_192 () Real)
(declare-fun l_0_18_191 () Real)
(declare-fun l_0_18_92 () Real)
(declare-fun l_0_18_91 () Real)
(declare-fun l_0_18_82 () Real)
(declare-fun l_0_18_73 () Real)
(declare-fun l_0_18_81 () Real)
(declare-fun l_0_18_72 () Real)
(declare-fun l_0_18_80 () Real)
(declare-fun l_0_18_71 () Real)
(declare-fun l_0_18_79 () Real)
(declare-fun l_0_18_70 () Real)
(declare-fun l_0_18_61 () Real)
(declare-fun l_0_18_52 () Real)
(declare-fun l_0_18_60 () Real)
(declare-fun l_0_18_51 () Real)
(declare-fun l_0_18_59 () Real)
(declare-fun l_0_18_50 () Real)
(declare-fun l_0_18_58 () Real)
(declare-fun l_0_18_49 () Real)
(declare-fun l_0_18_40 () Real)
(declare-fun l_0_18_31 () Real)
(declare-fun l_0_18_313 () Real)
(declare-fun l_0_18_304 () Real)
(declare-fun l_0_18_312 () Real)
(declare-fun l_0_18_303 () Real)
(declare-fun l_0_18_311 () Real)
(declare-fun l_0_18_302 () Real)
(declare-fun l_0_18_310 () Real)
(declare-fun l_0_18_301 () Real)
(declare-fun l_0_18_39 () Real)
(declare-fun l_0_18_30 () Real)
(declare-fun l_0_18_38 () Real)
(declare-fun l_0_18_29 () Real)
(declare-fun l_0_18_292 () Real)
(declare-fun l_0_18_283 () Real)
(declare-fun l_0_18_291 () Real)
(declare-fun l_0_18_282 () Real)
(declare-fun l_0_18_290 () Real)
(declare-fun l_0_18_281 () Real)
(declare-fun l_0_18_289 () Real)
(declare-fun l_0_18_280 () Real)
(declare-fun l_0_18_37 () Real)
(declare-fun l_0_18_28 () Real)
(declare-fun l_0_18_271 () Real)
(declare-fun l_0_18_262 () Real)
(declare-fun l_0_18_270 () Real)
(declare-fun l_0_18_261 () Real)
(declare-fun l_0_18_269 () Real)
(declare-fun l_0_18_260 () Real)
(declare-fun l_0_18_268 () Real)
(declare-fun l_0_18_259 () Real)
(declare-fun l_0_18_250 () Real)
(declare-fun l_0_18_241 () Real)
(declare-fun l_0_18_249 () Real)
(declare-fun l_0_18_240 () Real)
(declare-fun l_0_18_248 () Real)
(declare-fun l_0_18_239 () Real)
(declare-fun l_0_18_247 () Real)
(declare-fun l_0_18_238 () Real)
(declare-fun l_0_18_229 () Real)
(declare-fun l_0_18_220 () Real)
(declare-fun l_0_18_228 () Real)
(declare-fun l_0_18_219 () Real)
(declare-fun l_0_18_227 () Real)
(declare-fun l_0_18_218 () Real)
(declare-fun l_0_18_226 () Real)
(declare-fun l_0_18_217 () Real)
(declare-fun l_0_18_208 () Real)
(declare-fun l_0_18_199 () Real)
(declare-fun l_0_18_207 () Real)
(declare-fun l_0_18_198 () Real)
(declare-fun l_0_18_206 () Real)
(declare-fun l_0_18_197 () Real)
(declare-fun l_0_18_205 () Real)
(declare-fun l_0_18_196 () Real)
(declare-fun l_0_18_9 () Real)
(declare-fun l_0_18_18 () Real)
(declare-fun l_0_18_176 () Real)
(declare-fun l_0_18_175 () Real)
(declare-fun l_0_18_8 () Real)
(declare-fun l_0_18_17 () Real)
(declare-fun l_0_18_7 () Real)
(declare-fun l_0_18_16 () Real)
(declare-fun l_0_18_155 () Real)
(declare-fun l_0_18_154 () Real)
(declare-fun l_0_18_113 () Real)
(declare-fun l_0_18_112 () Real)
(declare-fun l_0_18_19 () Real)
(declare-fun l_0_18_10 () Real)
(declare-fun l_0_18_84 () Real)
(declare-fun l_0_18_83 () Real)
(declare-fun l_0_18_63 () Real)
(declare-fun l_0_18_62 () Real)
(declare-fun l_0_18_42 () Real)
(declare-fun l_0_18_41 () Real)
(declare-fun l_0_18_315 () Real)
(declare-fun l_0_18_314 () Real)
(declare-fun l_0_18_294 () Real)
(declare-fun l_0_18_293 () Real)
(declare-fun l_0_18_273 () Real)
(declare-fun l_0_18_272 () Real)
(declare-fun l_0_18_252 () Real)
(declare-fun l_0_18_251 () Real)
(declare-fun l_0_18_231 () Real)
(declare-fun l_0_18_230 () Real)
(declare-fun l_0_18_210 () Real)
(declare-fun l_0_18_21 () Real)
(declare-fun l_0_18_209 () Real)
(declare-fun l_0_18_20 () Real)
(declare-fun l_0_18_185 () Real)
(declare-fun l_0_18_184 () Real)
(declare-fun l_0_18_164 () Real)
(declare-fun l_0_18_163 () Real)
(declare-fun l_0_18_122 () Real)
(declare-fun l_0_18_121 () Real)
(declare-fun l_0_18_101 () Real)
(declare-fun l_0_18_100 () Real)
(declare-fun l_0_18_22 () Real)
(declare-fun l_0_18_1 () Real)
(declare-fun l_0_18_64 () Real)
(declare-fun l_0_18_43 () Real)
(declare-fun l_0_18_295 () Real)
(declare-fun l_0_18_274 () Real)
(declare-fun l_0_18_253 () Real)
(declare-fun l_0_18_232 () Real)
(declare-fun l_0_18_211 () Real)
(declare-fun l_0_18_190 () Real)
(declare-fun l_0_18_127 () Real)
(declare-fun l_0_18_32 () Real)
(declare-fun l_0_18_11 () Real)
(declare-fun l_0_18_85 () Real)
(declare-fun l_0_18_169 () Real)
(declare-fun l_0_18_148 () Real)
(declare-fun l_0_18_106 () Real)
(declare-fun l_0_18_74 () Real)
(declare-fun l_0_18_53 () Real)
(declare-fun l_0_18_305 () Real)
(declare-fun l_0_18_284 () Real)
(declare-fun l_0_18_263 () Real)
(declare-fun l_0_18_33 () Real)
(declare-fun l_0_18_242 () Real)
(declare-fun l_0_18_221 () Real)
(declare-fun l_0_18_200 () Real)
(declare-fun l_0_18_12 () Real)
(declare-fun l_0_18_133 () Real)
(declare-fun l_0_18_34 () Real)
(declare-fun l_0_18_13 () Real)
(declare-fun l_0_18_137 () Real)
(declare-fun l_0_18_88 () Real)
(declare-fun l_0_18_172 () Real)
(declare-fun l_0_18_151 () Real)
(declare-fun l_0_18_142 () Real)
(declare-fun l_0_18_109 () Real)
(declare-fun l_0_18_35 () Real)
(declare-fun l_0_18_14 () Real)
(declare-fun l_0_18_36 () Real)
(declare-fun l_0_18_15 () Real)
(declare-fun l_0_18_95 () Real)
(declare-fun l_0_18_179 () Real)
(declare-fun l_0_18_158 () Real)
(declare-fun l_0_18_116 () Real)
(declare-fun l_0_18_134 () Real)
(declare-fun l_0_18_76 () Real)
(declare-fun l_0_18_75 () Real)
(declare-fun l_0_18_55 () Real)
(declare-fun l_0_18_54 () Real)
(declare-fun l_0_18_307 () Real)
(declare-fun l_0_18_306 () Real)
(declare-fun l_0_18_286 () Real)
(declare-fun l_0_18_285 () Real)
(declare-fun l_0_18_265 () Real)
(declare-fun l_0_18_264 () Real)
(declare-fun l_0_18_244 () Real)
(declare-fun l_0_18_243 () Real)
(declare-fun l_0_18_223 () Real)
(declare-fun l_0_18_222 () Real)
(declare-fun l_0_18_202 () Real)
(declare-fun l_0_18_201 () Real)
(declare-fun l_0_18_138 () Real)
(declare-fun l_0_18_89 () Real)
(declare-fun l_0_18_173 () Real)
(declare-fun l_0_18_152 () Real)
(declare-fun l_0_18_143 () Real)
(declare-fun l_0_18_110 () Real)
(declare-fun l_0_18_135 () Real)
(declare-fun l_0_18_139 () Real)
(declare-fun l_0_18_90 () Real)
(declare-fun l_0_18_174 () Real)
(declare-fun l_0_18_153 () Real)
(declare-fun l_0_18_144 () Real)
(declare-fun l_0_18_111 () Real)
(declare-fun l_0_18_136 () Real)
(declare-fun l_0_18_77 () Real)
(declare-fun l_0_18_56 () Real)
(declare-fun l_0_18_140 () Real)
(declare-fun l_0_18_93 () Real)
(declare-fun l_0_18_177 () Real)
(declare-fun l_0_18_156 () Real)
(declare-fun l_0_18_145 () Real)
(declare-fun l_0_18_114 () Real)
(declare-fun l_0_18_78 () Real)
(declare-fun l_0_18_57 () Real)
(declare-fun l_0_18_141 () Real)
(declare-fun l_0_18_97 () Real)
(declare-fun l_0_18_96 () Real)
(declare-fun l_0_18_181 () Real)
(declare-fun l_0_18_180 () Real)
(declare-fun l_0_18_160 () Real)
(declare-fun l_0_18_159 () Real)
(declare-fun l_0_18_146 () Real)
(declare-fun l_0_18_118 () Real)
(declare-fun l_0_18_117 () Real)
(declare-fun l_0_18_186 () Real)
(declare-fun l_0_18_165 () Real)
(declare-fun l_0_18_147 () Real)
(declare-fun l_0_18_123 () Real)
(declare-fun l_0_18_102 () Real)
(declare-fun l_0_18_308 () Real)
(declare-fun l_0_18_287 () Real)
(declare-fun l_0_18_266 () Real)
(declare-fun l_0_18_245 () Real)
(declare-fun l_0_18_224 () Real)
(declare-fun l_0_18_203 () Real)
(declare-fun l_0_18_309 () Real)
(declare-fun l_0_18_288 () Real)
(declare-fun l_0_18_267 () Real)
(declare-fun l_0_18_246 () Real)
(declare-fun l_0_18_225 () Real)
(declare-fun l_0_18_204 () Real)
(declare-fun l_0_18_94 () Real)
(declare-fun l_0_18_178 () Real)
(declare-fun l_0_18_157 () Real)
(declare-fun l_0_18_115 () Real)
(declare-fun l_0_18_98 () Real)
(declare-fun l_0_18_182 () Real)
(declare-fun l_0_18_161 () Real)
(declare-fun l_0_18_119 () Real)
(declare-fun l_0_18_187 () Real)
(declare-fun l_0_18_166 () Real)
(declare-fun l_0_18_124 () Real)
(declare-fun l_0_18_103 () Real)
(declare-fun l_0_18_99 () Real)
(declare-fun l_0_18_183 () Real)
(declare-fun l_0_18_162 () Real)
(declare-fun l_0_18_120 () Real)
(declare-fun l_0_18_188 () Real)
(declare-fun l_0_18_167 () Real)
(declare-fun l_0_18_125 () Real)
(declare-fun l_0_18_104 () Real)
(declare-fun l_0_18_189 () Real)
(declare-fun l_0_18_168 () Real)
(declare-fun l_0_18_126 () Real)
(declare-fun l_0_18_105 () Real)
(assert
 (= (- (* (* (- 1.0) l_0_0_1) l_0_0_1) (* l_0_0_2 l_0_0_2)) 0.0))
(assert
 (>= l_0_0_1 0.0))
(assert
 (>= l_0_0_2 0.0))
(assert
 (let ((?x3402 (* l_0_1_3 l_0_1_3)))
 (let ((?x3403 (- (- (* (* (- 1.0) l_0_1_1) l_0_1_1) (* l_0_1_2 l_0_1_2)) ?x3402)))
 (= ?x3403 0.0))))
(assert
 (>= l_0_1_1 0.0))
(assert
 (>= l_0_1_2 0.0))
(assert
 (>= l_0_1_3 0.0))
(assert
 (let ((?x3424 (* l_0_2_4 l_0_2_4)))
 (let ((?x3422 (* l_0_2_3 l_0_2_3)))
 (let ((?x3423 (- (- (* (* (- 1.0) l_0_2_1) l_0_2_1) (* l_0_2_2 l_0_2_2)) ?x3422)))
 (= (- ?x3423 ?x3424) 0.0)))))
(assert
 (>= l_0_2_1 0.0))
(assert
 (>= l_0_2_2 0.0))
(assert
 (>= l_0_2_3 0.0))
(assert
 (>= l_0_2_4 0.0))
(assert
 (let ((?x3452 (* l_0_3_5 l_0_3_5)))
 (let ((?x3450 (* l_0_3_4 l_0_3_4)))
 (let ((?x3448 (* l_0_3_3 l_0_3_3)))
 (let ((?x3449 (- (- (* (* (- 1.0) l_0_3_1) l_0_3_1) (* l_0_3_2 l_0_3_2)) ?x3448)))
 (= (- (- ?x3449 ?x3450) ?x3452) 0.0))))))
(assert
 (>= l_0_3_1 0.0))
(assert
 (>= l_0_3_2 0.0))
(assert
 (>= l_0_3_3 0.0))
(assert
 (>= l_0_3_4 0.0))
(assert
 (>= l_0_3_5 0.0))
(assert
 (let ((?x3486 (* l_0_4_6 l_0_4_6)))
 (let ((?x3484 (* l_0_4_5 l_0_4_5)))
 (let ((?x3482 (* l_0_4_4 l_0_4_4)))
 (let ((?x3480 (* l_0_4_3 l_0_4_3)))
 (let ((?x3481 (- (- (* (* (- 1.0) l_0_4_1) l_0_4_1) (* l_0_4_2 l_0_4_2)) ?x3480)))
 (= (- (- (- ?x3481 ?x3482) ?x3484) ?x3486) 0.0)))))))
(assert
 (>= l_0_4_1 0.0))
(assert
 (>= l_0_4_2 0.0))
(assert
 (>= l_0_4_3 0.0))
(assert
 (>= l_0_4_4 0.0))
(assert
 (>= l_0_4_5 0.0))
(assert
 (>= l_0_4_6 0.0))
(assert
 (let ((?x3526 (* l_0_5_7 l_0_5_7)))
 (let ((?x3524 (* l_0_5_6 l_0_5_6)))
 (let ((?x3522 (* l_0_5_5 l_0_5_5)))
 (let ((?x3520 (* l_0_5_4 l_0_5_4)))
 (let ((?x3518 (* l_0_5_3 l_0_5_3)))
 (let ((?x3519 (- (- (* (* (- 1.0) l_0_5_1) l_0_5_1) (* l_0_5_2 l_0_5_2)) ?x3518)))
 (= (- (- (- (- ?x3519 ?x3520) ?x3522) ?x3524) ?x3526) 0.0))))))))
(assert
 (>= l_0_5_1 0.0))
(assert
 (>= l_0_5_2 0.0))
(assert
 (>= l_0_5_3 0.0))
(assert
 (>= l_0_5_4 0.0))
(assert
 (>= l_0_5_5 0.0))
(assert
 (>= l_0_5_6 0.0))
(assert
 (>= l_0_5_7 0.0))
(assert
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3573 (* 6.0 ?x3572)))
 (let ((?x3570 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x3567 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3564 (* 6.0 ?x3562)))
 (let ((?x3565 (+ (- (* (- l_0_6_149) l_0_6_149) (* l_0_6_150 l_0_6_150)) ?x3564)))
 (let ((?x3578 (- (+ (- (- ?x3565 ?x3567) ?x3570) ?x3573) (* (* 1.0 l_0_6_44) l_0_6_44))))
 (let ((?x3584 (+ (- ?x3578 (* (* 1.0 l_0_6_45) l_0_6_45)) (* 1.0 (* l_0_6_65 l_0_6_65)))))
 (= (+ (+ ?x3584 (* 1.0 (* l_0_6_66 l_0_6_66))) 1.0) 0.0)))))))))))
(assert
 (= (+ (* (- l_0_6_1) l_0_6_1) (* l_0_6_22 l_0_6_22)) 0.0))
(assert
 (let ((?x3647 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x3640 (* l_0_6_148 l_0_6_148)))
 (let ((?x3631 (* l_0_6_1 l_0_6_1)))
 (let ((?x3638 (* 6.0 ?x3631)))
 (let ((?x3645 (+ (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_2) ?x3638) ?x3640) (* (* 2.0 l_0_6_22) l_0_6_23))))
 (let ((?x3654 (+ (- (- ?x3645 ?x3647) (* (* 1.0 l_0_6_43) l_0_6_43)) (* 1.0 (* l_0_6_64 l_0_6_64)))))
 (= ?x3654 0.0))))))))
(assert
 (let ((?x3652 (* l_0_6_64 l_0_6_64)))
 (let ((?x3691 (* 3.0 ?x3652)))
 (let ((?x3647 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x3682 (* l_0_6_127 l_0_6_127)))
 (let ((?x3631 (* l_0_6_1 l_0_6_1)))
 (let ((?x3638 (* 6.0 ?x3631)))
 (let ((?x3685 (+ (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_4) ?x3638) ?x3682) (* (* 2.0 l_0_6_22) l_0_6_25))))
 (= (+ (- (- ?x3685 ?x3647) (* (* 3.0 l_0_6_43) l_0_6_43)) ?x3691) 0.0)))))))))
(assert
 (let ((?x3652 (* l_0_6_64 l_0_6_64)))
 (let ((?x3670 (* l_0_6_43 l_0_6_43)))
 (let ((?x3718 (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) (* (* 2.0 l_0_6_22) l_0_6_28))))
 (= (- (+ ?x3718 ?x3670) ?x3652) 0.0)))))
(assert
 (let ((?x3736 (+ (+ (* (* (- 2.0) l_0_6_1) l_0_6_11) (* l_0_6_127 l_0_6_127)) (* (* 2.0 l_0_6_22) l_0_6_32))))
 (= ?x3736 0.0)))
(assert
 (let ((?x3749 (* l_0_6_85 l_0_6_85)))
 (let ((?x3748 (+ (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) (* l_0_6_106 l_0_6_106)) (* (* 2.0 l_0_6_22) l_0_6_37))))
 (= (- ?x3748 ?x3749) 0.0))))
(assert
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3778 (* ?x3777 l_0_6_65)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3775 (* ?x3774 l_0_6_44)))
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3604 (* l_0_6_24 l_0_6_24)))
 (let ((?x3597 (* l_0_6_23 l_0_6_23)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3769 (* ?x3768 l_0_6_23)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3763 (* ?x3762 l_0_6_2)))
 (let ((?x3771 (+ (- (- (- ?x3763 (* (* 2.0 l_0_6_148) l_0_6_149)) ?x3562) ?x3769) ?x3597)))
 (= (+ (- (- (+ ?x3771 ?x3604) ?x3572) ?x3775) ?x3778) 0.0)))))))))))))))
(assert
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3844 (* ?x3777 l_0_6_67)))
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x3842 (* ?x3841 l_0_6_65)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3839 (* ?x3774 l_0_6_46)))
 (let ((?x3836 (* 6.0 l_0_6_43)))
 (let ((?x3837 (* ?x3836 l_0_6_44)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3825 (* ?x3768 l_0_6_25)))
 (let ((?x3769 (* ?x3768 l_0_6_23)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x3817 (* ?x3816 l_0_6_128)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3808 (* ?x3762 l_0_6_4)))
 (let ((?x3763 (* ?x3762 l_0_6_2)))
 (let ((?x3823 (- (- (- (+ ?x3763 ?x3808) ?x3817) (* (* 2.0 l_0_6_148) l_0_6_151)) (* (* 2.0 l_0_6_2) l_0_6_4))))
 (let ((?x3832 (+ (+ (- (- ?x3823 ?x3769) ?x3825) (* (* 2.0 l_0_6_23) l_0_6_25)) (* (* 2.0 l_0_6_24) l_0_6_26))))
 (let ((?x3843 (+ (- (- (- ?x3832 (* (* 2.0 l_0_6_3) l_0_6_5)) ?x3837) ?x3839) ?x3842)))
 (= (+ ?x3843 ?x3844) 0.0)))))))))))))))))))))
(assert
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3918 (* ?x3777 l_0_6_70)))
 (let ((?x3778 (* ?x3777 l_0_6_65)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3915 (* ?x3774 l_0_6_49)))
 (let ((?x3775 (* ?x3774 l_0_6_44)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3906 (* ?x3768 l_0_6_28)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3901 (* ?x3762 l_0_6_7)))
 (let ((?x3905 (- (- ?x3901 (* (* 2.0 l_0_6_148) l_0_6_154)) (* (* 2.0 l_0_6_2) l_0_6_7))))
 (let ((?x3911 (+ (+ (- ?x3905 ?x3906) (* (* 2.0 l_0_6_23) l_0_6_28)) (* (* 2.0 l_0_6_24) l_0_6_29))))
 (let ((?x3917 (- (- (+ (- ?x3911 (* (* 2.0 l_0_6_3) l_0_6_8)) ?x3775) ?x3915) ?x3778)))
 (= (+ ?x3917 ?x3918) 0.0)))))))))))))))
(assert
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3983 (* ?x3777 l_0_6_74)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3981 (* ?x3774 l_0_6_53)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3975 (* ?x3768 l_0_6_32)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x3817 (* ?x3816 l_0_6_128)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3965 (* ?x3762 l_0_6_11)))
 (let ((?x3971 (- (- ?x3965 (* (* 2.0 l_0_6_11) l_0_6_2)) (* (* 2.0 l_0_6_12) l_0_6_3))))
 (let ((?x3978 (+ (- (- (+ ?x3971 ?x3817) (* (* 2.0 l_0_6_148) l_0_6_158)) ?x3975) (* (* 2.0 l_0_6_23) l_0_6_32))))
 (= (+ (- (+ ?x3978 (* (* 2.0 l_0_6_24) l_0_6_33)) ?x3981) ?x3983) 0.0))))))))))))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4049 (* ?x4048 l_0_6_86)))
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x4046 (* ?x3777 l_0_6_79)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x4044 (* ?x3774 l_0_6_58)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x4038 (* ?x3768 l_0_6_37)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x4026 (* ?x3762 l_0_6_16)))
 (let ((?x4031 (- (+ ?x4026 (* (* 2.0 l_0_6_106) l_0_6_107)) (* (* 2.0 l_0_6_148) l_0_6_163))))
 (let ((?x4037 (- (- ?x4031 (* (* 2.0 l_0_6_16) l_0_6_2)) (* (* 2.0 l_0_6_17) l_0_6_3))))
 (let ((?x4043 (+ (+ (- ?x4037 ?x4038) (* (* 2.0 l_0_6_23) l_0_6_37)) (* (* 2.0 l_0_6_24) l_0_6_38))))
 (= (- (+ (- ?x4043 ?x4044) ?x4046) ?x4049) 0.0)))))))))))))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4119 (* ?x3841 l_0_6_67)))
 (let ((?x3842 (* ?x3841 l_0_6_65)))
 (let ((?x4116 (* l_0_6_6 l_0_6_6)))
 (let ((?x4114 (* l_0_6_5 l_0_6_5)))
 (let ((?x3836 (* 6.0 l_0_6_43)))
 (let ((?x4112 (* ?x3836 l_0_6_46)))
 (let ((?x3837 (* ?x3836 l_0_6_44)))
 (let ((?x4109 (* l_0_6_4 l_0_6_4)))
 (let ((?x4107 (* l_0_6_27 l_0_6_27)))
 (let ((?x4105 (* l_0_6_26 l_0_6_26)))
 (let ((?x4103 (* l_0_6_25 l_0_6_25)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3825 (* ?x3768 l_0_6_25)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4100 (* ?x3816 l_0_6_130)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3808 (* ?x3762 l_0_6_4)))
 (let ((?x4111 (- (- (+ (+ (+ (- (- ?x3808 ?x4100) ?x3825) ?x4103) ?x4105) ?x4107) ?x4109) ?x3837)))
 (= (+ (+ (- (- (- ?x4111 ?x4112) ?x4114) ?x4116) ?x3842) ?x4119) 0.0)))))))))))))))))))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4175 (* ?x3841 l_0_6_70)))
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3844 (* ?x3777 l_0_6_67)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3839 (* ?x3774 l_0_6_46)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3906 (* ?x3768 l_0_6_28)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4150 (* ?x3816 l_0_6_133)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3901 (* ?x3762 l_0_6_7)))
 (let ((?x4158 (+ (+ (- (- ?x3901 ?x4150) ?x3906) (* (* 2.0 l_0_6_25) l_0_6_28)) (* (* 2.0 l_0_6_26) l_0_6_29))))
 (let ((?x4164 (- (+ ?x4158 (* (* 2.0 l_0_6_27) l_0_6_30)) (* (* 2.0 l_0_6_4) l_0_6_7))))
 (let ((?x4170 (- (- (+ ?x4164 ?x3839) (* (* 6.0 l_0_6_43) l_0_6_49)) (* (* 2.0 l_0_6_5) l_0_6_8))))
 (= (+ (- (- ?x4170 (* (* 2.0 l_0_6_6) l_0_6_9)) ?x3844) ?x4175) 0.0)))))))))))))))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4243 (* ?x3841 l_0_6_74)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x3975 (* ?x3768 l_0_6_32)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4229 (* ?x3816 l_0_6_137)))
 (let ((?x4100 (* ?x3816 l_0_6_130)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x3965 (* ?x3762 l_0_6_11)))
 (let ((?x4227 (- (- ?x3965 (* (* 2.0 l_0_6_11) l_0_6_4)) (* (* 2.0 l_0_6_12) l_0_6_5))))
 (let ((?x4234 (- (- (- (+ ?x4227 ?x4100) ?x4229) (* (* 2.0 l_0_6_13) l_0_6_6)) ?x3975)))
 (let ((?x4238 (+ (+ ?x4234 (* (* 2.0 l_0_6_25) l_0_6_32)) (* (* 2.0 l_0_6_26) l_0_6_33))))
 (let ((?x4242 (- (+ ?x4238 (* (* 2.0 l_0_6_27) l_0_6_34)) (* (* 6.0 l_0_6_43) l_0_6_53))))
 (= (+ ?x4242 ?x4243) 0.0)))))))))))))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4310 (* ?x4048 l_0_6_88)))
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4308 (* ?x3841 l_0_6_79)))
 (let ((?x3768 (* 12.0 l_0_6_22)))
 (let ((?x4038 (* ?x3768 l_0_6_37)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4290 (* ?x3816 l_0_6_142)))
 (let ((?x3762 (* 12.0 l_0_6_1)))
 (let ((?x4026 (* ?x3762 l_0_6_16)))
 (let ((?x4293 (- (- (+ ?x4026 (* (* 2.0 l_0_6_106) l_0_6_109)) ?x4290) (* (* 2.0 l_0_6_16) l_0_6_4))))
 (let ((?x4298 (- (- ?x4293 (* (* 2.0 l_0_6_17) l_0_6_5)) (* (* 2.0 l_0_6_18) l_0_6_6))))
 (let ((?x4303 (+ (+ (- ?x4298 ?x4038) (* (* 2.0 l_0_6_25) l_0_6_37)) (* (* 2.0 l_0_6_26) l_0_6_38))))
 (let ((?x4307 (- (+ ?x4303 (* (* 2.0 l_0_6_27) l_0_6_39)) (* (* 6.0 l_0_6_43) l_0_6_58))))
 (= (- (+ ?x4307 ?x4308) ?x4310) 0.0))))))))))))))))
(assert
 (let ((?x4379 (* l_0_6_9 l_0_6_9)))
 (let ((?x4377 (* l_0_6_8 l_0_6_8)))
 (let ((?x4375 (* l_0_6_7 l_0_6_7)))
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3918 (* ?x3777 l_0_6_70)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3915 (* ?x3774 l_0_6_49)))
 (let ((?x4371 (* l_0_6_31 l_0_6_31)))
 (let ((?x4369 (* l_0_6_30 l_0_6_30)))
 (let ((?x4367 (* l_0_6_29 l_0_6_29)))
 (let ((?x4370 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_28 l_0_6_28)) ?x4367) ?x4369)))
 (= (- (- (- (- (+ (+ ?x4370 ?x4371) ?x3915) ?x3918) ?x4375) ?x4377) ?x4379) 0.0)))))))))))))
(assert
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x3983 (* ?x3777 l_0_6_74)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x3981 (* ?x3774 l_0_6_53)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4150 (* ?x3816 l_0_6_133)))
 (let ((?x4403 (- (* (* (- 2.0) l_0_6_10) l_0_6_14) (* (* 2.0 l_0_6_11) l_0_6_7))))
 (let ((?x4408 (- (+ (- ?x4403 (* (* 2.0 l_0_6_12) l_0_6_8)) ?x4150) (* (* 2.0 l_0_6_13) l_0_6_9))))
 (let ((?x4414 (+ (+ ?x4408 (* (* 2.0 l_0_6_28) l_0_6_32)) (* (* 2.0 l_0_6_29) l_0_6_33))))
 (let ((?x4420 (+ (+ ?x4414 (* (* 2.0 l_0_6_30) l_0_6_34)) (* (* 2.0 l_0_6_31) l_0_6_35))))
 (= (- (+ ?x4420 ?x3981) ?x3983) 0.0))))))))))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4478 (* ?x4048 l_0_6_91)))
 (let ((?x3777 (* 2.0 l_0_6_64)))
 (let ((?x4046 (* ?x3777 l_0_6_79)))
 (let ((?x3774 (* 2.0 l_0_6_43)))
 (let ((?x4044 (* ?x3774 l_0_6_58)))
 (let ((?x4461 (+ (* (* (- 2.0) l_0_6_10) l_0_6_19) (* (* 2.0 l_0_6_106) l_0_6_112))))
 (let ((?x4465 (- (- ?x4461 (* (* 2.0 l_0_6_16) l_0_6_7)) (* (* 2.0 l_0_6_17) l_0_6_8))))
 (let ((?x4469 (+ (- ?x4465 (* (* 2.0 l_0_6_18) l_0_6_9)) (* (* 2.0 l_0_6_28) l_0_6_37))))
 (let ((?x4473 (+ (+ ?x4469 (* (* 2.0 l_0_6_29) l_0_6_38)) (* (* 2.0 l_0_6_30) l_0_6_39))))
 (let ((?x4479 (- (- (+ (+ ?x4473 (* (* 2.0 l_0_6_31) l_0_6_40)) ?x4044) ?x4046) ?x4478)))
 (= ?x4479 0.0)))))))))))))
(assert
 (let ((?x4543 (* l_0_6_36 l_0_6_36)))
 (let ((?x4541 (* l_0_6_35 l_0_6_35)))
 (let ((?x4539 (* l_0_6_34 l_0_6_34)))
 (let ((?x4537 (* l_0_6_33 l_0_6_33)))
 (let ((?x4535 (* l_0_6_32 l_0_6_32)))
 (let ((?x4533 (* l_0_6_15 l_0_6_15)))
 (let ((?x4531 (* l_0_6_14 l_0_6_14)))
 (let ((?x4529 (* l_0_6_13 l_0_6_13)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4229 (* ?x3816 l_0_6_137)))
 (let ((?x4530 (- (+ (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x4229) ?x4529)))
 (let ((?x4544 (+ (+ (+ (+ (+ (- (- ?x4530 ?x4531) ?x4533) ?x4535) ?x4537) ?x4539) ?x4541) ?x4543)))
 (= ?x4544 0.0))))))))))))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4593 (* ?x4048 l_0_6_95)))
 (let ((?x3816 (* 2.0 l_0_6_127)))
 (let ((?x4290 (* ?x3816 l_0_6_142)))
 (let ((?x4566 (- (* (* 2.0 l_0_6_106) l_0_6_116) (* (* 2.0 l_0_6_11) l_0_6_16))))
 (let ((?x4571 (- (+ (- ?x4566 (* (* 2.0 l_0_6_12) l_0_6_17)) ?x4290) (* (* 2.0 l_0_6_13) l_0_6_18))))
 (let ((?x4577 (- (- ?x4571 (* (* 2.0 l_0_6_14) l_0_6_19)) (* (* 2.0 l_0_6_15) l_0_6_20))))
 (let ((?x4583 (+ (+ ?x4577 (* (* 2.0 l_0_6_32) l_0_6_37)) (* (* 2.0 l_0_6_33) l_0_6_38))))
 (let ((?x4589 (+ (+ ?x4583 (* (* 2.0 l_0_6_34) l_0_6_39)) (* (* 2.0 l_0_6_35) l_0_6_40))))
 (= (- (+ ?x4589 (* (* 2.0 l_0_6_36) l_0_6_41)) ?x4593) 0.0)))))))))))
(assert
 (let ((?x4673 (* l_0_6_42 l_0_6_42)))
 (let ((?x4671 (* l_0_6_41 l_0_6_41)))
 (let ((?x4669 (* l_0_6_40 l_0_6_40)))
 (let ((?x4667 (* l_0_6_39 l_0_6_39)))
 (let ((?x4665 (* l_0_6_38 l_0_6_38)))
 (let ((?x4663 (* l_0_6_37 l_0_6_37)))
 (let ((?x4661 (* l_0_6_21 l_0_6_21)))
 (let ((?x4659 (* l_0_6_20 l_0_6_20)))
 (let ((?x4657 (* l_0_6_19 l_0_6_19)))
 (let ((?x4655 (* l_0_6_18 l_0_6_18)))
 (let ((?x4653 (* l_0_6_17 l_0_6_17)))
 (let ((?x4651 (* l_0_6_16 l_0_6_16)))
 (let ((?x4027 (* 2.0 l_0_6_106)))
 (let ((?x4649 (* ?x4027 l_0_6_121)))
 (let ((?x4656 (- (- (- (+ (* (* (- 2.0) l_0_6_100) l_0_6_85) ?x4649) ?x4651) ?x4653) ?x4655)))
 (let ((?x4670 (+ (+ (+ (+ (- (- (- ?x4656 ?x4657) ?x4659) ?x4661) ?x4663) ?x4665) ?x4667) ?x4669)))
 (= (+ (+ ?x4670 ?x4671) ?x4673) 0.0))))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x4755 (* 3.0 ?x3585)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x4753 (* ?x4752 l_0_6_68)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x4750 (* 3.0 ?x3582)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x4748 (* ?x4747 l_0_6_67)))
 (let ((?x4745 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x4742 (* ?x4741 l_0_6_47)))
 (let ((?x4739 (* (* 3.0 l_0_6_44) l_0_6_44)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x4736 (* ?x4735 l_0_6_46)))
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3573 (* 6.0 ?x3572)))
 (let ((?x4731 (* 12.0 l_0_6_3)))
 (let ((?x4732 (* ?x4731 l_0_6_5)))
 (let ((?x3570 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x4728 (* ?x4727 l_0_6_26)))
 (let ((?x3567 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x4724 (* ?x4723 l_0_6_25)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3564 (* 6.0 ?x3562)))
 (let ((?x4719 (* 12.0 l_0_6_2)))
 (let ((?x4720 (* ?x4719 l_0_6_4)))
 (let ((?x4715 (- (- (* (- l_0_6_128) l_0_6_128) (* l_0_6_129 l_0_6_129)) (* (* 2.0 l_0_6_149) l_0_6_151))))
 (let ((?x4725 (- (+ (+ (- ?x4715 (* (* 2.0 l_0_6_150) l_0_6_152)) ?x4720) ?x3564) ?x4724)))
 (let ((?x4740 (- (- (+ (+ (- (- (- ?x4725 ?x3567) ?x4728) ?x3570) ?x4732) ?x3573) ?x4736) ?x4739)))
 (= (+ (+ (+ (+ (- (- ?x4740 ?x4742) ?x4745) ?x4748) ?x4750) ?x4753) ?x4755) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x4755 (* 3.0 ?x3585)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x4874 (* ?x4873 l_0_6_68)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x4750 (* 3.0 ?x3582)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x4870 (* ?x4869 l_0_6_67)))
 (let ((?x4116 (* l_0_6_6 l_0_6_6)))
 (let ((?x4867 (* 6.0 ?x4116)))
 (let ((?x4114 (* l_0_6_5 l_0_6_5)))
 (let ((?x4865 (* 6.0 ?x4114)))
 (let ((?x4745 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x4853 (* ?x4852 l_0_6_47)))
 (let ((?x4739 (* (* 3.0 l_0_6_44) l_0_6_44)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x4849 (* ?x4848 l_0_6_46)))
 (let ((?x4109 (* l_0_6_4 l_0_6_4)))
 (let ((?x4846 (* 6.0 ?x4109)))
 (let ((?x4731 (* 12.0 l_0_6_3)))
 (let ((?x4732 (* ?x4731 l_0_6_5)))
 (let ((?x4843 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x4840 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x4837 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x4728 (* ?x4727 l_0_6_26)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x4724 (* ?x4723 l_0_6_25)))
 (let ((?x4719 (* 12.0 l_0_6_2)))
 (let ((?x4720 (* ?x4719 l_0_6_4)))
 (let ((?x4831 (* l_0_6_153 l_0_6_153)))
 (let ((?x4829 (* l_0_6_152 l_0_6_152)))
 (let ((?x4827 (* l_0_6_151 l_0_6_151)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x4825 (* ?x4824 l_0_6_131)))
 (let ((?x4832 (- (- (- (- (* (* (- 2.0) l_0_6_128) l_0_6_130) ?x4825) ?x4827) ?x4829) ?x4831)))
 (let ((?x4845 (+ (- (- (- (- (- (+ ?x4832 ?x4720) ?x4724) ?x4728) ?x4837) ?x4840) ?x4843) ?x4732)))
 (let ((?x4858 (- (- (- (- (- (+ ?x4845 ?x4846) ?x4849) ?x4739) ?x4853) ?x4745) (* (* 1.0 l_0_6_46) l_0_6_46))))
 (let ((?x4864 (- (- ?x4858 (* (* 1.0 l_0_6_47) l_0_6_47)) (* (* 1.0 l_0_6_48) l_0_6_48))))
 (let ((?x4879 (+ (+ (+ (+ (+ (+ (+ ?x4864 ?x4865) ?x4867) ?x4870) ?x4750) ?x4874) ?x4755) (* 1.0 (* l_0_6_67 l_0_6_67)))))
 (let ((?x4885 (+ (+ ?x4879 (* 1.0 (* l_0_6_68 l_0_6_68))) (* 1.0 (* l_0_6_69 l_0_6_69)))))
 (= ?x4885 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5021 (* ?x5020 l_0_6_72)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5018 (* ?x5017 l_0_6_71)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5015 (* ?x5014 l_0_6_70)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5012 (* ?x4873 l_0_6_71)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x4753 (* ?x4752 l_0_6_68)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5009 (* ?x4869 l_0_6_70)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x4748 (* ?x4747 l_0_6_67)))
 (let ((?x5006 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x5003 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5000 (* ?x4999 l_0_6_51)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x4997 (* ?x4996 l_0_6_50)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x4994 (* ?x4993 l_0_6_49)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x4991 (* ?x4852 l_0_6_50)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x4742 (* ?x4741 l_0_6_47)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x4988 (* ?x4848 l_0_6_49)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x4736 (* ?x4735 l_0_6_46)))
 (let ((?x4985 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x4731 (* 12.0 l_0_6_3)))
 (let ((?x4982 (* ?x4731 l_0_6_8)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x4980 (* ?x4979 l_0_6_30)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x4977 (* ?x4976 l_0_6_29)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x4974 (* ?x4973 l_0_6_28)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x4971 (* ?x4727 l_0_6_29)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x4969 (* ?x4723 l_0_6_28)))
 (let ((?x4719 (* 12.0 l_0_6_2)))
 (let ((?x4967 (* ?x4719 l_0_6_7)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x4956 (* ?x4824 l_0_6_134)))
 (let ((?x4960 (- (- (* (* (- 2.0) l_0_6_128) l_0_6_133) ?x4956) (* (* 2.0 l_0_6_151) l_0_6_154))))
 (let ((?x4966 (- (- ?x4960 (* (* 2.0 l_0_6_152) l_0_6_155)) (* (* 2.0 l_0_6_153) l_0_6_156))))
 (let ((?x4983 (+ (- (- (- (- (- (+ ?x4966 ?x4967) ?x4969) ?x4971) ?x4974) ?x4977) ?x4980) ?x4982)))
 (let ((?x4998 (- (- (- (+ (- (+ (+ ?x4983 ?x4985) ?x4736) ?x4988) ?x4742) ?x4991) ?x4994) ?x4997)))
 (let ((?x5013 (+ (- (+ (- (+ (+ (- ?x4998 ?x5000) ?x5003) ?x5006) ?x4748) ?x5009) ?x4753) ?x5012)))
 (= (+ (+ (+ ?x5013 ?x5015) ?x5018) ?x5021) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5189 (* ?x5020 l_0_6_76)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5187 (* ?x5017 l_0_6_75)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5185 (* ?x5014 l_0_6_74)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5183 (* ?x4873 l_0_6_75)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5181 (* ?x4869 l_0_6_74)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5179 (* ?x4999 l_0_6_55)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x5177 (* ?x4996 l_0_6_54)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x5175 (* ?x4993 l_0_6_53)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x5173 (* ?x4852 l_0_6_54)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x5171 (* ?x4848 l_0_6_53)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x5169 (* ?x4979 l_0_6_34)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x5167 (* ?x4976 l_0_6_33)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x5165 (* ?x4973 l_0_6_32)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x5163 (* ?x4727 l_0_6_33)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x5161 (* ?x4723 l_0_6_32)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x5153 (* ?x5152 l_0_6_6)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x5150 (* ?x4824 l_0_6_138)))
 (let ((?x4825 (* ?x4824 l_0_6_131)))
 (let ((?x5144 (* 2.0 l_0_6_128)))
 (let ((?x5147 (* ?x5144 l_0_6_137)))
 (let ((?x5139 (* 12.0 l_0_6_12)))
 (let ((?x5142 (* ?x5139 l_0_6_5)))
 (let ((?x5140 (* ?x5139 l_0_6_3)))
 (let ((?x5135 (* 12.0 l_0_6_11)))
 (let ((?x5137 (* ?x5135 l_0_6_4)))
 (let ((?x5136 (* ?x5135 l_0_6_2)))
 (let ((?x5149 (+ (- (+ (+ (+ (+ ?x5136 ?x5137) ?x5140) ?x5142) (* ?x5144 l_0_6_130)) ?x5147) ?x4825)))
 (let ((?x5158 (- (- (+ (- ?x5149 ?x5150) ?x5153) (* (* 2.0 l_0_6_151) l_0_6_158)) (* (* 2.0 l_0_6_152) l_0_6_159))))
 (let ((?x5166 (- (- (- (- ?x5158 (* (* 2.0 l_0_6_153) l_0_6_160)) ?x5161) ?x5163) ?x5165)))
 (let ((?x5180 (- (- (- (- (- (- (- ?x5166 ?x5167) ?x5169) ?x5171) ?x5173) ?x5175) ?x5177) ?x5179)))
 (= (+ (+ (+ (+ (+ ?x5180 ?x5181) ?x5183) ?x5185) ?x5187) ?x5189) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x5360 (* ?x5359 l_0_6_89)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x5357 (* ?x5356 l_0_6_88)))
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5354 (* ?x5020 l_0_6_81)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5352 (* ?x5017 l_0_6_80)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5350 (* ?x5014 l_0_6_79)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5348 (* ?x4873 l_0_6_80)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5346 (* ?x4869 l_0_6_79)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5344 (* ?x4999 l_0_6_60)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x5342 (* ?x4996 l_0_6_59)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x5340 (* ?x4993 l_0_6_58)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x5338 (* ?x4852 l_0_6_59)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x5336 (* ?x4848 l_0_6_58)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x5334 (* ?x4979 l_0_6_39)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x5332 (* ?x4976 l_0_6_38)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x5330 (* ?x4973 l_0_6_37)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x5328 (* ?x4727 l_0_6_38)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x5326 (* ?x4723 l_0_6_37)))
 (let ((?x5323 (* 12.0 l_0_6_18)))
 (let ((?x5324 (* ?x5323 l_0_6_6)))
 (let ((?x5318 (* 12.0 l_0_6_17)))
 (let ((?x5321 (* ?x5318 l_0_6_5)))
 (let ((?x5319 (* ?x5318 l_0_6_3)))
 (let ((?x5313 (* 12.0 l_0_6_16)))
 (let ((?x5316 (* ?x5313 l_0_6_4)))
 (let ((?x5314 (* ?x5313 l_0_6_2)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x5305 (* ?x4824 l_0_6_143)))
 (let ((?x5144 (* 2.0 l_0_6_128)))
 (let ((?x5303 (* ?x5144 l_0_6_142)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x5301 (* ?x5300 l_0_6_110)))
 (let ((?x5308 (- (- (- (+ (* (* 2.0 l_0_6_107) l_0_6_109) ?x5301) ?x5303) ?x5305) (* (* 2.0 l_0_6_151) l_0_6_163))))
 (let ((?x5312 (- (- ?x5308 (* (* 2.0 l_0_6_152) l_0_6_164)) (* (* 2.0 l_0_6_153) l_0_6_165))))
 (let ((?x5329 (- (- (+ (+ (+ (+ (+ ?x5312 ?x5314) ?x5316) ?x5319) ?x5321) ?x5324) ?x5326) ?x5328)))
 (let ((?x5343 (- (- (- (- (- (- (- ?x5329 ?x5330) ?x5332) ?x5334) ?x5336) ?x5338) ?x5340) ?x5342)))
 (let ((?x5358 (- (+ (+ (+ (+ (+ (- ?x5343 ?x5344) ?x5346) ?x5348) ?x5350) ?x5352) ?x5354) ?x5357)))
 (= (- ?x5358 ?x5360) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5520 (* l_0_6_87 l_0_6_87)))
 (let ((?x5518 (* l_0_6_86 l_0_6_86)))
 (let ((?x4883 (* l_0_6_69 l_0_6_69)))
 (let ((?x5516 (* 3.0 ?x4883)))
 (let ((?x4880 (* l_0_6_68 l_0_6_68)))
 (let ((?x5514 (* 3.0 ?x4880)))
 (let ((?x4877 (* l_0_6_67 l_0_6_67)))
 (let ((?x5512 (* 3.0 ?x4877)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x4874 (* ?x4873 l_0_6_68)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x4870 (* ?x4869 l_0_6_67)))
 (let ((?x4116 (* l_0_6_6 l_0_6_6)))
 (let ((?x4867 (* 6.0 ?x4116)))
 (let ((?x4114 (* l_0_6_5 l_0_6_5)))
 (let ((?x4865 (* 6.0 ?x4114)))
 (let ((?x5506 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x5503 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x5500 (* (* 3.0 l_0_6_46) l_0_6_46)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x4853 (* ?x4852 l_0_6_47)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x4849 (* ?x4848 l_0_6_46)))
 (let ((?x4109 (* l_0_6_4 l_0_6_4)))
 (let ((?x4846 (* 6.0 ?x4109)))
 (let ((?x4843 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x4840 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x4837 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x5491 (* l_0_6_132 l_0_6_132)))
 (let ((?x5489 (* l_0_6_131 l_0_6_131)))
 (let ((?x5487 (* l_0_6_130 l_0_6_130)))
 (let ((?x5488 (- (- (* (- l_0_6_107) l_0_6_107) (* l_0_6_108 l_0_6_108)) ?x5487)))
 (let ((?x5497 (- (+ (- (- (- (- (- ?x5488 ?x5489) ?x5491) ?x4837) ?x4840) ?x4843) ?x4846) ?x4849)))
 (let ((?x5510 (+ (+ (+ (- (- (- (- ?x5497 ?x4853) ?x5500) ?x5503) ?x5506) ?x4865) ?x4867) ?x4870)))
 (= (+ (+ (+ (+ (+ (+ ?x5510 ?x4874) ?x5512) ?x5514) ?x5516) ?x5518) ?x5520) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4883 (* l_0_6_69 l_0_6_69)))
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5615 (* ?x5614 l_0_6_72)))
 (let ((?x4880 (* l_0_6_68 l_0_6_68)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5611 (* ?x5610 l_0_6_71)))
 (let ((?x4877 (* l_0_6_67 l_0_6_67)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5607 (* ?x5606 l_0_6_70)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5012 (* ?x4873 l_0_6_71)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5009 (* ?x4869 l_0_6_70)))
 (let ((?x5006 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x5003 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x4947 (* l_0_6_48 l_0_6_48)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5599 (* ?x5598 l_0_6_51)))
 (let ((?x4943 (* l_0_6_47 l_0_6_47)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5595 (* ?x5594 l_0_6_50)))
 (let ((?x4939 (* l_0_6_46 l_0_6_46)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5591 (* ?x5590 l_0_6_49)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x4991 (* ?x4852 l_0_6_50)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x4988 (* ?x4848 l_0_6_49)))
 (let ((?x4985 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x4980 (* ?x4979 l_0_6_30)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x4977 (* ?x4976 l_0_6_29)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x4974 (* ?x4973 l_0_6_28)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5582 (* ?x5581 l_0_6_135)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5579 (* ?x5578 l_0_6_134)))
 (let ((?x5585 (- (- (- (- (* (* (- 2.0) l_0_6_130) l_0_6_133) ?x5579) ?x5582) ?x4974) ?x4977)))
 (let ((?x5596 (- (+ (- (- (- (+ (- ?x5585 ?x4980) ?x4985) ?x4988) ?x4991) ?x5591) ?x4939) ?x5595)))
 (let ((?x5605 (+ (+ (+ (+ (+ (- (+ ?x5596 ?x4943) ?x5599) ?x4947) ?x5003) ?x5006) ?x5009) ?x5012)))
 (= (- (+ (- (+ (- (+ ?x5605 ?x5607) ?x4877) ?x5611) ?x4880) ?x5615) ?x4883) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5716 (* ?x5614 l_0_6_76)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5714 (* ?x5610 l_0_6_75)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5712 (* ?x5606 l_0_6_74)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5183 (* ?x4873 l_0_6_75)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5181 (* ?x4869 l_0_6_74)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5708 (* ?x5598 l_0_6_55)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5706 (* ?x5594 l_0_6_54)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5704 (* ?x5590 l_0_6_53)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x5173 (* ?x4852 l_0_6_54)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x5171 (* ?x4848 l_0_6_53)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x5169 (* ?x4979 l_0_6_34)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x5167 (* ?x4976 l_0_6_33)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x5165 (* ?x4973 l_0_6_32)))
 (let ((?x5491 (* l_0_6_132 l_0_6_132)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5696 (* ?x5581 l_0_6_139)))
 (let ((?x5489 (* l_0_6_131 l_0_6_131)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5693 (* ?x5578 l_0_6_138)))
 (let ((?x5487 (* l_0_6_130 l_0_6_130)))
 (let ((?x5689 (* 2.0 l_0_6_130)))
 (let ((?x5690 (* ?x5689 l_0_6_137)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x5153 (* ?x5152 l_0_6_6)))
 (let ((?x5139 (* 12.0 l_0_6_12)))
 (let ((?x5142 (* ?x5139 l_0_6_5)))
 (let ((?x5135 (* 12.0 l_0_6_11)))
 (let ((?x5137 (* ?x5135 l_0_6_4)))
 (let ((?x5697 (- (+ (- (+ (- (+ (+ ?x5137 ?x5142) ?x5153) ?x5690) ?x5487) ?x5693) ?x5489) ?x5696)))
 (let ((?x5705 (- (- (- (- (- (- (+ ?x5697 ?x5491) ?x5165) ?x5167) ?x5169) ?x5171) ?x5173) ?x5704)))
 (let ((?x5717 (+ (+ (+ (+ (+ (- (- ?x5705 ?x5706) ?x5708) ?x5181) ?x5183) ?x5712) ?x5714) ?x5716)))
 (= ?x5717 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5808 (* l_0_6_90 l_0_6_90)))
 (let ((?x5806 (* l_0_6_89 l_0_6_89)))
 (let ((?x5804 (* l_0_6_88 l_0_6_88)))
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5802 (* ?x5614 l_0_6_81)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5800 (* ?x5610 l_0_6_80)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5798 (* ?x5606 l_0_6_79)))
 (let ((?x4873 (* 6.0 l_0_6_66)))
 (let ((?x5348 (* ?x4873 l_0_6_80)))
 (let ((?x4869 (* 6.0 l_0_6_65)))
 (let ((?x5346 (* ?x4869 l_0_6_79)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5794 (* ?x5598 l_0_6_60)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5792 (* ?x5594 l_0_6_59)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5790 (* ?x5590 l_0_6_58)))
 (let ((?x4852 (* 6.0 l_0_6_45)))
 (let ((?x5338 (* ?x4852 l_0_6_59)))
 (let ((?x4848 (* 6.0 l_0_6_44)))
 (let ((?x5336 (* ?x4848 l_0_6_58)))
 (let ((?x4979 (* 12.0 l_0_6_27)))
 (let ((?x5334 (* ?x4979 l_0_6_39)))
 (let ((?x4976 (* 12.0 l_0_6_26)))
 (let ((?x5332 (* ?x4976 l_0_6_38)))
 (let ((?x4973 (* 12.0 l_0_6_25)))
 (let ((?x5330 (* ?x4973 l_0_6_37)))
 (let ((?x5323 (* 12.0 l_0_6_18)))
 (let ((?x5324 (* ?x5323 l_0_6_6)))
 (let ((?x5318 (* 12.0 l_0_6_17)))
 (let ((?x5321 (* ?x5318 l_0_6_5)))
 (let ((?x5313 (* 12.0 l_0_6_16)))
 (let ((?x5316 (* ?x5313 l_0_6_4)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5780 (* ?x5581 l_0_6_144)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5778 (* ?x5578 l_0_6_143)))
 (let ((?x5689 (* 2.0 l_0_6_130)))
 (let ((?x5776 (* ?x5689 l_0_6_142)))
 (let ((?x5774 (* l_0_6_111 l_0_6_111)))
 (let ((?x5777 (- (+ (+ (* l_0_6_109 l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x5774) ?x5776)))
 (let ((?x5786 (- (- (+ (+ (+ (- (- ?x5777 ?x5778) ?x5780) ?x5316) ?x5321) ?x5324) ?x5330) ?x5332)))
 (let ((?x5796 (+ (- (- (- (- (- (- ?x5786 ?x5334) ?x5336) ?x5338) ?x5790) ?x5792) ?x5794) ?x5346)))
 (let ((?x5809 (- (- (- (+ (+ (+ (+ ?x5796 ?x5348) ?x5798) ?x5800) ?x5802) ?x5804) ?x5806) ?x5808)))
 (= ?x5809 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4379 (* l_0_6_9 l_0_6_9)))
 (let ((?x5925 (* 6.0 ?x4379)))
 (let ((?x4377 (* l_0_6_8 l_0_6_8)))
 (let ((?x5923 (* 6.0 ?x4377)))
 (let ((?x5920 (* l_0_6_73 l_0_6_73)))
 (let ((?x5921 (* 3.0 ?x5920)))
 (let ((?x5917 (* l_0_6_72 l_0_6_72)))
 (let ((?x5918 (* 3.0 ?x5917)))
 (let ((?x5914 (* l_0_6_71 l_0_6_71)))
 (let ((?x5915 (* 3.0 ?x5914)))
 (let ((?x5911 (* l_0_6_70 l_0_6_70)))
 (let ((?x5912 (* 3.0 ?x5911)))
 (let ((?x4375 (* l_0_6_7 l_0_6_7)))
 (let ((?x5909 (* 6.0 ?x4375)))
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5021 (* ?x5020 l_0_6_72)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5018 (* ?x5017 l_0_6_71)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5015 (* ?x5014 l_0_6_70)))
 (let ((?x5904 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x5901 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x5898 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5000 (* ?x4999 l_0_6_51)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x4997 (* ?x4996 l_0_6_50)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x4994 (* ?x4993 l_0_6_49)))
 (let ((?x5889 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x5886 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x5883 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x5880 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x5877 (* l_0_6_136 l_0_6_136)))
 (let ((?x5875 (* l_0_6_135 l_0_6_135)))
 (let ((?x5873 (* l_0_6_134 l_0_6_134)))
 (let ((?x5874 (- (- (* 6.0 (* l_0_6_10 l_0_6_10)) (* l_0_6_133 l_0_6_133)) ?x5873)))
 (let ((?x5891 (+ (- (- (- (- (- (- ?x5874 ?x5875) ?x5877) ?x5880) ?x5883) ?x5886) ?x5889) ?x4994)))
 (let ((?x5899 (- (- (+ (+ ?x5891 ?x4997) ?x5000) (* (* 3.0 l_0_6_49) l_0_6_49)) ?x5898)))
 (let ((?x5913 (+ (+ (- (- (- (- (- ?x5899 ?x5901) ?x5904) ?x5015) ?x5018) ?x5021) ?x5909) ?x5912)))
 (= (+ (+ (+ (+ (+ ?x5913 ?x5915) ?x5918) ?x5921) ?x5923) ?x5925) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6069 (* 6.0 l_0_6_73)))
 (let ((?x6070 (* ?x6069 l_0_6_77)))
 (let ((?x6066 (* 6.0 l_0_6_72)))
 (let ((?x6067 (* ?x6066 l_0_6_76)))
 (let ((?x6063 (* 6.0 l_0_6_71)))
 (let ((?x6064 (* ?x6063 l_0_6_75)))
 (let ((?x6060 (* 6.0 l_0_6_70)))
 (let ((?x6061 (* ?x6060 l_0_6_74)))
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5189 (* ?x5020 l_0_6_76)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5187 (* ?x5017 l_0_6_75)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5185 (* ?x5014 l_0_6_74)))
 (let ((?x6054 (* 6.0 l_0_6_52)))
 (let ((?x6055 (* ?x6054 l_0_6_56)))
 (let ((?x6051 (* 6.0 l_0_6_51)))
 (let ((?x6052 (* ?x6051 l_0_6_55)))
 (let ((?x6048 (* 6.0 l_0_6_50)))
 (let ((?x6049 (* ?x6048 l_0_6_54)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5179 (* ?x4999 l_0_6_55)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x5177 (* ?x4996 l_0_6_54)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x5175 (* ?x4993 l_0_6_53)))
 (let ((?x6039 (* 12.0 l_0_6_31)))
 (let ((?x6040 (* ?x6039 l_0_6_35)))
 (let ((?x6036 (* 12.0 l_0_6_30)))
 (let ((?x6037 (* ?x6036 l_0_6_34)))
 (let ((?x6033 (* 12.0 l_0_6_29)))
 (let ((?x6034 (* ?x6033 l_0_6_33)))
 (let ((?x6030 (* 12.0 l_0_6_28)))
 (let ((?x6031 (* ?x6030 l_0_6_32)))
 (let ((?x6027 (* 2.0 l_0_6_136)))
 (let ((?x6028 (* ?x6027 l_0_6_140)))
 (let ((?x6024 (* 2.0 l_0_6_135)))
 (let ((?x6025 (* ?x6024 l_0_6_139)))
 (let ((?x6021 (* 2.0 l_0_6_134)))
 (let ((?x6022 (* ?x6021 l_0_6_138)))
 (let ((?x6018 (* 2.0 l_0_6_133)))
 (let ((?x6019 (* ?x6018 l_0_6_137)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5582 (* ?x5581 l_0_6_135)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5579 (* ?x5578 l_0_6_134)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x6012 (* ?x5152 l_0_6_9)))
 (let ((?x6009 (+ (* (* 12.0 l_0_6_10) l_0_6_14) (* (* 12.0 l_0_6_11) l_0_6_7))))
 (let ((?x6011 (+ ?x6009 (* (* 12.0 l_0_6_12) l_0_6_8))))
 (let ((?x6017 (+ (+ (+ (+ ?x6011 ?x6012) (* (* 2.0 l_0_6_130) l_0_6_133)) ?x5579) ?x5582)))
 (let ((?x6038 (- (- (- (- (- (- (- ?x6017 ?x6019) ?x6022) ?x6025) ?x6028) ?x6031) ?x6034) ?x6037)))
 (let ((?x6047 (- (+ (+ (+ (- ?x6038 ?x6040) ?x5175) ?x5177) ?x5179) (* (* 6.0 l_0_6_49) l_0_6_53))))
 (let ((?x6062 (+ (- (- (- (- (- (- ?x6047 ?x6049) ?x6052) ?x6055) ?x5185) ?x5187) ?x5189) ?x6061)))
 (= (+ (+ (+ ?x6062 ?x6064) ?x6067) ?x6070) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6229 (* 2.0 l_0_6_90)))
 (let ((?x6230 (* ?x6229 l_0_6_93)))
 (let ((?x6226 (* 2.0 l_0_6_89)))
 (let ((?x6227 (* ?x6226 l_0_6_92)))
 (let ((?x6223 (* 2.0 l_0_6_88)))
 (let ((?x6224 (* ?x6223 l_0_6_91)))
 (let ((?x6069 (* 6.0 l_0_6_73)))
 (let ((?x6221 (* ?x6069 l_0_6_82)))
 (let ((?x6066 (* 6.0 l_0_6_72)))
 (let ((?x6219 (* ?x6066 l_0_6_81)))
 (let ((?x6063 (* 6.0 l_0_6_71)))
 (let ((?x6217 (* ?x6063 l_0_6_80)))
 (let ((?x6060 (* 6.0 l_0_6_70)))
 (let ((?x6215 (* ?x6060 l_0_6_79)))
 (let ((?x5020 (* 2.0 l_0_6_69)))
 (let ((?x5354 (* ?x5020 l_0_6_81)))
 (let ((?x5017 (* 2.0 l_0_6_68)))
 (let ((?x5352 (* ?x5017 l_0_6_80)))
 (let ((?x5014 (* 2.0 l_0_6_67)))
 (let ((?x5350 (* ?x5014 l_0_6_79)))
 (let ((?x6054 (* 6.0 l_0_6_52)))
 (let ((?x6210 (* ?x6054 l_0_6_61)))
 (let ((?x6051 (* 6.0 l_0_6_51)))
 (let ((?x6208 (* ?x6051 l_0_6_60)))
 (let ((?x6048 (* 6.0 l_0_6_50)))
 (let ((?x6206 (* ?x6048 l_0_6_59)))
 (let ((?x4999 (* 2.0 l_0_6_48)))
 (let ((?x5344 (* ?x4999 l_0_6_60)))
 (let ((?x4996 (* 2.0 l_0_6_47)))
 (let ((?x5342 (* ?x4996 l_0_6_59)))
 (let ((?x4993 (* 2.0 l_0_6_46)))
 (let ((?x5340 (* ?x4993 l_0_6_58)))
 (let ((?x6039 (* 12.0 l_0_6_31)))
 (let ((?x6199 (* ?x6039 l_0_6_40)))
 (let ((?x6036 (* 12.0 l_0_6_30)))
 (let ((?x6197 (* ?x6036 l_0_6_39)))
 (let ((?x6033 (* 12.0 l_0_6_29)))
 (let ((?x6195 (* ?x6033 l_0_6_38)))
 (let ((?x6030 (* 12.0 l_0_6_28)))
 (let ((?x6193 (* ?x6030 l_0_6_37)))
 (let ((?x5323 (* 12.0 l_0_6_18)))
 (let ((?x6191 (* ?x5323 l_0_6_9)))
 (let ((?x5318 (* 12.0 l_0_6_17)))
 (let ((?x6189 (* ?x5318 l_0_6_8)))
 (let ((?x5313 (* 12.0 l_0_6_16)))
 (let ((?x6187 (* ?x5313 l_0_6_7)))
 (let ((?x6027 (* 2.0 l_0_6_136)))
 (let ((?x6185 (* ?x6027 l_0_6_145)))
 (let ((?x6024 (* 2.0 l_0_6_135)))
 (let ((?x6183 (* ?x6024 l_0_6_144)))
 (let ((?x6021 (* 2.0 l_0_6_134)))
 (let ((?x6181 (* ?x6021 l_0_6_143)))
 (let ((?x6018 (* 2.0 l_0_6_133)))
 (let ((?x6179 (* ?x6018 l_0_6_142)))
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6177 (* ?x6176 l_0_6_114)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6174 (* ?x6173 l_0_6_113)))
 (let ((?x5996 (* 12.0 l_0_6_10)))
 (let ((?x6169 (* ?x5996 l_0_6_19)))
 (let ((?x6180 (- (+ (+ (+ ?x6169 (* (* 2.0 l_0_6_109) l_0_6_112)) ?x6174) ?x6177) ?x6179)))
 (let ((?x6194 (- (+ (+ (+ (- (- (- ?x6180 ?x6181) ?x6183) ?x6185) ?x6187) ?x6189) ?x6191) ?x6193)))
 (let ((?x6205 (- (+ (+ (+ (- (- (- ?x6194 ?x6195) ?x6197) ?x6199) ?x5340) ?x5342) ?x5344) (* (* 6.0 l_0_6_49) l_0_6_58))))
 (let ((?x6216 (+ (- (- (- (- (- (- ?x6205 ?x6206) ?x6208) ?x6210) ?x5350) ?x5352) ?x5354) ?x6215)))
 (= (- (- (- (+ (+ (+ ?x6216 ?x6217) ?x6219) ?x6221) ?x6224) ?x6227) ?x6230) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6418 (* l_0_6_78 l_0_6_78)))
 (let ((?x6419 (* 3.0 ?x6418)))
 (let ((?x6415 (* l_0_6_77 l_0_6_77)))
 (let ((?x6416 (* 3.0 ?x6415)))
 (let ((?x6412 (* l_0_6_76 l_0_6_76)))
 (let ((?x6413 (* 3.0 ?x6412)))
 (let ((?x6409 (* l_0_6_75 l_0_6_75)))
 (let ((?x6410 (* 3.0 ?x6409)))
 (let ((?x6406 (* l_0_6_74 l_0_6_74)))
 (let ((?x6407 (* 3.0 ?x6406)))
 (let ((?x6404 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x6401 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x6398 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x6395 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x6389 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6386 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6383 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6380 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6377 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x4533 (* l_0_6_15 l_0_6_15)))
 (let ((?x6374 (* 6.0 ?x4533)))
 (let ((?x6372 (* l_0_6_141 l_0_6_141)))
 (let ((?x6370 (* l_0_6_140 l_0_6_140)))
 (let ((?x4531 (* l_0_6_14 l_0_6_14)))
 (let ((?x6368 (* 6.0 ?x4531)))
 (let ((?x6366 (* l_0_6_139 l_0_6_139)))
 (let ((?x6364 (* l_0_6_138 l_0_6_138)))
 (let ((?x6362 (* l_0_6_137 l_0_6_137)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5696 (* ?x5581 l_0_6_139)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5693 (* ?x5578 l_0_6_138)))
 (let ((?x5689 (* 2.0 l_0_6_130)))
 (let ((?x5690 (* ?x5689 l_0_6_137)))
 (let ((?x4529 (* l_0_6_13 l_0_6_13)))
 (let ((?x6357 (* 6.0 ?x4529)))
 (let ((?x4526 (* l_0_6_12 l_0_6_12)))
 (let ((?x6355 (* 6.0 ?x4526)))
 (let ((?x4547 (* l_0_6_11 l_0_6_11)))
 (let ((?x6354 (* 6.0 ?x4547)))
 (let ((?x6356 (+ ?x6354 ?x6355)))
 (let ((?x6367 (- (- (- (+ (+ (+ (+ ?x6356 ?x6357) ?x5690) ?x5693) ?x5696) ?x6362) ?x6364) ?x6366)))
 (let ((?x6384 (- (- (- (+ (- (- (+ ?x6367 ?x6368) ?x6370) ?x6372) ?x6374) ?x6377) ?x6380) ?x6383)))
 (let ((?x6396 (- (- (- (- ?x6384 ?x6386) ?x6389) (* (* 3.0 l_0_6_53) l_0_6_53)) ?x6395)))
 (let ((?x6417 (+ (+ (+ (+ (- (- (- ?x6396 ?x6398) ?x6401) ?x6404) ?x6407) ?x6410) ?x6413) ?x6416)))
 (= (+ ?x6417 ?x6419) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6229 (* 2.0 l_0_6_90)))
 (let ((?x6581 (* ?x6229 l_0_6_97)))
 (let ((?x6226 (* 2.0 l_0_6_89)))
 (let ((?x6579 (* ?x6226 l_0_6_96)))
 (let ((?x6223 (* 2.0 l_0_6_88)))
 (let ((?x6577 (* ?x6223 l_0_6_95)))
 (let ((?x6575 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x6572 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x6569 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x6566 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x6563 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x6560 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x6557 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x6554 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x6551 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x6545 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x6542 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x6539 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x6536 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x6533 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x6530 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x6527 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6524 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x6521 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x6518 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6515 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6512 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x5581 (* 2.0 l_0_6_132)))
 (let ((?x5780 (* ?x5581 l_0_6_144)))
 (let ((?x5578 (* 2.0 l_0_6_131)))
 (let ((?x5778 (* ?x5578 l_0_6_143)))
 (let ((?x5689 (* 2.0 l_0_6_130)))
 (let ((?x5776 (* ?x5689 l_0_6_142)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x6506 (* ?x5152 l_0_6_18)))
 (let ((?x5139 (* 12.0 l_0_6_12)))
 (let ((?x6504 (* ?x5139 l_0_6_17)))
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6502 (* ?x6176 l_0_6_118)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6500 (* ?x6173 l_0_6_117)))
 (let ((?x5135 (* 12.0 l_0_6_11)))
 (let ((?x6498 (* ?x5135 l_0_6_16)))
 (let ((?x6505 (+ (+ (+ (+ (* (* 2.0 l_0_6_109) l_0_6_116) ?x6498) ?x6500) ?x6502) ?x6504)))
 (let ((?x6519 (- (- (- (+ (+ (+ (+ ?x6505 ?x6506) ?x5776) ?x5778) ?x5780) ?x6512) ?x6515) ?x6518)))
 (let ((?x6540 (- (- (- (+ (- (- (+ ?x6519 ?x6521) ?x6524) ?x6527) ?x6530) ?x6533) ?x6536) ?x6539)))
 (let ((?x6552 (- (- (- (- ?x6540 ?x6542) ?x6545) (* (* 6.0 l_0_6_53) l_0_6_58)) ?x6551)))
 (let ((?x6573 (+ (+ (+ (+ (- (- (- ?x6552 ?x6554) ?x6557) ?x6560) ?x6563) ?x6566) ?x6569) ?x6572)))
 (= (- (- (- (+ ?x6573 ?x6575) ?x6577) ?x6579) ?x6581) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6801 (* l_0_6_84 l_0_6_84)))
 (let ((?x6802 (* 3.0 ?x6801)))
 (let ((?x6798 (* l_0_6_83 l_0_6_83)))
 (let ((?x6799 (* 3.0 ?x6798)))
 (let ((?x6795 (* l_0_6_82 l_0_6_82)))
 (let ((?x6796 (* 3.0 ?x6795)))
 (let ((?x6792 (* l_0_6_81 l_0_6_81)))
 (let ((?x6793 (* 3.0 ?x6792)))
 (let ((?x6789 (* l_0_6_80 l_0_6_80)))
 (let ((?x6790 (* 3.0 ?x6789)))
 (let ((?x6786 (* l_0_6_79 l_0_6_79)))
 (let ((?x6787 (* 3.0 ?x6786)))
 (let ((?x6784 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x6781 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x6778 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x6775 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x6772 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x6766 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x6763 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x6760 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x6757 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x6754 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x6751 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x4661 (* l_0_6_21 l_0_6_21)))
 (let ((?x6748 (* 6.0 ?x4661)))
 (let ((?x4659 (* l_0_6_20 l_0_6_20)))
 (let ((?x6746 (* 6.0 ?x4659)))
 (let ((?x4657 (* l_0_6_19 l_0_6_19)))
 (let ((?x6744 (* 6.0 ?x4657)))
 (let ((?x4655 (* l_0_6_18 l_0_6_18)))
 (let ((?x6742 (* 6.0 ?x4655)))
 (let ((?x4653 (* l_0_6_17 l_0_6_17)))
 (let ((?x6740 (* 6.0 ?x4653)))
 (let ((?x4651 (* l_0_6_16 l_0_6_16)))
 (let ((?x6738 (* 6.0 ?x4651)))
 (let ((?x6736 (* l_0_6_147 l_0_6_147)))
 (let ((?x6734 (* l_0_6_146 l_0_6_146)))
 (let ((?x6732 (* l_0_6_145 l_0_6_145)))
 (let ((?x6730 (* l_0_6_144 l_0_6_144)))
 (let ((?x6728 (* l_0_6_143 l_0_6_143)))
 (let ((?x6726 (* l_0_6_142 l_0_6_142)))
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6724 (* ?x6176 l_0_6_123)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6722 (* ?x6173 l_0_6_122)))
 (let ((?x6170 (* 2.0 l_0_6_109)))
 (let ((?x6720 (* ?x6170 l_0_6_121)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x6718 (* ?x6717 l_0_6_90)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x6715 (* ?x6714 l_0_6_89)))
 (let ((?x6723 (+ (+ (- (- (* (* (- 2.0) l_0_6_100) l_0_6_88) ?x6715) ?x6718) ?x6720) ?x6722)))
 (let ((?x6737 (- (- (- (- (- (- (+ ?x6723 ?x6724) ?x6726) ?x6728) ?x6730) ?x6732) ?x6734) ?x6736)))
 (let ((?x6752 (- (+ (+ (+ (+ (+ (+ ?x6737 ?x6738) ?x6740) ?x6742) ?x6744) ?x6746) ?x6748) ?x6751)))
 (let ((?x6770 (- (- (- (- (- (- ?x6752 ?x6754) ?x6757) ?x6760) ?x6763) ?x6766) (* (* 3.0 l_0_6_58) l_0_6_58))))
 (let ((?x6791 (+ (+ (- (- (- (- (- ?x6770 ?x6772) ?x6775) ?x6778) ?x6781) ?x6784) ?x6787) ?x6790)))
 (= (+ (+ (+ (+ ?x6791 ?x6793) ?x6796) ?x6799) ?x6802) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x6930 (* ?x4752 l_0_6_71)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x6927 (* ?x4747 l_0_6_70)))
 (let ((?x3615 (* l_0_6_45 l_0_6_45)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x6924 (* ?x4741 l_0_6_50)))
 (let ((?x3611 (* l_0_6_44 l_0_6_44)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x6921 (* ?x4735 l_0_6_49)))
 (let ((?x4731 (* 12.0 l_0_6_3)))
 (let ((?x4982 (* ?x4731 l_0_6_8)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x4971 (* ?x4727 l_0_6_29)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x4969 (* ?x4723 l_0_6_28)))
 (let ((?x4719 (* 12.0 l_0_6_2)))
 (let ((?x4967 (* ?x4719 l_0_6_7)))
 (let ((?x6916 (- (* (* (- 2.0) l_0_6_149) l_0_6_154) (* (* 2.0 l_0_6_150) l_0_6_155))))
 (let ((?x6925 (- (+ (- (+ (- (- (+ ?x6916 ?x4967) ?x4969) ?x4971) ?x4982) ?x6921) ?x3611) ?x6924)))
 (= (- (+ (- (+ (+ ?x6925 ?x3615) ?x6927) ?x3582) ?x6930) ?x3585) 0.0))))))))))))))))))))))))
(assert
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x6989 (* ?x4752 l_0_6_75)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x6987 (* ?x4747 l_0_6_74)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x6985 (* ?x4741 l_0_6_54)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x6983 (* ?x4735 l_0_6_53)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x5163 (* ?x4727 l_0_6_33)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x5161 (* ?x4723 l_0_6_32)))
 (let ((?x4711 (* l_0_6_129 l_0_6_129)))
 (let ((?x4759 (* l_0_6_128 l_0_6_128)))
 (let ((?x5139 (* 12.0 l_0_6_12)))
 (let ((?x5140 (* ?x5139 l_0_6_3)))
 (let ((?x5135 (* 12.0 l_0_6_11)))
 (let ((?x5136 (* ?x5135 l_0_6_2)))
 (let ((?x6978 (- (+ (+ (+ ?x5136 ?x5140) ?x4759) ?x4711) (* (* 2.0 l_0_6_149) l_0_6_158))))
 (let ((?x6984 (- (- (- (- ?x6978 (* (* 2.0 l_0_6_150) l_0_6_159)) ?x5161) ?x5163) ?x6983)))
 (= (+ (+ (- ?x6984 ?x6985) ?x6987) ?x6989) 0.0))))))))))))))))))))))
(assert
 (let ((?x5520 (* l_0_6_87 l_0_6_87)))
 (let ((?x5518 (* l_0_6_86 l_0_6_86)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x7038 (* ?x4752 l_0_6_80)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x7036 (* ?x4747 l_0_6_79)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x7034 (* ?x4741 l_0_6_59)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x7032 (* ?x4735 l_0_6_58)))
 (let ((?x4727 (* 12.0 l_0_6_24)))
 (let ((?x5328 (* ?x4727 l_0_6_38)))
 (let ((?x4723 (* 12.0 l_0_6_23)))
 (let ((?x5326 (* ?x4723 l_0_6_37)))
 (let ((?x5318 (* 12.0 l_0_6_17)))
 (let ((?x5319 (* ?x5318 l_0_6_3)))
 (let ((?x5313 (* 12.0 l_0_6_16)))
 (let ((?x5314 (* ?x5313 l_0_6_2)))
 (let ((?x7025 (- (+ (* l_0_6_107 l_0_6_107) (* l_0_6_108 l_0_6_108)) (* (* 2.0 l_0_6_149) l_0_6_163))))
 (let ((?x7030 (- (+ (+ (- ?x7025 (* (* 2.0 l_0_6_150) l_0_6_164)) ?x5314) ?x5319) ?x5326)))
 (let ((?x7041 (- (- (+ (+ (- (- (- ?x7030 ?x5328) ?x7032) ?x7034) ?x7036) ?x7038) ?x5518) ?x5520)))
 (= ?x7041 0.0)))))))))))))))))))))))
(assert
 (let ((?x4379 (* l_0_6_9 l_0_6_9)))
 (let ((?x5925 (* 6.0 ?x4379)))
 (let ((?x4377 (* l_0_6_8 l_0_6_8)))
 (let ((?x5923 (* 6.0 ?x4377)))
 (let ((?x4375 (* l_0_6_7 l_0_6_7)))
 (let ((?x5909 (* 6.0 ?x4375)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x6930 (* ?x4752 l_0_6_71)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x6927 (* ?x4747 l_0_6_70)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x6924 (* ?x4741 l_0_6_50)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x6921 (* ?x4735 l_0_6_49)))
 (let ((?x5889 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x5886 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x5883 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x5880 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x7085 (* l_0_6_157 l_0_6_157)))
 (let ((?x7083 (* l_0_6_156 l_0_6_156)))
 (let ((?x7081 (* l_0_6_155 l_0_6_155)))
 (let ((?x7082 (- (- (* 6.0 (* l_0_6_10 l_0_6_10)) (* l_0_6_154 l_0_6_154)) ?x7081)))
 (let ((?x7091 (+ (- (- (- (- (- (- ?x7082 ?x7083) ?x7085) ?x5880) ?x5883) ?x5886) ?x5889) ?x6921)))
 (let ((?x7098 (- (- (+ ?x7091 ?x6924) (* (* 1.0 l_0_6_49) l_0_6_49)) (* (* 1.0 l_0_6_50) l_0_6_50))))
 (let ((?x7104 (- (- ?x7098 (* (* 1.0 l_0_6_51) l_0_6_51)) (* (* 1.0 l_0_6_52) l_0_6_52))))
 (let ((?x7109 (+ (+ (- (- ?x7104 ?x6927) ?x6930) ?x5909) (* 1.0 (* l_0_6_70 l_0_6_70)))))
 (let ((?x7113 (+ (+ ?x7109 (* 1.0 (* l_0_6_71 l_0_6_71))) (* 1.0 (* l_0_6_72 l_0_6_72)))))
 (= (+ (+ (+ ?x7113 (* 1.0 (* l_0_6_73 l_0_6_73))) ?x5923) ?x5925) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x7208 (* 2.0 l_0_6_73)))
 (let ((?x7209 (* ?x7208 l_0_6_77)))
 (let ((?x7205 (* 2.0 l_0_6_72)))
 (let ((?x7206 (* ?x7205 l_0_6_76)))
 (let ((?x7202 (* 2.0 l_0_6_71)))
 (let ((?x7203 (* ?x7202 l_0_6_75)))
 (let ((?x7199 (* 2.0 l_0_6_70)))
 (let ((?x7200 (* ?x7199 l_0_6_74)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x6989 (* ?x4752 l_0_6_75)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x6987 (* ?x4747 l_0_6_74)))
 (let ((?x7194 (* 2.0 l_0_6_52)))
 (let ((?x7195 (* ?x7194 l_0_6_56)))
 (let ((?x7191 (* 2.0 l_0_6_51)))
 (let ((?x7192 (* ?x7191 l_0_6_55)))
 (let ((?x7188 (* 2.0 l_0_6_50)))
 (let ((?x7189 (* ?x7188 l_0_6_54)))
 (let ((?x7185 (* 2.0 l_0_6_49)))
 (let ((?x7186 (* ?x7185 l_0_6_53)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x6985 (* ?x4741 l_0_6_54)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x6983 (* ?x4735 l_0_6_53)))
 (let ((?x6039 (* 12.0 l_0_6_31)))
 (let ((?x6040 (* ?x6039 l_0_6_35)))
 (let ((?x6036 (* 12.0 l_0_6_30)))
 (let ((?x6037 (* ?x6036 l_0_6_34)))
 (let ((?x6033 (* 12.0 l_0_6_29)))
 (let ((?x6034 (* ?x6033 l_0_6_33)))
 (let ((?x6030 (* 12.0 l_0_6_28)))
 (let ((?x6031 (* ?x6030 l_0_6_32)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x6012 (* ?x5152 l_0_6_9)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x4956 (* ?x4824 l_0_6_134)))
 (let ((?x6009 (+ (* (* 12.0 l_0_6_10) l_0_6_14) (* (* 12.0 l_0_6_11) l_0_6_7))))
 (let ((?x6011 (+ ?x6009 (* (* 12.0 l_0_6_12) l_0_6_8))))
 (let ((?x7169 (- (+ (+ (+ ?x6011 (* (* 2.0 l_0_6_128) l_0_6_133)) ?x4956) ?x6012) (* (* 2.0 l_0_6_154) l_0_6_158))))
 (let ((?x7175 (- (- ?x7169 (* (* 2.0 l_0_6_155) l_0_6_159)) (* (* 2.0 l_0_6_156) l_0_6_160))))
 (let ((?x7181 (- (- (- (- ?x7175 (* (* 2.0 l_0_6_157) l_0_6_161)) ?x6031) ?x6034) ?x6037)))
 (let ((?x7196 (- (- (- (- (+ (+ (- ?x7181 ?x6040) ?x6983) ?x6985) ?x7186) ?x7189) ?x7192) ?x7195)))
 (= (+ (+ (+ (+ (- (- ?x7196 ?x6987) ?x6989) ?x7200) ?x7203) ?x7206) ?x7209) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x7323 (* ?x5359 l_0_6_92)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x7321 (* ?x5356 l_0_6_91)))
 (let ((?x7208 (* 2.0 l_0_6_73)))
 (let ((?x7319 (* ?x7208 l_0_6_82)))
 (let ((?x7205 (* 2.0 l_0_6_72)))
 (let ((?x7317 (* ?x7205 l_0_6_81)))
 (let ((?x7202 (* 2.0 l_0_6_71)))
 (let ((?x7315 (* ?x7202 l_0_6_80)))
 (let ((?x7199 (* 2.0 l_0_6_70)))
 (let ((?x7313 (* ?x7199 l_0_6_79)))
 (let ((?x4752 (* 2.0 l_0_6_66)))
 (let ((?x7038 (* ?x4752 l_0_6_80)))
 (let ((?x4747 (* 2.0 l_0_6_65)))
 (let ((?x7036 (* ?x4747 l_0_6_79)))
 (let ((?x7194 (* 2.0 l_0_6_52)))
 (let ((?x7309 (* ?x7194 l_0_6_61)))
 (let ((?x7191 (* 2.0 l_0_6_51)))
 (let ((?x7307 (* ?x7191 l_0_6_60)))
 (let ((?x7188 (* 2.0 l_0_6_50)))
 (let ((?x7305 (* ?x7188 l_0_6_59)))
 (let ((?x7185 (* 2.0 l_0_6_49)))
 (let ((?x7303 (* ?x7185 l_0_6_58)))
 (let ((?x4741 (* 2.0 l_0_6_45)))
 (let ((?x7034 (* ?x4741 l_0_6_59)))
 (let ((?x4735 (* 2.0 l_0_6_44)))
 (let ((?x7032 (* ?x4735 l_0_6_58)))
 (let ((?x6039 (* 12.0 l_0_6_31)))
 (let ((?x6199 (* ?x6039 l_0_6_40)))
 (let ((?x6036 (* 12.0 l_0_6_30)))
 (let ((?x6197 (* ?x6036 l_0_6_39)))
 (let ((?x6033 (* 12.0 l_0_6_29)))
 (let ((?x6195 (* ?x6033 l_0_6_38)))
 (let ((?x6030 (* 12.0 l_0_6_28)))
 (let ((?x6193 (* ?x6030 l_0_6_37)))
 (let ((?x5323 (* 12.0 l_0_6_18)))
 (let ((?x6191 (* ?x5323 l_0_6_9)))
 (let ((?x5318 (* 12.0 l_0_6_17)))
 (let ((?x6189 (* ?x5318 l_0_6_8)))
 (let ((?x5313 (* 12.0 l_0_6_16)))
 (let ((?x6187 (* ?x5313 l_0_6_7)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7284 (* ?x5300 l_0_6_113)))
 (let ((?x5996 (* 12.0 l_0_6_10)))
 (let ((?x6169 (* ?x5996 l_0_6_19)))
 (let ((?x7287 (- (+ (+ ?x6169 (* (* 2.0 l_0_6_107) l_0_6_112)) ?x7284) (* (* 2.0 l_0_6_154) l_0_6_163))))
 (let ((?x7291 (- (- ?x7287 (* (* 2.0 l_0_6_155) l_0_6_164)) (* (* 2.0 l_0_6_156) l_0_6_165))))
 (let ((?x7296 (+ (+ (+ (- ?x7291 (* (* 2.0 l_0_6_157) l_0_6_166)) ?x6187) ?x6189) ?x6191)))
 (let ((?x7304 (- (+ (+ (- (- (- (- ?x7296 ?x6193) ?x6195) ?x6197) ?x6199) ?x7032) ?x7034) ?x7303)))
 (let ((?x7316 (+ (+ (- (- (- (- (- ?x7304 ?x7305) ?x7307) ?x7309) ?x7036) ?x7038) ?x7313) ?x7315)))
 (= (- (- (+ (+ ?x7316 ?x7317) ?x7319) ?x7321) ?x7323) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6389 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6386 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6383 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6380 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6377 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x7424 (* l_0_6_162 l_0_6_162)))
 (let ((?x7422 (* l_0_6_161 l_0_6_161)))
 (let ((?x7420 (* l_0_6_160 l_0_6_160)))
 (let ((?x7418 (* l_0_6_159 l_0_6_159)))
 (let ((?x7416 (* l_0_6_158 l_0_6_158)))
 (let ((?x4533 (* l_0_6_15 l_0_6_15)))
 (let ((?x6374 (* 6.0 ?x4533)))
 (let ((?x4531 (* l_0_6_14 l_0_6_14)))
 (let ((?x6368 (* 6.0 ?x4531)))
 (let ((?x4529 (* l_0_6_13 l_0_6_13)))
 (let ((?x6357 (* 6.0 ?x4529)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x5150 (* ?x4824 l_0_6_138)))
 (let ((?x5144 (* 2.0 l_0_6_128)))
 (let ((?x5147 (* ?x5144 l_0_6_137)))
 (let ((?x4526 (* l_0_6_12 l_0_6_12)))
 (let ((?x6355 (* 6.0 ?x4526)))
 (let ((?x4547 (* l_0_6_11 l_0_6_11)))
 (let ((?x6354 (* 6.0 ?x4547)))
 (let ((?x6356 (+ ?x6354 ?x6355)))
 (let ((?x7419 (- (- (+ (+ (+ (+ (+ ?x6356 ?x5147) ?x5150) ?x6357) ?x6368) ?x6374) ?x7416) ?x7418)))
 (let ((?x7429 (- (- (- (- (- (- (- ?x7419 ?x7420) ?x7422) ?x7424) ?x6377) ?x6380) ?x6383) ?x6386)))
 (let ((?x7436 (- (- (- ?x7429 ?x6389) (* (* 1.0 l_0_6_53) l_0_6_53)) (* (* 1.0 l_0_6_54) l_0_6_54))))
 (let ((?x7442 (- (- ?x7436 (* (* 1.0 l_0_6_55) l_0_6_55)) (* (* 1.0 l_0_6_56) l_0_6_56))))
 (let ((?x7447 (+ (- ?x7442 (* (* 1.0 l_0_6_57) l_0_6_57)) (* 1.0 (* l_0_6_74 l_0_6_74)))))
 (let ((?x7451 (+ (+ ?x7447 (* 1.0 (* l_0_6_75 l_0_6_75))) (* 1.0 (* l_0_6_76 l_0_6_76)))))
 (let ((?x7455 (+ (+ ?x7451 (* 1.0 (* l_0_6_77 l_0_6_77))) (* 1.0 (* l_0_6_78 l_0_6_78)))))
 (= ?x7455 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x7563 (* ?x5359 l_0_6_96)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x7561 (* ?x5356 l_0_6_95)))
 (let ((?x7559 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x7556 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x7553 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x7550 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x7547 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x7544 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x7541 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x7538 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x7535 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x7532 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x6545 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x6542 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x6539 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x6536 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x6533 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x6530 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x6521 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x5152 (* 12.0 l_0_6_13)))
 (let ((?x6506 (* ?x5152 l_0_6_18)))
 (let ((?x4824 (* 2.0 l_0_6_129)))
 (let ((?x5305 (* ?x4824 l_0_6_143)))
 (let ((?x5144 (* 2.0 l_0_6_128)))
 (let ((?x5303 (* ?x5144 l_0_6_142)))
 (let ((?x5139 (* 12.0 l_0_6_12)))
 (let ((?x6504 (* ?x5139 l_0_6_17)))
 (let ((?x5135 (* 12.0 l_0_6_11)))
 (let ((?x6498 (* ?x5135 l_0_6_16)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7502 (* ?x5300 l_0_6_117)))
 (let ((?x7506 (+ (+ (+ (+ (* (* 2.0 l_0_6_107) l_0_6_116) ?x7502) ?x6498) ?x6504) ?x5303)))
 (let ((?x7513 (- (+ (+ (+ (+ ?x7506 ?x5305) ?x6506) ?x6521) ?x6530) (* (* 2.0 l_0_6_158) l_0_6_163))))
 (let ((?x7519 (- (- ?x7513 (* (* 2.0 l_0_6_159) l_0_6_164)) (* (* 2.0 l_0_6_160) l_0_6_165))))
 (let ((?x7525 (- (- ?x7519 (* (* 2.0 l_0_6_161) l_0_6_166)) (* (* 2.0 l_0_6_162) l_0_6_167))))
 (let ((?x7536 (- (- (- (- (- (- (- ?x7525 ?x6533) ?x6536) ?x6539) ?x6542) ?x6545) ?x7532) ?x7535)))
 (let ((?x7557 (+ (+ (+ (+ (- (- (- ?x7536 ?x7538) ?x7541) ?x7544) ?x7547) ?x7550) ?x7553) ?x7556)))
 (= (- (- (+ ?x7557 ?x7559) ?x7561) ?x7563) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6766 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x6763 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x6760 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x6757 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x6754 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x6751 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x4661 (* l_0_6_21 l_0_6_21)))
 (let ((?x6748 (* 6.0 ?x4661)))
 (let ((?x4659 (* l_0_6_20 l_0_6_20)))
 (let ((?x6746 (* 6.0 ?x4659)))
 (let ((?x4657 (* l_0_6_19 l_0_6_19)))
 (let ((?x6744 (* 6.0 ?x4657)))
 (let ((?x4655 (* l_0_6_18 l_0_6_18)))
 (let ((?x6742 (* 6.0 ?x4655)))
 (let ((?x4653 (* l_0_6_17 l_0_6_17)))
 (let ((?x6740 (* 6.0 ?x4653)))
 (let ((?x7673 (* l_0_6_168 l_0_6_168)))
 (let ((?x7671 (* l_0_6_167 l_0_6_167)))
 (let ((?x7669 (* l_0_6_166 l_0_6_166)))
 (let ((?x7667 (* l_0_6_165 l_0_6_165)))
 (let ((?x7665 (* l_0_6_164 l_0_6_164)))
 (let ((?x7663 (* l_0_6_163 l_0_6_163)))
 (let ((?x4651 (* l_0_6_16 l_0_6_16)))
 (let ((?x6738 (* 6.0 ?x4651)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7660 (* ?x5300 l_0_6_122)))
 (let ((?x5298 (* 2.0 l_0_6_107)))
 (let ((?x7658 (* ?x5298 l_0_6_121)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x7656 (* ?x6714 l_0_6_87)))
 (let ((?x7662 (+ (+ (+ (- (* (* (- 2.0) l_0_6_100) l_0_6_86) ?x7656) ?x7658) ?x7660) ?x6738)))
 (let ((?x7675 (+ (- (- (- (- (- (- ?x7662 ?x7663) ?x7665) ?x7667) ?x7669) ?x7671) ?x7673) ?x6740)))
 (let ((?x7682 (- (- (- (+ (+ (+ (+ ?x7675 ?x6742) ?x6744) ?x6746) ?x6748) ?x6751) ?x6754) ?x6757)))
 (let ((?x7688 (- (- (- (- ?x7682 ?x6760) ?x6763) ?x6766) (* (* 1.0 l_0_6_58) l_0_6_58))))
 (let ((?x7694 (- (- ?x7688 (* (* 1.0 l_0_6_59) l_0_6_59)) (* (* 1.0 l_0_6_60) l_0_6_60))))
 (let ((?x7700 (- (- ?x7694 (* (* 1.0 l_0_6_61) l_0_6_61)) (* (* 1.0 l_0_6_62) l_0_6_62))))
 (let ((?x7705 (+ (- ?x7700 (* (* 1.0 l_0_6_63) l_0_6_63)) (* 1.0 (* l_0_6_79 l_0_6_79)))))
 (let ((?x7709 (+ (+ ?x7705 (* 1.0 (* l_0_6_80 l_0_6_80))) (* 1.0 (* l_0_6_81 l_0_6_81)))))
 (let ((?x7713 (+ (+ ?x7709 (* 1.0 (* l_0_6_82 l_0_6_82))) (* 1.0 (* l_0_6_83 l_0_6_83)))))
 (= (+ ?x7713 (* 1.0 (* l_0_6_84 l_0_6_84))) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3652 (* l_0_6_64 l_0_6_64)))
 (let ((?x3691 (* 3.0 ?x3652)))
 (= (+ (* (* (- 3.0) l_0_6_43) l_0_6_43) ?x3691) 0.0))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4049 (* ?x4048 l_0_6_86)))
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4119 (* ?x3841 l_0_6_67)))
 (let ((?x3836 (* 6.0 l_0_6_43)))
 (let ((?x4112 (* ?x3836 l_0_6_46)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_107) ?x4112) ?x4119) ?x4049) 0.0))))))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4175 (* ?x3841 l_0_6_70)))
 (= (+ (* (* (- 6.0) l_0_6_43) l_0_6_49) ?x4175) 0.0))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4243 (* ?x3841 l_0_6_74)))
 (= (+ (* (* (- 6.0) l_0_6_43) l_0_6_53) ?x4243) 0.0))))
(assert
 (let ((?x3841 (* 6.0 l_0_6_64)))
 (let ((?x4308 (* ?x3841 l_0_6_79)))
 (= (+ (* (* (- 6.0) l_0_6_43) l_0_6_58) ?x4308) 0.0))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x5360 (* ?x5359 l_0_6_89)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x5357 (* ?x5356 l_0_6_88)))
 (let ((?x4883 (* l_0_6_69 l_0_6_69)))
 (let ((?x5516 (* 3.0 ?x4883)))
 (let ((?x4880 (* l_0_6_68 l_0_6_68)))
 (let ((?x5514 (* 3.0 ?x4880)))
 (let ((?x4877 (* l_0_6_67 l_0_6_67)))
 (let ((?x5512 (* 3.0 ?x4877)))
 (let ((?x5506 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x5503 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x5500 (* (* 3.0 l_0_6_46) l_0_6_46)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x5301 (* ?x5300 l_0_6_110)))
 (let ((?x7823 (- (- (- (- (* (* (- 2.0) l_0_6_107) l_0_6_109) ?x5301) ?x5500) ?x5503) ?x5506)))
 (= (+ (+ (+ (+ (+ ?x7823 ?x5512) ?x5514) ?x5516) ?x5357) ?x5360) 0.0))))))))))))))))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x7323 (* ?x5359 l_0_6_92)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x7321 (* ?x5356 l_0_6_91)))
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5615 (* ?x5614 l_0_6_72)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5611 (* ?x5610 l_0_6_71)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5607 (* ?x5606 l_0_6_70)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5599 (* ?x5598 l_0_6_51)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5595 (* ?x5594 l_0_6_50)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5591 (* ?x5590 l_0_6_49)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7284 (* ?x5300 l_0_6_113)))
 (let ((?x7847 (- (- (- (- (* (* (- 2.0) l_0_6_107) l_0_6_112) ?x7284) ?x5591) ?x5595) ?x5599)))
 (= (+ (+ (+ (+ (+ ?x7847 ?x5607) ?x5611) ?x5615) ?x7321) ?x7323) 0.0)))))))))))))))))))))
(assert
 (let ((?x5359 (* 2.0 l_0_6_87)))
 (let ((?x7563 (* ?x5359 l_0_6_96)))
 (let ((?x5356 (* 2.0 l_0_6_86)))
 (let ((?x7561 (* ?x5356 l_0_6_95)))
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5716 (* ?x5614 l_0_6_76)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5714 (* ?x5610 l_0_6_75)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5712 (* ?x5606 l_0_6_74)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5708 (* ?x5598 l_0_6_55)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5706 (* ?x5594 l_0_6_54)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5704 (* ?x5590 l_0_6_53)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7502 (* ?x5300 l_0_6_117)))
 (let ((?x7871 (- (- (- (- (* (* (- 2.0) l_0_6_107) l_0_6_116) ?x7502) ?x5704) ?x5706) ?x5708)))
 (= (+ (+ (+ (+ (+ ?x7871 ?x5712) ?x5714) ?x5716) ?x7561) ?x7563) 0.0)))))))))))))))))))))
(assert
 (let ((?x5614 (* 6.0 l_0_6_69)))
 (let ((?x5802 (* ?x5614 l_0_6_81)))
 (let ((?x5610 (* 6.0 l_0_6_68)))
 (let ((?x5800 (* ?x5610 l_0_6_80)))
 (let ((?x5606 (* 6.0 l_0_6_67)))
 (let ((?x5798 (* ?x5606 l_0_6_79)))
 (let ((?x5598 (* 6.0 l_0_6_48)))
 (let ((?x5794 (* ?x5598 l_0_6_60)))
 (let ((?x5594 (* 6.0 l_0_6_47)))
 (let ((?x5792 (* ?x5594 l_0_6_59)))
 (let ((?x5590 (* 6.0 l_0_6_46)))
 (let ((?x5790 (* ?x5590 l_0_6_58)))
 (let ((?x5300 (* 2.0 l_0_6_108)))
 (let ((?x7660 (* ?x5300 l_0_6_122)))
 (let ((?x5298 (* 2.0 l_0_6_107)))
 (let ((?x7658 (* ?x5298 l_0_6_121)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x7656 (* ?x6714 l_0_6_87)))
 (let ((?x7899 (- (- (- (+ (* (* 2.0 l_0_6_100) l_0_6_86) ?x7656) ?x7658) ?x7660) ?x5790)))
 (= (+ (+ (+ (- (- ?x7899 ?x5792) ?x5794) ?x5798) ?x5800) ?x5802) 0.0)))))))))))))))))))))
(assert
 (let ((?x5920 (* l_0_6_73 l_0_6_73)))
 (let ((?x5921 (* 3.0 ?x5920)))
 (let ((?x5917 (* l_0_6_72 l_0_6_72)))
 (let ((?x5918 (* 3.0 ?x5917)))
 (let ((?x5914 (* l_0_6_71 l_0_6_71)))
 (let ((?x5915 (* 3.0 ?x5914)))
 (let ((?x5911 (* l_0_6_70 l_0_6_70)))
 (let ((?x5912 (* 3.0 ?x5911)))
 (let ((?x5904 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x5901 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x5898 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x7932 (+ (- (- (- (* (* (- 3.0) l_0_6_49) l_0_6_49) ?x5898) ?x5901) ?x5904) ?x5912)))
 (= (+ (+ (+ ?x7932 ?x5915) ?x5918) ?x5921) 0.0))))))))))))))
(assert
 (let ((?x6069 (* 6.0 l_0_6_73)))
 (let ((?x6070 (* ?x6069 l_0_6_77)))
 (let ((?x6066 (* 6.0 l_0_6_72)))
 (let ((?x6067 (* ?x6066 l_0_6_76)))
 (let ((?x6063 (* 6.0 l_0_6_71)))
 (let ((?x6064 (* ?x6063 l_0_6_75)))
 (let ((?x6060 (* 6.0 l_0_6_70)))
 (let ((?x6061 (* ?x6060 l_0_6_74)))
 (let ((?x6054 (* 6.0 l_0_6_52)))
 (let ((?x6055 (* ?x6054 l_0_6_56)))
 (let ((?x6051 (* 6.0 l_0_6_51)))
 (let ((?x6052 (* ?x6051 l_0_6_55)))
 (let ((?x6048 (* 6.0 l_0_6_50)))
 (let ((?x6049 (* ?x6048 l_0_6_54)))
 (let ((?x7950 (+ (- (- (- (* (* (- 6.0) l_0_6_49) l_0_6_53) ?x6049) ?x6052) ?x6055) ?x6061)))
 (= (+ (+ (+ ?x7950 ?x6064) ?x6067) ?x6070) 0.0)))))))))))))))))
(assert
 (let ((?x6069 (* 6.0 l_0_6_73)))
 (let ((?x6221 (* ?x6069 l_0_6_82)))
 (let ((?x6066 (* 6.0 l_0_6_72)))
 (let ((?x6219 (* ?x6066 l_0_6_81)))
 (let ((?x6063 (* 6.0 l_0_6_71)))
 (let ((?x6217 (* ?x6063 l_0_6_80)))
 (let ((?x6060 (* 6.0 l_0_6_70)))
 (let ((?x6215 (* ?x6060 l_0_6_79)))
 (let ((?x6054 (* 6.0 l_0_6_52)))
 (let ((?x6210 (* ?x6054 l_0_6_61)))
 (let ((?x6051 (* 6.0 l_0_6_51)))
 (let ((?x6208 (* ?x6051 l_0_6_60)))
 (let ((?x6048 (* 6.0 l_0_6_50)))
 (let ((?x6206 (* ?x6048 l_0_6_59)))
 (let ((?x7971 (+ (- (- (- (* (* (- 6.0) l_0_6_49) l_0_6_58) ?x6206) ?x6208) ?x6210) ?x6215)))
 (= (+ (+ (+ ?x7971 ?x6217) ?x6219) ?x6221) 0.0)))))))))))))))))
(assert
 (let ((?x6418 (* l_0_6_78 l_0_6_78)))
 (let ((?x6419 (* 3.0 ?x6418)))
 (let ((?x6415 (* l_0_6_77 l_0_6_77)))
 (let ((?x6416 (* 3.0 ?x6415)))
 (let ((?x6412 (* l_0_6_76 l_0_6_76)))
 (let ((?x6413 (* 3.0 ?x6412)))
 (let ((?x6409 (* l_0_6_75 l_0_6_75)))
 (let ((?x6410 (* 3.0 ?x6409)))
 (let ((?x6406 (* l_0_6_74 l_0_6_74)))
 (let ((?x6407 (* 3.0 ?x6406)))
 (let ((?x6404 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x6401 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x6398 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x6395 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x7993 (- (- (- (- (* (* (- 3.0) l_0_6_53) l_0_6_53) ?x6395) ?x6398) ?x6401) ?x6404)))
 (= (+ (+ (+ (+ (+ ?x7993 ?x6407) ?x6410) ?x6413) ?x6416) ?x6419) 0.0)))))))))))))))))
(assert
 (let ((?x6575 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x6572 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x6569 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x6566 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x6563 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x6560 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x6557 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x6554 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x6551 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x8015 (- (- (- (- (* (* (- 6.0) l_0_6_53) l_0_6_58) ?x6551) ?x6554) ?x6557) ?x6560)))
 (= (+ (+ (+ (+ (+ ?x8015 ?x6563) ?x6566) ?x6569) ?x6572) ?x6575) 0.0))))))))))))
(assert
 (let ((?x6801 (* l_0_6_84 l_0_6_84)))
 (let ((?x6802 (* 3.0 ?x6801)))
 (let ((?x6798 (* l_0_6_83 l_0_6_83)))
 (let ((?x6799 (* 3.0 ?x6798)))
 (let ((?x6795 (* l_0_6_82 l_0_6_82)))
 (let ((?x6796 (* 3.0 ?x6795)))
 (let ((?x6792 (* l_0_6_81 l_0_6_81)))
 (let ((?x6793 (* 3.0 ?x6792)))
 (let ((?x6789 (* l_0_6_80 l_0_6_80)))
 (let ((?x6790 (* 3.0 ?x6789)))
 (let ((?x6786 (* l_0_6_79 l_0_6_79)))
 (let ((?x6787 (* 3.0 ?x6786)))
 (let ((?x6784 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x6781 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x6778 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x6775 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x6772 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x8042 (- (- (- (- (* (* (- 3.0) l_0_6_58) l_0_6_58) ?x6772) ?x6775) ?x6778) ?x6781)))
 (let ((?x8049 (+ (+ (+ (+ (+ (+ (- ?x8042 ?x6784) ?x6787) ?x6790) ?x6793) ?x6796) ?x6799) ?x6802)))
 (= ?x8049 0.0)))))))))))))))))))))
(assert
 (let ((?x5920 (* l_0_6_73 l_0_6_73)))
 (let ((?x5917 (* l_0_6_72 l_0_6_72)))
 (let ((?x5914 (* l_0_6_71 l_0_6_71)))
 (let ((?x5911 (* l_0_6_70 l_0_6_70)))
 (let ((?x5978 (* l_0_6_52 l_0_6_52)))
 (let ((?x5972 (* l_0_6_51 l_0_6_51)))
 (let ((?x8065 (+ (+ (+ (* l_0_6_49 l_0_6_49) (* l_0_6_50 l_0_6_50)) ?x5972) ?x5978)))
 (= (- (- (- (- ?x8065 ?x5911) ?x5914) ?x5917) ?x5920) 0.0)))))))))
(assert
 (let ((?x7208 (* 2.0 l_0_6_73)))
 (let ((?x7209 (* ?x7208 l_0_6_77)))
 (let ((?x7205 (* 2.0 l_0_6_72)))
 (let ((?x7206 (* ?x7205 l_0_6_76)))
 (let ((?x7202 (* 2.0 l_0_6_71)))
 (let ((?x7203 (* ?x7202 l_0_6_75)))
 (let ((?x7199 (* 2.0 l_0_6_70)))
 (let ((?x7200 (* ?x7199 l_0_6_74)))
 (let ((?x7194 (* 2.0 l_0_6_52)))
 (let ((?x7195 (* ?x7194 l_0_6_56)))
 (let ((?x7191 (* 2.0 l_0_6_51)))
 (let ((?x7192 (* ?x7191 l_0_6_55)))
 (let ((?x7188 (* 2.0 l_0_6_50)))
 (let ((?x7189 (* ?x7188 l_0_6_54)))
 (let ((?x7185 (* 2.0 l_0_6_49)))
 (let ((?x7186 (* ?x7185 l_0_6_53)))
 (let ((?x5877 (* l_0_6_136 l_0_6_136)))
 (let ((?x5875 (* l_0_6_135 l_0_6_135)))
 (let ((?x8084 (+ (+ (+ (* l_0_6_133 l_0_6_133) (* l_0_6_134 l_0_6_134)) ?x5875) ?x5877)))
 (let ((?x8091 (- (- (- (+ (+ (+ (+ ?x8084 ?x7186) ?x7189) ?x7192) ?x7195) ?x7200) ?x7203) ?x7206)))
 (= (- ?x8091 ?x7209) 0.0))))))))))))))))))))))
(assert
 (let ((?x8133 (* l_0_6_94 l_0_6_94)))
 (let ((?x8131 (* l_0_6_93 l_0_6_93)))
 (let ((?x8129 (* l_0_6_92 l_0_6_92)))
 (let ((?x8127 (* l_0_6_91 l_0_6_91)))
 (let ((?x7208 (* 2.0 l_0_6_73)))
 (let ((?x7319 (* ?x7208 l_0_6_82)))
 (let ((?x7205 (* 2.0 l_0_6_72)))
 (let ((?x7317 (* ?x7205 l_0_6_81)))
 (let ((?x7202 (* 2.0 l_0_6_71)))
 (let ((?x7315 (* ?x7202 l_0_6_80)))
 (let ((?x7199 (* 2.0 l_0_6_70)))
 (let ((?x7313 (* ?x7199 l_0_6_79)))
 (let ((?x7194 (* 2.0 l_0_6_52)))
 (let ((?x7309 (* ?x7194 l_0_6_61)))
 (let ((?x7191 (* 2.0 l_0_6_51)))
 (let ((?x7307 (* ?x7191 l_0_6_60)))
 (let ((?x7188 (* 2.0 l_0_6_50)))
 (let ((?x7305 (* ?x7188 l_0_6_59)))
 (let ((?x7185 (* 2.0 l_0_6_49)))
 (let ((?x7303 (* ?x7185 l_0_6_58)))
 (let ((?x8117 (* l_0_6_115 l_0_6_115)))
 (let ((?x8115 (* l_0_6_114 l_0_6_114)))
 (let ((?x8118 (+ (+ (+ (* l_0_6_112 l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x8115) ?x8117)))
 (let ((?x8125 (- (- (- (+ (+ (+ (+ ?x8118 ?x7303) ?x7305) ?x7307) ?x7309) ?x7313) ?x7315) ?x7317)))
 (= (- (- (- (- (- ?x8125 ?x7319) ?x8127) ?x8129) ?x8131) ?x8133) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x6418 (* l_0_6_78 l_0_6_78)))
 (let ((?x6415 (* l_0_6_77 l_0_6_77)))
 (let ((?x6412 (* l_0_6_76 l_0_6_76)))
 (let ((?x6409 (* l_0_6_75 l_0_6_75)))
 (let ((?x6406 (* l_0_6_74 l_0_6_74)))
 (let ((?x6489 (* l_0_6_57 l_0_6_57)))
 (let ((?x6483 (* l_0_6_56 l_0_6_56)))
 (let ((?x6477 (* l_0_6_55 l_0_6_55)))
 (let ((?x6471 (* l_0_6_54 l_0_6_54)))
 (let ((?x6465 (* l_0_6_53 l_0_6_53)))
 (let ((?x6027 (* 2.0 l_0_6_136)))
 (let ((?x6028 (* ?x6027 l_0_6_140)))
 (let ((?x6024 (* 2.0 l_0_6_135)))
 (let ((?x6025 (* ?x6024 l_0_6_139)))
 (let ((?x6021 (* 2.0 l_0_6_134)))
 (let ((?x6022 (* ?x6021 l_0_6_138)))
 (let ((?x6018 (* 2.0 l_0_6_133)))
 (let ((?x6019 (* ?x6018 l_0_6_137)))
 (let ((?x8172 (+ (+ (+ (+ (+ (+ (+ ?x6019 ?x6022) ?x6025) ?x6028) ?x6465) ?x6471) ?x6477) ?x6483)))
 (= (- (- (- (- (- (+ ?x8172 ?x6489) ?x6406) ?x6409) ?x6412) ?x6415) ?x6418) 0.0)))))))))))))))))))))
(assert
 (let ((?x8232 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x8229 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x8226 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x8223 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x7559 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x7556 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x7553 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x7550 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x7547 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x7544 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x7541 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x7538 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x7535 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x7532 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x6027 (* 2.0 l_0_6_136)))
 (let ((?x6185 (* ?x6027 l_0_6_145)))
 (let ((?x6024 (* 2.0 l_0_6_135)))
 (let ((?x6183 (* ?x6024 l_0_6_144)))
 (let ((?x6021 (* 2.0 l_0_6_134)))
 (let ((?x6181 (* ?x6021 l_0_6_143)))
 (let ((?x6018 (* 2.0 l_0_6_133)))
 (let ((?x6179 (* ?x6018 l_0_6_142)))
 (let ((?x8205 (* 2.0 l_0_6_115)))
 (let ((?x8206 (* ?x8205 l_0_6_119)))
 (let ((?x8202 (* 2.0 l_0_6_114)))
 (let ((?x8203 (* ?x8202 l_0_6_118)))
 (let ((?x8199 (* 2.0 l_0_6_113)))
 (let ((?x8200 (* ?x8199 l_0_6_117)))
 (let ((?x8208 (+ (+ (+ (+ (* (* 2.0 l_0_6_112) l_0_6_116) ?x8200) ?x8203) ?x8206) ?x6179)))
 (let ((?x8215 (+ (+ (+ (+ (+ (+ (+ ?x8208 ?x6181) ?x6183) ?x6185) ?x7532) ?x7535) ?x7538) ?x7541)))
 (let ((?x8224 (- (- (- (- (- (- (+ ?x8215 ?x7544) ?x7547) ?x7550) ?x7553) ?x7556) ?x7559) ?x8223)))
 (= (- (- (- ?x8224 ?x8226) ?x8229) ?x8232) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x6801 (* l_0_6_84 l_0_6_84)))
 (let ((?x6798 (* l_0_6_83 l_0_6_83)))
 (let ((?x6795 (* l_0_6_82 l_0_6_82)))
 (let ((?x6792 (* l_0_6_81 l_0_6_81)))
 (let ((?x6789 (* l_0_6_80 l_0_6_80)))
 (let ((?x6786 (* l_0_6_79 l_0_6_79)))
 (let ((?x6905 (* l_0_6_63 l_0_6_63)))
 (let ((?x6899 (* l_0_6_62 l_0_6_62)))
 (let ((?x6893 (* l_0_6_61 l_0_6_61)))
 (let ((?x6887 (* l_0_6_60 l_0_6_60)))
 (let ((?x6881 (* l_0_6_59 l_0_6_59)))
 (let ((?x6875 (* l_0_6_58 l_0_6_58)))
 (let ((?x8205 (* 2.0 l_0_6_115)))
 (let ((?x8303 (* ?x8205 l_0_6_124)))
 (let ((?x8202 (* 2.0 l_0_6_114)))
 (let ((?x8301 (* ?x8202 l_0_6_123)))
 (let ((?x8199 (* 2.0 l_0_6_113)))
 (let ((?x8299 (* ?x8199 l_0_6_122)))
 (let ((?x8197 (* 2.0 l_0_6_112)))
 (let ((?x8297 (* ?x8197 l_0_6_121)))
 (let ((?x8294 (* 2.0 l_0_6_103)))
 (let ((?x8295 (* ?x8294 l_0_6_94)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x8292 (* ?x6717 l_0_6_93)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x8290 (* ?x6714 l_0_6_92)))
 (let ((?x8298 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_91) ?x8290) ?x8292) ?x8295) ?x8297)))
 (let ((?x8308 (+ (+ (+ (+ (+ (+ (+ ?x8298 ?x8299) ?x8301) ?x8303) ?x6875) ?x6881) ?x6887) ?x6893)))
 (let ((?x8315 (- (- (- (- (- (+ (+ ?x8308 ?x6899) ?x6905) ?x6786) ?x6789) ?x6792) ?x6795) ?x6798)))
 (= (- ?x8315 ?x6801) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x8394 (* l_0_6_99 l_0_6_99)))
 (let ((?x8392 (* l_0_6_98 l_0_6_98)))
 (let ((?x8390 (* l_0_6_97 l_0_6_97)))
 (let ((?x8388 (* l_0_6_96 l_0_6_96)))
 (let ((?x8386 (* l_0_6_95 l_0_6_95)))
 (let ((?x6527 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6524 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x6518 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6515 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6512 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x8379 (* l_0_6_120 l_0_6_120)))
 (let ((?x8377 (* l_0_6_119 l_0_6_119)))
 (let ((?x8375 (* l_0_6_118 l_0_6_118)))
 (let ((?x8378 (+ (+ (+ (* l_0_6_116 l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8375) ?x8377)))
 (let ((?x8387 (- (+ (+ (+ (+ (+ (+ ?x8378 ?x8379) ?x6512) ?x6515) ?x6518) ?x6524) ?x6527) ?x8386)))
 (= (- (- (- (- ?x8387 ?x8388) ?x8390) ?x8392) ?x8394) 0.0)))))))))))))))))
(assert
 (let ((?x6736 (* l_0_6_147 l_0_6_147)))
 (let ((?x6734 (* l_0_6_146 l_0_6_146)))
 (let ((?x6732 (* l_0_6_145 l_0_6_145)))
 (let ((?x6730 (* l_0_6_144 l_0_6_144)))
 (let ((?x6728 (* l_0_6_143 l_0_6_143)))
 (let ((?x6726 (* l_0_6_142 l_0_6_142)))
 (let ((?x8437 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x8434 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x8431 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x8428 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x8425 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x8422 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x8294 (* 2.0 l_0_6_103)))
 (let ((?x8419 (* ?x8294 l_0_6_98)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x8417 (* ?x6717 l_0_6_97)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x8415 (* ?x6714 l_0_6_96)))
 (let ((?x8423 (- (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_95) ?x8415) ?x8417) ?x8419) ?x8422)))
 (let ((?x8440 (+ (+ (+ (+ (+ (+ (+ ?x8423 ?x8425) ?x8428) ?x8431) ?x8434) ?x8437) ?x6726) ?x6728)))
 (= (+ (+ (+ (+ ?x8440 ?x6730) ?x6732) ?x6734) ?x6736) 0.0))))))))))))))))))))))
(assert
 (let ((?x8506 (* l_0_6_126 l_0_6_126)))
 (let ((?x8504 (* l_0_6_125 l_0_6_125)))
 (let ((?x8502 (* l_0_6_124 l_0_6_124)))
 (let ((?x8500 (* l_0_6_123 l_0_6_123)))
 (let ((?x8498 (* l_0_6_122 l_0_6_122)))
 (let ((?x8496 (* l_0_6_121 l_0_6_121)))
 (let ((?x8494 (* l_0_6_105 l_0_6_105)))
 (let ((?x8492 (* l_0_6_104 l_0_6_104)))
 (let ((?x8490 (* l_0_6_103 l_0_6_103)))
 (let ((?x8488 (* l_0_6_102 l_0_6_102)))
 (let ((?x8489 (- (- (* (- l_0_6_100) l_0_6_100) (* l_0_6_101 l_0_6_101)) ?x8488)))
 (let ((?x8503 (+ (+ (+ (+ (- (- (- ?x8489 ?x8490) ?x8492) ?x8494) ?x8496) ?x8498) ?x8500) ?x8502)))
 (= (+ (+ ?x8503 ?x8504) ?x8506) 0.0))))))))))))))
(assert
 (= (+ (* (- l_0_6_106) l_0_6_106) (* l_0_6_85 l_0_6_85)) 0.0))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4310 (* ?x4048 l_0_6_88)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_109) ?x4310) 0.0))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4478 (* ?x4048 l_0_6_91)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x4478) 0.0))))
(assert
 (let ((?x4048 (* 2.0 l_0_6_85)))
 (let ((?x4593 (* ?x4048 l_0_6_95)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_116) ?x4593) 0.0))))
(assert
 (let ((?x4027 (* 2.0 l_0_6_106)))
 (let ((?x4649 (* ?x4027 l_0_6_121)))
 (= (- (* (* 2.0 l_0_6_100) l_0_6_85) ?x4649) 0.0))))
(assert
 (let ((?x5808 (* l_0_6_90 l_0_6_90)))
 (let ((?x5806 (* l_0_6_89 l_0_6_89)))
 (let ((?x5804 (* l_0_6_88 l_0_6_88)))
 (let ((?x5774 (* l_0_6_111 l_0_6_111)))
 (let ((?x8567 (- (- (* (- l_0_6_109) l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x5774)))
 (= (+ (+ (+ ?x8567 ?x5804) ?x5806) ?x5808) 0.0)))))))
(assert
 (let ((?x6229 (* 2.0 l_0_6_90)))
 (let ((?x6230 (* ?x6229 l_0_6_93)))
 (let ((?x6226 (* 2.0 l_0_6_89)))
 (let ((?x6227 (* ?x6226 l_0_6_92)))
 (let ((?x6223 (* 2.0 l_0_6_88)))
 (let ((?x6224 (* ?x6223 l_0_6_91)))
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6177 (* ?x6176 l_0_6_114)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6174 (* ?x6173 l_0_6_113)))
 (let ((?x8586 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_112) ?x6174) ?x6177) ?x6224) ?x6227)))
 (= (+ ?x8586 ?x6230) 0.0)))))))))))))
(assert
 (let ((?x6229 (* 2.0 l_0_6_90)))
 (let ((?x6581 (* ?x6229 l_0_6_97)))
 (let ((?x6226 (* 2.0 l_0_6_89)))
 (let ((?x6579 (* ?x6226 l_0_6_96)))
 (let ((?x6223 (* 2.0 l_0_6_88)))
 (let ((?x6577 (* ?x6223 l_0_6_95)))
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6502 (* ?x6176 l_0_6_118)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6500 (* ?x6173 l_0_6_117)))
 (let ((?x8604 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_116) ?x6500) ?x6502) ?x6577) ?x6579)))
 (= (+ ?x8604 ?x6581) 0.0)))))))))))))
(assert
 (let ((?x6176 (* 2.0 l_0_6_111)))
 (let ((?x6724 (* ?x6176 l_0_6_123)))
 (let ((?x6173 (* 2.0 l_0_6_110)))
 (let ((?x6722 (* ?x6173 l_0_6_122)))
 (let ((?x6170 (* 2.0 l_0_6_109)))
 (let ((?x6720 (* ?x6170 l_0_6_121)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x6718 (* ?x6717 l_0_6_90)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x6715 (* ?x6714 l_0_6_89)))
 (let ((?x8622 (- (- (+ (+ (* (* 2.0 l_0_6_100) l_0_6_88) ?x6715) ?x6718) ?x6720) ?x6722)))
 (= (- ?x8622 ?x6724) 0.0)))))))))))))
(assert
 (let ((?x8133 (* l_0_6_94 l_0_6_94)))
 (let ((?x8131 (* l_0_6_93 l_0_6_93)))
 (let ((?x8129 (* l_0_6_92 l_0_6_92)))
 (let ((?x8127 (* l_0_6_91 l_0_6_91)))
 (let ((?x8117 (* l_0_6_115 l_0_6_115)))
 (let ((?x8115 (* l_0_6_114 l_0_6_114)))
 (let ((?x8643 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x8115)))
 (= (+ (+ (+ (+ (- ?x8643 ?x8117) ?x8127) ?x8129) ?x8131) ?x8133) 0.0)))))))))
(assert
 (let ((?x8232 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x8229 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x8226 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x8223 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x8205 (* 2.0 l_0_6_115)))
 (let ((?x8206 (* ?x8205 l_0_6_119)))
 (let ((?x8202 (* 2.0 l_0_6_114)))
 (let ((?x8203 (* ?x8202 l_0_6_118)))
 (let ((?x8199 (* 2.0 l_0_6_113)))
 (let ((?x8200 (* ?x8199 l_0_6_117)))
 (let ((?x8667 (+ (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_116) ?x8200) ?x8203) ?x8206) ?x8223)))
 (= (+ (+ (+ ?x8667 ?x8226) ?x8229) ?x8232) 0.0)))))))))))))
(assert
 (let ((?x8205 (* 2.0 l_0_6_115)))
 (let ((?x8303 (* ?x8205 l_0_6_124)))
 (let ((?x8202 (* 2.0 l_0_6_114)))
 (let ((?x8301 (* ?x8202 l_0_6_123)))
 (let ((?x8199 (* 2.0 l_0_6_113)))
 (let ((?x8299 (* ?x8199 l_0_6_122)))
 (let ((?x8197 (* 2.0 l_0_6_112)))
 (let ((?x8297 (* ?x8197 l_0_6_121)))
 (let ((?x8294 (* 2.0 l_0_6_103)))
 (let ((?x8295 (* ?x8294 l_0_6_94)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x8292 (* ?x6717 l_0_6_93)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x8290 (* ?x6714 l_0_6_92)))
 (let ((?x8691 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_91) ?x8290) ?x8292) ?x8295) ?x8297)))
 (= (- (- (- ?x8691 ?x8299) ?x8301) ?x8303) 0.0)))))))))))))))))
(assert
 (let ((?x8394 (* l_0_6_99 l_0_6_99)))
 (let ((?x8392 (* l_0_6_98 l_0_6_98)))
 (let ((?x8390 (* l_0_6_97 l_0_6_97)))
 (let ((?x8388 (* l_0_6_96 l_0_6_96)))
 (let ((?x8386 (* l_0_6_95 l_0_6_95)))
 (let ((?x8379 (* l_0_6_120 l_0_6_120)))
 (let ((?x8377 (* l_0_6_119 l_0_6_119)))
 (let ((?x8375 (* l_0_6_118 l_0_6_118)))
 (let ((?x8713 (- (- (* (- l_0_6_116) l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8375)))
 (let ((?x8720 (+ (+ (+ (+ (+ (- (- ?x8713 ?x8377) ?x8379) ?x8386) ?x8388) ?x8390) ?x8392) ?x8394)))
 (= ?x8720 0.0))))))))))))
(assert
 (let ((?x8437 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x8434 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x8431 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x8428 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x8425 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x8422 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x8294 (* 2.0 l_0_6_103)))
 (let ((?x8419 (* ?x8294 l_0_6_98)))
 (let ((?x6717 (* 2.0 l_0_6_102)))
 (let ((?x8417 (* ?x6717 l_0_6_97)))
 (let ((?x6714 (* 2.0 l_0_6_101)))
 (let ((?x8415 (* ?x6714 l_0_6_96)))
 (let ((?x8741 (+ (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_95) ?x8415) ?x8417) ?x8419) ?x8422)))
 (= (- (- (- (- (- ?x8741 ?x8425) ?x8428) ?x8431) ?x8434) ?x8437) 0.0)))))))))))))))
(assert
 (let ((?x8506 (* l_0_6_126 l_0_6_126)))
 (let ((?x8504 (* l_0_6_125 l_0_6_125)))
 (let ((?x8502 (* l_0_6_124 l_0_6_124)))
 (let ((?x8500 (* l_0_6_123 l_0_6_123)))
 (let ((?x8498 (* l_0_6_122 l_0_6_122)))
 (let ((?x8496 (* l_0_6_121 l_0_6_121)))
 (let ((?x8494 (* l_0_6_105 l_0_6_105)))
 (let ((?x8492 (* l_0_6_104 l_0_6_104)))
 (let ((?x8490 (* l_0_6_103 l_0_6_103)))
 (let ((?x8488 (* l_0_6_102 l_0_6_102)))
 (let ((?x8773 (+ (+ (+ (* l_0_6_100 l_0_6_100) (* l_0_6_101 l_0_6_101)) ?x8488) ?x8490)))
 (let ((?x8780 (- (- (- (- (- (+ (+ ?x8773 ?x8492) ?x8494) ?x8496) ?x8498) ?x8500) ?x8502) ?x8504)))
 (= (- ?x8780 ?x8506) 0.0))))))))))))))
(assert
 (let ((?x6372 (* l_0_6_141 l_0_6_141)))
 (let ((?x6370 (* l_0_6_140 l_0_6_140)))
 (let ((?x6366 (* l_0_6_139 l_0_6_139)))
 (let ((?x8797 (+ (+ (+ (* l_0_6_137 l_0_6_137) (* l_0_6_138 l_0_6_138)) ?x6366) ?x6370)))
 (= (+ ?x8797 ?x6372) 0.0))))))
(assert
 (>= l_0_6_1 0.0))
(assert
 (>= l_0_6_3 0.0))
(assert
 (>= l_0_6_6 0.0))
(assert
 (>= l_0_6_10 0.0))
(assert
 (>= l_0_6_15 0.0))
(assert
 (>= l_0_6_21 0.0))
(assert
 (>= l_0_6_22 0.0))
(assert
 (>= l_0_6_24 0.0))
(assert
 (>= l_0_6_27 0.0))
(assert
 (>= l_0_6_31 0.0))
(assert
 (>= l_0_6_36 0.0))
(assert
 (>= l_0_6_42 0.0))
(assert
 (>= l_0_6_43 0.0))
(assert
 (>= l_0_6_45 0.0))
(assert
 (>= l_0_6_48 0.0))
(assert
 (>= l_0_6_52 0.0))
(assert
 (>= l_0_6_57 0.0))
(assert
 (>= l_0_6_63 0.0))
(assert
 (>= l_0_6_64 0.0))
(assert
 (>= l_0_6_66 0.0))
(assert
 (>= l_0_6_69 0.0))
(assert
 (>= l_0_6_73 0.0))
(assert
 (>= l_0_6_78 0.0))
(assert
 (>= l_0_6_84 0.0))
(assert
 (>= l_0_6_85 0.0))
(assert
 (>= l_0_6_87 0.0))
(assert
 (>= l_0_6_90 0.0))
(assert
 (>= l_0_6_94 0.0))
(assert
 (>= l_0_6_99 0.0))
(assert
 (>= l_0_6_105 0.0))
(assert
 (>= l_0_6_106 0.0))
(assert
 (>= l_0_6_108 0.0))
(assert
 (>= l_0_6_111 0.0))
(assert
 (>= l_0_6_115 0.0))
(assert
 (>= l_0_6_120 0.0))
(assert
 (>= l_0_6_126 0.0))
(assert
 (>= l_0_6_127 0.0))
(assert
 (>= l_0_6_129 0.0))
(assert
 (>= l_0_6_132 0.0))
(assert
 (>= l_0_6_136 0.0))
(assert
 (>= l_0_6_141 0.0))
(assert
 (>= l_0_6_147 0.0))
(assert
 (>= l_0_6_148 0.0))
(assert
 (>= l_0_6_150 0.0))
(assert
 (>= l_0_6_153 0.0))
(assert
 (>= l_0_6_157 0.0))
(assert
 (>= l_0_6_162 0.0))
(assert
 (>= l_0_6_168 0.0))
(assert
 (let ((?x8863 (* l_0_7_3 l_0_7_3)))
 (let ((?x8864 (* 6.0 ?x8863)))
 (let ((?x8861 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x8858 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x8854 (* l_0_7_2 l_0_7_2)))
 (let ((?x8855 (* 6.0 ?x8854)))
 (let ((?x8852 (* l_0_7_192 l_0_7_192)))
 (let ((?x8862 (- (- (+ (- (- _a_12_ (* l_0_7_191 l_0_7_191)) ?x8852) ?x8855) ?x8858) ?x8861)))
 (let ((?x8871 (- (- (+ ?x8862 ?x8864) (* (* 1.0 l_0_7_44) l_0_7_44)) (* (* 1.0 l_0_7_45) l_0_7_45))))
 (let ((?x8877 (+ (+ ?x8871 (* 1.0 (* l_0_7_65 l_0_7_65))) (* 1.0 (* l_0_7_66 l_0_7_66)))))
 (= (- ?x8877 12.0) 0.0))))))))))))
(assert
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x8929 (* ?x8928 l_0_7_65)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x8926 (* ?x8925 l_0_7_44)))
 (let ((?x8863 (* l_0_7_3 l_0_7_3)))
 (let ((?x8892 (* l_0_7_24 l_0_7_24)))
 (let ((?x8886 (* l_0_7_23 l_0_7_23)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x8920 (* ?x8919 l_0_7_23)))
 (let ((?x8854 (* l_0_7_2 l_0_7_2)))
 (let ((?x8917 (- (+ _a_13_ (* (* 12.0 l_0_7_1) l_0_7_2)) (* (* 2.0 l_0_7_190) l_0_7_191))))
 (let ((?x8930 (+ (- (- (+ (+ (- (- ?x8917 ?x8854) ?x8920) ?x8886) ?x8892) ?x8863) ?x8926) ?x8929)))
 (= ?x8930 0.0))))))))))))))
(assert
 (let ((?x8875 (* l_0_7_66 l_0_7_66)))
 (let ((?x9009 (* 3.0 ?x8875)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x9007 (* ?x9006 l_0_7_68)))
 (let ((?x8872 (* l_0_7_65 l_0_7_65)))
 (let ((?x9004 (* 3.0 ?x8872)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x9002 (* ?x9001 l_0_7_67)))
 (let ((?x8999 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x8996 (* ?x8995 l_0_7_47)))
 (let ((?x8993 (* (* 3.0 l_0_7_44) l_0_7_44)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x8990 (* ?x8989 l_0_7_46)))
 (let ((?x8863 (* l_0_7_3 l_0_7_3)))
 (let ((?x8864 (* 6.0 ?x8863)))
 (let ((?x8985 (* 12.0 l_0_7_3)))
 (let ((?x8986 (* ?x8985 l_0_7_5)))
 (let ((?x8861 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x8982 (* ?x8981 l_0_7_26)))
 (let ((?x8858 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x8978 (* ?x8977 l_0_7_25)))
 (let ((?x8854 (* l_0_7_2 l_0_7_2)))
 (let ((?x8855 (* 6.0 ?x8854)))
 (let ((?x8973 (* 12.0 l_0_7_2)))
 (let ((?x8974 (* ?x8973 l_0_7_4)))
 (let ((?x8969 (- (+ (* l_0_7_128 l_0_7_128) (* l_0_7_129 l_0_7_129)) (* (* 2.0 l_0_7_191) l_0_7_193))))
 (let ((?x8979 (- (+ (+ (- ?x8969 (* (* 2.0 l_0_7_192) l_0_7_194)) ?x8974) ?x8855) ?x8978)))
 (let ((?x8994 (- (- (+ (+ (- (- (- ?x8979 ?x8858) ?x8982) ?x8861) ?x8986) ?x8864) ?x8990) ?x8993)))
 (let ((?x9011 (- (+ (+ (+ (+ (- (- ?x8994 ?x8996) ?x8999) ?x9002) ?x9004) ?x9007) ?x9009) 6.0)))
 (= ?x9011 0.0))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_7_1) l_0_7_1) (* l_0_7_22 l_0_7_22)) 0.0))
(assert
 (let ((?x9098 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x9092 (* l_0_7_190 l_0_7_190)))
 (let ((?x9084 (* l_0_7_1 l_0_7_1)))
 (let ((?x9090 (* 6.0 ?x9084)))
 (let ((?x9096 (+ (- (+ (* (* (- 2.0) l_0_7_1) l_0_7_2) ?x9090) ?x9092) (* (* 2.0 l_0_7_22) l_0_7_23))))
 (let ((?x9105 (+ (- (- ?x9096 ?x9098) (* (* 1.0 l_0_7_43) l_0_7_43)) (* 1.0 (* l_0_7_64 l_0_7_64)))))
 (= ?x9105 0.0))))))))
(assert
 (let ((?x9103 (* l_0_7_64 l_0_7_64)))
 (let ((?x9139 (* 3.0 ?x9103)))
 (let ((?x9098 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x9131 (* l_0_7_127 l_0_7_127)))
 (let ((?x9084 (* l_0_7_1 l_0_7_1)))
 (let ((?x9090 (* 6.0 ?x9084)))
 (let ((?x9134 (+ (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_4) ?x9090) ?x9131) (* (* 2.0 l_0_7_22) l_0_7_25))))
 (= (+ (- (- ?x9134 ?x9098) (* (* 3.0 l_0_7_43) l_0_7_43)) ?x9139) 0.0)))))))))
(assert
 (let ((?x9103 (* l_0_7_64 l_0_7_64)))
 (let ((?x9119 (* l_0_7_43 l_0_7_43)))
 (let ((?x9162 (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) (* (* 2.0 l_0_7_22) l_0_7_28))))
 (= (- (+ ?x9162 ?x9119) ?x9103) 0.0)))))
(assert
 (let ((?x9180 (+ (- (* (* (- 2.0) l_0_7_1) l_0_7_11) (* l_0_7_127 l_0_7_127)) (* (* 2.0 l_0_7_22) l_0_7_32))))
 (= ?x9180 0.0)))
(assert
 (let ((?x9200 (* l_0_7_85 l_0_7_85)))
 (let ((?x9196 (* l_0_7_169 l_0_7_169)))
 (let ((?x9194 (* l_0_7_148 l_0_7_148)))
 (let ((?x9195 (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) (* l_0_7_106 l_0_7_106)) ?x9194)))
 (= (- (+ (- ?x9195 ?x9196) (* (* 2.0 l_0_7_22) l_0_7_37)) ?x9200) 0.0))))))
(assert
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9246 (* ?x8928 l_0_7_67)))
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9244 (* ?x9243 l_0_7_65)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9241 (* ?x8925 l_0_7_46)))
 (let ((?x9238 (* 6.0 l_0_7_43)))
 (let ((?x9239 (* ?x9238 l_0_7_44)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9227 (* ?x8919 l_0_7_25)))
 (let ((?x8920 (* ?x8919 l_0_7_23)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9219 (* ?x9218 l_0_7_128)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9216 (* ?x8912 l_0_7_4)))
 (let ((?x8913 (* ?x8912 l_0_7_2)))
 (let ((?x9225 (- (- (+ (+ ?x8913 ?x9216) ?x9219) (* (* 2.0 l_0_7_190) l_0_7_193)) (* (* 2.0 l_0_7_2) l_0_7_4))))
 (let ((?x9234 (+ (+ (- (- ?x9225 ?x8920) ?x9227) (* (* 2.0 l_0_7_23) l_0_7_25)) (* (* 2.0 l_0_7_24) l_0_7_26))))
 (let ((?x9245 (+ (- (- (- ?x9234 (* (* 2.0 l_0_7_3) l_0_7_5)) ?x9239) ?x9241) ?x9244)))
 (= (+ ?x9245 ?x9246) 0.0)))))))))))))))))))))
(assert
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9312 (* ?x8928 l_0_7_70)))
 (let ((?x8929 (* ?x8928 l_0_7_65)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9309 (* ?x8925 l_0_7_49)))
 (let ((?x8926 (* ?x8925 l_0_7_44)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9300 (* ?x8919 l_0_7_28)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9295 (* ?x8912 l_0_7_7)))
 (let ((?x9299 (- (- ?x9295 (* (* 2.0 l_0_7_190) l_0_7_196)) (* (* 2.0 l_0_7_2) l_0_7_7))))
 (let ((?x9305 (+ (+ (- ?x9299 ?x9300) (* (* 2.0 l_0_7_23) l_0_7_28)) (* (* 2.0 l_0_7_24) l_0_7_29))))
 (let ((?x9311 (- (- (+ (- ?x9305 (* (* 2.0 l_0_7_3) l_0_7_8)) ?x8926) ?x9309) ?x8929)))
 (= (+ ?x9311 ?x9312) 0.0)))))))))))))))
(assert
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9377 (* ?x8928 l_0_7_74)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9375 (* ?x8925 l_0_7_53)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9369 (* ?x8919 l_0_7_32)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9219 (* ?x9218 l_0_7_128)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9359 (* ?x8912 l_0_7_11)))
 (let ((?x9365 (- (- ?x9359 (* (* 2.0 l_0_7_11) l_0_7_2)) (* (* 2.0 l_0_7_12) l_0_7_3))))
 (let ((?x9372 (+ (- (- (- ?x9365 ?x9219) (* (* 2.0 l_0_7_190) l_0_7_200)) ?x9369) (* (* 2.0 l_0_7_23) l_0_7_32))))
 (= (+ (- (+ ?x9372 (* (* 2.0 l_0_7_24) l_0_7_33)) ?x9375) ?x9377) 0.0))))))))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9452 (* ?x9451 l_0_7_86)))
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9449 (* ?x8928 l_0_7_79)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9447 (* ?x8925 l_0_7_58)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9441 (* ?x8919 l_0_7_37)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9434 (* ?x9433 l_0_7_170)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9428 (* ?x9427 l_0_7_149)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9423 (* ?x8912 l_0_7_16)))
 (let ((?x9432 (- (+ (+ ?x9423 (* (* 2.0 l_0_7_106) l_0_7_107)) ?x9428) (* (* 2.0 l_0_7_16) l_0_7_2))))
 (let ((?x9440 (- (- (- ?x9432 ?x9434) (* (* 2.0 l_0_7_17) l_0_7_3)) (* (* 2.0 l_0_7_190) l_0_7_205))))
 (let ((?x9446 (+ (+ (- ?x9440 ?x9441) (* (* 2.0 l_0_7_23) l_0_7_37)) (* (* 2.0 l_0_7_24) l_0_7_38))))
 (= (- (+ (- ?x9446 ?x9447) ?x9449) ?x9452) 0.0)))))))))))))))))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9530 (* ?x9243 l_0_7_67)))
 (let ((?x9244 (* ?x9243 l_0_7_65)))
 (let ((?x9527 (* l_0_7_6 l_0_7_6)))
 (let ((?x9525 (* l_0_7_5 l_0_7_5)))
 (let ((?x9238 (* 6.0 l_0_7_43)))
 (let ((?x9523 (* ?x9238 l_0_7_46)))
 (let ((?x9239 (* ?x9238 l_0_7_44)))
 (let ((?x9520 (* l_0_7_4 l_0_7_4)))
 (let ((?x9518 (* l_0_7_27 l_0_7_27)))
 (let ((?x9516 (* l_0_7_26 l_0_7_26)))
 (let ((?x9514 (* l_0_7_25 l_0_7_25)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9227 (* ?x8919 l_0_7_25)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9511 (* ?x9218 l_0_7_130)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9216 (* ?x8912 l_0_7_4)))
 (let ((?x9522 (- (- (+ (+ (+ (- (+ ?x9216 ?x9511) ?x9227) ?x9514) ?x9516) ?x9518) ?x9520) ?x9239)))
 (= (+ (+ (- (- (- ?x9522 ?x9523) ?x9525) ?x9527) ?x9244) ?x9530) 0.0)))))))))))))))))))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9589 (* ?x9243 l_0_7_70)))
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9246 (* ?x8928 l_0_7_67)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9241 (* ?x8925 l_0_7_46)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9300 (* ?x8919 l_0_7_28)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9555 (* ?x9218 l_0_7_133)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9295 (* ?x8912 l_0_7_7)))
 (let ((?x9572 (+ (+ (- (+ ?x9295 ?x9555) ?x9300) (* (* 2.0 l_0_7_25) l_0_7_28)) (* (* 2.0 l_0_7_26) l_0_7_29))))
 (let ((?x9578 (- (+ ?x9572 (* (* 2.0 l_0_7_27) l_0_7_30)) (* (* 2.0 l_0_7_4) l_0_7_7))))
 (let ((?x9584 (- (- (+ ?x9578 ?x9241) (* (* 6.0 l_0_7_43) l_0_7_49)) (* (* 2.0 l_0_7_5) l_0_7_8))))
 (= (+ (- (- ?x9584 (* (* 2.0 l_0_7_6) l_0_7_9)) ?x9246) ?x9589) 0.0)))))))))))))))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9654 (* ?x9243 l_0_7_74)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9369 (* ?x8919 l_0_7_32)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9640 (* ?x9218 l_0_7_137)))
 (let ((?x9511 (* ?x9218 l_0_7_130)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9359 (* ?x8912 l_0_7_11)))
 (let ((?x9638 (- (- ?x9359 (* (* 2.0 l_0_7_11) l_0_7_4)) (* (* 2.0 l_0_7_12) l_0_7_5))))
 (let ((?x9645 (- (- (+ (- ?x9638 ?x9511) ?x9640) (* (* 2.0 l_0_7_13) l_0_7_6)) ?x9369)))
 (let ((?x9649 (+ (+ ?x9645 (* (* 2.0 l_0_7_25) l_0_7_32)) (* (* 2.0 l_0_7_26) l_0_7_33))))
 (let ((?x9653 (- (+ ?x9649 (* (* 2.0 l_0_7_27) l_0_7_34)) (* (* 6.0 l_0_7_43) l_0_7_53))))
 (= (+ ?x9653 ?x9654) 0.0)))))))))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9724 (* ?x9451 l_0_7_88)))
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9722 (* ?x9243 l_0_7_79)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x9441 (* ?x8919 l_0_7_37)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9706 (* ?x9433 l_0_7_172)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9702 (* ?x9427 l_0_7_151)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9700 (* ?x9218 l_0_7_142)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x9423 (* ?x8912 l_0_7_16)))
 (let ((?x9705 (- (+ (+ (+ ?x9423 (* (* 2.0 l_0_7_106) l_0_7_109)) ?x9700) ?x9702) (* (* 2.0 l_0_7_16) l_0_7_4))))
 (let ((?x9712 (- (- (- ?x9705 ?x9706) (* (* 2.0 l_0_7_17) l_0_7_5)) (* (* 2.0 l_0_7_18) l_0_7_6))))
 (let ((?x9717 (+ (+ (- ?x9712 ?x9441) (* (* 2.0 l_0_7_25) l_0_7_37)) (* (* 2.0 l_0_7_26) l_0_7_38))))
 (let ((?x9721 (- (+ ?x9717 (* (* 2.0 l_0_7_27) l_0_7_39)) (* (* 6.0 l_0_7_43) l_0_7_58))))
 (= (- (+ ?x9721 ?x9722) ?x9724) 0.0))))))))))))))))))))
(assert
 (let ((?x9797 (* l_0_7_9 l_0_7_9)))
 (let ((?x9795 (* l_0_7_8 l_0_7_8)))
 (let ((?x9793 (* l_0_7_7 l_0_7_7)))
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9312 (* ?x8928 l_0_7_70)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9309 (* ?x8925 l_0_7_49)))
 (let ((?x9789 (* l_0_7_31 l_0_7_31)))
 (let ((?x9787 (* l_0_7_30 l_0_7_30)))
 (let ((?x9785 (* l_0_7_29 l_0_7_29)))
 (let ((?x9788 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_28 l_0_7_28)) ?x9785) ?x9787)))
 (= (- (- (- (- (+ (+ ?x9788 ?x9789) ?x9309) ?x9312) ?x9793) ?x9795) ?x9797) 0.0)))))))))))))
(assert
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9377 (* ?x8928 l_0_7_74)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9375 (* ?x8925 l_0_7_53)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9555 (* ?x9218 l_0_7_133)))
 (let ((?x9821 (- (* (* (- 2.0) l_0_7_10) l_0_7_14) (* (* 2.0 l_0_7_11) l_0_7_7))))
 (let ((?x9826 (- (- (- ?x9821 (* (* 2.0 l_0_7_12) l_0_7_8)) ?x9555) (* (* 2.0 l_0_7_13) l_0_7_9))))
 (let ((?x9832 (+ (+ ?x9826 (* (* 2.0 l_0_7_28) l_0_7_32)) (* (* 2.0 l_0_7_29) l_0_7_33))))
 (let ((?x9838 (+ (+ ?x9832 (* (* 2.0 l_0_7_30) l_0_7_34)) (* (* 2.0 l_0_7_31) l_0_7_35))))
 (= (- (+ ?x9838 ?x9375) ?x9377) 0.0))))))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9903 (* ?x9451 l_0_7_91)))
 (let ((?x8928 (* 2.0 l_0_7_64)))
 (let ((?x9449 (* ?x8928 l_0_7_79)))
 (let ((?x8925 (* 2.0 l_0_7_43)))
 (let ((?x9447 (* ?x8925 l_0_7_58)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9887 (* ?x9433 l_0_7_175)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9883 (* ?x9427 l_0_7_154)))
 (let ((?x9882 (+ (* (* (- 2.0) l_0_7_10) l_0_7_19) (* (* 2.0 l_0_7_106) l_0_7_112))))
 (let ((?x9890 (- (- (- (+ ?x9882 ?x9883) (* (* 2.0 l_0_7_16) l_0_7_7)) ?x9887) (* (* 2.0 l_0_7_17) l_0_7_8))))
 (let ((?x9894 (+ (- ?x9890 (* (* 2.0 l_0_7_18) l_0_7_9)) (* (* 2.0 l_0_7_28) l_0_7_37))))
 (let ((?x9898 (+ (+ ?x9894 (* (* 2.0 l_0_7_29) l_0_7_38)) (* (* 2.0 l_0_7_30) l_0_7_39))))
 (let ((?x9904 (- (- (+ (+ ?x9898 (* (* 2.0 l_0_7_31) l_0_7_40)) ?x9447) ?x9449) ?x9903)))
 (= ?x9904 0.0)))))))))))))))))
(assert
 (let ((?x9976 (* l_0_7_36 l_0_7_36)))
 (let ((?x9974 (* l_0_7_35 l_0_7_35)))
 (let ((?x9972 (* l_0_7_34 l_0_7_34)))
 (let ((?x9970 (* l_0_7_33 l_0_7_33)))
 (let ((?x9968 (* l_0_7_32 l_0_7_32)))
 (let ((?x9966 (* l_0_7_15 l_0_7_15)))
 (let ((?x9964 (* l_0_7_14 l_0_7_14)))
 (let ((?x9962 (* l_0_7_13 l_0_7_13)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9640 (* ?x9218 l_0_7_137)))
 (let ((?x9963 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x9640) ?x9962)))
 (let ((?x9977 (+ (+ (+ (+ (+ (- (- ?x9963 ?x9964) ?x9966) ?x9968) ?x9970) ?x9972) ?x9974) ?x9976)))
 (= ?x9977 0.0))))))))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x10038 (* ?x9451 l_0_7_95)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x10021 (* ?x9433 l_0_7_179)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x10016 (* ?x9427 l_0_7_158)))
 (let ((?x9218 (* 2.0 l_0_7_127)))
 (let ((?x9700 (* ?x9218 l_0_7_142)))
 (let ((?x10007 (- (* (* 2.0 l_0_7_106) l_0_7_116) (* (* 2.0 l_0_7_11) l_0_7_16))))
 (let ((?x10012 (- (- (- ?x10007 (* (* 2.0 l_0_7_12) l_0_7_17)) ?x9700) (* (* 2.0 l_0_7_13) l_0_7_18))))
 (let ((?x10020 (- (+ (- ?x10012 (* (* 2.0 l_0_7_14) l_0_7_19)) ?x10016) (* (* 2.0 l_0_7_15) l_0_7_20))))
 (let ((?x10028 (+ (+ (- ?x10020 ?x10021) (* (* 2.0 l_0_7_32) l_0_7_37)) (* (* 2.0 l_0_7_33) l_0_7_38))))
 (let ((?x10034 (+ (+ ?x10028 (* (* 2.0 l_0_7_34) l_0_7_39)) (* (* 2.0 l_0_7_35) l_0_7_40))))
 (= (- (+ ?x10034 (* (* 2.0 l_0_7_36) l_0_7_41)) ?x10038) 0.0)))))))))))))))
(assert
 (let ((?x10142 (* l_0_7_42 l_0_7_42)))
 (let ((?x10140 (* l_0_7_41 l_0_7_41)))
 (let ((?x10138 (* l_0_7_40 l_0_7_40)))
 (let ((?x10136 (* l_0_7_39 l_0_7_39)))
 (let ((?x10134 (* l_0_7_38 l_0_7_38)))
 (let ((?x10132 (* l_0_7_37 l_0_7_37)))
 (let ((?x10130 (* l_0_7_21 l_0_7_21)))
 (let ((?x10128 (* l_0_7_20 l_0_7_20)))
 (let ((?x10126 (* l_0_7_19 l_0_7_19)))
 (let ((?x10124 (* l_0_7_18 l_0_7_18)))
 (let ((?x10122 (* l_0_7_17 l_0_7_17)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x10120 (* ?x9433 l_0_7_184)))
 (let ((?x10118 (* l_0_7_16 l_0_7_16)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x10116 (* ?x9427 l_0_7_163)))
 (let ((?x9424 (* 2.0 l_0_7_106)))
 (let ((?x10114 (* ?x9424 l_0_7_121)))
 (let ((?x10121 (- (- (+ (+ (* (* (- 2.0) l_0_7_100) l_0_7_85) ?x10114) ?x10116) ?x10118) ?x10120)))
 (let ((?x10135 (+ (+ (- (- (- (- (- ?x10121 ?x10122) ?x10124) ?x10126) ?x10128) ?x10130) ?x10132) ?x10134)))
 (= (+ (+ (+ (+ ?x10135 ?x10136) ?x10138) ?x10140) ?x10142) 0.0))))))))))))))))))))))
(assert
 (let ((?x8875 (* l_0_7_66 l_0_7_66)))
 (let ((?x9009 (* 3.0 ?x8875)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10239 (* ?x10238 l_0_7_68)))
 (let ((?x8872 (* l_0_7_65 l_0_7_65)))
 (let ((?x9004 (* 3.0 ?x8872)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10235 (* ?x10234 l_0_7_67)))
 (let ((?x9527 (* l_0_7_6 l_0_7_6)))
 (let ((?x10232 (* 6.0 ?x9527)))
 (let ((?x9525 (* l_0_7_5 l_0_7_5)))
 (let ((?x10230 (* 6.0 ?x9525)))
 (let ((?x8999 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10218 (* ?x10217 l_0_7_47)))
 (let ((?x8993 (* (* 3.0 l_0_7_44) l_0_7_44)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10214 (* ?x10213 l_0_7_46)))
 (let ((?x9520 (* l_0_7_4 l_0_7_4)))
 (let ((?x10211 (* 6.0 ?x9520)))
 (let ((?x8985 (* 12.0 l_0_7_3)))
 (let ((?x8986 (* ?x8985 l_0_7_5)))
 (let ((?x10208 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x10205 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x10202 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x8982 (* ?x8981 l_0_7_26)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x8978 (* ?x8977 l_0_7_25)))
 (let ((?x8973 (* 12.0 l_0_7_2)))
 (let ((?x8974 (* ?x8973 l_0_7_4)))
 (let ((?x10196 (* l_0_7_195 l_0_7_195)))
 (let ((?x10194 (* l_0_7_194 l_0_7_194)))
 (let ((?x10192 (* l_0_7_193 l_0_7_193)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10190 (* ?x10189 l_0_7_131)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10188 (* ?x10176 l_0_7_130)))
 (let ((?x10200 (- (- (+ (- (- (- (+ ?x10188 ?x10190) ?x10192) ?x10194) ?x10196) ?x8974) ?x8978) ?x8982)))
 (let ((?x10216 (- (- (+ (+ (- (- (- ?x10200 ?x10202) ?x10205) ?x10208) ?x8986) ?x10211) ?x10214) ?x8993)))
 (let ((?x10226 (- (- (- (- ?x10216 ?x10218) ?x8999) (* (* 1.0 l_0_7_46) l_0_7_46)) (* (* 1.0 l_0_7_47) l_0_7_47))))
 (let ((?x10236 (+ (+ (+ (- ?x10226 (* (* 1.0 l_0_7_48) l_0_7_48)) ?x10230) ?x10232) ?x10235)))
 (let ((?x10244 (+ (+ (+ (+ ?x10236 ?x9004) ?x10239) ?x9009) (* 1.0 (* l_0_7_67 l_0_7_67)))))
 (let ((?x10250 (+ (+ ?x10244 (* 1.0 (* l_0_7_68 l_0_7_68))) (* 1.0 (* l_0_7_69 l_0_7_69)))))
 (= ?x10250 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10383 (* ?x10382 l_0_7_72)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10380 (* ?x10379 l_0_7_71)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10377 (* ?x10376 l_0_7_70)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10374 (* ?x10238 l_0_7_71)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x9007 (* ?x9006 l_0_7_68)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10371 (* ?x10234 l_0_7_70)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x9002 (* ?x9001 l_0_7_67)))
 (let ((?x10368 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x10365 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10362 (* ?x10361 l_0_7_51)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10359 (* ?x10358 l_0_7_50)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10356 (* ?x10355 l_0_7_49)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10353 (* ?x10217 l_0_7_50)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x8996 (* ?x8995 l_0_7_47)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10350 (* ?x10213 l_0_7_49)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x8990 (* ?x8989 l_0_7_46)))
 (let ((?x10347 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x8985 (* 12.0 l_0_7_3)))
 (let ((?x10344 (* ?x8985 l_0_7_8)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10342 (* ?x10341 l_0_7_30)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10339 (* ?x10338 l_0_7_29)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10336 (* ?x10335 l_0_7_28)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10333 (* ?x8981 l_0_7_29)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10331 (* ?x8977 l_0_7_28)))
 (let ((?x8973 (* 12.0 l_0_7_2)))
 (let ((?x10329 (* ?x8973 l_0_7_7)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10318 (* ?x10189 l_0_7_134)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10317 (* ?x10176 l_0_7_133)))
 (let ((?x10325 (- (- (+ ?x10317 ?x10318) (* (* 2.0 l_0_7_193) l_0_7_196)) (* (* 2.0 l_0_7_194) l_0_7_197))))
 (let ((?x10334 (- (- (+ (- ?x10325 (* (* 2.0 l_0_7_195) l_0_7_198)) ?x10329) ?x10331) ?x10333)))
 (let ((?x10351 (- (+ (+ (+ (- (- (- ?x10334 ?x10336) ?x10339) ?x10342) ?x10344) ?x10347) ?x8990) ?x10350)))
 (let ((?x10369 (+ (+ (- (- (- (- (+ ?x10351 ?x8996) ?x10353) ?x10356) ?x10359) ?x10362) ?x10365) ?x10368)))
 (let ((?x10384 (+ (+ (+ (+ (- (+ (- ?x10369 ?x9002) ?x10371) ?x9007) ?x10374) ?x10377) ?x10380) ?x10383)))
 (= ?x10384 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10546 (* ?x10382 l_0_7_76)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10544 (* ?x10379 l_0_7_75)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10542 (* ?x10376 l_0_7_74)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10540 (* ?x10238 l_0_7_75)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10538 (* ?x10234 l_0_7_74)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10536 (* ?x10361 l_0_7_55)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10534 (* ?x10358 l_0_7_54)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10532 (* ?x10355 l_0_7_53)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10530 (* ?x10217 l_0_7_54)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10528 (* ?x10213 l_0_7_53)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10526 (* ?x10341 l_0_7_34)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10524 (* ?x10338 l_0_7_33)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10522 (* ?x10335 l_0_7_32)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10520 (* ?x8981 l_0_7_33)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10518 (* ?x8977 l_0_7_32)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x10510 (* ?x10509 l_0_7_6)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10507 (* ?x10189 l_0_7_138)))
 (let ((?x10190 (* ?x10189 l_0_7_131)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10504 (* ?x10176 l_0_7_137)))
 (let ((?x10188 (* ?x10176 l_0_7_130)))
 (let ((?x10498 (* 12.0 l_0_7_12)))
 (let ((?x10501 (* ?x10498 l_0_7_5)))
 (let ((?x10499 (* ?x10498 l_0_7_3)))
 (let ((?x10494 (* 12.0 l_0_7_11)))
 (let ((?x10496 (* ?x10494 l_0_7_4)))
 (let ((?x10495 (* ?x10494 l_0_7_2)))
 (let ((?x10508 (+ (- (+ (- (+ (+ (+ ?x10495 ?x10496) ?x10499) ?x10501) ?x10188) ?x10504) ?x10190) ?x10507)))
 (let ((?x10515 (- (- (+ ?x10508 ?x10510) (* (* 2.0 l_0_7_193) l_0_7_200)) (* (* 2.0 l_0_7_194) l_0_7_201))))
 (let ((?x10523 (- (- (- (- ?x10515 (* (* 2.0 l_0_7_195) l_0_7_202)) ?x10518) ?x10520) ?x10522)))
 (let ((?x10537 (- (- (- (- (- (- (- ?x10523 ?x10524) ?x10526) ?x10528) ?x10530) ?x10532) ?x10534) ?x10536)))
 (= (+ (+ (+ (+ (+ ?x10537 ?x10538) ?x10540) ?x10542) ?x10544) ?x10546) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x10728 (* ?x10727 l_0_7_89)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x10725 (* ?x10724 l_0_7_88)))
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10722 (* ?x10382 l_0_7_81)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10720 (* ?x10379 l_0_7_80)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10718 (* ?x10376 l_0_7_79)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10716 (* ?x10238 l_0_7_80)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10714 (* ?x10234 l_0_7_79)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10712 (* ?x10361 l_0_7_60)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10710 (* ?x10358 l_0_7_59)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10708 (* ?x10355 l_0_7_58)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10706 (* ?x10217 l_0_7_59)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10704 (* ?x10213 l_0_7_58)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10702 (* ?x10341 l_0_7_39)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10700 (* ?x10338 l_0_7_38)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10698 (* ?x10335 l_0_7_37)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10696 (* ?x8981 l_0_7_38)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10694 (* ?x8977 l_0_7_37)))
 (let ((?x10685 (* 12.0 l_0_7_18)))
 (let ((?x10686 (* ?x10685 l_0_7_6)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x10683 (* ?x10682 l_0_7_173)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x10680 (* ?x10679 l_0_7_172)))
 (let ((?x10674 (* 12.0 l_0_7_17)))
 (let ((?x10677 (* ?x10674 l_0_7_5)))
 (let ((?x10675 (* ?x10674 l_0_7_3)))
 (let ((?x10669 (* 12.0 l_0_7_16)))
 (let ((?x10672 (* ?x10669 l_0_7_4)))
 (let ((?x10670 (* ?x10669 l_0_7_2)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x10667 (* ?x10666 l_0_7_152)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x10664 (* ?x10663 l_0_7_151)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10661 (* ?x10189 l_0_7_143)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10659 (* ?x10176 l_0_7_142)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x10657 (* ?x10656 l_0_7_110)))
 (let ((?x10665 (+ (+ (+ (+ (* (* 2.0 l_0_7_107) l_0_7_109) ?x10657) ?x10659) ?x10661) ?x10664)))
 (let ((?x10684 (- (- (+ (+ (+ (+ (+ ?x10665 ?x10667) ?x10670) ?x10672) ?x10675) ?x10677) ?x10680) ?x10683)))
 (let ((?x10691 (- (- (+ ?x10684 ?x10686) (* (* 2.0 l_0_7_193) l_0_7_205)) (* (* 2.0 l_0_7_194) l_0_7_206))))
 (let ((?x10699 (- (- (- (- ?x10691 (* (* 2.0 l_0_7_195) l_0_7_207)) ?x10694) ?x10696) ?x10698)))
 (let ((?x10713 (- (- (- (- (- (- (- ?x10699 ?x10700) ?x10702) ?x10704) ?x10706) ?x10708) ?x10710) ?x10712)))
 (let ((?x10729 (- (- (+ (+ (+ (+ (+ ?x10713 ?x10714) ?x10716) ?x10718) ?x10720) ?x10722) ?x10725) ?x10728)))
 (= ?x10729 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10904 (* l_0_7_87 l_0_7_87)))
 (let ((?x10902 (* l_0_7_86 l_0_7_86)))
 (let ((?x10248 (* l_0_7_69 l_0_7_69)))
 (let ((?x10900 (* 3.0 ?x10248)))
 (let ((?x10245 (* l_0_7_68 l_0_7_68)))
 (let ((?x10898 (* 3.0 ?x10245)))
 (let ((?x10242 (* l_0_7_67 l_0_7_67)))
 (let ((?x10896 (* 3.0 ?x10242)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10239 (* ?x10238 l_0_7_68)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10235 (* ?x10234 l_0_7_67)))
 (let ((?x9527 (* l_0_7_6 l_0_7_6)))
 (let ((?x10232 (* 6.0 ?x9527)))
 (let ((?x9525 (* l_0_7_5 l_0_7_5)))
 (let ((?x10230 (* 6.0 ?x9525)))
 (let ((?x10890 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x10887 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x10884 (* (* 3.0 l_0_7_46) l_0_7_46)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10218 (* ?x10217 l_0_7_47)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10214 (* ?x10213 l_0_7_46)))
 (let ((?x9520 (* l_0_7_4 l_0_7_4)))
 (let ((?x10211 (* 6.0 ?x9520)))
 (let ((?x10208 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x10205 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x10202 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x10875 (* l_0_7_171 l_0_7_171)))
 (let ((?x10873 (* l_0_7_170 l_0_7_170)))
 (let ((?x10871 (* l_0_7_150 l_0_7_150)))
 (let ((?x10869 (* l_0_7_149 l_0_7_149)))
 (let ((?x10867 (* l_0_7_132 l_0_7_132)))
 (let ((?x10865 (* l_0_7_131 l_0_7_131)))
 (let ((?x10863 (* l_0_7_130 l_0_7_130)))
 (let ((?x10864 (+ (- (* (- l_0_7_107) l_0_7_107) (* l_0_7_108 l_0_7_108)) ?x10863)))
 (let ((?x10877 (- (+ (+ (- (- (+ (+ ?x10864 ?x10865) ?x10867) ?x10869) ?x10871) ?x10873) ?x10875) ?x10202)))
 (let ((?x10888 (- (- (- (- (+ (- (- ?x10877 ?x10205) ?x10208) ?x10211) ?x10214) ?x10218) ?x10884) ?x10887)))
 (let ((?x10899 (+ (+ (+ (+ (+ (+ (- ?x10888 ?x10890) ?x10230) ?x10232) ?x10235) ?x10239) ?x10896) ?x10898)))
 (= (+ (+ (+ ?x10899 ?x10900) ?x10902) ?x10904) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10248 (* l_0_7_69 l_0_7_69)))
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11003 (* ?x11002 l_0_7_72)))
 (let ((?x10245 (* l_0_7_68 l_0_7_68)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x10999 (* ?x10998 l_0_7_71)))
 (let ((?x10242 (* l_0_7_67 l_0_7_67)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x10995 (* ?x10994 l_0_7_70)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10374 (* ?x10238 l_0_7_71)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10371 (* ?x10234 l_0_7_70)))
 (let ((?x10368 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x10365 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x10309 (* l_0_7_48 l_0_7_48)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x10987 (* ?x10986 l_0_7_51)))
 (let ((?x10305 (* l_0_7_47 l_0_7_47)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x10983 (* ?x10982 l_0_7_50)))
 (let ((?x10301 (* l_0_7_46 l_0_7_46)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x10979 (* ?x10978 l_0_7_49)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10353 (* ?x10217 l_0_7_50)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10350 (* ?x10213 l_0_7_49)))
 (let ((?x10347 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10342 (* ?x10341 l_0_7_30)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10339 (* ?x10338 l_0_7_29)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10336 (* ?x10335 l_0_7_28)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x10970 (* ?x10969 l_0_7_135)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x10967 (* ?x10966 l_0_7_134)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x10965 (* ?x10947 l_0_7_133)))
 (let ((?x10976 (- (+ (- (- (- (+ (+ ?x10965 ?x10967) ?x10970) ?x10336) ?x10339) ?x10342) ?x10347) ?x10350)))
 (let ((?x10989 (+ (- (+ (- (+ (- (- ?x10976 ?x10353) ?x10979) ?x10301) ?x10983) ?x10305) ?x10987) ?x10309)))
 (let ((?x11000 (+ (- (+ (+ (+ (+ (+ ?x10989 ?x10365) ?x10368) ?x10371) ?x10374) ?x10995) ?x10242) ?x10999)))
 (= (- (+ (- ?x11000 ?x10245) ?x11003) ?x10248) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11098 (* ?x11002 l_0_7_76)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x11096 (* ?x10998 l_0_7_75)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x11094 (* ?x10994 l_0_7_74)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10540 (* ?x10238 l_0_7_75)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10538 (* ?x10234 l_0_7_74)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x11090 (* ?x10986 l_0_7_55)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x11088 (* ?x10982 l_0_7_54)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x11086 (* ?x10978 l_0_7_53)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10530 (* ?x10217 l_0_7_54)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10528 (* ?x10213 l_0_7_53)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10526 (* ?x10341 l_0_7_34)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10524 (* ?x10338 l_0_7_33)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10522 (* ?x10335 l_0_7_32)))
 (let ((?x10867 (* l_0_7_132 l_0_7_132)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x11078 (* ?x10969 l_0_7_139)))
 (let ((?x10865 (* l_0_7_131 l_0_7_131)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x11075 (* ?x10966 l_0_7_138)))
 (let ((?x10863 (* l_0_7_130 l_0_7_130)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x11072 (* ?x10947 l_0_7_137)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x10510 (* ?x10509 l_0_7_6)))
 (let ((?x10498 (* 12.0 l_0_7_12)))
 (let ((?x10501 (* ?x10498 l_0_7_5)))
 (let ((?x10494 (* 12.0 l_0_7_11)))
 (let ((?x10496 (* ?x10494 l_0_7_4)))
 (let ((?x11079 (+ (- (+ (- (+ (+ (+ ?x10496 ?x10501) ?x10510) ?x11072) ?x10863) ?x11075) ?x10865) ?x11078)))
 (let ((?x11087 (- (- (- (- (- (- (- ?x11079 ?x10867) ?x10522) ?x10524) ?x10526) ?x10528) ?x10530) ?x11086)))
 (let ((?x11099 (+ (+ (+ (+ (+ (- (- ?x11087 ?x11088) ?x11090) ?x10538) ?x10540) ?x11094) ?x11096) ?x11098)))
 (= ?x11099 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11195 (* l_0_7_90 l_0_7_90)))
 (let ((?x11193 (* l_0_7_89 l_0_7_89)))
 (let ((?x11191 (* l_0_7_88 l_0_7_88)))
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11189 (* ?x11002 l_0_7_81)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x11187 (* ?x10998 l_0_7_80)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x11185 (* ?x10994 l_0_7_79)))
 (let ((?x10238 (* 6.0 l_0_7_66)))
 (let ((?x10716 (* ?x10238 l_0_7_80)))
 (let ((?x10234 (* 6.0 l_0_7_65)))
 (let ((?x10714 (* ?x10234 l_0_7_79)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x11181 (* ?x10986 l_0_7_60)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x11179 (* ?x10982 l_0_7_59)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x11177 (* ?x10978 l_0_7_58)))
 (let ((?x10217 (* 6.0 l_0_7_45)))
 (let ((?x10706 (* ?x10217 l_0_7_59)))
 (let ((?x10213 (* 6.0 l_0_7_44)))
 (let ((?x10704 (* ?x10213 l_0_7_58)))
 (let ((?x10341 (* 12.0 l_0_7_27)))
 (let ((?x10702 (* ?x10341 l_0_7_39)))
 (let ((?x10338 (* 12.0 l_0_7_26)))
 (let ((?x10700 (* ?x10338 l_0_7_38)))
 (let ((?x10335 (* 12.0 l_0_7_25)))
 (let ((?x10698 (* ?x10335 l_0_7_37)))
 (let ((?x10685 (* 12.0 l_0_7_18)))
 (let ((?x10686 (* ?x10685 l_0_7_6)))
 (let ((?x11169 (* l_0_7_174 l_0_7_174)))
 (let ((?x11167 (* l_0_7_173 l_0_7_173)))
 (let ((?x11165 (* l_0_7_172 l_0_7_172)))
 (let ((?x10674 (* 12.0 l_0_7_17)))
 (let ((?x10677 (* ?x10674 l_0_7_5)))
 (let ((?x10669 (* 12.0 l_0_7_16)))
 (let ((?x10672 (* ?x10669 l_0_7_4)))
 (let ((?x11161 (* l_0_7_153 l_0_7_153)))
 (let ((?x11159 (* l_0_7_152 l_0_7_152)))
 (let ((?x11157 (* l_0_7_151 l_0_7_151)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x11155 (* ?x10969 l_0_7_144)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x11153 (* ?x10966 l_0_7_143)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x11151 (* ?x10947 l_0_7_142)))
 (let ((?x11149 (* l_0_7_111 l_0_7_111)))
 (let ((?x11152 (+ (+ (+ (* l_0_7_109 l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x11149) ?x11151)))
 (let ((?x11164 (+ (+ (+ (+ (+ (+ (+ ?x11152 ?x11153) ?x11155) ?x11157) ?x11159) ?x11161) ?x10672) ?x10677)))
 (let ((?x11174 (- (- (- (+ (- (- (- ?x11164 ?x11165) ?x11167) ?x11169) ?x10686) ?x10698) ?x10700) ?x10702)))
 (let ((?x11184 (+ (+ (- (- (- (- (- ?x11174 ?x10704) ?x10706) ?x11177) ?x11179) ?x11181) ?x10714) ?x10716)))
 (= (- (- (- (+ (+ (+ ?x11184 ?x11185) ?x11187) ?x11189) ?x11191) ?x11193) ?x11195) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9797 (* l_0_7_9 l_0_7_9)))
 (let ((?x11309 (* 6.0 ?x9797)))
 (let ((?x9795 (* l_0_7_8 l_0_7_8)))
 (let ((?x11307 (* 6.0 ?x9795)))
 (let ((?x11304 (* l_0_7_73 l_0_7_73)))
 (let ((?x11305 (* 3.0 ?x11304)))
 (let ((?x11301 (* l_0_7_72 l_0_7_72)))
 (let ((?x11302 (* 3.0 ?x11301)))
 (let ((?x11298 (* l_0_7_71 l_0_7_71)))
 (let ((?x11299 (* 3.0 ?x11298)))
 (let ((?x11295 (* l_0_7_70 l_0_7_70)))
 (let ((?x11296 (* 3.0 ?x11295)))
 (let ((?x9793 (* l_0_7_7 l_0_7_7)))
 (let ((?x11293 (* 6.0 ?x9793)))
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10383 (* ?x10382 l_0_7_72)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10380 (* ?x10379 l_0_7_71)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10377 (* ?x10376 l_0_7_70)))
 (let ((?x11288 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x11285 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x11282 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10362 (* ?x10361 l_0_7_51)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10359 (* ?x10358 l_0_7_50)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10356 (* ?x10355 l_0_7_49)))
 (let ((?x11273 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x11270 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x11267 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x11264 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x11261 (* l_0_7_136 l_0_7_136)))
 (let ((?x11259 (* l_0_7_135 l_0_7_135)))
 (let ((?x11257 (* l_0_7_134 l_0_7_134)))
 (let ((?x11258 (+ (+ (* 6.0 (* l_0_7_10 l_0_7_10)) (* l_0_7_133 l_0_7_133)) ?x11257)))
 (let ((?x11275 (+ (- (- (- (- (+ (+ ?x11258 ?x11259) ?x11261) ?x11264) ?x11267) ?x11270) ?x11273) ?x10356)))
 (let ((?x11283 (- (- (+ (+ ?x11275 ?x10359) ?x10362) (* (* 3.0 l_0_7_49) l_0_7_49)) ?x11282)))
 (let ((?x11297 (+ (+ (- (- (- (- (- ?x11283 ?x11285) ?x11288) ?x10377) ?x10380) ?x10383) ?x11293) ?x11296)))
 (= (+ (+ (+ (+ (+ ?x11297 ?x11299) ?x11302) ?x11305) ?x11307) ?x11309) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11446 (* 6.0 l_0_7_73)))
 (let ((?x11447 (* ?x11446 l_0_7_77)))
 (let ((?x11443 (* 6.0 l_0_7_72)))
 (let ((?x11444 (* ?x11443 l_0_7_76)))
 (let ((?x11440 (* 6.0 l_0_7_71)))
 (let ((?x11441 (* ?x11440 l_0_7_75)))
 (let ((?x11437 (* 6.0 l_0_7_70)))
 (let ((?x11438 (* ?x11437 l_0_7_74)))
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10546 (* ?x10382 l_0_7_76)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10544 (* ?x10379 l_0_7_75)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10542 (* ?x10376 l_0_7_74)))
 (let ((?x11431 (* 6.0 l_0_7_52)))
 (let ((?x11432 (* ?x11431 l_0_7_56)))
 (let ((?x11428 (* 6.0 l_0_7_51)))
 (let ((?x11429 (* ?x11428 l_0_7_55)))
 (let ((?x11425 (* 6.0 l_0_7_50)))
 (let ((?x11426 (* ?x11425 l_0_7_54)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10536 (* ?x10361 l_0_7_55)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10534 (* ?x10358 l_0_7_54)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10532 (* ?x10355 l_0_7_53)))
 (let ((?x11416 (* 12.0 l_0_7_31)))
 (let ((?x11417 (* ?x11416 l_0_7_35)))
 (let ((?x11413 (* 12.0 l_0_7_30)))
 (let ((?x11414 (* ?x11413 l_0_7_34)))
 (let ((?x11410 (* 12.0 l_0_7_29)))
 (let ((?x11411 (* ?x11410 l_0_7_33)))
 (let ((?x11407 (* 12.0 l_0_7_28)))
 (let ((?x11408 (* ?x11407 l_0_7_32)))
 (let ((?x11404 (* 2.0 l_0_7_136)))
 (let ((?x11405 (* ?x11404 l_0_7_140)))
 (let ((?x11401 (* 2.0 l_0_7_135)))
 (let ((?x11402 (* ?x11401 l_0_7_139)))
 (let ((?x11398 (* 2.0 l_0_7_134)))
 (let ((?x11399 (* ?x11398 l_0_7_138)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x10970 (* ?x10969 l_0_7_135)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x10967 (* ?x10966 l_0_7_134)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x10965 (* ?x10947 l_0_7_133)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x11390 (* ?x10509 l_0_7_9)))
 (let ((?x11387 (+ (* (* 12.0 l_0_7_10) l_0_7_14) (* (* 12.0 l_0_7_11) l_0_7_7))))
 (let ((?x11389 (+ ?x11387 (* (* 12.0 l_0_7_12) l_0_7_8))))
 (let ((?x11397 (+ (- (- (- (+ ?x11389 ?x11390) ?x10965) ?x10967) ?x10970) (* (* 2.0 l_0_7_133) l_0_7_137))))
 (let ((?x11418 (- (- (- (- (+ (+ (+ ?x11397 ?x11399) ?x11402) ?x11405) ?x11408) ?x11411) ?x11414) ?x11417)))
 (let ((?x11424 (- (+ (+ (+ ?x11418 ?x10532) ?x10534) ?x10536) (* (* 6.0 l_0_7_49) l_0_7_53))))
 (let ((?x11439 (+ (- (- (- (- (- (- ?x11424 ?x11426) ?x11429) ?x11432) ?x10542) ?x10544) ?x10546) ?x11438)))
 (= (+ (+ (+ ?x11439 ?x11441) ?x11444) ?x11447) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11618 (* 2.0 l_0_7_90)))
 (let ((?x11619 (* ?x11618 l_0_7_93)))
 (let ((?x11615 (* 2.0 l_0_7_89)))
 (let ((?x11616 (* ?x11615 l_0_7_92)))
 (let ((?x11612 (* 2.0 l_0_7_88)))
 (let ((?x11613 (* ?x11612 l_0_7_91)))
 (let ((?x11446 (* 6.0 l_0_7_73)))
 (let ((?x11610 (* ?x11446 l_0_7_82)))
 (let ((?x11443 (* 6.0 l_0_7_72)))
 (let ((?x11608 (* ?x11443 l_0_7_81)))
 (let ((?x11440 (* 6.0 l_0_7_71)))
 (let ((?x11606 (* ?x11440 l_0_7_80)))
 (let ((?x11437 (* 6.0 l_0_7_70)))
 (let ((?x11604 (* ?x11437 l_0_7_79)))
 (let ((?x10382 (* 2.0 l_0_7_69)))
 (let ((?x10722 (* ?x10382 l_0_7_81)))
 (let ((?x10379 (* 2.0 l_0_7_68)))
 (let ((?x10720 (* ?x10379 l_0_7_80)))
 (let ((?x10376 (* 2.0 l_0_7_67)))
 (let ((?x10718 (* ?x10376 l_0_7_79)))
 (let ((?x11431 (* 6.0 l_0_7_52)))
 (let ((?x11599 (* ?x11431 l_0_7_61)))
 (let ((?x11428 (* 6.0 l_0_7_51)))
 (let ((?x11597 (* ?x11428 l_0_7_60)))
 (let ((?x11425 (* 6.0 l_0_7_50)))
 (let ((?x11595 (* ?x11425 l_0_7_59)))
 (let ((?x10361 (* 2.0 l_0_7_48)))
 (let ((?x10712 (* ?x10361 l_0_7_60)))
 (let ((?x10358 (* 2.0 l_0_7_47)))
 (let ((?x10710 (* ?x10358 l_0_7_59)))
 (let ((?x10355 (* 2.0 l_0_7_46)))
 (let ((?x10708 (* ?x10355 l_0_7_58)))
 (let ((?x11416 (* 12.0 l_0_7_31)))
 (let ((?x11588 (* ?x11416 l_0_7_40)))
 (let ((?x11413 (* 12.0 l_0_7_30)))
 (let ((?x11586 (* ?x11413 l_0_7_39)))
 (let ((?x11410 (* 12.0 l_0_7_29)))
 (let ((?x11584 (* ?x11410 l_0_7_38)))
 (let ((?x11407 (* 12.0 l_0_7_28)))
 (let ((?x11582 (* ?x11407 l_0_7_37)))
 (let ((?x10685 (* 12.0 l_0_7_18)))
 (let ((?x11580 (* ?x10685 l_0_7_9)))
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x11578 (* ?x11577 l_0_7_177)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x11575 (* ?x11574 l_0_7_176)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x11572 (* ?x11571 l_0_7_175)))
 (let ((?x10674 (* 12.0 l_0_7_17)))
 (let ((?x11569 (* ?x10674 l_0_7_8)))
 (let ((?x10669 (* 12.0 l_0_7_16)))
 (let ((?x11567 (* ?x10669 l_0_7_7)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x11565 (* ?x11564 l_0_7_156)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x11562 (* ?x11561 l_0_7_155)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x11559 (* ?x11558 l_0_7_154)))
 (let ((?x11404 (* 2.0 l_0_7_136)))
 (let ((?x11556 (* ?x11404 l_0_7_145)))
 (let ((?x11401 (* 2.0 l_0_7_135)))
 (let ((?x11554 (* ?x11401 l_0_7_144)))
 (let ((?x11398 (* 2.0 l_0_7_134)))
 (let ((?x11552 (* ?x11398 l_0_7_143)))
 (let ((?x11395 (* 2.0 l_0_7_133)))
 (let ((?x11550 (* ?x11395 l_0_7_142)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x11548 (* ?x11547 l_0_7_114)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x11545 (* ?x11544 l_0_7_113)))
 (let ((?x11370 (* 12.0 l_0_7_10)))
 (let ((?x11540 (* ?x11370 l_0_7_19)))
 (let ((?x11551 (+ (+ (+ (+ ?x11540 (* (* 2.0 l_0_7_109) l_0_7_112)) ?x11545) ?x11548) ?x11550)))
 (let ((?x11568 (+ (+ (+ (+ (+ (+ (+ ?x11551 ?x11552) ?x11554) ?x11556) ?x11559) ?x11562) ?x11565) ?x11567)))
 (let ((?x11585 (- (- (+ (- (- (- (+ ?x11568 ?x11569) ?x11572) ?x11575) ?x11578) ?x11580) ?x11582) ?x11584)))
 (let ((?x11594 (- (+ (+ (+ (- (- ?x11585 ?x11586) ?x11588) ?x10708) ?x10710) ?x10712) (* (* 6.0 l_0_7_49) l_0_7_58))))
 (let ((?x11605 (+ (- (- (- (- (- (- ?x11594 ?x11595) ?x11597) ?x11599) ?x10718) ?x10720) ?x10722) ?x11604)))
 (= (- (- (- (+ (+ (+ ?x11605 ?x11606) ?x11608) ?x11610) ?x11613) ?x11616) ?x11619) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11815 (* l_0_7_78 l_0_7_78)))
 (let ((?x11816 (* 3.0 ?x11815)))
 (let ((?x11812 (* l_0_7_77 l_0_7_77)))
 (let ((?x11813 (* 3.0 ?x11812)))
 (let ((?x11809 (* l_0_7_76 l_0_7_76)))
 (let ((?x11810 (* 3.0 ?x11809)))
 (let ((?x11806 (* l_0_7_75 l_0_7_75)))
 (let ((?x11807 (* 3.0 ?x11806)))
 (let ((?x11803 (* l_0_7_74 l_0_7_74)))
 (let ((?x11804 (* 3.0 ?x11803)))
 (let ((?x11801 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x11798 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x11795 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x11792 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x11786 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x11783 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x11780 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x11777 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x11774 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x9966 (* l_0_7_15 l_0_7_15)))
 (let ((?x11771 (* 6.0 ?x9966)))
 (let ((?x11769 (* l_0_7_141 l_0_7_141)))
 (let ((?x11767 (* l_0_7_140 l_0_7_140)))
 (let ((?x9964 (* l_0_7_14 l_0_7_14)))
 (let ((?x11765 (* 6.0 ?x9964)))
 (let ((?x11763 (* l_0_7_139 l_0_7_139)))
 (let ((?x11761 (* l_0_7_138 l_0_7_138)))
 (let ((?x11759 (* l_0_7_137 l_0_7_137)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x11078 (* ?x10969 l_0_7_139)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x11075 (* ?x10966 l_0_7_138)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x11072 (* ?x10947 l_0_7_137)))
 (let ((?x9962 (* l_0_7_13 l_0_7_13)))
 (let ((?x11754 (* 6.0 ?x9962)))
 (let ((?x9959 (* l_0_7_12 l_0_7_12)))
 (let ((?x11752 (* 6.0 ?x9959)))
 (let ((?x9980 (* l_0_7_11 l_0_7_11)))
 (let ((?x11751 (* 6.0 ?x9980)))
 (let ((?x11753 (+ ?x11751 ?x11752)))
 (let ((?x11764 (+ (+ (+ (- (- (- (+ ?x11753 ?x11754) ?x11072) ?x11075) ?x11078) ?x11759) ?x11761) ?x11763)))
 (let ((?x11781 (- (- (- (+ (+ (+ (+ ?x11764 ?x11765) ?x11767) ?x11769) ?x11771) ?x11774) ?x11777) ?x11780)))
 (let ((?x11793 (- (- (- (- ?x11781 ?x11783) ?x11786) (* (* 3.0 l_0_7_53) l_0_7_53)) ?x11792)))
 (let ((?x11814 (+ (+ (+ (+ (- (- (- ?x11793 ?x11795) ?x11798) ?x11801) ?x11804) ?x11807) ?x11810) ?x11813)))
 (= (+ ?x11814 ?x11816) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11618 (* 2.0 l_0_7_90)))
 (let ((?x11986 (* ?x11618 l_0_7_97)))
 (let ((?x11615 (* 2.0 l_0_7_89)))
 (let ((?x11984 (* ?x11615 l_0_7_96)))
 (let ((?x11612 (* 2.0 l_0_7_88)))
 (let ((?x11982 (* ?x11612 l_0_7_95)))
 (let ((?x11980 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x11977 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x11974 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x11971 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x11968 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x11965 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x11962 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x11959 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x11956 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x11950 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x11947 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x11944 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x11941 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x11938 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x11935 (* ?x11577 l_0_7_181)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x11933 (* ?x11574 l_0_7_180)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x11931 (* ?x11571 l_0_7_179)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x11929 (* ?x11564 l_0_7_160)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x11927 (* ?x11561 l_0_7_159)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x11925 (* ?x11558 l_0_7_158)))
 (let ((?x11923 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x11920 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x11917 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x11914 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x11911 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x11908 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x11905 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x10969 (* 2.0 l_0_7_132)))
 (let ((?x11155 (* ?x10969 l_0_7_144)))
 (let ((?x10966 (* 2.0 l_0_7_131)))
 (let ((?x11153 (* ?x10966 l_0_7_143)))
 (let ((?x10947 (* 2.0 l_0_7_130)))
 (let ((?x11151 (* ?x10947 l_0_7_142)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x11899 (* ?x10509 l_0_7_18)))
 (let ((?x10498 (* 12.0 l_0_7_12)))
 (let ((?x11897 (* ?x10498 l_0_7_17)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x11895 (* ?x11547 l_0_7_118)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x11893 (* ?x11544 l_0_7_117)))
 (let ((?x10494 (* 12.0 l_0_7_11)))
 (let ((?x11891 (* ?x10494 l_0_7_16)))
 (let ((?x11898 (+ (+ (+ (+ (* (* 2.0 l_0_7_109) l_0_7_116) ?x11891) ?x11893) ?x11895) ?x11897)))
 (let ((?x11912 (+ (+ (+ (- (- (- (+ ?x11898 ?x11899) ?x11151) ?x11153) ?x11155) ?x11905) ?x11908) ?x11911)))
 (let ((?x11930 (+ (+ (+ (+ (+ (+ (+ ?x11912 ?x11914) ?x11917) ?x11920) ?x11923) ?x11925) ?x11927) ?x11929)))
 (let ((?x11948 (- (- (- (- (- (- (- ?x11930 ?x11931) ?x11933) ?x11935) ?x11938) ?x11941) ?x11944) ?x11947)))
 (let ((?x11960 (- (- (- (- ?x11948 ?x11950) (* (* 6.0 l_0_7_53) l_0_7_58)) ?x11956) ?x11959)))
 (let ((?x11981 (+ (+ (+ (+ (+ (- (- ?x11960 ?x11962) ?x11965) ?x11968) ?x11971) ?x11974) ?x11977) ?x11980)))
 (= (- (- (- ?x11981 ?x11982) ?x11984) ?x11986) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12233 (* l_0_7_84 l_0_7_84)))
 (let ((?x12234 (* 3.0 ?x12233)))
 (let ((?x12230 (* l_0_7_83 l_0_7_83)))
 (let ((?x12231 (* 3.0 ?x12230)))
 (let ((?x12227 (* l_0_7_82 l_0_7_82)))
 (let ((?x12228 (* 3.0 ?x12227)))
 (let ((?x12224 (* l_0_7_81 l_0_7_81)))
 (let ((?x12225 (* 3.0 ?x12224)))
 (let ((?x12221 (* l_0_7_80 l_0_7_80)))
 (let ((?x12222 (* 3.0 ?x12221)))
 (let ((?x12218 (* l_0_7_79 l_0_7_79)))
 (let ((?x12219 (* 3.0 ?x12218)))
 (let ((?x12216 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12213 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12210 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12207 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12204 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x12198 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x12195 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x12192 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x12189 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x12186 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x12183 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x10130 (* l_0_7_21 l_0_7_21)))
 (let ((?x12180 (* 6.0 ?x10130)))
 (let ((?x10128 (* l_0_7_20 l_0_7_20)))
 (let ((?x12178 (* 6.0 ?x10128)))
 (let ((?x10126 (* l_0_7_19 l_0_7_19)))
 (let ((?x12176 (* 6.0 ?x10126)))
 (let ((?x10124 (* l_0_7_18 l_0_7_18)))
 (let ((?x12174 (* 6.0 ?x10124)))
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x12172 (* ?x11577 l_0_7_186)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x12170 (* ?x11574 l_0_7_185)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x12168 (* ?x11571 l_0_7_184)))
 (let ((?x10122 (* l_0_7_17 l_0_7_17)))
 (let ((?x12166 (* 6.0 ?x10122)))
 (let ((?x10118 (* l_0_7_16 l_0_7_16)))
 (let ((?x12164 (* 6.0 ?x10118)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x12162 (* ?x11564 l_0_7_165)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x12160 (* ?x11561 l_0_7_164)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x12158 (* ?x11558 l_0_7_163)))
 (let ((?x12156 (* l_0_7_147 l_0_7_147)))
 (let ((?x12154 (* l_0_7_146 l_0_7_146)))
 (let ((?x12152 (* l_0_7_145 l_0_7_145)))
 (let ((?x12150 (* l_0_7_144 l_0_7_144)))
 (let ((?x12148 (* l_0_7_143 l_0_7_143)))
 (let ((?x12146 (* l_0_7_142 l_0_7_142)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x12144 (* ?x11547 l_0_7_123)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x12142 (* ?x11544 l_0_7_122)))
 (let ((?x11541 (* 2.0 l_0_7_109)))
 (let ((?x12140 (* ?x11541 l_0_7_121)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x12138 (* ?x12137 l_0_7_90)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x12135 (* ?x12134 l_0_7_89)))
 (let ((?x12143 (+ (+ (- (- (* (* (- 2.0) l_0_7_100) l_0_7_88) ?x12135) ?x12138) ?x12140) ?x12142)))
 (let ((?x12157 (+ (+ (+ (+ (+ (+ (+ ?x12143 ?x12144) ?x12146) ?x12148) ?x12150) ?x12152) ?x12154) ?x12156)))
 (let ((?x12171 (- (- (+ (+ (+ (+ (+ ?x12157 ?x12158) ?x12160) ?x12162) ?x12164) ?x12166) ?x12168) ?x12170)))
 (let ((?x12187 (- (- (+ (+ (+ (+ (- ?x12171 ?x12172) ?x12174) ?x12176) ?x12178) ?x12180) ?x12183) ?x12186)))
 (let ((?x12202 (- (- (- (- (- ?x12187 ?x12189) ?x12192) ?x12195) ?x12198) (* (* 3.0 l_0_7_58) l_0_7_58))))
 (let ((?x12223 (+ (+ (- (- (- (- (- ?x12202 ?x12204) ?x12207) ?x12210) ?x12213) ?x12216) ?x12219) ?x12222)))
 (= (+ (+ (+ (+ ?x12223 ?x12225) ?x12228) ?x12231) ?x12234) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x8875 (* l_0_7_66 l_0_7_66)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12368 (* ?x9006 l_0_7_71)))
 (let ((?x8872 (* l_0_7_65 l_0_7_65)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12365 (* ?x9001 l_0_7_70)))
 (let ((?x8903 (* l_0_7_45 l_0_7_45)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12362 (* ?x8995 l_0_7_50)))
 (let ((?x8899 (* l_0_7_44 l_0_7_44)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12359 (* ?x8989 l_0_7_49)))
 (let ((?x8985 (* 12.0 l_0_7_3)))
 (let ((?x10344 (* ?x8985 l_0_7_8)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10333 (* ?x8981 l_0_7_29)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10331 (* ?x8977 l_0_7_28)))
 (let ((?x8973 (* 12.0 l_0_7_2)))
 (let ((?x10329 (* ?x8973 l_0_7_7)))
 (let ((?x12354 (- (* (* (- 2.0) l_0_7_191) l_0_7_196) (* (* 2.0 l_0_7_192) l_0_7_197))))
 (let ((?x12363 (- (+ (- (+ (- (- (+ ?x12354 ?x10329) ?x10331) ?x10333) ?x10344) ?x12359) ?x8899) ?x12362)))
 (= (- (+ (- (+ (+ ?x12363 ?x8903) ?x12365) ?x8872) ?x12368) ?x8875) 0.0))))))))))))))))))))))))
(assert
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12429 (* ?x9006 l_0_7_75)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12427 (* ?x9001 l_0_7_74)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12425 (* ?x8995 l_0_7_54)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12423 (* ?x8989 l_0_7_53)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10520 (* ?x8981 l_0_7_33)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10518 (* ?x8977 l_0_7_32)))
 (let ((?x8965 (* l_0_7_129 l_0_7_129)))
 (let ((?x8964 (* l_0_7_128 l_0_7_128)))
 (let ((?x10498 (* 12.0 l_0_7_12)))
 (let ((?x10499 (* ?x10498 l_0_7_3)))
 (let ((?x10494 (* 12.0 l_0_7_11)))
 (let ((?x10495 (* ?x10494 l_0_7_2)))
 (let ((?x12418 (- (- (- (+ ?x10495 ?x10499) ?x8964) ?x8965) (* (* 2.0 l_0_7_191) l_0_7_200))))
 (let ((?x12424 (- (- (- (- ?x12418 (* (* 2.0 l_0_7_192) l_0_7_201)) ?x10518) ?x10520) ?x12423)))
 (= (+ (+ (- ?x12424 ?x12425) ?x12427) ?x12429) 0.0))))))))))))))))))))))
(assert
 (let ((?x10904 (* l_0_7_87 l_0_7_87)))
 (let ((?x10902 (* l_0_7_86 l_0_7_86)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12490 (* ?x9006 l_0_7_80)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12488 (* ?x9001 l_0_7_79)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12486 (* ?x8995 l_0_7_59)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12484 (* ?x8989 l_0_7_58)))
 (let ((?x8981 (* 12.0 l_0_7_24)))
 (let ((?x10696 (* ?x8981 l_0_7_38)))
 (let ((?x8977 (* 12.0 l_0_7_23)))
 (let ((?x10694 (* ?x8977 l_0_7_37)))
 (let ((?x10875 (* l_0_7_171 l_0_7_171)))
 (let ((?x10873 (* l_0_7_170 l_0_7_170)))
 (let ((?x10674 (* 12.0 l_0_7_17)))
 (let ((?x10675 (* ?x10674 l_0_7_3)))
 (let ((?x10669 (* 12.0 l_0_7_16)))
 (let ((?x10670 (* ?x10669 l_0_7_2)))
 (let ((?x10871 (* l_0_7_150 l_0_7_150)))
 (let ((?x10869 (* l_0_7_149 l_0_7_149)))
 (let ((?x12467 (+ (+ (+ (* l_0_7_107 l_0_7_107) (* l_0_7_108 l_0_7_108)) ?x10869) ?x10871)))
 (let ((?x12479 (- (- (- (+ (+ ?x12467 ?x10670) ?x10675) ?x10873) ?x10875) (* (* 2.0 l_0_7_191) l_0_7_205))))
 (let ((?x12485 (- (- (- (- ?x12479 (* (* 2.0 l_0_7_192) l_0_7_206)) ?x10694) ?x10696) ?x12484)))
 (= (- (- (+ (+ (- ?x12485 ?x12486) ?x12488) ?x12490) ?x10902) ?x10904) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x9797 (* l_0_7_9 l_0_7_9)))
 (let ((?x11309 (* 6.0 ?x9797)))
 (let ((?x9795 (* l_0_7_8 l_0_7_8)))
 (let ((?x11307 (* 6.0 ?x9795)))
 (let ((?x9793 (* l_0_7_7 l_0_7_7)))
 (let ((?x11293 (* 6.0 ?x9793)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12368 (* ?x9006 l_0_7_71)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12365 (* ?x9001 l_0_7_70)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12362 (* ?x8995 l_0_7_50)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12359 (* ?x8989 l_0_7_49)))
 (let ((?x11273 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x11270 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x11267 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x11264 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x12540 (* l_0_7_199 l_0_7_199)))
 (let ((?x12538 (* l_0_7_198 l_0_7_198)))
 (let ((?x12536 (* l_0_7_197 l_0_7_197)))
 (let ((?x12537 (- (- (* 6.0 (* l_0_7_10 l_0_7_10)) (* l_0_7_196 l_0_7_196)) ?x12536)))
 (let ((?x12546 (+ (- (- (- (- (- (- ?x12537 ?x12538) ?x12540) ?x11264) ?x11267) ?x11270) ?x11273) ?x12359)))
 (let ((?x12553 (- (- (+ ?x12546 ?x12362) (* (* 1.0 l_0_7_49) l_0_7_49)) (* (* 1.0 l_0_7_50) l_0_7_50))))
 (let ((?x12559 (- (- ?x12553 (* (* 1.0 l_0_7_51) l_0_7_51)) (* (* 1.0 l_0_7_52) l_0_7_52))))
 (let ((?x12564 (+ (+ (- (- ?x12559 ?x12365) ?x12368) ?x11293) (* 1.0 (* l_0_7_70 l_0_7_70)))))
 (let ((?x12568 (+ (+ ?x12564 (* 1.0 (* l_0_7_71 l_0_7_71))) (* 1.0 (* l_0_7_72 l_0_7_72)))))
 (= (+ (+ (+ ?x12568 (* 1.0 (* l_0_7_73 l_0_7_73))) ?x11307) ?x11309) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x12662 (* 2.0 l_0_7_73)))
 (let ((?x12663 (* ?x12662 l_0_7_77)))
 (let ((?x12659 (* 2.0 l_0_7_72)))
 (let ((?x12660 (* ?x12659 l_0_7_76)))
 (let ((?x12656 (* 2.0 l_0_7_71)))
 (let ((?x12657 (* ?x12656 l_0_7_75)))
 (let ((?x12653 (* 2.0 l_0_7_70)))
 (let ((?x12654 (* ?x12653 l_0_7_74)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12429 (* ?x9006 l_0_7_75)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12427 (* ?x9001 l_0_7_74)))
 (let ((?x12648 (* 2.0 l_0_7_52)))
 (let ((?x12649 (* ?x12648 l_0_7_56)))
 (let ((?x12645 (* 2.0 l_0_7_51)))
 (let ((?x12646 (* ?x12645 l_0_7_55)))
 (let ((?x12642 (* 2.0 l_0_7_50)))
 (let ((?x12643 (* ?x12642 l_0_7_54)))
 (let ((?x12639 (* 2.0 l_0_7_49)))
 (let ((?x12640 (* ?x12639 l_0_7_53)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12425 (* ?x8995 l_0_7_54)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12423 (* ?x8989 l_0_7_53)))
 (let ((?x11416 (* 12.0 l_0_7_31)))
 (let ((?x11417 (* ?x11416 l_0_7_35)))
 (let ((?x11413 (* 12.0 l_0_7_30)))
 (let ((?x11414 (* ?x11413 l_0_7_34)))
 (let ((?x11410 (* 12.0 l_0_7_29)))
 (let ((?x11411 (* ?x11410 l_0_7_33)))
 (let ((?x11407 (* 12.0 l_0_7_28)))
 (let ((?x11408 (* ?x11407 l_0_7_32)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x11390 (* ?x10509 l_0_7_9)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10318 (* ?x10189 l_0_7_134)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10317 (* ?x10176 l_0_7_133)))
 (let ((?x11387 (+ (* (* 12.0 l_0_7_10) l_0_7_14) (* (* 12.0 l_0_7_11) l_0_7_7))))
 (let ((?x11389 (+ ?x11387 (* (* 12.0 l_0_7_12) l_0_7_8))))
 (let ((?x12623 (- (+ (- (- ?x11389 ?x10317) ?x10318) ?x11390) (* (* 2.0 l_0_7_196) l_0_7_200))))
 (let ((?x12629 (- (- ?x12623 (* (* 2.0 l_0_7_197) l_0_7_201)) (* (* 2.0 l_0_7_198) l_0_7_202))))
 (let ((?x12635 (- (- (- (- ?x12629 (* (* 2.0 l_0_7_199) l_0_7_203)) ?x11408) ?x11411) ?x11414)))
 (let ((?x12650 (- (- (- (- (+ (+ (- ?x12635 ?x11417) ?x12423) ?x12425) ?x12640) ?x12643) ?x12646) ?x12649)))
 (= (+ (+ (+ (+ (- (- ?x12650 ?x12427) ?x12429) ?x12654) ?x12657) ?x12660) ?x12663) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x12792 (* ?x10727 l_0_7_92)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x12790 (* ?x10724 l_0_7_91)))
 (let ((?x12662 (* 2.0 l_0_7_73)))
 (let ((?x12788 (* ?x12662 l_0_7_82)))
 (let ((?x12659 (* 2.0 l_0_7_72)))
 (let ((?x12786 (* ?x12659 l_0_7_81)))
 (let ((?x12656 (* 2.0 l_0_7_71)))
 (let ((?x12784 (* ?x12656 l_0_7_80)))
 (let ((?x12653 (* 2.0 l_0_7_70)))
 (let ((?x12782 (* ?x12653 l_0_7_79)))
 (let ((?x9006 (* 2.0 l_0_7_66)))
 (let ((?x12490 (* ?x9006 l_0_7_80)))
 (let ((?x9001 (* 2.0 l_0_7_65)))
 (let ((?x12488 (* ?x9001 l_0_7_79)))
 (let ((?x12648 (* 2.0 l_0_7_52)))
 (let ((?x12778 (* ?x12648 l_0_7_61)))
 (let ((?x12645 (* 2.0 l_0_7_51)))
 (let ((?x12776 (* ?x12645 l_0_7_60)))
 (let ((?x12642 (* 2.0 l_0_7_50)))
 (let ((?x12774 (* ?x12642 l_0_7_59)))
 (let ((?x12639 (* 2.0 l_0_7_49)))
 (let ((?x12772 (* ?x12639 l_0_7_58)))
 (let ((?x8995 (* 2.0 l_0_7_45)))
 (let ((?x12486 (* ?x8995 l_0_7_59)))
 (let ((?x8989 (* 2.0 l_0_7_44)))
 (let ((?x12484 (* ?x8989 l_0_7_58)))
 (let ((?x11416 (* 12.0 l_0_7_31)))
 (let ((?x11588 (* ?x11416 l_0_7_40)))
 (let ((?x11413 (* 12.0 l_0_7_30)))
 (let ((?x11586 (* ?x11413 l_0_7_39)))
 (let ((?x11410 (* 12.0 l_0_7_29)))
 (let ((?x11584 (* ?x11410 l_0_7_38)))
 (let ((?x11407 (* 12.0 l_0_7_28)))
 (let ((?x11582 (* ?x11407 l_0_7_37)))
 (let ((?x10685 (* 12.0 l_0_7_18)))
 (let ((?x11580 (* ?x10685 l_0_7_9)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x12755 (* ?x10682 l_0_7_176)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x12753 (* ?x10679 l_0_7_175)))
 (let ((?x10674 (* 12.0 l_0_7_17)))
 (let ((?x11569 (* ?x10674 l_0_7_8)))
 (let ((?x10669 (* 12.0 l_0_7_16)))
 (let ((?x11567 (* ?x10669 l_0_7_7)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x12749 (* ?x10666 l_0_7_155)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x12747 (* ?x10663 l_0_7_154)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x12745 (* ?x10656 l_0_7_113)))
 (let ((?x11370 (* 12.0 l_0_7_10)))
 (let ((?x11540 (* ?x11370 l_0_7_19)))
 (let ((?x12750 (+ (+ (+ (+ ?x11540 (* (* 2.0 l_0_7_107) l_0_7_112)) ?x12745) ?x12747) ?x12749)))
 (let ((?x12759 (- (+ (- (- (+ (+ ?x12750 ?x11567) ?x11569) ?x12753) ?x12755) ?x11580) (* (* 2.0 l_0_7_196) l_0_7_205))))
 (let ((?x12763 (- (- ?x12759 (* (* 2.0 l_0_7_197) l_0_7_206)) (* (* 2.0 l_0_7_198) l_0_7_207))))
 (let ((?x12768 (- (- (- (- ?x12763 (* (* 2.0 l_0_7_199) l_0_7_208)) ?x11582) ?x11584) ?x11586)))
 (let ((?x12779 (- (- (- (- (+ (+ (- ?x12768 ?x11588) ?x12484) ?x12486) ?x12772) ?x12774) ?x12776) ?x12778)))
 (let ((?x12791 (- (+ (+ (+ (+ (- (- ?x12779 ?x12488) ?x12490) ?x12782) ?x12784) ?x12786) ?x12788) ?x12790)))
 (= (- ?x12791 ?x12792) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11786 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x11783 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x11780 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x11777 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x11774 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x12909 (* l_0_7_204 l_0_7_204)))
 (let ((?x12907 (* l_0_7_203 l_0_7_203)))
 (let ((?x12905 (* l_0_7_202 l_0_7_202)))
 (let ((?x12903 (* l_0_7_201 l_0_7_201)))
 (let ((?x12901 (* l_0_7_200 l_0_7_200)))
 (let ((?x9966 (* l_0_7_15 l_0_7_15)))
 (let ((?x11771 (* 6.0 ?x9966)))
 (let ((?x9964 (* l_0_7_14 l_0_7_14)))
 (let ((?x11765 (* 6.0 ?x9964)))
 (let ((?x9962 (* l_0_7_13 l_0_7_13)))
 (let ((?x11754 (* 6.0 ?x9962)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10507 (* ?x10189 l_0_7_138)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10504 (* ?x10176 l_0_7_137)))
 (let ((?x9959 (* l_0_7_12 l_0_7_12)))
 (let ((?x11752 (* 6.0 ?x9959)))
 (let ((?x9980 (* l_0_7_11 l_0_7_11)))
 (let ((?x11751 (* 6.0 ?x9980)))
 (let ((?x11753 (+ ?x11751 ?x11752)))
 (let ((?x12904 (- (- (+ (+ (+ (- (- ?x11753 ?x10504) ?x10507) ?x11754) ?x11765) ?x11771) ?x12901) ?x12903)))
 (let ((?x12914 (- (- (- (- (- (- (- ?x12904 ?x12905) ?x12907) ?x12909) ?x11774) ?x11777) ?x11780) ?x11783)))
 (let ((?x12921 (- (- (- ?x12914 ?x11786) (* (* 1.0 l_0_7_53) l_0_7_53)) (* (* 1.0 l_0_7_54) l_0_7_54))))
 (let ((?x12927 (- (- ?x12921 (* (* 1.0 l_0_7_55) l_0_7_55)) (* (* 1.0 l_0_7_56) l_0_7_56))))
 (let ((?x12932 (+ (- ?x12927 (* (* 1.0 l_0_7_57) l_0_7_57)) (* 1.0 (* l_0_7_74 l_0_7_74)))))
 (let ((?x12936 (+ (+ ?x12932 (* 1.0 (* l_0_7_75 l_0_7_75))) (* 1.0 (* l_0_7_76 l_0_7_76)))))
 (let ((?x12940 (+ (+ ?x12936 (* 1.0 (* l_0_7_77 l_0_7_77))) (* 1.0 (* l_0_7_78 l_0_7_78)))))
 (= ?x12940 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x13064 (* ?x10727 l_0_7_96)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x13062 (* ?x10724 l_0_7_95)))
 (let ((?x13060 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x13057 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x13054 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x13051 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x13048 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x13045 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x13042 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x13039 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x13036 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x13033 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x11950 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x11947 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x11944 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x11941 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x11938 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x13010 (* ?x10682 l_0_7_180)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x13008 (* ?x10679 l_0_7_179)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x13006 (* ?x10666 l_0_7_159)))
 (let ((?x11923 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x13003 (* ?x10663 l_0_7_158)))
 (let ((?x11914 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x10509 (* 12.0 l_0_7_13)))
 (let ((?x11899 (* ?x10509 l_0_7_18)))
 (let ((?x10189 (* 2.0 l_0_7_129)))
 (let ((?x10661 (* ?x10189 l_0_7_143)))
 (let ((?x10176 (* 2.0 l_0_7_128)))
 (let ((?x10659 (* ?x10176 l_0_7_142)))
 (let ((?x10498 (* 12.0 l_0_7_12)))
 (let ((?x11897 (* ?x10498 l_0_7_17)))
 (let ((?x10494 (* 12.0 l_0_7_11)))
 (let ((?x11891 (* ?x10494 l_0_7_16)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x12995 (* ?x10656 l_0_7_117)))
 (let ((?x12999 (- (+ (+ (+ (* (* 2.0 l_0_7_107) l_0_7_116) ?x12995) ?x11891) ?x11897) ?x10659)))
 (let ((?x13009 (- (+ (+ (+ (+ (+ (- ?x12999 ?x10661) ?x11899) ?x11914) ?x13003) ?x11923) ?x13006) ?x13008)))
 (let ((?x13017 (- (- (- ?x13009 ?x13010) (* (* 2.0 l_0_7_200) l_0_7_205)) (* (* 2.0 l_0_7_201) l_0_7_206))))
 (let ((?x13023 (- (- ?x13017 (* (* 2.0 l_0_7_202) l_0_7_207)) (* (* 2.0 l_0_7_203) l_0_7_208))))
 (let ((?x13029 (- (- (- (- ?x13023 (* (* 2.0 l_0_7_204) l_0_7_209)) ?x11938) ?x11941) ?x11944)))
 (let ((?x13046 (- (- (- (- (- (- (- ?x13029 ?x11947) ?x11950) ?x13033) ?x13036) ?x13039) ?x13042) ?x13045)))
 (let ((?x13065 (- (- (+ (+ (+ (+ (+ ?x13046 ?x13048) ?x13051) ?x13054) ?x13057) ?x13060) ?x13062) ?x13064)))
 (= ?x13065 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12198 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x12195 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x12192 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x12189 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x12186 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x12183 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x13212 (* l_0_7_210 l_0_7_210)))
 (let ((?x10130 (* l_0_7_21 l_0_7_21)))
 (let ((?x12180 (* 6.0 ?x10130)))
 (let ((?x13209 (* l_0_7_209 l_0_7_209)))
 (let ((?x13207 (* l_0_7_208 l_0_7_208)))
 (let ((?x13205 (* l_0_7_207 l_0_7_207)))
 (let ((?x13203 (* l_0_7_206 l_0_7_206)))
 (let ((?x13201 (* l_0_7_205 l_0_7_205)))
 (let ((?x10128 (* l_0_7_20 l_0_7_20)))
 (let ((?x12178 (* 6.0 ?x10128)))
 (let ((?x10126 (* l_0_7_19 l_0_7_19)))
 (let ((?x12176 (* 6.0 ?x10126)))
 (let ((?x10124 (* l_0_7_18 l_0_7_18)))
 (let ((?x12174 (* 6.0 ?x10124)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x13196 (* ?x10682 l_0_7_185)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x13194 (* ?x10679 l_0_7_184)))
 (let ((?x10122 (* l_0_7_17 l_0_7_17)))
 (let ((?x12166 (* 6.0 ?x10122)))
 (let ((?x10118 (* l_0_7_16 l_0_7_16)))
 (let ((?x12164 (* 6.0 ?x10118)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x13190 (* ?x10666 l_0_7_164)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x13188 (* ?x10663 l_0_7_163)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x13186 (* ?x10656 l_0_7_122)))
 (let ((?x10654 (* 2.0 l_0_7_107)))
 (let ((?x13184 (* ?x10654 l_0_7_121)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x13182 (* ?x12134 l_0_7_87)))
 (let ((?x13189 (+ (+ (+ (- (* (* (- 2.0) l_0_7_100) l_0_7_86) ?x13182) ?x13184) ?x13186) ?x13188)))
 (let ((?x13199 (+ (+ (- (- (+ (+ (+ ?x13189 ?x13190) ?x12164) ?x12166) ?x13194) ?x13196) ?x12174) ?x12176)))
 (let ((?x13211 (+ (- (- (- (- (- (+ ?x13199 ?x12178) ?x13201) ?x13203) ?x13205) ?x13207) ?x13209) ?x12180)))
 (let ((?x13219 (- (- (- (- (- (- (- ?x13211 ?x13212) ?x12183) ?x12186) ?x12189) ?x12192) ?x12195) ?x12198)))
 (let ((?x13225 (- (- ?x13219 (* (* 1.0 l_0_7_58) l_0_7_58)) (* (* 1.0 l_0_7_59) l_0_7_59))))
 (let ((?x13231 (- (- ?x13225 (* (* 1.0 l_0_7_60) l_0_7_60)) (* (* 1.0 l_0_7_61) l_0_7_61))))
 (let ((?x13237 (- (- ?x13231 (* (* 1.0 l_0_7_62) l_0_7_62)) (* (* 1.0 l_0_7_63) l_0_7_63))))
 (let ((?x13241 (+ (+ ?x13237 (* 1.0 (* l_0_7_79 l_0_7_79))) (* 1.0 (* l_0_7_80 l_0_7_80)))))
 (let ((?x13245 (+ (+ ?x13241 (* 1.0 (* l_0_7_81 l_0_7_81))) (* 1.0 (* l_0_7_82 l_0_7_82)))))
 (let ((?x13249 (+ (+ ?x13245 (* 1.0 (* l_0_7_83 l_0_7_83))) (* 1.0 (* l_0_7_84 l_0_7_84)))))
 (= ?x13249 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9103 (* l_0_7_64 l_0_7_64)))
 (let ((?x9139 (* 3.0 ?x9103)))
 (= (+ (* (* (- 3.0) l_0_7_43) l_0_7_43) ?x9139) 0.0))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9452 (* ?x9451 l_0_7_86)))
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9530 (* ?x9243 l_0_7_67)))
 (let ((?x9238 (* 6.0 l_0_7_43)))
 (let ((?x9523 (* ?x9238 l_0_7_46)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9434 (* ?x9433 l_0_7_170)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9428 (* ?x9427 l_0_7_149)))
 (let ((?x13343 (+ (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_107) ?x9428) ?x9434) ?x9523) ?x9530)))
 (= (+ ?x13343 ?x9452) 0.0)))))))))))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9589 (* ?x9243 l_0_7_70)))
 (= (+ (* (* (- 6.0) l_0_7_43) l_0_7_49) ?x9589) 0.0))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9654 (* ?x9243 l_0_7_74)))
 (= (+ (* (* (- 6.0) l_0_7_43) l_0_7_53) ?x9654) 0.0))))
(assert
 (let ((?x9243 (* 6.0 l_0_7_64)))
 (let ((?x9722 (* ?x9243 l_0_7_79)))
 (= (+ (* (* (- 6.0) l_0_7_43) l_0_7_58) ?x9722) 0.0))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x10728 (* ?x10727 l_0_7_89)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x10725 (* ?x10724 l_0_7_88)))
 (let ((?x10248 (* l_0_7_69 l_0_7_69)))
 (let ((?x10900 (* 3.0 ?x10248)))
 (let ((?x10245 (* l_0_7_68 l_0_7_68)))
 (let ((?x10898 (* 3.0 ?x10245)))
 (let ((?x10242 (* l_0_7_67 l_0_7_67)))
 (let ((?x10896 (* 3.0 ?x10242)))
 (let ((?x10890 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x10887 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x10884 (* (* 3.0 l_0_7_46) l_0_7_46)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x10683 (* ?x10682 l_0_7_173)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x10680 (* ?x10679 l_0_7_172)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x10667 (* ?x10666 l_0_7_152)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x10664 (* ?x10663 l_0_7_151)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x10657 (* ?x10656 l_0_7_110)))
 (let ((?x13381 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_109) ?x10657) ?x10664) ?x10667) ?x10680)))
 (let ((?x13388 (+ (+ (+ (- (- (- (+ ?x13381 ?x10683) ?x10884) ?x10887) ?x10890) ?x10896) ?x10898) ?x10900)))
 (= (+ (+ ?x13388 ?x10725) ?x10728) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x12792 (* ?x10727 l_0_7_92)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x12790 (* ?x10724 l_0_7_91)))
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11003 (* ?x11002 l_0_7_72)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x10999 (* ?x10998 l_0_7_71)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x10995 (* ?x10994 l_0_7_70)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x10987 (* ?x10986 l_0_7_51)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x10983 (* ?x10982 l_0_7_50)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x10979 (* ?x10978 l_0_7_49)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x12755 (* ?x10682 l_0_7_176)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x12753 (* ?x10679 l_0_7_175)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x12749 (* ?x10666 l_0_7_155)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x12747 (* ?x10663 l_0_7_154)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x12745 (* ?x10656 l_0_7_113)))
 (let ((?x13418 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_112) ?x12745) ?x12747) ?x12749) ?x12753)))
 (let ((?x13425 (+ (+ (+ (- (- (- (+ ?x13418 ?x12755) ?x10979) ?x10983) ?x10987) ?x10995) ?x10999) ?x11003)))
 (= (+ (+ ?x13425 ?x12790) ?x12792) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x10727 (* 2.0 l_0_7_87)))
 (let ((?x13064 (* ?x10727 l_0_7_96)))
 (let ((?x10724 (* 2.0 l_0_7_86)))
 (let ((?x13062 (* ?x10724 l_0_7_95)))
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11098 (* ?x11002 l_0_7_76)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x11096 (* ?x10998 l_0_7_75)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x11094 (* ?x10994 l_0_7_74)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x11090 (* ?x10986 l_0_7_55)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x11088 (* ?x10982 l_0_7_54)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x11086 (* ?x10978 l_0_7_53)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x13010 (* ?x10682 l_0_7_180)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x13008 (* ?x10679 l_0_7_179)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x13006 (* ?x10666 l_0_7_159)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x13003 (* ?x10663 l_0_7_158)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x12995 (* ?x10656 l_0_7_117)))
 (let ((?x13455 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_116) ?x12995) ?x13003) ?x13006) ?x13008)))
 (let ((?x13462 (+ (+ (+ (- (- (- (+ ?x13455 ?x13010) ?x11086) ?x11088) ?x11090) ?x11094) ?x11096) ?x11098)))
 (= (+ (+ ?x13462 ?x13062) ?x13064) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11002 (* 6.0 l_0_7_69)))
 (let ((?x11189 (* ?x11002 l_0_7_81)))
 (let ((?x10998 (* 6.0 l_0_7_68)))
 (let ((?x11187 (* ?x10998 l_0_7_80)))
 (let ((?x10994 (* 6.0 l_0_7_67)))
 (let ((?x11185 (* ?x10994 l_0_7_79)))
 (let ((?x10986 (* 6.0 l_0_7_48)))
 (let ((?x11181 (* ?x10986 l_0_7_60)))
 (let ((?x10982 (* 6.0 l_0_7_47)))
 (let ((?x11179 (* ?x10982 l_0_7_59)))
 (let ((?x10978 (* 6.0 l_0_7_46)))
 (let ((?x11177 (* ?x10978 l_0_7_58)))
 (let ((?x10682 (* 2.0 l_0_7_171)))
 (let ((?x13196 (* ?x10682 l_0_7_185)))
 (let ((?x10679 (* 2.0 l_0_7_170)))
 (let ((?x13194 (* ?x10679 l_0_7_184)))
 (let ((?x10666 (* 2.0 l_0_7_150)))
 (let ((?x13190 (* ?x10666 l_0_7_164)))
 (let ((?x10663 (* 2.0 l_0_7_149)))
 (let ((?x13188 (* ?x10663 l_0_7_163)))
 (let ((?x10656 (* 2.0 l_0_7_108)))
 (let ((?x13186 (* ?x10656 l_0_7_122)))
 (let ((?x10654 (* 2.0 l_0_7_107)))
 (let ((?x13184 (* ?x10654 l_0_7_121)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x13182 (* ?x12134 l_0_7_87)))
 (let ((?x13496 (- (- (- (+ (* (* 2.0 l_0_7_100) l_0_7_86) ?x13182) ?x13184) ?x13186) ?x13188)))
 (let ((?x13503 (+ (- (- (- (+ (+ (- ?x13496 ?x13190) ?x13194) ?x13196) ?x11177) ?x11179) ?x11181) ?x11185)))
 (= (+ (+ ?x13503 ?x11187) ?x11189) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11304 (* l_0_7_73 l_0_7_73)))
 (let ((?x11305 (* 3.0 ?x11304)))
 (let ((?x11301 (* l_0_7_72 l_0_7_72)))
 (let ((?x11302 (* 3.0 ?x11301)))
 (let ((?x11298 (* l_0_7_71 l_0_7_71)))
 (let ((?x11299 (* 3.0 ?x11298)))
 (let ((?x11295 (* l_0_7_70 l_0_7_70)))
 (let ((?x11296 (* 3.0 ?x11295)))
 (let ((?x11288 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x11285 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x11282 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x13542 (+ (- (- (- (* (* (- 3.0) l_0_7_49) l_0_7_49) ?x11282) ?x11285) ?x11288) ?x11296)))
 (= (+ (+ (+ ?x13542 ?x11299) ?x11302) ?x11305) 0.0))))))))))))))
(assert
 (let ((?x11446 (* 6.0 l_0_7_73)))
 (let ((?x11447 (* ?x11446 l_0_7_77)))
 (let ((?x11443 (* 6.0 l_0_7_72)))
 (let ((?x11444 (* ?x11443 l_0_7_76)))
 (let ((?x11440 (* 6.0 l_0_7_71)))
 (let ((?x11441 (* ?x11440 l_0_7_75)))
 (let ((?x11437 (* 6.0 l_0_7_70)))
 (let ((?x11438 (* ?x11437 l_0_7_74)))
 (let ((?x11431 (* 6.0 l_0_7_52)))
 (let ((?x11432 (* ?x11431 l_0_7_56)))
 (let ((?x11428 (* 6.0 l_0_7_51)))
 (let ((?x11429 (* ?x11428 l_0_7_55)))
 (let ((?x11425 (* 6.0 l_0_7_50)))
 (let ((?x11426 (* ?x11425 l_0_7_54)))
 (let ((?x13560 (+ (- (- (- (* (* (- 6.0) l_0_7_49) l_0_7_53) ?x11426) ?x11429) ?x11432) ?x11438)))
 (= (+ (+ (+ ?x13560 ?x11441) ?x11444) ?x11447) 0.0)))))))))))))))))
(assert
 (let ((?x11446 (* 6.0 l_0_7_73)))
 (let ((?x11610 (* ?x11446 l_0_7_82)))
 (let ((?x11443 (* 6.0 l_0_7_72)))
 (let ((?x11608 (* ?x11443 l_0_7_81)))
 (let ((?x11440 (* 6.0 l_0_7_71)))
 (let ((?x11606 (* ?x11440 l_0_7_80)))
 (let ((?x11437 (* 6.0 l_0_7_70)))
 (let ((?x11604 (* ?x11437 l_0_7_79)))
 (let ((?x11431 (* 6.0 l_0_7_52)))
 (let ((?x11599 (* ?x11431 l_0_7_61)))
 (let ((?x11428 (* 6.0 l_0_7_51)))
 (let ((?x11597 (* ?x11428 l_0_7_60)))
 (let ((?x11425 (* 6.0 l_0_7_50)))
 (let ((?x11595 (* ?x11425 l_0_7_59)))
 (let ((?x13581 (+ (- (- (- (* (* (- 6.0) l_0_7_49) l_0_7_58) ?x11595) ?x11597) ?x11599) ?x11604)))
 (= (+ (+ (+ ?x13581 ?x11606) ?x11608) ?x11610) 0.0)))))))))))))))))
(assert
 (let ((?x11815 (* l_0_7_78 l_0_7_78)))
 (let ((?x11816 (* 3.0 ?x11815)))
 (let ((?x11812 (* l_0_7_77 l_0_7_77)))
 (let ((?x11813 (* 3.0 ?x11812)))
 (let ((?x11809 (* l_0_7_76 l_0_7_76)))
 (let ((?x11810 (* 3.0 ?x11809)))
 (let ((?x11806 (* l_0_7_75 l_0_7_75)))
 (let ((?x11807 (* 3.0 ?x11806)))
 (let ((?x11803 (* l_0_7_74 l_0_7_74)))
 (let ((?x11804 (* 3.0 ?x11803)))
 (let ((?x11801 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x11798 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x11795 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x11792 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x13603 (- (- (- (- (* (* (- 3.0) l_0_7_53) l_0_7_53) ?x11792) ?x11795) ?x11798) ?x11801)))
 (= (+ (+ (+ (+ (+ ?x13603 ?x11804) ?x11807) ?x11810) ?x11813) ?x11816) 0.0)))))))))))))))))
(assert
 (let ((?x11980 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x11977 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x11974 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x11971 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x11968 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x11965 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x11962 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x11959 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x11956 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x13625 (- (- (- (- (* (* (- 6.0) l_0_7_53) l_0_7_58) ?x11956) ?x11959) ?x11962) ?x11965)))
 (= (+ (+ (+ (+ (+ ?x13625 ?x11968) ?x11971) ?x11974) ?x11977) ?x11980) 0.0))))))))))))
(assert
 (let ((?x12233 (* l_0_7_84 l_0_7_84)))
 (let ((?x12234 (* 3.0 ?x12233)))
 (let ((?x12230 (* l_0_7_83 l_0_7_83)))
 (let ((?x12231 (* 3.0 ?x12230)))
 (let ((?x12227 (* l_0_7_82 l_0_7_82)))
 (let ((?x12228 (* 3.0 ?x12227)))
 (let ((?x12224 (* l_0_7_81 l_0_7_81)))
 (let ((?x12225 (* 3.0 ?x12224)))
 (let ((?x12221 (* l_0_7_80 l_0_7_80)))
 (let ((?x12222 (* 3.0 ?x12221)))
 (let ((?x12218 (* l_0_7_79 l_0_7_79)))
 (let ((?x12219 (* 3.0 ?x12218)))
 (let ((?x12216 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12213 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12210 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12207 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12204 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x13652 (- (- (- (- (* (* (- 3.0) l_0_7_58) l_0_7_58) ?x12204) ?x12207) ?x12210) ?x12213)))
 (let ((?x13659 (+ (+ (+ (+ (+ (+ (- ?x13652 ?x12216) ?x12219) ?x12222) ?x12225) ?x12228) ?x12231) ?x12234)))
 (= ?x13659 0.0)))))))))))))))))))))
(assert
 (let ((?x11304 (* l_0_7_73 l_0_7_73)))
 (let ((?x11301 (* l_0_7_72 l_0_7_72)))
 (let ((?x11298 (* l_0_7_71 l_0_7_71)))
 (let ((?x11295 (* l_0_7_70 l_0_7_70)))
 (let ((?x11352 (* l_0_7_52 l_0_7_52)))
 (let ((?x11346 (* l_0_7_51 l_0_7_51)))
 (let ((?x13675 (+ (+ (+ (* l_0_7_49 l_0_7_49) (* l_0_7_50 l_0_7_50)) ?x11346) ?x11352)))
 (= (- (- (- (- ?x13675 ?x11295) ?x11298) ?x11301) ?x11304) 0.0)))))))))
(assert
 (let ((?x12662 (* 2.0 l_0_7_73)))
 (let ((?x12663 (* ?x12662 l_0_7_77)))
 (let ((?x12659 (* 2.0 l_0_7_72)))
 (let ((?x12660 (* ?x12659 l_0_7_76)))
 (let ((?x12656 (* 2.0 l_0_7_71)))
 (let ((?x12657 (* ?x12656 l_0_7_75)))
 (let ((?x12653 (* 2.0 l_0_7_70)))
 (let ((?x12654 (* ?x12653 l_0_7_74)))
 (let ((?x12648 (* 2.0 l_0_7_52)))
 (let ((?x12649 (* ?x12648 l_0_7_56)))
 (let ((?x12645 (* 2.0 l_0_7_51)))
 (let ((?x12646 (* ?x12645 l_0_7_55)))
 (let ((?x12642 (* 2.0 l_0_7_50)))
 (let ((?x12643 (* ?x12642 l_0_7_54)))
 (let ((?x12639 (* 2.0 l_0_7_49)))
 (let ((?x12640 (* ?x12639 l_0_7_53)))
 (let ((?x11261 (* l_0_7_136 l_0_7_136)))
 (let ((?x11259 (* l_0_7_135 l_0_7_135)))
 (let ((?x13695 (- (- (* (- l_0_7_133) l_0_7_133) (* l_0_7_134 l_0_7_134)) ?x11259)))
 (let ((?x13702 (- (- (+ (+ (+ (+ (- ?x13695 ?x11261) ?x12640) ?x12643) ?x12646) ?x12649) ?x12654) ?x12657)))
 (= (- (- ?x13702 ?x12660) ?x12663) 0.0))))))))))))))))))))))
(assert
 (let ((?x13768 (* l_0_7_94 l_0_7_94)))
 (let ((?x13766 (* l_0_7_93 l_0_7_93)))
 (let ((?x13764 (* l_0_7_92 l_0_7_92)))
 (let ((?x13762 (* l_0_7_91 l_0_7_91)))
 (let ((?x12662 (* 2.0 l_0_7_73)))
 (let ((?x12788 (* ?x12662 l_0_7_82)))
 (let ((?x12659 (* 2.0 l_0_7_72)))
 (let ((?x12786 (* ?x12659 l_0_7_81)))
 (let ((?x12656 (* 2.0 l_0_7_71)))
 (let ((?x12784 (* ?x12656 l_0_7_80)))
 (let ((?x12653 (* 2.0 l_0_7_70)))
 (let ((?x12782 (* ?x12653 l_0_7_79)))
 (let ((?x12648 (* 2.0 l_0_7_52)))
 (let ((?x12778 (* ?x12648 l_0_7_61)))
 (let ((?x12645 (* 2.0 l_0_7_51)))
 (let ((?x12776 (* ?x12645 l_0_7_60)))
 (let ((?x12642 (* 2.0 l_0_7_50)))
 (let ((?x12774 (* ?x12642 l_0_7_59)))
 (let ((?x12639 (* 2.0 l_0_7_49)))
 (let ((?x12772 (* ?x12639 l_0_7_58)))
 (let ((?x13752 (* l_0_7_178 l_0_7_178)))
 (let ((?x13750 (* l_0_7_177 l_0_7_177)))
 (let ((?x13748 (* l_0_7_176 l_0_7_176)))
 (let ((?x13746 (* l_0_7_175 l_0_7_175)))
 (let ((?x13744 (* l_0_7_157 l_0_7_157)))
 (let ((?x13742 (* l_0_7_156 l_0_7_156)))
 (let ((?x13740 (* l_0_7_155 l_0_7_155)))
 (let ((?x13738 (* l_0_7_154 l_0_7_154)))
 (let ((?x13736 (* l_0_7_115 l_0_7_115)))
 (let ((?x13734 (* l_0_7_114 l_0_7_114)))
 (let ((?x13737 (+ (+ (+ (* l_0_7_112 l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x13734) ?x13736)))
 (let ((?x13751 (- (- (- (+ (+ (+ (+ ?x13737 ?x13738) ?x13740) ?x13742) ?x13744) ?x13746) ?x13748) ?x13750)))
 (let ((?x13759 (- (- (+ (+ (+ (+ (- ?x13751 ?x13752) ?x12772) ?x12774) ?x12776) ?x12778) ?x12782) ?x12784)))
 (= (- (- (- (- (- (- ?x13759 ?x12786) ?x12788) ?x13762) ?x13764) ?x13766) ?x13768) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11815 (* l_0_7_78 l_0_7_78)))
 (let ((?x11812 (* l_0_7_77 l_0_7_77)))
 (let ((?x11809 (* l_0_7_76 l_0_7_76)))
 (let ((?x11806 (* l_0_7_75 l_0_7_75)))
 (let ((?x11803 (* l_0_7_74 l_0_7_74)))
 (let ((?x11882 (* l_0_7_57 l_0_7_57)))
 (let ((?x11876 (* l_0_7_56 l_0_7_56)))
 (let ((?x11870 (* l_0_7_55 l_0_7_55)))
 (let ((?x11864 (* l_0_7_54 l_0_7_54)))
 (let ((?x11858 (* l_0_7_53 l_0_7_53)))
 (let ((?x11404 (* 2.0 l_0_7_136)))
 (let ((?x11405 (* ?x11404 l_0_7_140)))
 (let ((?x11401 (* 2.0 l_0_7_135)))
 (let ((?x11402 (* ?x11401 l_0_7_139)))
 (let ((?x11398 (* 2.0 l_0_7_134)))
 (let ((?x11399 (* ?x11398 l_0_7_138)))
 (let ((?x13819 (+ (- (- (- (* (* (- 2.0) l_0_7_133) l_0_7_137) ?x11399) ?x11402) ?x11405) ?x11858)))
 (let ((?x13826 (- (- (- (+ (+ (+ (+ ?x13819 ?x11864) ?x11870) ?x11876) ?x11882) ?x11803) ?x11806) ?x11809)))
 (= (- (- ?x13826 ?x11812) ?x11815) 0.0))))))))))))))))))))
(assert
 (let ((?x13920 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x13917 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x13914 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x13911 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x13060 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x13057 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x13054 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x13051 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x13048 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x13045 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x13042 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x13039 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x13036 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x13033 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x13897 (* 2.0 l_0_7_178)))
 (let ((?x13898 (* ?x13897 l_0_7_182)))
 (let ((?x13894 (* 2.0 l_0_7_177)))
 (let ((?x13895 (* ?x13894 l_0_7_181)))
 (let ((?x13891 (* 2.0 l_0_7_176)))
 (let ((?x13892 (* ?x13891 l_0_7_180)))
 (let ((?x13888 (* 2.0 l_0_7_175)))
 (let ((?x13889 (* ?x13888 l_0_7_179)))
 (let ((?x13885 (* 2.0 l_0_7_157)))
 (let ((?x13886 (* ?x13885 l_0_7_161)))
 (let ((?x13882 (* 2.0 l_0_7_156)))
 (let ((?x13883 (* ?x13882 l_0_7_160)))
 (let ((?x13879 (* 2.0 l_0_7_155)))
 (let ((?x13880 (* ?x13879 l_0_7_159)))
 (let ((?x13876 (* 2.0 l_0_7_154)))
 (let ((?x13877 (* ?x13876 l_0_7_158)))
 (let ((?x11404 (* 2.0 l_0_7_136)))
 (let ((?x11556 (* ?x11404 l_0_7_145)))
 (let ((?x11401 (* 2.0 l_0_7_135)))
 (let ((?x11554 (* ?x11401 l_0_7_144)))
 (let ((?x11398 (* 2.0 l_0_7_134)))
 (let ((?x11552 (* ?x11398 l_0_7_143)))
 (let ((?x11395 (* 2.0 l_0_7_133)))
 (let ((?x11550 (* ?x11395 l_0_7_142)))
 (let ((?x13869 (* 2.0 l_0_7_115)))
 (let ((?x13870 (* ?x13869 l_0_7_119)))
 (let ((?x13866 (* 2.0 l_0_7_114)))
 (let ((?x13867 (* ?x13866 l_0_7_118)))
 (let ((?x13863 (* 2.0 l_0_7_113)))
 (let ((?x13864 (* ?x13863 l_0_7_117)))
 (let ((?x13872 (- (+ (+ (+ (* (* 2.0 l_0_7_112) l_0_7_116) ?x13864) ?x13867) ?x13870) ?x11550)))
 (let ((?x13887 (+ (+ (+ (+ (- (- (- ?x13872 ?x11552) ?x11554) ?x11556) ?x13877) ?x13880) ?x13883) ?x13886)))
 (let ((?x13902 (+ (+ (+ (- (- (- (- ?x13887 ?x13889) ?x13892) ?x13895) ?x13898) ?x13033) ?x13036) ?x13039)))
 (let ((?x13909 (- (- (- (- (- (+ (+ ?x13902 ?x13042) ?x13045) ?x13048) ?x13051) ?x13054) ?x13057) ?x13060)))
 (= (- (- (- (- ?x13909 ?x13911) ?x13914) ?x13917) ?x13920) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12233 (* l_0_7_84 l_0_7_84)))
 (let ((?x12230 (* l_0_7_83 l_0_7_83)))
 (let ((?x12227 (* l_0_7_82 l_0_7_82)))
 (let ((?x12224 (* l_0_7_81 l_0_7_81)))
 (let ((?x12221 (* l_0_7_80 l_0_7_80)))
 (let ((?x12218 (* l_0_7_79 l_0_7_79)))
 (let ((?x12343 (* l_0_7_63 l_0_7_63)))
 (let ((?x12337 (* l_0_7_62 l_0_7_62)))
 (let ((?x12331 (* l_0_7_61 l_0_7_61)))
 (let ((?x12325 (* l_0_7_60 l_0_7_60)))
 (let ((?x12319 (* l_0_7_59 l_0_7_59)))
 (let ((?x12313 (* l_0_7_58 l_0_7_58)))
 (let ((?x13897 (* 2.0 l_0_7_178)))
 (let ((?x14066 (* ?x13897 l_0_7_187)))
 (let ((?x13894 (* 2.0 l_0_7_177)))
 (let ((?x14064 (* ?x13894 l_0_7_186)))
 (let ((?x13891 (* 2.0 l_0_7_176)))
 (let ((?x14062 (* ?x13891 l_0_7_185)))
 (let ((?x13888 (* 2.0 l_0_7_175)))
 (let ((?x14060 (* ?x13888 l_0_7_184)))
 (let ((?x13885 (* 2.0 l_0_7_157)))
 (let ((?x14058 (* ?x13885 l_0_7_166)))
 (let ((?x13882 (* 2.0 l_0_7_156)))
 (let ((?x14056 (* ?x13882 l_0_7_165)))
 (let ((?x13879 (* 2.0 l_0_7_155)))
 (let ((?x14054 (* ?x13879 l_0_7_164)))
 (let ((?x13876 (* 2.0 l_0_7_154)))
 (let ((?x14052 (* ?x13876 l_0_7_163)))
 (let ((?x13869 (* 2.0 l_0_7_115)))
 (let ((?x14050 (* ?x13869 l_0_7_124)))
 (let ((?x13866 (* 2.0 l_0_7_114)))
 (let ((?x14048 (* ?x13866 l_0_7_123)))
 (let ((?x13863 (* 2.0 l_0_7_113)))
 (let ((?x14046 (* ?x13863 l_0_7_122)))
 (let ((?x13861 (* 2.0 l_0_7_112)))
 (let ((?x14044 (* ?x13861 l_0_7_121)))
 (let ((?x14041 (* 2.0 l_0_7_103)))
 (let ((?x14042 (* ?x14041 l_0_7_94)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x14039 (* ?x12137 l_0_7_93)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x14037 (* ?x12134 l_0_7_92)))
 (let ((?x14045 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_91) ?x14037) ?x14039) ?x14042) ?x14044)))
 (let ((?x14059 (+ (+ (+ (+ (+ (+ (+ ?x14045 ?x14046) ?x14048) ?x14050) ?x14052) ?x14054) ?x14056) ?x14058)))
 (let ((?x14070 (+ (+ (+ (- (- (- (- ?x14059 ?x14060) ?x14062) ?x14064) ?x14066) ?x12313) ?x12319) ?x12325)))
 (let ((?x14077 (- (- (- (- (+ (+ (+ ?x14070 ?x12331) ?x12337) ?x12343) ?x12218) ?x12221) ?x12224) ?x12227)))
 (= (- (- ?x14077 ?x12230) ?x12233) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14214 (* l_0_7_99 l_0_7_99)))
 (let ((?x14212 (* l_0_7_98 l_0_7_98)))
 (let ((?x14210 (* l_0_7_97 l_0_7_97)))
 (let ((?x14208 (* l_0_7_96 l_0_7_96)))
 (let ((?x14206 (* l_0_7_95 l_0_7_95)))
 (let ((?x14204 (* l_0_7_183 l_0_7_183)))
 (let ((?x14202 (* l_0_7_182 l_0_7_182)))
 (let ((?x14200 (* l_0_7_181 l_0_7_181)))
 (let ((?x14198 (* l_0_7_180 l_0_7_180)))
 (let ((?x14196 (* l_0_7_179 l_0_7_179)))
 (let ((?x14194 (* l_0_7_162 l_0_7_162)))
 (let ((?x14192 (* l_0_7_161 l_0_7_161)))
 (let ((?x14190 (* l_0_7_160 l_0_7_160)))
 (let ((?x14188 (* l_0_7_159 l_0_7_159)))
 (let ((?x14186 (* l_0_7_158 l_0_7_158)))
 (let ((?x11920 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x11917 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x11911 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x11908 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x11905 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x14179 (* l_0_7_120 l_0_7_120)))
 (let ((?x14177 (* l_0_7_119 l_0_7_119)))
 (let ((?x14175 (* l_0_7_118 l_0_7_118)))
 (let ((?x14178 (+ (+ (+ (* l_0_7_116 l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14175) ?x14177)))
 (let ((?x14187 (+ (- (- (- (- (- (+ ?x14178 ?x14179) ?x11905) ?x11908) ?x11911) ?x11917) ?x11920) ?x14186)))
 (let ((?x14201 (- (- (- (+ (+ (+ (+ ?x14187 ?x14188) ?x14190) ?x14192) ?x14194) ?x14196) ?x14198) ?x14200)))
 (let ((?x14215 (- (- (- (- (- (- (- ?x14201 ?x14202) ?x14204) ?x14206) ?x14208) ?x14210) ?x14212) ?x14214)))
 (= ?x14215 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x14340 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x14337 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x14334 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x14331 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x14328 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x14325 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x14322 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x14319 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x14316 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x14313 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x12156 (* l_0_7_147 l_0_7_147)))
 (let ((?x12154 (* l_0_7_146 l_0_7_146)))
 (let ((?x12152 (* l_0_7_145 l_0_7_145)))
 (let ((?x12150 (* l_0_7_144 l_0_7_144)))
 (let ((?x12148 (* l_0_7_143 l_0_7_143)))
 (let ((?x12146 (* l_0_7_142 l_0_7_142)))
 (let ((?x14304 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x14301 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x14298 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x14295 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x14292 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x14289 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x14041 (* 2.0 l_0_7_103)))
 (let ((?x14286 (* ?x14041 l_0_7_98)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x14284 (* ?x12137 l_0_7_97)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x14282 (* ?x12134 l_0_7_96)))
 (let ((?x14290 (- (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_95) ?x14282) ?x14284) ?x14286) ?x14289)))
 (let ((?x14307 (- (- (+ (+ (+ (+ (+ ?x14290 ?x14292) ?x14295) ?x14298) ?x14301) ?x14304) ?x12146) ?x12148)))
 (let ((?x14320 (+ (+ (+ (- (- (- (- ?x14307 ?x12150) ?x12152) ?x12154) ?x12156) ?x14313) ?x14316) ?x14319)))
 (let ((?x14341 (- (- (- (- (- (+ (+ ?x14320 ?x14322) ?x14325) ?x14328) ?x14331) ?x14334) ?x14337) ?x14340)))
 (= ?x14341 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14498 (* l_0_7_189 l_0_7_189)))
 (let ((?x14496 (* l_0_7_188 l_0_7_188)))
 (let ((?x14494 (* l_0_7_187 l_0_7_187)))
 (let ((?x14492 (* l_0_7_186 l_0_7_186)))
 (let ((?x14490 (* l_0_7_185 l_0_7_185)))
 (let ((?x14488 (* l_0_7_184 l_0_7_184)))
 (let ((?x14486 (* l_0_7_168 l_0_7_168)))
 (let ((?x14484 (* l_0_7_167 l_0_7_167)))
 (let ((?x14482 (* l_0_7_166 l_0_7_166)))
 (let ((?x14480 (* l_0_7_165 l_0_7_165)))
 (let ((?x14478 (* l_0_7_164 l_0_7_164)))
 (let ((?x14476 (* l_0_7_163 l_0_7_163)))
 (let ((?x14474 (* l_0_7_126 l_0_7_126)))
 (let ((?x14472 (* l_0_7_125 l_0_7_125)))
 (let ((?x14470 (* l_0_7_124 l_0_7_124)))
 (let ((?x14468 (* l_0_7_123 l_0_7_123)))
 (let ((?x14466 (* l_0_7_122 l_0_7_122)))
 (let ((?x14464 (* l_0_7_121 l_0_7_121)))
 (let ((?x14462 (* l_0_7_105 l_0_7_105)))
 (let ((?x14460 (* l_0_7_104 l_0_7_104)))
 (let ((?x14458 (* l_0_7_103 l_0_7_103)))
 (let ((?x14456 (* l_0_7_102 l_0_7_102)))
 (let ((?x14457 (- (- (* (- l_0_7_100) l_0_7_100) (* l_0_7_101 l_0_7_101)) ?x14456)))
 (let ((?x14471 (+ (+ (+ (+ (- (- (- ?x14457 ?x14458) ?x14460) ?x14462) ?x14464) ?x14466) ?x14468) ?x14470)))
 (let ((?x14485 (+ (+ (+ (+ (+ (+ (+ ?x14471 ?x14472) ?x14474) ?x14476) ?x14478) ?x14480) ?x14482) ?x14484)))
 (let ((?x14499 (- (- (- (- (- (- (+ ?x14485 ?x14486) ?x14488) ?x14490) ?x14492) ?x14494) ?x14496) ?x14498)))
 (= ?x14499 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x9200 (* l_0_7_85 l_0_7_85)))
 (let ((?x9196 (* l_0_7_169 l_0_7_169)))
 (let ((?x14555 (+ (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_148 l_0_7_148)) ?x9196)))
 (= (+ ?x14555 ?x9200) 0.0)))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9724 (* ?x9451 l_0_7_88)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9706 (* ?x9433 l_0_7_172)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9702 (* ?x9427 l_0_7_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_109) ?x9702) ?x9706) ?x9724) 0.0))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x9903 (* ?x9451 l_0_7_91)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x9887 (* ?x9433 l_0_7_175)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x9883 (* ?x9427 l_0_7_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x9883) ?x9887) ?x9903) 0.0))))))))
(assert
 (let ((?x9451 (* 2.0 l_0_7_85)))
 (let ((?x10038 (* ?x9451 l_0_7_95)))
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x10021 (* ?x9433 l_0_7_179)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x10016 (* ?x9427 l_0_7_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_116) ?x10016) ?x10021) ?x10038) 0.0))))))))
(assert
 (let ((?x9433 (* 2.0 l_0_7_169)))
 (let ((?x10120 (* ?x9433 l_0_7_184)))
 (let ((?x9427 (* 2.0 l_0_7_148)))
 (let ((?x10116 (* ?x9427 l_0_7_163)))
 (let ((?x9424 (* 2.0 l_0_7_106)))
 (let ((?x10114 (* ?x9424 l_0_7_121)))
 (= (+ (- (- (* (* 2.0 l_0_7_100) l_0_7_85) ?x10114) ?x10116) ?x10120) 0.0))))))))
(assert
 (let ((?x11195 (* l_0_7_90 l_0_7_90)))
 (let ((?x11193 (* l_0_7_89 l_0_7_89)))
 (let ((?x11191 (* l_0_7_88 l_0_7_88)))
 (let ((?x11169 (* l_0_7_174 l_0_7_174)))
 (let ((?x11167 (* l_0_7_173 l_0_7_173)))
 (let ((?x11165 (* l_0_7_172 l_0_7_172)))
 (let ((?x11161 (* l_0_7_153 l_0_7_153)))
 (let ((?x11159 (* l_0_7_152 l_0_7_152)))
 (let ((?x11157 (* l_0_7_151 l_0_7_151)))
 (let ((?x11149 (* l_0_7_111 l_0_7_111)))
 (let ((?x14614 (- (- (* (- l_0_7_109) l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x11149)))
 (let ((?x14621 (+ (+ (+ (+ (- (- (- ?x14614 ?x11157) ?x11159) ?x11161) ?x11165) ?x11167) ?x11169) ?x11191)))
 (= (+ (+ ?x14621 ?x11193) ?x11195) 0.0))))))))))))))
(assert
 (let ((?x11618 (* 2.0 l_0_7_90)))
 (let ((?x11619 (* ?x11618 l_0_7_93)))
 (let ((?x11615 (* 2.0 l_0_7_89)))
 (let ((?x11616 (* ?x11615 l_0_7_92)))
 (let ((?x11612 (* 2.0 l_0_7_88)))
 (let ((?x11613 (* ?x11612 l_0_7_91)))
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x11578 (* ?x11577 l_0_7_177)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x11575 (* ?x11574 l_0_7_176)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x11572 (* ?x11571 l_0_7_175)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x11565 (* ?x11564 l_0_7_156)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x11562 (* ?x11561 l_0_7_155)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x11559 (* ?x11558 l_0_7_154)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x11548 (* ?x11547 l_0_7_114)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x11545 (* ?x11544 l_0_7_113)))
 (let ((?x14648 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_112) ?x11545) ?x11548) ?x11559) ?x11562)))
 (let ((?x14655 (+ (+ (+ (+ (+ (+ (- ?x14648 ?x11565) ?x11572) ?x11575) ?x11578) ?x11613) ?x11616) ?x11619)))
 (= ?x14655 0.0))))))))))))))))))))))))))
(assert
 (let ((?x11618 (* 2.0 l_0_7_90)))
 (let ((?x11986 (* ?x11618 l_0_7_97)))
 (let ((?x11615 (* 2.0 l_0_7_89)))
 (let ((?x11984 (* ?x11615 l_0_7_96)))
 (let ((?x11612 (* 2.0 l_0_7_88)))
 (let ((?x11982 (* ?x11612 l_0_7_95)))
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x11935 (* ?x11577 l_0_7_181)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x11933 (* ?x11574 l_0_7_180)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x11931 (* ?x11571 l_0_7_179)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x11929 (* ?x11564 l_0_7_160)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x11927 (* ?x11561 l_0_7_159)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x11925 (* ?x11558 l_0_7_158)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x11895 (* ?x11547 l_0_7_118)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x11893 (* ?x11544 l_0_7_117)))
 (let ((?x14684 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_116) ?x11893) ?x11895) ?x11925) ?x11927)))
 (let ((?x14691 (+ (+ (+ (+ (+ (+ (- ?x14684 ?x11929) ?x11931) ?x11933) ?x11935) ?x11982) ?x11984) ?x11986)))
 (= ?x14691 0.0))))))))))))))))))))))))))
(assert
 (let ((?x11577 (* 2.0 l_0_7_174)))
 (let ((?x12172 (* ?x11577 l_0_7_186)))
 (let ((?x11574 (* 2.0 l_0_7_173)))
 (let ((?x12170 (* ?x11574 l_0_7_185)))
 (let ((?x11571 (* 2.0 l_0_7_172)))
 (let ((?x12168 (* ?x11571 l_0_7_184)))
 (let ((?x11564 (* 2.0 l_0_7_153)))
 (let ((?x12162 (* ?x11564 l_0_7_165)))
 (let ((?x11561 (* 2.0 l_0_7_152)))
 (let ((?x12160 (* ?x11561 l_0_7_164)))
 (let ((?x11558 (* 2.0 l_0_7_151)))
 (let ((?x12158 (* ?x11558 l_0_7_163)))
 (let ((?x11547 (* 2.0 l_0_7_111)))
 (let ((?x12144 (* ?x11547 l_0_7_123)))
 (let ((?x11544 (* 2.0 l_0_7_110)))
 (let ((?x12142 (* ?x11544 l_0_7_122)))
 (let ((?x11541 (* 2.0 l_0_7_109)))
 (let ((?x12140 (* ?x11541 l_0_7_121)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x12138 (* ?x12137 l_0_7_90)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x12135 (* ?x12134 l_0_7_89)))
 (let ((?x14720 (- (- (+ (+ (* (* 2.0 l_0_7_100) l_0_7_88) ?x12135) ?x12138) ?x12140) ?x12142)))
 (let ((?x14727 (+ (+ (+ (- (- (- (- ?x14720 ?x12144) ?x12158) ?x12160) ?x12162) ?x12168) ?x12170) ?x12172)))
 (= ?x14727 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13768 (* l_0_7_94 l_0_7_94)))
 (let ((?x13766 (* l_0_7_93 l_0_7_93)))
 (let ((?x13764 (* l_0_7_92 l_0_7_92)))
 (let ((?x13762 (* l_0_7_91 l_0_7_91)))
 (let ((?x13752 (* l_0_7_178 l_0_7_178)))
 (let ((?x13750 (* l_0_7_177 l_0_7_177)))
 (let ((?x13748 (* l_0_7_176 l_0_7_176)))
 (let ((?x13746 (* l_0_7_175 l_0_7_175)))
 (let ((?x13744 (* l_0_7_157 l_0_7_157)))
 (let ((?x13742 (* l_0_7_156 l_0_7_156)))
 (let ((?x13740 (* l_0_7_155 l_0_7_155)))
 (let ((?x13738 (* l_0_7_154 l_0_7_154)))
 (let ((?x13736 (* l_0_7_115 l_0_7_115)))
 (let ((?x13734 (* l_0_7_114 l_0_7_114)))
 (let ((?x14760 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x13734)))
 (let ((?x14767 (+ (+ (- (- (- (- (- ?x14760 ?x13736) ?x13738) ?x13740) ?x13742) ?x13744) ?x13746) ?x13748)))
 (= (+ (+ (+ (+ (+ (+ ?x14767 ?x13750) ?x13752) ?x13762) ?x13764) ?x13766) ?x13768) 0.0))))))))))))))))))
(assert
 (let ((?x13920 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x13917 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x13914 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x13911 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x13897 (* 2.0 l_0_7_178)))
 (let ((?x13898 (* ?x13897 l_0_7_182)))
 (let ((?x13894 (* 2.0 l_0_7_177)))
 (let ((?x13895 (* ?x13894 l_0_7_181)))
 (let ((?x13891 (* 2.0 l_0_7_176)))
 (let ((?x13892 (* ?x13891 l_0_7_180)))
 (let ((?x13888 (* 2.0 l_0_7_175)))
 (let ((?x13889 (* ?x13888 l_0_7_179)))
 (let ((?x13885 (* 2.0 l_0_7_157)))
 (let ((?x13886 (* ?x13885 l_0_7_161)))
 (let ((?x13882 (* 2.0 l_0_7_156)))
 (let ((?x13883 (* ?x13882 l_0_7_160)))
 (let ((?x13879 (* 2.0 l_0_7_155)))
 (let ((?x13880 (* ?x13879 l_0_7_159)))
 (let ((?x13876 (* 2.0 l_0_7_154)))
 (let ((?x13877 (* ?x13876 l_0_7_158)))
 (let ((?x13869 (* 2.0 l_0_7_115)))
 (let ((?x13870 (* ?x13869 l_0_7_119)))
 (let ((?x13866 (* 2.0 l_0_7_114)))
 (let ((?x13867 (* ?x13866 l_0_7_118)))
 (let ((?x13863 (* 2.0 l_0_7_113)))
 (let ((?x13864 (* ?x13863 l_0_7_117)))
 (let ((?x14804 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_116) ?x13864) ?x13867) ?x13870) ?x13877)))
 (let ((?x14811 (+ (+ (+ (+ (- (- (- ?x14804 ?x13880) ?x13883) ?x13886) ?x13889) ?x13892) ?x13895) ?x13898)))
 (= (+ (+ (+ (+ ?x14811 ?x13911) ?x13914) ?x13917) ?x13920) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x13897 (* 2.0 l_0_7_178)))
 (let ((?x14066 (* ?x13897 l_0_7_187)))
 (let ((?x13894 (* 2.0 l_0_7_177)))
 (let ((?x14064 (* ?x13894 l_0_7_186)))
 (let ((?x13891 (* 2.0 l_0_7_176)))
 (let ((?x14062 (* ?x13891 l_0_7_185)))
 (let ((?x13888 (* 2.0 l_0_7_175)))
 (let ((?x14060 (* ?x13888 l_0_7_184)))
 (let ((?x13885 (* 2.0 l_0_7_157)))
 (let ((?x14058 (* ?x13885 l_0_7_166)))
 (let ((?x13882 (* 2.0 l_0_7_156)))
 (let ((?x14056 (* ?x13882 l_0_7_165)))
 (let ((?x13879 (* 2.0 l_0_7_155)))
 (let ((?x14054 (* ?x13879 l_0_7_164)))
 (let ((?x13876 (* 2.0 l_0_7_154)))
 (let ((?x14052 (* ?x13876 l_0_7_163)))
 (let ((?x13869 (* 2.0 l_0_7_115)))
 (let ((?x14050 (* ?x13869 l_0_7_124)))
 (let ((?x13866 (* 2.0 l_0_7_114)))
 (let ((?x14048 (* ?x13866 l_0_7_123)))
 (let ((?x13863 (* 2.0 l_0_7_113)))
 (let ((?x14046 (* ?x13863 l_0_7_122)))
 (let ((?x13861 (* 2.0 l_0_7_112)))
 (let ((?x14044 (* ?x13861 l_0_7_121)))
 (let ((?x14041 (* 2.0 l_0_7_103)))
 (let ((?x14042 (* ?x14041 l_0_7_94)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x14039 (* ?x12137 l_0_7_93)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x14037 (* ?x12134 l_0_7_92)))
 (let ((?x14844 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_91) ?x14037) ?x14039) ?x14042) ?x14044)))
 (let ((?x14851 (- (- (- (- (- (- (- ?x14844 ?x14046) ?x14048) ?x14050) ?x14052) ?x14054) ?x14056) ?x14058)))
 (= (+ (+ (+ (+ ?x14851 ?x14060) ?x14062) ?x14064) ?x14066) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14214 (* l_0_7_99 l_0_7_99)))
 (let ((?x14212 (* l_0_7_98 l_0_7_98)))
 (let ((?x14210 (* l_0_7_97 l_0_7_97)))
 (let ((?x14208 (* l_0_7_96 l_0_7_96)))
 (let ((?x14206 (* l_0_7_95 l_0_7_95)))
 (let ((?x14204 (* l_0_7_183 l_0_7_183)))
 (let ((?x14202 (* l_0_7_182 l_0_7_182)))
 (let ((?x14200 (* l_0_7_181 l_0_7_181)))
 (let ((?x14198 (* l_0_7_180 l_0_7_180)))
 (let ((?x14196 (* l_0_7_179 l_0_7_179)))
 (let ((?x14194 (* l_0_7_162 l_0_7_162)))
 (let ((?x14192 (* l_0_7_161 l_0_7_161)))
 (let ((?x14190 (* l_0_7_160 l_0_7_160)))
 (let ((?x14188 (* l_0_7_159 l_0_7_159)))
 (let ((?x14186 (* l_0_7_158 l_0_7_158)))
 (let ((?x14179 (* l_0_7_120 l_0_7_120)))
 (let ((?x14177 (* l_0_7_119 l_0_7_119)))
 (let ((?x14175 (* l_0_7_118 l_0_7_118)))
 (let ((?x14887 (- (- (* (- l_0_7_116) l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14175)))
 (let ((?x14894 (- (- (- (- (- (- (- ?x14887 ?x14177) ?x14179) ?x14186) ?x14188) ?x14190) ?x14192) ?x14194)))
 (let ((?x14901 (+ (+ (+ (+ (+ (+ (+ ?x14894 ?x14196) ?x14198) ?x14200) ?x14202) ?x14204) ?x14206) ?x14208)))
 (= (+ (+ (+ ?x14901 ?x14210) ?x14212) ?x14214) 0.0)))))))))))))))))))))))
(assert
 (let ((?x14340 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x14337 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x14334 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x14331 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x14328 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x14325 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x14322 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x14319 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x14316 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x14313 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x14304 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x14301 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x14298 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x14295 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x14292 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x14289 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x14041 (* 2.0 l_0_7_103)))
 (let ((?x14286 (* ?x14041 l_0_7_98)))
 (let ((?x12137 (* 2.0 l_0_7_102)))
 (let ((?x14284 (* ?x12137 l_0_7_97)))
 (let ((?x12134 (* 2.0 l_0_7_101)))
 (let ((?x14282 (* ?x12134 l_0_7_96)))
 (let ((?x14930 (+ (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_95) ?x14282) ?x14284) ?x14286) ?x14289)))
 (let ((?x14937 (- (- (- (- (- (- (- ?x14930 ?x14292) ?x14295) ?x14298) ?x14301) ?x14304) ?x14313) ?x14316)))
 (let ((?x14944 (+ (+ (+ (+ (- (- (- ?x14937 ?x14319) ?x14322) ?x14325) ?x14328) ?x14331) ?x14334) ?x14337)))
 (= (+ ?x14944 ?x14340) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x14498 (* l_0_7_189 l_0_7_189)))
 (let ((?x14496 (* l_0_7_188 l_0_7_188)))
 (let ((?x14494 (* l_0_7_187 l_0_7_187)))
 (let ((?x14492 (* l_0_7_186 l_0_7_186)))
 (let ((?x14490 (* l_0_7_185 l_0_7_185)))
 (let ((?x14488 (* l_0_7_184 l_0_7_184)))
 (let ((?x14486 (* l_0_7_168 l_0_7_168)))
 (let ((?x14484 (* l_0_7_167 l_0_7_167)))
 (let ((?x14482 (* l_0_7_166 l_0_7_166)))
 (let ((?x14480 (* l_0_7_165 l_0_7_165)))
 (let ((?x14478 (* l_0_7_164 l_0_7_164)))
 (let ((?x14476 (* l_0_7_163 l_0_7_163)))
 (let ((?x14474 (* l_0_7_126 l_0_7_126)))
 (let ((?x14472 (* l_0_7_125 l_0_7_125)))
 (let ((?x14470 (* l_0_7_124 l_0_7_124)))
 (let ((?x14468 (* l_0_7_123 l_0_7_123)))
 (let ((?x14466 (* l_0_7_122 l_0_7_122)))
 (let ((?x14464 (* l_0_7_121 l_0_7_121)))
 (let ((?x14462 (* l_0_7_105 l_0_7_105)))
 (let ((?x14460 (* l_0_7_104 l_0_7_104)))
 (let ((?x14458 (* l_0_7_103 l_0_7_103)))
 (let ((?x14456 (* l_0_7_102 l_0_7_102)))
 (let ((?x14982 (+ (+ (+ (* l_0_7_100 l_0_7_100) (* l_0_7_101 l_0_7_101)) ?x14456) ?x14458)))
 (let ((?x14989 (- (- (- (- (- (+ (+ ?x14982 ?x14460) ?x14462) ?x14464) ?x14466) ?x14468) ?x14470) ?x14472)))
 (let ((?x14996 (- (- (- (- (- (- (- ?x14989 ?x14474) ?x14476) ?x14478) ?x14480) ?x14482) ?x14484) ?x14486)))
 (= (+ (+ (+ (+ (+ (+ ?x14996 ?x14488) ?x14490) ?x14492) ?x14494) ?x14496) ?x14498) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x11769 (* l_0_7_141 l_0_7_141)))
 (let ((?x11767 (* l_0_7_140 l_0_7_140)))
 (let ((?x11763 (* l_0_7_139 l_0_7_139)))
 (let ((?x15032 (- (- (* (- l_0_7_137) l_0_7_137) (* l_0_7_138 l_0_7_138)) ?x11763)))
 (= (- (- ?x15032 ?x11767) ?x11769) 0.0))))))
(assert
 (>= l_0_7_1 0.0))
(assert
 (>= l_0_7_3 0.0))
(assert
 (>= l_0_7_6 0.0))
(assert
 (>= l_0_7_10 0.0))
(assert
 (>= l_0_7_15 0.0))
(assert
 (>= l_0_7_21 0.0))
(assert
 (>= l_0_7_22 0.0))
(assert
 (>= l_0_7_24 0.0))
(assert
 (>= l_0_7_27 0.0))
(assert
 (>= l_0_7_31 0.0))
(assert
 (>= l_0_7_36 0.0))
(assert
 (>= l_0_7_42 0.0))
(assert
 (>= l_0_7_43 0.0))
(assert
 (>= l_0_7_45 0.0))
(assert
 (>= l_0_7_48 0.0))
(assert
 (>= l_0_7_52 0.0))
(assert
 (>= l_0_7_57 0.0))
(assert
 (>= l_0_7_63 0.0))
(assert
 (>= l_0_7_64 0.0))
(assert
 (>= l_0_7_66 0.0))
(assert
 (>= l_0_7_69 0.0))
(assert
 (>= l_0_7_73 0.0))
(assert
 (>= l_0_7_78 0.0))
(assert
 (>= l_0_7_84 0.0))
(assert
 (>= l_0_7_85 0.0))
(assert
 (>= l_0_7_87 0.0))
(assert
 (>= l_0_7_90 0.0))
(assert
 (>= l_0_7_94 0.0))
(assert
 (>= l_0_7_99 0.0))
(assert
 (>= l_0_7_105 0.0))
(assert
 (>= l_0_7_106 0.0))
(assert
 (>= l_0_7_108 0.0))
(assert
 (>= l_0_7_111 0.0))
(assert
 (>= l_0_7_115 0.0))
(assert
 (>= l_0_7_120 0.0))
(assert
 (>= l_0_7_126 0.0))
(assert
 (>= l_0_7_127 0.0))
(assert
 (>= l_0_7_129 0.0))
(assert
 (>= l_0_7_132 0.0))
(assert
 (>= l_0_7_136 0.0))
(assert
 (>= l_0_7_141 0.0))
(assert
 (>= l_0_7_147 0.0))
(assert
 (>= l_0_7_148 0.0))
(assert
 (>= l_0_7_150 0.0))
(assert
 (>= l_0_7_153 0.0))
(assert
 (>= l_0_7_157 0.0))
(assert
 (>= l_0_7_162 0.0))
(assert
 (>= l_0_7_168 0.0))
(assert
 (>= l_0_7_169 0.0))
(assert
 (>= l_0_7_171 0.0))
(assert
 (>= l_0_7_174 0.0))
(assert
 (>= l_0_7_178 0.0))
(assert
 (>= l_0_7_183 0.0))
(assert
 (>= l_0_7_189 0.0))
(assert
 (>= l_0_7_190 0.0))
(assert
 (>= l_0_7_192 0.0))
(assert
 (>= l_0_7_195 0.0))
(assert
 (>= l_0_7_199 0.0))
(assert
 (>= l_0_7_204 0.0))
(assert
 (>= l_0_7_210 0.0))
(assert
 (let ((?x15171 (* l_0_8_66 l_0_8_66)))
 (let ((?x15172 (* 3.0 ?x15171)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x15169 (* ?x15168 l_0_8_68)))
 (let ((?x15165 (* l_0_8_65 l_0_8_65)))
 (let ((?x15166 (* 3.0 ?x15165)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x15163 (* ?x15162 l_0_8_67)))
 (let ((?x15160 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x15157 (* ?x15156 l_0_8_47)))
 (let ((?x15154 (* (* 3.0 l_0_8_44) l_0_8_44)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x15151 (* ?x15150 l_0_8_46)))
 (let ((?x15147 (* l_0_8_3 l_0_8_3)))
 (let ((?x15148 (* 6.0 ?x15147)))
 (let ((?x15144 (* 12.0 l_0_8_3)))
 (let ((?x15145 (* ?x15144 l_0_8_5)))
 (let ((?x15142 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x15139 (* ?x15138 l_0_8_26)))
 (let ((?x15136 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x15133 (* ?x15132 l_0_8_25)))
 (let ((?x15123 (* l_0_8_2 l_0_8_2)))
 (let ((?x15124 (* 6.0 ?x15123)))
 (let ((?x15120 (* 12.0 l_0_8_2)))
 (let ((?x15121 (* ?x15120 l_0_8_4)))
 (let ((?x15116 (- (+ (* l_0_8_128 l_0_8_128) (* l_0_8_129 l_0_8_129)) (* (* 2.0 l_0_8_191) l_0_8_193))))
 (let ((?x15128 (- (+ (+ (- ?x15116 (* (* 2.0 l_0_8_192) l_0_8_194)) ?x15121) ?x15124) (* (* 2.0 l_0_8_212) l_0_8_214))))
 (let ((?x15140 (- (- (- (- ?x15128 (* (* 2.0 l_0_8_213) l_0_8_215)) ?x15133) ?x15136) ?x15139)))
 (let ((?x15161 (- (- (- (- (+ (+ (- ?x15140 ?x15142) ?x15145) ?x15148) ?x15151) ?x15154) ?x15157) ?x15160)))
 (= (+ (+ (+ (+ (+ ?x15161 ?x15163) ?x15166) ?x15169) ?x15172) 6.0) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15147 (* l_0_8_3 l_0_8_3)))
 (let ((?x15148 (* 6.0 ?x15147)))
 (let ((?x15142 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15136 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15268 (* l_0_8_213 l_0_8_213)))
 (let ((?x15266 (* l_0_8_212 l_0_8_212)))
 (let ((?x15123 (* l_0_8_2 l_0_8_2)))
 (let ((?x15124 (* 6.0 ?x15123)))
 (let ((?x15263 (* l_0_8_192 l_0_8_192)))
 (let ((?x15267 (- (+ (- (- (- _a_12_) (* l_0_8_191 l_0_8_191)) ?x15263) ?x15124) ?x15266)))
 (let ((?x15275 (- (+ (- (- (- ?x15267 ?x15268) ?x15136) ?x15142) ?x15148) (* (* 1.0 l_0_8_44) l_0_8_44))))
 (let ((?x15280 (+ (- ?x15275 (* (* 1.0 l_0_8_45) l_0_8_45)) (* 1.0 (* l_0_8_65 l_0_8_65)))))
 (= (+ (+ ?x15280 (* 1.0 (* l_0_8_66 l_0_8_66))) 12.0) 0.0))))))))))))))
(assert
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15336 (* ?x15335 l_0_8_65)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15333 (* ?x15332 l_0_8_44)))
 (let ((?x15147 (* l_0_8_3 l_0_8_3)))
 (let ((?x15221 (* l_0_8_24 l_0_8_24)))
 (let ((?x15209 (* l_0_8_23 l_0_8_23)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15327 (* ?x15326 l_0_8_23)))
 (let ((?x15123 (* l_0_8_2 l_0_8_2)))
 (let ((?x15321 (- (+ (- _a_13_) (* (* 12.0 l_0_8_1) l_0_8_2)) (* (* 2.0 l_0_8_190) l_0_8_191))))
 (let ((?x15329 (+ (- (- (- ?x15321 ?x15123) (* (* 2.0 l_0_8_211) l_0_8_212)) ?x15327) ?x15209)))
 (= (+ (- (- (+ ?x15329 ?x15221) ?x15147) ?x15333) ?x15336) 0.0))))))))))))))
(assert
 (= (+ (* (- l_0_8_1) l_0_8_1) (* l_0_8_22 l_0_8_22)) 0.0))
(assert
 (let ((?x15403 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x15397 (* l_0_8_211 l_0_8_211)))
 (let ((?x15395 (* l_0_8_190 l_0_8_190)))
 (let ((?x15387 (* l_0_8_1 l_0_8_1)))
 (let ((?x15393 (* 6.0 ?x15387)))
 (let ((?x15401 (+ (- (- (+ (* (* (- 2.0) l_0_8_1) l_0_8_2) ?x15393) ?x15395) ?x15397) (* (* 2.0 l_0_8_22) l_0_8_23))))
 (let ((?x15410 (+ (- (- ?x15401 ?x15403) (* (* 1.0 l_0_8_43) l_0_8_43)) (* 1.0 (* l_0_8_64 l_0_8_64)))))
 (= ?x15410 0.0)))))))))
(assert
 (let ((?x15408 (* l_0_8_64 l_0_8_64)))
 (let ((?x15447 (* 3.0 ?x15408)))
 (let ((?x15403 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x15439 (* l_0_8_127 l_0_8_127)))
 (let ((?x15387 (* l_0_8_1 l_0_8_1)))
 (let ((?x15393 (* 6.0 ?x15387)))
 (let ((?x15442 (+ (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_4) ?x15393) ?x15439) (* (* 2.0 l_0_8_22) l_0_8_25))))
 (= (+ (- (- ?x15442 ?x15403) (* (* 3.0 l_0_8_43) l_0_8_43)) ?x15447) 0.0)))))))))
(assert
 (let ((?x15408 (* l_0_8_64 l_0_8_64)))
 (let ((?x15427 (* l_0_8_43 l_0_8_43)))
 (let ((?x15470 (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) (* (* 2.0 l_0_8_22) l_0_8_28))))
 (= (- (+ ?x15470 ?x15427) ?x15408) 0.0)))))
(assert
 (let ((?x15488 (+ (- (* (* (- 2.0) l_0_8_1) l_0_8_11) (* l_0_8_127 l_0_8_127)) (* (* 2.0 l_0_8_22) l_0_8_32))))
 (= ?x15488 0.0)))
(assert
 (let ((?x15508 (* l_0_8_85 l_0_8_85)))
 (let ((?x15504 (* l_0_8_169 l_0_8_169)))
 (let ((?x15502 (* l_0_8_148 l_0_8_148)))
 (let ((?x15503 (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) (* l_0_8_106 l_0_8_106)) ?x15502)))
 (= (- (+ (- ?x15503 ?x15504) (* (* 2.0 l_0_8_22) l_0_8_37)) ?x15508) 0.0))))))
(assert
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15556 (* ?x15335 l_0_8_67)))
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15554 (* ?x15553 l_0_8_65)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15551 (* ?x15332 l_0_8_46)))
 (let ((?x15548 (* 6.0 l_0_8_43)))
 (let ((?x15549 (* ?x15548 l_0_8_44)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15537 (* ?x15326 l_0_8_25)))
 (let ((?x15327 (* ?x15326 l_0_8_23)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15527 (* ?x15526 l_0_8_128)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15524 (* ?x15316 l_0_8_4)))
 (let ((?x15317 (* ?x15316 l_0_8_2)))
 (let ((?x15533 (- (- (+ (+ ?x15317 ?x15524) ?x15527) (* (* 2.0 l_0_8_190) l_0_8_193)) (* (* 2.0 l_0_8_2) l_0_8_4))))
 (let ((?x15541 (+ (- (- (- ?x15533 (* (* 2.0 l_0_8_211) l_0_8_214)) ?x15327) ?x15537) (* (* 2.0 l_0_8_23) l_0_8_25))))
 (let ((?x15547 (- (+ ?x15541 (* (* 2.0 l_0_8_24) l_0_8_26)) (* (* 2.0 l_0_8_3) l_0_8_5))))
 (= (+ (+ (- (- ?x15547 ?x15549) ?x15551) ?x15554) ?x15556) 0.0)))))))))))))))))))))
(assert
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15634 (* ?x15335 l_0_8_70)))
 (let ((?x15336 (* ?x15335 l_0_8_65)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15631 (* ?x15332 l_0_8_49)))
 (let ((?x15333 (* ?x15332 l_0_8_44)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15622 (* ?x15326 l_0_8_28)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15606 (* ?x15316 l_0_8_7)))
 (let ((?x15619 (- (- ?x15606 (* (* 2.0 l_0_8_190) l_0_8_196)) (* (* 2.0 l_0_8_2) l_0_8_7))))
 (let ((?x15625 (+ (- (- ?x15619 (* (* 2.0 l_0_8_211) l_0_8_217)) ?x15622) (* (* 2.0 l_0_8_23) l_0_8_28))))
 (let ((?x15629 (- (+ ?x15625 (* (* 2.0 l_0_8_24) l_0_8_29)) (* (* 2.0 l_0_8_3) l_0_8_8))))
 (= (+ (- (- (+ ?x15629 ?x15333) ?x15631) ?x15336) ?x15634) 0.0)))))))))))))))
(assert
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15707 (* ?x15335 l_0_8_74)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15705 (* ?x15332 l_0_8_53)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15699 (* ?x15326 l_0_8_32)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15527 (* ?x15526 l_0_8_128)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15687 (* ?x15316 l_0_8_11)))
 (let ((?x15693 (- (- ?x15687 (* (* 2.0 l_0_8_11) l_0_8_2)) (* (* 2.0 l_0_8_12) l_0_8_3))))
 (let ((?x15698 (- (- (- ?x15693 ?x15527) (* (* 2.0 l_0_8_190) l_0_8_200)) (* (* 2.0 l_0_8_211) l_0_8_221))))
 (let ((?x15704 (+ (+ (- ?x15698 ?x15699) (* (* 2.0 l_0_8_23) l_0_8_32)) (* (* 2.0 l_0_8_24) l_0_8_33))))
 (= (+ (- ?x15704 ?x15705) ?x15707) 0.0)))))))))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x15789 (* ?x15788 l_0_8_86)))
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15786 (* ?x15335 l_0_8_79)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15784 (* ?x15332 l_0_8_58)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15778 (* ?x15326 l_0_8_37)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x15769 (* ?x15768 l_0_8_170)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x15763 (* ?x15762 l_0_8_149)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15758 (* ?x15316 l_0_8_16)))
 (let ((?x15767 (- (+ (+ ?x15758 (* (* 2.0 l_0_8_106) l_0_8_107)) ?x15763) (* (* 2.0 l_0_8_16) l_0_8_2))))
 (let ((?x15775 (- (- (- ?x15767 ?x15769) (* (* 2.0 l_0_8_17) l_0_8_3)) (* (* 2.0 l_0_8_190) l_0_8_205))))
 (let ((?x15781 (+ (- (- ?x15775 (* (* 2.0 l_0_8_211) l_0_8_226)) ?x15778) (* (* 2.0 l_0_8_23) l_0_8_37))))
 (let ((?x15790 (- (+ (- (+ ?x15781 (* (* 2.0 l_0_8_24) l_0_8_38)) ?x15784) ?x15786) ?x15789)))
 (= ?x15790 0.0))))))))))))))))))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15873 (* ?x15553 l_0_8_67)))
 (let ((?x15554 (* ?x15553 l_0_8_65)))
 (let ((?x15870 (* l_0_8_6 l_0_8_6)))
 (let ((?x15868 (* l_0_8_5 l_0_8_5)))
 (let ((?x15548 (* 6.0 l_0_8_43)))
 (let ((?x15866 (* ?x15548 l_0_8_46)))
 (let ((?x15549 (* ?x15548 l_0_8_44)))
 (let ((?x15863 (* l_0_8_4 l_0_8_4)))
 (let ((?x15861 (* l_0_8_27 l_0_8_27)))
 (let ((?x15859 (* l_0_8_26 l_0_8_26)))
 (let ((?x15857 (* l_0_8_25 l_0_8_25)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15537 (* ?x15326 l_0_8_25)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15854 (* ?x15526 l_0_8_130)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15524 (* ?x15316 l_0_8_4)))
 (let ((?x15865 (- (- (+ (+ (+ (- (+ ?x15524 ?x15854) ?x15537) ?x15857) ?x15859) ?x15861) ?x15863) ?x15549)))
 (= (+ (+ (- (- (- ?x15865 ?x15866) ?x15868) ?x15870) ?x15554) ?x15873) 0.0)))))))))))))))))))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15931 (* ?x15553 l_0_8_70)))
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15556 (* ?x15335 l_0_8_67)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15551 (* ?x15332 l_0_8_46)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15622 (* ?x15326 l_0_8_28)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15899 (* ?x15526 l_0_8_133)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15606 (* ?x15316 l_0_8_7)))
 (let ((?x15914 (+ (+ (- (+ ?x15606 ?x15899) ?x15622) (* (* 2.0 l_0_8_25) l_0_8_28)) (* (* 2.0 l_0_8_26) l_0_8_29))))
 (let ((?x15920 (- (+ ?x15914 (* (* 2.0 l_0_8_27) l_0_8_30)) (* (* 2.0 l_0_8_4) l_0_8_7))))
 (let ((?x15926 (- (- (+ ?x15920 ?x15551) (* (* 6.0 l_0_8_43) l_0_8_49)) (* (* 2.0 l_0_8_5) l_0_8_8))))
 (= (+ (- (- ?x15926 (* (* 2.0 l_0_8_6) l_0_8_9)) ?x15556) ?x15931) 0.0)))))))))))))))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15996 (* ?x15553 l_0_8_74)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15699 (* ?x15326 l_0_8_32)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15982 (* ?x15526 l_0_8_137)))
 (let ((?x15854 (* ?x15526 l_0_8_130)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15687 (* ?x15316 l_0_8_11)))
 (let ((?x15980 (- (- ?x15687 (* (* 2.0 l_0_8_11) l_0_8_4)) (* (* 2.0 l_0_8_12) l_0_8_5))))
 (let ((?x15987 (- (- (+ (- ?x15980 ?x15854) ?x15982) (* (* 2.0 l_0_8_13) l_0_8_6)) ?x15699)))
 (let ((?x15991 (+ (+ ?x15987 (* (* 2.0 l_0_8_25) l_0_8_32)) (* (* 2.0 l_0_8_26) l_0_8_33))))
 (let ((?x15995 (- (+ ?x15991 (* (* 2.0 l_0_8_27) l_0_8_34)) (* (* 6.0 l_0_8_43) l_0_8_53))))
 (= (+ ?x15995 ?x15996) 0.0)))))))))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16066 (* ?x15788 l_0_8_88)))
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x16064 (* ?x15553 l_0_8_79)))
 (let ((?x15326 (* 12.0 l_0_8_22)))
 (let ((?x15778 (* ?x15326 l_0_8_37)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16048 (* ?x15768 l_0_8_172)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16044 (* ?x15762 l_0_8_151)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x16042 (* ?x15526 l_0_8_142)))
 (let ((?x15316 (* 12.0 l_0_8_1)))
 (let ((?x15758 (* ?x15316 l_0_8_16)))
 (let ((?x16047 (- (+ (+ (+ ?x15758 (* (* 2.0 l_0_8_106) l_0_8_109)) ?x16042) ?x16044) (* (* 2.0 l_0_8_16) l_0_8_4))))
 (let ((?x16054 (- (- (- ?x16047 ?x16048) (* (* 2.0 l_0_8_17) l_0_8_5)) (* (* 2.0 l_0_8_18) l_0_8_6))))
 (let ((?x16059 (+ (+ (- ?x16054 ?x15778) (* (* 2.0 l_0_8_25) l_0_8_37)) (* (* 2.0 l_0_8_26) l_0_8_38))))
 (let ((?x16063 (- (+ ?x16059 (* (* 2.0 l_0_8_27) l_0_8_39)) (* (* 6.0 l_0_8_43) l_0_8_58))))
 (= (- (+ ?x16063 ?x16064) ?x16066) 0.0))))))))))))))))))))
(assert
 (let ((?x16139 (* l_0_8_9 l_0_8_9)))
 (let ((?x16137 (* l_0_8_8 l_0_8_8)))
 (let ((?x16135 (* l_0_8_7 l_0_8_7)))
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15634 (* ?x15335 l_0_8_70)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15631 (* ?x15332 l_0_8_49)))
 (let ((?x16131 (* l_0_8_31 l_0_8_31)))
 (let ((?x16129 (* l_0_8_30 l_0_8_30)))
 (let ((?x16127 (* l_0_8_29 l_0_8_29)))
 (let ((?x16130 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_28 l_0_8_28)) ?x16127) ?x16129)))
 (= (- (- (- (- (+ (+ ?x16130 ?x16131) ?x15631) ?x15634) ?x16135) ?x16137) ?x16139) 0.0)))))))))))))
(assert
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15707 (* ?x15335 l_0_8_74)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15705 (* ?x15332 l_0_8_53)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15899 (* ?x15526 l_0_8_133)))
 (let ((?x16163 (- (* (* (- 2.0) l_0_8_10) l_0_8_14) (* (* 2.0 l_0_8_11) l_0_8_7))))
 (let ((?x16168 (- (- (- ?x16163 (* (* 2.0 l_0_8_12) l_0_8_8)) ?x15899) (* (* 2.0 l_0_8_13) l_0_8_9))))
 (let ((?x16174 (+ (+ ?x16168 (* (* 2.0 l_0_8_28) l_0_8_32)) (* (* 2.0 l_0_8_29) l_0_8_33))))
 (let ((?x16180 (+ (+ ?x16174 (* (* 2.0 l_0_8_30) l_0_8_34)) (* (* 2.0 l_0_8_31) l_0_8_35))))
 (= (- (+ ?x16180 ?x15705) ?x15707) 0.0))))))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16245 (* ?x15788 l_0_8_91)))
 (let ((?x15335 (* 2.0 l_0_8_64)))
 (let ((?x15786 (* ?x15335 l_0_8_79)))
 (let ((?x15332 (* 2.0 l_0_8_43)))
 (let ((?x15784 (* ?x15332 l_0_8_58)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16229 (* ?x15768 l_0_8_175)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16225 (* ?x15762 l_0_8_154)))
 (let ((?x16224 (+ (* (* (- 2.0) l_0_8_10) l_0_8_19) (* (* 2.0 l_0_8_106) l_0_8_112))))
 (let ((?x16232 (- (- (- (+ ?x16224 ?x16225) (* (* 2.0 l_0_8_16) l_0_8_7)) ?x16229) (* (* 2.0 l_0_8_17) l_0_8_8))))
 (let ((?x16236 (+ (- ?x16232 (* (* 2.0 l_0_8_18) l_0_8_9)) (* (* 2.0 l_0_8_28) l_0_8_37))))
 (let ((?x16240 (+ (+ ?x16236 (* (* 2.0 l_0_8_29) l_0_8_38)) (* (* 2.0 l_0_8_30) l_0_8_39))))
 (let ((?x16246 (- (- (+ (+ ?x16240 (* (* 2.0 l_0_8_31) l_0_8_40)) ?x15784) ?x15786) ?x16245)))
 (= ?x16246 0.0)))))))))))))))))
(assert
 (let ((?x16318 (* l_0_8_36 l_0_8_36)))
 (let ((?x16316 (* l_0_8_35 l_0_8_35)))
 (let ((?x16314 (* l_0_8_34 l_0_8_34)))
 (let ((?x16312 (* l_0_8_33 l_0_8_33)))
 (let ((?x16310 (* l_0_8_32 l_0_8_32)))
 (let ((?x16308 (* l_0_8_15 l_0_8_15)))
 (let ((?x16306 (* l_0_8_14 l_0_8_14)))
 (let ((?x16304 (* l_0_8_13 l_0_8_13)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x15982 (* ?x15526 l_0_8_137)))
 (let ((?x16305 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x15982) ?x16304)))
 (let ((?x16319 (+ (+ (+ (+ (+ (- (- ?x16305 ?x16306) ?x16308) ?x16310) ?x16312) ?x16314) ?x16316) ?x16318)))
 (= ?x16319 0.0))))))))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16380 (* ?x15788 l_0_8_95)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16363 (* ?x15768 l_0_8_179)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16358 (* ?x15762 l_0_8_158)))
 (let ((?x15526 (* 2.0 l_0_8_127)))
 (let ((?x16042 (* ?x15526 l_0_8_142)))
 (let ((?x16349 (- (* (* 2.0 l_0_8_106) l_0_8_116) (* (* 2.0 l_0_8_11) l_0_8_16))))
 (let ((?x16354 (- (- (- ?x16349 (* (* 2.0 l_0_8_12) l_0_8_17)) ?x16042) (* (* 2.0 l_0_8_13) l_0_8_18))))
 (let ((?x16362 (- (+ (- ?x16354 (* (* 2.0 l_0_8_14) l_0_8_19)) ?x16358) (* (* 2.0 l_0_8_15) l_0_8_20))))
 (let ((?x16370 (+ (+ (- ?x16362 ?x16363) (* (* 2.0 l_0_8_32) l_0_8_37)) (* (* 2.0 l_0_8_33) l_0_8_38))))
 (let ((?x16376 (+ (+ ?x16370 (* (* 2.0 l_0_8_34) l_0_8_39)) (* (* 2.0 l_0_8_35) l_0_8_40))))
 (= (- (+ ?x16376 (* (* 2.0 l_0_8_36) l_0_8_41)) ?x16380) 0.0)))))))))))))))
(assert
 (let ((?x16484 (* l_0_8_42 l_0_8_42)))
 (let ((?x16482 (* l_0_8_41 l_0_8_41)))
 (let ((?x16480 (* l_0_8_40 l_0_8_40)))
 (let ((?x16478 (* l_0_8_39 l_0_8_39)))
 (let ((?x16476 (* l_0_8_38 l_0_8_38)))
 (let ((?x16474 (* l_0_8_37 l_0_8_37)))
 (let ((?x16472 (* l_0_8_21 l_0_8_21)))
 (let ((?x16470 (* l_0_8_20 l_0_8_20)))
 (let ((?x16468 (* l_0_8_19 l_0_8_19)))
 (let ((?x16466 (* l_0_8_18 l_0_8_18)))
 (let ((?x16464 (* l_0_8_17 l_0_8_17)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16462 (* ?x15768 l_0_8_184)))
 (let ((?x16460 (* l_0_8_16 l_0_8_16)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16458 (* ?x15762 l_0_8_163)))
 (let ((?x15759 (* 2.0 l_0_8_106)))
 (let ((?x16456 (* ?x15759 l_0_8_121)))
 (let ((?x16463 (- (- (+ (+ (* (* (- 2.0) l_0_8_100) l_0_8_85) ?x16456) ?x16458) ?x16460) ?x16462)))
 (let ((?x16477 (+ (+ (- (- (- (- (- ?x16463 ?x16464) ?x16466) ?x16468) ?x16470) ?x16472) ?x16474) ?x16476)))
 (= (+ (+ (+ (+ ?x16477 ?x16478) ?x16480) ?x16482) ?x16484) 0.0))))))))))))))))))))))
(assert
 (let ((?x15171 (* l_0_8_66 l_0_8_66)))
 (let ((?x15172 (* 3.0 ?x15171)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16587 (* ?x16586 l_0_8_68)))
 (let ((?x15165 (* l_0_8_65 l_0_8_65)))
 (let ((?x15166 (* 3.0 ?x15165)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16583 (* ?x16582 l_0_8_67)))
 (let ((?x15870 (* l_0_8_6 l_0_8_6)))
 (let ((?x16580 (* 6.0 ?x15870)))
 (let ((?x15868 (* l_0_8_5 l_0_8_5)))
 (let ((?x16578 (* 6.0 ?x15868)))
 (let ((?x15160 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16566 (* ?x16565 l_0_8_47)))
 (let ((?x15154 (* (* 3.0 l_0_8_44) l_0_8_44)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16562 (* ?x16561 l_0_8_46)))
 (let ((?x15863 (* l_0_8_4 l_0_8_4)))
 (let ((?x16559 (* 6.0 ?x15863)))
 (let ((?x15144 (* 12.0 l_0_8_3)))
 (let ((?x15145 (* ?x15144 l_0_8_5)))
 (let ((?x16556 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x16553 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x16550 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x15139 (* ?x15138 l_0_8_26)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x15133 (* ?x15132 l_0_8_25)))
 (let ((?x16545 (* l_0_8_216 l_0_8_216)))
 (let ((?x16543 (* l_0_8_215 l_0_8_215)))
 (let ((?x16541 (* l_0_8_214 l_0_8_214)))
 (let ((?x15120 (* 12.0 l_0_8_2)))
 (let ((?x15121 (* ?x15120 l_0_8_4)))
 (let ((?x16538 (* l_0_8_195 l_0_8_195)))
 (let ((?x16536 (* l_0_8_194 l_0_8_194)))
 (let ((?x16534 (* l_0_8_193 l_0_8_193)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x16532 (* ?x16531 l_0_8_131)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x16530 (* ?x16518 l_0_8_130)))
 (let ((?x16544 (- (- (+ (- (- (- (+ ?x16530 ?x16532) ?x16534) ?x16536) ?x16538) ?x15121) ?x16541) ?x16543)))
 (let ((?x16558 (+ (- (- (- (- (- (- ?x16544 ?x16545) ?x15133) ?x15139) ?x16550) ?x16553) ?x16556) ?x15145)))
 (let ((?x16571 (- (- (- (- (- (+ ?x16558 ?x16559) ?x16562) ?x15154) ?x16566) ?x15160) (* (* 1.0 l_0_8_46) l_0_8_46))))
 (let ((?x16577 (- (- ?x16571 (* (* 1.0 l_0_8_47) l_0_8_47)) (* (* 1.0 l_0_8_48) l_0_8_48))))
 (let ((?x16592 (+ (+ (+ (+ (+ (+ (+ ?x16577 ?x16578) ?x16580) ?x16583) ?x15166) ?x16587) ?x15172) (* 1.0 (* l_0_8_67 l_0_8_67)))))
 (let ((?x16598 (+ (+ ?x16592 (* 1.0 (* l_0_8_68 l_0_8_68))) (* 1.0 (* l_0_8_69 l_0_8_69)))))
 (= ?x16598 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x16749 (* ?x16748 l_0_8_72)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x16746 (* ?x16745 l_0_8_71)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x16743 (* ?x16742 l_0_8_70)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16740 (* ?x16586 l_0_8_71)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x15169 (* ?x15168 l_0_8_68)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16737 (* ?x16582 l_0_8_70)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x15163 (* ?x15162 l_0_8_67)))
 (let ((?x16734 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x16731 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x16728 (* ?x16727 l_0_8_51)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x16725 (* ?x16724 l_0_8_50)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x16722 (* ?x16721 l_0_8_49)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16719 (* ?x16565 l_0_8_50)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x15157 (* ?x15156 l_0_8_47)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16716 (* ?x16561 l_0_8_49)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x15151 (* ?x15150 l_0_8_46)))
 (let ((?x16713 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x15144 (* 12.0 l_0_8_3)))
 (let ((?x16710 (* ?x15144 l_0_8_8)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x16708 (* ?x16707 l_0_8_30)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x16705 (* ?x16704 l_0_8_29)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x16702 (* ?x16701 l_0_8_28)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x16699 (* ?x15138 l_0_8_29)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x16697 (* ?x15132 l_0_8_28)))
 (let ((?x15120 (* 12.0 l_0_8_2)))
 (let ((?x16686 (* ?x15120 l_0_8_7)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x16675 (* ?x16531 l_0_8_134)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x16674 (* ?x16518 l_0_8_133)))
 (let ((?x16682 (- (- (+ ?x16674 ?x16675) (* (* 2.0 l_0_8_193) l_0_8_196)) (* (* 2.0 l_0_8_194) l_0_8_197))))
 (let ((?x16690 (- (+ (- ?x16682 (* (* 2.0 l_0_8_195) l_0_8_198)) ?x16686) (* (* 2.0 l_0_8_214) l_0_8_217))))
 (let ((?x16696 (- (- ?x16690 (* (* 2.0 l_0_8_215) l_0_8_218)) (* (* 2.0 l_0_8_216) l_0_8_219))))
 (let ((?x16714 (+ (+ (- (- (- (- (- ?x16696 ?x16697) ?x16699) ?x16702) ?x16705) ?x16708) ?x16710) ?x16713)))
 (let ((?x16729 (- (- (- (- (+ (- (+ ?x16714 ?x15151) ?x16716) ?x15157) ?x16719) ?x16722) ?x16725) ?x16728)))
 (let ((?x16744 (+ (+ (- (+ (- (+ (+ ?x16729 ?x16731) ?x16734) ?x15163) ?x16737) ?x15169) ?x16740) ?x16743)))
 (= (+ (+ ?x16744 ?x16746) ?x16749) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x16936 (* ?x16748 l_0_8_76)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x16934 (* ?x16745 l_0_8_75)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x16932 (* ?x16742 l_0_8_74)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16930 (* ?x16586 l_0_8_75)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16928 (* ?x16582 l_0_8_74)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x16926 (* ?x16727 l_0_8_55)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x16924 (* ?x16724 l_0_8_54)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x16922 (* ?x16721 l_0_8_53)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16920 (* ?x16565 l_0_8_54)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16918 (* ?x16561 l_0_8_53)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x16916 (* ?x16707 l_0_8_34)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x16914 (* ?x16704 l_0_8_33)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x16912 (* ?x16701 l_0_8_32)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x16910 (* ?x15138 l_0_8_33)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x16908 (* ?x15132 l_0_8_32)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x16894 (* ?x16893 l_0_8_6)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x16891 (* ?x16531 l_0_8_138)))
 (let ((?x16532 (* ?x16531 l_0_8_131)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x16888 (* ?x16518 l_0_8_137)))
 (let ((?x16530 (* ?x16518 l_0_8_130)))
 (let ((?x16882 (* 12.0 l_0_8_12)))
 (let ((?x16885 (* ?x16882 l_0_8_5)))
 (let ((?x16883 (* ?x16882 l_0_8_3)))
 (let ((?x16878 (* 12.0 l_0_8_11)))
 (let ((?x16880 (* ?x16878 l_0_8_4)))
 (let ((?x16879 (* ?x16878 l_0_8_2)))
 (let ((?x16892 (+ (- (+ (- (+ (+ (+ ?x16879 ?x16880) ?x16883) ?x16885) ?x16530) ?x16888) ?x16532) ?x16891)))
 (let ((?x16899 (- (- (+ ?x16892 ?x16894) (* (* 2.0 l_0_8_193) l_0_8_200)) (* (* 2.0 l_0_8_194) l_0_8_201))))
 (let ((?x16903 (- (- ?x16899 (* (* 2.0 l_0_8_195) l_0_8_202)) (* (* 2.0 l_0_8_214) l_0_8_221))))
 (let ((?x16907 (- (- ?x16903 (* (* 2.0 l_0_8_215) l_0_8_222)) (* (* 2.0 l_0_8_216) l_0_8_223))))
 (let ((?x16921 (- (- (- (- (- (- (- ?x16907 ?x16908) ?x16910) ?x16912) ?x16914) ?x16916) ?x16918) ?x16920)))
 (let ((?x16935 (+ (+ (+ (+ (- (- (- ?x16921 ?x16922) ?x16924) ?x16926) ?x16928) ?x16930) ?x16932) ?x16934)))
 (= (+ ?x16935 ?x16936) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x17142 (* ?x17141 l_0_8_89)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x17139 (* ?x17138 l_0_8_88)))
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x17136 (* ?x16748 l_0_8_81)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x17134 (* ?x16745 l_0_8_80)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x17132 (* ?x16742 l_0_8_79)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x17130 (* ?x16586 l_0_8_80)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x17128 (* ?x16582 l_0_8_79)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x17126 (* ?x16727 l_0_8_60)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x17124 (* ?x16724 l_0_8_59)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x17122 (* ?x16721 l_0_8_58)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x17120 (* ?x16565 l_0_8_59)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x17118 (* ?x16561 l_0_8_58)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x17116 (* ?x16707 l_0_8_39)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x17114 (* ?x16704 l_0_8_38)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x17112 (* ?x16701 l_0_8_37)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x17110 (* ?x15138 l_0_8_38)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x17108 (* ?x15132 l_0_8_37)))
 (let ((?x17093 (* 12.0 l_0_8_18)))
 (let ((?x17094 (* ?x17093 l_0_8_6)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x17091 (* ?x17090 l_0_8_173)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x17088 (* ?x17087 l_0_8_172)))
 (let ((?x17082 (* 12.0 l_0_8_17)))
 (let ((?x17085 (* ?x17082 l_0_8_5)))
 (let ((?x17083 (* ?x17082 l_0_8_3)))
 (let ((?x17077 (* 12.0 l_0_8_16)))
 (let ((?x17080 (* ?x17077 l_0_8_4)))
 (let ((?x17078 (* ?x17077 l_0_8_2)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x17075 (* ?x17074 l_0_8_152)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x17072 (* ?x17071 l_0_8_151)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x17069 (* ?x16531 l_0_8_143)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x17067 (* ?x16518 l_0_8_142)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x17065 (* ?x17064 l_0_8_110)))
 (let ((?x17073 (+ (+ (+ (+ (* (* 2.0 l_0_8_107) l_0_8_109) ?x17065) ?x17067) ?x17069) ?x17072)))
 (let ((?x17092 (- (- (+ (+ (+ (+ (+ ?x17073 ?x17075) ?x17078) ?x17080) ?x17083) ?x17085) ?x17088) ?x17091)))
 (let ((?x17099 (- (- (+ ?x17092 ?x17094) (* (* 2.0 l_0_8_193) l_0_8_205)) (* (* 2.0 l_0_8_194) l_0_8_206))))
 (let ((?x17103 (- (- ?x17099 (* (* 2.0 l_0_8_195) l_0_8_207)) (* (* 2.0 l_0_8_214) l_0_8_226))))
 (let ((?x17107 (- (- ?x17103 (* (* 2.0 l_0_8_215) l_0_8_227)) (* (* 2.0 l_0_8_216) l_0_8_228))))
 (let ((?x17121 (- (- (- (- (- (- (- ?x17107 ?x17108) ?x17110) ?x17112) ?x17114) ?x17116) ?x17118) ?x17120)))
 (let ((?x17135 (+ (+ (+ (+ (- (- (- ?x17121 ?x17122) ?x17124) ?x17126) ?x17128) ?x17130) ?x17132) ?x17134)))
 (= (- (- (+ ?x17135 ?x17136) ?x17139) ?x17142) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17336 (* l_0_8_87 l_0_8_87)))
 (let ((?x17334 (* l_0_8_86 l_0_8_86)))
 (let ((?x16596 (* l_0_8_69 l_0_8_69)))
 (let ((?x17332 (* 3.0 ?x16596)))
 (let ((?x16593 (* l_0_8_68 l_0_8_68)))
 (let ((?x17330 (* 3.0 ?x16593)))
 (let ((?x16590 (* l_0_8_67 l_0_8_67)))
 (let ((?x17328 (* 3.0 ?x16590)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16587 (* ?x16586 l_0_8_68)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16583 (* ?x16582 l_0_8_67)))
 (let ((?x15870 (* l_0_8_6 l_0_8_6)))
 (let ((?x16580 (* 6.0 ?x15870)))
 (let ((?x15868 (* l_0_8_5 l_0_8_5)))
 (let ((?x16578 (* 6.0 ?x15868)))
 (let ((?x17322 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x17319 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x17316 (* (* 3.0 l_0_8_46) l_0_8_46)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16566 (* ?x16565 l_0_8_47)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16562 (* ?x16561 l_0_8_46)))
 (let ((?x15863 (* l_0_8_4 l_0_8_4)))
 (let ((?x16559 (* 6.0 ?x15863)))
 (let ((?x16556 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x16553 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x16550 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x17307 (* l_0_8_171 l_0_8_171)))
 (let ((?x17305 (* l_0_8_170 l_0_8_170)))
 (let ((?x17303 (* l_0_8_150 l_0_8_150)))
 (let ((?x17301 (* l_0_8_149 l_0_8_149)))
 (let ((?x17299 (* l_0_8_132 l_0_8_132)))
 (let ((?x17297 (* l_0_8_131 l_0_8_131)))
 (let ((?x17295 (* l_0_8_130 l_0_8_130)))
 (let ((?x17296 (+ (- (* (- l_0_8_107) l_0_8_107) (* l_0_8_108 l_0_8_108)) ?x17295)))
 (let ((?x17309 (- (+ (+ (- (- (+ (+ ?x17296 ?x17297) ?x17299) ?x17301) ?x17303) ?x17305) ?x17307) ?x16550)))
 (let ((?x17320 (- (- (- (- (+ (- (- ?x17309 ?x16553) ?x16556) ?x16559) ?x16562) ?x16566) ?x17316) ?x17319)))
 (let ((?x17331 (+ (+ (+ (+ (+ (+ (- ?x17320 ?x17322) ?x16578) ?x16580) ?x16583) ?x16587) ?x17328) ?x17330)))
 (= (+ (+ (+ ?x17331 ?x17332) ?x17334) ?x17336) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16596 (* l_0_8_69 l_0_8_69)))
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17435 (* ?x17434 l_0_8_72)))
 (let ((?x16593 (* l_0_8_68 l_0_8_68)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17431 (* ?x17430 l_0_8_71)))
 (let ((?x16590 (* l_0_8_67 l_0_8_67)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17427 (* ?x17426 l_0_8_70)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16740 (* ?x16586 l_0_8_71)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16737 (* ?x16582 l_0_8_70)))
 (let ((?x16734 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x16731 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x16666 (* l_0_8_48 l_0_8_48)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17419 (* ?x17418 l_0_8_51)))
 (let ((?x16662 (* l_0_8_47 l_0_8_47)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17415 (* ?x17414 l_0_8_50)))
 (let ((?x16658 (* l_0_8_46 l_0_8_46)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17411 (* ?x17410 l_0_8_49)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16719 (* ?x16565 l_0_8_50)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16716 (* ?x16561 l_0_8_49)))
 (let ((?x16713 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x16708 (* ?x16707 l_0_8_30)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x16705 (* ?x16704 l_0_8_29)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x16702 (* ?x16701 l_0_8_28)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17402 (* ?x17401 l_0_8_135)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17399 (* ?x17398 l_0_8_134)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17397 (* ?x17379 l_0_8_133)))
 (let ((?x17408 (- (+ (- (- (- (+ (+ ?x17397 ?x17399) ?x17402) ?x16702) ?x16705) ?x16708) ?x16713) ?x16716)))
 (let ((?x17421 (+ (- (+ (- (+ (- (- ?x17408 ?x16719) ?x17411) ?x16658) ?x17415) ?x16662) ?x17419) ?x16666)))
 (let ((?x17432 (+ (- (+ (+ (+ (+ (+ ?x17421 ?x16731) ?x16734) ?x16737) ?x16740) ?x17427) ?x16590) ?x17431)))
 (= (- (+ (- ?x17432 ?x16593) ?x17435) ?x16596) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17530 (* ?x17434 l_0_8_76)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17528 (* ?x17430 l_0_8_75)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17526 (* ?x17426 l_0_8_74)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x16930 (* ?x16586 l_0_8_75)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x16928 (* ?x16582 l_0_8_74)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17522 (* ?x17418 l_0_8_55)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17520 (* ?x17414 l_0_8_54)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17518 (* ?x17410 l_0_8_53)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x16920 (* ?x16565 l_0_8_54)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x16918 (* ?x16561 l_0_8_53)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x16916 (* ?x16707 l_0_8_34)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x16914 (* ?x16704 l_0_8_33)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x16912 (* ?x16701 l_0_8_32)))
 (let ((?x17299 (* l_0_8_132 l_0_8_132)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17510 (* ?x17401 l_0_8_139)))
 (let ((?x17297 (* l_0_8_131 l_0_8_131)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17507 (* ?x17398 l_0_8_138)))
 (let ((?x17295 (* l_0_8_130 l_0_8_130)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17504 (* ?x17379 l_0_8_137)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x16894 (* ?x16893 l_0_8_6)))
 (let ((?x16882 (* 12.0 l_0_8_12)))
 (let ((?x16885 (* ?x16882 l_0_8_5)))
 (let ((?x16878 (* 12.0 l_0_8_11)))
 (let ((?x16880 (* ?x16878 l_0_8_4)))
 (let ((?x17511 (+ (- (+ (- (+ (+ (+ ?x16880 ?x16885) ?x16894) ?x17504) ?x17295) ?x17507) ?x17297) ?x17510)))
 (let ((?x17519 (- (- (- (- (- (- (- ?x17511 ?x17299) ?x16912) ?x16914) ?x16916) ?x16918) ?x16920) ?x17518)))
 (let ((?x17531 (+ (+ (+ (+ (+ (- (- ?x17519 ?x17520) ?x17522) ?x16928) ?x16930) ?x17526) ?x17528) ?x17530)))
 (= ?x17531 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17627 (* l_0_8_90 l_0_8_90)))
 (let ((?x17625 (* l_0_8_89 l_0_8_89)))
 (let ((?x17623 (* l_0_8_88 l_0_8_88)))
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17621 (* ?x17434 l_0_8_81)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17619 (* ?x17430 l_0_8_80)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17617 (* ?x17426 l_0_8_79)))
 (let ((?x16586 (* 6.0 l_0_8_66)))
 (let ((?x17130 (* ?x16586 l_0_8_80)))
 (let ((?x16582 (* 6.0 l_0_8_65)))
 (let ((?x17128 (* ?x16582 l_0_8_79)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17613 (* ?x17418 l_0_8_60)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17611 (* ?x17414 l_0_8_59)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17609 (* ?x17410 l_0_8_58)))
 (let ((?x16565 (* 6.0 l_0_8_45)))
 (let ((?x17120 (* ?x16565 l_0_8_59)))
 (let ((?x16561 (* 6.0 l_0_8_44)))
 (let ((?x17118 (* ?x16561 l_0_8_58)))
 (let ((?x16707 (* 12.0 l_0_8_27)))
 (let ((?x17116 (* ?x16707 l_0_8_39)))
 (let ((?x16704 (* 12.0 l_0_8_26)))
 (let ((?x17114 (* ?x16704 l_0_8_38)))
 (let ((?x16701 (* 12.0 l_0_8_25)))
 (let ((?x17112 (* ?x16701 l_0_8_37)))
 (let ((?x17093 (* 12.0 l_0_8_18)))
 (let ((?x17094 (* ?x17093 l_0_8_6)))
 (let ((?x17601 (* l_0_8_174 l_0_8_174)))
 (let ((?x17599 (* l_0_8_173 l_0_8_173)))
 (let ((?x17597 (* l_0_8_172 l_0_8_172)))
 (let ((?x17082 (* 12.0 l_0_8_17)))
 (let ((?x17085 (* ?x17082 l_0_8_5)))
 (let ((?x17077 (* 12.0 l_0_8_16)))
 (let ((?x17080 (* ?x17077 l_0_8_4)))
 (let ((?x17593 (* l_0_8_153 l_0_8_153)))
 (let ((?x17591 (* l_0_8_152 l_0_8_152)))
 (let ((?x17589 (* l_0_8_151 l_0_8_151)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17587 (* ?x17401 l_0_8_144)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17585 (* ?x17398 l_0_8_143)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17583 (* ?x17379 l_0_8_142)))
 (let ((?x17581 (* l_0_8_111 l_0_8_111)))
 (let ((?x17584 (+ (+ (+ (* l_0_8_109 l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x17581) ?x17583)))
 (let ((?x17596 (+ (+ (+ (+ (+ (+ (+ ?x17584 ?x17585) ?x17587) ?x17589) ?x17591) ?x17593) ?x17080) ?x17085)))
 (let ((?x17606 (- (- (- (+ (- (- (- ?x17596 ?x17597) ?x17599) ?x17601) ?x17094) ?x17112) ?x17114) ?x17116)))
 (let ((?x17616 (+ (+ (- (- (- (- (- ?x17606 ?x17118) ?x17120) ?x17609) ?x17611) ?x17613) ?x17128) ?x17130)))
 (= (- (- (- (+ (+ (+ ?x17616 ?x17617) ?x17619) ?x17621) ?x17623) ?x17625) ?x17627) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16139 (* l_0_8_9 l_0_8_9)))
 (let ((?x17741 (* 6.0 ?x16139)))
 (let ((?x16137 (* l_0_8_8 l_0_8_8)))
 (let ((?x17739 (* 6.0 ?x16137)))
 (let ((?x17736 (* l_0_8_73 l_0_8_73)))
 (let ((?x17737 (* 3.0 ?x17736)))
 (let ((?x17733 (* l_0_8_72 l_0_8_72)))
 (let ((?x17734 (* 3.0 ?x17733)))
 (let ((?x17730 (* l_0_8_71 l_0_8_71)))
 (let ((?x17731 (* 3.0 ?x17730)))
 (let ((?x17727 (* l_0_8_70 l_0_8_70)))
 (let ((?x17728 (* 3.0 ?x17727)))
 (let ((?x16135 (* l_0_8_7 l_0_8_7)))
 (let ((?x17725 (* 6.0 ?x16135)))
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x16749 (* ?x16748 l_0_8_72)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x16746 (* ?x16745 l_0_8_71)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x16743 (* ?x16742 l_0_8_70)))
 (let ((?x17720 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x17717 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x17714 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x16728 (* ?x16727 l_0_8_51)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x16725 (* ?x16724 l_0_8_50)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x16722 (* ?x16721 l_0_8_49)))
 (let ((?x17705 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x17702 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x17699 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x17696 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x17693 (* l_0_8_136 l_0_8_136)))
 (let ((?x17691 (* l_0_8_135 l_0_8_135)))
 (let ((?x17689 (* l_0_8_134 l_0_8_134)))
 (let ((?x17690 (+ (+ (* 6.0 (* l_0_8_10 l_0_8_10)) (* l_0_8_133 l_0_8_133)) ?x17689)))
 (let ((?x17707 (+ (- (- (- (- (+ (+ ?x17690 ?x17691) ?x17693) ?x17696) ?x17699) ?x17702) ?x17705) ?x16722)))
 (let ((?x17715 (- (- (+ (+ ?x17707 ?x16725) ?x16728) (* (* 3.0 l_0_8_49) l_0_8_49)) ?x17714)))
 (let ((?x17729 (+ (+ (- (- (- (- (- ?x17715 ?x17717) ?x17720) ?x16743) ?x16746) ?x16749) ?x17725) ?x17728)))
 (= (+ (+ (+ (+ (+ ?x17729 ?x17731) ?x17734) ?x17737) ?x17739) ?x17741) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17878 (* 6.0 l_0_8_73)))
 (let ((?x17879 (* ?x17878 l_0_8_77)))
 (let ((?x17875 (* 6.0 l_0_8_72)))
 (let ((?x17876 (* ?x17875 l_0_8_76)))
 (let ((?x17872 (* 6.0 l_0_8_71)))
 (let ((?x17873 (* ?x17872 l_0_8_75)))
 (let ((?x17869 (* 6.0 l_0_8_70)))
 (let ((?x17870 (* ?x17869 l_0_8_74)))
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x16936 (* ?x16748 l_0_8_76)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x16934 (* ?x16745 l_0_8_75)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x16932 (* ?x16742 l_0_8_74)))
 (let ((?x17863 (* 6.0 l_0_8_52)))
 (let ((?x17864 (* ?x17863 l_0_8_56)))
 (let ((?x17860 (* 6.0 l_0_8_51)))
 (let ((?x17861 (* ?x17860 l_0_8_55)))
 (let ((?x17857 (* 6.0 l_0_8_50)))
 (let ((?x17858 (* ?x17857 l_0_8_54)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x16926 (* ?x16727 l_0_8_55)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x16924 (* ?x16724 l_0_8_54)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x16922 (* ?x16721 l_0_8_53)))
 (let ((?x17848 (* 12.0 l_0_8_31)))
 (let ((?x17849 (* ?x17848 l_0_8_35)))
 (let ((?x17845 (* 12.0 l_0_8_30)))
 (let ((?x17846 (* ?x17845 l_0_8_34)))
 (let ((?x17842 (* 12.0 l_0_8_29)))
 (let ((?x17843 (* ?x17842 l_0_8_33)))
 (let ((?x17839 (* 12.0 l_0_8_28)))
 (let ((?x17840 (* ?x17839 l_0_8_32)))
 (let ((?x17836 (* 2.0 l_0_8_136)))
 (let ((?x17837 (* ?x17836 l_0_8_140)))
 (let ((?x17833 (* 2.0 l_0_8_135)))
 (let ((?x17834 (* ?x17833 l_0_8_139)))
 (let ((?x17830 (* 2.0 l_0_8_134)))
 (let ((?x17831 (* ?x17830 l_0_8_138)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17402 (* ?x17401 l_0_8_135)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17399 (* ?x17398 l_0_8_134)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17397 (* ?x17379 l_0_8_133)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x17822 (* ?x16893 l_0_8_9)))
 (let ((?x17819 (+ (* (* 12.0 l_0_8_10) l_0_8_14) (* (* 12.0 l_0_8_11) l_0_8_7))))
 (let ((?x17821 (+ ?x17819 (* (* 12.0 l_0_8_12) l_0_8_8))))
 (let ((?x17829 (+ (- (- (- (+ ?x17821 ?x17822) ?x17397) ?x17399) ?x17402) (* (* 2.0 l_0_8_133) l_0_8_137))))
 (let ((?x17850 (- (- (- (- (+ (+ (+ ?x17829 ?x17831) ?x17834) ?x17837) ?x17840) ?x17843) ?x17846) ?x17849)))
 (let ((?x17856 (- (+ (+ (+ ?x17850 ?x16922) ?x16924) ?x16926) (* (* 6.0 l_0_8_49) l_0_8_53))))
 (let ((?x17871 (+ (- (- (- (- (- (- ?x17856 ?x17858) ?x17861) ?x17864) ?x16932) ?x16934) ?x16936) ?x17870)))
 (= (+ (+ (+ ?x17871 ?x17873) ?x17876) ?x17879) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18050 (* 2.0 l_0_8_90)))
 (let ((?x18051 (* ?x18050 l_0_8_93)))
 (let ((?x18047 (* 2.0 l_0_8_89)))
 (let ((?x18048 (* ?x18047 l_0_8_92)))
 (let ((?x18044 (* 2.0 l_0_8_88)))
 (let ((?x18045 (* ?x18044 l_0_8_91)))
 (let ((?x17878 (* 6.0 l_0_8_73)))
 (let ((?x18042 (* ?x17878 l_0_8_82)))
 (let ((?x17875 (* 6.0 l_0_8_72)))
 (let ((?x18040 (* ?x17875 l_0_8_81)))
 (let ((?x17872 (* 6.0 l_0_8_71)))
 (let ((?x18038 (* ?x17872 l_0_8_80)))
 (let ((?x17869 (* 6.0 l_0_8_70)))
 (let ((?x18036 (* ?x17869 l_0_8_79)))
 (let ((?x16748 (* 2.0 l_0_8_69)))
 (let ((?x17136 (* ?x16748 l_0_8_81)))
 (let ((?x16745 (* 2.0 l_0_8_68)))
 (let ((?x17134 (* ?x16745 l_0_8_80)))
 (let ((?x16742 (* 2.0 l_0_8_67)))
 (let ((?x17132 (* ?x16742 l_0_8_79)))
 (let ((?x17863 (* 6.0 l_0_8_52)))
 (let ((?x18031 (* ?x17863 l_0_8_61)))
 (let ((?x17860 (* 6.0 l_0_8_51)))
 (let ((?x18029 (* ?x17860 l_0_8_60)))
 (let ((?x17857 (* 6.0 l_0_8_50)))
 (let ((?x18027 (* ?x17857 l_0_8_59)))
 (let ((?x16727 (* 2.0 l_0_8_48)))
 (let ((?x17126 (* ?x16727 l_0_8_60)))
 (let ((?x16724 (* 2.0 l_0_8_47)))
 (let ((?x17124 (* ?x16724 l_0_8_59)))
 (let ((?x16721 (* 2.0 l_0_8_46)))
 (let ((?x17122 (* ?x16721 l_0_8_58)))
 (let ((?x17848 (* 12.0 l_0_8_31)))
 (let ((?x18020 (* ?x17848 l_0_8_40)))
 (let ((?x17845 (* 12.0 l_0_8_30)))
 (let ((?x18018 (* ?x17845 l_0_8_39)))
 (let ((?x17842 (* 12.0 l_0_8_29)))
 (let ((?x18016 (* ?x17842 l_0_8_38)))
 (let ((?x17839 (* 12.0 l_0_8_28)))
 (let ((?x18014 (* ?x17839 l_0_8_37)))
 (let ((?x17093 (* 12.0 l_0_8_18)))
 (let ((?x18012 (* ?x17093 l_0_8_9)))
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18010 (* ?x18009 l_0_8_177)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18007 (* ?x18006 l_0_8_176)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18004 (* ?x18003 l_0_8_175)))
 (let ((?x17082 (* 12.0 l_0_8_17)))
 (let ((?x18001 (* ?x17082 l_0_8_8)))
 (let ((?x17077 (* 12.0 l_0_8_16)))
 (let ((?x17999 (* ?x17077 l_0_8_7)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x17997 (* ?x17996 l_0_8_156)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x17994 (* ?x17993 l_0_8_155)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x17991 (* ?x17990 l_0_8_154)))
 (let ((?x17836 (* 2.0 l_0_8_136)))
 (let ((?x17988 (* ?x17836 l_0_8_145)))
 (let ((?x17833 (* 2.0 l_0_8_135)))
 (let ((?x17986 (* ?x17833 l_0_8_144)))
 (let ((?x17830 (* 2.0 l_0_8_134)))
 (let ((?x17984 (* ?x17830 l_0_8_143)))
 (let ((?x17827 (* 2.0 l_0_8_133)))
 (let ((?x17982 (* ?x17827 l_0_8_142)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x17980 (* ?x17979 l_0_8_114)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x17977 (* ?x17976 l_0_8_113)))
 (let ((?x17802 (* 12.0 l_0_8_10)))
 (let ((?x17972 (* ?x17802 l_0_8_19)))
 (let ((?x17983 (+ (+ (+ (+ ?x17972 (* (* 2.0 l_0_8_109) l_0_8_112)) ?x17977) ?x17980) ?x17982)))
 (let ((?x18000 (+ (+ (+ (+ (+ (+ (+ ?x17983 ?x17984) ?x17986) ?x17988) ?x17991) ?x17994) ?x17997) ?x17999)))
 (let ((?x18017 (- (- (+ (- (- (- (+ ?x18000 ?x18001) ?x18004) ?x18007) ?x18010) ?x18012) ?x18014) ?x18016)))
 (let ((?x18026 (- (+ (+ (+ (- (- ?x18017 ?x18018) ?x18020) ?x17122) ?x17124) ?x17126) (* (* 6.0 l_0_8_49) l_0_8_58))))
 (let ((?x18037 (+ (- (- (- (- (- (- ?x18026 ?x18027) ?x18029) ?x18031) ?x17132) ?x17134) ?x17136) ?x18036)))
 (= (- (- (- (+ (+ (+ ?x18037 ?x18038) ?x18040) ?x18042) ?x18045) ?x18048) ?x18051) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18247 (* l_0_8_78 l_0_8_78)))
 (let ((?x18248 (* 3.0 ?x18247)))
 (let ((?x18244 (* l_0_8_77 l_0_8_77)))
 (let ((?x18245 (* 3.0 ?x18244)))
 (let ((?x18241 (* l_0_8_76 l_0_8_76)))
 (let ((?x18242 (* 3.0 ?x18241)))
 (let ((?x18238 (* l_0_8_75 l_0_8_75)))
 (let ((?x18239 (* 3.0 ?x18238)))
 (let ((?x18235 (* l_0_8_74 l_0_8_74)))
 (let ((?x18236 (* 3.0 ?x18235)))
 (let ((?x18233 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x18230 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x18227 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x18224 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x18218 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x18215 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x18212 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x18209 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x18206 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x16308 (* l_0_8_15 l_0_8_15)))
 (let ((?x18203 (* 6.0 ?x16308)))
 (let ((?x18201 (* l_0_8_141 l_0_8_141)))
 (let ((?x18199 (* l_0_8_140 l_0_8_140)))
 (let ((?x16306 (* l_0_8_14 l_0_8_14)))
 (let ((?x18197 (* 6.0 ?x16306)))
 (let ((?x18195 (* l_0_8_139 l_0_8_139)))
 (let ((?x18193 (* l_0_8_138 l_0_8_138)))
 (let ((?x18191 (* l_0_8_137 l_0_8_137)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17510 (* ?x17401 l_0_8_139)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17507 (* ?x17398 l_0_8_138)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17504 (* ?x17379 l_0_8_137)))
 (let ((?x16304 (* l_0_8_13 l_0_8_13)))
 (let ((?x18186 (* 6.0 ?x16304)))
 (let ((?x16301 (* l_0_8_12 l_0_8_12)))
 (let ((?x18184 (* 6.0 ?x16301)))
 (let ((?x16322 (* l_0_8_11 l_0_8_11)))
 (let ((?x18183 (* 6.0 ?x16322)))
 (let ((?x18185 (+ ?x18183 ?x18184)))
 (let ((?x18196 (+ (+ (+ (- (- (- (+ ?x18185 ?x18186) ?x17504) ?x17507) ?x17510) ?x18191) ?x18193) ?x18195)))
 (let ((?x18213 (- (- (- (+ (+ (+ (+ ?x18196 ?x18197) ?x18199) ?x18201) ?x18203) ?x18206) ?x18209) ?x18212)))
 (let ((?x18225 (- (- (- (- ?x18213 ?x18215) ?x18218) (* (* 3.0 l_0_8_53) l_0_8_53)) ?x18224)))
 (let ((?x18246 (+ (+ (+ (+ (- (- (- ?x18225 ?x18227) ?x18230) ?x18233) ?x18236) ?x18239) ?x18242) ?x18245)))
 (= (+ ?x18246 ?x18248) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18050 (* 2.0 l_0_8_90)))
 (let ((?x18418 (* ?x18050 l_0_8_97)))
 (let ((?x18047 (* 2.0 l_0_8_89)))
 (let ((?x18416 (* ?x18047 l_0_8_96)))
 (let ((?x18044 (* 2.0 l_0_8_88)))
 (let ((?x18414 (* ?x18044 l_0_8_95)))
 (let ((?x18412 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x18409 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x18406 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x18403 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x18400 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x18397 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x18394 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x18391 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x18388 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x18382 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x18379 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x18376 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x18373 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x18370 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18367 (* ?x18009 l_0_8_181)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18365 (* ?x18006 l_0_8_180)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18363 (* ?x18003 l_0_8_179)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x18361 (* ?x17996 l_0_8_160)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x18359 (* ?x17993 l_0_8_159)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x18357 (* ?x17990 l_0_8_158)))
 (let ((?x18355 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x18352 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18349 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x18346 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x18343 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18340 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18337 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x17401 (* 2.0 l_0_8_132)))
 (let ((?x17587 (* ?x17401 l_0_8_144)))
 (let ((?x17398 (* 2.0 l_0_8_131)))
 (let ((?x17585 (* ?x17398 l_0_8_143)))
 (let ((?x17379 (* 2.0 l_0_8_130)))
 (let ((?x17583 (* ?x17379 l_0_8_142)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x18331 (* ?x16893 l_0_8_18)))
 (let ((?x16882 (* 12.0 l_0_8_12)))
 (let ((?x18329 (* ?x16882 l_0_8_17)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x18327 (* ?x17979 l_0_8_118)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x18325 (* ?x17976 l_0_8_117)))
 (let ((?x16878 (* 12.0 l_0_8_11)))
 (let ((?x18323 (* ?x16878 l_0_8_16)))
 (let ((?x18330 (+ (+ (+ (+ (* (* 2.0 l_0_8_109) l_0_8_116) ?x18323) ?x18325) ?x18327) ?x18329)))
 (let ((?x18344 (+ (+ (+ (- (- (- (+ ?x18330 ?x18331) ?x17583) ?x17585) ?x17587) ?x18337) ?x18340) ?x18343)))
 (let ((?x18362 (+ (+ (+ (+ (+ (+ (+ ?x18344 ?x18346) ?x18349) ?x18352) ?x18355) ?x18357) ?x18359) ?x18361)))
 (let ((?x18380 (- (- (- (- (- (- (- ?x18362 ?x18363) ?x18365) ?x18367) ?x18370) ?x18373) ?x18376) ?x18379)))
 (let ((?x18392 (- (- (- (- ?x18380 ?x18382) (* (* 6.0 l_0_8_53) l_0_8_58)) ?x18388) ?x18391)))
 (let ((?x18413 (+ (+ (+ (+ (+ (- (- ?x18392 ?x18394) ?x18397) ?x18400) ?x18403) ?x18406) ?x18409) ?x18412)))
 (= (- (- (- ?x18413 ?x18414) ?x18416) ?x18418) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18665 (* l_0_8_84 l_0_8_84)))
 (let ((?x18666 (* 3.0 ?x18665)))
 (let ((?x18662 (* l_0_8_83 l_0_8_83)))
 (let ((?x18663 (* 3.0 ?x18662)))
 (let ((?x18659 (* l_0_8_82 l_0_8_82)))
 (let ((?x18660 (* 3.0 ?x18659)))
 (let ((?x18656 (* l_0_8_81 l_0_8_81)))
 (let ((?x18657 (* 3.0 ?x18656)))
 (let ((?x18653 (* l_0_8_80 l_0_8_80)))
 (let ((?x18654 (* 3.0 ?x18653)))
 (let ((?x18650 (* l_0_8_79 l_0_8_79)))
 (let ((?x18651 (* 3.0 ?x18650)))
 (let ((?x18648 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x18645 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x18642 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x18639 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x18636 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x18630 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x18627 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x18624 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x18621 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x18618 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x18615 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x16472 (* l_0_8_21 l_0_8_21)))
 (let ((?x18612 (* 6.0 ?x16472)))
 (let ((?x16470 (* l_0_8_20 l_0_8_20)))
 (let ((?x18610 (* 6.0 ?x16470)))
 (let ((?x16468 (* l_0_8_19 l_0_8_19)))
 (let ((?x18608 (* 6.0 ?x16468)))
 (let ((?x16466 (* l_0_8_18 l_0_8_18)))
 (let ((?x18606 (* 6.0 ?x16466)))
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18604 (* ?x18009 l_0_8_186)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18602 (* ?x18006 l_0_8_185)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18600 (* ?x18003 l_0_8_184)))
 (let ((?x16464 (* l_0_8_17 l_0_8_17)))
 (let ((?x18598 (* 6.0 ?x16464)))
 (let ((?x16460 (* l_0_8_16 l_0_8_16)))
 (let ((?x18596 (* 6.0 ?x16460)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x18594 (* ?x17996 l_0_8_165)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x18592 (* ?x17993 l_0_8_164)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x18590 (* ?x17990 l_0_8_163)))
 (let ((?x18588 (* l_0_8_147 l_0_8_147)))
 (let ((?x18586 (* l_0_8_146 l_0_8_146)))
 (let ((?x18584 (* l_0_8_145 l_0_8_145)))
 (let ((?x18582 (* l_0_8_144 l_0_8_144)))
 (let ((?x18580 (* l_0_8_143 l_0_8_143)))
 (let ((?x18578 (* l_0_8_142 l_0_8_142)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x18576 (* ?x17979 l_0_8_123)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x18574 (* ?x17976 l_0_8_122)))
 (let ((?x17973 (* 2.0 l_0_8_109)))
 (let ((?x18572 (* ?x17973 l_0_8_121)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x18570 (* ?x18569 l_0_8_90)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x18567 (* ?x18566 l_0_8_89)))
 (let ((?x18575 (+ (+ (- (- (* (* (- 2.0) l_0_8_100) l_0_8_88) ?x18567) ?x18570) ?x18572) ?x18574)))
 (let ((?x18589 (+ (+ (+ (+ (+ (+ (+ ?x18575 ?x18576) ?x18578) ?x18580) ?x18582) ?x18584) ?x18586) ?x18588)))
 (let ((?x18603 (- (- (+ (+ (+ (+ (+ ?x18589 ?x18590) ?x18592) ?x18594) ?x18596) ?x18598) ?x18600) ?x18602)))
 (let ((?x18619 (- (- (+ (+ (+ (+ (- ?x18603 ?x18604) ?x18606) ?x18608) ?x18610) ?x18612) ?x18615) ?x18618)))
 (let ((?x18634 (- (- (- (- (- ?x18619 ?x18621) ?x18624) ?x18627) ?x18630) (* (* 3.0 l_0_8_58) l_0_8_58))))
 (let ((?x18655 (+ (+ (- (- (- (- (- ?x18634 ?x18636) ?x18639) ?x18642) ?x18645) ?x18648) ?x18651) ?x18654)))
 (= (+ (+ (+ (+ ?x18655 ?x18657) ?x18660) ?x18663) ?x18666) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15171 (* l_0_8_66 l_0_8_66)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18804 (* ?x15168 l_0_8_71)))
 (let ((?x15165 (* l_0_8_65 l_0_8_65)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18801 (* ?x15162 l_0_8_70)))
 (let ((?x15248 (* l_0_8_45 l_0_8_45)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18798 (* ?x15156 l_0_8_50)))
 (let ((?x15236 (* l_0_8_44 l_0_8_44)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18795 (* ?x15150 l_0_8_49)))
 (let ((?x15144 (* 12.0 l_0_8_3)))
 (let ((?x16710 (* ?x15144 l_0_8_8)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x16699 (* ?x15138 l_0_8_29)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x16697 (* ?x15132 l_0_8_28)))
 (let ((?x15120 (* 12.0 l_0_8_2)))
 (let ((?x16686 (* ?x15120 l_0_8_7)))
 (let ((?x18786 (- (* (* (- 2.0) l_0_8_191) l_0_8_196) (* (* 2.0 l_0_8_192) l_0_8_197))))
 (let ((?x18791 (- (- (+ ?x18786 ?x16686) (* (* 2.0 l_0_8_212) l_0_8_217)) (* (* 2.0 l_0_8_213) l_0_8_218))))
 (let ((?x18800 (+ (- (+ (- (+ (- (- ?x18791 ?x16697) ?x16699) ?x16710) ?x18795) ?x15236) ?x18798) ?x15248)))
 (= (- (+ (- (+ ?x18800 ?x18801) ?x15165) ?x18804) ?x15171) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18879 (* ?x15168 l_0_8_75)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18877 (* ?x15162 l_0_8_74)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18875 (* ?x15156 l_0_8_54)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18873 (* ?x15150 l_0_8_53)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x16910 (* ?x15138 l_0_8_33)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x16908 (* ?x15132 l_0_8_32)))
 (let ((?x15112 (* l_0_8_129 l_0_8_129)))
 (let ((?x15111 (* l_0_8_128 l_0_8_128)))
 (let ((?x16882 (* 12.0 l_0_8_12)))
 (let ((?x16883 (* ?x16882 l_0_8_3)))
 (let ((?x16878 (* 12.0 l_0_8_11)))
 (let ((?x16879 (* ?x16878 l_0_8_2)))
 (let ((?x18864 (- (- (- (+ ?x16879 ?x16883) ?x15111) ?x15112) (* (* 2.0 l_0_8_191) l_0_8_200))))
 (let ((?x18868 (- (- ?x18864 (* (* 2.0 l_0_8_192) l_0_8_201)) (* (* 2.0 l_0_8_212) l_0_8_221))))
 (let ((?x18874 (- (- (- (- ?x18868 (* (* 2.0 l_0_8_213) l_0_8_222)) ?x16908) ?x16910) ?x18873)))
 (= (+ (+ (- ?x18874 ?x18875) ?x18877) ?x18879) 0.0)))))))))))))))))))))))
(assert
 (let ((?x17336 (* l_0_8_87 l_0_8_87)))
 (let ((?x17334 (* l_0_8_86 l_0_8_86)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18956 (* ?x15168 l_0_8_80)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18954 (* ?x15162 l_0_8_79)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18952 (* ?x15156 l_0_8_59)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18950 (* ?x15150 l_0_8_58)))
 (let ((?x15138 (* 12.0 l_0_8_24)))
 (let ((?x17110 (* ?x15138 l_0_8_38)))
 (let ((?x15132 (* 12.0 l_0_8_23)))
 (let ((?x17108 (* ?x15132 l_0_8_37)))
 (let ((?x17307 (* l_0_8_171 l_0_8_171)))
 (let ((?x17305 (* l_0_8_170 l_0_8_170)))
 (let ((?x17082 (* 12.0 l_0_8_17)))
 (let ((?x17083 (* ?x17082 l_0_8_3)))
 (let ((?x17077 (* 12.0 l_0_8_16)))
 (let ((?x17078 (* ?x17077 l_0_8_2)))
 (let ((?x17303 (* l_0_8_150 l_0_8_150)))
 (let ((?x17301 (* l_0_8_149 l_0_8_149)))
 (let ((?x18929 (+ (+ (+ (* l_0_8_107 l_0_8_107) (* l_0_8_108 l_0_8_108)) ?x17301) ?x17303)))
 (let ((?x18941 (- (- (- (+ (+ ?x18929 ?x17078) ?x17083) ?x17305) ?x17307) (* (* 2.0 l_0_8_191) l_0_8_205))))
 (let ((?x18945 (- (- ?x18941 (* (* 2.0 l_0_8_192) l_0_8_206)) (* (* 2.0 l_0_8_212) l_0_8_226))))
 (let ((?x18951 (- (- (- (- ?x18945 (* (* 2.0 l_0_8_213) l_0_8_227)) ?x17108) ?x17110) ?x18950)))
 (= (- (- (+ (+ (- ?x18951 ?x18952) ?x18954) ?x18956) ?x17334) ?x17336) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x16139 (* l_0_8_9 l_0_8_9)))
 (let ((?x17741 (* 6.0 ?x16139)))
 (let ((?x16137 (* l_0_8_8 l_0_8_8)))
 (let ((?x17739 (* 6.0 ?x16137)))
 (let ((?x16135 (* l_0_8_7 l_0_8_7)))
 (let ((?x17725 (* 6.0 ?x16135)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18804 (* ?x15168 l_0_8_71)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18801 (* ?x15162 l_0_8_70)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18798 (* ?x15156 l_0_8_50)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18795 (* ?x15150 l_0_8_49)))
 (let ((?x17705 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x17702 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x17699 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x17696 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x19026 (* l_0_8_220 l_0_8_220)))
 (let ((?x19024 (* l_0_8_219 l_0_8_219)))
 (let ((?x19022 (* l_0_8_218 l_0_8_218)))
 (let ((?x19020 (* l_0_8_217 l_0_8_217)))
 (let ((?x19018 (* l_0_8_199 l_0_8_199)))
 (let ((?x19016 (* l_0_8_198 l_0_8_198)))
 (let ((?x19014 (* l_0_8_197 l_0_8_197)))
 (let ((?x19015 (- (- (* 6.0 (* l_0_8_10 l_0_8_10)) (* l_0_8_196 l_0_8_196)) ?x19014)))
 (let ((?x19028 (- (- (- (- (- (- (- ?x19015 ?x19016) ?x19018) ?x19020) ?x19022) ?x19024) ?x19026) ?x17696)))
 (let ((?x19036 (- (+ (+ (- (- (- ?x19028 ?x17699) ?x17702) ?x17705) ?x18795) ?x18798) (* (* 1.0 l_0_8_49) l_0_8_49))))
 (let ((?x19042 (- (- ?x19036 (* (* 1.0 l_0_8_50) l_0_8_50)) (* (* 1.0 l_0_8_51) l_0_8_51))))
 (let ((?x19048 (+ (- (- (- ?x19042 (* (* 1.0 l_0_8_52) l_0_8_52)) ?x18801) ?x18804) ?x17725)))
 (let ((?x19052 (+ (+ ?x19048 (* 1.0 (* l_0_8_70 l_0_8_70))) (* 1.0 (* l_0_8_71 l_0_8_71)))))
 (let ((?x19056 (+ (+ ?x19052 (* 1.0 (* l_0_8_72 l_0_8_72))) (* 1.0 (* l_0_8_73 l_0_8_73)))))
 (= (+ (+ ?x19056 ?x17739) ?x17741) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19172 (* 2.0 l_0_8_73)))
 (let ((?x19173 (* ?x19172 l_0_8_77)))
 (let ((?x19169 (* 2.0 l_0_8_72)))
 (let ((?x19170 (* ?x19169 l_0_8_76)))
 (let ((?x19166 (* 2.0 l_0_8_71)))
 (let ((?x19167 (* ?x19166 l_0_8_75)))
 (let ((?x19163 (* 2.0 l_0_8_70)))
 (let ((?x19164 (* ?x19163 l_0_8_74)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18879 (* ?x15168 l_0_8_75)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18877 (* ?x15162 l_0_8_74)))
 (let ((?x19158 (* 2.0 l_0_8_52)))
 (let ((?x19159 (* ?x19158 l_0_8_56)))
 (let ((?x19155 (* 2.0 l_0_8_51)))
 (let ((?x19156 (* ?x19155 l_0_8_55)))
 (let ((?x19152 (* 2.0 l_0_8_50)))
 (let ((?x19153 (* ?x19152 l_0_8_54)))
 (let ((?x19149 (* 2.0 l_0_8_49)))
 (let ((?x19150 (* ?x19149 l_0_8_53)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18875 (* ?x15156 l_0_8_54)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18873 (* ?x15150 l_0_8_53)))
 (let ((?x17848 (* 12.0 l_0_8_31)))
 (let ((?x17849 (* ?x17848 l_0_8_35)))
 (let ((?x17845 (* 12.0 l_0_8_30)))
 (let ((?x17846 (* ?x17845 l_0_8_34)))
 (let ((?x17842 (* 12.0 l_0_8_29)))
 (let ((?x17843 (* ?x17842 l_0_8_33)))
 (let ((?x17839 (* 12.0 l_0_8_28)))
 (let ((?x17840 (* ?x17839 l_0_8_32)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x17822 (* ?x16893 l_0_8_9)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x16675 (* ?x16531 l_0_8_134)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x16674 (* ?x16518 l_0_8_133)))
 (let ((?x17819 (+ (* (* 12.0 l_0_8_10) l_0_8_14) (* (* 12.0 l_0_8_11) l_0_8_7))))
 (let ((?x17821 (+ ?x17819 (* (* 12.0 l_0_8_12) l_0_8_8))))
 (let ((?x19121 (- (+ (- (- ?x17821 ?x16674) ?x16675) ?x17822) (* (* 2.0 l_0_8_196) l_0_8_200))))
 (let ((?x19127 (- (- ?x19121 (* (* 2.0 l_0_8_197) l_0_8_201)) (* (* 2.0 l_0_8_198) l_0_8_202))))
 (let ((?x19133 (- (- ?x19127 (* (* 2.0 l_0_8_199) l_0_8_203)) (* (* 2.0 l_0_8_217) l_0_8_221))))
 (let ((?x19139 (- (- ?x19133 (* (* 2.0 l_0_8_218) l_0_8_222)) (* (* 2.0 l_0_8_219) l_0_8_223))))
 (let ((?x19145 (- (- (- (- ?x19139 (* (* 2.0 l_0_8_220) l_0_8_224)) ?x17840) ?x17843) ?x17846)))
 (let ((?x19160 (- (- (- (- (+ (+ (- ?x19145 ?x17849) ?x18873) ?x18875) ?x19150) ?x19153) ?x19156) ?x19159)))
 (= (+ (+ (+ (+ (- (- ?x19160 ?x18877) ?x18879) ?x19164) ?x19167) ?x19170) ?x19173) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x19334 (* ?x17141 l_0_8_92)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x19332 (* ?x17138 l_0_8_91)))
 (let ((?x19172 (* 2.0 l_0_8_73)))
 (let ((?x19330 (* ?x19172 l_0_8_82)))
 (let ((?x19169 (* 2.0 l_0_8_72)))
 (let ((?x19328 (* ?x19169 l_0_8_81)))
 (let ((?x19166 (* 2.0 l_0_8_71)))
 (let ((?x19326 (* ?x19166 l_0_8_80)))
 (let ((?x19163 (* 2.0 l_0_8_70)))
 (let ((?x19324 (* ?x19163 l_0_8_79)))
 (let ((?x15168 (* 2.0 l_0_8_66)))
 (let ((?x18956 (* ?x15168 l_0_8_80)))
 (let ((?x15162 (* 2.0 l_0_8_65)))
 (let ((?x18954 (* ?x15162 l_0_8_79)))
 (let ((?x19158 (* 2.0 l_0_8_52)))
 (let ((?x19320 (* ?x19158 l_0_8_61)))
 (let ((?x19155 (* 2.0 l_0_8_51)))
 (let ((?x19318 (* ?x19155 l_0_8_60)))
 (let ((?x19152 (* 2.0 l_0_8_50)))
 (let ((?x19316 (* ?x19152 l_0_8_59)))
 (let ((?x19149 (* 2.0 l_0_8_49)))
 (let ((?x19314 (* ?x19149 l_0_8_58)))
 (let ((?x15156 (* 2.0 l_0_8_45)))
 (let ((?x18952 (* ?x15156 l_0_8_59)))
 (let ((?x15150 (* 2.0 l_0_8_44)))
 (let ((?x18950 (* ?x15150 l_0_8_58)))
 (let ((?x17848 (* 12.0 l_0_8_31)))
 (let ((?x18020 (* ?x17848 l_0_8_40)))
 (let ((?x17845 (* 12.0 l_0_8_30)))
 (let ((?x18018 (* ?x17845 l_0_8_39)))
 (let ((?x17842 (* 12.0 l_0_8_29)))
 (let ((?x18016 (* ?x17842 l_0_8_38)))
 (let ((?x17839 (* 12.0 l_0_8_28)))
 (let ((?x18014 (* ?x17839 l_0_8_37)))
 (let ((?x17093 (* 12.0 l_0_8_18)))
 (let ((?x18012 (* ?x17093 l_0_8_9)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19289 (* ?x17090 l_0_8_176)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19287 (* ?x17087 l_0_8_175)))
 (let ((?x17082 (* 12.0 l_0_8_17)))
 (let ((?x18001 (* ?x17082 l_0_8_8)))
 (let ((?x17077 (* 12.0 l_0_8_16)))
 (let ((?x17999 (* ?x17077 l_0_8_7)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19283 (* ?x17074 l_0_8_155)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19281 (* ?x17071 l_0_8_154)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19279 (* ?x17064 l_0_8_113)))
 (let ((?x17802 (* 12.0 l_0_8_10)))
 (let ((?x17972 (* ?x17802 l_0_8_19)))
 (let ((?x19284 (+ (+ (+ (+ ?x17972 (* (* 2.0 l_0_8_107) l_0_8_112)) ?x19279) ?x19281) ?x19283)))
 (let ((?x19293 (- (+ (- (- (+ (+ ?x19284 ?x17999) ?x18001) ?x19287) ?x19289) ?x18012) (* (* 2.0 l_0_8_196) l_0_8_205))))
 (let ((?x19297 (- (- ?x19293 (* (* 2.0 l_0_8_197) l_0_8_206)) (* (* 2.0 l_0_8_198) l_0_8_207))))
 (let ((?x19301 (- (- ?x19297 (* (* 2.0 l_0_8_199) l_0_8_208)) (* (* 2.0 l_0_8_217) l_0_8_226))))
 (let ((?x19305 (- (- ?x19301 (* (* 2.0 l_0_8_218) l_0_8_227)) (* (* 2.0 l_0_8_219) l_0_8_228))))
 (let ((?x19310 (- (- (- (- ?x19305 (* (* 2.0 l_0_8_220) l_0_8_229)) ?x18014) ?x18016) ?x18018)))
 (let ((?x19321 (- (- (- (- (+ (+ (- ?x19310 ?x18020) ?x18950) ?x18952) ?x19314) ?x19316) ?x19318) ?x19320)))
 (let ((?x19333 (- (+ (+ (+ (+ (- (- ?x19321 ?x18954) ?x18956) ?x19324) ?x19326) ?x19328) ?x19330) ?x19332)))
 (= (- ?x19333 ?x19334) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18218 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x18215 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x18212 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x18209 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x18206 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x19485 (* l_0_8_225 l_0_8_225)))
 (let ((?x19483 (* l_0_8_224 l_0_8_224)))
 (let ((?x19481 (* l_0_8_223 l_0_8_223)))
 (let ((?x19479 (* l_0_8_222 l_0_8_222)))
 (let ((?x19477 (* l_0_8_221 l_0_8_221)))
 (let ((?x19475 (* l_0_8_204 l_0_8_204)))
 (let ((?x19473 (* l_0_8_203 l_0_8_203)))
 (let ((?x19471 (* l_0_8_202 l_0_8_202)))
 (let ((?x19469 (* l_0_8_201 l_0_8_201)))
 (let ((?x19467 (* l_0_8_200 l_0_8_200)))
 (let ((?x16308 (* l_0_8_15 l_0_8_15)))
 (let ((?x18203 (* 6.0 ?x16308)))
 (let ((?x16306 (* l_0_8_14 l_0_8_14)))
 (let ((?x18197 (* 6.0 ?x16306)))
 (let ((?x16304 (* l_0_8_13 l_0_8_13)))
 (let ((?x18186 (* 6.0 ?x16304)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x16891 (* ?x16531 l_0_8_138)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x16888 (* ?x16518 l_0_8_137)))
 (let ((?x16301 (* l_0_8_12 l_0_8_12)))
 (let ((?x18184 (* 6.0 ?x16301)))
 (let ((?x16322 (* l_0_8_11 l_0_8_11)))
 (let ((?x18183 (* 6.0 ?x16322)))
 (let ((?x18185 (+ ?x18183 ?x18184)))
 (let ((?x19470 (- (- (+ (+ (+ (- (- ?x18185 ?x16888) ?x16891) ?x18186) ?x18197) ?x18203) ?x19467) ?x19469)))
 (let ((?x19484 (- (- (- (- (- (- (- ?x19470 ?x19471) ?x19473) ?x19475) ?x19477) ?x19479) ?x19481) ?x19483)))
 (let ((?x19494 (- (- (- (- (- (- (- ?x19484 ?x19485) ?x18206) ?x18209) ?x18212) ?x18215) ?x18218) (* (* 1.0 l_0_8_53) l_0_8_53))))
 (let ((?x19500 (- (- ?x19494 (* (* 1.0 l_0_8_54) l_0_8_54)) (* (* 1.0 l_0_8_55) l_0_8_55))))
 (let ((?x19506 (- (- ?x19500 (* (* 1.0 l_0_8_56) l_0_8_56)) (* (* 1.0 l_0_8_57) l_0_8_57))))
 (let ((?x19510 (+ (+ ?x19506 (* 1.0 (* l_0_8_74 l_0_8_74))) (* 1.0 (* l_0_8_75 l_0_8_75)))))
 (let ((?x19514 (+ (+ ?x19510 (* 1.0 (* l_0_8_76 l_0_8_76))) (* 1.0 (* l_0_8_77 l_0_8_77)))))
 (= (+ ?x19514 (* 1.0 (* l_0_8_78 l_0_8_78))) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x19670 (* ?x17141 l_0_8_96)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x19668 (* ?x17138 l_0_8_95)))
 (let ((?x19666 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x19663 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x19660 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x19657 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x19654 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x19651 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x19648 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x19645 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x19642 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x19639 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x18382 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x18379 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x18376 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x18373 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x18370 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19601 (* ?x17090 l_0_8_180)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19599 (* ?x17087 l_0_8_179)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19597 (* ?x17074 l_0_8_159)))
 (let ((?x18355 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19594 (* ?x17071 l_0_8_158)))
 (let ((?x18346 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x16893 (* 12.0 l_0_8_13)))
 (let ((?x18331 (* ?x16893 l_0_8_18)))
 (let ((?x16531 (* 2.0 l_0_8_129)))
 (let ((?x17069 (* ?x16531 l_0_8_143)))
 (let ((?x16518 (* 2.0 l_0_8_128)))
 (let ((?x17067 (* ?x16518 l_0_8_142)))
 (let ((?x16882 (* 12.0 l_0_8_12)))
 (let ((?x18329 (* ?x16882 l_0_8_17)))
 (let ((?x16878 (* 12.0 l_0_8_11)))
 (let ((?x18323 (* ?x16878 l_0_8_16)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19586 (* ?x17064 l_0_8_117)))
 (let ((?x19590 (- (+ (+ (+ (* (* 2.0 l_0_8_107) l_0_8_116) ?x19586) ?x18323) ?x18329) ?x17067)))
 (let ((?x19600 (- (+ (+ (+ (+ (+ (- ?x19590 ?x17069) ?x18331) ?x18346) ?x19594) ?x18355) ?x19597) ?x19599)))
 (let ((?x19608 (- (- (- ?x19600 ?x19601) (* (* 2.0 l_0_8_200) l_0_8_205)) (* (* 2.0 l_0_8_201) l_0_8_206))))
 (let ((?x19614 (- (- ?x19608 (* (* 2.0 l_0_8_202) l_0_8_207)) (* (* 2.0 l_0_8_203) l_0_8_208))))
 (let ((?x19620 (- (- ?x19614 (* (* 2.0 l_0_8_204) l_0_8_209)) (* (* 2.0 l_0_8_221) l_0_8_226))))
 (let ((?x19626 (- (- ?x19620 (* (* 2.0 l_0_8_222) l_0_8_227)) (* (* 2.0 l_0_8_223) l_0_8_228))))
 (let ((?x19632 (- (- ?x19626 (* (* 2.0 l_0_8_224) l_0_8_229)) (* (* 2.0 l_0_8_225) l_0_8_230))))
 (let ((?x19643 (- (- (- (- (- (- (- ?x19632 ?x18370) ?x18373) ?x18376) ?x18379) ?x18382) ?x19639) ?x19642)))
 (let ((?x19664 (+ (+ (+ (+ (- (- (- ?x19643 ?x19645) ?x19648) ?x19651) ?x19654) ?x19657) ?x19660) ?x19663)))
 (= (- (- (+ ?x19664 ?x19666) ?x19668) ?x19670) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18630 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x18627 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x18624 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x18621 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x18618 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x18615 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x19860 (* l_0_8_231 l_0_8_231)))
 (let ((?x19858 (* l_0_8_230 l_0_8_230)))
 (let ((?x19856 (* l_0_8_229 l_0_8_229)))
 (let ((?x19854 (* l_0_8_228 l_0_8_228)))
 (let ((?x19852 (* l_0_8_227 l_0_8_227)))
 (let ((?x19850 (* l_0_8_226 l_0_8_226)))
 (let ((?x19848 (* l_0_8_210 l_0_8_210)))
 (let ((?x16472 (* l_0_8_21 l_0_8_21)))
 (let ((?x18612 (* 6.0 ?x16472)))
 (let ((?x19845 (* l_0_8_209 l_0_8_209)))
 (let ((?x19843 (* l_0_8_208 l_0_8_208)))
 (let ((?x19841 (* l_0_8_207 l_0_8_207)))
 (let ((?x19839 (* l_0_8_206 l_0_8_206)))
 (let ((?x19837 (* l_0_8_205 l_0_8_205)))
 (let ((?x16470 (* l_0_8_20 l_0_8_20)))
 (let ((?x18610 (* 6.0 ?x16470)))
 (let ((?x16468 (* l_0_8_19 l_0_8_19)))
 (let ((?x18608 (* 6.0 ?x16468)))
 (let ((?x16466 (* l_0_8_18 l_0_8_18)))
 (let ((?x18606 (* 6.0 ?x16466)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19832 (* ?x17090 l_0_8_185)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19830 (* ?x17087 l_0_8_184)))
 (let ((?x16464 (* l_0_8_17 l_0_8_17)))
 (let ((?x18598 (* 6.0 ?x16464)))
 (let ((?x16460 (* l_0_8_16 l_0_8_16)))
 (let ((?x18596 (* 6.0 ?x16460)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19826 (* ?x17074 l_0_8_164)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19824 (* ?x17071 l_0_8_163)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19822 (* ?x17064 l_0_8_122)))
 (let ((?x17062 (* 2.0 l_0_8_107)))
 (let ((?x19820 (* ?x17062 l_0_8_121)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x19818 (* ?x18566 l_0_8_87)))
 (let ((?x19825 (+ (+ (+ (- (* (* (- 2.0) l_0_8_100) l_0_8_86) ?x19818) ?x19820) ?x19822) ?x19824)))
 (let ((?x19835 (+ (+ (- (- (+ (+ (+ ?x19825 ?x19826) ?x18596) ?x18598) ?x19830) ?x19832) ?x18606) ?x18608)))
 (let ((?x19847 (+ (- (- (- (- (- (+ ?x19835 ?x18610) ?x19837) ?x19839) ?x19841) ?x19843) ?x19845) ?x18612)))
 (let ((?x19861 (- (- (- (- (- (- (- ?x19847 ?x19848) ?x19850) ?x19852) ?x19854) ?x19856) ?x19858) ?x19860)))
 (let ((?x19870 (- (- (- (- (- (- (- ?x19861 ?x18615) ?x18618) ?x18621) ?x18624) ?x18627) ?x18630) (* (* 1.0 l_0_8_58) l_0_8_58))))
 (let ((?x19876 (- (- ?x19870 (* (* 1.0 l_0_8_59) l_0_8_59)) (* (* 1.0 l_0_8_60) l_0_8_60))))
 (let ((?x19882 (- (- ?x19876 (* (* 1.0 l_0_8_61) l_0_8_61)) (* (* 1.0 l_0_8_62) l_0_8_62))))
 (let ((?x19887 (+ (- ?x19882 (* (* 1.0 l_0_8_63) l_0_8_63)) (* 1.0 (* l_0_8_79 l_0_8_79)))))
 (let ((?x19891 (+ (+ ?x19887 (* 1.0 (* l_0_8_80 l_0_8_80))) (* 1.0 (* l_0_8_81 l_0_8_81)))))
 (let ((?x19895 (+ (+ ?x19891 (* 1.0 (* l_0_8_82 l_0_8_82))) (* 1.0 (* l_0_8_83 l_0_8_83)))))
 (= (+ ?x19895 (* 1.0 (* l_0_8_84 l_0_8_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15408 (* l_0_8_64 l_0_8_64)))
 (let ((?x15447 (* 3.0 ?x15408)))
 (= (+ (* (* (- 3.0) l_0_8_43) l_0_8_43) ?x15447) 0.0))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x15789 (* ?x15788 l_0_8_86)))
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15873 (* ?x15553 l_0_8_67)))
 (let ((?x15548 (* 6.0 l_0_8_43)))
 (let ((?x15866 (* ?x15548 l_0_8_46)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x15769 (* ?x15768 l_0_8_170)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x15763 (* ?x15762 l_0_8_149)))
 (let ((?x20009 (+ (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_107) ?x15763) ?x15769) ?x15866) ?x15873)))
 (= (+ ?x20009 ?x15789) 0.0)))))))))))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15931 (* ?x15553 l_0_8_70)))
 (= (+ (* (* (- 6.0) l_0_8_43) l_0_8_49) ?x15931) 0.0))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x15996 (* ?x15553 l_0_8_74)))
 (= (+ (* (* (- 6.0) l_0_8_43) l_0_8_53) ?x15996) 0.0))))
(assert
 (let ((?x15553 (* 6.0 l_0_8_64)))
 (let ((?x16064 (* ?x15553 l_0_8_79)))
 (= (+ (* (* (- 6.0) l_0_8_43) l_0_8_58) ?x16064) 0.0))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x17142 (* ?x17141 l_0_8_89)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x17139 (* ?x17138 l_0_8_88)))
 (let ((?x16596 (* l_0_8_69 l_0_8_69)))
 (let ((?x17332 (* 3.0 ?x16596)))
 (let ((?x16593 (* l_0_8_68 l_0_8_68)))
 (let ((?x17330 (* 3.0 ?x16593)))
 (let ((?x16590 (* l_0_8_67 l_0_8_67)))
 (let ((?x17328 (* 3.0 ?x16590)))
 (let ((?x17322 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x17319 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x17316 (* (* 3.0 l_0_8_46) l_0_8_46)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x17091 (* ?x17090 l_0_8_173)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x17088 (* ?x17087 l_0_8_172)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x17075 (* ?x17074 l_0_8_152)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x17072 (* ?x17071 l_0_8_151)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x17065 (* ?x17064 l_0_8_110)))
 (let ((?x20047 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_109) ?x17065) ?x17072) ?x17075) ?x17088)))
 (let ((?x20054 (+ (+ (+ (- (- (- (+ ?x20047 ?x17091) ?x17316) ?x17319) ?x17322) ?x17328) ?x17330) ?x17332)))
 (= (+ (+ ?x20054 ?x17139) ?x17142) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x19334 (* ?x17141 l_0_8_92)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x19332 (* ?x17138 l_0_8_91)))
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17435 (* ?x17434 l_0_8_72)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17431 (* ?x17430 l_0_8_71)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17427 (* ?x17426 l_0_8_70)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17419 (* ?x17418 l_0_8_51)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17415 (* ?x17414 l_0_8_50)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17411 (* ?x17410 l_0_8_49)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19289 (* ?x17090 l_0_8_176)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19287 (* ?x17087 l_0_8_175)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19283 (* ?x17074 l_0_8_155)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19281 (* ?x17071 l_0_8_154)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19279 (* ?x17064 l_0_8_113)))
 (let ((?x20084 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_112) ?x19279) ?x19281) ?x19283) ?x19287)))
 (let ((?x20091 (+ (+ (+ (- (- (- (+ ?x20084 ?x19289) ?x17411) ?x17415) ?x17419) ?x17427) ?x17431) ?x17435)))
 (= (+ (+ ?x20091 ?x19332) ?x19334) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17141 (* 2.0 l_0_8_87)))
 (let ((?x19670 (* ?x17141 l_0_8_96)))
 (let ((?x17138 (* 2.0 l_0_8_86)))
 (let ((?x19668 (* ?x17138 l_0_8_95)))
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17530 (* ?x17434 l_0_8_76)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17528 (* ?x17430 l_0_8_75)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17526 (* ?x17426 l_0_8_74)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17522 (* ?x17418 l_0_8_55)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17520 (* ?x17414 l_0_8_54)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17518 (* ?x17410 l_0_8_53)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19601 (* ?x17090 l_0_8_180)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19599 (* ?x17087 l_0_8_179)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19597 (* ?x17074 l_0_8_159)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19594 (* ?x17071 l_0_8_158)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19586 (* ?x17064 l_0_8_117)))
 (let ((?x20121 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_116) ?x19586) ?x19594) ?x19597) ?x19599)))
 (let ((?x20128 (+ (+ (+ (- (- (- (+ ?x20121 ?x19601) ?x17518) ?x17520) ?x17522) ?x17526) ?x17528) ?x17530)))
 (= (+ (+ ?x20128 ?x19668) ?x19670) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17434 (* 6.0 l_0_8_69)))
 (let ((?x17621 (* ?x17434 l_0_8_81)))
 (let ((?x17430 (* 6.0 l_0_8_68)))
 (let ((?x17619 (* ?x17430 l_0_8_80)))
 (let ((?x17426 (* 6.0 l_0_8_67)))
 (let ((?x17617 (* ?x17426 l_0_8_79)))
 (let ((?x17418 (* 6.0 l_0_8_48)))
 (let ((?x17613 (* ?x17418 l_0_8_60)))
 (let ((?x17414 (* 6.0 l_0_8_47)))
 (let ((?x17611 (* ?x17414 l_0_8_59)))
 (let ((?x17410 (* 6.0 l_0_8_46)))
 (let ((?x17609 (* ?x17410 l_0_8_58)))
 (let ((?x17090 (* 2.0 l_0_8_171)))
 (let ((?x19832 (* ?x17090 l_0_8_185)))
 (let ((?x17087 (* 2.0 l_0_8_170)))
 (let ((?x19830 (* ?x17087 l_0_8_184)))
 (let ((?x17074 (* 2.0 l_0_8_150)))
 (let ((?x19826 (* ?x17074 l_0_8_164)))
 (let ((?x17071 (* 2.0 l_0_8_149)))
 (let ((?x19824 (* ?x17071 l_0_8_163)))
 (let ((?x17064 (* 2.0 l_0_8_108)))
 (let ((?x19822 (* ?x17064 l_0_8_122)))
 (let ((?x17062 (* 2.0 l_0_8_107)))
 (let ((?x19820 (* ?x17062 l_0_8_121)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x19818 (* ?x18566 l_0_8_87)))
 (let ((?x20162 (- (- (- (+ (* (* 2.0 l_0_8_100) l_0_8_86) ?x19818) ?x19820) ?x19822) ?x19824)))
 (let ((?x20169 (+ (- (- (- (+ (+ (- ?x20162 ?x19826) ?x19830) ?x19832) ?x17609) ?x17611) ?x17613) ?x17617)))
 (= (+ (+ ?x20169 ?x17619) ?x17621) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17736 (* l_0_8_73 l_0_8_73)))
 (let ((?x17737 (* 3.0 ?x17736)))
 (let ((?x17733 (* l_0_8_72 l_0_8_72)))
 (let ((?x17734 (* 3.0 ?x17733)))
 (let ((?x17730 (* l_0_8_71 l_0_8_71)))
 (let ((?x17731 (* 3.0 ?x17730)))
 (let ((?x17727 (* l_0_8_70 l_0_8_70)))
 (let ((?x17728 (* 3.0 ?x17727)))
 (let ((?x17720 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x17717 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x17714 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x20208 (+ (- (- (- (* (* (- 3.0) l_0_8_49) l_0_8_49) ?x17714) ?x17717) ?x17720) ?x17728)))
 (= (+ (+ (+ ?x20208 ?x17731) ?x17734) ?x17737) 0.0))))))))))))))
(assert
 (let ((?x17878 (* 6.0 l_0_8_73)))
 (let ((?x17879 (* ?x17878 l_0_8_77)))
 (let ((?x17875 (* 6.0 l_0_8_72)))
 (let ((?x17876 (* ?x17875 l_0_8_76)))
 (let ((?x17872 (* 6.0 l_0_8_71)))
 (let ((?x17873 (* ?x17872 l_0_8_75)))
 (let ((?x17869 (* 6.0 l_0_8_70)))
 (let ((?x17870 (* ?x17869 l_0_8_74)))
 (let ((?x17863 (* 6.0 l_0_8_52)))
 (let ((?x17864 (* ?x17863 l_0_8_56)))
 (let ((?x17860 (* 6.0 l_0_8_51)))
 (let ((?x17861 (* ?x17860 l_0_8_55)))
 (let ((?x17857 (* 6.0 l_0_8_50)))
 (let ((?x17858 (* ?x17857 l_0_8_54)))
 (let ((?x20226 (+ (- (- (- (* (* (- 6.0) l_0_8_49) l_0_8_53) ?x17858) ?x17861) ?x17864) ?x17870)))
 (= (+ (+ (+ ?x20226 ?x17873) ?x17876) ?x17879) 0.0)))))))))))))))))
(assert
 (let ((?x17878 (* 6.0 l_0_8_73)))
 (let ((?x18042 (* ?x17878 l_0_8_82)))
 (let ((?x17875 (* 6.0 l_0_8_72)))
 (let ((?x18040 (* ?x17875 l_0_8_81)))
 (let ((?x17872 (* 6.0 l_0_8_71)))
 (let ((?x18038 (* ?x17872 l_0_8_80)))
 (let ((?x17869 (* 6.0 l_0_8_70)))
 (let ((?x18036 (* ?x17869 l_0_8_79)))
 (let ((?x17863 (* 6.0 l_0_8_52)))
 (let ((?x18031 (* ?x17863 l_0_8_61)))
 (let ((?x17860 (* 6.0 l_0_8_51)))
 (let ((?x18029 (* ?x17860 l_0_8_60)))
 (let ((?x17857 (* 6.0 l_0_8_50)))
 (let ((?x18027 (* ?x17857 l_0_8_59)))
 (let ((?x20247 (+ (- (- (- (* (* (- 6.0) l_0_8_49) l_0_8_58) ?x18027) ?x18029) ?x18031) ?x18036)))
 (= (+ (+ (+ ?x20247 ?x18038) ?x18040) ?x18042) 0.0)))))))))))))))))
(assert
 (let ((?x18247 (* l_0_8_78 l_0_8_78)))
 (let ((?x18248 (* 3.0 ?x18247)))
 (let ((?x18244 (* l_0_8_77 l_0_8_77)))
 (let ((?x18245 (* 3.0 ?x18244)))
 (let ((?x18241 (* l_0_8_76 l_0_8_76)))
 (let ((?x18242 (* 3.0 ?x18241)))
 (let ((?x18238 (* l_0_8_75 l_0_8_75)))
 (let ((?x18239 (* 3.0 ?x18238)))
 (let ((?x18235 (* l_0_8_74 l_0_8_74)))
 (let ((?x18236 (* 3.0 ?x18235)))
 (let ((?x18233 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x18230 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x18227 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x18224 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x20269 (- (- (- (- (* (* (- 3.0) l_0_8_53) l_0_8_53) ?x18224) ?x18227) ?x18230) ?x18233)))
 (= (+ (+ (+ (+ (+ ?x20269 ?x18236) ?x18239) ?x18242) ?x18245) ?x18248) 0.0)))))))))))))))))
(assert
 (let ((?x18412 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x18409 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x18406 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x18403 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x18400 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x18397 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x18394 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x18391 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x18388 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x20291 (- (- (- (- (* (* (- 6.0) l_0_8_53) l_0_8_58) ?x18388) ?x18391) ?x18394) ?x18397)))
 (= (+ (+ (+ (+ (+ ?x20291 ?x18400) ?x18403) ?x18406) ?x18409) ?x18412) 0.0))))))))))))
(assert
 (let ((?x18665 (* l_0_8_84 l_0_8_84)))
 (let ((?x18666 (* 3.0 ?x18665)))
 (let ((?x18662 (* l_0_8_83 l_0_8_83)))
 (let ((?x18663 (* 3.0 ?x18662)))
 (let ((?x18659 (* l_0_8_82 l_0_8_82)))
 (let ((?x18660 (* 3.0 ?x18659)))
 (let ((?x18656 (* l_0_8_81 l_0_8_81)))
 (let ((?x18657 (* 3.0 ?x18656)))
 (let ((?x18653 (* l_0_8_80 l_0_8_80)))
 (let ((?x18654 (* 3.0 ?x18653)))
 (let ((?x18650 (* l_0_8_79 l_0_8_79)))
 (let ((?x18651 (* 3.0 ?x18650)))
 (let ((?x18648 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x18645 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x18642 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x18639 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x18636 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x20318 (- (- (- (- (* (* (- 3.0) l_0_8_58) l_0_8_58) ?x18636) ?x18639) ?x18642) ?x18645)))
 (let ((?x20325 (+ (+ (+ (+ (+ (+ (- ?x20318 ?x18648) ?x18651) ?x18654) ?x18657) ?x18660) ?x18663) ?x18666)))
 (= ?x20325 0.0)))))))))))))))))))))
(assert
 (let ((?x17736 (* l_0_8_73 l_0_8_73)))
 (let ((?x17733 (* l_0_8_72 l_0_8_72)))
 (let ((?x17730 (* l_0_8_71 l_0_8_71)))
 (let ((?x17727 (* l_0_8_70 l_0_8_70)))
 (let ((?x17784 (* l_0_8_52 l_0_8_52)))
 (let ((?x17778 (* l_0_8_51 l_0_8_51)))
 (let ((?x20341 (+ (+ (+ (* l_0_8_49 l_0_8_49) (* l_0_8_50 l_0_8_50)) ?x17778) ?x17784)))
 (= (- (- (- (- ?x20341 ?x17727) ?x17730) ?x17733) ?x17736) 0.0)))))))))
(assert
 (let ((?x19172 (* 2.0 l_0_8_73)))
 (let ((?x19173 (* ?x19172 l_0_8_77)))
 (let ((?x19169 (* 2.0 l_0_8_72)))
 (let ((?x19170 (* ?x19169 l_0_8_76)))
 (let ((?x19166 (* 2.0 l_0_8_71)))
 (let ((?x19167 (* ?x19166 l_0_8_75)))
 (let ((?x19163 (* 2.0 l_0_8_70)))
 (let ((?x19164 (* ?x19163 l_0_8_74)))
 (let ((?x19158 (* 2.0 l_0_8_52)))
 (let ((?x19159 (* ?x19158 l_0_8_56)))
 (let ((?x19155 (* 2.0 l_0_8_51)))
 (let ((?x19156 (* ?x19155 l_0_8_55)))
 (let ((?x19152 (* 2.0 l_0_8_50)))
 (let ((?x19153 (* ?x19152 l_0_8_54)))
 (let ((?x19149 (* 2.0 l_0_8_49)))
 (let ((?x19150 (* ?x19149 l_0_8_53)))
 (let ((?x17693 (* l_0_8_136 l_0_8_136)))
 (let ((?x17691 (* l_0_8_135 l_0_8_135)))
 (let ((?x20361 (- (- (* (- l_0_8_133) l_0_8_133) (* l_0_8_134 l_0_8_134)) ?x17691)))
 (let ((?x20368 (- (- (+ (+ (+ (+ (- ?x20361 ?x17693) ?x19150) ?x19153) ?x19156) ?x19159) ?x19164) ?x19167)))
 (= (- (- ?x20368 ?x19170) ?x19173) 0.0))))))))))))))))))))))
(assert
 (let ((?x20434 (* l_0_8_94 l_0_8_94)))
 (let ((?x20432 (* l_0_8_93 l_0_8_93)))
 (let ((?x20430 (* l_0_8_92 l_0_8_92)))
 (let ((?x20428 (* l_0_8_91 l_0_8_91)))
 (let ((?x19172 (* 2.0 l_0_8_73)))
 (let ((?x19330 (* ?x19172 l_0_8_82)))
 (let ((?x19169 (* 2.0 l_0_8_72)))
 (let ((?x19328 (* ?x19169 l_0_8_81)))
 (let ((?x19166 (* 2.0 l_0_8_71)))
 (let ((?x19326 (* ?x19166 l_0_8_80)))
 (let ((?x19163 (* 2.0 l_0_8_70)))
 (let ((?x19324 (* ?x19163 l_0_8_79)))
 (let ((?x19158 (* 2.0 l_0_8_52)))
 (let ((?x19320 (* ?x19158 l_0_8_61)))
 (let ((?x19155 (* 2.0 l_0_8_51)))
 (let ((?x19318 (* ?x19155 l_0_8_60)))
 (let ((?x19152 (* 2.0 l_0_8_50)))
 (let ((?x19316 (* ?x19152 l_0_8_59)))
 (let ((?x19149 (* 2.0 l_0_8_49)))
 (let ((?x19314 (* ?x19149 l_0_8_58)))
 (let ((?x20418 (* l_0_8_178 l_0_8_178)))
 (let ((?x20416 (* l_0_8_177 l_0_8_177)))
 (let ((?x20414 (* l_0_8_176 l_0_8_176)))
 (let ((?x20412 (* l_0_8_175 l_0_8_175)))
 (let ((?x20410 (* l_0_8_157 l_0_8_157)))
 (let ((?x20408 (* l_0_8_156 l_0_8_156)))
 (let ((?x20406 (* l_0_8_155 l_0_8_155)))
 (let ((?x20404 (* l_0_8_154 l_0_8_154)))
 (let ((?x20402 (* l_0_8_115 l_0_8_115)))
 (let ((?x20400 (* l_0_8_114 l_0_8_114)))
 (let ((?x20403 (+ (+ (+ (* l_0_8_112 l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x20400) ?x20402)))
 (let ((?x20417 (- (- (- (+ (+ (+ (+ ?x20403 ?x20404) ?x20406) ?x20408) ?x20410) ?x20412) ?x20414) ?x20416)))
 (let ((?x20425 (- (- (+ (+ (+ (+ (- ?x20417 ?x20418) ?x19314) ?x19316) ?x19318) ?x19320) ?x19324) ?x19326)))
 (= (- (- (- (- (- (- ?x20425 ?x19328) ?x19330) ?x20428) ?x20430) ?x20432) ?x20434) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18247 (* l_0_8_78 l_0_8_78)))
 (let ((?x18244 (* l_0_8_77 l_0_8_77)))
 (let ((?x18241 (* l_0_8_76 l_0_8_76)))
 (let ((?x18238 (* l_0_8_75 l_0_8_75)))
 (let ((?x18235 (* l_0_8_74 l_0_8_74)))
 (let ((?x18314 (* l_0_8_57 l_0_8_57)))
 (let ((?x18308 (* l_0_8_56 l_0_8_56)))
 (let ((?x18302 (* l_0_8_55 l_0_8_55)))
 (let ((?x18296 (* l_0_8_54 l_0_8_54)))
 (let ((?x18290 (* l_0_8_53 l_0_8_53)))
 (let ((?x17836 (* 2.0 l_0_8_136)))
 (let ((?x17837 (* ?x17836 l_0_8_140)))
 (let ((?x17833 (* 2.0 l_0_8_135)))
 (let ((?x17834 (* ?x17833 l_0_8_139)))
 (let ((?x17830 (* 2.0 l_0_8_134)))
 (let ((?x17831 (* ?x17830 l_0_8_138)))
 (let ((?x20485 (+ (- (- (- (* (* (- 2.0) l_0_8_133) l_0_8_137) ?x17831) ?x17834) ?x17837) ?x18290)))
 (let ((?x20492 (- (- (- (+ (+ (+ (+ ?x20485 ?x18296) ?x18302) ?x18308) ?x18314) ?x18235) ?x18238) ?x18241)))
 (= (- (- ?x20492 ?x18244) ?x18247) 0.0))))))))))))))))))))
(assert
 (let ((?x20586 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x20583 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x20580 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x20577 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x19666 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x19663 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x19660 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x19657 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x19654 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x19651 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x19648 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x19645 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x19642 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x19639 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x20563 (* 2.0 l_0_8_178)))
 (let ((?x20564 (* ?x20563 l_0_8_182)))
 (let ((?x20560 (* 2.0 l_0_8_177)))
 (let ((?x20561 (* ?x20560 l_0_8_181)))
 (let ((?x20557 (* 2.0 l_0_8_176)))
 (let ((?x20558 (* ?x20557 l_0_8_180)))
 (let ((?x20554 (* 2.0 l_0_8_175)))
 (let ((?x20555 (* ?x20554 l_0_8_179)))
 (let ((?x20551 (* 2.0 l_0_8_157)))
 (let ((?x20552 (* ?x20551 l_0_8_161)))
 (let ((?x20548 (* 2.0 l_0_8_156)))
 (let ((?x20549 (* ?x20548 l_0_8_160)))
 (let ((?x20545 (* 2.0 l_0_8_155)))
 (let ((?x20546 (* ?x20545 l_0_8_159)))
 (let ((?x20542 (* 2.0 l_0_8_154)))
 (let ((?x20543 (* ?x20542 l_0_8_158)))
 (let ((?x17836 (* 2.0 l_0_8_136)))
 (let ((?x17988 (* ?x17836 l_0_8_145)))
 (let ((?x17833 (* 2.0 l_0_8_135)))
 (let ((?x17986 (* ?x17833 l_0_8_144)))
 (let ((?x17830 (* 2.0 l_0_8_134)))
 (let ((?x17984 (* ?x17830 l_0_8_143)))
 (let ((?x17827 (* 2.0 l_0_8_133)))
 (let ((?x17982 (* ?x17827 l_0_8_142)))
 (let ((?x20535 (* 2.0 l_0_8_115)))
 (let ((?x20536 (* ?x20535 l_0_8_119)))
 (let ((?x20532 (* 2.0 l_0_8_114)))
 (let ((?x20533 (* ?x20532 l_0_8_118)))
 (let ((?x20529 (* 2.0 l_0_8_113)))
 (let ((?x20530 (* ?x20529 l_0_8_117)))
 (let ((?x20538 (- (+ (+ (+ (* (* 2.0 l_0_8_112) l_0_8_116) ?x20530) ?x20533) ?x20536) ?x17982)))
 (let ((?x20553 (+ (+ (+ (+ (- (- (- ?x20538 ?x17984) ?x17986) ?x17988) ?x20543) ?x20546) ?x20549) ?x20552)))
 (let ((?x20568 (+ (+ (+ (- (- (- (- ?x20553 ?x20555) ?x20558) ?x20561) ?x20564) ?x19639) ?x19642) ?x19645)))
 (let ((?x20575 (- (- (- (- (- (+ (+ ?x20568 ?x19648) ?x19651) ?x19654) ?x19657) ?x19660) ?x19663) ?x19666)))
 (= (- (- (- (- ?x20575 ?x20577) ?x20580) ?x20583) ?x20586) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18665 (* l_0_8_84 l_0_8_84)))
 (let ((?x18662 (* l_0_8_83 l_0_8_83)))
 (let ((?x18659 (* l_0_8_82 l_0_8_82)))
 (let ((?x18656 (* l_0_8_81 l_0_8_81)))
 (let ((?x18653 (* l_0_8_80 l_0_8_80)))
 (let ((?x18650 (* l_0_8_79 l_0_8_79)))
 (let ((?x18775 (* l_0_8_63 l_0_8_63)))
 (let ((?x18769 (* l_0_8_62 l_0_8_62)))
 (let ((?x18763 (* l_0_8_61 l_0_8_61)))
 (let ((?x18757 (* l_0_8_60 l_0_8_60)))
 (let ((?x18751 (* l_0_8_59 l_0_8_59)))
 (let ((?x18745 (* l_0_8_58 l_0_8_58)))
 (let ((?x20563 (* 2.0 l_0_8_178)))
 (let ((?x20732 (* ?x20563 l_0_8_187)))
 (let ((?x20560 (* 2.0 l_0_8_177)))
 (let ((?x20730 (* ?x20560 l_0_8_186)))
 (let ((?x20557 (* 2.0 l_0_8_176)))
 (let ((?x20728 (* ?x20557 l_0_8_185)))
 (let ((?x20554 (* 2.0 l_0_8_175)))
 (let ((?x20726 (* ?x20554 l_0_8_184)))
 (let ((?x20551 (* 2.0 l_0_8_157)))
 (let ((?x20724 (* ?x20551 l_0_8_166)))
 (let ((?x20548 (* 2.0 l_0_8_156)))
 (let ((?x20722 (* ?x20548 l_0_8_165)))
 (let ((?x20545 (* 2.0 l_0_8_155)))
 (let ((?x20720 (* ?x20545 l_0_8_164)))
 (let ((?x20542 (* 2.0 l_0_8_154)))
 (let ((?x20718 (* ?x20542 l_0_8_163)))
 (let ((?x20535 (* 2.0 l_0_8_115)))
 (let ((?x20716 (* ?x20535 l_0_8_124)))
 (let ((?x20532 (* 2.0 l_0_8_114)))
 (let ((?x20714 (* ?x20532 l_0_8_123)))
 (let ((?x20529 (* 2.0 l_0_8_113)))
 (let ((?x20712 (* ?x20529 l_0_8_122)))
 (let ((?x20527 (* 2.0 l_0_8_112)))
 (let ((?x20710 (* ?x20527 l_0_8_121)))
 (let ((?x20707 (* 2.0 l_0_8_103)))
 (let ((?x20708 (* ?x20707 l_0_8_94)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x20705 (* ?x18569 l_0_8_93)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x20703 (* ?x18566 l_0_8_92)))
 (let ((?x20711 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_91) ?x20703) ?x20705) ?x20708) ?x20710)))
 (let ((?x20725 (+ (+ (+ (+ (+ (+ (+ ?x20711 ?x20712) ?x20714) ?x20716) ?x20718) ?x20720) ?x20722) ?x20724)))
 (let ((?x20736 (+ (+ (+ (- (- (- (- ?x20725 ?x20726) ?x20728) ?x20730) ?x20732) ?x18745) ?x18751) ?x18757)))
 (let ((?x20743 (- (- (- (- (+ (+ (+ ?x20736 ?x18763) ?x18769) ?x18775) ?x18650) ?x18653) ?x18656) ?x18659)))
 (= (- (- ?x20743 ?x18662) ?x18665) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x20880 (* l_0_8_99 l_0_8_99)))
 (let ((?x20878 (* l_0_8_98 l_0_8_98)))
 (let ((?x20876 (* l_0_8_97 l_0_8_97)))
 (let ((?x20874 (* l_0_8_96 l_0_8_96)))
 (let ((?x20872 (* l_0_8_95 l_0_8_95)))
 (let ((?x20870 (* l_0_8_183 l_0_8_183)))
 (let ((?x20868 (* l_0_8_182 l_0_8_182)))
 (let ((?x20866 (* l_0_8_181 l_0_8_181)))
 (let ((?x20864 (* l_0_8_180 l_0_8_180)))
 (let ((?x20862 (* l_0_8_179 l_0_8_179)))
 (let ((?x20860 (* l_0_8_162 l_0_8_162)))
 (let ((?x20858 (* l_0_8_161 l_0_8_161)))
 (let ((?x20856 (* l_0_8_160 l_0_8_160)))
 (let ((?x20854 (* l_0_8_159 l_0_8_159)))
 (let ((?x20852 (* l_0_8_158 l_0_8_158)))
 (let ((?x18352 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18349 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x18343 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18340 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18337 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x20845 (* l_0_8_120 l_0_8_120)))
 (let ((?x20843 (* l_0_8_119 l_0_8_119)))
 (let ((?x20841 (* l_0_8_118 l_0_8_118)))
 (let ((?x20844 (+ (+ (+ (* l_0_8_116 l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20841) ?x20843)))
 (let ((?x20853 (+ (- (- (- (- (- (+ ?x20844 ?x20845) ?x18337) ?x18340) ?x18343) ?x18349) ?x18352) ?x20852)))
 (let ((?x20867 (- (- (- (+ (+ (+ (+ ?x20853 ?x20854) ?x20856) ?x20858) ?x20860) ?x20862) ?x20864) ?x20866)))
 (let ((?x20881 (- (- (- (- (- (- (- ?x20867 ?x20868) ?x20870) ?x20872) ?x20874) ?x20876) ?x20878) ?x20880)))
 (= ?x20881 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x21006 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x21003 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x21000 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x20997 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x20994 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x20991 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x20988 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x20985 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x20982 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x20979 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x18588 (* l_0_8_147 l_0_8_147)))
 (let ((?x18586 (* l_0_8_146 l_0_8_146)))
 (let ((?x18584 (* l_0_8_145 l_0_8_145)))
 (let ((?x18582 (* l_0_8_144 l_0_8_144)))
 (let ((?x18580 (* l_0_8_143 l_0_8_143)))
 (let ((?x18578 (* l_0_8_142 l_0_8_142)))
 (let ((?x20970 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x20967 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x20964 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x20961 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x20958 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x20955 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x20707 (* 2.0 l_0_8_103)))
 (let ((?x20952 (* ?x20707 l_0_8_98)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x20950 (* ?x18569 l_0_8_97)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x20948 (* ?x18566 l_0_8_96)))
 (let ((?x20956 (- (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_95) ?x20948) ?x20950) ?x20952) ?x20955)))
 (let ((?x20973 (- (- (+ (+ (+ (+ (+ ?x20956 ?x20958) ?x20961) ?x20964) ?x20967) ?x20970) ?x18578) ?x18580)))
 (let ((?x20986 (+ (+ (+ (- (- (- (- ?x20973 ?x18582) ?x18584) ?x18586) ?x18588) ?x20979) ?x20982) ?x20985)))
 (let ((?x21007 (- (- (- (- (- (+ (+ ?x20986 ?x20988) ?x20991) ?x20994) ?x20997) ?x21000) ?x21003) ?x21006)))
 (= ?x21007 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21164 (* l_0_8_189 l_0_8_189)))
 (let ((?x21162 (* l_0_8_188 l_0_8_188)))
 (let ((?x21160 (* l_0_8_187 l_0_8_187)))
 (let ((?x21158 (* l_0_8_186 l_0_8_186)))
 (let ((?x21156 (* l_0_8_185 l_0_8_185)))
 (let ((?x21154 (* l_0_8_184 l_0_8_184)))
 (let ((?x21152 (* l_0_8_168 l_0_8_168)))
 (let ((?x21150 (* l_0_8_167 l_0_8_167)))
 (let ((?x21148 (* l_0_8_166 l_0_8_166)))
 (let ((?x21146 (* l_0_8_165 l_0_8_165)))
 (let ((?x21144 (* l_0_8_164 l_0_8_164)))
 (let ((?x21142 (* l_0_8_163 l_0_8_163)))
 (let ((?x21140 (* l_0_8_126 l_0_8_126)))
 (let ((?x21138 (* l_0_8_125 l_0_8_125)))
 (let ((?x21136 (* l_0_8_124 l_0_8_124)))
 (let ((?x21134 (* l_0_8_123 l_0_8_123)))
 (let ((?x21132 (* l_0_8_122 l_0_8_122)))
 (let ((?x21130 (* l_0_8_121 l_0_8_121)))
 (let ((?x21128 (* l_0_8_105 l_0_8_105)))
 (let ((?x21126 (* l_0_8_104 l_0_8_104)))
 (let ((?x21124 (* l_0_8_103 l_0_8_103)))
 (let ((?x21122 (* l_0_8_102 l_0_8_102)))
 (let ((?x21123 (- (- (* (- l_0_8_100) l_0_8_100) (* l_0_8_101 l_0_8_101)) ?x21122)))
 (let ((?x21137 (+ (+ (+ (+ (- (- (- ?x21123 ?x21124) ?x21126) ?x21128) ?x21130) ?x21132) ?x21134) ?x21136)))
 (let ((?x21151 (+ (+ (+ (+ (+ (+ (+ ?x21137 ?x21138) ?x21140) ?x21142) ?x21144) ?x21146) ?x21148) ?x21150)))
 (let ((?x21165 (- (- (- (- (- (- (+ ?x21151 ?x21152) ?x21154) ?x21156) ?x21158) ?x21160) ?x21162) ?x21164)))
 (= ?x21165 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x15508 (* l_0_8_85 l_0_8_85)))
 (let ((?x15504 (* l_0_8_169 l_0_8_169)))
 (let ((?x21221 (+ (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_148 l_0_8_148)) ?x15504)))
 (= (+ ?x21221 ?x15508) 0.0)))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16066 (* ?x15788 l_0_8_88)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16048 (* ?x15768 l_0_8_172)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16044 (* ?x15762 l_0_8_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_109) ?x16044) ?x16048) ?x16066) 0.0))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16245 (* ?x15788 l_0_8_91)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16229 (* ?x15768 l_0_8_175)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16225 (* ?x15762 l_0_8_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x16225) ?x16229) ?x16245) 0.0))))))))
(assert
 (let ((?x15788 (* 2.0 l_0_8_85)))
 (let ((?x16380 (* ?x15788 l_0_8_95)))
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16363 (* ?x15768 l_0_8_179)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16358 (* ?x15762 l_0_8_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_116) ?x16358) ?x16363) ?x16380) 0.0))))))))
(assert
 (let ((?x15768 (* 2.0 l_0_8_169)))
 (let ((?x16462 (* ?x15768 l_0_8_184)))
 (let ((?x15762 (* 2.0 l_0_8_148)))
 (let ((?x16458 (* ?x15762 l_0_8_163)))
 (let ((?x15759 (* 2.0 l_0_8_106)))
 (let ((?x16456 (* ?x15759 l_0_8_121)))
 (= (+ (- (- (* (* 2.0 l_0_8_100) l_0_8_85) ?x16456) ?x16458) ?x16462) 0.0))))))))
(assert
 (let ((?x17627 (* l_0_8_90 l_0_8_90)))
 (let ((?x17625 (* l_0_8_89 l_0_8_89)))
 (let ((?x17623 (* l_0_8_88 l_0_8_88)))
 (let ((?x17601 (* l_0_8_174 l_0_8_174)))
 (let ((?x17599 (* l_0_8_173 l_0_8_173)))
 (let ((?x17597 (* l_0_8_172 l_0_8_172)))
 (let ((?x17593 (* l_0_8_153 l_0_8_153)))
 (let ((?x17591 (* l_0_8_152 l_0_8_152)))
 (let ((?x17589 (* l_0_8_151 l_0_8_151)))
 (let ((?x17581 (* l_0_8_111 l_0_8_111)))
 (let ((?x21280 (- (- (* (- l_0_8_109) l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x17581)))
 (let ((?x21287 (+ (+ (+ (+ (- (- (- ?x21280 ?x17589) ?x17591) ?x17593) ?x17597) ?x17599) ?x17601) ?x17623)))
 (= (+ (+ ?x21287 ?x17625) ?x17627) 0.0))))))))))))))
(assert
 (let ((?x18050 (* 2.0 l_0_8_90)))
 (let ((?x18051 (* ?x18050 l_0_8_93)))
 (let ((?x18047 (* 2.0 l_0_8_89)))
 (let ((?x18048 (* ?x18047 l_0_8_92)))
 (let ((?x18044 (* 2.0 l_0_8_88)))
 (let ((?x18045 (* ?x18044 l_0_8_91)))
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18010 (* ?x18009 l_0_8_177)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18007 (* ?x18006 l_0_8_176)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18004 (* ?x18003 l_0_8_175)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x17997 (* ?x17996 l_0_8_156)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x17994 (* ?x17993 l_0_8_155)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x17991 (* ?x17990 l_0_8_154)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x17980 (* ?x17979 l_0_8_114)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x17977 (* ?x17976 l_0_8_113)))
 (let ((?x3409 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_112) ?x17977) ?x17980) ?x17991) ?x17994)))
 (let ((?x21307 (+ (+ (+ (+ (+ (+ (- ?x3409 ?x17997) ?x18004) ?x18007) ?x18010) ?x18045) ?x18048) ?x18051)))
 (= ?x21307 0.0))))))))))))))))))))))))))
(assert
 (let ((?x18050 (* 2.0 l_0_8_90)))
 (let ((?x18418 (* ?x18050 l_0_8_97)))
 (let ((?x18047 (* 2.0 l_0_8_89)))
 (let ((?x18416 (* ?x18047 l_0_8_96)))
 (let ((?x18044 (* 2.0 l_0_8_88)))
 (let ((?x18414 (* ?x18044 l_0_8_95)))
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18367 (* ?x18009 l_0_8_181)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18365 (* ?x18006 l_0_8_180)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18363 (* ?x18003 l_0_8_179)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x18361 (* ?x17996 l_0_8_160)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x18359 (* ?x17993 l_0_8_159)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x18357 (* ?x17990 l_0_8_158)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x18327 (* ?x17979 l_0_8_118)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x18325 (* ?x17976 l_0_8_117)))
 (let ((?x3497 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_116) ?x18325) ?x18327) ?x18357) ?x18359)))
 (let ((?x3501 (+ (+ (+ (+ (+ (+ (- ?x3497 ?x18361) ?x18363) ?x18365) ?x18367) ?x18414) ?x18416) ?x18418)))
 (= ?x3501 0.0))))))))))))))))))))))))))
(assert
 (let ((?x18009 (* 2.0 l_0_8_174)))
 (let ((?x18604 (* ?x18009 l_0_8_186)))
 (let ((?x18006 (* 2.0 l_0_8_173)))
 (let ((?x18602 (* ?x18006 l_0_8_185)))
 (let ((?x18003 (* 2.0 l_0_8_172)))
 (let ((?x18600 (* ?x18003 l_0_8_184)))
 (let ((?x17996 (* 2.0 l_0_8_153)))
 (let ((?x18594 (* ?x17996 l_0_8_165)))
 (let ((?x17993 (* 2.0 l_0_8_152)))
 (let ((?x18592 (* ?x17993 l_0_8_164)))
 (let ((?x17990 (* 2.0 l_0_8_151)))
 (let ((?x18590 (* ?x17990 l_0_8_163)))
 (let ((?x17979 (* 2.0 l_0_8_111)))
 (let ((?x18576 (* ?x17979 l_0_8_123)))
 (let ((?x17976 (* 2.0 l_0_8_110)))
 (let ((?x18574 (* ?x17976 l_0_8_122)))
 (let ((?x17973 (* 2.0 l_0_8_109)))
 (let ((?x18572 (* ?x17973 l_0_8_121)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x18570 (* ?x18569 l_0_8_90)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x18567 (* ?x18566 l_0_8_89)))
 (let ((?x3728 (- (- (+ (+ (* (* 2.0 l_0_8_100) l_0_8_88) ?x18567) ?x18570) ?x18572) ?x18574)))
 (let ((?x3706 (+ (+ (+ (- (- (- (- ?x3728 ?x18576) ?x18590) ?x18592) ?x18594) ?x18600) ?x18602) ?x18604)))
 (= ?x3706 0.0))))))))))))))))))))))))))
(assert
 (let ((?x20434 (* l_0_8_94 l_0_8_94)))
 (let ((?x20432 (* l_0_8_93 l_0_8_93)))
 (let ((?x20430 (* l_0_8_92 l_0_8_92)))
 (let ((?x20428 (* l_0_8_91 l_0_8_91)))
 (let ((?x20418 (* l_0_8_178 l_0_8_178)))
 (let ((?x20416 (* l_0_8_177 l_0_8_177)))
 (let ((?x20414 (* l_0_8_176 l_0_8_176)))
 (let ((?x20412 (* l_0_8_175 l_0_8_175)))
 (let ((?x20410 (* l_0_8_157 l_0_8_157)))
 (let ((?x20408 (* l_0_8_156 l_0_8_156)))
 (let ((?x20406 (* l_0_8_155 l_0_8_155)))
 (let ((?x20404 (* l_0_8_154 l_0_8_154)))
 (let ((?x20402 (* l_0_8_115 l_0_8_115)))
 (let ((?x20400 (* l_0_8_114 l_0_8_114)))
 (let ((?x3882 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x20400)))
 (let ((?x3803 (+ (+ (- (- (- (- (- ?x3882 ?x20402) ?x20404) ?x20406) ?x20408) ?x20410) ?x20412) ?x20414)))
 (= (+ (+ (+ (+ (+ (+ ?x3803 ?x20416) ?x20418) ?x20428) ?x20430) ?x20432) ?x20434) 0.0))))))))))))))))))
(assert
 (let ((?x20586 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x20583 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x20580 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x20577 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x20563 (* 2.0 l_0_8_178)))
 (let ((?x20564 (* ?x20563 l_0_8_182)))
 (let ((?x20560 (* 2.0 l_0_8_177)))
 (let ((?x20561 (* ?x20560 l_0_8_181)))
 (let ((?x20557 (* 2.0 l_0_8_176)))
 (let ((?x20558 (* ?x20557 l_0_8_180)))
 (let ((?x20554 (* 2.0 l_0_8_175)))
 (let ((?x20555 (* ?x20554 l_0_8_179)))
 (let ((?x20551 (* 2.0 l_0_8_157)))
 (let ((?x20552 (* ?x20551 l_0_8_161)))
 (let ((?x20548 (* 2.0 l_0_8_156)))
 (let ((?x20549 (* ?x20548 l_0_8_160)))
 (let ((?x20545 (* 2.0 l_0_8_155)))
 (let ((?x20546 (* ?x20545 l_0_8_159)))
 (let ((?x20542 (* 2.0 l_0_8_154)))
 (let ((?x20543 (* ?x20542 l_0_8_158)))
 (let ((?x20535 (* 2.0 l_0_8_115)))
 (let ((?x20536 (* ?x20535 l_0_8_119)))
 (let ((?x20532 (* 2.0 l_0_8_114)))
 (let ((?x20533 (* ?x20532 l_0_8_118)))
 (let ((?x20529 (* 2.0 l_0_8_113)))
 (let ((?x20530 (* ?x20529 l_0_8_117)))
 (let ((?x3954 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_116) ?x20530) ?x20533) ?x20536) ?x20543)))
 (let ((?x3540 (+ (+ (+ (+ (- (- (- ?x3954 ?x20546) ?x20549) ?x20552) ?x20555) ?x20558) ?x20561) ?x20564)))
 (= (+ (+ (+ (+ ?x3540 ?x20577) ?x20580) ?x20583) ?x20586) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x20563 (* 2.0 l_0_8_178)))
 (let ((?x20732 (* ?x20563 l_0_8_187)))
 (let ((?x20560 (* 2.0 l_0_8_177)))
 (let ((?x20730 (* ?x20560 l_0_8_186)))
 (let ((?x20557 (* 2.0 l_0_8_176)))
 (let ((?x20728 (* ?x20557 l_0_8_185)))
 (let ((?x20554 (* 2.0 l_0_8_175)))
 (let ((?x20726 (* ?x20554 l_0_8_184)))
 (let ((?x20551 (* 2.0 l_0_8_157)))
 (let ((?x20724 (* ?x20551 l_0_8_166)))
 (let ((?x20548 (* 2.0 l_0_8_156)))
 (let ((?x20722 (* ?x20548 l_0_8_165)))
 (let ((?x20545 (* 2.0 l_0_8_155)))
 (let ((?x20720 (* ?x20545 l_0_8_164)))
 (let ((?x20542 (* 2.0 l_0_8_154)))
 (let ((?x20718 (* ?x20542 l_0_8_163)))
 (let ((?x20535 (* 2.0 l_0_8_115)))
 (let ((?x20716 (* ?x20535 l_0_8_124)))
 (let ((?x20532 (* 2.0 l_0_8_114)))
 (let ((?x20714 (* ?x20532 l_0_8_123)))
 (let ((?x20529 (* 2.0 l_0_8_113)))
 (let ((?x20712 (* ?x20529 l_0_8_122)))
 (let ((?x20527 (* 2.0 l_0_8_112)))
 (let ((?x20710 (* ?x20527 l_0_8_121)))
 (let ((?x20707 (* 2.0 l_0_8_103)))
 (let ((?x20708 (* ?x20707 l_0_8_94)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x20705 (* ?x18569 l_0_8_93)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x20703 (* ?x18566 l_0_8_92)))
 (let ((?x4076 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_91) ?x20703) ?x20705) ?x20708) ?x20710)))
 (let ((?x4010 (- (- (- (- (- (- (- ?x4076 ?x20712) ?x20714) ?x20716) ?x20718) ?x20720) ?x20722) ?x20724)))
 (= (+ (+ (+ (+ ?x4010 ?x20726) ?x20728) ?x20730) ?x20732) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x20880 (* l_0_8_99 l_0_8_99)))
 (let ((?x20878 (* l_0_8_98 l_0_8_98)))
 (let ((?x20876 (* l_0_8_97 l_0_8_97)))
 (let ((?x20874 (* l_0_8_96 l_0_8_96)))
 (let ((?x20872 (* l_0_8_95 l_0_8_95)))
 (let ((?x20870 (* l_0_8_183 l_0_8_183)))
 (let ((?x20868 (* l_0_8_182 l_0_8_182)))
 (let ((?x20866 (* l_0_8_181 l_0_8_181)))
 (let ((?x20864 (* l_0_8_180 l_0_8_180)))
 (let ((?x20862 (* l_0_8_179 l_0_8_179)))
 (let ((?x20860 (* l_0_8_162 l_0_8_162)))
 (let ((?x20858 (* l_0_8_161 l_0_8_161)))
 (let ((?x20856 (* l_0_8_160 l_0_8_160)))
 (let ((?x20854 (* l_0_8_159 l_0_8_159)))
 (let ((?x20852 (* l_0_8_158 l_0_8_158)))
 (let ((?x20845 (* l_0_8_120 l_0_8_120)))
 (let ((?x20843 (* l_0_8_119 l_0_8_119)))
 (let ((?x20841 (* l_0_8_118 l_0_8_118)))
 (let ((?x4202 (- (- (* (- l_0_8_116) l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20841)))
 (let ((?x4184 (- (- (- (- (- (- (- ?x4202 ?x20843) ?x20845) ?x20852) ?x20854) ?x20856) ?x20858) ?x20860)))
 (let ((?x4125 (+ (+ (+ (+ (+ (+ (+ ?x4184 ?x20862) ?x20864) ?x20866) ?x20868) ?x20870) ?x20872) ?x20874)))
 (= (+ (+ (+ ?x4125 ?x20876) ?x20878) ?x20880) 0.0)))))))))))))))))))))))
(assert
 (let ((?x21006 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x21003 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x21000 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x20997 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x20994 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x20991 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x20988 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x20985 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x20982 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x20979 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x20970 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x20967 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x20964 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x20961 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x20958 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x20955 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x20707 (* 2.0 l_0_8_103)))
 (let ((?x20952 (* ?x20707 l_0_8_98)))
 (let ((?x18569 (* 2.0 l_0_8_102)))
 (let ((?x20950 (* ?x18569 l_0_8_97)))
 (let ((?x18566 (* 2.0 l_0_8_101)))
 (let ((?x20948 (* ?x18566 l_0_8_96)))
 (let ((?x4324 (+ (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_95) ?x20948) ?x20950) ?x20952) ?x20955)))
 (let ((?x4006 (- (- (- (- (- (- (- ?x4324 ?x20958) ?x20961) ?x20964) ?x20967) ?x20970) ?x20979) ?x20982)))
 (let ((?x4254 (+ (+ (+ (+ (- (- (- ?x4006 ?x20985) ?x20988) ?x20991) ?x20994) ?x20997) ?x21000) ?x21003)))
 (= (+ ?x4254 ?x21006) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x21164 (* l_0_8_189 l_0_8_189)))
 (let ((?x21162 (* l_0_8_188 l_0_8_188)))
 (let ((?x21160 (* l_0_8_187 l_0_8_187)))
 (let ((?x21158 (* l_0_8_186 l_0_8_186)))
 (let ((?x21156 (* l_0_8_185 l_0_8_185)))
 (let ((?x21154 (* l_0_8_184 l_0_8_184)))
 (let ((?x21152 (* l_0_8_168 l_0_8_168)))
 (let ((?x21150 (* l_0_8_167 l_0_8_167)))
 (let ((?x21148 (* l_0_8_166 l_0_8_166)))
 (let ((?x21146 (* l_0_8_165 l_0_8_165)))
 (let ((?x21144 (* l_0_8_164 l_0_8_164)))
 (let ((?x21142 (* l_0_8_163 l_0_8_163)))
 (let ((?x21140 (* l_0_8_126 l_0_8_126)))
 (let ((?x21138 (* l_0_8_125 l_0_8_125)))
 (let ((?x21136 (* l_0_8_124 l_0_8_124)))
 (let ((?x21134 (* l_0_8_123 l_0_8_123)))
 (let ((?x21132 (* l_0_8_122 l_0_8_122)))
 (let ((?x21130 (* l_0_8_121 l_0_8_121)))
 (let ((?x21128 (* l_0_8_105 l_0_8_105)))
 (let ((?x21126 (* l_0_8_104 l_0_8_104)))
 (let ((?x21124 (* l_0_8_103 l_0_8_103)))
 (let ((?x21122 (* l_0_8_102 l_0_8_102)))
 (let ((?x4495 (+ (+ (+ (* l_0_8_100 l_0_8_100) (* l_0_8_101 l_0_8_101)) ?x21122) ?x21124)))
 (let ((?x4428 (- (- (- (- (- (+ (+ ?x4495 ?x21126) ?x21128) ?x21130) ?x21132) ?x21134) ?x21136) ?x21138)))
 (let ((?x4074 (- (- (- (- (- (- (- ?x4428 ?x21140) ?x21142) ?x21144) ?x21146) ?x21148) ?x21150) ?x21152)))
 (= (+ (+ (+ (+ (+ (+ ?x4074 ?x21154) ?x21156) ?x21158) ?x21160) ?x21162) ?x21164) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x18201 (* l_0_8_141 l_0_8_141)))
 (let ((?x18199 (* l_0_8_140 l_0_8_140)))
 (let ((?x18195 (* l_0_8_139 l_0_8_139)))
 (let ((?x4772 (- (- (* (- l_0_8_137) l_0_8_137) (* l_0_8_138 l_0_8_138)) ?x18195)))
 (= (- (- ?x4772 ?x18199) ?x18201) 0.0))))))
(assert
 (>= l_0_8_1 0.0))
(assert
 (>= l_0_8_3 0.0))
(assert
 (>= l_0_8_6 0.0))
(assert
 (>= l_0_8_10 0.0))
(assert
 (>= l_0_8_15 0.0))
(assert
 (>= l_0_8_21 0.0))
(assert
 (>= l_0_8_22 0.0))
(assert
 (>= l_0_8_24 0.0))
(assert
 (>= l_0_8_27 0.0))
(assert
 (>= l_0_8_31 0.0))
(assert
 (>= l_0_8_36 0.0))
(assert
 (>= l_0_8_42 0.0))
(assert
 (>= l_0_8_43 0.0))
(assert
 (>= l_0_8_45 0.0))
(assert
 (>= l_0_8_48 0.0))
(assert
 (>= l_0_8_52 0.0))
(assert
 (>= l_0_8_57 0.0))
(assert
 (>= l_0_8_63 0.0))
(assert
 (>= l_0_8_64 0.0))
(assert
 (>= l_0_8_66 0.0))
(assert
 (>= l_0_8_69 0.0))
(assert
 (>= l_0_8_73 0.0))
(assert
 (>= l_0_8_78 0.0))
(assert
 (>= l_0_8_84 0.0))
(assert
 (>= l_0_8_85 0.0))
(assert
 (>= l_0_8_87 0.0))
(assert
 (>= l_0_8_90 0.0))
(assert
 (>= l_0_8_94 0.0))
(assert
 (>= l_0_8_99 0.0))
(assert
 (>= l_0_8_105 0.0))
(assert
 (>= l_0_8_106 0.0))
(assert
 (>= l_0_8_108 0.0))
(assert
 (>= l_0_8_111 0.0))
(assert
 (>= l_0_8_115 0.0))
(assert
 (>= l_0_8_120 0.0))
(assert
 (>= l_0_8_126 0.0))
(assert
 (>= l_0_8_127 0.0))
(assert
 (>= l_0_8_129 0.0))
(assert
 (>= l_0_8_132 0.0))
(assert
 (>= l_0_8_136 0.0))
(assert
 (>= l_0_8_141 0.0))
(assert
 (>= l_0_8_147 0.0))
(assert
 (>= l_0_8_148 0.0))
(assert
 (>= l_0_8_150 0.0))
(assert
 (>= l_0_8_153 0.0))
(assert
 (>= l_0_8_157 0.0))
(assert
 (>= l_0_8_162 0.0))
(assert
 (>= l_0_8_168 0.0))
(assert
 (>= l_0_8_169 0.0))
(assert
 (>= l_0_8_171 0.0))
(assert
 (>= l_0_8_174 0.0))
(assert
 (>= l_0_8_178 0.0))
(assert
 (>= l_0_8_183 0.0))
(assert
 (>= l_0_8_189 0.0))
(assert
 (>= l_0_8_190 0.0))
(assert
 (>= l_0_8_192 0.0))
(assert
 (>= l_0_8_195 0.0))
(assert
 (>= l_0_8_199 0.0))
(assert
 (>= l_0_8_204 0.0))
(assert
 (>= l_0_8_210 0.0))
(assert
 (>= l_0_8_211 0.0))
(assert
 (>= l_0_8_213 0.0))
(assert
 (>= l_0_8_216 0.0))
(assert
 (>= l_0_8_220 0.0))
(assert
 (>= l_0_8_225 0.0))
(assert
 (>= l_0_8_231 0.0))
(assert
 (let ((?x21427 (* l_0_9_66 l_0_9_66)))
 (let ((?x21428 (* 3.0 ?x21427)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x21425 (* ?x21424 l_0_9_68)))
 (let ((?x21421 (* l_0_9_65 l_0_9_65)))
 (let ((?x21422 (* 3.0 ?x21421)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x21419 (* ?x21418 l_0_9_67)))
 (let ((?x21415 (* l_0_9_6 l_0_9_6)))
 (let ((?x21416 (* 6.0 ?x21415)))
 (let ((?x21412 (* l_0_9_5 l_0_9_5)))
 (let ((?x21413 (* 6.0 ?x21412)))
 (let ((?x21401 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x21398 (* ?x21397 l_0_9_47)))
 (let ((?x21395 (* (* 3.0 l_0_9_44) l_0_9_44)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x21392 (* ?x21391 l_0_9_46)))
 (let ((?x21388 (* l_0_9_4 l_0_9_4)))
 (let ((?x21389 (* 6.0 ?x21388)))
 (let ((?x21385 (* 12.0 l_0_9_3)))
 (let ((?x21386 (* ?x21385 l_0_9_5)))
 (let ((?x21383 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x21380 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x21377 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x21374 (* ?x21373 l_0_9_26)))
 (let ((?x21371 (* l_0_9_237 l_0_9_237)))
 (let ((?x21369 (* l_0_9_236 l_0_9_236)))
 (let ((?x21367 (* l_0_9_235 l_0_9_235)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x21365 (* ?x21364 l_0_9_25)))
 (let ((?x21362 (* l_0_9_216 l_0_9_216)))
 (let ((?x21360 (* l_0_9_215 l_0_9_215)))
 (let ((?x21358 (* l_0_9_214 l_0_9_214)))
 (let ((?x21355 (* 12.0 l_0_9_2)))
 (let ((?x21356 (* ?x21355 l_0_9_4)))
 (let ((?x21353 (* l_0_9_195 l_0_9_195)))
 (let ((?x21351 (* l_0_9_194 l_0_9_194)))
 (let ((?x21349 (* l_0_9_193 l_0_9_193)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x21347 (* ?x21346 l_0_9_131)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x21345 (* ?x21344 l_0_9_130)))
 (let ((?x21361 (- (- (+ (- (- (- (+ ?x21345 ?x21347) ?x21349) ?x21351) ?x21353) ?x21356) ?x21358) ?x21360)))
 (let ((?x21378 (- (- (- (- (- (- (- ?x21361 ?x21362) ?x21365) ?x21367) ?x21369) ?x21371) ?x21374) ?x21377)))
 (let ((?x21399 (- (- (- (+ (+ (- (- ?x21378 ?x21380) ?x21383) ?x21386) ?x21389) ?x21392) ?x21395) ?x21398)))
 (let ((?x21408 (- (- (- ?x21399 ?x21401) (* (* 1.0 l_0_9_46) l_0_9_46)) (* (* 1.0 l_0_9_47) l_0_9_47))))
 (let ((?x21420 (+ (+ (+ (- ?x21408 (* (* 1.0 l_0_9_48) l_0_9_48)) ?x21413) ?x21416) ?x21419)))
 (let ((?x21432 (+ (+ (+ (+ ?x21420 ?x21422) ?x21425) ?x21428) (* 1.0 (* l_0_9_67 l_0_9_67)))))
 (let ((?x21438 (+ (+ ?x21432 (* 1.0 (* l_0_9_68 l_0_9_68))) (* 1.0 (* l_0_9_69 l_0_9_69)))))
 (= (+ ?x21438 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21427 (* l_0_9_66 l_0_9_66)))
 (let ((?x21428 (* 3.0 ?x21427)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x21555 (* ?x21554 l_0_9_68)))
 (let ((?x21421 (* l_0_9_65 l_0_9_65)))
 (let ((?x21422 (* 3.0 ?x21421)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x21551 (* ?x21550 l_0_9_67)))
 (let ((?x21401 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x21547 (* ?x21546 l_0_9_47)))
 (let ((?x21395 (* (* 3.0 l_0_9_44) l_0_9_44)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x21543 (* ?x21542 l_0_9_46)))
 (let ((?x21539 (* l_0_9_3 l_0_9_3)))
 (let ((?x21540 (* 6.0 ?x21539)))
 (let ((?x21385 (* 12.0 l_0_9_3)))
 (let ((?x21386 (* ?x21385 l_0_9_5)))
 (let ((?x21536 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x21374 (* ?x21373 l_0_9_26)))
 (let ((?x21526 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x21365 (* ?x21364 l_0_9_25)))
 (let ((?x21515 (* l_0_9_2 l_0_9_2)))
 (let ((?x21516 (* 6.0 ?x21515)))
 (let ((?x21355 (* 12.0 l_0_9_2)))
 (let ((?x21356 (* ?x21355 l_0_9_4)))
 (let ((?x21510 (- (+ (* l_0_9_128 l_0_9_128) (* l_0_9_129 l_0_9_129)) (* (* 2.0 l_0_9_191) l_0_9_193))))
 (let ((?x21520 (- (+ (+ (- ?x21510 (* (* 2.0 l_0_9_192) l_0_9_194)) ?x21356) ?x21516) (* (* 2.0 l_0_9_212) l_0_9_214))))
 (let ((?x21530 (- (- (- (- ?x21520 (* (* 2.0 l_0_9_213) l_0_9_215)) ?x21365) ?x21526) (* (* 2.0 l_0_9_233) l_0_9_235))))
 (let ((?x21538 (+ (- (- (- ?x21530 (* (* 2.0 l_0_9_234) l_0_9_236)) ?x21374) ?x21536) ?x21386)))
 (let ((?x21553 (+ (+ (- (- (- (- (+ ?x21538 ?x21540) ?x21543) ?x21395) ?x21547) ?x21401) ?x21551) ?x21422)))
 (= (+ (+ (+ ?x21553 ?x21555) ?x21428) 9.0) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21539 (* l_0_9_3 l_0_9_3)))
 (let ((?x21540 (* 6.0 ?x21539)))
 (let ((?x21536 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21598 (* l_0_9_234 l_0_9_234)))
 (let ((?x21596 (* l_0_9_233 l_0_9_233)))
 (let ((?x21526 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21593 (* l_0_9_213 l_0_9_213)))
 (let ((?x21591 (* l_0_9_212 l_0_9_212)))
 (let ((?x21515 (* l_0_9_2 l_0_9_2)))
 (let ((?x21516 (* 6.0 ?x21515)))
 (let ((?x21588 (* l_0_9_192 l_0_9_192)))
 (let ((?x21592 (- (+ (- (- (- _a_6_) (* l_0_9_191 l_0_9_191)) ?x21588) ?x21516) ?x21591)))
 (let ((?x21604 (- (+ (- (- (- (- (- ?x21592 ?x21593) ?x21526) ?x21596) ?x21598) ?x21536) ?x21540) (* (* 1.0 l_0_9_44) l_0_9_44))))
 (let ((?x21609 (+ (- ?x21604 (* (* 1.0 l_0_9_45) l_0_9_45)) (* 1.0 (* l_0_9_65 l_0_9_65)))))
 (= (+ (+ ?x21609 (* 1.0 (* l_0_9_66 l_0_9_66))) 7.0) 0.0))))))))))))))))
(assert
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x21655 (* ?x21654 l_0_9_65)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x21652 (* ?x21651 l_0_9_44)))
 (let ((?x21539 (* l_0_9_3 l_0_9_3)))
 (let ((?x5079 (* l_0_9_24 l_0_9_24)))
 (let ((?x5051 (* l_0_9_23 l_0_9_23)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x21643 (* ?x21642 l_0_9_23)))
 (let ((?x21515 (* l_0_9_2 l_0_9_2)))
 (let ((?x21637 (- (+ (- _a_7_) (* (* 12.0 l_0_9_1) l_0_9_2)) (* (* 2.0 l_0_9_190) l_0_9_191))))
 (let ((?x21645 (+ (- (- (- ?x21637 ?x21515) (* (* 2.0 l_0_9_211) l_0_9_212)) ?x21643) ?x5051)))
 (let ((?x21653 (- (- (+ (- ?x21645 (* (* 2.0 l_0_9_232) l_0_9_233)) ?x5079) ?x21539) ?x21652)))
 (= (+ ?x21653 ?x21655) 0.0)))))))))))))))
(assert
 (let ((?x21427 (* l_0_9_66 l_0_9_66)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x21723 (* ?x21554 l_0_9_71)))
 (let ((?x21421 (* l_0_9_65 l_0_9_65)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x21720 (* ?x21550 l_0_9_70)))
 (let ((?x4934 (* l_0_9_45 l_0_9_45)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x21717 (* ?x21546 l_0_9_50)))
 (let ((?x4918 (* l_0_9_44 l_0_9_44)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x21714 (* ?x21542 l_0_9_49)))
 (let ((?x21385 (* 12.0 l_0_9_3)))
 (let ((?x21712 (* ?x21385 l_0_9_8)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x21710 (* ?x21373 l_0_9_29)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x21704 (* ?x21364 l_0_9_28)))
 (let ((?x21355 (* 12.0 l_0_9_2)))
 (let ((?x21698 (* ?x21355 l_0_9_7)))
 (let ((?x21697 (- (- (- _a_8_) (* (* 2.0 l_0_9_191) l_0_9_196)) (* (* 2.0 l_0_9_192) l_0_9_197))))
 (let ((?x21703 (- (- (+ ?x21697 ?x21698) (* (* 2.0 l_0_9_212) l_0_9_217)) (* (* 2.0 l_0_9_213) l_0_9_218))))
 (let ((?x21709 (- (- (- ?x21703 ?x21704) (* (* 2.0 l_0_9_233) l_0_9_238)) (* (* 2.0 l_0_9_234) l_0_9_239))))
 (let ((?x21721 (+ (+ (- (+ (- (+ (- ?x21709 ?x21710) ?x21712) ?x21714) ?x4918) ?x21717) ?x4934) ?x21720)))
 (= (- (+ (- ?x21721 ?x21421) ?x21723) ?x21427) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x21779 (* l_0_9_232 l_0_9_232)))
 (let ((?x21777 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x21771 (* l_0_9_211 l_0_9_211)))
 (let ((?x21769 (* l_0_9_190 l_0_9_190)))
 (let ((?x21766 (* l_0_9_1 l_0_9_1)))
 (let ((?x21767 (* 6.0 ?x21766)))
 (let ((?x21772 (- (- (+ (- (- _a_9_) (* (* 2.0 l_0_9_1) l_0_9_2)) ?x21767) ?x21769) ?x21771)))
 (let ((?x21783 (- (- (- (+ ?x21772 (* (* 2.0 l_0_9_22) l_0_9_23)) ?x21777) ?x21779) (* (* 1.0 l_0_9_43) l_0_9_43))))
 (= (+ ?x21783 (* 1.0 (* l_0_9_64 l_0_9_64))) 0.0))))))))))
(assert
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x21834 (* ?x21654 l_0_9_70)))
 (let ((?x21655 (* ?x21654 l_0_9_65)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x21831 (* ?x21651 l_0_9_49)))
 (let ((?x21652 (* ?x21651 l_0_9_44)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x21817 (* ?x21642 l_0_9_28)))
 (let ((?x21811 (- (+ (- _a_10_) (* (* 12.0 l_0_9_1) l_0_9_7)) (* (* 2.0 l_0_9_190) l_0_9_196))))
 (let ((?x21816 (- (- ?x21811 (* (* 2.0 l_0_9_2) l_0_9_7)) (* (* 2.0 l_0_9_211) l_0_9_217))))
 (let ((?x21823 (- (+ (- ?x21816 ?x21817) (* (* 2.0 l_0_9_23) l_0_9_28)) (* (* 2.0 l_0_9_232) l_0_9_238))))
 (let ((?x21829 (- (+ ?x21823 (* (* 2.0 l_0_9_24) l_0_9_29)) (* (* 2.0 l_0_9_3) l_0_9_8))))
 (= (+ (- (- (+ ?x21829 ?x21652) ?x21831) ?x21655) ?x21834) 0.0))))))))))))))
(assert
 (let ((?x21937 (* l_0_9_9 l_0_9_9)))
 (let ((?x21938 (* 6.0 ?x21937)))
 (let ((?x21934 (* l_0_9_8 l_0_9_8)))
 (let ((?x21935 (* 6.0 ?x21934)))
 (let ((?x21919 (* l_0_9_7 l_0_9_7)))
 (let ((?x21920 (* 6.0 ?x21919)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x21723 (* ?x21554 l_0_9_71)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x21720 (* ?x21550 l_0_9_70)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x21717 (* ?x21546 l_0_9_50)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x21714 (* ?x21542 l_0_9_49)))
 (let ((?x21901 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x21898 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x21895 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x21892 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x21889 (* l_0_9_241 l_0_9_241)))
 (let ((?x21887 (* l_0_9_240 l_0_9_240)))
 (let ((?x21885 (* l_0_9_239 l_0_9_239)))
 (let ((?x21883 (* l_0_9_238 l_0_9_238)))
 (let ((?x21881 (* l_0_9_220 l_0_9_220)))
 (let ((?x21879 (* l_0_9_219 l_0_9_219)))
 (let ((?x21877 (* l_0_9_218 l_0_9_218)))
 (let ((?x21875 (* l_0_9_217 l_0_9_217)))
 (let ((?x21873 (* l_0_9_199 l_0_9_199)))
 (let ((?x21871 (* l_0_9_198 l_0_9_198)))
 (let ((?x21869 (* l_0_9_197 l_0_9_197)))
 (let ((?x21867 (* l_0_9_196 l_0_9_196)))
 (let ((?x21870 (- (- (+ (- _a_11_) (* 6.0 (* l_0_9_10 l_0_9_10))) ?x21867) ?x21869)))
 (let ((?x21884 (- (- (- (- (- (- (- ?x21870 ?x21871) ?x21873) ?x21875) ?x21877) ?x21879) ?x21881) ?x21883)))
 (let ((?x21902 (- (- (- (- (- (- (- ?x21884 ?x21885) ?x21887) ?x21889) ?x21892) ?x21895) ?x21898) ?x21901)))
 (let ((?x21910 (- (- (+ (+ ?x21902 ?x21714) ?x21717) (* (* 1.0 l_0_9_49) l_0_9_49)) (* (* 1.0 l_0_9_50) l_0_9_50))))
 (let ((?x21916 (- (- ?x21910 (* (* 1.0 l_0_9_51) l_0_9_51)) (* (* 1.0 l_0_9_52) l_0_9_52))))
 (let ((?x21924 (+ (+ (- (- ?x21916 ?x21720) ?x21723) ?x21920) (* 1.0 (* l_0_9_70 l_0_9_70)))))
 (let ((?x21930 (+ (+ ?x21924 (* 1.0 (* l_0_9_71 l_0_9_71))) (* 1.0 (* l_0_9_72 l_0_9_72)))))
 (= (+ (+ (+ ?x21930 (* 1.0 (* l_0_9_73 l_0_9_73))) ?x21935) ?x21938) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_9_1) l_0_9_1) (* l_0_9_22 l_0_9_22)) 0.0))
(assert
 (let ((?x21784 (* l_0_9_64 l_0_9_64)))
 (let ((?x21996 (* 3.0 ?x21784)))
 (let ((?x21777 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x21988 (* l_0_9_127 l_0_9_127)))
 (let ((?x21766 (* l_0_9_1 l_0_9_1)))
 (let ((?x21767 (* 6.0 ?x21766)))
 (let ((?x21991 (+ (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_4) ?x21767) ?x21988) (* (* 2.0 l_0_9_22) l_0_9_25))))
 (= (+ (- (- ?x21991 ?x21777) (* (* 3.0 l_0_9_43) l_0_9_43)) ?x21996) 0.0)))))))))
(assert
 (let ((?x21784 (* l_0_9_64 l_0_9_64)))
 (let ((?x5479 (* l_0_9_43 l_0_9_43)))
 (let ((?x22007 (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) (* (* 2.0 l_0_9_22) l_0_9_28))))
 (= (- (+ ?x22007 ?x5479) ?x21784) 0.0)))))
(assert
 (let ((?x22020 (+ (- (* (* (- 2.0) l_0_9_1) l_0_9_11) (* l_0_9_127 l_0_9_127)) (* (* 2.0 l_0_9_22) l_0_9_32))))
 (= ?x22020 0.0)))
(assert
 (let ((?x22040 (* l_0_9_85 l_0_9_85)))
 (let ((?x22036 (* l_0_9_169 l_0_9_169)))
 (let ((?x22034 (* l_0_9_148 l_0_9_148)))
 (let ((?x22035 (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) (* l_0_9_106 l_0_9_106)) ?x22034)))
 (= (- (+ (- ?x22035 ?x22036) (* (* 2.0 l_0_9_22) l_0_9_37)) ?x22040) 0.0))))))
(assert
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22082 (* ?x21654 l_0_9_67)))
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22080 (* ?x22079 l_0_9_65)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22077 (* ?x21651 l_0_9_46)))
 (let ((?x22074 (* 6.0 l_0_9_43)))
 (let ((?x22075 (* ?x22074 l_0_9_44)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22064 (* ?x21642 l_0_9_25)))
 (let ((?x21643 (* ?x21642 l_0_9_23)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22055 (* ?x5749 l_0_9_128)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5263 (* ?x5228 l_0_9_4)))
 (let ((?x21633 (* ?x5228 l_0_9_2)))
 (let ((?x22060 (- (- (+ (+ ?x21633 ?x5263) ?x22055) (* (* 2.0 l_0_9_190) l_0_9_193)) (* (* 2.0 l_0_9_2) l_0_9_4))))
 (let ((?x22067 (+ (- (- (- ?x22060 (* (* 2.0 l_0_9_211) l_0_9_214)) ?x21643) ?x22064) (* (* 2.0 l_0_9_23) l_0_9_25))))
 (let ((?x22071 (+ (- ?x22067 (* (* 2.0 l_0_9_232) l_0_9_235)) (* (* 2.0 l_0_9_24) l_0_9_26))))
 (let ((?x22081 (+ (- (- (- ?x22071 (* (* 2.0 l_0_9_3) l_0_9_5)) ?x22075) ?x22077) ?x22080)))
 (= (+ ?x22081 ?x22082) 0.0))))))))))))))))))))))
(assert
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22145 (* ?x21654 l_0_9_74)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22143 (* ?x21651 l_0_9_53)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22135 (* ?x21642 l_0_9_32)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22055 (* ?x5749 l_0_9_128)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5419 (* ?x5228 l_0_9_11)))
 (let ((?x22129 (- (- ?x5419 (* (* 2.0 l_0_9_11) l_0_9_2)) (* (* 2.0 l_0_9_12) l_0_9_3))))
 (let ((?x22134 (- (- (- ?x22129 ?x22055) (* (* 2.0 l_0_9_190) l_0_9_200)) (* (* 2.0 l_0_9_211) l_0_9_221))))
 (let ((?x22140 (- (+ (- ?x22134 ?x22135) (* (* 2.0 l_0_9_23) l_0_9_32)) (* (* 2.0 l_0_9_232) l_0_9_242))))
 (= (+ (- (+ ?x22140 (* (* 2.0 l_0_9_24) l_0_9_33)) ?x22143) ?x22145) 0.0)))))))))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22211 (* ?x22210 l_0_9_86)))
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22208 (* ?x21654 l_0_9_79)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22206 (* ?x21651 l_0_9_58)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22198 (* ?x21642 l_0_9_37)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22189 (* ?x22188 l_0_9_170)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22183 (* ?x22182 l_0_9_149)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5934 (* ?x5228 l_0_9_16)))
 (let ((?x22187 (- (+ (+ ?x5934 (* (* 2.0 l_0_9_106) l_0_9_107)) ?x22183) (* (* 2.0 l_0_9_16) l_0_9_2))))
 (let ((?x22195 (- (- (- ?x22187 ?x22189) (* (* 2.0 l_0_9_17) l_0_9_3)) (* (* 2.0 l_0_9_190) l_0_9_205))))
 (let ((?x22201 (+ (- (- ?x22195 (* (* 2.0 l_0_9_211) l_0_9_226)) ?x22198) (* (* 2.0 l_0_9_23) l_0_9_37))))
 (let ((?x22205 (+ (- ?x22201 (* (* 2.0 l_0_9_232) l_0_9_247)) (* (* 2.0 l_0_9_24) l_0_9_38))))
 (= (- (+ (- ?x22205 ?x22206) ?x22208) ?x22211) 0.0))))))))))))))))))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22280 (* ?x22079 l_0_9_67)))
 (let ((?x22080 (* ?x22079 l_0_9_65)))
 (let ((?x21415 (* l_0_9_6 l_0_9_6)))
 (let ((?x21412 (* l_0_9_5 l_0_9_5)))
 (let ((?x22074 (* 6.0 l_0_9_43)))
 (let ((?x22275 (* ?x22074 l_0_9_46)))
 (let ((?x22075 (* ?x22074 l_0_9_44)))
 (let ((?x21388 (* l_0_9_4 l_0_9_4)))
 (let ((?x4908 (* l_0_9_27 l_0_9_27)))
 (let ((?x4779 (* l_0_9_26 l_0_9_26)))
 (let ((?x4902 (* l_0_9_25 l_0_9_25)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22064 (* ?x21642 l_0_9_25)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22267 (* ?x5749 l_0_9_130)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5263 (* ?x5228 l_0_9_4)))
 (let ((?x22274 (- (- (+ (+ (+ (- (+ ?x5263 ?x22267) ?x22064) ?x4902) ?x4779) ?x4908) ?x21388) ?x22075)))
 (= (+ (+ (- (- (- ?x22274 ?x22275) ?x21412) ?x21415) ?x22080) ?x22280) 0.0)))))))))))))))))))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22312 (* ?x22079 l_0_9_70)))
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22082 (* ?x21654 l_0_9_67)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22077 (* ?x21651 l_0_9_46)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x21817 (* ?x21642 l_0_9_28)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x5995 (* ?x5749 l_0_9_133)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x21808 (* ?x5228 l_0_9_7)))
 (let ((?x22295 (+ (+ (- (+ ?x21808 ?x5995) ?x21817) (* (* 2.0 l_0_9_25) l_0_9_28)) (* (* 2.0 l_0_9_26) l_0_9_29))))
 (let ((?x22301 (- (+ ?x22295 (* (* 2.0 l_0_9_27) l_0_9_30)) (* (* 2.0 l_0_9_4) l_0_9_7))))
 (let ((?x22307 (- (- (+ ?x22301 ?x22077) (* (* 6.0 l_0_9_43) l_0_9_49)) (* (* 2.0 l_0_9_5) l_0_9_8))))
 (= (+ (- (- ?x22307 (* (* 2.0 l_0_9_6) l_0_9_9)) ?x22082) ?x22312) 0.0)))))))))))))))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22365 (* ?x22079 l_0_9_74)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22135 (* ?x21642 l_0_9_32)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22351 (* ?x5749 l_0_9_137)))
 (let ((?x22267 (* ?x5749 l_0_9_130)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5419 (* ?x5228 l_0_9_11)))
 (let ((?x22349 (- (- ?x5419 (* (* 2.0 l_0_9_11) l_0_9_4)) (* (* 2.0 l_0_9_12) l_0_9_5))))
 (let ((?x22356 (- (- (+ (- ?x22349 ?x22267) ?x22351) (* (* 2.0 l_0_9_13) l_0_9_6)) ?x22135)))
 (let ((?x22360 (+ (+ ?x22356 (* (* 2.0 l_0_9_25) l_0_9_32)) (* (* 2.0 l_0_9_26) l_0_9_33))))
 (let ((?x22364 (- (+ ?x22360 (* (* 2.0 l_0_9_27) l_0_9_34)) (* (* 6.0 l_0_9_43) l_0_9_53))))
 (= (+ ?x22364 ?x22365) 0.0)))))))))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22414 (* ?x22210 l_0_9_88)))
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22412 (* ?x22079 l_0_9_79)))
 (let ((?x21642 (* 12.0 l_0_9_22)))
 (let ((?x22198 (* ?x21642 l_0_9_37)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22396 (* ?x22188 l_0_9_172)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22392 (* ?x22182 l_0_9_151)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22390 (* ?x5749 l_0_9_142)))
 (let ((?x5228 (* 12.0 l_0_9_1)))
 (let ((?x5934 (* ?x5228 l_0_9_16)))
 (let ((?x22395 (- (+ (+ (+ ?x5934 (* (* 2.0 l_0_9_106) l_0_9_109)) ?x22390) ?x22392) (* (* 2.0 l_0_9_16) l_0_9_4))))
 (let ((?x22402 (- (- (- ?x22395 ?x22396) (* (* 2.0 l_0_9_17) l_0_9_5)) (* (* 2.0 l_0_9_18) l_0_9_6))))
 (let ((?x22407 (+ (+ (- ?x22402 ?x22198) (* (* 2.0 l_0_9_25) l_0_9_37)) (* (* 2.0 l_0_9_26) l_0_9_38))))
 (let ((?x22411 (- (+ ?x22407 (* (* 2.0 l_0_9_27) l_0_9_39)) (* (* 6.0 l_0_9_43) l_0_9_58))))
 (= (- (+ ?x22411 ?x22412) ?x22414) 0.0))))))))))))))))))))
(assert
 (let ((?x21937 (* l_0_9_9 l_0_9_9)))
 (let ((?x21934 (* l_0_9_8 l_0_9_8)))
 (let ((?x21919 (* l_0_9_7 l_0_9_7)))
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x21834 (* ?x21654 l_0_9_70)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x21831 (* ?x21651 l_0_9_49)))
 (let ((?x5668 (* l_0_9_31 l_0_9_31)))
 (let ((?x5643 (* l_0_9_30 l_0_9_30)))
 (let ((?x5660 (* l_0_9_29 l_0_9_29)))
 (let ((?x22453 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_28 l_0_9_28)) ?x5660) ?x5643)))
 (= (- (- (- (- (+ (+ ?x22453 ?x5668) ?x21831) ?x21834) ?x21919) ?x21934) ?x21937) 0.0)))))))))))))
(assert
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22145 (* ?x21654 l_0_9_74)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22143 (* ?x21651 l_0_9_53)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x5995 (* ?x5749 l_0_9_133)))
 (let ((?x22472 (- (* (* (- 2.0) l_0_9_10) l_0_9_14) (* (* 2.0 l_0_9_11) l_0_9_7))))
 (let ((?x22477 (- (- (- ?x22472 (* (* 2.0 l_0_9_12) l_0_9_8)) ?x5995) (* (* 2.0 l_0_9_13) l_0_9_9))))
 (let ((?x22483 (+ (+ ?x22477 (* (* 2.0 l_0_9_28) l_0_9_32)) (* (* 2.0 l_0_9_29) l_0_9_33))))
 (let ((?x22489 (+ (+ ?x22483 (* (* 2.0 l_0_9_30) l_0_9_34)) (* (* 2.0 l_0_9_31) l_0_9_35))))
 (= (- (+ ?x22489 ?x22143) ?x22145) 0.0))))))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22547 (* ?x22210 l_0_9_91)))
 (let ((?x21654 (* 2.0 l_0_9_64)))
 (let ((?x22208 (* ?x21654 l_0_9_79)))
 (let ((?x21651 (* 2.0 l_0_9_43)))
 (let ((?x22206 (* ?x21651 l_0_9_58)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22531 (* ?x22188 l_0_9_175)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22527 (* ?x22182 l_0_9_154)))
 (let ((?x22526 (+ (* (* (- 2.0) l_0_9_10) l_0_9_19) (* (* 2.0 l_0_9_106) l_0_9_112))))
 (let ((?x22534 (- (- (- (+ ?x22526 ?x22527) (* (* 2.0 l_0_9_16) l_0_9_7)) ?x22531) (* (* 2.0 l_0_9_17) l_0_9_8))))
 (let ((?x22538 (+ (- ?x22534 (* (* 2.0 l_0_9_18) l_0_9_9)) (* (* 2.0 l_0_9_28) l_0_9_37))))
 (let ((?x22542 (+ (+ ?x22538 (* (* 2.0 l_0_9_29) l_0_9_38)) (* (* 2.0 l_0_9_30) l_0_9_39))))
 (let ((?x22548 (- (- (+ (+ ?x22542 (* (* 2.0 l_0_9_31) l_0_9_40)) ?x22206) ?x22208) ?x22547)))
 (= ?x22548 0.0)))))))))))))))))
(assert
 (let ((?x22605 (* l_0_9_36 l_0_9_36)))
 (let ((?x22603 (* l_0_9_35 l_0_9_35)))
 (let ((?x22601 (* l_0_9_34 l_0_9_34)))
 (let ((?x22599 (* l_0_9_33 l_0_9_33)))
 (let ((?x22597 (* l_0_9_32 l_0_9_32)))
 (let ((?x22595 (* l_0_9_15 l_0_9_15)))
 (let ((?x22593 (* l_0_9_14 l_0_9_14)))
 (let ((?x22591 (* l_0_9_13 l_0_9_13)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22351 (* ?x5749 l_0_9_137)))
 (let ((?x22592 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x22351) ?x22591)))
 (let ((?x22606 (+ (+ (+ (+ (+ (- (- ?x22592 ?x22593) ?x22595) ?x22597) ?x22599) ?x22601) ?x22603) ?x22605)))
 (= ?x22606 0.0))))))))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22654 (* ?x22210 l_0_9_95)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22637 (* ?x22188 l_0_9_179)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22632 (* ?x22182 l_0_9_158)))
 (let ((?x5749 (* 2.0 l_0_9_127)))
 (let ((?x22390 (* ?x5749 l_0_9_142)))
 (let ((?x22623 (- (* (* 2.0 l_0_9_106) l_0_9_116) (* (* 2.0 l_0_9_11) l_0_9_16))))
 (let ((?x22628 (- (- (- ?x22623 (* (* 2.0 l_0_9_12) l_0_9_17)) ?x22390) (* (* 2.0 l_0_9_13) l_0_9_18))))
 (let ((?x22636 (- (+ (- ?x22628 (* (* 2.0 l_0_9_14) l_0_9_19)) ?x22632) (* (* 2.0 l_0_9_15) l_0_9_20))))
 (let ((?x22644 (+ (+ (- ?x22636 ?x22637) (* (* 2.0 l_0_9_32) l_0_9_37)) (* (* 2.0 l_0_9_33) l_0_9_38))))
 (let ((?x22650 (+ (+ ?x22644 (* (* 2.0 l_0_9_34) l_0_9_39)) (* (* 2.0 l_0_9_35) l_0_9_40))))
 (= (- (+ ?x22650 (* (* 2.0 l_0_9_36) l_0_9_41)) ?x22654) 0.0)))))))))))))))
(assert
 (let ((?x22732 (* l_0_9_42 l_0_9_42)))
 (let ((?x22730 (* l_0_9_41 l_0_9_41)))
 (let ((?x22728 (* l_0_9_40 l_0_9_40)))
 (let ((?x22726 (* l_0_9_39 l_0_9_39)))
 (let ((?x22724 (* l_0_9_38 l_0_9_38)))
 (let ((?x22722 (* l_0_9_37 l_0_9_37)))
 (let ((?x22720 (* l_0_9_21 l_0_9_21)))
 (let ((?x22718 (* l_0_9_20 l_0_9_20)))
 (let ((?x22716 (* l_0_9_19 l_0_9_19)))
 (let ((?x22714 (* l_0_9_18 l_0_9_18)))
 (let ((?x22712 (* l_0_9_17 l_0_9_17)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22710 (* ?x22188 l_0_9_184)))
 (let ((?x22708 (* l_0_9_16 l_0_9_16)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22706 (* ?x22182 l_0_9_163)))
 (let ((?x22173 (* 2.0 l_0_9_106)))
 (let ((?x22704 (* ?x22173 l_0_9_121)))
 (let ((?x22711 (- (- (+ (+ (* (* (- 2.0) l_0_9_100) l_0_9_85) ?x22704) ?x22706) ?x22708) ?x22710)))
 (let ((?x22725 (+ (+ (- (- (- (- (- ?x22711 ?x22712) ?x22714) ?x22716) ?x22718) ?x22720) ?x22722) ?x22724)))
 (= (+ (+ (+ (+ ?x22725 ?x22726) ?x22728) ?x22730) ?x22732) 0.0))))))))))))))))))))))
(assert
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x22846 (* ?x22845 l_0_9_72)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x22843 (* ?x22842 l_0_9_71)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x22840 (* ?x22839 l_0_9_70)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x22837 (* ?x21424 l_0_9_71)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x21555 (* ?x21554 l_0_9_68)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x22834 (* ?x21418 l_0_9_70)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x21551 (* ?x21550 l_0_9_67)))
 (let ((?x22831 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x22828 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x22825 (* ?x22824 l_0_9_51)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x22822 (* ?x22821 l_0_9_50)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x22819 (* ?x22818 l_0_9_49)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x22816 (* ?x21397 l_0_9_50)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x21547 (* ?x21546 l_0_9_47)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x22813 (* ?x21391 l_0_9_49)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x21543 (* ?x21542 l_0_9_46)))
 (let ((?x22810 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x21385 (* 12.0 l_0_9_3)))
 (let ((?x21712 (* ?x21385 l_0_9_8)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x22806 (* ?x22805 l_0_9_30)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x22803 (* ?x22802 l_0_9_29)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x22800 (* ?x22799 l_0_9_28)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x21710 (* ?x21373 l_0_9_29)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x21704 (* ?x21364 l_0_9_28)))
 (let ((?x21355 (* 12.0 l_0_9_2)))
 (let ((?x21698 (* ?x21355 l_0_9_7)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x22767 (* ?x21346 l_0_9_134)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x6655 (* ?x21344 l_0_9_133)))
 (let ((?x22774 (- (- (+ ?x6655 ?x22767) (* (* 2.0 l_0_9_193) l_0_9_196)) (* (* 2.0 l_0_9_194) l_0_9_197))))
 (let ((?x22781 (- (+ (- ?x22774 (* (* 2.0 l_0_9_195) l_0_9_198)) ?x21698) (* (* 2.0 l_0_9_214) l_0_9_217))))
 (let ((?x22787 (- (- ?x22781 (* (* 2.0 l_0_9_215) l_0_9_218)) (* (* 2.0 l_0_9_216) l_0_9_219))))
 (let ((?x22794 (- (- (- ?x22787 ?x21704) (* (* 2.0 l_0_9_235) l_0_9_238)) (* (* 2.0 l_0_9_236) l_0_9_239))))
 (let ((?x22804 (- (- (- (- ?x22794 (* (* 2.0 l_0_9_237) l_0_9_240)) ?x21710) ?x22800) ?x22803)))
 (let ((?x22817 (- (+ (- (+ (+ (+ (- ?x22804 ?x22806) ?x21712) ?x22810) ?x21543) ?x22813) ?x21547) ?x22816)))
 (let ((?x22835 (+ (- (+ (+ (- (- (- ?x22817 ?x22819) ?x22822) ?x22825) ?x22828) ?x22831) ?x21551) ?x22834)))
 (= (+ (+ (+ (+ (- ?x22835 ?x21555) ?x22837) ?x22840) ?x22843) ?x22846) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x22973 (* ?x22845 l_0_9_76)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x22971 (* ?x22842 l_0_9_75)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x22969 (* ?x22839 l_0_9_74)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x22967 (* ?x21424 l_0_9_75)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x22965 (* ?x21418 l_0_9_74)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x22963 (* ?x22824 l_0_9_55)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x22961 (* ?x22821 l_0_9_54)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x22959 (* ?x22818 l_0_9_53)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x22957 (* ?x21397 l_0_9_54)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x22955 (* ?x21391 l_0_9_53)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x22953 (* ?x22805 l_0_9_34)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x22951 (* ?x22802 l_0_9_33)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x22949 (* ?x22799 l_0_9_32)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x22947 (* ?x21373 l_0_9_33)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x22939 (* ?x21364 l_0_9_32)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x22925 (* ?x22924 l_0_9_6)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x22922 (* ?x21346 l_0_9_138)))
 (let ((?x21347 (* ?x21346 l_0_9_131)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x22919 (* ?x21344 l_0_9_137)))
 (let ((?x21345 (* ?x21344 l_0_9_130)))
 (let ((?x22901 (* 12.0 l_0_9_12)))
 (let ((?x22916 (* ?x22901 l_0_9_5)))
 (let ((?x22914 (* ?x22901 l_0_9_3)))
 (let ((?x6952 (* 12.0 l_0_9_11)))
 (let ((?x22898 (* ?x6952 l_0_9_4)))
 (let ((?x6949 (* ?x6952 l_0_9_2)))
 (let ((?x22923 (+ (- (+ (- (+ (+ (+ ?x6949 ?x22898) ?x22914) ?x22916) ?x21345) ?x22919) ?x21347) ?x22922)))
 (let ((?x22930 (- (- (+ ?x22923 ?x22925) (* (* 2.0 l_0_9_193) l_0_9_200)) (* (* 2.0 l_0_9_194) l_0_9_201))))
 (let ((?x22934 (- (- ?x22930 (* (* 2.0 l_0_9_195) l_0_9_202)) (* (* 2.0 l_0_9_214) l_0_9_221))))
 (let ((?x22938 (- (- ?x22934 (* (* 2.0 l_0_9_215) l_0_9_222)) (* (* 2.0 l_0_9_216) l_0_9_223))))
 (let ((?x22944 (- (- (- ?x22938 ?x22939) (* (* 2.0 l_0_9_235) l_0_9_242)) (* (* 2.0 l_0_9_236) l_0_9_243))))
 (let ((?x22952 (- (- (- (- ?x22944 (* (* 2.0 l_0_9_237) l_0_9_244)) ?x22947) ?x22949) ?x22951)))
 (let ((?x22966 (+ (- (- (- (- (- (- ?x22952 ?x22953) ?x22955) ?x22957) ?x22959) ?x22961) ?x22963) ?x22965)))
 (= (+ (+ (+ (+ ?x22966 ?x22967) ?x22969) ?x22971) ?x22973) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x23119 (* ?x23118 l_0_9_89)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x23116 (* ?x23115 l_0_9_88)))
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x23113 (* ?x22845 l_0_9_81)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x23111 (* ?x22842 l_0_9_80)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x23109 (* ?x22839 l_0_9_79)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x23107 (* ?x21424 l_0_9_80)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x23105 (* ?x21418 l_0_9_79)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x23103 (* ?x22824 l_0_9_60)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x23101 (* ?x22821 l_0_9_59)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x23099 (* ?x22818 l_0_9_58)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x23097 (* ?x21397 l_0_9_59)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x23095 (* ?x21391 l_0_9_58)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x23093 (* ?x22805 l_0_9_39)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x23091 (* ?x22802 l_0_9_38)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x23089 (* ?x22799 l_0_9_37)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x23087 (* ?x21373 l_0_9_38)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x23079 (* ?x21364 l_0_9_37)))
 (let ((?x23064 (* 12.0 l_0_9_18)))
 (let ((?x23065 (* ?x23064 l_0_9_6)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x23062 (* ?x23061 l_0_9_173)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x23059 (* ?x23058 l_0_9_172)))
 (let ((?x23053 (* 12.0 l_0_9_17)))
 (let ((?x23056 (* ?x23053 l_0_9_5)))
 (let ((?x23054 (* ?x23053 l_0_9_3)))
 (let ((?x23048 (* 12.0 l_0_9_16)))
 (let ((?x23051 (* ?x23048 l_0_9_4)))
 (let ((?x23049 (* ?x23048 l_0_9_2)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x23046 (* ?x23045 l_0_9_152)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x23043 (* ?x23042 l_0_9_151)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x23040 (* ?x21346 l_0_9_143)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x23024 (* ?x21344 l_0_9_142)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x23021 (* ?x23019 l_0_9_110)))
 (let ((?x23044 (+ (+ (+ (+ (* (* 2.0 l_0_9_107) l_0_9_109) ?x23021) ?x23024) ?x23040) ?x23043)))
 (let ((?x23063 (- (- (+ (+ (+ (+ (+ ?x23044 ?x23046) ?x23049) ?x23051) ?x23054) ?x23056) ?x23059) ?x23062)))
 (let ((?x23070 (- (- (+ ?x23063 ?x23065) (* (* 2.0 l_0_9_193) l_0_9_205)) (* (* 2.0 l_0_9_194) l_0_9_206))))
 (let ((?x23074 (- (- ?x23070 (* (* 2.0 l_0_9_195) l_0_9_207)) (* (* 2.0 l_0_9_214) l_0_9_226))))
 (let ((?x23078 (- (- ?x23074 (* (* 2.0 l_0_9_215) l_0_9_227)) (* (* 2.0 l_0_9_216) l_0_9_228))))
 (let ((?x23084 (- (- (- ?x23078 ?x23079) (* (* 2.0 l_0_9_235) l_0_9_247)) (* (* 2.0 l_0_9_236) l_0_9_248))))
 (let ((?x23092 (- (- (- (- ?x23084 (* (* 2.0 l_0_9_237) l_0_9_249)) ?x23087) ?x23089) ?x23091)))
 (let ((?x23106 (+ (- (- (- (- (- (- ?x23092 ?x23093) ?x23095) ?x23097) ?x23099) ?x23101) ?x23103) ?x23105)))
 (= (- (- (+ (+ (+ (+ ?x23106 ?x23107) ?x23109) ?x23111) ?x23113) ?x23116) ?x23119) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23264 (* l_0_9_87 l_0_9_87)))
 (let ((?x23262 (* l_0_9_86 l_0_9_86)))
 (let ((?x21436 (* l_0_9_69 l_0_9_69)))
 (let ((?x23260 (* 3.0 ?x21436)))
 (let ((?x21433 (* l_0_9_68 l_0_9_68)))
 (let ((?x23258 (* 3.0 ?x21433)))
 (let ((?x21430 (* l_0_9_67 l_0_9_67)))
 (let ((?x23256 (* 3.0 ?x21430)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x21425 (* ?x21424 l_0_9_68)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x21419 (* ?x21418 l_0_9_67)))
 (let ((?x21415 (* l_0_9_6 l_0_9_6)))
 (let ((?x21416 (* 6.0 ?x21415)))
 (let ((?x21412 (* l_0_9_5 l_0_9_5)))
 (let ((?x21413 (* 6.0 ?x21412)))
 (let ((?x23250 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23247 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x23244 (* (* 3.0 l_0_9_46) l_0_9_46)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x21398 (* ?x21397 l_0_9_47)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x21392 (* ?x21391 l_0_9_46)))
 (let ((?x21388 (* l_0_9_4 l_0_9_4)))
 (let ((?x21389 (* 6.0 ?x21388)))
 (let ((?x21383 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x21380 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x21377 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x23235 (* l_0_9_171 l_0_9_171)))
 (let ((?x23233 (* l_0_9_170 l_0_9_170)))
 (let ((?x23231 (* l_0_9_150 l_0_9_150)))
 (let ((?x23229 (* l_0_9_149 l_0_9_149)))
 (let ((?x23227 (* l_0_9_132 l_0_9_132)))
 (let ((?x23225 (* l_0_9_131 l_0_9_131)))
 (let ((?x23223 (* l_0_9_130 l_0_9_130)))
 (let ((?x23224 (+ (- (* (- l_0_9_107) l_0_9_107) (* l_0_9_108 l_0_9_108)) ?x23223)))
 (let ((?x23237 (- (+ (+ (- (- (+ (+ ?x23224 ?x23225) ?x23227) ?x23229) ?x23231) ?x23233) ?x23235) ?x21377)))
 (let ((?x23248 (- (- (- (- (+ (- (- ?x23237 ?x21380) ?x21383) ?x21389) ?x21392) ?x21398) ?x23244) ?x23247)))
 (let ((?x23259 (+ (+ (+ (+ (+ (+ (- ?x23248 ?x23250) ?x21413) ?x21416) ?x21419) ?x21425) ?x23256) ?x23258)))
 (= (+ (+ (+ ?x23259 ?x23260) ?x23262) ?x23264) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21436 (* l_0_9_69 l_0_9_69)))
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23330 (* ?x23329 l_0_9_72)))
 (let ((?x21433 (* l_0_9_68 l_0_9_68)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23326 (* ?x23325 l_0_9_71)))
 (let ((?x21430 (* l_0_9_67 l_0_9_67)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23322 (* ?x23321 l_0_9_70)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x22837 (* ?x21424 l_0_9_71)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x22834 (* ?x21418 l_0_9_70)))
 (let ((?x22831 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x22828 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x4945 (* l_0_9_48 l_0_9_48)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23314 (* ?x23313 l_0_9_51)))
 (let ((?x4941 (* l_0_9_47 l_0_9_47)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23310 (* ?x23309 l_0_9_50)))
 (let ((?x4811 (* l_0_9_46 l_0_9_46)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23306 (* ?x23305 l_0_9_49)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x22816 (* ?x21397 l_0_9_50)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x22813 (* ?x21391 l_0_9_49)))
 (let ((?x22810 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x22806 (* ?x22805 l_0_9_30)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x22803 (* ?x22802 l_0_9_29)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x22800 (* ?x22799 l_0_9_28)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23297 (* ?x23296 l_0_9_135)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23294 (* ?x23293 l_0_9_134)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23292 (* ?x7363 l_0_9_133)))
 (let ((?x23303 (- (+ (- (- (- (+ (+ ?x23292 ?x23294) ?x23297) ?x22800) ?x22803) ?x22806) ?x22810) ?x22813)))
 (let ((?x23316 (+ (- (+ (- (+ (- (- ?x23303 ?x22816) ?x23306) ?x4811) ?x23310) ?x4941) ?x23314) ?x4945)))
 (let ((?x23327 (+ (- (+ (+ (+ (+ (+ ?x23316 ?x22828) ?x22831) ?x22834) ?x22837) ?x23322) ?x21430) ?x23326)))
 (= (- (+ (- ?x23327 ?x21433) ?x23330) ?x21436) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23392 (* ?x23329 l_0_9_76)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23390 (* ?x23325 l_0_9_75)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23388 (* ?x23321 l_0_9_74)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x22967 (* ?x21424 l_0_9_75)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x22965 (* ?x21418 l_0_9_74)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23384 (* ?x23313 l_0_9_55)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23382 (* ?x23309 l_0_9_54)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23380 (* ?x23305 l_0_9_53)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x22957 (* ?x21397 l_0_9_54)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x22955 (* ?x21391 l_0_9_53)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x22953 (* ?x22805 l_0_9_34)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x22951 (* ?x22802 l_0_9_33)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x22949 (* ?x22799 l_0_9_32)))
 (let ((?x23227 (* l_0_9_132 l_0_9_132)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23372 (* ?x23296 l_0_9_139)))
 (let ((?x23225 (* l_0_9_131 l_0_9_131)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23369 (* ?x23293 l_0_9_138)))
 (let ((?x23223 (* l_0_9_130 l_0_9_130)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23366 (* ?x7363 l_0_9_137)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x22925 (* ?x22924 l_0_9_6)))
 (let ((?x22901 (* 12.0 l_0_9_12)))
 (let ((?x22916 (* ?x22901 l_0_9_5)))
 (let ((?x6952 (* 12.0 l_0_9_11)))
 (let ((?x22898 (* ?x6952 l_0_9_4)))
 (let ((?x23373 (+ (- (+ (- (+ (+ (+ ?x22898 ?x22916) ?x22925) ?x23366) ?x23223) ?x23369) ?x23225) ?x23372)))
 (let ((?x23381 (- (- (- (- (- (- (- ?x23373 ?x23227) ?x22949) ?x22951) ?x22953) ?x22955) ?x22957) ?x23380)))
 (let ((?x23393 (+ (+ (+ (+ (+ (- (- ?x23381 ?x23382) ?x23384) ?x22965) ?x22967) ?x23388) ?x23390) ?x23392)))
 (= ?x23393 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23457 (* l_0_9_90 l_0_9_90)))
 (let ((?x23455 (* l_0_9_89 l_0_9_89)))
 (let ((?x23453 (* l_0_9_88 l_0_9_88)))
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23451 (* ?x23329 l_0_9_81)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23449 (* ?x23325 l_0_9_80)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23447 (* ?x23321 l_0_9_79)))
 (let ((?x21424 (* 6.0 l_0_9_66)))
 (let ((?x23107 (* ?x21424 l_0_9_80)))
 (let ((?x21418 (* 6.0 l_0_9_65)))
 (let ((?x23105 (* ?x21418 l_0_9_79)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23443 (* ?x23313 l_0_9_60)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23441 (* ?x23309 l_0_9_59)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23439 (* ?x23305 l_0_9_58)))
 (let ((?x21397 (* 6.0 l_0_9_45)))
 (let ((?x23097 (* ?x21397 l_0_9_59)))
 (let ((?x21391 (* 6.0 l_0_9_44)))
 (let ((?x23095 (* ?x21391 l_0_9_58)))
 (let ((?x22805 (* 12.0 l_0_9_27)))
 (let ((?x23093 (* ?x22805 l_0_9_39)))
 (let ((?x22802 (* 12.0 l_0_9_26)))
 (let ((?x23091 (* ?x22802 l_0_9_38)))
 (let ((?x22799 (* 12.0 l_0_9_25)))
 (let ((?x23089 (* ?x22799 l_0_9_37)))
 (let ((?x23064 (* 12.0 l_0_9_18)))
 (let ((?x23065 (* ?x23064 l_0_9_6)))
 (let ((?x23431 (* l_0_9_174 l_0_9_174)))
 (let ((?x23429 (* l_0_9_173 l_0_9_173)))
 (let ((?x23427 (* l_0_9_172 l_0_9_172)))
 (let ((?x23053 (* 12.0 l_0_9_17)))
 (let ((?x23056 (* ?x23053 l_0_9_5)))
 (let ((?x23048 (* 12.0 l_0_9_16)))
 (let ((?x23051 (* ?x23048 l_0_9_4)))
 (let ((?x23423 (* l_0_9_153 l_0_9_153)))
 (let ((?x23421 (* l_0_9_152 l_0_9_152)))
 (let ((?x23419 (* l_0_9_151 l_0_9_151)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23417 (* ?x23296 l_0_9_144)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23415 (* ?x23293 l_0_9_143)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23413 (* ?x7363 l_0_9_142)))
 (let ((?x6461 (* l_0_9_111 l_0_9_111)))
 (let ((?x23414 (+ (+ (+ (* l_0_9_109 l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x6461) ?x23413)))
 (let ((?x23426 (+ (+ (+ (+ (+ (+ (+ ?x23414 ?x23415) ?x23417) ?x23419) ?x23421) ?x23423) ?x23051) ?x23056)))
 (let ((?x23436 (- (- (- (+ (- (- (- ?x23426 ?x23427) ?x23429) ?x23431) ?x23065) ?x23089) ?x23091) ?x23093)))
 (let ((?x23446 (+ (+ (- (- (- (- (- ?x23436 ?x23095) ?x23097) ?x23439) ?x23441) ?x23443) ?x23105) ?x23107)))
 (= (- (- (- (+ (+ (+ ?x23446 ?x23447) ?x23449) ?x23451) ?x23453) ?x23455) ?x23457) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21937 (* l_0_9_9 l_0_9_9)))
 (let ((?x21938 (* 6.0 ?x21937)))
 (let ((?x21934 (* l_0_9_8 l_0_9_8)))
 (let ((?x21935 (* 6.0 ?x21934)))
 (let ((?x21931 (* l_0_9_73 l_0_9_73)))
 (let ((?x23534 (* 3.0 ?x21931)))
 (let ((?x21928 (* l_0_9_72 l_0_9_72)))
 (let ((?x23532 (* 3.0 ?x21928)))
 (let ((?x21925 (* l_0_9_71 l_0_9_71)))
 (let ((?x23530 (* 3.0 ?x21925)))
 (let ((?x21922 (* l_0_9_70 l_0_9_70)))
 (let ((?x23528 (* 3.0 ?x21922)))
 (let ((?x21919 (* l_0_9_7 l_0_9_7)))
 (let ((?x21920 (* 6.0 ?x21919)))
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x22846 (* ?x22845 l_0_9_72)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x22843 (* ?x22842 l_0_9_71)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x22840 (* ?x22839 l_0_9_70)))
 (let ((?x23522 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x23519 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x23516 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x22825 (* ?x22824 l_0_9_51)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x22822 (* ?x22821 l_0_9_50)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x22819 (* ?x22818 l_0_9_49)))
 (let ((?x21901 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x21898 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x21895 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x21892 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x23503 (* l_0_9_136 l_0_9_136)))
 (let ((?x23501 (* l_0_9_135 l_0_9_135)))
 (let ((?x23499 (* l_0_9_134 l_0_9_134)))
 (let ((?x23500 (+ (+ (* 6.0 (* l_0_9_10 l_0_9_10)) (* l_0_9_133 l_0_9_133)) ?x23499)))
 (let ((?x23509 (+ (- (- (- (- (+ (+ ?x23500 ?x23501) ?x23503) ?x21892) ?x21895) ?x21898) ?x21901) ?x22819)))
 (let ((?x23517 (- (- (+ (+ ?x23509 ?x22822) ?x22825) (* (* 3.0 l_0_9_49) l_0_9_49)) ?x23516)))
 (let ((?x23529 (+ (+ (- (- (- (- (- ?x23517 ?x23519) ?x23522) ?x22840) ?x22843) ?x22846) ?x21920) ?x23528)))
 (= (+ (+ (+ (+ (+ ?x23529 ?x23530) ?x23532) ?x23534) ?x21935) ?x21938) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23602 (* 6.0 l_0_9_73)))
 (let ((?x23603 (* ?x23602 l_0_9_77)))
 (let ((?x23599 (* 6.0 l_0_9_72)))
 (let ((?x23600 (* ?x23599 l_0_9_76)))
 (let ((?x23596 (* 6.0 l_0_9_71)))
 (let ((?x23597 (* ?x23596 l_0_9_75)))
 (let ((?x23593 (* 6.0 l_0_9_70)))
 (let ((?x23594 (* ?x23593 l_0_9_74)))
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x22973 (* ?x22845 l_0_9_76)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x22971 (* ?x22842 l_0_9_75)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x22969 (* ?x22839 l_0_9_74)))
 (let ((?x23587 (* 6.0 l_0_9_52)))
 (let ((?x23588 (* ?x23587 l_0_9_56)))
 (let ((?x23584 (* 6.0 l_0_9_51)))
 (let ((?x23585 (* ?x23584 l_0_9_55)))
 (let ((?x23581 (* 6.0 l_0_9_50)))
 (let ((?x23582 (* ?x23581 l_0_9_54)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x22963 (* ?x22824 l_0_9_55)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x22961 (* ?x22821 l_0_9_54)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x22959 (* ?x22818 l_0_9_53)))
 (let ((?x23572 (* 12.0 l_0_9_31)))
 (let ((?x23573 (* ?x23572 l_0_9_35)))
 (let ((?x23569 (* 12.0 l_0_9_30)))
 (let ((?x23570 (* ?x23569 l_0_9_34)))
 (let ((?x23566 (* 12.0 l_0_9_29)))
 (let ((?x23567 (* ?x23566 l_0_9_33)))
 (let ((?x23563 (* 12.0 l_0_9_28)))
 (let ((?x23564 (* ?x23563 l_0_9_32)))
 (let ((?x23560 (* 2.0 l_0_9_136)))
 (let ((?x23561 (* ?x23560 l_0_9_140)))
 (let ((?x23557 (* 2.0 l_0_9_135)))
 (let ((?x23558 (* ?x23557 l_0_9_139)))
 (let ((?x23554 (* 2.0 l_0_9_134)))
 (let ((?x23555 (* ?x23554 l_0_9_138)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23297 (* ?x23296 l_0_9_135)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23294 (* ?x23293 l_0_9_134)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23292 (* ?x7363 l_0_9_133)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x23546 (* ?x22924 l_0_9_9)))
 (let ((?x23543 (+ (* (* 12.0 l_0_9_10) l_0_9_14) (* (* 12.0 l_0_9_11) l_0_9_7))))
 (let ((?x23545 (+ ?x23543 (* (* 12.0 l_0_9_12) l_0_9_8))))
 (let ((?x23553 (+ (- (- (- (+ ?x23545 ?x23546) ?x23292) ?x23294) ?x23297) (* (* 2.0 l_0_9_133) l_0_9_137))))
 (let ((?x23574 (- (- (- (- (+ (+ (+ ?x23553 ?x23555) ?x23558) ?x23561) ?x23564) ?x23567) ?x23570) ?x23573)))
 (let ((?x23580 (- (+ (+ (+ ?x23574 ?x22959) ?x22961) ?x22963) (* (* 6.0 l_0_9_49) l_0_9_53))))
 (let ((?x23595 (+ (- (- (- (- (- (- ?x23580 ?x23582) ?x23585) ?x23588) ?x22969) ?x22971) ?x22973) ?x23594)))
 (= (+ (+ (+ ?x23595 ?x23597) ?x23600) ?x23603) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23716 (* 2.0 l_0_9_90)))
 (let ((?x23717 (* ?x23716 l_0_9_93)))
 (let ((?x23713 (* 2.0 l_0_9_89)))
 (let ((?x23714 (* ?x23713 l_0_9_92)))
 (let ((?x23710 (* 2.0 l_0_9_88)))
 (let ((?x23711 (* ?x23710 l_0_9_91)))
 (let ((?x23602 (* 6.0 l_0_9_73)))
 (let ((?x23708 (* ?x23602 l_0_9_82)))
 (let ((?x23599 (* 6.0 l_0_9_72)))
 (let ((?x23706 (* ?x23599 l_0_9_81)))
 (let ((?x23596 (* 6.0 l_0_9_71)))
 (let ((?x23704 (* ?x23596 l_0_9_80)))
 (let ((?x23593 (* 6.0 l_0_9_70)))
 (let ((?x23702 (* ?x23593 l_0_9_79)))
 (let ((?x22845 (* 2.0 l_0_9_69)))
 (let ((?x23113 (* ?x22845 l_0_9_81)))
 (let ((?x22842 (* 2.0 l_0_9_68)))
 (let ((?x23111 (* ?x22842 l_0_9_80)))
 (let ((?x22839 (* 2.0 l_0_9_67)))
 (let ((?x23109 (* ?x22839 l_0_9_79)))
 (let ((?x23587 (* 6.0 l_0_9_52)))
 (let ((?x23697 (* ?x23587 l_0_9_61)))
 (let ((?x23584 (* 6.0 l_0_9_51)))
 (let ((?x23695 (* ?x23584 l_0_9_60)))
 (let ((?x23581 (* 6.0 l_0_9_50)))
 (let ((?x23693 (* ?x23581 l_0_9_59)))
 (let ((?x22824 (* 2.0 l_0_9_48)))
 (let ((?x23103 (* ?x22824 l_0_9_60)))
 (let ((?x22821 (* 2.0 l_0_9_47)))
 (let ((?x23101 (* ?x22821 l_0_9_59)))
 (let ((?x22818 (* 2.0 l_0_9_46)))
 (let ((?x23099 (* ?x22818 l_0_9_58)))
 (let ((?x23572 (* 12.0 l_0_9_31)))
 (let ((?x23686 (* ?x23572 l_0_9_40)))
 (let ((?x23569 (* 12.0 l_0_9_30)))
 (let ((?x23684 (* ?x23569 l_0_9_39)))
 (let ((?x23566 (* 12.0 l_0_9_29)))
 (let ((?x23682 (* ?x23566 l_0_9_38)))
 (let ((?x23563 (* 12.0 l_0_9_28)))
 (let ((?x23680 (* ?x23563 l_0_9_37)))
 (let ((?x23064 (* 12.0 l_0_9_18)))
 (let ((?x23678 (* ?x23064 l_0_9_9)))
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x23676 (* ?x23675 l_0_9_177)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x23673 (* ?x23672 l_0_9_176)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x23670 (* ?x23669 l_0_9_175)))
 (let ((?x23053 (* 12.0 l_0_9_17)))
 (let ((?x23667 (* ?x23053 l_0_9_8)))
 (let ((?x23048 (* 12.0 l_0_9_16)))
 (let ((?x23665 (* ?x23048 l_0_9_7)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x23663 (* ?x23662 l_0_9_156)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x23660 (* ?x23659 l_0_9_155)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x23657 (* ?x23656 l_0_9_154)))
 (let ((?x23560 (* 2.0 l_0_9_136)))
 (let ((?x23654 (* ?x23560 l_0_9_145)))
 (let ((?x23557 (* 2.0 l_0_9_135)))
 (let ((?x23652 (* ?x23557 l_0_9_144)))
 (let ((?x23554 (* 2.0 l_0_9_134)))
 (let ((?x23650 (* ?x23554 l_0_9_143)))
 (let ((?x23551 (* 2.0 l_0_9_133)))
 (let ((?x23648 (* ?x23551 l_0_9_142)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x23646 (* ?x23645 l_0_9_114)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x23643 (* ?x23642 l_0_9_113)))
 (let ((?x7641 (* 12.0 l_0_9_10)))
 (let ((?x23638 (* ?x7641 l_0_9_19)))
 (let ((?x23649 (+ (+ (+ (+ ?x23638 (* (* 2.0 l_0_9_109) l_0_9_112)) ?x23643) ?x23646) ?x23648)))
 (let ((?x23666 (+ (+ (+ (+ (+ (+ (+ ?x23649 ?x23650) ?x23652) ?x23654) ?x23657) ?x23660) ?x23663) ?x23665)))
 (let ((?x23683 (- (- (+ (- (- (- (+ ?x23666 ?x23667) ?x23670) ?x23673) ?x23676) ?x23678) ?x23680) ?x23682)))
 (let ((?x23692 (- (+ (+ (+ (- (- ?x23683 ?x23684) ?x23686) ?x23099) ?x23101) ?x23103) (* (* 6.0 l_0_9_49) l_0_9_58))))
 (let ((?x23703 (+ (- (- (- (- (- (- ?x23692 ?x23693) ?x23695) ?x23697) ?x23109) ?x23111) ?x23113) ?x23702)))
 (= (- (- (- (+ (+ (+ ?x23703 ?x23704) ?x23706) ?x23708) ?x23711) ?x23714) ?x23717) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23865 (* l_0_9_78 l_0_9_78)))
 (let ((?x23866 (* 3.0 ?x23865)))
 (let ((?x23862 (* l_0_9_77 l_0_9_77)))
 (let ((?x23863 (* 3.0 ?x23862)))
 (let ((?x23859 (* l_0_9_76 l_0_9_76)))
 (let ((?x23860 (* 3.0 ?x23859)))
 (let ((?x23856 (* l_0_9_75 l_0_9_75)))
 (let ((?x23857 (* 3.0 ?x23856)))
 (let ((?x23853 (* l_0_9_74 l_0_9_74)))
 (let ((?x23854 (* 3.0 ?x23853)))
 (let ((?x23851 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x23848 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x23845 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x23842 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x23836 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x23833 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x23830 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x23827 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x23824 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x22595 (* l_0_9_15 l_0_9_15)))
 (let ((?x23821 (* 6.0 ?x22595)))
 (let ((?x23819 (* l_0_9_141 l_0_9_141)))
 (let ((?x23817 (* l_0_9_140 l_0_9_140)))
 (let ((?x22593 (* l_0_9_14 l_0_9_14)))
 (let ((?x23815 (* 6.0 ?x22593)))
 (let ((?x23813 (* l_0_9_139 l_0_9_139)))
 (let ((?x23811 (* l_0_9_138 l_0_9_138)))
 (let ((?x23809 (* l_0_9_137 l_0_9_137)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23372 (* ?x23296 l_0_9_139)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23369 (* ?x23293 l_0_9_138)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23366 (* ?x7363 l_0_9_137)))
 (let ((?x22591 (* l_0_9_13 l_0_9_13)))
 (let ((?x23804 (* 6.0 ?x22591)))
 (let ((?x23803 (+ (* 6.0 (* l_0_9_11 l_0_9_11)) (* 6.0 (* l_0_9_12 l_0_9_12)))))
 (let ((?x23814 (+ (+ (+ (- (- (- (+ ?x23803 ?x23804) ?x23366) ?x23369) ?x23372) ?x23809) ?x23811) ?x23813)))
 (let ((?x23831 (- (- (- (+ (+ (+ (+ ?x23814 ?x23815) ?x23817) ?x23819) ?x23821) ?x23824) ?x23827) ?x23830)))
 (let ((?x23843 (- (- (- (- ?x23831 ?x23833) ?x23836) (* (* 3.0 l_0_9_53) l_0_9_53)) ?x23842)))
 (let ((?x23864 (+ (+ (+ (+ (- (- (- ?x23843 ?x23845) ?x23848) ?x23851) ?x23854) ?x23857) ?x23860) ?x23863)))
 (= (+ ?x23864 ?x23866) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23716 (* 2.0 l_0_9_90)))
 (let ((?x24014 (* ?x23716 l_0_9_97)))
 (let ((?x23713 (* 2.0 l_0_9_89)))
 (let ((?x24012 (* ?x23713 l_0_9_96)))
 (let ((?x23710 (* 2.0 l_0_9_88)))
 (let ((?x24010 (* ?x23710 l_0_9_95)))
 (let ((?x24008 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24005 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24002 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x23999 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x23996 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x23993 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x23990 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x23987 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x23984 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x23978 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x23975 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x23972 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x23969 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x23966 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x23963 (* ?x23675 l_0_9_181)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x23961 (* ?x23672 l_0_9_180)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x23959 (* ?x23669 l_0_9_179)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x23957 (* ?x23662 l_0_9_160)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x23955 (* ?x23659 l_0_9_159)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x23953 (* ?x23656 l_0_9_158)))
 (let ((?x23951 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x23948 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x23945 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x23942 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x23939 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x23936 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x23933 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x23296 (* 2.0 l_0_9_132)))
 (let ((?x23417 (* ?x23296 l_0_9_144)))
 (let ((?x23293 (* 2.0 l_0_9_131)))
 (let ((?x23415 (* ?x23293 l_0_9_143)))
 (let ((?x7363 (* 2.0 l_0_9_130)))
 (let ((?x23413 (* ?x7363 l_0_9_142)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x23927 (* ?x22924 l_0_9_18)))
 (let ((?x22901 (* 12.0 l_0_9_12)))
 (let ((?x23925 (* ?x22901 l_0_9_17)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x23923 (* ?x23645 l_0_9_118)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x23921 (* ?x23642 l_0_9_117)))
 (let ((?x6952 (* 12.0 l_0_9_11)))
 (let ((?x23919 (* ?x6952 l_0_9_16)))
 (let ((?x23926 (+ (+ (+ (+ (* (* 2.0 l_0_9_109) l_0_9_116) ?x23919) ?x23921) ?x23923) ?x23925)))
 (let ((?x23940 (+ (+ (+ (- (- (- (+ ?x23926 ?x23927) ?x23413) ?x23415) ?x23417) ?x23933) ?x23936) ?x23939)))
 (let ((?x23958 (+ (+ (+ (+ (+ (+ (+ ?x23940 ?x23942) ?x23945) ?x23948) ?x23951) ?x23953) ?x23955) ?x23957)))
 (let ((?x23976 (- (- (- (- (- (- (- ?x23958 ?x23959) ?x23961) ?x23963) ?x23966) ?x23969) ?x23972) ?x23975)))
 (let ((?x23988 (- (- (- (- ?x23976 ?x23978) (* (* 6.0 l_0_9_53) l_0_9_58)) ?x23984) ?x23987)))
 (let ((?x24009 (+ (+ (+ (+ (+ (- (- ?x23988 ?x23990) ?x23993) ?x23996) ?x23999) ?x24002) ?x24005) ?x24008)))
 (= (- (- (- ?x24009 ?x24010) ?x24012) ?x24014) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24205 (* l_0_9_84 l_0_9_84)))
 (let ((?x24206 (* 3.0 ?x24205)))
 (let ((?x24202 (* l_0_9_83 l_0_9_83)))
 (let ((?x24203 (* 3.0 ?x24202)))
 (let ((?x24199 (* l_0_9_82 l_0_9_82)))
 (let ((?x24200 (* 3.0 ?x24199)))
 (let ((?x24196 (* l_0_9_81 l_0_9_81)))
 (let ((?x24197 (* 3.0 ?x24196)))
 (let ((?x24193 (* l_0_9_80 l_0_9_80)))
 (let ((?x24194 (* 3.0 ?x24193)))
 (let ((?x24190 (* l_0_9_79 l_0_9_79)))
 (let ((?x24191 (* 3.0 ?x24190)))
 (let ((?x24188 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24185 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24182 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24179 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24176 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x24170 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x24167 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x24164 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x24161 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x24158 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x24155 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x22720 (* l_0_9_21 l_0_9_21)))
 (let ((?x24152 (* 6.0 ?x22720)))
 (let ((?x22718 (* l_0_9_20 l_0_9_20)))
 (let ((?x24150 (* 6.0 ?x22718)))
 (let ((?x22716 (* l_0_9_19 l_0_9_19)))
 (let ((?x24148 (* 6.0 ?x22716)))
 (let ((?x22714 (* l_0_9_18 l_0_9_18)))
 (let ((?x24146 (* 6.0 ?x22714)))
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x24144 (* ?x23675 l_0_9_186)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x24142 (* ?x23672 l_0_9_185)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x24140 (* ?x23669 l_0_9_184)))
 (let ((?x22712 (* l_0_9_17 l_0_9_17)))
 (let ((?x24138 (* 6.0 ?x22712)))
 (let ((?x22708 (* l_0_9_16 l_0_9_16)))
 (let ((?x24136 (* 6.0 ?x22708)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x24134 (* ?x23662 l_0_9_165)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x24132 (* ?x23659 l_0_9_164)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x24130 (* ?x23656 l_0_9_163)))
 (let ((?x24128 (* l_0_9_147 l_0_9_147)))
 (let ((?x24126 (* l_0_9_146 l_0_9_146)))
 (let ((?x24124 (* l_0_9_145 l_0_9_145)))
 (let ((?x24122 (* l_0_9_144 l_0_9_144)))
 (let ((?x24120 (* l_0_9_143 l_0_9_143)))
 (let ((?x24118 (* l_0_9_142 l_0_9_142)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x24116 (* ?x23645 l_0_9_123)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x24114 (* ?x23642 l_0_9_122)))
 (let ((?x23639 (* 2.0 l_0_9_109)))
 (let ((?x24112 (* ?x23639 l_0_9_121)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x24110 (* ?x24109 l_0_9_90)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x24107 (* ?x24106 l_0_9_89)))
 (let ((?x24115 (+ (+ (- (- (* (* (- 2.0) l_0_9_100) l_0_9_88) ?x24107) ?x24110) ?x24112) ?x24114)))
 (let ((?x24129 (+ (+ (+ (+ (+ (+ (+ ?x24115 ?x24116) ?x24118) ?x24120) ?x24122) ?x24124) ?x24126) ?x24128)))
 (let ((?x24143 (- (- (+ (+ (+ (+ (+ ?x24129 ?x24130) ?x24132) ?x24134) ?x24136) ?x24138) ?x24140) ?x24142)))
 (let ((?x24159 (- (- (+ (+ (+ (+ (- ?x24143 ?x24144) ?x24146) ?x24148) ?x24150) ?x24152) ?x24155) ?x24158)))
 (let ((?x24174 (- (- (- (- (- ?x24159 ?x24161) ?x24164) ?x24167) ?x24170) (* (* 3.0 l_0_9_58) l_0_9_58))))
 (let ((?x24195 (+ (+ (- (- (- (- (- ?x24174 ?x24176) ?x24179) ?x24182) ?x24185) ?x24188) ?x24191) ?x24194)))
 (= (+ (+ (+ (+ ?x24195 ?x24197) ?x24200) ?x24203) ?x24206) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x24332 (* ?x21554 l_0_9_75)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x24330 (* ?x21550 l_0_9_74)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x24328 (* ?x21546 l_0_9_54)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x24326 (* ?x21542 l_0_9_53)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x22947 (* ?x21373 l_0_9_33)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x22939 (* ?x21364 l_0_9_32)))
 (let ((?x21490 (* l_0_9_129 l_0_9_129)))
 (let ((?x4949 (* l_0_9_128 l_0_9_128)))
 (let ((?x22901 (* 12.0 l_0_9_12)))
 (let ((?x22914 (* ?x22901 l_0_9_3)))
 (let ((?x6952 (* 12.0 l_0_9_11)))
 (let ((?x6949 (* ?x6952 l_0_9_2)))
 (let ((?x24313 (- (- (- (+ ?x6949 ?x22914) ?x4949) ?x21490) (* (* 2.0 l_0_9_191) l_0_9_200))))
 (let ((?x24317 (- (- ?x24313 (* (* 2.0 l_0_9_192) l_0_9_201)) (* (* 2.0 l_0_9_212) l_0_9_221))))
 (let ((?x24322 (- (- (- ?x24317 (* (* 2.0 l_0_9_213) l_0_9_222)) ?x22939) (* (* 2.0 l_0_9_233) l_0_9_242))))
 (let ((?x24329 (- (- (- (- ?x24322 (* (* 2.0 l_0_9_234) l_0_9_243)) ?x22947) ?x24326) ?x24328)))
 (= (+ (+ ?x24329 ?x24330) ?x24332) 0.0))))))))))))))))))))))))
(assert
 (let ((?x23264 (* l_0_9_87 l_0_9_87)))
 (let ((?x23262 (* l_0_9_86 l_0_9_86)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x24402 (* ?x21554 l_0_9_80)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x24400 (* ?x21550 l_0_9_79)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x24398 (* ?x21546 l_0_9_59)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x24396 (* ?x21542 l_0_9_58)))
 (let ((?x21373 (* 12.0 l_0_9_24)))
 (let ((?x23087 (* ?x21373 l_0_9_38)))
 (let ((?x21364 (* 12.0 l_0_9_23)))
 (let ((?x23079 (* ?x21364 l_0_9_37)))
 (let ((?x23235 (* l_0_9_171 l_0_9_171)))
 (let ((?x23233 (* l_0_9_170 l_0_9_170)))
 (let ((?x23053 (* 12.0 l_0_9_17)))
 (let ((?x23054 (* ?x23053 l_0_9_3)))
 (let ((?x23048 (* 12.0 l_0_9_16)))
 (let ((?x23049 (* ?x23048 l_0_9_2)))
 (let ((?x23231 (* l_0_9_150 l_0_9_150)))
 (let ((?x23229 (* l_0_9_149 l_0_9_149)))
 (let ((?x24373 (+ (+ (+ (* l_0_9_107 l_0_9_107) (* l_0_9_108 l_0_9_108)) ?x23229) ?x23231)))
 (let ((?x24383 (- (- (- (+ (+ ?x24373 ?x23049) ?x23054) ?x23233) ?x23235) (* (* 2.0 l_0_9_191) l_0_9_205))))
 (let ((?x24387 (- (- ?x24383 (* (* 2.0 l_0_9_192) l_0_9_206)) (* (* 2.0 l_0_9_212) l_0_9_226))))
 (let ((?x24392 (- (- (- ?x24387 (* (* 2.0 l_0_9_213) l_0_9_227)) ?x23079) (* (* 2.0 l_0_9_233) l_0_9_247))))
 (let ((?x24399 (- (- (- (- ?x24392 (* (* 2.0 l_0_9_234) l_0_9_248)) ?x23087) ?x24396) ?x24398)))
 (= (- (- (+ (+ ?x24399 ?x24400) ?x24402) ?x23262) ?x23264) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x24481 (* 2.0 l_0_9_73)))
 (let ((?x24482 (* ?x24481 l_0_9_77)))
 (let ((?x24478 (* 2.0 l_0_9_72)))
 (let ((?x24479 (* ?x24478 l_0_9_76)))
 (let ((?x24475 (* 2.0 l_0_9_71)))
 (let ((?x24476 (* ?x24475 l_0_9_75)))
 (let ((?x24472 (* 2.0 l_0_9_70)))
 (let ((?x24473 (* ?x24472 l_0_9_74)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x24332 (* ?x21554 l_0_9_75)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x24330 (* ?x21550 l_0_9_74)))
 (let ((?x24467 (* 2.0 l_0_9_52)))
 (let ((?x24468 (* ?x24467 l_0_9_56)))
 (let ((?x24464 (* 2.0 l_0_9_51)))
 (let ((?x24465 (* ?x24464 l_0_9_55)))
 (let ((?x24461 (* 2.0 l_0_9_50)))
 (let ((?x24462 (* ?x24461 l_0_9_54)))
 (let ((?x24458 (* 2.0 l_0_9_49)))
 (let ((?x24459 (* ?x24458 l_0_9_53)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x24328 (* ?x21546 l_0_9_54)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x24326 (* ?x21542 l_0_9_53)))
 (let ((?x23572 (* 12.0 l_0_9_31)))
 (let ((?x23573 (* ?x23572 l_0_9_35)))
 (let ((?x23569 (* 12.0 l_0_9_30)))
 (let ((?x23570 (* ?x23569 l_0_9_34)))
 (let ((?x23566 (* 12.0 l_0_9_29)))
 (let ((?x23567 (* ?x23566 l_0_9_33)))
 (let ((?x23563 (* 12.0 l_0_9_28)))
 (let ((?x23564 (* ?x23563 l_0_9_32)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x23546 (* ?x22924 l_0_9_9)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x22767 (* ?x21346 l_0_9_134)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x6655 (* ?x21344 l_0_9_133)))
 (let ((?x23543 (+ (* (* 12.0 l_0_9_10) l_0_9_14) (* (* 12.0 l_0_9_11) l_0_9_7))))
 (let ((?x23545 (+ ?x23543 (* (* 12.0 l_0_9_12) l_0_9_8))))
 (let ((?x24418 (- (+ (- (- ?x23545 ?x6655) ?x22767) ?x23546) (* (* 2.0 l_0_9_196) l_0_9_200))))
 (let ((?x24424 (- (- ?x24418 (* (* 2.0 l_0_9_197) l_0_9_201)) (* (* 2.0 l_0_9_198) l_0_9_202))))
 (let ((?x24430 (- (- ?x24424 (* (* 2.0 l_0_9_199) l_0_9_203)) (* (* 2.0 l_0_9_217) l_0_9_221))))
 (let ((?x24436 (- (- ?x24430 (* (* 2.0 l_0_9_218) l_0_9_222)) (* (* 2.0 l_0_9_219) l_0_9_223))))
 (let ((?x24442 (- (- ?x24436 (* (* 2.0 l_0_9_220) l_0_9_224)) (* (* 2.0 l_0_9_238) l_0_9_242))))
 (let ((?x24448 (- (- ?x24442 (* (* 2.0 l_0_9_239) l_0_9_243)) (* (* 2.0 l_0_9_240) l_0_9_244))))
 (let ((?x24454 (- (- (- (- ?x24448 (* (* 2.0 l_0_9_241) l_0_9_245)) ?x23564) ?x23567) ?x23570)))
 (let ((?x24469 (- (- (- (- (+ (+ (- ?x24454 ?x23573) ?x24326) ?x24328) ?x24459) ?x24462) ?x24465) ?x24468)))
 (= (+ (+ (+ (+ (- (- ?x24469 ?x24330) ?x24332) ?x24473) ?x24476) ?x24479) ?x24482) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x24605 (* ?x23118 l_0_9_92)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x24603 (* ?x23115 l_0_9_91)))
 (let ((?x24481 (* 2.0 l_0_9_73)))
 (let ((?x24601 (* ?x24481 l_0_9_82)))
 (let ((?x24478 (* 2.0 l_0_9_72)))
 (let ((?x24599 (* ?x24478 l_0_9_81)))
 (let ((?x24475 (* 2.0 l_0_9_71)))
 (let ((?x24597 (* ?x24475 l_0_9_80)))
 (let ((?x24472 (* 2.0 l_0_9_70)))
 (let ((?x24595 (* ?x24472 l_0_9_79)))
 (let ((?x21554 (* 2.0 l_0_9_66)))
 (let ((?x24402 (* ?x21554 l_0_9_80)))
 (let ((?x21550 (* 2.0 l_0_9_65)))
 (let ((?x24400 (* ?x21550 l_0_9_79)))
 (let ((?x24467 (* 2.0 l_0_9_52)))
 (let ((?x24591 (* ?x24467 l_0_9_61)))
 (let ((?x24464 (* 2.0 l_0_9_51)))
 (let ((?x24589 (* ?x24464 l_0_9_60)))
 (let ((?x24461 (* 2.0 l_0_9_50)))
 (let ((?x24587 (* ?x24461 l_0_9_59)))
 (let ((?x24458 (* 2.0 l_0_9_49)))
 (let ((?x24585 (* ?x24458 l_0_9_58)))
 (let ((?x21546 (* 2.0 l_0_9_45)))
 (let ((?x24398 (* ?x21546 l_0_9_59)))
 (let ((?x21542 (* 2.0 l_0_9_44)))
 (let ((?x24396 (* ?x21542 l_0_9_58)))
 (let ((?x23572 (* 12.0 l_0_9_31)))
 (let ((?x23686 (* ?x23572 l_0_9_40)))
 (let ((?x23569 (* 12.0 l_0_9_30)))
 (let ((?x23684 (* ?x23569 l_0_9_39)))
 (let ((?x23566 (* 12.0 l_0_9_29)))
 (let ((?x23682 (* ?x23566 l_0_9_38)))
 (let ((?x23563 (* 12.0 l_0_9_28)))
 (let ((?x23680 (* ?x23563 l_0_9_37)))
 (let ((?x23064 (* 12.0 l_0_9_18)))
 (let ((?x23678 (* ?x23064 l_0_9_9)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24552 (* ?x23061 l_0_9_176)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x24550 (* ?x23058 l_0_9_175)))
 (let ((?x23053 (* 12.0 l_0_9_17)))
 (let ((?x23667 (* ?x23053 l_0_9_8)))
 (let ((?x23048 (* 12.0 l_0_9_16)))
 (let ((?x23665 (* ?x23048 l_0_9_7)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x24546 (* ?x23045 l_0_9_155)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x24544 (* ?x23042 l_0_9_154)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x24542 (* ?x23019 l_0_9_113)))
 (let ((?x7641 (* 12.0 l_0_9_10)))
 (let ((?x23638 (* ?x7641 l_0_9_19)))
 (let ((?x24547 (+ (+ (+ (+ ?x23638 (* (* 2.0 l_0_9_107) l_0_9_112)) ?x24542) ?x24544) ?x24546)))
 (let ((?x24556 (- (+ (- (- (+ (+ ?x24547 ?x23665) ?x23667) ?x24550) ?x24552) ?x23678) (* (* 2.0 l_0_9_196) l_0_9_205))))
 (let ((?x24560 (- (- ?x24556 (* (* 2.0 l_0_9_197) l_0_9_206)) (* (* 2.0 l_0_9_198) l_0_9_207))))
 (let ((?x24564 (- (- ?x24560 (* (* 2.0 l_0_9_199) l_0_9_208)) (* (* 2.0 l_0_9_217) l_0_9_226))))
 (let ((?x24568 (- (- ?x24564 (* (* 2.0 l_0_9_218) l_0_9_227)) (* (* 2.0 l_0_9_219) l_0_9_228))))
 (let ((?x24572 (- (- ?x24568 (* (* 2.0 l_0_9_220) l_0_9_229)) (* (* 2.0 l_0_9_238) l_0_9_247))))
 (let ((?x24576 (- (- ?x24572 (* (* 2.0 l_0_9_239) l_0_9_248)) (* (* 2.0 l_0_9_240) l_0_9_249))))
 (let ((?x24581 (- (- (- (- ?x24576 (* (* 2.0 l_0_9_241) l_0_9_250)) ?x23680) ?x23682) ?x23684)))
 (let ((?x24592 (- (- (- (- (+ (+ (- ?x24581 ?x23686) ?x24396) ?x24398) ?x24585) ?x24587) ?x24589) ?x24591)))
 (let ((?x24604 (- (+ (+ (+ (+ (- (- ?x24592 ?x24400) ?x24402) ?x24595) ?x24597) ?x24599) ?x24601) ?x24603)))
 (= (- ?x24604 ?x24605) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23836 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x23833 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x23830 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x23827 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x23824 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x24714 (* l_0_9_246 l_0_9_246)))
 (let ((?x24712 (* l_0_9_245 l_0_9_245)))
 (let ((?x24710 (* l_0_9_244 l_0_9_244)))
 (let ((?x24708 (* l_0_9_243 l_0_9_243)))
 (let ((?x24706 (* l_0_9_242 l_0_9_242)))
 (let ((?x24704 (* l_0_9_225 l_0_9_225)))
 (let ((?x24702 (* l_0_9_224 l_0_9_224)))
 (let ((?x24700 (* l_0_9_223 l_0_9_223)))
 (let ((?x24698 (* l_0_9_222 l_0_9_222)))
 (let ((?x24696 (* l_0_9_221 l_0_9_221)))
 (let ((?x24694 (* l_0_9_204 l_0_9_204)))
 (let ((?x24692 (* l_0_9_203 l_0_9_203)))
 (let ((?x24690 (* l_0_9_202 l_0_9_202)))
 (let ((?x24688 (* l_0_9_201 l_0_9_201)))
 (let ((?x24686 (* l_0_9_200 l_0_9_200)))
 (let ((?x22595 (* l_0_9_15 l_0_9_15)))
 (let ((?x23821 (* 6.0 ?x22595)))
 (let ((?x22593 (* l_0_9_14 l_0_9_14)))
 (let ((?x23815 (* 6.0 ?x22593)))
 (let ((?x22591 (* l_0_9_13 l_0_9_13)))
 (let ((?x23804 (* 6.0 ?x22591)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x22922 (* ?x21346 l_0_9_138)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x22919 (* ?x21344 l_0_9_137)))
 (let ((?x23803 (+ (* 6.0 (* l_0_9_11 l_0_9_11)) (* 6.0 (* l_0_9_12 l_0_9_12)))))
 (let ((?x24689 (- (- (+ (+ (+ (- (- ?x23803 ?x22919) ?x22922) ?x23804) ?x23815) ?x23821) ?x24686) ?x24688)))
 (let ((?x24703 (- (- (- (- (- (- (- ?x24689 ?x24690) ?x24692) ?x24694) ?x24696) ?x24698) ?x24700) ?x24702)))
 (let ((?x24716 (- (- (- (- (- (- (- ?x24703 ?x24704) ?x24706) ?x24708) ?x24710) ?x24712) ?x24714) ?x23824)))
 (let ((?x24723 (- (- (- (- (- ?x24716 ?x23827) ?x23830) ?x23833) ?x23836) (* (* 1.0 l_0_9_53) l_0_9_53))))
 (let ((?x24729 (- (- ?x24723 (* (* 1.0 l_0_9_54) l_0_9_54)) (* (* 1.0 l_0_9_55) l_0_9_55))))
 (let ((?x24735 (- (- ?x24729 (* (* 1.0 l_0_9_56) l_0_9_56)) (* (* 1.0 l_0_9_57) l_0_9_57))))
 (let ((?x24739 (+ (+ ?x24735 (* 1.0 (* l_0_9_74 l_0_9_74))) (* 1.0 (* l_0_9_75 l_0_9_75)))))
 (let ((?x24743 (+ (+ ?x24739 (* 1.0 (* l_0_9_76 l_0_9_76))) (* 1.0 (* l_0_9_77 l_0_9_77)))))
 (= (+ ?x24743 (* 1.0 (* l_0_9_78 l_0_9_78))) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x24847 (* ?x23118 l_0_9_96)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x24845 (* ?x23115 l_0_9_95)))
 (let ((?x24843 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x24840 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x24837 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x24834 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x24831 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x24828 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x24825 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x24822 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x24819 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x24816 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x23978 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x23975 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x23972 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x23969 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x23966 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24763 (* ?x23061 l_0_9_180)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x9050 (* ?x23058 l_0_9_179)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x9061 (* ?x23045 l_0_9_159)))
 (let ((?x23951 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x9068 (* ?x23042 l_0_9_158)))
 (let ((?x23942 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x22924 (* 12.0 l_0_9_13)))
 (let ((?x23927 (* ?x22924 l_0_9_18)))
 (let ((?x21346 (* 2.0 l_0_9_129)))
 (let ((?x23040 (* ?x21346 l_0_9_143)))
 (let ((?x21344 (* 2.0 l_0_9_128)))
 (let ((?x23024 (* ?x21344 l_0_9_142)))
 (let ((?x22901 (* 12.0 l_0_9_12)))
 (let ((?x23925 (* ?x22901 l_0_9_17)))
 (let ((?x6952 (* 12.0 l_0_9_11)))
 (let ((?x23919 (* ?x6952 l_0_9_16)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x9171 (* ?x23019 l_0_9_117)))
 (let ((?x9108 (- (+ (+ (+ (* (* 2.0 l_0_9_107) l_0_9_116) ?x9171) ?x23919) ?x23925) ?x23024)))
 (let ((?x24762 (- (+ (+ (+ (+ (+ (- ?x9108 ?x23040) ?x23927) ?x23942) ?x9068) ?x23951) ?x9061) ?x9050)))
 (let ((?x24770 (- (- (- ?x24762 ?x24763) (* (* 2.0 l_0_9_200) l_0_9_205)) (* (* 2.0 l_0_9_201) l_0_9_206))))
 (let ((?x24776 (- (- ?x24770 (* (* 2.0 l_0_9_202) l_0_9_207)) (* (* 2.0 l_0_9_203) l_0_9_208))))
 (let ((?x24782 (- (- ?x24776 (* (* 2.0 l_0_9_204) l_0_9_209)) (* (* 2.0 l_0_9_221) l_0_9_226))))
 (let ((?x24788 (- (- ?x24782 (* (* 2.0 l_0_9_222) l_0_9_227)) (* (* 2.0 l_0_9_223) l_0_9_228))))
 (let ((?x24794 (- (- ?x24788 (* (* 2.0 l_0_9_224) l_0_9_229)) (* (* 2.0 l_0_9_225) l_0_9_230))))
 (let ((?x24800 (- (- ?x24794 (* (* 2.0 l_0_9_242) l_0_9_247)) (* (* 2.0 l_0_9_243) l_0_9_248))))
 (let ((?x24806 (- (- ?x24800 (* (* 2.0 l_0_9_244) l_0_9_249)) (* (* 2.0 l_0_9_245) l_0_9_250))))
 (let ((?x24812 (- (- (- (- ?x24806 (* (* 2.0 l_0_9_246) l_0_9_251)) ?x23966) ?x23969) ?x23972)))
 (let ((?x24829 (- (- (- (- (- (- (- ?x24812 ?x23975) ?x23978) ?x24816) ?x24819) ?x24822) ?x24825) ?x24828)))
 (let ((?x24848 (- (- (+ (+ (+ (+ (+ ?x24829 ?x24831) ?x24834) ?x24837) ?x24840) ?x24843) ?x24845) ?x24847)))
 (= ?x24848 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24170 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x24167 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x24164 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x24161 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x24158 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x24155 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x24967 (* l_0_9_252 l_0_9_252)))
 (let ((?x24965 (* l_0_9_251 l_0_9_251)))
 (let ((?x24963 (* l_0_9_250 l_0_9_250)))
 (let ((?x24961 (* l_0_9_249 l_0_9_249)))
 (let ((?x24959 (* l_0_9_248 l_0_9_248)))
 (let ((?x24957 (* l_0_9_247 l_0_9_247)))
 (let ((?x24955 (* l_0_9_231 l_0_9_231)))
 (let ((?x24953 (* l_0_9_230 l_0_9_230)))
 (let ((?x24951 (* l_0_9_229 l_0_9_229)))
 (let ((?x24949 (* l_0_9_228 l_0_9_228)))
 (let ((?x24947 (* l_0_9_227 l_0_9_227)))
 (let ((?x24945 (* l_0_9_226 l_0_9_226)))
 (let ((?x24943 (* l_0_9_210 l_0_9_210)))
 (let ((?x22720 (* l_0_9_21 l_0_9_21)))
 (let ((?x24152 (* 6.0 ?x22720)))
 (let ((?x24940 (* l_0_9_209 l_0_9_209)))
 (let ((?x24938 (* l_0_9_208 l_0_9_208)))
 (let ((?x24936 (* l_0_9_207 l_0_9_207)))
 (let ((?x24934 (* l_0_9_206 l_0_9_206)))
 (let ((?x24932 (* l_0_9_205 l_0_9_205)))
 (let ((?x22718 (* l_0_9_20 l_0_9_20)))
 (let ((?x24150 (* 6.0 ?x22718)))
 (let ((?x22716 (* l_0_9_19 l_0_9_19)))
 (let ((?x24148 (* 6.0 ?x22716)))
 (let ((?x22714 (* l_0_9_18 l_0_9_18)))
 (let ((?x24146 (* 6.0 ?x22714)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24927 (* ?x23061 l_0_9_185)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x24925 (* ?x23058 l_0_9_184)))
 (let ((?x22712 (* l_0_9_17 l_0_9_17)))
 (let ((?x24138 (* 6.0 ?x22712)))
 (let ((?x22708 (* l_0_9_16 l_0_9_16)))
 (let ((?x24136 (* 6.0 ?x22708)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x24921 (* ?x23045 l_0_9_164)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x24919 (* ?x23042 l_0_9_163)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x24917 (* ?x23019 l_0_9_122)))
 (let ((?x23015 (* 2.0 l_0_9_107)))
 (let ((?x24915 (* ?x23015 l_0_9_121)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x24913 (* ?x24106 l_0_9_87)))
 (let ((?x24920 (+ (+ (+ (- (* (* (- 2.0) l_0_9_100) l_0_9_86) ?x24913) ?x24915) ?x24917) ?x24919)))
 (let ((?x24930 (+ (+ (- (- (+ (+ (+ ?x24920 ?x24921) ?x24136) ?x24138) ?x24925) ?x24927) ?x24146) ?x24148)))
 (let ((?x24942 (+ (- (- (- (- (- (+ ?x24930 ?x24150) ?x24932) ?x24934) ?x24936) ?x24938) ?x24940) ?x24152)))
 (let ((?x24956 (- (- (- (- (- (- (- ?x24942 ?x24943) ?x24945) ?x24947) ?x24949) ?x24951) ?x24953) ?x24955)))
 (let ((?x24969 (- (- (- (- (- (- (- ?x24956 ?x24957) ?x24959) ?x24961) ?x24963) ?x24965) ?x24967) ?x24155)))
 (let ((?x24977 (- (- (- (- (- (- ?x24969 ?x24158) ?x24161) ?x24164) ?x24167) ?x24170) (* (* 1.0 l_0_9_58) l_0_9_58))))
 (let ((?x24983 (- (- ?x24977 (* (* 1.0 l_0_9_59) l_0_9_59)) (* (* 1.0 l_0_9_60) l_0_9_60))))
 (let ((?x24989 (- (- ?x24983 (* (* 1.0 l_0_9_61) l_0_9_61)) (* (* 1.0 l_0_9_62) l_0_9_62))))
 (let ((?x24994 (+ (- ?x24989 (* (* 1.0 l_0_9_63) l_0_9_63)) (* 1.0 (* l_0_9_79 l_0_9_79)))))
 (let ((?x24998 (+ (+ ?x24994 (* 1.0 (* l_0_9_80 l_0_9_80))) (* 1.0 (* l_0_9_81 l_0_9_81)))))
 (let ((?x25002 (+ (+ ?x24998 (* 1.0 (* l_0_9_82 l_0_9_82))) (* 1.0 (* l_0_9_83 l_0_9_83)))))
 (= (+ ?x25002 (* 1.0 (* l_0_9_84 l_0_9_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21784 (* l_0_9_64 l_0_9_64)))
 (let ((?x21996 (* 3.0 ?x21784)))
 (= (+ (* (* (- 3.0) l_0_9_43) l_0_9_43) ?x21996) 0.0))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22211 (* ?x22210 l_0_9_86)))
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22280 (* ?x22079 l_0_9_67)))
 (let ((?x22074 (* 6.0 l_0_9_43)))
 (let ((?x22275 (* ?x22074 l_0_9_46)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22189 (* ?x22188 l_0_9_170)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22183 (* ?x22182 l_0_9_149)))
 (let ((?x25058 (+ (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_107) ?x22183) ?x22189) ?x22275) ?x22280)))
 (= (+ ?x25058 ?x22211) 0.0)))))))))))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22312 (* ?x22079 l_0_9_70)))
 (= (+ (* (* (- 6.0) l_0_9_43) l_0_9_49) ?x22312) 0.0))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22365 (* ?x22079 l_0_9_74)))
 (= (+ (* (* (- 6.0) l_0_9_43) l_0_9_53) ?x22365) 0.0))))
(assert
 (let ((?x22079 (* 6.0 l_0_9_64)))
 (let ((?x22412 (* ?x22079 l_0_9_79)))
 (= (+ (* (* (- 6.0) l_0_9_43) l_0_9_58) ?x22412) 0.0))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x23119 (* ?x23118 l_0_9_89)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x23116 (* ?x23115 l_0_9_88)))
 (let ((?x21436 (* l_0_9_69 l_0_9_69)))
 (let ((?x23260 (* 3.0 ?x21436)))
 (let ((?x21433 (* l_0_9_68 l_0_9_68)))
 (let ((?x23258 (* 3.0 ?x21433)))
 (let ((?x21430 (* l_0_9_67 l_0_9_67)))
 (let ((?x23256 (* 3.0 ?x21430)))
 (let ((?x23250 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23247 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x23244 (* (* 3.0 l_0_9_46) l_0_9_46)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x23062 (* ?x23061 l_0_9_173)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x23059 (* ?x23058 l_0_9_172)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x23046 (* ?x23045 l_0_9_152)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x23043 (* ?x23042 l_0_9_151)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x23021 (* ?x23019 l_0_9_110)))
 (let ((?x25082 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_109) ?x23021) ?x23043) ?x23046) ?x23059)))
 (let ((?x25089 (+ (+ (+ (- (- (- (+ ?x25082 ?x23062) ?x23244) ?x23247) ?x23250) ?x23256) ?x23258) ?x23260)))
 (= (+ (+ ?x25089 ?x23116) ?x23119) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x24605 (* ?x23118 l_0_9_92)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x24603 (* ?x23115 l_0_9_91)))
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23330 (* ?x23329 l_0_9_72)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23326 (* ?x23325 l_0_9_71)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23322 (* ?x23321 l_0_9_70)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23314 (* ?x23313 l_0_9_51)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23310 (* ?x23309 l_0_9_50)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23306 (* ?x23305 l_0_9_49)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24552 (* ?x23061 l_0_9_176)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x24550 (* ?x23058 l_0_9_175)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x24546 (* ?x23045 l_0_9_155)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x24544 (* ?x23042 l_0_9_154)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x24542 (* ?x23019 l_0_9_113)))
 (let ((?x9915 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_112) ?x24542) ?x24544) ?x24546) ?x24550)))
 (let ((?x25102 (+ (+ (+ (- (- (- (+ ?x9915 ?x24552) ?x23306) ?x23310) ?x23314) ?x23322) ?x23326) ?x23330)))
 (= (+ (+ ?x25102 ?x24603) ?x24605) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x23118 (* 2.0 l_0_9_87)))
 (let ((?x24847 (* ?x23118 l_0_9_96)))
 (let ((?x23115 (* 2.0 l_0_9_86)))
 (let ((?x24845 (* ?x23115 l_0_9_95)))
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23392 (* ?x23329 l_0_9_76)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23390 (* ?x23325 l_0_9_75)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23388 (* ?x23321 l_0_9_74)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23384 (* ?x23313 l_0_9_55)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23382 (* ?x23309 l_0_9_54)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23380 (* ?x23305 l_0_9_53)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24763 (* ?x23061 l_0_9_180)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x9050 (* ?x23058 l_0_9_179)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x9061 (* ?x23045 l_0_9_159)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x9068 (* ?x23042 l_0_9_158)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x9171 (* ?x23019 l_0_9_117)))
 (let ((?x9994 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_116) ?x9171) ?x9068) ?x9061) ?x9050)))
 (let ((?x25109 (+ (+ (+ (- (- (- (+ ?x9994 ?x24763) ?x23380) ?x23382) ?x23384) ?x23388) ?x23390) ?x23392)))
 (= (+ (+ ?x25109 ?x24845) ?x24847) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x23329 (* 6.0 l_0_9_69)))
 (let ((?x23451 (* ?x23329 l_0_9_81)))
 (let ((?x23325 (* 6.0 l_0_9_68)))
 (let ((?x23449 (* ?x23325 l_0_9_80)))
 (let ((?x23321 (* 6.0 l_0_9_67)))
 (let ((?x23447 (* ?x23321 l_0_9_79)))
 (let ((?x23313 (* 6.0 l_0_9_48)))
 (let ((?x23443 (* ?x23313 l_0_9_60)))
 (let ((?x23309 (* 6.0 l_0_9_47)))
 (let ((?x23441 (* ?x23309 l_0_9_59)))
 (let ((?x23305 (* 6.0 l_0_9_46)))
 (let ((?x23439 (* ?x23305 l_0_9_58)))
 (let ((?x23061 (* 2.0 l_0_9_171)))
 (let ((?x24927 (* ?x23061 l_0_9_185)))
 (let ((?x23058 (* 2.0 l_0_9_170)))
 (let ((?x24925 (* ?x23058 l_0_9_184)))
 (let ((?x23045 (* 2.0 l_0_9_150)))
 (let ((?x24921 (* ?x23045 l_0_9_164)))
 (let ((?x23042 (* 2.0 l_0_9_149)))
 (let ((?x24919 (* ?x23042 l_0_9_163)))
 (let ((?x23019 (* 2.0 l_0_9_108)))
 (let ((?x24917 (* ?x23019 l_0_9_122)))
 (let ((?x23015 (* 2.0 l_0_9_107)))
 (let ((?x24915 (* ?x23015 l_0_9_121)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x24913 (* ?x24106 l_0_9_87)))
 (let ((?x10078 (- (- (- (+ (* (* 2.0 l_0_9_100) l_0_9_86) ?x24913) ?x24915) ?x24917) ?x24919)))
 (let ((?x10096 (+ (- (- (- (+ (+ (- ?x10078 ?x24921) ?x24925) ?x24927) ?x23439) ?x23441) ?x23443) ?x23447)))
 (= (+ (+ ?x10096 ?x23449) ?x23451) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x21931 (* l_0_9_73 l_0_9_73)))
 (let ((?x23534 (* 3.0 ?x21931)))
 (let ((?x21928 (* l_0_9_72 l_0_9_72)))
 (let ((?x23532 (* 3.0 ?x21928)))
 (let ((?x21925 (* l_0_9_71 l_0_9_71)))
 (let ((?x23530 (* 3.0 ?x21925)))
 (let ((?x21922 (* l_0_9_70 l_0_9_70)))
 (let ((?x23528 (* 3.0 ?x21922)))
 (let ((?x23522 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x23519 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x23516 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x10261 (+ (- (- (- (* (* (- 3.0) l_0_9_49) l_0_9_49) ?x23516) ?x23519) ?x23522) ?x23528)))
 (= (+ (+ (+ ?x10261 ?x23530) ?x23532) ?x23534) 0.0))))))))))))))
(assert
 (let ((?x23602 (* 6.0 l_0_9_73)))
 (let ((?x23603 (* ?x23602 l_0_9_77)))
 (let ((?x23599 (* 6.0 l_0_9_72)))
 (let ((?x23600 (* ?x23599 l_0_9_76)))
 (let ((?x23596 (* 6.0 l_0_9_71)))
 (let ((?x23597 (* ?x23596 l_0_9_75)))
 (let ((?x23593 (* 6.0 l_0_9_70)))
 (let ((?x23594 (* ?x23593 l_0_9_74)))
 (let ((?x23587 (* 6.0 l_0_9_52)))
 (let ((?x23588 (* ?x23587 l_0_9_56)))
 (let ((?x23584 (* 6.0 l_0_9_51)))
 (let ((?x23585 (* ?x23584 l_0_9_55)))
 (let ((?x23581 (* 6.0 l_0_9_50)))
 (let ((?x23582 (* ?x23581 l_0_9_54)))
 (let ((?x10171 (+ (- (- (- (* (* (- 6.0) l_0_9_49) l_0_9_53) ?x23582) ?x23585) ?x23588) ?x23594)))
 (= (+ (+ (+ ?x10171 ?x23597) ?x23600) ?x23603) 0.0)))))))))))))))))
(assert
 (let ((?x23602 (* 6.0 l_0_9_73)))
 (let ((?x23708 (* ?x23602 l_0_9_82)))
 (let ((?x23599 (* 6.0 l_0_9_72)))
 (let ((?x23706 (* ?x23599 l_0_9_81)))
 (let ((?x23596 (* 6.0 l_0_9_71)))
 (let ((?x23704 (* ?x23596 l_0_9_80)))
 (let ((?x23593 (* 6.0 l_0_9_70)))
 (let ((?x23702 (* ?x23593 l_0_9_79)))
 (let ((?x23587 (* 6.0 l_0_9_52)))
 (let ((?x23697 (* ?x23587 l_0_9_61)))
 (let ((?x23584 (* 6.0 l_0_9_51)))
 (let ((?x23695 (* ?x23584 l_0_9_60)))
 (let ((?x23581 (* 6.0 l_0_9_50)))
 (let ((?x23693 (* ?x23581 l_0_9_59)))
 (let ((?x25129 (+ (- (- (- (* (* (- 6.0) l_0_9_49) l_0_9_58) ?x23693) ?x23695) ?x23697) ?x23702)))
 (= (+ (+ (+ ?x25129 ?x23704) ?x23706) ?x23708) 0.0)))))))))))))))))
(assert
 (let ((?x23865 (* l_0_9_78 l_0_9_78)))
 (let ((?x23866 (* 3.0 ?x23865)))
 (let ((?x23862 (* l_0_9_77 l_0_9_77)))
 (let ((?x23863 (* 3.0 ?x23862)))
 (let ((?x23859 (* l_0_9_76 l_0_9_76)))
 (let ((?x23860 (* 3.0 ?x23859)))
 (let ((?x23856 (* l_0_9_75 l_0_9_75)))
 (let ((?x23857 (* 3.0 ?x23856)))
 (let ((?x23853 (* l_0_9_74 l_0_9_74)))
 (let ((?x23854 (* 3.0 ?x23853)))
 (let ((?x23851 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x23848 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x23845 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x23842 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x25136 (- (- (- (- (* (* (- 3.0) l_0_9_53) l_0_9_53) ?x23842) ?x23845) ?x23848) ?x23851)))
 (= (+ (+ (+ (+ (+ ?x25136 ?x23854) ?x23857) ?x23860) ?x23863) ?x23866) 0.0)))))))))))))))))
(assert
 (let ((?x24008 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24005 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24002 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x23999 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x23996 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x23993 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x23990 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x23987 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x23984 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x25147 (- (- (- (- (* (* (- 6.0) l_0_9_53) l_0_9_58) ?x23984) ?x23987) ?x23990) ?x23993)))
 (= (+ (+ (+ (+ (+ ?x25147 ?x23996) ?x23999) ?x24002) ?x24005) ?x24008) 0.0))))))))))))
(assert
 (let ((?x24205 (* l_0_9_84 l_0_9_84)))
 (let ((?x24206 (* 3.0 ?x24205)))
 (let ((?x24202 (* l_0_9_83 l_0_9_83)))
 (let ((?x24203 (* 3.0 ?x24202)))
 (let ((?x24199 (* l_0_9_82 l_0_9_82)))
 (let ((?x24200 (* 3.0 ?x24199)))
 (let ((?x24196 (* l_0_9_81 l_0_9_81)))
 (let ((?x24197 (* 3.0 ?x24196)))
 (let ((?x24193 (* l_0_9_80 l_0_9_80)))
 (let ((?x24194 (* 3.0 ?x24193)))
 (let ((?x24190 (* l_0_9_79 l_0_9_79)))
 (let ((?x24191 (* 3.0 ?x24190)))
 (let ((?x24188 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24185 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24182 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24179 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24176 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x25160 (- (- (- (- (* (* (- 3.0) l_0_9_58) l_0_9_58) ?x24176) ?x24179) ?x24182) ?x24185)))
 (let ((?x25167 (+ (+ (+ (+ (+ (+ (- ?x25160 ?x24188) ?x24191) ?x24194) ?x24197) ?x24200) ?x24203) ?x24206)))
 (= ?x25167 0.0)))))))))))))))))))))
(assert
 (let ((?x21931 (* l_0_9_73 l_0_9_73)))
 (let ((?x21928 (* l_0_9_72 l_0_9_72)))
 (let ((?x21925 (* l_0_9_71 l_0_9_71)))
 (let ((?x21922 (* l_0_9_70 l_0_9_70)))
 (let ((?x5732 (* l_0_9_52 l_0_9_52)))
 (let ((?x5662 (* l_0_9_51 l_0_9_51)))
 (let ((?x10461 (+ (+ (+ (* l_0_9_49 l_0_9_49) (* l_0_9_50 l_0_9_50)) ?x5662) ?x5732)))
 (= (- (- (- (- ?x10461 ?x21922) ?x21925) ?x21928) ?x21931) 0.0)))))))))
(assert
 (let ((?x24481 (* 2.0 l_0_9_73)))
 (let ((?x24482 (* ?x24481 l_0_9_77)))
 (let ((?x24478 (* 2.0 l_0_9_72)))
 (let ((?x24479 (* ?x24478 l_0_9_76)))
 (let ((?x24475 (* 2.0 l_0_9_71)))
 (let ((?x24476 (* ?x24475 l_0_9_75)))
 (let ((?x24472 (* 2.0 l_0_9_70)))
 (let ((?x24473 (* ?x24472 l_0_9_74)))
 (let ((?x24467 (* 2.0 l_0_9_52)))
 (let ((?x24468 (* ?x24467 l_0_9_56)))
 (let ((?x24464 (* 2.0 l_0_9_51)))
 (let ((?x24465 (* ?x24464 l_0_9_55)))
 (let ((?x24461 (* 2.0 l_0_9_50)))
 (let ((?x24462 (* ?x24461 l_0_9_54)))
 (let ((?x24458 (* 2.0 l_0_9_49)))
 (let ((?x24459 (* ?x24458 l_0_9_53)))
 (let ((?x23503 (* l_0_9_136 l_0_9_136)))
 (let ((?x23501 (* l_0_9_135 l_0_9_135)))
 (let ((?x10481 (- (- (* (- l_0_9_133) l_0_9_133) (* l_0_9_134 l_0_9_134)) ?x23501)))
 (let ((?x25187 (- (- (+ (+ (+ (+ (- ?x10481 ?x23503) ?x24459) ?x24462) ?x24465) ?x24468) ?x24473) ?x24476)))
 (= (- (- ?x25187 ?x24479) ?x24482) 0.0))))))))))))))))))))))
(assert
 (let ((?x25231 (* l_0_9_94 l_0_9_94)))
 (let ((?x25229 (* l_0_9_93 l_0_9_93)))
 (let ((?x25227 (* l_0_9_92 l_0_9_92)))
 (let ((?x25225 (* l_0_9_91 l_0_9_91)))
 (let ((?x24481 (* 2.0 l_0_9_73)))
 (let ((?x24601 (* ?x24481 l_0_9_82)))
 (let ((?x24478 (* 2.0 l_0_9_72)))
 (let ((?x24599 (* ?x24478 l_0_9_81)))
 (let ((?x24475 (* 2.0 l_0_9_71)))
 (let ((?x24597 (* ?x24475 l_0_9_80)))
 (let ((?x24472 (* 2.0 l_0_9_70)))
 (let ((?x24595 (* ?x24472 l_0_9_79)))
 (let ((?x24467 (* 2.0 l_0_9_52)))
 (let ((?x24591 (* ?x24467 l_0_9_61)))
 (let ((?x24464 (* 2.0 l_0_9_51)))
 (let ((?x24589 (* ?x24464 l_0_9_60)))
 (let ((?x24461 (* 2.0 l_0_9_50)))
 (let ((?x24587 (* ?x24461 l_0_9_59)))
 (let ((?x24458 (* 2.0 l_0_9_49)))
 (let ((?x24585 (* ?x24458 l_0_9_58)))
 (let ((?x25215 (* l_0_9_178 l_0_9_178)))
 (let ((?x25213 (* l_0_9_177 l_0_9_177)))
 (let ((?x25211 (* l_0_9_176 l_0_9_176)))
 (let ((?x25209 (* l_0_9_175 l_0_9_175)))
 (let ((?x25207 (* l_0_9_157 l_0_9_157)))
 (let ((?x25205 (* l_0_9_156 l_0_9_156)))
 (let ((?x25203 (* l_0_9_155 l_0_9_155)))
 (let ((?x25201 (* l_0_9_154 l_0_9_154)))
 (let ((?x25199 (* l_0_9_115 l_0_9_115)))
 (let ((?x25197 (* l_0_9_114 l_0_9_114)))
 (let ((?x25200 (+ (+ (+ (* l_0_9_112 l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x25197) ?x25199)))
 (let ((?x25214 (- (- (- (+ (+ (+ (+ ?x25200 ?x25201) ?x25203) ?x25205) ?x25207) ?x25209) ?x25211) ?x25213)))
 (let ((?x25222 (- (- (+ (+ (+ (+ (- ?x25214 ?x25215) ?x24585) ?x24587) ?x24589) ?x24591) ?x24595) ?x24597)))
 (= (- (- (- (- (- (- ?x25222 ?x24599) ?x24601) ?x25225) ?x25227) ?x25229) ?x25231) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23865 (* l_0_9_78 l_0_9_78)))
 (let ((?x23862 (* l_0_9_77 l_0_9_77)))
 (let ((?x23859 (* l_0_9_76 l_0_9_76)))
 (let ((?x23856 (* l_0_9_75 l_0_9_75)))
 (let ((?x23853 (* l_0_9_74 l_0_9_74)))
 (let ((?x8000 (* l_0_9_57 l_0_9_57)))
 (let ((?x23896 (* l_0_9_56 l_0_9_56)))
 (let ((?x7979 (* l_0_9_55 l_0_9_55)))
 (let ((?x6304 (* l_0_9_54 l_0_9_54)))
 (let ((?x7976 (* l_0_9_53 l_0_9_53)))
 (let ((?x23560 (* 2.0 l_0_9_136)))
 (let ((?x23561 (* ?x23560 l_0_9_140)))
 (let ((?x23557 (* 2.0 l_0_9_135)))
 (let ((?x23558 (* ?x23557 l_0_9_139)))
 (let ((?x23554 (* 2.0 l_0_9_134)))
 (let ((?x23555 (* ?x23554 l_0_9_138)))
 (let ((?x10617 (+ (- (- (- (* (* (- 2.0) l_0_9_133) l_0_9_137) ?x23555) ?x23558) ?x23561) ?x7976)))
 (let ((?x25246 (- (- (- (+ (+ (+ (+ ?x10617 ?x6304) ?x7979) ?x23896) ?x8000) ?x23853) ?x23856) ?x23859)))
 (= (- (- ?x25246 ?x23862) ?x23865) 0.0))))))))))))))))))))
(assert
 (let ((?x25319 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x25316 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x25313 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x25310 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x24843 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x24840 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x24837 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x24834 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x24831 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x24828 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x24825 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x24822 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x24819 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x24816 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x25296 (* 2.0 l_0_9_178)))
 (let ((?x25297 (* ?x25296 l_0_9_182)))
 (let ((?x25293 (* 2.0 l_0_9_177)))
 (let ((?x25294 (* ?x25293 l_0_9_181)))
 (let ((?x25290 (* 2.0 l_0_9_176)))
 (let ((?x25291 (* ?x25290 l_0_9_180)))
 (let ((?x25287 (* 2.0 l_0_9_175)))
 (let ((?x25288 (* ?x25287 l_0_9_179)))
 (let ((?x25284 (* 2.0 l_0_9_157)))
 (let ((?x25285 (* ?x25284 l_0_9_161)))
 (let ((?x25281 (* 2.0 l_0_9_156)))
 (let ((?x25282 (* ?x25281 l_0_9_160)))
 (let ((?x25278 (* 2.0 l_0_9_155)))
 (let ((?x25279 (* ?x25278 l_0_9_159)))
 (let ((?x25275 (* 2.0 l_0_9_154)))
 (let ((?x25276 (* ?x25275 l_0_9_158)))
 (let ((?x23560 (* 2.0 l_0_9_136)))
 (let ((?x23654 (* ?x23560 l_0_9_145)))
 (let ((?x23557 (* 2.0 l_0_9_135)))
 (let ((?x23652 (* ?x23557 l_0_9_144)))
 (let ((?x23554 (* 2.0 l_0_9_134)))
 (let ((?x23650 (* ?x23554 l_0_9_143)))
 (let ((?x23551 (* 2.0 l_0_9_133)))
 (let ((?x23648 (* ?x23551 l_0_9_142)))
 (let ((?x25268 (* 2.0 l_0_9_115)))
 (let ((?x25269 (* ?x25268 l_0_9_119)))
 (let ((?x25265 (* 2.0 l_0_9_114)))
 (let ((?x25266 (* ?x25265 l_0_9_118)))
 (let ((?x10802 (* 2.0 l_0_9_113)))
 (let ((?x25263 (* ?x10802 l_0_9_117)))
 (let ((?x25271 (- (+ (+ (+ (* (* 2.0 l_0_9_112) l_0_9_116) ?x25263) ?x25266) ?x25269) ?x23648)))
 (let ((?x25286 (+ (+ (+ (+ (- (- (- ?x25271 ?x23650) ?x23652) ?x23654) ?x25276) ?x25279) ?x25282) ?x25285)))
 (let ((?x25301 (+ (+ (+ (- (- (- (- ?x25286 ?x25288) ?x25291) ?x25294) ?x25297) ?x24816) ?x24819) ?x24822)))
 (let ((?x25308 (- (- (- (- (- (+ (+ ?x25301 ?x24825) ?x24828) ?x24831) ?x24834) ?x24837) ?x24840) ?x24843)))
 (= (- (- (- (- ?x25308 ?x25310) ?x25313) ?x25316) ?x25319) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24205 (* l_0_9_84 l_0_9_84)))
 (let ((?x24202 (* l_0_9_83 l_0_9_83)))
 (let ((?x24199 (* l_0_9_82 l_0_9_82)))
 (let ((?x24196 (* l_0_9_81 l_0_9_81)))
 (let ((?x24193 (* l_0_9_80 l_0_9_80)))
 (let ((?x24190 (* l_0_9_79 l_0_9_79)))
 (let ((?x24279 (* l_0_9_63 l_0_9_63)))
 (let ((?x24273 (* l_0_9_62 l_0_9_62)))
 (let ((?x8194 (* l_0_9_61 l_0_9_61)))
 (let ((?x8188 (* l_0_9_60 l_0_9_60)))
 (let ((?x8182 (* l_0_9_59 l_0_9_59)))
 (let ((?x8163 (* l_0_9_58 l_0_9_58)))
 (let ((?x25296 (* 2.0 l_0_9_178)))
 (let ((?x25367 (* ?x25296 l_0_9_187)))
 (let ((?x25293 (* 2.0 l_0_9_177)))
 (let ((?x25365 (* ?x25293 l_0_9_186)))
 (let ((?x25290 (* 2.0 l_0_9_176)))
 (let ((?x25363 (* ?x25290 l_0_9_185)))
 (let ((?x25287 (* 2.0 l_0_9_175)))
 (let ((?x25361 (* ?x25287 l_0_9_184)))
 (let ((?x25284 (* 2.0 l_0_9_157)))
 (let ((?x25359 (* ?x25284 l_0_9_166)))
 (let ((?x25281 (* 2.0 l_0_9_156)))
 (let ((?x25357 (* ?x25281 l_0_9_165)))
 (let ((?x25278 (* 2.0 l_0_9_155)))
 (let ((?x25355 (* ?x25278 l_0_9_164)))
 (let ((?x25275 (* 2.0 l_0_9_154)))
 (let ((?x25353 (* ?x25275 l_0_9_163)))
 (let ((?x25268 (* 2.0 l_0_9_115)))
 (let ((?x25351 (* ?x25268 l_0_9_124)))
 (let ((?x25265 (* 2.0 l_0_9_114)))
 (let ((?x25349 (* ?x25265 l_0_9_123)))
 (let ((?x10802 (* 2.0 l_0_9_113)))
 (let ((?x25347 (* ?x10802 l_0_9_122)))
 (let ((?x10820 (* 2.0 l_0_9_112)))
 (let ((?x25345 (* ?x10820 l_0_9_121)))
 (let ((?x11050 (* 2.0 l_0_9_103)))
 (let ((?x10928 (* ?x11050 l_0_9_94)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x11055 (* ?x24109 l_0_9_93)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x11056 (* ?x24106 l_0_9_92)))
 (let ((?x25346 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_91) ?x11056) ?x11055) ?x10928) ?x25345)))
 (let ((?x25360 (+ (+ (+ (+ (+ (+ (+ ?x25346 ?x25347) ?x25349) ?x25351) ?x25353) ?x25355) ?x25357) ?x25359)))
 (let ((?x25371 (+ (+ (+ (- (- (- (- ?x25360 ?x25361) ?x25363) ?x25365) ?x25367) ?x8163) ?x8182) ?x8188)))
 (let ((?x25378 (- (- (- (- (+ (+ (+ ?x25371 ?x8194) ?x24273) ?x24279) ?x24190) ?x24193) ?x24196) ?x24199)))
 (= (- (- ?x25378 ?x24202) ?x24205) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25453 (* l_0_9_99 l_0_9_99)))
 (let ((?x25451 (* l_0_9_98 l_0_9_98)))
 (let ((?x25449 (* l_0_9_97 l_0_9_97)))
 (let ((?x25447 (* l_0_9_96 l_0_9_96)))
 (let ((?x25445 (* l_0_9_95 l_0_9_95)))
 (let ((?x25443 (* l_0_9_183 l_0_9_183)))
 (let ((?x25441 (* l_0_9_182 l_0_9_182)))
 (let ((?x25439 (* l_0_9_181 l_0_9_181)))
 (let ((?x25437 (* l_0_9_180 l_0_9_180)))
 (let ((?x25435 (* l_0_9_179 l_0_9_179)))
 (let ((?x25433 (* l_0_9_162 l_0_9_162)))
 (let ((?x25431 (* l_0_9_161 l_0_9_161)))
 (let ((?x25429 (* l_0_9_160 l_0_9_160)))
 (let ((?x25427 (* l_0_9_159 l_0_9_159)))
 (let ((?x25425 (* l_0_9_158 l_0_9_158)))
 (let ((?x23948 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x23945 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x23939 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x23936 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x23933 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x25418 (* l_0_9_120 l_0_9_120)))
 (let ((?x25416 (* l_0_9_119 l_0_9_119)))
 (let ((?x11206 (* l_0_9_118 l_0_9_118)))
 (let ((?x25417 (+ (+ (+ (* l_0_9_116 l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x11206) ?x25416)))
 (let ((?x25426 (+ (- (- (- (- (- (+ ?x25417 ?x25418) ?x23933) ?x23936) ?x23939) ?x23945) ?x23948) ?x25425)))
 (let ((?x25440 (- (- (- (+ (+ (+ (+ ?x25426 ?x25427) ?x25429) ?x25431) ?x25433) ?x25435) ?x25437) ?x25439)))
 (let ((?x25454 (- (- (- (- (- (- (- ?x25440 ?x25441) ?x25443) ?x25445) ?x25447) ?x25449) ?x25451) ?x25453)))
 (= ?x25454 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x25527 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x25524 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x25521 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x25518 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x25515 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x25512 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x25509 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x25506 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x25503 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x25500 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x24128 (* l_0_9_147 l_0_9_147)))
 (let ((?x24126 (* l_0_9_146 l_0_9_146)))
 (let ((?x24124 (* l_0_9_145 l_0_9_145)))
 (let ((?x24122 (* l_0_9_144 l_0_9_144)))
 (let ((?x24120 (* l_0_9_143 l_0_9_143)))
 (let ((?x24118 (* l_0_9_142 l_0_9_142)))
 (let ((?x25491 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x25488 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x25485 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x25482 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x25479 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x25476 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x11050 (* 2.0 l_0_9_103)))
 (let ((?x25473 (* ?x11050 l_0_9_98)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x25471 (* ?x24109 l_0_9_97)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x11337 (* ?x24106 l_0_9_96)))
 (let ((?x25477 (- (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_95) ?x11337) ?x25471) ?x25473) ?x25476)))
 (let ((?x25494 (- (- (+ (+ (+ (+ (+ ?x25477 ?x25479) ?x25482) ?x25485) ?x25488) ?x25491) ?x24118) ?x24120)))
 (let ((?x25507 (+ (+ (+ (- (- (- (- ?x25494 ?x24122) ?x24124) ?x24126) ?x24128) ?x25500) ?x25503) ?x25506)))
 (let ((?x25528 (- (- (- (- (- (+ (+ ?x25507 ?x25509) ?x25512) ?x25515) ?x25518) ?x25521) ?x25524) ?x25527)))
 (= ?x25528 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25614 (* l_0_9_189 l_0_9_189)))
 (let ((?x25612 (* l_0_9_188 l_0_9_188)))
 (let ((?x25610 (* l_0_9_187 l_0_9_187)))
 (let ((?x25608 (* l_0_9_186 l_0_9_186)))
 (let ((?x25606 (* l_0_9_185 l_0_9_185)))
 (let ((?x25604 (* l_0_9_184 l_0_9_184)))
 (let ((?x25602 (* l_0_9_168 l_0_9_168)))
 (let ((?x25600 (* l_0_9_167 l_0_9_167)))
 (let ((?x25598 (* l_0_9_166 l_0_9_166)))
 (let ((?x25596 (* l_0_9_165 l_0_9_165)))
 (let ((?x25594 (* l_0_9_164 l_0_9_164)))
 (let ((?x25592 (* l_0_9_163 l_0_9_163)))
 (let ((?x25590 (* l_0_9_126 l_0_9_126)))
 (let ((?x25588 (* l_0_9_125 l_0_9_125)))
 (let ((?x25586 (* l_0_9_124 l_0_9_124)))
 (let ((?x25584 (* l_0_9_123 l_0_9_123)))
 (let ((?x25582 (* l_0_9_122 l_0_9_122)))
 (let ((?x25580 (* l_0_9_121 l_0_9_121)))
 (let ((?x25578 (* l_0_9_105 l_0_9_105)))
 (let ((?x25576 (* l_0_9_104 l_0_9_104)))
 (let ((?x25574 (* l_0_9_103 l_0_9_103)))
 (let ((?x25572 (* l_0_9_102 l_0_9_102)))
 (let ((?x25573 (- (- (* (- l_0_9_100) l_0_9_100) (* l_0_9_101 l_0_9_101)) ?x25572)))
 (let ((?x25587 (+ (+ (+ (+ (- (- (- ?x25573 ?x25574) ?x25576) ?x25578) ?x25580) ?x25582) ?x25584) ?x25586)))
 (let ((?x25601 (+ (+ (+ (+ (+ (+ (+ ?x25587 ?x25588) ?x25590) ?x25592) ?x25594) ?x25596) ?x25598) ?x25600)))
 (let ((?x25615 (- (- (- (- (- (- (+ ?x25601 ?x25602) ?x25604) ?x25606) ?x25608) ?x25610) ?x25612) ?x25614)))
 (= ?x25615 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x22040 (* l_0_9_85 l_0_9_85)))
 (let ((?x22036 (* l_0_9_169 l_0_9_169)))
 (let ((?x25655 (+ (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_148 l_0_9_148)) ?x22036)))
 (= (+ ?x25655 ?x22040) 0.0)))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22414 (* ?x22210 l_0_9_88)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22396 (* ?x22188 l_0_9_172)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22392 (* ?x22182 l_0_9_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_109) ?x22392) ?x22396) ?x22414) 0.0))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22547 (* ?x22210 l_0_9_91)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22531 (* ?x22188 l_0_9_175)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22527 (* ?x22182 l_0_9_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x22527) ?x22531) ?x22547) 0.0))))))))
(assert
 (let ((?x22210 (* 2.0 l_0_9_85)))
 (let ((?x22654 (* ?x22210 l_0_9_95)))
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22637 (* ?x22188 l_0_9_179)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22632 (* ?x22182 l_0_9_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_116) ?x22632) ?x22637) ?x22654) 0.0))))))))
(assert
 (let ((?x22188 (* 2.0 l_0_9_169)))
 (let ((?x22710 (* ?x22188 l_0_9_184)))
 (let ((?x22182 (* 2.0 l_0_9_148)))
 (let ((?x22706 (* ?x22182 l_0_9_163)))
 (let ((?x22173 (* 2.0 l_0_9_106)))
 (let ((?x22704 (* ?x22173 l_0_9_121)))
 (= (+ (- (- (* (* 2.0 l_0_9_100) l_0_9_85) ?x22704) ?x22706) ?x22710) 0.0))))))))
(assert
 (let ((?x23457 (* l_0_9_90 l_0_9_90)))
 (let ((?x23455 (* l_0_9_89 l_0_9_89)))
 (let ((?x23453 (* l_0_9_88 l_0_9_88)))
 (let ((?x23431 (* l_0_9_174 l_0_9_174)))
 (let ((?x23429 (* l_0_9_173 l_0_9_173)))
 (let ((?x23427 (* l_0_9_172 l_0_9_172)))
 (let ((?x23423 (* l_0_9_153 l_0_9_153)))
 (let ((?x23421 (* l_0_9_152 l_0_9_152)))
 (let ((?x23419 (* l_0_9_151 l_0_9_151)))
 (let ((?x6461 (* l_0_9_111 l_0_9_111)))
 (let ((?x25684 (- (- (* (- l_0_9_109) l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x6461)))
 (let ((?x25691 (+ (+ (+ (+ (- (- (- ?x25684 ?x23419) ?x23421) ?x23423) ?x23427) ?x23429) ?x23431) ?x23453)))
 (= (+ (+ ?x25691 ?x23455) ?x23457) 0.0))))))))))))))
(assert
 (let ((?x23716 (* 2.0 l_0_9_90)))
 (let ((?x23717 (* ?x23716 l_0_9_93)))
 (let ((?x23713 (* 2.0 l_0_9_89)))
 (let ((?x23714 (* ?x23713 l_0_9_92)))
 (let ((?x23710 (* 2.0 l_0_9_88)))
 (let ((?x23711 (* ?x23710 l_0_9_91)))
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x23676 (* ?x23675 l_0_9_177)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x23673 (* ?x23672 l_0_9_176)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x23670 (* ?x23669 l_0_9_175)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x23663 (* ?x23662 l_0_9_156)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x23660 (* ?x23659 l_0_9_155)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x23657 (* ?x23656 l_0_9_154)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x23646 (* ?x23645 l_0_9_114)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x23643 (* ?x23642 l_0_9_113)))
 (let ((?x25702 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_112) ?x23643) ?x23646) ?x23657) ?x23660)))
 (let ((?x25709 (+ (+ (+ (+ (+ (+ (- ?x25702 ?x23663) ?x23670) ?x23673) ?x23676) ?x23711) ?x23714) ?x23717)))
 (= ?x25709 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23716 (* 2.0 l_0_9_90)))
 (let ((?x24014 (* ?x23716 l_0_9_97)))
 (let ((?x23713 (* 2.0 l_0_9_89)))
 (let ((?x24012 (* ?x23713 l_0_9_96)))
 (let ((?x23710 (* 2.0 l_0_9_88)))
 (let ((?x24010 (* ?x23710 l_0_9_95)))
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x23963 (* ?x23675 l_0_9_181)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x23961 (* ?x23672 l_0_9_180)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x23959 (* ?x23669 l_0_9_179)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x23957 (* ?x23662 l_0_9_160)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x23955 (* ?x23659 l_0_9_159)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x23953 (* ?x23656 l_0_9_158)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x23923 (* ?x23645 l_0_9_118)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x23921 (* ?x23642 l_0_9_117)))
 (let ((?x11855 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_116) ?x23921) ?x23923) ?x23953) ?x23955)))
 (let ((?x25716 (+ (+ (+ (+ (+ (+ (- ?x11855 ?x23957) ?x23959) ?x23961) ?x23963) ?x24010) ?x24012) ?x24014)))
 (= ?x25716 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23675 (* 2.0 l_0_9_174)))
 (let ((?x24144 (* ?x23675 l_0_9_186)))
 (let ((?x23672 (* 2.0 l_0_9_173)))
 (let ((?x24142 (* ?x23672 l_0_9_185)))
 (let ((?x23669 (* 2.0 l_0_9_172)))
 (let ((?x24140 (* ?x23669 l_0_9_184)))
 (let ((?x23662 (* 2.0 l_0_9_153)))
 (let ((?x24134 (* ?x23662 l_0_9_165)))
 (let ((?x23659 (* 2.0 l_0_9_152)))
 (let ((?x24132 (* ?x23659 l_0_9_164)))
 (let ((?x23656 (* 2.0 l_0_9_151)))
 (let ((?x24130 (* ?x23656 l_0_9_163)))
 (let ((?x23645 (* 2.0 l_0_9_111)))
 (let ((?x24116 (* ?x23645 l_0_9_123)))
 (let ((?x23642 (* 2.0 l_0_9_110)))
 (let ((?x24114 (* ?x23642 l_0_9_122)))
 (let ((?x23639 (* 2.0 l_0_9_109)))
 (let ((?x24112 (* ?x23639 l_0_9_121)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x24110 (* ?x24109 l_0_9_90)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x24107 (* ?x24106 l_0_9_89)))
 (let ((?x12032 (- (- (+ (+ (* (* 2.0 l_0_9_100) l_0_9_88) ?x24107) ?x24110) ?x24112) ?x24114)))
 (let ((?x25726 (+ (+ (+ (- (- (- (- ?x12032 ?x24116) ?x24130) ?x24132) ?x24134) ?x24140) ?x24142) ?x24144)))
 (= ?x25726 0.0))))))))))))))))))))))))))
(assert
 (let ((?x25231 (* l_0_9_94 l_0_9_94)))
 (let ((?x25229 (* l_0_9_93 l_0_9_93)))
 (let ((?x25227 (* l_0_9_92 l_0_9_92)))
 (let ((?x25225 (* l_0_9_91 l_0_9_91)))
 (let ((?x25215 (* l_0_9_178 l_0_9_178)))
 (let ((?x25213 (* l_0_9_177 l_0_9_177)))
 (let ((?x25211 (* l_0_9_176 l_0_9_176)))
 (let ((?x25209 (* l_0_9_175 l_0_9_175)))
 (let ((?x25207 (* l_0_9_157 l_0_9_157)))
 (let ((?x25205 (* l_0_9_156 l_0_9_156)))
 (let ((?x25203 (* l_0_9_155 l_0_9_155)))
 (let ((?x25201 (* l_0_9_154 l_0_9_154)))
 (let ((?x25199 (* l_0_9_115 l_0_9_115)))
 (let ((?x25197 (* l_0_9_114 l_0_9_114)))
 (let ((?x12100 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x25197)))
 (let ((?x25731 (+ (+ (- (- (- (- (- ?x12100 ?x25199) ?x25201) ?x25203) ?x25205) ?x25207) ?x25209) ?x25211)))
 (= (+ (+ (+ (+ (+ (+ ?x25731 ?x25213) ?x25215) ?x25225) ?x25227) ?x25229) ?x25231) 0.0))))))))))))))))))
(assert
 (let ((?x25319 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x25316 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x25313 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x25310 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x25296 (* 2.0 l_0_9_178)))
 (let ((?x25297 (* ?x25296 l_0_9_182)))
 (let ((?x25293 (* 2.0 l_0_9_177)))
 (let ((?x25294 (* ?x25293 l_0_9_181)))
 (let ((?x25290 (* 2.0 l_0_9_176)))
 (let ((?x25291 (* ?x25290 l_0_9_180)))
 (let ((?x25287 (* 2.0 l_0_9_175)))
 (let ((?x25288 (* ?x25287 l_0_9_179)))
 (let ((?x25284 (* 2.0 l_0_9_157)))
 (let ((?x25285 (* ?x25284 l_0_9_161)))
 (let ((?x25281 (* 2.0 l_0_9_156)))
 (let ((?x25282 (* ?x25281 l_0_9_160)))
 (let ((?x25278 (* 2.0 l_0_9_155)))
 (let ((?x25279 (* ?x25278 l_0_9_159)))
 (let ((?x25275 (* 2.0 l_0_9_154)))
 (let ((?x25276 (* ?x25275 l_0_9_158)))
 (let ((?x25268 (* 2.0 l_0_9_115)))
 (let ((?x25269 (* ?x25268 l_0_9_119)))
 (let ((?x25265 (* 2.0 l_0_9_114)))
 (let ((?x25266 (* ?x25265 l_0_9_118)))
 (let ((?x10802 (* 2.0 l_0_9_113)))
 (let ((?x25263 (* ?x10802 l_0_9_117)))
 (let ((?x12279 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_116) ?x25263) ?x25266) ?x25269) ?x25276)))
 (let ((?x25752 (+ (+ (+ (+ (- (- (- ?x12279 ?x25279) ?x25282) ?x25285) ?x25288) ?x25291) ?x25294) ?x25297)))
 (= (+ (+ (+ (+ ?x25752 ?x25310) ?x25313) ?x25316) ?x25319) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x25296 (* 2.0 l_0_9_178)))
 (let ((?x25367 (* ?x25296 l_0_9_187)))
 (let ((?x25293 (* 2.0 l_0_9_177)))
 (let ((?x25365 (* ?x25293 l_0_9_186)))
 (let ((?x25290 (* 2.0 l_0_9_176)))
 (let ((?x25363 (* ?x25290 l_0_9_185)))
 (let ((?x25287 (* 2.0 l_0_9_175)))
 (let ((?x25361 (* ?x25287 l_0_9_184)))
 (let ((?x25284 (* 2.0 l_0_9_157)))
 (let ((?x25359 (* ?x25284 l_0_9_166)))
 (let ((?x25281 (* 2.0 l_0_9_156)))
 (let ((?x25357 (* ?x25281 l_0_9_165)))
 (let ((?x25278 (* 2.0 l_0_9_155)))
 (let ((?x25355 (* ?x25278 l_0_9_164)))
 (let ((?x25275 (* 2.0 l_0_9_154)))
 (let ((?x25353 (* ?x25275 l_0_9_163)))
 (let ((?x25268 (* 2.0 l_0_9_115)))
 (let ((?x25351 (* ?x25268 l_0_9_124)))
 (let ((?x25265 (* 2.0 l_0_9_114)))
 (let ((?x25349 (* ?x25265 l_0_9_123)))
 (let ((?x10802 (* 2.0 l_0_9_113)))
 (let ((?x25347 (* ?x10802 l_0_9_122)))
 (let ((?x10820 (* 2.0 l_0_9_112)))
 (let ((?x25345 (* ?x10820 l_0_9_121)))
 (let ((?x11050 (* 2.0 l_0_9_103)))
 (let ((?x10928 (* ?x11050 l_0_9_94)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x11055 (* ?x24109 l_0_9_93)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x11056 (* ?x24106 l_0_9_92)))
 (let ((?x12315 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_91) ?x11056) ?x11055) ?x10928) ?x25345)))
 (let ((?x25771 (- (- (- (- (- (- (- ?x12315 ?x25347) ?x25349) ?x25351) ?x25353) ?x25355) ?x25357) ?x25359)))
 (= (+ (+ (+ (+ ?x25771 ?x25361) ?x25363) ?x25365) ?x25367) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25453 (* l_0_9_99 l_0_9_99)))
 (let ((?x25451 (* l_0_9_98 l_0_9_98)))
 (let ((?x25449 (* l_0_9_97 l_0_9_97)))
 (let ((?x25447 (* l_0_9_96 l_0_9_96)))
 (let ((?x25445 (* l_0_9_95 l_0_9_95)))
 (let ((?x25443 (* l_0_9_183 l_0_9_183)))
 (let ((?x25441 (* l_0_9_182 l_0_9_182)))
 (let ((?x25439 (* l_0_9_181 l_0_9_181)))
 (let ((?x25437 (* l_0_9_180 l_0_9_180)))
 (let ((?x25435 (* l_0_9_179 l_0_9_179)))
 (let ((?x25433 (* l_0_9_162 l_0_9_162)))
 (let ((?x25431 (* l_0_9_161 l_0_9_161)))
 (let ((?x25429 (* l_0_9_160 l_0_9_160)))
 (let ((?x25427 (* l_0_9_159 l_0_9_159)))
 (let ((?x25425 (* l_0_9_158 l_0_9_158)))
 (let ((?x25418 (* l_0_9_120 l_0_9_120)))
 (let ((?x25416 (* l_0_9_119 l_0_9_119)))
 (let ((?x11206 (* l_0_9_118 l_0_9_118)))
 (let ((?x12449 (- (- (* (- l_0_9_116) l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x11206)))
 (let ((?x12405 (- (- (- (- (- (- (- ?x12449 ?x25416) ?x25418) ?x25425) ?x25427) ?x25429) ?x25431) ?x25433)))
 (let ((?x12388 (+ (+ (+ (+ (+ (+ (+ ?x12405 ?x25435) ?x25437) ?x25439) ?x25441) ?x25443) ?x25445) ?x25447)))
 (= (+ (+ (+ ?x12388 ?x25449) ?x25451) ?x25453) 0.0)))))))))))))))))))))))
(assert
 (let ((?x25527 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x25524 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x25521 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x25518 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x25515 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x25512 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x25509 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x25506 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x25503 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x25500 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x25491 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x25488 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x25485 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x25482 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x25479 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x25476 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x11050 (* 2.0 l_0_9_103)))
 (let ((?x25473 (* ?x11050 l_0_9_98)))
 (let ((?x24109 (* 2.0 l_0_9_102)))
 (let ((?x25471 (* ?x24109 l_0_9_97)))
 (let ((?x24106 (* 2.0 l_0_9_101)))
 (let ((?x11337 (* ?x24106 l_0_9_96)))
 (let ((?x12515 (+ (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_95) ?x11337) ?x25471) ?x25473) ?x25476)))
 (let ((?x25795 (- (- (- (- (- (- (- ?x12515 ?x25479) ?x25482) ?x25485) ?x25488) ?x25491) ?x25500) ?x25503)))
 (let ((?x25802 (+ (+ (+ (+ (- (- (- ?x25795 ?x25506) ?x25509) ?x25512) ?x25515) ?x25518) ?x25521) ?x25524)))
 (= (+ ?x25802 ?x25527) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x25614 (* l_0_9_189 l_0_9_189)))
 (let ((?x25612 (* l_0_9_188 l_0_9_188)))
 (let ((?x25610 (* l_0_9_187 l_0_9_187)))
 (let ((?x25608 (* l_0_9_186 l_0_9_186)))
 (let ((?x25606 (* l_0_9_185 l_0_9_185)))
 (let ((?x25604 (* l_0_9_184 l_0_9_184)))
 (let ((?x25602 (* l_0_9_168 l_0_9_168)))
 (let ((?x25600 (* l_0_9_167 l_0_9_167)))
 (let ((?x25598 (* l_0_9_166 l_0_9_166)))
 (let ((?x25596 (* l_0_9_165 l_0_9_165)))
 (let ((?x25594 (* l_0_9_164 l_0_9_164)))
 (let ((?x25592 (* l_0_9_163 l_0_9_163)))
 (let ((?x25590 (* l_0_9_126 l_0_9_126)))
 (let ((?x25588 (* l_0_9_125 l_0_9_125)))
 (let ((?x25586 (* l_0_9_124 l_0_9_124)))
 (let ((?x25584 (* l_0_9_123 l_0_9_123)))
 (let ((?x25582 (* l_0_9_122 l_0_9_122)))
 (let ((?x25580 (* l_0_9_121 l_0_9_121)))
 (let ((?x25578 (* l_0_9_105 l_0_9_105)))
 (let ((?x25576 (* l_0_9_104 l_0_9_104)))
 (let ((?x25574 (* l_0_9_103 l_0_9_103)))
 (let ((?x25572 (* l_0_9_102 l_0_9_102)))
 (let ((?x12667 (+ (+ (+ (* l_0_9_100 l_0_9_100) (* l_0_9_101 l_0_9_101)) ?x25572) ?x25574)))
 (let ((?x25813 (- (- (- (- (- (+ (+ ?x12667 ?x25576) ?x25578) ?x25580) ?x25582) ?x25584) ?x25586) ?x25588)))
 (let ((?x25820 (- (- (- (- (- (- (- ?x25813 ?x25590) ?x25592) ?x25594) ?x25596) ?x25598) ?x25600) ?x25602)))
 (= (+ (+ (+ (+ (+ (+ ?x25820 ?x25604) ?x25606) ?x25608) ?x25610) ?x25612) ?x25614) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x23819 (* l_0_9_141 l_0_9_141)))
 (let ((?x23817 (* l_0_9_140 l_0_9_140)))
 (let ((?x23813 (* l_0_9_139 l_0_9_139)))
 (let ((?x12736 (- (- (* (- l_0_9_137) l_0_9_137) (* l_0_9_138 l_0_9_138)) ?x23813)))
 (= (- (- ?x12736 ?x23817) ?x23819) 0.0))))))
(assert
 (>= l_0_9_1 0.0))
(assert
 (>= l_0_9_3 0.0))
(assert
 (>= l_0_9_6 0.0))
(assert
 (>= l_0_9_10 0.0))
(assert
 (>= l_0_9_15 0.0))
(assert
 (>= l_0_9_21 0.0))
(assert
 (>= l_0_9_22 0.0))
(assert
 (>= l_0_9_24 0.0))
(assert
 (>= l_0_9_27 0.0))
(assert
 (>= l_0_9_31 0.0))
(assert
 (>= l_0_9_36 0.0))
(assert
 (>= l_0_9_42 0.0))
(assert
 (>= l_0_9_43 0.0))
(assert
 (>= l_0_9_45 0.0))
(assert
 (>= l_0_9_48 0.0))
(assert
 (>= l_0_9_52 0.0))
(assert
 (>= l_0_9_57 0.0))
(assert
 (>= l_0_9_63 0.0))
(assert
 (>= l_0_9_64 0.0))
(assert
 (>= l_0_9_66 0.0))
(assert
 (>= l_0_9_69 0.0))
(assert
 (>= l_0_9_73 0.0))
(assert
 (>= l_0_9_78 0.0))
(assert
 (>= l_0_9_84 0.0))
(assert
 (>= l_0_9_85 0.0))
(assert
 (>= l_0_9_87 0.0))
(assert
 (>= l_0_9_90 0.0))
(assert
 (>= l_0_9_94 0.0))
(assert
 (>= l_0_9_99 0.0))
(assert
 (>= l_0_9_105 0.0))
(assert
 (>= l_0_9_106 0.0))
(assert
 (>= l_0_9_108 0.0))
(assert
 (>= l_0_9_111 0.0))
(assert
 (>= l_0_9_115 0.0))
(assert
 (>= l_0_9_120 0.0))
(assert
 (>= l_0_9_126 0.0))
(assert
 (>= l_0_9_127 0.0))
(assert
 (>= l_0_9_129 0.0))
(assert
 (>= l_0_9_132 0.0))
(assert
 (>= l_0_9_136 0.0))
(assert
 (>= l_0_9_141 0.0))
(assert
 (>= l_0_9_147 0.0))
(assert
 (>= l_0_9_148 0.0))
(assert
 (>= l_0_9_150 0.0))
(assert
 (>= l_0_9_153 0.0))
(assert
 (>= l_0_9_157 0.0))
(assert
 (>= l_0_9_162 0.0))
(assert
 (>= l_0_9_168 0.0))
(assert
 (>= l_0_9_169 0.0))
(assert
 (>= l_0_9_171 0.0))
(assert
 (>= l_0_9_174 0.0))
(assert
 (>= l_0_9_178 0.0))
(assert
 (>= l_0_9_183 0.0))
(assert
 (>= l_0_9_189 0.0))
(assert
 (>= l_0_9_190 0.0))
(assert
 (>= l_0_9_192 0.0))
(assert
 (>= l_0_9_195 0.0))
(assert
 (>= l_0_9_199 0.0))
(assert
 (>= l_0_9_204 0.0))
(assert
 (>= l_0_9_210 0.0))
(assert
 (>= l_0_9_211 0.0))
(assert
 (>= l_0_9_213 0.0))
(assert
 (>= l_0_9_216 0.0))
(assert
 (>= l_0_9_220 0.0))
(assert
 (>= l_0_9_225 0.0))
(assert
 (>= l_0_9_231 0.0))
(assert
 (>= l_0_9_232 0.0))
(assert
 (>= l_0_9_234 0.0))
(assert
 (>= l_0_9_237 0.0))
(assert
 (>= l_0_9_241 0.0))
(assert
 (>= l_0_9_246 0.0))
(assert
 (>= l_0_9_252 0.0))
(assert
 (let ((?x25898 (* l_0_10_3 l_0_10_3)))
 (let ((?x25899 (* 6.0 ?x25898)))
 (let ((?x25896 (* l_0_10_255 l_0_10_255)))
 (let ((?x25894 (* l_0_10_254 l_0_10_254)))
 (let ((?x25892 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x25889 (* l_0_10_234 l_0_10_234)))
 (let ((?x25887 (* l_0_10_233 l_0_10_233)))
 (let ((?x25885 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x25882 (* l_0_10_213 l_0_10_213)))
 (let ((?x25880 (* l_0_10_212 l_0_10_212)))
 (let ((?x25877 (* l_0_10_2 l_0_10_2)))
 (let ((?x25878 (* 6.0 ?x25877)))
 (let ((?x25875 (* l_0_10_192 l_0_10_192)))
 (let ((?x25883 (- (- (+ (- (- _a_6_ (* l_0_10_191 l_0_10_191)) ?x25875) ?x25878) ?x25880) ?x25882)))
 (let ((?x25900 (+ (- (- (- (- (- (- ?x25883 ?x25885) ?x25887) ?x25889) ?x25892) ?x25894) ?x25896) ?x25899)))
 (let ((?x25906 (- (- ?x25900 (* (* 1.0 l_0_10_44) l_0_10_44)) (* (* 1.0 l_0_10_45) l_0_10_45))))
 (let ((?x25912 (+ (+ ?x25906 (* 1.0 (* l_0_10_65 l_0_10_65))) (* 1.0 (* l_0_10_66 l_0_10_66)))))
 (= (- ?x25912 7.0) 0.0)))))))))))))))))))
(assert
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x25972 (* ?x25971 l_0_10_65)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x25969 (* ?x25968 l_0_10_44)))
 (let ((?x25898 (* l_0_10_3 l_0_10_3)))
 (let ((?x25931 (* l_0_10_24 l_0_10_24)))
 (let ((?x12828 (* l_0_10_23 l_0_10_23)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x25957 (* ?x25956 l_0_10_23)))
 (let ((?x25877 (* l_0_10_2 l_0_10_2)))
 (let ((?x25951 (- (+ _a_7_ (* (* 12.0 l_0_10_1) l_0_10_2)) (* (* 2.0 l_0_10_190) l_0_10_191))))
 (let ((?x25959 (+ (- (- (- ?x25951 ?x25877) (* (* 2.0 l_0_10_211) l_0_10_212)) ?x25957) ?x12828)))
 (let ((?x25966 (- (+ (- ?x25959 (* (* 2.0 l_0_10_232) l_0_10_233)) ?x25931) (* (* 2.0 l_0_10_253) l_0_10_254))))
 (= (+ (- (- ?x25966 ?x25898) ?x25969) ?x25972) 0.0)))))))))))))))
(assert
 (let ((?x25910 (* l_0_10_66 l_0_10_66)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x26051 (* ?x26050 l_0_10_71)))
 (let ((?x25907 (* l_0_10_65 l_0_10_65)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x26047 (* ?x26046 l_0_10_70)))
 (let ((?x12844 (* l_0_10_45 l_0_10_45)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x26043 (* ?x26042 l_0_10_50)))
 (let ((?x25936 (* l_0_10_44 l_0_10_44)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x26039 (* ?x26038 l_0_10_49)))
 (let ((?x26035 (* 12.0 l_0_10_3)))
 (let ((?x26036 (* ?x26035 l_0_10_8)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x26027 (* ?x26026 l_0_10_29)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x26018 (* ?x26017 l_0_10_28)))
 (let ((?x26008 (* 12.0 l_0_10_2)))
 (let ((?x26009 (* ?x26008 l_0_10_7)))
 (let ((?x26007 (- (- _a_8_ (* (* 2.0 l_0_10_191) l_0_10_196)) (* (* 2.0 l_0_10_192) l_0_10_197))))
 (let ((?x26016 (- (- (+ ?x26007 ?x26009) (* (* 2.0 l_0_10_212) l_0_10_217)) (* (* 2.0 l_0_10_213) l_0_10_218))))
 (let ((?x26025 (- (- (- ?x26016 ?x26018) (* (* 2.0 l_0_10_233) l_0_10_238)) (* (* 2.0 l_0_10_234) l_0_10_239))))
 (let ((?x26034 (- (- (- ?x26025 ?x26027) (* (* 2.0 l_0_10_254) l_0_10_259)) (* (* 2.0 l_0_10_255) l_0_10_260))))
 (let ((?x26049 (- (+ (+ (- (+ (- (+ ?x26034 ?x26036) ?x26039) ?x25936) ?x26043) ?x12844) ?x26047) ?x25907)))
 (= (- (+ ?x26049 ?x26051) ?x25910) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26126 (* l_0_10_253 l_0_10_253)))
 (let ((?x26124 (* l_0_10_232 l_0_10_232)))
 (let ((?x26122 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x26116 (* l_0_10_211 l_0_10_211)))
 (let ((?x26114 (* l_0_10_190 l_0_10_190)))
 (let ((?x26111 (* l_0_10_1 l_0_10_1)))
 (let ((?x26112 (* 6.0 ?x26111)))
 (let ((?x26117 (- (- (+ (- _a_9_ (* (* 2.0 l_0_10_1) l_0_10_2)) ?x26112) ?x26114) ?x26116)))
 (let ((?x26127 (- (- (- (+ ?x26117 (* (* 2.0 l_0_10_22) l_0_10_23)) ?x26122) ?x26124) ?x26126)))
 (let ((?x26133 (+ (- ?x26127 (* (* 1.0 l_0_10_43) l_0_10_43)) (* 1.0 (* l_0_10_64 l_0_10_64)))))
 (= ?x26133 0.0))))))))))))
(assert
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26180 (* ?x25971 l_0_10_70)))
 (let ((?x25972 (* ?x25971 l_0_10_65)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26177 (* ?x25968 l_0_10_49)))
 (let ((?x25969 (* ?x25968 l_0_10_44)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26161 (* ?x25956 l_0_10_28)))
 (let ((?x26155 (- (+ _a_10_ (* (* 12.0 l_0_10_1) l_0_10_7)) (* (* 2.0 l_0_10_190) l_0_10_196))))
 (let ((?x26160 (- (- ?x26155 (* (* 2.0 l_0_10_2) l_0_10_7)) (* (* 2.0 l_0_10_211) l_0_10_217))))
 (let ((?x26167 (- (+ (- ?x26160 ?x26161) (* (* 2.0 l_0_10_23) l_0_10_28)) (* (* 2.0 l_0_10_232) l_0_10_238))))
 (let ((?x26172 (- (+ ?x26167 (* (* 2.0 l_0_10_24) l_0_10_29)) (* (* 2.0 l_0_10_253) l_0_10_259))))
 (let ((?x26179 (- (- (+ (- ?x26172 (* (* 2.0 l_0_10_3) l_0_10_8)) ?x25969) ?x26177) ?x25972)))
 (= (+ ?x26179 ?x26180) 0.0)))))))))))))))
(assert
 (let ((?x26289 (* l_0_10_9 l_0_10_9)))
 (let ((?x26290 (* 6.0 ?x26289)))
 (let ((?x26286 (* l_0_10_8 l_0_10_8)))
 (let ((?x26287 (* 6.0 ?x26286)))
 (let ((?x26271 (* l_0_10_7 l_0_10_7)))
 (let ((?x26272 (* 6.0 ?x26271)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x26051 (* ?x26050 l_0_10_71)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x26047 (* ?x26046 l_0_10_70)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x26043 (* ?x26042 l_0_10_50)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x26039 (* ?x26038 l_0_10_49)))
 (let ((?x26253 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x26250 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x26247 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x26244 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x26241 (* l_0_10_262 l_0_10_262)))
 (let ((?x26239 (* l_0_10_261 l_0_10_261)))
 (let ((?x26237 (* l_0_10_260 l_0_10_260)))
 (let ((?x26235 (* l_0_10_259 l_0_10_259)))
 (let ((?x26233 (* l_0_10_241 l_0_10_241)))
 (let ((?x26231 (* l_0_10_240 l_0_10_240)))
 (let ((?x26229 (* l_0_10_239 l_0_10_239)))
 (let ((?x26227 (* l_0_10_238 l_0_10_238)))
 (let ((?x26225 (* l_0_10_220 l_0_10_220)))
 (let ((?x26223 (* l_0_10_219 l_0_10_219)))
 (let ((?x26221 (* l_0_10_218 l_0_10_218)))
 (let ((?x26219 (* l_0_10_217 l_0_10_217)))
 (let ((?x26217 (* l_0_10_199 l_0_10_199)))
 (let ((?x26215 (* l_0_10_198 l_0_10_198)))
 (let ((?x26213 (* l_0_10_197 l_0_10_197)))
 (let ((?x26211 (* l_0_10_196 l_0_10_196)))
 (let ((?x26216 (- (- (- (+ _a_11_ (* 6.0 (* l_0_10_10 l_0_10_10))) ?x26211) ?x26213) ?x26215)))
 (let ((?x26230 (- (- (- (- (- (- (- ?x26216 ?x26217) ?x26219) ?x26221) ?x26223) ?x26225) ?x26227) ?x26229)))
 (let ((?x26245 (- (- (- (- (- (- (- ?x26230 ?x26231) ?x26233) ?x26235) ?x26237) ?x26239) ?x26241) ?x26244)))
 (let ((?x26259 (- (+ (+ (- (- (- ?x26245 ?x26247) ?x26250) ?x26253) ?x26039) ?x26043) (* (* 1.0 l_0_10_49) l_0_10_49))))
 (let ((?x26265 (- (- ?x26259 (* (* 1.0 l_0_10_50) l_0_10_50)) (* (* 1.0 l_0_10_51) l_0_10_51))))
 (let ((?x26273 (+ (- (- (- ?x26265 (* (* 1.0 l_0_10_52) l_0_10_52)) ?x26047) ?x26051) ?x26272)))
 (let ((?x26279 (+ (+ ?x26273 (* 1.0 (* l_0_10_70 l_0_10_70))) (* 1.0 (* l_0_10_71 l_0_10_71)))))
 (let ((?x26285 (+ (+ ?x26279 (* 1.0 (* l_0_10_72 l_0_10_72))) (* 1.0 (* l_0_10_73 l_0_10_73)))))
 (= (+ (+ ?x26285 ?x26287) ?x26290) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25910 (* l_0_10_66 l_0_10_66)))
 (let ((?x26415 (* 3.0 ?x25910)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x26413 (* ?x26412 l_0_10_68)))
 (let ((?x25907 (* l_0_10_65 l_0_10_65)))
 (let ((?x26410 (* 3.0 ?x25907)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x26408 (* ?x26407 l_0_10_67)))
 (let ((?x26404 (* l_0_10_6 l_0_10_6)))
 (let ((?x26405 (* 6.0 ?x26404)))
 (let ((?x26401 (* l_0_10_5 l_0_10_5)))
 (let ((?x26402 (* 6.0 ?x26401)))
 (let ((?x26390 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x26387 (* ?x26386 l_0_10_47)))
 (let ((?x26384 (* (* 3.0 l_0_10_44) l_0_10_44)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x26381 (* ?x26380 l_0_10_46)))
 (let ((?x26377 (* l_0_10_4 l_0_10_4)))
 (let ((?x26378 (* 6.0 ?x26377)))
 (let ((?x26035 (* 12.0 l_0_10_3)))
 (let ((?x26375 (* ?x26035 l_0_10_5)))
 (let ((?x26373 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x26370 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x26367 (* l_0_10_258 l_0_10_258)))
 (let ((?x26365 (* l_0_10_257 l_0_10_257)))
 (let ((?x26363 (* l_0_10_256 l_0_10_256)))
 (let ((?x26361 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x26358 (* ?x26026 l_0_10_26)))
 (let ((?x26356 (* l_0_10_237 l_0_10_237)))
 (let ((?x26354 (* l_0_10_236 l_0_10_236)))
 (let ((?x26352 (* l_0_10_235 l_0_10_235)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x26350 (* ?x26017 l_0_10_25)))
 (let ((?x26348 (* l_0_10_216 l_0_10_216)))
 (let ((?x26346 (* l_0_10_215 l_0_10_215)))
 (let ((?x26344 (* l_0_10_214 l_0_10_214)))
 (let ((?x26008 (* 12.0 l_0_10_2)))
 (let ((?x26342 (* ?x26008 l_0_10_4)))
 (let ((?x26340 (* l_0_10_195 l_0_10_195)))
 (let ((?x26338 (* l_0_10_194 l_0_10_194)))
 (let ((?x26336 (* l_0_10_193 l_0_10_193)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x26334 (* ?x26333 l_0_10_131)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x26332 (* ?x13288 l_0_10_130)))
 (let ((?x26347 (- (- (+ (- (- (- (+ ?x26332 ?x26334) ?x26336) ?x26338) ?x26340) ?x26342) ?x26344) ?x26346)))
 (let ((?x26362 (- (- (- (- (- (- (- ?x26347 ?x26348) ?x26350) ?x26352) ?x26354) ?x26356) ?x26358) ?x26361)))
 (let ((?x26379 (+ (+ (- (- (- (- (- ?x26362 ?x26363) ?x26365) ?x26367) ?x26370) ?x26373) ?x26375) ?x26378)))
 (let ((?x26394 (- (- (- (- (- ?x26379 ?x26381) ?x26384) ?x26387) ?x26390) (* (* 1.0 l_0_10_46) l_0_10_46))))
 (let ((?x26400 (- (- ?x26394 (* (* 1.0 l_0_10_47) l_0_10_47)) (* (* 1.0 l_0_10_48) l_0_10_48))))
 (let ((?x26419 (+ (+ (+ (+ (+ (+ (+ ?x26400 ?x26402) ?x26405) ?x26408) ?x26410) ?x26413) ?x26415) (* 1.0 (* l_0_10_67 l_0_10_67)))))
 (let ((?x26425 (+ (+ ?x26419 (* 1.0 (* l_0_10_68 l_0_10_68))) (* 1.0 (* l_0_10_69 l_0_10_69)))))
 (= (- ?x26425 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25910 (* l_0_10_66 l_0_10_66)))
 (let ((?x26415 (* 3.0 ?x25910)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x26541 (* ?x26050 l_0_10_68)))
 (let ((?x25907 (* l_0_10_65 l_0_10_65)))
 (let ((?x26410 (* 3.0 ?x25907)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x26538 (* ?x26046 l_0_10_67)))
 (let ((?x26390 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x26535 (* ?x26042 l_0_10_47)))
 (let ((?x26384 (* (* 3.0 l_0_10_44) l_0_10_44)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x26532 (* ?x26038 l_0_10_46)))
 (let ((?x25898 (* l_0_10_3 l_0_10_3)))
 (let ((?x25899 (* 6.0 ?x25898)))
 (let ((?x26035 (* 12.0 l_0_10_3)))
 (let ((?x26375 (* ?x26035 l_0_10_5)))
 (let ((?x25892 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x26358 (* ?x26026 l_0_10_26)))
 (let ((?x25885 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x26350 (* ?x26017 l_0_10_25)))
 (let ((?x25877 (* l_0_10_2 l_0_10_2)))
 (let ((?x25878 (* 6.0 ?x25877)))
 (let ((?x26008 (* 12.0 l_0_10_2)))
 (let ((?x26342 (* ?x26008 l_0_10_4)))
 (let ((?x26509 (- (+ (* l_0_10_128 l_0_10_128) (* l_0_10_129 l_0_10_129)) (* (* 2.0 l_0_10_191) l_0_10_193))))
 (let ((?x26515 (- (+ (+ (- ?x26509 (* (* 2.0 l_0_10_192) l_0_10_194)) ?x26342) ?x25878) (* (* 2.0 l_0_10_212) l_0_10_214))))
 (let ((?x26521 (- (- (- (- ?x26515 (* (* 2.0 l_0_10_213) l_0_10_215)) ?x26350) ?x25885) (* (* 2.0 l_0_10_233) l_0_10_235))))
 (let ((?x26527 (- (- (- (- ?x26521 (* (* 2.0 l_0_10_234) l_0_10_236)) ?x26358) ?x25892) (* (* 2.0 l_0_10_254) l_0_10_256))))
 (let ((?x26533 (- (+ (+ (- ?x26527 (* (* 2.0 l_0_10_255) l_0_10_257)) ?x26375) ?x25899) ?x26532)))
 (let ((?x26543 (+ (+ (+ (+ (- (- (- ?x26533 ?x26384) ?x26535) ?x26390) ?x26538) ?x26410) ?x26541) ?x26415)))
 (= (- ?x26543 9.0) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_10_1) l_0_10_1) (* l_0_10_22 l_0_10_22)) 0.0))
(assert
 (let ((?x26131 (* l_0_10_64 l_0_10_64)))
 (let ((?x26602 (* 3.0 ?x26131)))
 (let ((?x26122 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x26594 (* l_0_10_127 l_0_10_127)))
 (let ((?x26111 (* l_0_10_1 l_0_10_1)))
 (let ((?x26112 (* 6.0 ?x26111)))
 (let ((?x26597 (+ (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_4) ?x26112) ?x26594) (* (* 2.0 l_0_10_22) l_0_10_25))))
 (= (+ (- (- ?x26597 ?x26122) (* (* 3.0 l_0_10_43) l_0_10_43)) ?x26602) 0.0)))))))))
(assert
 (let ((?x26131 (* l_0_10_64 l_0_10_64)))
 (let ((?x26146 (* l_0_10_43 l_0_10_43)))
 (let ((?x26615 (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) (* (* 2.0 l_0_10_22) l_0_10_28))))
 (= (- (+ ?x26615 ?x26146) ?x26131) 0.0)))))
(assert
 (let ((?x26629 (+ (- (* (* (- 2.0) l_0_10_1) l_0_10_11) (* l_0_10_127 l_0_10_127)) (* (* 2.0 l_0_10_22) l_0_10_32))))
 (= ?x26629 0.0)))
(assert
 (let ((?x26650 (* l_0_10_85 l_0_10_85)))
 (let ((?x26646 (* l_0_10_169 l_0_10_169)))
 (let ((?x26644 (* l_0_10_148 l_0_10_148)))
 (let ((?x26645 (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) (* l_0_10_106 l_0_10_106)) ?x26644)))
 (= (- (+ (- ?x26645 ?x26646) (* (* 2.0 l_0_10_22) l_0_10_37)) ?x26650) 0.0))))))
(assert
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26688 (* ?x25971 l_0_10_67)))
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x26686 (* ?x26685 l_0_10_65)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26683 (* ?x25968 l_0_10_46)))
 (let ((?x26680 (* 6.0 l_0_10_43)))
 (let ((?x26681 (* ?x26680 l_0_10_44)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26668 (* ?x25956 l_0_10_25)))
 (let ((?x25957 (* ?x25956 l_0_10_23)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x13086 (* ?x13477 l_0_10_128)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13469 (* ?x25946 l_0_10_4)))
 (let ((?x25947 (* ?x25946 l_0_10_2)))
 (let ((?x13484 (- (- (+ (+ ?x25947 ?x13469) ?x13086) (* (* 2.0 l_0_10_190) l_0_10_193)) (* (* 2.0 l_0_10_2) l_0_10_4))))
 (let ((?x26671 (+ (- (- (- ?x13484 (* (* 2.0 l_0_10_211) l_0_10_214)) ?x25957) ?x26668) (* (* 2.0 l_0_10_23) l_0_10_25))))
 (let ((?x26675 (+ (- ?x26671 (* (* 2.0 l_0_10_232) l_0_10_235)) (* (* 2.0 l_0_10_24) l_0_10_26))))
 (let ((?x26679 (- (- ?x26675 (* (* 2.0 l_0_10_253) l_0_10_256)) (* (* 2.0 l_0_10_3) l_0_10_5))))
 (= (+ (+ (- (- ?x26679 ?x26681) ?x26683) ?x26686) ?x26688) 0.0))))))))))))))))))))))
(assert
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26767 (* ?x25971 l_0_10_74)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26765 (* ?x25968 l_0_10_53)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26755 (* ?x25956 l_0_10_32)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x13086 (* ?x13477 l_0_10_128)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13526 (* ?x25946 l_0_10_11)))
 (let ((?x26749 (- (- ?x13526 (* (* 2.0 l_0_10_11) l_0_10_2)) (* (* 2.0 l_0_10_12) l_0_10_3))))
 (let ((?x26754 (- (- (- ?x26749 ?x13086) (* (* 2.0 l_0_10_190) l_0_10_200)) (* (* 2.0 l_0_10_211) l_0_10_221))))
 (let ((?x26760 (- (+ (- ?x26754 ?x26755) (* (* 2.0 l_0_10_23) l_0_10_32)) (* (* 2.0 l_0_10_232) l_0_10_242))))
 (let ((?x26764 (- (+ ?x26760 (* (* 2.0 l_0_10_24) l_0_10_33)) (* (* 2.0 l_0_10_253) l_0_10_263))))
 (= (+ (- ?x26764 ?x26765) ?x26767) 0.0))))))))))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x26840 (* ?x26839 l_0_10_86)))
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26837 (* ?x25971 l_0_10_79)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26835 (* ?x25968 l_0_10_58)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26825 (* ?x25956 l_0_10_37)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x26816 (* ?x26815 l_0_10_170)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x26810 (* ?x26809 l_0_10_149)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13567 (* ?x25946 l_0_10_16)))
 (let ((?x26814 (- (+ (+ ?x13567 (* (* 2.0 l_0_10_106) l_0_10_107)) ?x26810) (* (* 2.0 l_0_10_16) l_0_10_2))))
 (let ((?x26822 (- (- (- ?x26814 ?x26816) (* (* 2.0 l_0_10_17) l_0_10_3)) (* (* 2.0 l_0_10_190) l_0_10_205))))
 (let ((?x26828 (+ (- (- ?x26822 (* (* 2.0 l_0_10_211) l_0_10_226)) ?x26825) (* (* 2.0 l_0_10_23) l_0_10_37))))
 (let ((?x26832 (+ (- ?x26828 (* (* 2.0 l_0_10_232) l_0_10_247)) (* (* 2.0 l_0_10_24) l_0_10_38))))
 (let ((?x26841 (- (+ (- (- ?x26832 (* (* 2.0 l_0_10_253) l_0_10_268)) ?x26835) ?x26837) ?x26840)))
 (= ?x26841 0.0)))))))))))))))))))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x26914 (* ?x26685 l_0_10_67)))
 (let ((?x26686 (* ?x26685 l_0_10_65)))
 (let ((?x26404 (* l_0_10_6 l_0_10_6)))
 (let ((?x26401 (* l_0_10_5 l_0_10_5)))
 (let ((?x26680 (* 6.0 l_0_10_43)))
 (let ((?x26909 (* ?x26680 l_0_10_46)))
 (let ((?x26681 (* ?x26680 l_0_10_44)))
 (let ((?x26377 (* l_0_10_4 l_0_10_4)))
 (let ((?x13347 (* l_0_10_27 l_0_10_27)))
 (let ((?x26453 (* l_0_10_26 l_0_10_26)))
 (let ((?x13316 (* l_0_10_25 l_0_10_25)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26668 (* ?x25956 l_0_10_25)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x26901 (* ?x13477 l_0_10_130)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13469 (* ?x25946 l_0_10_4)))
 (let ((?x26908 (- (- (+ (+ (+ (- (+ ?x13469 ?x26901) ?x26668) ?x13316) ?x26453) ?x13347) ?x26377) ?x26681)))
 (= (+ (+ (- (- (- ?x26908 ?x26909) ?x26401) ?x26404) ?x26686) ?x26914) 0.0)))))))))))))))))))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x26958 (* ?x26685 l_0_10_70)))
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26688 (* ?x25971 l_0_10_67)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26683 (* ?x25968 l_0_10_46)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26161 (* ?x25956 l_0_10_28)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x26933 (* ?x13477 l_0_10_133)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x26152 (* ?x25946 l_0_10_7)))
 (let ((?x26941 (+ (+ (- (+ ?x26152 ?x26933) ?x26161) (* (* 2.0 l_0_10_25) l_0_10_28)) (* (* 2.0 l_0_10_26) l_0_10_29))))
 (let ((?x26947 (- (+ ?x26941 (* (* 2.0 l_0_10_27) l_0_10_30)) (* (* 2.0 l_0_10_4) l_0_10_7))))
 (let ((?x26953 (- (- (+ ?x26947 ?x26683) (* (* 6.0 l_0_10_43) l_0_10_49)) (* (* 2.0 l_0_10_5) l_0_10_8))))
 (= (+ (- (- ?x26953 (* (* 2.0 l_0_10_6) l_0_10_9)) ?x26688) ?x26958) 0.0)))))))))))))))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x27014 (* ?x26685 l_0_10_74)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26755 (* ?x25956 l_0_10_32)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x27000 (* ?x13477 l_0_10_137)))
 (let ((?x26901 (* ?x13477 l_0_10_130)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13526 (* ?x25946 l_0_10_11)))
 (let ((?x26998 (- (- ?x13526 (* (* 2.0 l_0_10_11) l_0_10_4)) (* (* 2.0 l_0_10_12) l_0_10_5))))
 (let ((?x27005 (- (- (+ (- ?x26998 ?x26901) ?x27000) (* (* 2.0 l_0_10_13) l_0_10_6)) ?x26755)))
 (let ((?x27009 (+ (+ ?x27005 (* (* 2.0 l_0_10_25) l_0_10_32)) (* (* 2.0 l_0_10_26) l_0_10_33))))
 (let ((?x27013 (- (+ ?x27009 (* (* 2.0 l_0_10_27) l_0_10_34)) (* (* 6.0 l_0_10_43) l_0_10_53))))
 (= (+ ?x27013 ?x27014) 0.0)))))))))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27066 (* ?x26839 l_0_10_88)))
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x27064 (* ?x26685 l_0_10_79)))
 (let ((?x25956 (* 12.0 l_0_10_22)))
 (let ((?x26825 (* ?x25956 l_0_10_37)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27048 (* ?x26815 l_0_10_172)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27044 (* ?x26809 l_0_10_151)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x27042 (* ?x13477 l_0_10_142)))
 (let ((?x25946 (* 12.0 l_0_10_1)))
 (let ((?x13567 (* ?x25946 l_0_10_16)))
 (let ((?x27047 (- (+ (+ (+ ?x13567 (* (* 2.0 l_0_10_106) l_0_10_109)) ?x27042) ?x27044) (* (* 2.0 l_0_10_16) l_0_10_4))))
 (let ((?x27054 (- (- (- ?x27047 ?x27048) (* (* 2.0 l_0_10_17) l_0_10_5)) (* (* 2.0 l_0_10_18) l_0_10_6))))
 (let ((?x27059 (+ (+ (- ?x27054 ?x26825) (* (* 2.0 l_0_10_25) l_0_10_37)) (* (* 2.0 l_0_10_26) l_0_10_38))))
 (let ((?x27063 (- (+ ?x27059 (* (* 2.0 l_0_10_27) l_0_10_39)) (* (* 6.0 l_0_10_43) l_0_10_58))))
 (= (- (+ ?x27063 ?x27064) ?x27066) 0.0))))))))))))))))))))
(assert
 (let ((?x26289 (* l_0_10_9 l_0_10_9)))
 (let ((?x26286 (* l_0_10_8 l_0_10_8)))
 (let ((?x26271 (* l_0_10_7 l_0_10_7)))
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26180 (* ?x25971 l_0_10_70)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26177 (* ?x25968 l_0_10_49)))
 (let ((?x13255 (* l_0_10_31 l_0_10_31)))
 (let ((?x13176 (* l_0_10_30 l_0_10_30)))
 (let ((?x13170 (* l_0_10_29 l_0_10_29)))
 (let ((?x27120 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_28 l_0_10_28)) ?x13170)))
 (let ((?x27127 (- (- (- (- (+ (+ (+ ?x27120 ?x13176) ?x13255) ?x26177) ?x26180) ?x26271) ?x26286) ?x26289)))
 (= ?x27127 0.0))))))))))))))
(assert
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26767 (* ?x25971 l_0_10_74)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26765 (* ?x25968 l_0_10_53)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x26933 (* ?x13477 l_0_10_133)))
 (let ((?x13719 (- (* (* (- 2.0) l_0_10_10) l_0_10_14) (* (* 2.0 l_0_10_11) l_0_10_7))))
 (let ((?x13725 (- (- (- ?x13719 (* (* 2.0 l_0_10_12) l_0_10_8)) ?x26933) (* (* 2.0 l_0_10_13) l_0_10_9))))
 (let ((?x27143 (+ (+ ?x13725 (* (* 2.0 l_0_10_28) l_0_10_32)) (* (* 2.0 l_0_10_29) l_0_10_33))))
 (let ((?x27149 (+ (+ ?x27143 (* (* 2.0 l_0_10_30) l_0_10_34)) (* (* 2.0 l_0_10_31) l_0_10_35))))
 (= (- (+ ?x27149 ?x26765) ?x26767) 0.0))))))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27206 (* ?x26839 l_0_10_91)))
 (let ((?x25971 (* 2.0 l_0_10_64)))
 (let ((?x26837 (* ?x25971 l_0_10_79)))
 (let ((?x25968 (* 2.0 l_0_10_43)))
 (let ((?x26835 (* ?x25968 l_0_10_58)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27190 (* ?x26815 l_0_10_175)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27186 (* ?x26809 l_0_10_154)))
 (let ((?x27185 (+ (* (* (- 2.0) l_0_10_10) l_0_10_19) (* (* 2.0 l_0_10_106) l_0_10_112))))
 (let ((?x27193 (- (- (- (+ ?x27185 ?x27186) (* (* 2.0 l_0_10_16) l_0_10_7)) ?x27190) (* (* 2.0 l_0_10_17) l_0_10_8))))
 (let ((?x27197 (+ (- ?x27193 (* (* 2.0 l_0_10_18) l_0_10_9)) (* (* 2.0 l_0_10_28) l_0_10_37))))
 (let ((?x27201 (+ (+ ?x27197 (* (* 2.0 l_0_10_29) l_0_10_38)) (* (* 2.0 l_0_10_30) l_0_10_39))))
 (let ((?x27207 (- (- (+ (+ ?x27201 (* (* 2.0 l_0_10_31) l_0_10_40)) ?x26835) ?x26837) ?x27206)))
 (= ?x27207 0.0)))))))))))))))))
(assert
 (let ((?x27262 (* l_0_10_36 l_0_10_36)))
 (let ((?x27260 (* l_0_10_35 l_0_10_35)))
 (let ((?x27258 (* l_0_10_34 l_0_10_34)))
 (let ((?x27256 (* l_0_10_33 l_0_10_33)))
 (let ((?x27254 (* l_0_10_32 l_0_10_32)))
 (let ((?x27252 (* l_0_10_15 l_0_10_15)))
 (let ((?x27250 (* l_0_10_14 l_0_10_14)))
 (let ((?x27248 (* l_0_10_13 l_0_10_13)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x27000 (* ?x13477 l_0_10_137)))
 (let ((?x27247 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x27000)))
 (let ((?x27261 (+ (+ (+ (+ (- (- (- ?x27247 ?x27248) ?x27250) ?x27252) ?x27254) ?x27256) ?x27258) ?x27260)))
 (= (+ ?x27261 ?x27262) 0.0))))))))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27310 (* ?x26839 l_0_10_95)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27293 (* ?x26815 l_0_10_179)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27288 (* ?x26809 l_0_10_158)))
 (let ((?x13477 (* 2.0 l_0_10_127)))
 (let ((?x27042 (* ?x13477 l_0_10_142)))
 (let ((?x27279 (- (* (* 2.0 l_0_10_106) l_0_10_116) (* (* 2.0 l_0_10_11) l_0_10_16))))
 (let ((?x27284 (- (- (- ?x27279 (* (* 2.0 l_0_10_12) l_0_10_17)) ?x27042) (* (* 2.0 l_0_10_13) l_0_10_18))))
 (let ((?x27292 (- (+ (- ?x27284 (* (* 2.0 l_0_10_14) l_0_10_19)) ?x27288) (* (* 2.0 l_0_10_15) l_0_10_20))))
 (let ((?x27300 (+ (+ (- ?x27292 ?x27293) (* (* 2.0 l_0_10_32) l_0_10_37)) (* (* 2.0 l_0_10_33) l_0_10_38))))
 (let ((?x27306 (+ (+ ?x27300 (* (* 2.0 l_0_10_34) l_0_10_39)) (* (* 2.0 l_0_10_35) l_0_10_40))))
 (= (- (+ ?x27306 (* (* 2.0 l_0_10_36) l_0_10_41)) ?x27310) 0.0)))))))))))))))
(assert
 (let ((?x27383 (* l_0_10_42 l_0_10_42)))
 (let ((?x27381 (* l_0_10_41 l_0_10_41)))
 (let ((?x27379 (* l_0_10_40 l_0_10_40)))
 (let ((?x27377 (* l_0_10_39 l_0_10_39)))
 (let ((?x27375 (* l_0_10_38 l_0_10_38)))
 (let ((?x27373 (* l_0_10_37 l_0_10_37)))
 (let ((?x27371 (* l_0_10_21 l_0_10_21)))
 (let ((?x27369 (* l_0_10_20 l_0_10_20)))
 (let ((?x27367 (* l_0_10_19 l_0_10_19)))
 (let ((?x27365 (* l_0_10_18 l_0_10_18)))
 (let ((?x27363 (* l_0_10_17 l_0_10_17)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27361 (* ?x26815 l_0_10_184)))
 (let ((?x27359 (* l_0_10_16 l_0_10_16)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27357 (* ?x26809 l_0_10_163)))
 (let ((?x26800 (* 2.0 l_0_10_106)))
 (let ((?x27355 (* ?x26800 l_0_10_121)))
 (let ((?x27362 (- (- (+ (+ (* (* (- 2.0) l_0_10_100) l_0_10_85) ?x27355) ?x27357) ?x27359) ?x27361)))
 (let ((?x27376 (+ (+ (- (- (- (- (- ?x27362 ?x27363) ?x27365) ?x27367) ?x27369) ?x27371) ?x27373) ?x27375)))
 (= (+ (+ (+ (+ ?x27376 ?x27377) ?x27379) ?x27381) ?x27383) 0.0))))))))))))))))))))))
(assert
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27507 (* ?x27506 l_0_10_72)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27504 (* ?x27503 l_0_10_71)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27501 (* ?x27500 l_0_10_70)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27498 (* ?x26412 l_0_10_71)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x26541 (* ?x26050 l_0_10_68)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27495 (* ?x26407 l_0_10_70)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x26538 (* ?x26046 l_0_10_67)))
 (let ((?x27492 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x27489 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27486 (* ?x27485 l_0_10_51)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27483 (* ?x27482 l_0_10_50)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27480 (* ?x27479 l_0_10_49)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27477 (* ?x26386 l_0_10_50)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x26535 (* ?x26042 l_0_10_47)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27474 (* ?x26380 l_0_10_49)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x26532 (* ?x26038 l_0_10_46)))
 (let ((?x27471 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x26035 (* 12.0 l_0_10_3)))
 (let ((?x26036 (* ?x26035 l_0_10_8)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27467 (* ?x27466 l_0_10_30)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27464 (* ?x27463 l_0_10_29)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27452 (* ?x27451 l_0_10_28)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x26027 (* ?x26026 l_0_10_29)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x26018 (* ?x26017 l_0_10_28)))
 (let ((?x26008 (* 12.0 l_0_10_2)))
 (let ((?x26009 (* ?x26008 l_0_10_7)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x27419 (* ?x26333 l_0_10_134)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x27407 (* ?x13288 l_0_10_133)))
 (let ((?x27426 (- (- (+ ?x27407 ?x27419) (* (* 2.0 l_0_10_193) l_0_10_196)) (* (* 2.0 l_0_10_194) l_0_10_197))))
 (let ((?x27433 (- (+ (- ?x27426 (* (* 2.0 l_0_10_195) l_0_10_198)) ?x26009) (* (* 2.0 l_0_10_214) l_0_10_217))))
 (let ((?x27439 (- (- ?x27433 (* (* 2.0 l_0_10_215) l_0_10_218)) (* (* 2.0 l_0_10_216) l_0_10_219))))
 (let ((?x27446 (- (- (- ?x27439 ?x26018) (* (* 2.0 l_0_10_235) l_0_10_238)) (* (* 2.0 l_0_10_236) l_0_10_239))))
 (let ((?x27456 (- (- (- (- ?x27446 (* (* 2.0 l_0_10_237) l_0_10_240)) ?x26027) ?x27452) (* (* 2.0 l_0_10_256) l_0_10_259))))
 (let ((?x27462 (- (- ?x27456 (* (* 2.0 l_0_10_257) l_0_10_260)) (* (* 2.0 l_0_10_258) l_0_10_261))))
 (let ((?x27476 (+ (- (+ (+ (+ (- (- ?x27462 ?x27464) ?x27467) ?x26036) ?x27471) ?x26532) ?x27474) ?x26535)))
 (let ((?x27494 (- (+ (+ (- (- (- (- ?x27476 ?x27477) ?x27480) ?x27483) ?x27486) ?x27489) ?x27492) ?x26538)))
 (= (+ (+ (+ (+ (- (+ ?x27494 ?x27495) ?x26541) ?x27498) ?x27501) ?x27504) ?x27507) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27628 (* ?x27506 l_0_10_76)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27626 (* ?x27503 l_0_10_75)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27624 (* ?x27500 l_0_10_74)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27622 (* ?x26412 l_0_10_75)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27620 (* ?x26407 l_0_10_74)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27618 (* ?x27485 l_0_10_55)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27616 (* ?x27482 l_0_10_54)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27614 (* ?x27479 l_0_10_53)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27612 (* ?x26386 l_0_10_54)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27610 (* ?x26380 l_0_10_53)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27608 (* ?x27466 l_0_10_34)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27606 (* ?x27463 l_0_10_33)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27598 (* ?x27451 l_0_10_32)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x27596 (* ?x26026 l_0_10_33)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x27588 (* ?x26017 l_0_10_32)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x27574 (* ?x27573 l_0_10_6)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x27571 (* ?x26333 l_0_10_138)))
 (let ((?x26334 (* ?x26333 l_0_10_131)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x27568 (* ?x13288 l_0_10_137)))
 (let ((?x26332 (* ?x13288 l_0_10_130)))
 (let ((?x27562 (* 12.0 l_0_10_12)))
 (let ((?x27565 (* ?x27562 l_0_10_5)))
 (let ((?x27563 (* ?x27562 l_0_10_3)))
 (let ((?x27558 (* 12.0 l_0_10_11)))
 (let ((?x27560 (* ?x27558 l_0_10_4)))
 (let ((?x27559 (* ?x27558 l_0_10_2)))
 (let ((?x27572 (+ (- (+ (- (+ (+ (+ ?x27559 ?x27560) ?x27563) ?x27565) ?x26332) ?x27568) ?x26334) ?x27571)))
 (let ((?x27579 (- (- (+ ?x27572 ?x27574) (* (* 2.0 l_0_10_193) l_0_10_200)) (* (* 2.0 l_0_10_194) l_0_10_201))))
 (let ((?x27583 (- (- ?x27579 (* (* 2.0 l_0_10_195) l_0_10_202)) (* (* 2.0 l_0_10_214) l_0_10_221))))
 (let ((?x27587 (- (- ?x27583 (* (* 2.0 l_0_10_215) l_0_10_222)) (* (* 2.0 l_0_10_216) l_0_10_223))))
 (let ((?x27593 (- (- (- ?x27587 ?x27588) (* (* 2.0 l_0_10_235) l_0_10_242)) (* (* 2.0 l_0_10_236) l_0_10_243))))
 (let ((?x27601 (- (- (- (- ?x27593 (* (* 2.0 l_0_10_237) l_0_10_244)) ?x27596) ?x27598) (* (* 2.0 l_0_10_256) l_0_10_263))))
 (let ((?x27605 (- (- ?x27601 (* (* 2.0 l_0_10_257) l_0_10_264)) (* (* 2.0 l_0_10_258) l_0_10_265))))
 (let ((?x27619 (- (- (- (- (- (- (- ?x27605 ?x27606) ?x27608) ?x27610) ?x27612) ?x27614) ?x27616) ?x27618)))
 (= (+ (+ (+ (+ (+ ?x27619 ?x27620) ?x27622) ?x27624) ?x27626) ?x27628) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x27743 (* ?x27742 l_0_10_89)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x27740 (* ?x27739 l_0_10_88)))
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27737 (* ?x27506 l_0_10_81)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27735 (* ?x27503 l_0_10_80)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27733 (* ?x27500 l_0_10_79)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27731 (* ?x26412 l_0_10_80)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27729 (* ?x26407 l_0_10_79)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27727 (* ?x27485 l_0_10_60)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27725 (* ?x27482 l_0_10_59)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27723 (* ?x27479 l_0_10_58)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27721 (* ?x26386 l_0_10_59)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27719 (* ?x26380 l_0_10_58)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27717 (* ?x27466 l_0_10_39)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27715 (* ?x27463 l_0_10_38)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27707 (* ?x27451 l_0_10_37)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x27705 (* ?x26026 l_0_10_38)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x27697 (* ?x26017 l_0_10_37)))
 (let ((?x27682 (* 12.0 l_0_10_18)))
 (let ((?x27683 (* ?x27682 l_0_10_6)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x27680 (* ?x27679 l_0_10_173)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x27677 (* ?x27676 l_0_10_172)))
 (let ((?x27671 (* 12.0 l_0_10_17)))
 (let ((?x27674 (* ?x27671 l_0_10_5)))
 (let ((?x27672 (* ?x27671 l_0_10_3)))
 (let ((?x27666 (* 12.0 l_0_10_16)))
 (let ((?x27669 (* ?x27666 l_0_10_4)))
 (let ((?x27667 (* ?x27666 l_0_10_2)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x14435 (* ?x14432 l_0_10_152)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x14437 (* ?x14431 l_0_10_151)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x14419 (* ?x26333 l_0_10_143)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x14367 (* ?x13288 l_0_10_142)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x14355 (* ?x14533 l_0_10_110)))
 (let ((?x14438 (+ (+ (+ (+ (* (* 2.0 l_0_10_107) l_0_10_109) ?x14355) ?x14367) ?x14419) ?x14437)))
 (let ((?x27681 (- (- (+ (+ (+ (+ (+ ?x14438 ?x14435) ?x27667) ?x27669) ?x27672) ?x27674) ?x27677) ?x27680)))
 (let ((?x27688 (- (- (+ ?x27681 ?x27683) (* (* 2.0 l_0_10_193) l_0_10_205)) (* (* 2.0 l_0_10_194) l_0_10_206))))
 (let ((?x27692 (- (- ?x27688 (* (* 2.0 l_0_10_195) l_0_10_207)) (* (* 2.0 l_0_10_214) l_0_10_226))))
 (let ((?x27696 (- (- ?x27692 (* (* 2.0 l_0_10_215) l_0_10_227)) (* (* 2.0 l_0_10_216) l_0_10_228))))
 (let ((?x27702 (- (- (- ?x27696 ?x27697) (* (* 2.0 l_0_10_235) l_0_10_247)) (* (* 2.0 l_0_10_236) l_0_10_248))))
 (let ((?x27710 (- (- (- (- ?x27702 (* (* 2.0 l_0_10_237) l_0_10_249)) ?x27705) ?x27707) (* (* 2.0 l_0_10_256) l_0_10_268))))
 (let ((?x27714 (- (- ?x27710 (* (* 2.0 l_0_10_257) l_0_10_269)) (* (* 2.0 l_0_10_258) l_0_10_270))))
 (let ((?x27728 (- (- (- (- (- (- (- ?x27714 ?x27715) ?x27717) ?x27719) ?x27721) ?x27723) ?x27725) ?x27727)))
 (let ((?x27744 (- (- (+ (+ (+ (+ (+ ?x27728 ?x27729) ?x27731) ?x27733) ?x27735) ?x27737) ?x27740) ?x27743)))
 (= ?x27744 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27930 (* l_0_10_87 l_0_10_87)))
 (let ((?x27928 (* l_0_10_86 l_0_10_86)))
 (let ((?x26423 (* l_0_10_69 l_0_10_69)))
 (let ((?x27926 (* 3.0 ?x26423)))
 (let ((?x26420 (* l_0_10_68 l_0_10_68)))
 (let ((?x27924 (* 3.0 ?x26420)))
 (let ((?x26417 (* l_0_10_67 l_0_10_67)))
 (let ((?x27922 (* 3.0 ?x26417)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x26413 (* ?x26412 l_0_10_68)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x26408 (* ?x26407 l_0_10_67)))
 (let ((?x26404 (* l_0_10_6 l_0_10_6)))
 (let ((?x26405 (* 6.0 ?x26404)))
 (let ((?x26401 (* l_0_10_5 l_0_10_5)))
 (let ((?x26402 (* 6.0 ?x26401)))
 (let ((?x27916 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x27913 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x27910 (* (* 3.0 l_0_10_46) l_0_10_46)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x26387 (* ?x26386 l_0_10_47)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x26381 (* ?x26380 l_0_10_46)))
 (let ((?x26377 (* l_0_10_4 l_0_10_4)))
 (let ((?x26378 (* 6.0 ?x26377)))
 (let ((?x26373 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x26370 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x26361 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x27901 (* l_0_10_171 l_0_10_171)))
 (let ((?x27899 (* l_0_10_170 l_0_10_170)))
 (let ((?x27897 (* l_0_10_150 l_0_10_150)))
 (let ((?x27895 (* l_0_10_149 l_0_10_149)))
 (let ((?x27893 (* l_0_10_132 l_0_10_132)))
 (let ((?x27891 (* l_0_10_131 l_0_10_131)))
 (let ((?x27889 (* l_0_10_130 l_0_10_130)))
 (let ((?x27890 (+ (- (* (- l_0_10_107) l_0_10_107) (* l_0_10_108 l_0_10_108)) ?x27889)))
 (let ((?x27903 (- (+ (+ (- (- (+ (+ ?x27890 ?x27891) ?x27893) ?x27895) ?x27897) ?x27899) ?x27901) ?x26361)))
 (let ((?x27914 (- (- (- (- (+ (- (- ?x27903 ?x26370) ?x26373) ?x26378) ?x26381) ?x26387) ?x27910) ?x27913)))
 (let ((?x27925 (+ (+ (+ (+ (+ (+ (- ?x27914 ?x27916) ?x26402) ?x26405) ?x26408) ?x26413) ?x27922) ?x27924)))
 (= (+ (+ (+ ?x27925 ?x27926) ?x27928) ?x27930) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26423 (* l_0_10_69 l_0_10_69)))
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x27993 (* ?x27992 l_0_10_72)))
 (let ((?x26420 (* l_0_10_68 l_0_10_68)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x27989 (* ?x27988 l_0_10_71)))
 (let ((?x26417 (* l_0_10_67 l_0_10_67)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x27985 (* ?x27984 l_0_10_70)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27498 (* ?x26412 l_0_10_71)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27495 (* ?x26407 l_0_10_70)))
 (let ((?x27492 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x27489 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x26481 (* l_0_10_48 l_0_10_48)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x27977 (* ?x27976 l_0_10_51)))
 (let ((?x26477 (* l_0_10_47 l_0_10_47)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x27973 (* ?x27972 l_0_10_50)))
 (let ((?x13396 (* l_0_10_46 l_0_10_46)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x27969 (* ?x27968 l_0_10_49)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27477 (* ?x26386 l_0_10_50)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27474 (* ?x26380 l_0_10_49)))
 (let ((?x27471 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27467 (* ?x27466 l_0_10_30)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27464 (* ?x27463 l_0_10_29)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27452 (* ?x27451 l_0_10_28)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x27960 (* ?x27959 l_0_10_135)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x27957 (* ?x27956 l_0_10_134)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x27955 (* ?x14734 l_0_10_133)))
 (let ((?x27966 (- (+ (- (- (- (+ (+ ?x27955 ?x27957) ?x27960) ?x27452) ?x27464) ?x27467) ?x27471) ?x27474)))
 (let ((?x27979 (+ (- (+ (- (+ (- (- ?x27966 ?x27477) ?x27969) ?x13396) ?x27973) ?x26477) ?x27977) ?x26481)))
 (let ((?x27990 (+ (- (+ (+ (+ (+ (+ ?x27979 ?x27489) ?x27492) ?x27495) ?x27498) ?x27985) ?x26417) ?x27989)))
 (= (- (+ (- ?x27990 ?x26420) ?x27993) ?x26423) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x28072 (* ?x27992 l_0_10_76)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x28070 (* ?x27988 l_0_10_75)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x28068 (* ?x27984 l_0_10_74)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27622 (* ?x26412 l_0_10_75)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27620 (* ?x26407 l_0_10_74)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x28064 (* ?x27976 l_0_10_55)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x28062 (* ?x27972 l_0_10_54)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x28060 (* ?x27968 l_0_10_53)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27612 (* ?x26386 l_0_10_54)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27610 (* ?x26380 l_0_10_53)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27608 (* ?x27466 l_0_10_34)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27606 (* ?x27463 l_0_10_33)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27598 (* ?x27451 l_0_10_32)))
 (let ((?x27893 (* l_0_10_132 l_0_10_132)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x28052 (* ?x27959 l_0_10_139)))
 (let ((?x27891 (* l_0_10_131 l_0_10_131)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x28049 (* ?x27956 l_0_10_138)))
 (let ((?x27889 (* l_0_10_130 l_0_10_130)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x28046 (* ?x14734 l_0_10_137)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x27574 (* ?x27573 l_0_10_6)))
 (let ((?x27562 (* 12.0 l_0_10_12)))
 (let ((?x27565 (* ?x27562 l_0_10_5)))
 (let ((?x27558 (* 12.0 l_0_10_11)))
 (let ((?x27560 (* ?x27558 l_0_10_4)))
 (let ((?x28053 (+ (- (+ (- (+ (+ (+ ?x27560 ?x27565) ?x27574) ?x28046) ?x27889) ?x28049) ?x27891) ?x28052)))
 (let ((?x28061 (- (- (- (- (- (- (- ?x28053 ?x27893) ?x27598) ?x27606) ?x27608) ?x27610) ?x27612) ?x28060)))
 (let ((?x28073 (+ (+ (+ (+ (+ (- (- ?x28061 ?x28062) ?x28064) ?x27620) ?x27622) ?x28068) ?x28070) ?x28072)))
 (= ?x28073 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28142 (* l_0_10_90 l_0_10_90)))
 (let ((?x28140 (* l_0_10_89 l_0_10_89)))
 (let ((?x28138 (* l_0_10_88 l_0_10_88)))
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x28136 (* ?x27992 l_0_10_81)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x28134 (* ?x27988 l_0_10_80)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x28132 (* ?x27984 l_0_10_79)))
 (let ((?x26412 (* 6.0 l_0_10_66)))
 (let ((?x27731 (* ?x26412 l_0_10_80)))
 (let ((?x26407 (* 6.0 l_0_10_65)))
 (let ((?x27729 (* ?x26407 l_0_10_79)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x28128 (* ?x27976 l_0_10_60)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x28126 (* ?x27972 l_0_10_59)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x28124 (* ?x27968 l_0_10_58)))
 (let ((?x26386 (* 6.0 l_0_10_45)))
 (let ((?x27721 (* ?x26386 l_0_10_59)))
 (let ((?x26380 (* 6.0 l_0_10_44)))
 (let ((?x27719 (* ?x26380 l_0_10_58)))
 (let ((?x27466 (* 12.0 l_0_10_27)))
 (let ((?x27717 (* ?x27466 l_0_10_39)))
 (let ((?x27463 (* 12.0 l_0_10_26)))
 (let ((?x27715 (* ?x27463 l_0_10_38)))
 (let ((?x27451 (* 12.0 l_0_10_25)))
 (let ((?x27707 (* ?x27451 l_0_10_37)))
 (let ((?x27682 (* 12.0 l_0_10_18)))
 (let ((?x27683 (* ?x27682 l_0_10_6)))
 (let ((?x28116 (* l_0_10_174 l_0_10_174)))
 (let ((?x28114 (* l_0_10_173 l_0_10_173)))
 (let ((?x28112 (* l_0_10_172 l_0_10_172)))
 (let ((?x27671 (* 12.0 l_0_10_17)))
 (let ((?x27674 (* ?x27671 l_0_10_5)))
 (let ((?x27666 (* 12.0 l_0_10_16)))
 (let ((?x27669 (* ?x27666 l_0_10_4)))
 (let ((?x28108 (* l_0_10_153 l_0_10_153)))
 (let ((?x28106 (* l_0_10_152 l_0_10_152)))
 (let ((?x28104 (* l_0_10_151 l_0_10_151)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x28102 (* ?x27959 l_0_10_144)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x28100 (* ?x27956 l_0_10_143)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x28098 (* ?x14734 l_0_10_142)))
 (let ((?x28096 (* l_0_10_111 l_0_10_111)))
 (let ((?x28097 (+ (+ (* l_0_10_109 l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x28096)))
 (let ((?x28110 (+ (+ (+ (+ (+ (+ (+ ?x28097 ?x28098) ?x28100) ?x28102) ?x28104) ?x28106) ?x28108) ?x27669)))
 (let ((?x28120 (- (- (+ (- (- (- (+ ?x28110 ?x27674) ?x28112) ?x28114) ?x28116) ?x27683) ?x27707) ?x27715)))
 (let ((?x28130 (+ (- (- (- (- (- (- ?x28120 ?x27717) ?x27719) ?x27721) ?x28124) ?x28126) ?x28128) ?x27729)))
 (let ((?x28143 (- (- (- (+ (+ (+ (+ ?x28130 ?x27731) ?x28132) ?x28134) ?x28136) ?x28138) ?x28140) ?x28142)))
 (= ?x28143 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26289 (* l_0_10_9 l_0_10_9)))
 (let ((?x26290 (* 6.0 ?x26289)))
 (let ((?x26286 (* l_0_10_8 l_0_10_8)))
 (let ((?x26287 (* 6.0 ?x26286)))
 (let ((?x26283 (* l_0_10_73 l_0_10_73)))
 (let ((?x28238 (* 3.0 ?x26283)))
 (let ((?x26280 (* l_0_10_72 l_0_10_72)))
 (let ((?x28236 (* 3.0 ?x26280)))
 (let ((?x26277 (* l_0_10_71 l_0_10_71)))
 (let ((?x28234 (* 3.0 ?x26277)))
 (let ((?x26274 (* l_0_10_70 l_0_10_70)))
 (let ((?x28232 (* 3.0 ?x26274)))
 (let ((?x26271 (* l_0_10_7 l_0_10_7)))
 (let ((?x26272 (* 6.0 ?x26271)))
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27507 (* ?x27506 l_0_10_72)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27504 (* ?x27503 l_0_10_71)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27501 (* ?x27500 l_0_10_70)))
 (let ((?x28226 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x28223 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x28220 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27486 (* ?x27485 l_0_10_51)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27483 (* ?x27482 l_0_10_50)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27480 (* ?x27479 l_0_10_49)))
 (let ((?x26253 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x26250 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x26247 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x26244 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x28207 (* l_0_10_136 l_0_10_136)))
 (let ((?x28205 (* l_0_10_135 l_0_10_135)))
 (let ((?x28203 (* l_0_10_134 l_0_10_134)))
 (let ((?x28201 (* l_0_10_133 l_0_10_133)))
 (let ((?x26208 (* l_0_10_10 l_0_10_10)))
 (let ((?x26209 (* 6.0 ?x26208)))
 (let ((?x28211 (- (- (- (+ (+ (+ (+ ?x26209 ?x28201) ?x28203) ?x28205) ?x28207) ?x26244) ?x26247) ?x26250)))
 (let ((?x28218 (- (+ (+ (+ (- ?x28211 ?x26253) ?x27480) ?x27483) ?x27486) (* (* 3.0 l_0_10_49) l_0_10_49))))
 (let ((?x28231 (+ (- (- (- (- (- (- ?x28218 ?x28220) ?x28223) ?x28226) ?x27501) ?x27504) ?x27507) ?x26272)))
 (= (+ (+ (+ (+ (+ (+ ?x28231 ?x28232) ?x28234) ?x28236) ?x28238) ?x26287) ?x26290) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28327 (* 6.0 l_0_10_73)))
 (let ((?x28328 (* ?x28327 l_0_10_77)))
 (let ((?x28324 (* 6.0 l_0_10_72)))
 (let ((?x28325 (* ?x28324 l_0_10_76)))
 (let ((?x28321 (* 6.0 l_0_10_71)))
 (let ((?x28322 (* ?x28321 l_0_10_75)))
 (let ((?x28318 (* 6.0 l_0_10_70)))
 (let ((?x28319 (* ?x28318 l_0_10_74)))
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27628 (* ?x27506 l_0_10_76)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27626 (* ?x27503 l_0_10_75)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27624 (* ?x27500 l_0_10_74)))
 (let ((?x28312 (* 6.0 l_0_10_52)))
 (let ((?x28313 (* ?x28312 l_0_10_56)))
 (let ((?x28309 (* 6.0 l_0_10_51)))
 (let ((?x28310 (* ?x28309 l_0_10_55)))
 (let ((?x28306 (* 6.0 l_0_10_50)))
 (let ((?x28307 (* ?x28306 l_0_10_54)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27618 (* ?x27485 l_0_10_55)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27616 (* ?x27482 l_0_10_54)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27614 (* ?x27479 l_0_10_53)))
 (let ((?x28297 (* 12.0 l_0_10_31)))
 (let ((?x28298 (* ?x28297 l_0_10_35)))
 (let ((?x28294 (* 12.0 l_0_10_30)))
 (let ((?x28295 (* ?x28294 l_0_10_34)))
 (let ((?x28291 (* 12.0 l_0_10_29)))
 (let ((?x28292 (* ?x28291 l_0_10_33)))
 (let ((?x28288 (* 12.0 l_0_10_28)))
 (let ((?x28289 (* ?x28288 l_0_10_32)))
 (let ((?x28285 (* 2.0 l_0_10_136)))
 (let ((?x28286 (* ?x28285 l_0_10_140)))
 (let ((?x28282 (* 2.0 l_0_10_135)))
 (let ((?x28283 (* ?x28282 l_0_10_139)))
 (let ((?x28279 (* 2.0 l_0_10_134)))
 (let ((?x28280 (* ?x28279 l_0_10_138)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x27960 (* ?x27959 l_0_10_135)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x27957 (* ?x27956 l_0_10_134)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x27955 (* ?x14734 l_0_10_133)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x28271 (* ?x27573 l_0_10_9)))
 (let ((?x28268 (+ (* (* 12.0 l_0_10_10) l_0_10_14) (* (* 12.0 l_0_10_11) l_0_10_7))))
 (let ((?x28270 (+ ?x28268 (* (* 12.0 l_0_10_12) l_0_10_8))))
 (let ((?x28278 (+ (- (- (- (+ ?x28270 ?x28271) ?x27955) ?x27957) ?x27960) (* (* 2.0 l_0_10_133) l_0_10_137))))
 (let ((?x28299 (- (- (- (- (+ (+ (+ ?x28278 ?x28280) ?x28283) ?x28286) ?x28289) ?x28292) ?x28295) ?x28298)))
 (let ((?x28305 (- (+ (+ (+ ?x28299 ?x27614) ?x27616) ?x27618) (* (* 6.0 l_0_10_49) l_0_10_53))))
 (let ((?x28320 (+ (- (- (- (- (- (- ?x28305 ?x28307) ?x28310) ?x28313) ?x27624) ?x27626) ?x27628) ?x28319)))
 (= (+ (+ (+ ?x28320 ?x28322) ?x28325) ?x28328) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28479 (* 2.0 l_0_10_90)))
 (let ((?x28480 (* ?x28479 l_0_10_93)))
 (let ((?x28476 (* 2.0 l_0_10_89)))
 (let ((?x28477 (* ?x28476 l_0_10_92)))
 (let ((?x28473 (* 2.0 l_0_10_88)))
 (let ((?x28474 (* ?x28473 l_0_10_91)))
 (let ((?x28327 (* 6.0 l_0_10_73)))
 (let ((?x28471 (* ?x28327 l_0_10_82)))
 (let ((?x28324 (* 6.0 l_0_10_72)))
 (let ((?x28469 (* ?x28324 l_0_10_81)))
 (let ((?x28321 (* 6.0 l_0_10_71)))
 (let ((?x28467 (* ?x28321 l_0_10_80)))
 (let ((?x28318 (* 6.0 l_0_10_70)))
 (let ((?x28465 (* ?x28318 l_0_10_79)))
 (let ((?x27506 (* 2.0 l_0_10_69)))
 (let ((?x27737 (* ?x27506 l_0_10_81)))
 (let ((?x27503 (* 2.0 l_0_10_68)))
 (let ((?x27735 (* ?x27503 l_0_10_80)))
 (let ((?x27500 (* 2.0 l_0_10_67)))
 (let ((?x27733 (* ?x27500 l_0_10_79)))
 (let ((?x28312 (* 6.0 l_0_10_52)))
 (let ((?x28460 (* ?x28312 l_0_10_61)))
 (let ((?x28309 (* 6.0 l_0_10_51)))
 (let ((?x28458 (* ?x28309 l_0_10_60)))
 (let ((?x28306 (* 6.0 l_0_10_50)))
 (let ((?x28456 (* ?x28306 l_0_10_59)))
 (let ((?x27485 (* 2.0 l_0_10_48)))
 (let ((?x27727 (* ?x27485 l_0_10_60)))
 (let ((?x27482 (* 2.0 l_0_10_47)))
 (let ((?x27725 (* ?x27482 l_0_10_59)))
 (let ((?x27479 (* 2.0 l_0_10_46)))
 (let ((?x27723 (* ?x27479 l_0_10_58)))
 (let ((?x28297 (* 12.0 l_0_10_31)))
 (let ((?x28449 (* ?x28297 l_0_10_40)))
 (let ((?x28294 (* 12.0 l_0_10_30)))
 (let ((?x28447 (* ?x28294 l_0_10_39)))
 (let ((?x28291 (* 12.0 l_0_10_29)))
 (let ((?x28445 (* ?x28291 l_0_10_38)))
 (let ((?x28288 (* 12.0 l_0_10_28)))
 (let ((?x28443 (* ?x28288 l_0_10_37)))
 (let ((?x27682 (* 12.0 l_0_10_18)))
 (let ((?x28441 (* ?x27682 l_0_10_9)))
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28439 (* ?x28438 l_0_10_177)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28436 (* ?x28435 l_0_10_176)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28433 (* ?x28432 l_0_10_175)))
 (let ((?x27671 (* 12.0 l_0_10_17)))
 (let ((?x28430 (* ?x27671 l_0_10_8)))
 (let ((?x27666 (* 12.0 l_0_10_16)))
 (let ((?x28428 (* ?x27666 l_0_10_7)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28426 (* ?x28425 l_0_10_156)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28423 (* ?x28422 l_0_10_155)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28420 (* ?x28419 l_0_10_154)))
 (let ((?x28285 (* 2.0 l_0_10_136)))
 (let ((?x28417 (* ?x28285 l_0_10_145)))
 (let ((?x28282 (* 2.0 l_0_10_135)))
 (let ((?x28415 (* ?x28282 l_0_10_144)))
 (let ((?x28279 (* 2.0 l_0_10_134)))
 (let ((?x28413 (* ?x28279 l_0_10_143)))
 (let ((?x28276 (* 2.0 l_0_10_133)))
 (let ((?x28411 (* ?x28276 l_0_10_142)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28409 (* ?x28408 l_0_10_114)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x28406 (* ?x28391 l_0_10_113)))
 (let ((?x14906 (* 12.0 l_0_10_10)))
 (let ((?x14955 (* ?x14906 l_0_10_19)))
 (let ((?x28412 (+ (+ (+ (+ ?x14955 (* (* 2.0 l_0_10_109) l_0_10_112)) ?x28406) ?x28409) ?x28411)))
 (let ((?x28429 (+ (+ (+ (+ (+ (+ (+ ?x28412 ?x28413) ?x28415) ?x28417) ?x28420) ?x28423) ?x28426) ?x28428)))
 (let ((?x28446 (- (- (+ (- (- (- (+ ?x28429 ?x28430) ?x28433) ?x28436) ?x28439) ?x28441) ?x28443) ?x28445)))
 (let ((?x28455 (- (+ (+ (+ (- (- ?x28446 ?x28447) ?x28449) ?x27723) ?x27725) ?x27727) (* (* 6.0 l_0_10_49) l_0_10_58))))
 (let ((?x28466 (+ (- (- (- (- (- (- ?x28455 ?x28456) ?x28458) ?x28460) ?x27733) ?x27735) ?x27737) ?x28465)))
 (= (- (- (- (+ (+ (+ ?x28466 ?x28467) ?x28469) ?x28471) ?x28474) ?x28477) ?x28480) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28622 (* l_0_10_78 l_0_10_78)))
 (let ((?x28623 (* 3.0 ?x28622)))
 (let ((?x28619 (* l_0_10_77 l_0_10_77)))
 (let ((?x28620 (* 3.0 ?x28619)))
 (let ((?x28616 (* l_0_10_76 l_0_10_76)))
 (let ((?x28617 (* 3.0 ?x28616)))
 (let ((?x28613 (* l_0_10_75 l_0_10_75)))
 (let ((?x28614 (* 3.0 ?x28613)))
 (let ((?x28610 (* l_0_10_74 l_0_10_74)))
 (let ((?x28611 (* 3.0 ?x28610)))
 (let ((?x28608 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x28605 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x28602 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x28599 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x28593 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x28590 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x28587 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x28584 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x28581 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x27252 (* l_0_10_15 l_0_10_15)))
 (let ((?x28578 (* 6.0 ?x27252)))
 (let ((?x28576 (* l_0_10_141 l_0_10_141)))
 (let ((?x28574 (* l_0_10_140 l_0_10_140)))
 (let ((?x27250 (* l_0_10_14 l_0_10_14)))
 (let ((?x28572 (* 6.0 ?x27250)))
 (let ((?x28570 (* l_0_10_139 l_0_10_139)))
 (let ((?x28568 (* l_0_10_138 l_0_10_138)))
 (let ((?x28566 (* l_0_10_137 l_0_10_137)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x28052 (* ?x27959 l_0_10_139)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x28049 (* ?x27956 l_0_10_138)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x28046 (* ?x14734 l_0_10_137)))
 (let ((?x27248 (* l_0_10_13 l_0_10_13)))
 (let ((?x28561 (* 6.0 ?x27248)))
 (let ((?x27245 (* l_0_10_12 l_0_10_12)))
 (let ((?x28559 (* 6.0 ?x27245)))
 (let ((?x13834 (* l_0_10_11 l_0_10_11)))
 (let ((?x28558 (* 6.0 ?x13834)))
 (let ((?x28560 (+ ?x28558 ?x28559)))
 (let ((?x28571 (+ (+ (+ (- (- (- (+ ?x28560 ?x28561) ?x28046) ?x28049) ?x28052) ?x28566) ?x28568) ?x28570)))
 (let ((?x28588 (- (- (- (+ (+ (+ (+ ?x28571 ?x28572) ?x28574) ?x28576) ?x28578) ?x28581) ?x28584) ?x28587)))
 (let ((?x28600 (- (- (- (- ?x28588 ?x28590) ?x28593) (* (* 3.0 l_0_10_53) l_0_10_53)) ?x28599)))
 (let ((?x28621 (+ (+ (+ (+ (- (- (- ?x28600 ?x28602) ?x28605) ?x28608) ?x28611) ?x28614) ?x28617) ?x28620)))
 (= (+ ?x28621 ?x28623) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28479 (* 2.0 l_0_10_90)))
 (let ((?x28738 (* ?x28479 l_0_10_97)))
 (let ((?x28476 (* 2.0 l_0_10_89)))
 (let ((?x28736 (* ?x28476 l_0_10_96)))
 (let ((?x28473 (* 2.0 l_0_10_88)))
 (let ((?x28734 (* ?x28473 l_0_10_95)))
 (let ((?x28732 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x28729 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x28726 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x28723 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x28720 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x28717 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x28714 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x28711 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x28708 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x28702 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28699 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28696 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28693 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28690 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28687 (* ?x28438 l_0_10_181)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28685 (* ?x28435 l_0_10_180)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28683 (* ?x28432 l_0_10_179)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28681 (* ?x28425 l_0_10_160)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28679 (* ?x28422 l_0_10_159)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28677 (* ?x28419 l_0_10_158)))
 (let ((?x28675 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x28672 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28669 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28666 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x28663 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28660 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28657 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x27959 (* 2.0 l_0_10_132)))
 (let ((?x28102 (* ?x27959 l_0_10_144)))
 (let ((?x27956 (* 2.0 l_0_10_131)))
 (let ((?x28100 (* ?x27956 l_0_10_143)))
 (let ((?x14734 (* 2.0 l_0_10_130)))
 (let ((?x28098 (* ?x14734 l_0_10_142)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x28651 (* ?x27573 l_0_10_18)))
 (let ((?x27562 (* 12.0 l_0_10_12)))
 (let ((?x28649 (* ?x27562 l_0_10_17)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28647 (* ?x28408 l_0_10_118)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x28645 (* ?x28391 l_0_10_117)))
 (let ((?x27558 (* 12.0 l_0_10_11)))
 (let ((?x28643 (* ?x27558 l_0_10_16)))
 (let ((?x28650 (+ (+ (+ (+ (* (* 2.0 l_0_10_109) l_0_10_116) ?x28643) ?x28645) ?x28647) ?x28649)))
 (let ((?x28664 (+ (+ (+ (- (- (- (+ ?x28650 ?x28651) ?x28098) ?x28100) ?x28102) ?x28657) ?x28660) ?x28663)))
 (let ((?x28682 (+ (+ (+ (+ (+ (+ (+ ?x28664 ?x28666) ?x28669) ?x28672) ?x28675) ?x28677) ?x28679) ?x28681)))
 (let ((?x28700 (- (- (- (- (- (- (- ?x28682 ?x28683) ?x28685) ?x28687) ?x28690) ?x28693) ?x28696) ?x28699)))
 (let ((?x28712 (- (- (- (- ?x28700 ?x28702) (* (* 6.0 l_0_10_53) l_0_10_58)) ?x28708) ?x28711)))
 (let ((?x28733 (+ (+ (+ (+ (+ (- (- ?x28712 ?x28714) ?x28717) ?x28720) ?x28723) ?x28726) ?x28729) ?x28732)))
 (= (- (- (- ?x28733 ?x28734) ?x28736) ?x28738) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28868 (* l_0_10_84 l_0_10_84)))
 (let ((?x28869 (* 3.0 ?x28868)))
 (let ((?x28865 (* l_0_10_83 l_0_10_83)))
 (let ((?x28866 (* 3.0 ?x28865)))
 (let ((?x28862 (* l_0_10_82 l_0_10_82)))
 (let ((?x28863 (* 3.0 ?x28862)))
 (let ((?x28859 (* l_0_10_81 l_0_10_81)))
 (let ((?x28860 (* 3.0 ?x28859)))
 (let ((?x28856 (* l_0_10_80 l_0_10_80)))
 (let ((?x28857 (* 3.0 ?x28856)))
 (let ((?x28853 (* l_0_10_79 l_0_10_79)))
 (let ((?x28854 (* 3.0 ?x28853)))
 (let ((?x28851 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x28848 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x28845 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x28842 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x28839 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x28833 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x28830 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x28827 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x28824 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x28821 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x28818 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x27371 (* l_0_10_21 l_0_10_21)))
 (let ((?x28815 (* 6.0 ?x27371)))
 (let ((?x27369 (* l_0_10_20 l_0_10_20)))
 (let ((?x28813 (* 6.0 ?x27369)))
 (let ((?x27367 (* l_0_10_19 l_0_10_19)))
 (let ((?x28811 (* 6.0 ?x27367)))
 (let ((?x27365 (* l_0_10_18 l_0_10_18)))
 (let ((?x28809 (* 6.0 ?x27365)))
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28807 (* ?x28438 l_0_10_186)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28805 (* ?x28435 l_0_10_185)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28803 (* ?x28432 l_0_10_184)))
 (let ((?x27363 (* l_0_10_17 l_0_10_17)))
 (let ((?x28801 (* 6.0 ?x27363)))
 (let ((?x27359 (* l_0_10_16 l_0_10_16)))
 (let ((?x28799 (* 6.0 ?x27359)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28797 (* ?x28425 l_0_10_165)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28795 (* ?x28422 l_0_10_164)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28793 (* ?x28419 l_0_10_163)))
 (let ((?x28791 (* l_0_10_147 l_0_10_147)))
 (let ((?x28789 (* l_0_10_146 l_0_10_146)))
 (let ((?x28787 (* l_0_10_145 l_0_10_145)))
 (let ((?x28785 (* l_0_10_144 l_0_10_144)))
 (let ((?x28783 (* l_0_10_143 l_0_10_143)))
 (let ((?x28781 (* l_0_10_142 l_0_10_142)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28779 (* ?x28408 l_0_10_123)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x15603 (* ?x28391 l_0_10_122)))
 (let ((?x28386 (* 2.0 l_0_10_109)))
 (let ((?x15599 (* ?x28386 l_0_10_121)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x15604 (* ?x15578 l_0_10_90)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x15647 (* ?x15646 l_0_10_89)))
 (let ((?x28778 (+ (+ (- (- (* (* (- 2.0) l_0_10_100) l_0_10_88) ?x15647) ?x15604) ?x15599) ?x15603)))
 (let ((?x28792 (+ (+ (+ (+ (+ (+ (+ ?x28778 ?x28779) ?x28781) ?x28783) ?x28785) ?x28787) ?x28789) ?x28791)))
 (let ((?x28806 (- (- (+ (+ (+ (+ (+ ?x28792 ?x28793) ?x28795) ?x28797) ?x28799) ?x28801) ?x28803) ?x28805)))
 (let ((?x28822 (- (- (+ (+ (+ (+ (- ?x28806 ?x28807) ?x28809) ?x28811) ?x28813) ?x28815) ?x28818) ?x28821)))
 (let ((?x28837 (- (- (- (- (- ?x28822 ?x28824) ?x28827) ?x28830) ?x28833) (* (* 3.0 l_0_10_58) l_0_10_58))))
 (let ((?x28858 (+ (+ (- (- (- (- (- ?x28837 ?x28839) ?x28842) ?x28845) ?x28848) ?x28851) ?x28854) ?x28857)))
 (= (+ (+ (+ (+ ?x28858 ?x28860) ?x28863) ?x28866) ?x28869) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x28973 (* ?x26050 l_0_10_75)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x28971 (* ?x26046 l_0_10_74)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x28969 (* ?x26042 l_0_10_54)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x28967 (* ?x26038 l_0_10_53)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x27596 (* ?x26026 l_0_10_33)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x27588 (* ?x26017 l_0_10_32)))
 (let ((?x26506 (* l_0_10_129 l_0_10_129)))
 (let ((?x26505 (* l_0_10_128 l_0_10_128)))
 (let ((?x27562 (* 12.0 l_0_10_12)))
 (let ((?x27563 (* ?x27562 l_0_10_3)))
 (let ((?x27558 (* 12.0 l_0_10_11)))
 (let ((?x27559 (* ?x27558 l_0_10_2)))
 (let ((?x28950 (- (- (- (+ ?x27559 ?x27563) ?x26505) ?x26506) (* (* 2.0 l_0_10_191) l_0_10_200))))
 (let ((?x28954 (- (- ?x28950 (* (* 2.0 l_0_10_192) l_0_10_201)) (* (* 2.0 l_0_10_212) l_0_10_221))))
 (let ((?x28959 (- (- (- ?x28954 (* (* 2.0 l_0_10_213) l_0_10_222)) ?x27588) (* (* 2.0 l_0_10_233) l_0_10_242))))
 (let ((?x28964 (- (- (- ?x28959 (* (* 2.0 l_0_10_234) l_0_10_243)) ?x27596) (* (* 2.0 l_0_10_254) l_0_10_263))))
 (let ((?x28972 (+ (- (- (- ?x28964 (* (* 2.0 l_0_10_255) l_0_10_264)) ?x28967) ?x28969) ?x28971)))
 (= (+ ?x28972 ?x28973) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x27930 (* l_0_10_87 l_0_10_87)))
 (let ((?x27928 (* l_0_10_86 l_0_10_86)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x29026 (* ?x26050 l_0_10_80)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x29024 (* ?x26046 l_0_10_79)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x29022 (* ?x26042 l_0_10_59)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x29020 (* ?x26038 l_0_10_58)))
 (let ((?x26026 (* 12.0 l_0_10_24)))
 (let ((?x27705 (* ?x26026 l_0_10_38)))
 (let ((?x26017 (* 12.0 l_0_10_23)))
 (let ((?x27697 (* ?x26017 l_0_10_37)))
 (let ((?x27901 (* l_0_10_171 l_0_10_171)))
 (let ((?x27899 (* l_0_10_170 l_0_10_170)))
 (let ((?x27671 (* 12.0 l_0_10_17)))
 (let ((?x27672 (* ?x27671 l_0_10_3)))
 (let ((?x27666 (* 12.0 l_0_10_16)))
 (let ((?x27667 (* ?x27666 l_0_10_2)))
 (let ((?x27897 (* l_0_10_150 l_0_10_150)))
 (let ((?x27895 (* l_0_10_149 l_0_10_149)))
 (let ((?x28996 (+ (+ (* l_0_10_107 l_0_10_107) (* l_0_10_108 l_0_10_108)) ?x27895)))
 (let ((?x29003 (- (- (- (+ (+ (+ ?x28996 ?x27897) ?x27667) ?x27672) ?x27899) ?x27901) (* (* 2.0 l_0_10_191) l_0_10_205))))
 (let ((?x29007 (- (- ?x29003 (* (* 2.0 l_0_10_192) l_0_10_206)) (* (* 2.0 l_0_10_212) l_0_10_226))))
 (let ((?x29012 (- (- (- ?x29007 (* (* 2.0 l_0_10_213) l_0_10_227)) ?x27697) (* (* 2.0 l_0_10_233) l_0_10_247))))
 (let ((?x29017 (- (- (- ?x29012 (* (* 2.0 l_0_10_234) l_0_10_248)) ?x27705) (* (* 2.0 l_0_10_254) l_0_10_268))))
 (let ((?x29025 (+ (- (- (- ?x29017 (* (* 2.0 l_0_10_255) l_0_10_269)) ?x29020) ?x29022) ?x29024)))
 (= (- (- (+ ?x29025 ?x29026) ?x27928) ?x27930) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x29124 (* 2.0 l_0_10_73)))
 (let ((?x29125 (* ?x29124 l_0_10_77)))
 (let ((?x29121 (* 2.0 l_0_10_72)))
 (let ((?x29122 (* ?x29121 l_0_10_76)))
 (let ((?x29118 (* 2.0 l_0_10_71)))
 (let ((?x29119 (* ?x29118 l_0_10_75)))
 (let ((?x29115 (* 2.0 l_0_10_70)))
 (let ((?x29116 (* ?x29115 l_0_10_74)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x28973 (* ?x26050 l_0_10_75)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x28971 (* ?x26046 l_0_10_74)))
 (let ((?x29110 (* 2.0 l_0_10_52)))
 (let ((?x29111 (* ?x29110 l_0_10_56)))
 (let ((?x29107 (* 2.0 l_0_10_51)))
 (let ((?x29108 (* ?x29107 l_0_10_55)))
 (let ((?x29104 (* 2.0 l_0_10_50)))
 (let ((?x29105 (* ?x29104 l_0_10_54)))
 (let ((?x29101 (* 2.0 l_0_10_49)))
 (let ((?x29102 (* ?x29101 l_0_10_53)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x28969 (* ?x26042 l_0_10_54)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x28967 (* ?x26038 l_0_10_53)))
 (let ((?x28297 (* 12.0 l_0_10_31)))
 (let ((?x28298 (* ?x28297 l_0_10_35)))
 (let ((?x28294 (* 12.0 l_0_10_30)))
 (let ((?x28295 (* ?x28294 l_0_10_34)))
 (let ((?x28291 (* 12.0 l_0_10_29)))
 (let ((?x28292 (* ?x28291 l_0_10_33)))
 (let ((?x28288 (* 12.0 l_0_10_28)))
 (let ((?x28289 (* ?x28288 l_0_10_32)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x28271 (* ?x27573 l_0_10_9)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x27419 (* ?x26333 l_0_10_134)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x27407 (* ?x13288 l_0_10_133)))
 (let ((?x28268 (+ (* (* 12.0 l_0_10_10) l_0_10_14) (* (* 12.0 l_0_10_11) l_0_10_7))))
 (let ((?x28270 (+ ?x28268 (* (* 12.0 l_0_10_12) l_0_10_8))))
 (let ((?x29049 (- (+ (- (- ?x28270 ?x27407) ?x27419) ?x28271) (* (* 2.0 l_0_10_196) l_0_10_200))))
 (let ((?x29055 (- (- ?x29049 (* (* 2.0 l_0_10_197) l_0_10_201)) (* (* 2.0 l_0_10_198) l_0_10_202))))
 (let ((?x29061 (- (- ?x29055 (* (* 2.0 l_0_10_199) l_0_10_203)) (* (* 2.0 l_0_10_217) l_0_10_221))))
 (let ((?x29067 (- (- ?x29061 (* (* 2.0 l_0_10_218) l_0_10_222)) (* (* 2.0 l_0_10_219) l_0_10_223))))
 (let ((?x29073 (- (- ?x29067 (* (* 2.0 l_0_10_220) l_0_10_224)) (* (* 2.0 l_0_10_238) l_0_10_242))))
 (let ((?x29079 (- (- ?x29073 (* (* 2.0 l_0_10_239) l_0_10_243)) (* (* 2.0 l_0_10_240) l_0_10_244))))
 (let ((?x29085 (- (- ?x29079 (* (* 2.0 l_0_10_241) l_0_10_245)) (* (* 2.0 l_0_10_259) l_0_10_263))))
 (let ((?x29091 (- (- ?x29085 (* (* 2.0 l_0_10_260) l_0_10_264)) (* (* 2.0 l_0_10_261) l_0_10_265))))
 (let ((?x29097 (- (- (- (- ?x29091 (* (* 2.0 l_0_10_262) l_0_10_266)) ?x28289) ?x28292) ?x28295)))
 (let ((?x29112 (- (- (- (- (+ (+ (- ?x29097 ?x28298) ?x28967) ?x28969) ?x29102) ?x29105) ?x29108) ?x29111)))
 (= (+ (+ (+ (+ (- (- ?x29112 ?x28971) ?x28973) ?x29116) ?x29119) ?x29122) ?x29125) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x29248 (* ?x27742 l_0_10_92)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x29246 (* ?x27739 l_0_10_91)))
 (let ((?x29124 (* 2.0 l_0_10_73)))
 (let ((?x29244 (* ?x29124 l_0_10_82)))
 (let ((?x29121 (* 2.0 l_0_10_72)))
 (let ((?x29242 (* ?x29121 l_0_10_81)))
 (let ((?x29118 (* 2.0 l_0_10_71)))
 (let ((?x29240 (* ?x29118 l_0_10_80)))
 (let ((?x29115 (* 2.0 l_0_10_70)))
 (let ((?x29238 (* ?x29115 l_0_10_79)))
 (let ((?x26050 (* 2.0 l_0_10_66)))
 (let ((?x29026 (* ?x26050 l_0_10_80)))
 (let ((?x26046 (* 2.0 l_0_10_65)))
 (let ((?x29024 (* ?x26046 l_0_10_79)))
 (let ((?x29110 (* 2.0 l_0_10_52)))
 (let ((?x29234 (* ?x29110 l_0_10_61)))
 (let ((?x29107 (* 2.0 l_0_10_51)))
 (let ((?x29232 (* ?x29107 l_0_10_60)))
 (let ((?x29104 (* 2.0 l_0_10_50)))
 (let ((?x29230 (* ?x29104 l_0_10_59)))
 (let ((?x29101 (* 2.0 l_0_10_49)))
 (let ((?x29228 (* ?x29101 l_0_10_58)))
 (let ((?x26042 (* 2.0 l_0_10_45)))
 (let ((?x29022 (* ?x26042 l_0_10_59)))
 (let ((?x26038 (* 2.0 l_0_10_44)))
 (let ((?x29020 (* ?x26038 l_0_10_58)))
 (let ((?x28297 (* 12.0 l_0_10_31)))
 (let ((?x28449 (* ?x28297 l_0_10_40)))
 (let ((?x28294 (* 12.0 l_0_10_30)))
 (let ((?x28447 (* ?x28294 l_0_10_39)))
 (let ((?x28291 (* 12.0 l_0_10_29)))
 (let ((?x28445 (* ?x28291 l_0_10_38)))
 (let ((?x28288 (* 12.0 l_0_10_28)))
 (let ((?x28443 (* ?x28288 l_0_10_37)))
 (let ((?x27682 (* 12.0 l_0_10_18)))
 (let ((?x28441 (* ?x27682 l_0_10_9)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29187 (* ?x27679 l_0_10_176)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x16424 (* ?x27676 l_0_10_175)))
 (let ((?x27671 (* 12.0 l_0_10_17)))
 (let ((?x28430 (* ?x27671 l_0_10_8)))
 (let ((?x27666 (* 12.0 l_0_10_16)))
 (let ((?x28428 (* ?x27666 l_0_10_7)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x16444 (* ?x14432 l_0_10_155)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x16405 (* ?x14431 l_0_10_154)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x16500 (* ?x14533 l_0_10_113)))
 (let ((?x14906 (* 12.0 l_0_10_10)))
 (let ((?x14955 (* ?x14906 l_0_10_19)))
 (let ((?x16438 (+ (+ (+ (+ ?x14955 (* (* 2.0 l_0_10_107) l_0_10_112)) ?x16500) ?x16405) ?x16444)))
 (let ((?x29191 (- (+ (- (- (+ (+ ?x16438 ?x28428) ?x28430) ?x16424) ?x29187) ?x28441) (* (* 2.0 l_0_10_196) l_0_10_205))))
 (let ((?x29195 (- (- ?x29191 (* (* 2.0 l_0_10_197) l_0_10_206)) (* (* 2.0 l_0_10_198) l_0_10_207))))
 (let ((?x29199 (- (- ?x29195 (* (* 2.0 l_0_10_199) l_0_10_208)) (* (* 2.0 l_0_10_217) l_0_10_226))))
 (let ((?x29203 (- (- ?x29199 (* (* 2.0 l_0_10_218) l_0_10_227)) (* (* 2.0 l_0_10_219) l_0_10_228))))
 (let ((?x29207 (- (- ?x29203 (* (* 2.0 l_0_10_220) l_0_10_229)) (* (* 2.0 l_0_10_238) l_0_10_247))))
 (let ((?x29211 (- (- ?x29207 (* (* 2.0 l_0_10_239) l_0_10_248)) (* (* 2.0 l_0_10_240) l_0_10_249))))
 (let ((?x29215 (- (- ?x29211 (* (* 2.0 l_0_10_241) l_0_10_250)) (* (* 2.0 l_0_10_259) l_0_10_268))))
 (let ((?x29219 (- (- ?x29215 (* (* 2.0 l_0_10_260) l_0_10_269)) (* (* 2.0 l_0_10_261) l_0_10_270))))
 (let ((?x29224 (- (- (- (- ?x29219 (* (* 2.0 l_0_10_262) l_0_10_271)) ?x28443) ?x28445) ?x28447)))
 (let ((?x29235 (- (- (- (- (+ (+ (- ?x29224 ?x28449) ?x29020) ?x29022) ?x29228) ?x29230) ?x29232) ?x29234)))
 (let ((?x29247 (- (+ (+ (+ (+ (- (- ?x29235 ?x29024) ?x29026) ?x29238) ?x29240) ?x29242) ?x29244) ?x29246)))
 (= (- ?x29247 ?x29248) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28593 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x28590 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x28587 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x28584 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x28581 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x29312 (* l_0_10_267 l_0_10_267)))
 (let ((?x29310 (* l_0_10_266 l_0_10_266)))
 (let ((?x29308 (* l_0_10_265 l_0_10_265)))
 (let ((?x29306 (* l_0_10_264 l_0_10_264)))
 (let ((?x29304 (* l_0_10_263 l_0_10_263)))
 (let ((?x29302 (* l_0_10_246 l_0_10_246)))
 (let ((?x29300 (* l_0_10_245 l_0_10_245)))
 (let ((?x29298 (* l_0_10_244 l_0_10_244)))
 (let ((?x29296 (* l_0_10_243 l_0_10_243)))
 (let ((?x29294 (* l_0_10_242 l_0_10_242)))
 (let ((?x29292 (* l_0_10_225 l_0_10_225)))
 (let ((?x29290 (* l_0_10_224 l_0_10_224)))
 (let ((?x29288 (* l_0_10_223 l_0_10_223)))
 (let ((?x29286 (* l_0_10_222 l_0_10_222)))
 (let ((?x29284 (* l_0_10_221 l_0_10_221)))
 (let ((?x29282 (* l_0_10_204 l_0_10_204)))
 (let ((?x29280 (* l_0_10_203 l_0_10_203)))
 (let ((?x29278 (* l_0_10_202 l_0_10_202)))
 (let ((?x29276 (* l_0_10_201 l_0_10_201)))
 (let ((?x29274 (* l_0_10_200 l_0_10_200)))
 (let ((?x27252 (* l_0_10_15 l_0_10_15)))
 (let ((?x28578 (* 6.0 ?x27252)))
 (let ((?x27250 (* l_0_10_14 l_0_10_14)))
 (let ((?x28572 (* 6.0 ?x27250)))
 (let ((?x27248 (* l_0_10_13 l_0_10_13)))
 (let ((?x28561 (* 6.0 ?x27248)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x27571 (* ?x26333 l_0_10_138)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x27568 (* ?x13288 l_0_10_137)))
 (let ((?x27245 (* l_0_10_12 l_0_10_12)))
 (let ((?x28559 (* 6.0 ?x27245)))
 (let ((?x13834 (* l_0_10_11 l_0_10_11)))
 (let ((?x28558 (* 6.0 ?x13834)))
 (let ((?x28560 (+ ?x28558 ?x28559)))
 (let ((?x29277 (- (- (+ (+ (+ (- (- ?x28560 ?x27568) ?x27571) ?x28561) ?x28572) ?x28578) ?x29274) ?x29276)))
 (let ((?x29291 (- (- (- (- (- (- (- ?x29277 ?x29278) ?x29280) ?x29282) ?x29284) ?x29286) ?x29288) ?x29290)))
 (let ((?x29305 (- (- (- (- (- (- (- ?x29291 ?x29292) ?x29294) ?x29296) ?x29298) ?x29300) ?x29302) ?x29304)))
 (let ((?x29316 (- (- (- (- (- (- (- ?x29305 ?x29306) ?x29308) ?x29310) ?x29312) ?x28581) ?x28584) ?x28587)))
 (let ((?x29324 (- (- (- (- ?x29316 ?x28590) ?x28593) (* (* 1.0 l_0_10_53) l_0_10_53)) (* (* 1.0 l_0_10_54) l_0_10_54))))
 (let ((?x29330 (- (- ?x29324 (* (* 1.0 l_0_10_55) l_0_10_55)) (* (* 1.0 l_0_10_56) l_0_10_56))))
 (let ((?x29335 (+ (- ?x29330 (* (* 1.0 l_0_10_57) l_0_10_57)) (* 1.0 (* l_0_10_74 l_0_10_74)))))
 (let ((?x29339 (+ (+ ?x29335 (* 1.0 (* l_0_10_75 l_0_10_75))) (* 1.0 (* l_0_10_76 l_0_10_76)))))
 (let ((?x29343 (+ (+ ?x29339 (* 1.0 (* l_0_10_77 l_0_10_77))) (* 1.0 (* l_0_10_78 l_0_10_78)))))
 (= ?x29343 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x29487 (* ?x27742 l_0_10_96)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x29485 (* ?x27739 l_0_10_95)))
 (let ((?x29483 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x29480 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x29477 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x29474 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x29471 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x29468 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x29465 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x29462 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x29459 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x29456 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x28702 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28699 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28696 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28693 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28690 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29388 (* ?x27679 l_0_10_180)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x29386 (* ?x27676 l_0_10_179)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x29384 (* ?x14432 l_0_10_159)))
 (let ((?x28675 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x29381 (* ?x14431 l_0_10_158)))
 (let ((?x28666 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x27573 (* 12.0 l_0_10_13)))
 (let ((?x28651 (* ?x27573 l_0_10_18)))
 (let ((?x26333 (* 2.0 l_0_10_129)))
 (let ((?x14419 (* ?x26333 l_0_10_143)))
 (let ((?x13288 (* 2.0 l_0_10_128)))
 (let ((?x14367 (* ?x13288 l_0_10_142)))
 (let ((?x27562 (* 12.0 l_0_10_12)))
 (let ((?x28649 (* ?x27562 l_0_10_17)))
 (let ((?x27558 (* 12.0 l_0_10_11)))
 (let ((?x28643 (* ?x27558 l_0_10_16)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x17229 (* ?x14533 l_0_10_117)))
 (let ((?x29377 (- (+ (+ (+ (* (* 2.0 l_0_10_107) l_0_10_116) ?x17229) ?x28643) ?x28649) ?x14367)))
 (let ((?x29387 (- (+ (+ (+ (+ (+ (- ?x29377 ?x14419) ?x28651) ?x28666) ?x29381) ?x28675) ?x29384) ?x29386)))
 (let ((?x29395 (- (- (- ?x29387 ?x29388) (* (* 2.0 l_0_10_200) l_0_10_205)) (* (* 2.0 l_0_10_201) l_0_10_206))))
 (let ((?x29401 (- (- ?x29395 (* (* 2.0 l_0_10_202) l_0_10_207)) (* (* 2.0 l_0_10_203) l_0_10_208))))
 (let ((?x29407 (- (- ?x29401 (* (* 2.0 l_0_10_204) l_0_10_209)) (* (* 2.0 l_0_10_221) l_0_10_226))))
 (let ((?x29413 (- (- ?x29407 (* (* 2.0 l_0_10_222) l_0_10_227)) (* (* 2.0 l_0_10_223) l_0_10_228))))
 (let ((?x29419 (- (- ?x29413 (* (* 2.0 l_0_10_224) l_0_10_229)) (* (* 2.0 l_0_10_225) l_0_10_230))))
 (let ((?x29425 (- (- ?x29419 (* (* 2.0 l_0_10_242) l_0_10_247)) (* (* 2.0 l_0_10_243) l_0_10_248))))
 (let ((?x29431 (- (- ?x29425 (* (* 2.0 l_0_10_244) l_0_10_249)) (* (* 2.0 l_0_10_245) l_0_10_250))))
 (let ((?x29437 (- (- ?x29431 (* (* 2.0 l_0_10_246) l_0_10_251)) (* (* 2.0 l_0_10_263) l_0_10_268))))
 (let ((?x29443 (- (- ?x29437 (* (* 2.0 l_0_10_264) l_0_10_269)) (* (* 2.0 l_0_10_265) l_0_10_270))))
 (let ((?x29449 (- (- ?x29443 (* (* 2.0 l_0_10_266) l_0_10_271)) (* (* 2.0 l_0_10_267) l_0_10_272))))
 (let ((?x29460 (- (- (- (- (- (- (- ?x29449 ?x28690) ?x28693) ?x28696) ?x28699) ?x28702) ?x29456) ?x29459)))
 (let ((?x29481 (+ (+ (+ (+ (- (- (- ?x29460 ?x29462) ?x29465) ?x29468) ?x29471) ?x29474) ?x29477) ?x29480)))
 (= (- (- (+ ?x29481 ?x29483) ?x29485) ?x29487) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28833 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x28830 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x28827 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x28824 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x28821 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x28818 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x29632 (* l_0_10_273 l_0_10_273)))
 (let ((?x29630 (* l_0_10_272 l_0_10_272)))
 (let ((?x29628 (* l_0_10_271 l_0_10_271)))
 (let ((?x29626 (* l_0_10_270 l_0_10_270)))
 (let ((?x29624 (* l_0_10_269 l_0_10_269)))
 (let ((?x29622 (* l_0_10_268 l_0_10_268)))
 (let ((?x29620 (* l_0_10_252 l_0_10_252)))
 (let ((?x29618 (* l_0_10_251 l_0_10_251)))
 (let ((?x29616 (* l_0_10_250 l_0_10_250)))
 (let ((?x29614 (* l_0_10_249 l_0_10_249)))
 (let ((?x29612 (* l_0_10_248 l_0_10_248)))
 (let ((?x29610 (* l_0_10_247 l_0_10_247)))
 (let ((?x29608 (* l_0_10_231 l_0_10_231)))
 (let ((?x29606 (* l_0_10_230 l_0_10_230)))
 (let ((?x29604 (* l_0_10_229 l_0_10_229)))
 (let ((?x29602 (* l_0_10_228 l_0_10_228)))
 (let ((?x29600 (* l_0_10_227 l_0_10_227)))
 (let ((?x29598 (* l_0_10_226 l_0_10_226)))
 (let ((?x29596 (* l_0_10_210 l_0_10_210)))
 (let ((?x27371 (* l_0_10_21 l_0_10_21)))
 (let ((?x28815 (* 6.0 ?x27371)))
 (let ((?x29593 (* l_0_10_209 l_0_10_209)))
 (let ((?x29591 (* l_0_10_208 l_0_10_208)))
 (let ((?x29589 (* l_0_10_207 l_0_10_207)))
 (let ((?x29587 (* l_0_10_206 l_0_10_206)))
 (let ((?x29585 (* l_0_10_205 l_0_10_205)))
 (let ((?x27369 (* l_0_10_20 l_0_10_20)))
 (let ((?x28813 (* 6.0 ?x27369)))
 (let ((?x27367 (* l_0_10_19 l_0_10_19)))
 (let ((?x28811 (* 6.0 ?x27367)))
 (let ((?x27365 (* l_0_10_18 l_0_10_18)))
 (let ((?x28809 (* 6.0 ?x27365)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29580 (* ?x27679 l_0_10_185)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x29578 (* ?x27676 l_0_10_184)))
 (let ((?x27363 (* l_0_10_17 l_0_10_17)))
 (let ((?x28801 (* 6.0 ?x27363)))
 (let ((?x27359 (* l_0_10_16 l_0_10_16)))
 (let ((?x28799 (* 6.0 ?x27359)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x29574 (* ?x14432 l_0_10_164)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x29572 (* ?x14431 l_0_10_163)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x29570 (* ?x14533 l_0_10_122)))
 (let ((?x14534 (* 2.0 l_0_10_107)))
 (let ((?x29568 (* ?x14534 l_0_10_121)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x29566 (* ?x15646 l_0_10_87)))
 (let ((?x29573 (+ (+ (+ (- (* (* (- 2.0) l_0_10_100) l_0_10_86) ?x29566) ?x29568) ?x29570) ?x29572)))
 (let ((?x29583 (+ (+ (- (- (+ (+ (+ ?x29573 ?x29574) ?x28799) ?x28801) ?x29578) ?x29580) ?x28809) ?x28811)))
 (let ((?x29595 (+ (- (- (- (- (- (+ ?x29583 ?x28813) ?x29585) ?x29587) ?x29589) ?x29591) ?x29593) ?x28815)))
 (let ((?x29609 (- (- (- (- (- (- (- ?x29595 ?x29596) ?x29598) ?x29600) ?x29602) ?x29604) ?x29606) ?x29608)))
 (let ((?x29623 (- (- (- (- (- (- (- ?x29609 ?x29610) ?x29612) ?x29614) ?x29616) ?x29618) ?x29620) ?x29622)))
 (let ((?x29635 (- (- (- (- (- (- (- ?x29623 ?x29624) ?x29626) ?x29628) ?x29630) ?x29632) ?x28818) ?x28821)))
 (let ((?x29642 (- (- (- (- (- ?x29635 ?x28824) ?x28827) ?x28830) ?x28833) (* (* 1.0 l_0_10_58) l_0_10_58))))
 (let ((?x29648 (- (- ?x29642 (* (* 1.0 l_0_10_59) l_0_10_59)) (* (* 1.0 l_0_10_60) l_0_10_60))))
 (let ((?x29654 (- (- ?x29648 (* (* 1.0 l_0_10_61) l_0_10_61)) (* (* 1.0 l_0_10_62) l_0_10_62))))
 (let ((?x29659 (+ (- ?x29654 (* (* 1.0 l_0_10_63) l_0_10_63)) (* 1.0 (* l_0_10_79 l_0_10_79)))))
 (let ((?x29663 (+ (+ ?x29659 (* 1.0 (* l_0_10_80 l_0_10_80))) (* 1.0 (* l_0_10_81 l_0_10_81)))))
 (let ((?x29667 (+ (+ ?x29663 (* 1.0 (* l_0_10_82 l_0_10_82))) (* 1.0 (* l_0_10_83 l_0_10_83)))))
 (= (+ ?x29667 (* 1.0 (* l_0_10_84 l_0_10_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26131 (* l_0_10_64 l_0_10_64)))
 (let ((?x26602 (* 3.0 ?x26131)))
 (= (+ (* (* (- 3.0) l_0_10_43) l_0_10_43) ?x26602) 0.0))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x26840 (* ?x26839 l_0_10_86)))
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x26914 (* ?x26685 l_0_10_67)))
 (let ((?x26680 (* 6.0 l_0_10_43)))
 (let ((?x26909 (* ?x26680 l_0_10_46)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x26816 (* ?x26815 l_0_10_170)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x26810 (* ?x26809 l_0_10_149)))
 (let ((?x29737 (+ (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_107) ?x26810) ?x26816) ?x26909) ?x26914)))
 (= (+ ?x29737 ?x26840) 0.0)))))))))))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x26958 (* ?x26685 l_0_10_70)))
 (= (+ (* (* (- 6.0) l_0_10_43) l_0_10_49) ?x26958) 0.0))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x27014 (* ?x26685 l_0_10_74)))
 (= (+ (* (* (- 6.0) l_0_10_43) l_0_10_53) ?x27014) 0.0))))
(assert
 (let ((?x26685 (* 6.0 l_0_10_64)))
 (let ((?x27064 (* ?x26685 l_0_10_79)))
 (= (+ (* (* (- 6.0) l_0_10_43) l_0_10_58) ?x27064) 0.0))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x27743 (* ?x27742 l_0_10_89)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x27740 (* ?x27739 l_0_10_88)))
 (let ((?x26423 (* l_0_10_69 l_0_10_69)))
 (let ((?x27926 (* 3.0 ?x26423)))
 (let ((?x26420 (* l_0_10_68 l_0_10_68)))
 (let ((?x27924 (* 3.0 ?x26420)))
 (let ((?x26417 (* l_0_10_67 l_0_10_67)))
 (let ((?x27922 (* 3.0 ?x26417)))
 (let ((?x27916 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x27913 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x27910 (* (* 3.0 l_0_10_46) l_0_10_46)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x27680 (* ?x27679 l_0_10_173)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x27677 (* ?x27676 l_0_10_172)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x14435 (* ?x14432 l_0_10_152)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x14437 (* ?x14431 l_0_10_151)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x14355 (* ?x14533 l_0_10_110)))
 (let ((?x29760 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_109) ?x14355) ?x14437) ?x14435) ?x27677)))
 (let ((?x29767 (+ (+ (+ (- (- (- (+ ?x29760 ?x27680) ?x27910) ?x27913) ?x27916) ?x27922) ?x27924) ?x27926)))
 (= (+ (+ ?x29767 ?x27740) ?x27743) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x29248 (* ?x27742 l_0_10_92)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x29246 (* ?x27739 l_0_10_91)))
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x27993 (* ?x27992 l_0_10_72)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x27989 (* ?x27988 l_0_10_71)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x27985 (* ?x27984 l_0_10_70)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x27977 (* ?x27976 l_0_10_51)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x27973 (* ?x27972 l_0_10_50)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x27969 (* ?x27968 l_0_10_49)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29187 (* ?x27679 l_0_10_176)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x16424 (* ?x27676 l_0_10_175)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x16444 (* ?x14432 l_0_10_155)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x16405 (* ?x14431 l_0_10_154)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x16500 (* ?x14533 l_0_10_113)))
 (let ((?x18087 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_112) ?x16500) ?x16405) ?x16444) ?x16424)))
 (let ((?x29776 (+ (+ (+ (- (- (- (+ ?x18087 ?x29187) ?x27969) ?x27973) ?x27977) ?x27985) ?x27989) ?x27993)))
 (= (+ (+ ?x29776 ?x29246) ?x29248) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27742 (* 2.0 l_0_10_87)))
 (let ((?x29487 (* ?x27742 l_0_10_96)))
 (let ((?x27739 (* 2.0 l_0_10_86)))
 (let ((?x29485 (* ?x27739 l_0_10_95)))
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x28072 (* ?x27992 l_0_10_76)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x28070 (* ?x27988 l_0_10_75)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x28068 (* ?x27984 l_0_10_74)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x28064 (* ?x27976 l_0_10_55)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x28062 (* ?x27972 l_0_10_54)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x28060 (* ?x27968 l_0_10_53)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29388 (* ?x27679 l_0_10_180)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x29386 (* ?x27676 l_0_10_179)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x29384 (* ?x14432 l_0_10_159)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x29381 (* ?x14431 l_0_10_158)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x17229 (* ?x14533 l_0_10_117)))
 (let ((?x29785 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_116) ?x17229) ?x29381) ?x29384) ?x29386)))
 (let ((?x29792 (+ (+ (+ (- (- (- (+ ?x29785 ?x29388) ?x28060) ?x28062) ?x28064) ?x28068) ?x28070) ?x28072)))
 (= (+ (+ ?x29792 ?x29485) ?x29487) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27992 (* 6.0 l_0_10_69)))
 (let ((?x28136 (* ?x27992 l_0_10_81)))
 (let ((?x27988 (* 6.0 l_0_10_68)))
 (let ((?x28134 (* ?x27988 l_0_10_80)))
 (let ((?x27984 (* 6.0 l_0_10_67)))
 (let ((?x28132 (* ?x27984 l_0_10_79)))
 (let ((?x27976 (* 6.0 l_0_10_48)))
 (let ((?x28128 (* ?x27976 l_0_10_60)))
 (let ((?x27972 (* 6.0 l_0_10_47)))
 (let ((?x28126 (* ?x27972 l_0_10_59)))
 (let ((?x27968 (* 6.0 l_0_10_46)))
 (let ((?x28124 (* ?x27968 l_0_10_58)))
 (let ((?x27679 (* 2.0 l_0_10_171)))
 (let ((?x29580 (* ?x27679 l_0_10_185)))
 (let ((?x27676 (* 2.0 l_0_10_170)))
 (let ((?x29578 (* ?x27676 l_0_10_184)))
 (let ((?x14432 (* 2.0 l_0_10_150)))
 (let ((?x29574 (* ?x14432 l_0_10_164)))
 (let ((?x14431 (* 2.0 l_0_10_149)))
 (let ((?x29572 (* ?x14431 l_0_10_163)))
 (let ((?x14533 (* 2.0 l_0_10_108)))
 (let ((?x29570 (* ?x14533 l_0_10_122)))
 (let ((?x14534 (* 2.0 l_0_10_107)))
 (let ((?x29568 (* ?x14534 l_0_10_121)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x29566 (* ?x15646 l_0_10_87)))
 (let ((?x29801 (- (- (- (+ (* (* 2.0 l_0_10_100) l_0_10_86) ?x29566) ?x29568) ?x29570) ?x29572)))
 (let ((?x29808 (+ (- (- (- (+ (+ (- ?x29801 ?x29574) ?x29578) ?x29580) ?x28124) ?x28126) ?x28128) ?x28132)))
 (= (+ (+ ?x29808 ?x28134) ?x28136) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x26283 (* l_0_10_73 l_0_10_73)))
 (let ((?x28238 (* 3.0 ?x26283)))
 (let ((?x26280 (* l_0_10_72 l_0_10_72)))
 (let ((?x28236 (* 3.0 ?x26280)))
 (let ((?x26277 (* l_0_10_71 l_0_10_71)))
 (let ((?x28234 (* 3.0 ?x26277)))
 (let ((?x26274 (* l_0_10_70 l_0_10_70)))
 (let ((?x28232 (* 3.0 ?x26274)))
 (let ((?x28226 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x28223 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x28220 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x18292 (+ (- (- (- (* (* (- 3.0) l_0_10_49) l_0_10_49) ?x28220) ?x28223) ?x28226) ?x28232)))
 (= (+ (+ (+ ?x18292 ?x28234) ?x28236) ?x28238) 0.0))))))))))))))
(assert
 (let ((?x28327 (* 6.0 l_0_10_73)))
 (let ((?x28328 (* ?x28327 l_0_10_77)))
 (let ((?x28324 (* 6.0 l_0_10_72)))
 (let ((?x28325 (* ?x28324 l_0_10_76)))
 (let ((?x28321 (* 6.0 l_0_10_71)))
 (let ((?x28322 (* ?x28321 l_0_10_75)))
 (let ((?x28318 (* 6.0 l_0_10_70)))
 (let ((?x28319 (* ?x28318 l_0_10_74)))
 (let ((?x28312 (* 6.0 l_0_10_52)))
 (let ((?x28313 (* ?x28312 l_0_10_56)))
 (let ((?x28309 (* 6.0 l_0_10_51)))
 (let ((?x28310 (* ?x28309 l_0_10_55)))
 (let ((?x28306 (* 6.0 l_0_10_50)))
 (let ((?x28307 (* ?x28306 l_0_10_54)))
 (let ((?x29824 (+ (- (- (- (* (* (- 6.0) l_0_10_49) l_0_10_53) ?x28307) ?x28310) ?x28313) ?x28319)))
 (= (+ (+ (+ ?x29824 ?x28322) ?x28325) ?x28328) 0.0)))))))))))))))))
(assert
 (let ((?x28327 (* 6.0 l_0_10_73)))
 (let ((?x28471 (* ?x28327 l_0_10_82)))
 (let ((?x28324 (* 6.0 l_0_10_72)))
 (let ((?x28469 (* ?x28324 l_0_10_81)))
 (let ((?x28321 (* 6.0 l_0_10_71)))
 (let ((?x28467 (* ?x28321 l_0_10_80)))
 (let ((?x28318 (* 6.0 l_0_10_70)))
 (let ((?x28465 (* ?x28318 l_0_10_79)))
 (let ((?x28312 (* 6.0 l_0_10_52)))
 (let ((?x28460 (* ?x28312 l_0_10_61)))
 (let ((?x28309 (* 6.0 l_0_10_51)))
 (let ((?x28458 (* ?x28309 l_0_10_60)))
 (let ((?x28306 (* 6.0 l_0_10_50)))
 (let ((?x28456 (* ?x28306 l_0_10_59)))
 (let ((?x29841 (+ (- (- (- (* (* (- 6.0) l_0_10_49) l_0_10_58) ?x28456) ?x28458) ?x28460) ?x28465)))
 (= (+ (+ (+ ?x29841 ?x28467) ?x28469) ?x28471) 0.0)))))))))))))))))
(assert
 (let ((?x28622 (* l_0_10_78 l_0_10_78)))
 (let ((?x28623 (* 3.0 ?x28622)))
 (let ((?x28619 (* l_0_10_77 l_0_10_77)))
 (let ((?x28620 (* 3.0 ?x28619)))
 (let ((?x28616 (* l_0_10_76 l_0_10_76)))
 (let ((?x28617 (* 3.0 ?x28616)))
 (let ((?x28613 (* l_0_10_75 l_0_10_75)))
 (let ((?x28614 (* 3.0 ?x28613)))
 (let ((?x28610 (* l_0_10_74 l_0_10_74)))
 (let ((?x28611 (* 3.0 ?x28610)))
 (let ((?x28608 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x28605 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x28602 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x28599 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x29852 (- (- (- (- (* (* (- 3.0) l_0_10_53) l_0_10_53) ?x28599) ?x28602) ?x28605) ?x28608)))
 (= (+ (+ (+ (+ (+ ?x29852 ?x28611) ?x28614) ?x28617) ?x28620) ?x28623) 0.0)))))))))))))))))
(assert
 (let ((?x28732 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x28729 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x28726 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x28723 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x28720 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x28717 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x28714 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x28711 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x28708 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x29873 (- (- (- (- (* (* (- 6.0) l_0_10_53) l_0_10_58) ?x28708) ?x28711) ?x28714) ?x28717)))
 (= (+ (+ (+ (+ (+ ?x29873 ?x28720) ?x28723) ?x28726) ?x28729) ?x28732) 0.0))))))))))))
(assert
 (let ((?x28868 (* l_0_10_84 l_0_10_84)))
 (let ((?x28869 (* 3.0 ?x28868)))
 (let ((?x28865 (* l_0_10_83 l_0_10_83)))
 (let ((?x28866 (* 3.0 ?x28865)))
 (let ((?x28862 (* l_0_10_82 l_0_10_82)))
 (let ((?x28863 (* 3.0 ?x28862)))
 (let ((?x28859 (* l_0_10_81 l_0_10_81)))
 (let ((?x28860 (* 3.0 ?x28859)))
 (let ((?x28856 (* l_0_10_80 l_0_10_80)))
 (let ((?x28857 (* 3.0 ?x28856)))
 (let ((?x28853 (* l_0_10_79 l_0_10_79)))
 (let ((?x28854 (* 3.0 ?x28853)))
 (let ((?x28851 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x28848 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x28845 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x28842 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x28839 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x29883 (- (- (- (- (* (* (- 3.0) l_0_10_58) l_0_10_58) ?x28839) ?x28842) ?x28845) ?x28848)))
 (let ((?x29890 (+ (+ (+ (+ (+ (+ (- ?x29883 ?x28851) ?x28854) ?x28857) ?x28860) ?x28863) ?x28866) ?x28869)))
 (= ?x29890 0.0)))))))))))))))))))))
(assert
 (let ((?x26283 (* l_0_10_73 l_0_10_73)))
 (let ((?x26280 (* l_0_10_72 l_0_10_72)))
 (let ((?x26277 (* l_0_10_71 l_0_10_71)))
 (let ((?x26274 (* l_0_10_70 l_0_10_70)))
 (let ((?x13280 (* l_0_10_52 l_0_10_52)))
 (let ((?x26326 (* l_0_10_51 l_0_10_51)))
 (let ((?x29898 (+ (+ (+ (* l_0_10_49 l_0_10_49) (* l_0_10_50 l_0_10_50)) ?x26326) ?x13280)))
 (= (- (- (- (- ?x29898 ?x26274) ?x26277) ?x26280) ?x26283) 0.0)))))))))
(assert
 (let ((?x29124 (* 2.0 l_0_10_73)))
 (let ((?x29125 (* ?x29124 l_0_10_77)))
 (let ((?x29121 (* 2.0 l_0_10_72)))
 (let ((?x29122 (* ?x29121 l_0_10_76)))
 (let ((?x29118 (* 2.0 l_0_10_71)))
 (let ((?x29119 (* ?x29118 l_0_10_75)))
 (let ((?x29115 (* 2.0 l_0_10_70)))
 (let ((?x29116 (* ?x29115 l_0_10_74)))
 (let ((?x29110 (* 2.0 l_0_10_52)))
 (let ((?x29111 (* ?x29110 l_0_10_56)))
 (let ((?x29107 (* 2.0 l_0_10_51)))
 (let ((?x29108 (* ?x29107 l_0_10_55)))
 (let ((?x29104 (* 2.0 l_0_10_50)))
 (let ((?x29105 (* ?x29104 l_0_10_54)))
 (let ((?x29101 (* 2.0 l_0_10_49)))
 (let ((?x29102 (* ?x29101 l_0_10_53)))
 (let ((?x28207 (* l_0_10_136 l_0_10_136)))
 (let ((?x28205 (* l_0_10_135 l_0_10_135)))
 (let ((?x29917 (- (- (* (- l_0_10_133) l_0_10_133) (* l_0_10_134 l_0_10_134)) ?x28205)))
 (let ((?x29924 (- (- (+ (+ (+ (+ (- ?x29917 ?x28207) ?x29102) ?x29105) ?x29108) ?x29111) ?x29116) ?x29119)))
 (= (- (- ?x29924 ?x29122) ?x29125) 0.0))))))))))))))))))))))
(assert
 (let ((?x29969 (* l_0_10_94 l_0_10_94)))
 (let ((?x29967 (* l_0_10_93 l_0_10_93)))
 (let ((?x29965 (* l_0_10_92 l_0_10_92)))
 (let ((?x29963 (* l_0_10_91 l_0_10_91)))
 (let ((?x29124 (* 2.0 l_0_10_73)))
 (let ((?x29244 (* ?x29124 l_0_10_82)))
 (let ((?x29121 (* 2.0 l_0_10_72)))
 (let ((?x29242 (* ?x29121 l_0_10_81)))
 (let ((?x29118 (* 2.0 l_0_10_71)))
 (let ((?x29240 (* ?x29118 l_0_10_80)))
 (let ((?x29115 (* 2.0 l_0_10_70)))
 (let ((?x29238 (* ?x29115 l_0_10_79)))
 (let ((?x29110 (* 2.0 l_0_10_52)))
 (let ((?x29234 (* ?x29110 l_0_10_61)))
 (let ((?x29107 (* 2.0 l_0_10_51)))
 (let ((?x29232 (* ?x29107 l_0_10_60)))
 (let ((?x29104 (* 2.0 l_0_10_50)))
 (let ((?x29230 (* ?x29104 l_0_10_59)))
 (let ((?x29101 (* 2.0 l_0_10_49)))
 (let ((?x29228 (* ?x29101 l_0_10_58)))
 (let ((?x29953 (* l_0_10_178 l_0_10_178)))
 (let ((?x29951 (* l_0_10_177 l_0_10_177)))
 (let ((?x29949 (* l_0_10_176 l_0_10_176)))
 (let ((?x29947 (* l_0_10_175 l_0_10_175)))
 (let ((?x29945 (* l_0_10_157 l_0_10_157)))
 (let ((?x29943 (* l_0_10_156 l_0_10_156)))
 (let ((?x29941 (* l_0_10_155 l_0_10_155)))
 (let ((?x29939 (* l_0_10_154 l_0_10_154)))
 (let ((?x29937 (* l_0_10_115 l_0_10_115)))
 (let ((?x29935 (* l_0_10_114 l_0_10_114)))
 (let ((?x29936 (+ (+ (* l_0_10_112 l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x29935)))
 (let ((?x29950 (- (- (+ (+ (+ (+ (+ ?x29936 ?x29937) ?x29939) ?x29941) ?x29943) ?x29945) ?x29947) ?x29949)))
 (let ((?x29959 (- (+ (+ (+ (+ (- (- ?x29950 ?x29951) ?x29953) ?x29228) ?x29230) ?x29232) ?x29234) ?x29238)))
 (let ((?x29970 (- (- (- (- (- (- (- ?x29959 ?x29240) ?x29242) ?x29244) ?x29963) ?x29965) ?x29967) ?x29969)))
 (= ?x29970 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28622 (* l_0_10_78 l_0_10_78)))
 (let ((?x28619 (* l_0_10_77 l_0_10_77)))
 (let ((?x28616 (* l_0_10_76 l_0_10_76)))
 (let ((?x28613 (* l_0_10_75 l_0_10_75)))
 (let ((?x28610 (* l_0_10_74 l_0_10_74)))
 (let ((?x15289 (* l_0_10_57 l_0_10_57)))
 (let ((?x15241 (* l_0_10_56 l_0_10_56)))
 (let ((?x15232 (* l_0_10_55 l_0_10_55)))
 (let ((?x15218 (* l_0_10_54 l_0_10_54)))
 (let ((?x15208 (* l_0_10_53 l_0_10_53)))
 (let ((?x28285 (* 2.0 l_0_10_136)))
 (let ((?x28286 (* ?x28285 l_0_10_140)))
 (let ((?x28282 (* 2.0 l_0_10_135)))
 (let ((?x28283 (* ?x28282 l_0_10_139)))
 (let ((?x28279 (* 2.0 l_0_10_134)))
 (let ((?x28280 (* ?x28279 l_0_10_138)))
 (let ((?x29979 (+ (- (- (- (* (* (- 2.0) l_0_10_133) l_0_10_137) ?x28280) ?x28283) ?x28286) ?x15208)))
 (let ((?x29986 (- (- (- (+ (+ (+ (+ ?x29979 ?x15218) ?x15232) ?x15241) ?x15289) ?x28610) ?x28613) ?x28616)))
 (= (- (- ?x29986 ?x28619) ?x28622) 0.0))))))))))))))))))))
(assert
 (let ((?x30059 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x30056 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x30053 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x30050 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x29483 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x29480 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x29477 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x29474 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x29471 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x29468 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x29465 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x29462 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x29459 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x29456 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x30036 (* 2.0 l_0_10_178)))
 (let ((?x30037 (* ?x30036 l_0_10_182)))
 (let ((?x30033 (* 2.0 l_0_10_177)))
 (let ((?x30034 (* ?x30033 l_0_10_181)))
 (let ((?x30030 (* 2.0 l_0_10_176)))
 (let ((?x30031 (* ?x30030 l_0_10_180)))
 (let ((?x30027 (* 2.0 l_0_10_175)))
 (let ((?x30028 (* ?x30027 l_0_10_179)))
 (let ((?x30024 (* 2.0 l_0_10_157)))
 (let ((?x30025 (* ?x30024 l_0_10_161)))
 (let ((?x30021 (* 2.0 l_0_10_156)))
 (let ((?x30022 (* ?x30021 l_0_10_160)))
 (let ((?x30018 (* 2.0 l_0_10_155)))
 (let ((?x30019 (* ?x30018 l_0_10_159)))
 (let ((?x30015 (* 2.0 l_0_10_154)))
 (let ((?x30016 (* ?x30015 l_0_10_158)))
 (let ((?x28285 (* 2.0 l_0_10_136)))
 (let ((?x28417 (* ?x28285 l_0_10_145)))
 (let ((?x28282 (* 2.0 l_0_10_135)))
 (let ((?x28415 (* ?x28282 l_0_10_144)))
 (let ((?x28279 (* 2.0 l_0_10_134)))
 (let ((?x28413 (* ?x28279 l_0_10_143)))
 (let ((?x28276 (* 2.0 l_0_10_133)))
 (let ((?x28411 (* ?x28276 l_0_10_142)))
 (let ((?x30008 (* 2.0 l_0_10_115)))
 (let ((?x30009 (* ?x30008 l_0_10_119)))
 (let ((?x30005 (* 2.0 l_0_10_114)))
 (let ((?x30006 (* ?x30005 l_0_10_118)))
 (let ((?x30002 (* 2.0 l_0_10_113)))
 (let ((?x30003 (* ?x30002 l_0_10_117)))
 (let ((?x30011 (- (+ (+ (+ (* (* 2.0 l_0_10_112) l_0_10_116) ?x30003) ?x30006) ?x30009) ?x28411)))
 (let ((?x30026 (+ (+ (+ (+ (- (- (- ?x30011 ?x28413) ?x28415) ?x28417) ?x30016) ?x30019) ?x30022) ?x30025)))
 (let ((?x30041 (+ (+ (+ (- (- (- (- ?x30026 ?x30028) ?x30031) ?x30034) ?x30037) ?x29456) ?x29459) ?x29462)))
 (let ((?x30048 (- (- (- (- (- (+ (+ ?x30041 ?x29465) ?x29468) ?x29471) ?x29474) ?x29477) ?x29480) ?x29483)))
 (= (- (- (- (- ?x30048 ?x30050) ?x30053) ?x30056) ?x30059) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28868 (* l_0_10_84 l_0_10_84)))
 (let ((?x28865 (* l_0_10_83 l_0_10_83)))
 (let ((?x28862 (* l_0_10_82 l_0_10_82)))
 (let ((?x28859 (* l_0_10_81 l_0_10_81)))
 (let ((?x28856 (* l_0_10_80 l_0_10_80)))
 (let ((?x28853 (* l_0_10_79 l_0_10_79)))
 (let ((?x15815 (* l_0_10_63 l_0_10_63)))
 (let ((?x15809 (* l_0_10_62 l_0_10_62)))
 (let ((?x15803 (* l_0_10_61 l_0_10_61)))
 (let ((?x15797 (* l_0_10_60 l_0_10_60)))
 (let ((?x15737 (* l_0_10_59 l_0_10_59)))
 (let ((?x15731 (* l_0_10_58 l_0_10_58)))
 (let ((?x30036 (* 2.0 l_0_10_178)))
 (let ((?x30133 (* ?x30036 l_0_10_187)))
 (let ((?x30033 (* 2.0 l_0_10_177)))
 (let ((?x30131 (* ?x30033 l_0_10_186)))
 (let ((?x30030 (* 2.0 l_0_10_176)))
 (let ((?x30129 (* ?x30030 l_0_10_185)))
 (let ((?x30027 (* 2.0 l_0_10_175)))
 (let ((?x30127 (* ?x30027 l_0_10_184)))
 (let ((?x30024 (* 2.0 l_0_10_157)))
 (let ((?x30125 (* ?x30024 l_0_10_166)))
 (let ((?x30021 (* 2.0 l_0_10_156)))
 (let ((?x30123 (* ?x30021 l_0_10_165)))
 (let ((?x30018 (* 2.0 l_0_10_155)))
 (let ((?x30121 (* ?x30018 l_0_10_164)))
 (let ((?x30015 (* 2.0 l_0_10_154)))
 (let ((?x30119 (* ?x30015 l_0_10_163)))
 (let ((?x30008 (* 2.0 l_0_10_115)))
 (let ((?x30117 (* ?x30008 l_0_10_124)))
 (let ((?x30005 (* 2.0 l_0_10_114)))
 (let ((?x30115 (* ?x30005 l_0_10_123)))
 (let ((?x30002 (* 2.0 l_0_10_113)))
 (let ((?x30113 (* ?x30002 l_0_10_122)))
 (let ((?x30000 (* 2.0 l_0_10_112)))
 (let ((?x30111 (* ?x30000 l_0_10_121)))
 (let ((?x30108 (* 2.0 l_0_10_103)))
 (let ((?x30109 (* ?x30108 l_0_10_94)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x30106 (* ?x15578 l_0_10_93)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x30104 (* ?x15646 l_0_10_92)))
 (let ((?x30112 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_91) ?x30104) ?x30106) ?x30109) ?x30111)))
 (let ((?x30126 (+ (+ (+ (+ (+ (+ (+ ?x30112 ?x30113) ?x30115) ?x30117) ?x30119) ?x30121) ?x30123) ?x30125)))
 (let ((?x30137 (+ (+ (+ (- (- (- (- ?x30126 ?x30127) ?x30129) ?x30131) ?x30133) ?x15731) ?x15737) ?x15797)))
 (let ((?x30144 (- (- (- (- (+ (+ (+ ?x30137 ?x15803) ?x15809) ?x15815) ?x28853) ?x28856) ?x28859) ?x28862)))
 (= (- (- ?x30144 ?x28865) ?x28868) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30220 (* l_0_10_99 l_0_10_99)))
 (let ((?x30218 (* l_0_10_98 l_0_10_98)))
 (let ((?x30216 (* l_0_10_97 l_0_10_97)))
 (let ((?x30214 (* l_0_10_96 l_0_10_96)))
 (let ((?x30212 (* l_0_10_95 l_0_10_95)))
 (let ((?x30210 (* l_0_10_183 l_0_10_183)))
 (let ((?x30208 (* l_0_10_182 l_0_10_182)))
 (let ((?x30206 (* l_0_10_181 l_0_10_181)))
 (let ((?x30204 (* l_0_10_180 l_0_10_180)))
 (let ((?x30202 (* l_0_10_179 l_0_10_179)))
 (let ((?x30200 (* l_0_10_162 l_0_10_162)))
 (let ((?x30198 (* l_0_10_161 l_0_10_161)))
 (let ((?x30196 (* l_0_10_160 l_0_10_160)))
 (let ((?x30194 (* l_0_10_159 l_0_10_159)))
 (let ((?x30192 (* l_0_10_158 l_0_10_158)))
 (let ((?x28672 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28669 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28663 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28660 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28657 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x30185 (* l_0_10_120 l_0_10_120)))
 (let ((?x19108 (* l_0_10_119 l_0_10_119)))
 (let ((?x19106 (* l_0_10_118 l_0_10_118)))
 (let ((?x19107 (+ (+ (* l_0_10_116 l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x19106)))
 (let ((?x30191 (- (- (- (- (- (+ (+ ?x19107 ?x19108) ?x30185) ?x28657) ?x28660) ?x28663) ?x28669) ?x28672)))
 (let ((?x30205 (- (- (+ (+ (+ (+ (+ ?x30191 ?x30192) ?x30194) ?x30196) ?x30198) ?x30200) ?x30202) ?x30204)))
 (let ((?x30219 (- (- (- (- (- (- (- ?x30205 ?x30206) ?x30208) ?x30210) ?x30212) ?x30214) ?x30216) ?x30218)))
 (= (- ?x30219 ?x30220) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x30307 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x30304 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x30301 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x30298 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x30295 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x30292 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x30289 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x30286 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x30283 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x30280 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x28791 (* l_0_10_147 l_0_10_147)))
 (let ((?x28789 (* l_0_10_146 l_0_10_146)))
 (let ((?x28787 (* l_0_10_145 l_0_10_145)))
 (let ((?x28785 (* l_0_10_144 l_0_10_144)))
 (let ((?x28783 (* l_0_10_143 l_0_10_143)))
 (let ((?x28781 (* l_0_10_142 l_0_10_142)))
 (let ((?x30271 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x30268 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x30265 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x30262 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x30259 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x30256 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x30108 (* 2.0 l_0_10_103)))
 (let ((?x30253 (* ?x30108 l_0_10_98)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x30251 (* ?x15578 l_0_10_97)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x30249 (* ?x15646 l_0_10_96)))
 (let ((?x30257 (- (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_95) ?x30249) ?x30251) ?x30253) ?x30256)))
 (let ((?x30274 (- (- (+ (+ (+ (+ (+ ?x30257 ?x30259) ?x30262) ?x30265) ?x30268) ?x30271) ?x28781) ?x28783)))
 (let ((?x30287 (+ (+ (+ (- (- (- (- ?x30274 ?x28785) ?x28787) ?x28789) ?x28791) ?x30280) ?x30283) ?x30286)))
 (let ((?x30308 (- (- (- (- (- (+ (+ ?x30287 ?x30289) ?x30292) ?x30295) ?x30298) ?x30301) ?x30304) ?x30307)))
 (= ?x30308 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30406 (* l_0_10_189 l_0_10_189)))
 (let ((?x30404 (* l_0_10_188 l_0_10_188)))
 (let ((?x30402 (* l_0_10_187 l_0_10_187)))
 (let ((?x30400 (* l_0_10_186 l_0_10_186)))
 (let ((?x30398 (* l_0_10_185 l_0_10_185)))
 (let ((?x30396 (* l_0_10_184 l_0_10_184)))
 (let ((?x30394 (* l_0_10_168 l_0_10_168)))
 (let ((?x30392 (* l_0_10_167 l_0_10_167)))
 (let ((?x30390 (* l_0_10_166 l_0_10_166)))
 (let ((?x30388 (* l_0_10_165 l_0_10_165)))
 (let ((?x30386 (* l_0_10_164 l_0_10_164)))
 (let ((?x30384 (* l_0_10_163 l_0_10_163)))
 (let ((?x30382 (* l_0_10_126 l_0_10_126)))
 (let ((?x30380 (* l_0_10_125 l_0_10_125)))
 (let ((?x30378 (* l_0_10_124 l_0_10_124)))
 (let ((?x30376 (* l_0_10_123 l_0_10_123)))
 (let ((?x30374 (* l_0_10_122 l_0_10_122)))
 (let ((?x30372 (* l_0_10_121 l_0_10_121)))
 (let ((?x30370 (* l_0_10_105 l_0_10_105)))
 (let ((?x30368 (* l_0_10_104 l_0_10_104)))
 (let ((?x30366 (* l_0_10_103 l_0_10_103)))
 (let ((?x30364 (* l_0_10_102 l_0_10_102)))
 (let ((?x30365 (- (- (* (- l_0_10_100) l_0_10_100) (* l_0_10_101 l_0_10_101)) ?x30364)))
 (let ((?x30379 (+ (+ (+ (+ (- (- (- ?x30365 ?x30366) ?x30368) ?x30370) ?x30372) ?x30374) ?x30376) ?x30378)))
 (let ((?x30393 (+ (+ (+ (+ (+ (+ (+ ?x30379 ?x30380) ?x30382) ?x30384) ?x30386) ?x30388) ?x30390) ?x30392)))
 (let ((?x30407 (- (- (- (- (- (- (+ ?x30393 ?x30394) ?x30396) ?x30398) ?x30400) ?x30402) ?x30404) ?x30406)))
 (= ?x30407 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x26650 (* l_0_10_85 l_0_10_85)))
 (let ((?x26646 (* l_0_10_169 l_0_10_169)))
 (let ((?x30447 (+ (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_148 l_0_10_148)) ?x26646)))
 (= (+ ?x30447 ?x26650) 0.0)))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27066 (* ?x26839 l_0_10_88)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27048 (* ?x26815 l_0_10_172)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27044 (* ?x26809 l_0_10_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_109) ?x27044) ?x27048) ?x27066) 0.0))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27206 (* ?x26839 l_0_10_91)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27190 (* ?x26815 l_0_10_175)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27186 (* ?x26809 l_0_10_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x27186) ?x27190) ?x27206) 0.0))))))))
(assert
 (let ((?x26839 (* 2.0 l_0_10_85)))
 (let ((?x27310 (* ?x26839 l_0_10_95)))
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27293 (* ?x26815 l_0_10_179)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27288 (* ?x26809 l_0_10_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_116) ?x27288) ?x27293) ?x27310) 0.0))))))))
(assert
 (let ((?x26815 (* 2.0 l_0_10_169)))
 (let ((?x27361 (* ?x26815 l_0_10_184)))
 (let ((?x26809 (* 2.0 l_0_10_148)))
 (let ((?x27357 (* ?x26809 l_0_10_163)))
 (let ((?x26800 (* 2.0 l_0_10_106)))
 (let ((?x27355 (* ?x26800 l_0_10_121)))
 (= (+ (- (- (* (* 2.0 l_0_10_100) l_0_10_85) ?x27355) ?x27357) ?x27361) 0.0))))))))
(assert
 (let ((?x28142 (* l_0_10_90 l_0_10_90)))
 (let ((?x28140 (* l_0_10_89 l_0_10_89)))
 (let ((?x28138 (* l_0_10_88 l_0_10_88)))
 (let ((?x28116 (* l_0_10_174 l_0_10_174)))
 (let ((?x28114 (* l_0_10_173 l_0_10_173)))
 (let ((?x28112 (* l_0_10_172 l_0_10_172)))
 (let ((?x28108 (* l_0_10_153 l_0_10_153)))
 (let ((?x28106 (* l_0_10_152 l_0_10_152)))
 (let ((?x28104 (* l_0_10_151 l_0_10_151)))
 (let ((?x28096 (* l_0_10_111 l_0_10_111)))
 (let ((?x19423 (- (- (* (- l_0_10_109) l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x28096)))
 (let ((?x30474 (+ (+ (+ (+ (- (- (- ?x19423 ?x28104) ?x28106) ?x28108) ?x28112) ?x28114) ?x28116) ?x28138)))
 (= (+ (+ ?x30474 ?x28140) ?x28142) 0.0))))))))))))))
(assert
 (let ((?x28479 (* 2.0 l_0_10_90)))
 (let ((?x28480 (* ?x28479 l_0_10_93)))
 (let ((?x28476 (* 2.0 l_0_10_89)))
 (let ((?x28477 (* ?x28476 l_0_10_92)))
 (let ((?x28473 (* 2.0 l_0_10_88)))
 (let ((?x28474 (* ?x28473 l_0_10_91)))
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28439 (* ?x28438 l_0_10_177)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28436 (* ?x28435 l_0_10_176)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28433 (* ?x28432 l_0_10_175)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28426 (* ?x28425 l_0_10_156)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28423 (* ?x28422 l_0_10_155)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28420 (* ?x28419 l_0_10_154)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28409 (* ?x28408 l_0_10_114)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x28406 (* ?x28391 l_0_10_113)))
 (let ((?x19441 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_112) ?x28406) ?x28409) ?x28420) ?x28423)))
 (let ((?x30486 (+ (+ (+ (+ (+ (+ (- ?x19441 ?x28426) ?x28433) ?x28436) ?x28439) ?x28474) ?x28477) ?x28480)))
 (= ?x30486 0.0))))))))))))))))))))))))))
(assert
 (let ((?x28479 (* 2.0 l_0_10_90)))
 (let ((?x28738 (* ?x28479 l_0_10_97)))
 (let ((?x28476 (* 2.0 l_0_10_89)))
 (let ((?x28736 (* ?x28476 l_0_10_96)))
 (let ((?x28473 (* 2.0 l_0_10_88)))
 (let ((?x28734 (* ?x28473 l_0_10_95)))
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28687 (* ?x28438 l_0_10_181)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28685 (* ?x28435 l_0_10_180)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28683 (* ?x28432 l_0_10_179)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28681 (* ?x28425 l_0_10_160)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28679 (* ?x28422 l_0_10_159)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28677 (* ?x28419 l_0_10_158)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28647 (* ?x28408 l_0_10_118)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x28645 (* ?x28391 l_0_10_117)))
 (let ((?x19541 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_116) ?x28645) ?x28647) ?x28677) ?x28679)))
 (let ((?x30498 (+ (+ (+ (+ (+ (+ (- ?x19541 ?x28681) ?x28683) ?x28685) ?x28687) ?x28734) ?x28736) ?x28738)))
 (= ?x30498 0.0))))))))))))))))))))))))))
(assert
 (let ((?x28438 (* 2.0 l_0_10_174)))
 (let ((?x28807 (* ?x28438 l_0_10_186)))
 (let ((?x28435 (* 2.0 l_0_10_173)))
 (let ((?x28805 (* ?x28435 l_0_10_185)))
 (let ((?x28432 (* 2.0 l_0_10_172)))
 (let ((?x28803 (* ?x28432 l_0_10_184)))
 (let ((?x28425 (* 2.0 l_0_10_153)))
 (let ((?x28797 (* ?x28425 l_0_10_165)))
 (let ((?x28422 (* 2.0 l_0_10_152)))
 (let ((?x28795 (* ?x28422 l_0_10_164)))
 (let ((?x28419 (* 2.0 l_0_10_151)))
 (let ((?x28793 (* ?x28419 l_0_10_163)))
 (let ((?x28408 (* 2.0 l_0_10_111)))
 (let ((?x28779 (* ?x28408 l_0_10_123)))
 (let ((?x28391 (* 2.0 l_0_10_110)))
 (let ((?x15603 (* ?x28391 l_0_10_122)))
 (let ((?x28386 (* 2.0 l_0_10_109)))
 (let ((?x15599 (* ?x28386 l_0_10_121)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x15604 (* ?x15578 l_0_10_90)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x15647 (* ?x15646 l_0_10_89)))
 (let ((?x19575 (- (- (+ (+ (* (* 2.0 l_0_10_100) l_0_10_88) ?x15647) ?x15604) ?x15599) ?x15603)))
 (let ((?x19560 (+ (+ (+ (- (- (- (- ?x19575 ?x28779) ?x28793) ?x28795) ?x28797) ?x28803) ?x28805) ?x28807)))
 (= ?x19560 0.0))))))))))))))))))))))))))
(assert
 (let ((?x29969 (* l_0_10_94 l_0_10_94)))
 (let ((?x29967 (* l_0_10_93 l_0_10_93)))
 (let ((?x29965 (* l_0_10_92 l_0_10_92)))
 (let ((?x29963 (* l_0_10_91 l_0_10_91)))
 (let ((?x29953 (* l_0_10_178 l_0_10_178)))
 (let ((?x29951 (* l_0_10_177 l_0_10_177)))
 (let ((?x29949 (* l_0_10_176 l_0_10_176)))
 (let ((?x29947 (* l_0_10_175 l_0_10_175)))
 (let ((?x29945 (* l_0_10_157 l_0_10_157)))
 (let ((?x29943 (* l_0_10_156 l_0_10_156)))
 (let ((?x29941 (* l_0_10_155 l_0_10_155)))
 (let ((?x29939 (* l_0_10_154 l_0_10_154)))
 (let ((?x29937 (* l_0_10_115 l_0_10_115)))
 (let ((?x29935 (* l_0_10_114 l_0_10_114)))
 (let ((?x19711 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x29935)))
 (let ((?x30511 (+ (+ (- (- (- (- (- ?x19711 ?x29937) ?x29939) ?x29941) ?x29943) ?x29945) ?x29947) ?x29949)))
 (= (+ (+ (+ (+ (+ (+ ?x30511 ?x29951) ?x29953) ?x29963) ?x29965) ?x29967) ?x29969) 0.0))))))))))))))))))
(assert
 (let ((?x30059 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x30056 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x30053 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x30050 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x30036 (* 2.0 l_0_10_178)))
 (let ((?x30037 (* ?x30036 l_0_10_182)))
 (let ((?x30033 (* 2.0 l_0_10_177)))
 (let ((?x30034 (* ?x30033 l_0_10_181)))
 (let ((?x30030 (* 2.0 l_0_10_176)))
 (let ((?x30031 (* ?x30030 l_0_10_180)))
 (let ((?x30027 (* 2.0 l_0_10_175)))
 (let ((?x30028 (* ?x30027 l_0_10_179)))
 (let ((?x30024 (* 2.0 l_0_10_157)))
 (let ((?x30025 (* ?x30024 l_0_10_161)))
 (let ((?x30021 (* 2.0 l_0_10_156)))
 (let ((?x30022 (* ?x30021 l_0_10_160)))
 (let ((?x30018 (* 2.0 l_0_10_155)))
 (let ((?x30019 (* ?x30018 l_0_10_159)))
 (let ((?x30015 (* 2.0 l_0_10_154)))
 (let ((?x30016 (* ?x30015 l_0_10_158)))
 (let ((?x30008 (* 2.0 l_0_10_115)))
 (let ((?x30009 (* ?x30008 l_0_10_119)))
 (let ((?x30005 (* 2.0 l_0_10_114)))
 (let ((?x30006 (* ?x30005 l_0_10_118)))
 (let ((?x30002 (* 2.0 l_0_10_113)))
 (let ((?x30003 (* ?x30002 l_0_10_117)))
 (let ((?x19754 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_116) ?x30003) ?x30006) ?x30009) ?x30016)))
 (let ((?x30527 (+ (+ (+ (+ (- (- (- ?x19754 ?x30019) ?x30022) ?x30025) ?x30028) ?x30031) ?x30034) ?x30037)))
 (= (+ (+ (+ (+ ?x30527 ?x30050) ?x30053) ?x30056) ?x30059) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30036 (* 2.0 l_0_10_178)))
 (let ((?x30133 (* ?x30036 l_0_10_187)))
 (let ((?x30033 (* 2.0 l_0_10_177)))
 (let ((?x30131 (* ?x30033 l_0_10_186)))
 (let ((?x30030 (* 2.0 l_0_10_176)))
 (let ((?x30129 (* ?x30030 l_0_10_185)))
 (let ((?x30027 (* 2.0 l_0_10_175)))
 (let ((?x30127 (* ?x30027 l_0_10_184)))
 (let ((?x30024 (* 2.0 l_0_10_157)))
 (let ((?x30125 (* ?x30024 l_0_10_166)))
 (let ((?x30021 (* 2.0 l_0_10_156)))
 (let ((?x30123 (* ?x30021 l_0_10_165)))
 (let ((?x30018 (* 2.0 l_0_10_155)))
 (let ((?x30121 (* ?x30018 l_0_10_164)))
 (let ((?x30015 (* 2.0 l_0_10_154)))
 (let ((?x30119 (* ?x30015 l_0_10_163)))
 (let ((?x30008 (* 2.0 l_0_10_115)))
 (let ((?x30117 (* ?x30008 l_0_10_124)))
 (let ((?x30005 (* 2.0 l_0_10_114)))
 (let ((?x30115 (* ?x30005 l_0_10_123)))
 (let ((?x30002 (* 2.0 l_0_10_113)))
 (let ((?x30113 (* ?x30002 l_0_10_122)))
 (let ((?x30000 (* 2.0 l_0_10_112)))
 (let ((?x30111 (* ?x30000 l_0_10_121)))
 (let ((?x30108 (* 2.0 l_0_10_103)))
 (let ((?x30109 (* ?x30108 l_0_10_94)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x30106 (* ?x15578 l_0_10_93)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x30104 (* ?x15646 l_0_10_92)))
 (let ((?x19779 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_91) ?x30104) ?x30106) ?x30109) ?x30111)))
 (let ((?x19763 (- (- (- (- (- (- (- ?x19779 ?x30113) ?x30115) ?x30117) ?x30119) ?x30121) ?x30123) ?x30125)))
 (= (+ (+ (+ (+ ?x19763 ?x30127) ?x30129) ?x30131) ?x30133) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30220 (* l_0_10_99 l_0_10_99)))
 (let ((?x30218 (* l_0_10_98 l_0_10_98)))
 (let ((?x30216 (* l_0_10_97 l_0_10_97)))
 (let ((?x30214 (* l_0_10_96 l_0_10_96)))
 (let ((?x30212 (* l_0_10_95 l_0_10_95)))
 (let ((?x30210 (* l_0_10_183 l_0_10_183)))
 (let ((?x30208 (* l_0_10_182 l_0_10_182)))
 (let ((?x30206 (* l_0_10_181 l_0_10_181)))
 (let ((?x30204 (* l_0_10_180 l_0_10_180)))
 (let ((?x30202 (* l_0_10_179 l_0_10_179)))
 (let ((?x30200 (* l_0_10_162 l_0_10_162)))
 (let ((?x30198 (* l_0_10_161 l_0_10_161)))
 (let ((?x30196 (* l_0_10_160 l_0_10_160)))
 (let ((?x30194 (* l_0_10_159 l_0_10_159)))
 (let ((?x30192 (* l_0_10_158 l_0_10_158)))
 (let ((?x30185 (* l_0_10_120 l_0_10_120)))
 (let ((?x19108 (* l_0_10_119 l_0_10_119)))
 (let ((?x19106 (* l_0_10_118 l_0_10_118)))
 (let ((?x19952 (- (- (* (- l_0_10_116) l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x19106)))
 (let ((?x30546 (- (- (- (- (- (- (- ?x19952 ?x19108) ?x30185) ?x30192) ?x30194) ?x30196) ?x30198) ?x30200)))
 (let ((?x30553 (+ (+ (+ (+ (+ (+ (+ ?x30546 ?x30202) ?x30204) ?x30206) ?x30208) ?x30210) ?x30212) ?x30214)))
 (= (+ (+ (+ ?x30553 ?x30216) ?x30218) ?x30220) 0.0)))))))))))))))))))))))
(assert
 (let ((?x30307 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x30304 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x30301 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x30298 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x30295 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x30292 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x30289 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x30286 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x30283 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x30280 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x30271 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x30268 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x30265 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x30262 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x30259 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x30256 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x30108 (* 2.0 l_0_10_103)))
 (let ((?x30253 (* ?x30108 l_0_10_98)))
 (let ((?x15578 (* 2.0 l_0_10_102)))
 (let ((?x30251 (* ?x15578 l_0_10_97)))
 (let ((?x15646 (* 2.0 l_0_10_101)))
 (let ((?x30249 (* ?x15646 l_0_10_96)))
 (let ((?x19989 (+ (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_95) ?x30249) ?x30251) ?x30253) ?x30256)))
 (let ((?x18740 (- (- (- (- (- (- (- ?x19989 ?x30259) ?x30262) ?x30265) ?x30268) ?x30271) ?x30280) ?x30283)))
 (let ((?x18726 (+ (+ (+ (+ (- (- (- ?x18740 ?x30286) ?x30289) ?x30292) ?x30295) ?x30298) ?x30301) ?x30304)))
 (= (+ ?x18726 ?x30307) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x30406 (* l_0_10_189 l_0_10_189)))
 (let ((?x30404 (* l_0_10_188 l_0_10_188)))
 (let ((?x30402 (* l_0_10_187 l_0_10_187)))
 (let ((?x30400 (* l_0_10_186 l_0_10_186)))
 (let ((?x30398 (* l_0_10_185 l_0_10_185)))
 (let ((?x30396 (* l_0_10_184 l_0_10_184)))
 (let ((?x30394 (* l_0_10_168 l_0_10_168)))
 (let ((?x30392 (* l_0_10_167 l_0_10_167)))
 (let ((?x30390 (* l_0_10_166 l_0_10_166)))
 (let ((?x30388 (* l_0_10_165 l_0_10_165)))
 (let ((?x30386 (* l_0_10_164 l_0_10_164)))
 (let ((?x30384 (* l_0_10_163 l_0_10_163)))
 (let ((?x30382 (* l_0_10_126 l_0_10_126)))
 (let ((?x30380 (* l_0_10_125 l_0_10_125)))
 (let ((?x30378 (* l_0_10_124 l_0_10_124)))
 (let ((?x30376 (* l_0_10_123 l_0_10_123)))
 (let ((?x30374 (* l_0_10_122 l_0_10_122)))
 (let ((?x30372 (* l_0_10_121 l_0_10_121)))
 (let ((?x30370 (* l_0_10_105 l_0_10_105)))
 (let ((?x30368 (* l_0_10_104 l_0_10_104)))
 (let ((?x30366 (* l_0_10_103 l_0_10_103)))
 (let ((?x30364 (* l_0_10_102 l_0_10_102)))
 (let ((?x20105 (+ (+ (* l_0_10_100 l_0_10_100) (* l_0_10_101 l_0_10_101)) ?x30364)))
 (let ((?x30559 (- (- (- (- (+ (+ (+ ?x20105 ?x30366) ?x30368) ?x30370) ?x30372) ?x30374) ?x30376) ?x30378)))
 (let ((?x30566 (- (- (- (- (- (- (- ?x30559 ?x30380) ?x30382) ?x30384) ?x30386) ?x30388) ?x30390) ?x30392)))
 (let ((?x30573 (+ (+ (+ (+ (+ (+ (- ?x30566 ?x30394) ?x30396) ?x30398) ?x30400) ?x30402) ?x30404) ?x30406)))
 (= ?x30573 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x28576 (* l_0_10_141 l_0_10_141)))
 (let ((?x28574 (* l_0_10_140 l_0_10_140)))
 (let ((?x28570 (* l_0_10_139 l_0_10_139)))
 (let ((?x20175 (- (- (* (- l_0_10_137) l_0_10_137) (* l_0_10_138 l_0_10_138)) ?x28570)))
 (= (- (- ?x20175 ?x28574) ?x28576) 0.0))))))
(assert
 (>= l_0_10_1 0.0))
(assert
 (>= l_0_10_3 0.0))
(assert
 (>= l_0_10_6 0.0))
(assert
 (>= l_0_10_10 0.0))
(assert
 (>= l_0_10_15 0.0))
(assert
 (>= l_0_10_21 0.0))
(assert
 (>= l_0_10_22 0.0))
(assert
 (>= l_0_10_24 0.0))
(assert
 (>= l_0_10_27 0.0))
(assert
 (>= l_0_10_31 0.0))
(assert
 (>= l_0_10_36 0.0))
(assert
 (>= l_0_10_42 0.0))
(assert
 (>= l_0_10_43 0.0))
(assert
 (>= l_0_10_45 0.0))
(assert
 (>= l_0_10_48 0.0))
(assert
 (>= l_0_10_52 0.0))
(assert
 (>= l_0_10_57 0.0))
(assert
 (>= l_0_10_63 0.0))
(assert
 (>= l_0_10_64 0.0))
(assert
 (>= l_0_10_66 0.0))
(assert
 (>= l_0_10_69 0.0))
(assert
 (>= l_0_10_73 0.0))
(assert
 (>= l_0_10_78 0.0))
(assert
 (>= l_0_10_84 0.0))
(assert
 (>= l_0_10_85 0.0))
(assert
 (>= l_0_10_87 0.0))
(assert
 (>= l_0_10_90 0.0))
(assert
 (>= l_0_10_94 0.0))
(assert
 (>= l_0_10_99 0.0))
(assert
 (>= l_0_10_105 0.0))
(assert
 (>= l_0_10_106 0.0))
(assert
 (>= l_0_10_108 0.0))
(assert
 (>= l_0_10_111 0.0))
(assert
 (>= l_0_10_115 0.0))
(assert
 (>= l_0_10_120 0.0))
(assert
 (>= l_0_10_126 0.0))
(assert
 (>= l_0_10_127 0.0))
(assert
 (>= l_0_10_129 0.0))
(assert
 (>= l_0_10_132 0.0))
(assert
 (>= l_0_10_136 0.0))
(assert
 (>= l_0_10_141 0.0))
(assert
 (>= l_0_10_147 0.0))
(assert
 (>= l_0_10_148 0.0))
(assert
 (>= l_0_10_150 0.0))
(assert
 (>= l_0_10_153 0.0))
(assert
 (>= l_0_10_157 0.0))
(assert
 (>= l_0_10_162 0.0))
(assert
 (>= l_0_10_168 0.0))
(assert
 (>= l_0_10_169 0.0))
(assert
 (>= l_0_10_171 0.0))
(assert
 (>= l_0_10_174 0.0))
(assert
 (>= l_0_10_178 0.0))
(assert
 (>= l_0_10_183 0.0))
(assert
 (>= l_0_10_189 0.0))
(assert
 (>= l_0_10_190 0.0))
(assert
 (>= l_0_10_192 0.0))
(assert
 (>= l_0_10_195 0.0))
(assert
 (>= l_0_10_199 0.0))
(assert
 (>= l_0_10_204 0.0))
(assert
 (>= l_0_10_210 0.0))
(assert
 (>= l_0_10_211 0.0))
(assert
 (>= l_0_10_213 0.0))
(assert
 (>= l_0_10_216 0.0))
(assert
 (>= l_0_10_220 0.0))
(assert
 (>= l_0_10_225 0.0))
(assert
 (>= l_0_10_231 0.0))
(assert
 (>= l_0_10_232 0.0))
(assert
 (>= l_0_10_234 0.0))
(assert
 (>= l_0_10_237 0.0))
(assert
 (>= l_0_10_241 0.0))
(assert
 (>= l_0_10_246 0.0))
(assert
 (>= l_0_10_252 0.0))
(assert
 (>= l_0_10_253 0.0))
(assert
 (>= l_0_10_255 0.0))
(assert
 (>= l_0_10_258 0.0))
(assert
 (>= l_0_10_262 0.0))
(assert
 (>= l_0_10_267 0.0))
(assert
 (>= l_0_10_273 0.0))
(assert
 (let ((?x30668 (* l_0_11_3 l_0_11_3)))
 (let ((?x30669 (* 6.0 ?x30668)))
 (let ((?x30666 (* l_0_11_276 l_0_11_276)))
 (let ((?x30664 (* l_0_11_275 l_0_11_275)))
 (let ((?x30662 (* l_0_11_255 l_0_11_255)))
 (let ((?x30660 (* l_0_11_254 l_0_11_254)))
 (let ((?x30658 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x30655 (* l_0_11_234 l_0_11_234)))
 (let ((?x30653 (* l_0_11_233 l_0_11_233)))
 (let ((?x30651 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x30648 (* l_0_11_213 l_0_11_213)))
 (let ((?x30646 (* l_0_11_212 l_0_11_212)))
 (let ((?x30643 (* l_0_11_2 l_0_11_2)))
 (let ((?x30644 (* 6.0 ?x30643)))
 (let ((?x30641 (* l_0_11_192 l_0_11_192)))
 (let ((?x30649 (- (- (+ (- (- _a_0_ (* l_0_11_191 l_0_11_191)) ?x30641) ?x30644) ?x30646) ?x30648)))
 (let ((?x30665 (- (- (- (- (- (- (- ?x30649 ?x30651) ?x30653) ?x30655) ?x30658) ?x30660) ?x30662) ?x30664)))
 (let ((?x30676 (- (- (+ (- ?x30665 ?x30666) ?x30669) (* (* 1.0 l_0_11_44) l_0_11_44)) (* (* 1.0 l_0_11_45) l_0_11_45))))
 (let ((?x30682 (+ (+ ?x30676 (* 1.0 (* l_0_11_65 l_0_11_65))) (* 1.0 (* l_0_11_66 l_0_11_66)))))
 (= (- ?x30682 1.0) 0.0)))))))))))))))))))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x30856 (* ?x30855 l_0_11_92)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x30853 (* ?x30852 l_0_11_91)))
 (let ((?x30849 (* 2.0 l_0_11_73)))
 (let ((?x30850 (* ?x30849 l_0_11_82)))
 (let ((?x30846 (* 2.0 l_0_11_72)))
 (let ((?x30847 (* ?x30846 l_0_11_81)))
 (let ((?x30843 (* 2.0 l_0_11_71)))
 (let ((?x30844 (* ?x30843 l_0_11_80)))
 (let ((?x30840 (* 2.0 l_0_11_70)))
 (let ((?x30841 (* ?x30840 l_0_11_79)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x30838 (* ?x30837 l_0_11_80)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x30835 (* ?x30834 l_0_11_79)))
 (let ((?x30831 (* 2.0 l_0_11_52)))
 (let ((?x30832 (* ?x30831 l_0_11_61)))
 (let ((?x30828 (* 2.0 l_0_11_51)))
 (let ((?x30829 (* ?x30828 l_0_11_60)))
 (let ((?x30825 (* 2.0 l_0_11_50)))
 (let ((?x30826 (* ?x30825 l_0_11_59)))
 (let ((?x30822 (* 2.0 l_0_11_49)))
 (let ((?x30823 (* ?x30822 l_0_11_58)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x30820 (* ?x30819 l_0_11_59)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x30817 (* ?x30816 l_0_11_58)))
 (let ((?x30813 (* 12.0 l_0_11_31)))
 (let ((?x30814 (* ?x30813 l_0_11_40)))
 (let ((?x30810 (* 12.0 l_0_11_30)))
 (let ((?x30811 (* ?x30810 l_0_11_39)))
 (let ((?x30807 (* 12.0 l_0_11_29)))
 (let ((?x30808 (* ?x30807 l_0_11_38)))
 (let ((?x30792 (* 12.0 l_0_11_28)))
 (let ((?x30793 (* ?x30792 l_0_11_37)))
 (let ((?x30741 (* 12.0 l_0_11_18)))
 (let ((?x30742 (* ?x30741 l_0_11_9)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x30739 (* ?x30738 l_0_11_176)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x30736 (* ?x30735 l_0_11_175)))
 (let ((?x30732 (* 12.0 l_0_11_17)))
 (let ((?x30733 (* ?x30732 l_0_11_8)))
 (let ((?x30729 (* 12.0 l_0_11_16)))
 (let ((?x30730 (* ?x30729 l_0_11_7)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x30727 (* ?x30726 l_0_11_155)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x30724 (* ?x30723 l_0_11_154)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x30721 (* ?x30720 l_0_11_113)))
 (let ((?x30719 (+ (+ _a_1_ (* (* 12.0 l_0_11_10) l_0_11_19)) (* (* 2.0 l_0_11_107) l_0_11_112))))
 (let ((?x30740 (- (- (+ (+ (+ (+ (+ ?x30719 ?x30721) ?x30724) ?x30727) ?x30730) ?x30733) ?x30736) ?x30739)))
 (let ((?x30749 (- (- (+ ?x30740 ?x30742) (* (* 2.0 l_0_11_196) l_0_11_205)) (* (* 2.0 l_0_11_197) l_0_11_206))))
 (let ((?x30755 (- (- ?x30749 (* (* 2.0 l_0_11_198) l_0_11_207)) (* (* 2.0 l_0_11_199) l_0_11_208))))
 (let ((?x30761 (- (- ?x30755 (* (* 2.0 l_0_11_217) l_0_11_226)) (* (* 2.0 l_0_11_218) l_0_11_227))))
 (let ((?x30767 (- (- ?x30761 (* (* 2.0 l_0_11_219) l_0_11_228)) (* (* 2.0 l_0_11_220) l_0_11_229))))
 (let ((?x30773 (- (- ?x30767 (* (* 2.0 l_0_11_238) l_0_11_247)) (* (* 2.0 l_0_11_239) l_0_11_248))))
 (let ((?x30779 (- (- ?x30773 (* (* 2.0 l_0_11_240) l_0_11_249)) (* (* 2.0 l_0_11_241) l_0_11_250))))
 (let ((?x30785 (- (- ?x30779 (* (* 2.0 l_0_11_259) l_0_11_268)) (* (* 2.0 l_0_11_260) l_0_11_269))))
 (let ((?x30791 (- (- ?x30785 (* (* 2.0 l_0_11_261) l_0_11_270)) (* (* 2.0 l_0_11_262) l_0_11_271))))
 (let ((?x30800 (- (- (- ?x30791 ?x30793) (* (* 2.0 l_0_11_280) l_0_11_289)) (* (* 2.0 l_0_11_281) l_0_11_290))))
 (let ((?x30806 (- (- ?x30800 (* (* 2.0 l_0_11_282) l_0_11_291)) (* (* 2.0 l_0_11_283) l_0_11_292))))
 (let ((?x30827 (- (- (+ (+ (- (- (- ?x30806 ?x30808) ?x30811) ?x30814) ?x30817) ?x30820) ?x30823) ?x30826)))
 (let ((?x30848 (+ (+ (+ (- (- (- (- ?x30827 ?x30829) ?x30832) ?x30835) ?x30838) ?x30841) ?x30844) ?x30847)))
 (= (- (- (+ ?x30848 ?x30850) ?x30853) ?x30856) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30680 (* l_0_11_66 l_0_11_66)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x31061 (* ?x30837 l_0_11_71)))
 (let ((?x30677 (* l_0_11_65 l_0_11_65)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x31058 (* ?x30834 l_0_11_70)))
 (let ((?x20218 (* l_0_11_45 l_0_11_45)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x31055 (* ?x30819 l_0_11_50)))
 (let ((?x30705 (* l_0_11_44 l_0_11_44)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x31052 (* ?x30816 l_0_11_49)))
 (let ((?x31049 (* 12.0 l_0_11_3)))
 (let ((?x31050 (* ?x31049 l_0_11_8)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31035 (* ?x31034 l_0_11_29)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31026 (* ?x31025 l_0_11_28)))
 (let ((?x31016 (* 12.0 l_0_11_2)))
 (let ((?x31017 (* ?x31016 l_0_11_7)))
 (let ((?x31015 (- (- _a_2_ (* (* 2.0 l_0_11_191) l_0_11_196)) (* (* 2.0 l_0_11_192) l_0_11_197))))
 (let ((?x31024 (- (- (+ ?x31015 ?x31017) (* (* 2.0 l_0_11_212) l_0_11_217)) (* (* 2.0 l_0_11_213) l_0_11_218))))
 (let ((?x31033 (- (- (- ?x31024 ?x31026) (* (* 2.0 l_0_11_233) l_0_11_238)) (* (* 2.0 l_0_11_234) l_0_11_239))))
 (let ((?x31042 (- (- (- ?x31033 ?x31035) (* (* 2.0 l_0_11_254) l_0_11_259)) (* (* 2.0 l_0_11_255) l_0_11_260))))
 (let ((?x31048 (- (- ?x31042 (* (* 2.0 l_0_11_275) l_0_11_280)) (* (* 2.0 l_0_11_276) l_0_11_281))))
 (let ((?x31060 (- (+ (+ (- (+ (- (+ ?x31048 ?x31050) ?x31052) ?x30705) ?x31055) ?x20218) ?x31058) ?x30677)))
 (= (- (+ ?x31060 ?x31061) ?x30680) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x31162 (* l_0_11_87 l_0_11_87)))
 (let ((?x31160 (* l_0_11_86 l_0_11_86)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x30838 (* ?x30837 l_0_11_80)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x30835 (* ?x30834 l_0_11_79)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x30820 (* ?x30819 l_0_11_59)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x30817 (* ?x30816 l_0_11_58)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31146 (* ?x31034 l_0_11_38)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31140 (* ?x31025 l_0_11_37)))
 (let ((?x31130 (* l_0_11_171 l_0_11_171)))
 (let ((?x31128 (* l_0_11_170 l_0_11_170)))
 (let ((?x30732 (* 12.0 l_0_11_17)))
 (let ((?x31126 (* ?x30732 l_0_11_3)))
 (let ((?x30729 (* 12.0 l_0_11_16)))
 (let ((?x31124 (* ?x30729 l_0_11_2)))
 (let ((?x31122 (* l_0_11_150 l_0_11_150)))
 (let ((?x31120 (* l_0_11_149 l_0_11_149)))
 (let ((?x20506 (* l_0_11_108 l_0_11_108)))
 (let ((?x31125 (+ (+ (+ (+ (+ _a_3_ (* l_0_11_107 l_0_11_107)) ?x20506) ?x31120) ?x31122) ?x31124)))
 (let ((?x31133 (- (- (- (+ ?x31125 ?x31126) ?x31128) ?x31130) (* (* 2.0 l_0_11_191) l_0_11_205))))
 (let ((?x31137 (- (- ?x31133 (* (* 2.0 l_0_11_192) l_0_11_206)) (* (* 2.0 l_0_11_212) l_0_11_226))))
 (let ((?x31143 (- (- (- ?x31137 (* (* 2.0 l_0_11_213) l_0_11_227)) ?x31140) (* (* 2.0 l_0_11_233) l_0_11_247))))
 (let ((?x31149 (- (- (- ?x31143 (* (* 2.0 l_0_11_234) l_0_11_248)) ?x31146) (* (* 2.0 l_0_11_254) l_0_11_268))))
 (let ((?x31153 (- (- ?x31149 (* (* 2.0 l_0_11_255) l_0_11_269)) (* (* 2.0 l_0_11_275) l_0_11_289))))
 (let ((?x31158 (+ (- (- (- ?x31153 (* (* 2.0 l_0_11_276) l_0_11_290)) ?x30817) ?x30820) ?x30835)))
 (= (- (- (+ ?x31158 ?x30838) ?x31160) ?x31162) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x31312 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x31309 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x31306 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x31303 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x31300 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x31297 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x31294 (* l_0_11_294 l_0_11_294)))
 (let ((?x31292 (* l_0_11_293 l_0_11_293)))
 (let ((?x31290 (* l_0_11_292 l_0_11_292)))
 (let ((?x31288 (* l_0_11_291 l_0_11_291)))
 (let ((?x31286 (* l_0_11_290 l_0_11_290)))
 (let ((?x31284 (* l_0_11_289 l_0_11_289)))
 (let ((?x31282 (* l_0_11_273 l_0_11_273)))
 (let ((?x31280 (* l_0_11_272 l_0_11_272)))
 (let ((?x31278 (* l_0_11_271 l_0_11_271)))
 (let ((?x31276 (* l_0_11_270 l_0_11_270)))
 (let ((?x31274 (* l_0_11_269 l_0_11_269)))
 (let ((?x31272 (* l_0_11_268 l_0_11_268)))
 (let ((?x31270 (* l_0_11_252 l_0_11_252)))
 (let ((?x31268 (* l_0_11_251 l_0_11_251)))
 (let ((?x31266 (* l_0_11_250 l_0_11_250)))
 (let ((?x31264 (* l_0_11_249 l_0_11_249)))
 (let ((?x31262 (* l_0_11_248 l_0_11_248)))
 (let ((?x31260 (* l_0_11_247 l_0_11_247)))
 (let ((?x31258 (* l_0_11_231 l_0_11_231)))
 (let ((?x31256 (* l_0_11_230 l_0_11_230)))
 (let ((?x31254 (* l_0_11_229 l_0_11_229)))
 (let ((?x31252 (* l_0_11_228 l_0_11_228)))
 (let ((?x31250 (* l_0_11_227 l_0_11_227)))
 (let ((?x31248 (* l_0_11_226 l_0_11_226)))
 (let ((?x31246 (* l_0_11_210 l_0_11_210)))
 (let ((?x31243 (* l_0_11_21 l_0_11_21)))
 (let ((?x31244 (* 6.0 ?x31243)))
 (let ((?x31241 (* l_0_11_209 l_0_11_209)))
 (let ((?x31239 (* l_0_11_208 l_0_11_208)))
 (let ((?x31237 (* l_0_11_207 l_0_11_207)))
 (let ((?x31235 (* l_0_11_206 l_0_11_206)))
 (let ((?x31233 (* l_0_11_205 l_0_11_205)))
 (let ((?x31230 (* l_0_11_20 l_0_11_20)))
 (let ((?x31231 (* 6.0 ?x31230)))
 (let ((?x31227 (* l_0_11_19 l_0_11_19)))
 (let ((?x31228 (* 6.0 ?x31227)))
 (let ((?x31224 (* l_0_11_18 l_0_11_18)))
 (let ((?x31225 (* 6.0 ?x31224)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x31222 (* ?x30738 l_0_11_185)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x31220 (* ?x30735 l_0_11_184)))
 (let ((?x31217 (* l_0_11_17 l_0_11_17)))
 (let ((?x31218 (* 6.0 ?x31217)))
 (let ((?x31214 (* l_0_11_16 l_0_11_16)))
 (let ((?x31215 (* 6.0 ?x31214)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x31212 (* ?x30726 l_0_11_164)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x31210 (* ?x30723 l_0_11_163)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x31208 (* ?x30720 l_0_11_122)))
 (let ((?x30717 (* 2.0 l_0_11_107)))
 (let ((?x31206 (* ?x30717 l_0_11_121)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x31204 (* ?x31203 l_0_11_87)))
 (let ((?x31209 (+ (+ (- (- _a_4_ (* (* 2.0 l_0_11_100) l_0_11_86)) ?x31204) ?x31206) ?x31208)))
 (let ((?x31226 (+ (- (- (+ (+ (+ (+ ?x31209 ?x31210) ?x31212) ?x31215) ?x31218) ?x31220) ?x31222) ?x31225)))
 (let ((?x31242 (- (- (- (- (- (+ (+ ?x31226 ?x31228) ?x31231) ?x31233) ?x31235) ?x31237) ?x31239) ?x31241)))
 (let ((?x31257 (- (- (- (- (- (- (+ ?x31242 ?x31244) ?x31246) ?x31248) ?x31250) ?x31252) ?x31254) ?x31256)))
 (let ((?x31271 (- (- (- (- (- (- (- ?x31257 ?x31258) ?x31260) ?x31262) ?x31264) ?x31266) ?x31268) ?x31270)))
 (let ((?x31285 (- (- (- (- (- (- (- ?x31271 ?x31272) ?x31274) ?x31276) ?x31278) ?x31280) ?x31282) ?x31284)))
 (let ((?x31301 (- (- (- (- (- (- (- ?x31285 ?x31286) ?x31288) ?x31290) ?x31292) ?x31294) ?x31297) ?x31300)))
 (let ((?x31316 (- (- (- (- (- ?x31301 ?x31303) ?x31306) ?x31309) ?x31312) (* (* 1.0 l_0_11_58) l_0_11_58))))
 (let ((?x31322 (- (- ?x31316 (* (* 1.0 l_0_11_59) l_0_11_59)) (* (* 1.0 l_0_11_60) l_0_11_60))))
 (let ((?x31328 (- (- ?x31322 (* (* 1.0 l_0_11_61) l_0_11_61)) (* (* 1.0 l_0_11_62) l_0_11_62))))
 (let ((?x31334 (+ (- ?x31328 (* (* 1.0 l_0_11_63) l_0_11_63)) (* 1.0 (* l_0_11_79 l_0_11_79)))))
 (let ((?x31340 (+ (+ ?x31334 (* 1.0 (* l_0_11_80 l_0_11_80))) (* 1.0 (* l_0_11_81 l_0_11_81)))))
 (let ((?x31346 (+ (+ ?x31340 (* 1.0 (* l_0_11_82 l_0_11_82))) (* 1.0 (* l_0_11_83 l_0_11_83)))))
 (= (+ ?x31346 (* 1.0 (* l_0_11_84 l_0_11_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31496 (* l_0_11_9 l_0_11_9)))
 (let ((?x31497 (* 6.0 ?x31496)))
 (let ((?x31493 (* l_0_11_8 l_0_11_8)))
 (let ((?x31494 (* 6.0 ?x31493)))
 (let ((?x31478 (* l_0_11_7 l_0_11_7)))
 (let ((?x31479 (* 6.0 ?x31478)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x31061 (* ?x30837 l_0_11_71)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x31058 (* ?x30834 l_0_11_70)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x31055 (* ?x30819 l_0_11_50)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x31052 (* ?x30816 l_0_11_49)))
 (let ((?x31460 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x31457 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x31454 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x31451 (* l_0_11_283 l_0_11_283)))
 (let ((?x31449 (* l_0_11_282 l_0_11_282)))
 (let ((?x31447 (* l_0_11_281 l_0_11_281)))
 (let ((?x31445 (* l_0_11_280 l_0_11_280)))
 (let ((?x31443 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x31440 (* l_0_11_262 l_0_11_262)))
 (let ((?x31438 (* l_0_11_261 l_0_11_261)))
 (let ((?x31436 (* l_0_11_260 l_0_11_260)))
 (let ((?x31434 (* l_0_11_259 l_0_11_259)))
 (let ((?x31432 (* l_0_11_241 l_0_11_241)))
 (let ((?x31430 (* l_0_11_240 l_0_11_240)))
 (let ((?x31428 (* l_0_11_239 l_0_11_239)))
 (let ((?x31426 (* l_0_11_238 l_0_11_238)))
 (let ((?x31424 (* l_0_11_220 l_0_11_220)))
 (let ((?x31422 (* l_0_11_219 l_0_11_219)))
 (let ((?x31420 (* l_0_11_218 l_0_11_218)))
 (let ((?x31418 (* l_0_11_217 l_0_11_217)))
 (let ((?x31416 (* l_0_11_199 l_0_11_199)))
 (let ((?x31414 (* l_0_11_198 l_0_11_198)))
 (let ((?x31412 (* l_0_11_197 l_0_11_197)))
 (let ((?x31410 (* l_0_11_196 l_0_11_196)))
 (let ((?x31415 (- (- (- (+ _a_5_ (* 6.0 (* l_0_11_10 l_0_11_10))) ?x31410) ?x31412) ?x31414)))
 (let ((?x31429 (- (- (- (- (- (- (- ?x31415 ?x31416) ?x31418) ?x31420) ?x31422) ?x31424) ?x31426) ?x31428)))
 (let ((?x31444 (- (- (- (- (- (- (- ?x31429 ?x31430) ?x31432) ?x31434) ?x31436) ?x31438) ?x31440) ?x31443)))
 (let ((?x31461 (- (- (- (- (- (- (- ?x31444 ?x31445) ?x31447) ?x31449) ?x31451) ?x31454) ?x31457) ?x31460)))
 (let ((?x31469 (- (- (+ (+ ?x31461 ?x31052) ?x31055) (* (* 1.0 l_0_11_49) l_0_11_49)) (* (* 1.0 l_0_11_50) l_0_11_50))))
 (let ((?x31475 (- (- ?x31469 (* (* 1.0 l_0_11_51) l_0_11_51)) (* (* 1.0 l_0_11_52) l_0_11_52))))
 (let ((?x31483 (+ (+ (- (- ?x31475 ?x31058) ?x31061) ?x31479) (* 1.0 (* l_0_11_70 l_0_11_70)))))
 (let ((?x31489 (+ (+ ?x31483 (* 1.0 (* l_0_11_71 l_0_11_71))) (* 1.0 (* l_0_11_72 l_0_11_72)))))
 (= (+ (+ (+ ?x31489 (* 1.0 (* l_0_11_73 l_0_11_73))) ?x31494) ?x31497) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31162 (* l_0_11_87 l_0_11_87)))
 (let ((?x31160 (* l_0_11_86 l_0_11_86)))
 (let ((?x31571 (* l_0_11_69 l_0_11_69)))
 (let ((?x31572 (* 3.0 ?x31571)))
 (let ((?x31568 (* l_0_11_68 l_0_11_68)))
 (let ((?x31569 (* 3.0 ?x31568)))
 (let ((?x31565 (* l_0_11_67 l_0_11_67)))
 (let ((?x31566 (* 3.0 ?x31565)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x31563 (* ?x31562 l_0_11_68)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x31560 (* ?x31559 l_0_11_67)))
 (let ((?x31556 (* l_0_11_6 l_0_11_6)))
 (let ((?x31557 (* 6.0 ?x31556)))
 (let ((?x31553 (* l_0_11_5 l_0_11_5)))
 (let ((?x31554 (* 6.0 ?x31553)))
 (let ((?x31551 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x31548 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x31545 (* (* 3.0 l_0_11_46) l_0_11_46)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x31542 (* ?x31541 l_0_11_47)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x31539 (* ?x31538 l_0_11_46)))
 (let ((?x31535 (* l_0_11_4 l_0_11_4)))
 (let ((?x31536 (* 6.0 ?x31535)))
 (let ((?x31533 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x31530 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x31527 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x31130 (* l_0_11_171 l_0_11_171)))
 (let ((?x31128 (* l_0_11_170 l_0_11_170)))
 (let ((?x31122 (* l_0_11_150 l_0_11_150)))
 (let ((?x31120 (* l_0_11_149 l_0_11_149)))
 (let ((?x21098 (* l_0_11_132 l_0_11_132)))
 (let ((?x21103 (* l_0_11_131 l_0_11_131)))
 (let ((?x21091 (* l_0_11_130 l_0_11_130)))
 (let ((?x21097 (+ (- (* (- l_0_11_107) l_0_11_107) (* l_0_11_108 l_0_11_108)) ?x21091)))
 (let ((?x31528 (- (+ (+ (- (- (+ (+ ?x21097 ?x21103) ?x21098) ?x31120) ?x31122) ?x31128) ?x31130) ?x31527)))
 (let ((?x31549 (- (- (- (- (+ (- (- ?x31528 ?x31530) ?x31533) ?x31536) ?x31539) ?x31542) ?x31545) ?x31548)))
 (let ((?x31570 (+ (+ (+ (+ (+ (+ (- ?x31549 ?x31551) ?x31554) ?x31557) ?x31560) ?x31563) ?x31566) ?x31569)))
 (= (- (+ (+ (+ ?x31570 ?x31572) ?x31160) ?x31162) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30680 (* l_0_11_66 l_0_11_66)))
 (let ((?x31688 (* 3.0 ?x30680)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x31563 (* ?x31562 l_0_11_68)))
 (let ((?x30677 (* l_0_11_65 l_0_11_65)))
 (let ((?x31685 (* 3.0 ?x30677)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x31560 (* ?x31559 l_0_11_67)))
 (let ((?x31556 (* l_0_11_6 l_0_11_6)))
 (let ((?x31557 (* 6.0 ?x31556)))
 (let ((?x31553 (* l_0_11_5 l_0_11_5)))
 (let ((?x31554 (* 6.0 ?x31553)))
 (let ((?x31671 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x31542 (* ?x31541 l_0_11_47)))
 (let ((?x31667 (* (* 3.0 l_0_11_44) l_0_11_44)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x31539 (* ?x31538 l_0_11_46)))
 (let ((?x31535 (* l_0_11_4 l_0_11_4)))
 (let ((?x31536 (* 6.0 ?x31535)))
 (let ((?x31049 (* 12.0 l_0_11_3)))
 (let ((?x31662 (* ?x31049 l_0_11_5)))
 (let ((?x31660 (* l_0_11_279 l_0_11_279)))
 (let ((?x31658 (* l_0_11_278 l_0_11_278)))
 (let ((?x31656 (* l_0_11_277 l_0_11_277)))
 (let ((?x31533 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x31530 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x31652 (* l_0_11_258 l_0_11_258)))
 (let ((?x31650 (* l_0_11_257 l_0_11_257)))
 (let ((?x31648 (* l_0_11_256 l_0_11_256)))
 (let ((?x31527 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31645 (* ?x31034 l_0_11_26)))
 (let ((?x31643 (* l_0_11_237 l_0_11_237)))
 (let ((?x31641 (* l_0_11_236 l_0_11_236)))
 (let ((?x31639 (* l_0_11_235 l_0_11_235)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31637 (* ?x31025 l_0_11_25)))
 (let ((?x31635 (* l_0_11_216 l_0_11_216)))
 (let ((?x31633 (* l_0_11_215 l_0_11_215)))
 (let ((?x31631 (* l_0_11_214 l_0_11_214)))
 (let ((?x31016 (* 12.0 l_0_11_2)))
 (let ((?x31629 (* ?x31016 l_0_11_4)))
 (let ((?x31627 (* l_0_11_195 l_0_11_195)))
 (let ((?x31625 (* l_0_11_194 l_0_11_194)))
 (let ((?x31623 (* l_0_11_193 l_0_11_193)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x31621 (* ?x31620 l_0_11_131)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x31619 (* ?x3457 l_0_11_130)))
 (let ((?x31634 (- (- (+ (- (- (- (+ ?x31619 ?x31621) ?x31623) ?x31625) ?x31627) ?x31629) ?x31631) ?x31633)))
 (let ((?x31647 (- (- (- (- (- (- (- ?x31634 ?x31635) ?x31637) ?x31639) ?x31641) ?x31643) ?x31645) ?x31527)))
 (let ((?x31659 (- (- (- (- (- (- (- ?x31647 ?x31648) ?x31650) ?x31652) ?x31530) ?x31533) ?x31656) ?x31658)))
 (let ((?x31672 (- (- (- (- (+ (+ (- ?x31659 ?x31660) ?x31662) ?x31536) ?x31539) ?x31667) ?x31542) ?x31671)))
 (let ((?x31678 (- (- ?x31672 (* (* 1.0 l_0_11_46) l_0_11_46)) (* (* 1.0 l_0_11_47) l_0_11_47))))
 (let ((?x31684 (+ (+ (+ (- ?x31678 (* (* 1.0 l_0_11_48) l_0_11_48)) ?x31554) ?x31557) ?x31560)))
 (let ((?x31691 (+ (+ (+ (+ ?x31684 ?x31685) ?x31563) ?x31688) (* 1.0 (* l_0_11_67 l_0_11_67)))))
 (let ((?x31695 (+ (+ ?x31691 (* 1.0 (* l_0_11_68 l_0_11_68))) (* 1.0 (* l_0_11_69 l_0_11_69)))))
 (= (- ?x31695 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30680 (* l_0_11_66 l_0_11_66)))
 (let ((?x31688 (* 3.0 ?x30680)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x31781 (* ?x30837 l_0_11_68)))
 (let ((?x30677 (* l_0_11_65 l_0_11_65)))
 (let ((?x31685 (* 3.0 ?x30677)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x31778 (* ?x30834 l_0_11_67)))
 (let ((?x31671 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x31775 (* ?x30819 l_0_11_47)))
 (let ((?x31667 (* (* 3.0 l_0_11_44) l_0_11_44)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x31772 (* ?x30816 l_0_11_46)))
 (let ((?x30668 (* l_0_11_3 l_0_11_3)))
 (let ((?x30669 (* 6.0 ?x30668)))
 (let ((?x31049 (* 12.0 l_0_11_3)))
 (let ((?x31662 (* ?x31049 l_0_11_5)))
 (let ((?x30658 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31645 (* ?x31034 l_0_11_26)))
 (let ((?x30651 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31637 (* ?x31025 l_0_11_25)))
 (let ((?x30643 (* l_0_11_2 l_0_11_2)))
 (let ((?x30644 (* 6.0 ?x30643)))
 (let ((?x31016 (* 12.0 l_0_11_2)))
 (let ((?x31629 (* ?x31016 l_0_11_4)))
 (let ((?x31745 (- (+ (* l_0_11_128 l_0_11_128) (* l_0_11_129 l_0_11_129)) (* (* 2.0 l_0_11_191) l_0_11_193))))
 (let ((?x31751 (- (+ (+ (- ?x31745 (* (* 2.0 l_0_11_192) l_0_11_194)) ?x31629) ?x30644) (* (* 2.0 l_0_11_212) l_0_11_214))))
 (let ((?x31757 (- (- (- (- ?x31751 (* (* 2.0 l_0_11_213) l_0_11_215)) ?x31637) ?x30651) (* (* 2.0 l_0_11_233) l_0_11_235))))
 (let ((?x31763 (- (- (- (- ?x31757 (* (* 2.0 l_0_11_234) l_0_11_236)) ?x31645) ?x30658) (* (* 2.0 l_0_11_254) l_0_11_256))))
 (let ((?x31767 (- (- ?x31763 (* (* 2.0 l_0_11_255) l_0_11_257)) (* (* 2.0 l_0_11_275) l_0_11_277))))
 (let ((?x31773 (- (+ (+ (- ?x31767 (* (* 2.0 l_0_11_276) l_0_11_278)) ?x31662) ?x30669) ?x31772)))
 (let ((?x31783 (+ (+ (+ (+ (- (- (- ?x31773 ?x31667) ?x31775) ?x31671) ?x31778) ?x31685) ?x31781) ?x31688)))
 (= (- ?x31783 3.0) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_11_1) l_0_11_1) (* l_0_11_22 l_0_11_22)) 0.0))
(assert
 (let ((?x31871 (* l_0_11_274 l_0_11_274)))
 (let ((?x31869 (* l_0_11_253 l_0_11_253)))
 (let ((?x31867 (* l_0_11_232 l_0_11_232)))
 (let ((?x31865 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x31859 (* l_0_11_211 l_0_11_211)))
 (let ((?x31857 (* l_0_11_190 l_0_11_190)))
 (let ((?x3998 (* l_0_11_1 l_0_11_1)))
 (let ((?x31855 (* 6.0 ?x3998)))
 (let ((?x31863 (+ (- (- (+ (* (* (- 2.0) l_0_11_1) l_0_11_2) ?x31855) ?x31857) ?x31859) (* (* 2.0 l_0_11_22) l_0_11_23))))
 (let ((?x31875 (- (- (- (- (- ?x31863 ?x31865) ?x31867) ?x31869) ?x31871) (* (* 1.0 l_0_11_43) l_0_11_43))))
 (= (+ ?x31875 (* 1.0 (* l_0_11_64 l_0_11_64))) 0.0))))))))))))
(assert
 (let ((?x31876 (* l_0_11_64 l_0_11_64)))
 (let ((?x31913 (* 3.0 ?x31876)))
 (let ((?x31865 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x31905 (* l_0_11_127 l_0_11_127)))
 (let ((?x3998 (* l_0_11_1 l_0_11_1)))
 (let ((?x31855 (* 6.0 ?x3998)))
 (let ((?x31908 (+ (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_4) ?x31855) ?x31905) (* (* 2.0 l_0_11_22) l_0_11_25))))
 (= (+ (- (- ?x31908 ?x31865) (* (* 3.0 l_0_11_43) l_0_11_43)) ?x31913) 0.0)))))))))
(assert
 (let ((?x31876 (* l_0_11_64 l_0_11_64)))
 (let ((?x31900 (* l_0_11_43 l_0_11_43)))
 (let ((?x31928 (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) (* (* 2.0 l_0_11_22) l_0_11_28))))
 (= (- (+ ?x31928 ?x31900) ?x31876) 0.0)))))
(assert
 (let ((?x31947 (+ (- (* (* (- 2.0) l_0_11_1) l_0_11_11) (* l_0_11_127 l_0_11_127)) (* (* 2.0 l_0_11_22) l_0_11_32))))
 (= ?x31947 0.0)))
(assert
 (let ((?x31968 (* l_0_11_85 l_0_11_85)))
 (let ((?x31964 (* l_0_11_169 l_0_11_169)))
 (let ((?x31962 (* l_0_11_148 l_0_11_148)))
 (let ((?x31963 (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) (* l_0_11_106 l_0_11_106)) ?x31962)))
 (= (- (+ (- ?x31963 ?x31964) (* (* 2.0 l_0_11_22) l_0_11_37)) ?x31968) 0.0))))))
(assert
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32012 (* ?x32011 l_0_11_65)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32009 (* ?x32008 l_0_11_44)))
 (let ((?x30668 (* l_0_11_3 l_0_11_3)))
 (let ((?x19902 (* l_0_11_24 l_0_11_24)))
 (let ((?x17658 (* l_0_11_23 l_0_11_23)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x31994 (* ?x31993 l_0_11_23)))
 (let ((?x30643 (* l_0_11_2 l_0_11_2)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x31985 (* ?x31984 l_0_11_2)))
 (let ((?x31992 (- (- (- ?x31985 (* (* 2.0 l_0_11_190) l_0_11_191)) ?x30643) (* (* 2.0 l_0_11_211) l_0_11_212))))
 (let ((?x32000 (+ (- (+ (- ?x31992 ?x31994) ?x17658) (* (* 2.0 l_0_11_232) l_0_11_233)) ?x19902)))
 (let ((?x32006 (- (- ?x32000 (* (* 2.0 l_0_11_253) l_0_11_254)) (* (* 2.0 l_0_11_274) l_0_11_275))))
 (= (+ (- (- ?x32006 ?x30668) ?x32009) ?x32012) 0.0)))))))))))))))))
(assert
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32094 (* ?x32011 l_0_11_67)))
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32092 (* ?x32091 l_0_11_65)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32089 (* ?x32008 l_0_11_46)))
 (let ((?x32086 (* 6.0 l_0_11_43)))
 (let ((?x32087 (* ?x32086 l_0_11_44)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32069 (* ?x31993 l_0_11_25)))
 (let ((?x31994 (* ?x31993 l_0_11_23)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32059 (* ?x32058 l_0_11_128)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32050 (* ?x31984 l_0_11_4)))
 (let ((?x31985 (* ?x31984 l_0_11_2)))
 (let ((?x32065 (- (- (+ (+ ?x31985 ?x32050) ?x32059) (* (* 2.0 l_0_11_190) l_0_11_193)) (* (* 2.0 l_0_11_2) l_0_11_4))))
 (let ((?x32073 (+ (- (- (- ?x32065 (* (* 2.0 l_0_11_211) l_0_11_214)) ?x31994) ?x32069) (* (* 2.0 l_0_11_23) l_0_11_25))))
 (let ((?x32078 (+ (- ?x32073 (* (* 2.0 l_0_11_232) l_0_11_235)) (* (* 2.0 l_0_11_24) l_0_11_26))))
 (let ((?x32082 (- (- ?x32078 (* (* 2.0 l_0_11_253) l_0_11_256)) (* (* 2.0 l_0_11_274) l_0_11_277))))
 (let ((?x32093 (+ (- (- (- ?x32082 (* (* 2.0 l_0_11_3) l_0_11_5)) ?x32087) ?x32089) ?x32092)))
 (= (+ ?x32093 ?x32094) 0.0)))))))))))))))))))))))
(assert
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32170 (* ?x32011 l_0_11_70)))
 (let ((?x32012 (* ?x32011 l_0_11_65)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32167 (* ?x32008 l_0_11_49)))
 (let ((?x32009 (* ?x32008 l_0_11_44)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32152 (* ?x31993 l_0_11_28)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x4258 (* ?x31984 l_0_11_7)))
 (let ((?x32149 (- (- ?x4258 (* (* 2.0 l_0_11_190) l_0_11_196)) (* (* 2.0 l_0_11_2) l_0_11_7))))
 (let ((?x32155 (+ (- (- ?x32149 (* (* 2.0 l_0_11_211) l_0_11_217)) ?x32152) (* (* 2.0 l_0_11_23) l_0_11_28))))
 (let ((?x32159 (+ (- ?x32155 (* (* 2.0 l_0_11_232) l_0_11_238)) (* (* 2.0 l_0_11_24) l_0_11_29))))
 (let ((?x32163 (- (- ?x32159 (* (* 2.0 l_0_11_253) l_0_11_259)) (* (* 2.0 l_0_11_274) l_0_11_280))))
 (let ((?x32169 (- (- (+ (- ?x32163 (* (* 2.0 l_0_11_3) l_0_11_8)) ?x32009) ?x32167) ?x32012)))
 (= (+ ?x32169 ?x32170) 0.0)))))))))))))))))
(assert
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32249 (* ?x32011 l_0_11_74)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32247 (* ?x32008 l_0_11_53)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32235 (* ?x31993 l_0_11_32)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32059 (* ?x32058 l_0_11_128)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32223 (* ?x31984 l_0_11_11)))
 (let ((?x32229 (- (- ?x32223 (* (* 2.0 l_0_11_11) l_0_11_2)) (* (* 2.0 l_0_11_12) l_0_11_3))))
 (let ((?x32234 (- (- (- ?x32229 ?x32059) (* (* 2.0 l_0_11_190) l_0_11_200)) (* (* 2.0 l_0_11_211) l_0_11_221))))
 (let ((?x32240 (- (+ (- ?x32234 ?x32235) (* (* 2.0 l_0_11_23) l_0_11_32)) (* (* 2.0 l_0_11_232) l_0_11_242))))
 (let ((?x32244 (- (+ ?x32240 (* (* 2.0 l_0_11_24) l_0_11_33)) (* (* 2.0 l_0_11_253) l_0_11_263))))
 (= (+ (- (- ?x32244 (* (* 2.0 l_0_11_274) l_0_11_284)) ?x32247) ?x32249) 0.0))))))))))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32331 (* ?x32330 l_0_11_86)))
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32328 (* ?x32011 l_0_11_79)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32326 (* ?x32008 l_0_11_58)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32314 (* ?x31993 l_0_11_37)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32305 (* ?x32304 l_0_11_170)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32299 (* ?x32298 l_0_11_149)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32288 (* ?x31984 l_0_11_16)))
 (let ((?x32303 (- (+ (+ ?x32288 (* (* 2.0 l_0_11_106) l_0_11_107)) ?x32299) (* (* 2.0 l_0_11_16) l_0_11_2))))
 (let ((?x32311 (- (- (- ?x32303 ?x32305) (* (* 2.0 l_0_11_17) l_0_11_3)) (* (* 2.0 l_0_11_190) l_0_11_205))))
 (let ((?x32317 (+ (- (- ?x32311 (* (* 2.0 l_0_11_211) l_0_11_226)) ?x32314) (* (* 2.0 l_0_11_23) l_0_11_37))))
 (let ((?x32321 (+ (- ?x32317 (* (* 2.0 l_0_11_232) l_0_11_247)) (* (* 2.0 l_0_11_24) l_0_11_38))))
 (let ((?x32325 (- (- ?x32321 (* (* 2.0 l_0_11_253) l_0_11_268)) (* (* 2.0 l_0_11_274) l_0_11_289))))
 (= (- (+ (- ?x32325 ?x32326) ?x32328) ?x32331) 0.0)))))))))))))))))))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32412 (* ?x32091 l_0_11_67)))
 (let ((?x32092 (* ?x32091 l_0_11_65)))
 (let ((?x31556 (* l_0_11_6 l_0_11_6)))
 (let ((?x31553 (* l_0_11_5 l_0_11_5)))
 (let ((?x32086 (* 6.0 l_0_11_43)))
 (let ((?x32407 (* ?x32086 l_0_11_46)))
 (let ((?x32087 (* ?x32086 l_0_11_44)))
 (let ((?x31535 (* l_0_11_4 l_0_11_4)))
 (let ((?x21297 (* l_0_11_27 l_0_11_27)))
 (let ((?x31587 (* l_0_11_26 l_0_11_26)))
 (let ((?x21271 (* l_0_11_25 l_0_11_25)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32069 (* ?x31993 l_0_11_25)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32399 (* ?x32058 l_0_11_130)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32050 (* ?x31984 l_0_11_4)))
 (let ((?x32406 (- (- (+ (+ (+ (- (+ ?x32050 ?x32399) ?x32069) ?x21271) ?x31587) ?x21297) ?x31535) ?x32087)))
 (= (+ (+ (- (- (- ?x32406 ?x32407) ?x31553) ?x31556) ?x32092) ?x32412) 0.0)))))))))))))))))))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32462 (* ?x32091 l_0_11_70)))
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32094 (* ?x32011 l_0_11_67)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32089 (* ?x32008 l_0_11_46)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32152 (* ?x31993 l_0_11_28)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x4692 (* ?x32058 l_0_11_133)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x4258 (* ?x31984 l_0_11_7)))
 (let ((?x32445 (+ (+ (- (+ ?x4258 ?x4692) ?x32152) (* (* 2.0 l_0_11_25) l_0_11_28)) (* (* 2.0 l_0_11_26) l_0_11_29))))
 (let ((?x32451 (- (+ ?x32445 (* (* 2.0 l_0_11_27) l_0_11_30)) (* (* 2.0 l_0_11_4) l_0_11_7))))
 (let ((?x32457 (- (- (+ ?x32451 ?x32089) (* (* 6.0 l_0_11_43) l_0_11_49)) (* (* 2.0 l_0_11_5) l_0_11_8))))
 (= (+ (- (- ?x32457 (* (* 2.0 l_0_11_6) l_0_11_9)) ?x32094) ?x32462) 0.0)))))))))))))))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32519 (* ?x32091 l_0_11_74)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32235 (* ?x31993 l_0_11_32)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32505 (* ?x32058 l_0_11_137)))
 (let ((?x32399 (* ?x32058 l_0_11_130)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32223 (* ?x31984 l_0_11_11)))
 (let ((?x32503 (- (- ?x32223 (* (* 2.0 l_0_11_11) l_0_11_4)) (* (* 2.0 l_0_11_12) l_0_11_5))))
 (let ((?x32510 (- (- (+ (- ?x32503 ?x32399) ?x32505) (* (* 2.0 l_0_11_13) l_0_11_6)) ?x32235)))
 (let ((?x32514 (+ (+ ?x32510 (* (* 2.0 l_0_11_25) l_0_11_32)) (* (* 2.0 l_0_11_26) l_0_11_33))))
 (let ((?x32518 (- (+ ?x32514 (* (* 2.0 l_0_11_27) l_0_11_34)) (* (* 6.0 l_0_11_43) l_0_11_53))))
 (= (+ ?x32518 ?x32519) 0.0)))))))))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32566 (* ?x32330 l_0_11_88)))
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32564 (* ?x32091 l_0_11_79)))
 (let ((?x31993 (* 12.0 l_0_11_22)))
 (let ((?x32314 (* ?x31993 l_0_11_37)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32548 (* ?x32304 l_0_11_172)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32544 (* ?x32298 l_0_11_151)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32542 (* ?x32058 l_0_11_142)))
 (let ((?x31984 (* 12.0 l_0_11_1)))
 (let ((?x32288 (* ?x31984 l_0_11_16)))
 (let ((?x32547 (- (+ (+ (+ ?x32288 (* (* 2.0 l_0_11_106) l_0_11_109)) ?x32542) ?x32544) (* (* 2.0 l_0_11_16) l_0_11_4))))
 (let ((?x32554 (- (- (- ?x32547 ?x32548) (* (* 2.0 l_0_11_17) l_0_11_5)) (* (* 2.0 l_0_11_18) l_0_11_6))))
 (let ((?x32559 (+ (+ (- ?x32554 ?x32314) (* (* 2.0 l_0_11_25) l_0_11_37)) (* (* 2.0 l_0_11_26) l_0_11_38))))
 (let ((?x32563 (- (+ ?x32559 (* (* 2.0 l_0_11_27) l_0_11_39)) (* (* 6.0 l_0_11_43) l_0_11_58))))
 (= (- (+ ?x32563 ?x32564) ?x32566) 0.0))))))))))))))))))))
(assert
 (let ((?x31496 (* l_0_11_9 l_0_11_9)))
 (let ((?x31493 (* l_0_11_8 l_0_11_8)))
 (let ((?x31478 (* l_0_11_7 l_0_11_7)))
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32170 (* ?x32011 l_0_11_70)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32167 (* ?x32008 l_0_11_49)))
 (let ((?x21170 (* l_0_11_31 l_0_11_31)))
 (let ((?x21197 (* l_0_11_30 l_0_11_30)))
 (let ((?x21191 (* l_0_11_29 l_0_11_29)))
 (let ((?x32596 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_28 l_0_11_28)) ?x21191)))
 (let ((?x32603 (- (- (- (- (+ (+ (+ ?x32596 ?x21197) ?x21170) ?x32167) ?x32170) ?x31478) ?x31493) ?x31496)))
 (= ?x32603 0.0))))))))))))))
(assert
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32249 (* ?x32011 l_0_11_74)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32247 (* ?x32008 l_0_11_53)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x4692 (* ?x32058 l_0_11_133)))
 (let ((?x32612 (- (* (* (- 2.0) l_0_11_10) l_0_11_14) (* (* 2.0 l_0_11_11) l_0_11_7))))
 (let ((?x32617 (- (- (- ?x32612 (* (* 2.0 l_0_11_12) l_0_11_8)) ?x4692) (* (* 2.0 l_0_11_13) l_0_11_9))))
 (let ((?x32623 (+ (+ ?x32617 (* (* 2.0 l_0_11_28) l_0_11_32)) (* (* 2.0 l_0_11_29) l_0_11_33))))
 (let ((?x32629 (+ (+ ?x32623 (* (* 2.0 l_0_11_30) l_0_11_34)) (* (* 2.0 l_0_11_31) l_0_11_35))))
 (= (- (+ ?x32629 ?x32247) ?x32249) 0.0))))))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32676 (* ?x32330 l_0_11_91)))
 (let ((?x32011 (* 2.0 l_0_11_64)))
 (let ((?x32328 (* ?x32011 l_0_11_79)))
 (let ((?x32008 (* 2.0 l_0_11_43)))
 (let ((?x32326 (* ?x32008 l_0_11_58)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32660 (* ?x32304 l_0_11_175)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32656 (* ?x32298 l_0_11_154)))
 (let ((?x32655 (+ (* (* (- 2.0) l_0_11_10) l_0_11_19) (* (* 2.0 l_0_11_106) l_0_11_112))))
 (let ((?x32663 (- (- (- (+ ?x32655 ?x32656) (* (* 2.0 l_0_11_16) l_0_11_7)) ?x32660) (* (* 2.0 l_0_11_17) l_0_11_8))))
 (let ((?x32667 (+ (- ?x32663 (* (* 2.0 l_0_11_18) l_0_11_9)) (* (* 2.0 l_0_11_28) l_0_11_37))))
 (let ((?x32671 (+ (+ ?x32667 (* (* 2.0 l_0_11_29) l_0_11_38)) (* (* 2.0 l_0_11_30) l_0_11_39))))
 (let ((?x32677 (- (- (+ (+ ?x32671 (* (* 2.0 l_0_11_31) l_0_11_40)) ?x32326) ?x32328) ?x32676)))
 (= ?x32677 0.0)))))))))))))))))
(assert
 (let ((?x32717 (* l_0_11_36 l_0_11_36)))
 (let ((?x32715 (* l_0_11_35 l_0_11_35)))
 (let ((?x32713 (* l_0_11_34 l_0_11_34)))
 (let ((?x32711 (* l_0_11_33 l_0_11_33)))
 (let ((?x32709 (* l_0_11_32 l_0_11_32)))
 (let ((?x32707 (* l_0_11_15 l_0_11_15)))
 (let ((?x32705 (* l_0_11_14 l_0_11_14)))
 (let ((?x32703 (* l_0_11_13 l_0_11_13)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32505 (* ?x32058 l_0_11_137)))
 (let ((?x32702 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x32505)))
 (let ((?x32716 (+ (+ (+ (+ (- (- (- ?x32702 ?x32703) ?x32705) ?x32707) ?x32709) ?x32711) ?x32713) ?x32715)))
 (= (+ ?x32716 ?x32717) 0.0))))))))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32761 (* ?x32330 l_0_11_95)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32744 (* ?x32304 l_0_11_179)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32739 (* ?x32298 l_0_11_158)))
 (let ((?x32058 (* 2.0 l_0_11_127)))
 (let ((?x32542 (* ?x32058 l_0_11_142)))
 (let ((?x32730 (- (* (* 2.0 l_0_11_106) l_0_11_116) (* (* 2.0 l_0_11_11) l_0_11_16))))
 (let ((?x32735 (- (- (- ?x32730 (* (* 2.0 l_0_11_12) l_0_11_17)) ?x32542) (* (* 2.0 l_0_11_13) l_0_11_18))))
 (let ((?x32743 (- (+ (- ?x32735 (* (* 2.0 l_0_11_14) l_0_11_19)) ?x32739) (* (* 2.0 l_0_11_15) l_0_11_20))))
 (let ((?x32751 (+ (+ (- ?x32743 ?x32744) (* (* 2.0 l_0_11_32) l_0_11_37)) (* (* 2.0 l_0_11_33) l_0_11_38))))
 (let ((?x32757 (+ (+ ?x32751 (* (* 2.0 l_0_11_34) l_0_11_39)) (* (* 2.0 l_0_11_35) l_0_11_40))))
 (= (- (+ ?x32757 (* (* 2.0 l_0_11_36) l_0_11_41)) ?x32761) 0.0)))))))))))))))
(assert
 (let ((?x20934 (* l_0_11_42 l_0_11_42)))
 (let ((?x20890 (* l_0_11_41 l_0_11_41)))
 (let ((?x20928 (* l_0_11_40 l_0_11_40)))
 (let ((?x20922 (* l_0_11_39 l_0_11_39)))
 (let ((?x20916 (* l_0_11_38 l_0_11_38)))
 (let ((?x20910 (* l_0_11_37 l_0_11_37)))
 (let ((?x31243 (* l_0_11_21 l_0_11_21)))
 (let ((?x31230 (* l_0_11_20 l_0_11_20)))
 (let ((?x31227 (* l_0_11_19 l_0_11_19)))
 (let ((?x31224 (* l_0_11_18 l_0_11_18)))
 (let ((?x31217 (* l_0_11_17 l_0_11_17)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32808 (* ?x32304 l_0_11_184)))
 (let ((?x31214 (* l_0_11_16 l_0_11_16)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32805 (* ?x32298 l_0_11_163)))
 (let ((?x32289 (* 2.0 l_0_11_106)))
 (let ((?x32803 (* ?x32289 l_0_11_121)))
 (let ((?x32809 (- (- (+ (+ (* (* (- 2.0) l_0_11_100) l_0_11_85) ?x32803) ?x32805) ?x31214) ?x32808)))
 (let ((?x32816 (+ (+ (- (- (- (- (- ?x32809 ?x31217) ?x31224) ?x31227) ?x31230) ?x31243) ?x20910) ?x20916)))
 (= (+ (+ (+ (+ ?x32816 ?x20922) ?x20928) ?x20890) ?x20934) 0.0))))))))))))))))))))))
(assert
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x32928 (* ?x32927 l_0_11_72)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x32925 (* ?x32924 l_0_11_71)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x32922 (* ?x32921 l_0_11_70)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x32919 (* ?x31562 l_0_11_71)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x31781 (* ?x30837 l_0_11_68)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x32916 (* ?x31559 l_0_11_70)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x31778 (* ?x30834 l_0_11_67)))
 (let ((?x32913 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x32910 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x32907 (* ?x32906 l_0_11_51)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x32904 (* ?x32903 l_0_11_50)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x32901 (* ?x32900 l_0_11_49)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x32898 (* ?x31541 l_0_11_50)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x31775 (* ?x30819 l_0_11_47)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x32895 (* ?x31538 l_0_11_49)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x31772 (* ?x30816 l_0_11_46)))
 (let ((?x32892 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x31049 (* 12.0 l_0_11_3)))
 (let ((?x31050 (* ?x31049 l_0_11_8)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x32879 (* ?x32878 l_0_11_30)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x32876 (* ?x32875 l_0_11_29)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x32864 (* ?x32863 l_0_11_28)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31035 (* ?x31034 l_0_11_29)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31026 (* ?x31025 l_0_11_28)))
 (let ((?x31016 (* 12.0 l_0_11_2)))
 (let ((?x31017 (* ?x31016 l_0_11_7)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x21749 (* ?x31620 l_0_11_134)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x21752 (* ?x3457 l_0_11_133)))
 (let ((?x32838 (- (- (+ ?x21752 ?x21749) (* (* 2.0 l_0_11_193) l_0_11_196)) (* (* 2.0 l_0_11_194) l_0_11_197))))
 (let ((?x32845 (- (+ (- ?x32838 (* (* 2.0 l_0_11_195) l_0_11_198)) ?x31017) (* (* 2.0 l_0_11_214) l_0_11_217))))
 (let ((?x32851 (- (- ?x32845 (* (* 2.0 l_0_11_215) l_0_11_218)) (* (* 2.0 l_0_11_216) l_0_11_219))))
 (let ((?x32858 (- (- (- ?x32851 ?x31026) (* (* 2.0 l_0_11_235) l_0_11_238)) (* (* 2.0 l_0_11_236) l_0_11_239))))
 (let ((?x32868 (- (- (- (- ?x32858 (* (* 2.0 l_0_11_237) l_0_11_240)) ?x31035) ?x32864) (* (* 2.0 l_0_11_256) l_0_11_259))))
 (let ((?x32874 (- (- ?x32868 (* (* 2.0 l_0_11_257) l_0_11_260)) (* (* 2.0 l_0_11_258) l_0_11_261))))
 (let ((?x32886 (- (- (- (- ?x32874 ?x32876) ?x32879) (* (* 2.0 l_0_11_277) l_0_11_280)) (* (* 2.0 l_0_11_278) l_0_11_281))))
 (let ((?x32894 (+ (+ (+ (- ?x32886 (* (* 2.0 l_0_11_279) l_0_11_282)) ?x31050) ?x32892) ?x31772)))
 (let ((?x32911 (+ (- (- (- (- (+ (- ?x32894 ?x32895) ?x31775) ?x32898) ?x32901) ?x32904) ?x32907) ?x32910)))
 (let ((?x32926 (+ (+ (+ (- (+ (- (+ ?x32911 ?x32913) ?x31778) ?x32916) ?x31781) ?x32919) ?x32922) ?x32925)))
 (= (+ ?x32926 ?x32928) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x33041 (* ?x32927 l_0_11_76)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x33039 (* ?x32924 l_0_11_75)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x33037 (* ?x32921 l_0_11_74)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x33035 (* ?x31562 l_0_11_75)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x33033 (* ?x31559 l_0_11_74)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x33031 (* ?x32906 l_0_11_55)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x33029 (* ?x32903 l_0_11_54)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x33027 (* ?x32900 l_0_11_53)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x33025 (* ?x31541 l_0_11_54)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x33023 (* ?x31538 l_0_11_53)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x33015 (* ?x32878 l_0_11_34)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x33013 (* ?x32875 l_0_11_33)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x33005 (* ?x32863 l_0_11_32)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x33003 (* ?x31034 l_0_11_33)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x32995 (* ?x31025 l_0_11_32)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x32981 (* ?x32980 l_0_11_6)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x32978 (* ?x31620 l_0_11_138)))
 (let ((?x31621 (* ?x31620 l_0_11_131)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x32975 (* ?x3457 l_0_11_137)))
 (let ((?x31619 (* ?x3457 l_0_11_130)))
 (let ((?x21798 (* 12.0 l_0_11_12)))
 (let ((?x32972 (* ?x21798 l_0_11_5)))
 (let ((?x32970 (* ?x21798 l_0_11_3)))
 (let ((?x22000 (* 12.0 l_0_11_11)))
 (let ((?x22004 (* ?x22000 l_0_11_4)))
 (let ((?x22001 (* ?x22000 l_0_11_2)))
 (let ((?x32979 (+ (- (+ (- (+ (+ (+ ?x22001 ?x22004) ?x32970) ?x32972) ?x31619) ?x32975) ?x31621) ?x32978)))
 (let ((?x32986 (- (- (+ ?x32979 ?x32981) (* (* 2.0 l_0_11_193) l_0_11_200)) (* (* 2.0 l_0_11_194) l_0_11_201))))
 (let ((?x32990 (- (- ?x32986 (* (* 2.0 l_0_11_195) l_0_11_202)) (* (* 2.0 l_0_11_214) l_0_11_221))))
 (let ((?x32994 (- (- ?x32990 (* (* 2.0 l_0_11_215) l_0_11_222)) (* (* 2.0 l_0_11_216) l_0_11_223))))
 (let ((?x33000 (- (- (- ?x32994 ?x32995) (* (* 2.0 l_0_11_235) l_0_11_242)) (* (* 2.0 l_0_11_236) l_0_11_243))))
 (let ((?x33008 (- (- (- (- ?x33000 (* (* 2.0 l_0_11_237) l_0_11_244)) ?x33003) ?x33005) (* (* 2.0 l_0_11_256) l_0_11_263))))
 (let ((?x33012 (- (- ?x33008 (* (* 2.0 l_0_11_257) l_0_11_264)) (* (* 2.0 l_0_11_258) l_0_11_265))))
 (let ((?x33020 (- (- (- (- ?x33012 ?x33013) ?x33015) (* (* 2.0 l_0_11_277) l_0_11_284)) (* (* 2.0 l_0_11_278) l_0_11_285))))
 (let ((?x33028 (- (- (- (- ?x33020 (* (* 2.0 l_0_11_279) l_0_11_286)) ?x33023) ?x33025) ?x33027)))
 (let ((?x33042 (+ (+ (+ (+ (+ (- (- ?x33028 ?x33029) ?x33031) ?x33033) ?x33035) ?x33037) ?x33039) ?x33041)))
 (= ?x33042 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x33160 (* ?x30855 l_0_11_89)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x33158 (* ?x30852 l_0_11_88)))
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x33156 (* ?x32927 l_0_11_81)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x33154 (* ?x32924 l_0_11_80)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x33152 (* ?x32921 l_0_11_79)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x33150 (* ?x31562 l_0_11_80)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x33148 (* ?x31559 l_0_11_79)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x33146 (* ?x32906 l_0_11_60)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x33144 (* ?x32903 l_0_11_59)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x33142 (* ?x32900 l_0_11_58)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x33140 (* ?x31541 l_0_11_59)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x33138 (* ?x31538 l_0_11_58)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x33130 (* ?x32878 l_0_11_39)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x33128 (* ?x32875 l_0_11_38)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x33120 (* ?x32863 l_0_11_37)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x31146 (* ?x31034 l_0_11_38)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x31140 (* ?x31025 l_0_11_37)))
 (let ((?x30741 (* 12.0 l_0_11_18)))
 (let ((?x33098 (* ?x30741 l_0_11_6)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x33096 (* ?x30738 l_0_11_173)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x33094 (* ?x30735 l_0_11_172)))
 (let ((?x30732 (* 12.0 l_0_11_17)))
 (let ((?x33092 (* ?x30732 l_0_11_5)))
 (let ((?x31126 (* ?x30732 l_0_11_3)))
 (let ((?x30729 (* 12.0 l_0_11_16)))
 (let ((?x33089 (* ?x30729 l_0_11_4)))
 (let ((?x31124 (* ?x30729 l_0_11_2)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x33086 (* ?x30726 l_0_11_152)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x33084 (* ?x30723 l_0_11_151)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x33082 (* ?x31620 l_0_11_143)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x33080 (* ?x3457 l_0_11_142)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x33078 (* ?x30720 l_0_11_110)))
 (let ((?x33085 (+ (+ (+ (+ (* (* 2.0 l_0_11_107) l_0_11_109) ?x33078) ?x33080) ?x33082) ?x33084)))
 (let ((?x33097 (- (- (+ (+ (+ (+ (+ ?x33085 ?x33086) ?x31124) ?x33089) ?x31126) ?x33092) ?x33094) ?x33096)))
 (let ((?x33103 (- (- (+ ?x33097 ?x33098) (* (* 2.0 l_0_11_193) l_0_11_205)) (* (* 2.0 l_0_11_194) l_0_11_206))))
 (let ((?x33107 (- (- ?x33103 (* (* 2.0 l_0_11_195) l_0_11_207)) (* (* 2.0 l_0_11_214) l_0_11_226))))
 (let ((?x33111 (- (- ?x33107 (* (* 2.0 l_0_11_215) l_0_11_227)) (* (* 2.0 l_0_11_216) l_0_11_228))))
 (let ((?x33116 (- (- (- ?x33111 ?x31140) (* (* 2.0 l_0_11_235) l_0_11_247)) (* (* 2.0 l_0_11_236) l_0_11_248))))
 (let ((?x33123 (- (- (- (- ?x33116 (* (* 2.0 l_0_11_237) l_0_11_249)) ?x31146) ?x33120) (* (* 2.0 l_0_11_256) l_0_11_268))))
 (let ((?x33127 (- (- ?x33123 (* (* 2.0 l_0_11_257) l_0_11_269)) (* (* 2.0 l_0_11_258) l_0_11_270))))
 (let ((?x33135 (- (- (- (- ?x33127 ?x33128) ?x33130) (* (* 2.0 l_0_11_277) l_0_11_289)) (* (* 2.0 l_0_11_278) l_0_11_290))))
 (let ((?x33143 (- (- (- (- ?x33135 (* (* 2.0 l_0_11_279) l_0_11_291)) ?x33138) ?x33140) ?x33142)))
 (let ((?x33157 (+ (+ (+ (+ (+ (- (- ?x33143 ?x33144) ?x33146) ?x33148) ?x33150) ?x33152) ?x33154) ?x33156)))
 (= (- (- ?x33157 ?x33158) ?x33160) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31571 (* l_0_11_69 l_0_11_69)))
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33310 (* ?x33309 l_0_11_72)))
 (let ((?x31568 (* l_0_11_68 l_0_11_68)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33306 (* ?x33305 l_0_11_71)))
 (let ((?x31565 (* l_0_11_67 l_0_11_67)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33302 (* ?x33301 l_0_11_70)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x32919 (* ?x31562 l_0_11_71)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x32916 (* ?x31559 l_0_11_70)))
 (let ((?x32913 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x32910 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x31610 (* l_0_11_48 l_0_11_48)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33294 (* ?x33293 l_0_11_51)))
 (let ((?x31606 (* l_0_11_47 l_0_11_47)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33290 (* ?x33289 l_0_11_50)))
 (let ((?x31600 (* l_0_11_46 l_0_11_46)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33286 (* ?x33285 l_0_11_49)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x32898 (* ?x31541 l_0_11_50)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x32895 (* ?x31538 l_0_11_49)))
 (let ((?x32892 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x32879 (* ?x32878 l_0_11_30)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x32876 (* ?x32875 l_0_11_29)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x32864 (* ?x32863 l_0_11_28)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x33277 (* ?x33276 l_0_11_135)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x33274 (* ?x33273 l_0_11_134)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x33272 (* ?x22504 l_0_11_133)))
 (let ((?x33283 (- (+ (- (- (- (+ (+ ?x33272 ?x33274) ?x33277) ?x32864) ?x32876) ?x32879) ?x32892) ?x32895)))
 (let ((?x33296 (+ (- (+ (- (+ (- (- ?x33283 ?x32898) ?x33286) ?x31600) ?x33290) ?x31606) ?x33294) ?x31610)))
 (let ((?x33307 (+ (- (+ (+ (+ (+ (+ ?x33296 ?x32910) ?x32913) ?x32916) ?x32919) ?x33302) ?x31565) ?x33306)))
 (= (- (+ (- ?x33307 ?x31568) ?x33310) ?x31571) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33371 (* ?x33309 l_0_11_76)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33369 (* ?x33305 l_0_11_75)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33367 (* ?x33301 l_0_11_74)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x33035 (* ?x31562 l_0_11_75)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x33033 (* ?x31559 l_0_11_74)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33363 (* ?x33293 l_0_11_55)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33361 (* ?x33289 l_0_11_54)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33359 (* ?x33285 l_0_11_53)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x33025 (* ?x31541 l_0_11_54)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x33023 (* ?x31538 l_0_11_53)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x33015 (* ?x32878 l_0_11_34)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x33013 (* ?x32875 l_0_11_33)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x33005 (* ?x32863 l_0_11_32)))
 (let ((?x21098 (* l_0_11_132 l_0_11_132)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x33351 (* ?x33276 l_0_11_139)))
 (let ((?x21103 (* l_0_11_131 l_0_11_131)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x33348 (* ?x33273 l_0_11_138)))
 (let ((?x21091 (* l_0_11_130 l_0_11_130)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x33345 (* ?x22504 l_0_11_137)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x32981 (* ?x32980 l_0_11_6)))
 (let ((?x21798 (* 12.0 l_0_11_12)))
 (let ((?x32972 (* ?x21798 l_0_11_5)))
 (let ((?x22000 (* 12.0 l_0_11_11)))
 (let ((?x22004 (* ?x22000 l_0_11_4)))
 (let ((?x33352 (+ (- (+ (- (+ (+ (+ ?x22004 ?x32972) ?x32981) ?x33345) ?x21091) ?x33348) ?x21103) ?x33351)))
 (let ((?x33360 (- (- (- (- (- (- (- ?x33352 ?x21098) ?x33005) ?x33013) ?x33015) ?x33023) ?x33025) ?x33359)))
 (let ((?x33372 (+ (+ (+ (+ (+ (- (- ?x33360 ?x33361) ?x33363) ?x33033) ?x33035) ?x33367) ?x33369) ?x33371)))
 (= ?x33372 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33424 (* l_0_11_90 l_0_11_90)))
 (let ((?x33422 (* l_0_11_89 l_0_11_89)))
 (let ((?x33420 (* l_0_11_88 l_0_11_88)))
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33418 (* ?x33309 l_0_11_81)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33416 (* ?x33305 l_0_11_80)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33414 (* ?x33301 l_0_11_79)))
 (let ((?x31562 (* 6.0 l_0_11_66)))
 (let ((?x33150 (* ?x31562 l_0_11_80)))
 (let ((?x31559 (* 6.0 l_0_11_65)))
 (let ((?x33148 (* ?x31559 l_0_11_79)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33410 (* ?x33293 l_0_11_60)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33408 (* ?x33289 l_0_11_59)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33406 (* ?x33285 l_0_11_58)))
 (let ((?x31541 (* 6.0 l_0_11_45)))
 (let ((?x33140 (* ?x31541 l_0_11_59)))
 (let ((?x31538 (* 6.0 l_0_11_44)))
 (let ((?x33138 (* ?x31538 l_0_11_58)))
 (let ((?x32878 (* 12.0 l_0_11_27)))
 (let ((?x33130 (* ?x32878 l_0_11_39)))
 (let ((?x32875 (* 12.0 l_0_11_26)))
 (let ((?x33128 (* ?x32875 l_0_11_38)))
 (let ((?x32863 (* 12.0 l_0_11_25)))
 (let ((?x33120 (* ?x32863 l_0_11_37)))
 (let ((?x30741 (* 12.0 l_0_11_18)))
 (let ((?x33098 (* ?x30741 l_0_11_6)))
 (let ((?x33398 (* l_0_11_174 l_0_11_174)))
 (let ((?x33396 (* l_0_11_173 l_0_11_173)))
 (let ((?x33394 (* l_0_11_172 l_0_11_172)))
 (let ((?x30732 (* 12.0 l_0_11_17)))
 (let ((?x33092 (* ?x30732 l_0_11_5)))
 (let ((?x30729 (* 12.0 l_0_11_16)))
 (let ((?x33089 (* ?x30729 l_0_11_4)))
 (let ((?x33390 (* l_0_11_153 l_0_11_153)))
 (let ((?x33388 (* l_0_11_152 l_0_11_152)))
 (let ((?x33386 (* l_0_11_151 l_0_11_151)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x22575 (* ?x33276 l_0_11_144)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x6444 (* ?x33273 l_0_11_143)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x22561 (* ?x22504 l_0_11_142)))
 (let ((?x22551 (* l_0_11_111 l_0_11_111)))
 (let ((?x22553 (+ (+ (* l_0_11_109 l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x22551)))
 (let ((?x33392 (+ (+ (+ (+ (+ (+ (+ ?x22553 ?x22561) ?x6444) ?x22575) ?x33386) ?x33388) ?x33390) ?x33089)))
 (let ((?x33402 (- (- (+ (- (- (- (+ ?x33392 ?x33092) ?x33394) ?x33396) ?x33398) ?x33098) ?x33120) ?x33128)))
 (let ((?x33412 (+ (- (- (- (- (- (- ?x33402 ?x33130) ?x33138) ?x33140) ?x33406) ?x33408) ?x33410) ?x33148)))
 (let ((?x33425 (- (- (- (+ (+ (+ (+ ?x33412 ?x33150) ?x33414) ?x33416) ?x33418) ?x33420) ?x33422) ?x33424)))
 (= ?x33425 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31496 (* l_0_11_9 l_0_11_9)))
 (let ((?x31497 (* 6.0 ?x31496)))
 (let ((?x31493 (* l_0_11_8 l_0_11_8)))
 (let ((?x31494 (* 6.0 ?x31493)))
 (let ((?x31490 (* l_0_11_73 l_0_11_73)))
 (let ((?x33486 (* 3.0 ?x31490)))
 (let ((?x31487 (* l_0_11_72 l_0_11_72)))
 (let ((?x33484 (* 3.0 ?x31487)))
 (let ((?x31484 (* l_0_11_71 l_0_11_71)))
 (let ((?x33482 (* 3.0 ?x31484)))
 (let ((?x31481 (* l_0_11_70 l_0_11_70)))
 (let ((?x33480 (* 3.0 ?x31481)))
 (let ((?x31478 (* l_0_11_7 l_0_11_7)))
 (let ((?x31479 (* 6.0 ?x31478)))
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x32928 (* ?x32927 l_0_11_72)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x32925 (* ?x32924 l_0_11_71)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x32922 (* ?x32921 l_0_11_70)))
 (let ((?x33474 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x33471 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x33468 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x32907 (* ?x32906 l_0_11_51)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x32904 (* ?x32903 l_0_11_50)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x32901 (* ?x32900 l_0_11_49)))
 (let ((?x31460 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x31457 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x31454 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x31443 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x33455 (* l_0_11_136 l_0_11_136)))
 (let ((?x33453 (* l_0_11_135 l_0_11_135)))
 (let ((?x22696 (* l_0_11_134 l_0_11_134)))
 (let ((?x22692 (* l_0_11_133 l_0_11_133)))
 (let ((?x31407 (* l_0_11_10 l_0_11_10)))
 (let ((?x31408 (* 6.0 ?x31407)))
 (let ((?x33459 (- (- (- (+ (+ (+ (+ ?x31408 ?x22692) ?x22696) ?x33453) ?x33455) ?x31443) ?x31454) ?x31457)))
 (let ((?x33466 (- (+ (+ (+ (- ?x33459 ?x31460) ?x32901) ?x32904) ?x32907) (* (* 3.0 l_0_11_49) l_0_11_49))))
 (let ((?x33479 (+ (- (- (- (- (- (- ?x33466 ?x33468) ?x33471) ?x33474) ?x32922) ?x32925) ?x32928) ?x31479)))
 (= (+ (+ (+ (+ (+ (+ ?x33479 ?x33480) ?x33482) ?x33484) ?x33486) ?x31494) ?x31497) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33554 (* 6.0 l_0_11_73)))
 (let ((?x33555 (* ?x33554 l_0_11_77)))
 (let ((?x33551 (* 6.0 l_0_11_72)))
 (let ((?x33552 (* ?x33551 l_0_11_76)))
 (let ((?x33548 (* 6.0 l_0_11_71)))
 (let ((?x33549 (* ?x33548 l_0_11_75)))
 (let ((?x33545 (* 6.0 l_0_11_70)))
 (let ((?x33546 (* ?x33545 l_0_11_74)))
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x33041 (* ?x32927 l_0_11_76)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x33039 (* ?x32924 l_0_11_75)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x33037 (* ?x32921 l_0_11_74)))
 (let ((?x33539 (* 6.0 l_0_11_52)))
 (let ((?x33540 (* ?x33539 l_0_11_56)))
 (let ((?x33536 (* 6.0 l_0_11_51)))
 (let ((?x33537 (* ?x33536 l_0_11_55)))
 (let ((?x33533 (* 6.0 l_0_11_50)))
 (let ((?x33534 (* ?x33533 l_0_11_54)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x33031 (* ?x32906 l_0_11_55)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x33029 (* ?x32903 l_0_11_54)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x33027 (* ?x32900 l_0_11_53)))
 (let ((?x30813 (* 12.0 l_0_11_31)))
 (let ((?x33525 (* ?x30813 l_0_11_35)))
 (let ((?x30810 (* 12.0 l_0_11_30)))
 (let ((?x33523 (* ?x30810 l_0_11_34)))
 (let ((?x30807 (* 12.0 l_0_11_29)))
 (let ((?x33521 (* ?x30807 l_0_11_33)))
 (let ((?x30792 (* 12.0 l_0_11_28)))
 (let ((?x33519 (* ?x30792 l_0_11_32)))
 (let ((?x33516 (* 2.0 l_0_11_136)))
 (let ((?x33517 (* ?x33516 l_0_11_140)))
 (let ((?x33513 (* 2.0 l_0_11_135)))
 (let ((?x33514 (* ?x33513 l_0_11_139)))
 (let ((?x33510 (* 2.0 l_0_11_134)))
 (let ((?x33511 (* ?x33510 l_0_11_138)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x33277 (* ?x33276 l_0_11_135)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x33274 (* ?x33273 l_0_11_134)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x33272 (* ?x22504 l_0_11_133)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x33502 (* ?x32980 l_0_11_9)))
 (let ((?x33499 (+ (* (* 12.0 l_0_11_10) l_0_11_14) (* (* 12.0 l_0_11_11) l_0_11_7))))
 (let ((?x33501 (+ ?x33499 (* (* 12.0 l_0_11_12) l_0_11_8))))
 (let ((?x33509 (+ (- (- (- (+ ?x33501 ?x33502) ?x33272) ?x33274) ?x33277) (* (* 2.0 l_0_11_133) l_0_11_137))))
 (let ((?x33526 (- (- (- (- (+ (+ (+ ?x33509 ?x33511) ?x33514) ?x33517) ?x33519) ?x33521) ?x33523) ?x33525)))
 (let ((?x33532 (- (+ (+ (+ ?x33526 ?x33027) ?x33029) ?x33031) (* (* 6.0 l_0_11_49) l_0_11_53))))
 (let ((?x33547 (+ (- (- (- (- (- (- ?x33532 ?x33534) ?x33537) ?x33540) ?x33037) ?x33039) ?x33041) ?x33546)))
 (= (+ (+ (+ ?x33547 ?x33549) ?x33552) ?x33555) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33652 (* 2.0 l_0_11_90)))
 (let ((?x33653 (* ?x33652 l_0_11_93)))
 (let ((?x33649 (* 2.0 l_0_11_89)))
 (let ((?x33650 (* ?x33649 l_0_11_92)))
 (let ((?x33646 (* 2.0 l_0_11_88)))
 (let ((?x33647 (* ?x33646 l_0_11_91)))
 (let ((?x33554 (* 6.0 l_0_11_73)))
 (let ((?x33644 (* ?x33554 l_0_11_82)))
 (let ((?x33551 (* 6.0 l_0_11_72)))
 (let ((?x33642 (* ?x33551 l_0_11_81)))
 (let ((?x33548 (* 6.0 l_0_11_71)))
 (let ((?x33640 (* ?x33548 l_0_11_80)))
 (let ((?x33545 (* 6.0 l_0_11_70)))
 (let ((?x33638 (* ?x33545 l_0_11_79)))
 (let ((?x32927 (* 2.0 l_0_11_69)))
 (let ((?x33156 (* ?x32927 l_0_11_81)))
 (let ((?x32924 (* 2.0 l_0_11_68)))
 (let ((?x33154 (* ?x32924 l_0_11_80)))
 (let ((?x32921 (* 2.0 l_0_11_67)))
 (let ((?x33152 (* ?x32921 l_0_11_79)))
 (let ((?x33539 (* 6.0 l_0_11_52)))
 (let ((?x33633 (* ?x33539 l_0_11_61)))
 (let ((?x33536 (* 6.0 l_0_11_51)))
 (let ((?x33631 (* ?x33536 l_0_11_60)))
 (let ((?x33533 (* 6.0 l_0_11_50)))
 (let ((?x33629 (* ?x33533 l_0_11_59)))
 (let ((?x32906 (* 2.0 l_0_11_48)))
 (let ((?x33146 (* ?x32906 l_0_11_60)))
 (let ((?x32903 (* 2.0 l_0_11_47)))
 (let ((?x33144 (* ?x32903 l_0_11_59)))
 (let ((?x32900 (* 2.0 l_0_11_46)))
 (let ((?x33142 (* ?x32900 l_0_11_58)))
 (let ((?x30813 (* 12.0 l_0_11_31)))
 (let ((?x30814 (* ?x30813 l_0_11_40)))
 (let ((?x30810 (* 12.0 l_0_11_30)))
 (let ((?x30811 (* ?x30810 l_0_11_39)))
 (let ((?x30807 (* 12.0 l_0_11_29)))
 (let ((?x30808 (* ?x30807 l_0_11_38)))
 (let ((?x30792 (* 12.0 l_0_11_28)))
 (let ((?x30793 (* ?x30792 l_0_11_37)))
 (let ((?x30741 (* 12.0 l_0_11_18)))
 (let ((?x30742 (* ?x30741 l_0_11_9)))
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x33617 (* ?x33616 l_0_11_177)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x33614 (* ?x33613 l_0_11_176)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x33611 (* ?x33610 l_0_11_175)))
 (let ((?x30732 (* 12.0 l_0_11_17)))
 (let ((?x30733 (* ?x30732 l_0_11_8)))
 (let ((?x30729 (* 12.0 l_0_11_16)))
 (let ((?x30730 (* ?x30729 l_0_11_7)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33606 (* ?x33605 l_0_11_156)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33603 (* ?x33602 l_0_11_155)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33600 (* ?x33599 l_0_11_154)))
 (let ((?x33516 (* 2.0 l_0_11_136)))
 (let ((?x33597 (* ?x33516 l_0_11_145)))
 (let ((?x33513 (* 2.0 l_0_11_135)))
 (let ((?x33595 (* ?x33513 l_0_11_144)))
 (let ((?x33510 (* 2.0 l_0_11_134)))
 (let ((?x33593 (* ?x33510 l_0_11_143)))
 (let ((?x33507 (* 2.0 l_0_11_133)))
 (let ((?x33591 (* ?x33507 l_0_11_142)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33589 (* ?x33588 l_0_11_114)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x22894 (* ?x22865 l_0_11_113)))
 (let ((?x30714 (* 12.0 l_0_11_10)))
 (let ((?x30715 (* ?x30714 l_0_11_19)))
 (let ((?x33592 (+ (+ (+ (+ ?x30715 (* (* 2.0 l_0_11_109) l_0_11_112)) ?x22894) ?x33589) ?x33591)))
 (let ((?x33608 (+ (+ (+ (+ (+ (+ (+ ?x33592 ?x33593) ?x33595) ?x33597) ?x33600) ?x33603) ?x33606) ?x30730)))
 (let ((?x33621 (- (- (+ (- (- (- (+ ?x33608 ?x30733) ?x33611) ?x33614) ?x33617) ?x30742) ?x30793) ?x30808)))
 (let ((?x33628 (- (+ (+ (+ (- (- ?x33621 ?x30811) ?x30814) ?x33142) ?x33144) ?x33146) (* (* 6.0 l_0_11_49) l_0_11_58))))
 (let ((?x33639 (+ (- (- (- (- (- (- ?x33628 ?x33629) ?x33631) ?x33633) ?x33152) ?x33154) ?x33156) ?x33638)))
 (= (- (- (- (+ (+ (+ ?x33639 ?x33640) ?x33642) ?x33644) ?x33647) ?x33650) ?x33653) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33772 (* l_0_11_78 l_0_11_78)))
 (let ((?x33773 (* 3.0 ?x33772)))
 (let ((?x33769 (* l_0_11_77 l_0_11_77)))
 (let ((?x33770 (* 3.0 ?x33769)))
 (let ((?x33766 (* l_0_11_76 l_0_11_76)))
 (let ((?x33767 (* 3.0 ?x33766)))
 (let ((?x33763 (* l_0_11_75 l_0_11_75)))
 (let ((?x33764 (* 3.0 ?x33763)))
 (let ((?x33760 (* l_0_11_74 l_0_11_74)))
 (let ((?x33761 (* 3.0 ?x33760)))
 (let ((?x33758 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x33755 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x33752 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x33749 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x33743 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x33740 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x33737 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x33734 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x33731 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x32707 (* l_0_11_15 l_0_11_15)))
 (let ((?x33728 (* 6.0 ?x32707)))
 (let ((?x33726 (* l_0_11_141 l_0_11_141)))
 (let ((?x33724 (* l_0_11_140 l_0_11_140)))
 (let ((?x32705 (* l_0_11_14 l_0_11_14)))
 (let ((?x33722 (* 6.0 ?x32705)))
 (let ((?x33720 (* l_0_11_139 l_0_11_139)))
 (let ((?x33718 (* l_0_11_138 l_0_11_138)))
 (let ((?x33716 (* l_0_11_137 l_0_11_137)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x33351 (* ?x33276 l_0_11_139)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x33348 (* ?x33273 l_0_11_138)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x33345 (* ?x22504 l_0_11_137)))
 (let ((?x32703 (* l_0_11_13 l_0_11_13)))
 (let ((?x33711 (* 6.0 ?x32703)))
 (let ((?x33710 (+ (* 6.0 (* l_0_11_11 l_0_11_11)) (* 6.0 (* l_0_11_12 l_0_11_12)))))
 (let ((?x33721 (+ (+ (+ (- (- (- (+ ?x33710 ?x33711) ?x33345) ?x33348) ?x33351) ?x33716) ?x33718) ?x33720)))
 (let ((?x33738 (- (- (- (+ (+ (+ (+ ?x33721 ?x33722) ?x33724) ?x33726) ?x33728) ?x33731) ?x33734) ?x33737)))
 (let ((?x33750 (- (- (- (- ?x33738 ?x33740) ?x33743) (* (* 3.0 l_0_11_53) l_0_11_53)) ?x33749)))
 (let ((?x33771 (+ (+ (+ (+ (- (- (- ?x33750 ?x33752) ?x33755) ?x33758) ?x33761) ?x33764) ?x33767) ?x33770)))
 (= (+ ?x33771 ?x33773) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33652 (* 2.0 l_0_11_90)))
 (let ((?x33901 (* ?x33652 l_0_11_97)))
 (let ((?x33649 (* 2.0 l_0_11_89)))
 (let ((?x33899 (* ?x33649 l_0_11_96)))
 (let ((?x33646 (* 2.0 l_0_11_88)))
 (let ((?x33897 (* ?x33646 l_0_11_95)))
 (let ((?x33895 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x33892 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x33889 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x33886 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x33883 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x33880 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x33877 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x33874 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x33871 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x33865 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x33862 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x33859 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x33856 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x33853 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x33850 (* ?x33616 l_0_11_181)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x33848 (* ?x33613 l_0_11_180)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x33846 (* ?x33610 l_0_11_179)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33844 (* ?x33605 l_0_11_160)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33842 (* ?x33602 l_0_11_159)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33840 (* ?x33599 l_0_11_158)))
 (let ((?x33838 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x33835 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x33832 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x33829 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x33826 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x33823 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x33820 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x33276 (* 2.0 l_0_11_132)))
 (let ((?x22575 (* ?x33276 l_0_11_144)))
 (let ((?x33273 (* 2.0 l_0_11_131)))
 (let ((?x6444 (* ?x33273 l_0_11_143)))
 (let ((?x22504 (* 2.0 l_0_11_130)))
 (let ((?x22561 (* ?x22504 l_0_11_142)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x33814 (* ?x32980 l_0_11_18)))
 (let ((?x21798 (* 12.0 l_0_11_12)))
 (let ((?x33812 (* ?x21798 l_0_11_17)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33810 (* ?x33588 l_0_11_118)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x33808 (* ?x22865 l_0_11_117)))
 (let ((?x22000 (* 12.0 l_0_11_11)))
 (let ((?x33806 (* ?x22000 l_0_11_16)))
 (let ((?x33813 (+ (+ (+ (+ (* (* 2.0 l_0_11_109) l_0_11_116) ?x33806) ?x33808) ?x33810) ?x33812)))
 (let ((?x33827 (+ (+ (+ (- (- (- (+ ?x33813 ?x33814) ?x22561) ?x6444) ?x22575) ?x33820) ?x33823) ?x33826)))
 (let ((?x33845 (+ (+ (+ (+ (+ (+ (+ ?x33827 ?x33829) ?x33832) ?x33835) ?x33838) ?x33840) ?x33842) ?x33844)))
 (let ((?x33863 (- (- (- (- (- (- (- ?x33845 ?x33846) ?x33848) ?x33850) ?x33853) ?x33856) ?x33859) ?x33862)))
 (let ((?x33875 (- (- (- (- ?x33863 ?x33865) (* (* 6.0 l_0_11_53) l_0_11_58)) ?x33871) ?x33874)))
 (let ((?x33896 (+ (+ (+ (+ (+ (- (- ?x33875 ?x33877) ?x33880) ?x33883) ?x33886) ?x33889) ?x33892) ?x33895)))
 (= (- (- (- ?x33896 ?x33897) ?x33899) ?x33901) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31347 (* l_0_11_84 l_0_11_84)))
 (let ((?x34045 (* 3.0 ?x31347)))
 (let ((?x31344 (* l_0_11_83 l_0_11_83)))
 (let ((?x34043 (* 3.0 ?x31344)))
 (let ((?x31341 (* l_0_11_82 l_0_11_82)))
 (let ((?x34041 (* 3.0 ?x31341)))
 (let ((?x31338 (* l_0_11_81 l_0_11_81)))
 (let ((?x34039 (* 3.0 ?x31338)))
 (let ((?x31335 (* l_0_11_80 l_0_11_80)))
 (let ((?x34037 (* 3.0 ?x31335)))
 (let ((?x31332 (* l_0_11_79 l_0_11_79)))
 (let ((?x34035 (* 3.0 ?x31332)))
 (let ((?x34033 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x34030 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x34027 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x34024 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x34021 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x31312 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x31309 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x31306 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x31303 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x31300 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x31297 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x31243 (* l_0_11_21 l_0_11_21)))
 (let ((?x31244 (* 6.0 ?x31243)))
 (let ((?x31230 (* l_0_11_20 l_0_11_20)))
 (let ((?x31231 (* 6.0 ?x31230)))
 (let ((?x31227 (* l_0_11_19 l_0_11_19)))
 (let ((?x31228 (* 6.0 ?x31227)))
 (let ((?x31224 (* l_0_11_18 l_0_11_18)))
 (let ((?x31225 (* 6.0 ?x31224)))
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x34005 (* ?x33616 l_0_11_186)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x34003 (* ?x33613 l_0_11_185)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x34001 (* ?x33610 l_0_11_184)))
 (let ((?x31217 (* l_0_11_17 l_0_11_17)))
 (let ((?x31218 (* 6.0 ?x31217)))
 (let ((?x31214 (* l_0_11_16 l_0_11_16)))
 (let ((?x31215 (* 6.0 ?x31214)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33997 (* ?x33605 l_0_11_165)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33995 (* ?x33602 l_0_11_164)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33993 (* ?x33599 l_0_11_163)))
 (let ((?x33991 (* l_0_11_147 l_0_11_147)))
 (let ((?x33989 (* l_0_11_146 l_0_11_146)))
 (let ((?x33987 (* l_0_11_145 l_0_11_145)))
 (let ((?x33985 (* l_0_11_144 l_0_11_144)))
 (let ((?x33983 (* l_0_11_143 l_0_11_143)))
 (let ((?x33981 (* l_0_11_142 l_0_11_142)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33979 (* ?x33588 l_0_11_123)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x33977 (* ?x22865 l_0_11_122)))
 (let ((?x6943 (* 2.0 l_0_11_109)))
 (let ((?x33975 (* ?x6943 l_0_11_121)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x33973 (* ?x33972 l_0_11_90)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x33970 (* ?x31203 l_0_11_89)))
 (let ((?x33978 (+ (+ (- (- (* (* (- 2.0) l_0_11_100) l_0_11_88) ?x33970) ?x33973) ?x33975) ?x33977)))
 (let ((?x33992 (+ (+ (+ (+ (+ (+ (+ ?x33978 ?x33979) ?x33981) ?x33983) ?x33985) ?x33987) ?x33989) ?x33991)))
 (let ((?x34004 (- (- (+ (+ (+ (+ (+ ?x33992 ?x33993) ?x33995) ?x33997) ?x31215) ?x31218) ?x34001) ?x34003)))
 (let ((?x34012 (- (- (+ (+ (+ (+ (- ?x34004 ?x34005) ?x31225) ?x31228) ?x31231) ?x31244) ?x31297) ?x31300)))
 (let ((?x34019 (- (- (- (- (- ?x34012 ?x31303) ?x31306) ?x31309) ?x31312) (* (* 3.0 l_0_11_58) l_0_11_58))))
 (let ((?x34038 (+ (+ (- (- (- (- (- ?x34019 ?x34021) ?x34024) ?x34027) ?x34030) ?x34033) ?x34035) ?x34037)))
 (= (+ (+ (+ (+ ?x34038 ?x34039) ?x34041) ?x34043) ?x34045) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x34136 (* ?x30837 l_0_11_75)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x34134 (* ?x30834 l_0_11_74)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x34132 (* ?x30819 l_0_11_54)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x34130 (* ?x30816 l_0_11_53)))
 (let ((?x31034 (* 12.0 l_0_11_24)))
 (let ((?x33003 (* ?x31034 l_0_11_33)))
 (let ((?x31025 (* 12.0 l_0_11_23)))
 (let ((?x32995 (* ?x31025 l_0_11_32)))
 (let ((?x3786 (* l_0_11_129 l_0_11_129)))
 (let ((?x3852 (* l_0_11_128 l_0_11_128)))
 (let ((?x21798 (* 12.0 l_0_11_12)))
 (let ((?x32970 (* ?x21798 l_0_11_3)))
 (let ((?x22000 (* 12.0 l_0_11_11)))
 (let ((?x22001 (* ?x22000 l_0_11_2)))
 (let ((?x34109 (- (- (- (+ ?x22001 ?x32970) ?x3852) ?x3786) (* (* 2.0 l_0_11_191) l_0_11_200))))
 (let ((?x34113 (- (- ?x34109 (* (* 2.0 l_0_11_192) l_0_11_201)) (* (* 2.0 l_0_11_212) l_0_11_221))))
 (let ((?x34118 (- (- (- ?x34113 (* (* 2.0 l_0_11_213) l_0_11_222)) ?x32995) (* (* 2.0 l_0_11_233) l_0_11_242))))
 (let ((?x34123 (- (- (- ?x34118 (* (* 2.0 l_0_11_234) l_0_11_243)) ?x33003) (* (* 2.0 l_0_11_254) l_0_11_263))))
 (let ((?x34127 (- (- ?x34123 (* (* 2.0 l_0_11_255) l_0_11_264)) (* (* 2.0 l_0_11_275) l_0_11_284))))
 (let ((?x34135 (+ (- (- (- ?x34127 (* (* 2.0 l_0_11_276) l_0_11_285)) ?x34130) ?x34132) ?x34134)))
 (= (+ ?x34135 ?x34136) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30849 (* 2.0 l_0_11_73)))
 (let ((?x34248 (* ?x30849 l_0_11_77)))
 (let ((?x30846 (* 2.0 l_0_11_72)))
 (let ((?x34246 (* ?x30846 l_0_11_76)))
 (let ((?x30843 (* 2.0 l_0_11_71)))
 (let ((?x34244 (* ?x30843 l_0_11_75)))
 (let ((?x30840 (* 2.0 l_0_11_70)))
 (let ((?x34242 (* ?x30840 l_0_11_74)))
 (let ((?x30837 (* 2.0 l_0_11_66)))
 (let ((?x34136 (* ?x30837 l_0_11_75)))
 (let ((?x30834 (* 2.0 l_0_11_65)))
 (let ((?x34134 (* ?x30834 l_0_11_74)))
 (let ((?x30831 (* 2.0 l_0_11_52)))
 (let ((?x34238 (* ?x30831 l_0_11_56)))
 (let ((?x30828 (* 2.0 l_0_11_51)))
 (let ((?x34236 (* ?x30828 l_0_11_55)))
 (let ((?x30825 (* 2.0 l_0_11_50)))
 (let ((?x34234 (* ?x30825 l_0_11_54)))
 (let ((?x30822 (* 2.0 l_0_11_49)))
 (let ((?x34232 (* ?x30822 l_0_11_53)))
 (let ((?x30819 (* 2.0 l_0_11_45)))
 (let ((?x34132 (* ?x30819 l_0_11_54)))
 (let ((?x30816 (* 2.0 l_0_11_44)))
 (let ((?x34130 (* ?x30816 l_0_11_53)))
 (let ((?x30813 (* 12.0 l_0_11_31)))
 (let ((?x33525 (* ?x30813 l_0_11_35)))
 (let ((?x30810 (* 12.0 l_0_11_30)))
 (let ((?x33523 (* ?x30810 l_0_11_34)))
 (let ((?x30807 (* 12.0 l_0_11_29)))
 (let ((?x33521 (* ?x30807 l_0_11_33)))
 (let ((?x30792 (* 12.0 l_0_11_28)))
 (let ((?x33519 (* ?x30792 l_0_11_32)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x33502 (* ?x32980 l_0_11_9)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x21749 (* ?x31620 l_0_11_134)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x21752 (* ?x3457 l_0_11_133)))
 (let ((?x33499 (+ (* (* 12.0 l_0_11_10) l_0_11_14) (* (* 12.0 l_0_11_11) l_0_11_7))))
 (let ((?x33501 (+ ?x33499 (* (* 12.0 l_0_11_12) l_0_11_8))))
 (let ((?x34187 (- (+ (- (- ?x33501 ?x21752) ?x21749) ?x33502) (* (* 2.0 l_0_11_196) l_0_11_200))))
 (let ((?x34191 (- (- ?x34187 (* (* 2.0 l_0_11_197) l_0_11_201)) (* (* 2.0 l_0_11_198) l_0_11_202))))
 (let ((?x34195 (- (- ?x34191 (* (* 2.0 l_0_11_199) l_0_11_203)) (* (* 2.0 l_0_11_217) l_0_11_221))))
 (let ((?x34199 (- (- ?x34195 (* (* 2.0 l_0_11_218) l_0_11_222)) (* (* 2.0 l_0_11_219) l_0_11_223))))
 (let ((?x34203 (- (- ?x34199 (* (* 2.0 l_0_11_220) l_0_11_224)) (* (* 2.0 l_0_11_238) l_0_11_242))))
 (let ((?x34207 (- (- ?x34203 (* (* 2.0 l_0_11_239) l_0_11_243)) (* (* 2.0 l_0_11_240) l_0_11_244))))
 (let ((?x34211 (- (- ?x34207 (* (* 2.0 l_0_11_241) l_0_11_245)) (* (* 2.0 l_0_11_259) l_0_11_263))))
 (let ((?x34215 (- (- ?x34211 (* (* 2.0 l_0_11_260) l_0_11_264)) (* (* 2.0 l_0_11_261) l_0_11_265))))
 (let ((?x34220 (- (- (- ?x34215 (* (* 2.0 l_0_11_262) l_0_11_266)) ?x33519) (* (* 2.0 l_0_11_280) l_0_11_284))))
 (let ((?x34224 (- (- ?x34220 (* (* 2.0 l_0_11_281) l_0_11_285)) (* (* 2.0 l_0_11_282) l_0_11_286))))
 (let ((?x34229 (- (- (- (- ?x34224 (* (* 2.0 l_0_11_283) l_0_11_287)) ?x33521) ?x33523) ?x33525)))
 (let ((?x34240 (- (- (- (- (- (+ (+ ?x34229 ?x34130) ?x34132) ?x34232) ?x34234) ?x34236) ?x34238) ?x34134)))
 (= (+ (+ (+ (+ (- ?x34240 ?x34136) ?x34242) ?x34244) ?x34246) ?x34248) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33743 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x33740 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x33737 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x33734 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x33731 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x34338 (* l_0_11_288 l_0_11_288)))
 (let ((?x34336 (* l_0_11_287 l_0_11_287)))
 (let ((?x34334 (* l_0_11_286 l_0_11_286)))
 (let ((?x34332 (* l_0_11_285 l_0_11_285)))
 (let ((?x34330 (* l_0_11_284 l_0_11_284)))
 (let ((?x34328 (* l_0_11_267 l_0_11_267)))
 (let ((?x34326 (* l_0_11_266 l_0_11_266)))
 (let ((?x34324 (* l_0_11_265 l_0_11_265)))
 (let ((?x34322 (* l_0_11_264 l_0_11_264)))
 (let ((?x34320 (* l_0_11_263 l_0_11_263)))
 (let ((?x34318 (* l_0_11_246 l_0_11_246)))
 (let ((?x34316 (* l_0_11_245 l_0_11_245)))
 (let ((?x34314 (* l_0_11_244 l_0_11_244)))
 (let ((?x34312 (* l_0_11_243 l_0_11_243)))
 (let ((?x34310 (* l_0_11_242 l_0_11_242)))
 (let ((?x34308 (* l_0_11_225 l_0_11_225)))
 (let ((?x34306 (* l_0_11_224 l_0_11_224)))
 (let ((?x34304 (* l_0_11_223 l_0_11_223)))
 (let ((?x34302 (* l_0_11_222 l_0_11_222)))
 (let ((?x34300 (* l_0_11_221 l_0_11_221)))
 (let ((?x34298 (* l_0_11_204 l_0_11_204)))
 (let ((?x34296 (* l_0_11_203 l_0_11_203)))
 (let ((?x34294 (* l_0_11_202 l_0_11_202)))
 (let ((?x34292 (* l_0_11_201 l_0_11_201)))
 (let ((?x34290 (* l_0_11_200 l_0_11_200)))
 (let ((?x32707 (* l_0_11_15 l_0_11_15)))
 (let ((?x33728 (* 6.0 ?x32707)))
 (let ((?x32705 (* l_0_11_14 l_0_11_14)))
 (let ((?x33722 (* 6.0 ?x32705)))
 (let ((?x32703 (* l_0_11_13 l_0_11_13)))
 (let ((?x33711 (* 6.0 ?x32703)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x32978 (* ?x31620 l_0_11_138)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x32975 (* ?x3457 l_0_11_137)))
 (let ((?x33710 (+ (* 6.0 (* l_0_11_11 l_0_11_11)) (* 6.0 (* l_0_11_12 l_0_11_12)))))
 (let ((?x34293 (- (- (+ (+ (+ (- (- ?x33710 ?x32975) ?x32978) ?x33711) ?x33722) ?x33728) ?x34290) ?x34292)))
 (let ((?x34307 (- (- (- (- (- (- (- ?x34293 ?x34294) ?x34296) ?x34298) ?x34300) ?x34302) ?x34304) ?x34306)))
 (let ((?x34321 (- (- (- (- (- (- (- ?x34307 ?x34308) ?x34310) ?x34312) ?x34314) ?x34316) ?x34318) ?x34320)))
 (let ((?x34335 (- (- (- (- (- (- (- ?x34321 ?x34322) ?x34324) ?x34326) ?x34328) ?x34330) ?x34332) ?x34334)))
 (let ((?x34344 (- (- (- (- (- (- (- ?x34335 ?x34336) ?x34338) ?x33731) ?x33734) ?x33737) ?x33740) ?x33743)))
 (let ((?x34350 (- (- ?x34344 (* (* 1.0 l_0_11_53) l_0_11_53)) (* (* 1.0 l_0_11_54) l_0_11_54))))
 (let ((?x34356 (- (- ?x34350 (* (* 1.0 l_0_11_55) l_0_11_55)) (* (* 1.0 l_0_11_56) l_0_11_56))))
 (let ((?x34361 (+ (- ?x34356 (* (* 1.0 l_0_11_57) l_0_11_57)) (* 1.0 (* l_0_11_74 l_0_11_74)))))
 (let ((?x34365 (+ (+ ?x34361 (* 1.0 (* l_0_11_75 l_0_11_75))) (* 1.0 (* l_0_11_76 l_0_11_76)))))
 (let ((?x34369 (+ (+ ?x34365 (* 1.0 (* l_0_11_77 l_0_11_77))) (* 1.0 (* l_0_11_78 l_0_11_78)))))
 (= ?x34369 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x34534 (* ?x30855 l_0_11_96)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x34532 (* ?x30852 l_0_11_95)))
 (let ((?x34530 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x34527 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x34524 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x34521 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x34518 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x34515 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x34512 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x34509 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x34506 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x34503 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x33865 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x33862 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x33859 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x33856 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x33853 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x34420 (* ?x30738 l_0_11_180)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x34418 (* ?x30735 l_0_11_179)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x34416 (* ?x30726 l_0_11_159)))
 (let ((?x33838 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x34413 (* ?x30723 l_0_11_158)))
 (let ((?x33829 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x32980 (* 12.0 l_0_11_13)))
 (let ((?x33814 (* ?x32980 l_0_11_18)))
 (let ((?x31620 (* 2.0 l_0_11_129)))
 (let ((?x33082 (* ?x31620 l_0_11_143)))
 (let ((?x3457 (* 2.0 l_0_11_128)))
 (let ((?x33080 (* ?x3457 l_0_11_142)))
 (let ((?x21798 (* 12.0 l_0_11_12)))
 (let ((?x33812 (* ?x21798 l_0_11_17)))
 (let ((?x22000 (* 12.0 l_0_11_11)))
 (let ((?x33806 (* ?x22000 l_0_11_16)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x24284 (* ?x30720 l_0_11_117)))
 (let ((?x34409 (- (+ (+ (+ (* (* 2.0 l_0_11_107) l_0_11_116) ?x24284) ?x33806) ?x33812) ?x33080)))
 (let ((?x34419 (- (+ (+ (+ (+ (+ (- ?x34409 ?x33082) ?x33814) ?x33829) ?x34413) ?x33838) ?x34416) ?x34418)))
 (let ((?x34427 (- (- (- ?x34419 ?x34420) (* (* 2.0 l_0_11_200) l_0_11_205)) (* (* 2.0 l_0_11_201) l_0_11_206))))
 (let ((?x34433 (- (- ?x34427 (* (* 2.0 l_0_11_202) l_0_11_207)) (* (* 2.0 l_0_11_203) l_0_11_208))))
 (let ((?x34439 (- (- ?x34433 (* (* 2.0 l_0_11_204) l_0_11_209)) (* (* 2.0 l_0_11_221) l_0_11_226))))
 (let ((?x34445 (- (- ?x34439 (* (* 2.0 l_0_11_222) l_0_11_227)) (* (* 2.0 l_0_11_223) l_0_11_228))))
 (let ((?x34451 (- (- ?x34445 (* (* 2.0 l_0_11_224) l_0_11_229)) (* (* 2.0 l_0_11_225) l_0_11_230))))
 (let ((?x34457 (- (- ?x34451 (* (* 2.0 l_0_11_242) l_0_11_247)) (* (* 2.0 l_0_11_243) l_0_11_248))))
 (let ((?x34463 (- (- ?x34457 (* (* 2.0 l_0_11_244) l_0_11_249)) (* (* 2.0 l_0_11_245) l_0_11_250))))
 (let ((?x34469 (- (- ?x34463 (* (* 2.0 l_0_11_246) l_0_11_251)) (* (* 2.0 l_0_11_263) l_0_11_268))))
 (let ((?x34475 (- (- ?x34469 (* (* 2.0 l_0_11_264) l_0_11_269)) (* (* 2.0 l_0_11_265) l_0_11_270))))
 (let ((?x34481 (- (- ?x34475 (* (* 2.0 l_0_11_266) l_0_11_271)) (* (* 2.0 l_0_11_267) l_0_11_272))))
 (let ((?x34487 (- (- ?x34481 (* (* 2.0 l_0_11_284) l_0_11_289)) (* (* 2.0 l_0_11_285) l_0_11_290))))
 (let ((?x34493 (- (- ?x34487 (* (* 2.0 l_0_11_286) l_0_11_291)) (* (* 2.0 l_0_11_287) l_0_11_292))))
 (let ((?x34499 (- (- (- (- ?x34493 (* (* 2.0 l_0_11_288) l_0_11_293)) ?x33853) ?x33856) ?x33859)))
 (let ((?x34516 (- (- (- (- (- (- (- ?x34499 ?x33862) ?x33865) ?x34503) ?x34506) ?x34509) ?x34512) ?x34515)))
 (let ((?x34535 (- (- (+ (+ (+ (+ (+ ?x34516 ?x34518) ?x34521) ?x34524) ?x34527) ?x34530) ?x34532) ?x34534)))
 (= ?x34535 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31876 (* l_0_11_64 l_0_11_64)))
 (let ((?x31913 (* 3.0 ?x31876)))
 (= (+ (* (* (- 3.0) l_0_11_43) l_0_11_43) ?x31913) 0.0))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32331 (* ?x32330 l_0_11_86)))
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32412 (* ?x32091 l_0_11_67)))
 (let ((?x32086 (* 6.0 l_0_11_43)))
 (let ((?x32407 (* ?x32086 l_0_11_46)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32305 (* ?x32304 l_0_11_170)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32299 (* ?x32298 l_0_11_149)))
 (let ((?x34641 (+ (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_107) ?x32299) ?x32305) ?x32407) ?x32412)))
 (= (+ ?x34641 ?x32331) 0.0)))))))))))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32462 (* ?x32091 l_0_11_70)))
 (= (+ (* (* (- 6.0) l_0_11_43) l_0_11_49) ?x32462) 0.0))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32519 (* ?x32091 l_0_11_74)))
 (= (+ (* (* (- 6.0) l_0_11_43) l_0_11_53) ?x32519) 0.0))))
(assert
 (let ((?x32091 (* 6.0 l_0_11_64)))
 (let ((?x32564 (* ?x32091 l_0_11_79)))
 (= (+ (* (* (- 6.0) l_0_11_43) l_0_11_58) ?x32564) 0.0))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x33160 (* ?x30855 l_0_11_89)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x33158 (* ?x30852 l_0_11_88)))
 (let ((?x31571 (* l_0_11_69 l_0_11_69)))
 (let ((?x31572 (* 3.0 ?x31571)))
 (let ((?x31568 (* l_0_11_68 l_0_11_68)))
 (let ((?x31569 (* 3.0 ?x31568)))
 (let ((?x31565 (* l_0_11_67 l_0_11_67)))
 (let ((?x31566 (* 3.0 ?x31565)))
 (let ((?x31551 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x31548 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x31545 (* (* 3.0 l_0_11_46) l_0_11_46)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x33096 (* ?x30738 l_0_11_173)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x33094 (* ?x30735 l_0_11_172)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x33086 (* ?x30726 l_0_11_152)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x33084 (* ?x30723 l_0_11_151)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x33078 (* ?x30720 l_0_11_110)))
 (let ((?x34660 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_109) ?x33078) ?x33084) ?x33086) ?x33094)))
 (let ((?x34667 (+ (+ (+ (- (- (- (+ ?x34660 ?x33096) ?x31545) ?x31548) ?x31551) ?x31566) ?x31569) ?x31572)))
 (= (+ (+ ?x34667 ?x33158) ?x33160) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x30856 (* ?x30855 l_0_11_92)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x30853 (* ?x30852 l_0_11_91)))
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33310 (* ?x33309 l_0_11_72)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33306 (* ?x33305 l_0_11_71)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33302 (* ?x33301 l_0_11_70)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33294 (* ?x33293 l_0_11_51)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33290 (* ?x33289 l_0_11_50)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33286 (* ?x33285 l_0_11_49)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x30739 (* ?x30738 l_0_11_176)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x30736 (* ?x30735 l_0_11_175)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x30727 (* ?x30726 l_0_11_155)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x30724 (* ?x30723 l_0_11_154)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x30721 (* ?x30720 l_0_11_113)))
 (let ((?x8632 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_112) ?x30721) ?x30724) ?x30727) ?x30736)))
 (let ((?x34679 (+ (+ (+ (- (- (- (+ ?x8632 ?x30739) ?x33286) ?x33290) ?x33294) ?x33302) ?x33306) ?x33310)))
 (= (+ (+ ?x34679 ?x30853) ?x30856) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30855 (* 2.0 l_0_11_87)))
 (let ((?x34534 (* ?x30855 l_0_11_96)))
 (let ((?x30852 (* 2.0 l_0_11_86)))
 (let ((?x34532 (* ?x30852 l_0_11_95)))
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33371 (* ?x33309 l_0_11_76)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33369 (* ?x33305 l_0_11_75)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33367 (* ?x33301 l_0_11_74)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33363 (* ?x33293 l_0_11_55)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33361 (* ?x33289 l_0_11_54)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33359 (* ?x33285 l_0_11_53)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x34420 (* ?x30738 l_0_11_180)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x34418 (* ?x30735 l_0_11_179)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x34416 (* ?x30726 l_0_11_159)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x34413 (* ?x30723 l_0_11_158)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x24284 (* ?x30720 l_0_11_117)))
 (let ((?x34688 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_116) ?x24284) ?x34413) ?x34416) ?x34418)))
 (let ((?x34695 (+ (+ (+ (- (- (- (+ ?x34688 ?x34420) ?x33359) ?x33361) ?x33363) ?x33367) ?x33369) ?x33371)))
 (= (+ (+ ?x34695 ?x34532) ?x34534) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x33309 (* 6.0 l_0_11_69)))
 (let ((?x33418 (* ?x33309 l_0_11_81)))
 (let ((?x33305 (* 6.0 l_0_11_68)))
 (let ((?x33416 (* ?x33305 l_0_11_80)))
 (let ((?x33301 (* 6.0 l_0_11_67)))
 (let ((?x33414 (* ?x33301 l_0_11_79)))
 (let ((?x33293 (* 6.0 l_0_11_48)))
 (let ((?x33410 (* ?x33293 l_0_11_60)))
 (let ((?x33289 (* 6.0 l_0_11_47)))
 (let ((?x33408 (* ?x33289 l_0_11_59)))
 (let ((?x33285 (* 6.0 l_0_11_46)))
 (let ((?x33406 (* ?x33285 l_0_11_58)))
 (let ((?x30738 (* 2.0 l_0_11_171)))
 (let ((?x31222 (* ?x30738 l_0_11_185)))
 (let ((?x30735 (* 2.0 l_0_11_170)))
 (let ((?x31220 (* ?x30735 l_0_11_184)))
 (let ((?x30726 (* 2.0 l_0_11_150)))
 (let ((?x31212 (* ?x30726 l_0_11_164)))
 (let ((?x30723 (* 2.0 l_0_11_149)))
 (let ((?x31210 (* ?x30723 l_0_11_163)))
 (let ((?x30720 (* 2.0 l_0_11_108)))
 (let ((?x31208 (* ?x30720 l_0_11_122)))
 (let ((?x30717 (* 2.0 l_0_11_107)))
 (let ((?x31206 (* ?x30717 l_0_11_121)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x31204 (* ?x31203 l_0_11_87)))
 (let ((?x20670 (* 2.0 l_0_11_100)))
 (let ((?x20671 (* ?x20670 l_0_11_86)))
 (let ((?x34712 (+ (+ (- (- (- (- (+ ?x20671 ?x31204) ?x31206) ?x31208) ?x31210) ?x31212) ?x31220) ?x31222)))
 (= (+ (+ (+ (- (- (- ?x34712 ?x33406) ?x33408) ?x33410) ?x33414) ?x33416) ?x33418) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x31490 (* l_0_11_73 l_0_11_73)))
 (let ((?x33486 (* 3.0 ?x31490)))
 (let ((?x31487 (* l_0_11_72 l_0_11_72)))
 (let ((?x33484 (* 3.0 ?x31487)))
 (let ((?x31484 (* l_0_11_71 l_0_11_71)))
 (let ((?x33482 (* 3.0 ?x31484)))
 (let ((?x31481 (* l_0_11_70 l_0_11_70)))
 (let ((?x33480 (* 3.0 ?x31481)))
 (let ((?x33474 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x33471 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x33468 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x34732 (+ (- (- (- (* (* (- 3.0) l_0_11_49) l_0_11_49) ?x33468) ?x33471) ?x33474) ?x33480)))
 (= (+ (+ (+ ?x34732 ?x33482) ?x33484) ?x33486) 0.0))))))))))))))
(assert
 (let ((?x33554 (* 6.0 l_0_11_73)))
 (let ((?x33555 (* ?x33554 l_0_11_77)))
 (let ((?x33551 (* 6.0 l_0_11_72)))
 (let ((?x33552 (* ?x33551 l_0_11_76)))
 (let ((?x33548 (* 6.0 l_0_11_71)))
 (let ((?x33549 (* ?x33548 l_0_11_75)))
 (let ((?x33545 (* 6.0 l_0_11_70)))
 (let ((?x33546 (* ?x33545 l_0_11_74)))
 (let ((?x33539 (* 6.0 l_0_11_52)))
 (let ((?x33540 (* ?x33539 l_0_11_56)))
 (let ((?x33536 (* 6.0 l_0_11_51)))
 (let ((?x33537 (* ?x33536 l_0_11_55)))
 (let ((?x33533 (* 6.0 l_0_11_50)))
 (let ((?x33534 (* ?x33533 l_0_11_54)))
 (let ((?x34741 (+ (- (- (- (* (* (- 6.0) l_0_11_49) l_0_11_53) ?x33534) ?x33537) ?x33540) ?x33546)))
 (= (+ (+ (+ ?x34741 ?x33549) ?x33552) ?x33555) 0.0)))))))))))))))))
(assert
 (let ((?x33554 (* 6.0 l_0_11_73)))
 (let ((?x33644 (* ?x33554 l_0_11_82)))
 (let ((?x33551 (* 6.0 l_0_11_72)))
 (let ((?x33642 (* ?x33551 l_0_11_81)))
 (let ((?x33548 (* 6.0 l_0_11_71)))
 (let ((?x33640 (* ?x33548 l_0_11_80)))
 (let ((?x33545 (* 6.0 l_0_11_70)))
 (let ((?x33638 (* ?x33545 l_0_11_79)))
 (let ((?x33539 (* 6.0 l_0_11_52)))
 (let ((?x33633 (* ?x33539 l_0_11_61)))
 (let ((?x33536 (* 6.0 l_0_11_51)))
 (let ((?x33631 (* ?x33536 l_0_11_60)))
 (let ((?x33533 (* 6.0 l_0_11_50)))
 (let ((?x33629 (* ?x33533 l_0_11_59)))
 (let ((?x34759 (+ (- (- (- (* (* (- 6.0) l_0_11_49) l_0_11_58) ?x33629) ?x33631) ?x33633) ?x33638)))
 (= (+ (+ (+ ?x34759 ?x33640) ?x33642) ?x33644) 0.0)))))))))))))))))
(assert
 (let ((?x33772 (* l_0_11_78 l_0_11_78)))
 (let ((?x33773 (* 3.0 ?x33772)))
 (let ((?x33769 (* l_0_11_77 l_0_11_77)))
 (let ((?x33770 (* 3.0 ?x33769)))
 (let ((?x33766 (* l_0_11_76 l_0_11_76)))
 (let ((?x33767 (* 3.0 ?x33766)))
 (let ((?x33763 (* l_0_11_75 l_0_11_75)))
 (let ((?x33764 (* 3.0 ?x33763)))
 (let ((?x33760 (* l_0_11_74 l_0_11_74)))
 (let ((?x33761 (* 3.0 ?x33760)))
 (let ((?x33758 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x33755 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x33752 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x33749 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x34767 (- (- (- (- (* (* (- 3.0) l_0_11_53) l_0_11_53) ?x33749) ?x33752) ?x33755) ?x33758)))
 (= (+ (+ (+ (+ (+ ?x34767 ?x33761) ?x33764) ?x33767) ?x33770) ?x33773) 0.0)))))))))))))))))
(assert
 (let ((?x33895 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x33892 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x33889 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x33886 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x33883 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x33880 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x33877 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x33874 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x33871 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x24662 (- (- (- (- (* (* (- 6.0) l_0_11_53) l_0_11_58) ?x33871) ?x33874) ?x33877) ?x33880)))
 (= (+ (+ (+ (+ (+ ?x24662 ?x33883) ?x33886) ?x33889) ?x33892) ?x33895) 0.0))))))))))))
(assert
 (let ((?x31347 (* l_0_11_84 l_0_11_84)))
 (let ((?x34045 (* 3.0 ?x31347)))
 (let ((?x31344 (* l_0_11_83 l_0_11_83)))
 (let ((?x34043 (* 3.0 ?x31344)))
 (let ((?x31341 (* l_0_11_82 l_0_11_82)))
 (let ((?x34041 (* 3.0 ?x31341)))
 (let ((?x31338 (* l_0_11_81 l_0_11_81)))
 (let ((?x34039 (* 3.0 ?x31338)))
 (let ((?x31335 (* l_0_11_80 l_0_11_80)))
 (let ((?x34037 (* 3.0 ?x31335)))
 (let ((?x31332 (* l_0_11_79 l_0_11_79)))
 (let ((?x34035 (* 3.0 ?x31332)))
 (let ((?x34033 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x34030 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x34027 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x34024 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x34021 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x8906 (- (- (- (- (* (* (- 3.0) l_0_11_58) l_0_11_58) ?x34021) ?x34024) ?x34027) ?x34030)))
 (let ((?x34781 (+ (+ (+ (+ (+ (+ (- ?x8906 ?x34033) ?x34035) ?x34037) ?x34039) ?x34041) ?x34043) ?x34045)))
 (= ?x34781 0.0)))))))))))))))))))))
(assert
 (let ((?x31490 (* l_0_11_73 l_0_11_73)))
 (let ((?x31487 (* l_0_11_72 l_0_11_72)))
 (let ((?x31484 (* l_0_11_71 l_0_11_71)))
 (let ((?x31481 (* l_0_11_70 l_0_11_70)))
 (let ((?x21198 (* l_0_11_52 l_0_11_52)))
 (let ((?x16117 (* l_0_11_51 l_0_11_51)))
 (let ((?x34785 (+ (+ (+ (* l_0_11_49 l_0_11_49) (* l_0_11_50 l_0_11_50)) ?x16117) ?x21198)))
 (= (- (- (- (- ?x34785 ?x31481) ?x31484) ?x31487) ?x31490) 0.0)))))))))
(assert
 (let ((?x30849 (* 2.0 l_0_11_73)))
 (let ((?x34248 (* ?x30849 l_0_11_77)))
 (let ((?x30846 (* 2.0 l_0_11_72)))
 (let ((?x34246 (* ?x30846 l_0_11_76)))
 (let ((?x30843 (* 2.0 l_0_11_71)))
 (let ((?x34244 (* ?x30843 l_0_11_75)))
 (let ((?x30840 (* 2.0 l_0_11_70)))
 (let ((?x34242 (* ?x30840 l_0_11_74)))
 (let ((?x30831 (* 2.0 l_0_11_52)))
 (let ((?x34238 (* ?x30831 l_0_11_56)))
 (let ((?x30828 (* 2.0 l_0_11_51)))
 (let ((?x34236 (* ?x30828 l_0_11_55)))
 (let ((?x30825 (* 2.0 l_0_11_50)))
 (let ((?x34234 (* ?x30825 l_0_11_54)))
 (let ((?x30822 (* 2.0 l_0_11_49)))
 (let ((?x34232 (* ?x30822 l_0_11_53)))
 (let ((?x33455 (* l_0_11_136 l_0_11_136)))
 (let ((?x33453 (* l_0_11_135 l_0_11_135)))
 (let ((?x34804 (- (- (* (- l_0_11_133) l_0_11_133) (* l_0_11_134 l_0_11_134)) ?x33453)))
 (let ((?x34811 (- (- (+ (+ (+ (+ (- ?x34804 ?x33455) ?x34232) ?x34234) ?x34236) ?x34238) ?x34242) ?x34244)))
 (= (- (- ?x34811 ?x34246) ?x34248) 0.0))))))))))))))))))))))
(assert
 (let ((?x34855 (* l_0_11_94 l_0_11_94)))
 (let ((?x34853 (* l_0_11_93 l_0_11_93)))
 (let ((?x34851 (* l_0_11_92 l_0_11_92)))
 (let ((?x34849 (* l_0_11_91 l_0_11_91)))
 (let ((?x30849 (* 2.0 l_0_11_73)))
 (let ((?x30850 (* ?x30849 l_0_11_82)))
 (let ((?x30846 (* 2.0 l_0_11_72)))
 (let ((?x30847 (* ?x30846 l_0_11_81)))
 (let ((?x30843 (* 2.0 l_0_11_71)))
 (let ((?x30844 (* ?x30843 l_0_11_80)))
 (let ((?x30840 (* 2.0 l_0_11_70)))
 (let ((?x30841 (* ?x30840 l_0_11_79)))
 (let ((?x30831 (* 2.0 l_0_11_52)))
 (let ((?x30832 (* ?x30831 l_0_11_61)))
 (let ((?x30828 (* 2.0 l_0_11_51)))
 (let ((?x30829 (* ?x30828 l_0_11_60)))
 (let ((?x30825 (* 2.0 l_0_11_50)))
 (let ((?x30826 (* ?x30825 l_0_11_59)))
 (let ((?x30822 (* 2.0 l_0_11_49)))
 (let ((?x30823 (* ?x30822 l_0_11_58)))
 (let ((?x34839 (* l_0_11_178 l_0_11_178)))
 (let ((?x34837 (* l_0_11_177 l_0_11_177)))
 (let ((?x34835 (* l_0_11_176 l_0_11_176)))
 (let ((?x34833 (* l_0_11_175 l_0_11_175)))
 (let ((?x34831 (* l_0_11_157 l_0_11_157)))
 (let ((?x34829 (* l_0_11_156 l_0_11_156)))
 (let ((?x34827 (* l_0_11_155 l_0_11_155)))
 (let ((?x34825 (* l_0_11_154 l_0_11_154)))
 (let ((?x34823 (* l_0_11_115 l_0_11_115)))
 (let ((?x34821 (* l_0_11_114 l_0_11_114)))
 (let ((?x34822 (+ (+ (* l_0_11_112 l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x34821)))
 (let ((?x34836 (- (- (+ (+ (+ (+ (+ ?x34822 ?x34823) ?x34825) ?x34827) ?x34829) ?x34831) ?x34833) ?x34835)))
 (let ((?x34845 (- (+ (+ (+ (+ (- (- ?x34836 ?x34837) ?x34839) ?x30823) ?x30826) ?x30829) ?x30832) ?x30841)))
 (let ((?x34856 (- (- (- (- (- (- (- ?x34845 ?x30844) ?x30847) ?x30850) ?x34849) ?x34851) ?x34853) ?x34855)))
 (= ?x34856 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33772 (* l_0_11_78 l_0_11_78)))
 (let ((?x33769 (* l_0_11_77 l_0_11_77)))
 (let ((?x33766 (* l_0_11_76 l_0_11_76)))
 (let ((?x33763 (* l_0_11_75 l_0_11_75)))
 (let ((?x33760 (* l_0_11_74 l_0_11_74)))
 (let ((?x23276 (* l_0_11_57 l_0_11_57)))
 (let ((?x23272 (* l_0_11_56 l_0_11_56)))
 (let ((?x23212 (* l_0_11_55 l_0_11_55)))
 (let ((?x23196 (* l_0_11_54 l_0_11_54)))
 (let ((?x23193 (* l_0_11_53 l_0_11_53)))
 (let ((?x33516 (* 2.0 l_0_11_136)))
 (let ((?x33517 (* ?x33516 l_0_11_140)))
 (let ((?x33513 (* 2.0 l_0_11_135)))
 (let ((?x33514 (* ?x33513 l_0_11_139)))
 (let ((?x33510 (* 2.0 l_0_11_134)))
 (let ((?x33511 (* ?x33510 l_0_11_138)))
 (let ((?x9043 (+ (- (- (- (* (* (- 2.0) l_0_11_133) l_0_11_137) ?x33511) ?x33514) ?x33517) ?x23193)))
 (let ((?x9116 (- (- (- (+ (+ (+ (+ ?x9043 ?x23196) ?x23212) ?x23272) ?x23276) ?x33760) ?x33763) ?x33766)))
 (= (- (- ?x9116 ?x33769) ?x33772) 0.0))))))))))))))))))))
(assert
 (let ((?x34926 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x34923 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x34920 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x34917 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x34530 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x34527 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x34524 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x34521 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x34518 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x34515 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x34512 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x34509 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x34506 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x34503 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x34903 (* 2.0 l_0_11_178)))
 (let ((?x34904 (* ?x34903 l_0_11_182)))
 (let ((?x34900 (* 2.0 l_0_11_177)))
 (let ((?x34901 (* ?x34900 l_0_11_181)))
 (let ((?x34897 (* 2.0 l_0_11_176)))
 (let ((?x34898 (* ?x34897 l_0_11_180)))
 (let ((?x34894 (* 2.0 l_0_11_175)))
 (let ((?x34895 (* ?x34894 l_0_11_179)))
 (let ((?x34891 (* 2.0 l_0_11_157)))
 (let ((?x34892 (* ?x34891 l_0_11_161)))
 (let ((?x34888 (* 2.0 l_0_11_156)))
 (let ((?x34889 (* ?x34888 l_0_11_160)))
 (let ((?x34885 (* 2.0 l_0_11_155)))
 (let ((?x34886 (* ?x34885 l_0_11_159)))
 (let ((?x34882 (* 2.0 l_0_11_154)))
 (let ((?x34883 (* ?x34882 l_0_11_158)))
 (let ((?x33516 (* 2.0 l_0_11_136)))
 (let ((?x33597 (* ?x33516 l_0_11_145)))
 (let ((?x33513 (* 2.0 l_0_11_135)))
 (let ((?x33595 (* ?x33513 l_0_11_144)))
 (let ((?x33510 (* 2.0 l_0_11_134)))
 (let ((?x33593 (* ?x33510 l_0_11_143)))
 (let ((?x33507 (* 2.0 l_0_11_133)))
 (let ((?x33591 (* ?x33507 l_0_11_142)))
 (let ((?x34875 (* 2.0 l_0_11_115)))
 (let ((?x34876 (* ?x34875 l_0_11_119)))
 (let ((?x34872 (* 2.0 l_0_11_114)))
 (let ((?x34873 (* ?x34872 l_0_11_118)))
 (let ((?x9340 (* 2.0 l_0_11_113)))
 (let ((?x9330 (* ?x9340 l_0_11_117)))
 (let ((?x34878 (- (+ (+ (+ (* (* 2.0 l_0_11_112) l_0_11_116) ?x9330) ?x34873) ?x34876) ?x33591)))
 (let ((?x34893 (+ (+ (+ (+ (- (- (- ?x34878 ?x33593) ?x33595) ?x33597) ?x34883) ?x34886) ?x34889) ?x34892)))
 (let ((?x34908 (+ (+ (+ (- (- (- (- ?x34893 ?x34895) ?x34898) ?x34901) ?x34904) ?x34503) ?x34506) ?x34509)))
 (let ((?x34915 (- (- (- (- (- (+ (+ ?x34908 ?x34512) ?x34515) ?x34518) ?x34521) ?x34524) ?x34527) ?x34530)))
 (= (- (- (- (- ?x34915 ?x34917) ?x34920) ?x34923) ?x34926) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31347 (* l_0_11_84 l_0_11_84)))
 (let ((?x31344 (* l_0_11_83 l_0_11_83)))
 (let ((?x31341 (* l_0_11_82 l_0_11_82)))
 (let ((?x31338 (* l_0_11_81 l_0_11_81)))
 (let ((?x31335 (* l_0_11_80 l_0_11_80)))
 (let ((?x31332 (* l_0_11_79 l_0_11_79)))
 (let ((?x21048 (* l_0_11_63 l_0_11_63)))
 (let ((?x21047 (* l_0_11_62 l_0_11_62)))
 (let ((?x21028 (* l_0_11_61 l_0_11_61)))
 (let ((?x31397 (* l_0_11_60 l_0_11_60)))
 (let ((?x21025 (* l_0_11_59 l_0_11_59)))
 (let ((?x21020 (* l_0_11_58 l_0_11_58)))
 (let ((?x34903 (* 2.0 l_0_11_178)))
 (let ((?x34982 (* ?x34903 l_0_11_187)))
 (let ((?x34900 (* 2.0 l_0_11_177)))
 (let ((?x34980 (* ?x34900 l_0_11_186)))
 (let ((?x34897 (* 2.0 l_0_11_176)))
 (let ((?x34978 (* ?x34897 l_0_11_185)))
 (let ((?x34894 (* 2.0 l_0_11_175)))
 (let ((?x34976 (* ?x34894 l_0_11_184)))
 (let ((?x34891 (* 2.0 l_0_11_157)))
 (let ((?x34974 (* ?x34891 l_0_11_166)))
 (let ((?x34888 (* 2.0 l_0_11_156)))
 (let ((?x34972 (* ?x34888 l_0_11_165)))
 (let ((?x34885 (* 2.0 l_0_11_155)))
 (let ((?x34970 (* ?x34885 l_0_11_164)))
 (let ((?x34882 (* 2.0 l_0_11_154)))
 (let ((?x34968 (* ?x34882 l_0_11_163)))
 (let ((?x34875 (* 2.0 l_0_11_115)))
 (let ((?x34966 (* ?x34875 l_0_11_124)))
 (let ((?x34872 (* 2.0 l_0_11_114)))
 (let ((?x34964 (* ?x34872 l_0_11_123)))
 (let ((?x9340 (* 2.0 l_0_11_113)))
 (let ((?x34962 (* ?x9340 l_0_11_122)))
 (let ((?x24875 (* 2.0 l_0_11_112)))
 (let ((?x34960 (* ?x24875 l_0_11_121)))
 (let ((?x34957 (* 2.0 l_0_11_103)))
 (let ((?x34958 (* ?x34957 l_0_11_94)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x34955 (* ?x33972 l_0_11_93)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x24892 (* ?x31203 l_0_11_92)))
 (let ((?x34961 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_91) ?x24892) ?x34955) ?x34958) ?x34960)))
 (let ((?x34975 (+ (+ (+ (+ (+ (+ (+ ?x34961 ?x34962) ?x34964) ?x34966) ?x34968) ?x34970) ?x34972) ?x34974)))
 (let ((?x34986 (+ (+ (+ (- (- (- (- ?x34975 ?x34976) ?x34978) ?x34980) ?x34982) ?x21020) ?x21025) ?x31397)))
 (let ((?x34993 (- (- (- (- (+ (+ (+ ?x34986 ?x21028) ?x21047) ?x21048) ?x31332) ?x31335) ?x31338) ?x31341)))
 (= (- (- ?x34993 ?x31344) ?x31347) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35080 (* l_0_11_99 l_0_11_99)))
 (let ((?x35078 (* l_0_11_98 l_0_11_98)))
 (let ((?x35076 (* l_0_11_97 l_0_11_97)))
 (let ((?x35074 (* l_0_11_96 l_0_11_96)))
 (let ((?x35072 (* l_0_11_95 l_0_11_95)))
 (let ((?x35070 (* l_0_11_183 l_0_11_183)))
 (let ((?x35068 (* l_0_11_182 l_0_11_182)))
 (let ((?x35066 (* l_0_11_181 l_0_11_181)))
 (let ((?x35064 (* l_0_11_180 l_0_11_180)))
 (let ((?x35062 (* l_0_11_179 l_0_11_179)))
 (let ((?x35060 (* l_0_11_162 l_0_11_162)))
 (let ((?x35058 (* l_0_11_161 l_0_11_161)))
 (let ((?x35056 (* l_0_11_160 l_0_11_160)))
 (let ((?x35054 (* l_0_11_159 l_0_11_159)))
 (let ((?x35052 (* l_0_11_158 l_0_11_158)))
 (let ((?x33835 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x33832 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x33826 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x33823 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x33820 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x35045 (* l_0_11_120 l_0_11_120)))
 (let ((?x35043 (* l_0_11_119 l_0_11_119)))
 (let ((?x35041 (* l_0_11_118 l_0_11_118)))
 (let ((?x35042 (+ (+ (* l_0_11_116 l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35041)))
 (let ((?x35051 (- (- (- (- (- (+ (+ ?x35042 ?x35043) ?x35045) ?x33820) ?x33823) ?x33826) ?x33832) ?x33835)))
 (let ((?x35065 (- (- (+ (+ (+ (+ (+ ?x35051 ?x35052) ?x35054) ?x35056) ?x35058) ?x35060) ?x35062) ?x35064)))
 (let ((?x35079 (- (- (- (- (- (- (- ?x35065 ?x35066) ?x35068) ?x35070) ?x35072) ?x35074) ?x35076) ?x35078)))
 (= (- ?x35079 ?x35080) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x35147 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x35144 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x35141 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x35138 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x35135 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x35132 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x35129 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x35126 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x35123 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x35120 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x33991 (* l_0_11_147 l_0_11_147)))
 (let ((?x33989 (* l_0_11_146 l_0_11_146)))
 (let ((?x33987 (* l_0_11_145 l_0_11_145)))
 (let ((?x33985 (* l_0_11_144 l_0_11_144)))
 (let ((?x33983 (* l_0_11_143 l_0_11_143)))
 (let ((?x33981 (* l_0_11_142 l_0_11_142)))
 (let ((?x35111 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x35108 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x35105 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x35102 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x35099 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x9749 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x34957 (* 2.0 l_0_11_103)))
 (let ((?x9682 (* ?x34957 l_0_11_98)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x9674 (* ?x33972 l_0_11_97)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x25044 (* ?x31203 l_0_11_96)))
 (let ((?x35097 (- (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_95) ?x25044) ?x9674) ?x9682) ?x9749)))
 (let ((?x35114 (- (- (+ (+ (+ (+ (+ ?x35097 ?x35099) ?x35102) ?x35105) ?x35108) ?x35111) ?x33981) ?x33983)))
 (let ((?x35127 (+ (+ (+ (- (- (- (- ?x35114 ?x33985) ?x33987) ?x33989) ?x33991) ?x35120) ?x35123) ?x35126)))
 (let ((?x35148 (- (- (- (- (- (+ (+ ?x35127 ?x35129) ?x35132) ?x35135) ?x35138) ?x35141) ?x35144) ?x35147)))
 (= ?x35148 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35248 (* l_0_11_189 l_0_11_189)))
 (let ((?x35246 (* l_0_11_188 l_0_11_188)))
 (let ((?x35244 (* l_0_11_187 l_0_11_187)))
 (let ((?x35242 (* l_0_11_186 l_0_11_186)))
 (let ((?x35240 (* l_0_11_185 l_0_11_185)))
 (let ((?x35238 (* l_0_11_184 l_0_11_184)))
 (let ((?x35236 (* l_0_11_168 l_0_11_168)))
 (let ((?x35234 (* l_0_11_167 l_0_11_167)))
 (let ((?x35232 (* l_0_11_166 l_0_11_166)))
 (let ((?x35230 (* l_0_11_165 l_0_11_165)))
 (let ((?x35228 (* l_0_11_164 l_0_11_164)))
 (let ((?x35226 (* l_0_11_163 l_0_11_163)))
 (let ((?x35224 (* l_0_11_126 l_0_11_126)))
 (let ((?x35222 (* l_0_11_125 l_0_11_125)))
 (let ((?x35220 (* l_0_11_124 l_0_11_124)))
 (let ((?x35218 (* l_0_11_123 l_0_11_123)))
 (let ((?x35216 (* l_0_11_122 l_0_11_122)))
 (let ((?x35214 (* l_0_11_121 l_0_11_121)))
 (let ((?x35212 (* l_0_11_105 l_0_11_105)))
 (let ((?x35210 (* l_0_11_104 l_0_11_104)))
 (let ((?x35208 (* l_0_11_103 l_0_11_103)))
 (let ((?x35206 (* l_0_11_102 l_0_11_102)))
 (let ((?x35207 (- (- (* (- l_0_11_100) l_0_11_100) (* l_0_11_101 l_0_11_101)) ?x35206)))
 (let ((?x35221 (+ (+ (+ (+ (- (- (- ?x35207 ?x35208) ?x35210) ?x35212) ?x35214) ?x35216) ?x35218) ?x35220)))
 (let ((?x35235 (+ (+ (+ (+ (+ (+ (+ ?x35221 ?x35222) ?x35224) ?x35226) ?x35228) ?x35230) ?x35232) ?x35234)))
 (let ((?x35249 (- (- (- (- (- (- (+ ?x35235 ?x35236) ?x35238) ?x35240) ?x35242) ?x35244) ?x35246) ?x35248)))
 (= ?x35249 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x31968 (* l_0_11_85 l_0_11_85)))
 (let ((?x31964 (* l_0_11_169 l_0_11_169)))
 (let ((?x35290 (+ (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_148 l_0_11_148)) ?x31964)))
 (= (+ ?x35290 ?x31968) 0.0)))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32566 (* ?x32330 l_0_11_88)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32548 (* ?x32304 l_0_11_172)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32544 (* ?x32298 l_0_11_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_109) ?x32544) ?x32548) ?x32566) 0.0))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32676 (* ?x32330 l_0_11_91)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32660 (* ?x32304 l_0_11_175)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32656 (* ?x32298 l_0_11_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x32656) ?x32660) ?x32676) 0.0))))))))
(assert
 (let ((?x32330 (* 2.0 l_0_11_85)))
 (let ((?x32761 (* ?x32330 l_0_11_95)))
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32744 (* ?x32304 l_0_11_179)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32739 (* ?x32298 l_0_11_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_116) ?x32739) ?x32744) ?x32761) 0.0))))))))
(assert
 (let ((?x32304 (* 2.0 l_0_11_169)))
 (let ((?x32808 (* ?x32304 l_0_11_184)))
 (let ((?x32298 (* 2.0 l_0_11_148)))
 (let ((?x32805 (* ?x32298 l_0_11_163)))
 (let ((?x32289 (* 2.0 l_0_11_106)))
 (let ((?x32803 (* ?x32289 l_0_11_121)))
 (= (+ (- (- (* (* 2.0 l_0_11_100) l_0_11_85) ?x32803) ?x32805) ?x32808) 0.0))))))))
(assert
 (let ((?x33424 (* l_0_11_90 l_0_11_90)))
 (let ((?x33422 (* l_0_11_89 l_0_11_89)))
 (let ((?x33420 (* l_0_11_88 l_0_11_88)))
 (let ((?x33398 (* l_0_11_174 l_0_11_174)))
 (let ((?x33396 (* l_0_11_173 l_0_11_173)))
 (let ((?x33394 (* l_0_11_172 l_0_11_172)))
 (let ((?x33390 (* l_0_11_153 l_0_11_153)))
 (let ((?x33388 (* l_0_11_152 l_0_11_152)))
 (let ((?x33386 (* l_0_11_151 l_0_11_151)))
 (let ((?x22551 (* l_0_11_111 l_0_11_111)))
 (let ((?x7478 (- (- (* (- l_0_11_109) l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x22551)))
 (let ((?x35327 (+ (+ (+ (+ (- (- (- ?x7478 ?x33386) ?x33388) ?x33390) ?x33394) ?x33396) ?x33398) ?x33420)))
 (= (+ (+ ?x35327 ?x33422) ?x33424) 0.0))))))))))))))
(assert
 (let ((?x33652 (* 2.0 l_0_11_90)))
 (let ((?x33653 (* ?x33652 l_0_11_93)))
 (let ((?x33649 (* 2.0 l_0_11_89)))
 (let ((?x33650 (* ?x33649 l_0_11_92)))
 (let ((?x33646 (* 2.0 l_0_11_88)))
 (let ((?x33647 (* ?x33646 l_0_11_91)))
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x33617 (* ?x33616 l_0_11_177)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x33614 (* ?x33613 l_0_11_176)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x33611 (* ?x33610 l_0_11_175)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33606 (* ?x33605 l_0_11_156)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33603 (* ?x33602 l_0_11_155)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33600 (* ?x33599 l_0_11_154)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33589 (* ?x33588 l_0_11_114)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x22894 (* ?x22865 l_0_11_113)))
 (let ((?x35339 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_112) ?x22894) ?x33589) ?x33600) ?x33603)))
 (let ((?x35346 (+ (+ (+ (+ (+ (+ (- ?x35339 ?x33606) ?x33611) ?x33614) ?x33617) ?x33647) ?x33650) ?x33653)))
 (= ?x35346 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33652 (* 2.0 l_0_11_90)))
 (let ((?x33901 (* ?x33652 l_0_11_97)))
 (let ((?x33649 (* 2.0 l_0_11_89)))
 (let ((?x33899 (* ?x33649 l_0_11_96)))
 (let ((?x33646 (* 2.0 l_0_11_88)))
 (let ((?x33897 (* ?x33646 l_0_11_95)))
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x33850 (* ?x33616 l_0_11_181)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x33848 (* ?x33613 l_0_11_180)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x33846 (* ?x33610 l_0_11_179)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33844 (* ?x33605 l_0_11_160)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33842 (* ?x33602 l_0_11_159)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33840 (* ?x33599 l_0_11_158)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33810 (* ?x33588 l_0_11_118)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x33808 (* ?x22865 l_0_11_117)))
 (let ((?x35353 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_116) ?x33808) ?x33810) ?x33840) ?x33842)))
 (let ((?x35360 (+ (+ (+ (+ (+ (+ (- ?x35353 ?x33844) ?x33846) ?x33848) ?x33850) ?x33897) ?x33899) ?x33901)))
 (= ?x35360 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33616 (* 2.0 l_0_11_174)))
 (let ((?x34005 (* ?x33616 l_0_11_186)))
 (let ((?x33613 (* 2.0 l_0_11_173)))
 (let ((?x34003 (* ?x33613 l_0_11_185)))
 (let ((?x33610 (* 2.0 l_0_11_172)))
 (let ((?x34001 (* ?x33610 l_0_11_184)))
 (let ((?x33605 (* 2.0 l_0_11_153)))
 (let ((?x33997 (* ?x33605 l_0_11_165)))
 (let ((?x33602 (* 2.0 l_0_11_152)))
 (let ((?x33995 (* ?x33602 l_0_11_164)))
 (let ((?x33599 (* 2.0 l_0_11_151)))
 (let ((?x33993 (* ?x33599 l_0_11_163)))
 (let ((?x33588 (* 2.0 l_0_11_111)))
 (let ((?x33979 (* ?x33588 l_0_11_123)))
 (let ((?x22865 (* 2.0 l_0_11_110)))
 (let ((?x33977 (* ?x22865 l_0_11_122)))
 (let ((?x6943 (* 2.0 l_0_11_109)))
 (let ((?x33975 (* ?x6943 l_0_11_121)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x33973 (* ?x33972 l_0_11_90)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x33970 (* ?x31203 l_0_11_89)))
 (let ((?x23769 (- (- (+ (+ (* (* 2.0 l_0_11_100) l_0_11_88) ?x33970) ?x33973) ?x33975) ?x33977)))
 (let ((?x35371 (+ (+ (+ (- (- (- (- ?x23769 ?x33979) ?x33993) ?x33995) ?x33997) ?x34001) ?x34003) ?x34005)))
 (= ?x35371 0.0))))))))))))))))))))))))))
(assert
 (let ((?x34855 (* l_0_11_94 l_0_11_94)))
 (let ((?x34853 (* l_0_11_93 l_0_11_93)))
 (let ((?x34851 (* l_0_11_92 l_0_11_92)))
 (let ((?x34849 (* l_0_11_91 l_0_11_91)))
 (let ((?x34839 (* l_0_11_178 l_0_11_178)))
 (let ((?x34837 (* l_0_11_177 l_0_11_177)))
 (let ((?x34835 (* l_0_11_176 l_0_11_176)))
 (let ((?x34833 (* l_0_11_175 l_0_11_175)))
 (let ((?x34831 (* l_0_11_157 l_0_11_157)))
 (let ((?x34829 (* l_0_11_156 l_0_11_156)))
 (let ((?x34827 (* l_0_11_155 l_0_11_155)))
 (let ((?x34825 (* l_0_11_154 l_0_11_154)))
 (let ((?x34823 (* l_0_11_115 l_0_11_115)))
 (let ((?x34821 (* l_0_11_114 l_0_11_114)))
 (let ((?x10420 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x34821)))
 (let ((?x35380 (+ (+ (- (- (- (- (- ?x10420 ?x34823) ?x34825) ?x34827) ?x34829) ?x34831) ?x34833) ?x34835)))
 (= (+ (+ (+ (+ (+ (+ ?x35380 ?x34837) ?x34839) ?x34849) ?x34851) ?x34853) ?x34855) 0.0))))))))))))))))))
(assert
 (let ((?x34926 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x34923 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x34920 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x34917 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x34903 (* 2.0 l_0_11_178)))
 (let ((?x34904 (* ?x34903 l_0_11_182)))
 (let ((?x34900 (* 2.0 l_0_11_177)))
 (let ((?x34901 (* ?x34900 l_0_11_181)))
 (let ((?x34897 (* 2.0 l_0_11_176)))
 (let ((?x34898 (* ?x34897 l_0_11_180)))
 (let ((?x34894 (* 2.0 l_0_11_175)))
 (let ((?x34895 (* ?x34894 l_0_11_179)))
 (let ((?x34891 (* 2.0 l_0_11_157)))
 (let ((?x34892 (* ?x34891 l_0_11_161)))
 (let ((?x34888 (* 2.0 l_0_11_156)))
 (let ((?x34889 (* ?x34888 l_0_11_160)))
 (let ((?x34885 (* 2.0 l_0_11_155)))
 (let ((?x34886 (* ?x34885 l_0_11_159)))
 (let ((?x34882 (* 2.0 l_0_11_154)))
 (let ((?x34883 (* ?x34882 l_0_11_158)))
 (let ((?x34875 (* 2.0 l_0_11_115)))
 (let ((?x34876 (* ?x34875 l_0_11_119)))
 (let ((?x34872 (* 2.0 l_0_11_114)))
 (let ((?x34873 (* ?x34872 l_0_11_118)))
 (let ((?x9340 (* 2.0 l_0_11_113)))
 (let ((?x9330 (* ?x9340 l_0_11_117)))
 (let ((?x35403 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_116) ?x9330) ?x34873) ?x34876) ?x34883)))
 (let ((?x35410 (+ (+ (+ (+ (- (- (- ?x35403 ?x34886) ?x34889) ?x34892) ?x34895) ?x34898) ?x34901) ?x34904)))
 (= (+ (+ (+ (+ ?x35410 ?x34917) ?x34920) ?x34923) ?x34926) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x34903 (* 2.0 l_0_11_178)))
 (let ((?x34982 (* ?x34903 l_0_11_187)))
 (let ((?x34900 (* 2.0 l_0_11_177)))
 (let ((?x34980 (* ?x34900 l_0_11_186)))
 (let ((?x34897 (* 2.0 l_0_11_176)))
 (let ((?x34978 (* ?x34897 l_0_11_185)))
 (let ((?x34894 (* 2.0 l_0_11_175)))
 (let ((?x34976 (* ?x34894 l_0_11_184)))
 (let ((?x34891 (* 2.0 l_0_11_157)))
 (let ((?x34974 (* ?x34891 l_0_11_166)))
 (let ((?x34888 (* 2.0 l_0_11_156)))
 (let ((?x34972 (* ?x34888 l_0_11_165)))
 (let ((?x34885 (* 2.0 l_0_11_155)))
 (let ((?x34970 (* ?x34885 l_0_11_164)))
 (let ((?x34882 (* 2.0 l_0_11_154)))
 (let ((?x34968 (* ?x34882 l_0_11_163)))
 (let ((?x34875 (* 2.0 l_0_11_115)))
 (let ((?x34966 (* ?x34875 l_0_11_124)))
 (let ((?x34872 (* 2.0 l_0_11_114)))
 (let ((?x34964 (* ?x34872 l_0_11_123)))
 (let ((?x9340 (* 2.0 l_0_11_113)))
 (let ((?x34962 (* ?x9340 l_0_11_122)))
 (let ((?x24875 (* 2.0 l_0_11_112)))
 (let ((?x34960 (* ?x24875 l_0_11_121)))
 (let ((?x34957 (* 2.0 l_0_11_103)))
 (let ((?x34958 (* ?x34957 l_0_11_94)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x34955 (* ?x33972 l_0_11_93)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x24892 (* ?x31203 l_0_11_92)))
 (let ((?x35435 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_91) ?x24892) ?x34955) ?x34958) ?x34960)))
 (let ((?x35442 (- (- (- (- (- (- (- ?x35435 ?x34962) ?x34964) ?x34966) ?x34968) ?x34970) ?x34972) ?x34974)))
 (= (+ (+ (+ (+ ?x35442 ?x34976) ?x34978) ?x34980) ?x34982) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35080 (* l_0_11_99 l_0_11_99)))
 (let ((?x35078 (* l_0_11_98 l_0_11_98)))
 (let ((?x35076 (* l_0_11_97 l_0_11_97)))
 (let ((?x35074 (* l_0_11_96 l_0_11_96)))
 (let ((?x35072 (* l_0_11_95 l_0_11_95)))
 (let ((?x35070 (* l_0_11_183 l_0_11_183)))
 (let ((?x35068 (* l_0_11_182 l_0_11_182)))
 (let ((?x35066 (* l_0_11_181 l_0_11_181)))
 (let ((?x35064 (* l_0_11_180 l_0_11_180)))
 (let ((?x35062 (* l_0_11_179 l_0_11_179)))
 (let ((?x35060 (* l_0_11_162 l_0_11_162)))
 (let ((?x35058 (* l_0_11_161 l_0_11_161)))
 (let ((?x35056 (* l_0_11_160 l_0_11_160)))
 (let ((?x35054 (* l_0_11_159 l_0_11_159)))
 (let ((?x35052 (* l_0_11_158 l_0_11_158)))
 (let ((?x35045 (* l_0_11_120 l_0_11_120)))
 (let ((?x35043 (* l_0_11_119 l_0_11_119)))
 (let ((?x35041 (* l_0_11_118 l_0_11_118)))
 (let ((?x24526 (- (- (* (- l_0_11_116) l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35041)))
 (let ((?x10594 (- (- (- (- (- (- (- ?x24526 ?x35043) ?x35045) ?x35052) ?x35054) ?x35056) ?x35058) ?x35060)))
 (let ((?x35461 (+ (+ (+ (+ (+ (+ (+ ?x10594 ?x35062) ?x35064) ?x35066) ?x35068) ?x35070) ?x35072) ?x35074)))
 (= (+ (+ (+ ?x35461 ?x35076) ?x35078) ?x35080) 0.0)))))))))))))))))))))))
(assert
 (let ((?x35147 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x35144 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x35141 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x35138 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x35135 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x35132 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x35129 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x35126 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x35123 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x35120 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x35111 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x35108 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x35105 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x35102 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x35099 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x9749 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x34957 (* 2.0 l_0_11_103)))
 (let ((?x9682 (* ?x34957 l_0_11_98)))
 (let ((?x33972 (* 2.0 l_0_11_102)))
 (let ((?x9674 (* ?x33972 l_0_11_97)))
 (let ((?x31203 (* 2.0 l_0_11_101)))
 (let ((?x25044 (* ?x31203 l_0_11_96)))
 (let ((?x10804 (+ (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_95) ?x25044) ?x9674) ?x9682) ?x9749)))
 (let ((?x10761 (- (- (- (- (- (- (- ?x10804 ?x35099) ?x35102) ?x35105) ?x35108) ?x35111) ?x35120) ?x35123)))
 (let ((?x35469 (+ (+ (+ (+ (- (- (- ?x10761 ?x35126) ?x35129) ?x35132) ?x35135) ?x35138) ?x35141) ?x35144)))
 (= (+ ?x35469 ?x35147) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x35248 (* l_0_11_189 l_0_11_189)))
 (let ((?x35246 (* l_0_11_188 l_0_11_188)))
 (let ((?x35244 (* l_0_11_187 l_0_11_187)))
 (let ((?x35242 (* l_0_11_186 l_0_11_186)))
 (let ((?x35240 (* l_0_11_185 l_0_11_185)))
 (let ((?x35238 (* l_0_11_184 l_0_11_184)))
 (let ((?x35236 (* l_0_11_168 l_0_11_168)))
 (let ((?x35234 (* l_0_11_167 l_0_11_167)))
 (let ((?x35232 (* l_0_11_166 l_0_11_166)))
 (let ((?x35230 (* l_0_11_165 l_0_11_165)))
 (let ((?x35228 (* l_0_11_164 l_0_11_164)))
 (let ((?x35226 (* l_0_11_163 l_0_11_163)))
 (let ((?x35224 (* l_0_11_126 l_0_11_126)))
 (let ((?x35222 (* l_0_11_125 l_0_11_125)))
 (let ((?x35220 (* l_0_11_124 l_0_11_124)))
 (let ((?x35218 (* l_0_11_123 l_0_11_123)))
 (let ((?x35216 (* l_0_11_122 l_0_11_122)))
 (let ((?x35214 (* l_0_11_121 l_0_11_121)))
 (let ((?x35212 (* l_0_11_105 l_0_11_105)))
 (let ((?x35210 (* l_0_11_104 l_0_11_104)))
 (let ((?x35208 (* l_0_11_103 l_0_11_103)))
 (let ((?x35206 (* l_0_11_102 l_0_11_102)))
 (let ((?x10427 (+ (+ (* l_0_11_100 l_0_11_100) (* l_0_11_101 l_0_11_101)) ?x35206)))
 (let ((?x35483 (- (- (- (- (+ (+ (+ ?x10427 ?x35208) ?x35210) ?x35212) ?x35214) ?x35216) ?x35218) ?x35220)))
 (let ((?x35490 (- (- (- (- (- (- (- ?x35483 ?x35222) ?x35224) ?x35226) ?x35228) ?x35230) ?x35232) ?x35234)))
 (let ((?x35497 (+ (+ (+ (+ (+ (+ (- ?x35490 ?x35236) ?x35238) ?x35240) ?x35242) ?x35244) ?x35246) ?x35248)))
 (= ?x35497 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x33726 (* l_0_11_141 l_0_11_141)))
 (let ((?x33724 (* l_0_11_140 l_0_11_140)))
 (let ((?x33720 (* l_0_11_139 l_0_11_139)))
 (let ((?x11209 (- (- (* (- l_0_11_137) l_0_11_137) (* l_0_11_138 l_0_11_138)) ?x33720)))
 (= (- (- ?x11209 ?x33724) ?x33726) 0.0))))))
(assert
 (>= l_0_11_1 0.0))
(assert
 (>= l_0_11_3 0.0))
(assert
 (>= l_0_11_6 0.0))
(assert
 (>= l_0_11_10 0.0))
(assert
 (>= l_0_11_15 0.0))
(assert
 (>= l_0_11_21 0.0))
(assert
 (>= l_0_11_22 0.0))
(assert
 (>= l_0_11_24 0.0))
(assert
 (>= l_0_11_27 0.0))
(assert
 (>= l_0_11_31 0.0))
(assert
 (>= l_0_11_36 0.0))
(assert
 (>= l_0_11_42 0.0))
(assert
 (>= l_0_11_43 0.0))
(assert
 (>= l_0_11_45 0.0))
(assert
 (>= l_0_11_48 0.0))
(assert
 (>= l_0_11_52 0.0))
(assert
 (>= l_0_11_57 0.0))
(assert
 (>= l_0_11_63 0.0))
(assert
 (>= l_0_11_64 0.0))
(assert
 (>= l_0_11_66 0.0))
(assert
 (>= l_0_11_69 0.0))
(assert
 (>= l_0_11_73 0.0))
(assert
 (>= l_0_11_78 0.0))
(assert
 (>= l_0_11_84 0.0))
(assert
 (>= l_0_11_85 0.0))
(assert
 (>= l_0_11_87 0.0))
(assert
 (>= l_0_11_90 0.0))
(assert
 (>= l_0_11_94 0.0))
(assert
 (>= l_0_11_99 0.0))
(assert
 (>= l_0_11_105 0.0))
(assert
 (>= l_0_11_106 0.0))
(assert
 (>= l_0_11_108 0.0))
(assert
 (>= l_0_11_111 0.0))
(assert
 (>= l_0_11_115 0.0))
(assert
 (>= l_0_11_120 0.0))
(assert
 (>= l_0_11_126 0.0))
(assert
 (>= l_0_11_127 0.0))
(assert
 (>= l_0_11_129 0.0))
(assert
 (>= l_0_11_132 0.0))
(assert
 (>= l_0_11_136 0.0))
(assert
 (>= l_0_11_141 0.0))
(assert
 (>= l_0_11_147 0.0))
(assert
 (>= l_0_11_148 0.0))
(assert
 (>= l_0_11_150 0.0))
(assert
 (>= l_0_11_153 0.0))
(assert
 (>= l_0_11_157 0.0))
(assert
 (>= l_0_11_162 0.0))
(assert
 (>= l_0_11_168 0.0))
(assert
 (>= l_0_11_169 0.0))
(assert
 (>= l_0_11_171 0.0))
(assert
 (>= l_0_11_174 0.0))
(assert
 (>= l_0_11_178 0.0))
(assert
 (>= l_0_11_183 0.0))
(assert
 (>= l_0_11_189 0.0))
(assert
 (>= l_0_11_190 0.0))
(assert
 (>= l_0_11_192 0.0))
(assert
 (>= l_0_11_195 0.0))
(assert
 (>= l_0_11_199 0.0))
(assert
 (>= l_0_11_204 0.0))
(assert
 (>= l_0_11_210 0.0))
(assert
 (>= l_0_11_211 0.0))
(assert
 (>= l_0_11_213 0.0))
(assert
 (>= l_0_11_216 0.0))
(assert
 (>= l_0_11_220 0.0))
(assert
 (>= l_0_11_225 0.0))
(assert
 (>= l_0_11_231 0.0))
(assert
 (>= l_0_11_232 0.0))
(assert
 (>= l_0_11_234 0.0))
(assert
 (>= l_0_11_237 0.0))
(assert
 (>= l_0_11_241 0.0))
(assert
 (>= l_0_11_246 0.0))
(assert
 (>= l_0_11_252 0.0))
(assert
 (>= l_0_11_253 0.0))
(assert
 (>= l_0_11_255 0.0))
(assert
 (>= l_0_11_258 0.0))
(assert
 (>= l_0_11_262 0.0))
(assert
 (>= l_0_11_267 0.0))
(assert
 (>= l_0_11_273 0.0))
(assert
 (>= l_0_11_274 0.0))
(assert
 (>= l_0_11_276 0.0))
(assert
 (>= l_0_11_279 0.0))
(assert
 (>= l_0_11_283 0.0))
(assert
 (>= l_0_11_288 0.0))
(assert
 (>= l_0_11_294 0.0))
(assert
 (let ((?x35639 (* l_0_12_87 l_0_12_87)))
 (let ((?x35637 (* l_0_12_86 l_0_12_86)))
 (let ((?x35634 (* l_0_12_69 l_0_12_69)))
 (let ((?x35635 (* 3.0 ?x35634)))
 (let ((?x35631 (* l_0_12_68 l_0_12_68)))
 (let ((?x35632 (* 3.0 ?x35631)))
 (let ((?x35628 (* l_0_12_67 l_0_12_67)))
 (let ((?x35629 (* 3.0 ?x35628)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x35626 (* ?x35625 l_0_12_68)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x35623 (* ?x35622 l_0_12_67)))
 (let ((?x35619 (* l_0_12_6 l_0_12_6)))
 (let ((?x35620 (* 6.0 ?x35619)))
 (let ((?x35616 (* l_0_12_5 l_0_12_5)))
 (let ((?x35617 (* 6.0 ?x35616)))
 (let ((?x35614 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x35611 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x35608 (* (* 3.0 l_0_12_46) l_0_12_46)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x35605 (* ?x35604 l_0_12_47)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x35602 (* ?x35601 l_0_12_46)))
 (let ((?x35598 (* l_0_12_4 l_0_12_4)))
 (let ((?x35599 (* 6.0 ?x35598)))
 (let ((?x35596 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x35593 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x35590 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x35587 (* l_0_12_171 l_0_12_171)))
 (let ((?x35585 (* l_0_12_170 l_0_12_170)))
 (let ((?x35583 (* l_0_12_150 l_0_12_150)))
 (let ((?x35581 (* l_0_12_149 l_0_12_149)))
 (let ((?x35579 (* l_0_12_132 l_0_12_132)))
 (let ((?x35577 (* l_0_12_131 l_0_12_131)))
 (let ((?x35575 (* l_0_12_130 l_0_12_130)))
 (let ((?x35576 (+ (- (* (- l_0_12_107) l_0_12_107) (* l_0_12_108 l_0_12_108)) ?x35575)))
 (let ((?x35591 (- (+ (+ (- (- (+ (+ ?x35576 ?x35577) ?x35579) ?x35581) ?x35583) ?x35585) ?x35587) ?x35590)))
 (let ((?x35612 (- (- (- (- (+ (- (- ?x35591 ?x35593) ?x35596) ?x35599) ?x35602) ?x35605) ?x35608) ?x35611)))
 (let ((?x35633 (+ (+ (+ (+ (+ (+ (- ?x35612 ?x35614) ?x35617) ?x35620) ?x35623) ?x35626) ?x35629) ?x35632)))
 (= (+ (+ (+ (+ ?x35633 ?x35635) ?x35637) ?x35639) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35773 (* l_0_12_66 l_0_12_66)))
 (let ((?x35774 (* 3.0 ?x35773)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x35626 (* ?x35625 l_0_12_68)))
 (let ((?x35769 (* l_0_12_65 l_0_12_65)))
 (let ((?x35770 (* 3.0 ?x35769)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x35623 (* ?x35622 l_0_12_67)))
 (let ((?x35619 (* l_0_12_6 l_0_12_6)))
 (let ((?x35620 (* 6.0 ?x35619)))
 (let ((?x35616 (* l_0_12_5 l_0_12_5)))
 (let ((?x35617 (* 6.0 ?x35616)))
 (let ((?x35755 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x35605 (* ?x35604 l_0_12_47)))
 (let ((?x35751 (* (* 3.0 l_0_12_44) l_0_12_44)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x35602 (* ?x35601 l_0_12_46)))
 (let ((?x35598 (* l_0_12_4 l_0_12_4)))
 (let ((?x35599 (* 6.0 ?x35598)))
 (let ((?x35746 (* l_0_12_300 l_0_12_300)))
 (let ((?x35743 (* 12.0 l_0_12_3)))
 (let ((?x35744 (* ?x35743 l_0_12_5)))
 (let ((?x35741 (* l_0_12_299 l_0_12_299)))
 (let ((?x35739 (* l_0_12_298 l_0_12_298)))
 (let ((?x35737 (* l_0_12_279 l_0_12_279)))
 (let ((?x35735 (* l_0_12_278 l_0_12_278)))
 (let ((?x35733 (* l_0_12_277 l_0_12_277)))
 (let ((?x35596 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x35593 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x35729 (* l_0_12_258 l_0_12_258)))
 (let ((?x35727 (* l_0_12_257 l_0_12_257)))
 (let ((?x35725 (* l_0_12_256 l_0_12_256)))
 (let ((?x35590 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x35722 (* ?x35721 l_0_12_26)))
 (let ((?x35719 (* l_0_12_237 l_0_12_237)))
 (let ((?x35717 (* l_0_12_236 l_0_12_236)))
 (let ((?x35715 (* l_0_12_235 l_0_12_235)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x35713 (* ?x35712 l_0_12_25)))
 (let ((?x35710 (* l_0_12_216 l_0_12_216)))
 (let ((?x35708 (* l_0_12_215 l_0_12_215)))
 (let ((?x35706 (* l_0_12_214 l_0_12_214)))
 (let ((?x35703 (* 12.0 l_0_12_2)))
 (let ((?x35704 (* ?x35703 l_0_12_4)))
 (let ((?x35701 (* l_0_12_195 l_0_12_195)))
 (let ((?x35699 (* l_0_12_194 l_0_12_194)))
 (let ((?x35697 (* l_0_12_193 l_0_12_193)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x35695 (* ?x35677 l_0_12_131)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x35676 (* ?x35674 l_0_12_130)))
 (let ((?x35709 (- (- (+ (- (- (- (+ ?x35676 ?x35695) ?x35697) ?x35699) ?x35701) ?x35704) ?x35706) ?x35708)))
 (let ((?x35724 (- (- (- (- (- (- (- ?x35709 ?x35710) ?x35713) ?x35715) ?x35717) ?x35719) ?x35722) ?x35590)))
 (let ((?x35736 (- (- (- (- (- (- (- ?x35724 ?x35725) ?x35727) ?x35729) ?x35593) ?x35596) ?x35733) ?x35735)))
 (let ((?x35749 (- (+ (- (+ (- (- (- ?x35736 ?x35737) ?x35739) ?x35741) ?x35744) ?x35746) ?x35599) ?x35602)))
 (let ((?x35759 (- (- (- (- ?x35749 ?x35751) ?x35605) ?x35755) (* (* 1.0 l_0_12_46) l_0_12_46))))
 (let ((?x35765 (- (- ?x35759 (* (* 1.0 l_0_12_47) l_0_12_47)) (* (* 1.0 l_0_12_48) l_0_12_48))))
 (let ((?x35777 (+ (+ (+ (+ (+ (+ (+ ?x35765 ?x35617) ?x35620) ?x35623) ?x35770) ?x35626) ?x35774) (* 1.0 (* l_0_12_67 l_0_12_67)))))
 (let ((?x35781 (+ (+ ?x35777 (* 1.0 (* l_0_12_68 l_0_12_68))) (* 1.0 (* l_0_12_69 l_0_12_69)))))
 (= (+ ?x35781 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35773 (* l_0_12_66 l_0_12_66)))
 (let ((?x35774 (* 3.0 ?x35773)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x35892 (* ?x35891 l_0_12_68)))
 (let ((?x35769 (* l_0_12_65 l_0_12_65)))
 (let ((?x35770 (* 3.0 ?x35769)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x35888 (* ?x35887 l_0_12_67)))
 (let ((?x35755 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x35884 (* ?x35883 l_0_12_47)))
 (let ((?x35751 (* (* 3.0 l_0_12_44) l_0_12_44)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x35880 (* ?x35879 l_0_12_46)))
 (let ((?x35876 (* l_0_12_3 l_0_12_3)))
 (let ((?x35877 (* 6.0 ?x35876)))
 (let ((?x35743 (* 12.0 l_0_12_3)))
 (let ((?x35744 (* ?x35743 l_0_12_5)))
 (let ((?x35855 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x35722 (* ?x35721 l_0_12_26)))
 (let ((?x35845 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x35713 (* ?x35712 l_0_12_25)))
 (let ((?x35834 (* l_0_12_2 l_0_12_2)))
 (let ((?x35835 (* 6.0 ?x35834)))
 (let ((?x35703 (* 12.0 l_0_12_2)))
 (let ((?x35704 (* ?x35703 l_0_12_4)))
 (let ((?x25619 (- (+ (* l_0_12_128 l_0_12_128) (* l_0_12_129 l_0_12_129)) (* (* 2.0 l_0_12_191) l_0_12_193))))
 (let ((?x35839 (- (+ (+ (- ?x25619 (* (* 2.0 l_0_12_192) l_0_12_194)) ?x35704) ?x35835) (* (* 2.0 l_0_12_212) l_0_12_214))))
 (let ((?x35849 (- (- (- (- ?x35839 (* (* 2.0 l_0_12_213) l_0_12_215)) ?x35713) ?x35845) (* (* 2.0 l_0_12_233) l_0_12_235))))
 (let ((?x35859 (- (- (- (- ?x35849 (* (* 2.0 l_0_12_234) l_0_12_236)) ?x35722) ?x35855) (* (* 2.0 l_0_12_254) l_0_12_256))))
 (let ((?x35865 (- (- ?x35859 (* (* 2.0 l_0_12_255) l_0_12_257)) (* (* 2.0 l_0_12_275) l_0_12_277))))
 (let ((?x35871 (- (- ?x35865 (* (* 2.0 l_0_12_276) l_0_12_278)) (* (* 2.0 l_0_12_296) l_0_12_298))))
 (let ((?x35881 (- (+ (+ (- ?x35871 (* (* 2.0 l_0_12_297) l_0_12_299)) ?x35744) ?x35877) ?x35880)))
 (let ((?x35894 (+ (+ (+ (+ (- (- (- ?x35881 ?x35751) ?x35884) ?x35755) ?x35888) ?x35770) ?x35892) ?x35774)))
 (= (+ ?x35894 3.0) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35876 (* l_0_12_3 l_0_12_3)))
 (let ((?x35877 (* 6.0 ?x35876)))
 (let ((?x35987 (* l_0_12_297 l_0_12_297)))
 (let ((?x35985 (* l_0_12_296 l_0_12_296)))
 (let ((?x35983 (* l_0_12_276 l_0_12_276)))
 (let ((?x35981 (* l_0_12_275 l_0_12_275)))
 (let ((?x35979 (* l_0_12_255 l_0_12_255)))
 (let ((?x35977 (* l_0_12_254 l_0_12_254)))
 (let ((?x35855 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x35974 (* l_0_12_234 l_0_12_234)))
 (let ((?x35972 (* l_0_12_233 l_0_12_233)))
 (let ((?x35845 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x35969 (* l_0_12_213 l_0_12_213)))
 (let ((?x35967 (* l_0_12_212 l_0_12_212)))
 (let ((?x35834 (* l_0_12_2 l_0_12_2)))
 (let ((?x35835 (* 6.0 ?x35834)))
 (let ((?x35964 (* l_0_12_192 l_0_12_192)))
 (let ((?x35968 (- (+ (- (- (- _a_0_) (* l_0_12_191 l_0_12_191)) ?x35964) ?x35835) ?x35967)))
 (let ((?x35980 (- (- (- (- (- (- (- ?x35968 ?x35969) ?x35845) ?x35972) ?x35974) ?x35855) ?x35977) ?x35979)))
 (let ((?x35992 (- (+ (- (- (- (- ?x35980 ?x35981) ?x35983) ?x35985) ?x35987) ?x35877) (* (* 1.0 l_0_12_44) l_0_12_44))))
 (let ((?x35997 (+ (- ?x35992 (* (* 1.0 l_0_12_45) l_0_12_45)) (* 1.0 (* l_0_12_65 l_0_12_65)))))
 (= (+ (+ ?x35997 (* 1.0 (* l_0_12_66 l_0_12_66))) 1.0) 0.0)))))))))))))))))))))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x36190 (* ?x36189 l_0_12_92)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x36187 (* ?x36186 l_0_12_91)))
 (let ((?x36183 (* 2.0 l_0_12_73)))
 (let ((?x36184 (* ?x36183 l_0_12_82)))
 (let ((?x36180 (* 2.0 l_0_12_72)))
 (let ((?x36181 (* ?x36180 l_0_12_81)))
 (let ((?x36177 (* 2.0 l_0_12_71)))
 (let ((?x36178 (* ?x36177 l_0_12_80)))
 (let ((?x36174 (* 2.0 l_0_12_70)))
 (let ((?x36175 (* ?x36174 l_0_12_79)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x36172 (* ?x35891 l_0_12_80)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x36170 (* ?x35887 l_0_12_79)))
 (let ((?x36167 (* 2.0 l_0_12_52)))
 (let ((?x36168 (* ?x36167 l_0_12_61)))
 (let ((?x36164 (* 2.0 l_0_12_51)))
 (let ((?x36165 (* ?x36164 l_0_12_60)))
 (let ((?x36161 (* 2.0 l_0_12_50)))
 (let ((?x36162 (* ?x36161 l_0_12_59)))
 (let ((?x36158 (* 2.0 l_0_12_49)))
 (let ((?x36159 (* ?x36158 l_0_12_58)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x36156 (* ?x35883 l_0_12_59)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x36154 (* ?x35879 l_0_12_58)))
 (let ((?x36151 (* 12.0 l_0_12_31)))
 (let ((?x36152 (* ?x36151 l_0_12_40)))
 (let ((?x36136 (* 12.0 l_0_12_30)))
 (let ((?x36137 (* ?x36136 l_0_12_39)))
 (let ((?x36133 (* 12.0 l_0_12_29)))
 (let ((?x36134 (* ?x36133 l_0_12_38)))
 (let ((?x36118 (* 12.0 l_0_12_28)))
 (let ((?x36119 (* ?x36118 l_0_12_37)))
 (let ((?x36067 (* 12.0 l_0_12_18)))
 (let ((?x36068 (* ?x36067 l_0_12_9)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x36065 (* ?x36064 l_0_12_176)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x36062 (* ?x36061 l_0_12_175)))
 (let ((?x36058 (* 12.0 l_0_12_17)))
 (let ((?x36059 (* ?x36058 l_0_12_8)))
 (let ((?x36055 (* 12.0 l_0_12_16)))
 (let ((?x36056 (* ?x36055 l_0_12_7)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x36053 (* ?x36052 l_0_12_155)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x36050 (* ?x36049 l_0_12_154)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x36047 (* ?x36046 l_0_12_113)))
 (let ((?x36045 (+ (+ (- _a_1_) (* (* 12.0 l_0_12_10) l_0_12_19)) (* (* 2.0 l_0_12_107) l_0_12_112))))
 (let ((?x36066 (- (- (+ (+ (+ (+ (+ ?x36045 ?x36047) ?x36050) ?x36053) ?x36056) ?x36059) ?x36062) ?x36065)))
 (let ((?x36075 (- (- (+ ?x36066 ?x36068) (* (* 2.0 l_0_12_196) l_0_12_205)) (* (* 2.0 l_0_12_197) l_0_12_206))))
 (let ((?x36081 (- (- ?x36075 (* (* 2.0 l_0_12_198) l_0_12_207)) (* (* 2.0 l_0_12_199) l_0_12_208))))
 (let ((?x36087 (- (- ?x36081 (* (* 2.0 l_0_12_217) l_0_12_226)) (* (* 2.0 l_0_12_218) l_0_12_227))))
 (let ((?x36093 (- (- ?x36087 (* (* 2.0 l_0_12_219) l_0_12_228)) (* (* 2.0 l_0_12_220) l_0_12_229))))
 (let ((?x36099 (- (- ?x36093 (* (* 2.0 l_0_12_238) l_0_12_247)) (* (* 2.0 l_0_12_239) l_0_12_248))))
 (let ((?x36105 (- (- ?x36099 (* (* 2.0 l_0_12_240) l_0_12_249)) (* (* 2.0 l_0_12_241) l_0_12_250))))
 (let ((?x36111 (- (- ?x36105 (* (* 2.0 l_0_12_259) l_0_12_268)) (* (* 2.0 l_0_12_260) l_0_12_269))))
 (let ((?x36117 (- (- ?x36111 (* (* 2.0 l_0_12_261) l_0_12_270)) (* (* 2.0 l_0_12_262) l_0_12_271))))
 (let ((?x36126 (- (- (- ?x36117 ?x36119) (* (* 2.0 l_0_12_280) l_0_12_289)) (* (* 2.0 l_0_12_281) l_0_12_290))))
 (let ((?x36132 (- (- ?x36126 (* (* 2.0 l_0_12_282) l_0_12_291)) (* (* 2.0 l_0_12_283) l_0_12_292))))
 (let ((?x36144 (- (- (- (- ?x36132 ?x36134) ?x36137) (* (* 2.0 l_0_12_301) l_0_12_310)) (* (* 2.0 l_0_12_302) l_0_12_311))))
 (let ((?x36150 (- (- ?x36144 (* (* 2.0 l_0_12_303) l_0_12_312)) (* (* 2.0 l_0_12_304) l_0_12_313))))
 (let ((?x36169 (- (- (- (- (+ (+ (- ?x36150 ?x36152) ?x36154) ?x36156) ?x36159) ?x36162) ?x36165) ?x36168)))
 (let ((?x36188 (- (+ (+ (+ (+ (- (- ?x36169 ?x36170) ?x36172) ?x36175) ?x36178) ?x36181) ?x36184) ?x36187)))
 (= (- ?x36188 ?x36190) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35773 (* l_0_12_66 l_0_12_66)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x36404 (* ?x35891 l_0_12_71)))
 (let ((?x35769 (* l_0_12_65 l_0_12_65)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x36401 (* ?x35887 l_0_12_70)))
 (let ((?x25634 (* l_0_12_45 l_0_12_45)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x36398 (* ?x35883 l_0_12_50)))
 (let ((?x25624 (* l_0_12_44 l_0_12_44)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x36395 (* ?x35879 l_0_12_49)))
 (let ((?x35743 (* 12.0 l_0_12_3)))
 (let ((?x36393 (* ?x35743 l_0_12_8)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x36379 (* ?x35721 l_0_12_29)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x36373 (* ?x35712 l_0_12_28)))
 (let ((?x35703 (* 12.0 l_0_12_2)))
 (let ((?x36367 (* ?x35703 l_0_12_7)))
 (let ((?x36366 (- (- (- _a_2_) (* (* 2.0 l_0_12_191) l_0_12_196)) (* (* 2.0 l_0_12_192) l_0_12_197))))
 (let ((?x36372 (- (- (+ ?x36366 ?x36367) (* (* 2.0 l_0_12_212) l_0_12_217)) (* (* 2.0 l_0_12_213) l_0_12_218))))
 (let ((?x36378 (- (- (- ?x36372 ?x36373) (* (* 2.0 l_0_12_233) l_0_12_238)) (* (* 2.0 l_0_12_234) l_0_12_239))))
 (let ((?x36384 (- (- (- ?x36378 ?x36379) (* (* 2.0 l_0_12_254) l_0_12_259)) (* (* 2.0 l_0_12_255) l_0_12_260))))
 (let ((?x36388 (- (- ?x36384 (* (* 2.0 l_0_12_275) l_0_12_280)) (* (* 2.0 l_0_12_276) l_0_12_281))))
 (let ((?x36392 (- (- ?x36388 (* (* 2.0 l_0_12_296) l_0_12_301)) (* (* 2.0 l_0_12_297) l_0_12_302))))
 (let ((?x36403 (- (+ (+ (- (+ (- (+ ?x36392 ?x36393) ?x36395) ?x25624) ?x36398) ?x25634) ?x36401) ?x35769)))
 (= (- (+ ?x36403 ?x36404) ?x35773) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x35639 (* l_0_12_87 l_0_12_87)))
 (let ((?x35637 (* l_0_12_86 l_0_12_86)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x36172 (* ?x35891 l_0_12_80)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x36170 (* ?x35887 l_0_12_79)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x36156 (* ?x35883 l_0_12_59)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x36154 (* ?x35879 l_0_12_58)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x36506 (* ?x35721 l_0_12_38)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x36500 (* ?x35712 l_0_12_37)))
 (let ((?x35587 (* l_0_12_171 l_0_12_171)))
 (let ((?x35585 (* l_0_12_170 l_0_12_170)))
 (let ((?x36058 (* 12.0 l_0_12_17)))
 (let ((?x36488 (* ?x36058 l_0_12_3)))
 (let ((?x36055 (* 12.0 l_0_12_16)))
 (let ((?x36486 (* ?x36055 l_0_12_2)))
 (let ((?x35583 (* l_0_12_150 l_0_12_150)))
 (let ((?x35581 (* l_0_12_149 l_0_12_149)))
 (let ((?x35573 (* l_0_12_108 l_0_12_108)))
 (let ((?x36485 (+ (+ (+ (+ (- _a_3_) (* l_0_12_107 l_0_12_107)) ?x35573) ?x35581) ?x35583)))
 (let ((?x36493 (- (- (- (+ (+ ?x36485 ?x36486) ?x36488) ?x35585) ?x35587) (* (* 2.0 l_0_12_191) l_0_12_205))))
 (let ((?x36497 (- (- ?x36493 (* (* 2.0 l_0_12_192) l_0_12_206)) (* (* 2.0 l_0_12_212) l_0_12_226))))
 (let ((?x36503 (- (- (- ?x36497 (* (* 2.0 l_0_12_213) l_0_12_227)) ?x36500) (* (* 2.0 l_0_12_233) l_0_12_247))))
 (let ((?x36509 (- (- (- ?x36503 (* (* 2.0 l_0_12_234) l_0_12_248)) ?x36506) (* (* 2.0 l_0_12_254) l_0_12_268))))
 (let ((?x36513 (- (- ?x36509 (* (* 2.0 l_0_12_255) l_0_12_269)) (* (* 2.0 l_0_12_275) l_0_12_289))))
 (let ((?x36517 (- (- ?x36513 (* (* 2.0 l_0_12_276) l_0_12_290)) (* (* 2.0 l_0_12_296) l_0_12_310))))
 (let ((?x36522 (+ (- (- (- ?x36517 (* (* 2.0 l_0_12_297) l_0_12_311)) ?x36154) ?x36156) ?x36170)))
 (= (- (- (+ ?x36522 ?x36172) ?x35637) ?x35639) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x36708 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x36705 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x36702 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x36699 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x36696 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x36693 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x36690 (* l_0_12_315 l_0_12_315)))
 (let ((?x36688 (* l_0_12_314 l_0_12_314)))
 (let ((?x36686 (* l_0_12_313 l_0_12_313)))
 (let ((?x36684 (* l_0_12_312 l_0_12_312)))
 (let ((?x36682 (* l_0_12_311 l_0_12_311)))
 (let ((?x36680 (* l_0_12_310 l_0_12_310)))
 (let ((?x36678 (* l_0_12_294 l_0_12_294)))
 (let ((?x36676 (* l_0_12_293 l_0_12_293)))
 (let ((?x36674 (* l_0_12_292 l_0_12_292)))
 (let ((?x36672 (* l_0_12_291 l_0_12_291)))
 (let ((?x36670 (* l_0_12_290 l_0_12_290)))
 (let ((?x36668 (* l_0_12_289 l_0_12_289)))
 (let ((?x36666 (* l_0_12_273 l_0_12_273)))
 (let ((?x36664 (* l_0_12_272 l_0_12_272)))
 (let ((?x36662 (* l_0_12_271 l_0_12_271)))
 (let ((?x36660 (* l_0_12_270 l_0_12_270)))
 (let ((?x36658 (* l_0_12_269 l_0_12_269)))
 (let ((?x36656 (* l_0_12_268 l_0_12_268)))
 (let ((?x36654 (* l_0_12_252 l_0_12_252)))
 (let ((?x36652 (* l_0_12_251 l_0_12_251)))
 (let ((?x36650 (* l_0_12_250 l_0_12_250)))
 (let ((?x36648 (* l_0_12_249 l_0_12_249)))
 (let ((?x36646 (* l_0_12_248 l_0_12_248)))
 (let ((?x36644 (* l_0_12_247 l_0_12_247)))
 (let ((?x36642 (* l_0_12_231 l_0_12_231)))
 (let ((?x36640 (* l_0_12_230 l_0_12_230)))
 (let ((?x36638 (* l_0_12_229 l_0_12_229)))
 (let ((?x36636 (* l_0_12_228 l_0_12_228)))
 (let ((?x36634 (* l_0_12_227 l_0_12_227)))
 (let ((?x36632 (* l_0_12_226 l_0_12_226)))
 (let ((?x36630 (* l_0_12_210 l_0_12_210)))
 (let ((?x36627 (* l_0_12_21 l_0_12_21)))
 (let ((?x36628 (* 6.0 ?x36627)))
 (let ((?x36625 (* l_0_12_209 l_0_12_209)))
 (let ((?x36623 (* l_0_12_208 l_0_12_208)))
 (let ((?x36621 (* l_0_12_207 l_0_12_207)))
 (let ((?x36619 (* l_0_12_206 l_0_12_206)))
 (let ((?x36617 (* l_0_12_205 l_0_12_205)))
 (let ((?x36614 (* l_0_12_20 l_0_12_20)))
 (let ((?x36615 (* 6.0 ?x36614)))
 (let ((?x36611 (* l_0_12_19 l_0_12_19)))
 (let ((?x36612 (* 6.0 ?x36611)))
 (let ((?x36608 (* l_0_12_18 l_0_12_18)))
 (let ((?x36609 (* 6.0 ?x36608)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x36606 (* ?x36064 l_0_12_185)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x36604 (* ?x36061 l_0_12_184)))
 (let ((?x36601 (* l_0_12_17 l_0_12_17)))
 (let ((?x36602 (* 6.0 ?x36601)))
 (let ((?x36598 (* l_0_12_16 l_0_12_16)))
 (let ((?x36599 (* 6.0 ?x36598)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x36596 (* ?x36052 l_0_12_164)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x36594 (* ?x36049 l_0_12_163)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x36592 (* ?x36046 l_0_12_122)))
 (let ((?x36043 (* 2.0 l_0_12_107)))
 (let ((?x36590 (* ?x36043 l_0_12_121)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x36588 (* ?x36587 l_0_12_87)))
 (let ((?x36591 (+ (- (- (- _a_4_) (* (* 2.0 l_0_12_100) l_0_12_86)) ?x36588) ?x36590)))
 (let ((?x36607 (- (- (+ (+ (+ (+ (+ ?x36591 ?x36592) ?x36594) ?x36596) ?x36599) ?x36602) ?x36604) ?x36606)))
 (let ((?x36624 (- (- (- (- (+ (+ (+ ?x36607 ?x36609) ?x36612) ?x36615) ?x36617) ?x36619) ?x36621) ?x36623)))
 (let ((?x36639 (- (- (- (- (- (+ (- ?x36624 ?x36625) ?x36628) ?x36630) ?x36632) ?x36634) ?x36636) ?x36638)))
 (let ((?x36653 (- (- (- (- (- (- (- ?x36639 ?x36640) ?x36642) ?x36644) ?x36646) ?x36648) ?x36650) ?x36652)))
 (let ((?x36667 (- (- (- (- (- (- (- ?x36653 ?x36654) ?x36656) ?x36658) ?x36660) ?x36662) ?x36664) ?x36666)))
 (let ((?x36681 (- (- (- (- (- (- (- ?x36667 ?x36668) ?x36670) ?x36672) ?x36674) ?x36676) ?x36678) ?x36680)))
 (let ((?x36697 (- (- (- (- (- (- (- ?x36681 ?x36682) ?x36684) ?x36686) ?x36688) ?x36690) ?x36693) ?x36696)))
 (let ((?x36712 (- (- (- (- (- ?x36697 ?x36699) ?x36702) ?x36705) ?x36708) (* (* 1.0 l_0_12_58) l_0_12_58))))
 (let ((?x36718 (- (- ?x36712 (* (* 1.0 l_0_12_59) l_0_12_59)) (* (* 1.0 l_0_12_60) l_0_12_60))))
 (let ((?x36724 (- (- ?x36718 (* (* 1.0 l_0_12_61) l_0_12_61)) (* (* 1.0 l_0_12_62) l_0_12_62))))
 (let ((?x36730 (+ (- ?x36724 (* (* 1.0 l_0_12_63) l_0_12_63)) (* 1.0 (* l_0_12_79 l_0_12_79)))))
 (let ((?x36736 (+ (+ ?x36730 (* 1.0 (* l_0_12_80 l_0_12_80))) (* 1.0 (* l_0_12_81 l_0_12_81)))))
 (let ((?x36742 (+ (+ ?x36736 (* 1.0 (* l_0_12_82 l_0_12_82))) (* 1.0 (* l_0_12_83 l_0_12_83)))))
 (= (+ ?x36742 (* 1.0 (* l_0_12_84 l_0_12_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36922 (* l_0_12_9 l_0_12_9)))
 (let ((?x36923 (* 6.0 ?x36922)))
 (let ((?x36919 (* l_0_12_8 l_0_12_8)))
 (let ((?x36920 (* 6.0 ?x36919)))
 (let ((?x36904 (* l_0_12_7 l_0_12_7)))
 (let ((?x36905 (* 6.0 ?x36904)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x36404 (* ?x35891 l_0_12_71)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x36401 (* ?x35887 l_0_12_70)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x36398 (* ?x35883 l_0_12_50)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x36395 (* ?x35879 l_0_12_49)))
 (let ((?x36886 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x36883 (* l_0_12_304 l_0_12_304)))
 (let ((?x36881 (* l_0_12_303 l_0_12_303)))
 (let ((?x36879 (* l_0_12_302 l_0_12_302)))
 (let ((?x36877 (* l_0_12_301 l_0_12_301)))
 (let ((?x36875 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x36872 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x36869 (* l_0_12_283 l_0_12_283)))
 (let ((?x36867 (* l_0_12_282 l_0_12_282)))
 (let ((?x36865 (* l_0_12_281 l_0_12_281)))
 (let ((?x36863 (* l_0_12_280 l_0_12_280)))
 (let ((?x36861 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x36858 (* l_0_12_262 l_0_12_262)))
 (let ((?x36856 (* l_0_12_261 l_0_12_261)))
 (let ((?x36854 (* l_0_12_260 l_0_12_260)))
 (let ((?x36852 (* l_0_12_259 l_0_12_259)))
 (let ((?x36850 (* l_0_12_241 l_0_12_241)))
 (let ((?x36848 (* l_0_12_240 l_0_12_240)))
 (let ((?x36846 (* l_0_12_239 l_0_12_239)))
 (let ((?x36844 (* l_0_12_238 l_0_12_238)))
 (let ((?x36842 (* l_0_12_220 l_0_12_220)))
 (let ((?x36840 (* l_0_12_219 l_0_12_219)))
 (let ((?x36838 (* l_0_12_218 l_0_12_218)))
 (let ((?x36836 (* l_0_12_217 l_0_12_217)))
 (let ((?x36834 (* l_0_12_199 l_0_12_199)))
 (let ((?x36832 (* l_0_12_198 l_0_12_198)))
 (let ((?x36830 (* l_0_12_197 l_0_12_197)))
 (let ((?x36828 (* l_0_12_196 l_0_12_196)))
 (let ((?x36831 (- (- (+ (- _a_5_) (* 6.0 (* l_0_12_10 l_0_12_10))) ?x36828) ?x36830)))
 (let ((?x36845 (- (- (- (- (- (- (- ?x36831 ?x36832) ?x36834) ?x36836) ?x36838) ?x36840) ?x36842) ?x36844)))
 (let ((?x36859 (- (- (- (- (- (- (- ?x36845 ?x36846) ?x36848) ?x36850) ?x36852) ?x36854) ?x36856) ?x36858)))
 (let ((?x36876 (- (- (- (- (- (- (- ?x36859 ?x36861) ?x36863) ?x36865) ?x36867) ?x36869) ?x36872) ?x36875)))
 (let ((?x36889 (+ (+ (- (- (- (- (- ?x36876 ?x36877) ?x36879) ?x36881) ?x36883) ?x36886) ?x36395) ?x36398)))
 (let ((?x36895 (- (- ?x36889 (* (* 1.0 l_0_12_49) l_0_12_49)) (* (* 1.0 l_0_12_50) l_0_12_50))))
 (let ((?x36901 (- (- ?x36895 (* (* 1.0 l_0_12_51) l_0_12_51)) (* (* 1.0 l_0_12_52) l_0_12_52))))
 (let ((?x36909 (+ (+ (- (- ?x36901 ?x36401) ?x36404) ?x36905) (* 1.0 (* l_0_12_70 l_0_12_70)))))
 (let ((?x36915 (+ (+ ?x36909 (* 1.0 (* l_0_12_71 l_0_12_71))) (* 1.0 (* l_0_12_72 l_0_12_72)))))
 (= (+ (+ (+ ?x36915 (* 1.0 (* l_0_12_73 l_0_12_73))) ?x36920) ?x36923) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_12_1) l_0_12_1) (* l_0_12_22 l_0_12_22)) 0.0))
(assert
 (let ((?x37000 (* l_0_12_295 l_0_12_295)))
 (let ((?x36998 (* l_0_12_274 l_0_12_274)))
 (let ((?x36996 (* l_0_12_253 l_0_12_253)))
 (let ((?x36994 (* l_0_12_232 l_0_12_232)))
 (let ((?x36992 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x36986 (* l_0_12_211 l_0_12_211)))
 (let ((?x36984 (* l_0_12_190 l_0_12_190)))
 (let ((?x36976 (* l_0_12_1 l_0_12_1)))
 (let ((?x36982 (* 6.0 ?x36976)))
 (let ((?x36990 (+ (- (- (+ (* (* (- 2.0) l_0_12_1) l_0_12_2) ?x36982) ?x36984) ?x36986) (* (* 2.0 l_0_12_22) l_0_12_23))))
 (let ((?x37004 (- (- (- (- (- (- ?x36990 ?x36992) ?x36994) ?x36996) ?x36998) ?x37000) (* (* 1.0 l_0_12_43) l_0_12_43))))
 (= (+ ?x37004 (* 1.0 (* l_0_12_64 l_0_12_64))) 0.0)))))))))))))
(assert
 (let ((?x37005 (* l_0_12_64 l_0_12_64)))
 (let ((?x37038 (* 3.0 ?x37005)))
 (let ((?x36992 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x37030 (* l_0_12_127 l_0_12_127)))
 (let ((?x36976 (* l_0_12_1 l_0_12_1)))
 (let ((?x36982 (* 6.0 ?x36976)))
 (let ((?x37033 (+ (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_4) ?x36982) ?x37030) (* (* 2.0 l_0_12_22) l_0_12_25))))
 (= (+ (- (- ?x37033 ?x36992) (* (* 3.0 l_0_12_43) l_0_12_43)) ?x37038) 0.0)))))))))
(assert
 (let ((?x37005 (* l_0_12_64 l_0_12_64)))
 (let ((?x13314 (* l_0_12_43 l_0_12_43)))
 (let ((?x37051 (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) (* (* 2.0 l_0_12_22) l_0_12_28))))
 (= (- (+ ?x37051 ?x13314) ?x37005) 0.0)))))
(assert
 (let ((?x37067 (+ (- (* (* (- 2.0) l_0_12_1) l_0_12_11) (* l_0_12_127 l_0_12_127)) (* (* 2.0 l_0_12_22) l_0_12_32))))
 (= ?x37067 0.0)))
(assert
 (let ((?x37087 (* l_0_12_85 l_0_12_85)))
 (let ((?x37083 (* l_0_12_169 l_0_12_169)))
 (let ((?x37081 (* l_0_12_148 l_0_12_148)))
 (let ((?x37082 (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) (* l_0_12_106 l_0_12_106)) ?x37081)))
 (= (- (+ (- ?x37082 ?x37083) (* (* 2.0 l_0_12_22) l_0_12_37)) ?x37087) 0.0))))))
(assert
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37132 (* ?x37131 l_0_12_65)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37129 (* ?x37128 l_0_12_44)))
 (let ((?x35876 (* l_0_12_3 l_0_12_3)))
 (let ((?x25700 (* l_0_12_24 l_0_12_24)))
 (let ((?x11704 (* l_0_12_23 l_0_12_23)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37111 (* ?x37110 l_0_12_23)))
 (let ((?x35834 (* l_0_12_2 l_0_12_2)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x37102 (* ?x26464 l_0_12_2)))
 (let ((?x37109 (- (- (- ?x37102 (* (* 2.0 l_0_12_190) l_0_12_191)) ?x35834) (* (* 2.0 l_0_12_211) l_0_12_212))))
 (let ((?x37117 (+ (- (+ (- ?x37109 ?x37111) ?x11704) (* (* 2.0 l_0_12_232) l_0_12_233)) ?x25700)))
 (let ((?x37123 (- (- ?x37117 (* (* 2.0 l_0_12_253) l_0_12_254)) (* (* 2.0 l_0_12_274) l_0_12_275))))
 (let ((?x37133 (+ (- (- (- ?x37123 (* (* 2.0 l_0_12_295) l_0_12_296)) ?x35876) ?x37129) ?x37132)))
 (= ?x37133 0.0))))))))))))))))))
(assert
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37197 (* ?x37131 l_0_12_67)))
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37195 (* ?x37194 l_0_12_65)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37192 (* ?x37128 l_0_12_46)))
 (let ((?x37189 (* 6.0 l_0_12_43)))
 (let ((?x37190 (* ?x37189 l_0_12_44)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37170 (* ?x37110 l_0_12_25)))
 (let ((?x37111 (* ?x37110 l_0_12_23)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37160 (* ?x37159 l_0_12_128)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x37157 (* ?x26464 l_0_12_4)))
 (let ((?x37102 (* ?x26464 l_0_12_2)))
 (let ((?x37166 (- (- (+ (+ ?x37102 ?x37157) ?x37160) (* (* 2.0 l_0_12_190) l_0_12_193)) (* (* 2.0 l_0_12_2) l_0_12_4))))
 (let ((?x37174 (+ (- (- (- ?x37166 (* (* 2.0 l_0_12_211) l_0_12_214)) ?x37111) ?x37170) (* (* 2.0 l_0_12_23) l_0_12_25))))
 (let ((?x37179 (+ (- ?x37174 (* (* 2.0 l_0_12_232) l_0_12_235)) (* (* 2.0 l_0_12_24) l_0_12_26))))
 (let ((?x37183 (- (- ?x37179 (* (* 2.0 l_0_12_253) l_0_12_256)) (* (* 2.0 l_0_12_274) l_0_12_277))))
 (let ((?x37188 (- (- ?x37183 (* (* 2.0 l_0_12_295) l_0_12_298)) (* (* 2.0 l_0_12_3) l_0_12_5))))
 (= (+ (+ (- (- ?x37188 ?x37190) ?x37192) ?x37195) ?x37197) 0.0)))))))))))))))))))))))
(assert
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37249 (* ?x37131 l_0_12_70)))
 (let ((?x37132 (* ?x37131 l_0_12_65)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37246 (* ?x37128 l_0_12_49)))
 (let ((?x37129 (* ?x37128 l_0_12_44)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x13476 (* ?x37110 l_0_12_28)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x26559 (* ?x26464 l_0_12_7)))
 (let ((?x13445 (- (- ?x26559 (* (* 2.0 l_0_12_190) l_0_12_196)) (* (* 2.0 l_0_12_2) l_0_12_7))))
 (let ((?x13475 (+ (- (- ?x13445 (* (* 2.0 l_0_12_211) l_0_12_217)) ?x13476) (* (* 2.0 l_0_12_23) l_0_12_28))))
 (let ((?x37236 (+ (- ?x13475 (* (* 2.0 l_0_12_232) l_0_12_238)) (* (* 2.0 l_0_12_24) l_0_12_29))))
 (let ((?x37240 (- (- ?x37236 (* (* 2.0 l_0_12_253) l_0_12_259)) (* (* 2.0 l_0_12_274) l_0_12_280))))
 (let ((?x37244 (- (- ?x37240 (* (* 2.0 l_0_12_295) l_0_12_301)) (* (* 2.0 l_0_12_3) l_0_12_8))))
 (= (+ (- (- (+ ?x37244 ?x37129) ?x37246) ?x37132) ?x37249) 0.0)))))))))))))))))
(assert
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37309 (* ?x37131 l_0_12_74)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37307 (* ?x37128 l_0_12_53)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37293 (* ?x37110 l_0_12_32)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37160 (* ?x37159 l_0_12_128)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x26716 (* ?x26464 l_0_12_11)))
 (let ((?x37287 (- (- ?x26716 (* (* 2.0 l_0_12_11) l_0_12_2)) (* (* 2.0 l_0_12_12) l_0_12_3))))
 (let ((?x37292 (- (- (- ?x37287 ?x37160) (* (* 2.0 l_0_12_190) l_0_12_200)) (* (* 2.0 l_0_12_211) l_0_12_221))))
 (let ((?x37298 (- (+ (- ?x37292 ?x37293) (* (* 2.0 l_0_12_23) l_0_12_32)) (* (* 2.0 l_0_12_232) l_0_12_242))))
 (let ((?x37302 (- (+ ?x37298 (* (* 2.0 l_0_12_24) l_0_12_33)) (* (* 2.0 l_0_12_253) l_0_12_263))))
 (let ((?x37306 (- (- ?x37302 (* (* 2.0 l_0_12_274) l_0_12_284)) (* (* 2.0 l_0_12_295) l_0_12_305))))
 (= (+ (- ?x37306 ?x37307) ?x37309) 0.0)))))))))))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37384 (* ?x37383 l_0_12_86)))
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37381 (* ?x37131 l_0_12_79)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37379 (* ?x37128 l_0_12_58)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37365 (* ?x37110 l_0_12_37)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37356 (* ?x37355 l_0_12_170)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37350 (* ?x37349 l_0_12_149)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x37345 (* ?x26464 l_0_12_16)))
 (let ((?x37354 (- (+ (+ ?x37345 (* (* 2.0 l_0_12_106) l_0_12_107)) ?x37350) (* (* 2.0 l_0_12_16) l_0_12_2))))
 (let ((?x37362 (- (- (- ?x37354 ?x37356) (* (* 2.0 l_0_12_17) l_0_12_3)) (* (* 2.0 l_0_12_190) l_0_12_205))))
 (let ((?x37368 (+ (- (- ?x37362 (* (* 2.0 l_0_12_211) l_0_12_226)) ?x37365) (* (* 2.0 l_0_12_23) l_0_12_37))))
 (let ((?x37372 (+ (- ?x37368 (* (* 2.0 l_0_12_232) l_0_12_247)) (* (* 2.0 l_0_12_24) l_0_12_38))))
 (let ((?x37376 (- (- ?x37372 (* (* 2.0 l_0_12_253) l_0_12_268)) (* (* 2.0 l_0_12_274) l_0_12_289))))
 (let ((?x37385 (- (+ (- (- ?x37376 (* (* 2.0 l_0_12_295) l_0_12_310)) ?x37379) ?x37381) ?x37384)))
 (= ?x37385 0.0))))))))))))))))))))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37427 (* ?x37194 l_0_12_67)))
 (let ((?x37195 (* ?x37194 l_0_12_65)))
 (let ((?x35619 (* l_0_12_6 l_0_12_6)))
 (let ((?x35616 (* l_0_12_5 l_0_12_5)))
 (let ((?x37189 (* 6.0 l_0_12_43)))
 (let ((?x37422 (* ?x37189 l_0_12_46)))
 (let ((?x37190 (* ?x37189 l_0_12_44)))
 (let ((?x35598 (* l_0_12_4 l_0_12_4)))
 (let ((?x11221 (* l_0_12_27 l_0_12_27)))
 (let ((?x11237 (* l_0_12_26 l_0_12_26)))
 (let ((?x35653 (* l_0_12_25 l_0_12_25)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37170 (* ?x37110 l_0_12_25)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37414 (* ?x37159 l_0_12_130)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x37157 (* ?x26464 l_0_12_4)))
 (let ((?x37421 (- (- (+ (+ (+ (- (+ ?x37157 ?x37414) ?x37170) ?x35653) ?x11237) ?x11221) ?x35598) ?x37190)))
 (= (+ (+ (- (- (- ?x37421 ?x37422) ?x35616) ?x35619) ?x37195) ?x37427) 0.0)))))))))))))))))))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37470 (* ?x37194 l_0_12_70)))
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37197 (* ?x37131 l_0_12_67)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37192 (* ?x37128 l_0_12_46)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x13476 (* ?x37110 l_0_12_28)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37445 (* ?x37159 l_0_12_133)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x26559 (* ?x26464 l_0_12_7)))
 (let ((?x37453 (+ (+ (- (+ ?x26559 ?x37445) ?x13476) (* (* 2.0 l_0_12_25) l_0_12_28)) (* (* 2.0 l_0_12_26) l_0_12_29))))
 (let ((?x37459 (- (+ ?x37453 (* (* 2.0 l_0_12_27) l_0_12_30)) (* (* 2.0 l_0_12_4) l_0_12_7))))
 (let ((?x37465 (- (- (+ ?x37459 ?x37192) (* (* 6.0 l_0_12_43) l_0_12_49)) (* (* 2.0 l_0_12_5) l_0_12_8))))
 (= (+ (- (- ?x37465 (* (* 2.0 l_0_12_6) l_0_12_9)) ?x37197) ?x37470) 0.0)))))))))))))))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37523 (* ?x37194 l_0_12_74)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37293 (* ?x37110 l_0_12_32)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37509 (* ?x37159 l_0_12_137)))
 (let ((?x37414 (* ?x37159 l_0_12_130)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x26716 (* ?x26464 l_0_12_11)))
 (let ((?x37507 (- (- ?x26716 (* (* 2.0 l_0_12_11) l_0_12_4)) (* (* 2.0 l_0_12_12) l_0_12_5))))
 (let ((?x37514 (- (- (+ (- ?x37507 ?x37414) ?x37509) (* (* 2.0 l_0_12_13) l_0_12_6)) ?x37293)))
 (let ((?x37518 (+ (+ ?x37514 (* (* 2.0 l_0_12_25) l_0_12_32)) (* (* 2.0 l_0_12_26) l_0_12_33))))
 (let ((?x37522 (- (+ ?x37518 (* (* 2.0 l_0_12_27) l_0_12_34)) (* (* 6.0 l_0_12_43) l_0_12_53))))
 (= (+ ?x37522 ?x37523) 0.0)))))))))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37559 (* ?x37383 l_0_12_88)))
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37557 (* ?x37194 l_0_12_79)))
 (let ((?x37110 (* 12.0 l_0_12_22)))
 (let ((?x37365 (* ?x37110 l_0_12_37)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37541 (* ?x37355 l_0_12_172)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37537 (* ?x37349 l_0_12_151)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37535 (* ?x37159 l_0_12_142)))
 (let ((?x26464 (* 12.0 l_0_12_1)))
 (let ((?x37345 (* ?x26464 l_0_12_16)))
 (let ((?x37540 (- (+ (+ (+ ?x37345 (* (* 2.0 l_0_12_106) l_0_12_109)) ?x37535) ?x37537) (* (* 2.0 l_0_12_16) l_0_12_4))))
 (let ((?x37547 (- (- (- ?x37540 ?x37541) (* (* 2.0 l_0_12_17) l_0_12_5)) (* (* 2.0 l_0_12_18) l_0_12_6))))
 (let ((?x37552 (+ (+ (- ?x37547 ?x37365) (* (* 2.0 l_0_12_25) l_0_12_37)) (* (* 2.0 l_0_12_26) l_0_12_38))))
 (let ((?x37556 (- (+ ?x37552 (* (* 2.0 l_0_12_27) l_0_12_39)) (* (* 6.0 l_0_12_43) l_0_12_58))))
 (= (- (+ ?x37556 ?x37557) ?x37559) 0.0))))))))))))))))))))
(assert
 (let ((?x36922 (* l_0_12_9 l_0_12_9)))
 (let ((?x36919 (* l_0_12_8 l_0_12_8)))
 (let ((?x36904 (* l_0_12_7 l_0_12_7)))
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37249 (* ?x37131 l_0_12_70)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37246 (* ?x37128 l_0_12_49)))
 (let ((?x26324 (* l_0_12_31 l_0_12_31)))
 (let ((?x13151 (* l_0_12_30 l_0_12_30)))
 (let ((?x26309 (* l_0_12_29 l_0_12_29)))
 (let ((?x37594 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_28 l_0_12_28)) ?x26309)))
 (let ((?x37601 (- (- (- (- (+ (+ (+ ?x37594 ?x13151) ?x26324) ?x37246) ?x37249) ?x36904) ?x36919) ?x36922)))
 (= ?x37601 0.0))))))))))))))
(assert
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37309 (* ?x37131 l_0_12_74)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37307 (* ?x37128 l_0_12_53)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37445 (* ?x37159 l_0_12_133)))
 (let ((?x37614 (- (* (* (- 2.0) l_0_12_10) l_0_12_14) (* (* 2.0 l_0_12_11) l_0_12_7))))
 (let ((?x37619 (- (- (- ?x37614 (* (* 2.0 l_0_12_12) l_0_12_8)) ?x37445) (* (* 2.0 l_0_12_13) l_0_12_9))))
 (let ((?x37625 (+ (+ ?x37619 (* (* 2.0 l_0_12_28) l_0_12_32)) (* (* 2.0 l_0_12_29) l_0_12_33))))
 (let ((?x37631 (+ (+ ?x37625 (* (* 2.0 l_0_12_30) l_0_12_34)) (* (* 2.0 l_0_12_31) l_0_12_35))))
 (= (- (+ ?x37631 ?x37307) ?x37309) 0.0))))))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37677 (* ?x37383 l_0_12_91)))
 (let ((?x37131 (* 2.0 l_0_12_64)))
 (let ((?x37381 (* ?x37131 l_0_12_79)))
 (let ((?x37128 (* 2.0 l_0_12_43)))
 (let ((?x37379 (* ?x37128 l_0_12_58)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37661 (* ?x37355 l_0_12_175)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x27176 (* ?x37349 l_0_12_154)))
 (let ((?x27174 (+ (* (* (- 2.0) l_0_12_10) l_0_12_19) (* (* 2.0 l_0_12_106) l_0_12_112))))
 (let ((?x37664 (- (- (- (+ ?x27174 ?x27176) (* (* 2.0 l_0_12_16) l_0_12_7)) ?x37661) (* (* 2.0 l_0_12_17) l_0_12_8))))
 (let ((?x37668 (+ (- ?x37664 (* (* 2.0 l_0_12_18) l_0_12_9)) (* (* 2.0 l_0_12_28) l_0_12_37))))
 (let ((?x37672 (+ (+ ?x37668 (* (* 2.0 l_0_12_29) l_0_12_38)) (* (* 2.0 l_0_12_30) l_0_12_39))))
 (let ((?x37678 (- (- (+ (+ ?x37672 (* (* 2.0 l_0_12_31) l_0_12_40)) ?x37379) ?x37381) ?x37677)))
 (= ?x37678 0.0)))))))))))))))))
(assert
 (let ((?x37725 (* l_0_12_36 l_0_12_36)))
 (let ((?x37723 (* l_0_12_35 l_0_12_35)))
 (let ((?x37721 (* l_0_12_34 l_0_12_34)))
 (let ((?x37719 (* l_0_12_33 l_0_12_33)))
 (let ((?x37717 (* l_0_12_32 l_0_12_32)))
 (let ((?x37715 (* l_0_12_15 l_0_12_15)))
 (let ((?x37713 (* l_0_12_14 l_0_12_14)))
 (let ((?x37711 (* l_0_12_13 l_0_12_13)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37509 (* ?x37159 l_0_12_137)))
 (let ((?x37710 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x37509)))
 (let ((?x37724 (+ (+ (+ (+ (- (- (- ?x37710 ?x37711) ?x37713) ?x37715) ?x37717) ?x37719) ?x37721) ?x37723)))
 (= (+ ?x37724 ?x37725) 0.0))))))))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37775 (* ?x37383 l_0_12_95)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37758 (* ?x37355 l_0_12_179)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37753 (* ?x37349 l_0_12_158)))
 (let ((?x37159 (* 2.0 l_0_12_127)))
 (let ((?x37535 (* ?x37159 l_0_12_142)))
 (let ((?x37744 (- (* (* 2.0 l_0_12_106) l_0_12_116) (* (* 2.0 l_0_12_11) l_0_12_16))))
 (let ((?x37749 (- (- (- ?x37744 (* (* 2.0 l_0_12_12) l_0_12_17)) ?x37535) (* (* 2.0 l_0_12_13) l_0_12_18))))
 (let ((?x37757 (- (+ (- ?x37749 (* (* 2.0 l_0_12_14) l_0_12_19)) ?x37753) (* (* 2.0 l_0_12_15) l_0_12_20))))
 (let ((?x37765 (+ (+ (- ?x37757 ?x37758) (* (* 2.0 l_0_12_32) l_0_12_37)) (* (* 2.0 l_0_12_33) l_0_12_38))))
 (let ((?x37771 (+ (+ ?x37765 (* (* 2.0 l_0_12_34) l_0_12_39)) (* (* 2.0 l_0_12_35) l_0_12_40))))
 (= (- (+ ?x37771 (* (* 2.0 l_0_12_36) l_0_12_41)) ?x37775) 0.0)))))))))))))))
(assert
 (let ((?x26149 (* l_0_12_42 l_0_12_42)))
 (let ((?x12982 (* l_0_12_41 l_0_12_41)))
 (let ((?x11853 (* l_0_12_40 l_0_12_40)))
 (let ((?x26105 (* l_0_12_39 l_0_12_39)))
 (let ((?x26093 (* l_0_12_38 l_0_12_38)))
 (let ((?x36797 (* l_0_12_37 l_0_12_37)))
 (let ((?x36627 (* l_0_12_21 l_0_12_21)))
 (let ((?x36614 (* l_0_12_20 l_0_12_20)))
 (let ((?x36611 (* l_0_12_19 l_0_12_19)))
 (let ((?x36608 (* l_0_12_18 l_0_12_18)))
 (let ((?x36601 (* l_0_12_17 l_0_12_17)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37828 (* ?x37355 l_0_12_184)))
 (let ((?x36598 (* l_0_12_16 l_0_12_16)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37825 (* ?x37349 l_0_12_163)))
 (let ((?x37346 (* 2.0 l_0_12_106)))
 (let ((?x37823 (* ?x37346 l_0_12_121)))
 (let ((?x37829 (- (- (+ (+ (* (* (- 2.0) l_0_12_100) l_0_12_85) ?x37823) ?x37825) ?x36598) ?x37828)))
 (let ((?x37836 (+ (+ (- (- (- (- (- ?x37829 ?x36601) ?x36608) ?x36611) ?x36614) ?x36627) ?x36797) ?x26093)))
 (= (+ (+ (+ (+ ?x37836 ?x26105) ?x11853) ?x12982) ?x26149) 0.0))))))))))))))))))))))
(assert
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x37940 (* ?x37939 l_0_12_72)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x37937 (* ?x37936 l_0_12_71)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x37934 (* ?x37933 l_0_12_70)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x37931 (* ?x35625 l_0_12_71)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x35892 (* ?x35891 l_0_12_68)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x37928 (* ?x35622 l_0_12_70)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x35888 (* ?x35887 l_0_12_67)))
 (let ((?x37925 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x37922 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x37919 (* ?x37918 l_0_12_51)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x37916 (* ?x37915 l_0_12_50)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x37913 (* ?x37912 l_0_12_49)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x37910 (* ?x35604 l_0_12_50)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x35884 (* ?x35883 l_0_12_47)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x37907 (* ?x35601 l_0_12_49)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x35880 (* ?x35879 l_0_12_46)))
 (let ((?x37904 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x35743 (* 12.0 l_0_12_3)))
 (let ((?x36393 (* ?x35743 l_0_12_8)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x37882 (* ?x37881 l_0_12_30)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x37879 (* ?x37878 l_0_12_29)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x37867 (* ?x37866 l_0_12_28)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x36379 (* ?x35721 l_0_12_29)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x36373 (* ?x35712 l_0_12_28)))
 (let ((?x35703 (* 12.0 l_0_12_2)))
 (let ((?x36367 (* ?x35703 l_0_12_7)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x13980 (* ?x35677 l_0_12_134)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x27399 (* ?x35674 l_0_12_133)))
 (let ((?x27326 (- (- (+ ?x27399 ?x13980) (* (* 2.0 l_0_12_193) l_0_12_196)) (* (* 2.0 l_0_12_194) l_0_12_197))))
 (let ((?x27336 (- (+ (- ?x27326 (* (* 2.0 l_0_12_195) l_0_12_198)) ?x36367) (* (* 2.0 l_0_12_214) l_0_12_217))))
 (let ((?x37854 (- (- ?x27336 (* (* 2.0 l_0_12_215) l_0_12_218)) (* (* 2.0 l_0_12_216) l_0_12_219))))
 (let ((?x37861 (- (- (- ?x37854 ?x36373) (* (* 2.0 l_0_12_235) l_0_12_238)) (* (* 2.0 l_0_12_236) l_0_12_239))))
 (let ((?x37871 (- (- (- (- ?x37861 (* (* 2.0 l_0_12_237) l_0_12_240)) ?x36379) ?x37867) (* (* 2.0 l_0_12_256) l_0_12_259))))
 (let ((?x37877 (- (- ?x37871 (* (* 2.0 l_0_12_257) l_0_12_260)) (* (* 2.0 l_0_12_258) l_0_12_261))))
 (let ((?x37889 (- (- (- (- ?x37877 ?x37879) ?x37882) (* (* 2.0 l_0_12_277) l_0_12_280)) (* (* 2.0 l_0_12_278) l_0_12_281))))
 (let ((?x37895 (- (- ?x37889 (* (* 2.0 l_0_12_279) l_0_12_282)) (* (* 2.0 l_0_12_298) l_0_12_301))))
 (let ((?x37902 (- (+ (- ?x37895 (* (* 2.0 l_0_12_299) l_0_12_302)) ?x36393) (* (* 2.0 l_0_12_300) l_0_12_303))))
 (let ((?x37917 (- (- (- (+ (- (+ (+ ?x37902 ?x37904) ?x35880) ?x37907) ?x35884) ?x37910) ?x37913) ?x37916)))
 (let ((?x37932 (+ (- (+ (- (+ (+ (- ?x37917 ?x37919) ?x37922) ?x37925) ?x35888) ?x37928) ?x35892) ?x37931)))
 (= (+ (+ (+ ?x37932 ?x37934) ?x37937) ?x37940) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x38097 (* ?x37939 l_0_12_76)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x38095 (* ?x37936 l_0_12_75)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x38093 (* ?x37933 l_0_12_74)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x38091 (* ?x35625 l_0_12_75)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x38089 (* ?x35622 l_0_12_74)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x38087 (* ?x37918 l_0_12_55)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x38085 (* ?x37915 l_0_12_54)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x38083 (* ?x37912 l_0_12_53)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x38081 (* ?x35604 l_0_12_54)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x38079 (* ?x35601 l_0_12_53)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x38065 (* ?x37881 l_0_12_34)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x38063 (* ?x37878 l_0_12_33)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x38055 (* ?x37866 l_0_12_32)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x38053 (* ?x35721 l_0_12_33)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x38045 (* ?x35712 l_0_12_32)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38031 (* ?x38030 l_0_12_6)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x38028 (* ?x35677 l_0_12_138)))
 (let ((?x35695 (* ?x35677 l_0_12_131)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x38025 (* ?x35674 l_0_12_137)))
 (let ((?x35676 (* ?x35674 l_0_12_130)))
 (let ((?x38019 (* 12.0 l_0_12_12)))
 (let ((?x38022 (* ?x38019 l_0_12_5)))
 (let ((?x38020 (* ?x38019 l_0_12_3)))
 (let ((?x38015 (* 12.0 l_0_12_11)))
 (let ((?x38017 (* ?x38015 l_0_12_4)))
 (let ((?x38016 (* ?x38015 l_0_12_2)))
 (let ((?x38029 (+ (- (+ (- (+ (+ (+ ?x38016 ?x38017) ?x38020) ?x38022) ?x35676) ?x38025) ?x35695) ?x38028)))
 (let ((?x38036 (- (- (+ ?x38029 ?x38031) (* (* 2.0 l_0_12_193) l_0_12_200)) (* (* 2.0 l_0_12_194) l_0_12_201))))
 (let ((?x38040 (- (- ?x38036 (* (* 2.0 l_0_12_195) l_0_12_202)) (* (* 2.0 l_0_12_214) l_0_12_221))))
 (let ((?x38044 (- (- ?x38040 (* (* 2.0 l_0_12_215) l_0_12_222)) (* (* 2.0 l_0_12_216) l_0_12_223))))
 (let ((?x38050 (- (- (- ?x38044 ?x38045) (* (* 2.0 l_0_12_235) l_0_12_242)) (* (* 2.0 l_0_12_236) l_0_12_243))))
 (let ((?x38058 (- (- (- (- ?x38050 (* (* 2.0 l_0_12_237) l_0_12_244)) ?x38053) ?x38055) (* (* 2.0 l_0_12_256) l_0_12_263))))
 (let ((?x38062 (- (- ?x38058 (* (* 2.0 l_0_12_257) l_0_12_264)) (* (* 2.0 l_0_12_258) l_0_12_265))))
 (let ((?x38070 (- (- (- (- ?x38062 ?x38063) ?x38065) (* (* 2.0 l_0_12_277) l_0_12_284)) (* (* 2.0 l_0_12_278) l_0_12_285))))
 (let ((?x38074 (- (- ?x38070 (* (* 2.0 l_0_12_279) l_0_12_286)) (* (* 2.0 l_0_12_298) l_0_12_305))))
 (let ((?x38078 (- (- ?x38074 (* (* 2.0 l_0_12_299) l_0_12_306)) (* (* 2.0 l_0_12_300) l_0_12_307))))
 (let ((?x38092 (+ (+ (- (- (- (- (- ?x38078 ?x38079) ?x38081) ?x38083) ?x38085) ?x38087) ?x38089) ?x38091)))
 (= (+ (+ (+ ?x38092 ?x38093) ?x38095) ?x38097) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x38266 (* ?x36189 l_0_12_89)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x38264 (* ?x36186 l_0_12_88)))
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x38262 (* ?x37939 l_0_12_81)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x38260 (* ?x37936 l_0_12_80)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x38258 (* ?x37933 l_0_12_79)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x38256 (* ?x35625 l_0_12_80)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x38254 (* ?x35622 l_0_12_79)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x38252 (* ?x37918 l_0_12_60)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x38250 (* ?x37915 l_0_12_59)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x38248 (* ?x37912 l_0_12_58)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x38246 (* ?x35604 l_0_12_59)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x38244 (* ?x35601 l_0_12_58)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x38230 (* ?x37881 l_0_12_39)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x38228 (* ?x37878 l_0_12_38)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x38220 (* ?x37866 l_0_12_37)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x36506 (* ?x35721 l_0_12_38)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x36500 (* ?x35712 l_0_12_37)))
 (let ((?x36067 (* 12.0 l_0_12_18)))
 (let ((?x38198 (* ?x36067 l_0_12_6)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x38196 (* ?x36064 l_0_12_173)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x38194 (* ?x36061 l_0_12_172)))
 (let ((?x36058 (* 12.0 l_0_12_17)))
 (let ((?x38192 (* ?x36058 l_0_12_5)))
 (let ((?x36488 (* ?x36058 l_0_12_3)))
 (let ((?x36055 (* 12.0 l_0_12_16)))
 (let ((?x38189 (* ?x36055 l_0_12_4)))
 (let ((?x36486 (* ?x36055 l_0_12_2)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x38186 (* ?x36052 l_0_12_152)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x38184 (* ?x36049 l_0_12_151)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x38168 (* ?x35677 l_0_12_143)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x38165 (* ?x35674 l_0_12_142)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x38163 (* ?x36046 l_0_12_110)))
 (let ((?x38185 (+ (+ (+ (+ (* (* 2.0 l_0_12_107) l_0_12_109) ?x38163) ?x38165) ?x38168) ?x38184)))
 (let ((?x38197 (- (- (+ (+ (+ (+ (+ ?x38185 ?x38186) ?x36486) ?x38189) ?x36488) ?x38192) ?x38194) ?x38196)))
 (let ((?x38203 (- (- (+ ?x38197 ?x38198) (* (* 2.0 l_0_12_193) l_0_12_205)) (* (* 2.0 l_0_12_194) l_0_12_206))))
 (let ((?x38207 (- (- ?x38203 (* (* 2.0 l_0_12_195) l_0_12_207)) (* (* 2.0 l_0_12_214) l_0_12_226))))
 (let ((?x38211 (- (- ?x38207 (* (* 2.0 l_0_12_215) l_0_12_227)) (* (* 2.0 l_0_12_216) l_0_12_228))))
 (let ((?x38216 (- (- (- ?x38211 ?x36500) (* (* 2.0 l_0_12_235) l_0_12_247)) (* (* 2.0 l_0_12_236) l_0_12_248))))
 (let ((?x38223 (- (- (- (- ?x38216 (* (* 2.0 l_0_12_237) l_0_12_249)) ?x36506) ?x38220) (* (* 2.0 l_0_12_256) l_0_12_268))))
 (let ((?x38227 (- (- ?x38223 (* (* 2.0 l_0_12_257) l_0_12_269)) (* (* 2.0 l_0_12_258) l_0_12_270))))
 (let ((?x38235 (- (- (- (- ?x38227 ?x38228) ?x38230) (* (* 2.0 l_0_12_277) l_0_12_289)) (* (* 2.0 l_0_12_278) l_0_12_290))))
 (let ((?x38239 (- (- ?x38235 (* (* 2.0 l_0_12_279) l_0_12_291)) (* (* 2.0 l_0_12_298) l_0_12_310))))
 (let ((?x38243 (- (- ?x38239 (* (* 2.0 l_0_12_299) l_0_12_311)) (* (* 2.0 l_0_12_300) l_0_12_312))))
 (let ((?x38257 (+ (+ (- (- (- (- (- ?x38243 ?x38244) ?x38246) ?x38248) ?x38250) ?x38252) ?x38254) ?x38256)))
 (= (- (- (+ (+ (+ ?x38257 ?x38258) ?x38260) ?x38262) ?x38264) ?x38266) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35634 (* l_0_12_69 l_0_12_69)))
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38428 (* ?x38427 l_0_12_72)))
 (let ((?x35631 (* l_0_12_68 l_0_12_68)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38424 (* ?x38423 l_0_12_71)))
 (let ((?x35628 (* l_0_12_67 l_0_12_67)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38420 (* ?x38419 l_0_12_70)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x37931 (* ?x35625 l_0_12_71)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x37928 (* ?x35622 l_0_12_70)))
 (let ((?x37925 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x37922 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x35670 (* l_0_12_48 l_0_12_48)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38412 (* ?x38411 l_0_12_51)))
 (let ((?x25468 (* l_0_12_47 l_0_12_47)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38408 (* ?x38407 l_0_12_50)))
 (let ((?x25466 (* l_0_12_46 l_0_12_46)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38404 (* ?x38403 l_0_12_49)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x37910 (* ?x35604 l_0_12_50)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x37907 (* ?x35601 l_0_12_49)))
 (let ((?x37904 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x37882 (* ?x37881 l_0_12_30)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x37879 (* ?x37878 l_0_12_29)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x37867 (* ?x37866 l_0_12_28)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38395 (* ?x38394 l_0_12_135)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38392 (* ?x38391 l_0_12_134)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38390 (* ?x38389 l_0_12_133)))
 (let ((?x38401 (- (+ (- (- (- (+ (+ ?x38390 ?x38392) ?x38395) ?x37867) ?x37879) ?x37882) ?x37904) ?x37907)))
 (let ((?x38414 (+ (- (+ (- (+ (- (- ?x38401 ?x37910) ?x38404) ?x25466) ?x38408) ?x25468) ?x38412) ?x35670)))
 (let ((?x38425 (+ (- (+ (+ (+ (+ (+ ?x38414 ?x37922) ?x37925) ?x37928) ?x37931) ?x38420) ?x35628) ?x38424)))
 (= (- (+ (- ?x38425 ?x35631) ?x38428) ?x35634) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38485 (* ?x38427 l_0_12_76)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38483 (* ?x38423 l_0_12_75)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38481 (* ?x38419 l_0_12_74)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x38091 (* ?x35625 l_0_12_75)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x38089 (* ?x35622 l_0_12_74)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38477 (* ?x38411 l_0_12_55)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38475 (* ?x38407 l_0_12_54)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38473 (* ?x38403 l_0_12_53)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x38081 (* ?x35604 l_0_12_54)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x38079 (* ?x35601 l_0_12_53)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x38065 (* ?x37881 l_0_12_34)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x38063 (* ?x37878 l_0_12_33)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x38055 (* ?x37866 l_0_12_32)))
 (let ((?x35579 (* l_0_12_132 l_0_12_132)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38465 (* ?x38394 l_0_12_139)))
 (let ((?x35577 (* l_0_12_131 l_0_12_131)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38462 (* ?x38391 l_0_12_138)))
 (let ((?x35575 (* l_0_12_130 l_0_12_130)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38459 (* ?x38389 l_0_12_137)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38031 (* ?x38030 l_0_12_6)))
 (let ((?x38019 (* 12.0 l_0_12_12)))
 (let ((?x38022 (* ?x38019 l_0_12_5)))
 (let ((?x38015 (* 12.0 l_0_12_11)))
 (let ((?x38017 (* ?x38015 l_0_12_4)))
 (let ((?x38466 (+ (- (+ (- (+ (+ (+ ?x38017 ?x38022) ?x38031) ?x38459) ?x35575) ?x38462) ?x35577) ?x38465)))
 (let ((?x38474 (- (- (- (- (- (- (- ?x38466 ?x35579) ?x38055) ?x38063) ?x38065) ?x38079) ?x38081) ?x38473)))
 (let ((?x38486 (+ (+ (+ (+ (+ (- (- ?x38474 ?x38475) ?x38477) ?x38089) ?x38091) ?x38481) ?x38483) ?x38485)))
 (= ?x38486 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38546 (* l_0_12_90 l_0_12_90)))
 (let ((?x38544 (* l_0_12_89 l_0_12_89)))
 (let ((?x38542 (* l_0_12_88 l_0_12_88)))
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38540 (* ?x38427 l_0_12_81)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38538 (* ?x38423 l_0_12_80)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38536 (* ?x38419 l_0_12_79)))
 (let ((?x35625 (* 6.0 l_0_12_66)))
 (let ((?x38256 (* ?x35625 l_0_12_80)))
 (let ((?x35622 (* 6.0 l_0_12_65)))
 (let ((?x38254 (* ?x35622 l_0_12_79)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38532 (* ?x38411 l_0_12_60)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38530 (* ?x38407 l_0_12_59)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38528 (* ?x38403 l_0_12_58)))
 (let ((?x35604 (* 6.0 l_0_12_45)))
 (let ((?x38246 (* ?x35604 l_0_12_59)))
 (let ((?x35601 (* 6.0 l_0_12_44)))
 (let ((?x38244 (* ?x35601 l_0_12_58)))
 (let ((?x37881 (* 12.0 l_0_12_27)))
 (let ((?x38230 (* ?x37881 l_0_12_39)))
 (let ((?x37878 (* 12.0 l_0_12_26)))
 (let ((?x38228 (* ?x37878 l_0_12_38)))
 (let ((?x37866 (* 12.0 l_0_12_25)))
 (let ((?x38220 (* ?x37866 l_0_12_37)))
 (let ((?x36067 (* 12.0 l_0_12_18)))
 (let ((?x38198 (* ?x36067 l_0_12_6)))
 (let ((?x38520 (* l_0_12_174 l_0_12_174)))
 (let ((?x38518 (* l_0_12_173 l_0_12_173)))
 (let ((?x38516 (* l_0_12_172 l_0_12_172)))
 (let ((?x36058 (* 12.0 l_0_12_17)))
 (let ((?x38192 (* ?x36058 l_0_12_5)))
 (let ((?x36055 (* 12.0 l_0_12_16)))
 (let ((?x38189 (* ?x36055 l_0_12_4)))
 (let ((?x38512 (* l_0_12_153 l_0_12_153)))
 (let ((?x38510 (* l_0_12_152 l_0_12_152)))
 (let ((?x38508 (* l_0_12_151 l_0_12_151)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38506 (* ?x38394 l_0_12_144)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38504 (* ?x38391 l_0_12_143)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38502 (* ?x38389 l_0_12_142)))
 (let ((?x27847 (* l_0_12_111 l_0_12_111)))
 (let ((?x38501 (+ (+ (* l_0_12_109 l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x27847)))
 (let ((?x38514 (+ (+ (+ (+ (+ (+ (+ ?x38501 ?x38502) ?x38504) ?x38506) ?x38508) ?x38510) ?x38512) ?x38189)))
 (let ((?x38524 (- (- (+ (- (- (- (+ ?x38514 ?x38192) ?x38516) ?x38518) ?x38520) ?x38198) ?x38220) ?x38228)))
 (let ((?x38534 (+ (- (- (- (- (- (- ?x38524 ?x38230) ?x38244) ?x38246) ?x38528) ?x38530) ?x38532) ?x38254)))
 (let ((?x38547 (- (- (- (+ (+ (+ (+ ?x38534 ?x38256) ?x38536) ?x38538) ?x38540) ?x38542) ?x38544) ?x38546)))
 (= ?x38547 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36922 (* l_0_12_9 l_0_12_9)))
 (let ((?x36923 (* 6.0 ?x36922)))
 (let ((?x36919 (* l_0_12_8 l_0_12_8)))
 (let ((?x36920 (* 6.0 ?x36919)))
 (let ((?x36916 (* l_0_12_73 l_0_12_73)))
 (let ((?x38633 (* 3.0 ?x36916)))
 (let ((?x36913 (* l_0_12_72 l_0_12_72)))
 (let ((?x38631 (* 3.0 ?x36913)))
 (let ((?x36910 (* l_0_12_71 l_0_12_71)))
 (let ((?x38629 (* 3.0 ?x36910)))
 (let ((?x36907 (* l_0_12_70 l_0_12_70)))
 (let ((?x38627 (* 3.0 ?x36907)))
 (let ((?x36904 (* l_0_12_7 l_0_12_7)))
 (let ((?x36905 (* 6.0 ?x36904)))
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x37940 (* ?x37939 l_0_12_72)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x37937 (* ?x37936 l_0_12_71)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x37934 (* ?x37933 l_0_12_70)))
 (let ((?x38621 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x38618 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x38615 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x37919 (* ?x37918 l_0_12_51)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x37916 (* ?x37915 l_0_12_50)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x37913 (* ?x37912 l_0_12_49)))
 (let ((?x36886 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x36875 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x36872 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x36861 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x38602 (* l_0_12_136 l_0_12_136)))
 (let ((?x38600 (* l_0_12_135 l_0_12_135)))
 (let ((?x38598 (* l_0_12_134 l_0_12_134)))
 (let ((?x38596 (* l_0_12_133 l_0_12_133)))
 (let ((?x36825 (* l_0_12_10 l_0_12_10)))
 (let ((?x36826 (* 6.0 ?x36825)))
 (let ((?x38606 (- (- (- (+ (+ (+ (+ ?x36826 ?x38596) ?x38598) ?x38600) ?x38602) ?x36861) ?x36872) ?x36875)))
 (let ((?x38613 (- (+ (+ (+ (- ?x38606 ?x36886) ?x37913) ?x37916) ?x37919) (* (* 3.0 l_0_12_49) l_0_12_49))))
 (let ((?x38626 (+ (- (- (- (- (- (- ?x38613 ?x38615) ?x38618) ?x38621) ?x37934) ?x37937) ?x37940) ?x36905)))
 (= (+ (+ (+ (+ (+ (+ ?x38626 ?x38627) ?x38629) ?x38631) ?x38633) ?x36920) ?x36923) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38707 (* 6.0 l_0_12_73)))
 (let ((?x38708 (* ?x38707 l_0_12_77)))
 (let ((?x38704 (* 6.0 l_0_12_72)))
 (let ((?x38705 (* ?x38704 l_0_12_76)))
 (let ((?x38701 (* 6.0 l_0_12_71)))
 (let ((?x38702 (* ?x38701 l_0_12_75)))
 (let ((?x38698 (* 6.0 l_0_12_70)))
 (let ((?x38699 (* ?x38698 l_0_12_74)))
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x38097 (* ?x37939 l_0_12_76)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x38095 (* ?x37936 l_0_12_75)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x38093 (* ?x37933 l_0_12_74)))
 (let ((?x38692 (* 6.0 l_0_12_52)))
 (let ((?x38693 (* ?x38692 l_0_12_56)))
 (let ((?x38689 (* 6.0 l_0_12_51)))
 (let ((?x38690 (* ?x38689 l_0_12_55)))
 (let ((?x38686 (* 6.0 l_0_12_50)))
 (let ((?x38687 (* ?x38686 l_0_12_54)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x38087 (* ?x37918 l_0_12_55)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x38085 (* ?x37915 l_0_12_54)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x38083 (* ?x37912 l_0_12_53)))
 (let ((?x36151 (* 12.0 l_0_12_31)))
 (let ((?x38678 (* ?x36151 l_0_12_35)))
 (let ((?x36136 (* 12.0 l_0_12_30)))
 (let ((?x38676 (* ?x36136 l_0_12_34)))
 (let ((?x36133 (* 12.0 l_0_12_29)))
 (let ((?x38674 (* ?x36133 l_0_12_33)))
 (let ((?x36118 (* 12.0 l_0_12_28)))
 (let ((?x38672 (* ?x36118 l_0_12_32)))
 (let ((?x38669 (* 2.0 l_0_12_136)))
 (let ((?x38670 (* ?x38669 l_0_12_140)))
 (let ((?x38666 (* 2.0 l_0_12_135)))
 (let ((?x38667 (* ?x38666 l_0_12_139)))
 (let ((?x38663 (* 2.0 l_0_12_134)))
 (let ((?x38664 (* ?x38663 l_0_12_138)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38395 (* ?x38394 l_0_12_135)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38392 (* ?x38391 l_0_12_134)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38390 (* ?x38389 l_0_12_133)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38655 (* ?x38030 l_0_12_9)))
 (let ((?x38652 (+ (* (* 12.0 l_0_12_10) l_0_12_14) (* (* 12.0 l_0_12_11) l_0_12_7))))
 (let ((?x38654 (+ ?x38652 (* (* 12.0 l_0_12_12) l_0_12_8))))
 (let ((?x38662 (+ (- (- (- (+ ?x38654 ?x38655) ?x38390) ?x38392) ?x38395) (* (* 2.0 l_0_12_133) l_0_12_137))))
 (let ((?x38679 (- (- (- (- (+ (+ (+ ?x38662 ?x38664) ?x38667) ?x38670) ?x38672) ?x38674) ?x38676) ?x38678)))
 (let ((?x38685 (- (+ (+ (+ ?x38679 ?x38083) ?x38085) ?x38087) (* (* 6.0 l_0_12_49) l_0_12_53))))
 (let ((?x38700 (+ (- (- (- (- (- (- ?x38685 ?x38687) ?x38690) ?x38693) ?x38093) ?x38095) ?x38097) ?x38699)))
 (= (+ (+ (+ ?x38700 ?x38702) ?x38705) ?x38708) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38813 (* 2.0 l_0_12_90)))
 (let ((?x38814 (* ?x38813 l_0_12_93)))
 (let ((?x38810 (* 2.0 l_0_12_89)))
 (let ((?x38811 (* ?x38810 l_0_12_92)))
 (let ((?x38807 (* 2.0 l_0_12_88)))
 (let ((?x38808 (* ?x38807 l_0_12_91)))
 (let ((?x38707 (* 6.0 l_0_12_73)))
 (let ((?x38805 (* ?x38707 l_0_12_82)))
 (let ((?x38704 (* 6.0 l_0_12_72)))
 (let ((?x38803 (* ?x38704 l_0_12_81)))
 (let ((?x38701 (* 6.0 l_0_12_71)))
 (let ((?x38801 (* ?x38701 l_0_12_80)))
 (let ((?x38698 (* 6.0 l_0_12_70)))
 (let ((?x38799 (* ?x38698 l_0_12_79)))
 (let ((?x37939 (* 2.0 l_0_12_69)))
 (let ((?x38262 (* ?x37939 l_0_12_81)))
 (let ((?x37936 (* 2.0 l_0_12_68)))
 (let ((?x38260 (* ?x37936 l_0_12_80)))
 (let ((?x37933 (* 2.0 l_0_12_67)))
 (let ((?x38258 (* ?x37933 l_0_12_79)))
 (let ((?x38692 (* 6.0 l_0_12_52)))
 (let ((?x38794 (* ?x38692 l_0_12_61)))
 (let ((?x38689 (* 6.0 l_0_12_51)))
 (let ((?x38792 (* ?x38689 l_0_12_60)))
 (let ((?x38686 (* 6.0 l_0_12_50)))
 (let ((?x38790 (* ?x38686 l_0_12_59)))
 (let ((?x37918 (* 2.0 l_0_12_48)))
 (let ((?x38252 (* ?x37918 l_0_12_60)))
 (let ((?x37915 (* 2.0 l_0_12_47)))
 (let ((?x38250 (* ?x37915 l_0_12_59)))
 (let ((?x37912 (* 2.0 l_0_12_46)))
 (let ((?x38248 (* ?x37912 l_0_12_58)))
 (let ((?x36151 (* 12.0 l_0_12_31)))
 (let ((?x36152 (* ?x36151 l_0_12_40)))
 (let ((?x36136 (* 12.0 l_0_12_30)))
 (let ((?x36137 (* ?x36136 l_0_12_39)))
 (let ((?x36133 (* 12.0 l_0_12_29)))
 (let ((?x36134 (* ?x36133 l_0_12_38)))
 (let ((?x36118 (* 12.0 l_0_12_28)))
 (let ((?x36119 (* ?x36118 l_0_12_37)))
 (let ((?x36067 (* 12.0 l_0_12_18)))
 (let ((?x36068 (* ?x36067 l_0_12_9)))
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x38778 (* ?x38777 l_0_12_177)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x38775 (* ?x38774 l_0_12_176)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x38772 (* ?x38771 l_0_12_175)))
 (let ((?x36058 (* 12.0 l_0_12_17)))
 (let ((?x36059 (* ?x36058 l_0_12_8)))
 (let ((?x36055 (* 12.0 l_0_12_16)))
 (let ((?x36056 (* ?x36055 l_0_12_7)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x38767 (* ?x38766 l_0_12_156)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x38764 (* ?x38763 l_0_12_155)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x38761 (* ?x38760 l_0_12_154)))
 (let ((?x38669 (* 2.0 l_0_12_136)))
 (let ((?x38758 (* ?x38669 l_0_12_145)))
 (let ((?x38666 (* 2.0 l_0_12_135)))
 (let ((?x38756 (* ?x38666 l_0_12_144)))
 (let ((?x38663 (* 2.0 l_0_12_134)))
 (let ((?x38754 (* ?x38663 l_0_12_143)))
 (let ((?x38660 (* 2.0 l_0_12_133)))
 (let ((?x38752 (* ?x38660 l_0_12_142)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x38750 (* ?x38749 l_0_12_114)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x38747 (* ?x38746 l_0_12_113)))
 (let ((?x36040 (* 12.0 l_0_12_10)))
 (let ((?x36041 (* ?x36040 l_0_12_19)))
 (let ((?x38753 (+ (+ (+ (+ ?x36041 (* (* 2.0 l_0_12_109) l_0_12_112)) ?x38747) ?x38750) ?x38752)))
 (let ((?x38769 (+ (+ (+ (+ (+ (+ (+ ?x38753 ?x38754) ?x38756) ?x38758) ?x38761) ?x38764) ?x38767) ?x36056)))
 (let ((?x38782 (- (- (+ (- (- (- (+ ?x38769 ?x36059) ?x38772) ?x38775) ?x38778) ?x36068) ?x36119) ?x36134)))
 (let ((?x38789 (- (+ (+ (+ (- (- ?x38782 ?x36137) ?x36152) ?x38248) ?x38250) ?x38252) (* (* 6.0 l_0_12_49) l_0_12_58))))
 (let ((?x38800 (+ (- (- (- (- (- (- ?x38789 ?x38790) ?x38792) ?x38794) ?x38258) ?x38260) ?x38262) ?x38799)))
 (= (- (- (- (+ (+ (+ ?x38800 ?x38801) ?x38803) ?x38805) ?x38808) ?x38811) ?x38814) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38923 (* l_0_12_78 l_0_12_78)))
 (let ((?x38924 (* 3.0 ?x38923)))
 (let ((?x38920 (* l_0_12_77 l_0_12_77)))
 (let ((?x38921 (* 3.0 ?x38920)))
 (let ((?x38917 (* l_0_12_76 l_0_12_76)))
 (let ((?x38918 (* 3.0 ?x38917)))
 (let ((?x38914 (* l_0_12_75 l_0_12_75)))
 (let ((?x38915 (* 3.0 ?x38914)))
 (let ((?x38911 (* l_0_12_74 l_0_12_74)))
 (let ((?x38912 (* 3.0 ?x38911)))
 (let ((?x38909 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x38906 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x38903 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x38900 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x38894 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x38891 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x38888 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x38885 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x38882 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x37715 (* l_0_12_15 l_0_12_15)))
 (let ((?x38879 (* 6.0 ?x37715)))
 (let ((?x38877 (* l_0_12_141 l_0_12_141)))
 (let ((?x38875 (* l_0_12_140 l_0_12_140)))
 (let ((?x37713 (* l_0_12_14 l_0_12_14)))
 (let ((?x38873 (* 6.0 ?x37713)))
 (let ((?x38871 (* l_0_12_139 l_0_12_139)))
 (let ((?x38869 (* l_0_12_138 l_0_12_138)))
 (let ((?x38867 (* l_0_12_137 l_0_12_137)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38465 (* ?x38394 l_0_12_139)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38462 (* ?x38391 l_0_12_138)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38459 (* ?x38389 l_0_12_137)))
 (let ((?x37711 (* l_0_12_13 l_0_12_13)))
 (let ((?x38862 (* 6.0 ?x37711)))
 (let ((?x38861 (+ (* 6.0 (* l_0_12_11 l_0_12_11)) (* 6.0 (* l_0_12_12 l_0_12_12)))))
 (let ((?x38872 (+ (+ (+ (- (- (- (+ ?x38861 ?x38862) ?x38459) ?x38462) ?x38465) ?x38867) ?x38869) ?x38871)))
 (let ((?x38889 (- (- (- (+ (+ (+ (+ ?x38872 ?x38873) ?x38875) ?x38877) ?x38879) ?x38882) ?x38885) ?x38888)))
 (let ((?x38901 (- (- (- (- ?x38889 ?x38891) ?x38894) (* (* 3.0 l_0_12_53) l_0_12_53)) ?x38900)))
 (let ((?x38922 (+ (+ (+ (+ (- (- (- ?x38901 ?x38903) ?x38906) ?x38909) ?x38912) ?x38915) ?x38918) ?x38921)))
 (= (+ ?x38922 ?x38924) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38813 (* 2.0 l_0_12_90)))
 (let ((?x39056 (* ?x38813 l_0_12_97)))
 (let ((?x38810 (* 2.0 l_0_12_89)))
 (let ((?x39054 (* ?x38810 l_0_12_96)))
 (let ((?x38807 (* 2.0 l_0_12_88)))
 (let ((?x39052 (* ?x38807 l_0_12_95)))
 (let ((?x39050 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39047 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39044 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39041 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39038 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x39035 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39032 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39029 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39026 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x39020 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x39017 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x39014 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x39011 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x39008 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x39005 (* ?x38777 l_0_12_181)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x39003 (* ?x38774 l_0_12_180)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x39001 (* ?x38771 l_0_12_179)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x38999 (* ?x38766 l_0_12_160)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x38997 (* ?x38763 l_0_12_159)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x38995 (* ?x38760 l_0_12_158)))
 (let ((?x38993 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x38990 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x38987 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x38984 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x38981 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x38978 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x38975 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x38394 (* 2.0 l_0_12_132)))
 (let ((?x38506 (* ?x38394 l_0_12_144)))
 (let ((?x38391 (* 2.0 l_0_12_131)))
 (let ((?x38504 (* ?x38391 l_0_12_143)))
 (let ((?x38389 (* 2.0 l_0_12_130)))
 (let ((?x38502 (* ?x38389 l_0_12_142)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38969 (* ?x38030 l_0_12_18)))
 (let ((?x38019 (* 12.0 l_0_12_12)))
 (let ((?x38967 (* ?x38019 l_0_12_17)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x38965 (* ?x38749 l_0_12_118)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x38963 (* ?x38746 l_0_12_117)))
 (let ((?x38015 (* 12.0 l_0_12_11)))
 (let ((?x38961 (* ?x38015 l_0_12_16)))
 (let ((?x38968 (+ (+ (+ (+ (* (* 2.0 l_0_12_109) l_0_12_116) ?x38961) ?x38963) ?x38965) ?x38967)))
 (let ((?x38982 (+ (+ (+ (- (- (- (+ ?x38968 ?x38969) ?x38502) ?x38504) ?x38506) ?x38975) ?x38978) ?x38981)))
 (let ((?x39000 (+ (+ (+ (+ (+ (+ (+ ?x38982 ?x38984) ?x38987) ?x38990) ?x38993) ?x38995) ?x38997) ?x38999)))
 (let ((?x39018 (- (- (- (- (- (- (- ?x39000 ?x39001) ?x39003) ?x39005) ?x39008) ?x39011) ?x39014) ?x39017)))
 (let ((?x39030 (- (- (- (- ?x39018 ?x39020) (* (* 6.0 l_0_12_53) l_0_12_58)) ?x39026) ?x39029)))
 (let ((?x39051 (+ (+ (+ (+ (+ (- (- ?x39030 ?x39032) ?x39035) ?x39038) ?x39041) ?x39044) ?x39047) ?x39050)))
 (= (- (- (- ?x39051 ?x39052) ?x39054) ?x39056) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36743 (* l_0_12_84 l_0_12_84)))
 (let ((?x39193 (* 3.0 ?x36743)))
 (let ((?x36740 (* l_0_12_83 l_0_12_83)))
 (let ((?x39191 (* 3.0 ?x36740)))
 (let ((?x36737 (* l_0_12_82 l_0_12_82)))
 (let ((?x39189 (* 3.0 ?x36737)))
 (let ((?x36734 (* l_0_12_81 l_0_12_81)))
 (let ((?x39187 (* 3.0 ?x36734)))
 (let ((?x36731 (* l_0_12_80 l_0_12_80)))
 (let ((?x39185 (* 3.0 ?x36731)))
 (let ((?x36728 (* l_0_12_79 l_0_12_79)))
 (let ((?x39183 (* 3.0 ?x36728)))
 (let ((?x39181 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x39178 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x39175 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x39172 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x39169 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x36708 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x36705 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x36702 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x36699 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x36696 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x36693 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x36627 (* l_0_12_21 l_0_12_21)))
 (let ((?x36628 (* 6.0 ?x36627)))
 (let ((?x36614 (* l_0_12_20 l_0_12_20)))
 (let ((?x36615 (* 6.0 ?x36614)))
 (let ((?x36611 (* l_0_12_19 l_0_12_19)))
 (let ((?x36612 (* 6.0 ?x36611)))
 (let ((?x36608 (* l_0_12_18 l_0_12_18)))
 (let ((?x36609 (* 6.0 ?x36608)))
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x39153 (* ?x38777 l_0_12_186)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x39151 (* ?x38774 l_0_12_185)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x39149 (* ?x38771 l_0_12_184)))
 (let ((?x36601 (* l_0_12_17 l_0_12_17)))
 (let ((?x36602 (* 6.0 ?x36601)))
 (let ((?x36598 (* l_0_12_16 l_0_12_16)))
 (let ((?x36599 (* 6.0 ?x36598)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x39145 (* ?x38766 l_0_12_165)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x39143 (* ?x38763 l_0_12_164)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x39141 (* ?x38760 l_0_12_163)))
 (let ((?x39139 (* l_0_12_147 l_0_12_147)))
 (let ((?x39137 (* l_0_12_146 l_0_12_146)))
 (let ((?x39135 (* l_0_12_145 l_0_12_145)))
 (let ((?x39133 (* l_0_12_144 l_0_12_144)))
 (let ((?x39131 (* l_0_12_143 l_0_12_143)))
 (let ((?x39129 (* l_0_12_142 l_0_12_142)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x39127 (* ?x38749 l_0_12_123)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x39125 (* ?x38746 l_0_12_122)))
 (let ((?x38743 (* 2.0 l_0_12_109)))
 (let ((?x39123 (* ?x38743 l_0_12_121)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x39121 (* ?x39120 l_0_12_90)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x39118 (* ?x36587 l_0_12_89)))
 (let ((?x39126 (+ (+ (- (- (* (* (- 2.0) l_0_12_100) l_0_12_88) ?x39118) ?x39121) ?x39123) ?x39125)))
 (let ((?x39140 (+ (+ (+ (+ (+ (+ (+ ?x39126 ?x39127) ?x39129) ?x39131) ?x39133) ?x39135) ?x39137) ?x39139)))
 (let ((?x39152 (- (- (+ (+ (+ (+ (+ ?x39140 ?x39141) ?x39143) ?x39145) ?x36599) ?x36602) ?x39149) ?x39151)))
 (let ((?x39160 (- (- (+ (+ (+ (+ (- ?x39152 ?x39153) ?x36609) ?x36612) ?x36615) ?x36628) ?x36693) ?x36696)))
 (let ((?x39167 (- (- (- (- (- ?x39160 ?x36699) ?x36702) ?x36705) ?x36708) (* (* 3.0 l_0_12_58) l_0_12_58))))
 (let ((?x39186 (+ (+ (- (- (- (- (- ?x39167 ?x39169) ?x39172) ?x39175) ?x39178) ?x39181) ?x39183) ?x39185)))
 (= (+ (+ (+ (+ ?x39186 ?x39187) ?x39189) ?x39191) ?x39193) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x39297 (* ?x35891 l_0_12_75)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x39295 (* ?x35887 l_0_12_74)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x39293 (* ?x35883 l_0_12_54)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x39291 (* ?x35879 l_0_12_53)))
 (let ((?x35721 (* 12.0 l_0_12_24)))
 (let ((?x38053 (* ?x35721 l_0_12_33)))
 (let ((?x35712 (* 12.0 l_0_12_23)))
 (let ((?x38045 (* ?x35712 l_0_12_32)))
 (let ((?x25636 (* l_0_12_129 l_0_12_129)))
 (let ((?x22446 (* l_0_12_128 l_0_12_128)))
 (let ((?x38019 (* 12.0 l_0_12_12)))
 (let ((?x38020 (* ?x38019 l_0_12_3)))
 (let ((?x38015 (* 12.0 l_0_12_11)))
 (let ((?x38016 (* ?x38015 l_0_12_2)))
 (let ((?x39266 (- (- (- (+ ?x38016 ?x38020) ?x22446) ?x25636) (* (* 2.0 l_0_12_191) l_0_12_200))))
 (let ((?x39270 (- (- ?x39266 (* (* 2.0 l_0_12_192) l_0_12_201)) (* (* 2.0 l_0_12_212) l_0_12_221))))
 (let ((?x39275 (- (- (- ?x39270 (* (* 2.0 l_0_12_213) l_0_12_222)) ?x38045) (* (* 2.0 l_0_12_233) l_0_12_242))))
 (let ((?x39280 (- (- (- ?x39275 (* (* 2.0 l_0_12_234) l_0_12_243)) ?x38053) (* (* 2.0 l_0_12_254) l_0_12_263))))
 (let ((?x39284 (- (- ?x39280 (* (* 2.0 l_0_12_255) l_0_12_264)) (* (* 2.0 l_0_12_275) l_0_12_284))))
 (let ((?x39288 (- (- ?x39284 (* (* 2.0 l_0_12_276) l_0_12_285)) (* (* 2.0 l_0_12_296) l_0_12_305))))
 (let ((?x39296 (+ (- (- (- ?x39288 (* (* 2.0 l_0_12_297) l_0_12_306)) ?x39291) ?x39293) ?x39295)))
 (= (+ ?x39296 ?x39297) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x36183 (* 2.0 l_0_12_73)))
 (let ((?x39407 (* ?x36183 l_0_12_77)))
 (let ((?x36180 (* 2.0 l_0_12_72)))
 (let ((?x39405 (* ?x36180 l_0_12_76)))
 (let ((?x36177 (* 2.0 l_0_12_71)))
 (let ((?x39403 (* ?x36177 l_0_12_75)))
 (let ((?x36174 (* 2.0 l_0_12_70)))
 (let ((?x39401 (* ?x36174 l_0_12_74)))
 (let ((?x35891 (* 2.0 l_0_12_66)))
 (let ((?x39297 (* ?x35891 l_0_12_75)))
 (let ((?x35887 (* 2.0 l_0_12_65)))
 (let ((?x39295 (* ?x35887 l_0_12_74)))
 (let ((?x36167 (* 2.0 l_0_12_52)))
 (let ((?x39397 (* ?x36167 l_0_12_56)))
 (let ((?x36164 (* 2.0 l_0_12_51)))
 (let ((?x39395 (* ?x36164 l_0_12_55)))
 (let ((?x36161 (* 2.0 l_0_12_50)))
 (let ((?x39393 (* ?x36161 l_0_12_54)))
 (let ((?x36158 (* 2.0 l_0_12_49)))
 (let ((?x39391 (* ?x36158 l_0_12_53)))
 (let ((?x35883 (* 2.0 l_0_12_45)))
 (let ((?x39293 (* ?x35883 l_0_12_54)))
 (let ((?x35879 (* 2.0 l_0_12_44)))
 (let ((?x39291 (* ?x35879 l_0_12_53)))
 (let ((?x36151 (* 12.0 l_0_12_31)))
 (let ((?x38678 (* ?x36151 l_0_12_35)))
 (let ((?x36136 (* 12.0 l_0_12_30)))
 (let ((?x38676 (* ?x36136 l_0_12_34)))
 (let ((?x36133 (* 12.0 l_0_12_29)))
 (let ((?x38674 (* ?x36133 l_0_12_33)))
 (let ((?x36118 (* 12.0 l_0_12_28)))
 (let ((?x38672 (* ?x36118 l_0_12_32)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38655 (* ?x38030 l_0_12_9)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x13980 (* ?x35677 l_0_12_134)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x27399 (* ?x35674 l_0_12_133)))
 (let ((?x38652 (+ (* (* 12.0 l_0_12_10) l_0_12_14) (* (* 12.0 l_0_12_11) l_0_12_7))))
 (let ((?x38654 (+ ?x38652 (* (* 12.0 l_0_12_12) l_0_12_8))))
 (let ((?x39338 (- (+ (- (- ?x38654 ?x27399) ?x13980) ?x38655) (* (* 2.0 l_0_12_196) l_0_12_200))))
 (let ((?x39342 (- (- ?x39338 (* (* 2.0 l_0_12_197) l_0_12_201)) (* (* 2.0 l_0_12_198) l_0_12_202))))
 (let ((?x39346 (- (- ?x39342 (* (* 2.0 l_0_12_199) l_0_12_203)) (* (* 2.0 l_0_12_217) l_0_12_221))))
 (let ((?x39350 (- (- ?x39346 (* (* 2.0 l_0_12_218) l_0_12_222)) (* (* 2.0 l_0_12_219) l_0_12_223))))
 (let ((?x39354 (- (- ?x39350 (* (* 2.0 l_0_12_220) l_0_12_224)) (* (* 2.0 l_0_12_238) l_0_12_242))))
 (let ((?x39358 (- (- ?x39354 (* (* 2.0 l_0_12_239) l_0_12_243)) (* (* 2.0 l_0_12_240) l_0_12_244))))
 (let ((?x39362 (- (- ?x39358 (* (* 2.0 l_0_12_241) l_0_12_245)) (* (* 2.0 l_0_12_259) l_0_12_263))))
 (let ((?x39366 (- (- ?x39362 (* (* 2.0 l_0_12_260) l_0_12_264)) (* (* 2.0 l_0_12_261) l_0_12_265))))
 (let ((?x39371 (- (- (- ?x39366 (* (* 2.0 l_0_12_262) l_0_12_266)) ?x38672) (* (* 2.0 l_0_12_280) l_0_12_284))))
 (let ((?x39375 (- (- ?x39371 (* (* 2.0 l_0_12_281) l_0_12_285)) (* (* 2.0 l_0_12_282) l_0_12_286))))
 (let ((?x39381 (- (- (- (- ?x39375 (* (* 2.0 l_0_12_283) l_0_12_287)) ?x38674) ?x38676) (* (* 2.0 l_0_12_301) l_0_12_305))))
 (let ((?x39385 (- (- ?x39381 (* (* 2.0 l_0_12_302) l_0_12_306)) (* (* 2.0 l_0_12_303) l_0_12_307))))
 (let ((?x39390 (+ (+ (- (- ?x39385 (* (* 2.0 l_0_12_304) l_0_12_308)) ?x38678) ?x39291) ?x39293)))
 (let ((?x39402 (+ (- (- (- (- (- (- ?x39390 ?x39391) ?x39393) ?x39395) ?x39397) ?x39295) ?x39297) ?x39401)))
 (= (+ (+ (+ ?x39402 ?x39403) ?x39405) ?x39407) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38894 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x38891 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x38888 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x38885 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x38882 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x39499 (* l_0_12_309 l_0_12_309)))
 (let ((?x39497 (* l_0_12_308 l_0_12_308)))
 (let ((?x39495 (* l_0_12_307 l_0_12_307)))
 (let ((?x39493 (* l_0_12_306 l_0_12_306)))
 (let ((?x39491 (* l_0_12_305 l_0_12_305)))
 (let ((?x39489 (* l_0_12_288 l_0_12_288)))
 (let ((?x39487 (* l_0_12_287 l_0_12_287)))
 (let ((?x39485 (* l_0_12_286 l_0_12_286)))
 (let ((?x39483 (* l_0_12_285 l_0_12_285)))
 (let ((?x39481 (* l_0_12_284 l_0_12_284)))
 (let ((?x39479 (* l_0_12_267 l_0_12_267)))
 (let ((?x39477 (* l_0_12_266 l_0_12_266)))
 (let ((?x39475 (* l_0_12_265 l_0_12_265)))
 (let ((?x39473 (* l_0_12_264 l_0_12_264)))
 (let ((?x39471 (* l_0_12_263 l_0_12_263)))
 (let ((?x39469 (* l_0_12_246 l_0_12_246)))
 (let ((?x39467 (* l_0_12_245 l_0_12_245)))
 (let ((?x39465 (* l_0_12_244 l_0_12_244)))
 (let ((?x39463 (* l_0_12_243 l_0_12_243)))
 (let ((?x39461 (* l_0_12_242 l_0_12_242)))
 (let ((?x39459 (* l_0_12_225 l_0_12_225)))
 (let ((?x39457 (* l_0_12_224 l_0_12_224)))
 (let ((?x39455 (* l_0_12_223 l_0_12_223)))
 (let ((?x39453 (* l_0_12_222 l_0_12_222)))
 (let ((?x39451 (* l_0_12_221 l_0_12_221)))
 (let ((?x39449 (* l_0_12_204 l_0_12_204)))
 (let ((?x39447 (* l_0_12_203 l_0_12_203)))
 (let ((?x39445 (* l_0_12_202 l_0_12_202)))
 (let ((?x39443 (* l_0_12_201 l_0_12_201)))
 (let ((?x39441 (* l_0_12_200 l_0_12_200)))
 (let ((?x37715 (* l_0_12_15 l_0_12_15)))
 (let ((?x38879 (* 6.0 ?x37715)))
 (let ((?x37713 (* l_0_12_14 l_0_12_14)))
 (let ((?x38873 (* 6.0 ?x37713)))
 (let ((?x37711 (* l_0_12_13 l_0_12_13)))
 (let ((?x38862 (* 6.0 ?x37711)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x38028 (* ?x35677 l_0_12_138)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x38025 (* ?x35674 l_0_12_137)))
 (let ((?x38861 (+ (* 6.0 (* l_0_12_11 l_0_12_11)) (* 6.0 (* l_0_12_12 l_0_12_12)))))
 (let ((?x39444 (- (- (+ (+ (+ (- (- ?x38861 ?x38025) ?x38028) ?x38862) ?x38873) ?x38879) ?x39441) ?x39443)))
 (let ((?x39458 (- (- (- (- (- (- (- ?x39444 ?x39445) ?x39447) ?x39449) ?x39451) ?x39453) ?x39455) ?x39457)))
 (let ((?x39472 (- (- (- (- (- (- (- ?x39458 ?x39459) ?x39461) ?x39463) ?x39465) ?x39467) ?x39469) ?x39471)))
 (let ((?x39486 (- (- (- (- (- (- (- ?x39472 ?x39473) ?x39475) ?x39477) ?x39479) ?x39481) ?x39483) ?x39485)))
 (let ((?x39500 (- (- (- (- (- (- (- ?x39486 ?x39487) ?x39489) ?x39491) ?x39493) ?x39495) ?x39497) ?x39499)))
 (let ((?x39508 (- (- (- (- (- (- ?x39500 ?x38882) ?x38885) ?x38888) ?x38891) ?x38894) (* (* 1.0 l_0_12_53) l_0_12_53))))
 (let ((?x39514 (- (- ?x39508 (* (* 1.0 l_0_12_54) l_0_12_54)) (* (* 1.0 l_0_12_55) l_0_12_55))))
 (let ((?x39520 (- (- ?x39514 (* (* 1.0 l_0_12_56) l_0_12_56)) (* (* 1.0 l_0_12_57) l_0_12_57))))
 (let ((?x39524 (+ (+ ?x39520 (* 1.0 (* l_0_12_74 l_0_12_74))) (* 1.0 (* l_0_12_75 l_0_12_75)))))
 (let ((?x39528 (+ (+ ?x39524 (* 1.0 (* l_0_12_76 l_0_12_76))) (* 1.0 (* l_0_12_77 l_0_12_77)))))
 (= (+ ?x39528 (* 1.0 (* l_0_12_78 l_0_12_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x39715 (* ?x36189 l_0_12_96)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x39713 (* ?x36186 l_0_12_95)))
 (let ((?x39711 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x39708 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x39705 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x39702 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x39699 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x39696 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x39693 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x39690 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x39687 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x39684 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x39020 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x39017 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x39014 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x39011 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x39008 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x39586 (* ?x36064 l_0_12_180)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x39584 (* ?x36061 l_0_12_179)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x39582 (* ?x36052 l_0_12_159)))
 (let ((?x38993 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x39579 (* ?x36049 l_0_12_158)))
 (let ((?x38984 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x38030 (* 12.0 l_0_12_13)))
 (let ((?x38969 (* ?x38030 l_0_12_18)))
 (let ((?x35677 (* 2.0 l_0_12_129)))
 (let ((?x38168 (* ?x35677 l_0_12_143)))
 (let ((?x35674 (* 2.0 l_0_12_128)))
 (let ((?x38165 (* ?x35674 l_0_12_142)))
 (let ((?x38019 (* 12.0 l_0_12_12)))
 (let ((?x38967 (* ?x38019 l_0_12_17)))
 (let ((?x38015 (* 12.0 l_0_12_11)))
 (let ((?x38961 (* ?x38015 l_0_12_16)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x39571 (* ?x36046 l_0_12_117)))
 (let ((?x39575 (- (+ (+ (+ (* (* 2.0 l_0_12_107) l_0_12_116) ?x39571) ?x38961) ?x38967) ?x38165)))
 (let ((?x39585 (- (+ (+ (+ (+ (+ (- ?x39575 ?x38168) ?x38969) ?x38984) ?x39579) ?x38993) ?x39582) ?x39584)))
 (let ((?x39593 (- (- (- ?x39585 ?x39586) (* (* 2.0 l_0_12_200) l_0_12_205)) (* (* 2.0 l_0_12_201) l_0_12_206))))
 (let ((?x39599 (- (- ?x39593 (* (* 2.0 l_0_12_202) l_0_12_207)) (* (* 2.0 l_0_12_203) l_0_12_208))))
 (let ((?x39605 (- (- ?x39599 (* (* 2.0 l_0_12_204) l_0_12_209)) (* (* 2.0 l_0_12_221) l_0_12_226))))
 (let ((?x39611 (- (- ?x39605 (* (* 2.0 l_0_12_222) l_0_12_227)) (* (* 2.0 l_0_12_223) l_0_12_228))))
 (let ((?x39617 (- (- ?x39611 (* (* 2.0 l_0_12_224) l_0_12_229)) (* (* 2.0 l_0_12_225) l_0_12_230))))
 (let ((?x39623 (- (- ?x39617 (* (* 2.0 l_0_12_242) l_0_12_247)) (* (* 2.0 l_0_12_243) l_0_12_248))))
 (let ((?x39629 (- (- ?x39623 (* (* 2.0 l_0_12_244) l_0_12_249)) (* (* 2.0 l_0_12_245) l_0_12_250))))
 (let ((?x39635 (- (- ?x39629 (* (* 2.0 l_0_12_246) l_0_12_251)) (* (* 2.0 l_0_12_263) l_0_12_268))))
 (let ((?x39641 (- (- ?x39635 (* (* 2.0 l_0_12_264) l_0_12_269)) (* (* 2.0 l_0_12_265) l_0_12_270))))
 (let ((?x39647 (- (- ?x39641 (* (* 2.0 l_0_12_266) l_0_12_271)) (* (* 2.0 l_0_12_267) l_0_12_272))))
 (let ((?x39653 (- (- ?x39647 (* (* 2.0 l_0_12_284) l_0_12_289)) (* (* 2.0 l_0_12_285) l_0_12_290))))
 (let ((?x39659 (- (- ?x39653 (* (* 2.0 l_0_12_286) l_0_12_291)) (* (* 2.0 l_0_12_287) l_0_12_292))))
 (let ((?x39665 (- (- ?x39659 (* (* 2.0 l_0_12_288) l_0_12_293)) (* (* 2.0 l_0_12_305) l_0_12_310))))
 (let ((?x39671 (- (- ?x39665 (* (* 2.0 l_0_12_306) l_0_12_311)) (* (* 2.0 l_0_12_307) l_0_12_312))))
 (let ((?x39677 (- (- ?x39671 (* (* 2.0 l_0_12_308) l_0_12_313)) (* (* 2.0 l_0_12_309) l_0_12_314))))
 (let ((?x39688 (- (- (- (- (- (- (- ?x39677 ?x39008) ?x39011) ?x39014) ?x39017) ?x39020) ?x39684) ?x39687)))
 (let ((?x39709 (+ (+ (+ (+ (- (- (- ?x39688 ?x39690) ?x39693) ?x39696) ?x39699) ?x39702) ?x39705) ?x39708)))
 (= (- (- (+ ?x39709 ?x39711) ?x39713) ?x39715) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37005 (* l_0_12_64 l_0_12_64)))
 (let ((?x37038 (* 3.0 ?x37005)))
 (= (+ (* (* (- 3.0) l_0_12_43) l_0_12_43) ?x37038) 0.0))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37384 (* ?x37383 l_0_12_86)))
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37427 (* ?x37194 l_0_12_67)))
 (let ((?x37189 (* 6.0 l_0_12_43)))
 (let ((?x37422 (* ?x37189 l_0_12_46)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37356 (* ?x37355 l_0_12_170)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37350 (* ?x37349 l_0_12_149)))
 (let ((?x39829 (+ (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_107) ?x37350) ?x37356) ?x37422) ?x37427)))
 (= (+ ?x39829 ?x37384) 0.0)))))))))))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37470 (* ?x37194 l_0_12_70)))
 (= (+ (* (* (- 6.0) l_0_12_43) l_0_12_49) ?x37470) 0.0))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37523 (* ?x37194 l_0_12_74)))
 (= (+ (* (* (- 6.0) l_0_12_43) l_0_12_53) ?x37523) 0.0))))
(assert
 (let ((?x37194 (* 6.0 l_0_12_64)))
 (let ((?x37557 (* ?x37194 l_0_12_79)))
 (= (+ (* (* (- 6.0) l_0_12_43) l_0_12_58) ?x37557) 0.0))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x38266 (* ?x36189 l_0_12_89)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x38264 (* ?x36186 l_0_12_88)))
 (let ((?x35634 (* l_0_12_69 l_0_12_69)))
 (let ((?x35635 (* 3.0 ?x35634)))
 (let ((?x35631 (* l_0_12_68 l_0_12_68)))
 (let ((?x35632 (* 3.0 ?x35631)))
 (let ((?x35628 (* l_0_12_67 l_0_12_67)))
 (let ((?x35629 (* 3.0 ?x35628)))
 (let ((?x35614 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x35611 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x35608 (* (* 3.0 l_0_12_46) l_0_12_46)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x38196 (* ?x36064 l_0_12_173)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x38194 (* ?x36061 l_0_12_172)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x38186 (* ?x36052 l_0_12_152)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x38184 (* ?x36049 l_0_12_151)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x38163 (* ?x36046 l_0_12_110)))
 (let ((?x39849 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_109) ?x38163) ?x38184) ?x38186) ?x38194)))
 (let ((?x39856 (+ (+ (+ (- (- (- (+ ?x39849 ?x38196) ?x35608) ?x35611) ?x35614) ?x35629) ?x35632) ?x35635)))
 (= (+ (+ ?x39856 ?x38264) ?x38266) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x36190 (* ?x36189 l_0_12_92)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x36187 (* ?x36186 l_0_12_91)))
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38428 (* ?x38427 l_0_12_72)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38424 (* ?x38423 l_0_12_71)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38420 (* ?x38419 l_0_12_70)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38412 (* ?x38411 l_0_12_51)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38408 (* ?x38407 l_0_12_50)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38404 (* ?x38403 l_0_12_49)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x36065 (* ?x36064 l_0_12_176)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x36062 (* ?x36061 l_0_12_175)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x36053 (* ?x36052 l_0_12_155)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x36050 (* ?x36049 l_0_12_154)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x36047 (* ?x36046 l_0_12_113)))
 (let ((?x29714 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_112) ?x36047) ?x36050) ?x36053) ?x36062)))
 (let ((?x39863 (+ (+ (+ (- (- (- (+ ?x29714 ?x36065) ?x38404) ?x38408) ?x38412) ?x38420) ?x38424) ?x38428)))
 (= (+ (+ ?x39863 ?x36187) ?x36190) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x36189 (* 2.0 l_0_12_87)))
 (let ((?x39715 (* ?x36189 l_0_12_96)))
 (let ((?x36186 (* 2.0 l_0_12_86)))
 (let ((?x39713 (* ?x36186 l_0_12_95)))
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38485 (* ?x38427 l_0_12_76)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38483 (* ?x38423 l_0_12_75)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38481 (* ?x38419 l_0_12_74)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38477 (* ?x38411 l_0_12_55)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38475 (* ?x38407 l_0_12_54)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38473 (* ?x38403 l_0_12_53)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x39586 (* ?x36064 l_0_12_180)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x39584 (* ?x36061 l_0_12_179)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x39582 (* ?x36052 l_0_12_159)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x39579 (* ?x36049 l_0_12_158)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x39571 (* ?x36046 l_0_12_117)))
 (let ((?x17223 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_116) ?x39571) ?x39579) ?x39582) ?x39584)))
 (let ((?x17238 (+ (+ (+ (- (- (- (+ ?x17223 ?x39586) ?x38473) ?x38475) ?x38477) ?x38481) ?x38483) ?x38485)))
 (= (+ (+ ?x17238 ?x39713) ?x39715) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x38427 (* 6.0 l_0_12_69)))
 (let ((?x38540 (* ?x38427 l_0_12_81)))
 (let ((?x38423 (* 6.0 l_0_12_68)))
 (let ((?x38538 (* ?x38423 l_0_12_80)))
 (let ((?x38419 (* 6.0 l_0_12_67)))
 (let ((?x38536 (* ?x38419 l_0_12_79)))
 (let ((?x38411 (* 6.0 l_0_12_48)))
 (let ((?x38532 (* ?x38411 l_0_12_60)))
 (let ((?x38407 (* 6.0 l_0_12_47)))
 (let ((?x38530 (* ?x38407 l_0_12_59)))
 (let ((?x38403 (* 6.0 l_0_12_46)))
 (let ((?x38528 (* ?x38403 l_0_12_58)))
 (let ((?x36064 (* 2.0 l_0_12_171)))
 (let ((?x36606 (* ?x36064 l_0_12_185)))
 (let ((?x36061 (* 2.0 l_0_12_170)))
 (let ((?x36604 (* ?x36061 l_0_12_184)))
 (let ((?x36052 (* 2.0 l_0_12_150)))
 (let ((?x36596 (* ?x36052 l_0_12_164)))
 (let ((?x36049 (* 2.0 l_0_12_149)))
 (let ((?x36594 (* ?x36049 l_0_12_163)))
 (let ((?x36046 (* 2.0 l_0_12_108)))
 (let ((?x36592 (* ?x36046 l_0_12_122)))
 (let ((?x36043 (* 2.0 l_0_12_107)))
 (let ((?x36590 (* ?x36043 l_0_12_121)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x36588 (* ?x36587 l_0_12_87)))
 (let ((?x36584 (* 2.0 l_0_12_100)))
 (let ((?x36585 (* ?x36584 l_0_12_86)))
 (let ((?x29719 (+ (+ (- (- (- (- (+ ?x36585 ?x36588) ?x36590) ?x36592) ?x36594) ?x36596) ?x36604) ?x36606)))
 (= (+ (+ (+ (- (- (- ?x29719 ?x38528) ?x38530) ?x38532) ?x38536) ?x38538) ?x38540) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x36916 (* l_0_12_73 l_0_12_73)))
 (let ((?x38633 (* 3.0 ?x36916)))
 (let ((?x36913 (* l_0_12_72 l_0_12_72)))
 (let ((?x38631 (* 3.0 ?x36913)))
 (let ((?x36910 (* l_0_12_71 l_0_12_71)))
 (let ((?x38629 (* 3.0 ?x36910)))
 (let ((?x36907 (* l_0_12_70 l_0_12_70)))
 (let ((?x38627 (* 3.0 ?x36907)))
 (let ((?x38621 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x38618 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x38615 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x39872 (+ (- (- (- (* (* (- 3.0) l_0_12_49) l_0_12_49) ?x38615) ?x38618) ?x38621) ?x38627)))
 (= (+ (+ (+ ?x39872 ?x38629) ?x38631) ?x38633) 0.0))))))))))))))
(assert
 (let ((?x38707 (* 6.0 l_0_12_73)))
 (let ((?x38708 (* ?x38707 l_0_12_77)))
 (let ((?x38704 (* 6.0 l_0_12_72)))
 (let ((?x38705 (* ?x38704 l_0_12_76)))
 (let ((?x38701 (* 6.0 l_0_12_71)))
 (let ((?x38702 (* ?x38701 l_0_12_75)))
 (let ((?x38698 (* 6.0 l_0_12_70)))
 (let ((?x38699 (* ?x38698 l_0_12_74)))
 (let ((?x38692 (* 6.0 l_0_12_52)))
 (let ((?x38693 (* ?x38692 l_0_12_56)))
 (let ((?x38689 (* 6.0 l_0_12_51)))
 (let ((?x38690 (* ?x38689 l_0_12_55)))
 (let ((?x38686 (* 6.0 l_0_12_50)))
 (let ((?x38687 (* ?x38686 l_0_12_54)))
 (let ((?x39884 (+ (- (- (- (* (* (- 6.0) l_0_12_49) l_0_12_53) ?x38687) ?x38690) ?x38693) ?x38699)))
 (= (+ (+ (+ ?x39884 ?x38702) ?x38705) ?x38708) 0.0)))))))))))))))))
(assert
 (let ((?x38707 (* 6.0 l_0_12_73)))
 (let ((?x38805 (* ?x38707 l_0_12_82)))
 (let ((?x38704 (* 6.0 l_0_12_72)))
 (let ((?x38803 (* ?x38704 l_0_12_81)))
 (let ((?x38701 (* 6.0 l_0_12_71)))
 (let ((?x38801 (* ?x38701 l_0_12_80)))
 (let ((?x38698 (* 6.0 l_0_12_70)))
 (let ((?x38799 (* ?x38698 l_0_12_79)))
 (let ((?x38692 (* 6.0 l_0_12_52)))
 (let ((?x38794 (* ?x38692 l_0_12_61)))
 (let ((?x38689 (* 6.0 l_0_12_51)))
 (let ((?x38792 (* ?x38689 l_0_12_60)))
 (let ((?x38686 (* 6.0 l_0_12_50)))
 (let ((?x38790 (* ?x38686 l_0_12_59)))
 (let ((?x39893 (+ (- (- (- (* (* (- 6.0) l_0_12_49) l_0_12_58) ?x38790) ?x38792) ?x38794) ?x38799)))
 (= (+ (+ (+ ?x39893 ?x38801) ?x38803) ?x38805) 0.0)))))))))))))))))
(assert
 (let ((?x38923 (* l_0_12_78 l_0_12_78)))
 (let ((?x38924 (* 3.0 ?x38923)))
 (let ((?x38920 (* l_0_12_77 l_0_12_77)))
 (let ((?x38921 (* 3.0 ?x38920)))
 (let ((?x38917 (* l_0_12_76 l_0_12_76)))
 (let ((?x38918 (* 3.0 ?x38917)))
 (let ((?x38914 (* l_0_12_75 l_0_12_75)))
 (let ((?x38915 (* 3.0 ?x38914)))
 (let ((?x38911 (* l_0_12_74 l_0_12_74)))
 (let ((?x38912 (* 3.0 ?x38911)))
 (let ((?x38909 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x38906 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x38903 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x38900 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x39903 (- (- (- (- (* (* (- 3.0) l_0_12_53) l_0_12_53) ?x38900) ?x38903) ?x38906) ?x38909)))
 (= (+ (+ (+ (+ (+ ?x39903 ?x38912) ?x38915) ?x38918) ?x38921) ?x38924) 0.0)))))))))))))))))
(assert
 (let ((?x39050 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39047 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39044 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39041 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39038 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x39035 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39032 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39029 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39026 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x39917 (- (- (- (- (* (* (- 6.0) l_0_12_53) l_0_12_58) ?x39026) ?x39029) ?x39032) ?x39035)))
 (= (+ (+ (+ (+ (+ ?x39917 ?x39038) ?x39041) ?x39044) ?x39047) ?x39050) 0.0))))))))))))
(assert
 (let ((?x36743 (* l_0_12_84 l_0_12_84)))
 (let ((?x39193 (* 3.0 ?x36743)))
 (let ((?x36740 (* l_0_12_83 l_0_12_83)))
 (let ((?x39191 (* 3.0 ?x36740)))
 (let ((?x36737 (* l_0_12_82 l_0_12_82)))
 (let ((?x39189 (* 3.0 ?x36737)))
 (let ((?x36734 (* l_0_12_81 l_0_12_81)))
 (let ((?x39187 (* 3.0 ?x36734)))
 (let ((?x36731 (* l_0_12_80 l_0_12_80)))
 (let ((?x39185 (* 3.0 ?x36731)))
 (let ((?x36728 (* l_0_12_79 l_0_12_79)))
 (let ((?x39183 (* 3.0 ?x36728)))
 (let ((?x39181 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x39178 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x39175 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x39172 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x39169 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x39935 (- (- (- (- (* (* (- 3.0) l_0_12_58) l_0_12_58) ?x39169) ?x39172) ?x39175) ?x39178)))
 (let ((?x39942 (+ (+ (+ (+ (+ (+ (- ?x39935 ?x39181) ?x39183) ?x39185) ?x39187) ?x39189) ?x39191) ?x39193)))
 (= ?x39942 0.0)))))))))))))))))))))
(assert
 (let ((?x36916 (* l_0_12_73 l_0_12_73)))
 (let ((?x36913 (* l_0_12_72 l_0_12_72)))
 (let ((?x36910 (* l_0_12_71 l_0_12_71)))
 (let ((?x36907 (* l_0_12_70 l_0_12_70)))
 (let ((?x13283 (* l_0_12_52 l_0_12_52)))
 (let ((?x36964 (* l_0_12_51 l_0_12_51)))
 (let ((?x39949 (+ (+ (+ (* l_0_12_49 l_0_12_49) (* l_0_12_50 l_0_12_50)) ?x36964) ?x13283)))
 (= (- (- (- (- ?x39949 ?x36907) ?x36910) ?x36913) ?x36916) 0.0)))))))))
(assert
 (let ((?x36183 (* 2.0 l_0_12_73)))
 (let ((?x39407 (* ?x36183 l_0_12_77)))
 (let ((?x36180 (* 2.0 l_0_12_72)))
 (let ((?x39405 (* ?x36180 l_0_12_76)))
 (let ((?x36177 (* 2.0 l_0_12_71)))
 (let ((?x39403 (* ?x36177 l_0_12_75)))
 (let ((?x36174 (* 2.0 l_0_12_70)))
 (let ((?x39401 (* ?x36174 l_0_12_74)))
 (let ((?x36167 (* 2.0 l_0_12_52)))
 (let ((?x39397 (* ?x36167 l_0_12_56)))
 (let ((?x36164 (* 2.0 l_0_12_51)))
 (let ((?x39395 (* ?x36164 l_0_12_55)))
 (let ((?x36161 (* 2.0 l_0_12_50)))
 (let ((?x39393 (* ?x36161 l_0_12_54)))
 (let ((?x36158 (* 2.0 l_0_12_49)))
 (let ((?x39391 (* ?x36158 l_0_12_53)))
 (let ((?x38602 (* l_0_12_136 l_0_12_136)))
 (let ((?x38600 (* l_0_12_135 l_0_12_135)))
 (let ((?x39964 (- (- (* (- l_0_12_133) l_0_12_133) (* l_0_12_134 l_0_12_134)) ?x38600)))
 (let ((?x39971 (- (- (+ (+ (+ (+ (- ?x39964 ?x38602) ?x39391) ?x39393) ?x39395) ?x39397) ?x39401) ?x39403)))
 (= (- (- ?x39971 ?x39405) ?x39407) 0.0))))))))))))))))))))))
(assert
 (let ((?x40014 (* l_0_12_94 l_0_12_94)))
 (let ((?x40012 (* l_0_12_93 l_0_12_93)))
 (let ((?x40010 (* l_0_12_92 l_0_12_92)))
 (let ((?x40008 (* l_0_12_91 l_0_12_91)))
 (let ((?x36183 (* 2.0 l_0_12_73)))
 (let ((?x36184 (* ?x36183 l_0_12_82)))
 (let ((?x36180 (* 2.0 l_0_12_72)))
 (let ((?x36181 (* ?x36180 l_0_12_81)))
 (let ((?x36177 (* 2.0 l_0_12_71)))
 (let ((?x36178 (* ?x36177 l_0_12_80)))
 (let ((?x36174 (* 2.0 l_0_12_70)))
 (let ((?x36175 (* ?x36174 l_0_12_79)))
 (let ((?x36167 (* 2.0 l_0_12_52)))
 (let ((?x36168 (* ?x36167 l_0_12_61)))
 (let ((?x36164 (* 2.0 l_0_12_51)))
 (let ((?x36165 (* ?x36164 l_0_12_60)))
 (let ((?x36161 (* 2.0 l_0_12_50)))
 (let ((?x36162 (* ?x36161 l_0_12_59)))
 (let ((?x36158 (* 2.0 l_0_12_49)))
 (let ((?x36159 (* ?x36158 l_0_12_58)))
 (let ((?x39998 (* l_0_12_178 l_0_12_178)))
 (let ((?x39996 (* l_0_12_177 l_0_12_177)))
 (let ((?x39994 (* l_0_12_176 l_0_12_176)))
 (let ((?x39992 (* l_0_12_175 l_0_12_175)))
 (let ((?x39990 (* l_0_12_157 l_0_12_157)))
 (let ((?x39988 (* l_0_12_156 l_0_12_156)))
 (let ((?x39986 (* l_0_12_155 l_0_12_155)))
 (let ((?x39984 (* l_0_12_154 l_0_12_154)))
 (let ((?x39982 (* l_0_12_115 l_0_12_115)))
 (let ((?x39980 (* l_0_12_114 l_0_12_114)))
 (let ((?x39981 (+ (+ (* l_0_12_112 l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x39980)))
 (let ((?x39995 (- (- (+ (+ (+ (+ (+ ?x39981 ?x39982) ?x39984) ?x39986) ?x39988) ?x39990) ?x39992) ?x39994)))
 (let ((?x40004 (- (+ (+ (+ (+ (- (- ?x39995 ?x39996) ?x39998) ?x36159) ?x36162) ?x36165) ?x36168) ?x36175)))
 (let ((?x40015 (- (- (- (- (- (- (- ?x40004 ?x36178) ?x36181) ?x36184) ?x40008) ?x40010) ?x40012) ?x40014)))
 (= ?x40015 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38923 (* l_0_12_78 l_0_12_78)))
 (let ((?x38920 (* l_0_12_77 l_0_12_77)))
 (let ((?x38917 (* l_0_12_76 l_0_12_76)))
 (let ((?x38914 (* l_0_12_75 l_0_12_75)))
 (let ((?x38911 (* l_0_12_74 l_0_12_74)))
 (let ((?x28900 (* l_0_12_57 l_0_12_57)))
 (let ((?x28894 (* l_0_12_56 l_0_12_56)))
 (let ((?x15660 (* l_0_12_55 l_0_12_55)))
 (let ((?x28876 (* l_0_12_54 l_0_12_54)))
 (let ((?x28777 (* l_0_12_53 l_0_12_53)))
 (let ((?x38669 (* 2.0 l_0_12_136)))
 (let ((?x38670 (* ?x38669 l_0_12_140)))
 (let ((?x38666 (* 2.0 l_0_12_135)))
 (let ((?x38667 (* ?x38666 l_0_12_139)))
 (let ((?x38663 (* 2.0 l_0_12_134)))
 (let ((?x38664 (* ?x38663 l_0_12_138)))
 (let ((?x40046 (+ (- (- (- (* (* (- 2.0) l_0_12_133) l_0_12_137) ?x38664) ?x38667) ?x38670) ?x28777)))
 (let ((?x40053 (- (- (- (+ (+ (+ (+ ?x40046 ?x28876) ?x15660) ?x28894) ?x28900) ?x38911) ?x38914) ?x38917)))
 (= (- (- ?x40053 ?x38920) ?x38923) 0.0))))))))))))))))))))
(assert
 (let ((?x40130 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x40127 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x40124 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x40121 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x39711 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x39708 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x39705 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x39702 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x39699 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x39696 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x39693 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x39690 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x39687 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x39684 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x40107 (* 2.0 l_0_12_178)))
 (let ((?x40108 (* ?x40107 l_0_12_182)))
 (let ((?x40104 (* 2.0 l_0_12_177)))
 (let ((?x40105 (* ?x40104 l_0_12_181)))
 (let ((?x40101 (* 2.0 l_0_12_176)))
 (let ((?x40102 (* ?x40101 l_0_12_180)))
 (let ((?x40098 (* 2.0 l_0_12_175)))
 (let ((?x40099 (* ?x40098 l_0_12_179)))
 (let ((?x40095 (* 2.0 l_0_12_157)))
 (let ((?x40096 (* ?x40095 l_0_12_161)))
 (let ((?x40092 (* 2.0 l_0_12_156)))
 (let ((?x40093 (* ?x40092 l_0_12_160)))
 (let ((?x40089 (* 2.0 l_0_12_155)))
 (let ((?x40090 (* ?x40089 l_0_12_159)))
 (let ((?x40086 (* 2.0 l_0_12_154)))
 (let ((?x40087 (* ?x40086 l_0_12_158)))
 (let ((?x38669 (* 2.0 l_0_12_136)))
 (let ((?x38758 (* ?x38669 l_0_12_145)))
 (let ((?x38666 (* 2.0 l_0_12_135)))
 (let ((?x38756 (* ?x38666 l_0_12_144)))
 (let ((?x38663 (* 2.0 l_0_12_134)))
 (let ((?x38754 (* ?x38663 l_0_12_143)))
 (let ((?x38660 (* 2.0 l_0_12_133)))
 (let ((?x38752 (* ?x38660 l_0_12_142)))
 (let ((?x40079 (* 2.0 l_0_12_115)))
 (let ((?x40080 (* ?x40079 l_0_12_119)))
 (let ((?x40076 (* 2.0 l_0_12_114)))
 (let ((?x40077 (* ?x40076 l_0_12_118)))
 (let ((?x40073 (* 2.0 l_0_12_113)))
 (let ((?x40074 (* ?x40073 l_0_12_117)))
 (let ((?x40082 (- (+ (+ (+ (* (* 2.0 l_0_12_112) l_0_12_116) ?x40074) ?x40077) ?x40080) ?x38752)))
 (let ((?x40097 (+ (+ (+ (+ (- (- (- ?x40082 ?x38754) ?x38756) ?x38758) ?x40087) ?x40090) ?x40093) ?x40096)))
 (let ((?x40112 (+ (+ (+ (- (- (- (- ?x40097 ?x40099) ?x40102) ?x40105) ?x40108) ?x39684) ?x39687) ?x39690)))
 (let ((?x40119 (- (- (- (- (- (+ (+ ?x40112 ?x39693) ?x39696) ?x39699) ?x39702) ?x39705) ?x39708) ?x39711)))
 (= (- (- (- (- ?x40119 ?x40121) ?x40124) ?x40127) ?x40130) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36743 (* l_0_12_84 l_0_12_84)))
 (let ((?x36740 (* l_0_12_83 l_0_12_83)))
 (let ((?x36737 (* l_0_12_82 l_0_12_82)))
 (let ((?x36734 (* l_0_12_81 l_0_12_81)))
 (let ((?x36731 (* l_0_12_80 l_0_12_80)))
 (let ((?x36728 (* l_0_12_79 l_0_12_79)))
 (let ((?x13090 (* l_0_12_63 l_0_12_63)))
 (let ((?x13076 (* l_0_12_62 l_0_12_62)))
 (let ((?x36801 (* l_0_12_61 l_0_12_61)))
 (let ((?x26189 (* l_0_12_60 l_0_12_60)))
 (let ((?x26100 (* l_0_12_59 l_0_12_59)))
 (let ((?x13072 (* l_0_12_58 l_0_12_58)))
 (let ((?x40107 (* 2.0 l_0_12_178)))
 (let ((?x40217 (* ?x40107 l_0_12_187)))
 (let ((?x40104 (* 2.0 l_0_12_177)))
 (let ((?x40215 (* ?x40104 l_0_12_186)))
 (let ((?x40101 (* 2.0 l_0_12_176)))
 (let ((?x40213 (* ?x40101 l_0_12_185)))
 (let ((?x40098 (* 2.0 l_0_12_175)))
 (let ((?x40211 (* ?x40098 l_0_12_184)))
 (let ((?x40095 (* 2.0 l_0_12_157)))
 (let ((?x40209 (* ?x40095 l_0_12_166)))
 (let ((?x40092 (* 2.0 l_0_12_156)))
 (let ((?x40207 (* ?x40092 l_0_12_165)))
 (let ((?x40089 (* 2.0 l_0_12_155)))
 (let ((?x40205 (* ?x40089 l_0_12_164)))
 (let ((?x40086 (* 2.0 l_0_12_154)))
 (let ((?x40203 (* ?x40086 l_0_12_163)))
 (let ((?x40079 (* 2.0 l_0_12_115)))
 (let ((?x40201 (* ?x40079 l_0_12_124)))
 (let ((?x40076 (* 2.0 l_0_12_114)))
 (let ((?x40199 (* ?x40076 l_0_12_123)))
 (let ((?x40073 (* 2.0 l_0_12_113)))
 (let ((?x40197 (* ?x40073 l_0_12_122)))
 (let ((?x40071 (* 2.0 l_0_12_112)))
 (let ((?x40195 (* ?x40071 l_0_12_121)))
 (let ((?x40192 (* 2.0 l_0_12_103)))
 (let ((?x40193 (* ?x40192 l_0_12_94)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x40190 (* ?x39120 l_0_12_93)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x18722 (* ?x36587 l_0_12_92)))
 (let ((?x40196 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_91) ?x18722) ?x40190) ?x40193) ?x40195)))
 (let ((?x40210 (+ (+ (+ (+ (+ (+ (+ ?x40196 ?x40197) ?x40199) ?x40201) ?x40203) ?x40205) ?x40207) ?x40209)))
 (let ((?x40221 (+ (+ (+ (- (- (- (- ?x40210 ?x40211) ?x40213) ?x40215) ?x40217) ?x13072) ?x26100) ?x26189)))
 (let ((?x40228 (- (- (- (- (+ (+ (+ ?x40221 ?x36801) ?x13076) ?x13090) ?x36728) ?x36731) ?x36734) ?x36737)))
 (= (- (- ?x40228 ?x36740) ?x36743) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40314 (* l_0_12_99 l_0_12_99)))
 (let ((?x40312 (* l_0_12_98 l_0_12_98)))
 (let ((?x40310 (* l_0_12_97 l_0_12_97)))
 (let ((?x40308 (* l_0_12_96 l_0_12_96)))
 (let ((?x40306 (* l_0_12_95 l_0_12_95)))
 (let ((?x40304 (* l_0_12_183 l_0_12_183)))
 (let ((?x40302 (* l_0_12_182 l_0_12_182)))
 (let ((?x40300 (* l_0_12_181 l_0_12_181)))
 (let ((?x40298 (* l_0_12_180 l_0_12_180)))
 (let ((?x40296 (* l_0_12_179 l_0_12_179)))
 (let ((?x40294 (* l_0_12_162 l_0_12_162)))
 (let ((?x40292 (* l_0_12_161 l_0_12_161)))
 (let ((?x40290 (* l_0_12_160 l_0_12_160)))
 (let ((?x40288 (* l_0_12_159 l_0_12_159)))
 (let ((?x40286 (* l_0_12_158 l_0_12_158)))
 (let ((?x38990 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x38987 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x38981 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x38978 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x38975 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x40279 (* l_0_12_120 l_0_12_120)))
 (let ((?x40277 (* l_0_12_119 l_0_12_119)))
 (let ((?x40275 (* l_0_12_118 l_0_12_118)))
 (let ((?x40276 (+ (+ (* l_0_12_116 l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40275)))
 (let ((?x40285 (- (- (- (- (- (+ (+ ?x40276 ?x40277) ?x40279) ?x38975) ?x38978) ?x38981) ?x38987) ?x38990)))
 (let ((?x40299 (- (- (+ (+ (+ (+ (+ ?x40285 ?x40286) ?x40288) ?x40290) ?x40292) ?x40294) ?x40296) ?x40298)))
 (let ((?x40313 (- (- (- (- (- (- (- ?x40299 ?x40300) ?x40302) ?x40304) ?x40306) ?x40308) ?x40310) ?x40312)))
 (= (- ?x40313 ?x40314) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x40398 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x40395 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x40392 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x40389 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x40386 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x40383 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x40380 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x40377 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x40374 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x40371 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x39139 (* l_0_12_147 l_0_12_147)))
 (let ((?x39137 (* l_0_12_146 l_0_12_146)))
 (let ((?x39135 (* l_0_12_145 l_0_12_145)))
 (let ((?x39133 (* l_0_12_144 l_0_12_144)))
 (let ((?x39131 (* l_0_12_143 l_0_12_143)))
 (let ((?x39129 (* l_0_12_142 l_0_12_142)))
 (let ((?x40362 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x40359 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x40356 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x40353 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x40350 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x40347 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x40192 (* 2.0 l_0_12_103)))
 (let ((?x40344 (* ?x40192 l_0_12_98)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x40342 (* ?x39120 l_0_12_97)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x40340 (* ?x36587 l_0_12_96)))
 (let ((?x40348 (- (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_95) ?x40340) ?x40342) ?x40344) ?x40347)))
 (let ((?x40365 (- (- (+ (+ (+ (+ (+ ?x40348 ?x40350) ?x40353) ?x40356) ?x40359) ?x40362) ?x39129) ?x39131)))
 (let ((?x40378 (+ (+ (+ (- (- (- (- ?x40365 ?x39133) ?x39135) ?x39137) ?x39139) ?x40371) ?x40374) ?x40377)))
 (let ((?x40399 (- (- (- (- (- (+ (+ ?x40378 ?x40380) ?x40383) ?x40386) ?x40389) ?x40392) ?x40395) ?x40398)))
 (= ?x40399 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40490 (* l_0_12_189 l_0_12_189)))
 (let ((?x40488 (* l_0_12_188 l_0_12_188)))
 (let ((?x40486 (* l_0_12_187 l_0_12_187)))
 (let ((?x40484 (* l_0_12_186 l_0_12_186)))
 (let ((?x40482 (* l_0_12_185 l_0_12_185)))
 (let ((?x40480 (* l_0_12_184 l_0_12_184)))
 (let ((?x40478 (* l_0_12_168 l_0_12_168)))
 (let ((?x40476 (* l_0_12_167 l_0_12_167)))
 (let ((?x40474 (* l_0_12_166 l_0_12_166)))
 (let ((?x40472 (* l_0_12_165 l_0_12_165)))
 (let ((?x40470 (* l_0_12_164 l_0_12_164)))
 (let ((?x40468 (* l_0_12_163 l_0_12_163)))
 (let ((?x40466 (* l_0_12_126 l_0_12_126)))
 (let ((?x40464 (* l_0_12_125 l_0_12_125)))
 (let ((?x40462 (* l_0_12_124 l_0_12_124)))
 (let ((?x40460 (* l_0_12_123 l_0_12_123)))
 (let ((?x40458 (* l_0_12_122 l_0_12_122)))
 (let ((?x40456 (* l_0_12_121 l_0_12_121)))
 (let ((?x40454 (* l_0_12_105 l_0_12_105)))
 (let ((?x30092 (* l_0_12_104 l_0_12_104)))
 (let ((?x19064 (* l_0_12_103 l_0_12_103)))
 (let ((?x30063 (* l_0_12_102 l_0_12_102)))
 (let ((?x30085 (- (- (* (- l_0_12_100) l_0_12_100) (* l_0_12_101 l_0_12_101)) ?x30063)))
 (let ((?x40463 (+ (+ (+ (+ (- (- (- ?x30085 ?x19064) ?x30092) ?x40454) ?x40456) ?x40458) ?x40460) ?x40462)))
 (let ((?x40477 (+ (+ (+ (+ (+ (+ (+ ?x40463 ?x40464) ?x40466) ?x40468) ?x40470) ?x40472) ?x40474) ?x40476)))
 (let ((?x40491 (- (- (- (- (- (- (+ ?x40477 ?x40478) ?x40480) ?x40482) ?x40484) ?x40486) ?x40488) ?x40490)))
 (= ?x40491 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x37087 (* l_0_12_85 l_0_12_85)))
 (let ((?x37083 (* l_0_12_169 l_0_12_169)))
 (let ((?x40531 (+ (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_148 l_0_12_148)) ?x37083)))
 (= (+ ?x40531 ?x37087) 0.0)))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37559 (* ?x37383 l_0_12_88)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37541 (* ?x37355 l_0_12_172)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37537 (* ?x37349 l_0_12_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_109) ?x37537) ?x37541) ?x37559) 0.0))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37677 (* ?x37383 l_0_12_91)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37661 (* ?x37355 l_0_12_175)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x27176 (* ?x37349 l_0_12_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x27176) ?x37661) ?x37677) 0.0))))))))
(assert
 (let ((?x37383 (* 2.0 l_0_12_85)))
 (let ((?x37775 (* ?x37383 l_0_12_95)))
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37758 (* ?x37355 l_0_12_179)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37753 (* ?x37349 l_0_12_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_116) ?x37753) ?x37758) ?x37775) 0.0))))))))
(assert
 (let ((?x37355 (* 2.0 l_0_12_169)))
 (let ((?x37828 (* ?x37355 l_0_12_184)))
 (let ((?x37349 (* 2.0 l_0_12_148)))
 (let ((?x37825 (* ?x37349 l_0_12_163)))
 (let ((?x37346 (* 2.0 l_0_12_106)))
 (let ((?x37823 (* ?x37346 l_0_12_121)))
 (= (+ (- (- (* (* 2.0 l_0_12_100) l_0_12_85) ?x37823) ?x37825) ?x37828) 0.0))))))))
(assert
 (let ((?x38546 (* l_0_12_90 l_0_12_90)))
 (let ((?x38544 (* l_0_12_89 l_0_12_89)))
 (let ((?x38542 (* l_0_12_88 l_0_12_88)))
 (let ((?x38520 (* l_0_12_174 l_0_12_174)))
 (let ((?x38518 (* l_0_12_173 l_0_12_173)))
 (let ((?x38516 (* l_0_12_172 l_0_12_172)))
 (let ((?x38512 (* l_0_12_153 l_0_12_153)))
 (let ((?x38510 (* l_0_12_152 l_0_12_152)))
 (let ((?x38508 (* l_0_12_151 l_0_12_151)))
 (let ((?x27847 (* l_0_12_111 l_0_12_111)))
 (let ((?x40566 (- (- (* (- l_0_12_109) l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x27847)))
 (let ((?x40573 (+ (+ (+ (+ (- (- (- ?x40566 ?x38508) ?x38510) ?x38512) ?x38516) ?x38518) ?x38520) ?x38542)))
 (= (+ (+ ?x40573 ?x38544) ?x38546) 0.0))))))))))))))
(assert
 (let ((?x38813 (* 2.0 l_0_12_90)))
 (let ((?x38814 (* ?x38813 l_0_12_93)))
 (let ((?x38810 (* 2.0 l_0_12_89)))
 (let ((?x38811 (* ?x38810 l_0_12_92)))
 (let ((?x38807 (* 2.0 l_0_12_88)))
 (let ((?x38808 (* ?x38807 l_0_12_91)))
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x38778 (* ?x38777 l_0_12_177)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x38775 (* ?x38774 l_0_12_176)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x38772 (* ?x38771 l_0_12_175)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x38767 (* ?x38766 l_0_12_156)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x38764 (* ?x38763 l_0_12_155)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x38761 (* ?x38760 l_0_12_154)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x38750 (* ?x38749 l_0_12_114)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x38747 (* ?x38746 l_0_12_113)))
 (let ((?x19230 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_112) ?x38747) ?x38750) ?x38761) ?x38764)))
 (let ((?x30231 (+ (+ (+ (+ (+ (+ (- ?x19230 ?x38767) ?x38772) ?x38775) ?x38778) ?x38808) ?x38811) ?x38814)))
 (= ?x30231 0.0))))))))))))))))))))))))))
(assert
 (let ((?x38813 (* 2.0 l_0_12_90)))
 (let ((?x39056 (* ?x38813 l_0_12_97)))
 (let ((?x38810 (* 2.0 l_0_12_89)))
 (let ((?x39054 (* ?x38810 l_0_12_96)))
 (let ((?x38807 (* 2.0 l_0_12_88)))
 (let ((?x39052 (* ?x38807 l_0_12_95)))
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x39005 (* ?x38777 l_0_12_181)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x39003 (* ?x38774 l_0_12_180)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x39001 (* ?x38771 l_0_12_179)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x38999 (* ?x38766 l_0_12_160)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x38997 (* ?x38763 l_0_12_159)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x38995 (* ?x38760 l_0_12_158)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x38965 (* ?x38749 l_0_12_118)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x38963 (* ?x38746 l_0_12_117)))
 (let ((?x40580 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_116) ?x38963) ?x38965) ?x38995) ?x38997)))
 (let ((?x40587 (+ (+ (+ (+ (+ (+ (- ?x40580 ?x38999) ?x39001) ?x39003) ?x39005) ?x39052) ?x39054) ?x39056)))
 (= ?x40587 0.0))))))))))))))))))))))))))
(assert
 (let ((?x38777 (* 2.0 l_0_12_174)))
 (let ((?x39153 (* ?x38777 l_0_12_186)))
 (let ((?x38774 (* 2.0 l_0_12_173)))
 (let ((?x39151 (* ?x38774 l_0_12_185)))
 (let ((?x38771 (* 2.0 l_0_12_172)))
 (let ((?x39149 (* ?x38771 l_0_12_184)))
 (let ((?x38766 (* 2.0 l_0_12_153)))
 (let ((?x39145 (* ?x38766 l_0_12_165)))
 (let ((?x38763 (* 2.0 l_0_12_152)))
 (let ((?x39143 (* ?x38763 l_0_12_164)))
 (let ((?x38760 (* 2.0 l_0_12_151)))
 (let ((?x39141 (* ?x38760 l_0_12_163)))
 (let ((?x38749 (* 2.0 l_0_12_111)))
 (let ((?x39127 (* ?x38749 l_0_12_123)))
 (let ((?x38746 (* 2.0 l_0_12_110)))
 (let ((?x39125 (* ?x38746 l_0_12_122)))
 (let ((?x38743 (* 2.0 l_0_12_109)))
 (let ((?x39123 (* ?x38743 l_0_12_121)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x39121 (* ?x39120 l_0_12_90)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x39118 (* ?x36587 l_0_12_89)))
 (let ((?x30347 (- (- (+ (+ (* (* 2.0 l_0_12_100) l_0_12_88) ?x39118) ?x39121) ?x39123) ?x39125)))
 (let ((?x19358 (+ (+ (+ (- (- (- (- ?x30347 ?x39127) ?x39141) ?x39143) ?x39145) ?x39149) ?x39151) ?x39153)))
 (= ?x19358 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40014 (* l_0_12_94 l_0_12_94)))
 (let ((?x40012 (* l_0_12_93 l_0_12_93)))
 (let ((?x40010 (* l_0_12_92 l_0_12_92)))
 (let ((?x40008 (* l_0_12_91 l_0_12_91)))
 (let ((?x39998 (* l_0_12_178 l_0_12_178)))
 (let ((?x39996 (* l_0_12_177 l_0_12_177)))
 (let ((?x39994 (* l_0_12_176 l_0_12_176)))
 (let ((?x39992 (* l_0_12_175 l_0_12_175)))
 (let ((?x39990 (* l_0_12_157 l_0_12_157)))
 (let ((?x39988 (* l_0_12_156 l_0_12_156)))
 (let ((?x39986 (* l_0_12_155 l_0_12_155)))
 (let ((?x39984 (* l_0_12_154 l_0_12_154)))
 (let ((?x39982 (* l_0_12_115 l_0_12_115)))
 (let ((?x39980 (* l_0_12_114 l_0_12_114)))
 (let ((?x19379 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x39980)))
 (let ((?x19391 (+ (+ (- (- (- (- (- ?x19379 ?x39982) ?x39984) ?x39986) ?x39988) ?x39990) ?x39992) ?x39994)))
 (= (+ (+ (+ (+ (+ (+ ?x19391 ?x39996) ?x39998) ?x40008) ?x40010) ?x40012) ?x40014) 0.0))))))))))))))))))
(assert
 (let ((?x40130 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x40127 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x40124 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x40121 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x40107 (* 2.0 l_0_12_178)))
 (let ((?x40108 (* ?x40107 l_0_12_182)))
 (let ((?x40104 (* 2.0 l_0_12_177)))
 (let ((?x40105 (* ?x40104 l_0_12_181)))
 (let ((?x40101 (* 2.0 l_0_12_176)))
 (let ((?x40102 (* ?x40101 l_0_12_180)))
 (let ((?x40098 (* 2.0 l_0_12_175)))
 (let ((?x40099 (* ?x40098 l_0_12_179)))
 (let ((?x40095 (* 2.0 l_0_12_157)))
 (let ((?x40096 (* ?x40095 l_0_12_161)))
 (let ((?x40092 (* 2.0 l_0_12_156)))
 (let ((?x40093 (* ?x40092 l_0_12_160)))
 (let ((?x40089 (* 2.0 l_0_12_155)))
 (let ((?x40090 (* ?x40089 l_0_12_159)))
 (let ((?x40086 (* 2.0 l_0_12_154)))
 (let ((?x40087 (* ?x40086 l_0_12_158)))
 (let ((?x40079 (* 2.0 l_0_12_115)))
 (let ((?x40080 (* ?x40079 l_0_12_119)))
 (let ((?x40076 (* 2.0 l_0_12_114)))
 (let ((?x40077 (* ?x40076 l_0_12_118)))
 (let ((?x40073 (* 2.0 l_0_12_113)))
 (let ((?x40074 (* ?x40073 l_0_12_117)))
 (let ((?x19372 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_116) ?x40074) ?x40077) ?x40080) ?x40087)))
 (let ((?x40597 (+ (+ (+ (+ (- (- (- ?x19372 ?x40090) ?x40093) ?x40096) ?x40099) ?x40102) ?x40105) ?x40108)))
 (= (+ (+ (+ (+ ?x40597 ?x40121) ?x40124) ?x40127) ?x40130) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x40107 (* 2.0 l_0_12_178)))
 (let ((?x40217 (* ?x40107 l_0_12_187)))
 (let ((?x40104 (* 2.0 l_0_12_177)))
 (let ((?x40215 (* ?x40104 l_0_12_186)))
 (let ((?x40101 (* 2.0 l_0_12_176)))
 (let ((?x40213 (* ?x40101 l_0_12_185)))
 (let ((?x40098 (* 2.0 l_0_12_175)))
 (let ((?x40211 (* ?x40098 l_0_12_184)))
 (let ((?x40095 (* 2.0 l_0_12_157)))
 (let ((?x40209 (* ?x40095 l_0_12_166)))
 (let ((?x40092 (* 2.0 l_0_12_156)))
 (let ((?x40207 (* ?x40092 l_0_12_165)))
 (let ((?x40089 (* 2.0 l_0_12_155)))
 (let ((?x40205 (* ?x40089 l_0_12_164)))
 (let ((?x40086 (* 2.0 l_0_12_154)))
 (let ((?x40203 (* ?x40086 l_0_12_163)))
 (let ((?x40079 (* 2.0 l_0_12_115)))
 (let ((?x40201 (* ?x40079 l_0_12_124)))
 (let ((?x40076 (* 2.0 l_0_12_114)))
 (let ((?x40199 (* ?x40076 l_0_12_123)))
 (let ((?x40073 (* 2.0 l_0_12_113)))
 (let ((?x40197 (* ?x40073 l_0_12_122)))
 (let ((?x40071 (* 2.0 l_0_12_112)))
 (let ((?x40195 (* ?x40071 l_0_12_121)))
 (let ((?x40192 (* 2.0 l_0_12_103)))
 (let ((?x40193 (* ?x40192 l_0_12_94)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x40190 (* ?x39120 l_0_12_93)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x18722 (* ?x36587 l_0_12_92)))
 (let ((?x40624 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_91) ?x18722) ?x40190) ?x40193) ?x40195)))
 (let ((?x40631 (- (- (- (- (- (- (- ?x40624 ?x40197) ?x40199) ?x40201) ?x40203) ?x40205) ?x40207) ?x40209)))
 (= (+ (+ (+ (+ ?x40631 ?x40211) ?x40213) ?x40215) ?x40217) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40314 (* l_0_12_99 l_0_12_99)))
 (let ((?x40312 (* l_0_12_98 l_0_12_98)))
 (let ((?x40310 (* l_0_12_97 l_0_12_97)))
 (let ((?x40308 (* l_0_12_96 l_0_12_96)))
 (let ((?x40306 (* l_0_12_95 l_0_12_95)))
 (let ((?x40304 (* l_0_12_183 l_0_12_183)))
 (let ((?x40302 (* l_0_12_182 l_0_12_182)))
 (let ((?x40300 (* l_0_12_181 l_0_12_181)))
 (let ((?x40298 (* l_0_12_180 l_0_12_180)))
 (let ((?x40296 (* l_0_12_179 l_0_12_179)))
 (let ((?x40294 (* l_0_12_162 l_0_12_162)))
 (let ((?x40292 (* l_0_12_161 l_0_12_161)))
 (let ((?x40290 (* l_0_12_160 l_0_12_160)))
 (let ((?x40288 (* l_0_12_159 l_0_12_159)))
 (let ((?x40286 (* l_0_12_158 l_0_12_158)))
 (let ((?x40279 (* l_0_12_120 l_0_12_120)))
 (let ((?x40277 (* l_0_12_119 l_0_12_119)))
 (let ((?x40275 (* l_0_12_118 l_0_12_118)))
 (let ((?x30503 (- (- (* (- l_0_12_116) l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40275)))
 (let ((?x40651 (- (- (- (- (- (- (- ?x30503 ?x40277) ?x40279) ?x40286) ?x40288) ?x40290) ?x40292) ?x40294)))
 (let ((?x40658 (+ (+ (+ (+ (+ (+ (+ ?x40651 ?x40296) ?x40298) ?x40300) ?x40302) ?x40304) ?x40306) ?x40308)))
 (= (+ (+ (+ ?x40658 ?x40310) ?x40312) ?x40314) 0.0)))))))))))))))))))))))
(assert
 (let ((?x40398 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x40395 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x40392 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x40389 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x40386 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x40383 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x40380 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x40377 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x40374 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x40371 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x40362 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x40359 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x40356 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x40353 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x40350 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x40347 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x40192 (* 2.0 l_0_12_103)))
 (let ((?x40344 (* ?x40192 l_0_12_98)))
 (let ((?x39120 (* 2.0 l_0_12_102)))
 (let ((?x40342 (* ?x39120 l_0_12_97)))
 (let ((?x36587 (* 2.0 l_0_12_101)))
 (let ((?x40340 (* ?x36587 l_0_12_96)))
 (let ((?x19723 (+ (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_95) ?x40340) ?x40342) ?x40344) ?x40347)))
 (let ((?x19685 (- (- (- (- (- (- (- ?x19723 ?x40350) ?x40353) ?x40356) ?x40359) ?x40362) ?x40371) ?x40374)))
 (let ((?x40666 (+ (+ (+ (+ (- (- (- ?x19685 ?x40377) ?x40380) ?x40383) ?x40386) ?x40389) ?x40392) ?x40395)))
 (= (+ ?x40666 ?x40398) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x40490 (* l_0_12_189 l_0_12_189)))
 (let ((?x40488 (* l_0_12_188 l_0_12_188)))
 (let ((?x40486 (* l_0_12_187 l_0_12_187)))
 (let ((?x40484 (* l_0_12_186 l_0_12_186)))
 (let ((?x40482 (* l_0_12_185 l_0_12_185)))
 (let ((?x40480 (* l_0_12_184 l_0_12_184)))
 (let ((?x40478 (* l_0_12_168 l_0_12_168)))
 (let ((?x40476 (* l_0_12_167 l_0_12_167)))
 (let ((?x40474 (* l_0_12_166 l_0_12_166)))
 (let ((?x40472 (* l_0_12_165 l_0_12_165)))
 (let ((?x40470 (* l_0_12_164 l_0_12_164)))
 (let ((?x40468 (* l_0_12_163 l_0_12_163)))
 (let ((?x40466 (* l_0_12_126 l_0_12_126)))
 (let ((?x40464 (* l_0_12_125 l_0_12_125)))
 (let ((?x40462 (* l_0_12_124 l_0_12_124)))
 (let ((?x40460 (* l_0_12_123 l_0_12_123)))
 (let ((?x40458 (* l_0_12_122 l_0_12_122)))
 (let ((?x40456 (* l_0_12_121 l_0_12_121)))
 (let ((?x40454 (* l_0_12_105 l_0_12_105)))
 (let ((?x30092 (* l_0_12_104 l_0_12_104)))
 (let ((?x19064 (* l_0_12_103 l_0_12_103)))
 (let ((?x30063 (* l_0_12_102 l_0_12_102)))
 (let ((?x18490 (+ (+ (* l_0_12_100 l_0_12_100) (* l_0_12_101 l_0_12_101)) ?x30063)))
 (let ((?x40673 (- (- (- (- (+ (+ (+ ?x18490 ?x19064) ?x30092) ?x40454) ?x40456) ?x40458) ?x40460) ?x40462)))
 (let ((?x40680 (- (- (- (- (- (- (- ?x40673 ?x40464) ?x40466) ?x40468) ?x40470) ?x40472) ?x40474) ?x40476)))
 (let ((?x40687 (+ (+ (+ (+ (+ (+ (- ?x40680 ?x40478) ?x40480) ?x40482) ?x40484) ?x40486) ?x40488) ?x40490)))
 (= ?x40687 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x38877 (* l_0_12_141 l_0_12_141)))
 (let ((?x38875 (* l_0_12_140 l_0_12_140)))
 (let ((?x38871 (* l_0_12_139 l_0_12_139)))
 (let ((?x19965 (- (- (* (- l_0_12_137) l_0_12_137) (* l_0_12_138 l_0_12_138)) ?x38871)))
 (= (- (- ?x19965 ?x38875) ?x38877) 0.0))))))
(assert
 (>= l_0_12_1 0.0))
(assert
 (>= l_0_12_3 0.0))
(assert
 (>= l_0_12_6 0.0))
(assert
 (>= l_0_12_10 0.0))
(assert
 (>= l_0_12_15 0.0))
(assert
 (>= l_0_12_21 0.0))
(assert
 (>= l_0_12_22 0.0))
(assert
 (>= l_0_12_24 0.0))
(assert
 (>= l_0_12_27 0.0))
(assert
 (>= l_0_12_31 0.0))
(assert
 (>= l_0_12_36 0.0))
(assert
 (>= l_0_12_42 0.0))
(assert
 (>= l_0_12_43 0.0))
(assert
 (>= l_0_12_45 0.0))
(assert
 (>= l_0_12_48 0.0))
(assert
 (>= l_0_12_52 0.0))
(assert
 (>= l_0_12_57 0.0))
(assert
 (>= l_0_12_63 0.0))
(assert
 (>= l_0_12_64 0.0))
(assert
 (>= l_0_12_66 0.0))
(assert
 (>= l_0_12_69 0.0))
(assert
 (>= l_0_12_73 0.0))
(assert
 (>= l_0_12_78 0.0))
(assert
 (>= l_0_12_84 0.0))
(assert
 (>= l_0_12_85 0.0))
(assert
 (>= l_0_12_87 0.0))
(assert
 (>= l_0_12_90 0.0))
(assert
 (>= l_0_12_94 0.0))
(assert
 (>= l_0_12_99 0.0))
(assert
 (>= l_0_12_105 0.0))
(assert
 (>= l_0_12_106 0.0))
(assert
 (>= l_0_12_108 0.0))
(assert
 (>= l_0_12_111 0.0))
(assert
 (>= l_0_12_115 0.0))
(assert
 (>= l_0_12_120 0.0))
(assert
 (>= l_0_12_126 0.0))
(assert
 (>= l_0_12_127 0.0))
(assert
 (>= l_0_12_129 0.0))
(assert
 (>= l_0_12_132 0.0))
(assert
 (>= l_0_12_136 0.0))
(assert
 (>= l_0_12_141 0.0))
(assert
 (>= l_0_12_147 0.0))
(assert
 (>= l_0_12_148 0.0))
(assert
 (>= l_0_12_150 0.0))
(assert
 (>= l_0_12_153 0.0))
(assert
 (>= l_0_12_157 0.0))
(assert
 (>= l_0_12_162 0.0))
(assert
 (>= l_0_12_168 0.0))
(assert
 (>= l_0_12_169 0.0))
(assert
 (>= l_0_12_171 0.0))
(assert
 (>= l_0_12_174 0.0))
(assert
 (>= l_0_12_178 0.0))
(assert
 (>= l_0_12_183 0.0))
(assert
 (>= l_0_12_189 0.0))
(assert
 (>= l_0_12_190 0.0))
(assert
 (>= l_0_12_192 0.0))
(assert
 (>= l_0_12_195 0.0))
(assert
 (>= l_0_12_199 0.0))
(assert
 (>= l_0_12_204 0.0))
(assert
 (>= l_0_12_210 0.0))
(assert
 (>= l_0_12_211 0.0))
(assert
 (>= l_0_12_213 0.0))
(assert
 (>= l_0_12_216 0.0))
(assert
 (>= l_0_12_220 0.0))
(assert
 (>= l_0_12_225 0.0))
(assert
 (>= l_0_12_231 0.0))
(assert
 (>= l_0_12_232 0.0))
(assert
 (>= l_0_12_234 0.0))
(assert
 (>= l_0_12_237 0.0))
(assert
 (>= l_0_12_241 0.0))
(assert
 (>= l_0_12_246 0.0))
(assert
 (>= l_0_12_252 0.0))
(assert
 (>= l_0_12_253 0.0))
(assert
 (>= l_0_12_255 0.0))
(assert
 (>= l_0_12_258 0.0))
(assert
 (>= l_0_12_262 0.0))
(assert
 (>= l_0_12_267 0.0))
(assert
 (>= l_0_12_273 0.0))
(assert
 (>= l_0_12_274 0.0))
(assert
 (>= l_0_12_276 0.0))
(assert
 (>= l_0_12_279 0.0))
(assert
 (>= l_0_12_283 0.0))
(assert
 (>= l_0_12_288 0.0))
(assert
 (>= l_0_12_294 0.0))
(assert
 (>= l_0_12_295 0.0))
(assert
 (>= l_0_12_297 0.0))
(assert
 (>= l_0_12_300 0.0))
(assert
 (>= l_0_12_304 0.0))
(assert
 (>= l_0_12_309 0.0))
(assert
 (>= l_0_12_315 0.0))
(assert
 (let ((?x40795 (* l_0_13_3 l_0_13_3)))
 (let ((?x40796 (* 6.0 ?x40795)))
 (let ((?x40793 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x40790 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x40786 (* l_0_13_2 l_0_13_2)))
 (let ((?x40787 (* 6.0 ?x40786)))
 (let ((?x40784 (* l_0_13_192 l_0_13_192)))
 (let ((?x40794 (- (- (+ (- (- _a_12_ (* l_0_13_191 l_0_13_191)) ?x40784) ?x40787) ?x40790) ?x40793)))
 (let ((?x40803 (- (- (+ ?x40794 ?x40796) (* (* 1.0 l_0_13_44) l_0_13_44)) (* (* 1.0 l_0_13_45) l_0_13_45))))
 (let ((?x40809 (+ (+ ?x40803 (* 1.0 (* l_0_13_65 l_0_13_65))) (* 1.0 (* l_0_13_66 l_0_13_66)))))
 (= (- ?x40809 12.0) 0.0))))))))))))
(assert
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x40858 (* ?x40857 l_0_13_65)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x40855 (* ?x40854 l_0_13_44)))
 (let ((?x40795 (* l_0_13_3 l_0_13_3)))
 (let ((?x19977 (* l_0_13_24 l_0_13_24)))
 (let ((?x40818 (* l_0_13_23 l_0_13_23)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x40849 (* ?x40848 l_0_13_23)))
 (let ((?x40786 (* l_0_13_2 l_0_13_2)))
 (let ((?x40846 (- (+ _a_13_ (* (* 12.0 l_0_13_1) l_0_13_2)) (* (* 2.0 l_0_13_190) l_0_13_191))))
 (let ((?x40859 (+ (- (- (+ (+ (- (- ?x40846 ?x40786) ?x40849) ?x40818) ?x19977) ?x40795) ?x40855) ?x40858)))
 (= ?x40859 0.0))))))))))))))
(assert
 (let ((?x40807 (* l_0_13_66 l_0_13_66)))
 (let ((?x40930 (* 3.0 ?x40807)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x40928 (* ?x40927 l_0_13_68)))
 (let ((?x40804 (* l_0_13_65 l_0_13_65)))
 (let ((?x40925 (* 3.0 ?x40804)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x40923 (* ?x40922 l_0_13_67)))
 (let ((?x40920 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x40917 (* ?x40916 l_0_13_47)))
 (let ((?x40914 (* (* 3.0 l_0_13_44) l_0_13_44)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x40911 (* ?x40910 l_0_13_46)))
 (let ((?x40795 (* l_0_13_3 l_0_13_3)))
 (let ((?x40796 (* 6.0 ?x40795)))
 (let ((?x40906 (* 12.0 l_0_13_3)))
 (let ((?x40907 (* ?x40906 l_0_13_5)))
 (let ((?x40793 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x40903 (* ?x40902 l_0_13_26)))
 (let ((?x40790 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x40899 (* ?x40898 l_0_13_25)))
 (let ((?x40786 (* l_0_13_2 l_0_13_2)))
 (let ((?x40787 (* 6.0 ?x40786)))
 (let ((?x40894 (* 12.0 l_0_13_2)))
 (let ((?x40895 (* ?x40894 l_0_13_4)))
 (let ((?x40890 (- (+ (* l_0_13_128 l_0_13_128) (* l_0_13_129 l_0_13_129)) (* (* 2.0 l_0_13_191) l_0_13_193))))
 (let ((?x40900 (- (+ (+ (- ?x40890 (* (* 2.0 l_0_13_192) l_0_13_194)) ?x40895) ?x40787) ?x40899)))
 (let ((?x40915 (- (- (+ (+ (- (- (- ?x40900 ?x40790) ?x40903) ?x40793) ?x40907) ?x40796) ?x40911) ?x40914)))
 (let ((?x40932 (- (+ (+ (+ (+ (- (- ?x40915 ?x40917) ?x40920) ?x40923) ?x40925) ?x40928) ?x40930) 6.0)))
 (= ?x40932 0.0))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_13_1) l_0_13_1) (* l_0_13_22 l_0_13_22)) 0.0))
(assert
 (let ((?x40997 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x40991 (* l_0_13_190 l_0_13_190)))
 (let ((?x20099 (* l_0_13_1 l_0_13_1)))
 (let ((?x40989 (* 6.0 ?x20099)))
 (let ((?x40995 (+ (- (+ (* (* (- 2.0) l_0_13_1) l_0_13_2) ?x40989) ?x40991) (* (* 2.0 l_0_13_22) l_0_13_23))))
 (let ((?x41004 (+ (- (- ?x40995 ?x40997) (* (* 1.0 l_0_13_43) l_0_13_43)) (* 1.0 (* l_0_13_64 l_0_13_64)))))
 (= ?x41004 0.0))))))))
(assert
 (let ((?x41002 (* l_0_13_64 l_0_13_64)))
 (let ((?x41034 (* 3.0 ?x41002)))
 (let ((?x40997 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x41026 (* l_0_13_127 l_0_13_127)))
 (let ((?x20099 (* l_0_13_1 l_0_13_1)))
 (let ((?x40989 (* 6.0 ?x20099)))
 (let ((?x41029 (+ (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_4) ?x40989) ?x41026) (* (* 2.0 l_0_13_22) l_0_13_25))))
 (= (+ (- (- ?x41029 ?x40997) (* (* 3.0 l_0_13_43) l_0_13_43)) ?x41034) 0.0)))))))))
(assert
 (let ((?x41002 (* l_0_13_64 l_0_13_64)))
 (let ((?x41018 (* l_0_13_43 l_0_13_43)))
 (let ((?x41051 (+ (* (* (- 2.0) l_0_13_1) l_0_13_7) (* (* 2.0 l_0_13_22) l_0_13_28))))
 (= (- (+ ?x41051 ?x41018) ?x41002) 0.0)))))
(assert
 (let ((?x41070 (+ (- (* (* (- 2.0) l_0_13_1) l_0_13_11) (* l_0_13_127 l_0_13_127)) (* (* 2.0 l_0_13_22) l_0_13_32))))
 (= ?x41070 0.0)))
(assert
 (let ((?x41091 (* l_0_13_85 l_0_13_85)))
 (let ((?x41087 (* l_0_13_169 l_0_13_169)))
 (let ((?x41085 (* l_0_13_148 l_0_13_148)))
 (let ((?x41086 (- (+ (* (* (- 2.0) l_0_13_1) l_0_13_16) (* l_0_13_106 l_0_13_106)) ?x41085)))
 (= (- (+ (+ ?x41086 ?x41087) (* (* 2.0 l_0_13_22) l_0_13_37)) ?x41091) 0.0))))))
(assert
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41137 (* ?x40857 l_0_13_67)))
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41135 (* ?x41134 l_0_13_65)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41132 (* ?x40854 l_0_13_46)))
 (let ((?x41129 (* 6.0 l_0_13_43)))
 (let ((?x41130 (* ?x41129 l_0_13_44)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41118 (* ?x40848 l_0_13_25)))
 (let ((?x40849 (* ?x40848 l_0_13_23)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41110 (* ?x41109 l_0_13_128)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41107 (* ?x40841 l_0_13_4)))
 (let ((?x40842 (* ?x40841 l_0_13_2)))
 (let ((?x41116 (- (- (+ (+ ?x40842 ?x41107) ?x41110) (* (* 2.0 l_0_13_190) l_0_13_193)) (* (* 2.0 l_0_13_2) l_0_13_4))))
 (let ((?x41125 (+ (+ (- (- ?x41116 ?x40849) ?x41118) (* (* 2.0 l_0_13_23) l_0_13_25)) (* (* 2.0 l_0_13_24) l_0_13_26))))
 (let ((?x41136 (+ (- (- (- ?x41125 (* (* 2.0 l_0_13_3) l_0_13_5)) ?x41130) ?x41132) ?x41135)))
 (= (+ ?x41136 ?x41137) 0.0)))))))))))))))))))))
(assert
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41189 (* ?x40857 l_0_13_70)))
 (let ((?x40858 (* ?x40857 l_0_13_65)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41186 (* ?x40854 l_0_13_49)))
 (let ((?x40855 (* ?x40854 l_0_13_44)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41177 (* ?x40848 l_0_13_28)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41172 (* ?x40841 l_0_13_7)))
 (let ((?x41176 (- (- ?x41172 (* (* 2.0 l_0_13_190) l_0_13_196)) (* (* 2.0 l_0_13_2) l_0_13_7))))
 (let ((?x41182 (+ (+ (- ?x41176 ?x41177) (* (* 2.0 l_0_13_23) l_0_13_28)) (* (* 2.0 l_0_13_24) l_0_13_29))))
 (let ((?x41188 (- (- (+ (- ?x41182 (* (* 2.0 l_0_13_3) l_0_13_8)) ?x40855) ?x41186) ?x40858)))
 (= (+ ?x41188 ?x41189) 0.0)))))))))))))))
(assert
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41246 (* ?x40857 l_0_13_74)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41244 (* ?x40854 l_0_13_53)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41238 (* ?x40848 l_0_13_32)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41110 (* ?x41109 l_0_13_128)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41222 (* ?x40841 l_0_13_11)))
 (let ((?x41234 (- (- ?x41222 (* (* 2.0 l_0_13_11) l_0_13_2)) (* (* 2.0 l_0_13_12) l_0_13_3))))
 (let ((?x41241 (+ (- (- (- ?x41234 ?x41110) (* (* 2.0 l_0_13_190) l_0_13_200)) ?x41238) (* (* 2.0 l_0_13_23) l_0_13_32))))
 (= (+ (- (+ ?x41241 (* (* 2.0 l_0_13_24) l_0_13_33)) ?x41244) ?x41246) 0.0))))))))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41297 (* ?x41296 l_0_13_86)))
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41294 (* ?x40857 l_0_13_79)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41292 (* ?x40854 l_0_13_58)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41286 (* ?x40848 l_0_13_37)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41279 (* ?x41278 l_0_13_170)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41273 (* ?x41272 l_0_13_149)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41268 (* ?x40841 l_0_13_16)))
 (let ((?x41277 (- (- (+ ?x41268 (* (* 2.0 l_0_13_106) l_0_13_107)) ?x41273) (* (* 2.0 l_0_13_16) l_0_13_2))))
 (let ((?x41285 (- (- (+ ?x41277 ?x41279) (* (* 2.0 l_0_13_17) l_0_13_3)) (* (* 2.0 l_0_13_190) l_0_13_205))))
 (let ((?x41291 (+ (+ (- ?x41285 ?x41286) (* (* 2.0 l_0_13_23) l_0_13_37)) (* (* 2.0 l_0_13_24) l_0_13_38))))
 (= (- (+ (- ?x41291 ?x41292) ?x41294) ?x41297) 0.0)))))))))))))))))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41354 (* ?x41134 l_0_13_67)))
 (let ((?x41135 (* ?x41134 l_0_13_65)))
 (let ((?x41351 (* l_0_13_6 l_0_13_6)))
 (let ((?x41349 (* l_0_13_5 l_0_13_5)))
 (let ((?x41129 (* 6.0 l_0_13_43)))
 (let ((?x41347 (* ?x41129 l_0_13_46)))
 (let ((?x41130 (* ?x41129 l_0_13_44)))
 (let ((?x41344 (* l_0_13_4 l_0_13_4)))
 (let ((?x41342 (* l_0_13_27 l_0_13_27)))
 (let ((?x41340 (* l_0_13_26 l_0_13_26)))
 (let ((?x41338 (* l_0_13_25 l_0_13_25)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41118 (* ?x40848 l_0_13_25)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41335 (* ?x41109 l_0_13_130)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41107 (* ?x40841 l_0_13_4)))
 (let ((?x41346 (- (- (+ (+ (+ (- (+ ?x41107 ?x41335) ?x41118) ?x41338) ?x41340) ?x41342) ?x41344) ?x41130)))
 (= (+ (+ (- (- (- ?x41346 ?x41347) ?x41349) ?x41351) ?x41135) ?x41354) 0.0)))))))))))))))))))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41391 (* ?x41134 l_0_13_70)))
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41137 (* ?x40857 l_0_13_67)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41132 (* ?x40854 l_0_13_46)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41177 (* ?x40848 l_0_13_28)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x30908 (* ?x41109 l_0_13_133)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41172 (* ?x40841 l_0_13_7)))
 (let ((?x41374 (+ (+ (- (+ ?x41172 ?x30908) ?x41177) (* (* 2.0 l_0_13_25) l_0_13_28)) (* (* 2.0 l_0_13_26) l_0_13_29))))
 (let ((?x41380 (- (+ ?x41374 (* (* 2.0 l_0_13_27) l_0_13_30)) (* (* 2.0 l_0_13_4) l_0_13_7))))
 (let ((?x41386 (- (- (+ ?x41380 ?x41132) (* (* 6.0 l_0_13_43) l_0_13_49)) (* (* 2.0 l_0_13_5) l_0_13_8))))
 (= (+ (- (- ?x41386 (* (* 2.0 l_0_13_6) l_0_13_9)) ?x41137) ?x41391) 0.0)))))))))))))))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41436 (* ?x41134 l_0_13_74)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41238 (* ?x40848 l_0_13_32)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41422 (* ?x41109 l_0_13_137)))
 (let ((?x41335 (* ?x41109 l_0_13_130)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41222 (* ?x40841 l_0_13_11)))
 (let ((?x41420 (- (- ?x41222 (* (* 2.0 l_0_13_11) l_0_13_4)) (* (* 2.0 l_0_13_12) l_0_13_5))))
 (let ((?x41427 (- (- (+ (- ?x41420 ?x41335) ?x41422) (* (* 2.0 l_0_13_13) l_0_13_6)) ?x41238)))
 (let ((?x41431 (+ (+ ?x41427 (* (* 2.0 l_0_13_25) l_0_13_32)) (* (* 2.0 l_0_13_26) l_0_13_33))))
 (let ((?x41435 (- (+ ?x41431 (* (* 2.0 l_0_13_27) l_0_13_34)) (* (* 6.0 l_0_13_43) l_0_13_53))))
 (= (+ ?x41435 ?x41436) 0.0)))))))))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41490 (* ?x41296 l_0_13_88)))
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41488 (* ?x41134 l_0_13_79)))
 (let ((?x40848 (* 12.0 l_0_13_22)))
 (let ((?x41286 (* ?x40848 l_0_13_37)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41472 (* ?x41278 l_0_13_172)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41468 (* ?x41272 l_0_13_151)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41466 (* ?x41109 l_0_13_142)))
 (let ((?x40841 (* 12.0 l_0_13_1)))
 (let ((?x41268 (* ?x40841 l_0_13_16)))
 (let ((?x41471 (- (- (+ (+ ?x41268 (* (* 2.0 l_0_13_106) l_0_13_109)) ?x41466) ?x41468) (* (* 2.0 l_0_13_16) l_0_13_4))))
 (let ((?x41478 (- (- (+ ?x41471 ?x41472) (* (* 2.0 l_0_13_17) l_0_13_5)) (* (* 2.0 l_0_13_18) l_0_13_6))))
 (let ((?x41483 (+ (+ (- ?x41478 ?x41286) (* (* 2.0 l_0_13_25) l_0_13_37)) (* (* 2.0 l_0_13_26) l_0_13_38))))
 (let ((?x41487 (- (+ ?x41483 (* (* 2.0 l_0_13_27) l_0_13_39)) (* (* 6.0 l_0_13_43) l_0_13_58))))
 (= (- (+ ?x41487 ?x41488) ?x41490) 0.0))))))))))))))))))))
(assert
 (let ((?x41546 (* l_0_13_9 l_0_13_9)))
 (let ((?x41544 (* l_0_13_8 l_0_13_8)))
 (let ((?x41542 (* l_0_13_7 l_0_13_7)))
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41189 (* ?x40857 l_0_13_70)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41186 (* ?x40854 l_0_13_49)))
 (let ((?x41538 (* l_0_13_31 l_0_13_31)))
 (let ((?x41536 (* l_0_13_30 l_0_13_30)))
 (let ((?x41534 (* l_0_13_29 l_0_13_29)))
 (let ((?x41535 (+ (+ (* (- l_0_13_10) l_0_13_10) (* l_0_13_28 l_0_13_28)) ?x41534)))
 (let ((?x41547 (- (- (- (- (+ (+ (+ ?x41535 ?x41536) ?x41538) ?x41186) ?x41189) ?x41542) ?x41544) ?x41546)))
 (= ?x41547 0.0))))))))))))))
(assert
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41246 (* ?x40857 l_0_13_74)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41244 (* ?x40854 l_0_13_53)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x30908 (* ?x41109 l_0_13_133)))
 (let ((?x41563 (- (* (* (- 2.0) l_0_13_10) l_0_13_14) (* (* 2.0 l_0_13_11) l_0_13_7))))
 (let ((?x41568 (- (- (- ?x41563 (* (* 2.0 l_0_13_12) l_0_13_8)) ?x30908) (* (* 2.0 l_0_13_13) l_0_13_9))))
 (let ((?x41574 (+ (+ ?x41568 (* (* 2.0 l_0_13_28) l_0_13_32)) (* (* 2.0 l_0_13_29) l_0_13_33))))
 (let ((?x41580 (+ (+ ?x41574 (* (* 2.0 l_0_13_30) l_0_13_34)) (* (* 2.0 l_0_13_31) l_0_13_35))))
 (= (- (+ ?x41580 ?x41244) ?x41246) 0.0))))))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41627 (* ?x41296 l_0_13_91)))
 (let ((?x40857 (* 2.0 l_0_13_64)))
 (let ((?x41294 (* ?x40857 l_0_13_79)))
 (let ((?x40854 (* 2.0 l_0_13_43)))
 (let ((?x41292 (* ?x40854 l_0_13_58)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41611 (* ?x41278 l_0_13_175)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41607 (* ?x41272 l_0_13_154)))
 (let ((?x31074 (+ (* (* (- 2.0) l_0_13_10) l_0_13_19) (* (* 2.0 l_0_13_106) l_0_13_112))))
 (let ((?x41614 (- (+ (- (- ?x31074 ?x41607) (* (* 2.0 l_0_13_16) l_0_13_7)) ?x41611) (* (* 2.0 l_0_13_17) l_0_13_8))))
 (let ((?x41618 (+ (- ?x41614 (* (* 2.0 l_0_13_18) l_0_13_9)) (* (* 2.0 l_0_13_28) l_0_13_37))))
 (let ((?x41622 (+ (+ ?x41618 (* (* 2.0 l_0_13_29) l_0_13_38)) (* (* 2.0 l_0_13_30) l_0_13_39))))
 (let ((?x41628 (- (- (+ (+ ?x41622 (* (* 2.0 l_0_13_31) l_0_13_40)) ?x41292) ?x41294) ?x41627)))
 (= ?x41628 0.0)))))))))))))))))
(assert
 (let ((?x41684 (* l_0_13_36 l_0_13_36)))
 (let ((?x41682 (* l_0_13_35 l_0_13_35)))
 (let ((?x41680 (* l_0_13_34 l_0_13_34)))
 (let ((?x41678 (* l_0_13_33 l_0_13_33)))
 (let ((?x41676 (* l_0_13_32 l_0_13_32)))
 (let ((?x41674 (* l_0_13_15 l_0_13_15)))
 (let ((?x41672 (* l_0_13_14 l_0_13_14)))
 (let ((?x41670 (* l_0_13_13 l_0_13_13)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41422 (* ?x41109 l_0_13_137)))
 (let ((?x41669 (- (- (* (- l_0_13_11) l_0_13_11) (* l_0_13_12 l_0_13_12)) ?x41422)))
 (let ((?x41683 (+ (+ (+ (+ (- (- (- ?x41669 ?x41670) ?x41672) ?x41674) ?x41676) ?x41678) ?x41680) ?x41682)))
 (= (+ ?x41683 ?x41684) 0.0))))))))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41732 (* ?x41296 l_0_13_95)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41715 (* ?x41278 l_0_13_179)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41710 (* ?x41272 l_0_13_158)))
 (let ((?x41109 (* 2.0 l_0_13_127)))
 (let ((?x41466 (* ?x41109 l_0_13_142)))
 (let ((?x41701 (- (* (* 2.0 l_0_13_106) l_0_13_116) (* (* 2.0 l_0_13_11) l_0_13_16))))
 (let ((?x41706 (- (- (- ?x41701 (* (* 2.0 l_0_13_12) l_0_13_17)) ?x41466) (* (* 2.0 l_0_13_13) l_0_13_18))))
 (let ((?x41714 (- (- (- ?x41706 (* (* 2.0 l_0_13_14) l_0_13_19)) ?x41710) (* (* 2.0 l_0_13_15) l_0_13_20))))
 (let ((?x41722 (+ (+ (+ ?x41714 ?x41715) (* (* 2.0 l_0_13_32) l_0_13_37)) (* (* 2.0 l_0_13_33) l_0_13_38))))
 (let ((?x41728 (+ (+ ?x41722 (* (* 2.0 l_0_13_34) l_0_13_39)) (* (* 2.0 l_0_13_35) l_0_13_40))))
 (= (- (+ ?x41728 (* (* 2.0 l_0_13_36) l_0_13_41)) ?x41732) 0.0)))))))))))))))
(assert
 (let ((?x41799 (* l_0_13_42 l_0_13_42)))
 (let ((?x41797 (* l_0_13_41 l_0_13_41)))
 (let ((?x41795 (* l_0_13_40 l_0_13_40)))
 (let ((?x41793 (* l_0_13_39 l_0_13_39)))
 (let ((?x41791 (* l_0_13_38 l_0_13_38)))
 (let ((?x41789 (* l_0_13_37 l_0_13_37)))
 (let ((?x41787 (* l_0_13_21 l_0_13_21)))
 (let ((?x41785 (* l_0_13_20 l_0_13_20)))
 (let ((?x41783 (* l_0_13_19 l_0_13_19)))
 (let ((?x41781 (* l_0_13_18 l_0_13_18)))
 (let ((?x41779 (* l_0_13_17 l_0_13_17)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41777 (* ?x41278 l_0_13_184)))
 (let ((?x41775 (* l_0_13_16 l_0_13_16)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41773 (* ?x41272 l_0_13_163)))
 (let ((?x41269 (* 2.0 l_0_13_106)))
 (let ((?x41771 (* ?x41269 l_0_13_121)))
 (let ((?x41778 (+ (- (- (+ (* (* (- 2.0) l_0_13_100) l_0_13_85) ?x41771) ?x41773) ?x41775) ?x41777)))
 (let ((?x41792 (+ (+ (- (- (- (- (- ?x41778 ?x41779) ?x41781) ?x41783) ?x41785) ?x41787) ?x41789) ?x41791)))
 (= (+ (+ (+ (+ ?x41792 ?x41793) ?x41795) ?x41797) ?x41799) 0.0))))))))))))))))))))))
(assert
 (let ((?x40807 (* l_0_13_66 l_0_13_66)))
 (let ((?x40930 (* 3.0 ?x40807)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x41874 (* ?x41873 l_0_13_68)))
 (let ((?x40804 (* l_0_13_65 l_0_13_65)))
 (let ((?x40925 (* 3.0 ?x40804)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x41870 (* ?x41869 l_0_13_67)))
 (let ((?x41351 (* l_0_13_6 l_0_13_6)))
 (let ((?x41867 (* 6.0 ?x41351)))
 (let ((?x41349 (* l_0_13_5 l_0_13_5)))
 (let ((?x41865 (* 6.0 ?x41349)))
 (let ((?x40920 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x41853 (* ?x41852 l_0_13_47)))
 (let ((?x40914 (* (* 3.0 l_0_13_44) l_0_13_44)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x41849 (* ?x41848 l_0_13_46)))
 (let ((?x41344 (* l_0_13_4 l_0_13_4)))
 (let ((?x41846 (* 6.0 ?x41344)))
 (let ((?x40906 (* 12.0 l_0_13_3)))
 (let ((?x40907 (* ?x40906 l_0_13_5)))
 (let ((?x41843 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x41840 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x41837 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x40903 (* ?x40902 l_0_13_26)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x40899 (* ?x40898 l_0_13_25)))
 (let ((?x40894 (* 12.0 l_0_13_2)))
 (let ((?x40895 (* ?x40894 l_0_13_4)))
 (let ((?x41831 (* l_0_13_195 l_0_13_195)))
 (let ((?x41829 (* l_0_13_194 l_0_13_194)))
 (let ((?x41827 (* l_0_13_193 l_0_13_193)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x41825 (* ?x41824 l_0_13_131)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x41823 (* ?x41822 l_0_13_130)))
 (let ((?x41835 (- (- (+ (- (- (- (+ ?x41823 ?x41825) ?x41827) ?x41829) ?x41831) ?x40895) ?x40899) ?x40903)))
 (let ((?x41851 (- (- (+ (+ (- (- (- ?x41835 ?x41837) ?x41840) ?x41843) ?x40907) ?x41846) ?x41849) ?x40914)))
 (let ((?x41861 (- (- (- (- ?x41851 ?x41853) ?x40920) (* (* 1.0 l_0_13_46) l_0_13_46)) (* (* 1.0 l_0_13_47) l_0_13_47))))
 (let ((?x41871 (+ (+ (+ (- ?x41861 (* (* 1.0 l_0_13_48) l_0_13_48)) ?x41865) ?x41867) ?x41870)))
 (let ((?x41879 (+ (+ (+ (+ ?x41871 ?x40925) ?x41874) ?x40930) (* 1.0 (* l_0_13_67 l_0_13_67)))))
 (let ((?x41885 (+ (+ ?x41879 (* 1.0 (* l_0_13_68 l_0_13_68))) (* 1.0 (* l_0_13_69 l_0_13_69)))))
 (= ?x41885 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x41984 (* ?x41983 l_0_13_72)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x41981 (* ?x41980 l_0_13_71)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x41978 (* ?x41977 l_0_13_70)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x41975 (* ?x41873 l_0_13_71)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x40928 (* ?x40927 l_0_13_68)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x41972 (* ?x41869 l_0_13_70)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x40923 (* ?x40922 l_0_13_67)))
 (let ((?x41969 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x41966 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x41963 (* ?x41962 l_0_13_51)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x41960 (* ?x41959 l_0_13_50)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x41957 (* ?x41956 l_0_13_49)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x41954 (* ?x41852 l_0_13_50)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x40917 (* ?x40916 l_0_13_47)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x41951 (* ?x41848 l_0_13_49)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x40911 (* ?x40910 l_0_13_46)))
 (let ((?x41948 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x40906 (* 12.0 l_0_13_3)))
 (let ((?x41945 (* ?x40906 l_0_13_8)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x41943 (* ?x41942 l_0_13_30)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x41940 (* ?x41939 l_0_13_29)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x41937 (* ?x41936 l_0_13_28)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x41934 (* ?x40902 l_0_13_29)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x41932 (* ?x40898 l_0_13_28)))
 (let ((?x40894 (* 12.0 l_0_13_2)))
 (let ((?x41930 (* ?x40894 l_0_13_7)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x20760 (* ?x41824 l_0_13_134)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x20666 (* ?x41822 l_0_13_133)))
 (let ((?x41926 (- (- (+ ?x20666 ?x20760) (* (* 2.0 l_0_13_193) l_0_13_196)) (* (* 2.0 l_0_13_194) l_0_13_197))))
 (let ((?x41935 (- (- (+ (- ?x41926 (* (* 2.0 l_0_13_195) l_0_13_198)) ?x41930) ?x41932) ?x41934)))
 (let ((?x41952 (- (+ (+ (+ (- (- (- ?x41935 ?x41937) ?x41940) ?x41943) ?x41945) ?x41948) ?x40911) ?x41951)))
 (let ((?x41970 (+ (+ (- (- (- (- (+ ?x41952 ?x40917) ?x41954) ?x41957) ?x41960) ?x41963) ?x41966) ?x41969)))
 (let ((?x41985 (+ (+ (+ (+ (- (+ (- ?x41970 ?x40923) ?x41972) ?x40928) ?x41975) ?x41978) ?x41981) ?x41984)))
 (= ?x41985 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x42076 (* ?x41983 l_0_13_76)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x42074 (* ?x41980 l_0_13_75)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x42072 (* ?x41977 l_0_13_74)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x42070 (* ?x41873 l_0_13_75)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x42068 (* ?x41869 l_0_13_74)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x42066 (* ?x41962 l_0_13_55)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x42064 (* ?x41959 l_0_13_54)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x42062 (* ?x41956 l_0_13_53)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x42060 (* ?x41852 l_0_13_54)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x42058 (* ?x41848 l_0_13_53)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x42056 (* ?x41942 l_0_13_34)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x42054 (* ?x41939 l_0_13_33)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x42052 (* ?x41936 l_0_13_32)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x42050 (* ?x40902 l_0_13_33)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x42048 (* ?x40898 l_0_13_32)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x42040 (* ?x42039 l_0_13_6)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x42037 (* ?x41824 l_0_13_138)))
 (let ((?x41825 (* ?x41824 l_0_13_131)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x42034 (* ?x41822 l_0_13_137)))
 (let ((?x41823 (* ?x41822 l_0_13_130)))
 (let ((?x42028 (* 12.0 l_0_13_12)))
 (let ((?x42031 (* ?x42028 l_0_13_5)))
 (let ((?x42029 (* ?x42028 l_0_13_3)))
 (let ((?x42024 (* 12.0 l_0_13_11)))
 (let ((?x42026 (* ?x42024 l_0_13_4)))
 (let ((?x42025 (* ?x42024 l_0_13_2)))
 (let ((?x42038 (+ (- (+ (- (+ (+ (+ ?x42025 ?x42026) ?x42029) ?x42031) ?x41823) ?x42034) ?x41825) ?x42037)))
 (let ((?x42045 (- (- (+ ?x42038 ?x42040) (* (* 2.0 l_0_13_193) l_0_13_200)) (* (* 2.0 l_0_13_194) l_0_13_201))))
 (let ((?x42053 (- (- (- (- ?x42045 (* (* 2.0 l_0_13_195) l_0_13_202)) ?x42048) ?x42050) ?x42052)))
 (let ((?x42067 (- (- (- (- (- (- (- ?x42053 ?x42054) ?x42056) ?x42058) ?x42060) ?x42062) ?x42064) ?x42066)))
 (= (+ (+ (+ (+ (+ ?x42067 ?x42068) ?x42070) ?x42072) ?x42074) ?x42076) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x42193 (* ?x42192 l_0_13_89)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x42190 (* ?x42189 l_0_13_88)))
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x42187 (* ?x41983 l_0_13_81)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x42185 (* ?x41980 l_0_13_80)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x42183 (* ?x41977 l_0_13_79)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x42181 (* ?x41873 l_0_13_80)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x42179 (* ?x41869 l_0_13_79)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x42177 (* ?x41962 l_0_13_60)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x42175 (* ?x41959 l_0_13_59)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x42173 (* ?x41956 l_0_13_58)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x42171 (* ?x41852 l_0_13_59)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x42169 (* ?x41848 l_0_13_58)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x42167 (* ?x41942 l_0_13_39)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x42165 (* ?x41939 l_0_13_38)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x42163 (* ?x41936 l_0_13_37)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x42161 (* ?x40902 l_0_13_38)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x42159 (* ?x40898 l_0_13_37)))
 (let ((?x42150 (* 12.0 l_0_13_18)))
 (let ((?x42151 (* ?x42150 l_0_13_6)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x42148 (* ?x42147 l_0_13_173)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x42145 (* ?x42144 l_0_13_172)))
 (let ((?x42139 (* 12.0 l_0_13_17)))
 (let ((?x42142 (* ?x42139 l_0_13_5)))
 (let ((?x42140 (* ?x42139 l_0_13_3)))
 (let ((?x42134 (* 12.0 l_0_13_16)))
 (let ((?x42137 (* ?x42134 l_0_13_4)))
 (let ((?x42135 (* ?x42134 l_0_13_2)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x42132 (* ?x42131 l_0_13_152)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x42129 (* ?x42128 l_0_13_151)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x42126 (* ?x41824 l_0_13_143)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x42124 (* ?x41822 l_0_13_142)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x42122 (* ?x42121 l_0_13_110)))
 (let ((?x42130 (- (+ (+ (+ (* (* 2.0 l_0_13_107) l_0_13_109) ?x42122) ?x42124) ?x42126) ?x42129)))
 (let ((?x42149 (+ (+ (+ (+ (+ (+ (- ?x42130 ?x42132) ?x42135) ?x42137) ?x42140) ?x42142) ?x42145) ?x42148)))
 (let ((?x42156 (- (- (+ ?x42149 ?x42151) (* (* 2.0 l_0_13_193) l_0_13_205)) (* (* 2.0 l_0_13_194) l_0_13_206))))
 (let ((?x42164 (- (- (- (- ?x42156 (* (* 2.0 l_0_13_195) l_0_13_207)) ?x42159) ?x42161) ?x42163)))
 (let ((?x42178 (- (- (- (- (- (- (- ?x42164 ?x42165) ?x42167) ?x42169) ?x42171) ?x42173) ?x42175) ?x42177)))
 (let ((?x42194 (- (- (+ (+ (+ (+ (+ ?x42178 ?x42179) ?x42181) ?x42183) ?x42185) ?x42187) ?x42190) ?x42193)))
 (= ?x42194 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42334 (* l_0_13_87 l_0_13_87)))
 (let ((?x42332 (* l_0_13_86 l_0_13_86)))
 (let ((?x41883 (* l_0_13_69 l_0_13_69)))
 (let ((?x42330 (* 3.0 ?x41883)))
 (let ((?x41880 (* l_0_13_68 l_0_13_68)))
 (let ((?x42328 (* 3.0 ?x41880)))
 (let ((?x41877 (* l_0_13_67 l_0_13_67)))
 (let ((?x42326 (* 3.0 ?x41877)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x41874 (* ?x41873 l_0_13_68)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x41870 (* ?x41869 l_0_13_67)))
 (let ((?x41351 (* l_0_13_6 l_0_13_6)))
 (let ((?x41867 (* 6.0 ?x41351)))
 (let ((?x41349 (* l_0_13_5 l_0_13_5)))
 (let ((?x41865 (* 6.0 ?x41349)))
 (let ((?x42320 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42317 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x42314 (* (* 3.0 l_0_13_46) l_0_13_46)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x41853 (* ?x41852 l_0_13_47)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x41849 (* ?x41848 l_0_13_46)))
 (let ((?x41344 (* l_0_13_4 l_0_13_4)))
 (let ((?x41846 (* 6.0 ?x41344)))
 (let ((?x41843 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x41840 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x41837 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x42305 (* l_0_13_171 l_0_13_171)))
 (let ((?x42303 (* l_0_13_170 l_0_13_170)))
 (let ((?x42301 (* l_0_13_150 l_0_13_150)))
 (let ((?x42299 (* l_0_13_149 l_0_13_149)))
 (let ((?x42297 (* l_0_13_132 l_0_13_132)))
 (let ((?x42295 (* l_0_13_131 l_0_13_131)))
 (let ((?x42293 (* l_0_13_130 l_0_13_130)))
 (let ((?x42294 (+ (- (* (- l_0_13_107) l_0_13_107) (* l_0_13_108 l_0_13_108)) ?x42293)))
 (let ((?x42307 (- (- (- (+ (+ (+ (+ ?x42294 ?x42295) ?x42297) ?x42299) ?x42301) ?x42303) ?x42305) ?x41837)))
 (let ((?x42318 (- (- (- (- (+ (- (- ?x42307 ?x41840) ?x41843) ?x41846) ?x41849) ?x41853) ?x42314) ?x42317)))
 (let ((?x42329 (+ (+ (+ (+ (+ (+ (- ?x42318 ?x42320) ?x41865) ?x41867) ?x41870) ?x41874) ?x42326) ?x42328)))
 (= (+ (+ (+ ?x42329 ?x42330) ?x42332) ?x42334) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41883 (* l_0_13_69 l_0_13_69)))
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42393 (* ?x42392 l_0_13_72)))
 (let ((?x41880 (* l_0_13_68 l_0_13_68)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42389 (* ?x42388 l_0_13_71)))
 (let ((?x41877 (* l_0_13_67 l_0_13_67)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42385 (* ?x42384 l_0_13_70)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x41975 (* ?x41873 l_0_13_71)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x41972 (* ?x41869 l_0_13_70)))
 (let ((?x41969 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x41966 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x20757 (* l_0_13_48 l_0_13_48)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42377 (* ?x42376 l_0_13_51)))
 (let ((?x41908 (* l_0_13_47 l_0_13_47)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42373 (* ?x42372 l_0_13_50)))
 (let ((?x20608 (* l_0_13_46 l_0_13_46)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42369 (* ?x42368 l_0_13_49)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x41954 (* ?x41852 l_0_13_50)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x41951 (* ?x41848 l_0_13_49)))
 (let ((?x41948 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x41943 (* ?x41942 l_0_13_30)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x41940 (* ?x41939 l_0_13_29)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x41937 (* ?x41936 l_0_13_28)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42360 (* ?x42359 l_0_13_135)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42357 (* ?x42356 l_0_13_134)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42355 (* ?x18475 l_0_13_133)))
 (let ((?x42366 (- (+ (- (- (- (+ (+ ?x42355 ?x42357) ?x42360) ?x41937) ?x41940) ?x41943) ?x41948) ?x41951)))
 (let ((?x42379 (+ (- (+ (- (+ (- (- ?x42366 ?x41954) ?x42369) ?x20608) ?x42373) ?x41908) ?x42377) ?x20757)))
 (let ((?x42390 (+ (- (+ (+ (+ (+ (+ ?x42379 ?x41966) ?x41969) ?x41972) ?x41975) ?x42385) ?x41877) ?x42389)))
 (= (- (+ (- ?x42390 ?x41880) ?x42393) ?x41883) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42452 (* ?x42392 l_0_13_76)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42450 (* ?x42388 l_0_13_75)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42448 (* ?x42384 l_0_13_74)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x42070 (* ?x41873 l_0_13_75)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x42068 (* ?x41869 l_0_13_74)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42444 (* ?x42376 l_0_13_55)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42442 (* ?x42372 l_0_13_54)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42440 (* ?x42368 l_0_13_53)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x42060 (* ?x41852 l_0_13_54)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x42058 (* ?x41848 l_0_13_53)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x42056 (* ?x41942 l_0_13_34)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x42054 (* ?x41939 l_0_13_33)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x42052 (* ?x41936 l_0_13_32)))
 (let ((?x42297 (* l_0_13_132 l_0_13_132)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42432 (* ?x42359 l_0_13_139)))
 (let ((?x42295 (* l_0_13_131 l_0_13_131)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42429 (* ?x42356 l_0_13_138)))
 (let ((?x42293 (* l_0_13_130 l_0_13_130)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42426 (* ?x18475 l_0_13_137)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x42040 (* ?x42039 l_0_13_6)))
 (let ((?x42028 (* 12.0 l_0_13_12)))
 (let ((?x42031 (* ?x42028 l_0_13_5)))
 (let ((?x42024 (* 12.0 l_0_13_11)))
 (let ((?x42026 (* ?x42024 l_0_13_4)))
 (let ((?x42433 (+ (- (+ (- (+ (+ (+ ?x42026 ?x42031) ?x42040) ?x42426) ?x42293) ?x42429) ?x42295) ?x42432)))
 (let ((?x42441 (- (- (- (- (- (- (- ?x42433 ?x42297) ?x42052) ?x42054) ?x42056) ?x42058) ?x42060) ?x42440)))
 (let ((?x42453 (+ (+ (+ (+ (+ (- (- ?x42441 ?x42442) ?x42444) ?x42068) ?x42070) ?x42448) ?x42450) ?x42452)))
 (= ?x42453 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42504 (* l_0_13_90 l_0_13_90)))
 (let ((?x42502 (* l_0_13_89 l_0_13_89)))
 (let ((?x42500 (* l_0_13_88 l_0_13_88)))
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42498 (* ?x42392 l_0_13_81)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42496 (* ?x42388 l_0_13_80)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42494 (* ?x42384 l_0_13_79)))
 (let ((?x41873 (* 6.0 l_0_13_66)))
 (let ((?x42181 (* ?x41873 l_0_13_80)))
 (let ((?x41869 (* 6.0 l_0_13_65)))
 (let ((?x42179 (* ?x41869 l_0_13_79)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42490 (* ?x42376 l_0_13_60)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42488 (* ?x42372 l_0_13_59)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42486 (* ?x42368 l_0_13_58)))
 (let ((?x41852 (* 6.0 l_0_13_45)))
 (let ((?x42171 (* ?x41852 l_0_13_59)))
 (let ((?x41848 (* 6.0 l_0_13_44)))
 (let ((?x42169 (* ?x41848 l_0_13_58)))
 (let ((?x41942 (* 12.0 l_0_13_27)))
 (let ((?x42167 (* ?x41942 l_0_13_39)))
 (let ((?x41939 (* 12.0 l_0_13_26)))
 (let ((?x42165 (* ?x41939 l_0_13_38)))
 (let ((?x41936 (* 12.0 l_0_13_25)))
 (let ((?x42163 (* ?x41936 l_0_13_37)))
 (let ((?x42150 (* 12.0 l_0_13_18)))
 (let ((?x42151 (* ?x42150 l_0_13_6)))
 (let ((?x42478 (* l_0_13_174 l_0_13_174)))
 (let ((?x42476 (* l_0_13_173 l_0_13_173)))
 (let ((?x42474 (* l_0_13_172 l_0_13_172)))
 (let ((?x42139 (* 12.0 l_0_13_17)))
 (let ((?x42142 (* ?x42139 l_0_13_5)))
 (let ((?x42134 (* 12.0 l_0_13_16)))
 (let ((?x42137 (* ?x42134 l_0_13_4)))
 (let ((?x42470 (* l_0_13_153 l_0_13_153)))
 (let ((?x42468 (* l_0_13_152 l_0_13_152)))
 (let ((?x42466 (* l_0_13_151 l_0_13_151)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42464 (* ?x42359 l_0_13_144)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42462 (* ?x42356 l_0_13_143)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42460 (* ?x18475 l_0_13_142)))
 (let ((?x42458 (* l_0_13_111 l_0_13_111)))
 (let ((?x42459 (+ (+ (* l_0_13_109 l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x42458)))
 (let ((?x42472 (+ (- (- (- (+ (+ (+ ?x42459 ?x42460) ?x42462) ?x42464) ?x42466) ?x42468) ?x42470) ?x42137)))
 (let ((?x42482 (- (- (+ (+ (+ (+ (+ ?x42472 ?x42142) ?x42474) ?x42476) ?x42478) ?x42151) ?x42163) ?x42165)))
 (let ((?x42492 (+ (- (- (- (- (- (- ?x42482 ?x42167) ?x42169) ?x42171) ?x42486) ?x42488) ?x42490) ?x42179)))
 (let ((?x42505 (- (- (- (+ (+ (+ (+ ?x42492 ?x42181) ?x42494) ?x42496) ?x42498) ?x42500) ?x42502) ?x42504)))
 (= ?x42505 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41546 (* l_0_13_9 l_0_13_9)))
 (let ((?x42603 (* 6.0 ?x41546)))
 (let ((?x41544 (* l_0_13_8 l_0_13_8)))
 (let ((?x42601 (* 6.0 ?x41544)))
 (let ((?x42598 (* l_0_13_73 l_0_13_73)))
 (let ((?x42599 (* 3.0 ?x42598)))
 (let ((?x42595 (* l_0_13_72 l_0_13_72)))
 (let ((?x42596 (* 3.0 ?x42595)))
 (let ((?x42592 (* l_0_13_71 l_0_13_71)))
 (let ((?x42593 (* 3.0 ?x42592)))
 (let ((?x42589 (* l_0_13_70 l_0_13_70)))
 (let ((?x42590 (* 3.0 ?x42589)))
 (let ((?x41542 (* l_0_13_7 l_0_13_7)))
 (let ((?x42587 (* 6.0 ?x41542)))
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x41984 (* ?x41983 l_0_13_72)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x41981 (* ?x41980 l_0_13_71)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x41978 (* ?x41977 l_0_13_70)))
 (let ((?x42582 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x42579 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x42576 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x41963 (* ?x41962 l_0_13_51)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x41960 (* ?x41959 l_0_13_50)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x41957 (* ?x41956 l_0_13_49)))
 (let ((?x42567 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x42564 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x42561 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x42558 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x42555 (* l_0_13_136 l_0_13_136)))
 (let ((?x42553 (* l_0_13_135 l_0_13_135)))
 (let ((?x42551 (* l_0_13_134 l_0_13_134)))
 (let ((?x42549 (* l_0_13_133 l_0_13_133)))
 (let ((?x41550 (* l_0_13_10 l_0_13_10)))
 (let ((?x42548 (* 6.0 ?x41550)))
 (let ((?x42565 (- (- (- (+ (+ (+ (+ ?x42548 ?x42549) ?x42551) ?x42553) ?x42555) ?x42558) ?x42561) ?x42564)))
 (let ((?x42574 (- (+ (+ (+ (- ?x42565 ?x42567) ?x41957) ?x41960) ?x41963) (* (* 3.0 l_0_13_49) l_0_13_49))))
 (let ((?x42588 (+ (- (- (- (- (- (- ?x42574 ?x42576) ?x42579) ?x42582) ?x41978) ?x41981) ?x41984) ?x42587)))
 (= (+ (+ (+ (+ (+ (+ ?x42588 ?x42590) ?x42593) ?x42596) ?x42599) ?x42601) ?x42603) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42665 (* 6.0 l_0_13_73)))
 (let ((?x42666 (* ?x42665 l_0_13_77)))
 (let ((?x42662 (* 6.0 l_0_13_72)))
 (let ((?x42663 (* ?x42662 l_0_13_76)))
 (let ((?x42659 (* 6.0 l_0_13_71)))
 (let ((?x42660 (* ?x42659 l_0_13_75)))
 (let ((?x42656 (* 6.0 l_0_13_70)))
 (let ((?x42657 (* ?x42656 l_0_13_74)))
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x42076 (* ?x41983 l_0_13_76)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x42074 (* ?x41980 l_0_13_75)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x42072 (* ?x41977 l_0_13_74)))
 (let ((?x42650 (* 6.0 l_0_13_52)))
 (let ((?x42651 (* ?x42650 l_0_13_56)))
 (let ((?x42647 (* 6.0 l_0_13_51)))
 (let ((?x42648 (* ?x42647 l_0_13_55)))
 (let ((?x42644 (* 6.0 l_0_13_50)))
 (let ((?x42645 (* ?x42644 l_0_13_54)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x42066 (* ?x41962 l_0_13_55)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x42064 (* ?x41959 l_0_13_54)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x42062 (* ?x41956 l_0_13_53)))
 (let ((?x42635 (* 12.0 l_0_13_31)))
 (let ((?x42636 (* ?x42635 l_0_13_35)))
 (let ((?x42632 (* 12.0 l_0_13_30)))
 (let ((?x42633 (* ?x42632 l_0_13_34)))
 (let ((?x42629 (* 12.0 l_0_13_29)))
 (let ((?x42630 (* ?x42629 l_0_13_33)))
 (let ((?x42626 (* 12.0 l_0_13_28)))
 (let ((?x42627 (* ?x42626 l_0_13_32)))
 (let ((?x42623 (* 2.0 l_0_13_136)))
 (let ((?x42624 (* ?x42623 l_0_13_140)))
 (let ((?x42620 (* 2.0 l_0_13_135)))
 (let ((?x42621 (* ?x42620 l_0_13_139)))
 (let ((?x42617 (* 2.0 l_0_13_134)))
 (let ((?x42618 (* ?x42617 l_0_13_138)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42360 (* ?x42359 l_0_13_135)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42357 (* ?x42356 l_0_13_134)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42355 (* ?x18475 l_0_13_133)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x31952 (* ?x42039 l_0_13_9)))
 (let ((?x32036 (+ (* (* 12.0 l_0_13_10) l_0_13_14) (* (* 12.0 l_0_13_11) l_0_13_7))))
 (let ((?x4095 (+ ?x32036 (* (* 12.0 l_0_13_12) l_0_13_8))))
 (let ((?x42616 (+ (- (- (- (+ ?x4095 ?x31952) ?x42355) ?x42357) ?x42360) (* (* 2.0 l_0_13_133) l_0_13_137))))
 (let ((?x42637 (- (- (- (- (+ (+ (+ ?x42616 ?x42618) ?x42621) ?x42624) ?x42627) ?x42630) ?x42633) ?x42636)))
 (let ((?x42643 (- (+ (+ (+ ?x42637 ?x42062) ?x42064) ?x42066) (* (* 6.0 l_0_13_49) l_0_13_53))))
 (let ((?x42658 (+ (- (- (- (- (- (- ?x42643 ?x42645) ?x42648) ?x42651) ?x42072) ?x42074) ?x42076) ?x42657)))
 (= (+ (+ (+ ?x42658 ?x42660) ?x42663) ?x42666) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42771 (* 2.0 l_0_13_90)))
 (let ((?x42772 (* ?x42771 l_0_13_93)))
 (let ((?x42768 (* 2.0 l_0_13_89)))
 (let ((?x42769 (* ?x42768 l_0_13_92)))
 (let ((?x42765 (* 2.0 l_0_13_88)))
 (let ((?x42766 (* ?x42765 l_0_13_91)))
 (let ((?x42665 (* 6.0 l_0_13_73)))
 (let ((?x42763 (* ?x42665 l_0_13_82)))
 (let ((?x42662 (* 6.0 l_0_13_72)))
 (let ((?x42761 (* ?x42662 l_0_13_81)))
 (let ((?x42659 (* 6.0 l_0_13_71)))
 (let ((?x42759 (* ?x42659 l_0_13_80)))
 (let ((?x42656 (* 6.0 l_0_13_70)))
 (let ((?x42757 (* ?x42656 l_0_13_79)))
 (let ((?x41983 (* 2.0 l_0_13_69)))
 (let ((?x42187 (* ?x41983 l_0_13_81)))
 (let ((?x41980 (* 2.0 l_0_13_68)))
 (let ((?x42185 (* ?x41980 l_0_13_80)))
 (let ((?x41977 (* 2.0 l_0_13_67)))
 (let ((?x42183 (* ?x41977 l_0_13_79)))
 (let ((?x42650 (* 6.0 l_0_13_52)))
 (let ((?x42752 (* ?x42650 l_0_13_61)))
 (let ((?x42647 (* 6.0 l_0_13_51)))
 (let ((?x42750 (* ?x42647 l_0_13_60)))
 (let ((?x42644 (* 6.0 l_0_13_50)))
 (let ((?x42748 (* ?x42644 l_0_13_59)))
 (let ((?x41962 (* 2.0 l_0_13_48)))
 (let ((?x42177 (* ?x41962 l_0_13_60)))
 (let ((?x41959 (* 2.0 l_0_13_47)))
 (let ((?x42175 (* ?x41959 l_0_13_59)))
 (let ((?x41956 (* 2.0 l_0_13_46)))
 (let ((?x42173 (* ?x41956 l_0_13_58)))
 (let ((?x42635 (* 12.0 l_0_13_31)))
 (let ((?x42741 (* ?x42635 l_0_13_40)))
 (let ((?x42632 (* 12.0 l_0_13_30)))
 (let ((?x42739 (* ?x42632 l_0_13_39)))
 (let ((?x42629 (* 12.0 l_0_13_29)))
 (let ((?x42737 (* ?x42629 l_0_13_38)))
 (let ((?x42626 (* 12.0 l_0_13_28)))
 (let ((?x42735 (* ?x42626 l_0_13_37)))
 (let ((?x42150 (* 12.0 l_0_13_18)))
 (let ((?x42733 (* ?x42150 l_0_13_9)))
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x42731 (* ?x42730 l_0_13_177)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x42728 (* ?x42727 l_0_13_176)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x42725 (* ?x42724 l_0_13_175)))
 (let ((?x42139 (* 12.0 l_0_13_17)))
 (let ((?x42722 (* ?x42139 l_0_13_8)))
 (let ((?x42134 (* 12.0 l_0_13_16)))
 (let ((?x42720 (* ?x42134 l_0_13_7)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x42718 (* ?x42717 l_0_13_156)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x42715 (* ?x42714 l_0_13_155)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x42712 (* ?x42711 l_0_13_154)))
 (let ((?x42623 (* 2.0 l_0_13_136)))
 (let ((?x42709 (* ?x42623 l_0_13_145)))
 (let ((?x42620 (* 2.0 l_0_13_135)))
 (let ((?x42707 (* ?x42620 l_0_13_144)))
 (let ((?x42617 (* 2.0 l_0_13_134)))
 (let ((?x42705 (* ?x42617 l_0_13_143)))
 (let ((?x31924 (* 2.0 l_0_13_133)))
 (let ((?x42703 (* ?x31924 l_0_13_142)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x42701 (* ?x42700 l_0_13_114)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x42698 (* ?x32113 l_0_13_113)))
 (let ((?x32045 (* 12.0 l_0_13_10)))
 (let ((?x32183 (* ?x32045 l_0_13_19)))
 (let ((?x42704 (+ (+ (+ (+ ?x32183 (* (* 2.0 l_0_13_109) l_0_13_112)) ?x42698) ?x42701) ?x42703)))
 (let ((?x42721 (+ (- (- (- (+ (+ (+ ?x42704 ?x42705) ?x42707) ?x42709) ?x42712) ?x42715) ?x42718) ?x42720)))
 (let ((?x42738 (- (- (+ (+ (+ (+ (+ ?x42721 ?x42722) ?x42725) ?x42728) ?x42731) ?x42733) ?x42735) ?x42737)))
 (let ((?x42747 (- (+ (+ (+ (- (- ?x42738 ?x42739) ?x42741) ?x42173) ?x42175) ?x42177) (* (* 6.0 l_0_13_49) l_0_13_58))))
 (let ((?x42758 (+ (- (- (- (- (- (- ?x42747 ?x42748) ?x42750) ?x42752) ?x42183) ?x42185) ?x42187) ?x42757)))
 (= (- (- (- (+ (+ (+ ?x42758 ?x42759) ?x42761) ?x42763) ?x42766) ?x42769) ?x42772) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42875 (* l_0_13_78 l_0_13_78)))
 (let ((?x42876 (* 3.0 ?x42875)))
 (let ((?x42872 (* l_0_13_77 l_0_13_77)))
 (let ((?x42873 (* 3.0 ?x42872)))
 (let ((?x42869 (* l_0_13_76 l_0_13_76)))
 (let ((?x42870 (* 3.0 ?x42869)))
 (let ((?x42866 (* l_0_13_75 l_0_13_75)))
 (let ((?x42867 (* 3.0 ?x42866)))
 (let ((?x42863 (* l_0_13_74 l_0_13_74)))
 (let ((?x42864 (* 3.0 ?x42863)))
 (let ((?x42861 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x42858 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x42855 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x42852 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x42846 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x42843 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x42840 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x42837 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x42834 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x41674 (* l_0_13_15 l_0_13_15)))
 (let ((?x42831 (* 6.0 ?x41674)))
 (let ((?x42829 (* l_0_13_141 l_0_13_141)))
 (let ((?x42827 (* l_0_13_140 l_0_13_140)))
 (let ((?x41672 (* l_0_13_14 l_0_13_14)))
 (let ((?x42825 (* 6.0 ?x41672)))
 (let ((?x42823 (* l_0_13_139 l_0_13_139)))
 (let ((?x42821 (* l_0_13_138 l_0_13_138)))
 (let ((?x42819 (* l_0_13_137 l_0_13_137)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42432 (* ?x42359 l_0_13_139)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42429 (* ?x42356 l_0_13_138)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42426 (* ?x18475 l_0_13_137)))
 (let ((?x41670 (* l_0_13_13 l_0_13_13)))
 (let ((?x42814 (* 6.0 ?x41670)))
 (let ((?x4488 (+ (* 6.0 (* l_0_13_11 l_0_13_11)) (* 6.0 (* l_0_13_12 l_0_13_12)))))
 (let ((?x42824 (+ (+ (+ (- (- (- (+ ?x4488 ?x42814) ?x42426) ?x42429) ?x42432) ?x42819) ?x42821) ?x42823)))
 (let ((?x42841 (- (- (- (+ (+ (+ (+ ?x42824 ?x42825) ?x42827) ?x42829) ?x42831) ?x42834) ?x42837) ?x42840)))
 (let ((?x42853 (- (- (- (- ?x42841 ?x42843) ?x42846) (* (* 3.0 l_0_13_53) l_0_13_53)) ?x42852)))
 (let ((?x42874 (+ (+ (+ (+ (- (- (- ?x42853 ?x42855) ?x42858) ?x42861) ?x42864) ?x42867) ?x42870) ?x42873)))
 (= (+ ?x42874 ?x42876) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42771 (* 2.0 l_0_13_90)))
 (let ((?x42986 (* ?x42771 l_0_13_97)))
 (let ((?x42768 (* 2.0 l_0_13_89)))
 (let ((?x42984 (* ?x42768 l_0_13_96)))
 (let ((?x42765 (* 2.0 l_0_13_88)))
 (let ((?x42982 (* ?x42765 l_0_13_95)))
 (let ((?x42980 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x42977 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x42974 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x42971 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x42968 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x42965 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x42962 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x42959 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x42956 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x42950 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x42947 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x42944 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x42941 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x42938 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x42935 (* ?x42730 l_0_13_181)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x42933 (* ?x42727 l_0_13_180)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x42931 (* ?x42724 l_0_13_179)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x42929 (* ?x42717 l_0_13_160)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x42927 (* ?x42714 l_0_13_159)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x42925 (* ?x42711 l_0_13_158)))
 (let ((?x42923 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x42920 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x42917 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x42914 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x42911 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x42908 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x42905 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x42359 (* 2.0 l_0_13_132)))
 (let ((?x42464 (* ?x42359 l_0_13_144)))
 (let ((?x42356 (* 2.0 l_0_13_131)))
 (let ((?x42462 (* ?x42356 l_0_13_143)))
 (let ((?x18475 (* 2.0 l_0_13_130)))
 (let ((?x42460 (* ?x18475 l_0_13_142)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x42899 (* ?x42039 l_0_13_18)))
 (let ((?x42028 (* 12.0 l_0_13_12)))
 (let ((?x42897 (* ?x42028 l_0_13_17)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x42895 (* ?x42700 l_0_13_118)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x42893 (* ?x32113 l_0_13_117)))
 (let ((?x42024 (* 12.0 l_0_13_11)))
 (let ((?x42891 (* ?x42024 l_0_13_16)))
 (let ((?x42898 (+ (+ (+ (+ (* (* 2.0 l_0_13_109) l_0_13_116) ?x42891) ?x42893) ?x42895) ?x42897)))
 (let ((?x42912 (+ (+ (+ (- (- (- (+ ?x42898 ?x42899) ?x42460) ?x42462) ?x42464) ?x42905) ?x42908) ?x42911)))
 (let ((?x42930 (- (- (- (+ (+ (+ (+ ?x42912 ?x42914) ?x42917) ?x42920) ?x42923) ?x42925) ?x42927) ?x42929)))
 (let ((?x42948 (- (- (- (- (+ (+ (+ ?x42930 ?x42931) ?x42933) ?x42935) ?x42938) ?x42941) ?x42944) ?x42947)))
 (let ((?x42960 (- (- (- (- ?x42948 ?x42950) (* (* 6.0 l_0_13_53) l_0_13_58)) ?x42956) ?x42959)))
 (let ((?x42981 (+ (+ (+ (+ (+ (- (- ?x42960 ?x42962) ?x42965) ?x42968) ?x42971) ?x42974) ?x42977) ?x42980)))
 (= (- (- (- ?x42981 ?x42982) ?x42984) ?x42986) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43157 (* l_0_13_84 l_0_13_84)))
 (let ((?x43158 (* 3.0 ?x43157)))
 (let ((?x43154 (* l_0_13_83 l_0_13_83)))
 (let ((?x43155 (* 3.0 ?x43154)))
 (let ((?x43151 (* l_0_13_82 l_0_13_82)))
 (let ((?x43152 (* 3.0 ?x43151)))
 (let ((?x43148 (* l_0_13_81 l_0_13_81)))
 (let ((?x43149 (* 3.0 ?x43148)))
 (let ((?x43145 (* l_0_13_80 l_0_13_80)))
 (let ((?x43146 (* 3.0 ?x43145)))
 (let ((?x43142 (* l_0_13_79 l_0_13_79)))
 (let ((?x43143 (* 3.0 ?x43142)))
 (let ((?x43140 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43137 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43134 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43131 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43128 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x43122 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x43119 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x43116 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x43113 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x43110 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x43107 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x41787 (* l_0_13_21 l_0_13_21)))
 (let ((?x43104 (* 6.0 ?x41787)))
 (let ((?x41785 (* l_0_13_20 l_0_13_20)))
 (let ((?x43102 (* 6.0 ?x41785)))
 (let ((?x41783 (* l_0_13_19 l_0_13_19)))
 (let ((?x43100 (* 6.0 ?x41783)))
 (let ((?x41781 (* l_0_13_18 l_0_13_18)))
 (let ((?x43098 (* 6.0 ?x41781)))
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x43096 (* ?x42730 l_0_13_186)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x43094 (* ?x42727 l_0_13_185)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x43092 (* ?x42724 l_0_13_184)))
 (let ((?x41779 (* l_0_13_17 l_0_13_17)))
 (let ((?x43090 (* 6.0 ?x41779)))
 (let ((?x41775 (* l_0_13_16 l_0_13_16)))
 (let ((?x43088 (* 6.0 ?x41775)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x43086 (* ?x42717 l_0_13_165)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x43084 (* ?x42714 l_0_13_164)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x43082 (* ?x42711 l_0_13_163)))
 (let ((?x43080 (* l_0_13_147 l_0_13_147)))
 (let ((?x43078 (* l_0_13_146 l_0_13_146)))
 (let ((?x43076 (* l_0_13_145 l_0_13_145)))
 (let ((?x43074 (* l_0_13_144 l_0_13_144)))
 (let ((?x43072 (* l_0_13_143 l_0_13_143)))
 (let ((?x43070 (* l_0_13_142 l_0_13_142)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x43068 (* ?x42700 l_0_13_123)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x43066 (* ?x32113 l_0_13_122)))
 (let ((?x32101 (* 2.0 l_0_13_109)))
 (let ((?x43064 (* ?x32101 l_0_13_121)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x43062 (* ?x43061 l_0_13_90)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x43059 (* ?x43058 l_0_13_89)))
 (let ((?x43067 (+ (+ (- (- (* (* (- 2.0) l_0_13_100) l_0_13_88) ?x43059) ?x43062) ?x43064) ?x43066)))
 (let ((?x43081 (+ (+ (+ (+ (+ (+ (+ ?x43067 ?x43068) ?x43070) ?x43072) ?x43074) ?x43076) ?x43078) ?x43080)))
 (let ((?x43095 (+ (+ (+ (+ (- (- (- ?x43081 ?x43082) ?x43084) ?x43086) ?x43088) ?x43090) ?x43092) ?x43094)))
 (let ((?x43111 (- (- (+ (+ (+ (+ (+ ?x43095 ?x43096) ?x43098) ?x43100) ?x43102) ?x43104) ?x43107) ?x43110)))
 (let ((?x43126 (- (- (- (- (- ?x43111 ?x43113) ?x43116) ?x43119) ?x43122) (* (* 3.0 l_0_13_58) l_0_13_58))))
 (let ((?x43147 (+ (+ (- (- (- (- (- ?x43126 ?x43128) ?x43131) ?x43134) ?x43137) ?x43140) ?x43143) ?x43146)))
 (= (+ (+ (+ (+ ?x43147 ?x43149) ?x43152) ?x43155) ?x43158) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40807 (* l_0_13_66 l_0_13_66)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43222 (* ?x40927 l_0_13_71)))
 (let ((?x40804 (* l_0_13_65 l_0_13_65)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43219 (* ?x40922 l_0_13_70)))
 (let ((?x40832 (* l_0_13_45 l_0_13_45)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43216 (* ?x40916 l_0_13_50)))
 (let ((?x40828 (* l_0_13_44 l_0_13_44)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x32788 (* ?x40910 l_0_13_49)))
 (let ((?x40906 (* 12.0 l_0_13_3)))
 (let ((?x41945 (* ?x40906 l_0_13_8)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x41934 (* ?x40902 l_0_13_29)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x41932 (* ?x40898 l_0_13_28)))
 (let ((?x40894 (* 12.0 l_0_13_2)))
 (let ((?x41930 (* ?x40894 l_0_13_7)))
 (let ((?x32770 (- (* (* (- 2.0) l_0_13_191) l_0_13_196) (* (* 2.0 l_0_13_192) l_0_13_197))))
 (let ((?x43217 (- (+ (- (+ (- (- (+ ?x32770 ?x41930) ?x41932) ?x41934) ?x41945) ?x32788) ?x40828) ?x43216)))
 (= (- (+ (- (+ (+ ?x43217 ?x40832) ?x43219) ?x40804) ?x43222) ?x40807) 0.0))))))))))))))))))))))))
(assert
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43269 (* ?x40927 l_0_13_75)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43267 (* ?x40922 l_0_13_74)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43265 (* ?x40916 l_0_13_54)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x43263 (* ?x40910 l_0_13_53)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x42050 (* ?x40902 l_0_13_33)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x42048 (* ?x40898 l_0_13_32)))
 (let ((?x40886 (* l_0_13_129 l_0_13_129)))
 (let ((?x40885 (* l_0_13_128 l_0_13_128)))
 (let ((?x42028 (* 12.0 l_0_13_12)))
 (let ((?x42029 (* ?x42028 l_0_13_3)))
 (let ((?x42024 (* 12.0 l_0_13_11)))
 (let ((?x42025 (* ?x42024 l_0_13_2)))
 (let ((?x43258 (- (- (- (+ ?x42025 ?x42029) ?x40885) ?x40886) (* (* 2.0 l_0_13_191) l_0_13_200))))
 (let ((?x43264 (- (- (- (- ?x43258 (* (* 2.0 l_0_13_192) l_0_13_201)) ?x42048) ?x42050) ?x43263)))
 (= (+ (+ (- ?x43264 ?x43265) ?x43267) ?x43269) 0.0))))))))))))))))))))))
(assert
 (let ((?x42334 (* l_0_13_87 l_0_13_87)))
 (let ((?x42332 (* l_0_13_86 l_0_13_86)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43306 (* ?x40927 l_0_13_80)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43304 (* ?x40922 l_0_13_79)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43302 (* ?x40916 l_0_13_59)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x43300 (* ?x40910 l_0_13_58)))
 (let ((?x40902 (* 12.0 l_0_13_24)))
 (let ((?x42161 (* ?x40902 l_0_13_38)))
 (let ((?x40898 (* 12.0 l_0_13_23)))
 (let ((?x42159 (* ?x40898 l_0_13_37)))
 (let ((?x42305 (* l_0_13_171 l_0_13_171)))
 (let ((?x42303 (* l_0_13_170 l_0_13_170)))
 (let ((?x42139 (* 12.0 l_0_13_17)))
 (let ((?x42140 (* ?x42139 l_0_13_3)))
 (let ((?x42134 (* 12.0 l_0_13_16)))
 (let ((?x42135 (* ?x42134 l_0_13_2)))
 (let ((?x42301 (* l_0_13_150 l_0_13_150)))
 (let ((?x42299 (* l_0_13_149 l_0_13_149)))
 (let ((?x21842 (- (+ (* l_0_13_107 l_0_13_107) (* l_0_13_108 l_0_13_108)) ?x42299)))
 (let ((?x43295 (- (+ (+ (+ (+ (- ?x21842 ?x42301) ?x42135) ?x42140) ?x42303) ?x42305) (* (* 2.0 l_0_13_191) l_0_13_205))))
 (let ((?x43301 (- (- (- (- ?x43295 (* (* 2.0 l_0_13_192) l_0_13_206)) ?x42159) ?x42161) ?x43300)))
 (= (- (- (+ (+ (- ?x43301 ?x43302) ?x43304) ?x43306) ?x42332) ?x42334) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x41546 (* l_0_13_9 l_0_13_9)))
 (let ((?x42603 (* 6.0 ?x41546)))
 (let ((?x41544 (* l_0_13_8 l_0_13_8)))
 (let ((?x42601 (* 6.0 ?x41544)))
 (let ((?x41542 (* l_0_13_7 l_0_13_7)))
 (let ((?x42587 (* 6.0 ?x41542)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43222 (* ?x40927 l_0_13_71)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43219 (* ?x40922 l_0_13_70)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43216 (* ?x40916 l_0_13_50)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x32788 (* ?x40910 l_0_13_49)))
 (let ((?x42567 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x42564 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x42561 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x42558 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x43332 (* l_0_13_199 l_0_13_199)))
 (let ((?x43330 (* l_0_13_198 l_0_13_198)))
 (let ((?x43328 (* l_0_13_197 l_0_13_197)))
 (let ((?x43326 (* l_0_13_196 l_0_13_196)))
 (let ((?x41550 (* l_0_13_10 l_0_13_10)))
 (let ((?x42548 (* 6.0 ?x41550)))
 (let ((?x43336 (- (- (- (- (- (- (- ?x42548 ?x43326) ?x43328) ?x43330) ?x43332) ?x42558) ?x42561) ?x42564)))
 (let ((?x43342 (- (+ (+ (- ?x43336 ?x42567) ?x32788) ?x43216) (* (* 1.0 l_0_13_49) l_0_13_49))))
 (let ((?x43348 (- (- ?x43342 (* (* 1.0 l_0_13_50) l_0_13_50)) (* (* 1.0 l_0_13_51) l_0_13_51))))
 (let ((?x43354 (+ (- (- (- ?x43348 (* (* 1.0 l_0_13_52) l_0_13_52)) ?x43219) ?x43222) ?x42587)))
 (let ((?x43358 (+ (+ ?x43354 (* 1.0 (* l_0_13_70 l_0_13_70))) (* 1.0 (* l_0_13_71 l_0_13_71)))))
 (let ((?x43362 (+ (+ ?x43358 (* 1.0 (* l_0_13_72 l_0_13_72))) (* 1.0 (* l_0_13_73 l_0_13_73)))))
 (= (+ (+ ?x43362 ?x42601) ?x42603) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43394 (* 2.0 l_0_13_73)))
 (let ((?x43395 (* ?x43394 l_0_13_77)))
 (let ((?x43391 (* 2.0 l_0_13_72)))
 (let ((?x43392 (* ?x43391 l_0_13_76)))
 (let ((?x43388 (* 2.0 l_0_13_71)))
 (let ((?x43389 (* ?x43388 l_0_13_75)))
 (let ((?x43385 (* 2.0 l_0_13_70)))
 (let ((?x43386 (* ?x43385 l_0_13_74)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43269 (* ?x40927 l_0_13_75)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43267 (* ?x40922 l_0_13_74)))
 (let ((?x43380 (* 2.0 l_0_13_52)))
 (let ((?x43381 (* ?x43380 l_0_13_56)))
 (let ((?x43377 (* 2.0 l_0_13_51)))
 (let ((?x43378 (* ?x43377 l_0_13_55)))
 (let ((?x5664 (* 2.0 l_0_13_50)))
 (let ((?x32964 (* ?x5664 l_0_13_54)))
 (let ((?x5726 (* 2.0 l_0_13_49)))
 (let ((?x21943 (* ?x5726 l_0_13_53)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43265 (* ?x40916 l_0_13_54)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x43263 (* ?x40910 l_0_13_53)))
 (let ((?x42635 (* 12.0 l_0_13_31)))
 (let ((?x42636 (* ?x42635 l_0_13_35)))
 (let ((?x42632 (* 12.0 l_0_13_30)))
 (let ((?x42633 (* ?x42632 l_0_13_34)))
 (let ((?x42629 (* 12.0 l_0_13_29)))
 (let ((?x42630 (* ?x42629 l_0_13_33)))
 (let ((?x42626 (* 12.0 l_0_13_28)))
 (let ((?x42627 (* ?x42626 l_0_13_32)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x31952 (* ?x42039 l_0_13_9)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x20760 (* ?x41824 l_0_13_134)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x20666 (* ?x41822 l_0_13_133)))
 (let ((?x32036 (+ (* (* 12.0 l_0_13_10) l_0_13_14) (* (* 12.0 l_0_13_11) l_0_13_7))))
 (let ((?x4095 (+ ?x32036 (* (* 12.0 l_0_13_12) l_0_13_8))))
 (let ((?x5630 (- (+ (- (- ?x4095 ?x20666) ?x20760) ?x31952) (* (* 2.0 l_0_13_196) l_0_13_200))))
 (let ((?x5527 (- (- ?x5630 (* (* 2.0 l_0_13_197) l_0_13_201)) (* (* 2.0 l_0_13_198) l_0_13_202))))
 (let ((?x5626 (- (- (- (- ?x5527 (* (* 2.0 l_0_13_199) l_0_13_203)) ?x42627) ?x42630) ?x42633)))
 (let ((?x43382 (- (- (- (- (+ (+ (- ?x5626 ?x42636) ?x43263) ?x43265) ?x21943) ?x32964) ?x43378) ?x43381)))
 (= (+ (+ (+ (+ (- (- ?x43382 ?x43267) ?x43269) ?x43386) ?x43389) ?x43392) ?x43395) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x43470 (* ?x42192 l_0_13_92)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x43468 (* ?x42189 l_0_13_91)))
 (let ((?x43394 (* 2.0 l_0_13_73)))
 (let ((?x43466 (* ?x43394 l_0_13_82)))
 (let ((?x43391 (* 2.0 l_0_13_72)))
 (let ((?x43464 (* ?x43391 l_0_13_81)))
 (let ((?x43388 (* 2.0 l_0_13_71)))
 (let ((?x43462 (* ?x43388 l_0_13_80)))
 (let ((?x43385 (* 2.0 l_0_13_70)))
 (let ((?x43460 (* ?x43385 l_0_13_79)))
 (let ((?x40927 (* 2.0 l_0_13_66)))
 (let ((?x43306 (* ?x40927 l_0_13_80)))
 (let ((?x40922 (* 2.0 l_0_13_65)))
 (let ((?x43304 (* ?x40922 l_0_13_79)))
 (let ((?x43380 (* 2.0 l_0_13_52)))
 (let ((?x43456 (* ?x43380 l_0_13_61)))
 (let ((?x43377 (* 2.0 l_0_13_51)))
 (let ((?x43454 (* ?x43377 l_0_13_60)))
 (let ((?x5664 (* 2.0 l_0_13_50)))
 (let ((?x43452 (* ?x5664 l_0_13_59)))
 (let ((?x5726 (* 2.0 l_0_13_49)))
 (let ((?x43450 (* ?x5726 l_0_13_58)))
 (let ((?x40916 (* 2.0 l_0_13_45)))
 (let ((?x43302 (* ?x40916 l_0_13_59)))
 (let ((?x40910 (* 2.0 l_0_13_44)))
 (let ((?x43300 (* ?x40910 l_0_13_58)))
 (let ((?x42635 (* 12.0 l_0_13_31)))
 (let ((?x42741 (* ?x42635 l_0_13_40)))
 (let ((?x42632 (* 12.0 l_0_13_30)))
 (let ((?x42739 (* ?x42632 l_0_13_39)))
 (let ((?x42629 (* 12.0 l_0_13_29)))
 (let ((?x42737 (* ?x42629 l_0_13_38)))
 (let ((?x42626 (* 12.0 l_0_13_28)))
 (let ((?x42735 (* ?x42626 l_0_13_37)))
 (let ((?x42150 (* 12.0 l_0_13_18)))
 (let ((?x42733 (* ?x42150 l_0_13_9)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43433 (* ?x42147 l_0_13_176)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43431 (* ?x42144 l_0_13_175)))
 (let ((?x42139 (* 12.0 l_0_13_17)))
 (let ((?x42722 (* ?x42139 l_0_13_8)))
 (let ((?x42134 (* 12.0 l_0_13_16)))
 (let ((?x42720 (* ?x42134 l_0_13_7)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43427 (* ?x42131 l_0_13_155)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x33072 (* ?x42128 l_0_13_154)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x5840 (* ?x42121 l_0_13_113)))
 (let ((?x32045 (* 12.0 l_0_13_10)))
 (let ((?x32183 (* ?x32045 l_0_13_19)))
 (let ((?x43428 (- (- (+ (+ ?x32183 (* (* 2.0 l_0_13_107) l_0_13_112)) ?x5840) ?x33072) ?x43427)))
 (let ((?x43437 (- (+ (+ (+ (+ (+ ?x43428 ?x42720) ?x42722) ?x43431) ?x43433) ?x42733) (* (* 2.0 l_0_13_196) l_0_13_205))))
 (let ((?x43441 (- (- ?x43437 (* (* 2.0 l_0_13_197) l_0_13_206)) (* (* 2.0 l_0_13_198) l_0_13_207))))
 (let ((?x43446 (- (- (- (- ?x43441 (* (* 2.0 l_0_13_199) l_0_13_208)) ?x42735) ?x42737) ?x42739)))
 (let ((?x43457 (- (- (- (- (+ (+ (- ?x43446 ?x42741) ?x43300) ?x43302) ?x43450) ?x43452) ?x43454) ?x43456)))
 (let ((?x43469 (- (+ (+ (+ (+ (- (- ?x43457 ?x43304) ?x43306) ?x43460) ?x43462) ?x43464) ?x43466) ?x43468)))
 (= (- ?x43469 ?x43470) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42846 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x42843 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x42840 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x42837 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x42834 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x43519 (* l_0_13_204 l_0_13_204)))
 (let ((?x43517 (* l_0_13_203 l_0_13_203)))
 (let ((?x43515 (* l_0_13_202 l_0_13_202)))
 (let ((?x43513 (* l_0_13_201 l_0_13_201)))
 (let ((?x43511 (* l_0_13_200 l_0_13_200)))
 (let ((?x41674 (* l_0_13_15 l_0_13_15)))
 (let ((?x42831 (* 6.0 ?x41674)))
 (let ((?x41672 (* l_0_13_14 l_0_13_14)))
 (let ((?x42825 (* 6.0 ?x41672)))
 (let ((?x41670 (* l_0_13_13 l_0_13_13)))
 (let ((?x42814 (* 6.0 ?x41670)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x42037 (* ?x41824 l_0_13_138)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x42034 (* ?x41822 l_0_13_137)))
 (let ((?x4488 (+ (* 6.0 (* l_0_13_11 l_0_13_11)) (* 6.0 (* l_0_13_12 l_0_13_12)))))
 (let ((?x43514 (- (- (+ (+ (+ (- (- ?x4488 ?x42034) ?x42037) ?x42814) ?x42825) ?x42831) ?x43511) ?x43513)))
 (let ((?x43524 (- (- (- (- (- (- (- ?x43514 ?x43515) ?x43517) ?x43519) ?x42834) ?x42837) ?x42840) ?x42843)))
 (let ((?x43531 (- (- (- ?x43524 ?x42846) (* (* 1.0 l_0_13_53) l_0_13_53)) (* (* 1.0 l_0_13_54) l_0_13_54))))
 (let ((?x43537 (- (- ?x43531 (* (* 1.0 l_0_13_55) l_0_13_55)) (* (* 1.0 l_0_13_56) l_0_13_56))))
 (let ((?x43542 (+ (- ?x43537 (* (* 1.0 l_0_13_57) l_0_13_57)) (* 1.0 (* l_0_13_74 l_0_13_74)))))
 (let ((?x43546 (+ (+ ?x43542 (* 1.0 (* l_0_13_75 l_0_13_75))) (* 1.0 (* l_0_13_76 l_0_13_76)))))
 (let ((?x43550 (+ (+ ?x43546 (* 1.0 (* l_0_13_77 l_0_13_77))) (* 1.0 (* l_0_13_78 l_0_13_78)))))
 (= ?x43550 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x43631 (* ?x42192 l_0_13_96)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x43629 (* ?x42189 l_0_13_95)))
 (let ((?x43627 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x43624 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x43621 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x43618 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x43615 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x43612 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x43609 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x43606 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x43603 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x43600 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x42950 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x42947 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x42944 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x42941 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x42938 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43577 (* ?x42147 l_0_13_180)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43575 (* ?x42144 l_0_13_179)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43573 (* ?x42131 l_0_13_159)))
 (let ((?x42923 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x43570 (* ?x42128 l_0_13_158)))
 (let ((?x42914 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x42039 (* 12.0 l_0_13_13)))
 (let ((?x42899 (* ?x42039 l_0_13_18)))
 (let ((?x41824 (* 2.0 l_0_13_129)))
 (let ((?x42126 (* ?x41824 l_0_13_143)))
 (let ((?x41822 (* 2.0 l_0_13_128)))
 (let ((?x42124 (* ?x41822 l_0_13_142)))
 (let ((?x42028 (* 12.0 l_0_13_12)))
 (let ((?x42897 (* ?x42028 l_0_13_17)))
 (let ((?x42024 (* 12.0 l_0_13_11)))
 (let ((?x42891 (* ?x42024 l_0_13_16)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x22466 (* ?x42121 l_0_13_117)))
 (let ((?x43566 (- (+ (+ (+ (* (* 2.0 l_0_13_107) l_0_13_116) ?x22466) ?x42891) ?x42897) ?x42124)))
 (let ((?x43576 (+ (- (+ (- (+ (+ (- ?x43566 ?x42126) ?x42899) ?x42914) ?x43570) ?x42923) ?x43573) ?x43575)))
 (let ((?x43584 (- (- (+ ?x43576 ?x43577) (* (* 2.0 l_0_13_200) l_0_13_205)) (* (* 2.0 l_0_13_201) l_0_13_206))))
 (let ((?x43590 (- (- ?x43584 (* (* 2.0 l_0_13_202) l_0_13_207)) (* (* 2.0 l_0_13_203) l_0_13_208))))
 (let ((?x43596 (- (- (- (- ?x43590 (* (* 2.0 l_0_13_204) l_0_13_209)) ?x42938) ?x42941) ?x42944)))
 (let ((?x43613 (- (- (- (- (- (- (- ?x43596 ?x42947) ?x42950) ?x43600) ?x43603) ?x43606) ?x43609) ?x43612)))
 (let ((?x43632 (- (- (+ (+ (+ (+ (+ ?x43613 ?x43615) ?x43618) ?x43621) ?x43624) ?x43627) ?x43629) ?x43631)))
 (= ?x43632 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43122 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x43119 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x43116 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x43113 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x43110 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x43107 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x43726 (* l_0_13_210 l_0_13_210)))
 (let ((?x41787 (* l_0_13_21 l_0_13_21)))
 (let ((?x43104 (* 6.0 ?x41787)))
 (let ((?x43723 (* l_0_13_209 l_0_13_209)))
 (let ((?x43721 (* l_0_13_208 l_0_13_208)))
 (let ((?x43719 (* l_0_13_207 l_0_13_207)))
 (let ((?x43717 (* l_0_13_206 l_0_13_206)))
 (let ((?x43715 (* l_0_13_205 l_0_13_205)))
 (let ((?x41785 (* l_0_13_20 l_0_13_20)))
 (let ((?x43102 (* 6.0 ?x41785)))
 (let ((?x41783 (* l_0_13_19 l_0_13_19)))
 (let ((?x43100 (* 6.0 ?x41783)))
 (let ((?x41781 (* l_0_13_18 l_0_13_18)))
 (let ((?x43098 (* 6.0 ?x41781)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43710 (* ?x42147 l_0_13_185)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43708 (* ?x42144 l_0_13_184)))
 (let ((?x41779 (* l_0_13_17 l_0_13_17)))
 (let ((?x43090 (* 6.0 ?x41779)))
 (let ((?x41775 (* l_0_13_16 l_0_13_16)))
 (let ((?x43088 (* 6.0 ?x41775)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43704 (* ?x42131 l_0_13_164)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x43702 (* ?x42128 l_0_13_163)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x43700 (* ?x42121 l_0_13_122)))
 (let ((?x42119 (* 2.0 l_0_13_107)))
 (let ((?x43698 (* ?x42119 l_0_13_121)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x43696 (* ?x43058 l_0_13_87)))
 (let ((?x43703 (- (+ (+ (- (* (* (- 2.0) l_0_13_100) l_0_13_86) ?x43696) ?x43698) ?x43700) ?x43702)))
 (let ((?x43713 (+ (+ (+ (+ (+ (+ (- ?x43703 ?x43704) ?x43088) ?x43090) ?x43708) ?x43710) ?x43098) ?x43100)))
 (let ((?x43725 (+ (- (- (- (- (- (+ ?x43713 ?x43102) ?x43715) ?x43717) ?x43719) ?x43721) ?x43723) ?x43104)))
 (let ((?x43733 (- (- (- (- (- (- (- ?x43725 ?x43726) ?x43107) ?x43110) ?x43113) ?x43116) ?x43119) ?x43122)))
 (let ((?x43739 (- (- ?x43733 (* (* 1.0 l_0_13_58) l_0_13_58)) (* (* 1.0 l_0_13_59) l_0_13_59))))
 (let ((?x43745 (- (- ?x43739 (* (* 1.0 l_0_13_60) l_0_13_60)) (* (* 1.0 l_0_13_61) l_0_13_61))))
 (let ((?x43751 (- (- ?x43745 (* (* 1.0 l_0_13_62) l_0_13_62)) (* (* 1.0 l_0_13_63) l_0_13_63))))
 (let ((?x43755 (+ (+ ?x43751 (* 1.0 (* l_0_13_79 l_0_13_79))) (* 1.0 (* l_0_13_80 l_0_13_80)))))
 (let ((?x43759 (+ (+ ?x43755 (* 1.0 (* l_0_13_81 l_0_13_81))) (* 1.0 (* l_0_13_82 l_0_13_82)))))
 (let ((?x43763 (+ (+ ?x43759 (* 1.0 (* l_0_13_83 l_0_13_83))) (* 1.0 (* l_0_13_84 l_0_13_84)))))
 (= ?x43763 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41002 (* l_0_13_64 l_0_13_64)))
 (let ((?x41034 (* 3.0 ?x41002)))
 (= (+ (* (* (- 3.0) l_0_13_43) l_0_13_43) ?x41034) 0.0))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41297 (* ?x41296 l_0_13_86)))
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41354 (* ?x41134 l_0_13_67)))
 (let ((?x41129 (* 6.0 l_0_13_43)))
 (let ((?x41347 (* ?x41129 l_0_13_46)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41279 (* ?x41278 l_0_13_170)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41273 (* ?x41272 l_0_13_149)))
 (let ((?x43820 (+ (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_107) ?x41273) ?x41279) ?x41347) ?x41354)))
 (= (+ ?x43820 ?x41297) 0.0)))))))))))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41391 (* ?x41134 l_0_13_70)))
 (= (+ (* (* (- 6.0) l_0_13_43) l_0_13_49) ?x41391) 0.0))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41436 (* ?x41134 l_0_13_74)))
 (= (+ (* (* (- 6.0) l_0_13_43) l_0_13_53) ?x41436) 0.0))))
(assert
 (let ((?x41134 (* 6.0 l_0_13_64)))
 (let ((?x41488 (* ?x41134 l_0_13_79)))
 (= (+ (* (* (- 6.0) l_0_13_43) l_0_13_58) ?x41488) 0.0))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x42193 (* ?x42192 l_0_13_89)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x42190 (* ?x42189 l_0_13_88)))
 (let ((?x41883 (* l_0_13_69 l_0_13_69)))
 (let ((?x42330 (* 3.0 ?x41883)))
 (let ((?x41880 (* l_0_13_68 l_0_13_68)))
 (let ((?x42328 (* 3.0 ?x41880)))
 (let ((?x41877 (* l_0_13_67 l_0_13_67)))
 (let ((?x42326 (* 3.0 ?x41877)))
 (let ((?x42320 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42317 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x42314 (* (* 3.0 l_0_13_46) l_0_13_46)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x42148 (* ?x42147 l_0_13_173)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x42145 (* ?x42144 l_0_13_172)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x42132 (* ?x42131 l_0_13_152)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x42129 (* ?x42128 l_0_13_151)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x42122 (* ?x42121 l_0_13_110)))
 (let ((?x43844 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_109) ?x42122) ?x42129) ?x42132) ?x42145)))
 (let ((?x43851 (+ (+ (+ (- (- (- (- ?x43844 ?x42148) ?x42314) ?x42317) ?x42320) ?x42326) ?x42328) ?x42330)))
 (= (+ (+ ?x43851 ?x42190) ?x42193) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x43470 (* ?x42192 l_0_13_92)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x43468 (* ?x42189 l_0_13_91)))
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42393 (* ?x42392 l_0_13_72)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42389 (* ?x42388 l_0_13_71)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42385 (* ?x42384 l_0_13_70)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42377 (* ?x42376 l_0_13_51)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42373 (* ?x42372 l_0_13_50)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42369 (* ?x42368 l_0_13_49)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43433 (* ?x42147 l_0_13_176)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43431 (* ?x42144 l_0_13_175)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43427 (* ?x42131 l_0_13_155)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x33072 (* ?x42128 l_0_13_154)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x5840 (* ?x42121 l_0_13_113)))
 (let ((?x22855 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_112) ?x5840) ?x33072) ?x43427) ?x43431)))
 (let ((?x43862 (+ (+ (+ (- (- (- (- ?x22855 ?x43433) ?x42369) ?x42373) ?x42377) ?x42385) ?x42389) ?x42393)))
 (= (+ (+ ?x43862 ?x43468) ?x43470) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42192 (* 2.0 l_0_13_87)))
 (let ((?x43631 (* ?x42192 l_0_13_96)))
 (let ((?x42189 (* 2.0 l_0_13_86)))
 (let ((?x43629 (* ?x42189 l_0_13_95)))
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42452 (* ?x42392 l_0_13_76)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42450 (* ?x42388 l_0_13_75)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42448 (* ?x42384 l_0_13_74)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42444 (* ?x42376 l_0_13_55)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42442 (* ?x42372 l_0_13_54)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42440 (* ?x42368 l_0_13_53)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43577 (* ?x42147 l_0_13_180)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43575 (* ?x42144 l_0_13_179)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43573 (* ?x42131 l_0_13_159)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x43570 (* ?x42128 l_0_13_158)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x22466 (* ?x42121 l_0_13_117)))
 (let ((?x6847 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_116) ?x22466) ?x43570) ?x43573) ?x43575)))
 (let ((?x43873 (+ (+ (+ (- (- (- (- ?x6847 ?x43577) ?x42440) ?x42442) ?x42444) ?x42448) ?x42450) ?x42452)))
 (= (+ (+ ?x43873 ?x43629) ?x43631) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42392 (* 6.0 l_0_13_69)))
 (let ((?x42498 (* ?x42392 l_0_13_81)))
 (let ((?x42388 (* 6.0 l_0_13_68)))
 (let ((?x42496 (* ?x42388 l_0_13_80)))
 (let ((?x42384 (* 6.0 l_0_13_67)))
 (let ((?x42494 (* ?x42384 l_0_13_79)))
 (let ((?x42376 (* 6.0 l_0_13_48)))
 (let ((?x42490 (* ?x42376 l_0_13_60)))
 (let ((?x42372 (* 6.0 l_0_13_47)))
 (let ((?x42488 (* ?x42372 l_0_13_59)))
 (let ((?x42368 (* 6.0 l_0_13_46)))
 (let ((?x42486 (* ?x42368 l_0_13_58)))
 (let ((?x42147 (* 2.0 l_0_13_171)))
 (let ((?x43710 (* ?x42147 l_0_13_185)))
 (let ((?x42144 (* 2.0 l_0_13_170)))
 (let ((?x43708 (* ?x42144 l_0_13_184)))
 (let ((?x42131 (* 2.0 l_0_13_150)))
 (let ((?x43704 (* ?x42131 l_0_13_164)))
 (let ((?x42128 (* 2.0 l_0_13_149)))
 (let ((?x43702 (* ?x42128 l_0_13_163)))
 (let ((?x42121 (* 2.0 l_0_13_108)))
 (let ((?x43700 (* ?x42121 l_0_13_122)))
 (let ((?x42119 (* 2.0 l_0_13_107)))
 (let ((?x43698 (* ?x42119 l_0_13_121)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x43696 (* ?x43058 l_0_13_87)))
 (let ((?x33678 (+ (- (- (+ (* (* 2.0 l_0_13_100) l_0_13_86) ?x43696) ?x43698) ?x43700) ?x43702)))
 (let ((?x5232 (+ (- (- (- (- (- (+ ?x33678 ?x43704) ?x43708) ?x43710) ?x42486) ?x42488) ?x42490) ?x42494)))
 (= (+ (+ ?x5232 ?x42496) ?x42498) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42598 (* l_0_13_73 l_0_13_73)))
 (let ((?x42599 (* 3.0 ?x42598)))
 (let ((?x42595 (* l_0_13_72 l_0_13_72)))
 (let ((?x42596 (* 3.0 ?x42595)))
 (let ((?x42592 (* l_0_13_71 l_0_13_71)))
 (let ((?x42593 (* 3.0 ?x42592)))
 (let ((?x42589 (* l_0_13_70 l_0_13_70)))
 (let ((?x42590 (* 3.0 ?x42589)))
 (let ((?x42582 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x42579 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x42576 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x22998 (+ (- (- (- (* (* (- 3.0) l_0_13_49) l_0_13_49) ?x42576) ?x42579) ?x42582) ?x42590)))
 (= (+ (+ (+ ?x22998 ?x42593) ?x42596) ?x42599) 0.0))))))))))))))
(assert
 (let ((?x42665 (* 6.0 l_0_13_73)))
 (let ((?x42666 (* ?x42665 l_0_13_77)))
 (let ((?x42662 (* 6.0 l_0_13_72)))
 (let ((?x42663 (* ?x42662 l_0_13_76)))
 (let ((?x42659 (* 6.0 l_0_13_71)))
 (let ((?x42660 (* ?x42659 l_0_13_75)))
 (let ((?x42656 (* 6.0 l_0_13_70)))
 (let ((?x42657 (* ?x42656 l_0_13_74)))
 (let ((?x42650 (* 6.0 l_0_13_52)))
 (let ((?x42651 (* ?x42650 l_0_13_56)))
 (let ((?x42647 (* 6.0 l_0_13_51)))
 (let ((?x42648 (* ?x42647 l_0_13_55)))
 (let ((?x42644 (* 6.0 l_0_13_50)))
 (let ((?x42645 (* ?x42644 l_0_13_54)))
 (let ((?x43903 (+ (- (- (- (* (* (- 6.0) l_0_13_49) l_0_13_53) ?x42645) ?x42648) ?x42651) ?x42657)))
 (= (+ (+ (+ ?x43903 ?x42660) ?x42663) ?x42666) 0.0)))))))))))))))))
(assert
 (let ((?x42665 (* 6.0 l_0_13_73)))
 (let ((?x42763 (* ?x42665 l_0_13_82)))
 (let ((?x42662 (* 6.0 l_0_13_72)))
 (let ((?x42761 (* ?x42662 l_0_13_81)))
 (let ((?x42659 (* 6.0 l_0_13_71)))
 (let ((?x42759 (* ?x42659 l_0_13_80)))
 (let ((?x42656 (* 6.0 l_0_13_70)))
 (let ((?x42757 (* ?x42656 l_0_13_79)))
 (let ((?x42650 (* 6.0 l_0_13_52)))
 (let ((?x42752 (* ?x42650 l_0_13_61)))
 (let ((?x42647 (* 6.0 l_0_13_51)))
 (let ((?x42750 (* ?x42647 l_0_13_60)))
 (let ((?x42644 (* 6.0 l_0_13_50)))
 (let ((?x42748 (* ?x42644 l_0_13_59)))
 (let ((?x43920 (+ (- (- (- (* (* (- 6.0) l_0_13_49) l_0_13_58) ?x42748) ?x42750) ?x42752) ?x42757)))
 (= (+ (+ (+ ?x43920 ?x42759) ?x42761) ?x42763) 0.0)))))))))))))))))
(assert
 (let ((?x42875 (* l_0_13_78 l_0_13_78)))
 (let ((?x42876 (* 3.0 ?x42875)))
 (let ((?x42872 (* l_0_13_77 l_0_13_77)))
 (let ((?x42873 (* 3.0 ?x42872)))
 (let ((?x42869 (* l_0_13_76 l_0_13_76)))
 (let ((?x42870 (* 3.0 ?x42869)))
 (let ((?x42866 (* l_0_13_75 l_0_13_75)))
 (let ((?x42867 (* 3.0 ?x42866)))
 (let ((?x42863 (* l_0_13_74 l_0_13_74)))
 (let ((?x42864 (* 3.0 ?x42863)))
 (let ((?x42861 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x42858 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x42855 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x42852 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x33657 (- (- (- (- (* (* (- 3.0) l_0_13_53) l_0_13_53) ?x42852) ?x42855) ?x42858) ?x42861)))
 (= (+ (+ (+ (+ (+ ?x33657 ?x42864) ?x42867) ?x42870) ?x42873) ?x42876) 0.0)))))))))))))))))
(assert
 (let ((?x42980 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x42977 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x42974 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x42971 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x42968 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x42965 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x42962 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x42959 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x42956 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x43935 (- (- (- (- (* (* (- 6.0) l_0_13_53) l_0_13_58) ?x42956) ?x42959) ?x42962) ?x42965)))
 (= (+ (+ (+ (+ (+ ?x43935 ?x42968) ?x42971) ?x42974) ?x42977) ?x42980) 0.0))))))))))))
(assert
 (let ((?x43157 (* l_0_13_84 l_0_13_84)))
 (let ((?x43158 (* 3.0 ?x43157)))
 (let ((?x43154 (* l_0_13_83 l_0_13_83)))
 (let ((?x43155 (* 3.0 ?x43154)))
 (let ((?x43151 (* l_0_13_82 l_0_13_82)))
 (let ((?x43152 (* 3.0 ?x43151)))
 (let ((?x43148 (* l_0_13_81 l_0_13_81)))
 (let ((?x43149 (* 3.0 ?x43148)))
 (let ((?x43145 (* l_0_13_80 l_0_13_80)))
 (let ((?x43146 (* 3.0 ?x43145)))
 (let ((?x43142 (* l_0_13_79 l_0_13_79)))
 (let ((?x43143 (* 3.0 ?x43142)))
 (let ((?x43140 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43137 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43134 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43131 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43128 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x43945 (- (- (- (- (* (* (- 3.0) l_0_13_58) l_0_13_58) ?x43128) ?x43131) ?x43134) ?x43137)))
 (let ((?x43952 (+ (+ (+ (+ (+ (+ (- ?x43945 ?x43140) ?x43143) ?x43146) ?x43149) ?x43152) ?x43155) ?x43158)))
 (= ?x43952 0.0)))))))))))))))))))))
(assert
 (let ((?x42598 (* l_0_13_73 l_0_13_73)))
 (let ((?x42595 (* l_0_13_72 l_0_13_72)))
 (let ((?x42592 (* l_0_13_71 l_0_13_71)))
 (let ((?x42589 (* l_0_13_70 l_0_13_70)))
 (let ((?x31981 (* l_0_13_52 l_0_13_52)))
 (let ((?x31933 (* l_0_13_51 l_0_13_51)))
 (let ((?x43957 (+ (+ (+ (* l_0_13_49 l_0_13_49) (* l_0_13_50 l_0_13_50)) ?x31933) ?x31981)))
 (= (- (- (- (- ?x43957 ?x42589) ?x42592) ?x42595) ?x42598) 0.0)))))))))
(assert
 (let ((?x43394 (* 2.0 l_0_13_73)))
 (let ((?x43395 (* ?x43394 l_0_13_77)))
 (let ((?x43391 (* 2.0 l_0_13_72)))
 (let ((?x43392 (* ?x43391 l_0_13_76)))
 (let ((?x43388 (* 2.0 l_0_13_71)))
 (let ((?x43389 (* ?x43388 l_0_13_75)))
 (let ((?x43385 (* 2.0 l_0_13_70)))
 (let ((?x43386 (* ?x43385 l_0_13_74)))
 (let ((?x43380 (* 2.0 l_0_13_52)))
 (let ((?x43381 (* ?x43380 l_0_13_56)))
 (let ((?x43377 (* 2.0 l_0_13_51)))
 (let ((?x43378 (* ?x43377 l_0_13_55)))
 (let ((?x5664 (* 2.0 l_0_13_50)))
 (let ((?x32964 (* ?x5664 l_0_13_54)))
 (let ((?x5726 (* 2.0 l_0_13_49)))
 (let ((?x21943 (* ?x5726 l_0_13_53)))
 (let ((?x42555 (* l_0_13_136 l_0_13_136)))
 (let ((?x42553 (* l_0_13_135 l_0_13_135)))
 (let ((?x43977 (- (- (* (- l_0_13_133) l_0_13_133) (* l_0_13_134 l_0_13_134)) ?x42553)))
 (let ((?x43984 (- (- (+ (+ (+ (+ (- ?x43977 ?x42555) ?x21943) ?x32964) ?x43378) ?x43381) ?x43386) ?x43389)))
 (= (- (- ?x43984 ?x43392) ?x43395) 0.0))))))))))))))))))))))
(assert
 (let ((?x44037 (* l_0_13_94 l_0_13_94)))
 (let ((?x44035 (* l_0_13_93 l_0_13_93)))
 (let ((?x44033 (* l_0_13_92 l_0_13_92)))
 (let ((?x44031 (* l_0_13_91 l_0_13_91)))
 (let ((?x43394 (* 2.0 l_0_13_73)))
 (let ((?x43466 (* ?x43394 l_0_13_82)))
 (let ((?x43391 (* 2.0 l_0_13_72)))
 (let ((?x43464 (* ?x43391 l_0_13_81)))
 (let ((?x43388 (* 2.0 l_0_13_71)))
 (let ((?x43462 (* ?x43388 l_0_13_80)))
 (let ((?x43385 (* 2.0 l_0_13_70)))
 (let ((?x43460 (* ?x43385 l_0_13_79)))
 (let ((?x43380 (* 2.0 l_0_13_52)))
 (let ((?x43456 (* ?x43380 l_0_13_61)))
 (let ((?x43377 (* 2.0 l_0_13_51)))
 (let ((?x43454 (* ?x43377 l_0_13_60)))
 (let ((?x5664 (* 2.0 l_0_13_50)))
 (let ((?x43452 (* ?x5664 l_0_13_59)))
 (let ((?x5726 (* 2.0 l_0_13_49)))
 (let ((?x43450 (* ?x5726 l_0_13_58)))
 (let ((?x44021 (* l_0_13_178 l_0_13_178)))
 (let ((?x44019 (* l_0_13_177 l_0_13_177)))
 (let ((?x44017 (* l_0_13_176 l_0_13_176)))
 (let ((?x44015 (* l_0_13_175 l_0_13_175)))
 (let ((?x44013 (* l_0_13_157 l_0_13_157)))
 (let ((?x44011 (* l_0_13_156 l_0_13_156)))
 (let ((?x44009 (* l_0_13_155 l_0_13_155)))
 (let ((?x44007 (* l_0_13_154 l_0_13_154)))
 (let ((?x44005 (* l_0_13_115 l_0_13_115)))
 (let ((?x44003 (* l_0_13_114 l_0_13_114)))
 (let ((?x44004 (+ (+ (* l_0_13_112 l_0_13_112) (* l_0_13_113 l_0_13_113)) ?x44003)))
 (let ((?x44018 (+ (+ (- (- (- (- (+ ?x44004 ?x44005) ?x44007) ?x44009) ?x44011) ?x44013) ?x44015) ?x44017)))
 (let ((?x44027 (- (+ (+ (+ (+ (+ (+ ?x44018 ?x44019) ?x44021) ?x43450) ?x43452) ?x43454) ?x43456) ?x43460)))
 (let ((?x44038 (- (- (- (- (- (- (- ?x44027 ?x43462) ?x43464) ?x43466) ?x44031) ?x44033) ?x44035) ?x44037)))
 (= ?x44038 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42875 (* l_0_13_78 l_0_13_78)))
 (let ((?x42872 (* l_0_13_77 l_0_13_77)))
 (let ((?x42869 (* l_0_13_76 l_0_13_76)))
 (let ((?x42866 (* l_0_13_75 l_0_13_75)))
 (let ((?x42863 (* l_0_13_74 l_0_13_74)))
 (let ((?x32523 (* l_0_13_57 l_0_13_57)))
 (let ((?x32471 (* l_0_13_56 l_0_13_56)))
 (let ((?x32355 (* l_0_13_55 l_0_13_55)))
 (let ((?x32491 (* l_0_13_54 l_0_13_54)))
 (let ((?x32485 (* l_0_13_53 l_0_13_53)))
 (let ((?x42623 (* 2.0 l_0_13_136)))
 (let ((?x42624 (* ?x42623 l_0_13_140)))
 (let ((?x42620 (* 2.0 l_0_13_135)))
 (let ((?x42621 (* ?x42620 l_0_13_139)))
 (let ((?x42617 (* 2.0 l_0_13_134)))
 (let ((?x42618 (* ?x42617 l_0_13_138)))
 (let ((?x44051 (+ (- (- (- (* (* (- 2.0) l_0_13_133) l_0_13_137) ?x42618) ?x42621) ?x42624) ?x32485)))
 (let ((?x44058 (- (- (- (+ (+ (+ (+ ?x44051 ?x32491) ?x32355) ?x32471) ?x32523) ?x42863) ?x42866) ?x42869)))
 (= (- (- ?x44058 ?x42872) ?x42875) 0.0))))))))))))))))))))
(assert
 (let ((?x44129 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x44126 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x44123 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x44120 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x43627 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x43624 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x43621 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x43618 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x43615 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x43612 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x43609 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x43606 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x43603 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x43600 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x44106 (* 2.0 l_0_13_178)))
 (let ((?x44107 (* ?x44106 l_0_13_182)))
 (let ((?x44103 (* 2.0 l_0_13_177)))
 (let ((?x44104 (* ?x44103 l_0_13_181)))
 (let ((?x44100 (* 2.0 l_0_13_176)))
 (let ((?x44101 (* ?x44100 l_0_13_180)))
 (let ((?x44097 (* 2.0 l_0_13_175)))
 (let ((?x44098 (* ?x44097 l_0_13_179)))
 (let ((?x44094 (* 2.0 l_0_13_157)))
 (let ((?x44095 (* ?x44094 l_0_13_161)))
 (let ((?x44091 (* 2.0 l_0_13_156)))
 (let ((?x44092 (* ?x44091 l_0_13_160)))
 (let ((?x44088 (* 2.0 l_0_13_155)))
 (let ((?x44089 (* ?x44088 l_0_13_159)))
 (let ((?x44085 (* 2.0 l_0_13_154)))
 (let ((?x44086 (* ?x44085 l_0_13_158)))
 (let ((?x42623 (* 2.0 l_0_13_136)))
 (let ((?x42709 (* ?x42623 l_0_13_145)))
 (let ((?x42620 (* 2.0 l_0_13_135)))
 (let ((?x42707 (* ?x42620 l_0_13_144)))
 (let ((?x42617 (* 2.0 l_0_13_134)))
 (let ((?x42705 (* ?x42617 l_0_13_143)))
 (let ((?x31924 (* 2.0 l_0_13_133)))
 (let ((?x42703 (* ?x31924 l_0_13_142)))
 (let ((?x44078 (* 2.0 l_0_13_115)))
 (let ((?x44079 (* ?x44078 l_0_13_119)))
 (let ((?x44075 (* 2.0 l_0_13_114)))
 (let ((?x44076 (* ?x44075 l_0_13_118)))
 (let ((?x44072 (* 2.0 l_0_13_113)))
 (let ((?x44073 (* ?x44072 l_0_13_117)))
 (let ((?x44081 (- (+ (+ (+ (* (* 2.0 l_0_13_112) l_0_13_116) ?x44073) ?x44076) ?x44079) ?x42703)))
 (let ((?x44096 (- (- (- (- (- (- (- ?x44081 ?x42705) ?x42707) ?x42709) ?x44086) ?x44089) ?x44092) ?x44095)))
 (let ((?x44111 (+ (+ (+ (+ (+ (+ (+ ?x44096 ?x44098) ?x44101) ?x44104) ?x44107) ?x43600) ?x43603) ?x43606)))
 (let ((?x44118 (- (- (- (- (- (+ (+ ?x44111 ?x43609) ?x43612) ?x43615) ?x43618) ?x43621) ?x43624) ?x43627)))
 (= (- (- (- (- ?x44118 ?x44120) ?x44123) ?x44126) ?x44129) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43157 (* l_0_13_84 l_0_13_84)))
 (let ((?x43154 (* l_0_13_83 l_0_13_83)))
 (let ((?x43151 (* l_0_13_82 l_0_13_82)))
 (let ((?x43148 (* l_0_13_81 l_0_13_81)))
 (let ((?x43145 (* l_0_13_80 l_0_13_80)))
 (let ((?x43142 (* l_0_13_79 l_0_13_79)))
 (let ((?x5377 (* l_0_13_63 l_0_13_63)))
 (let ((?x21684 (* l_0_13_62 l_0_13_62)))
 (let ((?x21680 (* l_0_13_61 l_0_13_61)))
 (let ((?x21671 (* l_0_13_60 l_0_13_60)))
 (let ((?x5250 (* l_0_13_59 l_0_13_59)))
 (let ((?x21668 (* l_0_13_58 l_0_13_58)))
 (let ((?x44106 (* 2.0 l_0_13_178)))
 (let ((?x44191 (* ?x44106 l_0_13_187)))
 (let ((?x44103 (* 2.0 l_0_13_177)))
 (let ((?x44189 (* ?x44103 l_0_13_186)))
 (let ((?x44100 (* 2.0 l_0_13_176)))
 (let ((?x44187 (* ?x44100 l_0_13_185)))
 (let ((?x44097 (* 2.0 l_0_13_175)))
 (let ((?x44185 (* ?x44097 l_0_13_184)))
 (let ((?x44094 (* 2.0 l_0_13_157)))
 (let ((?x44183 (* ?x44094 l_0_13_166)))
 (let ((?x44091 (* 2.0 l_0_13_156)))
 (let ((?x44181 (* ?x44091 l_0_13_165)))
 (let ((?x44088 (* 2.0 l_0_13_155)))
 (let ((?x44179 (* ?x44088 l_0_13_164)))
 (let ((?x44085 (* 2.0 l_0_13_154)))
 (let ((?x44177 (* ?x44085 l_0_13_163)))
 (let ((?x44078 (* 2.0 l_0_13_115)))
 (let ((?x44175 (* ?x44078 l_0_13_124)))
 (let ((?x44075 (* 2.0 l_0_13_114)))
 (let ((?x44173 (* ?x44075 l_0_13_123)))
 (let ((?x44072 (* 2.0 l_0_13_113)))
 (let ((?x44171 (* ?x44072 l_0_13_122)))
 (let ((?x44070 (* 2.0 l_0_13_112)))
 (let ((?x44169 (* ?x44070 l_0_13_121)))
 (let ((?x44166 (* 2.0 l_0_13_103)))
 (let ((?x44167 (* ?x44166 l_0_13_94)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x44164 (* ?x43061 l_0_13_93)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x44162 (* ?x43058 l_0_13_92)))
 (let ((?x44170 (+ (- (- (- (* (* (- 2.0) l_0_13_100) l_0_13_91) ?x44162) ?x44164) ?x44167) ?x44169)))
 (let ((?x44184 (- (- (- (- (+ (+ (+ ?x44170 ?x44171) ?x44173) ?x44175) ?x44177) ?x44179) ?x44181) ?x44183)))
 (let ((?x44195 (+ (+ (+ (+ (+ (+ (+ ?x44184 ?x44185) ?x44187) ?x44189) ?x44191) ?x21668) ?x5250) ?x21671)))
 (let ((?x44202 (- (- (- (- (+ (+ (+ ?x44195 ?x21680) ?x21684) ?x5377) ?x43142) ?x43145) ?x43148) ?x43151)))
 (= (- (- ?x44202 ?x43154) ?x43157) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44276 (* l_0_13_99 l_0_13_99)))
 (let ((?x44274 (* l_0_13_98 l_0_13_98)))
 (let ((?x44272 (* l_0_13_97 l_0_13_97)))
 (let ((?x44270 (* l_0_13_96 l_0_13_96)))
 (let ((?x44268 (* l_0_13_95 l_0_13_95)))
 (let ((?x44266 (* l_0_13_183 l_0_13_183)))
 (let ((?x44264 (* l_0_13_182 l_0_13_182)))
 (let ((?x44262 (* l_0_13_181 l_0_13_181)))
 (let ((?x44260 (* l_0_13_180 l_0_13_180)))
 (let ((?x44258 (* l_0_13_179 l_0_13_179)))
 (let ((?x44256 (* l_0_13_162 l_0_13_162)))
 (let ((?x44254 (* l_0_13_161 l_0_13_161)))
 (let ((?x44252 (* l_0_13_160 l_0_13_160)))
 (let ((?x44250 (* l_0_13_159 l_0_13_159)))
 (let ((?x44248 (* l_0_13_158 l_0_13_158)))
 (let ((?x42920 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x42917 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x42911 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x42908 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x42905 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x44241 (* l_0_13_120 l_0_13_120)))
 (let ((?x44239 (* l_0_13_119 l_0_13_119)))
 (let ((?x44237 (* l_0_13_118 l_0_13_118)))
 (let ((?x44238 (+ (+ (* l_0_13_116 l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x44237)))
 (let ((?x44247 (- (- (- (- (- (+ (+ ?x44238 ?x44239) ?x44241) ?x42905) ?x42908) ?x42911) ?x42917) ?x42920)))
 (let ((?x44261 (+ (+ (- (- (- (- (- ?x44247 ?x44248) ?x44250) ?x44252) ?x44254) ?x44256) ?x44258) ?x44260)))
 (let ((?x44275 (- (- (- (- (+ (+ (+ ?x44261 ?x44262) ?x44264) ?x44266) ?x44268) ?x44270) ?x44272) ?x44274)))
 (= (- ?x44275 ?x44276) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x44370 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x44367 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x44364 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x44361 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x44358 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x44355 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x44352 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x44349 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x44346 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x44343 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x43080 (* l_0_13_147 l_0_13_147)))
 (let ((?x43078 (* l_0_13_146 l_0_13_146)))
 (let ((?x43076 (* l_0_13_145 l_0_13_145)))
 (let ((?x43074 (* l_0_13_144 l_0_13_144)))
 (let ((?x43072 (* l_0_13_143 l_0_13_143)))
 (let ((?x43070 (* l_0_13_142 l_0_13_142)))
 (let ((?x44334 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x44331 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x44328 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x44325 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x44322 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x44319 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x44166 (* 2.0 l_0_13_103)))
 (let ((?x44316 (* ?x44166 l_0_13_98)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x44314 (* ?x43061 l_0_13_97)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x44312 (* ?x43058 l_0_13_96)))
 (let ((?x44320 (- (- (- (- (* (* (- 2.0) l_0_13_100) l_0_13_95) ?x44312) ?x44314) ?x44316) ?x44319)))
 (let ((?x44337 (- (- (+ (+ (+ (+ (+ ?x44320 ?x44322) ?x44325) ?x44328) ?x44331) ?x44334) ?x43070) ?x43072)))
 (let ((?x44350 (- (- (- (- (- (- (- ?x44337 ?x43074) ?x43076) ?x43078) ?x43080) ?x44343) ?x44346) ?x44349)))
 (let ((?x44371 (+ (+ (+ (+ (+ (- (- ?x44350 ?x44352) ?x44355) ?x44358) ?x44361) ?x44364) ?x44367) ?x44370)))
 (= ?x44371 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44482 (* l_0_13_189 l_0_13_189)))
 (let ((?x44480 (* l_0_13_188 l_0_13_188)))
 (let ((?x44478 (* l_0_13_187 l_0_13_187)))
 (let ((?x44476 (* l_0_13_186 l_0_13_186)))
 (let ((?x44474 (* l_0_13_185 l_0_13_185)))
 (let ((?x44472 (* l_0_13_184 l_0_13_184)))
 (let ((?x44470 (* l_0_13_168 l_0_13_168)))
 (let ((?x44468 (* l_0_13_167 l_0_13_167)))
 (let ((?x44466 (* l_0_13_166 l_0_13_166)))
 (let ((?x44464 (* l_0_13_165 l_0_13_165)))
 (let ((?x44462 (* l_0_13_164 l_0_13_164)))
 (let ((?x44460 (* l_0_13_163 l_0_13_163)))
 (let ((?x44458 (* l_0_13_126 l_0_13_126)))
 (let ((?x44456 (* l_0_13_125 l_0_13_125)))
 (let ((?x44454 (* l_0_13_124 l_0_13_124)))
 (let ((?x44452 (* l_0_13_123 l_0_13_123)))
 (let ((?x44450 (* l_0_13_122 l_0_13_122)))
 (let ((?x44448 (* l_0_13_121 l_0_13_121)))
 (let ((?x44446 (* l_0_13_105 l_0_13_105)))
 (let ((?x44444 (* l_0_13_104 l_0_13_104)))
 (let ((?x44442 (* l_0_13_103 l_0_13_103)))
 (let ((?x44440 (* l_0_13_102 l_0_13_102)))
 (let ((?x44441 (- (- (* (- l_0_13_100) l_0_13_100) (* l_0_13_101 l_0_13_101)) ?x44440)))
 (let ((?x44455 (+ (+ (+ (+ (- (- (- ?x44441 ?x44442) ?x44444) ?x44446) ?x44448) ?x44450) ?x44452) ?x44454)))
 (let ((?x44469 (- (- (- (- (- (+ (+ ?x44455 ?x44456) ?x44458) ?x44460) ?x44462) ?x44464) ?x44466) ?x44468)))
 (let ((?x44483 (+ (+ (+ (+ (+ (+ (- ?x44469 ?x44470) ?x44472) ?x44474) ?x44476) ?x44478) ?x44480) ?x44482)))
 (= ?x44483 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x41091 (* l_0_13_85 l_0_13_85)))
 (let ((?x41087 (* l_0_13_169 l_0_13_169)))
 (let ((?x34282 (- (+ (* (- l_0_13_106) l_0_13_106) (* l_0_13_148 l_0_13_148)) ?x41087)))
 (= (+ ?x34282 ?x41091) 0.0)))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41490 (* ?x41296 l_0_13_88)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41472 (* ?x41278 l_0_13_172)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41468 (* ?x41272 l_0_13_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_109) ?x41468) ?x41472) ?x41490) 0.0))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41627 (* ?x41296 l_0_13_91)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41611 (* ?x41278 l_0_13_175)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41607 (* ?x41272 l_0_13_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_112) ?x41607) ?x41611) ?x41627) 0.0))))))))
(assert
 (let ((?x41296 (* 2.0 l_0_13_85)))
 (let ((?x41732 (* ?x41296 l_0_13_95)))
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41715 (* ?x41278 l_0_13_179)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41710 (* ?x41272 l_0_13_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_116) ?x41710) ?x41715) ?x41732) 0.0))))))))
(assert
 (let ((?x41278 (* 2.0 l_0_13_169)))
 (let ((?x41777 (* ?x41278 l_0_13_184)))
 (let ((?x41272 (* 2.0 l_0_13_148)))
 (let ((?x41773 (* ?x41272 l_0_13_163)))
 (let ((?x41269 (* 2.0 l_0_13_106)))
 (let ((?x41771 (* ?x41269 l_0_13_121)))
 (= (- (+ (- (* (* 2.0 l_0_13_100) l_0_13_85) ?x41771) ?x41773) ?x41777) 0.0))))))))
(assert
 (let ((?x42504 (* l_0_13_90 l_0_13_90)))
 (let ((?x42502 (* l_0_13_89 l_0_13_89)))
 (let ((?x42500 (* l_0_13_88 l_0_13_88)))
 (let ((?x42478 (* l_0_13_174 l_0_13_174)))
 (let ((?x42476 (* l_0_13_173 l_0_13_173)))
 (let ((?x42474 (* l_0_13_172 l_0_13_172)))
 (let ((?x42470 (* l_0_13_153 l_0_13_153)))
 (let ((?x42468 (* l_0_13_152 l_0_13_152)))
 (let ((?x42466 (* l_0_13_151 l_0_13_151)))
 (let ((?x42458 (* l_0_13_111 l_0_13_111)))
 (let ((?x44531 (- (- (* (- l_0_13_109) l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x42458)))
 (let ((?x44538 (+ (- (- (- (+ (+ (+ ?x44531 ?x42466) ?x42468) ?x42470) ?x42474) ?x42476) ?x42478) ?x42500)))
 (= (+ (+ ?x44538 ?x42502) ?x42504) 0.0))))))))))))))
(assert
 (let ((?x42771 (* 2.0 l_0_13_90)))
 (let ((?x42772 (* ?x42771 l_0_13_93)))
 (let ((?x42768 (* 2.0 l_0_13_89)))
 (let ((?x42769 (* ?x42768 l_0_13_92)))
 (let ((?x42765 (* 2.0 l_0_13_88)))
 (let ((?x42766 (* ?x42765 l_0_13_91)))
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x42731 (* ?x42730 l_0_13_177)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x42728 (* ?x42727 l_0_13_176)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x42725 (* ?x42724 l_0_13_175)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x42718 (* ?x42717 l_0_13_156)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x42715 (* ?x42714 l_0_13_155)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x42712 (* ?x42711 l_0_13_154)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x42701 (* ?x42700 l_0_13_114)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x42698 (* ?x32113 l_0_13_113)))
 (let ((?x34393 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_112) ?x42698) ?x42701) ?x42712) ?x42715)))
 (let ((?x44543 (+ (+ (+ (- (- (- (+ ?x34393 ?x42718) ?x42725) ?x42728) ?x42731) ?x42766) ?x42769) ?x42772)))
 (= ?x44543 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42771 (* 2.0 l_0_13_90)))
 (let ((?x42986 (* ?x42771 l_0_13_97)))
 (let ((?x42768 (* 2.0 l_0_13_89)))
 (let ((?x42984 (* ?x42768 l_0_13_96)))
 (let ((?x42765 (* 2.0 l_0_13_88)))
 (let ((?x42982 (* ?x42765 l_0_13_95)))
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x42935 (* ?x42730 l_0_13_181)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x42933 (* ?x42727 l_0_13_180)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x42931 (* ?x42724 l_0_13_179)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x42929 (* ?x42717 l_0_13_160)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x42927 (* ?x42714 l_0_13_159)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x42925 (* ?x42711 l_0_13_158)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x42895 (* ?x42700 l_0_13_118)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x42893 (* ?x32113 l_0_13_117)))
 (let ((?x44553 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_116) ?x42893) ?x42895) ?x42925) ?x42927)))
 (let ((?x44560 (+ (+ (+ (- (- (- (+ ?x44553 ?x42929) ?x42931) ?x42933) ?x42935) ?x42982) ?x42984) ?x42986)))
 (= ?x44560 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42730 (* 2.0 l_0_13_174)))
 (let ((?x43096 (* ?x42730 l_0_13_186)))
 (let ((?x42727 (* 2.0 l_0_13_173)))
 (let ((?x43094 (* ?x42727 l_0_13_185)))
 (let ((?x42724 (* 2.0 l_0_13_172)))
 (let ((?x43092 (* ?x42724 l_0_13_184)))
 (let ((?x42717 (* 2.0 l_0_13_153)))
 (let ((?x43086 (* ?x42717 l_0_13_165)))
 (let ((?x42714 (* 2.0 l_0_13_152)))
 (let ((?x43084 (* ?x42714 l_0_13_164)))
 (let ((?x42711 (* 2.0 l_0_13_151)))
 (let ((?x43082 (* ?x42711 l_0_13_163)))
 (let ((?x42700 (* 2.0 l_0_13_111)))
 (let ((?x43068 (* ?x42700 l_0_13_123)))
 (let ((?x32113 (* 2.0 l_0_13_110)))
 (let ((?x43066 (* ?x32113 l_0_13_122)))
 (let ((?x32101 (* 2.0 l_0_13_109)))
 (let ((?x43064 (* ?x32101 l_0_13_121)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x43062 (* ?x43061 l_0_13_90)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x43059 (* ?x43058 l_0_13_89)))
 (let ((?x6906 (- (- (+ (+ (* (* 2.0 l_0_13_100) l_0_13_88) ?x43059) ?x43062) ?x43064) ?x43066)))
 (let ((?x34386 (- (- (- (+ (+ (+ (- ?x6906 ?x43068) ?x43082) ?x43084) ?x43086) ?x43092) ?x43094) ?x43096)))
 (= ?x34386 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44037 (* l_0_13_94 l_0_13_94)))
 (let ((?x44035 (* l_0_13_93 l_0_13_93)))
 (let ((?x44033 (* l_0_13_92 l_0_13_92)))
 (let ((?x44031 (* l_0_13_91 l_0_13_91)))
 (let ((?x44021 (* l_0_13_178 l_0_13_178)))
 (let ((?x44019 (* l_0_13_177 l_0_13_177)))
 (let ((?x44017 (* l_0_13_176 l_0_13_176)))
 (let ((?x44015 (* l_0_13_175 l_0_13_175)))
 (let ((?x44013 (* l_0_13_157 l_0_13_157)))
 (let ((?x44011 (* l_0_13_156 l_0_13_156)))
 (let ((?x44009 (* l_0_13_155 l_0_13_155)))
 (let ((?x44007 (* l_0_13_154 l_0_13_154)))
 (let ((?x44005 (* l_0_13_115 l_0_13_115)))
 (let ((?x44003 (* l_0_13_114 l_0_13_114)))
 (let ((?x34562 (- (- (* (- l_0_13_112) l_0_13_112) (* l_0_13_113 l_0_13_113)) ?x44003)))
 (let ((?x24235 (- (- (+ (+ (+ (+ (- ?x34562 ?x44005) ?x44007) ?x44009) ?x44011) ?x44013) ?x44015) ?x44017)))
 (= (+ (+ (+ (+ (- (- ?x24235 ?x44019) ?x44021) ?x44031) ?x44033) ?x44035) ?x44037) 0.0))))))))))))))))))
(assert
 (let ((?x44129 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x44126 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x44123 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x44120 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x44106 (* 2.0 l_0_13_178)))
 (let ((?x44107 (* ?x44106 l_0_13_182)))
 (let ((?x44103 (* 2.0 l_0_13_177)))
 (let ((?x44104 (* ?x44103 l_0_13_181)))
 (let ((?x44100 (* 2.0 l_0_13_176)))
 (let ((?x44101 (* ?x44100 l_0_13_180)))
 (let ((?x44097 (* 2.0 l_0_13_175)))
 (let ((?x44098 (* ?x44097 l_0_13_179)))
 (let ((?x44094 (* 2.0 l_0_13_157)))
 (let ((?x44095 (* ?x44094 l_0_13_161)))
 (let ((?x44091 (* 2.0 l_0_13_156)))
 (let ((?x44092 (* ?x44091 l_0_13_160)))
 (let ((?x44088 (* 2.0 l_0_13_155)))
 (let ((?x44089 (* ?x44088 l_0_13_159)))
 (let ((?x44085 (* 2.0 l_0_13_154)))
 (let ((?x44086 (* ?x44085 l_0_13_158)))
 (let ((?x44078 (* 2.0 l_0_13_115)))
 (let ((?x44079 (* ?x44078 l_0_13_119)))
 (let ((?x44075 (* 2.0 l_0_13_114)))
 (let ((?x44076 (* ?x44075 l_0_13_118)))
 (let ((?x44072 (* 2.0 l_0_13_113)))
 (let ((?x44073 (* ?x44072 l_0_13_117)))
 (let ((?x8359 (+ (- (- (- (* (* (- 2.0) l_0_13_112) l_0_13_116) ?x44073) ?x44076) ?x44079) ?x44086)))
 (let ((?x44567 (- (- (- (- (+ (+ (+ ?x8359 ?x44089) ?x44092) ?x44095) ?x44098) ?x44101) ?x44104) ?x44107)))
 (= (+ (+ (+ (+ ?x44567 ?x44120) ?x44123) ?x44126) ?x44129) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x44106 (* 2.0 l_0_13_178)))
 (let ((?x44191 (* ?x44106 l_0_13_187)))
 (let ((?x44103 (* 2.0 l_0_13_177)))
 (let ((?x44189 (* ?x44103 l_0_13_186)))
 (let ((?x44100 (* 2.0 l_0_13_176)))
 (let ((?x44187 (* ?x44100 l_0_13_185)))
 (let ((?x44097 (* 2.0 l_0_13_175)))
 (let ((?x44185 (* ?x44097 l_0_13_184)))
 (let ((?x44094 (* 2.0 l_0_13_157)))
 (let ((?x44183 (* ?x44094 l_0_13_166)))
 (let ((?x44091 (* 2.0 l_0_13_156)))
 (let ((?x44181 (* ?x44091 l_0_13_165)))
 (let ((?x44088 (* 2.0 l_0_13_155)))
 (let ((?x44179 (* ?x44088 l_0_13_164)))
 (let ((?x44085 (* 2.0 l_0_13_154)))
 (let ((?x44177 (* ?x44085 l_0_13_163)))
 (let ((?x44078 (* 2.0 l_0_13_115)))
 (let ((?x44175 (* ?x44078 l_0_13_124)))
 (let ((?x44075 (* 2.0 l_0_13_114)))
 (let ((?x44173 (* ?x44075 l_0_13_123)))
 (let ((?x44072 (* 2.0 l_0_13_113)))
 (let ((?x44171 (* ?x44072 l_0_13_122)))
 (let ((?x44070 (* 2.0 l_0_13_112)))
 (let ((?x44169 (* ?x44070 l_0_13_121)))
 (let ((?x44166 (* 2.0 l_0_13_103)))
 (let ((?x44167 (* ?x44166 l_0_13_94)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x44164 (* ?x43061 l_0_13_93)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x44162 (* ?x43058 l_0_13_92)))
 (let ((?x34594 (- (+ (+ (+ (* (* 2.0 l_0_13_100) l_0_13_91) ?x44162) ?x44164) ?x44167) ?x44169)))
 (let ((?x44588 (+ (+ (+ (+ (- (- (- ?x34594 ?x44171) ?x44173) ?x44175) ?x44177) ?x44179) ?x44181) ?x44183)))
 (= (- (- (- (- ?x44588 ?x44185) ?x44187) ?x44189) ?x44191) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44276 (* l_0_13_99 l_0_13_99)))
 (let ((?x44274 (* l_0_13_98 l_0_13_98)))
 (let ((?x44272 (* l_0_13_97 l_0_13_97)))
 (let ((?x44270 (* l_0_13_96 l_0_13_96)))
 (let ((?x44268 (* l_0_13_95 l_0_13_95)))
 (let ((?x44266 (* l_0_13_183 l_0_13_183)))
 (let ((?x44264 (* l_0_13_182 l_0_13_182)))
 (let ((?x44262 (* l_0_13_181 l_0_13_181)))
 (let ((?x44260 (* l_0_13_180 l_0_13_180)))
 (let ((?x44258 (* l_0_13_179 l_0_13_179)))
 (let ((?x44256 (* l_0_13_162 l_0_13_162)))
 (let ((?x44254 (* l_0_13_161 l_0_13_161)))
 (let ((?x44252 (* l_0_13_160 l_0_13_160)))
 (let ((?x44250 (* l_0_13_159 l_0_13_159)))
 (let ((?x44248 (* l_0_13_158 l_0_13_158)))
 (let ((?x44241 (* l_0_13_120 l_0_13_120)))
 (let ((?x44239 (* l_0_13_119 l_0_13_119)))
 (let ((?x44237 (* l_0_13_118 l_0_13_118)))
 (let ((?x7381 (- (- (* (- l_0_13_116) l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x44237)))
 (let ((?x44596 (+ (+ (+ (+ (+ (- (- ?x7381 ?x44239) ?x44241) ?x44248) ?x44250) ?x44252) ?x44254) ?x44256)))
 (let ((?x44603 (+ (+ (- (- (- (- (- ?x44596 ?x44258) ?x44260) ?x44262) ?x44264) ?x44266) ?x44268) ?x44270)))
 (= (+ (+ (+ ?x44603 ?x44272) ?x44274) ?x44276) 0.0)))))))))))))))))))))))
(assert
 (let ((?x44370 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x44367 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x44364 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x44361 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x44358 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x44355 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x44352 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x44349 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x44346 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x44343 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x44334 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x44331 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x44328 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x44325 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x44322 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x44319 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x44166 (* 2.0 l_0_13_103)))
 (let ((?x44316 (* ?x44166 l_0_13_98)))
 (let ((?x43061 (* 2.0 l_0_13_102)))
 (let ((?x44314 (* ?x43061 l_0_13_97)))
 (let ((?x43058 (* 2.0 l_0_13_101)))
 (let ((?x44312 (* ?x43058 l_0_13_96)))
 (let ((?x4680 (+ (+ (+ (+ (* (* 2.0 l_0_13_100) l_0_13_95) ?x44312) ?x44314) ?x44316) ?x44319)))
 (let ((?x24506 (+ (+ (- (- (- (- (- ?x4680 ?x44322) ?x44325) ?x44328) ?x44331) ?x44334) ?x44343) ?x44346)))
 (let ((?x44614 (- (- (- (- (+ (+ (+ ?x24506 ?x44349) ?x44352) ?x44355) ?x44358) ?x44361) ?x44364) ?x44367)))
 (= (- ?x44614 ?x44370) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x44482 (* l_0_13_189 l_0_13_189)))
 (let ((?x44480 (* l_0_13_188 l_0_13_188)))
 (let ((?x44478 (* l_0_13_187 l_0_13_187)))
 (let ((?x44476 (* l_0_13_186 l_0_13_186)))
 (let ((?x44474 (* l_0_13_185 l_0_13_185)))
 (let ((?x44472 (* l_0_13_184 l_0_13_184)))
 (let ((?x44470 (* l_0_13_168 l_0_13_168)))
 (let ((?x44468 (* l_0_13_167 l_0_13_167)))
 (let ((?x44466 (* l_0_13_166 l_0_13_166)))
 (let ((?x44464 (* l_0_13_165 l_0_13_165)))
 (let ((?x44462 (* l_0_13_164 l_0_13_164)))
 (let ((?x44460 (* l_0_13_163 l_0_13_163)))
 (let ((?x44458 (* l_0_13_126 l_0_13_126)))
 (let ((?x44456 (* l_0_13_125 l_0_13_125)))
 (let ((?x44454 (* l_0_13_124 l_0_13_124)))
 (let ((?x44452 (* l_0_13_123 l_0_13_123)))
 (let ((?x44450 (* l_0_13_122 l_0_13_122)))
 (let ((?x44448 (* l_0_13_121 l_0_13_121)))
 (let ((?x44446 (* l_0_13_105 l_0_13_105)))
 (let ((?x44444 (* l_0_13_104 l_0_13_104)))
 (let ((?x44442 (* l_0_13_103 l_0_13_103)))
 (let ((?x44440 (* l_0_13_102 l_0_13_102)))
 (let ((?x44623 (+ (+ (* l_0_13_100 l_0_13_100) (* l_0_13_101 l_0_13_101)) ?x44440)))
 (let ((?x44630 (- (- (- (- (+ (+ (+ ?x44623 ?x44442) ?x44444) ?x44446) ?x44448) ?x44450) ?x44452) ?x44454)))
 (let ((?x44637 (+ (+ (+ (+ (+ (- (- ?x44630 ?x44456) ?x44458) ?x44460) ?x44462) ?x44464) ?x44466) ?x44468)))
 (let ((?x44644 (- (- (- (- (- (- (+ ?x44637 ?x44470) ?x44472) ?x44474) ?x44476) ?x44478) ?x44480) ?x44482)))
 (= ?x44644 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x42829 (* l_0_13_141 l_0_13_141)))
 (let ((?x42827 (* l_0_13_140 l_0_13_140)))
 (let ((?x42823 (* l_0_13_139 l_0_13_139)))
 (let ((?x20752 (- (- (* (- l_0_13_137) l_0_13_137) (* l_0_13_138 l_0_13_138)) ?x42823)))
 (= (- (- ?x20752 ?x42827) ?x42829) 0.0))))))
(assert
 (>= l_0_13_1 0.0))
(assert
 (>= l_0_13_3 0.0))
(assert
 (>= l_0_13_6 0.0))
(assert
 (>= l_0_13_10 0.0))
(assert
 (>= l_0_13_15 0.0))
(assert
 (>= l_0_13_21 0.0))
(assert
 (>= l_0_13_22 0.0))
(assert
 (>= l_0_13_24 0.0))
(assert
 (>= l_0_13_27 0.0))
(assert
 (>= l_0_13_31 0.0))
(assert
 (>= l_0_13_36 0.0))
(assert
 (>= l_0_13_42 0.0))
(assert
 (>= l_0_13_43 0.0))
(assert
 (>= l_0_13_45 0.0))
(assert
 (>= l_0_13_48 0.0))
(assert
 (>= l_0_13_52 0.0))
(assert
 (>= l_0_13_57 0.0))
(assert
 (>= l_0_13_63 0.0))
(assert
 (>= l_0_13_64 0.0))
(assert
 (>= l_0_13_66 0.0))
(assert
 (>= l_0_13_69 0.0))
(assert
 (>= l_0_13_73 0.0))
(assert
 (>= l_0_13_78 0.0))
(assert
 (>= l_0_13_84 0.0))
(assert
 (>= l_0_13_85 0.0))
(assert
 (>= l_0_13_87 0.0))
(assert
 (>= l_0_13_90 0.0))
(assert
 (>= l_0_13_94 0.0))
(assert
 (>= l_0_13_99 0.0))
(assert
 (>= l_0_13_105 0.0))
(assert
 (>= l_0_13_106 0.0))
(assert
 (>= l_0_13_108 0.0))
(assert
 (>= l_0_13_111 0.0))
(assert
 (>= l_0_13_115 0.0))
(assert
 (>= l_0_13_120 0.0))
(assert
 (>= l_0_13_126 0.0))
(assert
 (>= l_0_13_127 0.0))
(assert
 (>= l_0_13_129 0.0))
(assert
 (>= l_0_13_132 0.0))
(assert
 (>= l_0_13_136 0.0))
(assert
 (>= l_0_13_141 0.0))
(assert
 (>= l_0_13_147 0.0))
(assert
 (>= l_0_13_148 0.0))
(assert
 (>= l_0_13_150 0.0))
(assert
 (>= l_0_13_153 0.0))
(assert
 (>= l_0_13_157 0.0))
(assert
 (>= l_0_13_162 0.0))
(assert
 (>= l_0_13_168 0.0))
(assert
 (>= l_0_13_169 0.0))
(assert
 (>= l_0_13_171 0.0))
(assert
 (>= l_0_13_174 0.0))
(assert
 (>= l_0_13_178 0.0))
(assert
 (>= l_0_13_183 0.0))
(assert
 (>= l_0_13_189 0.0))
(assert
 (>= l_0_13_190 0.0))
(assert
 (>= l_0_13_192 0.0))
(assert
 (>= l_0_13_195 0.0))
(assert
 (>= l_0_13_199 0.0))
(assert
 (>= l_0_13_204 0.0))
(assert
 (>= l_0_13_210 0.0))
(assert
 (let ((?x44746 (* l_0_14_66 l_0_14_66)))
 (let ((?x44747 (* 3.0 ?x44746)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x44744 (* ?x44743 l_0_14_68)))
 (let ((?x44740 (* l_0_14_65 l_0_14_65)))
 (let ((?x44741 (* 3.0 ?x44740)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x44738 (* ?x44737 l_0_14_67)))
 (let ((?x44735 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x44732 (* ?x44731 l_0_14_47)))
 (let ((?x44729 (* (* 3.0 l_0_14_44) l_0_14_44)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x44726 (* ?x44725 l_0_14_46)))
 (let ((?x44722 (* l_0_14_3 l_0_14_3)))
 (let ((?x44723 (* 6.0 ?x44722)))
 (let ((?x44719 (* 12.0 l_0_14_3)))
 (let ((?x44720 (* ?x44719 l_0_14_5)))
 (let ((?x44717 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x44714 (* ?x44713 l_0_14_26)))
 (let ((?x44711 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x44708 (* ?x44707 l_0_14_25)))
 (let ((?x44698 (* l_0_14_2 l_0_14_2)))
 (let ((?x44699 (* 6.0 ?x44698)))
 (let ((?x44695 (* 12.0 l_0_14_2)))
 (let ((?x44696 (* ?x44695 l_0_14_4)))
 (let ((?x44691 (- (+ (* l_0_14_128 l_0_14_128) (* l_0_14_129 l_0_14_129)) (* (* 2.0 l_0_14_191) l_0_14_193))))
 (let ((?x44703 (- (+ (+ (- ?x44691 (* (* 2.0 l_0_14_192) l_0_14_194)) ?x44696) ?x44699) (* (* 2.0 l_0_14_212) l_0_14_214))))
 (let ((?x44715 (- (- (- (- ?x44703 (* (* 2.0 l_0_14_213) l_0_14_215)) ?x44708) ?x44711) ?x44714)))
 (let ((?x44736 (- (- (- (- (+ (+ (- ?x44715 ?x44717) ?x44720) ?x44723) ?x44726) ?x44729) ?x44732) ?x44735)))
 (= (+ (+ (+ (+ (+ ?x44736 ?x44738) ?x44741) ?x44744) ?x44747) 6.0) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44722 (* l_0_14_3 l_0_14_3)))
 (let ((?x44723 (* 6.0 ?x44722)))
 (let ((?x44717 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x44711 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x44816 (* l_0_14_213 l_0_14_213)))
 (let ((?x44814 (* l_0_14_212 l_0_14_212)))
 (let ((?x44698 (* l_0_14_2 l_0_14_2)))
 (let ((?x44699 (* 6.0 ?x44698)))
 (let ((?x44799 (* l_0_14_192 l_0_14_192)))
 (let ((?x44815 (- (+ (- (- (- _a_12_) (* l_0_14_191 l_0_14_191)) ?x44799) ?x44699) ?x44814)))
 (let ((?x44823 (- (+ (- (- (- ?x44815 ?x44816) ?x44711) ?x44717) ?x44723) (* (* 1.0 l_0_14_44) l_0_14_44))))
 (let ((?x44828 (+ (- ?x44823 (* (* 1.0 l_0_14_45) l_0_14_45)) (* 1.0 (* l_0_14_65 l_0_14_65)))))
 (= (+ (+ ?x44828 (* 1.0 (* l_0_14_66 l_0_14_66))) 12.0) 0.0))))))))))))))
(assert
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x44868 (* ?x44867 l_0_14_65)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x44865 (* ?x44864 l_0_14_44)))
 (let ((?x44722 (* l_0_14_3 l_0_14_3)))
 (let ((?x23010 (* l_0_14_24 l_0_14_24)))
 (let ((?x34750 (* l_0_14_23 l_0_14_23)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x44859 (* ?x44858 l_0_14_23)))
 (let ((?x44698 (* l_0_14_2 l_0_14_2)))
 (let ((?x44853 (- (+ (- _a_13_) (* (* 12.0 l_0_14_1) l_0_14_2)) (* (* 2.0 l_0_14_190) l_0_14_191))))
 (let ((?x44861 (+ (- (- (- ?x44853 ?x44698) (* (* 2.0 l_0_14_211) l_0_14_212)) ?x44859) ?x34750)))
 (= (+ (- (- (+ ?x44861 ?x23010) ?x44722) ?x44865) ?x44868) 0.0))))))))))))))
(assert
 (= (+ (* (- l_0_14_1) l_0_14_1) (* l_0_14_22 l_0_14_22)) 0.0))
(assert
 (let ((?x44926 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x44920 (* l_0_14_211 l_0_14_211)))
 (let ((?x44918 (* l_0_14_190 l_0_14_190)))
 (let ((?x44910 (* l_0_14_1 l_0_14_1)))
 (let ((?x44916 (* 6.0 ?x44910)))
 (let ((?x44924 (+ (- (- (+ (* (* (- 2.0) l_0_14_1) l_0_14_2) ?x44916) ?x44918) ?x44920) (* (* 2.0 l_0_14_22) l_0_14_23))))
 (let ((?x44933 (+ (- (- ?x44924 ?x44926) (* (* 1.0 l_0_14_43) l_0_14_43)) (* 1.0 (* l_0_14_64 l_0_14_64)))))
 (= ?x44933 0.0)))))))))
(assert
 (let ((?x44931 (* l_0_14_64 l_0_14_64)))
 (let ((?x44956 (* 3.0 ?x44931)))
 (let ((?x44926 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x44948 (* l_0_14_127 l_0_14_127)))
 (let ((?x44910 (* l_0_14_1 l_0_14_1)))
 (let ((?x44916 (* 6.0 ?x44910)))
 (let ((?x44951 (+ (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_4) ?x44916) ?x44948) (* (* 2.0 l_0_14_22) l_0_14_25))))
 (= (+ (- (- ?x44951 ?x44926) (* (* 3.0 l_0_14_43) l_0_14_43)) ?x44956) 0.0)))))))))
(assert
 (let ((?x44931 (* l_0_14_64 l_0_14_64)))
 (let ((?x23484 (* l_0_14_43 l_0_14_43)))
 (let ((?x44976 (+ (* (* (- 2.0) l_0_14_1) l_0_14_7) (* (* 2.0 l_0_14_22) l_0_14_28))))
 (= (- (+ ?x44976 ?x23484) ?x44931) 0.0)))))
(assert
 (let ((?x44992 (+ (- (* (* (- 2.0) l_0_14_1) l_0_14_11) (* l_0_14_127 l_0_14_127)) (* (* 2.0 l_0_14_22) l_0_14_32))))
 (= ?x44992 0.0)))
(assert
 (let ((?x45012 (* l_0_14_85 l_0_14_85)))
 (let ((?x45008 (* l_0_14_169 l_0_14_169)))
 (let ((?x45006 (* l_0_14_148 l_0_14_148)))
 (let ((?x45007 (- (+ (* (* (- 2.0) l_0_14_1) l_0_14_16) (* l_0_14_106 l_0_14_106)) ?x45006)))
 (= (- (+ (+ ?x45007 ?x45008) (* (* 2.0 l_0_14_22) l_0_14_37)) ?x45012) 0.0))))))
(assert
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45058 (* ?x44867 l_0_14_67)))
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45056 (* ?x45055 l_0_14_65)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45053 (* ?x44864 l_0_14_46)))
 (let ((?x45050 (* 6.0 l_0_14_43)))
 (let ((?x45051 (* ?x45050 l_0_14_44)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45039 (* ?x44858 l_0_14_25)))
 (let ((?x44859 (* ?x44858 l_0_14_23)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45029 (* ?x45028 l_0_14_128)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x34799 (* ?x24648 l_0_14_4)))
 (let ((?x44849 (* ?x24648 l_0_14_2)))
 (let ((?x45035 (- (- (+ (+ ?x44849 ?x34799) ?x45029) (* (* 2.0 l_0_14_190) l_0_14_193)) (* (* 2.0 l_0_14_2) l_0_14_4))))
 (let ((?x45043 (+ (- (- (- ?x45035 (* (* 2.0 l_0_14_211) l_0_14_214)) ?x44859) ?x45039) (* (* 2.0 l_0_14_23) l_0_14_25))))
 (let ((?x45049 (- (+ ?x45043 (* (* 2.0 l_0_14_24) l_0_14_26)) (* (* 2.0 l_0_14_3) l_0_14_5))))
 (= (+ (+ (- (- ?x45049 ?x45051) ?x45053) ?x45056) ?x45058) 0.0)))))))))))))))))))))
(assert
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45117 (* ?x44867 l_0_14_70)))
 (let ((?x44868 (* ?x44867 l_0_14_65)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45114 (* ?x44864 l_0_14_49)))
 (let ((?x44865 (* ?x44864 l_0_14_44)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45105 (* ?x44858 l_0_14_28)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x7957 (* ?x24648 l_0_14_7)))
 (let ((?x45102 (- (- ?x7957 (* (* 2.0 l_0_14_190) l_0_14_196)) (* (* 2.0 l_0_14_2) l_0_14_7))))
 (let ((?x45108 (+ (- (- ?x45102 (* (* 2.0 l_0_14_211) l_0_14_217)) ?x45105) (* (* 2.0 l_0_14_23) l_0_14_28))))
 (let ((?x45112 (- (+ ?x45108 (* (* 2.0 l_0_14_24) l_0_14_29)) (* (* 2.0 l_0_14_3) l_0_14_8))))
 (= (+ (- (- (+ ?x45112 ?x44865) ?x45114) ?x44868) ?x45117) 0.0)))))))))))))))
(assert
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45174 (* ?x44867 l_0_14_74)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45172 (* ?x44864 l_0_14_53)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45166 (* ?x44858 l_0_14_32)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45029 (* ?x45028 l_0_14_128)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x9252 (* ?x24648 l_0_14_11)))
 (let ((?x45160 (- (- ?x9252 (* (* 2.0 l_0_14_11) l_0_14_2)) (* (* 2.0 l_0_14_12) l_0_14_3))))
 (let ((?x45165 (- (- (- ?x45160 ?x45029) (* (* 2.0 l_0_14_190) l_0_14_200)) (* (* 2.0 l_0_14_211) l_0_14_221))))
 (let ((?x45171 (+ (+ (- ?x45165 ?x45166) (* (* 2.0 l_0_14_23) l_0_14_32)) (* (* 2.0 l_0_14_24) l_0_14_33))))
 (= (+ (- ?x45171 ?x45172) ?x45174) 0.0)))))))))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45240 (* ?x45239 l_0_14_86)))
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45237 (* ?x44867 l_0_14_79)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45235 (* ?x44864 l_0_14_58)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45229 (* ?x44858 l_0_14_37)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45220 (* ?x45219 l_0_14_170)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45214 (* ?x45213 l_0_14_149)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x24866 (* ?x24648 l_0_14_16)))
 (let ((?x45218 (- (- (+ ?x24866 (* (* 2.0 l_0_14_106) l_0_14_107)) ?x45214) (* (* 2.0 l_0_14_16) l_0_14_2))))
 (let ((?x45226 (- (- (+ ?x45218 ?x45220) (* (* 2.0 l_0_14_17) l_0_14_3)) (* (* 2.0 l_0_14_190) l_0_14_205))))
 (let ((?x45232 (+ (- (- ?x45226 (* (* 2.0 l_0_14_211) l_0_14_226)) ?x45229) (* (* 2.0 l_0_14_23) l_0_14_37))))
 (let ((?x45241 (- (+ (- (+ ?x45232 (* (* 2.0 l_0_14_24) l_0_14_38)) ?x45235) ?x45237) ?x45240)))
 (= ?x45241 0.0))))))))))))))))))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45309 (* ?x45055 l_0_14_67)))
 (let ((?x45056 (* ?x45055 l_0_14_65)))
 (let ((?x45306 (* l_0_14_6 l_0_14_6)))
 (let ((?x45304 (* l_0_14_5 l_0_14_5)))
 (let ((?x45050 (* 6.0 l_0_14_43)))
 (let ((?x45302 (* ?x45050 l_0_14_46)))
 (let ((?x45051 (* ?x45050 l_0_14_44)))
 (let ((?x45299 (* l_0_14_4 l_0_14_4)))
 (let ((?x45297 (* l_0_14_27 l_0_14_27)))
 (let ((?x45295 (* l_0_14_26 l_0_14_26)))
 (let ((?x45293 (* l_0_14_25 l_0_14_25)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45039 (* ?x44858 l_0_14_25)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45290 (* ?x45028 l_0_14_130)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x34799 (* ?x24648 l_0_14_4)))
 (let ((?x45301 (- (- (+ (+ (+ (- (+ ?x34799 ?x45290) ?x45039) ?x45293) ?x45295) ?x45297) ?x45299) ?x45051)))
 (= (+ (+ (- (- (- ?x45301 ?x45302) ?x45304) ?x45306) ?x45056) ?x45309) 0.0)))))))))))))))))))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45351 (* ?x45055 l_0_14_70)))
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45058 (* ?x44867 l_0_14_67)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45053 (* ?x44864 l_0_14_46)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45105 (* ?x44858 l_0_14_28)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45326 (* ?x45028 l_0_14_133)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x7957 (* ?x24648 l_0_14_7)))
 (let ((?x45334 (+ (+ (- (+ ?x7957 ?x45326) ?x45105) (* (* 2.0 l_0_14_25) l_0_14_28)) (* (* 2.0 l_0_14_26) l_0_14_29))))
 (let ((?x45340 (- (+ ?x45334 (* (* 2.0 l_0_14_27) l_0_14_30)) (* (* 2.0 l_0_14_4) l_0_14_7))))
 (let ((?x45346 (- (- (+ ?x45340 ?x45053) (* (* 6.0 l_0_14_43) l_0_14_49)) (* (* 2.0 l_0_14_5) l_0_14_8))))
 (= (+ (- (- ?x45346 (* (* 2.0 l_0_14_6) l_0_14_9)) ?x45058) ?x45351) 0.0)))))))))))))))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45407 (* ?x45055 l_0_14_74)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45166 (* ?x44858 l_0_14_32)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45393 (* ?x45028 l_0_14_137)))
 (let ((?x45290 (* ?x45028 l_0_14_130)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x9252 (* ?x24648 l_0_14_11)))
 (let ((?x45391 (- (- ?x9252 (* (* 2.0 l_0_14_11) l_0_14_4)) (* (* 2.0 l_0_14_12) l_0_14_5))))
 (let ((?x45398 (- (- (+ (- ?x45391 ?x45290) ?x45393) (* (* 2.0 l_0_14_13) l_0_14_6)) ?x45166)))
 (let ((?x45402 (+ (+ ?x45398 (* (* 2.0 l_0_14_25) l_0_14_32)) (* (* 2.0 l_0_14_26) l_0_14_33))))
 (let ((?x45406 (- (+ ?x45402 (* (* 2.0 l_0_14_27) l_0_14_34)) (* (* 6.0 l_0_14_43) l_0_14_53))))
 (= (+ ?x45406 ?x45407) 0.0)))))))))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45467 (* ?x45239 l_0_14_88)))
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45465 (* ?x45055 l_0_14_79)))
 (let ((?x44858 (* 12.0 l_0_14_22)))
 (let ((?x45229 (* ?x44858 l_0_14_37)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45449 (* ?x45219 l_0_14_172)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45445 (* ?x45213 l_0_14_151)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45443 (* ?x45028 l_0_14_142)))
 (let ((?x24648 (* 12.0 l_0_14_1)))
 (let ((?x24866 (* ?x24648 l_0_14_16)))
 (let ((?x45448 (- (- (+ (+ ?x24866 (* (* 2.0 l_0_14_106) l_0_14_109)) ?x45443) ?x45445) (* (* 2.0 l_0_14_16) l_0_14_4))))
 (let ((?x45455 (- (- (+ ?x45448 ?x45449) (* (* 2.0 l_0_14_17) l_0_14_5)) (* (* 2.0 l_0_14_18) l_0_14_6))))
 (let ((?x45460 (+ (+ (- ?x45455 ?x45229) (* (* 2.0 l_0_14_25) l_0_14_37)) (* (* 2.0 l_0_14_26) l_0_14_38))))
 (let ((?x45464 (- (+ ?x45460 (* (* 2.0 l_0_14_27) l_0_14_39)) (* (* 6.0 l_0_14_43) l_0_14_58))))
 (= (- (+ ?x45464 ?x45465) ?x45467) 0.0))))))))))))))))))))
(assert
 (let ((?x45528 (* l_0_14_9 l_0_14_9)))
 (let ((?x45526 (* l_0_14_8 l_0_14_8)))
 (let ((?x45524 (* l_0_14_7 l_0_14_7)))
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45117 (* ?x44867 l_0_14_70)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45114 (* ?x44864 l_0_14_49)))
 (let ((?x45520 (* l_0_14_31 l_0_14_31)))
 (let ((?x45518 (* l_0_14_30 l_0_14_30)))
 (let ((?x45516 (* l_0_14_29 l_0_14_29)))
 (let ((?x45517 (+ (+ (* (- l_0_14_10) l_0_14_10) (* l_0_14_28 l_0_14_28)) ?x45516)))
 (let ((?x45529 (- (- (- (- (+ (+ (+ ?x45517 ?x45518) ?x45520) ?x45114) ?x45117) ?x45524) ?x45526) ?x45528)))
 (= ?x45529 0.0))))))))))))))
(assert
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45174 (* ?x44867 l_0_14_74)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45172 (* ?x44864 l_0_14_53)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45326 (* ?x45028 l_0_14_133)))
 (let ((?x45541 (- (* (* (- 2.0) l_0_14_10) l_0_14_14) (* (* 2.0 l_0_14_11) l_0_14_7))))
 (let ((?x45546 (- (- (- ?x45541 (* (* 2.0 l_0_14_12) l_0_14_8)) ?x45326) (* (* 2.0 l_0_14_13) l_0_14_9))))
 (let ((?x45552 (+ (+ ?x45546 (* (* 2.0 l_0_14_28) l_0_14_32)) (* (* 2.0 l_0_14_29) l_0_14_33))))
 (let ((?x45558 (+ (+ ?x45552 (* (* 2.0 l_0_14_30) l_0_14_34)) (* (* 2.0 l_0_14_31) l_0_14_35))))
 (= (- (+ ?x45558 ?x45172) ?x45174) 0.0))))))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45612 (* ?x45239 l_0_14_91)))
 (let ((?x44867 (* 2.0 l_0_14_64)))
 (let ((?x45237 (* ?x44867 l_0_14_79)))
 (let ((?x44864 (* 2.0 l_0_14_43)))
 (let ((?x45235 (* ?x44864 l_0_14_58)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45596 (* ?x45219 l_0_14_175)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45592 (* ?x45213 l_0_14_154)))
 (let ((?x45591 (+ (* (* (- 2.0) l_0_14_10) l_0_14_19) (* (* 2.0 l_0_14_106) l_0_14_112))))
 (let ((?x45599 (- (+ (- (- ?x45591 ?x45592) (* (* 2.0 l_0_14_16) l_0_14_7)) ?x45596) (* (* 2.0 l_0_14_17) l_0_14_8))))
 (let ((?x45603 (+ (- ?x45599 (* (* 2.0 l_0_14_18) l_0_14_9)) (* (* 2.0 l_0_14_28) l_0_14_37))))
 (let ((?x45607 (+ (+ ?x45603 (* (* 2.0 l_0_14_29) l_0_14_38)) (* (* 2.0 l_0_14_30) l_0_14_39))))
 (let ((?x45613 (- (- (+ (+ ?x45607 (* (* 2.0 l_0_14_31) l_0_14_40)) ?x45235) ?x45237) ?x45612)))
 (= ?x45613 0.0)))))))))))))))))
(assert
 (let ((?x45665 (* l_0_14_36 l_0_14_36)))
 (let ((?x45663 (* l_0_14_35 l_0_14_35)))
 (let ((?x45661 (* l_0_14_34 l_0_14_34)))
 (let ((?x45659 (* l_0_14_33 l_0_14_33)))
 (let ((?x45657 (* l_0_14_32 l_0_14_32)))
 (let ((?x45655 (* l_0_14_15 l_0_14_15)))
 (let ((?x45653 (* l_0_14_14 l_0_14_14)))
 (let ((?x45651 (* l_0_14_13 l_0_14_13)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45393 (* ?x45028 l_0_14_137)))
 (let ((?x45650 (- (- (* (- l_0_14_11) l_0_14_11) (* l_0_14_12 l_0_14_12)) ?x45393)))
 (let ((?x45664 (+ (+ (+ (+ (- (- (- ?x45650 ?x45651) ?x45653) ?x45655) ?x45657) ?x45659) ?x45661) ?x45663)))
 (= (+ ?x45664 ?x45665) 0.0))))))))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45709 (* ?x45239 l_0_14_95)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45692 (* ?x45219 l_0_14_179)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45687 (* ?x45213 l_0_14_158)))
 (let ((?x45028 (* 2.0 l_0_14_127)))
 (let ((?x45443 (* ?x45028 l_0_14_142)))
 (let ((?x45678 (- (* (* 2.0 l_0_14_106) l_0_14_116) (* (* 2.0 l_0_14_11) l_0_14_16))))
 (let ((?x45683 (- (- (- ?x45678 (* (* 2.0 l_0_14_12) l_0_14_17)) ?x45443) (* (* 2.0 l_0_14_13) l_0_14_18))))
 (let ((?x45691 (- (- (- ?x45683 (* (* 2.0 l_0_14_14) l_0_14_19)) ?x45687) (* (* 2.0 l_0_14_15) l_0_14_20))))
 (let ((?x45699 (+ (+ (+ ?x45691 ?x45692) (* (* 2.0 l_0_14_32) l_0_14_37)) (* (* 2.0 l_0_14_33) l_0_14_38))))
 (let ((?x45705 (+ (+ ?x45699 (* (* 2.0 l_0_14_34) l_0_14_39)) (* (* 2.0 l_0_14_35) l_0_14_40))))
 (= (- (+ ?x45705 (* (* 2.0 l_0_14_36) l_0_14_41)) ?x45709) 0.0)))))))))))))))
(assert
 (let ((?x45791 (* l_0_14_42 l_0_14_42)))
 (let ((?x45789 (* l_0_14_41 l_0_14_41)))
 (let ((?x45787 (* l_0_14_40 l_0_14_40)))
 (let ((?x45785 (* l_0_14_39 l_0_14_39)))
 (let ((?x45783 (* l_0_14_38 l_0_14_38)))
 (let ((?x45781 (* l_0_14_37 l_0_14_37)))
 (let ((?x45779 (* l_0_14_21 l_0_14_21)))
 (let ((?x45777 (* l_0_14_20 l_0_14_20)))
 (let ((?x45775 (* l_0_14_19 l_0_14_19)))
 (let ((?x45773 (* l_0_14_18 l_0_14_18)))
 (let ((?x45771 (* l_0_14_17 l_0_14_17)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45769 (* ?x45219 l_0_14_184)))
 (let ((?x45767 (* l_0_14_16 l_0_14_16)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45765 (* ?x45213 l_0_14_163)))
 (let ((?x24867 (* 2.0 l_0_14_106)))
 (let ((?x45763 (* ?x24867 l_0_14_121)))
 (let ((?x45770 (+ (- (- (+ (* (* (- 2.0) l_0_14_100) l_0_14_85) ?x45763) ?x45765) ?x45767) ?x45769)))
 (let ((?x45784 (+ (+ (- (- (- (- (- ?x45770 ?x45771) ?x45773) ?x45775) ?x45777) ?x45779) ?x45781) ?x45783)))
 (= (+ (+ (+ (+ ?x45784 ?x45785) ?x45787) ?x45789) ?x45791) 0.0))))))))))))))))))))))
(assert
 (let ((?x44746 (* l_0_14_66 l_0_14_66)))
 (let ((?x44747 (* 3.0 ?x44746)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x45884 (* ?x45883 l_0_14_68)))
 (let ((?x44740 (* l_0_14_65 l_0_14_65)))
 (let ((?x44741 (* 3.0 ?x44740)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x45880 (* ?x45879 l_0_14_67)))
 (let ((?x45306 (* l_0_14_6 l_0_14_6)))
 (let ((?x45877 (* 6.0 ?x45306)))
 (let ((?x45304 (* l_0_14_5 l_0_14_5)))
 (let ((?x45875 (* 6.0 ?x45304)))
 (let ((?x44735 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x45863 (* ?x45862 l_0_14_47)))
 (let ((?x44729 (* (* 3.0 l_0_14_44) l_0_14_44)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x45859 (* ?x45858 l_0_14_46)))
 (let ((?x45299 (* l_0_14_4 l_0_14_4)))
 (let ((?x45856 (* 6.0 ?x45299)))
 (let ((?x44719 (* 12.0 l_0_14_3)))
 (let ((?x44720 (* ?x44719 l_0_14_5)))
 (let ((?x45853 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x45850 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x45847 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x44714 (* ?x44713 l_0_14_26)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x44708 (* ?x44707 l_0_14_25)))
 (let ((?x45842 (* l_0_14_216 l_0_14_216)))
 (let ((?x45840 (* l_0_14_215 l_0_14_215)))
 (let ((?x45838 (* l_0_14_214 l_0_14_214)))
 (let ((?x44695 (* 12.0 l_0_14_2)))
 (let ((?x44696 (* ?x44695 l_0_14_4)))
 (let ((?x45835 (* l_0_14_195 l_0_14_195)))
 (let ((?x45833 (* l_0_14_194 l_0_14_194)))
 (let ((?x45831 (* l_0_14_193 l_0_14_193)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x45829 (* ?x45828 l_0_14_131)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x45827 (* ?x35186 l_0_14_130)))
 (let ((?x45841 (- (- (+ (- (- (- (+ ?x45827 ?x45829) ?x45831) ?x45833) ?x45835) ?x44696) ?x45838) ?x45840)))
 (let ((?x45855 (+ (- (- (- (- (- (- ?x45841 ?x45842) ?x44708) ?x44714) ?x45847) ?x45850) ?x45853) ?x44720)))
 (let ((?x45868 (- (- (- (- (- (+ ?x45855 ?x45856) ?x45859) ?x44729) ?x45863) ?x44735) (* (* 1.0 l_0_14_46) l_0_14_46))))
 (let ((?x45874 (- (- ?x45868 (* (* 1.0 l_0_14_47) l_0_14_47)) (* (* 1.0 l_0_14_48) l_0_14_48))))
 (let ((?x45889 (+ (+ (+ (+ (+ (+ (+ ?x45874 ?x45875) ?x45877) ?x45880) ?x44741) ?x45884) ?x44747) (* 1.0 (* l_0_14_67 l_0_14_67)))))
 (let ((?x45895 (+ (+ ?x45889 (* 1.0 (* l_0_14_68 l_0_14_68))) (* 1.0 (* l_0_14_69 l_0_14_69)))))
 (= ?x45895 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46003 (* ?x46002 l_0_14_72)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46000 (* ?x45999 l_0_14_71)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x45997 (* ?x45996 l_0_14_70)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x45994 (* ?x45883 l_0_14_71)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x44744 (* ?x44743 l_0_14_68)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x45991 (* ?x45879 l_0_14_70)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x44738 (* ?x44737 l_0_14_67)))
 (let ((?x45988 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x45985 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x45982 (* ?x45981 l_0_14_51)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x45979 (* ?x45978 l_0_14_50)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x45976 (* ?x45975 l_0_14_49)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x45973 (* ?x45862 l_0_14_50)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x44732 (* ?x44731 l_0_14_47)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x45970 (* ?x45858 l_0_14_49)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x44726 (* ?x44725 l_0_14_46)))
 (let ((?x45967 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x44719 (* 12.0 l_0_14_3)))
 (let ((?x45964 (* ?x44719 l_0_14_8)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x45962 (* ?x45961 l_0_14_30)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x45959 (* ?x45958 l_0_14_29)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x45956 (* ?x45955 l_0_14_28)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x45953 (* ?x44713 l_0_14_29)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x45951 (* ?x44707 l_0_14_28)))
 (let ((?x44695 (* 12.0 l_0_14_2)))
 (let ((?x45940 (* ?x44695 l_0_14_7)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x35310 (* ?x45828 l_0_14_134)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x10070 (* ?x35186 l_0_14_133)))
 (let ((?x45936 (- (- (+ ?x10070 ?x35310) (* (* 2.0 l_0_14_193) l_0_14_196)) (* (* 2.0 l_0_14_194) l_0_14_197))))
 (let ((?x45944 (- (+ (- ?x45936 (* (* 2.0 l_0_14_195) l_0_14_198)) ?x45940) (* (* 2.0 l_0_14_214) l_0_14_217))))
 (let ((?x45950 (- (- ?x45944 (* (* 2.0 l_0_14_215) l_0_14_218)) (* (* 2.0 l_0_14_216) l_0_14_219))))
 (let ((?x45968 (+ (+ (- (- (- (- (- ?x45950 ?x45951) ?x45953) ?x45956) ?x45959) ?x45962) ?x45964) ?x45967)))
 (let ((?x45983 (- (- (- (- (+ (- (+ ?x45968 ?x44726) ?x45970) ?x44732) ?x45973) ?x45976) ?x45979) ?x45982)))
 (let ((?x45998 (+ (+ (- (+ (- (+ (+ ?x45983 ?x45985) ?x45988) ?x44738) ?x45991) ?x44744) ?x45994) ?x45997)))
 (= (+ (+ ?x45998 ?x46000) ?x46003) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46147 (* ?x46002 l_0_14_76)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46145 (* ?x45999 l_0_14_75)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x46143 (* ?x45996 l_0_14_74)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x46141 (* ?x45883 l_0_14_75)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x46139 (* ?x45879 l_0_14_74)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x46137 (* ?x45981 l_0_14_55)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x46135 (* ?x45978 l_0_14_54)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x46133 (* ?x45975 l_0_14_53)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x46131 (* ?x45862 l_0_14_54)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x46129 (* ?x45858 l_0_14_53)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x46127 (* ?x45961 l_0_14_34)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x46125 (* ?x45958 l_0_14_33)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x46123 (* ?x45955 l_0_14_32)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x46121 (* ?x44713 l_0_14_33)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x46119 (* ?x44707 l_0_14_32)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x46105 (* ?x46104 l_0_14_6)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x46102 (* ?x45828 l_0_14_138)))
 (let ((?x45829 (* ?x45828 l_0_14_131)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x46099 (* ?x35186 l_0_14_137)))
 (let ((?x45827 (* ?x35186 l_0_14_130)))
 (let ((?x46079 (* 12.0 l_0_14_12)))
 (let ((?x46096 (* ?x46079 l_0_14_5)))
 (let ((?x46094 (* ?x46079 l_0_14_3)))
 (let ((?x46074 (* 12.0 l_0_14_11)))
 (let ((?x46076 (* ?x46074 l_0_14_4)))
 (let ((?x25122 (* ?x46074 l_0_14_2)))
 (let ((?x46103 (+ (- (+ (- (+ (+ (+ ?x25122 ?x46076) ?x46094) ?x46096) ?x45827) ?x46099) ?x45829) ?x46102)))
 (let ((?x46110 (- (- (+ ?x46103 ?x46105) (* (* 2.0 l_0_14_193) l_0_14_200)) (* (* 2.0 l_0_14_194) l_0_14_201))))
 (let ((?x46114 (- (- ?x46110 (* (* 2.0 l_0_14_195) l_0_14_202)) (* (* 2.0 l_0_14_214) l_0_14_221))))
 (let ((?x46118 (- (- ?x46114 (* (* 2.0 l_0_14_215) l_0_14_222)) (* (* 2.0 l_0_14_216) l_0_14_223))))
 (let ((?x46132 (- (- (- (- (- (- (- ?x46118 ?x46119) ?x46121) ?x46123) ?x46125) ?x46127) ?x46129) ?x46131)))
 (let ((?x46146 (+ (+ (+ (+ (- (- (- ?x46132 ?x46133) ?x46135) ?x46137) ?x46139) ?x46141) ?x46143) ?x46145)))
 (= (+ ?x46146 ?x46147) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x46293 (* ?x46292 l_0_14_89)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x46290 (* ?x46289 l_0_14_88)))
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46287 (* ?x46002 l_0_14_81)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46285 (* ?x45999 l_0_14_80)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x46283 (* ?x45996 l_0_14_79)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x46281 (* ?x45883 l_0_14_80)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x46279 (* ?x45879 l_0_14_79)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x46277 (* ?x45981 l_0_14_60)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x46275 (* ?x45978 l_0_14_59)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x46273 (* ?x45975 l_0_14_58)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x46271 (* ?x45862 l_0_14_59)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x46269 (* ?x45858 l_0_14_58)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x46267 (* ?x45961 l_0_14_39)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x46265 (* ?x45958 l_0_14_38)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x46263 (* ?x45955 l_0_14_37)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x46261 (* ?x44713 l_0_14_38)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x46259 (* ?x44707 l_0_14_37)))
 (let ((?x46244 (* 12.0 l_0_14_18)))
 (let ((?x46245 (* ?x46244 l_0_14_6)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x46242 (* ?x46241 l_0_14_173)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x46239 (* ?x46238 l_0_14_172)))
 (let ((?x46233 (* 12.0 l_0_14_17)))
 (let ((?x46236 (* ?x46233 l_0_14_5)))
 (let ((?x46234 (* ?x46233 l_0_14_3)))
 (let ((?x46228 (* 12.0 l_0_14_16)))
 (let ((?x46231 (* ?x46228 l_0_14_4)))
 (let ((?x46229 (* ?x46228 l_0_14_2)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x46226 (* ?x46225 l_0_14_152)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x46223 (* ?x46222 l_0_14_151)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x46220 (* ?x45828 l_0_14_143)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x46218 (* ?x35186 l_0_14_142)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x46216 (* ?x46215 l_0_14_110)))
 (let ((?x46224 (- (+ (+ (+ (* (* 2.0 l_0_14_107) l_0_14_109) ?x46216) ?x46218) ?x46220) ?x46223)))
 (let ((?x46243 (+ (+ (+ (+ (+ (+ (- ?x46224 ?x46226) ?x46229) ?x46231) ?x46234) ?x46236) ?x46239) ?x46242)))
 (let ((?x46250 (- (- (+ ?x46243 ?x46245) (* (* 2.0 l_0_14_193) l_0_14_205)) (* (* 2.0 l_0_14_194) l_0_14_206))))
 (let ((?x46254 (- (- ?x46250 (* (* 2.0 l_0_14_195) l_0_14_207)) (* (* 2.0 l_0_14_214) l_0_14_226))))
 (let ((?x46258 (- (- ?x46254 (* (* 2.0 l_0_14_215) l_0_14_227)) (* (* 2.0 l_0_14_216) l_0_14_228))))
 (let ((?x46272 (- (- (- (- (- (- (- ?x46258 ?x46259) ?x46261) ?x46263) ?x46265) ?x46267) ?x46269) ?x46271)))
 (let ((?x46286 (+ (+ (+ (+ (- (- (- ?x46272 ?x46273) ?x46275) ?x46277) ?x46279) ?x46281) ?x46283) ?x46285)))
 (= (- (- (+ ?x46286 ?x46287) ?x46290) ?x46293) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46460 (* l_0_14_87 l_0_14_87)))
 (let ((?x46458 (* l_0_14_86 l_0_14_86)))
 (let ((?x45893 (* l_0_14_69 l_0_14_69)))
 (let ((?x46456 (* 3.0 ?x45893)))
 (let ((?x45890 (* l_0_14_68 l_0_14_68)))
 (let ((?x46454 (* 3.0 ?x45890)))
 (let ((?x45887 (* l_0_14_67 l_0_14_67)))
 (let ((?x46452 (* 3.0 ?x45887)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x45884 (* ?x45883 l_0_14_68)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x45880 (* ?x45879 l_0_14_67)))
 (let ((?x45306 (* l_0_14_6 l_0_14_6)))
 (let ((?x45877 (* 6.0 ?x45306)))
 (let ((?x45304 (* l_0_14_5 l_0_14_5)))
 (let ((?x45875 (* 6.0 ?x45304)))
 (let ((?x46446 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x46443 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x46440 (* (* 3.0 l_0_14_46) l_0_14_46)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x45863 (* ?x45862 l_0_14_47)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x45859 (* ?x45858 l_0_14_46)))
 (let ((?x45299 (* l_0_14_4 l_0_14_4)))
 (let ((?x45856 (* 6.0 ?x45299)))
 (let ((?x45853 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x45850 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x45847 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x46431 (* l_0_14_171 l_0_14_171)))
 (let ((?x46429 (* l_0_14_170 l_0_14_170)))
 (let ((?x46427 (* l_0_14_150 l_0_14_150)))
 (let ((?x46425 (* l_0_14_149 l_0_14_149)))
 (let ((?x46423 (* l_0_14_132 l_0_14_132)))
 (let ((?x46421 (* l_0_14_131 l_0_14_131)))
 (let ((?x46419 (* l_0_14_130 l_0_14_130)))
 (let ((?x46420 (+ (- (* (- l_0_14_107) l_0_14_107) (* l_0_14_108 l_0_14_108)) ?x46419)))
 (let ((?x46433 (- (- (- (+ (+ (+ (+ ?x46420 ?x46421) ?x46423) ?x46425) ?x46427) ?x46429) ?x46431) ?x45847)))
 (let ((?x46444 (- (- (- (- (+ (- (- ?x46433 ?x45850) ?x45853) ?x45856) ?x45859) ?x45863) ?x46440) ?x46443)))
 (let ((?x46455 (+ (+ (+ (+ (+ (+ (- ?x46444 ?x46446) ?x45875) ?x45877) ?x45880) ?x45884) ?x46452) ?x46454)))
 (= (+ (+ (+ ?x46455 ?x46456) ?x46458) ?x46460) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45893 (* l_0_14_69 l_0_14_69)))
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46519 (* ?x46518 l_0_14_72)))
 (let ((?x45890 (* l_0_14_68 l_0_14_68)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46515 (* ?x46514 l_0_14_71)))
 (let ((?x45887 (* l_0_14_67 l_0_14_67)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46511 (* ?x46510 l_0_14_70)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x45994 (* ?x45883 l_0_14_71)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x45991 (* ?x45879 l_0_14_70)))
 (let ((?x45988 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x45985 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x45915 (* l_0_14_48 l_0_14_48)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46503 (* ?x46502 l_0_14_51)))
 (let ((?x35271 (* l_0_14_47 l_0_14_47)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46499 (* ?x46498 l_0_14_50)))
 (let ((?x25117 (* l_0_14_46 l_0_14_46)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46495 (* ?x46494 l_0_14_49)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x45973 (* ?x45862 l_0_14_50)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x45970 (* ?x45858 l_0_14_49)))
 (let ((?x45967 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x45962 (* ?x45961 l_0_14_30)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x45959 (* ?x45958 l_0_14_29)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x45956 (* ?x45955 l_0_14_28)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46486 (* ?x46485 l_0_14_135)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46483 (* ?x46482 l_0_14_134)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x8794 (* ?x25035 l_0_14_133)))
 (let ((?x46492 (- (+ (- (- (- (+ (+ ?x8794 ?x46483) ?x46486) ?x45956) ?x45959) ?x45962) ?x45967) ?x45970)))
 (let ((?x46505 (+ (- (+ (- (+ (- (- ?x46492 ?x45973) ?x46495) ?x25117) ?x46499) ?x35271) ?x46503) ?x45915)))
 (let ((?x46516 (+ (- (+ (+ (+ (+ (+ ?x46505 ?x45985) ?x45988) ?x45991) ?x45994) ?x46511) ?x45887) ?x46515)))
 (= (- (+ (- ?x46516 ?x45890) ?x46519) ?x45893) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46596 (* ?x46518 l_0_14_76)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46594 (* ?x46514 l_0_14_75)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46592 (* ?x46510 l_0_14_74)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x46141 (* ?x45883 l_0_14_75)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x46139 (* ?x45879 l_0_14_74)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46588 (* ?x46502 l_0_14_55)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46586 (* ?x46498 l_0_14_54)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46584 (* ?x46494 l_0_14_53)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x46131 (* ?x45862 l_0_14_54)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x46129 (* ?x45858 l_0_14_53)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x46127 (* ?x45961 l_0_14_34)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x46125 (* ?x45958 l_0_14_33)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x46123 (* ?x45955 l_0_14_32)))
 (let ((?x46423 (* l_0_14_132 l_0_14_132)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46576 (* ?x46485 l_0_14_139)))
 (let ((?x46421 (* l_0_14_131 l_0_14_131)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46573 (* ?x46482 l_0_14_138)))
 (let ((?x46419 (* l_0_14_130 l_0_14_130)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x46570 (* ?x25035 l_0_14_137)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x46105 (* ?x46104 l_0_14_6)))
 (let ((?x46079 (* 12.0 l_0_14_12)))
 (let ((?x46096 (* ?x46079 l_0_14_5)))
 (let ((?x46074 (* 12.0 l_0_14_11)))
 (let ((?x46076 (* ?x46074 l_0_14_4)))
 (let ((?x46577 (+ (- (+ (- (+ (+ (+ ?x46076 ?x46096) ?x46105) ?x46570) ?x46419) ?x46573) ?x46421) ?x46576)))
 (let ((?x46585 (- (- (- (- (- (- (- ?x46577 ?x46423) ?x46123) ?x46125) ?x46127) ?x46129) ?x46131) ?x46584)))
 (let ((?x46597 (+ (+ (+ (+ (+ (- (- ?x46585 ?x46586) ?x46588) ?x46139) ?x46141) ?x46592) ?x46594) ?x46596)))
 (= ?x46597 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46676 (* l_0_14_90 l_0_14_90)))
 (let ((?x46674 (* l_0_14_89 l_0_14_89)))
 (let ((?x46672 (* l_0_14_88 l_0_14_88)))
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46670 (* ?x46518 l_0_14_81)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46668 (* ?x46514 l_0_14_80)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46666 (* ?x46510 l_0_14_79)))
 (let ((?x45883 (* 6.0 l_0_14_66)))
 (let ((?x46281 (* ?x45883 l_0_14_80)))
 (let ((?x45879 (* 6.0 l_0_14_65)))
 (let ((?x46279 (* ?x45879 l_0_14_79)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46662 (* ?x46502 l_0_14_60)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46660 (* ?x46498 l_0_14_59)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46658 (* ?x46494 l_0_14_58)))
 (let ((?x45862 (* 6.0 l_0_14_45)))
 (let ((?x46271 (* ?x45862 l_0_14_59)))
 (let ((?x45858 (* 6.0 l_0_14_44)))
 (let ((?x46269 (* ?x45858 l_0_14_58)))
 (let ((?x45961 (* 12.0 l_0_14_27)))
 (let ((?x46267 (* ?x45961 l_0_14_39)))
 (let ((?x45958 (* 12.0 l_0_14_26)))
 (let ((?x46265 (* ?x45958 l_0_14_38)))
 (let ((?x45955 (* 12.0 l_0_14_25)))
 (let ((?x46263 (* ?x45955 l_0_14_37)))
 (let ((?x46244 (* 12.0 l_0_14_18)))
 (let ((?x46245 (* ?x46244 l_0_14_6)))
 (let ((?x46650 (* l_0_14_174 l_0_14_174)))
 (let ((?x46648 (* l_0_14_173 l_0_14_173)))
 (let ((?x46646 (* l_0_14_172 l_0_14_172)))
 (let ((?x46233 (* 12.0 l_0_14_17)))
 (let ((?x46236 (* ?x46233 l_0_14_5)))
 (let ((?x46228 (* 12.0 l_0_14_16)))
 (let ((?x46231 (* ?x46228 l_0_14_4)))
 (let ((?x46642 (* l_0_14_153 l_0_14_153)))
 (let ((?x46640 (* l_0_14_152 l_0_14_152)))
 (let ((?x46638 (* l_0_14_151 l_0_14_151)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46636 (* ?x46485 l_0_14_144)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46634 (* ?x46482 l_0_14_143)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x46632 (* ?x25035 l_0_14_142)))
 (let ((?x46630 (* l_0_14_111 l_0_14_111)))
 (let ((?x46631 (+ (+ (* l_0_14_109 l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x46630)))
 (let ((?x46644 (+ (- (- (- (+ (+ (+ ?x46631 ?x46632) ?x46634) ?x46636) ?x46638) ?x46640) ?x46642) ?x46231)))
 (let ((?x46654 (- (- (+ (+ (+ (+ (+ ?x46644 ?x46236) ?x46646) ?x46648) ?x46650) ?x46245) ?x46263) ?x46265)))
 (let ((?x46664 (+ (- (- (- (- (- (- ?x46654 ?x46267) ?x46269) ?x46271) ?x46658) ?x46660) ?x46662) ?x46279)))
 (let ((?x46677 (- (- (- (+ (+ (+ (+ ?x46664 ?x46281) ?x46666) ?x46668) ?x46670) ?x46672) ?x46674) ?x46676)))
 (= ?x46677 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45528 (* l_0_14_9 l_0_14_9)))
 (let ((?x46775 (* 6.0 ?x45528)))
 (let ((?x45526 (* l_0_14_8 l_0_14_8)))
 (let ((?x46773 (* 6.0 ?x45526)))
 (let ((?x46770 (* l_0_14_73 l_0_14_73)))
 (let ((?x46771 (* 3.0 ?x46770)))
 (let ((?x46767 (* l_0_14_72 l_0_14_72)))
 (let ((?x46768 (* 3.0 ?x46767)))
 (let ((?x46764 (* l_0_14_71 l_0_14_71)))
 (let ((?x46765 (* 3.0 ?x46764)))
 (let ((?x46761 (* l_0_14_70 l_0_14_70)))
 (let ((?x46762 (* 3.0 ?x46761)))
 (let ((?x45524 (* l_0_14_7 l_0_14_7)))
 (let ((?x46759 (* 6.0 ?x45524)))
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46003 (* ?x46002 l_0_14_72)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46000 (* ?x45999 l_0_14_71)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x45997 (* ?x45996 l_0_14_70)))
 (let ((?x46754 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x46751 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x46748 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x45982 (* ?x45981 l_0_14_51)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x45979 (* ?x45978 l_0_14_50)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x45976 (* ?x45975 l_0_14_49)))
 (let ((?x46739 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x46736 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x46733 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x46730 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x46727 (* l_0_14_136 l_0_14_136)))
 (let ((?x46725 (* l_0_14_135 l_0_14_135)))
 (let ((?x46723 (* l_0_14_134 l_0_14_134)))
 (let ((?x46721 (* l_0_14_133 l_0_14_133)))
 (let ((?x45532 (* l_0_14_10 l_0_14_10)))
 (let ((?x46720 (* 6.0 ?x45532)))
 (let ((?x46737 (- (- (- (+ (+ (+ (+ ?x46720 ?x46721) ?x46723) ?x46725) ?x46727) ?x46730) ?x46733) ?x46736)))
 (let ((?x46746 (- (+ (+ (+ (- ?x46737 ?x46739) ?x45976) ?x45979) ?x45982) (* (* 3.0 l_0_14_49) l_0_14_49))))
 (let ((?x46760 (+ (- (- (- (- (- (- ?x46746 ?x46748) ?x46751) ?x46754) ?x45997) ?x46000) ?x46003) ?x46759)))
 (= (+ (+ (+ (+ (+ (+ ?x46760 ?x46762) ?x46765) ?x46768) ?x46771) ?x46773) ?x46775) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46856 (* 6.0 l_0_14_73)))
 (let ((?x46857 (* ?x46856 l_0_14_77)))
 (let ((?x46853 (* 6.0 l_0_14_72)))
 (let ((?x46854 (* ?x46853 l_0_14_76)))
 (let ((?x46850 (* 6.0 l_0_14_71)))
 (let ((?x46851 (* ?x46850 l_0_14_75)))
 (let ((?x46847 (* 6.0 l_0_14_70)))
 (let ((?x46848 (* ?x46847 l_0_14_74)))
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46147 (* ?x46002 l_0_14_76)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46145 (* ?x45999 l_0_14_75)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x46143 (* ?x45996 l_0_14_74)))
 (let ((?x46841 (* 6.0 l_0_14_52)))
 (let ((?x46842 (* ?x46841 l_0_14_56)))
 (let ((?x46838 (* 6.0 l_0_14_51)))
 (let ((?x46839 (* ?x46838 l_0_14_55)))
 (let ((?x46835 (* 6.0 l_0_14_50)))
 (let ((?x46836 (* ?x46835 l_0_14_54)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x46137 (* ?x45981 l_0_14_55)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x46135 (* ?x45978 l_0_14_54)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x46133 (* ?x45975 l_0_14_53)))
 (let ((?x46826 (* 12.0 l_0_14_31)))
 (let ((?x46827 (* ?x46826 l_0_14_35)))
 (let ((?x46823 (* 12.0 l_0_14_30)))
 (let ((?x46824 (* ?x46823 l_0_14_34)))
 (let ((?x46820 (* 12.0 l_0_14_29)))
 (let ((?x46821 (* ?x46820 l_0_14_33)))
 (let ((?x46817 (* 12.0 l_0_14_28)))
 (let ((?x46818 (* ?x46817 l_0_14_32)))
 (let ((?x46814 (* 2.0 l_0_14_136)))
 (let ((?x46815 (* ?x46814 l_0_14_140)))
 (let ((?x46811 (* 2.0 l_0_14_135)))
 (let ((?x46812 (* ?x46811 l_0_14_139)))
 (let ((?x46808 (* 2.0 l_0_14_134)))
 (let ((?x46809 (* ?x46808 l_0_14_138)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46486 (* ?x46485 l_0_14_135)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46483 (* ?x46482 l_0_14_134)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x8794 (* ?x25035 l_0_14_133)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x46800 (* ?x46104 l_0_14_9)))
 (let ((?x46797 (+ (* (* 12.0 l_0_14_10) l_0_14_14) (* (* 12.0 l_0_14_11) l_0_14_7))))
 (let ((?x46799 (+ ?x46797 (* (* 12.0 l_0_14_12) l_0_14_8))))
 (let ((?x46807 (+ (- (- (- (+ ?x46799 ?x46800) ?x8794) ?x46483) ?x46486) (* (* 2.0 l_0_14_133) l_0_14_137))))
 (let ((?x46828 (- (- (- (- (+ (+ (+ ?x46807 ?x46809) ?x46812) ?x46815) ?x46818) ?x46821) ?x46824) ?x46827)))
 (let ((?x46834 (- (+ (+ (+ ?x46828 ?x46133) ?x46135) ?x46137) (* (* 6.0 l_0_14_49) l_0_14_53))))
 (let ((?x46849 (+ (- (- (- (- (- (- ?x46834 ?x46836) ?x46839) ?x46842) ?x46143) ?x46145) ?x46147) ?x46848)))
 (= (+ (+ (+ ?x46849 ?x46851) ?x46854) ?x46857) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46982 (* 2.0 l_0_14_90)))
 (let ((?x46983 (* ?x46982 l_0_14_93)))
 (let ((?x46979 (* 2.0 l_0_14_89)))
 (let ((?x46980 (* ?x46979 l_0_14_92)))
 (let ((?x46976 (* 2.0 l_0_14_88)))
 (let ((?x46977 (* ?x46976 l_0_14_91)))
 (let ((?x46856 (* 6.0 l_0_14_73)))
 (let ((?x46974 (* ?x46856 l_0_14_82)))
 (let ((?x46853 (* 6.0 l_0_14_72)))
 (let ((?x46972 (* ?x46853 l_0_14_81)))
 (let ((?x46850 (* 6.0 l_0_14_71)))
 (let ((?x46970 (* ?x46850 l_0_14_80)))
 (let ((?x46847 (* 6.0 l_0_14_70)))
 (let ((?x46968 (* ?x46847 l_0_14_79)))
 (let ((?x46002 (* 2.0 l_0_14_69)))
 (let ((?x46287 (* ?x46002 l_0_14_81)))
 (let ((?x45999 (* 2.0 l_0_14_68)))
 (let ((?x46285 (* ?x45999 l_0_14_80)))
 (let ((?x45996 (* 2.0 l_0_14_67)))
 (let ((?x46283 (* ?x45996 l_0_14_79)))
 (let ((?x46841 (* 6.0 l_0_14_52)))
 (let ((?x46963 (* ?x46841 l_0_14_61)))
 (let ((?x46838 (* 6.0 l_0_14_51)))
 (let ((?x46961 (* ?x46838 l_0_14_60)))
 (let ((?x46835 (* 6.0 l_0_14_50)))
 (let ((?x46959 (* ?x46835 l_0_14_59)))
 (let ((?x45981 (* 2.0 l_0_14_48)))
 (let ((?x46277 (* ?x45981 l_0_14_60)))
 (let ((?x45978 (* 2.0 l_0_14_47)))
 (let ((?x46275 (* ?x45978 l_0_14_59)))
 (let ((?x45975 (* 2.0 l_0_14_46)))
 (let ((?x46273 (* ?x45975 l_0_14_58)))
 (let ((?x46826 (* 12.0 l_0_14_31)))
 (let ((?x46952 (* ?x46826 l_0_14_40)))
 (let ((?x46823 (* 12.0 l_0_14_30)))
 (let ((?x46950 (* ?x46823 l_0_14_39)))
 (let ((?x46820 (* 12.0 l_0_14_29)))
 (let ((?x46948 (* ?x46820 l_0_14_38)))
 (let ((?x46817 (* 12.0 l_0_14_28)))
 (let ((?x46946 (* ?x46817 l_0_14_37)))
 (let ((?x46244 (* 12.0 l_0_14_18)))
 (let ((?x46944 (* ?x46244 l_0_14_9)))
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x46942 (* ?x46941 l_0_14_177)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x46939 (* ?x46938 l_0_14_176)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x46936 (* ?x46935 l_0_14_175)))
 (let ((?x46233 (* 12.0 l_0_14_17)))
 (let ((?x46933 (* ?x46233 l_0_14_8)))
 (let ((?x46228 (* 12.0 l_0_14_16)))
 (let ((?x46931 (* ?x46228 l_0_14_7)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x46929 (* ?x46928 l_0_14_156)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x46926 (* ?x46925 l_0_14_155)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x46923 (* ?x46922 l_0_14_154)))
 (let ((?x46814 (* 2.0 l_0_14_136)))
 (let ((?x46920 (* ?x46814 l_0_14_145)))
 (let ((?x46811 (* 2.0 l_0_14_135)))
 (let ((?x46918 (* ?x46811 l_0_14_144)))
 (let ((?x46808 (* 2.0 l_0_14_134)))
 (let ((?x46916 (* ?x46808 l_0_14_143)))
 (let ((?x46805 (* 2.0 l_0_14_133)))
 (let ((?x46914 (* ?x46805 l_0_14_142)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x46912 (* ?x46911 l_0_14_114)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x46909 (* ?x46894 l_0_14_113)))
 (let ((?x10620 (* 12.0 l_0_14_10)))
 (let ((?x25535 (* ?x10620 l_0_14_19)))
 (let ((?x46915 (+ (+ (+ (+ ?x25535 (* (* 2.0 l_0_14_109) l_0_14_112)) ?x46909) ?x46912) ?x46914)))
 (let ((?x46932 (+ (- (- (- (+ (+ (+ ?x46915 ?x46916) ?x46918) ?x46920) ?x46923) ?x46926) ?x46929) ?x46931)))
 (let ((?x46949 (- (- (+ (+ (+ (+ (+ ?x46932 ?x46933) ?x46936) ?x46939) ?x46942) ?x46944) ?x46946) ?x46948)))
 (let ((?x46958 (- (+ (+ (+ (- (- ?x46949 ?x46950) ?x46952) ?x46273) ?x46275) ?x46277) (* (* 6.0 l_0_14_49) l_0_14_58))))
 (let ((?x46969 (+ (- (- (- (- (- (- ?x46958 ?x46959) ?x46961) ?x46963) ?x46283) ?x46285) ?x46287) ?x46968)))
 (= (- (- (- (+ (+ (+ ?x46969 ?x46970) ?x46972) ?x46974) ?x46977) ?x46980) ?x46983) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47100 (* l_0_14_78 l_0_14_78)))
 (let ((?x47101 (* 3.0 ?x47100)))
 (let ((?x47097 (* l_0_14_77 l_0_14_77)))
 (let ((?x47098 (* 3.0 ?x47097)))
 (let ((?x47094 (* l_0_14_76 l_0_14_76)))
 (let ((?x47095 (* 3.0 ?x47094)))
 (let ((?x47091 (* l_0_14_75 l_0_14_75)))
 (let ((?x47092 (* 3.0 ?x47091)))
 (let ((?x47088 (* l_0_14_74 l_0_14_74)))
 (let ((?x47089 (* 3.0 ?x47088)))
 (let ((?x47086 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x47083 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x47080 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x47077 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x47071 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x47068 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x47065 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x47062 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x47059 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x45655 (* l_0_14_15 l_0_14_15)))
 (let ((?x47056 (* 6.0 ?x45655)))
 (let ((?x47054 (* l_0_14_141 l_0_14_141)))
 (let ((?x47052 (* l_0_14_140 l_0_14_140)))
 (let ((?x45653 (* l_0_14_14 l_0_14_14)))
 (let ((?x47050 (* 6.0 ?x45653)))
 (let ((?x47048 (* l_0_14_139 l_0_14_139)))
 (let ((?x47046 (* l_0_14_138 l_0_14_138)))
 (let ((?x47044 (* l_0_14_137 l_0_14_137)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46576 (* ?x46485 l_0_14_139)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46573 (* ?x46482 l_0_14_138)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x46570 (* ?x25035 l_0_14_137)))
 (let ((?x45651 (* l_0_14_13 l_0_14_13)))
 (let ((?x47039 (* 6.0 ?x45651)))
 (let ((?x47038 (+ (* 6.0 (* l_0_14_11 l_0_14_11)) (* 6.0 (* l_0_14_12 l_0_14_12)))))
 (let ((?x47049 (+ (+ (+ (- (- (- (+ ?x47038 ?x47039) ?x46570) ?x46573) ?x46576) ?x47044) ?x47046) ?x47048)))
 (let ((?x47066 (- (- (- (+ (+ (+ (+ ?x47049 ?x47050) ?x47052) ?x47054) ?x47056) ?x47059) ?x47062) ?x47065)))
 (let ((?x47078 (- (- (- (- ?x47066 ?x47068) ?x47071) (* (* 3.0 l_0_14_53) l_0_14_53)) ?x47077)))
 (let ((?x47099 (+ (+ (+ (+ (- (- (- ?x47078 ?x47080) ?x47083) ?x47086) ?x47089) ?x47092) ?x47095) ?x47098)))
 (= (+ ?x47099 ?x47101) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46982 (* 2.0 l_0_14_90)))
 (let ((?x47220 (* ?x46982 l_0_14_97)))
 (let ((?x46979 (* 2.0 l_0_14_89)))
 (let ((?x47218 (* ?x46979 l_0_14_96)))
 (let ((?x46976 (* 2.0 l_0_14_88)))
 (let ((?x47216 (* ?x46976 l_0_14_95)))
 (let ((?x47214 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x47211 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x47208 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x47205 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x47202 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x47199 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x47196 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x47193 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x47190 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x47184 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x47181 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x47178 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x47175 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x47172 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x47169 (* ?x46941 l_0_14_181)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x47167 (* ?x46938 l_0_14_180)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x47165 (* ?x46935 l_0_14_179)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x47163 (* ?x46928 l_0_14_160)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x47161 (* ?x46925 l_0_14_159)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x47159 (* ?x46922 l_0_14_158)))
 (let ((?x47157 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x47154 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47151 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x47148 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x47145 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47142 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47139 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x46485 (* 2.0 l_0_14_132)))
 (let ((?x46636 (* ?x46485 l_0_14_144)))
 (let ((?x46482 (* 2.0 l_0_14_131)))
 (let ((?x46634 (* ?x46482 l_0_14_143)))
 (let ((?x25035 (* 2.0 l_0_14_130)))
 (let ((?x46632 (* ?x25035 l_0_14_142)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x47133 (* ?x46104 l_0_14_18)))
 (let ((?x46079 (* 12.0 l_0_14_12)))
 (let ((?x47131 (* ?x46079 l_0_14_17)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x47129 (* ?x46911 l_0_14_118)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x47127 (* ?x46894 l_0_14_117)))
 (let ((?x46074 (* 12.0 l_0_14_11)))
 (let ((?x47125 (* ?x46074 l_0_14_16)))
 (let ((?x47132 (+ (+ (+ (+ (* (* 2.0 l_0_14_109) l_0_14_116) ?x47125) ?x47127) ?x47129) ?x47131)))
 (let ((?x47146 (+ (+ (+ (- (- (- (+ ?x47132 ?x47133) ?x46632) ?x46634) ?x46636) ?x47139) ?x47142) ?x47145)))
 (let ((?x47164 (- (- (- (+ (+ (+ (+ ?x47146 ?x47148) ?x47151) ?x47154) ?x47157) ?x47159) ?x47161) ?x47163)))
 (let ((?x47182 (- (- (- (- (+ (+ (+ ?x47164 ?x47165) ?x47167) ?x47169) ?x47172) ?x47175) ?x47178) ?x47181)))
 (let ((?x47194 (- (- (- (- ?x47182 ?x47184) (* (* 6.0 l_0_14_53) l_0_14_58)) ?x47190) ?x47193)))
 (let ((?x47215 (+ (+ (+ (+ (+ (- (- ?x47194 ?x47196) ?x47199) ?x47202) ?x47205) ?x47208) ?x47211) ?x47214)))
 (= (- (- (- ?x47215 ?x47216) ?x47218) ?x47220) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47387 (* l_0_14_84 l_0_14_84)))
 (let ((?x47388 (* 3.0 ?x47387)))
 (let ((?x47384 (* l_0_14_83 l_0_14_83)))
 (let ((?x47385 (* 3.0 ?x47384)))
 (let ((?x47381 (* l_0_14_82 l_0_14_82)))
 (let ((?x47382 (* 3.0 ?x47381)))
 (let ((?x47378 (* l_0_14_81 l_0_14_81)))
 (let ((?x47379 (* 3.0 ?x47378)))
 (let ((?x47375 (* l_0_14_80 l_0_14_80)))
 (let ((?x47376 (* 3.0 ?x47375)))
 (let ((?x47372 (* l_0_14_79 l_0_14_79)))
 (let ((?x47373 (* 3.0 ?x47372)))
 (let ((?x47370 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x47367 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x47364 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x47361 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x47358 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x47352 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47349 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47346 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47343 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47340 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47337 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x45779 (* l_0_14_21 l_0_14_21)))
 (let ((?x47334 (* 6.0 ?x45779)))
 (let ((?x45777 (* l_0_14_20 l_0_14_20)))
 (let ((?x47332 (* 6.0 ?x45777)))
 (let ((?x45775 (* l_0_14_19 l_0_14_19)))
 (let ((?x47330 (* 6.0 ?x45775)))
 (let ((?x45773 (* l_0_14_18 l_0_14_18)))
 (let ((?x47328 (* 6.0 ?x45773)))
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x47326 (* ?x46941 l_0_14_186)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x47324 (* ?x46938 l_0_14_185)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x47322 (* ?x46935 l_0_14_184)))
 (let ((?x45771 (* l_0_14_17 l_0_14_17)))
 (let ((?x47320 (* 6.0 ?x45771)))
 (let ((?x45767 (* l_0_14_16 l_0_14_16)))
 (let ((?x47318 (* 6.0 ?x45767)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x47316 (* ?x46928 l_0_14_165)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x47314 (* ?x46925 l_0_14_164)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x47312 (* ?x46922 l_0_14_163)))
 (let ((?x47310 (* l_0_14_147 l_0_14_147)))
 (let ((?x47308 (* l_0_14_146 l_0_14_146)))
 (let ((?x47306 (* l_0_14_145 l_0_14_145)))
 (let ((?x47304 (* l_0_14_144 l_0_14_144)))
 (let ((?x47302 (* l_0_14_143 l_0_14_143)))
 (let ((?x47300 (* l_0_14_142 l_0_14_142)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x47298 (* ?x46911 l_0_14_123)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x47296 (* ?x46894 l_0_14_122)))
 (let ((?x35793 (* 2.0 l_0_14_109)))
 (let ((?x47294 (* ?x35793 l_0_14_121)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x47292 (* ?x47291 l_0_14_90)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x47289 (* ?x47288 l_0_14_89)))
 (let ((?x47297 (+ (+ (- (- (* (* (- 2.0) l_0_14_100) l_0_14_88) ?x47289) ?x47292) ?x47294) ?x47296)))
 (let ((?x47311 (+ (+ (+ (+ (+ (+ (+ ?x47297 ?x47298) ?x47300) ?x47302) ?x47304) ?x47306) ?x47308) ?x47310)))
 (let ((?x47325 (+ (+ (+ (+ (- (- (- ?x47311 ?x47312) ?x47314) ?x47316) ?x47318) ?x47320) ?x47322) ?x47324)))
 (let ((?x47341 (- (- (+ (+ (+ (+ (+ ?x47325 ?x47326) ?x47328) ?x47330) ?x47332) ?x47334) ?x47337) ?x47340)))
 (let ((?x47356 (- (- (- (- (- ?x47341 ?x47343) ?x47346) ?x47349) ?x47352) (* (* 3.0 l_0_14_58) l_0_14_58))))
 (let ((?x47377 (+ (+ (- (- (- (- (- ?x47356 ?x47358) ?x47361) ?x47364) ?x47367) ?x47370) ?x47373) ?x47376)))
 (= (+ (+ (+ (+ ?x47377 ?x47379) ?x47382) ?x47385) ?x47388) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44746 (* l_0_14_66 l_0_14_66)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x47475 (* ?x44743 l_0_14_71)))
 (let ((?x44740 (* l_0_14_65 l_0_14_65)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x47472 (* ?x44737 l_0_14_70)))
 (let ((?x33786 (* l_0_14_45 l_0_14_45)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x47469 (* ?x44731 l_0_14_50)))
 (let ((?x23151 (* l_0_14_44 l_0_14_44)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x47466 (* ?x44725 l_0_14_49)))
 (let ((?x44719 (* 12.0 l_0_14_3)))
 (let ((?x45964 (* ?x44719 l_0_14_8)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x45953 (* ?x44713 l_0_14_29)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x45951 (* ?x44707 l_0_14_28)))
 (let ((?x44695 (* 12.0 l_0_14_2)))
 (let ((?x45940 (* ?x44695 l_0_14_7)))
 (let ((?x47457 (- (* (* (- 2.0) l_0_14_191) l_0_14_196) (* (* 2.0 l_0_14_192) l_0_14_197))))
 (let ((?x47462 (- (- (+ ?x47457 ?x45940) (* (* 2.0 l_0_14_212) l_0_14_217)) (* (* 2.0 l_0_14_213) l_0_14_218))))
 (let ((?x47471 (+ (- (+ (- (+ (- (- ?x47462 ?x45951) ?x45953) ?x45964) ?x47466) ?x23151) ?x47469) ?x33786)))
 (= (- (+ (- (+ ?x47471 ?x47472) ?x44740) ?x47475) ?x44746) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x12456 (* ?x44743 l_0_14_75)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x25783 (* ?x44737 l_0_14_74)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x25778 (* ?x44731 l_0_14_54)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x36301 (* ?x44725 l_0_14_53)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x46121 (* ?x44713 l_0_14_33)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x46119 (* ?x44707 l_0_14_32)))
 (let ((?x44687 (* l_0_14_129 l_0_14_129)))
 (let ((?x44686 (* l_0_14_128 l_0_14_128)))
 (let ((?x46079 (* 12.0 l_0_14_12)))
 (let ((?x46094 (* ?x46079 l_0_14_3)))
 (let ((?x46074 (* 12.0 l_0_14_11)))
 (let ((?x25122 (* ?x46074 l_0_14_2)))
 (let ((?x36316 (- (- (- (+ ?x25122 ?x46094) ?x44686) ?x44687) (* (* 2.0 l_0_14_191) l_0_14_200))))
 (let ((?x12078 (- (- ?x36316 (* (* 2.0 l_0_14_192) l_0_14_201)) (* (* 2.0 l_0_14_212) l_0_14_221))))
 (let ((?x36307 (- (- (- (- ?x12078 (* (* 2.0 l_0_14_213) l_0_14_222)) ?x46119) ?x46121) ?x36301)))
 (= (+ (+ (- ?x36307 ?x25778) ?x25783) ?x12456) 0.0)))))))))))))))))))))))
(assert
 (let ((?x46460 (* l_0_14_87 l_0_14_87)))
 (let ((?x46458 (* l_0_14_86 l_0_14_86)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x47539 (* ?x44743 l_0_14_80)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x47537 (* ?x44737 l_0_14_79)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x47535 (* ?x44731 l_0_14_59)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x47533 (* ?x44725 l_0_14_58)))
 (let ((?x44713 (* 12.0 l_0_14_24)))
 (let ((?x46261 (* ?x44713 l_0_14_38)))
 (let ((?x44707 (* 12.0 l_0_14_23)))
 (let ((?x46259 (* ?x44707 l_0_14_37)))
 (let ((?x46431 (* l_0_14_171 l_0_14_171)))
 (let ((?x46429 (* l_0_14_170 l_0_14_170)))
 (let ((?x46233 (* 12.0 l_0_14_17)))
 (let ((?x46234 (* ?x46233 l_0_14_3)))
 (let ((?x46228 (* 12.0 l_0_14_16)))
 (let ((?x46229 (* ?x46228 l_0_14_2)))
 (let ((?x46427 (* l_0_14_150 l_0_14_150)))
 (let ((?x46425 (* l_0_14_149 l_0_14_149)))
 (let ((?x47517 (- (+ (* l_0_14_107 l_0_14_107) (* l_0_14_108 l_0_14_108)) ?x46425)))
 (let ((?x47524 (- (+ (+ (+ (+ (- ?x47517 ?x46427) ?x46229) ?x46234) ?x46429) ?x46431) (* (* 2.0 l_0_14_191) l_0_14_205))))
 (let ((?x47528 (- (- ?x47524 (* (* 2.0 l_0_14_192) l_0_14_206)) (* (* 2.0 l_0_14_212) l_0_14_226))))
 (let ((?x47534 (- (- (- (- ?x47528 (* (* 2.0 l_0_14_213) l_0_14_227)) ?x46259) ?x46261) ?x47533)))
 (= (- (- (+ (+ (- ?x47534 ?x47535) ?x47537) ?x47539) ?x46458) ?x46460) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x45528 (* l_0_14_9 l_0_14_9)))
 (let ((?x46775 (* 6.0 ?x45528)))
 (let ((?x45526 (* l_0_14_8 l_0_14_8)))
 (let ((?x46773 (* 6.0 ?x45526)))
 (let ((?x45524 (* l_0_14_7 l_0_14_7)))
 (let ((?x46759 (* 6.0 ?x45524)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x47475 (* ?x44743 l_0_14_71)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x47472 (* ?x44737 l_0_14_70)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x47469 (* ?x44731 l_0_14_50)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x47466 (* ?x44725 l_0_14_49)))
 (let ((?x46739 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x46736 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x46733 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x46730 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x47561 (* l_0_14_220 l_0_14_220)))
 (let ((?x47559 (* l_0_14_219 l_0_14_219)))
 (let ((?x47557 (* l_0_14_218 l_0_14_218)))
 (let ((?x47555 (* l_0_14_217 l_0_14_217)))
 (let ((?x47553 (* l_0_14_199 l_0_14_199)))
 (let ((?x47551 (* l_0_14_198 l_0_14_198)))
 (let ((?x11329 (* l_0_14_197 l_0_14_197)))
 (let ((?x12609 (* l_0_14_196 l_0_14_196)))
 (let ((?x45532 (* l_0_14_10 l_0_14_10)))
 (let ((?x46720 (* 6.0 ?x45532)))
 (let ((?x47560 (- (- (- (- (- (- (- ?x46720 ?x12609) ?x11329) ?x47551) ?x47553) ?x47555) ?x47557) ?x47559)))
 (let ((?x47568 (+ (+ (- (- (- (- (- ?x47560 ?x47561) ?x46730) ?x46733) ?x46736) ?x46739) ?x47466) ?x47469)))
 (let ((?x47574 (- (- ?x47568 (* (* 1.0 l_0_14_49) l_0_14_49)) (* (* 1.0 l_0_14_50) l_0_14_50))))
 (let ((?x47580 (- (- ?x47574 (* (* 1.0 l_0_14_51) l_0_14_51)) (* (* 1.0 l_0_14_52) l_0_14_52))))
 (let ((?x47585 (+ (+ (- (- ?x47580 ?x47472) ?x47475) ?x46759) (* 1.0 (* l_0_14_70 l_0_14_70)))))
 (let ((?x47589 (+ (+ ?x47585 (* 1.0 (* l_0_14_71 l_0_14_71))) (* 1.0 (* l_0_14_72 l_0_14_72)))))
 (= (+ (+ (+ ?x47589 (* 1.0 (* l_0_14_73 l_0_14_73))) ?x46773) ?x46775) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47679 (* 2.0 l_0_14_73)))
 (let ((?x47680 (* ?x47679 l_0_14_77)))
 (let ((?x47676 (* 2.0 l_0_14_72)))
 (let ((?x47677 (* ?x47676 l_0_14_76)))
 (let ((?x47673 (* 2.0 l_0_14_71)))
 (let ((?x47674 (* ?x47673 l_0_14_75)))
 (let ((?x47670 (* 2.0 l_0_14_70)))
 (let ((?x47671 (* ?x47670 l_0_14_74)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x12456 (* ?x44743 l_0_14_75)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x25783 (* ?x44737 l_0_14_74)))
 (let ((?x47665 (* 2.0 l_0_14_52)))
 (let ((?x47666 (* ?x47665 l_0_14_56)))
 (let ((?x47662 (* 2.0 l_0_14_51)))
 (let ((?x47663 (* ?x47662 l_0_14_55)))
 (let ((?x47659 (* 2.0 l_0_14_50)))
 (let ((?x47660 (* ?x47659 l_0_14_54)))
 (let ((?x47656 (* 2.0 l_0_14_49)))
 (let ((?x47657 (* ?x47656 l_0_14_53)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x25778 (* ?x44731 l_0_14_54)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x36301 (* ?x44725 l_0_14_53)))
 (let ((?x46826 (* 12.0 l_0_14_31)))
 (let ((?x46827 (* ?x46826 l_0_14_35)))
 (let ((?x46823 (* 12.0 l_0_14_30)))
 (let ((?x46824 (* ?x46823 l_0_14_34)))
 (let ((?x46820 (* 12.0 l_0_14_29)))
 (let ((?x46821 (* ?x46820 l_0_14_33)))
 (let ((?x46817 (* 12.0 l_0_14_28)))
 (let ((?x46818 (* ?x46817 l_0_14_32)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x46800 (* ?x46104 l_0_14_9)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x35310 (* ?x45828 l_0_14_134)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x10070 (* ?x35186 l_0_14_133)))
 (let ((?x46797 (+ (* (* 12.0 l_0_14_10) l_0_14_14) (* (* 12.0 l_0_14_11) l_0_14_7))))
 (let ((?x46799 (+ ?x46797 (* (* 12.0 l_0_14_12) l_0_14_8))))
 (let ((?x47628 (- (+ (- (- ?x46799 ?x10070) ?x35310) ?x46800) (* (* 2.0 l_0_14_196) l_0_14_200))))
 (let ((?x47634 (- (- ?x47628 (* (* 2.0 l_0_14_197) l_0_14_201)) (* (* 2.0 l_0_14_198) l_0_14_202))))
 (let ((?x47640 (- (- ?x47634 (* (* 2.0 l_0_14_199) l_0_14_203)) (* (* 2.0 l_0_14_217) l_0_14_221))))
 (let ((?x47646 (- (- ?x47640 (* (* 2.0 l_0_14_218) l_0_14_222)) (* (* 2.0 l_0_14_219) l_0_14_223))))
 (let ((?x47652 (- (- (- (- ?x47646 (* (* 2.0 l_0_14_220) l_0_14_224)) ?x46818) ?x46821) ?x46824)))
 (let ((?x47667 (- (- (- (- (+ (+ (- ?x47652 ?x46827) ?x36301) ?x25778) ?x47657) ?x47660) ?x47663) ?x47666)))
 (= (+ (+ (+ (+ (- (- ?x47667 ?x25783) ?x12456) ?x47671) ?x47674) ?x47677) ?x47680) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x47757 (* ?x46292 l_0_14_92)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x47755 (* ?x46289 l_0_14_91)))
 (let ((?x47679 (* 2.0 l_0_14_73)))
 (let ((?x47753 (* ?x47679 l_0_14_82)))
 (let ((?x47676 (* 2.0 l_0_14_72)))
 (let ((?x47751 (* ?x47676 l_0_14_81)))
 (let ((?x47673 (* 2.0 l_0_14_71)))
 (let ((?x47749 (* ?x47673 l_0_14_80)))
 (let ((?x47670 (* 2.0 l_0_14_70)))
 (let ((?x47747 (* ?x47670 l_0_14_79)))
 (let ((?x44743 (* 2.0 l_0_14_66)))
 (let ((?x47539 (* ?x44743 l_0_14_80)))
 (let ((?x44737 (* 2.0 l_0_14_65)))
 (let ((?x47537 (* ?x44737 l_0_14_79)))
 (let ((?x47665 (* 2.0 l_0_14_52)))
 (let ((?x47743 (* ?x47665 l_0_14_61)))
 (let ((?x47662 (* 2.0 l_0_14_51)))
 (let ((?x47741 (* ?x47662 l_0_14_60)))
 (let ((?x47659 (* 2.0 l_0_14_50)))
 (let ((?x47739 (* ?x47659 l_0_14_59)))
 (let ((?x47656 (* 2.0 l_0_14_49)))
 (let ((?x47737 (* ?x47656 l_0_14_58)))
 (let ((?x44731 (* 2.0 l_0_14_45)))
 (let ((?x47535 (* ?x44731 l_0_14_59)))
 (let ((?x44725 (* 2.0 l_0_14_44)))
 (let ((?x47533 (* ?x44725 l_0_14_58)))
 (let ((?x46826 (* 12.0 l_0_14_31)))
 (let ((?x46952 (* ?x46826 l_0_14_40)))
 (let ((?x46823 (* 12.0 l_0_14_30)))
 (let ((?x46950 (* ?x46823 l_0_14_39)))
 (let ((?x46820 (* 12.0 l_0_14_29)))
 (let ((?x46948 (* ?x46820 l_0_14_38)))
 (let ((?x46817 (* 12.0 l_0_14_28)))
 (let ((?x46946 (* ?x46817 l_0_14_37)))
 (let ((?x46244 (* 12.0 l_0_14_18)))
 (let ((?x46944 (* ?x46244 l_0_14_9)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x47712 (* ?x46241 l_0_14_176)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x47710 (* ?x46238 l_0_14_175)))
 (let ((?x46233 (* 12.0 l_0_14_17)))
 (let ((?x46933 (* ?x46233 l_0_14_8)))
 (let ((?x46228 (* 12.0 l_0_14_16)))
 (let ((?x46931 (* ?x46228 l_0_14_7)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x47706 (* ?x46225 l_0_14_155)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x47698 (* ?x46222 l_0_14_154)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x47697 (* ?x46215 l_0_14_113)))
 (let ((?x10620 (* 12.0 l_0_14_10)))
 (let ((?x25535 (* ?x10620 l_0_14_19)))
 (let ((?x47707 (- (- (+ (+ ?x25535 (* (* 2.0 l_0_14_107) l_0_14_112)) ?x47697) ?x47698) ?x47706)))
 (let ((?x47716 (- (+ (+ (+ (+ (+ ?x47707 ?x46931) ?x46933) ?x47710) ?x47712) ?x46944) (* (* 2.0 l_0_14_196) l_0_14_205))))
 (let ((?x47720 (- (- ?x47716 (* (* 2.0 l_0_14_197) l_0_14_206)) (* (* 2.0 l_0_14_198) l_0_14_207))))
 (let ((?x47724 (- (- ?x47720 (* (* 2.0 l_0_14_199) l_0_14_208)) (* (* 2.0 l_0_14_217) l_0_14_226))))
 (let ((?x47728 (- (- ?x47724 (* (* 2.0 l_0_14_218) l_0_14_227)) (* (* 2.0 l_0_14_219) l_0_14_228))))
 (let ((?x47733 (- (- (- (- ?x47728 (* (* 2.0 l_0_14_220) l_0_14_229)) ?x46946) ?x46948) ?x46950)))
 (let ((?x47744 (- (- (- (- (+ (+ (- ?x47733 ?x46952) ?x47533) ?x47535) ?x47737) ?x47739) ?x47741) ?x47743)))
 (let ((?x47756 (- (+ (+ (+ (+ (- (- ?x47744 ?x47537) ?x47539) ?x47747) ?x47749) ?x47751) ?x47753) ?x47755)))
 (= (- ?x47756 ?x47757) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47071 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x47068 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x47065 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x47062 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x47059 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x36805 (* l_0_14_225 l_0_14_225)))
 (let ((?x12959 (* l_0_14_224 l_0_14_224)))
 (let ((?x26086 (* l_0_14_223 l_0_14_223)))
 (let ((?x12946 (* l_0_14_222 l_0_14_222)))
 (let ((?x26078 (* l_0_14_221 l_0_14_221)))
 (let ((?x26075 (* l_0_14_204 l_0_14_204)))
 (let ((?x36784 (* l_0_14_203 l_0_14_203)))
 (let ((?x26060 (* l_0_14_202 l_0_14_202)))
 (let ((?x36781 (* l_0_14_201 l_0_14_201)))
 (let ((?x12871 (* l_0_14_200 l_0_14_200)))
 (let ((?x45655 (* l_0_14_15 l_0_14_15)))
 (let ((?x47056 (* 6.0 ?x45655)))
 (let ((?x45653 (* l_0_14_14 l_0_14_14)))
 (let ((?x47050 (* 6.0 ?x45653)))
 (let ((?x45651 (* l_0_14_13 l_0_14_13)))
 (let ((?x47039 (* 6.0 ?x45651)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x46102 (* ?x45828 l_0_14_138)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x46099 (* ?x35186 l_0_14_137)))
 (let ((?x47038 (+ (* 6.0 (* l_0_14_11 l_0_14_11)) (* 6.0 (* l_0_14_12 l_0_14_12)))))
 (let ((?x12888 (- (- (+ (+ (+ (- (- ?x47038 ?x46099) ?x46102) ?x47039) ?x47050) ?x47056) ?x12871) ?x36781)))
 (let ((?x36802 (- (- (- (- (- (- (- ?x12888 ?x26060) ?x36784) ?x26075) ?x26078) ?x12946) ?x26086) ?x12959)))
 (let ((?x47780 (- (- (- (- (- (- (- ?x36802 ?x36805) ?x47059) ?x47062) ?x47065) ?x47068) ?x47071) (* (* 1.0 l_0_14_53) l_0_14_53))))
 (let ((?x47786 (- (- ?x47780 (* (* 1.0 l_0_14_54) l_0_14_54)) (* (* 1.0 l_0_14_55) l_0_14_55))))
 (let ((?x47792 (- (- ?x47786 (* (* 1.0 l_0_14_56) l_0_14_56)) (* (* 1.0 l_0_14_57) l_0_14_57))))
 (let ((?x47796 (+ (+ ?x47792 (* 1.0 (* l_0_14_74 l_0_14_74))) (* 1.0 (* l_0_14_75 l_0_14_75)))))
 (let ((?x47800 (+ (+ ?x47796 (* 1.0 (* l_0_14_76 l_0_14_76))) (* 1.0 (* l_0_14_77 l_0_14_77)))))
 (= (+ ?x47800 (* 1.0 (* l_0_14_78 l_0_14_78))) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x47865 (* ?x46292 l_0_14_96)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x47863 (* ?x46289 l_0_14_95)))
 (let ((?x47861 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x47858 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x47855 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x47852 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x47849 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x47846 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x47843 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x47840 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x47837 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x47834 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x47184 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x47181 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x47178 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x47175 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x47172 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x26295 (* ?x46241 l_0_14_180)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x13124 (* ?x46238 l_0_14_179)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x13118 (* ?x46225 l_0_14_159)))
 (let ((?x47157 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x26205 (* ?x46222 l_0_14_158)))
 (let ((?x47148 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x46104 (* 12.0 l_0_14_13)))
 (let ((?x47133 (* ?x46104 l_0_14_18)))
 (let ((?x45828 (* 2.0 l_0_14_129)))
 (let ((?x46220 (* ?x45828 l_0_14_143)))
 (let ((?x35186 (* 2.0 l_0_14_128)))
 (let ((?x46218 (* ?x35186 l_0_14_142)))
 (let ((?x46079 (* 12.0 l_0_14_12)))
 (let ((?x47131 (* ?x46079 l_0_14_17)))
 (let ((?x46074 (* 12.0 l_0_14_11)))
 (let ((?x47125 (* ?x46074 l_0_14_16)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x26452 (* ?x46215 l_0_14_117)))
 (let ((?x37044 (- (+ (+ (+ (* (* 2.0 l_0_14_107) l_0_14_116) ?x26452) ?x47125) ?x47131) ?x46218)))
 (let ((?x26294 (+ (- (+ (- (+ (+ (- ?x37044 ?x46220) ?x47133) ?x47148) ?x26205) ?x47157) ?x13118) ?x13124)))
 (let ((?x13135 (- (- (+ ?x26294 ?x26295) (* (* 2.0 l_0_14_200) l_0_14_205)) (* (* 2.0 l_0_14_201) l_0_14_206))))
 (let ((?x36954 (- (- ?x13135 (* (* 2.0 l_0_14_202) l_0_14_207)) (* (* 2.0 l_0_14_203) l_0_14_208))))
 (let ((?x26437 (- (- ?x36954 (* (* 2.0 l_0_14_204) l_0_14_209)) (* (* 2.0 l_0_14_221) l_0_14_226))))
 (let ((?x47821 (- (- ?x26437 (* (* 2.0 l_0_14_222) l_0_14_227)) (* (* 2.0 l_0_14_223) l_0_14_228))))
 (let ((?x47827 (- (- ?x47821 (* (* 2.0 l_0_14_224) l_0_14_229)) (* (* 2.0 l_0_14_225) l_0_14_230))))
 (let ((?x47838 (- (- (- (- (- (- (- ?x47827 ?x47172) ?x47175) ?x47178) ?x47181) ?x47184) ?x47834) ?x47837)))
 (let ((?x47859 (+ (+ (+ (+ (- (- (- ?x47838 ?x47840) ?x47843) ?x47846) ?x47849) ?x47852) ?x47855) ?x47858)))
 (= (- (- (+ ?x47859 ?x47861) ?x47863) ?x47865) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47352 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47349 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47346 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47343 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47340 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47337 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x47965 (* l_0_14_231 l_0_14_231)))
 (let ((?x47963 (* l_0_14_230 l_0_14_230)))
 (let ((?x47961 (* l_0_14_229 l_0_14_229)))
 (let ((?x47959 (* l_0_14_228 l_0_14_228)))
 (let ((?x47957 (* l_0_14_227 l_0_14_227)))
 (let ((?x47955 (* l_0_14_226 l_0_14_226)))
 (let ((?x47953 (* l_0_14_210 l_0_14_210)))
 (let ((?x45779 (* l_0_14_21 l_0_14_21)))
 (let ((?x47334 (* 6.0 ?x45779)))
 (let ((?x47950 (* l_0_14_209 l_0_14_209)))
 (let ((?x47948 (* l_0_14_208 l_0_14_208)))
 (let ((?x47946 (* l_0_14_207 l_0_14_207)))
 (let ((?x47944 (* l_0_14_206 l_0_14_206)))
 (let ((?x47942 (* l_0_14_205 l_0_14_205)))
 (let ((?x45777 (* l_0_14_20 l_0_14_20)))
 (let ((?x47332 (* 6.0 ?x45777)))
 (let ((?x45775 (* l_0_14_19 l_0_14_19)))
 (let ((?x47330 (* 6.0 ?x45775)))
 (let ((?x45773 (* l_0_14_18 l_0_14_18)))
 (let ((?x47328 (* 6.0 ?x45773)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x47937 (* ?x46241 l_0_14_185)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x47935 (* ?x46238 l_0_14_184)))
 (let ((?x45771 (* l_0_14_17 l_0_14_17)))
 (let ((?x47320 (* 6.0 ?x45771)))
 (let ((?x45767 (* l_0_14_16 l_0_14_16)))
 (let ((?x47318 (* 6.0 ?x45767)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x47931 (* ?x46225 l_0_14_164)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x47929 (* ?x46222 l_0_14_163)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x47927 (* ?x46215 l_0_14_122)))
 (let ((?x46213 (* 2.0 l_0_14_107)))
 (let ((?x47925 (* ?x46213 l_0_14_121)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x37265 (* ?x47288 l_0_14_87)))
 (let ((?x47930 (- (+ (+ (- (* (* (- 2.0) l_0_14_100) l_0_14_86) ?x37265) ?x47925) ?x47927) ?x47929)))
 (let ((?x47940 (+ (+ (+ (+ (+ (+ (- ?x47930 ?x47931) ?x47318) ?x47320) ?x47935) ?x47937) ?x47328) ?x47330)))
 (let ((?x47952 (+ (- (- (- (- (- (+ ?x47940 ?x47332) ?x47942) ?x47944) ?x47946) ?x47948) ?x47950) ?x47334)))
 (let ((?x47966 (- (- (- (- (- (- (- ?x47952 ?x47953) ?x47955) ?x47957) ?x47959) ?x47961) ?x47963) ?x47965)))
 (let ((?x47975 (- (- (- (- (- (- (- ?x47966 ?x47337) ?x47340) ?x47343) ?x47346) ?x47349) ?x47352) (* (* 1.0 l_0_14_58) l_0_14_58))))
 (let ((?x47981 (- (- ?x47975 (* (* 1.0 l_0_14_59) l_0_14_59)) (* (* 1.0 l_0_14_60) l_0_14_60))))
 (let ((?x47987 (- (- ?x47981 (* (* 1.0 l_0_14_61) l_0_14_61)) (* (* 1.0 l_0_14_62) l_0_14_62))))
 (let ((?x47992 (+ (- ?x47987 (* (* 1.0 l_0_14_63) l_0_14_63)) (* 1.0 (* l_0_14_79 l_0_14_79)))))
 (let ((?x47996 (+ (+ ?x47992 (* 1.0 (* l_0_14_80 l_0_14_80))) (* 1.0 (* l_0_14_81 l_0_14_81)))))
 (let ((?x48000 (+ (+ ?x47996 (* 1.0 (* l_0_14_82 l_0_14_82))) (* 1.0 (* l_0_14_83 l_0_14_83)))))
 (= (+ ?x48000 (* 1.0 (* l_0_14_84 l_0_14_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44931 (* l_0_14_64 l_0_14_64)))
 (let ((?x44956 (* 3.0 ?x44931)))
 (= (+ (* (* (- 3.0) l_0_14_43) l_0_14_43) ?x44956) 0.0))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45240 (* ?x45239 l_0_14_86)))
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45309 (* ?x45055 l_0_14_67)))
 (let ((?x45050 (* 6.0 l_0_14_43)))
 (let ((?x45302 (* ?x45050 l_0_14_46)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45220 (* ?x45219 l_0_14_170)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45214 (* ?x45213 l_0_14_149)))
 (let ((?x48063 (+ (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_107) ?x45214) ?x45220) ?x45302) ?x45309)))
 (= (+ ?x48063 ?x45240) 0.0)))))))))))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45351 (* ?x45055 l_0_14_70)))
 (= (+ (* (* (- 6.0) l_0_14_43) l_0_14_49) ?x45351) 0.0))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45407 (* ?x45055 l_0_14_74)))
 (= (+ (* (* (- 6.0) l_0_14_43) l_0_14_53) ?x45407) 0.0))))
(assert
 (let ((?x45055 (* 6.0 l_0_14_64)))
 (let ((?x45465 (* ?x45055 l_0_14_79)))
 (= (+ (* (* (- 6.0) l_0_14_43) l_0_14_58) ?x45465) 0.0))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x46293 (* ?x46292 l_0_14_89)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x46290 (* ?x46289 l_0_14_88)))
 (let ((?x45893 (* l_0_14_69 l_0_14_69)))
 (let ((?x46456 (* 3.0 ?x45893)))
 (let ((?x45890 (* l_0_14_68 l_0_14_68)))
 (let ((?x46454 (* 3.0 ?x45890)))
 (let ((?x45887 (* l_0_14_67 l_0_14_67)))
 (let ((?x46452 (* 3.0 ?x45887)))
 (let ((?x46446 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x46443 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x46440 (* (* 3.0 l_0_14_46) l_0_14_46)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x46242 (* ?x46241 l_0_14_173)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x46239 (* ?x46238 l_0_14_172)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x46226 (* ?x46225 l_0_14_152)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x46223 (* ?x46222 l_0_14_151)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x46216 (* ?x46215 l_0_14_110)))
 (let ((?x48085 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_109) ?x46216) ?x46223) ?x46226) ?x46239)))
 (let ((?x48092 (+ (+ (+ (- (- (- (- ?x48085 ?x46242) ?x46440) ?x46443) ?x46446) ?x46452) ?x46454) ?x46456)))
 (= (+ (+ ?x48092 ?x46290) ?x46293) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x47757 (* ?x46292 l_0_14_92)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x47755 (* ?x46289 l_0_14_91)))
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46519 (* ?x46518 l_0_14_72)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46515 (* ?x46514 l_0_14_71)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46511 (* ?x46510 l_0_14_70)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46503 (* ?x46502 l_0_14_51)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46499 (* ?x46498 l_0_14_50)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46495 (* ?x46494 l_0_14_49)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x47712 (* ?x46241 l_0_14_176)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x47710 (* ?x46238 l_0_14_175)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x47706 (* ?x46225 l_0_14_155)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x47698 (* ?x46222 l_0_14_154)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x47697 (* ?x46215 l_0_14_113)))
 (let ((?x26925 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_112) ?x47697) ?x47698) ?x47706) ?x47710)))
 (let ((?x26797 (+ (+ (+ (- (- (- (- ?x26925 ?x47712) ?x46495) ?x46499) ?x46503) ?x46511) ?x46515) ?x46519)))
 (= (+ (+ ?x26797 ?x47755) ?x47757) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x46292 (* 2.0 l_0_14_87)))
 (let ((?x47865 (* ?x46292 l_0_14_96)))
 (let ((?x46289 (* 2.0 l_0_14_86)))
 (let ((?x47863 (* ?x46289 l_0_14_95)))
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46596 (* ?x46518 l_0_14_76)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46594 (* ?x46514 l_0_14_75)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46592 (* ?x46510 l_0_14_74)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46588 (* ?x46502 l_0_14_55)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46586 (* ?x46498 l_0_14_54)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46584 (* ?x46494 l_0_14_53)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x26295 (* ?x46241 l_0_14_180)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x13124 (* ?x46238 l_0_14_179)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x13118 (* ?x46225 l_0_14_159)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x26205 (* ?x46222 l_0_14_158)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x26452 (* ?x46215 l_0_14_117)))
 (let ((?x37481 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_116) ?x26452) ?x26205) ?x13118) ?x13124)))
 (let ((?x37494 (+ (+ (+ (- (- (- (- ?x37481 ?x26295) ?x46584) ?x46586) ?x46588) ?x46592) ?x46594) ?x46596)))
 (= (+ (+ ?x37494 ?x47863) ?x47865) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x46518 (* 6.0 l_0_14_69)))
 (let ((?x46670 (* ?x46518 l_0_14_81)))
 (let ((?x46514 (* 6.0 l_0_14_68)))
 (let ((?x46668 (* ?x46514 l_0_14_80)))
 (let ((?x46510 (* 6.0 l_0_14_67)))
 (let ((?x46666 (* ?x46510 l_0_14_79)))
 (let ((?x46502 (* 6.0 l_0_14_48)))
 (let ((?x46662 (* ?x46502 l_0_14_60)))
 (let ((?x46498 (* 6.0 l_0_14_47)))
 (let ((?x46660 (* ?x46498 l_0_14_59)))
 (let ((?x46494 (* 6.0 l_0_14_46)))
 (let ((?x46658 (* ?x46494 l_0_14_58)))
 (let ((?x46241 (* 2.0 l_0_14_171)))
 (let ((?x47937 (* ?x46241 l_0_14_185)))
 (let ((?x46238 (* 2.0 l_0_14_170)))
 (let ((?x47935 (* ?x46238 l_0_14_184)))
 (let ((?x46225 (* 2.0 l_0_14_150)))
 (let ((?x47931 (* ?x46225 l_0_14_164)))
 (let ((?x46222 (* 2.0 l_0_14_149)))
 (let ((?x47929 (* ?x46222 l_0_14_163)))
 (let ((?x46215 (* 2.0 l_0_14_108)))
 (let ((?x47927 (* ?x46215 l_0_14_122)))
 (let ((?x46213 (* 2.0 l_0_14_107)))
 (let ((?x47925 (* ?x46213 l_0_14_121)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x37265 (* ?x47288 l_0_14_87)))
 (let ((?x37526 (+ (- (- (+ (* (* 2.0 l_0_14_100) l_0_14_86) ?x37265) ?x47925) ?x47927) ?x47929)))
 (let ((?x11883 (+ (- (- (- (- (- (+ ?x37526 ?x47931) ?x47935) ?x47937) ?x46658) ?x46660) ?x46662) ?x46666)))
 (= (+ (+ ?x11883 ?x46668) ?x46670) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x46770 (* l_0_14_73 l_0_14_73)))
 (let ((?x46771 (* 3.0 ?x46770)))
 (let ((?x46767 (* l_0_14_72 l_0_14_72)))
 (let ((?x46768 (* 3.0 ?x46767)))
 (let ((?x46764 (* l_0_14_71 l_0_14_71)))
 (let ((?x46765 (* 3.0 ?x46764)))
 (let ((?x46761 (* l_0_14_70 l_0_14_70)))
 (let ((?x46762 (* 3.0 ?x46761)))
 (let ((?x46754 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x46751 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x46748 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x27084 (+ (- (- (- (* (* (- 3.0) l_0_14_49) l_0_14_49) ?x46748) ?x46751) ?x46754) ?x46762)))
 (= (+ (+ (+ ?x27084 ?x46765) ?x46768) ?x46771) 0.0))))))))))))))
(assert
 (let ((?x46856 (* 6.0 l_0_14_73)))
 (let ((?x46857 (* ?x46856 l_0_14_77)))
 (let ((?x46853 (* 6.0 l_0_14_72)))
 (let ((?x46854 (* ?x46853 l_0_14_76)))
 (let ((?x46850 (* 6.0 l_0_14_71)))
 (let ((?x46851 (* ?x46850 l_0_14_75)))
 (let ((?x46847 (* 6.0 l_0_14_70)))
 (let ((?x46848 (* ?x46847 l_0_14_74)))
 (let ((?x46841 (* 6.0 l_0_14_52)))
 (let ((?x46842 (* ?x46841 l_0_14_56)))
 (let ((?x46838 (* 6.0 l_0_14_51)))
 (let ((?x46839 (* ?x46838 l_0_14_55)))
 (let ((?x46835 (* 6.0 l_0_14_50)))
 (let ((?x46836 (* ?x46835 l_0_14_54)))
 (let ((?x48102 (+ (- (- (- (* (* (- 6.0) l_0_14_49) l_0_14_53) ?x46836) ?x46839) ?x46842) ?x46848)))
 (= (+ (+ (+ ?x48102 ?x46851) ?x46854) ?x46857) 0.0)))))))))))))))))
(assert
 (let ((?x46856 (* 6.0 l_0_14_73)))
 (let ((?x46974 (* ?x46856 l_0_14_82)))
 (let ((?x46853 (* 6.0 l_0_14_72)))
 (let ((?x46972 (* ?x46853 l_0_14_81)))
 (let ((?x46850 (* 6.0 l_0_14_71)))
 (let ((?x46970 (* ?x46850 l_0_14_80)))
 (let ((?x46847 (* 6.0 l_0_14_70)))
 (let ((?x46968 (* ?x46847 l_0_14_79)))
 (let ((?x46841 (* 6.0 l_0_14_52)))
 (let ((?x46963 (* ?x46841 l_0_14_61)))
 (let ((?x46838 (* 6.0 l_0_14_51)))
 (let ((?x46961 (* ?x46838 l_0_14_60)))
 (let ((?x46835 (* 6.0 l_0_14_50)))
 (let ((?x46959 (* ?x46835 l_0_14_59)))
 (let ((?x48120 (+ (- (- (- (* (* (- 6.0) l_0_14_49) l_0_14_58) ?x46959) ?x46961) ?x46963) ?x46968)))
 (= (+ (+ (+ ?x48120 ?x46970) ?x46972) ?x46974) 0.0)))))))))))))))))
(assert
 (let ((?x47100 (* l_0_14_78 l_0_14_78)))
 (let ((?x47101 (* 3.0 ?x47100)))
 (let ((?x47097 (* l_0_14_77 l_0_14_77)))
 (let ((?x47098 (* 3.0 ?x47097)))
 (let ((?x47094 (* l_0_14_76 l_0_14_76)))
 (let ((?x47095 (* 3.0 ?x47094)))
 (let ((?x47091 (* l_0_14_75 l_0_14_75)))
 (let ((?x47092 (* 3.0 ?x47091)))
 (let ((?x47088 (* l_0_14_74 l_0_14_74)))
 (let ((?x47089 (* 3.0 ?x47088)))
 (let ((?x47086 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x47083 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x47080 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x47077 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x37641 (- (- (- (- (* (* (- 3.0) l_0_14_53) l_0_14_53) ?x47077) ?x47080) ?x47083) ?x47086)))
 (= (+ (+ (+ (+ (+ ?x37641 ?x47089) ?x47092) ?x47095) ?x47098) ?x47101) 0.0)))))))))))))))))
(assert
 (let ((?x47214 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x47211 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x47208 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x47205 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x47202 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x47199 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x47196 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x47193 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x47190 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x48131 (- (- (- (- (* (* (- 6.0) l_0_14_53) l_0_14_58) ?x47190) ?x47193) ?x47196) ?x47199)))
 (= (+ (+ (+ (+ (+ ?x48131 ?x47202) ?x47205) ?x47208) ?x47211) ?x47214) 0.0))))))))))))
(assert
 (let ((?x47387 (* l_0_14_84 l_0_14_84)))
 (let ((?x47388 (* 3.0 ?x47387)))
 (let ((?x47384 (* l_0_14_83 l_0_14_83)))
 (let ((?x47385 (* 3.0 ?x47384)))
 (let ((?x47381 (* l_0_14_82 l_0_14_82)))
 (let ((?x47382 (* 3.0 ?x47381)))
 (let ((?x47378 (* l_0_14_81 l_0_14_81)))
 (let ((?x47379 (* 3.0 ?x47378)))
 (let ((?x47375 (* l_0_14_80 l_0_14_80)))
 (let ((?x47376 (* 3.0 ?x47375)))
 (let ((?x47372 (* l_0_14_79 l_0_14_79)))
 (let ((?x47373 (* 3.0 ?x47372)))
 (let ((?x47370 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x47367 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x47364 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x47361 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x47358 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x48149 (- (- (- (- (* (* (- 3.0) l_0_14_58) l_0_14_58) ?x47358) ?x47361) ?x47364) ?x47367)))
 (let ((?x48156 (+ (+ (+ (+ (+ (+ (- ?x48149 ?x47370) ?x47373) ?x47376) ?x47379) ?x47382) ?x47385) ?x47388)))
 (= ?x48156 0.0)))))))))))))))))))))
(assert
 (let ((?x46770 (* l_0_14_73 l_0_14_73)))
 (let ((?x46767 (* l_0_14_72 l_0_14_72)))
 (let ((?x46764 (* l_0_14_71 l_0_14_71)))
 (let ((?x46761 (* l_0_14_70 l_0_14_70)))
 (let ((?x46786 (* l_0_14_52 l_0_14_52)))
 (let ((?x46782 (* l_0_14_51 l_0_14_51)))
 (let ((?x48166 (+ (+ (+ (* l_0_14_49 l_0_14_49) (* l_0_14_50 l_0_14_50)) ?x46782) ?x46786)))
 (= (- (- (- (- ?x48166 ?x46761) ?x46764) ?x46767) ?x46770) 0.0)))))))))
(assert
 (let ((?x47679 (* 2.0 l_0_14_73)))
 (let ((?x47680 (* ?x47679 l_0_14_77)))
 (let ((?x47676 (* 2.0 l_0_14_72)))
 (let ((?x47677 (* ?x47676 l_0_14_76)))
 (let ((?x47673 (* 2.0 l_0_14_71)))
 (let ((?x47674 (* ?x47673 l_0_14_75)))
 (let ((?x47670 (* 2.0 l_0_14_70)))
 (let ((?x47671 (* ?x47670 l_0_14_74)))
 (let ((?x47665 (* 2.0 l_0_14_52)))
 (let ((?x47666 (* ?x47665 l_0_14_56)))
 (let ((?x47662 (* 2.0 l_0_14_51)))
 (let ((?x47663 (* ?x47662 l_0_14_55)))
 (let ((?x47659 (* 2.0 l_0_14_50)))
 (let ((?x47660 (* ?x47659 l_0_14_54)))
 (let ((?x47656 (* 2.0 l_0_14_49)))
 (let ((?x47657 (* ?x47656 l_0_14_53)))
 (let ((?x46727 (* l_0_14_136 l_0_14_136)))
 (let ((?x46725 (* l_0_14_135 l_0_14_135)))
 (let ((?x37730 (- (- (* (- l_0_14_133) l_0_14_133) (* l_0_14_134 l_0_14_134)) ?x46725)))
 (let ((?x48181 (- (- (+ (+ (+ (+ (- ?x37730 ?x46727) ?x47657) ?x47660) ?x47663) ?x47666) ?x47671) ?x47674)))
 (= (- (- ?x48181 ?x47677) ?x47680) 0.0))))))))))))))))))))))
(assert
 (let ((?x48230 (* l_0_14_94 l_0_14_94)))
 (let ((?x48228 (* l_0_14_93 l_0_14_93)))
 (let ((?x48226 (* l_0_14_92 l_0_14_92)))
 (let ((?x48224 (* l_0_14_91 l_0_14_91)))
 (let ((?x47679 (* 2.0 l_0_14_73)))
 (let ((?x47753 (* ?x47679 l_0_14_82)))
 (let ((?x47676 (* 2.0 l_0_14_72)))
 (let ((?x47751 (* ?x47676 l_0_14_81)))
 (let ((?x47673 (* 2.0 l_0_14_71)))
 (let ((?x47749 (* ?x47673 l_0_14_80)))
 (let ((?x47670 (* 2.0 l_0_14_70)))
 (let ((?x47747 (* ?x47670 l_0_14_79)))
 (let ((?x47665 (* 2.0 l_0_14_52)))
 (let ((?x47743 (* ?x47665 l_0_14_61)))
 (let ((?x47662 (* 2.0 l_0_14_51)))
 (let ((?x47741 (* ?x47662 l_0_14_60)))
 (let ((?x47659 (* 2.0 l_0_14_50)))
 (let ((?x47739 (* ?x47659 l_0_14_59)))
 (let ((?x47656 (* 2.0 l_0_14_49)))
 (let ((?x47737 (* ?x47656 l_0_14_58)))
 (let ((?x48214 (* l_0_14_178 l_0_14_178)))
 (let ((?x48212 (* l_0_14_177 l_0_14_177)))
 (let ((?x48210 (* l_0_14_176 l_0_14_176)))
 (let ((?x48208 (* l_0_14_175 l_0_14_175)))
 (let ((?x48206 (* l_0_14_157 l_0_14_157)))
 (let ((?x48204 (* l_0_14_156 l_0_14_156)))
 (let ((?x48202 (* l_0_14_155 l_0_14_155)))
 (let ((?x48200 (* l_0_14_154 l_0_14_154)))
 (let ((?x48198 (* l_0_14_115 l_0_14_115)))
 (let ((?x37789 (* l_0_14_114 l_0_14_114)))
 (let ((?x37790 (+ (+ (* l_0_14_112 l_0_14_112) (* l_0_14_113 l_0_14_113)) ?x37789)))
 (let ((?x48211 (+ (+ (- (- (- (- (+ ?x37790 ?x48198) ?x48200) ?x48202) ?x48204) ?x48206) ?x48208) ?x48210)))
 (let ((?x48220 (- (+ (+ (+ (+ (+ (+ ?x48211 ?x48212) ?x48214) ?x47737) ?x47739) ?x47741) ?x47743) ?x47747)))
 (let ((?x48231 (- (- (- (- (- (- (- ?x48220 ?x47749) ?x47751) ?x47753) ?x48224) ?x48226) ?x48228) ?x48230)))
 (= ?x48231 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47100 (* l_0_14_78 l_0_14_78)))
 (let ((?x47097 (* l_0_14_77 l_0_14_77)))
 (let ((?x47094 (* l_0_14_76 l_0_14_76)))
 (let ((?x47091 (* l_0_14_75 l_0_14_75)))
 (let ((?x47088 (* l_0_14_74 l_0_14_74)))
 (let ((?x36012 (* l_0_14_57 l_0_14_57)))
 (let ((?x36009 (* l_0_14_56 l_0_14_56)))
 (let ((?x36007 (* l_0_14_55 l_0_14_55)))
 (let ((?x35953 (* l_0_14_54 l_0_14_54)))
 (let ((?x35831 (* l_0_14_53 l_0_14_53)))
 (let ((?x46814 (* 2.0 l_0_14_136)))
 (let ((?x46815 (* ?x46814 l_0_14_140)))
 (let ((?x46811 (* 2.0 l_0_14_135)))
 (let ((?x46812 (* ?x46811 l_0_14_139)))
 (let ((?x46808 (* 2.0 l_0_14_134)))
 (let ((?x46809 (* ?x46808 l_0_14_138)))
 (let ((?x27394 (+ (- (- (- (* (* (- 2.0) l_0_14_133) l_0_14_137) ?x46809) ?x46812) ?x46815) ?x35831)))
 (let ((?x37784 (- (- (- (+ (+ (+ (+ ?x27394 ?x35953) ?x36007) ?x36009) ?x36012) ?x47088) ?x47091) ?x47094)))
 (= (- (- ?x37784 ?x47097) ?x47100) 0.0))))))))))))))))))))
(assert
 (let ((?x48295 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x48292 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x48289 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x48286 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x47861 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x47858 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x47855 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x47852 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x47849 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x47846 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x47843 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x47840 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x47837 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x47834 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x48272 (* 2.0 l_0_14_178)))
 (let ((?x48273 (* ?x48272 l_0_14_182)))
 (let ((?x48269 (* 2.0 l_0_14_177)))
 (let ((?x48270 (* ?x48269 l_0_14_181)))
 (let ((?x48266 (* 2.0 l_0_14_176)))
 (let ((?x48267 (* ?x48266 l_0_14_180)))
 (let ((?x48263 (* 2.0 l_0_14_175)))
 (let ((?x48264 (* ?x48263 l_0_14_179)))
 (let ((?x48260 (* 2.0 l_0_14_157)))
 (let ((?x48261 (* ?x48260 l_0_14_161)))
 (let ((?x48257 (* 2.0 l_0_14_156)))
 (let ((?x48258 (* ?x48257 l_0_14_160)))
 (let ((?x48254 (* 2.0 l_0_14_155)))
 (let ((?x48255 (* ?x48254 l_0_14_159)))
 (let ((?x48251 (* 2.0 l_0_14_154)))
 (let ((?x48252 (* ?x48251 l_0_14_158)))
 (let ((?x46814 (* 2.0 l_0_14_136)))
 (let ((?x46920 (* ?x46814 l_0_14_145)))
 (let ((?x46811 (* 2.0 l_0_14_135)))
 (let ((?x46918 (* ?x46811 l_0_14_144)))
 (let ((?x46808 (* 2.0 l_0_14_134)))
 (let ((?x46916 (* ?x46808 l_0_14_143)))
 (let ((?x46805 (* 2.0 l_0_14_133)))
 (let ((?x46914 (* ?x46805 l_0_14_142)))
 (let ((?x48244 (* 2.0 l_0_14_115)))
 (let ((?x48245 (* ?x48244 l_0_14_119)))
 (let ((?x48241 (* 2.0 l_0_14_114)))
 (let ((?x48242 (* ?x48241 l_0_14_118)))
 (let ((?x37971 (* 2.0 l_0_14_113)))
 (let ((?x37812 (* ?x37971 l_0_14_117)))
 (let ((?x48247 (- (+ (+ (+ (* (* 2.0 l_0_14_112) l_0_14_116) ?x37812) ?x48242) ?x48245) ?x46914)))
 (let ((?x48262 (- (- (- (- (- (- (- ?x48247 ?x46916) ?x46918) ?x46920) ?x48252) ?x48255) ?x48258) ?x48261)))
 (let ((?x48277 (+ (+ (+ (+ (+ (+ (+ ?x48262 ?x48264) ?x48267) ?x48270) ?x48273) ?x47834) ?x47837) ?x47840)))
 (let ((?x48284 (- (- (- (- (- (+ (+ ?x48277 ?x47843) ?x47846) ?x47849) ?x47852) ?x47855) ?x47858) ?x47861)))
 (= (- (- (- (- ?x48284 ?x48286) ?x48289) ?x48292) ?x48295) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47387 (* l_0_14_84 l_0_14_84)))
 (let ((?x47384 (* l_0_14_83 l_0_14_83)))
 (let ((?x47381 (* l_0_14_82 l_0_14_82)))
 (let ((?x47378 (* l_0_14_81 l_0_14_81)))
 (let ((?x47375 (* l_0_14_80 l_0_14_80)))
 (let ((?x47372 (* l_0_14_79 l_0_14_79)))
 (let ((?x12441 (* l_0_14_63 l_0_14_63)))
 (let ((?x36328 (* l_0_14_62 l_0_14_62)))
 (let ((?x36322 (* l_0_14_61 l_0_14_61)))
 (let ((?x36314 (* l_0_14_60 l_0_14_60)))
 (let ((?x36311 (* l_0_14_59 l_0_14_59)))
 (let ((?x36305 (* l_0_14_58 l_0_14_58)))
 (let ((?x48272 (* 2.0 l_0_14_178)))
 (let ((?x48344 (* ?x48272 l_0_14_187)))
 (let ((?x48269 (* 2.0 l_0_14_177)))
 (let ((?x48342 (* ?x48269 l_0_14_186)))
 (let ((?x48266 (* 2.0 l_0_14_176)))
 (let ((?x48340 (* ?x48266 l_0_14_185)))
 (let ((?x48263 (* 2.0 l_0_14_175)))
 (let ((?x48338 (* ?x48263 l_0_14_184)))
 (let ((?x48260 (* 2.0 l_0_14_157)))
 (let ((?x48336 (* ?x48260 l_0_14_166)))
 (let ((?x48257 (* 2.0 l_0_14_156)))
 (let ((?x48334 (* ?x48257 l_0_14_165)))
 (let ((?x48254 (* 2.0 l_0_14_155)))
 (let ((?x48332 (* ?x48254 l_0_14_164)))
 (let ((?x48251 (* 2.0 l_0_14_154)))
 (let ((?x48330 (* ?x48251 l_0_14_163)))
 (let ((?x48244 (* 2.0 l_0_14_115)))
 (let ((?x48328 (* ?x48244 l_0_14_124)))
 (let ((?x48241 (* 2.0 l_0_14_114)))
 (let ((?x48326 (* ?x48241 l_0_14_123)))
 (let ((?x37971 (* 2.0 l_0_14_113)))
 (let ((?x48324 (* ?x37971 l_0_14_122)))
 (let ((?x37972 (* 2.0 l_0_14_112)))
 (let ((?x48322 (* ?x37972 l_0_14_121)))
 (let ((?x27547 (* 2.0 l_0_14_103)))
 (let ((?x14147 (* ?x27547 l_0_14_94)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x38108 (* ?x47291 l_0_14_93)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x38113 (* ?x47288 l_0_14_92)))
 (let ((?x48323 (+ (- (- (- (* (* (- 2.0) l_0_14_100) l_0_14_91) ?x38113) ?x38108) ?x14147) ?x48322)))
 (let ((?x48337 (- (- (- (- (+ (+ (+ ?x48323 ?x48324) ?x48326) ?x48328) ?x48330) ?x48332) ?x48334) ?x48336)))
 (let ((?x48348 (+ (+ (+ (+ (+ (+ (+ ?x48337 ?x48338) ?x48340) ?x48342) ?x48344) ?x36305) ?x36311) ?x36314)))
 (let ((?x48355 (- (- (- (- (+ (+ (+ ?x48348 ?x36322) ?x36328) ?x12441) ?x47372) ?x47375) ?x47378) ?x47381)))
 (= (- (- ?x48355 ?x47384) ?x47387) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48440 (* l_0_14_99 l_0_14_99)))
 (let ((?x48438 (* l_0_14_98 l_0_14_98)))
 (let ((?x48436 (* l_0_14_97 l_0_14_97)))
 (let ((?x48434 (* l_0_14_96 l_0_14_96)))
 (let ((?x48432 (* l_0_14_95 l_0_14_95)))
 (let ((?x48430 (* l_0_14_183 l_0_14_183)))
 (let ((?x48428 (* l_0_14_182 l_0_14_182)))
 (let ((?x48426 (* l_0_14_181 l_0_14_181)))
 (let ((?x48424 (* l_0_14_180 l_0_14_180)))
 (let ((?x48422 (* l_0_14_179 l_0_14_179)))
 (let ((?x48420 (* l_0_14_162 l_0_14_162)))
 (let ((?x48418 (* l_0_14_161 l_0_14_161)))
 (let ((?x48416 (* l_0_14_160 l_0_14_160)))
 (let ((?x48414 (* l_0_14_159 l_0_14_159)))
 (let ((?x48412 (* l_0_14_158 l_0_14_158)))
 (let ((?x47154 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47151 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x47145 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47142 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47139 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x48405 (* l_0_14_120 l_0_14_120)))
 (let ((?x48403 (* l_0_14_119 l_0_14_119)))
 (let ((?x48401 (* l_0_14_118 l_0_14_118)))
 (let ((?x48402 (+ (+ (* l_0_14_116 l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48401)))
 (let ((?x48411 (- (- (- (- (- (+ (+ ?x48402 ?x48403) ?x48405) ?x47139) ?x47142) ?x47145) ?x47151) ?x47154)))
 (let ((?x48425 (+ (+ (- (- (- (- (- ?x48411 ?x48412) ?x48414) ?x48416) ?x48418) ?x48420) ?x48422) ?x48424)))
 (let ((?x48439 (- (- (- (- (+ (+ (+ ?x48425 ?x48426) ?x48428) ?x48430) ?x48432) ?x48434) ?x48436) ?x48438)))
 (= (- ?x48439 ?x48440) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x48531 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x48528 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x48525 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x48522 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x48519 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x48516 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x48513 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x48510 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x48507 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x48504 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x47310 (* l_0_14_147 l_0_14_147)))
 (let ((?x47308 (* l_0_14_146 l_0_14_146)))
 (let ((?x47306 (* l_0_14_145 l_0_14_145)))
 (let ((?x47304 (* l_0_14_144 l_0_14_144)))
 (let ((?x47302 (* l_0_14_143 l_0_14_143)))
 (let ((?x47300 (* l_0_14_142 l_0_14_142)))
 (let ((?x48495 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x48492 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x48489 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x48486 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x48483 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x48480 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x27547 (* 2.0 l_0_14_103)))
 (let ((?x48477 (* ?x27547 l_0_14_98)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x48475 (* ?x47291 l_0_14_97)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x48473 (* ?x47288 l_0_14_96)))
 (let ((?x48481 (- (- (- (- (* (* (- 2.0) l_0_14_100) l_0_14_95) ?x48473) ?x48475) ?x48477) ?x48480)))
 (let ((?x48498 (- (- (+ (+ (+ (+ (+ ?x48481 ?x48483) ?x48486) ?x48489) ?x48492) ?x48495) ?x47300) ?x47302)))
 (let ((?x48511 (- (- (- (- (- (- (- ?x48498 ?x47304) ?x47306) ?x47308) ?x47310) ?x48504) ?x48507) ?x48510)))
 (let ((?x48532 (+ (+ (+ (+ (+ (- (- ?x48511 ?x48513) ?x48516) ?x48519) ?x48522) ?x48525) ?x48528) ?x48531)))
 (= ?x48532 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48615 (* l_0_14_189 l_0_14_189)))
 (let ((?x48613 (* l_0_14_188 l_0_14_188)))
 (let ((?x48611 (* l_0_14_187 l_0_14_187)))
 (let ((?x48609 (* l_0_14_186 l_0_14_186)))
 (let ((?x48607 (* l_0_14_185 l_0_14_185)))
 (let ((?x48605 (* l_0_14_184 l_0_14_184)))
 (let ((?x48603 (* l_0_14_168 l_0_14_168)))
 (let ((?x48601 (* l_0_14_167 l_0_14_167)))
 (let ((?x48599 (* l_0_14_166 l_0_14_166)))
 (let ((?x48597 (* l_0_14_165 l_0_14_165)))
 (let ((?x48595 (* l_0_14_164 l_0_14_164)))
 (let ((?x48593 (* l_0_14_163 l_0_14_163)))
 (let ((?x48591 (* l_0_14_126 l_0_14_126)))
 (let ((?x48589 (* l_0_14_125 l_0_14_125)))
 (let ((?x48587 (* l_0_14_124 l_0_14_124)))
 (let ((?x48585 (* l_0_14_123 l_0_14_123)))
 (let ((?x48583 (* l_0_14_122 l_0_14_122)))
 (let ((?x48581 (* l_0_14_121 l_0_14_121)))
 (let ((?x48579 (* l_0_14_105 l_0_14_105)))
 (let ((?x48577 (* l_0_14_104 l_0_14_104)))
 (let ((?x48575 (* l_0_14_103 l_0_14_103)))
 (let ((?x48573 (* l_0_14_102 l_0_14_102)))
 (let ((?x48574 (- (- (* (- l_0_14_100) l_0_14_100) (* l_0_14_101 l_0_14_101)) ?x48573)))
 (let ((?x48588 (+ (+ (+ (+ (- (- (- ?x48574 ?x48575) ?x48577) ?x48579) ?x48581) ?x48583) ?x48585) ?x48587)))
 (let ((?x48602 (- (- (- (- (- (+ (+ ?x48588 ?x48589) ?x48591) ?x48593) ?x48595) ?x48597) ?x48599) ?x48601)))
 (let ((?x48616 (+ (+ (+ (+ (+ (+ (- ?x48602 ?x48603) ?x48605) ?x48607) ?x48609) ?x48611) ?x48613) ?x48615)))
 (= ?x48616 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x45012 (* l_0_14_85 l_0_14_85)))
 (let ((?x45008 (* l_0_14_169 l_0_14_169)))
 (let ((?x48656 (- (+ (* (- l_0_14_106) l_0_14_106) (* l_0_14_148 l_0_14_148)) ?x45008)))
 (= (+ ?x48656 ?x45012) 0.0)))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45467 (* ?x45239 l_0_14_88)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45449 (* ?x45219 l_0_14_172)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45445 (* ?x45213 l_0_14_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_109) ?x45445) ?x45449) ?x45467) 0.0))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45612 (* ?x45239 l_0_14_91)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45596 (* ?x45219 l_0_14_175)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45592 (* ?x45213 l_0_14_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_112) ?x45592) ?x45596) ?x45612) 0.0))))))))
(assert
 (let ((?x45239 (* 2.0 l_0_14_85)))
 (let ((?x45709 (* ?x45239 l_0_14_95)))
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45692 (* ?x45219 l_0_14_179)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45687 (* ?x45213 l_0_14_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_116) ?x45687) ?x45692) ?x45709) 0.0))))))))
(assert
 (let ((?x45219 (* 2.0 l_0_14_169)))
 (let ((?x45769 (* ?x45219 l_0_14_184)))
 (let ((?x45213 (* 2.0 l_0_14_148)))
 (let ((?x45765 (* ?x45213 l_0_14_163)))
 (let ((?x24867 (* 2.0 l_0_14_106)))
 (let ((?x45763 (* ?x24867 l_0_14_121)))
 (= (- (+ (- (* (* 2.0 l_0_14_100) l_0_14_85) ?x45763) ?x45765) ?x45769) 0.0))))))))
(assert
 (let ((?x46676 (* l_0_14_90 l_0_14_90)))
 (let ((?x46674 (* l_0_14_89 l_0_14_89)))
 (let ((?x46672 (* l_0_14_88 l_0_14_88)))
 (let ((?x46650 (* l_0_14_174 l_0_14_174)))
 (let ((?x46648 (* l_0_14_173 l_0_14_173)))
 (let ((?x46646 (* l_0_14_172 l_0_14_172)))
 (let ((?x46642 (* l_0_14_153 l_0_14_153)))
 (let ((?x46640 (* l_0_14_152 l_0_14_152)))
 (let ((?x46638 (* l_0_14_151 l_0_14_151)))
 (let ((?x46630 (* l_0_14_111 l_0_14_111)))
 (let ((?x38342 (- (- (* (- l_0_14_109) l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x46630)))
 (let ((?x48698 (+ (- (- (- (+ (+ (+ ?x38342 ?x46638) ?x46640) ?x46642) ?x46646) ?x46648) ?x46650) ?x46672)))
 (= (+ (+ ?x48698 ?x46674) ?x46676) 0.0))))))))))))))
(assert
 (let ((?x46982 (* 2.0 l_0_14_90)))
 (let ((?x46983 (* ?x46982 l_0_14_93)))
 (let ((?x46979 (* 2.0 l_0_14_89)))
 (let ((?x46980 (* ?x46979 l_0_14_92)))
 (let ((?x46976 (* 2.0 l_0_14_88)))
 (let ((?x46977 (* ?x46976 l_0_14_91)))
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x46942 (* ?x46941 l_0_14_177)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x46939 (* ?x46938 l_0_14_176)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x46936 (* ?x46935 l_0_14_175)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x46929 (* ?x46928 l_0_14_156)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x46926 (* ?x46925 l_0_14_155)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x46923 (* ?x46922 l_0_14_154)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x46912 (* ?x46911 l_0_14_114)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x46909 (* ?x46894 l_0_14_113)))
 (let ((?x14744 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_112) ?x46909) ?x46912) ?x46923) ?x46926)))
 (let ((?x27819 (+ (+ (+ (- (- (- (+ ?x14744 ?x46929) ?x46936) ?x46939) ?x46942) ?x46977) ?x46980) ?x46983)))
 (= ?x27819 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46982 (* 2.0 l_0_14_90)))
 (let ((?x47220 (* ?x46982 l_0_14_97)))
 (let ((?x46979 (* 2.0 l_0_14_89)))
 (let ((?x47218 (* ?x46979 l_0_14_96)))
 (let ((?x46976 (* 2.0 l_0_14_88)))
 (let ((?x47216 (* ?x46976 l_0_14_95)))
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x47169 (* ?x46941 l_0_14_181)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x47167 (* ?x46938 l_0_14_180)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x47165 (* ?x46935 l_0_14_179)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x47163 (* ?x46928 l_0_14_160)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x47161 (* ?x46925 l_0_14_159)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x47159 (* ?x46922 l_0_14_158)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x47129 (* ?x46911 l_0_14_118)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x47127 (* ?x46894 l_0_14_117)))
 (let ((?x14515 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_116) ?x47127) ?x47129) ?x47159) ?x47161)))
 (let ((?x13157 (+ (+ (+ (- (- (- (+ ?x14515 ?x47163) ?x47165) ?x47167) ?x47169) ?x47216) ?x47218) ?x47220)))
 (= ?x13157 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46941 (* 2.0 l_0_14_174)))
 (let ((?x47326 (* ?x46941 l_0_14_186)))
 (let ((?x46938 (* 2.0 l_0_14_173)))
 (let ((?x47324 (* ?x46938 l_0_14_185)))
 (let ((?x46935 (* 2.0 l_0_14_172)))
 (let ((?x47322 (* ?x46935 l_0_14_184)))
 (let ((?x46928 (* 2.0 l_0_14_153)))
 (let ((?x47316 (* ?x46928 l_0_14_165)))
 (let ((?x46925 (* 2.0 l_0_14_152)))
 (let ((?x47314 (* ?x46925 l_0_14_164)))
 (let ((?x46922 (* 2.0 l_0_14_151)))
 (let ((?x47312 (* ?x46922 l_0_14_163)))
 (let ((?x46911 (* 2.0 l_0_14_111)))
 (let ((?x47298 (* ?x46911 l_0_14_123)))
 (let ((?x46894 (* 2.0 l_0_14_110)))
 (let ((?x47296 (* ?x46894 l_0_14_122)))
 (let ((?x35793 (* 2.0 l_0_14_109)))
 (let ((?x47294 (* ?x35793 l_0_14_121)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x47292 (* ?x47291 l_0_14_90)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x47289 (* ?x47288 l_0_14_89)))
 (let ((?x38337 (- (- (+ (+ (* (* 2.0 l_0_14_100) l_0_14_88) ?x47289) ?x47292) ?x47294) ?x47296)))
 (let ((?x48706 (- (- (- (+ (+ (+ (- ?x38337 ?x47298) ?x47312) ?x47314) ?x47316) ?x47322) ?x47324) ?x47326)))
 (= ?x48706 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48230 (* l_0_14_94 l_0_14_94)))
 (let ((?x48228 (* l_0_14_93 l_0_14_93)))
 (let ((?x48226 (* l_0_14_92 l_0_14_92)))
 (let ((?x48224 (* l_0_14_91 l_0_14_91)))
 (let ((?x48214 (* l_0_14_178 l_0_14_178)))
 (let ((?x48212 (* l_0_14_177 l_0_14_177)))
 (let ((?x48210 (* l_0_14_176 l_0_14_176)))
 (let ((?x48208 (* l_0_14_175 l_0_14_175)))
 (let ((?x48206 (* l_0_14_157 l_0_14_157)))
 (let ((?x48204 (* l_0_14_156 l_0_14_156)))
 (let ((?x48202 (* l_0_14_155 l_0_14_155)))
 (let ((?x48200 (* l_0_14_154 l_0_14_154)))
 (let ((?x48198 (* l_0_14_115 l_0_14_115)))
 (let ((?x37789 (* l_0_14_114 l_0_14_114)))
 (let ((?x38496 (- (- (* (- l_0_14_112) l_0_14_112) (* l_0_14_113 l_0_14_113)) ?x37789)))
 (let ((?x48716 (- (- (+ (+ (+ (+ (- ?x38496 ?x48198) ?x48200) ?x48202) ?x48204) ?x48206) ?x48208) ?x48210)))
 (= (+ (+ (+ (+ (- (- ?x48716 ?x48212) ?x48214) ?x48224) ?x48226) ?x48228) ?x48230) 0.0))))))))))))))))))
(assert
 (let ((?x48295 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x48292 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x48289 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x48286 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x48272 (* 2.0 l_0_14_178)))
 (let ((?x48273 (* ?x48272 l_0_14_182)))
 (let ((?x48269 (* 2.0 l_0_14_177)))
 (let ((?x48270 (* ?x48269 l_0_14_181)))
 (let ((?x48266 (* 2.0 l_0_14_176)))
 (let ((?x48267 (* ?x48266 l_0_14_180)))
 (let ((?x48263 (* 2.0 l_0_14_175)))
 (let ((?x48264 (* ?x48263 l_0_14_179)))
 (let ((?x48260 (* 2.0 l_0_14_157)))
 (let ((?x48261 (* ?x48260 l_0_14_161)))
 (let ((?x48257 (* 2.0 l_0_14_156)))
 (let ((?x48258 (* ?x48257 l_0_14_160)))
 (let ((?x48254 (* 2.0 l_0_14_155)))
 (let ((?x48255 (* ?x48254 l_0_14_159)))
 (let ((?x48251 (* 2.0 l_0_14_154)))
 (let ((?x48252 (* ?x48251 l_0_14_158)))
 (let ((?x48244 (* 2.0 l_0_14_115)))
 (let ((?x48245 (* ?x48244 l_0_14_119)))
 (let ((?x48241 (* 2.0 l_0_14_114)))
 (let ((?x48242 (* ?x48241 l_0_14_118)))
 (let ((?x37971 (* 2.0 l_0_14_113)))
 (let ((?x37812 (* ?x37971 l_0_14_117)))
 (let ((?x38582 (+ (- (- (- (* (* (- 2.0) l_0_14_112) l_0_14_116) ?x37812) ?x48242) ?x48245) ?x48252)))
 (let ((?x48733 (- (- (- (- (+ (+ (+ ?x38582 ?x48255) ?x48258) ?x48261) ?x48264) ?x48267) ?x48270) ?x48273)))
 (= (+ (+ (+ (+ ?x48733 ?x48286) ?x48289) ?x48292) ?x48295) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48272 (* 2.0 l_0_14_178)))
 (let ((?x48344 (* ?x48272 l_0_14_187)))
 (let ((?x48269 (* 2.0 l_0_14_177)))
 (let ((?x48342 (* ?x48269 l_0_14_186)))
 (let ((?x48266 (* 2.0 l_0_14_176)))
 (let ((?x48340 (* ?x48266 l_0_14_185)))
 (let ((?x48263 (* 2.0 l_0_14_175)))
 (let ((?x48338 (* ?x48263 l_0_14_184)))
 (let ((?x48260 (* 2.0 l_0_14_157)))
 (let ((?x48336 (* ?x48260 l_0_14_166)))
 (let ((?x48257 (* 2.0 l_0_14_156)))
 (let ((?x48334 (* ?x48257 l_0_14_165)))
 (let ((?x48254 (* 2.0 l_0_14_155)))
 (let ((?x48332 (* ?x48254 l_0_14_164)))
 (let ((?x48251 (* 2.0 l_0_14_154)))
 (let ((?x48330 (* ?x48251 l_0_14_163)))
 (let ((?x48244 (* 2.0 l_0_14_115)))
 (let ((?x48328 (* ?x48244 l_0_14_124)))
 (let ((?x48241 (* 2.0 l_0_14_114)))
 (let ((?x48326 (* ?x48241 l_0_14_123)))
 (let ((?x37971 (* 2.0 l_0_14_113)))
 (let ((?x48324 (* ?x37971 l_0_14_122)))
 (let ((?x37972 (* 2.0 l_0_14_112)))
 (let ((?x48322 (* ?x37972 l_0_14_121)))
 (let ((?x27547 (* 2.0 l_0_14_103)))
 (let ((?x14147 (* ?x27547 l_0_14_94)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x38108 (* ?x47291 l_0_14_93)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x38113 (* ?x47288 l_0_14_92)))
 (let ((?x48750 (- (+ (+ (+ (* (* 2.0 l_0_14_100) l_0_14_91) ?x38113) ?x38108) ?x14147) ?x48322)))
 (let ((?x48757 (+ (+ (+ (+ (- (- (- ?x48750 ?x48324) ?x48326) ?x48328) ?x48330) ?x48332) ?x48334) ?x48336)))
 (= (- (- (- (- ?x48757 ?x48338) ?x48340) ?x48342) ?x48344) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48440 (* l_0_14_99 l_0_14_99)))
 (let ((?x48438 (* l_0_14_98 l_0_14_98)))
 (let ((?x48436 (* l_0_14_97 l_0_14_97)))
 (let ((?x48434 (* l_0_14_96 l_0_14_96)))
 (let ((?x48432 (* l_0_14_95 l_0_14_95)))
 (let ((?x48430 (* l_0_14_183 l_0_14_183)))
 (let ((?x48428 (* l_0_14_182 l_0_14_182)))
 (let ((?x48426 (* l_0_14_181 l_0_14_181)))
 (let ((?x48424 (* l_0_14_180 l_0_14_180)))
 (let ((?x48422 (* l_0_14_179 l_0_14_179)))
 (let ((?x48420 (* l_0_14_162 l_0_14_162)))
 (let ((?x48418 (* l_0_14_161 l_0_14_161)))
 (let ((?x48416 (* l_0_14_160 l_0_14_160)))
 (let ((?x48414 (* l_0_14_159 l_0_14_159)))
 (let ((?x48412 (* l_0_14_158 l_0_14_158)))
 (let ((?x48405 (* l_0_14_120 l_0_14_120)))
 (let ((?x48403 (* l_0_14_119 l_0_14_119)))
 (let ((?x48401 (* l_0_14_118 l_0_14_118)))
 (let ((?x38718 (- (- (* (- l_0_14_116) l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48401)))
 (let ((?x48771 (+ (+ (+ (+ (+ (- (- ?x38718 ?x48403) ?x48405) ?x48412) ?x48414) ?x48416) ?x48418) ?x48420)))
 (let ((?x48778 (+ (+ (- (- (- (- (- ?x48771 ?x48422) ?x48424) ?x48426) ?x48428) ?x48430) ?x48432) ?x48434)))
 (= (+ (+ (+ ?x48778 ?x48436) ?x48438) ?x48440) 0.0)))))))))))))))))))))))
(assert
 (let ((?x48531 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x48528 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x48525 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x48522 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x48519 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x48516 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x48513 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x48510 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x48507 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x48504 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x48495 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x48492 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x48489 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x48486 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x48483 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x48480 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x27547 (* 2.0 l_0_14_103)))
 (let ((?x48477 (* ?x27547 l_0_14_98)))
 (let ((?x47291 (* 2.0 l_0_14_102)))
 (let ((?x48475 (* ?x47291 l_0_14_97)))
 (let ((?x47288 (* 2.0 l_0_14_101)))
 (let ((?x48473 (* ?x47288 l_0_14_96)))
 (let ((?x38846 (+ (+ (+ (+ (* (* 2.0 l_0_14_100) l_0_14_95) ?x48473) ?x48475) ?x48477) ?x48480)))
 (let ((?x27853 (+ (+ (- (- (- (- (- ?x38846 ?x48483) ?x48486) ?x48489) ?x48492) ?x48495) ?x48504) ?x48507)))
 (let ((?x48787 (- (- (- (- (+ (+ (+ ?x27853 ?x48510) ?x48513) ?x48516) ?x48519) ?x48522) ?x48525) ?x48528)))
 (= (- ?x48787 ?x48531) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x48615 (* l_0_14_189 l_0_14_189)))
 (let ((?x48613 (* l_0_14_188 l_0_14_188)))
 (let ((?x48611 (* l_0_14_187 l_0_14_187)))
 (let ((?x48609 (* l_0_14_186 l_0_14_186)))
 (let ((?x48607 (* l_0_14_185 l_0_14_185)))
 (let ((?x48605 (* l_0_14_184 l_0_14_184)))
 (let ((?x48603 (* l_0_14_168 l_0_14_168)))
 (let ((?x48601 (* l_0_14_167 l_0_14_167)))
 (let ((?x48599 (* l_0_14_166 l_0_14_166)))
 (let ((?x48597 (* l_0_14_165 l_0_14_165)))
 (let ((?x48595 (* l_0_14_164 l_0_14_164)))
 (let ((?x48593 (* l_0_14_163 l_0_14_163)))
 (let ((?x48591 (* l_0_14_126 l_0_14_126)))
 (let ((?x48589 (* l_0_14_125 l_0_14_125)))
 (let ((?x48587 (* l_0_14_124 l_0_14_124)))
 (let ((?x48585 (* l_0_14_123 l_0_14_123)))
 (let ((?x48583 (* l_0_14_122 l_0_14_122)))
 (let ((?x48581 (* l_0_14_121 l_0_14_121)))
 (let ((?x48579 (* l_0_14_105 l_0_14_105)))
 (let ((?x48577 (* l_0_14_104 l_0_14_104)))
 (let ((?x48575 (* l_0_14_103 l_0_14_103)))
 (let ((?x48573 (* l_0_14_102 l_0_14_102)))
 (let ((?x15290 (+ (+ (* l_0_14_100 l_0_14_100) (* l_0_14_101 l_0_14_101)) ?x48573)))
 (let ((?x48797 (- (- (- (- (+ (+ (+ ?x15290 ?x48575) ?x48577) ?x48579) ?x48581) ?x48583) ?x48585) ?x48587)))
 (let ((?x48804 (+ (+ (+ (+ (+ (- (- ?x48797 ?x48589) ?x48591) ?x48593) ?x48595) ?x48597) ?x48599) ?x48601)))
 (let ((?x48811 (- (- (- (- (- (- (+ ?x48804 ?x48603) ?x48605) ?x48607) ?x48609) ?x48611) ?x48613) ?x48615)))
 (= ?x48811 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x47054 (* l_0_14_141 l_0_14_141)))
 (let ((?x47052 (* l_0_14_140 l_0_14_140)))
 (let ((?x47048 (* l_0_14_139 l_0_14_139)))
 (let ((?x15813 (- (- (* (- l_0_14_137) l_0_14_137) (* l_0_14_138 l_0_14_138)) ?x47048)))
 (= (- (- ?x15813 ?x47052) ?x47054) 0.0))))))
(assert
 (>= l_0_14_1 0.0))
(assert
 (>= l_0_14_3 0.0))
(assert
 (>= l_0_14_6 0.0))
(assert
 (>= l_0_14_10 0.0))
(assert
 (>= l_0_14_15 0.0))
(assert
 (>= l_0_14_21 0.0))
(assert
 (>= l_0_14_22 0.0))
(assert
 (>= l_0_14_24 0.0))
(assert
 (>= l_0_14_27 0.0))
(assert
 (>= l_0_14_31 0.0))
(assert
 (>= l_0_14_36 0.0))
(assert
 (>= l_0_14_42 0.0))
(assert
 (>= l_0_14_43 0.0))
(assert
 (>= l_0_14_45 0.0))
(assert
 (>= l_0_14_48 0.0))
(assert
 (>= l_0_14_52 0.0))
(assert
 (>= l_0_14_57 0.0))
(assert
 (>= l_0_14_63 0.0))
(assert
 (>= l_0_14_64 0.0))
(assert
 (>= l_0_14_66 0.0))
(assert
 (>= l_0_14_69 0.0))
(assert
 (>= l_0_14_73 0.0))
(assert
 (>= l_0_14_78 0.0))
(assert
 (>= l_0_14_84 0.0))
(assert
 (>= l_0_14_85 0.0))
(assert
 (>= l_0_14_87 0.0))
(assert
 (>= l_0_14_90 0.0))
(assert
 (>= l_0_14_94 0.0))
(assert
 (>= l_0_14_99 0.0))
(assert
 (>= l_0_14_105 0.0))
(assert
 (>= l_0_14_106 0.0))
(assert
 (>= l_0_14_108 0.0))
(assert
 (>= l_0_14_111 0.0))
(assert
 (>= l_0_14_115 0.0))
(assert
 (>= l_0_14_120 0.0))
(assert
 (>= l_0_14_126 0.0))
(assert
 (>= l_0_14_127 0.0))
(assert
 (>= l_0_14_129 0.0))
(assert
 (>= l_0_14_132 0.0))
(assert
 (>= l_0_14_136 0.0))
(assert
 (>= l_0_14_141 0.0))
(assert
 (>= l_0_14_147 0.0))
(assert
 (>= l_0_14_148 0.0))
(assert
 (>= l_0_14_150 0.0))
(assert
 (>= l_0_14_153 0.0))
(assert
 (>= l_0_14_157 0.0))
(assert
 (>= l_0_14_162 0.0))
(assert
 (>= l_0_14_168 0.0))
(assert
 (>= l_0_14_169 0.0))
(assert
 (>= l_0_14_171 0.0))
(assert
 (>= l_0_14_174 0.0))
(assert
 (>= l_0_14_178 0.0))
(assert
 (>= l_0_14_183 0.0))
(assert
 (>= l_0_14_189 0.0))
(assert
 (>= l_0_14_190 0.0))
(assert
 (>= l_0_14_192 0.0))
(assert
 (>= l_0_14_195 0.0))
(assert
 (>= l_0_14_199 0.0))
(assert
 (>= l_0_14_204 0.0))
(assert
 (>= l_0_14_210 0.0))
(assert
 (>= l_0_14_211 0.0))
(assert
 (>= l_0_14_213 0.0))
(assert
 (>= l_0_14_216 0.0))
(assert
 (>= l_0_14_220 0.0))
(assert
 (>= l_0_14_225 0.0))
(assert
 (>= l_0_14_231 0.0))
(assert
 (let ((?x48939 (* l_0_15_66 l_0_15_66)))
 (let ((?x48940 (* 3.0 ?x48939)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x48937 (* ?x48936 l_0_15_68)))
 (let ((?x48933 (* l_0_15_65 l_0_15_65)))
 (let ((?x48934 (* 3.0 ?x48933)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x48931 (* ?x48930 l_0_15_67)))
 (let ((?x48927 (* l_0_15_6 l_0_15_6)))
 (let ((?x48928 (* 6.0 ?x48927)))
 (let ((?x48924 (* l_0_15_5 l_0_15_5)))
 (let ((?x48925 (* 6.0 ?x48924)))
 (let ((?x48913 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x48910 (* ?x48909 l_0_15_47)))
 (let ((?x48907 (* (* 3.0 l_0_15_44) l_0_15_44)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x48904 (* ?x48903 l_0_15_46)))
 (let ((?x48900 (* l_0_15_4 l_0_15_4)))
 (let ((?x48901 (* 6.0 ?x48900)))
 (let ((?x48897 (* 12.0 l_0_15_3)))
 (let ((?x48898 (* ?x48897 l_0_15_5)))
 (let ((?x48895 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x48892 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x48889 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x48886 (* ?x48885 l_0_15_26)))
 (let ((?x48883 (* l_0_15_237 l_0_15_237)))
 (let ((?x48881 (* l_0_15_236 l_0_15_236)))
 (let ((?x48879 (* l_0_15_235 l_0_15_235)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x48877 (* ?x48876 l_0_15_25)))
 (let ((?x48874 (* l_0_15_216 l_0_15_216)))
 (let ((?x48872 (* l_0_15_215 l_0_15_215)))
 (let ((?x48870 (* l_0_15_214 l_0_15_214)))
 (let ((?x48867 (* 12.0 l_0_15_2)))
 (let ((?x48868 (* ?x48867 l_0_15_4)))
 (let ((?x48865 (* l_0_15_195 l_0_15_195)))
 (let ((?x48863 (* l_0_15_194 l_0_15_194)))
 (let ((?x48861 (* l_0_15_193 l_0_15_193)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x48859 (* ?x48858 l_0_15_131)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x48857 (* ?x48856 l_0_15_130)))
 (let ((?x48873 (- (- (+ (- (- (- (+ ?x48857 ?x48859) ?x48861) ?x48863) ?x48865) ?x48868) ?x48870) ?x48872)))
 (let ((?x48890 (- (- (- (- (- (- (- ?x48873 ?x48874) ?x48877) ?x48879) ?x48881) ?x48883) ?x48886) ?x48889)))
 (let ((?x48911 (- (- (- (+ (+ (- (- ?x48890 ?x48892) ?x48895) ?x48898) ?x48901) ?x48904) ?x48907) ?x48910)))
 (let ((?x48920 (- (- (- ?x48911 ?x48913) (* (* 1.0 l_0_15_46) l_0_15_46)) (* (* 1.0 l_0_15_47) l_0_15_47))))
 (let ((?x48932 (+ (+ (+ (- ?x48920 (* (* 1.0 l_0_15_48) l_0_15_48)) ?x48925) ?x48928) ?x48931)))
 (let ((?x48944 (+ (+ (+ (+ ?x48932 ?x48934) ?x48937) ?x48940) (* 1.0 (* l_0_15_67 l_0_15_67)))))
 (let ((?x48950 (+ (+ ?x48944 (* 1.0 (* l_0_15_68 l_0_15_68))) (* 1.0 (* l_0_15_69 l_0_15_69)))))
 (= (+ ?x48950 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48939 (* l_0_15_66 l_0_15_66)))
 (let ((?x48940 (* 3.0 ?x48939)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x49068 (* ?x49067 l_0_15_68)))
 (let ((?x48933 (* l_0_15_65 l_0_15_65)))
 (let ((?x48934 (* 3.0 ?x48933)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x49064 (* ?x49063 l_0_15_67)))
 (let ((?x48913 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x49060 (* ?x49059 l_0_15_47)))
 (let ((?x48907 (* (* 3.0 l_0_15_44) l_0_15_44)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x49056 (* ?x49055 l_0_15_46)))
 (let ((?x49052 (* l_0_15_3 l_0_15_3)))
 (let ((?x49053 (* 6.0 ?x49052)))
 (let ((?x48897 (* 12.0 l_0_15_3)))
 (let ((?x48898 (* ?x48897 l_0_15_5)))
 (let ((?x49049 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x48886 (* ?x48885 l_0_15_26)))
 (let ((?x49039 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x48877 (* ?x48876 l_0_15_25)))
 (let ((?x49028 (* l_0_15_2 l_0_15_2)))
 (let ((?x49029 (* 6.0 ?x49028)))
 (let ((?x48867 (* 12.0 l_0_15_2)))
 (let ((?x48868 (* ?x48867 l_0_15_4)))
 (let ((?x49023 (- (+ (* l_0_15_128 l_0_15_128) (* l_0_15_129 l_0_15_129)) (* (* 2.0 l_0_15_191) l_0_15_193))))
 (let ((?x49033 (- (+ (+ (- ?x49023 (* (* 2.0 l_0_15_192) l_0_15_194)) ?x48868) ?x49029) (* (* 2.0 l_0_15_212) l_0_15_214))))
 (let ((?x49043 (- (- (- (- ?x49033 (* (* 2.0 l_0_15_213) l_0_15_215)) ?x48877) ?x49039) (* (* 2.0 l_0_15_233) l_0_15_235))))
 (let ((?x49051 (+ (- (- (- ?x49043 (* (* 2.0 l_0_15_234) l_0_15_236)) ?x48886) ?x49049) ?x48898)))
 (let ((?x49066 (+ (+ (- (- (- (- (+ ?x49051 ?x49053) ?x49056) ?x48907) ?x49060) ?x48913) ?x49064) ?x48934)))
 (= (+ (+ (+ ?x49066 ?x49068) ?x48940) 9.0) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49052 (* l_0_15_3 l_0_15_3)))
 (let ((?x49053 (* 6.0 ?x49052)))
 (let ((?x49049 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x49120 (* l_0_15_234 l_0_15_234)))
 (let ((?x49118 (* l_0_15_233 l_0_15_233)))
 (let ((?x49039 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x49115 (* l_0_15_213 l_0_15_213)))
 (let ((?x49113 (* l_0_15_212 l_0_15_212)))
 (let ((?x49028 (* l_0_15_2 l_0_15_2)))
 (let ((?x49029 (* 6.0 ?x49028)))
 (let ((?x49110 (* l_0_15_192 l_0_15_192)))
 (let ((?x49114 (- (+ (- (- (- _a_6_) (* l_0_15_191 l_0_15_191)) ?x49110) ?x49029) ?x49113)))
 (let ((?x49126 (- (+ (- (- (- (- (- ?x49114 ?x49115) ?x49039) ?x49118) ?x49120) ?x49049) ?x49053) (* (* 1.0 l_0_15_44) l_0_15_44))))
 (let ((?x49131 (+ (- ?x49126 (* (* 1.0 l_0_15_45) l_0_15_45)) (* 1.0 (* l_0_15_65 l_0_15_65)))))
 (= (+ (+ ?x49131 (* 1.0 (* l_0_15_66 l_0_15_66))) 7.0) 0.0))))))))))))))))
(assert
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49176 (* ?x49175 l_0_15_65)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49173 (* ?x49172 l_0_15_44)))
 (let ((?x49052 (* l_0_15_3 l_0_15_3)))
 (let ((?x16145 (* l_0_15_24 l_0_15_24)))
 (let ((?x49087 (* l_0_15_23 l_0_15_23)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49164 (* ?x49163 l_0_15_23)))
 (let ((?x49028 (* l_0_15_2 l_0_15_2)))
 (let ((?x49158 (- (+ (- _a_7_) (* (* 12.0 l_0_15_1) l_0_15_2)) (* (* 2.0 l_0_15_190) l_0_15_191))))
 (let ((?x49166 (+ (- (- (- ?x49158 ?x49028) (* (* 2.0 l_0_15_211) l_0_15_212)) ?x49164) ?x49087)))
 (let ((?x49174 (- (- (+ (- ?x49166 (* (* 2.0 l_0_15_232) l_0_15_233)) ?x16145) ?x49052) ?x49173)))
 (= (+ ?x49174 ?x49176) 0.0)))))))))))))))
(assert
 (let ((?x48939 (* l_0_15_66 l_0_15_66)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x49223 (* ?x49067 l_0_15_71)))
 (let ((?x48933 (* l_0_15_65 l_0_15_65)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x49220 (* ?x49063 l_0_15_70)))
 (let ((?x29033 (* l_0_15_45 l_0_15_45)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x49217 (* ?x49059 l_0_15_50)))
 (let ((?x48999 (* l_0_15_44 l_0_15_44)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x49214 (* ?x49055 l_0_15_49)))
 (let ((?x48897 (* 12.0 l_0_15_3)))
 (let ((?x49212 (* ?x48897 l_0_15_8)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x49210 (* ?x48885 l_0_15_29)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x49204 (* ?x48876 l_0_15_28)))
 (let ((?x48867 (* 12.0 l_0_15_2)))
 (let ((?x49198 (* ?x48867 l_0_15_7)))
 (let ((?x49197 (- (- (- _a_8_) (* (* 2.0 l_0_15_191) l_0_15_196)) (* (* 2.0 l_0_15_192) l_0_15_197))))
 (let ((?x49203 (- (- (+ ?x49197 ?x49198) (* (* 2.0 l_0_15_212) l_0_15_217)) (* (* 2.0 l_0_15_213) l_0_15_218))))
 (let ((?x49209 (- (- (- ?x49203 ?x49204) (* (* 2.0 l_0_15_233) l_0_15_238)) (* (* 2.0 l_0_15_234) l_0_15_239))))
 (let ((?x49221 (+ (+ (- (+ (- (+ (- ?x49209 ?x49210) ?x49212) ?x49214) ?x48999) ?x49217) ?x29033) ?x49220)))
 (= (- (+ (- ?x49221 ?x48933) ?x49223) ?x48939) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49286 (* l_0_15_232 l_0_15_232)))
 (let ((?x49284 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x49278 (* l_0_15_211 l_0_15_211)))
 (let ((?x49276 (* l_0_15_190 l_0_15_190)))
 (let ((?x49273 (* l_0_15_1 l_0_15_1)))
 (let ((?x49274 (* 6.0 ?x49273)))
 (let ((?x49277 (- (+ (- (- _a_9_) (* (* 2.0 l_0_15_1) l_0_15_2)) ?x49274) ?x49276)))
 (let ((?x49287 (- (- (+ (- ?x49277 ?x49278) (* (* 2.0 l_0_15_22) l_0_15_23)) ?x49284) ?x49286)))
 (let ((?x49293 (+ (- ?x49287 (* (* 1.0 l_0_15_43) l_0_15_43)) (* 1.0 (* l_0_15_64 l_0_15_64)))))
 (= ?x49293 0.0)))))))))))
(assert
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49341 (* ?x49175 l_0_15_70)))
 (let ((?x49176 (* ?x49175 l_0_15_65)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49338 (* ?x49172 l_0_15_49)))
 (let ((?x49173 (* ?x49172 l_0_15_44)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49324 (* ?x49163 l_0_15_28)))
 (let ((?x49318 (- (+ (- _a_10_) (* (* 12.0 l_0_15_1) l_0_15_7)) (* (* 2.0 l_0_15_190) l_0_15_196))))
 (let ((?x49323 (- (- ?x49318 (* (* 2.0 l_0_15_2) l_0_15_7)) (* (* 2.0 l_0_15_211) l_0_15_217))))
 (let ((?x49330 (- (+ (- ?x49323 ?x49324) (* (* 2.0 l_0_15_23) l_0_15_28)) (* (* 2.0 l_0_15_232) l_0_15_238))))
 (let ((?x49336 (- (+ ?x49330 (* (* 2.0 l_0_15_24) l_0_15_29)) (* (* 2.0 l_0_15_3) l_0_15_8))))
 (= (+ (- (- (+ ?x49336 ?x49173) ?x49338) ?x49176) ?x49341) 0.0))))))))))))))
(assert
 (let ((?x49445 (* l_0_15_9 l_0_15_9)))
 (let ((?x49446 (* 6.0 ?x49445)))
 (let ((?x49442 (* l_0_15_8 l_0_15_8)))
 (let ((?x49443 (* 6.0 ?x49442)))
 (let ((?x49427 (* l_0_15_7 l_0_15_7)))
 (let ((?x49428 (* 6.0 ?x49427)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x49223 (* ?x49067 l_0_15_71)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x49220 (* ?x49063 l_0_15_70)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x49217 (* ?x49059 l_0_15_50)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x49214 (* ?x49055 l_0_15_49)))
 (let ((?x49409 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x49406 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x49403 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x49400 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x49397 (* l_0_15_241 l_0_15_241)))
 (let ((?x49395 (* l_0_15_240 l_0_15_240)))
 (let ((?x49393 (* l_0_15_239 l_0_15_239)))
 (let ((?x49391 (* l_0_15_238 l_0_15_238)))
 (let ((?x49389 (* l_0_15_220 l_0_15_220)))
 (let ((?x49387 (* l_0_15_219 l_0_15_219)))
 (let ((?x49385 (* l_0_15_218 l_0_15_218)))
 (let ((?x49383 (* l_0_15_217 l_0_15_217)))
 (let ((?x49381 (* l_0_15_199 l_0_15_199)))
 (let ((?x49379 (* l_0_15_198 l_0_15_198)))
 (let ((?x49377 (* l_0_15_197 l_0_15_197)))
 (let ((?x49375 (* l_0_15_196 l_0_15_196)))
 (let ((?x49378 (- (- (+ (- _a_11_) (* 6.0 (* l_0_15_10 l_0_15_10))) ?x49375) ?x49377)))
 (let ((?x49392 (- (- (- (- (- (- (- ?x49378 ?x49379) ?x49381) ?x49383) ?x49385) ?x49387) ?x49389) ?x49391)))
 (let ((?x49410 (- (- (- (- (- (- (- ?x49392 ?x49393) ?x49395) ?x49397) ?x49400) ?x49403) ?x49406) ?x49409)))
 (let ((?x49418 (- (- (+ (+ ?x49410 ?x49214) ?x49217) (* (* 1.0 l_0_15_49) l_0_15_49)) (* (* 1.0 l_0_15_50) l_0_15_50))))
 (let ((?x49424 (- (- ?x49418 (* (* 1.0 l_0_15_51) l_0_15_51)) (* (* 1.0 l_0_15_52) l_0_15_52))))
 (let ((?x49432 (+ (+ (- (- ?x49424 ?x49220) ?x49223) ?x49428) (* 1.0 (* l_0_15_70 l_0_15_70)))))
 (let ((?x49438 (+ (+ ?x49432 (* 1.0 (* l_0_15_71 l_0_15_71))) (* 1.0 (* l_0_15_72 l_0_15_72)))))
 (= (+ (+ (+ ?x49438 (* 1.0 (* l_0_15_73 l_0_15_73))) ?x49443) ?x49446) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_15_1) l_0_15_1) (* l_0_15_22 l_0_15_22)) 0.0))
(assert
 (let ((?x49291 (* l_0_15_64 l_0_15_64)))
 (let ((?x49517 (* 3.0 ?x49291)))
 (let ((?x49284 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x49509 (* l_0_15_127 l_0_15_127)))
 (let ((?x49273 (* l_0_15_1 l_0_15_1)))
 (let ((?x49274 (* 6.0 ?x49273)))
 (let ((?x49512 (+ (+ (+ (* (* (- 2.0) l_0_15_1) l_0_15_4) ?x49274) ?x49509) (* (* 2.0 l_0_15_22) l_0_15_25))))
 (= (+ (- (- ?x49512 ?x49284) (* (* 3.0 l_0_15_43) l_0_15_43)) ?x49517) 0.0)))))))))
(assert
 (let ((?x49291 (* l_0_15_64 l_0_15_64)))
 (let ((?x49310 (* l_0_15_43 l_0_15_43)))
 (let ((?x49529 (+ (* (* (- 2.0) l_0_15_1) l_0_15_7) (* (* 2.0 l_0_15_22) l_0_15_28))))
 (= (- (+ ?x49529 ?x49310) ?x49291) 0.0)))))
(assert
 (let ((?x49542 (+ (- (* (* (- 2.0) l_0_15_1) l_0_15_11) (* l_0_15_127 l_0_15_127)) (* (* 2.0 l_0_15_22) l_0_15_32))))
 (= ?x49542 0.0)))
(assert
 (let ((?x49563 (* l_0_15_85 l_0_15_85)))
 (let ((?x49559 (* l_0_15_169 l_0_15_169)))
 (let ((?x49557 (* l_0_15_148 l_0_15_148)))
 (let ((?x49558 (- (+ (* (* (- 2.0) l_0_15_1) l_0_15_16) (* l_0_15_106 l_0_15_106)) ?x49557)))
 (= (- (+ (+ ?x49558 ?x49559) (* (* 2.0 l_0_15_22) l_0_15_37)) ?x49563) 0.0))))))
(assert
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49607 (* ?x49175 l_0_15_67)))
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49605 (* ?x49604 l_0_15_65)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49602 (* ?x49172 l_0_15_46)))
 (let ((?x49599 (* 6.0 l_0_15_43)))
 (let ((?x49600 (* ?x49599 l_0_15_44)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49589 (* ?x49163 l_0_15_25)))
 (let ((?x49164 (* ?x49163 l_0_15_23)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49580 (* ?x49579 l_0_15_128)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x49577 (* ?x39322 l_0_15_4)))
 (let ((?x39323 (* ?x39322 l_0_15_2)))
 (let ((?x49585 (- (- (+ (+ ?x39323 ?x49577) ?x49580) (* (* 2.0 l_0_15_190) l_0_15_193)) (* (* 2.0 l_0_15_2) l_0_15_4))))
 (let ((?x49592 (+ (- (- (- ?x49585 (* (* 2.0 l_0_15_211) l_0_15_214)) ?x49164) ?x49589) (* (* 2.0 l_0_15_23) l_0_15_25))))
 (let ((?x49596 (+ (- ?x49592 (* (* 2.0 l_0_15_232) l_0_15_235)) (* (* 2.0 l_0_15_24) l_0_15_26))))
 (let ((?x49606 (+ (- (- (- ?x49596 (* (* 2.0 l_0_15_3) l_0_15_5)) ?x49600) ?x49602) ?x49605)))
 (= (+ ?x49606 ?x49607) 0.0))))))))))))))))))))))
(assert
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49665 (* ?x49175 l_0_15_74)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49663 (* ?x49172 l_0_15_53)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49655 (* ?x49163 l_0_15_32)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49580 (* ?x49579 l_0_15_128)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x17012 (* ?x39322 l_0_15_11)))
 (let ((?x49649 (- (- ?x17012 (* (* 2.0 l_0_15_11) l_0_15_2)) (* (* 2.0 l_0_15_12) l_0_15_3))))
 (let ((?x49654 (- (- (- ?x49649 ?x49580) (* (* 2.0 l_0_15_190) l_0_15_200)) (* (* 2.0 l_0_15_211) l_0_15_221))))
 (let ((?x49660 (- (+ (- ?x49654 ?x49655) (* (* 2.0 l_0_15_23) l_0_15_32)) (* (* 2.0 l_0_15_232) l_0_15_242))))
 (= (+ (- (+ ?x49660 (* (* 2.0 l_0_15_24) l_0_15_33)) ?x49663) ?x49665) 0.0)))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x49731 (* ?x49730 l_0_15_86)))
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49728 (* ?x49175 l_0_15_79)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49726 (* ?x49172 l_0_15_58)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49718 (* ?x49163 l_0_15_37)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x49709 (* ?x49708 l_0_15_170)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x49703 (* ?x49702 l_0_15_149)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x49692 (* ?x39322 l_0_15_16)))
 (let ((?x49707 (- (- (+ ?x49692 (* (* 2.0 l_0_15_106) l_0_15_107)) ?x49703) (* (* 2.0 l_0_15_16) l_0_15_2))))
 (let ((?x49715 (- (- (+ ?x49707 ?x49709) (* (* 2.0 l_0_15_17) l_0_15_3)) (* (* 2.0 l_0_15_190) l_0_15_205))))
 (let ((?x49721 (+ (- (- ?x49715 (* (* 2.0 l_0_15_211) l_0_15_226)) ?x49718) (* (* 2.0 l_0_15_23) l_0_15_37))))
 (let ((?x49725 (+ (- ?x49721 (* (* 2.0 l_0_15_232) l_0_15_247)) (* (* 2.0 l_0_15_24) l_0_15_38))))
 (= (- (+ (- ?x49725 ?x49726) ?x49728) ?x49731) 0.0))))))))))))))))))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x17037 (* ?x49604 l_0_15_67)))
 (let ((?x49605 (* ?x49604 l_0_15_65)))
 (let ((?x48927 (* l_0_15_6 l_0_15_6)))
 (let ((?x48924 (* l_0_15_5 l_0_15_5)))
 (let ((?x49599 (* 6.0 l_0_15_43)))
 (let ((?x17014 (* ?x49599 l_0_15_46)))
 (let ((?x49600 (* ?x49599 l_0_15_44)))
 (let ((?x48900 (* l_0_15_4 l_0_15_4)))
 (let ((?x39237 (* l_0_15_27 l_0_15_27)))
 (let ((?x39233 (* l_0_15_26 l_0_15_26)))
 (let ((?x39228 (* l_0_15_25 l_0_15_25)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49589 (* ?x49163 l_0_15_25)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x16994 (* ?x49579 l_0_15_130)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x49577 (* ?x39322 l_0_15_4)))
 (let ((?x29356 (- (- (+ (+ (+ (- (+ ?x49577 ?x16994) ?x49589) ?x39228) ?x39233) ?x39237) ?x48900) ?x49600)))
 (= (+ (+ (- (- (- ?x29356 ?x17014) ?x48924) ?x48927) ?x49605) ?x17037) 0.0)))))))))))))))))))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49810 (* ?x49604 l_0_15_70)))
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49607 (* ?x49175 l_0_15_67)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49602 (* ?x49172 l_0_15_46)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49324 (* ?x49163 l_0_15_28)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49785 (* ?x49579 l_0_15_133)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x15204 (* ?x39322 l_0_15_7)))
 (let ((?x49793 (+ (+ (- (+ ?x15204 ?x49785) ?x49324) (* (* 2.0 l_0_15_25) l_0_15_28)) (* (* 2.0 l_0_15_26) l_0_15_29))))
 (let ((?x49799 (- (+ ?x49793 (* (* 2.0 l_0_15_27) l_0_15_30)) (* (* 2.0 l_0_15_4) l_0_15_7))))
 (let ((?x49805 (- (- (+ ?x49799 ?x49602) (* (* 6.0 l_0_15_43) l_0_15_49)) (* (* 2.0 l_0_15_5) l_0_15_8))))
 (= (+ (- (- ?x49805 (* (* 2.0 l_0_15_6) l_0_15_9)) ?x49607) ?x49810) 0.0)))))))))))))))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49860 (* ?x49604 l_0_15_74)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49655 (* ?x49163 l_0_15_32)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49846 (* ?x49579 l_0_15_137)))
 (let ((?x16994 (* ?x49579 l_0_15_130)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x17012 (* ?x39322 l_0_15_11)))
 (let ((?x49844 (- (- ?x17012 (* (* 2.0 l_0_15_11) l_0_15_4)) (* (* 2.0 l_0_15_12) l_0_15_5))))
 (let ((?x49851 (- (- (+ (- ?x49844 ?x16994) ?x49846) (* (* 2.0 l_0_15_13) l_0_15_6)) ?x49655)))
 (let ((?x49855 (+ (+ ?x49851 (* (* 2.0 l_0_15_25) l_0_15_32)) (* (* 2.0 l_0_15_26) l_0_15_33))))
 (let ((?x49859 (- (+ ?x49855 (* (* 2.0 l_0_15_27) l_0_15_34)) (* (* 6.0 l_0_15_43) l_0_15_53))))
 (= (+ ?x49859 ?x49860) 0.0)))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x49911 (* ?x49730 l_0_15_88)))
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49909 (* ?x49604 l_0_15_79)))
 (let ((?x49163 (* 12.0 l_0_15_22)))
 (let ((?x49718 (* ?x49163 l_0_15_37)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x49893 (* ?x49708 l_0_15_172)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x49889 (* ?x49702 l_0_15_151)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49887 (* ?x49579 l_0_15_142)))
 (let ((?x39322 (* 12.0 l_0_15_1)))
 (let ((?x49692 (* ?x39322 l_0_15_16)))
 (let ((?x49892 (- (- (+ (+ ?x49692 (* (* 2.0 l_0_15_106) l_0_15_109)) ?x49887) ?x49889) (* (* 2.0 l_0_15_16) l_0_15_4))))
 (let ((?x49899 (- (- (+ ?x49892 ?x49893) (* (* 2.0 l_0_15_17) l_0_15_5)) (* (* 2.0 l_0_15_18) l_0_15_6))))
 (let ((?x49904 (+ (+ (- ?x49899 ?x49718) (* (* 2.0 l_0_15_25) l_0_15_37)) (* (* 2.0 l_0_15_26) l_0_15_38))))
 (let ((?x49908 (- (+ ?x49904 (* (* 2.0 l_0_15_27) l_0_15_39)) (* (* 6.0 l_0_15_43) l_0_15_58))))
 (= (- (+ ?x49908 ?x49909) ?x49911) 0.0))))))))))))))))))))
(assert
 (let ((?x49445 (* l_0_15_9 l_0_15_9)))
 (let ((?x49442 (* l_0_15_8 l_0_15_8)))
 (let ((?x49427 (* l_0_15_7 l_0_15_7)))
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49341 (* ?x49175 l_0_15_70)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49338 (* ?x49172 l_0_15_49)))
 (let ((?x39433 (* l_0_15_31 l_0_15_31)))
 (let ((?x14967 (* l_0_15_30 l_0_15_30)))
 (let ((?x39431 (* l_0_15_29 l_0_15_29)))
 (let ((?x49948 (+ (+ (* (- l_0_15_10) l_0_15_10) (* l_0_15_28 l_0_15_28)) ?x39431)))
 (let ((?x49955 (- (- (- (- (+ (+ (+ ?x49948 ?x14967) ?x39433) ?x49338) ?x49341) ?x49427) ?x49442) ?x49445)))
 (= ?x49955 0.0))))))))))))))
(assert
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49665 (* ?x49175 l_0_15_74)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49663 (* ?x49172 l_0_15_53)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49785 (* ?x49579 l_0_15_133)))
 (let ((?x49965 (- (* (* (- 2.0) l_0_15_10) l_0_15_14) (* (* 2.0 l_0_15_11) l_0_15_7))))
 (let ((?x49970 (- (- (- ?x49965 (* (* 2.0 l_0_15_12) l_0_15_8)) ?x49785) (* (* 2.0 l_0_15_13) l_0_15_9))))
 (let ((?x49976 (+ (+ ?x49970 (* (* 2.0 l_0_15_28) l_0_15_32)) (* (* 2.0 l_0_15_29) l_0_15_33))))
 (let ((?x49982 (+ (+ ?x49976 (* (* 2.0 l_0_15_30) l_0_15_34)) (* (* 2.0 l_0_15_31) l_0_15_35))))
 (= (- (+ ?x49982 ?x49663) ?x49665) 0.0))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x50026 (* ?x49730 l_0_15_91)))
 (let ((?x49175 (* 2.0 l_0_15_64)))
 (let ((?x49728 (* ?x49175 l_0_15_79)))
 (let ((?x49172 (* 2.0 l_0_15_43)))
 (let ((?x49726 (* ?x49172 l_0_15_58)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50010 (* ?x49708 l_0_15_175)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50006 (* ?x49702 l_0_15_154)))
 (let ((?x50005 (+ (* (* (- 2.0) l_0_15_10) l_0_15_19) (* (* 2.0 l_0_15_106) l_0_15_112))))
 (let ((?x50013 (- (+ (- (- ?x50005 ?x50006) (* (* 2.0 l_0_15_16) l_0_15_7)) ?x50010) (* (* 2.0 l_0_15_17) l_0_15_8))))
 (let ((?x50017 (+ (- ?x50013 (* (* 2.0 l_0_15_18) l_0_15_9)) (* (* 2.0 l_0_15_28) l_0_15_37))))
 (let ((?x50021 (+ (+ ?x50017 (* (* 2.0 l_0_15_29) l_0_15_38)) (* (* 2.0 l_0_15_30) l_0_15_39))))
 (let ((?x50027 (- (- (+ (+ ?x50021 (* (* 2.0 l_0_15_31) l_0_15_40)) ?x49726) ?x49728) ?x50026)))
 (= ?x50027 0.0)))))))))))))))))
(assert
 (let ((?x50083 (* l_0_15_36 l_0_15_36)))
 (let ((?x50081 (* l_0_15_35 l_0_15_35)))
 (let ((?x50079 (* l_0_15_34 l_0_15_34)))
 (let ((?x50077 (* l_0_15_33 l_0_15_33)))
 (let ((?x50075 (* l_0_15_32 l_0_15_32)))
 (let ((?x50073 (* l_0_15_15 l_0_15_15)))
 (let ((?x50071 (* l_0_15_14 l_0_15_14)))
 (let ((?x50069 (* l_0_15_13 l_0_15_13)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49846 (* ?x49579 l_0_15_137)))
 (let ((?x50068 (- (- (* (- l_0_15_11) l_0_15_11) (* l_0_15_12 l_0_15_12)) ?x49846)))
 (let ((?x50082 (+ (+ (+ (+ (- (- (- ?x50068 ?x50069) ?x50071) ?x50073) ?x50075) ?x50077) ?x50079) ?x50081)))
 (= (+ ?x50082 ?x50083) 0.0))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x50132 (* ?x49730 l_0_15_95)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50115 (* ?x49708 l_0_15_179)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50110 (* ?x49702 l_0_15_158)))
 (let ((?x49579 (* 2.0 l_0_15_127)))
 (let ((?x49887 (* ?x49579 l_0_15_142)))
 (let ((?x50101 (- (* (* 2.0 l_0_15_106) l_0_15_116) (* (* 2.0 l_0_15_11) l_0_15_16))))
 (let ((?x50106 (- (- (- ?x50101 (* (* 2.0 l_0_15_12) l_0_15_17)) ?x49887) (* (* 2.0 l_0_15_13) l_0_15_18))))
 (let ((?x50114 (- (- (- ?x50106 (* (* 2.0 l_0_15_14) l_0_15_19)) ?x50110) (* (* 2.0 l_0_15_15) l_0_15_20))))
 (let ((?x50122 (+ (+ (+ ?x50114 ?x50115) (* (* 2.0 l_0_15_32) l_0_15_37)) (* (* 2.0 l_0_15_33) l_0_15_38))))
 (let ((?x50128 (+ (+ ?x50122 (* (* 2.0 l_0_15_34) l_0_15_39)) (* (* 2.0 l_0_15_35) l_0_15_40))))
 (= (- (+ ?x50128 (* (* 2.0 l_0_15_36) l_0_15_41)) ?x50132) 0.0)))))))))))))))
(assert
 (let ((?x50205 (* l_0_15_42 l_0_15_42)))
 (let ((?x50203 (* l_0_15_41 l_0_15_41)))
 (let ((?x50201 (* l_0_15_40 l_0_15_40)))
 (let ((?x50199 (* l_0_15_39 l_0_15_39)))
 (let ((?x50197 (* l_0_15_38 l_0_15_38)))
 (let ((?x50195 (* l_0_15_37 l_0_15_37)))
 (let ((?x50193 (* l_0_15_21 l_0_15_21)))
 (let ((?x50191 (* l_0_15_20 l_0_15_20)))
 (let ((?x50189 (* l_0_15_19 l_0_15_19)))
 (let ((?x50187 (* l_0_15_18 l_0_15_18)))
 (let ((?x50185 (* l_0_15_17 l_0_15_17)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50183 (* ?x49708 l_0_15_184)))
 (let ((?x50181 (* l_0_15_16 l_0_15_16)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50179 (* ?x49702 l_0_15_163)))
 (let ((?x49693 (* 2.0 l_0_15_106)))
 (let ((?x50177 (* ?x49693 l_0_15_121)))
 (let ((?x50184 (+ (- (- (+ (* (* (- 2.0) l_0_15_100) l_0_15_85) ?x50177) ?x50179) ?x50181) ?x50183)))
 (let ((?x50198 (+ (+ (- (- (- (- (- ?x50184 ?x50185) ?x50187) ?x50189) ?x50191) ?x50193) ?x50195) ?x50197)))
 (= (+ (+ (+ (+ ?x50198 ?x50199) ?x50201) ?x50203) ?x50205) 0.0))))))))))))))))))))))
(assert
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50311 (* ?x50310 l_0_15_72)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50308 (* ?x50307 l_0_15_71)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50305 (* ?x50304 l_0_15_70)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50302 (* ?x48936 l_0_15_71)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x49068 (* ?x49067 l_0_15_68)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50299 (* ?x48930 l_0_15_70)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x49064 (* ?x49063 l_0_15_67)))
 (let ((?x50296 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x50293 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50290 (* ?x50289 l_0_15_51)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50287 (* ?x50286 l_0_15_50)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50284 (* ?x50283 l_0_15_49)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50281 (* ?x48909 l_0_15_50)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x49060 (* ?x49059 l_0_15_47)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50278 (* ?x48903 l_0_15_49)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x49056 (* ?x49055 l_0_15_46)))
 (let ((?x50275 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x48897 (* 12.0 l_0_15_3)))
 (let ((?x49212 (* ?x48897 l_0_15_8)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50271 (* ?x50270 l_0_15_30)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50268 (* ?x50267 l_0_15_29)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50265 (* ?x50264 l_0_15_28)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x49210 (* ?x48885 l_0_15_29)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x49204 (* ?x48876 l_0_15_28)))
 (let ((?x48867 (* 12.0 l_0_15_2)))
 (let ((?x49198 (* ?x48867 l_0_15_7)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50232 (* ?x48858 l_0_15_134)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50231 (* ?x48856 l_0_15_133)))
 (let ((?x50239 (- (- (+ ?x50231 ?x50232) (* (* 2.0 l_0_15_193) l_0_15_196)) (* (* 2.0 l_0_15_194) l_0_15_197))))
 (let ((?x50246 (- (+ (- ?x50239 (* (* 2.0 l_0_15_195) l_0_15_198)) ?x49198) (* (* 2.0 l_0_15_214) l_0_15_217))))
 (let ((?x50252 (- (- ?x50246 (* (* 2.0 l_0_15_215) l_0_15_218)) (* (* 2.0 l_0_15_216) l_0_15_219))))
 (let ((?x50259 (- (- (- ?x50252 ?x49204) (* (* 2.0 l_0_15_235) l_0_15_238)) (* (* 2.0 l_0_15_236) l_0_15_239))))
 (let ((?x50269 (- (- (- (- ?x50259 (* (* 2.0 l_0_15_237) l_0_15_240)) ?x49210) ?x50265) ?x50268)))
 (let ((?x50282 (- (+ (- (+ (+ (+ (- ?x50269 ?x50271) ?x49212) ?x50275) ?x49056) ?x50278) ?x49060) ?x50281)))
 (let ((?x50300 (+ (- (+ (+ (- (- (- ?x50282 ?x50284) ?x50287) ?x50290) ?x50293) ?x50296) ?x49064) ?x50299)))
 (= (+ (+ (+ (+ (- ?x50300 ?x49068) ?x50302) ?x50305) ?x50308) ?x50311) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50457 (* ?x50310 l_0_15_76)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50455 (* ?x50307 l_0_15_75)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50453 (* ?x50304 l_0_15_74)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50451 (* ?x48936 l_0_15_75)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50449 (* ?x48930 l_0_15_74)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50447 (* ?x50289 l_0_15_55)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50445 (* ?x50286 l_0_15_54)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50443 (* ?x50283 l_0_15_53)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50441 (* ?x48909 l_0_15_54)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50439 (* ?x48903 l_0_15_53)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50437 (* ?x50270 l_0_15_34)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50435 (* ?x50267 l_0_15_33)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50433 (* ?x50264 l_0_15_32)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x50431 (* ?x48885 l_0_15_33)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x50423 (* ?x48876 l_0_15_32)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x50409 (* ?x50408 l_0_15_6)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50406 (* ?x48858 l_0_15_138)))
 (let ((?x48859 (* ?x48858 l_0_15_131)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50403 (* ?x48856 l_0_15_137)))
 (let ((?x48857 (* ?x48856 l_0_15_130)))
 (let ((?x50397 (* 12.0 l_0_15_12)))
 (let ((?x50400 (* ?x50397 l_0_15_5)))
 (let ((?x50398 (* ?x50397 l_0_15_3)))
 (let ((?x50393 (* 12.0 l_0_15_11)))
 (let ((?x50395 (* ?x50393 l_0_15_4)))
 (let ((?x50394 (* ?x50393 l_0_15_2)))
 (let ((?x50407 (+ (- (+ (- (+ (+ (+ ?x50394 ?x50395) ?x50398) ?x50400) ?x48857) ?x50403) ?x48859) ?x50406)))
 (let ((?x50414 (- (- (+ ?x50407 ?x50409) (* (* 2.0 l_0_15_193) l_0_15_200)) (* (* 2.0 l_0_15_194) l_0_15_201))))
 (let ((?x50418 (- (- ?x50414 (* (* 2.0 l_0_15_195) l_0_15_202)) (* (* 2.0 l_0_15_214) l_0_15_221))))
 (let ((?x50422 (- (- ?x50418 (* (* 2.0 l_0_15_215) l_0_15_222)) (* (* 2.0 l_0_15_216) l_0_15_223))))
 (let ((?x50428 (- (- (- ?x50422 ?x50423) (* (* 2.0 l_0_15_235) l_0_15_242)) (* (* 2.0 l_0_15_236) l_0_15_243))))
 (let ((?x50436 (- (- (- (- ?x50428 (* (* 2.0 l_0_15_237) l_0_15_244)) ?x50431) ?x50433) ?x50435)))
 (let ((?x50450 (+ (- (- (- (- (- (- ?x50436 ?x50437) ?x50439) ?x50441) ?x50443) ?x50445) ?x50447) ?x50449)))
 (= (+ (+ (+ (+ ?x50450 ?x50451) ?x50453) ?x50455) ?x50457) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x50622 (* ?x50621 l_0_15_89)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x50619 (* ?x50618 l_0_15_88)))
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50616 (* ?x50310 l_0_15_81)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50614 (* ?x50307 l_0_15_80)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50612 (* ?x50304 l_0_15_79)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50610 (* ?x48936 l_0_15_80)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50608 (* ?x48930 l_0_15_79)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50606 (* ?x50289 l_0_15_60)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50604 (* ?x50286 l_0_15_59)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50602 (* ?x50283 l_0_15_58)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50600 (* ?x48909 l_0_15_59)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50598 (* ?x48903 l_0_15_58)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50596 (* ?x50270 l_0_15_39)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50594 (* ?x50267 l_0_15_38)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50592 (* ?x50264 l_0_15_37)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x50590 (* ?x48885 l_0_15_38)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x50582 (* ?x48876 l_0_15_37)))
 (let ((?x50567 (* 12.0 l_0_15_18)))
 (let ((?x50568 (* ?x50567 l_0_15_6)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x50565 (* ?x50564 l_0_15_173)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x50562 (* ?x50561 l_0_15_172)))
 (let ((?x50556 (* 12.0 l_0_15_17)))
 (let ((?x50559 (* ?x50556 l_0_15_5)))
 (let ((?x50557 (* ?x50556 l_0_15_3)))
 (let ((?x50551 (* 12.0 l_0_15_16)))
 (let ((?x50554 (* ?x50551 l_0_15_4)))
 (let ((?x50552 (* ?x50551 l_0_15_2)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x50549 (* ?x50548 l_0_15_152)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x50546 (* ?x50545 l_0_15_151)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50543 (* ?x48858 l_0_15_143)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50527 (* ?x48856 l_0_15_142)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x50524 (* ?x50522 l_0_15_110)))
 (let ((?x50547 (- (+ (+ (+ (* (* 2.0 l_0_15_107) l_0_15_109) ?x50524) ?x50527) ?x50543) ?x50546)))
 (let ((?x50566 (+ (+ (+ (+ (+ (+ (- ?x50547 ?x50549) ?x50552) ?x50554) ?x50557) ?x50559) ?x50562) ?x50565)))
 (let ((?x50573 (- (- (+ ?x50566 ?x50568) (* (* 2.0 l_0_15_193) l_0_15_205)) (* (* 2.0 l_0_15_194) l_0_15_206))))
 (let ((?x50577 (- (- ?x50573 (* (* 2.0 l_0_15_195) l_0_15_207)) (* (* 2.0 l_0_15_214) l_0_15_226))))
 (let ((?x50581 (- (- ?x50577 (* (* 2.0 l_0_15_215) l_0_15_227)) (* (* 2.0 l_0_15_216) l_0_15_228))))
 (let ((?x50587 (- (- (- ?x50581 ?x50582) (* (* 2.0 l_0_15_235) l_0_15_247)) (* (* 2.0 l_0_15_236) l_0_15_248))))
 (let ((?x50595 (- (- (- (- ?x50587 (* (* 2.0 l_0_15_237) l_0_15_249)) ?x50590) ?x50592) ?x50594)))
 (let ((?x50609 (+ (- (- (- (- (- (- ?x50595 ?x50596) ?x50598) ?x50600) ?x50602) ?x50604) ?x50606) ?x50608)))
 (= (- (- (+ (+ (+ (+ ?x50609 ?x50610) ?x50612) ?x50614) ?x50616) ?x50619) ?x50622) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50807 (* l_0_15_87 l_0_15_87)))
 (let ((?x50805 (* l_0_15_86 l_0_15_86)))
 (let ((?x48948 (* l_0_15_69 l_0_15_69)))
 (let ((?x50803 (* 3.0 ?x48948)))
 (let ((?x48945 (* l_0_15_68 l_0_15_68)))
 (let ((?x50801 (* 3.0 ?x48945)))
 (let ((?x48942 (* l_0_15_67 l_0_15_67)))
 (let ((?x50799 (* 3.0 ?x48942)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x48937 (* ?x48936 l_0_15_68)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x48931 (* ?x48930 l_0_15_67)))
 (let ((?x48927 (* l_0_15_6 l_0_15_6)))
 (let ((?x48928 (* 6.0 ?x48927)))
 (let ((?x48924 (* l_0_15_5 l_0_15_5)))
 (let ((?x48925 (* 6.0 ?x48924)))
 (let ((?x50793 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x50790 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x50787 (* (* 3.0 l_0_15_46) l_0_15_46)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x48910 (* ?x48909 l_0_15_47)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x48904 (* ?x48903 l_0_15_46)))
 (let ((?x48900 (* l_0_15_4 l_0_15_4)))
 (let ((?x48901 (* 6.0 ?x48900)))
 (let ((?x48895 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x48892 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x48889 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x50778 (* l_0_15_171 l_0_15_171)))
 (let ((?x50776 (* l_0_15_170 l_0_15_170)))
 (let ((?x50774 (* l_0_15_150 l_0_15_150)))
 (let ((?x50772 (* l_0_15_149 l_0_15_149)))
 (let ((?x50770 (* l_0_15_132 l_0_15_132)))
 (let ((?x50768 (* l_0_15_131 l_0_15_131)))
 (let ((?x50766 (* l_0_15_130 l_0_15_130)))
 (let ((?x50767 (+ (- (* (- l_0_15_107) l_0_15_107) (* l_0_15_108 l_0_15_108)) ?x50766)))
 (let ((?x50780 (- (- (- (+ (+ (+ (+ ?x50767 ?x50768) ?x50770) ?x50772) ?x50774) ?x50776) ?x50778) ?x48889)))
 (let ((?x50791 (- (- (- (- (+ (- (- ?x50780 ?x48892) ?x48895) ?x48901) ?x48904) ?x48910) ?x50787) ?x50790)))
 (let ((?x50802 (+ (+ (+ (+ (+ (+ (- ?x50791 ?x50793) ?x48925) ?x48928) ?x48931) ?x48937) ?x50799) ?x50801)))
 (= (+ (+ (+ ?x50802 ?x50803) ?x50805) ?x50807) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48948 (* l_0_15_69 l_0_15_69)))
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x50885 (* ?x50884 l_0_15_72)))
 (let ((?x48945 (* l_0_15_68 l_0_15_68)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x50881 (* ?x50880 l_0_15_71)))
 (let ((?x48942 (* l_0_15_67 l_0_15_67)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x50877 (* ?x50876 l_0_15_70)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50302 (* ?x48936 l_0_15_71)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50299 (* ?x48930 l_0_15_70)))
 (let ((?x50296 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x50293 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x16008 (* l_0_15_48 l_0_15_48)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x50869 (* ?x50868 l_0_15_51)))
 (let ((?x26148 (* l_0_15_47 l_0_15_47)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x50865 (* ?x50864 l_0_15_50)))
 (let ((?x16019 (* l_0_15_46 l_0_15_46)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x50861 (* ?x50860 l_0_15_49)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50281 (* ?x48909 l_0_15_50)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50278 (* ?x48903 l_0_15_49)))
 (let ((?x50275 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50271 (* ?x50270 l_0_15_30)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50268 (* ?x50267 l_0_15_29)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50265 (* ?x50264 l_0_15_28)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50852 (* ?x50851 l_0_15_135)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50849 (* ?x50848 l_0_15_134)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50847 (* ?x28175 l_0_15_133)))
 (let ((?x50858 (- (+ (- (- (- (+ (+ ?x50847 ?x50849) ?x50852) ?x50265) ?x50268) ?x50271) ?x50275) ?x50278)))
 (let ((?x50871 (+ (- (+ (- (+ (- (- ?x50858 ?x50281) ?x50861) ?x16019) ?x50865) ?x26148) ?x50869) ?x16008)))
 (let ((?x50882 (+ (- (+ (+ (+ (+ (+ ?x50871 ?x50293) ?x50296) ?x50299) ?x50302) ?x50877) ?x48942) ?x50881)))
 (= (- (+ (- ?x50882 ?x48945) ?x50885) ?x48948) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x50953 (* ?x50884 l_0_15_76)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x50951 (* ?x50880 l_0_15_75)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x50949 (* ?x50876 l_0_15_74)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50451 (* ?x48936 l_0_15_75)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50449 (* ?x48930 l_0_15_74)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x50945 (* ?x50868 l_0_15_55)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x50943 (* ?x50864 l_0_15_54)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x50941 (* ?x50860 l_0_15_53)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50441 (* ?x48909 l_0_15_54)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50439 (* ?x48903 l_0_15_53)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50437 (* ?x50270 l_0_15_34)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50435 (* ?x50267 l_0_15_33)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50433 (* ?x50264 l_0_15_32)))
 (let ((?x50770 (* l_0_15_132 l_0_15_132)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50933 (* ?x50851 l_0_15_139)))
 (let ((?x50768 (* l_0_15_131 l_0_15_131)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50930 (* ?x50848 l_0_15_138)))
 (let ((?x50766 (* l_0_15_130 l_0_15_130)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50927 (* ?x28175 l_0_15_137)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x50409 (* ?x50408 l_0_15_6)))
 (let ((?x50397 (* 12.0 l_0_15_12)))
 (let ((?x50400 (* ?x50397 l_0_15_5)))
 (let ((?x50393 (* 12.0 l_0_15_11)))
 (let ((?x50395 (* ?x50393 l_0_15_4)))
 (let ((?x50934 (+ (- (+ (- (+ (+ (+ ?x50395 ?x50400) ?x50409) ?x50927) ?x50766) ?x50930) ?x50768) ?x50933)))
 (let ((?x50942 (- (- (- (- (- (- (- ?x50934 ?x50770) ?x50433) ?x50435) ?x50437) ?x50439) ?x50441) ?x50941)))
 (let ((?x50954 (+ (+ (+ (+ (+ (- (- ?x50942 ?x50943) ?x50945) ?x50449) ?x50451) ?x50949) ?x50951) ?x50953)))
 (= ?x50954 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51023 (* l_0_15_90 l_0_15_90)))
 (let ((?x51021 (* l_0_15_89 l_0_15_89)))
 (let ((?x51019 (* l_0_15_88 l_0_15_88)))
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x51017 (* ?x50884 l_0_15_81)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x51015 (* ?x50880 l_0_15_80)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x51013 (* ?x50876 l_0_15_79)))
 (let ((?x48936 (* 6.0 l_0_15_66)))
 (let ((?x50610 (* ?x48936 l_0_15_80)))
 (let ((?x48930 (* 6.0 l_0_15_65)))
 (let ((?x50608 (* ?x48930 l_0_15_79)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x51009 (* ?x50868 l_0_15_60)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x51007 (* ?x50864 l_0_15_59)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x51005 (* ?x50860 l_0_15_58)))
 (let ((?x48909 (* 6.0 l_0_15_45)))
 (let ((?x50600 (* ?x48909 l_0_15_59)))
 (let ((?x48903 (* 6.0 l_0_15_44)))
 (let ((?x50598 (* ?x48903 l_0_15_58)))
 (let ((?x50270 (* 12.0 l_0_15_27)))
 (let ((?x50596 (* ?x50270 l_0_15_39)))
 (let ((?x50267 (* 12.0 l_0_15_26)))
 (let ((?x50594 (* ?x50267 l_0_15_38)))
 (let ((?x50264 (* 12.0 l_0_15_25)))
 (let ((?x50592 (* ?x50264 l_0_15_37)))
 (let ((?x50567 (* 12.0 l_0_15_18)))
 (let ((?x50568 (* ?x50567 l_0_15_6)))
 (let ((?x50997 (* l_0_15_174 l_0_15_174)))
 (let ((?x50995 (* l_0_15_173 l_0_15_173)))
 (let ((?x50993 (* l_0_15_172 l_0_15_172)))
 (let ((?x50556 (* 12.0 l_0_15_17)))
 (let ((?x50559 (* ?x50556 l_0_15_5)))
 (let ((?x50551 (* 12.0 l_0_15_16)))
 (let ((?x50554 (* ?x50551 l_0_15_4)))
 (let ((?x50989 (* l_0_15_153 l_0_15_153)))
 (let ((?x50987 (* l_0_15_152 l_0_15_152)))
 (let ((?x50985 (* l_0_15_151 l_0_15_151)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50983 (* ?x50851 l_0_15_144)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50981 (* ?x50848 l_0_15_143)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50979 (* ?x28175 l_0_15_142)))
 (let ((?x40062 (* l_0_15_111 l_0_15_111)))
 (let ((?x50978 (+ (+ (* l_0_15_109 l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x40062)))
 (let ((?x50991 (+ (- (- (- (+ (+ (+ ?x50978 ?x50979) ?x50981) ?x50983) ?x50985) ?x50987) ?x50989) ?x50554)))
 (let ((?x51001 (- (- (+ (+ (+ (+ (+ ?x50991 ?x50559) ?x50993) ?x50995) ?x50997) ?x50568) ?x50592) ?x50594)))
 (let ((?x51011 (+ (- (- (- (- (- (- ?x51001 ?x50596) ?x50598) ?x50600) ?x51005) ?x51007) ?x51009) ?x50608)))
 (let ((?x51024 (- (- (- (+ (+ (+ (+ ?x51011 ?x50610) ?x51013) ?x51015) ?x51017) ?x51019) ?x51021) ?x51023)))
 (= ?x51024 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49445 (* l_0_15_9 l_0_15_9)))
 (let ((?x49446 (* 6.0 ?x49445)))
 (let ((?x49442 (* l_0_15_8 l_0_15_8)))
 (let ((?x49443 (* 6.0 ?x49442)))
 (let ((?x49439 (* l_0_15_73 l_0_15_73)))
 (let ((?x51097 (* 3.0 ?x49439)))
 (let ((?x49436 (* l_0_15_72 l_0_15_72)))
 (let ((?x51095 (* 3.0 ?x49436)))
 (let ((?x49433 (* l_0_15_71 l_0_15_71)))
 (let ((?x51093 (* 3.0 ?x49433)))
 (let ((?x49430 (* l_0_15_70 l_0_15_70)))
 (let ((?x51091 (* 3.0 ?x49430)))
 (let ((?x49427 (* l_0_15_7 l_0_15_7)))
 (let ((?x49428 (* 6.0 ?x49427)))
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50311 (* ?x50310 l_0_15_72)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50308 (* ?x50307 l_0_15_71)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50305 (* ?x50304 l_0_15_70)))
 (let ((?x51085 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x51082 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x51079 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50290 (* ?x50289 l_0_15_51)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50287 (* ?x50286 l_0_15_50)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50284 (* ?x50283 l_0_15_49)))
 (let ((?x49409 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x49406 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x49403 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x49400 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x51066 (* l_0_15_136 l_0_15_136)))
 (let ((?x51064 (* l_0_15_135 l_0_15_135)))
 (let ((?x51062 (* l_0_15_134 l_0_15_134)))
 (let ((?x18504 (* l_0_15_133 l_0_15_133)))
 (let ((?x28505 (* l_0_15_10 l_0_15_10)))
 (let ((?x16759 (* 6.0 ?x28505)))
 (let ((?x51070 (- (- (- (+ (+ (+ (+ ?x16759 ?x18504) ?x51062) ?x51064) ?x51066) ?x49400) ?x49403) ?x49406)))
 (let ((?x51077 (- (+ (+ (+ (- ?x51070 ?x49409) ?x50284) ?x50287) ?x50290) (* (* 3.0 l_0_15_49) l_0_15_49))))
 (let ((?x51090 (+ (- (- (- (- (- (- ?x51077 ?x51079) ?x51082) ?x51085) ?x50305) ?x50308) ?x50311) ?x49428)))
 (= (+ (+ (+ (+ (+ (+ ?x51090 ?x51091) ?x51093) ?x51095) ?x51097) ?x49443) ?x49446) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51184 (* 6.0 l_0_15_73)))
 (let ((?x51185 (* ?x51184 l_0_15_77)))
 (let ((?x51181 (* 6.0 l_0_15_72)))
 (let ((?x51182 (* ?x51181 l_0_15_76)))
 (let ((?x51178 (* 6.0 l_0_15_71)))
 (let ((?x51179 (* ?x51178 l_0_15_75)))
 (let ((?x51175 (* 6.0 l_0_15_70)))
 (let ((?x51176 (* ?x51175 l_0_15_74)))
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50457 (* ?x50310 l_0_15_76)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50455 (* ?x50307 l_0_15_75)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50453 (* ?x50304 l_0_15_74)))
 (let ((?x51169 (* 6.0 l_0_15_52)))
 (let ((?x51170 (* ?x51169 l_0_15_56)))
 (let ((?x51166 (* 6.0 l_0_15_51)))
 (let ((?x51167 (* ?x51166 l_0_15_55)))
 (let ((?x51163 (* 6.0 l_0_15_50)))
 (let ((?x51164 (* ?x51163 l_0_15_54)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50447 (* ?x50289 l_0_15_55)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50445 (* ?x50286 l_0_15_54)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50443 (* ?x50283 l_0_15_53)))
 (let ((?x51154 (* 12.0 l_0_15_31)))
 (let ((?x51155 (* ?x51154 l_0_15_35)))
 (let ((?x51151 (* 12.0 l_0_15_30)))
 (let ((?x51152 (* ?x51151 l_0_15_34)))
 (let ((?x51148 (* 12.0 l_0_15_29)))
 (let ((?x51149 (* ?x51148 l_0_15_33)))
 (let ((?x51145 (* 12.0 l_0_15_28)))
 (let ((?x51146 (* ?x51145 l_0_15_32)))
 (let ((?x51142 (* 2.0 l_0_15_136)))
 (let ((?x51143 (* ?x51142 l_0_15_140)))
 (let ((?x51139 (* 2.0 l_0_15_135)))
 (let ((?x51140 (* ?x51139 l_0_15_139)))
 (let ((?x51136 (* 2.0 l_0_15_134)))
 (let ((?x51137 (* ?x51136 l_0_15_138)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50852 (* ?x50851 l_0_15_135)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50849 (* ?x50848 l_0_15_134)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50847 (* ?x28175 l_0_15_133)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x51128 (* ?x50408 l_0_15_9)))
 (let ((?x51125 (+ (* (* 12.0 l_0_15_10) l_0_15_14) (* (* 12.0 l_0_15_11) l_0_15_7))))
 (let ((?x51127 (+ ?x51125 (* (* 12.0 l_0_15_12) l_0_15_8))))
 (let ((?x51135 (+ (- (- (- (+ ?x51127 ?x51128) ?x50847) ?x50849) ?x50852) (* (* 2.0 l_0_15_133) l_0_15_137))))
 (let ((?x51156 (- (- (- (- (+ (+ (+ ?x51135 ?x51137) ?x51140) ?x51143) ?x51146) ?x51149) ?x51152) ?x51155)))
 (let ((?x51162 (- (+ (+ (+ ?x51156 ?x50443) ?x50445) ?x50447) (* (* 6.0 l_0_15_49) l_0_15_53))))
 (let ((?x51177 (+ (- (- (- (- (- (- ?x51162 ?x51164) ?x51167) ?x51170) ?x50453) ?x50455) ?x50457) ?x51176)))
 (= (+ (+ (+ ?x51177 ?x51179) ?x51182) ?x51185) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51311 (* 2.0 l_0_15_90)))
 (let ((?x51312 (* ?x51311 l_0_15_93)))
 (let ((?x51308 (* 2.0 l_0_15_89)))
 (let ((?x51309 (* ?x51308 l_0_15_92)))
 (let ((?x51305 (* 2.0 l_0_15_88)))
 (let ((?x51306 (* ?x51305 l_0_15_91)))
 (let ((?x51184 (* 6.0 l_0_15_73)))
 (let ((?x51303 (* ?x51184 l_0_15_82)))
 (let ((?x51181 (* 6.0 l_0_15_72)))
 (let ((?x51301 (* ?x51181 l_0_15_81)))
 (let ((?x51178 (* 6.0 l_0_15_71)))
 (let ((?x51299 (* ?x51178 l_0_15_80)))
 (let ((?x51175 (* 6.0 l_0_15_70)))
 (let ((?x51297 (* ?x51175 l_0_15_79)))
 (let ((?x50310 (* 2.0 l_0_15_69)))
 (let ((?x50616 (* ?x50310 l_0_15_81)))
 (let ((?x50307 (* 2.0 l_0_15_68)))
 (let ((?x50614 (* ?x50307 l_0_15_80)))
 (let ((?x50304 (* 2.0 l_0_15_67)))
 (let ((?x50612 (* ?x50304 l_0_15_79)))
 (let ((?x51169 (* 6.0 l_0_15_52)))
 (let ((?x51292 (* ?x51169 l_0_15_61)))
 (let ((?x51166 (* 6.0 l_0_15_51)))
 (let ((?x51290 (* ?x51166 l_0_15_60)))
 (let ((?x51163 (* 6.0 l_0_15_50)))
 (let ((?x51288 (* ?x51163 l_0_15_59)))
 (let ((?x50289 (* 2.0 l_0_15_48)))
 (let ((?x50606 (* ?x50289 l_0_15_60)))
 (let ((?x50286 (* 2.0 l_0_15_47)))
 (let ((?x50604 (* ?x50286 l_0_15_59)))
 (let ((?x50283 (* 2.0 l_0_15_46)))
 (let ((?x50602 (* ?x50283 l_0_15_58)))
 (let ((?x51154 (* 12.0 l_0_15_31)))
 (let ((?x51281 (* ?x51154 l_0_15_40)))
 (let ((?x51151 (* 12.0 l_0_15_30)))
 (let ((?x51279 (* ?x51151 l_0_15_39)))
 (let ((?x51148 (* 12.0 l_0_15_29)))
 (let ((?x51277 (* ?x51148 l_0_15_38)))
 (let ((?x51145 (* 12.0 l_0_15_28)))
 (let ((?x51275 (* ?x51145 l_0_15_37)))
 (let ((?x50567 (* 12.0 l_0_15_18)))
 (let ((?x51273 (* ?x50567 l_0_15_9)))
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51271 (* ?x51270 l_0_15_177)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51268 (* ?x51267 l_0_15_176)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51265 (* ?x51264 l_0_15_175)))
 (let ((?x50556 (* 12.0 l_0_15_17)))
 (let ((?x51262 (* ?x50556 l_0_15_8)))
 (let ((?x50551 (* 12.0 l_0_15_16)))
 (let ((?x51260 (* ?x50551 l_0_15_7)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51258 (* ?x51257 l_0_15_156)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51255 (* ?x51254 l_0_15_155)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51252 (* ?x51251 l_0_15_154)))
 (let ((?x51142 (* 2.0 l_0_15_136)))
 (let ((?x51249 (* ?x51142 l_0_15_145)))
 (let ((?x51139 (* 2.0 l_0_15_135)))
 (let ((?x51247 (* ?x51139 l_0_15_144)))
 (let ((?x51136 (* 2.0 l_0_15_134)))
 (let ((?x51245 (* ?x51136 l_0_15_143)))
 (let ((?x51133 (* 2.0 l_0_15_133)))
 (let ((?x51243 (* ?x51133 l_0_15_142)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51241 (* ?x51240 l_0_15_114)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51238 (* ?x51237 l_0_15_113)))
 (let ((?x18701 (* 12.0 l_0_15_10)))
 (let ((?x51233 (* ?x18701 l_0_15_19)))
 (let ((?x51244 (+ (+ (+ (+ ?x51233 (* (* 2.0 l_0_15_109) l_0_15_112)) ?x51238) ?x51241) ?x51243)))
 (let ((?x51261 (+ (- (- (- (+ (+ (+ ?x51244 ?x51245) ?x51247) ?x51249) ?x51252) ?x51255) ?x51258) ?x51260)))
 (let ((?x51278 (- (- (+ (+ (+ (+ (+ ?x51261 ?x51262) ?x51265) ?x51268) ?x51271) ?x51273) ?x51275) ?x51277)))
 (let ((?x51287 (- (+ (+ (+ (- (- ?x51278 ?x51279) ?x51281) ?x50602) ?x50604) ?x50606) (* (* 6.0 l_0_15_49) l_0_15_58))))
 (let ((?x51298 (+ (- (- (- (- (- (- ?x51287 ?x51288) ?x51290) ?x51292) ?x50612) ?x50614) ?x50616) ?x51297)))
 (= (- (- (- (+ (+ (+ ?x51298 ?x51299) ?x51301) ?x51303) ?x51306) ?x51309) ?x51312) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51451 (* l_0_15_78 l_0_15_78)))
 (let ((?x51452 (* 3.0 ?x51451)))
 (let ((?x51448 (* l_0_15_77 l_0_15_77)))
 (let ((?x51449 (* 3.0 ?x51448)))
 (let ((?x51445 (* l_0_15_76 l_0_15_76)))
 (let ((?x51446 (* 3.0 ?x51445)))
 (let ((?x51442 (* l_0_15_75 l_0_15_75)))
 (let ((?x51443 (* 3.0 ?x51442)))
 (let ((?x51439 (* l_0_15_74 l_0_15_74)))
 (let ((?x51440 (* 3.0 ?x51439)))
 (let ((?x51437 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x51434 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x51431 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x51428 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x51422 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x51419 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x51416 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x51413 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x51410 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x50073 (* l_0_15_15 l_0_15_15)))
 (let ((?x51407 (* 6.0 ?x50073)))
 (let ((?x51405 (* l_0_15_141 l_0_15_141)))
 (let ((?x51403 (* l_0_15_140 l_0_15_140)))
 (let ((?x50071 (* l_0_15_14 l_0_15_14)))
 (let ((?x51401 (* 6.0 ?x50071)))
 (let ((?x51399 (* l_0_15_139 l_0_15_139)))
 (let ((?x51397 (* l_0_15_138 l_0_15_138)))
 (let ((?x51395 (* l_0_15_137 l_0_15_137)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50933 (* ?x50851 l_0_15_139)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50930 (* ?x50848 l_0_15_138)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50927 (* ?x28175 l_0_15_137)))
 (let ((?x50069 (* l_0_15_13 l_0_15_13)))
 (let ((?x51390 (* 6.0 ?x50069)))
 (let ((?x51389 (+ (* 6.0 (* l_0_15_11 l_0_15_11)) (* 6.0 (* l_0_15_12 l_0_15_12)))))
 (let ((?x51400 (+ (+ (+ (- (- (- (+ ?x51389 ?x51390) ?x50927) ?x50930) ?x50933) ?x51395) ?x51397) ?x51399)))
 (let ((?x51417 (- (- (- (+ (+ (+ (+ ?x51400 ?x51401) ?x51403) ?x51405) ?x51407) ?x51410) ?x51413) ?x51416)))
 (let ((?x51429 (- (- (- (- ?x51417 ?x51419) ?x51422) (* (* 3.0 l_0_15_53) l_0_15_53)) ?x51428)))
 (let ((?x51450 (+ (+ (+ (+ (- (- (- ?x51429 ?x51431) ?x51434) ?x51437) ?x51440) ?x51443) ?x51446) ?x51449)))
 (= (+ ?x51450 ?x51452) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51311 (* 2.0 l_0_15_90)))
 (let ((?x51564 (* ?x51311 l_0_15_97)))
 (let ((?x51308 (* 2.0 l_0_15_89)))
 (let ((?x51562 (* ?x51308 l_0_15_96)))
 (let ((?x51305 (* 2.0 l_0_15_88)))
 (let ((?x51560 (* ?x51305 l_0_15_95)))
 (let ((?x51558 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x51555 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x51552 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x51549 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x51546 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x51543 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x51540 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x51537 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x51534 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x51528 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51525 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51522 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51519 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51516 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51513 (* ?x51270 l_0_15_181)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51511 (* ?x51267 l_0_15_180)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51509 (* ?x51264 l_0_15_179)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51507 (* ?x51257 l_0_15_160)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51505 (* ?x51254 l_0_15_159)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51503 (* ?x51251 l_0_15_158)))
 (let ((?x51501 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x51498 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51495 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51492 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x51489 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51486 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51483 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x50851 (* 2.0 l_0_15_132)))
 (let ((?x50983 (* ?x50851 l_0_15_144)))
 (let ((?x50848 (* 2.0 l_0_15_131)))
 (let ((?x50981 (* ?x50848 l_0_15_143)))
 (let ((?x28175 (* 2.0 l_0_15_130)))
 (let ((?x50979 (* ?x28175 l_0_15_142)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x51477 (* ?x50408 l_0_15_18)))
 (let ((?x50397 (* 12.0 l_0_15_12)))
 (let ((?x51475 (* ?x50397 l_0_15_17)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51473 (* ?x51240 l_0_15_118)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51471 (* ?x51237 l_0_15_117)))
 (let ((?x50393 (* 12.0 l_0_15_11)))
 (let ((?x51469 (* ?x50393 l_0_15_16)))
 (let ((?x51476 (+ (+ (+ (+ (* (* 2.0 l_0_15_109) l_0_15_116) ?x51469) ?x51471) ?x51473) ?x51475)))
 (let ((?x51490 (+ (+ (+ (- (- (- (+ ?x51476 ?x51477) ?x50979) ?x50981) ?x50983) ?x51483) ?x51486) ?x51489)))
 (let ((?x51508 (- (- (- (+ (+ (+ (+ ?x51490 ?x51492) ?x51495) ?x51498) ?x51501) ?x51503) ?x51505) ?x51507)))
 (let ((?x51526 (- (- (- (- (+ (+ (+ ?x51508 ?x51509) ?x51511) ?x51513) ?x51516) ?x51519) ?x51522) ?x51525)))
 (let ((?x51538 (- (- (- (- ?x51526 ?x51528) (* (* 6.0 l_0_15_53) l_0_15_58)) ?x51534) ?x51537)))
 (let ((?x51559 (+ (+ (+ (+ (+ (- (- ?x51538 ?x51540) ?x51543) ?x51546) ?x51549) ?x51552) ?x51555) ?x51558)))
 (= (- (- (- ?x51559 ?x51560) ?x51562) ?x51564) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51761 (* l_0_15_84 l_0_15_84)))
 (let ((?x51762 (* 3.0 ?x51761)))
 (let ((?x51758 (* l_0_15_83 l_0_15_83)))
 (let ((?x51759 (* 3.0 ?x51758)))
 (let ((?x51755 (* l_0_15_82 l_0_15_82)))
 (let ((?x51756 (* 3.0 ?x51755)))
 (let ((?x51752 (* l_0_15_81 l_0_15_81)))
 (let ((?x51753 (* 3.0 ?x51752)))
 (let ((?x51749 (* l_0_15_80 l_0_15_80)))
 (let ((?x51750 (* 3.0 ?x51749)))
 (let ((?x51746 (* l_0_15_79 l_0_15_79)))
 (let ((?x51747 (* 3.0 ?x51746)))
 (let ((?x51744 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x51741 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x51738 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x51735 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x51732 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x51726 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x51723 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x51720 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x51717 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x51714 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x51711 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x50193 (* l_0_15_21 l_0_15_21)))
 (let ((?x51708 (* 6.0 ?x50193)))
 (let ((?x50191 (* l_0_15_20 l_0_15_20)))
 (let ((?x51706 (* 6.0 ?x50191)))
 (let ((?x50189 (* l_0_15_19 l_0_15_19)))
 (let ((?x51704 (* 6.0 ?x50189)))
 (let ((?x50187 (* l_0_15_18 l_0_15_18)))
 (let ((?x51702 (* 6.0 ?x50187)))
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51700 (* ?x51270 l_0_15_186)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51698 (* ?x51267 l_0_15_185)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51696 (* ?x51264 l_0_15_184)))
 (let ((?x50185 (* l_0_15_17 l_0_15_17)))
 (let ((?x51694 (* 6.0 ?x50185)))
 (let ((?x50181 (* l_0_15_16 l_0_15_16)))
 (let ((?x51692 (* 6.0 ?x50181)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51690 (* ?x51257 l_0_15_165)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51688 (* ?x51254 l_0_15_164)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51686 (* ?x51251 l_0_15_163)))
 (let ((?x51684 (* l_0_15_147 l_0_15_147)))
 (let ((?x51682 (* l_0_15_146 l_0_15_146)))
 (let ((?x51680 (* l_0_15_145 l_0_15_145)))
 (let ((?x51678 (* l_0_15_144 l_0_15_144)))
 (let ((?x51676 (* l_0_15_143 l_0_15_143)))
 (let ((?x51674 (* l_0_15_142 l_0_15_142)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51672 (* ?x51240 l_0_15_123)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51670 (* ?x51237 l_0_15_122)))
 (let ((?x51234 (* 2.0 l_0_15_109)))
 (let ((?x19348 (* ?x51234 l_0_15_121)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x19351 (* ?x30331 l_0_15_90)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x40590 (* ?x30341 l_0_15_89)))
 (let ((?x51671 (+ (+ (- (- (* (* (- 2.0) l_0_15_100) l_0_15_88) ?x40590) ?x19351) ?x19348) ?x51670)))
 (let ((?x51685 (+ (+ (+ (+ (+ (+ (+ ?x51671 ?x51672) ?x51674) ?x51676) ?x51678) ?x51680) ?x51682) ?x51684)))
 (let ((?x51699 (+ (+ (+ (+ (- (- (- ?x51685 ?x51686) ?x51688) ?x51690) ?x51692) ?x51694) ?x51696) ?x51698)))
 (let ((?x51715 (- (- (+ (+ (+ (+ (+ ?x51699 ?x51700) ?x51702) ?x51704) ?x51706) ?x51708) ?x51711) ?x51714)))
 (let ((?x51730 (- (- (- (- (- ?x51715 ?x51717) ?x51720) ?x51723) ?x51726) (* (* 3.0 l_0_15_58) l_0_15_58))))
 (let ((?x51751 (+ (+ (- (- (- (- (- ?x51730 ?x51732) ?x51735) ?x51738) ?x51741) ?x51744) ?x51747) ?x51750)))
 (= (+ (+ (+ (+ ?x51751 ?x51753) ?x51756) ?x51759) ?x51762) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x51892 (* ?x49067 l_0_15_75)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x51890 (* ?x49063 l_0_15_74)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x51888 (* ?x49059 l_0_15_54)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x51886 (* ?x49055 l_0_15_53)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x50431 (* ?x48885 l_0_15_33)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x50423 (* ?x48876 l_0_15_32)))
 (let ((?x49019 (* l_0_15_129 l_0_15_129)))
 (let ((?x49016 (* l_0_15_128 l_0_15_128)))
 (let ((?x50397 (* 12.0 l_0_15_12)))
 (let ((?x50398 (* ?x50397 l_0_15_3)))
 (let ((?x50393 (* 12.0 l_0_15_11)))
 (let ((?x50394 (* ?x50393 l_0_15_2)))
 (let ((?x51873 (- (- (- (+ ?x50394 ?x50398) ?x49016) ?x49019) (* (* 2.0 l_0_15_191) l_0_15_200))))
 (let ((?x51877 (- (- ?x51873 (* (* 2.0 l_0_15_192) l_0_15_201)) (* (* 2.0 l_0_15_212) l_0_15_221))))
 (let ((?x51882 (- (- (- ?x51877 (* (* 2.0 l_0_15_213) l_0_15_222)) ?x50423) (* (* 2.0 l_0_15_233) l_0_15_242))))
 (let ((?x51889 (- (- (- (- ?x51882 (* (* 2.0 l_0_15_234) l_0_15_243)) ?x50431) ?x51886) ?x51888)))
 (= (+ (+ ?x51889 ?x51890) ?x51892) 0.0))))))))))))))))))))))))
(assert
 (let ((?x50807 (* l_0_15_87 l_0_15_87)))
 (let ((?x50805 (* l_0_15_86 l_0_15_86)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x51967 (* ?x49067 l_0_15_80)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x51965 (* ?x49063 l_0_15_79)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x51963 (* ?x49059 l_0_15_59)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x51961 (* ?x49055 l_0_15_58)))
 (let ((?x48885 (* 12.0 l_0_15_24)))
 (let ((?x50590 (* ?x48885 l_0_15_38)))
 (let ((?x48876 (* 12.0 l_0_15_23)))
 (let ((?x50582 (* ?x48876 l_0_15_37)))
 (let ((?x50778 (* l_0_15_171 l_0_15_171)))
 (let ((?x50776 (* l_0_15_170 l_0_15_170)))
 (let ((?x50556 (* 12.0 l_0_15_17)))
 (let ((?x50557 (* ?x50556 l_0_15_3)))
 (let ((?x50551 (* 12.0 l_0_15_16)))
 (let ((?x50552 (* ?x50551 l_0_15_2)))
 (let ((?x50774 (* l_0_15_150 l_0_15_150)))
 (let ((?x50772 (* l_0_15_149 l_0_15_149)))
 (let ((?x51941 (- (+ (* l_0_15_107 l_0_15_107) (* l_0_15_108 l_0_15_108)) ?x50772)))
 (let ((?x51948 (- (+ (+ (+ (+ (- ?x51941 ?x50774) ?x50552) ?x50557) ?x50776) ?x50778) (* (* 2.0 l_0_15_191) l_0_15_205))))
 (let ((?x51952 (- (- ?x51948 (* (* 2.0 l_0_15_192) l_0_15_206)) (* (* 2.0 l_0_15_212) l_0_15_226))))
 (let ((?x51957 (- (- (- ?x51952 (* (* 2.0 l_0_15_213) l_0_15_227)) ?x50582) (* (* 2.0 l_0_15_233) l_0_15_247))))
 (let ((?x51964 (- (- (- (- ?x51957 (* (* 2.0 l_0_15_234) l_0_15_248)) ?x50590) ?x51961) ?x51963)))
 (= (- (- (+ (+ ?x51964 ?x51965) ?x51967) ?x50805) ?x50807) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x52078 (* 2.0 l_0_15_73)))
 (let ((?x52079 (* ?x52078 l_0_15_77)))
 (let ((?x52075 (* 2.0 l_0_15_72)))
 (let ((?x52076 (* ?x52075 l_0_15_76)))
 (let ((?x52072 (* 2.0 l_0_15_71)))
 (let ((?x52073 (* ?x52072 l_0_15_75)))
 (let ((?x52069 (* 2.0 l_0_15_70)))
 (let ((?x52070 (* ?x52069 l_0_15_74)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x51892 (* ?x49067 l_0_15_75)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x51890 (* ?x49063 l_0_15_74)))
 (let ((?x52064 (* 2.0 l_0_15_52)))
 (let ((?x52065 (* ?x52064 l_0_15_56)))
 (let ((?x52061 (* 2.0 l_0_15_51)))
 (let ((?x52062 (* ?x52061 l_0_15_55)))
 (let ((?x52058 (* 2.0 l_0_15_50)))
 (let ((?x52059 (* ?x52058 l_0_15_54)))
 (let ((?x52055 (* 2.0 l_0_15_49)))
 (let ((?x52056 (* ?x52055 l_0_15_53)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x51888 (* ?x49059 l_0_15_54)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x51886 (* ?x49055 l_0_15_53)))
 (let ((?x51154 (* 12.0 l_0_15_31)))
 (let ((?x51155 (* ?x51154 l_0_15_35)))
 (let ((?x51151 (* 12.0 l_0_15_30)))
 (let ((?x51152 (* ?x51151 l_0_15_34)))
 (let ((?x51148 (* 12.0 l_0_15_29)))
 (let ((?x51149 (* ?x51148 l_0_15_33)))
 (let ((?x51145 (* 12.0 l_0_15_28)))
 (let ((?x51146 (* ?x51145 l_0_15_32)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x51128 (* ?x50408 l_0_15_9)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50232 (* ?x48858 l_0_15_134)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50231 (* ?x48856 l_0_15_133)))
 (let ((?x51125 (+ (* (* 12.0 l_0_15_10) l_0_15_14) (* (* 12.0 l_0_15_11) l_0_15_7))))
 (let ((?x51127 (+ ?x51125 (* (* 12.0 l_0_15_12) l_0_15_8))))
 (let ((?x52015 (- (+ (- (- ?x51127 ?x50231) ?x50232) ?x51128) (* (* 2.0 l_0_15_196) l_0_15_200))))
 (let ((?x52021 (- (- ?x52015 (* (* 2.0 l_0_15_197) l_0_15_201)) (* (* 2.0 l_0_15_198) l_0_15_202))))
 (let ((?x52027 (- (- ?x52021 (* (* 2.0 l_0_15_199) l_0_15_203)) (* (* 2.0 l_0_15_217) l_0_15_221))))
 (let ((?x52033 (- (- ?x52027 (* (* 2.0 l_0_15_218) l_0_15_222)) (* (* 2.0 l_0_15_219) l_0_15_223))))
 (let ((?x52039 (- (- ?x52033 (* (* 2.0 l_0_15_220) l_0_15_224)) (* (* 2.0 l_0_15_238) l_0_15_242))))
 (let ((?x52045 (- (- ?x52039 (* (* 2.0 l_0_15_239) l_0_15_243)) (* (* 2.0 l_0_15_240) l_0_15_244))))
 (let ((?x52051 (- (- (- (- ?x52045 (* (* 2.0 l_0_15_241) l_0_15_245)) ?x51146) ?x51149) ?x51152)))
 (let ((?x52066 (- (- (- (- (+ (+ (- ?x52051 ?x51155) ?x51886) ?x51888) ?x52056) ?x52059) ?x52062) ?x52065)))
 (= (+ (+ (+ (+ (- (- ?x52066 ?x51890) ?x51892) ?x52070) ?x52073) ?x52076) ?x52079) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x52220 (* ?x50621 l_0_15_92)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x52218 (* ?x50618 l_0_15_91)))
 (let ((?x52078 (* 2.0 l_0_15_73)))
 (let ((?x52216 (* ?x52078 l_0_15_82)))
 (let ((?x52075 (* 2.0 l_0_15_72)))
 (let ((?x52214 (* ?x52075 l_0_15_81)))
 (let ((?x52072 (* 2.0 l_0_15_71)))
 (let ((?x52212 (* ?x52072 l_0_15_80)))
 (let ((?x52069 (* 2.0 l_0_15_70)))
 (let ((?x52210 (* ?x52069 l_0_15_79)))
 (let ((?x49067 (* 2.0 l_0_15_66)))
 (let ((?x51967 (* ?x49067 l_0_15_80)))
 (let ((?x49063 (* 2.0 l_0_15_65)))
 (let ((?x51965 (* ?x49063 l_0_15_79)))
 (let ((?x52064 (* 2.0 l_0_15_52)))
 (let ((?x52206 (* ?x52064 l_0_15_61)))
 (let ((?x52061 (* 2.0 l_0_15_51)))
 (let ((?x52204 (* ?x52061 l_0_15_60)))
 (let ((?x52058 (* 2.0 l_0_15_50)))
 (let ((?x52202 (* ?x52058 l_0_15_59)))
 (let ((?x52055 (* 2.0 l_0_15_49)))
 (let ((?x52200 (* ?x52055 l_0_15_58)))
 (let ((?x49059 (* 2.0 l_0_15_45)))
 (let ((?x51963 (* ?x49059 l_0_15_59)))
 (let ((?x49055 (* 2.0 l_0_15_44)))
 (let ((?x51961 (* ?x49055 l_0_15_58)))
 (let ((?x51154 (* 12.0 l_0_15_31)))
 (let ((?x51281 (* ?x51154 l_0_15_40)))
 (let ((?x51151 (* 12.0 l_0_15_30)))
 (let ((?x51279 (* ?x51151 l_0_15_39)))
 (let ((?x51148 (* 12.0 l_0_15_29)))
 (let ((?x51277 (* ?x51148 l_0_15_38)))
 (let ((?x51145 (* 12.0 l_0_15_28)))
 (let ((?x51275 (* ?x51145 l_0_15_37)))
 (let ((?x50567 (* 12.0 l_0_15_18)))
 (let ((?x51273 (* ?x50567 l_0_15_9)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x52167 (* ?x50564 l_0_15_176)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x52165 (* ?x50561 l_0_15_175)))
 (let ((?x50556 (* 12.0 l_0_15_17)))
 (let ((?x51262 (* ?x50556 l_0_15_8)))
 (let ((?x50551 (* 12.0 l_0_15_16)))
 (let ((?x51260 (* ?x50551 l_0_15_7)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x52161 (* ?x50548 l_0_15_155)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x52149 (* ?x50545 l_0_15_154)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x52147 (* ?x50522 l_0_15_113)))
 (let ((?x18701 (* 12.0 l_0_15_10)))
 (let ((?x51233 (* ?x18701 l_0_15_19)))
 (let ((?x52162 (- (- (+ (+ ?x51233 (* (* 2.0 l_0_15_107) l_0_15_112)) ?x52147) ?x52149) ?x52161)))
 (let ((?x52171 (- (+ (+ (+ (+ (+ ?x52162 ?x51260) ?x51262) ?x52165) ?x52167) ?x51273) (* (* 2.0 l_0_15_196) l_0_15_205))))
 (let ((?x52175 (- (- ?x52171 (* (* 2.0 l_0_15_197) l_0_15_206)) (* (* 2.0 l_0_15_198) l_0_15_207))))
 (let ((?x52179 (- (- ?x52175 (* (* 2.0 l_0_15_199) l_0_15_208)) (* (* 2.0 l_0_15_217) l_0_15_226))))
 (let ((?x52183 (- (- ?x52179 (* (* 2.0 l_0_15_218) l_0_15_227)) (* (* 2.0 l_0_15_219) l_0_15_228))))
 (let ((?x52187 (- (- ?x52183 (* (* 2.0 l_0_15_220) l_0_15_229)) (* (* 2.0 l_0_15_238) l_0_15_247))))
 (let ((?x52191 (- (- ?x52187 (* (* 2.0 l_0_15_239) l_0_15_248)) (* (* 2.0 l_0_15_240) l_0_15_249))))
 (let ((?x52196 (- (- (- (- ?x52191 (* (* 2.0 l_0_15_241) l_0_15_250)) ?x51275) ?x51277) ?x51279)))
 (let ((?x52207 (- (- (- (- (+ (+ (- ?x52196 ?x51281) ?x51961) ?x51963) ?x52200) ?x52202) ?x52204) ?x52206)))
 (let ((?x52219 (- (+ (+ (+ (+ (- (- ?x52207 ?x51965) ?x51967) ?x52210) ?x52212) ?x52214) ?x52216) ?x52218)))
 (= (- ?x52219 ?x52220) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51422 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x51419 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x51416 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x51413 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x51410 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x52329 (* l_0_15_246 l_0_15_246)))
 (let ((?x52327 (* l_0_15_245 l_0_15_245)))
 (let ((?x52325 (* l_0_15_244 l_0_15_244)))
 (let ((?x52323 (* l_0_15_243 l_0_15_243)))
 (let ((?x52321 (* l_0_15_242 l_0_15_242)))
 (let ((?x52319 (* l_0_15_225 l_0_15_225)))
 (let ((?x52317 (* l_0_15_224 l_0_15_224)))
 (let ((?x52315 (* l_0_15_223 l_0_15_223)))
 (let ((?x52313 (* l_0_15_222 l_0_15_222)))
 (let ((?x52311 (* l_0_15_221 l_0_15_221)))
 (let ((?x52309 (* l_0_15_204 l_0_15_204)))
 (let ((?x52307 (* l_0_15_203 l_0_15_203)))
 (let ((?x52305 (* l_0_15_202 l_0_15_202)))
 (let ((?x52303 (* l_0_15_201 l_0_15_201)))
 (let ((?x52301 (* l_0_15_200 l_0_15_200)))
 (let ((?x50073 (* l_0_15_15 l_0_15_15)))
 (let ((?x51407 (* 6.0 ?x50073)))
 (let ((?x50071 (* l_0_15_14 l_0_15_14)))
 (let ((?x51401 (* 6.0 ?x50071)))
 (let ((?x50069 (* l_0_15_13 l_0_15_13)))
 (let ((?x51390 (* 6.0 ?x50069)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50406 (* ?x48858 l_0_15_138)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50403 (* ?x48856 l_0_15_137)))
 (let ((?x51389 (+ (* 6.0 (* l_0_15_11 l_0_15_11)) (* 6.0 (* l_0_15_12 l_0_15_12)))))
 (let ((?x52304 (- (- (+ (+ (+ (- (- ?x51389 ?x50403) ?x50406) ?x51390) ?x51401) ?x51407) ?x52301) ?x52303)))
 (let ((?x52318 (- (- (- (- (- (- (- ?x52304 ?x52305) ?x52307) ?x52309) ?x52311) ?x52313) ?x52315) ?x52317)))
 (let ((?x52331 (- (- (- (- (- (- (- ?x52318 ?x52319) ?x52321) ?x52323) ?x52325) ?x52327) ?x52329) ?x51410)))
 (let ((?x52338 (- (- (- (- (- ?x52331 ?x51413) ?x51416) ?x51419) ?x51422) (* (* 1.0 l_0_15_53) l_0_15_53))))
 (let ((?x52344 (- (- ?x52338 (* (* 1.0 l_0_15_54) l_0_15_54)) (* (* 1.0 l_0_15_55) l_0_15_55))))
 (let ((?x52350 (- (- ?x52344 (* (* 1.0 l_0_15_56) l_0_15_56)) (* (* 1.0 l_0_15_57) l_0_15_57))))
 (let ((?x52354 (+ (+ ?x52350 (* 1.0 (* l_0_15_74 l_0_15_74))) (* 1.0 (* l_0_15_75 l_0_15_75)))))
 (let ((?x52358 (+ (+ ?x52354 (* 1.0 (* l_0_15_76 l_0_15_76))) (* 1.0 (* l_0_15_77 l_0_15_77)))))
 (= (+ ?x52358 (* 1.0 (* l_0_15_78 l_0_15_78))) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x52459 (* ?x50621 l_0_15_96)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x52457 (* ?x50618 l_0_15_95)))
 (let ((?x52455 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x52452 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x52449 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x52446 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x52443 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x52440 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x52437 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x52434 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x52431 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x52428 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x51528 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51525 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51522 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51519 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51516 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x40968 (* ?x50564 l_0_15_180)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x40966 (* ?x50561 l_0_15_179)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x20017 (* ?x50548 l_0_15_159)))
 (let ((?x51501 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x41042 (* ?x50545 l_0_15_158)))
 (let ((?x51492 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x50408 (* 12.0 l_0_15_13)))
 (let ((?x51477 (* ?x50408 l_0_15_18)))
 (let ((?x48858 (* 2.0 l_0_15_129)))
 (let ((?x50543 (* ?x48858 l_0_15_143)))
 (let ((?x48856 (* 2.0 l_0_15_128)))
 (let ((?x50527 (* ?x48856 l_0_15_142)))
 (let ((?x50397 (* 12.0 l_0_15_12)))
 (let ((?x51475 (* ?x50397 l_0_15_17)))
 (let ((?x50393 (* 12.0 l_0_15_11)))
 (let ((?x51469 (* ?x50393 l_0_15_16)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x41062 (* ?x50522 l_0_15_117)))
 (let ((?x41044 (- (+ (+ (+ (* (* 2.0 l_0_15_107) l_0_15_116) ?x41062) ?x51469) ?x51475) ?x50527)))
 (let ((?x40967 (+ (- (+ (- (+ (+ (- ?x41044 ?x50543) ?x51477) ?x51492) ?x41042) ?x51501) ?x20017) ?x40966)))
 (let ((?x52382 (- (- (+ ?x40967 ?x40968) (* (* 2.0 l_0_15_200) l_0_15_205)) (* (* 2.0 l_0_15_201) l_0_15_206))))
 (let ((?x52388 (- (- ?x52382 (* (* 2.0 l_0_15_202) l_0_15_207)) (* (* 2.0 l_0_15_203) l_0_15_208))))
 (let ((?x52394 (- (- ?x52388 (* (* 2.0 l_0_15_204) l_0_15_209)) (* (* 2.0 l_0_15_221) l_0_15_226))))
 (let ((?x52400 (- (- ?x52394 (* (* 2.0 l_0_15_222) l_0_15_227)) (* (* 2.0 l_0_15_223) l_0_15_228))))
 (let ((?x52406 (- (- ?x52400 (* (* 2.0 l_0_15_224) l_0_15_229)) (* (* 2.0 l_0_15_225) l_0_15_230))))
 (let ((?x52412 (- (- ?x52406 (* (* 2.0 l_0_15_242) l_0_15_247)) (* (* 2.0 l_0_15_243) l_0_15_248))))
 (let ((?x52418 (- (- ?x52412 (* (* 2.0 l_0_15_244) l_0_15_249)) (* (* 2.0 l_0_15_245) l_0_15_250))))
 (let ((?x52424 (- (- (- (- ?x52418 (* (* 2.0 l_0_15_246) l_0_15_251)) ?x51516) ?x51519) ?x51522)))
 (let ((?x52441 (- (- (- (- (- (- (- ?x52424 ?x51525) ?x51528) ?x52428) ?x52431) ?x52434) ?x52437) ?x52440)))
 (let ((?x52460 (- (- (+ (+ (+ (+ (+ ?x52441 ?x52443) ?x52446) ?x52449) ?x52452) ?x52455) ?x52457) ?x52459)))
 (= ?x52460 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51726 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x51723 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x51720 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x51717 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x51714 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x51711 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x52570 (* l_0_15_252 l_0_15_252)))
 (let ((?x52568 (* l_0_15_251 l_0_15_251)))
 (let ((?x52566 (* l_0_15_250 l_0_15_250)))
 (let ((?x52564 (* l_0_15_249 l_0_15_249)))
 (let ((?x52562 (* l_0_15_248 l_0_15_248)))
 (let ((?x52560 (* l_0_15_247 l_0_15_247)))
 (let ((?x52558 (* l_0_15_231 l_0_15_231)))
 (let ((?x52556 (* l_0_15_230 l_0_15_230)))
 (let ((?x52554 (* l_0_15_229 l_0_15_229)))
 (let ((?x52552 (* l_0_15_228 l_0_15_228)))
 (let ((?x52550 (* l_0_15_227 l_0_15_227)))
 (let ((?x52548 (* l_0_15_226 l_0_15_226)))
 (let ((?x52546 (* l_0_15_210 l_0_15_210)))
 (let ((?x50193 (* l_0_15_21 l_0_15_21)))
 (let ((?x51708 (* 6.0 ?x50193)))
 (let ((?x52543 (* l_0_15_209 l_0_15_209)))
 (let ((?x52541 (* l_0_15_208 l_0_15_208)))
 (let ((?x52539 (* l_0_15_207 l_0_15_207)))
 (let ((?x52537 (* l_0_15_206 l_0_15_206)))
 (let ((?x52535 (* l_0_15_205 l_0_15_205)))
 (let ((?x50191 (* l_0_15_20 l_0_15_20)))
 (let ((?x51706 (* 6.0 ?x50191)))
 (let ((?x50189 (* l_0_15_19 l_0_15_19)))
 (let ((?x51704 (* 6.0 ?x50189)))
 (let ((?x50187 (* l_0_15_18 l_0_15_18)))
 (let ((?x51702 (* 6.0 ?x50187)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x52530 (* ?x50564 l_0_15_185)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x52528 (* ?x50561 l_0_15_184)))
 (let ((?x50185 (* l_0_15_17 l_0_15_17)))
 (let ((?x51694 (* 6.0 ?x50185)))
 (let ((?x50181 (* l_0_15_16 l_0_15_16)))
 (let ((?x51692 (* 6.0 ?x50181)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x52524 (* ?x50548 l_0_15_164)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x52522 (* ?x50545 l_0_15_163)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x52520 (* ?x50522 l_0_15_122)))
 (let ((?x15194 (* 2.0 l_0_15_107)))
 (let ((?x52518 (* ?x15194 l_0_15_121)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x41417 (* ?x30341 l_0_15_87)))
 (let ((?x52523 (- (+ (+ (- (* (* (- 2.0) l_0_15_100) l_0_15_86) ?x41417) ?x52518) ?x52520) ?x52522)))
 (let ((?x52533 (+ (+ (+ (+ (+ (+ (- ?x52523 ?x52524) ?x51692) ?x51694) ?x52528) ?x52530) ?x51702) ?x51704)))
 (let ((?x52545 (+ (- (- (- (- (- (+ ?x52533 ?x51706) ?x52535) ?x52537) ?x52539) ?x52541) ?x52543) ?x51708)))
 (let ((?x52559 (- (- (- (- (- (- (- ?x52545 ?x52546) ?x52548) ?x52550) ?x52552) ?x52554) ?x52556) ?x52558)))
 (let ((?x52572 (- (- (- (- (- (- (- ?x52559 ?x52560) ?x52562) ?x52564) ?x52566) ?x52568) ?x52570) ?x51711)))
 (let ((?x52580 (- (- (- (- (- (- ?x52572 ?x51714) ?x51717) ?x51720) ?x51723) ?x51726) (* (* 1.0 l_0_15_58) l_0_15_58))))
 (let ((?x52586 (- (- ?x52580 (* (* 1.0 l_0_15_59) l_0_15_59)) (* (* 1.0 l_0_15_60) l_0_15_60))))
 (let ((?x52592 (- (- ?x52586 (* (* 1.0 l_0_15_61) l_0_15_61)) (* (* 1.0 l_0_15_62) l_0_15_62))))
 (let ((?x52597 (+ (- ?x52592 (* (* 1.0 l_0_15_63) l_0_15_63)) (* 1.0 (* l_0_15_79 l_0_15_79)))))
 (let ((?x52601 (+ (+ ?x52597 (* 1.0 (* l_0_15_80 l_0_15_80))) (* 1.0 (* l_0_15_81 l_0_15_81)))))
 (let ((?x52605 (+ (+ ?x52601 (* 1.0 (* l_0_15_82 l_0_15_82))) (* 1.0 (* l_0_15_83 l_0_15_83)))))
 (= (+ ?x52605 (* 1.0 (* l_0_15_84 l_0_15_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49291 (* l_0_15_64 l_0_15_64)))
 (let ((?x49517 (* 3.0 ?x49291)))
 (= (+ (* (* (- 3.0) l_0_15_43) l_0_15_43) ?x49517) 0.0))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x49731 (* ?x49730 l_0_15_86)))
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x17037 (* ?x49604 l_0_15_67)))
 (let ((?x49599 (* 6.0 l_0_15_43)))
 (let ((?x17014 (* ?x49599 l_0_15_46)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x49709 (* ?x49708 l_0_15_170)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x49703 (* ?x49702 l_0_15_149)))
 (let ((?x41512 (+ (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_107) ?x49703) ?x49709) ?x17014) ?x17037)))
 (= (+ ?x41512 ?x49731) 0.0)))))))))))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49810 (* ?x49604 l_0_15_70)))
 (= (+ (* (* (- 6.0) l_0_15_43) l_0_15_49) ?x49810) 0.0))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49860 (* ?x49604 l_0_15_74)))
 (= (+ (* (* (- 6.0) l_0_15_43) l_0_15_53) ?x49860) 0.0))))
(assert
 (let ((?x49604 (* 6.0 l_0_15_64)))
 (let ((?x49909 (* ?x49604 l_0_15_79)))
 (= (+ (* (* (- 6.0) l_0_15_43) l_0_15_58) ?x49909) 0.0))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x50622 (* ?x50621 l_0_15_89)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x50619 (* ?x50618 l_0_15_88)))
 (let ((?x48948 (* l_0_15_69 l_0_15_69)))
 (let ((?x50803 (* 3.0 ?x48948)))
 (let ((?x48945 (* l_0_15_68 l_0_15_68)))
 (let ((?x50801 (* 3.0 ?x48945)))
 (let ((?x48942 (* l_0_15_67 l_0_15_67)))
 (let ((?x50799 (* 3.0 ?x48942)))
 (let ((?x50793 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x50790 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x50787 (* (* 3.0 l_0_15_46) l_0_15_46)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x50565 (* ?x50564 l_0_15_173)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x50562 (* ?x50561 l_0_15_172)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x50549 (* ?x50548 l_0_15_152)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x50546 (* ?x50545 l_0_15_151)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x50524 (* ?x50522 l_0_15_110)))
 (let ((?x52668 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_109) ?x50524) ?x50546) ?x50549) ?x50562)))
 (let ((?x52675 (+ (+ (+ (- (- (- (- ?x52668 ?x50565) ?x50787) ?x50790) ?x50793) ?x50799) ?x50801) ?x50803)))
 (= (+ (+ ?x52675 ?x50619) ?x50622) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x52220 (* ?x50621 l_0_15_92)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x52218 (* ?x50618 l_0_15_91)))
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x50885 (* ?x50884 l_0_15_72)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x50881 (* ?x50880 l_0_15_71)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x50877 (* ?x50876 l_0_15_70)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x50869 (* ?x50868 l_0_15_51)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x50865 (* ?x50864 l_0_15_50)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x50861 (* ?x50860 l_0_15_49)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x52167 (* ?x50564 l_0_15_176)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x52165 (* ?x50561 l_0_15_175)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x52161 (* ?x50548 l_0_15_155)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x52149 (* ?x50545 l_0_15_154)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x52147 (* ?x50522 l_0_15_113)))
 (let ((?x31078 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_112) ?x52147) ?x52149) ?x52161) ?x52165)))
 (let ((?x41656 (+ (+ (+ (- (- (- (- ?x31078 ?x52167) ?x50861) ?x50865) ?x50869) ?x50877) ?x50881) ?x50885)))
 (= (+ (+ ?x41656 ?x52218) ?x52220) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x50621 (* 2.0 l_0_15_87)))
 (let ((?x52459 (* ?x50621 l_0_15_96)))
 (let ((?x50618 (* 2.0 l_0_15_86)))
 (let ((?x52457 (* ?x50618 l_0_15_95)))
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x50953 (* ?x50884 l_0_15_76)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x50951 (* ?x50880 l_0_15_75)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x50949 (* ?x50876 l_0_15_74)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x50945 (* ?x50868 l_0_15_55)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x50943 (* ?x50864 l_0_15_54)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x50941 (* ?x50860 l_0_15_53)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x40968 (* ?x50564 l_0_15_180)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x40966 (* ?x50561 l_0_15_179)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x20017 (* ?x50548 l_0_15_159)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x41042 (* ?x50545 l_0_15_158)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x41062 (* ?x50522 l_0_15_117)))
 (let ((?x31096 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_116) ?x41062) ?x41042) ?x20017) ?x40966)))
 (let ((?x52681 (+ (+ (+ (- (- (- (- ?x31096 ?x40968) ?x50941) ?x50943) ?x50945) ?x50949) ?x50951) ?x50953)))
 (= (+ (+ ?x52681 ?x52457) ?x52459) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x50884 (* 6.0 l_0_15_69)))
 (let ((?x51017 (* ?x50884 l_0_15_81)))
 (let ((?x50880 (* 6.0 l_0_15_68)))
 (let ((?x51015 (* ?x50880 l_0_15_80)))
 (let ((?x50876 (* 6.0 l_0_15_67)))
 (let ((?x51013 (* ?x50876 l_0_15_79)))
 (let ((?x50868 (* 6.0 l_0_15_48)))
 (let ((?x51009 (* ?x50868 l_0_15_60)))
 (let ((?x50864 (* 6.0 l_0_15_47)))
 (let ((?x51007 (* ?x50864 l_0_15_59)))
 (let ((?x50860 (* 6.0 l_0_15_46)))
 (let ((?x51005 (* ?x50860 l_0_15_58)))
 (let ((?x50564 (* 2.0 l_0_15_171)))
 (let ((?x52530 (* ?x50564 l_0_15_185)))
 (let ((?x50561 (* 2.0 l_0_15_170)))
 (let ((?x52528 (* ?x50561 l_0_15_184)))
 (let ((?x50548 (* 2.0 l_0_15_150)))
 (let ((?x52524 (* ?x50548 l_0_15_164)))
 (let ((?x50545 (* 2.0 l_0_15_149)))
 (let ((?x52522 (* ?x50545 l_0_15_163)))
 (let ((?x50522 (* 2.0 l_0_15_108)))
 (let ((?x52520 (* ?x50522 l_0_15_122)))
 (let ((?x15194 (* 2.0 l_0_15_107)))
 (let ((?x52518 (* ?x15194 l_0_15_121)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x41417 (* ?x30341 l_0_15_87)))
 (let ((?x41812 (+ (- (- (+ (* (* 2.0 l_0_15_100) l_0_15_86) ?x41417) ?x52518) ?x52520) ?x52522)))
 (let ((?x41741 (+ (- (- (- (- (- (+ ?x41812 ?x52524) ?x52528) ?x52530) ?x51005) ?x51007) ?x51009) ?x51013)))
 (= (+ (+ ?x41741 ?x51015) ?x51017) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49439 (* l_0_15_73 l_0_15_73)))
 (let ((?x51097 (* 3.0 ?x49439)))
 (let ((?x49436 (* l_0_15_72 l_0_15_72)))
 (let ((?x51095 (* 3.0 ?x49436)))
 (let ((?x49433 (* l_0_15_71 l_0_15_71)))
 (let ((?x51093 (* 3.0 ?x49433)))
 (let ((?x49430 (* l_0_15_70 l_0_15_70)))
 (let ((?x51091 (* 3.0 ?x49430)))
 (let ((?x51085 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x51082 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x51079 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x19778 (+ (- (- (- (* (* (- 3.0) l_0_15_49) l_0_15_49) ?x51079) ?x51082) ?x51085) ?x51091)))
 (= (+ (+ (+ ?x19778 ?x51093) ?x51095) ?x51097) 0.0))))))))))))))
(assert
 (let ((?x51184 (* 6.0 l_0_15_73)))
 (let ((?x51185 (* ?x51184 l_0_15_77)))
 (let ((?x51181 (* 6.0 l_0_15_72)))
 (let ((?x51182 (* ?x51181 l_0_15_76)))
 (let ((?x51178 (* 6.0 l_0_15_71)))
 (let ((?x51179 (* ?x51178 l_0_15_75)))
 (let ((?x51175 (* 6.0 l_0_15_70)))
 (let ((?x51176 (* ?x51175 l_0_15_74)))
 (let ((?x51169 (* 6.0 l_0_15_52)))
 (let ((?x51170 (* ?x51169 l_0_15_56)))
 (let ((?x51166 (* 6.0 l_0_15_51)))
 (let ((?x51167 (* ?x51166 l_0_15_55)))
 (let ((?x51163 (* 6.0 l_0_15_50)))
 (let ((?x51164 (* ?x51163 l_0_15_54)))
 (let ((?x52692 (+ (- (- (- (* (* (- 6.0) l_0_15_49) l_0_15_53) ?x51164) ?x51167) ?x51170) ?x51176)))
 (= (+ (+ (+ ?x52692 ?x51179) ?x51182) ?x51185) 0.0)))))))))))))))))
(assert
 (let ((?x51184 (* 6.0 l_0_15_73)))
 (let ((?x51303 (* ?x51184 l_0_15_82)))
 (let ((?x51181 (* 6.0 l_0_15_72)))
 (let ((?x51301 (* ?x51181 l_0_15_81)))
 (let ((?x51178 (* 6.0 l_0_15_71)))
 (let ((?x51299 (* ?x51178 l_0_15_80)))
 (let ((?x51175 (* 6.0 l_0_15_70)))
 (let ((?x51297 (* ?x51175 l_0_15_79)))
 (let ((?x51169 (* 6.0 l_0_15_52)))
 (let ((?x51292 (* ?x51169 l_0_15_61)))
 (let ((?x51166 (* 6.0 l_0_15_51)))
 (let ((?x51290 (* ?x51166 l_0_15_60)))
 (let ((?x51163 (* 6.0 l_0_15_50)))
 (let ((?x51288 (* ?x51163 l_0_15_59)))
 (let ((?x52709 (+ (- (- (- (* (* (- 6.0) l_0_15_49) l_0_15_58) ?x51288) ?x51290) ?x51292) ?x51297)))
 (= (+ (+ (+ ?x52709 ?x51299) ?x51301) ?x51303) 0.0)))))))))))))))))
(assert
 (let ((?x51451 (* l_0_15_78 l_0_15_78)))
 (let ((?x51452 (* 3.0 ?x51451)))
 (let ((?x51448 (* l_0_15_77 l_0_15_77)))
 (let ((?x51449 (* 3.0 ?x51448)))
 (let ((?x51445 (* l_0_15_76 l_0_15_76)))
 (let ((?x51446 (* 3.0 ?x51445)))
 (let ((?x51442 (* l_0_15_75 l_0_15_75)))
 (let ((?x51443 (* 3.0 ?x51442)))
 (let ((?x51439 (* l_0_15_74 l_0_15_74)))
 (let ((?x51440 (* 3.0 ?x51439)))
 (let ((?x51437 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x51434 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x51431 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x51428 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x52716 (- (- (- (- (* (* (- 3.0) l_0_15_53) l_0_15_53) ?x51428) ?x51431) ?x51434) ?x51437)))
 (= (+ (+ (+ (+ (+ ?x52716 ?x51440) ?x51443) ?x51446) ?x51449) ?x51452) 0.0)))))))))))))))))
(assert
 (let ((?x51558 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x51555 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x51552 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x51549 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x51546 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x51543 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x51540 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x51537 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x51534 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x52728 (- (- (- (- (* (* (- 6.0) l_0_15_53) l_0_15_58) ?x51534) ?x51537) ?x51540) ?x51543)))
 (= (+ (+ (+ (+ (+ ?x52728 ?x51546) ?x51549) ?x51552) ?x51555) ?x51558) 0.0))))))))))))
(assert
 (let ((?x51761 (* l_0_15_84 l_0_15_84)))
 (let ((?x51762 (* 3.0 ?x51761)))
 (let ((?x51758 (* l_0_15_83 l_0_15_83)))
 (let ((?x51759 (* 3.0 ?x51758)))
 (let ((?x51755 (* l_0_15_82 l_0_15_82)))
 (let ((?x51756 (* 3.0 ?x51755)))
 (let ((?x51752 (* l_0_15_81 l_0_15_81)))
 (let ((?x51753 (* 3.0 ?x51752)))
 (let ((?x51749 (* l_0_15_80 l_0_15_80)))
 (let ((?x51750 (* 3.0 ?x51749)))
 (let ((?x51746 (* l_0_15_79 l_0_15_79)))
 (let ((?x51747 (* 3.0 ?x51746)))
 (let ((?x51744 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x51741 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x51738 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x51735 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x51732 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x42011 (- (- (- (- (* (* (- 3.0) l_0_15_58) l_0_15_58) ?x51732) ?x51735) ?x51738) ?x51741)))
 (let ((?x52742 (+ (+ (+ (+ (+ (+ (- ?x42011 ?x51744) ?x51747) ?x51750) ?x51753) ?x51756) ?x51759) ?x51762)))
 (= ?x52742 0.0)))))))))))))))))))))
(assert
 (let ((?x49439 (* l_0_15_73 l_0_15_73)))
 (let ((?x49436 (* l_0_15_72 l_0_15_72)))
 (let ((?x49433 (* l_0_15_71 l_0_15_71)))
 (let ((?x49430 (* l_0_15_70 l_0_15_70)))
 (let ((?x39438 (* l_0_15_52 l_0_15_52)))
 (let ((?x49483 (* l_0_15_51 l_0_15_51)))
 (let ((?x42087 (+ (+ (+ (* l_0_15_49 l_0_15_49) (* l_0_15_50 l_0_15_50)) ?x49483) ?x39438)))
 (= (- (- (- (- ?x42087 ?x49430) ?x49433) ?x49436) ?x49439) 0.0)))))))))
(assert
 (let ((?x52078 (* 2.0 l_0_15_73)))
 (let ((?x52079 (* ?x52078 l_0_15_77)))
 (let ((?x52075 (* 2.0 l_0_15_72)))
 (let ((?x52076 (* ?x52075 l_0_15_76)))
 (let ((?x52072 (* 2.0 l_0_15_71)))
 (let ((?x52073 (* ?x52072 l_0_15_75)))
 (let ((?x52069 (* 2.0 l_0_15_70)))
 (let ((?x52070 (* ?x52069 l_0_15_74)))
 (let ((?x52064 (* 2.0 l_0_15_52)))
 (let ((?x52065 (* ?x52064 l_0_15_56)))
 (let ((?x52061 (* 2.0 l_0_15_51)))
 (let ((?x52062 (* ?x52061 l_0_15_55)))
 (let ((?x52058 (* 2.0 l_0_15_50)))
 (let ((?x52059 (* ?x52058 l_0_15_54)))
 (let ((?x52055 (* 2.0 l_0_15_49)))
 (let ((?x52056 (* ?x52055 l_0_15_53)))
 (let ((?x51066 (* l_0_15_136 l_0_15_136)))
 (let ((?x51064 (* l_0_15_135 l_0_15_135)))
 (let ((?x42094 (- (- (* (- l_0_15_133) l_0_15_133) (* l_0_15_134 l_0_15_134)) ?x51064)))
 (let ((?x52762 (- (- (+ (+ (+ (+ (- ?x42094 ?x51066) ?x52056) ?x52059) ?x52062) ?x52065) ?x52070) ?x52073)))
 (= (- (- ?x52762 ?x52076) ?x52079) 0.0))))))))))))))))))))))
(assert
 (let ((?x52808 (* l_0_15_94 l_0_15_94)))
 (let ((?x52806 (* l_0_15_93 l_0_15_93)))
 (let ((?x52804 (* l_0_15_92 l_0_15_92)))
 (let ((?x52802 (* l_0_15_91 l_0_15_91)))
 (let ((?x52078 (* 2.0 l_0_15_73)))
 (let ((?x52216 (* ?x52078 l_0_15_82)))
 (let ((?x52075 (* 2.0 l_0_15_72)))
 (let ((?x52214 (* ?x52075 l_0_15_81)))
 (let ((?x52072 (* 2.0 l_0_15_71)))
 (let ((?x52212 (* ?x52072 l_0_15_80)))
 (let ((?x52069 (* 2.0 l_0_15_70)))
 (let ((?x52210 (* ?x52069 l_0_15_79)))
 (let ((?x52064 (* 2.0 l_0_15_52)))
 (let ((?x52206 (* ?x52064 l_0_15_61)))
 (let ((?x52061 (* 2.0 l_0_15_51)))
 (let ((?x52204 (* ?x52061 l_0_15_60)))
 (let ((?x52058 (* 2.0 l_0_15_50)))
 (let ((?x52202 (* ?x52058 l_0_15_59)))
 (let ((?x52055 (* 2.0 l_0_15_49)))
 (let ((?x52200 (* ?x52055 l_0_15_58)))
 (let ((?x52792 (* l_0_15_178 l_0_15_178)))
 (let ((?x52790 (* l_0_15_177 l_0_15_177)))
 (let ((?x52788 (* l_0_15_176 l_0_15_176)))
 (let ((?x52786 (* l_0_15_175 l_0_15_175)))
 (let ((?x52784 (* l_0_15_157 l_0_15_157)))
 (let ((?x52782 (* l_0_15_156 l_0_15_156)))
 (let ((?x52780 (* l_0_15_155 l_0_15_155)))
 (let ((?x52778 (* l_0_15_154 l_0_15_154)))
 (let ((?x52776 (* l_0_15_115 l_0_15_115)))
 (let ((?x52774 (* l_0_15_114 l_0_15_114)))
 (let ((?x52775 (+ (+ (* l_0_15_112 l_0_15_112) (* l_0_15_113 l_0_15_113)) ?x52774)))
 (let ((?x52789 (+ (+ (- (- (- (- (+ ?x52775 ?x52776) ?x52778) ?x52780) ?x52782) ?x52784) ?x52786) ?x52788)))
 (let ((?x52798 (- (+ (+ (+ (+ (+ (+ ?x52789 ?x52790) ?x52792) ?x52200) ?x52202) ?x52204) ?x52206) ?x52210)))
 (let ((?x52809 (- (- (- (- (- (- (- ?x52798 ?x52212) ?x52214) ?x52216) ?x52802) ?x52804) ?x52806) ?x52808)))
 (= ?x52809 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51451 (* l_0_15_78 l_0_15_78)))
 (let ((?x51448 (* l_0_15_77 l_0_15_77)))
 (let ((?x51445 (* l_0_15_76 l_0_15_76)))
 (let ((?x51442 (* l_0_15_75 l_0_15_75)))
 (let ((?x51439 (* l_0_15_74 l_0_15_74)))
 (let ((?x40402 (* l_0_15_57 l_0_15_57)))
 (let ((?x30223 (* l_0_15_56 l_0_15_56)))
 (let ((?x40545 (* l_0_15_55 l_0_15_55)))
 (let ((?x19093 (* l_0_15_54 l_0_15_54)))
 (let ((?x27074 (* l_0_15_53 l_0_15_53)))
 (let ((?x51142 (* 2.0 l_0_15_136)))
 (let ((?x51143 (* ?x51142 l_0_15_140)))
 (let ((?x51139 (* 2.0 l_0_15_135)))
 (let ((?x51140 (* ?x51139 l_0_15_139)))
 (let ((?x51136 (* 2.0 l_0_15_134)))
 (let ((?x51137 (* ?x51136 l_0_15_138)))
 (let ((?x52821 (+ (- (- (- (* (* (- 2.0) l_0_15_133) l_0_15_137) ?x51137) ?x51140) ?x51143) ?x27074)))
 (let ((?x52828 (- (- (- (+ (+ (+ (+ ?x52821 ?x19093) ?x40545) ?x30223) ?x40402) ?x51439) ?x51442) ?x51445)))
 (= (- (- ?x52828 ?x51448) ?x51451) 0.0))))))))))))))))))))
(assert
 (let ((?x52889 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x52886 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x52883 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x52880 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x52455 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x52452 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x52449 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x52446 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x52443 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x52440 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x52437 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x52434 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x52431 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x52428 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x52866 (* 2.0 l_0_15_178)))
 (let ((?x52867 (* ?x52866 l_0_15_182)))
 (let ((?x52863 (* 2.0 l_0_15_177)))
 (let ((?x52864 (* ?x52863 l_0_15_181)))
 (let ((?x52860 (* 2.0 l_0_15_176)))
 (let ((?x52861 (* ?x52860 l_0_15_180)))
 (let ((?x52857 (* 2.0 l_0_15_175)))
 (let ((?x52858 (* ?x52857 l_0_15_179)))
 (let ((?x52854 (* 2.0 l_0_15_157)))
 (let ((?x52855 (* ?x52854 l_0_15_161)))
 (let ((?x52851 (* 2.0 l_0_15_156)))
 (let ((?x52852 (* ?x52851 l_0_15_160)))
 (let ((?x52848 (* 2.0 l_0_15_155)))
 (let ((?x52849 (* ?x52848 l_0_15_159)))
 (let ((?x52845 (* 2.0 l_0_15_154)))
 (let ((?x52846 (* ?x52845 l_0_15_158)))
 (let ((?x51142 (* 2.0 l_0_15_136)))
 (let ((?x51249 (* ?x51142 l_0_15_145)))
 (let ((?x51139 (* 2.0 l_0_15_135)))
 (let ((?x51247 (* ?x51139 l_0_15_144)))
 (let ((?x51136 (* 2.0 l_0_15_134)))
 (let ((?x51245 (* ?x51136 l_0_15_143)))
 (let ((?x51133 (* 2.0 l_0_15_133)))
 (let ((?x51243 (* ?x51133 l_0_15_142)))
 (let ((?x42269 (* 2.0 l_0_15_115)))
 (let ((?x42270 (* ?x42269 l_0_15_119)))
 (let ((?x42236 (* 2.0 l_0_15_114)))
 (let ((?x31717 (* ?x42236 l_0_15_118)))
 (let ((?x42251 (* 2.0 l_0_15_113)))
 (let ((?x42224 (* ?x42251 l_0_15_117)))
 (let ((?x52841 (- (+ (+ (+ (* (* 2.0 l_0_15_112) l_0_15_116) ?x42224) ?x31717) ?x42270) ?x51243)))
 (let ((?x52856 (- (- (- (- (- (- (- ?x52841 ?x51245) ?x51247) ?x51249) ?x52846) ?x52849) ?x52852) ?x52855)))
 (let ((?x52871 (+ (+ (+ (+ (+ (+ (+ ?x52856 ?x52858) ?x52861) ?x52864) ?x52867) ?x52428) ?x52431) ?x52434)))
 (let ((?x52878 (- (- (- (- (- (+ (+ ?x52871 ?x52437) ?x52440) ?x52443) ?x52446) ?x52449) ?x52452) ?x52455)))
 (= (- (- (- (- ?x52878 ?x52880) ?x52883) ?x52886) ?x52889) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51761 (* l_0_15_84 l_0_15_84)))
 (let ((?x51758 (* l_0_15_83 l_0_15_83)))
 (let ((?x51755 (* l_0_15_82 l_0_15_82)))
 (let ((?x51752 (* l_0_15_81 l_0_15_81)))
 (let ((?x51749 (* l_0_15_80 l_0_15_80)))
 (let ((?x51746 (* l_0_15_79 l_0_15_79)))
 (let ((?x30421 (* l_0_15_63 l_0_15_63)))
 (let ((?x30467 (* l_0_15_62 l_0_15_62)))
 (let ((?x30461 (* l_0_15_61 l_0_15_61)))
 (let ((?x51826 (* l_0_15_60 l_0_15_60)))
 (let ((?x51821 (* l_0_15_59 l_0_15_59)))
 (let ((?x30453 (* l_0_15_58 l_0_15_58)))
 (let ((?x52866 (* 2.0 l_0_15_178)))
 (let ((?x52953 (* ?x52866 l_0_15_187)))
 (let ((?x52863 (* 2.0 l_0_15_177)))
 (let ((?x52951 (* ?x52863 l_0_15_186)))
 (let ((?x52860 (* 2.0 l_0_15_176)))
 (let ((?x52949 (* ?x52860 l_0_15_185)))
 (let ((?x52857 (* 2.0 l_0_15_175)))
 (let ((?x52947 (* ?x52857 l_0_15_184)))
 (let ((?x52854 (* 2.0 l_0_15_157)))
 (let ((?x52945 (* ?x52854 l_0_15_166)))
 (let ((?x52851 (* 2.0 l_0_15_156)))
 (let ((?x52943 (* ?x52851 l_0_15_165)))
 (let ((?x52848 (* 2.0 l_0_15_155)))
 (let ((?x52941 (* ?x52848 l_0_15_164)))
 (let ((?x52845 (* 2.0 l_0_15_154)))
 (let ((?x52939 (* ?x52845 l_0_15_163)))
 (let ((?x42269 (* 2.0 l_0_15_115)))
 (let ((?x52937 (* ?x42269 l_0_15_124)))
 (let ((?x42236 (* 2.0 l_0_15_114)))
 (let ((?x52935 (* ?x42236 l_0_15_123)))
 (let ((?x42251 (* 2.0 l_0_15_113)))
 (let ((?x52933 (* ?x42251 l_0_15_122)))
 (let ((?x42339 (* 2.0 l_0_15_112)))
 (let ((?x52931 (* ?x42339 l_0_15_121)))
 (let ((?x52928 (* 2.0 l_0_15_103)))
 (let ((?x52929 (* ?x52928 l_0_15_94)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x52926 (* ?x30331 l_0_15_93)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x52924 (* ?x30341 l_0_15_92)))
 (let ((?x52932 (+ (- (- (- (* (* (- 2.0) l_0_15_100) l_0_15_91) ?x52924) ?x52926) ?x52929) ?x52931)))
 (let ((?x52946 (- (- (- (- (+ (+ (+ ?x52932 ?x52933) ?x52935) ?x52937) ?x52939) ?x52941) ?x52943) ?x52945)))
 (let ((?x52957 (+ (+ (+ (+ (+ (+ (+ ?x52946 ?x52947) ?x52949) ?x52951) ?x52953) ?x30453) ?x51821) ?x51826)))
 (let ((?x52964 (- (- (- (- (+ (+ (+ ?x52957 ?x30461) ?x30467) ?x30421) ?x51746) ?x51749) ?x51752) ?x51755)))
 (= (- (- ?x52964 ?x51758) ?x51761) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53048 (* l_0_15_99 l_0_15_99)))
 (let ((?x53046 (* l_0_15_98 l_0_15_98)))
 (let ((?x53044 (* l_0_15_97 l_0_15_97)))
 (let ((?x53042 (* l_0_15_96 l_0_15_96)))
 (let ((?x53040 (* l_0_15_95 l_0_15_95)))
 (let ((?x53038 (* l_0_15_183 l_0_15_183)))
 (let ((?x53036 (* l_0_15_182 l_0_15_182)))
 (let ((?x53034 (* l_0_15_181 l_0_15_181)))
 (let ((?x53032 (* l_0_15_180 l_0_15_180)))
 (let ((?x53030 (* l_0_15_179 l_0_15_179)))
 (let ((?x53028 (* l_0_15_162 l_0_15_162)))
 (let ((?x53026 (* l_0_15_161 l_0_15_161)))
 (let ((?x53024 (* l_0_15_160 l_0_15_160)))
 (let ((?x53022 (* l_0_15_159 l_0_15_159)))
 (let ((?x53020 (* l_0_15_158 l_0_15_158)))
 (let ((?x51498 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51495 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51489 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51486 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51483 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x53013 (* l_0_15_120 l_0_15_120)))
 (let ((?x53011 (* l_0_15_119 l_0_15_119)))
 (let ((?x53009 (* l_0_15_118 l_0_15_118)))
 (let ((?x53010 (+ (+ (* l_0_15_116 l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53009)))
 (let ((?x53019 (- (- (- (- (- (+ (+ ?x53010 ?x53011) ?x53013) ?x51483) ?x51486) ?x51489) ?x51495) ?x51498)))
 (let ((?x53033 (+ (+ (- (- (- (- (- ?x53019 ?x53020) ?x53022) ?x53024) ?x53026) ?x53028) ?x53030) ?x53032)))
 (let ((?x53047 (- (- (- (- (+ (+ (+ ?x53033 ?x53034) ?x53036) ?x53038) ?x53040) ?x53042) ?x53044) ?x53046)))
 (= (- ?x53047 ?x53048) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x53120 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x53117 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x53114 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x53111 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x53108 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x53105 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x53102 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x53099 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x53096 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x53093 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x51684 (* l_0_15_147 l_0_15_147)))
 (let ((?x51682 (* l_0_15_146 l_0_15_146)))
 (let ((?x51680 (* l_0_15_145 l_0_15_145)))
 (let ((?x51678 (* l_0_15_144 l_0_15_144)))
 (let ((?x51676 (* l_0_15_143 l_0_15_143)))
 (let ((?x51674 (* l_0_15_142 l_0_15_142)))
 (let ((?x53084 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x53081 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x53078 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x53075 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x53072 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x53069 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x52928 (* 2.0 l_0_15_103)))
 (let ((?x53066 (* ?x52928 l_0_15_98)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x53064 (* ?x30331 l_0_15_97)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x53062 (* ?x30341 l_0_15_96)))
 (let ((?x53070 (- (- (- (- (* (* (- 2.0) l_0_15_100) l_0_15_95) ?x53062) ?x53064) ?x53066) ?x53069)))
 (let ((?x53087 (- (- (+ (+ (+ (+ (+ ?x53070 ?x53072) ?x53075) ?x53078) ?x53081) ?x53084) ?x51674) ?x51676)))
 (let ((?x53100 (- (- (- (- (- (- (- ?x53087 ?x51678) ?x51680) ?x51682) ?x51684) ?x53093) ?x53096) ?x53099)))
 (let ((?x53121 (+ (+ (+ (+ (+ (- (- ?x53100 ?x53102) ?x53105) ?x53108) ?x53111) ?x53114) ?x53117) ?x53120)))
 (= ?x53121 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53225 (* l_0_15_189 l_0_15_189)))
 (let ((?x53223 (* l_0_15_188 l_0_15_188)))
 (let ((?x53221 (* l_0_15_187 l_0_15_187)))
 (let ((?x53219 (* l_0_15_186 l_0_15_186)))
 (let ((?x53217 (* l_0_15_185 l_0_15_185)))
 (let ((?x53215 (* l_0_15_184 l_0_15_184)))
 (let ((?x53213 (* l_0_15_168 l_0_15_168)))
 (let ((?x53211 (* l_0_15_167 l_0_15_167)))
 (let ((?x53209 (* l_0_15_166 l_0_15_166)))
 (let ((?x53207 (* l_0_15_165 l_0_15_165)))
 (let ((?x53205 (* l_0_15_164 l_0_15_164)))
 (let ((?x53203 (* l_0_15_163 l_0_15_163)))
 (let ((?x53201 (* l_0_15_126 l_0_15_126)))
 (let ((?x53199 (* l_0_15_125 l_0_15_125)))
 (let ((?x53197 (* l_0_15_124 l_0_15_124)))
 (let ((?x53195 (* l_0_15_123 l_0_15_123)))
 (let ((?x53193 (* l_0_15_122 l_0_15_122)))
 (let ((?x53191 (* l_0_15_121 l_0_15_121)))
 (let ((?x53189 (* l_0_15_105 l_0_15_105)))
 (let ((?x53187 (* l_0_15_104 l_0_15_104)))
 (let ((?x53185 (* l_0_15_103 l_0_15_103)))
 (let ((?x53170 (* l_0_15_102 l_0_15_102)))
 (let ((?x53171 (- (- (* (- l_0_15_100) l_0_15_100) (* l_0_15_101 l_0_15_101)) ?x53170)))
 (let ((?x53198 (+ (+ (+ (+ (- (- (- ?x53171 ?x53185) ?x53187) ?x53189) ?x53191) ?x53193) ?x53195) ?x53197)))
 (let ((?x53212 (- (- (- (- (- (+ (+ ?x53198 ?x53199) ?x53201) ?x53203) ?x53205) ?x53207) ?x53209) ?x53211)))
 (let ((?x53226 (+ (+ (+ (+ (+ (+ (- ?x53212 ?x53213) ?x53215) ?x53217) ?x53219) ?x53221) ?x53223) ?x53225)))
 (= ?x53226 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x49563 (* l_0_15_85 l_0_15_85)))
 (let ((?x49559 (* l_0_15_169 l_0_15_169)))
 (let ((?x53253 (- (+ (* (- l_0_15_106) l_0_15_106) (* l_0_15_148 l_0_15_148)) ?x49559)))
 (= (+ ?x53253 ?x49563) 0.0)))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x49911 (* ?x49730 l_0_15_88)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x49893 (* ?x49708 l_0_15_172)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x49889 (* ?x49702 l_0_15_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_109) ?x49889) ?x49893) ?x49911) 0.0))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x50026 (* ?x49730 l_0_15_91)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50010 (* ?x49708 l_0_15_175)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50006 (* ?x49702 l_0_15_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_112) ?x50006) ?x50010) ?x50026) 0.0))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_85)))
 (let ((?x50132 (* ?x49730 l_0_15_95)))
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50115 (* ?x49708 l_0_15_179)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50110 (* ?x49702 l_0_15_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_116) ?x50110) ?x50115) ?x50132) 0.0))))))))
(assert
 (let ((?x49708 (* 2.0 l_0_15_169)))
 (let ((?x50183 (* ?x49708 l_0_15_184)))
 (let ((?x49702 (* 2.0 l_0_15_148)))
 (let ((?x50179 (* ?x49702 l_0_15_163)))
 (let ((?x49693 (* 2.0 l_0_15_106)))
 (let ((?x50177 (* ?x49693 l_0_15_121)))
 (= (- (+ (- (* (* 2.0 l_0_15_100) l_0_15_85) ?x50177) ?x50179) ?x50183) 0.0))))))))
(assert
 (let ((?x51023 (* l_0_15_90 l_0_15_90)))
 (let ((?x51021 (* l_0_15_89 l_0_15_89)))
 (let ((?x51019 (* l_0_15_88 l_0_15_88)))
 (let ((?x50997 (* l_0_15_174 l_0_15_174)))
 (let ((?x50995 (* l_0_15_173 l_0_15_173)))
 (let ((?x50993 (* l_0_15_172 l_0_15_172)))
 (let ((?x50989 (* l_0_15_153 l_0_15_153)))
 (let ((?x50987 (* l_0_15_152 l_0_15_152)))
 (let ((?x50985 (* l_0_15_151 l_0_15_151)))
 (let ((?x40062 (* l_0_15_111 l_0_15_111)))
 (let ((?x53295 (- (- (* (- l_0_15_109) l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x40062)))
 (let ((?x53302 (+ (- (- (- (+ (+ (+ ?x53295 ?x50985) ?x50987) ?x50989) ?x50993) ?x50995) ?x50997) ?x51019)))
 (= (+ (+ ?x53302 ?x51021) ?x51023) 0.0))))))))))))))
(assert
 (let ((?x51311 (* 2.0 l_0_15_90)))
 (let ((?x51312 (* ?x51311 l_0_15_93)))
 (let ((?x51308 (* 2.0 l_0_15_89)))
 (let ((?x51309 (* ?x51308 l_0_15_92)))
 (let ((?x51305 (* 2.0 l_0_15_88)))
 (let ((?x51306 (* ?x51305 l_0_15_91)))
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51271 (* ?x51270 l_0_15_177)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51268 (* ?x51267 l_0_15_176)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51265 (* ?x51264 l_0_15_175)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51258 (* ?x51257 l_0_15_156)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51255 (* ?x51254 l_0_15_155)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51252 (* ?x51251 l_0_15_154)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51241 (* ?x51240 l_0_15_114)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51238 (* ?x51237 l_0_15_113)))
 (let ((?x53314 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_112) ?x51238) ?x51241) ?x51252) ?x51255)))
 (let ((?x53321 (+ (+ (+ (- (- (- (+ ?x53314 ?x51258) ?x51265) ?x51268) ?x51271) ?x51306) ?x51309) ?x51312)))
 (= ?x53321 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51311 (* 2.0 l_0_15_90)))
 (let ((?x51564 (* ?x51311 l_0_15_97)))
 (let ((?x51308 (* 2.0 l_0_15_89)))
 (let ((?x51562 (* ?x51308 l_0_15_96)))
 (let ((?x51305 (* 2.0 l_0_15_88)))
 (let ((?x51560 (* ?x51305 l_0_15_95)))
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51513 (* ?x51270 l_0_15_181)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51511 (* ?x51267 l_0_15_180)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51509 (* ?x51264 l_0_15_179)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51507 (* ?x51257 l_0_15_160)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51505 (* ?x51254 l_0_15_159)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51503 (* ?x51251 l_0_15_158)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51473 (* ?x51240 l_0_15_118)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51471 (* ?x51237 l_0_15_117)))
 (let ((?x32421 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_116) ?x51471) ?x51473) ?x51503) ?x51505)))
 (let ((?x53328 (+ (+ (+ (- (- (- (+ ?x32421 ?x51507) ?x51509) ?x51511) ?x51513) ?x51560) ?x51562) ?x51564)))
 (= ?x53328 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51270 (* 2.0 l_0_15_174)))
 (let ((?x51700 (* ?x51270 l_0_15_186)))
 (let ((?x51267 (* 2.0 l_0_15_173)))
 (let ((?x51698 (* ?x51267 l_0_15_185)))
 (let ((?x51264 (* 2.0 l_0_15_172)))
 (let ((?x51696 (* ?x51264 l_0_15_184)))
 (let ((?x51257 (* 2.0 l_0_15_153)))
 (let ((?x51690 (* ?x51257 l_0_15_165)))
 (let ((?x51254 (* 2.0 l_0_15_152)))
 (let ((?x51688 (* ?x51254 l_0_15_164)))
 (let ((?x51251 (* 2.0 l_0_15_151)))
 (let ((?x51686 (* ?x51251 l_0_15_163)))
 (let ((?x51240 (* 2.0 l_0_15_111)))
 (let ((?x51672 (* ?x51240 l_0_15_123)))
 (let ((?x51237 (* 2.0 l_0_15_110)))
 (let ((?x51670 (* ?x51237 l_0_15_122)))
 (let ((?x51234 (* 2.0 l_0_15_109)))
 (let ((?x19348 (* ?x51234 l_0_15_121)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x19351 (* ?x30331 l_0_15_90)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x40590 (* ?x30341 l_0_15_89)))
 (let ((?x32522 (- (- (+ (+ (* (* 2.0 l_0_15_100) l_0_15_88) ?x40590) ?x19351) ?x19348) ?x51670)))
 (let ((?x53337 (- (- (- (+ (+ (+ (- ?x32522 ?x51672) ?x51686) ?x51688) ?x51690) ?x51696) ?x51698) ?x51700)))
 (= ?x53337 0.0))))))))))))))))))))))))))
(assert
 (let ((?x52808 (* l_0_15_94 l_0_15_94)))
 (let ((?x52806 (* l_0_15_93 l_0_15_93)))
 (let ((?x52804 (* l_0_15_92 l_0_15_92)))
 (let ((?x52802 (* l_0_15_91 l_0_15_91)))
 (let ((?x52792 (* l_0_15_178 l_0_15_178)))
 (let ((?x52790 (* l_0_15_177 l_0_15_177)))
 (let ((?x52788 (* l_0_15_176 l_0_15_176)))
 (let ((?x52786 (* l_0_15_175 l_0_15_175)))
 (let ((?x52784 (* l_0_15_157 l_0_15_157)))
 (let ((?x52782 (* l_0_15_156 l_0_15_156)))
 (let ((?x52780 (* l_0_15_155 l_0_15_155)))
 (let ((?x52778 (* l_0_15_154 l_0_15_154)))
 (let ((?x52776 (* l_0_15_115 l_0_15_115)))
 (let ((?x52774 (* l_0_15_114 l_0_15_114)))
 (let ((?x32644 (- (- (* (- l_0_15_112) l_0_15_112) (* l_0_15_113 l_0_15_113)) ?x52774)))
 (let ((?x53342 (- (- (+ (+ (+ (+ (- ?x32644 ?x52776) ?x52778) ?x52780) ?x52782) ?x52784) ?x52786) ?x52788)))
 (= (+ (+ (+ (+ (- (- ?x53342 ?x52790) ?x52792) ?x52802) ?x52804) ?x52806) ?x52808) 0.0))))))))))))))))))
(assert
 (let ((?x52889 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x52886 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x52883 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x52880 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x52866 (* 2.0 l_0_15_178)))
 (let ((?x52867 (* ?x52866 l_0_15_182)))
 (let ((?x52863 (* 2.0 l_0_15_177)))
 (let ((?x52864 (* ?x52863 l_0_15_181)))
 (let ((?x52860 (* 2.0 l_0_15_176)))
 (let ((?x52861 (* ?x52860 l_0_15_180)))
 (let ((?x52857 (* 2.0 l_0_15_175)))
 (let ((?x52858 (* ?x52857 l_0_15_179)))
 (let ((?x52854 (* 2.0 l_0_15_157)))
 (let ((?x52855 (* ?x52854 l_0_15_161)))
 (let ((?x52851 (* 2.0 l_0_15_156)))
 (let ((?x52852 (* ?x52851 l_0_15_160)))
 (let ((?x52848 (* 2.0 l_0_15_155)))
 (let ((?x52849 (* ?x52848 l_0_15_159)))
 (let ((?x52845 (* 2.0 l_0_15_154)))
 (let ((?x52846 (* ?x52845 l_0_15_158)))
 (let ((?x42269 (* 2.0 l_0_15_115)))
 (let ((?x42270 (* ?x42269 l_0_15_119)))
 (let ((?x42236 (* 2.0 l_0_15_114)))
 (let ((?x31717 (* ?x42236 l_0_15_118)))
 (let ((?x42251 (* 2.0 l_0_15_113)))
 (let ((?x42224 (* ?x42251 l_0_15_117)))
 (let ((?x32689 (+ (- (- (- (* (* (- 2.0) l_0_15_112) l_0_15_116) ?x42224) ?x31717) ?x42270) ?x52846)))
 (let ((?x53356 (- (- (- (- (+ (+ (+ ?x32689 ?x52849) ?x52852) ?x52855) ?x52858) ?x52861) ?x52864) ?x52867)))
 (= (+ (+ (+ (+ ?x53356 ?x52880) ?x52883) ?x52886) ?x52889) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52866 (* 2.0 l_0_15_178)))
 (let ((?x52953 (* ?x52866 l_0_15_187)))
 (let ((?x52863 (* 2.0 l_0_15_177)))
 (let ((?x52951 (* ?x52863 l_0_15_186)))
 (let ((?x52860 (* 2.0 l_0_15_176)))
 (let ((?x52949 (* ?x52860 l_0_15_185)))
 (let ((?x52857 (* 2.0 l_0_15_175)))
 (let ((?x52947 (* ?x52857 l_0_15_184)))
 (let ((?x52854 (* 2.0 l_0_15_157)))
 (let ((?x52945 (* ?x52854 l_0_15_166)))
 (let ((?x52851 (* 2.0 l_0_15_156)))
 (let ((?x52943 (* ?x52851 l_0_15_165)))
 (let ((?x52848 (* 2.0 l_0_15_155)))
 (let ((?x52941 (* ?x52848 l_0_15_164)))
 (let ((?x52845 (* 2.0 l_0_15_154)))
 (let ((?x52939 (* ?x52845 l_0_15_163)))
 (let ((?x42269 (* 2.0 l_0_15_115)))
 (let ((?x52937 (* ?x42269 l_0_15_124)))
 (let ((?x42236 (* 2.0 l_0_15_114)))
 (let ((?x52935 (* ?x42236 l_0_15_123)))
 (let ((?x42251 (* 2.0 l_0_15_113)))
 (let ((?x52933 (* ?x42251 l_0_15_122)))
 (let ((?x42339 (* 2.0 l_0_15_112)))
 (let ((?x52931 (* ?x42339 l_0_15_121)))
 (let ((?x52928 (* 2.0 l_0_15_103)))
 (let ((?x52929 (* ?x52928 l_0_15_94)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x52926 (* ?x30331 l_0_15_93)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x52924 (* ?x30341 l_0_15_92)))
 (let ((?x43213 (- (+ (+ (+ (* (* 2.0 l_0_15_100) l_0_15_91) ?x52924) ?x52926) ?x52929) ?x52931)))
 (let ((?x53369 (+ (+ (+ (+ (- (- (- ?x43213 ?x52933) ?x52935) ?x52937) ?x52939) ?x52941) ?x52943) ?x52945)))
 (= (- (- (- (- ?x53369 ?x52947) ?x52949) ?x52951) ?x52953) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53048 (* l_0_15_99 l_0_15_99)))
 (let ((?x53046 (* l_0_15_98 l_0_15_98)))
 (let ((?x53044 (* l_0_15_97 l_0_15_97)))
 (let ((?x53042 (* l_0_15_96 l_0_15_96)))
 (let ((?x53040 (* l_0_15_95 l_0_15_95)))
 (let ((?x53038 (* l_0_15_183 l_0_15_183)))
 (let ((?x53036 (* l_0_15_182 l_0_15_182)))
 (let ((?x53034 (* l_0_15_181 l_0_15_181)))
 (let ((?x53032 (* l_0_15_180 l_0_15_180)))
 (let ((?x53030 (* l_0_15_179 l_0_15_179)))
 (let ((?x53028 (* l_0_15_162 l_0_15_162)))
 (let ((?x53026 (* l_0_15_161 l_0_15_161)))
 (let ((?x53024 (* l_0_15_160 l_0_15_160)))
 (let ((?x53022 (* l_0_15_159 l_0_15_159)))
 (let ((?x53020 (* l_0_15_158 l_0_15_158)))
 (let ((?x53013 (* l_0_15_120 l_0_15_120)))
 (let ((?x53011 (* l_0_15_119 l_0_15_119)))
 (let ((?x53009 (* l_0_15_118 l_0_15_118)))
 (let ((?x21838 (- (- (* (- l_0_15_116) l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53009)))
 (let ((?x43234 (+ (+ (+ (+ (+ (- (- ?x21838 ?x53011) ?x53013) ?x53020) ?x53022) ?x53024) ?x53026) ?x53028)))
 (let ((?x53380 (+ (+ (- (- (- (- (- ?x43234 ?x53030) ?x53032) ?x53034) ?x53036) ?x53038) ?x53040) ?x53042)))
 (= (+ (+ (+ ?x53380 ?x53044) ?x53046) ?x53048) 0.0)))))))))))))))))))))))
(assert
 (let ((?x53120 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x53117 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x53114 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x53111 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x53108 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x53105 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x53102 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x53099 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x53096 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x53093 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x53084 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x53081 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x53078 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x53075 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x53072 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x53069 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x52928 (* 2.0 l_0_15_103)))
 (let ((?x53066 (* ?x52928 l_0_15_98)))
 (let ((?x30331 (* 2.0 l_0_15_102)))
 (let ((?x53064 (* ?x30331 l_0_15_97)))
 (let ((?x30341 (* 2.0 l_0_15_101)))
 (let ((?x53062 (* ?x30341 l_0_15_96)))
 (let ((?x43317 (+ (+ (+ (+ (* (* 2.0 l_0_15_100) l_0_15_95) ?x53062) ?x53064) ?x53066) ?x53069)))
 (let ((?x53402 (+ (+ (- (- (- (- (- ?x43317 ?x53072) ?x53075) ?x53078) ?x53081) ?x53084) ?x53093) ?x53096)))
 (let ((?x53409 (- (- (- (- (+ (+ (+ ?x53402 ?x53099) ?x53102) ?x53105) ?x53108) ?x53111) ?x53114) ?x53117)))
 (= (- ?x53409 ?x53120) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53225 (* l_0_15_189 l_0_15_189)))
 (let ((?x53223 (* l_0_15_188 l_0_15_188)))
 (let ((?x53221 (* l_0_15_187 l_0_15_187)))
 (let ((?x53219 (* l_0_15_186 l_0_15_186)))
 (let ((?x53217 (* l_0_15_185 l_0_15_185)))
 (let ((?x53215 (* l_0_15_184 l_0_15_184)))
 (let ((?x53213 (* l_0_15_168 l_0_15_168)))
 (let ((?x53211 (* l_0_15_167 l_0_15_167)))
 (let ((?x53209 (* l_0_15_166 l_0_15_166)))
 (let ((?x53207 (* l_0_15_165 l_0_15_165)))
 (let ((?x53205 (* l_0_15_164 l_0_15_164)))
 (let ((?x53203 (* l_0_15_163 l_0_15_163)))
 (let ((?x53201 (* l_0_15_126 l_0_15_126)))
 (let ((?x53199 (* l_0_15_125 l_0_15_125)))
 (let ((?x53197 (* l_0_15_124 l_0_15_124)))
 (let ((?x53195 (* l_0_15_123 l_0_15_123)))
 (let ((?x53193 (* l_0_15_122 l_0_15_122)))
 (let ((?x53191 (* l_0_15_121 l_0_15_121)))
 (let ((?x53189 (* l_0_15_105 l_0_15_105)))
 (let ((?x53187 (* l_0_15_104 l_0_15_104)))
 (let ((?x53185 (* l_0_15_103 l_0_15_103)))
 (let ((?x53170 (* l_0_15_102 l_0_15_102)))
 (let ((?x32953 (+ (+ (* l_0_15_100 l_0_15_100) (* l_0_15_101 l_0_15_101)) ?x53170)))
 (let ((?x21841 (- (- (- (- (+ (+ (+ ?x32953 ?x53185) ?x53187) ?x53189) ?x53191) ?x53193) ?x53195) ?x53197)))
 (let ((?x53419 (+ (+ (+ (+ (+ (- (- ?x21841 ?x53199) ?x53201) ?x53203) ?x53205) ?x53207) ?x53209) ?x53211)))
 (let ((?x53426 (- (- (- (- (- (- (+ ?x53419 ?x53213) ?x53215) ?x53217) ?x53219) ?x53221) ?x53223) ?x53225)))
 (= ?x53426 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x51405 (* l_0_15_141 l_0_15_141)))
 (let ((?x51403 (* l_0_15_140 l_0_15_140)))
 (let ((?x51399 (* l_0_15_139 l_0_15_139)))
 (let ((?x42672 (- (- (* (- l_0_15_137) l_0_15_137) (* l_0_15_138 l_0_15_138)) ?x51399)))
 (= (- (- ?x42672 ?x51403) ?x51405) 0.0))))))
(assert
 (>= l_0_15_1 0.0))
(assert
 (>= l_0_15_3 0.0))
(assert
 (>= l_0_15_6 0.0))
(assert
 (>= l_0_15_10 0.0))
(assert
 (>= l_0_15_15 0.0))
(assert
 (>= l_0_15_21 0.0))
(assert
 (>= l_0_15_22 0.0))
(assert
 (>= l_0_15_24 0.0))
(assert
 (>= l_0_15_27 0.0))
(assert
 (>= l_0_15_31 0.0))
(assert
 (>= l_0_15_36 0.0))
(assert
 (>= l_0_15_42 0.0))
(assert
 (>= l_0_15_43 0.0))
(assert
 (>= l_0_15_45 0.0))
(assert
 (>= l_0_15_48 0.0))
(assert
 (>= l_0_15_52 0.0))
(assert
 (>= l_0_15_57 0.0))
(assert
 (>= l_0_15_63 0.0))
(assert
 (>= l_0_15_64 0.0))
(assert
 (>= l_0_15_66 0.0))
(assert
 (>= l_0_15_69 0.0))
(assert
 (>= l_0_15_73 0.0))
(assert
 (>= l_0_15_78 0.0))
(assert
 (>= l_0_15_84 0.0))
(assert
 (>= l_0_15_85 0.0))
(assert
 (>= l_0_15_87 0.0))
(assert
 (>= l_0_15_90 0.0))
(assert
 (>= l_0_15_94 0.0))
(assert
 (>= l_0_15_99 0.0))
(assert
 (>= l_0_15_105 0.0))
(assert
 (>= l_0_15_106 0.0))
(assert
 (>= l_0_15_108 0.0))
(assert
 (>= l_0_15_111 0.0))
(assert
 (>= l_0_15_115 0.0))
(assert
 (>= l_0_15_120 0.0))
(assert
 (>= l_0_15_126 0.0))
(assert
 (>= l_0_15_127 0.0))
(assert
 (>= l_0_15_129 0.0))
(assert
 (>= l_0_15_132 0.0))
(assert
 (>= l_0_15_136 0.0))
(assert
 (>= l_0_15_141 0.0))
(assert
 (>= l_0_15_147 0.0))
(assert
 (>= l_0_15_148 0.0))
(assert
 (>= l_0_15_150 0.0))
(assert
 (>= l_0_15_153 0.0))
(assert
 (>= l_0_15_157 0.0))
(assert
 (>= l_0_15_162 0.0))
(assert
 (>= l_0_15_168 0.0))
(assert
 (>= l_0_15_169 0.0))
(assert
 (>= l_0_15_171 0.0))
(assert
 (>= l_0_15_174 0.0))
(assert
 (>= l_0_15_178 0.0))
(assert
 (>= l_0_15_183 0.0))
(assert
 (>= l_0_15_189 0.0))
(assert
 (>= l_0_15_190 0.0))
(assert
 (>= l_0_15_192 0.0))
(assert
 (>= l_0_15_195 0.0))
(assert
 (>= l_0_15_199 0.0))
(assert
 (>= l_0_15_204 0.0))
(assert
 (>= l_0_15_210 0.0))
(assert
 (>= l_0_15_211 0.0))
(assert
 (>= l_0_15_213 0.0))
(assert
 (>= l_0_15_216 0.0))
(assert
 (>= l_0_15_220 0.0))
(assert
 (>= l_0_15_225 0.0))
(assert
 (>= l_0_15_231 0.0))
(assert
 (>= l_0_15_232 0.0))
(assert
 (>= l_0_15_234 0.0))
(assert
 (>= l_0_15_237 0.0))
(assert
 (>= l_0_15_241 0.0))
(assert
 (>= l_0_15_246 0.0))
(assert
 (>= l_0_15_252 0.0))
(assert
 (let ((?x53495 (* l_0_16_3 l_0_16_3)))
 (let ((?x53496 (* 6.0 ?x53495)))
 (let ((?x53493 (* l_0_16_255 l_0_16_255)))
 (let ((?x53491 (* l_0_16_254 l_0_16_254)))
 (let ((?x53489 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53486 (* l_0_16_234 l_0_16_234)))
 (let ((?x53484 (* l_0_16_233 l_0_16_233)))
 (let ((?x53482 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x53479 (* l_0_16_213 l_0_16_213)))
 (let ((?x53477 (* l_0_16_212 l_0_16_212)))
 (let ((?x53474 (* l_0_16_2 l_0_16_2)))
 (let ((?x53475 (* 6.0 ?x53474)))
 (let ((?x53472 (* l_0_16_192 l_0_16_192)))
 (let ((?x53480 (- (- (+ (- (- _a_6_ (* l_0_16_191 l_0_16_191)) ?x53472) ?x53475) ?x53477) ?x53479)))
 (let ((?x53497 (+ (- (- (- (- (- (- ?x53480 ?x53482) ?x53484) ?x53486) ?x53489) ?x53491) ?x53493) ?x53496)))
 (let ((?x53503 (- (- ?x53497 (* (* 1.0 l_0_16_44) l_0_16_44)) (* (* 1.0 l_0_16_45) l_0_16_45))))
 (let ((?x53509 (+ (+ ?x53503 (* 1.0 (* l_0_16_65 l_0_16_65))) (* 1.0 (* l_0_16_66 l_0_16_66)))))
 (= (- ?x53509 7.0) 0.0)))))))))))))))))))
(assert
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x53574 (* ?x53573 l_0_16_65)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x53571 (* ?x53570 l_0_16_44)))
 (let ((?x53495 (* l_0_16_3 l_0_16_3)))
 (let ((?x53530 (* l_0_16_24 l_0_16_24)))
 (let ((?x53524 (* l_0_16_23 l_0_16_23)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x53559 (* ?x53558 l_0_16_23)))
 (let ((?x53474 (* l_0_16_2 l_0_16_2)))
 (let ((?x53553 (- (+ _a_7_ (* (* 12.0 l_0_16_1) l_0_16_2)) (* (* 2.0 l_0_16_190) l_0_16_191))))
 (let ((?x53561 (+ (- (- (- ?x53553 ?x53474) (* (* 2.0 l_0_16_211) l_0_16_212)) ?x53559) ?x53524)))
 (let ((?x53568 (- (+ (- ?x53561 (* (* 2.0 l_0_16_232) l_0_16_233)) ?x53530) (* (* 2.0 l_0_16_253) l_0_16_254))))
 (= (+ (- (- ?x53568 ?x53495) ?x53571) ?x53574) 0.0)))))))))))))))
(assert
 (let ((?x53507 (* l_0_16_66 l_0_16_66)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x53655 (* ?x53654 l_0_16_71)))
 (let ((?x53504 (* l_0_16_65 l_0_16_65)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x53651 (* ?x53650 l_0_16_70)))
 (let ((?x53541 (* l_0_16_45 l_0_16_45)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x53647 (* ?x53646 l_0_16_50)))
 (let ((?x6089 (* l_0_16_44 l_0_16_44)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x53643 (* ?x53642 l_0_16_49)))
 (let ((?x53639 (* 12.0 l_0_16_3)))
 (let ((?x53640 (* ?x53639 l_0_16_8)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x53631 (* ?x53630 l_0_16_29)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x53622 (* ?x53621 l_0_16_28)))
 (let ((?x53612 (* 12.0 l_0_16_2)))
 (let ((?x53613 (* ?x53612 l_0_16_7)))
 (let ((?x53611 (- (- _a_8_ (* (* 2.0 l_0_16_191) l_0_16_196)) (* (* 2.0 l_0_16_192) l_0_16_197))))
 (let ((?x53620 (- (- (+ ?x53611 ?x53613) (* (* 2.0 l_0_16_212) l_0_16_217)) (* (* 2.0 l_0_16_213) l_0_16_218))))
 (let ((?x53629 (- (- (- ?x53620 ?x53622) (* (* 2.0 l_0_16_233) l_0_16_238)) (* (* 2.0 l_0_16_234) l_0_16_239))))
 (let ((?x53638 (- (- (- ?x53629 ?x53631) (* (* 2.0 l_0_16_254) l_0_16_259)) (* (* 2.0 l_0_16_255) l_0_16_260))))
 (let ((?x53653 (- (+ (+ (- (+ (- (+ ?x53638 ?x53640) ?x53643) ?x6089) ?x53647) ?x53541) ?x53651) ?x53504)))
 (= (- (+ ?x53653 ?x53655) ?x53507) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53720 (* l_0_16_253 l_0_16_253)))
 (let ((?x53718 (* l_0_16_232 l_0_16_232)))
 (let ((?x53716 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x53710 (* l_0_16_211 l_0_16_211)))
 (let ((?x53708 (* l_0_16_190 l_0_16_190)))
 (let ((?x53705 (* l_0_16_1 l_0_16_1)))
 (let ((?x53706 (* 6.0 ?x53705)))
 (let ((?x53711 (- (- (+ (- _a_9_ (* (* 2.0 l_0_16_1) l_0_16_2)) ?x53706) ?x53708) ?x53710)))
 (let ((?x53721 (- (- (- (+ ?x53711 (* (* 2.0 l_0_16_22) l_0_16_23)) ?x53716) ?x53718) ?x53720)))
 (let ((?x53727 (+ (- ?x53721 (* (* 1.0 l_0_16_43) l_0_16_43)) (* 1.0 (* l_0_16_64 l_0_16_64)))))
 (= ?x53727 0.0))))))))))))
(assert
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x53775 (* ?x53573 l_0_16_70)))
 (let ((?x53574 (* ?x53573 l_0_16_65)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x53772 (* ?x53570 l_0_16_49)))
 (let ((?x53571 (* ?x53570 l_0_16_44)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x53756 (* ?x53558 l_0_16_28)))
 (let ((?x53750 (- (+ _a_10_ (* (* 12.0 l_0_16_1) l_0_16_7)) (* (* 2.0 l_0_16_190) l_0_16_196))))
 (let ((?x53755 (- (- ?x53750 (* (* 2.0 l_0_16_2) l_0_16_7)) (* (* 2.0 l_0_16_211) l_0_16_217))))
 (let ((?x53762 (- (+ (- ?x53755 ?x53756) (* (* 2.0 l_0_16_23) l_0_16_28)) (* (* 2.0 l_0_16_232) l_0_16_238))))
 (let ((?x53767 (- (+ ?x53762 (* (* 2.0 l_0_16_24) l_0_16_29)) (* (* 2.0 l_0_16_253) l_0_16_259))))
 (let ((?x53774 (- (- (+ (- ?x53767 (* (* 2.0 l_0_16_3) l_0_16_8)) ?x53571) ?x53772) ?x53574)))
 (= (+ ?x53774 ?x53775) 0.0)))))))))))))))
(assert
 (let ((?x53881 (* l_0_16_9 l_0_16_9)))
 (let ((?x53882 (* 6.0 ?x53881)))
 (let ((?x53878 (* l_0_16_8 l_0_16_8)))
 (let ((?x53879 (* 6.0 ?x53878)))
 (let ((?x53863 (* l_0_16_7 l_0_16_7)))
 (let ((?x53864 (* 6.0 ?x53863)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x53655 (* ?x53654 l_0_16_71)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x53651 (* ?x53650 l_0_16_70)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x53647 (* ?x53646 l_0_16_50)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x53643 (* ?x53642 l_0_16_49)))
 (let ((?x53845 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x53842 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x53839 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x53836 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x53833 (* l_0_16_262 l_0_16_262)))
 (let ((?x53831 (* l_0_16_261 l_0_16_261)))
 (let ((?x53829 (* l_0_16_260 l_0_16_260)))
 (let ((?x53827 (* l_0_16_259 l_0_16_259)))
 (let ((?x53825 (* l_0_16_241 l_0_16_241)))
 (let ((?x53823 (* l_0_16_240 l_0_16_240)))
 (let ((?x53821 (* l_0_16_239 l_0_16_239)))
 (let ((?x53819 (* l_0_16_238 l_0_16_238)))
 (let ((?x53817 (* l_0_16_220 l_0_16_220)))
 (let ((?x53815 (* l_0_16_219 l_0_16_219)))
 (let ((?x53813 (* l_0_16_218 l_0_16_218)))
 (let ((?x53811 (* l_0_16_217 l_0_16_217)))
 (let ((?x53809 (* l_0_16_199 l_0_16_199)))
 (let ((?x53807 (* l_0_16_198 l_0_16_198)))
 (let ((?x53805 (* l_0_16_197 l_0_16_197)))
 (let ((?x53803 (* l_0_16_196 l_0_16_196)))
 (let ((?x53808 (- (- (- (+ _a_11_ (* 6.0 (* l_0_16_10 l_0_16_10))) ?x53803) ?x53805) ?x53807)))
 (let ((?x53822 (- (- (- (- (- (- (- ?x53808 ?x53809) ?x53811) ?x53813) ?x53815) ?x53817) ?x53819) ?x53821)))
 (let ((?x53837 (- (- (- (- (- (- (- ?x53822 ?x53823) ?x53825) ?x53827) ?x53829) ?x53831) ?x53833) ?x53836)))
 (let ((?x53851 (- (+ (+ (- (- (- ?x53837 ?x53839) ?x53842) ?x53845) ?x53643) ?x53647) (* (* 1.0 l_0_16_49) l_0_16_49))))
 (let ((?x53857 (- (- ?x53851 (* (* 1.0 l_0_16_50) l_0_16_50)) (* (* 1.0 l_0_16_51) l_0_16_51))))
 (let ((?x53865 (+ (- (- (- ?x53857 (* (* 1.0 l_0_16_52) l_0_16_52)) ?x53651) ?x53655) ?x53864)))
 (let ((?x53871 (+ (+ ?x53865 (* 1.0 (* l_0_16_70 l_0_16_70))) (* 1.0 (* l_0_16_71 l_0_16_71)))))
 (let ((?x53877 (+ (+ ?x53871 (* 1.0 (* l_0_16_72 l_0_16_72))) (* 1.0 (* l_0_16_73 l_0_16_73)))))
 (= (+ (+ ?x53877 ?x53879) ?x53882) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53507 (* l_0_16_66 l_0_16_66)))
 (let ((?x53989 (* 3.0 ?x53507)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x53987 (* ?x53986 l_0_16_68)))
 (let ((?x53504 (* l_0_16_65 l_0_16_65)))
 (let ((?x53984 (* 3.0 ?x53504)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x53982 (* ?x53981 l_0_16_67)))
 (let ((?x53978 (* l_0_16_6 l_0_16_6)))
 (let ((?x53979 (* 6.0 ?x53978)))
 (let ((?x53975 (* l_0_16_5 l_0_16_5)))
 (let ((?x53976 (* 6.0 ?x53975)))
 (let ((?x53964 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x53961 (* ?x53960 l_0_16_47)))
 (let ((?x53958 (* (* 3.0 l_0_16_44) l_0_16_44)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x53955 (* ?x53954 l_0_16_46)))
 (let ((?x53951 (* l_0_16_4 l_0_16_4)))
 (let ((?x53952 (* 6.0 ?x53951)))
 (let ((?x53639 (* 12.0 l_0_16_3)))
 (let ((?x53949 (* ?x53639 l_0_16_5)))
 (let ((?x53947 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x53944 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x53941 (* l_0_16_258 l_0_16_258)))
 (let ((?x53939 (* l_0_16_257 l_0_16_257)))
 (let ((?x53937 (* l_0_16_256 l_0_16_256)))
 (let ((?x53935 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x53932 (* ?x53630 l_0_16_26)))
 (let ((?x53930 (* l_0_16_237 l_0_16_237)))
 (let ((?x53928 (* l_0_16_236 l_0_16_236)))
 (let ((?x53926 (* l_0_16_235 l_0_16_235)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x53924 (* ?x53621 l_0_16_25)))
 (let ((?x53922 (* l_0_16_216 l_0_16_216)))
 (let ((?x53920 (* l_0_16_215 l_0_16_215)))
 (let ((?x53918 (* l_0_16_214 l_0_16_214)))
 (let ((?x53612 (* 12.0 l_0_16_2)))
 (let ((?x53916 (* ?x53612 l_0_16_4)))
 (let ((?x43684 (* l_0_16_195 l_0_16_195)))
 (let ((?x6435 (* l_0_16_194 l_0_16_194)))
 (let ((?x43680 (* l_0_16_193 l_0_16_193)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x43656 (* ?x43785 l_0_16_131)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x43792 (* ?x43793 l_0_16_130)))
 (let ((?x53921 (- (- (+ (- (- (- (+ ?x43792 ?x43656) ?x43680) ?x6435) ?x43684) ?x53916) ?x53918) ?x53920)))
 (let ((?x53936 (- (- (- (- (- (- (- ?x53921 ?x53922) ?x53924) ?x53926) ?x53928) ?x53930) ?x53932) ?x53935)))
 (let ((?x53953 (+ (+ (- (- (- (- (- ?x53936 ?x53937) ?x53939) ?x53941) ?x53944) ?x53947) ?x53949) ?x53952)))
 (let ((?x53968 (- (- (- (- (- ?x53953 ?x53955) ?x53958) ?x53961) ?x53964) (* (* 1.0 l_0_16_46) l_0_16_46))))
 (let ((?x53974 (- (- ?x53968 (* (* 1.0 l_0_16_47) l_0_16_47)) (* (* 1.0 l_0_16_48) l_0_16_48))))
 (let ((?x53993 (+ (+ (+ (+ (+ (+ (+ ?x53974 ?x53976) ?x53979) ?x53982) ?x53984) ?x53987) ?x53989) (* 1.0 (* l_0_16_67 l_0_16_67)))))
 (let ((?x53999 (+ (+ ?x53993 (* 1.0 (* l_0_16_68 l_0_16_68))) (* 1.0 (* l_0_16_69 l_0_16_69)))))
 (= (- ?x53999 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53507 (* l_0_16_66 l_0_16_66)))
 (let ((?x53989 (* 3.0 ?x53507)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x54116 (* ?x53654 l_0_16_68)))
 (let ((?x53504 (* l_0_16_65 l_0_16_65)))
 (let ((?x53984 (* 3.0 ?x53504)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x54113 (* ?x53650 l_0_16_67)))
 (let ((?x53964 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x54110 (* ?x53646 l_0_16_47)))
 (let ((?x53958 (* (* 3.0 l_0_16_44) l_0_16_44)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x54107 (* ?x53642 l_0_16_46)))
 (let ((?x53495 (* l_0_16_3 l_0_16_3)))
 (let ((?x53496 (* 6.0 ?x53495)))
 (let ((?x53639 (* 12.0 l_0_16_3)))
 (let ((?x53949 (* ?x53639 l_0_16_5)))
 (let ((?x53489 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x53932 (* ?x53630 l_0_16_26)))
 (let ((?x53482 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x53924 (* ?x53621 l_0_16_25)))
 (let ((?x53474 (* l_0_16_2 l_0_16_2)))
 (let ((?x53475 (* 6.0 ?x53474)))
 (let ((?x53612 (* 12.0 l_0_16_2)))
 (let ((?x53916 (* ?x53612 l_0_16_4)))
 (let ((?x54084 (- (+ (* l_0_16_128 l_0_16_128) (* l_0_16_129 l_0_16_129)) (* (* 2.0 l_0_16_191) l_0_16_193))))
 (let ((?x54090 (- (+ (+ (- ?x54084 (* (* 2.0 l_0_16_192) l_0_16_194)) ?x53916) ?x53475) (* (* 2.0 l_0_16_212) l_0_16_214))))
 (let ((?x54096 (- (- (- (- ?x54090 (* (* 2.0 l_0_16_213) l_0_16_215)) ?x53924) ?x53482) (* (* 2.0 l_0_16_233) l_0_16_235))))
 (let ((?x54102 (- (- (- (- ?x54096 (* (* 2.0 l_0_16_234) l_0_16_236)) ?x53932) ?x53489) (* (* 2.0 l_0_16_254) l_0_16_256))))
 (let ((?x54108 (- (+ (+ (- ?x54102 (* (* 2.0 l_0_16_255) l_0_16_257)) ?x53949) ?x53496) ?x54107)))
 (let ((?x54118 (+ (+ (+ (+ (- (- (- ?x54108 ?x53958) ?x54110) ?x53964) ?x54113) ?x53984) ?x54116) ?x53989)))
 (= (- ?x54118 9.0) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_16_1) l_0_16_1) (* l_0_16_22 l_0_16_22)) 0.0))
(assert
 (let ((?x53725 (* l_0_16_64 l_0_16_64)))
 (let ((?x54187 (* 3.0 ?x53725)))
 (let ((?x53716 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x54179 (* l_0_16_127 l_0_16_127)))
 (let ((?x53705 (* l_0_16_1 l_0_16_1)))
 (let ((?x53706 (* 6.0 ?x53705)))
 (let ((?x54182 (+ (+ (+ (* (* (- 2.0) l_0_16_1) l_0_16_4) ?x53706) ?x54179) (* (* 2.0 l_0_16_22) l_0_16_25))))
 (= (+ (- (- ?x54182 ?x53716) (* (* 3.0 l_0_16_43) l_0_16_43)) ?x54187) 0.0)))))))))
(assert
 (let ((?x53725 (* l_0_16_64 l_0_16_64)))
 (let ((?x22439 (* l_0_16_43 l_0_16_43)))
 (let ((?x54203 (+ (* (* (- 2.0) l_0_16_1) l_0_16_7) (* (* 2.0 l_0_16_22) l_0_16_28))))
 (= (- (+ ?x54203 ?x22439) ?x53725) 0.0)))))
(assert
 (let ((?x54217 (+ (- (* (* (- 2.0) l_0_16_1) l_0_16_11) (* l_0_16_127 l_0_16_127)) (* (* 2.0 l_0_16_22) l_0_16_32))))
 (= ?x54217 0.0)))
(assert
 (let ((?x54237 (* l_0_16_85 l_0_16_85)))
 (let ((?x54233 (* l_0_16_169 l_0_16_169)))
 (let ((?x54231 (* l_0_16_148 l_0_16_148)))
 (let ((?x54232 (- (+ (* (* (- 2.0) l_0_16_1) l_0_16_16) (* l_0_16_106 l_0_16_106)) ?x54231)))
 (= (- (+ (+ ?x54232 ?x54233) (* (* 2.0 l_0_16_22) l_0_16_37)) ?x54237) 0.0))))))
(assert
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54281 (* ?x53573 l_0_16_67)))
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54279 (* ?x54278 l_0_16_65)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54276 (* ?x53570 l_0_16_46)))
 (let ((?x54273 (* 6.0 l_0_16_43)))
 (let ((?x54274 (* ?x54273 l_0_16_44)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54261 (* ?x53558 l_0_16_25)))
 (let ((?x53559 (* ?x53558 l_0_16_23)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54252 (* ?x54251 l_0_16_128)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x54249 (* ?x53548 l_0_16_4)))
 (let ((?x53549 (* ?x53548 l_0_16_2)))
 (let ((?x54257 (- (- (+ (+ ?x53549 ?x54249) ?x54252) (* (* 2.0 l_0_16_190) l_0_16_193)) (* (* 2.0 l_0_16_2) l_0_16_4))))
 (let ((?x54264 (+ (- (- (- ?x54257 (* (* 2.0 l_0_16_211) l_0_16_214)) ?x53559) ?x54261) (* (* 2.0 l_0_16_23) l_0_16_25))))
 (let ((?x54268 (+ (- ?x54264 (* (* 2.0 l_0_16_232) l_0_16_235)) (* (* 2.0 l_0_16_24) l_0_16_26))))
 (let ((?x54272 (- (- ?x54268 (* (* 2.0 l_0_16_253) l_0_16_256)) (* (* 2.0 l_0_16_3) l_0_16_5))))
 (= (+ (+ (- (- ?x54272 ?x54274) ?x54276) ?x54279) ?x54281) 0.0))))))))))))))))))))))
(assert
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54356 (* ?x53573 l_0_16_74)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54354 (* ?x53570 l_0_16_53)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54344 (* ?x53558 l_0_16_32)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54252 (* ?x54251 l_0_16_128)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x22999 (* ?x53548 l_0_16_11)))
 (let ((?x54338 (- (- ?x22999 (* (* 2.0 l_0_16_11) l_0_16_2)) (* (* 2.0 l_0_16_12) l_0_16_3))))
 (let ((?x54343 (- (- (- ?x54338 ?x54252) (* (* 2.0 l_0_16_190) l_0_16_200)) (* (* 2.0 l_0_16_211) l_0_16_221))))
 (let ((?x54349 (- (+ (- ?x54343 ?x54344) (* (* 2.0 l_0_16_23) l_0_16_32)) (* (* 2.0 l_0_16_232) l_0_16_242))))
 (let ((?x54353 (- (+ ?x54349 (* (* 2.0 l_0_16_24) l_0_16_33)) (* (* 2.0 l_0_16_253) l_0_16_263))))
 (= (+ (- ?x54353 ?x54354) ?x54356) 0.0))))))))))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54436 (* ?x54435 l_0_16_86)))
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54433 (* ?x53573 l_0_16_79)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54431 (* ?x53570 l_0_16_58)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54421 (* ?x53558 l_0_16_37)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54412 (* ?x54411 l_0_16_170)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54406 (* ?x54405 l_0_16_149)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x54395 (* ?x53548 l_0_16_16)))
 (let ((?x54410 (- (- (+ ?x54395 (* (* 2.0 l_0_16_106) l_0_16_107)) ?x54406) (* (* 2.0 l_0_16_16) l_0_16_2))))
 (let ((?x54418 (- (- (+ ?x54410 ?x54412) (* (* 2.0 l_0_16_17) l_0_16_3)) (* (* 2.0 l_0_16_190) l_0_16_205))))
 (let ((?x54424 (+ (- (- ?x54418 (* (* 2.0 l_0_16_211) l_0_16_226)) ?x54421) (* (* 2.0 l_0_16_23) l_0_16_37))))
 (let ((?x54428 (+ (- ?x54424 (* (* 2.0 l_0_16_232) l_0_16_247)) (* (* 2.0 l_0_16_24) l_0_16_38))))
 (let ((?x54437 (- (+ (- (- ?x54428 (* (* 2.0 l_0_16_253) l_0_16_268)) ?x54431) ?x54433) ?x54436)))
 (= ?x54437 0.0)))))))))))))))))))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54511 (* ?x54278 l_0_16_67)))
 (let ((?x54279 (* ?x54278 l_0_16_65)))
 (let ((?x53978 (* l_0_16_6 l_0_16_6)))
 (let ((?x53975 (* l_0_16_5 l_0_16_5)))
 (let ((?x54273 (* 6.0 l_0_16_43)))
 (let ((?x54506 (* ?x54273 l_0_16_46)))
 (let ((?x54274 (* ?x54273 l_0_16_44)))
 (let ((?x53951 (* l_0_16_4 l_0_16_4)))
 (let ((?x22670 (* l_0_16_27 l_0_16_27)))
 (let ((?x6256 (* l_0_16_26 l_0_16_26)))
 (let ((?x32773 (* l_0_16_25 l_0_16_25)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54261 (* ?x53558 l_0_16_25)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54498 (* ?x54251 l_0_16_130)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x54249 (* ?x53548 l_0_16_4)))
 (let ((?x54505 (- (- (+ (+ (+ (- (+ ?x54249 ?x54498) ?x54261) ?x32773) ?x6256) ?x22670) ?x53951) ?x54274)))
 (= (+ (+ (- (- (- ?x54505 ?x54506) ?x53975) ?x53978) ?x54279) ?x54511) 0.0)))))))))))))))))))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54555 (* ?x54278 l_0_16_70)))
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54281 (* ?x53573 l_0_16_67)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54276 (* ?x53570 l_0_16_46)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x53756 (* ?x53558 l_0_16_28)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54530 (* ?x54251 l_0_16_133)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x53747 (* ?x53548 l_0_16_7)))
 (let ((?x54538 (+ (+ (- (+ ?x53747 ?x54530) ?x53756) (* (* 2.0 l_0_16_25) l_0_16_28)) (* (* 2.0 l_0_16_26) l_0_16_29))))
 (let ((?x54544 (- (+ ?x54538 (* (* 2.0 l_0_16_27) l_0_16_30)) (* (* 2.0 l_0_16_4) l_0_16_7))))
 (let ((?x54550 (- (- (+ ?x54544 ?x54276) (* (* 6.0 l_0_16_43) l_0_16_49)) (* (* 2.0 l_0_16_5) l_0_16_8))))
 (= (+ (- (- ?x54550 (* (* 2.0 l_0_16_6) l_0_16_9)) ?x54281) ?x54555) 0.0)))))))))))))))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54608 (* ?x54278 l_0_16_74)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54344 (* ?x53558 l_0_16_32)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54594 (* ?x54251 l_0_16_137)))
 (let ((?x54498 (* ?x54251 l_0_16_130)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x22999 (* ?x53548 l_0_16_11)))
 (let ((?x54592 (- (- ?x22999 (* (* 2.0 l_0_16_11) l_0_16_4)) (* (* 2.0 l_0_16_12) l_0_16_5))))
 (let ((?x54599 (- (- (+ (- ?x54592 ?x54498) ?x54594) (* (* 2.0 l_0_16_13) l_0_16_6)) ?x54344)))
 (let ((?x54603 (+ (+ ?x54599 (* (* 2.0 l_0_16_25) l_0_16_32)) (* (* 2.0 l_0_16_26) l_0_16_33))))
 (let ((?x54607 (- (+ ?x54603 (* (* 2.0 l_0_16_27) l_0_16_34)) (* (* 6.0 l_0_16_43) l_0_16_53))))
 (= (+ ?x54607 ?x54608) 0.0)))))))))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54662 (* ?x54435 l_0_16_88)))
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54660 (* ?x54278 l_0_16_79)))
 (let ((?x53558 (* 12.0 l_0_16_22)))
 (let ((?x54421 (* ?x53558 l_0_16_37)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54644 (* ?x54411 l_0_16_172)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54640 (* ?x54405 l_0_16_151)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54638 (* ?x54251 l_0_16_142)))
 (let ((?x53548 (* 12.0 l_0_16_1)))
 (let ((?x54395 (* ?x53548 l_0_16_16)))
 (let ((?x54643 (- (- (+ (+ ?x54395 (* (* 2.0 l_0_16_106) l_0_16_109)) ?x54638) ?x54640) (* (* 2.0 l_0_16_16) l_0_16_4))))
 (let ((?x54650 (- (- (+ ?x54643 ?x54644) (* (* 2.0 l_0_16_17) l_0_16_5)) (* (* 2.0 l_0_16_18) l_0_16_6))))
 (let ((?x54655 (+ (+ (- ?x54650 ?x54421) (* (* 2.0 l_0_16_25) l_0_16_37)) (* (* 2.0 l_0_16_26) l_0_16_38))))
 (let ((?x54659 (- (+ ?x54655 (* (* 2.0 l_0_16_27) l_0_16_39)) (* (* 6.0 l_0_16_43) l_0_16_58))))
 (= (- (+ ?x54659 ?x54660) ?x54662) 0.0))))))))))))))))))))
(assert
 (let ((?x53881 (* l_0_16_9 l_0_16_9)))
 (let ((?x53878 (* l_0_16_8 l_0_16_8)))
 (let ((?x53863 (* l_0_16_7 l_0_16_7)))
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x53775 (* ?x53573 l_0_16_70)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x53772 (* ?x53570 l_0_16_49)))
 (let ((?x43641 (* l_0_16_31 l_0_16_31)))
 (let ((?x43678 (* l_0_16_30 l_0_16_30)))
 (let ((?x43673 (* l_0_16_29 l_0_16_29)))
 (let ((?x54712 (+ (+ (* (- l_0_16_10) l_0_16_10) (* l_0_16_28 l_0_16_28)) ?x43673)))
 (let ((?x54719 (- (- (- (- (+ (+ (+ ?x54712 ?x43678) ?x43641) ?x53772) ?x53775) ?x53863) ?x53878) ?x53881)))
 (= ?x54719 0.0))))))))))))))
(assert
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54356 (* ?x53573 l_0_16_74)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54354 (* ?x53570 l_0_16_53)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54530 (* ?x54251 l_0_16_133)))
 (let ((?x54736 (- (* (* (- 2.0) l_0_16_10) l_0_16_14) (* (* 2.0 l_0_16_11) l_0_16_7))))
 (let ((?x54741 (- (- (- ?x54736 (* (* 2.0 l_0_16_12) l_0_16_8)) ?x54530) (* (* 2.0 l_0_16_13) l_0_16_9))))
 (let ((?x54747 (+ (+ ?x54741 (* (* 2.0 l_0_16_28) l_0_16_32)) (* (* 2.0 l_0_16_29) l_0_16_33))))
 (let ((?x54753 (+ (+ ?x54747 (* (* 2.0 l_0_16_30) l_0_16_34)) (* (* 2.0 l_0_16_31) l_0_16_35))))
 (= (- (+ ?x54753 ?x54354) ?x54356) 0.0))))))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54802 (* ?x54435 l_0_16_91)))
 (let ((?x53573 (* 2.0 l_0_16_64)))
 (let ((?x54433 (* ?x53573 l_0_16_79)))
 (let ((?x53570 (* 2.0 l_0_16_43)))
 (let ((?x54431 (* ?x53570 l_0_16_58)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54786 (* ?x54411 l_0_16_175)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54782 (* ?x54405 l_0_16_154)))
 (let ((?x54781 (+ (* (* (- 2.0) l_0_16_10) l_0_16_19) (* (* 2.0 l_0_16_106) l_0_16_112))))
 (let ((?x54789 (- (+ (- (- ?x54781 ?x54782) (* (* 2.0 l_0_16_16) l_0_16_7)) ?x54786) (* (* 2.0 l_0_16_17) l_0_16_8))))
 (let ((?x54793 (+ (- ?x54789 (* (* 2.0 l_0_16_18) l_0_16_9)) (* (* 2.0 l_0_16_28) l_0_16_37))))
 (let ((?x54797 (+ (+ ?x54793 (* (* 2.0 l_0_16_29) l_0_16_38)) (* (* 2.0 l_0_16_30) l_0_16_39))))
 (let ((?x54803 (- (- (+ (+ ?x54797 (* (* 2.0 l_0_16_31) l_0_16_40)) ?x54431) ?x54433) ?x54802)))
 (= ?x54803 0.0)))))))))))))))))
(assert
 (let ((?x54857 (* l_0_16_36 l_0_16_36)))
 (let ((?x54855 (* l_0_16_35 l_0_16_35)))
 (let ((?x54853 (* l_0_16_34 l_0_16_34)))
 (let ((?x54851 (* l_0_16_33 l_0_16_33)))
 (let ((?x54849 (* l_0_16_32 l_0_16_32)))
 (let ((?x54847 (* l_0_16_15 l_0_16_15)))
 (let ((?x54845 (* l_0_16_14 l_0_16_14)))
 (let ((?x54843 (* l_0_16_13 l_0_16_13)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54594 (* ?x54251 l_0_16_137)))
 (let ((?x54842 (- (- (* (- l_0_16_11) l_0_16_11) (* l_0_16_12 l_0_16_12)) ?x54594)))
 (let ((?x54856 (+ (+ (+ (+ (- (- (- ?x54842 ?x54843) ?x54845) ?x54847) ?x54849) ?x54851) ?x54853) ?x54855)))
 (= (+ ?x54856 ?x54857) 0.0))))))))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54910 (* ?x54435 l_0_16_95)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54893 (* ?x54411 l_0_16_179)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54888 (* ?x54405 l_0_16_158)))
 (let ((?x54251 (* 2.0 l_0_16_127)))
 (let ((?x54638 (* ?x54251 l_0_16_142)))
 (let ((?x54879 (- (* (* 2.0 l_0_16_106) l_0_16_116) (* (* 2.0 l_0_16_11) l_0_16_16))))
 (let ((?x54884 (- (- (- ?x54879 (* (* 2.0 l_0_16_12) l_0_16_17)) ?x54638) (* (* 2.0 l_0_16_13) l_0_16_18))))
 (let ((?x54892 (- (- (- ?x54884 (* (* 2.0 l_0_16_14) l_0_16_19)) ?x54888) (* (* 2.0 l_0_16_15) l_0_16_20))))
 (let ((?x54900 (+ (+ (+ ?x54892 ?x54893) (* (* 2.0 l_0_16_32) l_0_16_37)) (* (* 2.0 l_0_16_33) l_0_16_38))))
 (let ((?x54906 (+ (+ ?x54900 (* (* 2.0 l_0_16_34) l_0_16_39)) (* (* 2.0 l_0_16_35) l_0_16_40))))
 (= (- (+ ?x54906 (* (* 2.0 l_0_16_36) l_0_16_41)) ?x54910) 0.0)))))))))))))))
(assert
 (let ((?x54991 (* l_0_16_42 l_0_16_42)))
 (let ((?x54989 (* l_0_16_41 l_0_16_41)))
 (let ((?x54987 (* l_0_16_40 l_0_16_40)))
 (let ((?x54985 (* l_0_16_39 l_0_16_39)))
 (let ((?x54983 (* l_0_16_38 l_0_16_38)))
 (let ((?x54981 (* l_0_16_37 l_0_16_37)))
 (let ((?x54979 (* l_0_16_21 l_0_16_21)))
 (let ((?x54977 (* l_0_16_20 l_0_16_20)))
 (let ((?x54975 (* l_0_16_19 l_0_16_19)))
 (let ((?x54973 (* l_0_16_18 l_0_16_18)))
 (let ((?x54971 (* l_0_16_17 l_0_16_17)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54969 (* ?x54411 l_0_16_184)))
 (let ((?x54967 (* l_0_16_16 l_0_16_16)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54965 (* ?x54405 l_0_16_163)))
 (let ((?x54396 (* 2.0 l_0_16_106)))
 (let ((?x54963 (* ?x54396 l_0_16_121)))
 (let ((?x54970 (+ (- (- (+ (* (* (- 2.0) l_0_16_100) l_0_16_85) ?x54963) ?x54965) ?x54967) ?x54969)))
 (let ((?x54984 (+ (+ (- (- (- (- (- ?x54970 ?x54971) ?x54973) ?x54975) ?x54977) ?x54979) ?x54981) ?x54983)))
 (= (+ (+ (+ (+ ?x54984 ?x54985) ?x54987) ?x54989) ?x54991) 0.0))))))))))))))))))))))
(assert
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55117 (* ?x55116 l_0_16_72)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55114 (* ?x55113 l_0_16_71)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55111 (* ?x55110 l_0_16_70)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55108 (* ?x53986 l_0_16_71)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x54116 (* ?x53654 l_0_16_68)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55105 (* ?x53981 l_0_16_70)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x54113 (* ?x53650 l_0_16_67)))
 (let ((?x55102 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x55099 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55096 (* ?x55095 l_0_16_51)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55093 (* ?x55092 l_0_16_50)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55090 (* ?x55089 l_0_16_49)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55087 (* ?x53960 l_0_16_50)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x54110 (* ?x53646 l_0_16_47)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55084 (* ?x53954 l_0_16_49)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x54107 (* ?x53642 l_0_16_46)))
 (let ((?x55081 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x53639 (* 12.0 l_0_16_3)))
 (let ((?x53640 (* ?x53639 l_0_16_8)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55077 (* ?x55076 l_0_16_30)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55074 (* ?x55073 l_0_16_29)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55062 (* ?x55061 l_0_16_28)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x53631 (* ?x53630 l_0_16_29)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x53622 (* ?x53621 l_0_16_28)))
 (let ((?x53612 (* 12.0 l_0_16_2)))
 (let ((?x53613 (* ?x53612 l_0_16_7)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55029 (* ?x43785 l_0_16_134)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55017 (* ?x43793 l_0_16_133)))
 (let ((?x55036 (- (- (+ ?x55017 ?x55029) (* (* 2.0 l_0_16_193) l_0_16_196)) (* (* 2.0 l_0_16_194) l_0_16_197))))
 (let ((?x55043 (- (+ (- ?x55036 (* (* 2.0 l_0_16_195) l_0_16_198)) ?x53613) (* (* 2.0 l_0_16_214) l_0_16_217))))
 (let ((?x55049 (- (- ?x55043 (* (* 2.0 l_0_16_215) l_0_16_218)) (* (* 2.0 l_0_16_216) l_0_16_219))))
 (let ((?x55056 (- (- (- ?x55049 ?x53622) (* (* 2.0 l_0_16_235) l_0_16_238)) (* (* 2.0 l_0_16_236) l_0_16_239))))
 (let ((?x55066 (- (- (- (- ?x55056 (* (* 2.0 l_0_16_237) l_0_16_240)) ?x53631) ?x55062) (* (* 2.0 l_0_16_256) l_0_16_259))))
 (let ((?x55072 (- (- ?x55066 (* (* 2.0 l_0_16_257) l_0_16_260)) (* (* 2.0 l_0_16_258) l_0_16_261))))
 (let ((?x55086 (+ (- (+ (+ (+ (- (- ?x55072 ?x55074) ?x55077) ?x53640) ?x55081) ?x54107) ?x55084) ?x54110)))
 (let ((?x55104 (- (+ (+ (- (- (- (- ?x55086 ?x55087) ?x55090) ?x55093) ?x55096) ?x55099) ?x55102) ?x54113)))
 (= (+ (+ (+ (+ (- (+ ?x55104 ?x55105) ?x54116) ?x55108) ?x55111) ?x55114) ?x55117) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55276 (* ?x55116 l_0_16_76)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55274 (* ?x55113 l_0_16_75)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55272 (* ?x55110 l_0_16_74)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55270 (* ?x53986 l_0_16_75)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55268 (* ?x53981 l_0_16_74)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55266 (* ?x55095 l_0_16_55)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55264 (* ?x55092 l_0_16_54)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55262 (* ?x55089 l_0_16_53)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55260 (* ?x53960 l_0_16_54)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55258 (* ?x53954 l_0_16_53)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55256 (* ?x55076 l_0_16_34)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55254 (* ?x55073 l_0_16_33)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55246 (* ?x55061 l_0_16_32)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x55244 (* ?x53630 l_0_16_33)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x55236 (* ?x53621 l_0_16_32)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x55222 (* ?x55221 l_0_16_6)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55219 (* ?x43785 l_0_16_138)))
 (let ((?x43656 (* ?x43785 l_0_16_131)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55216 (* ?x43793 l_0_16_137)))
 (let ((?x43792 (* ?x43793 l_0_16_130)))
 (let ((?x55196 (* 12.0 l_0_16_12)))
 (let ((?x55213 (* ?x55196 l_0_16_5)))
 (let ((?x55211 (* ?x55196 l_0_16_3)))
 (let ((?x7769 (* 12.0 l_0_16_11)))
 (let ((?x55193 (* ?x7769 l_0_16_4)))
 (let ((?x55191 (* ?x7769 l_0_16_2)))
 (let ((?x55220 (+ (- (+ (- (+ (+ (+ ?x55191 ?x55193) ?x55211) ?x55213) ?x43792) ?x55216) ?x43656) ?x55219)))
 (let ((?x55227 (- (- (+ ?x55220 ?x55222) (* (* 2.0 l_0_16_193) l_0_16_200)) (* (* 2.0 l_0_16_194) l_0_16_201))))
 (let ((?x55231 (- (- ?x55227 (* (* 2.0 l_0_16_195) l_0_16_202)) (* (* 2.0 l_0_16_214) l_0_16_221))))
 (let ((?x55235 (- (- ?x55231 (* (* 2.0 l_0_16_215) l_0_16_222)) (* (* 2.0 l_0_16_216) l_0_16_223))))
 (let ((?x55241 (- (- (- ?x55235 ?x55236) (* (* 2.0 l_0_16_235) l_0_16_242)) (* (* 2.0 l_0_16_236) l_0_16_243))))
 (let ((?x55249 (- (- (- (- ?x55241 (* (* 2.0 l_0_16_237) l_0_16_244)) ?x55244) ?x55246) (* (* 2.0 l_0_16_256) l_0_16_263))))
 (let ((?x55253 (- (- ?x55249 (* (* 2.0 l_0_16_257) l_0_16_264)) (* (* 2.0 l_0_16_258) l_0_16_265))))
 (let ((?x55267 (- (- (- (- (- (- (- ?x55253 ?x55254) ?x55256) ?x55258) ?x55260) ?x55262) ?x55264) ?x55266)))
 (= (+ (+ (+ (+ (+ ?x55267 ?x55268) ?x55270) ?x55272) ?x55274) ?x55276) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x55432 (* ?x55431 l_0_16_89)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x55429 (* ?x55428 l_0_16_88)))
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55426 (* ?x55116 l_0_16_81)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55424 (* ?x55113 l_0_16_80)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55422 (* ?x55110 l_0_16_79)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55420 (* ?x53986 l_0_16_80)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55418 (* ?x53981 l_0_16_79)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55416 (* ?x55095 l_0_16_60)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55414 (* ?x55092 l_0_16_59)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55412 (* ?x55089 l_0_16_58)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55410 (* ?x53960 l_0_16_59)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55408 (* ?x53954 l_0_16_58)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55406 (* ?x55076 l_0_16_39)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55404 (* ?x55073 l_0_16_38)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55396 (* ?x55061 l_0_16_37)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x55394 (* ?x53630 l_0_16_38)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x55386 (* ?x53621 l_0_16_37)))
 (let ((?x55371 (* 12.0 l_0_16_18)))
 (let ((?x55372 (* ?x55371 l_0_16_6)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x55369 (* ?x55368 l_0_16_173)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x55366 (* ?x55365 l_0_16_172)))
 (let ((?x55360 (* 12.0 l_0_16_17)))
 (let ((?x55363 (* ?x55360 l_0_16_5)))
 (let ((?x55361 (* ?x55360 l_0_16_3)))
 (let ((?x55355 (* 12.0 l_0_16_16)))
 (let ((?x55358 (* ?x55355 l_0_16_4)))
 (let ((?x55356 (* ?x55355 l_0_16_2)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x55353 (* ?x55352 l_0_16_152)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x55350 (* ?x55349 l_0_16_151)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55347 (* ?x43785 l_0_16_143)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55345 (* ?x43793 l_0_16_142)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x55343 (* ?x55342 l_0_16_110)))
 (let ((?x55351 (- (+ (+ (+ (* (* 2.0 l_0_16_107) l_0_16_109) ?x55343) ?x55345) ?x55347) ?x55350)))
 (let ((?x55370 (+ (+ (+ (+ (+ (+ (- ?x55351 ?x55353) ?x55356) ?x55358) ?x55361) ?x55363) ?x55366) ?x55369)))
 (let ((?x55377 (- (- (+ ?x55370 ?x55372) (* (* 2.0 l_0_16_193) l_0_16_205)) (* (* 2.0 l_0_16_194) l_0_16_206))))
 (let ((?x55381 (- (- ?x55377 (* (* 2.0 l_0_16_195) l_0_16_207)) (* (* 2.0 l_0_16_214) l_0_16_226))))
 (let ((?x55385 (- (- ?x55381 (* (* 2.0 l_0_16_215) l_0_16_227)) (* (* 2.0 l_0_16_216) l_0_16_228))))
 (let ((?x55391 (- (- (- ?x55385 ?x55386) (* (* 2.0 l_0_16_235) l_0_16_247)) (* (* 2.0 l_0_16_236) l_0_16_248))))
 (let ((?x55399 (- (- (- (- ?x55391 (* (* 2.0 l_0_16_237) l_0_16_249)) ?x55394) ?x55396) (* (* 2.0 l_0_16_256) l_0_16_268))))
 (let ((?x55403 (- (- ?x55399 (* (* 2.0 l_0_16_257) l_0_16_269)) (* (* 2.0 l_0_16_258) l_0_16_270))))
 (let ((?x55417 (- (- (- (- (- (- (- ?x55403 ?x55404) ?x55406) ?x55408) ?x55410) ?x55412) ?x55414) ?x55416)))
 (let ((?x55433 (- (- (+ (+ (+ (+ (+ ?x55417 ?x55418) ?x55420) ?x55422) ?x55424) ?x55426) ?x55429) ?x55432)))
 (= ?x55433 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55610 (* l_0_16_87 l_0_16_87)))
 (let ((?x55608 (* l_0_16_86 l_0_16_86)))
 (let ((?x53997 (* l_0_16_69 l_0_16_69)))
 (let ((?x55606 (* 3.0 ?x53997)))
 (let ((?x53994 (* l_0_16_68 l_0_16_68)))
 (let ((?x55604 (* 3.0 ?x53994)))
 (let ((?x53991 (* l_0_16_67 l_0_16_67)))
 (let ((?x55602 (* 3.0 ?x53991)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x53987 (* ?x53986 l_0_16_68)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x53982 (* ?x53981 l_0_16_67)))
 (let ((?x53978 (* l_0_16_6 l_0_16_6)))
 (let ((?x53979 (* 6.0 ?x53978)))
 (let ((?x53975 (* l_0_16_5 l_0_16_5)))
 (let ((?x53976 (* 6.0 ?x53975)))
 (let ((?x55596 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x55593 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x55590 (* (* 3.0 l_0_16_46) l_0_16_46)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x53961 (* ?x53960 l_0_16_47)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x53955 (* ?x53954 l_0_16_46)))
 (let ((?x53951 (* l_0_16_4 l_0_16_4)))
 (let ((?x53952 (* 6.0 ?x53951)))
 (let ((?x53947 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x53944 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x53935 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x55581 (* l_0_16_171 l_0_16_171)))
 (let ((?x55579 (* l_0_16_170 l_0_16_170)))
 (let ((?x55577 (* l_0_16_150 l_0_16_150)))
 (let ((?x55575 (* l_0_16_149 l_0_16_149)))
 (let ((?x55573 (* l_0_16_132 l_0_16_132)))
 (let ((?x55571 (* l_0_16_131 l_0_16_131)))
 (let ((?x55569 (* l_0_16_130 l_0_16_130)))
 (let ((?x55570 (+ (- (* (- l_0_16_107) l_0_16_107) (* l_0_16_108 l_0_16_108)) ?x55569)))
 (let ((?x55583 (- (- (- (+ (+ (+ (+ ?x55570 ?x55571) ?x55573) ?x55575) ?x55577) ?x55579) ?x55581) ?x53935)))
 (let ((?x55594 (- (- (- (- (+ (- (- ?x55583 ?x53944) ?x53947) ?x53952) ?x53955) ?x53961) ?x55590) ?x55593)))
 (let ((?x55605 (+ (+ (+ (+ (+ (+ (- ?x55594 ?x55596) ?x53976) ?x53979) ?x53982) ?x53987) ?x55602) ?x55604)))
 (= (+ (+ (+ ?x55605 ?x55606) ?x55608) ?x55610) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53997 (* l_0_16_69 l_0_16_69)))
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55678 (* ?x55677 l_0_16_72)))
 (let ((?x53994 (* l_0_16_68 l_0_16_68)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55674 (* ?x55673 l_0_16_71)))
 (let ((?x53991 (* l_0_16_67 l_0_16_67)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55670 (* ?x55669 l_0_16_70)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55108 (* ?x53986 l_0_16_71)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55105 (* ?x53981 l_0_16_70)))
 (let ((?x55102 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x55099 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x54053 (* l_0_16_48 l_0_16_48)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55662 (* ?x55661 l_0_16_51)))
 (let ((?x43855 (* l_0_16_47 l_0_16_47)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55658 (* ?x55657 l_0_16_50)))
 (let ((?x54048 (* l_0_16_46 l_0_16_46)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55654 (* ?x55653 l_0_16_49)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55087 (* ?x53960 l_0_16_50)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55084 (* ?x53954 l_0_16_49)))
 (let ((?x55081 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55077 (* ?x55076 l_0_16_30)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55074 (* ?x55073 l_0_16_29)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55062 (* ?x55061 l_0_16_28)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55645 (* ?x55644 l_0_16_135)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55642 (* ?x55641 l_0_16_134)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55640 (* ?x8249 l_0_16_133)))
 (let ((?x55651 (- (+ (- (- (- (+ (+ ?x55640 ?x55642) ?x55645) ?x55062) ?x55074) ?x55077) ?x55081) ?x55084)))
 (let ((?x55664 (+ (- (+ (- (+ (- (- ?x55651 ?x55087) ?x55654) ?x54048) ?x55658) ?x43855) ?x55662) ?x54053)))
 (let ((?x55675 (+ (- (+ (+ (+ (+ (+ ?x55664 ?x55099) ?x55102) ?x55105) ?x55108) ?x55670) ?x53991) ?x55674)))
 (= (- (+ (- ?x55675 ?x53994) ?x55678) ?x53997) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55756 (* ?x55677 l_0_16_76)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55754 (* ?x55673 l_0_16_75)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55752 (* ?x55669 l_0_16_74)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55270 (* ?x53986 l_0_16_75)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55268 (* ?x53981 l_0_16_74)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55748 (* ?x55661 l_0_16_55)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55746 (* ?x55657 l_0_16_54)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55744 (* ?x55653 l_0_16_53)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55260 (* ?x53960 l_0_16_54)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55258 (* ?x53954 l_0_16_53)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55256 (* ?x55076 l_0_16_34)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55254 (* ?x55073 l_0_16_33)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55246 (* ?x55061 l_0_16_32)))
 (let ((?x55573 (* l_0_16_132 l_0_16_132)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55736 (* ?x55644 l_0_16_139)))
 (let ((?x55571 (* l_0_16_131 l_0_16_131)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55733 (* ?x55641 l_0_16_138)))
 (let ((?x55569 (* l_0_16_130 l_0_16_130)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55730 (* ?x8249 l_0_16_137)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x55222 (* ?x55221 l_0_16_6)))
 (let ((?x55196 (* 12.0 l_0_16_12)))
 (let ((?x55213 (* ?x55196 l_0_16_5)))
 (let ((?x7769 (* 12.0 l_0_16_11)))
 (let ((?x55193 (* ?x7769 l_0_16_4)))
 (let ((?x55737 (+ (- (+ (- (+ (+ (+ ?x55193 ?x55213) ?x55222) ?x55730) ?x55569) ?x55733) ?x55571) ?x55736)))
 (let ((?x55745 (- (- (- (- (- (- (- ?x55737 ?x55573) ?x55246) ?x55254) ?x55256) ?x55258) ?x55260) ?x55744)))
 (let ((?x55757 (+ (+ (+ (+ (+ (- (- ?x55745 ?x55746) ?x55748) ?x55268) ?x55270) ?x55752) ?x55754) ?x55756)))
 (= ?x55757 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55817 (* l_0_16_90 l_0_16_90)))
 (let ((?x55815 (* l_0_16_89 l_0_16_89)))
 (let ((?x55813 (* l_0_16_88 l_0_16_88)))
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55811 (* ?x55677 l_0_16_81)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55809 (* ?x55673 l_0_16_80)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55807 (* ?x55669 l_0_16_79)))
 (let ((?x53986 (* 6.0 l_0_16_66)))
 (let ((?x55420 (* ?x53986 l_0_16_80)))
 (let ((?x53981 (* 6.0 l_0_16_65)))
 (let ((?x55418 (* ?x53981 l_0_16_79)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55803 (* ?x55661 l_0_16_60)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55801 (* ?x55657 l_0_16_59)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55799 (* ?x55653 l_0_16_58)))
 (let ((?x53960 (* 6.0 l_0_16_45)))
 (let ((?x55410 (* ?x53960 l_0_16_59)))
 (let ((?x53954 (* 6.0 l_0_16_44)))
 (let ((?x55408 (* ?x53954 l_0_16_58)))
 (let ((?x55076 (* 12.0 l_0_16_27)))
 (let ((?x55406 (* ?x55076 l_0_16_39)))
 (let ((?x55073 (* 12.0 l_0_16_26)))
 (let ((?x55404 (* ?x55073 l_0_16_38)))
 (let ((?x55061 (* 12.0 l_0_16_25)))
 (let ((?x55396 (* ?x55061 l_0_16_37)))
 (let ((?x55371 (* 12.0 l_0_16_18)))
 (let ((?x55372 (* ?x55371 l_0_16_6)))
 (let ((?x55791 (* l_0_16_174 l_0_16_174)))
 (let ((?x55789 (* l_0_16_173 l_0_16_173)))
 (let ((?x55787 (* l_0_16_172 l_0_16_172)))
 (let ((?x55360 (* 12.0 l_0_16_17)))
 (let ((?x55363 (* ?x55360 l_0_16_5)))
 (let ((?x55355 (* 12.0 l_0_16_16)))
 (let ((?x55358 (* ?x55355 l_0_16_4)))
 (let ((?x55783 (* l_0_16_153 l_0_16_153)))
 (let ((?x55781 (* l_0_16_152 l_0_16_152)))
 (let ((?x55779 (* l_0_16_151 l_0_16_151)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55777 (* ?x55644 l_0_16_144)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55775 (* ?x55641 l_0_16_143)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55773 (* ?x8249 l_0_16_142)))
 (let ((?x44575 (* l_0_16_111 l_0_16_111)))
 (let ((?x55772 (+ (+ (* l_0_16_109 l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x44575)))
 (let ((?x55785 (+ (- (- (- (+ (+ (+ ?x55772 ?x55773) ?x55775) ?x55777) ?x55779) ?x55781) ?x55783) ?x55358)))
 (let ((?x55795 (- (- (+ (+ (+ (+ (+ ?x55785 ?x55363) ?x55787) ?x55789) ?x55791) ?x55372) ?x55396) ?x55404)))
 (let ((?x55805 (+ (- (- (- (- (- (- ?x55795 ?x55406) ?x55408) ?x55410) ?x55799) ?x55801) ?x55803) ?x55418)))
 (let ((?x55818 (- (- (- (+ (+ (+ (+ ?x55805 ?x55420) ?x55807) ?x55809) ?x55811) ?x55813) ?x55815) ?x55817)))
 (= ?x55818 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53881 (* l_0_16_9 l_0_16_9)))
 (let ((?x53882 (* 6.0 ?x53881)))
 (let ((?x53878 (* l_0_16_8 l_0_16_8)))
 (let ((?x53879 (* 6.0 ?x53878)))
 (let ((?x53875 (* l_0_16_73 l_0_16_73)))
 (let ((?x55900 (* 3.0 ?x53875)))
 (let ((?x53872 (* l_0_16_72 l_0_16_72)))
 (let ((?x55898 (* 3.0 ?x53872)))
 (let ((?x53869 (* l_0_16_71 l_0_16_71)))
 (let ((?x55896 (* 3.0 ?x53869)))
 (let ((?x53866 (* l_0_16_70 l_0_16_70)))
 (let ((?x55894 (* 3.0 ?x53866)))
 (let ((?x53863 (* l_0_16_7 l_0_16_7)))
 (let ((?x53864 (* 6.0 ?x53863)))
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55117 (* ?x55116 l_0_16_72)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55114 (* ?x55113 l_0_16_71)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55111 (* ?x55110 l_0_16_70)))
 (let ((?x55888 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x55885 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x55882 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55096 (* ?x55095 l_0_16_51)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55093 (* ?x55092 l_0_16_50)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55090 (* ?x55089 l_0_16_49)))
 (let ((?x53845 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x53842 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x53839 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x53836 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x55869 (* l_0_16_136 l_0_16_136)))
 (let ((?x55867 (* l_0_16_135 l_0_16_135)))
 (let ((?x55865 (* l_0_16_134 l_0_16_134)))
 (let ((?x55863 (* l_0_16_133 l_0_16_133)))
 (let ((?x53800 (* l_0_16_10 l_0_16_10)))
 (let ((?x53801 (* 6.0 ?x53800)))
 (let ((?x55873 (- (- (- (+ (+ (+ (+ ?x53801 ?x55863) ?x55865) ?x55867) ?x55869) ?x53836) ?x53839) ?x53842)))
 (let ((?x55880 (- (+ (+ (+ (- ?x55873 ?x53845) ?x55090) ?x55093) ?x55096) (* (* 3.0 l_0_16_49) l_0_16_49))))
 (let ((?x55893 (+ (- (- (- (- (- (- ?x55880 ?x55882) ?x55885) ?x55888) ?x55111) ?x55114) ?x55117) ?x53864)))
 (= (+ (+ (+ (+ (+ (+ ?x55893 ?x55894) ?x55896) ?x55898) ?x55900) ?x53879) ?x53882) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55997 (* 6.0 l_0_16_73)))
 (let ((?x55998 (* ?x55997 l_0_16_77)))
 (let ((?x55994 (* 6.0 l_0_16_72)))
 (let ((?x55995 (* ?x55994 l_0_16_76)))
 (let ((?x55991 (* 6.0 l_0_16_71)))
 (let ((?x55992 (* ?x55991 l_0_16_75)))
 (let ((?x55988 (* 6.0 l_0_16_70)))
 (let ((?x55989 (* ?x55988 l_0_16_74)))
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55276 (* ?x55116 l_0_16_76)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55274 (* ?x55113 l_0_16_75)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55272 (* ?x55110 l_0_16_74)))
 (let ((?x55982 (* 6.0 l_0_16_52)))
 (let ((?x55983 (* ?x55982 l_0_16_56)))
 (let ((?x55979 (* 6.0 l_0_16_51)))
 (let ((?x55980 (* ?x55979 l_0_16_55)))
 (let ((?x55976 (* 6.0 l_0_16_50)))
 (let ((?x55977 (* ?x55976 l_0_16_54)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55266 (* ?x55095 l_0_16_55)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55264 (* ?x55092 l_0_16_54)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55262 (* ?x55089 l_0_16_53)))
 (let ((?x55967 (* 12.0 l_0_16_31)))
 (let ((?x55968 (* ?x55967 l_0_16_35)))
 (let ((?x55964 (* 12.0 l_0_16_30)))
 (let ((?x55965 (* ?x55964 l_0_16_34)))
 (let ((?x55961 (* 12.0 l_0_16_29)))
 (let ((?x55962 (* ?x55961 l_0_16_33)))
 (let ((?x55958 (* 12.0 l_0_16_28)))
 (let ((?x55959 (* ?x55958 l_0_16_32)))
 (let ((?x55955 (* 2.0 l_0_16_136)))
 (let ((?x55956 (* ?x55955 l_0_16_140)))
 (let ((?x55952 (* 2.0 l_0_16_135)))
 (let ((?x55953 (* ?x55952 l_0_16_139)))
 (let ((?x55949 (* 2.0 l_0_16_134)))
 (let ((?x55950 (* ?x55949 l_0_16_138)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55645 (* ?x55644 l_0_16_135)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55642 (* ?x55641 l_0_16_134)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55640 (* ?x8249 l_0_16_133)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x55941 (* ?x55221 l_0_16_9)))
 (let ((?x55938 (+ (* (* 12.0 l_0_16_10) l_0_16_14) (* (* 12.0 l_0_16_11) l_0_16_7))))
 (let ((?x55940 (+ ?x55938 (* (* 12.0 l_0_16_12) l_0_16_8))))
 (let ((?x55948 (+ (- (- (- (+ ?x55940 ?x55941) ?x55640) ?x55642) ?x55645) (* (* 2.0 l_0_16_133) l_0_16_137))))
 (let ((?x55969 (- (- (- (- (+ (+ (+ ?x55948 ?x55950) ?x55953) ?x55956) ?x55959) ?x55962) ?x55965) ?x55968)))
 (let ((?x55975 (- (+ (+ (+ ?x55969 ?x55262) ?x55264) ?x55266) (* (* 6.0 l_0_16_49) l_0_16_53))))
 (let ((?x55990 (+ (- (- (- (- (- (- ?x55975 ?x55977) ?x55980) ?x55983) ?x55272) ?x55274) ?x55276) ?x55989)))
 (= (+ (+ (+ ?x55990 ?x55992) ?x55995) ?x55998) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56130 (* 2.0 l_0_16_90)))
 (let ((?x56131 (* ?x56130 l_0_16_93)))
 (let ((?x56127 (* 2.0 l_0_16_89)))
 (let ((?x56128 (* ?x56127 l_0_16_92)))
 (let ((?x56124 (* 2.0 l_0_16_88)))
 (let ((?x56125 (* ?x56124 l_0_16_91)))
 (let ((?x55997 (* 6.0 l_0_16_73)))
 (let ((?x56122 (* ?x55997 l_0_16_82)))
 (let ((?x55994 (* 6.0 l_0_16_72)))
 (let ((?x56120 (* ?x55994 l_0_16_81)))
 (let ((?x55991 (* 6.0 l_0_16_71)))
 (let ((?x56118 (* ?x55991 l_0_16_80)))
 (let ((?x55988 (* 6.0 l_0_16_70)))
 (let ((?x56116 (* ?x55988 l_0_16_79)))
 (let ((?x55116 (* 2.0 l_0_16_69)))
 (let ((?x55426 (* ?x55116 l_0_16_81)))
 (let ((?x55113 (* 2.0 l_0_16_68)))
 (let ((?x55424 (* ?x55113 l_0_16_80)))
 (let ((?x55110 (* 2.0 l_0_16_67)))
 (let ((?x55422 (* ?x55110 l_0_16_79)))
 (let ((?x55982 (* 6.0 l_0_16_52)))
 (let ((?x56111 (* ?x55982 l_0_16_61)))
 (let ((?x55979 (* 6.0 l_0_16_51)))
 (let ((?x56109 (* ?x55979 l_0_16_60)))
 (let ((?x55976 (* 6.0 l_0_16_50)))
 (let ((?x56107 (* ?x55976 l_0_16_59)))
 (let ((?x55095 (* 2.0 l_0_16_48)))
 (let ((?x55416 (* ?x55095 l_0_16_60)))
 (let ((?x55092 (* 2.0 l_0_16_47)))
 (let ((?x55414 (* ?x55092 l_0_16_59)))
 (let ((?x55089 (* 2.0 l_0_16_46)))
 (let ((?x55412 (* ?x55089 l_0_16_58)))
 (let ((?x55967 (* 12.0 l_0_16_31)))
 (let ((?x56100 (* ?x55967 l_0_16_40)))
 (let ((?x55964 (* 12.0 l_0_16_30)))
 (let ((?x56098 (* ?x55964 l_0_16_39)))
 (let ((?x55961 (* 12.0 l_0_16_29)))
 (let ((?x56096 (* ?x55961 l_0_16_38)))
 (let ((?x55958 (* 12.0 l_0_16_28)))
 (let ((?x56094 (* ?x55958 l_0_16_37)))
 (let ((?x55371 (* 12.0 l_0_16_18)))
 (let ((?x56092 (* ?x55371 l_0_16_9)))
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56090 (* ?x56089 l_0_16_177)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56087 (* ?x56086 l_0_16_176)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56084 (* ?x56083 l_0_16_175)))
 (let ((?x55360 (* 12.0 l_0_16_17)))
 (let ((?x56081 (* ?x55360 l_0_16_8)))
 (let ((?x55355 (* 12.0 l_0_16_16)))
 (let ((?x56079 (* ?x55355 l_0_16_7)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56077 (* ?x56076 l_0_16_156)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56074 (* ?x56073 l_0_16_155)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56071 (* ?x56070 l_0_16_154)))
 (let ((?x55955 (* 2.0 l_0_16_136)))
 (let ((?x56068 (* ?x55955 l_0_16_145)))
 (let ((?x55952 (* 2.0 l_0_16_135)))
 (let ((?x56066 (* ?x55952 l_0_16_144)))
 (let ((?x55949 (* 2.0 l_0_16_134)))
 (let ((?x56064 (* ?x55949 l_0_16_143)))
 (let ((?x55946 (* 2.0 l_0_16_133)))
 (let ((?x56062 (* ?x55946 l_0_16_142)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56060 (* ?x56059 l_0_16_114)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56057 (* ?x56042 l_0_16_113)))
 (let ((?x8522 (* 12.0 l_0_16_10)))
 (let ((?x31607 (* ?x8522 l_0_16_19)))
 (let ((?x56063 (+ (+ (+ (+ ?x31607 (* (* 2.0 l_0_16_109) l_0_16_112)) ?x56057) ?x56060) ?x56062)))
 (let ((?x56080 (+ (- (- (- (+ (+ (+ ?x56063 ?x56064) ?x56066) ?x56068) ?x56071) ?x56074) ?x56077) ?x56079)))
 (let ((?x56097 (- (- (+ (+ (+ (+ (+ ?x56080 ?x56081) ?x56084) ?x56087) ?x56090) ?x56092) ?x56094) ?x56096)))
 (let ((?x56106 (- (+ (+ (+ (- (- ?x56097 ?x56098) ?x56100) ?x55412) ?x55414) ?x55416) (* (* 6.0 l_0_16_49) l_0_16_58))))
 (let ((?x56117 (+ (- (- (- (- (- (- ?x56106 ?x56107) ?x56109) ?x56111) ?x55422) ?x55424) ?x55426) ?x56116)))
 (= (- (- (- (+ (+ (+ ?x56117 ?x56118) ?x56120) ?x56122) ?x56125) ?x56128) ?x56131) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56280 (* l_0_16_78 l_0_16_78)))
 (let ((?x56281 (* 3.0 ?x56280)))
 (let ((?x56277 (* l_0_16_77 l_0_16_77)))
 (let ((?x56278 (* 3.0 ?x56277)))
 (let ((?x56274 (* l_0_16_76 l_0_16_76)))
 (let ((?x56275 (* 3.0 ?x56274)))
 (let ((?x56271 (* l_0_16_75 l_0_16_75)))
 (let ((?x56272 (* 3.0 ?x56271)))
 (let ((?x56268 (* l_0_16_74 l_0_16_74)))
 (let ((?x56269 (* 3.0 ?x56268)))
 (let ((?x56266 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x56263 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x56260 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x56257 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x56251 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x56248 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x56245 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x56242 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x56239 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x54847 (* l_0_16_15 l_0_16_15)))
 (let ((?x56236 (* 6.0 ?x54847)))
 (let ((?x56234 (* l_0_16_141 l_0_16_141)))
 (let ((?x56232 (* l_0_16_140 l_0_16_140)))
 (let ((?x54845 (* l_0_16_14 l_0_16_14)))
 (let ((?x56230 (* 6.0 ?x54845)))
 (let ((?x56228 (* l_0_16_139 l_0_16_139)))
 (let ((?x56226 (* l_0_16_138 l_0_16_138)))
 (let ((?x56224 (* l_0_16_137 l_0_16_137)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55736 (* ?x55644 l_0_16_139)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55733 (* ?x55641 l_0_16_138)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55730 (* ?x8249 l_0_16_137)))
 (let ((?x54843 (* l_0_16_13 l_0_16_13)))
 (let ((?x56219 (* 6.0 ?x54843)))
 (let ((?x56218 (+ (* 6.0 (* l_0_16_11 l_0_16_11)) (* 6.0 (* l_0_16_12 l_0_16_12)))))
 (let ((?x56229 (+ (+ (+ (- (- (- (+ ?x56218 ?x56219) ?x55730) ?x55733) ?x55736) ?x56224) ?x56226) ?x56228)))
 (let ((?x56246 (- (- (- (+ (+ (+ (+ ?x56229 ?x56230) ?x56232) ?x56234) ?x56236) ?x56239) ?x56242) ?x56245)))
 (let ((?x56258 (- (- (- (- ?x56246 ?x56248) ?x56251) (* (* 3.0 l_0_16_53) l_0_16_53)) ?x56257)))
 (let ((?x56279 (+ (+ (+ (+ (- (- (- ?x56258 ?x56260) ?x56263) ?x56266) ?x56269) ?x56272) ?x56275) ?x56278)))
 (= (+ ?x56279 ?x56281) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56130 (* 2.0 l_0_16_90)))
 (let ((?x56422 (* ?x56130 l_0_16_97)))
 (let ((?x56127 (* 2.0 l_0_16_89)))
 (let ((?x56420 (* ?x56127 l_0_16_96)))
 (let ((?x56124 (* 2.0 l_0_16_88)))
 (let ((?x56418 (* ?x56124 l_0_16_95)))
 (let ((?x56416 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x56413 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x56410 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x56407 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x56404 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x56401 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x56398 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x56395 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x56392 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x56386 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56383 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56380 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56377 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56374 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56371 (* ?x56089 l_0_16_181)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56369 (* ?x56086 l_0_16_180)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56367 (* ?x56083 l_0_16_179)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56365 (* ?x56076 l_0_16_160)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56363 (* ?x56073 l_0_16_159)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56361 (* ?x56070 l_0_16_158)))
 (let ((?x56359 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x56356 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56353 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56350 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x56347 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56344 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56341 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x55644 (* 2.0 l_0_16_132)))
 (let ((?x55777 (* ?x55644 l_0_16_144)))
 (let ((?x55641 (* 2.0 l_0_16_131)))
 (let ((?x55775 (* ?x55641 l_0_16_143)))
 (let ((?x8249 (* 2.0 l_0_16_130)))
 (let ((?x55773 (* ?x8249 l_0_16_142)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x56335 (* ?x55221 l_0_16_18)))
 (let ((?x55196 (* 12.0 l_0_16_12)))
 (let ((?x56333 (* ?x55196 l_0_16_17)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56331 (* ?x56059 l_0_16_118)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56329 (* ?x56042 l_0_16_117)))
 (let ((?x7769 (* 12.0 l_0_16_11)))
 (let ((?x56327 (* ?x7769 l_0_16_16)))
 (let ((?x56334 (+ (+ (+ (+ (* (* 2.0 l_0_16_109) l_0_16_116) ?x56327) ?x56329) ?x56331) ?x56333)))
 (let ((?x56348 (+ (+ (+ (- (- (- (+ ?x56334 ?x56335) ?x55773) ?x55775) ?x55777) ?x56341) ?x56344) ?x56347)))
 (let ((?x56366 (- (- (- (+ (+ (+ (+ ?x56348 ?x56350) ?x56353) ?x56356) ?x56359) ?x56361) ?x56363) ?x56365)))
 (let ((?x56384 (- (- (- (- (+ (+ (+ ?x56366 ?x56367) ?x56369) ?x56371) ?x56374) ?x56377) ?x56380) ?x56383)))
 (let ((?x56396 (- (- (- (- ?x56384 ?x56386) (* (* 6.0 l_0_16_53) l_0_16_58)) ?x56392) ?x56395)))
 (let ((?x56417 (+ (+ (+ (+ (+ (- (- ?x56396 ?x56398) ?x56401) ?x56404) ?x56407) ?x56410) ?x56413) ?x56416)))
 (= (- (- (- ?x56417 ?x56418) ?x56420) ?x56422) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56564 (* l_0_16_84 l_0_16_84)))
 (let ((?x56565 (* 3.0 ?x56564)))
 (let ((?x56561 (* l_0_16_83 l_0_16_83)))
 (let ((?x56562 (* 3.0 ?x56561)))
 (let ((?x56558 (* l_0_16_82 l_0_16_82)))
 (let ((?x56559 (* 3.0 ?x56558)))
 (let ((?x56555 (* l_0_16_81 l_0_16_81)))
 (let ((?x56556 (* 3.0 ?x56555)))
 (let ((?x56552 (* l_0_16_80 l_0_16_80)))
 (let ((?x56553 (* 3.0 ?x56552)))
 (let ((?x56549 (* l_0_16_79 l_0_16_79)))
 (let ((?x56550 (* 3.0 ?x56549)))
 (let ((?x56547 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x56544 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x56541 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x56538 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x56535 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x56529 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x56526 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x56523 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x56520 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x56517 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x56514 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x54979 (* l_0_16_21 l_0_16_21)))
 (let ((?x56511 (* 6.0 ?x54979)))
 (let ((?x54977 (* l_0_16_20 l_0_16_20)))
 (let ((?x56509 (* 6.0 ?x54977)))
 (let ((?x54975 (* l_0_16_19 l_0_16_19)))
 (let ((?x56507 (* 6.0 ?x54975)))
 (let ((?x54973 (* l_0_16_18 l_0_16_18)))
 (let ((?x56505 (* 6.0 ?x54973)))
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56503 (* ?x56089 l_0_16_186)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56501 (* ?x56086 l_0_16_185)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56499 (* ?x56083 l_0_16_184)))
 (let ((?x54971 (* l_0_16_17 l_0_16_17)))
 (let ((?x56497 (* 6.0 ?x54971)))
 (let ((?x54967 (* l_0_16_16 l_0_16_16)))
 (let ((?x56495 (* 6.0 ?x54967)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56493 (* ?x56076 l_0_16_165)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56491 (* ?x56073 l_0_16_164)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56489 (* ?x56070 l_0_16_163)))
 (let ((?x56487 (* l_0_16_147 l_0_16_147)))
 (let ((?x56485 (* l_0_16_146 l_0_16_146)))
 (let ((?x56483 (* l_0_16_145 l_0_16_145)))
 (let ((?x56481 (* l_0_16_144 l_0_16_144)))
 (let ((?x56479 (* l_0_16_143 l_0_16_143)))
 (let ((?x56477 (* l_0_16_142 l_0_16_142)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56475 (* ?x56059 l_0_16_123)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56473 (* ?x56042 l_0_16_122)))
 (let ((?x56037 (* 2.0 l_0_16_109)))
 (let ((?x56471 (* ?x56037 l_0_16_121)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x56469 (* ?x56468 l_0_16_90)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x45083 (* ?x45082 l_0_16_89)))
 (let ((?x56474 (+ (+ (- (- (* (* (- 2.0) l_0_16_100) l_0_16_88) ?x45083) ?x56469) ?x56471) ?x56473)))
 (let ((?x56488 (+ (+ (+ (+ (+ (+ (+ ?x56474 ?x56475) ?x56477) ?x56479) ?x56481) ?x56483) ?x56485) ?x56487)))
 (let ((?x56502 (+ (+ (+ (+ (- (- (- ?x56488 ?x56489) ?x56491) ?x56493) ?x56495) ?x56497) ?x56499) ?x56501)))
 (let ((?x56518 (- (- (+ (+ (+ (+ (+ ?x56502 ?x56503) ?x56505) ?x56507) ?x56509) ?x56511) ?x56514) ?x56517)))
 (let ((?x56533 (- (- (- (- (- ?x56518 ?x56520) ?x56523) ?x56526) ?x56529) (* (* 3.0 l_0_16_58) l_0_16_58))))
 (let ((?x56554 (+ (+ (- (- (- (- (- ?x56533 ?x56535) ?x56538) ?x56541) ?x56544) ?x56547) ?x56550) ?x56553)))
 (= (+ (+ (+ (+ ?x56554 ?x56556) ?x56559) ?x56562) ?x56565) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x56660 (* ?x53654 l_0_16_75)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x56658 (* ?x53650 l_0_16_74)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x56656 (* ?x53646 l_0_16_54)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x56654 (* ?x53642 l_0_16_53)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x55244 (* ?x53630 l_0_16_33)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x55236 (* ?x53621 l_0_16_32)))
 (let ((?x54081 (* l_0_16_129 l_0_16_129)))
 (let ((?x54080 (* l_0_16_128 l_0_16_128)))
 (let ((?x55196 (* 12.0 l_0_16_12)))
 (let ((?x55211 (* ?x55196 l_0_16_3)))
 (let ((?x7769 (* 12.0 l_0_16_11)))
 (let ((?x55191 (* ?x7769 l_0_16_2)))
 (let ((?x56637 (- (- (- (+ ?x55191 ?x55211) ?x54080) ?x54081) (* (* 2.0 l_0_16_191) l_0_16_200))))
 (let ((?x56641 (- (- ?x56637 (* (* 2.0 l_0_16_192) l_0_16_201)) (* (* 2.0 l_0_16_212) l_0_16_221))))
 (let ((?x56646 (- (- (- ?x56641 (* (* 2.0 l_0_16_213) l_0_16_222)) ?x55236) (* (* 2.0 l_0_16_233) l_0_16_242))))
 (let ((?x56651 (- (- (- ?x56646 (* (* 2.0 l_0_16_234) l_0_16_243)) ?x55244) (* (* 2.0 l_0_16_254) l_0_16_263))))
 (let ((?x56659 (+ (- (- (- ?x56651 (* (* 2.0 l_0_16_255) l_0_16_264)) ?x56654) ?x56656) ?x56658)))
 (= (+ ?x56659 ?x56660) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x55610 (* l_0_16_87 l_0_16_87)))
 (let ((?x55608 (* l_0_16_86 l_0_16_86)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x56713 (* ?x53654 l_0_16_80)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x56711 (* ?x53650 l_0_16_79)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x56709 (* ?x53646 l_0_16_59)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x56707 (* ?x53642 l_0_16_58)))
 (let ((?x53630 (* 12.0 l_0_16_24)))
 (let ((?x55394 (* ?x53630 l_0_16_38)))
 (let ((?x53621 (* 12.0 l_0_16_23)))
 (let ((?x55386 (* ?x53621 l_0_16_37)))
 (let ((?x55581 (* l_0_16_171 l_0_16_171)))
 (let ((?x55579 (* l_0_16_170 l_0_16_170)))
 (let ((?x55360 (* 12.0 l_0_16_17)))
 (let ((?x55361 (* ?x55360 l_0_16_3)))
 (let ((?x55355 (* 12.0 l_0_16_16)))
 (let ((?x55356 (* ?x55355 l_0_16_2)))
 (let ((?x55577 (* l_0_16_150 l_0_16_150)))
 (let ((?x55575 (* l_0_16_149 l_0_16_149)))
 (let ((?x56676 (- (+ (* l_0_16_107 l_0_16_107) (* l_0_16_108 l_0_16_108)) ?x55575)))
 (let ((?x56690 (- (+ (+ (+ (+ (- ?x56676 ?x55577) ?x55356) ?x55361) ?x55579) ?x55581) (* (* 2.0 l_0_16_191) l_0_16_205))))
 (let ((?x56694 (- (- ?x56690 (* (* 2.0 l_0_16_192) l_0_16_206)) (* (* 2.0 l_0_16_212) l_0_16_226))))
 (let ((?x56699 (- (- (- ?x56694 (* (* 2.0 l_0_16_213) l_0_16_227)) ?x55386) (* (* 2.0 l_0_16_233) l_0_16_247))))
 (let ((?x56704 (- (- (- ?x56699 (* (* 2.0 l_0_16_234) l_0_16_248)) ?x55394) (* (* 2.0 l_0_16_254) l_0_16_268))))
 (let ((?x56712 (+ (- (- (- ?x56704 (* (* 2.0 l_0_16_255) l_0_16_269)) ?x56707) ?x56709) ?x56711)))
 (= (- (- (+ ?x56712 ?x56713) ?x55608) ?x55610) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56796 (* 2.0 l_0_16_73)))
 (let ((?x56797 (* ?x56796 l_0_16_77)))
 (let ((?x56793 (* 2.0 l_0_16_72)))
 (let ((?x56794 (* ?x56793 l_0_16_76)))
 (let ((?x56790 (* 2.0 l_0_16_71)))
 (let ((?x56791 (* ?x56790 l_0_16_75)))
 (let ((?x56787 (* 2.0 l_0_16_70)))
 (let ((?x56788 (* ?x56787 l_0_16_74)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x56660 (* ?x53654 l_0_16_75)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x56658 (* ?x53650 l_0_16_74)))
 (let ((?x56782 (* 2.0 l_0_16_52)))
 (let ((?x56783 (* ?x56782 l_0_16_56)))
 (let ((?x56779 (* 2.0 l_0_16_51)))
 (let ((?x56780 (* ?x56779 l_0_16_55)))
 (let ((?x56776 (* 2.0 l_0_16_50)))
 (let ((?x56777 (* ?x56776 l_0_16_54)))
 (let ((?x56773 (* 2.0 l_0_16_49)))
 (let ((?x56774 (* ?x56773 l_0_16_53)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x56656 (* ?x53646 l_0_16_54)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x56654 (* ?x53642 l_0_16_53)))
 (let ((?x55967 (* 12.0 l_0_16_31)))
 (let ((?x55968 (* ?x55967 l_0_16_35)))
 (let ((?x55964 (* 12.0 l_0_16_30)))
 (let ((?x55965 (* ?x55964 l_0_16_34)))
 (let ((?x55961 (* 12.0 l_0_16_29)))
 (let ((?x55962 (* ?x55961 l_0_16_33)))
 (let ((?x55958 (* 12.0 l_0_16_28)))
 (let ((?x55959 (* ?x55958 l_0_16_32)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x55941 (* ?x55221 l_0_16_9)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55029 (* ?x43785 l_0_16_134)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55017 (* ?x43793 l_0_16_133)))
 (let ((?x55938 (+ (* (* 12.0 l_0_16_10) l_0_16_14) (* (* 12.0 l_0_16_11) l_0_16_7))))
 (let ((?x55940 (+ ?x55938 (* (* 12.0 l_0_16_12) l_0_16_8))))
 (let ((?x45499 (- (+ (- (- ?x55940 ?x55017) ?x55029) ?x55941) (* (* 2.0 l_0_16_196) l_0_16_200))))
 (let ((?x9609 (- (- ?x45499 (* (* 2.0 l_0_16_197) l_0_16_201)) (* (* 2.0 l_0_16_198) l_0_16_202))))
 (let ((?x56733 (- (- ?x9609 (* (* 2.0 l_0_16_199) l_0_16_203)) (* (* 2.0 l_0_16_217) l_0_16_221))))
 (let ((?x56739 (- (- ?x56733 (* (* 2.0 l_0_16_218) l_0_16_222)) (* (* 2.0 l_0_16_219) l_0_16_223))))
 (let ((?x56745 (- (- ?x56739 (* (* 2.0 l_0_16_220) l_0_16_224)) (* (* 2.0 l_0_16_238) l_0_16_242))))
 (let ((?x56751 (- (- ?x56745 (* (* 2.0 l_0_16_239) l_0_16_243)) (* (* 2.0 l_0_16_240) l_0_16_244))))
 (let ((?x56757 (- (- ?x56751 (* (* 2.0 l_0_16_241) l_0_16_245)) (* (* 2.0 l_0_16_259) l_0_16_263))))
 (let ((?x56763 (- (- ?x56757 (* (* 2.0 l_0_16_260) l_0_16_264)) (* (* 2.0 l_0_16_261) l_0_16_265))))
 (let ((?x56769 (- (- (- (- ?x56763 (* (* 2.0 l_0_16_262) l_0_16_266)) ?x55959) ?x55962) ?x55965)))
 (let ((?x56784 (- (- (- (- (+ (+ (- ?x56769 ?x55968) ?x56654) ?x56656) ?x56774) ?x56777) ?x56780) ?x56783)))
 (= (+ (+ (+ (+ (- (- ?x56784 ?x56658) ?x56660) ?x56788) ?x56791) ?x56794) ?x56797) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x56927 (* ?x55431 l_0_16_92)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x56925 (* ?x55428 l_0_16_91)))
 (let ((?x56796 (* 2.0 l_0_16_73)))
 (let ((?x56923 (* ?x56796 l_0_16_82)))
 (let ((?x56793 (* 2.0 l_0_16_72)))
 (let ((?x56921 (* ?x56793 l_0_16_81)))
 (let ((?x56790 (* 2.0 l_0_16_71)))
 (let ((?x56919 (* ?x56790 l_0_16_80)))
 (let ((?x56787 (* 2.0 l_0_16_70)))
 (let ((?x56917 (* ?x56787 l_0_16_79)))
 (let ((?x53654 (* 2.0 l_0_16_66)))
 (let ((?x56713 (* ?x53654 l_0_16_80)))
 (let ((?x53650 (* 2.0 l_0_16_65)))
 (let ((?x56711 (* ?x53650 l_0_16_79)))
 (let ((?x56782 (* 2.0 l_0_16_52)))
 (let ((?x56913 (* ?x56782 l_0_16_61)))
 (let ((?x56779 (* 2.0 l_0_16_51)))
 (let ((?x56911 (* ?x56779 l_0_16_60)))
 (let ((?x56776 (* 2.0 l_0_16_50)))
 (let ((?x56909 (* ?x56776 l_0_16_59)))
 (let ((?x56773 (* 2.0 l_0_16_49)))
 (let ((?x56907 (* ?x56773 l_0_16_58)))
 (let ((?x53646 (* 2.0 l_0_16_45)))
 (let ((?x56709 (* ?x53646 l_0_16_59)))
 (let ((?x53642 (* 2.0 l_0_16_44)))
 (let ((?x56707 (* ?x53642 l_0_16_58)))
 (let ((?x55967 (* 12.0 l_0_16_31)))
 (let ((?x56100 (* ?x55967 l_0_16_40)))
 (let ((?x55964 (* 12.0 l_0_16_30)))
 (let ((?x56098 (* ?x55964 l_0_16_39)))
 (let ((?x55961 (* 12.0 l_0_16_29)))
 (let ((?x56096 (* ?x55961 l_0_16_38)))
 (let ((?x55958 (* 12.0 l_0_16_28)))
 (let ((?x56094 (* ?x55958 l_0_16_37)))
 (let ((?x55371 (* 12.0 l_0_16_18)))
 (let ((?x56092 (* ?x55371 l_0_16_9)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x56866 (* ?x55368 l_0_16_176)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x56864 (* ?x55365 l_0_16_175)))
 (let ((?x55360 (* 12.0 l_0_16_17)))
 (let ((?x56081 (* ?x55360 l_0_16_8)))
 (let ((?x55355 (* 12.0 l_0_16_16)))
 (let ((?x56079 (* ?x55355 l_0_16_7)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x56860 (* ?x55352 l_0_16_155)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x45726 (* ?x55349 l_0_16_154)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x45733 (* ?x55342 l_0_16_113)))
 (let ((?x8522 (* 12.0 l_0_16_10)))
 (let ((?x31607 (* ?x8522 l_0_16_19)))
 (let ((?x56861 (- (- (+ (+ ?x31607 (* (* 2.0 l_0_16_107) l_0_16_112)) ?x45733) ?x45726) ?x56860)))
 (let ((?x56870 (- (+ (+ (+ (+ (+ ?x56861 ?x56079) ?x56081) ?x56864) ?x56866) ?x56092) (* (* 2.0 l_0_16_196) l_0_16_205))))
 (let ((?x56874 (- (- ?x56870 (* (* 2.0 l_0_16_197) l_0_16_206)) (* (* 2.0 l_0_16_198) l_0_16_207))))
 (let ((?x56878 (- (- ?x56874 (* (* 2.0 l_0_16_199) l_0_16_208)) (* (* 2.0 l_0_16_217) l_0_16_226))))
 (let ((?x56882 (- (- ?x56878 (* (* 2.0 l_0_16_218) l_0_16_227)) (* (* 2.0 l_0_16_219) l_0_16_228))))
 (let ((?x56886 (- (- ?x56882 (* (* 2.0 l_0_16_220) l_0_16_229)) (* (* 2.0 l_0_16_238) l_0_16_247))))
 (let ((?x56890 (- (- ?x56886 (* (* 2.0 l_0_16_239) l_0_16_248)) (* (* 2.0 l_0_16_240) l_0_16_249))))
 (let ((?x56894 (- (- ?x56890 (* (* 2.0 l_0_16_241) l_0_16_250)) (* (* 2.0 l_0_16_259) l_0_16_268))))
 (let ((?x56898 (- (- ?x56894 (* (* 2.0 l_0_16_260) l_0_16_269)) (* (* 2.0 l_0_16_261) l_0_16_270))))
 (let ((?x56903 (- (- (- (- ?x56898 (* (* 2.0 l_0_16_262) l_0_16_271)) ?x56094) ?x56096) ?x56098)))
 (let ((?x56914 (- (- (- (- (+ (+ (- ?x56903 ?x56100) ?x56707) ?x56709) ?x56907) ?x56909) ?x56911) ?x56913)))
 (let ((?x56926 (- (+ (+ (+ (+ (- (- ?x56914 ?x56711) ?x56713) ?x56917) ?x56919) ?x56921) ?x56923) ?x56925)))
 (= (- ?x56926 ?x56927) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56251 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x56248 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x56245 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x56242 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x56239 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x56979 (* l_0_16_267 l_0_16_267)))
 (let ((?x56977 (* l_0_16_266 l_0_16_266)))
 (let ((?x56975 (* l_0_16_265 l_0_16_265)))
 (let ((?x56973 (* l_0_16_264 l_0_16_264)))
 (let ((?x56971 (* l_0_16_263 l_0_16_263)))
 (let ((?x56969 (* l_0_16_246 l_0_16_246)))
 (let ((?x56967 (* l_0_16_245 l_0_16_245)))
 (let ((?x56965 (* l_0_16_244 l_0_16_244)))
 (let ((?x56963 (* l_0_16_243 l_0_16_243)))
 (let ((?x56961 (* l_0_16_242 l_0_16_242)))
 (let ((?x56959 (* l_0_16_225 l_0_16_225)))
 (let ((?x56957 (* l_0_16_224 l_0_16_224)))
 (let ((?x56955 (* l_0_16_223 l_0_16_223)))
 (let ((?x56953 (* l_0_16_222 l_0_16_222)))
 (let ((?x56951 (* l_0_16_221 l_0_16_221)))
 (let ((?x56949 (* l_0_16_204 l_0_16_204)))
 (let ((?x56947 (* l_0_16_203 l_0_16_203)))
 (let ((?x56945 (* l_0_16_202 l_0_16_202)))
 (let ((?x56943 (* l_0_16_201 l_0_16_201)))
 (let ((?x56941 (* l_0_16_200 l_0_16_200)))
 (let ((?x54847 (* l_0_16_15 l_0_16_15)))
 (let ((?x56236 (* 6.0 ?x54847)))
 (let ((?x54845 (* l_0_16_14 l_0_16_14)))
 (let ((?x56230 (* 6.0 ?x54845)))
 (let ((?x54843 (* l_0_16_13 l_0_16_13)))
 (let ((?x56219 (* 6.0 ?x54843)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55219 (* ?x43785 l_0_16_138)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55216 (* ?x43793 l_0_16_137)))
 (let ((?x56218 (+ (* 6.0 (* l_0_16_11 l_0_16_11)) (* 6.0 (* l_0_16_12 l_0_16_12)))))
 (let ((?x56944 (- (- (+ (+ (+ (- (- ?x56218 ?x55216) ?x55219) ?x56219) ?x56230) ?x56236) ?x56941) ?x56943)))
 (let ((?x56958 (- (- (- (- (- (- (- ?x56944 ?x56945) ?x56947) ?x56949) ?x56951) ?x56953) ?x56955) ?x56957)))
 (let ((?x56972 (- (- (- (- (- (- (- ?x56958 ?x56959) ?x56961) ?x56963) ?x56965) ?x56967) ?x56969) ?x56971)))
 (let ((?x56983 (- (- (- (- (- (- (- ?x56972 ?x56973) ?x56975) ?x56977) ?x56979) ?x56239) ?x56242) ?x56245)))
 (let ((?x56991 (- (- (- (- ?x56983 ?x56248) ?x56251) (* (* 1.0 l_0_16_53) l_0_16_53)) (* (* 1.0 l_0_16_54) l_0_16_54))))
 (let ((?x56997 (- (- ?x56991 (* (* 1.0 l_0_16_55) l_0_16_55)) (* (* 1.0 l_0_16_56) l_0_16_56))))
 (let ((?x57002 (+ (- ?x56997 (* (* 1.0 l_0_16_57) l_0_16_57)) (* 1.0 (* l_0_16_74 l_0_16_74)))))
 (let ((?x57006 (+ (+ ?x57002 (* 1.0 (* l_0_16_75 l_0_16_75))) (* 1.0 (* l_0_16_76 l_0_16_76)))))
 (let ((?x57010 (+ (+ ?x57006 (* 1.0 (* l_0_16_77 l_0_16_77))) (* 1.0 (* l_0_16_78 l_0_16_78)))))
 (= ?x57010 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x57156 (* ?x55431 l_0_16_96)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x57154 (* ?x55428 l_0_16_95)))
 (let ((?x57152 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x57149 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x57146 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x57143 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x57140 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x57137 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x57134 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x57131 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x57128 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x57125 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x56386 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56383 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56380 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56377 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56374 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x57057 (* ?x55368 l_0_16_180)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x57055 (* ?x55365 l_0_16_179)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x57053 (* ?x55352 l_0_16_159)))
 (let ((?x56359 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x57050 (* ?x55349 l_0_16_158)))
 (let ((?x56350 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x55221 (* 12.0 l_0_16_13)))
 (let ((?x56335 (* ?x55221 l_0_16_18)))
 (let ((?x43785 (* 2.0 l_0_16_129)))
 (let ((?x55347 (* ?x43785 l_0_16_143)))
 (let ((?x43793 (* 2.0 l_0_16_128)))
 (let ((?x55345 (* ?x43793 l_0_16_142)))
 (let ((?x55196 (* 12.0 l_0_16_12)))
 (let ((?x56333 (* ?x55196 l_0_16_17)))
 (let ((?x7769 (* 12.0 l_0_16_11)))
 (let ((?x56327 (* ?x7769 l_0_16_16)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x57042 (* ?x55342 l_0_16_117)))
 (let ((?x57046 (- (+ (+ (+ (* (* 2.0 l_0_16_107) l_0_16_116) ?x57042) ?x56327) ?x56333) ?x55345)))
 (let ((?x57056 (+ (- (+ (- (+ (+ (- ?x57046 ?x55347) ?x56335) ?x56350) ?x57050) ?x56359) ?x57053) ?x57055)))
 (let ((?x57064 (- (- (+ ?x57056 ?x57057) (* (* 2.0 l_0_16_200) l_0_16_205)) (* (* 2.0 l_0_16_201) l_0_16_206))))
 (let ((?x57070 (- (- ?x57064 (* (* 2.0 l_0_16_202) l_0_16_207)) (* (* 2.0 l_0_16_203) l_0_16_208))))
 (let ((?x57076 (- (- ?x57070 (* (* 2.0 l_0_16_204) l_0_16_209)) (* (* 2.0 l_0_16_221) l_0_16_226))))
 (let ((?x57082 (- (- ?x57076 (* (* 2.0 l_0_16_222) l_0_16_227)) (* (* 2.0 l_0_16_223) l_0_16_228))))
 (let ((?x57088 (- (- ?x57082 (* (* 2.0 l_0_16_224) l_0_16_229)) (* (* 2.0 l_0_16_225) l_0_16_230))))
 (let ((?x57094 (- (- ?x57088 (* (* 2.0 l_0_16_242) l_0_16_247)) (* (* 2.0 l_0_16_243) l_0_16_248))))
 (let ((?x57100 (- (- ?x57094 (* (* 2.0 l_0_16_244) l_0_16_249)) (* (* 2.0 l_0_16_245) l_0_16_250))))
 (let ((?x57106 (- (- ?x57100 (* (* 2.0 l_0_16_246) l_0_16_251)) (* (* 2.0 l_0_16_263) l_0_16_268))))
 (let ((?x57112 (- (- ?x57106 (* (* 2.0 l_0_16_264) l_0_16_269)) (* (* 2.0 l_0_16_265) l_0_16_270))))
 (let ((?x57118 (- (- ?x57112 (* (* 2.0 l_0_16_266) l_0_16_271)) (* (* 2.0 l_0_16_267) l_0_16_272))))
 (let ((?x57129 (- (- (- (- (- (- (- ?x57118 ?x56374) ?x56377) ?x56380) ?x56383) ?x56386) ?x57125) ?x57128)))
 (let ((?x57150 (+ (+ (+ (+ (- (- (- ?x57129 ?x57131) ?x57134) ?x57137) ?x57140) ?x57143) ?x57146) ?x57149)))
 (= (- (- (+ ?x57150 ?x57152) ?x57154) ?x57156) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56529 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x56526 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x56523 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x56520 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x56517 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x56514 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x57307 (* l_0_16_273 l_0_16_273)))
 (let ((?x57305 (* l_0_16_272 l_0_16_272)))
 (let ((?x57303 (* l_0_16_271 l_0_16_271)))
 (let ((?x57301 (* l_0_16_270 l_0_16_270)))
 (let ((?x57299 (* l_0_16_269 l_0_16_269)))
 (let ((?x57297 (* l_0_16_268 l_0_16_268)))
 (let ((?x57295 (* l_0_16_252 l_0_16_252)))
 (let ((?x57293 (* l_0_16_251 l_0_16_251)))
 (let ((?x57291 (* l_0_16_250 l_0_16_250)))
 (let ((?x57289 (* l_0_16_249 l_0_16_249)))
 (let ((?x57287 (* l_0_16_248 l_0_16_248)))
 (let ((?x57285 (* l_0_16_247 l_0_16_247)))
 (let ((?x57283 (* l_0_16_231 l_0_16_231)))
 (let ((?x57281 (* l_0_16_230 l_0_16_230)))
 (let ((?x57279 (* l_0_16_229 l_0_16_229)))
 (let ((?x57277 (* l_0_16_228 l_0_16_228)))
 (let ((?x57275 (* l_0_16_227 l_0_16_227)))
 (let ((?x57273 (* l_0_16_226 l_0_16_226)))
 (let ((?x57271 (* l_0_16_210 l_0_16_210)))
 (let ((?x54979 (* l_0_16_21 l_0_16_21)))
 (let ((?x56511 (* 6.0 ?x54979)))
 (let ((?x57268 (* l_0_16_209 l_0_16_209)))
 (let ((?x57266 (* l_0_16_208 l_0_16_208)))
 (let ((?x57264 (* l_0_16_207 l_0_16_207)))
 (let ((?x57262 (* l_0_16_206 l_0_16_206)))
 (let ((?x57260 (* l_0_16_205 l_0_16_205)))
 (let ((?x54977 (* l_0_16_20 l_0_16_20)))
 (let ((?x56509 (* 6.0 ?x54977)))
 (let ((?x54975 (* l_0_16_19 l_0_16_19)))
 (let ((?x56507 (* 6.0 ?x54975)))
 (let ((?x54973 (* l_0_16_18 l_0_16_18)))
 (let ((?x56505 (* 6.0 ?x54973)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x57255 (* ?x55368 l_0_16_185)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x57253 (* ?x55365 l_0_16_184)))
 (let ((?x54971 (* l_0_16_17 l_0_16_17)))
 (let ((?x56497 (* 6.0 ?x54971)))
 (let ((?x54967 (* l_0_16_16 l_0_16_16)))
 (let ((?x56495 (* 6.0 ?x54967)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x57249 (* ?x55352 l_0_16_164)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x57247 (* ?x55349 l_0_16_163)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x57245 (* ?x55342 l_0_16_122)))
 (let ((?x55340 (* 2.0 l_0_16_107)))
 (let ((?x57243 (* ?x55340 l_0_16_121)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57241 (* ?x45082 l_0_16_87)))
 (let ((?x57248 (- (+ (+ (- (* (* (- 2.0) l_0_16_100) l_0_16_86) ?x57241) ?x57243) ?x57245) ?x57247)))
 (let ((?x57258 (+ (+ (+ (+ (+ (+ (- ?x57248 ?x57249) ?x56495) ?x56497) ?x57253) ?x57255) ?x56505) ?x56507)))
 (let ((?x57270 (+ (- (- (- (- (- (+ ?x57258 ?x56509) ?x57260) ?x57262) ?x57264) ?x57266) ?x57268) ?x56511)))
 (let ((?x57284 (- (- (- (- (- (- (- ?x57270 ?x57271) ?x57273) ?x57275) ?x57277) ?x57279) ?x57281) ?x57283)))
 (let ((?x57298 (- (- (- (- (- (- (- ?x57284 ?x57285) ?x57287) ?x57289) ?x57291) ?x57293) ?x57295) ?x57297)))
 (let ((?x57310 (- (- (- (- (- (- (- ?x57298 ?x57299) ?x57301) ?x57303) ?x57305) ?x57307) ?x56514) ?x56517)))
 (let ((?x57317 (- (- (- (- (- ?x57310 ?x56520) ?x56523) ?x56526) ?x56529) (* (* 1.0 l_0_16_58) l_0_16_58))))
 (let ((?x57323 (- (- ?x57317 (* (* 1.0 l_0_16_59) l_0_16_59)) (* (* 1.0 l_0_16_60) l_0_16_60))))
 (let ((?x57329 (- (- ?x57323 (* (* 1.0 l_0_16_61) l_0_16_61)) (* (* 1.0 l_0_16_62) l_0_16_62))))
 (let ((?x57334 (+ (- ?x57329 (* (* 1.0 l_0_16_63) l_0_16_63)) (* 1.0 (* l_0_16_79 l_0_16_79)))))
 (let ((?x57338 (+ (+ ?x57334 (* 1.0 (* l_0_16_80 l_0_16_80))) (* 1.0 (* l_0_16_81 l_0_16_81)))))
 (let ((?x57342 (+ (+ ?x57338 (* 1.0 (* l_0_16_82 l_0_16_82))) (* 1.0 (* l_0_16_83 l_0_16_83)))))
 (= (+ ?x57342 (* 1.0 (* l_0_16_84 l_0_16_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53725 (* l_0_16_64 l_0_16_64)))
 (let ((?x54187 (* 3.0 ?x53725)))
 (= (+ (* (* (- 3.0) l_0_16_43) l_0_16_43) ?x54187) 0.0))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54436 (* ?x54435 l_0_16_86)))
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54511 (* ?x54278 l_0_16_67)))
 (let ((?x54273 (* 6.0 l_0_16_43)))
 (let ((?x54506 (* ?x54273 l_0_16_46)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54412 (* ?x54411 l_0_16_170)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54406 (* ?x54405 l_0_16_149)))
 (let ((?x57418 (+ (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_107) ?x54406) ?x54412) ?x54506) ?x54511)))
 (= (+ ?x57418 ?x54436) 0.0)))))))))))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54555 (* ?x54278 l_0_16_70)))
 (= (+ (* (* (- 6.0) l_0_16_43) l_0_16_49) ?x54555) 0.0))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54608 (* ?x54278 l_0_16_74)))
 (= (+ (* (* (- 6.0) l_0_16_43) l_0_16_53) ?x54608) 0.0))))
(assert
 (let ((?x54278 (* 6.0 l_0_16_64)))
 (let ((?x54660 (* ?x54278 l_0_16_79)))
 (= (+ (* (* (- 6.0) l_0_16_43) l_0_16_58) ?x54660) 0.0))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x55432 (* ?x55431 l_0_16_89)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x55429 (* ?x55428 l_0_16_88)))
 (let ((?x53997 (* l_0_16_69 l_0_16_69)))
 (let ((?x55606 (* 3.0 ?x53997)))
 (let ((?x53994 (* l_0_16_68 l_0_16_68)))
 (let ((?x55604 (* 3.0 ?x53994)))
 (let ((?x53991 (* l_0_16_67 l_0_16_67)))
 (let ((?x55602 (* 3.0 ?x53991)))
 (let ((?x55596 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x55593 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x55590 (* (* 3.0 l_0_16_46) l_0_16_46)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x55369 (* ?x55368 l_0_16_173)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x55366 (* ?x55365 l_0_16_172)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x55353 (* ?x55352 l_0_16_152)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x55350 (* ?x55349 l_0_16_151)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x55343 (* ?x55342 l_0_16_110)))
 (let ((?x57441 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_109) ?x55343) ?x55350) ?x55353) ?x55366)))
 (let ((?x57448 (+ (+ (+ (- (- (- (- ?x57441 ?x55369) ?x55590) ?x55593) ?x55596) ?x55602) ?x55604) ?x55606)))
 (= (+ (+ ?x57448 ?x55429) ?x55432) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x56927 (* ?x55431 l_0_16_92)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x56925 (* ?x55428 l_0_16_91)))
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55678 (* ?x55677 l_0_16_72)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55674 (* ?x55673 l_0_16_71)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55670 (* ?x55669 l_0_16_70)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55662 (* ?x55661 l_0_16_51)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55658 (* ?x55657 l_0_16_50)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55654 (* ?x55653 l_0_16_49)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x56866 (* ?x55368 l_0_16_176)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x56864 (* ?x55365 l_0_16_175)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x56860 (* ?x55352 l_0_16_155)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x45726 (* ?x55349 l_0_16_154)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x45733 (* ?x55342 l_0_16_113)))
 (let ((?x46869 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_112) ?x45733) ?x45726) ?x56860) ?x56864)))
 (let ((?x35647 (+ (+ (+ (- (- (- (- ?x46869 ?x56866) ?x55654) ?x55658) ?x55662) ?x55670) ?x55674) ?x55678)))
 (= (+ (+ ?x35647 ?x56925) ?x56927) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55431 (* 2.0 l_0_16_87)))
 (let ((?x57156 (* ?x55431 l_0_16_96)))
 (let ((?x55428 (* 2.0 l_0_16_86)))
 (let ((?x57154 (* ?x55428 l_0_16_95)))
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55756 (* ?x55677 l_0_16_76)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55754 (* ?x55673 l_0_16_75)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55752 (* ?x55669 l_0_16_74)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55748 (* ?x55661 l_0_16_55)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55746 (* ?x55657 l_0_16_54)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55744 (* ?x55653 l_0_16_53)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x57057 (* ?x55368 l_0_16_180)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x57055 (* ?x55365 l_0_16_179)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x57053 (* ?x55352 l_0_16_159)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x57050 (* ?x55349 l_0_16_158)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x57042 (* ?x55342 l_0_16_117)))
 (let ((?x35828 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_116) ?x57042) ?x57050) ?x57053) ?x57055)))
 (let ((?x57457 (+ (+ (+ (- (- (- (- ?x35828 ?x57057) ?x55744) ?x55746) ?x55748) ?x55752) ?x55754) ?x55756)))
 (= (+ (+ ?x57457 ?x57154) ?x57156) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55677 (* 6.0 l_0_16_69)))
 (let ((?x55811 (* ?x55677 l_0_16_81)))
 (let ((?x55673 (* 6.0 l_0_16_68)))
 (let ((?x55809 (* ?x55673 l_0_16_80)))
 (let ((?x55669 (* 6.0 l_0_16_67)))
 (let ((?x55807 (* ?x55669 l_0_16_79)))
 (let ((?x55661 (* 6.0 l_0_16_48)))
 (let ((?x55803 (* ?x55661 l_0_16_60)))
 (let ((?x55657 (* 6.0 l_0_16_47)))
 (let ((?x55801 (* ?x55657 l_0_16_59)))
 (let ((?x55653 (* 6.0 l_0_16_46)))
 (let ((?x55799 (* ?x55653 l_0_16_58)))
 (let ((?x55368 (* 2.0 l_0_16_171)))
 (let ((?x57255 (* ?x55368 l_0_16_185)))
 (let ((?x55365 (* 2.0 l_0_16_170)))
 (let ((?x57253 (* ?x55365 l_0_16_184)))
 (let ((?x55352 (* 2.0 l_0_16_150)))
 (let ((?x57249 (* ?x55352 l_0_16_164)))
 (let ((?x55349 (* 2.0 l_0_16_149)))
 (let ((?x57247 (* ?x55349 l_0_16_163)))
 (let ((?x55342 (* 2.0 l_0_16_108)))
 (let ((?x57245 (* ?x55342 l_0_16_122)))
 (let ((?x55340 (* 2.0 l_0_16_107)))
 (let ((?x57243 (* ?x55340 l_0_16_121)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57241 (* ?x45082 l_0_16_87)))
 (let ((?x46380 (+ (- (- (+ (* (* 2.0 l_0_16_100) l_0_16_86) ?x57241) ?x57243) ?x57245) ?x57247)))
 (let ((?x35919 (+ (- (- (- (- (- (+ ?x46380 ?x57249) ?x57253) ?x57255) ?x55799) ?x55801) ?x55803) ?x55807)))
 (= (+ (+ ?x35919 ?x55809) ?x55811) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x53875 (* l_0_16_73 l_0_16_73)))
 (let ((?x55900 (* 3.0 ?x53875)))
 (let ((?x53872 (* l_0_16_72 l_0_16_72)))
 (let ((?x55898 (* 3.0 ?x53872)))
 (let ((?x53869 (* l_0_16_71 l_0_16_71)))
 (let ((?x55896 (* 3.0 ?x53869)))
 (let ((?x53866 (* l_0_16_70 l_0_16_70)))
 (let ((?x55894 (* 3.0 ?x53866)))
 (let ((?x55888 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x55885 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x55882 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x57472 (+ (- (- (- (* (* (- 3.0) l_0_16_49) l_0_16_49) ?x55882) ?x55885) ?x55888) ?x55894)))
 (= (+ (+ (+ ?x57472 ?x55896) ?x55898) ?x55900) 0.0))))))))))))))
(assert
 (let ((?x55997 (* 6.0 l_0_16_73)))
 (let ((?x55998 (* ?x55997 l_0_16_77)))
 (let ((?x55994 (* 6.0 l_0_16_72)))
 (let ((?x55995 (* ?x55994 l_0_16_76)))
 (let ((?x55991 (* 6.0 l_0_16_71)))
 (let ((?x55992 (* ?x55991 l_0_16_75)))
 (let ((?x55988 (* 6.0 l_0_16_70)))
 (let ((?x55989 (* ?x55988 l_0_16_74)))
 (let ((?x55982 (* 6.0 l_0_16_52)))
 (let ((?x55983 (* ?x55982 l_0_16_56)))
 (let ((?x55979 (* 6.0 l_0_16_51)))
 (let ((?x55980 (* ?x55979 l_0_16_55)))
 (let ((?x55976 (* 6.0 l_0_16_50)))
 (let ((?x55977 (* ?x55976 l_0_16_54)))
 (let ((?x57480 (+ (- (- (- (* (* (- 6.0) l_0_16_49) l_0_16_53) ?x55977) ?x55980) ?x55983) ?x55989)))
 (= (+ (+ (+ ?x57480 ?x55992) ?x55995) ?x55998) 0.0)))))))))))))))))
(assert
 (let ((?x55997 (* 6.0 l_0_16_73)))
 (let ((?x56122 (* ?x55997 l_0_16_82)))
 (let ((?x55994 (* 6.0 l_0_16_72)))
 (let ((?x56120 (* ?x55994 l_0_16_81)))
 (let ((?x55991 (* 6.0 l_0_16_71)))
 (let ((?x56118 (* ?x55991 l_0_16_80)))
 (let ((?x55988 (* 6.0 l_0_16_70)))
 (let ((?x56116 (* ?x55988 l_0_16_79)))
 (let ((?x55982 (* 6.0 l_0_16_52)))
 (let ((?x56111 (* ?x55982 l_0_16_61)))
 (let ((?x55979 (* 6.0 l_0_16_51)))
 (let ((?x56109 (* ?x55979 l_0_16_60)))
 (let ((?x55976 (* 6.0 l_0_16_50)))
 (let ((?x56107 (* ?x55976 l_0_16_59)))
 (let ((?x57498 (+ (- (- (- (* (* (- 6.0) l_0_16_49) l_0_16_58) ?x56107) ?x56109) ?x56111) ?x56116)))
 (= (+ (+ (+ ?x57498 ?x56118) ?x56120) ?x56122) 0.0)))))))))))))))))
(assert
 (let ((?x56280 (* l_0_16_78 l_0_16_78)))
 (let ((?x56281 (* 3.0 ?x56280)))
 (let ((?x56277 (* l_0_16_77 l_0_16_77)))
 (let ((?x56278 (* 3.0 ?x56277)))
 (let ((?x56274 (* l_0_16_76 l_0_16_76)))
 (let ((?x56275 (* 3.0 ?x56274)))
 (let ((?x56271 (* l_0_16_75 l_0_16_75)))
 (let ((?x56272 (* 3.0 ?x56271)))
 (let ((?x56268 (* l_0_16_74 l_0_16_74)))
 (let ((?x56269 (* 3.0 ?x56268)))
 (let ((?x56266 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x56263 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x56260 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x56257 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x57506 (- (- (- (- (* (* (- 3.0) l_0_16_53) l_0_16_53) ?x56257) ?x56260) ?x56263) ?x56266)))
 (= (+ (+ (+ (+ (+ ?x57506 ?x56269) ?x56272) ?x56275) ?x56278) ?x56281) 0.0)))))))))))))))))
(assert
 (let ((?x56416 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x56413 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x56410 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x56407 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x56404 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x56401 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x56398 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x56395 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x56392 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x57519 (- (- (- (- (* (* (- 6.0) l_0_16_53) l_0_16_58) ?x56392) ?x56395) ?x56398) ?x56401)))
 (= (+ (+ (+ (+ (+ ?x57519 ?x56404) ?x56407) ?x56410) ?x56413) ?x56416) 0.0))))))))))))
(assert
 (let ((?x56564 (* l_0_16_84 l_0_16_84)))
 (let ((?x56565 (* 3.0 ?x56564)))
 (let ((?x56561 (* l_0_16_83 l_0_16_83)))
 (let ((?x56562 (* 3.0 ?x56561)))
 (let ((?x56558 (* l_0_16_82 l_0_16_82)))
 (let ((?x56559 (* 3.0 ?x56558)))
 (let ((?x56555 (* l_0_16_81 l_0_16_81)))
 (let ((?x56556 (* 3.0 ?x56555)))
 (let ((?x56552 (* l_0_16_80 l_0_16_80)))
 (let ((?x56553 (* 3.0 ?x56552)))
 (let ((?x56549 (* l_0_16_79 l_0_16_79)))
 (let ((?x56550 (* 3.0 ?x56549)))
 (let ((?x56547 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x56544 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x56541 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x56538 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x56535 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x57528 (- (- (- (- (* (* (- 3.0) l_0_16_58) l_0_16_58) ?x56535) ?x56538) ?x56541) ?x56544)))
 (let ((?x57535 (+ (+ (+ (+ (+ (+ (- ?x57528 ?x56547) ?x56550) ?x56553) ?x56556) ?x56559) ?x56562) ?x56565)))
 (= ?x57535 0.0)))))))))))))))))))))
(assert
 (let ((?x53875 (* l_0_16_73 l_0_16_73)))
 (let ((?x53872 (* l_0_16_72 l_0_16_72)))
 (let ((?x53869 (* l_0_16_71 l_0_16_71)))
 (let ((?x53866 (* l_0_16_70 l_0_16_70)))
 (let ((?x21455 (* l_0_16_52 l_0_16_52)))
 (let ((?x6467 (* l_0_16_51 l_0_16_51)))
 (let ((?x47263 (+ (+ (+ (* l_0_16_49 l_0_16_49) (* l_0_16_50 l_0_16_50)) ?x6467) ?x21455)))
 (= (- (- (- (- ?x47263 ?x53866) ?x53869) ?x53872) ?x53875) 0.0)))))))))
(assert
 (let ((?x56796 (* 2.0 l_0_16_73)))
 (let ((?x56797 (* ?x56796 l_0_16_77)))
 (let ((?x56793 (* 2.0 l_0_16_72)))
 (let ((?x56794 (* ?x56793 l_0_16_76)))
 (let ((?x56790 (* 2.0 l_0_16_71)))
 (let ((?x56791 (* ?x56790 l_0_16_75)))
 (let ((?x56787 (* 2.0 l_0_16_70)))
 (let ((?x56788 (* ?x56787 l_0_16_74)))
 (let ((?x56782 (* 2.0 l_0_16_52)))
 (let ((?x56783 (* ?x56782 l_0_16_56)))
 (let ((?x56779 (* 2.0 l_0_16_51)))
 (let ((?x56780 (* ?x56779 l_0_16_55)))
 (let ((?x56776 (* 2.0 l_0_16_50)))
 (let ((?x56777 (* ?x56776 l_0_16_54)))
 (let ((?x56773 (* 2.0 l_0_16_49)))
 (let ((?x56774 (* ?x56773 l_0_16_53)))
 (let ((?x55869 (* l_0_16_136 l_0_16_136)))
 (let ((?x55867 (* l_0_16_135 l_0_16_135)))
 (let ((?x57561 (- (- (* (- l_0_16_133) l_0_16_133) (* l_0_16_134 l_0_16_134)) ?x55867)))
 (let ((?x57568 (- (- (+ (+ (+ (+ (- ?x57561 ?x55869) ?x56774) ?x56777) ?x56780) ?x56783) ?x56788) ?x56791)))
 (= (- (- ?x57568 ?x56794) ?x56797) 0.0))))))))))))))))))))))
(assert
 (let ((?x57610 (* l_0_16_94 l_0_16_94)))
 (let ((?x57608 (* l_0_16_93 l_0_16_93)))
 (let ((?x57606 (* l_0_16_92 l_0_16_92)))
 (let ((?x57604 (* l_0_16_91 l_0_16_91)))
 (let ((?x56796 (* 2.0 l_0_16_73)))
 (let ((?x56923 (* ?x56796 l_0_16_82)))
 (let ((?x56793 (* 2.0 l_0_16_72)))
 (let ((?x56921 (* ?x56793 l_0_16_81)))
 (let ((?x56790 (* 2.0 l_0_16_71)))
 (let ((?x56919 (* ?x56790 l_0_16_80)))
 (let ((?x56787 (* 2.0 l_0_16_70)))
 (let ((?x56917 (* ?x56787 l_0_16_79)))
 (let ((?x56782 (* 2.0 l_0_16_52)))
 (let ((?x56913 (* ?x56782 l_0_16_61)))
 (let ((?x56779 (* 2.0 l_0_16_51)))
 (let ((?x56911 (* ?x56779 l_0_16_60)))
 (let ((?x56776 (* 2.0 l_0_16_50)))
 (let ((?x56909 (* ?x56776 l_0_16_59)))
 (let ((?x56773 (* 2.0 l_0_16_49)))
 (let ((?x56907 (* ?x56773 l_0_16_58)))
 (let ((?x57594 (* l_0_16_178 l_0_16_178)))
 (let ((?x57592 (* l_0_16_177 l_0_16_177)))
 (let ((?x57590 (* l_0_16_176 l_0_16_176)))
 (let ((?x57588 (* l_0_16_175 l_0_16_175)))
 (let ((?x57586 (* l_0_16_157 l_0_16_157)))
 (let ((?x57584 (* l_0_16_156 l_0_16_156)))
 (let ((?x57582 (* l_0_16_155 l_0_16_155)))
 (let ((?x57580 (* l_0_16_154 l_0_16_154)))
 (let ((?x57578 (* l_0_16_115 l_0_16_115)))
 (let ((?x57576 (* l_0_16_114 l_0_16_114)))
 (let ((?x57577 (+ (+ (* l_0_16_112 l_0_16_112) (* l_0_16_113 l_0_16_113)) ?x57576)))
 (let ((?x57591 (+ (+ (- (- (- (- (+ ?x57577 ?x57578) ?x57580) ?x57582) ?x57584) ?x57586) ?x57588) ?x57590)))
 (let ((?x57600 (- (+ (+ (+ (+ (+ (+ ?x57591 ?x57592) ?x57594) ?x56907) ?x56909) ?x56911) ?x56913) ?x56917)))
 (let ((?x57611 (- (- (- (- (- (- (- ?x57600 ?x56919) ?x56921) ?x56923) ?x57604) ?x57606) ?x57608) ?x57610)))
 (= ?x57611 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56280 (* l_0_16_78 l_0_16_78)))
 (let ((?x56277 (* l_0_16_77 l_0_16_77)))
 (let ((?x56274 (* l_0_16_76 l_0_16_76)))
 (let ((?x56271 (* l_0_16_75 l_0_16_75)))
 (let ((?x56268 (* l_0_16_74 l_0_16_74)))
 (let ((?x23148 (* l_0_16_57 l_0_16_57)))
 (let ((?x44774 (* l_0_16_56 l_0_16_56)))
 (let ((?x44769 (* l_0_16_55 l_0_16_55)))
 (let ((?x44766 (* l_0_16_54 l_0_16_54)))
 (let ((?x44756 (* l_0_16_53 l_0_16_53)))
 (let ((?x55955 (* 2.0 l_0_16_136)))
 (let ((?x55956 (* ?x55955 l_0_16_140)))
 (let ((?x55952 (* 2.0 l_0_16_135)))
 (let ((?x55953 (* ?x55952 l_0_16_139)))
 (let ((?x55949 (* 2.0 l_0_16_134)))
 (let ((?x55950 (* ?x55949 l_0_16_138)))
 (let ((?x12379 (+ (- (- (- (* (* (- 2.0) l_0_16_133) l_0_16_137) ?x55950) ?x55953) ?x55956) ?x44756)))
 (let ((?x57627 (- (- (- (+ (+ (+ (+ ?x12379 ?x44766) ?x44769) ?x44774) ?x23148) ?x56268) ?x56271) ?x56274)))
 (= (- (- ?x57627 ?x56277) ?x56280) 0.0))))))))))))))))))))
(assert
 (let ((?x57691 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x57688 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x57685 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x57682 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x57152 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x57149 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x57146 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x57143 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x57140 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x57137 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x57134 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x57131 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x57128 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x57125 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x57668 (* 2.0 l_0_16_178)))
 (let ((?x57669 (* ?x57668 l_0_16_182)))
 (let ((?x57665 (* 2.0 l_0_16_177)))
 (let ((?x57666 (* ?x57665 l_0_16_181)))
 (let ((?x57662 (* 2.0 l_0_16_176)))
 (let ((?x57663 (* ?x57662 l_0_16_180)))
 (let ((?x57659 (* 2.0 l_0_16_175)))
 (let ((?x57660 (* ?x57659 l_0_16_179)))
 (let ((?x57656 (* 2.0 l_0_16_157)))
 (let ((?x57657 (* ?x57656 l_0_16_161)))
 (let ((?x57653 (* 2.0 l_0_16_156)))
 (let ((?x57654 (* ?x57653 l_0_16_160)))
 (let ((?x57650 (* 2.0 l_0_16_155)))
 (let ((?x57651 (* ?x57650 l_0_16_159)))
 (let ((?x57647 (* 2.0 l_0_16_154)))
 (let ((?x57648 (* ?x57647 l_0_16_158)))
 (let ((?x55955 (* 2.0 l_0_16_136)))
 (let ((?x56068 (* ?x55955 l_0_16_145)))
 (let ((?x55952 (* 2.0 l_0_16_135)))
 (let ((?x56066 (* ?x55952 l_0_16_144)))
 (let ((?x55949 (* 2.0 l_0_16_134)))
 (let ((?x56064 (* ?x55949 l_0_16_143)))
 (let ((?x55946 (* 2.0 l_0_16_133)))
 (let ((?x56062 (* ?x55946 l_0_16_142)))
 (let ((?x57640 (* 2.0 l_0_16_115)))
 (let ((?x57641 (* ?x57640 l_0_16_119)))
 (let ((?x57637 (* 2.0 l_0_16_114)))
 (let ((?x57638 (* ?x57637 l_0_16_118)))
 (let ((?x57634 (* 2.0 l_0_16_113)))
 (let ((?x57635 (* ?x57634 l_0_16_117)))
 (let ((?x57643 (- (+ (+ (+ (* (* 2.0 l_0_16_112) l_0_16_116) ?x57635) ?x57638) ?x57641) ?x56062)))
 (let ((?x57658 (- (- (- (- (- (- (- ?x57643 ?x56064) ?x56066) ?x56068) ?x57648) ?x57651) ?x57654) ?x57657)))
 (let ((?x57673 (+ (+ (+ (+ (+ (+ (+ ?x57658 ?x57660) ?x57663) ?x57666) ?x57669) ?x57125) ?x57128) ?x57131)))
 (let ((?x57680 (- (- (- (- (- (+ (+ ?x57673 ?x57134) ?x57137) ?x57140) ?x57143) ?x57146) ?x57149) ?x57152)))
 (= (- (- (- (- ?x57680 ?x57682) ?x57685) ?x57688) ?x57691) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56564 (* l_0_16_84 l_0_16_84)))
 (let ((?x56561 (* l_0_16_83 l_0_16_83)))
 (let ((?x56558 (* l_0_16_82 l_0_16_82)))
 (let ((?x56555 (* l_0_16_81 l_0_16_81)))
 (let ((?x56552 (* l_0_16_80 l_0_16_80)))
 (let ((?x56549 (* l_0_16_79 l_0_16_79)))
 (let ((?x45249 (* l_0_16_63 l_0_16_63)))
 (let ((?x45185 (* l_0_16_62 l_0_16_62)))
 (let ((?x45187 (* l_0_16_61 l_0_16_61)))
 (let ((?x8957 (* l_0_16_60 l_0_16_60)))
 (let ((?x9259 (* l_0_16_59 l_0_16_59)))
 (let ((?x45183 (* l_0_16_58 l_0_16_58)))
 (let ((?x57668 (* 2.0 l_0_16_178)))
 (let ((?x57761 (* ?x57668 l_0_16_187)))
 (let ((?x57665 (* 2.0 l_0_16_177)))
 (let ((?x57759 (* ?x57665 l_0_16_186)))
 (let ((?x57662 (* 2.0 l_0_16_176)))
 (let ((?x57757 (* ?x57662 l_0_16_185)))
 (let ((?x57659 (* 2.0 l_0_16_175)))
 (let ((?x57755 (* ?x57659 l_0_16_184)))
 (let ((?x57656 (* 2.0 l_0_16_157)))
 (let ((?x57753 (* ?x57656 l_0_16_166)))
 (let ((?x57653 (* 2.0 l_0_16_156)))
 (let ((?x57751 (* ?x57653 l_0_16_165)))
 (let ((?x57650 (* 2.0 l_0_16_155)))
 (let ((?x57749 (* ?x57650 l_0_16_164)))
 (let ((?x57647 (* 2.0 l_0_16_154)))
 (let ((?x57747 (* ?x57647 l_0_16_163)))
 (let ((?x57640 (* 2.0 l_0_16_115)))
 (let ((?x57745 (* ?x57640 l_0_16_124)))
 (let ((?x57637 (* 2.0 l_0_16_114)))
 (let ((?x57743 (* ?x57637 l_0_16_123)))
 (let ((?x57634 (* 2.0 l_0_16_113)))
 (let ((?x57741 (* ?x57634 l_0_16_122)))
 (let ((?x36410 (* 2.0 l_0_16_112)))
 (let ((?x57739 (* ?x36410 l_0_16_121)))
 (let ((?x57736 (* 2.0 l_0_16_103)))
 (let ((?x57737 (* ?x57736 l_0_16_94)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x57734 (* ?x56468 l_0_16_93)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57732 (* ?x45082 l_0_16_92)))
 (let ((?x57740 (+ (- (- (- (* (* (- 2.0) l_0_16_100) l_0_16_91) ?x57732) ?x57734) ?x57737) ?x57739)))
 (let ((?x57754 (- (- (- (- (+ (+ (+ ?x57740 ?x57741) ?x57743) ?x57745) ?x57747) ?x57749) ?x57751) ?x57753)))
 (let ((?x57765 (+ (+ (+ (+ (+ (+ (+ ?x57754 ?x57755) ?x57757) ?x57759) ?x57761) ?x45183) ?x9259) ?x8957)))
 (let ((?x57772 (- (- (- (- (+ (+ (+ ?x57765 ?x45187) ?x45185) ?x45249) ?x56549) ?x56552) ?x56555) ?x56558)))
 (= (- (- ?x57772 ?x56561) ?x56564) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57834 (* l_0_16_99 l_0_16_99)))
 (let ((?x57832 (* l_0_16_98 l_0_16_98)))
 (let ((?x57830 (* l_0_16_97 l_0_16_97)))
 (let ((?x57828 (* l_0_16_96 l_0_16_96)))
 (let ((?x57826 (* l_0_16_95 l_0_16_95)))
 (let ((?x57824 (* l_0_16_183 l_0_16_183)))
 (let ((?x57822 (* l_0_16_182 l_0_16_182)))
 (let ((?x57820 (* l_0_16_181 l_0_16_181)))
 (let ((?x57818 (* l_0_16_180 l_0_16_180)))
 (let ((?x57816 (* l_0_16_179 l_0_16_179)))
 (let ((?x57814 (* l_0_16_162 l_0_16_162)))
 (let ((?x57812 (* l_0_16_161 l_0_16_161)))
 (let ((?x36575 (* l_0_16_160 l_0_16_160)))
 (let ((?x36571 (* l_0_16_159 l_0_16_159)))
 (let ((?x36542 (* l_0_16_158 l_0_16_158)))
 (let ((?x56356 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56353 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56347 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56344 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56341 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x36564 (* l_0_16_120 l_0_16_120)))
 (let ((?x12710 (* l_0_16_119 l_0_16_119)))
 (let ((?x47595 (* l_0_16_118 l_0_16_118)))
 (let ((?x36247 (+ (+ (* l_0_16_116 l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x47595)))
 (let ((?x47608 (- (- (- (- (- (+ (+ ?x36247 ?x12710) ?x36564) ?x56341) ?x56344) ?x56347) ?x56353) ?x56356)))
 (let ((?x57819 (+ (+ (- (- (- (- (- ?x47608 ?x36542) ?x36571) ?x36575) ?x57812) ?x57814) ?x57816) ?x57818)))
 (let ((?x57833 (- (- (- (- (+ (+ (+ ?x57819 ?x57820) ?x57822) ?x57824) ?x57826) ?x57828) ?x57830) ?x57832)))
 (= (- ?x57833 ?x57834) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x57921 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57918 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57915 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57912 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57909 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57906 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57903 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57900 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57897 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57894 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x56487 (* l_0_16_147 l_0_16_147)))
 (let ((?x56485 (* l_0_16_146 l_0_16_146)))
 (let ((?x56483 (* l_0_16_145 l_0_16_145)))
 (let ((?x56481 (* l_0_16_144 l_0_16_144)))
 (let ((?x56479 (* l_0_16_143 l_0_16_143)))
 (let ((?x56477 (* l_0_16_142 l_0_16_142)))
 (let ((?x57885 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x57882 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x57879 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x57876 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x57873 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x57870 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x57736 (* 2.0 l_0_16_103)))
 (let ((?x57867 (* ?x57736 l_0_16_98)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x57865 (* ?x56468 l_0_16_97)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57863 (* ?x45082 l_0_16_96)))
 (let ((?x57871 (- (- (- (- (* (* (- 2.0) l_0_16_100) l_0_16_95) ?x57863) ?x57865) ?x57867) ?x57870)))
 (let ((?x57888 (- (- (+ (+ (+ (+ (+ ?x57871 ?x57873) ?x57876) ?x57879) ?x57882) ?x57885) ?x56477) ?x56479)))
 (let ((?x57901 (- (- (- (- (- (- (- ?x57888 ?x56481) ?x56483) ?x56485) ?x56487) ?x57894) ?x57897) ?x57900)))
 (let ((?x57922 (+ (+ (+ (+ (+ (- (- ?x57901 ?x57903) ?x57906) ?x57909) ?x57912) ?x57915) ?x57918) ?x57921)))
 (= ?x57922 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57996 (* l_0_16_189 l_0_16_189)))
 (let ((?x57994 (* l_0_16_188 l_0_16_188)))
 (let ((?x57992 (* l_0_16_187 l_0_16_187)))
 (let ((?x57990 (* l_0_16_186 l_0_16_186)))
 (let ((?x57988 (* l_0_16_185 l_0_16_185)))
 (let ((?x57986 (* l_0_16_184 l_0_16_184)))
 (let ((?x57984 (* l_0_16_168 l_0_16_168)))
 (let ((?x57982 (* l_0_16_167 l_0_16_167)))
 (let ((?x57980 (* l_0_16_166 l_0_16_166)))
 (let ((?x57978 (* l_0_16_165 l_0_16_165)))
 (let ((?x57976 (* l_0_16_164 l_0_16_164)))
 (let ((?x57974 (* l_0_16_163 l_0_16_163)))
 (let ((?x57972 (* l_0_16_126 l_0_16_126)))
 (let ((?x57970 (* l_0_16_125 l_0_16_125)))
 (let ((?x57968 (* l_0_16_124 l_0_16_124)))
 (let ((?x57966 (* l_0_16_123 l_0_16_123)))
 (let ((?x57964 (* l_0_16_122 l_0_16_122)))
 (let ((?x57962 (* l_0_16_121 l_0_16_121)))
 (let ((?x57960 (* l_0_16_105 l_0_16_105)))
 (let ((?x57958 (* l_0_16_104 l_0_16_104)))
 (let ((?x57956 (* l_0_16_103 l_0_16_103)))
 (let ((?x57954 (* l_0_16_102 l_0_16_102)))
 (let ((?x57955 (- (- (* (- l_0_16_100) l_0_16_100) (* l_0_16_101 l_0_16_101)) ?x57954)))
 (let ((?x57969 (+ (+ (+ (+ (- (- (- ?x57955 ?x57956) ?x57958) ?x57960) ?x57962) ?x57964) ?x57966) ?x57968)))
 (let ((?x57983 (- (- (- (- (- (+ (+ ?x57969 ?x57970) ?x57972) ?x57974) ?x57976) ?x57978) ?x57980) ?x57982)))
 (let ((?x57997 (+ (+ (+ (+ (+ (+ (- ?x57983 ?x57984) ?x57986) ?x57988) ?x57990) ?x57992) ?x57994) ?x57996)))
 (= ?x57997 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x54237 (* l_0_16_85 l_0_16_85)))
 (let ((?x54233 (* l_0_16_169 l_0_16_169)))
 (let ((?x58041 (- (+ (* (- l_0_16_106) l_0_16_106) (* l_0_16_148 l_0_16_148)) ?x54233)))
 (= (+ ?x58041 ?x54237) 0.0)))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54662 (* ?x54435 l_0_16_88)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54644 (* ?x54411 l_0_16_172)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54640 (* ?x54405 l_0_16_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_109) ?x54640) ?x54644) ?x54662) 0.0))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54802 (* ?x54435 l_0_16_91)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54786 (* ?x54411 l_0_16_175)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54782 (* ?x54405 l_0_16_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_112) ?x54782) ?x54786) ?x54802) 0.0))))))))
(assert
 (let ((?x54435 (* 2.0 l_0_16_85)))
 (let ((?x54910 (* ?x54435 l_0_16_95)))
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54893 (* ?x54411 l_0_16_179)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54888 (* ?x54405 l_0_16_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_116) ?x54888) ?x54893) ?x54910) 0.0))))))))
(assert
 (let ((?x54411 (* 2.0 l_0_16_169)))
 (let ((?x54969 (* ?x54411 l_0_16_184)))
 (let ((?x54405 (* 2.0 l_0_16_148)))
 (let ((?x54965 (* ?x54405 l_0_16_163)))
 (let ((?x54396 (* 2.0 l_0_16_106)))
 (let ((?x54963 (* ?x54396 l_0_16_121)))
 (= (- (+ (- (* (* 2.0 l_0_16_100) l_0_16_85) ?x54963) ?x54965) ?x54969) 0.0))))))))
(assert
 (let ((?x55817 (* l_0_16_90 l_0_16_90)))
 (let ((?x55815 (* l_0_16_89 l_0_16_89)))
 (let ((?x55813 (* l_0_16_88 l_0_16_88)))
 (let ((?x55791 (* l_0_16_174 l_0_16_174)))
 (let ((?x55789 (* l_0_16_173 l_0_16_173)))
 (let ((?x55787 (* l_0_16_172 l_0_16_172)))
 (let ((?x55783 (* l_0_16_153 l_0_16_153)))
 (let ((?x55781 (* l_0_16_152 l_0_16_152)))
 (let ((?x55779 (* l_0_16_151 l_0_16_151)))
 (let ((?x44575 (* l_0_16_111 l_0_16_111)))
 (let ((?x58078 (- (- (* (- l_0_16_109) l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x44575)))
 (let ((?x58085 (+ (- (- (- (+ (+ (+ ?x58078 ?x55779) ?x55781) ?x55783) ?x55787) ?x55789) ?x55791) ?x55813)))
 (= (+ (+ ?x58085 ?x55815) ?x55817) 0.0))))))))))))))
(assert
 (let ((?x56130 (* 2.0 l_0_16_90)))
 (let ((?x56131 (* ?x56130 l_0_16_93)))
 (let ((?x56127 (* 2.0 l_0_16_89)))
 (let ((?x56128 (* ?x56127 l_0_16_92)))
 (let ((?x56124 (* 2.0 l_0_16_88)))
 (let ((?x56125 (* ?x56124 l_0_16_91)))
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56090 (* ?x56089 l_0_16_177)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56087 (* ?x56086 l_0_16_176)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56084 (* ?x56083 l_0_16_175)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56077 (* ?x56076 l_0_16_156)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56074 (* ?x56073 l_0_16_155)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56071 (* ?x56070 l_0_16_154)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56060 (* ?x56059 l_0_16_114)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56057 (* ?x56042 l_0_16_113)))
 (let ((?x58098 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_112) ?x56057) ?x56060) ?x56071) ?x56074)))
 (let ((?x58105 (+ (+ (+ (- (- (- (+ ?x58098 ?x56077) ?x56084) ?x56087) ?x56090) ?x56125) ?x56128) ?x56131)))
 (= ?x58105 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56130 (* 2.0 l_0_16_90)))
 (let ((?x56422 (* ?x56130 l_0_16_97)))
 (let ((?x56127 (* 2.0 l_0_16_89)))
 (let ((?x56420 (* ?x56127 l_0_16_96)))
 (let ((?x56124 (* 2.0 l_0_16_88)))
 (let ((?x56418 (* ?x56124 l_0_16_95)))
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56371 (* ?x56089 l_0_16_181)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56369 (* ?x56086 l_0_16_180)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56367 (* ?x56083 l_0_16_179)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56365 (* ?x56076 l_0_16_160)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56363 (* ?x56073 l_0_16_159)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56361 (* ?x56070 l_0_16_158)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56331 (* ?x56059 l_0_16_118)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56329 (* ?x56042 l_0_16_117)))
 (let ((?x13096 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_116) ?x56329) ?x56331) ?x56361) ?x56363)))
 (let ((?x26190 (+ (+ (+ (- (- (- (+ ?x13096 ?x56365) ?x56367) ?x56369) ?x56371) ?x56418) ?x56420) ?x56422)))
 (= ?x26190 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56089 (* 2.0 l_0_16_174)))
 (let ((?x56503 (* ?x56089 l_0_16_186)))
 (let ((?x56086 (* 2.0 l_0_16_173)))
 (let ((?x56501 (* ?x56086 l_0_16_185)))
 (let ((?x56083 (* 2.0 l_0_16_172)))
 (let ((?x56499 (* ?x56083 l_0_16_184)))
 (let ((?x56076 (* 2.0 l_0_16_153)))
 (let ((?x56493 (* ?x56076 l_0_16_165)))
 (let ((?x56073 (* 2.0 l_0_16_152)))
 (let ((?x56491 (* ?x56073 l_0_16_164)))
 (let ((?x56070 (* 2.0 l_0_16_151)))
 (let ((?x56489 (* ?x56070 l_0_16_163)))
 (let ((?x56059 (* 2.0 l_0_16_111)))
 (let ((?x56475 (* ?x56059 l_0_16_123)))
 (let ((?x56042 (* 2.0 l_0_16_110)))
 (let ((?x56473 (* ?x56042 l_0_16_122)))
 (let ((?x56037 (* 2.0 l_0_16_109)))
 (let ((?x56471 (* ?x56037 l_0_16_121)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x56469 (* ?x56468 l_0_16_90)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x45083 (* ?x45082 l_0_16_89)))
 (let ((?x12837 (- (- (+ (+ (* (* 2.0 l_0_16_100) l_0_16_88) ?x45083) ?x56469) ?x56471) ?x56473)))
 (let ((?x58108 (- (- (- (+ (+ (+ (- ?x12837 ?x56475) ?x56489) ?x56491) ?x56493) ?x56499) ?x56501) ?x56503)))
 (= ?x58108 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57610 (* l_0_16_94 l_0_16_94)))
 (let ((?x57608 (* l_0_16_93 l_0_16_93)))
 (let ((?x57606 (* l_0_16_92 l_0_16_92)))
 (let ((?x57604 (* l_0_16_91 l_0_16_91)))
 (let ((?x57594 (* l_0_16_178 l_0_16_178)))
 (let ((?x57592 (* l_0_16_177 l_0_16_177)))
 (let ((?x57590 (* l_0_16_176 l_0_16_176)))
 (let ((?x57588 (* l_0_16_175 l_0_16_175)))
 (let ((?x57586 (* l_0_16_157 l_0_16_157)))
 (let ((?x57584 (* l_0_16_156 l_0_16_156)))
 (let ((?x57582 (* l_0_16_155 l_0_16_155)))
 (let ((?x57580 (* l_0_16_154 l_0_16_154)))
 (let ((?x57578 (* l_0_16_115 l_0_16_115)))
 (let ((?x57576 (* l_0_16_114 l_0_16_114)))
 (let ((?x13326 (- (- (* (- l_0_16_112) l_0_16_112) (* l_0_16_113 l_0_16_113)) ?x57576)))
 (let ((?x37095 (- (- (+ (+ (+ (+ (- ?x13326 ?x57578) ?x57580) ?x57582) ?x57584) ?x57586) ?x57588) ?x57590)))
 (= (+ (+ (+ (+ (- (- ?x37095 ?x57592) ?x57594) ?x57604) ?x57606) ?x57608) ?x57610) 0.0))))))))))))))))))
(assert
 (let ((?x57691 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x57688 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x57685 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x57682 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x57668 (* 2.0 l_0_16_178)))
 (let ((?x57669 (* ?x57668 l_0_16_182)))
 (let ((?x57665 (* 2.0 l_0_16_177)))
 (let ((?x57666 (* ?x57665 l_0_16_181)))
 (let ((?x57662 (* 2.0 l_0_16_176)))
 (let ((?x57663 (* ?x57662 l_0_16_180)))
 (let ((?x57659 (* 2.0 l_0_16_175)))
 (let ((?x57660 (* ?x57659 l_0_16_179)))
 (let ((?x57656 (* 2.0 l_0_16_157)))
 (let ((?x57657 (* ?x57656 l_0_16_161)))
 (let ((?x57653 (* 2.0 l_0_16_156)))
 (let ((?x57654 (* ?x57653 l_0_16_160)))
 (let ((?x57650 (* 2.0 l_0_16_155)))
 (let ((?x57651 (* ?x57650 l_0_16_159)))
 (let ((?x57647 (* 2.0 l_0_16_154)))
 (let ((?x57648 (* ?x57647 l_0_16_158)))
 (let ((?x57640 (* 2.0 l_0_16_115)))
 (let ((?x57641 (* ?x57640 l_0_16_119)))
 (let ((?x57637 (* 2.0 l_0_16_114)))
 (let ((?x57638 (* ?x57637 l_0_16_118)))
 (let ((?x57634 (* 2.0 l_0_16_113)))
 (let ((?x57635 (* ?x57634 l_0_16_117)))
 (let ((?x47898 (+ (- (- (- (* (* (- 2.0) l_0_16_112) l_0_16_116) ?x57635) ?x57638) ?x57641) ?x57648)))
 (let ((?x58112 (- (- (- (- (+ (+ (+ ?x47898 ?x57651) ?x57654) ?x57657) ?x57660) ?x57663) ?x57666) ?x57669)))
 (= (+ (+ (+ (+ ?x58112 ?x57682) ?x57685) ?x57688) ?x57691) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x57668 (* 2.0 l_0_16_178)))
 (let ((?x57761 (* ?x57668 l_0_16_187)))
 (let ((?x57665 (* 2.0 l_0_16_177)))
 (let ((?x57759 (* ?x57665 l_0_16_186)))
 (let ((?x57662 (* 2.0 l_0_16_176)))
 (let ((?x57757 (* ?x57662 l_0_16_185)))
 (let ((?x57659 (* 2.0 l_0_16_175)))
 (let ((?x57755 (* ?x57659 l_0_16_184)))
 (let ((?x57656 (* 2.0 l_0_16_157)))
 (let ((?x57753 (* ?x57656 l_0_16_166)))
 (let ((?x57653 (* 2.0 l_0_16_156)))
 (let ((?x57751 (* ?x57653 l_0_16_165)))
 (let ((?x57650 (* 2.0 l_0_16_155)))
 (let ((?x57749 (* ?x57650 l_0_16_164)))
 (let ((?x57647 (* 2.0 l_0_16_154)))
 (let ((?x57747 (* ?x57647 l_0_16_163)))
 (let ((?x57640 (* 2.0 l_0_16_115)))
 (let ((?x57745 (* ?x57640 l_0_16_124)))
 (let ((?x57637 (* 2.0 l_0_16_114)))
 (let ((?x57743 (* ?x57637 l_0_16_123)))
 (let ((?x57634 (* 2.0 l_0_16_113)))
 (let ((?x57741 (* ?x57634 l_0_16_122)))
 (let ((?x36410 (* 2.0 l_0_16_112)))
 (let ((?x57739 (* ?x36410 l_0_16_121)))
 (let ((?x57736 (* 2.0 l_0_16_103)))
 (let ((?x57737 (* ?x57736 l_0_16_94)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x57734 (* ?x56468 l_0_16_93)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57732 (* ?x45082 l_0_16_92)))
 (let ((?x37229 (- (+ (+ (+ (* (* 2.0 l_0_16_100) l_0_16_91) ?x57732) ?x57734) ?x57737) ?x57739)))
 (let ((?x58125 (+ (+ (+ (+ (- (- (- ?x37229 ?x57741) ?x57743) ?x57745) ?x57747) ?x57749) ?x57751) ?x57753)))
 (= (- (- (- (- ?x58125 ?x57755) ?x57757) ?x57759) ?x57761) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57834 (* l_0_16_99 l_0_16_99)))
 (let ((?x57832 (* l_0_16_98 l_0_16_98)))
 (let ((?x57830 (* l_0_16_97 l_0_16_97)))
 (let ((?x57828 (* l_0_16_96 l_0_16_96)))
 (let ((?x57826 (* l_0_16_95 l_0_16_95)))
 (let ((?x57824 (* l_0_16_183 l_0_16_183)))
 (let ((?x57822 (* l_0_16_182 l_0_16_182)))
 (let ((?x57820 (* l_0_16_181 l_0_16_181)))
 (let ((?x57818 (* l_0_16_180 l_0_16_180)))
 (let ((?x57816 (* l_0_16_179 l_0_16_179)))
 (let ((?x57814 (* l_0_16_162 l_0_16_162)))
 (let ((?x57812 (* l_0_16_161 l_0_16_161)))
 (let ((?x36575 (* l_0_16_160 l_0_16_160)))
 (let ((?x36571 (* l_0_16_159 l_0_16_159)))
 (let ((?x36542 (* l_0_16_158 l_0_16_158)))
 (let ((?x36564 (* l_0_16_120 l_0_16_120)))
 (let ((?x12710 (* l_0_16_119 l_0_16_119)))
 (let ((?x47595 (* l_0_16_118 l_0_16_118)))
 (let ((?x26635 (- (- (* (- l_0_16_116) l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x47595)))
 (let ((?x58135 (+ (+ (+ (+ (+ (- (- ?x26635 ?x12710) ?x36564) ?x36542) ?x36571) ?x36575) ?x57812) ?x57814)))
 (let ((?x58142 (+ (+ (- (- (- (- (- ?x58135 ?x57816) ?x57818) ?x57820) ?x57822) ?x57824) ?x57826) ?x57828)))
 (= (+ (+ (+ ?x58142 ?x57830) ?x57832) ?x57834) 0.0)))))))))))))))))))))))
(assert
 (let ((?x57921 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57918 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57915 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57912 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57909 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57906 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57903 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57900 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57897 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57894 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x57885 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x57882 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x57879 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x57876 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x57873 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x57870 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x57736 (* 2.0 l_0_16_103)))
 (let ((?x57867 (* ?x57736 l_0_16_98)))
 (let ((?x56468 (* 2.0 l_0_16_102)))
 (let ((?x57865 (* ?x56468 l_0_16_97)))
 (let ((?x45082 (* 2.0 l_0_16_101)))
 (let ((?x57863 (* ?x45082 l_0_16_96)))
 (let ((?x58151 (+ (+ (+ (+ (* (* 2.0 l_0_16_100) l_0_16_95) ?x57863) ?x57865) ?x57867) ?x57870)))
 (let ((?x58158 (+ (+ (- (- (- (- (- ?x58151 ?x57873) ?x57876) ?x57879) ?x57882) ?x57885) ?x57894) ?x57897)))
 (let ((?x58165 (- (- (- (- (+ (+ (+ ?x58158 ?x57900) ?x57903) ?x57906) ?x57909) ?x57912) ?x57915) ?x57918)))
 (= (- ?x58165 ?x57921) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x57996 (* l_0_16_189 l_0_16_189)))
 (let ((?x57994 (* l_0_16_188 l_0_16_188)))
 (let ((?x57992 (* l_0_16_187 l_0_16_187)))
 (let ((?x57990 (* l_0_16_186 l_0_16_186)))
 (let ((?x57988 (* l_0_16_185 l_0_16_185)))
 (let ((?x57986 (* l_0_16_184 l_0_16_184)))
 (let ((?x57984 (* l_0_16_168 l_0_16_168)))
 (let ((?x57982 (* l_0_16_167 l_0_16_167)))
 (let ((?x57980 (* l_0_16_166 l_0_16_166)))
 (let ((?x57978 (* l_0_16_165 l_0_16_165)))
 (let ((?x57976 (* l_0_16_164 l_0_16_164)))
 (let ((?x57974 (* l_0_16_163 l_0_16_163)))
 (let ((?x57972 (* l_0_16_126 l_0_16_126)))
 (let ((?x57970 (* l_0_16_125 l_0_16_125)))
 (let ((?x57968 (* l_0_16_124 l_0_16_124)))
 (let ((?x57966 (* l_0_16_123 l_0_16_123)))
 (let ((?x57964 (* l_0_16_122 l_0_16_122)))
 (let ((?x57962 (* l_0_16_121 l_0_16_121)))
 (let ((?x57960 (* l_0_16_105 l_0_16_105)))
 (let ((?x57958 (* l_0_16_104 l_0_16_104)))
 (let ((?x57956 (* l_0_16_103 l_0_16_103)))
 (let ((?x57954 (* l_0_16_102 l_0_16_102)))
 (let ((?x13175 (+ (+ (* l_0_16_100 l_0_16_100) (* l_0_16_101 l_0_16_101)) ?x57954)))
 (let ((?x48039 (- (- (- (- (+ (+ (+ ?x13175 ?x57956) ?x57958) ?x57960) ?x57962) ?x57964) ?x57966) ?x57968)))
 (let ((?x37332 (+ (+ (+ (+ (+ (- (- ?x48039 ?x57970) ?x57972) ?x57974) ?x57976) ?x57978) ?x57980) ?x57982)))
 (let ((?x58176 (- (- (- (- (- (- (+ ?x37332 ?x57984) ?x57986) ?x57988) ?x57990) ?x57992) ?x57994) ?x57996)))
 (= ?x58176 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x56234 (* l_0_16_141 l_0_16_141)))
 (let ((?x56232 (* l_0_16_140 l_0_16_140)))
 (let ((?x56228 (* l_0_16_139 l_0_16_139)))
 (let ((?x26968 (- (- (* (- l_0_16_137) l_0_16_137) (* l_0_16_138 l_0_16_138)) ?x56228)))
 (= (- (- ?x26968 ?x56232) ?x56234) 0.0))))))
(assert
 (>= l_0_16_1 0.0))
(assert
 (>= l_0_16_3 0.0))
(assert
 (>= l_0_16_6 0.0))
(assert
 (>= l_0_16_10 0.0))
(assert
 (>= l_0_16_15 0.0))
(assert
 (>= l_0_16_21 0.0))
(assert
 (>= l_0_16_22 0.0))
(assert
 (>= l_0_16_24 0.0))
(assert
 (>= l_0_16_27 0.0))
(assert
 (>= l_0_16_31 0.0))
(assert
 (>= l_0_16_36 0.0))
(assert
 (>= l_0_16_42 0.0))
(assert
 (>= l_0_16_43 0.0))
(assert
 (>= l_0_16_45 0.0))
(assert
 (>= l_0_16_48 0.0))
(assert
 (>= l_0_16_52 0.0))
(assert
 (>= l_0_16_57 0.0))
(assert
 (>= l_0_16_63 0.0))
(assert
 (>= l_0_16_64 0.0))
(assert
 (>= l_0_16_66 0.0))
(assert
 (>= l_0_16_69 0.0))
(assert
 (>= l_0_16_73 0.0))
(assert
 (>= l_0_16_78 0.0))
(assert
 (>= l_0_16_84 0.0))
(assert
 (>= l_0_16_85 0.0))
(assert
 (>= l_0_16_87 0.0))
(assert
 (>= l_0_16_90 0.0))
(assert
 (>= l_0_16_94 0.0))
(assert
 (>= l_0_16_99 0.0))
(assert
 (>= l_0_16_105 0.0))
(assert
 (>= l_0_16_106 0.0))
(assert
 (>= l_0_16_108 0.0))
(assert
 (>= l_0_16_111 0.0))
(assert
 (>= l_0_16_115 0.0))
(assert
 (>= l_0_16_120 0.0))
(assert
 (>= l_0_16_126 0.0))
(assert
 (>= l_0_16_127 0.0))
(assert
 (>= l_0_16_129 0.0))
(assert
 (>= l_0_16_132 0.0))
(assert
 (>= l_0_16_136 0.0))
(assert
 (>= l_0_16_141 0.0))
(assert
 (>= l_0_16_147 0.0))
(assert
 (>= l_0_16_148 0.0))
(assert
 (>= l_0_16_150 0.0))
(assert
 (>= l_0_16_153 0.0))
(assert
 (>= l_0_16_157 0.0))
(assert
 (>= l_0_16_162 0.0))
(assert
 (>= l_0_16_168 0.0))
(assert
 (>= l_0_16_169 0.0))
(assert
 (>= l_0_16_171 0.0))
(assert
 (>= l_0_16_174 0.0))
(assert
 (>= l_0_16_178 0.0))
(assert
 (>= l_0_16_183 0.0))
(assert
 (>= l_0_16_189 0.0))
(assert
 (>= l_0_16_190 0.0))
(assert
 (>= l_0_16_192 0.0))
(assert
 (>= l_0_16_195 0.0))
(assert
 (>= l_0_16_199 0.0))
(assert
 (>= l_0_16_204 0.0))
(assert
 (>= l_0_16_210 0.0))
(assert
 (>= l_0_16_211 0.0))
(assert
 (>= l_0_16_213 0.0))
(assert
 (>= l_0_16_216 0.0))
(assert
 (>= l_0_16_220 0.0))
(assert
 (>= l_0_16_225 0.0))
(assert
 (>= l_0_16_231 0.0))
(assert
 (>= l_0_16_232 0.0))
(assert
 (>= l_0_16_234 0.0))
(assert
 (>= l_0_16_237 0.0))
(assert
 (>= l_0_16_241 0.0))
(assert
 (>= l_0_16_246 0.0))
(assert
 (>= l_0_16_252 0.0))
(assert
 (>= l_0_16_253 0.0))
(assert
 (>= l_0_16_255 0.0))
(assert
 (>= l_0_16_258 0.0))
(assert
 (>= l_0_16_262 0.0))
(assert
 (>= l_0_16_267 0.0))
(assert
 (>= l_0_16_273 0.0))
(assert
 (let ((?x58265 (* l_0_17_3 l_0_17_3)))
 (let ((?x58266 (* 6.0 ?x58265)))
 (let ((?x58263 (* l_0_17_276 l_0_17_276)))
 (let ((?x58261 (* l_0_17_275 l_0_17_275)))
 (let ((?x58259 (* l_0_17_255 l_0_17_255)))
 (let ((?x58257 (* l_0_17_254 l_0_17_254)))
 (let ((?x58255 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x58252 (* l_0_17_234 l_0_17_234)))
 (let ((?x58250 (* l_0_17_233 l_0_17_233)))
 (let ((?x58248 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x58245 (* l_0_17_213 l_0_17_213)))
 (let ((?x58243 (* l_0_17_212 l_0_17_212)))
 (let ((?x58240 (* l_0_17_2 l_0_17_2)))
 (let ((?x58241 (* 6.0 ?x58240)))
 (let ((?x58238 (* l_0_17_192 l_0_17_192)))
 (let ((?x58246 (- (- (+ (- (- _a_0_ (* l_0_17_191 l_0_17_191)) ?x58238) ?x58241) ?x58243) ?x58245)))
 (let ((?x58262 (- (- (- (- (- (- (- ?x58246 ?x58248) ?x58250) ?x58252) ?x58255) ?x58257) ?x58259) ?x58261)))
 (let ((?x58273 (- (- (+ (- ?x58262 ?x58263) ?x58266) (* (* 1.0 l_0_17_44) l_0_17_44)) (* (* 1.0 l_0_17_45) l_0_17_45))))
 (let ((?x58279 (+ (+ ?x58273 (* 1.0 (* l_0_17_65 l_0_17_65))) (* 1.0 (* l_0_17_66 l_0_17_66)))))
 (= (- ?x58279 1.0) 0.0)))))))))))))))))))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x58462 (* ?x58461 l_0_17_92)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x58459 (* ?x58458 l_0_17_91)))
 (let ((?x58455 (* 2.0 l_0_17_73)))
 (let ((?x58456 (* ?x58455 l_0_17_82)))
 (let ((?x58452 (* 2.0 l_0_17_72)))
 (let ((?x58453 (* ?x58452 l_0_17_81)))
 (let ((?x58449 (* 2.0 l_0_17_71)))
 (let ((?x58450 (* ?x58449 l_0_17_80)))
 (let ((?x58446 (* 2.0 l_0_17_70)))
 (let ((?x58447 (* ?x58446 l_0_17_79)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x58444 (* ?x58443 l_0_17_80)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x58441 (* ?x58440 l_0_17_79)))
 (let ((?x58437 (* 2.0 l_0_17_52)))
 (let ((?x58438 (* ?x58437 l_0_17_61)))
 (let ((?x58434 (* 2.0 l_0_17_51)))
 (let ((?x58435 (* ?x58434 l_0_17_60)))
 (let ((?x58431 (* 2.0 l_0_17_50)))
 (let ((?x58432 (* ?x58431 l_0_17_59)))
 (let ((?x58428 (* 2.0 l_0_17_49)))
 (let ((?x58429 (* ?x58428 l_0_17_58)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x58426 (* ?x58425 l_0_17_59)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x58423 (* ?x58422 l_0_17_58)))
 (let ((?x58419 (* 12.0 l_0_17_31)))
 (let ((?x58420 (* ?x58419 l_0_17_40)))
 (let ((?x58416 (* 12.0 l_0_17_30)))
 (let ((?x58417 (* ?x58416 l_0_17_39)))
 (let ((?x58413 (* 12.0 l_0_17_29)))
 (let ((?x58414 (* ?x58413 l_0_17_38)))
 (let ((?x58398 (* 12.0 l_0_17_28)))
 (let ((?x58399 (* ?x58398 l_0_17_37)))
 (let ((?x58347 (* 12.0 l_0_17_18)))
 (let ((?x58348 (* ?x58347 l_0_17_9)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x58345 (* ?x58344 l_0_17_176)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x58342 (* ?x58341 l_0_17_175)))
 (let ((?x58338 (* 12.0 l_0_17_17)))
 (let ((?x58339 (* ?x58338 l_0_17_8)))
 (let ((?x58335 (* 12.0 l_0_17_16)))
 (let ((?x58336 (* ?x58335 l_0_17_7)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x58333 (* ?x58332 l_0_17_155)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x58330 (* ?x58329 l_0_17_154)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x58327 (* ?x58326 l_0_17_113)))
 (let ((?x58325 (+ (+ _a_1_ (* (* 12.0 l_0_17_10) l_0_17_19)) (* (* 2.0 l_0_17_107) l_0_17_112))))
 (let ((?x58346 (+ (+ (+ (+ (- (- (+ ?x58325 ?x58327) ?x58330) ?x58333) ?x58336) ?x58339) ?x58342) ?x58345)))
 (let ((?x58355 (- (- (+ ?x58346 ?x58348) (* (* 2.0 l_0_17_196) l_0_17_205)) (* (* 2.0 l_0_17_197) l_0_17_206))))
 (let ((?x58361 (- (- ?x58355 (* (* 2.0 l_0_17_198) l_0_17_207)) (* (* 2.0 l_0_17_199) l_0_17_208))))
 (let ((?x58367 (- (- ?x58361 (* (* 2.0 l_0_17_217) l_0_17_226)) (* (* 2.0 l_0_17_218) l_0_17_227))))
 (let ((?x58373 (- (- ?x58367 (* (* 2.0 l_0_17_219) l_0_17_228)) (* (* 2.0 l_0_17_220) l_0_17_229))))
 (let ((?x58379 (- (- ?x58373 (* (* 2.0 l_0_17_238) l_0_17_247)) (* (* 2.0 l_0_17_239) l_0_17_248))))
 (let ((?x58385 (- (- ?x58379 (* (* 2.0 l_0_17_240) l_0_17_249)) (* (* 2.0 l_0_17_241) l_0_17_250))))
 (let ((?x58391 (- (- ?x58385 (* (* 2.0 l_0_17_259) l_0_17_268)) (* (* 2.0 l_0_17_260) l_0_17_269))))
 (let ((?x58397 (- (- ?x58391 (* (* 2.0 l_0_17_261) l_0_17_270)) (* (* 2.0 l_0_17_262) l_0_17_271))))
 (let ((?x58406 (- (- (- ?x58397 ?x58399) (* (* 2.0 l_0_17_280) l_0_17_289)) (* (* 2.0 l_0_17_281) l_0_17_290))))
 (let ((?x58412 (- (- ?x58406 (* (* 2.0 l_0_17_282) l_0_17_291)) (* (* 2.0 l_0_17_283) l_0_17_292))))
 (let ((?x58433 (- (- (+ (+ (- (- (- ?x58412 ?x58414) ?x58417) ?x58420) ?x58423) ?x58426) ?x58429) ?x58432)))
 (let ((?x58454 (+ (+ (+ (- (- (- (- ?x58433 ?x58435) ?x58438) ?x58441) ?x58444) ?x58447) ?x58450) ?x58453)))
 (= (- (- (+ ?x58454 ?x58456) ?x58459) ?x58462) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58277 (* l_0_17_66 l_0_17_66)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x58664 (* ?x58443 l_0_17_71)))
 (let ((?x58274 (* l_0_17_65 l_0_17_65)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x58661 (* ?x58440 l_0_17_70)))
 (let ((?x58314 (* l_0_17_45 l_0_17_45)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x58658 (* ?x58425 l_0_17_50)))
 (let ((?x27094 (* l_0_17_44 l_0_17_44)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x58655 (* ?x58422 l_0_17_49)))
 (let ((?x58652 (* 12.0 l_0_17_3)))
 (let ((?x58653 (* ?x58652 l_0_17_8)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x58638 (* ?x58637 l_0_17_29)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x58629 (* ?x58628 l_0_17_28)))
 (let ((?x58619 (* 12.0 l_0_17_2)))
 (let ((?x58620 (* ?x58619 l_0_17_7)))
 (let ((?x58618 (- (- _a_2_ (* (* 2.0 l_0_17_191) l_0_17_196)) (* (* 2.0 l_0_17_192) l_0_17_197))))
 (let ((?x58627 (- (- (+ ?x58618 ?x58620) (* (* 2.0 l_0_17_212) l_0_17_217)) (* (* 2.0 l_0_17_213) l_0_17_218))))
 (let ((?x58636 (- (- (- ?x58627 ?x58629) (* (* 2.0 l_0_17_233) l_0_17_238)) (* (* 2.0 l_0_17_234) l_0_17_239))))
 (let ((?x58645 (- (- (- ?x58636 ?x58638) (* (* 2.0 l_0_17_254) l_0_17_259)) (* (* 2.0 l_0_17_255) l_0_17_260))))
 (let ((?x58651 (- (- ?x58645 (* (* 2.0 l_0_17_275) l_0_17_280)) (* (* 2.0 l_0_17_276) l_0_17_281))))
 (let ((?x58663 (- (+ (+ (- (+ (- (+ ?x58651 ?x58653) ?x58655) ?x27094) ?x58658) ?x58314) ?x58661) ?x58274)))
 (= (- (+ ?x58663 ?x58664) ?x58277) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x58770 (* l_0_17_87 l_0_17_87)))
 (let ((?x58768 (* l_0_17_86 l_0_17_86)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x58444 (* ?x58443 l_0_17_80)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x58441 (* ?x58440 l_0_17_79)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x58426 (* ?x58425 l_0_17_59)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x58423 (* ?x58422 l_0_17_58)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x58754 (* ?x58637 l_0_17_38)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x58748 (* ?x58628 l_0_17_37)))
 (let ((?x58738 (* l_0_17_171 l_0_17_171)))
 (let ((?x58736 (* l_0_17_170 l_0_17_170)))
 (let ((?x58338 (* 12.0 l_0_17_17)))
 (let ((?x58734 (* ?x58338 l_0_17_3)))
 (let ((?x58335 (* 12.0 l_0_17_16)))
 (let ((?x58732 (* ?x58335 l_0_17_2)))
 (let ((?x58730 (* l_0_17_150 l_0_17_150)))
 (let ((?x58728 (* l_0_17_149 l_0_17_149)))
 (let ((?x58726 (* l_0_17_108 l_0_17_108)))
 (let ((?x58733 (+ (- (- (+ (+ _a_3_ (* l_0_17_107 l_0_17_107)) ?x58726) ?x58728) ?x58730) ?x58732)))
 (let ((?x58741 (- (+ (+ (+ ?x58733 ?x58734) ?x58736) ?x58738) (* (* 2.0 l_0_17_191) l_0_17_205))))
 (let ((?x58745 (- (- ?x58741 (* (* 2.0 l_0_17_192) l_0_17_206)) (* (* 2.0 l_0_17_212) l_0_17_226))))
 (let ((?x58751 (- (- (- ?x58745 (* (* 2.0 l_0_17_213) l_0_17_227)) ?x58748) (* (* 2.0 l_0_17_233) l_0_17_247))))
 (let ((?x58757 (- (- (- ?x58751 (* (* 2.0 l_0_17_234) l_0_17_248)) ?x58754) (* (* 2.0 l_0_17_254) l_0_17_268))))
 (let ((?x58761 (- (- ?x58757 (* (* 2.0 l_0_17_255) l_0_17_269)) (* (* 2.0 l_0_17_275) l_0_17_289))))
 (let ((?x58766 (+ (- (- (- ?x58761 (* (* 2.0 l_0_17_276) l_0_17_290)) ?x58423) ?x58426) ?x58441)))
 (= (- (- (+ ?x58766 ?x58444) ?x58768) ?x58770) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58928 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x58925 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x58922 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x58919 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x58916 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x58913 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x58910 (* l_0_17_294 l_0_17_294)))
 (let ((?x58908 (* l_0_17_293 l_0_17_293)))
 (let ((?x58906 (* l_0_17_292 l_0_17_292)))
 (let ((?x58904 (* l_0_17_291 l_0_17_291)))
 (let ((?x58902 (* l_0_17_290 l_0_17_290)))
 (let ((?x58900 (* l_0_17_289 l_0_17_289)))
 (let ((?x58898 (* l_0_17_273 l_0_17_273)))
 (let ((?x58896 (* l_0_17_272 l_0_17_272)))
 (let ((?x58894 (* l_0_17_271 l_0_17_271)))
 (let ((?x58892 (* l_0_17_270 l_0_17_270)))
 (let ((?x58890 (* l_0_17_269 l_0_17_269)))
 (let ((?x58888 (* l_0_17_268 l_0_17_268)))
 (let ((?x58886 (* l_0_17_252 l_0_17_252)))
 (let ((?x58884 (* l_0_17_251 l_0_17_251)))
 (let ((?x58882 (* l_0_17_250 l_0_17_250)))
 (let ((?x58880 (* l_0_17_249 l_0_17_249)))
 (let ((?x58878 (* l_0_17_248 l_0_17_248)))
 (let ((?x58876 (* l_0_17_247 l_0_17_247)))
 (let ((?x58874 (* l_0_17_231 l_0_17_231)))
 (let ((?x58872 (* l_0_17_230 l_0_17_230)))
 (let ((?x58870 (* l_0_17_229 l_0_17_229)))
 (let ((?x58868 (* l_0_17_228 l_0_17_228)))
 (let ((?x58866 (* l_0_17_227 l_0_17_227)))
 (let ((?x58864 (* l_0_17_226 l_0_17_226)))
 (let ((?x58862 (* l_0_17_210 l_0_17_210)))
 (let ((?x58859 (* l_0_17_21 l_0_17_21)))
 (let ((?x58860 (* 6.0 ?x58859)))
 (let ((?x58857 (* l_0_17_209 l_0_17_209)))
 (let ((?x58855 (* l_0_17_208 l_0_17_208)))
 (let ((?x58853 (* l_0_17_207 l_0_17_207)))
 (let ((?x58851 (* l_0_17_206 l_0_17_206)))
 (let ((?x58849 (* l_0_17_205 l_0_17_205)))
 (let ((?x58846 (* l_0_17_20 l_0_17_20)))
 (let ((?x58847 (* 6.0 ?x58846)))
 (let ((?x58843 (* l_0_17_19 l_0_17_19)))
 (let ((?x58844 (* 6.0 ?x58843)))
 (let ((?x58840 (* l_0_17_18 l_0_17_18)))
 (let ((?x58841 (* 6.0 ?x58840)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x58838 (* ?x58344 l_0_17_185)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x58836 (* ?x58341 l_0_17_184)))
 (let ((?x58833 (* l_0_17_17 l_0_17_17)))
 (let ((?x58834 (* 6.0 ?x58833)))
 (let ((?x58830 (* l_0_17_16 l_0_17_16)))
 (let ((?x58831 (* 6.0 ?x58830)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x58828 (* ?x58332 l_0_17_164)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x58826 (* ?x58329 l_0_17_163)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x58824 (* ?x58326 l_0_17_122)))
 (let ((?x58323 (* 2.0 l_0_17_107)))
 (let ((?x58822 (* ?x58323 l_0_17_121)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x58820 (* ?x58819 l_0_17_87)))
 (let ((?x58825 (+ (+ (- (- _a_4_ (* (* 2.0 l_0_17_100) l_0_17_86)) ?x58820) ?x58822) ?x58824)))
 (let ((?x58842 (+ (+ (+ (+ (+ (- (- ?x58825 ?x58826) ?x58828) ?x58831) ?x58834) ?x58836) ?x58838) ?x58841)))
 (let ((?x58858 (- (- (- (- (- (+ (+ ?x58842 ?x58844) ?x58847) ?x58849) ?x58851) ?x58853) ?x58855) ?x58857)))
 (let ((?x58873 (- (- (- (- (- (- (+ ?x58858 ?x58860) ?x58862) ?x58864) ?x58866) ?x58868) ?x58870) ?x58872)))
 (let ((?x58887 (- (- (- (- (- (- (- ?x58873 ?x58874) ?x58876) ?x58878) ?x58880) ?x58882) ?x58884) ?x58886)))
 (let ((?x58901 (- (- (- (- (- (- (- ?x58887 ?x58888) ?x58890) ?x58892) ?x58894) ?x58896) ?x58898) ?x58900)))
 (let ((?x58917 (- (- (- (- (- (- (- ?x58901 ?x58902) ?x58904) ?x58906) ?x58908) ?x58910) ?x58913) ?x58916)))
 (let ((?x58932 (- (- (- (- (- ?x58917 ?x58919) ?x58922) ?x58925) ?x58928) (* (* 1.0 l_0_17_58) l_0_17_58))))
 (let ((?x58938 (- (- ?x58932 (* (* 1.0 l_0_17_59) l_0_17_59)) (* (* 1.0 l_0_17_60) l_0_17_60))))
 (let ((?x58944 (- (- ?x58938 (* (* 1.0 l_0_17_61) l_0_17_61)) (* (* 1.0 l_0_17_62) l_0_17_62))))
 (let ((?x58950 (+ (- ?x58944 (* (* 1.0 l_0_17_63) l_0_17_63)) (* 1.0 (* l_0_17_79 l_0_17_79)))))
 (let ((?x58956 (+ (+ ?x58950 (* 1.0 (* l_0_17_80 l_0_17_80))) (* 1.0 (* l_0_17_81 l_0_17_81)))))
 (let ((?x58962 (+ (+ ?x58956 (* 1.0 (* l_0_17_82 l_0_17_82))) (* 1.0 (* l_0_17_83 l_0_17_83)))))
 (= (+ ?x58962 (* 1.0 (* l_0_17_84 l_0_17_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59161 (* l_0_17_9 l_0_17_9)))
 (let ((?x59162 (* 6.0 ?x59161)))
 (let ((?x59158 (* l_0_17_8 l_0_17_8)))
 (let ((?x59159 (* 6.0 ?x59158)))
 (let ((?x59143 (* l_0_17_7 l_0_17_7)))
 (let ((?x59144 (* 6.0 ?x59143)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x58664 (* ?x58443 l_0_17_71)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x58661 (* ?x58440 l_0_17_70)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x58658 (* ?x58425 l_0_17_50)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x58655 (* ?x58422 l_0_17_49)))
 (let ((?x59125 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x59122 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x59119 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x59116 (* l_0_17_283 l_0_17_283)))
 (let ((?x59114 (* l_0_17_282 l_0_17_282)))
 (let ((?x59112 (* l_0_17_281 l_0_17_281)))
 (let ((?x59110 (* l_0_17_280 l_0_17_280)))
 (let ((?x59108 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x59105 (* l_0_17_262 l_0_17_262)))
 (let ((?x59103 (* l_0_17_261 l_0_17_261)))
 (let ((?x59101 (* l_0_17_260 l_0_17_260)))
 (let ((?x59099 (* l_0_17_259 l_0_17_259)))
 (let ((?x59097 (* l_0_17_241 l_0_17_241)))
 (let ((?x59095 (* l_0_17_240 l_0_17_240)))
 (let ((?x59093 (* l_0_17_239 l_0_17_239)))
 (let ((?x59091 (* l_0_17_238 l_0_17_238)))
 (let ((?x59089 (* l_0_17_220 l_0_17_220)))
 (let ((?x59087 (* l_0_17_219 l_0_17_219)))
 (let ((?x59085 (* l_0_17_218 l_0_17_218)))
 (let ((?x59083 (* l_0_17_217 l_0_17_217)))
 (let ((?x59081 (* l_0_17_199 l_0_17_199)))
 (let ((?x59079 (* l_0_17_198 l_0_17_198)))
 (let ((?x59077 (* l_0_17_197 l_0_17_197)))
 (let ((?x59075 (* l_0_17_196 l_0_17_196)))
 (let ((?x59072 (* l_0_17_10 l_0_17_10)))
 (let ((?x59073 (* 6.0 ?x59072)))
 (let ((?x59074 (+ _a_5_ ?x59073)))
 (let ((?x59088 (- (- (- (- (- (- (- ?x59074 ?x59075) ?x59077) ?x59079) ?x59081) ?x59083) ?x59085) ?x59087)))
 (let ((?x59102 (- (- (- (- (- (- (- ?x59088 ?x59089) ?x59091) ?x59093) ?x59095) ?x59097) ?x59099) ?x59101)))
 (let ((?x59117 (- (- (- (- (- (- (- ?x59102 ?x59103) ?x59105) ?x59108) ?x59110) ?x59112) ?x59114) ?x59116)))
 (let ((?x59131 (- (+ (+ (- (- (- ?x59117 ?x59119) ?x59122) ?x59125) ?x58655) ?x58658) (* (* 1.0 l_0_17_49) l_0_17_49))))
 (let ((?x59137 (- (- ?x59131 (* (* 1.0 l_0_17_50) l_0_17_50)) (* (* 1.0 l_0_17_51) l_0_17_51))))
 (let ((?x59145 (+ (- (- (- ?x59137 (* (* 1.0 l_0_17_52) l_0_17_52)) ?x58661) ?x58664) ?x59144)))
 (let ((?x59151 (+ (+ ?x59145 (* 1.0 (* l_0_17_70 l_0_17_70))) (* 1.0 (* l_0_17_71 l_0_17_71)))))
 (let ((?x59157 (+ (+ ?x59151 (* 1.0 (* l_0_17_72 l_0_17_72))) (* 1.0 (* l_0_17_73 l_0_17_73)))))
 (= (+ (+ ?x59157 ?x59159) ?x59162) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58770 (* l_0_17_87 l_0_17_87)))
 (let ((?x58768 (* l_0_17_86 l_0_17_86)))
 (let ((?x59260 (* l_0_17_69 l_0_17_69)))
 (let ((?x59261 (* 3.0 ?x59260)))
 (let ((?x59257 (* l_0_17_68 l_0_17_68)))
 (let ((?x59258 (* 3.0 ?x59257)))
 (let ((?x59254 (* l_0_17_67 l_0_17_67)))
 (let ((?x59255 (* 3.0 ?x59254)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x59252 (* ?x59251 l_0_17_68)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x59249 (* ?x59248 l_0_17_67)))
 (let ((?x59245 (* l_0_17_6 l_0_17_6)))
 (let ((?x59246 (* 6.0 ?x59245)))
 (let ((?x59242 (* l_0_17_5 l_0_17_5)))
 (let ((?x59243 (* 6.0 ?x59242)))
 (let ((?x59240 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x59237 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x59234 (* (* 3.0 l_0_17_46) l_0_17_46)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x59231 (* ?x59230 l_0_17_47)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x59228 (* ?x59227 l_0_17_46)))
 (let ((?x59224 (* l_0_17_4 l_0_17_4)))
 (let ((?x59225 (* 6.0 ?x59224)))
 (let ((?x59222 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x59219 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x59216 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x58738 (* l_0_17_171 l_0_17_171)))
 (let ((?x58736 (* l_0_17_170 l_0_17_170)))
 (let ((?x58730 (* l_0_17_150 l_0_17_150)))
 (let ((?x58728 (* l_0_17_149 l_0_17_149)))
 (let ((?x59209 (* l_0_17_132 l_0_17_132)))
 (let ((?x48557 (* l_0_17_131 l_0_17_131)))
 (let ((?x48625 (* l_0_17_130 l_0_17_130)))
 (let ((?x48556 (+ (- (* (- l_0_17_107) l_0_17_107) (* l_0_17_108 l_0_17_108)) ?x48625)))
 (let ((?x59217 (- (- (- (+ (+ (+ (+ ?x48556 ?x48557) ?x59209) ?x58728) ?x58730) ?x58736) ?x58738) ?x59216)))
 (let ((?x59238 (- (- (- (- (+ (- (- ?x59217 ?x59219) ?x59222) ?x59225) ?x59228) ?x59231) ?x59234) ?x59237)))
 (let ((?x59259 (+ (+ (+ (+ (+ (+ (- ?x59238 ?x59240) ?x59243) ?x59246) ?x59249) ?x59252) ?x59255) ?x59258)))
 (= (- (+ (+ (+ ?x59259 ?x59261) ?x58768) ?x58770) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58277 (* l_0_17_66 l_0_17_66)))
 (let ((?x59363 (* 3.0 ?x58277)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x59252 (* ?x59251 l_0_17_68)))
 (let ((?x58274 (* l_0_17_65 l_0_17_65)))
 (let ((?x59360 (* 3.0 ?x58274)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x59249 (* ?x59248 l_0_17_67)))
 (let ((?x59245 (* l_0_17_6 l_0_17_6)))
 (let ((?x59246 (* 6.0 ?x59245)))
 (let ((?x59242 (* l_0_17_5 l_0_17_5)))
 (let ((?x59243 (* 6.0 ?x59242)))
 (let ((?x59346 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x59231 (* ?x59230 l_0_17_47)))
 (let ((?x59342 (* (* 3.0 l_0_17_44) l_0_17_44)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x59228 (* ?x59227 l_0_17_46)))
 (let ((?x59224 (* l_0_17_4 l_0_17_4)))
 (let ((?x59225 (* 6.0 ?x59224)))
 (let ((?x58652 (* 12.0 l_0_17_3)))
 (let ((?x59337 (* ?x58652 l_0_17_5)))
 (let ((?x59335 (* l_0_17_279 l_0_17_279)))
 (let ((?x59333 (* l_0_17_278 l_0_17_278)))
 (let ((?x59331 (* l_0_17_277 l_0_17_277)))
 (let ((?x59222 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x59219 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x59327 (* l_0_17_258 l_0_17_258)))
 (let ((?x59325 (* l_0_17_257 l_0_17_257)))
 (let ((?x59323 (* l_0_17_256 l_0_17_256)))
 (let ((?x59216 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x59320 (* ?x58637 l_0_17_26)))
 (let ((?x59318 (* l_0_17_237 l_0_17_237)))
 (let ((?x59316 (* l_0_17_236 l_0_17_236)))
 (let ((?x59314 (* l_0_17_235 l_0_17_235)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x59312 (* ?x58628 l_0_17_25)))
 (let ((?x59310 (* l_0_17_216 l_0_17_216)))
 (let ((?x59308 (* l_0_17_215 l_0_17_215)))
 (let ((?x59306 (* l_0_17_214 l_0_17_214)))
 (let ((?x58619 (* 12.0 l_0_17_2)))
 (let ((?x59304 (* ?x58619 l_0_17_4)))
 (let ((?x59302 (* l_0_17_195 l_0_17_195)))
 (let ((?x59300 (* l_0_17_194 l_0_17_194)))
 (let ((?x59298 (* l_0_17_193 l_0_17_193)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x59296 (* ?x59295 l_0_17_131)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x59294 (* ?x59293 l_0_17_130)))
 (let ((?x59309 (- (- (+ (- (- (- (+ ?x59294 ?x59296) ?x59298) ?x59300) ?x59302) ?x59304) ?x59306) ?x59308)))
 (let ((?x59322 (- (- (- (- (- (- (- ?x59309 ?x59310) ?x59312) ?x59314) ?x59316) ?x59318) ?x59320) ?x59216)))
 (let ((?x59334 (- (- (- (- (- (- (- ?x59322 ?x59323) ?x59325) ?x59327) ?x59219) ?x59222) ?x59331) ?x59333)))
 (let ((?x59347 (- (- (- (- (+ (+ (- ?x59334 ?x59335) ?x59337) ?x59225) ?x59228) ?x59342) ?x59231) ?x59346)))
 (let ((?x59353 (- (- ?x59347 (* (* 1.0 l_0_17_46) l_0_17_46)) (* (* 1.0 l_0_17_47) l_0_17_47))))
 (let ((?x59359 (+ (+ (+ (- ?x59353 (* (* 1.0 l_0_17_48) l_0_17_48)) ?x59243) ?x59246) ?x59249)))
 (let ((?x59366 (+ (+ (+ (+ ?x59359 ?x59360) ?x59252) ?x59363) (* 1.0 (* l_0_17_67 l_0_17_67)))))
 (let ((?x59370 (+ (+ ?x59366 (* 1.0 (* l_0_17_68 l_0_17_68))) (* 1.0 (* l_0_17_69 l_0_17_69)))))
 (= (- ?x59370 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58277 (* l_0_17_66 l_0_17_66)))
 (let ((?x59363 (* 3.0 ?x58277)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x59478 (* ?x58443 l_0_17_68)))
 (let ((?x58274 (* l_0_17_65 l_0_17_65)))
 (let ((?x59360 (* 3.0 ?x58274)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x59475 (* ?x58440 l_0_17_67)))
 (let ((?x59346 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x59472 (* ?x58425 l_0_17_47)))
 (let ((?x59342 (* (* 3.0 l_0_17_44) l_0_17_44)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x59469 (* ?x58422 l_0_17_46)))
 (let ((?x58265 (* l_0_17_3 l_0_17_3)))
 (let ((?x58266 (* 6.0 ?x58265)))
 (let ((?x58652 (* 12.0 l_0_17_3)))
 (let ((?x59337 (* ?x58652 l_0_17_5)))
 (let ((?x58255 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x59320 (* ?x58637 l_0_17_26)))
 (let ((?x58248 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x59312 (* ?x58628 l_0_17_25)))
 (let ((?x58240 (* l_0_17_2 l_0_17_2)))
 (let ((?x58241 (* 6.0 ?x58240)))
 (let ((?x58619 (* 12.0 l_0_17_2)))
 (let ((?x59304 (* ?x58619 l_0_17_4)))
 (let ((?x59439 (* l_0_17_129 l_0_17_129)))
 (let ((?x59438 (* l_0_17_128 l_0_17_128)))
 (let ((?x59440 (+ ?x59438 ?x59439)))
 (let ((?x59444 (- (- ?x59440 (* (* 2.0 l_0_17_191) l_0_17_193)) (* (* 2.0 l_0_17_192) l_0_17_194))))
 (let ((?x59450 (- (- (+ (+ ?x59444 ?x59304) ?x58241) (* (* 2.0 l_0_17_212) l_0_17_214)) (* (* 2.0 l_0_17_213) l_0_17_215))))
 (let ((?x59456 (- (- (- (- ?x59450 ?x59312) ?x58248) (* (* 2.0 l_0_17_233) l_0_17_235)) (* (* 2.0 l_0_17_234) l_0_17_236))))
 (let ((?x59462 (- (- (- (- ?x59456 ?x59320) ?x58255) (* (* 2.0 l_0_17_254) l_0_17_256)) (* (* 2.0 l_0_17_255) l_0_17_257))))
 (let ((?x59466 (- (- ?x59462 (* (* 2.0 l_0_17_275) l_0_17_277)) (* (* 2.0 l_0_17_276) l_0_17_278))))
 (let ((?x59476 (+ (- (- (- (- (+ (+ ?x59466 ?x59337) ?x58266) ?x59469) ?x59342) ?x59472) ?x59346) ?x59475)))
 (= (- (+ (+ (+ ?x59476 ?x59360) ?x59478) ?x59363) 3.0) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_17_1) l_0_17_1) (* l_0_17_22 l_0_17_22)) 0.0))
(assert
 (let ((?x59563 (* l_0_17_274 l_0_17_274)))
 (let ((?x59561 (* l_0_17_253 l_0_17_253)))
 (let ((?x59559 (* l_0_17_232 l_0_17_232)))
 (let ((?x59557 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x59551 (* l_0_17_211 l_0_17_211)))
 (let ((?x59549 (* l_0_17_190 l_0_17_190)))
 (let ((?x59541 (* l_0_17_1 l_0_17_1)))
 (let ((?x59547 (* 6.0 ?x59541)))
 (let ((?x59555 (+ (- (- (+ (* (* (- 2.0) l_0_17_1) l_0_17_2) ?x59547) ?x59549) ?x59551) (* (* 2.0 l_0_17_22) l_0_17_23))))
 (let ((?x59567 (- (- (- (- (- ?x59555 ?x59557) ?x59559) ?x59561) ?x59563) (* (* 1.0 l_0_17_43) l_0_17_43))))
 (= (+ ?x59567 (* 1.0 (* l_0_17_64 l_0_17_64))) 0.0))))))))))))
(assert
 (let ((?x59568 (* l_0_17_64 l_0_17_64)))
 (let ((?x59605 (* 3.0 ?x59568)))
 (let ((?x59557 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x59597 (* l_0_17_127 l_0_17_127)))
 (let ((?x59541 (* l_0_17_1 l_0_17_1)))
 (let ((?x59547 (* 6.0 ?x59541)))
 (let ((?x59600 (+ (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_4) ?x59547) ?x59597) (* (* 2.0 l_0_17_22) l_0_17_25))))
 (= (+ (- (- ?x59600 ?x59557) (* (* 3.0 l_0_17_43) l_0_17_43)) ?x59605) 0.0)))))))))
(assert
 (let ((?x59568 (* l_0_17_64 l_0_17_64)))
 (let ((?x48740 (* l_0_17_43 l_0_17_43)))
 (let ((?x59621 (+ (* (* (- 2.0) l_0_17_1) l_0_17_7) (* (* 2.0 l_0_17_22) l_0_17_28))))
 (= (- (+ ?x59621 ?x48740) ?x59568) 0.0)))))
(assert
 (let ((?x59636 (+ (- (* (* (- 2.0) l_0_17_1) l_0_17_11) (* l_0_17_127 l_0_17_127)) (* (* 2.0 l_0_17_22) l_0_17_32))))
 (= ?x59636 0.0)))
(assert
 (let ((?x59656 (* l_0_17_85 l_0_17_85)))
 (let ((?x59652 (* l_0_17_169 l_0_17_169)))
 (let ((?x59650 (* l_0_17_148 l_0_17_148)))
 (let ((?x59651 (- (+ (* (* (- 2.0) l_0_17_1) l_0_17_16) (* l_0_17_106 l_0_17_106)) ?x59650)))
 (= (- (+ (+ ?x59651 ?x59652) (* (* 2.0 l_0_17_22) l_0_17_37)) ?x59656) 0.0))))))
(assert
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59700 (* ?x59699 l_0_17_65)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59697 (* ?x59696 l_0_17_44)))
 (let ((?x58265 (* l_0_17_3 l_0_17_3)))
 (let ((?x27082 (* l_0_17_24 l_0_17_24)))
 (let ((?x58292 (* l_0_17_23 l_0_17_23)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59682 (* ?x59681 l_0_17_23)))
 (let ((?x58240 (* l_0_17_2 l_0_17_2)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59673 (* ?x59672 l_0_17_2)))
 (let ((?x59680 (- (- (- ?x59673 (* (* 2.0 l_0_17_190) l_0_17_191)) ?x58240) (* (* 2.0 l_0_17_211) l_0_17_212))))
 (let ((?x59688 (+ (- (+ (- ?x59680 ?x59682) ?x58292) (* (* 2.0 l_0_17_232) l_0_17_233)) ?x27082)))
 (let ((?x59694 (- (- ?x59688 (* (* 2.0 l_0_17_253) l_0_17_254)) (* (* 2.0 l_0_17_274) l_0_17_275))))
 (= (+ (- (- ?x59694 ?x58265) ?x59697) ?x59700) 0.0)))))))))))))))))
(assert
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59782 (* ?x59699 l_0_17_67)))
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x59780 (* ?x59779 l_0_17_65)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59777 (* ?x59696 l_0_17_46)))
 (let ((?x59774 (* 6.0 l_0_17_43)))
 (let ((?x59775 (* ?x59774 l_0_17_44)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59757 (* ?x59681 l_0_17_25)))
 (let ((?x59682 (* ?x59681 l_0_17_23)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x59747 (* ?x59746 l_0_17_128)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59744 (* ?x59672 l_0_17_4)))
 (let ((?x59673 (* ?x59672 l_0_17_2)))
 (let ((?x59753 (- (- (+ (+ ?x59673 ?x59744) ?x59747) (* (* 2.0 l_0_17_190) l_0_17_193)) (* (* 2.0 l_0_17_2) l_0_17_4))))
 (let ((?x59761 (+ (- (- (- ?x59753 (* (* 2.0 l_0_17_211) l_0_17_214)) ?x59682) ?x59757) (* (* 2.0 l_0_17_23) l_0_17_25))))
 (let ((?x59766 (+ (- ?x59761 (* (* 2.0 l_0_17_232) l_0_17_235)) (* (* 2.0 l_0_17_24) l_0_17_26))))
 (let ((?x59770 (- (- ?x59766 (* (* 2.0 l_0_17_253) l_0_17_256)) (* (* 2.0 l_0_17_274) l_0_17_277))))
 (let ((?x59781 (+ (- (- (- ?x59770 (* (* 2.0 l_0_17_3) l_0_17_5)) ?x59775) ?x59777) ?x59780)))
 (= (+ ?x59781 ?x59782) 0.0)))))))))))))))))))))))
(assert
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59859 (* ?x59699 l_0_17_70)))
 (let ((?x59700 (* ?x59699 l_0_17_65)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59856 (* ?x59696 l_0_17_49)))
 (let ((?x59697 (* ?x59696 l_0_17_44)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59841 (* ?x59681 l_0_17_28)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59824 (* ?x59672 l_0_17_7)))
 (let ((?x59838 (- (- ?x59824 (* (* 2.0 l_0_17_190) l_0_17_196)) (* (* 2.0 l_0_17_2) l_0_17_7))))
 (let ((?x59844 (+ (- (- ?x59838 (* (* 2.0 l_0_17_211) l_0_17_217)) ?x59841) (* (* 2.0 l_0_17_23) l_0_17_28))))
 (let ((?x59848 (+ (- ?x59844 (* (* 2.0 l_0_17_232) l_0_17_238)) (* (* 2.0 l_0_17_24) l_0_17_29))))
 (let ((?x59852 (- (- ?x59848 (* (* 2.0 l_0_17_253) l_0_17_259)) (* (* 2.0 l_0_17_274) l_0_17_280))))
 (let ((?x59858 (- (- (+ (- ?x59852 (* (* 2.0 l_0_17_3) l_0_17_8)) ?x59697) ?x59856) ?x59700)))
 (= (+ ?x59858 ?x59859) 0.0)))))))))))))))))
(assert
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59938 (* ?x59699 l_0_17_74)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59936 (* ?x59696 l_0_17_53)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59924 (* ?x59681 l_0_17_32)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x59747 (* ?x59746 l_0_17_128)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x28629 (* ?x59672 l_0_17_11)))
 (let ((?x59918 (- (- ?x28629 (* (* 2.0 l_0_17_11) l_0_17_2)) (* (* 2.0 l_0_17_12) l_0_17_3))))
 (let ((?x59923 (- (- (- ?x59918 ?x59747) (* (* 2.0 l_0_17_190) l_0_17_200)) (* (* 2.0 l_0_17_211) l_0_17_221))))
 (let ((?x59929 (- (+ (- ?x59923 ?x59924) (* (* 2.0 l_0_17_23) l_0_17_32)) (* (* 2.0 l_0_17_232) l_0_17_242))))
 (let ((?x59933 (- (+ ?x59929 (* (* 2.0 l_0_17_24) l_0_17_33)) (* (* 2.0 l_0_17_253) l_0_17_263))))
 (= (+ (- (- ?x59933 (* (* 2.0 l_0_17_274) l_0_17_284)) ?x59936) ?x59938) 0.0))))))))))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60032 (* ?x60031 l_0_17_86)))
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x60029 (* ?x59699 l_0_17_79)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x60027 (* ?x59696 l_0_17_58)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x60015 (* ?x59681 l_0_17_37)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60006 (* ?x60005 l_0_17_170)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60000 (* ?x59999 l_0_17_149)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59989 (* ?x59672 l_0_17_16)))
 (let ((?x60004 (- (- (+ ?x59989 (* (* 2.0 l_0_17_106) l_0_17_107)) ?x60000) (* (* 2.0 l_0_17_16) l_0_17_2))))
 (let ((?x60012 (- (- (+ ?x60004 ?x60006) (* (* 2.0 l_0_17_17) l_0_17_3)) (* (* 2.0 l_0_17_190) l_0_17_205))))
 (let ((?x60018 (+ (- (- ?x60012 (* (* 2.0 l_0_17_211) l_0_17_226)) ?x60015) (* (* 2.0 l_0_17_23) l_0_17_37))))
 (let ((?x60022 (+ (- ?x60018 (* (* 2.0 l_0_17_232) l_0_17_247)) (* (* 2.0 l_0_17_24) l_0_17_38))))
 (let ((?x60026 (- (- ?x60022 (* (* 2.0 l_0_17_253) l_0_17_268)) (* (* 2.0 l_0_17_274) l_0_17_289))))
 (= (- (+ (- ?x60026 ?x60027) ?x60029) ?x60032) 0.0)))))))))))))))))))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60093 (* ?x59779 l_0_17_67)))
 (let ((?x59780 (* ?x59779 l_0_17_65)))
 (let ((?x59245 (* l_0_17_6 l_0_17_6)))
 (let ((?x59242 (* l_0_17_5 l_0_17_5)))
 (let ((?x59774 (* 6.0 l_0_17_43)))
 (let ((?x60088 (* ?x59774 l_0_17_46)))
 (let ((?x59775 (* ?x59774 l_0_17_44)))
 (let ((?x59224 (* l_0_17_4 l_0_17_4)))
 (let ((?x48632 (* l_0_17_27 l_0_17_27)))
 (let ((?x48660 (* l_0_17_26 l_0_17_26)))
 (let ((?x48621 (* l_0_17_25 l_0_17_25)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59757 (* ?x59681 l_0_17_25)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60080 (* ?x59746 l_0_17_130)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59744 (* ?x59672 l_0_17_4)))
 (let ((?x60087 (- (- (+ (+ (+ (- (+ ?x59744 ?x60080) ?x59757) ?x48621) ?x48660) ?x48632) ?x59224) ?x59775)))
 (= (+ (+ (- (- (- ?x60087 ?x60088) ?x59242) ?x59245) ?x59780) ?x60093) 0.0)))))))))))))))))))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60143 (* ?x59779 l_0_17_70)))
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59782 (* ?x59699 l_0_17_67)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59777 (* ?x59696 l_0_17_46)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59841 (* ?x59681 l_0_17_28)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60118 (* ?x59746 l_0_17_133)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59824 (* ?x59672 l_0_17_7)))
 (let ((?x60126 (+ (+ (- (+ ?x59824 ?x60118) ?x59841) (* (* 2.0 l_0_17_25) l_0_17_28)) (* (* 2.0 l_0_17_26) l_0_17_29))))
 (let ((?x60132 (- (+ ?x60126 (* (* 2.0 l_0_17_27) l_0_17_30)) (* (* 2.0 l_0_17_4) l_0_17_7))))
 (let ((?x60138 (- (- (+ ?x60132 ?x59777) (* (* 6.0 l_0_17_43) l_0_17_49)) (* (* 2.0 l_0_17_5) l_0_17_8))))
 (= (+ (- (- ?x60138 (* (* 2.0 l_0_17_6) l_0_17_9)) ?x59782) ?x60143) 0.0)))))))))))))))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60199 (* ?x59779 l_0_17_74)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x59924 (* ?x59681 l_0_17_32)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60185 (* ?x59746 l_0_17_137)))
 (let ((?x60080 (* ?x59746 l_0_17_130)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x28629 (* ?x59672 l_0_17_11)))
 (let ((?x60183 (- (- ?x28629 (* (* 2.0 l_0_17_11) l_0_17_4)) (* (* 2.0 l_0_17_12) l_0_17_5))))
 (let ((?x60190 (- (- (+ (- ?x60183 ?x60080) ?x60185) (* (* 2.0 l_0_17_13) l_0_17_6)) ?x59924)))
 (let ((?x60194 (+ (+ ?x60190 (* (* 2.0 l_0_17_25) l_0_17_32)) (* (* 2.0 l_0_17_26) l_0_17_33))))
 (let ((?x60198 (- (+ ?x60194 (* (* 2.0 l_0_17_27) l_0_17_34)) (* (* 6.0 l_0_17_43) l_0_17_53))))
 (= (+ ?x60198 ?x60199) 0.0)))))))))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60262 (* ?x60031 l_0_17_88)))
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60260 (* ?x59779 l_0_17_79)))
 (let ((?x59681 (* 12.0 l_0_17_22)))
 (let ((?x60015 (* ?x59681 l_0_17_37)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60244 (* ?x60005 l_0_17_172)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60240 (* ?x59999 l_0_17_151)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60238 (* ?x59746 l_0_17_142)))
 (let ((?x59672 (* 12.0 l_0_17_1)))
 (let ((?x59989 (* ?x59672 l_0_17_16)))
 (let ((?x60243 (- (- (+ (+ ?x59989 (* (* 2.0 l_0_17_106) l_0_17_109)) ?x60238) ?x60240) (* (* 2.0 l_0_17_16) l_0_17_4))))
 (let ((?x60250 (- (- (+ ?x60243 ?x60244) (* (* 2.0 l_0_17_17) l_0_17_5)) (* (* 2.0 l_0_17_18) l_0_17_6))))
 (let ((?x60255 (+ (+ (- ?x60250 ?x60015) (* (* 2.0 l_0_17_25) l_0_17_37)) (* (* 2.0 l_0_17_26) l_0_17_38))))
 (let ((?x60259 (- (+ ?x60255 (* (* 2.0 l_0_17_27) l_0_17_39)) (* (* 6.0 l_0_17_43) l_0_17_58))))
 (= (- (+ ?x60259 ?x60260) ?x60262) 0.0))))))))))))))))))))
(assert
 (let ((?x59161 (* l_0_17_9 l_0_17_9)))
 (let ((?x59158 (* l_0_17_8 l_0_17_8)))
 (let ((?x59143 (* l_0_17_7 l_0_17_7)))
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59859 (* ?x59699 l_0_17_70)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59856 (* ?x59696 l_0_17_49)))
 (let ((?x27943 (* l_0_17_31 l_0_17_31)))
 (let ((?x14699 (* l_0_17_30 l_0_17_30)))
 (let ((?x27802 (* l_0_17_29 l_0_17_29)))
 (let ((?x60299 (+ (+ (* (- l_0_17_10) l_0_17_10) (* l_0_17_28 l_0_17_28)) ?x27802)))
 (let ((?x60306 (- (- (- (- (+ (+ (+ ?x60299 ?x14699) ?x27943) ?x59856) ?x59859) ?x59143) ?x59158) ?x59161)))
 (= ?x60306 0.0))))))))))))))
(assert
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x59938 (* ?x59699 l_0_17_74)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x59936 (* ?x59696 l_0_17_53)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60118 (* ?x59746 l_0_17_133)))
 (let ((?x60315 (- (* (* (- 2.0) l_0_17_10) l_0_17_14) (* (* 2.0 l_0_17_11) l_0_17_7))))
 (let ((?x60320 (- (- (- ?x60315 (* (* 2.0 l_0_17_12) l_0_17_8)) ?x60118) (* (* 2.0 l_0_17_13) l_0_17_9))))
 (let ((?x60326 (+ (+ ?x60320 (* (* 2.0 l_0_17_28) l_0_17_32)) (* (* 2.0 l_0_17_29) l_0_17_33))))
 (let ((?x60332 (+ (+ ?x60326 (* (* 2.0 l_0_17_30) l_0_17_34)) (* (* 2.0 l_0_17_31) l_0_17_35))))
 (= (- (+ ?x60332 ?x59936) ?x59938) 0.0))))))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60378 (* ?x60031 l_0_17_91)))
 (let ((?x59699 (* 2.0 l_0_17_64)))
 (let ((?x60029 (* ?x59699 l_0_17_79)))
 (let ((?x59696 (* 2.0 l_0_17_43)))
 (let ((?x60027 (* ?x59696 l_0_17_58)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60362 (* ?x60005 l_0_17_175)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60358 (* ?x59999 l_0_17_154)))
 (let ((?x60357 (+ (* (* (- 2.0) l_0_17_10) l_0_17_19) (* (* 2.0 l_0_17_106) l_0_17_112))))
 (let ((?x60365 (- (+ (- (- ?x60357 ?x60358) (* (* 2.0 l_0_17_16) l_0_17_7)) ?x60362) (* (* 2.0 l_0_17_17) l_0_17_8))))
 (let ((?x60369 (+ (- ?x60365 (* (* 2.0 l_0_17_18) l_0_17_9)) (* (* 2.0 l_0_17_28) l_0_17_37))))
 (let ((?x60373 (+ (+ ?x60369 (* (* 2.0 l_0_17_29) l_0_17_38)) (* (* 2.0 l_0_17_30) l_0_17_39))))
 (let ((?x60379 (- (- (+ (+ ?x60373 (* (* 2.0 l_0_17_31) l_0_17_40)) ?x60027) ?x60029) ?x60378)))
 (= ?x60379 0.0)))))))))))))))))
(assert
 (let ((?x60425 (* l_0_17_36 l_0_17_36)))
 (let ((?x60423 (* l_0_17_35 l_0_17_35)))
 (let ((?x60421 (* l_0_17_34 l_0_17_34)))
 (let ((?x60419 (* l_0_17_33 l_0_17_33)))
 (let ((?x60417 (* l_0_17_32 l_0_17_32)))
 (let ((?x60415 (* l_0_17_15 l_0_17_15)))
 (let ((?x60413 (* l_0_17_14 l_0_17_14)))
 (let ((?x60411 (* l_0_17_13 l_0_17_13)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60185 (* ?x59746 l_0_17_137)))
 (let ((?x60410 (- (- (* (- l_0_17_11) l_0_17_11) (* l_0_17_12 l_0_17_12)) ?x60185)))
 (let ((?x60424 (+ (+ (+ (+ (- (- (- ?x60410 ?x60411) ?x60413) ?x60415) ?x60417) ?x60419) ?x60421) ?x60423)))
 (= (+ ?x60424 ?x60425) 0.0))))))))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60473 (* ?x60031 l_0_17_95)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60456 (* ?x60005 l_0_17_179)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60451 (* ?x59999 l_0_17_158)))
 (let ((?x59746 (* 2.0 l_0_17_127)))
 (let ((?x60238 (* ?x59746 l_0_17_142)))
 (let ((?x60442 (- (* (* 2.0 l_0_17_106) l_0_17_116) (* (* 2.0 l_0_17_11) l_0_17_16))))
 (let ((?x60447 (- (- (- ?x60442 (* (* 2.0 l_0_17_12) l_0_17_17)) ?x60238) (* (* 2.0 l_0_17_13) l_0_17_18))))
 (let ((?x60455 (- (- (- ?x60447 (* (* 2.0 l_0_17_14) l_0_17_19)) ?x60451) (* (* 2.0 l_0_17_15) l_0_17_20))))
 (let ((?x60463 (+ (+ (+ ?x60455 ?x60456) (* (* 2.0 l_0_17_32) l_0_17_37)) (* (* 2.0 l_0_17_33) l_0_17_38))))
 (let ((?x60469 (+ (+ ?x60463 (* (* 2.0 l_0_17_34) l_0_17_39)) (* (* 2.0 l_0_17_35) l_0_17_40))))
 (= (- (+ ?x60469 (* (* 2.0 l_0_17_36) l_0_17_41)) ?x60473) 0.0)))))))))))))))
(assert
 (let ((?x38134 (* l_0_17_42 l_0_17_42)))
 (let ((?x38132 (* l_0_17_41 l_0_17_41)))
 (let ((?x48445 (* l_0_17_40 l_0_17_40)))
 (let ((?x59043 (* l_0_17_39 l_0_17_39)))
 (let ((?x48399 (* l_0_17_38 l_0_17_38)))
 (let ((?x14569 (* l_0_17_37 l_0_17_37)))
 (let ((?x58859 (* l_0_17_21 l_0_17_21)))
 (let ((?x58846 (* l_0_17_20 l_0_17_20)))
 (let ((?x58843 (* l_0_17_19 l_0_17_19)))
 (let ((?x58840 (* l_0_17_18 l_0_17_18)))
 (let ((?x58833 (* l_0_17_17 l_0_17_17)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60521 (* ?x60005 l_0_17_184)))
 (let ((?x58830 (* l_0_17_16 l_0_17_16)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60518 (* ?x59999 l_0_17_163)))
 (let ((?x59990 (* 2.0 l_0_17_106)))
 (let ((?x60516 (* ?x59990 l_0_17_121)))
 (let ((?x60522 (+ (- (- (+ (* (* (- 2.0) l_0_17_100) l_0_17_85) ?x60516) ?x60518) ?x58830) ?x60521)))
 (let ((?x60529 (+ (+ (- (- (- (- (- ?x60522 ?x58833) ?x58840) ?x58843) ?x58846) ?x58859) ?x14569) ?x48399)))
 (= (+ (+ (+ (+ ?x60529 ?x59043) ?x48445) ?x38132) ?x38134) 0.0))))))))))))))))))))))
(assert
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60640 (* ?x60639 l_0_17_72)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60637 (* ?x60636 l_0_17_71)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60634 (* ?x60633 l_0_17_70)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60631 (* ?x59251 l_0_17_71)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x59478 (* ?x58443 l_0_17_68)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60628 (* ?x59248 l_0_17_70)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x59475 (* ?x58440 l_0_17_67)))
 (let ((?x60625 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x60622 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60619 (* ?x60618 l_0_17_51)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60616 (* ?x60615 l_0_17_50)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60613 (* ?x60612 l_0_17_49)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60610 (* ?x59230 l_0_17_50)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x59472 (* ?x58425 l_0_17_47)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60607 (* ?x59227 l_0_17_49)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x59469 (* ?x58422 l_0_17_46)))
 (let ((?x60604 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x58652 (* 12.0 l_0_17_3)))
 (let ((?x58653 (* ?x58652 l_0_17_8)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60591 (* ?x60590 l_0_17_30)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60588 (* ?x60587 l_0_17_29)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60576 (* ?x60575 l_0_17_28)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x58638 (* ?x58637 l_0_17_29)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x58629 (* ?x58628 l_0_17_28)))
 (let ((?x58619 (* 12.0 l_0_17_2)))
 (let ((?x58620 (* ?x58619 l_0_17_7)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x29128 (* ?x59295 l_0_17_134)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x39327 (* ?x59293 l_0_17_133)))
 (let ((?x60550 (- (- (+ ?x39327 ?x29128) (* (* 2.0 l_0_17_193) l_0_17_196)) (* (* 2.0 l_0_17_194) l_0_17_197))))
 (let ((?x60557 (- (+ (- ?x60550 (* (* 2.0 l_0_17_195) l_0_17_198)) ?x58620) (* (* 2.0 l_0_17_214) l_0_17_217))))
 (let ((?x60563 (- (- ?x60557 (* (* 2.0 l_0_17_215) l_0_17_218)) (* (* 2.0 l_0_17_216) l_0_17_219))))
 (let ((?x60570 (- (- (- ?x60563 ?x58629) (* (* 2.0 l_0_17_235) l_0_17_238)) (* (* 2.0 l_0_17_236) l_0_17_239))))
 (let ((?x60580 (- (- (- (- ?x60570 (* (* 2.0 l_0_17_237) l_0_17_240)) ?x58638) ?x60576) (* (* 2.0 l_0_17_256) l_0_17_259))))
 (let ((?x60586 (- (- ?x60580 (* (* 2.0 l_0_17_257) l_0_17_260)) (* (* 2.0 l_0_17_258) l_0_17_261))))
 (let ((?x60598 (- (- (- (- ?x60586 ?x60588) ?x60591) (* (* 2.0 l_0_17_277) l_0_17_280)) (* (* 2.0 l_0_17_278) l_0_17_281))))
 (let ((?x60606 (+ (+ (+ (- ?x60598 (* (* 2.0 l_0_17_279) l_0_17_282)) ?x58653) ?x60604) ?x59469)))
 (let ((?x60623 (+ (- (- (- (- (+ (- ?x60606 ?x60607) ?x59472) ?x60610) ?x60613) ?x60616) ?x60619) ?x60622)))
 (let ((?x60638 (+ (+ (+ (- (+ (- (+ ?x60623 ?x60625) ?x59475) ?x60628) ?x59478) ?x60631) ?x60634) ?x60637)))
 (= (+ ?x60638 ?x60640) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60763 (* ?x60639 l_0_17_76)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60761 (* ?x60636 l_0_17_75)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60759 (* ?x60633 l_0_17_74)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60757 (* ?x59251 l_0_17_75)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60755 (* ?x59248 l_0_17_74)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60753 (* ?x60618 l_0_17_55)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60751 (* ?x60615 l_0_17_54)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60749 (* ?x60612 l_0_17_53)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60747 (* ?x59230 l_0_17_54)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60745 (* ?x59227 l_0_17_53)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60737 (* ?x60590 l_0_17_34)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60735 (* ?x60587 l_0_17_33)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60727 (* ?x60575 l_0_17_32)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x60725 (* ?x58637 l_0_17_33)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x60717 (* ?x58628 l_0_17_32)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x60703 (* ?x60702 l_0_17_6)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x60700 (* ?x59295 l_0_17_138)))
 (let ((?x59296 (* ?x59295 l_0_17_131)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x60697 (* ?x59293 l_0_17_137)))
 (let ((?x59294 (* ?x59293 l_0_17_130)))
 (let ((?x60691 (* 12.0 l_0_17_12)))
 (let ((?x60694 (* ?x60691 l_0_17_5)))
 (let ((?x60692 (* ?x60691 l_0_17_3)))
 (let ((?x60687 (* 12.0 l_0_17_11)))
 (let ((?x60689 (* ?x60687 l_0_17_4)))
 (let ((?x60688 (* ?x60687 l_0_17_2)))
 (let ((?x60701 (+ (- (+ (- (+ (+ (+ ?x60688 ?x60689) ?x60692) ?x60694) ?x59294) ?x60697) ?x59296) ?x60700)))
 (let ((?x60708 (- (- (+ ?x60701 ?x60703) (* (* 2.0 l_0_17_193) l_0_17_200)) (* (* 2.0 l_0_17_194) l_0_17_201))))
 (let ((?x60712 (- (- ?x60708 (* (* 2.0 l_0_17_195) l_0_17_202)) (* (* 2.0 l_0_17_214) l_0_17_221))))
 (let ((?x60716 (- (- ?x60712 (* (* 2.0 l_0_17_215) l_0_17_222)) (* (* 2.0 l_0_17_216) l_0_17_223))))
 (let ((?x60722 (- (- (- ?x60716 ?x60717) (* (* 2.0 l_0_17_235) l_0_17_242)) (* (* 2.0 l_0_17_236) l_0_17_243))))
 (let ((?x60730 (- (- (- (- ?x60722 (* (* 2.0 l_0_17_237) l_0_17_244)) ?x60725) ?x60727) (* (* 2.0 l_0_17_256) l_0_17_263))))
 (let ((?x60734 (- (- ?x60730 (* (* 2.0 l_0_17_257) l_0_17_264)) (* (* 2.0 l_0_17_258) l_0_17_265))))
 (let ((?x60742 (- (- (- (- ?x60734 ?x60735) ?x60737) (* (* 2.0 l_0_17_277) l_0_17_284)) (* (* 2.0 l_0_17_278) l_0_17_285))))
 (let ((?x60750 (- (- (- (- ?x60742 (* (* 2.0 l_0_17_279) l_0_17_286)) ?x60745) ?x60747) ?x60749)))
 (let ((?x60764 (+ (+ (+ (+ (+ (- (- ?x60750 ?x60751) ?x60753) ?x60755) ?x60757) ?x60759) ?x60761) ?x60763)))
 (= ?x60764 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x60873 (* ?x58461 l_0_17_89)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x60871 (* ?x58458 l_0_17_88)))
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60869 (* ?x60639 l_0_17_81)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60867 (* ?x60636 l_0_17_80)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60865 (* ?x60633 l_0_17_79)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60863 (* ?x59251 l_0_17_80)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60861 (* ?x59248 l_0_17_79)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60859 (* ?x60618 l_0_17_60)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60857 (* ?x60615 l_0_17_59)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60855 (* ?x60612 l_0_17_58)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60853 (* ?x59230 l_0_17_59)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60851 (* ?x59227 l_0_17_58)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60843 (* ?x60590 l_0_17_39)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60841 (* ?x60587 l_0_17_38)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60833 (* ?x60575 l_0_17_37)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x58754 (* ?x58637 l_0_17_38)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x58748 (* ?x58628 l_0_17_37)))
 (let ((?x58347 (* 12.0 l_0_17_18)))
 (let ((?x60811 (* ?x58347 l_0_17_6)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x60809 (* ?x58344 l_0_17_173)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x60807 (* ?x58341 l_0_17_172)))
 (let ((?x58338 (* 12.0 l_0_17_17)))
 (let ((?x60805 (* ?x58338 l_0_17_5)))
 (let ((?x58734 (* ?x58338 l_0_17_3)))
 (let ((?x58335 (* 12.0 l_0_17_16)))
 (let ((?x60802 (* ?x58335 l_0_17_4)))
 (let ((?x58732 (* ?x58335 l_0_17_2)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x60799 (* ?x58332 l_0_17_152)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x60797 (* ?x58329 l_0_17_151)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x60795 (* ?x59295 l_0_17_143)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x60793 (* ?x59293 l_0_17_142)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x60791 (* ?x58326 l_0_17_110)))
 (let ((?x60798 (- (+ (+ (+ (* (* 2.0 l_0_17_107) l_0_17_109) ?x60791) ?x60793) ?x60795) ?x60797)))
 (let ((?x60810 (+ (+ (+ (+ (+ (+ (- ?x60798 ?x60799) ?x58732) ?x60802) ?x58734) ?x60805) ?x60807) ?x60809)))
 (let ((?x60816 (- (- (+ ?x60810 ?x60811) (* (* 2.0 l_0_17_193) l_0_17_205)) (* (* 2.0 l_0_17_194) l_0_17_206))))
 (let ((?x60820 (- (- ?x60816 (* (* 2.0 l_0_17_195) l_0_17_207)) (* (* 2.0 l_0_17_214) l_0_17_226))))
 (let ((?x60824 (- (- ?x60820 (* (* 2.0 l_0_17_215) l_0_17_227)) (* (* 2.0 l_0_17_216) l_0_17_228))))
 (let ((?x60829 (- (- (- ?x60824 ?x58748) (* (* 2.0 l_0_17_235) l_0_17_247)) (* (* 2.0 l_0_17_236) l_0_17_248))))
 (let ((?x60836 (- (- (- (- ?x60829 (* (* 2.0 l_0_17_237) l_0_17_249)) ?x58754) ?x60833) (* (* 2.0 l_0_17_256) l_0_17_268))))
 (let ((?x60840 (- (- ?x60836 (* (* 2.0 l_0_17_257) l_0_17_269)) (* (* 2.0 l_0_17_258) l_0_17_270))))
 (let ((?x60848 (- (- (- (- ?x60840 ?x60841) ?x60843) (* (* 2.0 l_0_17_277) l_0_17_289)) (* (* 2.0 l_0_17_278) l_0_17_290))))
 (let ((?x60856 (- (- (- (- ?x60848 (* (* 2.0 l_0_17_279) l_0_17_291)) ?x60851) ?x60853) ?x60855)))
 (let ((?x60870 (+ (+ (+ (+ (+ (- (- ?x60856 ?x60857) ?x60859) ?x60861) ?x60863) ?x60865) ?x60867) ?x60869)))
 (= (- (- ?x60870 ?x60871) ?x60873) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59260 (* l_0_17_69 l_0_17_69)))
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61003 (* ?x61002 l_0_17_72)))
 (let ((?x59257 (* l_0_17_68 l_0_17_68)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x60999 (* ?x60998 l_0_17_71)))
 (let ((?x59254 (* l_0_17_67 l_0_17_67)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x60995 (* ?x60994 l_0_17_70)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60631 (* ?x59251 l_0_17_71)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60628 (* ?x59248 l_0_17_70)))
 (let ((?x60625 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x60622 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x59276 (* l_0_17_48 l_0_17_48)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x60987 (* ?x60986 l_0_17_51)))
 (let ((?x48685 (* l_0_17_47 l_0_17_47)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x60983 (* ?x60982 l_0_17_50)))
 (let ((?x48675 (* l_0_17_46 l_0_17_46)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x60979 (* ?x60978 l_0_17_49)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60610 (* ?x59230 l_0_17_50)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60607 (* ?x59227 l_0_17_49)))
 (let ((?x60604 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60591 (* ?x60590 l_0_17_30)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60588 (* ?x60587 l_0_17_29)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60576 (* ?x60575 l_0_17_28)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x60970 (* ?x60969 l_0_17_135)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x60967 (* ?x29526 l_0_17_134)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x29525 (* ?x29524 l_0_17_133)))
 (let ((?x60976 (- (+ (- (- (- (+ (+ ?x29525 ?x60967) ?x60970) ?x60576) ?x60588) ?x60591) ?x60604) ?x60607)))
 (let ((?x60989 (+ (- (+ (- (+ (- (- ?x60976 ?x60610) ?x60979) ?x48675) ?x60983) ?x48685) ?x60987) ?x59276)))
 (let ((?x61000 (+ (- (+ (+ (+ (+ (+ ?x60989 ?x60622) ?x60625) ?x60628) ?x60631) ?x60995) ?x59254) ?x60999)))
 (= (- (+ (- ?x61000 ?x59257) ?x61003) ?x59260) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61068 (* ?x61002 l_0_17_76)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x61066 (* ?x60998 l_0_17_75)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x61064 (* ?x60994 l_0_17_74)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60757 (* ?x59251 l_0_17_75)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60755 (* ?x59248 l_0_17_74)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x61060 (* ?x60986 l_0_17_55)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x61058 (* ?x60982 l_0_17_54)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x61056 (* ?x60978 l_0_17_53)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60747 (* ?x59230 l_0_17_54)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60745 (* ?x59227 l_0_17_53)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60737 (* ?x60590 l_0_17_34)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60735 (* ?x60587 l_0_17_33)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60727 (* ?x60575 l_0_17_32)))
 (let ((?x59209 (* l_0_17_132 l_0_17_132)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x61048 (* ?x60969 l_0_17_139)))
 (let ((?x48557 (* l_0_17_131 l_0_17_131)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x61045 (* ?x29526 l_0_17_138)))
 (let ((?x48625 (* l_0_17_130 l_0_17_130)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x61042 (* ?x29524 l_0_17_137)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x60703 (* ?x60702 l_0_17_6)))
 (let ((?x60691 (* 12.0 l_0_17_12)))
 (let ((?x60694 (* ?x60691 l_0_17_5)))
 (let ((?x60687 (* 12.0 l_0_17_11)))
 (let ((?x60689 (* ?x60687 l_0_17_4)))
 (let ((?x61049 (+ (- (+ (- (+ (+ (+ ?x60689 ?x60694) ?x60703) ?x61042) ?x48625) ?x61045) ?x48557) ?x61048)))
 (let ((?x61057 (- (- (- (- (- (- (- ?x61049 ?x59209) ?x60727) ?x60735) ?x60737) ?x60745) ?x60747) ?x61056)))
 (let ((?x61069 (+ (+ (+ (+ (+ (- (- ?x61057 ?x61058) ?x61060) ?x60755) ?x60757) ?x61064) ?x61066) ?x61068)))
 (= ?x61069 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61127 (* l_0_17_90 l_0_17_90)))
 (let ((?x61125 (* l_0_17_89 l_0_17_89)))
 (let ((?x61123 (* l_0_17_88 l_0_17_88)))
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61121 (* ?x61002 l_0_17_81)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x61119 (* ?x60998 l_0_17_80)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x61117 (* ?x60994 l_0_17_79)))
 (let ((?x59251 (* 6.0 l_0_17_66)))
 (let ((?x60863 (* ?x59251 l_0_17_80)))
 (let ((?x59248 (* 6.0 l_0_17_65)))
 (let ((?x60861 (* ?x59248 l_0_17_79)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x61113 (* ?x60986 l_0_17_60)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x61111 (* ?x60982 l_0_17_59)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x61109 (* ?x60978 l_0_17_58)))
 (let ((?x59230 (* 6.0 l_0_17_45)))
 (let ((?x60853 (* ?x59230 l_0_17_59)))
 (let ((?x59227 (* 6.0 l_0_17_44)))
 (let ((?x60851 (* ?x59227 l_0_17_58)))
 (let ((?x60590 (* 12.0 l_0_17_27)))
 (let ((?x60843 (* ?x60590 l_0_17_39)))
 (let ((?x60587 (* 12.0 l_0_17_26)))
 (let ((?x60841 (* ?x60587 l_0_17_38)))
 (let ((?x60575 (* 12.0 l_0_17_25)))
 (let ((?x60833 (* ?x60575 l_0_17_37)))
 (let ((?x58347 (* 12.0 l_0_17_18)))
 (let ((?x60811 (* ?x58347 l_0_17_6)))
 (let ((?x61101 (* l_0_17_174 l_0_17_174)))
 (let ((?x61099 (* l_0_17_173 l_0_17_173)))
 (let ((?x61097 (* l_0_17_172 l_0_17_172)))
 (let ((?x58338 (* 12.0 l_0_17_17)))
 (let ((?x60805 (* ?x58338 l_0_17_5)))
 (let ((?x58335 (* 12.0 l_0_17_16)))
 (let ((?x60802 (* ?x58335 l_0_17_4)))
 (let ((?x61093 (* l_0_17_153 l_0_17_153)))
 (let ((?x61091 (* l_0_17_152 l_0_17_152)))
 (let ((?x61089 (* l_0_17_151 l_0_17_151)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x61087 (* ?x60969 l_0_17_144)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x61085 (* ?x29526 l_0_17_143)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x61083 (* ?x29524 l_0_17_142)))
 (let ((?x61081 (* l_0_17_111 l_0_17_111)))
 (let ((?x61082 (+ (+ (* l_0_17_109 l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x61081)))
 (let ((?x61095 (+ (- (- (- (+ (+ (+ ?x61082 ?x61083) ?x61085) ?x61087) ?x61089) ?x61091) ?x61093) ?x60802)))
 (let ((?x61105 (- (- (+ (+ (+ (+ (+ ?x61095 ?x60805) ?x61097) ?x61099) ?x61101) ?x60811) ?x60833) ?x60841)))
 (let ((?x61115 (+ (- (- (- (- (- (- ?x61105 ?x60843) ?x60851) ?x60853) ?x61109) ?x61111) ?x61113) ?x60861)))
 (let ((?x61128 (- (- (- (+ (+ (+ (+ ?x61115 ?x60863) ?x61117) ?x61119) ?x61121) ?x61123) ?x61125) ?x61127)))
 (= ?x61128 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59161 (* l_0_17_9 l_0_17_9)))
 (let ((?x59162 (* 6.0 ?x59161)))
 (let ((?x59158 (* l_0_17_8 l_0_17_8)))
 (let ((?x59159 (* 6.0 ?x59158)))
 (let ((?x59155 (* l_0_17_73 l_0_17_73)))
 (let ((?x61206 (* 3.0 ?x59155)))
 (let ((?x59152 (* l_0_17_72 l_0_17_72)))
 (let ((?x61204 (* 3.0 ?x59152)))
 (let ((?x59149 (* l_0_17_71 l_0_17_71)))
 (let ((?x61202 (* 3.0 ?x59149)))
 (let ((?x59146 (* l_0_17_70 l_0_17_70)))
 (let ((?x61200 (* 3.0 ?x59146)))
 (let ((?x59143 (* l_0_17_7 l_0_17_7)))
 (let ((?x59144 (* 6.0 ?x59143)))
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60640 (* ?x60639 l_0_17_72)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60637 (* ?x60636 l_0_17_71)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60634 (* ?x60633 l_0_17_70)))
 (let ((?x61194 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x61191 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x61188 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60619 (* ?x60618 l_0_17_51)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60616 (* ?x60615 l_0_17_50)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60613 (* ?x60612 l_0_17_49)))
 (let ((?x59125 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x59122 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x59119 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x59108 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x61175 (* l_0_17_136 l_0_17_136)))
 (let ((?x61173 (* l_0_17_135 l_0_17_135)))
 (let ((?x61171 (* l_0_17_134 l_0_17_134)))
 (let ((?x61169 (* l_0_17_133 l_0_17_133)))
 (let ((?x59072 (* l_0_17_10 l_0_17_10)))
 (let ((?x59073 (* 6.0 ?x59072)))
 (let ((?x61179 (- (- (- (+ (+ (+ (+ ?x59073 ?x61169) ?x61171) ?x61173) ?x61175) ?x59108) ?x59119) ?x59122)))
 (let ((?x61186 (- (+ (+ (+ (- ?x61179 ?x59125) ?x60613) ?x60616) ?x60619) (* (* 3.0 l_0_17_49) l_0_17_49))))
 (let ((?x61199 (+ (- (- (- (- (- (- ?x61186 ?x61188) ?x61191) ?x61194) ?x60634) ?x60637) ?x60640) ?x59144)))
 (= (+ (+ (+ (+ (+ (+ ?x61199 ?x61200) ?x61202) ?x61204) ?x61206) ?x59159) ?x59162) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61260 (* 6.0 l_0_17_73)))
 (let ((?x61261 (* ?x61260 l_0_17_77)))
 (let ((?x61257 (* 6.0 l_0_17_72)))
 (let ((?x61258 (* ?x61257 l_0_17_76)))
 (let ((?x61254 (* 6.0 l_0_17_71)))
 (let ((?x61255 (* ?x61254 l_0_17_75)))
 (let ((?x61251 (* 6.0 l_0_17_70)))
 (let ((?x61252 (* ?x61251 l_0_17_74)))
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60763 (* ?x60639 l_0_17_76)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60761 (* ?x60636 l_0_17_75)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60759 (* ?x60633 l_0_17_74)))
 (let ((?x61245 (* 6.0 l_0_17_52)))
 (let ((?x61246 (* ?x61245 l_0_17_56)))
 (let ((?x61242 (* 6.0 l_0_17_51)))
 (let ((?x61243 (* ?x61242 l_0_17_55)))
 (let ((?x61239 (* 6.0 l_0_17_50)))
 (let ((?x61240 (* ?x61239 l_0_17_54)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60753 (* ?x60618 l_0_17_55)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60751 (* ?x60615 l_0_17_54)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60749 (* ?x60612 l_0_17_53)))
 (let ((?x58419 (* 12.0 l_0_17_31)))
 (let ((?x61231 (* ?x58419 l_0_17_35)))
 (let ((?x58416 (* 12.0 l_0_17_30)))
 (let ((?x61229 (* ?x58416 l_0_17_34)))
 (let ((?x58413 (* 12.0 l_0_17_29)))
 (let ((?x61227 (* ?x58413 l_0_17_33)))
 (let ((?x58398 (* 12.0 l_0_17_28)))
 (let ((?x61225 (* ?x58398 l_0_17_32)))
 (let ((?x61222 (* 2.0 l_0_17_136)))
 (let ((?x61223 (* ?x61222 l_0_17_140)))
 (let ((?x61219 (* 2.0 l_0_17_135)))
 (let ((?x61220 (* ?x61219 l_0_17_139)))
 (let ((?x50162 (* 2.0 l_0_17_134)))
 (let ((?x50165 (* ?x50162 l_0_17_138)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x60970 (* ?x60969 l_0_17_135)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x60967 (* ?x29526 l_0_17_134)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x29525 (* ?x29524 l_0_17_133)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x50141 (* ?x60702 l_0_17_9)))
 (let ((?x29687 (+ (* (* 12.0 l_0_17_10) l_0_17_14) (* (* 12.0 l_0_17_11) l_0_17_7))))
 (let ((?x50136 (+ ?x29687 (* (* 12.0 l_0_17_12) l_0_17_8))))
 (let ((?x17233 (+ (- (- (- (+ ?x50136 ?x50141) ?x29525) ?x60967) ?x60970) (* (* 2.0 l_0_17_133) l_0_17_137))))
 (let ((?x61232 (- (- (- (- (+ (+ (+ ?x17233 ?x50165) ?x61220) ?x61223) ?x61225) ?x61227) ?x61229) ?x61231)))
 (let ((?x61238 (- (+ (+ (+ ?x61232 ?x60749) ?x60751) ?x60753) (* (* 6.0 l_0_17_49) l_0_17_53))))
 (let ((?x61253 (+ (- (- (- (- (- (- ?x61238 ?x61240) ?x61243) ?x61246) ?x60759) ?x60761) ?x60763) ?x61252)))
 (= (+ (+ (+ ?x61253 ?x61255) ?x61258) ?x61261) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61367 (* 2.0 l_0_17_90)))
 (let ((?x61368 (* ?x61367 l_0_17_93)))
 (let ((?x61364 (* 2.0 l_0_17_89)))
 (let ((?x61365 (* ?x61364 l_0_17_92)))
 (let ((?x61361 (* 2.0 l_0_17_88)))
 (let ((?x61362 (* ?x61361 l_0_17_91)))
 (let ((?x61260 (* 6.0 l_0_17_73)))
 (let ((?x61359 (* ?x61260 l_0_17_82)))
 (let ((?x61257 (* 6.0 l_0_17_72)))
 (let ((?x61357 (* ?x61257 l_0_17_81)))
 (let ((?x61254 (* 6.0 l_0_17_71)))
 (let ((?x61355 (* ?x61254 l_0_17_80)))
 (let ((?x61251 (* 6.0 l_0_17_70)))
 (let ((?x61353 (* ?x61251 l_0_17_79)))
 (let ((?x60639 (* 2.0 l_0_17_69)))
 (let ((?x60869 (* ?x60639 l_0_17_81)))
 (let ((?x60636 (* 2.0 l_0_17_68)))
 (let ((?x60867 (* ?x60636 l_0_17_80)))
 (let ((?x60633 (* 2.0 l_0_17_67)))
 (let ((?x60865 (* ?x60633 l_0_17_79)))
 (let ((?x61245 (* 6.0 l_0_17_52)))
 (let ((?x61348 (* ?x61245 l_0_17_61)))
 (let ((?x61242 (* 6.0 l_0_17_51)))
 (let ((?x61346 (* ?x61242 l_0_17_60)))
 (let ((?x61239 (* 6.0 l_0_17_50)))
 (let ((?x61344 (* ?x61239 l_0_17_59)))
 (let ((?x60618 (* 2.0 l_0_17_48)))
 (let ((?x60859 (* ?x60618 l_0_17_60)))
 (let ((?x60615 (* 2.0 l_0_17_47)))
 (let ((?x60857 (* ?x60615 l_0_17_59)))
 (let ((?x60612 (* 2.0 l_0_17_46)))
 (let ((?x60855 (* ?x60612 l_0_17_58)))
 (let ((?x58419 (* 12.0 l_0_17_31)))
 (let ((?x58420 (* ?x58419 l_0_17_40)))
 (let ((?x58416 (* 12.0 l_0_17_30)))
 (let ((?x58417 (* ?x58416 l_0_17_39)))
 (let ((?x58413 (* 12.0 l_0_17_29)))
 (let ((?x58414 (* ?x58413 l_0_17_38)))
 (let ((?x58398 (* 12.0 l_0_17_28)))
 (let ((?x58399 (* ?x58398 l_0_17_37)))
 (let ((?x58347 (* 12.0 l_0_17_18)))
 (let ((?x58348 (* ?x58347 l_0_17_9)))
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61332 (* ?x61331 l_0_17_177)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61329 (* ?x61328 l_0_17_176)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61326 (* ?x61325 l_0_17_175)))
 (let ((?x58338 (* 12.0 l_0_17_17)))
 (let ((?x58339 (* ?x58338 l_0_17_8)))
 (let ((?x58335 (* 12.0 l_0_17_16)))
 (let ((?x58336 (* ?x58335 l_0_17_7)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61321 (* ?x61320 l_0_17_156)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61318 (* ?x61317 l_0_17_155)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61315 (* ?x61314 l_0_17_154)))
 (let ((?x61222 (* 2.0 l_0_17_136)))
 (let ((?x61312 (* ?x61222 l_0_17_145)))
 (let ((?x61219 (* 2.0 l_0_17_135)))
 (let ((?x61310 (* ?x61219 l_0_17_144)))
 (let ((?x50162 (* 2.0 l_0_17_134)))
 (let ((?x61308 (* ?x50162 l_0_17_143)))
 (let ((?x50161 (* 2.0 l_0_17_133)))
 (let ((?x61306 (* ?x50161 l_0_17_142)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61304 (* ?x61303 l_0_17_114)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61287 (* ?x61286 l_0_17_113)))
 (let ((?x58320 (* 12.0 l_0_17_10)))
 (let ((?x58321 (* ?x58320 l_0_17_19)))
 (let ((?x61307 (+ (+ (+ (+ ?x58321 (* (* 2.0 l_0_17_109) l_0_17_112)) ?x61287) ?x61304) ?x61306)))
 (let ((?x61323 (+ (- (- (- (+ (+ (+ ?x61307 ?x61308) ?x61310) ?x61312) ?x61315) ?x61318) ?x61321) ?x58336)))
 (let ((?x61336 (- (- (+ (+ (+ (+ (+ ?x61323 ?x58339) ?x61326) ?x61329) ?x61332) ?x58348) ?x58399) ?x58414)))
 (let ((?x61343 (- (+ (+ (+ (- (- ?x61336 ?x58417) ?x58420) ?x60855) ?x60857) ?x60859) (* (* 6.0 l_0_17_49) l_0_17_58))))
 (let ((?x61354 (+ (- (- (- (- (- (- ?x61343 ?x61344) ?x61346) ?x61348) ?x60865) ?x60867) ?x60869) ?x61353)))
 (= (- (- (- (+ (+ (+ ?x61354 ?x61355) ?x61357) ?x61359) ?x61362) ?x61365) ?x61368) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61485 (* l_0_17_78 l_0_17_78)))
 (let ((?x61486 (* 3.0 ?x61485)))
 (let ((?x61482 (* l_0_17_77 l_0_17_77)))
 (let ((?x61483 (* 3.0 ?x61482)))
 (let ((?x61479 (* l_0_17_76 l_0_17_76)))
 (let ((?x61480 (* 3.0 ?x61479)))
 (let ((?x61476 (* l_0_17_75 l_0_17_75)))
 (let ((?x61477 (* 3.0 ?x61476)))
 (let ((?x61473 (* l_0_17_74 l_0_17_74)))
 (let ((?x61474 (* 3.0 ?x61473)))
 (let ((?x61471 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x61468 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x61465 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x61462 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x61456 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x61453 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x61450 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x61447 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x61444 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x60415 (* l_0_17_15 l_0_17_15)))
 (let ((?x61441 (* 6.0 ?x60415)))
 (let ((?x61439 (* l_0_17_141 l_0_17_141)))
 (let ((?x61437 (* l_0_17_140 l_0_17_140)))
 (let ((?x60413 (* l_0_17_14 l_0_17_14)))
 (let ((?x61435 (* 6.0 ?x60413)))
 (let ((?x61433 (* l_0_17_139 l_0_17_139)))
 (let ((?x61431 (* l_0_17_138 l_0_17_138)))
 (let ((?x61429 (* l_0_17_137 l_0_17_137)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x61048 (* ?x60969 l_0_17_139)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x61045 (* ?x29526 l_0_17_138)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x61042 (* ?x29524 l_0_17_137)))
 (let ((?x60411 (* l_0_17_13 l_0_17_13)))
 (let ((?x61424 (* 6.0 ?x60411)))
 (let ((?x60408 (* l_0_17_12 l_0_17_12)))
 (let ((?x61422 (* 6.0 ?x60408)))
 (let ((?x60429 (* l_0_17_11 l_0_17_11)))
 (let ((?x50515 (* 6.0 ?x60429)))
 (let ((?x61423 (+ ?x50515 ?x61422)))
 (let ((?x61434 (+ (+ (+ (- (- (- (+ ?x61423 ?x61424) ?x61042) ?x61045) ?x61048) ?x61429) ?x61431) ?x61433)))
 (let ((?x61451 (- (- (- (+ (+ (+ (+ ?x61434 ?x61435) ?x61437) ?x61439) ?x61441) ?x61444) ?x61447) ?x61450)))
 (let ((?x61463 (- (- (- (- ?x61451 ?x61453) ?x61456) (* (* 3.0 l_0_17_53) l_0_17_53)) ?x61462)))
 (let ((?x61484 (+ (+ (+ (+ (- (- (- ?x61463 ?x61465) ?x61468) ?x61471) ?x61474) ?x61477) ?x61480) ?x61483)))
 (= (+ ?x61484 ?x61486) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61367 (* 2.0 l_0_17_90)))
 (let ((?x61609 (* ?x61367 l_0_17_97)))
 (let ((?x61364 (* 2.0 l_0_17_89)))
 (let ((?x61607 (* ?x61364 l_0_17_96)))
 (let ((?x61361 (* 2.0 l_0_17_88)))
 (let ((?x61605 (* ?x61361 l_0_17_95)))
 (let ((?x61603 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x61600 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x61597 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x61594 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x61591 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x61588 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x61585 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x61582 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x61579 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x61573 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61570 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61567 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61564 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61561 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61558 (* ?x61331 l_0_17_181)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61556 (* ?x61328 l_0_17_180)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61554 (* ?x61325 l_0_17_179)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61552 (* ?x61320 l_0_17_160)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61550 (* ?x61317 l_0_17_159)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61548 (* ?x61314 l_0_17_158)))
 (let ((?x61546 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x61543 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61540 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61537 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x61534 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61531 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61528 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x60969 (* 2.0 l_0_17_132)))
 (let ((?x61087 (* ?x60969 l_0_17_144)))
 (let ((?x29526 (* 2.0 l_0_17_131)))
 (let ((?x61085 (* ?x29526 l_0_17_143)))
 (let ((?x29524 (* 2.0 l_0_17_130)))
 (let ((?x61083 (* ?x29524 l_0_17_142)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x61522 (* ?x60702 l_0_17_18)))
 (let ((?x60691 (* 12.0 l_0_17_12)))
 (let ((?x61520 (* ?x60691 l_0_17_17)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61518 (* ?x61303 l_0_17_118)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61516 (* ?x61286 l_0_17_117)))
 (let ((?x60687 (* 12.0 l_0_17_11)))
 (let ((?x61514 (* ?x60687 l_0_17_16)))
 (let ((?x61521 (+ (+ (+ (+ (* (* 2.0 l_0_17_109) l_0_17_116) ?x61514) ?x61516) ?x61518) ?x61520)))
 (let ((?x61535 (+ (+ (+ (- (- (- (+ ?x61521 ?x61522) ?x61083) ?x61085) ?x61087) ?x61528) ?x61531) ?x61534)))
 (let ((?x61553 (- (- (- (+ (+ (+ (+ ?x61535 ?x61537) ?x61540) ?x61543) ?x61546) ?x61548) ?x61550) ?x61552)))
 (let ((?x61571 (- (- (- (- (+ (+ (+ ?x61553 ?x61554) ?x61556) ?x61558) ?x61561) ?x61564) ?x61567) ?x61570)))
 (let ((?x61583 (- (- (- (- ?x61571 ?x61573) (* (* 6.0 l_0_17_53) l_0_17_58)) ?x61579) ?x61582)))
 (let ((?x61604 (+ (+ (+ (+ (+ (- (- ?x61583 ?x61585) ?x61588) ?x61591) ?x61594) ?x61597) ?x61600) ?x61603)))
 (= (- (- (- ?x61604 ?x61605) ?x61607) ?x61609) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58963 (* l_0_17_84 l_0_17_84)))
 (let ((?x61733 (* 3.0 ?x58963)))
 (let ((?x58960 (* l_0_17_83 l_0_17_83)))
 (let ((?x61731 (* 3.0 ?x58960)))
 (let ((?x58957 (* l_0_17_82 l_0_17_82)))
 (let ((?x61729 (* 3.0 ?x58957)))
 (let ((?x58954 (* l_0_17_81 l_0_17_81)))
 (let ((?x61727 (* 3.0 ?x58954)))
 (let ((?x58951 (* l_0_17_80 l_0_17_80)))
 (let ((?x61725 (* 3.0 ?x58951)))
 (let ((?x58948 (* l_0_17_79 l_0_17_79)))
 (let ((?x61723 (* 3.0 ?x58948)))
 (let ((?x61721 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x61718 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x61715 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x61712 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x61709 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x58928 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x58925 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x58922 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x58919 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x58916 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x58913 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x58859 (* l_0_17_21 l_0_17_21)))
 (let ((?x58860 (* 6.0 ?x58859)))
 (let ((?x58846 (* l_0_17_20 l_0_17_20)))
 (let ((?x58847 (* 6.0 ?x58846)))
 (let ((?x58843 (* l_0_17_19 l_0_17_19)))
 (let ((?x58844 (* 6.0 ?x58843)))
 (let ((?x58840 (* l_0_17_18 l_0_17_18)))
 (let ((?x58841 (* 6.0 ?x58840)))
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61693 (* ?x61331 l_0_17_186)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61691 (* ?x61328 l_0_17_185)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61689 (* ?x61325 l_0_17_184)))
 (let ((?x58833 (* l_0_17_17 l_0_17_17)))
 (let ((?x58834 (* 6.0 ?x58833)))
 (let ((?x58830 (* l_0_17_16 l_0_17_16)))
 (let ((?x58831 (* 6.0 ?x58830)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61685 (* ?x61320 l_0_17_165)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61683 (* ?x61317 l_0_17_164)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61681 (* ?x61314 l_0_17_163)))
 (let ((?x61679 (* l_0_17_147 l_0_17_147)))
 (let ((?x61677 (* l_0_17_146 l_0_17_146)))
 (let ((?x61675 (* l_0_17_145 l_0_17_145)))
 (let ((?x61673 (* l_0_17_144 l_0_17_144)))
 (let ((?x61671 (* l_0_17_143 l_0_17_143)))
 (let ((?x61669 (* l_0_17_142 l_0_17_142)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61667 (* ?x61303 l_0_17_123)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61665 (* ?x61286 l_0_17_122)))
 (let ((?x29740 (* 2.0 l_0_17_109)))
 (let ((?x40020 (* ?x29740 l_0_17_121)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x50912 (* ?x50910 l_0_17_90)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x50915 (* ?x58819 l_0_17_89)))
 (let ((?x61666 (+ (+ (- (- (* (* (- 2.0) l_0_17_100) l_0_17_88) ?x50915) ?x50912) ?x40020) ?x61665)))
 (let ((?x61680 (+ (+ (+ (+ (+ (+ (+ ?x61666 ?x61667) ?x61669) ?x61671) ?x61673) ?x61675) ?x61677) ?x61679)))
 (let ((?x61692 (+ (+ (+ (+ (- (- (- ?x61680 ?x61681) ?x61683) ?x61685) ?x58831) ?x58834) ?x61689) ?x61691)))
 (let ((?x61700 (- (- (+ (+ (+ (+ (+ ?x61692 ?x61693) ?x58841) ?x58844) ?x58847) ?x58860) ?x58913) ?x58916)))
 (let ((?x61707 (- (- (- (- (- ?x61700 ?x58919) ?x58922) ?x58925) ?x58928) (* (* 3.0 l_0_17_58) l_0_17_58))))
 (let ((?x61726 (+ (+ (- (- (- (- (- ?x61707 ?x61709) ?x61712) ?x61715) ?x61718) ?x61721) ?x61723) ?x61725)))
 (= (+ (+ (+ (+ ?x61726 ?x61727) ?x61729) ?x61731) ?x61733) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x61831 (* ?x58443 l_0_17_75)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x61829 (* ?x58440 l_0_17_74)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x61827 (* ?x58425 l_0_17_54)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x61825 (* ?x58422 l_0_17_53)))
 (let ((?x58637 (* 12.0 l_0_17_24)))
 (let ((?x60725 (* ?x58637 l_0_17_33)))
 (let ((?x58628 (* 12.0 l_0_17_23)))
 (let ((?x60717 (* ?x58628 l_0_17_32)))
 (let ((?x59439 (* l_0_17_129 l_0_17_129)))
 (let ((?x59438 (* l_0_17_128 l_0_17_128)))
 (let ((?x60691 (* 12.0 l_0_17_12)))
 (let ((?x60692 (* ?x60691 l_0_17_3)))
 (let ((?x60687 (* 12.0 l_0_17_11)))
 (let ((?x60688 (* ?x60687 l_0_17_2)))
 (let ((?x61804 (- (- (- (+ ?x60688 ?x60692) ?x59438) ?x59439) (* (* 2.0 l_0_17_191) l_0_17_200))))
 (let ((?x61808 (- (- ?x61804 (* (* 2.0 l_0_17_192) l_0_17_201)) (* (* 2.0 l_0_17_212) l_0_17_221))))
 (let ((?x61813 (- (- (- ?x61808 (* (* 2.0 l_0_17_213) l_0_17_222)) ?x60717) (* (* 2.0 l_0_17_233) l_0_17_242))))
 (let ((?x61818 (- (- (- ?x61813 (* (* 2.0 l_0_17_234) l_0_17_243)) ?x60725) (* (* 2.0 l_0_17_254) l_0_17_263))))
 (let ((?x61822 (- (- ?x61818 (* (* 2.0 l_0_17_255) l_0_17_264)) (* (* 2.0 l_0_17_275) l_0_17_284))))
 (let ((?x61830 (+ (- (- (- ?x61822 (* (* 2.0 l_0_17_276) l_0_17_285)) ?x61825) ?x61827) ?x61829)))
 (= (+ ?x61830 ?x61831) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58455 (* 2.0 l_0_17_73)))
 (let ((?x61937 (* ?x58455 l_0_17_77)))
 (let ((?x58452 (* 2.0 l_0_17_72)))
 (let ((?x61935 (* ?x58452 l_0_17_76)))
 (let ((?x58449 (* 2.0 l_0_17_71)))
 (let ((?x61933 (* ?x58449 l_0_17_75)))
 (let ((?x58446 (* 2.0 l_0_17_70)))
 (let ((?x61931 (* ?x58446 l_0_17_74)))
 (let ((?x58443 (* 2.0 l_0_17_66)))
 (let ((?x61831 (* ?x58443 l_0_17_75)))
 (let ((?x58440 (* 2.0 l_0_17_65)))
 (let ((?x61829 (* ?x58440 l_0_17_74)))
 (let ((?x58437 (* 2.0 l_0_17_52)))
 (let ((?x61927 (* ?x58437 l_0_17_56)))
 (let ((?x58434 (* 2.0 l_0_17_51)))
 (let ((?x61925 (* ?x58434 l_0_17_55)))
 (let ((?x58431 (* 2.0 l_0_17_50)))
 (let ((?x61923 (* ?x58431 l_0_17_54)))
 (let ((?x58428 (* 2.0 l_0_17_49)))
 (let ((?x61921 (* ?x58428 l_0_17_53)))
 (let ((?x58425 (* 2.0 l_0_17_45)))
 (let ((?x61827 (* ?x58425 l_0_17_54)))
 (let ((?x58422 (* 2.0 l_0_17_44)))
 (let ((?x61825 (* ?x58422 l_0_17_53)))
 (let ((?x58419 (* 12.0 l_0_17_31)))
 (let ((?x61231 (* ?x58419 l_0_17_35)))
 (let ((?x58416 (* 12.0 l_0_17_30)))
 (let ((?x61229 (* ?x58416 l_0_17_34)))
 (let ((?x58413 (* 12.0 l_0_17_29)))
 (let ((?x61227 (* ?x58413 l_0_17_33)))
 (let ((?x58398 (* 12.0 l_0_17_28)))
 (let ((?x61225 (* ?x58398 l_0_17_32)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x50141 (* ?x60702 l_0_17_9)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x29128 (* ?x59295 l_0_17_134)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x39327 (* ?x59293 l_0_17_133)))
 (let ((?x29687 (+ (* (* 12.0 l_0_17_10) l_0_17_14) (* (* 12.0 l_0_17_11) l_0_17_7))))
 (let ((?x50136 (+ ?x29687 (* (* 12.0 l_0_17_12) l_0_17_8))))
 (let ((?x61876 (- (+ (- (- ?x50136 ?x39327) ?x29128) ?x50141) (* (* 2.0 l_0_17_196) l_0_17_200))))
 (let ((?x61880 (- (- ?x61876 (* (* 2.0 l_0_17_197) l_0_17_201)) (* (* 2.0 l_0_17_198) l_0_17_202))))
 (let ((?x61884 (- (- ?x61880 (* (* 2.0 l_0_17_199) l_0_17_203)) (* (* 2.0 l_0_17_217) l_0_17_221))))
 (let ((?x61888 (- (- ?x61884 (* (* 2.0 l_0_17_218) l_0_17_222)) (* (* 2.0 l_0_17_219) l_0_17_223))))
 (let ((?x61892 (- (- ?x61888 (* (* 2.0 l_0_17_220) l_0_17_224)) (* (* 2.0 l_0_17_238) l_0_17_242))))
 (let ((?x61896 (- (- ?x61892 (* (* 2.0 l_0_17_239) l_0_17_243)) (* (* 2.0 l_0_17_240) l_0_17_244))))
 (let ((?x61900 (- (- ?x61896 (* (* 2.0 l_0_17_241) l_0_17_245)) (* (* 2.0 l_0_17_259) l_0_17_263))))
 (let ((?x61904 (- (- ?x61900 (* (* 2.0 l_0_17_260) l_0_17_264)) (* (* 2.0 l_0_17_261) l_0_17_265))))
 (let ((?x61909 (- (- (- ?x61904 (* (* 2.0 l_0_17_262) l_0_17_266)) ?x61225) (* (* 2.0 l_0_17_280) l_0_17_284))))
 (let ((?x61913 (- (- ?x61909 (* (* 2.0 l_0_17_281) l_0_17_285)) (* (* 2.0 l_0_17_282) l_0_17_286))))
 (let ((?x61918 (- (- (- (- ?x61913 (* (* 2.0 l_0_17_283) l_0_17_287)) ?x61227) ?x61229) ?x61231)))
 (let ((?x61929 (- (- (- (- (- (+ (+ ?x61918 ?x61825) ?x61827) ?x61921) ?x61923) ?x61925) ?x61927) ?x61829)))
 (= (+ (+ (+ (+ (- ?x61929 ?x61831) ?x61931) ?x61933) ?x61935) ?x61937) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61456 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x61453 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x61450 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x61447 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x61444 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x62033 (* l_0_17_288 l_0_17_288)))
 (let ((?x62031 (* l_0_17_287 l_0_17_287)))
 (let ((?x62029 (* l_0_17_286 l_0_17_286)))
 (let ((?x62027 (* l_0_17_285 l_0_17_285)))
 (let ((?x62025 (* l_0_17_284 l_0_17_284)))
 (let ((?x62023 (* l_0_17_267 l_0_17_267)))
 (let ((?x62021 (* l_0_17_266 l_0_17_266)))
 (let ((?x62019 (* l_0_17_265 l_0_17_265)))
 (let ((?x62017 (* l_0_17_264 l_0_17_264)))
 (let ((?x62015 (* l_0_17_263 l_0_17_263)))
 (let ((?x62013 (* l_0_17_246 l_0_17_246)))
 (let ((?x62011 (* l_0_17_245 l_0_17_245)))
 (let ((?x62009 (* l_0_17_244 l_0_17_244)))
 (let ((?x62007 (* l_0_17_243 l_0_17_243)))
 (let ((?x62005 (* l_0_17_242 l_0_17_242)))
 (let ((?x62003 (* l_0_17_225 l_0_17_225)))
 (let ((?x62001 (* l_0_17_224 l_0_17_224)))
 (let ((?x61999 (* l_0_17_223 l_0_17_223)))
 (let ((?x61997 (* l_0_17_222 l_0_17_222)))
 (let ((?x61995 (* l_0_17_221 l_0_17_221)))
 (let ((?x61993 (* l_0_17_204 l_0_17_204)))
 (let ((?x61991 (* l_0_17_203 l_0_17_203)))
 (let ((?x61989 (* l_0_17_202 l_0_17_202)))
 (let ((?x61987 (* l_0_17_201 l_0_17_201)))
 (let ((?x61985 (* l_0_17_200 l_0_17_200)))
 (let ((?x60415 (* l_0_17_15 l_0_17_15)))
 (let ((?x61441 (* 6.0 ?x60415)))
 (let ((?x60413 (* l_0_17_14 l_0_17_14)))
 (let ((?x61435 (* 6.0 ?x60413)))
 (let ((?x60411 (* l_0_17_13 l_0_17_13)))
 (let ((?x61424 (* 6.0 ?x60411)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x60700 (* ?x59295 l_0_17_138)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x60697 (* ?x59293 l_0_17_137)))
 (let ((?x60408 (* l_0_17_12 l_0_17_12)))
 (let ((?x61422 (* 6.0 ?x60408)))
 (let ((?x60429 (* l_0_17_11 l_0_17_11)))
 (let ((?x50515 (* 6.0 ?x60429)))
 (let ((?x61423 (+ ?x50515 ?x61422)))
 (let ((?x61988 (- (- (+ (+ (+ (- (- ?x61423 ?x60697) ?x60700) ?x61424) ?x61435) ?x61441) ?x61985) ?x61987)))
 (let ((?x62002 (- (- (- (- (- (- (- ?x61988 ?x61989) ?x61991) ?x61993) ?x61995) ?x61997) ?x61999) ?x62001)))
 (let ((?x62016 (- (- (- (- (- (- (- ?x62002 ?x62003) ?x62005) ?x62007) ?x62009) ?x62011) ?x62013) ?x62015)))
 (let ((?x62030 (- (- (- (- (- (- (- ?x62016 ?x62017) ?x62019) ?x62021) ?x62023) ?x62025) ?x62027) ?x62029)))
 (let ((?x62039 (- (- (- (- (- (- (- ?x62030 ?x62031) ?x62033) ?x61444) ?x61447) ?x61450) ?x61453) ?x61456)))
 (let ((?x62045 (- (- ?x62039 (* (* 1.0 l_0_17_53) l_0_17_53)) (* (* 1.0 l_0_17_54) l_0_17_54))))
 (let ((?x62051 (- (- ?x62045 (* (* 1.0 l_0_17_55) l_0_17_55)) (* (* 1.0 l_0_17_56) l_0_17_56))))
 (let ((?x62056 (+ (- ?x62051 (* (* 1.0 l_0_17_57) l_0_17_57)) (* 1.0 (* l_0_17_74 l_0_17_74)))))
 (let ((?x62060 (+ (+ ?x62056 (* 1.0 (* l_0_17_75 l_0_17_75))) (* 1.0 (* l_0_17_76 l_0_17_76)))))
 (let ((?x62064 (+ (+ ?x62060 (* 1.0 (* l_0_17_77 l_0_17_77))) (* 1.0 (* l_0_17_78 l_0_17_78)))))
 (= ?x62064 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x62235 (* ?x58461 l_0_17_96)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x62233 (* ?x58458 l_0_17_95)))
 (let ((?x62231 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x62228 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x62225 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x62222 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x62219 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x62216 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x62213 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x62210 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x62207 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x62204 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x61573 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61570 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61567 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61564 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61561 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x62121 (* ?x58344 l_0_17_180)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x62119 (* ?x58341 l_0_17_179)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x62117 (* ?x58332 l_0_17_159)))
 (let ((?x61546 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x62114 (* ?x58329 l_0_17_158)))
 (let ((?x61537 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x60702 (* 12.0 l_0_17_13)))
 (let ((?x61522 (* ?x60702 l_0_17_18)))
 (let ((?x59295 (* 2.0 l_0_17_129)))
 (let ((?x60795 (* ?x59295 l_0_17_143)))
 (let ((?x59293 (* 2.0 l_0_17_128)))
 (let ((?x60793 (* ?x59293 l_0_17_142)))
 (let ((?x60691 (* 12.0 l_0_17_12)))
 (let ((?x61520 (* ?x60691 l_0_17_17)))
 (let ((?x60687 (* 12.0 l_0_17_11)))
 (let ((?x61514 (* ?x60687 l_0_17_16)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x62106 (* ?x58326 l_0_17_117)))
 (let ((?x62110 (- (+ (+ (+ (* (* 2.0 l_0_17_107) l_0_17_116) ?x62106) ?x61514) ?x61520) ?x60793)))
 (let ((?x62120 (+ (- (+ (- (+ (+ (- ?x62110 ?x60795) ?x61522) ?x61537) ?x62114) ?x61546) ?x62117) ?x62119)))
 (let ((?x62128 (- (- (+ ?x62120 ?x62121) (* (* 2.0 l_0_17_200) l_0_17_205)) (* (* 2.0 l_0_17_201) l_0_17_206))))
 (let ((?x62134 (- (- ?x62128 (* (* 2.0 l_0_17_202) l_0_17_207)) (* (* 2.0 l_0_17_203) l_0_17_208))))
 (let ((?x62140 (- (- ?x62134 (* (* 2.0 l_0_17_204) l_0_17_209)) (* (* 2.0 l_0_17_221) l_0_17_226))))
 (let ((?x62146 (- (- ?x62140 (* (* 2.0 l_0_17_222) l_0_17_227)) (* (* 2.0 l_0_17_223) l_0_17_228))))
 (let ((?x62152 (- (- ?x62146 (* (* 2.0 l_0_17_224) l_0_17_229)) (* (* 2.0 l_0_17_225) l_0_17_230))))
 (let ((?x62158 (- (- ?x62152 (* (* 2.0 l_0_17_242) l_0_17_247)) (* (* 2.0 l_0_17_243) l_0_17_248))))
 (let ((?x62164 (- (- ?x62158 (* (* 2.0 l_0_17_244) l_0_17_249)) (* (* 2.0 l_0_17_245) l_0_17_250))))
 (let ((?x62170 (- (- ?x62164 (* (* 2.0 l_0_17_246) l_0_17_251)) (* (* 2.0 l_0_17_263) l_0_17_268))))
 (let ((?x62176 (- (- ?x62170 (* (* 2.0 l_0_17_264) l_0_17_269)) (* (* 2.0 l_0_17_265) l_0_17_270))))
 (let ((?x62182 (- (- ?x62176 (* (* 2.0 l_0_17_266) l_0_17_271)) (* (* 2.0 l_0_17_267) l_0_17_272))))
 (let ((?x62188 (- (- ?x62182 (* (* 2.0 l_0_17_284) l_0_17_289)) (* (* 2.0 l_0_17_285) l_0_17_290))))
 (let ((?x62194 (- (- ?x62188 (* (* 2.0 l_0_17_286) l_0_17_291)) (* (* 2.0 l_0_17_287) l_0_17_292))))
 (let ((?x62200 (- (- (- (- ?x62194 (* (* 2.0 l_0_17_288) l_0_17_293)) ?x61561) ?x61564) ?x61567)))
 (let ((?x62217 (- (- (- (- (- (- (- ?x62200 ?x61570) ?x61573) ?x62204) ?x62207) ?x62210) ?x62213) ?x62216)))
 (let ((?x62236 (- (- (+ (+ (+ (+ (+ ?x62217 ?x62219) ?x62222) ?x62225) ?x62228) ?x62231) ?x62233) ?x62235)))
 (= ?x62236 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59568 (* l_0_17_64 l_0_17_64)))
 (let ((?x59605 (* 3.0 ?x59568)))
 (= (+ (* (* (- 3.0) l_0_17_43) l_0_17_43) ?x59605) 0.0))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60032 (* ?x60031 l_0_17_86)))
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60093 (* ?x59779 l_0_17_67)))
 (let ((?x59774 (* 6.0 l_0_17_43)))
 (let ((?x60088 (* ?x59774 l_0_17_46)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60006 (* ?x60005 l_0_17_170)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60000 (* ?x59999 l_0_17_149)))
 (let ((?x62354 (+ (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_107) ?x60000) ?x60006) ?x60088) ?x60093)))
 (= (+ ?x62354 ?x60032) 0.0)))))))))))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60143 (* ?x59779 l_0_17_70)))
 (= (+ (* (* (- 6.0) l_0_17_43) l_0_17_49) ?x60143) 0.0))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60199 (* ?x59779 l_0_17_74)))
 (= (+ (* (* (- 6.0) l_0_17_43) l_0_17_53) ?x60199) 0.0))))
(assert
 (let ((?x59779 (* 6.0 l_0_17_64)))
 (let ((?x60260 (* ?x59779 l_0_17_79)))
 (= (+ (* (* (- 6.0) l_0_17_43) l_0_17_58) ?x60260) 0.0))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x60873 (* ?x58461 l_0_17_89)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x60871 (* ?x58458 l_0_17_88)))
 (let ((?x59260 (* l_0_17_69 l_0_17_69)))
 (let ((?x59261 (* 3.0 ?x59260)))
 (let ((?x59257 (* l_0_17_68 l_0_17_68)))
 (let ((?x59258 (* 3.0 ?x59257)))
 (let ((?x59254 (* l_0_17_67 l_0_17_67)))
 (let ((?x59255 (* 3.0 ?x59254)))
 (let ((?x59240 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x59237 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x59234 (* (* 3.0 l_0_17_46) l_0_17_46)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x60809 (* ?x58344 l_0_17_173)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x60807 (* ?x58341 l_0_17_172)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x60799 (* ?x58332 l_0_17_152)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x60797 (* ?x58329 l_0_17_151)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x60791 (* ?x58326 l_0_17_110)))
 (let ((?x62375 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_109) ?x60791) ?x60797) ?x60799) ?x60807)))
 (let ((?x62382 (+ (+ (+ (- (- (- (- ?x62375 ?x60809) ?x59234) ?x59237) ?x59240) ?x59255) ?x59258) ?x59261)))
 (= (+ (+ ?x62382 ?x60871) ?x60873) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x58462 (* ?x58461 l_0_17_92)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x58459 (* ?x58458 l_0_17_91)))
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61003 (* ?x61002 l_0_17_72)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x60999 (* ?x60998 l_0_17_71)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x60995 (* ?x60994 l_0_17_70)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x60987 (* ?x60986 l_0_17_51)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x60983 (* ?x60982 l_0_17_50)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x60979 (* ?x60978 l_0_17_49)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x58345 (* ?x58344 l_0_17_176)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x58342 (* ?x58341 l_0_17_175)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x58333 (* ?x58332 l_0_17_155)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x58330 (* ?x58329 l_0_17_154)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x58327 (* ?x58326 l_0_17_113)))
 (let ((?x52112 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_112) ?x58327) ?x58330) ?x58333) ?x58342)))
 (let ((?x62398 (+ (+ (+ (- (- (- (- ?x52112 ?x58345) ?x60979) ?x60983) ?x60987) ?x60995) ?x60999) ?x61003)))
 (= (+ (+ ?x62398 ?x58459) ?x58462) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x58461 (* 2.0 l_0_17_87)))
 (let ((?x62235 (* ?x58461 l_0_17_96)))
 (let ((?x58458 (* 2.0 l_0_17_86)))
 (let ((?x62233 (* ?x58458 l_0_17_95)))
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61068 (* ?x61002 l_0_17_76)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x61066 (* ?x60998 l_0_17_75)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x61064 (* ?x60994 l_0_17_74)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x61060 (* ?x60986 l_0_17_55)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x61058 (* ?x60982 l_0_17_54)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x61056 (* ?x60978 l_0_17_53)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x62121 (* ?x58344 l_0_17_180)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x62119 (* ?x58341 l_0_17_179)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x62117 (* ?x58332 l_0_17_159)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x62114 (* ?x58329 l_0_17_158)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x62106 (* ?x58326 l_0_17_117)))
 (let ((?x52105 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_116) ?x62106) ?x62114) ?x62117) ?x62119)))
 (let ((?x28760 (+ (+ (+ (- (- (- (- ?x52105 ?x62121) ?x61056) ?x61058) ?x61060) ?x61064) ?x61066) ?x61068)))
 (= (+ (+ ?x28760 ?x62233) ?x62235) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x61002 (* 6.0 l_0_17_69)))
 (let ((?x61121 (* ?x61002 l_0_17_81)))
 (let ((?x60998 (* 6.0 l_0_17_68)))
 (let ((?x61119 (* ?x60998 l_0_17_80)))
 (let ((?x60994 (* 6.0 l_0_17_67)))
 (let ((?x61117 (* ?x60994 l_0_17_79)))
 (let ((?x60986 (* 6.0 l_0_17_48)))
 (let ((?x61113 (* ?x60986 l_0_17_60)))
 (let ((?x60982 (* 6.0 l_0_17_47)))
 (let ((?x61111 (* ?x60982 l_0_17_59)))
 (let ((?x60978 (* 6.0 l_0_17_46)))
 (let ((?x61109 (* ?x60978 l_0_17_58)))
 (let ((?x58344 (* 2.0 l_0_17_171)))
 (let ((?x58838 (* ?x58344 l_0_17_185)))
 (let ((?x58341 (* 2.0 l_0_17_170)))
 (let ((?x58836 (* ?x58341 l_0_17_184)))
 (let ((?x58332 (* 2.0 l_0_17_150)))
 (let ((?x58828 (* ?x58332 l_0_17_164)))
 (let ((?x58329 (* 2.0 l_0_17_149)))
 (let ((?x58826 (* ?x58329 l_0_17_163)))
 (let ((?x58326 (* 2.0 l_0_17_108)))
 (let ((?x58824 (* ?x58326 l_0_17_122)))
 (let ((?x58323 (* 2.0 l_0_17_107)))
 (let ((?x58822 (* ?x58323 l_0_17_121)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x58820 (* ?x58819 l_0_17_87)))
 (let ((?x58816 (* 2.0 l_0_17_100)))
 (let ((?x58817 (* ?x58816 l_0_17_86)))
 (let ((?x62407 (- (- (+ (+ (- (- (+ ?x58817 ?x58820) ?x58822) ?x58824) ?x58826) ?x58828) ?x58836) ?x58838)))
 (= (+ (+ (+ (- (- (- ?x62407 ?x61109) ?x61111) ?x61113) ?x61117) ?x61119) ?x61121) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59155 (* l_0_17_73 l_0_17_73)))
 (let ((?x61206 (* 3.0 ?x59155)))
 (let ((?x59152 (* l_0_17_72 l_0_17_72)))
 (let ((?x61204 (* 3.0 ?x59152)))
 (let ((?x59149 (* l_0_17_71 l_0_17_71)))
 (let ((?x61202 (* 3.0 ?x59149)))
 (let ((?x59146 (* l_0_17_70 l_0_17_70)))
 (let ((?x61200 (* 3.0 ?x59146)))
 (let ((?x61194 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x61191 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x61188 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x62425 (+ (- (- (- (* (* (- 3.0) l_0_17_49) l_0_17_49) ?x61188) ?x61191) ?x61194) ?x61200)))
 (= (+ (+ (+ ?x62425 ?x61202) ?x61204) ?x61206) 0.0))))))))))))))
(assert
 (let ((?x61260 (* 6.0 l_0_17_73)))
 (let ((?x61261 (* ?x61260 l_0_17_77)))
 (let ((?x61257 (* 6.0 l_0_17_72)))
 (let ((?x61258 (* ?x61257 l_0_17_76)))
 (let ((?x61254 (* 6.0 l_0_17_71)))
 (let ((?x61255 (* ?x61254 l_0_17_75)))
 (let ((?x61251 (* 6.0 l_0_17_70)))
 (let ((?x61252 (* ?x61251 l_0_17_74)))
 (let ((?x61245 (* 6.0 l_0_17_52)))
 (let ((?x61246 (* ?x61245 l_0_17_56)))
 (let ((?x61242 (* 6.0 l_0_17_51)))
 (let ((?x61243 (* ?x61242 l_0_17_55)))
 (let ((?x61239 (* 6.0 l_0_17_50)))
 (let ((?x61240 (* ?x61239 l_0_17_54)))
 (let ((?x62440 (+ (- (- (- (* (* (- 6.0) l_0_17_49) l_0_17_53) ?x61240) ?x61243) ?x61246) ?x61252)))
 (= (+ (+ (+ ?x62440 ?x61255) ?x61258) ?x61261) 0.0)))))))))))))))))
(assert
 (let ((?x61260 (* 6.0 l_0_17_73)))
 (let ((?x61359 (* ?x61260 l_0_17_82)))
 (let ((?x61257 (* 6.0 l_0_17_72)))
 (let ((?x61357 (* ?x61257 l_0_17_81)))
 (let ((?x61254 (* 6.0 l_0_17_71)))
 (let ((?x61355 (* ?x61254 l_0_17_80)))
 (let ((?x61251 (* 6.0 l_0_17_70)))
 (let ((?x61353 (* ?x61251 l_0_17_79)))
 (let ((?x61245 (* 6.0 l_0_17_52)))
 (let ((?x61348 (* ?x61245 l_0_17_61)))
 (let ((?x61242 (* 6.0 l_0_17_51)))
 (let ((?x61346 (* ?x61242 l_0_17_60)))
 (let ((?x61239 (* 6.0 l_0_17_50)))
 (let ((?x61344 (* ?x61239 l_0_17_59)))
 (let ((?x62458 (+ (- (- (- (* (* (- 6.0) l_0_17_49) l_0_17_58) ?x61344) ?x61346) ?x61348) ?x61353)))
 (= (+ (+ (+ ?x62458 ?x61355) ?x61357) ?x61359) 0.0)))))))))))))))))
(assert
 (let ((?x61485 (* l_0_17_78 l_0_17_78)))
 (let ((?x61486 (* 3.0 ?x61485)))
 (let ((?x61482 (* l_0_17_77 l_0_17_77)))
 (let ((?x61483 (* 3.0 ?x61482)))
 (let ((?x61479 (* l_0_17_76 l_0_17_76)))
 (let ((?x61480 (* 3.0 ?x61479)))
 (let ((?x61476 (* l_0_17_75 l_0_17_75)))
 (let ((?x61477 (* 3.0 ?x61476)))
 (let ((?x61473 (* l_0_17_74 l_0_17_74)))
 (let ((?x61474 (* 3.0 ?x61473)))
 (let ((?x61471 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x61468 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x61465 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x61462 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x62471 (- (- (- (- (* (* (- 3.0) l_0_17_53) l_0_17_53) ?x61462) ?x61465) ?x61468) ?x61471)))
 (= (+ (+ (+ (+ (+ ?x62471 ?x61474) ?x61477) ?x61480) ?x61483) ?x61486) 0.0)))))))))))))))))
(assert
 (let ((?x61603 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x61600 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x61597 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x61594 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x61591 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x61588 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x61585 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x61582 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x61579 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x62483 (- (- (- (- (* (* (- 6.0) l_0_17_53) l_0_17_58) ?x61579) ?x61582) ?x61585) ?x61588)))
 (= (+ (+ (+ (+ (+ ?x62483 ?x61591) ?x61594) ?x61597) ?x61600) ?x61603) 0.0))))))))))))
(assert
 (let ((?x58963 (* l_0_17_84 l_0_17_84)))
 (let ((?x61733 (* 3.0 ?x58963)))
 (let ((?x58960 (* l_0_17_83 l_0_17_83)))
 (let ((?x61731 (* 3.0 ?x58960)))
 (let ((?x58957 (* l_0_17_82 l_0_17_82)))
 (let ((?x61729 (* 3.0 ?x58957)))
 (let ((?x58954 (* l_0_17_81 l_0_17_81)))
 (let ((?x61727 (* 3.0 ?x58954)))
 (let ((?x58951 (* l_0_17_80 l_0_17_80)))
 (let ((?x61725 (* 3.0 ?x58951)))
 (let ((?x58948 (* l_0_17_79 l_0_17_79)))
 (let ((?x61723 (* 3.0 ?x58948)))
 (let ((?x61721 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x61718 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x61715 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x61712 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x61709 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x62492 (- (- (- (- (* (* (- 3.0) l_0_17_58) l_0_17_58) ?x61709) ?x61712) ?x61715) ?x61718)))
 (let ((?x62499 (+ (+ (+ (+ (+ (+ (- ?x62492 ?x61721) ?x61723) ?x61725) ?x61727) ?x61729) ?x61731) ?x61733)))
 (= ?x62499 0.0)))))))))))))))))))))
(assert
 (let ((?x59155 (* l_0_17_73 l_0_17_73)))
 (let ((?x59152 (* l_0_17_72 l_0_17_72)))
 (let ((?x59149 (* l_0_17_71 l_0_17_71)))
 (let ((?x59146 (* l_0_17_70 l_0_17_70)))
 (let ((?x59205 (* l_0_17_52 l_0_17_52)))
 (let ((?x48553 (* l_0_17_51 l_0_17_51)))
 (let ((?x52262 (+ (+ (+ (* l_0_17_49 l_0_17_49) (* l_0_17_50 l_0_17_50)) ?x48553) ?x59205)))
 (= (- (- (- (- ?x52262 ?x59146) ?x59149) ?x59152) ?x59155) 0.0)))))))))
(assert
 (let ((?x58455 (* 2.0 l_0_17_73)))
 (let ((?x61937 (* ?x58455 l_0_17_77)))
 (let ((?x58452 (* 2.0 l_0_17_72)))
 (let ((?x61935 (* ?x58452 l_0_17_76)))
 (let ((?x58449 (* 2.0 l_0_17_71)))
 (let ((?x61933 (* ?x58449 l_0_17_75)))
 (let ((?x58446 (* 2.0 l_0_17_70)))
 (let ((?x61931 (* ?x58446 l_0_17_74)))
 (let ((?x58437 (* 2.0 l_0_17_52)))
 (let ((?x61927 (* ?x58437 l_0_17_56)))
 (let ((?x58434 (* 2.0 l_0_17_51)))
 (let ((?x61925 (* ?x58434 l_0_17_55)))
 (let ((?x58431 (* 2.0 l_0_17_50)))
 (let ((?x61923 (* ?x58431 l_0_17_54)))
 (let ((?x58428 (* 2.0 l_0_17_49)))
 (let ((?x61921 (* ?x58428 l_0_17_53)))
 (let ((?x61175 (* l_0_17_136 l_0_17_136)))
 (let ((?x61173 (* l_0_17_135 l_0_17_135)))
 (let ((?x40866 (- (- (* (- l_0_17_133) l_0_17_133) (* l_0_17_134 l_0_17_134)) ?x61173)))
 (let ((?x62510 (- (- (+ (+ (+ (+ (- ?x40866 ?x61175) ?x61921) ?x61923) ?x61925) ?x61927) ?x61931) ?x61933)))
 (= (- (- ?x62510 ?x61935) ?x61937) 0.0))))))))))))))))))))))
(assert
 (let ((?x62551 (* l_0_17_94 l_0_17_94)))
 (let ((?x62549 (* l_0_17_93 l_0_17_93)))
 (let ((?x62547 (* l_0_17_92 l_0_17_92)))
 (let ((?x62545 (* l_0_17_91 l_0_17_91)))
 (let ((?x58455 (* 2.0 l_0_17_73)))
 (let ((?x58456 (* ?x58455 l_0_17_82)))
 (let ((?x58452 (* 2.0 l_0_17_72)))
 (let ((?x58453 (* ?x58452 l_0_17_81)))
 (let ((?x58449 (* 2.0 l_0_17_71)))
 (let ((?x58450 (* ?x58449 l_0_17_80)))
 (let ((?x58446 (* 2.0 l_0_17_70)))
 (let ((?x58447 (* ?x58446 l_0_17_79)))
 (let ((?x58437 (* 2.0 l_0_17_52)))
 (let ((?x58438 (* ?x58437 l_0_17_61)))
 (let ((?x58434 (* 2.0 l_0_17_51)))
 (let ((?x58435 (* ?x58434 l_0_17_60)))
 (let ((?x58431 (* 2.0 l_0_17_50)))
 (let ((?x58432 (* ?x58431 l_0_17_59)))
 (let ((?x58428 (* 2.0 l_0_17_49)))
 (let ((?x58429 (* ?x58428 l_0_17_58)))
 (let ((?x62535 (* l_0_17_178 l_0_17_178)))
 (let ((?x62533 (* l_0_17_177 l_0_17_177)))
 (let ((?x62531 (* l_0_17_176 l_0_17_176)))
 (let ((?x62529 (* l_0_17_175 l_0_17_175)))
 (let ((?x62527 (* l_0_17_157 l_0_17_157)))
 (let ((?x62525 (* l_0_17_156 l_0_17_156)))
 (let ((?x62523 (* l_0_17_155 l_0_17_155)))
 (let ((?x62521 (* l_0_17_154 l_0_17_154)))
 (let ((?x62519 (* l_0_17_115 l_0_17_115)))
 (let ((?x62517 (* l_0_17_114 l_0_17_114)))
 (let ((?x62518 (+ (+ (* l_0_17_112 l_0_17_112) (* l_0_17_113 l_0_17_113)) ?x62517)))
 (let ((?x62532 (+ (+ (- (- (- (- (+ ?x62518 ?x62519) ?x62521) ?x62523) ?x62525) ?x62527) ?x62529) ?x62531)))
 (let ((?x62541 (- (+ (+ (+ (+ (+ (+ ?x62532 ?x62533) ?x62535) ?x58429) ?x58432) ?x58435) ?x58438) ?x58447)))
 (let ((?x62552 (- (- (- (- (- (- (- ?x62541 ?x58450) ?x58453) ?x58456) ?x62545) ?x62547) ?x62549) ?x62551)))
 (= ?x62552 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61485 (* l_0_17_78 l_0_17_78)))
 (let ((?x61482 (* l_0_17_77 l_0_17_77)))
 (let ((?x61479 (* l_0_17_76 l_0_17_76)))
 (let ((?x61476 (* l_0_17_75 l_0_17_75)))
 (let ((?x61473 (* l_0_17_74 l_0_17_74)))
 (let ((?x18252 (* l_0_17_57 l_0_17_57)))
 (let ((?x50692 (* l_0_17_56 l_0_17_56)))
 (let ((?x39925 (* l_0_17_55 l_0_17_55)))
 (let ((?x50683 (* l_0_17_54 l_0_17_54)))
 (let ((?x50679 (* l_0_17_53 l_0_17_53)))
 (let ((?x61222 (* 2.0 l_0_17_136)))
 (let ((?x61223 (* ?x61222 l_0_17_140)))
 (let ((?x61219 (* 2.0 l_0_17_135)))
 (let ((?x61220 (* ?x61219 l_0_17_139)))
 (let ((?x50162 (* 2.0 l_0_17_134)))
 (let ((?x50165 (* ?x50162 l_0_17_138)))
 (let ((?x62569 (+ (- (- (- (* (* (- 2.0) l_0_17_133) l_0_17_137) ?x50165) ?x61220) ?x61223) ?x50679)))
 (let ((?x62576 (- (- (- (+ (+ (+ (+ ?x62569 ?x50683) ?x39925) ?x50692) ?x18252) ?x61473) ?x61476) ?x61479)))
 (= (- (- ?x62576 ?x61482) ?x61485) 0.0))))))))))))))))))))
(assert
 (let ((?x62625 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x62622 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x62619 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x62616 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x62231 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x62228 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x62225 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x62222 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x62219 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x62216 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x62213 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x62210 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x62207 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x62204 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x62602 (* 2.0 l_0_17_178)))
 (let ((?x62603 (* ?x62602 l_0_17_182)))
 (let ((?x62599 (* 2.0 l_0_17_177)))
 (let ((?x62600 (* ?x62599 l_0_17_181)))
 (let ((?x62596 (* 2.0 l_0_17_176)))
 (let ((?x62597 (* ?x62596 l_0_17_180)))
 (let ((?x62593 (* 2.0 l_0_17_175)))
 (let ((?x62594 (* ?x62593 l_0_17_179)))
 (let ((?x62590 (* 2.0 l_0_17_157)))
 (let ((?x62591 (* ?x62590 l_0_17_161)))
 (let ((?x62587 (* 2.0 l_0_17_156)))
 (let ((?x62588 (* ?x62587 l_0_17_160)))
 (let ((?x62584 (* 2.0 l_0_17_155)))
 (let ((?x62585 (* ?x62584 l_0_17_159)))
 (let ((?x41075 (* 2.0 l_0_17_154)))
 (let ((?x62582 (* ?x41075 l_0_17_158)))
 (let ((?x61222 (* 2.0 l_0_17_136)))
 (let ((?x61312 (* ?x61222 l_0_17_145)))
 (let ((?x61219 (* 2.0 l_0_17_135)))
 (let ((?x61310 (* ?x61219 l_0_17_144)))
 (let ((?x50162 (* 2.0 l_0_17_134)))
 (let ((?x61308 (* ?x50162 l_0_17_143)))
 (let ((?x50161 (* 2.0 l_0_17_133)))
 (let ((?x61306 (* ?x50161 l_0_17_142)))
 (let ((?x40960 (* 2.0 l_0_17_115)))
 (let ((?x19269 (* ?x40960 l_0_17_119)))
 (let ((?x20067 (* 2.0 l_0_17_114)))
 (let ((?x20070 (* ?x20067 l_0_17_118)))
 (let ((?x40820 (* 2.0 l_0_17_113)))
 (let ((?x20062 (* ?x40820 l_0_17_117)))
 (let ((?x40987 (- (+ (+ (+ (* (* 2.0 l_0_17_112) l_0_17_116) ?x20062) ?x20070) ?x19269) ?x61306)))
 (let ((?x62592 (- (- (- (- (- (- (- ?x40987 ?x61308) ?x61310) ?x61312) ?x62582) ?x62585) ?x62588) ?x62591)))
 (let ((?x62607 (+ (+ (+ (+ (+ (+ (+ ?x62592 ?x62594) ?x62597) ?x62600) ?x62603) ?x62204) ?x62207) ?x62210)))
 (let ((?x62614 (- (- (- (- (- (+ (+ ?x62607 ?x62213) ?x62216) ?x62219) ?x62222) ?x62225) ?x62228) ?x62231)))
 (= (- (- (- (- ?x62614 ?x62616) ?x62619) ?x62622) ?x62625) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58963 (* l_0_17_84 l_0_17_84)))
 (let ((?x58960 (* l_0_17_83 l_0_17_83)))
 (let ((?x58957 (* l_0_17_82 l_0_17_82)))
 (let ((?x58954 (* l_0_17_81 l_0_17_81)))
 (let ((?x58951 (* l_0_17_80 l_0_17_80)))
 (let ((?x58948 (* l_0_17_79 l_0_17_79)))
 (let ((?x38144 (* l_0_17_63 l_0_17_63)))
 (let ((?x48449 (* l_0_17_62 l_0_17_62)))
 (let ((?x27801 (* l_0_17_61 l_0_17_61)))
 (let ((?x59063 (* l_0_17_60 l_0_17_60)))
 (let ((?x59059 (* l_0_17_59 l_0_17_59)))
 (let ((?x27793 (* l_0_17_58 l_0_17_58)))
 (let ((?x62602 (* 2.0 l_0_17_178)))
 (let ((?x62690 (* ?x62602 l_0_17_187)))
 (let ((?x62599 (* 2.0 l_0_17_177)))
 (let ((?x62688 (* ?x62599 l_0_17_186)))
 (let ((?x62596 (* 2.0 l_0_17_176)))
 (let ((?x62686 (* ?x62596 l_0_17_185)))
 (let ((?x62593 (* 2.0 l_0_17_175)))
 (let ((?x62684 (* ?x62593 l_0_17_184)))
 (let ((?x62590 (* 2.0 l_0_17_157)))
 (let ((?x62682 (* ?x62590 l_0_17_166)))
 (let ((?x62587 (* 2.0 l_0_17_156)))
 (let ((?x62680 (* ?x62587 l_0_17_165)))
 (let ((?x62584 (* 2.0 l_0_17_155)))
 (let ((?x62678 (* ?x62584 l_0_17_164)))
 (let ((?x41075 (* 2.0 l_0_17_154)))
 (let ((?x62676 (* ?x41075 l_0_17_163)))
 (let ((?x40960 (* 2.0 l_0_17_115)))
 (let ((?x62674 (* ?x40960 l_0_17_124)))
 (let ((?x20067 (* 2.0 l_0_17_114)))
 (let ((?x62672 (* ?x20067 l_0_17_123)))
 (let ((?x40820 (* 2.0 l_0_17_113)))
 (let ((?x62670 (* ?x40820 l_0_17_122)))
 (let ((?x41162 (* 2.0 l_0_17_112)))
 (let ((?x62668 (* ?x41162 l_0_17_121)))
 (let ((?x62665 (* 2.0 l_0_17_103)))
 (let ((?x62666 (* ?x62665 l_0_17_94)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x62663 (* ?x50910 l_0_17_93)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x62661 (* ?x58819 l_0_17_92)))
 (let ((?x62669 (+ (- (- (- (* (* (- 2.0) l_0_17_100) l_0_17_91) ?x62661) ?x62663) ?x62666) ?x62668)))
 (let ((?x62683 (- (- (- (- (+ (+ (+ ?x62669 ?x62670) ?x62672) ?x62674) ?x62676) ?x62678) ?x62680) ?x62682)))
 (let ((?x62694 (+ (+ (+ (+ (+ (+ (+ ?x62683 ?x62684) ?x62686) ?x62688) ?x62690) ?x27793) ?x59059) ?x59063)))
 (let ((?x62701 (- (- (- (- (+ (+ (+ ?x62694 ?x27801) ?x48449) ?x38144) ?x58948) ?x58951) ?x58954) ?x58957)))
 (= (- (- ?x62701 ?x58960) ?x58963) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62796 (* l_0_17_99 l_0_17_99)))
 (let ((?x62794 (* l_0_17_98 l_0_17_98)))
 (let ((?x62792 (* l_0_17_97 l_0_17_97)))
 (let ((?x62790 (* l_0_17_96 l_0_17_96)))
 (let ((?x62788 (* l_0_17_95 l_0_17_95)))
 (let ((?x62786 (* l_0_17_183 l_0_17_183)))
 (let ((?x62784 (* l_0_17_182 l_0_17_182)))
 (let ((?x62782 (* l_0_17_181 l_0_17_181)))
 (let ((?x62780 (* l_0_17_180 l_0_17_180)))
 (let ((?x62778 (* l_0_17_179 l_0_17_179)))
 (let ((?x62776 (* l_0_17_162 l_0_17_162)))
 (let ((?x62774 (* l_0_17_161 l_0_17_161)))
 (let ((?x62772 (* l_0_17_160 l_0_17_160)))
 (let ((?x62770 (* l_0_17_159 l_0_17_159)))
 (let ((?x62768 (* l_0_17_158 l_0_17_158)))
 (let ((?x61543 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61540 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61534 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61531 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61528 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x62761 (* l_0_17_120 l_0_17_120)))
 (let ((?x62759 (* l_0_17_119 l_0_17_119)))
 (let ((?x62757 (* l_0_17_118 l_0_17_118)))
 (let ((?x62758 (+ (+ (* l_0_17_116 l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x62757)))
 (let ((?x62767 (- (- (- (- (- (+ (+ ?x62758 ?x62759) ?x62761) ?x61528) ?x61531) ?x61534) ?x61540) ?x61543)))
 (let ((?x62781 (+ (+ (- (- (- (- (- ?x62767 ?x62768) ?x62770) ?x62772) ?x62774) ?x62776) ?x62778) ?x62780)))
 (let ((?x62795 (- (- (- (- (+ (+ (+ ?x62781 ?x62782) ?x62784) ?x62786) ?x62788) ?x62790) ?x62792) ?x62794)))
 (= (- ?x62795 ?x62796) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x62882 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62879 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62876 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62873 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62870 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62867 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62864 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62861 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62858 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62855 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x61679 (* l_0_17_147 l_0_17_147)))
 (let ((?x61677 (* l_0_17_146 l_0_17_146)))
 (let ((?x61675 (* l_0_17_145 l_0_17_145)))
 (let ((?x61673 (* l_0_17_144 l_0_17_144)))
 (let ((?x61671 (* l_0_17_143 l_0_17_143)))
 (let ((?x61669 (* l_0_17_142 l_0_17_142)))
 (let ((?x62846 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x62843 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62840 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62837 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x62834 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x62831 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x62665 (* 2.0 l_0_17_103)))
 (let ((?x62828 (* ?x62665 l_0_17_98)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x62826 (* ?x50910 l_0_17_97)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x62824 (* ?x58819 l_0_17_96)))
 (let ((?x62832 (- (- (- (- (* (* (- 2.0) l_0_17_100) l_0_17_95) ?x62824) ?x62826) ?x62828) ?x62831)))
 (let ((?x62849 (- (- (+ (+ (+ (+ (+ ?x62832 ?x62834) ?x62837) ?x62840) ?x62843) ?x62846) ?x61669) ?x61671)))
 (let ((?x62862 (- (- (- (- (- (- (- ?x62849 ?x61673) ?x61675) ?x61677) ?x61679) ?x62855) ?x62858) ?x62861)))
 (let ((?x62883 (+ (+ (+ (+ (+ (- (- ?x62862 ?x62864) ?x62867) ?x62870) ?x62873) ?x62876) ?x62879) ?x62882)))
 (= ?x62883 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62980 (* l_0_17_189 l_0_17_189)))
 (let ((?x62978 (* l_0_17_188 l_0_17_188)))
 (let ((?x62976 (* l_0_17_187 l_0_17_187)))
 (let ((?x62974 (* l_0_17_186 l_0_17_186)))
 (let ((?x62972 (* l_0_17_185 l_0_17_185)))
 (let ((?x62970 (* l_0_17_184 l_0_17_184)))
 (let ((?x62968 (* l_0_17_168 l_0_17_168)))
 (let ((?x62966 (* l_0_17_167 l_0_17_167)))
 (let ((?x62964 (* l_0_17_166 l_0_17_166)))
 (let ((?x62962 (* l_0_17_165 l_0_17_165)))
 (let ((?x62960 (* l_0_17_164 l_0_17_164)))
 (let ((?x62958 (* l_0_17_163 l_0_17_163)))
 (let ((?x62956 (* l_0_17_126 l_0_17_126)))
 (let ((?x62954 (* l_0_17_125 l_0_17_125)))
 (let ((?x62952 (* l_0_17_124 l_0_17_124)))
 (let ((?x62950 (* l_0_17_123 l_0_17_123)))
 (let ((?x62948 (* l_0_17_122 l_0_17_122)))
 (let ((?x62946 (* l_0_17_121 l_0_17_121)))
 (let ((?x62944 (* l_0_17_105 l_0_17_105)))
 (let ((?x62942 (* l_0_17_104 l_0_17_104)))
 (let ((?x62940 (* l_0_17_103 l_0_17_103)))
 (let ((?x62938 (* l_0_17_102 l_0_17_102)))
 (let ((?x62939 (- (- (* (- l_0_17_100) l_0_17_100) (* l_0_17_101 l_0_17_101)) ?x62938)))
 (let ((?x62953 (+ (+ (+ (+ (- (- (- ?x62939 ?x62940) ?x62942) ?x62944) ?x62946) ?x62948) ?x62950) ?x62952)))
 (let ((?x62967 (- (- (- (- (- (+ (+ ?x62953 ?x62954) ?x62956) ?x62958) ?x62960) ?x62962) ?x62964) ?x62966)))
 (let ((?x62981 (+ (+ (+ (+ (+ (+ (- ?x62967 ?x62968) ?x62970) ?x62972) ?x62974) ?x62976) ?x62978) ?x62980)))
 (= ?x62981 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x59656 (* l_0_17_85 l_0_17_85)))
 (let ((?x59652 (* l_0_17_169 l_0_17_169)))
 (let ((?x63026 (- (+ (* (- l_0_17_106) l_0_17_106) (* l_0_17_148 l_0_17_148)) ?x59652)))
 (= (+ ?x63026 ?x59656) 0.0)))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60262 (* ?x60031 l_0_17_88)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60244 (* ?x60005 l_0_17_172)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60240 (* ?x59999 l_0_17_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_109) ?x60240) ?x60244) ?x60262) 0.0))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60378 (* ?x60031 l_0_17_91)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60362 (* ?x60005 l_0_17_175)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60358 (* ?x59999 l_0_17_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_112) ?x60358) ?x60362) ?x60378) 0.0))))))))
(assert
 (let ((?x60031 (* 2.0 l_0_17_85)))
 (let ((?x60473 (* ?x60031 l_0_17_95)))
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60456 (* ?x60005 l_0_17_179)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60451 (* ?x59999 l_0_17_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_116) ?x60451) ?x60456) ?x60473) 0.0))))))))
(assert
 (let ((?x60005 (* 2.0 l_0_17_169)))
 (let ((?x60521 (* ?x60005 l_0_17_184)))
 (let ((?x59999 (* 2.0 l_0_17_148)))
 (let ((?x60518 (* ?x59999 l_0_17_163)))
 (let ((?x59990 (* 2.0 l_0_17_106)))
 (let ((?x60516 (* ?x59990 l_0_17_121)))
 (= (- (+ (- (* (* 2.0 l_0_17_100) l_0_17_85) ?x60516) ?x60518) ?x60521) 0.0))))))))
(assert
 (let ((?x61127 (* l_0_17_90 l_0_17_90)))
 (let ((?x61125 (* l_0_17_89 l_0_17_89)))
 (let ((?x61123 (* l_0_17_88 l_0_17_88)))
 (let ((?x61101 (* l_0_17_174 l_0_17_174)))
 (let ((?x61099 (* l_0_17_173 l_0_17_173)))
 (let ((?x61097 (* l_0_17_172 l_0_17_172)))
 (let ((?x61093 (* l_0_17_153 l_0_17_153)))
 (let ((?x61091 (* l_0_17_152 l_0_17_152)))
 (let ((?x61089 (* l_0_17_151 l_0_17_151)))
 (let ((?x61081 (* l_0_17_111 l_0_17_111)))
 (let ((?x63068 (- (- (* (- l_0_17_109) l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x61081)))
 (let ((?x63075 (+ (- (- (- (+ (+ (+ ?x63068 ?x61089) ?x61091) ?x61093) ?x61097) ?x61099) ?x61101) ?x61123)))
 (= (+ (+ ?x63075 ?x61125) ?x61127) 0.0))))))))))))))
(assert
 (let ((?x61367 (* 2.0 l_0_17_90)))
 (let ((?x61368 (* ?x61367 l_0_17_93)))
 (let ((?x61364 (* 2.0 l_0_17_89)))
 (let ((?x61365 (* ?x61364 l_0_17_92)))
 (let ((?x61361 (* 2.0 l_0_17_88)))
 (let ((?x61362 (* ?x61361 l_0_17_91)))
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61332 (* ?x61331 l_0_17_177)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61329 (* ?x61328 l_0_17_176)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61326 (* ?x61325 l_0_17_175)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61321 (* ?x61320 l_0_17_156)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61318 (* ?x61317 l_0_17_155)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61315 (* ?x61314 l_0_17_154)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61304 (* ?x61303 l_0_17_114)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61287 (* ?x61286 l_0_17_113)))
 (let ((?x52688 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_112) ?x61287) ?x61304) ?x61315) ?x61318)))
 (let ((?x41817 (+ (+ (+ (- (- (- (+ ?x52688 ?x61321) ?x61326) ?x61329) ?x61332) ?x61362) ?x61365) ?x61368)))
 (= ?x41817 0.0))))))))))))))))))))))))))
(assert
 (let ((?x61367 (* 2.0 l_0_17_90)))
 (let ((?x61609 (* ?x61367 l_0_17_97)))
 (let ((?x61364 (* 2.0 l_0_17_89)))
 (let ((?x61607 (* ?x61364 l_0_17_96)))
 (let ((?x61361 (* 2.0 l_0_17_88)))
 (let ((?x61605 (* ?x61361 l_0_17_95)))
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61558 (* ?x61331 l_0_17_181)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61556 (* ?x61328 l_0_17_180)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61554 (* ?x61325 l_0_17_179)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61552 (* ?x61320 l_0_17_160)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61550 (* ?x61317 l_0_17_159)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61548 (* ?x61314 l_0_17_158)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61518 (* ?x61303 l_0_17_118)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61516 (* ?x61286 l_0_17_117)))
 (let ((?x63091 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_116) ?x61516) ?x61518) ?x61548) ?x61550)))
 (let ((?x63098 (+ (+ (+ (- (- (- (+ ?x63091 ?x61552) ?x61554) ?x61556) ?x61558) ?x61605) ?x61607) ?x61609)))
 (= ?x63098 0.0))))))))))))))))))))))))))
(assert
 (let ((?x61331 (* 2.0 l_0_17_174)))
 (let ((?x61693 (* ?x61331 l_0_17_186)))
 (let ((?x61328 (* 2.0 l_0_17_173)))
 (let ((?x61691 (* ?x61328 l_0_17_185)))
 (let ((?x61325 (* 2.0 l_0_17_172)))
 (let ((?x61689 (* ?x61325 l_0_17_184)))
 (let ((?x61320 (* 2.0 l_0_17_153)))
 (let ((?x61685 (* ?x61320 l_0_17_165)))
 (let ((?x61317 (* 2.0 l_0_17_152)))
 (let ((?x61683 (* ?x61317 l_0_17_164)))
 (let ((?x61314 (* 2.0 l_0_17_151)))
 (let ((?x61681 (* ?x61314 l_0_17_163)))
 (let ((?x61303 (* 2.0 l_0_17_111)))
 (let ((?x61667 (* ?x61303 l_0_17_123)))
 (let ((?x61286 (* 2.0 l_0_17_110)))
 (let ((?x61665 (* ?x61286 l_0_17_122)))
 (let ((?x29740 (* 2.0 l_0_17_109)))
 (let ((?x40020 (* ?x29740 l_0_17_121)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x50912 (* ?x50910 l_0_17_90)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x50915 (* ?x58819 l_0_17_89)))
 (let ((?x51045 (- (- (+ (+ (* (* 2.0 l_0_17_100) l_0_17_88) ?x50915) ?x50912) ?x40020) ?x61665)))
 (let ((?x63109 (- (- (- (+ (+ (+ (- ?x51045 ?x61667) ?x61681) ?x61683) ?x61685) ?x61689) ?x61691) ?x61693)))
 (= ?x63109 0.0))))))))))))))))))))))))))
(assert
 (let ((?x62551 (* l_0_17_94 l_0_17_94)))
 (let ((?x62549 (* l_0_17_93 l_0_17_93)))
 (let ((?x62547 (* l_0_17_92 l_0_17_92)))
 (let ((?x62545 (* l_0_17_91 l_0_17_91)))
 (let ((?x62535 (* l_0_17_178 l_0_17_178)))
 (let ((?x62533 (* l_0_17_177 l_0_17_177)))
 (let ((?x62531 (* l_0_17_176 l_0_17_176)))
 (let ((?x62529 (* l_0_17_175 l_0_17_175)))
 (let ((?x62527 (* l_0_17_157 l_0_17_157)))
 (let ((?x62525 (* l_0_17_156 l_0_17_156)))
 (let ((?x62523 (* l_0_17_155 l_0_17_155)))
 (let ((?x62521 (* l_0_17_154 l_0_17_154)))
 (let ((?x62519 (* l_0_17_115 l_0_17_115)))
 (let ((?x62517 (* l_0_17_114 l_0_17_114)))
 (let ((?x63113 (- (- (* (- l_0_17_112) l_0_17_112) (* l_0_17_113 l_0_17_113)) ?x62517)))
 (let ((?x63120 (- (- (+ (+ (+ (+ (- ?x63113 ?x62519) ?x62521) ?x62523) ?x62525) ?x62527) ?x62529) ?x62531)))
 (= (+ (+ (+ (+ (- (- ?x63120 ?x62533) ?x62535) ?x62545) ?x62547) ?x62549) ?x62551) 0.0))))))))))))))))))
(assert
 (let ((?x62625 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x62622 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x62619 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x62616 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x62602 (* 2.0 l_0_17_178)))
 (let ((?x62603 (* ?x62602 l_0_17_182)))
 (let ((?x62599 (* 2.0 l_0_17_177)))
 (let ((?x62600 (* ?x62599 l_0_17_181)))
 (let ((?x62596 (* 2.0 l_0_17_176)))
 (let ((?x62597 (* ?x62596 l_0_17_180)))
 (let ((?x62593 (* 2.0 l_0_17_175)))
 (let ((?x62594 (* ?x62593 l_0_17_179)))
 (let ((?x62590 (* 2.0 l_0_17_157)))
 (let ((?x62591 (* ?x62590 l_0_17_161)))
 (let ((?x62587 (* 2.0 l_0_17_156)))
 (let ((?x62588 (* ?x62587 l_0_17_160)))
 (let ((?x62584 (* 2.0 l_0_17_155)))
 (let ((?x62585 (* ?x62584 l_0_17_159)))
 (let ((?x41075 (* 2.0 l_0_17_154)))
 (let ((?x62582 (* ?x41075 l_0_17_158)))
 (let ((?x40960 (* 2.0 l_0_17_115)))
 (let ((?x19269 (* ?x40960 l_0_17_119)))
 (let ((?x20067 (* 2.0 l_0_17_114)))
 (let ((?x20070 (* ?x20067 l_0_17_118)))
 (let ((?x40820 (* 2.0 l_0_17_113)))
 (let ((?x20062 (* ?x40820 l_0_17_117)))
 (let ((?x63140 (+ (- (- (- (* (* (- 2.0) l_0_17_112) l_0_17_116) ?x20062) ?x20070) ?x19269) ?x62582)))
 (let ((?x63147 (- (- (- (- (+ (+ (+ ?x63140 ?x62585) ?x62588) ?x62591) ?x62594) ?x62597) ?x62600) ?x62603)))
 (= (+ (+ (+ (+ ?x63147 ?x62616) ?x62619) ?x62622) ?x62625) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x62602 (* 2.0 l_0_17_178)))
 (let ((?x62690 (* ?x62602 l_0_17_187)))
 (let ((?x62599 (* 2.0 l_0_17_177)))
 (let ((?x62688 (* ?x62599 l_0_17_186)))
 (let ((?x62596 (* 2.0 l_0_17_176)))
 (let ((?x62686 (* ?x62596 l_0_17_185)))
 (let ((?x62593 (* 2.0 l_0_17_175)))
 (let ((?x62684 (* ?x62593 l_0_17_184)))
 (let ((?x62590 (* 2.0 l_0_17_157)))
 (let ((?x62682 (* ?x62590 l_0_17_166)))
 (let ((?x62587 (* 2.0 l_0_17_156)))
 (let ((?x62680 (* ?x62587 l_0_17_165)))
 (let ((?x62584 (* 2.0 l_0_17_155)))
 (let ((?x62678 (* ?x62584 l_0_17_164)))
 (let ((?x41075 (* 2.0 l_0_17_154)))
 (let ((?x62676 (* ?x41075 l_0_17_163)))
 (let ((?x40960 (* 2.0 l_0_17_115)))
 (let ((?x62674 (* ?x40960 l_0_17_124)))
 (let ((?x20067 (* 2.0 l_0_17_114)))
 (let ((?x62672 (* ?x20067 l_0_17_123)))
 (let ((?x40820 (* 2.0 l_0_17_113)))
 (let ((?x62670 (* ?x40820 l_0_17_122)))
 (let ((?x41162 (* 2.0 l_0_17_112)))
 (let ((?x62668 (* ?x41162 l_0_17_121)))
 (let ((?x62665 (* 2.0 l_0_17_103)))
 (let ((?x62666 (* ?x62665 l_0_17_94)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x62663 (* ?x50910 l_0_17_93)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x62661 (* ?x58819 l_0_17_92)))
 (let ((?x63162 (- (+ (+ (+ (* (* 2.0 l_0_17_100) l_0_17_91) ?x62661) ?x62663) ?x62666) ?x62668)))
 (let ((?x63169 (+ (+ (+ (+ (- (- (- ?x63162 ?x62670) ?x62672) ?x62674) ?x62676) ?x62678) ?x62680) ?x62682)))
 (= (- (- (- (- ?x63169 ?x62684) ?x62686) ?x62688) ?x62690) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62796 (* l_0_17_99 l_0_17_99)))
 (let ((?x62794 (* l_0_17_98 l_0_17_98)))
 (let ((?x62792 (* l_0_17_97 l_0_17_97)))
 (let ((?x62790 (* l_0_17_96 l_0_17_96)))
 (let ((?x62788 (* l_0_17_95 l_0_17_95)))
 (let ((?x62786 (* l_0_17_183 l_0_17_183)))
 (let ((?x62784 (* l_0_17_182 l_0_17_182)))
 (let ((?x62782 (* l_0_17_181 l_0_17_181)))
 (let ((?x62780 (* l_0_17_180 l_0_17_180)))
 (let ((?x62778 (* l_0_17_179 l_0_17_179)))
 (let ((?x62776 (* l_0_17_162 l_0_17_162)))
 (let ((?x62774 (* l_0_17_161 l_0_17_161)))
 (let ((?x62772 (* l_0_17_160 l_0_17_160)))
 (let ((?x62770 (* l_0_17_159 l_0_17_159)))
 (let ((?x62768 (* l_0_17_158 l_0_17_158)))
 (let ((?x62761 (* l_0_17_120 l_0_17_120)))
 (let ((?x62759 (* l_0_17_119 l_0_17_119)))
 (let ((?x62757 (* l_0_17_118 l_0_17_118)))
 (let ((?x63183 (- (- (* (- l_0_17_116) l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x62757)))
 (let ((?x63190 (+ (+ (+ (+ (+ (- (- ?x63183 ?x62759) ?x62761) ?x62768) ?x62770) ?x62772) ?x62774) ?x62776)))
 (let ((?x63197 (+ (+ (- (- (- (- (- ?x63190 ?x62778) ?x62780) ?x62782) ?x62784) ?x62786) ?x62788) ?x62790)))
 (= (+ (+ (+ ?x63197 ?x62792) ?x62794) ?x62796) 0.0)))))))))))))))))))))))
(assert
 (let ((?x62882 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62879 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62876 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62873 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62870 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62867 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62864 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62861 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62858 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62855 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x62846 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x62843 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62840 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62837 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x62834 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x62831 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x62665 (* 2.0 l_0_17_103)))
 (let ((?x62828 (* ?x62665 l_0_17_98)))
 (let ((?x50910 (* 2.0 l_0_17_102)))
 (let ((?x62826 (* ?x50910 l_0_17_97)))
 (let ((?x58819 (* 2.0 l_0_17_101)))
 (let ((?x62824 (* ?x58819 l_0_17_96)))
 (let ((?x40837 (+ (+ (+ (+ (* (* 2.0 l_0_17_100) l_0_17_95) ?x62824) ?x62826) ?x62828) ?x62831)))
 (let ((?x42208 (+ (+ (- (- (- (- (- ?x40837 ?x62834) ?x62837) ?x62840) ?x62843) ?x62846) ?x62855) ?x62858)))
 (let ((?x63204 (- (- (- (- (+ (+ (+ ?x42208 ?x62861) ?x62864) ?x62867) ?x62870) ?x62873) ?x62876) ?x62879)))
 (= (- ?x63204 ?x62882) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x62980 (* l_0_17_189 l_0_17_189)))
 (let ((?x62978 (* l_0_17_188 l_0_17_188)))
 (let ((?x62976 (* l_0_17_187 l_0_17_187)))
 (let ((?x62974 (* l_0_17_186 l_0_17_186)))
 (let ((?x62972 (* l_0_17_185 l_0_17_185)))
 (let ((?x62970 (* l_0_17_184 l_0_17_184)))
 (let ((?x62968 (* l_0_17_168 l_0_17_168)))
 (let ((?x62966 (* l_0_17_167 l_0_17_167)))
 (let ((?x62964 (* l_0_17_166 l_0_17_166)))
 (let ((?x62962 (* l_0_17_165 l_0_17_165)))
 (let ((?x62960 (* l_0_17_164 l_0_17_164)))
 (let ((?x62958 (* l_0_17_163 l_0_17_163)))
 (let ((?x62956 (* l_0_17_126 l_0_17_126)))
 (let ((?x62954 (* l_0_17_125 l_0_17_125)))
 (let ((?x62952 (* l_0_17_124 l_0_17_124)))
 (let ((?x62950 (* l_0_17_123 l_0_17_123)))
 (let ((?x62948 (* l_0_17_122 l_0_17_122)))
 (let ((?x62946 (* l_0_17_121 l_0_17_121)))
 (let ((?x62944 (* l_0_17_105 l_0_17_105)))
 (let ((?x62942 (* l_0_17_104 l_0_17_104)))
 (let ((?x62940 (* l_0_17_103 l_0_17_103)))
 (let ((?x62938 (* l_0_17_102 l_0_17_102)))
 (let ((?x63213 (+ (+ (* l_0_17_100 l_0_17_100) (* l_0_17_101 l_0_17_101)) ?x62938)))
 (let ((?x63220 (- (- (- (- (+ (+ (+ ?x63213 ?x62940) ?x62942) ?x62944) ?x62946) ?x62948) ?x62950) ?x62952)))
 (let ((?x63227 (+ (+ (+ (+ (+ (- (- ?x63220 ?x62954) ?x62956) ?x62958) ?x62960) ?x62962) ?x62964) ?x62966)))
 (let ((?x63234 (- (- (- (- (- (- (+ ?x63227 ?x62968) ?x62970) ?x62972) ?x62974) ?x62976) ?x62978) ?x62980)))
 (= ?x63234 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x61439 (* l_0_17_141 l_0_17_141)))
 (let ((?x61437 (* l_0_17_140 l_0_17_140)))
 (let ((?x61433 (* l_0_17_139 l_0_17_139)))
 (let ((?x30897 (- (- (* (- l_0_17_137) l_0_17_137) (* l_0_17_138 l_0_17_138)) ?x61433)))
 (= (- (- ?x30897 ?x61437) ?x61439) 0.0))))))
(assert
 (>= l_0_17_1 0.0))
(assert
 (>= l_0_17_3 0.0))
(assert
 (>= l_0_17_6 0.0))
(assert
 (>= l_0_17_10 0.0))
(assert
 (>= l_0_17_15 0.0))
(assert
 (>= l_0_17_21 0.0))
(assert
 (>= l_0_17_22 0.0))
(assert
 (>= l_0_17_24 0.0))
(assert
 (>= l_0_17_27 0.0))
(assert
 (>= l_0_17_31 0.0))
(assert
 (>= l_0_17_36 0.0))
(assert
 (>= l_0_17_42 0.0))
(assert
 (>= l_0_17_43 0.0))
(assert
 (>= l_0_17_45 0.0))
(assert
 (>= l_0_17_48 0.0))
(assert
 (>= l_0_17_52 0.0))
(assert
 (>= l_0_17_57 0.0))
(assert
 (>= l_0_17_63 0.0))
(assert
 (>= l_0_17_64 0.0))
(assert
 (>= l_0_17_66 0.0))
(assert
 (>= l_0_17_69 0.0))
(assert
 (>= l_0_17_73 0.0))
(assert
 (>= l_0_17_78 0.0))
(assert
 (>= l_0_17_84 0.0))
(assert
 (>= l_0_17_85 0.0))
(assert
 (>= l_0_17_87 0.0))
(assert
 (>= l_0_17_90 0.0))
(assert
 (>= l_0_17_94 0.0))
(assert
 (>= l_0_17_99 0.0))
(assert
 (>= l_0_17_105 0.0))
(assert
 (>= l_0_17_106 0.0))
(assert
 (>= l_0_17_108 0.0))
(assert
 (>= l_0_17_111 0.0))
(assert
 (>= l_0_17_115 0.0))
(assert
 (>= l_0_17_120 0.0))
(assert
 (>= l_0_17_126 0.0))
(assert
 (>= l_0_17_127 0.0))
(assert
 (>= l_0_17_129 0.0))
(assert
 (>= l_0_17_132 0.0))
(assert
 (>= l_0_17_136 0.0))
(assert
 (>= l_0_17_141 0.0))
(assert
 (>= l_0_17_147 0.0))
(assert
 (>= l_0_17_148 0.0))
(assert
 (>= l_0_17_150 0.0))
(assert
 (>= l_0_17_153 0.0))
(assert
 (>= l_0_17_157 0.0))
(assert
 (>= l_0_17_162 0.0))
(assert
 (>= l_0_17_168 0.0))
(assert
 (>= l_0_17_169 0.0))
(assert
 (>= l_0_17_171 0.0))
(assert
 (>= l_0_17_174 0.0))
(assert
 (>= l_0_17_178 0.0))
(assert
 (>= l_0_17_183 0.0))
(assert
 (>= l_0_17_189 0.0))
(assert
 (>= l_0_17_190 0.0))
(assert
 (>= l_0_17_192 0.0))
(assert
 (>= l_0_17_195 0.0))
(assert
 (>= l_0_17_199 0.0))
(assert
 (>= l_0_17_204 0.0))
(assert
 (>= l_0_17_210 0.0))
(assert
 (>= l_0_17_211 0.0))
(assert
 (>= l_0_17_213 0.0))
(assert
 (>= l_0_17_216 0.0))
(assert
 (>= l_0_17_220 0.0))
(assert
 (>= l_0_17_225 0.0))
(assert
 (>= l_0_17_231 0.0))
(assert
 (>= l_0_17_232 0.0))
(assert
 (>= l_0_17_234 0.0))
(assert
 (>= l_0_17_237 0.0))
(assert
 (>= l_0_17_241 0.0))
(assert
 (>= l_0_17_246 0.0))
(assert
 (>= l_0_17_252 0.0))
(assert
 (>= l_0_17_253 0.0))
(assert
 (>= l_0_17_255 0.0))
(assert
 (>= l_0_17_258 0.0))
(assert
 (>= l_0_17_262 0.0))
(assert
 (>= l_0_17_267 0.0))
(assert
 (>= l_0_17_273 0.0))
(assert
 (>= l_0_17_274 0.0))
(assert
 (>= l_0_17_276 0.0))
(assert
 (>= l_0_17_279 0.0))
(assert
 (>= l_0_17_283 0.0))
(assert
 (>= l_0_17_288 0.0))
(assert
 (>= l_0_17_294 0.0))
(assert
 (let ((?x63361 (* l_0_18_87 l_0_18_87)))
 (let ((?x63359 (* l_0_18_86 l_0_18_86)))
 (let ((?x63356 (* l_0_18_69 l_0_18_69)))
 (let ((?x63357 (* 3.0 ?x63356)))
 (let ((?x63353 (* l_0_18_68 l_0_18_68)))
 (let ((?x63354 (* 3.0 ?x63353)))
 (let ((?x63350 (* l_0_18_67 l_0_18_67)))
 (let ((?x63351 (* 3.0 ?x63350)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x63348 (* ?x63347 l_0_18_68)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x63345 (* ?x63344 l_0_18_67)))
 (let ((?x63341 (* l_0_18_6 l_0_18_6)))
 (let ((?x63342 (* 6.0 ?x63341)))
 (let ((?x63338 (* l_0_18_5 l_0_18_5)))
 (let ((?x63339 (* 6.0 ?x63338)))
 (let ((?x63336 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x63333 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x63330 (* (* 3.0 l_0_18_46) l_0_18_46)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x63327 (* ?x63326 l_0_18_47)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x63324 (* ?x63323 l_0_18_46)))
 (let ((?x63320 (* l_0_18_4 l_0_18_4)))
 (let ((?x63321 (* 6.0 ?x63320)))
 (let ((?x63318 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x63315 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x63312 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x63309 (* l_0_18_171 l_0_18_171)))
 (let ((?x63307 (* l_0_18_170 l_0_18_170)))
 (let ((?x63305 (* l_0_18_150 l_0_18_150)))
 (let ((?x63303 (* l_0_18_149 l_0_18_149)))
 (let ((?x63301 (* l_0_18_132 l_0_18_132)))
 (let ((?x63299 (* l_0_18_131 l_0_18_131)))
 (let ((?x63297 (* l_0_18_130 l_0_18_130)))
 (let ((?x63298 (+ (- (* (- l_0_18_107) l_0_18_107) (* l_0_18_108 l_0_18_108)) ?x63297)))
 (let ((?x63313 (- (- (- (+ (+ (+ (+ ?x63298 ?x63299) ?x63301) ?x63303) ?x63305) ?x63307) ?x63309) ?x63312)))
 (let ((?x63334 (- (- (- (- (+ (- (- ?x63313 ?x63315) ?x63318) ?x63321) ?x63324) ?x63327) ?x63330) ?x63333)))
 (let ((?x63355 (+ (+ (+ (+ (+ (+ (- ?x63334 ?x63336) ?x63339) ?x63342) ?x63345) ?x63348) ?x63351) ?x63354)))
 (= (+ (+ (+ (+ ?x63355 ?x63357) ?x63359) ?x63361) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63499 (* l_0_18_66 l_0_18_66)))
 (let ((?x63500 (* 3.0 ?x63499)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x63348 (* ?x63347 l_0_18_68)))
 (let ((?x63495 (* l_0_18_65 l_0_18_65)))
 (let ((?x63496 (* 3.0 ?x63495)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x63345 (* ?x63344 l_0_18_67)))
 (let ((?x63341 (* l_0_18_6 l_0_18_6)))
 (let ((?x63342 (* 6.0 ?x63341)))
 (let ((?x63338 (* l_0_18_5 l_0_18_5)))
 (let ((?x63339 (* 6.0 ?x63338)))
 (let ((?x63481 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x63327 (* ?x63326 l_0_18_47)))
 (let ((?x63477 (* (* 3.0 l_0_18_44) l_0_18_44)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x63324 (* ?x63323 l_0_18_46)))
 (let ((?x63320 (* l_0_18_4 l_0_18_4)))
 (let ((?x63321 (* 6.0 ?x63320)))
 (let ((?x63472 (* l_0_18_300 l_0_18_300)))
 (let ((?x63469 (* 12.0 l_0_18_3)))
 (let ((?x63470 (* ?x63469 l_0_18_5)))
 (let ((?x63467 (* l_0_18_299 l_0_18_299)))
 (let ((?x63465 (* l_0_18_298 l_0_18_298)))
 (let ((?x63463 (* l_0_18_279 l_0_18_279)))
 (let ((?x63461 (* l_0_18_278 l_0_18_278)))
 (let ((?x63459 (* l_0_18_277 l_0_18_277)))
 (let ((?x63318 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x63315 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x63455 (* l_0_18_258 l_0_18_258)))
 (let ((?x63453 (* l_0_18_257 l_0_18_257)))
 (let ((?x63451 (* l_0_18_256 l_0_18_256)))
 (let ((?x63312 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x63448 (* ?x63447 l_0_18_26)))
 (let ((?x63445 (* l_0_18_237 l_0_18_237)))
 (let ((?x63443 (* l_0_18_236 l_0_18_236)))
 (let ((?x63441 (* l_0_18_235 l_0_18_235)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x63439 (* ?x63438 l_0_18_25)))
 (let ((?x63436 (* l_0_18_216 l_0_18_216)))
 (let ((?x63434 (* l_0_18_215 l_0_18_215)))
 (let ((?x63432 (* l_0_18_214 l_0_18_214)))
 (let ((?x63429 (* 12.0 l_0_18_2)))
 (let ((?x63430 (* ?x63429 l_0_18_4)))
 (let ((?x63427 (* l_0_18_195 l_0_18_195)))
 (let ((?x63425 (* l_0_18_194 l_0_18_194)))
 (let ((?x63423 (* l_0_18_193 l_0_18_193)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x63421 (* ?x63403 l_0_18_131)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x63402 (* ?x63400 l_0_18_130)))
 (let ((?x63435 (- (- (+ (- (- (- (+ ?x63402 ?x63421) ?x63423) ?x63425) ?x63427) ?x63430) ?x63432) ?x63434)))
 (let ((?x63450 (- (- (- (- (- (- (- ?x63435 ?x63436) ?x63439) ?x63441) ?x63443) ?x63445) ?x63448) ?x63312)))
 (let ((?x63462 (- (- (- (- (- (- (- ?x63450 ?x63451) ?x63453) ?x63455) ?x63315) ?x63318) ?x63459) ?x63461)))
 (let ((?x63475 (- (+ (- (+ (- (- (- ?x63462 ?x63463) ?x63465) ?x63467) ?x63470) ?x63472) ?x63321) ?x63324)))
 (let ((?x63485 (- (- (- (- ?x63475 ?x63477) ?x63327) ?x63481) (* (* 1.0 l_0_18_46) l_0_18_46))))
 (let ((?x63491 (- (- ?x63485 (* (* 1.0 l_0_18_47) l_0_18_47)) (* (* 1.0 l_0_18_48) l_0_18_48))))
 (let ((?x63503 (+ (+ (+ (+ (+ (+ (+ ?x63491 ?x63339) ?x63342) ?x63345) ?x63496) ?x63348) ?x63500) (* 1.0 (* l_0_18_67 l_0_18_67)))))
 (let ((?x63507 (+ (+ ?x63503 (* 1.0 (* l_0_18_68 l_0_18_68))) (* 1.0 (* l_0_18_69 l_0_18_69)))))
 (= (+ ?x63507 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63499 (* l_0_18_66 l_0_18_66)))
 (let ((?x63500 (* 3.0 ?x63499)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x63624 (* ?x63623 l_0_18_68)))
 (let ((?x63495 (* l_0_18_65 l_0_18_65)))
 (let ((?x63496 (* 3.0 ?x63495)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x63620 (* ?x63619 l_0_18_67)))
 (let ((?x63481 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x63616 (* ?x63615 l_0_18_47)))
 (let ((?x63477 (* (* 3.0 l_0_18_44) l_0_18_44)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x63612 (* ?x63611 l_0_18_46)))
 (let ((?x63608 (* l_0_18_3 l_0_18_3)))
 (let ((?x63609 (* 6.0 ?x63608)))
 (let ((?x63469 (* 12.0 l_0_18_3)))
 (let ((?x63470 (* ?x63469 l_0_18_5)))
 (let ((?x63587 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x63448 (* ?x63447 l_0_18_26)))
 (let ((?x63577 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x63439 (* ?x63438 l_0_18_25)))
 (let ((?x63566 (* l_0_18_2 l_0_18_2)))
 (let ((?x63567 (* 6.0 ?x63566)))
 (let ((?x63429 (* 12.0 l_0_18_2)))
 (let ((?x63430 (* ?x63429 l_0_18_4)))
 (let ((?x53155 (- (+ (* l_0_18_128 l_0_18_128) (* l_0_18_129 l_0_18_129)) (* (* 2.0 l_0_18_191) l_0_18_193))))
 (let ((?x63571 (- (+ (+ (- ?x53155 (* (* 2.0 l_0_18_192) l_0_18_194)) ?x63430) ?x63567) (* (* 2.0 l_0_18_212) l_0_18_214))))
 (let ((?x63581 (- (- (- (- ?x63571 (* (* 2.0 l_0_18_213) l_0_18_215)) ?x63439) ?x63577) (* (* 2.0 l_0_18_233) l_0_18_235))))
 (let ((?x63591 (- (- (- (- ?x63581 (* (* 2.0 l_0_18_234) l_0_18_236)) ?x63448) ?x63587) (* (* 2.0 l_0_18_254) l_0_18_256))))
 (let ((?x63597 (- (- ?x63591 (* (* 2.0 l_0_18_255) l_0_18_257)) (* (* 2.0 l_0_18_275) l_0_18_277))))
 (let ((?x63603 (- (- ?x63597 (* (* 2.0 l_0_18_276) l_0_18_278)) (* (* 2.0 l_0_18_296) l_0_18_298))))
 (let ((?x63613 (- (+ (+ (- ?x63603 (* (* 2.0 l_0_18_297) l_0_18_299)) ?x63470) ?x63609) ?x63612)))
 (let ((?x63626 (+ (+ (+ (+ (- (- (- ?x63613 ?x63477) ?x63616) ?x63481) ?x63620) ?x63496) ?x63624) ?x63500)))
 (= (+ ?x63626 3.0) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63608 (* l_0_18_3 l_0_18_3)))
 (let ((?x63609 (* 6.0 ?x63608)))
 (let ((?x63681 (* l_0_18_297 l_0_18_297)))
 (let ((?x63679 (* l_0_18_296 l_0_18_296)))
 (let ((?x63677 (* l_0_18_276 l_0_18_276)))
 (let ((?x63675 (* l_0_18_275 l_0_18_275)))
 (let ((?x63673 (* l_0_18_255 l_0_18_255)))
 (let ((?x63671 (* l_0_18_254 l_0_18_254)))
 (let ((?x63587 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x63668 (* l_0_18_234 l_0_18_234)))
 (let ((?x63666 (* l_0_18_233 l_0_18_233)))
 (let ((?x63577 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x63663 (* l_0_18_213 l_0_18_213)))
 (let ((?x63661 (* l_0_18_212 l_0_18_212)))
 (let ((?x63566 (* l_0_18_2 l_0_18_2)))
 (let ((?x63567 (* 6.0 ?x63566)))
 (let ((?x51319 (* l_0_18_192 l_0_18_192)))
 (let ((?x63662 (- (+ (- (- (- _a_0_) (* l_0_18_191 l_0_18_191)) ?x51319) ?x63567) ?x63661)))
 (let ((?x63674 (- (- (- (- (- (- (- ?x63662 ?x63663) ?x63577) ?x63666) ?x63668) ?x63587) ?x63671) ?x63673)))
 (let ((?x63686 (- (+ (- (- (- (- ?x63674 ?x63675) ?x63677) ?x63679) ?x63681) ?x63609) (* (* 1.0 l_0_18_44) l_0_18_44))))
 (let ((?x63691 (+ (- ?x63686 (* (* 1.0 l_0_18_45) l_0_18_45)) (* 1.0 (* l_0_18_65 l_0_18_65)))))
 (= (+ (+ ?x63691 (* 1.0 (* l_0_18_66 l_0_18_66))) 1.0) 0.0)))))))))))))))))))))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x63873 (* ?x63872 l_0_18_92)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x63870 (* ?x63869 l_0_18_91)))
 (let ((?x63866 (* 2.0 l_0_18_73)))
 (let ((?x63867 (* ?x63866 l_0_18_82)))
 (let ((?x63863 (* 2.0 l_0_18_72)))
 (let ((?x63864 (* ?x63863 l_0_18_81)))
 (let ((?x63860 (* 2.0 l_0_18_71)))
 (let ((?x63861 (* ?x63860 l_0_18_80)))
 (let ((?x63857 (* 2.0 l_0_18_70)))
 (let ((?x63858 (* ?x63857 l_0_18_79)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x63855 (* ?x63623 l_0_18_80)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x63853 (* ?x63619 l_0_18_79)))
 (let ((?x63850 (* 2.0 l_0_18_52)))
 (let ((?x63851 (* ?x63850 l_0_18_61)))
 (let ((?x63847 (* 2.0 l_0_18_51)))
 (let ((?x63848 (* ?x63847 l_0_18_60)))
 (let ((?x63844 (* 2.0 l_0_18_50)))
 (let ((?x63845 (* ?x63844 l_0_18_59)))
 (let ((?x63841 (* 2.0 l_0_18_49)))
 (let ((?x63842 (* ?x63841 l_0_18_58)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x63839 (* ?x63615 l_0_18_59)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x63837 (* ?x63611 l_0_18_58)))
 (let ((?x63834 (* 12.0 l_0_18_31)))
 (let ((?x63835 (* ?x63834 l_0_18_40)))
 (let ((?x63819 (* 12.0 l_0_18_30)))
 (let ((?x63820 (* ?x63819 l_0_18_39)))
 (let ((?x63816 (* 12.0 l_0_18_29)))
 (let ((?x63817 (* ?x63816 l_0_18_38)))
 (let ((?x63801 (* 12.0 l_0_18_28)))
 (let ((?x63802 (* ?x63801 l_0_18_37)))
 (let ((?x63750 (* 12.0 l_0_18_18)))
 (let ((?x63751 (* ?x63750 l_0_18_9)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x63748 (* ?x63747 l_0_18_176)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x63745 (* ?x63744 l_0_18_175)))
 (let ((?x63741 (* 12.0 l_0_18_17)))
 (let ((?x63742 (* ?x63741 l_0_18_8)))
 (let ((?x63738 (* 12.0 l_0_18_16)))
 (let ((?x63739 (* ?x63738 l_0_18_7)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x63736 (* ?x63735 l_0_18_155)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x63733 (* ?x63732 l_0_18_154)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x63730 (* ?x63729 l_0_18_113)))
 (let ((?x63728 (+ (+ (- _a_1_) (* (* 12.0 l_0_18_10) l_0_18_19)) (* (* 2.0 l_0_18_107) l_0_18_112))))
 (let ((?x63749 (+ (+ (+ (+ (- (- (+ ?x63728 ?x63730) ?x63733) ?x63736) ?x63739) ?x63742) ?x63745) ?x63748)))
 (let ((?x63758 (- (- (+ ?x63749 ?x63751) (* (* 2.0 l_0_18_196) l_0_18_205)) (* (* 2.0 l_0_18_197) l_0_18_206))))
 (let ((?x63764 (- (- ?x63758 (* (* 2.0 l_0_18_198) l_0_18_207)) (* (* 2.0 l_0_18_199) l_0_18_208))))
 (let ((?x63770 (- (- ?x63764 (* (* 2.0 l_0_18_217) l_0_18_226)) (* (* 2.0 l_0_18_218) l_0_18_227))))
 (let ((?x63776 (- (- ?x63770 (* (* 2.0 l_0_18_219) l_0_18_228)) (* (* 2.0 l_0_18_220) l_0_18_229))))
 (let ((?x63782 (- (- ?x63776 (* (* 2.0 l_0_18_238) l_0_18_247)) (* (* 2.0 l_0_18_239) l_0_18_248))))
 (let ((?x63788 (- (- ?x63782 (* (* 2.0 l_0_18_240) l_0_18_249)) (* (* 2.0 l_0_18_241) l_0_18_250))))
 (let ((?x63794 (- (- ?x63788 (* (* 2.0 l_0_18_259) l_0_18_268)) (* (* 2.0 l_0_18_260) l_0_18_269))))
 (let ((?x63800 (- (- ?x63794 (* (* 2.0 l_0_18_261) l_0_18_270)) (* (* 2.0 l_0_18_262) l_0_18_271))))
 (let ((?x63809 (- (- (- ?x63800 ?x63802) (* (* 2.0 l_0_18_280) l_0_18_289)) (* (* 2.0 l_0_18_281) l_0_18_290))))
 (let ((?x63815 (- (- ?x63809 (* (* 2.0 l_0_18_282) l_0_18_291)) (* (* 2.0 l_0_18_283) l_0_18_292))))
 (let ((?x63827 (- (- (- (- ?x63815 ?x63817) ?x63820) (* (* 2.0 l_0_18_301) l_0_18_310)) (* (* 2.0 l_0_18_302) l_0_18_311))))
 (let ((?x63833 (- (- ?x63827 (* (* 2.0 l_0_18_303) l_0_18_312)) (* (* 2.0 l_0_18_304) l_0_18_313))))
 (let ((?x63852 (- (- (- (- (+ (+ (- ?x63833 ?x63835) ?x63837) ?x63839) ?x63842) ?x63845) ?x63848) ?x63851)))
 (let ((?x63871 (- (+ (+ (+ (+ (- (- ?x63852 ?x63853) ?x63855) ?x63858) ?x63861) ?x63864) ?x63867) ?x63870)))
 (= (- ?x63871 ?x63873) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63499 (* l_0_18_66 l_0_18_66)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x64082 (* ?x63623 l_0_18_71)))
 (let ((?x63495 (* l_0_18_65 l_0_18_65)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x64079 (* ?x63619 l_0_18_70)))
 (let ((?x63556 (* l_0_18_45 l_0_18_45)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x64076 (* ?x63615 l_0_18_50)))
 (let ((?x32102 (* l_0_18_44 l_0_18_44)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x64073 (* ?x63611 l_0_18_49)))
 (let ((?x63469 (* 12.0 l_0_18_3)))
 (let ((?x64071 (* ?x63469 l_0_18_8)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x64057 (* ?x63447 l_0_18_29)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x64051 (* ?x63438 l_0_18_28)))
 (let ((?x63429 (* 12.0 l_0_18_2)))
 (let ((?x64045 (* ?x63429 l_0_18_7)))
 (let ((?x64044 (- (- (- _a_2_) (* (* 2.0 l_0_18_191) l_0_18_196)) (* (* 2.0 l_0_18_192) l_0_18_197))))
 (let ((?x64050 (- (- (+ ?x64044 ?x64045) (* (* 2.0 l_0_18_212) l_0_18_217)) (* (* 2.0 l_0_18_213) l_0_18_218))))
 (let ((?x64056 (- (- (- ?x64050 ?x64051) (* (* 2.0 l_0_18_233) l_0_18_238)) (* (* 2.0 l_0_18_234) l_0_18_239))))
 (let ((?x64062 (- (- (- ?x64056 ?x64057) (* (* 2.0 l_0_18_254) l_0_18_259)) (* (* 2.0 l_0_18_255) l_0_18_260))))
 (let ((?x64066 (- (- ?x64062 (* (* 2.0 l_0_18_275) l_0_18_280)) (* (* 2.0 l_0_18_276) l_0_18_281))))
 (let ((?x64070 (- (- ?x64066 (* (* 2.0 l_0_18_296) l_0_18_301)) (* (* 2.0 l_0_18_297) l_0_18_302))))
 (let ((?x64081 (- (+ (+ (- (+ (- (+ ?x64070 ?x64071) ?x64073) ?x32102) ?x64076) ?x63556) ?x64079) ?x63495)))
 (= (- (+ ?x64081 ?x64082) ?x63499) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x63361 (* l_0_18_87 l_0_18_87)))
 (let ((?x63359 (* l_0_18_86 l_0_18_86)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x63855 (* ?x63623 l_0_18_80)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x63853 (* ?x63619 l_0_18_79)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x63839 (* ?x63615 l_0_18_59)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x63837 (* ?x63611 l_0_18_58)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x64161 (* ?x63447 l_0_18_38)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x64155 (* ?x63438 l_0_18_37)))
 (let ((?x63309 (* l_0_18_171 l_0_18_171)))
 (let ((?x63307 (* l_0_18_170 l_0_18_170)))
 (let ((?x63741 (* 12.0 l_0_18_17)))
 (let ((?x64143 (* ?x63741 l_0_18_3)))
 (let ((?x63738 (* 12.0 l_0_18_16)))
 (let ((?x64141 (* ?x63738 l_0_18_2)))
 (let ((?x63305 (* l_0_18_150 l_0_18_150)))
 (let ((?x63303 (* l_0_18_149 l_0_18_149)))
 (let ((?x63295 (* l_0_18_108 l_0_18_108)))
 (let ((?x64140 (- (- (+ (+ (- _a_3_) (* l_0_18_107 l_0_18_107)) ?x63295) ?x63303) ?x63305)))
 (let ((?x64148 (- (+ (+ (+ (+ ?x64140 ?x64141) ?x64143) ?x63307) ?x63309) (* (* 2.0 l_0_18_191) l_0_18_205))))
 (let ((?x64152 (- (- ?x64148 (* (* 2.0 l_0_18_192) l_0_18_206)) (* (* 2.0 l_0_18_212) l_0_18_226))))
 (let ((?x64158 (- (- (- ?x64152 (* (* 2.0 l_0_18_213) l_0_18_227)) ?x64155) (* (* 2.0 l_0_18_233) l_0_18_247))))
 (let ((?x64164 (- (- (- ?x64158 (* (* 2.0 l_0_18_234) l_0_18_248)) ?x64161) (* (* 2.0 l_0_18_254) l_0_18_268))))
 (let ((?x64168 (- (- ?x64164 (* (* 2.0 l_0_18_255) l_0_18_269)) (* (* 2.0 l_0_18_275) l_0_18_289))))
 (let ((?x64172 (- (- ?x64168 (* (* 2.0 l_0_18_276) l_0_18_290)) (* (* 2.0 l_0_18_296) l_0_18_310))))
 (let ((?x64177 (+ (- (- (- ?x64172 (* (* 2.0 l_0_18_297) l_0_18_311)) ?x63837) ?x63839) ?x63853)))
 (= (- (- (+ ?x64177 ?x63855) ?x63359) ?x63361) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x64374 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x64371 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x64368 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x64365 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x64362 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x64359 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x64356 (* l_0_18_315 l_0_18_315)))
 (let ((?x64354 (* l_0_18_314 l_0_18_314)))
 (let ((?x64352 (* l_0_18_313 l_0_18_313)))
 (let ((?x64350 (* l_0_18_312 l_0_18_312)))
 (let ((?x64348 (* l_0_18_311 l_0_18_311)))
 (let ((?x64346 (* l_0_18_310 l_0_18_310)))
 (let ((?x64344 (* l_0_18_294 l_0_18_294)))
 (let ((?x64342 (* l_0_18_293 l_0_18_293)))
 (let ((?x64340 (* l_0_18_292 l_0_18_292)))
 (let ((?x64338 (* l_0_18_291 l_0_18_291)))
 (let ((?x64336 (* l_0_18_290 l_0_18_290)))
 (let ((?x64334 (* l_0_18_289 l_0_18_289)))
 (let ((?x64332 (* l_0_18_273 l_0_18_273)))
 (let ((?x64330 (* l_0_18_272 l_0_18_272)))
 (let ((?x64328 (* l_0_18_271 l_0_18_271)))
 (let ((?x64326 (* l_0_18_270 l_0_18_270)))
 (let ((?x64324 (* l_0_18_269 l_0_18_269)))
 (let ((?x64322 (* l_0_18_268 l_0_18_268)))
 (let ((?x64320 (* l_0_18_252 l_0_18_252)))
 (let ((?x64318 (* l_0_18_251 l_0_18_251)))
 (let ((?x64316 (* l_0_18_250 l_0_18_250)))
 (let ((?x64314 (* l_0_18_249 l_0_18_249)))
 (let ((?x64312 (* l_0_18_248 l_0_18_248)))
 (let ((?x64310 (* l_0_18_247 l_0_18_247)))
 (let ((?x64308 (* l_0_18_231 l_0_18_231)))
 (let ((?x64306 (* l_0_18_230 l_0_18_230)))
 (let ((?x64304 (* l_0_18_229 l_0_18_229)))
 (let ((?x64302 (* l_0_18_228 l_0_18_228)))
 (let ((?x64300 (* l_0_18_227 l_0_18_227)))
 (let ((?x64298 (* l_0_18_226 l_0_18_226)))
 (let ((?x64296 (* l_0_18_210 l_0_18_210)))
 (let ((?x64293 (* l_0_18_21 l_0_18_21)))
 (let ((?x64294 (* 6.0 ?x64293)))
 (let ((?x64291 (* l_0_18_209 l_0_18_209)))
 (let ((?x64289 (* l_0_18_208 l_0_18_208)))
 (let ((?x64287 (* l_0_18_207 l_0_18_207)))
 (let ((?x64285 (* l_0_18_206 l_0_18_206)))
 (let ((?x64283 (* l_0_18_205 l_0_18_205)))
 (let ((?x64280 (* l_0_18_20 l_0_18_20)))
 (let ((?x64281 (* 6.0 ?x64280)))
 (let ((?x64277 (* l_0_18_19 l_0_18_19)))
 (let ((?x64278 (* 6.0 ?x64277)))
 (let ((?x64274 (* l_0_18_18 l_0_18_18)))
 (let ((?x64275 (* 6.0 ?x64274)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x64272 (* ?x63747 l_0_18_185)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x64270 (* ?x63744 l_0_18_184)))
 (let ((?x64267 (* l_0_18_17 l_0_18_17)))
 (let ((?x64268 (* 6.0 ?x64267)))
 (let ((?x64264 (* l_0_18_16 l_0_18_16)))
 (let ((?x64265 (* 6.0 ?x64264)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x64262 (* ?x63735 l_0_18_164)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x64260 (* ?x63732 l_0_18_163)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x64258 (* ?x63729 l_0_18_122)))
 (let ((?x63726 (* 2.0 l_0_18_107)))
 (let ((?x64256 (* ?x63726 l_0_18_121)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x64254 (* ?x64253 l_0_18_87)))
 (let ((?x64257 (+ (- (- (- _a_4_) (* (* 2.0 l_0_18_100) l_0_18_86)) ?x64254) ?x64256)))
 (let ((?x64273 (+ (+ (+ (+ (- (- (+ ?x64257 ?x64258) ?x64260) ?x64262) ?x64265) ?x64268) ?x64270) ?x64272)))
 (let ((?x64290 (- (- (- (- (+ (+ (+ ?x64273 ?x64275) ?x64278) ?x64281) ?x64283) ?x64285) ?x64287) ?x64289)))
 (let ((?x64305 (- (- (- (- (- (+ (- ?x64290 ?x64291) ?x64294) ?x64296) ?x64298) ?x64300) ?x64302) ?x64304)))
 (let ((?x64319 (- (- (- (- (- (- (- ?x64305 ?x64306) ?x64308) ?x64310) ?x64312) ?x64314) ?x64316) ?x64318)))
 (let ((?x64333 (- (- (- (- (- (- (- ?x64319 ?x64320) ?x64322) ?x64324) ?x64326) ?x64328) ?x64330) ?x64332)))
 (let ((?x64347 (- (- (- (- (- (- (- ?x64333 ?x64334) ?x64336) ?x64338) ?x64340) ?x64342) ?x64344) ?x64346)))
 (let ((?x64363 (- (- (- (- (- (- (- ?x64347 ?x64348) ?x64350) ?x64352) ?x64354) ?x64356) ?x64359) ?x64362)))
 (let ((?x64378 (- (- (- (- (- ?x64363 ?x64365) ?x64368) ?x64371) ?x64374) (* (* 1.0 l_0_18_58) l_0_18_58))))
 (let ((?x64384 (- (- ?x64378 (* (* 1.0 l_0_18_59) l_0_18_59)) (* (* 1.0 l_0_18_60) l_0_18_60))))
 (let ((?x64390 (- (- ?x64384 (* (* 1.0 l_0_18_61) l_0_18_61)) (* (* 1.0 l_0_18_62) l_0_18_62))))
 (let ((?x64396 (+ (- ?x64390 (* (* 1.0 l_0_18_63) l_0_18_63)) (* 1.0 (* l_0_18_79 l_0_18_79)))))
 (let ((?x64402 (+ (+ ?x64396 (* 1.0 (* l_0_18_80 l_0_18_80))) (* 1.0 (* l_0_18_81 l_0_18_81)))))
 (let ((?x64408 (+ (+ ?x64402 (* 1.0 (* l_0_18_82 l_0_18_82))) (* 1.0 (* l_0_18_83 l_0_18_83)))))
 (= (+ ?x64408 (* 1.0 (* l_0_18_84 l_0_18_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64592 (* l_0_18_9 l_0_18_9)))
 (let ((?x64593 (* 6.0 ?x64592)))
 (let ((?x64589 (* l_0_18_8 l_0_18_8)))
 (let ((?x64590 (* 6.0 ?x64589)))
 (let ((?x64574 (* l_0_18_7 l_0_18_7)))
 (let ((?x64575 (* 6.0 ?x64574)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x64082 (* ?x63623 l_0_18_71)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x64079 (* ?x63619 l_0_18_70)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x64076 (* ?x63615 l_0_18_50)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x64073 (* ?x63611 l_0_18_49)))
 (let ((?x64556 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x64553 (* l_0_18_304 l_0_18_304)))
 (let ((?x64551 (* l_0_18_303 l_0_18_303)))
 (let ((?x64549 (* l_0_18_302 l_0_18_302)))
 (let ((?x64547 (* l_0_18_301 l_0_18_301)))
 (let ((?x64545 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64542 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x64539 (* l_0_18_283 l_0_18_283)))
 (let ((?x64537 (* l_0_18_282 l_0_18_282)))
 (let ((?x64535 (* l_0_18_281 l_0_18_281)))
 (let ((?x64533 (* l_0_18_280 l_0_18_280)))
 (let ((?x64531 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x64528 (* l_0_18_262 l_0_18_262)))
 (let ((?x64526 (* l_0_18_261 l_0_18_261)))
 (let ((?x64524 (* l_0_18_260 l_0_18_260)))
 (let ((?x64522 (* l_0_18_259 l_0_18_259)))
 (let ((?x64520 (* l_0_18_241 l_0_18_241)))
 (let ((?x64518 (* l_0_18_240 l_0_18_240)))
 (let ((?x64516 (* l_0_18_239 l_0_18_239)))
 (let ((?x64514 (* l_0_18_238 l_0_18_238)))
 (let ((?x64512 (* l_0_18_220 l_0_18_220)))
 (let ((?x64510 (* l_0_18_219 l_0_18_219)))
 (let ((?x64508 (* l_0_18_218 l_0_18_218)))
 (let ((?x64506 (* l_0_18_217 l_0_18_217)))
 (let ((?x64504 (* l_0_18_199 l_0_18_199)))
 (let ((?x64502 (* l_0_18_198 l_0_18_198)))
 (let ((?x64500 (* l_0_18_197 l_0_18_197)))
 (let ((?x64498 (* l_0_18_196 l_0_18_196)))
 (let ((?x64501 (- (- (+ (- _a_5_) (* 6.0 (* l_0_18_10 l_0_18_10))) ?x64498) ?x64500)))
 (let ((?x64515 (- (- (- (- (- (- (- ?x64501 ?x64502) ?x64504) ?x64506) ?x64508) ?x64510) ?x64512) ?x64514)))
 (let ((?x64529 (- (- (- (- (- (- (- ?x64515 ?x64516) ?x64518) ?x64520) ?x64522) ?x64524) ?x64526) ?x64528)))
 (let ((?x64546 (- (- (- (- (- (- (- ?x64529 ?x64531) ?x64533) ?x64535) ?x64537) ?x64539) ?x64542) ?x64545)))
 (let ((?x64559 (+ (+ (- (- (- (- (- ?x64546 ?x64547) ?x64549) ?x64551) ?x64553) ?x64556) ?x64073) ?x64076)))
 (let ((?x64565 (- (- ?x64559 (* (* 1.0 l_0_18_49) l_0_18_49)) (* (* 1.0 l_0_18_50) l_0_18_50))))
 (let ((?x64571 (- (- ?x64565 (* (* 1.0 l_0_18_51) l_0_18_51)) (* (* 1.0 l_0_18_52) l_0_18_52))))
 (let ((?x64579 (+ (+ (- (- ?x64571 ?x64079) ?x64082) ?x64575) (* 1.0 (* l_0_18_70 l_0_18_70)))))
 (let ((?x64585 (+ (+ ?x64579 (* 1.0 (* l_0_18_71 l_0_18_71))) (* 1.0 (* l_0_18_72 l_0_18_72)))))
 (= (+ (+ (+ ?x64585 (* 1.0 (* l_0_18_73 l_0_18_73))) ?x64590) ?x64593) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (= (+ (* (- l_0_18_1) l_0_18_1) (* l_0_18_22 l_0_18_22)) 0.0))
(assert
 (let ((?x64670 (* l_0_18_295 l_0_18_295)))
 (let ((?x64668 (* l_0_18_274 l_0_18_274)))
 (let ((?x64666 (* l_0_18_253 l_0_18_253)))
 (let ((?x64664 (* l_0_18_232 l_0_18_232)))
 (let ((?x64662 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x64656 (* l_0_18_211 l_0_18_211)))
 (let ((?x64654 (* l_0_18_190 l_0_18_190)))
 (let ((?x42991 (* l_0_18_1 l_0_18_1)))
 (let ((?x64652 (* 6.0 ?x42991)))
 (let ((?x64660 (+ (- (- (+ (* (* (- 2.0) l_0_18_1) l_0_18_2) ?x64652) ?x64654) ?x64656) (* (* 2.0 l_0_18_22) l_0_18_23))))
 (let ((?x64674 (- (- (- (- (- (- ?x64660 ?x64662) ?x64664) ?x64666) ?x64668) ?x64670) (* (* 1.0 l_0_18_43) l_0_18_43))))
 (= (+ ?x64674 (* 1.0 (* l_0_18_64 l_0_18_64))) 0.0)))))))))))))
(assert
 (let ((?x64675 (* l_0_18_64 l_0_18_64)))
 (let ((?x64707 (* 3.0 ?x64675)))
 (let ((?x64662 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x64699 (* l_0_18_127 l_0_18_127)))
 (let ((?x42991 (* l_0_18_1 l_0_18_1)))
 (let ((?x64652 (* 6.0 ?x42991)))
 (let ((?x64702 (+ (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_4) ?x64652) ?x64699) (* (* 2.0 l_0_18_22) l_0_18_25))))
 (= (+ (- (- ?x64702 ?x64662) (* (* 3.0 l_0_18_43) l_0_18_43)) ?x64707) 0.0)))))))))
(assert
 (let ((?x64675 (* l_0_18_64 l_0_18_64)))
 (let ((?x54019 (* l_0_18_43 l_0_18_43)))
 (let ((?x64723 (+ (* (* (- 2.0) l_0_18_1) l_0_18_7) (* (* 2.0 l_0_18_22) l_0_18_28))))
 (= (- (+ ?x64723 ?x54019) ?x64675) 0.0)))))
(assert
 (let ((?x64739 (+ (- (* (* (- 2.0) l_0_18_1) l_0_18_11) (* l_0_18_127 l_0_18_127)) (* (* 2.0 l_0_18_22) l_0_18_32))))
 (= ?x64739 0.0)))
(assert
 (let ((?x64759 (* l_0_18_85 l_0_18_85)))
 (let ((?x64755 (* l_0_18_169 l_0_18_169)))
 (let ((?x64753 (* l_0_18_148 l_0_18_148)))
 (let ((?x64754 (- (+ (* (* (- 2.0) l_0_18_1) l_0_18_16) (* l_0_18_106 l_0_18_106)) ?x64753)))
 (= (- (+ (+ ?x64754 ?x64755) (* (* 2.0 l_0_18_22) l_0_18_37)) ?x64759) 0.0))))))
(assert
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64804 (* ?x64803 l_0_18_65)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64801 (* ?x64800 l_0_18_44)))
 (let ((?x63608 (* l_0_18_3 l_0_18_3)))
 (let ((?x32261 (* l_0_18_24 l_0_18_24)))
 (let ((?x53256 (* l_0_18_23 l_0_18_23)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64783 (* ?x64782 l_0_18_23)))
 (let ((?x63566 (* l_0_18_2 l_0_18_2)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x64774 (* ?x64773 l_0_18_2)))
 (let ((?x64781 (- (- (- ?x64774 (* (* 2.0 l_0_18_190) l_0_18_191)) ?x63566) (* (* 2.0 l_0_18_211) l_0_18_212))))
 (let ((?x64789 (+ (- (+ (- ?x64781 ?x64783) ?x53256) (* (* 2.0 l_0_18_232) l_0_18_233)) ?x32261)))
 (let ((?x64795 (- (- ?x64789 (* (* 2.0 l_0_18_253) l_0_18_254)) (* (* 2.0 l_0_18_274) l_0_18_275))))
 (let ((?x64805 (+ (- (- (- ?x64795 (* (* 2.0 l_0_18_295) l_0_18_296)) ?x63608) ?x64801) ?x64804)))
 (= ?x64805 0.0))))))))))))))))))
(assert
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64865 (* ?x64803 l_0_18_67)))
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x64863 (* ?x64862 l_0_18_65)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64860 (* ?x64800 l_0_18_46)))
 (let ((?x64857 (* 6.0 l_0_18_43)))
 (let ((?x64858 (* ?x64857 l_0_18_44)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64838 (* ?x64782 l_0_18_25)))
 (let ((?x64783 (* ?x64782 l_0_18_23)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x54062 (* ?x54061 l_0_18_128)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x54124 (* ?x64773 l_0_18_4)))
 (let ((?x64774 (* ?x64773 l_0_18_2)))
 (let ((?x64834 (- (- (+ (+ ?x64774 ?x54124) ?x54062) (* (* 2.0 l_0_18_190) l_0_18_193)) (* (* 2.0 l_0_18_2) l_0_18_4))))
 (let ((?x64842 (+ (- (- (- ?x64834 (* (* 2.0 l_0_18_211) l_0_18_214)) ?x64783) ?x64838) (* (* 2.0 l_0_18_23) l_0_18_25))))
 (let ((?x64847 (+ (- ?x64842 (* (* 2.0 l_0_18_232) l_0_18_235)) (* (* 2.0 l_0_18_24) l_0_18_26))))
 (let ((?x64851 (- (- ?x64847 (* (* 2.0 l_0_18_253) l_0_18_256)) (* (* 2.0 l_0_18_274) l_0_18_277))))
 (let ((?x64856 (- (- ?x64851 (* (* 2.0 l_0_18_295) l_0_18_298)) (* (* 2.0 l_0_18_3) l_0_18_5))))
 (= (+ (+ (- (- ?x64856 ?x64858) ?x64860) ?x64863) ?x64865) 0.0)))))))))))))))))))))))
(assert
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64938 (* ?x64803 l_0_18_70)))
 (let ((?x64804 (* ?x64803 l_0_18_65)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64935 (* ?x64800 l_0_18_49)))
 (let ((?x64801 (* ?x64800 l_0_18_44)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64918 (* ?x64782 l_0_18_28)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x54149 (* ?x64773 l_0_18_7)))
 (let ((?x64915 (- (- ?x54149 (* (* 2.0 l_0_18_190) l_0_18_196)) (* (* 2.0 l_0_18_2) l_0_18_7))))
 (let ((?x64921 (+ (- (- ?x64915 (* (* 2.0 l_0_18_211) l_0_18_217)) ?x64918) (* (* 2.0 l_0_18_23) l_0_18_28))))
 (let ((?x64925 (+ (- ?x64921 (* (* 2.0 l_0_18_232) l_0_18_238)) (* (* 2.0 l_0_18_24) l_0_18_29))))
 (let ((?x64929 (- (- ?x64925 (* (* 2.0 l_0_18_253) l_0_18_259)) (* (* 2.0 l_0_18_274) l_0_18_280))))
 (let ((?x64933 (- (- ?x64929 (* (* 2.0 l_0_18_295) l_0_18_301)) (* (* 2.0 l_0_18_3) l_0_18_8))))
 (= (+ (- (- (+ ?x64933 ?x64801) ?x64935) ?x64804) ?x64938) 0.0)))))))))))))))))
(assert
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64992 (* ?x64803 l_0_18_74)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64990 (* ?x64800 l_0_18_53)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64976 (* ?x64782 l_0_18_32)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x54062 (* ?x54061 l_0_18_128)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x3866 (* ?x64773 l_0_18_11)))
 (let ((?x64970 (- (- ?x3866 (* (* 2.0 l_0_18_11) l_0_18_2)) (* (* 2.0 l_0_18_12) l_0_18_3))))
 (let ((?x64975 (- (- (- ?x64970 ?x54062) (* (* 2.0 l_0_18_190) l_0_18_200)) (* (* 2.0 l_0_18_211) l_0_18_221))))
 (let ((?x64981 (- (+ (- ?x64975 ?x64976) (* (* 2.0 l_0_18_23) l_0_18_32)) (* (* 2.0 l_0_18_232) l_0_18_242))))
 (let ((?x64985 (- (+ ?x64981 (* (* 2.0 l_0_18_24) l_0_18_33)) (* (* 2.0 l_0_18_253) l_0_18_263))))
 (let ((?x64989 (- (- ?x64985 (* (* 2.0 l_0_18_274) l_0_18_284)) (* (* 2.0 l_0_18_295) l_0_18_305))))
 (= (+ (- ?x64989 ?x64990) ?x64992) 0.0)))))))))))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65069 (* ?x65068 l_0_18_86)))
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x65066 (* ?x64803 l_0_18_79)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x65064 (* ?x64800 l_0_18_58)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x65050 (* ?x64782 l_0_18_37)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65041 (* ?x65040 l_0_18_170)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65035 (* ?x65034 l_0_18_149)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x65024 (* ?x64773 l_0_18_16)))
 (let ((?x65039 (- (- (+ ?x65024 (* (* 2.0 l_0_18_106) l_0_18_107)) ?x65035) (* (* 2.0 l_0_18_16) l_0_18_2))))
 (let ((?x65047 (- (- (+ ?x65039 ?x65041) (* (* 2.0 l_0_18_17) l_0_18_3)) (* (* 2.0 l_0_18_190) l_0_18_205))))
 (let ((?x65053 (+ (- (- ?x65047 (* (* 2.0 l_0_18_211) l_0_18_226)) ?x65050) (* (* 2.0 l_0_18_23) l_0_18_37))))
 (let ((?x65057 (+ (- ?x65053 (* (* 2.0 l_0_18_232) l_0_18_247)) (* (* 2.0 l_0_18_24) l_0_18_38))))
 (let ((?x65061 (- (- ?x65057 (* (* 2.0 l_0_18_253) l_0_18_268)) (* (* 2.0 l_0_18_274) l_0_18_289))))
 (let ((?x65070 (- (+ (- (- ?x65061 (* (* 2.0 l_0_18_295) l_0_18_310)) ?x65064) ?x65066) ?x65069)))
 (= ?x65070 0.0))))))))))))))))))))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65124 (* ?x64862 l_0_18_67)))
 (let ((?x64863 (* ?x64862 l_0_18_65)))
 (let ((?x63341 (* l_0_18_6 l_0_18_6)))
 (let ((?x63338 (* l_0_18_5 l_0_18_5)))
 (let ((?x64857 (* 6.0 l_0_18_43)))
 (let ((?x65119 (* ?x64857 l_0_18_46)))
 (let ((?x64858 (* ?x64857 l_0_18_44)))
 (let ((?x63320 (* l_0_18_4 l_0_18_4)))
 (let ((?x3949 (* l_0_18_27 l_0_18_27)))
 (let ((?x53001 (* l_0_18_26 l_0_18_26)))
 (let ((?x52995 (* l_0_18_25 l_0_18_25)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64838 (* ?x64782 l_0_18_25)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x65111 (* ?x54061 l_0_18_130)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x54124 (* ?x64773 l_0_18_4)))
 (let ((?x65118 (- (- (+ (+ (+ (- (+ ?x54124 ?x65111) ?x64838) ?x52995) ?x53001) ?x3949) ?x63320) ?x64858)))
 (= (+ (+ (- (- (- ?x65118 ?x65119) ?x63338) ?x63341) ?x64863) ?x65124) 0.0)))))))))))))))))))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65155 (* ?x64862 l_0_18_70)))
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64865 (* ?x64803 l_0_18_67)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64860 (* ?x64800 l_0_18_46)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64918 (* ?x64782 l_0_18_28)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x54447 (* ?x54061 l_0_18_133)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x54149 (* ?x64773 l_0_18_7)))
 (let ((?x54487 (+ (+ (- (+ ?x54149 ?x54447) ?x64918) (* (* 2.0 l_0_18_25) l_0_18_28)) (* (* 2.0 l_0_18_26) l_0_18_29))))
 (let ((?x65144 (- (+ ?x54487 (* (* 2.0 l_0_18_27) l_0_18_30)) (* (* 2.0 l_0_18_4) l_0_18_7))))
 (let ((?x65150 (- (- (+ ?x65144 ?x64860) (* (* 6.0 l_0_18_43) l_0_18_49)) (* (* 2.0 l_0_18_5) l_0_18_8))))
 (= (+ (- (- ?x65150 (* (* 2.0 l_0_18_6) l_0_18_9)) ?x64865) ?x65155) 0.0)))))))))))))))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65200 (* ?x64862 l_0_18_74)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x64976 (* ?x64782 l_0_18_32)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x65186 (* ?x54061 l_0_18_137)))
 (let ((?x65111 (* ?x54061 l_0_18_130)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x3866 (* ?x64773 l_0_18_11)))
 (let ((?x65184 (- (- ?x3866 (* (* 2.0 l_0_18_11) l_0_18_4)) (* (* 2.0 l_0_18_12) l_0_18_5))))
 (let ((?x65191 (- (- (+ (- ?x65184 ?x65111) ?x65186) (* (* 2.0 l_0_18_13) l_0_18_6)) ?x64976)))
 (let ((?x65195 (+ (+ ?x65191 (* (* 2.0 l_0_18_25) l_0_18_32)) (* (* 2.0 l_0_18_26) l_0_18_33))))
 (let ((?x65199 (- (+ ?x65195 (* (* 2.0 l_0_18_27) l_0_18_34)) (* (* 6.0 l_0_18_43) l_0_18_53))))
 (= (+ ?x65199 ?x65200) 0.0)))))))))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65241 (* ?x65068 l_0_18_88)))
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65239 (* ?x64862 l_0_18_79)))
 (let ((?x64782 (* 12.0 l_0_18_22)))
 (let ((?x65050 (* ?x64782 l_0_18_37)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65223 (* ?x65040 l_0_18_172)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65219 (* ?x65034 l_0_18_151)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x65217 (* ?x54061 l_0_18_142)))
 (let ((?x64773 (* 12.0 l_0_18_1)))
 (let ((?x65024 (* ?x64773 l_0_18_16)))
 (let ((?x65222 (- (- (+ (+ ?x65024 (* (* 2.0 l_0_18_106) l_0_18_109)) ?x65217) ?x65219) (* (* 2.0 l_0_18_16) l_0_18_4))))
 (let ((?x65229 (- (- (+ ?x65222 ?x65223) (* (* 2.0 l_0_18_17) l_0_18_5)) (* (* 2.0 l_0_18_18) l_0_18_6))))
 (let ((?x65234 (+ (+ (- ?x65229 ?x65050) (* (* 2.0 l_0_18_25) l_0_18_37)) (* (* 2.0 l_0_18_26) l_0_18_38))))
 (let ((?x65238 (- (+ ?x65234 (* (* 2.0 l_0_18_27) l_0_18_39)) (* (* 6.0 l_0_18_43) l_0_18_58))))
 (= (- (+ ?x65238 ?x65239) ?x65241) 0.0))))))))))))))))))))
(assert
 (let ((?x64592 (* l_0_18_9 l_0_18_9)))
 (let ((?x64589 (* l_0_18_8 l_0_18_8)))
 (let ((?x64574 (* l_0_18_7 l_0_18_7)))
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64938 (* ?x64803 l_0_18_70)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64935 (* ?x64800 l_0_18_49)))
 (let ((?x33335 (* l_0_18_31 l_0_18_31)))
 (let ((?x53899 (* l_0_18_30 l_0_18_30)))
 (let ((?x53896 (* l_0_18_29 l_0_18_29)))
 (let ((?x65276 (+ (+ (* (- l_0_18_10) l_0_18_10) (* l_0_18_28 l_0_18_28)) ?x53896)))
 (let ((?x65283 (- (- (- (- (+ (+ (+ ?x65276 ?x53899) ?x33335) ?x64935) ?x64938) ?x64574) ?x64589) ?x64592)))
 (= ?x65283 0.0))))))))))))))
(assert
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x64992 (* ?x64803 l_0_18_74)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x64990 (* ?x64800 l_0_18_53)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x54447 (* ?x54061 l_0_18_133)))
 (let ((?x65299 (- (* (* (- 2.0) l_0_18_10) l_0_18_14) (* (* 2.0 l_0_18_11) l_0_18_7))))
 (let ((?x65304 (- (- (- ?x65299 (* (* 2.0 l_0_18_12) l_0_18_8)) ?x54447) (* (* 2.0 l_0_18_13) l_0_18_9))))
 (let ((?x65310 (+ (+ ?x65304 (* (* 2.0 l_0_18_28) l_0_18_32)) (* (* 2.0 l_0_18_29) l_0_18_33))))
 (let ((?x65316 (+ (+ ?x65310 (* (* 2.0 l_0_18_30) l_0_18_34)) (* (* 2.0 l_0_18_31) l_0_18_35))))
 (= (- (+ ?x65316 ?x64990) ?x64992) 0.0))))))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65350 (* ?x65068 l_0_18_91)))
 (let ((?x64803 (* 2.0 l_0_18_64)))
 (let ((?x65066 (* ?x64803 l_0_18_79)))
 (let ((?x64800 (* 2.0 l_0_18_43)))
 (let ((?x65064 (* ?x64800 l_0_18_58)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65334 (* ?x65040 l_0_18_175)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65330 (* ?x65034 l_0_18_154)))
 (let ((?x65329 (+ (* (* (- 2.0) l_0_18_10) l_0_18_19) (* (* 2.0 l_0_18_106) l_0_18_112))))
 (let ((?x65337 (- (+ (- (- ?x65329 ?x65330) (* (* 2.0 l_0_18_16) l_0_18_7)) ?x65334) (* (* 2.0 l_0_18_17) l_0_18_8))))
 (let ((?x65341 (+ (- ?x65337 (* (* 2.0 l_0_18_18) l_0_18_9)) (* (* 2.0 l_0_18_28) l_0_18_37))))
 (let ((?x65345 (+ (+ ?x65341 (* (* 2.0 l_0_18_29) l_0_18_38)) (* (* 2.0 l_0_18_30) l_0_18_39))))
 (let ((?x65351 (- (- (+ (+ ?x65345 (* (* 2.0 l_0_18_31) l_0_18_40)) ?x65064) ?x65066) ?x65350)))
 (= ?x65351 0.0)))))))))))))))))
(assert
 (let ((?x65390 (* l_0_18_36 l_0_18_36)))
 (let ((?x65388 (* l_0_18_35 l_0_18_35)))
 (let ((?x65386 (* l_0_18_34 l_0_18_34)))
 (let ((?x65384 (* l_0_18_33 l_0_18_33)))
 (let ((?x65382 (* l_0_18_32 l_0_18_32)))
 (let ((?x65380 (* l_0_18_15 l_0_18_15)))
 (let ((?x65378 (* l_0_18_14 l_0_18_14)))
 (let ((?x65376 (* l_0_18_13 l_0_18_13)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x65186 (* ?x54061 l_0_18_137)))
 (let ((?x65375 (- (- (* (- l_0_18_11) l_0_18_11) (* l_0_18_12 l_0_18_12)) ?x65186)))
 (let ((?x65389 (+ (+ (+ (+ (- (- (- ?x65375 ?x65376) ?x65378) ?x65380) ?x65382) ?x65384) ?x65386) ?x65388)))
 (= (+ ?x65389 ?x65390) 0.0))))))))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65443 (* ?x65068 l_0_18_95)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65426 (* ?x65040 l_0_18_179)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65421 (* ?x65034 l_0_18_158)))
 (let ((?x54061 (* 2.0 l_0_18_127)))
 (let ((?x65217 (* ?x54061 l_0_18_142)))
 (let ((?x65412 (- (* (* 2.0 l_0_18_106) l_0_18_116) (* (* 2.0 l_0_18_11) l_0_18_16))))
 (let ((?x65417 (- (- (- ?x65412 (* (* 2.0 l_0_18_12) l_0_18_17)) ?x65217) (* (* 2.0 l_0_18_13) l_0_18_18))))
 (let ((?x65425 (- (- (- ?x65417 (* (* 2.0 l_0_18_14) l_0_18_19)) ?x65421) (* (* 2.0 l_0_18_15) l_0_18_20))))
 (let ((?x65433 (+ (+ (+ ?x65425 ?x65426) (* (* 2.0 l_0_18_32) l_0_18_37)) (* (* 2.0 l_0_18_33) l_0_18_38))))
 (let ((?x65439 (+ (+ ?x65433 (* (* 2.0 l_0_18_34) l_0_18_39)) (* (* 2.0 l_0_18_35) l_0_18_40))))
 (= (- (+ ?x65439 (* (* 2.0 l_0_18_36) l_0_18_41)) ?x65443) 0.0)))))))))))))))
(assert
 (let ((?x53694 (* l_0_18_42 l_0_18_42)))
 (let ((?x33223 (* l_0_18_41 l_0_18_41)))
 (let ((?x22386 (* l_0_18_40 l_0_18_40)))
 (let ((?x31178 (* l_0_18_39 l_0_18_39)))
 (let ((?x33186 (* l_0_18_38 l_0_18_38)))
 (let ((?x64467 (* l_0_18_37 l_0_18_37)))
 (let ((?x64293 (* l_0_18_21 l_0_18_21)))
 (let ((?x64280 (* l_0_18_20 l_0_18_20)))
 (let ((?x64277 (* l_0_18_19 l_0_18_19)))
 (let ((?x64274 (* l_0_18_18 l_0_18_18)))
 (let ((?x64267 (* l_0_18_17 l_0_18_17)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65485 (* ?x65040 l_0_18_184)))
 (let ((?x64264 (* l_0_18_16 l_0_18_16)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65482 (* ?x65034 l_0_18_163)))
 (let ((?x65025 (* 2.0 l_0_18_106)))
 (let ((?x65480 (* ?x65025 l_0_18_121)))
 (let ((?x65486 (+ (- (- (+ (* (* (- 2.0) l_0_18_100) l_0_18_85) ?x65480) ?x65482) ?x64264) ?x65485)))
 (let ((?x65493 (+ (+ (- (- (- (- (- ?x65486 ?x64267) ?x64274) ?x64277) ?x64280) ?x64293) ?x64467) ?x33186)))
 (= (+ (+ (+ (+ ?x65493 ?x31178) ?x22386) ?x33223) ?x53694) 0.0))))))))))))))))))))))
(assert
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65624 (* ?x65623 l_0_18_72)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65621 (* ?x65620 l_0_18_71)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65618 (* ?x65617 l_0_18_70)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65615 (* ?x63347 l_0_18_71)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x63624 (* ?x63623 l_0_18_68)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65612 (* ?x63344 l_0_18_70)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x63620 (* ?x63619 l_0_18_67)))
 (let ((?x65609 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x65606 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65603 (* ?x65602 l_0_18_51)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65600 (* ?x65599 l_0_18_50)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65597 (* ?x65596 l_0_18_49)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65594 (* ?x63326 l_0_18_50)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x63616 (* ?x63615 l_0_18_47)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65591 (* ?x63323 l_0_18_49)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x63612 (* ?x63611 l_0_18_46)))
 (let ((?x65588 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x63469 (* 12.0 l_0_18_3)))
 (let ((?x64071 (* ?x63469 l_0_18_8)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65566 (* ?x65565 l_0_18_30)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65563 (* ?x65562 l_0_18_29)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65551 (* ?x65550 l_0_18_28)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x64057 (* ?x63447 l_0_18_29)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x64051 (* ?x63438 l_0_18_28)))
 (let ((?x63429 (* 12.0 l_0_18_2)))
 (let ((?x64045 (* ?x63429 l_0_18_7)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65518 (* ?x63403 l_0_18_134)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x54936 (* ?x63400 l_0_18_133)))
 (let ((?x65525 (- (- (+ ?x54936 ?x65518) (* (* 2.0 l_0_18_193) l_0_18_196)) (* (* 2.0 l_0_18_194) l_0_18_197))))
 (let ((?x65532 (- (+ (- ?x65525 (* (* 2.0 l_0_18_195) l_0_18_198)) ?x64045) (* (* 2.0 l_0_18_214) l_0_18_217))))
 (let ((?x65538 (- (- ?x65532 (* (* 2.0 l_0_18_215) l_0_18_218)) (* (* 2.0 l_0_18_216) l_0_18_219))))
 (let ((?x65545 (- (- (- ?x65538 ?x64051) (* (* 2.0 l_0_18_235) l_0_18_238)) (* (* 2.0 l_0_18_236) l_0_18_239))))
 (let ((?x65555 (- (- (- (- ?x65545 (* (* 2.0 l_0_18_237) l_0_18_240)) ?x64057) ?x65551) (* (* 2.0 l_0_18_256) l_0_18_259))))
 (let ((?x65561 (- (- ?x65555 (* (* 2.0 l_0_18_257) l_0_18_260)) (* (* 2.0 l_0_18_258) l_0_18_261))))
 (let ((?x65573 (- (- (- (- ?x65561 ?x65563) ?x65566) (* (* 2.0 l_0_18_277) l_0_18_280)) (* (* 2.0 l_0_18_278) l_0_18_281))))
 (let ((?x65579 (- (- ?x65573 (* (* 2.0 l_0_18_279) l_0_18_282)) (* (* 2.0 l_0_18_298) l_0_18_301))))
 (let ((?x65586 (- (+ (- ?x65579 (* (* 2.0 l_0_18_299) l_0_18_302)) ?x64071) (* (* 2.0 l_0_18_300) l_0_18_303))))
 (let ((?x65601 (- (- (- (+ (- (+ (+ ?x65586 ?x65588) ?x63612) ?x65591) ?x63616) ?x65594) ?x65597) ?x65600)))
 (let ((?x65616 (+ (- (+ (- (+ (+ (- ?x65601 ?x65603) ?x65606) ?x65609) ?x63620) ?x65612) ?x63624) ?x65615)))
 (= (+ (+ (+ ?x65616 ?x65618) ?x65621) ?x65624) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65768 (* ?x65623 l_0_18_76)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65766 (* ?x65620 l_0_18_75)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65764 (* ?x65617 l_0_18_74)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65762 (* ?x63347 l_0_18_75)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65760 (* ?x63344 l_0_18_74)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65758 (* ?x65602 l_0_18_55)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65756 (* ?x65599 l_0_18_54)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65754 (* ?x65596 l_0_18_53)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65752 (* ?x63326 l_0_18_54)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65750 (* ?x63323 l_0_18_53)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65736 (* ?x65565 l_0_18_34)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65734 (* ?x65562 l_0_18_33)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65726 (* ?x65550 l_0_18_32)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x65724 (* ?x63447 l_0_18_33)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x65716 (* ?x63438 l_0_18_32)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x65702 (* ?x65701 l_0_18_6)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65699 (* ?x63403 l_0_18_138)))
 (let ((?x63421 (* ?x63403 l_0_18_131)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x65696 (* ?x63400 l_0_18_137)))
 (let ((?x63402 (* ?x63400 l_0_18_130)))
 (let ((?x55157 (* 12.0 l_0_18_12)))
 (let ((?x65693 (* ?x55157 l_0_18_5)))
 (let ((?x65691 (* ?x55157 l_0_18_3)))
 (let ((?x55150 (* 12.0 l_0_18_11)))
 (let ((?x55288 (* ?x55150 l_0_18_4)))
 (let ((?x54005 (* ?x55150 l_0_18_2)))
 (let ((?x65700 (+ (- (+ (- (+ (+ (+ ?x54005 ?x55288) ?x65691) ?x65693) ?x63402) ?x65696) ?x63421) ?x65699)))
 (let ((?x65707 (- (- (+ ?x65700 ?x65702) (* (* 2.0 l_0_18_193) l_0_18_200)) (* (* 2.0 l_0_18_194) l_0_18_201))))
 (let ((?x65711 (- (- ?x65707 (* (* 2.0 l_0_18_195) l_0_18_202)) (* (* 2.0 l_0_18_214) l_0_18_221))))
 (let ((?x65715 (- (- ?x65711 (* (* 2.0 l_0_18_215) l_0_18_222)) (* (* 2.0 l_0_18_216) l_0_18_223))))
 (let ((?x65721 (- (- (- ?x65715 ?x65716) (* (* 2.0 l_0_18_235) l_0_18_242)) (* (* 2.0 l_0_18_236) l_0_18_243))))
 (let ((?x65729 (- (- (- (- ?x65721 (* (* 2.0 l_0_18_237) l_0_18_244)) ?x65724) ?x65726) (* (* 2.0 l_0_18_256) l_0_18_263))))
 (let ((?x65733 (- (- ?x65729 (* (* 2.0 l_0_18_257) l_0_18_264)) (* (* 2.0 l_0_18_258) l_0_18_265))))
 (let ((?x65741 (- (- (- (- ?x65733 ?x65734) ?x65736) (* (* 2.0 l_0_18_277) l_0_18_284)) (* (* 2.0 l_0_18_278) l_0_18_285))))
 (let ((?x65745 (- (- ?x65741 (* (* 2.0 l_0_18_279) l_0_18_286)) (* (* 2.0 l_0_18_298) l_0_18_305))))
 (let ((?x65749 (- (- ?x65745 (* (* 2.0 l_0_18_299) l_0_18_306)) (* (* 2.0 l_0_18_300) l_0_18_307))))
 (let ((?x65763 (+ (+ (- (- (- (- (- ?x65749 ?x65750) ?x65752) ?x65754) ?x65756) ?x65758) ?x65760) ?x65762)))
 (= (+ (+ (+ ?x65763 ?x65764) ?x65766) ?x65768) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x65937 (* ?x63872 l_0_18_89)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x65935 (* ?x63869 l_0_18_88)))
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65933 (* ?x65623 l_0_18_81)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65931 (* ?x65620 l_0_18_80)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65929 (* ?x65617 l_0_18_79)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65927 (* ?x63347 l_0_18_80)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65925 (* ?x63344 l_0_18_79)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65923 (* ?x65602 l_0_18_60)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65921 (* ?x65599 l_0_18_59)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65919 (* ?x65596 l_0_18_58)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65917 (* ?x63326 l_0_18_59)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65915 (* ?x63323 l_0_18_58)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65901 (* ?x65565 l_0_18_39)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65899 (* ?x65562 l_0_18_38)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65891 (* ?x65550 l_0_18_37)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x64161 (* ?x63447 l_0_18_38)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x64155 (* ?x63438 l_0_18_37)))
 (let ((?x63750 (* 12.0 l_0_18_18)))
 (let ((?x65869 (* ?x63750 l_0_18_6)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x65867 (* ?x63747 l_0_18_173)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x65865 (* ?x63744 l_0_18_172)))
 (let ((?x63741 (* 12.0 l_0_18_17)))
 (let ((?x65863 (* ?x63741 l_0_18_5)))
 (let ((?x64143 (* ?x63741 l_0_18_3)))
 (let ((?x63738 (* 12.0 l_0_18_16)))
 (let ((?x65860 (* ?x63738 l_0_18_4)))
 (let ((?x64141 (* ?x63738 l_0_18_2)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x65857 (* ?x63735 l_0_18_152)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x65855 (* ?x63732 l_0_18_151)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65839 (* ?x63403 l_0_18_143)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x65836 (* ?x63400 l_0_18_142)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x55498 (* ?x63729 l_0_18_110)))
 (let ((?x65856 (- (+ (+ (+ (* (* 2.0 l_0_18_107) l_0_18_109) ?x55498) ?x65836) ?x65839) ?x65855)))
 (let ((?x65868 (+ (+ (+ (+ (+ (+ (- ?x65856 ?x65857) ?x64141) ?x65860) ?x64143) ?x65863) ?x65865) ?x65867)))
 (let ((?x65874 (- (- (+ ?x65868 ?x65869) (* (* 2.0 l_0_18_193) l_0_18_205)) (* (* 2.0 l_0_18_194) l_0_18_206))))
 (let ((?x65878 (- (- ?x65874 (* (* 2.0 l_0_18_195) l_0_18_207)) (* (* 2.0 l_0_18_214) l_0_18_226))))
 (let ((?x65882 (- (- ?x65878 (* (* 2.0 l_0_18_215) l_0_18_227)) (* (* 2.0 l_0_18_216) l_0_18_228))))
 (let ((?x65887 (- (- (- ?x65882 ?x64155) (* (* 2.0 l_0_18_235) l_0_18_247)) (* (* 2.0 l_0_18_236) l_0_18_248))))
 (let ((?x65894 (- (- (- (- ?x65887 (* (* 2.0 l_0_18_237) l_0_18_249)) ?x64161) ?x65891) (* (* 2.0 l_0_18_256) l_0_18_268))))
 (let ((?x65898 (- (- ?x65894 (* (* 2.0 l_0_18_257) l_0_18_269)) (* (* 2.0 l_0_18_258) l_0_18_270))))
 (let ((?x65906 (- (- (- (- ?x65898 ?x65899) ?x65901) (* (* 2.0 l_0_18_277) l_0_18_289)) (* (* 2.0 l_0_18_278) l_0_18_290))))
 (let ((?x65910 (- (- ?x65906 (* (* 2.0 l_0_18_279) l_0_18_291)) (* (* 2.0 l_0_18_298) l_0_18_310))))
 (let ((?x65914 (- (- ?x65910 (* (* 2.0 l_0_18_299) l_0_18_311)) (* (* 2.0 l_0_18_300) l_0_18_312))))
 (let ((?x65928 (+ (+ (- (- (- (- (- ?x65914 ?x65915) ?x65917) ?x65919) ?x65921) ?x65923) ?x65925) ?x65927)))
 (= (- (- (+ (+ (+ ?x65928 ?x65929) ?x65931) ?x65933) ?x65935) ?x65937) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63356 (* l_0_18_69 l_0_18_69)))
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66087 (* ?x66086 l_0_18_72)))
 (let ((?x63353 (* l_0_18_68 l_0_18_68)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66083 (* ?x66082 l_0_18_71)))
 (let ((?x63350 (* l_0_18_67 l_0_18_67)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66079 (* ?x66078 l_0_18_70)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65615 (* ?x63347 l_0_18_71)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65612 (* ?x63344 l_0_18_70)))
 (let ((?x65609 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x65606 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x31826 (* l_0_18_48 l_0_18_48)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66071 (* ?x66070 l_0_18_51)))
 (let ((?x31833 (* l_0_18_47 l_0_18_47)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66067 (* ?x66066 l_0_18_50)))
 (let ((?x31823 (* l_0_18_46 l_0_18_46)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66063 (* ?x66062 l_0_18_49)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65594 (* ?x63326 l_0_18_50)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65591 (* ?x63323 l_0_18_49)))
 (let ((?x65588 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65566 (* ?x65565 l_0_18_30)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65563 (* ?x65562 l_0_18_29)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65551 (* ?x65550 l_0_18_28)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66054 (* ?x66053 l_0_18_135)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x7045 (* ?x34556 l_0_18_134)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x55714 (* ?x55713 l_0_18_133)))
 (let ((?x66060 (- (+ (- (- (- (+ (+ ?x55714 ?x7045) ?x66054) ?x65551) ?x65563) ?x65566) ?x65588) ?x65591)))
 (let ((?x66073 (+ (- (+ (- (+ (- (- ?x66060 ?x65594) ?x66063) ?x31823) ?x66067) ?x31833) ?x66071) ?x31826)))
 (let ((?x66084 (+ (- (+ (+ (+ (+ (+ ?x66073 ?x65606) ?x65609) ?x65612) ?x65615) ?x66079) ?x63350) ?x66083)))
 (= (- (+ (- ?x66084 ?x63353) ?x66087) ?x63356) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66146 (* ?x66086 l_0_18_76)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66144 (* ?x66082 l_0_18_75)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66142 (* ?x66078 l_0_18_74)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65762 (* ?x63347 l_0_18_75)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65760 (* ?x63344 l_0_18_74)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66138 (* ?x66070 l_0_18_55)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66136 (* ?x66066 l_0_18_54)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66134 (* ?x66062 l_0_18_53)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65752 (* ?x63326 l_0_18_54)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65750 (* ?x63323 l_0_18_53)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65736 (* ?x65565 l_0_18_34)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65734 (* ?x65562 l_0_18_33)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65726 (* ?x65550 l_0_18_32)))
 (let ((?x63301 (* l_0_18_132 l_0_18_132)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66126 (* ?x66053 l_0_18_139)))
 (let ((?x63299 (* l_0_18_131 l_0_18_131)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x66123 (* ?x34556 l_0_18_138)))
 (let ((?x63297 (* l_0_18_130 l_0_18_130)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x66120 (* ?x55713 l_0_18_137)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x65702 (* ?x65701 l_0_18_6)))
 (let ((?x55157 (* 12.0 l_0_18_12)))
 (let ((?x65693 (* ?x55157 l_0_18_5)))
 (let ((?x55150 (* 12.0 l_0_18_11)))
 (let ((?x55288 (* ?x55150 l_0_18_4)))
 (let ((?x66127 (+ (- (+ (- (+ (+ (+ ?x55288 ?x65693) ?x65702) ?x66120) ?x63297) ?x66123) ?x63299) ?x66126)))
 (let ((?x66135 (- (- (- (- (- (- (- ?x66127 ?x63301) ?x65726) ?x65734) ?x65736) ?x65750) ?x65752) ?x66134)))
 (let ((?x66147 (+ (+ (+ (+ (+ (- (- ?x66135 ?x66136) ?x66138) ?x65760) ?x65762) ?x66142) ?x66144) ?x66146)))
 (= ?x66147 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66213 (* l_0_18_90 l_0_18_90)))
 (let ((?x66211 (* l_0_18_89 l_0_18_89)))
 (let ((?x66209 (* l_0_18_88 l_0_18_88)))
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66207 (* ?x66086 l_0_18_81)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66205 (* ?x66082 l_0_18_80)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66203 (* ?x66078 l_0_18_79)))
 (let ((?x63347 (* 6.0 l_0_18_66)))
 (let ((?x65927 (* ?x63347 l_0_18_80)))
 (let ((?x63344 (* 6.0 l_0_18_65)))
 (let ((?x65925 (* ?x63344 l_0_18_79)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66199 (* ?x66070 l_0_18_60)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66197 (* ?x66066 l_0_18_59)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66195 (* ?x66062 l_0_18_58)))
 (let ((?x63326 (* 6.0 l_0_18_45)))
 (let ((?x65917 (* ?x63326 l_0_18_59)))
 (let ((?x63323 (* 6.0 l_0_18_44)))
 (let ((?x65915 (* ?x63323 l_0_18_58)))
 (let ((?x65565 (* 12.0 l_0_18_27)))
 (let ((?x65901 (* ?x65565 l_0_18_39)))
 (let ((?x65562 (* 12.0 l_0_18_26)))
 (let ((?x65899 (* ?x65562 l_0_18_38)))
 (let ((?x65550 (* 12.0 l_0_18_25)))
 (let ((?x65891 (* ?x65550 l_0_18_37)))
 (let ((?x63750 (* 12.0 l_0_18_18)))
 (let ((?x65869 (* ?x63750 l_0_18_6)))
 (let ((?x66187 (* l_0_18_174 l_0_18_174)))
 (let ((?x66185 (* l_0_18_173 l_0_18_173)))
 (let ((?x66183 (* l_0_18_172 l_0_18_172)))
 (let ((?x63741 (* 12.0 l_0_18_17)))
 (let ((?x65863 (* ?x63741 l_0_18_5)))
 (let ((?x63738 (* 12.0 l_0_18_16)))
 (let ((?x65860 (* ?x63738 l_0_18_4)))
 (let ((?x66179 (* l_0_18_153 l_0_18_153)))
 (let ((?x66177 (* l_0_18_152 l_0_18_152)))
 (let ((?x66175 (* l_0_18_151 l_0_18_151)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66173 (* ?x66053 l_0_18_144)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x66171 (* ?x34556 l_0_18_143)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x66169 (* ?x55713 l_0_18_142)))
 (let ((?x8324 (* l_0_18_111 l_0_18_111)))
 (let ((?x66168 (+ (+ (* l_0_18_109 l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x8324)))
 (let ((?x66181 (+ (- (- (- (+ (+ (+ ?x66168 ?x66169) ?x66171) ?x66173) ?x66175) ?x66177) ?x66179) ?x65860)))
 (let ((?x66191 (- (- (+ (+ (+ (+ (+ ?x66181 ?x65863) ?x66183) ?x66185) ?x66187) ?x65869) ?x65891) ?x65899)))
 (let ((?x66201 (+ (- (- (- (- (- (- ?x66191 ?x65901) ?x65915) ?x65917) ?x66195) ?x66197) ?x66199) ?x65925)))
 (let ((?x66214 (- (- (- (+ (+ (+ (+ ?x66201 ?x65927) ?x66203) ?x66205) ?x66207) ?x66209) ?x66211) ?x66213)))
 (= ?x66214 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64592 (* l_0_18_9 l_0_18_9)))
 (let ((?x64593 (* 6.0 ?x64592)))
 (let ((?x64589 (* l_0_18_8 l_0_18_8)))
 (let ((?x64590 (* 6.0 ?x64589)))
 (let ((?x64586 (* l_0_18_73 l_0_18_73)))
 (let ((?x66287 (* 3.0 ?x64586)))
 (let ((?x64583 (* l_0_18_72 l_0_18_72)))
 (let ((?x66285 (* 3.0 ?x64583)))
 (let ((?x64580 (* l_0_18_71 l_0_18_71)))
 (let ((?x66283 (* 3.0 ?x64580)))
 (let ((?x64577 (* l_0_18_70 l_0_18_70)))
 (let ((?x66281 (* 3.0 ?x64577)))
 (let ((?x64574 (* l_0_18_7 l_0_18_7)))
 (let ((?x64575 (* 6.0 ?x64574)))
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65624 (* ?x65623 l_0_18_72)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65621 (* ?x65620 l_0_18_71)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65618 (* ?x65617 l_0_18_70)))
 (let ((?x66275 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x66272 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x66269 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65603 (* ?x65602 l_0_18_51)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65600 (* ?x65599 l_0_18_50)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65597 (* ?x65596 l_0_18_49)))
 (let ((?x64556 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x64545 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64542 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x64531 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x66256 (* l_0_18_136 l_0_18_136)))
 (let ((?x66254 (* l_0_18_135 l_0_18_135)))
 (let ((?x66252 (* l_0_18_134 l_0_18_134)))
 (let ((?x43670 (* l_0_18_133 l_0_18_133)))
 (let ((?x6278 (* l_0_18_10 l_0_18_10)))
 (let ((?x64496 (* 6.0 ?x6278)))
 (let ((?x66260 (- (- (- (+ (+ (+ (+ ?x64496 ?x43670) ?x66252) ?x66254) ?x66256) ?x64531) ?x64542) ?x64545)))
 (let ((?x66267 (- (+ (+ (+ (- ?x66260 ?x64556) ?x65597) ?x65600) ?x65603) (* (* 3.0 l_0_18_49) l_0_18_49))))
 (let ((?x66280 (+ (- (- (- (- (- (- ?x66267 ?x66269) ?x66272) ?x66275) ?x65618) ?x65621) ?x65624) ?x64575)))
 (= (+ (+ (+ (+ (+ (+ ?x66280 ?x66281) ?x66283) ?x66285) ?x66287) ?x64590) ?x64593) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66357 (* 6.0 l_0_18_73)))
 (let ((?x66358 (* ?x66357 l_0_18_77)))
 (let ((?x66354 (* 6.0 l_0_18_72)))
 (let ((?x66355 (* ?x66354 l_0_18_76)))
 (let ((?x66351 (* 6.0 l_0_18_71)))
 (let ((?x66352 (* ?x66351 l_0_18_75)))
 (let ((?x66348 (* 6.0 l_0_18_70)))
 (let ((?x66349 (* ?x66348 l_0_18_74)))
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65768 (* ?x65623 l_0_18_76)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65766 (* ?x65620 l_0_18_75)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65764 (* ?x65617 l_0_18_74)))
 (let ((?x66342 (* 6.0 l_0_18_52)))
 (let ((?x66343 (* ?x66342 l_0_18_56)))
 (let ((?x66339 (* 6.0 l_0_18_51)))
 (let ((?x66340 (* ?x66339 l_0_18_55)))
 (let ((?x66336 (* 6.0 l_0_18_50)))
 (let ((?x66337 (* ?x66336 l_0_18_54)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65758 (* ?x65602 l_0_18_55)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65756 (* ?x65599 l_0_18_54)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65754 (* ?x65596 l_0_18_53)))
 (let ((?x63834 (* 12.0 l_0_18_31)))
 (let ((?x66328 (* ?x63834 l_0_18_35)))
 (let ((?x63819 (* 12.0 l_0_18_30)))
 (let ((?x66326 (* ?x63819 l_0_18_34)))
 (let ((?x63816 (* 12.0 l_0_18_29)))
 (let ((?x66324 (* ?x63816 l_0_18_33)))
 (let ((?x63801 (* 12.0 l_0_18_28)))
 (let ((?x66322 (* ?x63801 l_0_18_32)))
 (let ((?x66319 (* 2.0 l_0_18_136)))
 (let ((?x66320 (* ?x66319 l_0_18_140)))
 (let ((?x66316 (* 2.0 l_0_18_135)))
 (let ((?x66317 (* ?x66316 l_0_18_139)))
 (let ((?x66313 (* 2.0 l_0_18_134)))
 (let ((?x66314 (* ?x66313 l_0_18_138)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66054 (* ?x66053 l_0_18_135)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x7045 (* ?x34556 l_0_18_134)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x55714 (* ?x55713 l_0_18_133)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x66305 (* ?x65701 l_0_18_9)))
 (let ((?x8523 (+ (* (* 12.0 l_0_18_10) l_0_18_14) (* (* 12.0 l_0_18_11) l_0_18_7))))
 (let ((?x66304 (+ ?x8523 (* (* 12.0 l_0_18_12) l_0_18_8))))
 (let ((?x66312 (+ (- (- (- (+ ?x66304 ?x66305) ?x55714) ?x7045) ?x66054) (* (* 2.0 l_0_18_133) l_0_18_137))))
 (let ((?x66329 (- (- (- (- (+ (+ (+ ?x66312 ?x66314) ?x66317) ?x66320) ?x66322) ?x66324) ?x66326) ?x66328)))
 (let ((?x66335 (- (+ (+ (+ ?x66329 ?x65754) ?x65756) ?x65758) (* (* 6.0 l_0_18_49) l_0_18_53))))
 (let ((?x66350 (+ (- (- (- (- (- (- ?x66335 ?x66337) ?x66340) ?x66343) ?x65764) ?x65766) ?x65768) ?x66349)))
 (= (+ (+ (+ ?x66350 ?x66352) ?x66355) ?x66358) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66464 (* 2.0 l_0_18_90)))
 (let ((?x66465 (* ?x66464 l_0_18_93)))
 (let ((?x66461 (* 2.0 l_0_18_89)))
 (let ((?x66462 (* ?x66461 l_0_18_92)))
 (let ((?x66458 (* 2.0 l_0_18_88)))
 (let ((?x66459 (* ?x66458 l_0_18_91)))
 (let ((?x66357 (* 6.0 l_0_18_73)))
 (let ((?x66456 (* ?x66357 l_0_18_82)))
 (let ((?x66354 (* 6.0 l_0_18_72)))
 (let ((?x66454 (* ?x66354 l_0_18_81)))
 (let ((?x66351 (* 6.0 l_0_18_71)))
 (let ((?x66452 (* ?x66351 l_0_18_80)))
 (let ((?x66348 (* 6.0 l_0_18_70)))
 (let ((?x66450 (* ?x66348 l_0_18_79)))
 (let ((?x65623 (* 2.0 l_0_18_69)))
 (let ((?x65933 (* ?x65623 l_0_18_81)))
 (let ((?x65620 (* 2.0 l_0_18_68)))
 (let ((?x65931 (* ?x65620 l_0_18_80)))
 (let ((?x65617 (* 2.0 l_0_18_67)))
 (let ((?x65929 (* ?x65617 l_0_18_79)))
 (let ((?x66342 (* 6.0 l_0_18_52)))
 (let ((?x66445 (* ?x66342 l_0_18_61)))
 (let ((?x66339 (* 6.0 l_0_18_51)))
 (let ((?x66443 (* ?x66339 l_0_18_60)))
 (let ((?x66336 (* 6.0 l_0_18_50)))
 (let ((?x66441 (* ?x66336 l_0_18_59)))
 (let ((?x65602 (* 2.0 l_0_18_48)))
 (let ((?x65923 (* ?x65602 l_0_18_60)))
 (let ((?x65599 (* 2.0 l_0_18_47)))
 (let ((?x65921 (* ?x65599 l_0_18_59)))
 (let ((?x65596 (* 2.0 l_0_18_46)))
 (let ((?x65919 (* ?x65596 l_0_18_58)))
 (let ((?x63834 (* 12.0 l_0_18_31)))
 (let ((?x63835 (* ?x63834 l_0_18_40)))
 (let ((?x63819 (* 12.0 l_0_18_30)))
 (let ((?x63820 (* ?x63819 l_0_18_39)))
 (let ((?x63816 (* 12.0 l_0_18_29)))
 (let ((?x63817 (* ?x63816 l_0_18_38)))
 (let ((?x63801 (* 12.0 l_0_18_28)))
 (let ((?x63802 (* ?x63801 l_0_18_37)))
 (let ((?x63750 (* 12.0 l_0_18_18)))
 (let ((?x63751 (* ?x63750 l_0_18_9)))
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66429 (* ?x66428 l_0_18_177)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66426 (* ?x66425 l_0_18_176)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66423 (* ?x66422 l_0_18_175)))
 (let ((?x63741 (* 12.0 l_0_18_17)))
 (let ((?x63742 (* ?x63741 l_0_18_8)))
 (let ((?x63738 (* 12.0 l_0_18_16)))
 (let ((?x63739 (* ?x63738 l_0_18_7)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66418 (* ?x66417 l_0_18_156)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66415 (* ?x66414 l_0_18_155)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66412 (* ?x66411 l_0_18_154)))
 (let ((?x66319 (* 2.0 l_0_18_136)))
 (let ((?x66409 (* ?x66319 l_0_18_145)))
 (let ((?x66316 (* 2.0 l_0_18_135)))
 (let ((?x66407 (* ?x66316 l_0_18_144)))
 (let ((?x66313 (* 2.0 l_0_18_134)))
 (let ((?x66405 (* ?x66313 l_0_18_143)))
 (let ((?x66310 (* 2.0 l_0_18_133)))
 (let ((?x66403 (* ?x66310 l_0_18_142)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66401 (* ?x66400 l_0_18_114)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66398 (* ?x66397 l_0_18_113)))
 (let ((?x42994 (* 12.0 l_0_18_10)))
 (let ((?x63724 (* ?x42994 l_0_18_19)))
 (let ((?x66404 (+ (+ (+ (+ ?x63724 (* (* 2.0 l_0_18_109) l_0_18_112)) ?x66398) ?x66401) ?x66403)))
 (let ((?x66420 (+ (- (- (- (+ (+ (+ ?x66404 ?x66405) ?x66407) ?x66409) ?x66412) ?x66415) ?x66418) ?x63739)))
 (let ((?x66433 (- (- (+ (+ (+ (+ (+ ?x66420 ?x63742) ?x66423) ?x66426) ?x66429) ?x63751) ?x63802) ?x63817)))
 (let ((?x66440 (- (+ (+ (+ (- (- ?x66433 ?x63820) ?x63835) ?x65919) ?x65921) ?x65923) (* (* 6.0 l_0_18_49) l_0_18_58))))
 (let ((?x66451 (+ (- (- (- (- (- (- ?x66440 ?x66441) ?x66443) ?x66445) ?x65929) ?x65931) ?x65933) ?x66450)))
 (= (- (- (- (+ (+ (+ ?x66451 ?x66452) ?x66454) ?x66456) ?x66459) ?x66462) ?x66465) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66588 (* l_0_18_78 l_0_18_78)))
 (let ((?x66589 (* 3.0 ?x66588)))
 (let ((?x66585 (* l_0_18_77 l_0_18_77)))
 (let ((?x66586 (* 3.0 ?x66585)))
 (let ((?x66582 (* l_0_18_76 l_0_18_76)))
 (let ((?x66583 (* 3.0 ?x66582)))
 (let ((?x66579 (* l_0_18_75 l_0_18_75)))
 (let ((?x66580 (* 3.0 ?x66579)))
 (let ((?x66576 (* l_0_18_74 l_0_18_74)))
 (let ((?x66577 (* 3.0 ?x66576)))
 (let ((?x66574 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x66571 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x66568 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x66565 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x66559 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x66556 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x66553 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x66550 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x66547 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x65380 (* l_0_18_15 l_0_18_15)))
 (let ((?x66544 (* 6.0 ?x65380)))
 (let ((?x66542 (* l_0_18_141 l_0_18_141)))
 (let ((?x66540 (* l_0_18_140 l_0_18_140)))
 (let ((?x65378 (* l_0_18_14 l_0_18_14)))
 (let ((?x66538 (* 6.0 ?x65378)))
 (let ((?x66536 (* l_0_18_139 l_0_18_139)))
 (let ((?x66534 (* l_0_18_138 l_0_18_138)))
 (let ((?x66532 (* l_0_18_137 l_0_18_137)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66126 (* ?x66053 l_0_18_139)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x66123 (* ?x34556 l_0_18_138)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x66120 (* ?x55713 l_0_18_137)))
 (let ((?x65376 (* l_0_18_13 l_0_18_13)))
 (let ((?x66527 (* 6.0 ?x65376)))
 (let ((?x54818 (* l_0_18_12 l_0_18_12)))
 (let ((?x66525 (* 6.0 ?x54818)))
 (let ((?x65394 (* l_0_18_11 l_0_18_11)))
 (let ((?x66524 (* 6.0 ?x65394)))
 (let ((?x66526 (+ ?x66524 ?x66525)))
 (let ((?x66537 (+ (+ (+ (- (- (- (+ ?x66526 ?x66527) ?x66120) ?x66123) ?x66126) ?x66532) ?x66534) ?x66536)))
 (let ((?x66554 (- (- (- (+ (+ (+ (+ ?x66537 ?x66538) ?x66540) ?x66542) ?x66544) ?x66547) ?x66550) ?x66553)))
 (let ((?x66566 (- (- (- (- ?x66554 ?x66556) ?x66559) (* (* 3.0 l_0_18_53) l_0_18_53)) ?x66565)))
 (let ((?x66587 (+ (+ (+ (+ (- (- (- ?x66566 ?x66568) ?x66571) ?x66574) ?x66577) ?x66580) ?x66583) ?x66586)))
 (= (+ ?x66587 ?x66589) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66464 (* 2.0 l_0_18_90)))
 (let ((?x66722 (* ?x66464 l_0_18_97)))
 (let ((?x66461 (* 2.0 l_0_18_89)))
 (let ((?x66720 (* ?x66461 l_0_18_96)))
 (let ((?x66458 (* 2.0 l_0_18_88)))
 (let ((?x66718 (* ?x66458 l_0_18_95)))
 (let ((?x66716 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x66713 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x66710 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x66707 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x66704 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x66701 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x66698 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x66695 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x66692 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x66686 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66683 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66680 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66677 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66674 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66671 (* ?x66428 l_0_18_181)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66669 (* ?x66425 l_0_18_180)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66667 (* ?x66422 l_0_18_179)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66665 (* ?x66417 l_0_18_160)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66663 (* ?x66414 l_0_18_159)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66661 (* ?x66411 l_0_18_158)))
 (let ((?x66659 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x66656 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66653 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66650 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x66647 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66644 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66641 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x66053 (* 2.0 l_0_18_132)))
 (let ((?x66173 (* ?x66053 l_0_18_144)))
 (let ((?x34556 (* 2.0 l_0_18_131)))
 (let ((?x66171 (* ?x34556 l_0_18_143)))
 (let ((?x55713 (* 2.0 l_0_18_130)))
 (let ((?x66169 (* ?x55713 l_0_18_142)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x66635 (* ?x65701 l_0_18_18)))
 (let ((?x55157 (* 12.0 l_0_18_12)))
 (let ((?x66633 (* ?x55157 l_0_18_17)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66631 (* ?x66400 l_0_18_118)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66629 (* ?x66397 l_0_18_117)))
 (let ((?x55150 (* 12.0 l_0_18_11)))
 (let ((?x66627 (* ?x55150 l_0_18_16)))
 (let ((?x66634 (+ (+ (+ (+ (* (* 2.0 l_0_18_109) l_0_18_116) ?x66627) ?x66629) ?x66631) ?x66633)))
 (let ((?x66648 (+ (+ (+ (- (- (- (+ ?x66634 ?x66635) ?x66169) ?x66171) ?x66173) ?x66641) ?x66644) ?x66647)))
 (let ((?x66666 (- (- (- (+ (+ (+ (+ ?x66648 ?x66650) ?x66653) ?x66656) ?x66659) ?x66661) ?x66663) ?x66665)))
 (let ((?x66684 (- (- (- (- (+ (+ (+ ?x66666 ?x66667) ?x66669) ?x66671) ?x66674) ?x66677) ?x66680) ?x66683)))
 (let ((?x66696 (- (- (- (- ?x66684 ?x66686) (* (* 6.0 l_0_18_53) l_0_18_58)) ?x66692) ?x66695)))
 (let ((?x66717 (+ (+ (+ (+ (+ (- (- ?x66696 ?x66698) ?x66701) ?x66704) ?x66707) ?x66710) ?x66713) ?x66716)))
 (= (- (- (- ?x66717 ?x66718) ?x66720) ?x66722) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64409 (* l_0_18_84 l_0_18_84)))
 (let ((?x66870 (* 3.0 ?x64409)))
 (let ((?x64406 (* l_0_18_83 l_0_18_83)))
 (let ((?x66868 (* 3.0 ?x64406)))
 (let ((?x64403 (* l_0_18_82 l_0_18_82)))
 (let ((?x66866 (* 3.0 ?x64403)))
 (let ((?x64400 (* l_0_18_81 l_0_18_81)))
 (let ((?x66864 (* 3.0 ?x64400)))
 (let ((?x64397 (* l_0_18_80 l_0_18_80)))
 (let ((?x66862 (* 3.0 ?x64397)))
 (let ((?x64394 (* l_0_18_79 l_0_18_79)))
 (let ((?x66860 (* 3.0 ?x64394)))
 (let ((?x66858 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x66855 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x66852 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x66849 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x66846 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x64374 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x64371 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x64368 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x64365 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x64362 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x64359 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x64293 (* l_0_18_21 l_0_18_21)))
 (let ((?x64294 (* 6.0 ?x64293)))
 (let ((?x64280 (* l_0_18_20 l_0_18_20)))
 (let ((?x64281 (* 6.0 ?x64280)))
 (let ((?x64277 (* l_0_18_19 l_0_18_19)))
 (let ((?x64278 (* 6.0 ?x64277)))
 (let ((?x64274 (* l_0_18_18 l_0_18_18)))
 (let ((?x64275 (* 6.0 ?x64274)))
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66830 (* ?x66428 l_0_18_186)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66828 (* ?x66425 l_0_18_185)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66826 (* ?x66422 l_0_18_184)))
 (let ((?x64267 (* l_0_18_17 l_0_18_17)))
 (let ((?x64268 (* 6.0 ?x64267)))
 (let ((?x64264 (* l_0_18_16 l_0_18_16)))
 (let ((?x64265 (* 6.0 ?x64264)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66822 (* ?x66417 l_0_18_165)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66820 (* ?x66414 l_0_18_164)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66818 (* ?x66411 l_0_18_163)))
 (let ((?x66816 (* l_0_18_147 l_0_18_147)))
 (let ((?x66814 (* l_0_18_146 l_0_18_146)))
 (let ((?x66812 (* l_0_18_145 l_0_18_145)))
 (let ((?x66810 (* l_0_18_144 l_0_18_144)))
 (let ((?x66808 (* l_0_18_143 l_0_18_143)))
 (let ((?x66806 (* l_0_18_142 l_0_18_142)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66804 (* ?x66400 l_0_18_123)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66802 (* ?x66397 l_0_18_122)))
 (let ((?x66394 (* 2.0 l_0_18_109)))
 (let ((?x66800 (* ?x66394 l_0_18_121)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x66798 (* ?x66797 l_0_18_90)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x45323 (* ?x64253 l_0_18_89)))
 (let ((?x66803 (+ (+ (- (- (* (* (- 2.0) l_0_18_100) l_0_18_88) ?x45323) ?x66798) ?x66800) ?x66802)))
 (let ((?x66817 (+ (+ (+ (+ (+ (+ (+ ?x66803 ?x66804) ?x66806) ?x66808) ?x66810) ?x66812) ?x66814) ?x66816)))
 (let ((?x66829 (+ (+ (+ (+ (- (- (- ?x66817 ?x66818) ?x66820) ?x66822) ?x64265) ?x64268) ?x66826) ?x66828)))
 (let ((?x66837 (- (- (+ (+ (+ (+ (+ ?x66829 ?x66830) ?x64275) ?x64278) ?x64281) ?x64294) ?x64359) ?x64362)))
 (let ((?x66844 (- (- (- (- (- ?x66837 ?x64365) ?x64368) ?x64371) ?x64374) (* (* 3.0 l_0_18_58) l_0_18_58))))
 (let ((?x66863 (+ (+ (- (- (- (- (- ?x66844 ?x66846) ?x66849) ?x66852) ?x66855) ?x66858) ?x66860) ?x66862)))
 (= (+ (+ (+ (+ ?x66863 ?x66864) ?x66866) ?x66868) ?x66870) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x66967 (* ?x63623 l_0_18_75)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x66965 (* ?x63619 l_0_18_74)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x66963 (* ?x63615 l_0_18_54)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x66961 (* ?x63611 l_0_18_53)))
 (let ((?x63447 (* 12.0 l_0_18_24)))
 (let ((?x65724 (* ?x63447 l_0_18_33)))
 (let ((?x63438 (* 12.0 l_0_18_23)))
 (let ((?x65716 (* ?x63438 l_0_18_32)))
 (let ((?x53160 (* l_0_18_129 l_0_18_129)))
 (let ((?x53231 (* l_0_18_128 l_0_18_128)))
 (let ((?x55157 (* 12.0 l_0_18_12)))
 (let ((?x65691 (* ?x55157 l_0_18_3)))
 (let ((?x55150 (* 12.0 l_0_18_11)))
 (let ((?x54005 (* ?x55150 l_0_18_2)))
 (let ((?x66936 (- (- (- (+ ?x54005 ?x65691) ?x53231) ?x53160) (* (* 2.0 l_0_18_191) l_0_18_200))))
 (let ((?x66940 (- (- ?x66936 (* (* 2.0 l_0_18_192) l_0_18_201)) (* (* 2.0 l_0_18_212) l_0_18_221))))
 (let ((?x66945 (- (- (- ?x66940 (* (* 2.0 l_0_18_213) l_0_18_222)) ?x65716) (* (* 2.0 l_0_18_233) l_0_18_242))))
 (let ((?x66950 (- (- (- ?x66945 (* (* 2.0 l_0_18_234) l_0_18_243)) ?x65724) (* (* 2.0 l_0_18_254) l_0_18_263))))
 (let ((?x66954 (- (- ?x66950 (* (* 2.0 l_0_18_255) l_0_18_264)) (* (* 2.0 l_0_18_275) l_0_18_284))))
 (let ((?x66958 (- (- ?x66954 (* (* 2.0 l_0_18_276) l_0_18_285)) (* (* 2.0 l_0_18_296) l_0_18_305))))
 (let ((?x66966 (+ (- (- (- ?x66958 (* (* 2.0 l_0_18_297) l_0_18_306)) ?x66961) ?x66963) ?x66965)))
 (= (+ ?x66966 ?x66967) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x63866 (* 2.0 l_0_18_73)))
 (let ((?x67079 (* ?x63866 l_0_18_77)))
 (let ((?x63863 (* 2.0 l_0_18_72)))
 (let ((?x67077 (* ?x63863 l_0_18_76)))
 (let ((?x63860 (* 2.0 l_0_18_71)))
 (let ((?x67075 (* ?x63860 l_0_18_75)))
 (let ((?x63857 (* 2.0 l_0_18_70)))
 (let ((?x67073 (* ?x63857 l_0_18_74)))
 (let ((?x63623 (* 2.0 l_0_18_66)))
 (let ((?x66967 (* ?x63623 l_0_18_75)))
 (let ((?x63619 (* 2.0 l_0_18_65)))
 (let ((?x66965 (* ?x63619 l_0_18_74)))
 (let ((?x63850 (* 2.0 l_0_18_52)))
 (let ((?x67069 (* ?x63850 l_0_18_56)))
 (let ((?x63847 (* 2.0 l_0_18_51)))
 (let ((?x67067 (* ?x63847 l_0_18_55)))
 (let ((?x63844 (* 2.0 l_0_18_50)))
 (let ((?x67065 (* ?x63844 l_0_18_54)))
 (let ((?x63841 (* 2.0 l_0_18_49)))
 (let ((?x67063 (* ?x63841 l_0_18_53)))
 (let ((?x63615 (* 2.0 l_0_18_45)))
 (let ((?x66963 (* ?x63615 l_0_18_54)))
 (let ((?x63611 (* 2.0 l_0_18_44)))
 (let ((?x66961 (* ?x63611 l_0_18_53)))
 (let ((?x63834 (* 12.0 l_0_18_31)))
 (let ((?x66328 (* ?x63834 l_0_18_35)))
 (let ((?x63819 (* 12.0 l_0_18_30)))
 (let ((?x66326 (* ?x63819 l_0_18_34)))
 (let ((?x63816 (* 12.0 l_0_18_29)))
 (let ((?x66324 (* ?x63816 l_0_18_33)))
 (let ((?x63801 (* 12.0 l_0_18_28)))
 (let ((?x66322 (* ?x63801 l_0_18_32)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x66305 (* ?x65701 l_0_18_9)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65518 (* ?x63403 l_0_18_134)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x54936 (* ?x63400 l_0_18_133)))
 (let ((?x8523 (+ (* (* 12.0 l_0_18_10) l_0_18_14) (* (* 12.0 l_0_18_11) l_0_18_7))))
 (let ((?x66304 (+ ?x8523 (* (* 12.0 l_0_18_12) l_0_18_8))))
 (let ((?x67010 (- (+ (- (- ?x66304 ?x54936) ?x65518) ?x66305) (* (* 2.0 l_0_18_196) l_0_18_200))))
 (let ((?x67014 (- (- ?x67010 (* (* 2.0 l_0_18_197) l_0_18_201)) (* (* 2.0 l_0_18_198) l_0_18_202))))
 (let ((?x67018 (- (- ?x67014 (* (* 2.0 l_0_18_199) l_0_18_203)) (* (* 2.0 l_0_18_217) l_0_18_221))))
 (let ((?x67022 (- (- ?x67018 (* (* 2.0 l_0_18_218) l_0_18_222)) (* (* 2.0 l_0_18_219) l_0_18_223))))
 (let ((?x67026 (- (- ?x67022 (* (* 2.0 l_0_18_220) l_0_18_224)) (* (* 2.0 l_0_18_238) l_0_18_242))))
 (let ((?x67030 (- (- ?x67026 (* (* 2.0 l_0_18_239) l_0_18_243)) (* (* 2.0 l_0_18_240) l_0_18_244))))
 (let ((?x67034 (- (- ?x67030 (* (* 2.0 l_0_18_241) l_0_18_245)) (* (* 2.0 l_0_18_259) l_0_18_263))))
 (let ((?x67038 (- (- ?x67034 (* (* 2.0 l_0_18_260) l_0_18_264)) (* (* 2.0 l_0_18_261) l_0_18_265))))
 (let ((?x67043 (- (- (- ?x67038 (* (* 2.0 l_0_18_262) l_0_18_266)) ?x66322) (* (* 2.0 l_0_18_280) l_0_18_284))))
 (let ((?x67047 (- (- ?x67043 (* (* 2.0 l_0_18_281) l_0_18_285)) (* (* 2.0 l_0_18_282) l_0_18_286))))
 (let ((?x67053 (- (- (- (- ?x67047 (* (* 2.0 l_0_18_283) l_0_18_287)) ?x66324) ?x66326) (* (* 2.0 l_0_18_301) l_0_18_305))))
 (let ((?x67057 (- (- ?x67053 (* (* 2.0 l_0_18_302) l_0_18_306)) (* (* 2.0 l_0_18_303) l_0_18_307))))
 (let ((?x67062 (+ (+ (- (- ?x67057 (* (* 2.0 l_0_18_304) l_0_18_308)) ?x66328) ?x66961) ?x66963)))
 (let ((?x67074 (+ (- (- (- (- (- (- ?x67062 ?x67063) ?x67065) ?x67067) ?x67069) ?x66965) ?x66967) ?x67073)))
 (= (+ (+ (+ ?x67074 ?x67075) ?x67077) ?x67079) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66559 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x66556 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x66553 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x66550 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x66547 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x67200 (* l_0_18_309 l_0_18_309)))
 (let ((?x67198 (* l_0_18_308 l_0_18_308)))
 (let ((?x67196 (* l_0_18_307 l_0_18_307)))
 (let ((?x67194 (* l_0_18_306 l_0_18_306)))
 (let ((?x67192 (* l_0_18_305 l_0_18_305)))
 (let ((?x67190 (* l_0_18_288 l_0_18_288)))
 (let ((?x67188 (* l_0_18_287 l_0_18_287)))
 (let ((?x67186 (* l_0_18_286 l_0_18_286)))
 (let ((?x67184 (* l_0_18_285 l_0_18_285)))
 (let ((?x67182 (* l_0_18_284 l_0_18_284)))
 (let ((?x67180 (* l_0_18_267 l_0_18_267)))
 (let ((?x67178 (* l_0_18_266 l_0_18_266)))
 (let ((?x67176 (* l_0_18_265 l_0_18_265)))
 (let ((?x67174 (* l_0_18_264 l_0_18_264)))
 (let ((?x67172 (* l_0_18_263 l_0_18_263)))
 (let ((?x67170 (* l_0_18_246 l_0_18_246)))
 (let ((?x67168 (* l_0_18_245 l_0_18_245)))
 (let ((?x67166 (* l_0_18_244 l_0_18_244)))
 (let ((?x67164 (* l_0_18_243 l_0_18_243)))
 (let ((?x67162 (* l_0_18_242 l_0_18_242)))
 (let ((?x67160 (* l_0_18_225 l_0_18_225)))
 (let ((?x67158 (* l_0_18_224 l_0_18_224)))
 (let ((?x67156 (* l_0_18_223 l_0_18_223)))
 (let ((?x67154 (* l_0_18_222 l_0_18_222)))
 (let ((?x67152 (* l_0_18_221 l_0_18_221)))
 (let ((?x67150 (* l_0_18_204 l_0_18_204)))
 (let ((?x67148 (* l_0_18_203 l_0_18_203)))
 (let ((?x67146 (* l_0_18_202 l_0_18_202)))
 (let ((?x67144 (* l_0_18_201 l_0_18_201)))
 (let ((?x67142 (* l_0_18_200 l_0_18_200)))
 (let ((?x65380 (* l_0_18_15 l_0_18_15)))
 (let ((?x66544 (* 6.0 ?x65380)))
 (let ((?x65378 (* l_0_18_14 l_0_18_14)))
 (let ((?x66538 (* 6.0 ?x65378)))
 (let ((?x65376 (* l_0_18_13 l_0_18_13)))
 (let ((?x66527 (* 6.0 ?x65376)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65699 (* ?x63403 l_0_18_138)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x65696 (* ?x63400 l_0_18_137)))
 (let ((?x54818 (* l_0_18_12 l_0_18_12)))
 (let ((?x66525 (* 6.0 ?x54818)))
 (let ((?x65394 (* l_0_18_11 l_0_18_11)))
 (let ((?x66524 (* 6.0 ?x65394)))
 (let ((?x66526 (+ ?x66524 ?x66525)))
 (let ((?x67145 (- (- (+ (+ (+ (- (- ?x66526 ?x65696) ?x65699) ?x66527) ?x66538) ?x66544) ?x67142) ?x67144)))
 (let ((?x67159 (- (- (- (- (- (- (- ?x67145 ?x67146) ?x67148) ?x67150) ?x67152) ?x67154) ?x67156) ?x67158)))
 (let ((?x67173 (- (- (- (- (- (- (- ?x67159 ?x67160) ?x67162) ?x67164) ?x67166) ?x67168) ?x67170) ?x67172)))
 (let ((?x67187 (- (- (- (- (- (- (- ?x67173 ?x67174) ?x67176) ?x67178) ?x67180) ?x67182) ?x67184) ?x67186)))
 (let ((?x67201 (- (- (- (- (- (- (- ?x67187 ?x67188) ?x67190) ?x67192) ?x67194) ?x67196) ?x67198) ?x67200)))
 (let ((?x67209 (- (- (- (- (- (- ?x67201 ?x66547) ?x66550) ?x66553) ?x66556) ?x66559) (* (* 1.0 l_0_18_53) l_0_18_53))))
 (let ((?x67215 (- (- ?x67209 (* (* 1.0 l_0_18_54) l_0_18_54)) (* (* 1.0 l_0_18_55) l_0_18_55))))
 (let ((?x67221 (- (- ?x67215 (* (* 1.0 l_0_18_56) l_0_18_56)) (* (* 1.0 l_0_18_57) l_0_18_57))))
 (let ((?x67225 (+ (+ ?x67221 (* 1.0 (* l_0_18_74 l_0_18_74))) (* 1.0 (* l_0_18_75 l_0_18_75)))))
 (let ((?x67229 (+ (+ ?x67225 (* 1.0 (* l_0_18_76 l_0_18_76))) (* 1.0 (* l_0_18_77 l_0_18_77)))))
 (= (+ ?x67229 (* 1.0 (* l_0_18_78 l_0_18_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x67401 (* ?x63872 l_0_18_96)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x67399 (* ?x63869 l_0_18_95)))
 (let ((?x67397 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x67394 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x67391 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x67388 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x67385 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x67382 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x67379 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x67376 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x67373 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x67370 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x66686 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66683 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66680 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66677 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66674 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x67272 (* ?x63747 l_0_18_180)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x67270 (* ?x63744 l_0_18_179)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x67268 (* ?x63735 l_0_18_159)))
 (let ((?x66659 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x67265 (* ?x63732 l_0_18_158)))
 (let ((?x66650 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x65701 (* 12.0 l_0_18_13)))
 (let ((?x66635 (* ?x65701 l_0_18_18)))
 (let ((?x63403 (* 2.0 l_0_18_129)))
 (let ((?x65839 (* ?x63403 l_0_18_143)))
 (let ((?x63400 (* 2.0 l_0_18_128)))
 (let ((?x65836 (* ?x63400 l_0_18_142)))
 (let ((?x55157 (* 12.0 l_0_18_12)))
 (let ((?x66633 (* ?x55157 l_0_18_17)))
 (let ((?x55150 (* 12.0 l_0_18_11)))
 (let ((?x66627 (* ?x55150 l_0_18_16)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x67257 (* ?x63729 l_0_18_117)))
 (let ((?x67261 (- (+ (+ (+ (* (* 2.0 l_0_18_107) l_0_18_116) ?x67257) ?x66627) ?x66633) ?x65836)))
 (let ((?x67271 (+ (- (+ (- (+ (+ (- ?x67261 ?x65839) ?x66635) ?x66650) ?x67265) ?x66659) ?x67268) ?x67270)))
 (let ((?x67279 (- (- (+ ?x67271 ?x67272) (* (* 2.0 l_0_18_200) l_0_18_205)) (* (* 2.0 l_0_18_201) l_0_18_206))))
 (let ((?x67285 (- (- ?x67279 (* (* 2.0 l_0_18_202) l_0_18_207)) (* (* 2.0 l_0_18_203) l_0_18_208))))
 (let ((?x67291 (- (- ?x67285 (* (* 2.0 l_0_18_204) l_0_18_209)) (* (* 2.0 l_0_18_221) l_0_18_226))))
 (let ((?x67297 (- (- ?x67291 (* (* 2.0 l_0_18_222) l_0_18_227)) (* (* 2.0 l_0_18_223) l_0_18_228))))
 (let ((?x67303 (- (- ?x67297 (* (* 2.0 l_0_18_224) l_0_18_229)) (* (* 2.0 l_0_18_225) l_0_18_230))))
 (let ((?x67309 (- (- ?x67303 (* (* 2.0 l_0_18_242) l_0_18_247)) (* (* 2.0 l_0_18_243) l_0_18_248))))
 (let ((?x67315 (- (- ?x67309 (* (* 2.0 l_0_18_244) l_0_18_249)) (* (* 2.0 l_0_18_245) l_0_18_250))))
 (let ((?x67321 (- (- ?x67315 (* (* 2.0 l_0_18_246) l_0_18_251)) (* (* 2.0 l_0_18_263) l_0_18_268))))
 (let ((?x67327 (- (- ?x67321 (* (* 2.0 l_0_18_264) l_0_18_269)) (* (* 2.0 l_0_18_265) l_0_18_270))))
 (let ((?x67333 (- (- ?x67327 (* (* 2.0 l_0_18_266) l_0_18_271)) (* (* 2.0 l_0_18_267) l_0_18_272))))
 (let ((?x67339 (- (- ?x67333 (* (* 2.0 l_0_18_284) l_0_18_289)) (* (* 2.0 l_0_18_285) l_0_18_290))))
 (let ((?x67345 (- (- ?x67339 (* (* 2.0 l_0_18_286) l_0_18_291)) (* (* 2.0 l_0_18_287) l_0_18_292))))
 (let ((?x67351 (- (- ?x67345 (* (* 2.0 l_0_18_288) l_0_18_293)) (* (* 2.0 l_0_18_305) l_0_18_310))))
 (let ((?x67357 (- (- ?x67351 (* (* 2.0 l_0_18_306) l_0_18_311)) (* (* 2.0 l_0_18_307) l_0_18_312))))
 (let ((?x67363 (- (- ?x67357 (* (* 2.0 l_0_18_308) l_0_18_313)) (* (* 2.0 l_0_18_309) l_0_18_314))))
 (let ((?x67374 (- (- (- (- (- (- (- ?x67363 ?x66674) ?x66677) ?x66680) ?x66683) ?x66686) ?x67370) ?x67373)))
 (let ((?x67395 (+ (+ (+ (+ (- (- (- ?x67374 ?x67376) ?x67379) ?x67382) ?x67385) ?x67388) ?x67391) ?x67394)))
 (= (- (- (+ ?x67395 ?x67397) ?x67399) ?x67401) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64675 (* l_0_18_64 l_0_18_64)))
 (let ((?x64707 (* 3.0 ?x64675)))
 (= (+ (* (* (- 3.0) l_0_18_43) l_0_18_43) ?x64707) 0.0))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65069 (* ?x65068 l_0_18_86)))
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65124 (* ?x64862 l_0_18_67)))
 (let ((?x64857 (* 6.0 l_0_18_43)))
 (let ((?x65119 (* ?x64857 l_0_18_46)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65041 (* ?x65040 l_0_18_170)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65035 (* ?x65034 l_0_18_149)))
 (let ((?x67505 (+ (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_107) ?x65035) ?x65041) ?x65119) ?x65124)))
 (= (+ ?x67505 ?x65069) 0.0)))))))))))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65155 (* ?x64862 l_0_18_70)))
 (= (+ (* (* (- 6.0) l_0_18_43) l_0_18_49) ?x65155) 0.0))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65200 (* ?x64862 l_0_18_74)))
 (= (+ (* (* (- 6.0) l_0_18_43) l_0_18_53) ?x65200) 0.0))))
(assert
 (let ((?x64862 (* 6.0 l_0_18_64)))
 (let ((?x65239 (* ?x64862 l_0_18_79)))
 (= (+ (* (* (- 6.0) l_0_18_43) l_0_18_58) ?x65239) 0.0))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x65937 (* ?x63872 l_0_18_89)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x65935 (* ?x63869 l_0_18_88)))
 (let ((?x63356 (* l_0_18_69 l_0_18_69)))
 (let ((?x63357 (* 3.0 ?x63356)))
 (let ((?x63353 (* l_0_18_68 l_0_18_68)))
 (let ((?x63354 (* 3.0 ?x63353)))
 (let ((?x63350 (* l_0_18_67 l_0_18_67)))
 (let ((?x63351 (* 3.0 ?x63350)))
 (let ((?x63336 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x63333 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x63330 (* (* 3.0 l_0_18_46) l_0_18_46)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x65867 (* ?x63747 l_0_18_173)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x65865 (* ?x63744 l_0_18_172)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x65857 (* ?x63735 l_0_18_152)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x65855 (* ?x63732 l_0_18_151)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x55498 (* ?x63729 l_0_18_110)))
 (let ((?x67530 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_109) ?x55498) ?x65855) ?x65857) ?x65865)))
 (let ((?x67537 (+ (+ (+ (- (- (- (- ?x67530 ?x65867) ?x63330) ?x63333) ?x63336) ?x63351) ?x63354) ?x63357)))
 (= (+ (+ ?x67537 ?x65935) ?x65937) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x63873 (* ?x63872 l_0_18_92)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x63870 (* ?x63869 l_0_18_91)))
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66087 (* ?x66086 l_0_18_72)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66083 (* ?x66082 l_0_18_71)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66079 (* ?x66078 l_0_18_70)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66071 (* ?x66070 l_0_18_51)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66067 (* ?x66066 l_0_18_50)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66063 (* ?x66062 l_0_18_49)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x63748 (* ?x63747 l_0_18_176)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x63745 (* ?x63744 l_0_18_175)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x63736 (* ?x63735 l_0_18_155)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x63733 (* ?x63732 l_0_18_154)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x63730 (* ?x63729 l_0_18_113)))
 (let ((?x46696 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_112) ?x63730) ?x63733) ?x63736) ?x63745)))
 (let ((?x67543 (+ (+ (+ (- (- (- (- ?x46696 ?x63748) ?x66063) ?x66067) ?x66071) ?x66079) ?x66083) ?x66087)))
 (= (+ (+ ?x67543 ?x63870) ?x63873) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63872 (* 2.0 l_0_18_87)))
 (let ((?x67401 (* ?x63872 l_0_18_96)))
 (let ((?x63869 (* 2.0 l_0_18_86)))
 (let ((?x67399 (* ?x63869 l_0_18_95)))
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66146 (* ?x66086 l_0_18_76)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66144 (* ?x66082 l_0_18_75)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66142 (* ?x66078 l_0_18_74)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66138 (* ?x66070 l_0_18_55)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66136 (* ?x66066 l_0_18_54)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66134 (* ?x66062 l_0_18_53)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x67272 (* ?x63747 l_0_18_180)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x67270 (* ?x63744 l_0_18_179)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x67268 (* ?x63735 l_0_18_159)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x67265 (* ?x63732 l_0_18_158)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x67257 (* ?x63729 l_0_18_117)))
 (let ((?x56596 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_116) ?x67257) ?x67265) ?x67268) ?x67270)))
 (let ((?x67551 (+ (+ (+ (- (- (- (- ?x56596 ?x67272) ?x66134) ?x66136) ?x66138) ?x66142) ?x66144) ?x66146)))
 (= (+ (+ ?x67551 ?x67399) ?x67401) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x66086 (* 6.0 l_0_18_69)))
 (let ((?x66207 (* ?x66086 l_0_18_81)))
 (let ((?x66082 (* 6.0 l_0_18_68)))
 (let ((?x66205 (* ?x66082 l_0_18_80)))
 (let ((?x66078 (* 6.0 l_0_18_67)))
 (let ((?x66203 (* ?x66078 l_0_18_79)))
 (let ((?x66070 (* 6.0 l_0_18_48)))
 (let ((?x66199 (* ?x66070 l_0_18_60)))
 (let ((?x66066 (* 6.0 l_0_18_47)))
 (let ((?x66197 (* ?x66066 l_0_18_59)))
 (let ((?x66062 (* 6.0 l_0_18_46)))
 (let ((?x66195 (* ?x66062 l_0_18_58)))
 (let ((?x63747 (* 2.0 l_0_18_171)))
 (let ((?x64272 (* ?x63747 l_0_18_185)))
 (let ((?x63744 (* 2.0 l_0_18_170)))
 (let ((?x64270 (* ?x63744 l_0_18_184)))
 (let ((?x63735 (* 2.0 l_0_18_150)))
 (let ((?x64262 (* ?x63735 l_0_18_164)))
 (let ((?x63732 (* 2.0 l_0_18_149)))
 (let ((?x64260 (* ?x63732 l_0_18_163)))
 (let ((?x63729 (* 2.0 l_0_18_108)))
 (let ((?x64258 (* ?x63729 l_0_18_122)))
 (let ((?x63726 (* 2.0 l_0_18_107)))
 (let ((?x64256 (* ?x63726 l_0_18_121)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x64254 (* ?x64253 l_0_18_87)))
 (let ((?x64250 (* 2.0 l_0_18_100)))
 (let ((?x64251 (* ?x64250 l_0_18_86)))
 (let ((?x46690 (- (- (+ (+ (- (- (+ ?x64251 ?x64254) ?x64256) ?x64258) ?x64260) ?x64262) ?x64270) ?x64272)))
 (= (+ (+ (+ (- (- (- ?x46690 ?x66195) ?x66197) ?x66199) ?x66203) ?x66205) ?x66207) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x64586 (* l_0_18_73 l_0_18_73)))
 (let ((?x66287 (* 3.0 ?x64586)))
 (let ((?x64583 (* l_0_18_72 l_0_18_72)))
 (let ((?x66285 (* 3.0 ?x64583)))
 (let ((?x64580 (* l_0_18_71 l_0_18_71)))
 (let ((?x66283 (* 3.0 ?x64580)))
 (let ((?x64577 (* l_0_18_70 l_0_18_70)))
 (let ((?x66281 (* 3.0 ?x64577)))
 (let ((?x66275 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x66272 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x66269 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x57386 (+ (- (- (- (* (* (- 3.0) l_0_18_49) l_0_18_49) ?x66269) ?x66272) ?x66275) ?x66281)))
 (= (+ (+ (+ ?x57386 ?x66283) ?x66285) ?x66287) 0.0))))))))))))))
(assert
 (let ((?x66357 (* 6.0 l_0_18_73)))
 (let ((?x66358 (* ?x66357 l_0_18_77)))
 (let ((?x66354 (* 6.0 l_0_18_72)))
 (let ((?x66355 (* ?x66354 l_0_18_76)))
 (let ((?x66351 (* 6.0 l_0_18_71)))
 (let ((?x66352 (* ?x66351 l_0_18_75)))
 (let ((?x66348 (* 6.0 l_0_18_70)))
 (let ((?x66349 (* ?x66348 l_0_18_74)))
 (let ((?x66342 (* 6.0 l_0_18_52)))
 (let ((?x66343 (* ?x66342 l_0_18_56)))
 (let ((?x66339 (* 6.0 l_0_18_51)))
 (let ((?x66340 (* ?x66339 l_0_18_55)))
 (let ((?x66336 (* 6.0 l_0_18_50)))
 (let ((?x66337 (* ?x66336 l_0_18_54)))
 (let ((?x67562 (+ (- (- (- (* (* (- 6.0) l_0_18_49) l_0_18_53) ?x66337) ?x66340) ?x66343) ?x66349)))
 (= (+ (+ (+ ?x67562 ?x66352) ?x66355) ?x66358) 0.0)))))))))))))))))
(assert
 (let ((?x66357 (* 6.0 l_0_18_73)))
 (let ((?x66456 (* ?x66357 l_0_18_82)))
 (let ((?x66354 (* 6.0 l_0_18_72)))
 (let ((?x66454 (* ?x66354 l_0_18_81)))
 (let ((?x66351 (* 6.0 l_0_18_71)))
 (let ((?x66452 (* ?x66351 l_0_18_80)))
 (let ((?x66348 (* 6.0 l_0_18_70)))
 (let ((?x66450 (* ?x66348 l_0_18_79)))
 (let ((?x66342 (* 6.0 l_0_18_52)))
 (let ((?x66445 (* ?x66342 l_0_18_61)))
 (let ((?x66339 (* 6.0 l_0_18_51)))
 (let ((?x66443 (* ?x66339 l_0_18_60)))
 (let ((?x66336 (* 6.0 l_0_18_50)))
 (let ((?x66441 (* ?x66336 l_0_18_59)))
 (let ((?x67583 (+ (- (- (- (* (* (- 6.0) l_0_18_49) l_0_18_58) ?x66441) ?x66443) ?x66445) ?x66450)))
 (= (+ (+ (+ ?x67583 ?x66452) ?x66454) ?x66456) 0.0)))))))))))))))))
(assert
 (let ((?x66588 (* l_0_18_78 l_0_18_78)))
 (let ((?x66589 (* 3.0 ?x66588)))
 (let ((?x66585 (* l_0_18_77 l_0_18_77)))
 (let ((?x66586 (* 3.0 ?x66585)))
 (let ((?x66582 (* l_0_18_76 l_0_18_76)))
 (let ((?x66583 (* 3.0 ?x66582)))
 (let ((?x66579 (* l_0_18_75 l_0_18_75)))
 (let ((?x66580 (* 3.0 ?x66579)))
 (let ((?x66576 (* l_0_18_74 l_0_18_74)))
 (let ((?x66577 (* 3.0 ?x66576)))
 (let ((?x66574 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x66571 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x66568 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x66565 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x67592 (- (- (- (- (* (* (- 3.0) l_0_18_53) l_0_18_53) ?x66565) ?x66568) ?x66571) ?x66574)))
 (= (+ (+ (+ (+ (+ ?x67592 ?x66577) ?x66580) ?x66583) ?x66586) ?x66589) 0.0)))))))))))))))))
(assert
 (let ((?x66716 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x66713 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x66710 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x66707 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x66704 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x66701 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x66698 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x66695 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x66692 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x67604 (- (- (- (- (* (* (- 6.0) l_0_18_53) l_0_18_58) ?x66692) ?x66695) ?x66698) ?x66701)))
 (= (+ (+ (+ (+ (+ ?x67604 ?x66704) ?x66707) ?x66710) ?x66713) ?x66716) 0.0))))))))))))
(assert
 (let ((?x64409 (* l_0_18_84 l_0_18_84)))
 (let ((?x66870 (* 3.0 ?x64409)))
 (let ((?x64406 (* l_0_18_83 l_0_18_83)))
 (let ((?x66868 (* 3.0 ?x64406)))
 (let ((?x64403 (* l_0_18_82 l_0_18_82)))
 (let ((?x66866 (* 3.0 ?x64403)))
 (let ((?x64400 (* l_0_18_81 l_0_18_81)))
 (let ((?x66864 (* 3.0 ?x64400)))
 (let ((?x64397 (* l_0_18_80 l_0_18_80)))
 (let ((?x66862 (* 3.0 ?x64397)))
 (let ((?x64394 (* l_0_18_79 l_0_18_79)))
 (let ((?x66860 (* 3.0 ?x64394)))
 (let ((?x66858 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x66855 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x66852 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x66849 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x66846 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x67625 (- (- (- (- (* (* (- 3.0) l_0_18_58) l_0_18_58) ?x66846) ?x66849) ?x66852) ?x66855)))
 (let ((?x67632 (+ (+ (+ (+ (+ (+ (- ?x67625 ?x66858) ?x66860) ?x66862) ?x66864) ?x66866) ?x66868) ?x66870)))
 (= ?x67632 0.0)))))))))))))))))))))
(assert
 (let ((?x64586 (* l_0_18_73 l_0_18_73)))
 (let ((?x64583 (* l_0_18_72 l_0_18_72)))
 (let ((?x64580 (* l_0_18_71 l_0_18_71)))
 (let ((?x64577 (* l_0_18_70 l_0_18_70)))
 (let ((?x33384 (* l_0_18_52 l_0_18_52)))
 (let ((?x53914 (* l_0_18_51 l_0_18_51)))
 (let ((?x35792 (+ (+ (+ (* l_0_18_49 l_0_18_49) (* l_0_18_50 l_0_18_50)) ?x53914) ?x33384)))
 (= (- (- (- (- ?x35792 ?x64577) ?x64580) ?x64583) ?x64586) 0.0)))))))))
(assert
 (let ((?x63866 (* 2.0 l_0_18_73)))
 (let ((?x67079 (* ?x63866 l_0_18_77)))
 (let ((?x63863 (* 2.0 l_0_18_72)))
 (let ((?x67077 (* ?x63863 l_0_18_76)))
 (let ((?x63860 (* 2.0 l_0_18_71)))
 (let ((?x67075 (* ?x63860 l_0_18_75)))
 (let ((?x63857 (* 2.0 l_0_18_70)))
 (let ((?x67073 (* ?x63857 l_0_18_74)))
 (let ((?x63850 (* 2.0 l_0_18_52)))
 (let ((?x67069 (* ?x63850 l_0_18_56)))
 (let ((?x63847 (* 2.0 l_0_18_51)))
 (let ((?x67067 (* ?x63847 l_0_18_55)))
 (let ((?x63844 (* 2.0 l_0_18_50)))
 (let ((?x67065 (* ?x63844 l_0_18_54)))
 (let ((?x63841 (* 2.0 l_0_18_49)))
 (let ((?x67063 (* ?x63841 l_0_18_53)))
 (let ((?x66256 (* l_0_18_136 l_0_18_136)))
 (let ((?x66254 (* l_0_18_135 l_0_18_135)))
 (let ((?x67643 (- (- (* (- l_0_18_133) l_0_18_133) (* l_0_18_134 l_0_18_134)) ?x66254)))
 (let ((?x67650 (- (- (+ (+ (+ (+ (- ?x67643 ?x66256) ?x67063) ?x67065) ?x67067) ?x67069) ?x67073) ?x67075)))
 (= (- (- ?x67650 ?x67077) ?x67079) 0.0))))))))))))))))))))))
(assert
 (let ((?x67706 (* l_0_18_94 l_0_18_94)))
 (let ((?x67704 (* l_0_18_93 l_0_18_93)))
 (let ((?x67702 (* l_0_18_92 l_0_18_92)))
 (let ((?x67700 (* l_0_18_91 l_0_18_91)))
 (let ((?x63866 (* 2.0 l_0_18_73)))
 (let ((?x63867 (* ?x63866 l_0_18_82)))
 (let ((?x63863 (* 2.0 l_0_18_72)))
 (let ((?x63864 (* ?x63863 l_0_18_81)))
 (let ((?x63860 (* 2.0 l_0_18_71)))
 (let ((?x63861 (* ?x63860 l_0_18_80)))
 (let ((?x63857 (* 2.0 l_0_18_70)))
 (let ((?x63858 (* ?x63857 l_0_18_79)))
 (let ((?x63850 (* 2.0 l_0_18_52)))
 (let ((?x63851 (* ?x63850 l_0_18_61)))
 (let ((?x63847 (* 2.0 l_0_18_51)))
 (let ((?x63848 (* ?x63847 l_0_18_60)))
 (let ((?x63844 (* 2.0 l_0_18_50)))
 (let ((?x63845 (* ?x63844 l_0_18_59)))
 (let ((?x63841 (* 2.0 l_0_18_49)))
 (let ((?x63842 (* ?x63841 l_0_18_58)))
 (let ((?x67690 (* l_0_18_178 l_0_18_178)))
 (let ((?x67688 (* l_0_18_177 l_0_18_177)))
 (let ((?x67686 (* l_0_18_176 l_0_18_176)))
 (let ((?x67684 (* l_0_18_175 l_0_18_175)))
 (let ((?x67682 (* l_0_18_157 l_0_18_157)))
 (let ((?x67680 (* l_0_18_156 l_0_18_156)))
 (let ((?x67678 (* l_0_18_155 l_0_18_155)))
 (let ((?x67676 (* l_0_18_154 l_0_18_154)))
 (let ((?x67674 (* l_0_18_115 l_0_18_115)))
 (let ((?x67672 (* l_0_18_114 l_0_18_114)))
 (let ((?x67673 (+ (+ (* l_0_18_112 l_0_18_112) (* l_0_18_113 l_0_18_113)) ?x67672)))
 (let ((?x67687 (+ (+ (- (- (- (- (+ ?x67673 ?x67674) ?x67676) ?x67678) ?x67680) ?x67682) ?x67684) ?x67686)))
 (let ((?x67696 (- (+ (+ (+ (+ (+ (+ ?x67687 ?x67688) ?x67690) ?x63842) ?x63845) ?x63848) ?x63851) ?x63858)))
 (let ((?x67707 (- (- (- (- (- (- (- ?x67696 ?x63861) ?x63864) ?x63867) ?x67700) ?x67702) ?x67704) ?x67706)))
 (= ?x67707 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66588 (* l_0_18_78 l_0_18_78)))
 (let ((?x66585 (* l_0_18_77 l_0_18_77)))
 (let ((?x66582 (* l_0_18_76 l_0_18_76)))
 (let ((?x66579 (* l_0_18_75 l_0_18_75)))
 (let ((?x66576 (* l_0_18_74 l_0_18_74)))
 (let ((?x56464 (* l_0_18_57 l_0_18_57)))
 (let ((?x56461 (* l_0_18_56 l_0_18_56)))
 (let ((?x45062 (* l_0_18_55 l_0_18_55)))
 (let ((?x44965 (* l_0_18_54 l_0_18_54)))
 (let ((?x44877 (* l_0_18_53 l_0_18_53)))
 (let ((?x66319 (* 2.0 l_0_18_136)))
 (let ((?x66320 (* ?x66319 l_0_18_140)))
 (let ((?x66316 (* 2.0 l_0_18_135)))
 (let ((?x66317 (* ?x66316 l_0_18_139)))
 (let ((?x66313 (* 2.0 l_0_18_134)))
 (let ((?x66314 (* ?x66313 l_0_18_138)))
 (let ((?x67734 (+ (- (- (- (* (* (- 2.0) l_0_18_133) l_0_18_137) ?x66314) ?x66317) ?x66320) ?x44877)))
 (let ((?x67741 (- (- (- (+ (+ (+ (+ ?x67734 ?x44965) ?x45062) ?x56461) ?x56464) ?x66576) ?x66579) ?x66582)))
 (= (- (- ?x67741 ?x66585) ?x66588) 0.0))))))))))))))))))))
(assert
 (let ((?x67812 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x67809 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x67806 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x67803 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x67397 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x67394 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x67391 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x67388 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x67385 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x67382 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x67379 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x67376 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x67373 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x67370 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x67789 (* 2.0 l_0_18_178)))
 (let ((?x67790 (* ?x67789 l_0_18_182)))
 (let ((?x67786 (* 2.0 l_0_18_177)))
 (let ((?x67787 (* ?x67786 l_0_18_181)))
 (let ((?x67783 (* 2.0 l_0_18_176)))
 (let ((?x67784 (* ?x67783 l_0_18_180)))
 (let ((?x67780 (* 2.0 l_0_18_175)))
 (let ((?x67781 (* ?x67780 l_0_18_179)))
 (let ((?x67777 (* 2.0 l_0_18_157)))
 (let ((?x67778 (* ?x67777 l_0_18_161)))
 (let ((?x67774 (* 2.0 l_0_18_156)))
 (let ((?x67775 (* ?x67774 l_0_18_160)))
 (let ((?x67771 (* 2.0 l_0_18_155)))
 (let ((?x67772 (* ?x67771 l_0_18_159)))
 (let ((?x67768 (* 2.0 l_0_18_154)))
 (let ((?x67769 (* ?x67768 l_0_18_158)))
 (let ((?x66319 (* 2.0 l_0_18_136)))
 (let ((?x66409 (* ?x66319 l_0_18_145)))
 (let ((?x66316 (* 2.0 l_0_18_135)))
 (let ((?x66407 (* ?x66316 l_0_18_144)))
 (let ((?x66313 (* 2.0 l_0_18_134)))
 (let ((?x66405 (* ?x66313 l_0_18_143)))
 (let ((?x66310 (* 2.0 l_0_18_133)))
 (let ((?x66403 (* ?x66310 l_0_18_142)))
 (let ((?x67761 (* 2.0 l_0_18_115)))
 (let ((?x67762 (* ?x67761 l_0_18_119)))
 (let ((?x67758 (* 2.0 l_0_18_114)))
 (let ((?x67759 (* ?x67758 l_0_18_118)))
 (let ((?x24525 (* 2.0 l_0_18_113)))
 (let ((?x36018 (* ?x24525 l_0_18_117)))
 (let ((?x67764 (- (+ (+ (+ (* (* 2.0 l_0_18_112) l_0_18_116) ?x36018) ?x67759) ?x67762) ?x66403)))
 (let ((?x67779 (- (- (- (- (- (- (- ?x67764 ?x66405) ?x66407) ?x66409) ?x67769) ?x67772) ?x67775) ?x67778)))
 (let ((?x67794 (+ (+ (+ (+ (+ (+ (+ ?x67779 ?x67781) ?x67784) ?x67787) ?x67790) ?x67370) ?x67373) ?x67376)))
 (let ((?x67801 (- (- (- (- (- (+ (+ ?x67794 ?x67379) ?x67382) ?x67385) ?x67388) ?x67391) ?x67394) ?x67397)))
 (= (- (- (- (- ?x67801 ?x67803) ?x67806) ?x67809) ?x67812) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64409 (* l_0_18_84 l_0_18_84)))
 (let ((?x64406 (* l_0_18_83 l_0_18_83)))
 (let ((?x64403 (* l_0_18_82 l_0_18_82)))
 (let ((?x64400 (* l_0_18_81 l_0_18_81)))
 (let ((?x64397 (* l_0_18_80 l_0_18_80)))
 (let ((?x64394 (* l_0_18_79 l_0_18_79)))
 (let ((?x22438 (* l_0_18_63 l_0_18_63)))
 (let ((?x33236 (* l_0_18_62 l_0_18_62)))
 (let ((?x53743 (* l_0_18_61 l_0_18_61)))
 (let ((?x53737 (* l_0_18_60 l_0_18_60)))
 (let ((?x33225 (* l_0_18_59 l_0_18_59)))
 (let ((?x4683 (* l_0_18_58 l_0_18_58)))
 (let ((?x67789 (* 2.0 l_0_18_178)))
 (let ((?x67895 (* ?x67789 l_0_18_187)))
 (let ((?x67786 (* 2.0 l_0_18_177)))
 (let ((?x67893 (* ?x67786 l_0_18_186)))
 (let ((?x67783 (* 2.0 l_0_18_176)))
 (let ((?x67891 (* ?x67783 l_0_18_185)))
 (let ((?x67780 (* 2.0 l_0_18_175)))
 (let ((?x67889 (* ?x67780 l_0_18_184)))
 (let ((?x67777 (* 2.0 l_0_18_157)))
 (let ((?x67887 (* ?x67777 l_0_18_166)))
 (let ((?x67774 (* 2.0 l_0_18_156)))
 (let ((?x67885 (* ?x67774 l_0_18_165)))
 (let ((?x67771 (* 2.0 l_0_18_155)))
 (let ((?x67883 (* ?x67771 l_0_18_164)))
 (let ((?x67768 (* 2.0 l_0_18_154)))
 (let ((?x67881 (* ?x67768 l_0_18_163)))
 (let ((?x67761 (* 2.0 l_0_18_115)))
 (let ((?x67879 (* ?x67761 l_0_18_124)))
 (let ((?x67758 (* 2.0 l_0_18_114)))
 (let ((?x67877 (* ?x67758 l_0_18_123)))
 (let ((?x24525 (* 2.0 l_0_18_113)))
 (let ((?x67875 (* ?x24525 l_0_18_122)))
 (let ((?x22517 (* 2.0 l_0_18_112)))
 (let ((?x67873 (* ?x22517 l_0_18_121)))
 (let ((?x67870 (* 2.0 l_0_18_103)))
 (let ((?x67871 (* ?x67870 l_0_18_94)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x67868 (* ?x66797 l_0_18_93)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x67866 (* ?x64253 l_0_18_92)))
 (let ((?x67874 (+ (- (- (- (* (* (- 2.0) l_0_18_100) l_0_18_91) ?x67866) ?x67868) ?x67871) ?x67873)))
 (let ((?x67888 (- (- (- (- (+ (+ (+ ?x67874 ?x67875) ?x67877) ?x67879) ?x67881) ?x67883) ?x67885) ?x67887)))
 (let ((?x67899 (+ (+ (+ (+ (+ (+ (+ ?x67888 ?x67889) ?x67891) ?x67893) ?x67895) ?x4683) ?x33225) ?x53737)))
 (let ((?x67906 (- (- (- (- (+ (+ (+ ?x67899 ?x53743) ?x33236) ?x22438) ?x64394) ?x64397) ?x64400) ?x64403)))
 (= (- (- ?x67906 ?x64406) ?x64409) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67991 (* l_0_18_99 l_0_18_99)))
 (let ((?x67989 (* l_0_18_98 l_0_18_98)))
 (let ((?x67987 (* l_0_18_97 l_0_18_97)))
 (let ((?x67985 (* l_0_18_96 l_0_18_96)))
 (let ((?x67983 (* l_0_18_95 l_0_18_95)))
 (let ((?x67981 (* l_0_18_183 l_0_18_183)))
 (let ((?x67979 (* l_0_18_182 l_0_18_182)))
 (let ((?x67977 (* l_0_18_181 l_0_18_181)))
 (let ((?x67975 (* l_0_18_180 l_0_18_180)))
 (let ((?x67973 (* l_0_18_179 l_0_18_179)))
 (let ((?x67971 (* l_0_18_162 l_0_18_162)))
 (let ((?x67969 (* l_0_18_161 l_0_18_161)))
 (let ((?x67967 (* l_0_18_160 l_0_18_160)))
 (let ((?x67965 (* l_0_18_159 l_0_18_159)))
 (let ((?x67963 (* l_0_18_158 l_0_18_158)))
 (let ((?x66656 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66653 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66647 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66644 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66641 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x67956 (* l_0_18_120 l_0_18_120)))
 (let ((?x67954 (* l_0_18_119 l_0_18_119)))
 (let ((?x67952 (* l_0_18_118 l_0_18_118)))
 (let ((?x67953 (+ (+ (* l_0_18_116 l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x67952)))
 (let ((?x67962 (- (- (- (- (- (+ (+ ?x67953 ?x67954) ?x67956) ?x66641) ?x66644) ?x66647) ?x66653) ?x66656)))
 (let ((?x67976 (+ (+ (- (- (- (- (- ?x67962 ?x67963) ?x67965) ?x67967) ?x67969) ?x67971) ?x67973) ?x67975)))
 (let ((?x67990 (- (- (- (- (+ (+ (+ ?x67976 ?x67977) ?x67979) ?x67981) ?x67983) ?x67985) ?x67987) ?x67989)))
 (= (- ?x67990 ?x67991) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x68084 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x68081 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x68078 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x68075 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x68072 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x68069 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x68066 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x68063 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x68060 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x68057 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x66816 (* l_0_18_147 l_0_18_147)))
 (let ((?x66814 (* l_0_18_146 l_0_18_146)))
 (let ((?x66812 (* l_0_18_145 l_0_18_145)))
 (let ((?x66810 (* l_0_18_144 l_0_18_144)))
 (let ((?x66808 (* l_0_18_143 l_0_18_143)))
 (let ((?x66806 (* l_0_18_142 l_0_18_142)))
 (let ((?x68048 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x68045 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x68042 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x68039 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x68036 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x68033 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x67870 (* 2.0 l_0_18_103)))
 (let ((?x68030 (* ?x67870 l_0_18_98)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x68028 (* ?x66797 l_0_18_97)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x68026 (* ?x64253 l_0_18_96)))
 (let ((?x68034 (- (- (- (- (* (* (- 2.0) l_0_18_100) l_0_18_95) ?x68026) ?x68028) ?x68030) ?x68033)))
 (let ((?x68051 (- (- (+ (+ (+ (+ (+ ?x68034 ?x68036) ?x68039) ?x68042) ?x68045) ?x68048) ?x66806) ?x66808)))
 (let ((?x68064 (- (- (- (- (- (- (- ?x68051 ?x66810) ?x66812) ?x66814) ?x66816) ?x68057) ?x68060) ?x68063)))
 (let ((?x68085 (+ (+ (+ (+ (+ (- (- ?x68064 ?x68066) ?x68069) ?x68072) ?x68075) ?x68078) ?x68081) ?x68084)))
 (= ?x68085 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x68193 (* l_0_18_189 l_0_18_189)))
 (let ((?x68191 (* l_0_18_188 l_0_18_188)))
 (let ((?x68189 (* l_0_18_187 l_0_18_187)))
 (let ((?x68187 (* l_0_18_186 l_0_18_186)))
 (let ((?x68185 (* l_0_18_185 l_0_18_185)))
 (let ((?x68183 (* l_0_18_184 l_0_18_184)))
 (let ((?x68181 (* l_0_18_168 l_0_18_168)))
 (let ((?x68179 (* l_0_18_167 l_0_18_167)))
 (let ((?x68177 (* l_0_18_166 l_0_18_166)))
 (let ((?x68175 (* l_0_18_165 l_0_18_165)))
 (let ((?x68173 (* l_0_18_164 l_0_18_164)))
 (let ((?x68171 (* l_0_18_163 l_0_18_163)))
 (let ((?x68169 (* l_0_18_126 l_0_18_126)))
 (let ((?x68167 (* l_0_18_125 l_0_18_125)))
 (let ((?x68165 (* l_0_18_124 l_0_18_124)))
 (let ((?x68163 (* l_0_18_123 l_0_18_123)))
 (let ((?x68161 (* l_0_18_122 l_0_18_122)))
 (let ((?x68159 (* l_0_18_121 l_0_18_121)))
 (let ((?x68157 (* l_0_18_105 l_0_18_105)))
 (let ((?x68155 (* l_0_18_104 l_0_18_104)))
 (let ((?x68153 (* l_0_18_103 l_0_18_103)))
 (let ((?x68138 (* l_0_18_102 l_0_18_102)))
 (let ((?x68139 (- (- (* (- l_0_18_100) l_0_18_100) (* l_0_18_101 l_0_18_101)) ?x68138)))
 (let ((?x68166 (+ (+ (+ (+ (- (- (- ?x68139 ?x68153) ?x68155) ?x68157) ?x68159) ?x68161) ?x68163) ?x68165)))
 (let ((?x68180 (- (- (- (- (- (+ (+ ?x68166 ?x68167) ?x68169) ?x68171) ?x68173) ?x68175) ?x68177) ?x68179)))
 (let ((?x68194 (+ (+ (+ (+ (+ (+ (- ?x68180 ?x68181) ?x68183) ?x68185) ?x68187) ?x68189) ?x68191) ?x68193)))
 (= ?x68194 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x64759 (* l_0_18_85 l_0_18_85)))
 (let ((?x64755 (* l_0_18_169 l_0_18_169)))
 (let ((?x68235 (- (+ (* (- l_0_18_106) l_0_18_106) (* l_0_18_148 l_0_18_148)) ?x64755)))
 (= (+ ?x68235 ?x64759) 0.0)))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65241 (* ?x65068 l_0_18_88)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65223 (* ?x65040 l_0_18_172)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65219 (* ?x65034 l_0_18_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_109) ?x65219) ?x65223) ?x65241) 0.0))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65350 (* ?x65068 l_0_18_91)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65334 (* ?x65040 l_0_18_175)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65330 (* ?x65034 l_0_18_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_112) ?x65330) ?x65334) ?x65350) 0.0))))))))
(assert
 (let ((?x65068 (* 2.0 l_0_18_85)))
 (let ((?x65443 (* ?x65068 l_0_18_95)))
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65426 (* ?x65040 l_0_18_179)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65421 (* ?x65034 l_0_18_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_116) ?x65421) ?x65426) ?x65443) 0.0))))))))
(assert
 (let ((?x65040 (* 2.0 l_0_18_169)))
 (let ((?x65485 (* ?x65040 l_0_18_184)))
 (let ((?x65034 (* 2.0 l_0_18_148)))
 (let ((?x65482 (* ?x65034 l_0_18_163)))
 (let ((?x65025 (* 2.0 l_0_18_106)))
 (let ((?x65480 (* ?x65025 l_0_18_121)))
 (= (- (+ (- (* (* 2.0 l_0_18_100) l_0_18_85) ?x65480) ?x65482) ?x65485) 0.0))))))))
(assert
 (let ((?x66213 (* l_0_18_90 l_0_18_90)))
 (let ((?x66211 (* l_0_18_89 l_0_18_89)))
 (let ((?x66209 (* l_0_18_88 l_0_18_88)))
 (let ((?x66187 (* l_0_18_174 l_0_18_174)))
 (let ((?x66185 (* l_0_18_173 l_0_18_173)))
 (let ((?x66183 (* l_0_18_172 l_0_18_172)))
 (let ((?x66179 (* l_0_18_153 l_0_18_153)))
 (let ((?x66177 (* l_0_18_152 l_0_18_152)))
 (let ((?x66175 (* l_0_18_151 l_0_18_151)))
 (let ((?x8324 (* l_0_18_111 l_0_18_111)))
 (let ((?x68257 (- (- (* (- l_0_18_109) l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x8324)))
 (let ((?x68264 (+ (- (- (- (+ (+ (+ ?x68257 ?x66175) ?x66177) ?x66179) ?x66183) ?x66185) ?x66187) ?x66209)))
 (= (+ (+ ?x68264 ?x66211) ?x66213) 0.0))))))))))))))
(assert
 (let ((?x66464 (* 2.0 l_0_18_90)))
 (let ((?x66465 (* ?x66464 l_0_18_93)))
 (let ((?x66461 (* 2.0 l_0_18_89)))
 (let ((?x66462 (* ?x66461 l_0_18_92)))
 (let ((?x66458 (* 2.0 l_0_18_88)))
 (let ((?x66459 (* ?x66458 l_0_18_91)))
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66429 (* ?x66428 l_0_18_177)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66426 (* ?x66425 l_0_18_176)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66423 (* ?x66422 l_0_18_175)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66418 (* ?x66417 l_0_18_156)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66415 (* ?x66414 l_0_18_155)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66412 (* ?x66411 l_0_18_154)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66401 (* ?x66400 l_0_18_114)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66398 (* ?x66397 l_0_18_113)))
 (let ((?x68280 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_112) ?x66398) ?x66401) ?x66412) ?x66415)))
 (let ((?x68287 (+ (+ (+ (- (- (- (+ ?x68280 ?x66418) ?x66423) ?x66426) ?x66429) ?x66459) ?x66462) ?x66465)))
 (= ?x68287 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66464 (* 2.0 l_0_18_90)))
 (let ((?x66722 (* ?x66464 l_0_18_97)))
 (let ((?x66461 (* 2.0 l_0_18_89)))
 (let ((?x66720 (* ?x66461 l_0_18_96)))
 (let ((?x66458 (* 2.0 l_0_18_88)))
 (let ((?x66718 (* ?x66458 l_0_18_95)))
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66671 (* ?x66428 l_0_18_181)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66669 (* ?x66425 l_0_18_180)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66667 (* ?x66422 l_0_18_179)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66665 (* ?x66417 l_0_18_160)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66663 (* ?x66414 l_0_18_159)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66661 (* ?x66411 l_0_18_158)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66631 (* ?x66400 l_0_18_118)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66629 (* ?x66397 l_0_18_117)))
 (let ((?x36566 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_116) ?x66629) ?x66631) ?x66661) ?x66663)))
 (let ((?x68295 (+ (+ (+ (- (- (- (+ ?x36566 ?x66665) ?x66667) ?x66669) ?x66671) ?x66718) ?x66720) ?x66722)))
 (= ?x68295 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66428 (* 2.0 l_0_18_174)))
 (let ((?x66830 (* ?x66428 l_0_18_186)))
 (let ((?x66425 (* 2.0 l_0_18_173)))
 (let ((?x66828 (* ?x66425 l_0_18_185)))
 (let ((?x66422 (* 2.0 l_0_18_172)))
 (let ((?x66826 (* ?x66422 l_0_18_184)))
 (let ((?x66417 (* 2.0 l_0_18_153)))
 (let ((?x66822 (* ?x66417 l_0_18_165)))
 (let ((?x66414 (* 2.0 l_0_18_152)))
 (let ((?x66820 (* ?x66414 l_0_18_164)))
 (let ((?x66411 (* 2.0 l_0_18_151)))
 (let ((?x66818 (* ?x66411 l_0_18_163)))
 (let ((?x66400 (* 2.0 l_0_18_111)))
 (let ((?x66804 (* ?x66400 l_0_18_123)))
 (let ((?x66397 (* 2.0 l_0_18_110)))
 (let ((?x66802 (* ?x66397 l_0_18_122)))
 (let ((?x66394 (* 2.0 l_0_18_109)))
 (let ((?x66800 (* ?x66394 l_0_18_121)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x66798 (* ?x66797 l_0_18_90)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x45323 (* ?x64253 l_0_18_89)))
 (let ((?x68301 (- (- (+ (+ (* (* 2.0 l_0_18_100) l_0_18_88) ?x45323) ?x66798) ?x66800) ?x66802)))
 (let ((?x68308 (- (- (- (+ (+ (+ (- ?x68301 ?x66804) ?x66818) ?x66820) ?x66822) ?x66826) ?x66828) ?x66830)))
 (= ?x68308 0.0))))))))))))))))))))))))))
(assert
 (let ((?x67706 (* l_0_18_94 l_0_18_94)))
 (let ((?x67704 (* l_0_18_93 l_0_18_93)))
 (let ((?x67702 (* l_0_18_92 l_0_18_92)))
 (let ((?x67700 (* l_0_18_91 l_0_18_91)))
 (let ((?x67690 (* l_0_18_178 l_0_18_178)))
 (let ((?x67688 (* l_0_18_177 l_0_18_177)))
 (let ((?x67686 (* l_0_18_176 l_0_18_176)))
 (let ((?x67684 (* l_0_18_175 l_0_18_175)))
 (let ((?x67682 (* l_0_18_157 l_0_18_157)))
 (let ((?x67680 (* l_0_18_156 l_0_18_156)))
 (let ((?x67678 (* l_0_18_155 l_0_18_155)))
 (let ((?x67676 (* l_0_18_154 l_0_18_154)))
 (let ((?x67674 (* l_0_18_115 l_0_18_115)))
 (let ((?x67672 (* l_0_18_114 l_0_18_114)))
 (let ((?x68316 (- (- (* (- l_0_18_112) l_0_18_112) (* l_0_18_113 l_0_18_113)) ?x67672)))
 (let ((?x68323 (- (- (+ (+ (+ (+ (- ?x68316 ?x67674) ?x67676) ?x67678) ?x67680) ?x67682) ?x67684) ?x67686)))
 (= (+ (+ (+ (+ (- (- ?x68323 ?x67688) ?x67690) ?x67700) ?x67702) ?x67704) ?x67706) 0.0))))))))))))))))))
(assert
 (let ((?x67812 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x67809 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x67806 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x67803 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x67789 (* 2.0 l_0_18_178)))
 (let ((?x67790 (* ?x67789 l_0_18_182)))
 (let ((?x67786 (* 2.0 l_0_18_177)))
 (let ((?x67787 (* ?x67786 l_0_18_181)))
 (let ((?x67783 (* 2.0 l_0_18_176)))
 (let ((?x67784 (* ?x67783 l_0_18_180)))
 (let ((?x67780 (* 2.0 l_0_18_175)))
 (let ((?x67781 (* ?x67780 l_0_18_179)))
 (let ((?x67777 (* 2.0 l_0_18_157)))
 (let ((?x67778 (* ?x67777 l_0_18_161)))
 (let ((?x67774 (* 2.0 l_0_18_156)))
 (let ((?x67775 (* ?x67774 l_0_18_160)))
 (let ((?x67771 (* 2.0 l_0_18_155)))
 (let ((?x67772 (* ?x67771 l_0_18_159)))
 (let ((?x67768 (* 2.0 l_0_18_154)))
 (let ((?x67769 (* ?x67768 l_0_18_158)))
 (let ((?x67761 (* 2.0 l_0_18_115)))
 (let ((?x67762 (* ?x67761 l_0_18_119)))
 (let ((?x67758 (* 2.0 l_0_18_114)))
 (let ((?x67759 (* ?x67758 l_0_18_118)))
 (let ((?x24525 (* 2.0 l_0_18_113)))
 (let ((?x36018 (* ?x24525 l_0_18_117)))
 (let ((?x58008 (+ (- (- (- (* (* (- 2.0) l_0_18_112) l_0_18_116) ?x36018) ?x67759) ?x67762) ?x67769)))
 (let ((?x12984 (- (- (- (- (+ (+ (+ ?x58008 ?x67772) ?x67775) ?x67778) ?x67781) ?x67784) ?x67787) ?x67790)))
 (= (+ (+ (+ (+ ?x12984 ?x67803) ?x67806) ?x67809) ?x67812) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67789 (* 2.0 l_0_18_178)))
 (let ((?x67895 (* ?x67789 l_0_18_187)))
 (let ((?x67786 (* 2.0 l_0_18_177)))
 (let ((?x67893 (* ?x67786 l_0_18_186)))
 (let ((?x67783 (* 2.0 l_0_18_176)))
 (let ((?x67891 (* ?x67783 l_0_18_185)))
 (let ((?x67780 (* 2.0 l_0_18_175)))
 (let ((?x67889 (* ?x67780 l_0_18_184)))
 (let ((?x67777 (* 2.0 l_0_18_157)))
 (let ((?x67887 (* ?x67777 l_0_18_166)))
 (let ((?x67774 (* 2.0 l_0_18_156)))
 (let ((?x67885 (* ?x67774 l_0_18_165)))
 (let ((?x67771 (* 2.0 l_0_18_155)))
 (let ((?x67883 (* ?x67771 l_0_18_164)))
 (let ((?x67768 (* 2.0 l_0_18_154)))
 (let ((?x67881 (* ?x67768 l_0_18_163)))
 (let ((?x67761 (* 2.0 l_0_18_115)))
 (let ((?x67879 (* ?x67761 l_0_18_124)))
 (let ((?x67758 (* 2.0 l_0_18_114)))
 (let ((?x67877 (* ?x67758 l_0_18_123)))
 (let ((?x24525 (* 2.0 l_0_18_113)))
 (let ((?x67875 (* ?x24525 l_0_18_122)))
 (let ((?x22517 (* 2.0 l_0_18_112)))
 (let ((?x67873 (* ?x22517 l_0_18_121)))
 (let ((?x67870 (* 2.0 l_0_18_103)))
 (let ((?x67871 (* ?x67870 l_0_18_94)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x67868 (* ?x66797 l_0_18_93)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x67866 (* ?x64253 l_0_18_92)))
 (let ((?x36934 (- (+ (+ (+ (* (* 2.0 l_0_18_100) l_0_18_91) ?x67866) ?x67868) ?x67871) ?x67873)))
 (let ((?x58009 (+ (+ (+ (+ (- (- (- ?x36934 ?x67875) ?x67877) ?x67879) ?x67881) ?x67883) ?x67885) ?x67887)))
 (= (- (- (- (- ?x58009 ?x67889) ?x67891) ?x67893) ?x67895) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67991 (* l_0_18_99 l_0_18_99)))
 (let ((?x67989 (* l_0_18_98 l_0_18_98)))
 (let ((?x67987 (* l_0_18_97 l_0_18_97)))
 (let ((?x67985 (* l_0_18_96 l_0_18_96)))
 (let ((?x67983 (* l_0_18_95 l_0_18_95)))
 (let ((?x67981 (* l_0_18_183 l_0_18_183)))
 (let ((?x67979 (* l_0_18_182 l_0_18_182)))
 (let ((?x67977 (* l_0_18_181 l_0_18_181)))
 (let ((?x67975 (* l_0_18_180 l_0_18_180)))
 (let ((?x67973 (* l_0_18_179 l_0_18_179)))
 (let ((?x67971 (* l_0_18_162 l_0_18_162)))
 (let ((?x67969 (* l_0_18_161 l_0_18_161)))
 (let ((?x67967 (* l_0_18_160 l_0_18_160)))
 (let ((?x67965 (* l_0_18_159 l_0_18_159)))
 (let ((?x67963 (* l_0_18_158 l_0_18_158)))
 (let ((?x67956 (* l_0_18_120 l_0_18_120)))
 (let ((?x67954 (* l_0_18_119 l_0_18_119)))
 (let ((?x67952 (* l_0_18_118 l_0_18_118)))
 (let ((?x58093 (- (- (* (- l_0_18_116) l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x67952)))
 (let ((?x68342 (+ (+ (+ (+ (+ (- (- ?x58093 ?x67954) ?x67956) ?x67963) ?x67965) ?x67967) ?x67969) ?x67971)))
 (let ((?x68349 (+ (+ (- (- (- (- (- ?x68342 ?x67973) ?x67975) ?x67977) ?x67979) ?x67981) ?x67983) ?x67985)))
 (= (+ (+ (+ ?x68349 ?x67987) ?x67989) ?x67991) 0.0)))))))))))))))))))))))
(assert
 (let ((?x68084 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x68081 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x68078 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x68075 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x68072 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x68069 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x68066 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x68063 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x68060 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x68057 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x68048 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x68045 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x68042 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x68039 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x68036 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x68033 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x67870 (* 2.0 l_0_18_103)))
 (let ((?x68030 (* ?x67870 l_0_18_98)))
 (let ((?x66797 (* 2.0 l_0_18_102)))
 (let ((?x68028 (* ?x66797 l_0_18_97)))
 (let ((?x64253 (* 2.0 l_0_18_101)))
 (let ((?x68026 (* ?x64253 l_0_18_96)))
 (let ((?x37059 (+ (+ (+ (+ (* (* 2.0 l_0_18_100) l_0_18_95) ?x68026) ?x68028) ?x68030) ?x68033)))
 (let ((?x56442 (+ (+ (- (- (- (- (- ?x37059 ?x68036) ?x68039) ?x68042) ?x68045) ?x68048) ?x68057) ?x68060)))
 (let ((?x26328 (- (- (- (- (+ (+ (+ ?x56442 ?x68063) ?x68066) ?x68069) ?x68072) ?x68075) ?x68078) ?x68081)))
 (= (- ?x26328 ?x68084) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x68193 (* l_0_18_189 l_0_18_189)))
 (let ((?x68191 (* l_0_18_188 l_0_18_188)))
 (let ((?x68189 (* l_0_18_187 l_0_18_187)))
 (let ((?x68187 (* l_0_18_186 l_0_18_186)))
 (let ((?x68185 (* l_0_18_185 l_0_18_185)))
 (let ((?x68183 (* l_0_18_184 l_0_18_184)))
 (let ((?x68181 (* l_0_18_168 l_0_18_168)))
 (let ((?x68179 (* l_0_18_167 l_0_18_167)))
 (let ((?x68177 (* l_0_18_166 l_0_18_166)))
 (let ((?x68175 (* l_0_18_165 l_0_18_165)))
 (let ((?x68173 (* l_0_18_164 l_0_18_164)))
 (let ((?x68171 (* l_0_18_163 l_0_18_163)))
 (let ((?x68169 (* l_0_18_126 l_0_18_126)))
 (let ((?x68167 (* l_0_18_125 l_0_18_125)))
 (let ((?x68165 (* l_0_18_124 l_0_18_124)))
 (let ((?x68163 (* l_0_18_123 l_0_18_123)))
 (let ((?x68161 (* l_0_18_122 l_0_18_122)))
 (let ((?x68159 (* l_0_18_121 l_0_18_121)))
 (let ((?x68157 (* l_0_18_105 l_0_18_105)))
 (let ((?x68155 (* l_0_18_104 l_0_18_104)))
 (let ((?x68153 (* l_0_18_103 l_0_18_103)))
 (let ((?x68138 (* l_0_18_102 l_0_18_102)))
 (let ((?x13437 (+ (+ (* l_0_18_100 l_0_18_100) (* l_0_18_101 l_0_18_101)) ?x68138)))
 (let ((?x68362 (- (- (- (- (+ (+ (+ ?x13437 ?x68153) ?x68155) ?x68157) ?x68159) ?x68161) ?x68163) ?x68165)))
 (let ((?x68369 (+ (+ (+ (+ (+ (- (- ?x68362 ?x68167) ?x68169) ?x68171) ?x68173) ?x68175) ?x68177) ?x68179)))
 (let ((?x68376 (- (- (- (- (- (- (+ ?x68369 ?x68181) ?x68183) ?x68185) ?x68187) ?x68189) ?x68191) ?x68193)))
 (= ?x68376 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x66542 (* l_0_18_141 l_0_18_141)))
 (let ((?x66540 (* l_0_18_140 l_0_18_140)))
 (let ((?x66536 (* l_0_18_139 l_0_18_139)))
 (let ((?x36235 (- (- (* (- l_0_18_137) l_0_18_137) (* l_0_18_138 l_0_18_138)) ?x66536)))
 (= (- (- ?x36235 ?x66540) ?x66542) 0.0))))))
(assert
 (>= l_0_18_1 0.0))
(assert
 (>= l_0_18_3 0.0))
(assert
 (>= l_0_18_6 0.0))
(assert
 (>= l_0_18_10 0.0))
(assert
 (>= l_0_18_15 0.0))
(assert
 (>= l_0_18_21 0.0))
(assert
 (>= l_0_18_22 0.0))
(assert
 (>= l_0_18_24 0.0))
(assert
 (>= l_0_18_27 0.0))
(assert
 (>= l_0_18_31 0.0))
(assert
 (>= l_0_18_36 0.0))
(assert
 (>= l_0_18_42 0.0))
(assert
 (>= l_0_18_43 0.0))
(assert
 (>= l_0_18_45 0.0))
(assert
 (>= l_0_18_48 0.0))
(assert
 (>= l_0_18_52 0.0))
(assert
 (>= l_0_18_57 0.0))
(assert
 (>= l_0_18_63 0.0))
(assert
 (>= l_0_18_64 0.0))
(assert
 (>= l_0_18_66 0.0))
(assert
 (>= l_0_18_69 0.0))
(assert
 (>= l_0_18_73 0.0))
(assert
 (>= l_0_18_78 0.0))
(assert
 (>= l_0_18_84 0.0))
(assert
 (>= l_0_18_85 0.0))
(assert
 (>= l_0_18_87 0.0))
(assert
 (>= l_0_18_90 0.0))
(assert
 (>= l_0_18_94 0.0))
(assert
 (>= l_0_18_99 0.0))
(assert
 (>= l_0_18_105 0.0))
(assert
 (>= l_0_18_106 0.0))
(assert
 (>= l_0_18_108 0.0))
(assert
 (>= l_0_18_111 0.0))
(assert
 (>= l_0_18_115 0.0))
(assert
 (>= l_0_18_120 0.0))
(assert
 (>= l_0_18_126 0.0))
(assert
 (>= l_0_18_127 0.0))
(assert
 (>= l_0_18_129 0.0))
(assert
 (>= l_0_18_132 0.0))
(assert
 (>= l_0_18_136 0.0))
(assert
 (>= l_0_18_141 0.0))
(assert
 (>= l_0_18_147 0.0))
(assert
 (>= l_0_18_148 0.0))
(assert
 (>= l_0_18_150 0.0))
(assert
 (>= l_0_18_153 0.0))
(assert
 (>= l_0_18_157 0.0))
(assert
 (>= l_0_18_162 0.0))
(assert
 (>= l_0_18_168 0.0))
(assert
 (>= l_0_18_169 0.0))
(assert
 (>= l_0_18_171 0.0))
(assert
 (>= l_0_18_174 0.0))
(assert
 (>= l_0_18_178 0.0))
(assert
 (>= l_0_18_183 0.0))
(assert
 (>= l_0_18_189 0.0))
(assert
 (>= l_0_18_190 0.0))
(assert
 (>= l_0_18_192 0.0))
(assert
 (>= l_0_18_195 0.0))
(assert
 (>= l_0_18_199 0.0))
(assert
 (>= l_0_18_204 0.0))
(assert
 (>= l_0_18_210 0.0))
(assert
 (>= l_0_18_211 0.0))
(assert
 (>= l_0_18_213 0.0))
(assert
 (>= l_0_18_216 0.0))
(assert
 (>= l_0_18_220 0.0))
(assert
 (>= l_0_18_225 0.0))
(assert
 (>= l_0_18_231 0.0))
(assert
 (>= l_0_18_232 0.0))
(assert
 (>= l_0_18_234 0.0))
(assert
 (>= l_0_18_237 0.0))
(assert
 (>= l_0_18_241 0.0))
(assert
 (>= l_0_18_246 0.0))
(assert
 (>= l_0_18_252 0.0))
(assert
 (>= l_0_18_253 0.0))
(assert
 (>= l_0_18_255 0.0))
(assert
 (>= l_0_18_258 0.0))
(assert
 (>= l_0_18_262 0.0))
(assert
 (>= l_0_18_267 0.0))
(assert
 (>= l_0_18_273 0.0))
(assert
 (>= l_0_18_274 0.0))
(assert
 (>= l_0_18_276 0.0))
(assert
 (>= l_0_18_279 0.0))
(assert
 (>= l_0_18_283 0.0))
(assert
 (>= l_0_18_288 0.0))
(assert
 (>= l_0_18_294 0.0))
(assert
 (>= l_0_18_295 0.0))
(assert
 (>= l_0_18_297 0.0))
(assert
 (>= l_0_18_300 0.0))
(assert
 (>= l_0_18_304 0.0))
(assert
 (>= l_0_18_309 0.0))
(assert
 (>= l_0_18_315 0.0))
(check-sat)
(get-model)