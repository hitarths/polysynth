(set-option :produce-models true); benchmark generated from python API
(set-info :status unknown)
(declare-fun l_0_0_2 () Real)
(declare-fun l_0_0_1 () Real)
(declare-fun l_0_1_3 () Real)
(declare-fun l_0_1_2 () Real)
(declare-fun l_0_1_1 () Real)
(declare-fun l_0_2_4 () Real)
(declare-fun l_0_2_3 () Real)
(declare-fun l_0_2_2 () Real)
(declare-fun l_0_2_1 () Real)
(declare-fun l_0_3_5 () Real)
(declare-fun l_0_3_4 () Real)
(declare-fun l_0_3_3 () Real)
(declare-fun l_0_3_2 () Real)
(declare-fun l_0_3_1 () Real)
(declare-fun l_0_4_6 () Real)
(declare-fun l_0_4_5 () Real)
(declare-fun l_0_4_4 () Real)
(declare-fun l_0_4_3 () Real)
(declare-fun l_0_4_2 () Real)
(declare-fun l_0_4_1 () Real)
(declare-fun l_0_5_7 () Real)
(declare-fun l_0_5_6 () Real)
(declare-fun l_0_5_5 () Real)
(declare-fun l_0_5_4 () Real)
(declare-fun l_0_5_3 () Real)
(declare-fun l_0_5_2 () Real)
(declare-fun l_0_5_1 () Real)
(declare-fun l_0_6_66 () Real)
(declare-fun l_0_6_65 () Real)
(declare-fun l_0_6_45 () Real)
(declare-fun l_0_6_44 () Real)
(declare-fun l_0_6_3 () Real)
(declare-fun l_0_6_24 () Real)
(declare-fun l_0_6_23 () Real)
(declare-fun l_0_6_2 () Real)
(declare-fun l_0_6_150 () Real)
(declare-fun l_0_6_149 () Real)
(declare-fun l_0_6_71 () Real)
(declare-fun l_0_6_70 () Real)
(declare-fun l_0_6_64 () Real)
(declare-fun l_0_6_50 () Real)
(declare-fun l_0_6_49 () Real)
(declare-fun l_0_6_43 () Real)
(declare-fun l_0_6_22 () Real)
(declare-fun l_0_6_28 () Real)
(declare-fun l_0_6_133 () Real)
(declare-fun l_0_6_127 () Real)
(declare-fun l_0_6_1 () Real)
(declare-fun l_0_6_7 () Real)
(declare-fun l_0_6_8 () Real)
(declare-fun l_0_6_29 () Real)
(declare-fun l_0_6_154 () Real)
(declare-fun l_0_6_148 () Real)
(declare-fun l_0_6_134 () Real)
(declare-fun l_0_6_129 () Real)
(declare-fun l_0_6_128 () Real)
(declare-fun l_0_6_72 () Real)
(declare-fun l_0_6_69 () Real)
(declare-fun l_0_6_68 () Real)
(declare-fun l_0_6_67 () Real)
(declare-fun l_0_6_9 () Real)
(declare-fun l_0_6_6 () Real)
(declare-fun l_0_6_5 () Real)
(declare-fun l_0_6_51 () Real)
(declare-fun l_0_6_48 () Real)
(declare-fun l_0_6_47 () Real)
(declare-fun l_0_6_46 () Real)
(declare-fun l_0_6_4 () Real)
(declare-fun l_0_6_30 () Real)
(declare-fun l_0_6_27 () Real)
(declare-fun l_0_6_26 () Real)
(declare-fun l_0_6_25 () Real)
(declare-fun l_0_6_135 () Real)
(declare-fun l_0_6_132 () Real)
(declare-fun l_0_6_131 () Real)
(declare-fun l_0_6_130 () Real)
(declare-fun l_0_6_73 () Real)
(declare-fun l_0_6_52 () Real)
(declare-fun l_0_6_31 () Real)
(declare-fun l_0_6_136 () Real)
(declare-fun l_0_6_10 () Real)
(declare-fun l_0_6_91 () Real)
(declare-fun l_0_6_85 () Real)
(declare-fun l_0_6_77 () Real)
(declare-fun l_0_6_76 () Real)
(declare-fun l_0_6_75 () Real)
(declare-fun l_0_6_74 () Real)
(declare-fun l_0_6_56 () Real)
(declare-fun l_0_6_55 () Real)
(declare-fun l_0_6_54 () Real)
(declare-fun l_0_6_53 () Real)
(declare-fun l_0_6_35 () Real)
(declare-fun l_0_6_34 () Real)
(declare-fun l_0_6_33 () Real)
(declare-fun l_0_6_32 () Real)
(declare-fun l_0_6_140 () Real)
(declare-fun l_0_6_139 () Real)
(declare-fun l_0_6_138 () Real)
(declare-fun l_0_6_137 () Real)
(declare-fun l_0_6_13 () Real)
(declare-fun l_0_6_12 () Real)
(declare-fun l_0_6_11 () Real)
(declare-fun l_0_6_112 () Real)
(declare-fun l_0_6_106 () Real)
(declare-fun l_0_6_14 () Real)
(declare-fun l_0_6_82 () Real)
(declare-fun l_0_6_81 () Real)
(declare-fun l_0_6_80 () Real)
(declare-fun l_0_6_79 () Real)
(declare-fun l_0_6_61 () Real)
(declare-fun l_0_6_60 () Real)
(declare-fun l_0_6_59 () Real)
(declare-fun l_0_6_58 () Real)
(declare-fun l_0_6_40 () Real)
(declare-fun l_0_6_39 () Real)
(declare-fun l_0_6_38 () Real)
(declare-fun l_0_6_37 () Real)
(declare-fun l_0_6_18 () Real)
(declare-fun l_0_6_17 () Real)
(declare-fun l_0_6_16 () Real)
(declare-fun l_0_6_145 () Real)
(declare-fun l_0_6_144 () Real)
(declare-fun l_0_6_143 () Real)
(declare-fun l_0_6_142 () Real)
(declare-fun l_0_6_19 () Real)
(declare-fun l_0_6_155 () Real)
(declare-fun l_0_6_156 () Real)
(declare-fun l_0_6_153 () Real)
(declare-fun l_0_6_152 () Real)
(declare-fun l_0_6_151 () Real)
(declare-fun l_0_6_157 () Real)
(declare-fun l_0_6_92 () Real)
(declare-fun l_0_6_87 () Real)
(declare-fun l_0_6_86 () Real)
(declare-fun l_0_6_161 () Real)
(declare-fun l_0_6_160 () Real)
(declare-fun l_0_6_159 () Real)
(declare-fun l_0_6_158 () Real)
(declare-fun l_0_6_113 () Real)
(declare-fun l_0_6_108 () Real)
(declare-fun l_0_6_107 () Real)
(declare-fun l_0_6_166 () Real)
(declare-fun l_0_6_165 () Real)
(declare-fun l_0_6_164 () Real)
(declare-fun l_0_6_163 () Real)
(declare-fun l_0_6_93 () Real)
(declare-fun l_0_6_90 () Real)
(declare-fun l_0_6_89 () Real)
(declare-fun l_0_6_88 () Real)
(declare-fun l_0_6_114 () Real)
(declare-fun l_0_6_111 () Real)
(declare-fun l_0_6_110 () Real)
(declare-fun l_0_6_109 () Real)
(declare-fun l_0_6_94 () Real)
(declare-fun l_0_6_115 () Real)
(declare-fun l_0_6_98 () Real)
(declare-fun l_0_6_97 () Real)
(declare-fun l_0_6_96 () Real)
(declare-fun l_0_6_95 () Real)
(declare-fun l_0_6_36 () Real)
(declare-fun l_0_6_15 () Real)
(declare-fun l_0_6_119 () Real)
(declare-fun l_0_6_118 () Real)
(declare-fun l_0_6_117 () Real)
(declare-fun l_0_6_116 () Real)
(declare-fun l_0_6_41 () Real)
(declare-fun l_0_6_20 () Real)
(declare-fun l_0_6_124 () Real)
(declare-fun l_0_6_123 () Real)
(declare-fun l_0_6_122 () Real)
(declare-fun l_0_6_121 () Real)
(declare-fun l_0_6_103 () Real)
(declare-fun l_0_6_102 () Real)
(declare-fun l_0_6_101 () Real)
(declare-fun l_0_6_100 () Real)
(declare-fun l_0_6_42 () Real)
(declare-fun l_0_6_21 () Real)
(declare-fun l_0_6_78 () Real)
(declare-fun l_0_6_57 () Real)
(declare-fun l_0_6_141 () Real)
(declare-fun l_0_6_83 () Real)
(declare-fun l_0_6_62 () Real)
(declare-fun l_0_6_146 () Real)
(declare-fun l_0_6_84 () Real)
(declare-fun l_0_6_63 () Real)
(declare-fun l_0_6_147 () Real)
(declare-fun l_0_6_162 () Real)
(declare-fun l_0_6_167 () Real)
(declare-fun l_0_6_168 () Real)
(declare-fun l_0_6_99 () Real)
(declare-fun l_0_6_120 () Real)
(declare-fun l_0_6_125 () Real)
(declare-fun l_0_6_104 () Real)
(declare-fun l_0_6_126 () Real)
(declare-fun l_0_6_105 () Real)
(declare-fun l_0_7_66 () Real)
(declare-fun l_0_7_65 () Real)
(declare-fun l_0_7_45 () Real)
(declare-fun l_0_7_44 () Real)
(declare-fun l_0_7_3 () Real)
(declare-fun l_0_7_24 () Real)
(declare-fun l_0_7_23 () Real)
(declare-fun l_0_7_2 () Real)
(declare-fun l_0_7_192 () Real)
(declare-fun l_0_7_191 () Real)
(declare-fun _a_12_ () Real)
(declare-fun l_0_7_71 () Real)
(declare-fun l_0_7_70 () Real)
(declare-fun l_0_7_50 () Real)
(declare-fun l_0_7_49 () Real)
(declare-fun l_0_7_8 () Real)
(declare-fun l_0_7_29 () Real)
(declare-fun l_0_7_28 () Real)
(declare-fun l_0_7_7 () Real)
(declare-fun l_0_7_197 () Real)
(declare-fun l_0_7_196 () Real)
(declare-fun _a_13_ () Real)
(declare-fun l_0_7_64 () Real)
(declare-fun l_0_7_43 () Real)
(declare-fun l_0_7_22 () Real)
(declare-fun l_0_7_190 () Real)
(declare-fun l_0_7_129 () Real)
(declare-fun l_0_7_128 () Real)
(declare-fun l_0_7_1 () Real)
(declare-fun l_0_7_133 () Real)
(declare-fun l_0_7_127 () Real)
(declare-fun l_0_7_134 () Real)
(declare-fun l_0_7_72 () Real)
(declare-fun l_0_7_69 () Real)
(declare-fun l_0_7_68 () Real)
(declare-fun l_0_7_67 () Real)
(declare-fun l_0_7_9 () Real)
(declare-fun l_0_7_6 () Real)
(declare-fun l_0_7_5 () Real)
(declare-fun l_0_7_51 () Real)
(declare-fun l_0_7_48 () Real)
(declare-fun l_0_7_47 () Real)
(declare-fun l_0_7_46 () Real)
(declare-fun l_0_7_4 () Real)
(declare-fun l_0_7_30 () Real)
(declare-fun l_0_7_27 () Real)
(declare-fun l_0_7_26 () Real)
(declare-fun l_0_7_25 () Real)
(declare-fun l_0_7_135 () Real)
(declare-fun l_0_7_132 () Real)
(declare-fun l_0_7_131 () Real)
(declare-fun l_0_7_130 () Real)
(declare-fun l_0_7_73 () Real)
(declare-fun l_0_7_52 () Real)
(declare-fun l_0_7_31 () Real)
(declare-fun l_0_7_136 () Real)
(declare-fun l_0_7_10 () Real)
(declare-fun l_0_7_91 () Real)
(declare-fun l_0_7_85 () Real)
(declare-fun l_0_7_77 () Real)
(declare-fun l_0_7_76 () Real)
(declare-fun l_0_7_75 () Real)
(declare-fun l_0_7_74 () Real)
(declare-fun l_0_7_56 () Real)
(declare-fun l_0_7_55 () Real)
(declare-fun l_0_7_54 () Real)
(declare-fun l_0_7_53 () Real)
(declare-fun l_0_7_35 () Real)
(declare-fun l_0_7_34 () Real)
(declare-fun l_0_7_33 () Real)
(declare-fun l_0_7_32 () Real)
(declare-fun l_0_7_175 () Real)
(declare-fun l_0_7_169 () Real)
(declare-fun l_0_7_154 () Real)
(declare-fun l_0_7_148 () Real)
(declare-fun l_0_7_140 () Real)
(declare-fun l_0_7_139 () Real)
(declare-fun l_0_7_138 () Real)
(declare-fun l_0_7_137 () Real)
(declare-fun l_0_7_13 () Real)
(declare-fun l_0_7_12 () Real)
(declare-fun l_0_7_11 () Real)
(declare-fun l_0_7_112 () Real)
(declare-fun l_0_7_106 () Real)
(declare-fun l_0_7_14 () Real)
(declare-fun l_0_7_82 () Real)
(declare-fun l_0_7_81 () Real)
(declare-fun l_0_7_80 () Real)
(declare-fun l_0_7_79 () Real)
(declare-fun l_0_7_61 () Real)
(declare-fun l_0_7_60 () Real)
(declare-fun l_0_7_59 () Real)
(declare-fun l_0_7_58 () Real)
(declare-fun l_0_7_40 () Real)
(declare-fun l_0_7_39 () Real)
(declare-fun l_0_7_38 () Real)
(declare-fun l_0_7_37 () Real)
(declare-fun l_0_7_18 () Real)
(declare-fun l_0_7_17 () Real)
(declare-fun l_0_7_16 () Real)
(declare-fun l_0_7_145 () Real)
(declare-fun l_0_7_144 () Real)
(declare-fun l_0_7_143 () Real)
(declare-fun l_0_7_142 () Real)
(declare-fun l_0_7_19 () Real)
(declare-fun l_0_7_198 () Real)
(declare-fun l_0_7_195 () Real)
(declare-fun l_0_7_194 () Real)
(declare-fun l_0_7_193 () Real)
(declare-fun l_0_7_199 () Real)
(declare-fun l_0_7_92 () Real)
(declare-fun l_0_7_87 () Real)
(declare-fun l_0_7_86 () Real)
(declare-fun l_0_7_203 () Real)
(declare-fun l_0_7_202 () Real)
(declare-fun l_0_7_201 () Real)
(declare-fun l_0_7_200 () Real)
(declare-fun l_0_7_176 () Real)
(declare-fun l_0_7_171 () Real)
(declare-fun l_0_7_170 () Real)
(declare-fun l_0_7_155 () Real)
(declare-fun l_0_7_150 () Real)
(declare-fun l_0_7_149 () Real)
(declare-fun l_0_7_113 () Real)
(declare-fun l_0_7_108 () Real)
(declare-fun l_0_7_107 () Real)
(declare-fun l_0_7_208 () Real)
(declare-fun l_0_7_207 () Real)
(declare-fun l_0_7_206 () Real)
(declare-fun l_0_7_205 () Real)
(declare-fun l_0_7_93 () Real)
(declare-fun l_0_7_90 () Real)
(declare-fun l_0_7_89 () Real)
(declare-fun l_0_7_88 () Real)
(declare-fun l_0_7_177 () Real)
(declare-fun l_0_7_174 () Real)
(declare-fun l_0_7_173 () Real)
(declare-fun l_0_7_172 () Real)
(declare-fun l_0_7_156 () Real)
(declare-fun l_0_7_153 () Real)
(declare-fun l_0_7_152 () Real)
(declare-fun l_0_7_151 () Real)
(declare-fun l_0_7_114 () Real)
(declare-fun l_0_7_111 () Real)
(declare-fun l_0_7_110 () Real)
(declare-fun l_0_7_109 () Real)
(declare-fun l_0_7_94 () Real)
(declare-fun l_0_7_178 () Real)
(declare-fun l_0_7_157 () Real)
(declare-fun l_0_7_115 () Real)
(declare-fun l_0_7_98 () Real)
(declare-fun l_0_7_97 () Real)
(declare-fun l_0_7_96 () Real)
(declare-fun l_0_7_95 () Real)
(declare-fun l_0_7_36 () Real)
(declare-fun l_0_7_182 () Real)
(declare-fun l_0_7_181 () Real)
(declare-fun l_0_7_180 () Real)
(declare-fun l_0_7_179 () Real)
(declare-fun l_0_7_161 () Real)
(declare-fun l_0_7_160 () Real)
(declare-fun l_0_7_159 () Real)
(declare-fun l_0_7_158 () Real)
(declare-fun l_0_7_15 () Real)
(declare-fun l_0_7_119 () Real)
(declare-fun l_0_7_118 () Real)
(declare-fun l_0_7_117 () Real)
(declare-fun l_0_7_116 () Real)
(declare-fun l_0_7_41 () Real)
(declare-fun l_0_7_187 () Real)
(declare-fun l_0_7_186 () Real)
(declare-fun l_0_7_185 () Real)
(declare-fun l_0_7_184 () Real)
(declare-fun l_0_7_166 () Real)
(declare-fun l_0_7_165 () Real)
(declare-fun l_0_7_164 () Real)
(declare-fun l_0_7_163 () Real)
(declare-fun l_0_7_20 () Real)
(declare-fun l_0_7_124 () Real)
(declare-fun l_0_7_123 () Real)
(declare-fun l_0_7_122 () Real)
(declare-fun l_0_7_121 () Real)
(declare-fun l_0_7_103 () Real)
(declare-fun l_0_7_102 () Real)
(declare-fun l_0_7_101 () Real)
(declare-fun l_0_7_100 () Real)
(declare-fun l_0_7_42 () Real)
(declare-fun l_0_7_21 () Real)
(declare-fun l_0_7_78 () Real)
(declare-fun l_0_7_57 () Real)
(declare-fun l_0_7_141 () Real)
(declare-fun l_0_7_83 () Real)
(declare-fun l_0_7_62 () Real)
(declare-fun l_0_7_146 () Real)
(declare-fun l_0_7_84 () Real)
(declare-fun l_0_7_63 () Real)
(declare-fun l_0_7_147 () Real)
(declare-fun l_0_7_204 () Real)
(declare-fun l_0_7_209 () Real)
(declare-fun l_0_7_210 () Real)
(declare-fun l_0_7_99 () Real)
(declare-fun l_0_7_183 () Real)
(declare-fun l_0_7_162 () Real)
(declare-fun l_0_7_120 () Real)
(declare-fun l_0_7_188 () Real)
(declare-fun l_0_7_167 () Real)
(declare-fun l_0_7_125 () Real)
(declare-fun l_0_7_104 () Real)
(declare-fun l_0_7_189 () Real)
(declare-fun l_0_7_168 () Real)
(declare-fun l_0_7_126 () Real)
(declare-fun l_0_7_105 () Real)
(declare-fun l_0_8_66 () Real)
(declare-fun l_0_8_65 () Real)
(declare-fun l_0_8_64 () Real)
(declare-fun l_0_8_45 () Real)
(declare-fun l_0_8_44 () Real)
(declare-fun l_0_8_43 () Real)
(declare-fun l_0_8_3 () Real)
(declare-fun l_0_8_24 () Real)
(declare-fun l_0_8_23 () Real)
(declare-fun l_0_8_22 () Real)
(declare-fun l_0_8_212 () Real)
(declare-fun l_0_8_211 () Real)
(declare-fun l_0_8_2 () Real)
(declare-fun l_0_8_191 () Real)
(declare-fun l_0_8_190 () Real)
(declare-fun l_0_8_129 () Real)
(declare-fun l_0_8_128 () Real)
(declare-fun l_0_8_1 () Real)
(declare-fun l_0_8_213 () Real)
(declare-fun l_0_8_192 () Real)
(declare-fun l_0_8_71 () Real)
(declare-fun l_0_8_70 () Real)
(declare-fun l_0_8_50 () Real)
(declare-fun l_0_8_49 () Real)
(declare-fun l_0_8_8 () Real)
(declare-fun l_0_8_29 () Real)
(declare-fun l_0_8_28 () Real)
(declare-fun l_0_8_218 () Real)
(declare-fun l_0_8_217 () Real)
(declare-fun l_0_8_7 () Real)
(declare-fun l_0_8_197 () Real)
(declare-fun l_0_8_196 () Real)
(declare-fun l_0_8_133 () Real)
(declare-fun l_0_8_127 () Real)
(declare-fun l_0_8_134 () Real)
(declare-fun l_0_8_72 () Real)
(declare-fun l_0_8_69 () Real)
(declare-fun l_0_8_68 () Real)
(declare-fun l_0_8_67 () Real)
(declare-fun l_0_8_9 () Real)
(declare-fun l_0_8_6 () Real)
(declare-fun l_0_8_5 () Real)
(declare-fun l_0_8_51 () Real)
(declare-fun l_0_8_48 () Real)
(declare-fun l_0_8_47 () Real)
(declare-fun l_0_8_46 () Real)
(declare-fun l_0_8_4 () Real)
(declare-fun l_0_8_30 () Real)
(declare-fun l_0_8_27 () Real)
(declare-fun l_0_8_26 () Real)
(declare-fun l_0_8_25 () Real)
(declare-fun l_0_8_135 () Real)
(declare-fun l_0_8_132 () Real)
(declare-fun l_0_8_131 () Real)
(declare-fun l_0_8_130 () Real)
(declare-fun l_0_8_73 () Real)
(declare-fun l_0_8_52 () Real)
(declare-fun l_0_8_31 () Real)
(declare-fun l_0_8_136 () Real)
(declare-fun l_0_8_10 () Real)
(declare-fun l_0_8_91 () Real)
(declare-fun l_0_8_85 () Real)
(declare-fun l_0_8_77 () Real)
(declare-fun l_0_8_76 () Real)
(declare-fun l_0_8_75 () Real)
(declare-fun l_0_8_74 () Real)
(declare-fun l_0_8_56 () Real)
(declare-fun l_0_8_55 () Real)
(declare-fun l_0_8_54 () Real)
(declare-fun l_0_8_53 () Real)
(declare-fun l_0_8_35 () Real)
(declare-fun l_0_8_34 () Real)
(declare-fun l_0_8_33 () Real)
(declare-fun l_0_8_32 () Real)
(declare-fun l_0_8_175 () Real)
(declare-fun l_0_8_169 () Real)
(declare-fun l_0_8_154 () Real)
(declare-fun l_0_8_148 () Real)
(declare-fun l_0_8_140 () Real)
(declare-fun l_0_8_139 () Real)
(declare-fun l_0_8_138 () Real)
(declare-fun l_0_8_137 () Real)
(declare-fun l_0_8_13 () Real)
(declare-fun l_0_8_12 () Real)
(declare-fun l_0_8_11 () Real)
(declare-fun l_0_8_112 () Real)
(declare-fun l_0_8_106 () Real)
(declare-fun l_0_8_14 () Real)
(declare-fun l_0_8_82 () Real)
(declare-fun l_0_8_81 () Real)
(declare-fun l_0_8_80 () Real)
(declare-fun l_0_8_79 () Real)
(declare-fun l_0_8_61 () Real)
(declare-fun l_0_8_60 () Real)
(declare-fun l_0_8_59 () Real)
(declare-fun l_0_8_58 () Real)
(declare-fun l_0_8_40 () Real)
(declare-fun l_0_8_39 () Real)
(declare-fun l_0_8_38 () Real)
(declare-fun l_0_8_37 () Real)
(declare-fun l_0_8_18 () Real)
(declare-fun l_0_8_17 () Real)
(declare-fun l_0_8_16 () Real)
(declare-fun l_0_8_145 () Real)
(declare-fun l_0_8_144 () Real)
(declare-fun l_0_8_143 () Real)
(declare-fun l_0_8_142 () Real)
(declare-fun l_0_8_19 () Real)
(declare-fun l_0_8_219 () Real)
(declare-fun l_0_8_216 () Real)
(declare-fun l_0_8_215 () Real)
(declare-fun l_0_8_214 () Real)
(declare-fun l_0_8_198 () Real)
(declare-fun l_0_8_195 () Real)
(declare-fun l_0_8_194 () Real)
(declare-fun l_0_8_193 () Real)
(declare-fun l_0_8_220 () Real)
(declare-fun l_0_8_199 () Real)
(declare-fun l_0_8_92 () Real)
(declare-fun l_0_8_87 () Real)
(declare-fun l_0_8_86 () Real)
(declare-fun l_0_8_224 () Real)
(declare-fun l_0_8_223 () Real)
(declare-fun l_0_8_222 () Real)
(declare-fun l_0_8_221 () Real)
(declare-fun l_0_8_203 () Real)
(declare-fun l_0_8_202 () Real)
(declare-fun l_0_8_201 () Real)
(declare-fun l_0_8_200 () Real)
(declare-fun l_0_8_176 () Real)
(declare-fun l_0_8_171 () Real)
(declare-fun l_0_8_170 () Real)
(declare-fun l_0_8_155 () Real)
(declare-fun l_0_8_150 () Real)
(declare-fun l_0_8_149 () Real)
(declare-fun l_0_8_113 () Real)
(declare-fun l_0_8_108 () Real)
(declare-fun l_0_8_107 () Real)
(declare-fun l_0_8_229 () Real)
(declare-fun l_0_8_228 () Real)
(declare-fun l_0_8_227 () Real)
(declare-fun l_0_8_226 () Real)
(declare-fun l_0_8_208 () Real)
(declare-fun l_0_8_207 () Real)
(declare-fun l_0_8_206 () Real)
(declare-fun l_0_8_205 () Real)
(declare-fun l_0_8_93 () Real)
(declare-fun l_0_8_90 () Real)
(declare-fun l_0_8_89 () Real)
(declare-fun l_0_8_88 () Real)
(declare-fun l_0_8_177 () Real)
(declare-fun l_0_8_174 () Real)
(declare-fun l_0_8_173 () Real)
(declare-fun l_0_8_172 () Real)
(declare-fun l_0_8_156 () Real)
(declare-fun l_0_8_153 () Real)
(declare-fun l_0_8_152 () Real)
(declare-fun l_0_8_151 () Real)
(declare-fun l_0_8_114 () Real)
(declare-fun l_0_8_111 () Real)
(declare-fun l_0_8_110 () Real)
(declare-fun l_0_8_109 () Real)
(declare-fun l_0_8_94 () Real)
(declare-fun l_0_8_178 () Real)
(declare-fun l_0_8_157 () Real)
(declare-fun l_0_8_115 () Real)
(declare-fun l_0_8_98 () Real)
(declare-fun l_0_8_97 () Real)
(declare-fun l_0_8_96 () Real)
(declare-fun l_0_8_95 () Real)
(declare-fun l_0_8_36 () Real)
(declare-fun l_0_8_182 () Real)
(declare-fun l_0_8_181 () Real)
(declare-fun l_0_8_180 () Real)
(declare-fun l_0_8_179 () Real)
(declare-fun l_0_8_161 () Real)
(declare-fun l_0_8_160 () Real)
(declare-fun l_0_8_159 () Real)
(declare-fun l_0_8_158 () Real)
(declare-fun l_0_8_15 () Real)
(declare-fun l_0_8_119 () Real)
(declare-fun l_0_8_118 () Real)
(declare-fun l_0_8_117 () Real)
(declare-fun l_0_8_116 () Real)
(declare-fun l_0_8_41 () Real)
(declare-fun l_0_8_187 () Real)
(declare-fun l_0_8_186 () Real)
(declare-fun l_0_8_185 () Real)
(declare-fun l_0_8_184 () Real)
(declare-fun l_0_8_166 () Real)
(declare-fun l_0_8_165 () Real)
(declare-fun l_0_8_164 () Real)
(declare-fun l_0_8_163 () Real)
(declare-fun l_0_8_20 () Real)
(declare-fun l_0_8_124 () Real)
(declare-fun l_0_8_123 () Real)
(declare-fun l_0_8_122 () Real)
(declare-fun l_0_8_121 () Real)
(declare-fun l_0_8_103 () Real)
(declare-fun l_0_8_102 () Real)
(declare-fun l_0_8_101 () Real)
(declare-fun l_0_8_100 () Real)
(declare-fun l_0_8_42 () Real)
(declare-fun l_0_8_21 () Real)
(declare-fun l_0_8_78 () Real)
(declare-fun l_0_8_57 () Real)
(declare-fun l_0_8_141 () Real)
(declare-fun l_0_8_83 () Real)
(declare-fun l_0_8_62 () Real)
(declare-fun l_0_8_146 () Real)
(declare-fun l_0_8_84 () Real)
(declare-fun l_0_8_63 () Real)
(declare-fun l_0_8_147 () Real)
(declare-fun l_0_8_225 () Real)
(declare-fun l_0_8_204 () Real)
(declare-fun l_0_8_230 () Real)
(declare-fun l_0_8_209 () Real)
(declare-fun l_0_8_231 () Real)
(declare-fun l_0_8_210 () Real)
(declare-fun l_0_8_99 () Real)
(declare-fun l_0_8_183 () Real)
(declare-fun l_0_8_162 () Real)
(declare-fun l_0_8_120 () Real)
(declare-fun l_0_8_188 () Real)
(declare-fun l_0_8_167 () Real)
(declare-fun l_0_8_125 () Real)
(declare-fun l_0_8_104 () Real)
(declare-fun l_0_8_189 () Real)
(declare-fun l_0_8_168 () Real)
(declare-fun l_0_8_126 () Real)
(declare-fun l_0_8_105 () Real)
(declare-fun l_0_9_66 () Real)
(declare-fun l_0_9_65 () Real)
(declare-fun l_0_9_64 () Real)
(declare-fun l_0_9_45 () Real)
(declare-fun l_0_9_44 () Real)
(declare-fun l_0_9_43 () Real)
(declare-fun l_0_9_232 () Real)
(declare-fun l_0_9_22 () Real)
(declare-fun l_0_9_23 () Real)
(declare-fun l_0_9_211 () Real)
(declare-fun l_0_9_190 () Real)
(declare-fun l_0_9_128 () Real)
(declare-fun l_0_9_127 () Real)
(declare-fun l_0_9_1 () Real)
(declare-fun l_0_9_2 () Real)
(declare-fun l_0_9_3 () Real)
(declare-fun l_0_9_24 () Real)
(declare-fun l_0_9_233 () Real)
(declare-fun l_0_9_212 () Real)
(declare-fun l_0_9_191 () Real)
(declare-fun l_0_9_129 () Real)
(declare-fun l_0_9_234 () Real)
(declare-fun l_0_9_213 () Real)
(declare-fun l_0_9_192 () Real)
(declare-fun _a_6_ () Real)
(declare-fun l_0_9_72 () Real)
(declare-fun l_0_9_69 () Real)
(declare-fun l_0_9_71 () Real)
(declare-fun l_0_9_68 () Real)
(declare-fun l_0_9_70 () Real)
(declare-fun l_0_9_67 () Real)
(declare-fun l_0_9_9 () Real)
(declare-fun l_0_9_6 () Real)
(declare-fun l_0_9_8 () Real)
(declare-fun l_0_9_5 () Real)
(declare-fun l_0_9_51 () Real)
(declare-fun l_0_9_48 () Real)
(declare-fun l_0_9_50 () Real)
(declare-fun l_0_9_47 () Real)
(declare-fun l_0_9_49 () Real)
(declare-fun l_0_9_46 () Real)
(declare-fun l_0_9_7 () Real)
(declare-fun l_0_9_4 () Real)
(declare-fun l_0_9_30 () Real)
(declare-fun l_0_9_27 () Real)
(declare-fun l_0_9_29 () Real)
(declare-fun l_0_9_26 () Real)
(declare-fun l_0_9_28 () Real)
(declare-fun l_0_9_25 () Real)
(declare-fun l_0_9_240 () Real)
(declare-fun l_0_9_237 () Real)
(declare-fun l_0_9_239 () Real)
(declare-fun l_0_9_236 () Real)
(declare-fun l_0_9_238 () Real)
(declare-fun l_0_9_235 () Real)
(declare-fun l_0_9_219 () Real)
(declare-fun l_0_9_216 () Real)
(declare-fun l_0_9_218 () Real)
(declare-fun l_0_9_215 () Real)
(declare-fun l_0_9_217 () Real)
(declare-fun l_0_9_214 () Real)
(declare-fun l_0_9_198 () Real)
(declare-fun l_0_9_195 () Real)
(declare-fun l_0_9_197 () Real)
(declare-fun l_0_9_194 () Real)
(declare-fun l_0_9_196 () Real)
(declare-fun l_0_9_193 () Real)
(declare-fun _a_7_ () Real)
(declare-fun _a_8_ () Real)
(declare-fun _a_9_ () Real)
(declare-fun l_0_9_73 () Real)
(declare-fun l_0_9_52 () Real)
(declare-fun l_0_9_31 () Real)
(declare-fun l_0_9_241 () Real)
(declare-fun l_0_9_220 () Real)
(declare-fun l_0_9_199 () Real)
(declare-fun l_0_9_10 () Real)
(declare-fun _a_10_ () Real)
(declare-fun _a_11_ () Real)
(declare-fun l_0_9_133 () Real)
(declare-fun l_0_9_134 () Real)
(declare-fun l_0_9_135 () Real)
(declare-fun l_0_9_132 () Real)
(declare-fun l_0_9_131 () Real)
(declare-fun l_0_9_130 () Real)
(declare-fun l_0_9_136 () Real)
(declare-fun l_0_9_91 () Real)
(declare-fun l_0_9_85 () Real)
(declare-fun l_0_9_77 () Real)
(declare-fun l_0_9_76 () Real)
(declare-fun l_0_9_75 () Real)
(declare-fun l_0_9_74 () Real)
(declare-fun l_0_9_56 () Real)
(declare-fun l_0_9_55 () Real)
(declare-fun l_0_9_54 () Real)
(declare-fun l_0_9_53 () Real)
(declare-fun l_0_9_35 () Real)
(declare-fun l_0_9_34 () Real)
(declare-fun l_0_9_33 () Real)
(declare-fun l_0_9_32 () Real)
(declare-fun l_0_9_175 () Real)
(declare-fun l_0_9_169 () Real)
(declare-fun l_0_9_154 () Real)
(declare-fun l_0_9_148 () Real)
(declare-fun l_0_9_140 () Real)
(declare-fun l_0_9_139 () Real)
(declare-fun l_0_9_138 () Real)
(declare-fun l_0_9_137 () Real)
(declare-fun l_0_9_13 () Real)
(declare-fun l_0_9_12 () Real)
(declare-fun l_0_9_11 () Real)
(declare-fun l_0_9_112 () Real)
(declare-fun l_0_9_106 () Real)
(declare-fun l_0_9_14 () Real)
(declare-fun l_0_9_82 () Real)
(declare-fun l_0_9_81 () Real)
(declare-fun l_0_9_80 () Real)
(declare-fun l_0_9_79 () Real)
(declare-fun l_0_9_61 () Real)
(declare-fun l_0_9_60 () Real)
(declare-fun l_0_9_59 () Real)
(declare-fun l_0_9_58 () Real)
(declare-fun l_0_9_40 () Real)
(declare-fun l_0_9_39 () Real)
(declare-fun l_0_9_38 () Real)
(declare-fun l_0_9_37 () Real)
(declare-fun l_0_9_18 () Real)
(declare-fun l_0_9_17 () Real)
(declare-fun l_0_9_16 () Real)
(declare-fun l_0_9_145 () Real)
(declare-fun l_0_9_144 () Real)
(declare-fun l_0_9_143 () Real)
(declare-fun l_0_9_142 () Real)
(declare-fun l_0_9_19 () Real)
(declare-fun l_0_9_92 () Real)
(declare-fun l_0_9_87 () Real)
(declare-fun l_0_9_86 () Real)
(declare-fun l_0_9_245 () Real)
(declare-fun l_0_9_244 () Real)
(declare-fun l_0_9_243 () Real)
(declare-fun l_0_9_242 () Real)
(declare-fun l_0_9_224 () Real)
(declare-fun l_0_9_223 () Real)
(declare-fun l_0_9_222 () Real)
(declare-fun l_0_9_221 () Real)
(declare-fun l_0_9_203 () Real)
(declare-fun l_0_9_202 () Real)
(declare-fun l_0_9_201 () Real)
(declare-fun l_0_9_200 () Real)
(declare-fun l_0_9_176 () Real)
(declare-fun l_0_9_171 () Real)
(declare-fun l_0_9_170 () Real)
(declare-fun l_0_9_155 () Real)
(declare-fun l_0_9_150 () Real)
(declare-fun l_0_9_149 () Real)
(declare-fun l_0_9_113 () Real)
(declare-fun l_0_9_108 () Real)
(declare-fun l_0_9_107 () Real)
(declare-fun l_0_9_250 () Real)
(declare-fun l_0_9_249 () Real)
(declare-fun l_0_9_248 () Real)
(declare-fun l_0_9_247 () Real)
(declare-fun l_0_9_229 () Real)
(declare-fun l_0_9_228 () Real)
(declare-fun l_0_9_227 () Real)
(declare-fun l_0_9_226 () Real)
(declare-fun l_0_9_208 () Real)
(declare-fun l_0_9_207 () Real)
(declare-fun l_0_9_206 () Real)
(declare-fun l_0_9_205 () Real)
(declare-fun l_0_9_93 () Real)
(declare-fun l_0_9_90 () Real)
(declare-fun l_0_9_89 () Real)
(declare-fun l_0_9_88 () Real)
(declare-fun l_0_9_177 () Real)
(declare-fun l_0_9_174 () Real)
(declare-fun l_0_9_173 () Real)
(declare-fun l_0_9_172 () Real)
(declare-fun l_0_9_156 () Real)
(declare-fun l_0_9_153 () Real)
(declare-fun l_0_9_152 () Real)
(declare-fun l_0_9_151 () Real)
(declare-fun l_0_9_114 () Real)
(declare-fun l_0_9_111 () Real)
(declare-fun l_0_9_110 () Real)
(declare-fun l_0_9_109 () Real)
(declare-fun l_0_9_94 () Real)
(declare-fun l_0_9_178 () Real)
(declare-fun l_0_9_157 () Real)
(declare-fun l_0_9_115 () Real)
(declare-fun l_0_9_98 () Real)
(declare-fun l_0_9_97 () Real)
(declare-fun l_0_9_96 () Real)
(declare-fun l_0_9_95 () Real)
(declare-fun l_0_9_36 () Real)
(declare-fun l_0_9_182 () Real)
(declare-fun l_0_9_181 () Real)
(declare-fun l_0_9_180 () Real)
(declare-fun l_0_9_179 () Real)
(declare-fun l_0_9_161 () Real)
(declare-fun l_0_9_160 () Real)
(declare-fun l_0_9_159 () Real)
(declare-fun l_0_9_158 () Real)
(declare-fun l_0_9_15 () Real)
(declare-fun l_0_9_119 () Real)
(declare-fun l_0_9_118 () Real)
(declare-fun l_0_9_117 () Real)
(declare-fun l_0_9_116 () Real)
(declare-fun l_0_9_41 () Real)
(declare-fun l_0_9_187 () Real)
(declare-fun l_0_9_186 () Real)
(declare-fun l_0_9_185 () Real)
(declare-fun l_0_9_184 () Real)
(declare-fun l_0_9_166 () Real)
(declare-fun l_0_9_165 () Real)
(declare-fun l_0_9_164 () Real)
(declare-fun l_0_9_163 () Real)
(declare-fun l_0_9_20 () Real)
(declare-fun l_0_9_124 () Real)
(declare-fun l_0_9_123 () Real)
(declare-fun l_0_9_122 () Real)
(declare-fun l_0_9_121 () Real)
(declare-fun l_0_9_103 () Real)
(declare-fun l_0_9_102 () Real)
(declare-fun l_0_9_101 () Real)
(declare-fun l_0_9_100 () Real)
(declare-fun l_0_9_42 () Real)
(declare-fun l_0_9_21 () Real)
(declare-fun l_0_9_78 () Real)
(declare-fun l_0_9_57 () Real)
(declare-fun l_0_9_141 () Real)
(declare-fun l_0_9_83 () Real)
(declare-fun l_0_9_62 () Real)
(declare-fun l_0_9_146 () Real)
(declare-fun l_0_9_84 () Real)
(declare-fun l_0_9_63 () Real)
(declare-fun l_0_9_147 () Real)
(declare-fun l_0_9_246 () Real)
(declare-fun l_0_9_225 () Real)
(declare-fun l_0_9_204 () Real)
(declare-fun l_0_9_251 () Real)
(declare-fun l_0_9_230 () Real)
(declare-fun l_0_9_209 () Real)
(declare-fun l_0_9_252 () Real)
(declare-fun l_0_9_231 () Real)
(declare-fun l_0_9_210 () Real)
(declare-fun l_0_9_99 () Real)
(declare-fun l_0_9_183 () Real)
(declare-fun l_0_9_162 () Real)
(declare-fun l_0_9_120 () Real)
(declare-fun l_0_9_188 () Real)
(declare-fun l_0_9_167 () Real)
(declare-fun l_0_9_125 () Real)
(declare-fun l_0_9_104 () Real)
(declare-fun l_0_9_189 () Real)
(declare-fun l_0_9_168 () Real)
(declare-fun l_0_9_126 () Real)
(declare-fun l_0_9_105 () Real)
(declare-fun l_0_10_66 () Real)
(declare-fun l_0_10_65 () Real)
(declare-fun l_0_10_45 () Real)
(declare-fun l_0_10_44 () Real)
(declare-fun l_0_10_3 () Real)
(declare-fun l_0_10_255 () Real)
(declare-fun l_0_10_254 () Real)
(declare-fun l_0_10_24 () Real)
(declare-fun l_0_10_234 () Real)
(declare-fun l_0_10_233 () Real)
(declare-fun l_0_10_23 () Real)
(declare-fun l_0_10_213 () Real)
(declare-fun l_0_10_212 () Real)
(declare-fun l_0_10_2 () Real)
(declare-fun l_0_10_192 () Real)
(declare-fun l_0_10_191 () Real)
(declare-fun l_0_10_72 () Real)
(declare-fun l_0_10_69 () Real)
(declare-fun l_0_10_71 () Real)
(declare-fun l_0_10_68 () Real)
(declare-fun l_0_10_70 () Real)
(declare-fun l_0_10_67 () Real)
(declare-fun l_0_10_9 () Real)
(declare-fun l_0_10_6 () Real)
(declare-fun l_0_10_8 () Real)
(declare-fun l_0_10_5 () Real)
(declare-fun l_0_10_51 () Real)
(declare-fun l_0_10_48 () Real)
(declare-fun l_0_10_50 () Real)
(declare-fun l_0_10_47 () Real)
(declare-fun l_0_10_49 () Real)
(declare-fun l_0_10_46 () Real)
(declare-fun l_0_10_7 () Real)
(declare-fun l_0_10_4 () Real)
(declare-fun l_0_10_30 () Real)
(declare-fun l_0_10_27 () Real)
(declare-fun l_0_10_29 () Real)
(declare-fun l_0_10_26 () Real)
(declare-fun l_0_10_261 () Real)
(declare-fun l_0_10_258 () Real)
(declare-fun l_0_10_260 () Real)
(declare-fun l_0_10_257 () Real)
(declare-fun l_0_10_259 () Real)
(declare-fun l_0_10_256 () Real)
(declare-fun l_0_10_28 () Real)
(declare-fun l_0_10_25 () Real)
(declare-fun l_0_10_240 () Real)
(declare-fun l_0_10_237 () Real)
(declare-fun l_0_10_239 () Real)
(declare-fun l_0_10_236 () Real)
(declare-fun l_0_10_238 () Real)
(declare-fun l_0_10_235 () Real)
(declare-fun l_0_10_219 () Real)
(declare-fun l_0_10_216 () Real)
(declare-fun l_0_10_218 () Real)
(declare-fun l_0_10_215 () Real)
(declare-fun l_0_10_217 () Real)
(declare-fun l_0_10_214 () Real)
(declare-fun l_0_10_198 () Real)
(declare-fun l_0_10_195 () Real)
(declare-fun l_0_10_197 () Real)
(declare-fun l_0_10_194 () Real)
(declare-fun l_0_10_196 () Real)
(declare-fun l_0_10_193 () Real)
(declare-fun l_0_10_73 () Real)
(declare-fun l_0_10_52 () Real)
(declare-fun l_0_10_31 () Real)
(declare-fun l_0_10_262 () Real)
(declare-fun l_0_10_241 () Real)
(declare-fun l_0_10_220 () Real)
(declare-fun l_0_10_199 () Real)
(declare-fun l_0_10_10 () Real)
(declare-fun l_0_10_64 () Real)
(declare-fun l_0_10_43 () Real)
(declare-fun l_0_10_253 () Real)
(declare-fun l_0_10_232 () Real)
(declare-fun l_0_10_22 () Real)
(declare-fun l_0_10_211 () Real)
(declare-fun l_0_10_190 () Real)
(declare-fun l_0_10_128 () Real)
(declare-fun l_0_10_127 () Real)
(declare-fun l_0_10_1 () Real)
(declare-fun l_0_10_129 () Real)
(declare-fun l_0_10_133 () Real)
(declare-fun l_0_10_134 () Real)
(declare-fun l_0_10_135 () Real)
(declare-fun l_0_10_132 () Real)
(declare-fun l_0_10_131 () Real)
(declare-fun l_0_10_130 () Real)
(declare-fun l_0_10_136 () Real)
(declare-fun l_0_10_91 () Real)
(declare-fun l_0_10_85 () Real)
(declare-fun l_0_10_77 () Real)
(declare-fun l_0_10_76 () Real)
(declare-fun l_0_10_75 () Real)
(declare-fun l_0_10_74 () Real)
(declare-fun l_0_10_56 () Real)
(declare-fun l_0_10_55 () Real)
(declare-fun l_0_10_54 () Real)
(declare-fun l_0_10_53 () Real)
(declare-fun l_0_10_35 () Real)
(declare-fun l_0_10_34 () Real)
(declare-fun l_0_10_33 () Real)
(declare-fun l_0_10_32 () Real)
(declare-fun l_0_10_175 () Real)
(declare-fun l_0_10_169 () Real)
(declare-fun l_0_10_154 () Real)
(declare-fun l_0_10_148 () Real)
(declare-fun l_0_10_140 () Real)
(declare-fun l_0_10_139 () Real)
(declare-fun l_0_10_138 () Real)
(declare-fun l_0_10_137 () Real)
(declare-fun l_0_10_13 () Real)
(declare-fun l_0_10_12 () Real)
(declare-fun l_0_10_11 () Real)
(declare-fun l_0_10_112 () Real)
(declare-fun l_0_10_106 () Real)
(declare-fun l_0_10_14 () Real)
(declare-fun l_0_10_82 () Real)
(declare-fun l_0_10_81 () Real)
(declare-fun l_0_10_80 () Real)
(declare-fun l_0_10_79 () Real)
(declare-fun l_0_10_61 () Real)
(declare-fun l_0_10_60 () Real)
(declare-fun l_0_10_59 () Real)
(declare-fun l_0_10_58 () Real)
(declare-fun l_0_10_40 () Real)
(declare-fun l_0_10_39 () Real)
(declare-fun l_0_10_38 () Real)
(declare-fun l_0_10_37 () Real)
(declare-fun l_0_10_18 () Real)
(declare-fun l_0_10_17 () Real)
(declare-fun l_0_10_16 () Real)
(declare-fun l_0_10_145 () Real)
(declare-fun l_0_10_144 () Real)
(declare-fun l_0_10_143 () Real)
(declare-fun l_0_10_142 () Real)
(declare-fun l_0_10_19 () Real)
(declare-fun l_0_10_92 () Real)
(declare-fun l_0_10_87 () Real)
(declare-fun l_0_10_86 () Real)
(declare-fun l_0_10_266 () Real)
(declare-fun l_0_10_265 () Real)
(declare-fun l_0_10_264 () Real)
(declare-fun l_0_10_263 () Real)
(declare-fun l_0_10_245 () Real)
(declare-fun l_0_10_244 () Real)
(declare-fun l_0_10_243 () Real)
(declare-fun l_0_10_242 () Real)
(declare-fun l_0_10_224 () Real)
(declare-fun l_0_10_223 () Real)
(declare-fun l_0_10_222 () Real)
(declare-fun l_0_10_221 () Real)
(declare-fun l_0_10_203 () Real)
(declare-fun l_0_10_202 () Real)
(declare-fun l_0_10_201 () Real)
(declare-fun l_0_10_200 () Real)
(declare-fun l_0_10_176 () Real)
(declare-fun l_0_10_171 () Real)
(declare-fun l_0_10_170 () Real)
(declare-fun l_0_10_155 () Real)
(declare-fun l_0_10_150 () Real)
(declare-fun l_0_10_149 () Real)
(declare-fun l_0_10_113 () Real)
(declare-fun l_0_10_108 () Real)
(declare-fun l_0_10_107 () Real)
(declare-fun l_0_10_271 () Real)
(declare-fun l_0_10_270 () Real)
(declare-fun l_0_10_269 () Real)
(declare-fun l_0_10_268 () Real)
(declare-fun l_0_10_250 () Real)
(declare-fun l_0_10_249 () Real)
(declare-fun l_0_10_248 () Real)
(declare-fun l_0_10_247 () Real)
(declare-fun l_0_10_229 () Real)
(declare-fun l_0_10_228 () Real)
(declare-fun l_0_10_227 () Real)
(declare-fun l_0_10_226 () Real)
(declare-fun l_0_10_208 () Real)
(declare-fun l_0_10_207 () Real)
(declare-fun l_0_10_206 () Real)
(declare-fun l_0_10_205 () Real)
(declare-fun l_0_10_93 () Real)
(declare-fun l_0_10_90 () Real)
(declare-fun l_0_10_89 () Real)
(declare-fun l_0_10_88 () Real)
(declare-fun l_0_10_177 () Real)
(declare-fun l_0_10_174 () Real)
(declare-fun l_0_10_173 () Real)
(declare-fun l_0_10_172 () Real)
(declare-fun l_0_10_156 () Real)
(declare-fun l_0_10_153 () Real)
(declare-fun l_0_10_152 () Real)
(declare-fun l_0_10_151 () Real)
(declare-fun l_0_10_114 () Real)
(declare-fun l_0_10_111 () Real)
(declare-fun l_0_10_110 () Real)
(declare-fun l_0_10_109 () Real)
(declare-fun l_0_10_94 () Real)
(declare-fun l_0_10_178 () Real)
(declare-fun l_0_10_157 () Real)
(declare-fun l_0_10_115 () Real)
(declare-fun l_0_10_98 () Real)
(declare-fun l_0_10_97 () Real)
(declare-fun l_0_10_96 () Real)
(declare-fun l_0_10_95 () Real)
(declare-fun l_0_10_36 () Real)
(declare-fun l_0_10_182 () Real)
(declare-fun l_0_10_181 () Real)
(declare-fun l_0_10_180 () Real)
(declare-fun l_0_10_179 () Real)
(declare-fun l_0_10_161 () Real)
(declare-fun l_0_10_160 () Real)
(declare-fun l_0_10_159 () Real)
(declare-fun l_0_10_158 () Real)
(declare-fun l_0_10_15 () Real)
(declare-fun l_0_10_119 () Real)
(declare-fun l_0_10_118 () Real)
(declare-fun l_0_10_117 () Real)
(declare-fun l_0_10_116 () Real)
(declare-fun l_0_10_41 () Real)
(declare-fun l_0_10_187 () Real)
(declare-fun l_0_10_186 () Real)
(declare-fun l_0_10_185 () Real)
(declare-fun l_0_10_184 () Real)
(declare-fun l_0_10_166 () Real)
(declare-fun l_0_10_165 () Real)
(declare-fun l_0_10_164 () Real)
(declare-fun l_0_10_163 () Real)
(declare-fun l_0_10_20 () Real)
(declare-fun l_0_10_124 () Real)
(declare-fun l_0_10_123 () Real)
(declare-fun l_0_10_122 () Real)
(declare-fun l_0_10_121 () Real)
(declare-fun l_0_10_103 () Real)
(declare-fun l_0_10_102 () Real)
(declare-fun l_0_10_101 () Real)
(declare-fun l_0_10_100 () Real)
(declare-fun l_0_10_42 () Real)
(declare-fun l_0_10_21 () Real)
(declare-fun l_0_10_78 () Real)
(declare-fun l_0_10_57 () Real)
(declare-fun l_0_10_141 () Real)
(declare-fun l_0_10_83 () Real)
(declare-fun l_0_10_62 () Real)
(declare-fun l_0_10_146 () Real)
(declare-fun l_0_10_84 () Real)
(declare-fun l_0_10_63 () Real)
(declare-fun l_0_10_147 () Real)
(declare-fun l_0_10_267 () Real)
(declare-fun l_0_10_246 () Real)
(declare-fun l_0_10_225 () Real)
(declare-fun l_0_10_204 () Real)
(declare-fun l_0_10_272 () Real)
(declare-fun l_0_10_251 () Real)
(declare-fun l_0_10_230 () Real)
(declare-fun l_0_10_209 () Real)
(declare-fun l_0_10_273 () Real)
(declare-fun l_0_10_252 () Real)
(declare-fun l_0_10_231 () Real)
(declare-fun l_0_10_210 () Real)
(declare-fun l_0_10_99 () Real)
(declare-fun l_0_10_183 () Real)
(declare-fun l_0_10_162 () Real)
(declare-fun l_0_10_120 () Real)
(declare-fun l_0_10_188 () Real)
(declare-fun l_0_10_167 () Real)
(declare-fun l_0_10_125 () Real)
(declare-fun l_0_10_104 () Real)
(declare-fun l_0_10_189 () Real)
(declare-fun l_0_10_168 () Real)
(declare-fun l_0_10_126 () Real)
(declare-fun l_0_10_105 () Real)
(declare-fun l_0_11_96 () Real)
(declare-fun l_0_11_87 () Real)
(declare-fun l_0_11_95 () Real)
(declare-fun l_0_11_86 () Real)
(declare-fun l_0_11_78 () Real)
(declare-fun l_0_11_77 () Real)
(declare-fun l_0_11_76 () Real)
(declare-fun l_0_11_75 () Real)
(declare-fun l_0_11_74 () Real)
(declare-fun l_0_11_57 () Real)
(declare-fun l_0_11_56 () Real)
(declare-fun l_0_11_55 () Real)
(declare-fun l_0_11_54 () Real)
(declare-fun l_0_11_53 () Real)
(declare-fun l_0_11_36 () Real)
(declare-fun l_0_11_35 () Real)
(declare-fun l_0_11_34 () Real)
(declare-fun l_0_11_33 () Real)
(declare-fun l_0_11_32 () Real)
(declare-fun l_0_11_288 () Real)
(declare-fun l_0_11_287 () Real)
(declare-fun l_0_11_286 () Real)
(declare-fun l_0_11_285 () Real)
(declare-fun l_0_11_284 () Real)
(declare-fun l_0_11_267 () Real)
(declare-fun l_0_11_266 () Real)
(declare-fun l_0_11_265 () Real)
(declare-fun l_0_11_264 () Real)
(declare-fun l_0_11_263 () Real)
(declare-fun l_0_11_246 () Real)
(declare-fun l_0_11_245 () Real)
(declare-fun l_0_11_244 () Real)
(declare-fun l_0_11_243 () Real)
(declare-fun l_0_11_242 () Real)
(declare-fun l_0_11_225 () Real)
(declare-fun l_0_11_224 () Real)
(declare-fun l_0_11_223 () Real)
(declare-fun l_0_11_222 () Real)
(declare-fun l_0_11_221 () Real)
(declare-fun l_0_11_204 () Real)
(declare-fun l_0_11_203 () Real)
(declare-fun l_0_11_202 () Real)
(declare-fun l_0_11_201 () Real)
(declare-fun l_0_11_200 () Real)
(declare-fun l_0_11_180 () Real)
(declare-fun l_0_11_171 () Real)
(declare-fun l_0_11_179 () Real)
(declare-fun l_0_11_170 () Real)
(declare-fun l_0_11_159 () Real)
(declare-fun l_0_11_150 () Real)
(declare-fun l_0_11_15 () Real)
(declare-fun l_0_11_158 () Real)
(declare-fun l_0_11_149 () Real)
(declare-fun l_0_11_14 () Real)
(declare-fun l_0_11_13 () Real)
(declare-fun l_0_11_12 () Real)
(declare-fun l_0_11_11 () Real)
(declare-fun l_0_11_117 () Real)
(declare-fun l_0_11_108 () Real)
(declare-fun l_0_11_116 () Real)
(declare-fun l_0_11_107 () Real)
(declare-fun _a_0_ () Real)
(declare-fun l_0_11_66 () Real)
(declare-fun l_0_11_65 () Real)
(declare-fun l_0_11_45 () Real)
(declare-fun l_0_11_44 () Real)
(declare-fun l_0_11_3 () Real)
(declare-fun l_0_11_276 () Real)
(declare-fun l_0_11_275 () Real)
(declare-fun l_0_11_255 () Real)
(declare-fun l_0_11_254 () Real)
(declare-fun l_0_11_24 () Real)
(declare-fun l_0_11_234 () Real)
(declare-fun l_0_11_233 () Real)
(declare-fun l_0_11_23 () Real)
(declare-fun l_0_11_213 () Real)
(declare-fun l_0_11_212 () Real)
(declare-fun l_0_11_2 () Real)
(declare-fun l_0_11_192 () Real)
(declare-fun l_0_11_191 () Real)
(declare-fun _a_1_ () Real)
(declare-fun _a_2_ () Real)
(declare-fun l_0_11_69 () Real)
(declare-fun l_0_11_68 () Real)
(declare-fun l_0_11_67 () Real)
(declare-fun l_0_11_6 () Real)
(declare-fun l_0_11_5 () Real)
(declare-fun l_0_11_48 () Real)
(declare-fun l_0_11_47 () Real)
(declare-fun l_0_11_46 () Real)
(declare-fun l_0_11_4 () Real)
(declare-fun l_0_11_279 () Real)
(declare-fun l_0_11_278 () Real)
(declare-fun l_0_11_277 () Real)
(declare-fun l_0_11_27 () Real)
(declare-fun l_0_11_26 () Real)
(declare-fun l_0_11_258 () Real)
(declare-fun l_0_11_257 () Real)
(declare-fun l_0_11_256 () Real)
(declare-fun l_0_11_25 () Real)
(declare-fun l_0_11_237 () Real)
(declare-fun l_0_11_236 () Real)
(declare-fun l_0_11_235 () Real)
(declare-fun l_0_11_216 () Real)
(declare-fun l_0_11_215 () Real)
(declare-fun l_0_11_214 () Real)
(declare-fun l_0_11_195 () Real)
(declare-fun l_0_11_194 () Real)
(declare-fun l_0_11_193 () Real)
(declare-fun _a_3_ () Real)
(declare-fun _a_4_ () Real)
(declare-fun l_0_11_89 () Real)
(declare-fun l_0_11_88 () Real)
(declare-fun l_0_11_173 () Real)
(declare-fun l_0_11_172 () Real)
(declare-fun l_0_11_152 () Real)
(declare-fun l_0_11_151 () Real)
(declare-fun l_0_11_110 () Real)
(declare-fun l_0_11_109 () Real)
(declare-fun _a_5_ () Real)
(declare-fun l_0_11_64 () Real)
(declare-fun l_0_11_43 () Real)
(declare-fun l_0_11_22 () Real)
(declare-fun l_0_11_127 () Real)
(declare-fun l_0_11_1 () Real)
(declare-fun l_0_11_274 () Real)
(declare-fun l_0_11_253 () Real)
(declare-fun l_0_11_232 () Real)
(declare-fun l_0_11_211 () Real)
(declare-fun l_0_11_190 () Real)
(declare-fun l_0_11_128 () Real)
(declare-fun l_0_11_129 () Real)
(declare-fun l_0_11_71 () Real)
(declare-fun l_0_11_70 () Real)
(declare-fun l_0_11_50 () Real)
(declare-fun l_0_11_49 () Real)
(declare-fun l_0_11_28 () Real)
(declare-fun l_0_11_133 () Real)
(declare-fun l_0_11_7 () Real)
(declare-fun l_0_11_8 () Real)
(declare-fun l_0_11_280 () Real)
(declare-fun l_0_11_259 () Real)
(declare-fun l_0_11_29 () Real)
(declare-fun l_0_11_238 () Real)
(declare-fun l_0_11_217 () Real)
(declare-fun l_0_11_196 () Real)
(declare-fun l_0_11_134 () Real)
(declare-fun l_0_11_72 () Real)
(declare-fun l_0_11_9 () Real)
(declare-fun l_0_11_51 () Real)
(declare-fun l_0_11_30 () Real)
(declare-fun l_0_11_135 () Real)
(declare-fun l_0_11_132 () Real)
(declare-fun l_0_11_131 () Real)
(declare-fun l_0_11_130 () Real)
(declare-fun l_0_11_73 () Real)
(declare-fun l_0_11_52 () Real)
(declare-fun l_0_11_31 () Real)
(declare-fun l_0_11_136 () Real)
(declare-fun l_0_11_10 () Real)
(declare-fun l_0_11_91 () Real)
(declare-fun l_0_11_85 () Real)
(declare-fun l_0_11_175 () Real)
(declare-fun l_0_11_169 () Real)
(declare-fun l_0_11_154 () Real)
(declare-fun l_0_11_148 () Real)
(declare-fun l_0_11_140 () Real)
(declare-fun l_0_11_139 () Real)
(declare-fun l_0_11_138 () Real)
(declare-fun l_0_11_137 () Real)
(declare-fun l_0_11_112 () Real)
(declare-fun l_0_11_106 () Real)
(declare-fun l_0_11_82 () Real)
(declare-fun l_0_11_81 () Real)
(declare-fun l_0_11_80 () Real)
(declare-fun l_0_11_79 () Real)
(declare-fun l_0_11_61 () Real)
(declare-fun l_0_11_60 () Real)
(declare-fun l_0_11_59 () Real)
(declare-fun l_0_11_58 () Real)
(declare-fun l_0_11_40 () Real)
(declare-fun l_0_11_39 () Real)
(declare-fun l_0_11_38 () Real)
(declare-fun l_0_11_37 () Real)
(declare-fun l_0_11_18 () Real)
(declare-fun l_0_11_17 () Real)
(declare-fun l_0_11_16 () Real)
(declare-fun l_0_11_145 () Real)
(declare-fun l_0_11_144 () Real)
(declare-fun l_0_11_143 () Real)
(declare-fun l_0_11_142 () Real)
(declare-fun l_0_11_19 () Real)
(declare-fun l_0_11_281 () Real)
(declare-fun l_0_11_260 () Real)
(declare-fun l_0_11_239 () Real)
(declare-fun l_0_11_218 () Real)
(declare-fun l_0_11_197 () Real)
(declare-fun l_0_11_282 () Real)
(declare-fun l_0_11_261 () Real)
(declare-fun l_0_11_240 () Real)
(declare-fun l_0_11_219 () Real)
(declare-fun l_0_11_198 () Real)
(declare-fun l_0_11_283 () Real)
(declare-fun l_0_11_262 () Real)
(declare-fun l_0_11_241 () Real)
(declare-fun l_0_11_220 () Real)
(declare-fun l_0_11_199 () Real)
(declare-fun l_0_11_92 () Real)
(declare-fun l_0_11_176 () Real)
(declare-fun l_0_11_155 () Real)
(declare-fun l_0_11_113 () Real)
(declare-fun l_0_11_292 () Real)
(declare-fun l_0_11_291 () Real)
(declare-fun l_0_11_290 () Real)
(declare-fun l_0_11_289 () Real)
(declare-fun l_0_11_271 () Real)
(declare-fun l_0_11_270 () Real)
(declare-fun l_0_11_269 () Real)
(declare-fun l_0_11_268 () Real)
(declare-fun l_0_11_250 () Real)
(declare-fun l_0_11_249 () Real)
(declare-fun l_0_11_248 () Real)
(declare-fun l_0_11_247 () Real)
(declare-fun l_0_11_229 () Real)
(declare-fun l_0_11_228 () Real)
(declare-fun l_0_11_227 () Real)
(declare-fun l_0_11_226 () Real)
(declare-fun l_0_11_208 () Real)
(declare-fun l_0_11_207 () Real)
(declare-fun l_0_11_206 () Real)
(declare-fun l_0_11_205 () Real)
(declare-fun l_0_11_93 () Real)
(declare-fun l_0_11_90 () Real)
(declare-fun l_0_11_177 () Real)
(declare-fun l_0_11_174 () Real)
(declare-fun l_0_11_156 () Real)
(declare-fun l_0_11_153 () Real)
(declare-fun l_0_11_114 () Real)
(declare-fun l_0_11_111 () Real)
(declare-fun l_0_11_94 () Real)
(declare-fun l_0_11_178 () Real)
(declare-fun l_0_11_157 () Real)
(declare-fun l_0_11_115 () Real)
(declare-fun l_0_11_98 () Real)
(declare-fun l_0_11_97 () Real)
(declare-fun l_0_11_182 () Real)
(declare-fun l_0_11_181 () Real)
(declare-fun l_0_11_161 () Real)
(declare-fun l_0_11_160 () Real)
(declare-fun l_0_11_119 () Real)
(declare-fun l_0_11_118 () Real)
(declare-fun l_0_11_41 () Real)
(declare-fun l_0_11_187 () Real)
(declare-fun l_0_11_186 () Real)
(declare-fun l_0_11_185 () Real)
(declare-fun l_0_11_184 () Real)
(declare-fun l_0_11_166 () Real)
(declare-fun l_0_11_165 () Real)
(declare-fun l_0_11_164 () Real)
(declare-fun l_0_11_163 () Real)
(declare-fun l_0_11_20 () Real)
(declare-fun l_0_11_124 () Real)
(declare-fun l_0_11_123 () Real)
(declare-fun l_0_11_122 () Real)
(declare-fun l_0_11_121 () Real)
(declare-fun l_0_11_103 () Real)
(declare-fun l_0_11_102 () Real)
(declare-fun l_0_11_101 () Real)
(declare-fun l_0_11_100 () Real)
(declare-fun l_0_11_42 () Real)
(declare-fun l_0_11_21 () Real)
(declare-fun l_0_11_141 () Real)
(declare-fun l_0_11_83 () Real)
(declare-fun l_0_11_62 () Real)
(declare-fun l_0_11_146 () Real)
(declare-fun l_0_11_84 () Real)
(declare-fun l_0_11_63 () Real)
(declare-fun l_0_11_147 () Real)
(declare-fun l_0_11_293 () Real)
(declare-fun l_0_11_272 () Real)
(declare-fun l_0_11_251 () Real)
(declare-fun l_0_11_230 () Real)
(declare-fun l_0_11_209 () Real)
(declare-fun l_0_11_294 () Real)
(declare-fun l_0_11_273 () Real)
(declare-fun l_0_11_252 () Real)
(declare-fun l_0_11_231 () Real)
(declare-fun l_0_11_210 () Real)
(declare-fun l_0_11_99 () Real)
(declare-fun l_0_11_183 () Real)
(declare-fun l_0_11_162 () Real)
(declare-fun l_0_11_120 () Real)
(declare-fun l_0_11_188 () Real)
(declare-fun l_0_11_167 () Real)
(declare-fun l_0_11_125 () Real)
(declare-fun l_0_11_104 () Real)
(declare-fun l_0_11_189 () Real)
(declare-fun l_0_11_168 () Real)
(declare-fun l_0_11_126 () Real)
(declare-fun l_0_11_105 () Real)
(declare-fun l_0_12_87 () Real)
(declare-fun l_0_12_86 () Real)
(declare-fun l_0_12_64 () Real)
(declare-fun l_0_12_65 () Real)
(declare-fun l_0_12_43 () Real)
(declare-fun l_0_12_44 () Real)
(declare-fun l_0_12_22 () Real)
(declare-fun l_0_12_171 () Real)
(declare-fun l_0_12_170 () Real)
(declare-fun l_0_12_150 () Real)
(declare-fun l_0_12_149 () Real)
(declare-fun l_0_12_127 () Real)
(declare-fun l_0_12_108 () Real)
(declare-fun l_0_12_107 () Real)
(declare-fun l_0_12_1 () Real)
(declare-fun l_0_12_66 () Real)
(declare-fun l_0_12_45 () Real)
(declare-fun l_0_12_295 () Real)
(declare-fun l_0_12_274 () Real)
(declare-fun l_0_12_253 () Real)
(declare-fun l_0_12_232 () Real)
(declare-fun l_0_12_23 () Real)
(declare-fun l_0_12_211 () Real)
(declare-fun l_0_12_190 () Real)
(declare-fun l_0_12_128 () Real)
(declare-fun l_0_12_2 () Real)
(declare-fun l_0_12_3 () Real)
(declare-fun l_0_12_296 () Real)
(declare-fun l_0_12_275 () Real)
(declare-fun l_0_12_254 () Real)
(declare-fun l_0_12_24 () Real)
(declare-fun l_0_12_233 () Real)
(declare-fun l_0_12_212 () Real)
(declare-fun l_0_12_191 () Real)
(declare-fun l_0_12_129 () Real)
(declare-fun l_0_12_297 () Real)
(declare-fun l_0_12_276 () Real)
(declare-fun l_0_12_255 () Real)
(declare-fun l_0_12_234 () Real)
(declare-fun l_0_12_213 () Real)
(declare-fun l_0_12_192 () Real)
(declare-fun l_0_12_96 () Real)
(declare-fun l_0_12_95 () Real)
(declare-fun l_0_12_78 () Real)
(declare-fun l_0_12_77 () Real)
(declare-fun l_0_12_76 () Real)
(declare-fun l_0_12_75 () Real)
(declare-fun l_0_12_74 () Real)
(declare-fun l_0_12_57 () Real)
(declare-fun l_0_12_56 () Real)
(declare-fun l_0_12_55 () Real)
(declare-fun l_0_12_54 () Real)
(declare-fun l_0_12_53 () Real)
(declare-fun l_0_12_36 () Real)
(declare-fun l_0_12_35 () Real)
(declare-fun l_0_12_34 () Real)
(declare-fun l_0_12_33 () Real)
(declare-fun l_0_12_32 () Real)
(declare-fun l_0_12_309 () Real)
(declare-fun l_0_12_308 () Real)
(declare-fun l_0_12_307 () Real)
(declare-fun l_0_12_306 () Real)
(declare-fun l_0_12_305 () Real)
(declare-fun l_0_12_288 () Real)
(declare-fun l_0_12_287 () Real)
(declare-fun l_0_12_286 () Real)
(declare-fun l_0_12_285 () Real)
(declare-fun l_0_12_284 () Real)
(declare-fun l_0_12_267 () Real)
(declare-fun l_0_12_266 () Real)
(declare-fun l_0_12_265 () Real)
(declare-fun l_0_12_264 () Real)
(declare-fun l_0_12_263 () Real)
(declare-fun l_0_12_246 () Real)
(declare-fun l_0_12_245 () Real)
(declare-fun l_0_12_244 () Real)
(declare-fun l_0_12_243 () Real)
(declare-fun l_0_12_242 () Real)
(declare-fun l_0_12_225 () Real)
(declare-fun l_0_12_224 () Real)
(declare-fun l_0_12_223 () Real)
(declare-fun l_0_12_222 () Real)
(declare-fun l_0_12_221 () Real)
(declare-fun l_0_12_204 () Real)
(declare-fun l_0_12_203 () Real)
(declare-fun l_0_12_202 () Real)
(declare-fun l_0_12_201 () Real)
(declare-fun l_0_12_200 () Real)
(declare-fun l_0_12_180 () Real)
(declare-fun l_0_12_179 () Real)
(declare-fun l_0_12_159 () Real)
(declare-fun l_0_12_15 () Real)
(declare-fun l_0_12_158 () Real)
(declare-fun l_0_12_14 () Real)
(declare-fun l_0_12_13 () Real)
(declare-fun l_0_12_12 () Real)
(declare-fun l_0_12_11 () Real)
(declare-fun l_0_12_117 () Real)
(declare-fun l_0_12_116 () Real)
(declare-fun l_0_12_69 () Real)
(declare-fun l_0_12_68 () Real)
(declare-fun l_0_12_67 () Real)
(declare-fun l_0_12_6 () Real)
(declare-fun l_0_12_5 () Real)
(declare-fun l_0_12_48 () Real)
(declare-fun l_0_12_47 () Real)
(declare-fun l_0_12_46 () Real)
(declare-fun l_0_12_4 () Real)
(declare-fun l_0_12_300 () Real)
(declare-fun l_0_12_299 () Real)
(declare-fun l_0_12_298 () Real)
(declare-fun l_0_12_279 () Real)
(declare-fun l_0_12_278 () Real)
(declare-fun l_0_12_277 () Real)
(declare-fun l_0_12_27 () Real)
(declare-fun l_0_12_26 () Real)
(declare-fun l_0_12_258 () Real)
(declare-fun l_0_12_257 () Real)
(declare-fun l_0_12_256 () Real)
(declare-fun l_0_12_25 () Real)
(declare-fun l_0_12_237 () Real)
(declare-fun l_0_12_236 () Real)
(declare-fun l_0_12_235 () Real)
(declare-fun l_0_12_216 () Real)
(declare-fun l_0_12_215 () Real)
(declare-fun l_0_12_214 () Real)
(declare-fun l_0_12_195 () Real)
(declare-fun l_0_12_194 () Real)
(declare-fun l_0_12_193 () Real)
(declare-fun l_0_12_89 () Real)
(declare-fun l_0_12_88 () Real)
(declare-fun l_0_12_173 () Real)
(declare-fun l_0_12_172 () Real)
(declare-fun l_0_12_152 () Real)
(declare-fun l_0_12_151 () Real)
(declare-fun l_0_12_110 () Real)
(declare-fun l_0_12_109 () Real)
(declare-fun l_0_12_71 () Real)
(declare-fun l_0_12_70 () Real)
(declare-fun l_0_12_50 () Real)
(declare-fun l_0_12_49 () Real)
(declare-fun l_0_12_28 () Real)
(declare-fun l_0_12_133 () Real)
(declare-fun l_0_12_7 () Real)
(declare-fun l_0_12_8 () Real)
(declare-fun l_0_12_301 () Real)
(declare-fun l_0_12_280 () Real)
(declare-fun l_0_12_259 () Real)
(declare-fun l_0_12_29 () Real)
(declare-fun l_0_12_238 () Real)
(declare-fun l_0_12_217 () Real)
(declare-fun l_0_12_196 () Real)
(declare-fun l_0_12_134 () Real)
(declare-fun l_0_12_72 () Real)
(declare-fun l_0_12_9 () Real)
(declare-fun l_0_12_51 () Real)
(declare-fun l_0_12_30 () Real)
(declare-fun l_0_12_135 () Real)
(declare-fun l_0_12_132 () Real)
(declare-fun l_0_12_131 () Real)
(declare-fun l_0_12_130 () Real)
(declare-fun l_0_12_73 () Real)
(declare-fun l_0_12_52 () Real)
(declare-fun l_0_12_31 () Real)
(declare-fun l_0_12_136 () Real)
(declare-fun l_0_12_10 () Real)
(declare-fun l_0_12_91 () Real)
(declare-fun l_0_12_85 () Real)
(declare-fun l_0_12_175 () Real)
(declare-fun l_0_12_169 () Real)
(declare-fun l_0_12_154 () Real)
(declare-fun l_0_12_148 () Real)
(declare-fun l_0_12_140 () Real)
(declare-fun l_0_12_139 () Real)
(declare-fun l_0_12_138 () Real)
(declare-fun l_0_12_137 () Real)
(declare-fun l_0_12_112 () Real)
(declare-fun l_0_12_106 () Real)
(declare-fun l_0_12_82 () Real)
(declare-fun l_0_12_81 () Real)
(declare-fun l_0_12_80 () Real)
(declare-fun l_0_12_79 () Real)
(declare-fun l_0_12_61 () Real)
(declare-fun l_0_12_60 () Real)
(declare-fun l_0_12_59 () Real)
(declare-fun l_0_12_58 () Real)
(declare-fun l_0_12_40 () Real)
(declare-fun l_0_12_39 () Real)
(declare-fun l_0_12_38 () Real)
(declare-fun l_0_12_37 () Real)
(declare-fun l_0_12_18 () Real)
(declare-fun l_0_12_17 () Real)
(declare-fun l_0_12_16 () Real)
(declare-fun l_0_12_145 () Real)
(declare-fun l_0_12_144 () Real)
(declare-fun l_0_12_143 () Real)
(declare-fun l_0_12_142 () Real)
(declare-fun l_0_12_19 () Real)
(declare-fun l_0_12_302 () Real)
(declare-fun l_0_12_281 () Real)
(declare-fun l_0_12_260 () Real)
(declare-fun l_0_12_239 () Real)
(declare-fun l_0_12_218 () Real)
(declare-fun l_0_12_197 () Real)
(declare-fun l_0_12_303 () Real)
(declare-fun l_0_12_282 () Real)
(declare-fun l_0_12_261 () Real)
(declare-fun l_0_12_240 () Real)
(declare-fun l_0_12_219 () Real)
(declare-fun l_0_12_198 () Real)
(declare-fun l_0_12_304 () Real)
(declare-fun l_0_12_283 () Real)
(declare-fun l_0_12_262 () Real)
(declare-fun l_0_12_241 () Real)
(declare-fun l_0_12_220 () Real)
(declare-fun l_0_12_199 () Real)
(declare-fun l_0_12_92 () Real)
(declare-fun l_0_12_176 () Real)
(declare-fun l_0_12_155 () Real)
(declare-fun l_0_12_113 () Real)
(declare-fun l_0_12_313 () Real)
(declare-fun l_0_12_312 () Real)
(declare-fun l_0_12_311 () Real)
(declare-fun l_0_12_310 () Real)
(declare-fun l_0_12_292 () Real)
(declare-fun l_0_12_291 () Real)
(declare-fun l_0_12_290 () Real)
(declare-fun l_0_12_289 () Real)
(declare-fun l_0_12_271 () Real)
(declare-fun l_0_12_270 () Real)
(declare-fun l_0_12_269 () Real)
(declare-fun l_0_12_268 () Real)
(declare-fun l_0_12_250 () Real)
(declare-fun l_0_12_249 () Real)
(declare-fun l_0_12_248 () Real)
(declare-fun l_0_12_247 () Real)
(declare-fun l_0_12_229 () Real)
(declare-fun l_0_12_228 () Real)
(declare-fun l_0_12_227 () Real)
(declare-fun l_0_12_226 () Real)
(declare-fun l_0_12_208 () Real)
(declare-fun l_0_12_207 () Real)
(declare-fun l_0_12_206 () Real)
(declare-fun l_0_12_205 () Real)
(declare-fun l_0_12_93 () Real)
(declare-fun l_0_12_90 () Real)
(declare-fun l_0_12_177 () Real)
(declare-fun l_0_12_174 () Real)
(declare-fun l_0_12_156 () Real)
(declare-fun l_0_12_153 () Real)
(declare-fun l_0_12_114 () Real)
(declare-fun l_0_12_111 () Real)
(declare-fun l_0_12_94 () Real)
(declare-fun l_0_12_178 () Real)
(declare-fun l_0_12_157 () Real)
(declare-fun l_0_12_115 () Real)
(declare-fun l_0_12_98 () Real)
(declare-fun l_0_12_97 () Real)
(declare-fun l_0_12_182 () Real)
(declare-fun l_0_12_181 () Real)
(declare-fun l_0_12_161 () Real)
(declare-fun l_0_12_160 () Real)
(declare-fun l_0_12_119 () Real)
(declare-fun l_0_12_118 () Real)
(declare-fun l_0_12_41 () Real)
(declare-fun l_0_12_187 () Real)
(declare-fun l_0_12_186 () Real)
(declare-fun l_0_12_185 () Real)
(declare-fun l_0_12_184 () Real)
(declare-fun l_0_12_166 () Real)
(declare-fun l_0_12_165 () Real)
(declare-fun l_0_12_164 () Real)
(declare-fun l_0_12_163 () Real)
(declare-fun l_0_12_20 () Real)
(declare-fun l_0_12_124 () Real)
(declare-fun l_0_12_123 () Real)
(declare-fun l_0_12_122 () Real)
(declare-fun l_0_12_121 () Real)
(declare-fun l_0_12_103 () Real)
(declare-fun l_0_12_102 () Real)
(declare-fun l_0_12_101 () Real)
(declare-fun l_0_12_100 () Real)
(declare-fun l_0_12_42 () Real)
(declare-fun l_0_12_21 () Real)
(declare-fun l_0_12_141 () Real)
(declare-fun l_0_12_83 () Real)
(declare-fun l_0_12_62 () Real)
(declare-fun l_0_12_146 () Real)
(declare-fun l_0_12_84 () Real)
(declare-fun l_0_12_63 () Real)
(declare-fun l_0_12_147 () Real)
(declare-fun l_0_12_314 () Real)
(declare-fun l_0_12_293 () Real)
(declare-fun l_0_12_272 () Real)
(declare-fun l_0_12_251 () Real)
(declare-fun l_0_12_230 () Real)
(declare-fun l_0_12_209 () Real)
(declare-fun l_0_12_315 () Real)
(declare-fun l_0_12_294 () Real)
(declare-fun l_0_12_273 () Real)
(declare-fun l_0_12_252 () Real)
(declare-fun l_0_12_231 () Real)
(declare-fun l_0_12_210 () Real)
(declare-fun l_0_12_99 () Real)
(declare-fun l_0_12_183 () Real)
(declare-fun l_0_12_162 () Real)
(declare-fun l_0_12_120 () Real)
(declare-fun l_0_12_188 () Real)
(declare-fun l_0_12_167 () Real)
(declare-fun l_0_12_125 () Real)
(declare-fun l_0_12_104 () Real)
(declare-fun l_0_12_189 () Real)
(declare-fun l_0_12_168 () Real)
(declare-fun l_0_12_126 () Real)
(declare-fun l_0_12_105 () Real)
(declare-fun l_0_13_66 () Real)
(declare-fun l_0_13_65 () Real)
(declare-fun l_0_13_45 () Real)
(declare-fun l_0_13_44 () Real)
(declare-fun l_0_13_3 () Real)
(declare-fun l_0_13_24 () Real)
(declare-fun l_0_13_23 () Real)
(declare-fun l_0_13_2 () Real)
(declare-fun l_0_13_192 () Real)
(declare-fun l_0_13_191 () Real)
(declare-fun l_0_13_71 () Real)
(declare-fun l_0_13_70 () Real)
(declare-fun l_0_13_50 () Real)
(declare-fun l_0_13_49 () Real)
(declare-fun l_0_13_8 () Real)
(declare-fun l_0_13_29 () Real)
(declare-fun l_0_13_28 () Real)
(declare-fun l_0_13_7 () Real)
(declare-fun l_0_13_197 () Real)
(declare-fun l_0_13_196 () Real)
(declare-fun l_0_13_64 () Real)
(declare-fun l_0_13_43 () Real)
(declare-fun l_0_13_22 () Real)
(declare-fun l_0_13_190 () Real)
(declare-fun l_0_13_129 () Real)
(declare-fun l_0_13_128 () Real)
(declare-fun l_0_13_1 () Real)
(declare-fun l_0_13_133 () Real)
(declare-fun l_0_13_127 () Real)
(declare-fun l_0_13_134 () Real)
(declare-fun l_0_13_72 () Real)
(declare-fun l_0_13_69 () Real)
(declare-fun l_0_13_68 () Real)
(declare-fun l_0_13_67 () Real)
(declare-fun l_0_13_9 () Real)
(declare-fun l_0_13_6 () Real)
(declare-fun l_0_13_5 () Real)
(declare-fun l_0_13_51 () Real)
(declare-fun l_0_13_48 () Real)
(declare-fun l_0_13_47 () Real)
(declare-fun l_0_13_46 () Real)
(declare-fun l_0_13_4 () Real)
(declare-fun l_0_13_30 () Real)
(declare-fun l_0_13_27 () Real)
(declare-fun l_0_13_26 () Real)
(declare-fun l_0_13_25 () Real)
(declare-fun l_0_13_135 () Real)
(declare-fun l_0_13_132 () Real)
(declare-fun l_0_13_131 () Real)
(declare-fun l_0_13_130 () Real)
(declare-fun l_0_13_73 () Real)
(declare-fun l_0_13_52 () Real)
(declare-fun l_0_13_31 () Real)
(declare-fun l_0_13_136 () Real)
(declare-fun l_0_13_10 () Real)
(declare-fun l_0_13_91 () Real)
(declare-fun l_0_13_85 () Real)
(declare-fun l_0_13_77 () Real)
(declare-fun l_0_13_76 () Real)
(declare-fun l_0_13_75 () Real)
(declare-fun l_0_13_74 () Real)
(declare-fun l_0_13_56 () Real)
(declare-fun l_0_13_55 () Real)
(declare-fun l_0_13_54 () Real)
(declare-fun l_0_13_53 () Real)
(declare-fun l_0_13_35 () Real)
(declare-fun l_0_13_34 () Real)
(declare-fun l_0_13_33 () Real)
(declare-fun l_0_13_32 () Real)
(declare-fun l_0_13_175 () Real)
(declare-fun l_0_13_169 () Real)
(declare-fun l_0_13_154 () Real)
(declare-fun l_0_13_148 () Real)
(declare-fun l_0_13_140 () Real)
(declare-fun l_0_13_139 () Real)
(declare-fun l_0_13_138 () Real)
(declare-fun l_0_13_137 () Real)
(declare-fun l_0_13_13 () Real)
(declare-fun l_0_13_12 () Real)
(declare-fun l_0_13_11 () Real)
(declare-fun l_0_13_112 () Real)
(declare-fun l_0_13_106 () Real)
(declare-fun l_0_13_14 () Real)
(declare-fun l_0_13_82 () Real)
(declare-fun l_0_13_81 () Real)
(declare-fun l_0_13_80 () Real)
(declare-fun l_0_13_79 () Real)
(declare-fun l_0_13_61 () Real)
(declare-fun l_0_13_60 () Real)
(declare-fun l_0_13_59 () Real)
(declare-fun l_0_13_58 () Real)
(declare-fun l_0_13_40 () Real)
(declare-fun l_0_13_39 () Real)
(declare-fun l_0_13_38 () Real)
(declare-fun l_0_13_37 () Real)
(declare-fun l_0_13_18 () Real)
(declare-fun l_0_13_17 () Real)
(declare-fun l_0_13_16 () Real)
(declare-fun l_0_13_145 () Real)
(declare-fun l_0_13_144 () Real)
(declare-fun l_0_13_143 () Real)
(declare-fun l_0_13_142 () Real)
(declare-fun l_0_13_19 () Real)
(declare-fun l_0_13_198 () Real)
(declare-fun l_0_13_195 () Real)
(declare-fun l_0_13_194 () Real)
(declare-fun l_0_13_193 () Real)
(declare-fun l_0_13_199 () Real)
(declare-fun l_0_13_92 () Real)
(declare-fun l_0_13_87 () Real)
(declare-fun l_0_13_86 () Real)
(declare-fun l_0_13_203 () Real)
(declare-fun l_0_13_202 () Real)
(declare-fun l_0_13_201 () Real)
(declare-fun l_0_13_200 () Real)
(declare-fun l_0_13_176 () Real)
(declare-fun l_0_13_171 () Real)
(declare-fun l_0_13_170 () Real)
(declare-fun l_0_13_155 () Real)
(declare-fun l_0_13_150 () Real)
(declare-fun l_0_13_149 () Real)
(declare-fun l_0_13_113 () Real)
(declare-fun l_0_13_108 () Real)
(declare-fun l_0_13_107 () Real)
(declare-fun l_0_13_208 () Real)
(declare-fun l_0_13_207 () Real)
(declare-fun l_0_13_206 () Real)
(declare-fun l_0_13_205 () Real)
(declare-fun l_0_13_93 () Real)
(declare-fun l_0_13_90 () Real)
(declare-fun l_0_13_89 () Real)
(declare-fun l_0_13_88 () Real)
(declare-fun l_0_13_177 () Real)
(declare-fun l_0_13_174 () Real)
(declare-fun l_0_13_173 () Real)
(declare-fun l_0_13_172 () Real)
(declare-fun l_0_13_156 () Real)
(declare-fun l_0_13_153 () Real)
(declare-fun l_0_13_152 () Real)
(declare-fun l_0_13_151 () Real)
(declare-fun l_0_13_114 () Real)
(declare-fun l_0_13_111 () Real)
(declare-fun l_0_13_110 () Real)
(declare-fun l_0_13_109 () Real)
(declare-fun l_0_13_94 () Real)
(declare-fun l_0_13_178 () Real)
(declare-fun l_0_13_157 () Real)
(declare-fun l_0_13_115 () Real)
(declare-fun l_0_13_98 () Real)
(declare-fun l_0_13_97 () Real)
(declare-fun l_0_13_96 () Real)
(declare-fun l_0_13_95 () Real)
(declare-fun l_0_13_36 () Real)
(declare-fun l_0_13_182 () Real)
(declare-fun l_0_13_181 () Real)
(declare-fun l_0_13_180 () Real)
(declare-fun l_0_13_179 () Real)
(declare-fun l_0_13_161 () Real)
(declare-fun l_0_13_160 () Real)
(declare-fun l_0_13_159 () Real)
(declare-fun l_0_13_158 () Real)
(declare-fun l_0_13_15 () Real)
(declare-fun l_0_13_119 () Real)
(declare-fun l_0_13_118 () Real)
(declare-fun l_0_13_117 () Real)
(declare-fun l_0_13_116 () Real)
(declare-fun l_0_13_41 () Real)
(declare-fun l_0_13_187 () Real)
(declare-fun l_0_13_186 () Real)
(declare-fun l_0_13_185 () Real)
(declare-fun l_0_13_184 () Real)
(declare-fun l_0_13_166 () Real)
(declare-fun l_0_13_165 () Real)
(declare-fun l_0_13_164 () Real)
(declare-fun l_0_13_163 () Real)
(declare-fun l_0_13_20 () Real)
(declare-fun l_0_13_124 () Real)
(declare-fun l_0_13_123 () Real)
(declare-fun l_0_13_122 () Real)
(declare-fun l_0_13_121 () Real)
(declare-fun l_0_13_103 () Real)
(declare-fun l_0_13_102 () Real)
(declare-fun l_0_13_101 () Real)
(declare-fun l_0_13_100 () Real)
(declare-fun l_0_13_42 () Real)
(declare-fun l_0_13_21 () Real)
(declare-fun l_0_13_78 () Real)
(declare-fun l_0_13_57 () Real)
(declare-fun l_0_13_141 () Real)
(declare-fun l_0_13_83 () Real)
(declare-fun l_0_13_62 () Real)
(declare-fun l_0_13_146 () Real)
(declare-fun l_0_13_84 () Real)
(declare-fun l_0_13_63 () Real)
(declare-fun l_0_13_147 () Real)
(declare-fun l_0_13_204 () Real)
(declare-fun l_0_13_209 () Real)
(declare-fun l_0_13_210 () Real)
(declare-fun l_0_13_99 () Real)
(declare-fun l_0_13_183 () Real)
(declare-fun l_0_13_162 () Real)
(declare-fun l_0_13_120 () Real)
(declare-fun l_0_13_188 () Real)
(declare-fun l_0_13_167 () Real)
(declare-fun l_0_13_125 () Real)
(declare-fun l_0_13_104 () Real)
(declare-fun l_0_13_189 () Real)
(declare-fun l_0_13_168 () Real)
(declare-fun l_0_13_126 () Real)
(declare-fun l_0_13_105 () Real)
(declare-fun l_0_14_66 () Real)
(declare-fun l_0_14_65 () Real)
(declare-fun l_0_14_64 () Real)
(declare-fun l_0_14_45 () Real)
(declare-fun l_0_14_44 () Real)
(declare-fun l_0_14_43 () Real)
(declare-fun l_0_14_3 () Real)
(declare-fun l_0_14_24 () Real)
(declare-fun l_0_14_23 () Real)
(declare-fun l_0_14_22 () Real)
(declare-fun l_0_14_212 () Real)
(declare-fun l_0_14_211 () Real)
(declare-fun l_0_14_2 () Real)
(declare-fun l_0_14_191 () Real)
(declare-fun l_0_14_190 () Real)
(declare-fun l_0_14_129 () Real)
(declare-fun l_0_14_128 () Real)
(declare-fun l_0_14_1 () Real)
(declare-fun l_0_14_213 () Real)
(declare-fun l_0_14_192 () Real)
(declare-fun l_0_14_71 () Real)
(declare-fun l_0_14_70 () Real)
(declare-fun l_0_14_50 () Real)
(declare-fun l_0_14_49 () Real)
(declare-fun l_0_14_8 () Real)
(declare-fun l_0_14_29 () Real)
(declare-fun l_0_14_28 () Real)
(declare-fun l_0_14_218 () Real)
(declare-fun l_0_14_217 () Real)
(declare-fun l_0_14_7 () Real)
(declare-fun l_0_14_197 () Real)
(declare-fun l_0_14_196 () Real)
(declare-fun l_0_14_133 () Real)
(declare-fun l_0_14_127 () Real)
(declare-fun l_0_14_134 () Real)
(declare-fun l_0_14_72 () Real)
(declare-fun l_0_14_69 () Real)
(declare-fun l_0_14_68 () Real)
(declare-fun l_0_14_67 () Real)
(declare-fun l_0_14_9 () Real)
(declare-fun l_0_14_6 () Real)
(declare-fun l_0_14_5 () Real)
(declare-fun l_0_14_51 () Real)
(declare-fun l_0_14_48 () Real)
(declare-fun l_0_14_47 () Real)
(declare-fun l_0_14_46 () Real)
(declare-fun l_0_14_4 () Real)
(declare-fun l_0_14_30 () Real)
(declare-fun l_0_14_27 () Real)
(declare-fun l_0_14_26 () Real)
(declare-fun l_0_14_25 () Real)
(declare-fun l_0_14_135 () Real)
(declare-fun l_0_14_132 () Real)
(declare-fun l_0_14_131 () Real)
(declare-fun l_0_14_130 () Real)
(declare-fun l_0_14_73 () Real)
(declare-fun l_0_14_52 () Real)
(declare-fun l_0_14_31 () Real)
(declare-fun l_0_14_136 () Real)
(declare-fun l_0_14_10 () Real)
(declare-fun l_0_14_91 () Real)
(declare-fun l_0_14_85 () Real)
(declare-fun l_0_14_77 () Real)
(declare-fun l_0_14_76 () Real)
(declare-fun l_0_14_75 () Real)
(declare-fun l_0_14_74 () Real)
(declare-fun l_0_14_56 () Real)
(declare-fun l_0_14_55 () Real)
(declare-fun l_0_14_54 () Real)
(declare-fun l_0_14_53 () Real)
(declare-fun l_0_14_35 () Real)
(declare-fun l_0_14_34 () Real)
(declare-fun l_0_14_33 () Real)
(declare-fun l_0_14_32 () Real)
(declare-fun l_0_14_175 () Real)
(declare-fun l_0_14_169 () Real)
(declare-fun l_0_14_154 () Real)
(declare-fun l_0_14_148 () Real)
(declare-fun l_0_14_140 () Real)
(declare-fun l_0_14_139 () Real)
(declare-fun l_0_14_138 () Real)
(declare-fun l_0_14_137 () Real)
(declare-fun l_0_14_13 () Real)
(declare-fun l_0_14_12 () Real)
(declare-fun l_0_14_11 () Real)
(declare-fun l_0_14_112 () Real)
(declare-fun l_0_14_106 () Real)
(declare-fun l_0_14_14 () Real)
(declare-fun l_0_14_82 () Real)
(declare-fun l_0_14_81 () Real)
(declare-fun l_0_14_80 () Real)
(declare-fun l_0_14_79 () Real)
(declare-fun l_0_14_61 () Real)
(declare-fun l_0_14_60 () Real)
(declare-fun l_0_14_59 () Real)
(declare-fun l_0_14_58 () Real)
(declare-fun l_0_14_40 () Real)
(declare-fun l_0_14_39 () Real)
(declare-fun l_0_14_38 () Real)
(declare-fun l_0_14_37 () Real)
(declare-fun l_0_14_18 () Real)
(declare-fun l_0_14_17 () Real)
(declare-fun l_0_14_16 () Real)
(declare-fun l_0_14_145 () Real)
(declare-fun l_0_14_144 () Real)
(declare-fun l_0_14_143 () Real)
(declare-fun l_0_14_142 () Real)
(declare-fun l_0_14_19 () Real)
(declare-fun l_0_14_219 () Real)
(declare-fun l_0_14_216 () Real)
(declare-fun l_0_14_215 () Real)
(declare-fun l_0_14_214 () Real)
(declare-fun l_0_14_198 () Real)
(declare-fun l_0_14_195 () Real)
(declare-fun l_0_14_194 () Real)
(declare-fun l_0_14_193 () Real)
(declare-fun l_0_14_220 () Real)
(declare-fun l_0_14_199 () Real)
(declare-fun l_0_14_92 () Real)
(declare-fun l_0_14_87 () Real)
(declare-fun l_0_14_86 () Real)
(declare-fun l_0_14_224 () Real)
(declare-fun l_0_14_223 () Real)
(declare-fun l_0_14_222 () Real)
(declare-fun l_0_14_221 () Real)
(declare-fun l_0_14_203 () Real)
(declare-fun l_0_14_202 () Real)
(declare-fun l_0_14_201 () Real)
(declare-fun l_0_14_200 () Real)
(declare-fun l_0_14_176 () Real)
(declare-fun l_0_14_171 () Real)
(declare-fun l_0_14_170 () Real)
(declare-fun l_0_14_155 () Real)
(declare-fun l_0_14_150 () Real)
(declare-fun l_0_14_149 () Real)
(declare-fun l_0_14_113 () Real)
(declare-fun l_0_14_108 () Real)
(declare-fun l_0_14_107 () Real)
(declare-fun l_0_14_229 () Real)
(declare-fun l_0_14_228 () Real)
(declare-fun l_0_14_227 () Real)
(declare-fun l_0_14_226 () Real)
(declare-fun l_0_14_208 () Real)
(declare-fun l_0_14_207 () Real)
(declare-fun l_0_14_206 () Real)
(declare-fun l_0_14_205 () Real)
(declare-fun l_0_14_93 () Real)
(declare-fun l_0_14_90 () Real)
(declare-fun l_0_14_89 () Real)
(declare-fun l_0_14_88 () Real)
(declare-fun l_0_14_177 () Real)
(declare-fun l_0_14_174 () Real)
(declare-fun l_0_14_173 () Real)
(declare-fun l_0_14_172 () Real)
(declare-fun l_0_14_156 () Real)
(declare-fun l_0_14_153 () Real)
(declare-fun l_0_14_152 () Real)
(declare-fun l_0_14_151 () Real)
(declare-fun l_0_14_114 () Real)
(declare-fun l_0_14_111 () Real)
(declare-fun l_0_14_110 () Real)
(declare-fun l_0_14_109 () Real)
(declare-fun l_0_14_94 () Real)
(declare-fun l_0_14_178 () Real)
(declare-fun l_0_14_157 () Real)
(declare-fun l_0_14_115 () Real)
(declare-fun l_0_14_98 () Real)
(declare-fun l_0_14_97 () Real)
(declare-fun l_0_14_96 () Real)
(declare-fun l_0_14_95 () Real)
(declare-fun l_0_14_36 () Real)
(declare-fun l_0_14_182 () Real)
(declare-fun l_0_14_181 () Real)
(declare-fun l_0_14_180 () Real)
(declare-fun l_0_14_179 () Real)
(declare-fun l_0_14_161 () Real)
(declare-fun l_0_14_160 () Real)
(declare-fun l_0_14_159 () Real)
(declare-fun l_0_14_158 () Real)
(declare-fun l_0_14_15 () Real)
(declare-fun l_0_14_119 () Real)
(declare-fun l_0_14_118 () Real)
(declare-fun l_0_14_117 () Real)
(declare-fun l_0_14_116 () Real)
(declare-fun l_0_14_41 () Real)
(declare-fun l_0_14_187 () Real)
(declare-fun l_0_14_186 () Real)
(declare-fun l_0_14_185 () Real)
(declare-fun l_0_14_184 () Real)
(declare-fun l_0_14_166 () Real)
(declare-fun l_0_14_165 () Real)
(declare-fun l_0_14_164 () Real)
(declare-fun l_0_14_163 () Real)
(declare-fun l_0_14_20 () Real)
(declare-fun l_0_14_124 () Real)
(declare-fun l_0_14_123 () Real)
(declare-fun l_0_14_122 () Real)
(declare-fun l_0_14_121 () Real)
(declare-fun l_0_14_103 () Real)
(declare-fun l_0_14_102 () Real)
(declare-fun l_0_14_101 () Real)
(declare-fun l_0_14_100 () Real)
(declare-fun l_0_14_42 () Real)
(declare-fun l_0_14_21 () Real)
(declare-fun l_0_14_78 () Real)
(declare-fun l_0_14_57 () Real)
(declare-fun l_0_14_141 () Real)
(declare-fun l_0_14_83 () Real)
(declare-fun l_0_14_62 () Real)
(declare-fun l_0_14_146 () Real)
(declare-fun l_0_14_84 () Real)
(declare-fun l_0_14_63 () Real)
(declare-fun l_0_14_147 () Real)
(declare-fun l_0_14_225 () Real)
(declare-fun l_0_14_204 () Real)
(declare-fun l_0_14_230 () Real)
(declare-fun l_0_14_209 () Real)
(declare-fun l_0_14_231 () Real)
(declare-fun l_0_14_210 () Real)
(declare-fun l_0_14_99 () Real)
(declare-fun l_0_14_183 () Real)
(declare-fun l_0_14_162 () Real)
(declare-fun l_0_14_120 () Real)
(declare-fun l_0_14_188 () Real)
(declare-fun l_0_14_167 () Real)
(declare-fun l_0_14_125 () Real)
(declare-fun l_0_14_104 () Real)
(declare-fun l_0_14_189 () Real)
(declare-fun l_0_14_168 () Real)
(declare-fun l_0_14_126 () Real)
(declare-fun l_0_14_105 () Real)
(declare-fun l_0_15_66 () Real)
(declare-fun l_0_15_65 () Real)
(declare-fun l_0_15_64 () Real)
(declare-fun l_0_15_45 () Real)
(declare-fun l_0_15_44 () Real)
(declare-fun l_0_15_43 () Real)
(declare-fun l_0_15_232 () Real)
(declare-fun l_0_15_22 () Real)
(declare-fun l_0_15_23 () Real)
(declare-fun l_0_15_211 () Real)
(declare-fun l_0_15_190 () Real)
(declare-fun l_0_15_128 () Real)
(declare-fun l_0_15_127 () Real)
(declare-fun l_0_15_1 () Real)
(declare-fun l_0_15_2 () Real)
(declare-fun l_0_15_3 () Real)
(declare-fun l_0_15_24 () Real)
(declare-fun l_0_15_233 () Real)
(declare-fun l_0_15_212 () Real)
(declare-fun l_0_15_191 () Real)
(declare-fun l_0_15_129 () Real)
(declare-fun l_0_15_234 () Real)
(declare-fun l_0_15_213 () Real)
(declare-fun l_0_15_192 () Real)
(declare-fun l_0_15_72 () Real)
(declare-fun l_0_15_69 () Real)
(declare-fun l_0_15_71 () Real)
(declare-fun l_0_15_68 () Real)
(declare-fun l_0_15_70 () Real)
(declare-fun l_0_15_67 () Real)
(declare-fun l_0_15_9 () Real)
(declare-fun l_0_15_6 () Real)
(declare-fun l_0_15_8 () Real)
(declare-fun l_0_15_5 () Real)
(declare-fun l_0_15_51 () Real)
(declare-fun l_0_15_48 () Real)
(declare-fun l_0_15_50 () Real)
(declare-fun l_0_15_47 () Real)
(declare-fun l_0_15_49 () Real)
(declare-fun l_0_15_46 () Real)
(declare-fun l_0_15_7 () Real)
(declare-fun l_0_15_4 () Real)
(declare-fun l_0_15_30 () Real)
(declare-fun l_0_15_27 () Real)
(declare-fun l_0_15_29 () Real)
(declare-fun l_0_15_26 () Real)
(declare-fun l_0_15_28 () Real)
(declare-fun l_0_15_25 () Real)
(declare-fun l_0_15_240 () Real)
(declare-fun l_0_15_237 () Real)
(declare-fun l_0_15_239 () Real)
(declare-fun l_0_15_236 () Real)
(declare-fun l_0_15_238 () Real)
(declare-fun l_0_15_235 () Real)
(declare-fun l_0_15_219 () Real)
(declare-fun l_0_15_216 () Real)
(declare-fun l_0_15_218 () Real)
(declare-fun l_0_15_215 () Real)
(declare-fun l_0_15_217 () Real)
(declare-fun l_0_15_214 () Real)
(declare-fun l_0_15_198 () Real)
(declare-fun l_0_15_195 () Real)
(declare-fun l_0_15_197 () Real)
(declare-fun l_0_15_194 () Real)
(declare-fun l_0_15_196 () Real)
(declare-fun l_0_15_193 () Real)
(declare-fun l_0_15_73 () Real)
(declare-fun l_0_15_52 () Real)
(declare-fun l_0_15_31 () Real)
(declare-fun l_0_15_241 () Real)
(declare-fun l_0_15_220 () Real)
(declare-fun l_0_15_199 () Real)
(declare-fun l_0_15_10 () Real)
(declare-fun l_0_15_133 () Real)
(declare-fun l_0_15_134 () Real)
(declare-fun l_0_15_135 () Real)
(declare-fun l_0_15_132 () Real)
(declare-fun l_0_15_131 () Real)
(declare-fun l_0_15_130 () Real)
(declare-fun l_0_15_136 () Real)
(declare-fun l_0_15_91 () Real)
(declare-fun l_0_15_85 () Real)
(declare-fun l_0_15_77 () Real)
(declare-fun l_0_15_76 () Real)
(declare-fun l_0_15_75 () Real)
(declare-fun l_0_15_74 () Real)
(declare-fun l_0_15_56 () Real)
(declare-fun l_0_15_55 () Real)
(declare-fun l_0_15_54 () Real)
(declare-fun l_0_15_53 () Real)
(declare-fun l_0_15_35 () Real)
(declare-fun l_0_15_34 () Real)
(declare-fun l_0_15_33 () Real)
(declare-fun l_0_15_32 () Real)
(declare-fun l_0_15_175 () Real)
(declare-fun l_0_15_169 () Real)
(declare-fun l_0_15_154 () Real)
(declare-fun l_0_15_148 () Real)
(declare-fun l_0_15_140 () Real)
(declare-fun l_0_15_139 () Real)
(declare-fun l_0_15_138 () Real)
(declare-fun l_0_15_137 () Real)
(declare-fun l_0_15_13 () Real)
(declare-fun l_0_15_12 () Real)
(declare-fun l_0_15_11 () Real)
(declare-fun l_0_15_112 () Real)
(declare-fun l_0_15_106 () Real)
(declare-fun l_0_15_14 () Real)
(declare-fun l_0_15_82 () Real)
(declare-fun l_0_15_81 () Real)
(declare-fun l_0_15_80 () Real)
(declare-fun l_0_15_79 () Real)
(declare-fun l_0_15_61 () Real)
(declare-fun l_0_15_60 () Real)
(declare-fun l_0_15_59 () Real)
(declare-fun l_0_15_58 () Real)
(declare-fun l_0_15_40 () Real)
(declare-fun l_0_15_39 () Real)
(declare-fun l_0_15_38 () Real)
(declare-fun l_0_15_37 () Real)
(declare-fun l_0_15_18 () Real)
(declare-fun l_0_15_17 () Real)
(declare-fun l_0_15_16 () Real)
(declare-fun l_0_15_145 () Real)
(declare-fun l_0_15_144 () Real)
(declare-fun l_0_15_143 () Real)
(declare-fun l_0_15_142 () Real)
(declare-fun l_0_15_19 () Real)
(declare-fun l_0_15_92 () Real)
(declare-fun l_0_15_87 () Real)
(declare-fun l_0_15_86 () Real)
(declare-fun l_0_15_245 () Real)
(declare-fun l_0_15_244 () Real)
(declare-fun l_0_15_243 () Real)
(declare-fun l_0_15_242 () Real)
(declare-fun l_0_15_224 () Real)
(declare-fun l_0_15_223 () Real)
(declare-fun l_0_15_222 () Real)
(declare-fun l_0_15_221 () Real)
(declare-fun l_0_15_203 () Real)
(declare-fun l_0_15_202 () Real)
(declare-fun l_0_15_201 () Real)
(declare-fun l_0_15_200 () Real)
(declare-fun l_0_15_176 () Real)
(declare-fun l_0_15_171 () Real)
(declare-fun l_0_15_170 () Real)
(declare-fun l_0_15_155 () Real)
(declare-fun l_0_15_150 () Real)
(declare-fun l_0_15_149 () Real)
(declare-fun l_0_15_113 () Real)
(declare-fun l_0_15_108 () Real)
(declare-fun l_0_15_107 () Real)
(declare-fun l_0_15_250 () Real)
(declare-fun l_0_15_249 () Real)
(declare-fun l_0_15_248 () Real)
(declare-fun l_0_15_247 () Real)
(declare-fun l_0_15_229 () Real)
(declare-fun l_0_15_228 () Real)
(declare-fun l_0_15_227 () Real)
(declare-fun l_0_15_226 () Real)
(declare-fun l_0_15_208 () Real)
(declare-fun l_0_15_207 () Real)
(declare-fun l_0_15_206 () Real)
(declare-fun l_0_15_205 () Real)
(declare-fun l_0_15_93 () Real)
(declare-fun l_0_15_90 () Real)
(declare-fun l_0_15_89 () Real)
(declare-fun l_0_15_88 () Real)
(declare-fun l_0_15_177 () Real)
(declare-fun l_0_15_174 () Real)
(declare-fun l_0_15_173 () Real)
(declare-fun l_0_15_172 () Real)
(declare-fun l_0_15_156 () Real)
(declare-fun l_0_15_153 () Real)
(declare-fun l_0_15_152 () Real)
(declare-fun l_0_15_151 () Real)
(declare-fun l_0_15_114 () Real)
(declare-fun l_0_15_111 () Real)
(declare-fun l_0_15_110 () Real)
(declare-fun l_0_15_109 () Real)
(declare-fun l_0_15_94 () Real)
(declare-fun l_0_15_178 () Real)
(declare-fun l_0_15_157 () Real)
(declare-fun l_0_15_115 () Real)
(declare-fun l_0_15_98 () Real)
(declare-fun l_0_15_97 () Real)
(declare-fun l_0_15_96 () Real)
(declare-fun l_0_15_95 () Real)
(declare-fun l_0_15_36 () Real)
(declare-fun l_0_15_182 () Real)
(declare-fun l_0_15_181 () Real)
(declare-fun l_0_15_180 () Real)
(declare-fun l_0_15_179 () Real)
(declare-fun l_0_15_161 () Real)
(declare-fun l_0_15_160 () Real)
(declare-fun l_0_15_159 () Real)
(declare-fun l_0_15_158 () Real)
(declare-fun l_0_15_15 () Real)
(declare-fun l_0_15_119 () Real)
(declare-fun l_0_15_118 () Real)
(declare-fun l_0_15_117 () Real)
(declare-fun l_0_15_116 () Real)
(declare-fun l_0_15_41 () Real)
(declare-fun l_0_15_187 () Real)
(declare-fun l_0_15_186 () Real)
(declare-fun l_0_15_185 () Real)
(declare-fun l_0_15_184 () Real)
(declare-fun l_0_15_166 () Real)
(declare-fun l_0_15_165 () Real)
(declare-fun l_0_15_164 () Real)
(declare-fun l_0_15_163 () Real)
(declare-fun l_0_15_20 () Real)
(declare-fun l_0_15_124 () Real)
(declare-fun l_0_15_123 () Real)
(declare-fun l_0_15_122 () Real)
(declare-fun l_0_15_121 () Real)
(declare-fun l_0_15_103 () Real)
(declare-fun l_0_15_102 () Real)
(declare-fun l_0_15_101 () Real)
(declare-fun l_0_15_100 () Real)
(declare-fun l_0_15_42 () Real)
(declare-fun l_0_15_21 () Real)
(declare-fun l_0_15_78 () Real)
(declare-fun l_0_15_57 () Real)
(declare-fun l_0_15_141 () Real)
(declare-fun l_0_15_83 () Real)
(declare-fun l_0_15_62 () Real)
(declare-fun l_0_15_146 () Real)
(declare-fun l_0_15_84 () Real)
(declare-fun l_0_15_63 () Real)
(declare-fun l_0_15_147 () Real)
(declare-fun l_0_15_246 () Real)
(declare-fun l_0_15_225 () Real)
(declare-fun l_0_15_204 () Real)
(declare-fun l_0_15_251 () Real)
(declare-fun l_0_15_230 () Real)
(declare-fun l_0_15_209 () Real)
(declare-fun l_0_15_252 () Real)
(declare-fun l_0_15_231 () Real)
(declare-fun l_0_15_210 () Real)
(declare-fun l_0_15_99 () Real)
(declare-fun l_0_15_183 () Real)
(declare-fun l_0_15_162 () Real)
(declare-fun l_0_15_120 () Real)
(declare-fun l_0_15_188 () Real)
(declare-fun l_0_15_167 () Real)
(declare-fun l_0_15_125 () Real)
(declare-fun l_0_15_104 () Real)
(declare-fun l_0_15_189 () Real)
(declare-fun l_0_15_168 () Real)
(declare-fun l_0_15_126 () Real)
(declare-fun l_0_15_105 () Real)
(declare-fun l_0_16_66 () Real)
(declare-fun l_0_16_65 () Real)
(declare-fun l_0_16_45 () Real)
(declare-fun l_0_16_44 () Real)
(declare-fun l_0_16_3 () Real)
(declare-fun l_0_16_255 () Real)
(declare-fun l_0_16_254 () Real)
(declare-fun l_0_16_24 () Real)
(declare-fun l_0_16_234 () Real)
(declare-fun l_0_16_233 () Real)
(declare-fun l_0_16_23 () Real)
(declare-fun l_0_16_213 () Real)
(declare-fun l_0_16_212 () Real)
(declare-fun l_0_16_2 () Real)
(declare-fun l_0_16_192 () Real)
(declare-fun l_0_16_191 () Real)
(declare-fun l_0_16_72 () Real)
(declare-fun l_0_16_69 () Real)
(declare-fun l_0_16_71 () Real)
(declare-fun l_0_16_68 () Real)
(declare-fun l_0_16_70 () Real)
(declare-fun l_0_16_67 () Real)
(declare-fun l_0_16_9 () Real)
(declare-fun l_0_16_6 () Real)
(declare-fun l_0_16_8 () Real)
(declare-fun l_0_16_5 () Real)
(declare-fun l_0_16_51 () Real)
(declare-fun l_0_16_48 () Real)
(declare-fun l_0_16_50 () Real)
(declare-fun l_0_16_47 () Real)
(declare-fun l_0_16_49 () Real)
(declare-fun l_0_16_46 () Real)
(declare-fun l_0_16_7 () Real)
(declare-fun l_0_16_4 () Real)
(declare-fun l_0_16_30 () Real)
(declare-fun l_0_16_27 () Real)
(declare-fun l_0_16_29 () Real)
(declare-fun l_0_16_26 () Real)
(declare-fun l_0_16_261 () Real)
(declare-fun l_0_16_258 () Real)
(declare-fun l_0_16_260 () Real)
(declare-fun l_0_16_257 () Real)
(declare-fun l_0_16_259 () Real)
(declare-fun l_0_16_256 () Real)
(declare-fun l_0_16_28 () Real)
(declare-fun l_0_16_25 () Real)
(declare-fun l_0_16_240 () Real)
(declare-fun l_0_16_237 () Real)
(declare-fun l_0_16_239 () Real)
(declare-fun l_0_16_236 () Real)
(declare-fun l_0_16_238 () Real)
(declare-fun l_0_16_235 () Real)
(declare-fun l_0_16_219 () Real)
(declare-fun l_0_16_216 () Real)
(declare-fun l_0_16_218 () Real)
(declare-fun l_0_16_215 () Real)
(declare-fun l_0_16_217 () Real)
(declare-fun l_0_16_214 () Real)
(declare-fun l_0_16_198 () Real)
(declare-fun l_0_16_195 () Real)
(declare-fun l_0_16_197 () Real)
(declare-fun l_0_16_194 () Real)
(declare-fun l_0_16_196 () Real)
(declare-fun l_0_16_193 () Real)
(declare-fun l_0_16_73 () Real)
(declare-fun l_0_16_52 () Real)
(declare-fun l_0_16_31 () Real)
(declare-fun l_0_16_262 () Real)
(declare-fun l_0_16_241 () Real)
(declare-fun l_0_16_220 () Real)
(declare-fun l_0_16_199 () Real)
(declare-fun l_0_16_10 () Real)
(declare-fun l_0_16_64 () Real)
(declare-fun l_0_16_43 () Real)
(declare-fun l_0_16_253 () Real)
(declare-fun l_0_16_232 () Real)
(declare-fun l_0_16_22 () Real)
(declare-fun l_0_16_211 () Real)
(declare-fun l_0_16_190 () Real)
(declare-fun l_0_16_128 () Real)
(declare-fun l_0_16_127 () Real)
(declare-fun l_0_16_1 () Real)
(declare-fun l_0_16_129 () Real)
(declare-fun l_0_16_133 () Real)
(declare-fun l_0_16_134 () Real)
(declare-fun l_0_16_135 () Real)
(declare-fun l_0_16_132 () Real)
(declare-fun l_0_16_131 () Real)
(declare-fun l_0_16_130 () Real)
(declare-fun l_0_16_136 () Real)
(declare-fun l_0_16_91 () Real)
(declare-fun l_0_16_85 () Real)
(declare-fun l_0_16_77 () Real)
(declare-fun l_0_16_76 () Real)
(declare-fun l_0_16_75 () Real)
(declare-fun l_0_16_74 () Real)
(declare-fun l_0_16_56 () Real)
(declare-fun l_0_16_55 () Real)
(declare-fun l_0_16_54 () Real)
(declare-fun l_0_16_53 () Real)
(declare-fun l_0_16_35 () Real)
(declare-fun l_0_16_34 () Real)
(declare-fun l_0_16_33 () Real)
(declare-fun l_0_16_32 () Real)
(declare-fun l_0_16_175 () Real)
(declare-fun l_0_16_169 () Real)
(declare-fun l_0_16_154 () Real)
(declare-fun l_0_16_148 () Real)
(declare-fun l_0_16_140 () Real)
(declare-fun l_0_16_139 () Real)
(declare-fun l_0_16_138 () Real)
(declare-fun l_0_16_137 () Real)
(declare-fun l_0_16_13 () Real)
(declare-fun l_0_16_12 () Real)
(declare-fun l_0_16_11 () Real)
(declare-fun l_0_16_112 () Real)
(declare-fun l_0_16_106 () Real)
(declare-fun l_0_16_14 () Real)
(declare-fun l_0_16_82 () Real)
(declare-fun l_0_16_81 () Real)
(declare-fun l_0_16_80 () Real)
(declare-fun l_0_16_79 () Real)
(declare-fun l_0_16_61 () Real)
(declare-fun l_0_16_60 () Real)
(declare-fun l_0_16_59 () Real)
(declare-fun l_0_16_58 () Real)
(declare-fun l_0_16_40 () Real)
(declare-fun l_0_16_39 () Real)
(declare-fun l_0_16_38 () Real)
(declare-fun l_0_16_37 () Real)
(declare-fun l_0_16_18 () Real)
(declare-fun l_0_16_17 () Real)
(declare-fun l_0_16_16 () Real)
(declare-fun l_0_16_145 () Real)
(declare-fun l_0_16_144 () Real)
(declare-fun l_0_16_143 () Real)
(declare-fun l_0_16_142 () Real)
(declare-fun l_0_16_19 () Real)
(declare-fun l_0_16_92 () Real)
(declare-fun l_0_16_87 () Real)
(declare-fun l_0_16_86 () Real)
(declare-fun l_0_16_266 () Real)
(declare-fun l_0_16_265 () Real)
(declare-fun l_0_16_264 () Real)
(declare-fun l_0_16_263 () Real)
(declare-fun l_0_16_245 () Real)
(declare-fun l_0_16_244 () Real)
(declare-fun l_0_16_243 () Real)
(declare-fun l_0_16_242 () Real)
(declare-fun l_0_16_224 () Real)
(declare-fun l_0_16_223 () Real)
(declare-fun l_0_16_222 () Real)
(declare-fun l_0_16_221 () Real)
(declare-fun l_0_16_203 () Real)
(declare-fun l_0_16_202 () Real)
(declare-fun l_0_16_201 () Real)
(declare-fun l_0_16_200 () Real)
(declare-fun l_0_16_176 () Real)
(declare-fun l_0_16_171 () Real)
(declare-fun l_0_16_170 () Real)
(declare-fun l_0_16_155 () Real)
(declare-fun l_0_16_150 () Real)
(declare-fun l_0_16_149 () Real)
(declare-fun l_0_16_113 () Real)
(declare-fun l_0_16_108 () Real)
(declare-fun l_0_16_107 () Real)
(declare-fun l_0_16_271 () Real)
(declare-fun l_0_16_270 () Real)
(declare-fun l_0_16_269 () Real)
(declare-fun l_0_16_268 () Real)
(declare-fun l_0_16_250 () Real)
(declare-fun l_0_16_249 () Real)
(declare-fun l_0_16_248 () Real)
(declare-fun l_0_16_247 () Real)
(declare-fun l_0_16_229 () Real)
(declare-fun l_0_16_228 () Real)
(declare-fun l_0_16_227 () Real)
(declare-fun l_0_16_226 () Real)
(declare-fun l_0_16_208 () Real)
(declare-fun l_0_16_207 () Real)
(declare-fun l_0_16_206 () Real)
(declare-fun l_0_16_205 () Real)
(declare-fun l_0_16_93 () Real)
(declare-fun l_0_16_90 () Real)
(declare-fun l_0_16_89 () Real)
(declare-fun l_0_16_88 () Real)
(declare-fun l_0_16_177 () Real)
(declare-fun l_0_16_174 () Real)
(declare-fun l_0_16_173 () Real)
(declare-fun l_0_16_172 () Real)
(declare-fun l_0_16_156 () Real)
(declare-fun l_0_16_153 () Real)
(declare-fun l_0_16_152 () Real)
(declare-fun l_0_16_151 () Real)
(declare-fun l_0_16_114 () Real)
(declare-fun l_0_16_111 () Real)
(declare-fun l_0_16_110 () Real)
(declare-fun l_0_16_109 () Real)
(declare-fun l_0_16_94 () Real)
(declare-fun l_0_16_178 () Real)
(declare-fun l_0_16_157 () Real)
(declare-fun l_0_16_115 () Real)
(declare-fun l_0_16_98 () Real)
(declare-fun l_0_16_97 () Real)
(declare-fun l_0_16_96 () Real)
(declare-fun l_0_16_95 () Real)
(declare-fun l_0_16_36 () Real)
(declare-fun l_0_16_182 () Real)
(declare-fun l_0_16_181 () Real)
(declare-fun l_0_16_180 () Real)
(declare-fun l_0_16_179 () Real)
(declare-fun l_0_16_161 () Real)
(declare-fun l_0_16_160 () Real)
(declare-fun l_0_16_159 () Real)
(declare-fun l_0_16_158 () Real)
(declare-fun l_0_16_15 () Real)
(declare-fun l_0_16_119 () Real)
(declare-fun l_0_16_118 () Real)
(declare-fun l_0_16_117 () Real)
(declare-fun l_0_16_116 () Real)
(declare-fun l_0_16_41 () Real)
(declare-fun l_0_16_187 () Real)
(declare-fun l_0_16_186 () Real)
(declare-fun l_0_16_185 () Real)
(declare-fun l_0_16_184 () Real)
(declare-fun l_0_16_166 () Real)
(declare-fun l_0_16_165 () Real)
(declare-fun l_0_16_164 () Real)
(declare-fun l_0_16_163 () Real)
(declare-fun l_0_16_20 () Real)
(declare-fun l_0_16_124 () Real)
(declare-fun l_0_16_123 () Real)
(declare-fun l_0_16_122 () Real)
(declare-fun l_0_16_121 () Real)
(declare-fun l_0_16_103 () Real)
(declare-fun l_0_16_102 () Real)
(declare-fun l_0_16_101 () Real)
(declare-fun l_0_16_100 () Real)
(declare-fun l_0_16_42 () Real)
(declare-fun l_0_16_21 () Real)
(declare-fun l_0_16_78 () Real)
(declare-fun l_0_16_57 () Real)
(declare-fun l_0_16_141 () Real)
(declare-fun l_0_16_83 () Real)
(declare-fun l_0_16_62 () Real)
(declare-fun l_0_16_146 () Real)
(declare-fun l_0_16_84 () Real)
(declare-fun l_0_16_63 () Real)
(declare-fun l_0_16_147 () Real)
(declare-fun l_0_16_267 () Real)
(declare-fun l_0_16_246 () Real)
(declare-fun l_0_16_225 () Real)
(declare-fun l_0_16_204 () Real)
(declare-fun l_0_16_272 () Real)
(declare-fun l_0_16_251 () Real)
(declare-fun l_0_16_230 () Real)
(declare-fun l_0_16_209 () Real)
(declare-fun l_0_16_273 () Real)
(declare-fun l_0_16_252 () Real)
(declare-fun l_0_16_231 () Real)
(declare-fun l_0_16_210 () Real)
(declare-fun l_0_16_99 () Real)
(declare-fun l_0_16_183 () Real)
(declare-fun l_0_16_162 () Real)
(declare-fun l_0_16_120 () Real)
(declare-fun l_0_16_188 () Real)
(declare-fun l_0_16_167 () Real)
(declare-fun l_0_16_125 () Real)
(declare-fun l_0_16_104 () Real)
(declare-fun l_0_16_189 () Real)
(declare-fun l_0_16_168 () Real)
(declare-fun l_0_16_126 () Real)
(declare-fun l_0_16_105 () Real)
(declare-fun l_0_17_96 () Real)
(declare-fun l_0_17_87 () Real)
(declare-fun l_0_17_95 () Real)
(declare-fun l_0_17_86 () Real)
(declare-fun l_0_17_78 () Real)
(declare-fun l_0_17_77 () Real)
(declare-fun l_0_17_76 () Real)
(declare-fun l_0_17_75 () Real)
(declare-fun l_0_17_74 () Real)
(declare-fun l_0_17_57 () Real)
(declare-fun l_0_17_56 () Real)
(declare-fun l_0_17_55 () Real)
(declare-fun l_0_17_54 () Real)
(declare-fun l_0_17_53 () Real)
(declare-fun l_0_17_36 () Real)
(declare-fun l_0_17_35 () Real)
(declare-fun l_0_17_34 () Real)
(declare-fun l_0_17_33 () Real)
(declare-fun l_0_17_32 () Real)
(declare-fun l_0_17_288 () Real)
(declare-fun l_0_17_287 () Real)
(declare-fun l_0_17_286 () Real)
(declare-fun l_0_17_285 () Real)
(declare-fun l_0_17_284 () Real)
(declare-fun l_0_17_267 () Real)
(declare-fun l_0_17_266 () Real)
(declare-fun l_0_17_265 () Real)
(declare-fun l_0_17_264 () Real)
(declare-fun l_0_17_263 () Real)
(declare-fun l_0_17_246 () Real)
(declare-fun l_0_17_245 () Real)
(declare-fun l_0_17_244 () Real)
(declare-fun l_0_17_243 () Real)
(declare-fun l_0_17_242 () Real)
(declare-fun l_0_17_225 () Real)
(declare-fun l_0_17_224 () Real)
(declare-fun l_0_17_223 () Real)
(declare-fun l_0_17_222 () Real)
(declare-fun l_0_17_221 () Real)
(declare-fun l_0_17_204 () Real)
(declare-fun l_0_17_203 () Real)
(declare-fun l_0_17_202 () Real)
(declare-fun l_0_17_201 () Real)
(declare-fun l_0_17_200 () Real)
(declare-fun l_0_17_180 () Real)
(declare-fun l_0_17_171 () Real)
(declare-fun l_0_17_179 () Real)
(declare-fun l_0_17_170 () Real)
(declare-fun l_0_17_159 () Real)
(declare-fun l_0_17_150 () Real)
(declare-fun l_0_17_15 () Real)
(declare-fun l_0_17_158 () Real)
(declare-fun l_0_17_149 () Real)
(declare-fun l_0_17_14 () Real)
(declare-fun l_0_17_13 () Real)
(declare-fun l_0_17_12 () Real)
(declare-fun l_0_17_11 () Real)
(declare-fun l_0_17_117 () Real)
(declare-fun l_0_17_108 () Real)
(declare-fun l_0_17_116 () Real)
(declare-fun l_0_17_107 () Real)
(declare-fun l_0_17_66 () Real)
(declare-fun l_0_17_65 () Real)
(declare-fun l_0_17_45 () Real)
(declare-fun l_0_17_44 () Real)
(declare-fun l_0_17_3 () Real)
(declare-fun l_0_17_276 () Real)
(declare-fun l_0_17_275 () Real)
(declare-fun l_0_17_255 () Real)
(declare-fun l_0_17_254 () Real)
(declare-fun l_0_17_24 () Real)
(declare-fun l_0_17_234 () Real)
(declare-fun l_0_17_233 () Real)
(declare-fun l_0_17_23 () Real)
(declare-fun l_0_17_213 () Real)
(declare-fun l_0_17_212 () Real)
(declare-fun l_0_17_2 () Real)
(declare-fun l_0_17_192 () Real)
(declare-fun l_0_17_191 () Real)
(declare-fun l_0_17_69 () Real)
(declare-fun l_0_17_68 () Real)
(declare-fun l_0_17_67 () Real)
(declare-fun l_0_17_6 () Real)
(declare-fun l_0_17_5 () Real)
(declare-fun l_0_17_48 () Real)
(declare-fun l_0_17_47 () Real)
(declare-fun l_0_17_46 () Real)
(declare-fun l_0_17_4 () Real)
(declare-fun l_0_17_279 () Real)
(declare-fun l_0_17_278 () Real)
(declare-fun l_0_17_277 () Real)
(declare-fun l_0_17_27 () Real)
(declare-fun l_0_17_26 () Real)
(declare-fun l_0_17_258 () Real)
(declare-fun l_0_17_257 () Real)
(declare-fun l_0_17_256 () Real)
(declare-fun l_0_17_25 () Real)
(declare-fun l_0_17_237 () Real)
(declare-fun l_0_17_236 () Real)
(declare-fun l_0_17_235 () Real)
(declare-fun l_0_17_216 () Real)
(declare-fun l_0_17_215 () Real)
(declare-fun l_0_17_214 () Real)
(declare-fun l_0_17_195 () Real)
(declare-fun l_0_17_194 () Real)
(declare-fun l_0_17_193 () Real)
(declare-fun l_0_17_89 () Real)
(declare-fun l_0_17_88 () Real)
(declare-fun l_0_17_173 () Real)
(declare-fun l_0_17_172 () Real)
(declare-fun l_0_17_152 () Real)
(declare-fun l_0_17_151 () Real)
(declare-fun l_0_17_110 () Real)
(declare-fun l_0_17_109 () Real)
(declare-fun l_0_17_64 () Real)
(declare-fun l_0_17_43 () Real)
(declare-fun l_0_17_22 () Real)
(declare-fun l_0_17_127 () Real)
(declare-fun l_0_17_1 () Real)
(declare-fun l_0_17_274 () Real)
(declare-fun l_0_17_253 () Real)
(declare-fun l_0_17_232 () Real)
(declare-fun l_0_17_211 () Real)
(declare-fun l_0_17_190 () Real)
(declare-fun l_0_17_128 () Real)
(declare-fun l_0_17_129 () Real)
(declare-fun l_0_17_71 () Real)
(declare-fun l_0_17_70 () Real)
(declare-fun l_0_17_50 () Real)
(declare-fun l_0_17_49 () Real)
(declare-fun l_0_17_28 () Real)
(declare-fun l_0_17_133 () Real)
(declare-fun l_0_17_7 () Real)
(declare-fun l_0_17_8 () Real)
(declare-fun l_0_17_280 () Real)
(declare-fun l_0_17_259 () Real)
(declare-fun l_0_17_29 () Real)
(declare-fun l_0_17_238 () Real)
(declare-fun l_0_17_217 () Real)
(declare-fun l_0_17_196 () Real)
(declare-fun l_0_17_134 () Real)
(declare-fun l_0_17_72 () Real)
(declare-fun l_0_17_9 () Real)
(declare-fun l_0_17_51 () Real)
(declare-fun l_0_17_30 () Real)
(declare-fun l_0_17_135 () Real)
(declare-fun l_0_17_132 () Real)
(declare-fun l_0_17_131 () Real)
(declare-fun l_0_17_130 () Real)
(declare-fun l_0_17_73 () Real)
(declare-fun l_0_17_52 () Real)
(declare-fun l_0_17_31 () Real)
(declare-fun l_0_17_136 () Real)
(declare-fun l_0_17_10 () Real)
(declare-fun l_0_17_91 () Real)
(declare-fun l_0_17_85 () Real)
(declare-fun l_0_17_175 () Real)
(declare-fun l_0_17_169 () Real)
(declare-fun l_0_17_154 () Real)
(declare-fun l_0_17_148 () Real)
(declare-fun l_0_17_140 () Real)
(declare-fun l_0_17_139 () Real)
(declare-fun l_0_17_138 () Real)
(declare-fun l_0_17_137 () Real)
(declare-fun l_0_17_112 () Real)
(declare-fun l_0_17_106 () Real)
(declare-fun l_0_17_82 () Real)
(declare-fun l_0_17_81 () Real)
(declare-fun l_0_17_80 () Real)
(declare-fun l_0_17_79 () Real)
(declare-fun l_0_17_61 () Real)
(declare-fun l_0_17_60 () Real)
(declare-fun l_0_17_59 () Real)
(declare-fun l_0_17_58 () Real)
(declare-fun l_0_17_40 () Real)
(declare-fun l_0_17_39 () Real)
(declare-fun l_0_17_38 () Real)
(declare-fun l_0_17_37 () Real)
(declare-fun l_0_17_18 () Real)
(declare-fun l_0_17_17 () Real)
(declare-fun l_0_17_16 () Real)
(declare-fun l_0_17_145 () Real)
(declare-fun l_0_17_144 () Real)
(declare-fun l_0_17_143 () Real)
(declare-fun l_0_17_142 () Real)
(declare-fun l_0_17_19 () Real)
(declare-fun l_0_17_281 () Real)
(declare-fun l_0_17_260 () Real)
(declare-fun l_0_17_239 () Real)
(declare-fun l_0_17_218 () Real)
(declare-fun l_0_17_197 () Real)
(declare-fun l_0_17_282 () Real)
(declare-fun l_0_17_261 () Real)
(declare-fun l_0_17_240 () Real)
(declare-fun l_0_17_219 () Real)
(declare-fun l_0_17_198 () Real)
(declare-fun l_0_17_283 () Real)
(declare-fun l_0_17_262 () Real)
(declare-fun l_0_17_241 () Real)
(declare-fun l_0_17_220 () Real)
(declare-fun l_0_17_199 () Real)
(declare-fun l_0_17_92 () Real)
(declare-fun l_0_17_176 () Real)
(declare-fun l_0_17_155 () Real)
(declare-fun l_0_17_113 () Real)
(declare-fun l_0_17_292 () Real)
(declare-fun l_0_17_291 () Real)
(declare-fun l_0_17_290 () Real)
(declare-fun l_0_17_289 () Real)
(declare-fun l_0_17_271 () Real)
(declare-fun l_0_17_270 () Real)
(declare-fun l_0_17_269 () Real)
(declare-fun l_0_17_268 () Real)
(declare-fun l_0_17_250 () Real)
(declare-fun l_0_17_249 () Real)
(declare-fun l_0_17_248 () Real)
(declare-fun l_0_17_247 () Real)
(declare-fun l_0_17_229 () Real)
(declare-fun l_0_17_228 () Real)
(declare-fun l_0_17_227 () Real)
(declare-fun l_0_17_226 () Real)
(declare-fun l_0_17_208 () Real)
(declare-fun l_0_17_207 () Real)
(declare-fun l_0_17_206 () Real)
(declare-fun l_0_17_205 () Real)
(declare-fun l_0_17_93 () Real)
(declare-fun l_0_17_90 () Real)
(declare-fun l_0_17_177 () Real)
(declare-fun l_0_17_174 () Real)
(declare-fun l_0_17_156 () Real)
(declare-fun l_0_17_153 () Real)
(declare-fun l_0_17_114 () Real)
(declare-fun l_0_17_111 () Real)
(declare-fun l_0_17_94 () Real)
(declare-fun l_0_17_178 () Real)
(declare-fun l_0_17_157 () Real)
(declare-fun l_0_17_115 () Real)
(declare-fun l_0_17_98 () Real)
(declare-fun l_0_17_97 () Real)
(declare-fun l_0_17_182 () Real)
(declare-fun l_0_17_181 () Real)
(declare-fun l_0_17_161 () Real)
(declare-fun l_0_17_160 () Real)
(declare-fun l_0_17_119 () Real)
(declare-fun l_0_17_118 () Real)
(declare-fun l_0_17_41 () Real)
(declare-fun l_0_17_187 () Real)
(declare-fun l_0_17_186 () Real)
(declare-fun l_0_17_185 () Real)
(declare-fun l_0_17_184 () Real)
(declare-fun l_0_17_166 () Real)
(declare-fun l_0_17_165 () Real)
(declare-fun l_0_17_164 () Real)
(declare-fun l_0_17_163 () Real)
(declare-fun l_0_17_20 () Real)
(declare-fun l_0_17_124 () Real)
(declare-fun l_0_17_123 () Real)
(declare-fun l_0_17_122 () Real)
(declare-fun l_0_17_121 () Real)
(declare-fun l_0_17_103 () Real)
(declare-fun l_0_17_102 () Real)
(declare-fun l_0_17_101 () Real)
(declare-fun l_0_17_100 () Real)
(declare-fun l_0_17_42 () Real)
(declare-fun l_0_17_21 () Real)
(declare-fun l_0_17_141 () Real)
(declare-fun l_0_17_83 () Real)
(declare-fun l_0_17_62 () Real)
(declare-fun l_0_17_146 () Real)
(declare-fun l_0_17_84 () Real)
(declare-fun l_0_17_63 () Real)
(declare-fun l_0_17_147 () Real)
(declare-fun l_0_17_293 () Real)
(declare-fun l_0_17_272 () Real)
(declare-fun l_0_17_251 () Real)
(declare-fun l_0_17_230 () Real)
(declare-fun l_0_17_209 () Real)
(declare-fun l_0_17_294 () Real)
(declare-fun l_0_17_273 () Real)
(declare-fun l_0_17_252 () Real)
(declare-fun l_0_17_231 () Real)
(declare-fun l_0_17_210 () Real)
(declare-fun l_0_17_99 () Real)
(declare-fun l_0_17_183 () Real)
(declare-fun l_0_17_162 () Real)
(declare-fun l_0_17_120 () Real)
(declare-fun l_0_17_188 () Real)
(declare-fun l_0_17_167 () Real)
(declare-fun l_0_17_125 () Real)
(declare-fun l_0_17_104 () Real)
(declare-fun l_0_17_189 () Real)
(declare-fun l_0_17_168 () Real)
(declare-fun l_0_17_126 () Real)
(declare-fun l_0_17_105 () Real)
(declare-fun l_0_18_87 () Real)
(declare-fun l_0_18_86 () Real)
(declare-fun l_0_18_64 () Real)
(declare-fun l_0_18_65 () Real)
(declare-fun l_0_18_43 () Real)
(declare-fun l_0_18_44 () Real)
(declare-fun l_0_18_22 () Real)
(declare-fun l_0_18_171 () Real)
(declare-fun l_0_18_170 () Real)
(declare-fun l_0_18_150 () Real)
(declare-fun l_0_18_149 () Real)
(declare-fun l_0_18_127 () Real)
(declare-fun l_0_18_108 () Real)
(declare-fun l_0_18_107 () Real)
(declare-fun l_0_18_1 () Real)
(declare-fun l_0_18_66 () Real)
(declare-fun l_0_18_45 () Real)
(declare-fun l_0_18_295 () Real)
(declare-fun l_0_18_274 () Real)
(declare-fun l_0_18_253 () Real)
(declare-fun l_0_18_232 () Real)
(declare-fun l_0_18_23 () Real)
(declare-fun l_0_18_211 () Real)
(declare-fun l_0_18_190 () Real)
(declare-fun l_0_18_128 () Real)
(declare-fun l_0_18_2 () Real)
(declare-fun l_0_18_3 () Real)
(declare-fun l_0_18_296 () Real)
(declare-fun l_0_18_275 () Real)
(declare-fun l_0_18_254 () Real)
(declare-fun l_0_18_24 () Real)
(declare-fun l_0_18_233 () Real)
(declare-fun l_0_18_212 () Real)
(declare-fun l_0_18_191 () Real)
(declare-fun l_0_18_129 () Real)
(declare-fun l_0_18_297 () Real)
(declare-fun l_0_18_276 () Real)
(declare-fun l_0_18_255 () Real)
(declare-fun l_0_18_234 () Real)
(declare-fun l_0_18_213 () Real)
(declare-fun l_0_18_192 () Real)
(declare-fun l_0_18_96 () Real)
(declare-fun l_0_18_95 () Real)
(declare-fun l_0_18_78 () Real)
(declare-fun l_0_18_77 () Real)
(declare-fun l_0_18_76 () Real)
(declare-fun l_0_18_75 () Real)
(declare-fun l_0_18_74 () Real)
(declare-fun l_0_18_57 () Real)
(declare-fun l_0_18_56 () Real)
(declare-fun l_0_18_55 () Real)
(declare-fun l_0_18_54 () Real)
(declare-fun l_0_18_53 () Real)
(declare-fun l_0_18_36 () Real)
(declare-fun l_0_18_35 () Real)
(declare-fun l_0_18_34 () Real)
(declare-fun l_0_18_33 () Real)
(declare-fun l_0_18_32 () Real)
(declare-fun l_0_18_309 () Real)
(declare-fun l_0_18_308 () Real)
(declare-fun l_0_18_307 () Real)
(declare-fun l_0_18_306 () Real)
(declare-fun l_0_18_305 () Real)
(declare-fun l_0_18_288 () Real)
(declare-fun l_0_18_287 () Real)
(declare-fun l_0_18_286 () Real)
(declare-fun l_0_18_285 () Real)
(declare-fun l_0_18_284 () Real)
(declare-fun l_0_18_267 () Real)
(declare-fun l_0_18_266 () Real)
(declare-fun l_0_18_265 () Real)
(declare-fun l_0_18_264 () Real)
(declare-fun l_0_18_263 () Real)
(declare-fun l_0_18_246 () Real)
(declare-fun l_0_18_245 () Real)
(declare-fun l_0_18_244 () Real)
(declare-fun l_0_18_243 () Real)
(declare-fun l_0_18_242 () Real)
(declare-fun l_0_18_225 () Real)
(declare-fun l_0_18_224 () Real)
(declare-fun l_0_18_223 () Real)
(declare-fun l_0_18_222 () Real)
(declare-fun l_0_18_221 () Real)
(declare-fun l_0_18_204 () Real)
(declare-fun l_0_18_203 () Real)
(declare-fun l_0_18_202 () Real)
(declare-fun l_0_18_201 () Real)
(declare-fun l_0_18_200 () Real)
(declare-fun l_0_18_180 () Real)
(declare-fun l_0_18_179 () Real)
(declare-fun l_0_18_159 () Real)
(declare-fun l_0_18_15 () Real)
(declare-fun l_0_18_158 () Real)
(declare-fun l_0_18_14 () Real)
(declare-fun l_0_18_13 () Real)
(declare-fun l_0_18_12 () Real)
(declare-fun l_0_18_11 () Real)
(declare-fun l_0_18_117 () Real)
(declare-fun l_0_18_116 () Real)
(declare-fun l_0_18_69 () Real)
(declare-fun l_0_18_68 () Real)
(declare-fun l_0_18_67 () Real)
(declare-fun l_0_18_6 () Real)
(declare-fun l_0_18_5 () Real)
(declare-fun l_0_18_48 () Real)
(declare-fun l_0_18_47 () Real)
(declare-fun l_0_18_46 () Real)
(declare-fun l_0_18_4 () Real)
(declare-fun l_0_18_300 () Real)
(declare-fun l_0_18_299 () Real)
(declare-fun l_0_18_298 () Real)
(declare-fun l_0_18_279 () Real)
(declare-fun l_0_18_278 () Real)
(declare-fun l_0_18_277 () Real)
(declare-fun l_0_18_27 () Real)
(declare-fun l_0_18_26 () Real)
(declare-fun l_0_18_258 () Real)
(declare-fun l_0_18_257 () Real)
(declare-fun l_0_18_256 () Real)
(declare-fun l_0_18_25 () Real)
(declare-fun l_0_18_237 () Real)
(declare-fun l_0_18_236 () Real)
(declare-fun l_0_18_235 () Real)
(declare-fun l_0_18_216 () Real)
(declare-fun l_0_18_215 () Real)
(declare-fun l_0_18_214 () Real)
(declare-fun l_0_18_195 () Real)
(declare-fun l_0_18_194 () Real)
(declare-fun l_0_18_193 () Real)
(declare-fun l_0_18_89 () Real)
(declare-fun l_0_18_88 () Real)
(declare-fun l_0_18_173 () Real)
(declare-fun l_0_18_172 () Real)
(declare-fun l_0_18_152 () Real)
(declare-fun l_0_18_151 () Real)
(declare-fun l_0_18_110 () Real)
(declare-fun l_0_18_109 () Real)
(declare-fun l_0_18_71 () Real)
(declare-fun l_0_18_70 () Real)
(declare-fun l_0_18_50 () Real)
(declare-fun l_0_18_49 () Real)
(declare-fun l_0_18_28 () Real)
(declare-fun l_0_18_133 () Real)
(declare-fun l_0_18_7 () Real)
(declare-fun l_0_18_8 () Real)
(declare-fun l_0_18_301 () Real)
(declare-fun l_0_18_280 () Real)
(declare-fun l_0_18_259 () Real)
(declare-fun l_0_18_29 () Real)
(declare-fun l_0_18_238 () Real)
(declare-fun l_0_18_217 () Real)
(declare-fun l_0_18_196 () Real)
(declare-fun l_0_18_134 () Real)
(declare-fun l_0_18_72 () Real)
(declare-fun l_0_18_9 () Real)
(declare-fun l_0_18_51 () Real)
(declare-fun l_0_18_30 () Real)
(declare-fun l_0_18_135 () Real)
(declare-fun l_0_18_132 () Real)
(declare-fun l_0_18_131 () Real)
(declare-fun l_0_18_130 () Real)
(declare-fun l_0_18_73 () Real)
(declare-fun l_0_18_52 () Real)
(declare-fun l_0_18_31 () Real)
(declare-fun l_0_18_136 () Real)
(declare-fun l_0_18_10 () Real)
(declare-fun l_0_18_91 () Real)
(declare-fun l_0_18_85 () Real)
(declare-fun l_0_18_175 () Real)
(declare-fun l_0_18_169 () Real)
(declare-fun l_0_18_154 () Real)
(declare-fun l_0_18_148 () Real)
(declare-fun l_0_18_140 () Real)
(declare-fun l_0_18_139 () Real)
(declare-fun l_0_18_138 () Real)
(declare-fun l_0_18_137 () Real)
(declare-fun l_0_18_112 () Real)
(declare-fun l_0_18_106 () Real)
(declare-fun l_0_18_82 () Real)
(declare-fun l_0_18_81 () Real)
(declare-fun l_0_18_80 () Real)
(declare-fun l_0_18_79 () Real)
(declare-fun l_0_18_61 () Real)
(declare-fun l_0_18_60 () Real)
(declare-fun l_0_18_59 () Real)
(declare-fun l_0_18_58 () Real)
(declare-fun l_0_18_40 () Real)
(declare-fun l_0_18_39 () Real)
(declare-fun l_0_18_38 () Real)
(declare-fun l_0_18_37 () Real)
(declare-fun l_0_18_18 () Real)
(declare-fun l_0_18_17 () Real)
(declare-fun l_0_18_16 () Real)
(declare-fun l_0_18_145 () Real)
(declare-fun l_0_18_144 () Real)
(declare-fun l_0_18_143 () Real)
(declare-fun l_0_18_142 () Real)
(declare-fun l_0_18_19 () Real)
(declare-fun l_0_18_302 () Real)
(declare-fun l_0_18_281 () Real)
(declare-fun l_0_18_260 () Real)
(declare-fun l_0_18_239 () Real)
(declare-fun l_0_18_218 () Real)
(declare-fun l_0_18_197 () Real)
(declare-fun l_0_18_303 () Real)
(declare-fun l_0_18_282 () Real)
(declare-fun l_0_18_261 () Real)
(declare-fun l_0_18_240 () Real)
(declare-fun l_0_18_219 () Real)
(declare-fun l_0_18_198 () Real)
(declare-fun l_0_18_304 () Real)
(declare-fun l_0_18_283 () Real)
(declare-fun l_0_18_262 () Real)
(declare-fun l_0_18_241 () Real)
(declare-fun l_0_18_220 () Real)
(declare-fun l_0_18_199 () Real)
(declare-fun l_0_18_92 () Real)
(declare-fun l_0_18_176 () Real)
(declare-fun l_0_18_155 () Real)
(declare-fun l_0_18_113 () Real)
(declare-fun l_0_18_313 () Real)
(declare-fun l_0_18_312 () Real)
(declare-fun l_0_18_311 () Real)
(declare-fun l_0_18_310 () Real)
(declare-fun l_0_18_292 () Real)
(declare-fun l_0_18_291 () Real)
(declare-fun l_0_18_290 () Real)
(declare-fun l_0_18_289 () Real)
(declare-fun l_0_18_271 () Real)
(declare-fun l_0_18_270 () Real)
(declare-fun l_0_18_269 () Real)
(declare-fun l_0_18_268 () Real)
(declare-fun l_0_18_250 () Real)
(declare-fun l_0_18_249 () Real)
(declare-fun l_0_18_248 () Real)
(declare-fun l_0_18_247 () Real)
(declare-fun l_0_18_229 () Real)
(declare-fun l_0_18_228 () Real)
(declare-fun l_0_18_227 () Real)
(declare-fun l_0_18_226 () Real)
(declare-fun l_0_18_208 () Real)
(declare-fun l_0_18_207 () Real)
(declare-fun l_0_18_206 () Real)
(declare-fun l_0_18_205 () Real)
(declare-fun l_0_18_93 () Real)
(declare-fun l_0_18_90 () Real)
(declare-fun l_0_18_177 () Real)
(declare-fun l_0_18_174 () Real)
(declare-fun l_0_18_156 () Real)
(declare-fun l_0_18_153 () Real)
(declare-fun l_0_18_114 () Real)
(declare-fun l_0_18_111 () Real)
(declare-fun l_0_18_94 () Real)
(declare-fun l_0_18_178 () Real)
(declare-fun l_0_18_157 () Real)
(declare-fun l_0_18_115 () Real)
(declare-fun l_0_18_98 () Real)
(declare-fun l_0_18_97 () Real)
(declare-fun l_0_18_182 () Real)
(declare-fun l_0_18_181 () Real)
(declare-fun l_0_18_161 () Real)
(declare-fun l_0_18_160 () Real)
(declare-fun l_0_18_119 () Real)
(declare-fun l_0_18_118 () Real)
(declare-fun l_0_18_41 () Real)
(declare-fun l_0_18_187 () Real)
(declare-fun l_0_18_186 () Real)
(declare-fun l_0_18_185 () Real)
(declare-fun l_0_18_184 () Real)
(declare-fun l_0_18_166 () Real)
(declare-fun l_0_18_165 () Real)
(declare-fun l_0_18_164 () Real)
(declare-fun l_0_18_163 () Real)
(declare-fun l_0_18_20 () Real)
(declare-fun l_0_18_124 () Real)
(declare-fun l_0_18_123 () Real)
(declare-fun l_0_18_122 () Real)
(declare-fun l_0_18_121 () Real)
(declare-fun l_0_18_103 () Real)
(declare-fun l_0_18_102 () Real)
(declare-fun l_0_18_101 () Real)
(declare-fun l_0_18_100 () Real)
(declare-fun l_0_18_42 () Real)
(declare-fun l_0_18_21 () Real)
(declare-fun l_0_18_141 () Real)
(declare-fun l_0_18_83 () Real)
(declare-fun l_0_18_62 () Real)
(declare-fun l_0_18_146 () Real)
(declare-fun l_0_18_84 () Real)
(declare-fun l_0_18_63 () Real)
(declare-fun l_0_18_147 () Real)
(declare-fun l_0_18_314 () Real)
(declare-fun l_0_18_293 () Real)
(declare-fun l_0_18_272 () Real)
(declare-fun l_0_18_251 () Real)
(declare-fun l_0_18_230 () Real)
(declare-fun l_0_18_209 () Real)
(declare-fun l_0_18_315 () Real)
(declare-fun l_0_18_294 () Real)
(declare-fun l_0_18_273 () Real)
(declare-fun l_0_18_252 () Real)
(declare-fun l_0_18_231 () Real)
(declare-fun l_0_18_210 () Real)
(declare-fun l_0_18_99 () Real)
(declare-fun l_0_18_183 () Real)
(declare-fun l_0_18_162 () Real)
(declare-fun l_0_18_120 () Real)
(declare-fun l_0_18_188 () Real)
(declare-fun l_0_18_167 () Real)
(declare-fun l_0_18_125 () Real)
(declare-fun l_0_18_104 () Real)
(declare-fun l_0_18_189 () Real)
(declare-fun l_0_18_168 () Real)
(declare-fun l_0_18_126 () Real)
(declare-fun l_0_18_105 () Real)
(assert
 (= (- (* (* (- 1.0) l_0_0_1) l_0_0_1) (* l_0_0_2 l_0_0_2)) 0.0))
(assert
 (>= l_0_0_1 0.0))
(assert
 (>= l_0_0_2 0.0))
(assert
 (let ((?x3402 (* l_0_1_3 l_0_1_3)))
 (let ((?x3403 (- (- (* (* (- 1.0) l_0_1_1) l_0_1_1) (* l_0_1_2 l_0_1_2)) ?x3402)))
 (= ?x3403 0.0))))
(assert
 (>= l_0_1_1 0.0))
(assert
 (>= l_0_1_2 0.0))
(assert
 (>= l_0_1_3 0.0))
(assert
 (let ((?x3424 (* l_0_2_4 l_0_2_4)))
 (let ((?x3422 (* l_0_2_3 l_0_2_3)))
 (let ((?x3423 (- (- (* (* (- 1.0) l_0_2_1) l_0_2_1) (* l_0_2_2 l_0_2_2)) ?x3422)))
 (= (- ?x3423 ?x3424) 0.0)))))
(assert
 (>= l_0_2_1 0.0))
(assert
 (>= l_0_2_2 0.0))
(assert
 (>= l_0_2_3 0.0))
(assert
 (>= l_0_2_4 0.0))
(assert
 (let ((?x3452 (* l_0_3_5 l_0_3_5)))
 (let ((?x3450 (* l_0_3_4 l_0_3_4)))
 (let ((?x3448 (* l_0_3_3 l_0_3_3)))
 (let ((?x3449 (- (- (* (* (- 1.0) l_0_3_1) l_0_3_1) (* l_0_3_2 l_0_3_2)) ?x3448)))
 (= (- (- ?x3449 ?x3450) ?x3452) 0.0))))))
(assert
 (>= l_0_3_1 0.0))
(assert
 (>= l_0_3_2 0.0))
(assert
 (>= l_0_3_3 0.0))
(assert
 (>= l_0_3_4 0.0))
(assert
 (>= l_0_3_5 0.0))
(assert
 (let ((?x3486 (* l_0_4_6 l_0_4_6)))
 (let ((?x3484 (* l_0_4_5 l_0_4_5)))
 (let ((?x3482 (* l_0_4_4 l_0_4_4)))
 (let ((?x3480 (* l_0_4_3 l_0_4_3)))
 (let ((?x3481 (- (- (* (* (- 1.0) l_0_4_1) l_0_4_1) (* l_0_4_2 l_0_4_2)) ?x3480)))
 (= (- (- (- ?x3481 ?x3482) ?x3484) ?x3486) 0.0)))))))
(assert
 (>= l_0_4_1 0.0))
(assert
 (>= l_0_4_2 0.0))
(assert
 (>= l_0_4_3 0.0))
(assert
 (>= l_0_4_4 0.0))
(assert
 (>= l_0_4_5 0.0))
(assert
 (>= l_0_4_6 0.0))
(assert
 (let ((?x3526 (* l_0_5_7 l_0_5_7)))
 (let ((?x3524 (* l_0_5_6 l_0_5_6)))
 (let ((?x3522 (* l_0_5_5 l_0_5_5)))
 (let ((?x3520 (* l_0_5_4 l_0_5_4)))
 (let ((?x3518 (* l_0_5_3 l_0_5_3)))
 (let ((?x3519 (- (- (* (* (- 1.0) l_0_5_1) l_0_5_1) (* l_0_5_2 l_0_5_2)) ?x3518)))
 (= (- (- (- (- ?x3519 ?x3520) ?x3522) ?x3524) ?x3526) 0.0))))))))
(assert
 (>= l_0_5_1 0.0))
(assert
 (>= l_0_5_2 0.0))
(assert
 (>= l_0_5_3 0.0))
(assert
 (>= l_0_5_4 0.0))
(assert
 (>= l_0_5_5 0.0))
(assert
 (>= l_0_5_6 0.0))
(assert
 (>= l_0_5_7 0.0))
(assert
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3573 (* 6.0 ?x3572)))
 (let ((?x3570 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x3567 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3564 (* 6.0 ?x3562)))
 (let ((?x3565 (+ (- (* (- l_0_6_149) l_0_6_149) (* l_0_6_150 l_0_6_150)) ?x3564)))
 (let ((?x3578 (- (+ (- (- ?x3565 ?x3567) ?x3570) ?x3573) (* (* 1.0 l_0_6_44) l_0_6_44))))
 (let ((?x3584 (+ (- ?x3578 (* (* 1.0 l_0_6_45) l_0_6_45)) (* 1.0 (* l_0_6_65 l_0_6_65)))))
 (= (+ (+ ?x3584 (* 1.0 (* l_0_6_66 l_0_6_66))) 1.0) 0.0)))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x3655 (* ?x3654 l_0_6_71)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x3652 (* ?x3651 l_0_6_70)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x3649 (* ?x3648 l_0_6_70)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x3646 (* ?x3645 l_0_6_50)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x3643 (* ?x3642 l_0_6_49)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x3640 (* ?x3639 l_0_6_49)))
 (let ((?x3637 (* l_0_6_22 l_0_6_22)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x3635 (* ?x3634 l_0_6_28)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x3632 (* ?x3631 l_0_6_133)))
 (let ((?x3633 (- (- (* (* 12.0 l_0_6_1) l_0_6_7) (* l_0_6_1 l_0_6_1)) ?x3632)))
 (let ((?x3653 (+ (+ (- (- (- (+ (- ?x3633 ?x3635) ?x3637) ?x3640) ?x3643) ?x3646) ?x3649) ?x3652)))
 (= (+ ?x3653 ?x3655) 0.0)))))))))))))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x3655 (* ?x3654 l_0_6_71)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x3652 (* ?x3651 l_0_6_70)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x3740 (* ?x3739 l_0_6_70)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x3646 (* ?x3645 l_0_6_50)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x3643 (* ?x3642 l_0_6_49)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x3735 (* ?x3734 l_0_6_49)))
 (let ((?x3731 (* 12.0 l_0_6_3)))
 (let ((?x3732 (* ?x3731 l_0_6_8)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x3729 (* ?x3728 l_0_6_29)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x3726 (* ?x3725 l_0_6_28)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x3635 (* ?x3634 l_0_6_28)))
 (let ((?x3718 (* 12.0 l_0_6_2)))
 (let ((?x3719 (* ?x3718 l_0_6_7)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x3713 (* ?x3712 l_0_6_134)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x3710 (* ?x3702 l_0_6_133)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x3627 (* ?x3626 l_0_6_7)))
 (let ((?x3717 (- (- (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_2) ?x3627) ?x3710) ?x3713) (* (* 2.0 l_0_6_148) l_0_6_154))))
 (let ((?x3727 (- (- (+ (+ ?x3717 ?x3719) (* (* 2.0 l_0_6_22) l_0_6_23)) ?x3635) ?x3726)))
 (let ((?x3742 (+ (+ (- (- (- (+ (- ?x3727 ?x3729) ?x3732) ?x3735) ?x3643) ?x3646) ?x3740) ?x3652)))
 (= (+ ?x3742 ?x3655) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x3850 (* ?x3849 l_0_6_72)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x3847 (* ?x3846 l_0_6_71)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x3844 (* ?x3843 l_0_6_70)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x3740 (* ?x3739 l_0_6_70)))
 (let ((?x3840 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x3837 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x3834 (* ?x3833 l_0_6_51)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x3831 (* ?x3830 l_0_6_50)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x3735 (* ?x3734 l_0_6_49)))
 (let ((?x3824 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x3821 (* ?x3820 l_0_6_30)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x3818 (* ?x3817 l_0_6_29)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x3815 (* ?x3814 l_0_6_28)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x3810 (* ?x3809 l_0_6_135)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x3807 (* ?x3806 l_0_6_134)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x3804 (* ?x3803 l_0_6_133)))
 (let ((?x3813 (+ (- (- (- (* (* (- 2.0) l_0_6_1) l_0_6_4) ?x3804) ?x3807) ?x3810) (* (* 2.0 l_0_6_22) l_0_6_25))))
 (let ((?x3829 (- (+ (+ (- (- (- ?x3813 ?x3815) ?x3818) ?x3821) ?x3824) ?x3735) (* (* 6.0 l_0_6_46) l_0_6_49))))
 (let ((?x3848 (+ (+ (- (+ (+ (- (- ?x3829 ?x3831) ?x3834) ?x3837) ?x3840) ?x3740) ?x3844) ?x3847)))
 (= (+ ?x3848 ?x3850) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3989 (* l_0_6_9 l_0_6_9)))
 (let ((?x3990 (* 6.0 ?x3989)))
 (let ((?x3986 (* l_0_6_8 l_0_6_8)))
 (let ((?x3987 (* 6.0 ?x3986)))
 (let ((?x3983 (* l_0_6_73 l_0_6_73)))
 (let ((?x3984 (* 3.0 ?x3983)))
 (let ((?x3980 (* l_0_6_72 l_0_6_72)))
 (let ((?x3981 (* 3.0 ?x3980)))
 (let ((?x3977 (* l_0_6_71 l_0_6_71)))
 (let ((?x3978 (* 3.0 ?x3977)))
 (let ((?x3974 (* l_0_6_70 l_0_6_70)))
 (let ((?x3975 (* 3.0 ?x3974)))
 (let ((?x3971 (* l_0_6_7 l_0_6_7)))
 (let ((?x3972 (* 6.0 ?x3971)))
 (let ((?x3969 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x3966 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x3963 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x3956 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x3953 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x3950 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x3947 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x3942 (* l_0_6_136 l_0_6_136)))
 (let ((?x3940 (* l_0_6_135 l_0_6_135)))
 (let ((?x3938 (* l_0_6_134 l_0_6_134)))
 (let ((?x3936 (* l_0_6_133 l_0_6_133)))
 (let ((?x3933 (* l_0_6_10 l_0_6_10)))
 (let ((?x3934 (* 6.0 ?x3933)))
 (let ((?x3941 (- (- (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) ?x3934) ?x3936) ?x3938) ?x3940)))
 (let ((?x3951 (- (- (+ (- ?x3941 ?x3942) (* (* 2.0 l_0_6_22) l_0_6_28)) ?x3947) ?x3950)))
 (let ((?x3964 (- (- (- (- ?x3951 ?x3953) ?x3956) (* (* 3.0 l_0_6_49) l_0_6_49)) ?x3963)))
 (let ((?x3985 (+ (+ (+ (+ (+ (- (- ?x3964 ?x3966) ?x3969) ?x3972) ?x3975) ?x3978) ?x3981) ?x3984)))
 (= (+ (+ ?x3985 ?x3987) ?x3990) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x4137 (* ?x4136 l_0_6_91)))
 (let ((?x4133 (* 6.0 l_0_6_73)))
 (let ((?x4134 (* ?x4133 l_0_6_77)))
 (let ((?x4130 (* 6.0 l_0_6_72)))
 (let ((?x4131 (* ?x4130 l_0_6_76)))
 (let ((?x4127 (* 6.0 l_0_6_71)))
 (let ((?x4128 (* ?x4127 l_0_6_75)))
 (let ((?x4124 (* 6.0 l_0_6_70)))
 (let ((?x4125 (* ?x4124 l_0_6_74)))
 (let ((?x4121 (* 6.0 l_0_6_52)))
 (let ((?x4122 (* ?x4121 l_0_6_56)))
 (let ((?x4118 (* 6.0 l_0_6_51)))
 (let ((?x4119 (* ?x4118 l_0_6_55)))
 (let ((?x4115 (* 6.0 l_0_6_50)))
 (let ((?x4116 (* ?x4115 l_0_6_54)))
 (let ((?x4109 (* 12.0 l_0_6_31)))
 (let ((?x4110 (* ?x4109 l_0_6_35)))
 (let ((?x4106 (* 12.0 l_0_6_30)))
 (let ((?x4107 (* ?x4106 l_0_6_34)))
 (let ((?x4103 (* 12.0 l_0_6_29)))
 (let ((?x4104 (* ?x4103 l_0_6_33)))
 (let ((?x4100 (* 12.0 l_0_6_28)))
 (let ((?x4101 (* ?x4100 l_0_6_32)))
 (let ((?x4095 (* 2.0 l_0_6_136)))
 (let ((?x4096 (* ?x4095 l_0_6_140)))
 (let ((?x4092 (* 2.0 l_0_6_135)))
 (let ((?x4093 (* ?x4092 l_0_6_139)))
 (let ((?x4089 (* 2.0 l_0_6_134)))
 (let ((?x4090 (* ?x4089 l_0_6_138)))
 (let ((?x4086 (* 2.0 l_0_6_133)))
 (let ((?x4087 (* ?x4086 l_0_6_137)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x4084 (* ?x4083 l_0_6_9)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x4081 (* ?x4080 l_0_6_8)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x4078 (* ?x4077 l_0_6_7)))
 (let ((?x4071 (* 12.0 l_0_6_10)))
 (let ((?x4072 (* ?x4071 l_0_6_14)))
 (let ((?x4076 (+ (+ (* (* (- 2.0) l_0_6_1) l_0_6_11) ?x4072) (* (* 2.0 l_0_6_106) l_0_6_112))))
 (let ((?x4097 (- (- (- (- (+ (+ (+ ?x4076 ?x4078) ?x4081) ?x4084) ?x4087) ?x4090) ?x4093) ?x4096)))
 (let ((?x4108 (- (- (- (+ ?x4097 (* (* 2.0 l_0_6_22) l_0_6_32)) ?x4101) ?x4104) ?x4107)))
 (let ((?x4120 (- (- (- (- ?x4108 ?x4110) (* (* 6.0 l_0_6_49) l_0_6_53)) ?x4116) ?x4119)))
 (= (- (+ (+ (+ (+ (- ?x4120 ?x4122) ?x4125) ?x4128) ?x4131) ?x4134) ?x4137) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4133 (* 6.0 l_0_6_73)))
 (let ((?x4301 (* ?x4133 l_0_6_82)))
 (let ((?x4130 (* 6.0 l_0_6_72)))
 (let ((?x4299 (* ?x4130 l_0_6_81)))
 (let ((?x4127 (* 6.0 l_0_6_71)))
 (let ((?x4297 (* ?x4127 l_0_6_80)))
 (let ((?x4124 (* 6.0 l_0_6_70)))
 (let ((?x4295 (* ?x4124 l_0_6_79)))
 (let ((?x4121 (* 6.0 l_0_6_52)))
 (let ((?x4293 (* ?x4121 l_0_6_61)))
 (let ((?x4118 (* 6.0 l_0_6_51)))
 (let ((?x4291 (* ?x4118 l_0_6_60)))
 (let ((?x4115 (* 6.0 l_0_6_50)))
 (let ((?x4289 (* ?x4115 l_0_6_59)))
 (let ((?x4109 (* 12.0 l_0_6_31)))
 (let ((?x4285 (* ?x4109 l_0_6_40)))
 (let ((?x4106 (* 12.0 l_0_6_30)))
 (let ((?x4283 (* ?x4106 l_0_6_39)))
 (let ((?x4103 (* 12.0 l_0_6_29)))
 (let ((?x4281 (* ?x4103 l_0_6_38)))
 (let ((?x4100 (* 12.0 l_0_6_28)))
 (let ((?x4279 (* ?x4100 l_0_6_37)))
 (let ((?x4274 (* 12.0 l_0_6_18)))
 (let ((?x4275 (* ?x4274 l_0_6_9)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x4272 (* ?x4271 l_0_6_8)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x4269 (* ?x4268 l_0_6_7)))
 (let ((?x4095 (* 2.0 l_0_6_136)))
 (let ((?x4266 (* ?x4095 l_0_6_145)))
 (let ((?x4092 (* 2.0 l_0_6_135)))
 (let ((?x4264 (* ?x4092 l_0_6_144)))
 (let ((?x4089 (* 2.0 l_0_6_134)))
 (let ((?x4262 (* ?x4089 l_0_6_143)))
 (let ((?x4086 (* 2.0 l_0_6_133)))
 (let ((?x4260 (* ?x4086 l_0_6_142)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x3632 (* ?x3631 l_0_6_133)))
 (let ((?x4071 (* 12.0 l_0_6_10)))
 (let ((?x4257 (* ?x4071 l_0_6_19)))
 (let ((?x4263 (- (- (+ (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x4257) ?x3632) ?x4260) ?x4262)))
 (let ((?x4278 (+ (+ (+ (+ (- (- ?x4263 ?x4264) ?x4266) ?x4269) ?x4272) ?x4275) (* (* 2.0 l_0_6_22) l_0_6_37))))
 (let ((?x4288 (- (- (- (- (- ?x4278 ?x4279) ?x4281) ?x4283) ?x4285) (* (* 6.0 l_0_6_49) l_0_6_58))))
 (let ((?x4302 (+ (+ (+ (+ (- (- (- ?x4288 ?x4289) ?x4291) ?x4293) ?x4295) ?x4297) ?x4299) ?x4301)))
 (= ?x4302 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x4423 (* ?x4422 l_0_6_71)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x4420 (* ?x4419 l_0_6_70)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x4417 (* ?x4416 l_0_6_50)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x4414 (* ?x4413 l_0_6_49)))
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3731 (* 12.0 l_0_6_3)))
 (let ((?x3732 (* ?x3731 l_0_6_8)))
 (let ((?x3604 (* l_0_6_24 l_0_6_24)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x3729 (* ?x3728 l_0_6_29)))
 (let ((?x3597 (* l_0_6_23 l_0_6_23)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x3726 (* ?x3725 l_0_6_28)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3718 (* 12.0 l_0_6_2)))
 (let ((?x3719 (* ?x3718 l_0_6_7)))
 (let ((?x4404 (- (* (* (- 2.0) l_0_6_149) l_0_6_154) (* (* 2.0 l_0_6_150) l_0_6_155))))
 (let ((?x4411 (+ (+ (- (+ (- (- (+ ?x4404 ?x3719) ?x3562) ?x3726) ?x3597) ?x3729) ?x3604) ?x3732)))
 (= (+ (+ (- (- (- ?x4411 ?x3572) ?x4414) ?x4417) ?x4420) ?x4423) 0.0))))))))))))))))))))))))
(assert
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x4512 (* ?x4511 l_0_6_72)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x4509 (* ?x4508 l_0_6_71)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x4506 (* ?x4505 l_0_6_70)))
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x4423 (* ?x4422 l_0_6_71)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x4420 (* ?x4419 l_0_6_70)))
 (let ((?x3840 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x3837 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x4499 (* ?x4498 l_0_6_51)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x4496 (* ?x4495 l_0_6_50)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x4493 (* ?x4492 l_0_6_49)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x4417 (* ?x4416 l_0_6_50)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x4414 (* ?x4413 l_0_6_49)))
 (let ((?x3824 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x3821 (* ?x3820 l_0_6_30)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x3818 (* ?x3817 l_0_6_29)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x3815 (* ?x3814 l_0_6_28)))
 (let ((?x4470 (- (* (* (- 2.0) l_0_6_151) l_0_6_154) (* (* 2.0 l_0_6_152) l_0_6_155))))
 (let ((?x4476 (- (- ?x4470 (* (* 2.0 l_0_6_153) l_0_6_156)) (* (* 2.0 l_0_6_2) l_0_6_4))))
 (let ((?x4482 (+ (+ ?x4476 (* (* 2.0 l_0_6_23) l_0_6_25)) (* (* 2.0 l_0_6_24) l_0_6_26))))
 (let ((?x4488 (- (- (- (- ?x4482 ?x3815) ?x3818) ?x3821) (* (* 2.0 l_0_6_3) l_0_6_5))))
 (let ((?x4501 (+ (- (- (- (+ (+ (+ ?x4488 ?x3824) ?x4414) ?x4417) ?x4493) ?x4496) ?x4499) ?x3837)))
 (= (+ (+ (+ (- (- (+ ?x4501 ?x3840) ?x4420) ?x4423) ?x4506) ?x4509) ?x4512) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3989 (* l_0_6_9 l_0_6_9)))
 (let ((?x3990 (* 6.0 ?x3989)))
 (let ((?x3986 (* l_0_6_8 l_0_6_8)))
 (let ((?x3987 (* 6.0 ?x3986)))
 (let ((?x3971 (* l_0_6_7 l_0_6_7)))
 (let ((?x3972 (* 6.0 ?x3971)))
 (let ((?x3956 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x3953 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x3950 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x3947 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x4588 (* l_0_6_157 l_0_6_157)))
 (let ((?x4586 (* l_0_6_156 l_0_6_156)))
 (let ((?x4584 (* l_0_6_155 l_0_6_155)))
 (let ((?x4585 (- (- (* 6.0 (* l_0_6_10 l_0_6_10)) (* l_0_6_154 l_0_6_154)) ?x4584)))
 (let ((?x4593 (+ (- (- (- ?x4585 ?x4586) ?x4588) (* (* 2.0 l_0_6_2) l_0_6_7)) (* (* 2.0 l_0_6_23) l_0_6_28))))
 (let ((?x4599 (- (- (- (+ ?x4593 (* (* 2.0 l_0_6_24) l_0_6_29)) ?x3947) ?x3950) (* (* 2.0 l_0_6_3) l_0_6_8))))
 (let ((?x4607 (- (- (- (- ?x4599 ?x3953) ?x3956) (* (* 1.0 l_0_6_49) l_0_6_49)) (* (* 1.0 l_0_6_50) l_0_6_50))))
 (let ((?x4613 (- (- ?x4607 (* (* 1.0 l_0_6_51) l_0_6_51)) (* (* 1.0 l_0_6_52) l_0_6_52))))
 (let ((?x4618 (+ (+ (+ ?x4613 ?x3972) (* 1.0 (* l_0_6_70 l_0_6_70))) (* 1.0 (* l_0_6_71 l_0_6_71)))))
 (let ((?x4622 (+ (+ ?x4618 (* 1.0 (* l_0_6_72 l_0_6_72))) (* 1.0 (* l_0_6_73 l_0_6_73)))))
 (= (+ (+ ?x4622 ?x3987) ?x3990) 0.0))))))))))))))))))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x4741 (* ?x4740 l_0_6_92)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x4738 (* ?x4737 l_0_6_91)))
 (let ((?x4734 (* 2.0 l_0_6_73)))
 (let ((?x4735 (* ?x4734 l_0_6_77)))
 (let ((?x4731 (* 2.0 l_0_6_72)))
 (let ((?x4732 (* ?x4731 l_0_6_76)))
 (let ((?x4728 (* 2.0 l_0_6_71)))
 (let ((?x4729 (* ?x4728 l_0_6_75)))
 (let ((?x4725 (* 2.0 l_0_6_70)))
 (let ((?x4726 (* ?x4725 l_0_6_74)))
 (let ((?x4722 (* 2.0 l_0_6_52)))
 (let ((?x4723 (* ?x4722 l_0_6_56)))
 (let ((?x4719 (* 2.0 l_0_6_51)))
 (let ((?x4720 (* ?x4719 l_0_6_55)))
 (let ((?x4716 (* 2.0 l_0_6_50)))
 (let ((?x4717 (* ?x4716 l_0_6_54)))
 (let ((?x4713 (* 2.0 l_0_6_49)))
 (let ((?x4714 (* ?x4713 l_0_6_53)))
 (let ((?x4109 (* 12.0 l_0_6_31)))
 (let ((?x4110 (* ?x4109 l_0_6_35)))
 (let ((?x4106 (* 12.0 l_0_6_30)))
 (let ((?x4107 (* ?x4106 l_0_6_34)))
 (let ((?x4103 (* 12.0 l_0_6_29)))
 (let ((?x4104 (* ?x4103 l_0_6_33)))
 (let ((?x4100 (* 12.0 l_0_6_28)))
 (let ((?x4101 (* ?x4100 l_0_6_32)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x4084 (* ?x4083 l_0_6_9)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x4081 (* ?x4080 l_0_6_8)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x4078 (* ?x4077 l_0_6_7)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x4682 (* ?x4681 l_0_6_113)))
 (let ((?x4071 (* 12.0 l_0_6_10)))
 (let ((?x4072 (* ?x4071 l_0_6_14)))
 (let ((?x4686 (- (+ (+ ?x4072 (* (* 2.0 l_0_6_107) l_0_6_112)) ?x4682) (* (* 2.0 l_0_6_11) l_0_6_2))))
 (let ((?x4692 (+ (+ (- (+ ?x4686 ?x4078) (* (* 2.0 l_0_6_12) l_0_6_3)) ?x4081) ?x4084)))
 (let ((?x4698 (- (- ?x4692 (* (* 2.0 l_0_6_154) l_0_6_158)) (* (* 2.0 l_0_6_155) l_0_6_159))))
 (let ((?x4704 (- (- ?x4698 (* (* 2.0 l_0_6_156) l_0_6_160)) (* (* 2.0 l_0_6_157) l_0_6_161))))
 (let ((?x4708 (+ (+ ?x4704 (* (* 2.0 l_0_6_23) l_0_6_32)) (* (* 2.0 l_0_6_24) l_0_6_33))))
 (let ((?x4721 (- (- (- (- (- (- (- ?x4708 ?x4101) ?x4104) ?x4107) ?x4110) ?x4714) ?x4717) ?x4720)))
 (let ((?x4742 (- (- (+ (+ (+ (+ (- ?x4721 ?x4723) ?x4726) ?x4729) ?x4732) ?x4735) ?x4738) ?x4741)))
 (= ?x4742 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4734 (* 2.0 l_0_6_73)))
 (let ((?x4879 (* ?x4734 l_0_6_82)))
 (let ((?x4731 (* 2.0 l_0_6_72)))
 (let ((?x4877 (* ?x4731 l_0_6_81)))
 (let ((?x4728 (* 2.0 l_0_6_71)))
 (let ((?x4875 (* ?x4728 l_0_6_80)))
 (let ((?x4725 (* 2.0 l_0_6_70)))
 (let ((?x4873 (* ?x4725 l_0_6_79)))
 (let ((?x4722 (* 2.0 l_0_6_52)))
 (let ((?x4871 (* ?x4722 l_0_6_61)))
 (let ((?x4719 (* 2.0 l_0_6_51)))
 (let ((?x4869 (* ?x4719 l_0_6_60)))
 (let ((?x4716 (* 2.0 l_0_6_50)))
 (let ((?x4867 (* ?x4716 l_0_6_59)))
 (let ((?x4713 (* 2.0 l_0_6_49)))
 (let ((?x4865 (* ?x4713 l_0_6_58)))
 (let ((?x4109 (* 12.0 l_0_6_31)))
 (let ((?x4285 (* ?x4109 l_0_6_40)))
 (let ((?x4106 (* 12.0 l_0_6_30)))
 (let ((?x4283 (* ?x4106 l_0_6_39)))
 (let ((?x4103 (* 12.0 l_0_6_29)))
 (let ((?x4281 (* ?x4103 l_0_6_38)))
 (let ((?x4100 (* 12.0 l_0_6_28)))
 (let ((?x4279 (* ?x4100 l_0_6_37)))
 (let ((?x4274 (* 12.0 l_0_6_18)))
 (let ((?x4275 (* ?x4274 l_0_6_9)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x4272 (* ?x4271 l_0_6_8)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x4269 (* ?x4268 l_0_6_7)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x3713 (* ?x3712 l_0_6_134)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x3710 (* ?x3702 l_0_6_133)))
 (let ((?x4071 (* 12.0 l_0_6_10)))
 (let ((?x4257 (* ?x4071 l_0_6_19)))
 (let ((?x4843 (- (- (+ (+ ?x4257 ?x3710) ?x3713) (* (* 2.0 l_0_6_154) l_0_6_163)) (* (* 2.0 l_0_6_155) l_0_6_164))))
 (let ((?x4847 (- (- ?x4843 (* (* 2.0 l_0_6_156) l_0_6_165)) (* (* 2.0 l_0_6_157) l_0_6_166))))
 (let ((?x4854 (- (+ (- ?x4847 (* (* 2.0 l_0_6_16) l_0_6_2)) ?x4269) (* (* 2.0 l_0_6_17) l_0_6_3))))
 (let ((?x4860 (+ (+ (+ (+ ?x4854 ?x4272) ?x4275) (* (* 2.0 l_0_6_23) l_0_6_37)) (* (* 2.0 l_0_6_24) l_0_6_38))))
 (let ((?x4870 (- (- (- (- (- (- (- ?x4860 ?x4279) ?x4281) ?x4283) ?x4285) ?x4865) ?x4867) ?x4869)))
 (= (+ (+ (+ (+ (- ?x4870 ?x4871) ?x4873) ?x4875) ?x4877) ?x4879) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x4512 (* ?x4511 l_0_6_72)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x4509 (* ?x4508 l_0_6_71)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x4506 (* ?x4505 l_0_6_70)))
 (let ((?x4971 (* l_0_6_6 l_0_6_6)))
 (let ((?x4969 (* l_0_6_5 l_0_6_5)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x4499 (* ?x4498 l_0_6_51)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x4496 (* ?x4495 l_0_6_50)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x4493 (* ?x4492 l_0_6_49)))
 (let ((?x4964 (* l_0_6_4 l_0_6_4)))
 (let ((?x4962 (* l_0_6_27 l_0_6_27)))
 (let ((?x4965 (- (+ (+ (* l_0_6_25 l_0_6_25) (* l_0_6_26 l_0_6_26)) ?x4962) ?x4964)))
 (let ((?x4974 (- (- (- (- (+ (+ (+ ?x4965 ?x4493) ?x4496) ?x4499) ?x4969) ?x4971) ?x4506) ?x4509)))
 (= (- ?x4974 ?x4512) 0.0))))))))))))))))))))
(assert
 (let ((?x3983 (* l_0_6_73 l_0_6_73)))
 (let ((?x3980 (* l_0_6_72 l_0_6_72)))
 (let ((?x3977 (* l_0_6_71 l_0_6_71)))
 (let ((?x3974 (* l_0_6_70 l_0_6_70)))
 (let ((?x4052 (* l_0_6_52 l_0_6_52)))
 (let ((?x4046 (* l_0_6_51 l_0_6_51)))
 (let ((?x4040 (* l_0_6_50 l_0_6_50)))
 (let ((?x4033 (* l_0_6_49 l_0_6_49)))
 (let ((?x5005 (+ (* (* 2.0 l_0_6_25) l_0_6_28) (* (* 2.0 l_0_6_26) l_0_6_29))))
 (let ((?x5011 (- (+ ?x5005 (* (* 2.0 l_0_6_27) l_0_6_30)) (* (* 2.0 l_0_6_4) l_0_6_7))))
 (let ((?x5017 (+ (+ (- (+ ?x5011 ?x4033) (* (* 2.0 l_0_6_5) l_0_6_8)) ?x4040) ?x4046)))
 (let ((?x5023 (- (- (- (+ ?x5017 ?x4052) (* (* 2.0 l_0_6_6) l_0_6_9)) ?x3974) ?x3977)))
 (= (- (- ?x5023 ?x3980) ?x3983) 0.0))))))))))))))
(assert
 (let ((?x5092 (* 2.0 l_0_6_90)))
 (let ((?x5093 (* ?x5092 l_0_6_93)))
 (let ((?x5089 (* 2.0 l_0_6_89)))
 (let ((?x5090 (* ?x5089 l_0_6_92)))
 (let ((?x5086 (* 2.0 l_0_6_88)))
 (let ((?x5087 (* ?x5086 l_0_6_91)))
 (let ((?x4734 (* 2.0 l_0_6_73)))
 (let ((?x4735 (* ?x4734 l_0_6_77)))
 (let ((?x4731 (* 2.0 l_0_6_72)))
 (let ((?x4732 (* ?x4731 l_0_6_76)))
 (let ((?x4728 (* 2.0 l_0_6_71)))
 (let ((?x4729 (* ?x4728 l_0_6_75)))
 (let ((?x4725 (* 2.0 l_0_6_70)))
 (let ((?x4726 (* ?x4725 l_0_6_74)))
 (let ((?x4722 (* 2.0 l_0_6_52)))
 (let ((?x4723 (* ?x4722 l_0_6_56)))
 (let ((?x4719 (* 2.0 l_0_6_51)))
 (let ((?x4720 (* ?x4719 l_0_6_55)))
 (let ((?x4716 (* 2.0 l_0_6_50)))
 (let ((?x4717 (* ?x4716 l_0_6_54)))
 (let ((?x4713 (* 2.0 l_0_6_49)))
 (let ((?x4714 (* ?x4713 l_0_6_53)))
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x5065 (* ?x5064 l_0_6_114)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x5062 (* ?x5061 l_0_6_113)))
 (let ((?x5060 (- (* (* 2.0 l_0_6_109) l_0_6_112) (* (* 2.0 l_0_6_11) l_0_6_4))))
 (let ((?x5071 (- (- (+ (+ ?x5060 ?x5062) ?x5065) (* (* 2.0 l_0_6_12) l_0_6_5)) (* (* 2.0 l_0_6_13) l_0_6_6))))
 (let ((?x5075 (+ (+ ?x5071 (* (* 2.0 l_0_6_25) l_0_6_32)) (* (* 2.0 l_0_6_26) l_0_6_33))))
 (let ((?x5080 (+ (+ (+ (+ ?x5075 (* (* 2.0 l_0_6_27) l_0_6_34)) ?x4714) ?x4717) ?x4720)))
 (let ((?x5091 (- (- (- (- (- (- (+ ?x5080 ?x4723) ?x4726) ?x4729) ?x4732) ?x4735) ?x5087) ?x5090)))
 (= (- ?x5091 ?x5093) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x4734 (* 2.0 l_0_6_73)))
 (let ((?x4879 (* ?x4734 l_0_6_82)))
 (let ((?x4731 (* 2.0 l_0_6_72)))
 (let ((?x4877 (* ?x4731 l_0_6_81)))
 (let ((?x4728 (* 2.0 l_0_6_71)))
 (let ((?x4875 (* ?x4728 l_0_6_80)))
 (let ((?x4725 (* 2.0 l_0_6_70)))
 (let ((?x4873 (* ?x4725 l_0_6_79)))
 (let ((?x4722 (* 2.0 l_0_6_52)))
 (let ((?x4871 (* ?x4722 l_0_6_61)))
 (let ((?x4719 (* 2.0 l_0_6_51)))
 (let ((?x4869 (* ?x4719 l_0_6_60)))
 (let ((?x4716 (* 2.0 l_0_6_50)))
 (let ((?x4867 (* ?x4716 l_0_6_59)))
 (let ((?x4713 (* 2.0 l_0_6_49)))
 (let ((?x4865 (* ?x4713 l_0_6_58)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x3810 (* ?x3809 l_0_6_135)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x3807 (* ?x3806 l_0_6_134)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x3804 (* ?x3803 l_0_6_133)))
 (let ((?x5168 (- (- (+ (+ ?x3804 ?x3807) ?x3810) (* (* 2.0 l_0_6_16) l_0_6_4)) (* (* 2.0 l_0_6_17) l_0_6_5))))
 (let ((?x5173 (+ (- ?x5168 (* (* 2.0 l_0_6_18) l_0_6_6)) (* (* 2.0 l_0_6_25) l_0_6_37))))
 (let ((?x5177 (+ (+ ?x5173 (* (* 2.0 l_0_6_26) l_0_6_38)) (* (* 2.0 l_0_6_27) l_0_6_39))))
 (let ((?x5184 (- (- (- (+ (+ (+ (+ ?x5177 ?x4865) ?x4867) ?x4869) ?x4871) ?x4873) ?x4875) ?x4877)))
 (= (- ?x5184 ?x4879) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x3989 (* l_0_6_9 l_0_6_9)))
 (let ((?x3986 (* l_0_6_8 l_0_6_8)))
 (let ((?x3971 (* l_0_6_7 l_0_6_7)))
 (let ((?x4027 (* l_0_6_31 l_0_6_31)))
 (let ((?x4021 (* l_0_6_30 l_0_6_30)))
 (let ((?x4015 (* l_0_6_29 l_0_6_29)))
 (let ((?x5234 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_28 l_0_6_28)) ?x4015) ?x4021)))
 (= (- (- (- (+ ?x5234 ?x4027) ?x3971) ?x3986) ?x3989) 0.0)))))))))
(assert
 (let ((?x5292 (* l_0_6_94 l_0_6_94)))
 (let ((?x5290 (* l_0_6_93 l_0_6_93)))
 (let ((?x5288 (* l_0_6_92 l_0_6_92)))
 (let ((?x5286 (* l_0_6_91 l_0_6_91)))
 (let ((?x5268 (* l_0_6_115 l_0_6_115)))
 (let ((?x5266 (* l_0_6_114 l_0_6_114)))
 (let ((?x5264 (* l_0_6_113 l_0_6_113)))
 (let ((?x5262 (* l_0_6_112 l_0_6_112)))
 (let ((?x5261 (- (* (* (- 2.0) l_0_6_10) l_0_6_14) (* (* 2.0 l_0_6_11) l_0_6_7))))
 (let ((?x5271 (- (+ (+ (+ (+ ?x5261 ?x5262) ?x5264) ?x5266) ?x5268) (* (* 2.0 l_0_6_12) l_0_6_8))))
 (let ((?x5276 (+ (- ?x5271 (* (* 2.0 l_0_6_13) l_0_6_9)) (* (* 2.0 l_0_6_28) l_0_6_32))))
 (let ((?x5282 (+ (+ ?x5276 (* (* 2.0 l_0_6_29) l_0_6_33)) (* (* 2.0 l_0_6_30) l_0_6_34))))
 (let ((?x5291 (- (- (- (+ ?x5282 (* (* 2.0 l_0_6_31) l_0_6_35)) ?x5286) ?x5288) ?x5290)))
 (= (- ?x5291 ?x5292) 0.0)))))))))))))))
(assert
 (let ((?x3942 (* l_0_6_136 l_0_6_136)))
 (let ((?x3940 (* l_0_6_135 l_0_6_135)))
 (let ((?x3938 (* l_0_6_134 l_0_6_134)))
 (let ((?x5342 (+ (+ (* (* (- 2.0) l_0_6_10) l_0_6_19) (* l_0_6_133 l_0_6_133)) ?x3938)))
 (let ((?x5348 (- (- (+ (+ ?x5342 ?x3940) ?x3942) (* (* 2.0 l_0_6_16) l_0_6_7)) (* (* 2.0 l_0_6_17) l_0_6_8))))
 (let ((?x5352 (+ (- ?x5348 (* (* 2.0 l_0_6_18) l_0_6_9)) (* (* 2.0 l_0_6_28) l_0_6_37))))
 (let ((?x5356 (+ (+ ?x5352 (* (* 2.0 l_0_6_29) l_0_6_38)) (* (* 2.0 l_0_6_30) l_0_6_39))))
 (= (+ ?x5356 (* (* 2.0 l_0_6_31) l_0_6_40)) 0.0)))))))))
(assert
 (let ((?x5425 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x5422 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x5419 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x5416 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x5413 (* l_0_6_36 l_0_6_36)))
 (let ((?x5411 (* l_0_6_35 l_0_6_35)))
 (let ((?x5409 (* l_0_6_34 l_0_6_34)))
 (let ((?x5407 (* l_0_6_33 l_0_6_33)))
 (let ((?x5405 (* l_0_6_32 l_0_6_32)))
 (let ((?x5403 (* l_0_6_15 l_0_6_15)))
 (let ((?x5401 (* l_0_6_14 l_0_6_14)))
 (let ((?x5399 (* l_0_6_13 l_0_6_13)))
 (let ((?x5397 (* l_0_6_12 l_0_6_12)))
 (let ((?x5394 (* 2.0 l_0_6_115)))
 (let ((?x5395 (* ?x5394 l_0_6_119)))
 (let ((?x5391 (* 2.0 l_0_6_114)))
 (let ((?x5392 (* ?x5391 l_0_6_118)))
 (let ((?x5388 (* 2.0 l_0_6_113)))
 (let ((?x5389 (* ?x5388 l_0_6_117)))
 (let ((?x5387 (+ (* (- l_0_6_11) l_0_6_11) (* (* 2.0 l_0_6_112) l_0_6_116))))
 (let ((?x5404 (- (- (- (- (+ (+ (+ ?x5387 ?x5389) ?x5392) ?x5395) ?x5397) ?x5399) ?x5401) ?x5403)))
 (let ((?x5420 (- (- (+ (+ (+ (+ (+ ?x5404 ?x5405) ?x5407) ?x5409) ?x5411) ?x5413) ?x5416) ?x5419)))
 (= (- (- ?x5420 ?x5422) ?x5425) 0.0))))))))))))))))))))))))
(assert
 (let ((?x4095 (* 2.0 l_0_6_136)))
 (let ((?x4096 (* ?x4095 l_0_6_140)))
 (let ((?x4092 (* 2.0 l_0_6_135)))
 (let ((?x4093 (* ?x4092 l_0_6_139)))
 (let ((?x4089 (* 2.0 l_0_6_134)))
 (let ((?x4090 (* ?x4089 l_0_6_138)))
 (let ((?x4086 (* 2.0 l_0_6_133)))
 (let ((?x4087 (* ?x4086 l_0_6_137)))
 (let ((?x5394 (* 2.0 l_0_6_115)))
 (let ((?x5507 (* ?x5394 l_0_6_124)))
 (let ((?x5391 (* 2.0 l_0_6_114)))
 (let ((?x5505 (* ?x5391 l_0_6_123)))
 (let ((?x5388 (* 2.0 l_0_6_113)))
 (let ((?x5503 (* ?x5388 l_0_6_122)))
 (let ((?x5385 (* 2.0 l_0_6_112)))
 (let ((?x5501 (* ?x5385 l_0_6_121)))
 (let ((?x5496 (* 2.0 l_0_6_103)))
 (let ((?x5497 (* ?x5496 l_0_6_94)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x5494 (* ?x5493 l_0_6_93)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x5491 (* ?x5490 l_0_6_92)))
 (let ((?x5500 (- (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_91) ?x5491) ?x5494) ?x5497) (* (* 2.0 l_0_6_11) l_0_6_16))))
 (let ((?x5510 (- (+ (+ (+ (+ ?x5500 ?x5501) ?x5503) ?x5505) ?x5507) (* (* 2.0 l_0_6_12) l_0_6_17))))
 (let ((?x5515 (+ (+ (+ (- ?x5510 (* (* 2.0 l_0_6_13) l_0_6_18)) ?x4087) ?x4090) ?x4093)))
 (let ((?x5522 (- (- (+ ?x5515 ?x4096) (* (* 2.0 l_0_6_14) l_0_6_19)) (* (* 2.0 l_0_6_15) l_0_6_20))))
 (let ((?x5528 (+ (+ ?x5522 (* (* 2.0 l_0_6_32) l_0_6_37)) (* (* 2.0 l_0_6_33) l_0_6_38))))
 (let ((?x5534 (+ (+ ?x5528 (* (* 2.0 l_0_6_34) l_0_6_39)) (* (* 2.0 l_0_6_35) l_0_6_40))))
 (= (+ ?x5534 (* (* 2.0 l_0_6_36) l_0_6_41)) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5636 (* l_0_6_42 l_0_6_42)))
 (let ((?x5634 (* l_0_6_41 l_0_6_41)))
 (let ((?x5632 (* l_0_6_40 l_0_6_40)))
 (let ((?x5630 (* l_0_6_39 l_0_6_39)))
 (let ((?x5628 (* l_0_6_38 l_0_6_38)))
 (let ((?x5626 (* l_0_6_37 l_0_6_37)))
 (let ((?x5624 (* l_0_6_21 l_0_6_21)))
 (let ((?x5622 (* l_0_6_20 l_0_6_20)))
 (let ((?x5620 (* l_0_6_19 l_0_6_19)))
 (let ((?x5618 (* l_0_6_18 l_0_6_18)))
 (let ((?x5616 (* l_0_6_17 l_0_6_17)))
 (let ((?x5614 (* l_0_6_16 l_0_6_16)))
 (let ((?x4095 (* 2.0 l_0_6_136)))
 (let ((?x4266 (* ?x4095 l_0_6_145)))
 (let ((?x4092 (* 2.0 l_0_6_135)))
 (let ((?x4264 (* ?x4092 l_0_6_144)))
 (let ((?x4089 (* 2.0 l_0_6_134)))
 (let ((?x4262 (* ?x4089 l_0_6_143)))
 (let ((?x4086 (* 2.0 l_0_6_133)))
 (let ((?x4260 (* ?x4086 l_0_6_142)))
 (let ((?x5621 (- (- (- (- (+ (+ (+ ?x4260 ?x4262) ?x4264) ?x4266) ?x5614) ?x5616) ?x5618) ?x5620)))
 (let ((?x5635 (+ (+ (+ (+ (+ (- (- ?x5621 ?x5622) ?x5624) ?x5626) ?x5628) ?x5630) ?x5632) ?x5634)))
 (= (+ ?x5635 ?x5636) 0.0))))))))))))))))))))))))
(assert
 (let ((?x5682 (* l_0_6_87 l_0_6_87)))
 (let ((?x5680 (* l_0_6_86 l_0_6_86)))
 (let ((?x5677 (* l_0_6_64 l_0_6_64)))
 (let ((?x5678 (* 3.0 ?x5677)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5675 (* ?x3648 l_0_6_65)))
 (let ((?x5673 (* (* 3.0 l_0_6_43) l_0_6_43)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5670 (* ?x3639 l_0_6_44)))
 (let ((?x5668 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x5665 (* l_0_6_127 l_0_6_127)))
 (let ((?x5663 (* l_0_6_108 l_0_6_108)))
 (let ((?x5664 (- (- (* 6.0 (* l_0_6_1 l_0_6_1)) (* l_0_6_107 l_0_6_107)) ?x5663)))
 (let ((?x5681 (+ (+ (+ (- (- (- (- ?x5664 ?x5665) ?x5668) ?x5670) ?x5673) ?x5675) ?x5678) ?x5680)))
 (= (+ ?x5681 ?x5682) 0.0))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x5738 (* 3.0 ?x3585)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x5736 (* 3.0 ?x3582)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5675 (* ?x3648 l_0_6_65)))
 (let ((?x5731 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (let ((?x5728 (* (* 3.0 l_0_6_44) l_0_6_44)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5670 (* ?x3639 l_0_6_44)))
 (let ((?x5668 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5720 (* ?x3634 l_0_6_23)))
 (let ((?x5718 (* l_0_6_148 l_0_6_148)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5716 (* ?x3631 l_0_6_128)))
 (let ((?x3628 (* l_0_6_1 l_0_6_1)))
 (let ((?x5660 (* 6.0 ?x3628)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5714 (* ?x3626 l_0_6_2)))
 (let ((?x5726 (- (- (- (- (- (- (+ ?x5714 ?x5660) ?x5716) ?x5718) ?x5720) ?x5668) ?x5670) (* (* 1.0 l_0_6_43) l_0_6_43))))
 (let ((?x5735 (+ (+ (- (- ?x5726 ?x5728) ?x5731) ?x5675) (* 1.0 (* l_0_6_64 l_0_6_64)))))
 (= (+ (+ ?x5735 ?x5736) ?x5738) 0.0))))))))))))))))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5793 (* ?x3654 l_0_6_68)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5791 (* ?x3651 l_0_6_67)))
 (let ((?x5677 (* l_0_6_64 l_0_6_64)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5788 (* ?x3648 l_0_6_67)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5786 (* ?x3645 l_0_6_47)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5784 (* ?x3642 l_0_6_46)))
 (let ((?x5704 (* l_0_6_43 l_0_6_43)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5781 (* ?x3639 l_0_6_46)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5779 (* ?x3634 l_0_6_25)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5777 (* ?x3631 l_0_6_130)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5776 (* ?x3626 l_0_6_4)))
 (let ((?x5789 (+ (- (- (+ (- (- (- ?x5776 ?x5777) ?x5779) ?x5781) ?x5704) ?x5784) ?x5786) ?x5788)))
 (= (+ (+ (- ?x5789 ?x5677) ?x5791) ?x5793) 0.0)))))))))))))))))))))))
(assert
 (let ((?x5858 (* l_0_6_85 l_0_6_85)))
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5856 (* ?x3654 l_0_6_75)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5854 (* ?x3651 l_0_6_74)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5852 (* ?x3648 l_0_6_74)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5850 (* ?x3645 l_0_6_54)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5848 (* ?x3642 l_0_6_53)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5846 (* ?x3639 l_0_6_53)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5844 (* ?x3634 l_0_6_32)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5842 (* ?x3631 l_0_6_137)))
 (let ((?x5843 (- (+ (* (* 12.0 l_0_6_1) l_0_6_11) (* l_0_6_106 l_0_6_106)) ?x5842)))
 (let ((?x5857 (+ (+ (+ (- (- (- (- ?x5843 ?x5844) ?x5846) ?x5848) ?x5850) ?x5852) ?x5854) ?x5856)))
 (= (- ?x5857 ?x5858) 0.0)))))))))))))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5919 (* ?x3654 l_0_6_80)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5917 (* ?x3651 l_0_6_79)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5915 (* ?x3648 l_0_6_79)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5913 (* ?x3645 l_0_6_59)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5911 (* ?x3642 l_0_6_58)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5909 (* ?x3639 l_0_6_58)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5907 (* ?x3634 l_0_6_37)))
 (let ((?x5665 (* l_0_6_127 l_0_6_127)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5904 (* ?x3631 l_0_6_142)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5903 (* ?x3626 l_0_6_16)))
 (let ((?x5916 (+ (- (- (- (- (+ (- ?x5903 ?x5904) ?x5665) ?x5907) ?x5909) ?x5911) ?x5913) ?x5915)))
 (= (+ (+ ?x5916 ?x5917) ?x5919) 0.0))))))))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x5738 (* 3.0 ?x3585)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x5736 (* 3.0 ?x3582)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x5976 (* ?x3739 l_0_6_65)))
 (let ((?x5731 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (let ((?x5728 (* (* 3.0 l_0_6_44) l_0_6_44)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x5972 (* ?x3734 l_0_6_44)))
 (let ((?x3572 (* l_0_6_3 l_0_6_3)))
 (let ((?x3573 (* 6.0 ?x3572)))
 (let ((?x3570 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x3567 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5720 (* ?x3634 l_0_6_23)))
 (let ((?x3562 (* l_0_6_2 l_0_6_2)))
 (let ((?x3564 (* 6.0 ?x3562)))
 (let ((?x5963 (* l_0_6_129 l_0_6_129)))
 (let ((?x5964 (- (- (* (* 12.0 l_0_6_1) l_0_6_2) (* l_0_6_128 l_0_6_128)) ?x5963)))
 (let ((?x5969 (- (- (+ (- ?x5964 (* (* 2.0 l_0_6_148) l_0_6_149)) ?x3564) ?x5720) ?x3567)))
 (let ((?x5978 (+ (+ (- (- (- (+ (- ?x5969 ?x3570) ?x3573) ?x5972) ?x5728) ?x5731) ?x5976) ?x5736)))
 (= (+ ?x5978 ?x5738) 0.0))))))))))))))))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5793 (* ?x3654 l_0_6_68)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5791 (* ?x3651 l_0_6_67)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6033 (* ?x3739 l_0_6_67)))
 (let ((?x5976 (* ?x3739 l_0_6_65)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5786 (* ?x3645 l_0_6_47)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5784 (* ?x3642 l_0_6_46)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6028 (* ?x3734 l_0_6_46)))
 (let ((?x5972 (* ?x3734 l_0_6_44)))
 (let ((?x3731 (* 12.0 l_0_6_3)))
 (let ((?x6025 (* ?x3731 l_0_6_5)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6023 (* ?x3728 l_0_6_26)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6021 (* ?x3725 l_0_6_25)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5779 (* ?x3634 l_0_6_25)))
 (let ((?x3718 (* 12.0 l_0_6_2)))
 (let ((?x6018 (* ?x3718 l_0_6_4)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6014 (* ?x3712 l_0_6_131)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6012 (* ?x3702 l_0_6_130)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5776 (* ?x3626 l_0_6_4)))
 (let ((?x6019 (+ (- (- (- ?x5776 ?x6012) ?x6014) (* (* 2.0 l_0_6_148) l_0_6_151)) ?x6018)))
 (let ((?x6030 (- (- (+ (+ (- (- (- ?x6019 ?x5779) ?x6021) ?x6023) ?x6025) ?x5972) ?x6028) ?x5784)))
 (= (+ (+ (+ (- (- ?x6030 ?x5786) ?x5976) ?x6033) ?x5791) ?x5793) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6113 (* ?x4136 l_0_6_86)))
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5856 (* ?x3654 l_0_6_75)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5854 (* ?x3651 l_0_6_74)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6109 (* ?x3739 l_0_6_74)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5850 (* ?x3645 l_0_6_54)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5848 (* ?x3642 l_0_6_53)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6105 (* ?x3734 l_0_6_53)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6103 (* ?x3728 l_0_6_33)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6101 (* ?x3725 l_0_6_32)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5844 (* ?x3634 l_0_6_32)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6096 (* ?x3712 l_0_6_138)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6094 (* ?x3702 l_0_6_137)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6092 (* ?x4080 l_0_6_3)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6090 (* ?x4077 l_0_6_2)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5839 (* ?x3626 l_0_6_11)))
 (let ((?x6095 (- (+ (+ (+ ?x5839 (* (* 2.0 l_0_6_106) l_0_6_107)) ?x6090) ?x6092) ?x6094)))
 (let ((?x6102 (- (- (- (- ?x6095 ?x6096) (* (* 2.0 l_0_6_148) l_0_6_158)) ?x5844) ?x6101)))
 (let ((?x6112 (+ (+ (+ (- (- (- (- ?x6102 ?x6103) ?x6105) ?x5848) ?x5850) ?x6109) ?x5854) ?x5856)))
 (= (- ?x6112 ?x6113) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3654 (* 6.0 l_0_6_66)))
 (let ((?x5919 (* ?x3654 l_0_6_80)))
 (let ((?x3651 (* 6.0 l_0_6_65)))
 (let ((?x5917 (* ?x3651 l_0_6_79)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6189 (* ?x3739 l_0_6_79)))
 (let ((?x3645 (* 6.0 l_0_6_45)))
 (let ((?x5913 (* ?x3645 l_0_6_59)))
 (let ((?x3642 (* 6.0 l_0_6_44)))
 (let ((?x5911 (* ?x3642 l_0_6_58)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6185 (* ?x3734 l_0_6_58)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6183 (* ?x3728 l_0_6_38)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6181 (* ?x3725 l_0_6_37)))
 (let ((?x3634 (* 12.0 l_0_6_22)))
 (let ((?x5907 (* ?x3634 l_0_6_37)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x6178 (* ?x4271 l_0_6_3)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x6176 (* ?x4268 l_0_6_2)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6172 (* ?x3712 l_0_6_143)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6170 (* ?x3702 l_0_6_142)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5716 (* ?x3631 l_0_6_128)))
 (let ((?x3626 (* 12.0 l_0_6_1)))
 (let ((?x5903 (* ?x3626 l_0_6_16)))
 (let ((?x6175 (- (- (- (+ ?x5903 ?x5716) ?x6170) ?x6172) (* (* 2.0 l_0_6_148) l_0_6_163))))
 (let ((?x6187 (- (- (- (- (- (+ (+ ?x6175 ?x6176) ?x6178) ?x5907) ?x6181) ?x6183) ?x6185) ?x5911)))
 (= (+ (+ (+ (- ?x6187 ?x5913) ?x6189) ?x5917) ?x5919) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6278 (* l_0_6_69 l_0_6_69)))
 (let ((?x6279 (* 3.0 ?x6278)))
 (let ((?x6275 (* l_0_6_68 l_0_6_68)))
 (let ((?x6276 (* 3.0 ?x6275)))
 (let ((?x6272 (* l_0_6_67 l_0_6_67)))
 (let ((?x6273 (* 3.0 ?x6272)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6033 (* ?x3739 l_0_6_67)))
 (let ((?x4971 (* l_0_6_6 l_0_6_6)))
 (let ((?x6269 (* 6.0 ?x4971)))
 (let ((?x4969 (* l_0_6_5 l_0_6_5)))
 (let ((?x6267 (* 6.0 ?x4969)))
 (let ((?x6265 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x6262 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6028 (* ?x3734 l_0_6_46)))
 (let ((?x4964 (* l_0_6_4 l_0_6_4)))
 (let ((?x6255 (* 6.0 ?x4964)))
 (let ((?x6253 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x6250 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x6247 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x6244 (* l_0_6_132 l_0_6_132)))
 (let ((?x6245 (- (- (* (- l_0_6_130) l_0_6_130) (* l_0_6_131 l_0_6_131)) ?x6244)))
 (let ((?x6260 (- (+ (+ (- (- (- ?x6245 ?x6247) ?x6250) ?x6253) ?x6255) ?x6028) (* (* 3.0 l_0_6_46) l_0_6_46))))
 (let ((?x6277 (+ (+ (- (+ (+ (- (- ?x6260 ?x6262) ?x6265) ?x6267) ?x6269) ?x6033) ?x6273) ?x6276)))
 (= (+ ?x6277 ?x6279) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6371 (* ?x4136 l_0_6_88)))
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x6369 (* ?x3849 l_0_6_76)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x6367 (* ?x3846 l_0_6_75)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x6365 (* ?x3843 l_0_6_74)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6109 (* ?x3739 l_0_6_74)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x6362 (* ?x3833 l_0_6_55)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x6360 (* ?x3830 l_0_6_54)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6105 (* ?x3734 l_0_6_53)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x6355 (* ?x3820 l_0_6_34)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x6353 (* ?x3817 l_0_6_33)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x6351 (* ?x3814 l_0_6_32)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x6349 (* ?x3809 l_0_6_139)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x6347 (* ?x3806 l_0_6_138)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x6345 (* ?x3803 l_0_6_137)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x6343 (* ?x4083 l_0_6_6)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6341 (* ?x4080 l_0_6_5)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6339 (* ?x4077 l_0_6_4)))
 (let ((?x6346 (- (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_109) ?x6339) ?x6341) ?x6343) ?x6345)))
 (let ((?x6359 (- (+ (- (- (- (- (- ?x6346 ?x6347) ?x6349) ?x6351) ?x6353) ?x6355) ?x6105) (* (* 6.0 l_0_6_46) l_0_6_53))))
 (let ((?x6372 (- (+ (+ (+ (- (- (- ?x6359 ?x6360) ?x6362) ?x6109) ?x6365) ?x6367) ?x6369) ?x6371)))
 (= ?x6372 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x6480 (* ?x3849 l_0_6_81)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x6478 (* ?x3846 l_0_6_80)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x6476 (* ?x3843 l_0_6_79)))
 (let ((?x3739 (* 2.0 l_0_6_64)))
 (let ((?x6189 (* ?x3739 l_0_6_79)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x6473 (* ?x3833 l_0_6_60)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x6471 (* ?x3830 l_0_6_59)))
 (let ((?x3734 (* 2.0 l_0_6_43)))
 (let ((?x6185 (* ?x3734 l_0_6_58)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x6466 (* ?x3820 l_0_6_39)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x6464 (* ?x3817 l_0_6_38)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x6462 (* ?x3814 l_0_6_37)))
 (let ((?x4274 (* 12.0 l_0_6_18)))
 (let ((?x6460 (* ?x4274 l_0_6_6)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x6458 (* ?x4271 l_0_6_5)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x6456 (* ?x4268 l_0_6_4)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x6454 (* ?x3809 l_0_6_144)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x6452 (* ?x3806 l_0_6_143)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x6450 (* ?x3803 l_0_6_142)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5777 (* ?x3631 l_0_6_130)))
 (let ((?x6463 (- (+ (+ (+ (- (- (- ?x5777 ?x6450) ?x6452) ?x6454) ?x6456) ?x6458) ?x6460) ?x6462)))
 (let ((?x6470 (- (+ (- (- ?x6463 ?x6464) ?x6466) ?x6185) (* (* 6.0 l_0_6_46) l_0_6_58))))
 (= (+ (+ (+ (- (- (- ?x6470 ?x6471) ?x6473) ?x6189) ?x6476) ?x6478) ?x6480) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6617 (* ?x4136 l_0_6_95)))
 (let ((?x6614 (* l_0_6_78 l_0_6_78)))
 (let ((?x6615 (* 3.0 ?x6614)))
 (let ((?x6611 (* l_0_6_77 l_0_6_77)))
 (let ((?x6612 (* 3.0 ?x6611)))
 (let ((?x6608 (* l_0_6_76 l_0_6_76)))
 (let ((?x6609 (* 3.0 ?x6608)))
 (let ((?x6605 (* l_0_6_75 l_0_6_75)))
 (let ((?x6606 (* 3.0 ?x6605)))
 (let ((?x6602 (* l_0_6_74 l_0_6_74)))
 (let ((?x6603 (* 3.0 ?x6602)))
 (let ((?x6600 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x6597 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x6594 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x6591 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x6585 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6582 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6579 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6576 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6573 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x5403 (* l_0_6_15 l_0_6_15)))
 (let ((?x6570 (* 6.0 ?x5403)))
 (let ((?x6568 (* l_0_6_141 l_0_6_141)))
 (let ((?x6566 (* l_0_6_140 l_0_6_140)))
 (let ((?x5401 (* l_0_6_14 l_0_6_14)))
 (let ((?x6564 (* 6.0 ?x5401)))
 (let ((?x6562 (* l_0_6_139 l_0_6_139)))
 (let ((?x6560 (* l_0_6_138 l_0_6_138)))
 (let ((?x6558 (* l_0_6_137 l_0_6_137)))
 (let ((?x5399 (* l_0_6_13 l_0_6_13)))
 (let ((?x6556 (* 6.0 ?x5399)))
 (let ((?x5397 (* l_0_6_12 l_0_6_12)))
 (let ((?x6554 (* 6.0 ?x5397)))
 (let ((?x5429 (* l_0_6_11 l_0_6_11)))
 (let ((?x6552 (* 6.0 ?x5429)))
 (let ((?x6559 (- (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_116) ?x6552) ?x6554) ?x6556) ?x6558)))
 (let ((?x6574 (- (+ (- (- (+ (- (- ?x6559 ?x6560) ?x6562) ?x6564) ?x6566) ?x6568) ?x6570) ?x6573)))
 (let ((?x6589 (- (- (- (- (- ?x6574 ?x6576) ?x6579) ?x6582) ?x6585) (* (* 3.0 l_0_6_53) l_0_6_53))))
 (let ((?x6610 (+ (+ (+ (- (- (- (- ?x6589 ?x6591) ?x6594) ?x6597) ?x6600) ?x6603) ?x6606) ?x6609)))
 (= (- (+ (+ ?x6610 ?x6612) ?x6615) ?x6617) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6777 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x6774 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x6771 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x6768 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x6765 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x6762 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x6759 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x6756 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x6753 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x6747 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x6744 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x6741 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x6738 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x6735 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x6732 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x6729 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6726 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x6723 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x6720 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6717 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6714 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x6711 (* ?x4083 l_0_6_18)))
 (let ((?x3631 (* 2.0 l_0_6_127)))
 (let ((?x5842 (* ?x3631 l_0_6_137)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6708 (* ?x4080 l_0_6_17)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6706 (* ?x4077 l_0_6_16)))
 (let ((?x4074 (* 2.0 l_0_6_106)))
 (let ((?x6704 (* ?x4074 l_0_6_121)))
 (let ((?x6710 (+ (+ (+ (+ (* (* (- 2.0) l_0_6_100) l_0_6_85) ?x6704) ?x6706) ?x6708) ?x5842)))
 (let ((?x6730 (- (- (+ (- (- (- (+ ?x6710 ?x6711) ?x6714) ?x6717) ?x6720) ?x6723) ?x6726) ?x6729)))
 (let ((?x6751 (- (- (- (- (- (- (+ ?x6730 ?x6732) ?x6735) ?x6738) ?x6741) ?x6744) ?x6747) (* (* 6.0 l_0_6_53) l_0_6_58))))
 (let ((?x6772 (+ (+ (+ (- (- (- (- ?x6751 ?x6753) ?x6756) ?x6759) ?x6762) ?x6765) ?x6768) ?x6771)))
 (= (+ (+ ?x6772 ?x6774) ?x6777) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6964 (* l_0_6_84 l_0_6_84)))
 (let ((?x6965 (* 3.0 ?x6964)))
 (let ((?x6961 (* l_0_6_83 l_0_6_83)))
 (let ((?x6962 (* 3.0 ?x6961)))
 (let ((?x6958 (* l_0_6_82 l_0_6_82)))
 (let ((?x6959 (* 3.0 ?x6958)))
 (let ((?x6955 (* l_0_6_81 l_0_6_81)))
 (let ((?x6956 (* 3.0 ?x6955)))
 (let ((?x6952 (* l_0_6_80 l_0_6_80)))
 (let ((?x6953 (* 3.0 ?x6952)))
 (let ((?x6949 (* l_0_6_79 l_0_6_79)))
 (let ((?x6950 (* 3.0 ?x6949)))
 (let ((?x6947 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x6944 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x6941 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x6938 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x6935 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x6929 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x6926 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x6923 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x6920 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x6917 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x6914 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x5624 (* l_0_6_21 l_0_6_21)))
 (let ((?x6911 (* 6.0 ?x5624)))
 (let ((?x5622 (* l_0_6_20 l_0_6_20)))
 (let ((?x6909 (* 6.0 ?x5622)))
 (let ((?x5620 (* l_0_6_19 l_0_6_19)))
 (let ((?x6907 (* 6.0 ?x5620)))
 (let ((?x5618 (* l_0_6_18 l_0_6_18)))
 (let ((?x6905 (* 6.0 ?x5618)))
 (let ((?x5616 (* l_0_6_17 l_0_6_17)))
 (let ((?x6903 (* 6.0 ?x5616)))
 (let ((?x5614 (* l_0_6_16 l_0_6_16)))
 (let ((?x6901 (* 6.0 ?x5614)))
 (let ((?x6899 (* l_0_6_147 l_0_6_147)))
 (let ((?x6897 (* l_0_6_146 l_0_6_146)))
 (let ((?x6895 (* l_0_6_145 l_0_6_145)))
 (let ((?x6893 (* l_0_6_144 l_0_6_144)))
 (let ((?x6891 (* l_0_6_143 l_0_6_143)))
 (let ((?x6892 (- (- (* (* 2.0 l_0_6_127) l_0_6_142) (* l_0_6_142 l_0_6_142)) ?x6891)))
 (let ((?x6906 (+ (+ (+ (- (- (- (- ?x6892 ?x6893) ?x6895) ?x6897) ?x6899) ?x6901) ?x6903) ?x6905)))
 (let ((?x6924 (- (- (- (- (+ (+ (+ ?x6906 ?x6907) ?x6909) ?x6911) ?x6914) ?x6917) ?x6920) ?x6923)))
 (let ((?x6936 (- (- (- (- ?x6924 ?x6926) ?x6929) (* (* 3.0 l_0_6_58) l_0_6_58)) ?x6935)))
 (let ((?x6957 (+ (+ (+ (- (- (- (- ?x6936 ?x6938) ?x6941) ?x6944) ?x6947) ?x6950) ?x6953) ?x6956)))
 (= (+ (+ (+ ?x6957 ?x6959) ?x6962) ?x6965) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3585 (* l_0_6_66 l_0_6_66)))
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7070 (* ?x4422 l_0_6_68)))
 (let ((?x3582 (* l_0_6_65 l_0_6_65)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7067 (* ?x4419 l_0_6_67)))
 (let ((?x3615 (* l_0_6_45 l_0_6_45)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7064 (* ?x4416 l_0_6_47)))
 (let ((?x3611 (* l_0_6_44 l_0_6_44)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7061 (* ?x4413 l_0_6_46)))
 (let ((?x3731 (* 12.0 l_0_6_3)))
 (let ((?x6025 (* ?x3731 l_0_6_5)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6023 (* ?x3728 l_0_6_26)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6021 (* ?x3725 l_0_6_25)))
 (let ((?x3718 (* 12.0 l_0_6_2)))
 (let ((?x6018 (* ?x3718 l_0_6_4)))
 (let ((?x7056 (- (* (* (- 2.0) l_0_6_149) l_0_6_151) (* (* 2.0 l_0_6_150) l_0_6_152))))
 (let ((?x7065 (- (+ (- (+ (- (- (+ ?x7056 ?x6018) ?x6021) ?x6023) ?x6025) ?x7061) ?x3611) ?x7064)))
 (= (- (+ (- (+ (+ ?x7065 ?x3615) ?x7067) ?x3582) ?x7070) ?x3585) 0.0))))))))))))))))))))))))
(assert
 (let ((?x5682 (* l_0_6_87 l_0_6_87)))
 (let ((?x5680 (* l_0_6_86 l_0_6_86)))
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7130 (* ?x4422 l_0_6_75)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7128 (* ?x4419 l_0_6_74)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7126 (* ?x4416 l_0_6_54)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7124 (* ?x4413 l_0_6_53)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6103 (* ?x3728 l_0_6_33)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6101 (* ?x3725 l_0_6_32)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6092 (* ?x4080 l_0_6_3)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6090 (* ?x4077 l_0_6_2)))
 (let ((?x7116 (+ (+ (+ (* l_0_6_107 l_0_6_107) (* l_0_6_108 l_0_6_108)) ?x6090) ?x6092)))
 (let ((?x7121 (- (- ?x7116 (* (* 2.0 l_0_6_149) l_0_6_158)) (* (* 2.0 l_0_6_150) l_0_6_159))))
 (let ((?x7132 (- (+ (+ (- (- (- (- ?x7121 ?x6101) ?x6103) ?x7124) ?x7126) ?x7128) ?x7130) ?x5680)))
 (= (- ?x7132 ?x5682) 0.0)))))))))))))))))))))))
(assert
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7187 (* ?x4422 l_0_6_80)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7185 (* ?x4419 l_0_6_79)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7183 (* ?x4416 l_0_6_59)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7181 (* ?x4413 l_0_6_58)))
 (let ((?x3728 (* 12.0 l_0_6_24)))
 (let ((?x6183 (* ?x3728 l_0_6_38)))
 (let ((?x3725 (* 12.0 l_0_6_23)))
 (let ((?x6181 (* ?x3725 l_0_6_37)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x6178 (* ?x4271 l_0_6_3)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x6176 (* ?x4268 l_0_6_2)))
 (let ((?x7174 (- (+ (* l_0_6_128 l_0_6_128) (* l_0_6_129 l_0_6_129)) (* (* 2.0 l_0_6_149) l_0_6_163))))
 (let ((?x7179 (- (+ (+ (- ?x7174 (* (* 2.0 l_0_6_150) l_0_6_164)) ?x6176) ?x6178) ?x6181)))
 (= (+ (+ (- (- (- ?x7179 ?x6183) ?x7181) ?x7183) ?x7185) ?x7187) 0.0))))))))))))))))))))
(assert
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7070 (* ?x4422 l_0_6_68)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7067 (* ?x4419 l_0_6_67)))
 (let ((?x4971 (* l_0_6_6 l_0_6_6)))
 (let ((?x6269 (* 6.0 ?x4971)))
 (let ((?x4969 (* l_0_6_5 l_0_6_5)))
 (let ((?x6267 (* 6.0 ?x4969)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7064 (* ?x4416 l_0_6_47)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7061 (* ?x4413 l_0_6_46)))
 (let ((?x4964 (* l_0_6_4 l_0_6_4)))
 (let ((?x6255 (* 6.0 ?x4964)))
 (let ((?x6253 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x6250 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x6247 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x7225 (* l_0_6_153 l_0_6_153)))
 (let ((?x7226 (- (- (* (- l_0_6_151) l_0_6_151) (* l_0_6_152 l_0_6_152)) ?x7225)))
 (let ((?x7235 (- (+ (+ (+ (- (- (- ?x7226 ?x6247) ?x6250) ?x6253) ?x6255) ?x7061) ?x7064) (* (* 1.0 l_0_6_46) l_0_6_46))))
 (let ((?x7241 (- (- ?x7235 (* (* 1.0 l_0_6_47) l_0_6_47)) (* (* 1.0 l_0_6_48) l_0_6_48))))
 (let ((?x7247 (+ (- (- (+ (+ ?x7241 ?x6267) ?x6269) ?x7067) ?x7070) (* 1.0 (* l_0_6_67 l_0_6_67)))))
 (let ((?x7251 (+ (+ ?x7247 (* 1.0 (* l_0_6_68 l_0_6_68))) (* 1.0 (* l_0_6_69 l_0_6_69)))))
 (= ?x7251 0.0)))))))))))))))))))))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x7324 (* ?x4740 l_0_6_89)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x7322 (* ?x4737 l_0_6_88)))
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x7320 (* ?x4511 l_0_6_76)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x7318 (* ?x4508 l_0_6_75)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x7316 (* ?x4505 l_0_6_74)))
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7130 (* ?x4422 l_0_6_75)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7128 (* ?x4419 l_0_6_74)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x7312 (* ?x4498 l_0_6_55)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x7310 (* ?x4495 l_0_6_54)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x7308 (* ?x4492 l_0_6_53)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7126 (* ?x4416 l_0_6_54)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7124 (* ?x4413 l_0_6_53)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x6355 (* ?x3820 l_0_6_34)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x6353 (* ?x3817 l_0_6_33)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x6351 (* ?x3814 l_0_6_32)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x6343 (* ?x4083 l_0_6_6)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6341 (* ?x4080 l_0_6_5)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6339 (* ?x4077 l_0_6_4)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7291 (* ?x4681 l_0_6_110)))
 (let ((?x7295 (+ (+ (+ (+ (* (* 2.0 l_0_6_107) l_0_6_109) ?x7291) ?x6339) ?x6341) ?x6343)))
 (let ((?x7300 (- (- ?x7295 (* (* 2.0 l_0_6_151) l_0_6_158)) (* (* 2.0 l_0_6_152) l_0_6_159))))
 (let ((?x7305 (- (- (- (- ?x7300 (* (* 2.0 l_0_6_153) l_0_6_160)) ?x6351) ?x6353) ?x6355)))
 (let ((?x7315 (- (- (- (- (- (+ (+ ?x7305 ?x7124) ?x7126) ?x7308) ?x7310) ?x7312) ?x7128) ?x7130)))
 (= (- (- (+ (+ (+ ?x7315 ?x7316) ?x7318) ?x7320) ?x7322) ?x7324) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x7424 (* ?x4511 l_0_6_81)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x7422 (* ?x4508 l_0_6_80)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x7420 (* ?x4505 l_0_6_79)))
 (let ((?x4422 (* 2.0 l_0_6_66)))
 (let ((?x7187 (* ?x4422 l_0_6_80)))
 (let ((?x4419 (* 2.0 l_0_6_65)))
 (let ((?x7185 (* ?x4419 l_0_6_79)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x7416 (* ?x4498 l_0_6_60)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x7414 (* ?x4495 l_0_6_59)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x7412 (* ?x4492 l_0_6_58)))
 (let ((?x4416 (* 2.0 l_0_6_45)))
 (let ((?x7183 (* ?x4416 l_0_6_59)))
 (let ((?x4413 (* 2.0 l_0_6_44)))
 (let ((?x7181 (* ?x4413 l_0_6_58)))
 (let ((?x3820 (* 12.0 l_0_6_27)))
 (let ((?x6466 (* ?x3820 l_0_6_39)))
 (let ((?x3817 (* 12.0 l_0_6_26)))
 (let ((?x6464 (* ?x3817 l_0_6_38)))
 (let ((?x3814 (* 12.0 l_0_6_25)))
 (let ((?x6462 (* ?x3814 l_0_6_37)))
 (let ((?x4274 (* 12.0 l_0_6_18)))
 (let ((?x6460 (* ?x4274 l_0_6_6)))
 (let ((?x4271 (* 12.0 l_0_6_17)))
 (let ((?x6458 (* ?x4271 l_0_6_5)))
 (let ((?x4268 (* 12.0 l_0_6_16)))
 (let ((?x6456 (* ?x4268 l_0_6_4)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6014 (* ?x3712 l_0_6_131)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6012 (* ?x3702 l_0_6_130)))
 (let ((?x7401 (- (- (+ ?x6012 ?x6014) (* (* 2.0 l_0_6_151) l_0_6_163)) (* (* 2.0 l_0_6_152) l_0_6_164))))
 (let ((?x7406 (+ (+ (+ (- ?x7401 (* (* 2.0 l_0_6_153) l_0_6_165)) ?x6456) ?x6458) ?x6460)))
 (let ((?x7415 (- (- (+ (+ (- (- (- ?x7406 ?x6462) ?x6464) ?x6466) ?x7181) ?x7183) ?x7412) ?x7414)))
 (= (+ (+ (+ (- (- (- ?x7415 ?x7416) ?x7185) ?x7187) ?x7420) ?x7422) ?x7424) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x7532 (* ?x4740 l_0_6_96)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x7530 (* ?x4737 l_0_6_95)))
 (let ((?x6585 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6582 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6579 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6576 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6573 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x7498 (* l_0_6_162 l_0_6_162)))
 (let ((?x7496 (* l_0_6_161 l_0_6_161)))
 (let ((?x7494 (* l_0_6_160 l_0_6_160)))
 (let ((?x7492 (* l_0_6_159 l_0_6_159)))
 (let ((?x7490 (* l_0_6_158 l_0_6_158)))
 (let ((?x5403 (* l_0_6_15 l_0_6_15)))
 (let ((?x6570 (* 6.0 ?x5403)))
 (let ((?x5401 (* l_0_6_14 l_0_6_14)))
 (let ((?x6564 (* 6.0 ?x5401)))
 (let ((?x5399 (* l_0_6_13 l_0_6_13)))
 (let ((?x6556 (* 6.0 ?x5399)))
 (let ((?x5397 (* l_0_6_12 l_0_6_12)))
 (let ((?x6554 (* 6.0 ?x5397)))
 (let ((?x5429 (* l_0_6_11 l_0_6_11)))
 (let ((?x6552 (* 6.0 ?x5429)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7483 (* ?x4681 l_0_6_117)))
 (let ((?x7487 (+ (+ (+ (+ (* (* 2.0 l_0_6_107) l_0_6_116) ?x7483) ?x6552) ?x6554) ?x6556)))
 (let ((?x7499 (- (- (- (- (- (+ (+ ?x7487 ?x6564) ?x6570) ?x7490) ?x7492) ?x7494) ?x7496) ?x7498)))
 (let ((?x7507 (- (- (- (- (- (- ?x7499 ?x6573) ?x6576) ?x6579) ?x6582) ?x6585) (* (* 1.0 l_0_6_53) l_0_6_53))))
 (let ((?x7513 (- (- ?x7507 (* (* 1.0 l_0_6_54) l_0_6_54)) (* (* 1.0 l_0_6_55) l_0_6_55))))
 (let ((?x7519 (- (- ?x7513 (* (* 1.0 l_0_6_56) l_0_6_56)) (* (* 1.0 l_0_6_57) l_0_6_57))))
 (let ((?x7523 (+ (+ ?x7519 (* 1.0 (* l_0_6_74 l_0_6_74))) (* 1.0 (* l_0_6_75 l_0_6_75)))))
 (let ((?x7527 (+ (+ ?x7523 (* 1.0 (* l_0_6_76 l_0_6_76))) (* 1.0 (* l_0_6_77 l_0_6_77)))))
 (= (- (- (+ ?x7527 (* 1.0 (* l_0_6_78 l_0_6_78))) ?x7530) ?x7532) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x7656 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x7653 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x7650 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x7647 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x7644 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x7641 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x7638 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x7635 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x7632 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x7629 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x6747 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x6744 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x6741 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x6738 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x6735 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x6732 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x6723 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x4083 (* 12.0 l_0_6_13)))
 (let ((?x6711 (* ?x4083 l_0_6_18)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6096 (* ?x3712 l_0_6_138)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6094 (* ?x3702 l_0_6_137)))
 (let ((?x4080 (* 12.0 l_0_6_12)))
 (let ((?x6708 (* ?x4080 l_0_6_17)))
 (let ((?x4077 (* 12.0 l_0_6_11)))
 (let ((?x6706 (* ?x4077 l_0_6_16)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7599 (* ?x4681 l_0_6_122)))
 (let ((?x4670 (* 2.0 l_0_6_107)))
 (let ((?x7597 (* ?x4670 l_0_6_121)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x7595 (* ?x5490 l_0_6_87)))
 (let ((?x7601 (+ (+ (+ (- (* (* (- 2.0) l_0_6_100) l_0_6_86) ?x7595) ?x7597) ?x7599) ?x6706)))
 (let ((?x7610 (- (+ (+ (+ (+ (+ (+ ?x7601 ?x6708) ?x6094) ?x6096) ?x6711) ?x6723) ?x6732) (* (* 2.0 l_0_6_158) l_0_6_163))))
 (let ((?x7616 (- (- ?x7610 (* (* 2.0 l_0_6_159) l_0_6_164)) (* (* 2.0 l_0_6_160) l_0_6_165))))
 (let ((?x7622 (- (- ?x7616 (* (* 2.0 l_0_6_161) l_0_6_166)) (* (* 2.0 l_0_6_162) l_0_6_167))))
 (let ((?x7633 (- (- (- (- (- (- (- ?x7622 ?x6735) ?x6738) ?x6741) ?x6744) ?x6747) ?x7629) ?x7632)))
 (let ((?x7654 (+ (+ (+ (+ (- (- (- ?x7633 ?x7635) ?x7638) ?x7641) ?x7644) ?x7647) ?x7650) ?x7653)))
 (= (+ ?x7654 ?x7656) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6929 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x6926 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x6923 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x6920 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x6917 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x6914 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x5624 (* l_0_6_21 l_0_6_21)))
 (let ((?x6911 (* 6.0 ?x5624)))
 (let ((?x5622 (* l_0_6_20 l_0_6_20)))
 (let ((?x6909 (* 6.0 ?x5622)))
 (let ((?x5620 (* l_0_6_19 l_0_6_19)))
 (let ((?x6907 (* 6.0 ?x5620)))
 (let ((?x5618 (* l_0_6_18 l_0_6_18)))
 (let ((?x6905 (* 6.0 ?x5618)))
 (let ((?x5616 (* l_0_6_17 l_0_6_17)))
 (let ((?x6903 (* 6.0 ?x5616)))
 (let ((?x7756 (* l_0_6_168 l_0_6_168)))
 (let ((?x7754 (* l_0_6_167 l_0_6_167)))
 (let ((?x7752 (* l_0_6_166 l_0_6_166)))
 (let ((?x7750 (* l_0_6_165 l_0_6_165)))
 (let ((?x7748 (* l_0_6_164 l_0_6_164)))
 (let ((?x7746 (* l_0_6_163 l_0_6_163)))
 (let ((?x5614 (* l_0_6_16 l_0_6_16)))
 (let ((?x6901 (* 6.0 ?x5614)))
 (let ((?x3712 (* 2.0 l_0_6_129)))
 (let ((?x6172 (* ?x3712 l_0_6_143)))
 (let ((?x3702 (* 2.0 l_0_6_128)))
 (let ((?x6170 (* ?x3702 l_0_6_142)))
 (let ((?x7755 (- (- (- (- (- (+ (+ ?x6170 ?x6172) ?x6901) ?x7746) ?x7748) ?x7750) ?x7752) ?x7754)))
 (let ((?x7763 (- (+ (+ (+ (+ (+ (- ?x7755 ?x7756) ?x6903) ?x6905) ?x6907) ?x6909) ?x6911) ?x6914)))
 (let ((?x7771 (- (- (- (- (- (- ?x7763 ?x6917) ?x6920) ?x6923) ?x6926) ?x6929) (* (* 1.0 l_0_6_58) l_0_6_58))))
 (let ((?x7777 (- (- ?x7771 (* (* 1.0 l_0_6_59) l_0_6_59)) (* (* 1.0 l_0_6_60) l_0_6_60))))
 (let ((?x7783 (- (- ?x7777 (* (* 1.0 l_0_6_61) l_0_6_61)) (* (* 1.0 l_0_6_62) l_0_6_62))))
 (let ((?x7788 (+ (- ?x7783 (* (* 1.0 l_0_6_63) l_0_6_63)) (* 1.0 (* l_0_6_79 l_0_6_79)))))
 (let ((?x7792 (+ (+ ?x7788 (* 1.0 (* l_0_6_80 l_0_6_80))) (* 1.0 (* l_0_6_81 l_0_6_81)))))
 (let ((?x7796 (+ (+ ?x7792 (* 1.0 (* l_0_6_82 l_0_6_82))) (* 1.0 (* l_0_6_83 l_0_6_83)))))
 (= (+ ?x7796 (* 1.0 (* l_0_6_84 l_0_6_84))) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6113 (* ?x4136 l_0_6_86)))
 (let ((?x5677 (* l_0_6_64 l_0_6_64)))
 (let ((?x5678 (* 3.0 ?x5677)))
 (let ((?x5673 (* (* 3.0 l_0_6_43) l_0_6_43)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_107) ?x5673) ?x5678) ?x6113) 0.0)))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x7324 (* ?x4740 l_0_6_89)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x7322 (* ?x4737 l_0_6_88)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5788 (* ?x3648 l_0_6_67)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5781 (* ?x3639 l_0_6_46)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7291 (* ?x4681 l_0_6_110)))
 (let ((?x7868 (+ (+ (- (- (* (* (- 2.0) l_0_6_107) l_0_6_109) ?x7291) ?x5781) ?x5788) ?x7322)))
 (= (+ ?x7868 ?x7324) 0.0)))))))))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x4741 (* ?x4740 l_0_6_92)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x4738 (* ?x4737 l_0_6_91)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x3649 (* ?x3648 l_0_6_70)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x3640 (* ?x3639 l_0_6_49)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x4682 (* ?x4681 l_0_6_113)))
 (let ((?x7885 (+ (+ (- (- (* (* (- 2.0) l_0_6_107) l_0_6_112) ?x4682) ?x3640) ?x3649) ?x4738)))
 (= (+ ?x7885 ?x4741) 0.0)))))))))))))
(assert
 (let ((?x4740 (* 2.0 l_0_6_87)))
 (let ((?x7532 (* ?x4740 l_0_6_96)))
 (let ((?x4737 (* 2.0 l_0_6_86)))
 (let ((?x7530 (* ?x4737 l_0_6_95)))
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5852 (* ?x3648 l_0_6_74)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5846 (* ?x3639 l_0_6_53)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7483 (* ?x4681 l_0_6_117)))
 (let ((?x7902 (+ (+ (- (- (* (* (- 2.0) l_0_6_107) l_0_6_116) ?x7483) ?x5846) ?x5852) ?x7530)))
 (= (+ ?x7902 ?x7532) 0.0)))))))))))))
(assert
 (let ((?x3648 (* 6.0 l_0_6_64)))
 (let ((?x5915 (* ?x3648 l_0_6_79)))
 (let ((?x3639 (* 6.0 l_0_6_43)))
 (let ((?x5909 (* ?x3639 l_0_6_58)))
 (let ((?x4681 (* 2.0 l_0_6_108)))
 (let ((?x7599 (* ?x4681 l_0_6_122)))
 (let ((?x4670 (* 2.0 l_0_6_107)))
 (let ((?x7597 (* ?x4670 l_0_6_121)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x7595 (* ?x5490 l_0_6_87)))
 (let ((?x7920 (- (- (- (+ (* (* 2.0 l_0_6_100) l_0_6_86) ?x7595) ?x7597) ?x7599) ?x5909)))
 (= (+ ?x7920 ?x5915) 0.0)))))))))))))
(assert
 (let ((?x6278 (* l_0_6_69 l_0_6_69)))
 (let ((?x6279 (* 3.0 ?x6278)))
 (let ((?x6275 (* l_0_6_68 l_0_6_68)))
 (let ((?x6276 (* 3.0 ?x6275)))
 (let ((?x6272 (* l_0_6_67 l_0_6_67)))
 (let ((?x6273 (* 3.0 ?x6272)))
 (let ((?x6265 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x6262 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x7943 (+ (+ (- (- (* (* (- 3.0) l_0_6_46) l_0_6_46) ?x6262) ?x6265) ?x6273) ?x6276)))
 (= (+ ?x7943 ?x6279) 0.0)))))))))))
(assert
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x3850 (* ?x3849 l_0_6_72)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x3847 (* ?x3846 l_0_6_71)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x3844 (* ?x3843 l_0_6_70)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x3834 (* ?x3833 l_0_6_51)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x3831 (* ?x3830 l_0_6_50)))
 (let ((?x7957 (+ (+ (- (- (* (* (- 6.0) l_0_6_46) l_0_6_49) ?x3831) ?x3834) ?x3844) ?x3847)))
 (= (+ ?x7957 ?x3850) 0.0)))))))))))))
(assert
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x6369 (* ?x3849 l_0_6_76)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x6367 (* ?x3846 l_0_6_75)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x6365 (* ?x3843 l_0_6_74)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x6362 (* ?x3833 l_0_6_55)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x6360 (* ?x3830 l_0_6_54)))
 (let ((?x7973 (+ (+ (- (- (* (* (- 6.0) l_0_6_46) l_0_6_53) ?x6360) ?x6362) ?x6365) ?x6367)))
 (= (+ ?x7973 ?x6369) 0.0)))))))))))))
(assert
 (let ((?x3849 (* 6.0 l_0_6_69)))
 (let ((?x6480 (* ?x3849 l_0_6_81)))
 (let ((?x3846 (* 6.0 l_0_6_68)))
 (let ((?x6478 (* ?x3846 l_0_6_80)))
 (let ((?x3843 (* 6.0 l_0_6_67)))
 (let ((?x6476 (* ?x3843 l_0_6_79)))
 (let ((?x3833 (* 6.0 l_0_6_48)))
 (let ((?x6473 (* ?x3833 l_0_6_60)))
 (let ((?x3830 (* 6.0 l_0_6_47)))
 (let ((?x6471 (* ?x3830 l_0_6_59)))
 (let ((?x7989 (+ (+ (- (- (* (* (- 6.0) l_0_6_46) l_0_6_58) ?x6471) ?x6473) ?x6476) ?x6478)))
 (= (+ ?x7989 ?x6480) 0.0)))))))))))))
(assert
 (let ((?x3983 (* l_0_6_73 l_0_6_73)))
 (let ((?x3984 (* 3.0 ?x3983)))
 (let ((?x3980 (* l_0_6_72 l_0_6_72)))
 (let ((?x3981 (* 3.0 ?x3980)))
 (let ((?x3977 (* l_0_6_71 l_0_6_71)))
 (let ((?x3978 (* 3.0 ?x3977)))
 (let ((?x3974 (* l_0_6_70 l_0_6_70)))
 (let ((?x3975 (* 3.0 ?x3974)))
 (let ((?x3969 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x3966 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x3963 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x8006 (+ (- (- (- (* (* (- 3.0) l_0_6_49) l_0_6_49) ?x3963) ?x3966) ?x3969) ?x3975)))
 (= (+ (+ (+ ?x8006 ?x3978) ?x3981) ?x3984) 0.0))))))))))))))
(assert
 (let ((?x4133 (* 6.0 l_0_6_73)))
 (let ((?x4134 (* ?x4133 l_0_6_77)))
 (let ((?x4130 (* 6.0 l_0_6_72)))
 (let ((?x4131 (* ?x4130 l_0_6_76)))
 (let ((?x4127 (* 6.0 l_0_6_71)))
 (let ((?x4128 (* ?x4127 l_0_6_75)))
 (let ((?x4124 (* 6.0 l_0_6_70)))
 (let ((?x4125 (* ?x4124 l_0_6_74)))
 (let ((?x4121 (* 6.0 l_0_6_52)))
 (let ((?x4122 (* ?x4121 l_0_6_56)))
 (let ((?x4118 (* 6.0 l_0_6_51)))
 (let ((?x4119 (* ?x4118 l_0_6_55)))
 (let ((?x4115 (* 6.0 l_0_6_50)))
 (let ((?x4116 (* ?x4115 l_0_6_54)))
 (let ((?x8024 (+ (- (- (- (* (* (- 6.0) l_0_6_49) l_0_6_53) ?x4116) ?x4119) ?x4122) ?x4125)))
 (= (+ (+ (+ ?x8024 ?x4128) ?x4131) ?x4134) 0.0)))))))))))))))))
(assert
 (let ((?x4133 (* 6.0 l_0_6_73)))
 (let ((?x4301 (* ?x4133 l_0_6_82)))
 (let ((?x4130 (* 6.0 l_0_6_72)))
 (let ((?x4299 (* ?x4130 l_0_6_81)))
 (let ((?x4127 (* 6.0 l_0_6_71)))
 (let ((?x4297 (* ?x4127 l_0_6_80)))
 (let ((?x4124 (* 6.0 l_0_6_70)))
 (let ((?x4295 (* ?x4124 l_0_6_79)))
 (let ((?x4121 (* 6.0 l_0_6_52)))
 (let ((?x4293 (* ?x4121 l_0_6_61)))
 (let ((?x4118 (* 6.0 l_0_6_51)))
 (let ((?x4291 (* ?x4118 l_0_6_60)))
 (let ((?x4115 (* 6.0 l_0_6_50)))
 (let ((?x4289 (* ?x4115 l_0_6_59)))
 (let ((?x8041 (+ (- (- (- (* (* (- 6.0) l_0_6_49) l_0_6_58) ?x4289) ?x4291) ?x4293) ?x4295)))
 (= (+ (+ (+ ?x8041 ?x4297) ?x4299) ?x4301) 0.0)))))))))))))))))
(assert
 (let ((?x6614 (* l_0_6_78 l_0_6_78)))
 (let ((?x6615 (* 3.0 ?x6614)))
 (let ((?x6611 (* l_0_6_77 l_0_6_77)))
 (let ((?x6612 (* 3.0 ?x6611)))
 (let ((?x6608 (* l_0_6_76 l_0_6_76)))
 (let ((?x6609 (* 3.0 ?x6608)))
 (let ((?x6605 (* l_0_6_75 l_0_6_75)))
 (let ((?x6606 (* 3.0 ?x6605)))
 (let ((?x6602 (* l_0_6_74 l_0_6_74)))
 (let ((?x6603 (* 3.0 ?x6602)))
 (let ((?x6600 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x6597 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x6594 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x6591 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x8063 (- (- (- (- (* (* (- 3.0) l_0_6_53) l_0_6_53) ?x6591) ?x6594) ?x6597) ?x6600)))
 (= (+ (+ (+ (+ (+ ?x8063 ?x6603) ?x6606) ?x6609) ?x6612) ?x6615) 0.0)))))))))))))))))
(assert
 (let ((?x6777 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x6774 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x6771 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x6768 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x6765 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x6762 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x6759 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x6756 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x6753 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x8085 (- (- (- (- (* (* (- 6.0) l_0_6_53) l_0_6_58) ?x6753) ?x6756) ?x6759) ?x6762)))
 (= (+ (+ (+ (+ (+ ?x8085 ?x6765) ?x6768) ?x6771) ?x6774) ?x6777) 0.0))))))))))))
(assert
 (let ((?x6964 (* l_0_6_84 l_0_6_84)))
 (let ((?x6965 (* 3.0 ?x6964)))
 (let ((?x6961 (* l_0_6_83 l_0_6_83)))
 (let ((?x6962 (* 3.0 ?x6961)))
 (let ((?x6958 (* l_0_6_82 l_0_6_82)))
 (let ((?x6959 (* 3.0 ?x6958)))
 (let ((?x6955 (* l_0_6_81 l_0_6_81)))
 (let ((?x6956 (* 3.0 ?x6955)))
 (let ((?x6952 (* l_0_6_80 l_0_6_80)))
 (let ((?x6953 (* 3.0 ?x6952)))
 (let ((?x6949 (* l_0_6_79 l_0_6_79)))
 (let ((?x6950 (* 3.0 ?x6949)))
 (let ((?x6947 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x6944 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x6941 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x6938 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x6935 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x8112 (- (- (- (- (* (* (- 3.0) l_0_6_58) l_0_6_58) ?x6935) ?x6938) ?x6941) ?x6944)))
 (let ((?x8119 (+ (+ (+ (+ (+ (+ (- ?x8112 ?x6947) ?x6950) ?x6953) ?x6956) ?x6959) ?x6962) ?x6965)))
 (= ?x8119 0.0)))))))))))))))))))))
(assert
 (let ((?x6278 (* l_0_6_69 l_0_6_69)))
 (let ((?x6275 (* l_0_6_68 l_0_6_68)))
 (let ((?x6272 (* l_0_6_67 l_0_6_67)))
 (let ((?x6319 (* l_0_6_48 l_0_6_48)))
 (let ((?x8135 (- (+ (+ (* l_0_6_46 l_0_6_46) (* l_0_6_47 l_0_6_47)) ?x6319) ?x6272)))
 (= (- (- ?x8135 ?x6275) ?x6278) 0.0)))))))
(assert
 (let ((?x8163 (* l_0_6_90 l_0_6_90)))
 (let ((?x8161 (* l_0_6_89 l_0_6_89)))
 (let ((?x8159 (* l_0_6_88 l_0_6_88)))
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x7320 (* ?x4511 l_0_6_76)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x7318 (* ?x4508 l_0_6_75)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x7316 (* ?x4505 l_0_6_74)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x7312 (* ?x4498 l_0_6_55)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x7310 (* ?x4495 l_0_6_54)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x7308 (* ?x4492 l_0_6_53)))
 (let ((?x8151 (* l_0_6_111 l_0_6_111)))
 (let ((?x8153 (+ (+ (+ (* l_0_6_109 l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x8151) ?x7308)))
 (let ((?x8162 (- (- (- (- (- (+ (+ ?x8153 ?x7310) ?x7312) ?x7316) ?x7318) ?x7320) ?x8159) ?x8161)))
 (= (- ?x8162 ?x8163) 0.0))))))))))))))))))))
(assert
 (let ((?x4511 (* 2.0 l_0_6_69)))
 (let ((?x7424 (* ?x4511 l_0_6_81)))
 (let ((?x4508 (* 2.0 l_0_6_68)))
 (let ((?x7422 (* ?x4508 l_0_6_80)))
 (let ((?x4505 (* 2.0 l_0_6_67)))
 (let ((?x7420 (* ?x4505 l_0_6_79)))
 (let ((?x4498 (* 2.0 l_0_6_48)))
 (let ((?x7416 (* ?x4498 l_0_6_60)))
 (let ((?x4495 (* 2.0 l_0_6_47)))
 (let ((?x7414 (* ?x4495 l_0_6_59)))
 (let ((?x4492 (* 2.0 l_0_6_46)))
 (let ((?x7412 (* ?x4492 l_0_6_58)))
 (let ((?x6244 (* l_0_6_132 l_0_6_132)))
 (let ((?x8191 (+ (+ (+ (* l_0_6_130 l_0_6_130) (* l_0_6_131 l_0_6_131)) ?x6244) ?x7412)))
 (= (- (- (- (+ (+ ?x8191 ?x7414) ?x7416) ?x7420) ?x7422) ?x7424) 0.0))))))))))))))))
(assert
 (let ((?x5092 (* 2.0 l_0_6_90)))
 (let ((?x8231 (* ?x5092 l_0_6_97)))
 (let ((?x5089 (* 2.0 l_0_6_89)))
 (let ((?x8229 (* ?x5089 l_0_6_96)))
 (let ((?x5086 (* 2.0 l_0_6_88)))
 (let ((?x8227 (* ?x5086 l_0_6_95)))
 (let ((?x6614 (* l_0_6_78 l_0_6_78)))
 (let ((?x6611 (* l_0_6_77 l_0_6_77)))
 (let ((?x6608 (* l_0_6_76 l_0_6_76)))
 (let ((?x6605 (* l_0_6_75 l_0_6_75)))
 (let ((?x6602 (* l_0_6_74 l_0_6_74)))
 (let ((?x6689 (* l_0_6_57 l_0_6_57)))
 (let ((?x6683 (* l_0_6_56 l_0_6_56)))
 (let ((?x6677 (* l_0_6_55 l_0_6_55)))
 (let ((?x6671 (* l_0_6_54 l_0_6_54)))
 (let ((?x6665 (* l_0_6_53 l_0_6_53)))
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x8215 (* ?x5064 l_0_6_118)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x8213 (* ?x5061 l_0_6_117)))
 (let ((?x8218 (+ (+ (+ (+ (* (* 2.0 l_0_6_109) l_0_6_116) ?x8213) ?x8215) ?x6665) ?x6671)))
 (let ((?x8225 (- (- (- (- (+ (+ (+ ?x8218 ?x6677) ?x6683) ?x6689) ?x6602) ?x6605) ?x6608) ?x6611)))
 (= (- (- (- (- ?x8225 ?x6614) ?x8227) ?x8229) ?x8231) 0.0))))))))))))))))))))))))
(assert
 (let ((?x7656 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x7653 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x7650 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x7647 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x7644 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x7641 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x7638 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x7635 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x7632 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x7629 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x6349 (* ?x3809 l_0_6_139)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x6347 (* ?x3806 l_0_6_138)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x6345 (* ?x3803 l_0_6_137)))
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x8288 (* ?x5064 l_0_6_123)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x8286 (* ?x5061 l_0_6_122)))
 (let ((?x5057 (* 2.0 l_0_6_109)))
 (let ((?x8284 (* ?x5057 l_0_6_121)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x8282 (* ?x5493 l_0_6_90)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x8280 (* ?x5490 l_0_6_89)))
 (let ((?x8287 (+ (+ (- (- (* (* (- 2.0) l_0_6_100) l_0_6_88) ?x8280) ?x8282) ?x8284) ?x8286)))
 (let ((?x8295 (+ (+ (+ (+ (+ (+ (+ ?x8287 ?x8288) ?x6345) ?x6347) ?x6349) ?x7629) ?x7632) ?x7635)))
 (let ((?x8302 (- (- (- (- (- (+ (+ ?x8295 ?x7638) ?x7641) ?x7644) ?x7647) ?x7650) ?x7653) ?x7656)))
 (= ?x8302 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x6964 (* l_0_6_84 l_0_6_84)))
 (let ((?x6961 (* l_0_6_83 l_0_6_83)))
 (let ((?x6958 (* l_0_6_82 l_0_6_82)))
 (let ((?x6955 (* l_0_6_81 l_0_6_81)))
 (let ((?x6952 (* l_0_6_80 l_0_6_80)))
 (let ((?x6949 (* l_0_6_79 l_0_6_79)))
 (let ((?x7046 (* l_0_6_63 l_0_6_63)))
 (let ((?x7040 (* l_0_6_62 l_0_6_62)))
 (let ((?x7034 (* l_0_6_61 l_0_6_61)))
 (let ((?x7028 (* l_0_6_60 l_0_6_60)))
 (let ((?x7022 (* l_0_6_59 l_0_6_59)))
 (let ((?x7016 (* l_0_6_58 l_0_6_58)))
 (let ((?x3809 (* 2.0 l_0_6_132)))
 (let ((?x6454 (* ?x3809 l_0_6_144)))
 (let ((?x3806 (* 2.0 l_0_6_131)))
 (let ((?x6452 (* ?x3806 l_0_6_143)))
 (let ((?x3803 (* 2.0 l_0_6_130)))
 (let ((?x6450 (* ?x3803 l_0_6_142)))
 (let ((?x8352 (+ (+ (+ (+ (+ (+ (+ ?x6450 ?x6452) ?x6454) ?x7016) ?x7022) ?x7028) ?x7034) ?x7040)))
 (let ((?x8359 (- (- (- (- (- (- (+ ?x8352 ?x7046) ?x6949) ?x6952) ?x6955) ?x6958) ?x6961) ?x6964)))
 (= ?x8359 0.0))))))))))))))))))))))
(assert
 (let ((?x8398 (* l_0_6_99 l_0_6_99)))
 (let ((?x8396 (* l_0_6_98 l_0_6_98)))
 (let ((?x8394 (* l_0_6_97 l_0_6_97)))
 (let ((?x8392 (* l_0_6_96 l_0_6_96)))
 (let ((?x8390 (* l_0_6_95 l_0_6_95)))
 (let ((?x8388 (* l_0_6_120 l_0_6_120)))
 (let ((?x8386 (* l_0_6_119 l_0_6_119)))
 (let ((?x8384 (* l_0_6_118 l_0_6_118)))
 (let ((?x8387 (+ (+ (+ (* l_0_6_116 l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8384) ?x8386)))
 (= (- (- (- (- (- (+ ?x8387 ?x8388) ?x8390) ?x8392) ?x8394) ?x8396) ?x8398) 0.0)))))))))))
(assert
 (let ((?x6568 (* l_0_6_141 l_0_6_141)))
 (let ((?x6566 (* l_0_6_140 l_0_6_140)))
 (let ((?x6562 (* l_0_6_139 l_0_6_139)))
 (let ((?x6560 (* l_0_6_138 l_0_6_138)))
 (let ((?x6558 (* l_0_6_137 l_0_6_137)))
 (let ((?x8441 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x8438 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x8435 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x8432 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x8429 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x8426 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x5496 (* 2.0 l_0_6_103)))
 (let ((?x8423 (* ?x5496 l_0_6_98)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x8421 (* ?x5493 l_0_6_97)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x8419 (* ?x5490 l_0_6_96)))
 (let ((?x8427 (- (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_95) ?x8419) ?x8421) ?x8423) ?x8426)))
 (let ((?x8444 (+ (+ (+ (+ (+ (+ (+ ?x8427 ?x8429) ?x8432) ?x8435) ?x8438) ?x8441) ?x6558) ?x6560)))
 (= (+ (+ (+ ?x8444 ?x6562) ?x6566) ?x6568) 0.0)))))))))))))))))))))
(assert
 (let ((?x6729 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6726 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x6720 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6717 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6714 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x8509 (* l_0_6_126 l_0_6_126)))
 (let ((?x8507 (* l_0_6_125 l_0_6_125)))
 (let ((?x8505 (* l_0_6_124 l_0_6_124)))
 (let ((?x8503 (* l_0_6_123 l_0_6_123)))
 (let ((?x8501 (* l_0_6_122 l_0_6_122)))
 (let ((?x8499 (* l_0_6_121 l_0_6_121)))
 (let ((?x8497 (* l_0_6_105 l_0_6_105)))
 (let ((?x8495 (* l_0_6_104 l_0_6_104)))
 (let ((?x8493 (* l_0_6_103 l_0_6_103)))
 (let ((?x8491 (* l_0_6_102 l_0_6_102)))
 (let ((?x8492 (- (- (* (- l_0_6_100) l_0_6_100) (* l_0_6_101 l_0_6_101)) ?x8491)))
 (let ((?x8506 (+ (+ (+ (+ (- (- (- ?x8492 ?x8493) ?x8495) ?x8497) ?x8499) ?x8501) ?x8503) ?x8505)))
 (let ((?x8515 (+ (+ (+ (+ (+ (+ (+ ?x8506 ?x8507) ?x8509) ?x6714) ?x6717) ?x6720) ?x6726) ?x6729)))
 (= ?x8515 0.0))))))))))))))))))))
(assert
 (= (+ (* (- l_0_6_106) l_0_6_106) (* l_0_6_85 l_0_6_85)) 0.0))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6371 (* ?x4136 l_0_6_88)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_109) ?x6371) 0.0))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x4137 (* ?x4136 l_0_6_91)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x4137) 0.0))))
(assert
 (let ((?x4136 (* 2.0 l_0_6_85)))
 (let ((?x6617 (* ?x4136 l_0_6_95)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_116) ?x6617) 0.0))))
(assert
 (let ((?x4074 (* 2.0 l_0_6_106)))
 (let ((?x6704 (* ?x4074 l_0_6_121)))
 (= (- (* (* 2.0 l_0_6_100) l_0_6_85) ?x6704) 0.0))))
(assert
 (let ((?x8163 (* l_0_6_90 l_0_6_90)))
 (let ((?x8161 (* l_0_6_89 l_0_6_89)))
 (let ((?x8159 (* l_0_6_88 l_0_6_88)))
 (let ((?x8151 (* l_0_6_111 l_0_6_111)))
 (let ((?x8571 (- (- (* (- l_0_6_109) l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x8151)))
 (= (+ (+ (+ ?x8571 ?x8159) ?x8161) ?x8163) 0.0)))))))
(assert
 (let ((?x5092 (* 2.0 l_0_6_90)))
 (let ((?x5093 (* ?x5092 l_0_6_93)))
 (let ((?x5089 (* 2.0 l_0_6_89)))
 (let ((?x5090 (* ?x5089 l_0_6_92)))
 (let ((?x5086 (* 2.0 l_0_6_88)))
 (let ((?x5087 (* ?x5086 l_0_6_91)))
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x5065 (* ?x5064 l_0_6_114)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x5062 (* ?x5061 l_0_6_113)))
 (let ((?x8590 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_112) ?x5062) ?x5065) ?x5087) ?x5090)))
 (= (+ ?x8590 ?x5093) 0.0)))))))))))))
(assert
 (let ((?x5092 (* 2.0 l_0_6_90)))
 (let ((?x8231 (* ?x5092 l_0_6_97)))
 (let ((?x5089 (* 2.0 l_0_6_89)))
 (let ((?x8229 (* ?x5089 l_0_6_96)))
 (let ((?x5086 (* 2.0 l_0_6_88)))
 (let ((?x8227 (* ?x5086 l_0_6_95)))
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x8215 (* ?x5064 l_0_6_118)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x8213 (* ?x5061 l_0_6_117)))
 (let ((?x8608 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_116) ?x8213) ?x8215) ?x8227) ?x8229)))
 (= (+ ?x8608 ?x8231) 0.0)))))))))))))
(assert
 (let ((?x5064 (* 2.0 l_0_6_111)))
 (let ((?x8288 (* ?x5064 l_0_6_123)))
 (let ((?x5061 (* 2.0 l_0_6_110)))
 (let ((?x8286 (* ?x5061 l_0_6_122)))
 (let ((?x5057 (* 2.0 l_0_6_109)))
 (let ((?x8284 (* ?x5057 l_0_6_121)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x8282 (* ?x5493 l_0_6_90)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x8280 (* ?x5490 l_0_6_89)))
 (let ((?x8623 (- (- (+ (+ (* (* 2.0 l_0_6_100) l_0_6_88) ?x8280) ?x8282) ?x8284) ?x8286)))
 (= (- ?x8623 ?x8288) 0.0)))))))))))))
(assert
 (let ((?x5292 (* l_0_6_94 l_0_6_94)))
 (let ((?x5290 (* l_0_6_93 l_0_6_93)))
 (let ((?x5288 (* l_0_6_92 l_0_6_92)))
 (let ((?x5286 (* l_0_6_91 l_0_6_91)))
 (let ((?x5268 (* l_0_6_115 l_0_6_115)))
 (let ((?x5266 (* l_0_6_114 l_0_6_114)))
 (let ((?x8644 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x5266)))
 (= (+ (+ (+ (+ (- ?x8644 ?x5268) ?x5286) ?x5288) ?x5290) ?x5292) 0.0)))))))))
(assert
 (let ((?x5425 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x5422 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x5419 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x5416 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x5394 (* 2.0 l_0_6_115)))
 (let ((?x5395 (* ?x5394 l_0_6_119)))
 (let ((?x5391 (* 2.0 l_0_6_114)))
 (let ((?x5392 (* ?x5391 l_0_6_118)))
 (let ((?x5388 (* 2.0 l_0_6_113)))
 (let ((?x5389 (* ?x5388 l_0_6_117)))
 (let ((?x8664 (+ (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_116) ?x5389) ?x5392) ?x5395) ?x5416)))
 (= (+ (+ (+ ?x8664 ?x5419) ?x5422) ?x5425) 0.0)))))))))))))
(assert
 (let ((?x5394 (* 2.0 l_0_6_115)))
 (let ((?x5507 (* ?x5394 l_0_6_124)))
 (let ((?x5391 (* 2.0 l_0_6_114)))
 (let ((?x5505 (* ?x5391 l_0_6_123)))
 (let ((?x5388 (* 2.0 l_0_6_113)))
 (let ((?x5503 (* ?x5388 l_0_6_122)))
 (let ((?x5385 (* 2.0 l_0_6_112)))
 (let ((?x5501 (* ?x5385 l_0_6_121)))
 (let ((?x5496 (* 2.0 l_0_6_103)))
 (let ((?x5497 (* ?x5496 l_0_6_94)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x5494 (* ?x5493 l_0_6_93)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x5491 (* ?x5490 l_0_6_92)))
 (let ((?x8684 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_91) ?x5491) ?x5494) ?x5497) ?x5501)))
 (= (- (- (- ?x8684 ?x5503) ?x5505) ?x5507) 0.0)))))))))))))))))
(assert
 (let ((?x8398 (* l_0_6_99 l_0_6_99)))
 (let ((?x8396 (* l_0_6_98 l_0_6_98)))
 (let ((?x8394 (* l_0_6_97 l_0_6_97)))
 (let ((?x8392 (* l_0_6_96 l_0_6_96)))
 (let ((?x8390 (* l_0_6_95 l_0_6_95)))
 (let ((?x8388 (* l_0_6_120 l_0_6_120)))
 (let ((?x8386 (* l_0_6_119 l_0_6_119)))
 (let ((?x8384 (* l_0_6_118 l_0_6_118)))
 (let ((?x8711 (- (- (* (- l_0_6_116) l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8384)))
 (let ((?x8718 (+ (+ (+ (+ (+ (- (- ?x8711 ?x8386) ?x8388) ?x8390) ?x8392) ?x8394) ?x8396) ?x8398)))
 (= ?x8718 0.0))))))))))))
(assert
 (let ((?x8441 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x8438 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x8435 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x8432 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x8429 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x8426 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x5496 (* 2.0 l_0_6_103)))
 (let ((?x8423 (* ?x5496 l_0_6_98)))
 (let ((?x5493 (* 2.0 l_0_6_102)))
 (let ((?x8421 (* ?x5493 l_0_6_97)))
 (let ((?x5490 (* 2.0 l_0_6_101)))
 (let ((?x8419 (* ?x5490 l_0_6_96)))
 (let ((?x8737 (+ (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_95) ?x8419) ?x8421) ?x8423) ?x8426)))
 (= (- (- (- (- (- ?x8737 ?x8429) ?x8432) ?x8435) ?x8438) ?x8441) 0.0)))))))))))))))
(assert
 (let ((?x8509 (* l_0_6_126 l_0_6_126)))
 (let ((?x8507 (* l_0_6_125 l_0_6_125)))
 (let ((?x8505 (* l_0_6_124 l_0_6_124)))
 (let ((?x8503 (* l_0_6_123 l_0_6_123)))
 (let ((?x8501 (* l_0_6_122 l_0_6_122)))
 (let ((?x8499 (* l_0_6_121 l_0_6_121)))
 (let ((?x8497 (* l_0_6_105 l_0_6_105)))
 (let ((?x8495 (* l_0_6_104 l_0_6_104)))
 (let ((?x8493 (* l_0_6_103 l_0_6_103)))
 (let ((?x8491 (* l_0_6_102 l_0_6_102)))
 (let ((?x8769 (+ (+ (+ (* l_0_6_100 l_0_6_100) (* l_0_6_101 l_0_6_101)) ?x8491) ?x8493)))
 (let ((?x8776 (- (- (- (- (- (+ (+ ?x8769 ?x8495) ?x8497) ?x8499) ?x8501) ?x8503) ?x8505) ?x8507)))
 (= (- ?x8776 ?x8509) 0.0))))))))))))))
(assert
 (let ((?x6899 (* l_0_6_147 l_0_6_147)))
 (let ((?x6897 (* l_0_6_146 l_0_6_146)))
 (let ((?x6895 (* l_0_6_145 l_0_6_145)))
 (let ((?x6893 (* l_0_6_144 l_0_6_144)))
 (let ((?x8801 (+ (+ (+ (* l_0_6_142 l_0_6_142) (* l_0_6_143 l_0_6_143)) ?x6893) ?x6895)))
 (= (+ (+ ?x8801 ?x6897) ?x6899) 0.0)))))))
(assert
 (>= l_0_6_1 0.0))
(assert
 (>= l_0_6_3 0.0))
(assert
 (>= l_0_6_6 0.0))
(assert
 (>= l_0_6_10 0.0))
(assert
 (>= l_0_6_15 0.0))
(assert
 (>= l_0_6_21 0.0))
(assert
 (>= l_0_6_22 0.0))
(assert
 (>= l_0_6_24 0.0))
(assert
 (>= l_0_6_27 0.0))
(assert
 (>= l_0_6_31 0.0))
(assert
 (>= l_0_6_36 0.0))
(assert
 (>= l_0_6_42 0.0))
(assert
 (>= l_0_6_43 0.0))
(assert
 (>= l_0_6_45 0.0))
(assert
 (>= l_0_6_48 0.0))
(assert
 (>= l_0_6_52 0.0))
(assert
 (>= l_0_6_57 0.0))
(assert
 (>= l_0_6_63 0.0))
(assert
 (>= l_0_6_64 0.0))
(assert
 (>= l_0_6_66 0.0))
(assert
 (>= l_0_6_69 0.0))
(assert
 (>= l_0_6_73 0.0))
(assert
 (>= l_0_6_78 0.0))
(assert
 (>= l_0_6_84 0.0))
(assert
 (>= l_0_6_85 0.0))
(assert
 (>= l_0_6_87 0.0))
(assert
 (>= l_0_6_90 0.0))
(assert
 (>= l_0_6_94 0.0))
(assert
 (>= l_0_6_99 0.0))
(assert
 (>= l_0_6_105 0.0))
(assert
 (>= l_0_6_106 0.0))
(assert
 (>= l_0_6_108 0.0))
(assert
 (>= l_0_6_111 0.0))
(assert
 (>= l_0_6_115 0.0))
(assert
 (>= l_0_6_120 0.0))
(assert
 (>= l_0_6_126 0.0))
(assert
 (>= l_0_6_127 0.0))
(assert
 (>= l_0_6_129 0.0))
(assert
 (>= l_0_6_132 0.0))
(assert
 (>= l_0_6_136 0.0))
(assert
 (>= l_0_6_141 0.0))
(assert
 (>= l_0_6_147 0.0))
(assert
 (>= l_0_6_148 0.0))
(assert
 (>= l_0_6_150 0.0))
(assert
 (>= l_0_6_153 0.0))
(assert
 (>= l_0_6_157 0.0))
(assert
 (>= l_0_6_162 0.0))
(assert
 (>= l_0_6_168 0.0))
(assert
 (let ((?x8868 (* l_0_7_3 l_0_7_3)))
 (let ((?x8869 (* 6.0 ?x8868)))
 (let ((?x8866 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x8863 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x8859 (* l_0_7_2 l_0_7_2)))
 (let ((?x8860 (* 6.0 ?x8859)))
 (let ((?x8857 (* l_0_7_192 l_0_7_192)))
 (let ((?x8867 (- (- (+ (- (- _a_12_ (* l_0_7_191 l_0_7_191)) ?x8857) ?x8860) ?x8863) ?x8866)))
 (let ((?x8876 (- (- (+ ?x8867 ?x8869) (* (* 1.0 l_0_7_44) l_0_7_44)) (* (* 1.0 l_0_7_45) l_0_7_45))))
 (let ((?x8882 (+ (+ ?x8876 (* 1.0 (* l_0_7_65 l_0_7_65))) (* 1.0 (* l_0_7_66 l_0_7_66)))))
 (= (- ?x8882 12.0) 0.0))))))))))))
(assert
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x8949 (* ?x8948 l_0_7_71)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x8946 (* ?x8945 l_0_7_70)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x8943 (* ?x8942 l_0_7_50)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x8940 (* ?x8939 l_0_7_49)))
 (let ((?x8868 (* l_0_7_3 l_0_7_3)))
 (let ((?x8935 (* 12.0 l_0_7_3)))
 (let ((?x8936 (* ?x8935 l_0_7_8)))
 (let ((?x8897 (* l_0_7_24 l_0_7_24)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x8932 (* ?x8931 l_0_7_29)))
 (let ((?x8891 (* l_0_7_23 l_0_7_23)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x8928 (* ?x8927 l_0_7_28)))
 (let ((?x8859 (* l_0_7_2 l_0_7_2)))
 (let ((?x8923 (* 12.0 l_0_7_2)))
 (let ((?x8924 (* ?x8923 l_0_7_7)))
 (let ((?x8922 (- (- _a_13_ (* (* 2.0 l_0_7_191) l_0_7_196)) (* (* 2.0 l_0_7_192) l_0_7_197))))
 (let ((?x8937 (+ (+ (- (+ (- (- (+ ?x8922 ?x8924) ?x8859) ?x8928) ?x8891) ?x8932) ?x8897) ?x8936)))
 (= (+ (+ (- (- (- ?x8937 ?x8868) ?x8940) ?x8943) ?x8946) ?x8949) 0.0))))))))))))))))))))))))
(assert
 (let ((?x8880 (* l_0_7_66 l_0_7_66)))
 (let ((?x9037 (* 3.0 ?x8880)))
 (let ((?x8877 (* l_0_7_65 l_0_7_65)))
 (let ((?x9035 (* 3.0 ?x8877)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x9033 (* ?x9032 l_0_7_65)))
 (let ((?x9030 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (let ((?x9027 (* (* 3.0 l_0_7_44) l_0_7_44)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x9024 (* ?x9023 l_0_7_44)))
 (let ((?x8868 (* l_0_7_3 l_0_7_3)))
 (let ((?x8869 (* 6.0 ?x8868)))
 (let ((?x8866 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x8863 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x9018 (* ?x9017 l_0_7_23)))
 (let ((?x8859 (* l_0_7_2 l_0_7_2)))
 (let ((?x8860 (* 6.0 ?x8859)))
 (let ((?x9011 (* l_0_7_129 l_0_7_129)))
 (let ((?x9012 (+ (+ (* (* 12.0 l_0_7_1) l_0_7_2) (* l_0_7_128 l_0_7_128)) ?x9011)))
 (let ((?x9020 (- (- (+ (- ?x9012 (* (* 2.0 l_0_7_190) l_0_7_191)) ?x8860) ?x9018) ?x8863)))
 (let ((?x9036 (+ (+ (- (- (- (+ (- ?x9020 ?x8866) ?x8869) ?x9024) ?x9027) ?x9030) ?x9033) ?x9035)))
 (= (- (+ ?x9036 ?x9037) 6.0) 0.0))))))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x9111 (* ?x9110 l_0_7_71)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x9108 (* ?x9107 l_0_7_70)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x9105 (* ?x9104 l_0_7_70)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x9102 (* ?x9101 l_0_7_50)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x9099 (* ?x9098 l_0_7_49)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x9096 (* ?x9095 l_0_7_49)))
 (let ((?x9093 (* l_0_7_22 l_0_7_22)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x9091 (* ?x9017 l_0_7_28)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x9089 (* ?x9088 l_0_7_133)))
 (let ((?x9090 (+ (- (* (* 12.0 l_0_7_1) l_0_7_7) (* l_0_7_1 l_0_7_1)) ?x9089)))
 (let ((?x9109 (+ (+ (- (- (- (+ (- ?x9090 ?x9091) ?x9093) ?x9096) ?x9099) ?x9102) ?x9105) ?x9108)))
 (= (+ ?x9109 ?x9111) 0.0)))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x9111 (* ?x9110 l_0_7_71)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x9108 (* ?x9107 l_0_7_70)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x9177 (* ?x9032 l_0_7_70)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x9102 (* ?x9101 l_0_7_50)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x9099 (* ?x9098 l_0_7_49)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x9173 (* ?x9023 l_0_7_49)))
 (let ((?x8935 (* 12.0 l_0_7_3)))
 (let ((?x8936 (* ?x8935 l_0_7_8)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x8932 (* ?x8931 l_0_7_29)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x8928 (* ?x8927 l_0_7_28)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x9091 (* ?x9017 l_0_7_28)))
 (let ((?x8923 (* 12.0 l_0_7_2)))
 (let ((?x8924 (* ?x8923 l_0_7_7)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x9161 (* ?x9160 l_0_7_134)))
 (let ((?x9149 (* 2.0 l_0_7_128)))
 (let ((?x9158 (* ?x9149 l_0_7_133)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x9085 (* ?x9007 l_0_7_7)))
 (let ((?x9164 (- (+ (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_2) ?x9085) ?x9158) ?x9161) (* (* 2.0 l_0_7_190) l_0_7_196))))
 (let ((?x9170 (- (- (+ (+ ?x9164 ?x8924) (* (* 2.0 l_0_7_22) l_0_7_23)) ?x9091) ?x8928)))
 (let ((?x9179 (+ (+ (- (- (- (+ (- ?x9170 ?x8932) ?x8936) ?x9173) ?x9099) ?x9102) ?x9177) ?x9108)))
 (= (+ ?x9179 ?x9111) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x9265 (* ?x9264 l_0_7_72)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x9262 (* ?x9261 l_0_7_71)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x9259 (* ?x9258 l_0_7_70)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x9177 (* ?x9032 l_0_7_70)))
 (let ((?x9255 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x9252 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x9249 (* ?x9248 l_0_7_51)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x9246 (* ?x9245 l_0_7_50)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x9173 (* ?x9023 l_0_7_49)))
 (let ((?x9239 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x9236 (* ?x9235 l_0_7_30)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x9233 (* ?x9232 l_0_7_29)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x9230 (* ?x9229 l_0_7_28)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x9225 (* ?x9224 l_0_7_135)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x9222 (* ?x9221 l_0_7_134)))
 (let ((?x9220 (+ (* (* (- 2.0) l_0_7_1) l_0_7_4) (* (* 2.0 l_0_7_130) l_0_7_133))))
 (let ((?x9231 (- (+ (+ (+ ?x9220 ?x9222) ?x9225) (* (* 2.0 l_0_7_22) l_0_7_25)) ?x9230)))
 (let ((?x9244 (- (+ (+ (- (- ?x9231 ?x9233) ?x9236) ?x9239) ?x9173) (* (* 6.0 l_0_7_46) l_0_7_49))))
 (let ((?x9263 (+ (+ (- (+ (+ (- (- ?x9244 ?x9246) ?x9249) ?x9252) ?x9255) ?x9177) ?x9259) ?x9262)))
 (= (+ ?x9263 ?x9265) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x9391 (* l_0_7_9 l_0_7_9)))
 (let ((?x9392 (* 6.0 ?x9391)))
 (let ((?x9388 (* l_0_7_8 l_0_7_8)))
 (let ((?x9389 (* 6.0 ?x9388)))
 (let ((?x9385 (* l_0_7_73 l_0_7_73)))
 (let ((?x9386 (* 3.0 ?x9385)))
 (let ((?x9382 (* l_0_7_72 l_0_7_72)))
 (let ((?x9383 (* 3.0 ?x9382)))
 (let ((?x9379 (* l_0_7_71 l_0_7_71)))
 (let ((?x9380 (* 3.0 ?x9379)))
 (let ((?x9376 (* l_0_7_70 l_0_7_70)))
 (let ((?x9377 (* 3.0 ?x9376)))
 (let ((?x9373 (* l_0_7_7 l_0_7_7)))
 (let ((?x9374 (* 6.0 ?x9373)))
 (let ((?x9371 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x9368 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x9365 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x9359 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x9356 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x9353 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x9350 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x9345 (* l_0_7_136 l_0_7_136)))
 (let ((?x9343 (* l_0_7_135 l_0_7_135)))
 (let ((?x9341 (* l_0_7_134 l_0_7_134)))
 (let ((?x9339 (* l_0_7_133 l_0_7_133)))
 (let ((?x9336 (* l_0_7_10 l_0_7_10)))
 (let ((?x9337 (* 6.0 ?x9336)))
 (let ((?x9344 (+ (+ (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) ?x9337) ?x9339) ?x9341) ?x9343)))
 (let ((?x9354 (- (- (+ (+ ?x9344 ?x9345) (* (* 2.0 l_0_7_22) l_0_7_28)) ?x9350) ?x9353)))
 (let ((?x9366 (- (- (- (- ?x9354 ?x9356) ?x9359) (* (* 3.0 l_0_7_49) l_0_7_49)) ?x9365)))
 (let ((?x9387 (+ (+ (+ (+ (+ (- (- ?x9366 ?x9368) ?x9371) ?x9374) ?x9377) ?x9380) ?x9383) ?x9386)))
 (= (+ (+ ?x9387 ?x9389) ?x9392) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x9535 (* ?x9534 l_0_7_91)))
 (let ((?x9531 (* 6.0 l_0_7_73)))
 (let ((?x9532 (* ?x9531 l_0_7_77)))
 (let ((?x9528 (* 6.0 l_0_7_72)))
 (let ((?x9529 (* ?x9528 l_0_7_76)))
 (let ((?x9525 (* 6.0 l_0_7_71)))
 (let ((?x9526 (* ?x9525 l_0_7_75)))
 (let ((?x9522 (* 6.0 l_0_7_70)))
 (let ((?x9523 (* ?x9522 l_0_7_74)))
 (let ((?x9519 (* 6.0 l_0_7_52)))
 (let ((?x9520 (* ?x9519 l_0_7_56)))
 (let ((?x9516 (* 6.0 l_0_7_51)))
 (let ((?x9517 (* ?x9516 l_0_7_55)))
 (let ((?x9513 (* 6.0 l_0_7_50)))
 (let ((?x9514 (* ?x9513 l_0_7_54)))
 (let ((?x9507 (* 12.0 l_0_7_31)))
 (let ((?x9508 (* ?x9507 l_0_7_35)))
 (let ((?x9504 (* 12.0 l_0_7_30)))
 (let ((?x9505 (* ?x9504 l_0_7_34)))
 (let ((?x9501 (* 12.0 l_0_7_29)))
 (let ((?x9502 (* ?x9501 l_0_7_33)))
 (let ((?x9498 (* 12.0 l_0_7_28)))
 (let ((?x9499 (* ?x9498 l_0_7_32)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x9494 (* ?x9493 l_0_7_175)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x9491 (* ?x9490 l_0_7_154)))
 (let ((?x9487 (* 2.0 l_0_7_136)))
 (let ((?x9488 (* ?x9487 l_0_7_140)))
 (let ((?x9484 (* 2.0 l_0_7_135)))
 (let ((?x9485 (* ?x9484 l_0_7_139)))
 (let ((?x9481 (* 2.0 l_0_7_134)))
 (let ((?x9482 (* ?x9481 l_0_7_138)))
 (let ((?x9478 (* 2.0 l_0_7_133)))
 (let ((?x9479 (* ?x9478 l_0_7_137)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x9476 (* ?x9475 l_0_7_9)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x9473 (* ?x9472 l_0_7_8)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x9470 (* ?x9469 l_0_7_7)))
 (let ((?x9463 (* 12.0 l_0_7_10)))
 (let ((?x9464 (* ?x9463 l_0_7_14)))
 (let ((?x9468 (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_11) ?x9464) (* (* 2.0 l_0_7_106) l_0_7_112))))
 (let ((?x9489 (+ (+ (+ (+ (+ (+ (+ ?x9468 ?x9470) ?x9473) ?x9476) ?x9479) ?x9482) ?x9485) ?x9488)))
 (let ((?x9500 (- (+ (- (+ ?x9489 ?x9491) ?x9494) (* (* 2.0 l_0_7_22) l_0_7_32)) ?x9499)))
 (let ((?x9512 (- (- (- (- ?x9500 ?x9502) ?x9505) ?x9508) (* (* 6.0 l_0_7_49) l_0_7_53))))
 (let ((?x9533 (+ (+ (+ (+ (- (- (- ?x9512 ?x9514) ?x9517) ?x9520) ?x9523) ?x9526) ?x9529) ?x9532)))
 (= (- ?x9533 ?x9535) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9531 (* 6.0 l_0_7_73)))
 (let ((?x9696 (* ?x9531 l_0_7_82)))
 (let ((?x9528 (* 6.0 l_0_7_72)))
 (let ((?x9694 (* ?x9528 l_0_7_81)))
 (let ((?x9525 (* 6.0 l_0_7_71)))
 (let ((?x9692 (* ?x9525 l_0_7_80)))
 (let ((?x9522 (* 6.0 l_0_7_70)))
 (let ((?x9690 (* ?x9522 l_0_7_79)))
 (let ((?x9519 (* 6.0 l_0_7_52)))
 (let ((?x9688 (* ?x9519 l_0_7_61)))
 (let ((?x9516 (* 6.0 l_0_7_51)))
 (let ((?x9686 (* ?x9516 l_0_7_60)))
 (let ((?x9513 (* 6.0 l_0_7_50)))
 (let ((?x9684 (* ?x9513 l_0_7_59)))
 (let ((?x9507 (* 12.0 l_0_7_31)))
 (let ((?x9680 (* ?x9507 l_0_7_40)))
 (let ((?x9504 (* 12.0 l_0_7_30)))
 (let ((?x9678 (* ?x9504 l_0_7_39)))
 (let ((?x9501 (* 12.0 l_0_7_29)))
 (let ((?x9676 (* ?x9501 l_0_7_38)))
 (let ((?x9498 (* 12.0 l_0_7_28)))
 (let ((?x9674 (* ?x9498 l_0_7_37)))
 (let ((?x9669 (* 12.0 l_0_7_18)))
 (let ((?x9670 (* ?x9669 l_0_7_9)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x9667 (* ?x9666 l_0_7_8)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x9664 (* ?x9663 l_0_7_7)))
 (let ((?x9487 (* 2.0 l_0_7_136)))
 (let ((?x9661 (* ?x9487 l_0_7_145)))
 (let ((?x9484 (* 2.0 l_0_7_135)))
 (let ((?x9659 (* ?x9484 l_0_7_144)))
 (let ((?x9481 (* 2.0 l_0_7_134)))
 (let ((?x9657 (* ?x9481 l_0_7_143)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x9089 (* ?x9088 l_0_7_133)))
 (let ((?x9463 (* 12.0 l_0_7_10)))
 (let ((?x9652 (* ?x9463 l_0_7_19)))
 (let ((?x9656 (+ (- (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x9652) ?x9089) (* (* 2.0 l_0_7_133) l_0_7_142))))
 (let ((?x9673 (+ (+ (+ (+ (+ (+ (+ ?x9656 ?x9657) ?x9659) ?x9661) ?x9664) ?x9667) ?x9670) (* (* 2.0 l_0_7_22) l_0_7_37))))
 (let ((?x9683 (- (- (- (- (- ?x9673 ?x9674) ?x9676) ?x9678) ?x9680) (* (* 6.0 l_0_7_49) l_0_7_58))))
 (let ((?x9697 (+ (+ (+ (+ (- (- (- ?x9683 ?x9684) ?x9686) ?x9688) ?x9690) ?x9692) ?x9694) ?x9696)))
 (= ?x9697 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x9838 (* ?x9837 l_0_7_72)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x9835 (* ?x9834 l_0_7_71)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x9832 (* ?x9831 l_0_7_70)))
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x8949 (* ?x8948 l_0_7_71)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x8946 (* ?x8945 l_0_7_70)))
 (let ((?x9255 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x9252 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x9825 (* ?x9824 l_0_7_51)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x9822 (* ?x9821 l_0_7_50)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x9819 (* ?x9818 l_0_7_49)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x8943 (* ?x8942 l_0_7_50)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x8940 (* ?x8939 l_0_7_49)))
 (let ((?x9239 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x9236 (* ?x9235 l_0_7_30)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x9233 (* ?x9232 l_0_7_29)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x9230 (* ?x9229 l_0_7_28)))
 (let ((?x9780 (- (* (* (- 2.0) l_0_7_193) l_0_7_196) (* (* 2.0 l_0_7_194) l_0_7_197))))
 (let ((?x9802 (- (- ?x9780 (* (* 2.0 l_0_7_195) l_0_7_198)) (* (* 2.0 l_0_7_2) l_0_7_4))))
 (let ((?x9808 (+ (+ ?x9802 (* (* 2.0 l_0_7_23) l_0_7_25)) (* (* 2.0 l_0_7_24) l_0_7_26))))
 (let ((?x9814 (- (- (- (- ?x9808 ?x9230) ?x9233) ?x9236) (* (* 2.0 l_0_7_3) l_0_7_5))))
 (let ((?x9827 (+ (- (- (- (+ (+ (+ ?x9814 ?x9239) ?x8940) ?x8943) ?x9819) ?x9822) ?x9825) ?x9252)))
 (= (+ (+ (+ (- (- (+ ?x9827 ?x9255) ?x8946) ?x8949) ?x9832) ?x9835) ?x9838) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9391 (* l_0_7_9 l_0_7_9)))
 (let ((?x9392 (* 6.0 ?x9391)))
 (let ((?x9388 (* l_0_7_8 l_0_7_8)))
 (let ((?x9389 (* 6.0 ?x9388)))
 (let ((?x9373 (* l_0_7_7 l_0_7_7)))
 (let ((?x9374 (* 6.0 ?x9373)))
 (let ((?x9359 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x9356 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x9353 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x9350 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x9914 (* l_0_7_199 l_0_7_199)))
 (let ((?x9912 (* l_0_7_198 l_0_7_198)))
 (let ((?x9910 (* l_0_7_197 l_0_7_197)))
 (let ((?x9911 (- (- (* 6.0 (* l_0_7_10 l_0_7_10)) (* l_0_7_196 l_0_7_196)) ?x9910)))
 (let ((?x9919 (+ (- (- (- ?x9911 ?x9912) ?x9914) (* (* 2.0 l_0_7_2) l_0_7_7)) (* (* 2.0 l_0_7_23) l_0_7_28))))
 (let ((?x9925 (- (- (- (+ ?x9919 (* (* 2.0 l_0_7_24) l_0_7_29)) ?x9350) ?x9353) (* (* 2.0 l_0_7_3) l_0_7_8))))
 (let ((?x9933 (- (- (- (- ?x9925 ?x9356) ?x9359) (* (* 1.0 l_0_7_49) l_0_7_49)) (* (* 1.0 l_0_7_50) l_0_7_50))))
 (let ((?x9939 (- (- ?x9933 (* (* 1.0 l_0_7_51) l_0_7_51)) (* (* 1.0 l_0_7_52) l_0_7_52))))
 (let ((?x9944 (+ (+ (+ ?x9939 ?x9374) (* 1.0 (* l_0_7_70 l_0_7_70))) (* 1.0 (* l_0_7_71 l_0_7_71)))))
 (let ((?x9948 (+ (+ ?x9944 (* 1.0 (* l_0_7_72 l_0_7_72))) (* 1.0 (* l_0_7_73 l_0_7_73)))))
 (= (+ (+ ?x9948 ?x9389) ?x9392) 0.0))))))))))))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x10079 (* ?x10078 l_0_7_92)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x10076 (* ?x10075 l_0_7_91)))
 (let ((?x10072 (* 2.0 l_0_7_73)))
 (let ((?x10073 (* ?x10072 l_0_7_77)))
 (let ((?x10069 (* 2.0 l_0_7_72)))
 (let ((?x10070 (* ?x10069 l_0_7_76)))
 (let ((?x10066 (* 2.0 l_0_7_71)))
 (let ((?x10067 (* ?x10066 l_0_7_75)))
 (let ((?x10063 (* 2.0 l_0_7_70)))
 (let ((?x10064 (* ?x10063 l_0_7_74)))
 (let ((?x10060 (* 2.0 l_0_7_52)))
 (let ((?x10061 (* ?x10060 l_0_7_56)))
 (let ((?x10057 (* 2.0 l_0_7_51)))
 (let ((?x10058 (* ?x10057 l_0_7_55)))
 (let ((?x10054 (* 2.0 l_0_7_50)))
 (let ((?x10055 (* ?x10054 l_0_7_54)))
 (let ((?x10051 (* 2.0 l_0_7_49)))
 (let ((?x10052 (* ?x10051 l_0_7_53)))
 (let ((?x9507 (* 12.0 l_0_7_31)))
 (let ((?x9508 (* ?x9507 l_0_7_35)))
 (let ((?x9504 (* 12.0 l_0_7_30)))
 (let ((?x9505 (* ?x9504 l_0_7_34)))
 (let ((?x9501 (* 12.0 l_0_7_29)))
 (let ((?x9502 (* ?x9501 l_0_7_33)))
 (let ((?x9498 (* 12.0 l_0_7_28)))
 (let ((?x9499 (* ?x9498 l_0_7_32)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x10029 (* ?x10028 l_0_7_176)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x10026 (* ?x10025 l_0_7_175)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x10023 (* ?x10022 l_0_7_155)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x10020 (* ?x10019 l_0_7_154)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x9476 (* ?x9475 l_0_7_9)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x9473 (* ?x9472 l_0_7_8)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x9470 (* ?x9469 l_0_7_7)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x10008 (* ?x10007 l_0_7_113)))
 (let ((?x9463 (* 12.0 l_0_7_10)))
 (let ((?x9464 (* ?x9463 l_0_7_14)))
 (let ((?x10012 (- (+ (+ ?x9464 (* (* 2.0 l_0_7_107) l_0_7_112)) ?x10008) (* (* 2.0 l_0_7_11) l_0_7_2))))
 (let ((?x10018 (+ (+ (- (+ ?x10012 ?x9470) (* (* 2.0 l_0_7_12) l_0_7_3)) ?x9473) ?x9476)))
 (let ((?x10033 (- (- (- (+ (+ ?x10018 ?x10020) ?x10023) ?x10026) ?x10029) (* (* 2.0 l_0_7_196) l_0_7_200))))
 (let ((?x10039 (- (- ?x10033 (* (* 2.0 l_0_7_197) l_0_7_201)) (* (* 2.0 l_0_7_198) l_0_7_202))))
 (let ((?x10044 (+ (- ?x10039 (* (* 2.0 l_0_7_199) l_0_7_203)) (* (* 2.0 l_0_7_23) l_0_7_32))))
 (let ((?x10049 (- (- (- (+ ?x10044 (* (* 2.0 l_0_7_24) l_0_7_33)) ?x9499) ?x9502) ?x9505)))
 (let ((?x10068 (+ (+ (- (- (- (- (- ?x10049 ?x9508) ?x10052) ?x10055) ?x10058) ?x10061) ?x10064) ?x10067)))
 (= (- (- (+ (+ ?x10068 ?x10070) ?x10073) ?x10076) ?x10079) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10072 (* 2.0 l_0_7_73)))
 (let ((?x10233 (* ?x10072 l_0_7_82)))
 (let ((?x10069 (* 2.0 l_0_7_72)))
 (let ((?x10231 (* ?x10069 l_0_7_81)))
 (let ((?x10066 (* 2.0 l_0_7_71)))
 (let ((?x10229 (* ?x10066 l_0_7_80)))
 (let ((?x10063 (* 2.0 l_0_7_70)))
 (let ((?x10227 (* ?x10063 l_0_7_79)))
 (let ((?x10060 (* 2.0 l_0_7_52)))
 (let ((?x10225 (* ?x10060 l_0_7_61)))
 (let ((?x10057 (* 2.0 l_0_7_51)))
 (let ((?x10223 (* ?x10057 l_0_7_60)))
 (let ((?x10054 (* 2.0 l_0_7_50)))
 (let ((?x10221 (* ?x10054 l_0_7_59)))
 (let ((?x10051 (* 2.0 l_0_7_49)))
 (let ((?x10219 (* ?x10051 l_0_7_58)))
 (let ((?x9507 (* 12.0 l_0_7_31)))
 (let ((?x9680 (* ?x9507 l_0_7_40)))
 (let ((?x9504 (* 12.0 l_0_7_30)))
 (let ((?x9678 (* ?x9504 l_0_7_39)))
 (let ((?x9501 (* 12.0 l_0_7_29)))
 (let ((?x9676 (* ?x9501 l_0_7_38)))
 (let ((?x9498 (* 12.0 l_0_7_28)))
 (let ((?x9674 (* ?x9498 l_0_7_37)))
 (let ((?x9669 (* 12.0 l_0_7_18)))
 (let ((?x9670 (* ?x9669 l_0_7_9)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x9667 (* ?x9666 l_0_7_8)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x9664 (* ?x9663 l_0_7_7)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x9161 (* ?x9160 l_0_7_134)))
 (let ((?x9149 (* 2.0 l_0_7_128)))
 (let ((?x9158 (* ?x9149 l_0_7_133)))
 (let ((?x9463 (* 12.0 l_0_7_10)))
 (let ((?x9652 (* ?x9463 l_0_7_19)))
 (let ((?x10197 (+ (- (- (- ?x9652 ?x9158) ?x9161) (* (* 2.0 l_0_7_16) l_0_7_2)) ?x9664)))
 (let ((?x10204 (- (+ (+ (- ?x10197 (* (* 2.0 l_0_7_17) l_0_7_3)) ?x9667) ?x9670) (* (* 2.0 l_0_7_196) l_0_7_205))))
 (let ((?x10208 (- (- ?x10204 (* (* 2.0 l_0_7_197) l_0_7_206)) (* (* 2.0 l_0_7_198) l_0_7_207))))
 (let ((?x10212 (+ (- ?x10208 (* (* 2.0 l_0_7_199) l_0_7_208)) (* (* 2.0 l_0_7_23) l_0_7_37))))
 (let ((?x10217 (- (- (- (+ ?x10212 (* (* 2.0 l_0_7_24) l_0_7_38)) ?x9674) ?x9676) ?x9678)))
 (let ((?x10230 (+ (+ (- (- (- (- (- ?x10217 ?x9680) ?x10219) ?x10221) ?x10223) ?x10225) ?x10227) ?x10229)))
 (= (+ (+ ?x10230 ?x10231) ?x10233) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x9838 (* ?x9837 l_0_7_72)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x9835 (* ?x9834 l_0_7_71)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x9832 (* ?x9831 l_0_7_70)))
 (let ((?x10335 (* l_0_7_6 l_0_7_6)))
 (let ((?x10333 (* l_0_7_5 l_0_7_5)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x9825 (* ?x9824 l_0_7_51)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x9822 (* ?x9821 l_0_7_50)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x9819 (* ?x9818 l_0_7_49)))
 (let ((?x10328 (* l_0_7_4 l_0_7_4)))
 (let ((?x10318 (* l_0_7_27 l_0_7_27)))
 (let ((?x10329 (- (+ (+ (* l_0_7_25 l_0_7_25) (* l_0_7_26 l_0_7_26)) ?x10318) ?x10328)))
 (let ((?x10338 (- (- (- (- (+ (+ (+ ?x10329 ?x9819) ?x9822) ?x9825) ?x10333) ?x10335) ?x9832) ?x9835)))
 (= (- ?x10338 ?x9838) 0.0))))))))))))))))))))
(assert
 (let ((?x9385 (* l_0_7_73 l_0_7_73)))
 (let ((?x9382 (* l_0_7_72 l_0_7_72)))
 (let ((?x9379 (* l_0_7_71 l_0_7_71)))
 (let ((?x9376 (* l_0_7_70 l_0_7_70)))
 (let ((?x9440 (* l_0_7_52 l_0_7_52)))
 (let ((?x9434 (* l_0_7_51 l_0_7_51)))
 (let ((?x9428 (* l_0_7_50 l_0_7_50)))
 (let ((?x9422 (* l_0_7_49 l_0_7_49)))
 (let ((?x10369 (+ (* (* 2.0 l_0_7_25) l_0_7_28) (* (* 2.0 l_0_7_26) l_0_7_29))))
 (let ((?x10375 (- (+ ?x10369 (* (* 2.0 l_0_7_27) l_0_7_30)) (* (* 2.0 l_0_7_4) l_0_7_7))))
 (let ((?x10381 (+ (+ (- (+ ?x10375 ?x9422) (* (* 2.0 l_0_7_5) l_0_7_8)) ?x9428) ?x9434)))
 (let ((?x10387 (- (- (- (+ ?x10381 ?x9440) (* (* 2.0 l_0_7_6) l_0_7_9)) ?x9376) ?x9379)))
 (= (- (- ?x10387 ?x9382) ?x9385) 0.0))))))))))))))
(assert
 (let ((?x10474 (* 2.0 l_0_7_90)))
 (let ((?x10475 (* ?x10474 l_0_7_93)))
 (let ((?x10471 (* 2.0 l_0_7_89)))
 (let ((?x10472 (* ?x10471 l_0_7_92)))
 (let ((?x10468 (* 2.0 l_0_7_88)))
 (let ((?x10469 (* ?x10468 l_0_7_91)))
 (let ((?x10072 (* 2.0 l_0_7_73)))
 (let ((?x10073 (* ?x10072 l_0_7_77)))
 (let ((?x10069 (* 2.0 l_0_7_72)))
 (let ((?x10070 (* ?x10069 l_0_7_76)))
 (let ((?x10066 (* 2.0 l_0_7_71)))
 (let ((?x10067 (* ?x10066 l_0_7_75)))
 (let ((?x10063 (* 2.0 l_0_7_70)))
 (let ((?x10064 (* ?x10063 l_0_7_74)))
 (let ((?x10060 (* 2.0 l_0_7_52)))
 (let ((?x10061 (* ?x10060 l_0_7_56)))
 (let ((?x10057 (* 2.0 l_0_7_51)))
 (let ((?x10058 (* ?x10057 l_0_7_55)))
 (let ((?x10054 (* 2.0 l_0_7_50)))
 (let ((?x10055 (* ?x10054 l_0_7_54)))
 (let ((?x10051 (* 2.0 l_0_7_49)))
 (let ((?x10052 (* ?x10051 l_0_7_53)))
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x10452 (* ?x10451 l_0_7_177)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x10449 (* ?x10448 l_0_7_176)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x10446 (* ?x10445 l_0_7_175)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x10443 (* ?x10442 l_0_7_156)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x10440 (* ?x10439 l_0_7_155)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x10437 (* ?x10436 l_0_7_154)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x10429 (* ?x10428 l_0_7_114)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x10426 (* ?x10425 l_0_7_113)))
 (let ((?x10424 (- (* (* 2.0 l_0_7_109) l_0_7_112) (* (* 2.0 l_0_7_11) l_0_7_4))))
 (let ((?x10435 (- (- (+ (+ ?x10424 ?x10426) ?x10429) (* (* 2.0 l_0_7_12) l_0_7_5)) (* (* 2.0 l_0_7_13) l_0_7_6))))
 (let ((?x10455 (+ (- (- (- (+ (+ (+ ?x10435 ?x10437) ?x10440) ?x10443) ?x10446) ?x10449) ?x10452) (* (* 2.0 l_0_7_25) l_0_7_32))))
 (let ((?x10459 (+ (+ ?x10455 (* (* 2.0 l_0_7_26) l_0_7_33)) (* (* 2.0 l_0_7_27) l_0_7_34))))
 (let ((?x10466 (- (- (- (+ (+ (+ (+ ?x10459 ?x10052) ?x10055) ?x10058) ?x10061) ?x10064) ?x10067) ?x10070)))
 (= (- (- (- (- ?x10466 ?x10073) ?x10469) ?x10472) ?x10475) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10072 (* 2.0 l_0_7_73)))
 (let ((?x10233 (* ?x10072 l_0_7_82)))
 (let ((?x10069 (* 2.0 l_0_7_72)))
 (let ((?x10231 (* ?x10069 l_0_7_81)))
 (let ((?x10066 (* 2.0 l_0_7_71)))
 (let ((?x10229 (* ?x10066 l_0_7_80)))
 (let ((?x10063 (* 2.0 l_0_7_70)))
 (let ((?x10227 (* ?x10063 l_0_7_79)))
 (let ((?x10060 (* 2.0 l_0_7_52)))
 (let ((?x10225 (* ?x10060 l_0_7_61)))
 (let ((?x10057 (* 2.0 l_0_7_51)))
 (let ((?x10223 (* ?x10057 l_0_7_60)))
 (let ((?x10054 (* 2.0 l_0_7_50)))
 (let ((?x10221 (* ?x10054 l_0_7_59)))
 (let ((?x10051 (* 2.0 l_0_7_49)))
 (let ((?x10219 (* ?x10051 l_0_7_58)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x9225 (* ?x9224 l_0_7_135)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x9222 (* ?x9221 l_0_7_134)))
 (let ((?x10575 (- (- (- (* (* (- 2.0) l_0_7_130) l_0_7_133) ?x9222) ?x9225) (* (* 2.0 l_0_7_16) l_0_7_4))))
 (let ((?x10580 (- (- ?x10575 (* (* 2.0 l_0_7_17) l_0_7_5)) (* (* 2.0 l_0_7_18) l_0_7_6))))
 (let ((?x10584 (+ (+ ?x10580 (* (* 2.0 l_0_7_25) l_0_7_37)) (* (* 2.0 l_0_7_26) l_0_7_38))))
 (let ((?x10589 (+ (+ (+ (+ ?x10584 (* (* 2.0 l_0_7_27) l_0_7_39)) ?x10219) ?x10221) ?x10223)))
 (= (- (- (- (- (+ ?x10589 ?x10225) ?x10227) ?x10229) ?x10231) ?x10233) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x9391 (* l_0_7_9 l_0_7_9)))
 (let ((?x9388 (* l_0_7_8 l_0_7_8)))
 (let ((?x9373 (* l_0_7_7 l_0_7_7)))
 (let ((?x9416 (* l_0_7_31 l_0_7_31)))
 (let ((?x9410 (* l_0_7_30 l_0_7_30)))
 (let ((?x9404 (* l_0_7_29 l_0_7_29)))
 (let ((?x10655 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_28 l_0_7_28)) ?x9404) ?x9410)))
 (= (- (- (- (+ ?x10655 ?x9416) ?x9373) ?x9388) ?x9391) 0.0)))))))))
(assert
 (let ((?x10729 (* l_0_7_94 l_0_7_94)))
 (let ((?x10727 (* l_0_7_93 l_0_7_93)))
 (let ((?x10725 (* l_0_7_92 l_0_7_92)))
 (let ((?x10723 (* l_0_7_91 l_0_7_91)))
 (let ((?x10709 (* l_0_7_178 l_0_7_178)))
 (let ((?x10707 (* l_0_7_177 l_0_7_177)))
 (let ((?x10705 (* l_0_7_176 l_0_7_176)))
 (let ((?x10703 (* l_0_7_175 l_0_7_175)))
 (let ((?x10701 (* l_0_7_157 l_0_7_157)))
 (let ((?x10699 (* l_0_7_156 l_0_7_156)))
 (let ((?x10697 (* l_0_7_155 l_0_7_155)))
 (let ((?x10695 (* l_0_7_154 l_0_7_154)))
 (let ((?x10689 (* l_0_7_115 l_0_7_115)))
 (let ((?x10687 (* l_0_7_114 l_0_7_114)))
 (let ((?x10685 (* l_0_7_113 l_0_7_113)))
 (let ((?x10683 (* l_0_7_112 l_0_7_112)))
 (let ((?x10682 (- (* (* (- 2.0) l_0_7_10) l_0_7_14) (* (* 2.0 l_0_7_11) l_0_7_7))))
 (let ((?x10692 (- (+ (+ (+ (+ ?x10682 ?x10683) ?x10685) ?x10687) ?x10689) (* (* 2.0 l_0_7_12) l_0_7_8))))
 (let ((?x10700 (+ (+ (+ (- ?x10692 (* (* 2.0 l_0_7_13) l_0_7_9)) ?x10695) ?x10697) ?x10699)))
 (let ((?x10713 (+ (- (- (- (- (+ ?x10700 ?x10701) ?x10703) ?x10705) ?x10707) ?x10709) (* (* 2.0 l_0_7_28) l_0_7_32))))
 (let ((?x10719 (+ (+ ?x10713 (* (* 2.0 l_0_7_29) l_0_7_33)) (* (* 2.0 l_0_7_30) l_0_7_34))))
 (let ((?x10728 (- (- (- (+ ?x10719 (* (* 2.0 l_0_7_31) l_0_7_35)) ?x10723) ?x10725) ?x10727)))
 (= (- ?x10728 ?x10729) 0.0))))))))))))))))))))))))
(assert
 (let ((?x9345 (* l_0_7_136 l_0_7_136)))
 (let ((?x9343 (* l_0_7_135 l_0_7_135)))
 (let ((?x9341 (* l_0_7_134 l_0_7_134)))
 (let ((?x10796 (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) (* l_0_7_133 l_0_7_133)) ?x9341)))
 (let ((?x10802 (- (- (- (- ?x10796 ?x9343) ?x9345) (* (* 2.0 l_0_7_16) l_0_7_7)) (* (* 2.0 l_0_7_17) l_0_7_8))))
 (let ((?x10806 (+ (- ?x10802 (* (* 2.0 l_0_7_18) l_0_7_9)) (* (* 2.0 l_0_7_28) l_0_7_37))))
 (let ((?x10810 (+ (+ ?x10806 (* (* 2.0 l_0_7_29) l_0_7_38)) (* (* 2.0 l_0_7_30) l_0_7_39))))
 (= (+ ?x10810 (* (* 2.0 l_0_7_31) l_0_7_40)) 0.0)))))))))
(assert
 (let ((?x10911 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x10908 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x10905 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x10902 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x10899 (* l_0_7_36 l_0_7_36)))
 (let ((?x10897 (* l_0_7_35 l_0_7_35)))
 (let ((?x10895 (* l_0_7_34 l_0_7_34)))
 (let ((?x10893 (* l_0_7_33 l_0_7_33)))
 (let ((?x10891 (* l_0_7_32 l_0_7_32)))
 (let ((?x10888 (* 2.0 l_0_7_178)))
 (let ((?x10889 (* ?x10888 l_0_7_182)))
 (let ((?x10885 (* 2.0 l_0_7_177)))
 (let ((?x10886 (* ?x10885 l_0_7_181)))
 (let ((?x10882 (* 2.0 l_0_7_176)))
 (let ((?x10883 (* ?x10882 l_0_7_180)))
 (let ((?x10879 (* 2.0 l_0_7_175)))
 (let ((?x10880 (* ?x10879 l_0_7_179)))
 (let ((?x10876 (* 2.0 l_0_7_157)))
 (let ((?x10877 (* ?x10876 l_0_7_161)))
 (let ((?x10873 (* 2.0 l_0_7_156)))
 (let ((?x10874 (* ?x10873 l_0_7_160)))
 (let ((?x10870 (* 2.0 l_0_7_155)))
 (let ((?x10871 (* ?x10870 l_0_7_159)))
 (let ((?x10867 (* 2.0 l_0_7_154)))
 (let ((?x10868 (* ?x10867 l_0_7_158)))
 (let ((?x10865 (* l_0_7_15 l_0_7_15)))
 (let ((?x10863 (* l_0_7_14 l_0_7_14)))
 (let ((?x10861 (* l_0_7_13 l_0_7_13)))
 (let ((?x10859 (* l_0_7_12 l_0_7_12)))
 (let ((?x10856 (* 2.0 l_0_7_115)))
 (let ((?x10857 (* ?x10856 l_0_7_119)))
 (let ((?x10853 (* 2.0 l_0_7_114)))
 (let ((?x10854 (* ?x10853 l_0_7_118)))
 (let ((?x10850 (* 2.0 l_0_7_113)))
 (let ((?x10851 (* ?x10850 l_0_7_117)))
 (let ((?x10842 (+ (* (- l_0_7_11) l_0_7_11) (* (* 2.0 l_0_7_112) l_0_7_116))))
 (let ((?x10866 (- (- (- (- (+ (+ (+ ?x10842 ?x10851) ?x10854) ?x10857) ?x10859) ?x10861) ?x10863) ?x10865)))
 (let ((?x10887 (- (- (- (+ (+ (+ (+ ?x10866 ?x10868) ?x10871) ?x10874) ?x10877) ?x10880) ?x10883) ?x10886)))
 (let ((?x10903 (- (+ (+ (+ (+ (+ (- ?x10887 ?x10889) ?x10891) ?x10893) ?x10895) ?x10897) ?x10899) ?x10902)))
 (= (- (- (- ?x10903 ?x10905) ?x10908) ?x10911) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10888 (* 2.0 l_0_7_178)))
 (let ((?x11060 (* ?x10888 l_0_7_187)))
 (let ((?x10885 (* 2.0 l_0_7_177)))
 (let ((?x11058 (* ?x10885 l_0_7_186)))
 (let ((?x10882 (* 2.0 l_0_7_176)))
 (let ((?x11056 (* ?x10882 l_0_7_185)))
 (let ((?x10879 (* 2.0 l_0_7_175)))
 (let ((?x11054 (* ?x10879 l_0_7_184)))
 (let ((?x10876 (* 2.0 l_0_7_157)))
 (let ((?x11052 (* ?x10876 l_0_7_166)))
 (let ((?x10873 (* 2.0 l_0_7_156)))
 (let ((?x11050 (* ?x10873 l_0_7_165)))
 (let ((?x10870 (* 2.0 l_0_7_155)))
 (let ((?x11048 (* ?x10870 l_0_7_164)))
 (let ((?x10867 (* 2.0 l_0_7_154)))
 (let ((?x11046 (* ?x10867 l_0_7_163)))
 (let ((?x9487 (* 2.0 l_0_7_136)))
 (let ((?x9488 (* ?x9487 l_0_7_140)))
 (let ((?x9484 (* 2.0 l_0_7_135)))
 (let ((?x9485 (* ?x9484 l_0_7_139)))
 (let ((?x9481 (* 2.0 l_0_7_134)))
 (let ((?x9482 (* ?x9481 l_0_7_138)))
 (let ((?x9478 (* 2.0 l_0_7_133)))
 (let ((?x9479 (* ?x9478 l_0_7_137)))
 (let ((?x10856 (* 2.0 l_0_7_115)))
 (let ((?x11030 (* ?x10856 l_0_7_124)))
 (let ((?x10853 (* 2.0 l_0_7_114)))
 (let ((?x11028 (* ?x10853 l_0_7_123)))
 (let ((?x10850 (* 2.0 l_0_7_113)))
 (let ((?x11026 (* ?x10850 l_0_7_122)))
 (let ((?x10840 (* 2.0 l_0_7_112)))
 (let ((?x11024 (* ?x10840 l_0_7_121)))
 (let ((?x11019 (* 2.0 l_0_7_103)))
 (let ((?x11020 (* ?x11019 l_0_7_94)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x11017 (* ?x11016 l_0_7_93)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x11014 (* ?x11013 l_0_7_92)))
 (let ((?x11023 (- (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_91) ?x11014) ?x11017) ?x11020) (* (* 2.0 l_0_7_11) l_0_7_16))))
 (let ((?x11033 (- (+ (+ (+ (+ ?x11023 ?x11024) ?x11026) ?x11028) ?x11030) (* (* 2.0 l_0_7_12) l_0_7_17))))
 (let ((?x11038 (- (- (- (- ?x11033 (* (* 2.0 l_0_7_13) l_0_7_18)) ?x9479) ?x9482) ?x9485)))
 (let ((?x11045 (- (- (- ?x11038 ?x9488) (* (* 2.0 l_0_7_14) l_0_7_19)) (* (* 2.0 l_0_7_15) l_0_7_20))))
 (let ((?x11059 (- (- (- (+ (+ (+ (+ ?x11045 ?x11046) ?x11048) ?x11050) ?x11052) ?x11054) ?x11056) ?x11058)))
 (let ((?x11067 (+ (+ (- ?x11059 ?x11060) (* (* 2.0 l_0_7_32) l_0_7_37)) (* (* 2.0 l_0_7_33) l_0_7_38))))
 (let ((?x11073 (+ (+ ?x11067 (* (* 2.0 l_0_7_34) l_0_7_39)) (* (* 2.0 l_0_7_35) l_0_7_40))))
 (= (+ ?x11073 (* (* 2.0 l_0_7_36) l_0_7_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11230 (* l_0_7_42 l_0_7_42)))
 (let ((?x11228 (* l_0_7_41 l_0_7_41)))
 (let ((?x11226 (* l_0_7_40 l_0_7_40)))
 (let ((?x11224 (* l_0_7_39 l_0_7_39)))
 (let ((?x11222 (* l_0_7_38 l_0_7_38)))
 (let ((?x11220 (* l_0_7_37 l_0_7_37)))
 (let ((?x11218 (* l_0_7_21 l_0_7_21)))
 (let ((?x11216 (* l_0_7_20 l_0_7_20)))
 (let ((?x11214 (* l_0_7_19 l_0_7_19)))
 (let ((?x11212 (* l_0_7_18 l_0_7_18)))
 (let ((?x11210 (* l_0_7_17 l_0_7_17)))
 (let ((?x11192 (* l_0_7_16 l_0_7_16)))
 (let ((?x9487 (* 2.0 l_0_7_136)))
 (let ((?x9661 (* ?x9487 l_0_7_145)))
 (let ((?x9484 (* 2.0 l_0_7_135)))
 (let ((?x9659 (* ?x9484 l_0_7_144)))
 (let ((?x9481 (* 2.0 l_0_7_134)))
 (let ((?x9657 (* ?x9481 l_0_7_143)))
 (let ((?x11209 (- (- (- (- (* (* (- 2.0) l_0_7_133) l_0_7_142) ?x9657) ?x9659) ?x9661) ?x11192)))
 (let ((?x11223 (+ (+ (- (- (- (- (- ?x11209 ?x11210) ?x11212) ?x11214) ?x11216) ?x11218) ?x11220) ?x11222)))
 (= (+ (+ (+ (+ ?x11223 ?x11224) ?x11226) ?x11228) ?x11230) 0.0))))))))))))))))))))))
(assert
 (let ((?x11298 (* l_0_7_87 l_0_7_87)))
 (let ((?x11296 (* l_0_7_86 l_0_7_86)))
 (let ((?x11293 (* l_0_7_64 l_0_7_64)))
 (let ((?x11294 (* 3.0 ?x11293)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11291 (* ?x9104 l_0_7_65)))
 (let ((?x11289 (* (* 3.0 l_0_7_43) l_0_7_43)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11286 (* ?x9095 l_0_7_44)))
 (let ((?x11284 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x11281 (* l_0_7_171 l_0_7_171)))
 (let ((?x11279 (* l_0_7_170 l_0_7_170)))
 (let ((?x11277 (* l_0_7_150 l_0_7_150)))
 (let ((?x11275 (* l_0_7_149 l_0_7_149)))
 (let ((?x11273 (* l_0_7_127 l_0_7_127)))
 (let ((?x11271 (* l_0_7_108 l_0_7_108)))
 (let ((?x11272 (- (- (* 6.0 (* l_0_7_1 l_0_7_1)) (* l_0_7_107 l_0_7_107)) ?x11271)))
 (let ((?x11287 (- (- (+ (+ (- (- (+ ?x11272 ?x11273) ?x11275) ?x11277) ?x11279) ?x11281) ?x11284) ?x11286)))
 (= (+ (+ (+ (+ (- ?x11287 ?x11289) ?x11291) ?x11294) ?x11296) ?x11298) 0.0))))))))))))))))))))
(assert
 (let ((?x8880 (* l_0_7_66 l_0_7_66)))
 (let ((?x9037 (* 3.0 ?x8880)))
 (let ((?x8877 (* l_0_7_65 l_0_7_65)))
 (let ((?x9035 (* 3.0 ?x8877)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11291 (* ?x9104 l_0_7_65)))
 (let ((?x9030 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (let ((?x9027 (* (* 3.0 l_0_7_44) l_0_7_44)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11286 (* ?x9095 l_0_7_44)))
 (let ((?x11284 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x9018 (* ?x9017 l_0_7_23)))
 (let ((?x11343 (* l_0_7_190 l_0_7_190)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x11331 (* ?x9088 l_0_7_128)))
 (let ((?x9086 (* l_0_7_1 l_0_7_1)))
 (let ((?x11260 (* 6.0 ?x9086)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x9008 (* ?x9007 l_0_7_2)))
 (let ((?x11350 (- (- (- (- (- (+ (+ ?x9008 ?x11260) ?x11331) ?x11343) ?x9018) ?x11284) ?x11286) (* (* 1.0 l_0_7_43) l_0_7_43))))
 (let ((?x11355 (+ (+ (- (- ?x11350 ?x9027) ?x9030) ?x11291) (* 1.0 (* l_0_7_64 l_0_7_64)))))
 (= (+ (+ ?x11355 ?x9035) ?x9037) 0.0))))))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11398 (* ?x9110 l_0_7_68)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11396 (* ?x9107 l_0_7_67)))
 (let ((?x11293 (* l_0_7_64 l_0_7_64)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11393 (* ?x9104 l_0_7_67)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11391 (* ?x9101 l_0_7_47)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11389 (* ?x9098 l_0_7_46)))
 (let ((?x11324 (* l_0_7_43 l_0_7_43)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11386 (* ?x9095 l_0_7_46)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11384 (* ?x9017 l_0_7_25)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x11381 (* ?x9007 l_0_7_4)))
 (let ((?x11388 (+ (- (- (+ ?x11381 (* (* 2.0 l_0_7_127) l_0_7_130)) ?x11384) ?x11386) ?x11324)))
 (= (+ (+ (- (+ (- (- ?x11388 ?x11389) ?x11391) ?x11393) ?x11293) ?x11396) ?x11398) 0.0)))))))))))))))))))))
(assert
 (let ((?x11464 (* l_0_7_85 l_0_7_85)))
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11462 (* ?x9110 l_0_7_75)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11460 (* ?x9107 l_0_7_74)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11458 (* ?x9104 l_0_7_74)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11456 (* ?x9101 l_0_7_54)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11454 (* ?x9098 l_0_7_53)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11452 (* ?x9095 l_0_7_53)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11450 (* ?x9017 l_0_7_32)))
 (let ((?x11448 (* l_0_7_169 l_0_7_169)))
 (let ((?x11446 (* l_0_7_148 l_0_7_148)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x11444 (* ?x9088 l_0_7_137)))
 (let ((?x11445 (+ (+ (* (* 12.0 l_0_7_1) l_0_7_11) (* l_0_7_106 l_0_7_106)) ?x11444)))
 (let ((?x11459 (+ (- (- (- (- (- (+ ?x11445 ?x11446) ?x11448) ?x11450) ?x11452) ?x11454) ?x11456) ?x11458)))
 (= (- (+ (+ ?x11459 ?x11460) ?x11462) ?x11464) 0.0)))))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11524 (* ?x9110 l_0_7_80)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11522 (* ?x9107 l_0_7_79)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11520 (* ?x9104 l_0_7_79)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11518 (* ?x9101 l_0_7_59)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11516 (* ?x9098 l_0_7_58)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11514 (* ?x9095 l_0_7_58)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11512 (* ?x9017 l_0_7_37)))
 (let ((?x11273 (* l_0_7_127 l_0_7_127)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x11508 (* ?x9007 l_0_7_16)))
 (let ((?x11515 (- (- (- (+ ?x11508 (* (* 2.0 l_0_7_127) l_0_7_142)) ?x11273) ?x11512) ?x11514)))
 (= (+ (+ (+ (- (- ?x11515 ?x11516) ?x11518) ?x11520) ?x11522) ?x11524) 0.0))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11398 (* ?x9110 l_0_7_68)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11396 (* ?x9107 l_0_7_67)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11585 (* ?x9032 l_0_7_67)))
 (let ((?x9033 (* ?x9032 l_0_7_65)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11391 (* ?x9101 l_0_7_47)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11389 (* ?x9098 l_0_7_46)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11580 (* ?x9023 l_0_7_46)))
 (let ((?x9024 (* ?x9023 l_0_7_44)))
 (let ((?x8935 (* 12.0 l_0_7_3)))
 (let ((?x11577 (* ?x8935 l_0_7_5)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11575 (* ?x8931 l_0_7_26)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11573 (* ?x8927 l_0_7_25)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11384 (* ?x9017 l_0_7_25)))
 (let ((?x8923 (* 12.0 l_0_7_2)))
 (let ((?x11570 (* ?x8923 l_0_7_4)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11566 (* ?x9160 l_0_7_131)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x11381 (* ?x9007 l_0_7_4)))
 (let ((?x11569 (- (+ (+ ?x11381 (* (* 2.0 l_0_7_128) l_0_7_130)) ?x11566) (* (* 2.0 l_0_7_190) l_0_7_193))))
 (let ((?x11581 (- (+ (+ (- (- (- (+ ?x11569 ?x11570) ?x11384) ?x11573) ?x11575) ?x11577) ?x9024) ?x11580)))
 (= (+ (+ (+ (- (- (- ?x11581 ?x11389) ?x11391) ?x9033) ?x11585) ?x11396) ?x11398) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x11662 (* ?x9534 l_0_7_86)))
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11462 (* ?x9110 l_0_7_75)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11460 (* ?x9107 l_0_7_74)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11658 (* ?x9032 l_0_7_74)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11456 (* ?x9101 l_0_7_54)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11454 (* ?x9098 l_0_7_53)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11654 (* ?x9023 l_0_7_53)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11652 (* ?x8931 l_0_7_33)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11650 (* ?x8927 l_0_7_32)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11450 (* ?x9017 l_0_7_32)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x11645 (* ?x9493 l_0_7_170)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x11643 (* ?x9490 l_0_7_149)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11641 (* ?x9160 l_0_7_138)))
 (let ((?x9149 (* 2.0 l_0_7_128)))
 (let ((?x11639 (* ?x9149 l_0_7_137)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x11637 (* ?x9472 l_0_7_3)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x11635 (* ?x9469 l_0_7_2)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x11441 (* ?x9007 l_0_7_11)))
 (let ((?x11640 (+ (+ (+ (+ ?x11441 (* (* 2.0 l_0_7_106) l_0_7_107)) ?x11635) ?x11637) ?x11639)))
 (let ((?x11648 (- (- (+ (+ ?x11640 ?x11641) ?x11643) ?x11645) (* (* 2.0 l_0_7_190) l_0_7_200))))
 (let ((?x11659 (+ (- (- (- (- (- (- ?x11648 ?x11450) ?x11650) ?x11652) ?x11654) ?x11454) ?x11456) ?x11658)))
 (= (- (+ (+ ?x11659 ?x11460) ?x11462) ?x11662) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9110 (* 6.0 l_0_7_66)))
 (let ((?x11524 (* ?x9110 l_0_7_80)))
 (let ((?x9107 (* 6.0 l_0_7_65)))
 (let ((?x11522 (* ?x9107 l_0_7_79)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11738 (* ?x9032 l_0_7_79)))
 (let ((?x9101 (* 6.0 l_0_7_45)))
 (let ((?x11518 (* ?x9101 l_0_7_59)))
 (let ((?x9098 (* 6.0 l_0_7_44)))
 (let ((?x11516 (* ?x9098 l_0_7_58)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11734 (* ?x9023 l_0_7_58)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11732 (* ?x8931 l_0_7_38)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11730 (* ?x8927 l_0_7_37)))
 (let ((?x9017 (* 12.0 l_0_7_22)))
 (let ((?x11512 (* ?x9017 l_0_7_37)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x11725 (* ?x9666 l_0_7_3)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x11723 (* ?x9663 l_0_7_2)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11721 (* ?x9160 l_0_7_143)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x11331 (* ?x9088 l_0_7_128)))
 (let ((?x9007 (* 12.0 l_0_7_1)))
 (let ((?x11508 (* ?x9007 l_0_7_16)))
 (let ((?x11724 (+ (+ (+ (- ?x11508 ?x11331) (* (* 2.0 l_0_7_128) l_0_7_142)) ?x11721) ?x11723)))
 (let ((?x11731 (- (- (- (+ ?x11724 ?x11725) (* (* 2.0 l_0_7_190) l_0_7_205)) ?x11512) ?x11730)))
 (let ((?x11741 (+ (+ (+ (- (- (- (- ?x11731 ?x11732) ?x11734) ?x11516) ?x11518) ?x11738) ?x11522) ?x11524)))
 (= ?x11741 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x11821 (* l_0_7_69 l_0_7_69)))
 (let ((?x11822 (* 3.0 ?x11821)))
 (let ((?x11818 (* l_0_7_68 l_0_7_68)))
 (let ((?x11819 (* 3.0 ?x11818)))
 (let ((?x11815 (* l_0_7_67 l_0_7_67)))
 (let ((?x11816 (* 3.0 ?x11815)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11585 (* ?x9032 l_0_7_67)))
 (let ((?x10335 (* l_0_7_6 l_0_7_6)))
 (let ((?x11812 (* 6.0 ?x10335)))
 (let ((?x10333 (* l_0_7_5 l_0_7_5)))
 (let ((?x11810 (* 6.0 ?x10333)))
 (let ((?x11808 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x11805 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11580 (* ?x9023 l_0_7_46)))
 (let ((?x10328 (* l_0_7_4 l_0_7_4)))
 (let ((?x11798 (* 6.0 ?x10328)))
 (let ((?x11796 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x11793 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x11790 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x11787 (* l_0_7_132 l_0_7_132)))
 (let ((?x11791 (- (+ (+ (* l_0_7_130 l_0_7_130) (* l_0_7_131 l_0_7_131)) ?x11787) ?x11790)))
 (let ((?x11803 (- (+ (+ (- (- ?x11791 ?x11793) ?x11796) ?x11798) ?x11580) (* (* 3.0 l_0_7_46) l_0_7_46))))
 (let ((?x11820 (+ (+ (- (+ (+ (- (- ?x11803 ?x11805) ?x11808) ?x11810) ?x11812) ?x11585) ?x11816) ?x11819)))
 (= (+ ?x11820 ?x11822) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x11913 (* ?x9534 l_0_7_88)))
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x11911 (* ?x9264 l_0_7_76)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x11909 (* ?x9261 l_0_7_75)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x11907 (* ?x9258 l_0_7_74)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11658 (* ?x9032 l_0_7_74)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x11904 (* ?x9248 l_0_7_55)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x11902 (* ?x9245 l_0_7_54)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11654 (* ?x9023 l_0_7_53)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x11897 (* ?x9235 l_0_7_34)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x11895 (* ?x9232 l_0_7_33)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x11893 (* ?x9229 l_0_7_32)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x11891 (* ?x9493 l_0_7_172)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x11889 (* ?x9490 l_0_7_151)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x11887 (* ?x9224 l_0_7_139)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x11885 (* ?x9221 l_0_7_138)))
 (let ((?x9218 (* 2.0 l_0_7_130)))
 (let ((?x11883 (* ?x9218 l_0_7_137)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x11881 (* ?x9475 l_0_7_6)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x11879 (* ?x9472 l_0_7_5)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x11877 (* ?x9469 l_0_7_4)))
 (let ((?x11884 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_109) ?x11877) ?x11879) ?x11881) ?x11883)))
 (let ((?x11898 (- (- (- (- (+ (+ (+ ?x11884 ?x11885) ?x11887) ?x11889) ?x11891) ?x11893) ?x11895) ?x11897)))
 (let ((?x11905 (- (- (- (+ ?x11898 ?x11654) (* (* 6.0 l_0_7_46) l_0_7_53)) ?x11902) ?x11904)))
 (= (- (+ (+ (+ (- ?x11905 ?x11658) ?x11907) ?x11909) ?x11911) ?x11913) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x12020 (* ?x9264 l_0_7_81)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x12018 (* ?x9261 l_0_7_80)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x12016 (* ?x9258 l_0_7_79)))
 (let ((?x9032 (* 2.0 l_0_7_64)))
 (let ((?x11738 (* ?x9032 l_0_7_79)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x12013 (* ?x9248 l_0_7_60)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x12011 (* ?x9245 l_0_7_59)))
 (let ((?x9023 (* 2.0 l_0_7_43)))
 (let ((?x11734 (* ?x9023 l_0_7_58)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x12006 (* ?x9235 l_0_7_39)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x12004 (* ?x9232 l_0_7_38)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x12002 (* ?x9229 l_0_7_37)))
 (let ((?x9669 (* 12.0 l_0_7_18)))
 (let ((?x12000 (* ?x9669 l_0_7_6)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x11998 (* ?x9666 l_0_7_5)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x11996 (* ?x9663 l_0_7_4)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x11994 (* ?x9224 l_0_7_144)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x11992 (* ?x9221 l_0_7_143)))
 (let ((?x11991 (+ (* (* (- 2.0) l_0_7_127) l_0_7_130) (* (* 2.0 l_0_7_130) l_0_7_142))))
 (let ((?x12005 (- (- (+ (+ (+ (+ (+ ?x11991 ?x11992) ?x11994) ?x11996) ?x11998) ?x12000) ?x12002) ?x12004)))
 (let ((?x12012 (- (- (+ (- ?x12005 ?x12006) ?x11734) (* (* 6.0 l_0_7_46) l_0_7_58)) ?x12011)))
 (= (+ (+ (+ (- (- ?x12012 ?x12013) ?x11738) ?x12016) ?x12018) ?x12020) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x12150 (* ?x9534 l_0_7_95)))
 (let ((?x12147 (* l_0_7_78 l_0_7_78)))
 (let ((?x12148 (* 3.0 ?x12147)))
 (let ((?x12144 (* l_0_7_77 l_0_7_77)))
 (let ((?x12145 (* 3.0 ?x12144)))
 (let ((?x12141 (* l_0_7_76 l_0_7_76)))
 (let ((?x12142 (* 3.0 ?x12141)))
 (let ((?x12138 (* l_0_7_75 l_0_7_75)))
 (let ((?x12139 (* 3.0 ?x12138)))
 (let ((?x12135 (* l_0_7_74 l_0_7_74)))
 (let ((?x12136 (* 3.0 ?x12135)))
 (let ((?x12133 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x12130 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x12127 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x12124 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x12118 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x12115 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x12112 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x12109 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x12106 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x12103 (* ?x9493 l_0_7_179)))
 (let ((?x10865 (* l_0_7_15 l_0_7_15)))
 (let ((?x12101 (* 6.0 ?x10865)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x12099 (* ?x9490 l_0_7_158)))
 (let ((?x12097 (* l_0_7_141 l_0_7_141)))
 (let ((?x12095 (* l_0_7_140 l_0_7_140)))
 (let ((?x10863 (* l_0_7_14 l_0_7_14)))
 (let ((?x12093 (* 6.0 ?x10863)))
 (let ((?x12091 (* l_0_7_139 l_0_7_139)))
 (let ((?x12089 (* l_0_7_138 l_0_7_138)))
 (let ((?x12087 (* l_0_7_137 l_0_7_137)))
 (let ((?x10861 (* l_0_7_13 l_0_7_13)))
 (let ((?x12085 (* 6.0 ?x10861)))
 (let ((?x10859 (* l_0_7_12 l_0_7_12)))
 (let ((?x12083 (* 6.0 ?x10859)))
 (let ((?x10915 (* l_0_7_11 l_0_7_11)))
 (let ((?x12081 (* 6.0 ?x10915)))
 (let ((?x12088 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_116) ?x12081) ?x12083) ?x12085) ?x12087)))
 (let ((?x12102 (+ (+ (+ (+ (+ (+ (+ ?x12088 ?x12089) ?x12091) ?x12093) ?x12095) ?x12097) ?x12099) ?x12101)))
 (let ((?x12122 (- (- (- (- (- (- (- ?x12102 ?x12103) ?x12106) ?x12109) ?x12112) ?x12115) ?x12118) (* (* 3.0 l_0_7_53) l_0_7_53))))
 (let ((?x12143 (+ (+ (+ (- (- (- (- ?x12122 ?x12124) ?x12127) ?x12130) ?x12133) ?x12136) ?x12139) ?x12142)))
 (= (- (+ (+ ?x12143 ?x12145) ?x12148) ?x12150) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12305 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x12302 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x12299 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x12296 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x12293 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x12290 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x12287 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x12284 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x12281 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x12275 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x12272 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x12269 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x12266 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x12263 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x12260 (* ?x9493 l_0_7_184)))
 (let ((?x12258 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x12255 (* ?x9490 l_0_7_163)))
 (let ((?x12253 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x12250 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x12247 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x12244 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x12241 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x12238 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x12235 (* ?x9475 l_0_7_18)))
 (let ((?x9088 (* 2.0 l_0_7_127)))
 (let ((?x11444 (* ?x9088 l_0_7_137)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x12232 (* ?x9472 l_0_7_17)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x12230 (* ?x9469 l_0_7_16)))
 (let ((?x9466 (* 2.0 l_0_7_106)))
 (let ((?x12228 (* ?x9466 l_0_7_121)))
 (let ((?x12234 (- (+ (+ (+ (* (* (- 2.0) l_0_7_100) l_0_7_85) ?x12228) ?x12230) ?x12232) ?x11444)))
 (let ((?x12254 (+ (+ (+ (+ (+ (+ (+ ?x12234 ?x12235) ?x12238) ?x12241) ?x12244) ?x12247) ?x12250) ?x12253)))
 (let ((?x12273 (- (- (- (- (- (+ (+ ?x12254 ?x12255) ?x12258) ?x12260) ?x12263) ?x12266) ?x12269) ?x12272)))
 (let ((?x12285 (- (- (- (- ?x12273 ?x12275) (* (* 6.0 l_0_7_53) l_0_7_58)) ?x12281) ?x12284)))
 (let ((?x12306 (+ (+ (+ (+ (+ (- (- ?x12285 ?x12287) ?x12290) ?x12293) ?x12296) ?x12299) ?x12302) ?x12305)))
 (= ?x12306 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12484 (* l_0_7_84 l_0_7_84)))
 (let ((?x12485 (* 3.0 ?x12484)))
 (let ((?x12481 (* l_0_7_83 l_0_7_83)))
 (let ((?x12482 (* 3.0 ?x12481)))
 (let ((?x12478 (* l_0_7_82 l_0_7_82)))
 (let ((?x12479 (* 3.0 ?x12478)))
 (let ((?x12475 (* l_0_7_81 l_0_7_81)))
 (let ((?x12476 (* 3.0 ?x12475)))
 (let ((?x12472 (* l_0_7_80 l_0_7_80)))
 (let ((?x12473 (* 3.0 ?x12472)))
 (let ((?x12469 (* l_0_7_79 l_0_7_79)))
 (let ((?x12470 (* 3.0 ?x12469)))
 (let ((?x12467 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12464 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12461 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12458 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12455 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x12449 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x12446 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x12443 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x12440 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x12437 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x12434 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x11218 (* l_0_7_21 l_0_7_21)))
 (let ((?x12431 (* 6.0 ?x11218)))
 (let ((?x11216 (* l_0_7_20 l_0_7_20)))
 (let ((?x12429 (* 6.0 ?x11216)))
 (let ((?x11214 (* l_0_7_19 l_0_7_19)))
 (let ((?x12427 (* 6.0 ?x11214)))
 (let ((?x11212 (* l_0_7_18 l_0_7_18)))
 (let ((?x12425 (* 6.0 ?x11212)))
 (let ((?x11210 (* l_0_7_17 l_0_7_17)))
 (let ((?x12423 (* 6.0 ?x11210)))
 (let ((?x11192 (* l_0_7_16 l_0_7_16)))
 (let ((?x12421 (* 6.0 ?x11192)))
 (let ((?x12419 (* l_0_7_147 l_0_7_147)))
 (let ((?x12417 (* l_0_7_146 l_0_7_146)))
 (let ((?x12415 (* l_0_7_145 l_0_7_145)))
 (let ((?x12413 (* l_0_7_144 l_0_7_144)))
 (let ((?x12411 (* l_0_7_143 l_0_7_143)))
 (let ((?x12412 (+ (+ (* (* (- 2.0) l_0_7_127) l_0_7_142) (* l_0_7_142 l_0_7_142)) ?x12411)))
 (let ((?x12426 (+ (+ (+ (+ (+ (+ (+ ?x12412 ?x12413) ?x12415) ?x12417) ?x12419) ?x12421) ?x12423) ?x12425)))
 (let ((?x12444 (- (- (- (- (+ (+ (+ ?x12426 ?x12427) ?x12429) ?x12431) ?x12434) ?x12437) ?x12440) ?x12443)))
 (let ((?x12456 (- (- (- (- ?x12444 ?x12446) ?x12449) (* (* 3.0 l_0_7_58) l_0_7_58)) ?x12455)))
 (let ((?x12477 (+ (+ (+ (- (- (- (- ?x12456 ?x12458) ?x12461) ?x12464) ?x12467) ?x12470) ?x12473) ?x12476)))
 (= (+ (+ (+ ?x12477 ?x12479) ?x12482) ?x12485) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x8880 (* l_0_7_66 l_0_7_66)))
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12575 (* ?x8948 l_0_7_68)))
 (let ((?x8877 (* l_0_7_65 l_0_7_65)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12572 (* ?x8945 l_0_7_67)))
 (let ((?x8908 (* l_0_7_45 l_0_7_45)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12569 (* ?x8942 l_0_7_47)))
 (let ((?x8904 (* l_0_7_44 l_0_7_44)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12566 (* ?x8939 l_0_7_46)))
 (let ((?x8935 (* 12.0 l_0_7_3)))
 (let ((?x11577 (* ?x8935 l_0_7_5)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11575 (* ?x8931 l_0_7_26)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11573 (* ?x8927 l_0_7_25)))
 (let ((?x8923 (* 12.0 l_0_7_2)))
 (let ((?x11570 (* ?x8923 l_0_7_4)))
 (let ((?x12561 (- (* (* (- 2.0) l_0_7_191) l_0_7_193) (* (* 2.0 l_0_7_192) l_0_7_194))))
 (let ((?x12570 (- (+ (- (+ (- (- (+ ?x12561 ?x11570) ?x11573) ?x11575) ?x11577) ?x12566) ?x8904) ?x12569)))
 (= (- (+ (- (+ (+ ?x12570 ?x8908) ?x12572) ?x8877) ?x12575) ?x8880) 0.0))))))))))))))))))))))))
(assert
 (let ((?x11298 (* l_0_7_87 l_0_7_87)))
 (let ((?x11296 (* l_0_7_86 l_0_7_86)))
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12640 (* ?x8948 l_0_7_75)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12638 (* ?x8945 l_0_7_74)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12636 (* ?x8942 l_0_7_54)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12634 (* ?x8939 l_0_7_53)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11652 (* ?x8931 l_0_7_33)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11650 (* ?x8927 l_0_7_32)))
 (let ((?x11281 (* l_0_7_171 l_0_7_171)))
 (let ((?x11279 (* l_0_7_170 l_0_7_170)))
 (let ((?x11277 (* l_0_7_150 l_0_7_150)))
 (let ((?x11275 (* l_0_7_149 l_0_7_149)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x11637 (* ?x9472 l_0_7_3)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x11635 (* ?x9469 l_0_7_2)))
 (let ((?x12623 (+ (+ (+ (* l_0_7_107 l_0_7_107) (* l_0_7_108 l_0_7_108)) ?x11635) ?x11637)))
 (let ((?x12629 (- (- (- (+ (+ ?x12623 ?x11275) ?x11277) ?x11279) ?x11281) (* (* 2.0 l_0_7_191) l_0_7_200))))
 (let ((?x12635 (- (- (- (- ?x12629 (* (* 2.0 l_0_7_192) l_0_7_201)) ?x11650) ?x11652) ?x12634)))
 (= (- (- (+ (+ (- ?x12635 ?x12636) ?x12638) ?x12640) ?x11296) ?x11298) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12701 (* ?x8948 l_0_7_80)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12699 (* ?x8945 l_0_7_79)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12697 (* ?x8942 l_0_7_59)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12695 (* ?x8939 l_0_7_58)))
 (let ((?x8931 (* 12.0 l_0_7_24)))
 (let ((?x11732 (* ?x8931 l_0_7_38)))
 (let ((?x8927 (* 12.0 l_0_7_23)))
 (let ((?x11730 (* ?x8927 l_0_7_37)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x11725 (* ?x9666 l_0_7_3)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x11723 (* ?x9663 l_0_7_2)))
 (let ((?x12687 (+ (- (* (- l_0_7_128) l_0_7_128) (* l_0_7_129 l_0_7_129)) ?x11723)))
 (let ((?x12692 (- (- (+ ?x12687 ?x11725) (* (* 2.0 l_0_7_191) l_0_7_205)) (* (* 2.0 l_0_7_192) l_0_7_206))))
 (= (+ (+ (- (- (- (- ?x12692 ?x11730) ?x11732) ?x12695) ?x12697) ?x12699) ?x12701) 0.0))))))))))))))))))))
(assert
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12575 (* ?x8948 l_0_7_68)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12572 (* ?x8945 l_0_7_67)))
 (let ((?x10335 (* l_0_7_6 l_0_7_6)))
 (let ((?x11812 (* 6.0 ?x10335)))
 (let ((?x10333 (* l_0_7_5 l_0_7_5)))
 (let ((?x11810 (* 6.0 ?x10333)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12569 (* ?x8942 l_0_7_47)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12566 (* ?x8939 l_0_7_46)))
 (let ((?x10328 (* l_0_7_4 l_0_7_4)))
 (let ((?x11798 (* 6.0 ?x10328)))
 (let ((?x11796 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x11793 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x11790 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x12745 (* l_0_7_195 l_0_7_195)))
 (let ((?x12746 (- (- (* (- l_0_7_193) l_0_7_193) (* l_0_7_194 l_0_7_194)) ?x12745)))
 (let ((?x12755 (- (+ (+ (+ (- (- (- ?x12746 ?x11790) ?x11793) ?x11796) ?x11798) ?x12566) ?x12569) (* (* 1.0 l_0_7_46) l_0_7_46))))
 (let ((?x12761 (- (- ?x12755 (* (* 1.0 l_0_7_47) l_0_7_47)) (* (* 1.0 l_0_7_48) l_0_7_48))))
 (let ((?x12767 (+ (- (- (+ (+ ?x12761 ?x11810) ?x11812) ?x12572) ?x12575) (* 1.0 (* l_0_7_67 l_0_7_67)))))
 (let ((?x12771 (+ (+ ?x12767 (* 1.0 (* l_0_7_68 l_0_7_68))) (* 1.0 (* l_0_7_69 l_0_7_69)))))
 (= ?x12771 0.0)))))))))))))))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x12852 (* ?x10078 l_0_7_89)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x12850 (* ?x10075 l_0_7_88)))
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x12848 (* ?x9837 l_0_7_76)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x12846 (* ?x9834 l_0_7_75)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x12844 (* ?x9831 l_0_7_74)))
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12640 (* ?x8948 l_0_7_75)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12638 (* ?x8945 l_0_7_74)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x12840 (* ?x9824 l_0_7_55)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x12838 (* ?x9821 l_0_7_54)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x12836 (* ?x9818 l_0_7_53)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12636 (* ?x8942 l_0_7_54)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12634 (* ?x8939 l_0_7_53)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x11897 (* ?x9235 l_0_7_34)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x11895 (* ?x9232 l_0_7_33)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x11893 (* ?x9229 l_0_7_32)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x12822 (* ?x10028 l_0_7_173)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x12820 (* ?x10025 l_0_7_172)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x12818 (* ?x10022 l_0_7_152)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x12816 (* ?x10019 l_0_7_151)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x11881 (* ?x9475 l_0_7_6)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x11879 (* ?x9472 l_0_7_5)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x11877 (* ?x9469 l_0_7_4)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x12811 (* ?x10007 l_0_7_110)))
 (let ((?x12815 (+ (+ (+ (+ (* (* 2.0 l_0_7_107) l_0_7_109) ?x12811) ?x11877) ?x11879) ?x11881)))
 (let ((?x12826 (- (- (- (+ (+ ?x12815 ?x12816) ?x12818) ?x12820) ?x12822) (* (* 2.0 l_0_7_193) l_0_7_200))))
 (let ((?x12830 (- (- ?x12826 (* (* 2.0 l_0_7_194) l_0_7_201)) (* (* 2.0 l_0_7_195) l_0_7_202))))
 (let ((?x12839 (- (- (+ (+ (- (- (- ?x12830 ?x11893) ?x11895) ?x11897) ?x12634) ?x12636) ?x12836) ?x12838)))
 (let ((?x12851 (- (+ (+ (+ (- (- (- ?x12839 ?x12840) ?x12638) ?x12640) ?x12844) ?x12846) ?x12848) ?x12850)))
 (= (- ?x12851 ?x12852) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x12970 (* ?x9837 l_0_7_81)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x12968 (* ?x9834 l_0_7_80)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x12966 (* ?x9831 l_0_7_79)))
 (let ((?x8948 (* 2.0 l_0_7_66)))
 (let ((?x12701 (* ?x8948 l_0_7_80)))
 (let ((?x8945 (* 2.0 l_0_7_65)))
 (let ((?x12699 (* ?x8945 l_0_7_79)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x12962 (* ?x9824 l_0_7_60)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x12960 (* ?x9821 l_0_7_59)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x12958 (* ?x9818 l_0_7_58)))
 (let ((?x8942 (* 2.0 l_0_7_45)))
 (let ((?x12697 (* ?x8942 l_0_7_59)))
 (let ((?x8939 (* 2.0 l_0_7_44)))
 (let ((?x12695 (* ?x8939 l_0_7_58)))
 (let ((?x9235 (* 12.0 l_0_7_27)))
 (let ((?x12006 (* ?x9235 l_0_7_39)))
 (let ((?x9232 (* 12.0 l_0_7_26)))
 (let ((?x12004 (* ?x9232 l_0_7_38)))
 (let ((?x9229 (* 12.0 l_0_7_25)))
 (let ((?x12002 (* ?x9229 l_0_7_37)))
 (let ((?x9669 (* 12.0 l_0_7_18)))
 (let ((?x12000 (* ?x9669 l_0_7_6)))
 (let ((?x9666 (* 12.0 l_0_7_17)))
 (let ((?x11998 (* ?x9666 l_0_7_5)))
 (let ((?x9663 (* 12.0 l_0_7_16)))
 (let ((?x11996 (* ?x9663 l_0_7_4)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11566 (* ?x9160 l_0_7_131)))
 (let ((?x12946 (+ (+ (+ (- (* (* (- 2.0) l_0_7_128) l_0_7_130) ?x11566) ?x11996) ?x11998) ?x12000)))
 (let ((?x12950 (- (- ?x12946 (* (* 2.0 l_0_7_193) l_0_7_205)) (* (* 2.0 l_0_7_194) l_0_7_206))))
 (let ((?x12955 (- (- (- (- ?x12950 (* (* 2.0 l_0_7_195) l_0_7_207)) ?x12002) ?x12004) ?x12006)))
 (let ((?x12965 (- (- (- (- (- (+ (+ ?x12955 ?x12695) ?x12697) ?x12958) ?x12960) ?x12962) ?x12699) ?x12701)))
 (= (+ (+ (+ ?x12965 ?x12966) ?x12968) ?x12970) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x13090 (* ?x10078 l_0_7_96)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x13088 (* ?x10075 l_0_7_95)))
 (let ((?x12118 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x12115 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x12112 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x12109 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x12106 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x13056 (* l_0_7_204 l_0_7_204)))
 (let ((?x13054 (* l_0_7_203 l_0_7_203)))
 (let ((?x13052 (* l_0_7_202 l_0_7_202)))
 (let ((?x13050 (* l_0_7_201 l_0_7_201)))
 (let ((?x13048 (* l_0_7_200 l_0_7_200)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x13046 (* ?x10028 l_0_7_180)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x13044 (* ?x10025 l_0_7_179)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x13042 (* ?x10022 l_0_7_159)))
 (let ((?x10865 (* l_0_7_15 l_0_7_15)))
 (let ((?x12101 (* 6.0 ?x10865)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x13039 (* ?x10019 l_0_7_158)))
 (let ((?x10863 (* l_0_7_14 l_0_7_14)))
 (let ((?x12093 (* 6.0 ?x10863)))
 (let ((?x10861 (* l_0_7_13 l_0_7_13)))
 (let ((?x12085 (* 6.0 ?x10861)))
 (let ((?x10859 (* l_0_7_12 l_0_7_12)))
 (let ((?x12083 (* 6.0 ?x10859)))
 (let ((?x10915 (* l_0_7_11 l_0_7_11)))
 (let ((?x12081 (* 6.0 ?x10915)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x13033 (* ?x10007 l_0_7_117)))
 (let ((?x13037 (+ (+ (+ (+ (* (* 2.0 l_0_7_107) l_0_7_116) ?x13033) ?x12081) ?x12083) ?x12085)))
 (let ((?x13049 (- (- (- (+ (+ (+ (+ ?x13037 ?x12093) ?x13039) ?x12101) ?x13042) ?x13044) ?x13046) ?x13048)))
 (let ((?x13060 (- (- (- (- (- (- (- ?x13049 ?x13050) ?x13052) ?x13054) ?x13056) ?x12106) ?x12109) ?x12112)))
 (let ((?x13068 (- (- (- (- ?x13060 ?x12115) ?x12118) (* (* 1.0 l_0_7_53) l_0_7_53)) (* (* 1.0 l_0_7_54) l_0_7_54))))
 (let ((?x13074 (- (- ?x13068 (* (* 1.0 l_0_7_55) l_0_7_55)) (* (* 1.0 l_0_7_56) l_0_7_56))))
 (let ((?x13079 (+ (- ?x13074 (* (* 1.0 l_0_7_57) l_0_7_57)) (* 1.0 (* l_0_7_74 l_0_7_74)))))
 (let ((?x13083 (+ (+ ?x13079 (* 1.0 (* l_0_7_75 l_0_7_75))) (* 1.0 (* l_0_7_76 l_0_7_76)))))
 (let ((?x13087 (+ (+ ?x13083 (* 1.0 (* l_0_7_77 l_0_7_77))) (* 1.0 (* l_0_7_78 l_0_7_78)))))
 (= (- (- ?x13087 ?x13088) ?x13090) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13238 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x13235 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x13232 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x13229 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x13226 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x13223 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x13220 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x13217 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x13214 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x13211 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x12275 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x12272 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x12269 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x12266 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x12263 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x13188 (* ?x10028 l_0_7_185)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x13186 (* ?x10025 l_0_7_184)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x13184 (* ?x10022 l_0_7_164)))
 (let ((?x12258 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x13181 (* ?x10019 l_0_7_163)))
 (let ((?x12247 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x9475 (* 12.0 l_0_7_13)))
 (let ((?x12235 (* ?x9475 l_0_7_18)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11641 (* ?x9160 l_0_7_138)))
 (let ((?x9149 (* 2.0 l_0_7_128)))
 (let ((?x11639 (* ?x9149 l_0_7_137)))
 (let ((?x9472 (* 12.0 l_0_7_12)))
 (let ((?x12232 (* ?x9472 l_0_7_17)))
 (let ((?x9469 (* 12.0 l_0_7_11)))
 (let ((?x12230 (* ?x9469 l_0_7_16)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x13173 (* ?x10007 l_0_7_122)))
 (let ((?x9996 (* 2.0 l_0_7_107)))
 (let ((?x13171 (* ?x9996 l_0_7_121)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x13169 (* ?x11013 l_0_7_87)))
 (let ((?x13175 (+ (+ (+ (- (* (* (- 2.0) l_0_7_100) l_0_7_86) ?x13169) ?x13171) ?x13173) ?x12230)))
 (let ((?x13183 (+ (+ (+ (+ (- (- (+ ?x13175 ?x12232) ?x11639) ?x11641) ?x12235) ?x12247) ?x13181) ?x12258)))
 (let ((?x13192 (- (- (- (+ ?x13183 ?x13184) ?x13186) ?x13188) (* (* 2.0 l_0_7_200) l_0_7_205))))
 (let ((?x13198 (- (- ?x13192 (* (* 2.0 l_0_7_201) l_0_7_206)) (* (* 2.0 l_0_7_202) l_0_7_207))))
 (let ((?x13204 (- (- ?x13198 (* (* 2.0 l_0_7_203) l_0_7_208)) (* (* 2.0 l_0_7_204) l_0_7_209))))
 (let ((?x13215 (- (- (- (- (- (- (- ?x13204 ?x12263) ?x12266) ?x12269) ?x12272) ?x12275) ?x13211) ?x13214)))
 (let ((?x13236 (+ (+ (+ (+ (- (- (- ?x13215 ?x13217) ?x13220) ?x13223) ?x13226) ?x13229) ?x13232) ?x13235)))
 (= (+ ?x13236 ?x13238) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12449 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x12446 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x12443 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x12440 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x12437 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x12434 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x13369 (* l_0_7_210 l_0_7_210)))
 (let ((?x11218 (* l_0_7_21 l_0_7_21)))
 (let ((?x12431 (* 6.0 ?x11218)))
 (let ((?x13366 (* l_0_7_209 l_0_7_209)))
 (let ((?x13364 (* l_0_7_208 l_0_7_208)))
 (let ((?x13362 (* l_0_7_207 l_0_7_207)))
 (let ((?x13360 (* l_0_7_206 l_0_7_206)))
 (let ((?x13358 (* l_0_7_205 l_0_7_205)))
 (let ((?x11216 (* l_0_7_20 l_0_7_20)))
 (let ((?x12429 (* 6.0 ?x11216)))
 (let ((?x11214 (* l_0_7_19 l_0_7_19)))
 (let ((?x12427 (* 6.0 ?x11214)))
 (let ((?x11212 (* l_0_7_18 l_0_7_18)))
 (let ((?x12425 (* 6.0 ?x11212)))
 (let ((?x11210 (* l_0_7_17 l_0_7_17)))
 (let ((?x12423 (* 6.0 ?x11210)))
 (let ((?x11192 (* l_0_7_16 l_0_7_16)))
 (let ((?x12421 (* 6.0 ?x11192)))
 (let ((?x9160 (* 2.0 l_0_7_129)))
 (let ((?x11721 (* ?x9160 l_0_7_143)))
 (let ((?x13355 (+ (+ (+ (- (* (* (- 2.0) l_0_7_128) l_0_7_142) ?x11721) ?x12421) ?x12423) ?x12425)))
 (let ((?x13367 (- (- (- (- (- (+ (+ ?x13355 ?x12427) ?x12429) ?x13358) ?x13360) ?x13362) ?x13364) ?x13366)))
 (let ((?x13375 (- (- (- (- (- (- (+ ?x13367 ?x12431) ?x13369) ?x12434) ?x12437) ?x12440) ?x12443) ?x12446)))
 (let ((?x13382 (- (- (- ?x13375 ?x12449) (* (* 1.0 l_0_7_58) l_0_7_58)) (* (* 1.0 l_0_7_59) l_0_7_59))))
 (let ((?x13388 (- (- ?x13382 (* (* 1.0 l_0_7_60) l_0_7_60)) (* (* 1.0 l_0_7_61) l_0_7_61))))
 (let ((?x13394 (- (- ?x13388 (* (* 1.0 l_0_7_62) l_0_7_62)) (* (* 1.0 l_0_7_63) l_0_7_63))))
 (let ((?x13398 (+ (+ ?x13394 (* 1.0 (* l_0_7_79 l_0_7_79))) (* 1.0 (* l_0_7_80 l_0_7_80)))))
 (let ((?x13402 (+ (+ ?x13398 (* 1.0 (* l_0_7_81 l_0_7_81))) (* 1.0 (* l_0_7_82 l_0_7_82)))))
 (let ((?x13406 (+ (+ ?x13402 (* 1.0 (* l_0_7_83 l_0_7_83))) (* 1.0 (* l_0_7_84 l_0_7_84)))))
 (= ?x13406 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x11662 (* ?x9534 l_0_7_86)))
 (let ((?x11293 (* l_0_7_64 l_0_7_64)))
 (let ((?x11294 (* 3.0 ?x11293)))
 (let ((?x11289 (* (* 3.0 l_0_7_43) l_0_7_43)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x11645 (* ?x9493 l_0_7_170)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x11643 (* ?x9490 l_0_7_149)))
 (let ((?x13470 (+ (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_107) ?x11643) ?x11645) ?x11289) ?x11294)))
 (= (+ ?x13470 ?x11662) 0.0))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x12852 (* ?x10078 l_0_7_89)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x12850 (* ?x10075 l_0_7_88)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11393 (* ?x9104 l_0_7_67)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11386 (* ?x9095 l_0_7_46)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x12822 (* ?x10028 l_0_7_173)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x12820 (* ?x10025 l_0_7_172)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x12818 (* ?x10022 l_0_7_152)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x12816 (* ?x10019 l_0_7_151)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x12811 (* ?x10007 l_0_7_110)))
 (let ((?x13488 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_109) ?x12811) ?x12816) ?x12818) ?x12820)))
 (= (+ (+ (+ (- (+ ?x13488 ?x12822) ?x11386) ?x11393) ?x12850) ?x12852) 0.0)))))))))))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x10079 (* ?x10078 l_0_7_92)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x10076 (* ?x10075 l_0_7_91)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x9105 (* ?x9104 l_0_7_70)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x9096 (* ?x9095 l_0_7_49)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x10029 (* ?x10028 l_0_7_176)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x10026 (* ?x10025 l_0_7_175)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x10023 (* ?x10022 l_0_7_155)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x10020 (* ?x10019 l_0_7_154)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x10008 (* ?x10007 l_0_7_113)))
 (let ((?x13518 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_112) ?x10008) ?x10020) ?x10023) ?x10026)))
 (= (+ (+ (+ (- (+ ?x13518 ?x10029) ?x9096) ?x9105) ?x10076) ?x10079) 0.0)))))))))))))))))))))
(assert
 (let ((?x10078 (* 2.0 l_0_7_87)))
 (let ((?x13090 (* ?x10078 l_0_7_96)))
 (let ((?x10075 (* 2.0 l_0_7_86)))
 (let ((?x13088 (* ?x10075 l_0_7_95)))
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11458 (* ?x9104 l_0_7_74)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11452 (* ?x9095 l_0_7_53)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x13046 (* ?x10028 l_0_7_180)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x13044 (* ?x10025 l_0_7_179)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x13042 (* ?x10022 l_0_7_159)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x13039 (* ?x10019 l_0_7_158)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x13033 (* ?x10007 l_0_7_117)))
 (let ((?x13548 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_116) ?x13033) ?x13039) ?x13042) ?x13044)))
 (= (+ (+ (+ (- (+ ?x13548 ?x13046) ?x11452) ?x11458) ?x13088) ?x13090) 0.0)))))))))))))))))))))
(assert
 (let ((?x9104 (* 6.0 l_0_7_64)))
 (let ((?x11520 (* ?x9104 l_0_7_79)))
 (let ((?x9095 (* 6.0 l_0_7_43)))
 (let ((?x11514 (* ?x9095 l_0_7_58)))
 (let ((?x10028 (* 2.0 l_0_7_171)))
 (let ((?x13188 (* ?x10028 l_0_7_185)))
 (let ((?x10025 (* 2.0 l_0_7_170)))
 (let ((?x13186 (* ?x10025 l_0_7_184)))
 (let ((?x10022 (* 2.0 l_0_7_150)))
 (let ((?x13184 (* ?x10022 l_0_7_164)))
 (let ((?x10019 (* 2.0 l_0_7_149)))
 (let ((?x13181 (* ?x10019 l_0_7_163)))
 (let ((?x10007 (* 2.0 l_0_7_108)))
 (let ((?x13173 (* ?x10007 l_0_7_122)))
 (let ((?x9996 (* 2.0 l_0_7_107)))
 (let ((?x13171 (* ?x9996 l_0_7_121)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x13169 (* ?x11013 l_0_7_87)))
 (let ((?x13579 (- (- (- (+ (* (* 2.0 l_0_7_100) l_0_7_86) ?x13169) ?x13171) ?x13173) ?x13181)))
 (= (+ (- (+ (+ (- ?x13579 ?x13184) ?x13186) ?x13188) ?x11514) ?x11520) 0.0)))))))))))))))))))))
(assert
 (let ((?x11821 (* l_0_7_69 l_0_7_69)))
 (let ((?x11822 (* 3.0 ?x11821)))
 (let ((?x11818 (* l_0_7_68 l_0_7_68)))
 (let ((?x11819 (* 3.0 ?x11818)))
 (let ((?x11815 (* l_0_7_67 l_0_7_67)))
 (let ((?x11816 (* 3.0 ?x11815)))
 (let ((?x11808 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x11805 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x13615 (+ (+ (- (- (* (* (- 3.0) l_0_7_46) l_0_7_46) ?x11805) ?x11808) ?x11816) ?x11819)))
 (= (+ ?x13615 ?x11822) 0.0)))))))))))
(assert
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x9265 (* ?x9264 l_0_7_72)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x9262 (* ?x9261 l_0_7_71)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x9259 (* ?x9258 l_0_7_70)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x9249 (* ?x9248 l_0_7_51)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x9246 (* ?x9245 l_0_7_50)))
 (let ((?x13629 (+ (+ (- (- (* (* (- 6.0) l_0_7_46) l_0_7_49) ?x9246) ?x9249) ?x9259) ?x9262)))
 (= (+ ?x13629 ?x9265) 0.0)))))))))))))
(assert
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x11911 (* ?x9264 l_0_7_76)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x11909 (* ?x9261 l_0_7_75)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x11907 (* ?x9258 l_0_7_74)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x11904 (* ?x9248 l_0_7_55)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x11902 (* ?x9245 l_0_7_54)))
 (let ((?x13645 (+ (+ (- (- (* (* (- 6.0) l_0_7_46) l_0_7_53) ?x11902) ?x11904) ?x11907) ?x11909)))
 (= (+ ?x13645 ?x11911) 0.0)))))))))))))
(assert
 (let ((?x9264 (* 6.0 l_0_7_69)))
 (let ((?x12020 (* ?x9264 l_0_7_81)))
 (let ((?x9261 (* 6.0 l_0_7_68)))
 (let ((?x12018 (* ?x9261 l_0_7_80)))
 (let ((?x9258 (* 6.0 l_0_7_67)))
 (let ((?x12016 (* ?x9258 l_0_7_79)))
 (let ((?x9248 (* 6.0 l_0_7_48)))
 (let ((?x12013 (* ?x9248 l_0_7_60)))
 (let ((?x9245 (* 6.0 l_0_7_47)))
 (let ((?x12011 (* ?x9245 l_0_7_59)))
 (let ((?x13661 (+ (+ (- (- (* (* (- 6.0) l_0_7_46) l_0_7_58) ?x12011) ?x12013) ?x12016) ?x12018)))
 (= (+ ?x13661 ?x12020) 0.0)))))))))))))
(assert
 (let ((?x9385 (* l_0_7_73 l_0_7_73)))
 (let ((?x9386 (* 3.0 ?x9385)))
 (let ((?x9382 (* l_0_7_72 l_0_7_72)))
 (let ((?x9383 (* 3.0 ?x9382)))
 (let ((?x9379 (* l_0_7_71 l_0_7_71)))
 (let ((?x9380 (* 3.0 ?x9379)))
 (let ((?x9376 (* l_0_7_70 l_0_7_70)))
 (let ((?x9377 (* 3.0 ?x9376)))
 (let ((?x9371 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x9368 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x9365 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x13678 (+ (- (- (- (* (* (- 3.0) l_0_7_49) l_0_7_49) ?x9365) ?x9368) ?x9371) ?x9377)))
 (= (+ (+ (+ ?x13678 ?x9380) ?x9383) ?x9386) 0.0))))))))))))))
(assert
 (let ((?x9531 (* 6.0 l_0_7_73)))
 (let ((?x9532 (* ?x9531 l_0_7_77)))
 (let ((?x9528 (* 6.0 l_0_7_72)))
 (let ((?x9529 (* ?x9528 l_0_7_76)))
 (let ((?x9525 (* 6.0 l_0_7_71)))
 (let ((?x9526 (* ?x9525 l_0_7_75)))
 (let ((?x9522 (* 6.0 l_0_7_70)))
 (let ((?x9523 (* ?x9522 l_0_7_74)))
 (let ((?x9519 (* 6.0 l_0_7_52)))
 (let ((?x9520 (* ?x9519 l_0_7_56)))
 (let ((?x9516 (* 6.0 l_0_7_51)))
 (let ((?x9517 (* ?x9516 l_0_7_55)))
 (let ((?x9513 (* 6.0 l_0_7_50)))
 (let ((?x9514 (* ?x9513 l_0_7_54)))
 (let ((?x13696 (+ (- (- (- (* (* (- 6.0) l_0_7_49) l_0_7_53) ?x9514) ?x9517) ?x9520) ?x9523)))
 (= (+ (+ (+ ?x13696 ?x9526) ?x9529) ?x9532) 0.0)))))))))))))))))
(assert
 (let ((?x9531 (* 6.0 l_0_7_73)))
 (let ((?x9696 (* ?x9531 l_0_7_82)))
 (let ((?x9528 (* 6.0 l_0_7_72)))
 (let ((?x9694 (* ?x9528 l_0_7_81)))
 (let ((?x9525 (* 6.0 l_0_7_71)))
 (let ((?x9692 (* ?x9525 l_0_7_80)))
 (let ((?x9522 (* 6.0 l_0_7_70)))
 (let ((?x9690 (* ?x9522 l_0_7_79)))
 (let ((?x9519 (* 6.0 l_0_7_52)))
 (let ((?x9688 (* ?x9519 l_0_7_61)))
 (let ((?x9516 (* 6.0 l_0_7_51)))
 (let ((?x9686 (* ?x9516 l_0_7_60)))
 (let ((?x9513 (* 6.0 l_0_7_50)))
 (let ((?x9684 (* ?x9513 l_0_7_59)))
 (let ((?x13713 (+ (- (- (- (* (* (- 6.0) l_0_7_49) l_0_7_58) ?x9684) ?x9686) ?x9688) ?x9690)))
 (= (+ (+ (+ ?x13713 ?x9692) ?x9694) ?x9696) 0.0)))))))))))))))))
(assert
 (let ((?x12147 (* l_0_7_78 l_0_7_78)))
 (let ((?x12148 (* 3.0 ?x12147)))
 (let ((?x12144 (* l_0_7_77 l_0_7_77)))
 (let ((?x12145 (* 3.0 ?x12144)))
 (let ((?x12141 (* l_0_7_76 l_0_7_76)))
 (let ((?x12142 (* 3.0 ?x12141)))
 (let ((?x12138 (* l_0_7_75 l_0_7_75)))
 (let ((?x12139 (* 3.0 ?x12138)))
 (let ((?x12135 (* l_0_7_74 l_0_7_74)))
 (let ((?x12136 (* 3.0 ?x12135)))
 (let ((?x12133 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x12130 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x12127 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x12124 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x13735 (- (- (- (- (* (* (- 3.0) l_0_7_53) l_0_7_53) ?x12124) ?x12127) ?x12130) ?x12133)))
 (= (+ (+ (+ (+ (+ ?x13735 ?x12136) ?x12139) ?x12142) ?x12145) ?x12148) 0.0)))))))))))))))))
(assert
 (let ((?x12305 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x12302 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x12299 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x12296 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x12293 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x12290 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x12287 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x12284 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x12281 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x13757 (- (- (- (- (* (* (- 6.0) l_0_7_53) l_0_7_58) ?x12281) ?x12284) ?x12287) ?x12290)))
 (= (+ (+ (+ (+ (+ ?x13757 ?x12293) ?x12296) ?x12299) ?x12302) ?x12305) 0.0))))))))))))
(assert
 (let ((?x12484 (* l_0_7_84 l_0_7_84)))
 (let ((?x12485 (* 3.0 ?x12484)))
 (let ((?x12481 (* l_0_7_83 l_0_7_83)))
 (let ((?x12482 (* 3.0 ?x12481)))
 (let ((?x12478 (* l_0_7_82 l_0_7_82)))
 (let ((?x12479 (* 3.0 ?x12478)))
 (let ((?x12475 (* l_0_7_81 l_0_7_81)))
 (let ((?x12476 (* 3.0 ?x12475)))
 (let ((?x12472 (* l_0_7_80 l_0_7_80)))
 (let ((?x12473 (* 3.0 ?x12472)))
 (let ((?x12469 (* l_0_7_79 l_0_7_79)))
 (let ((?x12470 (* 3.0 ?x12469)))
 (let ((?x12467 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12464 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12461 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12458 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12455 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x13784 (- (- (- (- (* (* (- 3.0) l_0_7_58) l_0_7_58) ?x12455) ?x12458) ?x12461) ?x12464)))
 (let ((?x13791 (+ (+ (+ (+ (+ (+ (- ?x13784 ?x12467) ?x12470) ?x12473) ?x12476) ?x12479) ?x12482) ?x12485)))
 (= ?x13791 0.0)))))))))))))))))))))
(assert
 (let ((?x11821 (* l_0_7_69 l_0_7_69)))
 (let ((?x11818 (* l_0_7_68 l_0_7_68)))
 (let ((?x11815 (* l_0_7_67 l_0_7_67)))
 (let ((?x11854 (* l_0_7_48 l_0_7_48)))
 (let ((?x13807 (- (+ (+ (* l_0_7_46 l_0_7_46) (* l_0_7_47 l_0_7_47)) ?x11854) ?x11815)))
 (= (- (- ?x13807 ?x11818) ?x11821) 0.0)))))))
(assert
 (let ((?x13847 (* l_0_7_90 l_0_7_90)))
 (let ((?x13845 (* l_0_7_89 l_0_7_89)))
 (let ((?x13843 (* l_0_7_88 l_0_7_88)))
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x12848 (* ?x9837 l_0_7_76)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x12846 (* ?x9834 l_0_7_75)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x12844 (* ?x9831 l_0_7_74)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x12840 (* ?x9824 l_0_7_55)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x12838 (* ?x9821 l_0_7_54)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x12836 (* ?x9818 l_0_7_53)))
 (let ((?x13835 (* l_0_7_174 l_0_7_174)))
 (let ((?x13833 (* l_0_7_173 l_0_7_173)))
 (let ((?x13831 (* l_0_7_172 l_0_7_172)))
 (let ((?x13829 (* l_0_7_153 l_0_7_153)))
 (let ((?x13827 (* l_0_7_152 l_0_7_152)))
 (let ((?x13825 (* l_0_7_151 l_0_7_151)))
 (let ((?x13823 (* l_0_7_111 l_0_7_111)))
 (let ((?x13826 (+ (+ (+ (* l_0_7_109 l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x13823) ?x13825)))
 (let ((?x13838 (+ (+ (- (- (- (+ (+ ?x13826 ?x13827) ?x13829) ?x13831) ?x13833) ?x13835) ?x12836) ?x12838)))
 (let ((?x13848 (- (- (- (- (- (- (+ ?x13838 ?x12840) ?x12844) ?x12846) ?x12848) ?x13843) ?x13845) ?x13847)))
 (= ?x13848 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x9837 (* 2.0 l_0_7_69)))
 (let ((?x12970 (* ?x9837 l_0_7_81)))
 (let ((?x9834 (* 2.0 l_0_7_68)))
 (let ((?x12968 (* ?x9834 l_0_7_80)))
 (let ((?x9831 (* 2.0 l_0_7_67)))
 (let ((?x12966 (* ?x9831 l_0_7_79)))
 (let ((?x9824 (* 2.0 l_0_7_48)))
 (let ((?x12962 (* ?x9824 l_0_7_60)))
 (let ((?x9821 (* 2.0 l_0_7_47)))
 (let ((?x12960 (* ?x9821 l_0_7_59)))
 (let ((?x9818 (* 2.0 l_0_7_46)))
 (let ((?x12958 (* ?x9818 l_0_7_58)))
 (let ((?x11787 (* l_0_7_132 l_0_7_132)))
 (let ((?x13886 (- (- (* (- l_0_7_130) l_0_7_130) (* l_0_7_131 l_0_7_131)) ?x11787)))
 (= (- (- (- (+ (+ (+ ?x13886 ?x12958) ?x12960) ?x12962) ?x12966) ?x12968) ?x12970) 0.0))))))))))))))))
(assert
 (let ((?x10474 (* 2.0 l_0_7_90)))
 (let ((?x13944 (* ?x10474 l_0_7_97)))
 (let ((?x10471 (* 2.0 l_0_7_89)))
 (let ((?x13942 (* ?x10471 l_0_7_96)))
 (let ((?x10468 (* 2.0 l_0_7_88)))
 (let ((?x13940 (* ?x10468 l_0_7_95)))
 (let ((?x12147 (* l_0_7_78 l_0_7_78)))
 (let ((?x12144 (* l_0_7_77 l_0_7_77)))
 (let ((?x12141 (* l_0_7_76 l_0_7_76)))
 (let ((?x12138 (* l_0_7_75 l_0_7_75)))
 (let ((?x12135 (* l_0_7_74 l_0_7_74)))
 (let ((?x12213 (* l_0_7_57 l_0_7_57)))
 (let ((?x12207 (* l_0_7_56 l_0_7_56)))
 (let ((?x12201 (* l_0_7_55 l_0_7_55)))
 (let ((?x12195 (* l_0_7_54 l_0_7_54)))
 (let ((?x12189 (* l_0_7_53 l_0_7_53)))
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x13928 (* ?x10451 l_0_7_181)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x13926 (* ?x10448 l_0_7_180)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x13924 (* ?x10445 l_0_7_179)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x13922 (* ?x10442 l_0_7_160)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x13920 (* ?x10439 l_0_7_159)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x13918 (* ?x10436 l_0_7_158)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x13916 (* ?x10428 l_0_7_118)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x13914 (* ?x10425 l_0_7_117)))
 (let ((?x13921 (+ (+ (+ (+ (* (* 2.0 l_0_7_109) l_0_7_116) ?x13914) ?x13916) ?x13918) ?x13920)))
 (let ((?x13932 (+ (+ (+ (- (- (- (+ ?x13921 ?x13922) ?x13924) ?x13926) ?x13928) ?x12189) ?x12195) ?x12201)))
 (let ((?x13939 (- (- (- (- (- (+ (+ ?x13932 ?x12207) ?x12213) ?x12135) ?x12138) ?x12141) ?x12144) ?x12147)))
 (= (- (- (- ?x13939 ?x13940) ?x13942) ?x13944) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13238 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x13235 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x13232 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x13229 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x13226 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x13223 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x13220 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x13217 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x13214 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x13211 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x14044 (* ?x10451 l_0_7_186)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x14042 (* ?x10448 l_0_7_185)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x14040 (* ?x10445 l_0_7_184)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x14038 (* ?x10442 l_0_7_165)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x14036 (* ?x10439 l_0_7_164)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x14034 (* ?x10436 l_0_7_163)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x11887 (* ?x9224 l_0_7_139)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x11885 (* ?x9221 l_0_7_138)))
 (let ((?x9218 (* 2.0 l_0_7_130)))
 (let ((?x11883 (* ?x9218 l_0_7_137)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x14029 (* ?x10428 l_0_7_123)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x14027 (* ?x10425 l_0_7_122)))
 (let ((?x10421 (* 2.0 l_0_7_109)))
 (let ((?x14025 (* ?x10421 l_0_7_121)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x14023 (* ?x11016 l_0_7_90)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x14021 (* ?x11013 l_0_7_89)))
 (let ((?x14028 (+ (+ (- (- (* (* (- 2.0) l_0_7_100) l_0_7_88) ?x14021) ?x14023) ?x14025) ?x14027)))
 (let ((?x14039 (+ (+ (+ (- (- (- (+ ?x14028 ?x14029) ?x11883) ?x11885) ?x11887) ?x14034) ?x14036) ?x14038)))
 (let ((?x14049 (+ (+ (+ (+ (- (- (- ?x14039 ?x14040) ?x14042) ?x14044) ?x13211) ?x13214) ?x13217) ?x13220)))
 (= (- (- (- (- (- (+ ?x14049 ?x13223) ?x13226) ?x13229) ?x13232) ?x13235) ?x13238) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12484 (* l_0_7_84 l_0_7_84)))
 (let ((?x12481 (* l_0_7_83 l_0_7_83)))
 (let ((?x12478 (* l_0_7_82 l_0_7_82)))
 (let ((?x12475 (* l_0_7_81 l_0_7_81)))
 (let ((?x12472 (* l_0_7_80 l_0_7_80)))
 (let ((?x12469 (* l_0_7_79 l_0_7_79)))
 (let ((?x12550 (* l_0_7_63 l_0_7_63)))
 (let ((?x12544 (* l_0_7_62 l_0_7_62)))
 (let ((?x12538 (* l_0_7_61 l_0_7_61)))
 (let ((?x12532 (* l_0_7_60 l_0_7_60)))
 (let ((?x12526 (* l_0_7_59 l_0_7_59)))
 (let ((?x12520 (* l_0_7_58 l_0_7_58)))
 (let ((?x9224 (* 2.0 l_0_7_132)))
 (let ((?x11994 (* ?x9224 l_0_7_144)))
 (let ((?x9221 (* 2.0 l_0_7_131)))
 (let ((?x11992 (* ?x9221 l_0_7_143)))
 (let ((?x14149 (+ (+ (- (- (* (* (- 2.0) l_0_7_130) l_0_7_142) ?x11992) ?x11994) ?x12520) ?x12526)))
 (let ((?x14156 (- (- (- (+ (+ (+ (+ ?x14149 ?x12532) ?x12538) ?x12544) ?x12550) ?x12469) ?x12472) ?x12475)))
 (= (- (- (- ?x14156 ?x12478) ?x12481) ?x12484) 0.0))))))))))))))))))))
(assert
 (let ((?x14228 (* l_0_7_99 l_0_7_99)))
 (let ((?x14226 (* l_0_7_98 l_0_7_98)))
 (let ((?x14224 (* l_0_7_97 l_0_7_97)))
 (let ((?x14222 (* l_0_7_96 l_0_7_96)))
 (let ((?x14220 (* l_0_7_95 l_0_7_95)))
 (let ((?x14218 (* l_0_7_183 l_0_7_183)))
 (let ((?x14216 (* l_0_7_182 l_0_7_182)))
 (let ((?x14214 (* l_0_7_181 l_0_7_181)))
 (let ((?x14212 (* l_0_7_180 l_0_7_180)))
 (let ((?x14210 (* l_0_7_179 l_0_7_179)))
 (let ((?x14208 (* l_0_7_162 l_0_7_162)))
 (let ((?x14206 (* l_0_7_161 l_0_7_161)))
 (let ((?x14204 (* l_0_7_160 l_0_7_160)))
 (let ((?x14202 (* l_0_7_159 l_0_7_159)))
 (let ((?x14200 (* l_0_7_158 l_0_7_158)))
 (let ((?x14198 (* l_0_7_120 l_0_7_120)))
 (let ((?x14196 (* l_0_7_119 l_0_7_119)))
 (let ((?x14194 (* l_0_7_118 l_0_7_118)))
 (let ((?x14197 (+ (+ (+ (* l_0_7_116 l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14194) ?x14196)))
 (let ((?x14211 (- (+ (+ (+ (+ (+ (+ ?x14197 ?x14198) ?x14200) ?x14202) ?x14204) ?x14206) ?x14208) ?x14210)))
 (let ((?x14225 (- (- (- (- (- (- (- ?x14211 ?x14212) ?x14214) ?x14216) ?x14218) ?x14220) ?x14222) ?x14224)))
 (= (- (- ?x14225 ?x14226) ?x14228) 0.0)))))))))))))))))))))))
(assert
 (let ((?x14321 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x14318 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x14315 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x14312 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x14309 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x14306 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x14303 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x14300 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x14297 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x14294 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x12097 (* l_0_7_141 l_0_7_141)))
 (let ((?x12095 (* l_0_7_140 l_0_7_140)))
 (let ((?x12091 (* l_0_7_139 l_0_7_139)))
 (let ((?x12089 (* l_0_7_138 l_0_7_138)))
 (let ((?x12087 (* l_0_7_137 l_0_7_137)))
 (let ((?x14286 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x14283 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x14280 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x14277 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x14274 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x14271 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x11019 (* 2.0 l_0_7_103)))
 (let ((?x14268 (* ?x11019 l_0_7_98)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x14266 (* ?x11016 l_0_7_97)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x14264 (* ?x11013 l_0_7_96)))
 (let ((?x14272 (- (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_95) ?x14264) ?x14266) ?x14268) ?x14271)))
 (let ((?x14289 (- (- (+ (+ (+ (+ (+ ?x14272 ?x14274) ?x14277) ?x14280) ?x14283) ?x14286) ?x12087) ?x12089)))
 (let ((?x14304 (+ (+ (+ (+ (- (- (- ?x14289 ?x12091) ?x12095) ?x12097) ?x14294) ?x14297) ?x14300) ?x14303)))
 (= (- (- (- (- (- (+ ?x14304 ?x14306) ?x14309) ?x14312) ?x14315) ?x14318) ?x14321) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x14481 (* l_0_7_189 l_0_7_189)))
 (let ((?x14479 (* l_0_7_188 l_0_7_188)))
 (let ((?x14477 (* l_0_7_187 l_0_7_187)))
 (let ((?x14475 (* l_0_7_186 l_0_7_186)))
 (let ((?x14473 (* l_0_7_185 l_0_7_185)))
 (let ((?x14471 (* l_0_7_184 l_0_7_184)))
 (let ((?x14469 (* l_0_7_168 l_0_7_168)))
 (let ((?x14467 (* l_0_7_167 l_0_7_167)))
 (let ((?x14465 (* l_0_7_166 l_0_7_166)))
 (let ((?x14463 (* l_0_7_165 l_0_7_165)))
 (let ((?x14461 (* l_0_7_164 l_0_7_164)))
 (let ((?x14459 (* l_0_7_163 l_0_7_163)))
 (let ((?x12253 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x12250 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x12244 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x12241 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x12238 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x14452 (* l_0_7_126 l_0_7_126)))
 (let ((?x14450 (* l_0_7_125 l_0_7_125)))
 (let ((?x14448 (* l_0_7_124 l_0_7_124)))
 (let ((?x14446 (* l_0_7_123 l_0_7_123)))
 (let ((?x14444 (* l_0_7_122 l_0_7_122)))
 (let ((?x14442 (* l_0_7_121 l_0_7_121)))
 (let ((?x14440 (* l_0_7_105 l_0_7_105)))
 (let ((?x14438 (* l_0_7_104 l_0_7_104)))
 (let ((?x14436 (* l_0_7_103 l_0_7_103)))
 (let ((?x14434 (* l_0_7_102 l_0_7_102)))
 (let ((?x14435 (- (- (* (- l_0_7_100) l_0_7_100) (* l_0_7_101 l_0_7_101)) ?x14434)))
 (let ((?x14449 (+ (+ (+ (+ (- (- (- ?x14435 ?x14436) ?x14438) ?x14440) ?x14442) ?x14444) ?x14446) ?x14448)))
 (let ((?x14458 (- (- (- (- (- (+ (+ ?x14449 ?x14450) ?x14452) ?x12238) ?x12241) ?x12244) ?x12250) ?x12253)))
 (let ((?x14472 (- (+ (+ (+ (+ (+ (+ ?x14458 ?x14459) ?x14461) ?x14463) ?x14465) ?x14467) ?x14469) ?x14471)))
 (= (- (- (- (- (- ?x14472 ?x14473) ?x14475) ?x14477) ?x14479) ?x14481) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x11464 (* l_0_7_85 l_0_7_85)))
 (let ((?x11448 (* l_0_7_169 l_0_7_169)))
 (let ((?x14559 (+ (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_148 l_0_7_148)) ?x11448)))
 (= (+ ?x14559 ?x11464) 0.0)))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x11913 (* ?x9534 l_0_7_88)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x11891 (* ?x9493 l_0_7_172)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x11889 (* ?x9490 l_0_7_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_109) ?x11889) ?x11891) ?x11913) 0.0))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x9535 (* ?x9534 l_0_7_91)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x9494 (* ?x9493 l_0_7_175)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x9491 (* ?x9490 l_0_7_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x9491) ?x9494) ?x9535) 0.0))))))))
(assert
 (let ((?x9534 (* 2.0 l_0_7_85)))
 (let ((?x12150 (* ?x9534 l_0_7_95)))
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x12103 (* ?x9493 l_0_7_179)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x12099 (* ?x9490 l_0_7_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_116) ?x12099) ?x12103) ?x12150) 0.0))))))))
(assert
 (let ((?x9493 (* 2.0 l_0_7_169)))
 (let ((?x12260 (* ?x9493 l_0_7_184)))
 (let ((?x9490 (* 2.0 l_0_7_148)))
 (let ((?x12255 (* ?x9490 l_0_7_163)))
 (let ((?x9466 (* 2.0 l_0_7_106)))
 (let ((?x12228 (* ?x9466 l_0_7_121)))
 (= (+ (- (- (* (* 2.0 l_0_7_100) l_0_7_85) ?x12228) ?x12255) ?x12260) 0.0))))))))
(assert
 (let ((?x13847 (* l_0_7_90 l_0_7_90)))
 (let ((?x13845 (* l_0_7_89 l_0_7_89)))
 (let ((?x13843 (* l_0_7_88 l_0_7_88)))
 (let ((?x13835 (* l_0_7_174 l_0_7_174)))
 (let ((?x13833 (* l_0_7_173 l_0_7_173)))
 (let ((?x13831 (* l_0_7_172 l_0_7_172)))
 (let ((?x13829 (* l_0_7_153 l_0_7_153)))
 (let ((?x13827 (* l_0_7_152 l_0_7_152)))
 (let ((?x13825 (* l_0_7_151 l_0_7_151)))
 (let ((?x13823 (* l_0_7_111 l_0_7_111)))
 (let ((?x14621 (- (- (* (- l_0_7_109) l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x13823)))
 (let ((?x14628 (+ (+ (+ (+ (- (- (- ?x14621 ?x13825) ?x13827) ?x13829) ?x13831) ?x13833) ?x13835) ?x13843)))
 (= (+ (+ ?x14628 ?x13845) ?x13847) 0.0))))))))))))))
(assert
 (let ((?x10474 (* 2.0 l_0_7_90)))
 (let ((?x10475 (* ?x10474 l_0_7_93)))
 (let ((?x10471 (* 2.0 l_0_7_89)))
 (let ((?x10472 (* ?x10471 l_0_7_92)))
 (let ((?x10468 (* 2.0 l_0_7_88)))
 (let ((?x10469 (* ?x10468 l_0_7_91)))
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x10452 (* ?x10451 l_0_7_177)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x10449 (* ?x10448 l_0_7_176)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x10446 (* ?x10445 l_0_7_175)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x10443 (* ?x10442 l_0_7_156)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x10440 (* ?x10439 l_0_7_155)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x10437 (* ?x10436 l_0_7_154)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x10429 (* ?x10428 l_0_7_114)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x10426 (* ?x10425 l_0_7_113)))
 (let ((?x14655 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_112) ?x10426) ?x10429) ?x10437) ?x10440)))
 (let ((?x14662 (+ (+ (+ (+ (+ (+ (- ?x14655 ?x10443) ?x10446) ?x10449) ?x10452) ?x10469) ?x10472) ?x10475)))
 (= ?x14662 0.0))))))))))))))))))))))))))
(assert
 (let ((?x10474 (* 2.0 l_0_7_90)))
 (let ((?x13944 (* ?x10474 l_0_7_97)))
 (let ((?x10471 (* 2.0 l_0_7_89)))
 (let ((?x13942 (* ?x10471 l_0_7_96)))
 (let ((?x10468 (* 2.0 l_0_7_88)))
 (let ((?x13940 (* ?x10468 l_0_7_95)))
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x13928 (* ?x10451 l_0_7_181)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x13926 (* ?x10448 l_0_7_180)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x13924 (* ?x10445 l_0_7_179)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x13922 (* ?x10442 l_0_7_160)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x13920 (* ?x10439 l_0_7_159)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x13918 (* ?x10436 l_0_7_158)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x13916 (* ?x10428 l_0_7_118)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x13914 (* ?x10425 l_0_7_117)))
 (let ((?x14691 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_116) ?x13914) ?x13916) ?x13918) ?x13920)))
 (let ((?x14698 (+ (+ (+ (+ (+ (+ (- ?x14691 ?x13922) ?x13924) ?x13926) ?x13928) ?x13940) ?x13942) ?x13944)))
 (= ?x14698 0.0))))))))))))))))))))))))))
(assert
 (let ((?x10451 (* 2.0 l_0_7_174)))
 (let ((?x14044 (* ?x10451 l_0_7_186)))
 (let ((?x10448 (* 2.0 l_0_7_173)))
 (let ((?x14042 (* ?x10448 l_0_7_185)))
 (let ((?x10445 (* 2.0 l_0_7_172)))
 (let ((?x14040 (* ?x10445 l_0_7_184)))
 (let ((?x10442 (* 2.0 l_0_7_153)))
 (let ((?x14038 (* ?x10442 l_0_7_165)))
 (let ((?x10439 (* 2.0 l_0_7_152)))
 (let ((?x14036 (* ?x10439 l_0_7_164)))
 (let ((?x10436 (* 2.0 l_0_7_151)))
 (let ((?x14034 (* ?x10436 l_0_7_163)))
 (let ((?x10428 (* 2.0 l_0_7_111)))
 (let ((?x14029 (* ?x10428 l_0_7_123)))
 (let ((?x10425 (* 2.0 l_0_7_110)))
 (let ((?x14027 (* ?x10425 l_0_7_122)))
 (let ((?x10421 (* 2.0 l_0_7_109)))
 (let ((?x14025 (* ?x10421 l_0_7_121)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x14023 (* ?x11016 l_0_7_90)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x14021 (* ?x11013 l_0_7_89)))
 (let ((?x14721 (- (- (+ (+ (* (* 2.0 l_0_7_100) l_0_7_88) ?x14021) ?x14023) ?x14025) ?x14027)))
 (let ((?x14728 (+ (+ (+ (- (- (- (- ?x14721 ?x14029) ?x14034) ?x14036) ?x14038) ?x14040) ?x14042) ?x14044)))
 (= ?x14728 0.0))))))))))))))))))))))))))
(assert
 (let ((?x10729 (* l_0_7_94 l_0_7_94)))
 (let ((?x10727 (* l_0_7_93 l_0_7_93)))
 (let ((?x10725 (* l_0_7_92 l_0_7_92)))
 (let ((?x10723 (* l_0_7_91 l_0_7_91)))
 (let ((?x10709 (* l_0_7_178 l_0_7_178)))
 (let ((?x10707 (* l_0_7_177 l_0_7_177)))
 (let ((?x10705 (* l_0_7_176 l_0_7_176)))
 (let ((?x10703 (* l_0_7_175 l_0_7_175)))
 (let ((?x10701 (* l_0_7_157 l_0_7_157)))
 (let ((?x10699 (* l_0_7_156 l_0_7_156)))
 (let ((?x10697 (* l_0_7_155 l_0_7_155)))
 (let ((?x10695 (* l_0_7_154 l_0_7_154)))
 (let ((?x10689 (* l_0_7_115 l_0_7_115)))
 (let ((?x10687 (* l_0_7_114 l_0_7_114)))
 (let ((?x14754 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x10687)))
 (let ((?x14761 (+ (+ (- (- (- (- (- ?x14754 ?x10689) ?x10695) ?x10697) ?x10699) ?x10701) ?x10703) ?x10705)))
 (= (+ (+ (+ (+ (+ (+ ?x14761 ?x10707) ?x10709) ?x10723) ?x10725) ?x10727) ?x10729) 0.0))))))))))))))))))
(assert
 (let ((?x10911 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x10908 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x10905 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x10902 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x10888 (* 2.0 l_0_7_178)))
 (let ((?x10889 (* ?x10888 l_0_7_182)))
 (let ((?x10885 (* 2.0 l_0_7_177)))
 (let ((?x10886 (* ?x10885 l_0_7_181)))
 (let ((?x10882 (* 2.0 l_0_7_176)))
 (let ((?x10883 (* ?x10882 l_0_7_180)))
 (let ((?x10879 (* 2.0 l_0_7_175)))
 (let ((?x10880 (* ?x10879 l_0_7_179)))
 (let ((?x10876 (* 2.0 l_0_7_157)))
 (let ((?x10877 (* ?x10876 l_0_7_161)))
 (let ((?x10873 (* 2.0 l_0_7_156)))
 (let ((?x10874 (* ?x10873 l_0_7_160)))
 (let ((?x10870 (* 2.0 l_0_7_155)))
 (let ((?x10871 (* ?x10870 l_0_7_159)))
 (let ((?x10867 (* 2.0 l_0_7_154)))
 (let ((?x10868 (* ?x10867 l_0_7_158)))
 (let ((?x10856 (* 2.0 l_0_7_115)))
 (let ((?x10857 (* ?x10856 l_0_7_119)))
 (let ((?x10853 (* 2.0 l_0_7_114)))
 (let ((?x10854 (* ?x10853 l_0_7_118)))
 (let ((?x10850 (* 2.0 l_0_7_113)))
 (let ((?x10851 (* ?x10850 l_0_7_117)))
 (let ((?x14790 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_116) ?x10851) ?x10854) ?x10857) ?x10868)))
 (let ((?x14797 (+ (+ (+ (+ (- (- (- ?x14790 ?x10871) ?x10874) ?x10877) ?x10880) ?x10883) ?x10886) ?x10889)))
 (= (+ (+ (+ (+ ?x14797 ?x10902) ?x10905) ?x10908) ?x10911) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x10888 (* 2.0 l_0_7_178)))
 (let ((?x11060 (* ?x10888 l_0_7_187)))
 (let ((?x10885 (* 2.0 l_0_7_177)))
 (let ((?x11058 (* ?x10885 l_0_7_186)))
 (let ((?x10882 (* 2.0 l_0_7_176)))
 (let ((?x11056 (* ?x10882 l_0_7_185)))
 (let ((?x10879 (* 2.0 l_0_7_175)))
 (let ((?x11054 (* ?x10879 l_0_7_184)))
 (let ((?x10876 (* 2.0 l_0_7_157)))
 (let ((?x11052 (* ?x10876 l_0_7_166)))
 (let ((?x10873 (* 2.0 l_0_7_156)))
 (let ((?x11050 (* ?x10873 l_0_7_165)))
 (let ((?x10870 (* 2.0 l_0_7_155)))
 (let ((?x11048 (* ?x10870 l_0_7_164)))
 (let ((?x10867 (* 2.0 l_0_7_154)))
 (let ((?x11046 (* ?x10867 l_0_7_163)))
 (let ((?x10856 (* 2.0 l_0_7_115)))
 (let ((?x11030 (* ?x10856 l_0_7_124)))
 (let ((?x10853 (* 2.0 l_0_7_114)))
 (let ((?x11028 (* ?x10853 l_0_7_123)))
 (let ((?x10850 (* 2.0 l_0_7_113)))
 (let ((?x11026 (* ?x10850 l_0_7_122)))
 (let ((?x10840 (* 2.0 l_0_7_112)))
 (let ((?x11024 (* ?x10840 l_0_7_121)))
 (let ((?x11019 (* 2.0 l_0_7_103)))
 (let ((?x11020 (* ?x11019 l_0_7_94)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x11017 (* ?x11016 l_0_7_93)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x11014 (* ?x11013 l_0_7_92)))
 (let ((?x14830 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_91) ?x11014) ?x11017) ?x11020) ?x11024)))
 (let ((?x14837 (- (- (- (- (- (- (- ?x14830 ?x11026) ?x11028) ?x11030) ?x11046) ?x11048) ?x11050) ?x11052)))
 (= (+ (+ (+ (+ ?x14837 ?x11054) ?x11056) ?x11058) ?x11060) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14228 (* l_0_7_99 l_0_7_99)))
 (let ((?x14226 (* l_0_7_98 l_0_7_98)))
 (let ((?x14224 (* l_0_7_97 l_0_7_97)))
 (let ((?x14222 (* l_0_7_96 l_0_7_96)))
 (let ((?x14220 (* l_0_7_95 l_0_7_95)))
 (let ((?x14218 (* l_0_7_183 l_0_7_183)))
 (let ((?x14216 (* l_0_7_182 l_0_7_182)))
 (let ((?x14214 (* l_0_7_181 l_0_7_181)))
 (let ((?x14212 (* l_0_7_180 l_0_7_180)))
 (let ((?x14210 (* l_0_7_179 l_0_7_179)))
 (let ((?x14208 (* l_0_7_162 l_0_7_162)))
 (let ((?x14206 (* l_0_7_161 l_0_7_161)))
 (let ((?x14204 (* l_0_7_160 l_0_7_160)))
 (let ((?x14202 (* l_0_7_159 l_0_7_159)))
 (let ((?x14200 (* l_0_7_158 l_0_7_158)))
 (let ((?x14198 (* l_0_7_120 l_0_7_120)))
 (let ((?x14196 (* l_0_7_119 l_0_7_119)))
 (let ((?x14194 (* l_0_7_118 l_0_7_118)))
 (let ((?x14873 (- (- (* (- l_0_7_116) l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14194)))
 (let ((?x14880 (- (- (- (- (- (- (- ?x14873 ?x14196) ?x14198) ?x14200) ?x14202) ?x14204) ?x14206) ?x14208)))
 (let ((?x14887 (+ (+ (+ (+ (+ (+ (+ ?x14880 ?x14210) ?x14212) ?x14214) ?x14216) ?x14218) ?x14220) ?x14222)))
 (= (+ (+ (+ ?x14887 ?x14224) ?x14226) ?x14228) 0.0)))))))))))))))))))))))
(assert
 (let ((?x14321 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x14318 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x14315 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x14312 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x14309 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x14306 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x14303 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x14300 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x14297 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x14294 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x14286 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x14283 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x14280 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x14277 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x14274 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x14271 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x11019 (* 2.0 l_0_7_103)))
 (let ((?x14268 (* ?x11019 l_0_7_98)))
 (let ((?x11016 (* 2.0 l_0_7_102)))
 (let ((?x14266 (* ?x11016 l_0_7_97)))
 (let ((?x11013 (* 2.0 l_0_7_101)))
 (let ((?x14264 (* ?x11013 l_0_7_96)))
 (let ((?x14924 (+ (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_95) ?x14264) ?x14266) ?x14268) ?x14271)))
 (let ((?x14931 (- (- (- (- (- (- (- ?x14924 ?x14274) ?x14277) ?x14280) ?x14283) ?x14286) ?x14294) ?x14297)))
 (let ((?x14938 (+ (+ (+ (+ (- (- (- ?x14931 ?x14300) ?x14303) ?x14306) ?x14309) ?x14312) ?x14315) ?x14318)))
 (= (+ ?x14938 ?x14321) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x14481 (* l_0_7_189 l_0_7_189)))
 (let ((?x14479 (* l_0_7_188 l_0_7_188)))
 (let ((?x14477 (* l_0_7_187 l_0_7_187)))
 (let ((?x14475 (* l_0_7_186 l_0_7_186)))
 (let ((?x14473 (* l_0_7_185 l_0_7_185)))
 (let ((?x14471 (* l_0_7_184 l_0_7_184)))
 (let ((?x14469 (* l_0_7_168 l_0_7_168)))
 (let ((?x14467 (* l_0_7_167 l_0_7_167)))
 (let ((?x14465 (* l_0_7_166 l_0_7_166)))
 (let ((?x14463 (* l_0_7_165 l_0_7_165)))
 (let ((?x14461 (* l_0_7_164 l_0_7_164)))
 (let ((?x14459 (* l_0_7_163 l_0_7_163)))
 (let ((?x14452 (* l_0_7_126 l_0_7_126)))
 (let ((?x14450 (* l_0_7_125 l_0_7_125)))
 (let ((?x14448 (* l_0_7_124 l_0_7_124)))
 (let ((?x14446 (* l_0_7_123 l_0_7_123)))
 (let ((?x14444 (* l_0_7_122 l_0_7_122)))
 (let ((?x14442 (* l_0_7_121 l_0_7_121)))
 (let ((?x14440 (* l_0_7_105 l_0_7_105)))
 (let ((?x14438 (* l_0_7_104 l_0_7_104)))
 (let ((?x14436 (* l_0_7_103 l_0_7_103)))
 (let ((?x14434 (* l_0_7_102 l_0_7_102)))
 (let ((?x14976 (+ (+ (+ (* l_0_7_100 l_0_7_100) (* l_0_7_101 l_0_7_101)) ?x14434) ?x14436)))
 (let ((?x14983 (- (- (- (- (- (+ (+ ?x14976 ?x14438) ?x14440) ?x14442) ?x14444) ?x14446) ?x14448) ?x14450)))
 (let ((?x14990 (- (- (- (- (- (- (- ?x14983 ?x14452) ?x14459) ?x14461) ?x14463) ?x14465) ?x14467) ?x14469)))
 (= (+ (+ (+ (+ (+ (+ ?x14990 ?x14471) ?x14473) ?x14475) ?x14477) ?x14479) ?x14481) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x12419 (* l_0_7_147 l_0_7_147)))
 (let ((?x12417 (* l_0_7_146 l_0_7_146)))
 (let ((?x12415 (* l_0_7_145 l_0_7_145)))
 (let ((?x12413 (* l_0_7_144 l_0_7_144)))
 (let ((?x15028 (- (- (* (- l_0_7_142) l_0_7_142) (* l_0_7_143 l_0_7_143)) ?x12413)))
 (= (- (- (- ?x15028 ?x12415) ?x12417) ?x12419) 0.0)))))))
(assert
 (>= l_0_7_1 0.0))
(assert
 (>= l_0_7_3 0.0))
(assert
 (>= l_0_7_6 0.0))
(assert
 (>= l_0_7_10 0.0))
(assert
 (>= l_0_7_15 0.0))
(assert
 (>= l_0_7_21 0.0))
(assert
 (>= l_0_7_22 0.0))
(assert
 (>= l_0_7_24 0.0))
(assert
 (>= l_0_7_27 0.0))
(assert
 (>= l_0_7_31 0.0))
(assert
 (>= l_0_7_36 0.0))
(assert
 (>= l_0_7_42 0.0))
(assert
 (>= l_0_7_43 0.0))
(assert
 (>= l_0_7_45 0.0))
(assert
 (>= l_0_7_48 0.0))
(assert
 (>= l_0_7_52 0.0))
(assert
 (>= l_0_7_57 0.0))
(assert
 (>= l_0_7_63 0.0))
(assert
 (>= l_0_7_64 0.0))
(assert
 (>= l_0_7_66 0.0))
(assert
 (>= l_0_7_69 0.0))
(assert
 (>= l_0_7_73 0.0))
(assert
 (>= l_0_7_78 0.0))
(assert
 (>= l_0_7_84 0.0))
(assert
 (>= l_0_7_85 0.0))
(assert
 (>= l_0_7_87 0.0))
(assert
 (>= l_0_7_90 0.0))
(assert
 (>= l_0_7_94 0.0))
(assert
 (>= l_0_7_99 0.0))
(assert
 (>= l_0_7_105 0.0))
(assert
 (>= l_0_7_106 0.0))
(assert
 (>= l_0_7_108 0.0))
(assert
 (>= l_0_7_111 0.0))
(assert
 (>= l_0_7_115 0.0))
(assert
 (>= l_0_7_120 0.0))
(assert
 (>= l_0_7_126 0.0))
(assert
 (>= l_0_7_127 0.0))
(assert
 (>= l_0_7_129 0.0))
(assert
 (>= l_0_7_132 0.0))
(assert
 (>= l_0_7_136 0.0))
(assert
 (>= l_0_7_141 0.0))
(assert
 (>= l_0_7_147 0.0))
(assert
 (>= l_0_7_148 0.0))
(assert
 (>= l_0_7_150 0.0))
(assert
 (>= l_0_7_153 0.0))
(assert
 (>= l_0_7_157 0.0))
(assert
 (>= l_0_7_162 0.0))
(assert
 (>= l_0_7_168 0.0))
(assert
 (>= l_0_7_169 0.0))
(assert
 (>= l_0_7_171 0.0))
(assert
 (>= l_0_7_174 0.0))
(assert
 (>= l_0_7_178 0.0))
(assert
 (>= l_0_7_183 0.0))
(assert
 (>= l_0_7_189 0.0))
(assert
 (>= l_0_7_190 0.0))
(assert
 (>= l_0_7_192 0.0))
(assert
 (>= l_0_7_195 0.0))
(assert
 (>= l_0_7_199 0.0))
(assert
 (>= l_0_7_204 0.0))
(assert
 (>= l_0_7_210 0.0))
(assert
 (let ((?x15153 (* l_0_8_66 l_0_8_66)))
 (let ((?x15154 (* 3.0 ?x15153)))
 (let ((?x15150 (* l_0_8_65 l_0_8_65)))
 (let ((?x15151 (* 3.0 ?x15150)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x15148 (* ?x15147 l_0_8_65)))
 (let ((?x15145 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (let ((?x15142 (* (* 3.0 l_0_8_44) l_0_8_44)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x15139 (* ?x15138 l_0_8_44)))
 (let ((?x15135 (* l_0_8_3 l_0_8_3)))
 (let ((?x15136 (* 6.0 ?x15135)))
 (let ((?x15133 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15130 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x15127 (* ?x15126 l_0_8_23)))
 (let ((?x15120 (* l_0_8_2 l_0_8_2)))
 (let ((?x15121 (* 6.0 ?x15120)))
 (let ((?x15115 (* l_0_8_129 l_0_8_129)))
 (let ((?x15116 (+ (+ (* (* 12.0 l_0_8_1) l_0_8_2) (* l_0_8_128 l_0_8_128)) ?x15115)))
 (let ((?x15125 (- (+ (- ?x15116 (* (* 2.0 l_0_8_190) l_0_8_191)) ?x15121) (* (* 2.0 l_0_8_211) l_0_8_212))))
 (let ((?x15146 (- (- (- (+ (- (- (- ?x15125 ?x15127) ?x15130) ?x15133) ?x15136) ?x15139) ?x15142) ?x15145)))
 (= (+ (+ (+ (+ ?x15146 ?x15148) ?x15151) ?x15154) 6.0) 0.0))))))))))))))))))))))))
(assert
 (let ((?x15135 (* l_0_8_3 l_0_8_3)))
 (let ((?x15136 (* 6.0 ?x15135)))
 (let ((?x15133 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15130 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15223 (* l_0_8_213 l_0_8_213)))
 (let ((?x15221 (* l_0_8_212 l_0_8_212)))
 (let ((?x15120 (* l_0_8_2 l_0_8_2)))
 (let ((?x15121 (* 6.0 ?x15120)))
 (let ((?x15218 (* l_0_8_192 l_0_8_192)))
 (let ((?x15222 (- (+ (- (- (- _a_12_) (* l_0_8_191 l_0_8_191)) ?x15218) ?x15121) ?x15221)))
 (let ((?x15230 (- (+ (- (- (- ?x15222 ?x15223) ?x15130) ?x15133) ?x15136) (* (* 1.0 l_0_8_44) l_0_8_44))))
 (let ((?x15235 (+ (- ?x15230 (* (* 1.0 l_0_8_45) l_0_8_45)) (* 1.0 (* l_0_8_65 l_0_8_65)))))
 (= (+ (+ ?x15235 (* 1.0 (* l_0_8_66 l_0_8_66))) 12.0) 0.0))))))))))))))
(assert
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x15309 (* ?x15308 l_0_8_71)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x15306 (* ?x15305 l_0_8_70)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x15303 (* ?x15302 l_0_8_50)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x15300 (* ?x15299 l_0_8_49)))
 (let ((?x15135 (* l_0_8_3 l_0_8_3)))
 (let ((?x15295 (* 12.0 l_0_8_3)))
 (let ((?x15296 (* ?x15295 l_0_8_8)))
 (let ((?x15186 (* l_0_8_24 l_0_8_24)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x15292 (* ?x15291 l_0_8_29)))
 (let ((?x15180 (* l_0_8_23 l_0_8_23)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x15288 (* ?x15287 l_0_8_28)))
 (let ((?x15120 (* l_0_8_2 l_0_8_2)))
 (let ((?x15277 (* 12.0 l_0_8_2)))
 (let ((?x15278 (* ?x15277 l_0_8_7)))
 (let ((?x15276 (- (- (- _a_13_) (* (* 2.0 l_0_8_191) l_0_8_196)) (* (* 2.0 l_0_8_192) l_0_8_197))))
 (let ((?x15286 (- (- (- (+ ?x15276 ?x15278) ?x15120) (* (* 2.0 l_0_8_212) l_0_8_217)) (* (* 2.0 l_0_8_213) l_0_8_218))))
 (let ((?x15301 (- (- (+ (+ (- (+ (- ?x15286 ?x15288) ?x15180) ?x15292) ?x15186) ?x15296) ?x15135) ?x15300)))
 (= (+ (+ (- ?x15301 ?x15303) ?x15306) ?x15309) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x15410 (* ?x15409 l_0_8_71)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x15407 (* ?x15406 l_0_8_70)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x15404 (* ?x15403 l_0_8_70)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x15401 (* ?x15400 l_0_8_50)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x15398 (* ?x15397 l_0_8_49)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x15395 (* ?x15394 l_0_8_49)))
 (let ((?x15392 (* l_0_8_22 l_0_8_22)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x15390 (* ?x15126 l_0_8_28)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x15388 (* ?x15387 l_0_8_133)))
 (let ((?x15389 (+ (- (* (* 12.0 l_0_8_1) l_0_8_7) (* l_0_8_1 l_0_8_1)) ?x15388)))
 (let ((?x15408 (+ (+ (- (- (- (+ (- ?x15389 ?x15390) ?x15392) ?x15395) ?x15398) ?x15401) ?x15404) ?x15407)))
 (= (+ ?x15408 ?x15410) 0.0)))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x15410 (* ?x15409 l_0_8_71)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x15407 (* ?x15406 l_0_8_70)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x15478 (* ?x15147 l_0_8_70)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x15401 (* ?x15400 l_0_8_50)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x15398 (* ?x15397 l_0_8_49)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x15474 (* ?x15138 l_0_8_49)))
 (let ((?x15295 (* 12.0 l_0_8_3)))
 (let ((?x15296 (* ?x15295 l_0_8_8)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x15292 (* ?x15291 l_0_8_29)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x15288 (* ?x15287 l_0_8_28)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x15390 (* ?x15126 l_0_8_28)))
 (let ((?x15277 (* 12.0 l_0_8_2)))
 (let ((?x15278 (* ?x15277 l_0_8_7)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x15460 (* ?x15459 l_0_8_134)))
 (let ((?x15448 (* 2.0 l_0_8_128)))
 (let ((?x15457 (* ?x15448 l_0_8_133)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x15375 (* ?x15111 l_0_8_7)))
 (let ((?x15463 (- (+ (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_2) ?x15375) ?x15457) ?x15460) (* (* 2.0 l_0_8_190) l_0_8_196))))
 (let ((?x15469 (+ (- (+ ?x15463 ?x15278) (* (* 2.0 l_0_8_211) l_0_8_217)) (* (* 2.0 l_0_8_22) l_0_8_23))))
 (let ((?x15477 (- (- (- (+ (- (- (- ?x15469 ?x15390) ?x15288) ?x15292) ?x15296) ?x15474) ?x15398) ?x15401)))
 (= (+ (+ (+ ?x15477 ?x15478) ?x15407) ?x15410) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x15577 (* ?x15576 l_0_8_72)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x15574 (* ?x15573 l_0_8_71)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x15571 (* ?x15570 l_0_8_70)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x15478 (* ?x15147 l_0_8_70)))
 (let ((?x15567 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x15564 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x15561 (* ?x15560 l_0_8_51)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x15558 (* ?x15557 l_0_8_50)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x15474 (* ?x15138 l_0_8_49)))
 (let ((?x15551 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x15548 (* ?x15547 l_0_8_30)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x15545 (* ?x15544 l_0_8_29)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x15542 (* ?x15541 l_0_8_28)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x15537 (* ?x15536 l_0_8_135)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x15534 (* ?x15533 l_0_8_134)))
 (let ((?x15532 (+ (* (* (- 2.0) l_0_8_1) l_0_8_4) (* (* 2.0 l_0_8_130) l_0_8_133))))
 (let ((?x15543 (- (+ (+ (+ ?x15532 ?x15534) ?x15537) (* (* 2.0 l_0_8_22) l_0_8_25)) ?x15542)))
 (let ((?x15556 (- (+ (+ (- (- ?x15543 ?x15545) ?x15548) ?x15551) ?x15474) (* (* 6.0 l_0_8_46) l_0_8_49))))
 (let ((?x15575 (+ (+ (- (+ (+ (- (- ?x15556 ?x15558) ?x15561) ?x15564) ?x15567) ?x15478) ?x15571) ?x15574)))
 (= (+ ?x15575 ?x15577) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x15703 (* l_0_8_9 l_0_8_9)))
 (let ((?x15704 (* 6.0 ?x15703)))
 (let ((?x15700 (* l_0_8_8 l_0_8_8)))
 (let ((?x15701 (* 6.0 ?x15700)))
 (let ((?x15697 (* l_0_8_73 l_0_8_73)))
 (let ((?x15698 (* 3.0 ?x15697)))
 (let ((?x15694 (* l_0_8_72 l_0_8_72)))
 (let ((?x15695 (* 3.0 ?x15694)))
 (let ((?x15691 (* l_0_8_71 l_0_8_71)))
 (let ((?x15692 (* 3.0 ?x15691)))
 (let ((?x15688 (* l_0_8_70 l_0_8_70)))
 (let ((?x15689 (* 3.0 ?x15688)))
 (let ((?x15685 (* l_0_8_7 l_0_8_7)))
 (let ((?x15686 (* 6.0 ?x15685)))
 (let ((?x15683 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x15680 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x15677 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x15671 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x15668 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x15665 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x15662 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x15657 (* l_0_8_136 l_0_8_136)))
 (let ((?x15655 (* l_0_8_135 l_0_8_135)))
 (let ((?x15653 (* l_0_8_134 l_0_8_134)))
 (let ((?x15651 (* l_0_8_133 l_0_8_133)))
 (let ((?x15648 (* l_0_8_10 l_0_8_10)))
 (let ((?x15649 (* 6.0 ?x15648)))
 (let ((?x15656 (+ (+ (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) ?x15649) ?x15651) ?x15653) ?x15655)))
 (let ((?x15666 (- (- (+ (+ ?x15656 ?x15657) (* (* 2.0 l_0_8_22) l_0_8_28)) ?x15662) ?x15665)))
 (let ((?x15678 (- (- (- (- ?x15666 ?x15668) ?x15671) (* (* 3.0 l_0_8_49) l_0_8_49)) ?x15677)))
 (let ((?x15699 (+ (+ (+ (+ (+ (- (- ?x15678 ?x15680) ?x15683) ?x15686) ?x15689) ?x15692) ?x15695) ?x15698)))
 (= (+ (+ ?x15699 ?x15701) ?x15704) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x15847 (* ?x15846 l_0_8_91)))
 (let ((?x15843 (* 6.0 l_0_8_73)))
 (let ((?x15844 (* ?x15843 l_0_8_77)))
 (let ((?x15840 (* 6.0 l_0_8_72)))
 (let ((?x15841 (* ?x15840 l_0_8_76)))
 (let ((?x15837 (* 6.0 l_0_8_71)))
 (let ((?x15838 (* ?x15837 l_0_8_75)))
 (let ((?x15834 (* 6.0 l_0_8_70)))
 (let ((?x15835 (* ?x15834 l_0_8_74)))
 (let ((?x15831 (* 6.0 l_0_8_52)))
 (let ((?x15832 (* ?x15831 l_0_8_56)))
 (let ((?x15828 (* 6.0 l_0_8_51)))
 (let ((?x15829 (* ?x15828 l_0_8_55)))
 (let ((?x15825 (* 6.0 l_0_8_50)))
 (let ((?x15826 (* ?x15825 l_0_8_54)))
 (let ((?x15819 (* 12.0 l_0_8_31)))
 (let ((?x15820 (* ?x15819 l_0_8_35)))
 (let ((?x15816 (* 12.0 l_0_8_30)))
 (let ((?x15817 (* ?x15816 l_0_8_34)))
 (let ((?x15813 (* 12.0 l_0_8_29)))
 (let ((?x15814 (* ?x15813 l_0_8_33)))
 (let ((?x15810 (* 12.0 l_0_8_28)))
 (let ((?x15811 (* ?x15810 l_0_8_32)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x15806 (* ?x15805 l_0_8_175)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x15803 (* ?x15802 l_0_8_154)))
 (let ((?x15799 (* 2.0 l_0_8_136)))
 (let ((?x15800 (* ?x15799 l_0_8_140)))
 (let ((?x15796 (* 2.0 l_0_8_135)))
 (let ((?x15797 (* ?x15796 l_0_8_139)))
 (let ((?x15793 (* 2.0 l_0_8_134)))
 (let ((?x15794 (* ?x15793 l_0_8_138)))
 (let ((?x15790 (* 2.0 l_0_8_133)))
 (let ((?x15791 (* ?x15790 l_0_8_137)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x15788 (* ?x15787 l_0_8_9)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x15785 (* ?x15784 l_0_8_8)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x15782 (* ?x15781 l_0_8_7)))
 (let ((?x15775 (* 12.0 l_0_8_10)))
 (let ((?x15776 (* ?x15775 l_0_8_14)))
 (let ((?x15780 (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_11) ?x15776) (* (* 2.0 l_0_8_106) l_0_8_112))))
 (let ((?x15801 (+ (+ (+ (+ (+ (+ (+ ?x15780 ?x15782) ?x15785) ?x15788) ?x15791) ?x15794) ?x15797) ?x15800)))
 (let ((?x15812 (- (+ (- (+ ?x15801 ?x15803) ?x15806) (* (* 2.0 l_0_8_22) l_0_8_32)) ?x15811)))
 (let ((?x15824 (- (- (- (- ?x15812 ?x15814) ?x15817) ?x15820) (* (* 6.0 l_0_8_49) l_0_8_53))))
 (let ((?x15845 (+ (+ (+ (+ (- (- (- ?x15824 ?x15826) ?x15829) ?x15832) ?x15835) ?x15838) ?x15841) ?x15844)))
 (= (- ?x15845 ?x15847) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15843 (* 6.0 l_0_8_73)))
 (let ((?x16008 (* ?x15843 l_0_8_82)))
 (let ((?x15840 (* 6.0 l_0_8_72)))
 (let ((?x16006 (* ?x15840 l_0_8_81)))
 (let ((?x15837 (* 6.0 l_0_8_71)))
 (let ((?x16004 (* ?x15837 l_0_8_80)))
 (let ((?x15834 (* 6.0 l_0_8_70)))
 (let ((?x16002 (* ?x15834 l_0_8_79)))
 (let ((?x15831 (* 6.0 l_0_8_52)))
 (let ((?x16000 (* ?x15831 l_0_8_61)))
 (let ((?x15828 (* 6.0 l_0_8_51)))
 (let ((?x15998 (* ?x15828 l_0_8_60)))
 (let ((?x15825 (* 6.0 l_0_8_50)))
 (let ((?x15996 (* ?x15825 l_0_8_59)))
 (let ((?x15819 (* 12.0 l_0_8_31)))
 (let ((?x15992 (* ?x15819 l_0_8_40)))
 (let ((?x15816 (* 12.0 l_0_8_30)))
 (let ((?x15990 (* ?x15816 l_0_8_39)))
 (let ((?x15813 (* 12.0 l_0_8_29)))
 (let ((?x15988 (* ?x15813 l_0_8_38)))
 (let ((?x15810 (* 12.0 l_0_8_28)))
 (let ((?x15986 (* ?x15810 l_0_8_37)))
 (let ((?x15981 (* 12.0 l_0_8_18)))
 (let ((?x15982 (* ?x15981 l_0_8_9)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x15979 (* ?x15978 l_0_8_8)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x15976 (* ?x15975 l_0_8_7)))
 (let ((?x15799 (* 2.0 l_0_8_136)))
 (let ((?x15973 (* ?x15799 l_0_8_145)))
 (let ((?x15796 (* 2.0 l_0_8_135)))
 (let ((?x15971 (* ?x15796 l_0_8_144)))
 (let ((?x15793 (* 2.0 l_0_8_134)))
 (let ((?x15969 (* ?x15793 l_0_8_143)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x15388 (* ?x15387 l_0_8_133)))
 (let ((?x15775 (* 12.0 l_0_8_10)))
 (let ((?x15964 (* ?x15775 l_0_8_19)))
 (let ((?x15968 (+ (- (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x15964) ?x15388) (* (* 2.0 l_0_8_133) l_0_8_142))))
 (let ((?x15985 (+ (+ (+ (+ (+ (+ (+ ?x15968 ?x15969) ?x15971) ?x15973) ?x15976) ?x15979) ?x15982) (* (* 2.0 l_0_8_22) l_0_8_37))))
 (let ((?x15995 (- (- (- (- (- ?x15985 ?x15986) ?x15988) ?x15990) ?x15992) (* (* 6.0 l_0_8_49) l_0_8_58))))
 (let ((?x16009 (+ (+ (+ (+ (- (- (- ?x15995 ?x15996) ?x15998) ?x16000) ?x16002) ?x16004) ?x16006) ?x16008)))
 (= ?x16009 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x16159 (* ?x16158 l_0_8_72)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x16156 (* ?x16155 l_0_8_71)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x16153 (* ?x16152 l_0_8_70)))
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x15309 (* ?x15308 l_0_8_71)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x15306 (* ?x15305 l_0_8_70)))
 (let ((?x15567 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x15564 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x16146 (* ?x16145 l_0_8_51)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x16143 (* ?x16142 l_0_8_50)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x16140 (* ?x16139 l_0_8_49)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x15303 (* ?x15302 l_0_8_50)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x15300 (* ?x15299 l_0_8_49)))
 (let ((?x15551 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x15548 (* ?x15547 l_0_8_30)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x15545 (* ?x15544 l_0_8_29)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x15542 (* ?x15541 l_0_8_28)))
 (let ((?x16092 (- (* (* (- 2.0) l_0_8_193) l_0_8_196) (* (* 2.0 l_0_8_194) l_0_8_197))))
 (let ((?x16114 (- (- ?x16092 (* (* 2.0 l_0_8_195) l_0_8_198)) (* (* 2.0 l_0_8_2) l_0_8_4))))
 (let ((?x16120 (- (- ?x16114 (* (* 2.0 l_0_8_214) l_0_8_217)) (* (* 2.0 l_0_8_215) l_0_8_218))))
 (let ((?x16126 (+ (- ?x16120 (* (* 2.0 l_0_8_216) l_0_8_219)) (* (* 2.0 l_0_8_23) l_0_8_25))))
 (let ((?x16132 (- (- (- (+ ?x16126 (* (* 2.0 l_0_8_24) l_0_8_26)) ?x15542) ?x15545) ?x15548)))
 (let ((?x16138 (+ (+ (+ (- ?x16132 (* (* 2.0 l_0_8_3) l_0_8_5)) ?x15551) ?x15300) ?x15303)))
 (let ((?x16151 (- (- (+ (+ (- (- (- ?x16138 ?x16140) ?x16143) ?x16146) ?x15564) ?x15567) ?x15306) ?x15309)))
 (= (+ (+ (+ ?x16151 ?x16153) ?x16156) ?x16159) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15703 (* l_0_8_9 l_0_8_9)))
 (let ((?x15704 (* 6.0 ?x15703)))
 (let ((?x15700 (* l_0_8_8 l_0_8_8)))
 (let ((?x15701 (* 6.0 ?x15700)))
 (let ((?x15685 (* l_0_8_7 l_0_8_7)))
 (let ((?x15686 (* 6.0 ?x15685)))
 (let ((?x15671 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x15668 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x15665 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x15662 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x16263 (* l_0_8_220 l_0_8_220)))
 (let ((?x16261 (* l_0_8_219 l_0_8_219)))
 (let ((?x16259 (* l_0_8_218 l_0_8_218)))
 (let ((?x16257 (* l_0_8_217 l_0_8_217)))
 (let ((?x16253 (* l_0_8_199 l_0_8_199)))
 (let ((?x16251 (* l_0_8_198 l_0_8_198)))
 (let ((?x16249 (* l_0_8_197 l_0_8_197)))
 (let ((?x16250 (- (- (* 6.0 (* l_0_8_10 l_0_8_10)) (* l_0_8_196 l_0_8_196)) ?x16249)))
 (let ((?x16258 (- (- (- (- ?x16250 ?x16251) ?x16253) (* (* 2.0 l_0_8_2) l_0_8_7)) ?x16257)))
 (let ((?x16266 (+ (- (- (- ?x16258 ?x16259) ?x16261) ?x16263) (* (* 2.0 l_0_8_23) l_0_8_28))))
 (let ((?x16272 (- (- (- (+ ?x16266 (* (* 2.0 l_0_8_24) l_0_8_29)) ?x15662) ?x15665) (* (* 2.0 l_0_8_3) l_0_8_8))))
 (let ((?x16280 (- (- (- (- ?x16272 ?x15668) ?x15671) (* (* 1.0 l_0_8_49) l_0_8_49)) (* (* 1.0 l_0_8_50) l_0_8_50))))
 (let ((?x16286 (- (- ?x16280 (* (* 1.0 l_0_8_51) l_0_8_51)) (* (* 1.0 l_0_8_52) l_0_8_52))))
 (let ((?x16291 (+ (+ (+ ?x16286 ?x15686) (* 1.0 (* l_0_8_70 l_0_8_70))) (* 1.0 (* l_0_8_71 l_0_8_71)))))
 (let ((?x16295 (+ (+ ?x16291 (* 1.0 (* l_0_8_72 l_0_8_72))) (* 1.0 (* l_0_8_73 l_0_8_73)))))
 (= (+ (+ ?x16295 ?x15701) ?x15704) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x16450 (* ?x16449 l_0_8_92)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x16447 (* ?x16446 l_0_8_91)))
 (let ((?x16443 (* 2.0 l_0_8_73)))
 (let ((?x16444 (* ?x16443 l_0_8_77)))
 (let ((?x16440 (* 2.0 l_0_8_72)))
 (let ((?x16441 (* ?x16440 l_0_8_76)))
 (let ((?x16437 (* 2.0 l_0_8_71)))
 (let ((?x16438 (* ?x16437 l_0_8_75)))
 (let ((?x16434 (* 2.0 l_0_8_70)))
 (let ((?x16435 (* ?x16434 l_0_8_74)))
 (let ((?x16431 (* 2.0 l_0_8_52)))
 (let ((?x16432 (* ?x16431 l_0_8_56)))
 (let ((?x16428 (* 2.0 l_0_8_51)))
 (let ((?x16429 (* ?x16428 l_0_8_55)))
 (let ((?x16425 (* 2.0 l_0_8_50)))
 (let ((?x16426 (* ?x16425 l_0_8_54)))
 (let ((?x16422 (* 2.0 l_0_8_49)))
 (let ((?x16423 (* ?x16422 l_0_8_53)))
 (let ((?x15819 (* 12.0 l_0_8_31)))
 (let ((?x15820 (* ?x15819 l_0_8_35)))
 (let ((?x15816 (* 12.0 l_0_8_30)))
 (let ((?x15817 (* ?x15816 l_0_8_34)))
 (let ((?x15813 (* 12.0 l_0_8_29)))
 (let ((?x15814 (* ?x15813 l_0_8_33)))
 (let ((?x15810 (* 12.0 l_0_8_28)))
 (let ((?x15811 (* ?x15810 l_0_8_32)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x16388 (* ?x16387 l_0_8_176)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x16385 (* ?x16384 l_0_8_175)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x16382 (* ?x16381 l_0_8_155)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x16379 (* ?x16378 l_0_8_154)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x15788 (* ?x15787 l_0_8_9)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x15785 (* ?x15784 l_0_8_8)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x15782 (* ?x15781 l_0_8_7)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x16367 (* ?x16366 l_0_8_113)))
 (let ((?x15775 (* 12.0 l_0_8_10)))
 (let ((?x15776 (* ?x15775 l_0_8_14)))
 (let ((?x16371 (- (+ (+ ?x15776 (* (* 2.0 l_0_8_107) l_0_8_112)) ?x16367) (* (* 2.0 l_0_8_11) l_0_8_2))))
 (let ((?x16377 (+ (+ (- (+ ?x16371 ?x15782) (* (* 2.0 l_0_8_12) l_0_8_3)) ?x15785) ?x15788)))
 (let ((?x16392 (- (- (- (+ (+ ?x16377 ?x16379) ?x16382) ?x16385) ?x16388) (* (* 2.0 l_0_8_196) l_0_8_200))))
 (let ((?x16398 (- (- ?x16392 (* (* 2.0 l_0_8_197) l_0_8_201)) (* (* 2.0 l_0_8_198) l_0_8_202))))
 (let ((?x16404 (- (- ?x16398 (* (* 2.0 l_0_8_199) l_0_8_203)) (* (* 2.0 l_0_8_217) l_0_8_221))))
 (let ((?x16410 (- (- ?x16404 (* (* 2.0 l_0_8_218) l_0_8_222)) (* (* 2.0 l_0_8_219) l_0_8_223))))
 (let ((?x16415 (+ (- ?x16410 (* (* 2.0 l_0_8_220) l_0_8_224)) (* (* 2.0 l_0_8_23) l_0_8_32))))
 (let ((?x16420 (- (- (- (+ ?x16415 (* (* 2.0 l_0_8_24) l_0_8_33)) ?x15811) ?x15814) ?x15817)))
 (let ((?x16439 (+ (+ (- (- (- (- (- ?x16420 ?x15820) ?x16423) ?x16426) ?x16429) ?x16432) ?x16435) ?x16438)))
 (= (- (- (+ (+ ?x16439 ?x16441) ?x16444) ?x16447) ?x16450) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16443 (* 2.0 l_0_8_73)))
 (let ((?x16636 (* ?x16443 l_0_8_82)))
 (let ((?x16440 (* 2.0 l_0_8_72)))
 (let ((?x16634 (* ?x16440 l_0_8_81)))
 (let ((?x16437 (* 2.0 l_0_8_71)))
 (let ((?x16632 (* ?x16437 l_0_8_80)))
 (let ((?x16434 (* 2.0 l_0_8_70)))
 (let ((?x16630 (* ?x16434 l_0_8_79)))
 (let ((?x16431 (* 2.0 l_0_8_52)))
 (let ((?x16628 (* ?x16431 l_0_8_61)))
 (let ((?x16428 (* 2.0 l_0_8_51)))
 (let ((?x16626 (* ?x16428 l_0_8_60)))
 (let ((?x16425 (* 2.0 l_0_8_50)))
 (let ((?x16624 (* ?x16425 l_0_8_59)))
 (let ((?x16422 (* 2.0 l_0_8_49)))
 (let ((?x16622 (* ?x16422 l_0_8_58)))
 (let ((?x15819 (* 12.0 l_0_8_31)))
 (let ((?x15992 (* ?x15819 l_0_8_40)))
 (let ((?x15816 (* 12.0 l_0_8_30)))
 (let ((?x15990 (* ?x15816 l_0_8_39)))
 (let ((?x15813 (* 12.0 l_0_8_29)))
 (let ((?x15988 (* ?x15813 l_0_8_38)))
 (let ((?x15810 (* 12.0 l_0_8_28)))
 (let ((?x15986 (* ?x15810 l_0_8_37)))
 (let ((?x15981 (* 12.0 l_0_8_18)))
 (let ((?x15982 (* ?x15981 l_0_8_9)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x15979 (* ?x15978 l_0_8_8)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x15976 (* ?x15975 l_0_8_7)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x15460 (* ?x15459 l_0_8_134)))
 (let ((?x15448 (* 2.0 l_0_8_128)))
 (let ((?x15457 (* ?x15448 l_0_8_133)))
 (let ((?x15775 (* 12.0 l_0_8_10)))
 (let ((?x15964 (* ?x15775 l_0_8_19)))
 (let ((?x16592 (+ (- (- (- ?x15964 ?x15457) ?x15460) (* (* 2.0 l_0_8_16) l_0_8_2)) ?x15976)))
 (let ((?x16599 (- (+ (+ (- ?x16592 (* (* 2.0 l_0_8_17) l_0_8_3)) ?x15979) ?x15982) (* (* 2.0 l_0_8_196) l_0_8_205))))
 (let ((?x16603 (- (- ?x16599 (* (* 2.0 l_0_8_197) l_0_8_206)) (* (* 2.0 l_0_8_198) l_0_8_207))))
 (let ((?x16607 (- (- ?x16603 (* (* 2.0 l_0_8_199) l_0_8_208)) (* (* 2.0 l_0_8_217) l_0_8_226))))
 (let ((?x16611 (- (- ?x16607 (* (* 2.0 l_0_8_218) l_0_8_227)) (* (* 2.0 l_0_8_219) l_0_8_228))))
 (let ((?x16615 (+ (- ?x16611 (* (* 2.0 l_0_8_220) l_0_8_229)) (* (* 2.0 l_0_8_23) l_0_8_37))))
 (let ((?x16620 (- (- (- (+ ?x16615 (* (* 2.0 l_0_8_24) l_0_8_38)) ?x15986) ?x15988) ?x15990)))
 (let ((?x16633 (+ (+ (- (- (- (- (- ?x16620 ?x15992) ?x16622) ?x16624) ?x16626) ?x16628) ?x16630) ?x16632)))
 (= (+ (+ ?x16633 ?x16634) ?x16636) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x16159 (* ?x16158 l_0_8_72)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x16156 (* ?x16155 l_0_8_71)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x16153 (* ?x16152 l_0_8_70)))
 (let ((?x16760 (* l_0_8_6 l_0_8_6)))
 (let ((?x16758 (* l_0_8_5 l_0_8_5)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x16146 (* ?x16145 l_0_8_51)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x16143 (* ?x16142 l_0_8_50)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x16140 (* ?x16139 l_0_8_49)))
 (let ((?x16753 (* l_0_8_4 l_0_8_4)))
 (let ((?x16743 (* l_0_8_27 l_0_8_27)))
 (let ((?x16754 (- (+ (+ (* l_0_8_25 l_0_8_25) (* l_0_8_26 l_0_8_26)) ?x16743) ?x16753)))
 (let ((?x16763 (- (- (- (- (+ (+ (+ ?x16754 ?x16140) ?x16143) ?x16146) ?x16758) ?x16760) ?x16153) ?x16156)))
 (= (- ?x16763 ?x16159) 0.0))))))))))))))))))))
(assert
 (let ((?x15697 (* l_0_8_73 l_0_8_73)))
 (let ((?x15694 (* l_0_8_72 l_0_8_72)))
 (let ((?x15691 (* l_0_8_71 l_0_8_71)))
 (let ((?x15688 (* l_0_8_70 l_0_8_70)))
 (let ((?x15752 (* l_0_8_52 l_0_8_52)))
 (let ((?x15746 (* l_0_8_51 l_0_8_51)))
 (let ((?x15740 (* l_0_8_50 l_0_8_50)))
 (let ((?x15734 (* l_0_8_49 l_0_8_49)))
 (let ((?x16794 (+ (* (* 2.0 l_0_8_25) l_0_8_28) (* (* 2.0 l_0_8_26) l_0_8_29))))
 (let ((?x16800 (- (+ ?x16794 (* (* 2.0 l_0_8_27) l_0_8_30)) (* (* 2.0 l_0_8_4) l_0_8_7))))
 (let ((?x16806 (+ (+ (- (+ ?x16800 ?x15734) (* (* 2.0 l_0_8_5) l_0_8_8)) ?x15740) ?x15746)))
 (let ((?x16812 (- (- (- (+ ?x16806 ?x15752) (* (* 2.0 l_0_8_6) l_0_8_9)) ?x15688) ?x15691)))
 (= (- (- ?x16812 ?x15694) ?x15697) 0.0))))))))))))))
(assert
 (let ((?x16899 (* 2.0 l_0_8_90)))
 (let ((?x16900 (* ?x16899 l_0_8_93)))
 (let ((?x16896 (* 2.0 l_0_8_89)))
 (let ((?x16897 (* ?x16896 l_0_8_92)))
 (let ((?x16893 (* 2.0 l_0_8_88)))
 (let ((?x16894 (* ?x16893 l_0_8_91)))
 (let ((?x16443 (* 2.0 l_0_8_73)))
 (let ((?x16444 (* ?x16443 l_0_8_77)))
 (let ((?x16440 (* 2.0 l_0_8_72)))
 (let ((?x16441 (* ?x16440 l_0_8_76)))
 (let ((?x16437 (* 2.0 l_0_8_71)))
 (let ((?x16438 (* ?x16437 l_0_8_75)))
 (let ((?x16434 (* 2.0 l_0_8_70)))
 (let ((?x16435 (* ?x16434 l_0_8_74)))
 (let ((?x16431 (* 2.0 l_0_8_52)))
 (let ((?x16432 (* ?x16431 l_0_8_56)))
 (let ((?x16428 (* 2.0 l_0_8_51)))
 (let ((?x16429 (* ?x16428 l_0_8_55)))
 (let ((?x16425 (* 2.0 l_0_8_50)))
 (let ((?x16426 (* ?x16425 l_0_8_54)))
 (let ((?x16422 (* 2.0 l_0_8_49)))
 (let ((?x16423 (* ?x16422 l_0_8_53)))
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x16877 (* ?x16876 l_0_8_177)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x16874 (* ?x16873 l_0_8_176)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x16871 (* ?x16870 l_0_8_175)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x16868 (* ?x16867 l_0_8_156)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x16865 (* ?x16864 l_0_8_155)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x16862 (* ?x16861 l_0_8_154)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x16854 (* ?x16853 l_0_8_114)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x16851 (* ?x16850 l_0_8_113)))
 (let ((?x16849 (- (* (* 2.0 l_0_8_109) l_0_8_112) (* (* 2.0 l_0_8_11) l_0_8_4))))
 (let ((?x16860 (- (- (+ (+ ?x16849 ?x16851) ?x16854) (* (* 2.0 l_0_8_12) l_0_8_5)) (* (* 2.0 l_0_8_13) l_0_8_6))))
 (let ((?x16880 (+ (- (- (- (+ (+ (+ ?x16860 ?x16862) ?x16865) ?x16868) ?x16871) ?x16874) ?x16877) (* (* 2.0 l_0_8_25) l_0_8_32))))
 (let ((?x16884 (+ (+ ?x16880 (* (* 2.0 l_0_8_26) l_0_8_33)) (* (* 2.0 l_0_8_27) l_0_8_34))))
 (let ((?x16891 (- (- (- (+ (+ (+ (+ ?x16884 ?x16423) ?x16426) ?x16429) ?x16432) ?x16435) ?x16438) ?x16441)))
 (= (- (- (- (- ?x16891 ?x16444) ?x16894) ?x16897) ?x16900) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16443 (* 2.0 l_0_8_73)))
 (let ((?x16636 (* ?x16443 l_0_8_82)))
 (let ((?x16440 (* 2.0 l_0_8_72)))
 (let ((?x16634 (* ?x16440 l_0_8_81)))
 (let ((?x16437 (* 2.0 l_0_8_71)))
 (let ((?x16632 (* ?x16437 l_0_8_80)))
 (let ((?x16434 (* 2.0 l_0_8_70)))
 (let ((?x16630 (* ?x16434 l_0_8_79)))
 (let ((?x16431 (* 2.0 l_0_8_52)))
 (let ((?x16628 (* ?x16431 l_0_8_61)))
 (let ((?x16428 (* 2.0 l_0_8_51)))
 (let ((?x16626 (* ?x16428 l_0_8_60)))
 (let ((?x16425 (* 2.0 l_0_8_50)))
 (let ((?x16624 (* ?x16425 l_0_8_59)))
 (let ((?x16422 (* 2.0 l_0_8_49)))
 (let ((?x16622 (* ?x16422 l_0_8_58)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x15537 (* ?x15536 l_0_8_135)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x15534 (* ?x15533 l_0_8_134)))
 (let ((?x17000 (- (- (- (* (* (- 2.0) l_0_8_130) l_0_8_133) ?x15534) ?x15537) (* (* 2.0 l_0_8_16) l_0_8_4))))
 (let ((?x17005 (- (- ?x17000 (* (* 2.0 l_0_8_17) l_0_8_5)) (* (* 2.0 l_0_8_18) l_0_8_6))))
 (let ((?x17009 (+ (+ ?x17005 (* (* 2.0 l_0_8_25) l_0_8_37)) (* (* 2.0 l_0_8_26) l_0_8_38))))
 (let ((?x17014 (+ (+ (+ (+ ?x17009 (* (* 2.0 l_0_8_27) l_0_8_39)) ?x16622) ?x16624) ?x16626)))
 (= (- (- (- (- (+ ?x17014 ?x16628) ?x16630) ?x16632) ?x16634) ?x16636) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x15703 (* l_0_8_9 l_0_8_9)))
 (let ((?x15700 (* l_0_8_8 l_0_8_8)))
 (let ((?x15685 (* l_0_8_7 l_0_8_7)))
 (let ((?x15728 (* l_0_8_31 l_0_8_31)))
 (let ((?x15722 (* l_0_8_30 l_0_8_30)))
 (let ((?x15716 (* l_0_8_29 l_0_8_29)))
 (let ((?x17080 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_28 l_0_8_28)) ?x15716) ?x15722)))
 (= (- (- (- (+ ?x17080 ?x15728) ?x15685) ?x15700) ?x15703) 0.0)))))))))
(assert
 (let ((?x17154 (* l_0_8_94 l_0_8_94)))
 (let ((?x17152 (* l_0_8_93 l_0_8_93)))
 (let ((?x17150 (* l_0_8_92 l_0_8_92)))
 (let ((?x17148 (* l_0_8_91 l_0_8_91)))
 (let ((?x17134 (* l_0_8_178 l_0_8_178)))
 (let ((?x17132 (* l_0_8_177 l_0_8_177)))
 (let ((?x17130 (* l_0_8_176 l_0_8_176)))
 (let ((?x17128 (* l_0_8_175 l_0_8_175)))
 (let ((?x17126 (* l_0_8_157 l_0_8_157)))
 (let ((?x17124 (* l_0_8_156 l_0_8_156)))
 (let ((?x17122 (* l_0_8_155 l_0_8_155)))
 (let ((?x17120 (* l_0_8_154 l_0_8_154)))
 (let ((?x17114 (* l_0_8_115 l_0_8_115)))
 (let ((?x17112 (* l_0_8_114 l_0_8_114)))
 (let ((?x17110 (* l_0_8_113 l_0_8_113)))
 (let ((?x17108 (* l_0_8_112 l_0_8_112)))
 (let ((?x17107 (- (* (* (- 2.0) l_0_8_10) l_0_8_14) (* (* 2.0 l_0_8_11) l_0_8_7))))
 (let ((?x17117 (- (+ (+ (+ (+ ?x17107 ?x17108) ?x17110) ?x17112) ?x17114) (* (* 2.0 l_0_8_12) l_0_8_8))))
 (let ((?x17125 (+ (+ (+ (- ?x17117 (* (* 2.0 l_0_8_13) l_0_8_9)) ?x17120) ?x17122) ?x17124)))
 (let ((?x17138 (+ (- (- (- (- (+ ?x17125 ?x17126) ?x17128) ?x17130) ?x17132) ?x17134) (* (* 2.0 l_0_8_28) l_0_8_32))))
 (let ((?x17144 (+ (+ ?x17138 (* (* 2.0 l_0_8_29) l_0_8_33)) (* (* 2.0 l_0_8_30) l_0_8_34))))
 (let ((?x17153 (- (- (- (+ ?x17144 (* (* 2.0 l_0_8_31) l_0_8_35)) ?x17148) ?x17150) ?x17152)))
 (= (- ?x17153 ?x17154) 0.0))))))))))))))))))))))))
(assert
 (let ((?x15657 (* l_0_8_136 l_0_8_136)))
 (let ((?x15655 (* l_0_8_135 l_0_8_135)))
 (let ((?x15653 (* l_0_8_134 l_0_8_134)))
 (let ((?x17221 (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) (* l_0_8_133 l_0_8_133)) ?x15653)))
 (let ((?x17227 (- (- (- (- ?x17221 ?x15655) ?x15657) (* (* 2.0 l_0_8_16) l_0_8_7)) (* (* 2.0 l_0_8_17) l_0_8_8))))
 (let ((?x17231 (+ (- ?x17227 (* (* 2.0 l_0_8_18) l_0_8_9)) (* (* 2.0 l_0_8_28) l_0_8_37))))
 (let ((?x17235 (+ (+ ?x17231 (* (* 2.0 l_0_8_29) l_0_8_38)) (* (* 2.0 l_0_8_30) l_0_8_39))))
 (= (+ ?x17235 (* (* 2.0 l_0_8_31) l_0_8_40)) 0.0)))))))))
(assert
 (let ((?x17336 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x17333 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x17330 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x17327 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x17324 (* l_0_8_36 l_0_8_36)))
 (let ((?x17322 (* l_0_8_35 l_0_8_35)))
 (let ((?x17320 (* l_0_8_34 l_0_8_34)))
 (let ((?x17318 (* l_0_8_33 l_0_8_33)))
 (let ((?x17316 (* l_0_8_32 l_0_8_32)))
 (let ((?x17313 (* 2.0 l_0_8_178)))
 (let ((?x17314 (* ?x17313 l_0_8_182)))
 (let ((?x17310 (* 2.0 l_0_8_177)))
 (let ((?x17311 (* ?x17310 l_0_8_181)))
 (let ((?x17307 (* 2.0 l_0_8_176)))
 (let ((?x17308 (* ?x17307 l_0_8_180)))
 (let ((?x17304 (* 2.0 l_0_8_175)))
 (let ((?x17305 (* ?x17304 l_0_8_179)))
 (let ((?x17301 (* 2.0 l_0_8_157)))
 (let ((?x17302 (* ?x17301 l_0_8_161)))
 (let ((?x17298 (* 2.0 l_0_8_156)))
 (let ((?x17299 (* ?x17298 l_0_8_160)))
 (let ((?x17295 (* 2.0 l_0_8_155)))
 (let ((?x17296 (* ?x17295 l_0_8_159)))
 (let ((?x17292 (* 2.0 l_0_8_154)))
 (let ((?x17293 (* ?x17292 l_0_8_158)))
 (let ((?x17290 (* l_0_8_15 l_0_8_15)))
 (let ((?x17288 (* l_0_8_14 l_0_8_14)))
 (let ((?x17286 (* l_0_8_13 l_0_8_13)))
 (let ((?x17284 (* l_0_8_12 l_0_8_12)))
 (let ((?x17281 (* 2.0 l_0_8_115)))
 (let ((?x17282 (* ?x17281 l_0_8_119)))
 (let ((?x17278 (* 2.0 l_0_8_114)))
 (let ((?x17279 (* ?x17278 l_0_8_118)))
 (let ((?x17275 (* 2.0 l_0_8_113)))
 (let ((?x17276 (* ?x17275 l_0_8_117)))
 (let ((?x17267 (+ (* (- l_0_8_11) l_0_8_11) (* (* 2.0 l_0_8_112) l_0_8_116))))
 (let ((?x17291 (- (- (- (- (+ (+ (+ ?x17267 ?x17276) ?x17279) ?x17282) ?x17284) ?x17286) ?x17288) ?x17290)))
 (let ((?x17312 (- (- (- (+ (+ (+ (+ ?x17291 ?x17293) ?x17296) ?x17299) ?x17302) ?x17305) ?x17308) ?x17311)))
 (let ((?x17328 (- (+ (+ (+ (+ (+ (- ?x17312 ?x17314) ?x17316) ?x17318) ?x17320) ?x17322) ?x17324) ?x17327)))
 (= (- (- (- ?x17328 ?x17330) ?x17333) ?x17336) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17313 (* 2.0 l_0_8_178)))
 (let ((?x17485 (* ?x17313 l_0_8_187)))
 (let ((?x17310 (* 2.0 l_0_8_177)))
 (let ((?x17483 (* ?x17310 l_0_8_186)))
 (let ((?x17307 (* 2.0 l_0_8_176)))
 (let ((?x17481 (* ?x17307 l_0_8_185)))
 (let ((?x17304 (* 2.0 l_0_8_175)))
 (let ((?x17479 (* ?x17304 l_0_8_184)))
 (let ((?x17301 (* 2.0 l_0_8_157)))
 (let ((?x17477 (* ?x17301 l_0_8_166)))
 (let ((?x17298 (* 2.0 l_0_8_156)))
 (let ((?x17475 (* ?x17298 l_0_8_165)))
 (let ((?x17295 (* 2.0 l_0_8_155)))
 (let ((?x17473 (* ?x17295 l_0_8_164)))
 (let ((?x17292 (* 2.0 l_0_8_154)))
 (let ((?x17471 (* ?x17292 l_0_8_163)))
 (let ((?x15799 (* 2.0 l_0_8_136)))
 (let ((?x15800 (* ?x15799 l_0_8_140)))
 (let ((?x15796 (* 2.0 l_0_8_135)))
 (let ((?x15797 (* ?x15796 l_0_8_139)))
 (let ((?x15793 (* 2.0 l_0_8_134)))
 (let ((?x15794 (* ?x15793 l_0_8_138)))
 (let ((?x15790 (* 2.0 l_0_8_133)))
 (let ((?x15791 (* ?x15790 l_0_8_137)))
 (let ((?x17281 (* 2.0 l_0_8_115)))
 (let ((?x17455 (* ?x17281 l_0_8_124)))
 (let ((?x17278 (* 2.0 l_0_8_114)))
 (let ((?x17453 (* ?x17278 l_0_8_123)))
 (let ((?x17275 (* 2.0 l_0_8_113)))
 (let ((?x17451 (* ?x17275 l_0_8_122)))
 (let ((?x17265 (* 2.0 l_0_8_112)))
 (let ((?x17449 (* ?x17265 l_0_8_121)))
 (let ((?x17444 (* 2.0 l_0_8_103)))
 (let ((?x17445 (* ?x17444 l_0_8_94)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x17442 (* ?x17441 l_0_8_93)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x17439 (* ?x17438 l_0_8_92)))
 (let ((?x17448 (- (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_91) ?x17439) ?x17442) ?x17445) (* (* 2.0 l_0_8_11) l_0_8_16))))
 (let ((?x17458 (- (+ (+ (+ (+ ?x17448 ?x17449) ?x17451) ?x17453) ?x17455) (* (* 2.0 l_0_8_12) l_0_8_17))))
 (let ((?x17463 (- (- (- (- ?x17458 (* (* 2.0 l_0_8_13) l_0_8_18)) ?x15791) ?x15794) ?x15797)))
 (let ((?x17470 (- (- (- ?x17463 ?x15800) (* (* 2.0 l_0_8_14) l_0_8_19)) (* (* 2.0 l_0_8_15) l_0_8_20))))
 (let ((?x17484 (- (- (- (+ (+ (+ (+ ?x17470 ?x17471) ?x17473) ?x17475) ?x17477) ?x17479) ?x17481) ?x17483)))
 (let ((?x17492 (+ (+ (- ?x17484 ?x17485) (* (* 2.0 l_0_8_32) l_0_8_37)) (* (* 2.0 l_0_8_33) l_0_8_38))))
 (let ((?x17498 (+ (+ ?x17492 (* (* 2.0 l_0_8_34) l_0_8_39)) (* (* 2.0 l_0_8_35) l_0_8_40))))
 (= (+ ?x17498 (* (* 2.0 l_0_8_36) l_0_8_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17655 (* l_0_8_42 l_0_8_42)))
 (let ((?x17653 (* l_0_8_41 l_0_8_41)))
 (let ((?x17651 (* l_0_8_40 l_0_8_40)))
 (let ((?x17649 (* l_0_8_39 l_0_8_39)))
 (let ((?x17647 (* l_0_8_38 l_0_8_38)))
 (let ((?x17645 (* l_0_8_37 l_0_8_37)))
 (let ((?x17643 (* l_0_8_21 l_0_8_21)))
 (let ((?x17641 (* l_0_8_20 l_0_8_20)))
 (let ((?x17639 (* l_0_8_19 l_0_8_19)))
 (let ((?x17637 (* l_0_8_18 l_0_8_18)))
 (let ((?x17635 (* l_0_8_17 l_0_8_17)))
 (let ((?x17617 (* l_0_8_16 l_0_8_16)))
 (let ((?x15799 (* 2.0 l_0_8_136)))
 (let ((?x15973 (* ?x15799 l_0_8_145)))
 (let ((?x15796 (* 2.0 l_0_8_135)))
 (let ((?x15971 (* ?x15796 l_0_8_144)))
 (let ((?x15793 (* 2.0 l_0_8_134)))
 (let ((?x15969 (* ?x15793 l_0_8_143)))
 (let ((?x17634 (- (- (- (- (* (* (- 2.0) l_0_8_133) l_0_8_142) ?x15969) ?x15971) ?x15973) ?x17617)))
 (let ((?x17648 (+ (+ (- (- (- (- (- ?x17634 ?x17635) ?x17637) ?x17639) ?x17641) ?x17643) ?x17645) ?x17647)))
 (= (+ (+ (+ (+ ?x17648 ?x17649) ?x17651) ?x17653) ?x17655) 0.0))))))))))))))))))))))
(assert
 (let ((?x17723 (* l_0_8_87 l_0_8_87)))
 (let ((?x17721 (* l_0_8_86 l_0_8_86)))
 (let ((?x17718 (* l_0_8_64 l_0_8_64)))
 (let ((?x17719 (* 3.0 ?x17718)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17716 (* ?x15403 l_0_8_65)))
 (let ((?x17714 (* (* 3.0 l_0_8_43) l_0_8_43)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17711 (* ?x15394 l_0_8_44)))
 (let ((?x17709 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x17706 (* l_0_8_171 l_0_8_171)))
 (let ((?x17704 (* l_0_8_170 l_0_8_170)))
 (let ((?x17702 (* l_0_8_150 l_0_8_150)))
 (let ((?x17700 (* l_0_8_149 l_0_8_149)))
 (let ((?x17698 (* l_0_8_127 l_0_8_127)))
 (let ((?x17696 (* l_0_8_108 l_0_8_108)))
 (let ((?x17697 (- (- (* 6.0 (* l_0_8_1 l_0_8_1)) (* l_0_8_107 l_0_8_107)) ?x17696)))
 (let ((?x17712 (- (- (+ (+ (- (- (+ ?x17697 ?x17698) ?x17700) ?x17702) ?x17704) ?x17706) ?x17709) ?x17711)))
 (= (+ (+ (+ (+ (- ?x17712 ?x17714) ?x17716) ?x17719) ?x17721) ?x17723) 0.0))))))))))))))))))))
(assert
 (let ((?x15153 (* l_0_8_66 l_0_8_66)))
 (let ((?x15154 (* 3.0 ?x15153)))
 (let ((?x15150 (* l_0_8_65 l_0_8_65)))
 (let ((?x15151 (* 3.0 ?x15150)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17716 (* ?x15403 l_0_8_65)))
 (let ((?x15145 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (let ((?x15142 (* (* 3.0 l_0_8_44) l_0_8_44)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17711 (* ?x15394 l_0_8_44)))
 (let ((?x17709 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x15127 (* ?x15126 l_0_8_23)))
 (let ((?x17770 (* l_0_8_211 l_0_8_211)))
 (let ((?x17768 (* l_0_8_190 l_0_8_190)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x17756 (* ?x15387 l_0_8_128)))
 (let ((?x15377 (* l_0_8_1 l_0_8_1)))
 (let ((?x17685 (* 6.0 ?x15377)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x15112 (* ?x15111 l_0_8_2)))
 (let ((?x17774 (- (- (- (- (- (+ (+ ?x15112 ?x17685) ?x17756) ?x17768) ?x17770) ?x15127) ?x17709) ?x17711)))
 (let ((?x17780 (+ (- (- (- ?x17774 (* (* 1.0 l_0_8_43) l_0_8_43)) ?x15142) ?x15145) ?x17716)))
 (= (+ (+ (+ ?x17780 (* 1.0 (* l_0_8_64 l_0_8_64))) ?x15151) ?x15154) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17828 (* ?x15409 l_0_8_68)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17826 (* ?x15406 l_0_8_67)))
 (let ((?x17718 (* l_0_8_64 l_0_8_64)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17823 (* ?x15403 l_0_8_67)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17821 (* ?x15400 l_0_8_47)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17819 (* ?x15397 l_0_8_46)))
 (let ((?x17749 (* l_0_8_43 l_0_8_43)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17816 (* ?x15394 l_0_8_46)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17814 (* ?x15126 l_0_8_25)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x17811 (* ?x15111 l_0_8_4)))
 (let ((?x17818 (+ (- (- (+ ?x17811 (* (* 2.0 l_0_8_127) l_0_8_130)) ?x17814) ?x17816) ?x17749)))
 (= (+ (+ (- (+ (- (- ?x17818 ?x17819) ?x17821) ?x17823) ?x17718) ?x17826) ?x17828) 0.0)))))))))))))))))))))
(assert
 (let ((?x17894 (* l_0_8_85 l_0_8_85)))
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17892 (* ?x15409 l_0_8_75)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17890 (* ?x15406 l_0_8_74)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17888 (* ?x15403 l_0_8_74)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17886 (* ?x15400 l_0_8_54)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17884 (* ?x15397 l_0_8_53)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17882 (* ?x15394 l_0_8_53)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17880 (* ?x15126 l_0_8_32)))
 (let ((?x17878 (* l_0_8_169 l_0_8_169)))
 (let ((?x17876 (* l_0_8_148 l_0_8_148)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x17874 (* ?x15387 l_0_8_137)))
 (let ((?x17875 (+ (+ (* (* 12.0 l_0_8_1) l_0_8_11) (* l_0_8_106 l_0_8_106)) ?x17874)))
 (let ((?x17889 (+ (- (- (- (- (- (+ ?x17875 ?x17876) ?x17878) ?x17880) ?x17882) ?x17884) ?x17886) ?x17888)))
 (= (- (+ (+ ?x17889 ?x17890) ?x17892) ?x17894) 0.0)))))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17954 (* ?x15409 l_0_8_80)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17952 (* ?x15406 l_0_8_79)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17950 (* ?x15403 l_0_8_79)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17948 (* ?x15400 l_0_8_59)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17946 (* ?x15397 l_0_8_58)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17944 (* ?x15394 l_0_8_58)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17942 (* ?x15126 l_0_8_37)))
 (let ((?x17698 (* l_0_8_127 l_0_8_127)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x17938 (* ?x15111 l_0_8_16)))
 (let ((?x17945 (- (- (- (+ ?x17938 (* (* 2.0 l_0_8_127) l_0_8_142)) ?x17698) ?x17942) ?x17944)))
 (= (+ (+ (+ (- (- ?x17945 ?x17946) ?x17948) ?x17950) ?x17952) ?x17954) 0.0))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17828 (* ?x15409 l_0_8_68)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17826 (* ?x15406 l_0_8_67)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18017 (* ?x15147 l_0_8_67)))
 (let ((?x15148 (* ?x15147 l_0_8_65)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17821 (* ?x15400 l_0_8_47)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17819 (* ?x15397 l_0_8_46)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18012 (* ?x15138 l_0_8_46)))
 (let ((?x15139 (* ?x15138 l_0_8_44)))
 (let ((?x15295 (* 12.0 l_0_8_3)))
 (let ((?x18009 (* ?x15295 l_0_8_5)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18007 (* ?x15291 l_0_8_26)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18005 (* ?x15287 l_0_8_25)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17814 (* ?x15126 l_0_8_25)))
 (let ((?x15277 (* 12.0 l_0_8_2)))
 (let ((?x18000 (* ?x15277 l_0_8_4)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x17996 (* ?x15459 l_0_8_131)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x17811 (* ?x15111 l_0_8_4)))
 (let ((?x17999 (- (+ (+ ?x17811 (* (* 2.0 l_0_8_128) l_0_8_130)) ?x17996) (* (* 2.0 l_0_8_190) l_0_8_193))))
 (let ((?x18006 (- (- (- (+ ?x17999 ?x18000) (* (* 2.0 l_0_8_211) l_0_8_214)) ?x17814) ?x18005)))
 (let ((?x18016 (- (- (- (- (+ (+ (- ?x18006 ?x18007) ?x18009) ?x15139) ?x18012) ?x17819) ?x17821) ?x15148)))
 (= (+ (+ (+ ?x18016 ?x18017) ?x17826) ?x17828) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18102 (* ?x15846 l_0_8_86)))
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17892 (* ?x15409 l_0_8_75)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17890 (* ?x15406 l_0_8_74)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18098 (* ?x15147 l_0_8_74)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17886 (* ?x15400 l_0_8_54)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17884 (* ?x15397 l_0_8_53)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18094 (* ?x15138 l_0_8_53)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18092 (* ?x15291 l_0_8_33)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18090 (* ?x15287 l_0_8_32)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17880 (* ?x15126 l_0_8_32)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18083 (* ?x15805 l_0_8_170)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18081 (* ?x15802 l_0_8_149)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x18079 (* ?x15459 l_0_8_138)))
 (let ((?x15448 (* 2.0 l_0_8_128)))
 (let ((?x18077 (* ?x15448 l_0_8_137)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18075 (* ?x15784 l_0_8_3)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18073 (* ?x15781 l_0_8_2)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x17871 (* ?x15111 l_0_8_11)))
 (let ((?x18078 (+ (+ (+ (+ ?x17871 (* (* 2.0 l_0_8_106) l_0_8_107)) ?x18073) ?x18075) ?x18077)))
 (let ((?x18086 (- (- (+ (+ ?x18078 ?x18079) ?x18081) ?x18083) (* (* 2.0 l_0_8_190) l_0_8_200))))
 (let ((?x18093 (- (- (- (- ?x18086 (* (* 2.0 l_0_8_211) l_0_8_221)) ?x17880) ?x18090) ?x18092)))
 (let ((?x18103 (- (+ (+ (+ (- (- (- ?x18093 ?x18094) ?x17884) ?x17886) ?x18098) ?x17890) ?x17892) ?x18102)))
 (= ?x18103 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15409 (* 6.0 l_0_8_66)))
 (let ((?x17954 (* ?x15409 l_0_8_80)))
 (let ((?x15406 (* 6.0 l_0_8_65)))
 (let ((?x17952 (* ?x15406 l_0_8_79)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18186 (* ?x15147 l_0_8_79)))
 (let ((?x15400 (* 6.0 l_0_8_45)))
 (let ((?x17948 (* ?x15400 l_0_8_59)))
 (let ((?x15397 (* 6.0 l_0_8_44)))
 (let ((?x17946 (* ?x15397 l_0_8_58)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18182 (* ?x15138 l_0_8_58)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18180 (* ?x15291 l_0_8_38)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18178 (* ?x15287 l_0_8_37)))
 (let ((?x15126 (* 12.0 l_0_8_22)))
 (let ((?x17942 (* ?x15126 l_0_8_37)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x18171 (* ?x15978 l_0_8_3)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x18169 (* ?x15975 l_0_8_2)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x18167 (* ?x15459 l_0_8_143)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x17756 (* ?x15387 l_0_8_128)))
 (let ((?x15111 (* 12.0 l_0_8_1)))
 (let ((?x17938 (* ?x15111 l_0_8_16)))
 (let ((?x18170 (+ (+ (+ (- ?x17938 ?x17756) (* (* 2.0 l_0_8_128) l_0_8_142)) ?x18167) ?x18169)))
 (let ((?x18176 (- (- (+ ?x18170 ?x18171) (* (* 2.0 l_0_8_190) l_0_8_205)) (* (* 2.0 l_0_8_211) l_0_8_226))))
 (let ((?x18187 (+ (- (- (- (- (- (- ?x18176 ?x17942) ?x18178) ?x18180) ?x18182) ?x17946) ?x17948) ?x18186)))
 (= (+ (+ ?x18187 ?x17952) ?x17954) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x18275 (* l_0_8_69 l_0_8_69)))
 (let ((?x18276 (* 3.0 ?x18275)))
 (let ((?x18272 (* l_0_8_68 l_0_8_68)))
 (let ((?x18273 (* 3.0 ?x18272)))
 (let ((?x18269 (* l_0_8_67 l_0_8_67)))
 (let ((?x18270 (* 3.0 ?x18269)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18017 (* ?x15147 l_0_8_67)))
 (let ((?x16760 (* l_0_8_6 l_0_8_6)))
 (let ((?x18266 (* 6.0 ?x16760)))
 (let ((?x16758 (* l_0_8_5 l_0_8_5)))
 (let ((?x18264 (* 6.0 ?x16758)))
 (let ((?x18262 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x18259 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18012 (* ?x15138 l_0_8_46)))
 (let ((?x16753 (* l_0_8_4 l_0_8_4)))
 (let ((?x18252 (* 6.0 ?x16753)))
 (let ((?x18250 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x18247 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x18244 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x18241 (* l_0_8_132 l_0_8_132)))
 (let ((?x18245 (- (+ (+ (* l_0_8_130 l_0_8_130) (* l_0_8_131 l_0_8_131)) ?x18241) ?x18244)))
 (let ((?x18257 (- (+ (+ (- (- ?x18245 ?x18247) ?x18250) ?x18252) ?x18012) (* (* 3.0 l_0_8_46) l_0_8_46))))
 (let ((?x18274 (+ (+ (- (+ (+ (- (- ?x18257 ?x18259) ?x18262) ?x18264) ?x18266) ?x18017) ?x18270) ?x18273)))
 (= (+ ?x18274 ?x18276) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18367 (* ?x15846 l_0_8_88)))
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x18365 (* ?x15576 l_0_8_76)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x18363 (* ?x15573 l_0_8_75)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x18361 (* ?x15570 l_0_8_74)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18098 (* ?x15147 l_0_8_74)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x18358 (* ?x15560 l_0_8_55)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x18356 (* ?x15557 l_0_8_54)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18094 (* ?x15138 l_0_8_53)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x18351 (* ?x15547 l_0_8_34)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x18349 (* ?x15544 l_0_8_33)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x18347 (* ?x15541 l_0_8_32)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18345 (* ?x15805 l_0_8_172)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18343 (* ?x15802 l_0_8_151)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x18341 (* ?x15536 l_0_8_139)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x18339 (* ?x15533 l_0_8_138)))
 (let ((?x15523 (* 2.0 l_0_8_130)))
 (let ((?x18337 (* ?x15523 l_0_8_137)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x18335 (* ?x15787 l_0_8_6)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18333 (* ?x15784 l_0_8_5)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18331 (* ?x15781 l_0_8_4)))
 (let ((?x18338 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_109) ?x18331) ?x18333) ?x18335) ?x18337)))
 (let ((?x18352 (- (- (- (- (+ (+ (+ ?x18338 ?x18339) ?x18341) ?x18343) ?x18345) ?x18347) ?x18349) ?x18351)))
 (let ((?x18359 (- (- (- (+ ?x18352 ?x18094) (* (* 6.0 l_0_8_46) l_0_8_53)) ?x18356) ?x18358)))
 (= (- (+ (+ (+ (- ?x18359 ?x18098) ?x18361) ?x18363) ?x18365) ?x18367) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x18474 (* ?x15576 l_0_8_81)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x18472 (* ?x15573 l_0_8_80)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x18470 (* ?x15570 l_0_8_79)))
 (let ((?x15147 (* 2.0 l_0_8_64)))
 (let ((?x18186 (* ?x15147 l_0_8_79)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x18467 (* ?x15560 l_0_8_60)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x18465 (* ?x15557 l_0_8_59)))
 (let ((?x15138 (* 2.0 l_0_8_43)))
 (let ((?x18182 (* ?x15138 l_0_8_58)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x18460 (* ?x15547 l_0_8_39)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x18458 (* ?x15544 l_0_8_38)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x18456 (* ?x15541 l_0_8_37)))
 (let ((?x15981 (* 12.0 l_0_8_18)))
 (let ((?x18454 (* ?x15981 l_0_8_6)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x18452 (* ?x15978 l_0_8_5)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x18450 (* ?x15975 l_0_8_4)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x18448 (* ?x15536 l_0_8_144)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x18446 (* ?x15533 l_0_8_143)))
 (let ((?x18445 (+ (* (* (- 2.0) l_0_8_127) l_0_8_130) (* (* 2.0 l_0_8_130) l_0_8_142))))
 (let ((?x18459 (- (- (+ (+ (+ (+ (+ ?x18445 ?x18446) ?x18448) ?x18450) ?x18452) ?x18454) ?x18456) ?x18458)))
 (let ((?x18466 (- (- (+ (- ?x18459 ?x18460) ?x18182) (* (* 6.0 l_0_8_46) l_0_8_58)) ?x18465)))
 (= (+ (+ (+ (- (- ?x18466 ?x18467) ?x18186) ?x18470) ?x18472) ?x18474) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18604 (* ?x15846 l_0_8_95)))
 (let ((?x18601 (* l_0_8_78 l_0_8_78)))
 (let ((?x18602 (* 3.0 ?x18601)))
 (let ((?x18598 (* l_0_8_77 l_0_8_77)))
 (let ((?x18599 (* 3.0 ?x18598)))
 (let ((?x18595 (* l_0_8_76 l_0_8_76)))
 (let ((?x18596 (* 3.0 ?x18595)))
 (let ((?x18592 (* l_0_8_75 l_0_8_75)))
 (let ((?x18593 (* 3.0 ?x18592)))
 (let ((?x18589 (* l_0_8_74 l_0_8_74)))
 (let ((?x18590 (* 3.0 ?x18589)))
 (let ((?x18587 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x18584 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x18581 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x18578 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x18572 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x18569 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x18566 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x18563 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x18560 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18557 (* ?x15805 l_0_8_179)))
 (let ((?x17290 (* l_0_8_15 l_0_8_15)))
 (let ((?x18555 (* 6.0 ?x17290)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18553 (* ?x15802 l_0_8_158)))
 (let ((?x18551 (* l_0_8_141 l_0_8_141)))
 (let ((?x18549 (* l_0_8_140 l_0_8_140)))
 (let ((?x17288 (* l_0_8_14 l_0_8_14)))
 (let ((?x18547 (* 6.0 ?x17288)))
 (let ((?x18545 (* l_0_8_139 l_0_8_139)))
 (let ((?x18543 (* l_0_8_138 l_0_8_138)))
 (let ((?x18541 (* l_0_8_137 l_0_8_137)))
 (let ((?x17286 (* l_0_8_13 l_0_8_13)))
 (let ((?x18539 (* 6.0 ?x17286)))
 (let ((?x17284 (* l_0_8_12 l_0_8_12)))
 (let ((?x18537 (* 6.0 ?x17284)))
 (let ((?x17340 (* l_0_8_11 l_0_8_11)))
 (let ((?x18535 (* 6.0 ?x17340)))
 (let ((?x18542 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_116) ?x18535) ?x18537) ?x18539) ?x18541)))
 (let ((?x18556 (+ (+ (+ (+ (+ (+ (+ ?x18542 ?x18543) ?x18545) ?x18547) ?x18549) ?x18551) ?x18553) ?x18555)))
 (let ((?x18576 (- (- (- (- (- (- (- ?x18556 ?x18557) ?x18560) ?x18563) ?x18566) ?x18569) ?x18572) (* (* 3.0 l_0_8_53) l_0_8_53))))
 (let ((?x18597 (+ (+ (+ (- (- (- (- ?x18576 ?x18578) ?x18581) ?x18584) ?x18587) ?x18590) ?x18593) ?x18596)))
 (= (- (+ (+ ?x18597 ?x18599) ?x18602) ?x18604) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18759 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x18756 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x18753 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x18750 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x18747 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x18744 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x18741 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x18738 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x18735 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x18729 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x18726 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x18723 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x18720 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x18717 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18714 (* ?x15805 l_0_8_184)))
 (let ((?x18712 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18709 (* ?x15802 l_0_8_163)))
 (let ((?x18707 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18704 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x18701 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x18698 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18695 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18692 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x18689 (* ?x15787 l_0_8_18)))
 (let ((?x15387 (* 2.0 l_0_8_127)))
 (let ((?x17874 (* ?x15387 l_0_8_137)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18686 (* ?x15784 l_0_8_17)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18684 (* ?x15781 l_0_8_16)))
 (let ((?x15778 (* 2.0 l_0_8_106)))
 (let ((?x18682 (* ?x15778 l_0_8_121)))
 (let ((?x18688 (- (+ (+ (+ (* (* (- 2.0) l_0_8_100) l_0_8_85) ?x18682) ?x18684) ?x18686) ?x17874)))
 (let ((?x18708 (+ (+ (+ (+ (+ (+ (+ ?x18688 ?x18689) ?x18692) ?x18695) ?x18698) ?x18701) ?x18704) ?x18707)))
 (let ((?x18727 (- (- (- (- (- (+ (+ ?x18708 ?x18709) ?x18712) ?x18714) ?x18717) ?x18720) ?x18723) ?x18726)))
 (let ((?x18739 (- (- (- (- ?x18727 ?x18729) (* (* 6.0 l_0_8_53) l_0_8_58)) ?x18735) ?x18738)))
 (let ((?x18760 (+ (+ (+ (+ (+ (- (- ?x18739 ?x18741) ?x18744) ?x18747) ?x18750) ?x18753) ?x18756) ?x18759)))
 (= ?x18760 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18938 (* l_0_8_84 l_0_8_84)))
 (let ((?x18939 (* 3.0 ?x18938)))
 (let ((?x18935 (* l_0_8_83 l_0_8_83)))
 (let ((?x18936 (* 3.0 ?x18935)))
 (let ((?x18932 (* l_0_8_82 l_0_8_82)))
 (let ((?x18933 (* 3.0 ?x18932)))
 (let ((?x18929 (* l_0_8_81 l_0_8_81)))
 (let ((?x18930 (* 3.0 ?x18929)))
 (let ((?x18926 (* l_0_8_80 l_0_8_80)))
 (let ((?x18927 (* 3.0 ?x18926)))
 (let ((?x18923 (* l_0_8_79 l_0_8_79)))
 (let ((?x18924 (* 3.0 ?x18923)))
 (let ((?x18921 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x18918 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x18915 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x18912 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x18909 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x18903 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x18900 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x18897 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x18894 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x18891 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x18888 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x17643 (* l_0_8_21 l_0_8_21)))
 (let ((?x18885 (* 6.0 ?x17643)))
 (let ((?x17641 (* l_0_8_20 l_0_8_20)))
 (let ((?x18883 (* 6.0 ?x17641)))
 (let ((?x17639 (* l_0_8_19 l_0_8_19)))
 (let ((?x18881 (* 6.0 ?x17639)))
 (let ((?x17637 (* l_0_8_18 l_0_8_18)))
 (let ((?x18879 (* 6.0 ?x17637)))
 (let ((?x17635 (* l_0_8_17 l_0_8_17)))
 (let ((?x18877 (* 6.0 ?x17635)))
 (let ((?x17617 (* l_0_8_16 l_0_8_16)))
 (let ((?x18875 (* 6.0 ?x17617)))
 (let ((?x18873 (* l_0_8_147 l_0_8_147)))
 (let ((?x18871 (* l_0_8_146 l_0_8_146)))
 (let ((?x18869 (* l_0_8_145 l_0_8_145)))
 (let ((?x18867 (* l_0_8_144 l_0_8_144)))
 (let ((?x18865 (* l_0_8_143 l_0_8_143)))
 (let ((?x18866 (+ (+ (* (* (- 2.0) l_0_8_127) l_0_8_142) (* l_0_8_142 l_0_8_142)) ?x18865)))
 (let ((?x18880 (+ (+ (+ (+ (+ (+ (+ ?x18866 ?x18867) ?x18869) ?x18871) ?x18873) ?x18875) ?x18877) ?x18879)))
 (let ((?x18898 (- (- (- (- (+ (+ (+ ?x18880 ?x18881) ?x18883) ?x18885) ?x18888) ?x18891) ?x18894) ?x18897)))
 (let ((?x18910 (- (- (- (- ?x18898 ?x18900) ?x18903) (* (* 3.0 l_0_8_58) l_0_8_58)) ?x18909)))
 (let ((?x18931 (+ (+ (+ (- (- (- (- ?x18910 ?x18912) ?x18915) ?x18918) ?x18921) ?x18924) ?x18927) ?x18930)))
 (= (+ (+ (+ ?x18931 ?x18933) ?x18936) ?x18939) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15153 (* l_0_8_66 l_0_8_66)))
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19033 (* ?x15308 l_0_8_68)))
 (let ((?x15150 (* l_0_8_65 l_0_8_65)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19030 (* ?x15305 l_0_8_67)))
 (let ((?x15205 (* l_0_8_45 l_0_8_45)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19027 (* ?x15302 l_0_8_47)))
 (let ((?x15199 (* l_0_8_44 l_0_8_44)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19024 (* ?x15299 l_0_8_46)))
 (let ((?x15295 (* 12.0 l_0_8_3)))
 (let ((?x18009 (* ?x15295 l_0_8_5)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18007 (* ?x15291 l_0_8_26)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18005 (* ?x15287 l_0_8_25)))
 (let ((?x15277 (* 12.0 l_0_8_2)))
 (let ((?x18000 (* ?x15277 l_0_8_4)))
 (let ((?x19015 (- (* (* (- 2.0) l_0_8_191) l_0_8_193) (* (* 2.0 l_0_8_192) l_0_8_194))))
 (let ((?x19020 (- (- (+ ?x19015 ?x18000) (* (* 2.0 l_0_8_212) l_0_8_214)) (* (* 2.0 l_0_8_213) l_0_8_215))))
 (let ((?x19029 (+ (- (+ (- (+ (- (- ?x19020 ?x18005) ?x18007) ?x18009) ?x19024) ?x15199) ?x19027) ?x15205)))
 (= (- (+ (- (+ ?x19029 ?x19030) ?x15150) ?x19033) ?x15153) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x17723 (* l_0_8_87 l_0_8_87)))
 (let ((?x17721 (* l_0_8_86 l_0_8_86)))
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19112 (* ?x15308 l_0_8_75)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19110 (* ?x15305 l_0_8_74)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19108 (* ?x15302 l_0_8_54)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19106 (* ?x15299 l_0_8_53)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18092 (* ?x15291 l_0_8_33)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18090 (* ?x15287 l_0_8_32)))
 (let ((?x17706 (* l_0_8_171 l_0_8_171)))
 (let ((?x17704 (* l_0_8_170 l_0_8_170)))
 (let ((?x17702 (* l_0_8_150 l_0_8_150)))
 (let ((?x17700 (* l_0_8_149 l_0_8_149)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18075 (* ?x15784 l_0_8_3)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18073 (* ?x15781 l_0_8_2)))
 (let ((?x19091 (+ (+ (+ (* l_0_8_107 l_0_8_107) (* l_0_8_108 l_0_8_108)) ?x18073) ?x18075)))
 (let ((?x19097 (- (- (- (+ (+ ?x19091 ?x17700) ?x17702) ?x17704) ?x17706) (* (* 2.0 l_0_8_191) l_0_8_200))))
 (let ((?x19101 (- (- ?x19097 (* (* 2.0 l_0_8_192) l_0_8_201)) (* (* 2.0 l_0_8_212) l_0_8_221))))
 (let ((?x19107 (- (- (- (- ?x19101 (* (* 2.0 l_0_8_213) l_0_8_222)) ?x18090) ?x18092) ?x19106)))
 (= (- (- (+ (+ (- ?x19107 ?x19108) ?x19110) ?x19112) ?x17721) ?x17723) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19189 (* ?x15308 l_0_8_80)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19187 (* ?x15305 l_0_8_79)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19185 (* ?x15302 l_0_8_59)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19183 (* ?x15299 l_0_8_58)))
 (let ((?x15291 (* 12.0 l_0_8_24)))
 (let ((?x18180 (* ?x15291 l_0_8_38)))
 (let ((?x15287 (* 12.0 l_0_8_23)))
 (let ((?x18178 (* ?x15287 l_0_8_37)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x18171 (* ?x15978 l_0_8_3)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x18169 (* ?x15975 l_0_8_2)))
 (let ((?x19171 (+ (- (* (- l_0_8_128) l_0_8_128) (* l_0_8_129 l_0_8_129)) ?x18169)))
 (let ((?x19176 (- (- (+ ?x19171 ?x18171) (* (* 2.0 l_0_8_191) l_0_8_205)) (* (* 2.0 l_0_8_192) l_0_8_206))))
 (let ((?x19180 (- (- ?x19176 (* (* 2.0 l_0_8_212) l_0_8_226)) (* (* 2.0 l_0_8_213) l_0_8_227))))
 (= (+ (+ (- (- (- (- ?x19180 ?x18178) ?x18180) ?x19183) ?x19185) ?x19187) ?x19189) 0.0)))))))))))))))))))))
(assert
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19033 (* ?x15308 l_0_8_68)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19030 (* ?x15305 l_0_8_67)))
 (let ((?x16760 (* l_0_8_6 l_0_8_6)))
 (let ((?x18266 (* 6.0 ?x16760)))
 (let ((?x16758 (* l_0_8_5 l_0_8_5)))
 (let ((?x18264 (* 6.0 ?x16758)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19027 (* ?x15302 l_0_8_47)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19024 (* ?x15299 l_0_8_46)))
 (let ((?x16753 (* l_0_8_4 l_0_8_4)))
 (let ((?x18252 (* 6.0 ?x16753)))
 (let ((?x18250 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x18247 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x18244 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x19251 (* l_0_8_216 l_0_8_216)))
 (let ((?x19249 (* l_0_8_215 l_0_8_215)))
 (let ((?x19247 (* l_0_8_214 l_0_8_214)))
 (let ((?x19245 (* l_0_8_195 l_0_8_195)))
 (let ((?x19246 (- (- (* (- l_0_8_193) l_0_8_193) (* l_0_8_194 l_0_8_194)) ?x19245)))
 (let ((?x19256 (+ (- (- (- (- (- (- ?x19246 ?x19247) ?x19249) ?x19251) ?x18244) ?x18247) ?x18250) ?x18252)))
 (let ((?x19264 (- (- (+ (+ ?x19256 ?x19024) ?x19027) (* (* 1.0 l_0_8_46) l_0_8_46)) (* (* 1.0 l_0_8_47) l_0_8_47))))
 (let ((?x19270 (- (+ (+ (- ?x19264 (* (* 1.0 l_0_8_48) l_0_8_48)) ?x18264) ?x18266) ?x19030)))
 (let ((?x19275 (+ (+ (- ?x19270 ?x19033) (* 1.0 (* l_0_8_67 l_0_8_67))) (* 1.0 (* l_0_8_68 l_0_8_68)))))
 (= (+ ?x19275 (* 1.0 (* l_0_8_69 l_0_8_69))) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x19373 (* ?x16449 l_0_8_89)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x19371 (* ?x16446 l_0_8_88)))
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x19369 (* ?x16158 l_0_8_76)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x19367 (* ?x16155 l_0_8_75)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x19365 (* ?x16152 l_0_8_74)))
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19112 (* ?x15308 l_0_8_75)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19110 (* ?x15305 l_0_8_74)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x19361 (* ?x16145 l_0_8_55)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x19359 (* ?x16142 l_0_8_54)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x19357 (* ?x16139 l_0_8_53)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19108 (* ?x15302 l_0_8_54)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19106 (* ?x15299 l_0_8_53)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x18351 (* ?x15547 l_0_8_34)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x18349 (* ?x15544 l_0_8_33)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x18347 (* ?x15541 l_0_8_32)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19337 (* ?x16387 l_0_8_173)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19335 (* ?x16384 l_0_8_172)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19333 (* ?x16381 l_0_8_152)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19331 (* ?x16378 l_0_8_151)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x18335 (* ?x15787 l_0_8_6)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18333 (* ?x15784 l_0_8_5)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18331 (* ?x15781 l_0_8_4)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19326 (* ?x16366 l_0_8_110)))
 (let ((?x19330 (+ (+ (+ (+ (* (* 2.0 l_0_8_107) l_0_8_109) ?x19326) ?x18331) ?x18333) ?x18335)))
 (let ((?x19341 (- (- (- (+ (+ ?x19330 ?x19331) ?x19333) ?x19335) ?x19337) (* (* 2.0 l_0_8_193) l_0_8_200))))
 (let ((?x19345 (- (- ?x19341 (* (* 2.0 l_0_8_194) l_0_8_201)) (* (* 2.0 l_0_8_195) l_0_8_202))))
 (let ((?x19349 (- (- ?x19345 (* (* 2.0 l_0_8_214) l_0_8_221)) (* (* 2.0 l_0_8_215) l_0_8_222))))
 (let ((?x19354 (- (- (- (- ?x19349 (* (* 2.0 l_0_8_216) l_0_8_223)) ?x18347) ?x18349) ?x18351)))
 (let ((?x19364 (- (- (- (- (- (+ (+ ?x19354 ?x19106) ?x19108) ?x19357) ?x19359) ?x19361) ?x19110) ?x19112)))
 (= (- (- (+ (+ (+ ?x19364 ?x19365) ?x19367) ?x19369) ?x19371) ?x19373) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x19515 (* ?x16158 l_0_8_81)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x19513 (* ?x16155 l_0_8_80)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x19511 (* ?x16152 l_0_8_79)))
 (let ((?x15308 (* 2.0 l_0_8_66)))
 (let ((?x19189 (* ?x15308 l_0_8_80)))
 (let ((?x15305 (* 2.0 l_0_8_65)))
 (let ((?x19187 (* ?x15305 l_0_8_79)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x19507 (* ?x16145 l_0_8_60)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x19505 (* ?x16142 l_0_8_59)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x19503 (* ?x16139 l_0_8_58)))
 (let ((?x15302 (* 2.0 l_0_8_45)))
 (let ((?x19185 (* ?x15302 l_0_8_59)))
 (let ((?x15299 (* 2.0 l_0_8_44)))
 (let ((?x19183 (* ?x15299 l_0_8_58)))
 (let ((?x15547 (* 12.0 l_0_8_27)))
 (let ((?x18460 (* ?x15547 l_0_8_39)))
 (let ((?x15544 (* 12.0 l_0_8_26)))
 (let ((?x18458 (* ?x15544 l_0_8_38)))
 (let ((?x15541 (* 12.0 l_0_8_25)))
 (let ((?x18456 (* ?x15541 l_0_8_37)))
 (let ((?x15981 (* 12.0 l_0_8_18)))
 (let ((?x18454 (* ?x15981 l_0_8_6)))
 (let ((?x15978 (* 12.0 l_0_8_17)))
 (let ((?x18452 (* ?x15978 l_0_8_5)))
 (let ((?x15975 (* 12.0 l_0_8_16)))
 (let ((?x18450 (* ?x15975 l_0_8_4)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x17996 (* ?x15459 l_0_8_131)))
 (let ((?x19485 (+ (+ (+ (- (* (* (- 2.0) l_0_8_128) l_0_8_130) ?x17996) ?x18450) ?x18452) ?x18454)))
 (let ((?x19489 (- (- ?x19485 (* (* 2.0 l_0_8_193) l_0_8_205)) (* (* 2.0 l_0_8_194) l_0_8_206))))
 (let ((?x19493 (- (- ?x19489 (* (* 2.0 l_0_8_195) l_0_8_207)) (* (* 2.0 l_0_8_214) l_0_8_226))))
 (let ((?x19497 (- (- ?x19493 (* (* 2.0 l_0_8_215) l_0_8_227)) (* (* 2.0 l_0_8_216) l_0_8_228))))
 (let ((?x19506 (- (- (+ (+ (- (- (- ?x19497 ?x18456) ?x18458) ?x18460) ?x19183) ?x19185) ?x19503) ?x19505)))
 (= (+ (+ (+ (- (- (- ?x19506 ?x19507) ?x19187) ?x19189) ?x19511) ?x19513) ?x19515) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x19663 (* ?x16449 l_0_8_96)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x19661 (* ?x16446 l_0_8_95)))
 (let ((?x18572 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x18569 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x18566 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x18563 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x18560 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x19629 (* l_0_8_225 l_0_8_225)))
 (let ((?x19627 (* l_0_8_224 l_0_8_224)))
 (let ((?x19625 (* l_0_8_223 l_0_8_223)))
 (let ((?x19623 (* l_0_8_222 l_0_8_222)))
 (let ((?x19621 (* l_0_8_221 l_0_8_221)))
 (let ((?x19619 (* l_0_8_204 l_0_8_204)))
 (let ((?x19617 (* l_0_8_203 l_0_8_203)))
 (let ((?x19615 (* l_0_8_202 l_0_8_202)))
 (let ((?x19613 (* l_0_8_201 l_0_8_201)))
 (let ((?x19611 (* l_0_8_200 l_0_8_200)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19609 (* ?x16387 l_0_8_180)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19607 (* ?x16384 l_0_8_179)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19605 (* ?x16381 l_0_8_159)))
 (let ((?x17290 (* l_0_8_15 l_0_8_15)))
 (let ((?x18555 (* 6.0 ?x17290)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19602 (* ?x16378 l_0_8_158)))
 (let ((?x17288 (* l_0_8_14 l_0_8_14)))
 (let ((?x18547 (* 6.0 ?x17288)))
 (let ((?x17286 (* l_0_8_13 l_0_8_13)))
 (let ((?x18539 (* 6.0 ?x17286)))
 (let ((?x17284 (* l_0_8_12 l_0_8_12)))
 (let ((?x18537 (* 6.0 ?x17284)))
 (let ((?x17340 (* l_0_8_11 l_0_8_11)))
 (let ((?x18535 (* 6.0 ?x17340)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19596 (* ?x16366 l_0_8_117)))
 (let ((?x19600 (+ (+ (+ (+ (* (* 2.0 l_0_8_107) l_0_8_116) ?x19596) ?x18535) ?x18537) ?x18539)))
 (let ((?x19612 (- (- (- (+ (+ (+ (+ ?x19600 ?x18547) ?x19602) ?x18555) ?x19605) ?x19607) ?x19609) ?x19611)))
 (let ((?x19626 (- (- (- (- (- (- (- ?x19612 ?x19613) ?x19615) ?x19617) ?x19619) ?x19621) ?x19623) ?x19625)))
 (let ((?x19635 (- (- (- (- (- (- (- ?x19626 ?x19627) ?x19629) ?x18560) ?x18563) ?x18566) ?x18569) ?x18572)))
 (let ((?x19641 (- (- ?x19635 (* (* 1.0 l_0_8_53) l_0_8_53)) (* (* 1.0 l_0_8_54) l_0_8_54))))
 (let ((?x19647 (- (- ?x19641 (* (* 1.0 l_0_8_55) l_0_8_55)) (* (* 1.0 l_0_8_56) l_0_8_56))))
 (let ((?x19652 (+ (- ?x19647 (* (* 1.0 l_0_8_57) l_0_8_57)) (* 1.0 (* l_0_8_74 l_0_8_74)))))
 (let ((?x19656 (+ (+ ?x19652 (* 1.0 (* l_0_8_75 l_0_8_75))) (* 1.0 (* l_0_8_76 l_0_8_76)))))
 (let ((?x19660 (+ (+ ?x19656 (* 1.0 (* l_0_8_77 l_0_8_77))) (* 1.0 (* l_0_8_78 l_0_8_78)))))
 (= (- (- ?x19660 ?x19661) ?x19663) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19841 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x19838 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x19835 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x19832 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x19829 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x19826 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x19823 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x19820 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x19817 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x19814 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x18729 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x18726 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x18723 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x18720 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x18717 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19776 (* ?x16387 l_0_8_185)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19774 (* ?x16384 l_0_8_184)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19772 (* ?x16381 l_0_8_164)))
 (let ((?x18712 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19769 (* ?x16378 l_0_8_163)))
 (let ((?x18701 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x15787 (* 12.0 l_0_8_13)))
 (let ((?x18689 (* ?x15787 l_0_8_18)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x18079 (* ?x15459 l_0_8_138)))
 (let ((?x15448 (* 2.0 l_0_8_128)))
 (let ((?x18077 (* ?x15448 l_0_8_137)))
 (let ((?x15784 (* 12.0 l_0_8_12)))
 (let ((?x18686 (* ?x15784 l_0_8_17)))
 (let ((?x15781 (* 12.0 l_0_8_11)))
 (let ((?x18684 (* ?x15781 l_0_8_16)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19761 (* ?x16366 l_0_8_122)))
 (let ((?x16355 (* 2.0 l_0_8_107)))
 (let ((?x19759 (* ?x16355 l_0_8_121)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x19757 (* ?x17438 l_0_8_87)))
 (let ((?x19763 (+ (+ (+ (- (* (* (- 2.0) l_0_8_100) l_0_8_86) ?x19757) ?x19759) ?x19761) ?x18684)))
 (let ((?x19771 (+ (+ (+ (+ (- (- (+ ?x19763 ?x18686) ?x18077) ?x18079) ?x18689) ?x18701) ?x19769) ?x18712)))
 (let ((?x19780 (- (- (- (+ ?x19771 ?x19772) ?x19774) ?x19776) (* (* 2.0 l_0_8_200) l_0_8_205))))
 (let ((?x19786 (- (- ?x19780 (* (* 2.0 l_0_8_201) l_0_8_206)) (* (* 2.0 l_0_8_202) l_0_8_207))))
 (let ((?x19792 (- (- ?x19786 (* (* 2.0 l_0_8_203) l_0_8_208)) (* (* 2.0 l_0_8_204) l_0_8_209))))
 (let ((?x19798 (- (- ?x19792 (* (* 2.0 l_0_8_221) l_0_8_226)) (* (* 2.0 l_0_8_222) l_0_8_227))))
 (let ((?x19804 (- (- ?x19798 (* (* 2.0 l_0_8_223) l_0_8_228)) (* (* 2.0 l_0_8_224) l_0_8_229))))
 (let ((?x19810 (- (- (- (- ?x19804 (* (* 2.0 l_0_8_225) l_0_8_230)) ?x18717) ?x18720) ?x18723)))
 (let ((?x19827 (- (- (- (- (- (- (- ?x19810 ?x18726) ?x18729) ?x19814) ?x19817) ?x19820) ?x19823) ?x19826)))
 (= (+ (+ (+ (+ (+ ?x19827 ?x19829) ?x19832) ?x19835) ?x19838) ?x19841) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18903 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x18900 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x18897 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x18894 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x18891 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x18888 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x20014 (* l_0_8_231 l_0_8_231)))
 (let ((?x20012 (* l_0_8_230 l_0_8_230)))
 (let ((?x20010 (* l_0_8_229 l_0_8_229)))
 (let ((?x20008 (* l_0_8_228 l_0_8_228)))
 (let ((?x20006 (* l_0_8_227 l_0_8_227)))
 (let ((?x20004 (* l_0_8_226 l_0_8_226)))
 (let ((?x20002 (* l_0_8_210 l_0_8_210)))
 (let ((?x17643 (* l_0_8_21 l_0_8_21)))
 (let ((?x18885 (* 6.0 ?x17643)))
 (let ((?x19999 (* l_0_8_209 l_0_8_209)))
 (let ((?x19997 (* l_0_8_208 l_0_8_208)))
 (let ((?x19995 (* l_0_8_207 l_0_8_207)))
 (let ((?x19993 (* l_0_8_206 l_0_8_206)))
 (let ((?x19991 (* l_0_8_205 l_0_8_205)))
 (let ((?x17641 (* l_0_8_20 l_0_8_20)))
 (let ((?x18883 (* 6.0 ?x17641)))
 (let ((?x17639 (* l_0_8_19 l_0_8_19)))
 (let ((?x18881 (* 6.0 ?x17639)))
 (let ((?x17637 (* l_0_8_18 l_0_8_18)))
 (let ((?x18879 (* 6.0 ?x17637)))
 (let ((?x17635 (* l_0_8_17 l_0_8_17)))
 (let ((?x18877 (* 6.0 ?x17635)))
 (let ((?x17617 (* l_0_8_16 l_0_8_16)))
 (let ((?x18875 (* 6.0 ?x17617)))
 (let ((?x15459 (* 2.0 l_0_8_129)))
 (let ((?x18167 (* ?x15459 l_0_8_143)))
 (let ((?x19988 (+ (+ (+ (- (* (* (- 2.0) l_0_8_128) l_0_8_142) ?x18167) ?x18875) ?x18877) ?x18879)))
 (let ((?x20000 (- (- (- (- (- (+ (+ ?x19988 ?x18881) ?x18883) ?x19991) ?x19993) ?x19995) ?x19997) ?x19999)))
 (let ((?x20013 (- (- (- (- (- (- (+ ?x20000 ?x18885) ?x20002) ?x20004) ?x20006) ?x20008) ?x20010) ?x20012)))
 (let ((?x20021 (- (- (- (- (- (- (- ?x20013 ?x20014) ?x18888) ?x18891) ?x18894) ?x18897) ?x18900) ?x18903)))
 (let ((?x20027 (- (- ?x20021 (* (* 1.0 l_0_8_58) l_0_8_58)) (* (* 1.0 l_0_8_59) l_0_8_59))))
 (let ((?x20033 (- (- ?x20027 (* (* 1.0 l_0_8_60) l_0_8_60)) (* (* 1.0 l_0_8_61) l_0_8_61))))
 (let ((?x20039 (- (- ?x20033 (* (* 1.0 l_0_8_62) l_0_8_62)) (* (* 1.0 l_0_8_63) l_0_8_63))))
 (let ((?x20043 (+ (+ ?x20039 (* 1.0 (* l_0_8_79 l_0_8_79))) (* 1.0 (* l_0_8_80 l_0_8_80)))))
 (let ((?x20047 (+ (+ ?x20043 (* 1.0 (* l_0_8_81 l_0_8_81))) (* 1.0 (* l_0_8_82 l_0_8_82)))))
 (let ((?x20051 (+ (+ ?x20047 (* 1.0 (* l_0_8_83 l_0_8_83))) (* 1.0 (* l_0_8_84 l_0_8_84)))))
 (= ?x20051 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18102 (* ?x15846 l_0_8_86)))
 (let ((?x17718 (* l_0_8_64 l_0_8_64)))
 (let ((?x17719 (* 3.0 ?x17718)))
 (let ((?x17714 (* (* 3.0 l_0_8_43) l_0_8_43)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18083 (* ?x15805 l_0_8_170)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18081 (* ?x15802 l_0_8_149)))
 (let ((?x20133 (+ (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_107) ?x18081) ?x18083) ?x17714) ?x17719)))
 (= (+ ?x20133 ?x18102) 0.0))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x19373 (* ?x16449 l_0_8_89)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x19371 (* ?x16446 l_0_8_88)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17823 (* ?x15403 l_0_8_67)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17816 (* ?x15394 l_0_8_46)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19337 (* ?x16387 l_0_8_173)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19335 (* ?x16384 l_0_8_172)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19333 (* ?x16381 l_0_8_152)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19331 (* ?x16378 l_0_8_151)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19326 (* ?x16366 l_0_8_110)))
 (let ((?x20151 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_109) ?x19326) ?x19331) ?x19333) ?x19335)))
 (= (+ (+ (+ (- (+ ?x20151 ?x19337) ?x17816) ?x17823) ?x19371) ?x19373) 0.0)))))))))))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x16450 (* ?x16449 l_0_8_92)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x16447 (* ?x16446 l_0_8_91)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x15404 (* ?x15403 l_0_8_70)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x15395 (* ?x15394 l_0_8_49)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x16388 (* ?x16387 l_0_8_176)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x16385 (* ?x16384 l_0_8_175)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x16382 (* ?x16381 l_0_8_155)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x16379 (* ?x16378 l_0_8_154)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x16367 (* ?x16366 l_0_8_113)))
 (let ((?x20181 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_112) ?x16367) ?x16379) ?x16382) ?x16385)))
 (= (+ (+ (+ (- (+ ?x20181 ?x16388) ?x15395) ?x15404) ?x16447) ?x16450) 0.0)))))))))))))))))))))
(assert
 (let ((?x16449 (* 2.0 l_0_8_87)))
 (let ((?x19663 (* ?x16449 l_0_8_96)))
 (let ((?x16446 (* 2.0 l_0_8_86)))
 (let ((?x19661 (* ?x16446 l_0_8_95)))
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17888 (* ?x15403 l_0_8_74)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17882 (* ?x15394 l_0_8_53)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19609 (* ?x16387 l_0_8_180)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19607 (* ?x16384 l_0_8_179)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19605 (* ?x16381 l_0_8_159)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19602 (* ?x16378 l_0_8_158)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19596 (* ?x16366 l_0_8_117)))
 (let ((?x20211 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_116) ?x19596) ?x19602) ?x19605) ?x19607)))
 (= (+ (+ (+ (- (+ ?x20211 ?x19609) ?x17882) ?x17888) ?x19661) ?x19663) 0.0)))))))))))))))))))))
(assert
 (let ((?x15403 (* 6.0 l_0_8_64)))
 (let ((?x17950 (* ?x15403 l_0_8_79)))
 (let ((?x15394 (* 6.0 l_0_8_43)))
 (let ((?x17944 (* ?x15394 l_0_8_58)))
 (let ((?x16387 (* 2.0 l_0_8_171)))
 (let ((?x19776 (* ?x16387 l_0_8_185)))
 (let ((?x16384 (* 2.0 l_0_8_170)))
 (let ((?x19774 (* ?x16384 l_0_8_184)))
 (let ((?x16381 (* 2.0 l_0_8_150)))
 (let ((?x19772 (* ?x16381 l_0_8_164)))
 (let ((?x16378 (* 2.0 l_0_8_149)))
 (let ((?x19769 (* ?x16378 l_0_8_163)))
 (let ((?x16366 (* 2.0 l_0_8_108)))
 (let ((?x19761 (* ?x16366 l_0_8_122)))
 (let ((?x16355 (* 2.0 l_0_8_107)))
 (let ((?x19759 (* ?x16355 l_0_8_121)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x19757 (* ?x17438 l_0_8_87)))
 (let ((?x20242 (- (- (- (+ (* (* 2.0 l_0_8_100) l_0_8_86) ?x19757) ?x19759) ?x19761) ?x19769)))
 (= (+ (- (+ (+ (- ?x20242 ?x19772) ?x19774) ?x19776) ?x17944) ?x17950) 0.0)))))))))))))))))))))
(assert
 (let ((?x18275 (* l_0_8_69 l_0_8_69)))
 (let ((?x18276 (* 3.0 ?x18275)))
 (let ((?x18272 (* l_0_8_68 l_0_8_68)))
 (let ((?x18273 (* 3.0 ?x18272)))
 (let ((?x18269 (* l_0_8_67 l_0_8_67)))
 (let ((?x18270 (* 3.0 ?x18269)))
 (let ((?x18262 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x18259 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x20278 (+ (+ (- (- (* (* (- 3.0) l_0_8_46) l_0_8_46) ?x18259) ?x18262) ?x18270) ?x18273)))
 (= (+ ?x20278 ?x18276) 0.0)))))))))))
(assert
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x15577 (* ?x15576 l_0_8_72)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x15574 (* ?x15573 l_0_8_71)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x15571 (* ?x15570 l_0_8_70)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x15561 (* ?x15560 l_0_8_51)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x15558 (* ?x15557 l_0_8_50)))
 (let ((?x20292 (+ (+ (- (- (* (* (- 6.0) l_0_8_46) l_0_8_49) ?x15558) ?x15561) ?x15571) ?x15574)))
 (= (+ ?x20292 ?x15577) 0.0)))))))))))))
(assert
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x18365 (* ?x15576 l_0_8_76)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x18363 (* ?x15573 l_0_8_75)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x18361 (* ?x15570 l_0_8_74)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x18358 (* ?x15560 l_0_8_55)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x18356 (* ?x15557 l_0_8_54)))
 (let ((?x20308 (+ (+ (- (- (* (* (- 6.0) l_0_8_46) l_0_8_53) ?x18356) ?x18358) ?x18361) ?x18363)))
 (= (+ ?x20308 ?x18365) 0.0)))))))))))))
(assert
 (let ((?x15576 (* 6.0 l_0_8_69)))
 (let ((?x18474 (* ?x15576 l_0_8_81)))
 (let ((?x15573 (* 6.0 l_0_8_68)))
 (let ((?x18472 (* ?x15573 l_0_8_80)))
 (let ((?x15570 (* 6.0 l_0_8_67)))
 (let ((?x18470 (* ?x15570 l_0_8_79)))
 (let ((?x15560 (* 6.0 l_0_8_48)))
 (let ((?x18467 (* ?x15560 l_0_8_60)))
 (let ((?x15557 (* 6.0 l_0_8_47)))
 (let ((?x18465 (* ?x15557 l_0_8_59)))
 (let ((?x20324 (+ (+ (- (- (* (* (- 6.0) l_0_8_46) l_0_8_58) ?x18465) ?x18467) ?x18470) ?x18472)))
 (= (+ ?x20324 ?x18474) 0.0)))))))))))))
(assert
 (let ((?x15697 (* l_0_8_73 l_0_8_73)))
 (let ((?x15698 (* 3.0 ?x15697)))
 (let ((?x15694 (* l_0_8_72 l_0_8_72)))
 (let ((?x15695 (* 3.0 ?x15694)))
 (let ((?x15691 (* l_0_8_71 l_0_8_71)))
 (let ((?x15692 (* 3.0 ?x15691)))
 (let ((?x15688 (* l_0_8_70 l_0_8_70)))
 (let ((?x15689 (* 3.0 ?x15688)))
 (let ((?x15683 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x15680 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x15677 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x20341 (+ (- (- (- (* (* (- 3.0) l_0_8_49) l_0_8_49) ?x15677) ?x15680) ?x15683) ?x15689)))
 (= (+ (+ (+ ?x20341 ?x15692) ?x15695) ?x15698) 0.0))))))))))))))
(assert
 (let ((?x15843 (* 6.0 l_0_8_73)))
 (let ((?x15844 (* ?x15843 l_0_8_77)))
 (let ((?x15840 (* 6.0 l_0_8_72)))
 (let ((?x15841 (* ?x15840 l_0_8_76)))
 (let ((?x15837 (* 6.0 l_0_8_71)))
 (let ((?x15838 (* ?x15837 l_0_8_75)))
 (let ((?x15834 (* 6.0 l_0_8_70)))
 (let ((?x15835 (* ?x15834 l_0_8_74)))
 (let ((?x15831 (* 6.0 l_0_8_52)))
 (let ((?x15832 (* ?x15831 l_0_8_56)))
 (let ((?x15828 (* 6.0 l_0_8_51)))
 (let ((?x15829 (* ?x15828 l_0_8_55)))
 (let ((?x15825 (* 6.0 l_0_8_50)))
 (let ((?x15826 (* ?x15825 l_0_8_54)))
 (let ((?x20359 (+ (- (- (- (* (* (- 6.0) l_0_8_49) l_0_8_53) ?x15826) ?x15829) ?x15832) ?x15835)))
 (= (+ (+ (+ ?x20359 ?x15838) ?x15841) ?x15844) 0.0)))))))))))))))))
(assert
 (let ((?x15843 (* 6.0 l_0_8_73)))
 (let ((?x16008 (* ?x15843 l_0_8_82)))
 (let ((?x15840 (* 6.0 l_0_8_72)))
 (let ((?x16006 (* ?x15840 l_0_8_81)))
 (let ((?x15837 (* 6.0 l_0_8_71)))
 (let ((?x16004 (* ?x15837 l_0_8_80)))
 (let ((?x15834 (* 6.0 l_0_8_70)))
 (let ((?x16002 (* ?x15834 l_0_8_79)))
 (let ((?x15831 (* 6.0 l_0_8_52)))
 (let ((?x16000 (* ?x15831 l_0_8_61)))
 (let ((?x15828 (* 6.0 l_0_8_51)))
 (let ((?x15998 (* ?x15828 l_0_8_60)))
 (let ((?x15825 (* 6.0 l_0_8_50)))
 (let ((?x15996 (* ?x15825 l_0_8_59)))
 (let ((?x20376 (+ (- (- (- (* (* (- 6.0) l_0_8_49) l_0_8_58) ?x15996) ?x15998) ?x16000) ?x16002)))
 (= (+ (+ (+ ?x20376 ?x16004) ?x16006) ?x16008) 0.0)))))))))))))))))
(assert
 (let ((?x18601 (* l_0_8_78 l_0_8_78)))
 (let ((?x18602 (* 3.0 ?x18601)))
 (let ((?x18598 (* l_0_8_77 l_0_8_77)))
 (let ((?x18599 (* 3.0 ?x18598)))
 (let ((?x18595 (* l_0_8_76 l_0_8_76)))
 (let ((?x18596 (* 3.0 ?x18595)))
 (let ((?x18592 (* l_0_8_75 l_0_8_75)))
 (let ((?x18593 (* 3.0 ?x18592)))
 (let ((?x18589 (* l_0_8_74 l_0_8_74)))
 (let ((?x18590 (* 3.0 ?x18589)))
 (let ((?x18587 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x18584 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x18581 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x18578 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x20398 (- (- (- (- (* (* (- 3.0) l_0_8_53) l_0_8_53) ?x18578) ?x18581) ?x18584) ?x18587)))
 (= (+ (+ (+ (+ (+ ?x20398 ?x18590) ?x18593) ?x18596) ?x18599) ?x18602) 0.0)))))))))))))))))
(assert
 (let ((?x18759 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x18756 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x18753 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x18750 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x18747 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x18744 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x18741 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x18738 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x18735 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x20420 (- (- (- (- (* (* (- 6.0) l_0_8_53) l_0_8_58) ?x18735) ?x18738) ?x18741) ?x18744)))
 (= (+ (+ (+ (+ (+ ?x20420 ?x18747) ?x18750) ?x18753) ?x18756) ?x18759) 0.0))))))))))))
(assert
 (let ((?x18938 (* l_0_8_84 l_0_8_84)))
 (let ((?x18939 (* 3.0 ?x18938)))
 (let ((?x18935 (* l_0_8_83 l_0_8_83)))
 (let ((?x18936 (* 3.0 ?x18935)))
 (let ((?x18932 (* l_0_8_82 l_0_8_82)))
 (let ((?x18933 (* 3.0 ?x18932)))
 (let ((?x18929 (* l_0_8_81 l_0_8_81)))
 (let ((?x18930 (* 3.0 ?x18929)))
 (let ((?x18926 (* l_0_8_80 l_0_8_80)))
 (let ((?x18927 (* 3.0 ?x18926)))
 (let ((?x18923 (* l_0_8_79 l_0_8_79)))
 (let ((?x18924 (* 3.0 ?x18923)))
 (let ((?x18921 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x18918 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x18915 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x18912 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x18909 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x20447 (- (- (- (- (* (* (- 3.0) l_0_8_58) l_0_8_58) ?x18909) ?x18912) ?x18915) ?x18918)))
 (let ((?x20454 (+ (+ (+ (+ (+ (+ (- ?x20447 ?x18921) ?x18924) ?x18927) ?x18930) ?x18933) ?x18936) ?x18939)))
 (= ?x20454 0.0)))))))))))))))))))))
(assert
 (let ((?x18275 (* l_0_8_69 l_0_8_69)))
 (let ((?x18272 (* l_0_8_68 l_0_8_68)))
 (let ((?x18269 (* l_0_8_67 l_0_8_67)))
 (let ((?x18308 (* l_0_8_48 l_0_8_48)))
 (let ((?x20470 (- (+ (+ (* l_0_8_46 l_0_8_46) (* l_0_8_47 l_0_8_47)) ?x18308) ?x18269)))
 (= (- (- ?x20470 ?x18272) ?x18275) 0.0)))))))
(assert
 (let ((?x20510 (* l_0_8_90 l_0_8_90)))
 (let ((?x20508 (* l_0_8_89 l_0_8_89)))
 (let ((?x20506 (* l_0_8_88 l_0_8_88)))
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x19369 (* ?x16158 l_0_8_76)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x19367 (* ?x16155 l_0_8_75)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x19365 (* ?x16152 l_0_8_74)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x19361 (* ?x16145 l_0_8_55)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x19359 (* ?x16142 l_0_8_54)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x19357 (* ?x16139 l_0_8_53)))
 (let ((?x20498 (* l_0_8_174 l_0_8_174)))
 (let ((?x20496 (* l_0_8_173 l_0_8_173)))
 (let ((?x20494 (* l_0_8_172 l_0_8_172)))
 (let ((?x20492 (* l_0_8_153 l_0_8_153)))
 (let ((?x20490 (* l_0_8_152 l_0_8_152)))
 (let ((?x20488 (* l_0_8_151 l_0_8_151)))
 (let ((?x20486 (* l_0_8_111 l_0_8_111)))
 (let ((?x20489 (+ (+ (+ (* l_0_8_109 l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x20486) ?x20488)))
 (let ((?x20501 (+ (+ (- (- (- (+ (+ ?x20489 ?x20490) ?x20492) ?x20494) ?x20496) ?x20498) ?x19357) ?x19359)))
 (let ((?x20511 (- (- (- (- (- (- (+ ?x20501 ?x19361) ?x19365) ?x19367) ?x19369) ?x20506) ?x20508) ?x20510)))
 (= ?x20511 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x16158 (* 2.0 l_0_8_69)))
 (let ((?x19515 (* ?x16158 l_0_8_81)))
 (let ((?x16155 (* 2.0 l_0_8_68)))
 (let ((?x19513 (* ?x16155 l_0_8_80)))
 (let ((?x16152 (* 2.0 l_0_8_67)))
 (let ((?x19511 (* ?x16152 l_0_8_79)))
 (let ((?x16145 (* 2.0 l_0_8_48)))
 (let ((?x19507 (* ?x16145 l_0_8_60)))
 (let ((?x16142 (* 2.0 l_0_8_47)))
 (let ((?x19505 (* ?x16142 l_0_8_59)))
 (let ((?x16139 (* 2.0 l_0_8_46)))
 (let ((?x19503 (* ?x16139 l_0_8_58)))
 (let ((?x18241 (* l_0_8_132 l_0_8_132)))
 (let ((?x20549 (- (- (* (- l_0_8_130) l_0_8_130) (* l_0_8_131 l_0_8_131)) ?x18241)))
 (= (- (- (- (+ (+ (+ ?x20549 ?x19503) ?x19505) ?x19507) ?x19511) ?x19513) ?x19515) 0.0))))))))))))))))
(assert
 (let ((?x16899 (* 2.0 l_0_8_90)))
 (let ((?x20607 (* ?x16899 l_0_8_97)))
 (let ((?x16896 (* 2.0 l_0_8_89)))
 (let ((?x20605 (* ?x16896 l_0_8_96)))
 (let ((?x16893 (* 2.0 l_0_8_88)))
 (let ((?x20603 (* ?x16893 l_0_8_95)))
 (let ((?x18601 (* l_0_8_78 l_0_8_78)))
 (let ((?x18598 (* l_0_8_77 l_0_8_77)))
 (let ((?x18595 (* l_0_8_76 l_0_8_76)))
 (let ((?x18592 (* l_0_8_75 l_0_8_75)))
 (let ((?x18589 (* l_0_8_74 l_0_8_74)))
 (let ((?x18667 (* l_0_8_57 l_0_8_57)))
 (let ((?x18661 (* l_0_8_56 l_0_8_56)))
 (let ((?x18655 (* l_0_8_55 l_0_8_55)))
 (let ((?x18649 (* l_0_8_54 l_0_8_54)))
 (let ((?x18643 (* l_0_8_53 l_0_8_53)))
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x20591 (* ?x16876 l_0_8_181)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x20589 (* ?x16873 l_0_8_180)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x20587 (* ?x16870 l_0_8_179)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x20585 (* ?x16867 l_0_8_160)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x20583 (* ?x16864 l_0_8_159)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x20581 (* ?x16861 l_0_8_158)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x20579 (* ?x16853 l_0_8_118)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x20577 (* ?x16850 l_0_8_117)))
 (let ((?x20584 (+ (+ (+ (+ (* (* 2.0 l_0_8_109) l_0_8_116) ?x20577) ?x20579) ?x20581) ?x20583)))
 (let ((?x20595 (+ (+ (+ (- (- (- (+ ?x20584 ?x20585) ?x20587) ?x20589) ?x20591) ?x18643) ?x18649) ?x18655)))
 (let ((?x20602 (- (- (- (- (- (+ (+ ?x20595 ?x18661) ?x18667) ?x18589) ?x18592) ?x18595) ?x18598) ?x18601)))
 (= (- (- (- ?x20602 ?x20603) ?x20605) ?x20607) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19841 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x19838 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x19835 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x19832 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x19829 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x19826 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x19823 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x19820 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x19817 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x19814 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x20707 (* ?x16876 l_0_8_186)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x20705 (* ?x16873 l_0_8_185)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x20703 (* ?x16870 l_0_8_184)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x20701 (* ?x16867 l_0_8_165)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x20699 (* ?x16864 l_0_8_164)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x20697 (* ?x16861 l_0_8_163)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x18341 (* ?x15536 l_0_8_139)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x18339 (* ?x15533 l_0_8_138)))
 (let ((?x15523 (* 2.0 l_0_8_130)))
 (let ((?x18337 (* ?x15523 l_0_8_137)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x20692 (* ?x16853 l_0_8_123)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x20690 (* ?x16850 l_0_8_122)))
 (let ((?x16846 (* 2.0 l_0_8_109)))
 (let ((?x20688 (* ?x16846 l_0_8_121)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x20686 (* ?x17441 l_0_8_90)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x20684 (* ?x17438 l_0_8_89)))
 (let ((?x20691 (+ (+ (- (- (* (* (- 2.0) l_0_8_100) l_0_8_88) ?x20684) ?x20686) ?x20688) ?x20690)))
 (let ((?x20702 (+ (+ (+ (- (- (- (+ ?x20691 ?x20692) ?x18337) ?x18339) ?x18341) ?x20697) ?x20699) ?x20701)))
 (let ((?x20712 (+ (+ (+ (+ (- (- (- ?x20702 ?x20703) ?x20705) ?x20707) ?x19814) ?x19817) ?x19820) ?x19823)))
 (= (- (- (- (- (- (+ ?x20712 ?x19826) ?x19829) ?x19832) ?x19835) ?x19838) ?x19841) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18938 (* l_0_8_84 l_0_8_84)))
 (let ((?x18935 (* l_0_8_83 l_0_8_83)))
 (let ((?x18932 (* l_0_8_82 l_0_8_82)))
 (let ((?x18929 (* l_0_8_81 l_0_8_81)))
 (let ((?x18926 (* l_0_8_80 l_0_8_80)))
 (let ((?x18923 (* l_0_8_79 l_0_8_79)))
 (let ((?x19004 (* l_0_8_63 l_0_8_63)))
 (let ((?x18998 (* l_0_8_62 l_0_8_62)))
 (let ((?x18992 (* l_0_8_61 l_0_8_61)))
 (let ((?x18986 (* l_0_8_60 l_0_8_60)))
 (let ((?x18980 (* l_0_8_59 l_0_8_59)))
 (let ((?x18974 (* l_0_8_58 l_0_8_58)))
 (let ((?x15536 (* 2.0 l_0_8_132)))
 (let ((?x18448 (* ?x15536 l_0_8_144)))
 (let ((?x15533 (* 2.0 l_0_8_131)))
 (let ((?x18446 (* ?x15533 l_0_8_143)))
 (let ((?x20812 (+ (+ (- (- (* (* (- 2.0) l_0_8_130) l_0_8_142) ?x18446) ?x18448) ?x18974) ?x18980)))
 (let ((?x20819 (- (- (- (+ (+ (+ (+ ?x20812 ?x18986) ?x18992) ?x18998) ?x19004) ?x18923) ?x18926) ?x18929)))
 (= (- (- (- ?x20819 ?x18932) ?x18935) ?x18938) 0.0))))))))))))))))))))
(assert
 (let ((?x20891 (* l_0_8_99 l_0_8_99)))
 (let ((?x20889 (* l_0_8_98 l_0_8_98)))
 (let ((?x20887 (* l_0_8_97 l_0_8_97)))
 (let ((?x20885 (* l_0_8_96 l_0_8_96)))
 (let ((?x20883 (* l_0_8_95 l_0_8_95)))
 (let ((?x20881 (* l_0_8_183 l_0_8_183)))
 (let ((?x20879 (* l_0_8_182 l_0_8_182)))
 (let ((?x20877 (* l_0_8_181 l_0_8_181)))
 (let ((?x20875 (* l_0_8_180 l_0_8_180)))
 (let ((?x20873 (* l_0_8_179 l_0_8_179)))
 (let ((?x20871 (* l_0_8_162 l_0_8_162)))
 (let ((?x20869 (* l_0_8_161 l_0_8_161)))
 (let ((?x20867 (* l_0_8_160 l_0_8_160)))
 (let ((?x20865 (* l_0_8_159 l_0_8_159)))
 (let ((?x20863 (* l_0_8_158 l_0_8_158)))
 (let ((?x20861 (* l_0_8_120 l_0_8_120)))
 (let ((?x20859 (* l_0_8_119 l_0_8_119)))
 (let ((?x20857 (* l_0_8_118 l_0_8_118)))
 (let ((?x20860 (+ (+ (+ (* l_0_8_116 l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20857) ?x20859)))
 (let ((?x20874 (- (+ (+ (+ (+ (+ (+ ?x20860 ?x20861) ?x20863) ?x20865) ?x20867) ?x20869) ?x20871) ?x20873)))
 (let ((?x20888 (- (- (- (- (- (- (- ?x20874 ?x20875) ?x20877) ?x20879) ?x20881) ?x20883) ?x20885) ?x20887)))
 (= (- (- ?x20888 ?x20889) ?x20891) 0.0)))))))))))))))))))))))
(assert
 (let ((?x20984 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x20981 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x20978 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x20975 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x20972 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x20969 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x20966 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x20963 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x20960 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x20957 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x18551 (* l_0_8_141 l_0_8_141)))
 (let ((?x18549 (* l_0_8_140 l_0_8_140)))
 (let ((?x18545 (* l_0_8_139 l_0_8_139)))
 (let ((?x18543 (* l_0_8_138 l_0_8_138)))
 (let ((?x18541 (* l_0_8_137 l_0_8_137)))
 (let ((?x20949 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x20946 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x20943 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x20940 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x20937 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x20934 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x17444 (* 2.0 l_0_8_103)))
 (let ((?x20931 (* ?x17444 l_0_8_98)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x20929 (* ?x17441 l_0_8_97)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x20927 (* ?x17438 l_0_8_96)))
 (let ((?x20935 (- (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_95) ?x20927) ?x20929) ?x20931) ?x20934)))
 (let ((?x20952 (- (- (+ (+ (+ (+ (+ ?x20935 ?x20937) ?x20940) ?x20943) ?x20946) ?x20949) ?x18541) ?x18543)))
 (let ((?x20967 (+ (+ (+ (+ (- (- (- ?x20952 ?x18545) ?x18549) ?x18551) ?x20957) ?x20960) ?x20963) ?x20966)))
 (= (- (- (- (- (- (+ ?x20967 ?x20969) ?x20972) ?x20975) ?x20978) ?x20981) ?x20984) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x21144 (* l_0_8_189 l_0_8_189)))
 (let ((?x21142 (* l_0_8_188 l_0_8_188)))
 (let ((?x21140 (* l_0_8_187 l_0_8_187)))
 (let ((?x21138 (* l_0_8_186 l_0_8_186)))
 (let ((?x21136 (* l_0_8_185 l_0_8_185)))
 (let ((?x21134 (* l_0_8_184 l_0_8_184)))
 (let ((?x21132 (* l_0_8_168 l_0_8_168)))
 (let ((?x21130 (* l_0_8_167 l_0_8_167)))
 (let ((?x21128 (* l_0_8_166 l_0_8_166)))
 (let ((?x21126 (* l_0_8_165 l_0_8_165)))
 (let ((?x21124 (* l_0_8_164 l_0_8_164)))
 (let ((?x21122 (* l_0_8_163 l_0_8_163)))
 (let ((?x18707 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18704 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x18698 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18695 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18692 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x21115 (* l_0_8_126 l_0_8_126)))
 (let ((?x21113 (* l_0_8_125 l_0_8_125)))
 (let ((?x21111 (* l_0_8_124 l_0_8_124)))
 (let ((?x21109 (* l_0_8_123 l_0_8_123)))
 (let ((?x21107 (* l_0_8_122 l_0_8_122)))
 (let ((?x21105 (* l_0_8_121 l_0_8_121)))
 (let ((?x21103 (* l_0_8_105 l_0_8_105)))
 (let ((?x21101 (* l_0_8_104 l_0_8_104)))
 (let ((?x21099 (* l_0_8_103 l_0_8_103)))
 (let ((?x21097 (* l_0_8_102 l_0_8_102)))
 (let ((?x21098 (- (- (* (- l_0_8_100) l_0_8_100) (* l_0_8_101 l_0_8_101)) ?x21097)))
 (let ((?x21112 (+ (+ (+ (+ (- (- (- ?x21098 ?x21099) ?x21101) ?x21103) ?x21105) ?x21107) ?x21109) ?x21111)))
 (let ((?x21121 (- (- (- (- (- (+ (+ ?x21112 ?x21113) ?x21115) ?x18692) ?x18695) ?x18698) ?x18704) ?x18707)))
 (let ((?x21135 (- (+ (+ (+ (+ (+ (+ ?x21121 ?x21122) ?x21124) ?x21126) ?x21128) ?x21130) ?x21132) ?x21134)))
 (= (- (- (- (- (- ?x21135 ?x21136) ?x21138) ?x21140) ?x21142) ?x21144) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x17894 (* l_0_8_85 l_0_8_85)))
 (let ((?x17878 (* l_0_8_169 l_0_8_169)))
 (let ((?x21222 (+ (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_148 l_0_8_148)) ?x17878)))
 (= (+ ?x21222 ?x17894) 0.0)))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18367 (* ?x15846 l_0_8_88)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18345 (* ?x15805 l_0_8_172)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18343 (* ?x15802 l_0_8_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_109) ?x18343) ?x18345) ?x18367) 0.0))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x15847 (* ?x15846 l_0_8_91)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x15806 (* ?x15805 l_0_8_175)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x15803 (* ?x15802 l_0_8_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x15803) ?x15806) ?x15847) 0.0))))))))
(assert
 (let ((?x15846 (* 2.0 l_0_8_85)))
 (let ((?x18604 (* ?x15846 l_0_8_95)))
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18557 (* ?x15805 l_0_8_179)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18553 (* ?x15802 l_0_8_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_116) ?x18553) ?x18557) ?x18604) 0.0))))))))
(assert
 (let ((?x15805 (* 2.0 l_0_8_169)))
 (let ((?x18714 (* ?x15805 l_0_8_184)))
 (let ((?x15802 (* 2.0 l_0_8_148)))
 (let ((?x18709 (* ?x15802 l_0_8_163)))
 (let ((?x15778 (* 2.0 l_0_8_106)))
 (let ((?x18682 (* ?x15778 l_0_8_121)))
 (= (+ (- (- (* (* 2.0 l_0_8_100) l_0_8_85) ?x18682) ?x18709) ?x18714) 0.0))))))))
(assert
 (let ((?x20510 (* l_0_8_90 l_0_8_90)))
 (let ((?x20508 (* l_0_8_89 l_0_8_89)))
 (let ((?x20506 (* l_0_8_88 l_0_8_88)))
 (let ((?x20498 (* l_0_8_174 l_0_8_174)))
 (let ((?x20496 (* l_0_8_173 l_0_8_173)))
 (let ((?x20494 (* l_0_8_172 l_0_8_172)))
 (let ((?x20492 (* l_0_8_153 l_0_8_153)))
 (let ((?x20490 (* l_0_8_152 l_0_8_152)))
 (let ((?x20488 (* l_0_8_151 l_0_8_151)))
 (let ((?x20486 (* l_0_8_111 l_0_8_111)))
 (let ((?x21284 (- (- (* (- l_0_8_109) l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x20486)))
 (let ((?x21291 (+ (+ (+ (+ (- (- (- ?x21284 ?x20488) ?x20490) ?x20492) ?x20494) ?x20496) ?x20498) ?x20506)))
 (= (+ (+ ?x21291 ?x20508) ?x20510) 0.0))))))))))))))
(assert
 (let ((?x16899 (* 2.0 l_0_8_90)))
 (let ((?x16900 (* ?x16899 l_0_8_93)))
 (let ((?x16896 (* 2.0 l_0_8_89)))
 (let ((?x16897 (* ?x16896 l_0_8_92)))
 (let ((?x16893 (* 2.0 l_0_8_88)))
 (let ((?x16894 (* ?x16893 l_0_8_91)))
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x16877 (* ?x16876 l_0_8_177)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x16874 (* ?x16873 l_0_8_176)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x16871 (* ?x16870 l_0_8_175)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x16868 (* ?x16867 l_0_8_156)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x16865 (* ?x16864 l_0_8_155)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x16862 (* ?x16861 l_0_8_154)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x16854 (* ?x16853 l_0_8_114)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x16851 (* ?x16850 l_0_8_113)))
 (let ((?x21318 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_112) ?x16851) ?x16854) ?x16862) ?x16865)))
 (let ((?x21325 (+ (+ (+ (+ (+ (+ (- ?x21318 ?x16868) ?x16871) ?x16874) ?x16877) ?x16894) ?x16897) ?x16900)))
 (= ?x21325 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16899 (* 2.0 l_0_8_90)))
 (let ((?x20607 (* ?x16899 l_0_8_97)))
 (let ((?x16896 (* 2.0 l_0_8_89)))
 (let ((?x20605 (* ?x16896 l_0_8_96)))
 (let ((?x16893 (* 2.0 l_0_8_88)))
 (let ((?x20603 (* ?x16893 l_0_8_95)))
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x20591 (* ?x16876 l_0_8_181)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x20589 (* ?x16873 l_0_8_180)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x20587 (* ?x16870 l_0_8_179)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x20585 (* ?x16867 l_0_8_160)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x20583 (* ?x16864 l_0_8_159)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x20581 (* ?x16861 l_0_8_158)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x20579 (* ?x16853 l_0_8_118)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x20577 (* ?x16850 l_0_8_117)))
 (let ((?x21354 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_116) ?x20577) ?x20579) ?x20581) ?x20583)))
 (let ((?x21361 (+ (+ (+ (+ (+ (+ (- ?x21354 ?x20585) ?x20587) ?x20589) ?x20591) ?x20603) ?x20605) ?x20607)))
 (= ?x21361 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16876 (* 2.0 l_0_8_174)))
 (let ((?x20707 (* ?x16876 l_0_8_186)))
 (let ((?x16873 (* 2.0 l_0_8_173)))
 (let ((?x20705 (* ?x16873 l_0_8_185)))
 (let ((?x16870 (* 2.0 l_0_8_172)))
 (let ((?x20703 (* ?x16870 l_0_8_184)))
 (let ((?x16867 (* 2.0 l_0_8_153)))
 (let ((?x20701 (* ?x16867 l_0_8_165)))
 (let ((?x16864 (* 2.0 l_0_8_152)))
 (let ((?x20699 (* ?x16864 l_0_8_164)))
 (let ((?x16861 (* 2.0 l_0_8_151)))
 (let ((?x20697 (* ?x16861 l_0_8_163)))
 (let ((?x16853 (* 2.0 l_0_8_111)))
 (let ((?x20692 (* ?x16853 l_0_8_123)))
 (let ((?x16850 (* 2.0 l_0_8_110)))
 (let ((?x20690 (* ?x16850 l_0_8_122)))
 (let ((?x16846 (* 2.0 l_0_8_109)))
 (let ((?x20688 (* ?x16846 l_0_8_121)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x20686 (* ?x17441 l_0_8_90)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x20684 (* ?x17438 l_0_8_89)))
 (let ((?x21384 (- (- (+ (+ (* (* 2.0 l_0_8_100) l_0_8_88) ?x20684) ?x20686) ?x20688) ?x20690)))
 (let ((?x21391 (+ (+ (+ (- (- (- (- ?x21384 ?x20692) ?x20697) ?x20699) ?x20701) ?x20703) ?x20705) ?x20707)))
 (= ?x21391 0.0))))))))))))))))))))))))))
(assert
 (let ((?x17154 (* l_0_8_94 l_0_8_94)))
 (let ((?x17152 (* l_0_8_93 l_0_8_93)))
 (let ((?x17150 (* l_0_8_92 l_0_8_92)))
 (let ((?x17148 (* l_0_8_91 l_0_8_91)))
 (let ((?x17134 (* l_0_8_178 l_0_8_178)))
 (let ((?x17132 (* l_0_8_177 l_0_8_177)))
 (let ((?x17130 (* l_0_8_176 l_0_8_176)))
 (let ((?x17128 (* l_0_8_175 l_0_8_175)))
 (let ((?x17126 (* l_0_8_157 l_0_8_157)))
 (let ((?x17124 (* l_0_8_156 l_0_8_156)))
 (let ((?x17122 (* l_0_8_155 l_0_8_155)))
 (let ((?x17120 (* l_0_8_154 l_0_8_154)))
 (let ((?x17114 (* l_0_8_115 l_0_8_115)))
 (let ((?x17112 (* l_0_8_114 l_0_8_114)))
 (let ((?x3409 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x17112)))
 (let ((?x21412 (+ (+ (- (- (- (- (- ?x3409 ?x17114) ?x17120) ?x17122) ?x17124) ?x17126) ?x17128) ?x17130)))
 (= (+ (+ (+ (+ (+ (+ ?x21412 ?x17132) ?x17134) ?x17148) ?x17150) ?x17152) ?x17154) 0.0))))))))))))))))))
(assert
 (let ((?x17336 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x17333 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x17330 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x17327 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x17313 (* 2.0 l_0_8_178)))
 (let ((?x17314 (* ?x17313 l_0_8_182)))
 (let ((?x17310 (* 2.0 l_0_8_177)))
 (let ((?x17311 (* ?x17310 l_0_8_181)))
 (let ((?x17307 (* 2.0 l_0_8_176)))
 (let ((?x17308 (* ?x17307 l_0_8_180)))
 (let ((?x17304 (* 2.0 l_0_8_175)))
 (let ((?x17305 (* ?x17304 l_0_8_179)))
 (let ((?x17301 (* 2.0 l_0_8_157)))
 (let ((?x17302 (* ?x17301 l_0_8_161)))
 (let ((?x17298 (* 2.0 l_0_8_156)))
 (let ((?x17299 (* ?x17298 l_0_8_160)))
 (let ((?x17295 (* 2.0 l_0_8_155)))
 (let ((?x17296 (* ?x17295 l_0_8_159)))
 (let ((?x17292 (* 2.0 l_0_8_154)))
 (let ((?x17293 (* ?x17292 l_0_8_158)))
 (let ((?x17281 (* 2.0 l_0_8_115)))
 (let ((?x17282 (* ?x17281 l_0_8_119)))
 (let ((?x17278 (* 2.0 l_0_8_114)))
 (let ((?x17279 (* ?x17278 l_0_8_118)))
 (let ((?x17275 (* 2.0 l_0_8_113)))
 (let ((?x17276 (* ?x17275 l_0_8_117)))
 (let ((?x3590 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_116) ?x17276) ?x17279) ?x17282) ?x17293)))
 (let ((?x3530 (+ (+ (+ (+ (- (- (- ?x3590 ?x17296) ?x17299) ?x17302) ?x17305) ?x17308) ?x17311) ?x17314)))
 (= (+ (+ (+ (+ ?x3530 ?x17327) ?x17330) ?x17333) ?x17336) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17313 (* 2.0 l_0_8_178)))
 (let ((?x17485 (* ?x17313 l_0_8_187)))
 (let ((?x17310 (* 2.0 l_0_8_177)))
 (let ((?x17483 (* ?x17310 l_0_8_186)))
 (let ((?x17307 (* 2.0 l_0_8_176)))
 (let ((?x17481 (* ?x17307 l_0_8_185)))
 (let ((?x17304 (* 2.0 l_0_8_175)))
 (let ((?x17479 (* ?x17304 l_0_8_184)))
 (let ((?x17301 (* 2.0 l_0_8_157)))
 (let ((?x17477 (* ?x17301 l_0_8_166)))
 (let ((?x17298 (* 2.0 l_0_8_156)))
 (let ((?x17475 (* ?x17298 l_0_8_165)))
 (let ((?x17295 (* 2.0 l_0_8_155)))
 (let ((?x17473 (* ?x17295 l_0_8_164)))
 (let ((?x17292 (* 2.0 l_0_8_154)))
 (let ((?x17471 (* ?x17292 l_0_8_163)))
 (let ((?x17281 (* 2.0 l_0_8_115)))
 (let ((?x17455 (* ?x17281 l_0_8_124)))
 (let ((?x17278 (* 2.0 l_0_8_114)))
 (let ((?x17453 (* ?x17278 l_0_8_123)))
 (let ((?x17275 (* 2.0 l_0_8_113)))
 (let ((?x17451 (* ?x17275 l_0_8_122)))
 (let ((?x17265 (* 2.0 l_0_8_112)))
 (let ((?x17449 (* ?x17265 l_0_8_121)))
 (let ((?x17444 (* 2.0 l_0_8_103)))
 (let ((?x17445 (* ?x17444 l_0_8_94)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x17442 (* ?x17441 l_0_8_93)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x17439 (* ?x17438 l_0_8_92)))
 (let ((?x3762 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_91) ?x17439) ?x17442) ?x17445) ?x17449)))
 (let ((?x3666 (- (- (- (- (- (- (- ?x3762 ?x17451) ?x17453) ?x17455) ?x17471) ?x17473) ?x17475) ?x17477)))
 (= (+ (+ (+ (+ ?x3666 ?x17479) ?x17481) ?x17483) ?x17485) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x20891 (* l_0_8_99 l_0_8_99)))
 (let ((?x20889 (* l_0_8_98 l_0_8_98)))
 (let ((?x20887 (* l_0_8_97 l_0_8_97)))
 (let ((?x20885 (* l_0_8_96 l_0_8_96)))
 (let ((?x20883 (* l_0_8_95 l_0_8_95)))
 (let ((?x20881 (* l_0_8_183 l_0_8_183)))
 (let ((?x20879 (* l_0_8_182 l_0_8_182)))
 (let ((?x20877 (* l_0_8_181 l_0_8_181)))
 (let ((?x20875 (* l_0_8_180 l_0_8_180)))
 (let ((?x20873 (* l_0_8_179 l_0_8_179)))
 (let ((?x20871 (* l_0_8_162 l_0_8_162)))
 (let ((?x20869 (* l_0_8_161 l_0_8_161)))
 (let ((?x20867 (* l_0_8_160 l_0_8_160)))
 (let ((?x20865 (* l_0_8_159 l_0_8_159)))
 (let ((?x20863 (* l_0_8_158 l_0_8_158)))
 (let ((?x20861 (* l_0_8_120 l_0_8_120)))
 (let ((?x20859 (* l_0_8_119 l_0_8_119)))
 (let ((?x20857 (* l_0_8_118 l_0_8_118)))
 (let ((?x3899 (- (- (* (- l_0_8_116) l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20857)))
 (let ((?x3795 (- (- (- (- (- (- (- ?x3899 ?x20859) ?x20861) ?x20863) ?x20865) ?x20867) ?x20869) ?x20871)))
 (let ((?x3490 (+ (+ (+ (+ (+ (+ (+ ?x3795 ?x20873) ?x20875) ?x20877) ?x20879) ?x20881) ?x20883) ?x20885)))
 (= (+ (+ (+ ?x3490 ?x20887) ?x20889) ?x20891) 0.0)))))))))))))))))))))))
(assert
 (let ((?x20984 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x20981 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x20978 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x20975 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x20972 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x20969 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x20966 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x20963 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x20960 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x20957 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x20949 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x20946 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x20943 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x20940 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x20937 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x20934 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x17444 (* 2.0 l_0_8_103)))
 (let ((?x20931 (* ?x17444 l_0_8_98)))
 (let ((?x17441 (* 2.0 l_0_8_102)))
 (let ((?x20929 (* ?x17441 l_0_8_97)))
 (let ((?x17438 (* 2.0 l_0_8_101)))
 (let ((?x20927 (* ?x17438 l_0_8_96)))
 (let ((?x4161 (+ (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_95) ?x20927) ?x20929) ?x20931) ?x20934)))
 (let ((?x3998 (- (- (- (- (- (- (- ?x4161 ?x20937) ?x20940) ?x20943) ?x20946) ?x20949) ?x20957) ?x20960)))
 (let ((?x4003 (+ (+ (+ (+ (- (- (- ?x3998 ?x20963) ?x20966) ?x20969) ?x20972) ?x20975) ?x20978) ?x20981)))
 (= (+ ?x4003 ?x20984) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x21144 (* l_0_8_189 l_0_8_189)))
 (let ((?x21142 (* l_0_8_188 l_0_8_188)))
 (let ((?x21140 (* l_0_8_187 l_0_8_187)))
 (let ((?x21138 (* l_0_8_186 l_0_8_186)))
 (let ((?x21136 (* l_0_8_185 l_0_8_185)))
 (let ((?x21134 (* l_0_8_184 l_0_8_184)))
 (let ((?x21132 (* l_0_8_168 l_0_8_168)))
 (let ((?x21130 (* l_0_8_167 l_0_8_167)))
 (let ((?x21128 (* l_0_8_166 l_0_8_166)))
 (let ((?x21126 (* l_0_8_165 l_0_8_165)))
 (let ((?x21124 (* l_0_8_164 l_0_8_164)))
 (let ((?x21122 (* l_0_8_163 l_0_8_163)))
 (let ((?x21115 (* l_0_8_126 l_0_8_126)))
 (let ((?x21113 (* l_0_8_125 l_0_8_125)))
 (let ((?x21111 (* l_0_8_124 l_0_8_124)))
 (let ((?x21109 (* l_0_8_123 l_0_8_123)))
 (let ((?x21107 (* l_0_8_122 l_0_8_122)))
 (let ((?x21105 (* l_0_8_121 l_0_8_121)))
 (let ((?x21103 (* l_0_8_105 l_0_8_105)))
 (let ((?x21101 (* l_0_8_104 l_0_8_104)))
 (let ((?x21099 (* l_0_8_103 l_0_8_103)))
 (let ((?x21097 (* l_0_8_102 l_0_8_102)))
 (let ((?x4369 (+ (+ (+ (* l_0_8_100 l_0_8_100) (* l_0_8_101 l_0_8_101)) ?x21097) ?x21099)))
 (let ((?x4311 (- (- (- (- (- (+ (+ ?x4369 ?x21101) ?x21103) ?x21105) ?x21107) ?x21109) ?x21111) ?x21113)))
 (let ((?x4239 (- (- (- (- (- (- (- ?x4311 ?x21115) ?x21122) ?x21124) ?x21126) ?x21128) ?x21130) ?x21132)))
 (= (+ (+ (+ (+ (+ (+ ?x4239 ?x21134) ?x21136) ?x21138) ?x21140) ?x21142) ?x21144) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x18873 (* l_0_8_147 l_0_8_147)))
 (let ((?x18871 (* l_0_8_146 l_0_8_146)))
 (let ((?x18869 (* l_0_8_145 l_0_8_145)))
 (let ((?x18867 (* l_0_8_144 l_0_8_144)))
 (let ((?x4555 (- (- (* (- l_0_8_142) l_0_8_142) (* l_0_8_143 l_0_8_143)) ?x18867)))
 (= (- (- (- ?x4555 ?x18869) ?x18871) ?x18873) 0.0)))))))
(assert
 (>= l_0_8_1 0.0))
(assert
 (>= l_0_8_3 0.0))
(assert
 (>= l_0_8_6 0.0))
(assert
 (>= l_0_8_10 0.0))
(assert
 (>= l_0_8_15 0.0))
(assert
 (>= l_0_8_21 0.0))
(assert
 (>= l_0_8_22 0.0))
(assert
 (>= l_0_8_24 0.0))
(assert
 (>= l_0_8_27 0.0))
(assert
 (>= l_0_8_31 0.0))
(assert
 (>= l_0_8_36 0.0))
(assert
 (>= l_0_8_42 0.0))
(assert
 (>= l_0_8_43 0.0))
(assert
 (>= l_0_8_45 0.0))
(assert
 (>= l_0_8_48 0.0))
(assert
 (>= l_0_8_52 0.0))
(assert
 (>= l_0_8_57 0.0))
(assert
 (>= l_0_8_63 0.0))
(assert
 (>= l_0_8_64 0.0))
(assert
 (>= l_0_8_66 0.0))
(assert
 (>= l_0_8_69 0.0))
(assert
 (>= l_0_8_73 0.0))
(assert
 (>= l_0_8_78 0.0))
(assert
 (>= l_0_8_84 0.0))
(assert
 (>= l_0_8_85 0.0))
(assert
 (>= l_0_8_87 0.0))
(assert
 (>= l_0_8_90 0.0))
(assert
 (>= l_0_8_94 0.0))
(assert
 (>= l_0_8_99 0.0))
(assert
 (>= l_0_8_105 0.0))
(assert
 (>= l_0_8_106 0.0))
(assert
 (>= l_0_8_108 0.0))
(assert
 (>= l_0_8_111 0.0))
(assert
 (>= l_0_8_115 0.0))
(assert
 (>= l_0_8_120 0.0))
(assert
 (>= l_0_8_126 0.0))
(assert
 (>= l_0_8_127 0.0))
(assert
 (>= l_0_8_129 0.0))
(assert
 (>= l_0_8_132 0.0))
(assert
 (>= l_0_8_136 0.0))
(assert
 (>= l_0_8_141 0.0))
(assert
 (>= l_0_8_147 0.0))
(assert
 (>= l_0_8_148 0.0))
(assert
 (>= l_0_8_150 0.0))
(assert
 (>= l_0_8_153 0.0))
(assert
 (>= l_0_8_157 0.0))
(assert
 (>= l_0_8_162 0.0))
(assert
 (>= l_0_8_168 0.0))
(assert
 (>= l_0_8_169 0.0))
(assert
 (>= l_0_8_171 0.0))
(assert
 (>= l_0_8_174 0.0))
(assert
 (>= l_0_8_178 0.0))
(assert
 (>= l_0_8_183 0.0))
(assert
 (>= l_0_8_189 0.0))
(assert
 (>= l_0_8_190 0.0))
(assert
 (>= l_0_8_192 0.0))
(assert
 (>= l_0_8_195 0.0))
(assert
 (>= l_0_8_199 0.0))
(assert
 (>= l_0_8_204 0.0))
(assert
 (>= l_0_8_210 0.0))
(assert
 (>= l_0_8_211 0.0))
(assert
 (>= l_0_8_213 0.0))
(assert
 (>= l_0_8_216 0.0))
(assert
 (>= l_0_8_220 0.0))
(assert
 (>= l_0_8_225 0.0))
(assert
 (>= l_0_8_231 0.0))
(assert
 (let ((?x21483 (* l_0_9_66 l_0_9_66)))
 (let ((?x21484 (* 3.0 ?x21483)))
 (let ((?x21480 (* l_0_9_65 l_0_9_65)))
 (let ((?x21481 (* 3.0 ?x21480)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x21475 (* ?x21474 l_0_9_65)))
 (let ((?x21472 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (let ((?x21469 (* (* 3.0 l_0_9_44) l_0_9_44)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x21463 (* ?x21462 l_0_9_44)))
 (let ((?x21460 (* l_0_9_232 l_0_9_232)))
 (let ((?x21458 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x21455 (* ?x21454 l_0_9_23)))
 (let ((?x21452 (* l_0_9_211 l_0_9_211)))
 (let ((?x21450 (* l_0_9_190 l_0_9_190)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x21448 (* ?x21447 l_0_9_128)))
 (let ((?x21444 (* l_0_9_1 l_0_9_1)))
 (let ((?x21445 (* 6.0 ?x21444)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x21443 (* ?x21442 l_0_9_2)))
 (let ((?x21461 (- (- (- (- (- (+ (+ ?x21443 ?x21445) ?x21448) ?x21450) ?x21452) ?x21455) ?x21458) ?x21460)))
 (let ((?x21473 (- (- (- (- ?x21461 ?x21463) (* (* 1.0 l_0_9_43) l_0_9_43)) ?x21469) ?x21472)))
 (let ((?x21485 (+ (+ (+ (+ ?x21473 ?x21475) (* 1.0 (* l_0_9_64 l_0_9_64))) ?x21481) ?x21484)))
 (= (+ ?x21485 3.0) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x21483 (* l_0_9_66 l_0_9_66)))
 (let ((?x21484 (* 3.0 ?x21483)))
 (let ((?x21480 (* l_0_9_65 l_0_9_65)))
 (let ((?x21481 (* 3.0 ?x21480)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x21557 (* ?x21556 l_0_9_65)))
 (let ((?x21472 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (let ((?x21469 (* (* 3.0 l_0_9_44) l_0_9_44)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x21552 (* ?x21551 l_0_9_44)))
 (let ((?x21548 (* l_0_9_3 l_0_9_3)))
 (let ((?x21549 (* 6.0 ?x21548)))
 (let ((?x21546 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21540 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x21455 (* ?x21454 l_0_9_23)))
 (let ((?x21532 (* l_0_9_2 l_0_9_2)))
 (let ((?x21533 (* 6.0 ?x21532)))
 (let ((?x21527 (* l_0_9_129 l_0_9_129)))
 (let ((?x21528 (+ (+ (* (* 12.0 l_0_9_1) l_0_9_2) (* l_0_9_128 l_0_9_128)) ?x21527)))
 (let ((?x21537 (- (+ (- ?x21528 (* (* 2.0 l_0_9_190) l_0_9_191)) ?x21533) (* (* 2.0 l_0_9_211) l_0_9_212))))
 (let ((?x21547 (- (- (- (- ?x21537 ?x21455) ?x21540) (* (* 2.0 l_0_9_232) l_0_9_233)) ?x21546)))
 (let ((?x21560 (+ (+ (+ (- (- (- (+ ?x21547 ?x21549) ?x21552) ?x21469) ?x21472) ?x21557) ?x21481) ?x21484)))
 (= (+ ?x21560 9.0) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x21548 (* l_0_9_3 l_0_9_3)))
 (let ((?x21549 (* 6.0 ?x21548)))
 (let ((?x21546 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21587 (* l_0_9_234 l_0_9_234)))
 (let ((?x21585 (* l_0_9_233 l_0_9_233)))
 (let ((?x21540 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21582 (* l_0_9_213 l_0_9_213)))
 (let ((?x21580 (* l_0_9_212 l_0_9_212)))
 (let ((?x21532 (* l_0_9_2 l_0_9_2)))
 (let ((?x21533 (* 6.0 ?x21532)))
 (let ((?x21577 (* l_0_9_192 l_0_9_192)))
 (let ((?x21581 (- (+ (- (- (- _a_6_) (* l_0_9_191 l_0_9_191)) ?x21577) ?x21533) ?x21580)))
 (let ((?x21593 (- (+ (- (- (- (- (- ?x21581 ?x21582) ?x21540) ?x21585) ?x21587) ?x21546) ?x21549) (* (* 1.0 l_0_9_44) l_0_9_44))))
 (let ((?x21598 (+ (- ?x21593 (* (* 1.0 l_0_9_45) l_0_9_45)) (* 1.0 (* l_0_9_65 l_0_9_65)))))
 (= (+ (+ ?x21598 (* 1.0 (* l_0_9_66 l_0_9_66))) 7.0) 0.0))))))))))))))))
(assert
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x21706 (* ?x21705 l_0_9_72)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x21703 (* ?x21702 l_0_9_71)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x21700 (* ?x21699 l_0_9_70)))
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x21697 (* ?x21696 l_0_9_71)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x21694 (* ?x21693 l_0_9_70)))
 (let ((?x21691 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x21688 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x21685 (* ?x21684 l_0_9_51)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x21682 (* ?x21681 l_0_9_50)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x21679 (* ?x21678 l_0_9_49)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x21676 (* ?x21675 l_0_9_50)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x21673 (* ?x21672 l_0_9_49)))
 (let ((?x21670 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x21664 (* ?x21663 l_0_9_30)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x21661 (* ?x21660 l_0_9_29)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x21658 (* ?x21657 l_0_9_28)))
 (let ((?x21626 (- (- (- _a_7_) (* (* 2.0 l_0_9_193) l_0_9_196)) (* (* 2.0 l_0_9_194) l_0_9_197))))
 (let ((?x21632 (- (- ?x21626 (* (* 2.0 l_0_9_195) l_0_9_198)) (* (* 2.0 l_0_9_2) l_0_9_4))))
 (let ((?x21638 (- (- ?x21632 (* (* 2.0 l_0_9_214) l_0_9_217)) (* (* 2.0 l_0_9_215) l_0_9_218))))
 (let ((?x21644 (+ (- ?x21638 (* (* 2.0 l_0_9_216) l_0_9_219)) (* (* 2.0 l_0_9_23) l_0_9_25))))
 (let ((?x21650 (- (- ?x21644 (* (* 2.0 l_0_9_235) l_0_9_238)) (* (* 2.0 l_0_9_236) l_0_9_239))))
 (let ((?x21656 (+ (- ?x21650 (* (* 2.0 l_0_9_237) l_0_9_240)) (* (* 2.0 l_0_9_24) l_0_9_26))))
 (let ((?x21668 (- (- (- (- ?x21656 ?x21658) ?x21661) ?x21664) (* (* 2.0 l_0_9_3) l_0_9_5))))
 (let ((?x21689 (+ (- (- (- (+ (+ (+ ?x21668 ?x21670) ?x21673) ?x21676) ?x21679) ?x21682) ?x21685) ?x21688)))
 (= (+ (+ (+ (- (- (+ ?x21689 ?x21691) ?x21694) ?x21697) ?x21700) ?x21703) ?x21706) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x21697 (* ?x21696 l_0_9_71)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x21694 (* ?x21693 l_0_9_70)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x21676 (* ?x21675 l_0_9_50)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x21673 (* ?x21672 l_0_9_49)))
 (let ((?x21548 (* l_0_9_3 l_0_9_3)))
 (let ((?x21824 (* 12.0 l_0_9_3)))
 (let ((?x21825 (* ?x21824 l_0_9_8)))
 (let ((?x4667 (* l_0_9_24 l_0_9_24)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x21821 (* ?x21820 l_0_9_29)))
 (let ((?x4663 (* l_0_9_23 l_0_9_23)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x21811 (* ?x21810 l_0_9_28)))
 (let ((?x21532 (* l_0_9_2 l_0_9_2)))
 (let ((?x21800 (* 12.0 l_0_9_2)))
 (let ((?x21801 (* ?x21800 l_0_9_7)))
 (let ((?x21799 (- (- (- _a_8_) (* (* 2.0 l_0_9_191) l_0_9_196)) (* (* 2.0 l_0_9_192) l_0_9_197))))
 (let ((?x21809 (- (- (- (+ ?x21799 ?x21801) ?x21532) (* (* 2.0 l_0_9_212) l_0_9_217)) (* (* 2.0 l_0_9_213) l_0_9_218))))
 (let ((?x21819 (- (- (+ (- ?x21809 ?x21811) ?x4663) (* (* 2.0 l_0_9_233) l_0_9_238)) (* (* 2.0 l_0_9_234) l_0_9_239))))
 (let ((?x21830 (+ (- (- (- (+ (+ (- ?x21819 ?x21821) ?x4667) ?x21825) ?x21548) ?x21673) ?x21676) ?x21694)))
 (= (+ ?x21830 ?x21697) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x21920 (* ?x21696 l_0_9_68)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x21918 (* ?x21693 l_0_9_67)))
 (let ((?x21915 (* l_0_9_6 l_0_9_6)))
 (let ((?x21916 (* 6.0 ?x21915)))
 (let ((?x21912 (* l_0_9_5 l_0_9_5)))
 (let ((?x21913 (* 6.0 ?x21912)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x21901 (* ?x21675 l_0_9_47)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x21899 (* ?x21672 l_0_9_46)))
 (let ((?x21896 (* l_0_9_4 l_0_9_4)))
 (let ((?x21897 (* 6.0 ?x21896)))
 (let ((?x21894 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x21891 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x21888 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x21885 (* l_0_9_237 l_0_9_237)))
 (let ((?x21883 (* l_0_9_236 l_0_9_236)))
 (let ((?x21881 (* l_0_9_235 l_0_9_235)))
 (let ((?x21879 (* l_0_9_216 l_0_9_216)))
 (let ((?x21877 (* l_0_9_215 l_0_9_215)))
 (let ((?x21875 (* l_0_9_214 l_0_9_214)))
 (let ((?x21873 (* l_0_9_195 l_0_9_195)))
 (let ((?x21871 (* l_0_9_194 l_0_9_194)))
 (let ((?x21876 (- (- (- (- (- _a_9_) (* l_0_9_193 l_0_9_193)) ?x21871) ?x21873) ?x21875)))
 (let ((?x21892 (- (- (- (- (- (- (- ?x21876 ?x21877) ?x21879) ?x21881) ?x21883) ?x21885) ?x21888) ?x21891)))
 (let ((?x21905 (- (+ (+ (+ (- ?x21892 ?x21894) ?x21897) ?x21899) ?x21901) (* (* 1.0 l_0_9_46) l_0_9_46))))
 (let ((?x21911 (- (- ?x21905 (* (* 1.0 l_0_9_47) l_0_9_47)) (* (* 1.0 l_0_9_48) l_0_9_48))))
 (let ((?x21924 (+ (- (- (+ (+ ?x21911 ?x21913) ?x21916) ?x21918) ?x21920) (* 1.0 (* l_0_9_67 l_0_9_67)))))
 (let ((?x21930 (+ (+ ?x21924 (* 1.0 (* l_0_9_68 l_0_9_68))) (* 1.0 (* l_0_9_69 l_0_9_69)))))
 (= ?x21930 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x22061 (* l_0_9_9 l_0_9_9)))
 (let ((?x22062 (* 6.0 ?x22061)))
 (let ((?x22058 (* l_0_9_8 l_0_9_8)))
 (let ((?x22059 (* 6.0 ?x22058)))
 (let ((?x22043 (* l_0_9_7 l_0_9_7)))
 (let ((?x22044 (* 6.0 ?x22043)))
 (let ((?x22029 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x22026 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x22021 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x22018 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x22015 (* l_0_9_241 l_0_9_241)))
 (let ((?x22013 (* l_0_9_240 l_0_9_240)))
 (let ((?x22009 (* l_0_9_239 l_0_9_239)))
 (let ((?x22007 (* l_0_9_238 l_0_9_238)))
 (let ((?x22003 (* l_0_9_220 l_0_9_220)))
 (let ((?x22001 (* l_0_9_219 l_0_9_219)))
 (let ((?x21999 (* l_0_9_218 l_0_9_218)))
 (let ((?x21997 (* l_0_9_217 l_0_9_217)))
 (let ((?x21993 (* l_0_9_199 l_0_9_199)))
 (let ((?x21991 (* l_0_9_198 l_0_9_198)))
 (let ((?x21989 (* l_0_9_197 l_0_9_197)))
 (let ((?x21987 (* l_0_9_196 l_0_9_196)))
 (let ((?x21990 (- (- (+ (- _a_10_) (* 6.0 (* l_0_9_10 l_0_9_10))) ?x21987) ?x21989)))
 (let ((?x21998 (- (- (- (- ?x21990 ?x21991) ?x21993) (* (* 2.0 l_0_9_2) l_0_9_7)) ?x21997)))
 (let ((?x22006 (+ (- (- (- ?x21998 ?x21999) ?x22001) ?x22003) (* (* 2.0 l_0_9_23) l_0_9_28))))
 (let ((?x22014 (- (+ (- (- ?x22006 ?x22007) ?x22009) (* (* 2.0 l_0_9_24) l_0_9_29)) ?x22013)))
 (let ((?x22024 (- (- (- (- ?x22014 ?x22015) ?x22018) ?x22021) (* (* 2.0 l_0_9_3) l_0_9_8))))
 (let ((?x22036 (- (- (- (- ?x22024 ?x22026) ?x22029) (* (* 1.0 l_0_9_49) l_0_9_49)) (* (* 1.0 l_0_9_50) l_0_9_50))))
 (let ((?x22042 (- (- ?x22036 (* (* 1.0 l_0_9_51) l_0_9_51)) (* (* 1.0 l_0_9_52) l_0_9_52))))
 (let ((?x22051 (+ (+ (+ ?x22042 ?x22044) (* 1.0 (* l_0_9_70 l_0_9_70))) (* 1.0 (* l_0_9_71 l_0_9_71)))))
 (let ((?x22057 (+ (+ ?x22051 (* 1.0 (* l_0_9_72 l_0_9_72))) (* 1.0 (* l_0_9_73 l_0_9_73)))))
 (= (+ (+ ?x22057 ?x22059) ?x22062) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x21483 (* l_0_9_66 l_0_9_66)))
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x21920 (* ?x21696 l_0_9_68)))
 (let ((?x21480 (* l_0_9_65 l_0_9_65)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x21918 (* ?x21693 l_0_9_67)))
 (let ((?x4648 (* l_0_9_45 l_0_9_45)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x21901 (* ?x21675 l_0_9_47)))
 (let ((?x4017 (* l_0_9_44 l_0_9_44)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x21899 (* ?x21672 l_0_9_46)))
 (let ((?x21824 (* 12.0 l_0_9_3)))
 (let ((?x22139 (* ?x21824 l_0_9_5)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x22137 (* ?x21820 l_0_9_26)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x22131 (* ?x21810 l_0_9_25)))
 (let ((?x21800 (* 12.0 l_0_9_2)))
 (let ((?x22125 (* ?x21800 l_0_9_4)))
 (let ((?x22124 (- (- (- _a_11_) (* (* 2.0 l_0_9_191) l_0_9_193)) (* (* 2.0 l_0_9_192) l_0_9_194))))
 (let ((?x22130 (- (- (+ ?x22124 ?x22125) (* (* 2.0 l_0_9_212) l_0_9_214)) (* (* 2.0 l_0_9_213) l_0_9_215))))
 (let ((?x22136 (- (- (- ?x22130 ?x22131) (* (* 2.0 l_0_9_233) l_0_9_235)) (* (* 2.0 l_0_9_234) l_0_9_236))))
 (let ((?x22145 (+ (+ (- (+ (- (+ (- ?x22136 ?x22137) ?x22139) ?x21899) ?x4017) ?x21901) ?x4648) ?x21918)))
 (= (- (+ (- ?x22145 ?x21480) ?x21920) ?x21483) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x22189 (* ?x22188 l_0_9_71)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x22186 (* ?x22185 l_0_9_70)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x22183 (* ?x21474 l_0_9_70)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x22181 (* ?x22180 l_0_9_50)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x22178 (* ?x22177 l_0_9_49)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x22175 (* ?x21462 l_0_9_49)))
 (let ((?x4635 (* l_0_9_22 l_0_9_22)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x22172 (* ?x21454 l_0_9_28)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x22170 (* ?x21447 l_0_9_133)))
 (let ((?x22171 (+ (- (* (* 12.0 l_0_9_1) l_0_9_7) (* l_0_9_1 l_0_9_1)) ?x22170)))
 (let ((?x22187 (+ (+ (- (- (- (+ (- ?x22171 ?x22172) ?x4635) ?x22175) ?x22178) ?x22181) ?x22183) ?x22186)))
 (= (+ ?x22187 ?x22189) 0.0)))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x22189 (* ?x22188 l_0_9_71)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x22186 (* ?x22185 l_0_9_70)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x22235 (* ?x21556 l_0_9_70)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x22181 (* ?x22180 l_0_9_50)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x22178 (* ?x22177 l_0_9_49)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x22231 (* ?x21551 l_0_9_49)))
 (let ((?x21824 (* 12.0 l_0_9_3)))
 (let ((?x21825 (* ?x21824 l_0_9_8)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x21821 (* ?x21820 l_0_9_29)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x21811 (* ?x21810 l_0_9_28)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x22172 (* ?x21454 l_0_9_28)))
 (let ((?x21800 (* 12.0 l_0_9_2)))
 (let ((?x21801 (* ?x21800 l_0_9_7)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x22215 (* ?x22214 l_0_9_134)))
 (let ((?x22211 (* 2.0 l_0_9_128)))
 (let ((?x22212 (* ?x22211 l_0_9_133)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x22168 (* ?x21442 l_0_9_7)))
 (let ((?x22218 (- (+ (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_2) ?x22168) ?x22212) ?x22215) (* (* 2.0 l_0_9_190) l_0_9_196))))
 (let ((?x22224 (+ (- (+ ?x22218 ?x21801) (* (* 2.0 l_0_9_211) l_0_9_217)) (* (* 2.0 l_0_9_22) l_0_9_23))))
 (let ((?x22229 (- (- (- (- ?x22224 ?x22172) ?x21811) (* (* 2.0 l_0_9_232) l_0_9_238)) ?x21821)))
 (let ((?x22238 (+ (+ (+ (- (- (- (+ ?x22229 ?x21825) ?x22231) ?x22178) ?x22181) ?x22235) ?x22186) ?x22189)))
 (= ?x22238 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x22298 (* ?x22297 l_0_9_72)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x22295 (* ?x22294 l_0_9_71)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x22292 (* ?x22291 l_0_9_70)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x22235 (* ?x21556 l_0_9_70)))
 (let ((?x21691 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x21688 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x22286 (* ?x22285 l_0_9_51)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x22283 (* ?x22282 l_0_9_50)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x22231 (* ?x21551 l_0_9_49)))
 (let ((?x21670 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x21664 (* ?x21663 l_0_9_30)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x21661 (* ?x21660 l_0_9_29)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x21658 (* ?x21657 l_0_9_28)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x22270 (* ?x22269 l_0_9_135)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x22267 (* ?x22266 l_0_9_134)))
 (let ((?x22265 (+ (* (* (- 2.0) l_0_9_1) l_0_9_4) (* (* 2.0 l_0_9_130) l_0_9_133))))
 (let ((?x22274 (- (+ (+ (+ ?x22265 ?x22267) ?x22270) (* (* 2.0 l_0_9_22) l_0_9_25)) ?x21658)))
 (let ((?x22281 (- (+ (+ (- (- ?x22274 ?x21661) ?x21664) ?x21670) ?x22231) (* (* 6.0 l_0_9_46) l_0_9_49))))
 (let ((?x22296 (+ (+ (- (+ (+ (- (- ?x22281 ?x22283) ?x22286) ?x21688) ?x21691) ?x22235) ?x22292) ?x22295)))
 (= (+ ?x22296 ?x22298) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x22061 (* l_0_9_9 l_0_9_9)))
 (let ((?x22062 (* 6.0 ?x22061)))
 (let ((?x22058 (* l_0_9_8 l_0_9_8)))
 (let ((?x22059 (* 6.0 ?x22058)))
 (let ((?x22055 (* l_0_9_73 l_0_9_73)))
 (let ((?x22363 (* 3.0 ?x22055)))
 (let ((?x22052 (* l_0_9_72 l_0_9_72)))
 (let ((?x22361 (* 3.0 ?x22052)))
 (let ((?x22049 (* l_0_9_71 l_0_9_71)))
 (let ((?x22359 (* 3.0 ?x22049)))
 (let ((?x22046 (* l_0_9_70 l_0_9_70)))
 (let ((?x22357 (* 3.0 ?x22046)))
 (let ((?x22043 (* l_0_9_7 l_0_9_7)))
 (let ((?x22044 (* 6.0 ?x22043)))
 (let ((?x22354 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x22351 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x22348 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x22029 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x22026 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x22021 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x22018 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x22336 (* l_0_9_136 l_0_9_136)))
 (let ((?x22334 (* l_0_9_135 l_0_9_135)))
 (let ((?x22332 (* l_0_9_134 l_0_9_134)))
 (let ((?x22320 (* l_0_9_133 l_0_9_133)))
 (let ((?x21984 (* l_0_9_10 l_0_9_10)))
 (let ((?x21985 (* 6.0 ?x21984)))
 (let ((?x22335 (+ (+ (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) ?x21985) ?x22320) ?x22332) ?x22334)))
 (let ((?x22341 (- (- (+ (+ ?x22335 ?x22336) (* (* 2.0 l_0_9_22) l_0_9_28)) ?x22018) ?x22021)))
 (let ((?x22349 (- (- (- (- ?x22341 ?x22026) ?x22029) (* (* 3.0 l_0_9_49) l_0_9_49)) ?x22348)))
 (let ((?x22364 (+ (+ (+ (+ (+ (- (- ?x22349 ?x22351) ?x22354) ?x22044) ?x22357) ?x22359) ?x22361) ?x22363)))
 (= (+ (+ ?x22364 ?x22059) ?x22062) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x22448 (* ?x22447 l_0_9_91)))
 (let ((?x22444 (* 6.0 l_0_9_73)))
 (let ((?x22445 (* ?x22444 l_0_9_77)))
 (let ((?x22441 (* 6.0 l_0_9_72)))
 (let ((?x22442 (* ?x22441 l_0_9_76)))
 (let ((?x22438 (* 6.0 l_0_9_71)))
 (let ((?x22439 (* ?x22438 l_0_9_75)))
 (let ((?x22435 (* 6.0 l_0_9_70)))
 (let ((?x22436 (* ?x22435 l_0_9_74)))
 (let ((?x22432 (* 6.0 l_0_9_52)))
 (let ((?x22433 (* ?x22432 l_0_9_56)))
 (let ((?x22429 (* 6.0 l_0_9_51)))
 (let ((?x22430 (* ?x22429 l_0_9_55)))
 (let ((?x22426 (* 6.0 l_0_9_50)))
 (let ((?x22427 (* ?x22426 l_0_9_54)))
 (let ((?x22420 (* 12.0 l_0_9_31)))
 (let ((?x22421 (* ?x22420 l_0_9_35)))
 (let ((?x22417 (* 12.0 l_0_9_30)))
 (let ((?x22418 (* ?x22417 l_0_9_34)))
 (let ((?x22414 (* 12.0 l_0_9_29)))
 (let ((?x22415 (* ?x22414 l_0_9_33)))
 (let ((?x22411 (* 12.0 l_0_9_28)))
 (let ((?x22412 (* ?x22411 l_0_9_32)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x22407 (* ?x22406 l_0_9_175)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x22404 (* ?x22403 l_0_9_154)))
 (let ((?x22400 (* 2.0 l_0_9_136)))
 (let ((?x22401 (* ?x22400 l_0_9_140)))
 (let ((?x22397 (* 2.0 l_0_9_135)))
 (let ((?x22398 (* ?x22397 l_0_9_139)))
 (let ((?x22394 (* 2.0 l_0_9_134)))
 (let ((?x22395 (* ?x22394 l_0_9_138)))
 (let ((?x22391 (* 2.0 l_0_9_133)))
 (let ((?x22392 (* ?x22391 l_0_9_137)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x22389 (* ?x22388 l_0_9_9)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x22386 (* ?x22385 l_0_9_8)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x22383 (* ?x22382 l_0_9_7)))
 (let ((?x22376 (* 12.0 l_0_9_10)))
 (let ((?x22377 (* ?x22376 l_0_9_14)))
 (let ((?x22381 (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_11) ?x22377) (* (* 2.0 l_0_9_106) l_0_9_112))))
 (let ((?x22402 (+ (+ (+ (+ (+ (+ (+ ?x22381 ?x22383) ?x22386) ?x22389) ?x22392) ?x22395) ?x22398) ?x22401)))
 (let ((?x22413 (- (+ (- (+ ?x22402 ?x22404) ?x22407) (* (* 2.0 l_0_9_22) l_0_9_32)) ?x22412)))
 (let ((?x22425 (- (- (- (- ?x22413 ?x22415) ?x22418) ?x22421) (* (* 6.0 l_0_9_49) l_0_9_53))))
 (let ((?x22446 (+ (+ (+ (+ (- (- (- ?x22425 ?x22427) ?x22430) ?x22433) ?x22436) ?x22439) ?x22442) ?x22445)))
 (= (- ?x22446 ?x22448) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22444 (* 6.0 l_0_9_73)))
 (let ((?x22569 (* ?x22444 l_0_9_82)))
 (let ((?x22441 (* 6.0 l_0_9_72)))
 (let ((?x22567 (* ?x22441 l_0_9_81)))
 (let ((?x22438 (* 6.0 l_0_9_71)))
 (let ((?x22565 (* ?x22438 l_0_9_80)))
 (let ((?x22435 (* 6.0 l_0_9_70)))
 (let ((?x22563 (* ?x22435 l_0_9_79)))
 (let ((?x22432 (* 6.0 l_0_9_52)))
 (let ((?x22561 (* ?x22432 l_0_9_61)))
 (let ((?x22429 (* 6.0 l_0_9_51)))
 (let ((?x22559 (* ?x22429 l_0_9_60)))
 (let ((?x22426 (* 6.0 l_0_9_50)))
 (let ((?x22557 (* ?x22426 l_0_9_59)))
 (let ((?x22420 (* 12.0 l_0_9_31)))
 (let ((?x22553 (* ?x22420 l_0_9_40)))
 (let ((?x22417 (* 12.0 l_0_9_30)))
 (let ((?x22551 (* ?x22417 l_0_9_39)))
 (let ((?x22414 (* 12.0 l_0_9_29)))
 (let ((?x22549 (* ?x22414 l_0_9_38)))
 (let ((?x22411 (* 12.0 l_0_9_28)))
 (let ((?x22547 (* ?x22411 l_0_9_37)))
 (let ((?x22542 (* 12.0 l_0_9_18)))
 (let ((?x22543 (* ?x22542 l_0_9_9)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x22540 (* ?x22539 l_0_9_8)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x22537 (* ?x22536 l_0_9_7)))
 (let ((?x22400 (* 2.0 l_0_9_136)))
 (let ((?x22534 (* ?x22400 l_0_9_145)))
 (let ((?x22397 (* 2.0 l_0_9_135)))
 (let ((?x22532 (* ?x22397 l_0_9_144)))
 (let ((?x22394 (* 2.0 l_0_9_134)))
 (let ((?x22530 (* ?x22394 l_0_9_143)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x22170 (* ?x21447 l_0_9_133)))
 (let ((?x22376 (* 12.0 l_0_9_10)))
 (let ((?x22525 (* ?x22376 l_0_9_19)))
 (let ((?x22529 (+ (- (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x22525) ?x22170) (* (* 2.0 l_0_9_133) l_0_9_142))))
 (let ((?x22546 (+ (+ (+ (+ (+ (+ (+ ?x22529 ?x22530) ?x22532) ?x22534) ?x22537) ?x22540) ?x22543) (* (* 2.0 l_0_9_22) l_0_9_37))))
 (let ((?x22556 (- (- (- (- (- ?x22546 ?x22547) ?x22549) ?x22551) ?x22553) (* (* 6.0 l_0_9_49) l_0_9_58))))
 (let ((?x22570 (+ (+ (+ (+ (- (- (- ?x22556 ?x22557) ?x22559) ?x22561) ?x22563) ?x22565) ?x22567) ?x22569)))
 (= ?x22570 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x22710 (* ?x22709 l_0_9_92)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x22707 (* ?x22706 l_0_9_91)))
 (let ((?x22703 (* 2.0 l_0_9_73)))
 (let ((?x22704 (* ?x22703 l_0_9_77)))
 (let ((?x22700 (* 2.0 l_0_9_72)))
 (let ((?x22701 (* ?x22700 l_0_9_76)))
 (let ((?x22697 (* 2.0 l_0_9_71)))
 (let ((?x22698 (* ?x22697 l_0_9_75)))
 (let ((?x22694 (* 2.0 l_0_9_70)))
 (let ((?x22695 (* ?x22694 l_0_9_74)))
 (let ((?x22691 (* 2.0 l_0_9_52)))
 (let ((?x22692 (* ?x22691 l_0_9_56)))
 (let ((?x22688 (* 2.0 l_0_9_51)))
 (let ((?x22689 (* ?x22688 l_0_9_55)))
 (let ((?x22685 (* 2.0 l_0_9_50)))
 (let ((?x22686 (* ?x22685 l_0_9_54)))
 (let ((?x22682 (* 2.0 l_0_9_49)))
 (let ((?x22683 (* ?x22682 l_0_9_53)))
 (let ((?x22420 (* 12.0 l_0_9_31)))
 (let ((?x22421 (* ?x22420 l_0_9_35)))
 (let ((?x22417 (* 12.0 l_0_9_30)))
 (let ((?x22418 (* ?x22417 l_0_9_34)))
 (let ((?x22414 (* 12.0 l_0_9_29)))
 (let ((?x22415 (* ?x22414 l_0_9_33)))
 (let ((?x22411 (* 12.0 l_0_9_28)))
 (let ((?x22412 (* ?x22411 l_0_9_32)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x22636 (* ?x22635 l_0_9_176)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x22633 (* ?x22632 l_0_9_175)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x22630 (* ?x22629 l_0_9_155)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x22627 (* ?x22626 l_0_9_154)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x22389 (* ?x22388 l_0_9_9)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x22386 (* ?x22385 l_0_9_8)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x22383 (* ?x22382 l_0_9_7)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x22615 (* ?x22614 l_0_9_113)))
 (let ((?x22376 (* 12.0 l_0_9_10)))
 (let ((?x22377 (* ?x22376 l_0_9_14)))
 (let ((?x22619 (- (+ (+ ?x22377 (* (* 2.0 l_0_9_107) l_0_9_112)) ?x22615) (* (* 2.0 l_0_9_11) l_0_9_2))))
 (let ((?x22625 (+ (+ (- (+ ?x22619 ?x22383) (* (* 2.0 l_0_9_12) l_0_9_3)) ?x22386) ?x22389)))
 (let ((?x22640 (- (- (- (+ (+ ?x22625 ?x22627) ?x22630) ?x22633) ?x22636) (* (* 2.0 l_0_9_196) l_0_9_200))))
 (let ((?x22646 (- (- ?x22640 (* (* 2.0 l_0_9_197) l_0_9_201)) (* (* 2.0 l_0_9_198) l_0_9_202))))
 (let ((?x22652 (- (- ?x22646 (* (* 2.0 l_0_9_199) l_0_9_203)) (* (* 2.0 l_0_9_217) l_0_9_221))))
 (let ((?x22658 (- (- ?x22652 (* (* 2.0 l_0_9_218) l_0_9_222)) (* (* 2.0 l_0_9_219) l_0_9_223))))
 (let ((?x22663 (+ (- ?x22658 (* (* 2.0 l_0_9_220) l_0_9_224)) (* (* 2.0 l_0_9_23) l_0_9_32))))
 (let ((?x22669 (- (- ?x22663 (* (* 2.0 l_0_9_238) l_0_9_242)) (* (* 2.0 l_0_9_239) l_0_9_243))))
 (let ((?x22674 (- (+ ?x22669 (* (* 2.0 l_0_9_24) l_0_9_33)) (* (* 2.0 l_0_9_240) l_0_9_244))))
 (let ((?x22680 (- (- (- (- ?x22674 (* (* 2.0 l_0_9_241) l_0_9_245)) ?x22412) ?x22415) ?x22418)))
 (let ((?x22699 (+ (+ (- (- (- (- (- ?x22680 ?x22421) ?x22683) ?x22686) ?x22689) ?x22692) ?x22695) ?x22698)))
 (= (- (- (+ (+ ?x22699 ?x22701) ?x22704) ?x22707) ?x22710) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22703 (* 2.0 l_0_9_73)))
 (let ((?x22869 (* ?x22703 l_0_9_82)))
 (let ((?x22700 (* 2.0 l_0_9_72)))
 (let ((?x22867 (* ?x22700 l_0_9_81)))
 (let ((?x22697 (* 2.0 l_0_9_71)))
 (let ((?x22865 (* ?x22697 l_0_9_80)))
 (let ((?x22694 (* 2.0 l_0_9_70)))
 (let ((?x22863 (* ?x22694 l_0_9_79)))
 (let ((?x22691 (* 2.0 l_0_9_52)))
 (let ((?x22861 (* ?x22691 l_0_9_61)))
 (let ((?x22688 (* 2.0 l_0_9_51)))
 (let ((?x22859 (* ?x22688 l_0_9_60)))
 (let ((?x22685 (* 2.0 l_0_9_50)))
 (let ((?x22857 (* ?x22685 l_0_9_59)))
 (let ((?x22682 (* 2.0 l_0_9_49)))
 (let ((?x22855 (* ?x22682 l_0_9_58)))
 (let ((?x22420 (* 12.0 l_0_9_31)))
 (let ((?x22553 (* ?x22420 l_0_9_40)))
 (let ((?x22417 (* 12.0 l_0_9_30)))
 (let ((?x22551 (* ?x22417 l_0_9_39)))
 (let ((?x22414 (* 12.0 l_0_9_29)))
 (let ((?x22549 (* ?x22414 l_0_9_38)))
 (let ((?x22411 (* 12.0 l_0_9_28)))
 (let ((?x22547 (* ?x22411 l_0_9_37)))
 (let ((?x22542 (* 12.0 l_0_9_18)))
 (let ((?x22543 (* ?x22542 l_0_9_9)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x22540 (* ?x22539 l_0_9_8)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x22537 (* ?x22536 l_0_9_7)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x22215 (* ?x22214 l_0_9_134)))
 (let ((?x22211 (* 2.0 l_0_9_128)))
 (let ((?x22212 (* ?x22211 l_0_9_133)))
 (let ((?x22376 (* 12.0 l_0_9_10)))
 (let ((?x22525 (* ?x22376 l_0_9_19)))
 (let ((?x22817 (+ (- (- (- ?x22525 ?x22212) ?x22215) (* (* 2.0 l_0_9_16) l_0_9_2)) ?x22537)))
 (let ((?x22824 (- (+ (+ (- ?x22817 (* (* 2.0 l_0_9_17) l_0_9_3)) ?x22540) ?x22543) (* (* 2.0 l_0_9_196) l_0_9_205))))
 (let ((?x22828 (- (- ?x22824 (* (* 2.0 l_0_9_197) l_0_9_206)) (* (* 2.0 l_0_9_198) l_0_9_207))))
 (let ((?x22832 (- (- ?x22828 (* (* 2.0 l_0_9_199) l_0_9_208)) (* (* 2.0 l_0_9_217) l_0_9_226))))
 (let ((?x22836 (- (- ?x22832 (* (* 2.0 l_0_9_218) l_0_9_227)) (* (* 2.0 l_0_9_219) l_0_9_228))))
 (let ((?x22840 (+ (- ?x22836 (* (* 2.0 l_0_9_220) l_0_9_229)) (* (* 2.0 l_0_9_23) l_0_9_37))))
 (let ((?x22844 (- (- ?x22840 (* (* 2.0 l_0_9_238) l_0_9_247)) (* (* 2.0 l_0_9_239) l_0_9_248))))
 (let ((?x22848 (- (+ ?x22844 (* (* 2.0 l_0_9_24) l_0_9_38)) (* (* 2.0 l_0_9_240) l_0_9_249))))
 (let ((?x22853 (- (- (- (- ?x22848 (* (* 2.0 l_0_9_241) l_0_9_250)) ?x22547) ?x22549) ?x22551)))
 (let ((?x22866 (+ (+ (- (- (- (- (- ?x22853 ?x22553) ?x22855) ?x22857) ?x22859) ?x22861) ?x22863) ?x22865)))
 (= (+ (+ ?x22866 ?x22867) ?x22869) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x21706 (* ?x21705 l_0_9_72)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x21703 (* ?x21702 l_0_9_71)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x21700 (* ?x21699 l_0_9_70)))
 (let ((?x21915 (* l_0_9_6 l_0_9_6)))
 (let ((?x21912 (* l_0_9_5 l_0_9_5)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x21685 (* ?x21684 l_0_9_51)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x21682 (* ?x21681 l_0_9_50)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x21679 (* ?x21678 l_0_9_49)))
 (let ((?x21896 (* l_0_9_4 l_0_9_4)))
 (let ((?x5120 (* l_0_9_27 l_0_9_27)))
 (let ((?x6644 (- (+ (+ (* l_0_9_25 l_0_9_25) (* l_0_9_26 l_0_9_26)) ?x5120) ?x21896)))
 (let ((?x22915 (- (- (- (- (+ (+ (+ ?x6644 ?x21679) ?x21682) ?x21685) ?x21912) ?x21915) ?x21700) ?x21703)))
 (= (- ?x22915 ?x21706) 0.0))))))))))))))))))))
(assert
 (let ((?x22055 (* l_0_9_73 l_0_9_73)))
 (let ((?x22052 (* l_0_9_72 l_0_9_72)))
 (let ((?x22049 (* l_0_9_71 l_0_9_71)))
 (let ((?x22046 (* l_0_9_70 l_0_9_70)))
 (let ((?x5245 (* l_0_9_52 l_0_9_52)))
 (let ((?x5242 (* l_0_9_51 l_0_9_51)))
 (let ((?x5224 (* l_0_9_50 l_0_9_50)))
 (let ((?x5222 (* l_0_9_49 l_0_9_49)))
 (let ((?x6667 (+ (* (* 2.0 l_0_9_25) l_0_9_28) (* (* 2.0 l_0_9_26) l_0_9_29))))
 (let ((?x22930 (- (+ ?x6667 (* (* 2.0 l_0_9_27) l_0_9_30)) (* (* 2.0 l_0_9_4) l_0_9_7))))
 (let ((?x22936 (+ (+ (- (+ ?x22930 ?x5222) (* (* 2.0 l_0_9_5) l_0_9_8)) ?x5224) ?x5242)))
 (let ((?x22942 (- (- (- (+ ?x22936 ?x5245) (* (* 2.0 l_0_9_6) l_0_9_9)) ?x22046) ?x22049)))
 (= (- (- ?x22942 ?x22052) ?x22055) 0.0))))))))))))))
(assert
 (let ((?x23023 (* 2.0 l_0_9_90)))
 (let ((?x23024 (* ?x23023 l_0_9_93)))
 (let ((?x23020 (* 2.0 l_0_9_89)))
 (let ((?x23021 (* ?x23020 l_0_9_92)))
 (let ((?x23017 (* 2.0 l_0_9_88)))
 (let ((?x23018 (* ?x23017 l_0_9_91)))
 (let ((?x22703 (* 2.0 l_0_9_73)))
 (let ((?x22704 (* ?x22703 l_0_9_77)))
 (let ((?x22700 (* 2.0 l_0_9_72)))
 (let ((?x22701 (* ?x22700 l_0_9_76)))
 (let ((?x22697 (* 2.0 l_0_9_71)))
 (let ((?x22698 (* ?x22697 l_0_9_75)))
 (let ((?x22694 (* 2.0 l_0_9_70)))
 (let ((?x22695 (* ?x22694 l_0_9_74)))
 (let ((?x22691 (* 2.0 l_0_9_52)))
 (let ((?x22692 (* ?x22691 l_0_9_56)))
 (let ((?x22688 (* 2.0 l_0_9_51)))
 (let ((?x22689 (* ?x22688 l_0_9_55)))
 (let ((?x22685 (* 2.0 l_0_9_50)))
 (let ((?x22686 (* ?x22685 l_0_9_54)))
 (let ((?x22682 (* 2.0 l_0_9_49)))
 (let ((?x22683 (* ?x22682 l_0_9_53)))
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x23001 (* ?x23000 l_0_9_177)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x22998 (* ?x22997 l_0_9_176)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x22995 (* ?x22994 l_0_9_175)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x22992 (* ?x22991 l_0_9_156)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x22989 (* ?x22988 l_0_9_155)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x22986 (* ?x22985 l_0_9_154)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x22978 (* ?x22977 l_0_9_114)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x22975 (* ?x22974 l_0_9_113)))
 (let ((?x22973 (- (* (* 2.0 l_0_9_109) l_0_9_112) (* (* 2.0 l_0_9_11) l_0_9_4))))
 (let ((?x22984 (- (- (+ (+ ?x22973 ?x22975) ?x22978) (* (* 2.0 l_0_9_12) l_0_9_5)) (* (* 2.0 l_0_9_13) l_0_9_6))))
 (let ((?x23004 (+ (- (- (- (+ (+ (+ ?x22984 ?x22986) ?x22989) ?x22992) ?x22995) ?x22998) ?x23001) (* (* 2.0 l_0_9_25) l_0_9_32))))
 (let ((?x23008 (+ (+ ?x23004 (* (* 2.0 l_0_9_26) l_0_9_33)) (* (* 2.0 l_0_9_27) l_0_9_34))))
 (let ((?x23015 (- (- (- (+ (+ (+ (+ ?x23008 ?x22683) ?x22686) ?x22689) ?x22692) ?x22695) ?x22698) ?x22701)))
 (= (- (- (- (- ?x23015 ?x22704) ?x23018) ?x23021) ?x23024) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22703 (* 2.0 l_0_9_73)))
 (let ((?x22869 (* ?x22703 l_0_9_82)))
 (let ((?x22700 (* 2.0 l_0_9_72)))
 (let ((?x22867 (* ?x22700 l_0_9_81)))
 (let ((?x22697 (* 2.0 l_0_9_71)))
 (let ((?x22865 (* ?x22697 l_0_9_80)))
 (let ((?x22694 (* 2.0 l_0_9_70)))
 (let ((?x22863 (* ?x22694 l_0_9_79)))
 (let ((?x22691 (* 2.0 l_0_9_52)))
 (let ((?x22861 (* ?x22691 l_0_9_61)))
 (let ((?x22688 (* 2.0 l_0_9_51)))
 (let ((?x22859 (* ?x22688 l_0_9_60)))
 (let ((?x22685 (* 2.0 l_0_9_50)))
 (let ((?x22857 (* ?x22685 l_0_9_59)))
 (let ((?x22682 (* 2.0 l_0_9_49)))
 (let ((?x22855 (* ?x22682 l_0_9_58)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x22270 (* ?x22269 l_0_9_135)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x22267 (* ?x22266 l_0_9_134)))
 (let ((?x23073 (- (- (- (* (* (- 2.0) l_0_9_130) l_0_9_133) ?x22267) ?x22270) (* (* 2.0 l_0_9_16) l_0_9_4))))
 (let ((?x23078 (- (- ?x23073 (* (* 2.0 l_0_9_17) l_0_9_5)) (* (* 2.0 l_0_9_18) l_0_9_6))))
 (let ((?x23082 (+ (+ ?x23078 (* (* 2.0 l_0_9_25) l_0_9_37)) (* (* 2.0 l_0_9_26) l_0_9_38))))
 (let ((?x23087 (+ (+ (+ (+ ?x23082 (* (* 2.0 l_0_9_27) l_0_9_39)) ?x22855) ?x22857) ?x22859)))
 (= (- (- (- (- (+ ?x23087 ?x22861) ?x22863) ?x22865) ?x22867) ?x22869) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22061 (* l_0_9_9 l_0_9_9)))
 (let ((?x22058 (* l_0_9_8 l_0_9_8)))
 (let ((?x22043 (* l_0_9_7 l_0_9_7)))
 (let ((?x22104 (* l_0_9_31 l_0_9_31)))
 (let ((?x5216 (* l_0_9_30 l_0_9_30)))
 (let ((?x22093 (* l_0_9_29 l_0_9_29)))
 (let ((?x7089 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_28 l_0_9_28)) ?x22093) ?x5216)))
 (= (- (- (- (+ ?x7089 ?x22104) ?x22043) ?x22058) ?x22061) 0.0)))))))))
(assert
 (let ((?x23170 (* l_0_9_94 l_0_9_94)))
 (let ((?x23168 (* l_0_9_93 l_0_9_93)))
 (let ((?x23166 (* l_0_9_92 l_0_9_92)))
 (let ((?x23164 (* l_0_9_91 l_0_9_91)))
 (let ((?x23150 (* l_0_9_178 l_0_9_178)))
 (let ((?x23148 (* l_0_9_177 l_0_9_177)))
 (let ((?x23146 (* l_0_9_176 l_0_9_176)))
 (let ((?x23144 (* l_0_9_175 l_0_9_175)))
 (let ((?x23142 (* l_0_9_157 l_0_9_157)))
 (let ((?x23140 (* l_0_9_156 l_0_9_156)))
 (let ((?x23138 (* l_0_9_155 l_0_9_155)))
 (let ((?x23136 (* l_0_9_154 l_0_9_154)))
 (let ((?x23130 (* l_0_9_115 l_0_9_115)))
 (let ((?x23128 (* l_0_9_114 l_0_9_114)))
 (let ((?x23126 (* l_0_9_113 l_0_9_113)))
 (let ((?x23124 (* l_0_9_112 l_0_9_112)))
 (let ((?x23123 (- (* (* (- 2.0) l_0_9_10) l_0_9_14) (* (* 2.0 l_0_9_11) l_0_9_7))))
 (let ((?x23133 (- (+ (+ (+ (+ ?x23123 ?x23124) ?x23126) ?x23128) ?x23130) (* (* 2.0 l_0_9_12) l_0_9_8))))
 (let ((?x23141 (+ (+ (+ (- ?x23133 (* (* 2.0 l_0_9_13) l_0_9_9)) ?x23136) ?x23138) ?x23140)))
 (let ((?x23154 (+ (- (- (- (- (+ ?x23141 ?x23142) ?x23144) ?x23146) ?x23148) ?x23150) (* (* 2.0 l_0_9_28) l_0_9_32))))
 (let ((?x23160 (+ (+ ?x23154 (* (* 2.0 l_0_9_29) l_0_9_33)) (* (* 2.0 l_0_9_30) l_0_9_34))))
 (let ((?x23169 (- (- (- (+ ?x23160 (* (* 2.0 l_0_9_31) l_0_9_35)) ?x23164) ?x23166) ?x23168)))
 (= (- ?x23169 ?x23170) 0.0))))))))))))))))))))))))
(assert
 (let ((?x22336 (* l_0_9_136 l_0_9_136)))
 (let ((?x22334 (* l_0_9_135 l_0_9_135)))
 (let ((?x22332 (* l_0_9_134 l_0_9_134)))
 (let ((?x23202 (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) (* l_0_9_133 l_0_9_133)) ?x22332)))
 (let ((?x23208 (- (- (- (- ?x23202 ?x22334) ?x22336) (* (* 2.0 l_0_9_16) l_0_9_7)) (* (* 2.0 l_0_9_17) l_0_9_8))))
 (let ((?x23212 (+ (- ?x23208 (* (* 2.0 l_0_9_18) l_0_9_9)) (* (* 2.0 l_0_9_28) l_0_9_37))))
 (let ((?x23216 (+ (+ ?x23212 (* (* 2.0 l_0_9_29) l_0_9_38)) (* (* 2.0 l_0_9_30) l_0_9_39))))
 (= (+ ?x23216 (* (* 2.0 l_0_9_31) l_0_9_40)) 0.0)))))))))
(assert
 (let ((?x23287 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x23284 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x23281 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x23278 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x23275 (* l_0_9_36 l_0_9_36)))
 (let ((?x23273 (* l_0_9_35 l_0_9_35)))
 (let ((?x23271 (* l_0_9_34 l_0_9_34)))
 (let ((?x23269 (* l_0_9_33 l_0_9_33)))
 (let ((?x23267 (* l_0_9_32 l_0_9_32)))
 (let ((?x23264 (* 2.0 l_0_9_178)))
 (let ((?x23265 (* ?x23264 l_0_9_182)))
 (let ((?x23261 (* 2.0 l_0_9_177)))
 (let ((?x23262 (* ?x23261 l_0_9_181)))
 (let ((?x23258 (* 2.0 l_0_9_176)))
 (let ((?x23259 (* ?x23258 l_0_9_180)))
 (let ((?x23255 (* 2.0 l_0_9_175)))
 (let ((?x23256 (* ?x23255 l_0_9_179)))
 (let ((?x23252 (* 2.0 l_0_9_157)))
 (let ((?x23253 (* ?x23252 l_0_9_161)))
 (let ((?x23249 (* 2.0 l_0_9_156)))
 (let ((?x23250 (* ?x23249 l_0_9_160)))
 (let ((?x23246 (* 2.0 l_0_9_155)))
 (let ((?x23247 (* ?x23246 l_0_9_159)))
 (let ((?x23243 (* 2.0 l_0_9_154)))
 (let ((?x23244 (* ?x23243 l_0_9_158)))
 (let ((?x23241 (* l_0_9_15 l_0_9_15)))
 (let ((?x23239 (* l_0_9_14 l_0_9_14)))
 (let ((?x23237 (* l_0_9_13 l_0_9_13)))
 (let ((?x23235 (* l_0_9_12 l_0_9_12)))
 (let ((?x23232 (* 2.0 l_0_9_115)))
 (let ((?x23233 (* ?x23232 l_0_9_119)))
 (let ((?x23229 (* 2.0 l_0_9_114)))
 (let ((?x23230 (* ?x23229 l_0_9_118)))
 (let ((?x23226 (* 2.0 l_0_9_113)))
 (let ((?x23227 (* ?x23226 l_0_9_117)))
 (let ((?x23225 (+ (* (- l_0_9_11) l_0_9_11) (* (* 2.0 l_0_9_112) l_0_9_116))))
 (let ((?x23242 (- (- (- (- (+ (+ (+ ?x23225 ?x23227) ?x23230) ?x23233) ?x23235) ?x23237) ?x23239) ?x23241)))
 (let ((?x23263 (- (- (- (+ (+ (+ (+ ?x23242 ?x23244) ?x23247) ?x23250) ?x23253) ?x23256) ?x23259) ?x23262)))
 (let ((?x23279 (- (+ (+ (+ (+ (+ (- ?x23263 ?x23265) ?x23267) ?x23269) ?x23271) ?x23273) ?x23275) ?x23278)))
 (= (- (- (- ?x23279 ?x23281) ?x23284) ?x23287) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23264 (* 2.0 l_0_9_178)))
 (let ((?x23405 (* ?x23264 l_0_9_187)))
 (let ((?x23261 (* 2.0 l_0_9_177)))
 (let ((?x23403 (* ?x23261 l_0_9_186)))
 (let ((?x23258 (* 2.0 l_0_9_176)))
 (let ((?x23401 (* ?x23258 l_0_9_185)))
 (let ((?x23255 (* 2.0 l_0_9_175)))
 (let ((?x23399 (* ?x23255 l_0_9_184)))
 (let ((?x23252 (* 2.0 l_0_9_157)))
 (let ((?x23397 (* ?x23252 l_0_9_166)))
 (let ((?x23249 (* 2.0 l_0_9_156)))
 (let ((?x23395 (* ?x23249 l_0_9_165)))
 (let ((?x23246 (* 2.0 l_0_9_155)))
 (let ((?x23393 (* ?x23246 l_0_9_164)))
 (let ((?x23243 (* 2.0 l_0_9_154)))
 (let ((?x23391 (* ?x23243 l_0_9_163)))
 (let ((?x22400 (* 2.0 l_0_9_136)))
 (let ((?x22401 (* ?x22400 l_0_9_140)))
 (let ((?x22397 (* 2.0 l_0_9_135)))
 (let ((?x22398 (* ?x22397 l_0_9_139)))
 (let ((?x22394 (* 2.0 l_0_9_134)))
 (let ((?x22395 (* ?x22394 l_0_9_138)))
 (let ((?x22391 (* 2.0 l_0_9_133)))
 (let ((?x22392 (* ?x22391 l_0_9_137)))
 (let ((?x23232 (* 2.0 l_0_9_115)))
 (let ((?x23375 (* ?x23232 l_0_9_124)))
 (let ((?x23229 (* 2.0 l_0_9_114)))
 (let ((?x23373 (* ?x23229 l_0_9_123)))
 (let ((?x23226 (* 2.0 l_0_9_113)))
 (let ((?x23371 (* ?x23226 l_0_9_122)))
 (let ((?x7209 (* 2.0 l_0_9_112)))
 (let ((?x23369 (* ?x7209 l_0_9_121)))
 (let ((?x23364 (* 2.0 l_0_9_103)))
 (let ((?x23365 (* ?x23364 l_0_9_94)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x23362 (* ?x23361 l_0_9_93)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x23359 (* ?x23358 l_0_9_92)))
 (let ((?x23368 (- (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_91) ?x23359) ?x23362) ?x23365) (* (* 2.0 l_0_9_11) l_0_9_16))))
 (let ((?x23378 (- (+ (+ (+ (+ ?x23368 ?x23369) ?x23371) ?x23373) ?x23375) (* (* 2.0 l_0_9_12) l_0_9_17))))
 (let ((?x23383 (- (- (- (- ?x23378 (* (* 2.0 l_0_9_13) l_0_9_18)) ?x22392) ?x22395) ?x22398)))
 (let ((?x23390 (- (- (- ?x23383 ?x22401) (* (* 2.0 l_0_9_14) l_0_9_19)) (* (* 2.0 l_0_9_15) l_0_9_20))))
 (let ((?x23404 (- (- (- (+ (+ (+ (+ ?x23390 ?x23391) ?x23393) ?x23395) ?x23397) ?x23399) ?x23401) ?x23403)))
 (let ((?x23412 (+ (+ (- ?x23404 ?x23405) (* (* 2.0 l_0_9_32) l_0_9_37)) (* (* 2.0 l_0_9_33) l_0_9_38))))
 (let ((?x23418 (+ (+ ?x23412 (* (* 2.0 l_0_9_34) l_0_9_39)) (* (* 2.0 l_0_9_35) l_0_9_40))))
 (= (+ ?x23418 (* (* 2.0 l_0_9_36) l_0_9_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23502 (* l_0_9_42 l_0_9_42)))
 (let ((?x23500 (* l_0_9_41 l_0_9_41)))
 (let ((?x23498 (* l_0_9_40 l_0_9_40)))
 (let ((?x23496 (* l_0_9_39 l_0_9_39)))
 (let ((?x23494 (* l_0_9_38 l_0_9_38)))
 (let ((?x23492 (* l_0_9_37 l_0_9_37)))
 (let ((?x23490 (* l_0_9_21 l_0_9_21)))
 (let ((?x23488 (* l_0_9_20 l_0_9_20)))
 (let ((?x23486 (* l_0_9_19 l_0_9_19)))
 (let ((?x23484 (* l_0_9_18 l_0_9_18)))
 (let ((?x23482 (* l_0_9_17 l_0_9_17)))
 (let ((?x23480 (* l_0_9_16 l_0_9_16)))
 (let ((?x22400 (* 2.0 l_0_9_136)))
 (let ((?x22534 (* ?x22400 l_0_9_145)))
 (let ((?x22397 (* 2.0 l_0_9_135)))
 (let ((?x22532 (* ?x22397 l_0_9_144)))
 (let ((?x22394 (* 2.0 l_0_9_134)))
 (let ((?x22530 (* ?x22394 l_0_9_143)))
 (let ((?x23481 (- (- (- (- (* (* (- 2.0) l_0_9_133) l_0_9_142) ?x22530) ?x22532) ?x22534) ?x23480)))
 (let ((?x23495 (+ (+ (- (- (- (- (- ?x23481 ?x23482) ?x23484) ?x23486) ?x23488) ?x23490) ?x23492) ?x23494)))
 (= (+ (+ (+ (+ ?x23495 ?x23496) ?x23498) ?x23500) ?x23502) 0.0))))))))))))))))))))))
(assert
 (let ((?x23547 (* l_0_9_87 l_0_9_87)))
 (let ((?x23545 (* l_0_9_86 l_0_9_86)))
 (let ((?x21477 (* l_0_9_64 l_0_9_64)))
 (let ((?x23543 (* 3.0 ?x21477)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x21475 (* ?x21474 l_0_9_65)))
 (let ((?x23540 (* (* 3.0 l_0_9_43) l_0_9_43)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x21463 (* ?x21462 l_0_9_44)))
 (let ((?x21458 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x23535 (* l_0_9_171 l_0_9_171)))
 (let ((?x23533 (* l_0_9_170 l_0_9_170)))
 (let ((?x23531 (* l_0_9_150 l_0_9_150)))
 (let ((?x23529 (* l_0_9_149 l_0_9_149)))
 (let ((?x23527 (* l_0_9_127 l_0_9_127)))
 (let ((?x23525 (* l_0_9_108 l_0_9_108)))
 (let ((?x23526 (- (- (* 6.0 (* l_0_9_1 l_0_9_1)) (* l_0_9_107 l_0_9_107)) ?x23525)))
 (let ((?x23538 (- (- (+ (+ (- (- (+ ?x23526 ?x23527) ?x23529) ?x23531) ?x23533) ?x23535) ?x21458) ?x21463)))
 (= (+ (+ (+ (+ (- ?x23538 ?x23540) ?x21475) ?x23543) ?x23545) ?x23547) 0.0))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23588 (* ?x22188 l_0_9_68)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23586 (* ?x22185 l_0_9_67)))
 (let ((?x21477 (* l_0_9_64 l_0_9_64)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23583 (* ?x21474 l_0_9_67)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23581 (* ?x22180 l_0_9_47)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23579 (* ?x22177 l_0_9_46)))
 (let ((?x4645 (* l_0_9_43 l_0_9_43)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23576 (* ?x21462 l_0_9_46)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23574 (* ?x21454 l_0_9_25)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x7550 (* ?x21442 l_0_9_4)))
 (let ((?x23578 (+ (- (- (+ ?x7550 (* (* 2.0 l_0_9_127) l_0_9_130)) ?x23574) ?x23576) ?x4645)))
 (= (+ (+ (- (+ (- (- ?x23578 ?x23579) ?x23581) ?x23583) ?x21477) ?x23586) ?x23588) 0.0)))))))))))))))))))))
(assert
 (let ((?x23633 (* l_0_9_85 l_0_9_85)))
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23631 (* ?x22188 l_0_9_75)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23629 (* ?x22185 l_0_9_74)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23627 (* ?x21474 l_0_9_74)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23625 (* ?x22180 l_0_9_54)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23623 (* ?x22177 l_0_9_53)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23621 (* ?x21462 l_0_9_53)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23619 (* ?x21454 l_0_9_32)))
 (let ((?x23617 (* l_0_9_169 l_0_9_169)))
 (let ((?x23615 (* l_0_9_148 l_0_9_148)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x23613 (* ?x21447 l_0_9_137)))
 (let ((?x23614 (+ (+ (* (* 12.0 l_0_9_1) l_0_9_11) (* l_0_9_106 l_0_9_106)) ?x23613)))
 (let ((?x23628 (+ (- (- (- (- (- (+ ?x23614 ?x23615) ?x23617) ?x23619) ?x23621) ?x23623) ?x23625) ?x23627)))
 (= (- (+ (+ ?x23628 ?x23629) ?x23631) ?x23633) 0.0)))))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23686 (* ?x22188 l_0_9_80)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23684 (* ?x22185 l_0_9_79)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23682 (* ?x21474 l_0_9_79)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23680 (* ?x22180 l_0_9_59)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23678 (* ?x22177 l_0_9_58)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23676 (* ?x21462 l_0_9_58)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23674 (* ?x21454 l_0_9_37)))
 (let ((?x23527 (* l_0_9_127 l_0_9_127)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x23670 (* ?x21442 l_0_9_16)))
 (let ((?x23677 (- (- (- (+ ?x23670 (* (* 2.0 l_0_9_127) l_0_9_142)) ?x23527) ?x23674) ?x23676)))
 (= (+ (+ (+ (- (- ?x23677 ?x23678) ?x23680) ?x23682) ?x23684) ?x23686) 0.0))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23588 (* ?x22188 l_0_9_68)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23586 (* ?x22185 l_0_9_67)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23740 (* ?x21556 l_0_9_67)))
 (let ((?x21557 (* ?x21556 l_0_9_65)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23581 (* ?x22180 l_0_9_47)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23579 (* ?x22177 l_0_9_46)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23735 (* ?x21551 l_0_9_46)))
 (let ((?x21552 (* ?x21551 l_0_9_44)))
 (let ((?x21824 (* 12.0 l_0_9_3)))
 (let ((?x22139 (* ?x21824 l_0_9_5)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x22137 (* ?x21820 l_0_9_26)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x22131 (* ?x21810 l_0_9_25)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23574 (* ?x21454 l_0_9_25)))
 (let ((?x21800 (* 12.0 l_0_9_2)))
 (let ((?x22125 (* ?x21800 l_0_9_4)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23714 (* ?x22214 l_0_9_131)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x7550 (* ?x21442 l_0_9_4)))
 (let ((?x23724 (- (+ (+ ?x7550 (* (* 2.0 l_0_9_128) l_0_9_130)) ?x23714) (* (* 2.0 l_0_9_190) l_0_9_193))))
 (let ((?x23729 (- (- (- (+ ?x23724 ?x22125) (* (* 2.0 l_0_9_211) l_0_9_214)) ?x23574) ?x22131)))
 (let ((?x23734 (+ (+ (- (- ?x23729 (* (* 2.0 l_0_9_232) l_0_9_235)) ?x22137) ?x22139) ?x21552)))
 (let ((?x23743 (+ (+ (+ (- (- (- (- ?x23734 ?x23735) ?x23579) ?x23581) ?x21557) ?x23740) ?x23586) ?x23588)))
 (= ?x23743 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x23789 (* ?x22447 l_0_9_86)))
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23631 (* ?x22188 l_0_9_75)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23629 (* ?x22185 l_0_9_74)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23785 (* ?x21556 l_0_9_74)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23625 (* ?x22180 l_0_9_54)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23623 (* ?x22177 l_0_9_53)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23781 (* ?x21551 l_0_9_53)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x23779 (* ?x21820 l_0_9_33)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x23775 (* ?x21810 l_0_9_32)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23619 (* ?x21454 l_0_9_32)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x23768 (* ?x22406 l_0_9_170)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x23766 (* ?x22403 l_0_9_149)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23764 (* ?x22214 l_0_9_138)))
 (let ((?x22211 (* 2.0 l_0_9_128)))
 (let ((?x23762 (* ?x22211 l_0_9_137)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x23760 (* ?x22385 l_0_9_3)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x23758 (* ?x22382 l_0_9_2)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x7561 (* ?x21442 l_0_9_11)))
 (let ((?x23763 (+ (+ (+ (+ ?x7561 (* (* 2.0 l_0_9_106) l_0_9_107)) ?x23758) ?x23760) ?x23762)))
 (let ((?x23771 (- (- (+ (+ ?x23763 ?x23764) ?x23766) ?x23768) (* (* 2.0 l_0_9_190) l_0_9_200))))
 (let ((?x23778 (- (- (- (- ?x23771 (* (* 2.0 l_0_9_211) l_0_9_221)) ?x23619) ?x23775) (* (* 2.0 l_0_9_232) l_0_9_242))))
 (let ((?x23788 (+ (+ (+ (- (- (- (- ?x23778 ?x23779) ?x23781) ?x23623) ?x23625) ?x23785) ?x23629) ?x23631)))
 (= (- ?x23788 ?x23789) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22188 (* 6.0 l_0_9_66)))
 (let ((?x23686 (* ?x22188 l_0_9_80)))
 (let ((?x22185 (* 6.0 l_0_9_65)))
 (let ((?x23684 (* ?x22185 l_0_9_79)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23840 (* ?x21556 l_0_9_79)))
 (let ((?x22180 (* 6.0 l_0_9_45)))
 (let ((?x23680 (* ?x22180 l_0_9_59)))
 (let ((?x22177 (* 6.0 l_0_9_44)))
 (let ((?x23678 (* ?x22177 l_0_9_58)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23836 (* ?x21551 l_0_9_58)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x23834 (* ?x21820 l_0_9_38)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x23830 (* ?x21810 l_0_9_37)))
 (let ((?x21454 (* 12.0 l_0_9_22)))
 (let ((?x23674 (* ?x21454 l_0_9_37)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x23823 (* ?x22539 l_0_9_3)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x23821 (* ?x22536 l_0_9_2)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23819 (* ?x22214 l_0_9_143)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x21448 (* ?x21447 l_0_9_128)))
 (let ((?x21442 (* 12.0 l_0_9_1)))
 (let ((?x23670 (* ?x21442 l_0_9_16)))
 (let ((?x23822 (+ (+ (+ (- ?x23670 ?x21448) (* (* 2.0 l_0_9_128) l_0_9_142)) ?x23819) ?x23821)))
 (let ((?x23828 (- (- (+ ?x23822 ?x23823) (* (* 2.0 l_0_9_190) l_0_9_205)) (* (* 2.0 l_0_9_211) l_0_9_226))))
 (let ((?x23835 (- (- (- (- ?x23828 ?x23674) ?x23830) (* (* 2.0 l_0_9_232) l_0_9_247)) ?x23834)))
 (= (+ (+ (+ (- (- (- ?x23835 ?x23836) ?x23678) ?x23680) ?x23840) ?x23684) ?x23686) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x21928 (* l_0_9_69 l_0_9_69)))
 (let ((?x23884 (* 3.0 ?x21928)))
 (let ((?x21925 (* l_0_9_68 l_0_9_68)))
 (let ((?x23882 (* 3.0 ?x21925)))
 (let ((?x21922 (* l_0_9_67 l_0_9_67)))
 (let ((?x23880 (* 3.0 ?x21922)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23740 (* ?x21556 l_0_9_67)))
 (let ((?x21915 (* l_0_9_6 l_0_9_6)))
 (let ((?x21916 (* 6.0 ?x21915)))
 (let ((?x21912 (* l_0_9_5 l_0_9_5)))
 (let ((?x21913 (* 6.0 ?x21912)))
 (let ((?x23875 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23872 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23735 (* ?x21551 l_0_9_46)))
 (let ((?x21896 (* l_0_9_4 l_0_9_4)))
 (let ((?x21897 (* 6.0 ?x21896)))
 (let ((?x21894 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x21891 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x21888 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x23861 (* l_0_9_132 l_0_9_132)))
 (let ((?x23863 (- (+ (+ (* l_0_9_130 l_0_9_130) (* l_0_9_131 l_0_9_131)) ?x23861) ?x21888)))
 (let ((?x23870 (- (+ (+ (- (- ?x23863 ?x21891) ?x21894) ?x21897) ?x23735) (* (* 3.0 l_0_9_46) l_0_9_46))))
 (let ((?x23883 (+ (+ (- (+ (+ (- (- ?x23870 ?x23872) ?x23875) ?x21913) ?x21916) ?x23740) ?x23880) ?x23882)))
 (= (+ ?x23883 ?x23884) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x23937 (* ?x22447 l_0_9_88)))
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x23935 (* ?x22297 l_0_9_76)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x23933 (* ?x22294 l_0_9_75)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x23931 (* ?x22291 l_0_9_74)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23785 (* ?x21556 l_0_9_74)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x23928 (* ?x22285 l_0_9_55)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x23926 (* ?x22282 l_0_9_54)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23781 (* ?x21551 l_0_9_53)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x23921 (* ?x21663 l_0_9_34)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x23919 (* ?x21660 l_0_9_33)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x23917 (* ?x21657 l_0_9_32)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x23915 (* ?x22406 l_0_9_172)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x23913 (* ?x22403 l_0_9_151)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x23911 (* ?x22269 l_0_9_139)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x23909 (* ?x22266 l_0_9_138)))
 (let ((?x22263 (* 2.0 l_0_9_130)))
 (let ((?x23907 (* ?x22263 l_0_9_137)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x23905 (* ?x22388 l_0_9_6)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x23903 (* ?x22385 l_0_9_5)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x23901 (* ?x22382 l_0_9_4)))
 (let ((?x23908 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_109) ?x23901) ?x23903) ?x23905) ?x23907)))
 (let ((?x23922 (- (- (- (- (+ (+ (+ ?x23908 ?x23909) ?x23911) ?x23913) ?x23915) ?x23917) ?x23919) ?x23921)))
 (let ((?x23929 (- (- (- (+ ?x23922 ?x23781) (* (* 6.0 l_0_9_46) l_0_9_53)) ?x23926) ?x23928)))
 (= (- (+ (+ (+ (- ?x23929 ?x23785) ?x23931) ?x23933) ?x23935) ?x23937) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x24012 (* ?x22297 l_0_9_81)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x24010 (* ?x22294 l_0_9_80)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x24008 (* ?x22291 l_0_9_79)))
 (let ((?x21556 (* 2.0 l_0_9_64)))
 (let ((?x23840 (* ?x21556 l_0_9_79)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x24005 (* ?x22285 l_0_9_60)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x24003 (* ?x22282 l_0_9_59)))
 (let ((?x21551 (* 2.0 l_0_9_43)))
 (let ((?x23836 (* ?x21551 l_0_9_58)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x23998 (* ?x21663 l_0_9_39)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x23996 (* ?x21660 l_0_9_38)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x23994 (* ?x21657 l_0_9_37)))
 (let ((?x22542 (* 12.0 l_0_9_18)))
 (let ((?x23992 (* ?x22542 l_0_9_6)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x23990 (* ?x22539 l_0_9_5)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x23988 (* ?x22536 l_0_9_4)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x23986 (* ?x22269 l_0_9_144)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x23984 (* ?x22266 l_0_9_143)))
 (let ((?x23983 (+ (* (* (- 2.0) l_0_9_127) l_0_9_130) (* (* 2.0 l_0_9_130) l_0_9_142))))
 (let ((?x23997 (- (- (+ (+ (+ (+ (+ ?x23983 ?x23984) ?x23986) ?x23988) ?x23990) ?x23992) ?x23994) ?x23996)))
 (let ((?x24004 (- (- (+ (- ?x23997 ?x23998) ?x23836) (* (* 6.0 l_0_9_46) l_0_9_58)) ?x24003)))
 (= (+ (+ (+ (- (- ?x24004 ?x24005) ?x23840) ?x24008) ?x24010) ?x24012) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x24131 (* ?x22447 l_0_9_95)))
 (let ((?x24128 (* l_0_9_78 l_0_9_78)))
 (let ((?x24129 (* 3.0 ?x24128)))
 (let ((?x24125 (* l_0_9_77 l_0_9_77)))
 (let ((?x24126 (* 3.0 ?x24125)))
 (let ((?x24122 (* l_0_9_76 l_0_9_76)))
 (let ((?x24123 (* 3.0 ?x24122)))
 (let ((?x24119 (* l_0_9_75 l_0_9_75)))
 (let ((?x24120 (* 3.0 ?x24119)))
 (let ((?x24116 (* l_0_9_74 l_0_9_74)))
 (let ((?x24117 (* 3.0 ?x24116)))
 (let ((?x24114 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x24111 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x24108 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x24105 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x24099 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x24096 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x24093 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x24090 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x24087 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x24084 (* ?x22406 l_0_9_179)))
 (let ((?x23241 (* l_0_9_15 l_0_9_15)))
 (let ((?x24082 (* 6.0 ?x23241)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x24080 (* ?x22403 l_0_9_158)))
 (let ((?x24078 (* l_0_9_141 l_0_9_141)))
 (let ((?x24076 (* l_0_9_140 l_0_9_140)))
 (let ((?x23239 (* l_0_9_14 l_0_9_14)))
 (let ((?x24074 (* 6.0 ?x23239)))
 (let ((?x24072 (* l_0_9_139 l_0_9_139)))
 (let ((?x24070 (* l_0_9_138 l_0_9_138)))
 (let ((?x24068 (* l_0_9_137 l_0_9_137)))
 (let ((?x23237 (* l_0_9_13 l_0_9_13)))
 (let ((?x24066 (* 6.0 ?x23237)))
 (let ((?x23235 (* l_0_9_12 l_0_9_12)))
 (let ((?x24064 (* 6.0 ?x23235)))
 (let ((?x23291 (* l_0_9_11 l_0_9_11)))
 (let ((?x24062 (* 6.0 ?x23291)))
 (let ((?x24069 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_116) ?x24062) ?x24064) ?x24066) ?x24068)))
 (let ((?x24083 (+ (+ (+ (+ (+ (+ (+ ?x24069 ?x24070) ?x24072) ?x24074) ?x24076) ?x24078) ?x24080) ?x24082)))
 (let ((?x24103 (- (- (- (- (- (- (- ?x24083 ?x24084) ?x24087) ?x24090) ?x24093) ?x24096) ?x24099) (* (* 3.0 l_0_9_53) l_0_9_53))))
 (let ((?x24124 (+ (+ (+ (- (- (- (- ?x24103 ?x24105) ?x24108) ?x24111) ?x24114) ?x24117) ?x24120) ?x24123)))
 (= (- (+ (+ ?x24124 ?x24126) ?x24129) ?x24131) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24271 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24268 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24265 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x24262 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x24259 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x24256 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x24253 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x24250 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x24247 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x24241 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x24238 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x24235 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x24232 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x24229 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x24226 (* ?x22406 l_0_9_184)))
 (let ((?x24224 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x24221 (* ?x22403 l_0_9_163)))
 (let ((?x24219 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x24216 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x24213 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x24210 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x24207 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x24204 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x24201 (* ?x22388 l_0_9_18)))
 (let ((?x21447 (* 2.0 l_0_9_127)))
 (let ((?x23613 (* ?x21447 l_0_9_137)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x24198 (* ?x22385 l_0_9_17)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x24196 (* ?x22382 l_0_9_16)))
 (let ((?x22379 (* 2.0 l_0_9_106)))
 (let ((?x24194 (* ?x22379 l_0_9_121)))
 (let ((?x24200 (- (+ (+ (+ (* (* (- 2.0) l_0_9_100) l_0_9_85) ?x24194) ?x24196) ?x24198) ?x23613)))
 (let ((?x24220 (+ (+ (+ (+ (+ (+ (+ ?x24200 ?x24201) ?x24204) ?x24207) ?x24210) ?x24213) ?x24216) ?x24219)))
 (let ((?x24239 (- (- (- (- (- (+ (+ ?x24220 ?x24221) ?x24224) ?x24226) ?x24229) ?x24232) ?x24235) ?x24238)))
 (let ((?x24251 (- (- (- (- ?x24239 ?x24241) (* (* 6.0 l_0_9_53) l_0_9_58)) ?x24247) ?x24250)))
 (let ((?x24272 (+ (+ (+ (+ (+ (- (- ?x24251 ?x24253) ?x24256) ?x24259) ?x24262) ?x24265) ?x24268) ?x24271)))
 (= ?x24272 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24413 (* l_0_9_84 l_0_9_84)))
 (let ((?x24414 (* 3.0 ?x24413)))
 (let ((?x24410 (* l_0_9_83 l_0_9_83)))
 (let ((?x24411 (* 3.0 ?x24410)))
 (let ((?x24407 (* l_0_9_82 l_0_9_82)))
 (let ((?x24408 (* 3.0 ?x24407)))
 (let ((?x24404 (* l_0_9_81 l_0_9_81)))
 (let ((?x24405 (* 3.0 ?x24404)))
 (let ((?x24401 (* l_0_9_80 l_0_9_80)))
 (let ((?x24402 (* 3.0 ?x24401)))
 (let ((?x24398 (* l_0_9_79 l_0_9_79)))
 (let ((?x24399 (* 3.0 ?x24398)))
 (let ((?x24396 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24393 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24390 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24387 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24384 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x24378 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x24375 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x24372 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x24369 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x24366 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x24363 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x23490 (* l_0_9_21 l_0_9_21)))
 (let ((?x24360 (* 6.0 ?x23490)))
 (let ((?x23488 (* l_0_9_20 l_0_9_20)))
 (let ((?x24358 (* 6.0 ?x23488)))
 (let ((?x23486 (* l_0_9_19 l_0_9_19)))
 (let ((?x24356 (* 6.0 ?x23486)))
 (let ((?x23484 (* l_0_9_18 l_0_9_18)))
 (let ((?x24354 (* 6.0 ?x23484)))
 (let ((?x23482 (* l_0_9_17 l_0_9_17)))
 (let ((?x24352 (* 6.0 ?x23482)))
 (let ((?x23480 (* l_0_9_16 l_0_9_16)))
 (let ((?x24350 (* 6.0 ?x23480)))
 (let ((?x24348 (* l_0_9_147 l_0_9_147)))
 (let ((?x24346 (* l_0_9_146 l_0_9_146)))
 (let ((?x24344 (* l_0_9_145 l_0_9_145)))
 (let ((?x24342 (* l_0_9_144 l_0_9_144)))
 (let ((?x24340 (* l_0_9_143 l_0_9_143)))
 (let ((?x24341 (+ (+ (* (* (- 2.0) l_0_9_127) l_0_9_142) (* l_0_9_142 l_0_9_142)) ?x24340)))
 (let ((?x24355 (+ (+ (+ (+ (+ (+ (+ ?x24341 ?x24342) ?x24344) ?x24346) ?x24348) ?x24350) ?x24352) ?x24354)))
 (let ((?x24373 (- (- (- (- (+ (+ (+ ?x24355 ?x24356) ?x24358) ?x24360) ?x24363) ?x24366) ?x24369) ?x24372)))
 (let ((?x24385 (- (- (- (- ?x24373 ?x24375) ?x24378) (* (* 3.0 l_0_9_58) l_0_9_58)) ?x24384)))
 (let ((?x24406 (+ (+ (+ (- (- (- (- ?x24385 ?x24387) ?x24390) ?x24393) ?x24396) ?x24399) ?x24402) ?x24405)))
 (= (+ (+ (+ ?x24406 ?x24408) ?x24411) ?x24414) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23547 (* l_0_9_87 l_0_9_87)))
 (let ((?x23545 (* l_0_9_86 l_0_9_86)))
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x24498 (* ?x21696 l_0_9_75)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x24496 (* ?x21693 l_0_9_74)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x24494 (* ?x21675 l_0_9_54)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x24492 (* ?x21672 l_0_9_53)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x23779 (* ?x21820 l_0_9_33)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x23775 (* ?x21810 l_0_9_32)))
 (let ((?x23535 (* l_0_9_171 l_0_9_171)))
 (let ((?x23533 (* l_0_9_170 l_0_9_170)))
 (let ((?x23531 (* l_0_9_150 l_0_9_150)))
 (let ((?x23529 (* l_0_9_149 l_0_9_149)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x23760 (* ?x22385 l_0_9_3)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x23758 (* ?x22382 l_0_9_2)))
 (let ((?x24473 (+ (+ (+ (* l_0_9_107 l_0_9_107) (* l_0_9_108 l_0_9_108)) ?x23758) ?x23760)))
 (let ((?x24479 (- (- (- (+ (+ ?x24473 ?x23529) ?x23531) ?x23533) ?x23535) (* (* 2.0 l_0_9_191) l_0_9_200))))
 (let ((?x24483 (- (- ?x24479 (* (* 2.0 l_0_9_192) l_0_9_201)) (* (* 2.0 l_0_9_212) l_0_9_221))))
 (let ((?x24488 (- (- (- ?x24483 (* (* 2.0 l_0_9_213) l_0_9_222)) ?x23775) (* (* 2.0 l_0_9_233) l_0_9_242))))
 (let ((?x24495 (- (- (- (- ?x24488 (* (* 2.0 l_0_9_234) l_0_9_243)) ?x23779) ?x24492) ?x24494)))
 (= (- (- (+ (+ ?x24495 ?x24496) ?x24498) ?x23545) ?x23547) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x24554 (* ?x21696 l_0_9_80)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x24552 (* ?x21693 l_0_9_79)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x24550 (* ?x21675 l_0_9_59)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x24548 (* ?x21672 l_0_9_58)))
 (let ((?x21820 (* 12.0 l_0_9_24)))
 (let ((?x23834 (* ?x21820 l_0_9_38)))
 (let ((?x21810 (* 12.0 l_0_9_23)))
 (let ((?x23830 (* ?x21810 l_0_9_37)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x23823 (* ?x22539 l_0_9_3)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x23821 (* ?x22536 l_0_9_2)))
 (let ((?x24532 (+ (- (* (- l_0_9_128) l_0_9_128) (* l_0_9_129 l_0_9_129)) ?x23821)))
 (let ((?x24537 (- (- (+ ?x24532 ?x23823) (* (* 2.0 l_0_9_191) l_0_9_205)) (* (* 2.0 l_0_9_192) l_0_9_206))))
 (let ((?x24541 (- (- ?x24537 (* (* 2.0 l_0_9_212) l_0_9_226)) (* (* 2.0 l_0_9_213) l_0_9_227))))
 (let ((?x24546 (- (- (- ?x24541 ?x23830) (* (* 2.0 l_0_9_233) l_0_9_247)) (* (* 2.0 l_0_9_234) l_0_9_248))))
 (= (+ (+ (- (- (- ?x24546 ?x23834) ?x24548) ?x24550) ?x24552) ?x24554) 0.0))))))))))))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x24635 (* ?x22709 l_0_9_89)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x24633 (* ?x22706 l_0_9_88)))
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x24631 (* ?x21705 l_0_9_76)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x24629 (* ?x21702 l_0_9_75)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x24627 (* ?x21699 l_0_9_74)))
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x24498 (* ?x21696 l_0_9_75)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x24496 (* ?x21693 l_0_9_74)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x24623 (* ?x21684 l_0_9_55)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x24621 (* ?x21681 l_0_9_54)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x24619 (* ?x21678 l_0_9_53)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x24494 (* ?x21675 l_0_9_54)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x24492 (* ?x21672 l_0_9_53)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x23921 (* ?x21663 l_0_9_34)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x23919 (* ?x21660 l_0_9_33)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x23917 (* ?x21657 l_0_9_32)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24594 (* ?x22635 l_0_9_173)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24592 (* ?x22632 l_0_9_172)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24590 (* ?x22629 l_0_9_152)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24588 (* ?x22626 l_0_9_151)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x23905 (* ?x22388 l_0_9_6)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x23903 (* ?x22385 l_0_9_5)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x23901 (* ?x22382 l_0_9_4)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x8415 (* ?x22614 l_0_9_110)))
 (let ((?x24587 (+ (+ (+ (+ (* (* 2.0 l_0_9_107) l_0_9_109) ?x8415) ?x23901) ?x23903) ?x23905)))
 (let ((?x24597 (- (- (- (+ (+ ?x24587 ?x24588) ?x24590) ?x24592) ?x24594) (* (* 2.0 l_0_9_193) l_0_9_200))))
 (let ((?x24601 (- (- ?x24597 (* (* 2.0 l_0_9_194) l_0_9_201)) (* (* 2.0 l_0_9_195) l_0_9_202))))
 (let ((?x24605 (- (- ?x24601 (* (* 2.0 l_0_9_214) l_0_9_221)) (* (* 2.0 l_0_9_215) l_0_9_222))))
 (let ((?x24609 (- (- ?x24605 (* (* 2.0 l_0_9_216) l_0_9_223)) (* (* 2.0 l_0_9_235) l_0_9_242))))
 (let ((?x24613 (- (- ?x24609 (* (* 2.0 l_0_9_236) l_0_9_243)) (* (* 2.0 l_0_9_237) l_0_9_244))))
 (let ((?x24622 (- (- (+ (+ (- (- (- ?x24613 ?x23917) ?x23919) ?x23921) ?x24492) ?x24494) ?x24619) ?x24621)))
 (let ((?x24634 (- (+ (+ (+ (- (- (- ?x24622 ?x24623) ?x24496) ?x24498) ?x24627) ?x24629) ?x24631) ?x24633)))
 (= (- ?x24634 ?x24635) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x24740 (* ?x21705 l_0_9_81)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x24738 (* ?x21702 l_0_9_80)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x24736 (* ?x21699 l_0_9_79)))
 (let ((?x21696 (* 2.0 l_0_9_66)))
 (let ((?x24554 (* ?x21696 l_0_9_80)))
 (let ((?x21693 (* 2.0 l_0_9_65)))
 (let ((?x24552 (* ?x21693 l_0_9_79)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x24732 (* ?x21684 l_0_9_60)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x24730 (* ?x21681 l_0_9_59)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x24728 (* ?x21678 l_0_9_58)))
 (let ((?x21675 (* 2.0 l_0_9_45)))
 (let ((?x24550 (* ?x21675 l_0_9_59)))
 (let ((?x21672 (* 2.0 l_0_9_44)))
 (let ((?x24548 (* ?x21672 l_0_9_58)))
 (let ((?x21663 (* 12.0 l_0_9_27)))
 (let ((?x23998 (* ?x21663 l_0_9_39)))
 (let ((?x21660 (* 12.0 l_0_9_26)))
 (let ((?x23996 (* ?x21660 l_0_9_38)))
 (let ((?x21657 (* 12.0 l_0_9_25)))
 (let ((?x23994 (* ?x21657 l_0_9_37)))
 (let ((?x22542 (* 12.0 l_0_9_18)))
 (let ((?x23992 (* ?x22542 l_0_9_6)))
 (let ((?x22539 (* 12.0 l_0_9_17)))
 (let ((?x23990 (* ?x22539 l_0_9_5)))
 (let ((?x22536 (* 12.0 l_0_9_16)))
 (let ((?x23988 (* ?x22536 l_0_9_4)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23714 (* ?x22214 l_0_9_131)))
 (let ((?x24704 (+ (+ (+ (- (* (* (- 2.0) l_0_9_128) l_0_9_130) ?x23714) ?x23988) ?x23990) ?x23992)))
 (let ((?x24708 (- (- ?x24704 (* (* 2.0 l_0_9_193) l_0_9_205)) (* (* 2.0 l_0_9_194) l_0_9_206))))
 (let ((?x24712 (- (- ?x24708 (* (* 2.0 l_0_9_195) l_0_9_207)) (* (* 2.0 l_0_9_214) l_0_9_226))))
 (let ((?x24716 (- (- ?x24712 (* (* 2.0 l_0_9_215) l_0_9_227)) (* (* 2.0 l_0_9_216) l_0_9_228))))
 (let ((?x24720 (- (- ?x24716 (* (* 2.0 l_0_9_235) l_0_9_247)) (* (* 2.0 l_0_9_236) l_0_9_248))))
 (let ((?x24725 (- (- (- (- ?x24720 (* (* 2.0 l_0_9_237) l_0_9_249)) ?x23994) ?x23996) ?x23998)))
 (let ((?x24735 (- (- (- (- (- (+ (+ ?x24725 ?x24548) ?x24550) ?x24728) ?x24730) ?x24732) ?x24552) ?x24554)))
 (= (+ (+ (+ ?x24735 ?x24736) ?x24738) ?x24740) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x24888 (* ?x22709 l_0_9_96)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x24886 (* ?x22706 l_0_9_95)))
 (let ((?x24099 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x24096 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x24093 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x24090 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x24087 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x24854 (* l_0_9_246 l_0_9_246)))
 (let ((?x24852 (* l_0_9_245 l_0_9_245)))
 (let ((?x24850 (* l_0_9_244 l_0_9_244)))
 (let ((?x24848 (* l_0_9_243 l_0_9_243)))
 (let ((?x24846 (* l_0_9_242 l_0_9_242)))
 (let ((?x24844 (* l_0_9_225 l_0_9_225)))
 (let ((?x24842 (* l_0_9_224 l_0_9_224)))
 (let ((?x24840 (* l_0_9_223 l_0_9_223)))
 (let ((?x24838 (* l_0_9_222 l_0_9_222)))
 (let ((?x24836 (* l_0_9_221 l_0_9_221)))
 (let ((?x24834 (* l_0_9_204 l_0_9_204)))
 (let ((?x24832 (* l_0_9_203 l_0_9_203)))
 (let ((?x24830 (* l_0_9_202 l_0_9_202)))
 (let ((?x24828 (* l_0_9_201 l_0_9_201)))
 (let ((?x24826 (* l_0_9_200 l_0_9_200)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24824 (* ?x22635 l_0_9_180)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24822 (* ?x22632 l_0_9_179)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24820 (* ?x22629 l_0_9_159)))
 (let ((?x23241 (* l_0_9_15 l_0_9_15)))
 (let ((?x24082 (* 6.0 ?x23241)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24817 (* ?x22626 l_0_9_158)))
 (let ((?x23239 (* l_0_9_14 l_0_9_14)))
 (let ((?x24074 (* 6.0 ?x23239)))
 (let ((?x23237 (* l_0_9_13 l_0_9_13)))
 (let ((?x24066 (* 6.0 ?x23237)))
 (let ((?x23235 (* l_0_9_12 l_0_9_12)))
 (let ((?x24064 (* 6.0 ?x23235)))
 (let ((?x23291 (* l_0_9_11 l_0_9_11)))
 (let ((?x24062 (* 6.0 ?x23291)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x24811 (* ?x22614 l_0_9_117)))
 (let ((?x24815 (+ (+ (+ (+ (* (* 2.0 l_0_9_107) l_0_9_116) ?x24811) ?x24062) ?x24064) ?x24066)))
 (let ((?x24827 (- (- (- (+ (+ (+ (+ ?x24815 ?x24074) ?x24817) ?x24082) ?x24820) ?x24822) ?x24824) ?x24826)))
 (let ((?x24841 (- (- (- (- (- (- (- ?x24827 ?x24828) ?x24830) ?x24832) ?x24834) ?x24836) ?x24838) ?x24840)))
 (let ((?x24855 (- (- (- (- (- (- (- ?x24841 ?x24842) ?x24844) ?x24846) ?x24848) ?x24850) ?x24852) ?x24854)))
 (let ((?x24863 (- (- (- (- (- (- ?x24855 ?x24087) ?x24090) ?x24093) ?x24096) ?x24099) (* (* 1.0 l_0_9_53) l_0_9_53))))
 (let ((?x24869 (- (- ?x24863 (* (* 1.0 l_0_9_54) l_0_9_54)) (* (* 1.0 l_0_9_55) l_0_9_55))))
 (let ((?x24875 (- (- ?x24869 (* (* 1.0 l_0_9_56) l_0_9_56)) (* (* 1.0 l_0_9_57) l_0_9_57))))
 (let ((?x24879 (+ (+ ?x24875 (* 1.0 (* l_0_9_74 l_0_9_74))) (* 1.0 (* l_0_9_75 l_0_9_75)))))
 (let ((?x24883 (+ (+ ?x24879 (* 1.0 (* l_0_9_76 l_0_9_76))) (* 1.0 (* l_0_9_77 l_0_9_77)))))
 (= (- (- (+ ?x24883 (* 1.0 (* l_0_9_78 l_0_9_78))) ?x24886) ?x24888) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25073 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x25070 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x25067 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x25064 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x25061 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x25058 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x25055 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x25052 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x25049 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x25046 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x24241 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x24238 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x24235 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x24232 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x24229 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24993 (* ?x22635 l_0_9_185)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24991 (* ?x22632 l_0_9_184)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24989 (* ?x22629 l_0_9_164)))
 (let ((?x24224 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24986 (* ?x22626 l_0_9_163)))
 (let ((?x24213 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x22388 (* 12.0 l_0_9_13)))
 (let ((?x24201 (* ?x22388 l_0_9_18)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23764 (* ?x22214 l_0_9_138)))
 (let ((?x22211 (* 2.0 l_0_9_128)))
 (let ((?x23762 (* ?x22211 l_0_9_137)))
 (let ((?x22385 (* 12.0 l_0_9_12)))
 (let ((?x24198 (* ?x22385 l_0_9_17)))
 (let ((?x22382 (* 12.0 l_0_9_11)))
 (let ((?x24196 (* ?x22382 l_0_9_16)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x24978 (* ?x22614 l_0_9_122)))
 (let ((?x22611 (* 2.0 l_0_9_107)))
 (let ((?x24976 (* ?x22611 l_0_9_121)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x24974 (* ?x23358 l_0_9_87)))
 (let ((?x24980 (+ (+ (+ (- (* (* (- 2.0) l_0_9_100) l_0_9_86) ?x24974) ?x24976) ?x24978) ?x24196)))
 (let ((?x24988 (+ (+ (+ (+ (- (- (+ ?x24980 ?x24198) ?x23762) ?x23764) ?x24201) ?x24213) ?x24986) ?x24224)))
 (let ((?x24997 (- (- (- (+ ?x24988 ?x24989) ?x24991) ?x24993) (* (* 2.0 l_0_9_200) l_0_9_205))))
 (let ((?x25003 (- (- ?x24997 (* (* 2.0 l_0_9_201) l_0_9_206)) (* (* 2.0 l_0_9_202) l_0_9_207))))
 (let ((?x25009 (- (- ?x25003 (* (* 2.0 l_0_9_203) l_0_9_208)) (* (* 2.0 l_0_9_204) l_0_9_209))))
 (let ((?x25015 (- (- ?x25009 (* (* 2.0 l_0_9_221) l_0_9_226)) (* (* 2.0 l_0_9_222) l_0_9_227))))
 (let ((?x25021 (- (- ?x25015 (* (* 2.0 l_0_9_223) l_0_9_228)) (* (* 2.0 l_0_9_224) l_0_9_229))))
 (let ((?x25027 (- (- ?x25021 (* (* 2.0 l_0_9_225) l_0_9_230)) (* (* 2.0 l_0_9_242) l_0_9_247))))
 (let ((?x25033 (- (- ?x25027 (* (* 2.0 l_0_9_243) l_0_9_248)) (* (* 2.0 l_0_9_244) l_0_9_249))))
 (let ((?x25039 (- (- ?x25033 (* (* 2.0 l_0_9_245) l_0_9_250)) (* (* 2.0 l_0_9_246) l_0_9_251))))
 (let ((?x25050 (- (- (- (- (- (- (- ?x25039 ?x24229) ?x24232) ?x24235) ?x24238) ?x24241) ?x25046) ?x25049)))
 (let ((?x25071 (+ (+ (+ (+ (- (- (- ?x25050 ?x25052) ?x25055) ?x25058) ?x25061) ?x25064) ?x25067) ?x25070)))
 (= (+ ?x25071 ?x25073) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24378 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x24375 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x24372 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x24369 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x24366 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x24363 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x25158 (* l_0_9_252 l_0_9_252)))
 (let ((?x25156 (* l_0_9_251 l_0_9_251)))
 (let ((?x25154 (* l_0_9_250 l_0_9_250)))
 (let ((?x25152 (* l_0_9_249 l_0_9_249)))
 (let ((?x25150 (* l_0_9_248 l_0_9_248)))
 (let ((?x25148 (* l_0_9_247 l_0_9_247)))
 (let ((?x25146 (* l_0_9_231 l_0_9_231)))
 (let ((?x25144 (* l_0_9_230 l_0_9_230)))
 (let ((?x25142 (* l_0_9_229 l_0_9_229)))
 (let ((?x25140 (* l_0_9_228 l_0_9_228)))
 (let ((?x25138 (* l_0_9_227 l_0_9_227)))
 (let ((?x25136 (* l_0_9_226 l_0_9_226)))
 (let ((?x25134 (* l_0_9_210 l_0_9_210)))
 (let ((?x23490 (* l_0_9_21 l_0_9_21)))
 (let ((?x24360 (* 6.0 ?x23490)))
 (let ((?x25131 (* l_0_9_209 l_0_9_209)))
 (let ((?x25129 (* l_0_9_208 l_0_9_208)))
 (let ((?x25127 (* l_0_9_207 l_0_9_207)))
 (let ((?x25125 (* l_0_9_206 l_0_9_206)))
 (let ((?x25123 (* l_0_9_205 l_0_9_205)))
 (let ((?x23488 (* l_0_9_20 l_0_9_20)))
 (let ((?x24358 (* 6.0 ?x23488)))
 (let ((?x23486 (* l_0_9_19 l_0_9_19)))
 (let ((?x24356 (* 6.0 ?x23486)))
 (let ((?x23484 (* l_0_9_18 l_0_9_18)))
 (let ((?x24354 (* 6.0 ?x23484)))
 (let ((?x23482 (* l_0_9_17 l_0_9_17)))
 (let ((?x24352 (* 6.0 ?x23482)))
 (let ((?x23480 (* l_0_9_16 l_0_9_16)))
 (let ((?x24350 (* 6.0 ?x23480)))
 (let ((?x22214 (* 2.0 l_0_9_129)))
 (let ((?x23819 (* ?x22214 l_0_9_143)))
 (let ((?x25120 (+ (+ (+ (- (* (* (- 2.0) l_0_9_128) l_0_9_142) ?x23819) ?x24350) ?x24352) ?x24354)))
 (let ((?x25132 (- (- (- (- (- (+ (+ ?x25120 ?x24356) ?x24358) ?x25123) ?x25125) ?x25127) ?x25129) ?x25131)))
 (let ((?x25145 (- (- (- (- (- (- (+ ?x25132 ?x24360) ?x25134) ?x25136) ?x25138) ?x25140) ?x25142) ?x25144)))
 (let ((?x25159 (- (- (- (- (- (- (- ?x25145 ?x25146) ?x25148) ?x25150) ?x25152) ?x25154) ?x25156) ?x25158)))
 (let ((?x25168 (- (- (- (- (- (- (- ?x25159 ?x24363) ?x24366) ?x24369) ?x24372) ?x24375) ?x24378) (* (* 1.0 l_0_9_58) l_0_9_58))))
 (let ((?x25174 (- (- ?x25168 (* (* 1.0 l_0_9_59) l_0_9_59)) (* (* 1.0 l_0_9_60) l_0_9_60))))
 (let ((?x25180 (- (- ?x25174 (* (* 1.0 l_0_9_61) l_0_9_61)) (* (* 1.0 l_0_9_62) l_0_9_62))))
 (let ((?x25185 (+ (- ?x25180 (* (* 1.0 l_0_9_63) l_0_9_63)) (* 1.0 (* l_0_9_79 l_0_9_79)))))
 (let ((?x25189 (+ (+ ?x25185 (* 1.0 (* l_0_9_80 l_0_9_80))) (* 1.0 (* l_0_9_81 l_0_9_81)))))
 (let ((?x25193 (+ (+ ?x25189 (* 1.0 (* l_0_9_82 l_0_9_82))) (* 1.0 (* l_0_9_83 l_0_9_83)))))
 (= (+ ?x25193 (* 1.0 (* l_0_9_84 l_0_9_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x23789 (* ?x22447 l_0_9_86)))
 (let ((?x21477 (* l_0_9_64 l_0_9_64)))
 (let ((?x23543 (* 3.0 ?x21477)))
 (let ((?x23540 (* (* 3.0 l_0_9_43) l_0_9_43)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x23768 (* ?x22406 l_0_9_170)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x23766 (* ?x22403 l_0_9_149)))
 (let ((?x25217 (+ (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_107) ?x23766) ?x23768) ?x23540) ?x23543)))
 (= (+ ?x25217 ?x23789) 0.0))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x24635 (* ?x22709 l_0_9_89)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x24633 (* ?x22706 l_0_9_88)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23583 (* ?x21474 l_0_9_67)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23576 (* ?x21462 l_0_9_46)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24594 (* ?x22635 l_0_9_173)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24592 (* ?x22632 l_0_9_172)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24590 (* ?x22629 l_0_9_152)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24588 (* ?x22626 l_0_9_151)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x8415 (* ?x22614 l_0_9_110)))
 (let ((?x25227 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_109) ?x8415) ?x24588) ?x24590) ?x24592)))
 (= (+ (+ (+ (- (+ ?x25227 ?x24594) ?x23576) ?x23583) ?x24633) ?x24635) 0.0)))))))))))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x22710 (* ?x22709 l_0_9_92)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x22707 (* ?x22706 l_0_9_91)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x22183 (* ?x21474 l_0_9_70)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x22175 (* ?x21462 l_0_9_49)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x22636 (* ?x22635 l_0_9_176)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x22633 (* ?x22632 l_0_9_175)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x22630 (* ?x22629 l_0_9_155)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x22627 (* ?x22626 l_0_9_154)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x22615 (* ?x22614 l_0_9_113)))
 (let ((?x25239 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_112) ?x22615) ?x22627) ?x22630) ?x22633)))
 (= (+ (+ (+ (- (+ ?x25239 ?x22636) ?x22175) ?x22183) ?x22707) ?x22710) 0.0)))))))))))))))))))))
(assert
 (let ((?x22709 (* 2.0 l_0_9_87)))
 (let ((?x24888 (* ?x22709 l_0_9_96)))
 (let ((?x22706 (* 2.0 l_0_9_86)))
 (let ((?x24886 (* ?x22706 l_0_9_95)))
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23627 (* ?x21474 l_0_9_74)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23621 (* ?x21462 l_0_9_53)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24824 (* ?x22635 l_0_9_180)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24822 (* ?x22632 l_0_9_179)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24820 (* ?x22629 l_0_9_159)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24817 (* ?x22626 l_0_9_158)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x24811 (* ?x22614 l_0_9_117)))
 (let ((?x9958 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_116) ?x24811) ?x24817) ?x24820) ?x24822)))
 (= (+ (+ (+ (- (+ ?x9958 ?x24824) ?x23621) ?x23627) ?x24886) ?x24888) 0.0)))))))))))))))))))))
(assert
 (let ((?x21474 (* 6.0 l_0_9_64)))
 (let ((?x23682 (* ?x21474 l_0_9_79)))
 (let ((?x21462 (* 6.0 l_0_9_43)))
 (let ((?x23676 (* ?x21462 l_0_9_58)))
 (let ((?x22635 (* 2.0 l_0_9_171)))
 (let ((?x24993 (* ?x22635 l_0_9_185)))
 (let ((?x22632 (* 2.0 l_0_9_170)))
 (let ((?x24991 (* ?x22632 l_0_9_184)))
 (let ((?x22629 (* 2.0 l_0_9_150)))
 (let ((?x24989 (* ?x22629 l_0_9_164)))
 (let ((?x22626 (* 2.0 l_0_9_149)))
 (let ((?x24986 (* ?x22626 l_0_9_163)))
 (let ((?x22614 (* 2.0 l_0_9_108)))
 (let ((?x24978 (* ?x22614 l_0_9_122)))
 (let ((?x22611 (* 2.0 l_0_9_107)))
 (let ((?x24976 (* ?x22611 l_0_9_121)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x24974 (* ?x23358 l_0_9_87)))
 (let ((?x9993 (- (- (- (+ (* (* 2.0 l_0_9_100) l_0_9_86) ?x24974) ?x24976) ?x24978) ?x24986)))
 (= (+ (- (+ (+ (- ?x9993 ?x24989) ?x24991) ?x24993) ?x23676) ?x23682) 0.0)))))))))))))))))))))
(assert
 (let ((?x21928 (* l_0_9_69 l_0_9_69)))
 (let ((?x23884 (* 3.0 ?x21928)))
 (let ((?x21925 (* l_0_9_68 l_0_9_68)))
 (let ((?x23882 (* 3.0 ?x21925)))
 (let ((?x21922 (* l_0_9_67 l_0_9_67)))
 (let ((?x23880 (* 3.0 ?x21922)))
 (let ((?x23875 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23872 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x25258 (+ (+ (- (- (* (* (- 3.0) l_0_9_46) l_0_9_46) ?x23872) ?x23875) ?x23880) ?x23882)))
 (= (+ ?x25258 ?x23884) 0.0)))))))))))
(assert
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x22298 (* ?x22297 l_0_9_72)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x22295 (* ?x22294 l_0_9_71)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x22292 (* ?x22291 l_0_9_70)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x22286 (* ?x22285 l_0_9_51)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x22283 (* ?x22282 l_0_9_50)))
 (let ((?x25268 (+ (+ (- (- (* (* (- 6.0) l_0_9_46) l_0_9_49) ?x22283) ?x22286) ?x22292) ?x22295)))
 (= (+ ?x25268 ?x22298) 0.0)))))))))))))
(assert
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x23935 (* ?x22297 l_0_9_76)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x23933 (* ?x22294 l_0_9_75)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x23931 (* ?x22291 l_0_9_74)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x23928 (* ?x22285 l_0_9_55)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x23926 (* ?x22282 l_0_9_54)))
 (let ((?x25275 (+ (+ (- (- (* (* (- 6.0) l_0_9_46) l_0_9_53) ?x23926) ?x23928) ?x23931) ?x23933)))
 (= (+ ?x25275 ?x23935) 0.0)))))))))))))
(assert
 (let ((?x22297 (* 6.0 l_0_9_69)))
 (let ((?x24012 (* ?x22297 l_0_9_81)))
 (let ((?x22294 (* 6.0 l_0_9_68)))
 (let ((?x24010 (* ?x22294 l_0_9_80)))
 (let ((?x22291 (* 6.0 l_0_9_67)))
 (let ((?x24008 (* ?x22291 l_0_9_79)))
 (let ((?x22285 (* 6.0 l_0_9_48)))
 (let ((?x24005 (* ?x22285 l_0_9_60)))
 (let ((?x22282 (* 6.0 l_0_9_47)))
 (let ((?x24003 (* ?x22282 l_0_9_59)))
 (let ((?x25282 (+ (+ (- (- (* (* (- 6.0) l_0_9_46) l_0_9_58) ?x24003) ?x24005) ?x24008) ?x24010)))
 (= (+ ?x25282 ?x24012) 0.0)))))))))))))
(assert
 (let ((?x22055 (* l_0_9_73 l_0_9_73)))
 (let ((?x22363 (* 3.0 ?x22055)))
 (let ((?x22052 (* l_0_9_72 l_0_9_72)))
 (let ((?x22361 (* 3.0 ?x22052)))
 (let ((?x22049 (* l_0_9_71 l_0_9_71)))
 (let ((?x22359 (* 3.0 ?x22049)))
 (let ((?x22046 (* l_0_9_70 l_0_9_70)))
 (let ((?x22357 (* 3.0 ?x22046)))
 (let ((?x22354 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x22351 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x22348 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x25293 (+ (- (- (- (* (* (- 3.0) l_0_9_49) l_0_9_49) ?x22348) ?x22351) ?x22354) ?x22357)))
 (= (+ (+ (+ ?x25293 ?x22359) ?x22361) ?x22363) 0.0))))))))))))))
(assert
 (let ((?x22444 (* 6.0 l_0_9_73)))
 (let ((?x22445 (* ?x22444 l_0_9_77)))
 (let ((?x22441 (* 6.0 l_0_9_72)))
 (let ((?x22442 (* ?x22441 l_0_9_76)))
 (let ((?x22438 (* 6.0 l_0_9_71)))
 (let ((?x22439 (* ?x22438 l_0_9_75)))
 (let ((?x22435 (* 6.0 l_0_9_70)))
 (let ((?x22436 (* ?x22435 l_0_9_74)))
 (let ((?x22432 (* 6.0 l_0_9_52)))
 (let ((?x22433 (* ?x22432 l_0_9_56)))
 (let ((?x22429 (* 6.0 l_0_9_51)))
 (let ((?x22430 (* ?x22429 l_0_9_55)))
 (let ((?x22426 (* 6.0 l_0_9_50)))
 (let ((?x22427 (* ?x22426 l_0_9_54)))
 (let ((?x25299 (+ (- (- (- (* (* (- 6.0) l_0_9_49) l_0_9_53) ?x22427) ?x22430) ?x22433) ?x22436)))
 (= (+ (+ (+ ?x25299 ?x22439) ?x22442) ?x22445) 0.0)))))))))))))))))
(assert
 (let ((?x22444 (* 6.0 l_0_9_73)))
 (let ((?x22569 (* ?x22444 l_0_9_82)))
 (let ((?x22441 (* 6.0 l_0_9_72)))
 (let ((?x22567 (* ?x22441 l_0_9_81)))
 (let ((?x22438 (* 6.0 l_0_9_71)))
 (let ((?x22565 (* ?x22438 l_0_9_80)))
 (let ((?x22435 (* 6.0 l_0_9_70)))
 (let ((?x22563 (* ?x22435 l_0_9_79)))
 (let ((?x22432 (* 6.0 l_0_9_52)))
 (let ((?x22561 (* ?x22432 l_0_9_61)))
 (let ((?x22429 (* 6.0 l_0_9_51)))
 (let ((?x22559 (* ?x22429 l_0_9_60)))
 (let ((?x22426 (* 6.0 l_0_9_50)))
 (let ((?x22557 (* ?x22426 l_0_9_59)))
 (let ((?x25312 (+ (- (- (- (* (* (- 6.0) l_0_9_49) l_0_9_58) ?x22557) ?x22559) ?x22561) ?x22563)))
 (= (+ (+ (+ ?x25312 ?x22565) ?x22567) ?x22569) 0.0)))))))))))))))))
(assert
 (let ((?x24128 (* l_0_9_78 l_0_9_78)))
 (let ((?x24129 (* 3.0 ?x24128)))
 (let ((?x24125 (* l_0_9_77 l_0_9_77)))
 (let ((?x24126 (* 3.0 ?x24125)))
 (let ((?x24122 (* l_0_9_76 l_0_9_76)))
 (let ((?x24123 (* 3.0 ?x24122)))
 (let ((?x24119 (* l_0_9_75 l_0_9_75)))
 (let ((?x24120 (* 3.0 ?x24119)))
 (let ((?x24116 (* l_0_9_74 l_0_9_74)))
 (let ((?x24117 (* 3.0 ?x24116)))
 (let ((?x24114 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x24111 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x24108 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x24105 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x25326 (- (- (- (- (* (* (- 3.0) l_0_9_53) l_0_9_53) ?x24105) ?x24108) ?x24111) ?x24114)))
 (= (+ (+ (+ (+ (+ ?x25326 ?x24117) ?x24120) ?x24123) ?x24126) ?x24129) 0.0)))))))))))))))))
(assert
 (let ((?x24271 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24268 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24265 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x24262 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x24259 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x24256 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x24253 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x24250 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x24247 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x25341 (- (- (- (- (* (* (- 6.0) l_0_9_53) l_0_9_58) ?x24247) ?x24250) ?x24253) ?x24256)))
 (= (+ (+ (+ (+ (+ ?x25341 ?x24259) ?x24262) ?x24265) ?x24268) ?x24271) 0.0))))))))))))
(assert
 (let ((?x24413 (* l_0_9_84 l_0_9_84)))
 (let ((?x24414 (* 3.0 ?x24413)))
 (let ((?x24410 (* l_0_9_83 l_0_9_83)))
 (let ((?x24411 (* 3.0 ?x24410)))
 (let ((?x24407 (* l_0_9_82 l_0_9_82)))
 (let ((?x24408 (* 3.0 ?x24407)))
 (let ((?x24404 (* l_0_9_81 l_0_9_81)))
 (let ((?x24405 (* 3.0 ?x24404)))
 (let ((?x24401 (* l_0_9_80 l_0_9_80)))
 (let ((?x24402 (* 3.0 ?x24401)))
 (let ((?x24398 (* l_0_9_79 l_0_9_79)))
 (let ((?x24399 (* 3.0 ?x24398)))
 (let ((?x24396 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24393 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24390 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24387 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24384 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x25358 (- (- (- (- (* (* (- 3.0) l_0_9_58) l_0_9_58) ?x24384) ?x24387) ?x24390) ?x24393)))
 (let ((?x25365 (+ (+ (+ (+ (+ (+ (- ?x25358 ?x24396) ?x24399) ?x24402) ?x24405) ?x24408) ?x24411) ?x24414)))
 (= ?x25365 0.0)))))))))))))))))))))
(assert
 (let ((?x21928 (* l_0_9_69 l_0_9_69)))
 (let ((?x21925 (* l_0_9_68 l_0_9_68)))
 (let ((?x21922 (* l_0_9_67 l_0_9_67)))
 (let ((?x5128 (* l_0_9_48 l_0_9_48)))
 (let ((?x25371 (- (+ (+ (* l_0_9_46 l_0_9_46) (* l_0_9_47 l_0_9_47)) ?x5128) ?x21922)))
 (= (- (- ?x25371 ?x21925) ?x21928) 0.0)))))))
(assert
 (let ((?x25407 (* l_0_9_90 l_0_9_90)))
 (let ((?x25405 (* l_0_9_89 l_0_9_89)))
 (let ((?x25403 (* l_0_9_88 l_0_9_88)))
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x24631 (* ?x21705 l_0_9_76)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x24629 (* ?x21702 l_0_9_75)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x24627 (* ?x21699 l_0_9_74)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x24623 (* ?x21684 l_0_9_55)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x24621 (* ?x21681 l_0_9_54)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x24619 (* ?x21678 l_0_9_53)))
 (let ((?x25395 (* l_0_9_174 l_0_9_174)))
 (let ((?x25393 (* l_0_9_173 l_0_9_173)))
 (let ((?x25391 (* l_0_9_172 l_0_9_172)))
 (let ((?x25389 (* l_0_9_153 l_0_9_153)))
 (let ((?x25387 (* l_0_9_152 l_0_9_152)))
 (let ((?x25385 (* l_0_9_151 l_0_9_151)))
 (let ((?x25383 (* l_0_9_111 l_0_9_111)))
 (let ((?x25386 (+ (+ (+ (* l_0_9_109 l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x25383) ?x25385)))
 (let ((?x25398 (+ (+ (- (- (- (+ (+ ?x25386 ?x25387) ?x25389) ?x25391) ?x25393) ?x25395) ?x24619) ?x24621)))
 (let ((?x25408 (- (- (- (- (- (- (+ ?x25398 ?x24623) ?x24627) ?x24629) ?x24631) ?x25403) ?x25405) ?x25407)))
 (= ?x25408 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x21705 (* 2.0 l_0_9_69)))
 (let ((?x24740 (* ?x21705 l_0_9_81)))
 (let ((?x21702 (* 2.0 l_0_9_68)))
 (let ((?x24738 (* ?x21702 l_0_9_80)))
 (let ((?x21699 (* 2.0 l_0_9_67)))
 (let ((?x24736 (* ?x21699 l_0_9_79)))
 (let ((?x21684 (* 2.0 l_0_9_48)))
 (let ((?x24732 (* ?x21684 l_0_9_60)))
 (let ((?x21681 (* 2.0 l_0_9_47)))
 (let ((?x24730 (* ?x21681 l_0_9_59)))
 (let ((?x21678 (* 2.0 l_0_9_46)))
 (let ((?x24728 (* ?x21678 l_0_9_58)))
 (let ((?x23861 (* l_0_9_132 l_0_9_132)))
 (let ((?x10312 (- (- (* (- l_0_9_130) l_0_9_130) (* l_0_9_131 l_0_9_131)) ?x23861)))
 (= (- (- (- (+ (+ (+ ?x10312 ?x24728) ?x24730) ?x24732) ?x24736) ?x24738) ?x24740) 0.0))))))))))))))))
(assert
 (let ((?x23023 (* 2.0 l_0_9_90)))
 (let ((?x25445 (* ?x23023 l_0_9_97)))
 (let ((?x23020 (* 2.0 l_0_9_89)))
 (let ((?x25443 (* ?x23020 l_0_9_96)))
 (let ((?x23017 (* 2.0 l_0_9_88)))
 (let ((?x25441 (* ?x23017 l_0_9_95)))
 (let ((?x24128 (* l_0_9_78 l_0_9_78)))
 (let ((?x24125 (* l_0_9_77 l_0_9_77)))
 (let ((?x24122 (* l_0_9_76 l_0_9_76)))
 (let ((?x24119 (* l_0_9_75 l_0_9_75)))
 (let ((?x24116 (* l_0_9_74 l_0_9_74)))
 (let ((?x6672 (* l_0_9_57 l_0_9_57)))
 (let ((?x4386 (* l_0_9_56 l_0_9_56)))
 (let ((?x8048 (* l_0_9_55 l_0_9_55)))
 (let ((?x24157 (* l_0_9_54 l_0_9_54)))
 (let ((?x8033 (* l_0_9_53 l_0_9_53)))
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x25429 (* ?x23000 l_0_9_181)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x25427 (* ?x22997 l_0_9_180)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x25425 (* ?x22994 l_0_9_179)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x25423 (* ?x22991 l_0_9_160)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x10353 (* ?x22988 l_0_9_159)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x10396 (* ?x22985 l_0_9_158)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x10394 (* ?x22977 l_0_9_118)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x10402 (* ?x22974 l_0_9_117)))
 (let ((?x25422 (+ (+ (+ (+ (* (* 2.0 l_0_9_109) l_0_9_116) ?x10402) ?x10394) ?x10396) ?x10353)))
 (let ((?x25433 (+ (+ (+ (- (- (- (+ ?x25422 ?x25423) ?x25425) ?x25427) ?x25429) ?x8033) ?x24157) ?x8048)))
 (let ((?x25440 (- (- (- (- (- (+ (+ ?x25433 ?x4386) ?x6672) ?x24116) ?x24119) ?x24122) ?x24125) ?x24128)))
 (= (- (- (- ?x25440 ?x25441) ?x25443) ?x25445) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25073 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x25070 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x25067 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x25064 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x25061 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x25058 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x25055 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x25052 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x25049 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x25046 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x25500 (* ?x23000 l_0_9_186)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x25498 (* ?x22997 l_0_9_185)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x25496 (* ?x22994 l_0_9_184)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x25494 (* ?x22991 l_0_9_165)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x25492 (* ?x22988 l_0_9_164)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x25490 (* ?x22985 l_0_9_163)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x23911 (* ?x22269 l_0_9_139)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x23909 (* ?x22266 l_0_9_138)))
 (let ((?x22263 (* 2.0 l_0_9_130)))
 (let ((?x23907 (* ?x22263 l_0_9_137)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x25485 (* ?x22977 l_0_9_123)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x25483 (* ?x22974 l_0_9_122)))
 (let ((?x22970 (* 2.0 l_0_9_109)))
 (let ((?x25481 (* ?x22970 l_0_9_121)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x25479 (* ?x23361 l_0_9_90)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x25477 (* ?x23358 l_0_9_89)))
 (let ((?x25484 (+ (+ (- (- (* (* (- 2.0) l_0_9_100) l_0_9_88) ?x25477) ?x25479) ?x25481) ?x25483)))
 (let ((?x25495 (+ (+ (+ (- (- (- (+ ?x25484 ?x25485) ?x23907) ?x23909) ?x23911) ?x25490) ?x25492) ?x25494)))
 (let ((?x25505 (+ (+ (+ (+ (- (- (- ?x25495 ?x25496) ?x25498) ?x25500) ?x25046) ?x25049) ?x25052) ?x25055)))
 (= (- (- (- (- (- (+ ?x25505 ?x25058) ?x25061) ?x25064) ?x25067) ?x25070) ?x25073) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24413 (* l_0_9_84 l_0_9_84)))
 (let ((?x24410 (* l_0_9_83 l_0_9_83)))
 (let ((?x24407 (* l_0_9_82 l_0_9_82)))
 (let ((?x24404 (* l_0_9_81 l_0_9_81)))
 (let ((?x24401 (* l_0_9_80 l_0_9_80)))
 (let ((?x24398 (* l_0_9_79 l_0_9_79)))
 (let ((?x8199 (* l_0_9_63 l_0_9_63)))
 (let ((?x24445 (* l_0_9_62 l_0_9_62)))
 (let ((?x24439 (* l_0_9_61 l_0_9_61)))
 (let ((?x8183 (* l_0_9_60 l_0_9_60)))
 (let ((?x8175 (* l_0_9_59 l_0_9_59)))
 (let ((?x8171 (* l_0_9_58 l_0_9_58)))
 (let ((?x22269 (* 2.0 l_0_9_132)))
 (let ((?x23986 (* ?x22269 l_0_9_144)))
 (let ((?x22266 (* 2.0 l_0_9_131)))
 (let ((?x23984 (* ?x22266 l_0_9_143)))
 (let ((?x25561 (+ (+ (- (- (* (* (- 2.0) l_0_9_130) l_0_9_142) ?x23984) ?x23986) ?x8171) ?x8175)))
 (let ((?x25568 (- (- (- (+ (+ (+ (+ ?x25561 ?x8183) ?x24439) ?x24445) ?x8199) ?x24398) ?x24401) ?x24404)))
 (= (- (- (- ?x25568 ?x24407) ?x24410) ?x24413) 0.0))))))))))))))))))))
(assert
 (let ((?x25599 (* l_0_9_99 l_0_9_99)))
 (let ((?x25597 (* l_0_9_98 l_0_9_98)))
 (let ((?x25595 (* l_0_9_97 l_0_9_97)))
 (let ((?x25593 (* l_0_9_96 l_0_9_96)))
 (let ((?x25591 (* l_0_9_95 l_0_9_95)))
 (let ((?x25589 (* l_0_9_183 l_0_9_183)))
 (let ((?x25587 (* l_0_9_182 l_0_9_182)))
 (let ((?x25585 (* l_0_9_181 l_0_9_181)))
 (let ((?x25583 (* l_0_9_180 l_0_9_180)))
 (let ((?x25581 (* l_0_9_179 l_0_9_179)))
 (let ((?x25579 (* l_0_9_162 l_0_9_162)))
 (let ((?x10644 (* l_0_9_161 l_0_9_161)))
 (let ((?x10641 (* l_0_9_160 l_0_9_160)))
 (let ((?x10628 (* l_0_9_159 l_0_9_159)))
 (let ((?x10624 (* l_0_9_158 l_0_9_158)))
 (let ((?x10671 (* l_0_9_120 l_0_9_120)))
 (let ((?x10672 (* l_0_9_119 l_0_9_119)))
 (let ((?x10667 (* l_0_9_118 l_0_9_118)))
 (let ((?x10669 (+ (+ (+ (* l_0_9_116 l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x10667) ?x10672)))
 (let ((?x25582 (- (+ (+ (+ (+ (+ (+ ?x10669 ?x10671) ?x10624) ?x10628) ?x10641) ?x10644) ?x25579) ?x25581)))
 (let ((?x25596 (- (- (- (- (- (- (- ?x25582 ?x25583) ?x25585) ?x25587) ?x25589) ?x25591) ?x25593) ?x25595)))
 (= (- (- ?x25596 ?x25597) ?x25599) 0.0)))))))))))))))))))))))
(assert
 (let ((?x25662 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x25659 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x25656 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x25653 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x25650 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x25647 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x25644 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x25641 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x25638 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x25635 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x24078 (* l_0_9_141 l_0_9_141)))
 (let ((?x24076 (* l_0_9_140 l_0_9_140)))
 (let ((?x24072 (* l_0_9_139 l_0_9_139)))
 (let ((?x24070 (* l_0_9_138 l_0_9_138)))
 (let ((?x24068 (* l_0_9_137 l_0_9_137)))
 (let ((?x25627 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x25624 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x25621 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x25618 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x25615 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x10777 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x23364 (* 2.0 l_0_9_103)))
 (let ((?x10765 (* ?x23364 l_0_9_98)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x10763 (* ?x23361 l_0_9_97)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x10747 (* ?x23358 l_0_9_96)))
 (let ((?x25613 (- (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_95) ?x10747) ?x10763) ?x10765) ?x10777)))
 (let ((?x25630 (- (- (+ (+ (+ (+ (+ ?x25613 ?x25615) ?x25618) ?x25621) ?x25624) ?x25627) ?x24068) ?x24070)))
 (let ((?x25645 (+ (+ (+ (+ (- (- (- ?x25630 ?x24072) ?x24076) ?x24078) ?x25635) ?x25638) ?x25641) ?x25644)))
 (= (- (- (- (- (- (+ ?x25645 ?x25647) ?x25650) ?x25653) ?x25656) ?x25659) ?x25662) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x25777 (* l_0_9_189 l_0_9_189)))
 (let ((?x25775 (* l_0_9_188 l_0_9_188)))
 (let ((?x25773 (* l_0_9_187 l_0_9_187)))
 (let ((?x25771 (* l_0_9_186 l_0_9_186)))
 (let ((?x25769 (* l_0_9_185 l_0_9_185)))
 (let ((?x25767 (* l_0_9_184 l_0_9_184)))
 (let ((?x25765 (* l_0_9_168 l_0_9_168)))
 (let ((?x25763 (* l_0_9_167 l_0_9_167)))
 (let ((?x25761 (* l_0_9_166 l_0_9_166)))
 (let ((?x25759 (* l_0_9_165 l_0_9_165)))
 (let ((?x25757 (* l_0_9_164 l_0_9_164)))
 (let ((?x25755 (* l_0_9_163 l_0_9_163)))
 (let ((?x24219 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x24216 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x24210 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x24207 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x24204 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x25748 (* l_0_9_126 l_0_9_126)))
 (let ((?x25746 (* l_0_9_125 l_0_9_125)))
 (let ((?x25744 (* l_0_9_124 l_0_9_124)))
 (let ((?x25742 (* l_0_9_123 l_0_9_123)))
 (let ((?x25740 (* l_0_9_122 l_0_9_122)))
 (let ((?x25738 (* l_0_9_121 l_0_9_121)))
 (let ((?x25736 (* l_0_9_105 l_0_9_105)))
 (let ((?x25734 (* l_0_9_104 l_0_9_104)))
 (let ((?x25732 (* l_0_9_103 l_0_9_103)))
 (let ((?x25730 (* l_0_9_102 l_0_9_102)))
 (let ((?x25731 (- (- (* (- l_0_9_100) l_0_9_100) (* l_0_9_101 l_0_9_101)) ?x25730)))
 (let ((?x25745 (+ (+ (+ (+ (- (- (- ?x25731 ?x25732) ?x25734) ?x25736) ?x25738) ?x25740) ?x25742) ?x25744)))
 (let ((?x25754 (- (- (- (- (- (+ (+ ?x25745 ?x25746) ?x25748) ?x24204) ?x24207) ?x24210) ?x24216) ?x24219)))
 (let ((?x25768 (- (+ (+ (+ (+ (+ (+ ?x25754 ?x25755) ?x25757) ?x25759) ?x25761) ?x25763) ?x25765) ?x25767)))
 (= (- (- (- (- (- ?x25768 ?x25769) ?x25771) ?x25773) ?x25775) ?x25777) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x23633 (* l_0_9_85 l_0_9_85)))
 (let ((?x23617 (* l_0_9_169 l_0_9_169)))
 (let ((?x25812 (+ (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_148 l_0_9_148)) ?x23617)))
 (= (+ ?x25812 ?x23633) 0.0)))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x23937 (* ?x22447 l_0_9_88)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x23915 (* ?x22406 l_0_9_172)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x23913 (* ?x22403 l_0_9_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_109) ?x23913) ?x23915) ?x23937) 0.0))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x22448 (* ?x22447 l_0_9_91)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x22407 (* ?x22406 l_0_9_175)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x22404 (* ?x22403 l_0_9_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x22404) ?x22407) ?x22448) 0.0))))))))
(assert
 (let ((?x22447 (* 2.0 l_0_9_85)))
 (let ((?x24131 (* ?x22447 l_0_9_95)))
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x24084 (* ?x22406 l_0_9_179)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x24080 (* ?x22403 l_0_9_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_116) ?x24080) ?x24084) ?x24131) 0.0))))))))
(assert
 (let ((?x22406 (* 2.0 l_0_9_169)))
 (let ((?x24226 (* ?x22406 l_0_9_184)))
 (let ((?x22403 (* 2.0 l_0_9_148)))
 (let ((?x24221 (* ?x22403 l_0_9_163)))
 (let ((?x22379 (* 2.0 l_0_9_106)))
 (let ((?x24194 (* ?x22379 l_0_9_121)))
 (= (+ (- (- (* (* 2.0 l_0_9_100) l_0_9_85) ?x24194) ?x24221) ?x24226) 0.0))))))))
(assert
 (let ((?x25407 (* l_0_9_90 l_0_9_90)))
 (let ((?x25405 (* l_0_9_89 l_0_9_89)))
 (let ((?x25403 (* l_0_9_88 l_0_9_88)))
 (let ((?x25395 (* l_0_9_174 l_0_9_174)))
 (let ((?x25393 (* l_0_9_173 l_0_9_173)))
 (let ((?x25391 (* l_0_9_172 l_0_9_172)))
 (let ((?x25389 (* l_0_9_153 l_0_9_153)))
 (let ((?x25387 (* l_0_9_152 l_0_9_152)))
 (let ((?x25385 (* l_0_9_151 l_0_9_151)))
 (let ((?x25383 (* l_0_9_111 l_0_9_111)))
 (let ((?x11117 (- (- (* (- l_0_9_109) l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x25383)))
 (let ((?x11180 (+ (+ (+ (+ (- (- (- ?x11117 ?x25385) ?x25387) ?x25389) ?x25391) ?x25393) ?x25395) ?x25403)))
 (= (+ (+ ?x11180 ?x25405) ?x25407) 0.0))))))))))))))
(assert
 (let ((?x23023 (* 2.0 l_0_9_90)))
 (let ((?x23024 (* ?x23023 l_0_9_93)))
 (let ((?x23020 (* 2.0 l_0_9_89)))
 (let ((?x23021 (* ?x23020 l_0_9_92)))
 (let ((?x23017 (* 2.0 l_0_9_88)))
 (let ((?x23018 (* ?x23017 l_0_9_91)))
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x23001 (* ?x23000 l_0_9_177)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x22998 (* ?x22997 l_0_9_176)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x22995 (* ?x22994 l_0_9_175)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x22992 (* ?x22991 l_0_9_156)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x22989 (* ?x22988 l_0_9_155)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x22986 (* ?x22985 l_0_9_154)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x22978 (* ?x22977 l_0_9_114)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x22975 (* ?x22974 l_0_9_113)))
 (let ((?x11243 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_112) ?x22975) ?x22978) ?x22986) ?x22989)))
 (let ((?x25845 (+ (+ (+ (+ (+ (+ (- ?x11243 ?x22992) ?x22995) ?x22998) ?x23001) ?x23018) ?x23021) ?x23024)))
 (= ?x25845 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23023 (* 2.0 l_0_9_90)))
 (let ((?x25445 (* ?x23023 l_0_9_97)))
 (let ((?x23020 (* 2.0 l_0_9_89)))
 (let ((?x25443 (* ?x23020 l_0_9_96)))
 (let ((?x23017 (* 2.0 l_0_9_88)))
 (let ((?x25441 (* ?x23017 l_0_9_95)))
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x25429 (* ?x23000 l_0_9_181)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x25427 (* ?x22997 l_0_9_180)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x25425 (* ?x22994 l_0_9_179)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x25423 (* ?x22991 l_0_9_160)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x10353 (* ?x22988 l_0_9_159)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x10396 (* ?x22985 l_0_9_158)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x10394 (* ?x22977 l_0_9_118)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x10402 (* ?x22974 l_0_9_117)))
 (let ((?x11329 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_116) ?x10402) ?x10394) ?x10396) ?x10353)))
 (let ((?x11254 (+ (+ (+ (+ (+ (+ (- ?x11329 ?x25423) ?x25425) ?x25427) ?x25429) ?x25441) ?x25443) ?x25445)))
 (= ?x11254 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23000 (* 2.0 l_0_9_174)))
 (let ((?x25500 (* ?x23000 l_0_9_186)))
 (let ((?x22997 (* 2.0 l_0_9_173)))
 (let ((?x25498 (* ?x22997 l_0_9_185)))
 (let ((?x22994 (* 2.0 l_0_9_172)))
 (let ((?x25496 (* ?x22994 l_0_9_184)))
 (let ((?x22991 (* 2.0 l_0_9_153)))
 (let ((?x25494 (* ?x22991 l_0_9_165)))
 (let ((?x22988 (* 2.0 l_0_9_152)))
 (let ((?x25492 (* ?x22988 l_0_9_164)))
 (let ((?x22985 (* 2.0 l_0_9_151)))
 (let ((?x25490 (* ?x22985 l_0_9_163)))
 (let ((?x22977 (* 2.0 l_0_9_111)))
 (let ((?x25485 (* ?x22977 l_0_9_123)))
 (let ((?x22974 (* 2.0 l_0_9_110)))
 (let ((?x25483 (* ?x22974 l_0_9_122)))
 (let ((?x22970 (* 2.0 l_0_9_109)))
 (let ((?x25481 (* ?x22970 l_0_9_121)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x25479 (* ?x23361 l_0_9_90)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x25477 (* ?x23358 l_0_9_89)))
 (let ((?x11488 (- (- (+ (+ (* (* 2.0 l_0_9_100) l_0_9_88) ?x25477) ?x25479) ?x25481) ?x25483)))
 (let ((?x11426 (+ (+ (+ (- (- (- (- ?x11488 ?x25485) ?x25490) ?x25492) ?x25494) ?x25496) ?x25498) ?x25500)))
 (= ?x11426 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23170 (* l_0_9_94 l_0_9_94)))
 (let ((?x23168 (* l_0_9_93 l_0_9_93)))
 (let ((?x23166 (* l_0_9_92 l_0_9_92)))
 (let ((?x23164 (* l_0_9_91 l_0_9_91)))
 (let ((?x23150 (* l_0_9_178 l_0_9_178)))
 (let ((?x23148 (* l_0_9_177 l_0_9_177)))
 (let ((?x23146 (* l_0_9_176 l_0_9_176)))
 (let ((?x23144 (* l_0_9_175 l_0_9_175)))
 (let ((?x23142 (* l_0_9_157 l_0_9_157)))
 (let ((?x23140 (* l_0_9_156 l_0_9_156)))
 (let ((?x23138 (* l_0_9_155 l_0_9_155)))
 (let ((?x23136 (* l_0_9_154 l_0_9_154)))
 (let ((?x23130 (* l_0_9_115 l_0_9_115)))
 (let ((?x23128 (* l_0_9_114 l_0_9_114)))
 (let ((?x11619 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x23128)))
 (let ((?x25850 (+ (+ (- (- (- (- (- ?x11619 ?x23130) ?x23136) ?x23138) ?x23140) ?x23142) ?x23144) ?x23146)))
 (= (+ (+ (+ (+ (+ (+ ?x25850 ?x23148) ?x23150) ?x23164) ?x23166) ?x23168) ?x23170) 0.0))))))))))))))))))
(assert
 (let ((?x23287 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x23284 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x23281 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x23278 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x23264 (* 2.0 l_0_9_178)))
 (let ((?x23265 (* ?x23264 l_0_9_182)))
 (let ((?x23261 (* 2.0 l_0_9_177)))
 (let ((?x23262 (* ?x23261 l_0_9_181)))
 (let ((?x23258 (* 2.0 l_0_9_176)))
 (let ((?x23259 (* ?x23258 l_0_9_180)))
 (let ((?x23255 (* 2.0 l_0_9_175)))
 (let ((?x23256 (* ?x23255 l_0_9_179)))
 (let ((?x23252 (* 2.0 l_0_9_157)))
 (let ((?x23253 (* ?x23252 l_0_9_161)))
 (let ((?x23249 (* 2.0 l_0_9_156)))
 (let ((?x23250 (* ?x23249 l_0_9_160)))
 (let ((?x23246 (* 2.0 l_0_9_155)))
 (let ((?x23247 (* ?x23246 l_0_9_159)))
 (let ((?x23243 (* 2.0 l_0_9_154)))
 (let ((?x23244 (* ?x23243 l_0_9_158)))
 (let ((?x23232 (* 2.0 l_0_9_115)))
 (let ((?x23233 (* ?x23232 l_0_9_119)))
 (let ((?x23229 (* 2.0 l_0_9_114)))
 (let ((?x23230 (* ?x23229 l_0_9_118)))
 (let ((?x23226 (* 2.0 l_0_9_113)))
 (let ((?x23227 (* ?x23226 l_0_9_117)))
 (let ((?x11684 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_116) ?x23227) ?x23230) ?x23233) ?x23244)))
 (let ((?x25873 (+ (+ (+ (+ (- (- (- ?x11684 ?x23247) ?x23250) ?x23253) ?x23256) ?x23259) ?x23262) ?x23265)))
 (= (+ (+ (+ (+ ?x25873 ?x23278) ?x23281) ?x23284) ?x23287) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x23264 (* 2.0 l_0_9_178)))
 (let ((?x23405 (* ?x23264 l_0_9_187)))
 (let ((?x23261 (* 2.0 l_0_9_177)))
 (let ((?x23403 (* ?x23261 l_0_9_186)))
 (let ((?x23258 (* 2.0 l_0_9_176)))
 (let ((?x23401 (* ?x23258 l_0_9_185)))
 (let ((?x23255 (* 2.0 l_0_9_175)))
 (let ((?x23399 (* ?x23255 l_0_9_184)))
 (let ((?x23252 (* 2.0 l_0_9_157)))
 (let ((?x23397 (* ?x23252 l_0_9_166)))
 (let ((?x23249 (* 2.0 l_0_9_156)))
 (let ((?x23395 (* ?x23249 l_0_9_165)))
 (let ((?x23246 (* 2.0 l_0_9_155)))
 (let ((?x23393 (* ?x23246 l_0_9_164)))
 (let ((?x23243 (* 2.0 l_0_9_154)))
 (let ((?x23391 (* ?x23243 l_0_9_163)))
 (let ((?x23232 (* 2.0 l_0_9_115)))
 (let ((?x23375 (* ?x23232 l_0_9_124)))
 (let ((?x23229 (* 2.0 l_0_9_114)))
 (let ((?x23373 (* ?x23229 l_0_9_123)))
 (let ((?x23226 (* 2.0 l_0_9_113)))
 (let ((?x23371 (* ?x23226 l_0_9_122)))
 (let ((?x7209 (* 2.0 l_0_9_112)))
 (let ((?x23369 (* ?x7209 l_0_9_121)))
 (let ((?x23364 (* 2.0 l_0_9_103)))
 (let ((?x23365 (* ?x23364 l_0_9_94)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x23362 (* ?x23361 l_0_9_93)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x23359 (* ?x23358 l_0_9_92)))
 (let ((?x11757 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_91) ?x23359) ?x23362) ?x23365) ?x23369)))
 (let ((?x25885 (- (- (- (- (- (- (- ?x11757 ?x23371) ?x23373) ?x23375) ?x23391) ?x23393) ?x23395) ?x23397)))
 (= (+ (+ (+ (+ ?x25885 ?x23399) ?x23401) ?x23403) ?x23405) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25599 (* l_0_9_99 l_0_9_99)))
 (let ((?x25597 (* l_0_9_98 l_0_9_98)))
 (let ((?x25595 (* l_0_9_97 l_0_9_97)))
 (let ((?x25593 (* l_0_9_96 l_0_9_96)))
 (let ((?x25591 (* l_0_9_95 l_0_9_95)))
 (let ((?x25589 (* l_0_9_183 l_0_9_183)))
 (let ((?x25587 (* l_0_9_182 l_0_9_182)))
 (let ((?x25585 (* l_0_9_181 l_0_9_181)))
 (let ((?x25583 (* l_0_9_180 l_0_9_180)))
 (let ((?x25581 (* l_0_9_179 l_0_9_179)))
 (let ((?x25579 (* l_0_9_162 l_0_9_162)))
 (let ((?x10644 (* l_0_9_161 l_0_9_161)))
 (let ((?x10641 (* l_0_9_160 l_0_9_160)))
 (let ((?x10628 (* l_0_9_159 l_0_9_159)))
 (let ((?x10624 (* l_0_9_158 l_0_9_158)))
 (let ((?x10671 (* l_0_9_120 l_0_9_120)))
 (let ((?x10672 (* l_0_9_119 l_0_9_119)))
 (let ((?x10667 (* l_0_9_118 l_0_9_118)))
 (let ((?x11933 (- (- (* (- l_0_9_116) l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x10667)))
 (let ((?x11779 (- (- (- (- (- (- (- ?x11933 ?x10672) ?x10671) ?x10624) ?x10628) ?x10641) ?x10644) ?x25579)))
 (let ((?x25900 (+ (+ (+ (+ (+ (+ (+ ?x11779 ?x25581) ?x25583) ?x25585) ?x25587) ?x25589) ?x25591) ?x25593)))
 (= (+ (+ (+ ?x25900 ?x25595) ?x25597) ?x25599) 0.0)))))))))))))))))))))))
(assert
 (let ((?x25662 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x25659 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x25656 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x25653 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x25650 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x25647 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x25644 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x25641 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x25638 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x25635 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x25627 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x25624 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x25621 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x25618 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x25615 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x10777 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x23364 (* 2.0 l_0_9_103)))
 (let ((?x10765 (* ?x23364 l_0_9_98)))
 (let ((?x23361 (* 2.0 l_0_9_102)))
 (let ((?x10763 (* ?x23361 l_0_9_97)))
 (let ((?x23358 (* 2.0 l_0_9_101)))
 (let ((?x10747 (* ?x23358 l_0_9_96)))
 (let ((?x12049 (+ (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_95) ?x10747) ?x10763) ?x10765) ?x10777)))
 (let ((?x25913 (- (- (- (- (- (- (- ?x12049 ?x25615) ?x25618) ?x25621) ?x25624) ?x25627) ?x25635) ?x25638)))
 (let ((?x25920 (+ (+ (+ (+ (- (- (- ?x25913 ?x25641) ?x25644) ?x25647) ?x25650) ?x25653) ?x25656) ?x25659)))
 (= (+ ?x25920 ?x25662) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x25777 (* l_0_9_189 l_0_9_189)))
 (let ((?x25775 (* l_0_9_188 l_0_9_188)))
 (let ((?x25773 (* l_0_9_187 l_0_9_187)))
 (let ((?x25771 (* l_0_9_186 l_0_9_186)))
 (let ((?x25769 (* l_0_9_185 l_0_9_185)))
 (let ((?x25767 (* l_0_9_184 l_0_9_184)))
 (let ((?x25765 (* l_0_9_168 l_0_9_168)))
 (let ((?x25763 (* l_0_9_167 l_0_9_167)))
 (let ((?x25761 (* l_0_9_166 l_0_9_166)))
 (let ((?x25759 (* l_0_9_165 l_0_9_165)))
 (let ((?x25757 (* l_0_9_164 l_0_9_164)))
 (let ((?x25755 (* l_0_9_163 l_0_9_163)))
 (let ((?x25748 (* l_0_9_126 l_0_9_126)))
 (let ((?x25746 (* l_0_9_125 l_0_9_125)))
 (let ((?x25744 (* l_0_9_124 l_0_9_124)))
 (let ((?x25742 (* l_0_9_123 l_0_9_123)))
 (let ((?x25740 (* l_0_9_122 l_0_9_122)))
 (let ((?x25738 (* l_0_9_121 l_0_9_121)))
 (let ((?x25736 (* l_0_9_105 l_0_9_105)))
 (let ((?x25734 (* l_0_9_104 l_0_9_104)))
 (let ((?x25732 (* l_0_9_103 l_0_9_103)))
 (let ((?x25730 (* l_0_9_102 l_0_9_102)))
 (let ((?x12369 (+ (+ (+ (* l_0_9_100 l_0_9_100) (* l_0_9_101 l_0_9_101)) ?x25730) ?x25732)))
 (let ((?x12316 (- (- (- (- (- (+ (+ ?x12369 ?x25734) ?x25736) ?x25738) ?x25740) ?x25742) ?x25744) ?x25746)))
 (let ((?x12192 (- (- (- (- (- (- (- ?x12316 ?x25748) ?x25755) ?x25757) ?x25759) ?x25761) ?x25763) ?x25765)))
 (= (+ (+ (+ (+ (+ (+ ?x12192 ?x25767) ?x25769) ?x25771) ?x25773) ?x25775) ?x25777) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x24348 (* l_0_9_147 l_0_9_147)))
 (let ((?x24346 (* l_0_9_146 l_0_9_146)))
 (let ((?x24344 (* l_0_9_145 l_0_9_145)))
 (let ((?x24342 (* l_0_9_144 l_0_9_144)))
 (let ((?x12610 (- (- (* (- l_0_9_142) l_0_9_142) (* l_0_9_143 l_0_9_143)) ?x24342)))
 (= (- (- (- ?x12610 ?x24344) ?x24346) ?x24348) 0.0)))))))
(assert
 (>= l_0_9_1 0.0))
(assert
 (>= l_0_9_3 0.0))
(assert
 (>= l_0_9_6 0.0))
(assert
 (>= l_0_9_10 0.0))
(assert
 (>= l_0_9_15 0.0))
(assert
 (>= l_0_9_21 0.0))
(assert
 (>= l_0_9_22 0.0))
(assert
 (>= l_0_9_24 0.0))
(assert
 (>= l_0_9_27 0.0))
(assert
 (>= l_0_9_31 0.0))
(assert
 (>= l_0_9_36 0.0))
(assert
 (>= l_0_9_42 0.0))
(assert
 (>= l_0_9_43 0.0))
(assert
 (>= l_0_9_45 0.0))
(assert
 (>= l_0_9_48 0.0))
(assert
 (>= l_0_9_52 0.0))
(assert
 (>= l_0_9_57 0.0))
(assert
 (>= l_0_9_63 0.0))
(assert
 (>= l_0_9_64 0.0))
(assert
 (>= l_0_9_66 0.0))
(assert
 (>= l_0_9_69 0.0))
(assert
 (>= l_0_9_73 0.0))
(assert
 (>= l_0_9_78 0.0))
(assert
 (>= l_0_9_84 0.0))
(assert
 (>= l_0_9_85 0.0))
(assert
 (>= l_0_9_87 0.0))
(assert
 (>= l_0_9_90 0.0))
(assert
 (>= l_0_9_94 0.0))
(assert
 (>= l_0_9_99 0.0))
(assert
 (>= l_0_9_105 0.0))
(assert
 (>= l_0_9_106 0.0))
(assert
 (>= l_0_9_108 0.0))
(assert
 (>= l_0_9_111 0.0))
(assert
 (>= l_0_9_115 0.0))
(assert
 (>= l_0_9_120 0.0))
(assert
 (>= l_0_9_126 0.0))
(assert
 (>= l_0_9_127 0.0))
(assert
 (>= l_0_9_129 0.0))
(assert
 (>= l_0_9_132 0.0))
(assert
 (>= l_0_9_136 0.0))
(assert
 (>= l_0_9_141 0.0))
(assert
 (>= l_0_9_147 0.0))
(assert
 (>= l_0_9_148 0.0))
(assert
 (>= l_0_9_150 0.0))
(assert
 (>= l_0_9_153 0.0))
(assert
 (>= l_0_9_157 0.0))
(assert
 (>= l_0_9_162 0.0))
(assert
 (>= l_0_9_168 0.0))
(assert
 (>= l_0_9_169 0.0))
(assert
 (>= l_0_9_171 0.0))
(assert
 (>= l_0_9_174 0.0))
(assert
 (>= l_0_9_178 0.0))
(assert
 (>= l_0_9_183 0.0))
(assert
 (>= l_0_9_189 0.0))
(assert
 (>= l_0_9_190 0.0))
(assert
 (>= l_0_9_192 0.0))
(assert
 (>= l_0_9_195 0.0))
(assert
 (>= l_0_9_199 0.0))
(assert
 (>= l_0_9_204 0.0))
(assert
 (>= l_0_9_210 0.0))
(assert
 (>= l_0_9_211 0.0))
(assert
 (>= l_0_9_213 0.0))
(assert
 (>= l_0_9_216 0.0))
(assert
 (>= l_0_9_220 0.0))
(assert
 (>= l_0_9_225 0.0))
(assert
 (>= l_0_9_231 0.0))
(assert
 (>= l_0_9_232 0.0))
(assert
 (>= l_0_9_234 0.0))
(assert
 (>= l_0_9_237 0.0))
(assert
 (>= l_0_9_241 0.0))
(assert
 (>= l_0_9_246 0.0))
(assert
 (>= l_0_9_252 0.0))
(assert
 (let ((?x25995 (* l_0_10_3 l_0_10_3)))
 (let ((?x25996 (* 6.0 ?x25995)))
 (let ((?x25993 (* l_0_10_255 l_0_10_255)))
 (let ((?x25991 (* l_0_10_254 l_0_10_254)))
 (let ((?x25989 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x25986 (* l_0_10_234 l_0_10_234)))
 (let ((?x25984 (* l_0_10_233 l_0_10_233)))
 (let ((?x25982 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x25979 (* l_0_10_213 l_0_10_213)))
 (let ((?x25977 (* l_0_10_212 l_0_10_212)))
 (let ((?x25974 (* l_0_10_2 l_0_10_2)))
 (let ((?x25975 (* 6.0 ?x25974)))
 (let ((?x25972 (* l_0_10_192 l_0_10_192)))
 (let ((?x25980 (- (- (+ (- (- _a_6_ (* l_0_10_191 l_0_10_191)) ?x25972) ?x25975) ?x25977) ?x25979)))
 (let ((?x25997 (+ (- (- (- (- (- (- ?x25980 ?x25982) ?x25984) ?x25986) ?x25989) ?x25991) ?x25993) ?x25996)))
 (let ((?x26003 (- (- ?x25997 (* (* 1.0 l_0_10_44) l_0_10_44)) (* (* 1.0 l_0_10_45) l_0_10_45))))
 (let ((?x26009 (+ (+ ?x26003 (* 1.0 (* l_0_10_65 l_0_10_65))) (* 1.0 (* l_0_10_66 l_0_10_66)))))
 (= (- ?x26009 7.0) 0.0)))))))))))))))))))
(assert
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x26136 (* ?x26135 l_0_10_72)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x26133 (* ?x26132 l_0_10_71)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x26130 (* ?x26129 l_0_10_70)))
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x26127 (* ?x26126 l_0_10_71)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x26124 (* ?x26123 l_0_10_70)))
 (let ((?x26121 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x26118 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x26115 (* ?x26114 l_0_10_51)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x26112 (* ?x26111 l_0_10_50)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x26109 (* ?x26108 l_0_10_49)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x26106 (* ?x26105 l_0_10_50)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x26103 (* ?x26102 l_0_10_49)))
 (let ((?x26100 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x26094 (* ?x26093 l_0_10_30)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x26091 (* ?x26090 l_0_10_29)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x26079 (* ?x26078 l_0_10_28)))
 (let ((?x26047 (- (- _a_7_ (* (* 2.0 l_0_10_193) l_0_10_196)) (* (* 2.0 l_0_10_194) l_0_10_197))))
 (let ((?x26053 (- (- ?x26047 (* (* 2.0 l_0_10_195) l_0_10_198)) (* (* 2.0 l_0_10_2) l_0_10_4))))
 (let ((?x26059 (- (- ?x26053 (* (* 2.0 l_0_10_214) l_0_10_217)) (* (* 2.0 l_0_10_215) l_0_10_218))))
 (let ((?x26065 (+ (- ?x26059 (* (* 2.0 l_0_10_216) l_0_10_219)) (* (* 2.0 l_0_10_23) l_0_10_25))))
 (let ((?x26071 (- (- ?x26065 (* (* 2.0 l_0_10_235) l_0_10_238)) (* (* 2.0 l_0_10_236) l_0_10_239))))
 (let ((?x26077 (+ (- ?x26071 (* (* 2.0 l_0_10_237) l_0_10_240)) (* (* 2.0 l_0_10_24) l_0_10_26))))
 (let ((?x26086 (- (- (- ?x26077 ?x26079) (* (* 2.0 l_0_10_256) l_0_10_259)) (* (* 2.0 l_0_10_257) l_0_10_260))))
 (let ((?x26098 (- (- (- (- ?x26086 (* (* 2.0 l_0_10_258) l_0_10_261)) ?x26091) ?x26094) (* (* 2.0 l_0_10_3) l_0_10_5))))
 (let ((?x26119 (+ (- (- (- (+ (+ (+ ?x26098 ?x26100) ?x26103) ?x26106) ?x26109) ?x26112) ?x26115) ?x26118)))
 (= (+ (+ (+ (- (- (+ ?x26119 ?x26121) ?x26124) ?x26127) ?x26130) ?x26133) ?x26136) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x26127 (* ?x26126 l_0_10_71)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x26124 (* ?x26123 l_0_10_70)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x26106 (* ?x26105 l_0_10_50)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x26103 (* ?x26102 l_0_10_49)))
 (let ((?x25995 (* l_0_10_3 l_0_10_3)))
 (let ((?x26255 (* 12.0 l_0_10_3)))
 (let ((?x26256 (* ?x26255 l_0_10_8)))
 (let ((?x12670 (* l_0_10_24 l_0_10_24)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x26246 (* ?x26245 l_0_10_29)))
 (let ((?x26020 (* l_0_10_23 l_0_10_23)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x26236 (* ?x26235 l_0_10_28)))
 (let ((?x25974 (* l_0_10_2 l_0_10_2)))
 (let ((?x26225 (* 12.0 l_0_10_2)))
 (let ((?x26226 (* ?x26225 l_0_10_7)))
 (let ((?x26224 (- (- _a_8_ (* (* 2.0 l_0_10_191) l_0_10_196)) (* (* 2.0 l_0_10_192) l_0_10_197))))
 (let ((?x26234 (- (- (- (+ ?x26224 ?x26226) ?x25974) (* (* 2.0 l_0_10_212) l_0_10_217)) (* (* 2.0 l_0_10_213) l_0_10_218))))
 (let ((?x26244 (- (- (+ (- ?x26234 ?x26236) ?x26020) (* (* 2.0 l_0_10_233) l_0_10_238)) (* (* 2.0 l_0_10_234) l_0_10_239))))
 (let ((?x26254 (- (- (+ (- ?x26244 ?x26246) ?x12670) (* (* 2.0 l_0_10_254) l_0_10_259)) (* (* 2.0 l_0_10_255) l_0_10_260))))
 (= (+ (+ (- (- (- (+ ?x26254 ?x26256) ?x25995) ?x26103) ?x26106) ?x26124) ?x26127) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x26363 (* ?x26126 l_0_10_68)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x26361 (* ?x26123 l_0_10_67)))
 (let ((?x26358 (* l_0_10_6 l_0_10_6)))
 (let ((?x26359 (* 6.0 ?x26358)))
 (let ((?x26355 (* l_0_10_5 l_0_10_5)))
 (let ((?x26356 (* 6.0 ?x26355)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x26344 (* ?x26105 l_0_10_47)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x26342 (* ?x26102 l_0_10_46)))
 (let ((?x26339 (* l_0_10_4 l_0_10_4)))
 (let ((?x26340 (* 6.0 ?x26339)))
 (let ((?x26337 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x26334 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x26331 (* l_0_10_258 l_0_10_258)))
 (let ((?x26329 (* l_0_10_257 l_0_10_257)))
 (let ((?x26327 (* l_0_10_256 l_0_10_256)))
 (let ((?x26325 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x26322 (* l_0_10_237 l_0_10_237)))
 (let ((?x26320 (* l_0_10_236 l_0_10_236)))
 (let ((?x26318 (* l_0_10_235 l_0_10_235)))
 (let ((?x26316 (* l_0_10_216 l_0_10_216)))
 (let ((?x26314 (* l_0_10_215 l_0_10_215)))
 (let ((?x26312 (* l_0_10_214 l_0_10_214)))
 (let ((?x26310 (* l_0_10_195 l_0_10_195)))
 (let ((?x26308 (* l_0_10_194 l_0_10_194)))
 (let ((?x26315 (- (- (- (- (- _a_9_ (* l_0_10_193 l_0_10_193)) ?x26308) ?x26310) ?x26312) ?x26314)))
 (let ((?x26330 (- (- (- (- (- (- (- ?x26315 ?x26316) ?x26318) ?x26320) ?x26322) ?x26325) ?x26327) ?x26329)))
 (let ((?x26348 (- (+ (+ (+ (- (- (- ?x26330 ?x26331) ?x26334) ?x26337) ?x26340) ?x26342) ?x26344) (* (* 1.0 l_0_10_46) l_0_10_46))))
 (let ((?x26354 (- (- ?x26348 (* (* 1.0 l_0_10_47) l_0_10_47)) (* (* 1.0 l_0_10_48) l_0_10_48))))
 (let ((?x26367 (+ (- (- (+ (+ ?x26354 ?x26356) ?x26359) ?x26361) ?x26363) (* 1.0 (* l_0_10_67 l_0_10_67)))))
 (let ((?x26373 (+ (+ ?x26367 (* 1.0 (* l_0_10_68 l_0_10_68))) (* 1.0 (* l_0_10_69 l_0_10_69)))))
 (= ?x26373 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26500 (* l_0_10_9 l_0_10_9)))
 (let ((?x26501 (* 6.0 ?x26500)))
 (let ((?x26497 (* l_0_10_8 l_0_10_8)))
 (let ((?x26498 (* 6.0 ?x26497)))
 (let ((?x26482 (* l_0_10_7 l_0_10_7)))
 (let ((?x26483 (* 6.0 ?x26482)))
 (let ((?x26468 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x26465 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x26460 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x26457 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x26454 (* l_0_10_262 l_0_10_262)))
 (let ((?x26452 (* l_0_10_261 l_0_10_261)))
 (let ((?x26450 (* l_0_10_260 l_0_10_260)))
 (let ((?x26448 (* l_0_10_259 l_0_10_259)))
 (let ((?x26446 (* l_0_10_241 l_0_10_241)))
 (let ((?x26444 (* l_0_10_240 l_0_10_240)))
 (let ((?x26440 (* l_0_10_239 l_0_10_239)))
 (let ((?x26438 (* l_0_10_238 l_0_10_238)))
 (let ((?x26434 (* l_0_10_220 l_0_10_220)))
 (let ((?x26432 (* l_0_10_219 l_0_10_219)))
 (let ((?x26430 (* l_0_10_218 l_0_10_218)))
 (let ((?x26428 (* l_0_10_217 l_0_10_217)))
 (let ((?x26424 (* l_0_10_199 l_0_10_199)))
 (let ((?x26422 (* l_0_10_198 l_0_10_198)))
 (let ((?x26420 (* l_0_10_197 l_0_10_197)))
 (let ((?x26418 (* l_0_10_196 l_0_10_196)))
 (let ((?x26423 (- (- (- (+ _a_10_ (* 6.0 (* l_0_10_10 l_0_10_10))) ?x26418) ?x26420) ?x26422)))
 (let ((?x26431 (- (- (- (- ?x26423 ?x26424) (* (* 2.0 l_0_10_2) l_0_10_7)) ?x26428) ?x26430)))
 (let ((?x26439 (- (+ (- (- ?x26431 ?x26432) ?x26434) (* (* 2.0 l_0_10_23) l_0_10_28)) ?x26438)))
 (let ((?x26447 (- (- (+ (- ?x26439 ?x26440) (* (* 2.0 l_0_10_24) l_0_10_29)) ?x26444) ?x26446)))
 (let ((?x26463 (- (- (- (- (- (- (- ?x26447 ?x26448) ?x26450) ?x26452) ?x26454) ?x26457) ?x26460) (* (* 2.0 l_0_10_3) l_0_10_8))))
 (let ((?x26475 (- (- (- (- ?x26463 ?x26465) ?x26468) (* (* 1.0 l_0_10_49) l_0_10_49)) (* (* 1.0 l_0_10_50) l_0_10_50))))
 (let ((?x26481 (- (- ?x26475 (* (* 1.0 l_0_10_51) l_0_10_51)) (* (* 1.0 l_0_10_52) l_0_10_52))))
 (let ((?x26490 (+ (+ (+ ?x26481 ?x26483) (* 1.0 (* l_0_10_70 l_0_10_70))) (* 1.0 (* l_0_10_71 l_0_10_71)))))
 (let ((?x26496 (+ (+ ?x26490 (* 1.0 (* l_0_10_72 l_0_10_72))) (* 1.0 (* l_0_10_73 l_0_10_73)))))
 (= (+ (+ ?x26496 ?x26498) ?x26501) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26007 (* l_0_10_66 l_0_10_66)))
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x26363 (* ?x26126 l_0_10_68)))
 (let ((?x26004 (* l_0_10_65 l_0_10_65)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x26361 (* ?x26123 l_0_10_67)))
 (let ((?x12707 (* l_0_10_45 l_0_10_45)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x26344 (* ?x26105 l_0_10_47)))
 (let ((?x26029 (* l_0_10_44 l_0_10_44)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x26342 (* ?x26102 l_0_10_46)))
 (let ((?x26255 (* 12.0 l_0_10_3)))
 (let ((?x26574 (* ?x26255 l_0_10_5)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x26568 (* ?x26245 l_0_10_26)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x26562 (* ?x26235 l_0_10_25)))
 (let ((?x26225 (* 12.0 l_0_10_2)))
 (let ((?x26556 (* ?x26225 l_0_10_4)))
 (let ((?x26555 (- (- _a_11_ (* (* 2.0 l_0_10_191) l_0_10_193)) (* (* 2.0 l_0_10_192) l_0_10_194))))
 (let ((?x26561 (- (- (+ ?x26555 ?x26556) (* (* 2.0 l_0_10_212) l_0_10_214)) (* (* 2.0 l_0_10_213) l_0_10_215))))
 (let ((?x26567 (- (- (- ?x26561 ?x26562) (* (* 2.0 l_0_10_233) l_0_10_235)) (* (* 2.0 l_0_10_234) l_0_10_236))))
 (let ((?x26573 (- (- (- ?x26567 ?x26568) (* (* 2.0 l_0_10_254) l_0_10_256)) (* (* 2.0 l_0_10_255) l_0_10_257))))
 (let ((?x26581 (- (+ (+ (- (+ (- (+ ?x26573 ?x26574) ?x26342) ?x26029) ?x26344) ?x12707) ?x26361) ?x26004)))
 (= (- (+ ?x26581 ?x26363) ?x26007) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26007 (* l_0_10_66 l_0_10_66)))
 (let ((?x26645 (* 3.0 ?x26007)))
 (let ((?x26004 (* l_0_10_65 l_0_10_65)))
 (let ((?x26643 (* 3.0 ?x26004)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x26638 (* ?x26637 l_0_10_65)))
 (let ((?x26635 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (let ((?x26632 (* (* 3.0 l_0_10_44) l_0_10_44)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x26626 (* ?x26625 l_0_10_44)))
 (let ((?x26623 (* l_0_10_253 l_0_10_253)))
 (let ((?x26621 (* l_0_10_232 l_0_10_232)))
 (let ((?x26619 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x26616 (* ?x26615 l_0_10_23)))
 (let ((?x26613 (* l_0_10_211 l_0_10_211)))
 (let ((?x26611 (* l_0_10_190 l_0_10_190)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x26609 (* ?x26608 l_0_10_128)))
 (let ((?x26605 (* l_0_10_1 l_0_10_1)))
 (let ((?x26606 (* 6.0 ?x26605)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x26604 (* ?x26603 l_0_10_2)))
 (let ((?x26622 (- (- (- (- (- (+ (+ ?x26604 ?x26606) ?x26609) ?x26611) ?x26613) ?x26616) ?x26619) ?x26621)))
 (let ((?x26633 (- (- (- (- ?x26622 ?x26623) ?x26626) (* (* 1.0 l_0_10_43) l_0_10_43)) ?x26632)))
 (let ((?x26644 (+ (+ (+ (- ?x26633 ?x26635) ?x26638) (* 1.0 (* l_0_10_64 l_0_10_64))) ?x26643)))
 (= (- (+ ?x26644 ?x26645) 3.0) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x26007 (* l_0_10_66 l_0_10_66)))
 (let ((?x26645 (* 3.0 ?x26007)))
 (let ((?x26004 (* l_0_10_65 l_0_10_65)))
 (let ((?x26643 (* 3.0 ?x26004)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x26719 (* ?x26718 l_0_10_65)))
 (let ((?x26635 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (let ((?x26632 (* (* 3.0 l_0_10_44) l_0_10_44)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x26714 (* ?x26713 l_0_10_44)))
 (let ((?x25995 (* l_0_10_3 l_0_10_3)))
 (let ((?x25996 (* 6.0 ?x25995)))
 (let ((?x25989 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x25982 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x26616 (* ?x26615 l_0_10_23)))
 (let ((?x25974 (* l_0_10_2 l_0_10_2)))
 (let ((?x25975 (* 6.0 ?x25974)))
 (let ((?x26694 (* l_0_10_129 l_0_10_129)))
 (let ((?x26695 (+ (+ (* (* 12.0 l_0_10_1) l_0_10_2) (* l_0_10_128 l_0_10_128)) ?x26694)))
 (let ((?x26702 (- (+ (- ?x26695 (* (* 2.0 l_0_10_190) l_0_10_191)) ?x25975) (* (* 2.0 l_0_10_211) l_0_10_212))))
 (let ((?x26708 (- (- (- (- ?x26702 ?x26616) ?x25982) (* (* 2.0 l_0_10_232) l_0_10_233)) ?x25989)))
 (let ((?x26716 (- (- (+ (- ?x26708 (* (* 2.0 l_0_10_253) l_0_10_254)) ?x25996) ?x26714) ?x26632)))
 (= (- (+ (+ (+ (- ?x26716 ?x26635) ?x26719) ?x26643) ?x26645) 9.0) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x26769 (* ?x26768 l_0_10_71)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x26766 (* ?x26765 l_0_10_70)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x26763 (* ?x26637 l_0_10_70)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x26761 (* ?x26760 l_0_10_50)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x26758 (* ?x26757 l_0_10_49)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x26755 (* ?x26625 l_0_10_49)))
 (let ((?x13416 (* l_0_10_22 l_0_10_22)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x26752 (* ?x26615 l_0_10_28)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x26750 (* ?x26608 l_0_10_133)))
 (let ((?x26751 (+ (- (* (* 12.0 l_0_10_1) l_0_10_7) (* l_0_10_1 l_0_10_1)) ?x26750)))
 (let ((?x26767 (+ (+ (- (- (- (+ (- ?x26751 ?x26752) ?x13416) ?x26755) ?x26758) ?x26761) ?x26763) ?x26766)))
 (= (+ ?x26767 ?x26769) 0.0)))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x26769 (* ?x26768 l_0_10_71)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x26766 (* ?x26765 l_0_10_70)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x26831 (* ?x26718 l_0_10_70)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x26761 (* ?x26760 l_0_10_50)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x26758 (* ?x26757 l_0_10_49)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x26827 (* ?x26713 l_0_10_49)))
 (let ((?x26255 (* 12.0 l_0_10_3)))
 (let ((?x26256 (* ?x26255 l_0_10_8)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x26246 (* ?x26245 l_0_10_29)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x26236 (* ?x26235 l_0_10_28)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x26752 (* ?x26615 l_0_10_28)))
 (let ((?x26225 (* 12.0 l_0_10_2)))
 (let ((?x26226 (* ?x26225 l_0_10_7)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x26809 (* ?x26808 l_0_10_134)))
 (let ((?x26797 (* 2.0 l_0_10_128)))
 (let ((?x26806 (* ?x26797 l_0_10_133)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x26748 (* ?x26603 l_0_10_7)))
 (let ((?x26812 (- (+ (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_2) ?x26748) ?x26806) ?x26809) (* (* 2.0 l_0_10_190) l_0_10_196))))
 (let ((?x26818 (+ (- (+ ?x26812 ?x26226) (* (* 2.0 l_0_10_211) l_0_10_217)) (* (* 2.0 l_0_10_22) l_0_10_23))))
 (let ((?x26823 (- (- (- (- ?x26818 ?x26752) ?x26236) (* (* 2.0 l_0_10_232) l_0_10_238)) ?x26246)))
 (let ((?x26829 (- (- (+ (- ?x26823 (* (* 2.0 l_0_10_253) l_0_10_259)) ?x26256) ?x26827) ?x26758)))
 (= (+ (+ (+ (- ?x26829 ?x26761) ?x26831) ?x26766) ?x26769) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x26894 (* ?x26893 l_0_10_72)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x26891 (* ?x26890 l_0_10_71)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x26888 (* ?x26887 l_0_10_70)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x26831 (* ?x26718 l_0_10_70)))
 (let ((?x26121 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x26118 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x26882 (* ?x26881 l_0_10_51)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x26879 (* ?x26878 l_0_10_50)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x26827 (* ?x26713 l_0_10_49)))
 (let ((?x26100 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x26094 (* ?x26093 l_0_10_30)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x26091 (* ?x26090 l_0_10_29)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x26079 (* ?x26078 l_0_10_28)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x26866 (* ?x26865 l_0_10_135)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x26863 (* ?x26862 l_0_10_134)))
 (let ((?x26861 (+ (* (* (- 2.0) l_0_10_1) l_0_10_4) (* (* 2.0 l_0_10_130) l_0_10_133))))
 (let ((?x26870 (- (+ (+ (+ ?x26861 ?x26863) ?x26866) (* (* 2.0 l_0_10_22) l_0_10_25)) ?x26079)))
 (let ((?x26877 (- (+ (+ (- (- ?x26870 ?x26091) ?x26094) ?x26100) ?x26827) (* (* 6.0 l_0_10_46) l_0_10_49))))
 (let ((?x26892 (+ (+ (- (+ (+ (- (- ?x26877 ?x26879) ?x26882) ?x26118) ?x26121) ?x26831) ?x26888) ?x26891)))
 (= (+ ?x26892 ?x26894) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x26500 (* l_0_10_9 l_0_10_9)))
 (let ((?x26501 (* 6.0 ?x26500)))
 (let ((?x26497 (* l_0_10_8 l_0_10_8)))
 (let ((?x26498 (* 6.0 ?x26497)))
 (let ((?x26494 (* l_0_10_73 l_0_10_73)))
 (let ((?x26954 (* 3.0 ?x26494)))
 (let ((?x26491 (* l_0_10_72 l_0_10_72)))
 (let ((?x26952 (* 3.0 ?x26491)))
 (let ((?x26488 (* l_0_10_71 l_0_10_71)))
 (let ((?x26950 (* 3.0 ?x26488)))
 (let ((?x26485 (* l_0_10_70 l_0_10_70)))
 (let ((?x26948 (* 3.0 ?x26485)))
 (let ((?x26482 (* l_0_10_7 l_0_10_7)))
 (let ((?x26483 (* 6.0 ?x26482)))
 (let ((?x26945 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x26942 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x26939 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x26468 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x26465 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x26460 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x26457 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x26927 (* l_0_10_136 l_0_10_136)))
 (let ((?x26925 (* l_0_10_135 l_0_10_135)))
 (let ((?x26923 (* l_0_10_134 l_0_10_134)))
 (let ((?x26921 (* l_0_10_133 l_0_10_133)))
 (let ((?x13115 (* l_0_10_10 l_0_10_10)))
 (let ((?x26416 (* 6.0 ?x13115)))
 (let ((?x26926 (+ (+ (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) ?x26416) ?x26921) ?x26923) ?x26925)))
 (let ((?x26932 (- (- (+ (+ ?x26926 ?x26927) (* (* 2.0 l_0_10_22) l_0_10_28)) ?x26457) ?x26460)))
 (let ((?x26940 (- (- (- (- ?x26932 ?x26465) ?x26468) (* (* 3.0 l_0_10_49) l_0_10_49)) ?x26939)))
 (let ((?x26955 (+ (+ (+ (+ (+ (- (- ?x26940 ?x26942) ?x26945) ?x26483) ?x26948) ?x26950) ?x26952) ?x26954)))
 (= (+ (+ ?x26955 ?x26498) ?x26501) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x27034 (* ?x27033 l_0_10_91)))
 (let ((?x27030 (* 6.0 l_0_10_73)))
 (let ((?x27031 (* ?x27030 l_0_10_77)))
 (let ((?x27027 (* 6.0 l_0_10_72)))
 (let ((?x27028 (* ?x27027 l_0_10_76)))
 (let ((?x27024 (* 6.0 l_0_10_71)))
 (let ((?x27025 (* ?x27024 l_0_10_75)))
 (let ((?x27021 (* 6.0 l_0_10_70)))
 (let ((?x27022 (* ?x27021 l_0_10_74)))
 (let ((?x27018 (* 6.0 l_0_10_52)))
 (let ((?x27019 (* ?x27018 l_0_10_56)))
 (let ((?x27015 (* 6.0 l_0_10_51)))
 (let ((?x27016 (* ?x27015 l_0_10_55)))
 (let ((?x27012 (* 6.0 l_0_10_50)))
 (let ((?x27013 (* ?x27012 l_0_10_54)))
 (let ((?x27006 (* 12.0 l_0_10_31)))
 (let ((?x27007 (* ?x27006 l_0_10_35)))
 (let ((?x27003 (* 12.0 l_0_10_30)))
 (let ((?x27004 (* ?x27003 l_0_10_34)))
 (let ((?x27000 (* 12.0 l_0_10_29)))
 (let ((?x27001 (* ?x27000 l_0_10_33)))
 (let ((?x26997 (* 12.0 l_0_10_28)))
 (let ((?x26998 (* ?x26997 l_0_10_32)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x26993 (* ?x26992 l_0_10_175)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x26990 (* ?x26989 l_0_10_154)))
 (let ((?x26986 (* 2.0 l_0_10_136)))
 (let ((?x26987 (* ?x26986 l_0_10_140)))
 (let ((?x26983 (* 2.0 l_0_10_135)))
 (let ((?x26984 (* ?x26983 l_0_10_139)))
 (let ((?x26980 (* 2.0 l_0_10_134)))
 (let ((?x26981 (* ?x26980 l_0_10_138)))
 (let ((?x26977 (* 2.0 l_0_10_133)))
 (let ((?x26978 (* ?x26977 l_0_10_137)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x26975 (* ?x13605 l_0_10_9)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x13604 (* ?x13606 l_0_10_8)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x13268 (* ?x13602 l_0_10_7)))
 (let ((?x13620 (* 12.0 l_0_10_10)))
 (let ((?x11850 (* ?x13620 l_0_10_14)))
 (let ((?x13598 (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_11) ?x11850) (* (* 2.0 l_0_10_106) l_0_10_112))))
 (let ((?x26988 (+ (+ (+ (+ (+ (+ (+ ?x13598 ?x13268) ?x13604) ?x26975) ?x26978) ?x26981) ?x26984) ?x26987)))
 (let ((?x26999 (- (+ (- (+ ?x26988 ?x26990) ?x26993) (* (* 2.0 l_0_10_22) l_0_10_32)) ?x26998)))
 (let ((?x27011 (- (- (- (- ?x26999 ?x27001) ?x27004) ?x27007) (* (* 6.0 l_0_10_49) l_0_10_53))))
 (let ((?x27032 (+ (+ (+ (+ (- (- (- ?x27011 ?x27013) ?x27016) ?x27019) ?x27022) ?x27025) ?x27028) ?x27031)))
 (= (- ?x27032 ?x27034) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27030 (* 6.0 l_0_10_73)))
 (let ((?x27158 (* ?x27030 l_0_10_82)))
 (let ((?x27027 (* 6.0 l_0_10_72)))
 (let ((?x27156 (* ?x27027 l_0_10_81)))
 (let ((?x27024 (* 6.0 l_0_10_71)))
 (let ((?x27154 (* ?x27024 l_0_10_80)))
 (let ((?x27021 (* 6.0 l_0_10_70)))
 (let ((?x27152 (* ?x27021 l_0_10_79)))
 (let ((?x27018 (* 6.0 l_0_10_52)))
 (let ((?x27150 (* ?x27018 l_0_10_61)))
 (let ((?x27015 (* 6.0 l_0_10_51)))
 (let ((?x27148 (* ?x27015 l_0_10_60)))
 (let ((?x27012 (* 6.0 l_0_10_50)))
 (let ((?x27146 (* ?x27012 l_0_10_59)))
 (let ((?x27006 (* 12.0 l_0_10_31)))
 (let ((?x27142 (* ?x27006 l_0_10_40)))
 (let ((?x27003 (* 12.0 l_0_10_30)))
 (let ((?x27140 (* ?x27003 l_0_10_39)))
 (let ((?x27000 (* 12.0 l_0_10_29)))
 (let ((?x27138 (* ?x27000 l_0_10_38)))
 (let ((?x26997 (* 12.0 l_0_10_28)))
 (let ((?x27136 (* ?x26997 l_0_10_37)))
 (let ((?x27131 (* 12.0 l_0_10_18)))
 (let ((?x27132 (* ?x27131 l_0_10_9)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x27129 (* ?x27128 l_0_10_8)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x27126 (* ?x27125 l_0_10_7)))
 (let ((?x26986 (* 2.0 l_0_10_136)))
 (let ((?x27123 (* ?x26986 l_0_10_145)))
 (let ((?x26983 (* 2.0 l_0_10_135)))
 (let ((?x27121 (* ?x26983 l_0_10_144)))
 (let ((?x26980 (* 2.0 l_0_10_134)))
 (let ((?x27119 (* ?x26980 l_0_10_143)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x26750 (* ?x26608 l_0_10_133)))
 (let ((?x13620 (* 12.0 l_0_10_10)))
 (let ((?x27114 (* ?x13620 l_0_10_19)))
 (let ((?x27118 (+ (- (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x27114) ?x26750) (* (* 2.0 l_0_10_133) l_0_10_142))))
 (let ((?x27135 (+ (+ (+ (+ (+ (+ (+ ?x27118 ?x27119) ?x27121) ?x27123) ?x27126) ?x27129) ?x27132) (* (* 2.0 l_0_10_22) l_0_10_37))))
 (let ((?x27145 (- (- (- (- (- ?x27135 ?x27136) ?x27138) ?x27140) ?x27142) (* (* 6.0 l_0_10_49) l_0_10_58))))
 (let ((?x27159 (+ (+ (+ (+ (- (- (- ?x27145 ?x27146) ?x27148) ?x27150) ?x27152) ?x27154) ?x27156) ?x27158)))
 (= ?x27159 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x27311 (* ?x27310 l_0_10_92)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x27308 (* ?x27307 l_0_10_91)))
 (let ((?x27304 (* 2.0 l_0_10_73)))
 (let ((?x27305 (* ?x27304 l_0_10_77)))
 (let ((?x27301 (* 2.0 l_0_10_72)))
 (let ((?x27302 (* ?x27301 l_0_10_76)))
 (let ((?x27298 (* 2.0 l_0_10_71)))
 (let ((?x27299 (* ?x27298 l_0_10_75)))
 (let ((?x27295 (* 2.0 l_0_10_70)))
 (let ((?x27296 (* ?x27295 l_0_10_74)))
 (let ((?x27292 (* 2.0 l_0_10_52)))
 (let ((?x27293 (* ?x27292 l_0_10_56)))
 (let ((?x27289 (* 2.0 l_0_10_51)))
 (let ((?x27290 (* ?x27289 l_0_10_55)))
 (let ((?x27286 (* 2.0 l_0_10_50)))
 (let ((?x27287 (* ?x27286 l_0_10_54)))
 (let ((?x27283 (* 2.0 l_0_10_49)))
 (let ((?x27284 (* ?x27283 l_0_10_53)))
 (let ((?x27006 (* 12.0 l_0_10_31)))
 (let ((?x27007 (* ?x27006 l_0_10_35)))
 (let ((?x27003 (* 12.0 l_0_10_30)))
 (let ((?x27004 (* ?x27003 l_0_10_34)))
 (let ((?x27000 (* 12.0 l_0_10_29)))
 (let ((?x27001 (* ?x27000 l_0_10_33)))
 (let ((?x26997 (* 12.0 l_0_10_28)))
 (let ((?x26998 (* ?x26997 l_0_10_32)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x27225 (* ?x27224 l_0_10_176)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x27222 (* ?x27221 l_0_10_175)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x27219 (* ?x27218 l_0_10_155)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x27216 (* ?x27215 l_0_10_154)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x26975 (* ?x13605 l_0_10_9)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x13604 (* ?x13606 l_0_10_8)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x13268 (* ?x13602 l_0_10_7)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x27204 (* ?x27203 l_0_10_113)))
 (let ((?x13620 (* 12.0 l_0_10_10)))
 (let ((?x11850 (* ?x13620 l_0_10_14)))
 (let ((?x27208 (- (+ (+ ?x11850 (* (* 2.0 l_0_10_107) l_0_10_112)) ?x27204) (* (* 2.0 l_0_10_11) l_0_10_2))))
 (let ((?x27214 (+ (+ (- (+ ?x27208 ?x13268) (* (* 2.0 l_0_10_12) l_0_10_3)) ?x13604) ?x26975)))
 (let ((?x27229 (- (- (- (+ (+ ?x27214 ?x27216) ?x27219) ?x27222) ?x27225) (* (* 2.0 l_0_10_196) l_0_10_200))))
 (let ((?x27235 (- (- ?x27229 (* (* 2.0 l_0_10_197) l_0_10_201)) (* (* 2.0 l_0_10_198) l_0_10_202))))
 (let ((?x27241 (- (- ?x27235 (* (* 2.0 l_0_10_199) l_0_10_203)) (* (* 2.0 l_0_10_217) l_0_10_221))))
 (let ((?x27247 (- (- ?x27241 (* (* 2.0 l_0_10_218) l_0_10_222)) (* (* 2.0 l_0_10_219) l_0_10_223))))
 (let ((?x27252 (+ (- ?x27247 (* (* 2.0 l_0_10_220) l_0_10_224)) (* (* 2.0 l_0_10_23) l_0_10_32))))
 (let ((?x27258 (- (- ?x27252 (* (* 2.0 l_0_10_238) l_0_10_242)) (* (* 2.0 l_0_10_239) l_0_10_243))))
 (let ((?x27263 (- (+ ?x27258 (* (* 2.0 l_0_10_24) l_0_10_33)) (* (* 2.0 l_0_10_240) l_0_10_244))))
 (let ((?x27269 (- (- ?x27263 (* (* 2.0 l_0_10_241) l_0_10_245)) (* (* 2.0 l_0_10_259) l_0_10_263))))
 (let ((?x27275 (- (- ?x27269 (* (* 2.0 l_0_10_260) l_0_10_264)) (* (* 2.0 l_0_10_261) l_0_10_265))))
 (let ((?x27281 (- (- (- (- ?x27275 (* (* 2.0 l_0_10_262) l_0_10_266)) ?x26998) ?x27001) ?x27004)))
 (let ((?x27300 (+ (+ (- (- (- (- (- ?x27281 ?x27007) ?x27284) ?x27287) ?x27290) ?x27293) ?x27296) ?x27299)))
 (= (- (- (+ (+ ?x27300 ?x27302) ?x27305) ?x27308) ?x27311) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27304 (* 2.0 l_0_10_73)))
 (let ((?x27493 (* ?x27304 l_0_10_82)))
 (let ((?x27301 (* 2.0 l_0_10_72)))
 (let ((?x27491 (* ?x27301 l_0_10_81)))
 (let ((?x27298 (* 2.0 l_0_10_71)))
 (let ((?x27489 (* ?x27298 l_0_10_80)))
 (let ((?x27295 (* 2.0 l_0_10_70)))
 (let ((?x27487 (* ?x27295 l_0_10_79)))
 (let ((?x27292 (* 2.0 l_0_10_52)))
 (let ((?x27485 (* ?x27292 l_0_10_61)))
 (let ((?x27289 (* 2.0 l_0_10_51)))
 (let ((?x27483 (* ?x27289 l_0_10_60)))
 (let ((?x27286 (* 2.0 l_0_10_50)))
 (let ((?x27481 (* ?x27286 l_0_10_59)))
 (let ((?x27283 (* 2.0 l_0_10_49)))
 (let ((?x27479 (* ?x27283 l_0_10_58)))
 (let ((?x27006 (* 12.0 l_0_10_31)))
 (let ((?x27142 (* ?x27006 l_0_10_40)))
 (let ((?x27003 (* 12.0 l_0_10_30)))
 (let ((?x27140 (* ?x27003 l_0_10_39)))
 (let ((?x27000 (* 12.0 l_0_10_29)))
 (let ((?x27138 (* ?x27000 l_0_10_38)))
 (let ((?x26997 (* 12.0 l_0_10_28)))
 (let ((?x27136 (* ?x26997 l_0_10_37)))
 (let ((?x27131 (* 12.0 l_0_10_18)))
 (let ((?x27132 (* ?x27131 l_0_10_9)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x27129 (* ?x27128 l_0_10_8)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x27126 (* ?x27125 l_0_10_7)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x26809 (* ?x26808 l_0_10_134)))
 (let ((?x26797 (* 2.0 l_0_10_128)))
 (let ((?x26806 (* ?x26797 l_0_10_133)))
 (let ((?x13620 (* 12.0 l_0_10_10)))
 (let ((?x27114 (* ?x13620 l_0_10_19)))
 (let ((?x27433 (+ (- (- (- ?x27114 ?x26806) ?x26809) (* (* 2.0 l_0_10_16) l_0_10_2)) ?x27126)))
 (let ((?x27440 (- (+ (+ (- ?x27433 (* (* 2.0 l_0_10_17) l_0_10_3)) ?x27129) ?x27132) (* (* 2.0 l_0_10_196) l_0_10_205))))
 (let ((?x27444 (- (- ?x27440 (* (* 2.0 l_0_10_197) l_0_10_206)) (* (* 2.0 l_0_10_198) l_0_10_207))))
 (let ((?x27448 (- (- ?x27444 (* (* 2.0 l_0_10_199) l_0_10_208)) (* (* 2.0 l_0_10_217) l_0_10_226))))
 (let ((?x27452 (- (- ?x27448 (* (* 2.0 l_0_10_218) l_0_10_227)) (* (* 2.0 l_0_10_219) l_0_10_228))))
 (let ((?x27456 (+ (- ?x27452 (* (* 2.0 l_0_10_220) l_0_10_229)) (* (* 2.0 l_0_10_23) l_0_10_37))))
 (let ((?x27460 (- (- ?x27456 (* (* 2.0 l_0_10_238) l_0_10_247)) (* (* 2.0 l_0_10_239) l_0_10_248))))
 (let ((?x27464 (- (+ ?x27460 (* (* 2.0 l_0_10_24) l_0_10_38)) (* (* 2.0 l_0_10_240) l_0_10_249))))
 (let ((?x27468 (- (- ?x27464 (* (* 2.0 l_0_10_241) l_0_10_250)) (* (* 2.0 l_0_10_259) l_0_10_268))))
 (let ((?x27472 (- (- ?x27468 (* (* 2.0 l_0_10_260) l_0_10_269)) (* (* 2.0 l_0_10_261) l_0_10_270))))
 (let ((?x27477 (- (- (- (- ?x27472 (* (* 2.0 l_0_10_262) l_0_10_271)) ?x27136) ?x27138) ?x27140)))
 (let ((?x27490 (+ (+ (- (- (- (- (- ?x27477 ?x27142) ?x27479) ?x27481) ?x27483) ?x27485) ?x27487) ?x27489)))
 (= (+ (+ ?x27490 ?x27491) ?x27493) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x26136 (* ?x26135 l_0_10_72)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x26133 (* ?x26132 l_0_10_71)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x26130 (* ?x26129 l_0_10_70)))
 (let ((?x26358 (* l_0_10_6 l_0_10_6)))
 (let ((?x26355 (* l_0_10_5 l_0_10_5)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x26115 (* ?x26114 l_0_10_51)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x26112 (* ?x26111 l_0_10_50)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x26109 (* ?x26108 l_0_10_49)))
 (let ((?x26339 (* l_0_10_4 l_0_10_4)))
 (let ((?x13019 (* l_0_10_27 l_0_10_27)))
 (let ((?x14181 (- (+ (+ (* l_0_10_25 l_0_10_25) (* l_0_10_26 l_0_10_26)) ?x13019) ?x26339)))
 (let ((?x27541 (- (- (- (- (+ (+ (+ ?x14181 ?x26109) ?x26112) ?x26115) ?x26355) ?x26358) ?x26130) ?x26133)))
 (= (- ?x27541 ?x26136) 0.0))))))))))))))))))))
(assert
 (let ((?x26494 (* l_0_10_73 l_0_10_73)))
 (let ((?x26491 (* l_0_10_72 l_0_10_72)))
 (let ((?x26488 (* l_0_10_71 l_0_10_71)))
 (let ((?x26485 (* l_0_10_70 l_0_10_70)))
 (let ((?x13269 (* l_0_10_52 l_0_10_52)))
 (let ((?x26545 (* l_0_10_51 l_0_10_51)))
 (let ((?x26541 (* l_0_10_50 l_0_10_50)))
 (let ((?x13257 (* l_0_10_49 l_0_10_49)))
 (let ((?x14183 (+ (* (* 2.0 l_0_10_25) l_0_10_28) (* (* 2.0 l_0_10_26) l_0_10_29))))
 (let ((?x27548 (- (+ ?x14183 (* (* 2.0 l_0_10_27) l_0_10_30)) (* (* 2.0 l_0_10_4) l_0_10_7))))
 (let ((?x27554 (+ (+ (- (+ ?x27548 ?x13257) (* (* 2.0 l_0_10_5) l_0_10_8)) ?x26541) ?x26545)))
 (let ((?x27560 (- (- (- (+ ?x27554 ?x13269) (* (* 2.0 l_0_10_6) l_0_10_9)) ?x26485) ?x26488)))
 (= (- (- ?x27560 ?x26491) ?x26494) 0.0))))))))))))))
(assert
 (let ((?x27646 (* 2.0 l_0_10_90)))
 (let ((?x27647 (* ?x27646 l_0_10_93)))
 (let ((?x27643 (* 2.0 l_0_10_89)))
 (let ((?x27644 (* ?x27643 l_0_10_92)))
 (let ((?x27640 (* 2.0 l_0_10_88)))
 (let ((?x27641 (* ?x27640 l_0_10_91)))
 (let ((?x27304 (* 2.0 l_0_10_73)))
 (let ((?x27305 (* ?x27304 l_0_10_77)))
 (let ((?x27301 (* 2.0 l_0_10_72)))
 (let ((?x27302 (* ?x27301 l_0_10_76)))
 (let ((?x27298 (* 2.0 l_0_10_71)))
 (let ((?x27299 (* ?x27298 l_0_10_75)))
 (let ((?x27295 (* 2.0 l_0_10_70)))
 (let ((?x27296 (* ?x27295 l_0_10_74)))
 (let ((?x27292 (* 2.0 l_0_10_52)))
 (let ((?x27293 (* ?x27292 l_0_10_56)))
 (let ((?x27289 (* 2.0 l_0_10_51)))
 (let ((?x27290 (* ?x27289 l_0_10_55)))
 (let ((?x27286 (* 2.0 l_0_10_50)))
 (let ((?x27287 (* ?x27286 l_0_10_54)))
 (let ((?x27283 (* 2.0 l_0_10_49)))
 (let ((?x27284 (* ?x27283 l_0_10_53)))
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x27624 (* ?x27623 l_0_10_177)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x27621 (* ?x27620 l_0_10_176)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x27618 (* ?x27617 l_0_10_175)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x27615 (* ?x27614 l_0_10_156)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x27612 (* ?x27611 l_0_10_155)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x27609 (* ?x27608 l_0_10_154)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x27601 (* ?x27600 l_0_10_114)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x27598 (* ?x27597 l_0_10_113)))
 (let ((?x27596 (- (* (* 2.0 l_0_10_109) l_0_10_112) (* (* 2.0 l_0_10_11) l_0_10_4))))
 (let ((?x27607 (- (- (+ (+ ?x27596 ?x27598) ?x27601) (* (* 2.0 l_0_10_12) l_0_10_5)) (* (* 2.0 l_0_10_13) l_0_10_6))))
 (let ((?x27627 (+ (- (- (- (+ (+ (+ ?x27607 ?x27609) ?x27612) ?x27615) ?x27618) ?x27621) ?x27624) (* (* 2.0 l_0_10_25) l_0_10_32))))
 (let ((?x27631 (+ (+ ?x27627 (* (* 2.0 l_0_10_26) l_0_10_33)) (* (* 2.0 l_0_10_27) l_0_10_34))))
 (let ((?x27638 (- (- (- (+ (+ (+ (+ ?x27631 ?x27284) ?x27287) ?x27290) ?x27293) ?x27296) ?x27299) ?x27302)))
 (= (- (- (- (- ?x27638 ?x27305) ?x27641) ?x27644) ?x27647) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27304 (* 2.0 l_0_10_73)))
 (let ((?x27493 (* ?x27304 l_0_10_82)))
 (let ((?x27301 (* 2.0 l_0_10_72)))
 (let ((?x27491 (* ?x27301 l_0_10_81)))
 (let ((?x27298 (* 2.0 l_0_10_71)))
 (let ((?x27489 (* ?x27298 l_0_10_80)))
 (let ((?x27295 (* 2.0 l_0_10_70)))
 (let ((?x27487 (* ?x27295 l_0_10_79)))
 (let ((?x27292 (* 2.0 l_0_10_52)))
 (let ((?x27485 (* ?x27292 l_0_10_61)))
 (let ((?x27289 (* 2.0 l_0_10_51)))
 (let ((?x27483 (* ?x27289 l_0_10_60)))
 (let ((?x27286 (* 2.0 l_0_10_50)))
 (let ((?x27481 (* ?x27286 l_0_10_59)))
 (let ((?x27283 (* 2.0 l_0_10_49)))
 (let ((?x27479 (* ?x27283 l_0_10_58)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x26866 (* ?x26865 l_0_10_135)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x26863 (* ?x26862 l_0_10_134)))
 (let ((?x27694 (- (- (- (* (* (- 2.0) l_0_10_130) l_0_10_133) ?x26863) ?x26866) (* (* 2.0 l_0_10_16) l_0_10_4))))
 (let ((?x27699 (- (- ?x27694 (* (* 2.0 l_0_10_17) l_0_10_5)) (* (* 2.0 l_0_10_18) l_0_10_6))))
 (let ((?x27703 (+ (+ ?x27699 (* (* 2.0 l_0_10_25) l_0_10_37)) (* (* 2.0 l_0_10_26) l_0_10_38))))
 (let ((?x27708 (+ (+ (+ (+ ?x27703 (* (* 2.0 l_0_10_27) l_0_10_39)) ?x27479) ?x27481) ?x27483)))
 (= (- (- (- (- (+ ?x27708 ?x27485) ?x27487) ?x27489) ?x27491) ?x27493) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26500 (* l_0_10_9 l_0_10_9)))
 (let ((?x26497 (* l_0_10_8 l_0_10_8)))
 (let ((?x26482 (* l_0_10_7 l_0_10_7)))
 (let ((?x13254 (* l_0_10_31 l_0_10_31)))
 (let ((?x26532 (* l_0_10_30 l_0_10_30)))
 (let ((?x13157 (* l_0_10_29 l_0_10_29)))
 (let ((?x14574 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_28 l_0_10_28)) ?x13157)))
 (= (- (- (- (+ (+ ?x14574 ?x26532) ?x13254) ?x26482) ?x26497) ?x26500) 0.0)))))))))
(assert
 (let ((?x27787 (* l_0_10_94 l_0_10_94)))
 (let ((?x27785 (* l_0_10_93 l_0_10_93)))
 (let ((?x27783 (* l_0_10_92 l_0_10_92)))
 (let ((?x27781 (* l_0_10_91 l_0_10_91)))
 (let ((?x27767 (* l_0_10_178 l_0_10_178)))
 (let ((?x27765 (* l_0_10_177 l_0_10_177)))
 (let ((?x27763 (* l_0_10_176 l_0_10_176)))
 (let ((?x27761 (* l_0_10_175 l_0_10_175)))
 (let ((?x27759 (* l_0_10_157 l_0_10_157)))
 (let ((?x27757 (* l_0_10_156 l_0_10_156)))
 (let ((?x27755 (* l_0_10_155 l_0_10_155)))
 (let ((?x27753 (* l_0_10_154 l_0_10_154)))
 (let ((?x27747 (* l_0_10_115 l_0_10_115)))
 (let ((?x27745 (* l_0_10_114 l_0_10_114)))
 (let ((?x27743 (* l_0_10_113 l_0_10_113)))
 (let ((?x27741 (* l_0_10_112 l_0_10_112)))
 (let ((?x27740 (- (* (* (- 2.0) l_0_10_10) l_0_10_14) (* (* 2.0 l_0_10_11) l_0_10_7))))
 (let ((?x27750 (- (+ (+ (+ (+ ?x27740 ?x27741) ?x27743) ?x27745) ?x27747) (* (* 2.0 l_0_10_12) l_0_10_8))))
 (let ((?x27758 (+ (+ (+ (- ?x27750 (* (* 2.0 l_0_10_13) l_0_10_9)) ?x27753) ?x27755) ?x27757)))
 (let ((?x27771 (+ (- (- (- (- (+ ?x27758 ?x27759) ?x27761) ?x27763) ?x27765) ?x27767) (* (* 2.0 l_0_10_28) l_0_10_32))))
 (let ((?x27777 (+ (+ ?x27771 (* (* 2.0 l_0_10_29) l_0_10_33)) (* (* 2.0 l_0_10_30) l_0_10_34))))
 (let ((?x27786 (- (- (- (+ ?x27777 (* (* 2.0 l_0_10_31) l_0_10_35)) ?x27781) ?x27783) ?x27785)))
 (= (- ?x27786 ?x27787) 0.0))))))))))))))))))))))))
(assert
 (let ((?x26927 (* l_0_10_136 l_0_10_136)))
 (let ((?x26925 (* l_0_10_135 l_0_10_135)))
 (let ((?x26923 (* l_0_10_134 l_0_10_134)))
 (let ((?x26921 (* l_0_10_133 l_0_10_133)))
 (let ((?x27827 (- (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x26921) ?x26923) ?x26925) ?x26927)))
 (let ((?x27831 (- (- ?x27827 (* (* 2.0 l_0_10_16) l_0_10_7)) (* (* 2.0 l_0_10_17) l_0_10_8))))
 (let ((?x27835 (+ (- ?x27831 (* (* 2.0 l_0_10_18) l_0_10_9)) (* (* 2.0 l_0_10_28) l_0_10_37))))
 (let ((?x27839 (+ (+ ?x27835 (* (* 2.0 l_0_10_29) l_0_10_38)) (* (* 2.0 l_0_10_30) l_0_10_39))))
 (= (+ ?x27839 (* (* 2.0 l_0_10_31) l_0_10_40)) 0.0))))))))))
(assert
 (let ((?x27926 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x27923 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x27920 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x27917 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x27914 (* l_0_10_36 l_0_10_36)))
 (let ((?x27912 (* l_0_10_35 l_0_10_35)))
 (let ((?x27910 (* l_0_10_34 l_0_10_34)))
 (let ((?x27908 (* l_0_10_33 l_0_10_33)))
 (let ((?x27906 (* l_0_10_32 l_0_10_32)))
 (let ((?x27903 (* 2.0 l_0_10_178)))
 (let ((?x27904 (* ?x27903 l_0_10_182)))
 (let ((?x27900 (* 2.0 l_0_10_177)))
 (let ((?x27901 (* ?x27900 l_0_10_181)))
 (let ((?x27897 (* 2.0 l_0_10_176)))
 (let ((?x27898 (* ?x27897 l_0_10_180)))
 (let ((?x27894 (* 2.0 l_0_10_175)))
 (let ((?x27895 (* ?x27894 l_0_10_179)))
 (let ((?x27891 (* 2.0 l_0_10_157)))
 (let ((?x27892 (* ?x27891 l_0_10_161)))
 (let ((?x27888 (* 2.0 l_0_10_156)))
 (let ((?x27889 (* ?x27888 l_0_10_160)))
 (let ((?x27885 (* 2.0 l_0_10_155)))
 (let ((?x27886 (* ?x27885 l_0_10_159)))
 (let ((?x27882 (* 2.0 l_0_10_154)))
 (let ((?x27883 (* ?x27882 l_0_10_158)))
 (let ((?x27880 (* l_0_10_15 l_0_10_15)))
 (let ((?x27878 (* l_0_10_14 l_0_10_14)))
 (let ((?x27876 (* l_0_10_13 l_0_10_13)))
 (let ((?x27874 (* l_0_10_12 l_0_10_12)))
 (let ((?x27871 (* 2.0 l_0_10_115)))
 (let ((?x27872 (* ?x27871 l_0_10_119)))
 (let ((?x27868 (* 2.0 l_0_10_114)))
 (let ((?x27869 (* ?x27868 l_0_10_118)))
 (let ((?x27865 (* 2.0 l_0_10_113)))
 (let ((?x27866 (* ?x27865 l_0_10_117)))
 (let ((?x27864 (+ (* (- l_0_10_11) l_0_10_11) (* (* 2.0 l_0_10_112) l_0_10_116))))
 (let ((?x27881 (- (- (- (- (+ (+ (+ ?x27864 ?x27866) ?x27869) ?x27872) ?x27874) ?x27876) ?x27878) ?x27880)))
 (let ((?x27902 (- (- (- (+ (+ (+ (+ ?x27881 ?x27883) ?x27886) ?x27889) ?x27892) ?x27895) ?x27898) ?x27901)))
 (let ((?x27918 (- (+ (+ (+ (+ (+ (- ?x27902 ?x27904) ?x27906) ?x27908) ?x27910) ?x27912) ?x27914) ?x27917)))
 (= (- (- (- ?x27918 ?x27920) ?x27923) ?x27926) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27903 (* 2.0 l_0_10_178)))
 (let ((?x28045 (* ?x27903 l_0_10_187)))
 (let ((?x27900 (* 2.0 l_0_10_177)))
 (let ((?x28043 (* ?x27900 l_0_10_186)))
 (let ((?x27897 (* 2.0 l_0_10_176)))
 (let ((?x28041 (* ?x27897 l_0_10_185)))
 (let ((?x27894 (* 2.0 l_0_10_175)))
 (let ((?x28039 (* ?x27894 l_0_10_184)))
 (let ((?x27891 (* 2.0 l_0_10_157)))
 (let ((?x28037 (* ?x27891 l_0_10_166)))
 (let ((?x27888 (* 2.0 l_0_10_156)))
 (let ((?x28035 (* ?x27888 l_0_10_165)))
 (let ((?x27885 (* 2.0 l_0_10_155)))
 (let ((?x28033 (* ?x27885 l_0_10_164)))
 (let ((?x27882 (* 2.0 l_0_10_154)))
 (let ((?x28031 (* ?x27882 l_0_10_163)))
 (let ((?x26986 (* 2.0 l_0_10_136)))
 (let ((?x26987 (* ?x26986 l_0_10_140)))
 (let ((?x26983 (* 2.0 l_0_10_135)))
 (let ((?x26984 (* ?x26983 l_0_10_139)))
 (let ((?x26980 (* 2.0 l_0_10_134)))
 (let ((?x26981 (* ?x26980 l_0_10_138)))
 (let ((?x26977 (* 2.0 l_0_10_133)))
 (let ((?x26978 (* ?x26977 l_0_10_137)))
 (let ((?x27871 (* 2.0 l_0_10_115)))
 (let ((?x28015 (* ?x27871 l_0_10_124)))
 (let ((?x27868 (* 2.0 l_0_10_114)))
 (let ((?x28013 (* ?x27868 l_0_10_123)))
 (let ((?x27865 (* 2.0 l_0_10_113)))
 (let ((?x28011 (* ?x27865 l_0_10_122)))
 (let ((?x27862 (* 2.0 l_0_10_112)))
 (let ((?x28009 (* ?x27862 l_0_10_121)))
 (let ((?x28004 (* 2.0 l_0_10_103)))
 (let ((?x28005 (* ?x28004 l_0_10_94)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x28002 (* ?x28001 l_0_10_93)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x27999 (* ?x27998 l_0_10_92)))
 (let ((?x28008 (- (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_91) ?x27999) ?x28002) ?x28005) (* (* 2.0 l_0_10_11) l_0_10_16))))
 (let ((?x28018 (- (+ (+ (+ (+ ?x28008 ?x28009) ?x28011) ?x28013) ?x28015) (* (* 2.0 l_0_10_12) l_0_10_17))))
 (let ((?x28023 (- (- (- (- ?x28018 (* (* 2.0 l_0_10_13) l_0_10_18)) ?x26978) ?x26981) ?x26984)))
 (let ((?x28030 (- (- (- ?x28023 ?x26987) (* (* 2.0 l_0_10_14) l_0_10_19)) (* (* 2.0 l_0_10_15) l_0_10_20))))
 (let ((?x28044 (- (- (- (+ (+ (+ (+ ?x28030 ?x28031) ?x28033) ?x28035) ?x28037) ?x28039) ?x28041) ?x28043)))
 (let ((?x28052 (+ (+ (- ?x28044 ?x28045) (* (* 2.0 l_0_10_32) l_0_10_37)) (* (* 2.0 l_0_10_33) l_0_10_38))))
 (let ((?x28058 (+ (+ ?x28052 (* (* 2.0 l_0_10_34) l_0_10_39)) (* (* 2.0 l_0_10_35) l_0_10_40))))
 (= (+ ?x28058 (* (* 2.0 l_0_10_36) l_0_10_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28177 (* l_0_10_42 l_0_10_42)))
 (let ((?x28175 (* l_0_10_41 l_0_10_41)))
 (let ((?x28173 (* l_0_10_40 l_0_10_40)))
 (let ((?x28171 (* l_0_10_39 l_0_10_39)))
 (let ((?x28169 (* l_0_10_38 l_0_10_38)))
 (let ((?x28167 (* l_0_10_37 l_0_10_37)))
 (let ((?x28165 (* l_0_10_21 l_0_10_21)))
 (let ((?x28163 (* l_0_10_20 l_0_10_20)))
 (let ((?x28161 (* l_0_10_19 l_0_10_19)))
 (let ((?x28159 (* l_0_10_18 l_0_10_18)))
 (let ((?x28157 (* l_0_10_17 l_0_10_17)))
 (let ((?x28139 (* l_0_10_16 l_0_10_16)))
 (let ((?x26986 (* 2.0 l_0_10_136)))
 (let ((?x27123 (* ?x26986 l_0_10_145)))
 (let ((?x26983 (* 2.0 l_0_10_135)))
 (let ((?x27121 (* ?x26983 l_0_10_144)))
 (let ((?x26980 (* 2.0 l_0_10_134)))
 (let ((?x27119 (* ?x26980 l_0_10_143)))
 (let ((?x28156 (- (- (- (- (* (* (- 2.0) l_0_10_133) l_0_10_142) ?x27119) ?x27121) ?x27123) ?x28139)))
 (let ((?x28170 (+ (+ (- (- (- (- (- ?x28156 ?x28157) ?x28159) ?x28161) ?x28163) ?x28165) ?x28167) ?x28169)))
 (= (+ (+ (+ (+ ?x28170 ?x28171) ?x28173) ?x28175) ?x28177) 0.0))))))))))))))))))))))
(assert
 (let ((?x28232 (* l_0_10_87 l_0_10_87)))
 (let ((?x28230 (* l_0_10_86 l_0_10_86)))
 (let ((?x26640 (* l_0_10_64 l_0_10_64)))
 (let ((?x28228 (* 3.0 ?x26640)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x26638 (* ?x26637 l_0_10_65)))
 (let ((?x28225 (* (* 3.0 l_0_10_43) l_0_10_43)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x26626 (* ?x26625 l_0_10_44)))
 (let ((?x26619 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x28220 (* l_0_10_171 l_0_10_171)))
 (let ((?x28218 (* l_0_10_170 l_0_10_170)))
 (let ((?x28216 (* l_0_10_150 l_0_10_150)))
 (let ((?x28214 (* l_0_10_149 l_0_10_149)))
 (let ((?x28212 (* l_0_10_127 l_0_10_127)))
 (let ((?x28210 (* l_0_10_108 l_0_10_108)))
 (let ((?x28211 (- (- (* 6.0 (* l_0_10_1 l_0_10_1)) (* l_0_10_107 l_0_10_107)) ?x28210)))
 (let ((?x28223 (- (- (+ (+ (- (- (+ ?x28211 ?x28212) ?x28214) ?x28216) ?x28218) ?x28220) ?x26619) ?x26626)))
 (= (+ (+ (+ (+ (- ?x28223 ?x28225) ?x26638) ?x28228) ?x28230) ?x28232) 0.0))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28276 (* ?x26768 l_0_10_68)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28274 (* ?x26765 l_0_10_67)))
 (let ((?x26640 (* l_0_10_64 l_0_10_64)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28271 (* ?x26637 l_0_10_67)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28269 (* ?x26760 l_0_10_47)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28267 (* ?x26757 l_0_10_46)))
 (let ((?x13432 (* l_0_10_43 l_0_10_43)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28264 (* ?x26625 l_0_10_46)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28262 (* ?x26615 l_0_10_25)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x14816 (* ?x26603 l_0_10_4)))
 (let ((?x28266 (+ (- (- (+ ?x14816 (* (* 2.0 l_0_10_127) l_0_10_130)) ?x28262) ?x28264) ?x13432)))
 (= (+ (+ (- (+ (- (- ?x28266 ?x28267) ?x28269) ?x28271) ?x26640) ?x28274) ?x28276) 0.0)))))))))))))))))))))
(assert
 (let ((?x28333 (* l_0_10_85 l_0_10_85)))
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28331 (* ?x26768 l_0_10_75)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28329 (* ?x26765 l_0_10_74)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28327 (* ?x26637 l_0_10_74)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28325 (* ?x26760 l_0_10_54)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28323 (* ?x26757 l_0_10_53)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28321 (* ?x26625 l_0_10_53)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28319 (* ?x26615 l_0_10_32)))
 (let ((?x28317 (* l_0_10_169 l_0_10_169)))
 (let ((?x28315 (* l_0_10_148 l_0_10_148)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x28313 (* ?x26608 l_0_10_137)))
 (let ((?x28314 (+ (+ (* (* 12.0 l_0_10_1) l_0_10_11) (* l_0_10_106 l_0_10_106)) ?x28313)))
 (let ((?x28328 (+ (- (- (- (- (- (+ ?x28314 ?x28315) ?x28317) ?x28319) ?x28321) ?x28323) ?x28325) ?x28327)))
 (= (- (+ (+ ?x28328 ?x28329) ?x28331) ?x28333) 0.0)))))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28393 (* ?x26768 l_0_10_80)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28391 (* ?x26765 l_0_10_79)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28389 (* ?x26637 l_0_10_79)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28387 (* ?x26760 l_0_10_59)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28385 (* ?x26757 l_0_10_58)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28383 (* ?x26625 l_0_10_58)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28381 (* ?x26615 l_0_10_37)))
 (let ((?x28212 (* l_0_10_127 l_0_10_127)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x28377 (* ?x26603 l_0_10_16)))
 (let ((?x28384 (- (- (- (+ ?x28377 (* (* 2.0 l_0_10_127) l_0_10_142)) ?x28212) ?x28381) ?x28383)))
 (= (+ (+ (+ (- (- ?x28384 ?x28385) ?x28387) ?x28389) ?x28391) ?x28393) 0.0))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28276 (* ?x26768 l_0_10_68)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28274 (* ?x26765 l_0_10_67)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28442 (* ?x26718 l_0_10_67)))
 (let ((?x26719 (* ?x26718 l_0_10_65)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28269 (* ?x26760 l_0_10_47)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28267 (* ?x26757 l_0_10_46)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28437 (* ?x26713 l_0_10_46)))
 (let ((?x26714 (* ?x26713 l_0_10_44)))
 (let ((?x26255 (* 12.0 l_0_10_3)))
 (let ((?x26574 (* ?x26255 l_0_10_5)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x26568 (* ?x26245 l_0_10_26)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x26562 (* ?x26235 l_0_10_25)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28262 (* ?x26615 l_0_10_25)))
 (let ((?x26225 (* 12.0 l_0_10_2)))
 (let ((?x26556 (* ?x26225 l_0_10_4)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28414 (* ?x26808 l_0_10_131)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x14816 (* ?x26603 l_0_10_4)))
 (let ((?x28424 (- (+ (+ ?x14816 (* (* 2.0 l_0_10_128) l_0_10_130)) ?x28414) (* (* 2.0 l_0_10_190) l_0_10_193))))
 (let ((?x28429 (- (- (- (+ ?x28424 ?x26556) (* (* 2.0 l_0_10_211) l_0_10_214)) ?x28262) ?x26562)))
 (let ((?x28434 (- (- (- ?x28429 (* (* 2.0 l_0_10_232) l_0_10_235)) ?x26568) (* (* 2.0 l_0_10_253) l_0_10_256))))
 (let ((?x28443 (+ (- (- (- (- (+ (+ ?x28434 ?x26574) ?x26714) ?x28437) ?x28267) ?x28269) ?x26719) ?x28442)))
 (= (+ (+ ?x28443 ?x28274) ?x28276) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28502 (* ?x27033 l_0_10_86)))
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28331 (* ?x26768 l_0_10_75)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28329 (* ?x26765 l_0_10_74)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28498 (* ?x26718 l_0_10_74)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28325 (* ?x26760 l_0_10_54)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28323 (* ?x26757 l_0_10_53)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28494 (* ?x26713 l_0_10_53)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x28490 (* ?x26245 l_0_10_33)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x28486 (* ?x26235 l_0_10_32)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28319 (* ?x26615 l_0_10_32)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28479 (* ?x26992 l_0_10_170)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28477 (* ?x26989 l_0_10_149)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28475 (* ?x26808 l_0_10_138)))
 (let ((?x26797 (* 2.0 l_0_10_128)))
 (let ((?x14916 (* ?x26797 l_0_10_137)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x14917 (* ?x13606 l_0_10_3)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x14911 (* ?x13602 l_0_10_2)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x28303 (* ?x26603 l_0_10_11)))
 (let ((?x14918 (+ (+ (+ (+ ?x28303 (* (* 2.0 l_0_10_106) l_0_10_107)) ?x14911) ?x14917) ?x14916)))
 (let ((?x28482 (- (- (+ (+ ?x14918 ?x28475) ?x28477) ?x28479) (* (* 2.0 l_0_10_190) l_0_10_200))))
 (let ((?x28489 (- (- (- (- ?x28482 (* (* 2.0 l_0_10_211) l_0_10_221)) ?x28319) ?x28486) (* (* 2.0 l_0_10_232) l_0_10_242))))
 (let ((?x28496 (- (- (- (- ?x28489 ?x28490) (* (* 2.0 l_0_10_253) l_0_10_263)) ?x28494) ?x28323)))
 (= (- (+ (+ (+ (- ?x28496 ?x28325) ?x28498) ?x28329) ?x28331) ?x28502) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26768 (* 6.0 l_0_10_66)))
 (let ((?x28393 (* ?x26768 l_0_10_80)))
 (let ((?x26765 (* 6.0 l_0_10_65)))
 (let ((?x28391 (* ?x26765 l_0_10_79)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28582 (* ?x26718 l_0_10_79)))
 (let ((?x26760 (* 6.0 l_0_10_45)))
 (let ((?x28387 (* ?x26760 l_0_10_59)))
 (let ((?x26757 (* 6.0 l_0_10_44)))
 (let ((?x28385 (* ?x26757 l_0_10_58)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28578 (* ?x26713 l_0_10_58)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x28574 (* ?x26245 l_0_10_38)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x28570 (* ?x26235 l_0_10_37)))
 (let ((?x26615 (* 12.0 l_0_10_22)))
 (let ((?x28381 (* ?x26615 l_0_10_37)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x28563 (* ?x27128 l_0_10_3)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x28561 (* ?x27125 l_0_10_2)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28559 (* ?x26808 l_0_10_143)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x26609 (* ?x26608 l_0_10_128)))
 (let ((?x26603 (* 12.0 l_0_10_1)))
 (let ((?x28377 (* ?x26603 l_0_10_16)))
 (let ((?x28562 (+ (+ (+ (- ?x28377 ?x26609) (* (* 2.0 l_0_10_128) l_0_10_142)) ?x28559) ?x28561)))
 (let ((?x28568 (- (- (+ ?x28562 ?x28563) (* (* 2.0 l_0_10_190) l_0_10_205)) (* (* 2.0 l_0_10_211) l_0_10_226))))
 (let ((?x28575 (- (- (- (- ?x28568 ?x28381) ?x28570) (* (* 2.0 l_0_10_232) l_0_10_247)) ?x28574)))
 (let ((?x28581 (- (- (- (- ?x28575 (* (* 2.0 l_0_10_253) l_0_10_268)) ?x28578) ?x28385) ?x28387)))
 (= (+ (+ (+ ?x28581 ?x28582) ?x28391) ?x28393) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26371 (* l_0_10_69 l_0_10_69)))
 (let ((?x28654 (* 3.0 ?x26371)))
 (let ((?x26368 (* l_0_10_68 l_0_10_68)))
 (let ((?x28652 (* 3.0 ?x26368)))
 (let ((?x26365 (* l_0_10_67 l_0_10_67)))
 (let ((?x28650 (* 3.0 ?x26365)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28442 (* ?x26718 l_0_10_67)))
 (let ((?x26358 (* l_0_10_6 l_0_10_6)))
 (let ((?x26359 (* 6.0 ?x26358)))
 (let ((?x26355 (* l_0_10_5 l_0_10_5)))
 (let ((?x26356 (* 6.0 ?x26355)))
 (let ((?x28645 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x28642 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28437 (* ?x26713 l_0_10_46)))
 (let ((?x26339 (* l_0_10_4 l_0_10_4)))
 (let ((?x26340 (* 6.0 ?x26339)))
 (let ((?x26337 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x26334 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x26325 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x28631 (* l_0_10_132 l_0_10_132)))
 (let ((?x28632 (+ (+ (* l_0_10_130 l_0_10_130) (* l_0_10_131 l_0_10_131)) ?x28631)))
 (let ((?x28640 (- (+ (+ (- (- (- ?x28632 ?x26325) ?x26334) ?x26337) ?x26340) ?x28437) (* (* 3.0 l_0_10_46) l_0_10_46))))
 (let ((?x28653 (+ (+ (- (+ (+ (- (- ?x28640 ?x28642) ?x28645) ?x26356) ?x26359) ?x28442) ?x28650) ?x28652)))
 (= (+ ?x28653 ?x28654) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28721 (* ?x27033 l_0_10_88)))
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x28719 (* ?x26893 l_0_10_76)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x28717 (* ?x26890 l_0_10_75)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x28715 (* ?x26887 l_0_10_74)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28498 (* ?x26718 l_0_10_74)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x28712 (* ?x26881 l_0_10_55)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x28710 (* ?x26878 l_0_10_54)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28494 (* ?x26713 l_0_10_53)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x28705 (* ?x26093 l_0_10_34)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x28703 (* ?x26090 l_0_10_33)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x28701 (* ?x26078 l_0_10_32)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28699 (* ?x26992 l_0_10_172)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28697 (* ?x26989 l_0_10_151)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x28695 (* ?x26865 l_0_10_139)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x28693 (* ?x26862 l_0_10_138)))
 (let ((?x13532 (* 2.0 l_0_10_130)))
 (let ((?x28691 (* ?x13532 l_0_10_137)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x28689 (* ?x13605 l_0_10_6)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x28687 (* ?x13606 l_0_10_5)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x28685 (* ?x13602 l_0_10_4)))
 (let ((?x28692 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_109) ?x28685) ?x28687) ?x28689) ?x28691)))
 (let ((?x28706 (- (- (- (- (+ (+ (+ ?x28692 ?x28693) ?x28695) ?x28697) ?x28699) ?x28701) ?x28703) ?x28705)))
 (let ((?x28713 (- (- (- (+ ?x28706 ?x28494) (* (* 6.0 l_0_10_46) l_0_10_53)) ?x28710) ?x28712)))
 (= (- (+ (+ (+ (- ?x28713 ?x28498) ?x28715) ?x28717) ?x28719) ?x28721) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x28783 (* ?x26893 l_0_10_81)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x28781 (* ?x26890 l_0_10_80)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x28779 (* ?x26887 l_0_10_79)))
 (let ((?x26718 (* 2.0 l_0_10_64)))
 (let ((?x28582 (* ?x26718 l_0_10_79)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x28776 (* ?x26881 l_0_10_60)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x28774 (* ?x26878 l_0_10_59)))
 (let ((?x26713 (* 2.0 l_0_10_43)))
 (let ((?x28578 (* ?x26713 l_0_10_58)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x28769 (* ?x26093 l_0_10_39)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x28767 (* ?x26090 l_0_10_38)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x28765 (* ?x26078 l_0_10_37)))
 (let ((?x27131 (* 12.0 l_0_10_18)))
 (let ((?x28763 (* ?x27131 l_0_10_6)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x28761 (* ?x27128 l_0_10_5)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x28759 (* ?x27125 l_0_10_4)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x28757 (* ?x26865 l_0_10_144)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x15047 (* ?x26862 l_0_10_143)))
 (let ((?x15045 (+ (* (* (- 2.0) l_0_10_127) l_0_10_130) (* (* 2.0 l_0_10_130) l_0_10_142))))
 (let ((?x28768 (- (- (+ (+ (+ (+ (+ ?x15045 ?x15047) ?x28757) ?x28759) ?x28761) ?x28763) ?x28765) ?x28767)))
 (let ((?x28775 (- (- (+ (- ?x28768 ?x28769) ?x28578) (* (* 6.0 l_0_10_46) l_0_10_58)) ?x28774)))
 (= (+ (+ (+ (- (- ?x28775 ?x28776) ?x28582) ?x28779) ?x28781) ?x28783) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28899 (* ?x27033 l_0_10_95)))
 (let ((?x28896 (* l_0_10_78 l_0_10_78)))
 (let ((?x28897 (* 3.0 ?x28896)))
 (let ((?x28893 (* l_0_10_77 l_0_10_77)))
 (let ((?x28894 (* 3.0 ?x28893)))
 (let ((?x28890 (* l_0_10_76 l_0_10_76)))
 (let ((?x28891 (* 3.0 ?x28890)))
 (let ((?x28887 (* l_0_10_75 l_0_10_75)))
 (let ((?x28888 (* 3.0 ?x28887)))
 (let ((?x28884 (* l_0_10_74 l_0_10_74)))
 (let ((?x28885 (* 3.0 ?x28884)))
 (let ((?x28882 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x28879 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x28876 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x28873 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x28867 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x28864 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x28861 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x28858 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x28855 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28852 (* ?x26992 l_0_10_179)))
 (let ((?x27880 (* l_0_10_15 l_0_10_15)))
 (let ((?x28850 (* 6.0 ?x27880)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28848 (* ?x26989 l_0_10_158)))
 (let ((?x28846 (* l_0_10_141 l_0_10_141)))
 (let ((?x28844 (* l_0_10_140 l_0_10_140)))
 (let ((?x27878 (* l_0_10_14 l_0_10_14)))
 (let ((?x28842 (* 6.0 ?x27878)))
 (let ((?x28840 (* l_0_10_139 l_0_10_139)))
 (let ((?x28838 (* l_0_10_138 l_0_10_138)))
 (let ((?x28836 (* l_0_10_137 l_0_10_137)))
 (let ((?x27876 (* l_0_10_13 l_0_10_13)))
 (let ((?x28834 (* 6.0 ?x27876)))
 (let ((?x27874 (* l_0_10_12 l_0_10_12)))
 (let ((?x28821 (* 6.0 ?x27874)))
 (let ((?x27930 (* l_0_10_11 l_0_10_11)))
 (let ((?x15260 (* 6.0 ?x27930)))
 (let ((?x28837 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_116) ?x15260) ?x28821) ?x28834) ?x28836)))
 (let ((?x28851 (+ (+ (+ (+ (+ (+ (+ ?x28837 ?x28838) ?x28840) ?x28842) ?x28844) ?x28846) ?x28848) ?x28850)))
 (let ((?x28871 (- (- (- (- (- (- (- ?x28851 ?x28852) ?x28855) ?x28858) ?x28861) ?x28864) ?x28867) (* (* 3.0 l_0_10_53) l_0_10_53))))
 (let ((?x28892 (+ (+ (+ (- (- (- (- ?x28871 ?x28873) ?x28876) ?x28879) ?x28882) ?x28885) ?x28888) ?x28891)))
 (= (- (+ (+ ?x28892 ?x28894) ?x28897) ?x28899) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29013 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x29010 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x29007 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x29004 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x29001 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x28998 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x28995 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x28992 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x28989 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x28983 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28980 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28977 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28974 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28971 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28968 (* ?x26992 l_0_10_184)))
 (let ((?x28966 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28963 (* ?x26989 l_0_10_163)))
 (let ((?x28961 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28958 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28955 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x28952 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28949 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28946 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x28943 (* ?x13605 l_0_10_18)))
 (let ((?x26608 (* 2.0 l_0_10_127)))
 (let ((?x28313 (* ?x26608 l_0_10_137)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x28940 (* ?x13606 l_0_10_17)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x28938 (* ?x13602 l_0_10_16)))
 (let ((?x13590 (* 2.0 l_0_10_106)))
 (let ((?x28936 (* ?x13590 l_0_10_121)))
 (let ((?x28942 (- (+ (+ (+ (* (* (- 2.0) l_0_10_100) l_0_10_85) ?x28936) ?x28938) ?x28940) ?x28313)))
 (let ((?x28962 (+ (+ (+ (+ (+ (+ (+ ?x28942 ?x28943) ?x28946) ?x28949) ?x28952) ?x28955) ?x28958) ?x28961)))
 (let ((?x28981 (- (- (- (- (- (+ (+ ?x28962 ?x28963) ?x28966) ?x28968) ?x28971) ?x28974) ?x28977) ?x28980)))
 (let ((?x28993 (- (- (- (- ?x28981 ?x28983) (* (* 6.0 l_0_10_53) l_0_10_58)) ?x28989) ?x28992)))
 (let ((?x29014 (+ (+ (+ (+ (+ (- (- ?x28993 ?x28995) ?x28998) ?x29001) ?x29004) ?x29007) ?x29010) ?x29013)))
 (= ?x29014 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29131 (* l_0_10_84 l_0_10_84)))
 (let ((?x29132 (* 3.0 ?x29131)))
 (let ((?x29128 (* l_0_10_83 l_0_10_83)))
 (let ((?x29129 (* 3.0 ?x29128)))
 (let ((?x29125 (* l_0_10_82 l_0_10_82)))
 (let ((?x29126 (* 3.0 ?x29125)))
 (let ((?x29122 (* l_0_10_81 l_0_10_81)))
 (let ((?x29123 (* 3.0 ?x29122)))
 (let ((?x29119 (* l_0_10_80 l_0_10_80)))
 (let ((?x29120 (* 3.0 ?x29119)))
 (let ((?x29116 (* l_0_10_79 l_0_10_79)))
 (let ((?x29117 (* 3.0 ?x29116)))
 (let ((?x29114 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x29111 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x29108 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x29105 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x29102 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x29096 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x29093 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x29090 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x29087 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x29084 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x29081 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x28165 (* l_0_10_21 l_0_10_21)))
 (let ((?x29078 (* 6.0 ?x28165)))
 (let ((?x28163 (* l_0_10_20 l_0_10_20)))
 (let ((?x29076 (* 6.0 ?x28163)))
 (let ((?x28161 (* l_0_10_19 l_0_10_19)))
 (let ((?x29074 (* 6.0 ?x28161)))
 (let ((?x28159 (* l_0_10_18 l_0_10_18)))
 (let ((?x29072 (* 6.0 ?x28159)))
 (let ((?x28157 (* l_0_10_17 l_0_10_17)))
 (let ((?x29070 (* 6.0 ?x28157)))
 (let ((?x28139 (* l_0_10_16 l_0_10_16)))
 (let ((?x29068 (* 6.0 ?x28139)))
 (let ((?x29066 (* l_0_10_147 l_0_10_147)))
 (let ((?x29064 (* l_0_10_146 l_0_10_146)))
 (let ((?x29062 (* l_0_10_145 l_0_10_145)))
 (let ((?x29060 (* l_0_10_144 l_0_10_144)))
 (let ((?x29058 (* l_0_10_143 l_0_10_143)))
 (let ((?x29056 (* l_0_10_142 l_0_10_142)))
 (let ((?x29063 (+ (+ (+ (+ (* (* (- 2.0) l_0_10_127) l_0_10_142) ?x29056) ?x29058) ?x29060) ?x29062)))
 (let ((?x29077 (+ (+ (+ (+ (+ (+ (+ ?x29063 ?x29064) ?x29066) ?x29068) ?x29070) ?x29072) ?x29074) ?x29076)))
 (let ((?x29097 (- (- (- (- (- (- (+ ?x29077 ?x29078) ?x29081) ?x29084) ?x29087) ?x29090) ?x29093) ?x29096)))
 (let ((?x29109 (- (- (- (- ?x29097 (* (* 3.0 l_0_10_58) l_0_10_58)) ?x29102) ?x29105) ?x29108)))
 (let ((?x29130 (+ (+ (+ (+ (+ (- (- ?x29109 ?x29111) ?x29114) ?x29117) ?x29120) ?x29123) ?x29126) ?x29129)))
 (= (+ ?x29130 ?x29132) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28232 (* l_0_10_87 l_0_10_87)))
 (let ((?x28230 (* l_0_10_86 l_0_10_86)))
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x29194 (* ?x26126 l_0_10_75)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x29192 (* ?x26123 l_0_10_74)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x29190 (* ?x26105 l_0_10_54)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x29188 (* ?x26102 l_0_10_53)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x28490 (* ?x26245 l_0_10_33)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x28486 (* ?x26235 l_0_10_32)))
 (let ((?x28220 (* l_0_10_171 l_0_10_171)))
 (let ((?x28218 (* l_0_10_170 l_0_10_170)))
 (let ((?x28216 (* l_0_10_150 l_0_10_150)))
 (let ((?x28214 (* l_0_10_149 l_0_10_149)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x14917 (* ?x13606 l_0_10_3)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x14911 (* ?x13602 l_0_10_2)))
 (let ((?x29164 (+ (+ (* l_0_10_107 l_0_10_107) (* l_0_10_108 l_0_10_108)) ?x14911)))
 (let ((?x29171 (- (- (- (+ (+ (+ ?x29164 ?x14917) ?x28214) ?x28216) ?x28218) ?x28220) (* (* 2.0 l_0_10_191) l_0_10_200))))
 (let ((?x29175 (- (- ?x29171 (* (* 2.0 l_0_10_192) l_0_10_201)) (* (* 2.0 l_0_10_212) l_0_10_221))))
 (let ((?x29180 (- (- (- ?x29175 (* (* 2.0 l_0_10_213) l_0_10_222)) ?x28486) (* (* 2.0 l_0_10_233) l_0_10_242))))
 (let ((?x29185 (- (- (- ?x29180 (* (* 2.0 l_0_10_234) l_0_10_243)) ?x28490) (* (* 2.0 l_0_10_254) l_0_10_263))))
 (let ((?x29193 (+ (- (- (- ?x29185 (* (* 2.0 l_0_10_255) l_0_10_264)) ?x29188) ?x29190) ?x29192)))
 (= (- (- (+ ?x29193 ?x29194) ?x28230) ?x28232) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x29251 (* ?x26126 l_0_10_80)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x29249 (* ?x26123 l_0_10_79)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x29247 (* ?x26105 l_0_10_59)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x29245 (* ?x26102 l_0_10_58)))
 (let ((?x26245 (* 12.0 l_0_10_24)))
 (let ((?x28574 (* ?x26245 l_0_10_38)))
 (let ((?x26235 (* 12.0 l_0_10_23)))
 (let ((?x28570 (* ?x26235 l_0_10_37)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x28563 (* ?x27128 l_0_10_3)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x28561 (* ?x27125 l_0_10_2)))
 (let ((?x29225 (+ (- (* (- l_0_10_128) l_0_10_128) (* l_0_10_129 l_0_10_129)) ?x28561)))
 (let ((?x29230 (- (- (+ ?x29225 ?x28563) (* (* 2.0 l_0_10_191) l_0_10_205)) (* (* 2.0 l_0_10_192) l_0_10_206))))
 (let ((?x29234 (- (- ?x29230 (* (* 2.0 l_0_10_212) l_0_10_226)) (* (* 2.0 l_0_10_213) l_0_10_227))))
 (let ((?x29239 (- (- (- ?x29234 ?x28570) (* (* 2.0 l_0_10_233) l_0_10_247)) (* (* 2.0 l_0_10_234) l_0_10_248))))
 (let ((?x29244 (- (- (- ?x29239 ?x28574) (* (* 2.0 l_0_10_254) l_0_10_268)) (* (* 2.0 l_0_10_255) l_0_10_269))))
 (= (+ (+ (- (- ?x29244 ?x29245) ?x29247) ?x29249) ?x29251) 0.0)))))))))))))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x29341 (* ?x27310 l_0_10_89)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x29339 (* ?x27307 l_0_10_88)))
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x29337 (* ?x26135 l_0_10_76)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x29335 (* ?x26132 l_0_10_75)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x29333 (* ?x26129 l_0_10_74)))
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x29194 (* ?x26126 l_0_10_75)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x29192 (* ?x26123 l_0_10_74)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x29329 (* ?x26114 l_0_10_55)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x29327 (* ?x26111 l_0_10_54)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x29325 (* ?x26108 l_0_10_53)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x29190 (* ?x26105 l_0_10_54)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x29188 (* ?x26102 l_0_10_53)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x28705 (* ?x26093 l_0_10_34)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x28703 (* ?x26090 l_0_10_33)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x28701 (* ?x26078 l_0_10_32)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x29294 (* ?x27224 l_0_10_173)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x29292 (* ?x27221 l_0_10_172)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x29290 (* ?x27218 l_0_10_152)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x29288 (* ?x27215 l_0_10_151)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x28689 (* ?x13605 l_0_10_6)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x28687 (* ?x13606 l_0_10_5)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x28685 (* ?x13602 l_0_10_4)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x16347 (* ?x27203 l_0_10_110)))
 (let ((?x29287 (+ (+ (+ (+ (* (* 2.0 l_0_10_107) l_0_10_109) ?x16347) ?x28685) ?x28687) ?x28689)))
 (let ((?x29297 (- (- (- (+ (+ ?x29287 ?x29288) ?x29290) ?x29292) ?x29294) (* (* 2.0 l_0_10_193) l_0_10_200))))
 (let ((?x29301 (- (- ?x29297 (* (* 2.0 l_0_10_194) l_0_10_201)) (* (* 2.0 l_0_10_195) l_0_10_202))))
 (let ((?x29305 (- (- ?x29301 (* (* 2.0 l_0_10_214) l_0_10_221)) (* (* 2.0 l_0_10_215) l_0_10_222))))
 (let ((?x29309 (- (- ?x29305 (* (* 2.0 l_0_10_216) l_0_10_223)) (* (* 2.0 l_0_10_235) l_0_10_242))))
 (let ((?x29313 (- (- ?x29309 (* (* 2.0 l_0_10_236) l_0_10_243)) (* (* 2.0 l_0_10_237) l_0_10_244))))
 (let ((?x29318 (- (- (- ?x29313 ?x28701) (* (* 2.0 l_0_10_256) l_0_10_263)) (* (* 2.0 l_0_10_257) l_0_10_264))))
 (let ((?x29323 (+ (- (- (- ?x29318 (* (* 2.0 l_0_10_258) l_0_10_265)) ?x28703) ?x28705) ?x29188)))
 (let ((?x29334 (+ (- (- (- (- (- (+ ?x29323 ?x29190) ?x29325) ?x29327) ?x29329) ?x29192) ?x29194) ?x29333)))
 (= (- (- (+ (+ ?x29334 ?x29335) ?x29337) ?x29339) ?x29341) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x29413 (* ?x26135 l_0_10_81)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x29411 (* ?x26132 l_0_10_80)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x29409 (* ?x26129 l_0_10_79)))
 (let ((?x26126 (* 2.0 l_0_10_66)))
 (let ((?x29251 (* ?x26126 l_0_10_80)))
 (let ((?x26123 (* 2.0 l_0_10_65)))
 (let ((?x29249 (* ?x26123 l_0_10_79)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x29405 (* ?x26114 l_0_10_60)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x29403 (* ?x26111 l_0_10_59)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x29401 (* ?x26108 l_0_10_58)))
 (let ((?x26105 (* 2.0 l_0_10_45)))
 (let ((?x29247 (* ?x26105 l_0_10_59)))
 (let ((?x26102 (* 2.0 l_0_10_44)))
 (let ((?x29245 (* ?x26102 l_0_10_58)))
 (let ((?x26093 (* 12.0 l_0_10_27)))
 (let ((?x28769 (* ?x26093 l_0_10_39)))
 (let ((?x26090 (* 12.0 l_0_10_26)))
 (let ((?x28767 (* ?x26090 l_0_10_38)))
 (let ((?x26078 (* 12.0 l_0_10_25)))
 (let ((?x28765 (* ?x26078 l_0_10_37)))
 (let ((?x27131 (* 12.0 l_0_10_18)))
 (let ((?x28763 (* ?x27131 l_0_10_6)))
 (let ((?x27128 (* 12.0 l_0_10_17)))
 (let ((?x28761 (* ?x27128 l_0_10_5)))
 (let ((?x27125 (* 12.0 l_0_10_16)))
 (let ((?x28759 (* ?x27125 l_0_10_4)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28414 (* ?x26808 l_0_10_131)))
 (let ((?x29371 (+ (+ (+ (- (* (* (- 2.0) l_0_10_128) l_0_10_130) ?x28414) ?x28759) ?x28761) ?x28763)))
 (let ((?x29375 (- (- ?x29371 (* (* 2.0 l_0_10_193) l_0_10_205)) (* (* 2.0 l_0_10_194) l_0_10_206))))
 (let ((?x29379 (- (- ?x29375 (* (* 2.0 l_0_10_195) l_0_10_207)) (* (* 2.0 l_0_10_214) l_0_10_226))))
 (let ((?x29383 (- (- ?x29379 (* (* 2.0 l_0_10_215) l_0_10_227)) (* (* 2.0 l_0_10_216) l_0_10_228))))
 (let ((?x29387 (- (- ?x29383 (* (* 2.0 l_0_10_235) l_0_10_247)) (* (* 2.0 l_0_10_236) l_0_10_248))))
 (let ((?x29392 (- (- (- ?x29387 (* (* 2.0 l_0_10_237) l_0_10_249)) ?x28765) (* (* 2.0 l_0_10_256) l_0_10_268))))
 (let ((?x29396 (- (- ?x29392 (* (* 2.0 l_0_10_257) l_0_10_269)) (* (* 2.0 l_0_10_258) l_0_10_270))))
 (let ((?x29406 (- (- (- (+ (+ (- (- ?x29396 ?x28767) ?x28769) ?x29245) ?x29247) ?x29401) ?x29403) ?x29405)))
 (= (+ (+ (+ (- (- ?x29406 ?x29249) ?x29251) ?x29409) ?x29411) ?x29413) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x29551 (* ?x27310 l_0_10_96)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x29549 (* ?x27307 l_0_10_95)))
 (let ((?x28867 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x28864 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x28861 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x28858 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x28855 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x29517 (* l_0_10_267 l_0_10_267)))
 (let ((?x29515 (* l_0_10_266 l_0_10_266)))
 (let ((?x29513 (* l_0_10_265 l_0_10_265)))
 (let ((?x29511 (* l_0_10_264 l_0_10_264)))
 (let ((?x29509 (* l_0_10_263 l_0_10_263)))
 (let ((?x29507 (* l_0_10_246 l_0_10_246)))
 (let ((?x29505 (* l_0_10_245 l_0_10_245)))
 (let ((?x29503 (* l_0_10_244 l_0_10_244)))
 (let ((?x29501 (* l_0_10_243 l_0_10_243)))
 (let ((?x29499 (* l_0_10_242 l_0_10_242)))
 (let ((?x29497 (* l_0_10_225 l_0_10_225)))
 (let ((?x29495 (* l_0_10_224 l_0_10_224)))
 (let ((?x29493 (* l_0_10_223 l_0_10_223)))
 (let ((?x29491 (* l_0_10_222 l_0_10_222)))
 (let ((?x29489 (* l_0_10_221 l_0_10_221)))
 (let ((?x29487 (* l_0_10_204 l_0_10_204)))
 (let ((?x29485 (* l_0_10_203 l_0_10_203)))
 (let ((?x29483 (* l_0_10_202 l_0_10_202)))
 (let ((?x29481 (* l_0_10_201 l_0_10_201)))
 (let ((?x29479 (* l_0_10_200 l_0_10_200)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x16737 (* ?x27224 l_0_10_180)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x16734 (* ?x27221 l_0_10_179)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x16710 (* ?x27218 l_0_10_159)))
 (let ((?x27880 (* l_0_10_15 l_0_10_15)))
 (let ((?x28850 (* 6.0 ?x27880)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x16699 (* ?x27215 l_0_10_158)))
 (let ((?x27878 (* l_0_10_14 l_0_10_14)))
 (let ((?x28842 (* 6.0 ?x27878)))
 (let ((?x27876 (* l_0_10_13 l_0_10_13)))
 (let ((?x28834 (* 6.0 ?x27876)))
 (let ((?x27874 (* l_0_10_12 l_0_10_12)))
 (let ((?x28821 (* 6.0 ?x27874)))
 (let ((?x27930 (* l_0_10_11 l_0_10_11)))
 (let ((?x15260 (* 6.0 ?x27930)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x16663 (* ?x27203 l_0_10_117)))
 (let ((?x16687 (+ (+ (+ (+ (* (* 2.0 l_0_10_107) l_0_10_116) ?x16663) ?x15260) ?x28821) ?x28834)))
 (let ((?x29480 (- (- (- (+ (+ (+ (+ ?x16687 ?x28842) ?x16699) ?x28850) ?x16710) ?x16734) ?x16737) ?x29479)))
 (let ((?x29494 (- (- (- (- (- (- (- ?x29480 ?x29481) ?x29483) ?x29485) ?x29487) ?x29489) ?x29491) ?x29493)))
 (let ((?x29508 (- (- (- (- (- (- (- ?x29494 ?x29495) ?x29497) ?x29499) ?x29501) ?x29503) ?x29505) ?x29507)))
 (let ((?x29520 (- (- (- (- (- (- (- ?x29508 ?x29509) ?x29511) ?x29513) ?x29515) ?x29517) ?x28855) ?x28858)))
 (let ((?x29526 (- (- (- (- ?x29520 ?x28861) ?x28864) ?x28867) (* (* 1.0 l_0_10_53) l_0_10_53))))
 (let ((?x29532 (- (- ?x29526 (* (* 1.0 l_0_10_54) l_0_10_54)) (* (* 1.0 l_0_10_55) l_0_10_55))))
 (let ((?x29538 (- (- ?x29532 (* (* 1.0 l_0_10_56) l_0_10_56)) (* (* 1.0 l_0_10_57) l_0_10_57))))
 (let ((?x29542 (+ (+ ?x29538 (* 1.0 (* l_0_10_74 l_0_10_74))) (* 1.0 (* l_0_10_75 l_0_10_75)))))
 (let ((?x29546 (+ (+ ?x29542 (* 1.0 (* l_0_10_76 l_0_10_76))) (* 1.0 (* l_0_10_77 l_0_10_77)))))
 (= (- (- (+ ?x29546 (* 1.0 (* l_0_10_78 l_0_10_78))) ?x29549) ?x29551) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29735 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x29732 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x29729 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x29726 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x29723 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x29720 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x29717 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x29714 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x29711 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x29708 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x28983 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28980 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28977 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28974 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28971 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x29640 (* ?x27224 l_0_10_185)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x29638 (* ?x27221 l_0_10_184)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x29636 (* ?x27218 l_0_10_164)))
 (let ((?x28966 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x29633 (* ?x27215 l_0_10_163)))
 (let ((?x28955 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x13605 (* 12.0 l_0_10_13)))
 (let ((?x28943 (* ?x13605 l_0_10_18)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28475 (* ?x26808 l_0_10_138)))
 (let ((?x26797 (* 2.0 l_0_10_128)))
 (let ((?x14916 (* ?x26797 l_0_10_137)))
 (let ((?x13606 (* 12.0 l_0_10_12)))
 (let ((?x28940 (* ?x13606 l_0_10_17)))
 (let ((?x13602 (* 12.0 l_0_10_11)))
 (let ((?x28938 (* ?x13602 l_0_10_16)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x29625 (* ?x27203 l_0_10_122)))
 (let ((?x27200 (* 2.0 l_0_10_107)))
 (let ((?x29623 (* ?x27200 l_0_10_121)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x29621 (* ?x27998 l_0_10_87)))
 (let ((?x29627 (+ (+ (+ (- (* (* (- 2.0) l_0_10_100) l_0_10_86) ?x29621) ?x29623) ?x29625) ?x28938)))
 (let ((?x29635 (+ (+ (+ (+ (- (- (+ ?x29627 ?x28940) ?x14916) ?x28475) ?x28943) ?x28955) ?x29633) ?x28966)))
 (let ((?x29644 (- (- (- (+ ?x29635 ?x29636) ?x29638) ?x29640) (* (* 2.0 l_0_10_200) l_0_10_205))))
 (let ((?x29650 (- (- ?x29644 (* (* 2.0 l_0_10_201) l_0_10_206)) (* (* 2.0 l_0_10_202) l_0_10_207))))
 (let ((?x29656 (- (- ?x29650 (* (* 2.0 l_0_10_203) l_0_10_208)) (* (* 2.0 l_0_10_204) l_0_10_209))))
 (let ((?x29662 (- (- ?x29656 (* (* 2.0 l_0_10_221) l_0_10_226)) (* (* 2.0 l_0_10_222) l_0_10_227))))
 (let ((?x29668 (- (- ?x29662 (* (* 2.0 l_0_10_223) l_0_10_228)) (* (* 2.0 l_0_10_224) l_0_10_229))))
 (let ((?x29674 (- (- ?x29668 (* (* 2.0 l_0_10_225) l_0_10_230)) (* (* 2.0 l_0_10_242) l_0_10_247))))
 (let ((?x29680 (- (- ?x29674 (* (* 2.0 l_0_10_243) l_0_10_248)) (* (* 2.0 l_0_10_244) l_0_10_249))))
 (let ((?x29686 (- (- ?x29680 (* (* 2.0 l_0_10_245) l_0_10_250)) (* (* 2.0 l_0_10_246) l_0_10_251))))
 (let ((?x29692 (- (- ?x29686 (* (* 2.0 l_0_10_263) l_0_10_268)) (* (* 2.0 l_0_10_264) l_0_10_269))))
 (let ((?x29698 (- (- ?x29692 (* (* 2.0 l_0_10_265) l_0_10_270)) (* (* 2.0 l_0_10_266) l_0_10_271))))
 (let ((?x29704 (- (- (- (- ?x29698 (* (* 2.0 l_0_10_267) l_0_10_272)) ?x28971) ?x28974) ?x28977)))
 (let ((?x29721 (- (- (- (- (- (- (- ?x29704 ?x28980) ?x28983) ?x29708) ?x29711) ?x29714) ?x29717) ?x29720)))
 (= (+ (+ (+ (+ (+ ?x29721 ?x29723) ?x29726) ?x29729) ?x29732) ?x29735) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29096 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x29093 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x29090 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x29087 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x29084 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x29081 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x29869 (* l_0_10_273 l_0_10_273)))
 (let ((?x29867 (* l_0_10_272 l_0_10_272)))
 (let ((?x29865 (* l_0_10_271 l_0_10_271)))
 (let ((?x29863 (* l_0_10_270 l_0_10_270)))
 (let ((?x29861 (* l_0_10_269 l_0_10_269)))
 (let ((?x29859 (* l_0_10_268 l_0_10_268)))
 (let ((?x29857 (* l_0_10_252 l_0_10_252)))
 (let ((?x29855 (* l_0_10_251 l_0_10_251)))
 (let ((?x29853 (* l_0_10_250 l_0_10_250)))
 (let ((?x29851 (* l_0_10_249 l_0_10_249)))
 (let ((?x29849 (* l_0_10_248 l_0_10_248)))
 (let ((?x29847 (* l_0_10_247 l_0_10_247)))
 (let ((?x29845 (* l_0_10_231 l_0_10_231)))
 (let ((?x29843 (* l_0_10_230 l_0_10_230)))
 (let ((?x29841 (* l_0_10_229 l_0_10_229)))
 (let ((?x29839 (* l_0_10_228 l_0_10_228)))
 (let ((?x29837 (* l_0_10_227 l_0_10_227)))
 (let ((?x29835 (* l_0_10_226 l_0_10_226)))
 (let ((?x29833 (* l_0_10_210 l_0_10_210)))
 (let ((?x28165 (* l_0_10_21 l_0_10_21)))
 (let ((?x29078 (* 6.0 ?x28165)))
 (let ((?x29830 (* l_0_10_209 l_0_10_209)))
 (let ((?x29828 (* l_0_10_208 l_0_10_208)))
 (let ((?x29826 (* l_0_10_207 l_0_10_207)))
 (let ((?x29824 (* l_0_10_206 l_0_10_206)))
 (let ((?x29822 (* l_0_10_205 l_0_10_205)))
 (let ((?x28163 (* l_0_10_20 l_0_10_20)))
 (let ((?x29076 (* 6.0 ?x28163)))
 (let ((?x28161 (* l_0_10_19 l_0_10_19)))
 (let ((?x29074 (* 6.0 ?x28161)))
 (let ((?x28159 (* l_0_10_18 l_0_10_18)))
 (let ((?x29072 (* 6.0 ?x28159)))
 (let ((?x28157 (* l_0_10_17 l_0_10_17)))
 (let ((?x29070 (* 6.0 ?x28157)))
 (let ((?x28139 (* l_0_10_16 l_0_10_16)))
 (let ((?x29068 (* 6.0 ?x28139)))
 (let ((?x26808 (* 2.0 l_0_10_129)))
 (let ((?x28559 (* ?x26808 l_0_10_143)))
 (let ((?x29819 (+ (+ (+ (- (* (* (- 2.0) l_0_10_128) l_0_10_142) ?x28559) ?x29068) ?x29070) ?x29072)))
 (let ((?x29831 (- (- (- (- (- (+ (+ ?x29819 ?x29074) ?x29076) ?x29822) ?x29824) ?x29826) ?x29828) ?x29830)))
 (let ((?x29844 (- (- (- (- (- (- (+ ?x29831 ?x29078) ?x29833) ?x29835) ?x29837) ?x29839) ?x29841) ?x29843)))
 (let ((?x29858 (- (- (- (- (- (- (- ?x29844 ?x29845) ?x29847) ?x29849) ?x29851) ?x29853) ?x29855) ?x29857)))
 (let ((?x29871 (- (- (- (- (- (- (- ?x29858 ?x29859) ?x29861) ?x29863) ?x29865) ?x29867) ?x29869) ?x29081)))
 (let ((?x29879 (- (- (- (- (- (- ?x29871 ?x29084) ?x29087) ?x29090) ?x29093) ?x29096) (* (* 1.0 l_0_10_58) l_0_10_58))))
 (let ((?x29885 (- (- ?x29879 (* (* 1.0 l_0_10_59) l_0_10_59)) (* (* 1.0 l_0_10_60) l_0_10_60))))
 (let ((?x29891 (- (- ?x29885 (* (* 1.0 l_0_10_61) l_0_10_61)) (* (* 1.0 l_0_10_62) l_0_10_62))))
 (let ((?x29896 (+ (- ?x29891 (* (* 1.0 l_0_10_63) l_0_10_63)) (* 1.0 (* l_0_10_79 l_0_10_79)))))
 (let ((?x29900 (+ (+ ?x29896 (* 1.0 (* l_0_10_80 l_0_10_80))) (* 1.0 (* l_0_10_81 l_0_10_81)))))
 (let ((?x29904 (+ (+ ?x29900 (* 1.0 (* l_0_10_82 l_0_10_82))) (* 1.0 (* l_0_10_83 l_0_10_83)))))
 (= (+ ?x29904 (* 1.0 (* l_0_10_84 l_0_10_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28502 (* ?x27033 l_0_10_86)))
 (let ((?x26640 (* l_0_10_64 l_0_10_64)))
 (let ((?x28228 (* 3.0 ?x26640)))
 (let ((?x28225 (* (* 3.0 l_0_10_43) l_0_10_43)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28479 (* ?x26992 l_0_10_170)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28477 (* ?x26989 l_0_10_149)))
 (let ((?x29950 (+ (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_107) ?x28477) ?x28479) ?x28225) ?x28228)))
 (= (+ ?x29950 ?x28502) 0.0))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x29341 (* ?x27310 l_0_10_89)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x29339 (* ?x27307 l_0_10_88)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28271 (* ?x26637 l_0_10_67)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28264 (* ?x26625 l_0_10_46)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x29294 (* ?x27224 l_0_10_173)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x29292 (* ?x27221 l_0_10_172)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x29290 (* ?x27218 l_0_10_152)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x29288 (* ?x27215 l_0_10_151)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x16347 (* ?x27203 l_0_10_110)))
 (let ((?x29960 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_109) ?x16347) ?x29288) ?x29290) ?x29292)))
 (= (+ (+ (+ (- (+ ?x29960 ?x29294) ?x28264) ?x28271) ?x29339) ?x29341) 0.0)))))))))))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x27311 (* ?x27310 l_0_10_92)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x27308 (* ?x27307 l_0_10_91)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x26763 (* ?x26637 l_0_10_70)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x26755 (* ?x26625 l_0_10_49)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x27225 (* ?x27224 l_0_10_176)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x27222 (* ?x27221 l_0_10_175)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x27219 (* ?x27218 l_0_10_155)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x27216 (* ?x27215 l_0_10_154)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x27204 (* ?x27203 l_0_10_113)))
 (let ((?x17587 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_112) ?x27204) ?x27216) ?x27219) ?x27222)))
 (= (+ (+ (+ (- (+ ?x17587 ?x27225) ?x26755) ?x26763) ?x27308) ?x27311) 0.0)))))))))))))))))))))
(assert
 (let ((?x27310 (* 2.0 l_0_10_87)))
 (let ((?x29551 (* ?x27310 l_0_10_96)))
 (let ((?x27307 (* 2.0 l_0_10_86)))
 (let ((?x29549 (* ?x27307 l_0_10_95)))
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28327 (* ?x26637 l_0_10_74)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28321 (* ?x26625 l_0_10_53)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x16737 (* ?x27224 l_0_10_180)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x16734 (* ?x27221 l_0_10_179)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x16710 (* ?x27218 l_0_10_159)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x16699 (* ?x27215 l_0_10_158)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x16663 (* ?x27203 l_0_10_117)))
 (let ((?x17743 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_116) ?x16663) ?x16699) ?x16710) ?x16734)))
 (= (+ (+ (+ (- (+ ?x17743 ?x16737) ?x28321) ?x28327) ?x29549) ?x29551) 0.0)))))))))))))))))))))
(assert
 (let ((?x26637 (* 6.0 l_0_10_64)))
 (let ((?x28389 (* ?x26637 l_0_10_79)))
 (let ((?x26625 (* 6.0 l_0_10_43)))
 (let ((?x28383 (* ?x26625 l_0_10_58)))
 (let ((?x27224 (* 2.0 l_0_10_171)))
 (let ((?x29640 (* ?x27224 l_0_10_185)))
 (let ((?x27221 (* 2.0 l_0_10_170)))
 (let ((?x29638 (* ?x27221 l_0_10_184)))
 (let ((?x27218 (* 2.0 l_0_10_150)))
 (let ((?x29636 (* ?x27218 l_0_10_164)))
 (let ((?x27215 (* 2.0 l_0_10_149)))
 (let ((?x29633 (* ?x27215 l_0_10_163)))
 (let ((?x27203 (* 2.0 l_0_10_108)))
 (let ((?x29625 (* ?x27203 l_0_10_122)))
 (let ((?x27200 (* 2.0 l_0_10_107)))
 (let ((?x29623 (* ?x27200 l_0_10_121)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x29621 (* ?x27998 l_0_10_87)))
 (let ((?x17681 (- (- (- (+ (* (* 2.0 l_0_10_100) l_0_10_86) ?x29621) ?x29623) ?x29625) ?x29633)))
 (= (+ (- (+ (+ (- ?x17681 ?x29636) ?x29638) ?x29640) ?x28383) ?x28389) 0.0)))))))))))))))))))))
(assert
 (let ((?x26371 (* l_0_10_69 l_0_10_69)))
 (let ((?x28654 (* 3.0 ?x26371)))
 (let ((?x26368 (* l_0_10_68 l_0_10_68)))
 (let ((?x28652 (* 3.0 ?x26368)))
 (let ((?x26365 (* l_0_10_67 l_0_10_67)))
 (let ((?x28650 (* 3.0 ?x26365)))
 (let ((?x28645 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x28642 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x17845 (+ (+ (- (- (* (* (- 3.0) l_0_10_46) l_0_10_46) ?x28642) ?x28645) ?x28650) ?x28652)))
 (= (+ ?x17845 ?x28654) 0.0)))))))))))
(assert
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x26894 (* ?x26893 l_0_10_72)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x26891 (* ?x26890 l_0_10_71)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x26888 (* ?x26887 l_0_10_70)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x26882 (* ?x26881 l_0_10_51)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x26879 (* ?x26878 l_0_10_50)))
 (let ((?x29980 (+ (+ (- (- (* (* (- 6.0) l_0_10_46) l_0_10_49) ?x26879) ?x26882) ?x26888) ?x26891)))
 (= (+ ?x29980 ?x26894) 0.0)))))))))))))
(assert
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x28719 (* ?x26893 l_0_10_76)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x28717 (* ?x26890 l_0_10_75)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x28715 (* ?x26887 l_0_10_74)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x28712 (* ?x26881 l_0_10_55)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x28710 (* ?x26878 l_0_10_54)))
 (let ((?x29987 (+ (+ (- (- (* (* (- 6.0) l_0_10_46) l_0_10_53) ?x28710) ?x28712) ?x28715) ?x28717)))
 (= (+ ?x29987 ?x28719) 0.0)))))))))))))
(assert
 (let ((?x26893 (* 6.0 l_0_10_69)))
 (let ((?x28783 (* ?x26893 l_0_10_81)))
 (let ((?x26890 (* 6.0 l_0_10_68)))
 (let ((?x28781 (* ?x26890 l_0_10_80)))
 (let ((?x26887 (* 6.0 l_0_10_67)))
 (let ((?x28779 (* ?x26887 l_0_10_79)))
 (let ((?x26881 (* 6.0 l_0_10_48)))
 (let ((?x28776 (* ?x26881 l_0_10_60)))
 (let ((?x26878 (* 6.0 l_0_10_47)))
 (let ((?x28774 (* ?x26878 l_0_10_59)))
 (let ((?x29993 (+ (+ (- (- (* (* (- 6.0) l_0_10_46) l_0_10_58) ?x28774) ?x28776) ?x28779) ?x28781)))
 (= (+ ?x29993 ?x28783) 0.0)))))))))))))
(assert
 (let ((?x26494 (* l_0_10_73 l_0_10_73)))
 (let ((?x26954 (* 3.0 ?x26494)))
 (let ((?x26491 (* l_0_10_72 l_0_10_72)))
 (let ((?x26952 (* 3.0 ?x26491)))
 (let ((?x26488 (* l_0_10_71 l_0_10_71)))
 (let ((?x26950 (* 3.0 ?x26488)))
 (let ((?x26485 (* l_0_10_70 l_0_10_70)))
 (let ((?x26948 (* 3.0 ?x26485)))
 (let ((?x26945 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x26942 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x26939 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x30006 (+ (- (- (- (* (* (- 3.0) l_0_10_49) l_0_10_49) ?x26939) ?x26942) ?x26945) ?x26948)))
 (= (+ (+ (+ ?x30006 ?x26950) ?x26952) ?x26954) 0.0))))))))))))))
(assert
 (let ((?x27030 (* 6.0 l_0_10_73)))
 (let ((?x27031 (* ?x27030 l_0_10_77)))
 (let ((?x27027 (* 6.0 l_0_10_72)))
 (let ((?x27028 (* ?x27027 l_0_10_76)))
 (let ((?x27024 (* 6.0 l_0_10_71)))
 (let ((?x27025 (* ?x27024 l_0_10_75)))
 (let ((?x27021 (* 6.0 l_0_10_70)))
 (let ((?x27022 (* ?x27021 l_0_10_74)))
 (let ((?x27018 (* 6.0 l_0_10_52)))
 (let ((?x27019 (* ?x27018 l_0_10_56)))
 (let ((?x27015 (* 6.0 l_0_10_51)))
 (let ((?x27016 (* ?x27015 l_0_10_55)))
 (let ((?x27012 (* 6.0 l_0_10_50)))
 (let ((?x27013 (* ?x27012 l_0_10_54)))
 (let ((?x30016 (+ (- (- (- (* (* (- 6.0) l_0_10_49) l_0_10_53) ?x27013) ?x27016) ?x27019) ?x27022)))
 (= (+ (+ (+ ?x30016 ?x27025) ?x27028) ?x27031) 0.0)))))))))))))))))
(assert
 (let ((?x27030 (* 6.0 l_0_10_73)))
 (let ((?x27158 (* ?x27030 l_0_10_82)))
 (let ((?x27027 (* 6.0 l_0_10_72)))
 (let ((?x27156 (* ?x27027 l_0_10_81)))
 (let ((?x27024 (* 6.0 l_0_10_71)))
 (let ((?x27154 (* ?x27024 l_0_10_80)))
 (let ((?x27021 (* 6.0 l_0_10_70)))
 (let ((?x27152 (* ?x27021 l_0_10_79)))
 (let ((?x27018 (* 6.0 l_0_10_52)))
 (let ((?x27150 (* ?x27018 l_0_10_61)))
 (let ((?x27015 (* 6.0 l_0_10_51)))
 (let ((?x27148 (* ?x27015 l_0_10_60)))
 (let ((?x27012 (* 6.0 l_0_10_50)))
 (let ((?x27146 (* ?x27012 l_0_10_59)))
 (let ((?x30029 (+ (- (- (- (* (* (- 6.0) l_0_10_49) l_0_10_58) ?x27146) ?x27148) ?x27150) ?x27152)))
 (= (+ (+ (+ ?x30029 ?x27154) ?x27156) ?x27158) 0.0)))))))))))))))))
(assert
 (let ((?x28896 (* l_0_10_78 l_0_10_78)))
 (let ((?x28897 (* 3.0 ?x28896)))
 (let ((?x28893 (* l_0_10_77 l_0_10_77)))
 (let ((?x28894 (* 3.0 ?x28893)))
 (let ((?x28890 (* l_0_10_76 l_0_10_76)))
 (let ((?x28891 (* 3.0 ?x28890)))
 (let ((?x28887 (* l_0_10_75 l_0_10_75)))
 (let ((?x28888 (* 3.0 ?x28887)))
 (let ((?x28884 (* l_0_10_74 l_0_10_74)))
 (let ((?x28885 (* 3.0 ?x28884)))
 (let ((?x28882 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x28879 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x28876 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x28873 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x30043 (- (- (- (- (* (* (- 3.0) l_0_10_53) l_0_10_53) ?x28873) ?x28876) ?x28879) ?x28882)))
 (= (+ (+ (+ (+ (+ ?x30043 ?x28885) ?x28888) ?x28891) ?x28894) ?x28897) 0.0)))))))))))))))))
(assert
 (let ((?x29013 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x29010 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x29007 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x29004 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x29001 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x28998 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x28995 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x28992 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x28989 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x30054 (- (- (- (- (* (* (- 6.0) l_0_10_53) l_0_10_58) ?x28989) ?x28992) ?x28995) ?x28998)))
 (= (+ (+ (+ (+ (+ ?x30054 ?x29001) ?x29004) ?x29007) ?x29010) ?x29013) 0.0))))))))))))
(assert
 (let ((?x29131 (* l_0_10_84 l_0_10_84)))
 (let ((?x29132 (* 3.0 ?x29131)))
 (let ((?x29128 (* l_0_10_83 l_0_10_83)))
 (let ((?x29129 (* 3.0 ?x29128)))
 (let ((?x29125 (* l_0_10_82 l_0_10_82)))
 (let ((?x29126 (* 3.0 ?x29125)))
 (let ((?x29122 (* l_0_10_81 l_0_10_81)))
 (let ((?x29123 (* 3.0 ?x29122)))
 (let ((?x29119 (* l_0_10_80 l_0_10_80)))
 (let ((?x29120 (* 3.0 ?x29119)))
 (let ((?x29116 (* l_0_10_79 l_0_10_79)))
 (let ((?x29117 (* 3.0 ?x29116)))
 (let ((?x29114 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x29111 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x29108 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x29105 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x29102 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x30065 (- (- (- (- (* (* (- 3.0) l_0_10_58) l_0_10_58) ?x29102) ?x29105) ?x29108) ?x29111)))
 (let ((?x30072 (+ (+ (+ (+ (+ (+ (- ?x30065 ?x29114) ?x29117) ?x29120) ?x29123) ?x29126) ?x29129) ?x29132)))
 (= ?x30072 0.0)))))))))))))))))))))
(assert
 (let ((?x26371 (* l_0_10_69 l_0_10_69)))
 (let ((?x26368 (* l_0_10_68 l_0_10_68)))
 (let ((?x26365 (* l_0_10_67 l_0_10_67)))
 (let ((?x26406 (* l_0_10_48 l_0_10_48)))
 (let ((?x30076 (- (+ (+ (* l_0_10_46 l_0_10_46) (* l_0_10_47 l_0_10_47)) ?x26406) ?x26365)))
 (= (- (- ?x30076 ?x26368) ?x26371) 0.0)))))))
(assert
 (let ((?x30119 (* l_0_10_90 l_0_10_90)))
 (let ((?x30117 (* l_0_10_89 l_0_10_89)))
 (let ((?x30115 (* l_0_10_88 l_0_10_88)))
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x29337 (* ?x26135 l_0_10_76)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x29335 (* ?x26132 l_0_10_75)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x29333 (* ?x26129 l_0_10_74)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x29329 (* ?x26114 l_0_10_55)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x29327 (* ?x26111 l_0_10_54)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x29325 (* ?x26108 l_0_10_53)))
 (let ((?x30107 (* l_0_10_174 l_0_10_174)))
 (let ((?x30105 (* l_0_10_173 l_0_10_173)))
 (let ((?x30103 (* l_0_10_172 l_0_10_172)))
 (let ((?x30101 (* l_0_10_153 l_0_10_153)))
 (let ((?x30099 (* l_0_10_152 l_0_10_152)))
 (let ((?x30097 (* l_0_10_151 l_0_10_151)))
 (let ((?x30095 (* l_0_10_111 l_0_10_111)))
 (let ((?x30096 (+ (+ (* l_0_10_109 l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x30095)))
 (let ((?x30109 (+ (- (- (- (+ (+ (+ ?x30096 ?x30097) ?x30099) ?x30101) ?x30103) ?x30105) ?x30107) ?x29325)))
 (let ((?x30118 (- (- (- (- (- (+ (+ ?x30109 ?x29327) ?x29329) ?x29333) ?x29335) ?x29337) ?x30115) ?x30117)))
 (= (- ?x30118 ?x30119) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26135 (* 2.0 l_0_10_69)))
 (let ((?x29413 (* ?x26135 l_0_10_81)))
 (let ((?x26132 (* 2.0 l_0_10_68)))
 (let ((?x29411 (* ?x26132 l_0_10_80)))
 (let ((?x26129 (* 2.0 l_0_10_67)))
 (let ((?x29409 (* ?x26129 l_0_10_79)))
 (let ((?x26114 (* 2.0 l_0_10_48)))
 (let ((?x29405 (* ?x26114 l_0_10_60)))
 (let ((?x26111 (* 2.0 l_0_10_47)))
 (let ((?x29403 (* ?x26111 l_0_10_59)))
 (let ((?x26108 (* 2.0 l_0_10_46)))
 (let ((?x29401 (* ?x26108 l_0_10_58)))
 (let ((?x28631 (* l_0_10_132 l_0_10_132)))
 (let ((?x30132 (- (- (* (- l_0_10_130) l_0_10_130) (* l_0_10_131 l_0_10_131)) ?x28631)))
 (= (- (- (- (+ (+ (+ ?x30132 ?x29401) ?x29403) ?x29405) ?x29409) ?x29411) ?x29413) 0.0))))))))))))))))
(assert
 (let ((?x27646 (* 2.0 l_0_10_90)))
 (let ((?x30162 (* ?x27646 l_0_10_97)))
 (let ((?x27643 (* 2.0 l_0_10_89)))
 (let ((?x30160 (* ?x27643 l_0_10_96)))
 (let ((?x27640 (* 2.0 l_0_10_88)))
 (let ((?x30158 (* ?x27640 l_0_10_95)))
 (let ((?x28896 (* l_0_10_78 l_0_10_78)))
 (let ((?x28893 (* l_0_10_77 l_0_10_77)))
 (let ((?x28890 (* l_0_10_76 l_0_10_76)))
 (let ((?x28887 (* l_0_10_75 l_0_10_75)))
 (let ((?x28884 (* l_0_10_74 l_0_10_74)))
 (let ((?x15491 (* l_0_10_57 l_0_10_57)))
 (let ((?x15438 (* l_0_10_56 l_0_10_56)))
 (let ((?x15436 (* l_0_10_55 l_0_10_55)))
 (let ((?x15426 (* l_0_10_54 l_0_10_54)))
 (let ((?x15364 (* l_0_10_53 l_0_10_53)))
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x30146 (* ?x27623 l_0_10_181)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x30144 (* ?x27620 l_0_10_180)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x30142 (* ?x27617 l_0_10_179)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x18233 (* ?x27614 l_0_10_160)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x17981 (* ?x27611 l_0_10_159)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x18299 (* ?x27608 l_0_10_158)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x18311 (* ?x27600 l_0_10_118)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x18315 (* ?x27597 l_0_10_117)))
 (let ((?x17982 (+ (+ (+ (+ (* (* 2.0 l_0_10_109) l_0_10_116) ?x18315) ?x18311) ?x18299) ?x17981)))
 (let ((?x30150 (+ (+ (+ (- (- (- (+ ?x17982 ?x18233) ?x30142) ?x30144) ?x30146) ?x15364) ?x15426) ?x15436)))
 (let ((?x30157 (- (- (- (- (- (+ (+ ?x30150 ?x15438) ?x15491) ?x28884) ?x28887) ?x28890) ?x28893) ?x28896)))
 (= (- (- (- ?x30157 ?x30158) ?x30160) ?x30162) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29735 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x29732 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x29729 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x29726 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x29723 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x29720 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x29717 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x29714 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x29711 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x29708 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x30208 (* ?x27623 l_0_10_186)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x30206 (* ?x27620 l_0_10_185)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x30204 (* ?x27617 l_0_10_184)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x30202 (* ?x27614 l_0_10_165)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x30200 (* ?x27611 l_0_10_164)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x30198 (* ?x27608 l_0_10_163)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x28695 (* ?x26865 l_0_10_139)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x28693 (* ?x26862 l_0_10_138)))
 (let ((?x13532 (* 2.0 l_0_10_130)))
 (let ((?x28691 (* ?x13532 l_0_10_137)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x30193 (* ?x27600 l_0_10_123)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x30191 (* ?x27597 l_0_10_122)))
 (let ((?x27593 (* 2.0 l_0_10_109)))
 (let ((?x30189 (* ?x27593 l_0_10_121)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x18523 (* ?x28001 l_0_10_90)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x18615 (* ?x27998 l_0_10_89)))
 (let ((?x30192 (+ (+ (- (- (* (* (- 2.0) l_0_10_100) l_0_10_88) ?x18615) ?x18523) ?x30189) ?x30191)))
 (let ((?x30203 (+ (+ (+ (- (- (- (+ ?x30192 ?x30193) ?x28691) ?x28693) ?x28695) ?x30198) ?x30200) ?x30202)))
 (let ((?x30213 (+ (+ (+ (+ (- (- (- ?x30203 ?x30204) ?x30206) ?x30208) ?x29708) ?x29711) ?x29714) ?x29717)))
 (= (- (- (- (- (- (+ ?x30213 ?x29720) ?x29723) ?x29726) ?x29729) ?x29732) ?x29735) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29131 (* l_0_10_84 l_0_10_84)))
 (let ((?x29128 (* l_0_10_83 l_0_10_83)))
 (let ((?x29125 (* l_0_10_82 l_0_10_82)))
 (let ((?x29122 (* l_0_10_81 l_0_10_81)))
 (let ((?x29119 (* l_0_10_80 l_0_10_80)))
 (let ((?x29116 (* l_0_10_79 l_0_10_79)))
 (let ((?x16069 (* l_0_10_63 l_0_10_63)))
 (let ((?x16057 (* l_0_10_62 l_0_10_62)))
 (let ((?x16051 (* l_0_10_61 l_0_10_61)))
 (let ((?x16041 (* l_0_10_60 l_0_10_60)))
 (let ((?x16015 (* l_0_10_59 l_0_10_59)))
 (let ((?x15880 (* l_0_10_58 l_0_10_58)))
 (let ((?x26865 (* 2.0 l_0_10_132)))
 (let ((?x28757 (* ?x26865 l_0_10_144)))
 (let ((?x26862 (* 2.0 l_0_10_131)))
 (let ((?x15047 (* ?x26862 l_0_10_143)))
 (let ((?x30267 (+ (+ (- (- (* (* (- 2.0) l_0_10_130) l_0_10_142) ?x15047) ?x28757) ?x15880) ?x16015)))
 (let ((?x30274 (- (- (- (+ (+ (+ (+ ?x30267 ?x16041) ?x16051) ?x16057) ?x16069) ?x29116) ?x29119) ?x29122)))
 (= (- (- (- ?x30274 ?x29125) ?x29128) ?x29131) 0.0))))))))))))))))))))
(assert
 (let ((?x30317 (* l_0_10_99 l_0_10_99)))
 (let ((?x30315 (* l_0_10_98 l_0_10_98)))
 (let ((?x30313 (* l_0_10_97 l_0_10_97)))
 (let ((?x30311 (* l_0_10_96 l_0_10_96)))
 (let ((?x30309 (* l_0_10_95 l_0_10_95)))
 (let ((?x30307 (* l_0_10_183 l_0_10_183)))
 (let ((?x30305 (* l_0_10_182 l_0_10_182)))
 (let ((?x30303 (* l_0_10_181 l_0_10_181)))
 (let ((?x30301 (* l_0_10_180 l_0_10_180)))
 (let ((?x30299 (* l_0_10_179 l_0_10_179)))
 (let ((?x30297 (* l_0_10_162 l_0_10_162)))
 (let ((?x30295 (* l_0_10_161 l_0_10_161)))
 (let ((?x30293 (* l_0_10_160 l_0_10_160)))
 (let ((?x30291 (* l_0_10_159 l_0_10_159)))
 (let ((?x30289 (* l_0_10_158 l_0_10_158)))
 (let ((?x30287 (* l_0_10_120 l_0_10_120)))
 (let ((?x30285 (* l_0_10_119 l_0_10_119)))
 (let ((?x30283 (* l_0_10_118 l_0_10_118)))
 (let ((?x30284 (+ (+ (* l_0_10_116 l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x30283)))
 (let ((?x30298 (+ (+ (+ (+ (+ (+ (+ ?x30284 ?x30285) ?x30287) ?x30289) ?x30291) ?x30293) ?x30295) ?x30297)))
 (let ((?x30312 (- (- (- (- (- (- (- ?x30298 ?x30299) ?x30301) ?x30303) ?x30305) ?x30307) ?x30309) ?x30311)))
 (= (- (- (- ?x30312 ?x30313) ?x30315) ?x30317) 0.0)))))))))))))))))))))))
(assert
 (let ((?x30390 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x30387 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x30384 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x30381 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x30378 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x30375 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x30372 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x30369 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x30366 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x30363 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x28846 (* l_0_10_141 l_0_10_141)))
 (let ((?x28844 (* l_0_10_140 l_0_10_140)))
 (let ((?x28840 (* l_0_10_139 l_0_10_139)))
 (let ((?x28838 (* l_0_10_138 l_0_10_138)))
 (let ((?x28836 (* l_0_10_137 l_0_10_137)))
 (let ((?x30355 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x30352 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x30349 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x30346 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x30343 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x30340 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x28004 (* 2.0 l_0_10_103)))
 (let ((?x30337 (* ?x28004 l_0_10_98)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x30335 (* ?x28001 l_0_10_97)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x30333 (* ?x27998 l_0_10_96)))
 (let ((?x30341 (- (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_95) ?x30333) ?x30335) ?x30337) ?x30340)))
 (let ((?x30358 (- (- (+ (+ (+ (+ (+ ?x30341 ?x30343) ?x30346) ?x30349) ?x30352) ?x30355) ?x28836) ?x28838)))
 (let ((?x30373 (+ (+ (+ (+ (- (- (- ?x30358 ?x28840) ?x28844) ?x28846) ?x30363) ?x30366) ?x30369) ?x30372)))
 (= (- (- (- (- (- (+ ?x30373 ?x30375) ?x30378) ?x30381) ?x30384) ?x30387) ?x30390) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x30482 (* l_0_10_189 l_0_10_189)))
 (let ((?x30480 (* l_0_10_188 l_0_10_188)))
 (let ((?x30478 (* l_0_10_187 l_0_10_187)))
 (let ((?x30476 (* l_0_10_186 l_0_10_186)))
 (let ((?x30474 (* l_0_10_185 l_0_10_185)))
 (let ((?x30472 (* l_0_10_184 l_0_10_184)))
 (let ((?x30470 (* l_0_10_168 l_0_10_168)))
 (let ((?x30468 (* l_0_10_167 l_0_10_167)))
 (let ((?x30466 (* l_0_10_166 l_0_10_166)))
 (let ((?x30464 (* l_0_10_165 l_0_10_165)))
 (let ((?x30462 (* l_0_10_164 l_0_10_164)))
 (let ((?x30460 (* l_0_10_163 l_0_10_163)))
 (let ((?x28961 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28958 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28952 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28949 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28946 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x30453 (* l_0_10_126 l_0_10_126)))
 (let ((?x30451 (* l_0_10_125 l_0_10_125)))
 (let ((?x30449 (* l_0_10_124 l_0_10_124)))
 (let ((?x30447 (* l_0_10_123 l_0_10_123)))
 (let ((?x30445 (* l_0_10_122 l_0_10_122)))
 (let ((?x30443 (* l_0_10_121 l_0_10_121)))
 (let ((?x30441 (* l_0_10_105 l_0_10_105)))
 (let ((?x30439 (* l_0_10_104 l_0_10_104)))
 (let ((?x30437 (* l_0_10_103 l_0_10_103)))
 (let ((?x30435 (* l_0_10_102 l_0_10_102)))
 (let ((?x30436 (- (- (* (- l_0_10_100) l_0_10_100) (* l_0_10_101 l_0_10_101)) ?x30435)))
 (let ((?x30450 (+ (+ (+ (+ (- (- (- ?x30436 ?x30437) ?x30439) ?x30441) ?x30443) ?x30445) ?x30447) ?x30449)))
 (let ((?x30459 (- (- (- (- (- (+ (+ ?x30450 ?x30451) ?x30453) ?x28946) ?x28949) ?x28952) ?x28958) ?x28961)))
 (let ((?x30473 (- (+ (+ (+ (+ (+ (+ ?x30459 ?x30460) ?x30462) ?x30464) ?x30466) ?x30468) ?x30470) ?x30472)))
 (= (- (- (- (- (- ?x30473 ?x30474) ?x30476) ?x30478) ?x30480) ?x30482) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x28333 (* l_0_10_85 l_0_10_85)))
 (let ((?x28317 (* l_0_10_169 l_0_10_169)))
 (let ((?x30524 (+ (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_148 l_0_10_148)) ?x28317)))
 (= (+ ?x30524 ?x28333) 0.0)))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28721 (* ?x27033 l_0_10_88)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28699 (* ?x26992 l_0_10_172)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28697 (* ?x26989 l_0_10_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_109) ?x28697) ?x28699) ?x28721) 0.0))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x27034 (* ?x27033 l_0_10_91)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x26993 (* ?x26992 l_0_10_175)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x26990 (* ?x26989 l_0_10_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x26990) ?x26993) ?x27034) 0.0))))))))
(assert
 (let ((?x27033 (* 2.0 l_0_10_85)))
 (let ((?x28899 (* ?x27033 l_0_10_95)))
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28852 (* ?x26992 l_0_10_179)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28848 (* ?x26989 l_0_10_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_116) ?x28848) ?x28852) ?x28899) 0.0))))))))
(assert
 (let ((?x26992 (* 2.0 l_0_10_169)))
 (let ((?x28968 (* ?x26992 l_0_10_184)))
 (let ((?x26989 (* 2.0 l_0_10_148)))
 (let ((?x28963 (* ?x26989 l_0_10_163)))
 (let ((?x13590 (* 2.0 l_0_10_106)))
 (let ((?x28936 (* ?x13590 l_0_10_121)))
 (= (+ (- (- (* (* 2.0 l_0_10_100) l_0_10_85) ?x28936) ?x28963) ?x28968) 0.0))))))))
(assert
 (let ((?x30119 (* l_0_10_90 l_0_10_90)))
 (let ((?x30117 (* l_0_10_89 l_0_10_89)))
 (let ((?x30115 (* l_0_10_88 l_0_10_88)))
 (let ((?x30107 (* l_0_10_174 l_0_10_174)))
 (let ((?x30105 (* l_0_10_173 l_0_10_173)))
 (let ((?x30103 (* l_0_10_172 l_0_10_172)))
 (let ((?x30101 (* l_0_10_153 l_0_10_153)))
 (let ((?x30099 (* l_0_10_152 l_0_10_152)))
 (let ((?x30097 (* l_0_10_151 l_0_10_151)))
 (let ((?x30095 (* l_0_10_111 l_0_10_111)))
 (let ((?x30544 (- (- (* (- l_0_10_109) l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x30095)))
 (let ((?x30551 (+ (+ (+ (+ (- (- (- ?x30544 ?x30097) ?x30099) ?x30101) ?x30103) ?x30105) ?x30107) ?x30115)))
 (= (+ (+ ?x30551 ?x30117) ?x30119) 0.0))))))))))))))
(assert
 (let ((?x27646 (* 2.0 l_0_10_90)))
 (let ((?x27647 (* ?x27646 l_0_10_93)))
 (let ((?x27643 (* 2.0 l_0_10_89)))
 (let ((?x27644 (* ?x27643 l_0_10_92)))
 (let ((?x27640 (* 2.0 l_0_10_88)))
 (let ((?x27641 (* ?x27640 l_0_10_91)))
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x27624 (* ?x27623 l_0_10_177)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x27621 (* ?x27620 l_0_10_176)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x27618 (* ?x27617 l_0_10_175)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x27615 (* ?x27614 l_0_10_156)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x27612 (* ?x27611 l_0_10_155)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x27609 (* ?x27608 l_0_10_154)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x27601 (* ?x27600 l_0_10_114)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x27598 (* ?x27597 l_0_10_113)))
 (let ((?x19316 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_112) ?x27598) ?x27601) ?x27609) ?x27612)))
 (let ((?x30567 (+ (+ (+ (+ (+ (+ (- ?x19316 ?x27615) ?x27618) ?x27621) ?x27624) ?x27641) ?x27644) ?x27647)))
 (= ?x30567 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27646 (* 2.0 l_0_10_90)))
 (let ((?x30162 (* ?x27646 l_0_10_97)))
 (let ((?x27643 (* 2.0 l_0_10_89)))
 (let ((?x30160 (* ?x27643 l_0_10_96)))
 (let ((?x27640 (* 2.0 l_0_10_88)))
 (let ((?x30158 (* ?x27640 l_0_10_95)))
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x30146 (* ?x27623 l_0_10_181)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x30144 (* ?x27620 l_0_10_180)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x30142 (* ?x27617 l_0_10_179)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x18233 (* ?x27614 l_0_10_160)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x17981 (* ?x27611 l_0_10_159)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x18299 (* ?x27608 l_0_10_158)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x18311 (* ?x27600 l_0_10_118)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x18315 (* ?x27597 l_0_10_117)))
 (let ((?x19411 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_116) ?x18315) ?x18311) ?x18299) ?x17981)))
 (let ((?x30571 (+ (+ (+ (+ (+ (+ (- ?x19411 ?x18233) ?x30142) ?x30144) ?x30146) ?x30158) ?x30160) ?x30162)))
 (= ?x30571 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27623 (* 2.0 l_0_10_174)))
 (let ((?x30208 (* ?x27623 l_0_10_186)))
 (let ((?x27620 (* 2.0 l_0_10_173)))
 (let ((?x30206 (* ?x27620 l_0_10_185)))
 (let ((?x27617 (* 2.0 l_0_10_172)))
 (let ((?x30204 (* ?x27617 l_0_10_184)))
 (let ((?x27614 (* 2.0 l_0_10_153)))
 (let ((?x30202 (* ?x27614 l_0_10_165)))
 (let ((?x27611 (* 2.0 l_0_10_152)))
 (let ((?x30200 (* ?x27611 l_0_10_164)))
 (let ((?x27608 (* 2.0 l_0_10_151)))
 (let ((?x30198 (* ?x27608 l_0_10_163)))
 (let ((?x27600 (* 2.0 l_0_10_111)))
 (let ((?x30193 (* ?x27600 l_0_10_123)))
 (let ((?x27597 (* 2.0 l_0_10_110)))
 (let ((?x30191 (* ?x27597 l_0_10_122)))
 (let ((?x27593 (* 2.0 l_0_10_109)))
 (let ((?x30189 (* ?x27593 l_0_10_121)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x18523 (* ?x28001 l_0_10_90)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x18615 (* ?x27998 l_0_10_89)))
 (let ((?x18401 (- (- (+ (+ (* (* 2.0 l_0_10_100) l_0_10_88) ?x18615) ?x18523) ?x30189) ?x30191)))
 (let ((?x30578 (+ (+ (+ (- (- (- (- ?x18401 ?x30193) ?x30198) ?x30200) ?x30202) ?x30204) ?x30206) ?x30208)))
 (= ?x30578 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27787 (* l_0_10_94 l_0_10_94)))
 (let ((?x27785 (* l_0_10_93 l_0_10_93)))
 (let ((?x27783 (* l_0_10_92 l_0_10_92)))
 (let ((?x27781 (* l_0_10_91 l_0_10_91)))
 (let ((?x27767 (* l_0_10_178 l_0_10_178)))
 (let ((?x27765 (* l_0_10_177 l_0_10_177)))
 (let ((?x27763 (* l_0_10_176 l_0_10_176)))
 (let ((?x27761 (* l_0_10_175 l_0_10_175)))
 (let ((?x27759 (* l_0_10_157 l_0_10_157)))
 (let ((?x27757 (* l_0_10_156 l_0_10_156)))
 (let ((?x27755 (* l_0_10_155 l_0_10_155)))
 (let ((?x27753 (* l_0_10_154 l_0_10_154)))
 (let ((?x27747 (* l_0_10_115 l_0_10_115)))
 (let ((?x27745 (* l_0_10_114 l_0_10_114)))
 (let ((?x19538 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x27745)))
 (let ((?x30582 (+ (+ (- (- (- (- (- ?x19538 ?x27747) ?x27753) ?x27755) ?x27757) ?x27759) ?x27761) ?x27763)))
 (= (+ (+ (+ (+ (+ (+ ?x30582 ?x27765) ?x27767) ?x27781) ?x27783) ?x27785) ?x27787) 0.0))))))))))))))))))
(assert
 (let ((?x27926 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x27923 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x27920 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x27917 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x27903 (* 2.0 l_0_10_178)))
 (let ((?x27904 (* ?x27903 l_0_10_182)))
 (let ((?x27900 (* 2.0 l_0_10_177)))
 (let ((?x27901 (* ?x27900 l_0_10_181)))
 (let ((?x27897 (* 2.0 l_0_10_176)))
 (let ((?x27898 (* ?x27897 l_0_10_180)))
 (let ((?x27894 (* 2.0 l_0_10_175)))
 (let ((?x27895 (* ?x27894 l_0_10_179)))
 (let ((?x27891 (* 2.0 l_0_10_157)))
 (let ((?x27892 (* ?x27891 l_0_10_161)))
 (let ((?x27888 (* 2.0 l_0_10_156)))
 (let ((?x27889 (* ?x27888 l_0_10_160)))
 (let ((?x27885 (* 2.0 l_0_10_155)))
 (let ((?x27886 (* ?x27885 l_0_10_159)))
 (let ((?x27882 (* 2.0 l_0_10_154)))
 (let ((?x27883 (* ?x27882 l_0_10_158)))
 (let ((?x27871 (* 2.0 l_0_10_115)))
 (let ((?x27872 (* ?x27871 l_0_10_119)))
 (let ((?x27868 (* 2.0 l_0_10_114)))
 (let ((?x27869 (* ?x27868 l_0_10_118)))
 (let ((?x27865 (* 2.0 l_0_10_113)))
 (let ((?x27866 (* ?x27865 l_0_10_117)))
 (let ((?x19563 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_116) ?x27866) ?x27869) ?x27872) ?x27883)))
 (let ((?x30599 (+ (+ (+ (+ (- (- (- ?x19563 ?x27886) ?x27889) ?x27892) ?x27895) ?x27898) ?x27901) ?x27904)))
 (= (+ (+ (+ (+ ?x30599 ?x27917) ?x27920) ?x27923) ?x27926) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27903 (* 2.0 l_0_10_178)))
 (let ((?x28045 (* ?x27903 l_0_10_187)))
 (let ((?x27900 (* 2.0 l_0_10_177)))
 (let ((?x28043 (* ?x27900 l_0_10_186)))
 (let ((?x27897 (* 2.0 l_0_10_176)))
 (let ((?x28041 (* ?x27897 l_0_10_185)))
 (let ((?x27894 (* 2.0 l_0_10_175)))
 (let ((?x28039 (* ?x27894 l_0_10_184)))
 (let ((?x27891 (* 2.0 l_0_10_157)))
 (let ((?x28037 (* ?x27891 l_0_10_166)))
 (let ((?x27888 (* 2.0 l_0_10_156)))
 (let ((?x28035 (* ?x27888 l_0_10_165)))
 (let ((?x27885 (* 2.0 l_0_10_155)))
 (let ((?x28033 (* ?x27885 l_0_10_164)))
 (let ((?x27882 (* 2.0 l_0_10_154)))
 (let ((?x28031 (* ?x27882 l_0_10_163)))
 (let ((?x27871 (* 2.0 l_0_10_115)))
 (let ((?x28015 (* ?x27871 l_0_10_124)))
 (let ((?x27868 (* 2.0 l_0_10_114)))
 (let ((?x28013 (* ?x27868 l_0_10_123)))
 (let ((?x27865 (* 2.0 l_0_10_113)))
 (let ((?x28011 (* ?x27865 l_0_10_122)))
 (let ((?x27862 (* 2.0 l_0_10_112)))
 (let ((?x28009 (* ?x27862 l_0_10_121)))
 (let ((?x28004 (* 2.0 l_0_10_103)))
 (let ((?x28005 (* ?x28004 l_0_10_94)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x28002 (* ?x28001 l_0_10_93)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x27999 (* ?x27998 l_0_10_92)))
 (let ((?x19688 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_91) ?x27999) ?x28002) ?x28005) ?x28009)))
 (let ((?x30613 (- (- (- (- (- (- (- ?x19688 ?x28011) ?x28013) ?x28015) ?x28031) ?x28033) ?x28035) ?x28037)))
 (= (+ (+ (+ (+ ?x30613 ?x28039) ?x28041) ?x28043) ?x28045) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30317 (* l_0_10_99 l_0_10_99)))
 (let ((?x30315 (* l_0_10_98 l_0_10_98)))
 (let ((?x30313 (* l_0_10_97 l_0_10_97)))
 (let ((?x30311 (* l_0_10_96 l_0_10_96)))
 (let ((?x30309 (* l_0_10_95 l_0_10_95)))
 (let ((?x30307 (* l_0_10_183 l_0_10_183)))
 (let ((?x30305 (* l_0_10_182 l_0_10_182)))
 (let ((?x30303 (* l_0_10_181 l_0_10_181)))
 (let ((?x30301 (* l_0_10_180 l_0_10_180)))
 (let ((?x30299 (* l_0_10_179 l_0_10_179)))
 (let ((?x30297 (* l_0_10_162 l_0_10_162)))
 (let ((?x30295 (* l_0_10_161 l_0_10_161)))
 (let ((?x30293 (* l_0_10_160 l_0_10_160)))
 (let ((?x30291 (* l_0_10_159 l_0_10_159)))
 (let ((?x30289 (* l_0_10_158 l_0_10_158)))
 (let ((?x30287 (* l_0_10_120 l_0_10_120)))
 (let ((?x30285 (* l_0_10_119 l_0_10_119)))
 (let ((?x30283 (* l_0_10_118 l_0_10_118)))
 (let ((?x19734 (- (- (* (- l_0_10_116) l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x30283)))
 (let ((?x19721 (- (- (- (- (- (- (- ?x19734 ?x30285) ?x30287) ?x30289) ?x30291) ?x30293) ?x30295) ?x30297)))
 (let ((?x30620 (+ (+ (+ (+ (+ (+ (+ ?x19721 ?x30299) ?x30301) ?x30303) ?x30305) ?x30307) ?x30309) ?x30311)))
 (= (+ (+ (+ ?x30620 ?x30313) ?x30315) ?x30317) 0.0)))))))))))))))))))))))
(assert
 (let ((?x30390 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x30387 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x30384 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x30381 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x30378 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x30375 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x30372 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x30369 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x30366 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x30363 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x30355 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x30352 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x30349 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x30346 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x30343 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x30340 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x28004 (* 2.0 l_0_10_103)))
 (let ((?x30337 (* ?x28004 l_0_10_98)))
 (let ((?x28001 (* 2.0 l_0_10_102)))
 (let ((?x30335 (* ?x28001 l_0_10_97)))
 (let ((?x27998 (* 2.0 l_0_10_101)))
 (let ((?x30333 (* ?x27998 l_0_10_96)))
 (let ((?x19875 (+ (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_95) ?x30333) ?x30335) ?x30337) ?x30340)))
 (let ((?x30638 (- (- (- (- (- (- (- ?x19875 ?x30343) ?x30346) ?x30349) ?x30352) ?x30355) ?x30363) ?x30366)))
 (let ((?x30645 (+ (+ (+ (+ (- (- (- ?x30638 ?x30369) ?x30372) ?x30375) ?x30378) ?x30381) ?x30384) ?x30387)))
 (= (+ ?x30645 ?x30390) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x30482 (* l_0_10_189 l_0_10_189)))
 (let ((?x30480 (* l_0_10_188 l_0_10_188)))
 (let ((?x30478 (* l_0_10_187 l_0_10_187)))
 (let ((?x30476 (* l_0_10_186 l_0_10_186)))
 (let ((?x30474 (* l_0_10_185 l_0_10_185)))
 (let ((?x30472 (* l_0_10_184 l_0_10_184)))
 (let ((?x30470 (* l_0_10_168 l_0_10_168)))
 (let ((?x30468 (* l_0_10_167 l_0_10_167)))
 (let ((?x30466 (* l_0_10_166 l_0_10_166)))
 (let ((?x30464 (* l_0_10_165 l_0_10_165)))
 (let ((?x30462 (* l_0_10_164 l_0_10_164)))
 (let ((?x30460 (* l_0_10_163 l_0_10_163)))
 (let ((?x30453 (* l_0_10_126 l_0_10_126)))
 (let ((?x30451 (* l_0_10_125 l_0_10_125)))
 (let ((?x30449 (* l_0_10_124 l_0_10_124)))
 (let ((?x30447 (* l_0_10_123 l_0_10_123)))
 (let ((?x30445 (* l_0_10_122 l_0_10_122)))
 (let ((?x30443 (* l_0_10_121 l_0_10_121)))
 (let ((?x30441 (* l_0_10_105 l_0_10_105)))
 (let ((?x30439 (* l_0_10_104 l_0_10_104)))
 (let ((?x30437 (* l_0_10_103 l_0_10_103)))
 (let ((?x30435 (* l_0_10_102 l_0_10_102)))
 (let ((?x19949 (+ (+ (* l_0_10_100 l_0_10_100) (* l_0_10_101 l_0_10_101)) ?x30435)))
 (let ((?x19942 (- (- (- (- (+ (+ (+ ?x19949 ?x30437) ?x30439) ?x30441) ?x30443) ?x30445) ?x30447) ?x30449)))
 (let ((?x19897 (- (- (- (- (- (- (- ?x19942 ?x30451) ?x30453) ?x30460) ?x30462) ?x30464) ?x30466) ?x30468)))
 (let ((?x30655 (+ (+ (+ (+ (+ (+ (- ?x19897 ?x30470) ?x30472) ?x30474) ?x30476) ?x30478) ?x30480) ?x30482)))
 (= ?x30655 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x29066 (* l_0_10_147 l_0_10_147)))
 (let ((?x29064 (* l_0_10_146 l_0_10_146)))
 (let ((?x29062 (* l_0_10_145 l_0_10_145)))
 (let ((?x29060 (* l_0_10_144 l_0_10_144)))
 (let ((?x18950 (- (- (* (- l_0_10_142) l_0_10_142) (* l_0_10_143 l_0_10_143)) ?x29060)))
 (= (- (- (- ?x18950 ?x29062) ?x29064) ?x29066) 0.0)))))))
(assert
 (>= l_0_10_1 0.0))
(assert
 (>= l_0_10_3 0.0))
(assert
 (>= l_0_10_6 0.0))
(assert
 (>= l_0_10_10 0.0))
(assert
 (>= l_0_10_15 0.0))
(assert
 (>= l_0_10_21 0.0))
(assert
 (>= l_0_10_22 0.0))
(assert
 (>= l_0_10_24 0.0))
(assert
 (>= l_0_10_27 0.0))
(assert
 (>= l_0_10_31 0.0))
(assert
 (>= l_0_10_36 0.0))
(assert
 (>= l_0_10_42 0.0))
(assert
 (>= l_0_10_43 0.0))
(assert
 (>= l_0_10_45 0.0))
(assert
 (>= l_0_10_48 0.0))
(assert
 (>= l_0_10_52 0.0))
(assert
 (>= l_0_10_57 0.0))
(assert
 (>= l_0_10_63 0.0))
(assert
 (>= l_0_10_64 0.0))
(assert
 (>= l_0_10_66 0.0))
(assert
 (>= l_0_10_69 0.0))
(assert
 (>= l_0_10_73 0.0))
(assert
 (>= l_0_10_78 0.0))
(assert
 (>= l_0_10_84 0.0))
(assert
 (>= l_0_10_85 0.0))
(assert
 (>= l_0_10_87 0.0))
(assert
 (>= l_0_10_90 0.0))
(assert
 (>= l_0_10_94 0.0))
(assert
 (>= l_0_10_99 0.0))
(assert
 (>= l_0_10_105 0.0))
(assert
 (>= l_0_10_106 0.0))
(assert
 (>= l_0_10_108 0.0))
(assert
 (>= l_0_10_111 0.0))
(assert
 (>= l_0_10_115 0.0))
(assert
 (>= l_0_10_120 0.0))
(assert
 (>= l_0_10_126 0.0))
(assert
 (>= l_0_10_127 0.0))
(assert
 (>= l_0_10_129 0.0))
(assert
 (>= l_0_10_132 0.0))
(assert
 (>= l_0_10_136 0.0))
(assert
 (>= l_0_10_141 0.0))
(assert
 (>= l_0_10_147 0.0))
(assert
 (>= l_0_10_148 0.0))
(assert
 (>= l_0_10_150 0.0))
(assert
 (>= l_0_10_153 0.0))
(assert
 (>= l_0_10_157 0.0))
(assert
 (>= l_0_10_162 0.0))
(assert
 (>= l_0_10_168 0.0))
(assert
 (>= l_0_10_169 0.0))
(assert
 (>= l_0_10_171 0.0))
(assert
 (>= l_0_10_174 0.0))
(assert
 (>= l_0_10_178 0.0))
(assert
 (>= l_0_10_183 0.0))
(assert
 (>= l_0_10_189 0.0))
(assert
 (>= l_0_10_190 0.0))
(assert
 (>= l_0_10_192 0.0))
(assert
 (>= l_0_10_195 0.0))
(assert
 (>= l_0_10_199 0.0))
(assert
 (>= l_0_10_204 0.0))
(assert
 (>= l_0_10_210 0.0))
(assert
 (>= l_0_10_211 0.0))
(assert
 (>= l_0_10_213 0.0))
(assert
 (>= l_0_10_216 0.0))
(assert
 (>= l_0_10_220 0.0))
(assert
 (>= l_0_10_225 0.0))
(assert
 (>= l_0_10_231 0.0))
(assert
 (>= l_0_10_232 0.0))
(assert
 (>= l_0_10_234 0.0))
(assert
 (>= l_0_10_237 0.0))
(assert
 (>= l_0_10_241 0.0))
(assert
 (>= l_0_10_246 0.0))
(assert
 (>= l_0_10_252 0.0))
(assert
 (>= l_0_10_253 0.0))
(assert
 (>= l_0_10_255 0.0))
(assert
 (>= l_0_10_258 0.0))
(assert
 (>= l_0_10_262 0.0))
(assert
 (>= l_0_10_267 0.0))
(assert
 (>= l_0_10_273 0.0))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x30839 (* ?x30838 l_0_11_96)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x30836 (* ?x30835 l_0_11_95)))
 (let ((?x30803 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x30800 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x30797 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x30794 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x30791 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x30788 (* l_0_11_288 l_0_11_288)))
 (let ((?x30786 (* l_0_11_287 l_0_11_287)))
 (let ((?x30784 (* l_0_11_286 l_0_11_286)))
 (let ((?x30782 (* l_0_11_285 l_0_11_285)))
 (let ((?x30780 (* l_0_11_284 l_0_11_284)))
 (let ((?x30778 (* l_0_11_267 l_0_11_267)))
 (let ((?x30776 (* l_0_11_266 l_0_11_266)))
 (let ((?x30774 (* l_0_11_265 l_0_11_265)))
 (let ((?x30772 (* l_0_11_264 l_0_11_264)))
 (let ((?x30770 (* l_0_11_263 l_0_11_263)))
 (let ((?x30768 (* l_0_11_246 l_0_11_246)))
 (let ((?x30766 (* l_0_11_245 l_0_11_245)))
 (let ((?x30764 (* l_0_11_244 l_0_11_244)))
 (let ((?x30762 (* l_0_11_243 l_0_11_243)))
 (let ((?x30760 (* l_0_11_242 l_0_11_242)))
 (let ((?x30758 (* l_0_11_225 l_0_11_225)))
 (let ((?x30756 (* l_0_11_224 l_0_11_224)))
 (let ((?x30754 (* l_0_11_223 l_0_11_223)))
 (let ((?x30752 (* l_0_11_222 l_0_11_222)))
 (let ((?x30750 (* l_0_11_221 l_0_11_221)))
 (let ((?x30748 (* l_0_11_204 l_0_11_204)))
 (let ((?x30746 (* l_0_11_203 l_0_11_203)))
 (let ((?x30744 (* l_0_11_202 l_0_11_202)))
 (let ((?x30742 (* l_0_11_201 l_0_11_201)))
 (let ((?x30740 (* l_0_11_200 l_0_11_200)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x30738 (* ?x30737 l_0_11_180)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x30735 (* ?x30734 l_0_11_179)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x30732 (* ?x30731 l_0_11_159)))
 (let ((?x30728 (* l_0_11_15 l_0_11_15)))
 (let ((?x30729 (* 6.0 ?x30728)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x30726 (* ?x30725 l_0_11_158)))
 (let ((?x30722 (* l_0_11_14 l_0_11_14)))
 (let ((?x30723 (* 6.0 ?x30722)))
 (let ((?x30719 (* l_0_11_13 l_0_11_13)))
 (let ((?x30720 (* 6.0 ?x30719)))
 (let ((?x30716 (* l_0_11_12 l_0_11_12)))
 (let ((?x30717 (* 6.0 ?x30716)))
 (let ((?x30713 (* l_0_11_11 l_0_11_11)))
 (let ((?x30714 (* 6.0 ?x30713)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x30711 (* ?x30710 l_0_11_117)))
 (let ((?x30715 (+ (+ (+ _a_0_ (* (* 2.0 l_0_11_107) l_0_11_116)) ?x30711) ?x30714)))
 (let ((?x30736 (- (+ (+ (+ (+ (+ (+ ?x30715 ?x30717) ?x30720) ?x30723) ?x30726) ?x30729) ?x30732) ?x30735)))
 (let ((?x30751 (- (- (- (- (- (- (- ?x30736 ?x30738) ?x30740) ?x30742) ?x30744) ?x30746) ?x30748) ?x30750)))
 (let ((?x30765 (- (- (- (- (- (- (- ?x30751 ?x30752) ?x30754) ?x30756) ?x30758) ?x30760) ?x30762) ?x30764)))
 (let ((?x30779 (- (- (- (- (- (- (- ?x30765 ?x30766) ?x30768) ?x30770) ?x30772) ?x30774) ?x30776) ?x30778)))
 (let ((?x30795 (- (- (- (- (- (- (- ?x30779 ?x30780) ?x30782) ?x30784) ?x30786) ?x30788) ?x30791) ?x30794)))
 (let ((?x30807 (- (- (- (- ?x30795 ?x30797) ?x30800) ?x30803) (* (* 1.0 l_0_11_53) l_0_11_53))))
 (let ((?x30813 (- (- ?x30807 (* (* 1.0 l_0_11_54) l_0_11_54)) (* (* 1.0 l_0_11_55) l_0_11_55))))
 (let ((?x30819 (- (- ?x30813 (* (* 1.0 l_0_11_56) l_0_11_56)) (* (* 1.0 l_0_11_57) l_0_11_57))))
 (let ((?x30825 (+ (+ ?x30819 (* 1.0 (* l_0_11_74 l_0_11_74))) (* 1.0 (* l_0_11_75 l_0_11_75)))))
 (let ((?x30831 (+ (+ ?x30825 (* 1.0 (* l_0_11_76 l_0_11_76))) (* 1.0 (* l_0_11_77 l_0_11_77)))))
 (= (- (- (+ ?x30831 (* 1.0 (* l_0_11_78 l_0_11_78))) ?x30836) ?x30839) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30948 (* l_0_11_3 l_0_11_3)))
 (let ((?x30949 (* 6.0 ?x30948)))
 (let ((?x30946 (* l_0_11_276 l_0_11_276)))
 (let ((?x30944 (* l_0_11_275 l_0_11_275)))
 (let ((?x30942 (* l_0_11_255 l_0_11_255)))
 (let ((?x30940 (* l_0_11_254 l_0_11_254)))
 (let ((?x30938 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x30935 (* l_0_11_234 l_0_11_234)))
 (let ((?x30933 (* l_0_11_233 l_0_11_233)))
 (let ((?x30931 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x30928 (* l_0_11_213 l_0_11_213)))
 (let ((?x30926 (* l_0_11_212 l_0_11_212)))
 (let ((?x30923 (* l_0_11_2 l_0_11_2)))
 (let ((?x30924 (* 6.0 ?x30923)))
 (let ((?x30921 (* l_0_11_192 l_0_11_192)))
 (let ((?x30929 (- (- (+ (- (- _a_1_ (* l_0_11_191 l_0_11_191)) ?x30921) ?x30924) ?x30926) ?x30928)))
 (let ((?x30945 (- (- (- (- (- (- (- ?x30929 ?x30931) ?x30933) ?x30935) ?x30938) ?x30940) ?x30942) ?x30944)))
 (let ((?x30956 (- (- (+ (- ?x30945 ?x30946) ?x30949) (* (* 1.0 l_0_11_44) l_0_11_44)) (* (* 1.0 l_0_11_45) l_0_11_45))))
 (let ((?x30962 (+ (+ ?x30956 (* 1.0 (* l_0_11_65 l_0_11_65))) (* 1.0 (* l_0_11_66 l_0_11_66)))))
 (= (- ?x30962 1.0) 0.0)))))))))))))))))))))
(assert
 (let ((?x31061 (* l_0_11_87 l_0_11_87)))
 (let ((?x31059 (* l_0_11_86 l_0_11_86)))
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x31057 (* ?x31056 l_0_11_75)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x31054 (* ?x31053 l_0_11_74)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x31051 (* ?x31050 l_0_11_54)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x31048 (* ?x31047 l_0_11_53)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31033 (* ?x31032 l_0_11_33)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31024 (* ?x31023 l_0_11_32)))
 (let ((?x31009 (* l_0_11_171 l_0_11_171)))
 (let ((?x31007 (* l_0_11_170 l_0_11_170)))
 (let ((?x31005 (* l_0_11_150 l_0_11_150)))
 (let ((?x31003 (* l_0_11_149 l_0_11_149)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31001 (* ?x31000 l_0_11_3)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x30998 (* ?x30997 l_0_11_2)))
 (let ((?x30995 (* l_0_11_108 l_0_11_108)))
 (let ((?x31004 (+ (+ (+ (+ (+ _a_2_ (* l_0_11_107 l_0_11_107)) ?x30995) ?x30998) ?x31001) ?x31003)))
 (let ((?x31013 (- (- (- (+ ?x31004 ?x31005) ?x31007) ?x31009) (* (* 2.0 l_0_11_191) l_0_11_200))))
 (let ((?x31019 (- (- ?x31013 (* (* 2.0 l_0_11_192) l_0_11_201)) (* (* 2.0 l_0_11_212) l_0_11_221))))
 (let ((?x31028 (- (- (- ?x31019 (* (* 2.0 l_0_11_213) l_0_11_222)) ?x31024) (* (* 2.0 l_0_11_233) l_0_11_242))))
 (let ((?x31037 (- (- (- ?x31028 (* (* 2.0 l_0_11_234) l_0_11_243)) ?x31033) (* (* 2.0 l_0_11_254) l_0_11_263))))
 (let ((?x31043 (- (- ?x31037 (* (* 2.0 l_0_11_255) l_0_11_264)) (* (* 2.0 l_0_11_275) l_0_11_284))))
 (let ((?x31055 (+ (- (- (- ?x31043 (* (* 2.0 l_0_11_276) l_0_11_285)) ?x31048) ?x31051) ?x31054)))
 (= (- (- (+ ?x31055 ?x31057) ?x31059) ?x31061) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x31195 (* ?x31056 l_0_11_68)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x31193 (* ?x31053 l_0_11_67)))
 (let ((?x31190 (* l_0_11_6 l_0_11_6)))
 (let ((?x31191 (* 6.0 ?x31190)))
 (let ((?x31187 (* l_0_11_5 l_0_11_5)))
 (let ((?x31188 (* 6.0 ?x31187)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x31176 (* ?x31050 l_0_11_47)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x31174 (* ?x31047 l_0_11_46)))
 (let ((?x31171 (* l_0_11_4 l_0_11_4)))
 (let ((?x31172 (* 6.0 ?x31171)))
 (let ((?x31169 (* l_0_11_279 l_0_11_279)))
 (let ((?x31167 (* l_0_11_278 l_0_11_278)))
 (let ((?x31165 (* l_0_11_277 l_0_11_277)))
 (let ((?x31163 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x31160 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x31157 (* l_0_11_258 l_0_11_258)))
 (let ((?x31155 (* l_0_11_257 l_0_11_257)))
 (let ((?x31153 (* l_0_11_256 l_0_11_256)))
 (let ((?x31151 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x31148 (* l_0_11_237 l_0_11_237)))
 (let ((?x31146 (* l_0_11_236 l_0_11_236)))
 (let ((?x31144 (* l_0_11_235 l_0_11_235)))
 (let ((?x31142 (* l_0_11_216 l_0_11_216)))
 (let ((?x31140 (* l_0_11_215 l_0_11_215)))
 (let ((?x31138 (* l_0_11_214 l_0_11_214)))
 (let ((?x31136 (* l_0_11_195 l_0_11_195)))
 (let ((?x31134 (* l_0_11_194 l_0_11_194)))
 (let ((?x31141 (- (- (- (- (- _a_3_ (* l_0_11_193 l_0_11_193)) ?x31134) ?x31136) ?x31138) ?x31140)))
 (let ((?x31156 (- (- (- (- (- (- (- ?x31141 ?x31142) ?x31144) ?x31146) ?x31148) ?x31151) ?x31153) ?x31155)))
 (let ((?x31173 (+ (- (- (- (- (- (- ?x31156 ?x31157) ?x31160) ?x31163) ?x31165) ?x31167) ?x31169) ?x31172)))
 (let ((?x31183 (- (- (+ (+ ?x31173 ?x31174) ?x31176) (* (* 1.0 l_0_11_46) l_0_11_46)) (* (* 1.0 l_0_11_47) l_0_11_47))))
 (let ((?x31194 (- (+ (+ (- ?x31183 (* (* 1.0 l_0_11_48) l_0_11_48)) ?x31188) ?x31191) ?x31193)))
 (let ((?x31202 (+ (+ (- ?x31194 ?x31195) (* 1.0 (* l_0_11_67 l_0_11_67))) (* 1.0 (* l_0_11_68 l_0_11_68)))))
 (= (+ ?x31202 (* 1.0 (* l_0_11_69 l_0_11_69))) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30960 (* l_0_11_66 l_0_11_66)))
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x31195 (* ?x31056 l_0_11_68)))
 (let ((?x30957 (* l_0_11_65 l_0_11_65)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x31193 (* ?x31053 l_0_11_67)))
 (let ((?x30988 (* l_0_11_45 l_0_11_45)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x31176 (* ?x31050 l_0_11_47)))
 (let ((?x30984 (* l_0_11_44 l_0_11_44)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x31174 (* ?x31047 l_0_11_46)))
 (let ((?x31285 (* 12.0 l_0_11_3)))
 (let ((?x31286 (* ?x31285 l_0_11_5)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31275 (* ?x31032 l_0_11_26)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31269 (* ?x31023 l_0_11_25)))
 (let ((?x31262 (* 12.0 l_0_11_2)))
 (let ((?x31263 (* ?x31262 l_0_11_4)))
 (let ((?x31261 (- (- _a_4_ (* (* 2.0 l_0_11_191) l_0_11_193)) (* (* 2.0 l_0_11_192) l_0_11_194))))
 (let ((?x31268 (- (- (+ ?x31261 ?x31263) (* (* 2.0 l_0_11_212) l_0_11_214)) (* (* 2.0 l_0_11_213) l_0_11_215))))
 (let ((?x31274 (- (- (- ?x31268 ?x31269) (* (* 2.0 l_0_11_233) l_0_11_235)) (* (* 2.0 l_0_11_234) l_0_11_236))))
 (let ((?x31280 (- (- (- ?x31274 ?x31275) (* (* 2.0 l_0_11_254) l_0_11_256)) (* (* 2.0 l_0_11_255) l_0_11_257))))
 (let ((?x31284 (- (- ?x31280 (* (* 2.0 l_0_11_275) l_0_11_277)) (* (* 2.0 l_0_11_276) l_0_11_278))))
 (let ((?x31293 (- (+ (+ (- (+ (- (+ ?x31284 ?x31286) ?x31174) ?x30984) ?x31176) ?x30988) ?x31193) ?x30957)))
 (= (- (+ ?x31293 ?x31195) ?x30960) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x31442 (* ?x30838 l_0_11_89)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x31440 (* ?x30835 l_0_11_88)))
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x31438 (* ?x31437 l_0_11_76)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x31435 (* ?x31434 l_0_11_75)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x31432 (* ?x31431 l_0_11_74)))
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x31057 (* ?x31056 l_0_11_75)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x31054 (* ?x31053 l_0_11_74)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x31427 (* ?x31426 l_0_11_55)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x31424 (* ?x31423 l_0_11_54)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x31421 (* ?x31420 l_0_11_53)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x31051 (* ?x31050 l_0_11_54)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x31048 (* ?x31047 l_0_11_53)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x31407 (* ?x31406 l_0_11_34)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x31404 (* ?x31403 l_0_11_33)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x31392 (* ?x31391 l_0_11_32)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x31362 (* ?x30737 l_0_11_173)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x31360 (* ?x30734 l_0_11_172)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x31358 (* ?x30731 l_0_11_152)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x31356 (* ?x30725 l_0_11_151)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x31354 (* ?x31353 l_0_11_6)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31351 (* ?x31000 l_0_11_5)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x31349 (* ?x30997 l_0_11_4)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x31347 (* ?x30710 l_0_11_110)))
 (let ((?x31350 (+ (+ (+ _a_5_ (* (* 2.0 l_0_11_107) l_0_11_109)) ?x31347) ?x31349)))
 (let ((?x31366 (- (- (- (+ (+ (+ (+ ?x31350 ?x31351) ?x31354) ?x31356) ?x31358) ?x31360) ?x31362) (* (* 2.0 l_0_11_193) l_0_11_200))))
 (let ((?x31372 (- (- ?x31366 (* (* 2.0 l_0_11_194) l_0_11_201)) (* (* 2.0 l_0_11_195) l_0_11_202))))
 (let ((?x31378 (- (- ?x31372 (* (* 2.0 l_0_11_214) l_0_11_221)) (* (* 2.0 l_0_11_215) l_0_11_222))))
 (let ((?x31384 (- (- ?x31378 (* (* 2.0 l_0_11_216) l_0_11_223)) (* (* 2.0 l_0_11_235) l_0_11_242))))
 (let ((?x31390 (- (- ?x31384 (* (* 2.0 l_0_11_236) l_0_11_243)) (* (* 2.0 l_0_11_237) l_0_11_244))))
 (let ((?x31399 (- (- (- ?x31390 ?x31392) (* (* 2.0 l_0_11_256) l_0_11_263)) (* (* 2.0 l_0_11_257) l_0_11_264))))
 (let ((?x31411 (- (- (- (- ?x31399 (* (* 2.0 l_0_11_258) l_0_11_265)) ?x31404) ?x31407) (* (* 2.0 l_0_11_277) l_0_11_284))))
 (let ((?x31417 (- (- ?x31411 (* (* 2.0 l_0_11_278) l_0_11_285)) (* (* 2.0 l_0_11_279) l_0_11_286))))
 (let ((?x31430 (- (- (- (- (- (+ (+ ?x31417 ?x31048) ?x31051) ?x31421) ?x31424) ?x31427) ?x31054) ?x31057)))
 (= (- (- (+ (+ (+ ?x31430 ?x31432) ?x31435) ?x31438) ?x31440) ?x31442) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31061 (* l_0_11_87 l_0_11_87)))
 (let ((?x31059 (* l_0_11_86 l_0_11_86)))
 (let ((?x31524 (* l_0_11_64 l_0_11_64)))
 (let ((?x31525 (* 3.0 ?x31524)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x31522 (* ?x31521 l_0_11_65)))
 (let ((?x31519 (* (* 3.0 l_0_11_43) l_0_11_43)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x31516 (* ?x31515 l_0_11_44)))
 (let ((?x31513 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x31009 (* l_0_11_171 l_0_11_171)))
 (let ((?x31007 (* l_0_11_170 l_0_11_170)))
 (let ((?x31005 (* l_0_11_150 l_0_11_150)))
 (let ((?x31003 (* l_0_11_149 l_0_11_149)))
 (let ((?x20770 (* l_0_11_127 l_0_11_127)))
 (let ((?x30995 (* l_0_11_108 l_0_11_108)))
 (let ((?x20764 (- (- (* 6.0 (* l_0_11_1 l_0_11_1)) (* l_0_11_107 l_0_11_107)) ?x30995)))
 (let ((?x31517 (- (- (+ (+ (- (- (+ ?x20764 ?x20770) ?x31003) ?x31005) ?x31007) ?x31009) ?x31513) ?x31516)))
 (= (- (+ (+ (+ (+ (- ?x31517 ?x31519) ?x31522) ?x31525) ?x31059) ?x31061) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x30960 (* l_0_11_66 l_0_11_66)))
 (let ((?x31569 (* 3.0 ?x30960)))
 (let ((?x30957 (* l_0_11_65 l_0_11_65)))
 (let ((?x31567 (* 3.0 ?x30957)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x31522 (* ?x31521 l_0_11_65)))
 (let ((?x31562 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (let ((?x31559 (* (* 3.0 l_0_11_44) l_0_11_44)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x31516 (* ?x31515 l_0_11_44)))
 (let ((?x31552 (* l_0_11_274 l_0_11_274)))
 (let ((?x31550 (* l_0_11_253 l_0_11_253)))
 (let ((?x31548 (* l_0_11_232 l_0_11_232)))
 (let ((?x31513 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x31545 (* ?x31544 l_0_11_23)))
 (let ((?x31542 (* l_0_11_211 l_0_11_211)))
 (let ((?x31540 (* l_0_11_190 l_0_11_190)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x31538 (* ?x31537 l_0_11_128)))
 (let ((?x20844 (* l_0_11_1 l_0_11_1)))
 (let ((?x20726 (* 6.0 ?x20844)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x31535 (* ?x31534 l_0_11_2)))
 (let ((?x31549 (- (- (- (- (- (+ (+ ?x31535 ?x20726) ?x31538) ?x31540) ?x31542) ?x31545) ?x31513) ?x31548)))
 (let ((?x31557 (- (- (- (- ?x31549 ?x31550) ?x31552) ?x31516) (* (* 1.0 l_0_11_43) l_0_11_43))))
 (let ((?x31566 (+ (+ (- (- ?x31557 ?x31559) ?x31562) ?x31522) (* 1.0 (* l_0_11_64 l_0_11_64)))))
 (= (- (+ (+ ?x31566 ?x31567) ?x31569) 3.0) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x30960 (* l_0_11_66 l_0_11_66)))
 (let ((?x31569 (* 3.0 ?x30960)))
 (let ((?x30957 (* l_0_11_65 l_0_11_65)))
 (let ((?x31567 (* 3.0 ?x30957)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x31626 (* ?x31625 l_0_11_65)))
 (let ((?x31562 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (let ((?x31559 (* (* 3.0 l_0_11_44) l_0_11_44)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x31621 (* ?x31620 l_0_11_44)))
 (let ((?x30948 (* l_0_11_3 l_0_11_3)))
 (let ((?x30949 (* 6.0 ?x30948)))
 (let ((?x30938 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x30931 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x31545 (* ?x31544 l_0_11_23)))
 (let ((?x30923 (* l_0_11_2 l_0_11_2)))
 (let ((?x30924 (* 6.0 ?x30923)))
 (let ((?x31598 (* l_0_11_129 l_0_11_129)))
 (let ((?x31599 (+ (+ (* (* 12.0 l_0_11_1) l_0_11_2) (* l_0_11_128 l_0_11_128)) ?x31598)))
 (let ((?x31606 (- (+ (- ?x31599 (* (* 2.0 l_0_11_190) l_0_11_191)) ?x30924) (* (* 2.0 l_0_11_211) l_0_11_212))))
 (let ((?x31612 (- (- (- (- ?x31606 ?x31545) ?x30931) (* (* 2.0 l_0_11_232) l_0_11_233)) ?x30938)))
 (let ((?x31618 (- (- ?x31612 (* (* 2.0 l_0_11_253) l_0_11_254)) (* (* 2.0 l_0_11_274) l_0_11_275))))
 (let ((?x31629 (+ (+ (+ (- (- (- (+ ?x31618 ?x30949) ?x31621) ?x31559) ?x31562) ?x31626) ?x31567) ?x31569)))
 (= (- ?x31629 3.0) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x31670 (* ?x31669 l_0_11_71)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x31667 (* ?x31666 l_0_11_70)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x31664 (* ?x31521 l_0_11_70)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x31662 (* ?x31661 l_0_11_50)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x31659 (* ?x31658 l_0_11_49)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x31656 (* ?x31515 l_0_11_49)))
 (let ((?x20908 (* l_0_11_22 l_0_11_22)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x31653 (* ?x31544 l_0_11_28)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x31651 (* ?x31537 l_0_11_133)))
 (let ((?x31652 (+ (- (* (* 12.0 l_0_11_1) l_0_11_7) (* l_0_11_1 l_0_11_1)) ?x31651)))
 (let ((?x31668 (+ (+ (- (- (- (+ (- ?x31652 ?x31653) ?x20908) ?x31656) ?x31659) ?x31662) ?x31664) ?x31667)))
 (= (+ ?x31668 ?x31670) 0.0)))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x31670 (* ?x31669 l_0_11_71)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x31667 (* ?x31666 l_0_11_70)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x31732 (* ?x31625 l_0_11_70)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x31662 (* ?x31661 l_0_11_50)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x31659 (* ?x31658 l_0_11_49)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x31728 (* ?x31620 l_0_11_49)))
 (let ((?x31285 (* 12.0 l_0_11_3)))
 (let ((?x31726 (* ?x31285 l_0_11_8)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31720 (* ?x31032 l_0_11_29)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31716 (* ?x31023 l_0_11_28)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x31653 (* ?x31544 l_0_11_28)))
 (let ((?x31262 (* 12.0 l_0_11_2)))
 (let ((?x31708 (* ?x31262 l_0_11_7)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x31704 (* ?x31703 l_0_11_134)))
 (let ((?x31692 (* 2.0 l_0_11_128)))
 (let ((?x31701 (* ?x31692 l_0_11_133)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x31649 (* ?x31534 l_0_11_7)))
 (let ((?x31707 (- (+ (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_2) ?x31649) ?x31701) ?x31704) (* (* 2.0 l_0_11_190) l_0_11_196))))
 (let ((?x31714 (+ (- (+ ?x31707 ?x31708) (* (* 2.0 l_0_11_211) l_0_11_217)) (* (* 2.0 l_0_11_22) l_0_11_23))))
 (let ((?x31721 (- (- (- (- ?x31714 ?x31653) ?x31716) (* (* 2.0 l_0_11_232) l_0_11_238)) ?x31720)))
 (let ((?x31725 (- (- ?x31721 (* (* 2.0 l_0_11_253) l_0_11_259)) (* (* 2.0 l_0_11_274) l_0_11_280))))
 (let ((?x31735 (+ (+ (+ (- (- (- (+ ?x31725 ?x31726) ?x31728) ?x31659) ?x31662) ?x31732) ?x31667) ?x31670)))
 (= ?x31735 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x31809 (* ?x31808 l_0_11_72)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x31806 (* ?x31805 l_0_11_71)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x31803 (* ?x31802 l_0_11_70)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x31732 (* ?x31625 l_0_11_70)))
 (let ((?x31799 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x31796 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x31793 (* ?x31792 l_0_11_51)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x31790 (* ?x31789 l_0_11_50)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x31728 (* ?x31620 l_0_11_49)))
 (let ((?x31783 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x31780 (* ?x31406 l_0_11_30)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x31778 (* ?x31403 l_0_11_29)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x31776 (* ?x31391 l_0_11_28)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x31772 (* ?x31771 l_0_11_135)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x31769 (* ?x31768 l_0_11_134)))
 (let ((?x31767 (+ (* (* (- 2.0) l_0_11_1) l_0_11_4) (* (* 2.0 l_0_11_130) l_0_11_133))))
 (let ((?x31777 (- (+ (+ (+ ?x31767 ?x31769) ?x31772) (* (* 2.0 l_0_11_22) l_0_11_25)) ?x31776)))
 (let ((?x31788 (- (+ (+ (- (- ?x31777 ?x31778) ?x31780) ?x31783) ?x31728) (* (* 6.0 l_0_11_46) l_0_11_49))))
 (let ((?x31807 (+ (+ (- (+ (+ (- (- ?x31788 ?x31790) ?x31793) ?x31796) ?x31799) ?x31732) ?x31803) ?x31806)))
 (= (+ ?x31807 ?x31809) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x31918 (* l_0_11_9 l_0_11_9)))
 (let ((?x31919 (* 6.0 ?x31918)))
 (let ((?x31915 (* l_0_11_8 l_0_11_8)))
 (let ((?x31916 (* 6.0 ?x31915)))
 (let ((?x31912 (* l_0_11_73 l_0_11_73)))
 (let ((?x31913 (* 3.0 ?x31912)))
 (let ((?x31909 (* l_0_11_72 l_0_11_72)))
 (let ((?x31910 (* 3.0 ?x31909)))
 (let ((?x31906 (* l_0_11_71 l_0_11_71)))
 (let ((?x31907 (* 3.0 ?x31906)))
 (let ((?x31903 (* l_0_11_70 l_0_11_70)))
 (let ((?x31904 (* 3.0 ?x31903)))
 (let ((?x31900 (* l_0_11_7 l_0_11_7)))
 (let ((?x31901 (* 6.0 ?x31900)))
 (let ((?x31898 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x31895 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x31892 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x31886 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x31883 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x31880 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x31877 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x31872 (* l_0_11_136 l_0_11_136)))
 (let ((?x31870 (* l_0_11_135 l_0_11_135)))
 (let ((?x31868 (* l_0_11_134 l_0_11_134)))
 (let ((?x31866 (* l_0_11_133 l_0_11_133)))
 (let ((?x31863 (* l_0_11_10 l_0_11_10)))
 (let ((?x31864 (* 6.0 ?x31863)))
 (let ((?x31871 (+ (+ (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) ?x31864) ?x31866) ?x31868) ?x31870)))
 (let ((?x31881 (- (- (+ (+ ?x31871 ?x31872) (* (* 2.0 l_0_11_22) l_0_11_28)) ?x31877) ?x31880)))
 (let ((?x31893 (- (- (- (- ?x31881 ?x31883) ?x31886) (* (* 3.0 l_0_11_49) l_0_11_49)) ?x31892)))
 (let ((?x31914 (+ (+ (+ (+ (+ (- (- ?x31893 ?x31895) ?x31898) ?x31901) ?x31904) ?x31907) ?x31910) ?x31913)))
 (= (+ (+ ?x31914 ?x31916) ?x31919) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x32032 (* ?x32031 l_0_11_91)))
 (let ((?x32028 (* 6.0 l_0_11_73)))
 (let ((?x32029 (* ?x32028 l_0_11_77)))
 (let ((?x32025 (* 6.0 l_0_11_72)))
 (let ((?x32026 (* ?x32025 l_0_11_76)))
 (let ((?x32022 (* 6.0 l_0_11_71)))
 (let ((?x32023 (* ?x32022 l_0_11_75)))
 (let ((?x32019 (* 6.0 l_0_11_70)))
 (let ((?x32020 (* ?x32019 l_0_11_74)))
 (let ((?x32016 (* 6.0 l_0_11_52)))
 (let ((?x32017 (* ?x32016 l_0_11_56)))
 (let ((?x32013 (* 6.0 l_0_11_51)))
 (let ((?x32014 (* ?x32013 l_0_11_55)))
 (let ((?x32010 (* 6.0 l_0_11_50)))
 (let ((?x32011 (* ?x32010 l_0_11_54)))
 (let ((?x32004 (* 12.0 l_0_11_31)))
 (let ((?x32005 (* ?x32004 l_0_11_35)))
 (let ((?x32001 (* 12.0 l_0_11_30)))
 (let ((?x32002 (* ?x32001 l_0_11_34)))
 (let ((?x31998 (* 12.0 l_0_11_29)))
 (let ((?x31999 (* ?x31998 l_0_11_33)))
 (let ((?x31995 (* 12.0 l_0_11_28)))
 (let ((?x31996 (* ?x31995 l_0_11_32)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x31991 (* ?x31990 l_0_11_175)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x31988 (* ?x31987 l_0_11_154)))
 (let ((?x31984 (* 2.0 l_0_11_136)))
 (let ((?x31985 (* ?x31984 l_0_11_140)))
 (let ((?x31981 (* 2.0 l_0_11_135)))
 (let ((?x31982 (* ?x31981 l_0_11_139)))
 (let ((?x31978 (* 2.0 l_0_11_134)))
 (let ((?x31979 (* ?x31978 l_0_11_138)))
 (let ((?x31975 (* 2.0 l_0_11_133)))
 (let ((?x31976 (* ?x31975 l_0_11_137)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x31973 (* ?x31353 l_0_11_9)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31971 (* ?x31000 l_0_11_8)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x31969 (* ?x30997 l_0_11_7)))
 (let ((?x31963 (* 12.0 l_0_11_10)))
 (let ((?x31964 (* ?x31963 l_0_11_14)))
 (let ((?x31968 (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_11) ?x31964) (* (* 2.0 l_0_11_106) l_0_11_112))))
 (let ((?x31986 (+ (+ (+ (+ (+ (+ (+ ?x31968 ?x31969) ?x31971) ?x31973) ?x31976) ?x31979) ?x31982) ?x31985)))
 (let ((?x31997 (- (+ (- (+ ?x31986 ?x31988) ?x31991) (* (* 2.0 l_0_11_22) l_0_11_32)) ?x31996)))
 (let ((?x32009 (- (- (- (- ?x31997 ?x31999) ?x32002) ?x32005) (* (* 6.0 l_0_11_49) l_0_11_53))))
 (let ((?x32030 (+ (+ (+ (+ (- (- (- ?x32009 ?x32011) ?x32014) ?x32017) ?x32020) ?x32023) ?x32026) ?x32029)))
 (= (- ?x32030 ?x32032) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32028 (* 6.0 l_0_11_73)))
 (let ((?x32153 (* ?x32028 l_0_11_82)))
 (let ((?x32025 (* 6.0 l_0_11_72)))
 (let ((?x32151 (* ?x32025 l_0_11_81)))
 (let ((?x32022 (* 6.0 l_0_11_71)))
 (let ((?x32149 (* ?x32022 l_0_11_80)))
 (let ((?x32019 (* 6.0 l_0_11_70)))
 (let ((?x32147 (* ?x32019 l_0_11_79)))
 (let ((?x32016 (* 6.0 l_0_11_52)))
 (let ((?x32145 (* ?x32016 l_0_11_61)))
 (let ((?x32013 (* 6.0 l_0_11_51)))
 (let ((?x32143 (* ?x32013 l_0_11_60)))
 (let ((?x32010 (* 6.0 l_0_11_50)))
 (let ((?x32141 (* ?x32010 l_0_11_59)))
 (let ((?x32004 (* 12.0 l_0_11_31)))
 (let ((?x32137 (* ?x32004 l_0_11_40)))
 (let ((?x32001 (* 12.0 l_0_11_30)))
 (let ((?x32135 (* ?x32001 l_0_11_39)))
 (let ((?x31998 (* 12.0 l_0_11_29)))
 (let ((?x32133 (* ?x31998 l_0_11_38)))
 (let ((?x31995 (* 12.0 l_0_11_28)))
 (let ((?x32131 (* ?x31995 l_0_11_37)))
 (let ((?x32126 (* 12.0 l_0_11_18)))
 (let ((?x32127 (* ?x32126 l_0_11_9)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x32124 (* ?x32123 l_0_11_8)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x32121 (* ?x32120 l_0_11_7)))
 (let ((?x31984 (* 2.0 l_0_11_136)))
 (let ((?x32118 (* ?x31984 l_0_11_145)))
 (let ((?x31981 (* 2.0 l_0_11_135)))
 (let ((?x32116 (* ?x31981 l_0_11_144)))
 (let ((?x31978 (* 2.0 l_0_11_134)))
 (let ((?x32114 (* ?x31978 l_0_11_143)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x31651 (* ?x31537 l_0_11_133)))
 (let ((?x31963 (* 12.0 l_0_11_10)))
 (let ((?x21403 (* ?x31963 l_0_11_19)))
 (let ((?x32113 (+ (- (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x21403) ?x31651) (* (* 2.0 l_0_11_133) l_0_11_142))))
 (let ((?x32130 (+ (+ (+ (+ (+ (+ (+ ?x32113 ?x32114) ?x32116) ?x32118) ?x32121) ?x32124) ?x32127) (* (* 2.0 l_0_11_22) l_0_11_37))))
 (let ((?x32140 (- (- (- (- (- ?x32130 ?x32131) ?x32133) ?x32135) ?x32137) (* (* 6.0 l_0_11_49) l_0_11_58))))
 (let ((?x32154 (+ (+ (+ (+ (- (- (- ?x32140 ?x32141) ?x32143) ?x32145) ?x32147) ?x32149) ?x32151) ?x32153)))
 (= ?x32154 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x32261 (* ?x31056 l_0_11_71)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x32259 (* ?x31053 l_0_11_70)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x32257 (* ?x31050 l_0_11_50)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x32255 (* ?x31047 l_0_11_49)))
 (let ((?x30948 (* l_0_11_3 l_0_11_3)))
 (let ((?x31285 (* 12.0 l_0_11_3)))
 (let ((?x31726 (* ?x31285 l_0_11_8)))
 (let ((?x20261 (* l_0_11_24 l_0_11_24)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31720 (* ?x31032 l_0_11_29)))
 (let ((?x20266 (* l_0_11_23 l_0_11_23)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31716 (* ?x31023 l_0_11_28)))
 (let ((?x30923 (* l_0_11_2 l_0_11_2)))
 (let ((?x31262 (* 12.0 l_0_11_2)))
 (let ((?x31708 (* ?x31262 l_0_11_7)))
 (let ((?x32214 (- (* (* (- 2.0) l_0_11_191) l_0_11_196) (* (* 2.0 l_0_11_192) l_0_11_197))))
 (let ((?x32236 (- (- (- (+ ?x32214 ?x31708) ?x30923) (* (* 2.0 l_0_11_212) l_0_11_217)) (* (* 2.0 l_0_11_213) l_0_11_218))))
 (let ((?x32242 (- (- (+ (- ?x32236 ?x31716) ?x20266) (* (* 2.0 l_0_11_233) l_0_11_238)) (* (* 2.0 l_0_11_234) l_0_11_239))))
 (let ((?x32248 (- (- (+ (- ?x32242 ?x31720) ?x20261) (* (* 2.0 l_0_11_254) l_0_11_259)) (* (* 2.0 l_0_11_255) l_0_11_260))))
 (let ((?x32252 (- (- ?x32248 (* (* 2.0 l_0_11_275) l_0_11_280)) (* (* 2.0 l_0_11_276) l_0_11_281))))
 (= (+ (+ (- (- (- (+ ?x32252 ?x31726) ?x30948) ?x32255) ?x32257) ?x32259) ?x32261) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x32392 (* ?x31437 l_0_11_72)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x32390 (* ?x31434 l_0_11_71)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x32388 (* ?x31431 l_0_11_70)))
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x32261 (* ?x31056 l_0_11_71)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x32259 (* ?x31053 l_0_11_70)))
 (let ((?x31799 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x31796 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x32382 (* ?x31426 l_0_11_51)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x32380 (* ?x31423 l_0_11_50)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x32378 (* ?x31420 l_0_11_49)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x32257 (* ?x31050 l_0_11_50)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x32255 (* ?x31047 l_0_11_49)))
 (let ((?x31783 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x31780 (* ?x31406 l_0_11_30)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x31778 (* ?x31403 l_0_11_29)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x31776 (* ?x31391 l_0_11_28)))
 (let ((?x32333 (- (* (* (- 2.0) l_0_11_193) l_0_11_196) (* (* 2.0 l_0_11_194) l_0_11_197))))
 (let ((?x32338 (- (- ?x32333 (* (* 2.0 l_0_11_195) l_0_11_198)) (* (* 2.0 l_0_11_2) l_0_11_4))))
 (let ((?x32342 (- (- ?x32338 (* (* 2.0 l_0_11_214) l_0_11_217)) (* (* 2.0 l_0_11_215) l_0_11_218))))
 (let ((?x32347 (+ (- ?x32342 (* (* 2.0 l_0_11_216) l_0_11_219)) (* (* 2.0 l_0_11_23) l_0_11_25))))
 (let ((?x32351 (- (- ?x32347 (* (* 2.0 l_0_11_235) l_0_11_238)) (* (* 2.0 l_0_11_236) l_0_11_239))))
 (let ((?x32356 (+ (- ?x32351 (* (* 2.0 l_0_11_237) l_0_11_240)) (* (* 2.0 l_0_11_24) l_0_11_26))))
 (let ((?x32361 (- (- (- ?x32356 ?x31776) (* (* 2.0 l_0_11_256) l_0_11_259)) (* (* 2.0 l_0_11_257) l_0_11_260))))
 (let ((?x32367 (- (- (- (- ?x32361 (* (* 2.0 l_0_11_258) l_0_11_261)) ?x31778) ?x31780) (* (* 2.0 l_0_11_277) l_0_11_280))))
 (let ((?x32371 (- (- ?x32367 (* (* 2.0 l_0_11_278) l_0_11_281)) (* (* 2.0 l_0_11_279) l_0_11_282))))
 (let ((?x32377 (+ (+ (+ (- ?x32371 (* (* 2.0 l_0_11_3) l_0_11_5)) ?x31783) ?x32255) ?x32257)))
 (let ((?x32387 (- (- (+ (+ (- (- (- ?x32377 ?x32378) ?x32380) ?x32382) ?x31796) ?x31799) ?x32259) ?x32261)))
 (= (+ (+ (+ ?x32387 ?x32388) ?x32390) ?x32392) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31918 (* l_0_11_9 l_0_11_9)))
 (let ((?x31919 (* 6.0 ?x31918)))
 (let ((?x31915 (* l_0_11_8 l_0_11_8)))
 (let ((?x31916 (* 6.0 ?x31915)))
 (let ((?x31900 (* l_0_11_7 l_0_11_7)))
 (let ((?x31901 (* 6.0 ?x31900)))
 (let ((?x31886 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x31883 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x31880 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x32512 (* l_0_11_283 l_0_11_283)))
 (let ((?x32510 (* l_0_11_282 l_0_11_282)))
 (let ((?x32508 (* l_0_11_281 l_0_11_281)))
 (let ((?x32506 (* l_0_11_280 l_0_11_280)))
 (let ((?x31877 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x32503 (* l_0_11_262 l_0_11_262)))
 (let ((?x32501 (* l_0_11_261 l_0_11_261)))
 (let ((?x32499 (* l_0_11_260 l_0_11_260)))
 (let ((?x32497 (* l_0_11_259 l_0_11_259)))
 (let ((?x32495 (* l_0_11_241 l_0_11_241)))
 (let ((?x32493 (* l_0_11_240 l_0_11_240)))
 (let ((?x32489 (* l_0_11_239 l_0_11_239)))
 (let ((?x32487 (* l_0_11_238 l_0_11_238)))
 (let ((?x32483 (* l_0_11_220 l_0_11_220)))
 (let ((?x32481 (* l_0_11_219 l_0_11_219)))
 (let ((?x32479 (* l_0_11_218 l_0_11_218)))
 (let ((?x32477 (* l_0_11_217 l_0_11_217)))
 (let ((?x32473 (* l_0_11_199 l_0_11_199)))
 (let ((?x32471 (* l_0_11_198 l_0_11_198)))
 (let ((?x4195 (* l_0_11_197 l_0_11_197)))
 (let ((?x4191 (* l_0_11_196 l_0_11_196)))
 (let ((?x31863 (* l_0_11_10 l_0_11_10)))
 (let ((?x31864 (* 6.0 ?x31863)))
 (let ((?x32476 (- (- (- (- (- ?x31864 ?x4191) ?x4195) ?x32471) ?x32473) (* (* 2.0 l_0_11_2) l_0_11_7))))
 (let ((?x32486 (+ (- (- (- (- ?x32476 ?x32477) ?x32479) ?x32481) ?x32483) (* (* 2.0 l_0_11_23) l_0_11_28))))
 (let ((?x32494 (- (+ (- (- ?x32486 ?x32487) ?x32489) (* (* 2.0 l_0_11_24) l_0_11_29)) ?x32493)))
 (let ((?x32507 (- (- (- (- (- (- (- ?x32494 ?x32495) ?x32497) ?x32499) ?x32501) ?x32503) ?x31877) ?x32506)))
 (let ((?x32516 (- (- (- (- (- ?x32507 ?x32508) ?x32510) ?x32512) ?x31880) (* (* 2.0 l_0_11_3) l_0_11_8))))
 (let ((?x32524 (- (- (- (- ?x32516 ?x31883) ?x31886) (* (* 1.0 l_0_11_49) l_0_11_49)) (* (* 1.0 l_0_11_50) l_0_11_50))))
 (let ((?x32530 (- (- ?x32524 (* (* 1.0 l_0_11_51) l_0_11_51)) (* (* 1.0 l_0_11_52) l_0_11_52))))
 (let ((?x32535 (+ (+ (+ ?x32530 ?x31901) (* 1.0 (* l_0_11_70 l_0_11_70))) (* 1.0 (* l_0_11_71 l_0_11_71)))))
 (let ((?x32539 (+ (+ ?x32535 (* 1.0 (* l_0_11_72 l_0_11_72))) (* 1.0 (* l_0_11_73 l_0_11_73)))))
 (= (+ (+ ?x32539 ?x31916) ?x31919) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x32713 (* ?x30838 l_0_11_92)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x32711 (* ?x30835 l_0_11_91)))
 (let ((?x32708 (* 2.0 l_0_11_73)))
 (let ((?x32709 (* ?x32708 l_0_11_77)))
 (let ((?x32705 (* 2.0 l_0_11_72)))
 (let ((?x32706 (* ?x32705 l_0_11_76)))
 (let ((?x32702 (* 2.0 l_0_11_71)))
 (let ((?x32703 (* ?x32702 l_0_11_75)))
 (let ((?x32699 (* 2.0 l_0_11_70)))
 (let ((?x32700 (* ?x32699 l_0_11_74)))
 (let ((?x32696 (* 2.0 l_0_11_52)))
 (let ((?x32697 (* ?x32696 l_0_11_56)))
 (let ((?x32693 (* 2.0 l_0_11_51)))
 (let ((?x32694 (* ?x32693 l_0_11_55)))
 (let ((?x32690 (* 2.0 l_0_11_50)))
 (let ((?x32691 (* ?x32690 l_0_11_54)))
 (let ((?x32687 (* 2.0 l_0_11_49)))
 (let ((?x32688 (* ?x32687 l_0_11_53)))
 (let ((?x32004 (* 12.0 l_0_11_31)))
 (let ((?x32005 (* ?x32004 l_0_11_35)))
 (let ((?x32001 (* 12.0 l_0_11_30)))
 (let ((?x32002 (* ?x32001 l_0_11_34)))
 (let ((?x31998 (* 12.0 l_0_11_29)))
 (let ((?x31999 (* ?x31998 l_0_11_33)))
 (let ((?x31995 (* 12.0 l_0_11_28)))
 (let ((?x31996 (* ?x31995 l_0_11_32)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x32617 (* ?x30737 l_0_11_176)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x32615 (* ?x30734 l_0_11_175)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x32613 (* ?x30731 l_0_11_155)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x32611 (* ?x30725 l_0_11_154)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x31973 (* ?x31353 l_0_11_9)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31971 (* ?x31000 l_0_11_8)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x31969 (* ?x30997 l_0_11_7)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x32600 (* ?x30710 l_0_11_113)))
 (let ((?x31963 (* 12.0 l_0_11_10)))
 (let ((?x31964 (* ?x31963 l_0_11_14)))
 (let ((?x32604 (- (+ (+ ?x31964 (* (* 2.0 l_0_11_107) l_0_11_112)) ?x32600) (* (* 2.0 l_0_11_11) l_0_11_2))))
 (let ((?x32610 (+ (+ (- (+ ?x32604 ?x31969) (* (* 2.0 l_0_11_12) l_0_11_3)) ?x31971) ?x31973)))
 (let ((?x32621 (- (- (- (+ (+ ?x32610 ?x32611) ?x32613) ?x32615) ?x32617) (* (* 2.0 l_0_11_196) l_0_11_200))))
 (let ((?x32627 (- (- ?x32621 (* (* 2.0 l_0_11_197) l_0_11_201)) (* (* 2.0 l_0_11_198) l_0_11_202))))
 (let ((?x32633 (- (- ?x32627 (* (* 2.0 l_0_11_199) l_0_11_203)) (* (* 2.0 l_0_11_217) l_0_11_221))))
 (let ((?x32639 (- (- ?x32633 (* (* 2.0 l_0_11_218) l_0_11_222)) (* (* 2.0 l_0_11_219) l_0_11_223))))
 (let ((?x32644 (+ (- ?x32639 (* (* 2.0 l_0_11_220) l_0_11_224)) (* (* 2.0 l_0_11_23) l_0_11_32))))
 (let ((?x32650 (- (- ?x32644 (* (* 2.0 l_0_11_238) l_0_11_242)) (* (* 2.0 l_0_11_239) l_0_11_243))))
 (let ((?x32655 (- (+ ?x32650 (* (* 2.0 l_0_11_24) l_0_11_33)) (* (* 2.0 l_0_11_240) l_0_11_244))))
 (let ((?x32661 (- (- ?x32655 (* (* 2.0 l_0_11_241) l_0_11_245)) (* (* 2.0 l_0_11_259) l_0_11_263))))
 (let ((?x32667 (- (- ?x32661 (* (* 2.0 l_0_11_260) l_0_11_264)) (* (* 2.0 l_0_11_261) l_0_11_265))))
 (let ((?x32674 (- (- (- ?x32667 (* (* 2.0 l_0_11_262) l_0_11_266)) ?x31996) (* (* 2.0 l_0_11_280) l_0_11_284))))
 (let ((?x32680 (- (- ?x32674 (* (* 2.0 l_0_11_281) l_0_11_285)) (* (* 2.0 l_0_11_282) l_0_11_286))))
 (let ((?x32686 (- (- (- (- ?x32680 (* (* 2.0 l_0_11_283) l_0_11_287)) ?x31999) ?x32002) ?x32005)))
 (let ((?x32707 (+ (+ (+ (- (- (- (- ?x32686 ?x32688) ?x32691) ?x32694) ?x32697) ?x32700) ?x32703) ?x32706)))
 (= (- (- (+ ?x32707 ?x32709) ?x32711) ?x32713) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32708 (* 2.0 l_0_11_73)))
 (let ((?x32884 (* ?x32708 l_0_11_82)))
 (let ((?x32705 (* 2.0 l_0_11_72)))
 (let ((?x32882 (* ?x32705 l_0_11_81)))
 (let ((?x32702 (* 2.0 l_0_11_71)))
 (let ((?x32880 (* ?x32702 l_0_11_80)))
 (let ((?x32699 (* 2.0 l_0_11_70)))
 (let ((?x32878 (* ?x32699 l_0_11_79)))
 (let ((?x32696 (* 2.0 l_0_11_52)))
 (let ((?x32876 (* ?x32696 l_0_11_61)))
 (let ((?x32693 (* 2.0 l_0_11_51)))
 (let ((?x32874 (* ?x32693 l_0_11_60)))
 (let ((?x32690 (* 2.0 l_0_11_50)))
 (let ((?x32872 (* ?x32690 l_0_11_59)))
 (let ((?x32687 (* 2.0 l_0_11_49)))
 (let ((?x32870 (* ?x32687 l_0_11_58)))
 (let ((?x32004 (* 12.0 l_0_11_31)))
 (let ((?x32137 (* ?x32004 l_0_11_40)))
 (let ((?x32001 (* 12.0 l_0_11_30)))
 (let ((?x32135 (* ?x32001 l_0_11_39)))
 (let ((?x31998 (* 12.0 l_0_11_29)))
 (let ((?x32133 (* ?x31998 l_0_11_38)))
 (let ((?x31995 (* 12.0 l_0_11_28)))
 (let ((?x32131 (* ?x31995 l_0_11_37)))
 (let ((?x32126 (* 12.0 l_0_11_18)))
 (let ((?x32127 (* ?x32126 l_0_11_9)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x32124 (* ?x32123 l_0_11_8)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x32121 (* ?x32120 l_0_11_7)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x31704 (* ?x31703 l_0_11_134)))
 (let ((?x31692 (* 2.0 l_0_11_128)))
 (let ((?x31701 (* ?x31692 l_0_11_133)))
 (let ((?x31963 (* 12.0 l_0_11_10)))
 (let ((?x21403 (* ?x31963 l_0_11_19)))
 (let ((?x32816 (+ (- (- (- ?x21403 ?x31701) ?x31704) (* (* 2.0 l_0_11_16) l_0_11_2)) ?x32121)))
 (let ((?x32823 (- (+ (+ (- ?x32816 (* (* 2.0 l_0_11_17) l_0_11_3)) ?x32124) ?x32127) (* (* 2.0 l_0_11_196) l_0_11_205))))
 (let ((?x32827 (- (- ?x32823 (* (* 2.0 l_0_11_197) l_0_11_206)) (* (* 2.0 l_0_11_198) l_0_11_207))))
 (let ((?x32831 (- (- ?x32827 (* (* 2.0 l_0_11_199) l_0_11_208)) (* (* 2.0 l_0_11_217) l_0_11_226))))
 (let ((?x32835 (- (- ?x32831 (* (* 2.0 l_0_11_218) l_0_11_227)) (* (* 2.0 l_0_11_219) l_0_11_228))))
 (let ((?x32839 (+ (- ?x32835 (* (* 2.0 l_0_11_220) l_0_11_229)) (* (* 2.0 l_0_11_23) l_0_11_37))))
 (let ((?x32843 (- (- ?x32839 (* (* 2.0 l_0_11_238) l_0_11_247)) (* (* 2.0 l_0_11_239) l_0_11_248))))
 (let ((?x32847 (- (+ ?x32843 (* (* 2.0 l_0_11_24) l_0_11_38)) (* (* 2.0 l_0_11_240) l_0_11_249))))
 (let ((?x32851 (- (- ?x32847 (* (* 2.0 l_0_11_241) l_0_11_250)) (* (* 2.0 l_0_11_259) l_0_11_268))))
 (let ((?x32855 (- (- ?x32851 (* (* 2.0 l_0_11_260) l_0_11_269)) (* (* 2.0 l_0_11_261) l_0_11_270))))
 (let ((?x32860 (- (- (- ?x32855 (* (* 2.0 l_0_11_262) l_0_11_271)) ?x32131) (* (* 2.0 l_0_11_280) l_0_11_289))))
 (let ((?x32864 (- (- ?x32860 (* (* 2.0 l_0_11_281) l_0_11_290)) (* (* 2.0 l_0_11_282) l_0_11_291))))
 (let ((?x32869 (- (- (- (- ?x32864 (* (* 2.0 l_0_11_283) l_0_11_292)) ?x32133) ?x32135) ?x32137)))
 (let ((?x32883 (+ (+ (+ (- (- (- (- ?x32869 ?x32870) ?x32872) ?x32874) ?x32876) ?x32878) ?x32880) ?x32882)))
 (= (+ ?x32883 ?x32884) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x32392 (* ?x31437 l_0_11_72)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x32390 (* ?x31434 l_0_11_71)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x32388 (* ?x31431 l_0_11_70)))
 (let ((?x31190 (* l_0_11_6 l_0_11_6)))
 (let ((?x31187 (* l_0_11_5 l_0_11_5)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x32382 (* ?x31426 l_0_11_51)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x32380 (* ?x31423 l_0_11_50)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x32378 (* ?x31420 l_0_11_49)))
 (let ((?x31171 (* l_0_11_4 l_0_11_4)))
 (let ((?x18828 (* l_0_11_27 l_0_11_27)))
 (let ((?x5147 (- (+ (+ (* l_0_11_25 l_0_11_25) (* l_0_11_26 l_0_11_26)) ?x18828) ?x31171)))
 (let ((?x4996 (- (- (- (- (+ (+ (+ ?x5147 ?x32378) ?x32380) ?x32382) ?x31187) ?x31190) ?x32388) ?x32390)))
 (= (- ?x4996 ?x32392) 0.0))))))))))))))))))))
(assert
 (let ((?x31912 (* l_0_11_73 l_0_11_73)))
 (let ((?x31909 (* l_0_11_72 l_0_11_72)))
 (let ((?x31906 (* l_0_11_71 l_0_11_71)))
 (let ((?x31903 (* l_0_11_70 l_0_11_70)))
 (let ((?x21366 (* l_0_11_52 l_0_11_52)))
 (let ((?x31940 (* l_0_11_51 l_0_11_51)))
 (let ((?x21344 (* l_0_11_50 l_0_11_50)))
 (let ((?x16983 (* l_0_11_49 l_0_11_49)))
 (let ((?x22086 (+ (* (* 2.0 l_0_11_25) l_0_11_28) (* (* 2.0 l_0_11_26) l_0_11_29))))
 (let ((?x32923 (- (+ ?x22086 (* (* 2.0 l_0_11_27) l_0_11_30)) (* (* 2.0 l_0_11_4) l_0_11_7))))
 (let ((?x32929 (+ (+ (- (+ ?x32923 ?x16983) (* (* 2.0 l_0_11_5) l_0_11_8)) ?x21344) ?x31940)))
 (let ((?x32935 (- (- (- (+ ?x32929 ?x21366) (* (* 2.0 l_0_11_6) l_0_11_9)) ?x31903) ?x31906)))
 (= (- (- ?x32935 ?x31909) ?x31912) 0.0))))))))))))))
(assert
 (let ((?x33011 (* 2.0 l_0_11_90)))
 (let ((?x33012 (* ?x33011 l_0_11_93)))
 (let ((?x33008 (* 2.0 l_0_11_89)))
 (let ((?x33009 (* ?x33008 l_0_11_92)))
 (let ((?x33005 (* 2.0 l_0_11_88)))
 (let ((?x33006 (* ?x33005 l_0_11_91)))
 (let ((?x32708 (* 2.0 l_0_11_73)))
 (let ((?x32709 (* ?x32708 l_0_11_77)))
 (let ((?x32705 (* 2.0 l_0_11_72)))
 (let ((?x32706 (* ?x32705 l_0_11_76)))
 (let ((?x32702 (* 2.0 l_0_11_71)))
 (let ((?x32703 (* ?x32702 l_0_11_75)))
 (let ((?x32699 (* 2.0 l_0_11_70)))
 (let ((?x32700 (* ?x32699 l_0_11_74)))
 (let ((?x32696 (* 2.0 l_0_11_52)))
 (let ((?x32697 (* ?x32696 l_0_11_56)))
 (let ((?x32693 (* 2.0 l_0_11_51)))
 (let ((?x32694 (* ?x32693 l_0_11_55)))
 (let ((?x32690 (* 2.0 l_0_11_50)))
 (let ((?x32691 (* ?x32690 l_0_11_54)))
 (let ((?x32687 (* 2.0 l_0_11_49)))
 (let ((?x32688 (* ?x32687 l_0_11_53)))
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x32989 (* ?x32988 l_0_11_177)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x32986 (* ?x32985 l_0_11_176)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x32983 (* ?x32982 l_0_11_175)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x32980 (* ?x32979 l_0_11_156)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x32977 (* ?x32976 l_0_11_155)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x32974 (* ?x32973 l_0_11_154)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x32966 (* ?x32965 l_0_11_114)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x32963 (* ?x32962 l_0_11_113)))
 (let ((?x32961 (- (* (* 2.0 l_0_11_109) l_0_11_112) (* (* 2.0 l_0_11_11) l_0_11_4))))
 (let ((?x32972 (- (- (+ (+ ?x32961 ?x32963) ?x32966) (* (* 2.0 l_0_11_12) l_0_11_5)) (* (* 2.0 l_0_11_13) l_0_11_6))))
 (let ((?x32992 (+ (- (- (- (+ (+ (+ ?x32972 ?x32974) ?x32977) ?x32980) ?x32983) ?x32986) ?x32989) (* (* 2.0 l_0_11_25) l_0_11_32))))
 (let ((?x32996 (+ (+ ?x32992 (* (* 2.0 l_0_11_26) l_0_11_33)) (* (* 2.0 l_0_11_27) l_0_11_34))))
 (let ((?x33003 (- (- (- (+ (+ (+ (+ ?x32996 ?x32688) ?x32691) ?x32694) ?x32697) ?x32700) ?x32703) ?x32706)))
 (= (- (- (- (- ?x33003 ?x32709) ?x33006) ?x33009) ?x33012) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32708 (* 2.0 l_0_11_73)))
 (let ((?x32884 (* ?x32708 l_0_11_82)))
 (let ((?x32705 (* 2.0 l_0_11_72)))
 (let ((?x32882 (* ?x32705 l_0_11_81)))
 (let ((?x32702 (* 2.0 l_0_11_71)))
 (let ((?x32880 (* ?x32702 l_0_11_80)))
 (let ((?x32699 (* 2.0 l_0_11_70)))
 (let ((?x32878 (* ?x32699 l_0_11_79)))
 (let ((?x32696 (* 2.0 l_0_11_52)))
 (let ((?x32876 (* ?x32696 l_0_11_61)))
 (let ((?x32693 (* 2.0 l_0_11_51)))
 (let ((?x32874 (* ?x32693 l_0_11_60)))
 (let ((?x32690 (* 2.0 l_0_11_50)))
 (let ((?x32872 (* ?x32690 l_0_11_59)))
 (let ((?x32687 (* 2.0 l_0_11_49)))
 (let ((?x32870 (* ?x32687 l_0_11_58)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x31772 (* ?x31771 l_0_11_135)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x31769 (* ?x31768 l_0_11_134)))
 (let ((?x5448 (- (- (- (* (* (- 2.0) l_0_11_130) l_0_11_133) ?x31769) ?x31772) (* (* 2.0 l_0_11_16) l_0_11_4))))
 (let ((?x33035 (- (- ?x5448 (* (* 2.0 l_0_11_17) l_0_11_5)) (* (* 2.0 l_0_11_18) l_0_11_6))))
 (let ((?x33039 (+ (+ ?x33035 (* (* 2.0 l_0_11_25) l_0_11_37)) (* (* 2.0 l_0_11_26) l_0_11_38))))
 (let ((?x33044 (+ (+ (+ (+ ?x33039 (* (* 2.0 l_0_11_27) l_0_11_39)) ?x32870) ?x32872) ?x32874)))
 (= (- (- (- (- (+ ?x33044 ?x32876) ?x32878) ?x32880) ?x32882) ?x32884) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31918 (* l_0_11_9 l_0_11_9)))
 (let ((?x31915 (* l_0_11_8 l_0_11_8)))
 (let ((?x31900 (* l_0_11_7 l_0_11_7)))
 (let ((?x16948 (* l_0_11_31 l_0_11_31)))
 (let ((?x31934 (* l_0_11_30 l_0_11_30)))
 (let ((?x21339 (* l_0_11_29 l_0_11_29)))
 (let ((?x33062 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_28 l_0_11_28)) ?x21339)))
 (= (- (- (- (+ (+ ?x33062 ?x31934) ?x16948) ?x31900) ?x31915) ?x31918) 0.0)))))))))
(assert
 (let ((?x33132 (* l_0_11_94 l_0_11_94)))
 (let ((?x33130 (* l_0_11_93 l_0_11_93)))
 (let ((?x33128 (* l_0_11_92 l_0_11_92)))
 (let ((?x33126 (* l_0_11_91 l_0_11_91)))
 (let ((?x33112 (* l_0_11_178 l_0_11_178)))
 (let ((?x33110 (* l_0_11_177 l_0_11_177)))
 (let ((?x33108 (* l_0_11_176 l_0_11_176)))
 (let ((?x33106 (* l_0_11_175 l_0_11_175)))
 (let ((?x33104 (* l_0_11_157 l_0_11_157)))
 (let ((?x33102 (* l_0_11_156 l_0_11_156)))
 (let ((?x33100 (* l_0_11_155 l_0_11_155)))
 (let ((?x33098 (* l_0_11_154 l_0_11_154)))
 (let ((?x33092 (* l_0_11_115 l_0_11_115)))
 (let ((?x33090 (* l_0_11_114 l_0_11_114)))
 (let ((?x33088 (* l_0_11_113 l_0_11_113)))
 (let ((?x33086 (* l_0_11_112 l_0_11_112)))
 (let ((?x33085 (- (* (* (- 2.0) l_0_11_10) l_0_11_14) (* (* 2.0 l_0_11_11) l_0_11_7))))
 (let ((?x33095 (- (+ (+ (+ (+ ?x33085 ?x33086) ?x33088) ?x33090) ?x33092) (* (* 2.0 l_0_11_12) l_0_11_8))))
 (let ((?x33103 (+ (+ (+ (- ?x33095 (* (* 2.0 l_0_11_13) l_0_11_9)) ?x33098) ?x33100) ?x33102)))
 (let ((?x33116 (+ (- (- (- (- (+ ?x33103 ?x33104) ?x33106) ?x33108) ?x33110) ?x33112) (* (* 2.0 l_0_11_28) l_0_11_32))))
 (let ((?x33122 (+ (+ ?x33116 (* (* 2.0 l_0_11_29) l_0_11_33)) (* (* 2.0 l_0_11_30) l_0_11_34))))
 (let ((?x33131 (- (- (- (+ ?x33122 (* (* 2.0 l_0_11_31) l_0_11_35)) ?x33126) ?x33128) ?x33130)))
 (= (- ?x33131 ?x33132) 0.0))))))))))))))))))))))))
(assert
 (let ((?x31872 (* l_0_11_136 l_0_11_136)))
 (let ((?x31870 (* l_0_11_135 l_0_11_135)))
 (let ((?x31868 (* l_0_11_134 l_0_11_134)))
 (let ((?x31866 (* l_0_11_133 l_0_11_133)))
 (let ((?x33161 (- (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x31866) ?x31868) ?x31870) ?x31872)))
 (let ((?x33165 (- (- ?x33161 (* (* 2.0 l_0_11_16) l_0_11_7)) (* (* 2.0 l_0_11_17) l_0_11_8))))
 (let ((?x33169 (+ (- ?x33165 (* (* 2.0 l_0_11_18) l_0_11_9)) (* (* 2.0 l_0_11_28) l_0_11_37))))
 (let ((?x33173 (+ (+ ?x33169 (* (* 2.0 l_0_11_29) l_0_11_38)) (* (* 2.0 l_0_11_30) l_0_11_39))))
 (= (+ ?x33173 (* (* 2.0 l_0_11_31) l_0_11_40)) 0.0))))))))))
(assert
 (let ((?x33235 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x33232 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x33229 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x33226 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x20227 (* l_0_11_36 l_0_11_36)))
 (let ((?x30898 (* l_0_11_35 l_0_11_35)))
 (let ((?x20222 (* l_0_11_34 l_0_11_34)))
 (let ((?x20220 (* l_0_11_33 l_0_11_33)))
 (let ((?x20199 (* l_0_11_32 l_0_11_32)))
 (let ((?x33217 (* 2.0 l_0_11_178)))
 (let ((?x33218 (* ?x33217 l_0_11_182)))
 (let ((?x33214 (* 2.0 l_0_11_177)))
 (let ((?x33215 (* ?x33214 l_0_11_181)))
 (let ((?x33211 (* 2.0 l_0_11_176)))
 (let ((?x33212 (* ?x33211 l_0_11_180)))
 (let ((?x33208 (* 2.0 l_0_11_175)))
 (let ((?x33209 (* ?x33208 l_0_11_179)))
 (let ((?x33205 (* 2.0 l_0_11_157)))
 (let ((?x33206 (* ?x33205 l_0_11_161)))
 (let ((?x33202 (* 2.0 l_0_11_156)))
 (let ((?x33203 (* ?x33202 l_0_11_160)))
 (let ((?x33199 (* 2.0 l_0_11_155)))
 (let ((?x33200 (* ?x33199 l_0_11_159)))
 (let ((?x33196 (* 2.0 l_0_11_154)))
 (let ((?x33197 (* ?x33196 l_0_11_158)))
 (let ((?x30728 (* l_0_11_15 l_0_11_15)))
 (let ((?x30722 (* l_0_11_14 l_0_11_14)))
 (let ((?x30719 (* l_0_11_13 l_0_11_13)))
 (let ((?x30716 (* l_0_11_12 l_0_11_12)))
 (let ((?x33189 (* 2.0 l_0_11_115)))
 (let ((?x33190 (* ?x33189 l_0_11_119)))
 (let ((?x33186 (* 2.0 l_0_11_114)))
 (let ((?x33187 (* ?x33186 l_0_11_118)))
 (let ((?x33183 (* 2.0 l_0_11_113)))
 (let ((?x33184 (* ?x33183 l_0_11_117)))
 (let ((?x33182 (+ (* (- l_0_11_11) l_0_11_11) (* (* 2.0 l_0_11_112) l_0_11_116))))
 (let ((?x33195 (- (- (- (- (+ (+ (+ ?x33182 ?x33184) ?x33187) ?x33190) ?x30716) ?x30719) ?x30722) ?x30728)))
 (let ((?x33216 (- (- (- (+ (+ (+ (+ ?x33195 ?x33197) ?x33200) ?x33203) ?x33206) ?x33209) ?x33212) ?x33215)))
 (let ((?x33227 (- (+ (+ (+ (+ (+ (- ?x33216 ?x33218) ?x20199) ?x20220) ?x20222) ?x30898) ?x20227) ?x33226)))
 (= (- (- (- ?x33227 ?x33229) ?x33232) ?x33235) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33217 (* 2.0 l_0_11_178)))
 (let ((?x33346 (* ?x33217 l_0_11_187)))
 (let ((?x33214 (* 2.0 l_0_11_177)))
 (let ((?x33344 (* ?x33214 l_0_11_186)))
 (let ((?x33211 (* 2.0 l_0_11_176)))
 (let ((?x33342 (* ?x33211 l_0_11_185)))
 (let ((?x33208 (* 2.0 l_0_11_175)))
 (let ((?x33340 (* ?x33208 l_0_11_184)))
 (let ((?x33205 (* 2.0 l_0_11_157)))
 (let ((?x33338 (* ?x33205 l_0_11_166)))
 (let ((?x33202 (* 2.0 l_0_11_156)))
 (let ((?x33336 (* ?x33202 l_0_11_165)))
 (let ((?x33199 (* 2.0 l_0_11_155)))
 (let ((?x33334 (* ?x33199 l_0_11_164)))
 (let ((?x33196 (* 2.0 l_0_11_154)))
 (let ((?x33332 (* ?x33196 l_0_11_163)))
 (let ((?x31984 (* 2.0 l_0_11_136)))
 (let ((?x31985 (* ?x31984 l_0_11_140)))
 (let ((?x31981 (* 2.0 l_0_11_135)))
 (let ((?x31982 (* ?x31981 l_0_11_139)))
 (let ((?x31978 (* 2.0 l_0_11_134)))
 (let ((?x31979 (* ?x31978 l_0_11_138)))
 (let ((?x31975 (* 2.0 l_0_11_133)))
 (let ((?x31976 (* ?x31975 l_0_11_137)))
 (let ((?x33189 (* 2.0 l_0_11_115)))
 (let ((?x33316 (* ?x33189 l_0_11_124)))
 (let ((?x33186 (* 2.0 l_0_11_114)))
 (let ((?x33314 (* ?x33186 l_0_11_123)))
 (let ((?x33183 (* 2.0 l_0_11_113)))
 (let ((?x33312 (* ?x33183 l_0_11_122)))
 (let ((?x33180 (* 2.0 l_0_11_112)))
 (let ((?x33310 (* ?x33180 l_0_11_121)))
 (let ((?x33305 (* 2.0 l_0_11_103)))
 (let ((?x33306 (* ?x33305 l_0_11_94)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x33303 (* ?x33302 l_0_11_93)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x33300 (* ?x33299 l_0_11_92)))
 (let ((?x33309 (- (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_91) ?x33300) ?x33303) ?x33306) (* (* 2.0 l_0_11_11) l_0_11_16))))
 (let ((?x33319 (- (+ (+ (+ (+ ?x33309 ?x33310) ?x33312) ?x33314) ?x33316) (* (* 2.0 l_0_11_12) l_0_11_17))))
 (let ((?x33324 (- (- (- (- ?x33319 (* (* 2.0 l_0_11_13) l_0_11_18)) ?x31976) ?x31979) ?x31982)))
 (let ((?x33331 (- (- (- ?x33324 ?x31985) (* (* 2.0 l_0_11_14) l_0_11_19)) (* (* 2.0 l_0_11_15) l_0_11_20))))
 (let ((?x33345 (- (- (- (+ (+ (+ (+ ?x33331 ?x33332) ?x33334) ?x33336) ?x33338) ?x33340) ?x33342) ?x33344)))
 (let ((?x33353 (+ (+ (- ?x33345 ?x33346) (* (* 2.0 l_0_11_32) l_0_11_37)) (* (* 2.0 l_0_11_33) l_0_11_38))))
 (let ((?x33359 (+ (+ ?x33353 (* (* 2.0 l_0_11_34) l_0_11_39)) (* (* 2.0 l_0_11_35) l_0_11_40))))
 (= (+ ?x33359 (* (* 2.0 l_0_11_36) l_0_11_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33460 (* l_0_11_42 l_0_11_42)))
 (let ((?x33458 (* l_0_11_41 l_0_11_41)))
 (let ((?x33456 (* l_0_11_40 l_0_11_40)))
 (let ((?x33454 (* l_0_11_39 l_0_11_39)))
 (let ((?x33452 (* l_0_11_38 l_0_11_38)))
 (let ((?x33450 (* l_0_11_37 l_0_11_37)))
 (let ((?x33448 (* l_0_11_21 l_0_11_21)))
 (let ((?x33446 (* l_0_11_20 l_0_11_20)))
 (let ((?x33444 (* l_0_11_19 l_0_11_19)))
 (let ((?x33442 (* l_0_11_18 l_0_11_18)))
 (let ((?x33440 (* l_0_11_17 l_0_11_17)))
 (let ((?x33422 (* l_0_11_16 l_0_11_16)))
 (let ((?x31984 (* 2.0 l_0_11_136)))
 (let ((?x32118 (* ?x31984 l_0_11_145)))
 (let ((?x31981 (* 2.0 l_0_11_135)))
 (let ((?x32116 (* ?x31981 l_0_11_144)))
 (let ((?x31978 (* 2.0 l_0_11_134)))
 (let ((?x32114 (* ?x31978 l_0_11_143)))
 (let ((?x33439 (- (- (- (- (* (* (- 2.0) l_0_11_133) l_0_11_142) ?x32114) ?x32116) ?x32118) ?x33422)))
 (let ((?x33453 (+ (+ (- (- (- (- (- ?x33439 ?x33440) ?x33442) ?x33444) ?x33446) ?x33448) ?x33450) ?x33452)))
 (= (+ (+ (+ (+ ?x33453 ?x33454) ?x33456) ?x33458) ?x33460) 0.0))))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33490 (* ?x31669 l_0_11_68)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33488 (* ?x31666 l_0_11_67)))
 (let ((?x31524 (* l_0_11_64 l_0_11_64)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33485 (* ?x31521 l_0_11_67)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33483 (* ?x31661 l_0_11_47)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33481 (* ?x31658 l_0_11_46)))
 (let ((?x20918 (* l_0_11_43 l_0_11_43)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33478 (* ?x31515 l_0_11_46)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33476 (* ?x31544 l_0_11_25)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x33465 (* ?x31534 l_0_11_4)))
 (let ((?x33480 (+ (- (- (+ ?x33465 (* (* 2.0 l_0_11_127) l_0_11_130)) ?x33476) ?x33478) ?x20918)))
 (= (+ (+ (- (+ (- (- ?x33480 ?x33481) ?x33483) ?x33485) ?x31524) ?x33488) ?x33490) 0.0)))))))))))))))))))))
(assert
 (let ((?x33517 (* l_0_11_85 l_0_11_85)))
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33515 (* ?x31669 l_0_11_75)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33513 (* ?x31666 l_0_11_74)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33511 (* ?x31521 l_0_11_74)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33509 (* ?x31661 l_0_11_54)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33507 (* ?x31658 l_0_11_53)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33505 (* ?x31515 l_0_11_53)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33503 (* ?x31544 l_0_11_32)))
 (let ((?x33501 (* l_0_11_169 l_0_11_169)))
 (let ((?x22800 (* l_0_11_148 l_0_11_148)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x5942 (* ?x31537 l_0_11_137)))
 (let ((?x22797 (+ (+ (* (* 12.0 l_0_11_1) l_0_11_11) (* l_0_11_106 l_0_11_106)) ?x5942)))
 (let ((?x33512 (+ (- (- (- (- (- (+ ?x22797 ?x22800) ?x33501) ?x33503) ?x33505) ?x33507) ?x33509) ?x33511)))
 (= (- (+ (+ ?x33512 ?x33513) ?x33515) ?x33517) 0.0)))))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33570 (* ?x31669 l_0_11_80)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33568 (* ?x31666 l_0_11_79)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33566 (* ?x31521 l_0_11_79)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33564 (* ?x31661 l_0_11_59)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33562 (* ?x31658 l_0_11_58)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33560 (* ?x31515 l_0_11_58)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33558 (* ?x31544 l_0_11_37)))
 (let ((?x20770 (* l_0_11_127 l_0_11_127)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x33554 (* ?x31534 l_0_11_16)))
 (let ((?x33561 (- (- (- (+ ?x33554 (* (* 2.0 l_0_11_127) l_0_11_142)) ?x20770) ?x33558) ?x33560)))
 (= (+ (+ (+ (- (- ?x33561 ?x33562) ?x33564) ?x33566) ?x33568) ?x33570) 0.0))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33490 (* ?x31669 l_0_11_68)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33488 (* ?x31666 l_0_11_67)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33629 (* ?x31625 l_0_11_67)))
 (let ((?x31626 (* ?x31625 l_0_11_65)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33483 (* ?x31661 l_0_11_47)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33481 (* ?x31658 l_0_11_46)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33624 (* ?x31620 l_0_11_46)))
 (let ((?x31621 (* ?x31620 l_0_11_44)))
 (let ((?x31285 (* 12.0 l_0_11_3)))
 (let ((?x31286 (* ?x31285 l_0_11_5)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31275 (* ?x31032 l_0_11_26)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31269 (* ?x31023 l_0_11_25)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33476 (* ?x31544 l_0_11_25)))
 (let ((?x31262 (* 12.0 l_0_11_2)))
 (let ((?x31263 (* ?x31262 l_0_11_4)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33599 (* ?x31703 l_0_11_131)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x33465 (* ?x31534 l_0_11_4)))
 (let ((?x33609 (- (+ (+ ?x33465 (* (* 2.0 l_0_11_128) l_0_11_130)) ?x33599) (* (* 2.0 l_0_11_190) l_0_11_193))))
 (let ((?x33614 (- (- (- (+ ?x33609 ?x31263) (* (* 2.0 l_0_11_211) l_0_11_214)) ?x33476) ?x31269)))
 (let ((?x33619 (- (- (- ?x33614 (* (* 2.0 l_0_11_232) l_0_11_235)) ?x31275) (* (* 2.0 l_0_11_253) l_0_11_256))))
 (let ((?x33625 (- (+ (+ (- ?x33619 (* (* 2.0 l_0_11_274) l_0_11_277)) ?x31286) ?x31621) ?x33624)))
 (= (+ (+ (+ (- (- (- ?x33625 ?x33481) ?x33483) ?x31626) ?x33629) ?x33488) ?x33490) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33696 (* ?x32031 l_0_11_86)))
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33515 (* ?x31669 l_0_11_75)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33513 (* ?x31666 l_0_11_74)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33692 (* ?x31625 l_0_11_74)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33509 (* ?x31661 l_0_11_54)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33507 (* ?x31658 l_0_11_53)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33688 (* ?x31620 l_0_11_53)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x31033 (* ?x31032 l_0_11_33)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x31024 (* ?x31023 l_0_11_32)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33503 (* ?x31544 l_0_11_32)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33673 (* ?x31990 l_0_11_170)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33671 (* ?x31987 l_0_11_149)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33669 (* ?x31703 l_0_11_138)))
 (let ((?x31692 (* 2.0 l_0_11_128)))
 (let ((?x33667 (* ?x31692 l_0_11_137)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31001 (* ?x31000 l_0_11_3)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x30998 (* ?x30997 l_0_11_2)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x22773 (* ?x31534 l_0_11_11)))
 (let ((?x33668 (+ (+ (+ (+ ?x22773 (* (* 2.0 l_0_11_106) l_0_11_107)) ?x30998) ?x31001) ?x33667)))
 (let ((?x33676 (- (- (+ (+ ?x33668 ?x33669) ?x33671) ?x33673) (* (* 2.0 l_0_11_190) l_0_11_200))))
 (let ((?x33682 (- (- (- (- ?x33676 (* (* 2.0 l_0_11_211) l_0_11_221)) ?x33503) ?x31024) (* (* 2.0 l_0_11_232) l_0_11_242))))
 (let ((?x33687 (- (- (- ?x33682 ?x31033) (* (* 2.0 l_0_11_253) l_0_11_263)) (* (* 2.0 l_0_11_274) l_0_11_284))))
 (let ((?x33697 (- (+ (+ (+ (- (- (- ?x33687 ?x33688) ?x33507) ?x33509) ?x33692) ?x33513) ?x33515) ?x33696)))
 (= ?x33697 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31669 (* 6.0 l_0_11_66)))
 (let ((?x33570 (* ?x31669 l_0_11_80)))
 (let ((?x31666 (* 6.0 l_0_11_65)))
 (let ((?x33568 (* ?x31666 l_0_11_79)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33742 (* ?x31625 l_0_11_79)))
 (let ((?x31661 (* 6.0 l_0_11_45)))
 (let ((?x33564 (* ?x31661 l_0_11_59)))
 (let ((?x31658 (* 6.0 l_0_11_44)))
 (let ((?x33562 (* ?x31658 l_0_11_58)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33738 (* ?x31620 l_0_11_58)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x33732 (* ?x31032 l_0_11_38)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x33728 (* ?x31023 l_0_11_37)))
 (let ((?x31544 (* 12.0 l_0_11_22)))
 (let ((?x33558 (* ?x31544 l_0_11_37)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x33721 (* ?x32123 l_0_11_3)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x33719 (* ?x32120 l_0_11_2)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33717 (* ?x31703 l_0_11_143)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x31538 (* ?x31537 l_0_11_128)))
 (let ((?x31534 (* 12.0 l_0_11_1)))
 (let ((?x33554 (* ?x31534 l_0_11_16)))
 (let ((?x33720 (+ (+ (+ (- ?x33554 ?x31538) (* (* 2.0 l_0_11_128) l_0_11_142)) ?x33717) ?x33719)))
 (let ((?x33726 (- (- (+ ?x33720 ?x33721) (* (* 2.0 l_0_11_190) l_0_11_205)) (* (* 2.0 l_0_11_211) l_0_11_226))))
 (let ((?x33733 (- (- (- (- ?x33726 ?x33558) ?x33728) (* (* 2.0 l_0_11_232) l_0_11_247)) ?x33732)))
 (let ((?x33737 (- (- ?x33733 (* (* 2.0 l_0_11_253) l_0_11_268)) (* (* 2.0 l_0_11_274) l_0_11_289))))
 (= (+ (+ (+ (- (- (- ?x33737 ?x33738) ?x33562) ?x33564) ?x33742) ?x33568) ?x33570) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31203 (* l_0_11_69 l_0_11_69)))
 (let ((?x33795 (* 3.0 ?x31203)))
 (let ((?x31200 (* l_0_11_68 l_0_11_68)))
 (let ((?x33793 (* 3.0 ?x31200)))
 (let ((?x31197 (* l_0_11_67 l_0_11_67)))
 (let ((?x33791 (* 3.0 ?x31197)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33629 (* ?x31625 l_0_11_67)))
 (let ((?x31190 (* l_0_11_6 l_0_11_6)))
 (let ((?x31191 (* 6.0 ?x31190)))
 (let ((?x31187 (* l_0_11_5 l_0_11_5)))
 (let ((?x31188 (* 6.0 ?x31187)))
 (let ((?x33786 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x33783 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33624 (* ?x31620 l_0_11_46)))
 (let ((?x31171 (* l_0_11_4 l_0_11_4)))
 (let ((?x31172 (* 6.0 ?x31171)))
 (let ((?x31163 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x31160 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x31151 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x33772 (* l_0_11_132 l_0_11_132)))
 (let ((?x33773 (+ (+ (* l_0_11_130 l_0_11_130) (* l_0_11_131 l_0_11_131)) ?x33772)))
 (let ((?x33781 (- (+ (+ (- (- (- ?x33773 ?x31151) ?x31160) ?x31163) ?x31172) ?x33624) (* (* 3.0 l_0_11_46) l_0_11_46))))
 (let ((?x33794 (+ (+ (- (+ (+ (- (- ?x33781 ?x33783) ?x33786) ?x31188) ?x31191) ?x33629) ?x33791) ?x33793)))
 (= (+ ?x33794 ?x33795) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33846 (* ?x32031 l_0_11_88)))
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x33844 (* ?x31808 l_0_11_76)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x33842 (* ?x31805 l_0_11_75)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x33840 (* ?x31802 l_0_11_74)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33692 (* ?x31625 l_0_11_74)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x33837 (* ?x31792 l_0_11_55)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x33835 (* ?x31789 l_0_11_54)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33688 (* ?x31620 l_0_11_53)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x31407 (* ?x31406 l_0_11_34)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x31404 (* ?x31403 l_0_11_33)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x31392 (* ?x31391 l_0_11_32)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33827 (* ?x31990 l_0_11_172)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33825 (* ?x31987 l_0_11_151)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x33823 (* ?x31771 l_0_11_139)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x33821 (* ?x31768 l_0_11_138)))
 (let ((?x21301 (* 2.0 l_0_11_130)))
 (let ((?x33819 (* ?x21301 l_0_11_137)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x31354 (* ?x31353 l_0_11_6)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x31351 (* ?x31000 l_0_11_5)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x31349 (* ?x30997 l_0_11_4)))
 (let ((?x33820 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_109) ?x31349) ?x31351) ?x31354) ?x33819)))
 (let ((?x33831 (- (- (- (- (+ (+ (+ ?x33820 ?x33821) ?x33823) ?x33825) ?x33827) ?x31392) ?x31404) ?x31407)))
 (let ((?x33838 (- (- (- (+ ?x33831 ?x33688) (* (* 6.0 l_0_11_46) l_0_11_53)) ?x33835) ?x33837)))
 (= (- (+ (+ (+ (- ?x33838 ?x33692) ?x33840) ?x33842) ?x33844) ?x33846) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x33913 (* ?x31808 l_0_11_81)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x33911 (* ?x31805 l_0_11_80)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x33909 (* ?x31802 l_0_11_79)))
 (let ((?x31625 (* 2.0 l_0_11_64)))
 (let ((?x33742 (* ?x31625 l_0_11_79)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x33906 (* ?x31792 l_0_11_60)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x33904 (* ?x31789 l_0_11_59)))
 (let ((?x31620 (* 2.0 l_0_11_43)))
 (let ((?x33738 (* ?x31620 l_0_11_58)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x33899 (* ?x31406 l_0_11_39)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x33897 (* ?x31403 l_0_11_38)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x33895 (* ?x31391 l_0_11_37)))
 (let ((?x32126 (* 12.0 l_0_11_18)))
 (let ((?x33893 (* ?x32126 l_0_11_6)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x33891 (* ?x32123 l_0_11_5)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x33889 (* ?x32120 l_0_11_4)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x33887 (* ?x31771 l_0_11_144)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x33885 (* ?x31768 l_0_11_143)))
 (let ((?x33884 (+ (* (* (- 2.0) l_0_11_127) l_0_11_130) (* (* 2.0 l_0_11_130) l_0_11_142))))
 (let ((?x33898 (- (- (+ (+ (+ (+ (+ ?x33884 ?x33885) ?x33887) ?x33889) ?x33891) ?x33893) ?x33895) ?x33897)))
 (let ((?x33905 (- (- (+ (- ?x33898 ?x33899) ?x33738) (* (* 6.0 l_0_11_46) l_0_11_58)) ?x33904)))
 (= (+ (+ (+ (- (- ?x33905 ?x33906) ?x33742) ?x33909) ?x33911) ?x33913) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33996 (* ?x32031 l_0_11_95)))
 (let ((?x30832 (* l_0_11_78 l_0_11_78)))
 (let ((?x33994 (* 3.0 ?x30832)))
 (let ((?x30829 (* l_0_11_77 l_0_11_77)))
 (let ((?x33992 (* 3.0 ?x30829)))
 (let ((?x30826 (* l_0_11_76 l_0_11_76)))
 (let ((?x33990 (* 3.0 ?x30826)))
 (let ((?x30823 (* l_0_11_75 l_0_11_75)))
 (let ((?x33988 (* 3.0 ?x30823)))
 (let ((?x30820 (* l_0_11_74 l_0_11_74)))
 (let ((?x33986 (* 3.0 ?x30820)))
 (let ((?x33984 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x33981 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x33978 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x33975 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x30803 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x30800 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x30797 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x30794 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x30791 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33964 (* ?x31990 l_0_11_179)))
 (let ((?x30728 (* l_0_11_15 l_0_11_15)))
 (let ((?x30729 (* 6.0 ?x30728)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33961 (* ?x31987 l_0_11_158)))
 (let ((?x33959 (* l_0_11_141 l_0_11_141)))
 (let ((?x33957 (* l_0_11_140 l_0_11_140)))
 (let ((?x30722 (* l_0_11_14 l_0_11_14)))
 (let ((?x30723 (* 6.0 ?x30722)))
 (let ((?x33954 (* l_0_11_139 l_0_11_139)))
 (let ((?x33952 (* l_0_11_138 l_0_11_138)))
 (let ((?x33950 (* l_0_11_137 l_0_11_137)))
 (let ((?x30719 (* l_0_11_13 l_0_11_13)))
 (let ((?x30720 (* 6.0 ?x30719)))
 (let ((?x30716 (* l_0_11_12 l_0_11_12)))
 (let ((?x30717 (* 6.0 ?x30716)))
 (let ((?x30713 (* l_0_11_11 l_0_11_11)))
 (let ((?x30714 (* 6.0 ?x30713)))
 (let ((?x33951 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_116) ?x30714) ?x30717) ?x30720) ?x33950)))
 (let ((?x33963 (+ (+ (+ (+ (+ (+ (+ ?x33951 ?x33952) ?x33954) ?x30723) ?x33957) ?x33959) ?x33961) ?x30729)))
 (let ((?x33973 (- (- (- (- (- (- (- ?x33963 ?x33964) ?x30791) ?x30794) ?x30797) ?x30800) ?x30803) (* (* 3.0 l_0_11_53) l_0_11_53))))
 (let ((?x33991 (+ (+ (+ (- (- (- (- ?x33973 ?x33975) ?x33978) ?x33981) ?x33984) ?x33986) ?x33988) ?x33990)))
 (= (- (+ (+ ?x33991 ?x33992) ?x33994) ?x33996) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34108 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x34105 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x34102 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x34099 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x34096 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x34093 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x34090 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x34087 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x34084 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x34078 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x34075 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x34072 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x34069 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x34066 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x34063 (* ?x31990 l_0_11_184)))
 (let ((?x34061 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x34058 (* ?x31987 l_0_11_163)))
 (let ((?x34056 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x34053 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x34050 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x34047 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x34044 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x34041 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x34038 (* ?x31353 l_0_11_18)))
 (let ((?x31537 (* 2.0 l_0_11_127)))
 (let ((?x5942 (* ?x31537 l_0_11_137)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x34035 (* ?x31000 l_0_11_17)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x34033 (* ?x30997 l_0_11_16)))
 (let ((?x31966 (* 2.0 l_0_11_106)))
 (let ((?x34031 (* ?x31966 l_0_11_121)))
 (let ((?x34037 (- (+ (+ (+ (* (* (- 2.0) l_0_11_100) l_0_11_85) ?x34031) ?x34033) ?x34035) ?x5942)))
 (let ((?x34057 (+ (+ (+ (+ (+ (+ (+ ?x34037 ?x34038) ?x34041) ?x34044) ?x34047) ?x34050) ?x34053) ?x34056)))
 (let ((?x34076 (- (- (- (- (- (+ (+ ?x34057 ?x34058) ?x34061) ?x34063) ?x34066) ?x34069) ?x34072) ?x34075)))
 (let ((?x34088 (- (- (- (- ?x34076 ?x34078) (* (* 6.0 l_0_11_53) l_0_11_58)) ?x34084) ?x34087)))
 (let ((?x34109 (+ (+ (+ (+ (+ (- (- ?x34088 ?x34090) ?x34093) ?x34096) ?x34099) ?x34102) ?x34105) ?x34108)))
 (= ?x34109 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34231 (* l_0_11_84 l_0_11_84)))
 (let ((?x34232 (* 3.0 ?x34231)))
 (let ((?x34228 (* l_0_11_83 l_0_11_83)))
 (let ((?x34229 (* 3.0 ?x34228)))
 (let ((?x34225 (* l_0_11_82 l_0_11_82)))
 (let ((?x34226 (* 3.0 ?x34225)))
 (let ((?x34222 (* l_0_11_81 l_0_11_81)))
 (let ((?x34223 (* 3.0 ?x34222)))
 (let ((?x34219 (* l_0_11_80 l_0_11_80)))
 (let ((?x34220 (* 3.0 ?x34219)))
 (let ((?x34216 (* l_0_11_79 l_0_11_79)))
 (let ((?x34217 (* 3.0 ?x34216)))
 (let ((?x34214 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x34211 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x34208 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x34205 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x34202 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x34196 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x34193 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x34190 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x34187 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x34184 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x34181 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x33448 (* l_0_11_21 l_0_11_21)))
 (let ((?x34178 (* 6.0 ?x33448)))
 (let ((?x33446 (* l_0_11_20 l_0_11_20)))
 (let ((?x34176 (* 6.0 ?x33446)))
 (let ((?x33444 (* l_0_11_19 l_0_11_19)))
 (let ((?x34174 (* 6.0 ?x33444)))
 (let ((?x33442 (* l_0_11_18 l_0_11_18)))
 (let ((?x34172 (* 6.0 ?x33442)))
 (let ((?x33440 (* l_0_11_17 l_0_11_17)))
 (let ((?x34170 (* 6.0 ?x33440)))
 (let ((?x33422 (* l_0_11_16 l_0_11_16)))
 (let ((?x34168 (* 6.0 ?x33422)))
 (let ((?x34166 (* l_0_11_147 l_0_11_147)))
 (let ((?x34164 (* l_0_11_146 l_0_11_146)))
 (let ((?x34162 (* l_0_11_145 l_0_11_145)))
 (let ((?x34160 (* l_0_11_144 l_0_11_144)))
 (let ((?x7281 (* l_0_11_143 l_0_11_143)))
 (let ((?x7331 (* l_0_11_142 l_0_11_142)))
 (let ((?x34163 (+ (+ (+ (+ (* (* (- 2.0) l_0_11_127) l_0_11_142) ?x7331) ?x7281) ?x34160) ?x34162)))
 (let ((?x34177 (+ (+ (+ (+ (+ (+ (+ ?x34163 ?x34164) ?x34166) ?x34168) ?x34170) ?x34172) ?x34174) ?x34176)))
 (let ((?x34197 (- (- (- (- (- (- (+ ?x34177 ?x34178) ?x34181) ?x34184) ?x34187) ?x34190) ?x34193) ?x34196)))
 (let ((?x34209 (- (- (- (- ?x34197 (* (* 3.0 l_0_11_58) l_0_11_58)) ?x34202) ?x34205) ?x34208)))
 (let ((?x34230 (+ (+ (+ (+ (+ (- (- ?x34209 ?x34211) ?x34214) ?x34217) ?x34220) ?x34223) ?x34226) ?x34229)))
 (= (+ ?x34230 ?x34232) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x34288 (* ?x31056 l_0_11_80)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x34286 (* ?x31053 l_0_11_79)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x34284 (* ?x31050 l_0_11_59)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x34282 (* ?x31047 l_0_11_58)))
 (let ((?x31032 (* 12.0 l_0_11_24)))
 (let ((?x33732 (* ?x31032 l_0_11_38)))
 (let ((?x31023 (* 12.0 l_0_11_23)))
 (let ((?x33728 (* ?x31023 l_0_11_37)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x33721 (* ?x32123 l_0_11_3)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x33719 (* ?x32120 l_0_11_2)))
 (let ((?x34258 (+ (- (* (- l_0_11_128) l_0_11_128) (* l_0_11_129 l_0_11_129)) ?x33719)))
 (let ((?x34263 (- (- (+ ?x34258 ?x33721) (* (* 2.0 l_0_11_191) l_0_11_205)) (* (* 2.0 l_0_11_192) l_0_11_206))))
 (let ((?x34267 (- (- ?x34263 (* (* 2.0 l_0_11_212) l_0_11_226)) (* (* 2.0 l_0_11_213) l_0_11_227))))
 (let ((?x34272 (- (- (- ?x34267 ?x33728) (* (* 2.0 l_0_11_233) l_0_11_247)) (* (* 2.0 l_0_11_234) l_0_11_248))))
 (let ((?x34277 (- (- (- ?x34272 ?x33732) (* (* 2.0 l_0_11_254) l_0_11_268)) (* (* 2.0 l_0_11_255) l_0_11_269))))
 (let ((?x34281 (- (- ?x34277 (* (* 2.0 l_0_11_275) l_0_11_289)) (* (* 2.0 l_0_11_276) l_0_11_290))))
 (= (+ (+ (- (- ?x34281 ?x34282) ?x34284) ?x34286) ?x34288) 0.0))))))))))))))))))))))))
(assert
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x34357 (* ?x31437 l_0_11_81)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x34355 (* ?x31434 l_0_11_80)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x34353 (* ?x31431 l_0_11_79)))
 (let ((?x31056 (* 2.0 l_0_11_66)))
 (let ((?x34288 (* ?x31056 l_0_11_80)))
 (let ((?x31053 (* 2.0 l_0_11_65)))
 (let ((?x34286 (* ?x31053 l_0_11_79)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x34349 (* ?x31426 l_0_11_60)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x34347 (* ?x31423 l_0_11_59)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x34345 (* ?x31420 l_0_11_58)))
 (let ((?x31050 (* 2.0 l_0_11_45)))
 (let ((?x34284 (* ?x31050 l_0_11_59)))
 (let ((?x31047 (* 2.0 l_0_11_44)))
 (let ((?x34282 (* ?x31047 l_0_11_58)))
 (let ((?x31406 (* 12.0 l_0_11_27)))
 (let ((?x33899 (* ?x31406 l_0_11_39)))
 (let ((?x31403 (* 12.0 l_0_11_26)))
 (let ((?x33897 (* ?x31403 l_0_11_38)))
 (let ((?x31391 (* 12.0 l_0_11_25)))
 (let ((?x33895 (* ?x31391 l_0_11_37)))
 (let ((?x32126 (* 12.0 l_0_11_18)))
 (let ((?x33893 (* ?x32126 l_0_11_6)))
 (let ((?x32123 (* 12.0 l_0_11_17)))
 (let ((?x33891 (* ?x32123 l_0_11_5)))
 (let ((?x32120 (* 12.0 l_0_11_16)))
 (let ((?x33889 (* ?x32120 l_0_11_4)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33599 (* ?x31703 l_0_11_131)))
 (let ((?x23513 (+ (+ (+ (- (* (* (- 2.0) l_0_11_128) l_0_11_130) ?x33599) ?x33889) ?x33891) ?x33893)))
 (let ((?x34313 (- (- ?x23513 (* (* 2.0 l_0_11_193) l_0_11_205)) (* (* 2.0 l_0_11_194) l_0_11_206))))
 (let ((?x34317 (- (- ?x34313 (* (* 2.0 l_0_11_195) l_0_11_207)) (* (* 2.0 l_0_11_214) l_0_11_226))))
 (let ((?x34321 (- (- ?x34317 (* (* 2.0 l_0_11_215) l_0_11_227)) (* (* 2.0 l_0_11_216) l_0_11_228))))
 (let ((?x34325 (- (- ?x34321 (* (* 2.0 l_0_11_235) l_0_11_247)) (* (* 2.0 l_0_11_236) l_0_11_248))))
 (let ((?x34330 (- (- (- ?x34325 (* (* 2.0 l_0_11_237) l_0_11_249)) ?x33895) (* (* 2.0 l_0_11_256) l_0_11_268))))
 (let ((?x34334 (- (- ?x34330 (* (* 2.0 l_0_11_257) l_0_11_269)) (* (* 2.0 l_0_11_258) l_0_11_270))))
 (let ((?x34340 (- (- (- (- ?x34334 ?x33897) ?x33899) (* (* 2.0 l_0_11_277) l_0_11_289)) (* (* 2.0 l_0_11_278) l_0_11_290))))
 (let ((?x34346 (- (+ (+ (- ?x34340 (* (* 2.0 l_0_11_279) l_0_11_291)) ?x34282) ?x34284) ?x34345)))
 (let ((?x34358 (+ (+ (+ (- (- (- (- ?x34346 ?x34347) ?x34349) ?x34286) ?x34288) ?x34353) ?x34355) ?x34357)))
 (= ?x34358 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34543 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x34540 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x34537 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x34534 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x34531 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x34528 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x34525 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x34522 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x34519 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x34516 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x34078 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x34075 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x34072 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x34069 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x34066 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x34433 (* ?x30737 l_0_11_185)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x34431 (* ?x30734 l_0_11_184)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x34429 (* ?x30731 l_0_11_164)))
 (let ((?x34061 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x34426 (* ?x30725 l_0_11_163)))
 (let ((?x34050 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x31353 (* 12.0 l_0_11_13)))
 (let ((?x34038 (* ?x31353 l_0_11_18)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33669 (* ?x31703 l_0_11_138)))
 (let ((?x31692 (* 2.0 l_0_11_128)))
 (let ((?x33667 (* ?x31692 l_0_11_137)))
 (let ((?x31000 (* 12.0 l_0_11_12)))
 (let ((?x34035 (* ?x31000 l_0_11_17)))
 (let ((?x30997 (* 12.0 l_0_11_11)))
 (let ((?x34033 (* ?x30997 l_0_11_16)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x34418 (* ?x30710 l_0_11_122)))
 (let ((?x30707 (* 2.0 l_0_11_107)))
 (let ((?x34416 (* ?x30707 l_0_11_121)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x34414 (* ?x33299 l_0_11_87)))
 (let ((?x34420 (+ (+ (+ (- (* (* (- 2.0) l_0_11_100) l_0_11_86) ?x34414) ?x34416) ?x34418) ?x34033)))
 (let ((?x34428 (+ (+ (+ (+ (- (- (+ ?x34420 ?x34035) ?x33667) ?x33669) ?x34038) ?x34050) ?x34426) ?x34061)))
 (let ((?x34437 (- (- (- (+ ?x34428 ?x34429) ?x34431) ?x34433) (* (* 2.0 l_0_11_200) l_0_11_205))))
 (let ((?x34443 (- (- ?x34437 (* (* 2.0 l_0_11_201) l_0_11_206)) (* (* 2.0 l_0_11_202) l_0_11_207))))
 (let ((?x34449 (- (- ?x34443 (* (* 2.0 l_0_11_203) l_0_11_208)) (* (* 2.0 l_0_11_204) l_0_11_209))))
 (let ((?x34455 (- (- ?x34449 (* (* 2.0 l_0_11_221) l_0_11_226)) (* (* 2.0 l_0_11_222) l_0_11_227))))
 (let ((?x34461 (- (- ?x34455 (* (* 2.0 l_0_11_223) l_0_11_228)) (* (* 2.0 l_0_11_224) l_0_11_229))))
 (let ((?x34467 (- (- ?x34461 (* (* 2.0 l_0_11_225) l_0_11_230)) (* (* 2.0 l_0_11_242) l_0_11_247))))
 (let ((?x34473 (- (- ?x34467 (* (* 2.0 l_0_11_243) l_0_11_248)) (* (* 2.0 l_0_11_244) l_0_11_249))))
 (let ((?x34479 (- (- ?x34473 (* (* 2.0 l_0_11_245) l_0_11_250)) (* (* 2.0 l_0_11_246) l_0_11_251))))
 (let ((?x34485 (- (- ?x34479 (* (* 2.0 l_0_11_263) l_0_11_268)) (* (* 2.0 l_0_11_264) l_0_11_269))))
 (let ((?x34491 (- (- ?x34485 (* (* 2.0 l_0_11_265) l_0_11_270)) (* (* 2.0 l_0_11_266) l_0_11_271))))
 (let ((?x34497 (- (- ?x34491 (* (* 2.0 l_0_11_267) l_0_11_272)) (* (* 2.0 l_0_11_284) l_0_11_289))))
 (let ((?x34503 (- (- ?x34497 (* (* 2.0 l_0_11_285) l_0_11_290)) (* (* 2.0 l_0_11_286) l_0_11_291))))
 (let ((?x34509 (- (- ?x34503 (* (* 2.0 l_0_11_287) l_0_11_292)) (* (* 2.0 l_0_11_288) l_0_11_293))))
 (let ((?x34520 (- (- (- (- (- (- (- ?x34509 ?x34066) ?x34069) ?x34072) ?x34075) ?x34078) ?x34516) ?x34519)))
 (let ((?x34541 (+ (+ (+ (+ (- (- (- ?x34520 ?x34522) ?x34525) ?x34528) ?x34531) ?x34534) ?x34537) ?x34540)))
 (= (+ ?x34541 ?x34543) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34196 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x34193 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x34190 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x34187 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x34184 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x34181 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x34716 (* l_0_11_294 l_0_11_294)))
 (let ((?x34714 (* l_0_11_293 l_0_11_293)))
 (let ((?x34712 (* l_0_11_292 l_0_11_292)))
 (let ((?x34710 (* l_0_11_291 l_0_11_291)))
 (let ((?x34708 (* l_0_11_290 l_0_11_290)))
 (let ((?x34706 (* l_0_11_289 l_0_11_289)))
 (let ((?x34704 (* l_0_11_273 l_0_11_273)))
 (let ((?x34702 (* l_0_11_272 l_0_11_272)))
 (let ((?x34700 (* l_0_11_271 l_0_11_271)))
 (let ((?x34698 (* l_0_11_270 l_0_11_270)))
 (let ((?x34696 (* l_0_11_269 l_0_11_269)))
 (let ((?x34694 (* l_0_11_268 l_0_11_268)))
 (let ((?x34692 (* l_0_11_252 l_0_11_252)))
 (let ((?x34690 (* l_0_11_251 l_0_11_251)))
 (let ((?x34688 (* l_0_11_250 l_0_11_250)))
 (let ((?x34686 (* l_0_11_249 l_0_11_249)))
 (let ((?x34684 (* l_0_11_248 l_0_11_248)))
 (let ((?x34682 (* l_0_11_247 l_0_11_247)))
 (let ((?x34680 (* l_0_11_231 l_0_11_231)))
 (let ((?x34678 (* l_0_11_230 l_0_11_230)))
 (let ((?x34676 (* l_0_11_229 l_0_11_229)))
 (let ((?x34674 (* l_0_11_228 l_0_11_228)))
 (let ((?x34672 (* l_0_11_227 l_0_11_227)))
 (let ((?x34670 (* l_0_11_226 l_0_11_226)))
 (let ((?x34668 (* l_0_11_210 l_0_11_210)))
 (let ((?x33448 (* l_0_11_21 l_0_11_21)))
 (let ((?x34178 (* 6.0 ?x33448)))
 (let ((?x34665 (* l_0_11_209 l_0_11_209)))
 (let ((?x34663 (* l_0_11_208 l_0_11_208)))
 (let ((?x34661 (* l_0_11_207 l_0_11_207)))
 (let ((?x34659 (* l_0_11_206 l_0_11_206)))
 (let ((?x34657 (* l_0_11_205 l_0_11_205)))
 (let ((?x33446 (* l_0_11_20 l_0_11_20)))
 (let ((?x34176 (* 6.0 ?x33446)))
 (let ((?x33444 (* l_0_11_19 l_0_11_19)))
 (let ((?x34174 (* 6.0 ?x33444)))
 (let ((?x33442 (* l_0_11_18 l_0_11_18)))
 (let ((?x34172 (* 6.0 ?x33442)))
 (let ((?x33440 (* l_0_11_17 l_0_11_17)))
 (let ((?x34170 (* 6.0 ?x33440)))
 (let ((?x33422 (* l_0_11_16 l_0_11_16)))
 (let ((?x34168 (* 6.0 ?x33422)))
 (let ((?x31703 (* 2.0 l_0_11_129)))
 (let ((?x33717 (* ?x31703 l_0_11_143)))
 (let ((?x8015 (+ (+ (+ (- (* (* (- 2.0) l_0_11_128) l_0_11_142) ?x33717) ?x34168) ?x34170) ?x34172)))
 (let ((?x34666 (- (- (- (- (- (+ (+ ?x8015 ?x34174) ?x34176) ?x34657) ?x34659) ?x34661) ?x34663) ?x34665)))
 (let ((?x34679 (- (- (- (- (- (- (+ ?x34666 ?x34178) ?x34668) ?x34670) ?x34672) ?x34674) ?x34676) ?x34678)))
 (let ((?x34693 (- (- (- (- (- (- (- ?x34679 ?x34680) ?x34682) ?x34684) ?x34686) ?x34688) ?x34690) ?x34692)))
 (let ((?x34707 (- (- (- (- (- (- (- ?x34693 ?x34694) ?x34696) ?x34698) ?x34700) ?x34702) ?x34704) ?x34706)))
 (let ((?x34719 (- (- (- (- (- (- (- ?x34707 ?x34708) ?x34710) ?x34712) ?x34714) ?x34716) ?x34181) ?x34184)))
 (let ((?x34726 (- (- (- (- (- ?x34719 ?x34187) ?x34190) ?x34193) ?x34196) (* (* 1.0 l_0_11_58) l_0_11_58))))
 (let ((?x34732 (- (- ?x34726 (* (* 1.0 l_0_11_59) l_0_11_59)) (* (* 1.0 l_0_11_60) l_0_11_60))))
 (let ((?x34738 (- (- ?x34732 (* (* 1.0 l_0_11_61) l_0_11_61)) (* (* 1.0 l_0_11_62) l_0_11_62))))
 (let ((?x34743 (+ (- ?x34738 (* (* 1.0 l_0_11_63) l_0_11_63)) (* 1.0 (* l_0_11_79 l_0_11_79)))))
 (let ((?x34747 (+ (+ ?x34743 (* 1.0 (* l_0_11_80 l_0_11_80))) (* 1.0 (* l_0_11_81 l_0_11_81)))))
 (let ((?x34751 (+ (+ ?x34747 (* 1.0 (* l_0_11_82 l_0_11_82))) (* 1.0 (* l_0_11_83 l_0_11_83)))))
 (= (+ ?x34751 (* 1.0 (* l_0_11_84 l_0_11_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33696 (* ?x32031 l_0_11_86)))
 (let ((?x31524 (* l_0_11_64 l_0_11_64)))
 (let ((?x31525 (* 3.0 ?x31524)))
 (let ((?x31519 (* (* 3.0 l_0_11_43) l_0_11_43)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33673 (* ?x31990 l_0_11_170)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33671 (* ?x31987 l_0_11_149)))
 (let ((?x34812 (+ (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_107) ?x33671) ?x33673) ?x31519) ?x31525)))
 (= (+ ?x34812 ?x33696) 0.0))))))))))))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x31442 (* ?x30838 l_0_11_89)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x31440 (* ?x30835 l_0_11_88)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33485 (* ?x31521 l_0_11_67)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33478 (* ?x31515 l_0_11_46)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x31362 (* ?x30737 l_0_11_173)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x31360 (* ?x30734 l_0_11_172)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x31358 (* ?x30731 l_0_11_152)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x31356 (* ?x30725 l_0_11_151)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x31347 (* ?x30710 l_0_11_110)))
 (let ((?x34820 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_109) ?x31347) ?x31356) ?x31358) ?x31360)))
 (= (+ (+ (+ (- (+ ?x34820 ?x31362) ?x33478) ?x33485) ?x31440) ?x31442) 0.0)))))))))))))))))))))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x32713 (* ?x30838 l_0_11_92)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x32711 (* ?x30835 l_0_11_91)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x31664 (* ?x31521 l_0_11_70)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x31656 (* ?x31515 l_0_11_49)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x32617 (* ?x30737 l_0_11_176)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x32615 (* ?x30734 l_0_11_175)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x32613 (* ?x30731 l_0_11_155)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x32611 (* ?x30725 l_0_11_154)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x32600 (* ?x30710 l_0_11_113)))
 (let ((?x24507 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_112) ?x32600) ?x32611) ?x32613) ?x32615)))
 (= (+ (+ (+ (- (+ ?x24507 ?x32617) ?x31656) ?x31664) ?x32711) ?x32713) 0.0)))))))))))))))))))))
(assert
 (let ((?x30838 (* 2.0 l_0_11_87)))
 (let ((?x30839 (* ?x30838 l_0_11_96)))
 (let ((?x30835 (* 2.0 l_0_11_86)))
 (let ((?x30836 (* ?x30835 l_0_11_95)))
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33511 (* ?x31521 l_0_11_74)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33505 (* ?x31515 l_0_11_53)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x30738 (* ?x30737 l_0_11_180)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x30735 (* ?x30734 l_0_11_179)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x30732 (* ?x30731 l_0_11_159)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x30726 (* ?x30725 l_0_11_158)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x30711 (* ?x30710 l_0_11_117)))
 (let ((?x34843 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_116) ?x30711) ?x30726) ?x30732) ?x30735)))
 (= (+ (+ (+ (- (+ ?x34843 ?x30738) ?x33505) ?x33511) ?x30836) ?x30839) 0.0)))))))))))))))))))))
(assert
 (let ((?x31521 (* 6.0 l_0_11_64)))
 (let ((?x33566 (* ?x31521 l_0_11_79)))
 (let ((?x31515 (* 6.0 l_0_11_43)))
 (let ((?x33560 (* ?x31515 l_0_11_58)))
 (let ((?x30737 (* 2.0 l_0_11_171)))
 (let ((?x34433 (* ?x30737 l_0_11_185)))
 (let ((?x30734 (* 2.0 l_0_11_170)))
 (let ((?x34431 (* ?x30734 l_0_11_184)))
 (let ((?x30731 (* 2.0 l_0_11_150)))
 (let ((?x34429 (* ?x30731 l_0_11_164)))
 (let ((?x30725 (* 2.0 l_0_11_149)))
 (let ((?x34426 (* ?x30725 l_0_11_163)))
 (let ((?x30710 (* 2.0 l_0_11_108)))
 (let ((?x34418 (* ?x30710 l_0_11_122)))
 (let ((?x30707 (* 2.0 l_0_11_107)))
 (let ((?x34416 (* ?x30707 l_0_11_121)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x34414 (* ?x33299 l_0_11_87)))
 (let ((?x34858 (- (- (- (+ (* (* 2.0 l_0_11_100) l_0_11_86) ?x34414) ?x34416) ?x34418) ?x34426)))
 (= (+ (- (+ (+ (- ?x34858 ?x34429) ?x34431) ?x34433) ?x33560) ?x33566) 0.0)))))))))))))))))))))
(assert
 (let ((?x31203 (* l_0_11_69 l_0_11_69)))
 (let ((?x33795 (* 3.0 ?x31203)))
 (let ((?x31200 (* l_0_11_68 l_0_11_68)))
 (let ((?x33793 (* 3.0 ?x31200)))
 (let ((?x31197 (* l_0_11_67 l_0_11_67)))
 (let ((?x33791 (* 3.0 ?x31197)))
 (let ((?x33786 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x33783 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x8378 (+ (+ (- (- (* (* (- 3.0) l_0_11_46) l_0_11_46) ?x33783) ?x33786) ?x33791) ?x33793)))
 (= (+ ?x8378 ?x33795) 0.0)))))))))))
(assert
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x31809 (* ?x31808 l_0_11_72)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x31806 (* ?x31805 l_0_11_71)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x31803 (* ?x31802 l_0_11_70)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x31793 (* ?x31792 l_0_11_51)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x31790 (* ?x31789 l_0_11_50)))
 (let ((?x34873 (+ (+ (- (- (* (* (- 6.0) l_0_11_46) l_0_11_49) ?x31790) ?x31793) ?x31803) ?x31806)))
 (= (+ ?x34873 ?x31809) 0.0)))))))))))))
(assert
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x33844 (* ?x31808 l_0_11_76)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x33842 (* ?x31805 l_0_11_75)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x33840 (* ?x31802 l_0_11_74)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x33837 (* ?x31792 l_0_11_55)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x33835 (* ?x31789 l_0_11_54)))
 (let ((?x34881 (+ (+ (- (- (* (* (- 6.0) l_0_11_46) l_0_11_53) ?x33835) ?x33837) ?x33840) ?x33842)))
 (= (+ ?x34881 ?x33844) 0.0)))))))))))))
(assert
 (let ((?x31808 (* 6.0 l_0_11_69)))
 (let ((?x33913 (* ?x31808 l_0_11_81)))
 (let ((?x31805 (* 6.0 l_0_11_68)))
 (let ((?x33911 (* ?x31805 l_0_11_80)))
 (let ((?x31802 (* 6.0 l_0_11_67)))
 (let ((?x33909 (* ?x31802 l_0_11_79)))
 (let ((?x31792 (* 6.0 l_0_11_48)))
 (let ((?x33906 (* ?x31792 l_0_11_60)))
 (let ((?x31789 (* 6.0 l_0_11_47)))
 (let ((?x33904 (* ?x31789 l_0_11_59)))
 (let ((?x34889 (+ (+ (- (- (* (* (- 6.0) l_0_11_46) l_0_11_58) ?x33904) ?x33906) ?x33909) ?x33911)))
 (= (+ ?x34889 ?x33913) 0.0)))))))))))))
(assert
 (let ((?x31912 (* l_0_11_73 l_0_11_73)))
 (let ((?x31913 (* 3.0 ?x31912)))
 (let ((?x31909 (* l_0_11_72 l_0_11_72)))
 (let ((?x31910 (* 3.0 ?x31909)))
 (let ((?x31906 (* l_0_11_71 l_0_11_71)))
 (let ((?x31907 (* 3.0 ?x31906)))
 (let ((?x31903 (* l_0_11_70 l_0_11_70)))
 (let ((?x31904 (* 3.0 ?x31903)))
 (let ((?x31898 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x31895 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x31892 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x34902 (+ (- (- (- (* (* (- 3.0) l_0_11_49) l_0_11_49) ?x31892) ?x31895) ?x31898) ?x31904)))
 (= (+ (+ (+ ?x34902 ?x31907) ?x31910) ?x31913) 0.0))))))))))))))
(assert
 (let ((?x32028 (* 6.0 l_0_11_73)))
 (let ((?x32029 (* ?x32028 l_0_11_77)))
 (let ((?x32025 (* 6.0 l_0_11_72)))
 (let ((?x32026 (* ?x32025 l_0_11_76)))
 (let ((?x32022 (* 6.0 l_0_11_71)))
 (let ((?x32023 (* ?x32022 l_0_11_75)))
 (let ((?x32019 (* 6.0 l_0_11_70)))
 (let ((?x32020 (* ?x32019 l_0_11_74)))
 (let ((?x32016 (* 6.0 l_0_11_52)))
 (let ((?x32017 (* ?x32016 l_0_11_56)))
 (let ((?x32013 (* 6.0 l_0_11_51)))
 (let ((?x32014 (* ?x32013 l_0_11_55)))
 (let ((?x32010 (* 6.0 l_0_11_50)))
 (let ((?x32011 (* ?x32010 l_0_11_54)))
 (let ((?x34908 (+ (- (- (- (* (* (- 6.0) l_0_11_49) l_0_11_53) ?x32011) ?x32014) ?x32017) ?x32020)))
 (= (+ (+ (+ ?x34908 ?x32023) ?x32026) ?x32029) 0.0)))))))))))))))))
(assert
 (let ((?x32028 (* 6.0 l_0_11_73)))
 (let ((?x32153 (* ?x32028 l_0_11_82)))
 (let ((?x32025 (* 6.0 l_0_11_72)))
 (let ((?x32151 (* ?x32025 l_0_11_81)))
 (let ((?x32022 (* 6.0 l_0_11_71)))
 (let ((?x32149 (* ?x32022 l_0_11_80)))
 (let ((?x32019 (* 6.0 l_0_11_70)))
 (let ((?x32147 (* ?x32019 l_0_11_79)))
 (let ((?x32016 (* 6.0 l_0_11_52)))
 (let ((?x32145 (* ?x32016 l_0_11_61)))
 (let ((?x32013 (* 6.0 l_0_11_51)))
 (let ((?x32143 (* ?x32013 l_0_11_60)))
 (let ((?x32010 (* 6.0 l_0_11_50)))
 (let ((?x32141 (* ?x32010 l_0_11_59)))
 (let ((?x34921 (+ (- (- (- (* (* (- 6.0) l_0_11_49) l_0_11_58) ?x32141) ?x32143) ?x32145) ?x32147)))
 (= (+ (+ (+ ?x34921 ?x32149) ?x32151) ?x32153) 0.0)))))))))))))))))
(assert
 (let ((?x30832 (* l_0_11_78 l_0_11_78)))
 (let ((?x33994 (* 3.0 ?x30832)))
 (let ((?x30829 (* l_0_11_77 l_0_11_77)))
 (let ((?x33992 (* 3.0 ?x30829)))
 (let ((?x30826 (* l_0_11_76 l_0_11_76)))
 (let ((?x33990 (* 3.0 ?x30826)))
 (let ((?x30823 (* l_0_11_75 l_0_11_75)))
 (let ((?x33988 (* 3.0 ?x30823)))
 (let ((?x30820 (* l_0_11_74 l_0_11_74)))
 (let ((?x33986 (* 3.0 ?x30820)))
 (let ((?x33984 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x33981 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x33978 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x33975 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x34930 (- (- (- (- (* (* (- 3.0) l_0_11_53) l_0_11_53) ?x33975) ?x33978) ?x33981) ?x33984)))
 (= (+ (+ (+ (+ (+ ?x34930 ?x33986) ?x33988) ?x33990) ?x33992) ?x33994) 0.0)))))))))))))))))
(assert
 (let ((?x34108 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x34105 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x34102 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x34099 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x34096 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x34093 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x34090 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x34087 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x34084 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x34943 (- (- (- (- (* (* (- 6.0) l_0_11_53) l_0_11_58) ?x34084) ?x34087) ?x34090) ?x34093)))
 (= (+ (+ (+ (+ (+ ?x34943 ?x34096) ?x34099) ?x34102) ?x34105) ?x34108) 0.0))))))))))))
(assert
 (let ((?x34231 (* l_0_11_84 l_0_11_84)))
 (let ((?x34232 (* 3.0 ?x34231)))
 (let ((?x34228 (* l_0_11_83 l_0_11_83)))
 (let ((?x34229 (* 3.0 ?x34228)))
 (let ((?x34225 (* l_0_11_82 l_0_11_82)))
 (let ((?x34226 (* 3.0 ?x34225)))
 (let ((?x34222 (* l_0_11_81 l_0_11_81)))
 (let ((?x34223 (* 3.0 ?x34222)))
 (let ((?x34219 (* l_0_11_80 l_0_11_80)))
 (let ((?x34220 (* 3.0 ?x34219)))
 (let ((?x34216 (* l_0_11_79 l_0_11_79)))
 (let ((?x34217 (* 3.0 ?x34216)))
 (let ((?x34214 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x34211 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x34208 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x34205 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x34202 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x34957 (- (- (- (- (* (* (- 3.0) l_0_11_58) l_0_11_58) ?x34202) ?x34205) ?x34208) ?x34211)))
 (let ((?x34964 (+ (+ (+ (+ (+ (+ (- ?x34957 ?x34214) ?x34217) ?x34220) ?x34223) ?x34226) ?x34229) ?x34232)))
 (= ?x34964 0.0)))))))))))))))))))))
(assert
 (let ((?x31203 (* l_0_11_69 l_0_11_69)))
 (let ((?x31200 (* l_0_11_68 l_0_11_68)))
 (let ((?x31197 (* l_0_11_67 l_0_11_67)))
 (let ((?x31246 (* l_0_11_48 l_0_11_48)))
 (let ((?x34979 (- (+ (+ (* l_0_11_46 l_0_11_46) (* l_0_11_47 l_0_11_47)) ?x31246) ?x31197)))
 (= (- (- ?x34979 ?x31200) ?x31203) 0.0)))))))
(assert
 (let ((?x35017 (* l_0_11_90 l_0_11_90)))
 (let ((?x35015 (* l_0_11_89 l_0_11_89)))
 (let ((?x35013 (* l_0_11_88 l_0_11_88)))
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x31438 (* ?x31437 l_0_11_76)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x31435 (* ?x31434 l_0_11_75)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x31432 (* ?x31431 l_0_11_74)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x31427 (* ?x31426 l_0_11_55)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x31424 (* ?x31423 l_0_11_54)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x31421 (* ?x31420 l_0_11_53)))
 (let ((?x35005 (* l_0_11_174 l_0_11_174)))
 (let ((?x35003 (* l_0_11_173 l_0_11_173)))
 (let ((?x35001 (* l_0_11_172 l_0_11_172)))
 (let ((?x34999 (* l_0_11_153 l_0_11_153)))
 (let ((?x34997 (* l_0_11_152 l_0_11_152)))
 (let ((?x34995 (* l_0_11_151 l_0_11_151)))
 (let ((?x34993 (* l_0_11_111 l_0_11_111)))
 (let ((?x34994 (+ (+ (* l_0_11_109 l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x34993)))
 (let ((?x35007 (+ (- (- (- (+ (+ (+ ?x34994 ?x34995) ?x34997) ?x34999) ?x35001) ?x35003) ?x35005) ?x31421)))
 (let ((?x35016 (- (- (- (- (- (+ (+ ?x35007 ?x31424) ?x31427) ?x31432) ?x31435) ?x31438) ?x35013) ?x35015)))
 (= (- ?x35016 ?x35017) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x31437 (* 2.0 l_0_11_69)))
 (let ((?x34357 (* ?x31437 l_0_11_81)))
 (let ((?x31434 (* 2.0 l_0_11_68)))
 (let ((?x34355 (* ?x31434 l_0_11_80)))
 (let ((?x31431 (* 2.0 l_0_11_67)))
 (let ((?x34353 (* ?x31431 l_0_11_79)))
 (let ((?x31426 (* 2.0 l_0_11_48)))
 (let ((?x34349 (* ?x31426 l_0_11_60)))
 (let ((?x31423 (* 2.0 l_0_11_47)))
 (let ((?x34347 (* ?x31423 l_0_11_59)))
 (let ((?x31420 (* 2.0 l_0_11_46)))
 (let ((?x34345 (* ?x31420 l_0_11_58)))
 (let ((?x33772 (* l_0_11_132 l_0_11_132)))
 (let ((?x35028 (- (- (* (- l_0_11_130) l_0_11_130) (* l_0_11_131 l_0_11_131)) ?x33772)))
 (= (- (- (- (+ (+ (+ ?x35028 ?x34345) ?x34347) ?x34349) ?x34353) ?x34355) ?x34357) 0.0))))))))))))))))
(assert
 (let ((?x33011 (* 2.0 l_0_11_90)))
 (let ((?x35063 (* ?x33011 l_0_11_97)))
 (let ((?x33008 (* 2.0 l_0_11_89)))
 (let ((?x35061 (* ?x33008 l_0_11_96)))
 (let ((?x33005 (* 2.0 l_0_11_88)))
 (let ((?x35059 (* ?x33005 l_0_11_95)))
 (let ((?x30832 (* l_0_11_78 l_0_11_78)))
 (let ((?x30829 (* l_0_11_77 l_0_11_77)))
 (let ((?x30826 (* l_0_11_76 l_0_11_76)))
 (let ((?x30823 (* l_0_11_75 l_0_11_75)))
 (let ((?x30820 (* l_0_11_74 l_0_11_74)))
 (let ((?x30907 (* l_0_11_57 l_0_11_57)))
 (let ((?x20250 (* l_0_11_56 l_0_11_56)))
 (let ((?x20231 (* l_0_11_55 l_0_11_55)))
 (let ((?x20229 (* l_0_11_54 l_0_11_54)))
 (let ((?x19744 (* l_0_11_53 l_0_11_53)))
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x35047 (* ?x32988 l_0_11_181)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x35045 (* ?x32985 l_0_11_180)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x35043 (* ?x32982 l_0_11_179)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x35041 (* ?x32979 l_0_11_160)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x35039 (* ?x32976 l_0_11_159)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x8690 (* ?x32973 l_0_11_158)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x8692 (* ?x32965 l_0_11_118)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x24031 (* ?x32962 l_0_11_117)))
 (let ((?x35040 (+ (+ (+ (+ (* (* 2.0 l_0_11_109) l_0_11_116) ?x24031) ?x8692) ?x8690) ?x35039)))
 (let ((?x35051 (+ (+ (+ (- (- (- (+ ?x35040 ?x35041) ?x35043) ?x35045) ?x35047) ?x19744) ?x20229) ?x20231)))
 (let ((?x35058 (- (- (- (- (- (+ (+ ?x35051 ?x20250) ?x30907) ?x30820) ?x30823) ?x30826) ?x30829) ?x30832)))
 (= (- (- (- ?x35058 ?x35059) ?x35061) ?x35063) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34543 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x34540 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x34537 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x34534 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x34531 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x34528 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x34525 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x34522 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x34519 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x34516 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x35128 (* ?x32988 l_0_11_186)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x35126 (* ?x32985 l_0_11_185)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x35124 (* ?x32982 l_0_11_184)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x35122 (* ?x32979 l_0_11_165)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x35120 (* ?x32976 l_0_11_164)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x35118 (* ?x32973 l_0_11_163)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x33823 (* ?x31771 l_0_11_139)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x33821 (* ?x31768 l_0_11_138)))
 (let ((?x21301 (* 2.0 l_0_11_130)))
 (let ((?x33819 (* ?x21301 l_0_11_137)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x35113 (* ?x32965 l_0_11_123)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x35111 (* ?x32962 l_0_11_122)))
 (let ((?x5226 (* 2.0 l_0_11_109)))
 (let ((?x35109 (* ?x5226 l_0_11_121)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x35107 (* ?x33302 l_0_11_90)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x35105 (* ?x33299 l_0_11_89)))
 (let ((?x35112 (+ (+ (- (- (* (* (- 2.0) l_0_11_100) l_0_11_88) ?x35105) ?x35107) ?x35109) ?x35111)))
 (let ((?x35123 (+ (+ (+ (- (- (- (+ ?x35112 ?x35113) ?x33819) ?x33821) ?x33823) ?x35118) ?x35120) ?x35122)))
 (let ((?x35133 (+ (+ (+ (+ (- (- (- ?x35123 ?x35124) ?x35126) ?x35128) ?x34516) ?x34519) ?x34522) ?x34525)))
 (= (- (- (- (- (- (+ ?x35133 ?x34528) ?x34531) ?x34534) ?x34537) ?x34540) ?x34543) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34231 (* l_0_11_84 l_0_11_84)))
 (let ((?x34228 (* l_0_11_83 l_0_11_83)))
 (let ((?x34225 (* l_0_11_82 l_0_11_82)))
 (let ((?x34222 (* l_0_11_81 l_0_11_81)))
 (let ((?x34219 (* l_0_11_80 l_0_11_80)))
 (let ((?x34216 (* l_0_11_79 l_0_11_79)))
 (let ((?x7386 (* l_0_11_63 l_0_11_63)))
 (let ((?x7376 (* l_0_11_62 l_0_11_62)))
 (let ((?x22470 (* l_0_11_61 l_0_11_61)))
 (let ((?x22468 (* l_0_11_60 l_0_11_60)))
 (let ((?x7366 (* l_0_11_59 l_0_11_59)))
 (let ((?x34241 (* l_0_11_58 l_0_11_58)))
 (let ((?x31771 (* 2.0 l_0_11_132)))
 (let ((?x33887 (* ?x31771 l_0_11_144)))
 (let ((?x31768 (* 2.0 l_0_11_131)))
 (let ((?x33885 (* ?x31768 l_0_11_143)))
 (let ((?x24933 (+ (+ (- (- (* (* (- 2.0) l_0_11_130) l_0_11_142) ?x33885) ?x33887) ?x34241) ?x7366)))
 (let ((?x24958 (- (- (- (+ (+ (+ (+ ?x24933 ?x22468) ?x22470) ?x7376) ?x7386) ?x34216) ?x34219) ?x34222)))
 (= (- (- (- ?x24958 ?x34225) ?x34228) ?x34231) 0.0))))))))))))))))))))
(assert
 (let ((?x35226 (* l_0_11_99 l_0_11_99)))
 (let ((?x35224 (* l_0_11_98 l_0_11_98)))
 (let ((?x35222 (* l_0_11_97 l_0_11_97)))
 (let ((?x35220 (* l_0_11_96 l_0_11_96)))
 (let ((?x35218 (* l_0_11_95 l_0_11_95)))
 (let ((?x35216 (* l_0_11_183 l_0_11_183)))
 (let ((?x35214 (* l_0_11_182 l_0_11_182)))
 (let ((?x35212 (* l_0_11_181 l_0_11_181)))
 (let ((?x35210 (* l_0_11_180 l_0_11_180)))
 (let ((?x35208 (* l_0_11_179 l_0_11_179)))
 (let ((?x35206 (* l_0_11_162 l_0_11_162)))
 (let ((?x35204 (* l_0_11_161 l_0_11_161)))
 (let ((?x35202 (* l_0_11_160 l_0_11_160)))
 (let ((?x35200 (* l_0_11_159 l_0_11_159)))
 (let ((?x35198 (* l_0_11_158 l_0_11_158)))
 (let ((?x35196 (* l_0_11_120 l_0_11_120)))
 (let ((?x35194 (* l_0_11_119 l_0_11_119)))
 (let ((?x35192 (* l_0_11_118 l_0_11_118)))
 (let ((?x35193 (+ (+ (* l_0_11_116 l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35192)))
 (let ((?x35207 (+ (+ (+ (+ (+ (+ (+ ?x35193 ?x35194) ?x35196) ?x35198) ?x35200) ?x35202) ?x35204) ?x35206)))
 (let ((?x35221 (- (- (- (- (- (- (- ?x35207 ?x35208) ?x35210) ?x35212) ?x35214) ?x35216) ?x35218) ?x35220)))
 (= (- (- (- ?x35221 ?x35222) ?x35224) ?x35226) 0.0)))))))))))))))))))))))
(assert
 (let ((?x35299 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x35296 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x35293 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x35290 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x35287 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x35284 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x35281 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x35278 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x35275 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x35272 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x33959 (* l_0_11_141 l_0_11_141)))
 (let ((?x33957 (* l_0_11_140 l_0_11_140)))
 (let ((?x33954 (* l_0_11_139 l_0_11_139)))
 (let ((?x33952 (* l_0_11_138 l_0_11_138)))
 (let ((?x33950 (* l_0_11_137 l_0_11_137)))
 (let ((?x35264 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x35261 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x35258 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x35255 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x35252 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x35249 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x33305 (* 2.0 l_0_11_103)))
 (let ((?x35246 (* ?x33305 l_0_11_98)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x35244 (* ?x33302 l_0_11_97)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x35242 (* ?x33299 l_0_11_96)))
 (let ((?x35250 (- (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_95) ?x35242) ?x35244) ?x35246) ?x35249)))
 (let ((?x35267 (- (- (+ (+ (+ (+ (+ ?x35250 ?x35252) ?x35255) ?x35258) ?x35261) ?x35264) ?x33950) ?x33952)))
 (let ((?x35282 (+ (+ (+ (+ (- (- (- ?x35267 ?x33954) ?x33957) ?x33959) ?x35272) ?x35275) ?x35278) ?x35281)))
 (= (- (- (- (- (- (+ ?x35282 ?x35284) ?x35287) ?x35290) ?x35293) ?x35296) ?x35299) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x35402 (* l_0_11_189 l_0_11_189)))
 (let ((?x35400 (* l_0_11_188 l_0_11_188)))
 (let ((?x35398 (* l_0_11_187 l_0_11_187)))
 (let ((?x35396 (* l_0_11_186 l_0_11_186)))
 (let ((?x35394 (* l_0_11_185 l_0_11_185)))
 (let ((?x35392 (* l_0_11_184 l_0_11_184)))
 (let ((?x35390 (* l_0_11_168 l_0_11_168)))
 (let ((?x35388 (* l_0_11_167 l_0_11_167)))
 (let ((?x35386 (* l_0_11_166 l_0_11_166)))
 (let ((?x35384 (* l_0_11_165 l_0_11_165)))
 (let ((?x35382 (* l_0_11_164 l_0_11_164)))
 (let ((?x35380 (* l_0_11_163 l_0_11_163)))
 (let ((?x34056 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x34053 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x34047 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x34044 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x34041 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x35373 (* l_0_11_126 l_0_11_126)))
 (let ((?x35371 (* l_0_11_125 l_0_11_125)))
 (let ((?x35369 (* l_0_11_124 l_0_11_124)))
 (let ((?x35367 (* l_0_11_123 l_0_11_123)))
 (let ((?x35365 (* l_0_11_122 l_0_11_122)))
 (let ((?x35363 (* l_0_11_121 l_0_11_121)))
 (let ((?x35361 (* l_0_11_105 l_0_11_105)))
 (let ((?x35359 (* l_0_11_104 l_0_11_104)))
 (let ((?x35357 (* l_0_11_103 l_0_11_103)))
 (let ((?x35355 (* l_0_11_102 l_0_11_102)))
 (let ((?x35356 (- (- (* (- l_0_11_100) l_0_11_100) (* l_0_11_101 l_0_11_101)) ?x35355)))
 (let ((?x35370 (+ (+ (+ (+ (- (- (- ?x35356 ?x35357) ?x35359) ?x35361) ?x35363) ?x35365) ?x35367) ?x35369)))
 (let ((?x35379 (- (- (- (- (- (+ (+ ?x35370 ?x35371) ?x35373) ?x34041) ?x34044) ?x34047) ?x34053) ?x34056)))
 (let ((?x35393 (- (+ (+ (+ (+ (+ (+ ?x35379 ?x35380) ?x35382) ?x35384) ?x35386) ?x35388) ?x35390) ?x35392)))
 (= (- (- (- (- (- ?x35393 ?x35394) ?x35396) ?x35398) ?x35400) ?x35402) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x33517 (* l_0_11_85 l_0_11_85)))
 (let ((?x33501 (* l_0_11_169 l_0_11_169)))
 (let ((?x35437 (+ (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_148 l_0_11_148)) ?x33501)))
 (= (+ ?x35437 ?x33517) 0.0)))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33846 (* ?x32031 l_0_11_88)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33827 (* ?x31990 l_0_11_172)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33825 (* ?x31987 l_0_11_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_109) ?x33825) ?x33827) ?x33846) 0.0))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x32032 (* ?x32031 l_0_11_91)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x31991 (* ?x31990 l_0_11_175)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x31988 (* ?x31987 l_0_11_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x31988) ?x31991) ?x32032) 0.0))))))))
(assert
 (let ((?x32031 (* 2.0 l_0_11_85)))
 (let ((?x33996 (* ?x32031 l_0_11_95)))
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x33964 (* ?x31990 l_0_11_179)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x33961 (* ?x31987 l_0_11_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_116) ?x33961) ?x33964) ?x33996) 0.0))))))))
(assert
 (let ((?x31990 (* 2.0 l_0_11_169)))
 (let ((?x34063 (* ?x31990 l_0_11_184)))
 (let ((?x31987 (* 2.0 l_0_11_148)))
 (let ((?x34058 (* ?x31987 l_0_11_163)))
 (let ((?x31966 (* 2.0 l_0_11_106)))
 (let ((?x34031 (* ?x31966 l_0_11_121)))
 (= (+ (- (- (* (* 2.0 l_0_11_100) l_0_11_85) ?x34031) ?x34058) ?x34063) 0.0))))))))
(assert
 (let ((?x35017 (* l_0_11_90 l_0_11_90)))
 (let ((?x35015 (* l_0_11_89 l_0_11_89)))
 (let ((?x35013 (* l_0_11_88 l_0_11_88)))
 (let ((?x35005 (* l_0_11_174 l_0_11_174)))
 (let ((?x35003 (* l_0_11_173 l_0_11_173)))
 (let ((?x35001 (* l_0_11_172 l_0_11_172)))
 (let ((?x34999 (* l_0_11_153 l_0_11_153)))
 (let ((?x34997 (* l_0_11_152 l_0_11_152)))
 (let ((?x34995 (* l_0_11_151 l_0_11_151)))
 (let ((?x34993 (* l_0_11_111 l_0_11_111)))
 (let ((?x35466 (- (- (* (- l_0_11_109) l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x34993)))
 (let ((?x35473 (+ (+ (+ (+ (- (- (- ?x35466 ?x34995) ?x34997) ?x34999) ?x35001) ?x35003) ?x35005) ?x35013)))
 (= (+ (+ ?x35473 ?x35015) ?x35017) 0.0))))))))))))))
(assert
 (let ((?x33011 (* 2.0 l_0_11_90)))
 (let ((?x33012 (* ?x33011 l_0_11_93)))
 (let ((?x33008 (* 2.0 l_0_11_89)))
 (let ((?x33009 (* ?x33008 l_0_11_92)))
 (let ((?x33005 (* 2.0 l_0_11_88)))
 (let ((?x33006 (* ?x33005 l_0_11_91)))
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x32989 (* ?x32988 l_0_11_177)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x32986 (* ?x32985 l_0_11_176)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x32983 (* ?x32982 l_0_11_175)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x32980 (* ?x32979 l_0_11_156)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x32977 (* ?x32976 l_0_11_155)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x32974 (* ?x32973 l_0_11_154)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x32966 (* ?x32965 l_0_11_114)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x32963 (* ?x32962 l_0_11_113)))
 (let ((?x9763 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_112) ?x32963) ?x32966) ?x32974) ?x32977)))
 (let ((?x35488 (+ (+ (+ (+ (+ (+ (- ?x9763 ?x32980) ?x32983) ?x32986) ?x32989) ?x33006) ?x33009) ?x33012)))
 (= ?x35488 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33011 (* 2.0 l_0_11_90)))
 (let ((?x35063 (* ?x33011 l_0_11_97)))
 (let ((?x33008 (* 2.0 l_0_11_89)))
 (let ((?x35061 (* ?x33008 l_0_11_96)))
 (let ((?x33005 (* 2.0 l_0_11_88)))
 (let ((?x35059 (* ?x33005 l_0_11_95)))
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x35047 (* ?x32988 l_0_11_181)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x35045 (* ?x32985 l_0_11_180)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x35043 (* ?x32982 l_0_11_179)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x35041 (* ?x32979 l_0_11_160)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x35039 (* ?x32976 l_0_11_159)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x8690 (* ?x32973 l_0_11_158)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x8692 (* ?x32965 l_0_11_118)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x24031 (* ?x32962 l_0_11_117)))
 (let ((?x9759 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_116) ?x24031) ?x8692) ?x8690) ?x35039)))
 (let ((?x9427 (+ (+ (+ (+ (+ (+ (- ?x9759 ?x35041) ?x35043) ?x35045) ?x35047) ?x35059) ?x35061) ?x35063)))
 (= ?x9427 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32988 (* 2.0 l_0_11_174)))
 (let ((?x35128 (* ?x32988 l_0_11_186)))
 (let ((?x32985 (* 2.0 l_0_11_173)))
 (let ((?x35126 (* ?x32985 l_0_11_185)))
 (let ((?x32982 (* 2.0 l_0_11_172)))
 (let ((?x35124 (* ?x32982 l_0_11_184)))
 (let ((?x32979 (* 2.0 l_0_11_153)))
 (let ((?x35122 (* ?x32979 l_0_11_165)))
 (let ((?x32976 (* 2.0 l_0_11_152)))
 (let ((?x35120 (* ?x32976 l_0_11_164)))
 (let ((?x32973 (* 2.0 l_0_11_151)))
 (let ((?x35118 (* ?x32973 l_0_11_163)))
 (let ((?x32965 (* 2.0 l_0_11_111)))
 (let ((?x35113 (* ?x32965 l_0_11_123)))
 (let ((?x32962 (* 2.0 l_0_11_110)))
 (let ((?x35111 (* ?x32962 l_0_11_122)))
 (let ((?x5226 (* 2.0 l_0_11_109)))
 (let ((?x35109 (* ?x5226 l_0_11_121)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x35107 (* ?x33302 l_0_11_90)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x35105 (* ?x33299 l_0_11_89)))
 (let ((?x9956 (- (- (+ (+ (* (* 2.0 l_0_11_100) l_0_11_88) ?x35105) ?x35107) ?x35109) ?x35111)))
 (let ((?x9893 (+ (+ (+ (- (- (- (- ?x9956 ?x35113) ?x35118) ?x35120) ?x35122) ?x35124) ?x35126) ?x35128)))
 (= ?x9893 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33132 (* l_0_11_94 l_0_11_94)))
 (let ((?x33130 (* l_0_11_93 l_0_11_93)))
 (let ((?x33128 (* l_0_11_92 l_0_11_92)))
 (let ((?x33126 (* l_0_11_91 l_0_11_91)))
 (let ((?x33112 (* l_0_11_178 l_0_11_178)))
 (let ((?x33110 (* l_0_11_177 l_0_11_177)))
 (let ((?x33108 (* l_0_11_176 l_0_11_176)))
 (let ((?x33106 (* l_0_11_175 l_0_11_175)))
 (let ((?x33104 (* l_0_11_157 l_0_11_157)))
 (let ((?x33102 (* l_0_11_156 l_0_11_156)))
 (let ((?x33100 (* l_0_11_155 l_0_11_155)))
 (let ((?x33098 (* l_0_11_154 l_0_11_154)))
 (let ((?x33092 (* l_0_11_115 l_0_11_115)))
 (let ((?x33090 (* l_0_11_114 l_0_11_114)))
 (let ((?x9579 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x33090)))
 (let ((?x9611 (+ (+ (- (- (- (- (- ?x9579 ?x33092) ?x33098) ?x33100) ?x33102) ?x33104) ?x33106) ?x33108)))
 (= (+ (+ (+ (+ (+ (+ ?x9611 ?x33110) ?x33112) ?x33126) ?x33128) ?x33130) ?x33132) 0.0))))))))))))))))))
(assert
 (let ((?x33235 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x33232 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x33229 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x33226 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x33217 (* 2.0 l_0_11_178)))
 (let ((?x33218 (* ?x33217 l_0_11_182)))
 (let ((?x33214 (* 2.0 l_0_11_177)))
 (let ((?x33215 (* ?x33214 l_0_11_181)))
 (let ((?x33211 (* 2.0 l_0_11_176)))
 (let ((?x33212 (* ?x33211 l_0_11_180)))
 (let ((?x33208 (* 2.0 l_0_11_175)))
 (let ((?x33209 (* ?x33208 l_0_11_179)))
 (let ((?x33205 (* 2.0 l_0_11_157)))
 (let ((?x33206 (* ?x33205 l_0_11_161)))
 (let ((?x33202 (* 2.0 l_0_11_156)))
 (let ((?x33203 (* ?x33202 l_0_11_160)))
 (let ((?x33199 (* 2.0 l_0_11_155)))
 (let ((?x33200 (* ?x33199 l_0_11_159)))
 (let ((?x33196 (* 2.0 l_0_11_154)))
 (let ((?x33197 (* ?x33196 l_0_11_158)))
 (let ((?x33189 (* 2.0 l_0_11_115)))
 (let ((?x33190 (* ?x33189 l_0_11_119)))
 (let ((?x33186 (* 2.0 l_0_11_114)))
 (let ((?x33187 (* ?x33186 l_0_11_118)))
 (let ((?x33183 (* 2.0 l_0_11_113)))
 (let ((?x33184 (* ?x33183 l_0_11_117)))
 (let ((?x10108 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_116) ?x33184) ?x33187) ?x33190) ?x33197)))
 (let ((?x10113 (+ (+ (+ (+ (- (- (- ?x10108 ?x33200) ?x33203) ?x33206) ?x33209) ?x33212) ?x33215) ?x33218)))
 (= (+ (+ (+ (+ ?x10113 ?x33226) ?x33229) ?x33232) ?x33235) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x33217 (* 2.0 l_0_11_178)))
 (let ((?x33346 (* ?x33217 l_0_11_187)))
 (let ((?x33214 (* 2.0 l_0_11_177)))
 (let ((?x33344 (* ?x33214 l_0_11_186)))
 (let ((?x33211 (* 2.0 l_0_11_176)))
 (let ((?x33342 (* ?x33211 l_0_11_185)))
 (let ((?x33208 (* 2.0 l_0_11_175)))
 (let ((?x33340 (* ?x33208 l_0_11_184)))
 (let ((?x33205 (* 2.0 l_0_11_157)))
 (let ((?x33338 (* ?x33205 l_0_11_166)))
 (let ((?x33202 (* 2.0 l_0_11_156)))
 (let ((?x33336 (* ?x33202 l_0_11_165)))
 (let ((?x33199 (* 2.0 l_0_11_155)))
 (let ((?x33334 (* ?x33199 l_0_11_164)))
 (let ((?x33196 (* 2.0 l_0_11_154)))
 (let ((?x33332 (* ?x33196 l_0_11_163)))
 (let ((?x33189 (* 2.0 l_0_11_115)))
 (let ((?x33316 (* ?x33189 l_0_11_124)))
 (let ((?x33186 (* 2.0 l_0_11_114)))
 (let ((?x33314 (* ?x33186 l_0_11_123)))
 (let ((?x33183 (* 2.0 l_0_11_113)))
 (let ((?x33312 (* ?x33183 l_0_11_122)))
 (let ((?x33180 (* 2.0 l_0_11_112)))
 (let ((?x33310 (* ?x33180 l_0_11_121)))
 (let ((?x33305 (* 2.0 l_0_11_103)))
 (let ((?x33306 (* ?x33305 l_0_11_94)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x33303 (* ?x33302 l_0_11_93)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x33300 (* ?x33299 l_0_11_92)))
 (let ((?x25273 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_91) ?x33300) ?x33303) ?x33306) ?x33310)))
 (let ((?x35520 (- (- (- (- (- (- (- ?x25273 ?x33312) ?x33314) ?x33316) ?x33332) ?x33334) ?x33336) ?x33338)))
 (= (+ (+ (+ (+ ?x35520 ?x33340) ?x33342) ?x33344) ?x33346) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35226 (* l_0_11_99 l_0_11_99)))
 (let ((?x35224 (* l_0_11_98 l_0_11_98)))
 (let ((?x35222 (* l_0_11_97 l_0_11_97)))
 (let ((?x35220 (* l_0_11_96 l_0_11_96)))
 (let ((?x35218 (* l_0_11_95 l_0_11_95)))
 (let ((?x35216 (* l_0_11_183 l_0_11_183)))
 (let ((?x35214 (* l_0_11_182 l_0_11_182)))
 (let ((?x35212 (* l_0_11_181 l_0_11_181)))
 (let ((?x35210 (* l_0_11_180 l_0_11_180)))
 (let ((?x35208 (* l_0_11_179 l_0_11_179)))
 (let ((?x35206 (* l_0_11_162 l_0_11_162)))
 (let ((?x35204 (* l_0_11_161 l_0_11_161)))
 (let ((?x35202 (* l_0_11_160 l_0_11_160)))
 (let ((?x35200 (* l_0_11_159 l_0_11_159)))
 (let ((?x35198 (* l_0_11_158 l_0_11_158)))
 (let ((?x35196 (* l_0_11_120 l_0_11_120)))
 (let ((?x35194 (* l_0_11_119 l_0_11_119)))
 (let ((?x35192 (* l_0_11_118 l_0_11_118)))
 (let ((?x5944 (- (- (* (- l_0_11_116) l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35192)))
 (let ((?x35532 (- (- (- (- (- (- (- ?x5944 ?x35194) ?x35196) ?x35198) ?x35200) ?x35202) ?x35204) ?x35206)))
 (let ((?x35539 (+ (+ (+ (+ (+ (+ (+ ?x35532 ?x35208) ?x35210) ?x35212) ?x35214) ?x35216) ?x35218) ?x35220)))
 (= (+ (+ (+ ?x35539 ?x35222) ?x35224) ?x35226) 0.0)))))))))))))))))))))))
(assert
 (let ((?x35299 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x35296 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x35293 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x35290 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x35287 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x35284 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x35281 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x35278 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x35275 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x35272 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x35264 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x35261 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x35258 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x35255 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x35252 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x35249 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x33305 (* 2.0 l_0_11_103)))
 (let ((?x35246 (* ?x33305 l_0_11_98)))
 (let ((?x33302 (* 2.0 l_0_11_102)))
 (let ((?x35244 (* ?x33302 l_0_11_97)))
 (let ((?x33299 (* 2.0 l_0_11_101)))
 (let ((?x35242 (* ?x33299 l_0_11_96)))
 (let ((?x10250 (+ (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_95) ?x35242) ?x35244) ?x35246) ?x35249)))
 (let ((?x35561 (- (- (- (- (- (- (- ?x10250 ?x35252) ?x35255) ?x35258) ?x35261) ?x35264) ?x35272) ?x35275)))
 (let ((?x35568 (+ (+ (+ (+ (- (- (- ?x35561 ?x35278) ?x35281) ?x35284) ?x35287) ?x35290) ?x35293) ?x35296)))
 (= (+ ?x35568 ?x35299) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x35402 (* l_0_11_189 l_0_11_189)))
 (let ((?x35400 (* l_0_11_188 l_0_11_188)))
 (let ((?x35398 (* l_0_11_187 l_0_11_187)))
 (let ((?x35396 (* l_0_11_186 l_0_11_186)))
 (let ((?x35394 (* l_0_11_185 l_0_11_185)))
 (let ((?x35392 (* l_0_11_184 l_0_11_184)))
 (let ((?x35390 (* l_0_11_168 l_0_11_168)))
 (let ((?x35388 (* l_0_11_167 l_0_11_167)))
 (let ((?x35386 (* l_0_11_166 l_0_11_166)))
 (let ((?x35384 (* l_0_11_165 l_0_11_165)))
 (let ((?x35382 (* l_0_11_164 l_0_11_164)))
 (let ((?x35380 (* l_0_11_163 l_0_11_163)))
 (let ((?x35373 (* l_0_11_126 l_0_11_126)))
 (let ((?x35371 (* l_0_11_125 l_0_11_125)))
 (let ((?x35369 (* l_0_11_124 l_0_11_124)))
 (let ((?x35367 (* l_0_11_123 l_0_11_123)))
 (let ((?x35365 (* l_0_11_122 l_0_11_122)))
 (let ((?x35363 (* l_0_11_121 l_0_11_121)))
 (let ((?x35361 (* l_0_11_105 l_0_11_105)))
 (let ((?x35359 (* l_0_11_104 l_0_11_104)))
 (let ((?x35357 (* l_0_11_103 l_0_11_103)))
 (let ((?x35355 (* l_0_11_102 l_0_11_102)))
 (let ((?x10301 (+ (+ (* l_0_11_100 l_0_11_100) (* l_0_11_101 l_0_11_101)) ?x35355)))
 (let ((?x35575 (- (- (- (- (+ (+ (+ ?x10301 ?x35357) ?x35359) ?x35361) ?x35363) ?x35365) ?x35367) ?x35369)))
 (let ((?x35582 (- (- (- (- (- (- (- ?x35575 ?x35371) ?x35373) ?x35380) ?x35382) ?x35384) ?x35386) ?x35388)))
 (let ((?x35589 (+ (+ (+ (+ (+ (+ (- ?x35582 ?x35390) ?x35392) ?x35394) ?x35396) ?x35398) ?x35400) ?x35402)))
 (= ?x35589 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x34166 (* l_0_11_147 l_0_11_147)))
 (let ((?x34164 (* l_0_11_146 l_0_11_146)))
 (let ((?x34162 (* l_0_11_145 l_0_11_145)))
 (let ((?x34160 (* l_0_11_144 l_0_11_144)))
 (let ((?x10492 (- (- (* (- l_0_11_142) l_0_11_142) (* l_0_11_143 l_0_11_143)) ?x34160)))
 (= (- (- (- ?x10492 ?x34162) ?x34164) ?x34166) 0.0)))))))
(assert
 (>= l_0_11_1 0.0))
(assert
 (>= l_0_11_3 0.0))
(assert
 (>= l_0_11_6 0.0))
(assert
 (>= l_0_11_10 0.0))
(assert
 (>= l_0_11_15 0.0))
(assert
 (>= l_0_11_21 0.0))
(assert
 (>= l_0_11_22 0.0))
(assert
 (>= l_0_11_24 0.0))
(assert
 (>= l_0_11_27 0.0))
(assert
 (>= l_0_11_31 0.0))
(assert
 (>= l_0_11_36 0.0))
(assert
 (>= l_0_11_42 0.0))
(assert
 (>= l_0_11_43 0.0))
(assert
 (>= l_0_11_45 0.0))
(assert
 (>= l_0_11_48 0.0))
(assert
 (>= l_0_11_52 0.0))
(assert
 (>= l_0_11_57 0.0))
(assert
 (>= l_0_11_63 0.0))
(assert
 (>= l_0_11_64 0.0))
(assert
 (>= l_0_11_66 0.0))
(assert
 (>= l_0_11_69 0.0))
(assert
 (>= l_0_11_73 0.0))
(assert
 (>= l_0_11_78 0.0))
(assert
 (>= l_0_11_84 0.0))
(assert
 (>= l_0_11_85 0.0))
(assert
 (>= l_0_11_87 0.0))
(assert
 (>= l_0_11_90 0.0))
(assert
 (>= l_0_11_94 0.0))
(assert
 (>= l_0_11_99 0.0))
(assert
 (>= l_0_11_105 0.0))
(assert
 (>= l_0_11_106 0.0))
(assert
 (>= l_0_11_108 0.0))
(assert
 (>= l_0_11_111 0.0))
(assert
 (>= l_0_11_115 0.0))
(assert
 (>= l_0_11_120 0.0))
(assert
 (>= l_0_11_126 0.0))
(assert
 (>= l_0_11_127 0.0))
(assert
 (>= l_0_11_129 0.0))
(assert
 (>= l_0_11_132 0.0))
(assert
 (>= l_0_11_136 0.0))
(assert
 (>= l_0_11_141 0.0))
(assert
 (>= l_0_11_147 0.0))
(assert
 (>= l_0_11_148 0.0))
(assert
 (>= l_0_11_150 0.0))
(assert
 (>= l_0_11_153 0.0))
(assert
 (>= l_0_11_157 0.0))
(assert
 (>= l_0_11_162 0.0))
(assert
 (>= l_0_11_168 0.0))
(assert
 (>= l_0_11_169 0.0))
(assert
 (>= l_0_11_171 0.0))
(assert
 (>= l_0_11_174 0.0))
(assert
 (>= l_0_11_178 0.0))
(assert
 (>= l_0_11_183 0.0))
(assert
 (>= l_0_11_189 0.0))
(assert
 (>= l_0_11_190 0.0))
(assert
 (>= l_0_11_192 0.0))
(assert
 (>= l_0_11_195 0.0))
(assert
 (>= l_0_11_199 0.0))
(assert
 (>= l_0_11_204 0.0))
(assert
 (>= l_0_11_210 0.0))
(assert
 (>= l_0_11_211 0.0))
(assert
 (>= l_0_11_213 0.0))
(assert
 (>= l_0_11_216 0.0))
(assert
 (>= l_0_11_220 0.0))
(assert
 (>= l_0_11_225 0.0))
(assert
 (>= l_0_11_231 0.0))
(assert
 (>= l_0_11_232 0.0))
(assert
 (>= l_0_11_234 0.0))
(assert
 (>= l_0_11_237 0.0))
(assert
 (>= l_0_11_241 0.0))
(assert
 (>= l_0_11_246 0.0))
(assert
 (>= l_0_11_252 0.0))
(assert
 (>= l_0_11_253 0.0))
(assert
 (>= l_0_11_255 0.0))
(assert
 (>= l_0_11_258 0.0))
(assert
 (>= l_0_11_262 0.0))
(assert
 (>= l_0_11_267 0.0))
(assert
 (>= l_0_11_273 0.0))
(assert
 (>= l_0_11_274 0.0))
(assert
 (>= l_0_11_276 0.0))
(assert
 (>= l_0_11_279 0.0))
(assert
 (>= l_0_11_283 0.0))
(assert
 (>= l_0_11_288 0.0))
(assert
 (>= l_0_11_294 0.0))
(assert
 (let ((?x35697 (* l_0_12_87 l_0_12_87)))
 (let ((?x35695 (* l_0_12_86 l_0_12_86)))
 (let ((?x35692 (* l_0_12_64 l_0_12_64)))
 (let ((?x35693 (* 3.0 ?x35692)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x35690 (* ?x35689 l_0_12_65)))
 (let ((?x35687 (* (* 3.0 l_0_12_43) l_0_12_43)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x35684 (* ?x35683 l_0_12_44)))
 (let ((?x35681 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x35678 (* l_0_12_171 l_0_12_171)))
 (let ((?x35676 (* l_0_12_170 l_0_12_170)))
 (let ((?x35674 (* l_0_12_150 l_0_12_150)))
 (let ((?x35672 (* l_0_12_149 l_0_12_149)))
 (let ((?x35670 (* l_0_12_127 l_0_12_127)))
 (let ((?x35668 (* l_0_12_108 l_0_12_108)))
 (let ((?x35669 (- (- (* 6.0 (* l_0_12_1 l_0_12_1)) (* l_0_12_107 l_0_12_107)) ?x35668)))
 (let ((?x35685 (- (- (+ (+ (- (- (+ ?x35669 ?x35670) ?x35672) ?x35674) ?x35676) ?x35678) ?x35681) ?x35684)))
 (= (+ (+ (+ (+ (+ (- ?x35685 ?x35687) ?x35690) ?x35693) ?x35695) ?x35697) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x35767 (* l_0_12_66 l_0_12_66)))
 (let ((?x35768 (* 3.0 ?x35767)))
 (let ((?x35764 (* l_0_12_65 l_0_12_65)))
 (let ((?x35765 (* 3.0 ?x35764)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x35690 (* ?x35689 l_0_12_65)))
 (let ((?x35759 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (let ((?x35756 (* (* 3.0 l_0_12_44) l_0_12_44)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x35684 (* ?x35683 l_0_12_44)))
 (let ((?x35749 (* l_0_12_295 l_0_12_295)))
 (let ((?x35747 (* l_0_12_274 l_0_12_274)))
 (let ((?x35745 (* l_0_12_253 l_0_12_253)))
 (let ((?x35743 (* l_0_12_232 l_0_12_232)))
 (let ((?x35681 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x35740 (* ?x35739 l_0_12_23)))
 (let ((?x35737 (* l_0_12_211 l_0_12_211)))
 (let ((?x35735 (* l_0_12_190 l_0_12_190)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x35733 (* ?x35732 l_0_12_128)))
 (let ((?x35664 (* l_0_12_1 l_0_12_1)))
 (let ((?x35665 (* 6.0 ?x35664)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x10559 (* ?x10556 l_0_12_2)))
 (let ((?x35744 (- (- (- (- (- (+ (+ ?x10559 ?x35665) ?x35733) ?x35735) ?x35737) ?x35740) ?x35681) ?x35743)))
 (let ((?x35754 (- (- (- (- (- ?x35744 ?x35745) ?x35747) ?x35749) ?x35684) (* (* 1.0 l_0_12_43) l_0_12_43))))
 (let ((?x35763 (+ (+ (- (- ?x35754 ?x35756) ?x35759) ?x35690) (* 1.0 (* l_0_12_64 l_0_12_64)))))
 (= (+ (+ (+ ?x35763 ?x35765) ?x35768) 3.0) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35767 (* l_0_12_66 l_0_12_66)))
 (let ((?x35768 (* 3.0 ?x35767)))
 (let ((?x35764 (* l_0_12_65 l_0_12_65)))
 (let ((?x35765 (* 3.0 ?x35764)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x35850 (* ?x35849 l_0_12_65)))
 (let ((?x35759 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (let ((?x35756 (* (* 3.0 l_0_12_44) l_0_12_44)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x35845 (* ?x35844 l_0_12_44)))
 (let ((?x35841 (* l_0_12_3 l_0_12_3)))
 (let ((?x35842 (* 6.0 ?x35841)))
 (let ((?x35830 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x35824 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x35740 (* ?x35739 l_0_12_23)))
 (let ((?x35816 (* l_0_12_2 l_0_12_2)))
 (let ((?x35817 (* 6.0 ?x35816)))
 (let ((?x35811 (* l_0_12_129 l_0_12_129)))
 (let ((?x35812 (+ (+ (* (* 12.0 l_0_12_1) l_0_12_2) (* l_0_12_128 l_0_12_128)) ?x35811)))
 (let ((?x35821 (- (+ (- ?x35812 (* (* 2.0 l_0_12_190) l_0_12_191)) ?x35817) (* (* 2.0 l_0_12_211) l_0_12_212))))
 (let ((?x35831 (- (- (- (- ?x35821 ?x35740) ?x35824) (* (* 2.0 l_0_12_232) l_0_12_233)) ?x35830)))
 (let ((?x35837 (- (- ?x35831 (* (* 2.0 l_0_12_253) l_0_12_254)) (* (* 2.0 l_0_12_274) l_0_12_275))))
 (let ((?x35847 (- (- (+ (- ?x35837 (* (* 2.0 l_0_12_295) l_0_12_296)) ?x35842) ?x35845) ?x35756)))
 (= (+ (+ (+ (+ (- ?x35847 ?x35759) ?x35850) ?x35765) ?x35768) 3.0) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x35841 (* l_0_12_3 l_0_12_3)))
 (let ((?x35842 (* 6.0 ?x35841)))
 (let ((?x35915 (* l_0_12_297 l_0_12_297)))
 (let ((?x35913 (* l_0_12_296 l_0_12_296)))
 (let ((?x35911 (* l_0_12_276 l_0_12_276)))
 (let ((?x35909 (* l_0_12_275 l_0_12_275)))
 (let ((?x35907 (* l_0_12_255 l_0_12_255)))
 (let ((?x35905 (* l_0_12_254 l_0_12_254)))
 (let ((?x35830 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x35902 (* l_0_12_234 l_0_12_234)))
 (let ((?x35900 (* l_0_12_233 l_0_12_233)))
 (let ((?x35824 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x35897 (* l_0_12_213 l_0_12_213)))
 (let ((?x35895 (* l_0_12_212 l_0_12_212)))
 (let ((?x35816 (* l_0_12_2 l_0_12_2)))
 (let ((?x35817 (* 6.0 ?x35816)))
 (let ((?x35892 (* l_0_12_192 l_0_12_192)))
 (let ((?x35896 (- (+ (- (- (- _a_1_) (* l_0_12_191 l_0_12_191)) ?x35892) ?x35817) ?x35895)))
 (let ((?x35908 (- (- (- (- (- (- (- ?x35896 ?x35897) ?x35824) ?x35900) ?x35902) ?x35830) ?x35905) ?x35907)))
 (let ((?x35920 (- (+ (- (- (- (- ?x35908 ?x35909) ?x35911) ?x35913) ?x35915) ?x35842) (* (* 1.0 l_0_12_44) l_0_12_44))))
 (let ((?x35925 (+ (- ?x35920 (* (* 1.0 l_0_12_45) l_0_12_45)) (* 1.0 (* l_0_12_65 l_0_12_65)))))
 (= (+ (+ ?x35925 (* 1.0 (* l_0_12_66 l_0_12_66))) 1.0) 0.0)))))))))))))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x36101 (* ?x36100 l_0_12_96)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x36098 (* ?x36097 l_0_12_95)))
 (let ((?x36065 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x36062 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x36059 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x36056 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x36053 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x36050 (* l_0_12_309 l_0_12_309)))
 (let ((?x36048 (* l_0_12_308 l_0_12_308)))
 (let ((?x36046 (* l_0_12_307 l_0_12_307)))
 (let ((?x36044 (* l_0_12_306 l_0_12_306)))
 (let ((?x36042 (* l_0_12_305 l_0_12_305)))
 (let ((?x36040 (* l_0_12_288 l_0_12_288)))
 (let ((?x36038 (* l_0_12_287 l_0_12_287)))
 (let ((?x36036 (* l_0_12_286 l_0_12_286)))
 (let ((?x36034 (* l_0_12_285 l_0_12_285)))
 (let ((?x36032 (* l_0_12_284 l_0_12_284)))
 (let ((?x36030 (* l_0_12_267 l_0_12_267)))
 (let ((?x36028 (* l_0_12_266 l_0_12_266)))
 (let ((?x36026 (* l_0_12_265 l_0_12_265)))
 (let ((?x36024 (* l_0_12_264 l_0_12_264)))
 (let ((?x36022 (* l_0_12_263 l_0_12_263)))
 (let ((?x36020 (* l_0_12_246 l_0_12_246)))
 (let ((?x36018 (* l_0_12_245 l_0_12_245)))
 (let ((?x36016 (* l_0_12_244 l_0_12_244)))
 (let ((?x36014 (* l_0_12_243 l_0_12_243)))
 (let ((?x36012 (* l_0_12_242 l_0_12_242)))
 (let ((?x36010 (* l_0_12_225 l_0_12_225)))
 (let ((?x36008 (* l_0_12_224 l_0_12_224)))
 (let ((?x36006 (* l_0_12_223 l_0_12_223)))
 (let ((?x36004 (* l_0_12_222 l_0_12_222)))
 (let ((?x36002 (* l_0_12_221 l_0_12_221)))
 (let ((?x36000 (* l_0_12_204 l_0_12_204)))
 (let ((?x35998 (* l_0_12_203 l_0_12_203)))
 (let ((?x35996 (* l_0_12_202 l_0_12_202)))
 (let ((?x35994 (* l_0_12_201 l_0_12_201)))
 (let ((?x35992 (* l_0_12_200 l_0_12_200)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x35990 (* ?x35989 l_0_12_180)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x35987 (* ?x35986 l_0_12_179)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x35984 (* ?x35983 l_0_12_159)))
 (let ((?x35980 (* l_0_12_15 l_0_12_15)))
 (let ((?x35981 (* 6.0 ?x35980)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x35978 (* ?x35977 l_0_12_158)))
 (let ((?x35974 (* l_0_12_14 l_0_12_14)))
 (let ((?x35975 (* 6.0 ?x35974)))
 (let ((?x35971 (* l_0_12_13 l_0_12_13)))
 (let ((?x35972 (* 6.0 ?x35971)))
 (let ((?x35968 (* l_0_12_12 l_0_12_12)))
 (let ((?x35969 (* 6.0 ?x35968)))
 (let ((?x35965 (* l_0_12_11 l_0_12_11)))
 (let ((?x35966 (* 6.0 ?x35965)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x35963 (* ?x35962 l_0_12_117)))
 (let ((?x35967 (+ (+ (+ (- _a_0_) (* (* 2.0 l_0_12_107) l_0_12_116)) ?x35963) ?x35966)))
 (let ((?x35988 (- (+ (+ (+ (+ (+ (+ ?x35967 ?x35969) ?x35972) ?x35975) ?x35978) ?x35981) ?x35984) ?x35987)))
 (let ((?x36003 (- (- (- (- (- (- (- ?x35988 ?x35990) ?x35992) ?x35994) ?x35996) ?x35998) ?x36000) ?x36002)))
 (let ((?x36017 (- (- (- (- (- (- (- ?x36003 ?x36004) ?x36006) ?x36008) ?x36010) ?x36012) ?x36014) ?x36016)))
 (let ((?x36031 (- (- (- (- (- (- (- ?x36017 ?x36018) ?x36020) ?x36022) ?x36024) ?x36026) ?x36028) ?x36030)))
 (let ((?x36045 (- (- (- (- (- (- (- ?x36031 ?x36032) ?x36034) ?x36036) ?x36038) ?x36040) ?x36042) ?x36044)))
 (let ((?x36063 (- (- (- (- (- (- (- ?x36045 ?x36046) ?x36048) ?x36050) ?x36053) ?x36056) ?x36059) ?x36062)))
 (let ((?x36072 (- (- (- ?x36063 ?x36065) (* (* 1.0 l_0_12_53) l_0_12_53)) (* (* 1.0 l_0_12_54) l_0_12_54))))
 (let ((?x36078 (- (- ?x36072 (* (* 1.0 l_0_12_55) l_0_12_55)) (* (* 1.0 l_0_12_56) l_0_12_56))))
 (let ((?x36084 (+ (- ?x36078 (* (* 1.0 l_0_12_57) l_0_12_57)) (* 1.0 (* l_0_12_74 l_0_12_74)))))
 (let ((?x36090 (+ (+ ?x36084 (* 1.0 (* l_0_12_75 l_0_12_75))) (* 1.0 (* l_0_12_76 l_0_12_76)))))
 (let ((?x36096 (+ (+ ?x36090 (* 1.0 (* l_0_12_77 l_0_12_77))) (* 1.0 (* l_0_12_78 l_0_12_78)))))
 (= (- (- ?x36096 ?x36098) ?x36101) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35697 (* l_0_12_87 l_0_12_87)))
 (let ((?x35695 (* l_0_12_86 l_0_12_86)))
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x36254 (* ?x36253 l_0_12_75)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x36251 (* ?x36250 l_0_12_74)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x36248 (* ?x36247 l_0_12_54)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x36245 (* ?x36244 l_0_12_53)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36224 (* ?x36223 l_0_12_33)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36215 (* ?x36214 l_0_12_32)))
 (let ((?x35678 (* l_0_12_171 l_0_12_171)))
 (let ((?x35676 (* l_0_12_170 l_0_12_170)))
 (let ((?x35674 (* l_0_12_150 l_0_12_150)))
 (let ((?x35672 (* l_0_12_149 l_0_12_149)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x36196 (* ?x36195 l_0_12_3)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x36193 (* ?x36192 l_0_12_2)))
 (let ((?x35668 (* l_0_12_108 l_0_12_108)))
 (let ((?x36197 (+ (+ (+ (+ (- _a_2_) (* l_0_12_107 l_0_12_107)) ?x35668) ?x36193) ?x36196)))
 (let ((?x36204 (- (- (- (+ (+ ?x36197 ?x35672) ?x35674) ?x35676) ?x35678) (* (* 2.0 l_0_12_191) l_0_12_200))))
 (let ((?x36210 (- (- ?x36204 (* (* 2.0 l_0_12_192) l_0_12_201)) (* (* 2.0 l_0_12_212) l_0_12_221))))
 (let ((?x36219 (- (- (- ?x36210 (* (* 2.0 l_0_12_213) l_0_12_222)) ?x36215) (* (* 2.0 l_0_12_233) l_0_12_242))))
 (let ((?x36228 (- (- (- ?x36219 (* (* 2.0 l_0_12_234) l_0_12_243)) ?x36224) (* (* 2.0 l_0_12_254) l_0_12_263))))
 (let ((?x36234 (- (- ?x36228 (* (* 2.0 l_0_12_255) l_0_12_264)) (* (* 2.0 l_0_12_275) l_0_12_284))))
 (let ((?x36240 (- (- ?x36234 (* (* 2.0 l_0_12_276) l_0_12_285)) (* (* 2.0 l_0_12_296) l_0_12_305))))
 (let ((?x36252 (+ (- (- (- ?x36240 (* (* 2.0 l_0_12_297) l_0_12_306)) ?x36245) ?x36248) ?x36251)))
 (= (- (- (+ ?x36252 ?x36254) ?x35695) ?x35697) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x36393 (* ?x36253 l_0_12_68)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x36391 (* ?x36250 l_0_12_67)))
 (let ((?x36388 (* l_0_12_6 l_0_12_6)))
 (let ((?x36389 (* 6.0 ?x36388)))
 (let ((?x36385 (* l_0_12_5 l_0_12_5)))
 (let ((?x36386 (* 6.0 ?x36385)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x36374 (* ?x36247 l_0_12_47)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x36372 (* ?x36244 l_0_12_46)))
 (let ((?x36369 (* l_0_12_4 l_0_12_4)))
 (let ((?x36370 (* 6.0 ?x36369)))
 (let ((?x36367 (* l_0_12_300 l_0_12_300)))
 (let ((?x36365 (* l_0_12_299 l_0_12_299)))
 (let ((?x36363 (* l_0_12_298 l_0_12_298)))
 (let ((?x36361 (* l_0_12_279 l_0_12_279)))
 (let ((?x36359 (* l_0_12_278 l_0_12_278)))
 (let ((?x36357 (* l_0_12_277 l_0_12_277)))
 (let ((?x36355 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x36352 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x36349 (* l_0_12_258 l_0_12_258)))
 (let ((?x36347 (* l_0_12_257 l_0_12_257)))
 (let ((?x36345 (* l_0_12_256 l_0_12_256)))
 (let ((?x36343 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x36340 (* l_0_12_237 l_0_12_237)))
 (let ((?x36338 (* l_0_12_236 l_0_12_236)))
 (let ((?x36336 (* l_0_12_235 l_0_12_235)))
 (let ((?x36334 (* l_0_12_216 l_0_12_216)))
 (let ((?x36332 (* l_0_12_215 l_0_12_215)))
 (let ((?x36330 (* l_0_12_214 l_0_12_214)))
 (let ((?x36328 (* l_0_12_195 l_0_12_195)))
 (let ((?x36326 (* l_0_12_194 l_0_12_194)))
 (let ((?x36331 (- (- (- (- (- _a_3_) (* l_0_12_193 l_0_12_193)) ?x36326) ?x36328) ?x36330)))
 (let ((?x36346 (- (- (- (- (- (- (- ?x36331 ?x36332) ?x36334) ?x36336) ?x36338) ?x36340) ?x36343) ?x36345)))
 (let ((?x36362 (- (- (- (- (- (- (- ?x36346 ?x36347) ?x36349) ?x36352) ?x36355) ?x36357) ?x36359) ?x36361)))
 (let ((?x36378 (- (+ (+ (+ (- (- (- ?x36362 ?x36363) ?x36365) ?x36367) ?x36370) ?x36372) ?x36374) (* (* 1.0 l_0_12_46) l_0_12_46))))
 (let ((?x36384 (- (- ?x36378 (* (* 1.0 l_0_12_47) l_0_12_47)) (* (* 1.0 l_0_12_48) l_0_12_48))))
 (let ((?x36397 (+ (- (- (+ (+ ?x36384 ?x36386) ?x36389) ?x36391) ?x36393) (* 1.0 (* l_0_12_67 l_0_12_67)))))
 (let ((?x36403 (+ (+ ?x36397 (* 1.0 (* l_0_12_68 l_0_12_68))) (* 1.0 (* l_0_12_69 l_0_12_69)))))
 (= ?x36403 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35767 (* l_0_12_66 l_0_12_66)))
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x36393 (* ?x36253 l_0_12_68)))
 (let ((?x35764 (* l_0_12_65 l_0_12_65)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x36391 (* ?x36250 l_0_12_67)))
 (let ((?x10607 (* l_0_12_45 l_0_12_45)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x36374 (* ?x36247 l_0_12_47)))
 (let ((?x35795 (* l_0_12_44 l_0_12_44)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x36372 (* ?x36244 l_0_12_46)))
 (let ((?x36504 (* 12.0 l_0_12_3)))
 (let ((?x36505 (* ?x36504 l_0_12_5)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36490 (* ?x36223 l_0_12_26)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36484 (* ?x36214 l_0_12_25)))
 (let ((?x36477 (* 12.0 l_0_12_2)))
 (let ((?x36478 (* ?x36477 l_0_12_4)))
 (let ((?x36476 (- (- (- _a_4_) (* (* 2.0 l_0_12_191) l_0_12_193)) (* (* 2.0 l_0_12_192) l_0_12_194))))
 (let ((?x36483 (- (- (+ ?x36476 ?x36478) (* (* 2.0 l_0_12_212) l_0_12_214)) (* (* 2.0 l_0_12_213) l_0_12_215))))
 (let ((?x36489 (- (- (- ?x36483 ?x36484) (* (* 2.0 l_0_12_233) l_0_12_235)) (* (* 2.0 l_0_12_234) l_0_12_236))))
 (let ((?x36495 (- (- (- ?x36489 ?x36490) (* (* 2.0 l_0_12_254) l_0_12_256)) (* (* 2.0 l_0_12_255) l_0_12_257))))
 (let ((?x36499 (- (- ?x36495 (* (* 2.0 l_0_12_275) l_0_12_277)) (* (* 2.0 l_0_12_276) l_0_12_278))))
 (let ((?x36503 (- (- ?x36499 (* (* 2.0 l_0_12_296) l_0_12_298)) (* (* 2.0 l_0_12_297) l_0_12_299))))
 (let ((?x36512 (- (+ (+ (- (+ (- (+ ?x36503 ?x36505) ?x36372) ?x35795) ?x36374) ?x10607) ?x36391) ?x35764)))
 (= (- (+ ?x36512 ?x36393) ?x35767) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x36682 (* ?x36100 l_0_12_89)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x36680 (* ?x36097 l_0_12_88)))
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x36678 (* ?x36677 l_0_12_76)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x36675 (* ?x36674 l_0_12_75)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x36672 (* ?x36671 l_0_12_74)))
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x36254 (* ?x36253 l_0_12_75)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x36251 (* ?x36250 l_0_12_74)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x36667 (* ?x36666 l_0_12_55)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x36664 (* ?x36663 l_0_12_54)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x36661 (* ?x36660 l_0_12_53)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x36248 (* ?x36247 l_0_12_54)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x36245 (* ?x36244 l_0_12_53)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x36638 (* ?x36637 l_0_12_34)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x36635 (* ?x36634 l_0_12_33)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x36623 (* ?x36622 l_0_12_32)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x36593 (* ?x35989 l_0_12_173)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x36591 (* ?x35986 l_0_12_172)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x36589 (* ?x35983 l_0_12_152)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x36587 (* ?x35977 l_0_12_151)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x36585 (* ?x36584 l_0_12_6)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x36582 (* ?x36195 l_0_12_5)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x36580 (* ?x36192 l_0_12_4)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x36578 (* ?x35962 l_0_12_110)))
 (let ((?x36581 (+ (+ (+ (- _a_5_) (* (* 2.0 l_0_12_107) l_0_12_109)) ?x36578) ?x36580)))
 (let ((?x36597 (- (- (- (+ (+ (+ (+ ?x36581 ?x36582) ?x36585) ?x36587) ?x36589) ?x36591) ?x36593) (* (* 2.0 l_0_12_193) l_0_12_200))))
 (let ((?x36603 (- (- ?x36597 (* (* 2.0 l_0_12_194) l_0_12_201)) (* (* 2.0 l_0_12_195) l_0_12_202))))
 (let ((?x36609 (- (- ?x36603 (* (* 2.0 l_0_12_214) l_0_12_221)) (* (* 2.0 l_0_12_215) l_0_12_222))))
 (let ((?x36615 (- (- ?x36609 (* (* 2.0 l_0_12_216) l_0_12_223)) (* (* 2.0 l_0_12_235) l_0_12_242))))
 (let ((?x36621 (- (- ?x36615 (* (* 2.0 l_0_12_236) l_0_12_243)) (* (* 2.0 l_0_12_237) l_0_12_244))))
 (let ((?x36630 (- (- (- ?x36621 ?x36623) (* (* 2.0 l_0_12_256) l_0_12_263)) (* (* 2.0 l_0_12_257) l_0_12_264))))
 (let ((?x36642 (- (- (- (- ?x36630 (* (* 2.0 l_0_12_258) l_0_12_265)) ?x36635) ?x36638) (* (* 2.0 l_0_12_277) l_0_12_284))))
 (let ((?x36648 (- (- ?x36642 (* (* 2.0 l_0_12_278) l_0_12_285)) (* (* 2.0 l_0_12_279) l_0_12_286))))
 (let ((?x36654 (- (- ?x36648 (* (* 2.0 l_0_12_298) l_0_12_305)) (* (* 2.0 l_0_12_299) l_0_12_306))))
 (let ((?x36662 (- (+ (+ (- ?x36654 (* (* 2.0 l_0_12_300) l_0_12_307)) ?x36245) ?x36248) ?x36661)))
 (let ((?x36679 (+ (+ (+ (- (- (- (- ?x36662 ?x36664) ?x36667) ?x36251) ?x36254) ?x36672) ?x36675) ?x36678)))
 (= (- (- ?x36679 ?x36680) ?x36682) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x36817 (* ?x36816 l_0_12_71)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x36814 (* ?x36813 l_0_12_70)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x36811 (* ?x35689 l_0_12_70)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x36809 (* ?x36808 l_0_12_50)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x36806 (* ?x36805 l_0_12_49)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x36803 (* ?x35683 l_0_12_49)))
 (let ((?x25528 (* l_0_12_22 l_0_12_22)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x36800 (* ?x35739 l_0_12_28)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x36798 (* ?x35732 l_0_12_133)))
 (let ((?x36799 (+ (- (* (* 12.0 l_0_12_1) l_0_12_7) (* l_0_12_1 l_0_12_1)) ?x36798)))
 (let ((?x36815 (+ (+ (- (- (- (+ (- ?x36799 ?x36800) ?x25528) ?x36803) ?x36806) ?x36809) ?x36811) ?x36814)))
 (= (+ ?x36815 ?x36817) 0.0)))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x36817 (* ?x36816 l_0_12_71)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x36814 (* ?x36813 l_0_12_70)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x36887 (* ?x35849 l_0_12_70)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x36809 (* ?x36808 l_0_12_50)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x36806 (* ?x36805 l_0_12_49)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x36883 (* ?x35844 l_0_12_49)))
 (let ((?x36504 (* 12.0 l_0_12_3)))
 (let ((?x36881 (* ?x36504 l_0_12_8)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36873 (* ?x36223 l_0_12_29)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36869 (* ?x36214 l_0_12_28)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x36800 (* ?x35739 l_0_12_28)))
 (let ((?x36477 (* 12.0 l_0_12_2)))
 (let ((?x36861 (* ?x36477 l_0_12_7)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x36857 (* ?x36856 l_0_12_134)))
 (let ((?x36853 (* 2.0 l_0_12_128)))
 (let ((?x36854 (* ?x36853 l_0_12_133)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x36796 (* ?x10556 l_0_12_7)))
 (let ((?x36860 (- (+ (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_2) ?x36796) ?x36854) ?x36857) (* (* 2.0 l_0_12_190) l_0_12_196))))
 (let ((?x36867 (+ (- (+ ?x36860 ?x36861) (* (* 2.0 l_0_12_211) l_0_12_217)) (* (* 2.0 l_0_12_22) l_0_12_23))))
 (let ((?x36874 (- (- (- (- ?x36867 ?x36800) ?x36869) (* (* 2.0 l_0_12_232) l_0_12_238)) ?x36873)))
 (let ((?x36878 (- (- ?x36874 (* (* 2.0 l_0_12_253) l_0_12_259)) (* (* 2.0 l_0_12_274) l_0_12_280))))
 (let ((?x36885 (- (- (+ (- ?x36878 (* (* 2.0 l_0_12_295) l_0_12_301)) ?x36881) ?x36883) ?x36806)))
 (= (+ (+ (+ (- ?x36885 ?x36809) ?x36887) ?x36814) ?x36817) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x36985 (* ?x36984 l_0_12_72)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x36982 (* ?x36981 l_0_12_71)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x36979 (* ?x36978 l_0_12_70)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x36887 (* ?x35849 l_0_12_70)))
 (let ((?x36975 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x36972 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x36969 (* ?x36968 l_0_12_51)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x36966 (* ?x36965 l_0_12_50)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x36883 (* ?x35844 l_0_12_49)))
 (let ((?x36959 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x36956 (* ?x36637 l_0_12_30)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x36954 (* ?x36634 l_0_12_29)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x36952 (* ?x36622 l_0_12_28)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x36948 (* ?x36947 l_0_12_135)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x12655 (* ?x12651 l_0_12_134)))
 (let ((?x12657 (+ (* (* (- 2.0) l_0_12_1) l_0_12_4) (* (* 2.0 l_0_12_130) l_0_12_133))))
 (let ((?x36953 (- (+ (+ (+ ?x12657 ?x12655) ?x36948) (* (* 2.0 l_0_12_22) l_0_12_25)) ?x36952)))
 (let ((?x36964 (- (+ (+ (- (- ?x36953 ?x36954) ?x36956) ?x36959) ?x36883) (* (* 6.0 l_0_12_46) l_0_12_49))))
 (let ((?x36983 (+ (+ (- (+ (+ (- (- ?x36964 ?x36966) ?x36969) ?x36972) ?x36975) ?x36887) ?x36979) ?x36982)))
 (= (+ ?x36983 ?x36985) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x37076 (* l_0_12_9 l_0_12_9)))
 (let ((?x37077 (* 6.0 ?x37076)))
 (let ((?x37073 (* l_0_12_8 l_0_12_8)))
 (let ((?x37074 (* 6.0 ?x37073)))
 (let ((?x37070 (* l_0_12_73 l_0_12_73)))
 (let ((?x37071 (* 3.0 ?x37070)))
 (let ((?x37067 (* l_0_12_72 l_0_12_72)))
 (let ((?x37068 (* 3.0 ?x37067)))
 (let ((?x37064 (* l_0_12_71 l_0_12_71)))
 (let ((?x37065 (* 3.0 ?x37064)))
 (let ((?x37061 (* l_0_12_70 l_0_12_70)))
 (let ((?x37062 (* 3.0 ?x37061)))
 (let ((?x37058 (* l_0_12_7 l_0_12_7)))
 (let ((?x37059 (* 6.0 ?x37058)))
 (let ((?x37056 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x37053 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x37050 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x37044 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x37041 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x37038 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x37035 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x37030 (* l_0_12_136 l_0_12_136)))
 (let ((?x37028 (* l_0_12_135 l_0_12_135)))
 (let ((?x37026 (* l_0_12_134 l_0_12_134)))
 (let ((?x37024 (* l_0_12_133 l_0_12_133)))
 (let ((?x37021 (* l_0_12_10 l_0_12_10)))
 (let ((?x37022 (* 6.0 ?x37021)))
 (let ((?x37029 (+ (+ (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) ?x37022) ?x37024) ?x37026) ?x37028)))
 (let ((?x37039 (- (- (+ (+ ?x37029 ?x37030) (* (* 2.0 l_0_12_22) l_0_12_28)) ?x37035) ?x37038)))
 (let ((?x37051 (- (- (- (- ?x37039 ?x37041) ?x37044) (* (* 3.0 l_0_12_49) l_0_12_49)) ?x37050)))
 (let ((?x37072 (+ (+ (+ (+ (+ (- (- ?x37051 ?x37053) ?x37056) ?x37059) ?x37062) ?x37065) ?x37068) ?x37071)))
 (= (+ (+ ?x37072 ?x37074) ?x37077) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x37185 (* ?x37184 l_0_12_91)))
 (let ((?x37181 (* 6.0 l_0_12_73)))
 (let ((?x37182 (* ?x37181 l_0_12_77)))
 (let ((?x37178 (* 6.0 l_0_12_72)))
 (let ((?x37179 (* ?x37178 l_0_12_76)))
 (let ((?x37175 (* 6.0 l_0_12_71)))
 (let ((?x37176 (* ?x37175 l_0_12_75)))
 (let ((?x37172 (* 6.0 l_0_12_70)))
 (let ((?x37173 (* ?x37172 l_0_12_74)))
 (let ((?x37169 (* 6.0 l_0_12_52)))
 (let ((?x37170 (* ?x37169 l_0_12_56)))
 (let ((?x37166 (* 6.0 l_0_12_51)))
 (let ((?x37167 (* ?x37166 l_0_12_55)))
 (let ((?x37163 (* 6.0 l_0_12_50)))
 (let ((?x37164 (* ?x37163 l_0_12_54)))
 (let ((?x37157 (* 12.0 l_0_12_31)))
 (let ((?x37158 (* ?x37157 l_0_12_35)))
 (let ((?x37154 (* 12.0 l_0_12_30)))
 (let ((?x37155 (* ?x37154 l_0_12_34)))
 (let ((?x37151 (* 12.0 l_0_12_29)))
 (let ((?x37152 (* ?x37151 l_0_12_33)))
 (let ((?x37148 (* 12.0 l_0_12_28)))
 (let ((?x37149 (* ?x37148 l_0_12_32)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x37144 (* ?x37143 l_0_12_175)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x37141 (* ?x37140 l_0_12_154)))
 (let ((?x37137 (* 2.0 l_0_12_136)))
 (let ((?x37138 (* ?x37137 l_0_12_140)))
 (let ((?x37134 (* 2.0 l_0_12_135)))
 (let ((?x37135 (* ?x37134 l_0_12_139)))
 (let ((?x37131 (* 2.0 l_0_12_134)))
 (let ((?x37132 (* ?x37131 l_0_12_138)))
 (let ((?x37128 (* 2.0 l_0_12_133)))
 (let ((?x37129 (* ?x37128 l_0_12_137)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x37126 (* ?x36584 l_0_12_9)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x37124 (* ?x36195 l_0_12_8)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x37122 (* ?x36192 l_0_12_7)))
 (let ((?x37116 (* 12.0 l_0_12_10)))
 (let ((?x37117 (* ?x37116 l_0_12_14)))
 (let ((?x37121 (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_11) ?x37117) (* (* 2.0 l_0_12_106) l_0_12_112))))
 (let ((?x37139 (+ (+ (+ (+ (+ (+ (+ ?x37121 ?x37122) ?x37124) ?x37126) ?x37129) ?x37132) ?x37135) ?x37138)))
 (let ((?x37150 (- (+ (- (+ ?x37139 ?x37141) ?x37144) (* (* 2.0 l_0_12_22) l_0_12_32)) ?x37149)))
 (let ((?x37162 (- (- (- (- ?x37150 ?x37152) ?x37155) ?x37158) (* (* 6.0 l_0_12_49) l_0_12_53))))
 (let ((?x37183 (+ (+ (+ (+ (- (- (- ?x37162 ?x37164) ?x37167) ?x37170) ?x37173) ?x37176) ?x37179) ?x37182)))
 (= (- ?x37183 ?x37185) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37181 (* 6.0 l_0_12_73)))
 (let ((?x37309 (* ?x37181 l_0_12_82)))
 (let ((?x37178 (* 6.0 l_0_12_72)))
 (let ((?x37307 (* ?x37178 l_0_12_81)))
 (let ((?x37175 (* 6.0 l_0_12_71)))
 (let ((?x37305 (* ?x37175 l_0_12_80)))
 (let ((?x37172 (* 6.0 l_0_12_70)))
 (let ((?x37303 (* ?x37172 l_0_12_79)))
 (let ((?x37169 (* 6.0 l_0_12_52)))
 (let ((?x37301 (* ?x37169 l_0_12_61)))
 (let ((?x37166 (* 6.0 l_0_12_51)))
 (let ((?x37299 (* ?x37166 l_0_12_60)))
 (let ((?x37163 (* 6.0 l_0_12_50)))
 (let ((?x37297 (* ?x37163 l_0_12_59)))
 (let ((?x37157 (* 12.0 l_0_12_31)))
 (let ((?x37293 (* ?x37157 l_0_12_40)))
 (let ((?x37154 (* 12.0 l_0_12_30)))
 (let ((?x37291 (* ?x37154 l_0_12_39)))
 (let ((?x37151 (* 12.0 l_0_12_29)))
 (let ((?x37289 (* ?x37151 l_0_12_38)))
 (let ((?x37148 (* 12.0 l_0_12_28)))
 (let ((?x37287 (* ?x37148 l_0_12_37)))
 (let ((?x37282 (* 12.0 l_0_12_18)))
 (let ((?x37283 (* ?x37282 l_0_12_9)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x37280 (* ?x37279 l_0_12_8)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x37277 (* ?x37276 l_0_12_7)))
 (let ((?x37137 (* 2.0 l_0_12_136)))
 (let ((?x37274 (* ?x37137 l_0_12_145)))
 (let ((?x37134 (* 2.0 l_0_12_135)))
 (let ((?x37272 (* ?x37134 l_0_12_144)))
 (let ((?x37131 (* 2.0 l_0_12_134)))
 (let ((?x37270 (* ?x37131 l_0_12_143)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x36798 (* ?x35732 l_0_12_133)))
 (let ((?x37116 (* 12.0 l_0_12_10)))
 (let ((?x37265 (* ?x37116 l_0_12_19)))
 (let ((?x37269 (+ (- (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x37265) ?x36798) (* (* 2.0 l_0_12_133) l_0_12_142))))
 (let ((?x37286 (+ (+ (+ (+ (+ (+ (+ ?x37269 ?x37270) ?x37272) ?x37274) ?x37277) ?x37280) ?x37283) (* (* 2.0 l_0_12_22) l_0_12_37))))
 (let ((?x37296 (- (- (- (- (- ?x37286 ?x37287) ?x37289) ?x37291) ?x37293) (* (* 6.0 l_0_12_49) l_0_12_58))))
 (let ((?x37310 (+ (+ (+ (+ (- (- (- ?x37296 ?x37297) ?x37299) ?x37301) ?x37303) ?x37305) ?x37307) ?x37309)))
 (= ?x37310 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x37380 (* ?x36253 l_0_12_71)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x37378 (* ?x36250 l_0_12_70)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x37376 (* ?x36247 l_0_12_50)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x37374 (* ?x36244 l_0_12_49)))
 (let ((?x35841 (* l_0_12_3 l_0_12_3)))
 (let ((?x36504 (* 12.0 l_0_12_3)))
 (let ((?x36881 (* ?x36504 l_0_12_8)))
 (let ((?x10637 (* l_0_12_24 l_0_12_24)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36873 (* ?x36223 l_0_12_29)))
 (let ((?x10632 (* l_0_12_23 l_0_12_23)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36869 (* ?x36214 l_0_12_28)))
 (let ((?x35816 (* l_0_12_2 l_0_12_2)))
 (let ((?x36477 (* 12.0 l_0_12_2)))
 (let ((?x36861 (* ?x36477 l_0_12_7)))
 (let ((?x37345 (- (* (* (- 2.0) l_0_12_191) l_0_12_196) (* (* 2.0 l_0_12_192) l_0_12_197))))
 (let ((?x37351 (- (- (- (+ ?x37345 ?x36861) ?x35816) (* (* 2.0 l_0_12_212) l_0_12_217)) (* (* 2.0 l_0_12_213) l_0_12_218))))
 (let ((?x37357 (- (- (+ (- ?x37351 ?x36869) ?x10632) (* (* 2.0 l_0_12_233) l_0_12_238)) (* (* 2.0 l_0_12_234) l_0_12_239))))
 (let ((?x37363 (- (- (+ (- ?x37357 ?x36873) ?x10637) (* (* 2.0 l_0_12_254) l_0_12_259)) (* (* 2.0 l_0_12_255) l_0_12_260))))
 (let ((?x37367 (- (- ?x37363 (* (* 2.0 l_0_12_275) l_0_12_280)) (* (* 2.0 l_0_12_276) l_0_12_281))))
 (let ((?x37371 (- (- ?x37367 (* (* 2.0 l_0_12_296) l_0_12_301)) (* (* 2.0 l_0_12_297) l_0_12_302))))
 (= (+ (+ (- (- (- (+ ?x37371 ?x36881) ?x35841) ?x37374) ?x37376) ?x37378) ?x37380) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x37507 (* ?x36677 l_0_12_72)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x37505 (* ?x36674 l_0_12_71)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x37503 (* ?x36671 l_0_12_70)))
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x37380 (* ?x36253 l_0_12_71)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x37378 (* ?x36250 l_0_12_70)))
 (let ((?x36975 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x36972 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x37497 (* ?x36666 l_0_12_51)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x37495 (* ?x36663 l_0_12_50)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x37493 (* ?x36660 l_0_12_49)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x37376 (* ?x36247 l_0_12_50)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x37374 (* ?x36244 l_0_12_49)))
 (let ((?x36959 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x36956 (* ?x36637 l_0_12_30)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x36954 (* ?x36634 l_0_12_29)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x36952 (* ?x36622 l_0_12_28)))
 (let ((?x37442 (- (* (* (- 2.0) l_0_12_193) l_0_12_196) (* (* 2.0 l_0_12_194) l_0_12_197))))
 (let ((?x37447 (- (- ?x37442 (* (* 2.0 l_0_12_195) l_0_12_198)) (* (* 2.0 l_0_12_2) l_0_12_4))))
 (let ((?x37451 (- (- ?x37447 (* (* 2.0 l_0_12_214) l_0_12_217)) (* (* 2.0 l_0_12_215) l_0_12_218))))
 (let ((?x37456 (+ (- ?x37451 (* (* 2.0 l_0_12_216) l_0_12_219)) (* (* 2.0 l_0_12_23) l_0_12_25))))
 (let ((?x37460 (- (- ?x37456 (* (* 2.0 l_0_12_235) l_0_12_238)) (* (* 2.0 l_0_12_236) l_0_12_239))))
 (let ((?x37465 (+ (- ?x37460 (* (* 2.0 l_0_12_237) l_0_12_240)) (* (* 2.0 l_0_12_24) l_0_12_26))))
 (let ((?x37470 (- (- (- ?x37465 ?x36952) (* (* 2.0 l_0_12_256) l_0_12_259)) (* (* 2.0 l_0_12_257) l_0_12_260))))
 (let ((?x37476 (- (- (- (- ?x37470 (* (* 2.0 l_0_12_258) l_0_12_261)) ?x36954) ?x36956) (* (* 2.0 l_0_12_277) l_0_12_280))))
 (let ((?x37480 (- (- ?x37476 (* (* 2.0 l_0_12_278) l_0_12_281)) (* (* 2.0 l_0_12_279) l_0_12_282))))
 (let ((?x37484 (- (- ?x37480 (* (* 2.0 l_0_12_298) l_0_12_301)) (* (* 2.0 l_0_12_299) l_0_12_302))))
 (let ((?x37489 (- (- ?x37484 (* (* 2.0 l_0_12_3) l_0_12_5)) (* (* 2.0 l_0_12_300) l_0_12_303))))
 (let ((?x37499 (+ (- (- (- (+ (+ (+ ?x37489 ?x36959) ?x37374) ?x37376) ?x37493) ?x37495) ?x37497) ?x36972)))
 (= (+ (+ (+ (- (- (+ ?x37499 ?x36975) ?x37378) ?x37380) ?x37503) ?x37505) ?x37507) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37076 (* l_0_12_9 l_0_12_9)))
 (let ((?x37077 (* 6.0 ?x37076)))
 (let ((?x37073 (* l_0_12_8 l_0_12_8)))
 (let ((?x37074 (* 6.0 ?x37073)))
 (let ((?x37058 (* l_0_12_7 l_0_12_7)))
 (let ((?x37059 (* 6.0 ?x37058)))
 (let ((?x37044 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x37586 (* l_0_12_304 l_0_12_304)))
 (let ((?x37584 (* l_0_12_303 l_0_12_303)))
 (let ((?x37582 (* l_0_12_302 l_0_12_302)))
 (let ((?x37580 (* l_0_12_301 l_0_12_301)))
 (let ((?x37041 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x37038 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x37574 (* l_0_12_283 l_0_12_283)))
 (let ((?x37572 (* l_0_12_282 l_0_12_282)))
 (let ((?x37570 (* l_0_12_281 l_0_12_281)))
 (let ((?x37568 (* l_0_12_280 l_0_12_280)))
 (let ((?x37035 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x37565 (* l_0_12_262 l_0_12_262)))
 (let ((?x37563 (* l_0_12_261 l_0_12_261)))
 (let ((?x37561 (* l_0_12_260 l_0_12_260)))
 (let ((?x37559 (* l_0_12_259 l_0_12_259)))
 (let ((?x37557 (* l_0_12_241 l_0_12_241)))
 (let ((?x37555 (* l_0_12_240 l_0_12_240)))
 (let ((?x37551 (* l_0_12_239 l_0_12_239)))
 (let ((?x37549 (* l_0_12_238 l_0_12_238)))
 (let ((?x37545 (* l_0_12_220 l_0_12_220)))
 (let ((?x37543 (* l_0_12_219 l_0_12_219)))
 (let ((?x37541 (* l_0_12_218 l_0_12_218)))
 (let ((?x37539 (* l_0_12_217 l_0_12_217)))
 (let ((?x12496 (* l_0_12_199 l_0_12_199)))
 (let ((?x26681 (* l_0_12_198 l_0_12_198)))
 (let ((?x26682 (* l_0_12_197 l_0_12_197)))
 (let ((?x13422 (* l_0_12_196 l_0_12_196)))
 (let ((?x37021 (* l_0_12_10 l_0_12_10)))
 (let ((?x37022 (* 6.0 ?x37021)))
 (let ((?x37538 (- (- (- (- (- ?x37022 ?x13422) ?x26682) ?x26681) ?x12496) (* (* 2.0 l_0_12_2) l_0_12_7))))
 (let ((?x37548 (+ (- (- (- (- ?x37538 ?x37539) ?x37541) ?x37543) ?x37545) (* (* 2.0 l_0_12_23) l_0_12_28))))
 (let ((?x37556 (- (+ (- (- ?x37548 ?x37549) ?x37551) (* (* 2.0 l_0_12_24) l_0_12_29)) ?x37555)))
 (let ((?x37569 (- (- (- (- (- (- (- ?x37556 ?x37557) ?x37559) ?x37561) ?x37563) ?x37565) ?x37035) ?x37568)))
 (let ((?x37578 (- (- (- (- (- ?x37569 ?x37570) ?x37572) ?x37574) ?x37038) (* (* 2.0 l_0_12_3) l_0_12_8))))
 (let ((?x37591 (- (- (- (- (- (- (- ?x37578 ?x37041) ?x37580) ?x37582) ?x37584) ?x37586) ?x37044) (* (* 1.0 l_0_12_49) l_0_12_49))))
 (let ((?x37597 (- (- ?x37591 (* (* 1.0 l_0_12_50) l_0_12_50)) (* (* 1.0 l_0_12_51) l_0_12_51))))
 (let ((?x37603 (+ (+ (- ?x37597 (* (* 1.0 l_0_12_52) l_0_12_52)) ?x37059) (* 1.0 (* l_0_12_70 l_0_12_70)))))
 (let ((?x37607 (+ (+ ?x37603 (* 1.0 (* l_0_12_71 l_0_12_71))) (* 1.0 (* l_0_12_72 l_0_12_72)))))
 (= (+ (+ (+ ?x37607 (* 1.0 (* l_0_12_73 l_0_12_73))) ?x37074) ?x37077) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x37755 (* ?x36100 l_0_12_92)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x37753 (* ?x36097 l_0_12_91)))
 (let ((?x37750 (* 2.0 l_0_12_73)))
 (let ((?x37751 (* ?x37750 l_0_12_77)))
 (let ((?x37747 (* 2.0 l_0_12_72)))
 (let ((?x37748 (* ?x37747 l_0_12_76)))
 (let ((?x37744 (* 2.0 l_0_12_71)))
 (let ((?x37745 (* ?x37744 l_0_12_75)))
 (let ((?x37741 (* 2.0 l_0_12_70)))
 (let ((?x37742 (* ?x37741 l_0_12_74)))
 (let ((?x37738 (* 2.0 l_0_12_52)))
 (let ((?x37739 (* ?x37738 l_0_12_56)))
 (let ((?x37735 (* 2.0 l_0_12_51)))
 (let ((?x37736 (* ?x37735 l_0_12_55)))
 (let ((?x37732 (* 2.0 l_0_12_50)))
 (let ((?x37733 (* ?x37732 l_0_12_54)))
 (let ((?x37729 (* 2.0 l_0_12_49)))
 (let ((?x37730 (* ?x37729 l_0_12_53)))
 (let ((?x37157 (* 12.0 l_0_12_31)))
 (let ((?x37158 (* ?x37157 l_0_12_35)))
 (let ((?x37154 (* 12.0 l_0_12_30)))
 (let ((?x37155 (* ?x37154 l_0_12_34)))
 (let ((?x37151 (* 12.0 l_0_12_29)))
 (let ((?x37152 (* ?x37151 l_0_12_33)))
 (let ((?x37148 (* 12.0 l_0_12_28)))
 (let ((?x37149 (* ?x37148 l_0_12_32)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x37647 (* ?x35989 l_0_12_176)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x37645 (* ?x35986 l_0_12_175)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x37643 (* ?x35983 l_0_12_155)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x37641 (* ?x35977 l_0_12_154)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x37126 (* ?x36584 l_0_12_9)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x37124 (* ?x36195 l_0_12_8)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x37122 (* ?x36192 l_0_12_7)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x26836 (* ?x35962 l_0_12_113)))
 (let ((?x37116 (* 12.0 l_0_12_10)))
 (let ((?x37117 (* ?x37116 l_0_12_14)))
 (let ((?x10180 (- (+ (+ ?x37117 (* (* 2.0 l_0_12_107) l_0_12_112)) ?x26836) (* (* 2.0 l_0_12_11) l_0_12_2))))
 (let ((?x26856 (+ (+ (- (+ ?x10180 ?x37122) (* (* 2.0 l_0_12_12) l_0_12_3)) ?x37124) ?x37126)))
 (let ((?x37651 (- (- (- (+ (+ ?x26856 ?x37641) ?x37643) ?x37645) ?x37647) (* (* 2.0 l_0_12_196) l_0_12_200))))
 (let ((?x37657 (- (- ?x37651 (* (* 2.0 l_0_12_197) l_0_12_201)) (* (* 2.0 l_0_12_198) l_0_12_202))))
 (let ((?x37663 (- (- ?x37657 (* (* 2.0 l_0_12_199) l_0_12_203)) (* (* 2.0 l_0_12_217) l_0_12_221))))
 (let ((?x37669 (- (- ?x37663 (* (* 2.0 l_0_12_218) l_0_12_222)) (* (* 2.0 l_0_12_219) l_0_12_223))))
 (let ((?x37674 (+ (- ?x37669 (* (* 2.0 l_0_12_220) l_0_12_224)) (* (* 2.0 l_0_12_23) l_0_12_32))))
 (let ((?x37680 (- (- ?x37674 (* (* 2.0 l_0_12_238) l_0_12_242)) (* (* 2.0 l_0_12_239) l_0_12_243))))
 (let ((?x37685 (- (+ ?x37680 (* (* 2.0 l_0_12_24) l_0_12_33)) (* (* 2.0 l_0_12_240) l_0_12_244))))
 (let ((?x37691 (- (- ?x37685 (* (* 2.0 l_0_12_241) l_0_12_245)) (* (* 2.0 l_0_12_259) l_0_12_263))))
 (let ((?x37697 (- (- ?x37691 (* (* 2.0 l_0_12_260) l_0_12_264)) (* (* 2.0 l_0_12_261) l_0_12_265))))
 (let ((?x37704 (- (- (- ?x37697 (* (* 2.0 l_0_12_262) l_0_12_266)) ?x37149) (* (* 2.0 l_0_12_280) l_0_12_284))))
 (let ((?x37710 (- (- ?x37704 (* (* 2.0 l_0_12_281) l_0_12_285)) (* (* 2.0 l_0_12_282) l_0_12_286))))
 (let ((?x37718 (- (- (- (- ?x37710 (* (* 2.0 l_0_12_283) l_0_12_287)) ?x37152) ?x37155) (* (* 2.0 l_0_12_301) l_0_12_305))))
 (let ((?x37724 (- (- ?x37718 (* (* 2.0 l_0_12_302) l_0_12_306)) (* (* 2.0 l_0_12_303) l_0_12_307))))
 (let ((?x37734 (- (- (- (- ?x37724 (* (* 2.0 l_0_12_304) l_0_12_308)) ?x37158) ?x37730) ?x37733)))
 (let ((?x37754 (- (+ (+ (+ (+ (- (- ?x37734 ?x37736) ?x37739) ?x37742) ?x37745) ?x37748) ?x37751) ?x37753)))
 (= (- ?x37754 ?x37755) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37750 (* 2.0 l_0_12_73)))
 (let ((?x37955 (* ?x37750 l_0_12_82)))
 (let ((?x37747 (* 2.0 l_0_12_72)))
 (let ((?x37953 (* ?x37747 l_0_12_81)))
 (let ((?x37744 (* 2.0 l_0_12_71)))
 (let ((?x37951 (* ?x37744 l_0_12_80)))
 (let ((?x37741 (* 2.0 l_0_12_70)))
 (let ((?x37949 (* ?x37741 l_0_12_79)))
 (let ((?x37738 (* 2.0 l_0_12_52)))
 (let ((?x37947 (* ?x37738 l_0_12_61)))
 (let ((?x37735 (* 2.0 l_0_12_51)))
 (let ((?x37945 (* ?x37735 l_0_12_60)))
 (let ((?x37732 (* 2.0 l_0_12_50)))
 (let ((?x37943 (* ?x37732 l_0_12_59)))
 (let ((?x37729 (* 2.0 l_0_12_49)))
 (let ((?x37941 (* ?x37729 l_0_12_58)))
 (let ((?x37157 (* 12.0 l_0_12_31)))
 (let ((?x37293 (* ?x37157 l_0_12_40)))
 (let ((?x37154 (* 12.0 l_0_12_30)))
 (let ((?x37291 (* ?x37154 l_0_12_39)))
 (let ((?x37151 (* 12.0 l_0_12_29)))
 (let ((?x37289 (* ?x37151 l_0_12_38)))
 (let ((?x37148 (* 12.0 l_0_12_28)))
 (let ((?x37287 (* ?x37148 l_0_12_37)))
 (let ((?x37282 (* 12.0 l_0_12_18)))
 (let ((?x37283 (* ?x37282 l_0_12_9)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x37280 (* ?x37279 l_0_12_8)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x37277 (* ?x37276 l_0_12_7)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x36857 (* ?x36856 l_0_12_134)))
 (let ((?x36853 (* 2.0 l_0_12_128)))
 (let ((?x36854 (* ?x36853 l_0_12_133)))
 (let ((?x37116 (* 12.0 l_0_12_10)))
 (let ((?x37265 (* ?x37116 l_0_12_19)))
 (let ((?x37879 (+ (- (- (- ?x37265 ?x36854) ?x36857) (* (* 2.0 l_0_12_16) l_0_12_2)) ?x37277)))
 (let ((?x37886 (- (+ (+ (- ?x37879 (* (* 2.0 l_0_12_17) l_0_12_3)) ?x37280) ?x37283) (* (* 2.0 l_0_12_196) l_0_12_205))))
 (let ((?x37890 (- (- ?x37886 (* (* 2.0 l_0_12_197) l_0_12_206)) (* (* 2.0 l_0_12_198) l_0_12_207))))
 (let ((?x37894 (- (- ?x37890 (* (* 2.0 l_0_12_199) l_0_12_208)) (* (* 2.0 l_0_12_217) l_0_12_226))))
 (let ((?x37898 (- (- ?x37894 (* (* 2.0 l_0_12_218) l_0_12_227)) (* (* 2.0 l_0_12_219) l_0_12_228))))
 (let ((?x37902 (+ (- ?x37898 (* (* 2.0 l_0_12_220) l_0_12_229)) (* (* 2.0 l_0_12_23) l_0_12_37))))
 (let ((?x37906 (- (- ?x37902 (* (* 2.0 l_0_12_238) l_0_12_247)) (* (* 2.0 l_0_12_239) l_0_12_248))))
 (let ((?x37910 (- (+ ?x37906 (* (* 2.0 l_0_12_24) l_0_12_38)) (* (* 2.0 l_0_12_240) l_0_12_249))))
 (let ((?x37914 (- (- ?x37910 (* (* 2.0 l_0_12_241) l_0_12_250)) (* (* 2.0 l_0_12_259) l_0_12_268))))
 (let ((?x37918 (- (- ?x37914 (* (* 2.0 l_0_12_260) l_0_12_269)) (* (* 2.0 l_0_12_261) l_0_12_270))))
 (let ((?x37923 (- (- (- ?x37918 (* (* 2.0 l_0_12_262) l_0_12_271)) ?x37287) (* (* 2.0 l_0_12_280) l_0_12_289))))
 (let ((?x37927 (- (- ?x37923 (* (* 2.0 l_0_12_281) l_0_12_290)) (* (* 2.0 l_0_12_282) l_0_12_291))))
 (let ((?x37933 (- (- (- (- ?x37927 (* (* 2.0 l_0_12_283) l_0_12_292)) ?x37289) ?x37291) (* (* 2.0 l_0_12_301) l_0_12_310))))
 (let ((?x37937 (- (- ?x37933 (* (* 2.0 l_0_12_302) l_0_12_311)) (* (* 2.0 l_0_12_303) l_0_12_312))))
 (let ((?x37944 (- (- (- (- ?x37937 (* (* 2.0 l_0_12_304) l_0_12_313)) ?x37293) ?x37941) ?x37943)))
 (= (+ (+ (+ (+ (- (- ?x37944 ?x37945) ?x37947) ?x37949) ?x37951) ?x37953) ?x37955) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x37507 (* ?x36677 l_0_12_72)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x37505 (* ?x36674 l_0_12_71)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x37503 (* ?x36671 l_0_12_70)))
 (let ((?x36388 (* l_0_12_6 l_0_12_6)))
 (let ((?x36385 (* l_0_12_5 l_0_12_5)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x37497 (* ?x36666 l_0_12_51)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x37495 (* ?x36663 l_0_12_50)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x37493 (* ?x36660 l_0_12_49)))
 (let ((?x36369 (* l_0_12_4 l_0_12_4)))
 (let ((?x11547 (* l_0_12_27 l_0_12_27)))
 (let ((?x27518 (- (+ (+ (* l_0_12_25 l_0_12_25) (* l_0_12_26 l_0_12_26)) ?x11547) ?x36369)))
 (let ((?x38038 (- (- (- (- (+ (+ (+ ?x27518 ?x37493) ?x37495) ?x37497) ?x36385) ?x36388) ?x37503) ?x37505)))
 (= (- ?x38038 ?x37507) 0.0))))))))))))))))))))
(assert
 (let ((?x37070 (* l_0_12_73 l_0_12_73)))
 (let ((?x37067 (* l_0_12_72 l_0_12_72)))
 (let ((?x37064 (* l_0_12_71 l_0_12_71)))
 (let ((?x37061 (* l_0_12_70 l_0_12_70)))
 (let ((?x26169 (* l_0_12_52 l_0_12_52)))
 (let ((?x26160 (* l_0_12_51 l_0_12_51)))
 (let ((?x12732 (* l_0_12_50 l_0_12_50)))
 (let ((?x12777 (* l_0_12_49 l_0_12_49)))
 (let ((?x38057 (+ (* (* 2.0 l_0_12_25) l_0_12_28) (* (* 2.0 l_0_12_26) l_0_12_29))))
 (let ((?x38063 (- (+ ?x38057 (* (* 2.0 l_0_12_27) l_0_12_30)) (* (* 2.0 l_0_12_4) l_0_12_7))))
 (let ((?x38069 (+ (+ (- (+ ?x38063 ?x12777) (* (* 2.0 l_0_12_5) l_0_12_8)) ?x12732) ?x26160)))
 (let ((?x38075 (- (- (- (+ ?x38069 ?x26169) (* (* 2.0 l_0_12_6) l_0_12_9)) ?x37061) ?x37064)))
 (= (- (- ?x38075 ?x37067) ?x37070) 0.0))))))))))))))
(assert
 (let ((?x38153 (* 2.0 l_0_12_90)))
 (let ((?x38154 (* ?x38153 l_0_12_93)))
 (let ((?x38150 (* 2.0 l_0_12_89)))
 (let ((?x38151 (* ?x38150 l_0_12_92)))
 (let ((?x38147 (* 2.0 l_0_12_88)))
 (let ((?x38148 (* ?x38147 l_0_12_91)))
 (let ((?x37750 (* 2.0 l_0_12_73)))
 (let ((?x37751 (* ?x37750 l_0_12_77)))
 (let ((?x37747 (* 2.0 l_0_12_72)))
 (let ((?x37748 (* ?x37747 l_0_12_76)))
 (let ((?x37744 (* 2.0 l_0_12_71)))
 (let ((?x37745 (* ?x37744 l_0_12_75)))
 (let ((?x37741 (* 2.0 l_0_12_70)))
 (let ((?x37742 (* ?x37741 l_0_12_74)))
 (let ((?x37738 (* 2.0 l_0_12_52)))
 (let ((?x37739 (* ?x37738 l_0_12_56)))
 (let ((?x37735 (* 2.0 l_0_12_51)))
 (let ((?x37736 (* ?x37735 l_0_12_55)))
 (let ((?x37732 (* 2.0 l_0_12_50)))
 (let ((?x37733 (* ?x37732 l_0_12_54)))
 (let ((?x37729 (* 2.0 l_0_12_49)))
 (let ((?x37730 (* ?x37729 l_0_12_53)))
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x38131 (* ?x38130 l_0_12_177)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x38128 (* ?x38127 l_0_12_176)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x38125 (* ?x38124 l_0_12_175)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x38122 (* ?x38121 l_0_12_156)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x38119 (* ?x38118 l_0_12_155)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x38116 (* ?x38115 l_0_12_154)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x38108 (* ?x38107 l_0_12_114)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x38105 (* ?x38104 l_0_12_113)))
 (let ((?x38103 (- (* (* 2.0 l_0_12_109) l_0_12_112) (* (* 2.0 l_0_12_11) l_0_12_4))))
 (let ((?x38114 (- (- (+ (+ ?x38103 ?x38105) ?x38108) (* (* 2.0 l_0_12_12) l_0_12_5)) (* (* 2.0 l_0_12_13) l_0_12_6))))
 (let ((?x38134 (+ (- (- (- (+ (+ (+ ?x38114 ?x38116) ?x38119) ?x38122) ?x38125) ?x38128) ?x38131) (* (* 2.0 l_0_12_25) l_0_12_32))))
 (let ((?x38138 (+ (+ ?x38134 (* (* 2.0 l_0_12_26) l_0_12_33)) (* (* 2.0 l_0_12_27) l_0_12_34))))
 (let ((?x38145 (- (- (- (+ (+ (+ (+ ?x38138 ?x37730) ?x37733) ?x37736) ?x37739) ?x37742) ?x37745) ?x37748)))
 (= (- (- (- (- ?x38145 ?x37751) ?x38148) ?x38151) ?x38154) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37750 (* 2.0 l_0_12_73)))
 (let ((?x37955 (* ?x37750 l_0_12_82)))
 (let ((?x37747 (* 2.0 l_0_12_72)))
 (let ((?x37953 (* ?x37747 l_0_12_81)))
 (let ((?x37744 (* 2.0 l_0_12_71)))
 (let ((?x37951 (* ?x37744 l_0_12_80)))
 (let ((?x37741 (* 2.0 l_0_12_70)))
 (let ((?x37949 (* ?x37741 l_0_12_79)))
 (let ((?x37738 (* 2.0 l_0_12_52)))
 (let ((?x37947 (* ?x37738 l_0_12_61)))
 (let ((?x37735 (* 2.0 l_0_12_51)))
 (let ((?x37945 (* ?x37735 l_0_12_60)))
 (let ((?x37732 (* 2.0 l_0_12_50)))
 (let ((?x37943 (* ?x37732 l_0_12_59)))
 (let ((?x37729 (* 2.0 l_0_12_49)))
 (let ((?x37941 (* ?x37729 l_0_12_58)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x36948 (* ?x36947 l_0_12_135)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x12655 (* ?x12651 l_0_12_134)))
 (let ((?x26199 (- (- (- (* (* (- 2.0) l_0_12_130) l_0_12_133) ?x12655) ?x36948) (* (* 2.0 l_0_12_16) l_0_12_4))))
 (let ((?x14255 (- (- ?x26199 (* (* 2.0 l_0_12_17) l_0_12_5)) (* (* 2.0 l_0_12_18) l_0_12_6))))
 (let ((?x27502 (+ (+ ?x14255 (* (* 2.0 l_0_12_25) l_0_12_37)) (* (* 2.0 l_0_12_26) l_0_12_38))))
 (let ((?x14005 (+ (+ (+ (+ ?x27502 (* (* 2.0 l_0_12_27) l_0_12_39)) ?x37941) ?x37943) ?x37945)))
 (= (- (- (- (- (+ ?x14005 ?x37947) ?x37949) ?x37951) ?x37953) ?x37955) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x37076 (* l_0_12_9 l_0_12_9)))
 (let ((?x37073 (* l_0_12_8 l_0_12_8)))
 (let ((?x37058 (* l_0_12_7 l_0_12_7)))
 (let ((?x12727 (* l_0_12_31 l_0_12_31)))
 (let ((?x12723 (* l_0_12_30 l_0_12_30)))
 (let ((?x37089 (* l_0_12_29 l_0_12_29)))
 (let ((?x38202 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_28 l_0_12_28)) ?x37089)))
 (= (- (- (- (+ (+ ?x38202 ?x12723) ?x12727) ?x37058) ?x37073) ?x37076) 0.0)))))))))
(assert
 (let ((?x38272 (* l_0_12_94 l_0_12_94)))
 (let ((?x38270 (* l_0_12_93 l_0_12_93)))
 (let ((?x38268 (* l_0_12_92 l_0_12_92)))
 (let ((?x38266 (* l_0_12_91 l_0_12_91)))
 (let ((?x38252 (* l_0_12_178 l_0_12_178)))
 (let ((?x38250 (* l_0_12_177 l_0_12_177)))
 (let ((?x38248 (* l_0_12_176 l_0_12_176)))
 (let ((?x38246 (* l_0_12_175 l_0_12_175)))
 (let ((?x38244 (* l_0_12_157 l_0_12_157)))
 (let ((?x38242 (* l_0_12_156 l_0_12_156)))
 (let ((?x38240 (* l_0_12_155 l_0_12_155)))
 (let ((?x38238 (* l_0_12_154 l_0_12_154)))
 (let ((?x38232 (* l_0_12_115 l_0_12_115)))
 (let ((?x38230 (* l_0_12_114 l_0_12_114)))
 (let ((?x38228 (* l_0_12_113 l_0_12_113)))
 (let ((?x38226 (* l_0_12_112 l_0_12_112)))
 (let ((?x38225 (- (* (* (- 2.0) l_0_12_10) l_0_12_14) (* (* 2.0 l_0_12_11) l_0_12_7))))
 (let ((?x38235 (- (+ (+ (+ (+ ?x38225 ?x38226) ?x38228) ?x38230) ?x38232) (* (* 2.0 l_0_12_12) l_0_12_8))))
 (let ((?x38243 (+ (+ (+ (- ?x38235 (* (* 2.0 l_0_12_13) l_0_12_9)) ?x38238) ?x38240) ?x38242)))
 (let ((?x38256 (+ (- (- (- (- (+ ?x38243 ?x38244) ?x38246) ?x38248) ?x38250) ?x38252) (* (* 2.0 l_0_12_28) l_0_12_32))))
 (let ((?x38262 (+ (+ ?x38256 (* (* 2.0 l_0_12_29) l_0_12_33)) (* (* 2.0 l_0_12_30) l_0_12_34))))
 (let ((?x38271 (- (- (- (+ ?x38262 (* (* 2.0 l_0_12_31) l_0_12_35)) ?x38266) ?x38268) ?x38270)))
 (= (- ?x38271 ?x38272) 0.0))))))))))))))))))))))))
(assert
 (let ((?x37030 (* l_0_12_136 l_0_12_136)))
 (let ((?x37028 (* l_0_12_135 l_0_12_135)))
 (let ((?x37026 (* l_0_12_134 l_0_12_134)))
 (let ((?x37024 (* l_0_12_133 l_0_12_133)))
 (let ((?x27690 (- (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x37024) ?x37026) ?x37028) ?x37030)))
 (let ((?x27684 (- (- ?x27690 (* (* 2.0 l_0_12_16) l_0_12_7)) (* (* 2.0 l_0_12_17) l_0_12_8))))
 (let ((?x14497 (+ (- ?x27684 (* (* 2.0 l_0_12_18) l_0_12_9)) (* (* 2.0 l_0_12_28) l_0_12_37))))
 (let ((?x38309 (+ (+ ?x14497 (* (* 2.0 l_0_12_29) l_0_12_38)) (* (* 2.0 l_0_12_30) l_0_12_39))))
 (= (+ ?x38309 (* (* 2.0 l_0_12_31) l_0_12_40)) 0.0))))))))))
(assert
 (let ((?x38374 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x38371 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x38368 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x38365 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x11112 (* l_0_12_36 l_0_12_36)))
 (let ((?x25816 (* l_0_12_35 l_0_12_35)))
 (let ((?x25815 (* l_0_12_34 l_0_12_34)))
 (let ((?x11121 (* l_0_12_33 l_0_12_33)))
 (let ((?x11115 (* l_0_12_32 l_0_12_32)))
 (let ((?x38356 (* 2.0 l_0_12_178)))
 (let ((?x38357 (* ?x38356 l_0_12_182)))
 (let ((?x38353 (* 2.0 l_0_12_177)))
 (let ((?x38354 (* ?x38353 l_0_12_181)))
 (let ((?x38350 (* 2.0 l_0_12_176)))
 (let ((?x38351 (* ?x38350 l_0_12_180)))
 (let ((?x38347 (* 2.0 l_0_12_175)))
 (let ((?x38348 (* ?x38347 l_0_12_179)))
 (let ((?x38344 (* 2.0 l_0_12_157)))
 (let ((?x38345 (* ?x38344 l_0_12_161)))
 (let ((?x38341 (* 2.0 l_0_12_156)))
 (let ((?x38342 (* ?x38341 l_0_12_160)))
 (let ((?x38338 (* 2.0 l_0_12_155)))
 (let ((?x38339 (* ?x38338 l_0_12_159)))
 (let ((?x38335 (* 2.0 l_0_12_154)))
 (let ((?x38336 (* ?x38335 l_0_12_158)))
 (let ((?x35980 (* l_0_12_15 l_0_12_15)))
 (let ((?x35974 (* l_0_12_14 l_0_12_14)))
 (let ((?x35971 (* l_0_12_13 l_0_12_13)))
 (let ((?x35968 (* l_0_12_12 l_0_12_12)))
 (let ((?x38328 (* 2.0 l_0_12_115)))
 (let ((?x38329 (* ?x38328 l_0_12_119)))
 (let ((?x38325 (* 2.0 l_0_12_114)))
 (let ((?x38326 (* ?x38325 l_0_12_118)))
 (let ((?x38322 (* 2.0 l_0_12_113)))
 (let ((?x38323 (* ?x38322 l_0_12_117)))
 (let ((?x38321 (+ (* (- l_0_12_11) l_0_12_11) (* (* 2.0 l_0_12_112) l_0_12_116))))
 (let ((?x38334 (- (- (- (- (+ (+ (+ ?x38321 ?x38323) ?x38326) ?x38329) ?x35968) ?x35971) ?x35974) ?x35980)))
 (let ((?x38355 (- (- (- (+ (+ (+ (+ ?x38334 ?x38336) ?x38339) ?x38342) ?x38345) ?x38348) ?x38351) ?x38354)))
 (let ((?x38366 (- (+ (+ (+ (+ (+ (- ?x38355 ?x38357) ?x11115) ?x11121) ?x25815) ?x25816) ?x11112) ?x38365)))
 (= (- (- (- ?x38366 ?x38368) ?x38371) ?x38374) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38356 (* 2.0 l_0_12_178)))
 (let ((?x38464 (* ?x38356 l_0_12_187)))
 (let ((?x38353 (* 2.0 l_0_12_177)))
 (let ((?x38462 (* ?x38353 l_0_12_186)))
 (let ((?x38350 (* 2.0 l_0_12_176)))
 (let ((?x38460 (* ?x38350 l_0_12_185)))
 (let ((?x38347 (* 2.0 l_0_12_175)))
 (let ((?x38458 (* ?x38347 l_0_12_184)))
 (let ((?x38344 (* 2.0 l_0_12_157)))
 (let ((?x38456 (* ?x38344 l_0_12_166)))
 (let ((?x38341 (* 2.0 l_0_12_156)))
 (let ((?x38454 (* ?x38341 l_0_12_165)))
 (let ((?x38338 (* 2.0 l_0_12_155)))
 (let ((?x38452 (* ?x38338 l_0_12_164)))
 (let ((?x38335 (* 2.0 l_0_12_154)))
 (let ((?x38450 (* ?x38335 l_0_12_163)))
 (let ((?x37137 (* 2.0 l_0_12_136)))
 (let ((?x37138 (* ?x37137 l_0_12_140)))
 (let ((?x37134 (* 2.0 l_0_12_135)))
 (let ((?x37135 (* ?x37134 l_0_12_139)))
 (let ((?x37131 (* 2.0 l_0_12_134)))
 (let ((?x37132 (* ?x37131 l_0_12_138)))
 (let ((?x37128 (* 2.0 l_0_12_133)))
 (let ((?x37129 (* ?x37128 l_0_12_137)))
 (let ((?x38328 (* 2.0 l_0_12_115)))
 (let ((?x38434 (* ?x38328 l_0_12_124)))
 (let ((?x38325 (* 2.0 l_0_12_114)))
 (let ((?x38432 (* ?x38325 l_0_12_123)))
 (let ((?x38322 (* 2.0 l_0_12_113)))
 (let ((?x38430 (* ?x38322 l_0_12_122)))
 (let ((?x38319 (* 2.0 l_0_12_112)))
 (let ((?x38428 (* ?x38319 l_0_12_121)))
 (let ((?x38423 (* 2.0 l_0_12_103)))
 (let ((?x38424 (* ?x38423 l_0_12_94)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x38421 (* ?x38420 l_0_12_93)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x27806 (* ?x27809 l_0_12_92)))
 (let ((?x38427 (- (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_91) ?x27806) ?x38421) ?x38424) (* (* 2.0 l_0_12_11) l_0_12_16))))
 (let ((?x38437 (- (+ (+ (+ (+ ?x38427 ?x38428) ?x38430) ?x38432) ?x38434) (* (* 2.0 l_0_12_12) l_0_12_17))))
 (let ((?x38442 (- (- (- (- ?x38437 (* (* 2.0 l_0_12_13) l_0_12_18)) ?x37129) ?x37132) ?x37135)))
 (let ((?x38449 (- (- (- ?x38442 ?x37138) (* (* 2.0 l_0_12_14) l_0_12_19)) (* (* 2.0 l_0_12_15) l_0_12_20))))
 (let ((?x38463 (- (- (- (+ (+ (+ (+ ?x38449 ?x38450) ?x38452) ?x38454) ?x38456) ?x38458) ?x38460) ?x38462)))
 (let ((?x38471 (+ (+ (- ?x38463 ?x38464) (* (* 2.0 l_0_12_32) l_0_12_37)) (* (* 2.0 l_0_12_33) l_0_12_38))))
 (let ((?x38477 (+ (+ ?x38471 (* (* 2.0 l_0_12_34) l_0_12_39)) (* (* 2.0 l_0_12_35) l_0_12_40))))
 (= (+ ?x38477 (* (* 2.0 l_0_12_36) l_0_12_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38551 (* l_0_12_42 l_0_12_42)))
 (let ((?x38549 (* l_0_12_41 l_0_12_41)))
 (let ((?x38547 (* l_0_12_40 l_0_12_40)))
 (let ((?x38545 (* l_0_12_39 l_0_12_39)))
 (let ((?x38543 (* l_0_12_38 l_0_12_38)))
 (let ((?x38541 (* l_0_12_37 l_0_12_37)))
 (let ((?x38539 (* l_0_12_21 l_0_12_21)))
 (let ((?x38537 (* l_0_12_20 l_0_12_20)))
 (let ((?x38535 (* l_0_12_19 l_0_12_19)))
 (let ((?x38533 (* l_0_12_18 l_0_12_18)))
 (let ((?x38531 (* l_0_12_17 l_0_12_17)))
 (let ((?x38529 (* l_0_12_16 l_0_12_16)))
 (let ((?x37137 (* 2.0 l_0_12_136)))
 (let ((?x37274 (* ?x37137 l_0_12_145)))
 (let ((?x37134 (* 2.0 l_0_12_135)))
 (let ((?x37272 (* ?x37134 l_0_12_144)))
 (let ((?x37131 (* 2.0 l_0_12_134)))
 (let ((?x37270 (* ?x37131 l_0_12_143)))
 (let ((?x38530 (- (- (- (- (* (* (- 2.0) l_0_12_133) l_0_12_142) ?x37270) ?x37272) ?x37274) ?x38529)))
 (let ((?x38544 (+ (+ (- (- (- (- (- ?x38530 ?x38531) ?x38533) ?x38535) ?x38537) ?x38539) ?x38541) ?x38543)))
 (= (+ (+ (+ (+ ?x38544 ?x38545) ?x38547) ?x38549) ?x38551) 0.0))))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38589 (* ?x36816 l_0_12_68)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38587 (* ?x36813 l_0_12_67)))
 (let ((?x35692 (* l_0_12_64 l_0_12_64)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38584 (* ?x35689 l_0_12_67)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38582 (* ?x36808 l_0_12_47)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38580 (* ?x36805 l_0_12_46)))
 (let ((?x10550 (* l_0_12_43 l_0_12_43)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38577 (* ?x35683 l_0_12_46)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38575 (* ?x35739 l_0_12_25)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x14733 (* ?x10556 l_0_12_4)))
 (let ((?x38579 (+ (- (- (+ ?x14733 (* (* 2.0 l_0_12_127) l_0_12_130)) ?x38575) ?x38577) ?x10550)))
 (= (+ (+ (- (+ (- (- ?x38579 ?x38580) ?x38582) ?x38584) ?x35692) ?x38587) ?x38589) 0.0)))))))))))))))))))))
(assert
 (let ((?x38644 (* l_0_12_85 l_0_12_85)))
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38642 (* ?x36816 l_0_12_75)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38640 (* ?x36813 l_0_12_74)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38638 (* ?x35689 l_0_12_74)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38636 (* ?x36808 l_0_12_54)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38634 (* ?x36805 l_0_12_53)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38632 (* ?x35683 l_0_12_53)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38630 (* ?x35739 l_0_12_32)))
 (let ((?x38628 (* l_0_12_169 l_0_12_169)))
 (let ((?x38626 (* l_0_12_148 l_0_12_148)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x38624 (* ?x35732 l_0_12_137)))
 (let ((?x38625 (+ (+ (* (* 12.0 l_0_12_1) l_0_12_11) (* l_0_12_106 l_0_12_106)) ?x38624)))
 (let ((?x38639 (+ (- (- (- (- (- (+ ?x38625 ?x38626) ?x38628) ?x38630) ?x38632) ?x38634) ?x38636) ?x38638)))
 (= (- (+ (+ ?x38639 ?x38640) ?x38642) ?x38644) 0.0)))))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38698 (* ?x36816 l_0_12_80)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38696 (* ?x36813 l_0_12_79)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38694 (* ?x35689 l_0_12_79)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38692 (* ?x36808 l_0_12_59)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38690 (* ?x36805 l_0_12_58)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38688 (* ?x35683 l_0_12_58)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38686 (* ?x35739 l_0_12_37)))
 (let ((?x35670 (* l_0_12_127 l_0_12_127)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x38682 (* ?x10556 l_0_12_16)))
 (let ((?x38689 (- (- (- (+ ?x38682 (* (* 2.0 l_0_12_127) l_0_12_142)) ?x35670) ?x38686) ?x38688)))
 (= (+ (+ (+ (- (- ?x38689 ?x38690) ?x38692) ?x38694) ?x38696) ?x38698) 0.0))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38589 (* ?x36816 l_0_12_68)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38587 (* ?x36813 l_0_12_67)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38735 (* ?x35849 l_0_12_67)))
 (let ((?x35850 (* ?x35849 l_0_12_65)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38582 (* ?x36808 l_0_12_47)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38580 (* ?x36805 l_0_12_46)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38730 (* ?x35844 l_0_12_46)))
 (let ((?x35845 (* ?x35844 l_0_12_44)))
 (let ((?x36504 (* 12.0 l_0_12_3)))
 (let ((?x36505 (* ?x36504 l_0_12_5)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36490 (* ?x36223 l_0_12_26)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36484 (* ?x36214 l_0_12_25)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38575 (* ?x35739 l_0_12_25)))
 (let ((?x36477 (* 12.0 l_0_12_2)))
 (let ((?x36478 (* ?x36477 l_0_12_4)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x28069 (* ?x36856 l_0_12_131)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x14733 (* ?x10556 l_0_12_4)))
 (let ((?x28097 (- (+ (+ ?x14733 (* (* 2.0 l_0_12_128) l_0_12_130)) ?x28069) (* (* 2.0 l_0_12_190) l_0_12_193))))
 (let ((?x28128 (- (- (- (+ ?x28097 ?x36478) (* (* 2.0 l_0_12_211) l_0_12_214)) ?x38575) ?x36484)))
 (let ((?x38723 (- (- (- ?x28128 (* (* 2.0 l_0_12_232) l_0_12_235)) ?x36490) (* (* 2.0 l_0_12_253) l_0_12_256))))
 (let ((?x38727 (- (- ?x38723 (* (* 2.0 l_0_12_274) l_0_12_277)) (* (* 2.0 l_0_12_295) l_0_12_298))))
 (let ((?x38736 (+ (- (- (- (- (+ (+ ?x38727 ?x36505) ?x35845) ?x38730) ?x38580) ?x38582) ?x35850) ?x38735)))
 (= (+ (+ ?x38736 ?x38587) ?x38589) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x38782 (* ?x37184 l_0_12_86)))
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38642 (* ?x36816 l_0_12_75)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38640 (* ?x36813 l_0_12_74)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38778 (* ?x35849 l_0_12_74)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38636 (* ?x36808 l_0_12_54)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38634 (* ?x36805 l_0_12_53)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38774 (* ?x35844 l_0_12_53)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x36224 (* ?x36223 l_0_12_33)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x36215 (* ?x36214 l_0_12_32)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38630 (* ?x35739 l_0_12_32)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x14809 (* ?x37143 l_0_12_170)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x14810 (* ?x37140 l_0_12_149)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x28247 (* ?x36856 l_0_12_138)))
 (let ((?x36853 (* 2.0 l_0_12_128)))
 (let ((?x28251 (* ?x36853 l_0_12_137)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x36196 (* ?x36195 l_0_12_3)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x36193 (* ?x36192 l_0_12_2)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x38621 (* ?x10556 l_0_12_11)))
 (let ((?x26667 (+ (+ (+ (+ ?x38621 (* (* 2.0 l_0_12_106) l_0_12_107)) ?x36193) ?x36196) ?x28251)))
 (let ((?x38760 (- (- (+ (+ ?x26667 ?x28247) ?x14810) ?x14809) (* (* 2.0 l_0_12_190) l_0_12_200))))
 (let ((?x38766 (- (- (- (- ?x38760 (* (* 2.0 l_0_12_211) l_0_12_221)) ?x38630) ?x36215) (* (* 2.0 l_0_12_232) l_0_12_242))))
 (let ((?x38771 (- (- (- ?x38766 ?x36224) (* (* 2.0 l_0_12_253) l_0_12_263)) (* (* 2.0 l_0_12_274) l_0_12_284))))
 (let ((?x38777 (- (- (- (- ?x38771 (* (* 2.0 l_0_12_295) l_0_12_305)) ?x38774) ?x38634) ?x38636)))
 (= (- (+ (+ (+ ?x38777 ?x38778) ?x38640) ?x38642) ?x38782) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36816 (* 6.0 l_0_12_66)))
 (let ((?x38698 (* ?x36816 l_0_12_80)))
 (let ((?x36813 (* 6.0 l_0_12_65)))
 (let ((?x38696 (* ?x36813 l_0_12_79)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38839 (* ?x35849 l_0_12_79)))
 (let ((?x36808 (* 6.0 l_0_12_45)))
 (let ((?x38692 (* ?x36808 l_0_12_59)))
 (let ((?x36805 (* 6.0 l_0_12_44)))
 (let ((?x38690 (* ?x36805 l_0_12_58)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38835 (* ?x35844 l_0_12_58)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x38827 (* ?x36223 l_0_12_38)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x38823 (* ?x36214 l_0_12_37)))
 (let ((?x35739 (* 12.0 l_0_12_22)))
 (let ((?x38686 (* ?x35739 l_0_12_37)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x38816 (* ?x37279 l_0_12_3)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x38814 (* ?x37276 l_0_12_2)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x38812 (* ?x36856 l_0_12_143)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x35733 (* ?x35732 l_0_12_128)))
 (let ((?x10556 (* 12.0 l_0_12_1)))
 (let ((?x38682 (* ?x10556 l_0_12_16)))
 (let ((?x38815 (+ (+ (+ (- ?x38682 ?x35733) (* (* 2.0 l_0_12_128) l_0_12_142)) ?x38812) ?x38814)))
 (let ((?x38821 (- (- (+ ?x38815 ?x38816) (* (* 2.0 l_0_12_190) l_0_12_205)) (* (* 2.0 l_0_12_211) l_0_12_226))))
 (let ((?x38828 (- (- (- (- ?x38821 ?x38686) ?x38823) (* (* 2.0 l_0_12_232) l_0_12_247)) ?x38827)))
 (let ((?x38832 (- (- ?x38828 (* (* 2.0 l_0_12_253) l_0_12_268)) (* (* 2.0 l_0_12_274) l_0_12_289))))
 (let ((?x38838 (- (- (- (- ?x38832 (* (* 2.0 l_0_12_295) l_0_12_310)) ?x38835) ?x38690) ?x38692)))
 (= (+ (+ (+ ?x38838 ?x38839) ?x38696) ?x38698) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36401 (* l_0_12_69 l_0_12_69)))
 (let ((?x38901 (* 3.0 ?x36401)))
 (let ((?x36398 (* l_0_12_68 l_0_12_68)))
 (let ((?x38899 (* 3.0 ?x36398)))
 (let ((?x36395 (* l_0_12_67 l_0_12_67)))
 (let ((?x38897 (* 3.0 ?x36395)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38735 (* ?x35849 l_0_12_67)))
 (let ((?x36388 (* l_0_12_6 l_0_12_6)))
 (let ((?x36389 (* 6.0 ?x36388)))
 (let ((?x36385 (* l_0_12_5 l_0_12_5)))
 (let ((?x36386 (* 6.0 ?x36385)))
 (let ((?x38892 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x38889 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38730 (* ?x35844 l_0_12_46)))
 (let ((?x36369 (* l_0_12_4 l_0_12_4)))
 (let ((?x36370 (* 6.0 ?x36369)))
 (let ((?x36355 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x36352 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x36343 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x38878 (* l_0_12_132 l_0_12_132)))
 (let ((?x38879 (+ (+ (* l_0_12_130 l_0_12_130) (* l_0_12_131 l_0_12_131)) ?x38878)))
 (let ((?x38887 (- (+ (+ (- (- (- ?x38879 ?x36343) ?x36352) ?x36355) ?x36370) ?x38730) (* (* 3.0 l_0_12_46) l_0_12_46))))
 (let ((?x38900 (+ (+ (- (+ (+ (- (- ?x38887 ?x38889) ?x38892) ?x36386) ?x36389) ?x38735) ?x38897) ?x38899)))
 (= (+ ?x38900 ?x38901) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x38943 (* ?x37184 l_0_12_88)))
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x38941 (* ?x36984 l_0_12_76)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x38939 (* ?x36981 l_0_12_75)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x38937 (* ?x36978 l_0_12_74)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38778 (* ?x35849 l_0_12_74)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x38934 (* ?x36968 l_0_12_55)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x38932 (* ?x36965 l_0_12_54)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38774 (* ?x35844 l_0_12_53)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x36638 (* ?x36637 l_0_12_34)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x36635 (* ?x36634 l_0_12_33)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x36623 (* ?x36622 l_0_12_32)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x38924 (* ?x37143 l_0_12_172)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x38922 (* ?x37140 l_0_12_151)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x38920 (* ?x36947 l_0_12_139)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x38918 (* ?x12651 l_0_12_138)))
 (let ((?x26015 (* 2.0 l_0_12_130)))
 (let ((?x38916 (* ?x26015 l_0_12_137)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x36585 (* ?x36584 l_0_12_6)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x36582 (* ?x36195 l_0_12_5)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x36580 (* ?x36192 l_0_12_4)))
 (let ((?x38917 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_109) ?x36580) ?x36582) ?x36585) ?x38916)))
 (let ((?x38928 (- (- (- (- (+ (+ (+ ?x38917 ?x38918) ?x38920) ?x38922) ?x38924) ?x36623) ?x36635) ?x36638)))
 (let ((?x38935 (- (- (- (+ ?x38928 ?x38774) (* (* 6.0 l_0_12_46) l_0_12_53)) ?x38932) ?x38934)))
 (= (- (+ (+ (+ (- ?x38935 ?x38778) ?x38937) ?x38939) ?x38941) ?x38943) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x39007 (* ?x36984 l_0_12_81)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x39005 (* ?x36981 l_0_12_80)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x39003 (* ?x36978 l_0_12_79)))
 (let ((?x35849 (* 2.0 l_0_12_64)))
 (let ((?x38839 (* ?x35849 l_0_12_79)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x39000 (* ?x36968 l_0_12_60)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x38998 (* ?x36965 l_0_12_59)))
 (let ((?x35844 (* 2.0 l_0_12_43)))
 (let ((?x38835 (* ?x35844 l_0_12_58)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x38993 (* ?x36637 l_0_12_39)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x38991 (* ?x36634 l_0_12_38)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x38989 (* ?x36622 l_0_12_37)))
 (let ((?x37282 (* 12.0 l_0_12_18)))
 (let ((?x38987 (* ?x37282 l_0_12_6)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x38985 (* ?x37279 l_0_12_5)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x38983 (* ?x37276 l_0_12_4)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x38981 (* ?x36947 l_0_12_144)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x38979 (* ?x12651 l_0_12_143)))
 (let ((?x38978 (+ (* (* (- 2.0) l_0_12_127) l_0_12_130) (* (* 2.0 l_0_12_130) l_0_12_142))))
 (let ((?x38992 (- (- (+ (+ (+ (+ (+ ?x38978 ?x38979) ?x38981) ?x38983) ?x38985) ?x38987) ?x38989) ?x38991)))
 (let ((?x38999 (- (- (+ (- ?x38992 ?x38993) ?x38835) (* (* 6.0 l_0_12_46) l_0_12_58)) ?x38998)))
 (= (+ (+ (+ (- (- ?x38999 ?x39000) ?x38839) ?x39003) ?x39005) ?x39007) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x39093 (* ?x37184 l_0_12_95)))
 (let ((?x36094 (* l_0_12_78 l_0_12_78)))
 (let ((?x39091 (* 3.0 ?x36094)))
 (let ((?x36091 (* l_0_12_77 l_0_12_77)))
 (let ((?x39089 (* 3.0 ?x36091)))
 (let ((?x36088 (* l_0_12_76 l_0_12_76)))
 (let ((?x39087 (* 3.0 ?x36088)))
 (let ((?x36085 (* l_0_12_75 l_0_12_75)))
 (let ((?x39085 (* 3.0 ?x36085)))
 (let ((?x36082 (* l_0_12_74 l_0_12_74)))
 (let ((?x39083 (* 3.0 ?x36082)))
 (let ((?x39081 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x39078 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x39075 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x39072 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x36065 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x36062 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x36059 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x36056 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x36053 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x39061 (* ?x37143 l_0_12_179)))
 (let ((?x35980 (* l_0_12_15 l_0_12_15)))
 (let ((?x35981 (* 6.0 ?x35980)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x39058 (* ?x37140 l_0_12_158)))
 (let ((?x39056 (* l_0_12_141 l_0_12_141)))
 (let ((?x39054 (* l_0_12_140 l_0_12_140)))
 (let ((?x35974 (* l_0_12_14 l_0_12_14)))
 (let ((?x35975 (* 6.0 ?x35974)))
 (let ((?x39051 (* l_0_12_139 l_0_12_139)))
 (let ((?x39049 (* l_0_12_138 l_0_12_138)))
 (let ((?x39047 (* l_0_12_137 l_0_12_137)))
 (let ((?x35971 (* l_0_12_13 l_0_12_13)))
 (let ((?x35972 (* 6.0 ?x35971)))
 (let ((?x35968 (* l_0_12_12 l_0_12_12)))
 (let ((?x35969 (* 6.0 ?x35968)))
 (let ((?x35965 (* l_0_12_11 l_0_12_11)))
 (let ((?x35966 (* 6.0 ?x35965)))
 (let ((?x39048 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_116) ?x35966) ?x35969) ?x35972) ?x39047)))
 (let ((?x39060 (+ (+ (+ (+ (+ (+ (+ ?x39048 ?x39049) ?x39051) ?x35975) ?x39054) ?x39056) ?x39058) ?x35981)))
 (let ((?x39070 (- (- (- (- (- (- (- ?x39060 ?x39061) ?x36053) ?x36056) ?x36059) ?x36062) ?x36065) (* (* 3.0 l_0_12_53) l_0_12_53))))
 (let ((?x39088 (+ (+ (+ (- (- (- (- ?x39070 ?x39072) ?x39075) ?x39078) ?x39081) ?x39083) ?x39085) ?x39087)))
 (= (- (+ (+ ?x39088 ?x39089) ?x39091) ?x39093) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39197 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39194 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39191 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39188 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39185 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x39182 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39179 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39176 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39173 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x39167 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x39164 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x39161 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x39158 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x39155 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x39152 (* ?x37143 l_0_12_184)))
 (let ((?x39150 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x39147 (* ?x37140 l_0_12_163)))
 (let ((?x39145 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x39142 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x39139 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x39136 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x39133 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x39130 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x39127 (* ?x36584 l_0_12_18)))
 (let ((?x35732 (* 2.0 l_0_12_127)))
 (let ((?x38624 (* ?x35732 l_0_12_137)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x39124 (* ?x36195 l_0_12_17)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x39122 (* ?x36192 l_0_12_16)))
 (let ((?x37119 (* 2.0 l_0_12_106)))
 (let ((?x39120 (* ?x37119 l_0_12_121)))
 (let ((?x39126 (- (+ (+ (+ (* (* (- 2.0) l_0_12_100) l_0_12_85) ?x39120) ?x39122) ?x39124) ?x38624)))
 (let ((?x39146 (+ (+ (+ (+ (+ (+ (+ ?x39126 ?x39127) ?x39130) ?x39133) ?x39136) ?x39139) ?x39142) ?x39145)))
 (let ((?x39165 (- (- (- (- (- (+ (+ ?x39146 ?x39147) ?x39150) ?x39152) ?x39155) ?x39158) ?x39161) ?x39164)))
 (let ((?x39177 (- (- (- (- ?x39165 ?x39167) (* (* 6.0 l_0_12_53) l_0_12_58)) ?x39173) ?x39176)))
 (let ((?x39198 (+ (+ (+ (+ (+ (- (- ?x39177 ?x39179) ?x39182) ?x39185) ?x39188) ?x39191) ?x39194) ?x39197)))
 (= ?x39198 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39330 (* l_0_12_84 l_0_12_84)))
 (let ((?x39331 (* 3.0 ?x39330)))
 (let ((?x39327 (* l_0_12_83 l_0_12_83)))
 (let ((?x39328 (* 3.0 ?x39327)))
 (let ((?x39324 (* l_0_12_82 l_0_12_82)))
 (let ((?x39325 (* 3.0 ?x39324)))
 (let ((?x39321 (* l_0_12_81 l_0_12_81)))
 (let ((?x39322 (* 3.0 ?x39321)))
 (let ((?x39318 (* l_0_12_80 l_0_12_80)))
 (let ((?x39319 (* 3.0 ?x39318)))
 (let ((?x39315 (* l_0_12_79 l_0_12_79)))
 (let ((?x39316 (* 3.0 ?x39315)))
 (let ((?x39313 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x39310 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x39307 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x39304 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x39301 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x39295 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x39292 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x39289 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x39286 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x39283 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x39280 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x38539 (* l_0_12_21 l_0_12_21)))
 (let ((?x39277 (* 6.0 ?x38539)))
 (let ((?x38537 (* l_0_12_20 l_0_12_20)))
 (let ((?x39275 (* 6.0 ?x38537)))
 (let ((?x38535 (* l_0_12_19 l_0_12_19)))
 (let ((?x39273 (* 6.0 ?x38535)))
 (let ((?x38533 (* l_0_12_18 l_0_12_18)))
 (let ((?x39271 (* 6.0 ?x38533)))
 (let ((?x38531 (* l_0_12_17 l_0_12_17)))
 (let ((?x39269 (* 6.0 ?x38531)))
 (let ((?x38529 (* l_0_12_16 l_0_12_16)))
 (let ((?x39267 (* 6.0 ?x38529)))
 (let ((?x39265 (* l_0_12_147 l_0_12_147)))
 (let ((?x39263 (* l_0_12_146 l_0_12_146)))
 (let ((?x39261 (* l_0_12_145 l_0_12_145)))
 (let ((?x39259 (* l_0_12_144 l_0_12_144)))
 (let ((?x39257 (* l_0_12_143 l_0_12_143)))
 (let ((?x39255 (* l_0_12_142 l_0_12_142)))
 (let ((?x39262 (+ (+ (+ (+ (* (* (- 2.0) l_0_12_127) l_0_12_142) ?x39255) ?x39257) ?x39259) ?x39261)))
 (let ((?x39276 (+ (+ (+ (+ (+ (+ (+ ?x39262 ?x39263) ?x39265) ?x39267) ?x39269) ?x39271) ?x39273) ?x39275)))
 (let ((?x39296 (- (- (- (- (- (- (+ ?x39276 ?x39277) ?x39280) ?x39283) ?x39286) ?x39289) ?x39292) ?x39295)))
 (let ((?x39308 (- (- (- (- ?x39296 (* (* 3.0 l_0_12_58) l_0_12_58)) ?x39301) ?x39304) ?x39307)))
 (let ((?x39329 (+ (+ (+ (+ (+ (- (- ?x39308 ?x39310) ?x39313) ?x39316) ?x39319) ?x39322) ?x39325) ?x39328)))
 (= (+ ?x39329 ?x39331) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x39416 (* ?x36253 l_0_12_80)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x39414 (* ?x36250 l_0_12_79)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x39412 (* ?x36247 l_0_12_59)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x39410 (* ?x36244 l_0_12_58)))
 (let ((?x36223 (* 12.0 l_0_12_24)))
 (let ((?x38827 (* ?x36223 l_0_12_38)))
 (let ((?x36214 (* 12.0 l_0_12_23)))
 (let ((?x38823 (* ?x36214 l_0_12_37)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x38816 (* ?x37279 l_0_12_3)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x38814 (* ?x37276 l_0_12_2)))
 (let ((?x39382 (+ (- (* (- l_0_12_128) l_0_12_128) (* l_0_12_129 l_0_12_129)) ?x38814)))
 (let ((?x39387 (- (- (+ ?x39382 ?x38816) (* (* 2.0 l_0_12_191) l_0_12_205)) (* (* 2.0 l_0_12_192) l_0_12_206))))
 (let ((?x39391 (- (- ?x39387 (* (* 2.0 l_0_12_212) l_0_12_226)) (* (* 2.0 l_0_12_213) l_0_12_227))))
 (let ((?x39396 (- (- (- ?x39391 ?x38823) (* (* 2.0 l_0_12_233) l_0_12_247)) (* (* 2.0 l_0_12_234) l_0_12_248))))
 (let ((?x39401 (- (- (- ?x39396 ?x38827) (* (* 2.0 l_0_12_254) l_0_12_268)) (* (* 2.0 l_0_12_255) l_0_12_269))))
 (let ((?x39405 (- (- ?x39401 (* (* 2.0 l_0_12_275) l_0_12_289)) (* (* 2.0 l_0_12_276) l_0_12_290))))
 (let ((?x39409 (- (- ?x39405 (* (* 2.0 l_0_12_296) l_0_12_310)) (* (* 2.0 l_0_12_297) l_0_12_311))))
 (= (+ (+ (- (- ?x39409 ?x39410) ?x39412) ?x39414) ?x39416) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x39515 (* ?x36677 l_0_12_81)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x39513 (* ?x36674 l_0_12_80)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x39511 (* ?x36671 l_0_12_79)))
 (let ((?x36253 (* 2.0 l_0_12_66)))
 (let ((?x39416 (* ?x36253 l_0_12_80)))
 (let ((?x36250 (* 2.0 l_0_12_65)))
 (let ((?x39414 (* ?x36250 l_0_12_79)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x39507 (* ?x36666 l_0_12_60)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x39505 (* ?x36663 l_0_12_59)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x39503 (* ?x36660 l_0_12_58)))
 (let ((?x36247 (* 2.0 l_0_12_45)))
 (let ((?x39412 (* ?x36247 l_0_12_59)))
 (let ((?x36244 (* 2.0 l_0_12_44)))
 (let ((?x39410 (* ?x36244 l_0_12_58)))
 (let ((?x36637 (* 12.0 l_0_12_27)))
 (let ((?x38993 (* ?x36637 l_0_12_39)))
 (let ((?x36634 (* 12.0 l_0_12_26)))
 (let ((?x38991 (* ?x36634 l_0_12_38)))
 (let ((?x36622 (* 12.0 l_0_12_25)))
 (let ((?x38989 (* ?x36622 l_0_12_37)))
 (let ((?x37282 (* 12.0 l_0_12_18)))
 (let ((?x38987 (* ?x37282 l_0_12_6)))
 (let ((?x37279 (* 12.0 l_0_12_17)))
 (let ((?x38985 (* ?x37279 l_0_12_5)))
 (let ((?x37276 (* 12.0 l_0_12_16)))
 (let ((?x38983 (* ?x37276 l_0_12_4)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x28069 (* ?x36856 l_0_12_131)))
 (let ((?x39461 (+ (+ (+ (- (* (* (- 2.0) l_0_12_128) l_0_12_130) ?x28069) ?x38983) ?x38985) ?x38987)))
 (let ((?x39465 (- (- ?x39461 (* (* 2.0 l_0_12_193) l_0_12_205)) (* (* 2.0 l_0_12_194) l_0_12_206))))
 (let ((?x39469 (- (- ?x39465 (* (* 2.0 l_0_12_195) l_0_12_207)) (* (* 2.0 l_0_12_214) l_0_12_226))))
 (let ((?x39473 (- (- ?x39469 (* (* 2.0 l_0_12_215) l_0_12_227)) (* (* 2.0 l_0_12_216) l_0_12_228))))
 (let ((?x39477 (- (- ?x39473 (* (* 2.0 l_0_12_235) l_0_12_247)) (* (* 2.0 l_0_12_236) l_0_12_248))))
 (let ((?x39482 (- (- (- ?x39477 (* (* 2.0 l_0_12_237) l_0_12_249)) ?x38989) (* (* 2.0 l_0_12_256) l_0_12_268))))
 (let ((?x39486 (- (- ?x39482 (* (* 2.0 l_0_12_257) l_0_12_269)) (* (* 2.0 l_0_12_258) l_0_12_270))))
 (let ((?x39492 (- (- (- (- ?x39486 ?x38991) ?x38993) (* (* 2.0 l_0_12_277) l_0_12_289)) (* (* 2.0 l_0_12_278) l_0_12_290))))
 (let ((?x39496 (- (- ?x39492 (* (* 2.0 l_0_12_279) l_0_12_291)) (* (* 2.0 l_0_12_298) l_0_12_310))))
 (let ((?x39500 (- (- ?x39496 (* (* 2.0 l_0_12_299) l_0_12_311)) (* (* 2.0 l_0_12_300) l_0_12_312))))
 (let ((?x39510 (- (- (- (- (- (+ (+ ?x39500 ?x39410) ?x39412) ?x39503) ?x39505) ?x39507) ?x39414) ?x39416)))
 (= (+ (+ (+ ?x39510 ?x39511) ?x39513) ?x39515) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39725 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x39722 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x39719 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x39716 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x39713 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x39710 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x39707 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x39704 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x39701 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x39698 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x39167 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x39164 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x39161 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x39158 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x39155 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x39600 (* ?x35989 l_0_12_185)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x39598 (* ?x35986 l_0_12_184)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x39596 (* ?x35983 l_0_12_164)))
 (let ((?x39150 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x39593 (* ?x35977 l_0_12_163)))
 (let ((?x39139 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x36584 (* 12.0 l_0_12_13)))
 (let ((?x39127 (* ?x36584 l_0_12_18)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x28247 (* ?x36856 l_0_12_138)))
 (let ((?x36853 (* 2.0 l_0_12_128)))
 (let ((?x28251 (* ?x36853 l_0_12_137)))
 (let ((?x36195 (* 12.0 l_0_12_12)))
 (let ((?x39124 (* ?x36195 l_0_12_17)))
 (let ((?x36192 (* 12.0 l_0_12_11)))
 (let ((?x39122 (* ?x36192 l_0_12_16)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x39585 (* ?x35962 l_0_12_122)))
 (let ((?x35959 (* 2.0 l_0_12_107)))
 (let ((?x39583 (* ?x35959 l_0_12_121)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x39581 (* ?x27809 l_0_12_87)))
 (let ((?x39587 (+ (+ (+ (- (* (* (- 2.0) l_0_12_100) l_0_12_86) ?x39581) ?x39583) ?x39585) ?x39122)))
 (let ((?x39595 (+ (+ (+ (+ (- (- (+ ?x39587 ?x39124) ?x28251) ?x28247) ?x39127) ?x39139) ?x39593) ?x39150)))
 (let ((?x39604 (- (- (- (+ ?x39595 ?x39596) ?x39598) ?x39600) (* (* 2.0 l_0_12_200) l_0_12_205))))
 (let ((?x39610 (- (- ?x39604 (* (* 2.0 l_0_12_201) l_0_12_206)) (* (* 2.0 l_0_12_202) l_0_12_207))))
 (let ((?x39616 (- (- ?x39610 (* (* 2.0 l_0_12_203) l_0_12_208)) (* (* 2.0 l_0_12_204) l_0_12_209))))
 (let ((?x39622 (- (- ?x39616 (* (* 2.0 l_0_12_221) l_0_12_226)) (* (* 2.0 l_0_12_222) l_0_12_227))))
 (let ((?x39628 (- (- ?x39622 (* (* 2.0 l_0_12_223) l_0_12_228)) (* (* 2.0 l_0_12_224) l_0_12_229))))
 (let ((?x39634 (- (- ?x39628 (* (* 2.0 l_0_12_225) l_0_12_230)) (* (* 2.0 l_0_12_242) l_0_12_247))))
 (let ((?x39640 (- (- ?x39634 (* (* 2.0 l_0_12_243) l_0_12_248)) (* (* 2.0 l_0_12_244) l_0_12_249))))
 (let ((?x39646 (- (- ?x39640 (* (* 2.0 l_0_12_245) l_0_12_250)) (* (* 2.0 l_0_12_246) l_0_12_251))))
 (let ((?x39652 (- (- ?x39646 (* (* 2.0 l_0_12_263) l_0_12_268)) (* (* 2.0 l_0_12_264) l_0_12_269))))
 (let ((?x39658 (- (- ?x39652 (* (* 2.0 l_0_12_265) l_0_12_270)) (* (* 2.0 l_0_12_266) l_0_12_271))))
 (let ((?x39664 (- (- ?x39658 (* (* 2.0 l_0_12_267) l_0_12_272)) (* (* 2.0 l_0_12_284) l_0_12_289))))
 (let ((?x39670 (- (- ?x39664 (* (* 2.0 l_0_12_285) l_0_12_290)) (* (* 2.0 l_0_12_286) l_0_12_291))))
 (let ((?x39676 (- (- ?x39670 (* (* 2.0 l_0_12_287) l_0_12_292)) (* (* 2.0 l_0_12_288) l_0_12_293))))
 (let ((?x39682 (- (- ?x39676 (* (* 2.0 l_0_12_305) l_0_12_310)) (* (* 2.0 l_0_12_306) l_0_12_311))))
 (let ((?x39688 (- (- ?x39682 (* (* 2.0 l_0_12_307) l_0_12_312)) (* (* 2.0 l_0_12_308) l_0_12_313))))
 (let ((?x39694 (- (- (- (- ?x39688 (* (* 2.0 l_0_12_309) l_0_12_314)) ?x39155) ?x39158) ?x39161)))
 (let ((?x39711 (- (- (- (- (- (- (- ?x39694 ?x39164) ?x39167) ?x39698) ?x39701) ?x39704) ?x39707) ?x39710)))
 (= (+ (+ (+ (+ (+ ?x39711 ?x39713) ?x39716) ?x39719) ?x39722) ?x39725) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39295 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x39292 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x39289 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x39286 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x39283 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x39280 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x39908 (* l_0_12_315 l_0_12_315)))
 (let ((?x39906 (* l_0_12_314 l_0_12_314)))
 (let ((?x39904 (* l_0_12_313 l_0_12_313)))
 (let ((?x39902 (* l_0_12_312 l_0_12_312)))
 (let ((?x39900 (* l_0_12_311 l_0_12_311)))
 (let ((?x39898 (* l_0_12_310 l_0_12_310)))
 (let ((?x39896 (* l_0_12_294 l_0_12_294)))
 (let ((?x39894 (* l_0_12_293 l_0_12_293)))
 (let ((?x39892 (* l_0_12_292 l_0_12_292)))
 (let ((?x39890 (* l_0_12_291 l_0_12_291)))
 (let ((?x39888 (* l_0_12_290 l_0_12_290)))
 (let ((?x39886 (* l_0_12_289 l_0_12_289)))
 (let ((?x39884 (* l_0_12_273 l_0_12_273)))
 (let ((?x39882 (* l_0_12_272 l_0_12_272)))
 (let ((?x39880 (* l_0_12_271 l_0_12_271)))
 (let ((?x39878 (* l_0_12_270 l_0_12_270)))
 (let ((?x39876 (* l_0_12_269 l_0_12_269)))
 (let ((?x39874 (* l_0_12_268 l_0_12_268)))
 (let ((?x39872 (* l_0_12_252 l_0_12_252)))
 (let ((?x39870 (* l_0_12_251 l_0_12_251)))
 (let ((?x39868 (* l_0_12_250 l_0_12_250)))
 (let ((?x39866 (* l_0_12_249 l_0_12_249)))
 (let ((?x39864 (* l_0_12_248 l_0_12_248)))
 (let ((?x39862 (* l_0_12_247 l_0_12_247)))
 (let ((?x39860 (* l_0_12_231 l_0_12_231)))
 (let ((?x39858 (* l_0_12_230 l_0_12_230)))
 (let ((?x39856 (* l_0_12_229 l_0_12_229)))
 (let ((?x39854 (* l_0_12_228 l_0_12_228)))
 (let ((?x39852 (* l_0_12_227 l_0_12_227)))
 (let ((?x39850 (* l_0_12_226 l_0_12_226)))
 (let ((?x39848 (* l_0_12_210 l_0_12_210)))
 (let ((?x38539 (* l_0_12_21 l_0_12_21)))
 (let ((?x39277 (* 6.0 ?x38539)))
 (let ((?x39845 (* l_0_12_209 l_0_12_209)))
 (let ((?x39843 (* l_0_12_208 l_0_12_208)))
 (let ((?x39841 (* l_0_12_207 l_0_12_207)))
 (let ((?x39839 (* l_0_12_206 l_0_12_206)))
 (let ((?x39837 (* l_0_12_205 l_0_12_205)))
 (let ((?x38537 (* l_0_12_20 l_0_12_20)))
 (let ((?x39275 (* 6.0 ?x38537)))
 (let ((?x38535 (* l_0_12_19 l_0_12_19)))
 (let ((?x39273 (* 6.0 ?x38535)))
 (let ((?x38533 (* l_0_12_18 l_0_12_18)))
 (let ((?x39271 (* 6.0 ?x38533)))
 (let ((?x38531 (* l_0_12_17 l_0_12_17)))
 (let ((?x39269 (* 6.0 ?x38531)))
 (let ((?x38529 (* l_0_12_16 l_0_12_16)))
 (let ((?x39267 (* 6.0 ?x38529)))
 (let ((?x36856 (* 2.0 l_0_12_129)))
 (let ((?x38812 (* ?x36856 l_0_12_143)))
 (let ((?x39834 (+ (+ (+ (- (* (* (- 2.0) l_0_12_128) l_0_12_142) ?x38812) ?x39267) ?x39269) ?x39271)))
 (let ((?x39846 (- (- (- (- (- (+ (+ ?x39834 ?x39273) ?x39275) ?x39837) ?x39839) ?x39841) ?x39843) ?x39845)))
 (let ((?x39859 (- (- (- (- (- (- (+ ?x39846 ?x39277) ?x39848) ?x39850) ?x39852) ?x39854) ?x39856) ?x39858)))
 (let ((?x39873 (- (- (- (- (- (- (- ?x39859 ?x39860) ?x39862) ?x39864) ?x39866) ?x39868) ?x39870) ?x39872)))
 (let ((?x39887 (- (- (- (- (- (- (- ?x39873 ?x39874) ?x39876) ?x39878) ?x39880) ?x39882) ?x39884) ?x39886)))
 (let ((?x39901 (- (- (- (- (- (- (- ?x39887 ?x39888) ?x39890) ?x39892) ?x39894) ?x39896) ?x39898) ?x39900)))
 (let ((?x39912 (- (- (- (- (- (- (- ?x39901 ?x39902) ?x39904) ?x39906) ?x39908) ?x39280) ?x39283) ?x39286)))
 (let ((?x39918 (- (- (- (- ?x39912 ?x39289) ?x39292) ?x39295) (* (* 1.0 l_0_12_58) l_0_12_58))))
 (let ((?x39924 (- (- ?x39918 (* (* 1.0 l_0_12_59) l_0_12_59)) (* (* 1.0 l_0_12_60) l_0_12_60))))
 (let ((?x39930 (- (- ?x39924 (* (* 1.0 l_0_12_61) l_0_12_61)) (* (* 1.0 l_0_12_62) l_0_12_62))))
 (let ((?x39935 (+ (- ?x39930 (* (* 1.0 l_0_12_63) l_0_12_63)) (* 1.0 (* l_0_12_79 l_0_12_79)))))
 (let ((?x39939 (+ (+ ?x39935 (* 1.0 (* l_0_12_80 l_0_12_80))) (* 1.0 (* l_0_12_81 l_0_12_81)))))
 (let ((?x39943 (+ (+ ?x39939 (* 1.0 (* l_0_12_82 l_0_12_82))) (* 1.0 (* l_0_12_83 l_0_12_83)))))
 (= (+ ?x39943 (* 1.0 (* l_0_12_84 l_0_12_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x38782 (* ?x37184 l_0_12_86)))
 (let ((?x35692 (* l_0_12_64 l_0_12_64)))
 (let ((?x35693 (* 3.0 ?x35692)))
 (let ((?x35687 (* (* 3.0 l_0_12_43) l_0_12_43)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x14809 (* ?x37143 l_0_12_170)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x14810 (* ?x37140 l_0_12_149)))
 (let ((?x16832 (+ (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_107) ?x14810) ?x14809) ?x35687) ?x35693)))
 (= (+ ?x16832 ?x38782) 0.0))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x36682 (* ?x36100 l_0_12_89)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x36680 (* ?x36097 l_0_12_88)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38584 (* ?x35689 l_0_12_67)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38577 (* ?x35683 l_0_12_46)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x36593 (* ?x35989 l_0_12_173)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x36591 (* ?x35986 l_0_12_172)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x36589 (* ?x35983 l_0_12_152)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x36587 (* ?x35977 l_0_12_151)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x36578 (* ?x35962 l_0_12_110)))
 (let ((?x29610 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_109) ?x36578) ?x36587) ?x36589) ?x36591)))
 (= (+ (+ (+ (- (+ ?x29610 ?x36593) ?x38577) ?x38584) ?x36680) ?x36682) 0.0)))))))))))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x37755 (* ?x36100 l_0_12_92)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x37753 (* ?x36097 l_0_12_91)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x36811 (* ?x35689 l_0_12_70)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x36803 (* ?x35683 l_0_12_49)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x37647 (* ?x35989 l_0_12_176)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x37645 (* ?x35986 l_0_12_175)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x37643 (* ?x35983 l_0_12_155)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x37641 (* ?x35977 l_0_12_154)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x26836 (* ?x35962 l_0_12_113)))
 (let ((?x17092 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_112) ?x26836) ?x37641) ?x37643) ?x37645)))
 (= (+ (+ (+ (- (+ ?x17092 ?x37647) ?x36803) ?x36811) ?x37753) ?x37755) 0.0)))))))))))))))))))))
(assert
 (let ((?x36100 (* 2.0 l_0_12_87)))
 (let ((?x36101 (* ?x36100 l_0_12_96)))
 (let ((?x36097 (* 2.0 l_0_12_86)))
 (let ((?x36098 (* ?x36097 l_0_12_95)))
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38638 (* ?x35689 l_0_12_74)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38632 (* ?x35683 l_0_12_53)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x35990 (* ?x35989 l_0_12_180)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x35987 (* ?x35986 l_0_12_179)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x35984 (* ?x35983 l_0_12_159)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x35978 (* ?x35977 l_0_12_158)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x35963 (* ?x35962 l_0_12_117)))
 (let ((?x17179 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_116) ?x35963) ?x35978) ?x35984) ?x35987)))
 (= (+ (+ (+ (- (+ ?x17179 ?x35990) ?x38632) ?x38638) ?x36098) ?x36101) 0.0)))))))))))))))))))))
(assert
 (let ((?x35689 (* 6.0 l_0_12_64)))
 (let ((?x38694 (* ?x35689 l_0_12_79)))
 (let ((?x35683 (* 6.0 l_0_12_43)))
 (let ((?x38688 (* ?x35683 l_0_12_58)))
 (let ((?x35989 (* 2.0 l_0_12_171)))
 (let ((?x39600 (* ?x35989 l_0_12_185)))
 (let ((?x35986 (* 2.0 l_0_12_170)))
 (let ((?x39598 (* ?x35986 l_0_12_184)))
 (let ((?x35983 (* 2.0 l_0_12_150)))
 (let ((?x39596 (* ?x35983 l_0_12_164)))
 (let ((?x35977 (* 2.0 l_0_12_149)))
 (let ((?x39593 (* ?x35977 l_0_12_163)))
 (let ((?x35962 (* 2.0 l_0_12_108)))
 (let ((?x39585 (* ?x35962 l_0_12_122)))
 (let ((?x35959 (* 2.0 l_0_12_107)))
 (let ((?x39583 (* ?x35959 l_0_12_121)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x39581 (* ?x27809 l_0_12_87)))
 (let ((?x29046 (- (- (- (+ (* (* 2.0 l_0_12_100) l_0_12_86) ?x39581) ?x39583) ?x39585) ?x39593)))
 (= (+ (- (+ (+ (- ?x29046 ?x39596) ?x39598) ?x39600) ?x38688) ?x38694) 0.0)))))))))))))))))))))
(assert
 (let ((?x36401 (* l_0_12_69 l_0_12_69)))
 (let ((?x38901 (* 3.0 ?x36401)))
 (let ((?x36398 (* l_0_12_68 l_0_12_68)))
 (let ((?x38899 (* 3.0 ?x36398)))
 (let ((?x36395 (* l_0_12_67 l_0_12_67)))
 (let ((?x38897 (* 3.0 ?x36395)))
 (let ((?x38892 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x38889 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x40008 (+ (+ (- (- (* (* (- 3.0) l_0_12_46) l_0_12_46) ?x38889) ?x38892) ?x38897) ?x38899)))
 (= (+ ?x40008 ?x38901) 0.0)))))))))))
(assert
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x36985 (* ?x36984 l_0_12_72)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x36982 (* ?x36981 l_0_12_71)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x36979 (* ?x36978 l_0_12_70)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x36969 (* ?x36968 l_0_12_51)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x36966 (* ?x36965 l_0_12_50)))
 (let ((?x40018 (+ (+ (- (- (* (* (- 6.0) l_0_12_46) l_0_12_49) ?x36966) ?x36969) ?x36979) ?x36982)))
 (= (+ ?x40018 ?x36985) 0.0)))))))))))))
(assert
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x38941 (* ?x36984 l_0_12_76)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x38939 (* ?x36981 l_0_12_75)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x38937 (* ?x36978 l_0_12_74)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x38934 (* ?x36968 l_0_12_55)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x38932 (* ?x36965 l_0_12_54)))
 (let ((?x40025 (+ (+ (- (- (* (* (- 6.0) l_0_12_46) l_0_12_53) ?x38932) ?x38934) ?x38937) ?x38939)))
 (= (+ ?x40025 ?x38941) 0.0)))))))))))))
(assert
 (let ((?x36984 (* 6.0 l_0_12_69)))
 (let ((?x39007 (* ?x36984 l_0_12_81)))
 (let ((?x36981 (* 6.0 l_0_12_68)))
 (let ((?x39005 (* ?x36981 l_0_12_80)))
 (let ((?x36978 (* 6.0 l_0_12_67)))
 (let ((?x39003 (* ?x36978 l_0_12_79)))
 (let ((?x36968 (* 6.0 l_0_12_48)))
 (let ((?x39000 (* ?x36968 l_0_12_60)))
 (let ((?x36965 (* 6.0 l_0_12_47)))
 (let ((?x38998 (* ?x36965 l_0_12_59)))
 (let ((?x40030 (+ (+ (- (- (* (* (- 6.0) l_0_12_46) l_0_12_58) ?x38998) ?x39000) ?x39003) ?x39005)))
 (= (+ ?x40030 ?x39007) 0.0)))))))))))))
(assert
 (let ((?x37070 (* l_0_12_73 l_0_12_73)))
 (let ((?x37071 (* 3.0 ?x37070)))
 (let ((?x37067 (* l_0_12_72 l_0_12_72)))
 (let ((?x37068 (* 3.0 ?x37067)))
 (let ((?x37064 (* l_0_12_71 l_0_12_71)))
 (let ((?x37065 (* 3.0 ?x37064)))
 (let ((?x37061 (* l_0_12_70 l_0_12_70)))
 (let ((?x37062 (* 3.0 ?x37061)))
 (let ((?x37056 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x37053 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x37050 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x40038 (+ (- (- (- (* (* (- 3.0) l_0_12_49) l_0_12_49) ?x37050) ?x37053) ?x37056) ?x37062)))
 (= (+ (+ (+ ?x40038 ?x37065) ?x37068) ?x37071) 0.0))))))))))))))
(assert
 (let ((?x37181 (* 6.0 l_0_12_73)))
 (let ((?x37182 (* ?x37181 l_0_12_77)))
 (let ((?x37178 (* 6.0 l_0_12_72)))
 (let ((?x37179 (* ?x37178 l_0_12_76)))
 (let ((?x37175 (* 6.0 l_0_12_71)))
 (let ((?x37176 (* ?x37175 l_0_12_75)))
 (let ((?x37172 (* 6.0 l_0_12_70)))
 (let ((?x37173 (* ?x37172 l_0_12_74)))
 (let ((?x37169 (* 6.0 l_0_12_52)))
 (let ((?x37170 (* ?x37169 l_0_12_56)))
 (let ((?x37166 (* 6.0 l_0_12_51)))
 (let ((?x37167 (* ?x37166 l_0_12_55)))
 (let ((?x37163 (* 6.0 l_0_12_50)))
 (let ((?x37164 (* ?x37163 l_0_12_54)))
 (let ((?x40046 (+ (- (- (- (* (* (- 6.0) l_0_12_49) l_0_12_53) ?x37164) ?x37167) ?x37170) ?x37173)))
 (= (+ (+ (+ ?x40046 ?x37176) ?x37179) ?x37182) 0.0)))))))))))))))))
(assert
 (let ((?x37181 (* 6.0 l_0_12_73)))
 (let ((?x37309 (* ?x37181 l_0_12_82)))
 (let ((?x37178 (* 6.0 l_0_12_72)))
 (let ((?x37307 (* ?x37178 l_0_12_81)))
 (let ((?x37175 (* 6.0 l_0_12_71)))
 (let ((?x37305 (* ?x37175 l_0_12_80)))
 (let ((?x37172 (* 6.0 l_0_12_70)))
 (let ((?x37303 (* ?x37172 l_0_12_79)))
 (let ((?x37169 (* 6.0 l_0_12_52)))
 (let ((?x37301 (* ?x37169 l_0_12_61)))
 (let ((?x37166 (* 6.0 l_0_12_51)))
 (let ((?x37299 (* ?x37166 l_0_12_60)))
 (let ((?x37163 (* 6.0 l_0_12_50)))
 (let ((?x37297 (* ?x37163 l_0_12_59)))
 (let ((?x40059 (+ (- (- (- (* (* (- 6.0) l_0_12_49) l_0_12_58) ?x37297) ?x37299) ?x37301) ?x37303)))
 (= (+ (+ (+ ?x40059 ?x37305) ?x37307) ?x37309) 0.0)))))))))))))))))
(assert
 (let ((?x36094 (* l_0_12_78 l_0_12_78)))
 (let ((?x39091 (* 3.0 ?x36094)))
 (let ((?x36091 (* l_0_12_77 l_0_12_77)))
 (let ((?x39089 (* 3.0 ?x36091)))
 (let ((?x36088 (* l_0_12_76 l_0_12_76)))
 (let ((?x39087 (* 3.0 ?x36088)))
 (let ((?x36085 (* l_0_12_75 l_0_12_75)))
 (let ((?x39085 (* 3.0 ?x36085)))
 (let ((?x36082 (* l_0_12_74 l_0_12_74)))
 (let ((?x39083 (* 3.0 ?x36082)))
 (let ((?x39081 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x39078 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x39075 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x39072 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x40072 (- (- (- (- (* (* (- 3.0) l_0_12_53) l_0_12_53) ?x39072) ?x39075) ?x39078) ?x39081)))
 (= (+ (+ (+ (+ (+ ?x40072 ?x39083) ?x39085) ?x39087) ?x39089) ?x39091) 0.0)))))))))))))))))
(assert
 (let ((?x39197 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39194 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39191 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39188 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39185 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x39182 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39179 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39176 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39173 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x40085 (- (- (- (- (* (* (- 6.0) l_0_12_53) l_0_12_58) ?x39173) ?x39176) ?x39179) ?x39182)))
 (= (+ (+ (+ (+ (+ ?x40085 ?x39185) ?x39188) ?x39191) ?x39194) ?x39197) 0.0))))))))))))
(assert
 (let ((?x39330 (* l_0_12_84 l_0_12_84)))
 (let ((?x39331 (* 3.0 ?x39330)))
 (let ((?x39327 (* l_0_12_83 l_0_12_83)))
 (let ((?x39328 (* 3.0 ?x39327)))
 (let ((?x39324 (* l_0_12_82 l_0_12_82)))
 (let ((?x39325 (* 3.0 ?x39324)))
 (let ((?x39321 (* l_0_12_81 l_0_12_81)))
 (let ((?x39322 (* 3.0 ?x39321)))
 (let ((?x39318 (* l_0_12_80 l_0_12_80)))
 (let ((?x39319 (* 3.0 ?x39318)))
 (let ((?x39315 (* l_0_12_79 l_0_12_79)))
 (let ((?x39316 (* 3.0 ?x39315)))
 (let ((?x39313 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x39310 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x39307 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x39304 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x39301 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x15923 (- (- (- (- (* (* (- 3.0) l_0_12_58) l_0_12_58) ?x39301) ?x39304) ?x39307) ?x39310)))
 (let ((?x40100 (+ (+ (+ (+ (+ (+ (- ?x15923 ?x39313) ?x39316) ?x39319) ?x39322) ?x39325) ?x39328) ?x39331)))
 (= ?x40100 0.0)))))))))))))))))))))
(assert
 (let ((?x36401 (* l_0_12_69 l_0_12_69)))
 (let ((?x36398 (* l_0_12_68 l_0_12_68)))
 (let ((?x36395 (* l_0_12_67 l_0_12_67)))
 (let ((?x36453 (* l_0_12_48 l_0_12_48)))
 (let ((?x17556 (- (+ (+ (* l_0_12_46 l_0_12_46) (* l_0_12_47 l_0_12_47)) ?x36453) ?x36395)))
 (= (- (- ?x17556 ?x36398) ?x36401) 0.0)))))))
(assert
 (let ((?x40113 (* l_0_12_90 l_0_12_90)))
 (let ((?x40111 (* l_0_12_89 l_0_12_89)))
 (let ((?x40109 (* l_0_12_88 l_0_12_88)))
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x36678 (* ?x36677 l_0_12_76)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x36675 (* ?x36674 l_0_12_75)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x36672 (* ?x36671 l_0_12_74)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x36667 (* ?x36666 l_0_12_55)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x36664 (* ?x36663 l_0_12_54)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x36661 (* ?x36660 l_0_12_53)))
 (let ((?x17560 (* l_0_12_174 l_0_12_174)))
 (let ((?x29933 (* l_0_12_173 l_0_12_173)))
 (let ((?x17417 (* l_0_12_172 l_0_12_172)))
 (let ((?x17360 (* l_0_12_153 l_0_12_153)))
 (let ((?x29929 (* l_0_12_152 l_0_12_152)))
 (let ((?x29926 (* l_0_12_151 l_0_12_151)))
 (let ((?x29923 (* l_0_12_111 l_0_12_111)))
 (let ((?x17402 (+ (+ (* l_0_12_109 l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x29923)))
 (let ((?x17559 (+ (- (- (- (+ (+ (+ ?x17402 ?x29926) ?x29929) ?x17360) ?x17417) ?x29933) ?x17560) ?x36661)))
 (let ((?x40112 (- (- (- (- (- (+ (+ ?x17559 ?x36664) ?x36667) ?x36672) ?x36675) ?x36678) ?x40109) ?x40111)))
 (= (- ?x40112 ?x40113) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x36677 (* 2.0 l_0_12_69)))
 (let ((?x39515 (* ?x36677 l_0_12_81)))
 (let ((?x36674 (* 2.0 l_0_12_68)))
 (let ((?x39513 (* ?x36674 l_0_12_80)))
 (let ((?x36671 (* 2.0 l_0_12_67)))
 (let ((?x39511 (* ?x36671 l_0_12_79)))
 (let ((?x36666 (* 2.0 l_0_12_48)))
 (let ((?x39507 (* ?x36666 l_0_12_60)))
 (let ((?x36663 (* 2.0 l_0_12_47)))
 (let ((?x39505 (* ?x36663 l_0_12_59)))
 (let ((?x36660 (* 2.0 l_0_12_46)))
 (let ((?x39503 (* ?x36660 l_0_12_58)))
 (let ((?x38878 (* l_0_12_132 l_0_12_132)))
 (let ((?x17661 (- (- (* (- l_0_12_130) l_0_12_130) (* l_0_12_131 l_0_12_131)) ?x38878)))
 (= (- (- (- (+ (+ (+ ?x17661 ?x39503) ?x39505) ?x39507) ?x39511) ?x39513) ?x39515) 0.0))))))))))))))))
(assert
 (let ((?x38153 (* 2.0 l_0_12_90)))
 (let ((?x40165 (* ?x38153 l_0_12_97)))
 (let ((?x38150 (* 2.0 l_0_12_89)))
 (let ((?x40163 (* ?x38150 l_0_12_96)))
 (let ((?x38147 (* 2.0 l_0_12_88)))
 (let ((?x40161 (* ?x38147 l_0_12_95)))
 (let ((?x36094 (* l_0_12_78 l_0_12_78)))
 (let ((?x36091 (* l_0_12_77 l_0_12_77)))
 (let ((?x36088 (* l_0_12_76 l_0_12_76)))
 (let ((?x36085 (* l_0_12_75 l_0_12_75)))
 (let ((?x36082 (* l_0_12_74 l_0_12_74)))
 (let ((?x36160 (* l_0_12_57 l_0_12_57)))
 (let ((?x25827 (* l_0_12_56 l_0_12_56)))
 (let ((?x25794 (* l_0_12_55 l_0_12_55)))
 (let ((?x11130 (* l_0_12_54 l_0_12_54)))
 (let ((?x23974 (* l_0_12_53 l_0_12_53)))
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x40149 (* ?x38130 l_0_12_181)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x40147 (* ?x38127 l_0_12_180)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x40145 (* ?x38124 l_0_12_179)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x40143 (* ?x38121 l_0_12_160)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x40141 (* ?x38118 l_0_12_159)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x40139 (* ?x38115 l_0_12_158)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x40137 (* ?x38107 l_0_12_118)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x40135 (* ?x38104 l_0_12_117)))
 (let ((?x40142 (+ (+ (+ (+ (* (* 2.0 l_0_12_109) l_0_12_116) ?x40135) ?x40137) ?x40139) ?x40141)))
 (let ((?x40153 (+ (+ (+ (- (- (- (+ ?x40142 ?x40143) ?x40145) ?x40147) ?x40149) ?x23974) ?x11130) ?x25794)))
 (let ((?x40160 (- (- (- (- (- (+ (+ ?x40153 ?x25827) ?x36160) ?x36082) ?x36085) ?x36088) ?x36091) ?x36094)))
 (= (- (- (- ?x40160 ?x40161) ?x40163) ?x40165) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39725 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x39722 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x39719 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x39716 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x39713 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x39710 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x39707 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x39704 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x39701 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x39698 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x40225 (* ?x38130 l_0_12_186)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x40223 (* ?x38127 l_0_12_185)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x40221 (* ?x38124 l_0_12_184)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x40219 (* ?x38121 l_0_12_165)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x40217 (* ?x38118 l_0_12_164)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x40215 (* ?x38115 l_0_12_163)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x38920 (* ?x36947 l_0_12_139)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x38918 (* ?x12651 l_0_12_138)))
 (let ((?x26015 (* 2.0 l_0_12_130)))
 (let ((?x38916 (* ?x26015 l_0_12_137)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x40210 (* ?x38107 l_0_12_123)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x40208 (* ?x38104 l_0_12_122)))
 (let ((?x27185 (* 2.0 l_0_12_109)))
 (let ((?x40206 (* ?x27185 l_0_12_121)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x40204 (* ?x38420 l_0_12_90)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x40202 (* ?x27809 l_0_12_89)))
 (let ((?x40209 (+ (+ (- (- (* (* (- 2.0) l_0_12_100) l_0_12_88) ?x40202) ?x40204) ?x40206) ?x40208)))
 (let ((?x40220 (+ (+ (+ (- (- (- (+ ?x40209 ?x40210) ?x38916) ?x38918) ?x38920) ?x40215) ?x40217) ?x40219)))
 (let ((?x40230 (+ (+ (+ (+ (- (- (- ?x40220 ?x40221) ?x40223) ?x40225) ?x39698) ?x39701) ?x39704) ?x39707)))
 (= (- (- (- (- (- (+ ?x40230 ?x39710) ?x39713) ?x39716) ?x39719) ?x39722) ?x39725) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39330 (* l_0_12_84 l_0_12_84)))
 (let ((?x39327 (* l_0_12_83 l_0_12_83)))
 (let ((?x39324 (* l_0_12_82 l_0_12_82)))
 (let ((?x39321 (* l_0_12_81 l_0_12_81)))
 (let ((?x39318 (* l_0_12_80 l_0_12_80)))
 (let ((?x39315 (* l_0_12_79 l_0_12_79)))
 (let ((?x39355 (* l_0_12_63 l_0_12_63)))
 (let ((?x39349 (* l_0_12_62 l_0_12_62)))
 (let ((?x16012 (* l_0_12_61 l_0_12_61)))
 (let ((?x16047 (* l_0_12_60 l_0_12_60)))
 (let ((?x16018 (* l_0_12_59 l_0_12_59)))
 (let ((?x15917 (* l_0_12_58 l_0_12_58)))
 (let ((?x36947 (* 2.0 l_0_12_132)))
 (let ((?x38981 (* ?x36947 l_0_12_144)))
 (let ((?x12651 (* 2.0 l_0_12_131)))
 (let ((?x38979 (* ?x12651 l_0_12_143)))
 (let ((?x40288 (+ (+ (- (- (* (* (- 2.0) l_0_12_130) l_0_12_142) ?x38979) ?x38981) ?x15917) ?x16018)))
 (let ((?x40295 (- (- (- (+ (+ (+ (+ ?x40288 ?x16047) ?x16012) ?x39349) ?x39355) ?x39315) ?x39318) ?x39321)))
 (= (- (- (- ?x40295 ?x39324) ?x39327) ?x39330) 0.0))))))))))))))))))))
(assert
 (let ((?x40346 (* l_0_12_99 l_0_12_99)))
 (let ((?x40344 (* l_0_12_98 l_0_12_98)))
 (let ((?x40342 (* l_0_12_97 l_0_12_97)))
 (let ((?x40340 (* l_0_12_96 l_0_12_96)))
 (let ((?x40338 (* l_0_12_95 l_0_12_95)))
 (let ((?x40336 (* l_0_12_183 l_0_12_183)))
 (let ((?x40334 (* l_0_12_182 l_0_12_182)))
 (let ((?x40332 (* l_0_12_181 l_0_12_181)))
 (let ((?x40330 (* l_0_12_180 l_0_12_180)))
 (let ((?x40328 (* l_0_12_179 l_0_12_179)))
 (let ((?x40326 (* l_0_12_162 l_0_12_162)))
 (let ((?x40324 (* l_0_12_161 l_0_12_161)))
 (let ((?x40322 (* l_0_12_160 l_0_12_160)))
 (let ((?x40320 (* l_0_12_159 l_0_12_159)))
 (let ((?x40318 (* l_0_12_158 l_0_12_158)))
 (let ((?x40316 (* l_0_12_120 l_0_12_120)))
 (let ((?x40314 (* l_0_12_119 l_0_12_119)))
 (let ((?x40312 (* l_0_12_118 l_0_12_118)))
 (let ((?x40313 (+ (+ (* l_0_12_116 l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40312)))
 (let ((?x40327 (+ (+ (+ (+ (+ (+ (+ ?x40313 ?x40314) ?x40316) ?x40318) ?x40320) ?x40322) ?x40324) ?x40326)))
 (let ((?x40341 (- (- (- (- (- (- (- ?x40327 ?x40328) ?x40330) ?x40332) ?x40334) ?x40336) ?x40338) ?x40340)))
 (= (- (- (- ?x40341 ?x40342) ?x40344) ?x40346) 0.0)))))))))))))))))))))))
(assert
 (let ((?x40427 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x40424 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x40421 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x40418 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x40415 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x40412 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x40409 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x40406 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x40403 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x40400 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x39056 (* l_0_12_141 l_0_12_141)))
 (let ((?x39054 (* l_0_12_140 l_0_12_140)))
 (let ((?x39051 (* l_0_12_139 l_0_12_139)))
 (let ((?x39049 (* l_0_12_138 l_0_12_138)))
 (let ((?x39047 (* l_0_12_137 l_0_12_137)))
 (let ((?x40392 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x40389 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x40386 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x40383 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x40380 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x40377 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x38423 (* 2.0 l_0_12_103)))
 (let ((?x40374 (* ?x38423 l_0_12_98)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x40372 (* ?x38420 l_0_12_97)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x40370 (* ?x27809 l_0_12_96)))
 (let ((?x40378 (- (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_95) ?x40370) ?x40372) ?x40374) ?x40377)))
 (let ((?x40395 (- (- (+ (+ (+ (+ (+ ?x40378 ?x40380) ?x40383) ?x40386) ?x40389) ?x40392) ?x39047) ?x39049)))
 (let ((?x40410 (+ (+ (+ (+ (- (- (- ?x40395 ?x39051) ?x39054) ?x39056) ?x40400) ?x40403) ?x40406) ?x40409)))
 (= (- (- (- (- (- (+ ?x40410 ?x40412) ?x40415) ?x40418) ?x40421) ?x40424) ?x40427) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x40533 (* l_0_12_189 l_0_12_189)))
 (let ((?x40531 (* l_0_12_188 l_0_12_188)))
 (let ((?x40529 (* l_0_12_187 l_0_12_187)))
 (let ((?x40527 (* l_0_12_186 l_0_12_186)))
 (let ((?x40525 (* l_0_12_185 l_0_12_185)))
 (let ((?x40523 (* l_0_12_184 l_0_12_184)))
 (let ((?x40521 (* l_0_12_168 l_0_12_168)))
 (let ((?x40519 (* l_0_12_167 l_0_12_167)))
 (let ((?x40517 (* l_0_12_166 l_0_12_166)))
 (let ((?x40515 (* l_0_12_165 l_0_12_165)))
 (let ((?x40513 (* l_0_12_164 l_0_12_164)))
 (let ((?x40511 (* l_0_12_163 l_0_12_163)))
 (let ((?x39145 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x39142 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x39136 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x39133 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x39130 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x40504 (* l_0_12_126 l_0_12_126)))
 (let ((?x40502 (* l_0_12_125 l_0_12_125)))
 (let ((?x40500 (* l_0_12_124 l_0_12_124)))
 (let ((?x40498 (* l_0_12_123 l_0_12_123)))
 (let ((?x40496 (* l_0_12_122 l_0_12_122)))
 (let ((?x40494 (* l_0_12_121 l_0_12_121)))
 (let ((?x40492 (* l_0_12_105 l_0_12_105)))
 (let ((?x40490 (* l_0_12_104 l_0_12_104)))
 (let ((?x40488 (* l_0_12_103 l_0_12_103)))
 (let ((?x40486 (* l_0_12_102 l_0_12_102)))
 (let ((?x40487 (- (- (* (- l_0_12_100) l_0_12_100) (* l_0_12_101 l_0_12_101)) ?x40486)))
 (let ((?x40501 (+ (+ (+ (+ (- (- (- ?x40487 ?x40488) ?x40490) ?x40492) ?x40494) ?x40496) ?x40498) ?x40500)))
 (let ((?x40510 (- (- (- (- (- (+ (+ ?x40501 ?x40502) ?x40504) ?x39130) ?x39133) ?x39136) ?x39142) ?x39145)))
 (let ((?x40524 (- (+ (+ (+ (+ (+ (+ ?x40510 ?x40511) ?x40513) ?x40515) ?x40517) ?x40519) ?x40521) ?x40523)))
 (= (- (- (- (- (- ?x40524 ?x40525) ?x40527) ?x40529) ?x40531) ?x40533) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x38644 (* l_0_12_85 l_0_12_85)))
 (let ((?x38628 (* l_0_12_169 l_0_12_169)))
 (let ((?x40576 (+ (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_148 l_0_12_148)) ?x38628)))
 (= (+ ?x40576 ?x38644) 0.0)))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x38943 (* ?x37184 l_0_12_88)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x38924 (* ?x37143 l_0_12_172)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x38922 (* ?x37140 l_0_12_151)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_109) ?x38922) ?x38924) ?x38943) 0.0))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x37185 (* ?x37184 l_0_12_91)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x37144 (* ?x37143 l_0_12_175)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x37141 (* ?x37140 l_0_12_154)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x37141) ?x37144) ?x37185) 0.0))))))))
(assert
 (let ((?x37184 (* 2.0 l_0_12_85)))
 (let ((?x39093 (* ?x37184 l_0_12_95)))
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x39061 (* ?x37143 l_0_12_179)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x39058 (* ?x37140 l_0_12_158)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_116) ?x39058) ?x39061) ?x39093) 0.0))))))))
(assert
 (let ((?x37143 (* 2.0 l_0_12_169)))
 (let ((?x39152 (* ?x37143 l_0_12_184)))
 (let ((?x37140 (* 2.0 l_0_12_148)))
 (let ((?x39147 (* ?x37140 l_0_12_163)))
 (let ((?x37119 (* 2.0 l_0_12_106)))
 (let ((?x39120 (* ?x37119 l_0_12_121)))
 (= (+ (- (- (* (* 2.0 l_0_12_100) l_0_12_85) ?x39120) ?x39147) ?x39152) 0.0))))))))
(assert
 (let ((?x40113 (* l_0_12_90 l_0_12_90)))
 (let ((?x40111 (* l_0_12_89 l_0_12_89)))
 (let ((?x40109 (* l_0_12_88 l_0_12_88)))
 (let ((?x17560 (* l_0_12_174 l_0_12_174)))
 (let ((?x29933 (* l_0_12_173 l_0_12_173)))
 (let ((?x17417 (* l_0_12_172 l_0_12_172)))
 (let ((?x17360 (* l_0_12_153 l_0_12_153)))
 (let ((?x29929 (* l_0_12_152 l_0_12_152)))
 (let ((?x29926 (* l_0_12_151 l_0_12_151)))
 (let ((?x29923 (* l_0_12_111 l_0_12_111)))
 (let ((?x40596 (- (- (* (- l_0_12_109) l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x29923)))
 (let ((?x40603 (+ (+ (+ (+ (- (- (- ?x40596 ?x29926) ?x29929) ?x17360) ?x17417) ?x29933) ?x17560) ?x40109)))
 (= (+ (+ ?x40603 ?x40111) ?x40113) 0.0))))))))))))))
(assert
 (let ((?x38153 (* 2.0 l_0_12_90)))
 (let ((?x38154 (* ?x38153 l_0_12_93)))
 (let ((?x38150 (* 2.0 l_0_12_89)))
 (let ((?x38151 (* ?x38150 l_0_12_92)))
 (let ((?x38147 (* 2.0 l_0_12_88)))
 (let ((?x38148 (* ?x38147 l_0_12_91)))
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x38131 (* ?x38130 l_0_12_177)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x38128 (* ?x38127 l_0_12_176)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x38125 (* ?x38124 l_0_12_175)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x38122 (* ?x38121 l_0_12_156)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x38119 (* ?x38118 l_0_12_155)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x38116 (* ?x38115 l_0_12_154)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x38108 (* ?x38107 l_0_12_114)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x38105 (* ?x38104 l_0_12_113)))
 (let ((?x40616 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_112) ?x38105) ?x38108) ?x38116) ?x38119)))
 (let ((?x40623 (+ (+ (+ (+ (+ (+ (- ?x40616 ?x38122) ?x38125) ?x38128) ?x38131) ?x38148) ?x38151) ?x38154)))
 (= ?x40623 0.0))))))))))))))))))))))))))
(assert
 (let ((?x38153 (* 2.0 l_0_12_90)))
 (let ((?x40165 (* ?x38153 l_0_12_97)))
 (let ((?x38150 (* 2.0 l_0_12_89)))
 (let ((?x40163 (* ?x38150 l_0_12_96)))
 (let ((?x38147 (* 2.0 l_0_12_88)))
 (let ((?x40161 (* ?x38147 l_0_12_95)))
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x40149 (* ?x38130 l_0_12_181)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x40147 (* ?x38127 l_0_12_180)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x40145 (* ?x38124 l_0_12_179)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x40143 (* ?x38121 l_0_12_160)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x40141 (* ?x38118 l_0_12_159)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x40139 (* ?x38115 l_0_12_158)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x40137 (* ?x38107 l_0_12_118)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x40135 (* ?x38104 l_0_12_117)))
 (let ((?x40632 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_116) ?x40135) ?x40137) ?x40139) ?x40141)))
 (let ((?x40639 (+ (+ (+ (+ (+ (+ (- ?x40632 ?x40143) ?x40145) ?x40147) ?x40149) ?x40161) ?x40163) ?x40165)))
 (= ?x40639 0.0))))))))))))))))))))))))))
(assert
 (let ((?x38130 (* 2.0 l_0_12_174)))
 (let ((?x40225 (* ?x38130 l_0_12_186)))
 (let ((?x38127 (* 2.0 l_0_12_173)))
 (let ((?x40223 (* ?x38127 l_0_12_185)))
 (let ((?x38124 (* 2.0 l_0_12_172)))
 (let ((?x40221 (* ?x38124 l_0_12_184)))
 (let ((?x38121 (* 2.0 l_0_12_153)))
 (let ((?x40219 (* ?x38121 l_0_12_165)))
 (let ((?x38118 (* 2.0 l_0_12_152)))
 (let ((?x40217 (* ?x38118 l_0_12_164)))
 (let ((?x38115 (* 2.0 l_0_12_151)))
 (let ((?x40215 (* ?x38115 l_0_12_163)))
 (let ((?x38107 (* 2.0 l_0_12_111)))
 (let ((?x40210 (* ?x38107 l_0_12_123)))
 (let ((?x38104 (* 2.0 l_0_12_110)))
 (let ((?x40208 (* ?x38104 l_0_12_122)))
 (let ((?x27185 (* 2.0 l_0_12_109)))
 (let ((?x40206 (* ?x27185 l_0_12_121)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x40204 (* ?x38420 l_0_12_90)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x40202 (* ?x27809 l_0_12_89)))
 (let ((?x29801 (- (- (+ (+ (* (* 2.0 l_0_12_100) l_0_12_88) ?x40202) ?x40204) ?x40206) ?x40208)))
 (let ((?x30240 (+ (+ (+ (- (- (- (- ?x29801 ?x40210) ?x40215) ?x40217) ?x40219) ?x40221) ?x40223) ?x40225)))
 (= ?x30240 0.0))))))))))))))))))))))))))
(assert
 (let ((?x38272 (* l_0_12_94 l_0_12_94)))
 (let ((?x38270 (* l_0_12_93 l_0_12_93)))
 (let ((?x38268 (* l_0_12_92 l_0_12_92)))
 (let ((?x38266 (* l_0_12_91 l_0_12_91)))
 (let ((?x38252 (* l_0_12_178 l_0_12_178)))
 (let ((?x38250 (* l_0_12_177 l_0_12_177)))
 (let ((?x38248 (* l_0_12_176 l_0_12_176)))
 (let ((?x38246 (* l_0_12_175 l_0_12_175)))
 (let ((?x38244 (* l_0_12_157 l_0_12_157)))
 (let ((?x38242 (* l_0_12_156 l_0_12_156)))
 (let ((?x38240 (* l_0_12_155 l_0_12_155)))
 (let ((?x38238 (* l_0_12_154 l_0_12_154)))
 (let ((?x38232 (* l_0_12_115 l_0_12_115)))
 (let ((?x38230 (* l_0_12_114 l_0_12_114)))
 (let ((?x30325 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x38230)))
 (let ((?x18843 (+ (+ (- (- (- (- (- ?x30325 ?x38232) ?x38238) ?x38240) ?x38242) ?x38244) ?x38246) ?x38248)))
 (= (+ (+ (+ (+ (+ (+ ?x18843 ?x38250) ?x38252) ?x38266) ?x38268) ?x38270) ?x38272) 0.0))))))))))))))))))
(assert
 (let ((?x38374 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x38371 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x38368 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x38365 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x38356 (* 2.0 l_0_12_178)))
 (let ((?x38357 (* ?x38356 l_0_12_182)))
 (let ((?x38353 (* 2.0 l_0_12_177)))
 (let ((?x38354 (* ?x38353 l_0_12_181)))
 (let ((?x38350 (* 2.0 l_0_12_176)))
 (let ((?x38351 (* ?x38350 l_0_12_180)))
 (let ((?x38347 (* 2.0 l_0_12_175)))
 (let ((?x38348 (* ?x38347 l_0_12_179)))
 (let ((?x38344 (* 2.0 l_0_12_157)))
 (let ((?x38345 (* ?x38344 l_0_12_161)))
 (let ((?x38341 (* 2.0 l_0_12_156)))
 (let ((?x38342 (* ?x38341 l_0_12_160)))
 (let ((?x38338 (* 2.0 l_0_12_155)))
 (let ((?x38339 (* ?x38338 l_0_12_159)))
 (let ((?x38335 (* 2.0 l_0_12_154)))
 (let ((?x38336 (* ?x38335 l_0_12_158)))
 (let ((?x38328 (* 2.0 l_0_12_115)))
 (let ((?x38329 (* ?x38328 l_0_12_119)))
 (let ((?x38325 (* 2.0 l_0_12_114)))
 (let ((?x38326 (* ?x38325 l_0_12_118)))
 (let ((?x38322 (* 2.0 l_0_12_113)))
 (let ((?x38323 (* ?x38322 l_0_12_117)))
 (let ((?x30404 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_116) ?x38323) ?x38326) ?x38329) ?x38336)))
 (let ((?x40663 (+ (+ (+ (+ (- (- (- ?x30404 ?x38339) ?x38342) ?x38345) ?x38348) ?x38351) ?x38354) ?x38357)))
 (= (+ (+ (+ (+ ?x40663 ?x38365) ?x38368) ?x38371) ?x38374) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x38356 (* 2.0 l_0_12_178)))
 (let ((?x38464 (* ?x38356 l_0_12_187)))
 (let ((?x38353 (* 2.0 l_0_12_177)))
 (let ((?x38462 (* ?x38353 l_0_12_186)))
 (let ((?x38350 (* 2.0 l_0_12_176)))
 (let ((?x38460 (* ?x38350 l_0_12_185)))
 (let ((?x38347 (* 2.0 l_0_12_175)))
 (let ((?x38458 (* ?x38347 l_0_12_184)))
 (let ((?x38344 (* 2.0 l_0_12_157)))
 (let ((?x38456 (* ?x38344 l_0_12_166)))
 (let ((?x38341 (* 2.0 l_0_12_156)))
 (let ((?x38454 (* ?x38341 l_0_12_165)))
 (let ((?x38338 (* 2.0 l_0_12_155)))
 (let ((?x38452 (* ?x38338 l_0_12_164)))
 (let ((?x38335 (* 2.0 l_0_12_154)))
 (let ((?x38450 (* ?x38335 l_0_12_163)))
 (let ((?x38328 (* 2.0 l_0_12_115)))
 (let ((?x38434 (* ?x38328 l_0_12_124)))
 (let ((?x38325 (* 2.0 l_0_12_114)))
 (let ((?x38432 (* ?x38325 l_0_12_123)))
 (let ((?x38322 (* 2.0 l_0_12_113)))
 (let ((?x38430 (* ?x38322 l_0_12_122)))
 (let ((?x38319 (* 2.0 l_0_12_112)))
 (let ((?x38428 (* ?x38319 l_0_12_121)))
 (let ((?x38423 (* 2.0 l_0_12_103)))
 (let ((?x38424 (* ?x38423 l_0_12_94)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x38421 (* ?x38420 l_0_12_93)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x27806 (* ?x27809 l_0_12_92)))
 (let ((?x40683 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_91) ?x27806) ?x38421) ?x38424) ?x38428)))
 (let ((?x40690 (- (- (- (- (- (- (- ?x40683 ?x38430) ?x38432) ?x38434) ?x38450) ?x38452) ?x38454) ?x38456)))
 (= (+ (+ (+ (+ ?x40690 ?x38458) ?x38460) ?x38462) ?x38464) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40346 (* l_0_12_99 l_0_12_99)))
 (let ((?x40344 (* l_0_12_98 l_0_12_98)))
 (let ((?x40342 (* l_0_12_97 l_0_12_97)))
 (let ((?x40340 (* l_0_12_96 l_0_12_96)))
 (let ((?x40338 (* l_0_12_95 l_0_12_95)))
 (let ((?x40336 (* l_0_12_183 l_0_12_183)))
 (let ((?x40334 (* l_0_12_182 l_0_12_182)))
 (let ((?x40332 (* l_0_12_181 l_0_12_181)))
 (let ((?x40330 (* l_0_12_180 l_0_12_180)))
 (let ((?x40328 (* l_0_12_179 l_0_12_179)))
 (let ((?x40326 (* l_0_12_162 l_0_12_162)))
 (let ((?x40324 (* l_0_12_161 l_0_12_161)))
 (let ((?x40322 (* l_0_12_160 l_0_12_160)))
 (let ((?x40320 (* l_0_12_159 l_0_12_159)))
 (let ((?x40318 (* l_0_12_158 l_0_12_158)))
 (let ((?x40316 (* l_0_12_120 l_0_12_120)))
 (let ((?x40314 (* l_0_12_119 l_0_12_119)))
 (let ((?x40312 (* l_0_12_118 l_0_12_118)))
 (let ((?x30499 (- (- (* (- l_0_12_116) l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40312)))
 (let ((?x40704 (- (- (- (- (- (- (- ?x30499 ?x40314) ?x40316) ?x40318) ?x40320) ?x40322) ?x40324) ?x40326)))
 (let ((?x40711 (+ (+ (+ (+ (+ (+ (+ ?x40704 ?x40328) ?x40330) ?x40332) ?x40334) ?x40336) ?x40338) ?x40340)))
 (= (+ (+ (+ ?x40711 ?x40342) ?x40344) ?x40346) 0.0)))))))))))))))))))))))
(assert
 (let ((?x40427 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x40424 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x40421 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x40418 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x40415 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x40412 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x40409 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x40406 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x40403 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x40400 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x40392 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x40389 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x40386 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x40383 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x40380 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x40377 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x38423 (* 2.0 l_0_12_103)))
 (let ((?x40374 (* ?x38423 l_0_12_98)))
 (let ((?x38420 (* 2.0 l_0_12_102)))
 (let ((?x40372 (* ?x38420 l_0_12_97)))
 (let ((?x27809 (* 2.0 l_0_12_101)))
 (let ((?x40370 (* ?x27809 l_0_12_96)))
 (let ((?x19293 (+ (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_95) ?x40370) ?x40372) ?x40374) ?x40377)))
 (let ((?x30504 (- (- (- (- (- (- (- ?x19293 ?x40380) ?x40383) ?x40386) ?x40389) ?x40392) ?x40400) ?x40403)))
 (let ((?x40718 (+ (+ (+ (+ (- (- (- ?x30504 ?x40406) ?x40409) ?x40412) ?x40415) ?x40418) ?x40421) ?x40424)))
 (= (+ ?x40718 ?x40427) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x40533 (* l_0_12_189 l_0_12_189)))
 (let ((?x40531 (* l_0_12_188 l_0_12_188)))
 (let ((?x40529 (* l_0_12_187 l_0_12_187)))
 (let ((?x40527 (* l_0_12_186 l_0_12_186)))
 (let ((?x40525 (* l_0_12_185 l_0_12_185)))
 (let ((?x40523 (* l_0_12_184 l_0_12_184)))
 (let ((?x40521 (* l_0_12_168 l_0_12_168)))
 (let ((?x40519 (* l_0_12_167 l_0_12_167)))
 (let ((?x40517 (* l_0_12_166 l_0_12_166)))
 (let ((?x40515 (* l_0_12_165 l_0_12_165)))
 (let ((?x40513 (* l_0_12_164 l_0_12_164)))
 (let ((?x40511 (* l_0_12_163 l_0_12_163)))
 (let ((?x40504 (* l_0_12_126 l_0_12_126)))
 (let ((?x40502 (* l_0_12_125 l_0_12_125)))
 (let ((?x40500 (* l_0_12_124 l_0_12_124)))
 (let ((?x40498 (* l_0_12_123 l_0_12_123)))
 (let ((?x40496 (* l_0_12_122 l_0_12_122)))
 (let ((?x40494 (* l_0_12_121 l_0_12_121)))
 (let ((?x40492 (* l_0_12_105 l_0_12_105)))
 (let ((?x40490 (* l_0_12_104 l_0_12_104)))
 (let ((?x40488 (* l_0_12_103 l_0_12_103)))
 (let ((?x40486 (* l_0_12_102 l_0_12_102)))
 (let ((?x40734 (+ (+ (* l_0_12_100 l_0_12_100) (* l_0_12_101 l_0_12_101)) ?x40486)))
 (let ((?x40741 (- (- (- (- (+ (+ (+ ?x40734 ?x40488) ?x40490) ?x40492) ?x40494) ?x40496) ?x40498) ?x40500)))
 (let ((?x40748 (- (- (- (- (- (- (- ?x40741 ?x40502) ?x40504) ?x40511) ?x40513) ?x40515) ?x40517) ?x40519)))
 (let ((?x40755 (+ (+ (+ (+ (+ (+ (- ?x40748 ?x40521) ?x40523) ?x40525) ?x40527) ?x40529) ?x40531) ?x40533)))
 (= ?x40755 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x39265 (* l_0_12_147 l_0_12_147)))
 (let ((?x39263 (* l_0_12_146 l_0_12_146)))
 (let ((?x39261 (* l_0_12_145 l_0_12_145)))
 (let ((?x39259 (* l_0_12_144 l_0_12_144)))
 (let ((?x19470 (- (- (* (- l_0_12_142) l_0_12_142) (* l_0_12_143 l_0_12_143)) ?x39259)))
 (= (- (- (- ?x19470 ?x39261) ?x39263) ?x39265) 0.0)))))))
(assert
 (>= l_0_12_1 0.0))
(assert
 (>= l_0_12_3 0.0))
(assert
 (>= l_0_12_6 0.0))
(assert
 (>= l_0_12_10 0.0))
(assert
 (>= l_0_12_15 0.0))
(assert
 (>= l_0_12_21 0.0))
(assert
 (>= l_0_12_22 0.0))
(assert
 (>= l_0_12_24 0.0))
(assert
 (>= l_0_12_27 0.0))
(assert
 (>= l_0_12_31 0.0))
(assert
 (>= l_0_12_36 0.0))
(assert
 (>= l_0_12_42 0.0))
(assert
 (>= l_0_12_43 0.0))
(assert
 (>= l_0_12_45 0.0))
(assert
 (>= l_0_12_48 0.0))
(assert
 (>= l_0_12_52 0.0))
(assert
 (>= l_0_12_57 0.0))
(assert
 (>= l_0_12_63 0.0))
(assert
 (>= l_0_12_64 0.0))
(assert
 (>= l_0_12_66 0.0))
(assert
 (>= l_0_12_69 0.0))
(assert
 (>= l_0_12_73 0.0))
(assert
 (>= l_0_12_78 0.0))
(assert
 (>= l_0_12_84 0.0))
(assert
 (>= l_0_12_85 0.0))
(assert
 (>= l_0_12_87 0.0))
(assert
 (>= l_0_12_90 0.0))
(assert
 (>= l_0_12_94 0.0))
(assert
 (>= l_0_12_99 0.0))
(assert
 (>= l_0_12_105 0.0))
(assert
 (>= l_0_12_106 0.0))
(assert
 (>= l_0_12_108 0.0))
(assert
 (>= l_0_12_111 0.0))
(assert
 (>= l_0_12_115 0.0))
(assert
 (>= l_0_12_120 0.0))
(assert
 (>= l_0_12_126 0.0))
(assert
 (>= l_0_12_127 0.0))
(assert
 (>= l_0_12_129 0.0))
(assert
 (>= l_0_12_132 0.0))
(assert
 (>= l_0_12_136 0.0))
(assert
 (>= l_0_12_141 0.0))
(assert
 (>= l_0_12_147 0.0))
(assert
 (>= l_0_12_148 0.0))
(assert
 (>= l_0_12_150 0.0))
(assert
 (>= l_0_12_153 0.0))
(assert
 (>= l_0_12_157 0.0))
(assert
 (>= l_0_12_162 0.0))
(assert
 (>= l_0_12_168 0.0))
(assert
 (>= l_0_12_169 0.0))
(assert
 (>= l_0_12_171 0.0))
(assert
 (>= l_0_12_174 0.0))
(assert
 (>= l_0_12_178 0.0))
(assert
 (>= l_0_12_183 0.0))
(assert
 (>= l_0_12_189 0.0))
(assert
 (>= l_0_12_190 0.0))
(assert
 (>= l_0_12_192 0.0))
(assert
 (>= l_0_12_195 0.0))
(assert
 (>= l_0_12_199 0.0))
(assert
 (>= l_0_12_204 0.0))
(assert
 (>= l_0_12_210 0.0))
(assert
 (>= l_0_12_211 0.0))
(assert
 (>= l_0_12_213 0.0))
(assert
 (>= l_0_12_216 0.0))
(assert
 (>= l_0_12_220 0.0))
(assert
 (>= l_0_12_225 0.0))
(assert
 (>= l_0_12_231 0.0))
(assert
 (>= l_0_12_232 0.0))
(assert
 (>= l_0_12_234 0.0))
(assert
 (>= l_0_12_237 0.0))
(assert
 (>= l_0_12_241 0.0))
(assert
 (>= l_0_12_246 0.0))
(assert
 (>= l_0_12_252 0.0))
(assert
 (>= l_0_12_253 0.0))
(assert
 (>= l_0_12_255 0.0))
(assert
 (>= l_0_12_258 0.0))
(assert
 (>= l_0_12_262 0.0))
(assert
 (>= l_0_12_267 0.0))
(assert
 (>= l_0_12_273 0.0))
(assert
 (>= l_0_12_274 0.0))
(assert
 (>= l_0_12_276 0.0))
(assert
 (>= l_0_12_279 0.0))
(assert
 (>= l_0_12_283 0.0))
(assert
 (>= l_0_12_288 0.0))
(assert
 (>= l_0_12_294 0.0))
(assert
 (>= l_0_12_295 0.0))
(assert
 (>= l_0_12_297 0.0))
(assert
 (>= l_0_12_300 0.0))
(assert
 (>= l_0_12_304 0.0))
(assert
 (>= l_0_12_309 0.0))
(assert
 (>= l_0_12_315 0.0))
(assert
 (let ((?x40845 (* l_0_13_3 l_0_13_3)))
 (let ((?x40846 (* 6.0 ?x40845)))
 (let ((?x40843 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x40840 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x40836 (* l_0_13_2 l_0_13_2)))
 (let ((?x40837 (* 6.0 ?x40836)))
 (let ((?x40834 (* l_0_13_192 l_0_13_192)))
 (let ((?x40844 (- (- (+ (- (- _a_12_ (* l_0_13_191 l_0_13_191)) ?x40834) ?x40837) ?x40840) ?x40843)))
 (let ((?x40853 (- (- (+ ?x40844 ?x40846) (* (* 1.0 l_0_13_44) l_0_13_44)) (* (* 1.0 l_0_13_45) l_0_13_45))))
 (let ((?x40859 (+ (+ ?x40853 (* 1.0 (* l_0_13_65 l_0_13_65))) (* 1.0 (* l_0_13_66 l_0_13_66)))))
 (= (- ?x40859 12.0) 0.0))))))))))))
(assert
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x40917 (* ?x40916 l_0_13_71)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x40914 (* ?x40913 l_0_13_70)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x40911 (* ?x40910 l_0_13_50)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x40908 (* ?x40907 l_0_13_49)))
 (let ((?x40845 (* l_0_13_3 l_0_13_3)))
 (let ((?x40903 (* 12.0 l_0_13_3)))
 (let ((?x40904 (* ?x40903 l_0_13_8)))
 (let ((?x19551 (* l_0_13_24 l_0_13_24)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x40900 (* ?x40899 l_0_13_29)))
 (let ((?x40868 (* l_0_13_23 l_0_13_23)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x40896 (* ?x40895 l_0_13_28)))
 (let ((?x40836 (* l_0_13_2 l_0_13_2)))
 (let ((?x40891 (* 12.0 l_0_13_2)))
 (let ((?x40892 (* ?x40891 l_0_13_7)))
 (let ((?x40890 (- (- _a_13_ (* (* 2.0 l_0_13_191) l_0_13_196)) (* (* 2.0 l_0_13_192) l_0_13_197))))
 (let ((?x40905 (+ (+ (- (+ (- (- (+ ?x40890 ?x40892) ?x40836) ?x40896) ?x40868) ?x40900) ?x19551) ?x40904)))
 (= (+ (+ (- (- (- ?x40905 ?x40845) ?x40908) ?x40911) ?x40914) ?x40917) 0.0))))))))))))))))))))))))
(assert
 (let ((?x40857 (* l_0_13_66 l_0_13_66)))
 (let ((?x40986 (* 3.0 ?x40857)))
 (let ((?x40854 (* l_0_13_65 l_0_13_65)))
 (let ((?x40984 (* 3.0 ?x40854)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x40982 (* ?x40981 l_0_13_65)))
 (let ((?x40979 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (let ((?x40976 (* (* 3.0 l_0_13_44) l_0_13_44)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x40973 (* ?x40972 l_0_13_44)))
 (let ((?x40845 (* l_0_13_3 l_0_13_3)))
 (let ((?x40846 (* 6.0 ?x40845)))
 (let ((?x40843 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x40840 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x40967 (* ?x40966 l_0_13_23)))
 (let ((?x40836 (* l_0_13_2 l_0_13_2)))
 (let ((?x40837 (* 6.0 ?x40836)))
 (let ((?x40960 (* l_0_13_129 l_0_13_129)))
 (let ((?x40961 (+ (+ (* (* 12.0 l_0_13_1) l_0_13_2) (* l_0_13_128 l_0_13_128)) ?x40960)))
 (let ((?x40969 (- (- (+ (- ?x40961 (* (* 2.0 l_0_13_190) l_0_13_191)) ?x40837) ?x40967) ?x40840)))
 (let ((?x40985 (+ (+ (- (- (- (+ (- ?x40969 ?x40843) ?x40846) ?x40973) ?x40976) ?x40979) ?x40982) ?x40984)))
 (= (- (+ ?x40985 ?x40986) 6.0) 0.0))))))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x41056 (* ?x41055 l_0_13_71)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x41053 (* ?x41052 l_0_13_70)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x41050 (* ?x41049 l_0_13_70)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x41047 (* ?x41046 l_0_13_50)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x41044 (* ?x41043 l_0_13_49)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x41041 (* ?x41040 l_0_13_49)))
 (let ((?x41038 (* l_0_13_22 l_0_13_22)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x41036 (* ?x40966 l_0_13_28)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x41034 (* ?x41033 l_0_13_133)))
 (let ((?x41035 (+ (- (* (* 12.0 l_0_13_1) l_0_13_7) (* l_0_13_1 l_0_13_1)) ?x41034)))
 (let ((?x41054 (+ (+ (- (- (- (+ (- ?x41035 ?x41036) ?x41038) ?x41041) ?x41044) ?x41047) ?x41050) ?x41053)))
 (= (+ ?x41054 ?x41056) 0.0)))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x41056 (* ?x41055 l_0_13_71)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x41053 (* ?x41052 l_0_13_70)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x41110 (* ?x40981 l_0_13_70)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x41047 (* ?x41046 l_0_13_50)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x41044 (* ?x41043 l_0_13_49)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x41106 (* ?x40972 l_0_13_49)))
 (let ((?x40903 (* 12.0 l_0_13_3)))
 (let ((?x40904 (* ?x40903 l_0_13_8)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x40900 (* ?x40899 l_0_13_29)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x40896 (* ?x40895 l_0_13_28)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x41036 (* ?x40966 l_0_13_28)))
 (let ((?x40891 (* 12.0 l_0_13_2)))
 (let ((?x40892 (* ?x40891 l_0_13_7)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x41094 (* ?x41093 l_0_13_134)))
 (let ((?x41082 (* 2.0 l_0_13_128)))
 (let ((?x41091 (* ?x41082 l_0_13_133)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x41030 (* ?x40956 l_0_13_7)))
 (let ((?x41097 (- (+ (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_2) ?x41030) ?x41091) ?x41094) (* (* 2.0 l_0_13_190) l_0_13_196))))
 (let ((?x41103 (- (- (+ (+ ?x41097 ?x40892) (* (* 2.0 l_0_13_22) l_0_13_23)) ?x41036) ?x40896)))
 (let ((?x41112 (+ (+ (- (- (- (+ (- ?x41103 ?x40900) ?x40904) ?x41106) ?x41044) ?x41047) ?x41110) ?x41053)))
 (= (+ ?x41112 ?x41056) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x41187 (* ?x41186 l_0_13_72)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x41184 (* ?x41183 l_0_13_71)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x41181 (* ?x41180 l_0_13_70)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x41110 (* ?x40981 l_0_13_70)))
 (let ((?x41177 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x41174 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x41171 (* ?x41170 l_0_13_51)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x41168 (* ?x41167 l_0_13_50)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x41106 (* ?x40972 l_0_13_49)))
 (let ((?x41161 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x41158 (* ?x41157 l_0_13_30)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x41155 (* ?x41154 l_0_13_29)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x41152 (* ?x41151 l_0_13_28)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x41147 (* ?x41146 l_0_13_135)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x41144 (* ?x41143 l_0_13_134)))
 (let ((?x41142 (+ (* (* (- 2.0) l_0_13_1) l_0_13_4) (* (* 2.0 l_0_13_130) l_0_13_133))))
 (let ((?x41153 (- (+ (+ (+ ?x41142 ?x41144) ?x41147) (* (* 2.0 l_0_13_22) l_0_13_25)) ?x41152)))
 (let ((?x41166 (- (+ (+ (- (- ?x41153 ?x41155) ?x41158) ?x41161) ?x41106) (* (* 6.0 l_0_13_46) l_0_13_49))))
 (let ((?x41185 (+ (+ (- (+ (+ (- (- ?x41166 ?x41168) ?x41171) ?x41174) ?x41177) ?x41110) ?x41181) ?x41184)))
 (= (+ ?x41185 ?x41187) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x41296 (* l_0_13_9 l_0_13_9)))
 (let ((?x41297 (* 6.0 ?x41296)))
 (let ((?x41293 (* l_0_13_8 l_0_13_8)))
 (let ((?x41294 (* 6.0 ?x41293)))
 (let ((?x41290 (* l_0_13_73 l_0_13_73)))
 (let ((?x41291 (* 3.0 ?x41290)))
 (let ((?x41287 (* l_0_13_72 l_0_13_72)))
 (let ((?x41288 (* 3.0 ?x41287)))
 (let ((?x41284 (* l_0_13_71 l_0_13_71)))
 (let ((?x41285 (* 3.0 ?x41284)))
 (let ((?x41281 (* l_0_13_70 l_0_13_70)))
 (let ((?x41282 (* 3.0 ?x41281)))
 (let ((?x41278 (* l_0_13_7 l_0_13_7)))
 (let ((?x41279 (* 6.0 ?x41278)))
 (let ((?x41276 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x41273 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x41270 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x41264 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x41261 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x41258 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x41255 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x41250 (* l_0_13_136 l_0_13_136)))
 (let ((?x41248 (* l_0_13_135 l_0_13_135)))
 (let ((?x41246 (* l_0_13_134 l_0_13_134)))
 (let ((?x41244 (* l_0_13_133 l_0_13_133)))
 (let ((?x19856 (* l_0_13_10 l_0_13_10)))
 (let ((?x19864 (* 6.0 ?x19856)))
 (let ((?x41249 (+ (+ (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_7) ?x19864) ?x41244) ?x41246) ?x41248)))
 (let ((?x41259 (- (- (+ (+ ?x41249 ?x41250) (* (* 2.0 l_0_13_22) l_0_13_28)) ?x41255) ?x41258)))
 (let ((?x41271 (- (- (- (- ?x41259 ?x41261) ?x41264) (* (* 3.0 l_0_13_49) l_0_13_49)) ?x41270)))
 (let ((?x41292 (+ (+ (+ (+ (+ (- (- ?x41271 ?x41273) ?x41276) ?x41279) ?x41282) ?x41285) ?x41288) ?x41291)))
 (= (+ (+ ?x41292 ?x41294) ?x41297) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x41417 (* ?x41416 l_0_13_91)))
 (let ((?x41413 (* 6.0 l_0_13_73)))
 (let ((?x41414 (* ?x41413 l_0_13_77)))
 (let ((?x41410 (* 6.0 l_0_13_72)))
 (let ((?x41411 (* ?x41410 l_0_13_76)))
 (let ((?x41407 (* 6.0 l_0_13_71)))
 (let ((?x41408 (* ?x41407 l_0_13_75)))
 (let ((?x41404 (* 6.0 l_0_13_70)))
 (let ((?x41405 (* ?x41404 l_0_13_74)))
 (let ((?x41401 (* 6.0 l_0_13_52)))
 (let ((?x41402 (* ?x41401 l_0_13_56)))
 (let ((?x41398 (* 6.0 l_0_13_51)))
 (let ((?x41399 (* ?x41398 l_0_13_55)))
 (let ((?x41395 (* 6.0 l_0_13_50)))
 (let ((?x41396 (* ?x41395 l_0_13_54)))
 (let ((?x41389 (* 12.0 l_0_13_31)))
 (let ((?x41390 (* ?x41389 l_0_13_35)))
 (let ((?x41386 (* 12.0 l_0_13_30)))
 (let ((?x41387 (* ?x41386 l_0_13_34)))
 (let ((?x41383 (* 12.0 l_0_13_29)))
 (let ((?x41384 (* ?x41383 l_0_13_33)))
 (let ((?x41380 (* 12.0 l_0_13_28)))
 (let ((?x41381 (* ?x41380 l_0_13_32)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x41376 (* ?x41375 l_0_13_175)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x41373 (* ?x41372 l_0_13_154)))
 (let ((?x41369 (* 2.0 l_0_13_136)))
 (let ((?x41370 (* ?x41369 l_0_13_140)))
 (let ((?x41366 (* 2.0 l_0_13_135)))
 (let ((?x41367 (* ?x41366 l_0_13_139)))
 (let ((?x41363 (* 2.0 l_0_13_134)))
 (let ((?x41364 (* ?x41363 l_0_13_138)))
 (let ((?x41360 (* 2.0 l_0_13_133)))
 (let ((?x41361 (* ?x41360 l_0_13_137)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x41358 (* ?x41357 l_0_13_9)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x41355 (* ?x41354 l_0_13_8)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x41352 (* ?x41351 l_0_13_7)))
 (let ((?x41345 (* 12.0 l_0_13_10)))
 (let ((?x41346 (* ?x41345 l_0_13_14)))
 (let ((?x41350 (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_11) ?x41346) (* (* 2.0 l_0_13_106) l_0_13_112))))
 (let ((?x41371 (+ (+ (+ (+ (+ (+ (+ ?x41350 ?x41352) ?x41355) ?x41358) ?x41361) ?x41364) ?x41367) ?x41370)))
 (let ((?x41382 (- (+ (+ (- ?x41371 ?x41373) ?x41376) (* (* 2.0 l_0_13_22) l_0_13_32)) ?x41381)))
 (let ((?x41394 (- (- (- (- ?x41382 ?x41384) ?x41387) ?x41390) (* (* 6.0 l_0_13_49) l_0_13_53))))
 (let ((?x41415 (+ (+ (+ (+ (- (- (- ?x41394 ?x41396) ?x41399) ?x41402) ?x41405) ?x41408) ?x41411) ?x41414)))
 (= (- ?x41415 ?x41417) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41413 (* 6.0 l_0_13_73)))
 (let ((?x41519 (* ?x41413 l_0_13_82)))
 (let ((?x41410 (* 6.0 l_0_13_72)))
 (let ((?x41517 (* ?x41410 l_0_13_81)))
 (let ((?x41407 (* 6.0 l_0_13_71)))
 (let ((?x41515 (* ?x41407 l_0_13_80)))
 (let ((?x41404 (* 6.0 l_0_13_70)))
 (let ((?x41513 (* ?x41404 l_0_13_79)))
 (let ((?x41401 (* 6.0 l_0_13_52)))
 (let ((?x41511 (* ?x41401 l_0_13_61)))
 (let ((?x41398 (* 6.0 l_0_13_51)))
 (let ((?x41509 (* ?x41398 l_0_13_60)))
 (let ((?x41395 (* 6.0 l_0_13_50)))
 (let ((?x41507 (* ?x41395 l_0_13_59)))
 (let ((?x41389 (* 12.0 l_0_13_31)))
 (let ((?x41503 (* ?x41389 l_0_13_40)))
 (let ((?x41386 (* 12.0 l_0_13_30)))
 (let ((?x41501 (* ?x41386 l_0_13_39)))
 (let ((?x41383 (* 12.0 l_0_13_29)))
 (let ((?x41499 (* ?x41383 l_0_13_38)))
 (let ((?x41380 (* 12.0 l_0_13_28)))
 (let ((?x41497 (* ?x41380 l_0_13_37)))
 (let ((?x41492 (* 12.0 l_0_13_18)))
 (let ((?x41493 (* ?x41492 l_0_13_9)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x41490 (* ?x41489 l_0_13_8)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x41487 (* ?x41486 l_0_13_7)))
 (let ((?x41369 (* 2.0 l_0_13_136)))
 (let ((?x41484 (* ?x41369 l_0_13_145)))
 (let ((?x41366 (* 2.0 l_0_13_135)))
 (let ((?x41482 (* ?x41366 l_0_13_144)))
 (let ((?x41363 (* 2.0 l_0_13_134)))
 (let ((?x18806 (* ?x41363 l_0_13_143)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x41034 (* ?x41033 l_0_13_133)))
 (let ((?x41345 (* 12.0 l_0_13_10)))
 (let ((?x19914 (* ?x41345 l_0_13_19)))
 (let ((?x18805 (+ (- (+ (* (* (- 2.0) l_0_13_1) l_0_13_16) ?x19914) ?x41034) (* (* 2.0 l_0_13_133) l_0_13_142))))
 (let ((?x41496 (+ (+ (+ (+ (+ (+ (+ ?x18805 ?x18806) ?x41482) ?x41484) ?x41487) ?x41490) ?x41493) (* (* 2.0 l_0_13_22) l_0_13_37))))
 (let ((?x41506 (- (- (- (- (- ?x41496 ?x41497) ?x41499) ?x41501) ?x41503) (* (* 6.0 l_0_13_49) l_0_13_58))))
 (let ((?x41520 (+ (+ (+ (+ (- (- (- ?x41506 ?x41507) ?x41509) ?x41511) ?x41513) ?x41515) ?x41517) ?x41519)))
 (= ?x41520 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x41629 (* ?x41628 l_0_13_72)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x41626 (* ?x41625 l_0_13_71)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x41623 (* ?x41622 l_0_13_70)))
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x40917 (* ?x40916 l_0_13_71)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x40914 (* ?x40913 l_0_13_70)))
 (let ((?x41177 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x41174 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x41616 (* ?x41615 l_0_13_51)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x41613 (* ?x41612 l_0_13_50)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x41610 (* ?x41609 l_0_13_49)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x40911 (* ?x40910 l_0_13_50)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x40908 (* ?x40907 l_0_13_49)))
 (let ((?x41161 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x41158 (* ?x41157 l_0_13_30)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x41155 (* ?x41154 l_0_13_29)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x41152 (* ?x41151 l_0_13_28)))
 (let ((?x41587 (- (* (* (- 2.0) l_0_13_193) l_0_13_196) (* (* 2.0 l_0_13_194) l_0_13_197))))
 (let ((?x41593 (- (- ?x41587 (* (* 2.0 l_0_13_195) l_0_13_198)) (* (* 2.0 l_0_13_2) l_0_13_4))))
 (let ((?x41599 (+ (+ ?x41593 (* (* 2.0 l_0_13_23) l_0_13_25)) (* (* 2.0 l_0_13_24) l_0_13_26))))
 (let ((?x41605 (- (- (- (- ?x41599 ?x41152) ?x41155) ?x41158) (* (* 2.0 l_0_13_3) l_0_13_5))))
 (let ((?x41618 (+ (- (- (- (+ (+ (+ ?x41605 ?x41161) ?x40908) ?x40911) ?x41610) ?x41613) ?x41616) ?x41174)))
 (= (+ (+ (+ (- (- (+ ?x41618 ?x41177) ?x40914) ?x40917) ?x41623) ?x41626) ?x41629) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41296 (* l_0_13_9 l_0_13_9)))
 (let ((?x41297 (* 6.0 ?x41296)))
 (let ((?x41293 (* l_0_13_8 l_0_13_8)))
 (let ((?x41294 (* 6.0 ?x41293)))
 (let ((?x41278 (* l_0_13_7 l_0_13_7)))
 (let ((?x41279 (* 6.0 ?x41278)))
 (let ((?x41264 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x41261 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x41258 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x41255 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x41679 (* l_0_13_199 l_0_13_199)))
 (let ((?x41677 (* l_0_13_198 l_0_13_198)))
 (let ((?x41675 (* l_0_13_197 l_0_13_197)))
 (let ((?x41673 (* l_0_13_196 l_0_13_196)))
 (let ((?x19856 (* l_0_13_10 l_0_13_10)))
 (let ((?x19864 (* 6.0 ?x19856)))
 (let ((?x41682 (- (- (- (- (- ?x19864 ?x41673) ?x41675) ?x41677) ?x41679) (* (* 2.0 l_0_13_2) l_0_13_7))))
 (let ((?x41686 (+ (+ ?x41682 (* (* 2.0 l_0_13_23) l_0_13_28)) (* (* 2.0 l_0_13_24) l_0_13_29))))
 (let ((?x41691 (- (- (- (- ?x41686 ?x41255) ?x41258) (* (* 2.0 l_0_13_3) l_0_13_8)) ?x41261)))
 (let ((?x41698 (- (- (- ?x41691 ?x41264) (* (* 1.0 l_0_13_49) l_0_13_49)) (* (* 1.0 l_0_13_50) l_0_13_50))))
 (let ((?x41704 (- (- ?x41698 (* (* 1.0 l_0_13_51) l_0_13_51)) (* (* 1.0 l_0_13_52) l_0_13_52))))
 (let ((?x41709 (+ (+ (+ ?x41704 ?x41279) (* 1.0 (* l_0_13_70 l_0_13_70))) (* 1.0 (* l_0_13_71 l_0_13_71)))))
 (let ((?x41713 (+ (+ ?x41709 (* 1.0 (* l_0_13_72 l_0_13_72))) (* 1.0 (* l_0_13_73 l_0_13_73)))))
 (= (+ (+ ?x41713 ?x41294) ?x41297) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x41794 (* ?x41793 l_0_13_92)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x41791 (* ?x41790 l_0_13_91)))
 (let ((?x41787 (* 2.0 l_0_13_73)))
 (let ((?x41788 (* ?x41787 l_0_13_77)))
 (let ((?x41784 (* 2.0 l_0_13_72)))
 (let ((?x41785 (* ?x41784 l_0_13_76)))
 (let ((?x41781 (* 2.0 l_0_13_71)))
 (let ((?x41782 (* ?x41781 l_0_13_75)))
 (let ((?x41778 (* 2.0 l_0_13_70)))
 (let ((?x41779 (* ?x41778 l_0_13_74)))
 (let ((?x41775 (* 2.0 l_0_13_52)))
 (let ((?x41776 (* ?x41775 l_0_13_56)))
 (let ((?x41772 (* 2.0 l_0_13_51)))
 (let ((?x41773 (* ?x41772 l_0_13_55)))
 (let ((?x41769 (* 2.0 l_0_13_50)))
 (let ((?x41770 (* ?x41769 l_0_13_54)))
 (let ((?x41766 (* 2.0 l_0_13_49)))
 (let ((?x41767 (* ?x41766 l_0_13_53)))
 (let ((?x41389 (* 12.0 l_0_13_31)))
 (let ((?x41390 (* ?x41389 l_0_13_35)))
 (let ((?x41386 (* 12.0 l_0_13_30)))
 (let ((?x41387 (* ?x41386 l_0_13_34)))
 (let ((?x41383 (* 12.0 l_0_13_29)))
 (let ((?x41384 (* ?x41383 l_0_13_33)))
 (let ((?x41380 (* 12.0 l_0_13_28)))
 (let ((?x41381 (* ?x41380 l_0_13_32)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x41744 (* ?x41743 l_0_13_176)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x41741 (* ?x41740 l_0_13_175)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x41738 (* ?x41737 l_0_13_155)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x41735 (* ?x41734 l_0_13_154)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x41358 (* ?x41357 l_0_13_9)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x41355 (* ?x41354 l_0_13_8)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x41352 (* ?x41351 l_0_13_7)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x20198 (* ?x20191 l_0_13_113)))
 (let ((?x41345 (* 12.0 l_0_13_10)))
 (let ((?x41346 (* ?x41345 l_0_13_14)))
 (let ((?x41727 (- (+ (+ ?x41346 (* (* 2.0 l_0_13_107) l_0_13_112)) ?x20198) (* (* 2.0 l_0_13_11) l_0_13_2))))
 (let ((?x41733 (+ (+ (- (+ ?x41727 ?x41352) (* (* 2.0 l_0_13_12) l_0_13_3)) ?x41355) ?x41358)))
 (let ((?x41748 (- (+ (+ (- (- ?x41733 ?x41735) ?x41738) ?x41741) ?x41744) (* (* 2.0 l_0_13_196) l_0_13_200))))
 (let ((?x41754 (- (- ?x41748 (* (* 2.0 l_0_13_197) l_0_13_201)) (* (* 2.0 l_0_13_198) l_0_13_202))))
 (let ((?x41759 (+ (- ?x41754 (* (* 2.0 l_0_13_199) l_0_13_203)) (* (* 2.0 l_0_13_23) l_0_13_32))))
 (let ((?x41764 (- (- (- (+ ?x41759 (* (* 2.0 l_0_13_24) l_0_13_33)) ?x41381) ?x41384) ?x41387)))
 (let ((?x41783 (+ (+ (- (- (- (- (- ?x41764 ?x41390) ?x41767) ?x41770) ?x41773) ?x41776) ?x41779) ?x41782)))
 (= (- (- (+ (+ ?x41783 ?x41785) ?x41788) ?x41791) ?x41794) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41787 (* 2.0 l_0_13_73)))
 (let ((?x41892 (* ?x41787 l_0_13_82)))
 (let ((?x41784 (* 2.0 l_0_13_72)))
 (let ((?x41890 (* ?x41784 l_0_13_81)))
 (let ((?x41781 (* 2.0 l_0_13_71)))
 (let ((?x41888 (* ?x41781 l_0_13_80)))
 (let ((?x41778 (* 2.0 l_0_13_70)))
 (let ((?x41886 (* ?x41778 l_0_13_79)))
 (let ((?x41775 (* 2.0 l_0_13_52)))
 (let ((?x41884 (* ?x41775 l_0_13_61)))
 (let ((?x41772 (* 2.0 l_0_13_51)))
 (let ((?x41882 (* ?x41772 l_0_13_60)))
 (let ((?x41769 (* 2.0 l_0_13_50)))
 (let ((?x41880 (* ?x41769 l_0_13_59)))
 (let ((?x41766 (* 2.0 l_0_13_49)))
 (let ((?x41878 (* ?x41766 l_0_13_58)))
 (let ((?x41389 (* 12.0 l_0_13_31)))
 (let ((?x41503 (* ?x41389 l_0_13_40)))
 (let ((?x41386 (* 12.0 l_0_13_30)))
 (let ((?x41501 (* ?x41386 l_0_13_39)))
 (let ((?x41383 (* 12.0 l_0_13_29)))
 (let ((?x41499 (* ?x41383 l_0_13_38)))
 (let ((?x41380 (* 12.0 l_0_13_28)))
 (let ((?x41497 (* ?x41380 l_0_13_37)))
 (let ((?x41492 (* 12.0 l_0_13_18)))
 (let ((?x41493 (* ?x41492 l_0_13_9)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x41490 (* ?x41489 l_0_13_8)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x41487 (* ?x41486 l_0_13_7)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x41094 (* ?x41093 l_0_13_134)))
 (let ((?x41082 (* 2.0 l_0_13_128)))
 (let ((?x41091 (* ?x41082 l_0_13_133)))
 (let ((?x41345 (* 12.0 l_0_13_10)))
 (let ((?x19914 (* ?x41345 l_0_13_19)))
 (let ((?x41856 (+ (- (- (- ?x19914 ?x41091) ?x41094) (* (* 2.0 l_0_13_16) l_0_13_2)) ?x41487)))
 (let ((?x41863 (- (+ (+ (- ?x41856 (* (* 2.0 l_0_13_17) l_0_13_3)) ?x41490) ?x41493) (* (* 2.0 l_0_13_196) l_0_13_205))))
 (let ((?x41867 (- (- ?x41863 (* (* 2.0 l_0_13_197) l_0_13_206)) (* (* 2.0 l_0_13_198) l_0_13_207))))
 (let ((?x41871 (+ (- ?x41867 (* (* 2.0 l_0_13_199) l_0_13_208)) (* (* 2.0 l_0_13_23) l_0_13_37))))
 (let ((?x41876 (- (- (- (+ ?x41871 (* (* 2.0 l_0_13_24) l_0_13_38)) ?x41497) ?x41499) ?x41501)))
 (let ((?x41889 (+ (+ (- (- (- (- (- ?x41876 ?x41503) ?x41878) ?x41880) ?x41882) ?x41884) ?x41886) ?x41888)))
 (= (+ (+ ?x41889 ?x41890) ?x41892) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x41629 (* ?x41628 l_0_13_72)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x41626 (* ?x41625 l_0_13_71)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x41623 (* ?x41622 l_0_13_70)))
 (let ((?x41928 (* l_0_13_6 l_0_13_6)))
 (let ((?x41926 (* l_0_13_5 l_0_13_5)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x41616 (* ?x41615 l_0_13_51)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x41613 (* ?x41612 l_0_13_50)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x41610 (* ?x41609 l_0_13_49)))
 (let ((?x41921 (* l_0_13_4 l_0_13_4)))
 (let ((?x31215 (* l_0_13_27 l_0_13_27)))
 (let ((?x41922 (- (+ (+ (* l_0_13_25 l_0_13_25) (* l_0_13_26 l_0_13_26)) ?x31215) ?x41921)))
 (let ((?x41931 (- (- (- (- (+ (+ (+ ?x41922 ?x41610) ?x41613) ?x41616) ?x41926) ?x41928) ?x41623) ?x41626)))
 (= (- ?x41931 ?x41629) 0.0))))))))))))))))))))
(assert
 (let ((?x41290 (* l_0_13_73 l_0_13_73)))
 (let ((?x41287 (* l_0_13_72 l_0_13_72)))
 (let ((?x41284 (* l_0_13_71 l_0_13_71)))
 (let ((?x41281 (* l_0_13_70 l_0_13_70)))
 (let ((?x41339 (* l_0_13_52 l_0_13_52)))
 (let ((?x19893 (* l_0_13_51 l_0_13_51)))
 (let ((?x19889 (* l_0_13_50 l_0_13_50)))
 (let ((?x41327 (* l_0_13_49 l_0_13_49)))
 (let ((?x41943 (+ (* (* 2.0 l_0_13_25) l_0_13_28) (* (* 2.0 l_0_13_26) l_0_13_29))))
 (let ((?x41949 (- (+ ?x41943 (* (* 2.0 l_0_13_27) l_0_13_30)) (* (* 2.0 l_0_13_4) l_0_13_7))))
 (let ((?x41955 (+ (+ (- (+ ?x41949 ?x41327) (* (* 2.0 l_0_13_5) l_0_13_8)) ?x19889) ?x19893)))
 (let ((?x41961 (- (- (- (+ ?x41955 ?x41339) (* (* 2.0 l_0_13_6) l_0_13_9)) ?x41281) ?x41284)))
 (= (- (- ?x41961 ?x41287) ?x41290) 0.0))))))))))))))
(assert
 (let ((?x42042 (* 2.0 l_0_13_90)))
 (let ((?x42043 (* ?x42042 l_0_13_93)))
 (let ((?x42039 (* 2.0 l_0_13_89)))
 (let ((?x42040 (* ?x42039 l_0_13_92)))
 (let ((?x42036 (* 2.0 l_0_13_88)))
 (let ((?x42037 (* ?x42036 l_0_13_91)))
 (let ((?x41787 (* 2.0 l_0_13_73)))
 (let ((?x41788 (* ?x41787 l_0_13_77)))
 (let ((?x41784 (* 2.0 l_0_13_72)))
 (let ((?x41785 (* ?x41784 l_0_13_76)))
 (let ((?x41781 (* 2.0 l_0_13_71)))
 (let ((?x41782 (* ?x41781 l_0_13_75)))
 (let ((?x41778 (* 2.0 l_0_13_70)))
 (let ((?x41779 (* ?x41778 l_0_13_74)))
 (let ((?x41775 (* 2.0 l_0_13_52)))
 (let ((?x41776 (* ?x41775 l_0_13_56)))
 (let ((?x41772 (* 2.0 l_0_13_51)))
 (let ((?x41773 (* ?x41772 l_0_13_55)))
 (let ((?x41769 (* 2.0 l_0_13_50)))
 (let ((?x41770 (* ?x41769 l_0_13_54)))
 (let ((?x41766 (* 2.0 l_0_13_49)))
 (let ((?x41767 (* ?x41766 l_0_13_53)))
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x42020 (* ?x42019 l_0_13_177)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x42017 (* ?x42016 l_0_13_176)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x42014 (* ?x42013 l_0_13_175)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x42011 (* ?x42010 l_0_13_156)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x42008 (* ?x42007 l_0_13_155)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x42005 (* ?x42004 l_0_13_154)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x41997 (* ?x41996 l_0_13_114)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x41994 (* ?x41993 l_0_13_113)))
 (let ((?x41992 (- (* (* 2.0 l_0_13_109) l_0_13_112) (* (* 2.0 l_0_13_11) l_0_13_4))))
 (let ((?x42003 (- (- (+ (+ ?x41992 ?x41994) ?x41997) (* (* 2.0 l_0_13_12) l_0_13_5)) (* (* 2.0 l_0_13_13) l_0_13_6))))
 (let ((?x42023 (+ (+ (+ (+ (- (- (- ?x42003 ?x42005) ?x42008) ?x42011) ?x42014) ?x42017) ?x42020) (* (* 2.0 l_0_13_25) l_0_13_32))))
 (let ((?x42027 (+ (+ ?x42023 (* (* 2.0 l_0_13_26) l_0_13_33)) (* (* 2.0 l_0_13_27) l_0_13_34))))
 (let ((?x42034 (- (- (- (+ (+ (+ (+ ?x42027 ?x41767) ?x41770) ?x41773) ?x41776) ?x41779) ?x41782) ?x41785)))
 (= (- (- (- (- ?x42034 ?x41788) ?x42037) ?x42040) ?x42043) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41787 (* 2.0 l_0_13_73)))
 (let ((?x41892 (* ?x41787 l_0_13_82)))
 (let ((?x41784 (* 2.0 l_0_13_72)))
 (let ((?x41890 (* ?x41784 l_0_13_81)))
 (let ((?x41781 (* 2.0 l_0_13_71)))
 (let ((?x41888 (* ?x41781 l_0_13_80)))
 (let ((?x41778 (* 2.0 l_0_13_70)))
 (let ((?x41886 (* ?x41778 l_0_13_79)))
 (let ((?x41775 (* 2.0 l_0_13_52)))
 (let ((?x41884 (* ?x41775 l_0_13_61)))
 (let ((?x41772 (* 2.0 l_0_13_51)))
 (let ((?x41882 (* ?x41772 l_0_13_60)))
 (let ((?x41769 (* 2.0 l_0_13_50)))
 (let ((?x41880 (* ?x41769 l_0_13_59)))
 (let ((?x41766 (* 2.0 l_0_13_49)))
 (let ((?x41878 (* ?x41766 l_0_13_58)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x41147 (* ?x41146 l_0_13_135)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x41144 (* ?x41143 l_0_13_134)))
 (let ((?x42095 (- (- (- (* (* (- 2.0) l_0_13_130) l_0_13_133) ?x41144) ?x41147) (* (* 2.0 l_0_13_16) l_0_13_4))))
 (let ((?x42100 (- (- ?x42095 (* (* 2.0 l_0_13_17) l_0_13_5)) (* (* 2.0 l_0_13_18) l_0_13_6))))
 (let ((?x42104 (+ (+ ?x42100 (* (* 2.0 l_0_13_25) l_0_13_37)) (* (* 2.0 l_0_13_26) l_0_13_38))))
 (let ((?x42109 (+ (+ (+ (+ ?x42104 (* (* 2.0 l_0_13_27) l_0_13_39)) ?x41878) ?x41880) ?x41882)))
 (= (- (- (- (- (+ ?x42109 ?x41884) ?x41886) ?x41888) ?x41890) ?x41892) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41296 (* l_0_13_9 l_0_13_9)))
 (let ((?x41293 (* l_0_13_8 l_0_13_8)))
 (let ((?x41278 (* l_0_13_7 l_0_13_7)))
 (let ((?x41321 (* l_0_13_31 l_0_13_31)))
 (let ((?x41315 (* l_0_13_30 l_0_13_30)))
 (let ((?x41309 (* l_0_13_29 l_0_13_29)))
 (let ((?x31463 (+ (+ (* (- l_0_13_10) l_0_13_10) (* l_0_13_28 l_0_13_28)) ?x41309)))
 (= (- (- (- (+ (+ ?x31463 ?x41315) ?x41321) ?x41278) ?x41293) ?x41296) 0.0)))))))))
(assert
 (let ((?x42193 (* l_0_13_94 l_0_13_94)))
 (let ((?x42191 (* l_0_13_93 l_0_13_93)))
 (let ((?x42189 (* l_0_13_92 l_0_13_92)))
 (let ((?x42187 (* l_0_13_91 l_0_13_91)))
 (let ((?x42173 (* l_0_13_178 l_0_13_178)))
 (let ((?x42171 (* l_0_13_177 l_0_13_177)))
 (let ((?x42169 (* l_0_13_176 l_0_13_176)))
 (let ((?x42167 (* l_0_13_175 l_0_13_175)))
 (let ((?x42165 (* l_0_13_157 l_0_13_157)))
 (let ((?x42163 (* l_0_13_156 l_0_13_156)))
 (let ((?x42161 (* l_0_13_155 l_0_13_155)))
 (let ((?x42159 (* l_0_13_154 l_0_13_154)))
 (let ((?x42153 (* l_0_13_115 l_0_13_115)))
 (let ((?x42151 (* l_0_13_114 l_0_13_114)))
 (let ((?x42149 (* l_0_13_113 l_0_13_113)))
 (let ((?x42147 (* l_0_13_112 l_0_13_112)))
 (let ((?x42146 (- (* (* (- 2.0) l_0_13_10) l_0_13_14) (* (* 2.0 l_0_13_11) l_0_13_7))))
 (let ((?x42156 (- (+ (+ (+ (+ ?x42146 ?x42147) ?x42149) ?x42151) ?x42153) (* (* 2.0 l_0_13_12) l_0_13_8))))
 (let ((?x42164 (- (- (- (- ?x42156 (* (* 2.0 l_0_13_13) l_0_13_9)) ?x42159) ?x42161) ?x42163)))
 (let ((?x42177 (+ (+ (+ (+ (+ (- ?x42164 ?x42165) ?x42167) ?x42169) ?x42171) ?x42173) (* (* 2.0 l_0_13_28) l_0_13_32))))
 (let ((?x42183 (+ (+ ?x42177 (* (* 2.0 l_0_13_29) l_0_13_33)) (* (* 2.0 l_0_13_30) l_0_13_34))))
 (let ((?x42192 (- (- (- (+ ?x42183 (* (* 2.0 l_0_13_31) l_0_13_35)) ?x42187) ?x42189) ?x42191)))
 (= (- ?x42192 ?x42193) 0.0))))))))))))))))))))))))
(assert
 (let ((?x41250 (* l_0_13_136 l_0_13_136)))
 (let ((?x41248 (* l_0_13_135 l_0_13_135)))
 (let ((?x41246 (* l_0_13_134 l_0_13_134)))
 (let ((?x41244 (* l_0_13_133 l_0_13_133)))
 (let ((?x42227 (- (- (- (- (* (* (- 2.0) l_0_13_10) l_0_13_19) ?x41244) ?x41246) ?x41248) ?x41250)))
 (let ((?x42231 (- (- ?x42227 (* (* 2.0 l_0_13_16) l_0_13_7)) (* (* 2.0 l_0_13_17) l_0_13_8))))
 (let ((?x42235 (+ (- ?x42231 (* (* 2.0 l_0_13_18) l_0_13_9)) (* (* 2.0 l_0_13_28) l_0_13_37))))
 (let ((?x42239 (+ (+ ?x42235 (* (* 2.0 l_0_13_29) l_0_13_38)) (* (* 2.0 l_0_13_30) l_0_13_39))))
 (= (+ ?x42239 (* (* 2.0 l_0_13_31) l_0_13_40)) 0.0))))))))))
(assert
 (let ((?x42318 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x42315 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x42312 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x42309 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x42306 (* l_0_13_36 l_0_13_36)))
 (let ((?x42304 (* l_0_13_35 l_0_13_35)))
 (let ((?x42302 (* l_0_13_34 l_0_13_34)))
 (let ((?x42300 (* l_0_13_33 l_0_13_33)))
 (let ((?x42298 (* l_0_13_32 l_0_13_32)))
 (let ((?x42295 (* 2.0 l_0_13_178)))
 (let ((?x42296 (* ?x42295 l_0_13_182)))
 (let ((?x42292 (* 2.0 l_0_13_177)))
 (let ((?x42293 (* ?x42292 l_0_13_181)))
 (let ((?x42289 (* 2.0 l_0_13_176)))
 (let ((?x42290 (* ?x42289 l_0_13_180)))
 (let ((?x42286 (* 2.0 l_0_13_175)))
 (let ((?x42287 (* ?x42286 l_0_13_179)))
 (let ((?x42283 (* 2.0 l_0_13_157)))
 (let ((?x42284 (* ?x42283 l_0_13_161)))
 (let ((?x42280 (* 2.0 l_0_13_156)))
 (let ((?x42281 (* ?x42280 l_0_13_160)))
 (let ((?x42277 (* 2.0 l_0_13_155)))
 (let ((?x42278 (* ?x42277 l_0_13_159)))
 (let ((?x42274 (* 2.0 l_0_13_154)))
 (let ((?x42275 (* ?x42274 l_0_13_158)))
 (let ((?x42272 (* l_0_13_15 l_0_13_15)))
 (let ((?x42270 (* l_0_13_14 l_0_13_14)))
 (let ((?x42268 (* l_0_13_13 l_0_13_13)))
 (let ((?x42266 (* l_0_13_12 l_0_13_12)))
 (let ((?x42263 (* 2.0 l_0_13_115)))
 (let ((?x42264 (* ?x42263 l_0_13_119)))
 (let ((?x42260 (* 2.0 l_0_13_114)))
 (let ((?x42261 (* ?x42260 l_0_13_118)))
 (let ((?x42257 (* 2.0 l_0_13_113)))
 (let ((?x42258 (* ?x42257 l_0_13_117)))
 (let ((?x42256 (+ (* (- l_0_13_11) l_0_13_11) (* (* 2.0 l_0_13_112) l_0_13_116))))
 (let ((?x42273 (- (- (- (- (+ (+ (+ ?x42256 ?x42258) ?x42261) ?x42264) ?x42266) ?x42268) ?x42270) ?x42272)))
 (let ((?x42294 (+ (+ (+ (- (- (- (- ?x42273 ?x42275) ?x42278) ?x42281) ?x42284) ?x42287) ?x42290) ?x42293)))
 (let ((?x42310 (- (+ (+ (+ (+ (+ (+ ?x42294 ?x42296) ?x42298) ?x42300) ?x42302) ?x42304) ?x42306) ?x42309)))
 (= (- (- (- ?x42310 ?x42312) ?x42315) ?x42318) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42295 (* 2.0 l_0_13_178)))
 (let ((?x42429 (* ?x42295 l_0_13_187)))
 (let ((?x42292 (* 2.0 l_0_13_177)))
 (let ((?x42427 (* ?x42292 l_0_13_186)))
 (let ((?x42289 (* 2.0 l_0_13_176)))
 (let ((?x42425 (* ?x42289 l_0_13_185)))
 (let ((?x42286 (* 2.0 l_0_13_175)))
 (let ((?x42423 (* ?x42286 l_0_13_184)))
 (let ((?x42283 (* 2.0 l_0_13_157)))
 (let ((?x42421 (* ?x42283 l_0_13_166)))
 (let ((?x42280 (* 2.0 l_0_13_156)))
 (let ((?x42419 (* ?x42280 l_0_13_165)))
 (let ((?x42277 (* 2.0 l_0_13_155)))
 (let ((?x42417 (* ?x42277 l_0_13_164)))
 (let ((?x42274 (* 2.0 l_0_13_154)))
 (let ((?x42415 (* ?x42274 l_0_13_163)))
 (let ((?x41369 (* 2.0 l_0_13_136)))
 (let ((?x41370 (* ?x41369 l_0_13_140)))
 (let ((?x41366 (* 2.0 l_0_13_135)))
 (let ((?x41367 (* ?x41366 l_0_13_139)))
 (let ((?x41363 (* 2.0 l_0_13_134)))
 (let ((?x41364 (* ?x41363 l_0_13_138)))
 (let ((?x41360 (* 2.0 l_0_13_133)))
 (let ((?x41361 (* ?x41360 l_0_13_137)))
 (let ((?x42263 (* 2.0 l_0_13_115)))
 (let ((?x42399 (* ?x42263 l_0_13_124)))
 (let ((?x42260 (* 2.0 l_0_13_114)))
 (let ((?x42397 (* ?x42260 l_0_13_123)))
 (let ((?x42257 (* 2.0 l_0_13_113)))
 (let ((?x42395 (* ?x42257 l_0_13_122)))
 (let ((?x42254 (* 2.0 l_0_13_112)))
 (let ((?x42393 (* ?x42254 l_0_13_121)))
 (let ((?x42388 (* 2.0 l_0_13_103)))
 (let ((?x42389 (* ?x42388 l_0_13_94)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x42386 (* ?x42385 l_0_13_93)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x42383 (* ?x42382 l_0_13_92)))
 (let ((?x42392 (- (- (- (- (* (* (- 2.0) l_0_13_100) l_0_13_91) ?x42383) ?x42386) ?x42389) (* (* 2.0 l_0_13_11) l_0_13_16))))
 (let ((?x42402 (- (+ (+ (+ (+ ?x42392 ?x42393) ?x42395) ?x42397) ?x42399) (* (* 2.0 l_0_13_12) l_0_13_17))))
 (let ((?x42407 (- (- (- (- ?x42402 (* (* 2.0 l_0_13_13) l_0_13_18)) ?x41361) ?x41364) ?x41367)))
 (let ((?x42414 (- (- (- ?x42407 ?x41370) (* (* 2.0 l_0_13_14) l_0_13_19)) (* (* 2.0 l_0_13_15) l_0_13_20))))
 (let ((?x42428 (+ (+ (+ (- (- (- (- ?x42414 ?x42415) ?x42417) ?x42419) ?x42421) ?x42423) ?x42425) ?x42427)))
 (let ((?x42436 (+ (+ (+ ?x42428 ?x42429) (* (* 2.0 l_0_13_32) l_0_13_37)) (* (* 2.0 l_0_13_33) l_0_13_38))))
 (let ((?x42442 (+ (+ ?x42436 (* (* 2.0 l_0_13_34) l_0_13_39)) (* (* 2.0 l_0_13_35) l_0_13_40))))
 (= (+ ?x42442 (* (* 2.0 l_0_13_36) l_0_13_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42521 (* l_0_13_42 l_0_13_42)))
 (let ((?x42519 (* l_0_13_41 l_0_13_41)))
 (let ((?x42517 (* l_0_13_40 l_0_13_40)))
 (let ((?x42515 (* l_0_13_39 l_0_13_39)))
 (let ((?x42513 (* l_0_13_38 l_0_13_38)))
 (let ((?x42511 (* l_0_13_37 l_0_13_37)))
 (let ((?x42509 (* l_0_13_21 l_0_13_21)))
 (let ((?x42507 (* l_0_13_20 l_0_13_20)))
 (let ((?x42505 (* l_0_13_19 l_0_13_19)))
 (let ((?x42487 (* l_0_13_18 l_0_13_18)))
 (let ((?x21060 (* l_0_13_17 l_0_13_17)))
 (let ((?x31689 (* l_0_13_16 l_0_13_16)))
 (let ((?x41369 (* 2.0 l_0_13_136)))
 (let ((?x41484 (* ?x41369 l_0_13_145)))
 (let ((?x41366 (* 2.0 l_0_13_135)))
 (let ((?x41482 (* ?x41366 l_0_13_144)))
 (let ((?x41363 (* 2.0 l_0_13_134)))
 (let ((?x18806 (* ?x41363 l_0_13_143)))
 (let ((?x31742 (- (- (- (- (* (* (- 2.0) l_0_13_133) l_0_13_142) ?x18806) ?x41482) ?x41484) ?x31689)))
 (let ((?x42514 (+ (+ (- (- (- (- (- ?x31742 ?x21060) ?x42487) ?x42505) ?x42507) ?x42509) ?x42511) ?x42513)))
 (= (+ (+ (+ (+ ?x42514 ?x42515) ?x42517) ?x42519) ?x42521) 0.0))))))))))))))))))))))
(assert
 (let ((?x42569 (* l_0_13_87 l_0_13_87)))
 (let ((?x42567 (* l_0_13_86 l_0_13_86)))
 (let ((?x42564 (* l_0_13_64 l_0_13_64)))
 (let ((?x42565 (* 3.0 ?x42564)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42562 (* ?x41049 l_0_13_65)))
 (let ((?x42560 (* (* 3.0 l_0_13_43) l_0_13_43)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42557 (* ?x41040 l_0_13_44)))
 (let ((?x42555 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x42552 (* l_0_13_171 l_0_13_171)))
 (let ((?x42550 (* l_0_13_170 l_0_13_170)))
 (let ((?x42548 (* l_0_13_150 l_0_13_150)))
 (let ((?x42546 (* l_0_13_149 l_0_13_149)))
 (let ((?x42544 (* l_0_13_127 l_0_13_127)))
 (let ((?x42542 (* l_0_13_108 l_0_13_108)))
 (let ((?x42543 (- (- (* 6.0 (* l_0_13_1 l_0_13_1)) (* l_0_13_107 l_0_13_107)) ?x42542)))
 (let ((?x42558 (- (- (- (- (+ (+ (+ ?x42543 ?x42544) ?x42546) ?x42548) ?x42550) ?x42552) ?x42555) ?x42557)))
 (= (+ (+ (+ (+ (- ?x42558 ?x42560) ?x42562) ?x42565) ?x42567) ?x42569) 0.0))))))))))))))))))))
(assert
 (let ((?x40857 (* l_0_13_66 l_0_13_66)))
 (let ((?x40986 (* 3.0 ?x40857)))
 (let ((?x40854 (* l_0_13_65 l_0_13_65)))
 (let ((?x40984 (* 3.0 ?x40854)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42562 (* ?x41049 l_0_13_65)))
 (let ((?x40979 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (let ((?x40976 (* (* 3.0 l_0_13_44) l_0_13_44)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42557 (* ?x41040 l_0_13_44)))
 (let ((?x42555 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x40967 (* ?x40966 l_0_13_23)))
 (let ((?x42588 (* l_0_13_190 l_0_13_190)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x21307 (* ?x41033 l_0_13_128)))
 (let ((?x41031 (* l_0_13_1 l_0_13_1)))
 (let ((?x31751 (* 6.0 ?x41031)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x40957 (* ?x40956 l_0_13_2)))
 (let ((?x42595 (- (- (- (- (- (+ (+ ?x40957 ?x31751) ?x21307) ?x42588) ?x40967) ?x42555) ?x42557) (* (* 1.0 l_0_13_43) l_0_13_43))))
 (let ((?x42600 (+ (+ (- (- ?x42595 ?x40976) ?x40979) ?x42562) (* 1.0 (* l_0_13_64 l_0_13_64)))))
 (= (+ (+ ?x42600 ?x40984) ?x40986) 0.0))))))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42621 (* ?x41055 l_0_13_68)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42619 (* ?x41052 l_0_13_67)))
 (let ((?x42564 (* l_0_13_64 l_0_13_64)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42616 (* ?x41049 l_0_13_67)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42614 (* ?x41046 l_0_13_47)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42612 (* ?x41043 l_0_13_46)))
 (let ((?x21153 (* l_0_13_43 l_0_13_43)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x31836 (* ?x41040 l_0_13_46)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x31852 (* ?x40966 l_0_13_25)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x16989 (* ?x40956 l_0_13_4)))
 (let ((?x42611 (+ (- (- (+ ?x16989 (* (* 2.0 l_0_13_127) l_0_13_130)) ?x31852) ?x31836) ?x21153)))
 (= (+ (+ (- (+ (- (- ?x42611 ?x42612) ?x42614) ?x42616) ?x42564) ?x42619) ?x42621) 0.0)))))))))))))))))))))
(assert
 (let ((?x42667 (* l_0_13_85 l_0_13_85)))
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42665 (* ?x41055 l_0_13_75)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42663 (* ?x41052 l_0_13_74)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42661 (* ?x41049 l_0_13_74)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42659 (* ?x41046 l_0_13_54)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42657 (* ?x41043 l_0_13_53)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42655 (* ?x41040 l_0_13_53)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x42653 (* ?x40966 l_0_13_32)))
 (let ((?x42651 (* l_0_13_169 l_0_13_169)))
 (let ((?x42649 (* l_0_13_148 l_0_13_148)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x42647 (* ?x41033 l_0_13_137)))
 (let ((?x42648 (+ (+ (* (* 12.0 l_0_13_1) l_0_13_11) (* l_0_13_106 l_0_13_106)) ?x42647)))
 (let ((?x42662 (+ (- (- (- (- (+ (- ?x42648 ?x42649) ?x42651) ?x42653) ?x42655) ?x42657) ?x42659) ?x42661)))
 (= (- (+ (+ ?x42662 ?x42663) ?x42665) ?x42667) 0.0)))))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42720 (* ?x41055 l_0_13_80)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42718 (* ?x41052 l_0_13_79)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42716 (* ?x41049 l_0_13_79)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42714 (* ?x41046 l_0_13_59)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42712 (* ?x41043 l_0_13_58)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42710 (* ?x41040 l_0_13_58)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x42708 (* ?x40966 l_0_13_37)))
 (let ((?x42544 (* l_0_13_127 l_0_13_127)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x42704 (* ?x40956 l_0_13_16)))
 (let ((?x42711 (- (- (- (+ ?x42704 (* (* 2.0 l_0_13_127) l_0_13_142)) ?x42544) ?x42708) ?x42710)))
 (= (+ (+ (+ (- (- ?x42711 ?x42712) ?x42714) ?x42716) ?x42718) ?x42720) 0.0))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42621 (* ?x41055 l_0_13_68)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42619 (* ?x41052 l_0_13_67)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42766 (* ?x40981 l_0_13_67)))
 (let ((?x40982 (* ?x40981 l_0_13_65)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42614 (* ?x41046 l_0_13_47)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42612 (* ?x41043 l_0_13_46)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42761 (* ?x40972 l_0_13_46)))
 (let ((?x40973 (* ?x40972 l_0_13_44)))
 (let ((?x40903 (* 12.0 l_0_13_3)))
 (let ((?x42758 (* ?x40903 l_0_13_5)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42756 (* ?x40899 l_0_13_26)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x42754 (* ?x40895 l_0_13_25)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x31852 (* ?x40966 l_0_13_25)))
 (let ((?x40891 (* 12.0 l_0_13_2)))
 (let ((?x42751 (* ?x40891 l_0_13_4)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x42747 (* ?x41093 l_0_13_131)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x16989 (* ?x40956 l_0_13_4)))
 (let ((?x42750 (- (+ (+ ?x16989 (* (* 2.0 l_0_13_128) l_0_13_130)) ?x42747) (* (* 2.0 l_0_13_190) l_0_13_193))))
 (let ((?x42762 (- (+ (+ (- (- (- (+ ?x42750 ?x42751) ?x31852) ?x42754) ?x42756) ?x42758) ?x40973) ?x42761)))
 (= (+ (+ (+ (- (- (- ?x42762 ?x42612) ?x42614) ?x40982) ?x42766) ?x42619) ?x42621) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x42812 (* ?x41416 l_0_13_86)))
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42665 (* ?x41055 l_0_13_75)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42663 (* ?x41052 l_0_13_74)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42808 (* ?x40981 l_0_13_74)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42659 (* ?x41046 l_0_13_54)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42657 (* ?x41043 l_0_13_53)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42804 (* ?x40972 l_0_13_53)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42802 (* ?x40899 l_0_13_33)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x42800 (* ?x40895 l_0_13_32)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x42653 (* ?x40966 l_0_13_32)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x42795 (* ?x41375 l_0_13_170)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x42793 (* ?x41372 l_0_13_149)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x42791 (* ?x41093 l_0_13_138)))
 (let ((?x41082 (* 2.0 l_0_13_128)))
 (let ((?x42789 (* ?x41082 l_0_13_137)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x42787 (* ?x41354 l_0_13_3)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x42785 (* ?x41351 l_0_13_2)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x42644 (* ?x40956 l_0_13_11)))
 (let ((?x42790 (+ (+ (+ (+ ?x42644 (* (* 2.0 l_0_13_106) l_0_13_107)) ?x42785) ?x42787) ?x42789)))
 (let ((?x42798 (- (+ (- (+ ?x42790 ?x42791) ?x42793) ?x42795) (* (* 2.0 l_0_13_190) l_0_13_200))))
 (let ((?x42809 (+ (- (- (- (- (- (- ?x42798 ?x42653) ?x42800) ?x42802) ?x42804) ?x42657) ?x42659) ?x42808)))
 (= (- (+ (+ ?x42809 ?x42663) ?x42665) ?x42812) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41055 (* 6.0 l_0_13_66)))
 (let ((?x42720 (* ?x41055 l_0_13_80)))
 (let ((?x41052 (* 6.0 l_0_13_65)))
 (let ((?x42718 (* ?x41052 l_0_13_79)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42844 (* ?x40981 l_0_13_79)))
 (let ((?x41046 (* 6.0 l_0_13_45)))
 (let ((?x42714 (* ?x41046 l_0_13_59)))
 (let ((?x41043 (* 6.0 l_0_13_44)))
 (let ((?x42712 (* ?x41043 l_0_13_58)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42840 (* ?x40972 l_0_13_58)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42838 (* ?x40899 l_0_13_38)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x3753 (* ?x40895 l_0_13_37)))
 (let ((?x40966 (* 12.0 l_0_13_22)))
 (let ((?x42708 (* ?x40966 l_0_13_37)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x32305 (* ?x41489 l_0_13_3)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x32293 (* ?x41486 l_0_13_2)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x32270 (* ?x41093 l_0_13_143)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x21307 (* ?x41033 l_0_13_128)))
 (let ((?x40956 (* 12.0 l_0_13_1)))
 (let ((?x42704 (* ?x40956 l_0_13_16)))
 (let ((?x32299 (+ (+ (+ (- ?x42704 ?x21307) (* (* 2.0 l_0_13_128) l_0_13_142)) ?x32270) ?x32293)))
 (let ((?x42837 (- (- (- (+ ?x32299 ?x32305) (* (* 2.0 l_0_13_190) l_0_13_205)) ?x42708) ?x3753)))
 (let ((?x42847 (+ (+ (+ (- (- (- (- ?x42837 ?x42838) ?x42840) ?x42712) ?x42714) ?x42844) ?x42718) ?x42720)))
 (= ?x42847 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x42900 (* l_0_13_69 l_0_13_69)))
 (let ((?x42901 (* 3.0 ?x42900)))
 (let ((?x42897 (* l_0_13_68 l_0_13_68)))
 (let ((?x42898 (* 3.0 ?x42897)))
 (let ((?x42894 (* l_0_13_67 l_0_13_67)))
 (let ((?x42895 (* 3.0 ?x42894)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42766 (* ?x40981 l_0_13_67)))
 (let ((?x41928 (* l_0_13_6 l_0_13_6)))
 (let ((?x42891 (* 6.0 ?x41928)))
 (let ((?x41926 (* l_0_13_5 l_0_13_5)))
 (let ((?x42889 (* 6.0 ?x41926)))
 (let ((?x42887 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42884 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42761 (* ?x40972 l_0_13_46)))
 (let ((?x41921 (* l_0_13_4 l_0_13_4)))
 (let ((?x42877 (* 6.0 ?x41921)))
 (let ((?x42875 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x42872 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x42869 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x42866 (* l_0_13_132 l_0_13_132)))
 (let ((?x42867 (+ (+ (* l_0_13_130 l_0_13_130) (* l_0_13_131 l_0_13_131)) ?x42866)))
 (let ((?x42882 (- (+ (+ (- (- (- ?x42867 ?x42869) ?x42872) ?x42875) ?x42877) ?x42761) (* (* 3.0 l_0_13_46) l_0_13_46))))
 (let ((?x42899 (+ (+ (- (+ (+ (- (- ?x42882 ?x42884) ?x42887) ?x42889) ?x42891) ?x42766) ?x42895) ?x42898)))
 (= (+ ?x42899 ?x42901) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x42968 (* ?x41416 l_0_13_88)))
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x42966 (* ?x41186 l_0_13_76)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x42964 (* ?x41183 l_0_13_75)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x42962 (* ?x41180 l_0_13_74)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42808 (* ?x40981 l_0_13_74)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x42959 (* ?x41170 l_0_13_55)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x42957 (* ?x41167 l_0_13_54)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42804 (* ?x40972 l_0_13_53)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x42952 (* ?x41157 l_0_13_34)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x42950 (* ?x41154 l_0_13_33)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x42948 (* ?x41151 l_0_13_32)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x42946 (* ?x41375 l_0_13_172)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x42944 (* ?x41372 l_0_13_151)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x42942 (* ?x41146 l_0_13_139)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x42940 (* ?x41143 l_0_13_138)))
 (let ((?x19731 (* 2.0 l_0_13_130)))
 (let ((?x42938 (* ?x19731 l_0_13_137)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x42936 (* ?x41357 l_0_13_6)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x42934 (* ?x41354 l_0_13_5)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x42932 (* ?x41351 l_0_13_4)))
 (let ((?x42939 (+ (+ (+ (+ (* (* 2.0 l_0_13_106) l_0_13_109) ?x42932) ?x42934) ?x42936) ?x42938)))
 (let ((?x42953 (- (- (- (+ (- (+ (+ ?x42939 ?x42940) ?x42942) ?x42944) ?x42946) ?x42948) ?x42950) ?x42952)))
 (let ((?x42960 (- (- (- (+ ?x42953 ?x42804) (* (* 6.0 l_0_13_46) l_0_13_53)) ?x42957) ?x42959)))
 (= (- (+ (+ (+ (- ?x42960 ?x42808) ?x42962) ?x42964) ?x42966) ?x42968) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x43021 (* ?x41186 l_0_13_81)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x43019 (* ?x41183 l_0_13_80)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x43017 (* ?x41180 l_0_13_79)))
 (let ((?x40981 (* 2.0 l_0_13_64)))
 (let ((?x42844 (* ?x40981 l_0_13_79)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x43014 (* ?x41170 l_0_13_60)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x43012 (* ?x41167 l_0_13_59)))
 (let ((?x40972 (* 2.0 l_0_13_43)))
 (let ((?x42840 (* ?x40972 l_0_13_58)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x43007 (* ?x41157 l_0_13_39)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x43005 (* ?x41154 l_0_13_38)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x43003 (* ?x41151 l_0_13_37)))
 (let ((?x41492 (* 12.0 l_0_13_18)))
 (let ((?x4185 (* ?x41492 l_0_13_6)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x32459 (* ?x41489 l_0_13_5)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x32432 (* ?x41486 l_0_13_4)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x32401 (* ?x41146 l_0_13_144)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x32452 (* ?x41143 l_0_13_143)))
 (let ((?x4049 (+ (* (* (- 2.0) l_0_13_127) l_0_13_130) (* (* 2.0 l_0_13_130) l_0_13_142))))
 (let ((?x43006 (- (- (+ (+ (+ (+ (+ ?x4049 ?x32452) ?x32401) ?x32432) ?x32459) ?x4185) ?x43003) ?x43005)))
 (let ((?x43013 (- (- (+ (- ?x43006 ?x43007) ?x42840) (* (* 6.0 l_0_13_46) l_0_13_58)) ?x43012)))
 (= (+ (+ (+ (- (- ?x43013 ?x43014) ?x42844) ?x43017) ?x43019) ?x43021) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x43135 (* ?x41416 l_0_13_95)))
 (let ((?x43132 (* l_0_13_78 l_0_13_78)))
 (let ((?x43133 (* 3.0 ?x43132)))
 (let ((?x43129 (* l_0_13_77 l_0_13_77)))
 (let ((?x43130 (* 3.0 ?x43129)))
 (let ((?x43126 (* l_0_13_76 l_0_13_76)))
 (let ((?x43127 (* 3.0 ?x43126)))
 (let ((?x43123 (* l_0_13_75 l_0_13_75)))
 (let ((?x43124 (* 3.0 ?x43123)))
 (let ((?x43120 (* l_0_13_74 l_0_13_74)))
 (let ((?x43121 (* 3.0 ?x43120)))
 (let ((?x43118 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x43115 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x43112 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x43109 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x43103 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x43100 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x43097 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x43094 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x43091 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x43088 (* ?x41375 l_0_13_179)))
 (let ((?x42272 (* l_0_13_15 l_0_13_15)))
 (let ((?x43086 (* 6.0 ?x42272)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x43084 (* ?x41372 l_0_13_158)))
 (let ((?x43082 (* l_0_13_141 l_0_13_141)))
 (let ((?x43080 (* l_0_13_140 l_0_13_140)))
 (let ((?x42270 (* l_0_13_14 l_0_13_14)))
 (let ((?x43078 (* 6.0 ?x42270)))
 (let ((?x43076 (* l_0_13_139 l_0_13_139)))
 (let ((?x43074 (* l_0_13_138 l_0_13_138)))
 (let ((?x43072 (* l_0_13_137 l_0_13_137)))
 (let ((?x42268 (* l_0_13_13 l_0_13_13)))
 (let ((?x43070 (* 6.0 ?x42268)))
 (let ((?x42266 (* l_0_13_12 l_0_13_12)))
 (let ((?x43057 (* 6.0 ?x42266)))
 (let ((?x42322 (* l_0_13_11 l_0_13_11)))
 (let ((?x32568 (* 6.0 ?x42322)))
 (let ((?x43073 (+ (+ (+ (+ (* (* 2.0 l_0_13_106) l_0_13_116) ?x32568) ?x43057) ?x43070) ?x43072)))
 (let ((?x43087 (+ (- (+ (+ (+ (+ (+ ?x43073 ?x43074) ?x43076) ?x43078) ?x43080) ?x43082) ?x43084) ?x43086)))
 (let ((?x43107 (- (- (- (- (- (- (+ ?x43087 ?x43088) ?x43091) ?x43094) ?x43097) ?x43100) ?x43103) (* (* 3.0 l_0_13_53) l_0_13_53))))
 (let ((?x43128 (+ (+ (+ (- (- (- (- ?x43107 ?x43109) ?x43112) ?x43115) ?x43118) ?x43121) ?x43124) ?x43127)))
 (= (- (+ (+ ?x43128 ?x43130) ?x43133) ?x43135) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43242 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x43239 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x43236 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x43233 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x43230 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x43227 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x43224 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x43221 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x43218 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x43212 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x43209 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x43206 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x43203 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x43200 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x43197 (* ?x41375 l_0_13_184)))
 (let ((?x43195 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x43192 (* ?x41372 l_0_13_163)))
 (let ((?x43190 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x43187 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x43184 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x43181 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x43178 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x43175 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x43172 (* ?x41357 l_0_13_18)))
 (let ((?x41033 (* 2.0 l_0_13_127)))
 (let ((?x42647 (* ?x41033 l_0_13_137)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x43169 (* ?x41354 l_0_13_17)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x43167 (* ?x41351 l_0_13_16)))
 (let ((?x41348 (* 2.0 l_0_13_106)))
 (let ((?x32592 (* ?x41348 l_0_13_121)))
 (let ((?x43171 (- (+ (+ (+ (* (* (- 2.0) l_0_13_100) l_0_13_85) ?x32592) ?x43167) ?x43169) ?x42647)))
 (let ((?x43191 (+ (+ (+ (+ (+ (+ (+ ?x43171 ?x43172) ?x43175) ?x43178) ?x43181) ?x43184) ?x43187) ?x43190)))
 (let ((?x43210 (- (- (- (- (+ (+ (- ?x43191 ?x43192) ?x43195) ?x43197) ?x43200) ?x43203) ?x43206) ?x43209)))
 (let ((?x43222 (- (- (- (- ?x43210 ?x43212) (* (* 6.0 l_0_13_53) l_0_13_58)) ?x43218) ?x43221)))
 (let ((?x43243 (+ (+ (+ (+ (+ (- (- ?x43222 ?x43224) ?x43227) ?x43230) ?x43233) ?x43236) ?x43239) ?x43242)))
 (= ?x43243 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43386 (* l_0_13_84 l_0_13_84)))
 (let ((?x43387 (* 3.0 ?x43386)))
 (let ((?x43383 (* l_0_13_83 l_0_13_83)))
 (let ((?x43384 (* 3.0 ?x43383)))
 (let ((?x43380 (* l_0_13_82 l_0_13_82)))
 (let ((?x43381 (* 3.0 ?x43380)))
 (let ((?x43377 (* l_0_13_81 l_0_13_81)))
 (let ((?x43378 (* 3.0 ?x43377)))
 (let ((?x43374 (* l_0_13_80 l_0_13_80)))
 (let ((?x43375 (* 3.0 ?x43374)))
 (let ((?x43371 (* l_0_13_79 l_0_13_79)))
 (let ((?x43372 (* 3.0 ?x43371)))
 (let ((?x43369 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43366 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43363 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43360 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43357 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x43351 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x43348 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x43345 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x43342 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x43339 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x43336 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x42509 (* l_0_13_21 l_0_13_21)))
 (let ((?x43333 (* 6.0 ?x42509)))
 (let ((?x42507 (* l_0_13_20 l_0_13_20)))
 (let ((?x43331 (* 6.0 ?x42507)))
 (let ((?x42505 (* l_0_13_19 l_0_13_19)))
 (let ((?x43329 (* 6.0 ?x42505)))
 (let ((?x42487 (* l_0_13_18 l_0_13_18)))
 (let ((?x43327 (* 6.0 ?x42487)))
 (let ((?x21060 (* l_0_13_17 l_0_13_17)))
 (let ((?x43325 (* 6.0 ?x21060)))
 (let ((?x31689 (* l_0_13_16 l_0_13_16)))
 (let ((?x43323 (* 6.0 ?x31689)))
 (let ((?x43321 (* l_0_13_147 l_0_13_147)))
 (let ((?x43319 (* l_0_13_146 l_0_13_146)))
 (let ((?x43317 (* l_0_13_145 l_0_13_145)))
 (let ((?x43295 (* l_0_13_144 l_0_13_144)))
 (let ((?x32770 (* l_0_13_143 l_0_13_143)))
 (let ((?x32768 (* l_0_13_142 l_0_13_142)))
 (let ((?x43318 (+ (+ (+ (+ (* (* (- 2.0) l_0_13_127) l_0_13_142) ?x32768) ?x32770) ?x43295) ?x43317)))
 (let ((?x43332 (+ (+ (+ (+ (+ (+ (+ ?x43318 ?x43319) ?x43321) ?x43323) ?x43325) ?x43327) ?x43329) ?x43331)))
 (let ((?x43352 (- (- (- (- (- (- (+ ?x43332 ?x43333) ?x43336) ?x43339) ?x43342) ?x43345) ?x43348) ?x43351)))
 (let ((?x43364 (- (- (- (- ?x43352 (* (* 3.0 l_0_13_58) l_0_13_58)) ?x43357) ?x43360) ?x43363)))
 (let ((?x43385 (+ (+ (+ (+ (+ (- (- ?x43364 ?x43366) ?x43369) ?x43372) ?x43375) ?x43378) ?x43381) ?x43384)))
 (= (+ ?x43385 ?x43387) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40857 (* l_0_13_66 l_0_13_66)))
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43442 (* ?x40916 l_0_13_68)))
 (let ((?x40854 (* l_0_13_65 l_0_13_65)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43439 (* ?x40913 l_0_13_67)))
 (let ((?x40876 (* l_0_13_45 l_0_13_45)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43436 (* ?x40910 l_0_13_47)))
 (let ((?x18494 (* l_0_13_44 l_0_13_44)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43433 (* ?x40907 l_0_13_46)))
 (let ((?x40903 (* 12.0 l_0_13_3)))
 (let ((?x42758 (* ?x40903 l_0_13_5)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42756 (* ?x40899 l_0_13_26)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x42754 (* ?x40895 l_0_13_25)))
 (let ((?x40891 (* 12.0 l_0_13_2)))
 (let ((?x42751 (* ?x40891 l_0_13_4)))
 (let ((?x43428 (- (* (* (- 2.0) l_0_13_191) l_0_13_193) (* (* 2.0 l_0_13_192) l_0_13_194))))
 (let ((?x43437 (- (+ (- (+ (- (- (+ ?x43428 ?x42751) ?x42754) ?x42756) ?x42758) ?x43433) ?x18494) ?x43436)))
 (= (- (+ (- (+ (+ ?x43437 ?x40876) ?x43439) ?x40854) ?x43442) ?x40857) 0.0))))))))))))))))))))))))
(assert
 (let ((?x42569 (* l_0_13_87 l_0_13_87)))
 (let ((?x42567 (* l_0_13_86 l_0_13_86)))
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43490 (* ?x40916 l_0_13_75)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43488 (* ?x40913 l_0_13_74)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43486 (* ?x40910 l_0_13_54)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43484 (* ?x40907 l_0_13_53)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42802 (* ?x40899 l_0_13_33)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x42800 (* ?x40895 l_0_13_32)))
 (let ((?x42552 (* l_0_13_171 l_0_13_171)))
 (let ((?x42550 (* l_0_13_170 l_0_13_170)))
 (let ((?x42548 (* l_0_13_150 l_0_13_150)))
 (let ((?x42546 (* l_0_13_149 l_0_13_149)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x42787 (* ?x41354 l_0_13_3)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x42785 (* ?x41351 l_0_13_2)))
 (let ((?x43472 (+ (+ (* l_0_13_107 l_0_13_107) (* l_0_13_108 l_0_13_108)) ?x42785)))
 (let ((?x43479 (- (+ (+ (- (- (+ ?x43472 ?x42787) ?x42546) ?x42548) ?x42550) ?x42552) (* (* 2.0 l_0_13_191) l_0_13_200))))
 (let ((?x43485 (- (- (- (- ?x43479 (* (* 2.0 l_0_13_192) l_0_13_201)) ?x42800) ?x42802) ?x43484)))
 (= (- (- (+ (+ (- ?x43485 ?x43486) ?x43488) ?x43490) ?x42567) ?x42569) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43534 (* ?x40916 l_0_13_80)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43532 (* ?x40913 l_0_13_79)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43530 (* ?x40910 l_0_13_59)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43528 (* ?x40907 l_0_13_58)))
 (let ((?x40899 (* 12.0 l_0_13_24)))
 (let ((?x42838 (* ?x40899 l_0_13_38)))
 (let ((?x40895 (* 12.0 l_0_13_23)))
 (let ((?x3753 (* ?x40895 l_0_13_37)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x32305 (* ?x41489 l_0_13_3)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x32293 (* ?x41486 l_0_13_2)))
 (let ((?x43520 (+ (- (* (- l_0_13_128) l_0_13_128) (* l_0_13_129 l_0_13_129)) ?x32293)))
 (let ((?x43525 (- (- (+ ?x43520 ?x32305) (* (* 2.0 l_0_13_191) l_0_13_205)) (* (* 2.0 l_0_13_192) l_0_13_206))))
 (= (+ (+ (- (- (- (- ?x43525 ?x3753) ?x42838) ?x43528) ?x43530) ?x43532) ?x43534) 0.0))))))))))))))))))))
(assert
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43442 (* ?x40916 l_0_13_68)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43439 (* ?x40913 l_0_13_67)))
 (let ((?x41928 (* l_0_13_6 l_0_13_6)))
 (let ((?x42891 (* 6.0 ?x41928)))
 (let ((?x41926 (* l_0_13_5 l_0_13_5)))
 (let ((?x42889 (* 6.0 ?x41926)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43436 (* ?x40910 l_0_13_47)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43433 (* ?x40907 l_0_13_46)))
 (let ((?x41921 (* l_0_13_4 l_0_13_4)))
 (let ((?x42877 (* 6.0 ?x41921)))
 (let ((?x42875 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x42872 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x42869 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x43559 (* l_0_13_195 l_0_13_195)))
 (let ((?x43560 (- (- (* (- l_0_13_193) l_0_13_193) (* l_0_13_194 l_0_13_194)) ?x43559)))
 (let ((?x43569 (- (+ (+ (+ (- (- (- ?x43560 ?x42869) ?x42872) ?x42875) ?x42877) ?x43433) ?x43436) (* (* 1.0 l_0_13_46) l_0_13_46))))
 (let ((?x43575 (- (- ?x43569 (* (* 1.0 l_0_13_47) l_0_13_47)) (* (* 1.0 l_0_13_48) l_0_13_48))))
 (let ((?x43581 (+ (- (- (+ (+ ?x43575 ?x42889) ?x42891) ?x43439) ?x43442) (* 1.0 (* l_0_13_67 l_0_13_67)))))
 (let ((?x43585 (+ (+ ?x43581 (* 1.0 (* l_0_13_68 l_0_13_68))) (* 1.0 (* l_0_13_69 l_0_13_69)))))
 (= ?x43585 0.0)))))))))))))))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x43643 (* ?x41793 l_0_13_89)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x43641 (* ?x41790 l_0_13_88)))
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x43639 (* ?x41628 l_0_13_76)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x43637 (* ?x41625 l_0_13_75)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x43635 (* ?x41622 l_0_13_74)))
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43490 (* ?x40916 l_0_13_75)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43488 (* ?x40913 l_0_13_74)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x43631 (* ?x41615 l_0_13_55)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x43629 (* ?x41612 l_0_13_54)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x43627 (* ?x41609 l_0_13_53)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43486 (* ?x40910 l_0_13_54)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43484 (* ?x40907 l_0_13_53)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x42952 (* ?x41157 l_0_13_34)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x42950 (* ?x41154 l_0_13_33)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x42948 (* ?x41151 l_0_13_32)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43613 (* ?x41743 l_0_13_173)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43611 (* ?x41740 l_0_13_172)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43609 (* ?x41737 l_0_13_152)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43607 (* ?x41734 l_0_13_151)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x42936 (* ?x41357 l_0_13_6)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x42934 (* ?x41354 l_0_13_5)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x42932 (* ?x41351 l_0_13_4)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x43602 (* ?x20191 l_0_13_110)))
 (let ((?x43606 (+ (+ (+ (+ (* (* 2.0 l_0_13_107) l_0_13_109) ?x43602) ?x42932) ?x42934) ?x42936)))
 (let ((?x43617 (- (+ (+ (- (- ?x43606 ?x43607) ?x43609) ?x43611) ?x43613) (* (* 2.0 l_0_13_193) l_0_13_200))))
 (let ((?x43621 (- (- ?x43617 (* (* 2.0 l_0_13_194) l_0_13_201)) (* (* 2.0 l_0_13_195) l_0_13_202))))
 (let ((?x43630 (- (- (+ (+ (- (- (- ?x43621 ?x42948) ?x42950) ?x42952) ?x43484) ?x43486) ?x43627) ?x43629)))
 (let ((?x43642 (- (+ (+ (+ (- (- (- ?x43630 ?x43631) ?x43488) ?x43490) ?x43635) ?x43637) ?x43639) ?x43641)))
 (= (- ?x43642 ?x43643) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x43687 (* ?x41628 l_0_13_81)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x43685 (* ?x41625 l_0_13_80)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x43683 (* ?x41622 l_0_13_79)))
 (let ((?x40916 (* 2.0 l_0_13_66)))
 (let ((?x43534 (* ?x40916 l_0_13_80)))
 (let ((?x40913 (* 2.0 l_0_13_65)))
 (let ((?x43532 (* ?x40913 l_0_13_79)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x5135 (* ?x41615 l_0_13_60)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x32171 (* ?x41612 l_0_13_59)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x32159 (* ?x41609 l_0_13_58)))
 (let ((?x40910 (* 2.0 l_0_13_45)))
 (let ((?x43530 (* ?x40910 l_0_13_59)))
 (let ((?x40907 (* 2.0 l_0_13_44)))
 (let ((?x43528 (* ?x40907 l_0_13_58)))
 (let ((?x41157 (* 12.0 l_0_13_27)))
 (let ((?x43007 (* ?x41157 l_0_13_39)))
 (let ((?x41154 (* 12.0 l_0_13_26)))
 (let ((?x43005 (* ?x41154 l_0_13_38)))
 (let ((?x41151 (* 12.0 l_0_13_25)))
 (let ((?x43003 (* ?x41151 l_0_13_37)))
 (let ((?x41492 (* 12.0 l_0_13_18)))
 (let ((?x4185 (* ?x41492 l_0_13_6)))
 (let ((?x41489 (* 12.0 l_0_13_17)))
 (let ((?x32459 (* ?x41489 l_0_13_5)))
 (let ((?x41486 (* 12.0 l_0_13_16)))
 (let ((?x32432 (* ?x41486 l_0_13_4)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x42747 (* ?x41093 l_0_13_131)))
 (let ((?x4882 (+ (+ (+ (- (* (* (- 2.0) l_0_13_128) l_0_13_130) ?x42747) ?x32432) ?x32459) ?x4185)))
 (let ((?x4909 (- (- ?x4882 (* (* 2.0 l_0_13_193) l_0_13_205)) (* (* 2.0 l_0_13_194) l_0_13_206))))
 (let ((?x32907 (- (- (- (- ?x4909 (* (* 2.0 l_0_13_195) l_0_13_207)) ?x43003) ?x43005) ?x43007)))
 (let ((?x21958 (- (- (- (- (- (+ (+ ?x32907 ?x43528) ?x43530) ?x32159) ?x32171) ?x5135) ?x43532) ?x43534)))
 (= (+ (+ (+ ?x21958 ?x43683) ?x43685) ?x43687) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x43771 (* ?x41793 l_0_13_96)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x43769 (* ?x41790 l_0_13_95)))
 (let ((?x43103 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x43100 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x43097 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x43094 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x43091 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x43737 (* l_0_13_204 l_0_13_204)))
 (let ((?x43735 (* l_0_13_203 l_0_13_203)))
 (let ((?x43733 (* l_0_13_202 l_0_13_202)))
 (let ((?x43731 (* l_0_13_201 l_0_13_201)))
 (let ((?x43729 (* l_0_13_200 l_0_13_200)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43727 (* ?x41743 l_0_13_180)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43725 (* ?x41740 l_0_13_179)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43723 (* ?x41737 l_0_13_159)))
 (let ((?x42272 (* l_0_13_15 l_0_13_15)))
 (let ((?x43086 (* 6.0 ?x42272)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43720 (* ?x41734 l_0_13_158)))
 (let ((?x42270 (* l_0_13_14 l_0_13_14)))
 (let ((?x43078 (* 6.0 ?x42270)))
 (let ((?x42268 (* l_0_13_13 l_0_13_13)))
 (let ((?x43070 (* 6.0 ?x42268)))
 (let ((?x42266 (* l_0_13_12 l_0_13_12)))
 (let ((?x43057 (* 6.0 ?x42266)))
 (let ((?x42322 (* l_0_13_11 l_0_13_11)))
 (let ((?x32568 (* 6.0 ?x42322)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x22103 (* ?x20191 l_0_13_117)))
 (let ((?x43718 (+ (+ (+ (+ (* (* 2.0 l_0_13_107) l_0_13_116) ?x22103) ?x32568) ?x43057) ?x43070)))
 (let ((?x43730 (- (+ (+ (- (+ (- (+ ?x43718 ?x43078) ?x43720) ?x43086) ?x43723) ?x43725) ?x43727) ?x43729)))
 (let ((?x43741 (- (- (- (- (- (- (- ?x43730 ?x43731) ?x43733) ?x43735) ?x43737) ?x43091) ?x43094) ?x43097)))
 (let ((?x43749 (- (- (- (- ?x43741 ?x43100) ?x43103) (* (* 1.0 l_0_13_53) l_0_13_53)) (* (* 1.0 l_0_13_54) l_0_13_54))))
 (let ((?x43755 (- (- ?x43749 (* (* 1.0 l_0_13_55) l_0_13_55)) (* (* 1.0 l_0_13_56) l_0_13_56))))
 (let ((?x43760 (+ (- ?x43755 (* (* 1.0 l_0_13_57) l_0_13_57)) (* 1.0 (* l_0_13_74 l_0_13_74)))))
 (let ((?x43764 (+ (+ ?x43760 (* 1.0 (* l_0_13_75 l_0_13_75))) (* 1.0 (* l_0_13_76 l_0_13_76)))))
 (let ((?x43768 (+ (+ ?x43764 (* 1.0 (* l_0_13_77 l_0_13_77))) (* 1.0 (* l_0_13_78 l_0_13_78)))))
 (= (- (- ?x43768 ?x43769) ?x43771) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43897 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x43894 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x43891 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x43888 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x43885 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x43882 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x43879 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x43876 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x43873 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x43870 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x43212 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x43209 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x43206 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x43203 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x43200 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43847 (* ?x41743 l_0_13_185)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43845 (* ?x41740 l_0_13_184)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43843 (* ?x41737 l_0_13_164)))
 (let ((?x43195 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43840 (* ?x41734 l_0_13_163)))
 (let ((?x43184 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x41357 (* 12.0 l_0_13_13)))
 (let ((?x43172 (* ?x41357 l_0_13_18)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x42791 (* ?x41093 l_0_13_138)))
 (let ((?x41082 (* 2.0 l_0_13_128)))
 (let ((?x42789 (* ?x41082 l_0_13_137)))
 (let ((?x41354 (* 12.0 l_0_13_12)))
 (let ((?x43169 (* ?x41354 l_0_13_17)))
 (let ((?x41351 (* 12.0 l_0_13_11)))
 (let ((?x43167 (* ?x41351 l_0_13_16)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x43832 (* ?x20191 l_0_13_122)))
 (let ((?x20204 (* 2.0 l_0_13_107)))
 (let ((?x43830 (* ?x20204 l_0_13_121)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x43828 (* ?x42382 l_0_13_87)))
 (let ((?x43834 (+ (+ (+ (- (* (* (- 2.0) l_0_13_100) l_0_13_86) ?x43828) ?x43830) ?x43832) ?x43167)))
 (let ((?x43842 (+ (- (+ (+ (- (- (+ ?x43834 ?x43169) ?x42789) ?x42791) ?x43172) ?x43184) ?x43840) ?x43195)))
 (let ((?x43851 (- (+ (+ (- ?x43842 ?x43843) ?x43845) ?x43847) (* (* 2.0 l_0_13_200) l_0_13_205))))
 (let ((?x43857 (- (- ?x43851 (* (* 2.0 l_0_13_201) l_0_13_206)) (* (* 2.0 l_0_13_202) l_0_13_207))))
 (let ((?x43863 (- (- ?x43857 (* (* 2.0 l_0_13_203) l_0_13_208)) (* (* 2.0 l_0_13_204) l_0_13_209))))
 (let ((?x43874 (- (- (- (- (- (- (- ?x43863 ?x43200) ?x43203) ?x43206) ?x43209) ?x43212) ?x43870) ?x43873)))
 (let ((?x43895 (+ (+ (+ (+ (- (- (- ?x43874 ?x43876) ?x43879) ?x43882) ?x43885) ?x43888) ?x43891) ?x43894)))
 (= (+ ?x43895 ?x43897) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43351 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x43348 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x43345 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x43342 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x43339 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x43336 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x43982 (* l_0_13_210 l_0_13_210)))
 (let ((?x42509 (* l_0_13_21 l_0_13_21)))
 (let ((?x43333 (* 6.0 ?x42509)))
 (let ((?x43979 (* l_0_13_209 l_0_13_209)))
 (let ((?x43977 (* l_0_13_208 l_0_13_208)))
 (let ((?x43975 (* l_0_13_207 l_0_13_207)))
 (let ((?x43973 (* l_0_13_206 l_0_13_206)))
 (let ((?x43971 (* l_0_13_205 l_0_13_205)))
 (let ((?x42507 (* l_0_13_20 l_0_13_20)))
 (let ((?x43331 (* 6.0 ?x42507)))
 (let ((?x42505 (* l_0_13_19 l_0_13_19)))
 (let ((?x43329 (* 6.0 ?x42505)))
 (let ((?x42487 (* l_0_13_18 l_0_13_18)))
 (let ((?x43327 (* 6.0 ?x42487)))
 (let ((?x21060 (* l_0_13_17 l_0_13_17)))
 (let ((?x43325 (* 6.0 ?x21060)))
 (let ((?x31689 (* l_0_13_16 l_0_13_16)))
 (let ((?x43323 (* 6.0 ?x31689)))
 (let ((?x41093 (* 2.0 l_0_13_129)))
 (let ((?x32270 (* ?x41093 l_0_13_143)))
 (let ((?x43956 (+ (+ (+ (- (* (* (- 2.0) l_0_13_128) l_0_13_142) ?x32270) ?x43323) ?x43325) ?x43327)))
 (let ((?x43980 (- (- (- (- (- (+ (+ ?x43956 ?x43329) ?x43331) ?x43971) ?x43973) ?x43975) ?x43977) ?x43979)))
 (let ((?x43988 (- (- (- (- (- (- (+ ?x43980 ?x43333) ?x43982) ?x43336) ?x43339) ?x43342) ?x43345) ?x43348)))
 (let ((?x43995 (- (- (- ?x43988 ?x43351) (* (* 1.0 l_0_13_58) l_0_13_58)) (* (* 1.0 l_0_13_59) l_0_13_59))))
 (let ((?x44001 (- (- ?x43995 (* (* 1.0 l_0_13_60) l_0_13_60)) (* (* 1.0 l_0_13_61) l_0_13_61))))
 (let ((?x44007 (- (- ?x44001 (* (* 1.0 l_0_13_62) l_0_13_62)) (* (* 1.0 l_0_13_63) l_0_13_63))))
 (let ((?x44011 (+ (+ ?x44007 (* 1.0 (* l_0_13_79 l_0_13_79))) (* 1.0 (* l_0_13_80 l_0_13_80)))))
 (let ((?x44015 (+ (+ ?x44011 (* 1.0 (* l_0_13_81 l_0_13_81))) (* 1.0 (* l_0_13_82 l_0_13_82)))))
 (let ((?x44019 (+ (+ ?x44015 (* 1.0 (* l_0_13_83 l_0_13_83))) (* 1.0 (* l_0_13_84 l_0_13_84)))))
 (= ?x44019 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x42812 (* ?x41416 l_0_13_86)))
 (let ((?x42564 (* l_0_13_64 l_0_13_64)))
 (let ((?x42565 (* 3.0 ?x42564)))
 (let ((?x42560 (* (* 3.0 l_0_13_43) l_0_13_43)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x42795 (* ?x41375 l_0_13_170)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x42793 (* ?x41372 l_0_13_149)))
 (let ((?x44044 (+ (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_107) ?x42793) ?x42795) ?x42560) ?x42565)))
 (= (+ ?x44044 ?x42812) 0.0))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x43643 (* ?x41793 l_0_13_89)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x43641 (* ?x41790 l_0_13_88)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42616 (* ?x41049 l_0_13_67)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x31836 (* ?x41040 l_0_13_46)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43613 (* ?x41743 l_0_13_173)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43611 (* ?x41740 l_0_13_172)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43609 (* ?x41737 l_0_13_152)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43607 (* ?x41734 l_0_13_151)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x43602 (* ?x20191 l_0_13_110)))
 (let ((?x44052 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_109) ?x43602) ?x43607) ?x43609) ?x43611)))
 (= (+ (+ (+ (- (- ?x44052 ?x43613) ?x31836) ?x42616) ?x43641) ?x43643) 0.0)))))))))))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x41794 (* ?x41793 l_0_13_92)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x41791 (* ?x41790 l_0_13_91)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x41050 (* ?x41049 l_0_13_70)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x41041 (* ?x41040 l_0_13_49)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x41744 (* ?x41743 l_0_13_176)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x41741 (* ?x41740 l_0_13_175)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x41738 (* ?x41737 l_0_13_155)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x41735 (* ?x41734 l_0_13_154)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x20198 (* ?x20191 l_0_13_113)))
 (let ((?x22508 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_112) ?x20198) ?x41735) ?x41738) ?x41741)))
 (= (+ (+ (+ (- (- ?x22508 ?x41744) ?x41041) ?x41050) ?x41791) ?x41794) 0.0)))))))))))))))))))))
(assert
 (let ((?x41793 (* 2.0 l_0_13_87)))
 (let ((?x43771 (* ?x41793 l_0_13_96)))
 (let ((?x41790 (* 2.0 l_0_13_86)))
 (let ((?x43769 (* ?x41790 l_0_13_95)))
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42661 (* ?x41049 l_0_13_74)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42655 (* ?x41040 l_0_13_53)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43727 (* ?x41743 l_0_13_180)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43725 (* ?x41740 l_0_13_179)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43723 (* ?x41737 l_0_13_159)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43720 (* ?x41734 l_0_13_158)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x22103 (* ?x20191 l_0_13_117)))
 (let ((?x33239 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_116) ?x22103) ?x43720) ?x43723) ?x43725)))
 (= (+ (+ (+ (- (- ?x33239 ?x43727) ?x42655) ?x42661) ?x43769) ?x43771) 0.0)))))))))))))))))))))
(assert
 (let ((?x41049 (* 6.0 l_0_13_64)))
 (let ((?x42716 (* ?x41049 l_0_13_79)))
 (let ((?x41040 (* 6.0 l_0_13_43)))
 (let ((?x42710 (* ?x41040 l_0_13_58)))
 (let ((?x41743 (* 2.0 l_0_13_171)))
 (let ((?x43847 (* ?x41743 l_0_13_185)))
 (let ((?x41740 (* 2.0 l_0_13_170)))
 (let ((?x43845 (* ?x41740 l_0_13_184)))
 (let ((?x41737 (* 2.0 l_0_13_150)))
 (let ((?x43843 (* ?x41737 l_0_13_164)))
 (let ((?x41734 (* 2.0 l_0_13_149)))
 (let ((?x43840 (* ?x41734 l_0_13_163)))
 (let ((?x20191 (* 2.0 l_0_13_108)))
 (let ((?x43832 (* ?x20191 l_0_13_122)))
 (let ((?x20204 (* 2.0 l_0_13_107)))
 (let ((?x43830 (* ?x20204 l_0_13_121)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x43828 (* ?x42382 l_0_13_87)))
 (let ((?x22597 (+ (- (- (+ (* (* 2.0 l_0_13_100) l_0_13_86) ?x43828) ?x43830) ?x43832) ?x43840)))
 (= (+ (- (- (- (+ ?x22597 ?x43843) ?x43845) ?x43847) ?x42710) ?x42716) 0.0)))))))))))))))))))))
(assert
 (let ((?x42900 (* l_0_13_69 l_0_13_69)))
 (let ((?x42901 (* 3.0 ?x42900)))
 (let ((?x42897 (* l_0_13_68 l_0_13_68)))
 (let ((?x42898 (* 3.0 ?x42897)))
 (let ((?x42894 (* l_0_13_67 l_0_13_67)))
 (let ((?x42895 (* 3.0 ?x42894)))
 (let ((?x42887 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42884 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x44078 (+ (+ (- (- (* (* (- 3.0) l_0_13_46) l_0_13_46) ?x42884) ?x42887) ?x42895) ?x42898)))
 (= (+ ?x44078 ?x42901) 0.0)))))))))))
(assert
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x41187 (* ?x41186 l_0_13_72)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x41184 (* ?x41183 l_0_13_71)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x41181 (* ?x41180 l_0_13_70)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x41171 (* ?x41170 l_0_13_51)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x41168 (* ?x41167 l_0_13_50)))
 (let ((?x44089 (+ (+ (- (- (* (* (- 6.0) l_0_13_46) l_0_13_49) ?x41168) ?x41171) ?x41181) ?x41184)))
 (= (+ ?x44089 ?x41187) 0.0)))))))))))))
(assert
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x42966 (* ?x41186 l_0_13_76)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x42964 (* ?x41183 l_0_13_75)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x42962 (* ?x41180 l_0_13_74)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x42959 (* ?x41170 l_0_13_55)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x42957 (* ?x41167 l_0_13_54)))
 (let ((?x22766 (+ (+ (- (- (* (* (- 6.0) l_0_13_46) l_0_13_53) ?x42957) ?x42959) ?x42962) ?x42964)))
 (= (+ ?x22766 ?x42966) 0.0)))))))))))))
(assert
 (let ((?x41186 (* 6.0 l_0_13_69)))
 (let ((?x43021 (* ?x41186 l_0_13_81)))
 (let ((?x41183 (* 6.0 l_0_13_68)))
 (let ((?x43019 (* ?x41183 l_0_13_80)))
 (let ((?x41180 (* 6.0 l_0_13_67)))
 (let ((?x43017 (* ?x41180 l_0_13_79)))
 (let ((?x41170 (* 6.0 l_0_13_48)))
 (let ((?x43014 (* ?x41170 l_0_13_60)))
 (let ((?x41167 (* 6.0 l_0_13_47)))
 (let ((?x43012 (* ?x41167 l_0_13_59)))
 (let ((?x33411 (+ (+ (- (- (* (* (- 6.0) l_0_13_46) l_0_13_58) ?x43012) ?x43014) ?x43017) ?x43019)))
 (= (+ ?x33411 ?x43021) 0.0)))))))))))))
(assert
 (let ((?x41290 (* l_0_13_73 l_0_13_73)))
 (let ((?x41291 (* 3.0 ?x41290)))
 (let ((?x41287 (* l_0_13_72 l_0_13_72)))
 (let ((?x41288 (* 3.0 ?x41287)))
 (let ((?x41284 (* l_0_13_71 l_0_13_71)))
 (let ((?x41285 (* 3.0 ?x41284)))
 (let ((?x41281 (* l_0_13_70 l_0_13_70)))
 (let ((?x41282 (* 3.0 ?x41281)))
 (let ((?x41276 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x41273 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x41270 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x44106 (+ (- (- (- (* (* (- 3.0) l_0_13_49) l_0_13_49) ?x41270) ?x41273) ?x41276) ?x41282)))
 (= (+ (+ (+ ?x44106 ?x41285) ?x41288) ?x41291) 0.0))))))))))))))
(assert
 (let ((?x41413 (* 6.0 l_0_13_73)))
 (let ((?x41414 (* ?x41413 l_0_13_77)))
 (let ((?x41410 (* 6.0 l_0_13_72)))
 (let ((?x41411 (* ?x41410 l_0_13_76)))
 (let ((?x41407 (* 6.0 l_0_13_71)))
 (let ((?x41408 (* ?x41407 l_0_13_75)))
 (let ((?x41404 (* 6.0 l_0_13_70)))
 (let ((?x41405 (* ?x41404 l_0_13_74)))
 (let ((?x41401 (* 6.0 l_0_13_52)))
 (let ((?x41402 (* ?x41401 l_0_13_56)))
 (let ((?x41398 (* 6.0 l_0_13_51)))
 (let ((?x41399 (* ?x41398 l_0_13_55)))
 (let ((?x41395 (* 6.0 l_0_13_50)))
 (let ((?x41396 (* ?x41395 l_0_13_54)))
 (let ((?x22784 (+ (- (- (- (* (* (- 6.0) l_0_13_49) l_0_13_53) ?x41396) ?x41399) ?x41402) ?x41405)))
 (= (+ (+ (+ ?x22784 ?x41408) ?x41411) ?x41414) 0.0)))))))))))))))))
(assert
 (let ((?x41413 (* 6.0 l_0_13_73)))
 (let ((?x41519 (* ?x41413 l_0_13_82)))
 (let ((?x41410 (* 6.0 l_0_13_72)))
 (let ((?x41517 (* ?x41410 l_0_13_81)))
 (let ((?x41407 (* 6.0 l_0_13_71)))
 (let ((?x41515 (* ?x41407 l_0_13_80)))
 (let ((?x41404 (* 6.0 l_0_13_70)))
 (let ((?x41513 (* ?x41404 l_0_13_79)))
 (let ((?x41401 (* 6.0 l_0_13_52)))
 (let ((?x41511 (* ?x41401 l_0_13_61)))
 (let ((?x41398 (* 6.0 l_0_13_51)))
 (let ((?x41509 (* ?x41398 l_0_13_60)))
 (let ((?x41395 (* 6.0 l_0_13_50)))
 (let ((?x41507 (* ?x41395 l_0_13_59)))
 (let ((?x44121 (+ (- (- (- (* (* (- 6.0) l_0_13_49) l_0_13_58) ?x41507) ?x41509) ?x41511) ?x41513)))
 (= (+ (+ (+ ?x44121 ?x41515) ?x41517) ?x41519) 0.0)))))))))))))))))
(assert
 (let ((?x43132 (* l_0_13_78 l_0_13_78)))
 (let ((?x43133 (* 3.0 ?x43132)))
 (let ((?x43129 (* l_0_13_77 l_0_13_77)))
 (let ((?x43130 (* 3.0 ?x43129)))
 (let ((?x43126 (* l_0_13_76 l_0_13_76)))
 (let ((?x43127 (* 3.0 ?x43126)))
 (let ((?x43123 (* l_0_13_75 l_0_13_75)))
 (let ((?x43124 (* 3.0 ?x43123)))
 (let ((?x43120 (* l_0_13_74 l_0_13_74)))
 (let ((?x43121 (* 3.0 ?x43120)))
 (let ((?x43118 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x43115 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x43112 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x43109 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x44127 (- (- (- (- (* (* (- 3.0) l_0_13_53) l_0_13_53) ?x43109) ?x43112) ?x43115) ?x43118)))
 (= (+ (+ (+ (+ (+ ?x44127 ?x43121) ?x43124) ?x43127) ?x43130) ?x43133) 0.0)))))))))))))))))
(assert
 (let ((?x43242 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x43239 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x43236 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x43233 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x43230 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x43227 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x43224 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x43221 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x43218 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x44137 (- (- (- (- (* (* (- 6.0) l_0_13_53) l_0_13_58) ?x43218) ?x43221) ?x43224) ?x43227)))
 (= (+ (+ (+ (+ (+ ?x44137 ?x43230) ?x43233) ?x43236) ?x43239) ?x43242) 0.0))))))))))))
(assert
 (let ((?x43386 (* l_0_13_84 l_0_13_84)))
 (let ((?x43387 (* 3.0 ?x43386)))
 (let ((?x43383 (* l_0_13_83 l_0_13_83)))
 (let ((?x43384 (* 3.0 ?x43383)))
 (let ((?x43380 (* l_0_13_82 l_0_13_82)))
 (let ((?x43381 (* 3.0 ?x43380)))
 (let ((?x43377 (* l_0_13_81 l_0_13_81)))
 (let ((?x43378 (* 3.0 ?x43377)))
 (let ((?x43374 (* l_0_13_80 l_0_13_80)))
 (let ((?x43375 (* 3.0 ?x43374)))
 (let ((?x43371 (* l_0_13_79 l_0_13_79)))
 (let ((?x43372 (* 3.0 ?x43371)))
 (let ((?x43369 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43366 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43363 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43360 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43357 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x44148 (- (- (- (- (* (* (- 3.0) l_0_13_58) l_0_13_58) ?x43357) ?x43360) ?x43363) ?x43366)))
 (let ((?x44155 (+ (+ (+ (+ (+ (+ (- ?x44148 ?x43369) ?x43372) ?x43375) ?x43378) ?x43381) ?x43384) ?x43387)))
 (= ?x44155 0.0)))))))))))))))))))))
(assert
 (let ((?x42900 (* l_0_13_69 l_0_13_69)))
 (let ((?x42897 (* l_0_13_68 l_0_13_68)))
 (let ((?x42894 (* l_0_13_67 l_0_13_67)))
 (let ((?x3921 (* l_0_13_48 l_0_13_48)))
 (let ((?x33650 (- (+ (+ (* l_0_13_46 l_0_13_46) (* l_0_13_47 l_0_13_47)) ?x3921) ?x42894)))
 (= (- (- ?x33650 ?x42897) ?x42900) 0.0)))))))
(assert
 (let ((?x44190 (* l_0_13_90 l_0_13_90)))
 (let ((?x44188 (* l_0_13_89 l_0_13_89)))
 (let ((?x44186 (* l_0_13_88 l_0_13_88)))
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x43639 (* ?x41628 l_0_13_76)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x43637 (* ?x41625 l_0_13_75)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x43635 (* ?x41622 l_0_13_74)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x43631 (* ?x41615 l_0_13_55)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x43629 (* ?x41612 l_0_13_54)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x43627 (* ?x41609 l_0_13_53)))
 (let ((?x44178 (* l_0_13_174 l_0_13_174)))
 (let ((?x44176 (* l_0_13_173 l_0_13_173)))
 (let ((?x44174 (* l_0_13_172 l_0_13_172)))
 (let ((?x44172 (* l_0_13_153 l_0_13_153)))
 (let ((?x44170 (* l_0_13_152 l_0_13_152)))
 (let ((?x44168 (* l_0_13_151 l_0_13_151)))
 (let ((?x44166 (* l_0_13_111 l_0_13_111)))
 (let ((?x44167 (+ (+ (* l_0_13_109 l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x44166)))
 (let ((?x44180 (+ (+ (+ (+ (- (- (- ?x44167 ?x44168) ?x44170) ?x44172) ?x44174) ?x44176) ?x44178) ?x43627)))
 (let ((?x44189 (- (- (- (- (- (+ (+ ?x44180 ?x43629) ?x43631) ?x43635) ?x43637) ?x43639) ?x44186) ?x44188)))
 (= (- ?x44189 ?x44190) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x41628 (* 2.0 l_0_13_69)))
 (let ((?x43687 (* ?x41628 l_0_13_81)))
 (let ((?x41625 (* 2.0 l_0_13_68)))
 (let ((?x43685 (* ?x41625 l_0_13_80)))
 (let ((?x41622 (* 2.0 l_0_13_67)))
 (let ((?x43683 (* ?x41622 l_0_13_79)))
 (let ((?x41615 (* 2.0 l_0_13_48)))
 (let ((?x5135 (* ?x41615 l_0_13_60)))
 (let ((?x41612 (* 2.0 l_0_13_47)))
 (let ((?x32171 (* ?x41612 l_0_13_59)))
 (let ((?x41609 (* 2.0 l_0_13_46)))
 (let ((?x32159 (* ?x41609 l_0_13_58)))
 (let ((?x42866 (* l_0_13_132 l_0_13_132)))
 (let ((?x44202 (- (- (* (- l_0_13_130) l_0_13_130) (* l_0_13_131 l_0_13_131)) ?x42866)))
 (= (- (- (- (+ (+ (+ ?x44202 ?x32159) ?x32171) ?x5135) ?x43683) ?x43685) ?x43687) 0.0))))))))))))))))
(assert
 (let ((?x42042 (* 2.0 l_0_13_90)))
 (let ((?x44241 (* ?x42042 l_0_13_97)))
 (let ((?x42039 (* 2.0 l_0_13_89)))
 (let ((?x44239 (* ?x42039 l_0_13_96)))
 (let ((?x42036 (* 2.0 l_0_13_88)))
 (let ((?x44237 (* ?x42036 l_0_13_95)))
 (let ((?x43132 (* l_0_13_78 l_0_13_78)))
 (let ((?x43129 (* l_0_13_77 l_0_13_77)))
 (let ((?x43126 (* l_0_13_76 l_0_13_76)))
 (let ((?x43123 (* l_0_13_75 l_0_13_75)))
 (let ((?x43120 (* l_0_13_74 l_0_13_74)))
 (let ((?x4213 (* l_0_13_57 l_0_13_57)))
 (let ((?x32591 (* l_0_13_56 l_0_13_56)))
 (let ((?x32587 (* l_0_13_55 l_0_13_55)))
 (let ((?x31936 (* l_0_13_54 l_0_13_54)))
 (let ((?x32584 (* l_0_13_53 l_0_13_53)))
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x44225 (* ?x42019 l_0_13_181)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x44223 (* ?x42016 l_0_13_180)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x44221 (* ?x42013 l_0_13_179)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x44219 (* ?x42010 l_0_13_160)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x44217 (* ?x42007 l_0_13_159)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x44215 (* ?x42004 l_0_13_158)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x44213 (* ?x41996 l_0_13_118)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x6628 (* ?x41993 l_0_13_117)))
 (let ((?x44218 (- (- (+ (+ (* (* 2.0 l_0_13_109) l_0_13_116) ?x6628) ?x44213) ?x44215) ?x44217)))
 (let ((?x44229 (+ (+ (+ (+ (+ (+ (- ?x44218 ?x44219) ?x44221) ?x44223) ?x44225) ?x32584) ?x31936) ?x32587)))
 (let ((?x44236 (- (- (- (- (- (+ (+ ?x44229 ?x32591) ?x4213) ?x43120) ?x43123) ?x43126) ?x43129) ?x43132)))
 (= (- (- (- ?x44236 ?x44237) ?x44239) ?x44241) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43897 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x43894 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x43891 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x43888 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x43885 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x43882 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x43879 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x43876 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x43873 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x43870 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x44283 (* ?x42019 l_0_13_186)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x44281 (* ?x42016 l_0_13_185)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x44279 (* ?x42013 l_0_13_184)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x44277 (* ?x42010 l_0_13_165)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x44275 (* ?x42007 l_0_13_164)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x44273 (* ?x42004 l_0_13_163)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x42942 (* ?x41146 l_0_13_139)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x42940 (* ?x41143 l_0_13_138)))
 (let ((?x19731 (* 2.0 l_0_13_130)))
 (let ((?x42938 (* ?x19731 l_0_13_137)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x44268 (* ?x41996 l_0_13_123)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x6491 (* ?x41993 l_0_13_122)))
 (let ((?x41989 (* 2.0 l_0_13_109)))
 (let ((?x6670 (* ?x41989 l_0_13_121)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x33709 (* ?x42385 l_0_13_90)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x6793 (* ?x42382 l_0_13_89)))
 (let ((?x44267 (+ (+ (- (- (* (* (- 2.0) l_0_13_100) l_0_13_88) ?x6793) ?x33709) ?x6670) ?x6491)))
 (let ((?x44278 (- (- (- (- (- (- (+ ?x44267 ?x44268) ?x42938) ?x42940) ?x42942) ?x44273) ?x44275) ?x44277)))
 (let ((?x44288 (+ (+ (+ (+ (+ (+ (+ ?x44278 ?x44279) ?x44281) ?x44283) ?x43870) ?x43873) ?x43876) ?x43879)))
 (= (- (- (- (- (- (+ ?x44288 ?x43882) ?x43885) ?x43888) ?x43891) ?x43894) ?x43897) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43386 (* l_0_13_84 l_0_13_84)))
 (let ((?x43383 (* l_0_13_83 l_0_13_83)))
 (let ((?x43380 (* l_0_13_82 l_0_13_82)))
 (let ((?x43377 (* l_0_13_81 l_0_13_81)))
 (let ((?x43374 (* l_0_13_80 l_0_13_80)))
 (let ((?x43371 (* l_0_13_79 l_0_13_79)))
 (let ((?x4777 (* l_0_13_63 l_0_13_63)))
 (let ((?x4661 (* l_0_13_62 l_0_13_62)))
 (let ((?x32792 (* l_0_13_61 l_0_13_61)))
 (let ((?x32789 (* l_0_13_60 l_0_13_60)))
 (let ((?x32069 (* l_0_13_59 l_0_13_59)))
 (let ((?x32787 (* l_0_13_58 l_0_13_58)))
 (let ((?x41146 (* 2.0 l_0_13_132)))
 (let ((?x32401 (* ?x41146 l_0_13_144)))
 (let ((?x41143 (* 2.0 l_0_13_131)))
 (let ((?x32452 (* ?x41143 l_0_13_143)))
 (let ((?x6864 (+ (+ (- (- (* (* (- 2.0) l_0_13_130) l_0_13_142) ?x32452) ?x32401) ?x32787) ?x32069)))
 (let ((?x44331 (- (- (- (+ (+ (+ (+ ?x6864 ?x32789) ?x32792) ?x4661) ?x4777) ?x43371) ?x43374) ?x43377)))
 (= (- (- (- ?x44331 ?x43380) ?x43383) ?x43386) 0.0))))))))))))))))))))
(assert
 (let ((?x44370 (* l_0_13_99 l_0_13_99)))
 (let ((?x44368 (* l_0_13_98 l_0_13_98)))
 (let ((?x44366 (* l_0_13_97 l_0_13_97)))
 (let ((?x44364 (* l_0_13_96 l_0_13_96)))
 (let ((?x44362 (* l_0_13_95 l_0_13_95)))
 (let ((?x44360 (* l_0_13_183 l_0_13_183)))
 (let ((?x44358 (* l_0_13_182 l_0_13_182)))
 (let ((?x44356 (* l_0_13_181 l_0_13_181)))
 (let ((?x44354 (* l_0_13_180 l_0_13_180)))
 (let ((?x44352 (* l_0_13_179 l_0_13_179)))
 (let ((?x44350 (* l_0_13_162 l_0_13_162)))
 (let ((?x44348 (* l_0_13_161 l_0_13_161)))
 (let ((?x44346 (* l_0_13_160 l_0_13_160)))
 (let ((?x44344 (* l_0_13_159 l_0_13_159)))
 (let ((?x44342 (* l_0_13_158 l_0_13_158)))
 (let ((?x33863 (* l_0_13_120 l_0_13_120)))
 (let ((?x20775 (* l_0_13_119 l_0_13_119)))
 (let ((?x7010 (* l_0_13_118 l_0_13_118)))
 (let ((?x20774 (+ (+ (* l_0_13_116 l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x7010)))
 (let ((?x44351 (- (- (- (- (- (+ (+ ?x20774 ?x20775) ?x33863) ?x44342) ?x44344) ?x44346) ?x44348) ?x44350)))
 (let ((?x44365 (- (- (+ (+ (+ (+ (+ ?x44351 ?x44352) ?x44354) ?x44356) ?x44358) ?x44360) ?x44362) ?x44364)))
 (= (- (- (- ?x44365 ?x44366) ?x44368) ?x44370) 0.0)))))))))))))))))))))))
(assert
 (let ((?x44446 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x44443 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x44440 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x44437 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x44434 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x44431 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x44428 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x44425 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x44422 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x44419 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x43082 (* l_0_13_141 l_0_13_141)))
 (let ((?x43080 (* l_0_13_140 l_0_13_140)))
 (let ((?x43076 (* l_0_13_139 l_0_13_139)))
 (let ((?x43074 (* l_0_13_138 l_0_13_138)))
 (let ((?x43072 (* l_0_13_137 l_0_13_137)))
 (let ((?x44411 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x44408 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x44405 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x44402 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x44399 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x44396 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x42388 (* 2.0 l_0_13_103)))
 (let ((?x44393 (* ?x42388 l_0_13_98)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x44391 (* ?x42385 l_0_13_97)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x33940 (* ?x42382 l_0_13_96)))
 (let ((?x44397 (- (- (- (- (* (* (- 2.0) l_0_13_100) l_0_13_95) ?x33940) ?x44391) ?x44393) ?x44396)))
 (let ((?x44414 (- (- (+ (+ (+ (+ (+ ?x44397 ?x44399) ?x44402) ?x44405) ?x44408) ?x44411) ?x43072) ?x43074)))
 (let ((?x44429 (- (- (- (- (- (- (- ?x44414 ?x43076) ?x43080) ?x43082) ?x44419) ?x44422) ?x44425) ?x44428)))
 (= (+ (+ (+ (+ (+ (- ?x44429 ?x44431) ?x44434) ?x44437) ?x44440) ?x44443) ?x44446) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x44549 (* l_0_13_189 l_0_13_189)))
 (let ((?x44547 (* l_0_13_188 l_0_13_188)))
 (let ((?x44545 (* l_0_13_187 l_0_13_187)))
 (let ((?x44543 (* l_0_13_186 l_0_13_186)))
 (let ((?x44541 (* l_0_13_185 l_0_13_185)))
 (let ((?x44539 (* l_0_13_184 l_0_13_184)))
 (let ((?x44537 (* l_0_13_168 l_0_13_168)))
 (let ((?x44535 (* l_0_13_167 l_0_13_167)))
 (let ((?x44533 (* l_0_13_166 l_0_13_166)))
 (let ((?x44531 (* l_0_13_165 l_0_13_165)))
 (let ((?x44529 (* l_0_13_164 l_0_13_164)))
 (let ((?x44527 (* l_0_13_163 l_0_13_163)))
 (let ((?x43190 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x43187 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x43181 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x43178 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x43175 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x44520 (* l_0_13_126 l_0_13_126)))
 (let ((?x44518 (* l_0_13_125 l_0_13_125)))
 (let ((?x44516 (* l_0_13_124 l_0_13_124)))
 (let ((?x44514 (* l_0_13_123 l_0_13_123)))
 (let ((?x44512 (* l_0_13_122 l_0_13_122)))
 (let ((?x44510 (* l_0_13_121 l_0_13_121)))
 (let ((?x44508 (* l_0_13_105 l_0_13_105)))
 (let ((?x44506 (* l_0_13_104 l_0_13_104)))
 (let ((?x44504 (* l_0_13_103 l_0_13_103)))
 (let ((?x44489 (* l_0_13_102 l_0_13_102)))
 (let ((?x44490 (- (- (* (- l_0_13_100) l_0_13_100) (* l_0_13_101 l_0_13_101)) ?x44489)))
 (let ((?x44517 (+ (+ (+ (+ (- (- (- ?x44490 ?x44504) ?x44506) ?x44508) ?x44510) ?x44512) ?x44514) ?x44516)))
 (let ((?x44526 (- (- (- (- (- (+ (+ ?x44517 ?x44518) ?x44520) ?x43175) ?x43178) ?x43181) ?x43187) ?x43190)))
 (let ((?x44540 (+ (- (- (- (- (- (- ?x44526 ?x44527) ?x44529) ?x44531) ?x44533) ?x44535) ?x44537) ?x44539)))
 (= (+ (+ (+ (+ (+ ?x44540 ?x44541) ?x44543) ?x44545) ?x44547) ?x44549) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x42667 (* l_0_13_85 l_0_13_85)))
 (let ((?x42651 (* l_0_13_169 l_0_13_169)))
 (let ((?x44581 (- (+ (* (- l_0_13_106) l_0_13_106) (* l_0_13_148 l_0_13_148)) ?x42651)))
 (= (+ ?x44581 ?x42667) 0.0)))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x42968 (* ?x41416 l_0_13_88)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x42946 (* ?x41375 l_0_13_172)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x42944 (* ?x41372 l_0_13_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_109) ?x42944) ?x42946) ?x42968) 0.0))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x41417 (* ?x41416 l_0_13_91)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x41376 (* ?x41375 l_0_13_175)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x41373 (* ?x41372 l_0_13_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_112) ?x41373) ?x41376) ?x41417) 0.0))))))))
(assert
 (let ((?x41416 (* 2.0 l_0_13_85)))
 (let ((?x43135 (* ?x41416 l_0_13_95)))
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x43088 (* ?x41375 l_0_13_179)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x43084 (* ?x41372 l_0_13_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_116) ?x43084) ?x43088) ?x43135) 0.0))))))))
(assert
 (let ((?x41375 (* 2.0 l_0_13_169)))
 (let ((?x43197 (* ?x41375 l_0_13_184)))
 (let ((?x41372 (* 2.0 l_0_13_148)))
 (let ((?x43192 (* ?x41372 l_0_13_163)))
 (let ((?x41348 (* 2.0 l_0_13_106)))
 (let ((?x32592 (* ?x41348 l_0_13_121)))
 (= (- (+ (- (* (* 2.0 l_0_13_100) l_0_13_85) ?x32592) ?x43192) ?x43197) 0.0))))))))
(assert
 (let ((?x44190 (* l_0_13_90 l_0_13_90)))
 (let ((?x44188 (* l_0_13_89 l_0_13_89)))
 (let ((?x44186 (* l_0_13_88 l_0_13_88)))
 (let ((?x44178 (* l_0_13_174 l_0_13_174)))
 (let ((?x44176 (* l_0_13_173 l_0_13_173)))
 (let ((?x44174 (* l_0_13_172 l_0_13_172)))
 (let ((?x44172 (* l_0_13_153 l_0_13_153)))
 (let ((?x44170 (* l_0_13_152 l_0_13_152)))
 (let ((?x44168 (* l_0_13_151 l_0_13_151)))
 (let ((?x44166 (* l_0_13_111 l_0_13_111)))
 (let ((?x44614 (- (- (* (- l_0_13_109) l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x44166)))
 (let ((?x44621 (+ (- (- (- (+ (+ (+ ?x44614 ?x44168) ?x44170) ?x44172) ?x44174) ?x44176) ?x44178) ?x44186)))
 (= (+ (+ ?x44621 ?x44188) ?x44190) 0.0))))))))))))))
(assert
 (let ((?x42042 (* 2.0 l_0_13_90)))
 (let ((?x42043 (* ?x42042 l_0_13_93)))
 (let ((?x42039 (* 2.0 l_0_13_89)))
 (let ((?x42040 (* ?x42039 l_0_13_92)))
 (let ((?x42036 (* 2.0 l_0_13_88)))
 (let ((?x42037 (* ?x42036 l_0_13_91)))
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x42020 (* ?x42019 l_0_13_177)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x42017 (* ?x42016 l_0_13_176)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x42014 (* ?x42013 l_0_13_175)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x42011 (* ?x42010 l_0_13_156)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x42008 (* ?x42007 l_0_13_155)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x42005 (* ?x42004 l_0_13_154)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x41997 (* ?x41996 l_0_13_114)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x41994 (* ?x41993 l_0_13_113)))
 (let ((?x44637 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_112) ?x41994) ?x41997) ?x42005) ?x42008)))
 (let ((?x44644 (+ (+ (+ (- (- (- (+ ?x44637 ?x42011) ?x42014) ?x42017) ?x42020) ?x42037) ?x42040) ?x42043)))
 (= ?x44644 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42042 (* 2.0 l_0_13_90)))
 (let ((?x44241 (* ?x42042 l_0_13_97)))
 (let ((?x42039 (* 2.0 l_0_13_89)))
 (let ((?x44239 (* ?x42039 l_0_13_96)))
 (let ((?x42036 (* 2.0 l_0_13_88)))
 (let ((?x44237 (* ?x42036 l_0_13_95)))
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x44225 (* ?x42019 l_0_13_181)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x44223 (* ?x42016 l_0_13_180)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x44221 (* ?x42013 l_0_13_179)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x44219 (* ?x42010 l_0_13_160)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x44217 (* ?x42007 l_0_13_159)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x44215 (* ?x42004 l_0_13_158)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x44213 (* ?x41996 l_0_13_118)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x6628 (* ?x41993 l_0_13_117)))
 (let ((?x6516 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_116) ?x6628) ?x44213) ?x44215) ?x44217)))
 (let ((?x7554 (+ (+ (+ (- (- (- (+ ?x6516 ?x44219) ?x44221) ?x44223) ?x44225) ?x44237) ?x44239) ?x44241)))
 (= ?x7554 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42019 (* 2.0 l_0_13_174)))
 (let ((?x44283 (* ?x42019 l_0_13_186)))
 (let ((?x42016 (* 2.0 l_0_13_173)))
 (let ((?x44281 (* ?x42016 l_0_13_185)))
 (let ((?x42013 (* 2.0 l_0_13_172)))
 (let ((?x44279 (* ?x42013 l_0_13_184)))
 (let ((?x42010 (* 2.0 l_0_13_153)))
 (let ((?x44277 (* ?x42010 l_0_13_165)))
 (let ((?x42007 (* 2.0 l_0_13_152)))
 (let ((?x44275 (* ?x42007 l_0_13_164)))
 (let ((?x42004 (* 2.0 l_0_13_151)))
 (let ((?x44273 (* ?x42004 l_0_13_163)))
 (let ((?x41996 (* 2.0 l_0_13_111)))
 (let ((?x44268 (* ?x41996 l_0_13_123)))
 (let ((?x41993 (* 2.0 l_0_13_110)))
 (let ((?x6491 (* ?x41993 l_0_13_122)))
 (let ((?x41989 (* 2.0 l_0_13_109)))
 (let ((?x6670 (* ?x41989 l_0_13_121)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x33709 (* ?x42385 l_0_13_90)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x6793 (* ?x42382 l_0_13_89)))
 (let ((?x34371 (- (- (+ (+ (* (* 2.0 l_0_13_100) l_0_13_88) ?x6793) ?x33709) ?x6670) ?x6491)))
 (let ((?x44648 (- (- (- (+ (+ (+ (- ?x34371 ?x44268) ?x44273) ?x44275) ?x44277) ?x44279) ?x44281) ?x44283)))
 (= ?x44648 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42193 (* l_0_13_94 l_0_13_94)))
 (let ((?x42191 (* l_0_13_93 l_0_13_93)))
 (let ((?x42189 (* l_0_13_92 l_0_13_92)))
 (let ((?x42187 (* l_0_13_91 l_0_13_91)))
 (let ((?x42173 (* l_0_13_178 l_0_13_178)))
 (let ((?x42171 (* l_0_13_177 l_0_13_177)))
 (let ((?x42169 (* l_0_13_176 l_0_13_176)))
 (let ((?x42167 (* l_0_13_175 l_0_13_175)))
 (let ((?x42165 (* l_0_13_157 l_0_13_157)))
 (let ((?x42163 (* l_0_13_156 l_0_13_156)))
 (let ((?x42161 (* l_0_13_155 l_0_13_155)))
 (let ((?x42159 (* l_0_13_154 l_0_13_154)))
 (let ((?x42153 (* l_0_13_115 l_0_13_115)))
 (let ((?x42151 (* l_0_13_114 l_0_13_114)))
 (let ((?x34385 (- (- (* (- l_0_13_112) l_0_13_112) (* l_0_13_113 l_0_13_113)) ?x42151)))
 (let ((?x44657 (- (- (+ (+ (+ (+ (- ?x34385 ?x42153) ?x42159) ?x42161) ?x42163) ?x42165) ?x42167) ?x42169)))
 (= (+ (+ (+ (+ (- (- ?x44657 ?x42171) ?x42173) ?x42187) ?x42189) ?x42191) ?x42193) 0.0))))))))))))))))))
(assert
 (let ((?x42318 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x42315 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x42312 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x42309 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x42295 (* 2.0 l_0_13_178)))
 (let ((?x42296 (* ?x42295 l_0_13_182)))
 (let ((?x42292 (* 2.0 l_0_13_177)))
 (let ((?x42293 (* ?x42292 l_0_13_181)))
 (let ((?x42289 (* 2.0 l_0_13_176)))
 (let ((?x42290 (* ?x42289 l_0_13_180)))
 (let ((?x42286 (* 2.0 l_0_13_175)))
 (let ((?x42287 (* ?x42286 l_0_13_179)))
 (let ((?x42283 (* 2.0 l_0_13_157)))
 (let ((?x42284 (* ?x42283 l_0_13_161)))
 (let ((?x42280 (* 2.0 l_0_13_156)))
 (let ((?x42281 (* ?x42280 l_0_13_160)))
 (let ((?x42277 (* 2.0 l_0_13_155)))
 (let ((?x42278 (* ?x42277 l_0_13_159)))
 (let ((?x42274 (* 2.0 l_0_13_154)))
 (let ((?x42275 (* ?x42274 l_0_13_158)))
 (let ((?x42263 (* 2.0 l_0_13_115)))
 (let ((?x42264 (* ?x42263 l_0_13_119)))
 (let ((?x42260 (* 2.0 l_0_13_114)))
 (let ((?x42261 (* ?x42260 l_0_13_118)))
 (let ((?x42257 (* 2.0 l_0_13_113)))
 (let ((?x42258 (* ?x42257 l_0_13_117)))
 (let ((?x34395 (+ (- (- (- (* (* (- 2.0) l_0_13_112) l_0_13_116) ?x42258) ?x42261) ?x42264) ?x42275)))
 (let ((?x44676 (- (- (- (- (+ (+ (+ ?x34395 ?x42278) ?x42281) ?x42284) ?x42287) ?x42290) ?x42293) ?x42296)))
 (= (+ (+ (+ (+ ?x44676 ?x42309) ?x42312) ?x42315) ?x42318) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42295 (* 2.0 l_0_13_178)))
 (let ((?x42429 (* ?x42295 l_0_13_187)))
 (let ((?x42292 (* 2.0 l_0_13_177)))
 (let ((?x42427 (* ?x42292 l_0_13_186)))
 (let ((?x42289 (* 2.0 l_0_13_176)))
 (let ((?x42425 (* ?x42289 l_0_13_185)))
 (let ((?x42286 (* 2.0 l_0_13_175)))
 (let ((?x42423 (* ?x42286 l_0_13_184)))
 (let ((?x42283 (* 2.0 l_0_13_157)))
 (let ((?x42421 (* ?x42283 l_0_13_166)))
 (let ((?x42280 (* 2.0 l_0_13_156)))
 (let ((?x42419 (* ?x42280 l_0_13_165)))
 (let ((?x42277 (* 2.0 l_0_13_155)))
 (let ((?x42417 (* ?x42277 l_0_13_164)))
 (let ((?x42274 (* 2.0 l_0_13_154)))
 (let ((?x42415 (* ?x42274 l_0_13_163)))
 (let ((?x42263 (* 2.0 l_0_13_115)))
 (let ((?x42399 (* ?x42263 l_0_13_124)))
 (let ((?x42260 (* 2.0 l_0_13_114)))
 (let ((?x42397 (* ?x42260 l_0_13_123)))
 (let ((?x42257 (* 2.0 l_0_13_113)))
 (let ((?x42395 (* ?x42257 l_0_13_122)))
 (let ((?x42254 (* 2.0 l_0_13_112)))
 (let ((?x42393 (* ?x42254 l_0_13_121)))
 (let ((?x42388 (* 2.0 l_0_13_103)))
 (let ((?x42389 (* ?x42388 l_0_13_94)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x42386 (* ?x42385 l_0_13_93)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x42383 (* ?x42382 l_0_13_92)))
 (let ((?x44689 (- (+ (+ (+ (* (* 2.0 l_0_13_100) l_0_13_91) ?x42383) ?x42386) ?x42389) ?x42393)))
 (let ((?x44696 (+ (+ (+ (+ (- (- (- ?x44689 ?x42395) ?x42397) ?x42399) ?x42415) ?x42417) ?x42419) ?x42421)))
 (= (- (- (- (- ?x44696 ?x42423) ?x42425) ?x42427) ?x42429) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44370 (* l_0_13_99 l_0_13_99)))
 (let ((?x44368 (* l_0_13_98 l_0_13_98)))
 (let ((?x44366 (* l_0_13_97 l_0_13_97)))
 (let ((?x44364 (* l_0_13_96 l_0_13_96)))
 (let ((?x44362 (* l_0_13_95 l_0_13_95)))
 (let ((?x44360 (* l_0_13_183 l_0_13_183)))
 (let ((?x44358 (* l_0_13_182 l_0_13_182)))
 (let ((?x44356 (* l_0_13_181 l_0_13_181)))
 (let ((?x44354 (* l_0_13_180 l_0_13_180)))
 (let ((?x44352 (* l_0_13_179 l_0_13_179)))
 (let ((?x44350 (* l_0_13_162 l_0_13_162)))
 (let ((?x44348 (* l_0_13_161 l_0_13_161)))
 (let ((?x44346 (* l_0_13_160 l_0_13_160)))
 (let ((?x44344 (* l_0_13_159 l_0_13_159)))
 (let ((?x44342 (* l_0_13_158 l_0_13_158)))
 (let ((?x33863 (* l_0_13_120 l_0_13_120)))
 (let ((?x20775 (* l_0_13_119 l_0_13_119)))
 (let ((?x7010 (* l_0_13_118 l_0_13_118)))
 (let ((?x44703 (- (- (* (- l_0_13_116) l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x7010)))
 (let ((?x44710 (+ (+ (+ (+ (+ (- (- ?x44703 ?x20775) ?x33863) ?x44342) ?x44344) ?x44346) ?x44348) ?x44350)))
 (let ((?x44717 (+ (+ (- (- (- (- (- ?x44710 ?x44352) ?x44354) ?x44356) ?x44358) ?x44360) ?x44362) ?x44364)))
 (= (+ (+ (+ ?x44717 ?x44366) ?x44368) ?x44370) 0.0)))))))))))))))))))))))
(assert
 (let ((?x44446 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x44443 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x44440 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x44437 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x44434 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x44431 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x44428 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x44425 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x44422 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x44419 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x44411 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x44408 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x44405 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x44402 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x44399 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x44396 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x42388 (* 2.0 l_0_13_103)))
 (let ((?x44393 (* ?x42388 l_0_13_98)))
 (let ((?x42385 (* 2.0 l_0_13_102)))
 (let ((?x44391 (* ?x42385 l_0_13_97)))
 (let ((?x42382 (* 2.0 l_0_13_101)))
 (let ((?x33940 (* ?x42382 l_0_13_96)))
 (let ((?x34614 (+ (+ (+ (+ (* (* 2.0 l_0_13_100) l_0_13_95) ?x33940) ?x44391) ?x44393) ?x44396)))
 (let ((?x44736 (+ (+ (- (- (- (- (- ?x34614 ?x44399) ?x44402) ?x44405) ?x44408) ?x44411) ?x44419) ?x44422)))
 (let ((?x44743 (- (- (- (- (+ (+ (+ ?x44736 ?x44425) ?x44428) ?x44431) ?x44434) ?x44437) ?x44440) ?x44443)))
 (= (- ?x44743 ?x44446) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x44549 (* l_0_13_189 l_0_13_189)))
 (let ((?x44547 (* l_0_13_188 l_0_13_188)))
 (let ((?x44545 (* l_0_13_187 l_0_13_187)))
 (let ((?x44543 (* l_0_13_186 l_0_13_186)))
 (let ((?x44541 (* l_0_13_185 l_0_13_185)))
 (let ((?x44539 (* l_0_13_184 l_0_13_184)))
 (let ((?x44537 (* l_0_13_168 l_0_13_168)))
 (let ((?x44535 (* l_0_13_167 l_0_13_167)))
 (let ((?x44533 (* l_0_13_166 l_0_13_166)))
 (let ((?x44531 (* l_0_13_165 l_0_13_165)))
 (let ((?x44529 (* l_0_13_164 l_0_13_164)))
 (let ((?x44527 (* l_0_13_163 l_0_13_163)))
 (let ((?x44520 (* l_0_13_126 l_0_13_126)))
 (let ((?x44518 (* l_0_13_125 l_0_13_125)))
 (let ((?x44516 (* l_0_13_124 l_0_13_124)))
 (let ((?x44514 (* l_0_13_123 l_0_13_123)))
 (let ((?x44512 (* l_0_13_122 l_0_13_122)))
 (let ((?x44510 (* l_0_13_121 l_0_13_121)))
 (let ((?x44508 (* l_0_13_105 l_0_13_105)))
 (let ((?x44506 (* l_0_13_104 l_0_13_104)))
 (let ((?x44504 (* l_0_13_103 l_0_13_103)))
 (let ((?x44489 (* l_0_13_102 l_0_13_102)))
 (let ((?x7890 (+ (+ (* l_0_13_100 l_0_13_100) (* l_0_13_101 l_0_13_101)) ?x44489)))
 (let ((?x34609 (- (- (- (- (+ (+ (+ ?x7890 ?x44504) ?x44506) ?x44508) ?x44510) ?x44512) ?x44514) ?x44516)))
 (let ((?x34595 (+ (+ (+ (+ (+ (- (- ?x34609 ?x44518) ?x44520) ?x44527) ?x44529) ?x44531) ?x44533) ?x44535)))
 (let ((?x24141 (- (- (- (- (- (- (+ ?x34595 ?x44537) ?x44539) ?x44541) ?x44543) ?x44545) ?x44547) ?x44549)))
 (= ?x24141 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x43321 (* l_0_13_147 l_0_13_147)))
 (let ((?x43319 (* l_0_13_146 l_0_13_146)))
 (let ((?x43317 (* l_0_13_145 l_0_13_145)))
 (let ((?x43295 (* l_0_13_144 l_0_13_144)))
 (let ((?x34782 (- (- (* (- l_0_13_142) l_0_13_142) (* l_0_13_143 l_0_13_143)) ?x43295)))
 (= (- (- (- ?x34782 ?x43317) ?x43319) ?x43321) 0.0)))))))
(assert
 (>= l_0_13_1 0.0))
(assert
 (>= l_0_13_3 0.0))
(assert
 (>= l_0_13_6 0.0))
(assert
 (>= l_0_13_10 0.0))
(assert
 (>= l_0_13_15 0.0))
(assert
 (>= l_0_13_21 0.0))
(assert
 (>= l_0_13_22 0.0))
(assert
 (>= l_0_13_24 0.0))
(assert
 (>= l_0_13_27 0.0))
(assert
 (>= l_0_13_31 0.0))
(assert
 (>= l_0_13_36 0.0))
(assert
 (>= l_0_13_42 0.0))
(assert
 (>= l_0_13_43 0.0))
(assert
 (>= l_0_13_45 0.0))
(assert
 (>= l_0_13_48 0.0))
(assert
 (>= l_0_13_52 0.0))
(assert
 (>= l_0_13_57 0.0))
(assert
 (>= l_0_13_63 0.0))
(assert
 (>= l_0_13_64 0.0))
(assert
 (>= l_0_13_66 0.0))
(assert
 (>= l_0_13_69 0.0))
(assert
 (>= l_0_13_73 0.0))
(assert
 (>= l_0_13_78 0.0))
(assert
 (>= l_0_13_84 0.0))
(assert
 (>= l_0_13_85 0.0))
(assert
 (>= l_0_13_87 0.0))
(assert
 (>= l_0_13_90 0.0))
(assert
 (>= l_0_13_94 0.0))
(assert
 (>= l_0_13_99 0.0))
(assert
 (>= l_0_13_105 0.0))
(assert
 (>= l_0_13_106 0.0))
(assert
 (>= l_0_13_108 0.0))
(assert
 (>= l_0_13_111 0.0))
(assert
 (>= l_0_13_115 0.0))
(assert
 (>= l_0_13_120 0.0))
(assert
 (>= l_0_13_126 0.0))
(assert
 (>= l_0_13_127 0.0))
(assert
 (>= l_0_13_129 0.0))
(assert
 (>= l_0_13_132 0.0))
(assert
 (>= l_0_13_136 0.0))
(assert
 (>= l_0_13_141 0.0))
(assert
 (>= l_0_13_147 0.0))
(assert
 (>= l_0_13_148 0.0))
(assert
 (>= l_0_13_150 0.0))
(assert
 (>= l_0_13_153 0.0))
(assert
 (>= l_0_13_157 0.0))
(assert
 (>= l_0_13_162 0.0))
(assert
 (>= l_0_13_168 0.0))
(assert
 (>= l_0_13_169 0.0))
(assert
 (>= l_0_13_171 0.0))
(assert
 (>= l_0_13_174 0.0))
(assert
 (>= l_0_13_178 0.0))
(assert
 (>= l_0_13_183 0.0))
(assert
 (>= l_0_13_189 0.0))
(assert
 (>= l_0_13_190 0.0))
(assert
 (>= l_0_13_192 0.0))
(assert
 (>= l_0_13_195 0.0))
(assert
 (>= l_0_13_199 0.0))
(assert
 (>= l_0_13_204 0.0))
(assert
 (>= l_0_13_210 0.0))
(assert
 (let ((?x44816 (* l_0_14_66 l_0_14_66)))
 (let ((?x44817 (* 3.0 ?x44816)))
 (let ((?x44813 (* l_0_14_65 l_0_14_65)))
 (let ((?x44814 (* 3.0 ?x44813)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x44811 (* ?x44810 l_0_14_65)))
 (let ((?x44808 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (let ((?x44805 (* (* 3.0 l_0_14_44) l_0_14_44)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x44802 (* ?x44801 l_0_14_44)))
 (let ((?x44798 (* l_0_14_3 l_0_14_3)))
 (let ((?x44799 (* 6.0 ?x44798)))
 (let ((?x44796 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x44793 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x44790 (* ?x44789 l_0_14_23)))
 (let ((?x44783 (* l_0_14_2 l_0_14_2)))
 (let ((?x44784 (* 6.0 ?x44783)))
 (let ((?x44778 (* l_0_14_129 l_0_14_129)))
 (let ((?x44779 (+ (+ (* (* 12.0 l_0_14_1) l_0_14_2) (* l_0_14_128 l_0_14_128)) ?x44778)))
 (let ((?x44788 (- (+ (- ?x44779 (* (* 2.0 l_0_14_190) l_0_14_191)) ?x44784) (* (* 2.0 l_0_14_211) l_0_14_212))))
 (let ((?x44809 (- (- (- (+ (- (- (- ?x44788 ?x44790) ?x44793) ?x44796) ?x44799) ?x44802) ?x44805) ?x44808)))
 (= (+ (+ (+ (+ ?x44809 ?x44811) ?x44814) ?x44817) 6.0) 0.0))))))))))))))))))))))))
(assert
 (let ((?x44798 (* l_0_14_3 l_0_14_3)))
 (let ((?x44799 (* 6.0 ?x44798)))
 (let ((?x44796 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x44793 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x34775 (* l_0_14_213 l_0_14_213)))
 (let ((?x24299 (* l_0_14_212 l_0_14_212)))
 (let ((?x44783 (* l_0_14_2 l_0_14_2)))
 (let ((?x44784 (* 6.0 ?x44783)))
 (let ((?x24276 (* l_0_14_192 l_0_14_192)))
 (let ((?x24301 (- (+ (- (- (- _a_12_) (* l_0_14_191 l_0_14_191)) ?x24276) ?x44784) ?x24299)))
 (let ((?x24322 (- (+ (- (- (- ?x24301 ?x34775) ?x44793) ?x44796) ?x44799) (* (* 1.0 l_0_14_44) l_0_14_44))))
 (let ((?x34796 (+ (- ?x24322 (* (* 1.0 l_0_14_45) l_0_14_45)) (* 1.0 (* l_0_14_65 l_0_14_65)))))
 (= (+ (+ ?x34796 (* 1.0 (* l_0_14_66 l_0_14_66))) 12.0) 0.0))))))))))))))
(assert
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x44899 (* ?x44898 l_0_14_71)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x44896 (* ?x44895 l_0_14_70)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x44893 (* ?x44892 l_0_14_50)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x44890 (* ?x44889 l_0_14_49)))
 (let ((?x44798 (* l_0_14_3 l_0_14_3)))
 (let ((?x44885 (* 12.0 l_0_14_3)))
 (let ((?x44886 (* ?x44885 l_0_14_8)))
 (let ((?x22464 (* l_0_14_24 l_0_14_24)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x44882 (* ?x44881 l_0_14_29)))
 (let ((?x23445 (* l_0_14_23 l_0_14_23)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x44878 (* ?x44877 l_0_14_28)))
 (let ((?x44783 (* l_0_14_2 l_0_14_2)))
 (let ((?x44867 (* 12.0 l_0_14_2)))
 (let ((?x44868 (* ?x44867 l_0_14_7)))
 (let ((?x44866 (- (- (- _a_13_) (* (* 2.0 l_0_14_191) l_0_14_196)) (* (* 2.0 l_0_14_192) l_0_14_197))))
 (let ((?x44876 (- (- (- (+ ?x44866 ?x44868) ?x44783) (* (* 2.0 l_0_14_212) l_0_14_217)) (* (* 2.0 l_0_14_213) l_0_14_218))))
 (let ((?x44891 (- (- (+ (+ (- (+ (- ?x44876 ?x44878) ?x23445) ?x44882) ?x22464) ?x44886) ?x44798) ?x44890)))
 (= (+ (+ (- ?x44891 ?x44893) ?x44896) ?x44899) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x44963 (* ?x44962 l_0_14_71)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x44960 (* ?x44959 l_0_14_70)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x44957 (* ?x44956 l_0_14_70)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x44954 (* ?x44953 l_0_14_50)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x44951 (* ?x44950 l_0_14_49)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x44948 (* ?x44947 l_0_14_49)))
 (let ((?x44945 (* l_0_14_22 l_0_14_22)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x44943 (* ?x44789 l_0_14_28)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x44941 (* ?x44940 l_0_14_133)))
 (let ((?x44942 (+ (- (* (* 12.0 l_0_14_1) l_0_14_7) (* l_0_14_1 l_0_14_1)) ?x44941)))
 (let ((?x44961 (+ (+ (- (- (- (+ (- ?x44942 ?x44943) ?x44945) ?x44948) ?x44951) ?x44954) ?x44957) ?x44960)))
 (= (+ ?x44961 ?x44963) 0.0)))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x44963 (* ?x44962 l_0_14_71)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x44960 (* ?x44959 l_0_14_70)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x45021 (* ?x44810 l_0_14_70)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x44954 (* ?x44953 l_0_14_50)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x44951 (* ?x44950 l_0_14_49)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x45017 (* ?x44801 l_0_14_49)))
 (let ((?x44885 (* 12.0 l_0_14_3)))
 (let ((?x44886 (* ?x44885 l_0_14_8)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x44882 (* ?x44881 l_0_14_29)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x44878 (* ?x44877 l_0_14_28)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x44943 (* ?x44789 l_0_14_28)))
 (let ((?x44867 (* 12.0 l_0_14_2)))
 (let ((?x44868 (* ?x44867 l_0_14_7)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x45003 (* ?x45002 l_0_14_134)))
 (let ((?x44999 (* 2.0 l_0_14_128)))
 (let ((?x45000 (* ?x44999 l_0_14_133)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x24520 (* ?x44774 l_0_14_7)))
 (let ((?x45006 (- (+ (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_2) ?x24520) ?x45000) ?x45003) (* (* 2.0 l_0_14_190) l_0_14_196))))
 (let ((?x45012 (+ (- (+ ?x45006 ?x44868) (* (* 2.0 l_0_14_211) l_0_14_217)) (* (* 2.0 l_0_14_22) l_0_14_23))))
 (let ((?x45020 (- (- (- (+ (- (- (- ?x45012 ?x44943) ?x44878) ?x44882) ?x44886) ?x45017) ?x44951) ?x44954)))
 (= (+ (+ (+ ?x45020 ?x45021) ?x44960) ?x44963) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x45088 (* ?x45087 l_0_14_72)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x45085 (* ?x45084 l_0_14_71)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x45082 (* ?x45081 l_0_14_70)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x45021 (* ?x44810 l_0_14_70)))
 (let ((?x45078 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x45075 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x45072 (* ?x45071 l_0_14_51)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x45069 (* ?x45068 l_0_14_50)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x45017 (* ?x44801 l_0_14_49)))
 (let ((?x45062 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x45059 (* ?x45058 l_0_14_30)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x45056 (* ?x45055 l_0_14_29)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x45053 (* ?x45052 l_0_14_28)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x45048 (* ?x45047 l_0_14_135)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x45045 (* ?x45044 l_0_14_134)))
 (let ((?x45043 (+ (* (* (- 2.0) l_0_14_1) l_0_14_4) (* (* 2.0 l_0_14_130) l_0_14_133))))
 (let ((?x45054 (- (+ (+ (+ ?x45043 ?x45045) ?x45048) (* (* 2.0 l_0_14_22) l_0_14_25)) ?x45053)))
 (let ((?x45067 (- (+ (+ (- (- ?x45054 ?x45056) ?x45059) ?x45062) ?x45017) (* (* 6.0 l_0_14_46) l_0_14_49))))
 (let ((?x45086 (+ (+ (- (+ (+ (- (- ?x45067 ?x45069) ?x45072) ?x45075) ?x45078) ?x45021) ?x45082) ?x45085)))
 (= (+ ?x45086 ?x45088) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x45193 (* l_0_14_9 l_0_14_9)))
 (let ((?x45194 (* 6.0 ?x45193)))
 (let ((?x45190 (* l_0_14_8 l_0_14_8)))
 (let ((?x45191 (* 6.0 ?x45190)))
 (let ((?x45187 (* l_0_14_73 l_0_14_73)))
 (let ((?x45188 (* 3.0 ?x45187)))
 (let ((?x45184 (* l_0_14_72 l_0_14_72)))
 (let ((?x45185 (* 3.0 ?x45184)))
 (let ((?x45181 (* l_0_14_71 l_0_14_71)))
 (let ((?x45182 (* 3.0 ?x45181)))
 (let ((?x45178 (* l_0_14_70 l_0_14_70)))
 (let ((?x45179 (* 3.0 ?x45178)))
 (let ((?x45175 (* l_0_14_7 l_0_14_7)))
 (let ((?x45176 (* 6.0 ?x45175)))
 (let ((?x45173 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x45170 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x45167 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x45161 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x45158 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x45155 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x45152 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x45147 (* l_0_14_136 l_0_14_136)))
 (let ((?x45145 (* l_0_14_135 l_0_14_135)))
 (let ((?x45143 (* l_0_14_134 l_0_14_134)))
 (let ((?x45141 (* l_0_14_133 l_0_14_133)))
 (let ((?x45138 (* l_0_14_10 l_0_14_10)))
 (let ((?x45139 (* 6.0 ?x45138)))
 (let ((?x45146 (+ (+ (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_7) ?x45139) ?x45141) ?x45143) ?x45145)))
 (let ((?x45156 (- (- (+ (+ ?x45146 ?x45147) (* (* 2.0 l_0_14_22) l_0_14_28)) ?x45152) ?x45155)))
 (let ((?x45168 (- (- (- (- ?x45156 ?x45158) ?x45161) (* (* 3.0 l_0_14_49) l_0_14_49)) ?x45167)))
 (let ((?x45189 (+ (+ (+ (+ (+ (- (- ?x45168 ?x45170) ?x45173) ?x45176) ?x45179) ?x45182) ?x45185) ?x45188)))
 (= (+ (+ ?x45189 ?x45191) ?x45194) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x45320 (* ?x45319 l_0_14_91)))
 (let ((?x45316 (* 6.0 l_0_14_73)))
 (let ((?x45317 (* ?x45316 l_0_14_77)))
 (let ((?x45313 (* 6.0 l_0_14_72)))
 (let ((?x45314 (* ?x45313 l_0_14_76)))
 (let ((?x45310 (* 6.0 l_0_14_71)))
 (let ((?x45311 (* ?x45310 l_0_14_75)))
 (let ((?x45307 (* 6.0 l_0_14_70)))
 (let ((?x45308 (* ?x45307 l_0_14_74)))
 (let ((?x45304 (* 6.0 l_0_14_52)))
 (let ((?x45305 (* ?x45304 l_0_14_56)))
 (let ((?x45301 (* 6.0 l_0_14_51)))
 (let ((?x45302 (* ?x45301 l_0_14_55)))
 (let ((?x45298 (* 6.0 l_0_14_50)))
 (let ((?x45299 (* ?x45298 l_0_14_54)))
 (let ((?x45292 (* 12.0 l_0_14_31)))
 (let ((?x45293 (* ?x45292 l_0_14_35)))
 (let ((?x45289 (* 12.0 l_0_14_30)))
 (let ((?x45290 (* ?x45289 l_0_14_34)))
 (let ((?x45286 (* 12.0 l_0_14_29)))
 (let ((?x45287 (* ?x45286 l_0_14_33)))
 (let ((?x45283 (* 12.0 l_0_14_28)))
 (let ((?x45284 (* ?x45283 l_0_14_32)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x45279 (* ?x45278 l_0_14_175)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x45276 (* ?x45275 l_0_14_154)))
 (let ((?x45272 (* 2.0 l_0_14_136)))
 (let ((?x45273 (* ?x45272 l_0_14_140)))
 (let ((?x45269 (* 2.0 l_0_14_135)))
 (let ((?x45270 (* ?x45269 l_0_14_139)))
 (let ((?x45266 (* 2.0 l_0_14_134)))
 (let ((?x45267 (* ?x45266 l_0_14_138)))
 (let ((?x45263 (* 2.0 l_0_14_133)))
 (let ((?x45264 (* ?x45263 l_0_14_137)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x45261 (* ?x45260 l_0_14_9)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x45258 (* ?x45257 l_0_14_8)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x45255 (* ?x45254 l_0_14_7)))
 (let ((?x45248 (* 12.0 l_0_14_10)))
 (let ((?x45249 (* ?x45248 l_0_14_14)))
 (let ((?x45253 (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_11) ?x45249) (* (* 2.0 l_0_14_106) l_0_14_112))))
 (let ((?x45274 (+ (+ (+ (+ (+ (+ (+ ?x45253 ?x45255) ?x45258) ?x45261) ?x45264) ?x45267) ?x45270) ?x45273)))
 (let ((?x45285 (- (+ (+ (- ?x45274 ?x45276) ?x45279) (* (* 2.0 l_0_14_22) l_0_14_32)) ?x45284)))
 (let ((?x45297 (- (- (- (- ?x45285 ?x45287) ?x45290) ?x45293) (* (* 6.0 l_0_14_49) l_0_14_53))))
 (let ((?x45318 (+ (+ (+ (+ (- (- (- ?x45297 ?x45299) ?x45302) ?x45305) ?x45308) ?x45311) ?x45314) ?x45317)))
 (= (- ?x45318 ?x45320) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45316 (* 6.0 l_0_14_73)))
 (let ((?x45437 (* ?x45316 l_0_14_82)))
 (let ((?x45313 (* 6.0 l_0_14_72)))
 (let ((?x45435 (* ?x45313 l_0_14_81)))
 (let ((?x45310 (* 6.0 l_0_14_71)))
 (let ((?x45433 (* ?x45310 l_0_14_80)))
 (let ((?x45307 (* 6.0 l_0_14_70)))
 (let ((?x45431 (* ?x45307 l_0_14_79)))
 (let ((?x45304 (* 6.0 l_0_14_52)))
 (let ((?x45429 (* ?x45304 l_0_14_61)))
 (let ((?x45301 (* 6.0 l_0_14_51)))
 (let ((?x45427 (* ?x45301 l_0_14_60)))
 (let ((?x45298 (* 6.0 l_0_14_50)))
 (let ((?x45425 (* ?x45298 l_0_14_59)))
 (let ((?x45292 (* 12.0 l_0_14_31)))
 (let ((?x45421 (* ?x45292 l_0_14_40)))
 (let ((?x45289 (* 12.0 l_0_14_30)))
 (let ((?x45419 (* ?x45289 l_0_14_39)))
 (let ((?x45286 (* 12.0 l_0_14_29)))
 (let ((?x45417 (* ?x45286 l_0_14_38)))
 (let ((?x45283 (* 12.0 l_0_14_28)))
 (let ((?x45415 (* ?x45283 l_0_14_37)))
 (let ((?x45410 (* 12.0 l_0_14_18)))
 (let ((?x45411 (* ?x45410 l_0_14_9)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x45408 (* ?x45407 l_0_14_8)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x45405 (* ?x45404 l_0_14_7)))
 (let ((?x45272 (* 2.0 l_0_14_136)))
 (let ((?x45402 (* ?x45272 l_0_14_145)))
 (let ((?x45269 (* 2.0 l_0_14_135)))
 (let ((?x45400 (* ?x45269 l_0_14_144)))
 (let ((?x45266 (* 2.0 l_0_14_134)))
 (let ((?x45398 (* ?x45266 l_0_14_143)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x44941 (* ?x44940 l_0_14_133)))
 (let ((?x45248 (* 12.0 l_0_14_10)))
 (let ((?x5151 (* ?x45248 l_0_14_19)))
 (let ((?x45397 (+ (- (+ (* (* (- 2.0) l_0_14_1) l_0_14_16) ?x5151) ?x44941) (* (* 2.0 l_0_14_133) l_0_14_142))))
 (let ((?x45414 (+ (+ (+ (+ (+ (+ (+ ?x45397 ?x45398) ?x45400) ?x45402) ?x45405) ?x45408) ?x45411) (* (* 2.0 l_0_14_22) l_0_14_37))))
 (let ((?x45424 (- (- (- (- (- ?x45414 ?x45415) ?x45417) ?x45419) ?x45421) (* (* 6.0 l_0_14_49) l_0_14_58))))
 (let ((?x45438 (+ (+ (+ (+ (- (- (- ?x45424 ?x45425) ?x45427) ?x45429) ?x45431) ?x45433) ?x45435) ?x45437)))
 (= ?x45438 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x45548 (* ?x45547 l_0_14_72)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x45545 (* ?x45544 l_0_14_71)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x45542 (* ?x45541 l_0_14_70)))
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x44899 (* ?x44898 l_0_14_71)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x44896 (* ?x44895 l_0_14_70)))
 (let ((?x45078 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x45075 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x45535 (* ?x45534 l_0_14_51)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x45532 (* ?x45531 l_0_14_50)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x45529 (* ?x45528 l_0_14_49)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x44893 (* ?x44892 l_0_14_50)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x44890 (* ?x44889 l_0_14_49)))
 (let ((?x45062 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x45059 (* ?x45058 l_0_14_30)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x45056 (* ?x45055 l_0_14_29)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x45053 (* ?x45052 l_0_14_28)))
 (let ((?x45497 (- (* (* (- 2.0) l_0_14_193) l_0_14_196) (* (* 2.0 l_0_14_194) l_0_14_197))))
 (let ((?x45503 (- (- ?x45497 (* (* 2.0 l_0_14_195) l_0_14_198)) (* (* 2.0 l_0_14_2) l_0_14_4))))
 (let ((?x45509 (- (- ?x45503 (* (* 2.0 l_0_14_214) l_0_14_217)) (* (* 2.0 l_0_14_215) l_0_14_218))))
 (let ((?x45515 (+ (- ?x45509 (* (* 2.0 l_0_14_216) l_0_14_219)) (* (* 2.0 l_0_14_23) l_0_14_25))))
 (let ((?x45521 (- (- (- (+ ?x45515 (* (* 2.0 l_0_14_24) l_0_14_26)) ?x45053) ?x45056) ?x45059)))
 (let ((?x45527 (+ (+ (+ (- ?x45521 (* (* 2.0 l_0_14_3) l_0_14_5)) ?x45062) ?x44890) ?x44893)))
 (let ((?x45540 (- (- (+ (+ (- (- (- ?x45527 ?x45529) ?x45532) ?x45535) ?x45075) ?x45078) ?x44896) ?x44899)))
 (= (+ (+ (+ ?x45540 ?x45542) ?x45545) ?x45548) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45193 (* l_0_14_9 l_0_14_9)))
 (let ((?x45194 (* 6.0 ?x45193)))
 (let ((?x45190 (* l_0_14_8 l_0_14_8)))
 (let ((?x45191 (* 6.0 ?x45190)))
 (let ((?x45175 (* l_0_14_7 l_0_14_7)))
 (let ((?x45176 (* 6.0 ?x45175)))
 (let ((?x45161 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x45158 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x45155 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x45152 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x45619 (* l_0_14_220 l_0_14_220)))
 (let ((?x45617 (* l_0_14_219 l_0_14_219)))
 (let ((?x45615 (* l_0_14_218 l_0_14_218)))
 (let ((?x45613 (* l_0_14_217 l_0_14_217)))
 (let ((?x45609 (* l_0_14_199 l_0_14_199)))
 (let ((?x45607 (* l_0_14_198 l_0_14_198)))
 (let ((?x45594 (* l_0_14_197 l_0_14_197)))
 (let ((?x45593 (* l_0_14_196 l_0_14_196)))
 (let ((?x45138 (* l_0_14_10 l_0_14_10)))
 (let ((?x45139 (* 6.0 ?x45138)))
 (let ((?x45612 (- (- (- (- (- ?x45139 ?x45593) ?x45594) ?x45607) ?x45609) (* (* 2.0 l_0_14_2) l_0_14_7))))
 (let ((?x45622 (+ (- (- (- (- ?x45612 ?x45613) ?x45615) ?x45617) ?x45619) (* (* 2.0 l_0_14_23) l_0_14_28))))
 (let ((?x45628 (- (- (- (+ ?x45622 (* (* 2.0 l_0_14_24) l_0_14_29)) ?x45152) ?x45155) (* (* 2.0 l_0_14_3) l_0_14_8))))
 (let ((?x45636 (- (- (- (- ?x45628 ?x45158) ?x45161) (* (* 1.0 l_0_14_49) l_0_14_49)) (* (* 1.0 l_0_14_50) l_0_14_50))))
 (let ((?x45642 (- (- ?x45636 (* (* 1.0 l_0_14_51) l_0_14_51)) (* (* 1.0 l_0_14_52) l_0_14_52))))
 (let ((?x45647 (+ (+ (+ ?x45642 ?x45176) (* 1.0 (* l_0_14_70 l_0_14_70))) (* 1.0 (* l_0_14_71 l_0_14_71)))))
 (let ((?x45651 (+ (+ ?x45647 (* 1.0 (* l_0_14_72 l_0_14_72))) (* 1.0 (* l_0_14_73 l_0_14_73)))))
 (= (+ (+ ?x45651 ?x45191) ?x45194) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x45751 (* ?x45750 l_0_14_92)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x45748 (* ?x45747 l_0_14_91)))
 (let ((?x45744 (* 2.0 l_0_14_73)))
 (let ((?x45745 (* ?x45744 l_0_14_77)))
 (let ((?x45741 (* 2.0 l_0_14_72)))
 (let ((?x45742 (* ?x45741 l_0_14_76)))
 (let ((?x45738 (* 2.0 l_0_14_71)))
 (let ((?x45739 (* ?x45738 l_0_14_75)))
 (let ((?x45735 (* 2.0 l_0_14_70)))
 (let ((?x45736 (* ?x45735 l_0_14_74)))
 (let ((?x45732 (* 2.0 l_0_14_52)))
 (let ((?x45733 (* ?x45732 l_0_14_56)))
 (let ((?x45729 (* 2.0 l_0_14_51)))
 (let ((?x45730 (* ?x45729 l_0_14_55)))
 (let ((?x45726 (* 2.0 l_0_14_50)))
 (let ((?x45727 (* ?x45726 l_0_14_54)))
 (let ((?x45723 (* 2.0 l_0_14_49)))
 (let ((?x45724 (* ?x45723 l_0_14_53)))
 (let ((?x45292 (* 12.0 l_0_14_31)))
 (let ((?x45293 (* ?x45292 l_0_14_35)))
 (let ((?x45289 (* 12.0 l_0_14_30)))
 (let ((?x45290 (* ?x45289 l_0_14_34)))
 (let ((?x45286 (* 12.0 l_0_14_29)))
 (let ((?x45287 (* ?x45286 l_0_14_33)))
 (let ((?x45283 (* 12.0 l_0_14_28)))
 (let ((?x45284 (* ?x45283 l_0_14_32)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x45689 (* ?x45688 l_0_14_176)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x45686 (* ?x45685 l_0_14_175)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x45683 (* ?x45682 l_0_14_155)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x45680 (* ?x45679 l_0_14_154)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x45261 (* ?x45260 l_0_14_9)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x45258 (* ?x45257 l_0_14_8)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x45255 (* ?x45254 l_0_14_7)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x35067 (* ?x24913 l_0_14_113)))
 (let ((?x45248 (* 12.0 l_0_14_10)))
 (let ((?x45249 (* ?x45248 l_0_14_14)))
 (let ((?x24925 (- (+ (+ ?x45249 (* (* 2.0 l_0_14_107) l_0_14_112)) ?x35067) (* (* 2.0 l_0_14_11) l_0_14_2))))
 (let ((?x45678 (+ (+ (- (+ ?x24925 ?x45255) (* (* 2.0 l_0_14_12) l_0_14_3)) ?x45258) ?x45261)))
 (let ((?x45693 (- (+ (+ (- (- ?x45678 ?x45680) ?x45683) ?x45686) ?x45689) (* (* 2.0 l_0_14_196) l_0_14_200))))
 (let ((?x45699 (- (- ?x45693 (* (* 2.0 l_0_14_197) l_0_14_201)) (* (* 2.0 l_0_14_198) l_0_14_202))))
 (let ((?x45705 (- (- ?x45699 (* (* 2.0 l_0_14_199) l_0_14_203)) (* (* 2.0 l_0_14_217) l_0_14_221))))
 (let ((?x45711 (- (- ?x45705 (* (* 2.0 l_0_14_218) l_0_14_222)) (* (* 2.0 l_0_14_219) l_0_14_223))))
 (let ((?x45716 (+ (- ?x45711 (* (* 2.0 l_0_14_220) l_0_14_224)) (* (* 2.0 l_0_14_23) l_0_14_32))))
 (let ((?x45721 (- (- (- (+ ?x45716 (* (* 2.0 l_0_14_24) l_0_14_33)) ?x45284) ?x45287) ?x45290)))
 (let ((?x45740 (+ (+ (- (- (- (- (- ?x45721 ?x45293) ?x45724) ?x45727) ?x45730) ?x45733) ?x45736) ?x45739)))
 (= (- (- (+ (+ ?x45740 ?x45742) ?x45745) ?x45748) ?x45751) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45744 (* 2.0 l_0_14_73)))
 (let ((?x45904 (* ?x45744 l_0_14_82)))
 (let ((?x45741 (* 2.0 l_0_14_72)))
 (let ((?x45902 (* ?x45741 l_0_14_81)))
 (let ((?x45738 (* 2.0 l_0_14_71)))
 (let ((?x45900 (* ?x45738 l_0_14_80)))
 (let ((?x45735 (* 2.0 l_0_14_70)))
 (let ((?x45898 (* ?x45735 l_0_14_79)))
 (let ((?x45732 (* 2.0 l_0_14_52)))
 (let ((?x45896 (* ?x45732 l_0_14_61)))
 (let ((?x45729 (* 2.0 l_0_14_51)))
 (let ((?x45894 (* ?x45729 l_0_14_60)))
 (let ((?x45726 (* 2.0 l_0_14_50)))
 (let ((?x45892 (* ?x45726 l_0_14_59)))
 (let ((?x45723 (* 2.0 l_0_14_49)))
 (let ((?x45890 (* ?x45723 l_0_14_58)))
 (let ((?x45292 (* 12.0 l_0_14_31)))
 (let ((?x45421 (* ?x45292 l_0_14_40)))
 (let ((?x45289 (* 12.0 l_0_14_30)))
 (let ((?x45419 (* ?x45289 l_0_14_39)))
 (let ((?x45286 (* 12.0 l_0_14_29)))
 (let ((?x45417 (* ?x45286 l_0_14_38)))
 (let ((?x45283 (* 12.0 l_0_14_28)))
 (let ((?x45415 (* ?x45283 l_0_14_37)))
 (let ((?x45410 (* 12.0 l_0_14_18)))
 (let ((?x45411 (* ?x45410 l_0_14_9)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x45408 (* ?x45407 l_0_14_8)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x45405 (* ?x45404 l_0_14_7)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x45003 (* ?x45002 l_0_14_134)))
 (let ((?x44999 (* 2.0 l_0_14_128)))
 (let ((?x45000 (* ?x44999 l_0_14_133)))
 (let ((?x45248 (* 12.0 l_0_14_10)))
 (let ((?x5151 (* ?x45248 l_0_14_19)))
 (let ((?x45860 (+ (- (- (- ?x5151 ?x45000) ?x45003) (* (* 2.0 l_0_14_16) l_0_14_2)) ?x45405)))
 (let ((?x45867 (- (+ (+ (- ?x45860 (* (* 2.0 l_0_14_17) l_0_14_3)) ?x45408) ?x45411) (* (* 2.0 l_0_14_196) l_0_14_205))))
 (let ((?x45871 (- (- ?x45867 (* (* 2.0 l_0_14_197) l_0_14_206)) (* (* 2.0 l_0_14_198) l_0_14_207))))
 (let ((?x45875 (- (- ?x45871 (* (* 2.0 l_0_14_199) l_0_14_208)) (* (* 2.0 l_0_14_217) l_0_14_226))))
 (let ((?x45879 (- (- ?x45875 (* (* 2.0 l_0_14_218) l_0_14_227)) (* (* 2.0 l_0_14_219) l_0_14_228))))
 (let ((?x45883 (+ (- ?x45879 (* (* 2.0 l_0_14_220) l_0_14_229)) (* (* 2.0 l_0_14_23) l_0_14_37))))
 (let ((?x45888 (- (- (- (+ ?x45883 (* (* 2.0 l_0_14_24) l_0_14_38)) ?x45415) ?x45417) ?x45419)))
 (let ((?x45901 (+ (+ (- (- (- (- (- ?x45888 ?x45421) ?x45890) ?x45892) ?x45894) ?x45896) ?x45898) ?x45900)))
 (= (+ (+ ?x45901 ?x45902) ?x45904) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x45548 (* ?x45547 l_0_14_72)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x45545 (* ?x45544 l_0_14_71)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x45542 (* ?x45541 l_0_14_70)))
 (let ((?x45967 (* l_0_14_6 l_0_14_6)))
 (let ((?x45965 (* l_0_14_5 l_0_14_5)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x45535 (* ?x45534 l_0_14_51)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x45532 (* ?x45531 l_0_14_50)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x45529 (* ?x45528 l_0_14_49)))
 (let ((?x45960 (* l_0_14_4 l_0_14_4)))
 (let ((?x45946 (* l_0_14_27 l_0_14_27)))
 (let ((?x45961 (- (+ (+ (* l_0_14_25 l_0_14_25) (* l_0_14_26 l_0_14_26)) ?x45946) ?x45960)))
 (let ((?x45970 (- (- (- (- (+ (+ (+ ?x45961 ?x45529) ?x45532) ?x45535) ?x45965) ?x45967) ?x45542) ?x45545)))
 (= (- ?x45970 ?x45548) 0.0))))))))))))))))))))
(assert
 (let ((?x45187 (* l_0_14_73 l_0_14_73)))
 (let ((?x45184 (* l_0_14_72 l_0_14_72)))
 (let ((?x45181 (* l_0_14_71 l_0_14_71)))
 (let ((?x45178 (* l_0_14_70 l_0_14_70)))
 (let ((?x31938 (* l_0_14_52 l_0_14_52)))
 (let ((?x34893 (* l_0_14_51 l_0_14_51)))
 (let ((?x34892 (* l_0_14_50 l_0_14_50)))
 (let ((?x45218 (* l_0_14_49 l_0_14_49)))
 (let ((?x9202 (+ (* (* 2.0 l_0_14_25) l_0_14_28) (* (* 2.0 l_0_14_26) l_0_14_29))))
 (let ((?x45978 (- (+ ?x9202 (* (* 2.0 l_0_14_27) l_0_14_30)) (* (* 2.0 l_0_14_4) l_0_14_7))))
 (let ((?x45984 (+ (+ (- (+ ?x45978 ?x45218) (* (* 2.0 l_0_14_5) l_0_14_8)) ?x34892) ?x34893)))
 (let ((?x45990 (- (- (- (+ ?x45984 ?x31938) (* (* 2.0 l_0_14_6) l_0_14_9)) ?x45178) ?x45181)))
 (= (- (- ?x45990 ?x45184) ?x45187) 0.0))))))))))))))
(assert
 (let ((?x46069 (* 2.0 l_0_14_90)))
 (let ((?x46070 (* ?x46069 l_0_14_93)))
 (let ((?x46066 (* 2.0 l_0_14_89)))
 (let ((?x46067 (* ?x46066 l_0_14_92)))
 (let ((?x46063 (* 2.0 l_0_14_88)))
 (let ((?x46064 (* ?x46063 l_0_14_91)))
 (let ((?x45744 (* 2.0 l_0_14_73)))
 (let ((?x45745 (* ?x45744 l_0_14_77)))
 (let ((?x45741 (* 2.0 l_0_14_72)))
 (let ((?x45742 (* ?x45741 l_0_14_76)))
 (let ((?x45738 (* 2.0 l_0_14_71)))
 (let ((?x45739 (* ?x45738 l_0_14_75)))
 (let ((?x45735 (* 2.0 l_0_14_70)))
 (let ((?x45736 (* ?x45735 l_0_14_74)))
 (let ((?x45732 (* 2.0 l_0_14_52)))
 (let ((?x45733 (* ?x45732 l_0_14_56)))
 (let ((?x45729 (* 2.0 l_0_14_51)))
 (let ((?x45730 (* ?x45729 l_0_14_55)))
 (let ((?x45726 (* 2.0 l_0_14_50)))
 (let ((?x45727 (* ?x45726 l_0_14_54)))
 (let ((?x45723 (* 2.0 l_0_14_49)))
 (let ((?x45724 (* ?x45723 l_0_14_53)))
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x46047 (* ?x46046 l_0_14_177)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x46044 (* ?x46043 l_0_14_176)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x46041 (* ?x46040 l_0_14_175)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x46038 (* ?x46037 l_0_14_156)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x46035 (* ?x46034 l_0_14_155)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x46032 (* ?x46031 l_0_14_154)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x46024 (* ?x46023 l_0_14_114)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x46021 (* ?x46020 l_0_14_113)))
 (let ((?x46019 (- (* (* 2.0 l_0_14_109) l_0_14_112) (* (* 2.0 l_0_14_11) l_0_14_4))))
 (let ((?x46030 (- (- (+ (+ ?x46019 ?x46021) ?x46024) (* (* 2.0 l_0_14_12) l_0_14_5)) (* (* 2.0 l_0_14_13) l_0_14_6))))
 (let ((?x46050 (+ (+ (+ (+ (- (- (- ?x46030 ?x46032) ?x46035) ?x46038) ?x46041) ?x46044) ?x46047) (* (* 2.0 l_0_14_25) l_0_14_32))))
 (let ((?x46054 (+ (+ ?x46050 (* (* 2.0 l_0_14_26) l_0_14_33)) (* (* 2.0 l_0_14_27) l_0_14_34))))
 (let ((?x46061 (- (- (- (+ (+ (+ (+ ?x46054 ?x45724) ?x45727) ?x45730) ?x45733) ?x45736) ?x45739) ?x45742)))
 (= (- (- (- (- ?x46061 ?x45745) ?x46064) ?x46067) ?x46070) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45744 (* 2.0 l_0_14_73)))
 (let ((?x45904 (* ?x45744 l_0_14_82)))
 (let ((?x45741 (* 2.0 l_0_14_72)))
 (let ((?x45902 (* ?x45741 l_0_14_81)))
 (let ((?x45738 (* 2.0 l_0_14_71)))
 (let ((?x45900 (* ?x45738 l_0_14_80)))
 (let ((?x45735 (* 2.0 l_0_14_70)))
 (let ((?x45898 (* ?x45735 l_0_14_79)))
 (let ((?x45732 (* 2.0 l_0_14_52)))
 (let ((?x45896 (* ?x45732 l_0_14_61)))
 (let ((?x45729 (* 2.0 l_0_14_51)))
 (let ((?x45894 (* ?x45729 l_0_14_60)))
 (let ((?x45726 (* 2.0 l_0_14_50)))
 (let ((?x45892 (* ?x45726 l_0_14_59)))
 (let ((?x45723 (* 2.0 l_0_14_49)))
 (let ((?x45890 (* ?x45723 l_0_14_58)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x45048 (* ?x45047 l_0_14_135)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x45045 (* ?x45044 l_0_14_134)))
 (let ((?x46119 (- (- (- (* (* (- 2.0) l_0_14_130) l_0_14_133) ?x45045) ?x45048) (* (* 2.0 l_0_14_16) l_0_14_4))))
 (let ((?x46124 (- (- ?x46119 (* (* 2.0 l_0_14_17) l_0_14_5)) (* (* 2.0 l_0_14_18) l_0_14_6))))
 (let ((?x46128 (+ (+ ?x46124 (* (* 2.0 l_0_14_25) l_0_14_37)) (* (* 2.0 l_0_14_26) l_0_14_38))))
 (let ((?x46133 (+ (+ (+ (+ ?x46128 (* (* 2.0 l_0_14_27) l_0_14_39)) ?x45890) ?x45892) ?x45894)))
 (= (- (- (- (- (+ ?x46133 ?x45896) ?x45898) ?x45900) ?x45902) ?x45904) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x45193 (* l_0_14_9 l_0_14_9)))
 (let ((?x45190 (* l_0_14_8 l_0_14_8)))
 (let ((?x45175 (* l_0_14_7 l_0_14_7)))
 (let ((?x8527 (* l_0_14_31 l_0_14_31)))
 (let ((?x7049 (* l_0_14_30 l_0_14_30)))
 (let ((?x45206 (* l_0_14_29 l_0_14_29)))
 (let ((?x9286 (+ (+ (* (- l_0_14_10) l_0_14_10) (* l_0_14_28 l_0_14_28)) ?x45206)))
 (= (- (- (- (+ (+ ?x9286 ?x7049) ?x8527) ?x45175) ?x45190) ?x45193) 0.0)))))))))
(assert
 (let ((?x46232 (* l_0_14_94 l_0_14_94)))
 (let ((?x46230 (* l_0_14_93 l_0_14_93)))
 (let ((?x46228 (* l_0_14_92 l_0_14_92)))
 (let ((?x46226 (* l_0_14_91 l_0_14_91)))
 (let ((?x46212 (* l_0_14_178 l_0_14_178)))
 (let ((?x46210 (* l_0_14_177 l_0_14_177)))
 (let ((?x46208 (* l_0_14_176 l_0_14_176)))
 (let ((?x46206 (* l_0_14_175 l_0_14_175)))
 (let ((?x46204 (* l_0_14_157 l_0_14_157)))
 (let ((?x46202 (* l_0_14_156 l_0_14_156)))
 (let ((?x46200 (* l_0_14_155 l_0_14_155)))
 (let ((?x46198 (* l_0_14_154 l_0_14_154)))
 (let ((?x46192 (* l_0_14_115 l_0_14_115)))
 (let ((?x46190 (* l_0_14_114 l_0_14_114)))
 (let ((?x46188 (* l_0_14_113 l_0_14_113)))
 (let ((?x46186 (* l_0_14_112 l_0_14_112)))
 (let ((?x46185 (- (* (* (- 2.0) l_0_14_10) l_0_14_14) (* (* 2.0 l_0_14_11) l_0_14_7))))
 (let ((?x46195 (- (+ (+ (+ (+ ?x46185 ?x46186) ?x46188) ?x46190) ?x46192) (* (* 2.0 l_0_14_12) l_0_14_8))))
 (let ((?x46203 (- (- (- (- ?x46195 (* (* 2.0 l_0_14_13) l_0_14_9)) ?x46198) ?x46200) ?x46202)))
 (let ((?x46216 (+ (+ (+ (+ (+ (- ?x46203 ?x46204) ?x46206) ?x46208) ?x46210) ?x46212) (* (* 2.0 l_0_14_28) l_0_14_32))))
 (let ((?x46222 (+ (+ ?x46216 (* (* 2.0 l_0_14_29) l_0_14_33)) (* (* 2.0 l_0_14_30) l_0_14_34))))
 (let ((?x46231 (- (- (- (+ ?x46222 (* (* 2.0 l_0_14_31) l_0_14_35)) ?x46226) ?x46228) ?x46230)))
 (= (- ?x46231 ?x46232) 0.0))))))))))))))))))))))))
(assert
 (let ((?x45147 (* l_0_14_136 l_0_14_136)))
 (let ((?x45145 (* l_0_14_135 l_0_14_135)))
 (let ((?x45143 (* l_0_14_134 l_0_14_134)))
 (let ((?x45141 (* l_0_14_133 l_0_14_133)))
 (let ((?x46266 (- (- (- (- (* (* (- 2.0) l_0_14_10) l_0_14_19) ?x45141) ?x45143) ?x45145) ?x45147)))
 (let ((?x46270 (- (- ?x46266 (* (* 2.0 l_0_14_16) l_0_14_7)) (* (* 2.0 l_0_14_17) l_0_14_8))))
 (let ((?x46274 (+ (- ?x46270 (* (* 2.0 l_0_14_18) l_0_14_9)) (* (* 2.0 l_0_14_28) l_0_14_37))))
 (let ((?x46278 (+ (+ ?x46274 (* (* 2.0 l_0_14_29) l_0_14_38)) (* (* 2.0 l_0_14_30) l_0_14_39))))
 (= (+ ?x46278 (* (* 2.0 l_0_14_31) l_0_14_40)) 0.0))))))))))
(assert
 (let ((?x46365 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x46362 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x46359 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x46356 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x46353 (* l_0_14_36 l_0_14_36)))
 (let ((?x46351 (* l_0_14_35 l_0_14_35)))
 (let ((?x46349 (* l_0_14_34 l_0_14_34)))
 (let ((?x46347 (* l_0_14_33 l_0_14_33)))
 (let ((?x46345 (* l_0_14_32 l_0_14_32)))
 (let ((?x46342 (* 2.0 l_0_14_178)))
 (let ((?x46343 (* ?x46342 l_0_14_182)))
 (let ((?x46339 (* 2.0 l_0_14_177)))
 (let ((?x46340 (* ?x46339 l_0_14_181)))
 (let ((?x46336 (* 2.0 l_0_14_176)))
 (let ((?x46337 (* ?x46336 l_0_14_180)))
 (let ((?x46333 (* 2.0 l_0_14_175)))
 (let ((?x46334 (* ?x46333 l_0_14_179)))
 (let ((?x46330 (* 2.0 l_0_14_157)))
 (let ((?x46331 (* ?x46330 l_0_14_161)))
 (let ((?x46327 (* 2.0 l_0_14_156)))
 (let ((?x46328 (* ?x46327 l_0_14_160)))
 (let ((?x46324 (* 2.0 l_0_14_155)))
 (let ((?x46325 (* ?x46324 l_0_14_159)))
 (let ((?x46321 (* 2.0 l_0_14_154)))
 (let ((?x46322 (* ?x46321 l_0_14_158)))
 (let ((?x46319 (* l_0_14_15 l_0_14_15)))
 (let ((?x46317 (* l_0_14_14 l_0_14_14)))
 (let ((?x46315 (* l_0_14_13 l_0_14_13)))
 (let ((?x46313 (* l_0_14_12 l_0_14_12)))
 (let ((?x46310 (* 2.0 l_0_14_115)))
 (let ((?x46311 (* ?x46310 l_0_14_119)))
 (let ((?x46307 (* 2.0 l_0_14_114)))
 (let ((?x46308 (* ?x46307 l_0_14_118)))
 (let ((?x46304 (* 2.0 l_0_14_113)))
 (let ((?x46305 (* ?x46304 l_0_14_117)))
 (let ((?x46303 (+ (* (- l_0_14_11) l_0_14_11) (* (* 2.0 l_0_14_112) l_0_14_116))))
 (let ((?x46320 (- (- (- (- (+ (+ (+ ?x46303 ?x46305) ?x46308) ?x46311) ?x46313) ?x46315) ?x46317) ?x46319)))
 (let ((?x46341 (+ (+ (+ (- (- (- (- ?x46320 ?x46322) ?x46325) ?x46328) ?x46331) ?x46334) ?x46337) ?x46340)))
 (let ((?x46357 (- (+ (+ (+ (+ (+ (+ ?x46341 ?x46343) ?x46345) ?x46347) ?x46349) ?x46351) ?x46353) ?x46356)))
 (= (- (- (- ?x46357 ?x46359) ?x46362) ?x46365) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46342 (* 2.0 l_0_14_178)))
 (let ((?x46487 (* ?x46342 l_0_14_187)))
 (let ((?x46339 (* 2.0 l_0_14_177)))
 (let ((?x46485 (* ?x46339 l_0_14_186)))
 (let ((?x46336 (* 2.0 l_0_14_176)))
 (let ((?x46483 (* ?x46336 l_0_14_185)))
 (let ((?x46333 (* 2.0 l_0_14_175)))
 (let ((?x46481 (* ?x46333 l_0_14_184)))
 (let ((?x46330 (* 2.0 l_0_14_157)))
 (let ((?x46479 (* ?x46330 l_0_14_166)))
 (let ((?x46327 (* 2.0 l_0_14_156)))
 (let ((?x46477 (* ?x46327 l_0_14_165)))
 (let ((?x46324 (* 2.0 l_0_14_155)))
 (let ((?x46475 (* ?x46324 l_0_14_164)))
 (let ((?x46321 (* 2.0 l_0_14_154)))
 (let ((?x46473 (* ?x46321 l_0_14_163)))
 (let ((?x45272 (* 2.0 l_0_14_136)))
 (let ((?x45273 (* ?x45272 l_0_14_140)))
 (let ((?x45269 (* 2.0 l_0_14_135)))
 (let ((?x45270 (* ?x45269 l_0_14_139)))
 (let ((?x45266 (* 2.0 l_0_14_134)))
 (let ((?x45267 (* ?x45266 l_0_14_138)))
 (let ((?x45263 (* 2.0 l_0_14_133)))
 (let ((?x45264 (* ?x45263 l_0_14_137)))
 (let ((?x46310 (* 2.0 l_0_14_115)))
 (let ((?x46457 (* ?x46310 l_0_14_124)))
 (let ((?x46307 (* 2.0 l_0_14_114)))
 (let ((?x46455 (* ?x46307 l_0_14_123)))
 (let ((?x46304 (* 2.0 l_0_14_113)))
 (let ((?x46453 (* ?x46304 l_0_14_122)))
 (let ((?x46301 (* 2.0 l_0_14_112)))
 (let ((?x46451 (* ?x46301 l_0_14_121)))
 (let ((?x46446 (* 2.0 l_0_14_103)))
 (let ((?x46447 (* ?x46446 l_0_14_94)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x46444 (* ?x46443 l_0_14_93)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x46441 (* ?x46440 l_0_14_92)))
 (let ((?x46450 (- (- (- (- (* (* (- 2.0) l_0_14_100) l_0_14_91) ?x46441) ?x46444) ?x46447) (* (* 2.0 l_0_14_11) l_0_14_16))))
 (let ((?x46460 (- (+ (+ (+ (+ ?x46450 ?x46451) ?x46453) ?x46455) ?x46457) (* (* 2.0 l_0_14_12) l_0_14_17))))
 (let ((?x46465 (- (- (- (- ?x46460 (* (* 2.0 l_0_14_13) l_0_14_18)) ?x45264) ?x45267) ?x45270)))
 (let ((?x46472 (- (- (- ?x46465 ?x45273) (* (* 2.0 l_0_14_14) l_0_14_19)) (* (* 2.0 l_0_14_15) l_0_14_20))))
 (let ((?x46486 (+ (+ (+ (- (- (- (- ?x46472 ?x46473) ?x46475) ?x46477) ?x46479) ?x46481) ?x46483) ?x46485)))
 (let ((?x46494 (+ (+ (+ ?x46486 ?x46487) (* (* 2.0 l_0_14_32) l_0_14_37)) (* (* 2.0 l_0_14_33) l_0_14_38))))
 (let ((?x46500 (+ (+ ?x46494 (* (* 2.0 l_0_14_34) l_0_14_39)) (* (* 2.0 l_0_14_35) l_0_14_40))))
 (= (+ ?x46500 (* (* 2.0 l_0_14_36) l_0_14_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46608 (* l_0_14_42 l_0_14_42)))
 (let ((?x46606 (* l_0_14_41 l_0_14_41)))
 (let ((?x46604 (* l_0_14_40 l_0_14_40)))
 (let ((?x46602 (* l_0_14_39 l_0_14_39)))
 (let ((?x46600 (* l_0_14_38 l_0_14_38)))
 (let ((?x46598 (* l_0_14_37 l_0_14_37)))
 (let ((?x46596 (* l_0_14_21 l_0_14_21)))
 (let ((?x46594 (* l_0_14_20 l_0_14_20)))
 (let ((?x46592 (* l_0_14_19 l_0_14_19)))
 (let ((?x46574 (* l_0_14_18 l_0_14_18)))
 (let ((?x46571 (* l_0_14_17 l_0_14_17)))
 (let ((?x46567 (* l_0_14_16 l_0_14_16)))
 (let ((?x45272 (* 2.0 l_0_14_136)))
 (let ((?x45402 (* ?x45272 l_0_14_145)))
 (let ((?x45269 (* 2.0 l_0_14_135)))
 (let ((?x45400 (* ?x45269 l_0_14_144)))
 (let ((?x45266 (* 2.0 l_0_14_134)))
 (let ((?x45398 (* ?x45266 l_0_14_143)))
 (let ((?x46569 (- (- (- (- (* (* (- 2.0) l_0_14_133) l_0_14_142) ?x45398) ?x45400) ?x45402) ?x46567)))
 (let ((?x46601 (+ (+ (- (- (- (- (- ?x46569 ?x46571) ?x46574) ?x46592) ?x46594) ?x46596) ?x46598) ?x46600)))
 (= (+ (+ (+ (+ ?x46601 ?x46602) ?x46604) ?x46606) ?x46608) 0.0))))))))))))))))))))))
(assert
 (let ((?x46661 (* l_0_14_87 l_0_14_87)))
 (let ((?x46659 (* l_0_14_86 l_0_14_86)))
 (let ((?x46656 (* l_0_14_64 l_0_14_64)))
 (let ((?x46657 (* 3.0 ?x46656)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46654 (* ?x44956 l_0_14_65)))
 (let ((?x46652 (* (* 3.0 l_0_14_43) l_0_14_43)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46649 (* ?x44947 l_0_14_44)))
 (let ((?x46647 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x46644 (* l_0_14_171 l_0_14_171)))
 (let ((?x46642 (* l_0_14_170 l_0_14_170)))
 (let ((?x46640 (* l_0_14_150 l_0_14_150)))
 (let ((?x46638 (* l_0_14_149 l_0_14_149)))
 (let ((?x46636 (* l_0_14_127 l_0_14_127)))
 (let ((?x46634 (* l_0_14_108 l_0_14_108)))
 (let ((?x46635 (- (- (* 6.0 (* l_0_14_1 l_0_14_1)) (* l_0_14_107 l_0_14_107)) ?x46634)))
 (let ((?x46650 (- (- (- (- (+ (+ (+ ?x46635 ?x46636) ?x46638) ?x46640) ?x46642) ?x46644) ?x46647) ?x46649)))
 (= (+ (+ (+ (+ (- ?x46650 ?x46652) ?x46654) ?x46657) ?x46659) ?x46661) 0.0))))))))))))))))))))
(assert
 (let ((?x44816 (* l_0_14_66 l_0_14_66)))
 (let ((?x44817 (* 3.0 ?x44816)))
 (let ((?x44813 (* l_0_14_65 l_0_14_65)))
 (let ((?x44814 (* 3.0 ?x44813)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46654 (* ?x44956 l_0_14_65)))
 (let ((?x44808 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (let ((?x44805 (* (* 3.0 l_0_14_44) l_0_14_44)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46649 (* ?x44947 l_0_14_44)))
 (let ((?x46647 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x44790 (* ?x44789 l_0_14_23)))
 (let ((?x35558 (* l_0_14_211 l_0_14_211)))
 (let ((?x25349 (* l_0_14_190 l_0_14_190)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x24318 (* ?x44940 l_0_14_128)))
 (let ((?x8317 (* l_0_14_1 l_0_14_1)))
 (let ((?x24164 (* 6.0 ?x8317)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x44775 (* ?x44774 l_0_14_2)))
 (let ((?x46685 (- (- (- (- (- (+ (+ ?x44775 ?x24164) ?x24318) ?x25349) ?x35558) ?x44790) ?x46647) ?x46649)))
 (let ((?x46691 (+ (- (- (- ?x46685 (* (* 1.0 l_0_14_43) l_0_14_43)) ?x44805) ?x44808) ?x46654)))
 (= (+ (+ (+ ?x46691 (* 1.0 (* l_0_14_64 l_0_14_64))) ?x44814) ?x44817) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46730 (* ?x44962 l_0_14_68)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46728 (* ?x44959 l_0_14_67)))
 (let ((?x46656 (* l_0_14_64 l_0_14_64)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46725 (* ?x44956 l_0_14_67)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46723 (* ?x44953 l_0_14_47)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46721 (* ?x44950 l_0_14_46)))
 (let ((?x46678 (* l_0_14_43 l_0_14_43)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46718 (* ?x44947 l_0_14_46)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46716 (* ?x44789 l_0_14_25)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x24437 (* ?x44774 l_0_14_4)))
 (let ((?x46720 (+ (- (- (+ ?x24437 (* (* 2.0 l_0_14_127) l_0_14_130)) ?x46716) ?x46718) ?x46678)))
 (= (+ (+ (- (+ (- (- ?x46720 ?x46721) ?x46723) ?x46725) ?x46656) ?x46728) ?x46730) 0.0)))))))))))))))))))))
(assert
 (let ((?x46787 (* l_0_14_85 l_0_14_85)))
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46785 (* ?x44962 l_0_14_75)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46783 (* ?x44959 l_0_14_74)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46781 (* ?x44956 l_0_14_74)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46779 (* ?x44953 l_0_14_54)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46777 (* ?x44950 l_0_14_53)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46775 (* ?x44947 l_0_14_53)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46773 (* ?x44789 l_0_14_32)))
 (let ((?x46771 (* l_0_14_169 l_0_14_169)))
 (let ((?x46769 (* l_0_14_148 l_0_14_148)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x46767 (* ?x44940 l_0_14_137)))
 (let ((?x46768 (+ (+ (* (* 12.0 l_0_14_1) l_0_14_11) (* l_0_14_106 l_0_14_106)) ?x46767)))
 (let ((?x46782 (+ (- (- (- (- (+ (- ?x46768 ?x46769) ?x46771) ?x46773) ?x46775) ?x46777) ?x46779) ?x46781)))
 (= (- (+ (+ ?x46782 ?x46783) ?x46785) ?x46787) 0.0)))))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46844 (* ?x44962 l_0_14_80)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46842 (* ?x44959 l_0_14_79)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46840 (* ?x44956 l_0_14_79)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46838 (* ?x44953 l_0_14_59)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46836 (* ?x44950 l_0_14_58)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46834 (* ?x44947 l_0_14_58)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46832 (* ?x44789 l_0_14_37)))
 (let ((?x46636 (* l_0_14_127 l_0_14_127)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x46828 (* ?x44774 l_0_14_16)))
 (let ((?x46835 (- (- (- (+ ?x46828 (* (* 2.0 l_0_14_127) l_0_14_142)) ?x46636) ?x46832) ?x46834)))
 (= (+ (+ (+ (- (- ?x46835 ?x46836) ?x46838) ?x46840) ?x46842) ?x46844) 0.0))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46730 (* ?x44962 l_0_14_68)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46728 (* ?x44959 l_0_14_67)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x46901 (* ?x44810 l_0_14_67)))
 (let ((?x44811 (* ?x44810 l_0_14_65)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46723 (* ?x44953 l_0_14_47)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46721 (* ?x44950 l_0_14_46)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x46896 (* ?x44801 l_0_14_46)))
 (let ((?x44802 (* ?x44801 l_0_14_44)))
 (let ((?x44885 (* 12.0 l_0_14_3)))
 (let ((?x46893 (* ?x44885 l_0_14_5)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x46891 (* ?x44881 l_0_14_26)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x46889 (* ?x44877 l_0_14_25)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46716 (* ?x44789 l_0_14_25)))
 (let ((?x44867 (* 12.0 l_0_14_2)))
 (let ((?x46884 (* ?x44867 l_0_14_4)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x46873 (* ?x45002 l_0_14_131)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x24437 (* ?x44774 l_0_14_4)))
 (let ((?x46883 (- (+ (+ ?x24437 (* (* 2.0 l_0_14_128) l_0_14_130)) ?x46873) (* (* 2.0 l_0_14_190) l_0_14_193))))
 (let ((?x46890 (- (- (- (+ ?x46883 ?x46884) (* (* 2.0 l_0_14_211) l_0_14_214)) ?x46716) ?x46889)))
 (let ((?x46900 (- (- (- (- (+ (+ (- ?x46890 ?x46891) ?x46893) ?x44802) ?x46896) ?x46721) ?x46723) ?x44811)))
 (= (+ (+ (+ ?x46900 ?x46901) ?x46728) ?x46730) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x46970 (* ?x45319 l_0_14_86)))
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46785 (* ?x44962 l_0_14_75)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46783 (* ?x44959 l_0_14_74)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x46966 (* ?x44810 l_0_14_74)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46779 (* ?x44953 l_0_14_54)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46777 (* ?x44950 l_0_14_53)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x46962 (* ?x44801 l_0_14_53)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x46960 (* ?x44881 l_0_14_33)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x46958 (* ?x44877 l_0_14_32)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46773 (* ?x44789 l_0_14_32)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x46951 (* ?x45278 l_0_14_170)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x46949 (* ?x45275 l_0_14_149)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x46947 (* ?x45002 l_0_14_138)))
 (let ((?x44999 (* 2.0 l_0_14_128)))
 (let ((?x46945 (* ?x44999 l_0_14_137)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x46943 (* ?x45257 l_0_14_3)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x46941 (* ?x45254 l_0_14_2)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x46756 (* ?x44774 l_0_14_11)))
 (let ((?x46946 (+ (+ (+ (+ ?x46756 (* (* 2.0 l_0_14_106) l_0_14_107)) ?x46941) ?x46943) ?x46945)))
 (let ((?x46954 (- (+ (- (+ ?x46946 ?x46947) ?x46949) ?x46951) (* (* 2.0 l_0_14_190) l_0_14_200))))
 (let ((?x46961 (- (- (- (- ?x46954 (* (* 2.0 l_0_14_211) l_0_14_221)) ?x46773) ?x46958) ?x46960)))
 (let ((?x46971 (- (+ (+ (+ (- (- (- ?x46961 ?x46962) ?x46777) ?x46779) ?x46966) ?x46783) ?x46785) ?x46970)))
 (= ?x46971 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44962 (* 6.0 l_0_14_66)))
 (let ((?x46844 (* ?x44962 l_0_14_80)))
 (let ((?x44959 (* 6.0 l_0_14_65)))
 (let ((?x46842 (* ?x44959 l_0_14_79)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x47032 (* ?x44810 l_0_14_79)))
 (let ((?x44953 (* 6.0 l_0_14_45)))
 (let ((?x46838 (* ?x44953 l_0_14_59)))
 (let ((?x44950 (* 6.0 l_0_14_44)))
 (let ((?x46836 (* ?x44950 l_0_14_58)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x47028 (* ?x44801 l_0_14_58)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x47026 (* ?x44881 l_0_14_38)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x47024 (* ?x44877 l_0_14_37)))
 (let ((?x44789 (* 12.0 l_0_14_22)))
 (let ((?x46832 (* ?x44789 l_0_14_37)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x47017 (* ?x45407 l_0_14_3)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x47015 (* ?x45404 l_0_14_2)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x47013 (* ?x45002 l_0_14_143)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x24318 (* ?x44940 l_0_14_128)))
 (let ((?x44774 (* 12.0 l_0_14_1)))
 (let ((?x46828 (* ?x44774 l_0_14_16)))
 (let ((?x47016 (+ (+ (+ (- ?x46828 ?x24318) (* (* 2.0 l_0_14_128) l_0_14_142)) ?x47013) ?x47015)))
 (let ((?x47022 (- (- (+ ?x47016 ?x47017) (* (* 2.0 l_0_14_190) l_0_14_205)) (* (* 2.0 l_0_14_211) l_0_14_226))))
 (let ((?x47033 (+ (- (- (- (- (- (- ?x47022 ?x46832) ?x47024) ?x47026) ?x47028) ?x46836) ?x46838) ?x47032)))
 (= (+ (+ ?x47033 ?x46842) ?x46844) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x47081 (* l_0_14_69 l_0_14_69)))
 (let ((?x47082 (* 3.0 ?x47081)))
 (let ((?x47078 (* l_0_14_68 l_0_14_68)))
 (let ((?x47079 (* 3.0 ?x47078)))
 (let ((?x47075 (* l_0_14_67 l_0_14_67)))
 (let ((?x47076 (* 3.0 ?x47075)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x46901 (* ?x44810 l_0_14_67)))
 (let ((?x45967 (* l_0_14_6 l_0_14_6)))
 (let ((?x47072 (* 6.0 ?x45967)))
 (let ((?x45965 (* l_0_14_5 l_0_14_5)))
 (let ((?x47070 (* 6.0 ?x45965)))
 (let ((?x47068 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x47065 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x46896 (* ?x44801 l_0_14_46)))
 (let ((?x45960 (* l_0_14_4 l_0_14_4)))
 (let ((?x47058 (* 6.0 ?x45960)))
 (let ((?x47056 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x47053 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x35793 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x10604 (* l_0_14_132 l_0_14_132)))
 (let ((?x35801 (+ (+ (* l_0_14_130 l_0_14_130) (* l_0_14_131 l_0_14_131)) ?x10604)))
 (let ((?x47063 (- (+ (+ (- (- (- ?x35801 ?x35793) ?x47053) ?x47056) ?x47058) ?x46896) (* (* 3.0 l_0_14_46) l_0_14_46))))
 (let ((?x47080 (+ (+ (- (+ (+ (- (- ?x47063 ?x47065) ?x47068) ?x47070) ?x47072) ?x46901) ?x47076) ?x47079)))
 (= (+ ?x47080 ?x47082) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x47137 (* ?x45319 l_0_14_88)))
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x47135 (* ?x45087 l_0_14_76)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x47133 (* ?x45084 l_0_14_75)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x47131 (* ?x45081 l_0_14_74)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x46966 (* ?x44810 l_0_14_74)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x47128 (* ?x45071 l_0_14_55)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x47126 (* ?x45068 l_0_14_54)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x46962 (* ?x44801 l_0_14_53)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x47121 (* ?x45058 l_0_14_34)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x47119 (* ?x45055 l_0_14_33)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x47117 (* ?x45052 l_0_14_32)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47115 (* ?x45278 l_0_14_172)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47113 (* ?x45275 l_0_14_151)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x47111 (* ?x45047 l_0_14_139)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x47109 (* ?x45044 l_0_14_138)))
 (let ((?x45041 (* 2.0 l_0_14_130)))
 (let ((?x47107 (* ?x45041 l_0_14_137)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x47105 (* ?x45260 l_0_14_6)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x47103 (* ?x45257 l_0_14_5)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x47101 (* ?x45254 l_0_14_4)))
 (let ((?x47108 (+ (+ (+ (+ (* (* 2.0 l_0_14_106) l_0_14_109) ?x47101) ?x47103) ?x47105) ?x47107)))
 (let ((?x47122 (- (- (- (+ (- (+ (+ ?x47108 ?x47109) ?x47111) ?x47113) ?x47115) ?x47117) ?x47119) ?x47121)))
 (let ((?x47129 (- (- (- (+ ?x47122 ?x46962) (* (* 6.0 l_0_14_46) l_0_14_53)) ?x47126) ?x47128)))
 (= (- (+ (+ (+ (- ?x47129 ?x46966) ?x47131) ?x47133) ?x47135) ?x47137) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x47197 (* ?x45087 l_0_14_81)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x47195 (* ?x45084 l_0_14_80)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x47193 (* ?x45081 l_0_14_79)))
 (let ((?x44810 (* 2.0 l_0_14_64)))
 (let ((?x47032 (* ?x44810 l_0_14_79)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x47190 (* ?x45071 l_0_14_60)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x47188 (* ?x45068 l_0_14_59)))
 (let ((?x44801 (* 2.0 l_0_14_43)))
 (let ((?x47028 (* ?x44801 l_0_14_58)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x47183 (* ?x45058 l_0_14_39)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x47181 (* ?x45055 l_0_14_38)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x47179 (* ?x45052 l_0_14_37)))
 (let ((?x45410 (* 12.0 l_0_14_18)))
 (let ((?x47177 (* ?x45410 l_0_14_6)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x47175 (* ?x45407 l_0_14_5)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x47173 (* ?x45404 l_0_14_4)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x47171 (* ?x45047 l_0_14_144)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x47169 (* ?x45044 l_0_14_143)))
 (let ((?x47168 (+ (* (* (- 2.0) l_0_14_127) l_0_14_130) (* (* 2.0 l_0_14_130) l_0_14_142))))
 (let ((?x47182 (- (- (+ (+ (+ (+ (+ ?x47168 ?x47169) ?x47171) ?x47173) ?x47175) ?x47177) ?x47179) ?x47181)))
 (let ((?x47189 (- (- (+ (- ?x47182 ?x47183) ?x47028) (* (* 6.0 l_0_14_46) l_0_14_58)) ?x47188)))
 (= (+ (+ (+ (- (- ?x47189 ?x47190) ?x47032) ?x47193) ?x47195) ?x47197) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x47304 (* ?x45319 l_0_14_95)))
 (let ((?x47301 (* l_0_14_78 l_0_14_78)))
 (let ((?x47302 (* 3.0 ?x47301)))
 (let ((?x47298 (* l_0_14_77 l_0_14_77)))
 (let ((?x47299 (* 3.0 ?x47298)))
 (let ((?x47295 (* l_0_14_76 l_0_14_76)))
 (let ((?x47296 (* 3.0 ?x47295)))
 (let ((?x47292 (* l_0_14_75 l_0_14_75)))
 (let ((?x47293 (* 3.0 ?x47292)))
 (let ((?x47289 (* l_0_14_74 l_0_14_74)))
 (let ((?x47290 (* 3.0 ?x47289)))
 (let ((?x47287 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x47284 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x47281 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x47278 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x47272 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x47269 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x47266 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x47263 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x47260 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47257 (* ?x45278 l_0_14_179)))
 (let ((?x46319 (* l_0_14_15 l_0_14_15)))
 (let ((?x47255 (* 6.0 ?x46319)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47253 (* ?x45275 l_0_14_158)))
 (let ((?x47251 (* l_0_14_141 l_0_14_141)))
 (let ((?x47249 (* l_0_14_140 l_0_14_140)))
 (let ((?x46317 (* l_0_14_14 l_0_14_14)))
 (let ((?x47247 (* 6.0 ?x46317)))
 (let ((?x47245 (* l_0_14_139 l_0_14_139)))
 (let ((?x47243 (* l_0_14_138 l_0_14_138)))
 (let ((?x47241 (* l_0_14_137 l_0_14_137)))
 (let ((?x46315 (* l_0_14_13 l_0_14_13)))
 (let ((?x47239 (* 6.0 ?x46315)))
 (let ((?x46313 (* l_0_14_12 l_0_14_12)))
 (let ((?x47226 (* 6.0 ?x46313)))
 (let ((?x46369 (* l_0_14_11 l_0_14_11)))
 (let ((?x36121 (* 6.0 ?x46369)))
 (let ((?x47242 (+ (+ (+ (+ (* (* 2.0 l_0_14_106) l_0_14_116) ?x36121) ?x47226) ?x47239) ?x47241)))
 (let ((?x47256 (+ (- (+ (+ (+ (+ (+ ?x47242 ?x47243) ?x47245) ?x47247) ?x47249) ?x47251) ?x47253) ?x47255)))
 (let ((?x47276 (- (- (- (- (- (- (+ ?x47256 ?x47257) ?x47260) ?x47263) ?x47266) ?x47269) ?x47272) (* (* 3.0 l_0_14_53) l_0_14_53))))
 (let ((?x47297 (+ (+ (+ (- (- (- (- ?x47276 ?x47278) ?x47281) ?x47284) ?x47287) ?x47290) ?x47293) ?x47296)))
 (= (- (+ (+ ?x47297 ?x47299) ?x47302) ?x47304) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47430 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x47427 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x47424 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x47421 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x47418 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x47415 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x47412 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x47409 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x47406 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x47400 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x47397 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x47394 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x47391 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x47388 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47385 (* ?x45278 l_0_14_184)))
 (let ((?x47383 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47380 (* ?x45275 l_0_14_163)))
 (let ((?x47378 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47375 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x47372 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x47369 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47366 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47363 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x47360 (* ?x45260 l_0_14_18)))
 (let ((?x44940 (* 2.0 l_0_14_127)))
 (let ((?x46767 (* ?x44940 l_0_14_137)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x47357 (* ?x45257 l_0_14_17)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x47355 (* ?x45254 l_0_14_16)))
 (let ((?x45251 (* 2.0 l_0_14_106)))
 (let ((?x47353 (* ?x45251 l_0_14_121)))
 (let ((?x47359 (- (+ (+ (+ (* (* (- 2.0) l_0_14_100) l_0_14_85) ?x47353) ?x47355) ?x47357) ?x46767)))
 (let ((?x47379 (+ (+ (+ (+ (+ (+ (+ ?x47359 ?x47360) ?x47363) ?x47366) ?x47369) ?x47372) ?x47375) ?x47378)))
 (let ((?x47398 (- (- (- (- (+ (+ (- ?x47379 ?x47380) ?x47383) ?x47385) ?x47388) ?x47391) ?x47394) ?x47397)))
 (let ((?x47410 (- (- (- (- ?x47398 ?x47400) (* (* 6.0 l_0_14_53) l_0_14_58)) ?x47406) ?x47409)))
 (let ((?x47431 (+ (+ (+ (+ (+ (- (- ?x47410 ?x47412) ?x47415) ?x47418) ?x47421) ?x47424) ?x47427) ?x47430)))
 (= ?x47431 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47543 (* l_0_14_84 l_0_14_84)))
 (let ((?x47544 (* 3.0 ?x47543)))
 (let ((?x47540 (* l_0_14_83 l_0_14_83)))
 (let ((?x47541 (* 3.0 ?x47540)))
 (let ((?x47537 (* l_0_14_82 l_0_14_82)))
 (let ((?x47538 (* 3.0 ?x47537)))
 (let ((?x47534 (* l_0_14_81 l_0_14_81)))
 (let ((?x47535 (* 3.0 ?x47534)))
 (let ((?x47531 (* l_0_14_80 l_0_14_80)))
 (let ((?x47532 (* 3.0 ?x47531)))
 (let ((?x47528 (* l_0_14_79 l_0_14_79)))
 (let ((?x47529 (* 3.0 ?x47528)))
 (let ((?x47526 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x47523 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x47520 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x47517 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x47514 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x47508 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47505 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47502 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47499 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47496 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47493 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x46596 (* l_0_14_21 l_0_14_21)))
 (let ((?x47490 (* 6.0 ?x46596)))
 (let ((?x46594 (* l_0_14_20 l_0_14_20)))
 (let ((?x47488 (* 6.0 ?x46594)))
 (let ((?x46592 (* l_0_14_19 l_0_14_19)))
 (let ((?x47486 (* 6.0 ?x46592)))
 (let ((?x46574 (* l_0_14_18 l_0_14_18)))
 (let ((?x47484 (* 6.0 ?x46574)))
 (let ((?x46571 (* l_0_14_17 l_0_14_17)))
 (let ((?x47482 (* 6.0 ?x46571)))
 (let ((?x46567 (* l_0_14_16 l_0_14_16)))
 (let ((?x47480 (* 6.0 ?x46567)))
 (let ((?x47478 (* l_0_14_147 l_0_14_147)))
 (let ((?x47476 (* l_0_14_146 l_0_14_146)))
 (let ((?x47474 (* l_0_14_145 l_0_14_145)))
 (let ((?x10980 (* l_0_14_144 l_0_14_144)))
 (let ((?x25785 (* l_0_14_143 l_0_14_143)))
 (let ((?x25666 (* l_0_14_142 l_0_14_142)))
 (let ((?x47475 (+ (+ (+ (+ (* (* (- 2.0) l_0_14_127) l_0_14_142) ?x25666) ?x25785) ?x10980) ?x47474)))
 (let ((?x47489 (+ (+ (+ (+ (+ (+ (+ ?x47475 ?x47476) ?x47478) ?x47480) ?x47482) ?x47484) ?x47486) ?x47488)))
 (let ((?x47509 (- (- (- (- (- (- (+ ?x47489 ?x47490) ?x47493) ?x47496) ?x47499) ?x47502) ?x47505) ?x47508)))
 (let ((?x47521 (- (- (- (- ?x47509 (* (* 3.0 l_0_14_58) l_0_14_58)) ?x47514) ?x47517) ?x47520)))
 (let ((?x47542 (+ (+ (+ (+ (+ (- (- ?x47521 ?x47523) ?x47526) ?x47529) ?x47532) ?x47535) ?x47538) ?x47541)))
 (= (+ ?x47542 ?x47544) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44816 (* l_0_14_66 l_0_14_66)))
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47597 (* ?x44898 l_0_14_68)))
 (let ((?x44813 (* l_0_14_65 l_0_14_65)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47594 (* ?x44895 l_0_14_67)))
 (let ((?x24442 (* l_0_14_45 l_0_14_45)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47591 (* ?x44892 l_0_14_47)))
 (let ((?x24453 (* l_0_14_44 l_0_14_44)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47588 (* ?x44889 l_0_14_46)))
 (let ((?x44885 (* 12.0 l_0_14_3)))
 (let ((?x46893 (* ?x44885 l_0_14_5)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x46891 (* ?x44881 l_0_14_26)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x46889 (* ?x44877 l_0_14_25)))
 (let ((?x44867 (* 12.0 l_0_14_2)))
 (let ((?x46884 (* ?x44867 l_0_14_4)))
 (let ((?x47579 (- (* (* (- 2.0) l_0_14_191) l_0_14_193) (* (* 2.0 l_0_14_192) l_0_14_194))))
 (let ((?x47584 (- (- (+ ?x47579 ?x46884) (* (* 2.0 l_0_14_212) l_0_14_214)) (* (* 2.0 l_0_14_213) l_0_14_215))))
 (let ((?x47593 (+ (- (+ (- (+ (- (- ?x47584 ?x46889) ?x46891) ?x46893) ?x47588) ?x24453) ?x47591) ?x24442)))
 (= (- (+ (- (+ ?x47593 ?x47594) ?x44813) ?x47597) ?x44816) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x46661 (* l_0_14_87 l_0_14_87)))
 (let ((?x46659 (* l_0_14_86 l_0_14_86)))
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47630 (* ?x44898 l_0_14_75)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47628 (* ?x44895 l_0_14_74)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47626 (* ?x44892 l_0_14_54)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47624 (* ?x44889 l_0_14_53)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x46960 (* ?x44881 l_0_14_33)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x46958 (* ?x44877 l_0_14_32)))
 (let ((?x46644 (* l_0_14_171 l_0_14_171)))
 (let ((?x46642 (* l_0_14_170 l_0_14_170)))
 (let ((?x46640 (* l_0_14_150 l_0_14_150)))
 (let ((?x46638 (* l_0_14_149 l_0_14_149)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x46943 (* ?x45257 l_0_14_3)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x46941 (* ?x45254 l_0_14_2)))
 (let ((?x36284 (+ (+ (* l_0_14_107 l_0_14_107) (* l_0_14_108 l_0_14_108)) ?x46941)))
 (let ((?x47615 (- (+ (+ (- (- (+ ?x36284 ?x46943) ?x46638) ?x46640) ?x46642) ?x46644) (* (* 2.0 l_0_14_191) l_0_14_200))))
 (let ((?x47619 (- (- ?x47615 (* (* 2.0 l_0_14_192) l_0_14_201)) (* (* 2.0 l_0_14_212) l_0_14_221))))
 (let ((?x47625 (- (- (- (- ?x47619 (* (* 2.0 l_0_14_213) l_0_14_222)) ?x46958) ?x46960) ?x47624)))
 (= (- (- (+ (+ (- ?x47625 ?x47626) ?x47628) ?x47630) ?x46659) ?x46661) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47680 (* ?x44898 l_0_14_80)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47678 (* ?x44895 l_0_14_79)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47676 (* ?x44892 l_0_14_59)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47674 (* ?x44889 l_0_14_58)))
 (let ((?x44881 (* 12.0 l_0_14_24)))
 (let ((?x47026 (* ?x44881 l_0_14_38)))
 (let ((?x44877 (* 12.0 l_0_14_23)))
 (let ((?x47024 (* ?x44877 l_0_14_37)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x47017 (* ?x45407 l_0_14_3)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x47015 (* ?x45404 l_0_14_2)))
 (let ((?x47662 (+ (- (* (- l_0_14_128) l_0_14_128) (* l_0_14_129 l_0_14_129)) ?x47015)))
 (let ((?x47667 (- (- (+ ?x47662 ?x47017) (* (* 2.0 l_0_14_191) l_0_14_205)) (* (* 2.0 l_0_14_192) l_0_14_206))))
 (let ((?x47671 (- (- ?x47667 (* (* 2.0 l_0_14_212) l_0_14_226)) (* (* 2.0 l_0_14_213) l_0_14_227))))
 (= (+ (+ (- (- (- (- ?x47671 ?x47024) ?x47026) ?x47674) ?x47676) ?x47678) ?x47680) 0.0)))))))))))))))))))))
(assert
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47597 (* ?x44898 l_0_14_68)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47594 (* ?x44895 l_0_14_67)))
 (let ((?x45967 (* l_0_14_6 l_0_14_6)))
 (let ((?x47072 (* 6.0 ?x45967)))
 (let ((?x45965 (* l_0_14_5 l_0_14_5)))
 (let ((?x47070 (* 6.0 ?x45965)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47591 (* ?x44892 l_0_14_47)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47588 (* ?x44889 l_0_14_46)))
 (let ((?x45960 (* l_0_14_4 l_0_14_4)))
 (let ((?x47058 (* 6.0 ?x45960)))
 (let ((?x47056 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x47053 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x35793 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x47692 (* l_0_14_216 l_0_14_216)))
 (let ((?x47690 (* l_0_14_215 l_0_14_215)))
 (let ((?x47688 (* l_0_14_214 l_0_14_214)))
 (let ((?x47686 (* l_0_14_195 l_0_14_195)))
 (let ((?x47687 (- (- (* (- l_0_14_193) l_0_14_193) (* l_0_14_194 l_0_14_194)) ?x47686)))
 (let ((?x47697 (+ (- (- (- (- (- (- ?x47687 ?x47688) ?x47690) ?x47692) ?x35793) ?x47053) ?x47056) ?x47058)))
 (let ((?x47705 (- (- (+ (+ ?x47697 ?x47588) ?x47591) (* (* 1.0 l_0_14_46) l_0_14_46)) (* (* 1.0 l_0_14_47) l_0_14_47))))
 (let ((?x47711 (- (+ (+ (- ?x47705 (* (* 1.0 l_0_14_48) l_0_14_48)) ?x47070) ?x47072) ?x47594)))
 (let ((?x47716 (+ (+ (- ?x47711 ?x47597) (* 1.0 (* l_0_14_67 l_0_14_67))) (* 1.0 (* l_0_14_68 l_0_14_68)))))
 (= (+ ?x47716 (* 1.0 (* l_0_14_69 l_0_14_69))) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x47771 (* ?x45750 l_0_14_89)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x47769 (* ?x45747 l_0_14_88)))
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x47767 (* ?x45547 l_0_14_76)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x47765 (* ?x45544 l_0_14_75)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x47763 (* ?x45541 l_0_14_74)))
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47630 (* ?x44898 l_0_14_75)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47628 (* ?x44895 l_0_14_74)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x47759 (* ?x45534 l_0_14_55)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x47757 (* ?x45531 l_0_14_54)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x47755 (* ?x45528 l_0_14_53)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47626 (* ?x44892 l_0_14_54)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47624 (* ?x44889 l_0_14_53)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x47121 (* ?x45058 l_0_14_34)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x47119 (* ?x45055 l_0_14_33)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x47117 (* ?x45052 l_0_14_32)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x47735 (* ?x45688 l_0_14_173)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x11545 (* ?x45685 l_0_14_172)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x36572 (* ?x45682 l_0_14_152)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x11777 (* ?x45679 l_0_14_151)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x47105 (* ?x45260 l_0_14_6)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x47103 (* ?x45257 l_0_14_5)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x47101 (* ?x45254 l_0_14_4)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x11766 (* ?x24913 l_0_14_110)))
 (let ((?x11761 (+ (+ (+ (+ (* (* 2.0 l_0_14_107) l_0_14_109) ?x11766) ?x47101) ?x47103) ?x47105)))
 (let ((?x47739 (- (+ (+ (- (- ?x11761 ?x11777) ?x36572) ?x11545) ?x47735) (* (* 2.0 l_0_14_193) l_0_14_200))))
 (let ((?x47743 (- (- ?x47739 (* (* 2.0 l_0_14_194) l_0_14_201)) (* (* 2.0 l_0_14_195) l_0_14_202))))
 (let ((?x47747 (- (- ?x47743 (* (* 2.0 l_0_14_214) l_0_14_221)) (* (* 2.0 l_0_14_215) l_0_14_222))))
 (let ((?x47752 (- (- (- (- ?x47747 (* (* 2.0 l_0_14_216) l_0_14_223)) ?x47117) ?x47119) ?x47121)))
 (let ((?x47762 (- (- (- (- (- (+ (+ ?x47752 ?x47624) ?x47626) ?x47755) ?x47757) ?x47759) ?x47628) ?x47630)))
 (= (- (- (+ (+ (+ ?x47762 ?x47763) ?x47765) ?x47767) ?x47769) ?x47771) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x47848 (* ?x45547 l_0_14_81)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x47846 (* ?x45544 l_0_14_80)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x47844 (* ?x45541 l_0_14_79)))
 (let ((?x44898 (* 2.0 l_0_14_66)))
 (let ((?x47680 (* ?x44898 l_0_14_80)))
 (let ((?x44895 (* 2.0 l_0_14_65)))
 (let ((?x47678 (* ?x44895 l_0_14_79)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x47840 (* ?x45534 l_0_14_60)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x47838 (* ?x45531 l_0_14_59)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x47836 (* ?x45528 l_0_14_58)))
 (let ((?x44892 (* 2.0 l_0_14_45)))
 (let ((?x47676 (* ?x44892 l_0_14_59)))
 (let ((?x44889 (* 2.0 l_0_14_44)))
 (let ((?x47674 (* ?x44889 l_0_14_58)))
 (let ((?x45058 (* 12.0 l_0_14_27)))
 (let ((?x47183 (* ?x45058 l_0_14_39)))
 (let ((?x45055 (* 12.0 l_0_14_26)))
 (let ((?x47181 (* ?x45055 l_0_14_38)))
 (let ((?x45052 (* 12.0 l_0_14_25)))
 (let ((?x47179 (* ?x45052 l_0_14_37)))
 (let ((?x45410 (* 12.0 l_0_14_18)))
 (let ((?x47177 (* ?x45410 l_0_14_6)))
 (let ((?x45407 (* 12.0 l_0_14_17)))
 (let ((?x47175 (* ?x45407 l_0_14_5)))
 (let ((?x45404 (* 12.0 l_0_14_16)))
 (let ((?x47173 (* ?x45404 l_0_14_4)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x46873 (* ?x45002 l_0_14_131)))
 (let ((?x47818 (+ (+ (+ (- (* (* (- 2.0) l_0_14_128) l_0_14_130) ?x46873) ?x47173) ?x47175) ?x47177)))
 (let ((?x47822 (- (- ?x47818 (* (* 2.0 l_0_14_193) l_0_14_205)) (* (* 2.0 l_0_14_194) l_0_14_206))))
 (let ((?x47826 (- (- ?x47822 (* (* 2.0 l_0_14_195) l_0_14_207)) (* (* 2.0 l_0_14_214) l_0_14_226))))
 (let ((?x47830 (- (- ?x47826 (* (* 2.0 l_0_14_215) l_0_14_227)) (* (* 2.0 l_0_14_216) l_0_14_228))))
 (let ((?x47839 (- (- (+ (+ (- (- (- ?x47830 ?x47179) ?x47181) ?x47183) ?x47674) ?x47676) ?x47836) ?x47838)))
 (= (+ (+ (+ (- (- (- ?x47839 ?x47840) ?x47678) ?x47680) ?x47844) ?x47846) ?x47848) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x47921 (* ?x45750 l_0_14_96)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x47919 (* ?x45747 l_0_14_95)))
 (let ((?x47272 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x47269 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x47266 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x47263 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x47260 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x47887 (* l_0_14_225 l_0_14_225)))
 (let ((?x47885 (* l_0_14_224 l_0_14_224)))
 (let ((?x47883 (* l_0_14_223 l_0_14_223)))
 (let ((?x47881 (* l_0_14_222 l_0_14_222)))
 (let ((?x47879 (* l_0_14_221 l_0_14_221)))
 (let ((?x47877 (* l_0_14_204 l_0_14_204)))
 (let ((?x36779 (* l_0_14_203 l_0_14_203)))
 (let ((?x36782 (* l_0_14_202 l_0_14_202)))
 (let ((?x12489 (* l_0_14_201 l_0_14_201)))
 (let ((?x12340 (* l_0_14_200 l_0_14_200)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x36735 (* ?x45688 l_0_14_180)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x36723 (* ?x45685 l_0_14_179)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x36687 (* ?x45682 l_0_14_159)))
 (let ((?x46319 (* l_0_14_15 l_0_14_15)))
 (let ((?x47255 (* 6.0 ?x46319)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x7436 (* ?x45679 l_0_14_158)))
 (let ((?x46317 (* l_0_14_14 l_0_14_14)))
 (let ((?x47247 (* 6.0 ?x46317)))
 (let ((?x46315 (* l_0_14_13 l_0_14_13)))
 (let ((?x47239 (* 6.0 ?x46315)))
 (let ((?x46313 (* l_0_14_12 l_0_14_12)))
 (let ((?x47226 (* 6.0 ?x46313)))
 (let ((?x46369 (* l_0_14_11 l_0_14_11)))
 (let ((?x36121 (* 6.0 ?x46369)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x36898 (* ?x24913 l_0_14_117)))
 (let ((?x36766 (+ (+ (+ (+ (* (* 2.0 l_0_14_107) l_0_14_116) ?x36898) ?x36121) ?x47226) ?x47239)))
 (let ((?x36780 (- (+ (+ (- (+ (- (+ ?x36766 ?x47247) ?x7436) ?x47255) ?x36687) ?x36723) ?x36735) ?x12340)))
 (let ((?x47884 (- (- (- (- (- (- (- ?x36780 ?x12489) ?x36782) ?x36779) ?x47877) ?x47879) ?x47881) ?x47883)))
 (let ((?x47893 (- (- (- (- (- (- (- ?x47884 ?x47885) ?x47887) ?x47260) ?x47263) ?x47266) ?x47269) ?x47272)))
 (let ((?x47899 (- (- ?x47893 (* (* 1.0 l_0_14_53) l_0_14_53)) (* (* 1.0 l_0_14_54) l_0_14_54))))
 (let ((?x47905 (- (- ?x47899 (* (* 1.0 l_0_14_55) l_0_14_55)) (* (* 1.0 l_0_14_56) l_0_14_56))))
 (let ((?x47910 (+ (- ?x47905 (* (* 1.0 l_0_14_57) l_0_14_57)) (* 1.0 (* l_0_14_74 l_0_14_74)))))
 (let ((?x47914 (+ (+ ?x47910 (* 1.0 (* l_0_14_75 l_0_14_75))) (* 1.0 (* l_0_14_76 l_0_14_76)))))
 (let ((?x47918 (+ (+ ?x47914 (* 1.0 (* l_0_14_77 l_0_14_77))) (* 1.0 (* l_0_14_78 l_0_14_78)))))
 (= (- (- ?x47918 ?x47919) ?x47921) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48057 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x48054 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x48051 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x48048 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x48045 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x48042 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x48039 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x48036 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x48033 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x48030 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x47400 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x47397 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x47394 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x47391 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x47388 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x47992 (* ?x45688 l_0_14_185)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x47990 (* ?x45685 l_0_14_184)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x47988 (* ?x45682 l_0_14_164)))
 (let ((?x47383 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x47985 (* ?x45679 l_0_14_163)))
 (let ((?x47372 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x45260 (* 12.0 l_0_14_13)))
 (let ((?x47360 (* ?x45260 l_0_14_18)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x46947 (* ?x45002 l_0_14_138)))
 (let ((?x44999 (* 2.0 l_0_14_128)))
 (let ((?x46945 (* ?x44999 l_0_14_137)))
 (let ((?x45257 (* 12.0 l_0_14_12)))
 (let ((?x47357 (* ?x45257 l_0_14_17)))
 (let ((?x45254 (* 12.0 l_0_14_11)))
 (let ((?x47355 (* ?x45254 l_0_14_16)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x47977 (* ?x24913 l_0_14_122)))
 (let ((?x35145 (* 2.0 l_0_14_107)))
 (let ((?x47975 (* ?x35145 l_0_14_121)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x47973 (* ?x46440 l_0_14_87)))
 (let ((?x47979 (+ (+ (+ (- (* (* (- 2.0) l_0_14_100) l_0_14_86) ?x47973) ?x47975) ?x47977) ?x47355)))
 (let ((?x47987 (+ (- (+ (+ (- (- (+ ?x47979 ?x47357) ?x46945) ?x46947) ?x47360) ?x47372) ?x47985) ?x47383)))
 (let ((?x47996 (- (+ (+ (- ?x47987 ?x47988) ?x47990) ?x47992) (* (* 2.0 l_0_14_200) l_0_14_205))))
 (let ((?x48002 (- (- ?x47996 (* (* 2.0 l_0_14_201) l_0_14_206)) (* (* 2.0 l_0_14_202) l_0_14_207))))
 (let ((?x48008 (- (- ?x48002 (* (* 2.0 l_0_14_203) l_0_14_208)) (* (* 2.0 l_0_14_204) l_0_14_209))))
 (let ((?x48014 (- (- ?x48008 (* (* 2.0 l_0_14_221) l_0_14_226)) (* (* 2.0 l_0_14_222) l_0_14_227))))
 (let ((?x48020 (- (- ?x48014 (* (* 2.0 l_0_14_223) l_0_14_228)) (* (* 2.0 l_0_14_224) l_0_14_229))))
 (let ((?x48026 (- (- (- (- ?x48020 (* (* 2.0 l_0_14_225) l_0_14_230)) ?x47388) ?x47391) ?x47394)))
 (let ((?x48043 (- (- (- (- (- (- (- ?x48026 ?x47397) ?x47400) ?x48030) ?x48033) ?x48036) ?x48039) ?x48042)))
 (= (+ (+ (+ (+ (+ ?x48043 ?x48045) ?x48048) ?x48051) ?x48054) ?x48057) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47508 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47505 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47502 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47499 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47496 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47493 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x48140 (* l_0_14_231 l_0_14_231)))
 (let ((?x48138 (* l_0_14_230 l_0_14_230)))
 (let ((?x48136 (* l_0_14_229 l_0_14_229)))
 (let ((?x48134 (* l_0_14_228 l_0_14_228)))
 (let ((?x48132 (* l_0_14_227 l_0_14_227)))
 (let ((?x48130 (* l_0_14_226 l_0_14_226)))
 (let ((?x48128 (* l_0_14_210 l_0_14_210)))
 (let ((?x46596 (* l_0_14_21 l_0_14_21)))
 (let ((?x47490 (* 6.0 ?x46596)))
 (let ((?x48125 (* l_0_14_209 l_0_14_209)))
 (let ((?x48123 (* l_0_14_208 l_0_14_208)))
 (let ((?x48121 (* l_0_14_207 l_0_14_207)))
 (let ((?x48119 (* l_0_14_206 l_0_14_206)))
 (let ((?x48117 (* l_0_14_205 l_0_14_205)))
 (let ((?x46594 (* l_0_14_20 l_0_14_20)))
 (let ((?x47488 (* 6.0 ?x46594)))
 (let ((?x46592 (* l_0_14_19 l_0_14_19)))
 (let ((?x47486 (* 6.0 ?x46592)))
 (let ((?x46574 (* l_0_14_18 l_0_14_18)))
 (let ((?x47484 (* 6.0 ?x46574)))
 (let ((?x46571 (* l_0_14_17 l_0_14_17)))
 (let ((?x47482 (* 6.0 ?x46571)))
 (let ((?x46567 (* l_0_14_16 l_0_14_16)))
 (let ((?x47480 (* 6.0 ?x46567)))
 (let ((?x45002 (* 2.0 l_0_14_129)))
 (let ((?x47013 (* ?x45002 l_0_14_143)))
 (let ((?x37405 (+ (+ (+ (- (* (* (- 2.0) l_0_14_128) l_0_14_142) ?x47013) ?x47480) ?x47482) ?x47484)))
 (let ((?x48126 (- (- (- (- (- (+ (+ ?x37405 ?x47486) ?x47488) ?x48117) ?x48119) ?x48121) ?x48123) ?x48125)))
 (let ((?x48139 (- (- (- (- (- (- (+ ?x48126 ?x47490) ?x48128) ?x48130) ?x48132) ?x48134) ?x48136) ?x48138)))
 (let ((?x48147 (- (- (- (- (- (- (- ?x48139 ?x48140) ?x47493) ?x47496) ?x47499) ?x47502) ?x47505) ?x47508)))
 (let ((?x48153 (- (- ?x48147 (* (* 1.0 l_0_14_58) l_0_14_58)) (* (* 1.0 l_0_14_59) l_0_14_59))))
 (let ((?x48159 (- (- ?x48153 (* (* 1.0 l_0_14_60) l_0_14_60)) (* (* 1.0 l_0_14_61) l_0_14_61))))
 (let ((?x48165 (- (- ?x48159 (* (* 1.0 l_0_14_62) l_0_14_62)) (* (* 1.0 l_0_14_63) l_0_14_63))))
 (let ((?x48169 (+ (+ ?x48165 (* 1.0 (* l_0_14_79 l_0_14_79))) (* 1.0 (* l_0_14_80 l_0_14_80)))))
 (let ((?x48173 (+ (+ ?x48169 (* 1.0 (* l_0_14_81 l_0_14_81))) (* 1.0 (* l_0_14_82 l_0_14_82)))))
 (let ((?x48177 (+ (+ ?x48173 (* 1.0 (* l_0_14_83 l_0_14_83))) (* 1.0 (* l_0_14_84 l_0_14_84)))))
 (= ?x48177 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x46970 (* ?x45319 l_0_14_86)))
 (let ((?x46656 (* l_0_14_64 l_0_14_64)))
 (let ((?x46657 (* 3.0 ?x46656)))
 (let ((?x46652 (* (* 3.0 l_0_14_43) l_0_14_43)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x46951 (* ?x45278 l_0_14_170)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x46949 (* ?x45275 l_0_14_149)))
 (let ((?x48204 (+ (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_107) ?x46949) ?x46951) ?x46652) ?x46657)))
 (= (+ ?x48204 ?x46970) 0.0))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x47771 (* ?x45750 l_0_14_89)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x47769 (* ?x45747 l_0_14_88)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46725 (* ?x44956 l_0_14_67)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46718 (* ?x44947 l_0_14_46)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x47735 (* ?x45688 l_0_14_173)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x11545 (* ?x45685 l_0_14_172)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x36572 (* ?x45682 l_0_14_152)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x11777 (* ?x45679 l_0_14_151)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x11766 (* ?x24913 l_0_14_110)))
 (let ((?x37522 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_109) ?x11766) ?x11777) ?x36572) ?x11545)))
 (= (+ (+ (+ (- (- ?x37522 ?x47735) ?x46718) ?x46725) ?x47769) ?x47771) 0.0)))))))))))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x45751 (* ?x45750 l_0_14_92)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x45748 (* ?x45747 l_0_14_91)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x44957 (* ?x44956 l_0_14_70)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x44948 (* ?x44947 l_0_14_49)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x45689 (* ?x45688 l_0_14_176)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x45686 (* ?x45685 l_0_14_175)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x45683 (* ?x45682 l_0_14_155)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x45680 (* ?x45679 l_0_14_154)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x35067 (* ?x24913 l_0_14_113)))
 (let ((?x37527 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_112) ?x35067) ?x45680) ?x45683) ?x45686)))
 (= (+ (+ (+ (- (- ?x37527 ?x45689) ?x44948) ?x44957) ?x45748) ?x45751) 0.0)))))))))))))))))))))
(assert
 (let ((?x45750 (* 2.0 l_0_14_87)))
 (let ((?x47921 (* ?x45750 l_0_14_96)))
 (let ((?x45747 (* 2.0 l_0_14_86)))
 (let ((?x47919 (* ?x45747 l_0_14_95)))
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46781 (* ?x44956 l_0_14_74)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46775 (* ?x44947 l_0_14_53)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x36735 (* ?x45688 l_0_14_180)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x36723 (* ?x45685 l_0_14_179)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x36687 (* ?x45682 l_0_14_159)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x7436 (* ?x45679 l_0_14_158)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x36898 (* ?x24913 l_0_14_117)))
 (let ((?x13313 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_116) ?x36898) ?x7436) ?x36687) ?x36723)))
 (= (+ (+ (+ (- (- ?x13313 ?x36735) ?x46775) ?x46781) ?x47919) ?x47921) 0.0)))))))))))))))))))))
(assert
 (let ((?x44956 (* 6.0 l_0_14_64)))
 (let ((?x46840 (* ?x44956 l_0_14_79)))
 (let ((?x44947 (* 6.0 l_0_14_43)))
 (let ((?x46834 (* ?x44947 l_0_14_58)))
 (let ((?x45688 (* 2.0 l_0_14_171)))
 (let ((?x47992 (* ?x45688 l_0_14_185)))
 (let ((?x45685 (* 2.0 l_0_14_170)))
 (let ((?x47990 (* ?x45685 l_0_14_184)))
 (let ((?x45682 (* 2.0 l_0_14_150)))
 (let ((?x47988 (* ?x45682 l_0_14_164)))
 (let ((?x45679 (* 2.0 l_0_14_149)))
 (let ((?x47985 (* ?x45679 l_0_14_163)))
 (let ((?x24913 (* 2.0 l_0_14_108)))
 (let ((?x47977 (* ?x24913 l_0_14_122)))
 (let ((?x35145 (* 2.0 l_0_14_107)))
 (let ((?x47975 (* ?x35145 l_0_14_121)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x47973 (* ?x46440 l_0_14_87)))
 (let ((?x13336 (+ (- (- (+ (* (* 2.0 l_0_14_100) l_0_14_86) ?x47973) ?x47975) ?x47977) ?x47985)))
 (= (+ (- (- (- (+ ?x13336 ?x47988) ?x47990) ?x47992) ?x46834) ?x46840) 0.0)))))))))))))))))))))
(assert
 (let ((?x47081 (* l_0_14_69 l_0_14_69)))
 (let ((?x47082 (* 3.0 ?x47081)))
 (let ((?x47078 (* l_0_14_68 l_0_14_68)))
 (let ((?x47079 (* 3.0 ?x47078)))
 (let ((?x47075 (* l_0_14_67 l_0_14_67)))
 (let ((?x47076 (* 3.0 ?x47075)))
 (let ((?x47068 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x47065 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x48236 (+ (+ (- (- (* (* (- 3.0) l_0_14_46) l_0_14_46) ?x47065) ?x47068) ?x47076) ?x47079)))
 (= (+ ?x48236 ?x47082) 0.0)))))))))))
(assert
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x45088 (* ?x45087 l_0_14_72)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x45085 (* ?x45084 l_0_14_71)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x45082 (* ?x45081 l_0_14_70)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x45072 (* ?x45071 l_0_14_51)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x45069 (* ?x45068 l_0_14_50)))
 (let ((?x48245 (+ (+ (- (- (* (* (- 6.0) l_0_14_46) l_0_14_49) ?x45069) ?x45072) ?x45082) ?x45085)))
 (= (+ ?x48245 ?x45088) 0.0)))))))))))))
(assert
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x47135 (* ?x45087 l_0_14_76)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x47133 (* ?x45084 l_0_14_75)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x47131 (* ?x45081 l_0_14_74)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x47128 (* ?x45071 l_0_14_55)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x47126 (* ?x45068 l_0_14_54)))
 (let ((?x48253 (+ (+ (- (- (* (* (- 6.0) l_0_14_46) l_0_14_53) ?x47126) ?x47128) ?x47131) ?x47133)))
 (= (+ ?x48253 ?x47135) 0.0)))))))))))))
(assert
 (let ((?x45087 (* 6.0 l_0_14_69)))
 (let ((?x47197 (* ?x45087 l_0_14_81)))
 (let ((?x45084 (* 6.0 l_0_14_68)))
 (let ((?x47195 (* ?x45084 l_0_14_80)))
 (let ((?x45081 (* 6.0 l_0_14_67)))
 (let ((?x47193 (* ?x45081 l_0_14_79)))
 (let ((?x45071 (* 6.0 l_0_14_48)))
 (let ((?x47190 (* ?x45071 l_0_14_60)))
 (let ((?x45068 (* 6.0 l_0_14_47)))
 (let ((?x47188 (* ?x45068 l_0_14_59)))
 (let ((?x48262 (+ (+ (- (- (* (* (- 6.0) l_0_14_46) l_0_14_58) ?x47188) ?x47190) ?x47193) ?x47195)))
 (= (+ ?x48262 ?x47197) 0.0)))))))))))))
(assert
 (let ((?x45187 (* l_0_14_73 l_0_14_73)))
 (let ((?x45188 (* 3.0 ?x45187)))
 (let ((?x45184 (* l_0_14_72 l_0_14_72)))
 (let ((?x45185 (* 3.0 ?x45184)))
 (let ((?x45181 (* l_0_14_71 l_0_14_71)))
 (let ((?x45182 (* 3.0 ?x45181)))
 (let ((?x45178 (* l_0_14_70 l_0_14_70)))
 (let ((?x45179 (* 3.0 ?x45178)))
 (let ((?x45173 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x45170 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x45167 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x48273 (+ (- (- (- (* (* (- 3.0) l_0_14_49) l_0_14_49) ?x45167) ?x45170) ?x45173) ?x45179)))
 (= (+ (+ (+ ?x48273 ?x45182) ?x45185) ?x45188) 0.0))))))))))))))
(assert
 (let ((?x45316 (* 6.0 l_0_14_73)))
 (let ((?x45317 (* ?x45316 l_0_14_77)))
 (let ((?x45313 (* 6.0 l_0_14_72)))
 (let ((?x45314 (* ?x45313 l_0_14_76)))
 (let ((?x45310 (* 6.0 l_0_14_71)))
 (let ((?x45311 (* ?x45310 l_0_14_75)))
 (let ((?x45307 (* 6.0 l_0_14_70)))
 (let ((?x45308 (* ?x45307 l_0_14_74)))
 (let ((?x45304 (* 6.0 l_0_14_52)))
 (let ((?x45305 (* ?x45304 l_0_14_56)))
 (let ((?x45301 (* 6.0 l_0_14_51)))
 (let ((?x45302 (* ?x45301 l_0_14_55)))
 (let ((?x45298 (* 6.0 l_0_14_50)))
 (let ((?x45299 (* ?x45298 l_0_14_54)))
 (let ((?x48283 (+ (- (- (- (* (* (- 6.0) l_0_14_49) l_0_14_53) ?x45299) ?x45302) ?x45305) ?x45308)))
 (= (+ (+ (+ ?x48283 ?x45311) ?x45314) ?x45317) 0.0)))))))))))))))))
(assert
 (let ((?x45316 (* 6.0 l_0_14_73)))
 (let ((?x45437 (* ?x45316 l_0_14_82)))
 (let ((?x45313 (* 6.0 l_0_14_72)))
 (let ((?x45435 (* ?x45313 l_0_14_81)))
 (let ((?x45310 (* 6.0 l_0_14_71)))
 (let ((?x45433 (* ?x45310 l_0_14_80)))
 (let ((?x45307 (* 6.0 l_0_14_70)))
 (let ((?x45431 (* ?x45307 l_0_14_79)))
 (let ((?x45304 (* 6.0 l_0_14_52)))
 (let ((?x45429 (* ?x45304 l_0_14_61)))
 (let ((?x45301 (* 6.0 l_0_14_51)))
 (let ((?x45427 (* ?x45301 l_0_14_60)))
 (let ((?x45298 (* 6.0 l_0_14_50)))
 (let ((?x45425 (* ?x45298 l_0_14_59)))
 (let ((?x48297 (+ (- (- (- (* (* (- 6.0) l_0_14_49) l_0_14_58) ?x45425) ?x45427) ?x45429) ?x45431)))
 (= (+ (+ (+ ?x48297 ?x45433) ?x45435) ?x45437) 0.0)))))))))))))))))
(assert
 (let ((?x47301 (* l_0_14_78 l_0_14_78)))
 (let ((?x47302 (* 3.0 ?x47301)))
 (let ((?x47298 (* l_0_14_77 l_0_14_77)))
 (let ((?x47299 (* 3.0 ?x47298)))
 (let ((?x47295 (* l_0_14_76 l_0_14_76)))
 (let ((?x47296 (* 3.0 ?x47295)))
 (let ((?x47292 (* l_0_14_75 l_0_14_75)))
 (let ((?x47293 (* 3.0 ?x47292)))
 (let ((?x47289 (* l_0_14_74 l_0_14_74)))
 (let ((?x47290 (* 3.0 ?x47289)))
 (let ((?x47287 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x47284 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x47281 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x47278 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x48308 (- (- (- (- (* (* (- 3.0) l_0_14_53) l_0_14_53) ?x47278) ?x47281) ?x47284) ?x47287)))
 (= (+ (+ (+ (+ (+ ?x48308 ?x47290) ?x47293) ?x47296) ?x47299) ?x47302) 0.0)))))))))))))))))
(assert
 (let ((?x47430 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x47427 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x47424 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x47421 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x47418 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x47415 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x47412 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x47409 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x47406 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x26731 (- (- (- (- (* (* (- 6.0) l_0_14_53) l_0_14_58) ?x47406) ?x47409) ?x47412) ?x47415)))
 (= (+ (+ (+ (+ (+ ?x26731 ?x47418) ?x47421) ?x47424) ?x47427) ?x47430) 0.0))))))))))))
(assert
 (let ((?x47543 (* l_0_14_84 l_0_14_84)))
 (let ((?x47544 (* 3.0 ?x47543)))
 (let ((?x47540 (* l_0_14_83 l_0_14_83)))
 (let ((?x47541 (* 3.0 ?x47540)))
 (let ((?x47537 (* l_0_14_82 l_0_14_82)))
 (let ((?x47538 (* 3.0 ?x47537)))
 (let ((?x47534 (* l_0_14_81 l_0_14_81)))
 (let ((?x47535 (* 3.0 ?x47534)))
 (let ((?x47531 (* l_0_14_80 l_0_14_80)))
 (let ((?x47532 (* 3.0 ?x47531)))
 (let ((?x47528 (* l_0_14_79 l_0_14_79)))
 (let ((?x47529 (* 3.0 ?x47528)))
 (let ((?x47526 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x47523 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x47520 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x47517 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x47514 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x26783 (- (- (- (- (* (* (- 3.0) l_0_14_58) l_0_14_58) ?x47514) ?x47517) ?x47520) ?x47523)))
 (let ((?x13458 (+ (+ (+ (+ (+ (+ (- ?x26783 ?x47526) ?x47529) ?x47532) ?x47535) ?x47538) ?x47541) ?x47544)))
 (= ?x13458 0.0)))))))))))))))))))))
(assert
 (let ((?x47081 (* l_0_14_69 l_0_14_69)))
 (let ((?x47078 (* l_0_14_68 l_0_14_68)))
 (let ((?x47075 (* l_0_14_67 l_0_14_67)))
 (let ((?x47097 (* l_0_14_48 l_0_14_48)))
 (let ((?x48325 (- (+ (+ (* l_0_14_46 l_0_14_46) (* l_0_14_47 l_0_14_47)) ?x47097) ?x47075)))
 (= (- (- ?x48325 ?x47078) ?x47081) 0.0)))))))
(assert
 (let ((?x48361 (* l_0_14_90 l_0_14_90)))
 (let ((?x48359 (* l_0_14_89 l_0_14_89)))
 (let ((?x48357 (* l_0_14_88 l_0_14_88)))
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x47767 (* ?x45547 l_0_14_76)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x47765 (* ?x45544 l_0_14_75)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x47763 (* ?x45541 l_0_14_74)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x47759 (* ?x45534 l_0_14_55)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x47757 (* ?x45531 l_0_14_54)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x47755 (* ?x45528 l_0_14_53)))
 (let ((?x48349 (* l_0_14_174 l_0_14_174)))
 (let ((?x48347 (* l_0_14_173 l_0_14_173)))
 (let ((?x48345 (* l_0_14_172 l_0_14_172)))
 (let ((?x48343 (* l_0_14_153 l_0_14_153)))
 (let ((?x48341 (* l_0_14_152 l_0_14_152)))
 (let ((?x48339 (* l_0_14_151 l_0_14_151)))
 (let ((?x48337 (* l_0_14_111 l_0_14_111)))
 (let ((?x48338 (+ (+ (* l_0_14_109 l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x48337)))
 (let ((?x48351 (+ (+ (+ (+ (- (- (- ?x48338 ?x48339) ?x48341) ?x48343) ?x48345) ?x48347) ?x48349) ?x47755)))
 (let ((?x48360 (- (- (- (- (- (+ (+ ?x48351 ?x47757) ?x47759) ?x47763) ?x47765) ?x47767) ?x48357) ?x48359)))
 (= (- ?x48360 ?x48361) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x45547 (* 2.0 l_0_14_69)))
 (let ((?x47848 (* ?x45547 l_0_14_81)))
 (let ((?x45544 (* 2.0 l_0_14_68)))
 (let ((?x47846 (* ?x45544 l_0_14_80)))
 (let ((?x45541 (* 2.0 l_0_14_67)))
 (let ((?x47844 (* ?x45541 l_0_14_79)))
 (let ((?x45534 (* 2.0 l_0_14_48)))
 (let ((?x47840 (* ?x45534 l_0_14_60)))
 (let ((?x45531 (* 2.0 l_0_14_47)))
 (let ((?x47838 (* ?x45531 l_0_14_59)))
 (let ((?x45528 (* 2.0 l_0_14_46)))
 (let ((?x47836 (* ?x45528 l_0_14_58)))
 (let ((?x10604 (* l_0_14_132 l_0_14_132)))
 (let ((?x48374 (- (- (* (- l_0_14_130) l_0_14_130) (* l_0_14_131 l_0_14_131)) ?x10604)))
 (= (- (- (- (+ (+ (+ ?x48374 ?x47836) ?x47838) ?x47840) ?x47844) ?x47846) ?x47848) 0.0))))))))))))))))
(assert
 (let ((?x46069 (* 2.0 l_0_14_90)))
 (let ((?x48420 (* ?x46069 l_0_14_97)))
 (let ((?x46066 (* 2.0 l_0_14_89)))
 (let ((?x48418 (* ?x46066 l_0_14_96)))
 (let ((?x46063 (* 2.0 l_0_14_88)))
 (let ((?x48416 (* ?x46063 l_0_14_95)))
 (let ((?x47301 (* l_0_14_78 l_0_14_78)))
 (let ((?x47298 (* l_0_14_77 l_0_14_77)))
 (let ((?x47295 (* l_0_14_76 l_0_14_76)))
 (let ((?x47292 (* l_0_14_75 l_0_14_75)))
 (let ((?x47289 (* l_0_14_74 l_0_14_74)))
 (let ((?x36143 (* l_0_14_57 l_0_14_57)))
 (let ((?x36140 (* l_0_14_56 l_0_14_56)))
 (let ((?x10981 (* l_0_14_55 l_0_14_55)))
 (let ((?x25787 (* l_0_14_54 l_0_14_54)))
 (let ((?x25786 (* l_0_14_53 l_0_14_53)))
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x48404 (* ?x46046 l_0_14_181)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x48402 (* ?x46043 l_0_14_180)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x48400 (* ?x46040 l_0_14_179)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x48398 (* ?x46037 l_0_14_160)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x48396 (* ?x46034 l_0_14_159)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x48394 (* ?x46031 l_0_14_158)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x48392 (* ?x46023 l_0_14_118)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x48390 (* ?x46020 l_0_14_117)))
 (let ((?x48397 (- (- (+ (+ (* (* 2.0 l_0_14_109) l_0_14_116) ?x48390) ?x48392) ?x48394) ?x48396)))
 (let ((?x48408 (+ (+ (+ (+ (+ (+ (- ?x48397 ?x48398) ?x48400) ?x48402) ?x48404) ?x25786) ?x25787) ?x10981)))
 (let ((?x48415 (- (- (- (- (- (+ (+ ?x48408 ?x36140) ?x36143) ?x47289) ?x47292) ?x47295) ?x47298) ?x47301)))
 (= (- (- (- ?x48415 ?x48416) ?x48418) ?x48420) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48057 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x48054 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x48051 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x48048 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x48045 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x48042 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x48039 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x48036 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x48033 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x48030 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x48475 (* ?x46046 l_0_14_186)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x48473 (* ?x46043 l_0_14_185)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x48471 (* ?x46040 l_0_14_184)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x48469 (* ?x46037 l_0_14_165)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x48467 (* ?x46034 l_0_14_164)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x48465 (* ?x46031 l_0_14_163)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x47111 (* ?x45047 l_0_14_139)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x47109 (* ?x45044 l_0_14_138)))
 (let ((?x45041 (* 2.0 l_0_14_130)))
 (let ((?x47107 (* ?x45041 l_0_14_137)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x48460 (* ?x46023 l_0_14_123)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x48458 (* ?x46020 l_0_14_122)))
 (let ((?x46016 (* 2.0 l_0_14_109)))
 (let ((?x48456 (* ?x46016 l_0_14_121)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x48454 (* ?x46443 l_0_14_90)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x48452 (* ?x46440 l_0_14_89)))
 (let ((?x48459 (+ (+ (- (- (* (* (- 2.0) l_0_14_100) l_0_14_88) ?x48452) ?x48454) ?x48456) ?x48458)))
 (let ((?x48470 (- (- (- (- (- (- (+ ?x48459 ?x48460) ?x47107) ?x47109) ?x47111) ?x48465) ?x48467) ?x48469)))
 (let ((?x48480 (+ (+ (+ (+ (+ (+ (+ ?x48470 ?x48471) ?x48473) ?x48475) ?x48030) ?x48033) ?x48036) ?x48039)))
 (= (- (- (- (- (- (+ ?x48480 ?x48042) ?x48045) ?x48048) ?x48051) ?x48054) ?x48057) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47543 (* l_0_14_84 l_0_14_84)))
 (let ((?x47540 (* l_0_14_83 l_0_14_83)))
 (let ((?x47537 (* l_0_14_82 l_0_14_82)))
 (let ((?x47534 (* l_0_14_81 l_0_14_81)))
 (let ((?x47531 (* l_0_14_80 l_0_14_80)))
 (let ((?x47528 (* l_0_14_79 l_0_14_79)))
 (let ((?x11307 (* l_0_14_63 l_0_14_63)))
 (let ((?x11248 (* l_0_14_62 l_0_14_62)))
 (let ((?x36301 (* l_0_14_61 l_0_14_61)))
 (let ((?x36298 (* l_0_14_60 l_0_14_60)))
 (let ((?x36295 (* l_0_14_59 l_0_14_59)))
 (let ((?x36293 (* l_0_14_58 l_0_14_58)))
 (let ((?x45047 (* 2.0 l_0_14_132)))
 (let ((?x47171 (* ?x45047 l_0_14_144)))
 (let ((?x45044 (* 2.0 l_0_14_131)))
 (let ((?x47169 (* ?x45044 l_0_14_143)))
 (let ((?x37199 (+ (+ (- (- (* (* (- 2.0) l_0_14_130) l_0_14_142) ?x47169) ?x47171) ?x36293) ?x36295)))
 (let ((?x37865 (- (- (- (+ (+ (+ (+ ?x37199 ?x36298) ?x36301) ?x11248) ?x11307) ?x47528) ?x47531) ?x47534)))
 (= (- (- (- ?x37865 ?x47537) ?x47540) ?x47543) 0.0))))))))))))))))))))
(assert
 (let ((?x48550 (* l_0_14_99 l_0_14_99)))
 (let ((?x48548 (* l_0_14_98 l_0_14_98)))
 (let ((?x48546 (* l_0_14_97 l_0_14_97)))
 (let ((?x48544 (* l_0_14_96 l_0_14_96)))
 (let ((?x48542 (* l_0_14_95 l_0_14_95)))
 (let ((?x48540 (* l_0_14_183 l_0_14_183)))
 (let ((?x48538 (* l_0_14_182 l_0_14_182)))
 (let ((?x48536 (* l_0_14_181 l_0_14_181)))
 (let ((?x48534 (* l_0_14_180 l_0_14_180)))
 (let ((?x48532 (* l_0_14_179 l_0_14_179)))
 (let ((?x48530 (* l_0_14_162 l_0_14_162)))
 (let ((?x48528 (* l_0_14_161 l_0_14_161)))
 (let ((?x48526 (* l_0_14_160 l_0_14_160)))
 (let ((?x48524 (* l_0_14_159 l_0_14_159)))
 (let ((?x48522 (* l_0_14_158 l_0_14_158)))
 (let ((?x48520 (* l_0_14_120 l_0_14_120)))
 (let ((?x48518 (* l_0_14_119 l_0_14_119)))
 (let ((?x48516 (* l_0_14_118 l_0_14_118)))
 (let ((?x48517 (+ (+ (* l_0_14_116 l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48516)))
 (let ((?x48531 (- (- (- (- (- (+ (+ ?x48517 ?x48518) ?x48520) ?x48522) ?x48524) ?x48526) ?x48528) ?x48530)))
 (let ((?x48545 (- (- (+ (+ (+ (+ (+ ?x48531 ?x48532) ?x48534) ?x48536) ?x48538) ?x48540) ?x48542) ?x48544)))
 (= (- (- (- ?x48545 ?x48546) ?x48548) ?x48550) 0.0)))))))))))))))))))))))
(assert
 (let ((?x48630 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x48627 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x48624 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x48621 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x48618 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x48615 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x48612 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x48609 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x48606 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x48603 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x47251 (* l_0_14_141 l_0_14_141)))
 (let ((?x47249 (* l_0_14_140 l_0_14_140)))
 (let ((?x47245 (* l_0_14_139 l_0_14_139)))
 (let ((?x47243 (* l_0_14_138 l_0_14_138)))
 (let ((?x47241 (* l_0_14_137 l_0_14_137)))
 (let ((?x48595 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x48592 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x48589 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x48586 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x48583 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x48580 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x46446 (* 2.0 l_0_14_103)))
 (let ((?x48577 (* ?x46446 l_0_14_98)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x48575 (* ?x46443 l_0_14_97)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x27400 (* ?x46440 l_0_14_96)))
 (let ((?x48581 (- (- (- (- (* (* (- 2.0) l_0_14_100) l_0_14_95) ?x27400) ?x48575) ?x48577) ?x48580)))
 (let ((?x48598 (- (- (+ (+ (+ (+ (+ ?x48581 ?x48583) ?x48586) ?x48589) ?x48592) ?x48595) ?x47241) ?x47243)))
 (let ((?x48613 (- (- (- (- (- (- (- ?x48598 ?x47245) ?x47249) ?x47251) ?x48603) ?x48606) ?x48609) ?x48612)))
 (= (+ (+ (+ (+ (+ (- ?x48613 ?x48615) ?x48618) ?x48621) ?x48624) ?x48627) ?x48630) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x48740 (* l_0_14_189 l_0_14_189)))
 (let ((?x48738 (* l_0_14_188 l_0_14_188)))
 (let ((?x48736 (* l_0_14_187 l_0_14_187)))
 (let ((?x48734 (* l_0_14_186 l_0_14_186)))
 (let ((?x48732 (* l_0_14_185 l_0_14_185)))
 (let ((?x48730 (* l_0_14_184 l_0_14_184)))
 (let ((?x48728 (* l_0_14_168 l_0_14_168)))
 (let ((?x48726 (* l_0_14_167 l_0_14_167)))
 (let ((?x48724 (* l_0_14_166 l_0_14_166)))
 (let ((?x48722 (* l_0_14_165 l_0_14_165)))
 (let ((?x48720 (* l_0_14_164 l_0_14_164)))
 (let ((?x48718 (* l_0_14_163 l_0_14_163)))
 (let ((?x47378 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47375 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x47369 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47366 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47363 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x48711 (* l_0_14_126 l_0_14_126)))
 (let ((?x48709 (* l_0_14_125 l_0_14_125)))
 (let ((?x48707 (* l_0_14_124 l_0_14_124)))
 (let ((?x48705 (* l_0_14_123 l_0_14_123)))
 (let ((?x48703 (* l_0_14_122 l_0_14_122)))
 (let ((?x48701 (* l_0_14_121 l_0_14_121)))
 (let ((?x48699 (* l_0_14_105 l_0_14_105)))
 (let ((?x48697 (* l_0_14_104 l_0_14_104)))
 (let ((?x48695 (* l_0_14_103 l_0_14_103)))
 (let ((?x48693 (* l_0_14_102 l_0_14_102)))
 (let ((?x48694 (- (- (* (- l_0_14_100) l_0_14_100) (* l_0_14_101 l_0_14_101)) ?x48693)))
 (let ((?x48708 (+ (+ (+ (+ (- (- (- ?x48694 ?x48695) ?x48697) ?x48699) ?x48701) ?x48703) ?x48705) ?x48707)))
 (let ((?x48717 (- (- (- (- (- (+ (+ ?x48708 ?x48709) ?x48711) ?x47363) ?x47366) ?x47369) ?x47375) ?x47378)))
 (let ((?x48731 (+ (- (- (- (- (- (- ?x48717 ?x48718) ?x48720) ?x48722) ?x48724) ?x48726) ?x48728) ?x48730)))
 (= (+ (+ (+ (+ (+ ?x48731 ?x48732) ?x48734) ?x48736) ?x48738) ?x48740) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x46787 (* l_0_14_85 l_0_14_85)))
 (let ((?x46771 (* l_0_14_169 l_0_14_169)))
 (let ((?x12551 (- (+ (* (- l_0_14_106) l_0_14_106) (* l_0_14_148 l_0_14_148)) ?x46771)))
 (= (+ ?x12551 ?x46787) 0.0)))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x47137 (* ?x45319 l_0_14_88)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47115 (* ?x45278 l_0_14_172)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47113 (* ?x45275 l_0_14_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_109) ?x47113) ?x47115) ?x47137) 0.0))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x45320 (* ?x45319 l_0_14_91)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x45279 (* ?x45278 l_0_14_175)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x45276 (* ?x45275 l_0_14_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_112) ?x45276) ?x45279) ?x45320) 0.0))))))))
(assert
 (let ((?x45319 (* 2.0 l_0_14_85)))
 (let ((?x47304 (* ?x45319 l_0_14_95)))
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47257 (* ?x45278 l_0_14_179)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47253 (* ?x45275 l_0_14_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_116) ?x47253) ?x47257) ?x47304) 0.0))))))))
(assert
 (let ((?x45278 (* 2.0 l_0_14_169)))
 (let ((?x47385 (* ?x45278 l_0_14_184)))
 (let ((?x45275 (* 2.0 l_0_14_148)))
 (let ((?x47380 (* ?x45275 l_0_14_163)))
 (let ((?x45251 (* 2.0 l_0_14_106)))
 (let ((?x47353 (* ?x45251 l_0_14_121)))
 (= (- (+ (- (* (* 2.0 l_0_14_100) l_0_14_85) ?x47353) ?x47380) ?x47385) 0.0))))))))
(assert
 (let ((?x48361 (* l_0_14_90 l_0_14_90)))
 (let ((?x48359 (* l_0_14_89 l_0_14_89)))
 (let ((?x48357 (* l_0_14_88 l_0_14_88)))
 (let ((?x48349 (* l_0_14_174 l_0_14_174)))
 (let ((?x48347 (* l_0_14_173 l_0_14_173)))
 (let ((?x48345 (* l_0_14_172 l_0_14_172)))
 (let ((?x48343 (* l_0_14_153 l_0_14_153)))
 (let ((?x48341 (* l_0_14_152 l_0_14_152)))
 (let ((?x48339 (* l_0_14_151 l_0_14_151)))
 (let ((?x48337 (* l_0_14_111 l_0_14_111)))
 (let ((?x48773 (- (- (* (- l_0_14_109) l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x48337)))
 (let ((?x48780 (+ (- (- (- (+ (+ (+ ?x48773 ?x48339) ?x48341) ?x48343) ?x48345) ?x48347) ?x48349) ?x48357)))
 (= (+ (+ ?x48780 ?x48359) ?x48361) 0.0))))))))))))))
(assert
 (let ((?x46069 (* 2.0 l_0_14_90)))
 (let ((?x46070 (* ?x46069 l_0_14_93)))
 (let ((?x46066 (* 2.0 l_0_14_89)))
 (let ((?x46067 (* ?x46066 l_0_14_92)))
 (let ((?x46063 (* 2.0 l_0_14_88)))
 (let ((?x46064 (* ?x46063 l_0_14_91)))
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x46047 (* ?x46046 l_0_14_177)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x46044 (* ?x46043 l_0_14_176)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x46041 (* ?x46040 l_0_14_175)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x46038 (* ?x46037 l_0_14_156)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x46035 (* ?x46034 l_0_14_155)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x46032 (* ?x46031 l_0_14_154)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x46024 (* ?x46023 l_0_14_114)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x46021 (* ?x46020 l_0_14_113)))
 (let ((?x48787 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_112) ?x46021) ?x46024) ?x46032) ?x46035)))
 (let ((?x48794 (+ (+ (+ (- (- (- (+ ?x48787 ?x46038) ?x46041) ?x46044) ?x46047) ?x46064) ?x46067) ?x46070)))
 (= ?x48794 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46069 (* 2.0 l_0_14_90)))
 (let ((?x48420 (* ?x46069 l_0_14_97)))
 (let ((?x46066 (* 2.0 l_0_14_89)))
 (let ((?x48418 (* ?x46066 l_0_14_96)))
 (let ((?x46063 (* 2.0 l_0_14_88)))
 (let ((?x48416 (* ?x46063 l_0_14_95)))
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x48404 (* ?x46046 l_0_14_181)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x48402 (* ?x46043 l_0_14_180)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x48400 (* ?x46040 l_0_14_179)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x48398 (* ?x46037 l_0_14_160)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x48396 (* ?x46034 l_0_14_159)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x48394 (* ?x46031 l_0_14_158)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x48392 (* ?x46023 l_0_14_118)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x48390 (* ?x46020 l_0_14_117)))
 (let ((?x48798 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_116) ?x48390) ?x48392) ?x48394) ?x48396)))
 (let ((?x48805 (+ (+ (+ (- (- (- (+ ?x48798 ?x48398) ?x48400) ?x48402) ?x48404) ?x48416) ?x48418) ?x48420)))
 (= ?x48805 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46046 (* 2.0 l_0_14_174)))
 (let ((?x48475 (* ?x46046 l_0_14_186)))
 (let ((?x46043 (* 2.0 l_0_14_173)))
 (let ((?x48473 (* ?x46043 l_0_14_185)))
 (let ((?x46040 (* 2.0 l_0_14_172)))
 (let ((?x48471 (* ?x46040 l_0_14_184)))
 (let ((?x46037 (* 2.0 l_0_14_153)))
 (let ((?x48469 (* ?x46037 l_0_14_165)))
 (let ((?x46034 (* 2.0 l_0_14_152)))
 (let ((?x48467 (* ?x46034 l_0_14_164)))
 (let ((?x46031 (* 2.0 l_0_14_151)))
 (let ((?x48465 (* ?x46031 l_0_14_163)))
 (let ((?x46023 (* 2.0 l_0_14_111)))
 (let ((?x48460 (* ?x46023 l_0_14_123)))
 (let ((?x46020 (* 2.0 l_0_14_110)))
 (let ((?x48458 (* ?x46020 l_0_14_122)))
 (let ((?x46016 (* 2.0 l_0_14_109)))
 (let ((?x48456 (* ?x46016 l_0_14_121)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x48454 (* ?x46443 l_0_14_90)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x48452 (* ?x46440 l_0_14_89)))
 (let ((?x27587 (- (- (+ (+ (* (* 2.0 l_0_14_100) l_0_14_88) ?x48452) ?x48454) ?x48456) ?x48458)))
 (let ((?x48820 (- (- (- (+ (+ (+ (- ?x27587 ?x48460) ?x48465) ?x48467) ?x48469) ?x48471) ?x48473) ?x48475)))
 (= ?x48820 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46232 (* l_0_14_94 l_0_14_94)))
 (let ((?x46230 (* l_0_14_93 l_0_14_93)))
 (let ((?x46228 (* l_0_14_92 l_0_14_92)))
 (let ((?x46226 (* l_0_14_91 l_0_14_91)))
 (let ((?x46212 (* l_0_14_178 l_0_14_178)))
 (let ((?x46210 (* l_0_14_177 l_0_14_177)))
 (let ((?x46208 (* l_0_14_176 l_0_14_176)))
 (let ((?x46206 (* l_0_14_175 l_0_14_175)))
 (let ((?x46204 (* l_0_14_157 l_0_14_157)))
 (let ((?x46202 (* l_0_14_156 l_0_14_156)))
 (let ((?x46200 (* l_0_14_155 l_0_14_155)))
 (let ((?x46198 (* l_0_14_154 l_0_14_154)))
 (let ((?x46192 (* l_0_14_115 l_0_14_115)))
 (let ((?x46190 (* l_0_14_114 l_0_14_114)))
 (let ((?x27687 (- (- (* (- l_0_14_112) l_0_14_112) (* l_0_14_113 l_0_14_113)) ?x46190)))
 (let ((?x48826 (- (- (+ (+ (+ (+ (- ?x27687 ?x46192) ?x46198) ?x46200) ?x46202) ?x46204) ?x46206) ?x46208)))
 (= (+ (+ (+ (+ (- (- ?x48826 ?x46210) ?x46212) ?x46226) ?x46228) ?x46230) ?x46232) 0.0))))))))))))))))))
(assert
 (let ((?x46365 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x46362 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x46359 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x46356 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x46342 (* 2.0 l_0_14_178)))
 (let ((?x46343 (* ?x46342 l_0_14_182)))
 (let ((?x46339 (* 2.0 l_0_14_177)))
 (let ((?x46340 (* ?x46339 l_0_14_181)))
 (let ((?x46336 (* 2.0 l_0_14_176)))
 (let ((?x46337 (* ?x46336 l_0_14_180)))
 (let ((?x46333 (* 2.0 l_0_14_175)))
 (let ((?x46334 (* ?x46333 l_0_14_179)))
 (let ((?x46330 (* 2.0 l_0_14_157)))
 (let ((?x46331 (* ?x46330 l_0_14_161)))
 (let ((?x46327 (* 2.0 l_0_14_156)))
 (let ((?x46328 (* ?x46327 l_0_14_160)))
 (let ((?x46324 (* 2.0 l_0_14_155)))
 (let ((?x46325 (* ?x46324 l_0_14_159)))
 (let ((?x46321 (* 2.0 l_0_14_154)))
 (let ((?x46322 (* ?x46321 l_0_14_158)))
 (let ((?x46310 (* 2.0 l_0_14_115)))
 (let ((?x46311 (* ?x46310 l_0_14_119)))
 (let ((?x46307 (* 2.0 l_0_14_114)))
 (let ((?x46308 (* ?x46307 l_0_14_118)))
 (let ((?x46304 (* 2.0 l_0_14_113)))
 (let ((?x46305 (* ?x46304 l_0_14_117)))
 (let ((?x14402 (+ (- (- (- (* (* (- 2.0) l_0_14_112) l_0_14_116) ?x46305) ?x46308) ?x46311) ?x46322)))
 (let ((?x48841 (- (- (- (- (+ (+ (+ ?x14402 ?x46325) ?x46328) ?x46331) ?x46334) ?x46337) ?x46340) ?x46343)))
 (= (+ (+ (+ (+ ?x48841 ?x46356) ?x46359) ?x46362) ?x46365) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x46342 (* 2.0 l_0_14_178)))
 (let ((?x46487 (* ?x46342 l_0_14_187)))
 (let ((?x46339 (* 2.0 l_0_14_177)))
 (let ((?x46485 (* ?x46339 l_0_14_186)))
 (let ((?x46336 (* 2.0 l_0_14_176)))
 (let ((?x46483 (* ?x46336 l_0_14_185)))
 (let ((?x46333 (* 2.0 l_0_14_175)))
 (let ((?x46481 (* ?x46333 l_0_14_184)))
 (let ((?x46330 (* 2.0 l_0_14_157)))
 (let ((?x46479 (* ?x46330 l_0_14_166)))
 (let ((?x46327 (* 2.0 l_0_14_156)))
 (let ((?x46477 (* ?x46327 l_0_14_165)))
 (let ((?x46324 (* 2.0 l_0_14_155)))
 (let ((?x46475 (* ?x46324 l_0_14_164)))
 (let ((?x46321 (* 2.0 l_0_14_154)))
 (let ((?x46473 (* ?x46321 l_0_14_163)))
 (let ((?x46310 (* 2.0 l_0_14_115)))
 (let ((?x46457 (* ?x46310 l_0_14_124)))
 (let ((?x46307 (* 2.0 l_0_14_114)))
 (let ((?x46455 (* ?x46307 l_0_14_123)))
 (let ((?x46304 (* 2.0 l_0_14_113)))
 (let ((?x46453 (* ?x46304 l_0_14_122)))
 (let ((?x46301 (* 2.0 l_0_14_112)))
 (let ((?x46451 (* ?x46301 l_0_14_121)))
 (let ((?x46446 (* 2.0 l_0_14_103)))
 (let ((?x46447 (* ?x46446 l_0_14_94)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x46444 (* ?x46443 l_0_14_93)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x46441 (* ?x46440 l_0_14_92)))
 (let ((?x48855 (- (+ (+ (+ (* (* 2.0 l_0_14_100) l_0_14_91) ?x46441) ?x46444) ?x46447) ?x46451)))
 (let ((?x48862 (+ (+ (+ (+ (- (- (- ?x48855 ?x46453) ?x46455) ?x46457) ?x46473) ?x46475) ?x46477) ?x46479)))
 (= (- (- (- (- ?x48862 ?x46481) ?x46483) ?x46485) ?x46487) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48550 (* l_0_14_99 l_0_14_99)))
 (let ((?x48548 (* l_0_14_98 l_0_14_98)))
 (let ((?x48546 (* l_0_14_97 l_0_14_97)))
 (let ((?x48544 (* l_0_14_96 l_0_14_96)))
 (let ((?x48542 (* l_0_14_95 l_0_14_95)))
 (let ((?x48540 (* l_0_14_183 l_0_14_183)))
 (let ((?x48538 (* l_0_14_182 l_0_14_182)))
 (let ((?x48536 (* l_0_14_181 l_0_14_181)))
 (let ((?x48534 (* l_0_14_180 l_0_14_180)))
 (let ((?x48532 (* l_0_14_179 l_0_14_179)))
 (let ((?x48530 (* l_0_14_162 l_0_14_162)))
 (let ((?x48528 (* l_0_14_161 l_0_14_161)))
 (let ((?x48526 (* l_0_14_160 l_0_14_160)))
 (let ((?x48524 (* l_0_14_159 l_0_14_159)))
 (let ((?x48522 (* l_0_14_158 l_0_14_158)))
 (let ((?x48520 (* l_0_14_120 l_0_14_120)))
 (let ((?x48518 (* l_0_14_119 l_0_14_119)))
 (let ((?x48516 (* l_0_14_118 l_0_14_118)))
 (let ((?x14564 (- (- (* (- l_0_14_116) l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48516)))
 (let ((?x48872 (+ (+ (+ (+ (+ (- (- ?x14564 ?x48518) ?x48520) ?x48522) ?x48524) ?x48526) ?x48528) ?x48530)))
 (let ((?x48879 (+ (+ (- (- (- (- (- ?x48872 ?x48532) ?x48534) ?x48536) ?x48538) ?x48540) ?x48542) ?x48544)))
 (= (+ (+ (+ ?x48879 ?x48546) ?x48548) ?x48550) 0.0)))))))))))))))))))))))
(assert
 (let ((?x48630 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x48627 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x48624 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x48621 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x48618 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x48615 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x48612 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x48609 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x48606 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x48603 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x48595 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x48592 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x48589 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x48586 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x48583 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x48580 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x46446 (* 2.0 l_0_14_103)))
 (let ((?x48577 (* ?x46446 l_0_14_98)))
 (let ((?x46443 (* 2.0 l_0_14_102)))
 (let ((?x48575 (* ?x46443 l_0_14_97)))
 (let ((?x46440 (* 2.0 l_0_14_101)))
 (let ((?x27400 (* ?x46440 l_0_14_96)))
 (let ((?x27853 (+ (+ (+ (+ (* (* 2.0 l_0_14_100) l_0_14_95) ?x27400) ?x48575) ?x48577) ?x48580)))
 (let ((?x48893 (+ (+ (- (- (- (- (- ?x27853 ?x48583) ?x48586) ?x48589) ?x48592) ?x48595) ?x48603) ?x48606)))
 (let ((?x48900 (- (- (- (- (+ (+ (+ ?x48893 ?x48609) ?x48612) ?x48615) ?x48618) ?x48621) ?x48624) ?x48627)))
 (= (- ?x48900 ?x48630) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x48740 (* l_0_14_189 l_0_14_189)))
 (let ((?x48738 (* l_0_14_188 l_0_14_188)))
 (let ((?x48736 (* l_0_14_187 l_0_14_187)))
 (let ((?x48734 (* l_0_14_186 l_0_14_186)))
 (let ((?x48732 (* l_0_14_185 l_0_14_185)))
 (let ((?x48730 (* l_0_14_184 l_0_14_184)))
 (let ((?x48728 (* l_0_14_168 l_0_14_168)))
 (let ((?x48726 (* l_0_14_167 l_0_14_167)))
 (let ((?x48724 (* l_0_14_166 l_0_14_166)))
 (let ((?x48722 (* l_0_14_165 l_0_14_165)))
 (let ((?x48720 (* l_0_14_164 l_0_14_164)))
 (let ((?x48718 (* l_0_14_163 l_0_14_163)))
 (let ((?x48711 (* l_0_14_126 l_0_14_126)))
 (let ((?x48709 (* l_0_14_125 l_0_14_125)))
 (let ((?x48707 (* l_0_14_124 l_0_14_124)))
 (let ((?x48705 (* l_0_14_123 l_0_14_123)))
 (let ((?x48703 (* l_0_14_122 l_0_14_122)))
 (let ((?x48701 (* l_0_14_121 l_0_14_121)))
 (let ((?x48699 (* l_0_14_105 l_0_14_105)))
 (let ((?x48697 (* l_0_14_104 l_0_14_104)))
 (let ((?x48695 (* l_0_14_103 l_0_14_103)))
 (let ((?x48693 (* l_0_14_102 l_0_14_102)))
 (let ((?x38604 (+ (+ (* l_0_14_100 l_0_14_100) (* l_0_14_101 l_0_14_101)) ?x48693)))
 (let ((?x38561 (- (- (- (- (+ (+ (+ ?x38604 ?x48695) ?x48697) ?x48699) ?x48701) ?x48703) ?x48705) ?x48707)))
 (let ((?x38559 (+ (+ (+ (+ (+ (- (- ?x38561 ?x48709) ?x48711) ?x48718) ?x48720) ?x48722) ?x48724) ?x48726)))
 (let ((?x48906 (- (- (- (- (- (- (+ ?x38559 ?x48728) ?x48730) ?x48732) ?x48734) ?x48736) ?x48738) ?x48740)))
 (= ?x48906 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x47478 (* l_0_14_147 l_0_14_147)))
 (let ((?x47476 (* l_0_14_146 l_0_14_146)))
 (let ((?x47474 (* l_0_14_145 l_0_14_145)))
 (let ((?x10980 (* l_0_14_144 l_0_14_144)))
 (let ((?x38755 (- (- (* (- l_0_14_142) l_0_14_142) (* l_0_14_143 l_0_14_143)) ?x10980)))
 (= (- (- (- ?x38755 ?x47474) ?x47476) ?x47478) 0.0)))))))
(assert
 (>= l_0_14_1 0.0))
(assert
 (>= l_0_14_3 0.0))
(assert
 (>= l_0_14_6 0.0))
(assert
 (>= l_0_14_10 0.0))
(assert
 (>= l_0_14_15 0.0))
(assert
 (>= l_0_14_21 0.0))
(assert
 (>= l_0_14_22 0.0))
(assert
 (>= l_0_14_24 0.0))
(assert
 (>= l_0_14_27 0.0))
(assert
 (>= l_0_14_31 0.0))
(assert
 (>= l_0_14_36 0.0))
(assert
 (>= l_0_14_42 0.0))
(assert
 (>= l_0_14_43 0.0))
(assert
 (>= l_0_14_45 0.0))
(assert
 (>= l_0_14_48 0.0))
(assert
 (>= l_0_14_52 0.0))
(assert
 (>= l_0_14_57 0.0))
(assert
 (>= l_0_14_63 0.0))
(assert
 (>= l_0_14_64 0.0))
(assert
 (>= l_0_14_66 0.0))
(assert
 (>= l_0_14_69 0.0))
(assert
 (>= l_0_14_73 0.0))
(assert
 (>= l_0_14_78 0.0))
(assert
 (>= l_0_14_84 0.0))
(assert
 (>= l_0_14_85 0.0))
(assert
 (>= l_0_14_87 0.0))
(assert
 (>= l_0_14_90 0.0))
(assert
 (>= l_0_14_94 0.0))
(assert
 (>= l_0_14_99 0.0))
(assert
 (>= l_0_14_105 0.0))
(assert
 (>= l_0_14_106 0.0))
(assert
 (>= l_0_14_108 0.0))
(assert
 (>= l_0_14_111 0.0))
(assert
 (>= l_0_14_115 0.0))
(assert
 (>= l_0_14_120 0.0))
(assert
 (>= l_0_14_126 0.0))
(assert
 (>= l_0_14_127 0.0))
(assert
 (>= l_0_14_129 0.0))
(assert
 (>= l_0_14_132 0.0))
(assert
 (>= l_0_14_136 0.0))
(assert
 (>= l_0_14_141 0.0))
(assert
 (>= l_0_14_147 0.0))
(assert
 (>= l_0_14_148 0.0))
(assert
 (>= l_0_14_150 0.0))
(assert
 (>= l_0_14_153 0.0))
(assert
 (>= l_0_14_157 0.0))
(assert
 (>= l_0_14_162 0.0))
(assert
 (>= l_0_14_168 0.0))
(assert
 (>= l_0_14_169 0.0))
(assert
 (>= l_0_14_171 0.0))
(assert
 (>= l_0_14_174 0.0))
(assert
 (>= l_0_14_178 0.0))
(assert
 (>= l_0_14_183 0.0))
(assert
 (>= l_0_14_189 0.0))
(assert
 (>= l_0_14_190 0.0))
(assert
 (>= l_0_14_192 0.0))
(assert
 (>= l_0_14_195 0.0))
(assert
 (>= l_0_14_199 0.0))
(assert
 (>= l_0_14_204 0.0))
(assert
 (>= l_0_14_210 0.0))
(assert
 (>= l_0_14_211 0.0))
(assert
 (>= l_0_14_213 0.0))
(assert
 (>= l_0_14_216 0.0))
(assert
 (>= l_0_14_220 0.0))
(assert
 (>= l_0_14_225 0.0))
(assert
 (>= l_0_14_231 0.0))
(assert
 (let ((?x48994 (* l_0_15_66 l_0_15_66)))
 (let ((?x48995 (* 3.0 ?x48994)))
 (let ((?x48991 (* l_0_15_65 l_0_15_65)))
 (let ((?x48992 (* 3.0 ?x48991)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x48986 (* ?x48985 l_0_15_65)))
 (let ((?x48983 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (let ((?x48980 (* (* 3.0 l_0_15_44) l_0_15_44)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x48974 (* ?x48973 l_0_15_44)))
 (let ((?x48971 (* l_0_15_232 l_0_15_232)))
 (let ((?x48969 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x48966 (* ?x48965 l_0_15_23)))
 (let ((?x48963 (* l_0_15_211 l_0_15_211)))
 (let ((?x48961 (* l_0_15_190 l_0_15_190)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x48959 (* ?x48958 l_0_15_128)))
 (let ((?x48955 (* l_0_15_1 l_0_15_1)))
 (let ((?x48956 (* 6.0 ?x48955)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x48954 (* ?x48953 l_0_15_2)))
 (let ((?x48972 (- (- (- (- (- (+ (+ ?x48954 ?x48956) ?x48959) ?x48961) ?x48963) ?x48966) ?x48969) ?x48971)))
 (let ((?x48984 (- (- (- (- ?x48972 ?x48974) (* (* 1.0 l_0_15_43) l_0_15_43)) ?x48980) ?x48983)))
 (let ((?x48996 (+ (+ (+ (+ ?x48984 ?x48986) (* 1.0 (* l_0_15_64 l_0_15_64))) ?x48992) ?x48995)))
 (= (+ ?x48996 3.0) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x48994 (* l_0_15_66 l_0_15_66)))
 (let ((?x48995 (* 3.0 ?x48994)))
 (let ((?x48991 (* l_0_15_65 l_0_15_65)))
 (let ((?x48992 (* 3.0 ?x48991)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x49065 (* ?x49064 l_0_15_65)))
 (let ((?x48983 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (let ((?x48980 (* (* 3.0 l_0_15_44) l_0_15_44)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x49060 (* ?x49059 l_0_15_44)))
 (let ((?x49056 (* l_0_15_3 l_0_15_3)))
 (let ((?x49057 (* 6.0 ?x49056)))
 (let ((?x49054 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x49048 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x48966 (* ?x48965 l_0_15_23)))
 (let ((?x49040 (* l_0_15_2 l_0_15_2)))
 (let ((?x49041 (* 6.0 ?x49040)))
 (let ((?x49035 (* l_0_15_129 l_0_15_129)))
 (let ((?x49036 (+ (+ (* (* 12.0 l_0_15_1) l_0_15_2) (* l_0_15_128 l_0_15_128)) ?x49035)))
 (let ((?x49045 (- (+ (- ?x49036 (* (* 2.0 l_0_15_190) l_0_15_191)) ?x49041) (* (* 2.0 l_0_15_211) l_0_15_212))))
 (let ((?x49055 (- (- (- (- ?x49045 ?x48966) ?x49048) (* (* 2.0 l_0_15_232) l_0_15_233)) ?x49054)))
 (let ((?x49068 (+ (+ (+ (- (- (- (+ ?x49055 ?x49057) ?x49060) ?x48980) ?x48983) ?x49065) ?x48992) ?x48995)))
 (= (+ ?x49068 9.0) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x49056 (* l_0_15_3 l_0_15_3)))
 (let ((?x49057 (* 6.0 ?x49056)))
 (let ((?x49054 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x49106 (* l_0_15_234 l_0_15_234)))
 (let ((?x49104 (* l_0_15_233 l_0_15_233)))
 (let ((?x49048 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x49101 (* l_0_15_213 l_0_15_213)))
 (let ((?x49099 (* l_0_15_212 l_0_15_212)))
 (let ((?x49040 (* l_0_15_2 l_0_15_2)))
 (let ((?x49041 (* 6.0 ?x49040)))
 (let ((?x49096 (* l_0_15_192 l_0_15_192)))
 (let ((?x49100 (- (+ (- (- (- _a_6_) (* l_0_15_191 l_0_15_191)) ?x49096) ?x49041) ?x49099)))
 (let ((?x49112 (- (+ (- (- (- (- (- ?x49100 ?x49101) ?x49048) ?x49104) ?x49106) ?x49054) ?x49057) (* (* 1.0 l_0_15_44) l_0_15_44))))
 (let ((?x49117 (+ (- ?x49112 (* (* 1.0 l_0_15_45) l_0_15_45)) (* 1.0 (* l_0_15_65 l_0_15_65)))))
 (= (+ (+ ?x49117 (* 1.0 (* l_0_15_66 l_0_15_66))) 7.0) 0.0))))))))))))))))
(assert
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x49212 (* ?x49211 l_0_15_72)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x49209 (* ?x49208 l_0_15_71)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x49206 (* ?x49205 l_0_15_70)))
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x49203 (* ?x49202 l_0_15_71)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x49200 (* ?x49199 l_0_15_70)))
 (let ((?x49197 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x49194 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x49191 (* ?x49190 l_0_15_51)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x49188 (* ?x49187 l_0_15_50)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x49185 (* ?x49184 l_0_15_49)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x49182 (* ?x49181 l_0_15_50)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x49179 (* ?x49178 l_0_15_49)))
 (let ((?x49176 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x49170 (* ?x49169 l_0_15_30)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x49167 (* ?x49166 l_0_15_29)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x49164 (* ?x49163 l_0_15_28)))
 (let ((?x49132 (- (- (- _a_7_) (* (* 2.0 l_0_15_193) l_0_15_196)) (* (* 2.0 l_0_15_194) l_0_15_197))))
 (let ((?x49138 (- (- ?x49132 (* (* 2.0 l_0_15_195) l_0_15_198)) (* (* 2.0 l_0_15_2) l_0_15_4))))
 (let ((?x49144 (- (- ?x49138 (* (* 2.0 l_0_15_214) l_0_15_217)) (* (* 2.0 l_0_15_215) l_0_15_218))))
 (let ((?x49150 (+ (- ?x49144 (* (* 2.0 l_0_15_216) l_0_15_219)) (* (* 2.0 l_0_15_23) l_0_15_25))))
 (let ((?x49156 (- (- ?x49150 (* (* 2.0 l_0_15_235) l_0_15_238)) (* (* 2.0 l_0_15_236) l_0_15_239))))
 (let ((?x49162 (+ (- ?x49156 (* (* 2.0 l_0_15_237) l_0_15_240)) (* (* 2.0 l_0_15_24) l_0_15_26))))
 (let ((?x49174 (- (- (- (- ?x49162 ?x49164) ?x49167) ?x49170) (* (* 2.0 l_0_15_3) l_0_15_5))))
 (let ((?x49195 (+ (- (- (- (+ (+ (+ ?x49174 ?x49176) ?x49179) ?x49182) ?x49185) ?x49188) ?x49191) ?x49194)))
 (= (+ (+ (+ (- (- (+ ?x49195 ?x49197) ?x49200) ?x49203) ?x49206) ?x49209) ?x49212) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x49203 (* ?x49202 l_0_15_71)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x49200 (* ?x49199 l_0_15_70)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x49182 (* ?x49181 l_0_15_50)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x49179 (* ?x49178 l_0_15_49)))
 (let ((?x49056 (* l_0_15_3 l_0_15_3)))
 (let ((?x49325 (* 12.0 l_0_15_3)))
 (let ((?x49326 (* ?x49325 l_0_15_8)))
 (let ((?x28410 (* l_0_15_24 l_0_15_24)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x49322 (* ?x49321 l_0_15_29)))
 (let ((?x28402 (* l_0_15_23 l_0_15_23)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x49312 (* ?x49311 l_0_15_28)))
 (let ((?x49040 (* l_0_15_2 l_0_15_2)))
 (let ((?x49301 (* 12.0 l_0_15_2)))
 (let ((?x49302 (* ?x49301 l_0_15_7)))
 (let ((?x49300 (- (- (- _a_8_) (* (* 2.0 l_0_15_191) l_0_15_196)) (* (* 2.0 l_0_15_192) l_0_15_197))))
 (let ((?x49310 (- (- (- (+ ?x49300 ?x49302) ?x49040) (* (* 2.0 l_0_15_212) l_0_15_217)) (* (* 2.0 l_0_15_213) l_0_15_218))))
 (let ((?x49320 (- (- (+ (- ?x49310 ?x49312) ?x28402) (* (* 2.0 l_0_15_233) l_0_15_238)) (* (* 2.0 l_0_15_234) l_0_15_239))))
 (let ((?x49331 (+ (- (- (- (+ (+ (- ?x49320 ?x49322) ?x28410) ?x49326) ?x49056) ?x49179) ?x49182) ?x49200)))
 (= (+ ?x49331 ?x49203) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x49408 (* ?x49202 l_0_15_68)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x49406 (* ?x49199 l_0_15_67)))
 (let ((?x49403 (* l_0_15_6 l_0_15_6)))
 (let ((?x49404 (* 6.0 ?x49403)))
 (let ((?x49400 (* l_0_15_5 l_0_15_5)))
 (let ((?x49401 (* 6.0 ?x49400)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x49389 (* ?x49181 l_0_15_47)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x49387 (* ?x49178 l_0_15_46)))
 (let ((?x49384 (* l_0_15_4 l_0_15_4)))
 (let ((?x49385 (* 6.0 ?x49384)))
 (let ((?x49382 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x49379 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x49376 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x49373 (* l_0_15_237 l_0_15_237)))
 (let ((?x49371 (* l_0_15_236 l_0_15_236)))
 (let ((?x49369 (* l_0_15_235 l_0_15_235)))
 (let ((?x49367 (* l_0_15_216 l_0_15_216)))
 (let ((?x49365 (* l_0_15_215 l_0_15_215)))
 (let ((?x49363 (* l_0_15_214 l_0_15_214)))
 (let ((?x49361 (* l_0_15_195 l_0_15_195)))
 (let ((?x39030 (* l_0_15_194 l_0_15_194)))
 (let ((?x49364 (- (- (- (- (- _a_9_) (* l_0_15_193 l_0_15_193)) ?x39030) ?x49361) ?x49363)))
 (let ((?x49380 (- (- (- (- (- (- (- ?x49364 ?x49365) ?x49367) ?x49369) ?x49371) ?x49373) ?x49376) ?x49379)))
 (let ((?x49393 (- (+ (+ (+ (- ?x49380 ?x49382) ?x49385) ?x49387) ?x49389) (* (* 1.0 l_0_15_46) l_0_15_46))))
 (let ((?x49399 (- (- ?x49393 (* (* 1.0 l_0_15_47) l_0_15_47)) (* (* 1.0 l_0_15_48) l_0_15_48))))
 (let ((?x49412 (+ (- (- (+ (+ ?x49399 ?x49401) ?x49404) ?x49406) ?x49408) (* 1.0 (* l_0_15_67 l_0_15_67)))))
 (let ((?x49418 (+ (+ ?x49412 (* 1.0 (* l_0_15_68 l_0_15_68))) (* 1.0 (* l_0_15_69 l_0_15_69)))))
 (= ?x49418 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x49544 (* l_0_15_9 l_0_15_9)))
 (let ((?x49545 (* 6.0 ?x49544)))
 (let ((?x49541 (* l_0_15_8 l_0_15_8)))
 (let ((?x49542 (* 6.0 ?x49541)))
 (let ((?x49526 (* l_0_15_7 l_0_15_7)))
 (let ((?x49527 (* 6.0 ?x49526)))
 (let ((?x49512 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x49509 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x49504 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x49501 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x49498 (* l_0_15_241 l_0_15_241)))
 (let ((?x49496 (* l_0_15_240 l_0_15_240)))
 (let ((?x49492 (* l_0_15_239 l_0_15_239)))
 (let ((?x49490 (* l_0_15_238 l_0_15_238)))
 (let ((?x49486 (* l_0_15_220 l_0_15_220)))
 (let ((?x49484 (* l_0_15_219 l_0_15_219)))
 (let ((?x49482 (* l_0_15_218 l_0_15_218)))
 (let ((?x49480 (* l_0_15_217 l_0_15_217)))
 (let ((?x49476 (* l_0_15_199 l_0_15_199)))
 (let ((?x49474 (* l_0_15_198 l_0_15_198)))
 (let ((?x49472 (* l_0_15_197 l_0_15_197)))
 (let ((?x49470 (* l_0_15_196 l_0_15_196)))
 (let ((?x49473 (- (- (+ (- _a_10_) (* 6.0 (* l_0_15_10 l_0_15_10))) ?x49470) ?x49472)))
 (let ((?x49481 (- (- (- (- ?x49473 ?x49474) ?x49476) (* (* 2.0 l_0_15_2) l_0_15_7)) ?x49480)))
 (let ((?x49489 (+ (- (- (- ?x49481 ?x49482) ?x49484) ?x49486) (* (* 2.0 l_0_15_23) l_0_15_28))))
 (let ((?x49497 (- (+ (- (- ?x49489 ?x49490) ?x49492) (* (* 2.0 l_0_15_24) l_0_15_29)) ?x49496)))
 (let ((?x49507 (- (- (- (- ?x49497 ?x49498) ?x49501) ?x49504) (* (* 2.0 l_0_15_3) l_0_15_8))))
 (let ((?x49519 (- (- (- (- ?x49507 ?x49509) ?x49512) (* (* 1.0 l_0_15_49) l_0_15_49)) (* (* 1.0 l_0_15_50) l_0_15_50))))
 (let ((?x49525 (- (- ?x49519 (* (* 1.0 l_0_15_51) l_0_15_51)) (* (* 1.0 l_0_15_52) l_0_15_52))))
 (let ((?x49534 (+ (+ (+ ?x49525 ?x49527) (* 1.0 (* l_0_15_70 l_0_15_70))) (* 1.0 (* l_0_15_71 l_0_15_71)))))
 (let ((?x49540 (+ (+ ?x49534 (* 1.0 (* l_0_15_72 l_0_15_72))) (* 1.0 (* l_0_15_73 l_0_15_73)))))
 (= (+ (+ ?x49540 ?x49542) ?x49545) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x48994 (* l_0_15_66 l_0_15_66)))
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x49408 (* ?x49202 l_0_15_68)))
 (let ((?x48991 (* l_0_15_65 l_0_15_65)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x49406 (* ?x49199 l_0_15_67)))
 (let ((?x28345 (* l_0_15_45 l_0_15_45)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x49389 (* ?x49181 l_0_15_47)))
 (let ((?x49023 (* l_0_15_44 l_0_15_44)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x49387 (* ?x49178 l_0_15_46)))
 (let ((?x49325 (* 12.0 l_0_15_3)))
 (let ((?x49612 (* ?x49325 l_0_15_5)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x49610 (* ?x49321 l_0_15_26)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x49604 (* ?x49311 l_0_15_25)))
 (let ((?x49301 (* 12.0 l_0_15_2)))
 (let ((?x49598 (* ?x49301 l_0_15_4)))
 (let ((?x49597 (- (- (- _a_11_) (* (* 2.0 l_0_15_191) l_0_15_193)) (* (* 2.0 l_0_15_192) l_0_15_194))))
 (let ((?x49603 (- (- (+ ?x49597 ?x49598) (* (* 2.0 l_0_15_212) l_0_15_214)) (* (* 2.0 l_0_15_213) l_0_15_215))))
 (let ((?x49609 (- (- (- ?x49603 ?x49604) (* (* 2.0 l_0_15_233) l_0_15_235)) (* (* 2.0 l_0_15_234) l_0_15_236))))
 (let ((?x49618 (+ (+ (- (+ (- (+ (- ?x49609 ?x49610) ?x49612) ?x49387) ?x49023) ?x49389) ?x28345) ?x49406)))
 (= (- (+ (- ?x49618 ?x48991) ?x49408) ?x48994) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x49679 (* ?x49678 l_0_15_71)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x49676 (* ?x49675 l_0_15_70)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x49673 (* ?x48985 l_0_15_70)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x49671 (* ?x49670 l_0_15_50)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x49668 (* ?x49667 l_0_15_49)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x49665 (* ?x48973 l_0_15_49)))
 (let ((?x38611 (* l_0_15_22 l_0_15_22)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x49662 (* ?x48965 l_0_15_28)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x49660 (* ?x48958 l_0_15_133)))
 (let ((?x49661 (+ (- (* (* 12.0 l_0_15_1) l_0_15_7) (* l_0_15_1 l_0_15_1)) ?x49660)))
 (let ((?x49677 (+ (+ (- (- (- (+ (- ?x49661 ?x49662) ?x38611) ?x49665) ?x49668) ?x49671) ?x49673) ?x49676)))
 (= (+ ?x49677 ?x49679) 0.0)))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x49679 (* ?x49678 l_0_15_71)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x49676 (* ?x49675 l_0_15_70)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x49737 (* ?x49064 l_0_15_70)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x49671 (* ?x49670 l_0_15_50)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x49668 (* ?x49667 l_0_15_49)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x49733 (* ?x49059 l_0_15_49)))
 (let ((?x49325 (* 12.0 l_0_15_3)))
 (let ((?x49326 (* ?x49325 l_0_15_8)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x49322 (* ?x49321 l_0_15_29)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x49312 (* ?x49311 l_0_15_28)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x49662 (* ?x48965 l_0_15_28)))
 (let ((?x49301 (* 12.0 l_0_15_2)))
 (let ((?x49302 (* ?x49301 l_0_15_7)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x49717 (* ?x49716 l_0_15_134)))
 (let ((?x49705 (* 2.0 l_0_15_128)))
 (let ((?x49714 (* ?x49705 l_0_15_133)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x49658 (* ?x48953 l_0_15_7)))
 (let ((?x49720 (- (+ (+ (+ (* (* (- 2.0) l_0_15_1) l_0_15_2) ?x49658) ?x49714) ?x49717) (* (* 2.0 l_0_15_190) l_0_15_196))))
 (let ((?x49726 (+ (- (+ ?x49720 ?x49302) (* (* 2.0 l_0_15_211) l_0_15_217)) (* (* 2.0 l_0_15_22) l_0_15_23))))
 (let ((?x49731 (- (- (- (- ?x49726 ?x49662) ?x49312) (* (* 2.0 l_0_15_232) l_0_15_238)) ?x49322)))
 (let ((?x49740 (+ (+ (+ (- (- (- (+ ?x49731 ?x49326) ?x49733) ?x49668) ?x49671) ?x49737) ?x49676) ?x49679)))
 (= ?x49740 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x49786 (* ?x49785 l_0_15_72)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x49783 (* ?x49782 l_0_15_71)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x49780 (* ?x49779 l_0_15_70)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x49737 (* ?x49064 l_0_15_70)))
 (let ((?x49197 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x49194 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x49774 (* ?x49773 l_0_15_51)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x49771 (* ?x49770 l_0_15_50)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x49733 (* ?x49059 l_0_15_49)))
 (let ((?x49176 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x49170 (* ?x49169 l_0_15_30)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x49167 (* ?x49166 l_0_15_29)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x49164 (* ?x49163 l_0_15_28)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x49758 (* ?x49757 l_0_15_135)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x49755 (* ?x49754 l_0_15_134)))
 (let ((?x49753 (+ (* (* (- 2.0) l_0_15_1) l_0_15_4) (* (* 2.0 l_0_15_130) l_0_15_133))))
 (let ((?x49762 (- (+ (+ (+ ?x49753 ?x49755) ?x49758) (* (* 2.0 l_0_15_22) l_0_15_25)) ?x49164)))
 (let ((?x49769 (- (+ (+ (- (- ?x49762 ?x49167) ?x49170) ?x49176) ?x49733) (* (* 6.0 l_0_15_46) l_0_15_49))))
 (let ((?x49784 (+ (+ (- (+ (+ (- (- ?x49769 ?x49771) ?x49774) ?x49194) ?x49197) ?x49737) ?x49780) ?x49783)))
 (= (+ ?x49784 ?x49786) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x49544 (* l_0_15_9 l_0_15_9)))
 (let ((?x49545 (* 6.0 ?x49544)))
 (let ((?x49541 (* l_0_15_8 l_0_15_8)))
 (let ((?x49542 (* 6.0 ?x49541)))
 (let ((?x49538 (* l_0_15_73 l_0_15_73)))
 (let ((?x49847 (* 3.0 ?x49538)))
 (let ((?x49535 (* l_0_15_72 l_0_15_72)))
 (let ((?x49845 (* 3.0 ?x49535)))
 (let ((?x49532 (* l_0_15_71 l_0_15_71)))
 (let ((?x49843 (* 3.0 ?x49532)))
 (let ((?x49529 (* l_0_15_70 l_0_15_70)))
 (let ((?x49841 (* 3.0 ?x49529)))
 (let ((?x49526 (* l_0_15_7 l_0_15_7)))
 (let ((?x49527 (* 6.0 ?x49526)))
 (let ((?x49838 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x49835 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x49832 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x49512 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x49509 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x49504 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x49501 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x49820 (* l_0_15_136 l_0_15_136)))
 (let ((?x49818 (* l_0_15_135 l_0_15_135)))
 (let ((?x49816 (* l_0_15_134 l_0_15_134)))
 (let ((?x49814 (* l_0_15_133 l_0_15_133)))
 (let ((?x39105 (* l_0_15_10 l_0_15_10)))
 (let ((?x49468 (* 6.0 ?x39105)))
 (let ((?x49819 (+ (+ (+ (+ (* (* (- 2.0) l_0_15_1) l_0_15_7) ?x49468) ?x49814) ?x49816) ?x49818)))
 (let ((?x49825 (- (- (+ (+ ?x49819 ?x49820) (* (* 2.0 l_0_15_22) l_0_15_28)) ?x49501) ?x49504)))
 (let ((?x49833 (- (- (- (- ?x49825 ?x49509) ?x49512) (* (* 3.0 l_0_15_49) l_0_15_49)) ?x49832)))
 (let ((?x49848 (+ (+ (+ (+ (+ (- (- ?x49833 ?x49835) ?x49838) ?x49527) ?x49841) ?x49843) ?x49845) ?x49847)))
 (= (+ (+ ?x49848 ?x49542) ?x49545) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x49932 (* ?x49931 l_0_15_91)))
 (let ((?x49928 (* 6.0 l_0_15_73)))
 (let ((?x49929 (* ?x49928 l_0_15_77)))
 (let ((?x49925 (* 6.0 l_0_15_72)))
 (let ((?x49926 (* ?x49925 l_0_15_76)))
 (let ((?x49922 (* 6.0 l_0_15_71)))
 (let ((?x49923 (* ?x49922 l_0_15_75)))
 (let ((?x49919 (* 6.0 l_0_15_70)))
 (let ((?x49920 (* ?x49919 l_0_15_74)))
 (let ((?x49916 (* 6.0 l_0_15_52)))
 (let ((?x49917 (* ?x49916 l_0_15_56)))
 (let ((?x49913 (* 6.0 l_0_15_51)))
 (let ((?x49914 (* ?x49913 l_0_15_55)))
 (let ((?x49910 (* 6.0 l_0_15_50)))
 (let ((?x49911 (* ?x49910 l_0_15_54)))
 (let ((?x49904 (* 12.0 l_0_15_31)))
 (let ((?x49905 (* ?x49904 l_0_15_35)))
 (let ((?x49901 (* 12.0 l_0_15_30)))
 (let ((?x49902 (* ?x49901 l_0_15_34)))
 (let ((?x49898 (* 12.0 l_0_15_29)))
 (let ((?x49899 (* ?x49898 l_0_15_33)))
 (let ((?x49895 (* 12.0 l_0_15_28)))
 (let ((?x49896 (* ?x49895 l_0_15_32)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x49891 (* ?x49890 l_0_15_175)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x49888 (* ?x49887 l_0_15_154)))
 (let ((?x49884 (* 2.0 l_0_15_136)))
 (let ((?x49885 (* ?x49884 l_0_15_140)))
 (let ((?x49881 (* 2.0 l_0_15_135)))
 (let ((?x49882 (* ?x49881 l_0_15_139)))
 (let ((?x49878 (* 2.0 l_0_15_134)))
 (let ((?x49879 (* ?x49878 l_0_15_138)))
 (let ((?x49875 (* 2.0 l_0_15_133)))
 (let ((?x49876 (* ?x49875 l_0_15_137)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x49873 (* ?x49872 l_0_15_9)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x49870 (* ?x49869 l_0_15_8)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x49867 (* ?x49866 l_0_15_7)))
 (let ((?x49860 (* 12.0 l_0_15_10)))
 (let ((?x49861 (* ?x49860 l_0_15_14)))
 (let ((?x49865 (+ (+ (* (* (- 2.0) l_0_15_1) l_0_15_11) ?x49861) (* (* 2.0 l_0_15_106) l_0_15_112))))
 (let ((?x49886 (+ (+ (+ (+ (+ (+ (+ ?x49865 ?x49867) ?x49870) ?x49873) ?x49876) ?x49879) ?x49882) ?x49885)))
 (let ((?x49897 (- (+ (+ (- ?x49886 ?x49888) ?x49891) (* (* 2.0 l_0_15_22) l_0_15_32)) ?x49896)))
 (let ((?x49909 (- (- (- (- ?x49897 ?x49899) ?x49902) ?x49905) (* (* 6.0 l_0_15_49) l_0_15_53))))
 (let ((?x49930 (+ (+ (+ (+ (- (- (- ?x49909 ?x49911) ?x49914) ?x49917) ?x49920) ?x49923) ?x49926) ?x49929)))
 (= (- ?x49930 ?x49932) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49928 (* 6.0 l_0_15_73)))
 (let ((?x50042 (* ?x49928 l_0_15_82)))
 (let ((?x49925 (* 6.0 l_0_15_72)))
 (let ((?x50040 (* ?x49925 l_0_15_81)))
 (let ((?x49922 (* 6.0 l_0_15_71)))
 (let ((?x50038 (* ?x49922 l_0_15_80)))
 (let ((?x49919 (* 6.0 l_0_15_70)))
 (let ((?x50036 (* ?x49919 l_0_15_79)))
 (let ((?x49916 (* 6.0 l_0_15_52)))
 (let ((?x50034 (* ?x49916 l_0_15_61)))
 (let ((?x49913 (* 6.0 l_0_15_51)))
 (let ((?x50032 (* ?x49913 l_0_15_60)))
 (let ((?x49910 (* 6.0 l_0_15_50)))
 (let ((?x50030 (* ?x49910 l_0_15_59)))
 (let ((?x49904 (* 12.0 l_0_15_31)))
 (let ((?x50026 (* ?x49904 l_0_15_40)))
 (let ((?x49901 (* 12.0 l_0_15_30)))
 (let ((?x50024 (* ?x49901 l_0_15_39)))
 (let ((?x49898 (* 12.0 l_0_15_29)))
 (let ((?x50022 (* ?x49898 l_0_15_38)))
 (let ((?x49895 (* 12.0 l_0_15_28)))
 (let ((?x50020 (* ?x49895 l_0_15_37)))
 (let ((?x50015 (* 12.0 l_0_15_18)))
 (let ((?x50016 (* ?x50015 l_0_15_9)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x50013 (* ?x50012 l_0_15_8)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x50010 (* ?x50009 l_0_15_7)))
 (let ((?x49884 (* 2.0 l_0_15_136)))
 (let ((?x50007 (* ?x49884 l_0_15_145)))
 (let ((?x49881 (* 2.0 l_0_15_135)))
 (let ((?x50005 (* ?x49881 l_0_15_144)))
 (let ((?x49878 (* 2.0 l_0_15_134)))
 (let ((?x50003 (* ?x49878 l_0_15_143)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x49660 (* ?x48958 l_0_15_133)))
 (let ((?x49860 (* 12.0 l_0_15_10)))
 (let ((?x49998 (* ?x49860 l_0_15_19)))
 (let ((?x50002 (+ (- (+ (* (* (- 2.0) l_0_15_1) l_0_15_16) ?x49998) ?x49660) (* (* 2.0 l_0_15_133) l_0_15_142))))
 (let ((?x50019 (+ (+ (+ (+ (+ (+ (+ ?x50002 ?x50003) ?x50005) ?x50007) ?x50010) ?x50013) ?x50016) (* (* 2.0 l_0_15_22) l_0_15_37))))
 (let ((?x50029 (- (- (- (- (- ?x50019 ?x50020) ?x50022) ?x50024) ?x50026) (* (* 6.0 l_0_15_49) l_0_15_58))))
 (let ((?x50043 (+ (+ (+ (+ (- (- (- ?x50029 ?x50030) ?x50032) ?x50034) ?x50036) ?x50038) ?x50040) ?x50042)))
 (= ?x50043 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x50190 (* ?x50189 l_0_15_92)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x50187 (* ?x50186 l_0_15_91)))
 (let ((?x50183 (* 2.0 l_0_15_73)))
 (let ((?x50184 (* ?x50183 l_0_15_77)))
 (let ((?x50180 (* 2.0 l_0_15_72)))
 (let ((?x50181 (* ?x50180 l_0_15_76)))
 (let ((?x50177 (* 2.0 l_0_15_71)))
 (let ((?x50178 (* ?x50177 l_0_15_75)))
 (let ((?x50174 (* 2.0 l_0_15_70)))
 (let ((?x50175 (* ?x50174 l_0_15_74)))
 (let ((?x50171 (* 2.0 l_0_15_52)))
 (let ((?x50172 (* ?x50171 l_0_15_56)))
 (let ((?x50168 (* 2.0 l_0_15_51)))
 (let ((?x50169 (* ?x50168 l_0_15_55)))
 (let ((?x50165 (* 2.0 l_0_15_50)))
 (let ((?x50166 (* ?x50165 l_0_15_54)))
 (let ((?x50162 (* 2.0 l_0_15_49)))
 (let ((?x50163 (* ?x50162 l_0_15_53)))
 (let ((?x49904 (* 12.0 l_0_15_31)))
 (let ((?x49905 (* ?x49904 l_0_15_35)))
 (let ((?x49901 (* 12.0 l_0_15_30)))
 (let ((?x49902 (* ?x49901 l_0_15_34)))
 (let ((?x49898 (* 12.0 l_0_15_29)))
 (let ((?x49899 (* ?x49898 l_0_15_33)))
 (let ((?x49895 (* 12.0 l_0_15_28)))
 (let ((?x49896 (* ?x49895 l_0_15_32)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x50116 (* ?x50115 l_0_15_176)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x50113 (* ?x50112 l_0_15_175)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x50110 (* ?x50109 l_0_15_155)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x50107 (* ?x50106 l_0_15_154)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x49873 (* ?x49872 l_0_15_9)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x49870 (* ?x49869 l_0_15_8)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x49867 (* ?x49866 l_0_15_7)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x50079 (* ?x50078 l_0_15_113)))
 (let ((?x49860 (* 12.0 l_0_15_10)))
 (let ((?x49861 (* ?x49860 l_0_15_14)))
 (let ((?x50099 (- (+ (+ ?x49861 (* (* 2.0 l_0_15_107) l_0_15_112)) ?x50079) (* (* 2.0 l_0_15_11) l_0_15_2))))
 (let ((?x50105 (+ (+ (- (+ ?x50099 ?x49867) (* (* 2.0 l_0_15_12) l_0_15_3)) ?x49870) ?x49873)))
 (let ((?x50120 (- (+ (+ (- (- ?x50105 ?x50107) ?x50110) ?x50113) ?x50116) (* (* 2.0 l_0_15_196) l_0_15_200))))
 (let ((?x50126 (- (- ?x50120 (* (* 2.0 l_0_15_197) l_0_15_201)) (* (* 2.0 l_0_15_198) l_0_15_202))))
 (let ((?x50132 (- (- ?x50126 (* (* 2.0 l_0_15_199) l_0_15_203)) (* (* 2.0 l_0_15_217) l_0_15_221))))
 (let ((?x50138 (- (- ?x50132 (* (* 2.0 l_0_15_218) l_0_15_222)) (* (* 2.0 l_0_15_219) l_0_15_223))))
 (let ((?x50143 (+ (- ?x50138 (* (* 2.0 l_0_15_220) l_0_15_224)) (* (* 2.0 l_0_15_23) l_0_15_32))))
 (let ((?x50149 (- (- ?x50143 (* (* 2.0 l_0_15_238) l_0_15_242)) (* (* 2.0 l_0_15_239) l_0_15_243))))
 (let ((?x50154 (- (+ ?x50149 (* (* 2.0 l_0_15_24) l_0_15_33)) (* (* 2.0 l_0_15_240) l_0_15_244))))
 (let ((?x50160 (- (- (- (- ?x50154 (* (* 2.0 l_0_15_241) l_0_15_245)) ?x49896) ?x49899) ?x49902)))
 (let ((?x50179 (+ (+ (- (- (- (- (- ?x50160 ?x49905) ?x50163) ?x50166) ?x50169) ?x50172) ?x50175) ?x50178)))
 (= (- (- (+ (+ ?x50179 ?x50181) ?x50184) ?x50187) ?x50190) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50183 (* 2.0 l_0_15_73)))
 (let ((?x50341 (* ?x50183 l_0_15_82)))
 (let ((?x50180 (* 2.0 l_0_15_72)))
 (let ((?x50339 (* ?x50180 l_0_15_81)))
 (let ((?x50177 (* 2.0 l_0_15_71)))
 (let ((?x50337 (* ?x50177 l_0_15_80)))
 (let ((?x50174 (* 2.0 l_0_15_70)))
 (let ((?x50335 (* ?x50174 l_0_15_79)))
 (let ((?x50171 (* 2.0 l_0_15_52)))
 (let ((?x50333 (* ?x50171 l_0_15_61)))
 (let ((?x50168 (* 2.0 l_0_15_51)))
 (let ((?x50331 (* ?x50168 l_0_15_60)))
 (let ((?x50165 (* 2.0 l_0_15_50)))
 (let ((?x50329 (* ?x50165 l_0_15_59)))
 (let ((?x50162 (* 2.0 l_0_15_49)))
 (let ((?x50327 (* ?x50162 l_0_15_58)))
 (let ((?x49904 (* 12.0 l_0_15_31)))
 (let ((?x50026 (* ?x49904 l_0_15_40)))
 (let ((?x49901 (* 12.0 l_0_15_30)))
 (let ((?x50024 (* ?x49901 l_0_15_39)))
 (let ((?x49898 (* 12.0 l_0_15_29)))
 (let ((?x50022 (* ?x49898 l_0_15_38)))
 (let ((?x49895 (* 12.0 l_0_15_28)))
 (let ((?x50020 (* ?x49895 l_0_15_37)))
 (let ((?x50015 (* 12.0 l_0_15_18)))
 (let ((?x50016 (* ?x50015 l_0_15_9)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x50013 (* ?x50012 l_0_15_8)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x50010 (* ?x50009 l_0_15_7)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x49717 (* ?x49716 l_0_15_134)))
 (let ((?x49705 (* 2.0 l_0_15_128)))
 (let ((?x49714 (* ?x49705 l_0_15_133)))
 (let ((?x49860 (* 12.0 l_0_15_10)))
 (let ((?x49998 (* ?x49860 l_0_15_19)))
 (let ((?x50289 (+ (- (- (- ?x49998 ?x49714) ?x49717) (* (* 2.0 l_0_15_16) l_0_15_2)) ?x50010)))
 (let ((?x50296 (- (+ (+ (- ?x50289 (* (* 2.0 l_0_15_17) l_0_15_3)) ?x50013) ?x50016) (* (* 2.0 l_0_15_196) l_0_15_205))))
 (let ((?x50300 (- (- ?x50296 (* (* 2.0 l_0_15_197) l_0_15_206)) (* (* 2.0 l_0_15_198) l_0_15_207))))
 (let ((?x50304 (- (- ?x50300 (* (* 2.0 l_0_15_199) l_0_15_208)) (* (* 2.0 l_0_15_217) l_0_15_226))))
 (let ((?x50308 (- (- ?x50304 (* (* 2.0 l_0_15_218) l_0_15_227)) (* (* 2.0 l_0_15_219) l_0_15_228))))
 (let ((?x50312 (+ (- ?x50308 (* (* 2.0 l_0_15_220) l_0_15_229)) (* (* 2.0 l_0_15_23) l_0_15_37))))
 (let ((?x50316 (- (- ?x50312 (* (* 2.0 l_0_15_238) l_0_15_247)) (* (* 2.0 l_0_15_239) l_0_15_248))))
 (let ((?x50320 (- (+ ?x50316 (* (* 2.0 l_0_15_24) l_0_15_38)) (* (* 2.0 l_0_15_240) l_0_15_249))))
 (let ((?x50325 (- (- (- (- ?x50320 (* (* 2.0 l_0_15_241) l_0_15_250)) ?x50020) ?x50022) ?x50024)))
 (let ((?x50338 (+ (+ (- (- (- (- (- ?x50325 ?x50026) ?x50327) ?x50329) ?x50331) ?x50333) ?x50335) ?x50337)))
 (= (+ (+ ?x50338 ?x50339) ?x50341) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x49212 (* ?x49211 l_0_15_72)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x49209 (* ?x49208 l_0_15_71)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x49206 (* ?x49205 l_0_15_70)))
 (let ((?x49403 (* l_0_15_6 l_0_15_6)))
 (let ((?x49400 (* l_0_15_5 l_0_15_5)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x49191 (* ?x49190 l_0_15_51)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x49188 (* ?x49187 l_0_15_50)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x49185 (* ?x49184 l_0_15_49)))
 (let ((?x49384 (* l_0_15_4 l_0_15_4)))
 (let ((?x15038 (* l_0_15_27 l_0_15_27)))
 (let ((?x39985 (- (+ (+ (* l_0_15_25 l_0_15_25) (* l_0_15_26 l_0_15_26)) ?x15038) ?x49384)))
 (let ((?x50387 (- (- (- (- (+ (+ (+ ?x39985 ?x49185) ?x49188) ?x49191) ?x49400) ?x49403) ?x49206) ?x49209)))
 (= (- ?x50387 ?x49212) 0.0))))))))))))))))))))
(assert
 (let ((?x49538 (* l_0_15_73 l_0_15_73)))
 (let ((?x49535 (* l_0_15_72 l_0_15_72)))
 (let ((?x49532 (* l_0_15_71 l_0_15_71)))
 (let ((?x49529 (* l_0_15_70 l_0_15_70)))
 (let ((?x39348 (* l_0_15_52 l_0_15_52)))
 (let ((?x16053 (* l_0_15_51 l_0_15_51)))
 (let ((?x16039 (* l_0_15_50 l_0_15_50)))
 (let ((?x15851 (* l_0_15_49 l_0_15_49)))
 (let ((?x50398 (+ (* (* 2.0 l_0_15_25) l_0_15_28) (* (* 2.0 l_0_15_26) l_0_15_29))))
 (let ((?x50404 (- (+ ?x50398 (* (* 2.0 l_0_15_27) l_0_15_30)) (* (* 2.0 l_0_15_4) l_0_15_7))))
 (let ((?x50410 (+ (+ (- (+ ?x50404 ?x15851) (* (* 2.0 l_0_15_5) l_0_15_8)) ?x16039) ?x16053)))
 (let ((?x50416 (- (- (- (+ ?x50410 ?x39348) (* (* 2.0 l_0_15_6) l_0_15_9)) ?x49529) ?x49532)))
 (= (- (- ?x50416 ?x49535) ?x49538) 0.0))))))))))))))
(assert
 (let ((?x50498 (* 2.0 l_0_15_90)))
 (let ((?x50499 (* ?x50498 l_0_15_93)))
 (let ((?x50495 (* 2.0 l_0_15_89)))
 (let ((?x50496 (* ?x50495 l_0_15_92)))
 (let ((?x50492 (* 2.0 l_0_15_88)))
 (let ((?x50493 (* ?x50492 l_0_15_91)))
 (let ((?x50183 (* 2.0 l_0_15_73)))
 (let ((?x50184 (* ?x50183 l_0_15_77)))
 (let ((?x50180 (* 2.0 l_0_15_72)))
 (let ((?x50181 (* ?x50180 l_0_15_76)))
 (let ((?x50177 (* 2.0 l_0_15_71)))
 (let ((?x50178 (* ?x50177 l_0_15_75)))
 (let ((?x50174 (* 2.0 l_0_15_70)))
 (let ((?x50175 (* ?x50174 l_0_15_74)))
 (let ((?x50171 (* 2.0 l_0_15_52)))
 (let ((?x50172 (* ?x50171 l_0_15_56)))
 (let ((?x50168 (* 2.0 l_0_15_51)))
 (let ((?x50169 (* ?x50168 l_0_15_55)))
 (let ((?x50165 (* 2.0 l_0_15_50)))
 (let ((?x50166 (* ?x50165 l_0_15_54)))
 (let ((?x50162 (* 2.0 l_0_15_49)))
 (let ((?x50163 (* ?x50162 l_0_15_53)))
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x50476 (* ?x50475 l_0_15_177)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x50473 (* ?x50472 l_0_15_176)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x50470 (* ?x50469 l_0_15_175)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x50467 (* ?x50466 l_0_15_156)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x50464 (* ?x50463 l_0_15_155)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x50461 (* ?x50460 l_0_15_154)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x50453 (* ?x50452 l_0_15_114)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x50450 (* ?x50449 l_0_15_113)))
 (let ((?x50448 (- (* (* 2.0 l_0_15_109) l_0_15_112) (* (* 2.0 l_0_15_11) l_0_15_4))))
 (let ((?x50459 (- (- (+ (+ ?x50448 ?x50450) ?x50453) (* (* 2.0 l_0_15_12) l_0_15_5)) (* (* 2.0 l_0_15_13) l_0_15_6))))
 (let ((?x50479 (+ (+ (+ (+ (- (- (- ?x50459 ?x50461) ?x50464) ?x50467) ?x50470) ?x50473) ?x50476) (* (* 2.0 l_0_15_25) l_0_15_32))))
 (let ((?x50483 (+ (+ ?x50479 (* (* 2.0 l_0_15_26) l_0_15_33)) (* (* 2.0 l_0_15_27) l_0_15_34))))
 (let ((?x50490 (- (- (- (+ (+ (+ (+ ?x50483 ?x50163) ?x50166) ?x50169) ?x50172) ?x50175) ?x50178) ?x50181)))
 (= (- (- (- (- ?x50490 ?x50184) ?x50493) ?x50496) ?x50499) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50183 (* 2.0 l_0_15_73)))
 (let ((?x50341 (* ?x50183 l_0_15_82)))
 (let ((?x50180 (* 2.0 l_0_15_72)))
 (let ((?x50339 (* ?x50180 l_0_15_81)))
 (let ((?x50177 (* 2.0 l_0_15_71)))
 (let ((?x50337 (* ?x50177 l_0_15_80)))
 (let ((?x50174 (* 2.0 l_0_15_70)))
 (let ((?x50335 (* ?x50174 l_0_15_79)))
 (let ((?x50171 (* 2.0 l_0_15_52)))
 (let ((?x50333 (* ?x50171 l_0_15_61)))
 (let ((?x50168 (* 2.0 l_0_15_51)))
 (let ((?x50331 (* ?x50168 l_0_15_60)))
 (let ((?x50165 (* 2.0 l_0_15_50)))
 (let ((?x50329 (* ?x50165 l_0_15_59)))
 (let ((?x50162 (* 2.0 l_0_15_49)))
 (let ((?x50327 (* ?x50162 l_0_15_58)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x49758 (* ?x49757 l_0_15_135)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x49755 (* ?x49754 l_0_15_134)))
 (let ((?x16784 (- (- (- (* (* (- 2.0) l_0_15_130) l_0_15_133) ?x49755) ?x49758) (* (* 2.0 l_0_15_16) l_0_15_4))))
 (let ((?x50522 (- (- ?x16784 (* (* 2.0 l_0_15_17) l_0_15_5)) (* (* 2.0 l_0_15_18) l_0_15_6))))
 (let ((?x50526 (+ (+ ?x50522 (* (* 2.0 l_0_15_25) l_0_15_37)) (* (* 2.0 l_0_15_26) l_0_15_38))))
 (let ((?x50531 (+ (+ (+ (+ ?x50526 (* (* 2.0 l_0_15_27) l_0_15_39)) ?x50327) ?x50329) ?x50331)))
 (= (- (- (- (- (+ ?x50531 ?x50333) ?x50335) ?x50337) ?x50339) ?x50341) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49544 (* l_0_15_9 l_0_15_9)))
 (let ((?x49541 (* l_0_15_8 l_0_15_8)))
 (let ((?x49526 (* l_0_15_7 l_0_15_7)))
 (let ((?x15897 (* l_0_15_31 l_0_15_31)))
 (let ((?x15357 (* l_0_15_30 l_0_15_30)))
 (let ((?x15606 (* l_0_15_29 l_0_15_29)))
 (let ((?x50562 (+ (+ (* (- l_0_15_10) l_0_15_10) (* l_0_15_28 l_0_15_28)) ?x15606)))
 (= (- (- (- (+ (+ ?x50562 ?x15357) ?x15897) ?x49526) ?x49541) ?x49544) 0.0)))))))))
(assert
 (let ((?x50632 (* l_0_15_94 l_0_15_94)))
 (let ((?x50630 (* l_0_15_93 l_0_15_93)))
 (let ((?x50628 (* l_0_15_92 l_0_15_92)))
 (let ((?x50626 (* l_0_15_91 l_0_15_91)))
 (let ((?x50612 (* l_0_15_178 l_0_15_178)))
 (let ((?x50610 (* l_0_15_177 l_0_15_177)))
 (let ((?x50608 (* l_0_15_176 l_0_15_176)))
 (let ((?x50606 (* l_0_15_175 l_0_15_175)))
 (let ((?x50604 (* l_0_15_157 l_0_15_157)))
 (let ((?x50602 (* l_0_15_156 l_0_15_156)))
 (let ((?x50600 (* l_0_15_155 l_0_15_155)))
 (let ((?x50598 (* l_0_15_154 l_0_15_154)))
 (let ((?x50592 (* l_0_15_115 l_0_15_115)))
 (let ((?x50590 (* l_0_15_114 l_0_15_114)))
 (let ((?x50588 (* l_0_15_113 l_0_15_113)))
 (let ((?x50586 (* l_0_15_112 l_0_15_112)))
 (let ((?x50585 (- (* (* (- 2.0) l_0_15_10) l_0_15_14) (* (* 2.0 l_0_15_11) l_0_15_7))))
 (let ((?x50595 (- (+ (+ (+ (+ ?x50585 ?x50586) ?x50588) ?x50590) ?x50592) (* (* 2.0 l_0_15_12) l_0_15_8))))
 (let ((?x50603 (- (- (- (- ?x50595 (* (* 2.0 l_0_15_13) l_0_15_9)) ?x50598) ?x50600) ?x50602)))
 (let ((?x50616 (+ (+ (+ (+ (+ (- ?x50603 ?x50604) ?x50606) ?x50608) ?x50610) ?x50612) (* (* 2.0 l_0_15_28) l_0_15_32))))
 (let ((?x50622 (+ (+ ?x50616 (* (* 2.0 l_0_15_29) l_0_15_33)) (* (* 2.0 l_0_15_30) l_0_15_34))))
 (let ((?x50631 (- (- (- (+ ?x50622 (* (* 2.0 l_0_15_31) l_0_15_35)) ?x50626) ?x50628) ?x50630)))
 (= (- ?x50631 ?x50632) 0.0))))))))))))))))))))))))
(assert
 (let ((?x49820 (* l_0_15_136 l_0_15_136)))
 (let ((?x49818 (* l_0_15_135 l_0_15_135)))
 (let ((?x49816 (* l_0_15_134 l_0_15_134)))
 (let ((?x49814 (* l_0_15_133 l_0_15_133)))
 (let ((?x50668 (- (- (- (- (* (* (- 2.0) l_0_15_10) l_0_15_19) ?x49814) ?x49816) ?x49818) ?x49820)))
 (let ((?x50672 (- (- ?x50668 (* (* 2.0 l_0_15_16) l_0_15_7)) (* (* 2.0 l_0_15_17) l_0_15_8))))
 (let ((?x50676 (+ (- ?x50672 (* (* 2.0 l_0_15_18) l_0_15_9)) (* (* 2.0 l_0_15_28) l_0_15_37))))
 (let ((?x50680 (+ (+ ?x50676 (* (* 2.0 l_0_15_29) l_0_15_38)) (* (* 2.0 l_0_15_30) l_0_15_39))))
 (= (+ ?x50680 (* (* 2.0 l_0_15_31) l_0_15_40)) 0.0))))))))))
(assert
 (let ((?x50759 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x50756 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x50753 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x50750 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x50747 (* l_0_15_36 l_0_15_36)))
 (let ((?x50745 (* l_0_15_35 l_0_15_35)))
 (let ((?x50743 (* l_0_15_34 l_0_15_34)))
 (let ((?x50741 (* l_0_15_33 l_0_15_33)))
 (let ((?x50739 (* l_0_15_32 l_0_15_32)))
 (let ((?x50736 (* 2.0 l_0_15_178)))
 (let ((?x50737 (* ?x50736 l_0_15_182)))
 (let ((?x50733 (* 2.0 l_0_15_177)))
 (let ((?x50734 (* ?x50733 l_0_15_181)))
 (let ((?x50730 (* 2.0 l_0_15_176)))
 (let ((?x50731 (* ?x50730 l_0_15_180)))
 (let ((?x50727 (* 2.0 l_0_15_175)))
 (let ((?x50728 (* ?x50727 l_0_15_179)))
 (let ((?x50724 (* 2.0 l_0_15_157)))
 (let ((?x50725 (* ?x50724 l_0_15_161)))
 (let ((?x50721 (* 2.0 l_0_15_156)))
 (let ((?x50722 (* ?x50721 l_0_15_160)))
 (let ((?x50718 (* 2.0 l_0_15_155)))
 (let ((?x50719 (* ?x50718 l_0_15_159)))
 (let ((?x50715 (* 2.0 l_0_15_154)))
 (let ((?x50716 (* ?x50715 l_0_15_158)))
 (let ((?x50713 (* l_0_15_15 l_0_15_15)))
 (let ((?x50711 (* l_0_15_14 l_0_15_14)))
 (let ((?x50709 (* l_0_15_13 l_0_15_13)))
 (let ((?x50707 (* l_0_15_12 l_0_15_12)))
 (let ((?x50704 (* 2.0 l_0_15_115)))
 (let ((?x50705 (* ?x50704 l_0_15_119)))
 (let ((?x50701 (* 2.0 l_0_15_114)))
 (let ((?x50702 (* ?x50701 l_0_15_118)))
 (let ((?x50698 (* 2.0 l_0_15_113)))
 (let ((?x50699 (* ?x50698 l_0_15_117)))
 (let ((?x50697 (+ (* (- l_0_15_11) l_0_15_11) (* (* 2.0 l_0_15_112) l_0_15_116))))
 (let ((?x50714 (- (- (- (- (+ (+ (+ ?x50697 ?x50699) ?x50702) ?x50705) ?x50707) ?x50709) ?x50711) ?x50713)))
 (let ((?x50735 (+ (+ (+ (- (- (- (- ?x50714 ?x50716) ?x50719) ?x50722) ?x50725) ?x50728) ?x50731) ?x50734)))
 (let ((?x50751 (- (+ (+ (+ (+ (+ (+ ?x50735 ?x50737) ?x50739) ?x50741) ?x50743) ?x50745) ?x50747) ?x50750)))
 (= (- (- (- ?x50751 ?x50753) ?x50756) ?x50759) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50736 (* 2.0 l_0_15_178)))
 (let ((?x50878 (* ?x50736 l_0_15_187)))
 (let ((?x50733 (* 2.0 l_0_15_177)))
 (let ((?x50876 (* ?x50733 l_0_15_186)))
 (let ((?x50730 (* 2.0 l_0_15_176)))
 (let ((?x50874 (* ?x50730 l_0_15_185)))
 (let ((?x50727 (* 2.0 l_0_15_175)))
 (let ((?x50872 (* ?x50727 l_0_15_184)))
 (let ((?x50724 (* 2.0 l_0_15_157)))
 (let ((?x50870 (* ?x50724 l_0_15_166)))
 (let ((?x50721 (* 2.0 l_0_15_156)))
 (let ((?x50868 (* ?x50721 l_0_15_165)))
 (let ((?x50718 (* 2.0 l_0_15_155)))
 (let ((?x50866 (* ?x50718 l_0_15_164)))
 (let ((?x50715 (* 2.0 l_0_15_154)))
 (let ((?x50864 (* ?x50715 l_0_15_163)))
 (let ((?x49884 (* 2.0 l_0_15_136)))
 (let ((?x49885 (* ?x49884 l_0_15_140)))
 (let ((?x49881 (* 2.0 l_0_15_135)))
 (let ((?x49882 (* ?x49881 l_0_15_139)))
 (let ((?x49878 (* 2.0 l_0_15_134)))
 (let ((?x49879 (* ?x49878 l_0_15_138)))
 (let ((?x49875 (* 2.0 l_0_15_133)))
 (let ((?x49876 (* ?x49875 l_0_15_137)))
 (let ((?x50704 (* 2.0 l_0_15_115)))
 (let ((?x50848 (* ?x50704 l_0_15_124)))
 (let ((?x50701 (* 2.0 l_0_15_114)))
 (let ((?x50846 (* ?x50701 l_0_15_123)))
 (let ((?x50698 (* 2.0 l_0_15_113)))
 (let ((?x50844 (* ?x50698 l_0_15_122)))
 (let ((?x50695 (* 2.0 l_0_15_112)))
 (let ((?x50842 (* ?x50695 l_0_15_121)))
 (let ((?x50837 (* 2.0 l_0_15_103)))
 (let ((?x50838 (* ?x50837 l_0_15_94)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x50835 (* ?x50834 l_0_15_93)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x50832 (* ?x50831 l_0_15_92)))
 (let ((?x50841 (- (- (- (- (* (* (- 2.0) l_0_15_100) l_0_15_91) ?x50832) ?x50835) ?x50838) (* (* 2.0 l_0_15_11) l_0_15_16))))
 (let ((?x50851 (- (+ (+ (+ (+ ?x50841 ?x50842) ?x50844) ?x50846) ?x50848) (* (* 2.0 l_0_15_12) l_0_15_17))))
 (let ((?x50856 (- (- (- (- ?x50851 (* (* 2.0 l_0_15_13) l_0_15_18)) ?x49876) ?x49879) ?x49882)))
 (let ((?x50863 (- (- (- ?x50856 ?x49885) (* (* 2.0 l_0_15_14) l_0_15_19)) (* (* 2.0 l_0_15_15) l_0_15_20))))
 (let ((?x50877 (+ (+ (+ (- (- (- (- ?x50863 ?x50864) ?x50866) ?x50868) ?x50870) ?x50872) ?x50874) ?x50876)))
 (let ((?x50885 (+ (+ (+ ?x50877 ?x50878) (* (* 2.0 l_0_15_32) l_0_15_37)) (* (* 2.0 l_0_15_33) l_0_15_38))))
 (let ((?x50891 (+ (+ ?x50885 (* (* 2.0 l_0_15_34) l_0_15_39)) (* (* 2.0 l_0_15_35) l_0_15_40))))
 (= (+ ?x50891 (* (* 2.0 l_0_15_36) l_0_15_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50997 (* l_0_15_42 l_0_15_42)))
 (let ((?x50995 (* l_0_15_41 l_0_15_41)))
 (let ((?x50993 (* l_0_15_40 l_0_15_40)))
 (let ((?x50991 (* l_0_15_39 l_0_15_39)))
 (let ((?x50989 (* l_0_15_38 l_0_15_38)))
 (let ((?x50987 (* l_0_15_37 l_0_15_37)))
 (let ((?x50985 (* l_0_15_21 l_0_15_21)))
 (let ((?x50983 (* l_0_15_20 l_0_15_20)))
 (let ((?x50981 (* l_0_15_19 l_0_15_19)))
 (let ((?x50963 (* l_0_15_18 l_0_15_18)))
 (let ((?x50960 (* l_0_15_17 l_0_15_17)))
 (let ((?x50956 (* l_0_15_16 l_0_15_16)))
 (let ((?x49884 (* 2.0 l_0_15_136)))
 (let ((?x50007 (* ?x49884 l_0_15_145)))
 (let ((?x49881 (* 2.0 l_0_15_135)))
 (let ((?x50005 (* ?x49881 l_0_15_144)))
 (let ((?x49878 (* 2.0 l_0_15_134)))
 (let ((?x50003 (* ?x49878 l_0_15_143)))
 (let ((?x50958 (- (- (- (- (* (* (- 2.0) l_0_15_133) l_0_15_142) ?x50003) ?x50005) ?x50007) ?x50956)))
 (let ((?x50990 (+ (+ (- (- (- (- (- ?x50958 ?x50960) ?x50963) ?x50981) ?x50983) ?x50985) ?x50987) ?x50989)))
 (= (+ (+ (+ (+ ?x50990 ?x50991) ?x50993) ?x50995) ?x50997) 0.0))))))))))))))))))))))
(assert
 (let ((?x51042 (* l_0_15_87 l_0_15_87)))
 (let ((?x51040 (* l_0_15_86 l_0_15_86)))
 (let ((?x48988 (* l_0_15_64 l_0_15_64)))
 (let ((?x51038 (* 3.0 ?x48988)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x48986 (* ?x48985 l_0_15_65)))
 (let ((?x51035 (* (* 3.0 l_0_15_43) l_0_15_43)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x48974 (* ?x48973 l_0_15_44)))
 (let ((?x48969 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x51030 (* l_0_15_171 l_0_15_171)))
 (let ((?x51028 (* l_0_15_170 l_0_15_170)))
 (let ((?x51026 (* l_0_15_150 l_0_15_150)))
 (let ((?x51024 (* l_0_15_149 l_0_15_149)))
 (let ((?x51022 (* l_0_15_127 l_0_15_127)))
 (let ((?x51020 (* l_0_15_108 l_0_15_108)))
 (let ((?x51021 (- (- (* 6.0 (* l_0_15_1 l_0_15_1)) (* l_0_15_107 l_0_15_107)) ?x51020)))
 (let ((?x51033 (- (- (- (- (+ (+ (+ ?x51021 ?x51022) ?x51024) ?x51026) ?x51028) ?x51030) ?x48969) ?x48974)))
 (= (+ (+ (+ (+ (- ?x51033 ?x51035) ?x48986) ?x51038) ?x51040) ?x51042) 0.0))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51073 (* ?x49678 l_0_15_68)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51071 (* ?x49675 l_0_15_67)))
 (let ((?x48988 (* l_0_15_64 l_0_15_64)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51068 (* ?x48985 l_0_15_67)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51066 (* ?x49670 l_0_15_47)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51064 (* ?x49667 l_0_15_46)))
 (let ((?x38788 (* l_0_15_43 l_0_15_43)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51061 (* ?x48973 l_0_15_46)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51059 (* ?x48965 l_0_15_25)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x16651 (* ?x48953 l_0_15_4)))
 (let ((?x51063 (+ (- (- (+ ?x16651 (* (* 2.0 l_0_15_127) l_0_15_130)) ?x51059) ?x51061) ?x38788)))
 (= (+ (+ (- (+ (- (- ?x51063 ?x51064) ?x51066) ?x51068) ?x48988) ?x51071) ?x51073) 0.0)))))))))))))))))))))
(assert
 (let ((?x51129 (* l_0_15_85 l_0_15_85)))
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51127 (* ?x49678 l_0_15_75)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51125 (* ?x49675 l_0_15_74)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51123 (* ?x48985 l_0_15_74)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51121 (* ?x49670 l_0_15_54)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51119 (* ?x49667 l_0_15_53)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51117 (* ?x48973 l_0_15_53)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51115 (* ?x48965 l_0_15_32)))
 (let ((?x51113 (* l_0_15_169 l_0_15_169)))
 (let ((?x51111 (* l_0_15_148 l_0_15_148)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x51109 (* ?x48958 l_0_15_137)))
 (let ((?x51110 (+ (+ (* (* 12.0 l_0_15_1) l_0_15_11) (* l_0_15_106 l_0_15_106)) ?x51109)))
 (let ((?x51124 (+ (- (- (- (- (+ (- ?x51110 ?x51111) ?x51113) ?x51115) ?x51117) ?x51119) ?x51121) ?x51123)))
 (= (- (+ (+ ?x51124 ?x51125) ?x51127) ?x51129) 0.0)))))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51192 (* ?x49678 l_0_15_80)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51190 (* ?x49675 l_0_15_79)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51188 (* ?x48985 l_0_15_79)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51186 (* ?x49670 l_0_15_59)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51184 (* ?x49667 l_0_15_58)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51182 (* ?x48973 l_0_15_58)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51180 (* ?x48965 l_0_15_37)))
 (let ((?x51022 (* l_0_15_127 l_0_15_127)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x51176 (* ?x48953 l_0_15_16)))
 (let ((?x51183 (- (- (- (+ ?x51176 (* (* 2.0 l_0_15_127) l_0_15_142)) ?x51022) ?x51180) ?x51182)))
 (= (+ (+ (+ (- (- ?x51183 ?x51184) ?x51186) ?x51188) ?x51190) ?x51192) 0.0))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51073 (* ?x49678 l_0_15_68)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51071 (* ?x49675 l_0_15_67)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51234 (* ?x49064 l_0_15_67)))
 (let ((?x49065 (* ?x49064 l_0_15_65)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51066 (* ?x49670 l_0_15_47)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51064 (* ?x49667 l_0_15_46)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51229 (* ?x49059 l_0_15_46)))
 (let ((?x49060 (* ?x49059 l_0_15_44)))
 (let ((?x49325 (* 12.0 l_0_15_3)))
 (let ((?x49612 (* ?x49325 l_0_15_5)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x49610 (* ?x49321 l_0_15_26)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x49604 (* ?x49311 l_0_15_25)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51059 (* ?x48965 l_0_15_25)))
 (let ((?x49301 (* 12.0 l_0_15_2)))
 (let ((?x49598 (* ?x49301 l_0_15_4)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51208 (* ?x49716 l_0_15_131)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x16651 (* ?x48953 l_0_15_4)))
 (let ((?x51218 (- (+ (+ ?x16651 (* (* 2.0 l_0_15_128) l_0_15_130)) ?x51208) (* (* 2.0 l_0_15_190) l_0_15_193))))
 (let ((?x51223 (- (- (- (+ ?x51218 ?x49598) (* (* 2.0 l_0_15_211) l_0_15_214)) ?x51059) ?x49604)))
 (let ((?x51228 (+ (+ (- (- ?x51223 (* (* 2.0 l_0_15_232) l_0_15_235)) ?x49610) ?x49612) ?x49060)))
 (let ((?x51237 (+ (+ (+ (- (- (- (- ?x51228 ?x51229) ?x51064) ?x51066) ?x49065) ?x51234) ?x51071) ?x51073)))
 (= ?x51237 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51297 (* ?x49931 l_0_15_86)))
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51127 (* ?x49678 l_0_15_75)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51125 (* ?x49675 l_0_15_74)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51293 (* ?x49064 l_0_15_74)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51121 (* ?x49670 l_0_15_54)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51119 (* ?x49667 l_0_15_53)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51289 (* ?x49059 l_0_15_53)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x51287 (* ?x49321 l_0_15_33)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x51283 (* ?x49311 l_0_15_32)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51115 (* ?x48965 l_0_15_32)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51276 (* ?x49890 l_0_15_170)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51274 (* ?x49887 l_0_15_149)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51272 (* ?x49716 l_0_15_138)))
 (let ((?x49705 (* 2.0 l_0_15_128)))
 (let ((?x51270 (* ?x49705 l_0_15_137)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51268 (* ?x49869 l_0_15_3)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51266 (* ?x49866 l_0_15_2)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x17678 (* ?x48953 l_0_15_11)))
 (let ((?x51271 (+ (+ (+ (+ ?x17678 (* (* 2.0 l_0_15_106) l_0_15_107)) ?x51266) ?x51268) ?x51270)))
 (let ((?x51279 (- (+ (- (+ ?x51271 ?x51272) ?x51274) ?x51276) (* (* 2.0 l_0_15_190) l_0_15_200))))
 (let ((?x51286 (- (- (- (- ?x51279 (* (* 2.0 l_0_15_211) l_0_15_221)) ?x51115) ?x51283) (* (* 2.0 l_0_15_232) l_0_15_242))))
 (let ((?x51296 (+ (+ (+ (- (- (- (- ?x51286 ?x51287) ?x51289) ?x51119) ?x51121) ?x51293) ?x51125) ?x51127)))
 (= (- ?x51296 ?x51297) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49678 (* 6.0 l_0_15_66)))
 (let ((?x51192 (* ?x49678 l_0_15_80)))
 (let ((?x49675 (* 6.0 l_0_15_65)))
 (let ((?x51190 (* ?x49675 l_0_15_79)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51369 (* ?x49064 l_0_15_79)))
 (let ((?x49670 (* 6.0 l_0_15_45)))
 (let ((?x51186 (* ?x49670 l_0_15_59)))
 (let ((?x49667 (* 6.0 l_0_15_44)))
 (let ((?x51184 (* ?x49667 l_0_15_58)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51365 (* ?x49059 l_0_15_58)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x51363 (* ?x49321 l_0_15_38)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x51359 (* ?x49311 l_0_15_37)))
 (let ((?x48965 (* 12.0 l_0_15_22)))
 (let ((?x51180 (* ?x48965 l_0_15_37)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x51352 (* ?x50012 l_0_15_3)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x51350 (* ?x50009 l_0_15_2)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51348 (* ?x49716 l_0_15_143)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x48959 (* ?x48958 l_0_15_128)))
 (let ((?x48953 (* 12.0 l_0_15_1)))
 (let ((?x51176 (* ?x48953 l_0_15_16)))
 (let ((?x51351 (+ (+ (+ (- ?x51176 ?x48959) (* (* 2.0 l_0_15_128) l_0_15_142)) ?x51348) ?x51350)))
 (let ((?x51357 (- (- (+ ?x51351 ?x51352) (* (* 2.0 l_0_15_190) l_0_15_205)) (* (* 2.0 l_0_15_211) l_0_15_226))))
 (let ((?x51364 (- (- (- (- ?x51357 ?x51180) ?x51359) (* (* 2.0 l_0_15_232) l_0_15_247)) ?x51363)))
 (= (+ (+ (+ (- (- (- ?x51364 ?x51365) ?x51184) ?x51186) ?x51369) ?x51190) ?x51192) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x49416 (* l_0_15_69 l_0_15_69)))
 (let ((?x51415 (* 3.0 ?x49416)))
 (let ((?x49413 (* l_0_15_68 l_0_15_68)))
 (let ((?x51413 (* 3.0 ?x49413)))
 (let ((?x49410 (* l_0_15_67 l_0_15_67)))
 (let ((?x51411 (* 3.0 ?x49410)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51234 (* ?x49064 l_0_15_67)))
 (let ((?x49403 (* l_0_15_6 l_0_15_6)))
 (let ((?x49404 (* 6.0 ?x49403)))
 (let ((?x49400 (* l_0_15_5 l_0_15_5)))
 (let ((?x49401 (* 6.0 ?x49400)))
 (let ((?x51406 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x51403 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51229 (* ?x49059 l_0_15_46)))
 (let ((?x49384 (* l_0_15_4 l_0_15_4)))
 (let ((?x49385 (* 6.0 ?x49384)))
 (let ((?x49382 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x49379 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x49376 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x51392 (* l_0_15_132 l_0_15_132)))
 (let ((?x51393 (+ (+ (* l_0_15_130 l_0_15_130) (* l_0_15_131 l_0_15_131)) ?x51392)))
 (let ((?x51401 (- (+ (+ (- (- (- ?x51393 ?x49376) ?x49379) ?x49382) ?x49385) ?x51229) (* (* 3.0 l_0_15_46) l_0_15_46))))
 (let ((?x51414 (+ (+ (- (+ (+ (- (- ?x51401 ?x51403) ?x51406) ?x49401) ?x49404) ?x51234) ?x51411) ?x51413)))
 (= (+ ?x51414 ?x51415) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51467 (* ?x49931 l_0_15_88)))
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x51465 (* ?x49785 l_0_15_76)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x51463 (* ?x49782 l_0_15_75)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x51461 (* ?x49779 l_0_15_74)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51293 (* ?x49064 l_0_15_74)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x51458 (* ?x49773 l_0_15_55)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x51456 (* ?x49770 l_0_15_54)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51289 (* ?x49059 l_0_15_53)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x51451 (* ?x49169 l_0_15_34)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x51449 (* ?x49166 l_0_15_33)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x51447 (* ?x49163 l_0_15_32)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51445 (* ?x49890 l_0_15_172)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51443 (* ?x49887 l_0_15_151)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x51441 (* ?x49757 l_0_15_139)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x51439 (* ?x49754 l_0_15_138)))
 (let ((?x39523 (* 2.0 l_0_15_130)))
 (let ((?x51437 (* ?x39523 l_0_15_137)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x51435 (* ?x49872 l_0_15_6)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51433 (* ?x49869 l_0_15_5)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51431 (* ?x49866 l_0_15_4)))
 (let ((?x51438 (+ (+ (+ (+ (* (* 2.0 l_0_15_106) l_0_15_109) ?x51431) ?x51433) ?x51435) ?x51437)))
 (let ((?x51452 (- (- (- (+ (- (+ (+ ?x51438 ?x51439) ?x51441) ?x51443) ?x51445) ?x51447) ?x51449) ?x51451)))
 (let ((?x51459 (- (- (- (+ ?x51452 ?x51289) (* (* 6.0 l_0_15_46) l_0_15_53)) ?x51456) ?x51458)))
 (= (- (+ (+ (+ (- ?x51459 ?x51293) ?x51461) ?x51463) ?x51465) ?x51467) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x51556 (* ?x49785 l_0_15_81)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x51554 (* ?x49782 l_0_15_80)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x51552 (* ?x49779 l_0_15_79)))
 (let ((?x49064 (* 2.0 l_0_15_64)))
 (let ((?x51369 (* ?x49064 l_0_15_79)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x51549 (* ?x49773 l_0_15_60)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x51547 (* ?x49770 l_0_15_59)))
 (let ((?x49059 (* 2.0 l_0_15_43)))
 (let ((?x51365 (* ?x49059 l_0_15_58)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x51542 (* ?x49169 l_0_15_39)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x51540 (* ?x49166 l_0_15_38)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x51538 (* ?x49163 l_0_15_37)))
 (let ((?x50015 (* 12.0 l_0_15_18)))
 (let ((?x51536 (* ?x50015 l_0_15_6)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x51534 (* ?x50012 l_0_15_5)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x51532 (* ?x50009 l_0_15_4)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x51530 (* ?x49757 l_0_15_144)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x51528 (* ?x49754 l_0_15_143)))
 (let ((?x51527 (+ (* (* (- 2.0) l_0_15_127) l_0_15_130) (* (* 2.0 l_0_15_130) l_0_15_142))))
 (let ((?x51541 (- (- (+ (+ (+ (+ (+ ?x51527 ?x51528) ?x51530) ?x51532) ?x51534) ?x51536) ?x51538) ?x51540)))
 (let ((?x51548 (- (- (+ (- ?x51541 ?x51542) ?x51365) (* (* 6.0 l_0_15_46) l_0_15_58)) ?x51547)))
 (= (+ (+ (+ (- (- ?x51548 ?x51549) ?x51369) ?x51552) ?x51554) ?x51556) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51672 (* ?x49931 l_0_15_95)))
 (let ((?x51669 (* l_0_15_78 l_0_15_78)))
 (let ((?x51670 (* 3.0 ?x51669)))
 (let ((?x51666 (* l_0_15_77 l_0_15_77)))
 (let ((?x51667 (* 3.0 ?x51666)))
 (let ((?x51663 (* l_0_15_76 l_0_15_76)))
 (let ((?x51664 (* 3.0 ?x51663)))
 (let ((?x51660 (* l_0_15_75 l_0_15_75)))
 (let ((?x51661 (* 3.0 ?x51660)))
 (let ((?x51657 (* l_0_15_74 l_0_15_74)))
 (let ((?x51658 (* 3.0 ?x51657)))
 (let ((?x51655 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x51652 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x51649 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x51646 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x51640 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x51637 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x51634 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x51631 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x51628 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51625 (* ?x49890 l_0_15_179)))
 (let ((?x50713 (* l_0_15_15 l_0_15_15)))
 (let ((?x51623 (* 6.0 ?x50713)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51621 (* ?x49887 l_0_15_158)))
 (let ((?x51619 (* l_0_15_141 l_0_15_141)))
 (let ((?x51617 (* l_0_15_140 l_0_15_140)))
 (let ((?x50711 (* l_0_15_14 l_0_15_14)))
 (let ((?x51615 (* 6.0 ?x50711)))
 (let ((?x51613 (* l_0_15_139 l_0_15_139)))
 (let ((?x51611 (* l_0_15_138 l_0_15_138)))
 (let ((?x51609 (* l_0_15_137 l_0_15_137)))
 (let ((?x50709 (* l_0_15_13 l_0_15_13)))
 (let ((?x51607 (* 6.0 ?x50709)))
 (let ((?x50707 (* l_0_15_12 l_0_15_12)))
 (let ((?x51605 (* 6.0 ?x50707)))
 (let ((?x26386 (* l_0_15_11 l_0_15_11)))
 (let ((?x51603 (* 6.0 ?x26386)))
 (let ((?x51610 (+ (+ (+ (+ (* (* 2.0 l_0_15_106) l_0_15_116) ?x51603) ?x51605) ?x51607) ?x51609)))
 (let ((?x51624 (+ (- (+ (+ (+ (+ (+ ?x51610 ?x51611) ?x51613) ?x51615) ?x51617) ?x51619) ?x51621) ?x51623)))
 (let ((?x51644 (- (- (- (- (- (- (+ ?x51624 ?x51625) ?x51628) ?x51631) ?x51634) ?x51637) ?x51640) (* (* 3.0 l_0_15_53) l_0_15_53))))
 (let ((?x51665 (+ (+ (+ (- (- (- (- ?x51644 ?x51646) ?x51649) ?x51652) ?x51655) ?x51658) ?x51661) ?x51664)))
 (= (- (+ (+ ?x51665 ?x51667) ?x51670) ?x51672) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51797 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x51794 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x51791 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x51788 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x51785 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x51782 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x51779 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x51776 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x51773 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x51767 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51764 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51761 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51758 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51755 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51752 (* ?x49890 l_0_15_184)))
 (let ((?x51750 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51747 (* ?x49887 l_0_15_163)))
 (let ((?x51745 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51742 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51739 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x51736 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51733 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51730 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x51727 (* ?x49872 l_0_15_18)))
 (let ((?x48958 (* 2.0 l_0_15_127)))
 (let ((?x51109 (* ?x48958 l_0_15_137)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51724 (* ?x49869 l_0_15_17)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51722 (* ?x49866 l_0_15_16)))
 (let ((?x49863 (* 2.0 l_0_15_106)))
 (let ((?x51720 (* ?x49863 l_0_15_121)))
 (let ((?x51726 (- (+ (+ (+ (* (* (- 2.0) l_0_15_100) l_0_15_85) ?x51720) ?x51722) ?x51724) ?x51109)))
 (let ((?x51746 (+ (+ (+ (+ (+ (+ (+ ?x51726 ?x51727) ?x51730) ?x51733) ?x51736) ?x51739) ?x51742) ?x51745)))
 (let ((?x51765 (- (- (- (- (+ (+ (- ?x51746 ?x51747) ?x51750) ?x51752) ?x51755) ?x51758) ?x51761) ?x51764)))
 (let ((?x51777 (- (- (- (- ?x51765 ?x51767) (* (* 6.0 l_0_15_53) l_0_15_58)) ?x51773) ?x51776)))
 (let ((?x51798 (+ (+ (+ (+ (+ (- (- ?x51777 ?x51779) ?x51782) ?x51785) ?x51788) ?x51791) ?x51794) ?x51797)))
 (= ?x51798 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51944 (* l_0_15_84 l_0_15_84)))
 (let ((?x51945 (* 3.0 ?x51944)))
 (let ((?x51941 (* l_0_15_83 l_0_15_83)))
 (let ((?x51942 (* 3.0 ?x51941)))
 (let ((?x51938 (* l_0_15_82 l_0_15_82)))
 (let ((?x51939 (* 3.0 ?x51938)))
 (let ((?x51935 (* l_0_15_81 l_0_15_81)))
 (let ((?x51936 (* 3.0 ?x51935)))
 (let ((?x51932 (* l_0_15_80 l_0_15_80)))
 (let ((?x51933 (* 3.0 ?x51932)))
 (let ((?x51929 (* l_0_15_79 l_0_15_79)))
 (let ((?x51930 (* 3.0 ?x51929)))
 (let ((?x51927 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x51924 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x51921 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x51918 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x51915 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x51909 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x51906 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x51903 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x51900 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x51897 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x51894 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x50985 (* l_0_15_21 l_0_15_21)))
 (let ((?x51891 (* 6.0 ?x50985)))
 (let ((?x50983 (* l_0_15_20 l_0_15_20)))
 (let ((?x51889 (* 6.0 ?x50983)))
 (let ((?x50981 (* l_0_15_19 l_0_15_19)))
 (let ((?x51887 (* 6.0 ?x50981)))
 (let ((?x50963 (* l_0_15_18 l_0_15_18)))
 (let ((?x51885 (* 6.0 ?x50963)))
 (let ((?x50960 (* l_0_15_17 l_0_15_17)))
 (let ((?x51883 (* 6.0 ?x50960)))
 (let ((?x50956 (* l_0_15_16 l_0_15_16)))
 (let ((?x51881 (* 6.0 ?x50956)))
 (let ((?x51879 (* l_0_15_147 l_0_15_147)))
 (let ((?x51877 (* l_0_15_146 l_0_15_146)))
 (let ((?x51875 (* l_0_15_145 l_0_15_145)))
 (let ((?x51873 (* l_0_15_144 l_0_15_144)))
 (let ((?x51871 (* l_0_15_143 l_0_15_143)))
 (let ((?x51869 (* l_0_15_142 l_0_15_142)))
 (let ((?x51876 (+ (+ (+ (+ (* (* (- 2.0) l_0_15_127) l_0_15_142) ?x51869) ?x51871) ?x51873) ?x51875)))
 (let ((?x51890 (+ (+ (+ (+ (+ (+ (+ ?x51876 ?x51877) ?x51879) ?x51881) ?x51883) ?x51885) ?x51887) ?x51889)))
 (let ((?x51910 (- (- (- (- (- (- (+ ?x51890 ?x51891) ?x51894) ?x51897) ?x51900) ?x51903) ?x51906) ?x51909)))
 (let ((?x51922 (- (- (- (- ?x51910 (* (* 3.0 l_0_15_58) l_0_15_58)) ?x51915) ?x51918) ?x51921)))
 (let ((?x51943 (+ (+ (+ (+ (+ (- (- ?x51922 ?x51924) ?x51927) ?x51930) ?x51933) ?x51936) ?x51939) ?x51942)))
 (= (+ ?x51943 ?x51945) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51042 (* l_0_15_87 l_0_15_87)))
 (let ((?x51040 (* l_0_15_86 l_0_15_86)))
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x52013 (* ?x49202 l_0_15_75)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x52011 (* ?x49199 l_0_15_74)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x52009 (* ?x49181 l_0_15_54)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x52007 (* ?x49178 l_0_15_53)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x51287 (* ?x49321 l_0_15_33)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x51283 (* ?x49311 l_0_15_32)))
 (let ((?x51030 (* l_0_15_171 l_0_15_171)))
 (let ((?x51028 (* l_0_15_170 l_0_15_170)))
 (let ((?x51026 (* l_0_15_150 l_0_15_150)))
 (let ((?x51024 (* l_0_15_149 l_0_15_149)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51268 (* ?x49869 l_0_15_3)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51266 (* ?x49866 l_0_15_2)))
 (let ((?x51987 (+ (+ (* l_0_15_107 l_0_15_107) (* l_0_15_108 l_0_15_108)) ?x51266)))
 (let ((?x51994 (- (+ (+ (- (- (+ ?x51987 ?x51268) ?x51024) ?x51026) ?x51028) ?x51030) (* (* 2.0 l_0_15_191) l_0_15_200))))
 (let ((?x51998 (- (- ?x51994 (* (* 2.0 l_0_15_192) l_0_15_201)) (* (* 2.0 l_0_15_212) l_0_15_221))))
 (let ((?x52003 (- (- (- ?x51998 (* (* 2.0 l_0_15_213) l_0_15_222)) ?x51283) (* (* 2.0 l_0_15_233) l_0_15_242))))
 (let ((?x52010 (- (- (- (- ?x52003 (* (* 2.0 l_0_15_234) l_0_15_243)) ?x51287) ?x52007) ?x52009)))
 (= (- (- (+ (+ ?x52010 ?x52011) ?x52013) ?x51040) ?x51042) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x52087 (* ?x49202 l_0_15_80)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x52085 (* ?x49199 l_0_15_79)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x52083 (* ?x49181 l_0_15_59)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x52081 (* ?x49178 l_0_15_58)))
 (let ((?x49321 (* 12.0 l_0_15_24)))
 (let ((?x51363 (* ?x49321 l_0_15_38)))
 (let ((?x49311 (* 12.0 l_0_15_23)))
 (let ((?x51359 (* ?x49311 l_0_15_37)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x51352 (* ?x50012 l_0_15_3)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x51350 (* ?x50009 l_0_15_2)))
 (let ((?x52065 (+ (- (* (- l_0_15_128) l_0_15_128) (* l_0_15_129 l_0_15_129)) ?x51350)))
 (let ((?x52070 (- (- (+ ?x52065 ?x51352) (* (* 2.0 l_0_15_191) l_0_15_205)) (* (* 2.0 l_0_15_192) l_0_15_206))))
 (let ((?x52074 (- (- ?x52070 (* (* 2.0 l_0_15_212) l_0_15_226)) (* (* 2.0 l_0_15_213) l_0_15_227))))
 (let ((?x52079 (- (- (- ?x52074 ?x51359) (* (* 2.0 l_0_15_233) l_0_15_247)) (* (* 2.0 l_0_15_234) l_0_15_248))))
 (= (+ (+ (- (- (- ?x52079 ?x51363) ?x52081) ?x52083) ?x52085) ?x52087) 0.0))))))))))))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x52177 (* ?x50189 l_0_15_89)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x52175 (* ?x50186 l_0_15_88)))
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x52173 (* ?x49211 l_0_15_76)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x52171 (* ?x49208 l_0_15_75)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x52169 (* ?x49205 l_0_15_74)))
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x52013 (* ?x49202 l_0_15_75)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x52011 (* ?x49199 l_0_15_74)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x52165 (* ?x49190 l_0_15_55)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x52163 (* ?x49187 l_0_15_54)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x52161 (* ?x49184 l_0_15_53)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x52009 (* ?x49181 l_0_15_54)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x52007 (* ?x49178 l_0_15_53)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x51451 (* ?x49169 l_0_15_34)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x51449 (* ?x49166 l_0_15_33)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x51447 (* ?x49163 l_0_15_32)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x52136 (* ?x50115 l_0_15_173)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x52134 (* ?x50112 l_0_15_172)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x52132 (* ?x50109 l_0_15_152)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x52130 (* ?x50106 l_0_15_151)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x51435 (* ?x49872 l_0_15_6)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51433 (* ?x49869 l_0_15_5)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51431 (* ?x49866 l_0_15_4)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x52125 (* ?x50078 l_0_15_110)))
 (let ((?x52129 (+ (+ (+ (+ (* (* 2.0 l_0_15_107) l_0_15_109) ?x52125) ?x51431) ?x51433) ?x51435)))
 (let ((?x52139 (- (+ (+ (- (- ?x52129 ?x52130) ?x52132) ?x52134) ?x52136) (* (* 2.0 l_0_15_193) l_0_15_200))))
 (let ((?x52143 (- (- ?x52139 (* (* 2.0 l_0_15_194) l_0_15_201)) (* (* 2.0 l_0_15_195) l_0_15_202))))
 (let ((?x52147 (- (- ?x52143 (* (* 2.0 l_0_15_214) l_0_15_221)) (* (* 2.0 l_0_15_215) l_0_15_222))))
 (let ((?x52151 (- (- ?x52147 (* (* 2.0 l_0_15_216) l_0_15_223)) (* (* 2.0 l_0_15_235) l_0_15_242))))
 (let ((?x52155 (- (- ?x52151 (* (* 2.0 l_0_15_236) l_0_15_243)) (* (* 2.0 l_0_15_237) l_0_15_244))))
 (let ((?x52164 (- (- (+ (+ (- (- (- ?x52155 ?x51447) ?x51449) ?x51451) ?x52007) ?x52009) ?x52161) ?x52163)))
 (let ((?x52176 (- (+ (+ (+ (- (- (- ?x52164 ?x52165) ?x52011) ?x52013) ?x52169) ?x52171) ?x52173) ?x52175)))
 (= (- ?x52176 ?x52177) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x52277 (* ?x49211 l_0_15_81)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x52275 (* ?x49208 l_0_15_80)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x52273 (* ?x49205 l_0_15_79)))
 (let ((?x49202 (* 2.0 l_0_15_66)))
 (let ((?x52087 (* ?x49202 l_0_15_80)))
 (let ((?x49199 (* 2.0 l_0_15_65)))
 (let ((?x52085 (* ?x49199 l_0_15_79)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x52269 (* ?x49190 l_0_15_60)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x52267 (* ?x49187 l_0_15_59)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x52265 (* ?x49184 l_0_15_58)))
 (let ((?x49181 (* 2.0 l_0_15_45)))
 (let ((?x52083 (* ?x49181 l_0_15_59)))
 (let ((?x49178 (* 2.0 l_0_15_44)))
 (let ((?x52081 (* ?x49178 l_0_15_58)))
 (let ((?x49169 (* 12.0 l_0_15_27)))
 (let ((?x51542 (* ?x49169 l_0_15_39)))
 (let ((?x49166 (* 12.0 l_0_15_26)))
 (let ((?x51540 (* ?x49166 l_0_15_38)))
 (let ((?x49163 (* 12.0 l_0_15_25)))
 (let ((?x51538 (* ?x49163 l_0_15_37)))
 (let ((?x50015 (* 12.0 l_0_15_18)))
 (let ((?x51536 (* ?x50015 l_0_15_6)))
 (let ((?x50012 (* 12.0 l_0_15_17)))
 (let ((?x51534 (* ?x50012 l_0_15_5)))
 (let ((?x50009 (* 12.0 l_0_15_16)))
 (let ((?x51532 (* ?x50009 l_0_15_4)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51208 (* ?x49716 l_0_15_131)))
 (let ((?x52241 (+ (+ (+ (- (* (* (- 2.0) l_0_15_128) l_0_15_130) ?x51208) ?x51532) ?x51534) ?x51536)))
 (let ((?x52245 (- (- ?x52241 (* (* 2.0 l_0_15_193) l_0_15_205)) (* (* 2.0 l_0_15_194) l_0_15_206))))
 (let ((?x52249 (- (- ?x52245 (* (* 2.0 l_0_15_195) l_0_15_207)) (* (* 2.0 l_0_15_214) l_0_15_226))))
 (let ((?x52253 (- (- ?x52249 (* (* 2.0 l_0_15_215) l_0_15_227)) (* (* 2.0 l_0_15_216) l_0_15_228))))
 (let ((?x52257 (- (- ?x52253 (* (* 2.0 l_0_15_235) l_0_15_247)) (* (* 2.0 l_0_15_236) l_0_15_248))))
 (let ((?x52262 (- (- (- (- ?x52257 (* (* 2.0 l_0_15_237) l_0_15_249)) ?x51538) ?x51540) ?x51542)))
 (let ((?x52272 (- (- (- (- (- (+ (+ ?x52262 ?x52081) ?x52083) ?x52265) ?x52267) ?x52269) ?x52085) ?x52087)))
 (= (+ (+ (+ ?x52272 ?x52273) ?x52275) ?x52277) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x52400 (* ?x50189 l_0_15_96)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x52398 (* ?x50186 l_0_15_95)))
 (let ((?x51640 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x51637 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x51634 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x51631 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x51628 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x52366 (* l_0_15_246 l_0_15_246)))
 (let ((?x52364 (* l_0_15_245 l_0_15_245)))
 (let ((?x52362 (* l_0_15_244 l_0_15_244)))
 (let ((?x52360 (* l_0_15_243 l_0_15_243)))
 (let ((?x52358 (* l_0_15_242 l_0_15_242)))
 (let ((?x52356 (* l_0_15_225 l_0_15_225)))
 (let ((?x52354 (* l_0_15_224 l_0_15_224)))
 (let ((?x52352 (* l_0_15_223 l_0_15_223)))
 (let ((?x52350 (* l_0_15_222 l_0_15_222)))
 (let ((?x52348 (* l_0_15_221 l_0_15_221)))
 (let ((?x52346 (* l_0_15_204 l_0_15_204)))
 (let ((?x52344 (* l_0_15_203 l_0_15_203)))
 (let ((?x52342 (* l_0_15_202 l_0_15_202)))
 (let ((?x52340 (* l_0_15_201 l_0_15_201)))
 (let ((?x52338 (* l_0_15_200 l_0_15_200)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x19408 (* ?x50115 l_0_15_180)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x40730 (* ?x50112 l_0_15_179)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x19414 (* ?x50109 l_0_15_159)))
 (let ((?x50713 (* l_0_15_15 l_0_15_15)))
 (let ((?x51623 (* 6.0 ?x50713)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x19314 (* ?x50106 l_0_15_158)))
 (let ((?x50711 (* l_0_15_14 l_0_15_14)))
 (let ((?x51615 (* 6.0 ?x50711)))
 (let ((?x50709 (* l_0_15_13 l_0_15_13)))
 (let ((?x51607 (* 6.0 ?x50709)))
 (let ((?x50707 (* l_0_15_12 l_0_15_12)))
 (let ((?x51605 (* 6.0 ?x50707)))
 (let ((?x26386 (* l_0_15_11 l_0_15_11)))
 (let ((?x51603 (* 6.0 ?x26386)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x40723 (* ?x50078 l_0_15_117)))
 (let ((?x40441 (+ (+ (+ (+ (* (* 2.0 l_0_15_107) l_0_15_116) ?x40723) ?x51603) ?x51605) ?x51607)))
 (let ((?x52339 (- (+ (+ (- (+ (- (+ ?x40441 ?x51615) ?x19314) ?x51623) ?x19414) ?x40730) ?x19408) ?x52338)))
 (let ((?x52353 (- (- (- (- (- (- (- ?x52339 ?x52340) ?x52342) ?x52344) ?x52346) ?x52348) ?x52350) ?x52352)))
 (let ((?x52367 (- (- (- (- (- (- (- ?x52353 ?x52354) ?x52356) ?x52358) ?x52360) ?x52362) ?x52364) ?x52366)))
 (let ((?x52375 (- (- (- (- (- (- ?x52367 ?x51628) ?x51631) ?x51634) ?x51637) ?x51640) (* (* 1.0 l_0_15_53) l_0_15_53))))
 (let ((?x52381 (- (- ?x52375 (* (* 1.0 l_0_15_54) l_0_15_54)) (* (* 1.0 l_0_15_55) l_0_15_55))))
 (let ((?x52387 (- (- ?x52381 (* (* 1.0 l_0_15_56) l_0_15_56)) (* (* 1.0 l_0_15_57) l_0_15_57))))
 (let ((?x52391 (+ (+ ?x52387 (* 1.0 (* l_0_15_74 l_0_15_74))) (* 1.0 (* l_0_15_75 l_0_15_75)))))
 (let ((?x52395 (+ (+ ?x52391 (* 1.0 (* l_0_15_76 l_0_15_76))) (* 1.0 (* l_0_15_77 l_0_15_77)))))
 (= (- (- (+ ?x52395 (* 1.0 (* l_0_15_78 l_0_15_78))) ?x52398) ?x52400) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x52594 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x52591 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x52588 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x52585 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x52582 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x52579 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x52576 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x52573 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x52570 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x52567 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x51767 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51764 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51761 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51758 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51755 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x52514 (* ?x50115 l_0_15_185)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x52512 (* ?x50112 l_0_15_184)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x52510 (* ?x50109 l_0_15_164)))
 (let ((?x51750 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x52507 (* ?x50106 l_0_15_163)))
 (let ((?x51739 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x49872 (* 12.0 l_0_15_13)))
 (let ((?x51727 (* ?x49872 l_0_15_18)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51272 (* ?x49716 l_0_15_138)))
 (let ((?x49705 (* 2.0 l_0_15_128)))
 (let ((?x51270 (* ?x49705 l_0_15_137)))
 (let ((?x49869 (* 12.0 l_0_15_12)))
 (let ((?x51724 (* ?x49869 l_0_15_17)))
 (let ((?x49866 (* 12.0 l_0_15_11)))
 (let ((?x51722 (* ?x49866 l_0_15_16)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x52499 (* ?x50078 l_0_15_122)))
 (let ((?x16642 (* 2.0 l_0_15_107)))
 (let ((?x52497 (* ?x16642 l_0_15_121)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x52495 (* ?x50831 l_0_15_87)))
 (let ((?x52501 (+ (+ (+ (- (* (* (- 2.0) l_0_15_100) l_0_15_86) ?x52495) ?x52497) ?x52499) ?x51722)))
 (let ((?x52509 (+ (- (+ (+ (- (- (+ ?x52501 ?x51724) ?x51270) ?x51272) ?x51727) ?x51739) ?x52507) ?x51750)))
 (let ((?x52518 (- (+ (+ (- ?x52509 ?x52510) ?x52512) ?x52514) (* (* 2.0 l_0_15_200) l_0_15_205))))
 (let ((?x52524 (- (- ?x52518 (* (* 2.0 l_0_15_201) l_0_15_206)) (* (* 2.0 l_0_15_202) l_0_15_207))))
 (let ((?x52530 (- (- ?x52524 (* (* 2.0 l_0_15_203) l_0_15_208)) (* (* 2.0 l_0_15_204) l_0_15_209))))
 (let ((?x52536 (- (- ?x52530 (* (* 2.0 l_0_15_221) l_0_15_226)) (* (* 2.0 l_0_15_222) l_0_15_227))))
 (let ((?x52542 (- (- ?x52536 (* (* 2.0 l_0_15_223) l_0_15_228)) (* (* 2.0 l_0_15_224) l_0_15_229))))
 (let ((?x52548 (- (- ?x52542 (* (* 2.0 l_0_15_225) l_0_15_230)) (* (* 2.0 l_0_15_242) l_0_15_247))))
 (let ((?x52554 (- (- ?x52548 (* (* 2.0 l_0_15_243) l_0_15_248)) (* (* 2.0 l_0_15_244) l_0_15_249))))
 (let ((?x52560 (- (- ?x52554 (* (* 2.0 l_0_15_245) l_0_15_250)) (* (* 2.0 l_0_15_246) l_0_15_251))))
 (let ((?x52571 (- (- (- (- (- (- (- ?x52560 ?x51755) ?x51758) ?x51761) ?x51764) ?x51767) ?x52567) ?x52570)))
 (let ((?x52592 (+ (+ (+ (+ (- (- (- ?x52571 ?x52573) ?x52576) ?x52579) ?x52582) ?x52585) ?x52588) ?x52591)))
 (= (+ ?x52592 ?x52594) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51909 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x51906 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x51903 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x51900 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x51897 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x51894 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x52689 (* l_0_15_252 l_0_15_252)))
 (let ((?x52687 (* l_0_15_251 l_0_15_251)))
 (let ((?x52685 (* l_0_15_250 l_0_15_250)))
 (let ((?x52683 (* l_0_15_249 l_0_15_249)))
 (let ((?x52681 (* l_0_15_248 l_0_15_248)))
 (let ((?x52679 (* l_0_15_247 l_0_15_247)))
 (let ((?x52677 (* l_0_15_231 l_0_15_231)))
 (let ((?x52675 (* l_0_15_230 l_0_15_230)))
 (let ((?x52673 (* l_0_15_229 l_0_15_229)))
 (let ((?x52671 (* l_0_15_228 l_0_15_228)))
 (let ((?x52669 (* l_0_15_227 l_0_15_227)))
 (let ((?x52667 (* l_0_15_226 l_0_15_226)))
 (let ((?x52665 (* l_0_15_210 l_0_15_210)))
 (let ((?x50985 (* l_0_15_21 l_0_15_21)))
 (let ((?x51891 (* 6.0 ?x50985)))
 (let ((?x52662 (* l_0_15_209 l_0_15_209)))
 (let ((?x52660 (* l_0_15_208 l_0_15_208)))
 (let ((?x52658 (* l_0_15_207 l_0_15_207)))
 (let ((?x52656 (* l_0_15_206 l_0_15_206)))
 (let ((?x52654 (* l_0_15_205 l_0_15_205)))
 (let ((?x50983 (* l_0_15_20 l_0_15_20)))
 (let ((?x51889 (* 6.0 ?x50983)))
 (let ((?x50981 (* l_0_15_19 l_0_15_19)))
 (let ((?x51887 (* 6.0 ?x50981)))
 (let ((?x50963 (* l_0_15_18 l_0_15_18)))
 (let ((?x51885 (* 6.0 ?x50963)))
 (let ((?x50960 (* l_0_15_17 l_0_15_17)))
 (let ((?x51883 (* 6.0 ?x50960)))
 (let ((?x50956 (* l_0_15_16 l_0_15_16)))
 (let ((?x51881 (* 6.0 ?x50956)))
 (let ((?x49716 (* 2.0 l_0_15_129)))
 (let ((?x51348 (* ?x49716 l_0_15_143)))
 (let ((?x52651 (+ (+ (+ (- (* (* (- 2.0) l_0_15_128) l_0_15_142) ?x51348) ?x51881) ?x51883) ?x51885)))
 (let ((?x52663 (- (- (- (- (- (+ (+ ?x52651 ?x51887) ?x51889) ?x52654) ?x52656) ?x52658) ?x52660) ?x52662)))
 (let ((?x52676 (- (- (- (- (- (- (+ ?x52663 ?x51891) ?x52665) ?x52667) ?x52669) ?x52671) ?x52673) ?x52675)))
 (let ((?x52690 (- (- (- (- (- (- (- ?x52676 ?x52677) ?x52679) ?x52681) ?x52683) ?x52685) ?x52687) ?x52689)))
 (let ((?x52699 (- (- (- (- (- (- (- ?x52690 ?x51894) ?x51897) ?x51900) ?x51903) ?x51906) ?x51909) (* (* 1.0 l_0_15_58) l_0_15_58))))
 (let ((?x52705 (- (- ?x52699 (* (* 1.0 l_0_15_59) l_0_15_59)) (* (* 1.0 l_0_15_60) l_0_15_60))))
 (let ((?x52711 (- (- ?x52705 (* (* 1.0 l_0_15_61) l_0_15_61)) (* (* 1.0 l_0_15_62) l_0_15_62))))
 (let ((?x52716 (+ (- ?x52711 (* (* 1.0 l_0_15_63) l_0_15_63)) (* 1.0 (* l_0_15_79 l_0_15_79)))))
 (let ((?x52720 (+ (+ ?x52716 (* 1.0 (* l_0_15_80 l_0_15_80))) (* 1.0 (* l_0_15_81 l_0_15_81)))))
 (let ((?x52724 (+ (+ ?x52720 (* 1.0 (* l_0_15_82 l_0_15_82))) (* 1.0 (* l_0_15_83 l_0_15_83)))))
 (= (+ ?x52724 (* 1.0 (* l_0_15_84 l_0_15_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51297 (* ?x49931 l_0_15_86)))
 (let ((?x48988 (* l_0_15_64 l_0_15_64)))
 (let ((?x51038 (* 3.0 ?x48988)))
 (let ((?x51035 (* (* 3.0 l_0_15_43) l_0_15_43)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51276 (* ?x49890 l_0_15_170)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51274 (* ?x49887 l_0_15_149)))
 (let ((?x52750 (+ (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_107) ?x51274) ?x51276) ?x51035) ?x51038)))
 (= (+ ?x52750 ?x51297) 0.0))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x52177 (* ?x50189 l_0_15_89)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x52175 (* ?x50186 l_0_15_88)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51068 (* ?x48985 l_0_15_67)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51061 (* ?x48973 l_0_15_46)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x52136 (* ?x50115 l_0_15_173)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x52134 (* ?x50112 l_0_15_172)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x52132 (* ?x50109 l_0_15_152)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x52130 (* ?x50106 l_0_15_151)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x52125 (* ?x50078 l_0_15_110)))
 (let ((?x52758 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_109) ?x52125) ?x52130) ?x52132) ?x52134)))
 (= (+ (+ (+ (- (- ?x52758 ?x52136) ?x51061) ?x51068) ?x52175) ?x52177) 0.0)))))))))))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x50190 (* ?x50189 l_0_15_92)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x50187 (* ?x50186 l_0_15_91)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x49673 (* ?x48985 l_0_15_70)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x49665 (* ?x48973 l_0_15_49)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x50116 (* ?x50115 l_0_15_176)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x50113 (* ?x50112 l_0_15_175)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x50110 (* ?x50109 l_0_15_155)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x50107 (* ?x50106 l_0_15_154)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x50079 (* ?x50078 l_0_15_113)))
 (let ((?x41642 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_112) ?x50079) ?x50107) ?x50110) ?x50113)))
 (= (+ (+ (+ (- (- ?x41642 ?x50116) ?x49665) ?x49673) ?x50187) ?x50190) 0.0)))))))))))))))))))))
(assert
 (let ((?x50189 (* 2.0 l_0_15_87)))
 (let ((?x52400 (* ?x50189 l_0_15_96)))
 (let ((?x50186 (* 2.0 l_0_15_86)))
 (let ((?x52398 (* ?x50186 l_0_15_95)))
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51123 (* ?x48985 l_0_15_74)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51117 (* ?x48973 l_0_15_53)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x19408 (* ?x50115 l_0_15_180)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x40730 (* ?x50112 l_0_15_179)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x19414 (* ?x50109 l_0_15_159)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x19314 (* ?x50106 l_0_15_158)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x40723 (* ?x50078 l_0_15_117)))
 (let ((?x41665 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_116) ?x40723) ?x19314) ?x19414) ?x40730)))
 (= (+ (+ (+ (- (- ?x41665 ?x19408) ?x51117) ?x51123) ?x52398) ?x52400) 0.0)))))))))))))))))))))
(assert
 (let ((?x48985 (* 6.0 l_0_15_64)))
 (let ((?x51188 (* ?x48985 l_0_15_79)))
 (let ((?x48973 (* 6.0 l_0_15_43)))
 (let ((?x51182 (* ?x48973 l_0_15_58)))
 (let ((?x50115 (* 2.0 l_0_15_171)))
 (let ((?x52514 (* ?x50115 l_0_15_185)))
 (let ((?x50112 (* 2.0 l_0_15_170)))
 (let ((?x52512 (* ?x50112 l_0_15_184)))
 (let ((?x50109 (* 2.0 l_0_15_150)))
 (let ((?x52510 (* ?x50109 l_0_15_164)))
 (let ((?x50106 (* 2.0 l_0_15_149)))
 (let ((?x52507 (* ?x50106 l_0_15_163)))
 (let ((?x50078 (* 2.0 l_0_15_108)))
 (let ((?x52499 (* ?x50078 l_0_15_122)))
 (let ((?x16642 (* 2.0 l_0_15_107)))
 (let ((?x52497 (* ?x16642 l_0_15_121)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x52495 (* ?x50831 l_0_15_87)))
 (let ((?x30870 (+ (- (- (+ (* (* 2.0 l_0_15_100) l_0_15_86) ?x52495) ?x52497) ?x52499) ?x52507)))
 (= (+ (- (- (- (+ ?x30870 ?x52510) ?x52512) ?x52514) ?x51182) ?x51188) 0.0)))))))))))))))))))))
(assert
 (let ((?x49416 (* l_0_15_69 l_0_15_69)))
 (let ((?x51415 (* 3.0 ?x49416)))
 (let ((?x49413 (* l_0_15_68 l_0_15_68)))
 (let ((?x51413 (* 3.0 ?x49413)))
 (let ((?x49410 (* l_0_15_67 l_0_15_67)))
 (let ((?x51411 (* 3.0 ?x49410)))
 (let ((?x51406 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x51403 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x52787 (+ (+ (- (- (* (* (- 3.0) l_0_15_46) l_0_15_46) ?x51403) ?x51406) ?x51411) ?x51413)))
 (= (+ ?x52787 ?x51415) 0.0)))))))))))
(assert
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x49786 (* ?x49785 l_0_15_72)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x49783 (* ?x49782 l_0_15_71)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x49780 (* ?x49779 l_0_15_70)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x49774 (* ?x49773 l_0_15_51)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x49771 (* ?x49770 l_0_15_50)))
 (let ((?x52796 (+ (+ (- (- (* (* (- 6.0) l_0_15_46) l_0_15_49) ?x49771) ?x49774) ?x49780) ?x49783)))
 (= (+ ?x52796 ?x49786) 0.0)))))))))))))
(assert
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x51465 (* ?x49785 l_0_15_76)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x51463 (* ?x49782 l_0_15_75)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x51461 (* ?x49779 l_0_15_74)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x51458 (* ?x49773 l_0_15_55)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x51456 (* ?x49770 l_0_15_54)))
 (let ((?x52805 (+ (+ (- (- (* (* (- 6.0) l_0_15_46) l_0_15_53) ?x51456) ?x51458) ?x51461) ?x51463)))
 (= (+ ?x52805 ?x51465) 0.0)))))))))))))
(assert
 (let ((?x49785 (* 6.0 l_0_15_69)))
 (let ((?x51556 (* ?x49785 l_0_15_81)))
 (let ((?x49782 (* 6.0 l_0_15_68)))
 (let ((?x51554 (* ?x49782 l_0_15_80)))
 (let ((?x49779 (* 6.0 l_0_15_67)))
 (let ((?x51552 (* ?x49779 l_0_15_79)))
 (let ((?x49773 (* 6.0 l_0_15_48)))
 (let ((?x51549 (* ?x49773 l_0_15_60)))
 (let ((?x49770 (* 6.0 l_0_15_47)))
 (let ((?x51547 (* ?x49770 l_0_15_59)))
 (let ((?x52810 (+ (+ (- (- (* (* (- 6.0) l_0_15_46) l_0_15_58) ?x51547) ?x51549) ?x51552) ?x51554)))
 (= (+ ?x52810 ?x51556) 0.0)))))))))))))
(assert
 (let ((?x49538 (* l_0_15_73 l_0_15_73)))
 (let ((?x49847 (* 3.0 ?x49538)))
 (let ((?x49535 (* l_0_15_72 l_0_15_72)))
 (let ((?x49845 (* 3.0 ?x49535)))
 (let ((?x49532 (* l_0_15_71 l_0_15_71)))
 (let ((?x49843 (* 3.0 ?x49532)))
 (let ((?x49529 (* l_0_15_70 l_0_15_70)))
 (let ((?x49841 (* 3.0 ?x49529)))
 (let ((?x49838 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x49835 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x49832 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x52818 (+ (- (- (- (* (* (- 3.0) l_0_15_49) l_0_15_49) ?x49832) ?x49835) ?x49838) ?x49841)))
 (= (+ (+ (+ ?x52818 ?x49843) ?x49845) ?x49847) 0.0))))))))))))))
(assert
 (let ((?x49928 (* 6.0 l_0_15_73)))
 (let ((?x49929 (* ?x49928 l_0_15_77)))
 (let ((?x49925 (* 6.0 l_0_15_72)))
 (let ((?x49926 (* ?x49925 l_0_15_76)))
 (let ((?x49922 (* 6.0 l_0_15_71)))
 (let ((?x49923 (* ?x49922 l_0_15_75)))
 (let ((?x49919 (* 6.0 l_0_15_70)))
 (let ((?x49920 (* ?x49919 l_0_15_74)))
 (let ((?x49916 (* 6.0 l_0_15_52)))
 (let ((?x49917 (* ?x49916 l_0_15_56)))
 (let ((?x49913 (* 6.0 l_0_15_51)))
 (let ((?x49914 (* ?x49913 l_0_15_55)))
 (let ((?x49910 (* 6.0 l_0_15_50)))
 (let ((?x49911 (* ?x49910 l_0_15_54)))
 (let ((?x41831 (+ (- (- (- (* (* (- 6.0) l_0_15_49) l_0_15_53) ?x49911) ?x49914) ?x49917) ?x49920)))
 (= (+ (+ (+ ?x41831 ?x49923) ?x49926) ?x49929) 0.0)))))))))))))))))
(assert
 (let ((?x49928 (* 6.0 l_0_15_73)))
 (let ((?x50042 (* ?x49928 l_0_15_82)))
 (let ((?x49925 (* 6.0 l_0_15_72)))
 (let ((?x50040 (* ?x49925 l_0_15_81)))
 (let ((?x49922 (* 6.0 l_0_15_71)))
 (let ((?x50038 (* ?x49922 l_0_15_80)))
 (let ((?x49919 (* 6.0 l_0_15_70)))
 (let ((?x50036 (* ?x49919 l_0_15_79)))
 (let ((?x49916 (* 6.0 l_0_15_52)))
 (let ((?x50034 (* ?x49916 l_0_15_61)))
 (let ((?x49913 (* 6.0 l_0_15_51)))
 (let ((?x50032 (* ?x49913 l_0_15_60)))
 (let ((?x49910 (* 6.0 l_0_15_50)))
 (let ((?x50030 (* ?x49910 l_0_15_59)))
 (let ((?x52841 (+ (- (- (- (* (* (- 6.0) l_0_15_49) l_0_15_58) ?x50030) ?x50032) ?x50034) ?x50036)))
 (= (+ (+ (+ ?x52841 ?x50038) ?x50040) ?x50042) 0.0)))))))))))))))))
(assert
 (let ((?x51669 (* l_0_15_78 l_0_15_78)))
 (let ((?x51670 (* 3.0 ?x51669)))
 (let ((?x51666 (* l_0_15_77 l_0_15_77)))
 (let ((?x51667 (* 3.0 ?x51666)))
 (let ((?x51663 (* l_0_15_76 l_0_15_76)))
 (let ((?x51664 (* 3.0 ?x51663)))
 (let ((?x51660 (* l_0_15_75 l_0_15_75)))
 (let ((?x51661 (* 3.0 ?x51660)))
 (let ((?x51657 (* l_0_15_74 l_0_15_74)))
 (let ((?x51658 (* 3.0 ?x51657)))
 (let ((?x51655 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x51652 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x51649 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x51646 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x52850 (- (- (- (- (* (* (- 3.0) l_0_15_53) l_0_15_53) ?x51646) ?x51649) ?x51652) ?x51655)))
 (= (+ (+ (+ (+ (+ ?x52850 ?x51658) ?x51661) ?x51664) ?x51667) ?x51670) 0.0)))))))))))))))))
(assert
 (let ((?x51797 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x51794 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x51791 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x51788 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x51785 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x51782 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x51779 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x51776 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x51773 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x52866 (- (- (- (- (* (* (- 6.0) l_0_15_53) l_0_15_58) ?x51773) ?x51776) ?x51779) ?x51782)))
 (= (+ (+ (+ (+ (+ ?x52866 ?x51785) ?x51788) ?x51791) ?x51794) ?x51797) 0.0))))))))))))
(assert
 (let ((?x51944 (* l_0_15_84 l_0_15_84)))
 (let ((?x51945 (* 3.0 ?x51944)))
 (let ((?x51941 (* l_0_15_83 l_0_15_83)))
 (let ((?x51942 (* 3.0 ?x51941)))
 (let ((?x51938 (* l_0_15_82 l_0_15_82)))
 (let ((?x51939 (* 3.0 ?x51938)))
 (let ((?x51935 (* l_0_15_81 l_0_15_81)))
 (let ((?x51936 (* 3.0 ?x51935)))
 (let ((?x51932 (* l_0_15_80 l_0_15_80)))
 (let ((?x51933 (* 3.0 ?x51932)))
 (let ((?x51929 (* l_0_15_79 l_0_15_79)))
 (let ((?x51930 (* 3.0 ?x51929)))
 (let ((?x51927 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x51924 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x51921 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x51918 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x51915 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x52884 (- (- (- (- (* (* (- 3.0) l_0_15_58) l_0_15_58) ?x51915) ?x51918) ?x51921) ?x51924)))
 (let ((?x52891 (+ (+ (+ (+ (+ (+ (- ?x52884 ?x51927) ?x51930) ?x51933) ?x51936) ?x51939) ?x51942) ?x51945)))
 (= ?x52891 0.0)))))))))))))))))))))
(assert
 (let ((?x49416 (* l_0_15_69 l_0_15_69)))
 (let ((?x49413 (* l_0_15_68 l_0_15_68)))
 (let ((?x49410 (* l_0_15_67 l_0_15_67)))
 (let ((?x15191 (* l_0_15_48 l_0_15_48)))
 (let ((?x52897 (- (+ (+ (* l_0_15_46 l_0_15_46) (* l_0_15_47 l_0_15_47)) ?x15191) ?x49410)))
 (= (- (- ?x52897 ?x49413) ?x49416) 0.0)))))))
(assert
 (let ((?x52933 (* l_0_15_90 l_0_15_90)))
 (let ((?x52931 (* l_0_15_89 l_0_15_89)))
 (let ((?x52929 (* l_0_15_88 l_0_15_88)))
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x52173 (* ?x49211 l_0_15_76)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x52171 (* ?x49208 l_0_15_75)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x52169 (* ?x49205 l_0_15_74)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x52165 (* ?x49190 l_0_15_55)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x52163 (* ?x49187 l_0_15_54)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x52161 (* ?x49184 l_0_15_53)))
 (let ((?x52921 (* l_0_15_174 l_0_15_174)))
 (let ((?x52919 (* l_0_15_173 l_0_15_173)))
 (let ((?x52917 (* l_0_15_172 l_0_15_172)))
 (let ((?x52915 (* l_0_15_153 l_0_15_153)))
 (let ((?x52913 (* l_0_15_152 l_0_15_152)))
 (let ((?x52911 (* l_0_15_151 l_0_15_151)))
 (let ((?x52909 (* l_0_15_111 l_0_15_111)))
 (let ((?x52910 (+ (+ (* l_0_15_109 l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x52909)))
 (let ((?x52923 (+ (+ (+ (+ (- (- (- ?x52910 ?x52911) ?x52913) ?x52915) ?x52917) ?x52919) ?x52921) ?x52161)))
 (let ((?x52932 (- (- (- (- (- (+ (+ ?x52923 ?x52163) ?x52165) ?x52169) ?x52171) ?x52173) ?x52929) ?x52931)))
 (= (- ?x52932 ?x52933) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x49211 (* 2.0 l_0_15_69)))
 (let ((?x52277 (* ?x49211 l_0_15_81)))
 (let ((?x49208 (* 2.0 l_0_15_68)))
 (let ((?x52275 (* ?x49208 l_0_15_80)))
 (let ((?x49205 (* 2.0 l_0_15_67)))
 (let ((?x52273 (* ?x49205 l_0_15_79)))
 (let ((?x49190 (* 2.0 l_0_15_48)))
 (let ((?x52269 (* ?x49190 l_0_15_60)))
 (let ((?x49187 (* 2.0 l_0_15_47)))
 (let ((?x52267 (* ?x49187 l_0_15_59)))
 (let ((?x49184 (* 2.0 l_0_15_46)))
 (let ((?x52265 (* ?x49184 l_0_15_58)))
 (let ((?x51392 (* l_0_15_132 l_0_15_132)))
 (let ((?x52951 (- (- (* (- l_0_15_130) l_0_15_130) (* l_0_15_131 l_0_15_131)) ?x51392)))
 (= (- (- (- (+ (+ (+ ?x52951 ?x52265) ?x52267) ?x52269) ?x52273) ?x52275) ?x52277) 0.0))))))))))))))))
(assert
 (let ((?x50498 (* 2.0 l_0_15_90)))
 (let ((?x52979 (* ?x50498 l_0_15_97)))
 (let ((?x50495 (* 2.0 l_0_15_89)))
 (let ((?x52977 (* ?x50495 l_0_15_96)))
 (let ((?x50492 (* 2.0 l_0_15_88)))
 (let ((?x52975 (* ?x50492 l_0_15_95)))
 (let ((?x51669 (* l_0_15_78 l_0_15_78)))
 (let ((?x51666 (* l_0_15_77 l_0_15_77)))
 (let ((?x51663 (* l_0_15_76 l_0_15_76)))
 (let ((?x51660 (* l_0_15_75 l_0_15_75)))
 (let ((?x51657 (* l_0_15_74 l_0_15_74)))
 (let ((?x40557 (* l_0_15_57 l_0_15_57)))
 (let ((?x38950 (* l_0_15_56 l_0_15_56)))
 (let ((?x40548 (* l_0_15_55 l_0_15_55)))
 (let ((?x40580 (* l_0_15_54 l_0_15_54)))
 (let ((?x40579 (* l_0_15_53 l_0_15_53)))
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x52963 (* ?x50475 l_0_15_181)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x52961 (* ?x50472 l_0_15_180)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x20384 (* ?x50469 l_0_15_179)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x41909 (* ?x50466 l_0_15_160)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x31110 (* ?x50463 l_0_15_159)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x41895 (* ?x50460 l_0_15_158)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x31100 (* ?x50452 l_0_15_118)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x41898 (* ?x50449 l_0_15_117)))
 (let ((?x41904 (- (- (+ (+ (* (* 2.0 l_0_15_109) l_0_15_116) ?x41898) ?x31100) ?x41895) ?x31110)))
 (let ((?x52967 (+ (+ (+ (+ (+ (+ (- ?x41904 ?x41909) ?x20384) ?x52961) ?x52963) ?x40579) ?x40580) ?x40548)))
 (let ((?x52974 (- (- (- (- (- (+ (+ ?x52967 ?x38950) ?x40557) ?x51657) ?x51660) ?x51663) ?x51666) ?x51669)))
 (= (- (- (- ?x52974 ?x52975) ?x52977) ?x52979) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x52594 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x52591 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x52588 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x52585 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x52582 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x52579 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x52576 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x52573 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x52570 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x52567 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x53020 (* ?x50475 l_0_15_186)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x53018 (* ?x50472 l_0_15_185)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x53016 (* ?x50469 l_0_15_184)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x53014 (* ?x50466 l_0_15_165)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x53012 (* ?x50463 l_0_15_164)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x53010 (* ?x50460 l_0_15_163)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x51441 (* ?x49757 l_0_15_139)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x51439 (* ?x49754 l_0_15_138)))
 (let ((?x39523 (* 2.0 l_0_15_130)))
 (let ((?x51437 (* ?x39523 l_0_15_137)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x53005 (* ?x50452 l_0_15_123)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x53003 (* ?x50449 l_0_15_122)))
 (let ((?x50445 (* 2.0 l_0_15_109)))
 (let ((?x53001 (* ?x50445 l_0_15_121)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x52999 (* ?x50834 l_0_15_90)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x52997 (* ?x50831 l_0_15_89)))
 (let ((?x53004 (+ (+ (- (- (* (* (- 2.0) l_0_15_100) l_0_15_88) ?x52997) ?x52999) ?x53001) ?x53003)))
 (let ((?x53015 (- (- (- (- (- (- (+ ?x53004 ?x53005) ?x51437) ?x51439) ?x51441) ?x53010) ?x53012) ?x53014)))
 (let ((?x53025 (+ (+ (+ (+ (+ (+ (+ ?x53015 ?x53016) ?x53018) ?x53020) ?x52567) ?x52570) ?x52573) ?x52576)))
 (= (- (- (- (- (- (+ ?x53025 ?x52579) ?x52582) ?x52585) ?x52588) ?x52591) ?x52594) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51944 (* l_0_15_84 l_0_15_84)))
 (let ((?x51941 (* l_0_15_83 l_0_15_83)))
 (let ((?x51938 (* l_0_15_82 l_0_15_82)))
 (let ((?x51935 (* l_0_15_81 l_0_15_81)))
 (let ((?x51932 (* l_0_15_80 l_0_15_80)))
 (let ((?x51929 (* l_0_15_79 l_0_15_79)))
 (let ((?x28405 (* l_0_15_63 l_0_15_63)))
 (let ((?x28350 (* l_0_15_62 l_0_15_62)))
 (let ((?x18797 (* l_0_15_61 l_0_15_61)))
 (let ((?x51961 (* l_0_15_60 l_0_15_60)))
 (let ((?x18772 (* l_0_15_59 l_0_15_59)))
 (let ((?x18676 (* l_0_15_58 l_0_15_58)))
 (let ((?x49757 (* 2.0 l_0_15_132)))
 (let ((?x51530 (* ?x49757 l_0_15_144)))
 (let ((?x49754 (* 2.0 l_0_15_131)))
 (let ((?x51528 (* ?x49754 l_0_15_143)))
 (let ((?x19577 (+ (+ (- (- (* (* (- 2.0) l_0_15_130) l_0_15_142) ?x51528) ?x51530) ?x18676) ?x18772)))
 (let ((?x42072 (- (- (- (+ (+ (+ (+ ?x19577 ?x51961) ?x18797) ?x28350) ?x28405) ?x51929) ?x51932) ?x51935)))
 (= (- (- (- ?x42072 ?x51938) ?x51941) ?x51944) 0.0))))))))))))))))))))
(assert
 (let ((?x53117 (* l_0_15_99 l_0_15_99)))
 (let ((?x53115 (* l_0_15_98 l_0_15_98)))
 (let ((?x53113 (* l_0_15_97 l_0_15_97)))
 (let ((?x53111 (* l_0_15_96 l_0_15_96)))
 (let ((?x53109 (* l_0_15_95 l_0_15_95)))
 (let ((?x53107 (* l_0_15_183 l_0_15_183)))
 (let ((?x53105 (* l_0_15_182 l_0_15_182)))
 (let ((?x53103 (* l_0_15_181 l_0_15_181)))
 (let ((?x53101 (* l_0_15_180 l_0_15_180)))
 (let ((?x53099 (* l_0_15_179 l_0_15_179)))
 (let ((?x53097 (* l_0_15_162 l_0_15_162)))
 (let ((?x53095 (* l_0_15_161 l_0_15_161)))
 (let ((?x53093 (* l_0_15_160 l_0_15_160)))
 (let ((?x53091 (* l_0_15_159 l_0_15_159)))
 (let ((?x53089 (* l_0_15_158 l_0_15_158)))
 (let ((?x53087 (* l_0_15_120 l_0_15_120)))
 (let ((?x53085 (* l_0_15_119 l_0_15_119)))
 (let ((?x53083 (* l_0_15_118 l_0_15_118)))
 (let ((?x53084 (+ (+ (* l_0_15_116 l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53083)))
 (let ((?x53098 (- (- (- (- (- (+ (+ ?x53084 ?x53085) ?x53087) ?x53089) ?x53091) ?x53093) ?x53095) ?x53097)))
 (let ((?x53112 (- (- (+ (+ (+ (+ (+ ?x53098 ?x53099) ?x53101) ?x53103) ?x53105) ?x53107) ?x53109) ?x53111)))
 (= (- (- (- ?x53112 ?x53113) ?x53115) ?x53117) 0.0)))))))))))))))))))))))
(assert
 (let ((?x53187 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x53184 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x53181 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x53178 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x53175 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x53172 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x53169 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x53166 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x53163 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x53160 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x51619 (* l_0_15_141 l_0_15_141)))
 (let ((?x51617 (* l_0_15_140 l_0_15_140)))
 (let ((?x51613 (* l_0_15_139 l_0_15_139)))
 (let ((?x51611 (* l_0_15_138 l_0_15_138)))
 (let ((?x51609 (* l_0_15_137 l_0_15_137)))
 (let ((?x53152 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x53149 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x53146 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x53143 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x53140 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x53137 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x50837 (* 2.0 l_0_15_103)))
 (let ((?x53134 (* ?x50837 l_0_15_98)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x53132 (* ?x50834 l_0_15_97)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x20730 (* ?x50831 l_0_15_96)))
 (let ((?x53138 (- (- (- (- (* (* (- 2.0) l_0_15_100) l_0_15_95) ?x20730) ?x53132) ?x53134) ?x53137)))
 (let ((?x53155 (- (- (+ (+ (+ (+ (+ ?x53138 ?x53140) ?x53143) ?x53146) ?x53149) ?x53152) ?x51609) ?x51611)))
 (let ((?x53170 (- (- (- (- (- (- (- ?x53155 ?x51613) ?x51617) ?x51619) ?x53160) ?x53163) ?x53166) ?x53169)))
 (= (+ (+ (+ (+ (+ (- ?x53170 ?x53172) ?x53175) ?x53178) ?x53181) ?x53184) ?x53187) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x53286 (* l_0_15_189 l_0_15_189)))
 (let ((?x53284 (* l_0_15_188 l_0_15_188)))
 (let ((?x53282 (* l_0_15_187 l_0_15_187)))
 (let ((?x53280 (* l_0_15_186 l_0_15_186)))
 (let ((?x53278 (* l_0_15_185 l_0_15_185)))
 (let ((?x53276 (* l_0_15_184 l_0_15_184)))
 (let ((?x53274 (* l_0_15_168 l_0_15_168)))
 (let ((?x53272 (* l_0_15_167 l_0_15_167)))
 (let ((?x53270 (* l_0_15_166 l_0_15_166)))
 (let ((?x53268 (* l_0_15_165 l_0_15_165)))
 (let ((?x53266 (* l_0_15_164 l_0_15_164)))
 (let ((?x53264 (* l_0_15_163 l_0_15_163)))
 (let ((?x51745 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51742 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51736 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51733 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51730 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x53257 (* l_0_15_126 l_0_15_126)))
 (let ((?x53255 (* l_0_15_125 l_0_15_125)))
 (let ((?x53253 (* l_0_15_124 l_0_15_124)))
 (let ((?x53251 (* l_0_15_123 l_0_15_123)))
 (let ((?x53249 (* l_0_15_122 l_0_15_122)))
 (let ((?x53247 (* l_0_15_121 l_0_15_121)))
 (let ((?x53245 (* l_0_15_105 l_0_15_105)))
 (let ((?x53243 (* l_0_15_104 l_0_15_104)))
 (let ((?x53241 (* l_0_15_103 l_0_15_103)))
 (let ((?x53226 (* l_0_15_102 l_0_15_102)))
 (let ((?x53227 (- (- (* (- l_0_15_100) l_0_15_100) (* l_0_15_101 l_0_15_101)) ?x53226)))
 (let ((?x53254 (+ (+ (+ (+ (- (- (- ?x53227 ?x53241) ?x53243) ?x53245) ?x53247) ?x53249) ?x53251) ?x53253)))
 (let ((?x53263 (- (- (- (- (- (+ (+ ?x53254 ?x53255) ?x53257) ?x51730) ?x51733) ?x51736) ?x51742) ?x51745)))
 (let ((?x53277 (+ (- (- (- (- (- (- ?x53263 ?x53264) ?x53266) ?x53268) ?x53270) ?x53272) ?x53274) ?x53276)))
 (= (+ (+ (+ (+ (+ ?x53277 ?x53278) ?x53280) ?x53282) ?x53284) ?x53286) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x51129 (* l_0_15_85 l_0_15_85)))
 (let ((?x51113 (* l_0_15_169 l_0_15_169)))
 (let ((?x53311 (- (+ (* (- l_0_15_106) l_0_15_106) (* l_0_15_148 l_0_15_148)) ?x51113)))
 (= (+ ?x53311 ?x51129) 0.0)))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51467 (* ?x49931 l_0_15_88)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51445 (* ?x49890 l_0_15_172)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51443 (* ?x49887 l_0_15_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_109) ?x51443) ?x51445) ?x51467) 0.0))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x49932 (* ?x49931 l_0_15_91)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x49891 (* ?x49890 l_0_15_175)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x49888 (* ?x49887 l_0_15_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_112) ?x49888) ?x49891) ?x49932) 0.0))))))))
(assert
 (let ((?x49931 (* 2.0 l_0_15_85)))
 (let ((?x51672 (* ?x49931 l_0_15_95)))
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51625 (* ?x49890 l_0_15_179)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51621 (* ?x49887 l_0_15_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_116) ?x51621) ?x51625) ?x51672) 0.0))))))))
(assert
 (let ((?x49890 (* 2.0 l_0_15_169)))
 (let ((?x51752 (* ?x49890 l_0_15_184)))
 (let ((?x49887 (* 2.0 l_0_15_148)))
 (let ((?x51747 (* ?x49887 l_0_15_163)))
 (let ((?x49863 (* 2.0 l_0_15_106)))
 (let ((?x51720 (* ?x49863 l_0_15_121)))
 (= (- (+ (- (* (* 2.0 l_0_15_100) l_0_15_85) ?x51720) ?x51747) ?x51752) 0.0))))))))
(assert
 (let ((?x52933 (* l_0_15_90 l_0_15_90)))
 (let ((?x52931 (* l_0_15_89 l_0_15_89)))
 (let ((?x52929 (* l_0_15_88 l_0_15_88)))
 (let ((?x52921 (* l_0_15_174 l_0_15_174)))
 (let ((?x52919 (* l_0_15_173 l_0_15_173)))
 (let ((?x52917 (* l_0_15_172 l_0_15_172)))
 (let ((?x52915 (* l_0_15_153 l_0_15_153)))
 (let ((?x52913 (* l_0_15_152 l_0_15_152)))
 (let ((?x52911 (* l_0_15_151 l_0_15_151)))
 (let ((?x52909 (* l_0_15_111 l_0_15_111)))
 (let ((?x53353 (- (- (* (- l_0_15_109) l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x52909)))
 (let ((?x53360 (+ (- (- (- (+ (+ (+ ?x53353 ?x52911) ?x52913) ?x52915) ?x52917) ?x52919) ?x52921) ?x52929)))
 (= (+ (+ ?x53360 ?x52931) ?x52933) 0.0))))))))))))))
(assert
 (let ((?x50498 (* 2.0 l_0_15_90)))
 (let ((?x50499 (* ?x50498 l_0_15_93)))
 (let ((?x50495 (* 2.0 l_0_15_89)))
 (let ((?x50496 (* ?x50495 l_0_15_92)))
 (let ((?x50492 (* 2.0 l_0_15_88)))
 (let ((?x50493 (* ?x50492 l_0_15_91)))
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x50476 (* ?x50475 l_0_15_177)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x50473 (* ?x50472 l_0_15_176)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x50470 (* ?x50469 l_0_15_175)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x50467 (* ?x50466 l_0_15_156)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x50464 (* ?x50463 l_0_15_155)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x50461 (* ?x50460 l_0_15_154)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x50453 (* ?x50452 l_0_15_114)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x50450 (* ?x50449 l_0_15_113)))
 (let ((?x31681 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_112) ?x50450) ?x50453) ?x50461) ?x50464)))
 (let ((?x42448 (+ (+ (+ (- (- (- (+ ?x31681 ?x50467) ?x50470) ?x50473) ?x50476) ?x50493) ?x50496) ?x50499)))
 (= ?x42448 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50498 (* 2.0 l_0_15_90)))
 (let ((?x52979 (* ?x50498 l_0_15_97)))
 (let ((?x50495 (* 2.0 l_0_15_89)))
 (let ((?x52977 (* ?x50495 l_0_15_96)))
 (let ((?x50492 (* 2.0 l_0_15_88)))
 (let ((?x52975 (* ?x50492 l_0_15_95)))
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x52963 (* ?x50475 l_0_15_181)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x52961 (* ?x50472 l_0_15_180)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x20384 (* ?x50469 l_0_15_179)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x41909 (* ?x50466 l_0_15_160)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x31110 (* ?x50463 l_0_15_159)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x41895 (* ?x50460 l_0_15_158)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x31100 (* ?x50452 l_0_15_118)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x41898 (* ?x50449 l_0_15_117)))
 (let ((?x21239 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_116) ?x41898) ?x31100) ?x41895) ?x31110)))
 (let ((?x21271 (+ (+ (+ (- (- (- (+ ?x21239 ?x41909) ?x20384) ?x52961) ?x52963) ?x52975) ?x52977) ?x52979)))
 (= ?x21271 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50475 (* 2.0 l_0_15_174)))
 (let ((?x53020 (* ?x50475 l_0_15_186)))
 (let ((?x50472 (* 2.0 l_0_15_173)))
 (let ((?x53018 (* ?x50472 l_0_15_185)))
 (let ((?x50469 (* 2.0 l_0_15_172)))
 (let ((?x53016 (* ?x50469 l_0_15_184)))
 (let ((?x50466 (* 2.0 l_0_15_153)))
 (let ((?x53014 (* ?x50466 l_0_15_165)))
 (let ((?x50463 (* 2.0 l_0_15_152)))
 (let ((?x53012 (* ?x50463 l_0_15_164)))
 (let ((?x50460 (* 2.0 l_0_15_151)))
 (let ((?x53010 (* ?x50460 l_0_15_163)))
 (let ((?x50452 (* 2.0 l_0_15_111)))
 (let ((?x53005 (* ?x50452 l_0_15_123)))
 (let ((?x50449 (* 2.0 l_0_15_110)))
 (let ((?x53003 (* ?x50449 l_0_15_122)))
 (let ((?x50445 (* 2.0 l_0_15_109)))
 (let ((?x53001 (* ?x50445 l_0_15_121)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x52999 (* ?x50834 l_0_15_90)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x52997 (* ?x50831 l_0_15_89)))
 (let ((?x41014 (- (- (+ (+ (* (* 2.0 l_0_15_100) l_0_15_88) ?x52997) ?x52999) ?x53001) ?x53003)))
 (let ((?x42534 (- (- (- (+ (+ (+ (- ?x41014 ?x53005) ?x53010) ?x53012) ?x53014) ?x53016) ?x53018) ?x53020)))
 (= ?x42534 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50632 (* l_0_15_94 l_0_15_94)))
 (let ((?x50630 (* l_0_15_93 l_0_15_93)))
 (let ((?x50628 (* l_0_15_92 l_0_15_92)))
 (let ((?x50626 (* l_0_15_91 l_0_15_91)))
 (let ((?x50612 (* l_0_15_178 l_0_15_178)))
 (let ((?x50610 (* l_0_15_177 l_0_15_177)))
 (let ((?x50608 (* l_0_15_176 l_0_15_176)))
 (let ((?x50606 (* l_0_15_175 l_0_15_175)))
 (let ((?x50604 (* l_0_15_157 l_0_15_157)))
 (let ((?x50602 (* l_0_15_156 l_0_15_156)))
 (let ((?x50600 (* l_0_15_155 l_0_15_155)))
 (let ((?x50598 (* l_0_15_154 l_0_15_154)))
 (let ((?x50592 (* l_0_15_115 l_0_15_115)))
 (let ((?x50590 (* l_0_15_114 l_0_15_114)))
 (let ((?x32089 (- (- (* (- l_0_15_112) l_0_15_112) (* l_0_15_113 l_0_15_113)) ?x50590)))
 (let ((?x42636 (- (- (+ (+ (+ (+ (- ?x32089 ?x50592) ?x50598) ?x50600) ?x50602) ?x50604) ?x50606) ?x50608)))
 (= (+ (+ (+ (+ (- (- ?x42636 ?x50610) ?x50612) ?x50626) ?x50628) ?x50630) ?x50632) 0.0))))))))))))))))))
(assert
 (let ((?x50759 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x50756 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x50753 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x50750 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x50736 (* 2.0 l_0_15_178)))
 (let ((?x50737 (* ?x50736 l_0_15_182)))
 (let ((?x50733 (* 2.0 l_0_15_177)))
 (let ((?x50734 (* ?x50733 l_0_15_181)))
 (let ((?x50730 (* 2.0 l_0_15_176)))
 (let ((?x50731 (* ?x50730 l_0_15_180)))
 (let ((?x50727 (* 2.0 l_0_15_175)))
 (let ((?x50728 (* ?x50727 l_0_15_179)))
 (let ((?x50724 (* 2.0 l_0_15_157)))
 (let ((?x50725 (* ?x50724 l_0_15_161)))
 (let ((?x50721 (* 2.0 l_0_15_156)))
 (let ((?x50722 (* ?x50721 l_0_15_160)))
 (let ((?x50718 (* 2.0 l_0_15_155)))
 (let ((?x50719 (* ?x50718 l_0_15_159)))
 (let ((?x50715 (* 2.0 l_0_15_154)))
 (let ((?x50716 (* ?x50715 l_0_15_158)))
 (let ((?x50704 (* 2.0 l_0_15_115)))
 (let ((?x50705 (* ?x50704 l_0_15_119)))
 (let ((?x50701 (* 2.0 l_0_15_114)))
 (let ((?x50702 (* ?x50701 l_0_15_118)))
 (let ((?x50698 (* 2.0 l_0_15_113)))
 (let ((?x50699 (* ?x50698 l_0_15_117)))
 (let ((?x42482 (+ (- (- (- (* (* (- 2.0) l_0_15_112) l_0_15_116) ?x50699) ?x50702) ?x50705) ?x50716)))
 (let ((?x53371 (- (- (- (- (+ (+ (+ ?x42482 ?x50719) ?x50722) ?x50725) ?x50728) ?x50731) ?x50734) ?x50737)))
 (= (+ (+ (+ (+ ?x53371 ?x50750) ?x50753) ?x50756) ?x50759) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x50736 (* 2.0 l_0_15_178)))
 (let ((?x50878 (* ?x50736 l_0_15_187)))
 (let ((?x50733 (* 2.0 l_0_15_177)))
 (let ((?x50876 (* ?x50733 l_0_15_186)))
 (let ((?x50730 (* 2.0 l_0_15_176)))
 (let ((?x50874 (* ?x50730 l_0_15_185)))
 (let ((?x50727 (* 2.0 l_0_15_175)))
 (let ((?x50872 (* ?x50727 l_0_15_184)))
 (let ((?x50724 (* 2.0 l_0_15_157)))
 (let ((?x50870 (* ?x50724 l_0_15_166)))
 (let ((?x50721 (* 2.0 l_0_15_156)))
 (let ((?x50868 (* ?x50721 l_0_15_165)))
 (let ((?x50718 (* 2.0 l_0_15_155)))
 (let ((?x50866 (* ?x50718 l_0_15_164)))
 (let ((?x50715 (* 2.0 l_0_15_154)))
 (let ((?x50864 (* ?x50715 l_0_15_163)))
 (let ((?x50704 (* 2.0 l_0_15_115)))
 (let ((?x50848 (* ?x50704 l_0_15_124)))
 (let ((?x50701 (* 2.0 l_0_15_114)))
 (let ((?x50846 (* ?x50701 l_0_15_123)))
 (let ((?x50698 (* 2.0 l_0_15_113)))
 (let ((?x50844 (* ?x50698 l_0_15_122)))
 (let ((?x50695 (* 2.0 l_0_15_112)))
 (let ((?x50842 (* ?x50695 l_0_15_121)))
 (let ((?x50837 (* 2.0 l_0_15_103)))
 (let ((?x50838 (* ?x50837 l_0_15_94)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x50835 (* ?x50834 l_0_15_93)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x50832 (* ?x50831 l_0_15_92)))
 (let ((?x53379 (- (+ (+ (+ (* (* 2.0 l_0_15_100) l_0_15_91) ?x50832) ?x50835) ?x50838) ?x50842)))
 (let ((?x53386 (+ (+ (+ (+ (- (- (- ?x53379 ?x50844) ?x50846) ?x50848) ?x50864) ?x50866) ?x50868) ?x50870)))
 (= (- (- (- (- ?x53386 ?x50872) ?x50874) ?x50876) ?x50878) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53117 (* l_0_15_99 l_0_15_99)))
 (let ((?x53115 (* l_0_15_98 l_0_15_98)))
 (let ((?x53113 (* l_0_15_97 l_0_15_97)))
 (let ((?x53111 (* l_0_15_96 l_0_15_96)))
 (let ((?x53109 (* l_0_15_95 l_0_15_95)))
 (let ((?x53107 (* l_0_15_183 l_0_15_183)))
 (let ((?x53105 (* l_0_15_182 l_0_15_182)))
 (let ((?x53103 (* l_0_15_181 l_0_15_181)))
 (let ((?x53101 (* l_0_15_180 l_0_15_180)))
 (let ((?x53099 (* l_0_15_179 l_0_15_179)))
 (let ((?x53097 (* l_0_15_162 l_0_15_162)))
 (let ((?x53095 (* l_0_15_161 l_0_15_161)))
 (let ((?x53093 (* l_0_15_160 l_0_15_160)))
 (let ((?x53091 (* l_0_15_159 l_0_15_159)))
 (let ((?x53089 (* l_0_15_158 l_0_15_158)))
 (let ((?x53087 (* l_0_15_120 l_0_15_120)))
 (let ((?x53085 (* l_0_15_119 l_0_15_119)))
 (let ((?x53083 (* l_0_15_118 l_0_15_118)))
 (let ((?x42730 (- (- (* (- l_0_15_116) l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53083)))
 (let ((?x53394 (+ (+ (+ (+ (+ (- (- ?x42730 ?x53085) ?x53087) ?x53089) ?x53091) ?x53093) ?x53095) ?x53097)))
 (let ((?x53401 (+ (+ (- (- (- (- (- ?x53394 ?x53099) ?x53101) ?x53103) ?x53105) ?x53107) ?x53109) ?x53111)))
 (= (+ (+ (+ ?x53401 ?x53113) ?x53115) ?x53117) 0.0)))))))))))))))))))))))
(assert
 (let ((?x53187 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x53184 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x53181 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x53178 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x53175 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x53172 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x53169 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x53166 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x53163 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x53160 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x53152 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x53149 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x53146 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x53143 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x53140 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x53137 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x50837 (* 2.0 l_0_15_103)))
 (let ((?x53134 (* ?x50837 l_0_15_98)))
 (let ((?x50834 (* 2.0 l_0_15_102)))
 (let ((?x53132 (* ?x50834 l_0_15_97)))
 (let ((?x50831 (* 2.0 l_0_15_101)))
 (let ((?x20730 (* ?x50831 l_0_15_96)))
 (let ((?x4030 (+ (+ (+ (+ (* (* 2.0 l_0_15_100) l_0_15_95) ?x20730) ?x53132) ?x53134) ?x53137)))
 (let ((?x53411 (+ (+ (- (- (- (- (- ?x4030 ?x53140) ?x53143) ?x53146) ?x53149) ?x53152) ?x53160) ?x53163)))
 (let ((?x53418 (- (- (- (- (+ (+ (+ ?x53411 ?x53166) ?x53169) ?x53172) ?x53175) ?x53178) ?x53181) ?x53184)))
 (= (- ?x53418 ?x53187) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53286 (* l_0_15_189 l_0_15_189)))
 (let ((?x53284 (* l_0_15_188 l_0_15_188)))
 (let ((?x53282 (* l_0_15_187 l_0_15_187)))
 (let ((?x53280 (* l_0_15_186 l_0_15_186)))
 (let ((?x53278 (* l_0_15_185 l_0_15_185)))
 (let ((?x53276 (* l_0_15_184 l_0_15_184)))
 (let ((?x53274 (* l_0_15_168 l_0_15_168)))
 (let ((?x53272 (* l_0_15_167 l_0_15_167)))
 (let ((?x53270 (* l_0_15_166 l_0_15_166)))
 (let ((?x53268 (* l_0_15_165 l_0_15_165)))
 (let ((?x53266 (* l_0_15_164 l_0_15_164)))
 (let ((?x53264 (* l_0_15_163 l_0_15_163)))
 (let ((?x53257 (* l_0_15_126 l_0_15_126)))
 (let ((?x53255 (* l_0_15_125 l_0_15_125)))
 (let ((?x53253 (* l_0_15_124 l_0_15_124)))
 (let ((?x53251 (* l_0_15_123 l_0_15_123)))
 (let ((?x53249 (* l_0_15_122 l_0_15_122)))
 (let ((?x53247 (* l_0_15_121 l_0_15_121)))
 (let ((?x53245 (* l_0_15_105 l_0_15_105)))
 (let ((?x53243 (* l_0_15_104 l_0_15_104)))
 (let ((?x53241 (* l_0_15_103 l_0_15_103)))
 (let ((?x53226 (* l_0_15_102 l_0_15_102)))
 (let ((?x32729 (+ (+ (* l_0_15_100 l_0_15_100) (* l_0_15_101 l_0_15_101)) ?x53226)))
 (let ((?x4436 (- (- (- (- (+ (+ (+ ?x32729 ?x53241) ?x53243) ?x53245) ?x53247) ?x53249) ?x53251) ?x53253)))
 (let ((?x43026 (+ (+ (+ (+ (+ (- (- ?x4436 ?x53255) ?x53257) ?x53264) ?x53266) ?x53268) ?x53270) ?x53272)))
 (let ((?x43045 (- (- (- (- (- (- (+ ?x43026 ?x53274) ?x53276) ?x53278) ?x53280) ?x53282) ?x53284) ?x53286)))
 (= ?x43045 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x51879 (* l_0_15_147 l_0_15_147)))
 (let ((?x51877 (* l_0_15_146 l_0_15_146)))
 (let ((?x51875 (* l_0_15_145 l_0_15_145)))
 (let ((?x51873 (* l_0_15_144 l_0_15_144)))
 (let ((?x43402 (- (- (* (- l_0_15_142) l_0_15_142) (* l_0_15_143 l_0_15_143)) ?x51873)))
 (= (- (- (- ?x43402 ?x51875) ?x51877) ?x51879) 0.0)))))))
(assert
 (>= l_0_15_1 0.0))
(assert
 (>= l_0_15_3 0.0))
(assert
 (>= l_0_15_6 0.0))
(assert
 (>= l_0_15_10 0.0))
(assert
 (>= l_0_15_15 0.0))
(assert
 (>= l_0_15_21 0.0))
(assert
 (>= l_0_15_22 0.0))
(assert
 (>= l_0_15_24 0.0))
(assert
 (>= l_0_15_27 0.0))
(assert
 (>= l_0_15_31 0.0))
(assert
 (>= l_0_15_36 0.0))
(assert
 (>= l_0_15_42 0.0))
(assert
 (>= l_0_15_43 0.0))
(assert
 (>= l_0_15_45 0.0))
(assert
 (>= l_0_15_48 0.0))
(assert
 (>= l_0_15_52 0.0))
(assert
 (>= l_0_15_57 0.0))
(assert
 (>= l_0_15_63 0.0))
(assert
 (>= l_0_15_64 0.0))
(assert
 (>= l_0_15_66 0.0))
(assert
 (>= l_0_15_69 0.0))
(assert
 (>= l_0_15_73 0.0))
(assert
 (>= l_0_15_78 0.0))
(assert
 (>= l_0_15_84 0.0))
(assert
 (>= l_0_15_85 0.0))
(assert
 (>= l_0_15_87 0.0))
(assert
 (>= l_0_15_90 0.0))
(assert
 (>= l_0_15_94 0.0))
(assert
 (>= l_0_15_99 0.0))
(assert
 (>= l_0_15_105 0.0))
(assert
 (>= l_0_15_106 0.0))
(assert
 (>= l_0_15_108 0.0))
(assert
 (>= l_0_15_111 0.0))
(assert
 (>= l_0_15_115 0.0))
(assert
 (>= l_0_15_120 0.0))
(assert
 (>= l_0_15_126 0.0))
(assert
 (>= l_0_15_127 0.0))
(assert
 (>= l_0_15_129 0.0))
(assert
 (>= l_0_15_132 0.0))
(assert
 (>= l_0_15_136 0.0))
(assert
 (>= l_0_15_141 0.0))
(assert
 (>= l_0_15_147 0.0))
(assert
 (>= l_0_15_148 0.0))
(assert
 (>= l_0_15_150 0.0))
(assert
 (>= l_0_15_153 0.0))
(assert
 (>= l_0_15_157 0.0))
(assert
 (>= l_0_15_162 0.0))
(assert
 (>= l_0_15_168 0.0))
(assert
 (>= l_0_15_169 0.0))
(assert
 (>= l_0_15_171 0.0))
(assert
 (>= l_0_15_174 0.0))
(assert
 (>= l_0_15_178 0.0))
(assert
 (>= l_0_15_183 0.0))
(assert
 (>= l_0_15_189 0.0))
(assert
 (>= l_0_15_190 0.0))
(assert
 (>= l_0_15_192 0.0))
(assert
 (>= l_0_15_195 0.0))
(assert
 (>= l_0_15_199 0.0))
(assert
 (>= l_0_15_204 0.0))
(assert
 (>= l_0_15_210 0.0))
(assert
 (>= l_0_15_211 0.0))
(assert
 (>= l_0_15_213 0.0))
(assert
 (>= l_0_15_216 0.0))
(assert
 (>= l_0_15_220 0.0))
(assert
 (>= l_0_15_225 0.0))
(assert
 (>= l_0_15_231 0.0))
(assert
 (>= l_0_15_232 0.0))
(assert
 (>= l_0_15_234 0.0))
(assert
 (>= l_0_15_237 0.0))
(assert
 (>= l_0_15_241 0.0))
(assert
 (>= l_0_15_246 0.0))
(assert
 (>= l_0_15_252 0.0))
(assert
 (let ((?x53480 (* l_0_16_3 l_0_16_3)))
 (let ((?x53481 (* 6.0 ?x53480)))
 (let ((?x53478 (* l_0_16_255 l_0_16_255)))
 (let ((?x53476 (* l_0_16_254 l_0_16_254)))
 (let ((?x53474 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53471 (* l_0_16_234 l_0_16_234)))
 (let ((?x53469 (* l_0_16_233 l_0_16_233)))
 (let ((?x53467 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x53464 (* l_0_16_213 l_0_16_213)))
 (let ((?x53462 (* l_0_16_212 l_0_16_212)))
 (let ((?x53459 (* l_0_16_2 l_0_16_2)))
 (let ((?x53460 (* 6.0 ?x53459)))
 (let ((?x53457 (* l_0_16_192 l_0_16_192)))
 (let ((?x53465 (- (- (+ (- (- _a_6_ (* l_0_16_191 l_0_16_191)) ?x53457) ?x53460) ?x53462) ?x53464)))
 (let ((?x53482 (+ (- (- (- (- (- (- ?x53465 ?x53467) ?x53469) ?x53471) ?x53474) ?x53476) ?x53478) ?x53481)))
 (let ((?x53488 (- (- ?x53482 (* (* 1.0 l_0_16_44) l_0_16_44)) (* (* 1.0 l_0_16_45) l_0_16_45))))
 (let ((?x53494 (+ (+ ?x53488 (* 1.0 (* l_0_16_65 l_0_16_65))) (* 1.0 (* l_0_16_66 l_0_16_66)))))
 (= (- ?x53494 7.0) 0.0)))))))))))))))))))
(assert
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x53628 (* ?x53627 l_0_16_72)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x53625 (* ?x53624 l_0_16_71)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x53622 (* ?x53621 l_0_16_70)))
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x53619 (* ?x53618 l_0_16_71)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x53616 (* ?x53615 l_0_16_70)))
 (let ((?x53613 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x53610 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x53607 (* ?x53606 l_0_16_51)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x53604 (* ?x53603 l_0_16_50)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x53601 (* ?x53600 l_0_16_49)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x53598 (* ?x53597 l_0_16_50)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x53595 (* ?x53594 l_0_16_49)))
 (let ((?x53592 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x53586 (* ?x53585 l_0_16_30)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x53583 (* ?x53582 l_0_16_29)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x53571 (* ?x53570 l_0_16_28)))
 (let ((?x53539 (- (- _a_7_ (* (* 2.0 l_0_16_193) l_0_16_196)) (* (* 2.0 l_0_16_194) l_0_16_197))))
 (let ((?x53545 (- (- ?x53539 (* (* 2.0 l_0_16_195) l_0_16_198)) (* (* 2.0 l_0_16_2) l_0_16_4))))
 (let ((?x53551 (- (- ?x53545 (* (* 2.0 l_0_16_214) l_0_16_217)) (* (* 2.0 l_0_16_215) l_0_16_218))))
 (let ((?x53557 (+ (- ?x53551 (* (* 2.0 l_0_16_216) l_0_16_219)) (* (* 2.0 l_0_16_23) l_0_16_25))))
 (let ((?x53563 (- (- ?x53557 (* (* 2.0 l_0_16_235) l_0_16_238)) (* (* 2.0 l_0_16_236) l_0_16_239))))
 (let ((?x53569 (+ (- ?x53563 (* (* 2.0 l_0_16_237) l_0_16_240)) (* (* 2.0 l_0_16_24) l_0_16_26))))
 (let ((?x53578 (- (- (- ?x53569 ?x53571) (* (* 2.0 l_0_16_256) l_0_16_259)) (* (* 2.0 l_0_16_257) l_0_16_260))))
 (let ((?x53590 (- (- (- (- ?x53578 (* (* 2.0 l_0_16_258) l_0_16_261)) ?x53583) ?x53586) (* (* 2.0 l_0_16_3) l_0_16_5))))
 (let ((?x53611 (+ (- (- (- (+ (+ (+ ?x53590 ?x53592) ?x53595) ?x53598) ?x53601) ?x53604) ?x53607) ?x53610)))
 (= (+ (+ (+ (- (- (+ ?x53611 ?x53613) ?x53616) ?x53619) ?x53622) ?x53625) ?x53628) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x53619 (* ?x53618 l_0_16_71)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x53616 (* ?x53615 l_0_16_70)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x53598 (* ?x53597 l_0_16_50)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x53595 (* ?x53594 l_0_16_49)))
 (let ((?x53480 (* l_0_16_3 l_0_16_3)))
 (let ((?x53749 (* 12.0 l_0_16_3)))
 (let ((?x53750 (* ?x53749 l_0_16_8)))
 (let ((?x53516 (* l_0_16_24 l_0_16_24)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x53740 (* ?x53739 l_0_16_29)))
 (let ((?x53509 (* l_0_16_23 l_0_16_23)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x53730 (* ?x53729 l_0_16_28)))
 (let ((?x53459 (* l_0_16_2 l_0_16_2)))
 (let ((?x53719 (* 12.0 l_0_16_2)))
 (let ((?x53720 (* ?x53719 l_0_16_7)))
 (let ((?x53718 (- (- _a_8_ (* (* 2.0 l_0_16_191) l_0_16_196)) (* (* 2.0 l_0_16_192) l_0_16_197))))
 (let ((?x53728 (- (- (- (+ ?x53718 ?x53720) ?x53459) (* (* 2.0 l_0_16_212) l_0_16_217)) (* (* 2.0 l_0_16_213) l_0_16_218))))
 (let ((?x53738 (- (- (+ (- ?x53728 ?x53730) ?x53509) (* (* 2.0 l_0_16_233) l_0_16_238)) (* (* 2.0 l_0_16_234) l_0_16_239))))
 (let ((?x53748 (- (- (+ (- ?x53738 ?x53740) ?x53516) (* (* 2.0 l_0_16_254) l_0_16_259)) (* (* 2.0 l_0_16_255) l_0_16_260))))
 (= (+ (+ (- (- (- (+ ?x53748 ?x53750) ?x53480) ?x53595) ?x53598) ?x53616) ?x53619) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x53854 (* ?x53618 l_0_16_68)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x53852 (* ?x53615 l_0_16_67)))
 (let ((?x53849 (* l_0_16_6 l_0_16_6)))
 (let ((?x53850 (* 6.0 ?x53849)))
 (let ((?x53846 (* l_0_16_5 l_0_16_5)))
 (let ((?x53847 (* 6.0 ?x53846)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x53835 (* ?x53597 l_0_16_47)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x53833 (* ?x53594 l_0_16_46)))
 (let ((?x53830 (* l_0_16_4 l_0_16_4)))
 (let ((?x53831 (* 6.0 ?x53830)))
 (let ((?x53828 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x53825 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x53822 (* l_0_16_258 l_0_16_258)))
 (let ((?x53820 (* l_0_16_257 l_0_16_257)))
 (let ((?x53818 (* l_0_16_256 l_0_16_256)))
 (let ((?x53816 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x53813 (* l_0_16_237 l_0_16_237)))
 (let ((?x53811 (* l_0_16_236 l_0_16_236)))
 (let ((?x53809 (* l_0_16_235 l_0_16_235)))
 (let ((?x53807 (* l_0_16_216 l_0_16_216)))
 (let ((?x53805 (* l_0_16_215 l_0_16_215)))
 (let ((?x53803 (* l_0_16_214 l_0_16_214)))
 (let ((?x53801 (* l_0_16_195 l_0_16_195)))
 (let ((?x32185 (* l_0_16_194 l_0_16_194)))
 (let ((?x53806 (- (- (- (- (- _a_9_ (* l_0_16_193 l_0_16_193)) ?x32185) ?x53801) ?x53803) ?x53805)))
 (let ((?x53821 (- (- (- (- (- (- (- ?x53806 ?x53807) ?x53809) ?x53811) ?x53813) ?x53816) ?x53818) ?x53820)))
 (let ((?x53839 (- (+ (+ (+ (- (- (- ?x53821 ?x53822) ?x53825) ?x53828) ?x53831) ?x53833) ?x53835) (* (* 1.0 l_0_16_46) l_0_16_46))))
 (let ((?x53845 (- (- ?x53839 (* (* 1.0 l_0_16_47) l_0_16_47)) (* (* 1.0 l_0_16_48) l_0_16_48))))
 (let ((?x53858 (+ (- (- (+ (+ ?x53845 ?x53847) ?x53850) ?x53852) ?x53854) (* 1.0 (* l_0_16_67 l_0_16_67)))))
 (let ((?x53864 (+ (+ ?x53858 (* 1.0 (* l_0_16_68 l_0_16_68))) (* 1.0 (* l_0_16_69 l_0_16_69)))))
 (= ?x53864 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53990 (* l_0_16_9 l_0_16_9)))
 (let ((?x53991 (* 6.0 ?x53990)))
 (let ((?x53987 (* l_0_16_8 l_0_16_8)))
 (let ((?x53988 (* 6.0 ?x53987)))
 (let ((?x53972 (* l_0_16_7 l_0_16_7)))
 (let ((?x53973 (* 6.0 ?x53972)))
 (let ((?x53958 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x53955 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x53950 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x53947 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x53944 (* l_0_16_262 l_0_16_262)))
 (let ((?x53942 (* l_0_16_261 l_0_16_261)))
 (let ((?x53940 (* l_0_16_260 l_0_16_260)))
 (let ((?x53938 (* l_0_16_259 l_0_16_259)))
 (let ((?x53936 (* l_0_16_241 l_0_16_241)))
 (let ((?x53934 (* l_0_16_240 l_0_16_240)))
 (let ((?x53930 (* l_0_16_239 l_0_16_239)))
 (let ((?x53928 (* l_0_16_238 l_0_16_238)))
 (let ((?x53924 (* l_0_16_220 l_0_16_220)))
 (let ((?x53922 (* l_0_16_219 l_0_16_219)))
 (let ((?x53920 (* l_0_16_218 l_0_16_218)))
 (let ((?x53918 (* l_0_16_217 l_0_16_217)))
 (let ((?x53914 (* l_0_16_199 l_0_16_199)))
 (let ((?x53912 (* l_0_16_198 l_0_16_198)))
 (let ((?x53910 (* l_0_16_197 l_0_16_197)))
 (let ((?x53908 (* l_0_16_196 l_0_16_196)))
 (let ((?x53913 (- (- (- (+ _a_10_ (* 6.0 (* l_0_16_10 l_0_16_10))) ?x53908) ?x53910) ?x53912)))
 (let ((?x53921 (- (- (- (- ?x53913 ?x53914) (* (* 2.0 l_0_16_2) l_0_16_7)) ?x53918) ?x53920)))
 (let ((?x53929 (- (+ (- (- ?x53921 ?x53922) ?x53924) (* (* 2.0 l_0_16_23) l_0_16_28)) ?x53928)))
 (let ((?x53937 (- (- (+ (- ?x53929 ?x53930) (* (* 2.0 l_0_16_24) l_0_16_29)) ?x53934) ?x53936)))
 (let ((?x53953 (- (- (- (- (- (- (- ?x53937 ?x53938) ?x53940) ?x53942) ?x53944) ?x53947) ?x53950) (* (* 2.0 l_0_16_3) l_0_16_8))))
 (let ((?x53965 (- (- (- (- ?x53953 ?x53955) ?x53958) (* (* 1.0 l_0_16_49) l_0_16_49)) (* (* 1.0 l_0_16_50) l_0_16_50))))
 (let ((?x53971 (- (- ?x53965 (* (* 1.0 l_0_16_51) l_0_16_51)) (* (* 1.0 l_0_16_52) l_0_16_52))))
 (let ((?x53980 (+ (+ (+ ?x53971 ?x53973) (* 1.0 (* l_0_16_70 l_0_16_70))) (* 1.0 (* l_0_16_71 l_0_16_71)))))
 (let ((?x53986 (+ (+ ?x53980 (* 1.0 (* l_0_16_72 l_0_16_72))) (* 1.0 (* l_0_16_73 l_0_16_73)))))
 (= (+ (+ ?x53986 ?x53988) ?x53991) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53492 (* l_0_16_66 l_0_16_66)))
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x53854 (* ?x53618 l_0_16_68)))
 (let ((?x53489 (* l_0_16_65 l_0_16_65)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x53852 (* ?x53615 l_0_16_67)))
 (let ((?x53527 (* l_0_16_45 l_0_16_45)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x53835 (* ?x53597 l_0_16_47)))
 (let ((?x53523 (* l_0_16_44 l_0_16_44)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x53833 (* ?x53594 l_0_16_46)))
 (let ((?x53749 (* 12.0 l_0_16_3)))
 (let ((?x54029 (* ?x53749 l_0_16_5)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x54023 (* ?x53739 l_0_16_26)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x43817 (* ?x53729 l_0_16_25)))
 (let ((?x53719 (* 12.0 l_0_16_2)))
 (let ((?x43803 (* ?x53719 l_0_16_4)))
 (let ((?x43800 (- (- _a_11_ (* (* 2.0 l_0_16_191) l_0_16_193)) (* (* 2.0 l_0_16_192) l_0_16_194))))
 (let ((?x43790 (- (- (+ ?x43800 ?x43803) (* (* 2.0 l_0_16_212) l_0_16_214)) (* (* 2.0 l_0_16_213) l_0_16_215))))
 (let ((?x54022 (- (- (- ?x43790 ?x43817) (* (* 2.0 l_0_16_233) l_0_16_235)) (* (* 2.0 l_0_16_234) l_0_16_236))))
 (let ((?x54028 (- (- (- ?x54022 ?x54023) (* (* 2.0 l_0_16_254) l_0_16_256)) (* (* 2.0 l_0_16_255) l_0_16_257))))
 (let ((?x54036 (- (+ (+ (- (+ (- (+ ?x54028 ?x54029) ?x53833) ?x53523) ?x53835) ?x53527) ?x53852) ?x53489)))
 (= (- (+ ?x54036 ?x53854) ?x53492) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53492 (* l_0_16_66 l_0_16_66)))
 (let ((?x54114 (* 3.0 ?x53492)))
 (let ((?x53489 (* l_0_16_65 l_0_16_65)))
 (let ((?x54112 (* 3.0 ?x53489)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x54107 (* ?x54106 l_0_16_65)))
 (let ((?x54104 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (let ((?x54101 (* (* 3.0 l_0_16_44) l_0_16_44)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x54095 (* ?x54094 l_0_16_44)))
 (let ((?x54092 (* l_0_16_253 l_0_16_253)))
 (let ((?x54090 (* l_0_16_232 l_0_16_232)))
 (let ((?x54088 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x54085 (* ?x54084 l_0_16_23)))
 (let ((?x54082 (* l_0_16_211 l_0_16_211)))
 (let ((?x54080 (* l_0_16_190 l_0_16_190)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x54078 (* ?x54077 l_0_16_128)))
 (let ((?x54074 (* l_0_16_1 l_0_16_1)))
 (let ((?x54075 (* 6.0 ?x54074)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x5467 (* ?x5440 l_0_16_2)))
 (let ((?x54091 (- (- (- (- (- (+ (+ ?x5467 ?x54075) ?x54078) ?x54080) ?x54082) ?x54085) ?x54088) ?x54090)))
 (let ((?x54102 (- (- (- (- ?x54091 ?x54092) ?x54095) (* (* 1.0 l_0_16_43) l_0_16_43)) ?x54101)))
 (let ((?x54113 (+ (+ (+ (- ?x54102 ?x54104) ?x54107) (* 1.0 (* l_0_16_64 l_0_16_64))) ?x54112)))
 (= (- (+ ?x54113 ?x54114) 3.0) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x53492 (* l_0_16_66 l_0_16_66)))
 (let ((?x54114 (* 3.0 ?x53492)))
 (let ((?x53489 (* l_0_16_65 l_0_16_65)))
 (let ((?x54112 (* 3.0 ?x53489)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x54167 (* ?x54166 l_0_16_65)))
 (let ((?x54104 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (let ((?x54101 (* (* 3.0 l_0_16_44) l_0_16_44)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x54162 (* ?x54161 l_0_16_44)))
 (let ((?x53480 (* l_0_16_3 l_0_16_3)))
 (let ((?x53481 (* 6.0 ?x53480)))
 (let ((?x53474 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53467 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x54085 (* ?x54084 l_0_16_23)))
 (let ((?x53459 (* l_0_16_2 l_0_16_2)))
 (let ((?x53460 (* 6.0 ?x53459)))
 (let ((?x54142 (* l_0_16_129 l_0_16_129)))
 (let ((?x54143 (+ (+ (* (* 12.0 l_0_16_1) l_0_16_2) (* l_0_16_128 l_0_16_128)) ?x54142)))
 (let ((?x54150 (- (+ (- ?x54143 (* (* 2.0 l_0_16_190) l_0_16_191)) ?x53460) (* (* 2.0 l_0_16_211) l_0_16_212))))
 (let ((?x54156 (- (- (- (- ?x54150 ?x54085) ?x53467) (* (* 2.0 l_0_16_232) l_0_16_233)) ?x53474)))
 (let ((?x54164 (- (- (+ (- ?x54156 (* (* 2.0 l_0_16_253) l_0_16_254)) ?x53481) ?x54162) ?x54101)))
 (= (- (+ (+ (+ (- ?x54164 ?x54104) ?x54167) ?x54112) ?x54114) 9.0) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x54221 (* ?x54220 l_0_16_71)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x54218 (* ?x54217 l_0_16_70)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x54215 (* ?x54106 l_0_16_70)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x54213 (* ?x54212 l_0_16_50)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x54210 (* ?x54209 l_0_16_49)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x54207 (* ?x54094 l_0_16_49)))
 (let ((?x21748 (* l_0_16_22 l_0_16_22)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x54204 (* ?x54084 l_0_16_28)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x54202 (* ?x54077 l_0_16_133)))
 (let ((?x54203 (+ (- (* (* 12.0 l_0_16_1) l_0_16_7) (* l_0_16_1 l_0_16_1)) ?x54202)))
 (let ((?x54219 (+ (+ (- (- (- (+ (- ?x54203 ?x54204) ?x21748) ?x54207) ?x54210) ?x54213) ?x54215) ?x54218)))
 (= (+ ?x54219 ?x54221) 0.0)))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x54221 (* ?x54220 l_0_16_71)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x54218 (* ?x54217 l_0_16_70)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x54259 (* ?x54166 l_0_16_70)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x54213 (* ?x54212 l_0_16_50)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x54210 (* ?x54209 l_0_16_49)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x54255 (* ?x54161 l_0_16_49)))
 (let ((?x53749 (* 12.0 l_0_16_3)))
 (let ((?x53750 (* ?x53749 l_0_16_8)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x53740 (* ?x53739 l_0_16_29)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x53730 (* ?x53729 l_0_16_28)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x54204 (* ?x54084 l_0_16_28)))
 (let ((?x53719 (* 12.0 l_0_16_2)))
 (let ((?x53720 (* ?x53719 l_0_16_7)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x54237 (* ?x54236 l_0_16_134)))
 (let ((?x5695 (* 2.0 l_0_16_128)))
 (let ((?x44034 (* ?x5695 l_0_16_133)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x54200 (* ?x5440 l_0_16_7)))
 (let ((?x54240 (- (+ (+ (+ (* (* (- 2.0) l_0_16_1) l_0_16_2) ?x54200) ?x44034) ?x54237) (* (* 2.0 l_0_16_190) l_0_16_196))))
 (let ((?x54246 (+ (- (+ ?x54240 ?x53720) (* (* 2.0 l_0_16_211) l_0_16_217)) (* (* 2.0 l_0_16_22) l_0_16_23))))
 (let ((?x54251 (- (- (- (- ?x54246 ?x54204) ?x53730) (* (* 2.0 l_0_16_232) l_0_16_238)) ?x53740)))
 (let ((?x54257 (- (- (+ (- ?x54251 (* (* 2.0 l_0_16_253) l_0_16_259)) ?x53750) ?x54255) ?x54210)))
 (= (+ (+ (+ (- ?x54257 ?x54213) ?x54259) ?x54218) ?x54221) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x54333 (* ?x54332 l_0_16_72)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x54330 (* ?x54329 l_0_16_71)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x54327 (* ?x54326 l_0_16_70)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x54259 (* ?x54166 l_0_16_70)))
 (let ((?x53613 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x53610 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x54321 (* ?x54320 l_0_16_51)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x54318 (* ?x54317 l_0_16_50)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x54255 (* ?x54161 l_0_16_49)))
 (let ((?x53592 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x53586 (* ?x53585 l_0_16_30)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x53583 (* ?x53582 l_0_16_29)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x53571 (* ?x53570 l_0_16_28)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x54305 (* ?x54304 l_0_16_135)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x54302 (* ?x54301 l_0_16_134)))
 (let ((?x54300 (+ (* (* (- 2.0) l_0_16_1) l_0_16_4) (* (* 2.0 l_0_16_130) l_0_16_133))))
 (let ((?x54309 (- (+ (+ (+ ?x54300 ?x54302) ?x54305) (* (* 2.0 l_0_16_22) l_0_16_25)) ?x53571)))
 (let ((?x54316 (- (+ (+ (- (- ?x54309 ?x53583) ?x53586) ?x53592) ?x54255) (* (* 6.0 l_0_16_46) l_0_16_49))))
 (let ((?x54331 (+ (+ (- (+ (+ (- (- ?x54316 ?x54318) ?x54321) ?x53610) ?x53613) ?x54259) ?x54327) ?x54330)))
 (= (+ ?x54331 ?x54333) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x53990 (* l_0_16_9 l_0_16_9)))
 (let ((?x53991 (* 6.0 ?x53990)))
 (let ((?x53987 (* l_0_16_8 l_0_16_8)))
 (let ((?x53988 (* 6.0 ?x53987)))
 (let ((?x53984 (* l_0_16_73 l_0_16_73)))
 (let ((?x54412 (* 3.0 ?x53984)))
 (let ((?x53981 (* l_0_16_72 l_0_16_72)))
 (let ((?x54410 (* 3.0 ?x53981)))
 (let ((?x53978 (* l_0_16_71 l_0_16_71)))
 (let ((?x54408 (* 3.0 ?x53978)))
 (let ((?x53975 (* l_0_16_70 l_0_16_70)))
 (let ((?x54406 (* 3.0 ?x53975)))
 (let ((?x53972 (* l_0_16_7 l_0_16_7)))
 (let ((?x53973 (* 6.0 ?x53972)))
 (let ((?x54403 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x54400 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x54397 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x53958 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x53955 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x53950 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x53947 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x54385 (* l_0_16_136 l_0_16_136)))
 (let ((?x54383 (* l_0_16_135 l_0_16_135)))
 (let ((?x54381 (* l_0_16_134 l_0_16_134)))
 (let ((?x54366 (* l_0_16_133 l_0_16_133)))
 (let ((?x53905 (* l_0_16_10 l_0_16_10)))
 (let ((?x53906 (* 6.0 ?x53905)))
 (let ((?x54384 (+ (+ (+ (+ (* (* (- 2.0) l_0_16_1) l_0_16_7) ?x53906) ?x54366) ?x54381) ?x54383)))
 (let ((?x54390 (- (- (+ (+ ?x54384 ?x54385) (* (* 2.0 l_0_16_22) l_0_16_28)) ?x53947) ?x53950)))
 (let ((?x54398 (- (- (- (- ?x54390 ?x53955) ?x53958) (* (* 3.0 l_0_16_49) l_0_16_49)) ?x54397)))
 (let ((?x54413 (+ (+ (+ (+ (+ (- (- ?x54398 ?x54400) ?x54403) ?x53973) ?x54406) ?x54408) ?x54410) ?x54412)))
 (= (+ (+ ?x54413 ?x53988) ?x53991) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x54512 (* ?x54511 l_0_16_91)))
 (let ((?x54508 (* 6.0 l_0_16_73)))
 (let ((?x54509 (* ?x54508 l_0_16_77)))
 (let ((?x54505 (* 6.0 l_0_16_72)))
 (let ((?x54506 (* ?x54505 l_0_16_76)))
 (let ((?x54502 (* 6.0 l_0_16_71)))
 (let ((?x54503 (* ?x54502 l_0_16_75)))
 (let ((?x54499 (* 6.0 l_0_16_70)))
 (let ((?x54500 (* ?x54499 l_0_16_74)))
 (let ((?x54496 (* 6.0 l_0_16_52)))
 (let ((?x54497 (* ?x54496 l_0_16_56)))
 (let ((?x54493 (* 6.0 l_0_16_51)))
 (let ((?x54494 (* ?x54493 l_0_16_55)))
 (let ((?x54490 (* 6.0 l_0_16_50)))
 (let ((?x54491 (* ?x54490 l_0_16_54)))
 (let ((?x54484 (* 12.0 l_0_16_31)))
 (let ((?x54485 (* ?x54484 l_0_16_35)))
 (let ((?x54481 (* 12.0 l_0_16_30)))
 (let ((?x54482 (* ?x54481 l_0_16_34)))
 (let ((?x54478 (* 12.0 l_0_16_29)))
 (let ((?x54479 (* ?x54478 l_0_16_33)))
 (let ((?x54475 (* 12.0 l_0_16_28)))
 (let ((?x54476 (* ?x54475 l_0_16_32)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x54471 (* ?x54470 l_0_16_175)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x54468 (* ?x54467 l_0_16_154)))
 (let ((?x54464 (* 2.0 l_0_16_136)))
 (let ((?x54465 (* ?x54464 l_0_16_140)))
 (let ((?x54461 (* 2.0 l_0_16_135)))
 (let ((?x54462 (* ?x54461 l_0_16_139)))
 (let ((?x54458 (* 2.0 l_0_16_134)))
 (let ((?x54459 (* ?x54458 l_0_16_138)))
 (let ((?x54455 (* 2.0 l_0_16_133)))
 (let ((?x54456 (* ?x54455 l_0_16_137)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x54453 (* ?x54452 l_0_16_9)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x54450 (* ?x54449 l_0_16_8)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x54447 (* ?x54446 l_0_16_7)))
 (let ((?x54440 (* 12.0 l_0_16_10)))
 (let ((?x54441 (* ?x54440 l_0_16_14)))
 (let ((?x54445 (+ (+ (* (* (- 2.0) l_0_16_1) l_0_16_11) ?x54441) (* (* 2.0 l_0_16_106) l_0_16_112))))
 (let ((?x54466 (+ (+ (+ (+ (+ (+ (+ ?x54445 ?x54447) ?x54450) ?x54453) ?x54456) ?x54459) ?x54462) ?x54465)))
 (let ((?x54477 (- (+ (+ (- ?x54466 ?x54468) ?x54471) (* (* 2.0 l_0_16_22) l_0_16_32)) ?x54476)))
 (let ((?x54489 (- (- (- (- ?x54477 ?x54479) ?x54482) ?x54485) (* (* 6.0 l_0_16_49) l_0_16_53))))
 (let ((?x54510 (+ (+ (+ (+ (- (- (- ?x54489 ?x54491) ?x54494) ?x54497) ?x54500) ?x54503) ?x54506) ?x54509)))
 (= (- ?x54510 ?x54512) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54508 (* 6.0 l_0_16_73)))
 (let ((?x54629 (* ?x54508 l_0_16_82)))
 (let ((?x54505 (* 6.0 l_0_16_72)))
 (let ((?x54627 (* ?x54505 l_0_16_81)))
 (let ((?x54502 (* 6.0 l_0_16_71)))
 (let ((?x54625 (* ?x54502 l_0_16_80)))
 (let ((?x54499 (* 6.0 l_0_16_70)))
 (let ((?x54623 (* ?x54499 l_0_16_79)))
 (let ((?x54496 (* 6.0 l_0_16_52)))
 (let ((?x54621 (* ?x54496 l_0_16_61)))
 (let ((?x54493 (* 6.0 l_0_16_51)))
 (let ((?x54619 (* ?x54493 l_0_16_60)))
 (let ((?x54490 (* 6.0 l_0_16_50)))
 (let ((?x54617 (* ?x54490 l_0_16_59)))
 (let ((?x54484 (* 12.0 l_0_16_31)))
 (let ((?x54613 (* ?x54484 l_0_16_40)))
 (let ((?x54481 (* 12.0 l_0_16_30)))
 (let ((?x54611 (* ?x54481 l_0_16_39)))
 (let ((?x54478 (* 12.0 l_0_16_29)))
 (let ((?x54609 (* ?x54478 l_0_16_38)))
 (let ((?x54475 (* 12.0 l_0_16_28)))
 (let ((?x54607 (* ?x54475 l_0_16_37)))
 (let ((?x54602 (* 12.0 l_0_16_18)))
 (let ((?x54603 (* ?x54602 l_0_16_9)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x54600 (* ?x54599 l_0_16_8)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x54597 (* ?x54596 l_0_16_7)))
 (let ((?x54464 (* 2.0 l_0_16_136)))
 (let ((?x54594 (* ?x54464 l_0_16_145)))
 (let ((?x54461 (* 2.0 l_0_16_135)))
 (let ((?x54592 (* ?x54461 l_0_16_144)))
 (let ((?x54458 (* 2.0 l_0_16_134)))
 (let ((?x54590 (* ?x54458 l_0_16_143)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x54202 (* ?x54077 l_0_16_133)))
 (let ((?x54440 (* 12.0 l_0_16_10)))
 (let ((?x54585 (* ?x54440 l_0_16_19)))
 (let ((?x54589 (+ (- (+ (* (* (- 2.0) l_0_16_1) l_0_16_16) ?x54585) ?x54202) (* (* 2.0 l_0_16_133) l_0_16_142))))
 (let ((?x54606 (+ (+ (+ (+ (+ (+ (+ ?x54589 ?x54590) ?x54592) ?x54594) ?x54597) ?x54600) ?x54603) (* (* 2.0 l_0_16_22) l_0_16_37))))
 (let ((?x54616 (- (- (- (- (- ?x54606 ?x54607) ?x54609) ?x54611) ?x54613) (* (* 6.0 l_0_16_49) l_0_16_58))))
 (let ((?x54630 (+ (+ (+ (+ (- (- (- ?x54616 ?x54617) ?x54619) ?x54621) ?x54623) ?x54625) ?x54627) ?x54629)))
 (= ?x54630 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x54801 (* ?x54800 l_0_16_92)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x54798 (* ?x54797 l_0_16_91)))
 (let ((?x54794 (* 2.0 l_0_16_73)))
 (let ((?x54795 (* ?x54794 l_0_16_77)))
 (let ((?x54791 (* 2.0 l_0_16_72)))
 (let ((?x54792 (* ?x54791 l_0_16_76)))
 (let ((?x54788 (* 2.0 l_0_16_71)))
 (let ((?x54789 (* ?x54788 l_0_16_75)))
 (let ((?x54785 (* 2.0 l_0_16_70)))
 (let ((?x54786 (* ?x54785 l_0_16_74)))
 (let ((?x54782 (* 2.0 l_0_16_52)))
 (let ((?x54783 (* ?x54782 l_0_16_56)))
 (let ((?x54779 (* 2.0 l_0_16_51)))
 (let ((?x54780 (* ?x54779 l_0_16_55)))
 (let ((?x54776 (* 2.0 l_0_16_50)))
 (let ((?x54777 (* ?x54776 l_0_16_54)))
 (let ((?x54773 (* 2.0 l_0_16_49)))
 (let ((?x54774 (* ?x54773 l_0_16_53)))
 (let ((?x54484 (* 12.0 l_0_16_31)))
 (let ((?x54485 (* ?x54484 l_0_16_35)))
 (let ((?x54481 (* 12.0 l_0_16_30)))
 (let ((?x54482 (* ?x54481 l_0_16_34)))
 (let ((?x54478 (* 12.0 l_0_16_29)))
 (let ((?x54479 (* ?x54478 l_0_16_33)))
 (let ((?x54475 (* 12.0 l_0_16_28)))
 (let ((?x54476 (* ?x54475 l_0_16_32)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x54715 (* ?x54714 l_0_16_176)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x54712 (* ?x54711 l_0_16_175)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x54709 (* ?x54708 l_0_16_155)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x54706 (* ?x54705 l_0_16_154)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x54453 (* ?x54452 l_0_16_9)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x54450 (* ?x54449 l_0_16_8)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x54447 (* ?x54446 l_0_16_7)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x54678 (* ?x54677 l_0_16_113)))
 (let ((?x54440 (* 12.0 l_0_16_10)))
 (let ((?x54441 (* ?x54440 l_0_16_14)))
 (let ((?x54698 (- (+ (+ ?x54441 (* (* 2.0 l_0_16_107) l_0_16_112)) ?x54678) (* (* 2.0 l_0_16_11) l_0_16_2))))
 (let ((?x54704 (+ (+ (- (+ ?x54698 ?x54447) (* (* 2.0 l_0_16_12) l_0_16_3)) ?x54450) ?x54453)))
 (let ((?x54719 (- (+ (+ (- (- ?x54704 ?x54706) ?x54709) ?x54712) ?x54715) (* (* 2.0 l_0_16_196) l_0_16_200))))
 (let ((?x54725 (- (- ?x54719 (* (* 2.0 l_0_16_197) l_0_16_201)) (* (* 2.0 l_0_16_198) l_0_16_202))))
 (let ((?x54731 (- (- ?x54725 (* (* 2.0 l_0_16_199) l_0_16_203)) (* (* 2.0 l_0_16_217) l_0_16_221))))
 (let ((?x54737 (- (- ?x54731 (* (* 2.0 l_0_16_218) l_0_16_222)) (* (* 2.0 l_0_16_219) l_0_16_223))))
 (let ((?x54742 (+ (- ?x54737 (* (* 2.0 l_0_16_220) l_0_16_224)) (* (* 2.0 l_0_16_23) l_0_16_32))))
 (let ((?x54748 (- (- ?x54742 (* (* 2.0 l_0_16_238) l_0_16_242)) (* (* 2.0 l_0_16_239) l_0_16_243))))
 (let ((?x54753 (- (+ ?x54748 (* (* 2.0 l_0_16_24) l_0_16_33)) (* (* 2.0 l_0_16_240) l_0_16_244))))
 (let ((?x54759 (- (- ?x54753 (* (* 2.0 l_0_16_241) l_0_16_245)) (* (* 2.0 l_0_16_259) l_0_16_263))))
 (let ((?x54765 (- (- ?x54759 (* (* 2.0 l_0_16_260) l_0_16_264)) (* (* 2.0 l_0_16_261) l_0_16_265))))
 (let ((?x54771 (- (- (- (- ?x54765 (* (* 2.0 l_0_16_262) l_0_16_266)) ?x54476) ?x54479) ?x54482)))
 (let ((?x54790 (+ (+ (- (- (- (- (- ?x54771 ?x54485) ?x54774) ?x54777) ?x54780) ?x54783) ?x54786) ?x54789)))
 (= (- (- (+ (+ ?x54790 ?x54792) ?x54795) ?x54798) ?x54801) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54794 (* 2.0 l_0_16_73)))
 (let ((?x55000 (* ?x54794 l_0_16_82)))
 (let ((?x54791 (* 2.0 l_0_16_72)))
 (let ((?x54998 (* ?x54791 l_0_16_81)))
 (let ((?x54788 (* 2.0 l_0_16_71)))
 (let ((?x54996 (* ?x54788 l_0_16_80)))
 (let ((?x54785 (* 2.0 l_0_16_70)))
 (let ((?x54994 (* ?x54785 l_0_16_79)))
 (let ((?x54782 (* 2.0 l_0_16_52)))
 (let ((?x54992 (* ?x54782 l_0_16_61)))
 (let ((?x54779 (* 2.0 l_0_16_51)))
 (let ((?x54990 (* ?x54779 l_0_16_60)))
 (let ((?x54776 (* 2.0 l_0_16_50)))
 (let ((?x54988 (* ?x54776 l_0_16_59)))
 (let ((?x54773 (* 2.0 l_0_16_49)))
 (let ((?x54986 (* ?x54773 l_0_16_58)))
 (let ((?x54484 (* 12.0 l_0_16_31)))
 (let ((?x54613 (* ?x54484 l_0_16_40)))
 (let ((?x54481 (* 12.0 l_0_16_30)))
 (let ((?x54611 (* ?x54481 l_0_16_39)))
 (let ((?x54478 (* 12.0 l_0_16_29)))
 (let ((?x54609 (* ?x54478 l_0_16_38)))
 (let ((?x54475 (* 12.0 l_0_16_28)))
 (let ((?x54607 (* ?x54475 l_0_16_37)))
 (let ((?x54602 (* 12.0 l_0_16_18)))
 (let ((?x54603 (* ?x54602 l_0_16_9)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x54600 (* ?x54599 l_0_16_8)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x54597 (* ?x54596 l_0_16_7)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x54237 (* ?x54236 l_0_16_134)))
 (let ((?x5695 (* 2.0 l_0_16_128)))
 (let ((?x44034 (* ?x5695 l_0_16_133)))
 (let ((?x54440 (* 12.0 l_0_16_10)))
 (let ((?x54585 (* ?x54440 l_0_16_19)))
 (let ((?x54940 (+ (- (- (- ?x54585 ?x44034) ?x54237) (* (* 2.0 l_0_16_16) l_0_16_2)) ?x54597)))
 (let ((?x54947 (- (+ (+ (- ?x54940 (* (* 2.0 l_0_16_17) l_0_16_3)) ?x54600) ?x54603) (* (* 2.0 l_0_16_196) l_0_16_205))))
 (let ((?x54951 (- (- ?x54947 (* (* 2.0 l_0_16_197) l_0_16_206)) (* (* 2.0 l_0_16_198) l_0_16_207))))
 (let ((?x54955 (- (- ?x54951 (* (* 2.0 l_0_16_199) l_0_16_208)) (* (* 2.0 l_0_16_217) l_0_16_226))))
 (let ((?x54959 (- (- ?x54955 (* (* 2.0 l_0_16_218) l_0_16_227)) (* (* 2.0 l_0_16_219) l_0_16_228))))
 (let ((?x54963 (+ (- ?x54959 (* (* 2.0 l_0_16_220) l_0_16_229)) (* (* 2.0 l_0_16_23) l_0_16_37))))
 (let ((?x54967 (- (- ?x54963 (* (* 2.0 l_0_16_238) l_0_16_247)) (* (* 2.0 l_0_16_239) l_0_16_248))))
 (let ((?x54971 (- (+ ?x54967 (* (* 2.0 l_0_16_24) l_0_16_38)) (* (* 2.0 l_0_16_240) l_0_16_249))))
 (let ((?x54975 (- (- ?x54971 (* (* 2.0 l_0_16_241) l_0_16_250)) (* (* 2.0 l_0_16_259) l_0_16_268))))
 (let ((?x54979 (- (- ?x54975 (* (* 2.0 l_0_16_260) l_0_16_269)) (* (* 2.0 l_0_16_261) l_0_16_270))))
 (let ((?x54984 (- (- (- (- ?x54979 (* (* 2.0 l_0_16_262) l_0_16_271)) ?x54607) ?x54609) ?x54611)))
 (let ((?x54997 (+ (+ (- (- (- (- (- ?x54984 ?x54613) ?x54986) ?x54988) ?x54990) ?x54992) ?x54994) ?x54996)))
 (= (+ (+ ?x54997 ?x54998) ?x55000) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x53628 (* ?x53627 l_0_16_72)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x53625 (* ?x53624 l_0_16_71)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x53622 (* ?x53621 l_0_16_70)))
 (let ((?x53849 (* l_0_16_6 l_0_16_6)))
 (let ((?x53846 (* l_0_16_5 l_0_16_5)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x53607 (* ?x53606 l_0_16_51)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x53604 (* ?x53603 l_0_16_50)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x53601 (* ?x53600 l_0_16_49)))
 (let ((?x53830 (* l_0_16_4 l_0_16_4)))
 (let ((?x43036 (* l_0_16_27 l_0_16_27)))
 (let ((?x55064 (- (+ (+ (* l_0_16_25 l_0_16_25) (* l_0_16_26 l_0_16_26)) ?x43036) ?x53830)))
 (let ((?x55075 (- (- (- (- (+ (+ (+ ?x55064 ?x53601) ?x53604) ?x53607) ?x53846) ?x53849) ?x53622) ?x53625)))
 (= (- ?x55075 ?x53628) 0.0))))))))))))))))))))
(assert
 (let ((?x53984 (* l_0_16_73 l_0_16_73)))
 (let ((?x53981 (* l_0_16_72 l_0_16_72)))
 (let ((?x53978 (* l_0_16_71 l_0_16_71)))
 (let ((?x53975 (* l_0_16_70 l_0_16_70)))
 (let ((?x43811 (* l_0_16_52 l_0_16_52)))
 (let ((?x54019 (* l_0_16_51 l_0_16_51)))
 (let ((?x33027 (* l_0_16_50 l_0_16_50)))
 (let ((?x43808 (* l_0_16_49 l_0_16_49)))
 (let ((?x55090 (+ (* (* 2.0 l_0_16_25) l_0_16_28) (* (* 2.0 l_0_16_26) l_0_16_29))))
 (let ((?x55096 (- (+ ?x55090 (* (* 2.0 l_0_16_27) l_0_16_30)) (* (* 2.0 l_0_16_4) l_0_16_7))))
 (let ((?x55102 (+ (+ (- (+ ?x55096 ?x43808) (* (* 2.0 l_0_16_5) l_0_16_8)) ?x33027) ?x54019)))
 (let ((?x55108 (- (- (- (+ ?x55102 ?x43811) (* (* 2.0 l_0_16_6) l_0_16_9)) ?x53975) ?x53978)))
 (= (- (- ?x55108 ?x53981) ?x53984) 0.0))))))))))))))
(assert
 (let ((?x55197 (* 2.0 l_0_16_90)))
 (let ((?x55198 (* ?x55197 l_0_16_93)))
 (let ((?x55194 (* 2.0 l_0_16_89)))
 (let ((?x55195 (* ?x55194 l_0_16_92)))
 (let ((?x55191 (* 2.0 l_0_16_88)))
 (let ((?x55192 (* ?x55191 l_0_16_91)))
 (let ((?x54794 (* 2.0 l_0_16_73)))
 (let ((?x54795 (* ?x54794 l_0_16_77)))
 (let ((?x54791 (* 2.0 l_0_16_72)))
 (let ((?x54792 (* ?x54791 l_0_16_76)))
 (let ((?x54788 (* 2.0 l_0_16_71)))
 (let ((?x54789 (* ?x54788 l_0_16_75)))
 (let ((?x54785 (* 2.0 l_0_16_70)))
 (let ((?x54786 (* ?x54785 l_0_16_74)))
 (let ((?x54782 (* 2.0 l_0_16_52)))
 (let ((?x54783 (* ?x54782 l_0_16_56)))
 (let ((?x54779 (* 2.0 l_0_16_51)))
 (let ((?x54780 (* ?x54779 l_0_16_55)))
 (let ((?x54776 (* 2.0 l_0_16_50)))
 (let ((?x54777 (* ?x54776 l_0_16_54)))
 (let ((?x54773 (* 2.0 l_0_16_49)))
 (let ((?x54774 (* ?x54773 l_0_16_53)))
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x55175 (* ?x55174 l_0_16_177)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x55172 (* ?x55171 l_0_16_176)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x55169 (* ?x55168 l_0_16_175)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x55166 (* ?x55165 l_0_16_156)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x55163 (* ?x55162 l_0_16_155)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x55160 (* ?x55159 l_0_16_154)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x55152 (* ?x55151 l_0_16_114)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x55149 (* ?x55148 l_0_16_113)))
 (let ((?x55147 (- (* (* 2.0 l_0_16_109) l_0_16_112) (* (* 2.0 l_0_16_11) l_0_16_4))))
 (let ((?x55158 (- (- (+ (+ ?x55147 ?x55149) ?x55152) (* (* 2.0 l_0_16_12) l_0_16_5)) (* (* 2.0 l_0_16_13) l_0_16_6))))
 (let ((?x55178 (+ (+ (+ (+ (- (- (- ?x55158 ?x55160) ?x55163) ?x55166) ?x55169) ?x55172) ?x55175) (* (* 2.0 l_0_16_25) l_0_16_32))))
 (let ((?x55182 (+ (+ ?x55178 (* (* 2.0 l_0_16_26) l_0_16_33)) (* (* 2.0 l_0_16_27) l_0_16_34))))
 (let ((?x55189 (- (- (- (+ (+ (+ (+ ?x55182 ?x54774) ?x54777) ?x54780) ?x54783) ?x54786) ?x54789) ?x54792)))
 (= (- (- (- (- ?x55189 ?x54795) ?x55192) ?x55195) ?x55198) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54794 (* 2.0 l_0_16_73)))
 (let ((?x55000 (* ?x54794 l_0_16_82)))
 (let ((?x54791 (* 2.0 l_0_16_72)))
 (let ((?x54998 (* ?x54791 l_0_16_81)))
 (let ((?x54788 (* 2.0 l_0_16_71)))
 (let ((?x54996 (* ?x54788 l_0_16_80)))
 (let ((?x54785 (* 2.0 l_0_16_70)))
 (let ((?x54994 (* ?x54785 l_0_16_79)))
 (let ((?x54782 (* 2.0 l_0_16_52)))
 (let ((?x54992 (* ?x54782 l_0_16_61)))
 (let ((?x54779 (* 2.0 l_0_16_51)))
 (let ((?x54990 (* ?x54779 l_0_16_60)))
 (let ((?x54776 (* 2.0 l_0_16_50)))
 (let ((?x54988 (* ?x54776 l_0_16_59)))
 (let ((?x54773 (* 2.0 l_0_16_49)))
 (let ((?x54986 (* ?x54773 l_0_16_58)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x54305 (* ?x54304 l_0_16_135)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x54302 (* ?x54301 l_0_16_134)))
 (let ((?x55258 (- (- (- (* (* (- 2.0) l_0_16_130) l_0_16_133) ?x54302) ?x54305) (* (* 2.0 l_0_16_16) l_0_16_4))))
 (let ((?x55263 (- (- ?x55258 (* (* 2.0 l_0_16_17) l_0_16_5)) (* (* 2.0 l_0_16_18) l_0_16_6))))
 (let ((?x55267 (+ (+ ?x55263 (* (* 2.0 l_0_16_25) l_0_16_37)) (* (* 2.0 l_0_16_26) l_0_16_38))))
 (let ((?x55272 (+ (+ (+ (+ ?x55267 (* (* 2.0 l_0_16_27) l_0_16_39)) ?x54986) ?x54988) ?x54990)))
 (= (- (- (- (- (+ ?x55272 ?x54992) ?x54994) ?x54996) ?x54998) ?x55000) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53990 (* l_0_16_9 l_0_16_9)))
 (let ((?x53987 (* l_0_16_8 l_0_16_8)))
 (let ((?x53972 (* l_0_16_7 l_0_16_7)))
 (let ((?x5140 (* l_0_16_31 l_0_16_31)))
 (let ((?x5295 (* l_0_16_30 l_0_16_30)))
 (let ((?x22153 (* l_0_16_29 l_0_16_29)))
 (let ((?x44479 (+ (+ (* (- l_0_16_10) l_0_16_10) (* l_0_16_28 l_0_16_28)) ?x22153)))
 (= (- (- (- (+ (+ ?x44479 ?x5295) ?x5140) ?x53972) ?x53987) ?x53990) 0.0)))))))))
(assert
 (let ((?x55350 (* l_0_16_94 l_0_16_94)))
 (let ((?x55348 (* l_0_16_93 l_0_16_93)))
 (let ((?x55346 (* l_0_16_92 l_0_16_92)))
 (let ((?x55344 (* l_0_16_91 l_0_16_91)))
 (let ((?x55330 (* l_0_16_178 l_0_16_178)))
 (let ((?x55328 (* l_0_16_177 l_0_16_177)))
 (let ((?x55326 (* l_0_16_176 l_0_16_176)))
 (let ((?x55324 (* l_0_16_175 l_0_16_175)))
 (let ((?x55322 (* l_0_16_157 l_0_16_157)))
 (let ((?x55320 (* l_0_16_156 l_0_16_156)))
 (let ((?x55318 (* l_0_16_155 l_0_16_155)))
 (let ((?x55316 (* l_0_16_154 l_0_16_154)))
 (let ((?x55310 (* l_0_16_115 l_0_16_115)))
 (let ((?x55308 (* l_0_16_114 l_0_16_114)))
 (let ((?x55306 (* l_0_16_113 l_0_16_113)))
 (let ((?x55304 (* l_0_16_112 l_0_16_112)))
 (let ((?x55303 (- (* (* (- 2.0) l_0_16_10) l_0_16_14) (* (* 2.0 l_0_16_11) l_0_16_7))))
 (let ((?x55313 (- (+ (+ (+ (+ ?x55303 ?x55304) ?x55306) ?x55308) ?x55310) (* (* 2.0 l_0_16_12) l_0_16_8))))
 (let ((?x55321 (- (- (- (- ?x55313 (* (* 2.0 l_0_16_13) l_0_16_9)) ?x55316) ?x55318) ?x55320)))
 (let ((?x55334 (+ (+ (+ (+ (+ (- ?x55321 ?x55322) ?x55324) ?x55326) ?x55328) ?x55330) (* (* 2.0 l_0_16_28) l_0_16_32))))
 (let ((?x55340 (+ (+ ?x55334 (* (* 2.0 l_0_16_29) l_0_16_33)) (* (* 2.0 l_0_16_30) l_0_16_34))))
 (let ((?x55349 (- (- (- (+ ?x55340 (* (* 2.0 l_0_16_31) l_0_16_35)) ?x55344) ?x55346) ?x55348)))
 (= (- ?x55349 ?x55350) 0.0))))))))))))))))))))))))
(assert
 (let ((?x54385 (* l_0_16_136 l_0_16_136)))
 (let ((?x54383 (* l_0_16_135 l_0_16_135)))
 (let ((?x54381 (* l_0_16_134 l_0_16_134)))
 (let ((?x54366 (* l_0_16_133 l_0_16_133)))
 (let ((?x7347 (- (- (- (- (* (* (- 2.0) l_0_16_10) l_0_16_19) ?x54366) ?x54381) ?x54383) ?x54385)))
 (let ((?x23442 (- (- ?x7347 (* (* 2.0 l_0_16_16) l_0_16_7)) (* (* 2.0 l_0_16_17) l_0_16_8))))
 (let ((?x55380 (+ (- ?x23442 (* (* 2.0 l_0_16_18) l_0_16_9)) (* (* 2.0 l_0_16_28) l_0_16_37))))
 (let ((?x55384 (+ (+ ?x55380 (* (* 2.0 l_0_16_29) l_0_16_38)) (* (* 2.0 l_0_16_30) l_0_16_39))))
 (= (+ ?x55384 (* (* 2.0 l_0_16_31) l_0_16_40)) 0.0))))))))))
(assert
 (let ((?x55457 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x55454 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x55451 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x55448 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x55445 (* l_0_16_36 l_0_16_36)))
 (let ((?x55443 (* l_0_16_35 l_0_16_35)))
 (let ((?x55441 (* l_0_16_34 l_0_16_34)))
 (let ((?x55439 (* l_0_16_33 l_0_16_33)))
 (let ((?x55437 (* l_0_16_32 l_0_16_32)))
 (let ((?x55434 (* 2.0 l_0_16_178)))
 (let ((?x55435 (* ?x55434 l_0_16_182)))
 (let ((?x55431 (* 2.0 l_0_16_177)))
 (let ((?x55432 (* ?x55431 l_0_16_181)))
 (let ((?x55428 (* 2.0 l_0_16_176)))
 (let ((?x55429 (* ?x55428 l_0_16_180)))
 (let ((?x55425 (* 2.0 l_0_16_175)))
 (let ((?x55426 (* ?x55425 l_0_16_179)))
 (let ((?x55422 (* 2.0 l_0_16_157)))
 (let ((?x55423 (* ?x55422 l_0_16_161)))
 (let ((?x55419 (* 2.0 l_0_16_156)))
 (let ((?x55420 (* ?x55419 l_0_16_160)))
 (let ((?x55416 (* 2.0 l_0_16_155)))
 (let ((?x55417 (* ?x55416 l_0_16_159)))
 (let ((?x55413 (* 2.0 l_0_16_154)))
 (let ((?x55414 (* ?x55413 l_0_16_158)))
 (let ((?x55411 (* l_0_16_15 l_0_16_15)))
 (let ((?x55409 (* l_0_16_14 l_0_16_14)))
 (let ((?x55407 (* l_0_16_13 l_0_16_13)))
 (let ((?x55405 (* l_0_16_12 l_0_16_12)))
 (let ((?x55402 (* 2.0 l_0_16_115)))
 (let ((?x55403 (* ?x55402 l_0_16_119)))
 (let ((?x55399 (* 2.0 l_0_16_114)))
 (let ((?x55400 (* ?x55399 l_0_16_118)))
 (let ((?x55396 (* 2.0 l_0_16_113)))
 (let ((?x55397 (* ?x55396 l_0_16_117)))
 (let ((?x55395 (+ (* (- l_0_16_11) l_0_16_11) (* (* 2.0 l_0_16_112) l_0_16_116))))
 (let ((?x55412 (- (- (- (- (+ (+ (+ ?x55395 ?x55397) ?x55400) ?x55403) ?x55405) ?x55407) ?x55409) ?x55411)))
 (let ((?x55433 (+ (+ (+ (- (- (- (- ?x55412 ?x55414) ?x55417) ?x55420) ?x55423) ?x55426) ?x55429) ?x55432)))
 (let ((?x55449 (- (+ (+ (+ (+ (+ (+ ?x55433 ?x55435) ?x55437) ?x55439) ?x55441) ?x55443) ?x55445) ?x55448)))
 (= (- (- (- ?x55449 ?x55451) ?x55454) ?x55457) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55434 (* 2.0 l_0_16_178)))
 (let ((?x55578 (* ?x55434 l_0_16_187)))
 (let ((?x55431 (* 2.0 l_0_16_177)))
 (let ((?x55576 (* ?x55431 l_0_16_186)))
 (let ((?x55428 (* 2.0 l_0_16_176)))
 (let ((?x55574 (* ?x55428 l_0_16_185)))
 (let ((?x55425 (* 2.0 l_0_16_175)))
 (let ((?x55572 (* ?x55425 l_0_16_184)))
 (let ((?x55422 (* 2.0 l_0_16_157)))
 (let ((?x55570 (* ?x55422 l_0_16_166)))
 (let ((?x55419 (* 2.0 l_0_16_156)))
 (let ((?x55568 (* ?x55419 l_0_16_165)))
 (let ((?x55416 (* 2.0 l_0_16_155)))
 (let ((?x55566 (* ?x55416 l_0_16_164)))
 (let ((?x55413 (* 2.0 l_0_16_154)))
 (let ((?x55564 (* ?x55413 l_0_16_163)))
 (let ((?x54464 (* 2.0 l_0_16_136)))
 (let ((?x54465 (* ?x54464 l_0_16_140)))
 (let ((?x54461 (* 2.0 l_0_16_135)))
 (let ((?x54462 (* ?x54461 l_0_16_139)))
 (let ((?x54458 (* 2.0 l_0_16_134)))
 (let ((?x54459 (* ?x54458 l_0_16_138)))
 (let ((?x54455 (* 2.0 l_0_16_133)))
 (let ((?x54456 (* ?x54455 l_0_16_137)))
 (let ((?x55402 (* 2.0 l_0_16_115)))
 (let ((?x55548 (* ?x55402 l_0_16_124)))
 (let ((?x55399 (* 2.0 l_0_16_114)))
 (let ((?x55546 (* ?x55399 l_0_16_123)))
 (let ((?x55396 (* 2.0 l_0_16_113)))
 (let ((?x55544 (* ?x55396 l_0_16_122)))
 (let ((?x55393 (* 2.0 l_0_16_112)))
 (let ((?x55542 (* ?x55393 l_0_16_121)))
 (let ((?x55537 (* 2.0 l_0_16_103)))
 (let ((?x55538 (* ?x55537 l_0_16_94)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x55535 (* ?x55534 l_0_16_93)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x55532 (* ?x55531 l_0_16_92)))
 (let ((?x55541 (- (- (- (- (* (* (- 2.0) l_0_16_100) l_0_16_91) ?x55532) ?x55535) ?x55538) (* (* 2.0 l_0_16_11) l_0_16_16))))
 (let ((?x55551 (- (+ (+ (+ (+ ?x55541 ?x55542) ?x55544) ?x55546) ?x55548) (* (* 2.0 l_0_16_12) l_0_16_17))))
 (let ((?x55556 (- (- (- (- ?x55551 (* (* 2.0 l_0_16_13) l_0_16_18)) ?x54456) ?x54459) ?x54462)))
 (let ((?x55563 (- (- (- ?x55556 ?x54465) (* (* 2.0 l_0_16_14) l_0_16_19)) (* (* 2.0 l_0_16_15) l_0_16_20))))
 (let ((?x55577 (+ (+ (+ (- (- (- (- ?x55563 ?x55564) ?x55566) ?x55568) ?x55570) ?x55572) ?x55574) ?x55576)))
 (let ((?x55585 (+ (+ (+ ?x55577 ?x55578) (* (* 2.0 l_0_16_32) l_0_16_37)) (* (* 2.0 l_0_16_33) l_0_16_38))))
 (let ((?x55591 (+ (+ ?x55585 (* (* 2.0 l_0_16_34) l_0_16_39)) (* (* 2.0 l_0_16_35) l_0_16_40))))
 (= (+ ?x55591 (* (* 2.0 l_0_16_36) l_0_16_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55692 (* l_0_16_42 l_0_16_42)))
 (let ((?x55690 (* l_0_16_41 l_0_16_41)))
 (let ((?x55688 (* l_0_16_40 l_0_16_40)))
 (let ((?x55686 (* l_0_16_39 l_0_16_39)))
 (let ((?x55684 (* l_0_16_38 l_0_16_38)))
 (let ((?x55682 (* l_0_16_37 l_0_16_37)))
 (let ((?x55680 (* l_0_16_21 l_0_16_21)))
 (let ((?x55678 (* l_0_16_20 l_0_16_20)))
 (let ((?x55676 (* l_0_16_19 l_0_16_19)))
 (let ((?x7692 (* l_0_16_18 l_0_16_18)))
 (let ((?x55659 (* l_0_16_17 l_0_16_17)))
 (let ((?x5305 (* l_0_16_16 l_0_16_16)))
 (let ((?x54464 (* 2.0 l_0_16_136)))
 (let ((?x54594 (* ?x54464 l_0_16_145)))
 (let ((?x54461 (* 2.0 l_0_16_135)))
 (let ((?x54592 (* ?x54461 l_0_16_144)))
 (let ((?x54458 (* 2.0 l_0_16_134)))
 (let ((?x54590 (* ?x54458 l_0_16_143)))
 (let ((?x23747 (- (- (- (- (* (* (- 2.0) l_0_16_133) l_0_16_142) ?x54590) ?x54592) ?x54594) ?x5305)))
 (let ((?x55685 (+ (+ (- (- (- (- (- ?x23747 ?x55659) ?x7692) ?x55676) ?x55678) ?x55680) ?x55682) ?x55684)))
 (= (+ (+ (+ (+ ?x55685 ?x55686) ?x55688) ?x55690) ?x55692) 0.0))))))))))))))))))))))
(assert
 (let ((?x55734 (* l_0_16_87 l_0_16_87)))
 (let ((?x55732 (* l_0_16_86 l_0_16_86)))
 (let ((?x54109 (* l_0_16_64 l_0_16_64)))
 (let ((?x55730 (* 3.0 ?x54109)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x54107 (* ?x54106 l_0_16_65)))
 (let ((?x55727 (* (* 3.0 l_0_16_43) l_0_16_43)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x54095 (* ?x54094 l_0_16_44)))
 (let ((?x54088 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x55722 (* l_0_16_171 l_0_16_171)))
 (let ((?x55720 (* l_0_16_170 l_0_16_170)))
 (let ((?x55718 (* l_0_16_150 l_0_16_150)))
 (let ((?x55716 (* l_0_16_149 l_0_16_149)))
 (let ((?x55714 (* l_0_16_127 l_0_16_127)))
 (let ((?x55712 (* l_0_16_108 l_0_16_108)))
 (let ((?x55713 (- (- (* 6.0 (* l_0_16_1 l_0_16_1)) (* l_0_16_107 l_0_16_107)) ?x55712)))
 (let ((?x55725 (- (- (- (- (+ (+ (+ ?x55713 ?x55714) ?x55716) ?x55718) ?x55720) ?x55722) ?x54088) ?x54095)))
 (= (+ (+ (+ (+ (- ?x55725 ?x55727) ?x54107) ?x55730) ?x55732) ?x55734) 0.0))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55772 (* ?x54220 l_0_16_68)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55770 (* ?x54217 l_0_16_67)))
 (let ((?x54109 (* l_0_16_64 l_0_16_64)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55767 (* ?x54106 l_0_16_67)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55765 (* ?x54212 l_0_16_47)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55763 (* ?x54209 l_0_16_46)))
 (let ((?x33140 (* l_0_16_43 l_0_16_43)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55760 (* ?x54094 l_0_16_46)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55758 (* ?x54084 l_0_16_25)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x6833 (* ?x5440 l_0_16_4)))
 (let ((?x55762 (+ (- (- (+ ?x6833 (* (* 2.0 l_0_16_127) l_0_16_130)) ?x55758) ?x55760) ?x33140)))
 (= (+ (+ (- (+ (- (- ?x55762 ?x55763) ?x55765) ?x55767) ?x54109) ?x55770) ?x55772) 0.0)))))))))))))))))))))
(assert
 (let ((?x55825 (* l_0_16_85 l_0_16_85)))
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55823 (* ?x54220 l_0_16_75)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55821 (* ?x54217 l_0_16_74)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55819 (* ?x54106 l_0_16_74)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55817 (* ?x54212 l_0_16_54)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55815 (* ?x54209 l_0_16_53)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55813 (* ?x54094 l_0_16_53)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55811 (* ?x54084 l_0_16_32)))
 (let ((?x55809 (* l_0_16_169 l_0_16_169)))
 (let ((?x55807 (* l_0_16_148 l_0_16_148)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x55805 (* ?x54077 l_0_16_137)))
 (let ((?x55806 (+ (+ (* (* 12.0 l_0_16_1) l_0_16_11) (* l_0_16_106 l_0_16_106)) ?x55805)))
 (let ((?x55820 (+ (- (- (- (- (+ (- ?x55806 ?x55807) ?x55809) ?x55811) ?x55813) ?x55815) ?x55817) ?x55819)))
 (= (- (+ (+ ?x55820 ?x55821) ?x55823) ?x55825) 0.0)))))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55885 (* ?x54220 l_0_16_80)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55883 (* ?x54217 l_0_16_79)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55881 (* ?x54106 l_0_16_79)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55879 (* ?x54212 l_0_16_59)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55877 (* ?x54209 l_0_16_58)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55875 (* ?x54094 l_0_16_58)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55873 (* ?x54084 l_0_16_37)))
 (let ((?x55714 (* l_0_16_127 l_0_16_127)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x55869 (* ?x5440 l_0_16_16)))
 (let ((?x55876 (- (- (- (+ ?x55869 (* (* 2.0 l_0_16_127) l_0_16_142)) ?x55714) ?x55873) ?x55875)))
 (= (+ (+ (+ (- (- ?x55876 ?x55877) ?x55879) ?x55881) ?x55883) ?x55885) 0.0))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55772 (* ?x54220 l_0_16_68)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55770 (* ?x54217 l_0_16_67)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x55938 (* ?x54166 l_0_16_67)))
 (let ((?x54167 (* ?x54166 l_0_16_65)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55765 (* ?x54212 l_0_16_47)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55763 (* ?x54209 l_0_16_46)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x55933 (* ?x54161 l_0_16_46)))
 (let ((?x54162 (* ?x54161 l_0_16_44)))
 (let ((?x53749 (* 12.0 l_0_16_3)))
 (let ((?x54029 (* ?x53749 l_0_16_5)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x54023 (* ?x53739 l_0_16_26)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x43817 (* ?x53729 l_0_16_25)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55758 (* ?x54084 l_0_16_25)))
 (let ((?x53719 (* 12.0 l_0_16_2)))
 (let ((?x43803 (* ?x53719 l_0_16_4)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x55910 (* ?x54236 l_0_16_131)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x6833 (* ?x5440 l_0_16_4)))
 (let ((?x55920 (- (+ (+ ?x6833 (* (* 2.0 l_0_16_128) l_0_16_130)) ?x55910) (* (* 2.0 l_0_16_190) l_0_16_193))))
 (let ((?x55925 (- (- (- (+ ?x55920 ?x43803) (* (* 2.0 l_0_16_211) l_0_16_214)) ?x55758) ?x43817)))
 (let ((?x55930 (- (- (- ?x55925 (* (* 2.0 l_0_16_232) l_0_16_235)) ?x54023) (* (* 2.0 l_0_16_253) l_0_16_256))))
 (let ((?x55939 (+ (- (- (- (- (+ (+ ?x55930 ?x54029) ?x54162) ?x55933) ?x55763) ?x55765) ?x54167) ?x55938)))
 (= (+ (+ ?x55939 ?x55770) ?x55772) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56007 (* ?x54511 l_0_16_86)))
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55823 (* ?x54220 l_0_16_75)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55821 (* ?x54217 l_0_16_74)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x56003 (* ?x54166 l_0_16_74)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55817 (* ?x54212 l_0_16_54)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55815 (* ?x54209 l_0_16_53)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x55999 (* ?x54161 l_0_16_53)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x55995 (* ?x53739 l_0_16_33)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x55991 (* ?x53729 l_0_16_32)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55811 (* ?x54084 l_0_16_32)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x55984 (* ?x54470 l_0_16_170)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x55982 (* ?x54467 l_0_16_149)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x55980 (* ?x54236 l_0_16_138)))
 (let ((?x5695 (* 2.0 l_0_16_128)))
 (let ((?x55978 (* ?x5695 l_0_16_137)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x55976 (* ?x54449 l_0_16_3)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x55974 (* ?x54446 l_0_16_2)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x55802 (* ?x5440 l_0_16_11)))
 (let ((?x55979 (+ (+ (+ (+ ?x55802 (* (* 2.0 l_0_16_106) l_0_16_107)) ?x55974) ?x55976) ?x55978)))
 (let ((?x55987 (- (+ (- (+ ?x55979 ?x55980) ?x55982) ?x55984) (* (* 2.0 l_0_16_190) l_0_16_200))))
 (let ((?x55994 (- (- (- (- ?x55987 (* (* 2.0 l_0_16_211) l_0_16_221)) ?x55811) ?x55991) (* (* 2.0 l_0_16_232) l_0_16_242))))
 (let ((?x56001 (- (- (- (- ?x55994 ?x55995) (* (* 2.0 l_0_16_253) l_0_16_263)) ?x55999) ?x55815)))
 (= (- (+ (+ (+ (- ?x56001 ?x55817) ?x56003) ?x55821) ?x55823) ?x56007) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54220 (* 6.0 l_0_16_66)))
 (let ((?x55885 (* ?x54220 l_0_16_80)))
 (let ((?x54217 (* 6.0 l_0_16_65)))
 (let ((?x55883 (* ?x54217 l_0_16_79)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x56079 (* ?x54166 l_0_16_79)))
 (let ((?x54212 (* 6.0 l_0_16_45)))
 (let ((?x55879 (* ?x54212 l_0_16_59)))
 (let ((?x54209 (* 6.0 l_0_16_44)))
 (let ((?x55877 (* ?x54209 l_0_16_58)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x56075 (* ?x54161 l_0_16_58)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x56071 (* ?x53739 l_0_16_38)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x56067 (* ?x53729 l_0_16_37)))
 (let ((?x54084 (* 12.0 l_0_16_22)))
 (let ((?x55873 (* ?x54084 l_0_16_37)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x56060 (* ?x54599 l_0_16_3)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x56058 (* ?x54596 l_0_16_2)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x56056 (* ?x54236 l_0_16_143)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x54078 (* ?x54077 l_0_16_128)))
 (let ((?x5440 (* 12.0 l_0_16_1)))
 (let ((?x55869 (* ?x5440 l_0_16_16)))
 (let ((?x56059 (+ (+ (+ (- ?x55869 ?x54078) (* (* 2.0 l_0_16_128) l_0_16_142)) ?x56056) ?x56058)))
 (let ((?x56065 (- (- (+ ?x56059 ?x56060) (* (* 2.0 l_0_16_190) l_0_16_205)) (* (* 2.0 l_0_16_211) l_0_16_226))))
 (let ((?x56072 (- (- (- (- ?x56065 ?x55873) ?x56067) (* (* 2.0 l_0_16_232) l_0_16_247)) ?x56071)))
 (let ((?x56078 (- (- (- (- ?x56072 (* (* 2.0 l_0_16_253) l_0_16_268)) ?x56075) ?x55877) ?x55879)))
 (= (+ (+ (+ ?x56078 ?x56079) ?x55883) ?x55885) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53862 (* l_0_16_69 l_0_16_69)))
 (let ((?x56143 (* 3.0 ?x53862)))
 (let ((?x53859 (* l_0_16_68 l_0_16_68)))
 (let ((?x56141 (* 3.0 ?x53859)))
 (let ((?x53856 (* l_0_16_67 l_0_16_67)))
 (let ((?x56139 (* 3.0 ?x53856)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x55938 (* ?x54166 l_0_16_67)))
 (let ((?x53849 (* l_0_16_6 l_0_16_6)))
 (let ((?x53850 (* 6.0 ?x53849)))
 (let ((?x53846 (* l_0_16_5 l_0_16_5)))
 (let ((?x53847 (* 6.0 ?x53846)))
 (let ((?x56134 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x56131 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x55933 (* ?x54161 l_0_16_46)))
 (let ((?x53830 (* l_0_16_4 l_0_16_4)))
 (let ((?x53831 (* 6.0 ?x53830)))
 (let ((?x53828 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x53825 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x53816 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x56120 (* l_0_16_132 l_0_16_132)))
 (let ((?x56121 (+ (+ (* l_0_16_130 l_0_16_130) (* l_0_16_131 l_0_16_131)) ?x56120)))
 (let ((?x56129 (- (+ (+ (- (- (- ?x56121 ?x53816) ?x53825) ?x53828) ?x53831) ?x55933) (* (* 3.0 l_0_16_46) l_0_16_46))))
 (let ((?x56142 (+ (+ (- (+ (+ (- (- ?x56129 ?x56131) ?x56134) ?x53847) ?x53850) ?x55938) ?x56139) ?x56141)))
 (= (+ ?x56142 ?x56143) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56209 (* ?x54511 l_0_16_88)))
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x56207 (* ?x54332 l_0_16_76)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x56205 (* ?x54329 l_0_16_75)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x56203 (* ?x54326 l_0_16_74)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x56003 (* ?x54166 l_0_16_74)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x56200 (* ?x54320 l_0_16_55)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x56198 (* ?x54317 l_0_16_54)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x55999 (* ?x54161 l_0_16_53)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x56193 (* ?x53585 l_0_16_34)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x56191 (* ?x53582 l_0_16_33)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x56189 (* ?x53570 l_0_16_32)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56187 (* ?x54470 l_0_16_172)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56185 (* ?x54467 l_0_16_151)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x56183 (* ?x54304 l_0_16_139)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x56181 (* ?x54301 l_0_16_138)))
 (let ((?x33272 (* 2.0 l_0_16_130)))
 (let ((?x56179 (* ?x33272 l_0_16_137)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x56177 (* ?x54452 l_0_16_6)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x56175 (* ?x54449 l_0_16_5)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x56173 (* ?x54446 l_0_16_4)))
 (let ((?x56180 (+ (+ (+ (+ (* (* 2.0 l_0_16_106) l_0_16_109) ?x56173) ?x56175) ?x56177) ?x56179)))
 (let ((?x56194 (- (- (- (+ (- (+ (+ ?x56180 ?x56181) ?x56183) ?x56185) ?x56187) ?x56189) ?x56191) ?x56193)))
 (let ((?x56201 (- (- (- (+ ?x56194 ?x55999) (* (* 6.0 l_0_16_46) l_0_16_53)) ?x56198) ?x56200)))
 (= (- (+ (+ (+ (- ?x56201 ?x56003) ?x56203) ?x56205) ?x56207) ?x56209) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x56293 (* ?x54332 l_0_16_81)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x56291 (* ?x54329 l_0_16_80)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x56289 (* ?x54326 l_0_16_79)))
 (let ((?x54166 (* 2.0 l_0_16_64)))
 (let ((?x56079 (* ?x54166 l_0_16_79)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x56286 (* ?x54320 l_0_16_60)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x56284 (* ?x54317 l_0_16_59)))
 (let ((?x54161 (* 2.0 l_0_16_43)))
 (let ((?x56075 (* ?x54161 l_0_16_58)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x56279 (* ?x53585 l_0_16_39)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x56277 (* ?x53582 l_0_16_38)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x56275 (* ?x53570 l_0_16_37)))
 (let ((?x54602 (* 12.0 l_0_16_18)))
 (let ((?x56273 (* ?x54602 l_0_16_6)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x56271 (* ?x54599 l_0_16_5)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x56269 (* ?x54596 l_0_16_4)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x56267 (* ?x54304 l_0_16_144)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x56265 (* ?x54301 l_0_16_143)))
 (let ((?x56264 (+ (* (* (- 2.0) l_0_16_127) l_0_16_130) (* (* 2.0 l_0_16_130) l_0_16_142))))
 (let ((?x56278 (- (- (+ (+ (+ (+ (+ ?x56264 ?x56265) ?x56267) ?x56269) ?x56271) ?x56273) ?x56275) ?x56277)))
 (let ((?x56285 (- (- (+ (- ?x56278 ?x56279) ?x56075) (* (* 6.0 l_0_16_46) l_0_16_58)) ?x56284)))
 (= (+ (+ (+ (- (- ?x56285 ?x56286) ?x56079) ?x56289) ?x56291) ?x56293) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56400 (* ?x54511 l_0_16_95)))
 (let ((?x56397 (* l_0_16_78 l_0_16_78)))
 (let ((?x56398 (* 3.0 ?x56397)))
 (let ((?x56394 (* l_0_16_77 l_0_16_77)))
 (let ((?x56395 (* 3.0 ?x56394)))
 (let ((?x56391 (* l_0_16_76 l_0_16_76)))
 (let ((?x56392 (* 3.0 ?x56391)))
 (let ((?x56388 (* l_0_16_75 l_0_16_75)))
 (let ((?x56389 (* 3.0 ?x56388)))
 (let ((?x56385 (* l_0_16_74 l_0_16_74)))
 (let ((?x56386 (* 3.0 ?x56385)))
 (let ((?x56383 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x56380 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x56377 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x56374 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x56368 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x56365 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x56362 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x56359 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x56356 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56353 (* ?x54470 l_0_16_179)))
 (let ((?x55411 (* l_0_16_15 l_0_16_15)))
 (let ((?x56351 (* 6.0 ?x55411)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56349 (* ?x54467 l_0_16_158)))
 (let ((?x56347 (* l_0_16_141 l_0_16_141)))
 (let ((?x56345 (* l_0_16_140 l_0_16_140)))
 (let ((?x55409 (* l_0_16_14 l_0_16_14)))
 (let ((?x56343 (* 6.0 ?x55409)))
 (let ((?x56341 (* l_0_16_139 l_0_16_139)))
 (let ((?x56339 (* l_0_16_138 l_0_16_138)))
 (let ((?x56337 (* l_0_16_137 l_0_16_137)))
 (let ((?x55407 (* l_0_16_13 l_0_16_13)))
 (let ((?x56335 (* 6.0 ?x55407)))
 (let ((?x55405 (* l_0_16_12 l_0_16_12)))
 (let ((?x56333 (* 6.0 ?x55405)))
 (let ((?x34296 (* l_0_16_11 l_0_16_11)))
 (let ((?x56331 (* 6.0 ?x34296)))
 (let ((?x56338 (+ (+ (+ (+ (* (* 2.0 l_0_16_106) l_0_16_116) ?x56331) ?x56333) ?x56335) ?x56337)))
 (let ((?x56352 (+ (- (+ (+ (+ (+ (+ ?x56338 ?x56339) ?x56341) ?x56343) ?x56345) ?x56347) ?x56349) ?x56351)))
 (let ((?x56372 (- (- (- (- (- (- (+ ?x56352 ?x56353) ?x56356) ?x56359) ?x56362) ?x56365) ?x56368) (* (* 3.0 l_0_16_53) l_0_16_53))))
 (let ((?x56393 (+ (+ (+ (- (- (- (- ?x56372 ?x56374) ?x56377) ?x56380) ?x56383) ?x56386) ?x56389) ?x56392)))
 (= (- (+ (+ ?x56393 ?x56395) ?x56398) ?x56400) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56516 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x56513 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x56510 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x56507 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x56504 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x56501 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x56498 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x56495 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x56492 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x56486 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56483 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56480 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56477 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56474 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56471 (* ?x54470 l_0_16_184)))
 (let ((?x56469 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56466 (* ?x54467 l_0_16_163)))
 (let ((?x56464 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56461 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56458 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x56455 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56452 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56449 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x56446 (* ?x54452 l_0_16_18)))
 (let ((?x54077 (* 2.0 l_0_16_127)))
 (let ((?x55805 (* ?x54077 l_0_16_137)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x56443 (* ?x54449 l_0_16_17)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x56441 (* ?x54446 l_0_16_16)))
 (let ((?x54443 (* 2.0 l_0_16_106)))
 (let ((?x56439 (* ?x54443 l_0_16_121)))
 (let ((?x56445 (- (+ (+ (+ (* (* (- 2.0) l_0_16_100) l_0_16_85) ?x56439) ?x56441) ?x56443) ?x55805)))
 (let ((?x56465 (+ (+ (+ (+ (+ (+ (+ ?x56445 ?x56446) ?x56449) ?x56452) ?x56455) ?x56458) ?x56461) ?x56464)))
 (let ((?x56484 (- (- (- (- (+ (+ (- ?x56465 ?x56466) ?x56469) ?x56471) ?x56474) ?x56477) ?x56480) ?x56483)))
 (let ((?x56496 (- (- (- (- ?x56484 ?x56486) (* (* 6.0 l_0_16_53) l_0_16_58)) ?x56492) ?x56495)))
 (let ((?x56517 (+ (+ (+ (+ (+ (- (- ?x56496 ?x56498) ?x56501) ?x56504) ?x56507) ?x56510) ?x56513) ?x56516)))
 (= ?x56517 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56645 (* l_0_16_84 l_0_16_84)))
 (let ((?x56646 (* 3.0 ?x56645)))
 (let ((?x56642 (* l_0_16_83 l_0_16_83)))
 (let ((?x56643 (* 3.0 ?x56642)))
 (let ((?x56639 (* l_0_16_82 l_0_16_82)))
 (let ((?x56640 (* 3.0 ?x56639)))
 (let ((?x56636 (* l_0_16_81 l_0_16_81)))
 (let ((?x56637 (* 3.0 ?x56636)))
 (let ((?x56633 (* l_0_16_80 l_0_16_80)))
 (let ((?x56634 (* 3.0 ?x56633)))
 (let ((?x56630 (* l_0_16_79 l_0_16_79)))
 (let ((?x56631 (* 3.0 ?x56630)))
 (let ((?x56628 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x56625 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x56622 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x56619 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x56616 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x56610 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x56607 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x56604 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x56601 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x56598 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x56595 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x55680 (* l_0_16_21 l_0_16_21)))
 (let ((?x56592 (* 6.0 ?x55680)))
 (let ((?x55678 (* l_0_16_20 l_0_16_20)))
 (let ((?x56590 (* 6.0 ?x55678)))
 (let ((?x55676 (* l_0_16_19 l_0_16_19)))
 (let ((?x56588 (* 6.0 ?x55676)))
 (let ((?x7692 (* l_0_16_18 l_0_16_18)))
 (let ((?x56586 (* 6.0 ?x7692)))
 (let ((?x55659 (* l_0_16_17 l_0_16_17)))
 (let ((?x56584 (* 6.0 ?x55659)))
 (let ((?x5305 (* l_0_16_16 l_0_16_16)))
 (let ((?x56582 (* 6.0 ?x5305)))
 (let ((?x56580 (* l_0_16_147 l_0_16_147)))
 (let ((?x56578 (* l_0_16_146 l_0_16_146)))
 (let ((?x56576 (* l_0_16_145 l_0_16_145)))
 (let ((?x56574 (* l_0_16_144 l_0_16_144)))
 (let ((?x56572 (* l_0_16_143 l_0_16_143)))
 (let ((?x56570 (* l_0_16_142 l_0_16_142)))
 (let ((?x56577 (+ (+ (+ (+ (* (* (- 2.0) l_0_16_127) l_0_16_142) ?x56570) ?x56572) ?x56574) ?x56576)))
 (let ((?x56591 (+ (+ (+ (+ (+ (+ (+ ?x56577 ?x56578) ?x56580) ?x56582) ?x56584) ?x56586) ?x56588) ?x56590)))
 (let ((?x56611 (- (- (- (- (- (- (+ ?x56591 ?x56592) ?x56595) ?x56598) ?x56601) ?x56604) ?x56607) ?x56610)))
 (let ((?x56623 (- (- (- (- ?x56611 (* (* 3.0 l_0_16_58) l_0_16_58)) ?x56616) ?x56619) ?x56622)))
 (let ((?x56644 (+ (+ (+ (+ (+ (- (- ?x56623 ?x56625) ?x56628) ?x56631) ?x56634) ?x56637) ?x56640) ?x56643)))
 (= (+ ?x56644 ?x56646) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55734 (* l_0_16_87 l_0_16_87)))
 (let ((?x55732 (* l_0_16_86 l_0_16_86)))
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x56687 (* ?x53618 l_0_16_75)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x56685 (* ?x53615 l_0_16_74)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x56683 (* ?x53597 l_0_16_54)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x56681 (* ?x53594 l_0_16_53)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x55995 (* ?x53739 l_0_16_33)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x55991 (* ?x53729 l_0_16_32)))
 (let ((?x55722 (* l_0_16_171 l_0_16_171)))
 (let ((?x55720 (* l_0_16_170 l_0_16_170)))
 (let ((?x55718 (* l_0_16_150 l_0_16_150)))
 (let ((?x55716 (* l_0_16_149 l_0_16_149)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x55976 (* ?x54449 l_0_16_3)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x55974 (* ?x54446 l_0_16_2)))
 (let ((?x45444 (+ (+ (* l_0_16_107 l_0_16_107) (* l_0_16_108 l_0_16_108)) ?x55974)))
 (let ((?x56664 (- (+ (+ (- (- (+ ?x45444 ?x55976) ?x55716) ?x55718) ?x55720) ?x55722) (* (* 2.0 l_0_16_191) l_0_16_200))))
 (let ((?x56668 (- (- ?x56664 (* (* 2.0 l_0_16_192) l_0_16_201)) (* (* 2.0 l_0_16_212) l_0_16_221))))
 (let ((?x56673 (- (- (- ?x56668 (* (* 2.0 l_0_16_213) l_0_16_222)) ?x55991) (* (* 2.0 l_0_16_233) l_0_16_242))))
 (let ((?x56678 (- (- (- ?x56673 (* (* 2.0 l_0_16_234) l_0_16_243)) ?x55995) (* (* 2.0 l_0_16_254) l_0_16_263))))
 (let ((?x56686 (+ (- (- (- ?x56678 (* (* 2.0 l_0_16_255) l_0_16_264)) ?x56681) ?x56683) ?x56685)))
 (= (- (- (+ ?x56686 ?x56687) ?x55732) ?x55734) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x56758 (* ?x53618 l_0_16_80)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x56756 (* ?x53615 l_0_16_79)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x56754 (* ?x53597 l_0_16_59)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x56752 (* ?x53594 l_0_16_58)))
 (let ((?x53739 (* 12.0 l_0_16_24)))
 (let ((?x56071 (* ?x53739 l_0_16_38)))
 (let ((?x53729 (* 12.0 l_0_16_23)))
 (let ((?x56067 (* ?x53729 l_0_16_37)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x56060 (* ?x54599 l_0_16_3)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x56058 (* ?x54596 l_0_16_2)))
 (let ((?x56732 (+ (- (* (- l_0_16_128) l_0_16_128) (* l_0_16_129 l_0_16_129)) ?x56058)))
 (let ((?x56737 (- (- (+ ?x56732 ?x56060) (* (* 2.0 l_0_16_191) l_0_16_205)) (* (* 2.0 l_0_16_192) l_0_16_206))))
 (let ((?x56741 (- (- ?x56737 (* (* 2.0 l_0_16_212) l_0_16_226)) (* (* 2.0 l_0_16_213) l_0_16_227))))
 (let ((?x56746 (- (- (- ?x56741 ?x56067) (* (* 2.0 l_0_16_233) l_0_16_247)) (* (* 2.0 l_0_16_234) l_0_16_248))))
 (let ((?x56751 (- (- (- ?x56746 ?x56071) (* (* 2.0 l_0_16_254) l_0_16_268)) (* (* 2.0 l_0_16_255) l_0_16_269))))
 (= (+ (+ (- (- ?x56751 ?x56752) ?x56754) ?x56756) ?x56758) 0.0)))))))))))))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x56835 (* ?x54800 l_0_16_89)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x56833 (* ?x54797 l_0_16_88)))
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x56831 (* ?x53627 l_0_16_76)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x56829 (* ?x53624 l_0_16_75)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x56827 (* ?x53621 l_0_16_74)))
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x56687 (* ?x53618 l_0_16_75)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x56685 (* ?x53615 l_0_16_74)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x56823 (* ?x53606 l_0_16_55)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x56821 (* ?x53603 l_0_16_54)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x56819 (* ?x53600 l_0_16_53)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x56683 (* ?x53597 l_0_16_54)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x56681 (* ?x53594 l_0_16_53)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x56193 (* ?x53585 l_0_16_34)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x56191 (* ?x53582 l_0_16_33)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x56189 (* ?x53570 l_0_16_32)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x56788 (* ?x54714 l_0_16_173)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x56786 (* ?x54711 l_0_16_172)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x56784 (* ?x54708 l_0_16_152)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x56782 (* ?x54705 l_0_16_151)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x56177 (* ?x54452 l_0_16_6)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x56175 (* ?x54449 l_0_16_5)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x56173 (* ?x54446 l_0_16_4)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x56777 (* ?x54677 l_0_16_110)))
 (let ((?x56781 (+ (+ (+ (+ (* (* 2.0 l_0_16_107) l_0_16_109) ?x56777) ?x56173) ?x56175) ?x56177)))
 (let ((?x56791 (- (+ (+ (- (- ?x56781 ?x56782) ?x56784) ?x56786) ?x56788) (* (* 2.0 l_0_16_193) l_0_16_200))))
 (let ((?x56795 (- (- ?x56791 (* (* 2.0 l_0_16_194) l_0_16_201)) (* (* 2.0 l_0_16_195) l_0_16_202))))
 (let ((?x56799 (- (- ?x56795 (* (* 2.0 l_0_16_214) l_0_16_221)) (* (* 2.0 l_0_16_215) l_0_16_222))))
 (let ((?x56803 (- (- ?x56799 (* (* 2.0 l_0_16_216) l_0_16_223)) (* (* 2.0 l_0_16_235) l_0_16_242))))
 (let ((?x56807 (- (- ?x56803 (* (* 2.0 l_0_16_236) l_0_16_243)) (* (* 2.0 l_0_16_237) l_0_16_244))))
 (let ((?x56812 (- (- (- ?x56807 ?x56189) (* (* 2.0 l_0_16_256) l_0_16_263)) (* (* 2.0 l_0_16_257) l_0_16_264))))
 (let ((?x56817 (+ (- (- (- ?x56812 (* (* 2.0 l_0_16_258) l_0_16_265)) ?x56191) ?x56193) ?x56681)))
 (let ((?x56828 (+ (- (- (- (- (- (+ ?x56817 ?x56683) ?x56819) ?x56821) ?x56823) ?x56685) ?x56687) ?x56827)))
 (= (- (- (+ (+ ?x56828 ?x56829) ?x56831) ?x56833) ?x56835) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x56900 (* ?x53627 l_0_16_81)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x56898 (* ?x53624 l_0_16_80)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x56896 (* ?x53621 l_0_16_79)))
 (let ((?x53618 (* 2.0 l_0_16_66)))
 (let ((?x56758 (* ?x53618 l_0_16_80)))
 (let ((?x53615 (* 2.0 l_0_16_65)))
 (let ((?x56756 (* ?x53615 l_0_16_79)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x56892 (* ?x53606 l_0_16_60)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x56890 (* ?x53603 l_0_16_59)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x56888 (* ?x53600 l_0_16_58)))
 (let ((?x53597 (* 2.0 l_0_16_45)))
 (let ((?x56754 (* ?x53597 l_0_16_59)))
 (let ((?x53594 (* 2.0 l_0_16_44)))
 (let ((?x56752 (* ?x53594 l_0_16_58)))
 (let ((?x53585 (* 12.0 l_0_16_27)))
 (let ((?x56279 (* ?x53585 l_0_16_39)))
 (let ((?x53582 (* 12.0 l_0_16_26)))
 (let ((?x56277 (* ?x53582 l_0_16_38)))
 (let ((?x53570 (* 12.0 l_0_16_25)))
 (let ((?x56275 (* ?x53570 l_0_16_37)))
 (let ((?x54602 (* 12.0 l_0_16_18)))
 (let ((?x56273 (* ?x54602 l_0_16_6)))
 (let ((?x54599 (* 12.0 l_0_16_17)))
 (let ((?x56271 (* ?x54599 l_0_16_5)))
 (let ((?x54596 (* 12.0 l_0_16_16)))
 (let ((?x56269 (* ?x54596 l_0_16_4)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x55910 (* ?x54236 l_0_16_131)))
 (let ((?x45780 (+ (+ (+ (- (* (* (- 2.0) l_0_16_128) l_0_16_130) ?x55910) ?x56269) ?x56271) ?x56273)))
 (let ((?x45837 (- (- ?x45780 (* (* 2.0 l_0_16_193) l_0_16_205)) (* (* 2.0 l_0_16_194) l_0_16_206))))
 (let ((?x45840 (- (- ?x45837 (* (* 2.0 l_0_16_195) l_0_16_207)) (* (* 2.0 l_0_16_214) l_0_16_226))))
 (let ((?x56870 (- (- ?x45840 (* (* 2.0 l_0_16_215) l_0_16_227)) (* (* 2.0 l_0_16_216) l_0_16_228))))
 (let ((?x56874 (- (- ?x56870 (* (* 2.0 l_0_16_235) l_0_16_247)) (* (* 2.0 l_0_16_236) l_0_16_248))))
 (let ((?x56879 (- (- (- ?x56874 (* (* 2.0 l_0_16_237) l_0_16_249)) ?x56275) (* (* 2.0 l_0_16_256) l_0_16_268))))
 (let ((?x56883 (- (- ?x56879 (* (* 2.0 l_0_16_257) l_0_16_269)) (* (* 2.0 l_0_16_258) l_0_16_270))))
 (let ((?x56893 (- (- (- (+ (+ (- (- ?x56883 ?x56277) ?x56279) ?x56752) ?x56754) ?x56888) ?x56890) ?x56892)))
 (= (+ (+ (+ (- (- ?x56893 ?x56756) ?x56758) ?x56896) ?x56898) ?x56900) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x57058 (* ?x54800 l_0_16_96)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x57056 (* ?x54797 l_0_16_95)))
 (let ((?x56368 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x56365 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x56362 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x56359 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x56356 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x57024 (* l_0_16_267 l_0_16_267)))
 (let ((?x57022 (* l_0_16_266 l_0_16_266)))
 (let ((?x57020 (* l_0_16_265 l_0_16_265)))
 (let ((?x57018 (* l_0_16_264 l_0_16_264)))
 (let ((?x57016 (* l_0_16_263 l_0_16_263)))
 (let ((?x57014 (* l_0_16_246 l_0_16_246)))
 (let ((?x57012 (* l_0_16_245 l_0_16_245)))
 (let ((?x57010 (* l_0_16_244 l_0_16_244)))
 (let ((?x57008 (* l_0_16_243 l_0_16_243)))
 (let ((?x57006 (* l_0_16_242 l_0_16_242)))
 (let ((?x57004 (* l_0_16_225 l_0_16_225)))
 (let ((?x57002 (* l_0_16_224 l_0_16_224)))
 (let ((?x57000 (* l_0_16_223 l_0_16_223)))
 (let ((?x56998 (* l_0_16_222 l_0_16_222)))
 (let ((?x56996 (* l_0_16_221 l_0_16_221)))
 (let ((?x56994 (* l_0_16_204 l_0_16_204)))
 (let ((?x56992 (* l_0_16_203 l_0_16_203)))
 (let ((?x56990 (* l_0_16_202 l_0_16_202)))
 (let ((?x56988 (* l_0_16_201 l_0_16_201)))
 (let ((?x56986 (* l_0_16_200 l_0_16_200)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x56984 (* ?x54714 l_0_16_180)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x56982 (* ?x54711 l_0_16_179)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x56980 (* ?x54708 l_0_16_159)))
 (let ((?x55411 (* l_0_16_15 l_0_16_15)))
 (let ((?x56351 (* 6.0 ?x55411)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x56977 (* ?x54705 l_0_16_158)))
 (let ((?x55409 (* l_0_16_14 l_0_16_14)))
 (let ((?x56343 (* 6.0 ?x55409)))
 (let ((?x55407 (* l_0_16_13 l_0_16_13)))
 (let ((?x56335 (* 6.0 ?x55407)))
 (let ((?x55405 (* l_0_16_12 l_0_16_12)))
 (let ((?x56333 (* 6.0 ?x55405)))
 (let ((?x34296 (* l_0_16_11 l_0_16_11)))
 (let ((?x56331 (* 6.0 ?x34296)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x56971 (* ?x54677 l_0_16_117)))
 (let ((?x56975 (+ (+ (+ (+ (* (* 2.0 l_0_16_107) l_0_16_116) ?x56971) ?x56331) ?x56333) ?x56335)))
 (let ((?x56987 (- (+ (+ (- (+ (- (+ ?x56975 ?x56343) ?x56977) ?x56351) ?x56980) ?x56982) ?x56984) ?x56986)))
 (let ((?x57001 (- (- (- (- (- (- (- ?x56987 ?x56988) ?x56990) ?x56992) ?x56994) ?x56996) ?x56998) ?x57000)))
 (let ((?x57015 (- (- (- (- (- (- (- ?x57001 ?x57002) ?x57004) ?x57006) ?x57008) ?x57010) ?x57012) ?x57014)))
 (let ((?x57027 (- (- (- (- (- (- (- ?x57015 ?x57016) ?x57018) ?x57020) ?x57022) ?x57024) ?x56356) ?x56359)))
 (let ((?x57033 (- (- (- (- ?x57027 ?x56362) ?x56365) ?x56368) (* (* 1.0 l_0_16_53) l_0_16_53))))
 (let ((?x57039 (- (- ?x57033 (* (* 1.0 l_0_16_54) l_0_16_54)) (* (* 1.0 l_0_16_55) l_0_16_55))))
 (let ((?x57045 (- (- ?x57039 (* (* 1.0 l_0_16_56) l_0_16_56)) (* (* 1.0 l_0_16_57) l_0_16_57))))
 (let ((?x57049 (+ (+ ?x57045 (* 1.0 (* l_0_16_74 l_0_16_74))) (* 1.0 (* l_0_16_75 l_0_16_75)))))
 (let ((?x57053 (+ (+ ?x57049 (* 1.0 (* l_0_16_76 l_0_16_76))) (* 1.0 (* l_0_16_77 l_0_16_77)))))
 (= (- (- (+ ?x57053 (* 1.0 (* l_0_16_78 l_0_16_78))) ?x57056) ?x57058) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57221 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x57218 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x57215 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x57212 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x57209 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x57206 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x57203 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x57200 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x57197 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x57194 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x56486 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56483 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56480 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56477 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56474 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x57126 (* ?x54714 l_0_16_185)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x57124 (* ?x54711 l_0_16_184)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x57122 (* ?x54708 l_0_16_164)))
 (let ((?x56469 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x57119 (* ?x54705 l_0_16_163)))
 (let ((?x56458 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x54452 (* 12.0 l_0_16_13)))
 (let ((?x56446 (* ?x54452 l_0_16_18)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x55980 (* ?x54236 l_0_16_138)))
 (let ((?x5695 (* 2.0 l_0_16_128)))
 (let ((?x55978 (* ?x5695 l_0_16_137)))
 (let ((?x54449 (* 12.0 l_0_16_12)))
 (let ((?x56443 (* ?x54449 l_0_16_17)))
 (let ((?x54446 (* 12.0 l_0_16_11)))
 (let ((?x56441 (* ?x54446 l_0_16_16)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x57111 (* ?x54677 l_0_16_122)))
 (let ((?x6126 (* 2.0 l_0_16_107)))
 (let ((?x57109 (* ?x6126 l_0_16_121)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x57107 (* ?x55531 l_0_16_87)))
 (let ((?x57113 (+ (+ (+ (- (* (* (- 2.0) l_0_16_100) l_0_16_86) ?x57107) ?x57109) ?x57111) ?x56441)))
 (let ((?x57121 (+ (- (+ (+ (- (- (+ ?x57113 ?x56443) ?x55978) ?x55980) ?x56446) ?x56458) ?x57119) ?x56469)))
 (let ((?x57130 (- (+ (+ (- ?x57121 ?x57122) ?x57124) ?x57126) (* (* 2.0 l_0_16_200) l_0_16_205))))
 (let ((?x57136 (- (- ?x57130 (* (* 2.0 l_0_16_201) l_0_16_206)) (* (* 2.0 l_0_16_202) l_0_16_207))))
 (let ((?x57142 (- (- ?x57136 (* (* 2.0 l_0_16_203) l_0_16_208)) (* (* 2.0 l_0_16_204) l_0_16_209))))
 (let ((?x57148 (- (- ?x57142 (* (* 2.0 l_0_16_221) l_0_16_226)) (* (* 2.0 l_0_16_222) l_0_16_227))))
 (let ((?x57154 (- (- ?x57148 (* (* 2.0 l_0_16_223) l_0_16_228)) (* (* 2.0 l_0_16_224) l_0_16_229))))
 (let ((?x57160 (- (- ?x57154 (* (* 2.0 l_0_16_225) l_0_16_230)) (* (* 2.0 l_0_16_242) l_0_16_247))))
 (let ((?x57166 (- (- ?x57160 (* (* 2.0 l_0_16_243) l_0_16_248)) (* (* 2.0 l_0_16_244) l_0_16_249))))
 (let ((?x57172 (- (- ?x57166 (* (* 2.0 l_0_16_245) l_0_16_250)) (* (* 2.0 l_0_16_246) l_0_16_251))))
 (let ((?x57178 (- (- ?x57172 (* (* 2.0 l_0_16_263) l_0_16_268)) (* (* 2.0 l_0_16_264) l_0_16_269))))
 (let ((?x57184 (- (- ?x57178 (* (* 2.0 l_0_16_265) l_0_16_270)) (* (* 2.0 l_0_16_266) l_0_16_271))))
 (let ((?x57190 (- (- (- (- ?x57184 (* (* 2.0 l_0_16_267) l_0_16_272)) ?x56474) ?x56477) ?x56480)))
 (let ((?x57207 (- (- (- (- (- (- (- ?x57190 ?x56483) ?x56486) ?x57194) ?x57197) ?x57200) ?x57203) ?x57206)))
 (= (+ (+ (+ (+ (+ ?x57207 ?x57209) ?x57212) ?x57215) ?x57218) ?x57221) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56610 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x56607 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x56604 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x56601 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x56598 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x56595 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x57366 (* l_0_16_273 l_0_16_273)))
 (let ((?x57364 (* l_0_16_272 l_0_16_272)))
 (let ((?x57362 (* l_0_16_271 l_0_16_271)))
 (let ((?x57360 (* l_0_16_270 l_0_16_270)))
 (let ((?x57358 (* l_0_16_269 l_0_16_269)))
 (let ((?x57356 (* l_0_16_268 l_0_16_268)))
 (let ((?x57354 (* l_0_16_252 l_0_16_252)))
 (let ((?x57352 (* l_0_16_251 l_0_16_251)))
 (let ((?x57350 (* l_0_16_250 l_0_16_250)))
 (let ((?x57348 (* l_0_16_249 l_0_16_249)))
 (let ((?x57346 (* l_0_16_248 l_0_16_248)))
 (let ((?x57344 (* l_0_16_247 l_0_16_247)))
 (let ((?x57342 (* l_0_16_231 l_0_16_231)))
 (let ((?x57340 (* l_0_16_230 l_0_16_230)))
 (let ((?x57338 (* l_0_16_229 l_0_16_229)))
 (let ((?x57336 (* l_0_16_228 l_0_16_228)))
 (let ((?x57334 (* l_0_16_227 l_0_16_227)))
 (let ((?x57332 (* l_0_16_226 l_0_16_226)))
 (let ((?x57330 (* l_0_16_210 l_0_16_210)))
 (let ((?x55680 (* l_0_16_21 l_0_16_21)))
 (let ((?x56592 (* 6.0 ?x55680)))
 (let ((?x57327 (* l_0_16_209 l_0_16_209)))
 (let ((?x57325 (* l_0_16_208 l_0_16_208)))
 (let ((?x57323 (* l_0_16_207 l_0_16_207)))
 (let ((?x57321 (* l_0_16_206 l_0_16_206)))
 (let ((?x57319 (* l_0_16_205 l_0_16_205)))
 (let ((?x55678 (* l_0_16_20 l_0_16_20)))
 (let ((?x56590 (* 6.0 ?x55678)))
 (let ((?x55676 (* l_0_16_19 l_0_16_19)))
 (let ((?x56588 (* 6.0 ?x55676)))
 (let ((?x7692 (* l_0_16_18 l_0_16_18)))
 (let ((?x56586 (* 6.0 ?x7692)))
 (let ((?x55659 (* l_0_16_17 l_0_16_17)))
 (let ((?x56584 (* 6.0 ?x55659)))
 (let ((?x5305 (* l_0_16_16 l_0_16_16)))
 (let ((?x56582 (* 6.0 ?x5305)))
 (let ((?x54236 (* 2.0 l_0_16_129)))
 (let ((?x56056 (* ?x54236 l_0_16_143)))
 (let ((?x57316 (+ (+ (+ (- (* (* (- 2.0) l_0_16_128) l_0_16_142) ?x56056) ?x56582) ?x56584) ?x56586)))
 (let ((?x57328 (- (- (- (- (- (+ (+ ?x57316 ?x56588) ?x56590) ?x57319) ?x57321) ?x57323) ?x57325) ?x57327)))
 (let ((?x57341 (- (- (- (- (- (- (+ ?x57328 ?x56592) ?x57330) ?x57332) ?x57334) ?x57336) ?x57338) ?x57340)))
 (let ((?x57355 (- (- (- (- (- (- (- ?x57341 ?x57342) ?x57344) ?x57346) ?x57348) ?x57350) ?x57352) ?x57354)))
 (let ((?x57368 (- (- (- (- (- (- (- ?x57355 ?x57356) ?x57358) ?x57360) ?x57362) ?x57364) ?x57366) ?x56595)))
 (let ((?x57376 (- (- (- (- (- (- ?x57368 ?x56598) ?x56601) ?x56604) ?x56607) ?x56610) (* (* 1.0 l_0_16_58) l_0_16_58))))
 (let ((?x57382 (- (- ?x57376 (* (* 1.0 l_0_16_59) l_0_16_59)) (* (* 1.0 l_0_16_60) l_0_16_60))))
 (let ((?x57388 (- (- ?x57382 (* (* 1.0 l_0_16_61) l_0_16_61)) (* (* 1.0 l_0_16_62) l_0_16_62))))
 (let ((?x57393 (+ (- ?x57388 (* (* 1.0 l_0_16_63) l_0_16_63)) (* 1.0 (* l_0_16_79 l_0_16_79)))))
 (let ((?x57397 (+ (+ ?x57393 (* 1.0 (* l_0_16_80 l_0_16_80))) (* 1.0 (* l_0_16_81 l_0_16_81)))))
 (let ((?x57401 (+ (+ ?x57397 (* 1.0 (* l_0_16_82 l_0_16_82))) (* 1.0 (* l_0_16_83 l_0_16_83)))))
 (= (+ ?x57401 (* 1.0 (* l_0_16_84 l_0_16_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56007 (* ?x54511 l_0_16_86)))
 (let ((?x54109 (* l_0_16_64 l_0_16_64)))
 (let ((?x55730 (* 3.0 ?x54109)))
 (let ((?x55727 (* (* 3.0 l_0_16_43) l_0_16_43)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x55984 (* ?x54470 l_0_16_170)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x55982 (* ?x54467 l_0_16_149)))
 (let ((?x46372 (+ (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_107) ?x55982) ?x55984) ?x55727) ?x55730)))
 (= (+ ?x46372 ?x56007) 0.0))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x56835 (* ?x54800 l_0_16_89)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x56833 (* ?x54797 l_0_16_88)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55767 (* ?x54106 l_0_16_67)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55760 (* ?x54094 l_0_16_46)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x56788 (* ?x54714 l_0_16_173)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x56786 (* ?x54711 l_0_16_172)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x56784 (* ?x54708 l_0_16_152)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x56782 (* ?x54705 l_0_16_151)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x56777 (* ?x54677 l_0_16_110)))
 (let ((?x57447 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_109) ?x56777) ?x56782) ?x56784) ?x56786)))
 (= (+ (+ (+ (- (- ?x57447 ?x56788) ?x55760) ?x55767) ?x56833) ?x56835) 0.0)))))))))))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x54801 (* ?x54800 l_0_16_92)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x54798 (* ?x54797 l_0_16_91)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x54215 (* ?x54106 l_0_16_70)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x54207 (* ?x54094 l_0_16_49)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x54715 (* ?x54714 l_0_16_176)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x54712 (* ?x54711 l_0_16_175)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x54709 (* ?x54708 l_0_16_155)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x54706 (* ?x54705 l_0_16_154)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x54678 (* ?x54677 l_0_16_113)))
 (let ((?x57462 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_112) ?x54678) ?x54706) ?x54709) ?x54712)))
 (= (+ (+ (+ (- (- ?x57462 ?x54715) ?x54207) ?x54215) ?x54798) ?x54801) 0.0)))))))))))))))))))))
(assert
 (let ((?x54800 (* 2.0 l_0_16_87)))
 (let ((?x57058 (* ?x54800 l_0_16_96)))
 (let ((?x54797 (* 2.0 l_0_16_86)))
 (let ((?x57056 (* ?x54797 l_0_16_95)))
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55819 (* ?x54106 l_0_16_74)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55813 (* ?x54094 l_0_16_53)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x56984 (* ?x54714 l_0_16_180)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x56982 (* ?x54711 l_0_16_179)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x56980 (* ?x54708 l_0_16_159)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x56977 (* ?x54705 l_0_16_158)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x56971 (* ?x54677 l_0_16_117)))
 (let ((?x46554 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_116) ?x56971) ?x56977) ?x56980) ?x56982)))
 (= (+ (+ (+ (- (- ?x46554 ?x56984) ?x55813) ?x55819) ?x57056) ?x57058) 0.0)))))))))))))))))))))
(assert
 (let ((?x54106 (* 6.0 l_0_16_64)))
 (let ((?x55881 (* ?x54106 l_0_16_79)))
 (let ((?x54094 (* 6.0 l_0_16_43)))
 (let ((?x55875 (* ?x54094 l_0_16_58)))
 (let ((?x54714 (* 2.0 l_0_16_171)))
 (let ((?x57126 (* ?x54714 l_0_16_185)))
 (let ((?x54711 (* 2.0 l_0_16_170)))
 (let ((?x57124 (* ?x54711 l_0_16_184)))
 (let ((?x54708 (* 2.0 l_0_16_150)))
 (let ((?x57122 (* ?x54708 l_0_16_164)))
 (let ((?x54705 (* 2.0 l_0_16_149)))
 (let ((?x57119 (* ?x54705 l_0_16_163)))
 (let ((?x54677 (* 2.0 l_0_16_108)))
 (let ((?x57111 (* ?x54677 l_0_16_122)))
 (let ((?x6126 (* 2.0 l_0_16_107)))
 (let ((?x57109 (* ?x6126 l_0_16_121)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x57107 (* ?x55531 l_0_16_87)))
 (let ((?x6047 (+ (- (- (+ (* (* 2.0 l_0_16_100) l_0_16_86) ?x57107) ?x57109) ?x57111) ?x57119)))
 (= (+ (- (- (- (+ ?x6047 ?x57122) ?x57124) ?x57126) ?x55875) ?x55881) 0.0)))))))))))))))))))))
(assert
 (let ((?x53862 (* l_0_16_69 l_0_16_69)))
 (let ((?x56143 (* 3.0 ?x53862)))
 (let ((?x53859 (* l_0_16_68 l_0_16_68)))
 (let ((?x56141 (* 3.0 ?x53859)))
 (let ((?x53856 (* l_0_16_67 l_0_16_67)))
 (let ((?x56139 (* 3.0 ?x53856)))
 (let ((?x56134 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x56131 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x6051 (+ (+ (- (- (* (* (- 3.0) l_0_16_46) l_0_16_46) ?x56131) ?x56134) ?x56139) ?x56141)))
 (= (+ ?x6051 ?x56143) 0.0)))))))))))
(assert
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x54333 (* ?x54332 l_0_16_72)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x54330 (* ?x54329 l_0_16_71)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x54327 (* ?x54326 l_0_16_70)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x54321 (* ?x54320 l_0_16_51)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x54318 (* ?x54317 l_0_16_50)))
 (let ((?x57472 (+ (+ (- (- (* (* (- 6.0) l_0_16_46) l_0_16_49) ?x54318) ?x54321) ?x54327) ?x54330)))
 (= (+ ?x57472 ?x54333) 0.0)))))))))))))
(assert
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x56207 (* ?x54332 l_0_16_76)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x56205 (* ?x54329 l_0_16_75)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x56203 (* ?x54326 l_0_16_74)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x56200 (* ?x54320 l_0_16_55)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x56198 (* ?x54317 l_0_16_54)))
 (let ((?x57484 (+ (+ (- (- (* (* (- 6.0) l_0_16_46) l_0_16_53) ?x56198) ?x56200) ?x56203) ?x56205)))
 (= (+ ?x57484 ?x56207) 0.0)))))))))))))
(assert
 (let ((?x54332 (* 6.0 l_0_16_69)))
 (let ((?x56293 (* ?x54332 l_0_16_81)))
 (let ((?x54329 (* 6.0 l_0_16_68)))
 (let ((?x56291 (* ?x54329 l_0_16_80)))
 (let ((?x54326 (* 6.0 l_0_16_67)))
 (let ((?x56289 (* ?x54326 l_0_16_79)))
 (let ((?x54320 (* 6.0 l_0_16_48)))
 (let ((?x56286 (* ?x54320 l_0_16_60)))
 (let ((?x54317 (* 6.0 l_0_16_47)))
 (let ((?x56284 (* ?x54317 l_0_16_59)))
 (let ((?x46750 (+ (+ (- (- (* (* (- 6.0) l_0_16_46) l_0_16_58) ?x56284) ?x56286) ?x56289) ?x56291)))
 (= (+ ?x46750 ?x56293) 0.0)))))))))))))
(assert
 (let ((?x53984 (* l_0_16_73 l_0_16_73)))
 (let ((?x54412 (* 3.0 ?x53984)))
 (let ((?x53981 (* l_0_16_72 l_0_16_72)))
 (let ((?x54410 (* 3.0 ?x53981)))
 (let ((?x53978 (* l_0_16_71 l_0_16_71)))
 (let ((?x54408 (* 3.0 ?x53978)))
 (let ((?x53975 (* l_0_16_70 l_0_16_70)))
 (let ((?x54406 (* 3.0 ?x53975)))
 (let ((?x54403 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x54400 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x54397 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x57493 (+ (- (- (- (* (* (- 3.0) l_0_16_49) l_0_16_49) ?x54397) ?x54400) ?x54403) ?x54406)))
 (= (+ (+ (+ ?x57493 ?x54408) ?x54410) ?x54412) 0.0))))))))))))))
(assert
 (let ((?x54508 (* 6.0 l_0_16_73)))
 (let ((?x54509 (* ?x54508 l_0_16_77)))
 (let ((?x54505 (* 6.0 l_0_16_72)))
 (let ((?x54506 (* ?x54505 l_0_16_76)))
 (let ((?x54502 (* 6.0 l_0_16_71)))
 (let ((?x54503 (* ?x54502 l_0_16_75)))
 (let ((?x54499 (* 6.0 l_0_16_70)))
 (let ((?x54500 (* ?x54499 l_0_16_74)))
 (let ((?x54496 (* 6.0 l_0_16_52)))
 (let ((?x54497 (* ?x54496 l_0_16_56)))
 (let ((?x54493 (* 6.0 l_0_16_51)))
 (let ((?x54494 (* ?x54493 l_0_16_55)))
 (let ((?x54490 (* 6.0 l_0_16_50)))
 (let ((?x54491 (* ?x54490 l_0_16_54)))
 (let ((?x46806 (+ (- (- (- (* (* (- 6.0) l_0_16_49) l_0_16_53) ?x54491) ?x54494) ?x54497) ?x54500)))
 (= (+ (+ (+ ?x46806 ?x54503) ?x54506) ?x54509) 0.0)))))))))))))))))
(assert
 (let ((?x54508 (* 6.0 l_0_16_73)))
 (let ((?x54629 (* ?x54508 l_0_16_82)))
 (let ((?x54505 (* 6.0 l_0_16_72)))
 (let ((?x54627 (* ?x54505 l_0_16_81)))
 (let ((?x54502 (* 6.0 l_0_16_71)))
 (let ((?x54625 (* ?x54502 l_0_16_80)))
 (let ((?x54499 (* 6.0 l_0_16_70)))
 (let ((?x54623 (* ?x54499 l_0_16_79)))
 (let ((?x54496 (* 6.0 l_0_16_52)))
 (let ((?x54621 (* ?x54496 l_0_16_61)))
 (let ((?x54493 (* 6.0 l_0_16_51)))
 (let ((?x54619 (* ?x54493 l_0_16_60)))
 (let ((?x54490 (* 6.0 l_0_16_50)))
 (let ((?x54617 (* ?x54490 l_0_16_59)))
 (let ((?x57511 (+ (- (- (- (* (* (- 6.0) l_0_16_49) l_0_16_58) ?x54617) ?x54619) ?x54621) ?x54623)))
 (= (+ (+ (+ ?x57511 ?x54625) ?x54627) ?x54629) 0.0)))))))))))))))))
(assert
 (let ((?x56397 (* l_0_16_78 l_0_16_78)))
 (let ((?x56398 (* 3.0 ?x56397)))
 (let ((?x56394 (* l_0_16_77 l_0_16_77)))
 (let ((?x56395 (* 3.0 ?x56394)))
 (let ((?x56391 (* l_0_16_76 l_0_16_76)))
 (let ((?x56392 (* 3.0 ?x56391)))
 (let ((?x56388 (* l_0_16_75 l_0_16_75)))
 (let ((?x56389 (* 3.0 ?x56388)))
 (let ((?x56385 (* l_0_16_74 l_0_16_74)))
 (let ((?x56386 (* 3.0 ?x56385)))
 (let ((?x56383 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x56380 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x56377 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x56374 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x57521 (- (- (- (- (* (* (- 3.0) l_0_16_53) l_0_16_53) ?x56374) ?x56377) ?x56380) ?x56383)))
 (= (+ (+ (+ (+ (+ ?x57521 ?x56386) ?x56389) ?x56392) ?x56395) ?x56398) 0.0)))))))))))))))))
(assert
 (let ((?x56516 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x56513 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x56510 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x56507 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x56504 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x56501 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x56498 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x56495 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x56492 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x57535 (- (- (- (- (* (* (- 6.0) l_0_16_53) l_0_16_58) ?x56492) ?x56495) ?x56498) ?x56501)))
 (= (+ (+ (+ (+ (+ ?x57535 ?x56504) ?x56507) ?x56510) ?x56513) ?x56516) 0.0))))))))))))
(assert
 (let ((?x56645 (* l_0_16_84 l_0_16_84)))
 (let ((?x56646 (* 3.0 ?x56645)))
 (let ((?x56642 (* l_0_16_83 l_0_16_83)))
 (let ((?x56643 (* 3.0 ?x56642)))
 (let ((?x56639 (* l_0_16_82 l_0_16_82)))
 (let ((?x56640 (* 3.0 ?x56639)))
 (let ((?x56636 (* l_0_16_81 l_0_16_81)))
 (let ((?x56637 (* 3.0 ?x56636)))
 (let ((?x56633 (* l_0_16_80 l_0_16_80)))
 (let ((?x56634 (* 3.0 ?x56633)))
 (let ((?x56630 (* l_0_16_79 l_0_16_79)))
 (let ((?x56631 (* 3.0 ?x56630)))
 (let ((?x56628 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x56625 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x56622 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x56619 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x56616 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x57546 (- (- (- (- (* (* (- 3.0) l_0_16_58) l_0_16_58) ?x56616) ?x56619) ?x56622) ?x56625)))
 (let ((?x57553 (+ (+ (+ (+ (+ (+ (- ?x57546 ?x56628) ?x56631) ?x56634) ?x56637) ?x56640) ?x56643) ?x56646)))
 (= ?x57553 0.0)))))))))))))))))))))
(assert
 (let ((?x53862 (* l_0_16_69 l_0_16_69)))
 (let ((?x53859 (* l_0_16_68 l_0_16_68)))
 (let ((?x53856 (* l_0_16_67 l_0_16_67)))
 (let ((?x53895 (* l_0_16_48 l_0_16_48)))
 (let ((?x57562 (- (+ (+ (* l_0_16_46 l_0_16_46) (* l_0_16_47 l_0_16_47)) ?x53895) ?x53856)))
 (= (- (- ?x57562 ?x53859) ?x53862) 0.0)))))))
(assert
 (let ((?x57604 (* l_0_16_90 l_0_16_90)))
 (let ((?x57602 (* l_0_16_89 l_0_16_89)))
 (let ((?x57600 (* l_0_16_88 l_0_16_88)))
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x56831 (* ?x53627 l_0_16_76)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x56829 (* ?x53624 l_0_16_75)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x56827 (* ?x53621 l_0_16_74)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x56823 (* ?x53606 l_0_16_55)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x56821 (* ?x53603 l_0_16_54)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x56819 (* ?x53600 l_0_16_53)))
 (let ((?x57592 (* l_0_16_174 l_0_16_174)))
 (let ((?x57590 (* l_0_16_173 l_0_16_173)))
 (let ((?x57588 (* l_0_16_172 l_0_16_172)))
 (let ((?x57586 (* l_0_16_153 l_0_16_153)))
 (let ((?x57584 (* l_0_16_152 l_0_16_152)))
 (let ((?x57582 (* l_0_16_151 l_0_16_151)))
 (let ((?x57580 (* l_0_16_111 l_0_16_111)))
 (let ((?x57581 (+ (+ (* l_0_16_109 l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x57580)))
 (let ((?x57594 (+ (+ (+ (+ (- (- (- ?x57581 ?x57582) ?x57584) ?x57586) ?x57588) ?x57590) ?x57592) ?x56819)))
 (let ((?x57603 (- (- (- (- (- (+ (+ ?x57594 ?x56821) ?x56823) ?x56827) ?x56829) ?x56831) ?x57600) ?x57602)))
 (= (- ?x57603 ?x57604) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53627 (* 2.0 l_0_16_69)))
 (let ((?x56900 (* ?x53627 l_0_16_81)))
 (let ((?x53624 (* 2.0 l_0_16_68)))
 (let ((?x56898 (* ?x53624 l_0_16_80)))
 (let ((?x53621 (* 2.0 l_0_16_67)))
 (let ((?x56896 (* ?x53621 l_0_16_79)))
 (let ((?x53606 (* 2.0 l_0_16_48)))
 (let ((?x56892 (* ?x53606 l_0_16_60)))
 (let ((?x53603 (* 2.0 l_0_16_47)))
 (let ((?x56890 (* ?x53603 l_0_16_59)))
 (let ((?x53600 (* 2.0 l_0_16_46)))
 (let ((?x56888 (* ?x53600 l_0_16_58)))
 (let ((?x56120 (* l_0_16_132 l_0_16_132)))
 (let ((?x57620 (- (- (* (- l_0_16_130) l_0_16_130) (* l_0_16_131 l_0_16_131)) ?x56120)))
 (= (- (- (- (+ (+ (+ ?x57620 ?x56888) ?x56890) ?x56892) ?x56896) ?x56898) ?x56900) 0.0))))))))))))))))
(assert
 (let ((?x55197 (* 2.0 l_0_16_90)))
 (let ((?x57656 (* ?x55197 l_0_16_97)))
 (let ((?x55194 (* 2.0 l_0_16_89)))
 (let ((?x57654 (* ?x55194 l_0_16_96)))
 (let ((?x55191 (* 2.0 l_0_16_88)))
 (let ((?x57652 (* ?x55191 l_0_16_95)))
 (let ((?x56397 (* l_0_16_78 l_0_16_78)))
 (let ((?x56394 (* l_0_16_77 l_0_16_77)))
 (let ((?x56391 (* l_0_16_76 l_0_16_76)))
 (let ((?x56388 (* l_0_16_75 l_0_16_75)))
 (let ((?x56385 (* l_0_16_74 l_0_16_74)))
 (let ((?x44928 (* l_0_16_57 l_0_16_57)))
 (let ((?x8314 (* l_0_16_56 l_0_16_56)))
 (let ((?x8250 (* l_0_16_55 l_0_16_55)))
 (let ((?x44855 (* l_0_16_54 l_0_16_54)))
 (let ((?x7734 (* l_0_16_53 l_0_16_53)))
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x57640 (* ?x55174 l_0_16_181)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x57638 (* ?x55171 l_0_16_180)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x57636 (* ?x55168 l_0_16_179)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x57634 (* ?x55165 l_0_16_160)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x57632 (* ?x55162 l_0_16_159)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x57630 (* ?x55159 l_0_16_158)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x47040 (* ?x55151 l_0_16_118)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x47038 (* ?x55148 l_0_16_117)))
 (let ((?x57633 (- (- (+ (+ (* (* 2.0 l_0_16_109) l_0_16_116) ?x47038) ?x47040) ?x57630) ?x57632)))
 (let ((?x57644 (+ (+ (+ (+ (+ (+ (- ?x57633 ?x57634) ?x57636) ?x57638) ?x57640) ?x7734) ?x44855) ?x8250)))
 (let ((?x57651 (- (- (- (- (- (+ (+ ?x57644 ?x8314) ?x44928) ?x56385) ?x56388) ?x56391) ?x56394) ?x56397)))
 (= (- (- (- ?x57651 ?x57652) ?x57654) ?x57656) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57221 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x57218 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x57215 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x57212 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x57209 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x57206 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x57203 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x57200 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x57197 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x57194 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x57698 (* ?x55174 l_0_16_186)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x57696 (* ?x55171 l_0_16_185)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x57694 (* ?x55168 l_0_16_184)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x57692 (* ?x55165 l_0_16_165)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x57690 (* ?x55162 l_0_16_164)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x57688 (* ?x55159 l_0_16_163)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x56183 (* ?x54304 l_0_16_139)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x56181 (* ?x54301 l_0_16_138)))
 (let ((?x33272 (* 2.0 l_0_16_130)))
 (let ((?x56179 (* ?x33272 l_0_16_137)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x57683 (* ?x55151 l_0_16_123)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x57681 (* ?x55148 l_0_16_122)))
 (let ((?x55144 (* 2.0 l_0_16_109)))
 (let ((?x57679 (* ?x55144 l_0_16_121)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x35944 (* ?x55534 l_0_16_90)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x10540 (* ?x55531 l_0_16_89)))
 (let ((?x57682 (+ (+ (- (- (* (* (- 2.0) l_0_16_100) l_0_16_88) ?x10540) ?x35944) ?x57679) ?x57681)))
 (let ((?x57693 (- (- (- (- (- (- (+ ?x57682 ?x57683) ?x56179) ?x56181) ?x56183) ?x57688) ?x57690) ?x57692)))
 (let ((?x57703 (+ (+ (+ (+ (+ (+ (+ ?x57693 ?x57694) ?x57696) ?x57698) ?x57194) ?x57197) ?x57200) ?x57203)))
 (= (- (- (- (- (- (+ ?x57703 ?x57206) ?x57209) ?x57212) ?x57215) ?x57218) ?x57221) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56645 (* l_0_16_84 l_0_16_84)))
 (let ((?x56642 (* l_0_16_83 l_0_16_83)))
 (let ((?x56639 (* l_0_16_82 l_0_16_82)))
 (let ((?x56636 (* l_0_16_81 l_0_16_81)))
 (let ((?x56633 (* l_0_16_80 l_0_16_80)))
 (let ((?x56630 (* l_0_16_79 l_0_16_79)))
 (let ((?x45390 (* l_0_16_63 l_0_16_63)))
 (let ((?x45378 (* l_0_16_62 l_0_16_62)))
 (let ((?x34915 (* l_0_16_61 l_0_16_61)))
 (let ((?x45366 (* l_0_16_60 l_0_16_60)))
 (let ((?x45360 (* l_0_16_59 l_0_16_59)))
 (let ((?x45354 (* l_0_16_58 l_0_16_58)))
 (let ((?x54304 (* 2.0 l_0_16_132)))
 (let ((?x56267 (* ?x54304 l_0_16_144)))
 (let ((?x54301 (* 2.0 l_0_16_131)))
 (let ((?x56265 (* ?x54301 l_0_16_143)))
 (let ((?x57745 (+ (+ (- (- (* (* (- 2.0) l_0_16_130) l_0_16_142) ?x56265) ?x56267) ?x45354) ?x45360)))
 (let ((?x57752 (- (- (- (+ (+ (+ (+ ?x57745 ?x45366) ?x34915) ?x45378) ?x45390) ?x56630) ?x56633) ?x56636)))
 (= (- (- (- ?x57752 ?x56639) ?x56642) ?x56645) 0.0))))))))))))))))))))
(assert
 (let ((?x57809 (* l_0_16_99 l_0_16_99)))
 (let ((?x57807 (* l_0_16_98 l_0_16_98)))
 (let ((?x57805 (* l_0_16_97 l_0_16_97)))
 (let ((?x57803 (* l_0_16_96 l_0_16_96)))
 (let ((?x57801 (* l_0_16_95 l_0_16_95)))
 (let ((?x57799 (* l_0_16_183 l_0_16_183)))
 (let ((?x57797 (* l_0_16_182 l_0_16_182)))
 (let ((?x57795 (* l_0_16_181 l_0_16_181)))
 (let ((?x57793 (* l_0_16_180 l_0_16_180)))
 (let ((?x57791 (* l_0_16_179 l_0_16_179)))
 (let ((?x57789 (* l_0_16_162 l_0_16_162)))
 (let ((?x57787 (* l_0_16_161 l_0_16_161)))
 (let ((?x57785 (* l_0_16_160 l_0_16_160)))
 (let ((?x57783 (* l_0_16_159 l_0_16_159)))
 (let ((?x57781 (* l_0_16_158 l_0_16_158)))
 (let ((?x57779 (* l_0_16_120 l_0_16_120)))
 (let ((?x57777 (* l_0_16_119 l_0_16_119)))
 (let ((?x57775 (* l_0_16_118 l_0_16_118)))
 (let ((?x57776 (+ (+ (* l_0_16_116 l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x57775)))
 (let ((?x57790 (- (- (- (- (- (+ (+ ?x57776 ?x57777) ?x57779) ?x57781) ?x57783) ?x57785) ?x57787) ?x57789)))
 (let ((?x57804 (- (- (+ (+ (+ (+ (+ ?x57790 ?x57791) ?x57793) ?x57795) ?x57797) ?x57799) ?x57801) ?x57803)))
 (= (- (- (- ?x57804 ?x57805) ?x57807) ?x57809) 0.0)))))))))))))))))))))))
(assert
 (let ((?x57883 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57880 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57877 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57874 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57871 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57868 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57865 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57862 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57859 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57856 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x56347 (* l_0_16_141 l_0_16_141)))
 (let ((?x56345 (* l_0_16_140 l_0_16_140)))
 (let ((?x56341 (* l_0_16_139 l_0_16_139)))
 (let ((?x56339 (* l_0_16_138 l_0_16_138)))
 (let ((?x56337 (* l_0_16_137 l_0_16_137)))
 (let ((?x57848 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x57845 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x57842 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x57839 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x57836 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x57833 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x55537 (* 2.0 l_0_16_103)))
 (let ((?x57830 (* ?x55537 l_0_16_98)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x57828 (* ?x55534 l_0_16_97)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x57826 (* ?x55531 l_0_16_96)))
 (let ((?x57834 (- (- (- (- (* (* (- 2.0) l_0_16_100) l_0_16_95) ?x57826) ?x57828) ?x57830) ?x57833)))
 (let ((?x57851 (- (- (+ (+ (+ (+ (+ ?x57834 ?x57836) ?x57839) ?x57842) ?x57845) ?x57848) ?x56337) ?x56339)))
 (let ((?x57866 (- (- (- (- (- (- (- ?x57851 ?x56341) ?x56345) ?x56347) ?x57856) ?x57859) ?x57862) ?x57865)))
 (= (+ (+ (+ (+ (+ (- ?x57866 ?x57868) ?x57871) ?x57874) ?x57877) ?x57880) ?x57883) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x57974 (* l_0_16_189 l_0_16_189)))
 (let ((?x57972 (* l_0_16_188 l_0_16_188)))
 (let ((?x57970 (* l_0_16_187 l_0_16_187)))
 (let ((?x57968 (* l_0_16_186 l_0_16_186)))
 (let ((?x57966 (* l_0_16_185 l_0_16_185)))
 (let ((?x57964 (* l_0_16_184 l_0_16_184)))
 (let ((?x57962 (* l_0_16_168 l_0_16_168)))
 (let ((?x57960 (* l_0_16_167 l_0_16_167)))
 (let ((?x57958 (* l_0_16_166 l_0_16_166)))
 (let ((?x57956 (* l_0_16_165 l_0_16_165)))
 (let ((?x57954 (* l_0_16_164 l_0_16_164)))
 (let ((?x57952 (* l_0_16_163 l_0_16_163)))
 (let ((?x56464 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56461 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56455 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56452 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56449 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x57945 (* l_0_16_126 l_0_16_126)))
 (let ((?x57943 (* l_0_16_125 l_0_16_125)))
 (let ((?x57941 (* l_0_16_124 l_0_16_124)))
 (let ((?x57939 (* l_0_16_123 l_0_16_123)))
 (let ((?x57937 (* l_0_16_122 l_0_16_122)))
 (let ((?x57935 (* l_0_16_121 l_0_16_121)))
 (let ((?x57933 (* l_0_16_105 l_0_16_105)))
 (let ((?x57931 (* l_0_16_104 l_0_16_104)))
 (let ((?x57929 (* l_0_16_103 l_0_16_103)))
 (let ((?x57914 (* l_0_16_102 l_0_16_102)))
 (let ((?x57915 (- (- (* (- l_0_16_100) l_0_16_100) (* l_0_16_101 l_0_16_101)) ?x57914)))
 (let ((?x57942 (+ (+ (+ (+ (- (- (- ?x57915 ?x57929) ?x57931) ?x57933) ?x57935) ?x57937) ?x57939) ?x57941)))
 (let ((?x57951 (- (- (- (- (- (+ (+ ?x57942 ?x57943) ?x57945) ?x56449) ?x56452) ?x56455) ?x56461) ?x56464)))
 (let ((?x57965 (+ (- (- (- (- (- (- ?x57951 ?x57952) ?x57954) ?x57956) ?x57958) ?x57960) ?x57962) ?x57964)))
 (= (+ (+ (+ (+ (+ ?x57965 ?x57966) ?x57968) ?x57970) ?x57972) ?x57974) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x55825 (* l_0_16_85 l_0_16_85)))
 (let ((?x55809 (* l_0_16_169 l_0_16_169)))
 (let ((?x58003 (- (+ (* (- l_0_16_106) l_0_16_106) (* l_0_16_148 l_0_16_148)) ?x55809)))
 (= (+ ?x58003 ?x55825) 0.0)))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56209 (* ?x54511 l_0_16_88)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56187 (* ?x54470 l_0_16_172)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56185 (* ?x54467 l_0_16_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_109) ?x56185) ?x56187) ?x56209) 0.0))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x54512 (* ?x54511 l_0_16_91)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x54471 (* ?x54470 l_0_16_175)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x54468 (* ?x54467 l_0_16_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_112) ?x54468) ?x54471) ?x54512) 0.0))))))))
(assert
 (let ((?x54511 (* 2.0 l_0_16_85)))
 (let ((?x56400 (* ?x54511 l_0_16_95)))
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56353 (* ?x54470 l_0_16_179)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56349 (* ?x54467 l_0_16_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_116) ?x56349) ?x56353) ?x56400) 0.0))))))))
(assert
 (let ((?x54470 (* 2.0 l_0_16_169)))
 (let ((?x56471 (* ?x54470 l_0_16_184)))
 (let ((?x54467 (* 2.0 l_0_16_148)))
 (let ((?x56466 (* ?x54467 l_0_16_163)))
 (let ((?x54443 (* 2.0 l_0_16_106)))
 (let ((?x56439 (* ?x54443 l_0_16_121)))
 (= (- (+ (- (* (* 2.0 l_0_16_100) l_0_16_85) ?x56439) ?x56466) ?x56471) 0.0))))))))
(assert
 (let ((?x57604 (* l_0_16_90 l_0_16_90)))
 (let ((?x57602 (* l_0_16_89 l_0_16_89)))
 (let ((?x57600 (* l_0_16_88 l_0_16_88)))
 (let ((?x57592 (* l_0_16_174 l_0_16_174)))
 (let ((?x57590 (* l_0_16_173 l_0_16_173)))
 (let ((?x57588 (* l_0_16_172 l_0_16_172)))
 (let ((?x57586 (* l_0_16_153 l_0_16_153)))
 (let ((?x57584 (* l_0_16_152 l_0_16_152)))
 (let ((?x57582 (* l_0_16_151 l_0_16_151)))
 (let ((?x57580 (* l_0_16_111 l_0_16_111)))
 (let ((?x58041 (- (- (* (- l_0_16_109) l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x57580)))
 (let ((?x58048 (+ (- (- (- (+ (+ (+ ?x58041 ?x57582) ?x57584) ?x57586) ?x57588) ?x57590) ?x57592) ?x57600)))
 (= (+ (+ ?x58048 ?x57602) ?x57604) 0.0))))))))))))))
(assert
 (let ((?x55197 (* 2.0 l_0_16_90)))
 (let ((?x55198 (* ?x55197 l_0_16_93)))
 (let ((?x55194 (* 2.0 l_0_16_89)))
 (let ((?x55195 (* ?x55194 l_0_16_92)))
 (let ((?x55191 (* 2.0 l_0_16_88)))
 (let ((?x55192 (* ?x55191 l_0_16_91)))
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x55175 (* ?x55174 l_0_16_177)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x55172 (* ?x55171 l_0_16_176)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x55169 (* ?x55168 l_0_16_175)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x55166 (* ?x55165 l_0_16_156)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x55163 (* ?x55162 l_0_16_155)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x55160 (* ?x55159 l_0_16_154)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x55152 (* ?x55151 l_0_16_114)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x55149 (* ?x55148 l_0_16_113)))
 (let ((?x36543 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_112) ?x55149) ?x55152) ?x55160) ?x55163)))
 (let ((?x58053 (+ (+ (+ (- (- (- (+ ?x36543 ?x55166) ?x55169) ?x55172) ?x55175) ?x55192) ?x55195) ?x55198)))
 (= ?x58053 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55197 (* 2.0 l_0_16_90)))
 (let ((?x57656 (* ?x55197 l_0_16_97)))
 (let ((?x55194 (* 2.0 l_0_16_89)))
 (let ((?x57654 (* ?x55194 l_0_16_96)))
 (let ((?x55191 (* 2.0 l_0_16_88)))
 (let ((?x57652 (* ?x55191 l_0_16_95)))
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x57640 (* ?x55174 l_0_16_181)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x57638 (* ?x55171 l_0_16_180)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x57636 (* ?x55168 l_0_16_179)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x57634 (* ?x55165 l_0_16_160)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x57632 (* ?x55162 l_0_16_159)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x57630 (* ?x55159 l_0_16_158)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x47040 (* ?x55151 l_0_16_118)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x47038 (* ?x55148 l_0_16_117)))
 (let ((?x47726 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_116) ?x47038) ?x47040) ?x57630) ?x57632)))
 (let ((?x36568 (+ (+ (+ (- (- (- (+ ?x47726 ?x57634) ?x57636) ?x57638) ?x57640) ?x57652) ?x57654) ?x57656)))
 (= ?x36568 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55174 (* 2.0 l_0_16_174)))
 (let ((?x57698 (* ?x55174 l_0_16_186)))
 (let ((?x55171 (* 2.0 l_0_16_173)))
 (let ((?x57696 (* ?x55171 l_0_16_185)))
 (let ((?x55168 (* 2.0 l_0_16_172)))
 (let ((?x57694 (* ?x55168 l_0_16_184)))
 (let ((?x55165 (* 2.0 l_0_16_153)))
 (let ((?x57692 (* ?x55165 l_0_16_165)))
 (let ((?x55162 (* 2.0 l_0_16_152)))
 (let ((?x57690 (* ?x55162 l_0_16_164)))
 (let ((?x55159 (* 2.0 l_0_16_151)))
 (let ((?x57688 (* ?x55159 l_0_16_163)))
 (let ((?x55151 (* 2.0 l_0_16_111)))
 (let ((?x57683 (* ?x55151 l_0_16_123)))
 (let ((?x55148 (* 2.0 l_0_16_110)))
 (let ((?x57681 (* ?x55148 l_0_16_122)))
 (let ((?x55144 (* 2.0 l_0_16_109)))
 (let ((?x57679 (* ?x55144 l_0_16_121)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x35944 (* ?x55534 l_0_16_90)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x10540 (* ?x55531 l_0_16_89)))
 (let ((?x47799 (- (- (+ (+ (* (* 2.0 l_0_16_100) l_0_16_88) ?x10540) ?x35944) ?x57679) ?x57681)))
 (let ((?x58059 (- (- (- (+ (+ (+ (- ?x47799 ?x57683) ?x57688) ?x57690) ?x57692) ?x57694) ?x57696) ?x57698)))
 (= ?x58059 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55350 (* l_0_16_94 l_0_16_94)))
 (let ((?x55348 (* l_0_16_93 l_0_16_93)))
 (let ((?x55346 (* l_0_16_92 l_0_16_92)))
 (let ((?x55344 (* l_0_16_91 l_0_16_91)))
 (let ((?x55330 (* l_0_16_178 l_0_16_178)))
 (let ((?x55328 (* l_0_16_177 l_0_16_177)))
 (let ((?x55326 (* l_0_16_176 l_0_16_176)))
 (let ((?x55324 (* l_0_16_175 l_0_16_175)))
 (let ((?x55322 (* l_0_16_157 l_0_16_157)))
 (let ((?x55320 (* l_0_16_156 l_0_16_156)))
 (let ((?x55318 (* l_0_16_155 l_0_16_155)))
 (let ((?x55316 (* l_0_16_154 l_0_16_154)))
 (let ((?x55310 (* l_0_16_115 l_0_16_115)))
 (let ((?x55308 (* l_0_16_114 l_0_16_114)))
 (let ((?x47810 (- (- (* (- l_0_16_112) l_0_16_112) (* l_0_16_113 l_0_16_113)) ?x55308)))
 (let ((?x58062 (- (- (+ (+ (+ (+ (- ?x47810 ?x55310) ?x55316) ?x55318) ?x55320) ?x55322) ?x55324) ?x55326)))
 (= (+ (+ (+ (+ (- (- ?x58062 ?x55328) ?x55330) ?x55344) ?x55346) ?x55348) ?x55350) 0.0))))))))))))))))))
(assert
 (let ((?x55457 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x55454 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x55451 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x55448 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x55434 (* 2.0 l_0_16_178)))
 (let ((?x55435 (* ?x55434 l_0_16_182)))
 (let ((?x55431 (* 2.0 l_0_16_177)))
 (let ((?x55432 (* ?x55431 l_0_16_181)))
 (let ((?x55428 (* 2.0 l_0_16_176)))
 (let ((?x55429 (* ?x55428 l_0_16_180)))
 (let ((?x55425 (* 2.0 l_0_16_175)))
 (let ((?x55426 (* ?x55425 l_0_16_179)))
 (let ((?x55422 (* 2.0 l_0_16_157)))
 (let ((?x55423 (* ?x55422 l_0_16_161)))
 (let ((?x55419 (* 2.0 l_0_16_156)))
 (let ((?x55420 (* ?x55419 l_0_16_160)))
 (let ((?x55416 (* 2.0 l_0_16_155)))
 (let ((?x55417 (* ?x55416 l_0_16_159)))
 (let ((?x55413 (* 2.0 l_0_16_154)))
 (let ((?x55414 (* ?x55413 l_0_16_158)))
 (let ((?x55402 (* 2.0 l_0_16_115)))
 (let ((?x55403 (* ?x55402 l_0_16_119)))
 (let ((?x55399 (* 2.0 l_0_16_114)))
 (let ((?x55400 (* ?x55399 l_0_16_118)))
 (let ((?x55396 (* 2.0 l_0_16_113)))
 (let ((?x55397 (* ?x55396 l_0_16_117)))
 (let ((?x58078 (+ (- (- (- (* (* (- 2.0) l_0_16_112) l_0_16_116) ?x55397) ?x55400) ?x55403) ?x55414)))
 (let ((?x58085 (- (- (- (- (+ (+ (+ ?x58078 ?x55417) ?x55420) ?x55423) ?x55426) ?x55429) ?x55432) ?x55435)))
 (= (+ (+ (+ (+ ?x58085 ?x55448) ?x55451) ?x55454) ?x55457) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55434 (* 2.0 l_0_16_178)))
 (let ((?x55578 (* ?x55434 l_0_16_187)))
 (let ((?x55431 (* 2.0 l_0_16_177)))
 (let ((?x55576 (* ?x55431 l_0_16_186)))
 (let ((?x55428 (* 2.0 l_0_16_176)))
 (let ((?x55574 (* ?x55428 l_0_16_185)))
 (let ((?x55425 (* 2.0 l_0_16_175)))
 (let ((?x55572 (* ?x55425 l_0_16_184)))
 (let ((?x55422 (* 2.0 l_0_16_157)))
 (let ((?x55570 (* ?x55422 l_0_16_166)))
 (let ((?x55419 (* 2.0 l_0_16_156)))
 (let ((?x55568 (* ?x55419 l_0_16_165)))
 (let ((?x55416 (* 2.0 l_0_16_155)))
 (let ((?x55566 (* ?x55416 l_0_16_164)))
 (let ((?x55413 (* 2.0 l_0_16_154)))
 (let ((?x55564 (* ?x55413 l_0_16_163)))
 (let ((?x55402 (* 2.0 l_0_16_115)))
 (let ((?x55548 (* ?x55402 l_0_16_124)))
 (let ((?x55399 (* 2.0 l_0_16_114)))
 (let ((?x55546 (* ?x55399 l_0_16_123)))
 (let ((?x55396 (* 2.0 l_0_16_113)))
 (let ((?x55544 (* ?x55396 l_0_16_122)))
 (let ((?x55393 (* 2.0 l_0_16_112)))
 (let ((?x55542 (* ?x55393 l_0_16_121)))
 (let ((?x55537 (* 2.0 l_0_16_103)))
 (let ((?x55538 (* ?x55537 l_0_16_94)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x55535 (* ?x55534 l_0_16_93)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x55532 (* ?x55531 l_0_16_92)))
 (let ((?x47872 (- (+ (+ (+ (* (* 2.0 l_0_16_100) l_0_16_91) ?x55532) ?x55535) ?x55538) ?x55542)))
 (let ((?x58099 (+ (+ (+ (+ (- (- (- ?x47872 ?x55544) ?x55546) ?x55548) ?x55564) ?x55566) ?x55568) ?x55570)))
 (= (- (- (- (- ?x58099 ?x55572) ?x55574) ?x55576) ?x55578) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57809 (* l_0_16_99 l_0_16_99)))
 (let ((?x57807 (* l_0_16_98 l_0_16_98)))
 (let ((?x57805 (* l_0_16_97 l_0_16_97)))
 (let ((?x57803 (* l_0_16_96 l_0_16_96)))
 (let ((?x57801 (* l_0_16_95 l_0_16_95)))
 (let ((?x57799 (* l_0_16_183 l_0_16_183)))
 (let ((?x57797 (* l_0_16_182 l_0_16_182)))
 (let ((?x57795 (* l_0_16_181 l_0_16_181)))
 (let ((?x57793 (* l_0_16_180 l_0_16_180)))
 (let ((?x57791 (* l_0_16_179 l_0_16_179)))
 (let ((?x57789 (* l_0_16_162 l_0_16_162)))
 (let ((?x57787 (* l_0_16_161 l_0_16_161)))
 (let ((?x57785 (* l_0_16_160 l_0_16_160)))
 (let ((?x57783 (* l_0_16_159 l_0_16_159)))
 (let ((?x57781 (* l_0_16_158 l_0_16_158)))
 (let ((?x57779 (* l_0_16_120 l_0_16_120)))
 (let ((?x57777 (* l_0_16_119 l_0_16_119)))
 (let ((?x57775 (* l_0_16_118 l_0_16_118)))
 (let ((?x47948 (- (- (* (- l_0_16_116) l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x57775)))
 (let ((?x58108 (+ (+ (+ (+ (+ (- (- ?x47948 ?x57777) ?x57779) ?x57781) ?x57783) ?x57785) ?x57787) ?x57789)))
 (let ((?x58115 (+ (+ (- (- (- (- (- ?x58108 ?x57791) ?x57793) ?x57795) ?x57797) ?x57799) ?x57801) ?x57803)))
 (= (+ (+ (+ ?x58115 ?x57805) ?x57807) ?x57809) 0.0)))))))))))))))))))))))
(assert
 (let ((?x57883 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57880 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57877 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57874 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57871 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57868 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57865 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57862 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57859 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57856 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x57848 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x57845 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x57842 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x57839 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x57836 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x57833 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x55537 (* 2.0 l_0_16_103)))
 (let ((?x57830 (* ?x55537 l_0_16_98)))
 (let ((?x55534 (* 2.0 l_0_16_102)))
 (let ((?x57828 (* ?x55534 l_0_16_97)))
 (let ((?x55531 (* 2.0 l_0_16_101)))
 (let ((?x57826 (* ?x55531 l_0_16_96)))
 (let ((?x47947 (+ (+ (+ (+ (* (* 2.0 l_0_16_100) l_0_16_95) ?x57826) ?x57828) ?x57830) ?x57833)))
 (let ((?x47953 (+ (+ (- (- (- (- (- ?x47947 ?x57836) ?x57839) ?x57842) ?x57845) ?x57848) ?x57856) ?x57859)))
 (let ((?x12720 (- (- (- (- (+ (+ (+ ?x47953 ?x57862) ?x57865) ?x57868) ?x57871) ?x57874) ?x57877) ?x57880)))
 (= (- ?x12720 ?x57883) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x57974 (* l_0_16_189 l_0_16_189)))
 (let ((?x57972 (* l_0_16_188 l_0_16_188)))
 (let ((?x57970 (* l_0_16_187 l_0_16_187)))
 (let ((?x57968 (* l_0_16_186 l_0_16_186)))
 (let ((?x57966 (* l_0_16_185 l_0_16_185)))
 (let ((?x57964 (* l_0_16_184 l_0_16_184)))
 (let ((?x57962 (* l_0_16_168 l_0_16_168)))
 (let ((?x57960 (* l_0_16_167 l_0_16_167)))
 (let ((?x57958 (* l_0_16_166 l_0_16_166)))
 (let ((?x57956 (* l_0_16_165 l_0_16_165)))
 (let ((?x57954 (* l_0_16_164 l_0_16_164)))
 (let ((?x57952 (* l_0_16_163 l_0_16_163)))
 (let ((?x57945 (* l_0_16_126 l_0_16_126)))
 (let ((?x57943 (* l_0_16_125 l_0_16_125)))
 (let ((?x57941 (* l_0_16_124 l_0_16_124)))
 (let ((?x57939 (* l_0_16_123 l_0_16_123)))
 (let ((?x57937 (* l_0_16_122 l_0_16_122)))
 (let ((?x57935 (* l_0_16_121 l_0_16_121)))
 (let ((?x57933 (* l_0_16_105 l_0_16_105)))
 (let ((?x57931 (* l_0_16_104 l_0_16_104)))
 (let ((?x57929 (* l_0_16_103 l_0_16_103)))
 (let ((?x57914 (* l_0_16_102 l_0_16_102)))
 (let ((?x48075 (+ (+ (* l_0_16_100 l_0_16_100) (* l_0_16_101 l_0_16_101)) ?x57914)))
 (let ((?x36943 (- (- (- (- (+ (+ (+ ?x48075 ?x57929) ?x57931) ?x57933) ?x57935) ?x57937) ?x57939) ?x57941)))
 (let ((?x58133 (+ (+ (+ (+ (+ (- (- ?x36943 ?x57943) ?x57945) ?x57952) ?x57954) ?x57956) ?x57958) ?x57960)))
 (let ((?x58140 (- (- (- (- (- (- (+ ?x58133 ?x57962) ?x57964) ?x57966) ?x57968) ?x57970) ?x57972) ?x57974)))
 (= ?x58140 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x56580 (* l_0_16_147 l_0_16_147)))
 (let ((?x56578 (* l_0_16_146 l_0_16_146)))
 (let ((?x56576 (* l_0_16_145 l_0_16_145)))
 (let ((?x56574 (* l_0_16_144 l_0_16_144)))
 (let ((?x48186 (- (- (* (- l_0_16_142) l_0_16_142) (* l_0_16_143 l_0_16_143)) ?x56574)))
 (= (- (- (- ?x48186 ?x56576) ?x56578) ?x56580) 0.0)))))))
(assert
 (>= l_0_16_1 0.0))
(assert
 (>= l_0_16_3 0.0))
(assert
 (>= l_0_16_6 0.0))
(assert
 (>= l_0_16_10 0.0))
(assert
 (>= l_0_16_15 0.0))
(assert
 (>= l_0_16_21 0.0))
(assert
 (>= l_0_16_22 0.0))
(assert
 (>= l_0_16_24 0.0))
(assert
 (>= l_0_16_27 0.0))
(assert
 (>= l_0_16_31 0.0))
(assert
 (>= l_0_16_36 0.0))
(assert
 (>= l_0_16_42 0.0))
(assert
 (>= l_0_16_43 0.0))
(assert
 (>= l_0_16_45 0.0))
(assert
 (>= l_0_16_48 0.0))
(assert
 (>= l_0_16_52 0.0))
(assert
 (>= l_0_16_57 0.0))
(assert
 (>= l_0_16_63 0.0))
(assert
 (>= l_0_16_64 0.0))
(assert
 (>= l_0_16_66 0.0))
(assert
 (>= l_0_16_69 0.0))
(assert
 (>= l_0_16_73 0.0))
(assert
 (>= l_0_16_78 0.0))
(assert
 (>= l_0_16_84 0.0))
(assert
 (>= l_0_16_85 0.0))
(assert
 (>= l_0_16_87 0.0))
(assert
 (>= l_0_16_90 0.0))
(assert
 (>= l_0_16_94 0.0))
(assert
 (>= l_0_16_99 0.0))
(assert
 (>= l_0_16_105 0.0))
(assert
 (>= l_0_16_106 0.0))
(assert
 (>= l_0_16_108 0.0))
(assert
 (>= l_0_16_111 0.0))
(assert
 (>= l_0_16_115 0.0))
(assert
 (>= l_0_16_120 0.0))
(assert
 (>= l_0_16_126 0.0))
(assert
 (>= l_0_16_127 0.0))
(assert
 (>= l_0_16_129 0.0))
(assert
 (>= l_0_16_132 0.0))
(assert
 (>= l_0_16_136 0.0))
(assert
 (>= l_0_16_141 0.0))
(assert
 (>= l_0_16_147 0.0))
(assert
 (>= l_0_16_148 0.0))
(assert
 (>= l_0_16_150 0.0))
(assert
 (>= l_0_16_153 0.0))
(assert
 (>= l_0_16_157 0.0))
(assert
 (>= l_0_16_162 0.0))
(assert
 (>= l_0_16_168 0.0))
(assert
 (>= l_0_16_169 0.0))
(assert
 (>= l_0_16_171 0.0))
(assert
 (>= l_0_16_174 0.0))
(assert
 (>= l_0_16_178 0.0))
(assert
 (>= l_0_16_183 0.0))
(assert
 (>= l_0_16_189 0.0))
(assert
 (>= l_0_16_190 0.0))
(assert
 (>= l_0_16_192 0.0))
(assert
 (>= l_0_16_195 0.0))
(assert
 (>= l_0_16_199 0.0))
(assert
 (>= l_0_16_204 0.0))
(assert
 (>= l_0_16_210 0.0))
(assert
 (>= l_0_16_211 0.0))
(assert
 (>= l_0_16_213 0.0))
(assert
 (>= l_0_16_216 0.0))
(assert
 (>= l_0_16_220 0.0))
(assert
 (>= l_0_16_225 0.0))
(assert
 (>= l_0_16_231 0.0))
(assert
 (>= l_0_16_232 0.0))
(assert
 (>= l_0_16_234 0.0))
(assert
 (>= l_0_16_237 0.0))
(assert
 (>= l_0_16_241 0.0))
(assert
 (>= l_0_16_246 0.0))
(assert
 (>= l_0_16_252 0.0))
(assert
 (>= l_0_16_253 0.0))
(assert
 (>= l_0_16_255 0.0))
(assert
 (>= l_0_16_258 0.0))
(assert
 (>= l_0_16_262 0.0))
(assert
 (>= l_0_16_267 0.0))
(assert
 (>= l_0_16_273 0.0))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x58328 (* ?x58327 l_0_17_96)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x58325 (* ?x58324 l_0_17_95)))
 (let ((?x58292 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x58289 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x58286 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x58283 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x58280 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x58277 (* l_0_17_288 l_0_17_288)))
 (let ((?x58275 (* l_0_17_287 l_0_17_287)))
 (let ((?x58273 (* l_0_17_286 l_0_17_286)))
 (let ((?x58271 (* l_0_17_285 l_0_17_285)))
 (let ((?x58269 (* l_0_17_284 l_0_17_284)))
 (let ((?x58267 (* l_0_17_267 l_0_17_267)))
 (let ((?x58265 (* l_0_17_266 l_0_17_266)))
 (let ((?x58263 (* l_0_17_265 l_0_17_265)))
 (let ((?x58261 (* l_0_17_264 l_0_17_264)))
 (let ((?x58259 (* l_0_17_263 l_0_17_263)))
 (let ((?x58257 (* l_0_17_246 l_0_17_246)))
 (let ((?x58255 (* l_0_17_245 l_0_17_245)))
 (let ((?x58253 (* l_0_17_244 l_0_17_244)))
 (let ((?x58251 (* l_0_17_243 l_0_17_243)))
 (let ((?x58249 (* l_0_17_242 l_0_17_242)))
 (let ((?x58247 (* l_0_17_225 l_0_17_225)))
 (let ((?x58245 (* l_0_17_224 l_0_17_224)))
 (let ((?x58243 (* l_0_17_223 l_0_17_223)))
 (let ((?x58241 (* l_0_17_222 l_0_17_222)))
 (let ((?x58239 (* l_0_17_221 l_0_17_221)))
 (let ((?x58237 (* l_0_17_204 l_0_17_204)))
 (let ((?x58235 (* l_0_17_203 l_0_17_203)))
 (let ((?x58233 (* l_0_17_202 l_0_17_202)))
 (let ((?x58231 (* l_0_17_201 l_0_17_201)))
 (let ((?x58229 (* l_0_17_200 l_0_17_200)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x58227 (* ?x58226 l_0_17_180)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x58224 (* ?x58223 l_0_17_179)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x58221 (* ?x58220 l_0_17_159)))
 (let ((?x58217 (* l_0_17_15 l_0_17_15)))
 (let ((?x58218 (* 6.0 ?x58217)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x58215 (* ?x58214 l_0_17_158)))
 (let ((?x58211 (* l_0_17_14 l_0_17_14)))
 (let ((?x58212 (* 6.0 ?x58211)))
 (let ((?x58208 (* l_0_17_13 l_0_17_13)))
 (let ((?x58209 (* 6.0 ?x58208)))
 (let ((?x58205 (* l_0_17_12 l_0_17_12)))
 (let ((?x58206 (* 6.0 ?x58205)))
 (let ((?x58202 (* l_0_17_11 l_0_17_11)))
 (let ((?x58203 (* 6.0 ?x58202)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x58200 (* ?x58199 l_0_17_117)))
 (let ((?x58204 (+ (+ (+ _a_0_ (* (* 2.0 l_0_17_107) l_0_17_116)) ?x58200) ?x58203)))
 (let ((?x58225 (+ (- (+ (- (+ (+ (+ ?x58204 ?x58206) ?x58209) ?x58212) ?x58215) ?x58218) ?x58221) ?x58224)))
 (let ((?x58240 (- (- (- (- (- (- (+ ?x58225 ?x58227) ?x58229) ?x58231) ?x58233) ?x58235) ?x58237) ?x58239)))
 (let ((?x58254 (- (- (- (- (- (- (- ?x58240 ?x58241) ?x58243) ?x58245) ?x58247) ?x58249) ?x58251) ?x58253)))
 (let ((?x58268 (- (- (- (- (- (- (- ?x58254 ?x58255) ?x58257) ?x58259) ?x58261) ?x58263) ?x58265) ?x58267)))
 (let ((?x58284 (- (- (- (- (- (- (- ?x58268 ?x58269) ?x58271) ?x58273) ?x58275) ?x58277) ?x58280) ?x58283)))
 (let ((?x58296 (- (- (- (- ?x58284 ?x58286) ?x58289) ?x58292) (* (* 1.0 l_0_17_53) l_0_17_53))))
 (let ((?x58302 (- (- ?x58296 (* (* 1.0 l_0_17_54) l_0_17_54)) (* (* 1.0 l_0_17_55) l_0_17_55))))
 (let ((?x58308 (- (- ?x58302 (* (* 1.0 l_0_17_56) l_0_17_56)) (* (* 1.0 l_0_17_57) l_0_17_57))))
 (let ((?x58314 (+ (+ ?x58308 (* 1.0 (* l_0_17_74 l_0_17_74))) (* 1.0 (* l_0_17_75 l_0_17_75)))))
 (let ((?x58320 (+ (+ ?x58314 (* 1.0 (* l_0_17_76 l_0_17_76))) (* 1.0 (* l_0_17_77 l_0_17_77)))))
 (= (- (- (+ ?x58320 (* 1.0 (* l_0_17_78 l_0_17_78))) ?x58325) ?x58328) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58423 (* l_0_17_3 l_0_17_3)))
 (let ((?x58424 (* 6.0 ?x58423)))
 (let ((?x58421 (* l_0_17_276 l_0_17_276)))
 (let ((?x58419 (* l_0_17_275 l_0_17_275)))
 (let ((?x58417 (* l_0_17_255 l_0_17_255)))
 (let ((?x58415 (* l_0_17_254 l_0_17_254)))
 (let ((?x58413 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x58410 (* l_0_17_234 l_0_17_234)))
 (let ((?x58408 (* l_0_17_233 l_0_17_233)))
 (let ((?x58406 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x58403 (* l_0_17_213 l_0_17_213)))
 (let ((?x58401 (* l_0_17_212 l_0_17_212)))
 (let ((?x58398 (* l_0_17_2 l_0_17_2)))
 (let ((?x58399 (* 6.0 ?x58398)))
 (let ((?x58396 (* l_0_17_192 l_0_17_192)))
 (let ((?x58404 (- (- (+ (- (- _a_1_ (* l_0_17_191 l_0_17_191)) ?x58396) ?x58399) ?x58401) ?x58403)))
 (let ((?x58420 (- (- (- (- (- (- (- ?x58404 ?x58406) ?x58408) ?x58410) ?x58413) ?x58415) ?x58417) ?x58419)))
 (let ((?x58431 (- (- (+ (- ?x58420 ?x58421) ?x58424) (* (* 1.0 l_0_17_44) l_0_17_44)) (* (* 1.0 l_0_17_45) l_0_17_45))))
 (let ((?x58437 (+ (+ ?x58431 (* 1.0 (* l_0_17_65 l_0_17_65))) (* 1.0 (* l_0_17_66 l_0_17_66)))))
 (= (- ?x58437 1.0) 0.0)))))))))))))))))))))
(assert
 (let ((?x58547 (* l_0_17_87 l_0_17_87)))
 (let ((?x58545 (* l_0_17_86 l_0_17_86)))
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x58543 (* ?x58542 l_0_17_75)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x58540 (* ?x58539 l_0_17_74)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x58537 (* ?x58536 l_0_17_54)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x58534 (* ?x58533 l_0_17_53)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x58519 (* ?x58518 l_0_17_33)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x58510 (* ?x58509 l_0_17_32)))
 (let ((?x58495 (* l_0_17_171 l_0_17_171)))
 (let ((?x58493 (* l_0_17_170 l_0_17_170)))
 (let ((?x58491 (* l_0_17_150 l_0_17_150)))
 (let ((?x58489 (* l_0_17_149 l_0_17_149)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x58487 (* ?x58486 l_0_17_3)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x58484 (* ?x58483 l_0_17_2)))
 (let ((?x58481 (* l_0_17_108 l_0_17_108)))
 (let ((?x58490 (- (+ (+ (+ (+ _a_2_ (* l_0_17_107 l_0_17_107)) ?x58481) ?x58484) ?x58487) ?x58489)))
 (let ((?x58499 (- (+ (+ (- ?x58490 ?x58491) ?x58493) ?x58495) (* (* 2.0 l_0_17_191) l_0_17_200))))
 (let ((?x58505 (- (- ?x58499 (* (* 2.0 l_0_17_192) l_0_17_201)) (* (* 2.0 l_0_17_212) l_0_17_221))))
 (let ((?x58514 (- (- (- ?x58505 (* (* 2.0 l_0_17_213) l_0_17_222)) ?x58510) (* (* 2.0 l_0_17_233) l_0_17_242))))
 (let ((?x58523 (- (- (- ?x58514 (* (* 2.0 l_0_17_234) l_0_17_243)) ?x58519) (* (* 2.0 l_0_17_254) l_0_17_263))))
 (let ((?x58529 (- (- ?x58523 (* (* 2.0 l_0_17_255) l_0_17_264)) (* (* 2.0 l_0_17_275) l_0_17_284))))
 (let ((?x58541 (+ (- (- (- ?x58529 (* (* 2.0 l_0_17_276) l_0_17_285)) ?x58534) ?x58537) ?x58540)))
 (= (- (- (+ ?x58541 ?x58543) ?x58545) ?x58547) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x58679 (* ?x58542 l_0_17_68)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x58677 (* ?x58539 l_0_17_67)))
 (let ((?x58674 (* l_0_17_6 l_0_17_6)))
 (let ((?x58675 (* 6.0 ?x58674)))
 (let ((?x58671 (* l_0_17_5 l_0_17_5)))
 (let ((?x58672 (* 6.0 ?x58671)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x58660 (* ?x58536 l_0_17_47)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x58658 (* ?x58533 l_0_17_46)))
 (let ((?x58655 (* l_0_17_4 l_0_17_4)))
 (let ((?x58656 (* 6.0 ?x58655)))
 (let ((?x58653 (* l_0_17_279 l_0_17_279)))
 (let ((?x58651 (* l_0_17_278 l_0_17_278)))
 (let ((?x58649 (* l_0_17_277 l_0_17_277)))
 (let ((?x58647 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x58644 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x58641 (* l_0_17_258 l_0_17_258)))
 (let ((?x58639 (* l_0_17_257 l_0_17_257)))
 (let ((?x58637 (* l_0_17_256 l_0_17_256)))
 (let ((?x58635 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x58632 (* l_0_17_237 l_0_17_237)))
 (let ((?x58630 (* l_0_17_236 l_0_17_236)))
 (let ((?x58628 (* l_0_17_235 l_0_17_235)))
 (let ((?x58626 (* l_0_17_216 l_0_17_216)))
 (let ((?x58624 (* l_0_17_215 l_0_17_215)))
 (let ((?x58622 (* l_0_17_214 l_0_17_214)))
 (let ((?x58620 (* l_0_17_195 l_0_17_195)))
 (let ((?x58618 (* l_0_17_194 l_0_17_194)))
 (let ((?x58625 (- (- (- (- (- _a_3_ (* l_0_17_193 l_0_17_193)) ?x58618) ?x58620) ?x58622) ?x58624)))
 (let ((?x58640 (- (- (- (- (- (- (- ?x58625 ?x58626) ?x58628) ?x58630) ?x58632) ?x58635) ?x58637) ?x58639)))
 (let ((?x58657 (+ (- (- (- (- (- (- ?x58640 ?x58641) ?x58644) ?x58647) ?x58649) ?x58651) ?x58653) ?x58656)))
 (let ((?x58667 (- (- (+ (+ ?x58657 ?x58658) ?x58660) (* (* 1.0 l_0_17_46) l_0_17_46)) (* (* 1.0 l_0_17_47) l_0_17_47))))
 (let ((?x58678 (- (+ (+ (- ?x58667 (* (* 1.0 l_0_17_48) l_0_17_48)) ?x58672) ?x58675) ?x58677)))
 (let ((?x58686 (+ (+ (- ?x58678 ?x58679) (* 1.0 (* l_0_17_67 l_0_17_67))) (* 1.0 (* l_0_17_68 l_0_17_68)))))
 (= (+ ?x58686 (* 1.0 (* l_0_17_69 l_0_17_69))) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58435 (* l_0_17_66 l_0_17_66)))
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x58679 (* ?x58542 l_0_17_68)))
 (let ((?x58432 (* l_0_17_65 l_0_17_65)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x58677 (* ?x58539 l_0_17_67)))
 (let ((?x58473 (* l_0_17_45 l_0_17_45)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x58660 (* ?x58536 l_0_17_47)))
 (let ((?x58469 (* l_0_17_44 l_0_17_44)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x58658 (* ?x58533 l_0_17_46)))
 (let ((?x58777 (* 12.0 l_0_17_3)))
 (let ((?x58778 (* ?x58777 l_0_17_5)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x58767 (* ?x58518 l_0_17_26)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x58761 (* ?x58509 l_0_17_25)))
 (let ((?x58754 (* 12.0 l_0_17_2)))
 (let ((?x58755 (* ?x58754 l_0_17_4)))
 (let ((?x58753 (- (- _a_4_ (* (* 2.0 l_0_17_191) l_0_17_193)) (* (* 2.0 l_0_17_192) l_0_17_194))))
 (let ((?x58760 (- (- (+ ?x58753 ?x58755) (* (* 2.0 l_0_17_212) l_0_17_214)) (* (* 2.0 l_0_17_213) l_0_17_215))))
 (let ((?x58766 (- (- (- ?x58760 ?x58761) (* (* 2.0 l_0_17_233) l_0_17_235)) (* (* 2.0 l_0_17_234) l_0_17_236))))
 (let ((?x58772 (- (- (- ?x58766 ?x58767) (* (* 2.0 l_0_17_254) l_0_17_256)) (* (* 2.0 l_0_17_255) l_0_17_257))))
 (let ((?x58776 (- (- ?x58772 (* (* 2.0 l_0_17_275) l_0_17_277)) (* (* 2.0 l_0_17_276) l_0_17_278))))
 (let ((?x58785 (- (+ (+ (- (+ (- (+ ?x58776 ?x58778) ?x58658) ?x58469) ?x58660) ?x58473) ?x58677) ?x58432)))
 (= (- (+ ?x58785 ?x58679) ?x58435) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x58930 (* ?x58327 l_0_17_89)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x58928 (* ?x58324 l_0_17_88)))
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x58926 (* ?x58925 l_0_17_76)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x58923 (* ?x58922 l_0_17_75)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x58920 (* ?x58919 l_0_17_74)))
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x58543 (* ?x58542 l_0_17_75)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x58540 (* ?x58539 l_0_17_74)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x58915 (* ?x58914 l_0_17_55)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x58912 (* ?x58911 l_0_17_54)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x58909 (* ?x58908 l_0_17_53)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x58537 (* ?x58536 l_0_17_54)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x58534 (* ?x58533 l_0_17_53)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x58895 (* ?x58894 l_0_17_34)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x58892 (* ?x58891 l_0_17_33)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x58880 (* ?x58879 l_0_17_32)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x58850 (* ?x58226 l_0_17_173)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x58848 (* ?x58223 l_0_17_172)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x58846 (* ?x58220 l_0_17_152)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x58844 (* ?x58214 l_0_17_151)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x58842 (* ?x58841 l_0_17_6)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x58839 (* ?x58486 l_0_17_5)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x58837 (* ?x58483 l_0_17_4)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x58835 (* ?x58199 l_0_17_110)))
 (let ((?x58838 (+ (+ (+ _a_5_ (* (* 2.0 l_0_17_107) l_0_17_109)) ?x58835) ?x58837)))
 (let ((?x58854 (- (+ (+ (- (- (+ (+ ?x58838 ?x58839) ?x58842) ?x58844) ?x58846) ?x58848) ?x58850) (* (* 2.0 l_0_17_193) l_0_17_200))))
 (let ((?x58860 (- (- ?x58854 (* (* 2.0 l_0_17_194) l_0_17_201)) (* (* 2.0 l_0_17_195) l_0_17_202))))
 (let ((?x58866 (- (- ?x58860 (* (* 2.0 l_0_17_214) l_0_17_221)) (* (* 2.0 l_0_17_215) l_0_17_222))))
 (let ((?x58872 (- (- ?x58866 (* (* 2.0 l_0_17_216) l_0_17_223)) (* (* 2.0 l_0_17_235) l_0_17_242))))
 (let ((?x58878 (- (- ?x58872 (* (* 2.0 l_0_17_236) l_0_17_243)) (* (* 2.0 l_0_17_237) l_0_17_244))))
 (let ((?x58887 (- (- (- ?x58878 ?x58880) (* (* 2.0 l_0_17_256) l_0_17_263)) (* (* 2.0 l_0_17_257) l_0_17_264))))
 (let ((?x58899 (- (- (- (- ?x58887 (* (* 2.0 l_0_17_258) l_0_17_265)) ?x58892) ?x58895) (* (* 2.0 l_0_17_277) l_0_17_284))))
 (let ((?x58905 (- (- ?x58899 (* (* 2.0 l_0_17_278) l_0_17_285)) (* (* 2.0 l_0_17_279) l_0_17_286))))
 (let ((?x58918 (- (- (- (- (- (+ (+ ?x58905 ?x58534) ?x58537) ?x58909) ?x58912) ?x58915) ?x58540) ?x58543)))
 (= (- (- (+ (+ (+ ?x58918 ?x58920) ?x58923) ?x58926) ?x58928) ?x58930) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58547 (* l_0_17_87 l_0_17_87)))
 (let ((?x58545 (* l_0_17_86 l_0_17_86)))
 (let ((?x59049 (* l_0_17_64 l_0_17_64)))
 (let ((?x59050 (* 3.0 ?x59049)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x59047 (* ?x59046 l_0_17_65)))
 (let ((?x59044 (* (* 3.0 l_0_17_43) l_0_17_43)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x59041 (* ?x59040 l_0_17_44)))
 (let ((?x59038 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x58495 (* l_0_17_171 l_0_17_171)))
 (let ((?x58493 (* l_0_17_170 l_0_17_170)))
 (let ((?x58491 (* l_0_17_150 l_0_17_150)))
 (let ((?x58489 (* l_0_17_149 l_0_17_149)))
 (let ((?x59031 (* l_0_17_127 l_0_17_127)))
 (let ((?x58481 (* l_0_17_108 l_0_17_108)))
 (let ((?x59030 (- (- (* 6.0 (* l_0_17_1 l_0_17_1)) (* l_0_17_107 l_0_17_107)) ?x58481)))
 (let ((?x59042 (- (- (- (- (+ (+ (+ ?x59030 ?x59031) ?x58489) ?x58491) ?x58493) ?x58495) ?x59038) ?x59041)))
 (= (- (+ (+ (+ (+ (- ?x59042 ?x59044) ?x59047) ?x59050) ?x58545) ?x58547) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x58435 (* l_0_17_66 l_0_17_66)))
 (let ((?x59111 (* 3.0 ?x58435)))
 (let ((?x58432 (* l_0_17_65 l_0_17_65)))
 (let ((?x59109 (* 3.0 ?x58432)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x59047 (* ?x59046 l_0_17_65)))
 (let ((?x59104 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (let ((?x59101 (* (* 3.0 l_0_17_44) l_0_17_44)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x59041 (* ?x59040 l_0_17_44)))
 (let ((?x59094 (* l_0_17_274 l_0_17_274)))
 (let ((?x59092 (* l_0_17_253 l_0_17_253)))
 (let ((?x59090 (* l_0_17_232 l_0_17_232)))
 (let ((?x59038 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x59087 (* ?x59086 l_0_17_23)))
 (let ((?x59084 (* l_0_17_211 l_0_17_211)))
 (let ((?x59082 (* l_0_17_190 l_0_17_190)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x59080 (* ?x59079 l_0_17_128)))
 (let ((?x59027 (* l_0_17_1 l_0_17_1)))
 (let ((?x59028 (* 6.0 ?x59027)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x59077 (* ?x59076 l_0_17_2)))
 (let ((?x59091 (- (- (- (- (- (+ (+ ?x59077 ?x59028) ?x59080) ?x59082) ?x59084) ?x59087) ?x59038) ?x59090)))
 (let ((?x59099 (- (- (- (- ?x59091 ?x59092) ?x59094) ?x59041) (* (* 1.0 l_0_17_43) l_0_17_43))))
 (let ((?x59108 (+ (+ (- (- ?x59099 ?x59101) ?x59104) ?x59047) (* 1.0 (* l_0_17_64 l_0_17_64)))))
 (= (- (+ (+ ?x59108 ?x59109) ?x59111) 3.0) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x58435 (* l_0_17_66 l_0_17_66)))
 (let ((?x59111 (* 3.0 ?x58435)))
 (let ((?x58432 (* l_0_17_65 l_0_17_65)))
 (let ((?x59109 (* 3.0 ?x58432)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x59177 (* ?x59176 l_0_17_65)))
 (let ((?x59104 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (let ((?x59101 (* (* 3.0 l_0_17_44) l_0_17_44)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x59172 (* ?x59171 l_0_17_44)))
 (let ((?x58423 (* l_0_17_3 l_0_17_3)))
 (let ((?x58424 (* 6.0 ?x58423)))
 (let ((?x58413 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x58406 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x59087 (* ?x59086 l_0_17_23)))
 (let ((?x58398 (* l_0_17_2 l_0_17_2)))
 (let ((?x58399 (* 6.0 ?x58398)))
 (let ((?x59149 (* l_0_17_129 l_0_17_129)))
 (let ((?x59150 (+ (+ (* (* 12.0 l_0_17_1) l_0_17_2) (* l_0_17_128 l_0_17_128)) ?x59149)))
 (let ((?x59157 (- (+ (- ?x59150 (* (* 2.0 l_0_17_190) l_0_17_191)) ?x58399) (* (* 2.0 l_0_17_211) l_0_17_212))))
 (let ((?x59163 (- (- (- (- ?x59157 ?x59087) ?x58406) (* (* 2.0 l_0_17_232) l_0_17_233)) ?x58413)))
 (let ((?x59169 (- (- ?x59163 (* (* 2.0 l_0_17_253) l_0_17_254)) (* (* 2.0 l_0_17_274) l_0_17_275))))
 (let ((?x59180 (+ (+ (+ (- (- (- (+ ?x59169 ?x58424) ?x59172) ?x59101) ?x59104) ?x59177) ?x59109) ?x59111)))
 (= (- ?x59180 3.0) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x59230 (* ?x59229 l_0_17_71)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x59227 (* ?x59226 l_0_17_70)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x59224 (* ?x59046 l_0_17_70)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x59222 (* ?x59221 l_0_17_50)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x59219 (* ?x59218 l_0_17_49)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x59216 (* ?x59040 l_0_17_49)))
 (let ((?x12528 (* l_0_17_22 l_0_17_22)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x59213 (* ?x59086 l_0_17_28)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x59211 (* ?x59079 l_0_17_133)))
 (let ((?x59212 (+ (- (* (* 12.0 l_0_17_1) l_0_17_7) (* l_0_17_1 l_0_17_1)) ?x59211)))
 (let ((?x59228 (+ (+ (- (- (- (+ (- ?x59212 ?x59213) ?x12528) ?x59216) ?x59219) ?x59222) ?x59224) ?x59227)))
 (= (+ ?x59228 ?x59230) 0.0)))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x59230 (* ?x59229 l_0_17_71)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x59227 (* ?x59226 l_0_17_70)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x59296 (* ?x59176 l_0_17_70)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x59222 (* ?x59221 l_0_17_50)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x59219 (* ?x59218 l_0_17_49)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x59292 (* ?x59171 l_0_17_49)))
 (let ((?x58777 (* 12.0 l_0_17_3)))
 (let ((?x59290 (* ?x58777 l_0_17_8)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x59284 (* ?x58518 l_0_17_29)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x59280 (* ?x58509 l_0_17_28)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x59213 (* ?x59086 l_0_17_28)))
 (let ((?x58754 (* 12.0 l_0_17_2)))
 (let ((?x59272 (* ?x58754 l_0_17_7)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x59268 (* ?x59267 l_0_17_134)))
 (let ((?x59264 (* 2.0 l_0_17_128)))
 (let ((?x59265 (* ?x59264 l_0_17_133)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x59209 (* ?x59076 l_0_17_7)))
 (let ((?x59271 (- (+ (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_2) ?x59209) ?x59265) ?x59268) (* (* 2.0 l_0_17_190) l_0_17_196))))
 (let ((?x59278 (+ (- (+ ?x59271 ?x59272) (* (* 2.0 l_0_17_211) l_0_17_217)) (* (* 2.0 l_0_17_22) l_0_17_23))))
 (let ((?x59285 (- (- (- (- ?x59278 ?x59213) ?x59280) (* (* 2.0 l_0_17_232) l_0_17_238)) ?x59284)))
 (let ((?x59289 (- (- ?x59285 (* (* 2.0 l_0_17_253) l_0_17_259)) (* (* 2.0 l_0_17_274) l_0_17_280))))
 (let ((?x59299 (+ (+ (+ (- (- (- (+ ?x59289 ?x59290) ?x59292) ?x59219) ?x59222) ?x59296) ?x59227) ?x59230)))
 (= ?x59299 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x59380 (* ?x59379 l_0_17_72)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x59377 (* ?x59376 l_0_17_71)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x59374 (* ?x59373 l_0_17_70)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x59296 (* ?x59176 l_0_17_70)))
 (let ((?x59370 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x59367 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x59364 (* ?x59363 l_0_17_51)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x59361 (* ?x59360 l_0_17_50)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x59292 (* ?x59171 l_0_17_49)))
 (let ((?x59354 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x59351 (* ?x58894 l_0_17_30)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x59349 (* ?x58891 l_0_17_29)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x59347 (* ?x58879 l_0_17_28)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x59343 (* ?x59342 l_0_17_135)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x59340 (* ?x59339 l_0_17_134)))
 (let ((?x59338 (+ (* (* (- 2.0) l_0_17_1) l_0_17_4) (* (* 2.0 l_0_17_130) l_0_17_133))))
 (let ((?x59348 (- (+ (+ (+ ?x59338 ?x59340) ?x59343) (* (* 2.0 l_0_17_22) l_0_17_25)) ?x59347)))
 (let ((?x59359 (- (+ (+ (- (- ?x59348 ?x59349) ?x59351) ?x59354) ?x59292) (* (* 6.0 l_0_17_46) l_0_17_49))))
 (let ((?x59378 (+ (+ (- (+ (+ (- (- ?x59359 ?x59361) ?x59364) ?x59367) ?x59370) ?x59296) ?x59374) ?x59377)))
 (= (+ ?x59378 ?x59380) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x59473 (* l_0_17_9 l_0_17_9)))
 (let ((?x59474 (* 6.0 ?x59473)))
 (let ((?x59470 (* l_0_17_8 l_0_17_8)))
 (let ((?x59471 (* 6.0 ?x59470)))
 (let ((?x59467 (* l_0_17_73 l_0_17_73)))
 (let ((?x59468 (* 3.0 ?x59467)))
 (let ((?x59464 (* l_0_17_72 l_0_17_72)))
 (let ((?x59465 (* 3.0 ?x59464)))
 (let ((?x59461 (* l_0_17_71 l_0_17_71)))
 (let ((?x59462 (* 3.0 ?x59461)))
 (let ((?x59458 (* l_0_17_70 l_0_17_70)))
 (let ((?x59459 (* 3.0 ?x59458)))
 (let ((?x59455 (* l_0_17_7 l_0_17_7)))
 (let ((?x59456 (* 6.0 ?x59455)))
 (let ((?x59453 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x59450 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x59447 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x59441 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x59438 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x59435 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x59432 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x59427 (* l_0_17_136 l_0_17_136)))
 (let ((?x59425 (* l_0_17_135 l_0_17_135)))
 (let ((?x59423 (* l_0_17_134 l_0_17_134)))
 (let ((?x59421 (* l_0_17_133 l_0_17_133)))
 (let ((?x48763 (* l_0_17_10 l_0_17_10)))
 (let ((?x27522 (* 6.0 ?x48763)))
 (let ((?x59426 (+ (+ (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_7) ?x27522) ?x59421) ?x59423) ?x59425)))
 (let ((?x59436 (- (- (+ (+ ?x59426 ?x59427) (* (* 2.0 l_0_17_22) l_0_17_28)) ?x59432) ?x59435)))
 (let ((?x59448 (- (- (- (- ?x59436 ?x59438) ?x59441) (* (* 3.0 l_0_17_49) l_0_17_49)) ?x59447)))
 (let ((?x59469 (+ (+ (+ (+ (+ (- (- ?x59448 ?x59450) ?x59453) ?x59456) ?x59459) ?x59462) ?x59465) ?x59468)))
 (= (+ (+ ?x59469 ?x59471) ?x59474) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x59594 (* ?x59593 l_0_17_91)))
 (let ((?x59590 (* 6.0 l_0_17_73)))
 (let ((?x59591 (* ?x59590 l_0_17_77)))
 (let ((?x59587 (* 6.0 l_0_17_72)))
 (let ((?x59588 (* ?x59587 l_0_17_76)))
 (let ((?x59584 (* 6.0 l_0_17_71)))
 (let ((?x59585 (* ?x59584 l_0_17_75)))
 (let ((?x59581 (* 6.0 l_0_17_70)))
 (let ((?x59582 (* ?x59581 l_0_17_74)))
 (let ((?x59578 (* 6.0 l_0_17_52)))
 (let ((?x59579 (* ?x59578 l_0_17_56)))
 (let ((?x59575 (* 6.0 l_0_17_51)))
 (let ((?x59576 (* ?x59575 l_0_17_55)))
 (let ((?x59572 (* 6.0 l_0_17_50)))
 (let ((?x59573 (* ?x59572 l_0_17_54)))
 (let ((?x59566 (* 12.0 l_0_17_31)))
 (let ((?x59567 (* ?x59566 l_0_17_35)))
 (let ((?x59563 (* 12.0 l_0_17_30)))
 (let ((?x59564 (* ?x59563 l_0_17_34)))
 (let ((?x59560 (* 12.0 l_0_17_29)))
 (let ((?x59561 (* ?x59560 l_0_17_33)))
 (let ((?x59557 (* 12.0 l_0_17_28)))
 (let ((?x59558 (* ?x59557 l_0_17_32)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x59553 (* ?x59552 l_0_17_175)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x59550 (* ?x59549 l_0_17_154)))
 (let ((?x59546 (* 2.0 l_0_17_136)))
 (let ((?x59547 (* ?x59546 l_0_17_140)))
 (let ((?x59543 (* 2.0 l_0_17_135)))
 (let ((?x59544 (* ?x59543 l_0_17_139)))
 (let ((?x59540 (* 2.0 l_0_17_134)))
 (let ((?x59541 (* ?x59540 l_0_17_138)))
 (let ((?x59537 (* 2.0 l_0_17_133)))
 (let ((?x59538 (* ?x59537 l_0_17_137)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x59535 (* ?x58841 l_0_17_9)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x59533 (* ?x58486 l_0_17_8)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x59531 (* ?x58483 l_0_17_7)))
 (let ((?x59525 (* 12.0 l_0_17_10)))
 (let ((?x59526 (* ?x59525 l_0_17_14)))
 (let ((?x59530 (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_11) ?x59526) (* (* 2.0 l_0_17_106) l_0_17_112))))
 (let ((?x59548 (+ (+ (+ (+ (+ (+ (+ ?x59530 ?x59531) ?x59533) ?x59535) ?x59538) ?x59541) ?x59544) ?x59547)))
 (let ((?x59559 (- (+ (+ (- ?x59548 ?x59550) ?x59553) (* (* 2.0 l_0_17_22) l_0_17_32)) ?x59558)))
 (let ((?x59571 (- (- (- (- ?x59559 ?x59561) ?x59564) ?x59567) (* (* 6.0 l_0_17_49) l_0_17_53))))
 (let ((?x59592 (+ (+ (+ (+ (- (- (- ?x59571 ?x59573) ?x59576) ?x59579) ?x59582) ?x59585) ?x59588) ?x59591)))
 (= (- ?x59592 ?x59594) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59590 (* 6.0 l_0_17_73)))
 (let ((?x59732 (* ?x59590 l_0_17_82)))
 (let ((?x59587 (* 6.0 l_0_17_72)))
 (let ((?x59730 (* ?x59587 l_0_17_81)))
 (let ((?x59584 (* 6.0 l_0_17_71)))
 (let ((?x59728 (* ?x59584 l_0_17_80)))
 (let ((?x59581 (* 6.0 l_0_17_70)))
 (let ((?x59726 (* ?x59581 l_0_17_79)))
 (let ((?x59578 (* 6.0 l_0_17_52)))
 (let ((?x59724 (* ?x59578 l_0_17_61)))
 (let ((?x59575 (* 6.0 l_0_17_51)))
 (let ((?x59722 (* ?x59575 l_0_17_60)))
 (let ((?x59572 (* 6.0 l_0_17_50)))
 (let ((?x59720 (* ?x59572 l_0_17_59)))
 (let ((?x59566 (* 12.0 l_0_17_31)))
 (let ((?x59716 (* ?x59566 l_0_17_40)))
 (let ((?x59563 (* 12.0 l_0_17_30)))
 (let ((?x59714 (* ?x59563 l_0_17_39)))
 (let ((?x59560 (* 12.0 l_0_17_29)))
 (let ((?x59712 (* ?x59560 l_0_17_38)))
 (let ((?x59557 (* 12.0 l_0_17_28)))
 (let ((?x59710 (* ?x59557 l_0_17_37)))
 (let ((?x59705 (* 12.0 l_0_17_18)))
 (let ((?x59706 (* ?x59705 l_0_17_9)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x59703 (* ?x59702 l_0_17_8)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x59700 (* ?x59699 l_0_17_7)))
 (let ((?x59546 (* 2.0 l_0_17_136)))
 (let ((?x59697 (* ?x59546 l_0_17_145)))
 (let ((?x59543 (* 2.0 l_0_17_135)))
 (let ((?x59695 (* ?x59543 l_0_17_144)))
 (let ((?x59540 (* 2.0 l_0_17_134)))
 (let ((?x59693 (* ?x59540 l_0_17_143)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x59211 (* ?x59079 l_0_17_133)))
 (let ((?x59525 (* 12.0 l_0_17_10)))
 (let ((?x59688 (* ?x59525 l_0_17_19)))
 (let ((?x59692 (+ (- (+ (* (* (- 2.0) l_0_17_1) l_0_17_16) ?x59688) ?x59211) (* (* 2.0 l_0_17_133) l_0_17_142))))
 (let ((?x59709 (+ (+ (+ (+ (+ (+ (+ ?x59692 ?x59693) ?x59695) ?x59697) ?x59700) ?x59703) ?x59706) (* (* 2.0 l_0_17_22) l_0_17_37))))
 (let ((?x59719 (- (- (- (- (- ?x59709 ?x59710) ?x59712) ?x59714) ?x59716) (* (* 6.0 l_0_17_49) l_0_17_58))))
 (let ((?x59733 (+ (+ (+ (+ (- (- (- ?x59719 ?x59720) ?x59722) ?x59724) ?x59726) ?x59728) ?x59730) ?x59732)))
 (= ?x59733 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x59825 (* ?x58542 l_0_17_71)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x59823 (* ?x58539 l_0_17_70)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x59821 (* ?x58536 l_0_17_50)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x59819 (* ?x58533 l_0_17_49)))
 (let ((?x58423 (* l_0_17_3 l_0_17_3)))
 (let ((?x58777 (* 12.0 l_0_17_3)))
 (let ((?x59290 (* ?x58777 l_0_17_8)))
 (let ((?x58458 (* l_0_17_24 l_0_17_24)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x59284 (* ?x58518 l_0_17_29)))
 (let ((?x26601 (* l_0_17_23 l_0_17_23)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x59280 (* ?x58509 l_0_17_28)))
 (let ((?x58398 (* l_0_17_2 l_0_17_2)))
 (let ((?x58754 (* 12.0 l_0_17_2)))
 (let ((?x59272 (* ?x58754 l_0_17_7)))
 (let ((?x59778 (- (* (* (- 2.0) l_0_17_191) l_0_17_196) (* (* 2.0 l_0_17_192) l_0_17_197))))
 (let ((?x59800 (- (- (- (+ ?x59778 ?x59272) ?x58398) (* (* 2.0 l_0_17_212) l_0_17_217)) (* (* 2.0 l_0_17_213) l_0_17_218))))
 (let ((?x59806 (- (- (+ (- ?x59800 ?x59280) ?x26601) (* (* 2.0 l_0_17_233) l_0_17_238)) (* (* 2.0 l_0_17_234) l_0_17_239))))
 (let ((?x59812 (- (- (+ (- ?x59806 ?x59284) ?x58458) (* (* 2.0 l_0_17_254) l_0_17_259)) (* (* 2.0 l_0_17_255) l_0_17_260))))
 (let ((?x59816 (- (- ?x59812 (* (* 2.0 l_0_17_275) l_0_17_280)) (* (* 2.0 l_0_17_276) l_0_17_281))))
 (= (+ (+ (- (- (- (+ ?x59816 ?x59290) ?x58423) ?x59819) ?x59821) ?x59823) ?x59825) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x59944 (* ?x58925 l_0_17_72)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x59942 (* ?x58922 l_0_17_71)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x59940 (* ?x58919 l_0_17_70)))
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x59825 (* ?x58542 l_0_17_71)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x59823 (* ?x58539 l_0_17_70)))
 (let ((?x59370 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x59367 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x59934 (* ?x58914 l_0_17_51)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x59932 (* ?x58911 l_0_17_50)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x59930 (* ?x58908 l_0_17_49)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x59821 (* ?x58536 l_0_17_50)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x59819 (* ?x58533 l_0_17_49)))
 (let ((?x59354 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x59351 (* ?x58894 l_0_17_30)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x59349 (* ?x58891 l_0_17_29)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x59347 (* ?x58879 l_0_17_28)))
 (let ((?x59885 (- (* (* (- 2.0) l_0_17_193) l_0_17_196) (* (* 2.0 l_0_17_194) l_0_17_197))))
 (let ((?x59890 (- (- ?x59885 (* (* 2.0 l_0_17_195) l_0_17_198)) (* (* 2.0 l_0_17_2) l_0_17_4))))
 (let ((?x59894 (- (- ?x59890 (* (* 2.0 l_0_17_214) l_0_17_217)) (* (* 2.0 l_0_17_215) l_0_17_218))))
 (let ((?x59899 (+ (- ?x59894 (* (* 2.0 l_0_17_216) l_0_17_219)) (* (* 2.0 l_0_17_23) l_0_17_25))))
 (let ((?x59903 (- (- ?x59899 (* (* 2.0 l_0_17_235) l_0_17_238)) (* (* 2.0 l_0_17_236) l_0_17_239))))
 (let ((?x59908 (+ (- ?x59903 (* (* 2.0 l_0_17_237) l_0_17_240)) (* (* 2.0 l_0_17_24) l_0_17_26))))
 (let ((?x59913 (- (- (- ?x59908 ?x59347) (* (* 2.0 l_0_17_256) l_0_17_259)) (* (* 2.0 l_0_17_257) l_0_17_260))))
 (let ((?x59919 (- (- (- (- ?x59913 (* (* 2.0 l_0_17_258) l_0_17_261)) ?x59349) ?x59351) (* (* 2.0 l_0_17_277) l_0_17_280))))
 (let ((?x59923 (- (- ?x59919 (* (* 2.0 l_0_17_278) l_0_17_281)) (* (* 2.0 l_0_17_279) l_0_17_282))))
 (let ((?x59929 (+ (+ (+ (- ?x59923 (* (* 2.0 l_0_17_3) l_0_17_5)) ?x59354) ?x59819) ?x59821)))
 (let ((?x59939 (- (- (+ (+ (- (- (- ?x59929 ?x59930) ?x59932) ?x59934) ?x59367) ?x59370) ?x59823) ?x59825)))
 (= (+ (+ (+ ?x59939 ?x59940) ?x59942) ?x59944) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59473 (* l_0_17_9 l_0_17_9)))
 (let ((?x59474 (* 6.0 ?x59473)))
 (let ((?x59470 (* l_0_17_8 l_0_17_8)))
 (let ((?x59471 (* 6.0 ?x59470)))
 (let ((?x59455 (* l_0_17_7 l_0_17_7)))
 (let ((?x59456 (* 6.0 ?x59455)))
 (let ((?x59441 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x59438 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x59435 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x60060 (* l_0_17_283 l_0_17_283)))
 (let ((?x60058 (* l_0_17_282 l_0_17_282)))
 (let ((?x60056 (* l_0_17_281 l_0_17_281)))
 (let ((?x60054 (* l_0_17_280 l_0_17_280)))
 (let ((?x59432 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x60051 (* l_0_17_262 l_0_17_262)))
 (let ((?x60049 (* l_0_17_261 l_0_17_261)))
 (let ((?x60047 (* l_0_17_260 l_0_17_260)))
 (let ((?x60045 (* l_0_17_259 l_0_17_259)))
 (let ((?x60043 (* l_0_17_241 l_0_17_241)))
 (let ((?x60041 (* l_0_17_240 l_0_17_240)))
 (let ((?x60037 (* l_0_17_239 l_0_17_239)))
 (let ((?x60035 (* l_0_17_238 l_0_17_238)))
 (let ((?x60031 (* l_0_17_220 l_0_17_220)))
 (let ((?x60029 (* l_0_17_219 l_0_17_219)))
 (let ((?x60027 (* l_0_17_218 l_0_17_218)))
 (let ((?x60025 (* l_0_17_217 l_0_17_217)))
 (let ((?x60021 (* l_0_17_199 l_0_17_199)))
 (let ((?x60019 (* l_0_17_198 l_0_17_198)))
 (let ((?x38505 (* l_0_17_197 l_0_17_197)))
 (let ((?x60009 (* l_0_17_196 l_0_17_196)))
 (let ((?x48763 (* l_0_17_10 l_0_17_10)))
 (let ((?x27522 (* 6.0 ?x48763)))
 (let ((?x60024 (- (- (- (- (- ?x27522 ?x60009) ?x38505) ?x60019) ?x60021) (* (* 2.0 l_0_17_2) l_0_17_7))))
 (let ((?x60034 (+ (- (- (- (- ?x60024 ?x60025) ?x60027) ?x60029) ?x60031) (* (* 2.0 l_0_17_23) l_0_17_28))))
 (let ((?x60042 (- (+ (- (- ?x60034 ?x60035) ?x60037) (* (* 2.0 l_0_17_24) l_0_17_29)) ?x60041)))
 (let ((?x60055 (- (- (- (- (- (- (- ?x60042 ?x60043) ?x60045) ?x60047) ?x60049) ?x60051) ?x59432) ?x60054)))
 (let ((?x60064 (- (- (- (- (- ?x60055 ?x60056) ?x60058) ?x60060) ?x59435) (* (* 2.0 l_0_17_3) l_0_17_8))))
 (let ((?x60072 (- (- (- (- ?x60064 ?x59438) ?x59441) (* (* 1.0 l_0_17_49) l_0_17_49)) (* (* 1.0 l_0_17_50) l_0_17_50))))
 (let ((?x60078 (- (- ?x60072 (* (* 1.0 l_0_17_51) l_0_17_51)) (* (* 1.0 l_0_17_52) l_0_17_52))))
 (let ((?x60083 (+ (+ (+ ?x60078 ?x59456) (* 1.0 (* l_0_17_70 l_0_17_70))) (* 1.0 (* l_0_17_71 l_0_17_71)))))
 (let ((?x60087 (+ (+ ?x60083 (* 1.0 (* l_0_17_72 l_0_17_72))) (* 1.0 (* l_0_17_73 l_0_17_73)))))
 (= (+ (+ ?x60087 ?x59471) ?x59474) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x60238 (* ?x58327 l_0_17_92)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x60236 (* ?x58324 l_0_17_91)))
 (let ((?x60233 (* 2.0 l_0_17_73)))
 (let ((?x60234 (* ?x60233 l_0_17_77)))
 (let ((?x60230 (* 2.0 l_0_17_72)))
 (let ((?x60231 (* ?x60230 l_0_17_76)))
 (let ((?x60227 (* 2.0 l_0_17_71)))
 (let ((?x60228 (* ?x60227 l_0_17_75)))
 (let ((?x60224 (* 2.0 l_0_17_70)))
 (let ((?x60225 (* ?x60224 l_0_17_74)))
 (let ((?x60221 (* 2.0 l_0_17_52)))
 (let ((?x60222 (* ?x60221 l_0_17_56)))
 (let ((?x60218 (* 2.0 l_0_17_51)))
 (let ((?x60219 (* ?x60218 l_0_17_55)))
 (let ((?x60215 (* 2.0 l_0_17_50)))
 (let ((?x60216 (* ?x60215 l_0_17_54)))
 (let ((?x60212 (* 2.0 l_0_17_49)))
 (let ((?x60213 (* ?x60212 l_0_17_53)))
 (let ((?x59566 (* 12.0 l_0_17_31)))
 (let ((?x59567 (* ?x59566 l_0_17_35)))
 (let ((?x59563 (* 12.0 l_0_17_30)))
 (let ((?x59564 (* ?x59563 l_0_17_34)))
 (let ((?x59560 (* 12.0 l_0_17_29)))
 (let ((?x59561 (* ?x59560 l_0_17_33)))
 (let ((?x59557 (* 12.0 l_0_17_28)))
 (let ((?x59558 (* ?x59557 l_0_17_32)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x60142 (* ?x58226 l_0_17_176)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x38560 (* ?x58223 l_0_17_175)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x38557 (* ?x58220 l_0_17_155)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x28092 (* ?x58214 l_0_17_154)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x59535 (* ?x58841 l_0_17_9)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x59533 (* ?x58486 l_0_17_8)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x59531 (* ?x58483 l_0_17_7)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x48636 (* ?x58199 l_0_17_113)))
 (let ((?x59525 (* 12.0 l_0_17_10)))
 (let ((?x59526 (* ?x59525 l_0_17_14)))
 (let ((?x27959 (- (+ (+ ?x59526 (* (* 2.0 l_0_17_107) l_0_17_112)) ?x48636) (* (* 2.0 l_0_17_11) l_0_17_2))))
 (let ((?x14736 (+ (+ (- (+ ?x27959 ?x59531) (* (* 2.0 l_0_17_12) l_0_17_3)) ?x59533) ?x59535)))
 (let ((?x60146 (- (+ (+ (- (- ?x14736 ?x28092) ?x38557) ?x38560) ?x60142) (* (* 2.0 l_0_17_196) l_0_17_200))))
 (let ((?x60152 (- (- ?x60146 (* (* 2.0 l_0_17_197) l_0_17_201)) (* (* 2.0 l_0_17_198) l_0_17_202))))
 (let ((?x60158 (- (- ?x60152 (* (* 2.0 l_0_17_199) l_0_17_203)) (* (* 2.0 l_0_17_217) l_0_17_221))))
 (let ((?x60164 (- (- ?x60158 (* (* 2.0 l_0_17_218) l_0_17_222)) (* (* 2.0 l_0_17_219) l_0_17_223))))
 (let ((?x60169 (+ (- ?x60164 (* (* 2.0 l_0_17_220) l_0_17_224)) (* (* 2.0 l_0_17_23) l_0_17_32))))
 (let ((?x60175 (- (- ?x60169 (* (* 2.0 l_0_17_238) l_0_17_242)) (* (* 2.0 l_0_17_239) l_0_17_243))))
 (let ((?x60180 (- (+ ?x60175 (* (* 2.0 l_0_17_24) l_0_17_33)) (* (* 2.0 l_0_17_240) l_0_17_244))))
 (let ((?x60186 (- (- ?x60180 (* (* 2.0 l_0_17_241) l_0_17_245)) (* (* 2.0 l_0_17_259) l_0_17_263))))
 (let ((?x60192 (- (- ?x60186 (* (* 2.0 l_0_17_260) l_0_17_264)) (* (* 2.0 l_0_17_261) l_0_17_265))))
 (let ((?x60199 (- (- (- ?x60192 (* (* 2.0 l_0_17_262) l_0_17_266)) ?x59558) (* (* 2.0 l_0_17_280) l_0_17_284))))
 (let ((?x60205 (- (- ?x60199 (* (* 2.0 l_0_17_281) l_0_17_285)) (* (* 2.0 l_0_17_282) l_0_17_286))))
 (let ((?x60211 (- (- (- (- ?x60205 (* (* 2.0 l_0_17_283) l_0_17_287)) ?x59561) ?x59564) ?x59567)))
 (let ((?x60232 (+ (+ (+ (- (- (- (- ?x60211 ?x60213) ?x60216) ?x60219) ?x60222) ?x60225) ?x60228) ?x60231)))
 (= (- (- (+ ?x60232 ?x60234) ?x60236) ?x60238) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60233 (* 2.0 l_0_17_73)))
 (let ((?x60447 (* ?x60233 l_0_17_82)))
 (let ((?x60230 (* 2.0 l_0_17_72)))
 (let ((?x60445 (* ?x60230 l_0_17_81)))
 (let ((?x60227 (* 2.0 l_0_17_71)))
 (let ((?x60443 (* ?x60227 l_0_17_80)))
 (let ((?x60224 (* 2.0 l_0_17_70)))
 (let ((?x60441 (* ?x60224 l_0_17_79)))
 (let ((?x60221 (* 2.0 l_0_17_52)))
 (let ((?x60439 (* ?x60221 l_0_17_61)))
 (let ((?x60218 (* 2.0 l_0_17_51)))
 (let ((?x60437 (* ?x60218 l_0_17_60)))
 (let ((?x60215 (* 2.0 l_0_17_50)))
 (let ((?x60435 (* ?x60215 l_0_17_59)))
 (let ((?x60212 (* 2.0 l_0_17_49)))
 (let ((?x60433 (* ?x60212 l_0_17_58)))
 (let ((?x59566 (* 12.0 l_0_17_31)))
 (let ((?x59716 (* ?x59566 l_0_17_40)))
 (let ((?x59563 (* 12.0 l_0_17_30)))
 (let ((?x59714 (* ?x59563 l_0_17_39)))
 (let ((?x59560 (* 12.0 l_0_17_29)))
 (let ((?x59712 (* ?x59560 l_0_17_38)))
 (let ((?x59557 (* 12.0 l_0_17_28)))
 (let ((?x59710 (* ?x59557 l_0_17_37)))
 (let ((?x59705 (* 12.0 l_0_17_18)))
 (let ((?x59706 (* ?x59705 l_0_17_9)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x59703 (* ?x59702 l_0_17_8)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x59700 (* ?x59699 l_0_17_7)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x59268 (* ?x59267 l_0_17_134)))
 (let ((?x59264 (* 2.0 l_0_17_128)))
 (let ((?x59265 (* ?x59264 l_0_17_133)))
 (let ((?x59525 (* 12.0 l_0_17_10)))
 (let ((?x59688 (* ?x59525 l_0_17_19)))
 (let ((?x60379 (+ (- (- (- ?x59688 ?x59265) ?x59268) (* (* 2.0 l_0_17_16) l_0_17_2)) ?x59700)))
 (let ((?x60386 (- (+ (+ (- ?x60379 (* (* 2.0 l_0_17_17) l_0_17_3)) ?x59703) ?x59706) (* (* 2.0 l_0_17_196) l_0_17_205))))
 (let ((?x60390 (- (- ?x60386 (* (* 2.0 l_0_17_197) l_0_17_206)) (* (* 2.0 l_0_17_198) l_0_17_207))))
 (let ((?x60394 (- (- ?x60390 (* (* 2.0 l_0_17_199) l_0_17_208)) (* (* 2.0 l_0_17_217) l_0_17_226))))
 (let ((?x60398 (- (- ?x60394 (* (* 2.0 l_0_17_218) l_0_17_227)) (* (* 2.0 l_0_17_219) l_0_17_228))))
 (let ((?x60402 (+ (- ?x60398 (* (* 2.0 l_0_17_220) l_0_17_229)) (* (* 2.0 l_0_17_23) l_0_17_37))))
 (let ((?x60406 (- (- ?x60402 (* (* 2.0 l_0_17_238) l_0_17_247)) (* (* 2.0 l_0_17_239) l_0_17_248))))
 (let ((?x60410 (- (+ ?x60406 (* (* 2.0 l_0_17_24) l_0_17_38)) (* (* 2.0 l_0_17_240) l_0_17_249))))
 (let ((?x60414 (- (- ?x60410 (* (* 2.0 l_0_17_241) l_0_17_250)) (* (* 2.0 l_0_17_259) l_0_17_268))))
 (let ((?x60418 (- (- ?x60414 (* (* 2.0 l_0_17_260) l_0_17_269)) (* (* 2.0 l_0_17_261) l_0_17_270))))
 (let ((?x60423 (- (- (- ?x60418 (* (* 2.0 l_0_17_262) l_0_17_271)) ?x59710) (* (* 2.0 l_0_17_280) l_0_17_289))))
 (let ((?x60427 (- (- ?x60423 (* (* 2.0 l_0_17_281) l_0_17_290)) (* (* 2.0 l_0_17_282) l_0_17_291))))
 (let ((?x60432 (- (- (- (- ?x60427 (* (* 2.0 l_0_17_283) l_0_17_292)) ?x59712) ?x59714) ?x59716)))
 (let ((?x60446 (+ (+ (+ (- (- (- (- ?x60432 ?x60433) ?x60435) ?x60437) ?x60439) ?x60441) ?x60443) ?x60445)))
 (= (+ ?x60446 ?x60447) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x59944 (* ?x58925 l_0_17_72)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x59942 (* ?x58922 l_0_17_71)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x59940 (* ?x58919 l_0_17_70)))
 (let ((?x58674 (* l_0_17_6 l_0_17_6)))
 (let ((?x58671 (* l_0_17_5 l_0_17_5)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x59934 (* ?x58914 l_0_17_51)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x59932 (* ?x58911 l_0_17_50)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x59930 (* ?x58908 l_0_17_49)))
 (let ((?x58655 (* l_0_17_4 l_0_17_4)))
 (let ((?x58717 (* l_0_17_27 l_0_17_27)))
 (let ((?x49424 (- (+ (+ (* l_0_17_25 l_0_17_25) (* l_0_17_26 l_0_17_26)) ?x58717) ?x58655)))
 (let ((?x60487 (- (- (- (- (+ (+ (+ ?x49424 ?x59930) ?x59932) ?x59934) ?x58671) ?x58674) ?x59940) ?x59942)))
 (= (- ?x60487 ?x59944) 0.0))))))))))))))))))))
(assert
 (let ((?x59467 (* l_0_17_73 l_0_17_73)))
 (let ((?x59464 (* l_0_17_72 l_0_17_72)))
 (let ((?x59461 (* l_0_17_71 l_0_17_71)))
 (let ((?x59458 (* l_0_17_70 l_0_17_70)))
 (let ((?x38165 (* l_0_17_52 l_0_17_52)))
 (let ((?x38159 (* l_0_17_51 l_0_17_51)))
 (let ((?x48784 (* l_0_17_50 l_0_17_50)))
 (let ((?x47436 (* l_0_17_49 l_0_17_49)))
 (let ((?x60502 (+ (* (* 2.0 l_0_17_25) l_0_17_28) (* (* 2.0 l_0_17_26) l_0_17_29))))
 (let ((?x60508 (- (+ ?x60502 (* (* 2.0 l_0_17_27) l_0_17_30)) (* (* 2.0 l_0_17_4) l_0_17_7))))
 (let ((?x60514 (+ (+ (- (+ ?x60508 ?x47436) (* (* 2.0 l_0_17_5) l_0_17_8)) ?x48784) ?x38159)))
 (let ((?x60520 (- (- (- (+ ?x60514 ?x38165) (* (* 2.0 l_0_17_6) l_0_17_9)) ?x59458) ?x59461)))
 (= (- (- ?x60520 ?x59464) ?x59467) 0.0))))))))))))))
(assert
 (let ((?x60583 (* 2.0 l_0_17_90)))
 (let ((?x60584 (* ?x60583 l_0_17_93)))
 (let ((?x60580 (* 2.0 l_0_17_89)))
 (let ((?x60581 (* ?x60580 l_0_17_92)))
 (let ((?x60577 (* 2.0 l_0_17_88)))
 (let ((?x60578 (* ?x60577 l_0_17_91)))
 (let ((?x60233 (* 2.0 l_0_17_73)))
 (let ((?x60234 (* ?x60233 l_0_17_77)))
 (let ((?x60230 (* 2.0 l_0_17_72)))
 (let ((?x60231 (* ?x60230 l_0_17_76)))
 (let ((?x60227 (* 2.0 l_0_17_71)))
 (let ((?x60228 (* ?x60227 l_0_17_75)))
 (let ((?x60224 (* 2.0 l_0_17_70)))
 (let ((?x60225 (* ?x60224 l_0_17_74)))
 (let ((?x60221 (* 2.0 l_0_17_52)))
 (let ((?x60222 (* ?x60221 l_0_17_56)))
 (let ((?x60218 (* 2.0 l_0_17_51)))
 (let ((?x60219 (* ?x60218 l_0_17_55)))
 (let ((?x60215 (* 2.0 l_0_17_50)))
 (let ((?x60216 (* ?x60215 l_0_17_54)))
 (let ((?x60212 (* 2.0 l_0_17_49)))
 (let ((?x60213 (* ?x60212 l_0_17_53)))
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x60561 (* ?x60560 l_0_17_177)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x60558 (* ?x60557 l_0_17_176)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x60555 (* ?x60554 l_0_17_175)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x60552 (* ?x60551 l_0_17_156)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x60549 (* ?x60548 l_0_17_155)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x60546 (* ?x60545 l_0_17_154)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x49460 (* ?x15252 l_0_17_114)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x49453 (* ?x49437 l_0_17_113)))
 (let ((?x39106 (- (* (* 2.0 l_0_17_109) l_0_17_112) (* (* 2.0 l_0_17_11) l_0_17_4))))
 (let ((?x60544 (- (- (+ (+ ?x39106 ?x49453) ?x49460) (* (* 2.0 l_0_17_12) l_0_17_5)) (* (* 2.0 l_0_17_13) l_0_17_6))))
 (let ((?x60564 (+ (+ (+ (+ (- (- (- ?x60544 ?x60546) ?x60549) ?x60552) ?x60555) ?x60558) ?x60561) (* (* 2.0 l_0_17_25) l_0_17_32))))
 (let ((?x60568 (+ (+ ?x60564 (* (* 2.0 l_0_17_26) l_0_17_33)) (* (* 2.0 l_0_17_27) l_0_17_34))))
 (let ((?x60575 (- (- (- (+ (+ (+ (+ ?x60568 ?x60213) ?x60216) ?x60219) ?x60222) ?x60225) ?x60228) ?x60231)))
 (= (- (- (- (- ?x60575 ?x60234) ?x60578) ?x60581) ?x60584) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60233 (* 2.0 l_0_17_73)))
 (let ((?x60447 (* ?x60233 l_0_17_82)))
 (let ((?x60230 (* 2.0 l_0_17_72)))
 (let ((?x60445 (* ?x60230 l_0_17_81)))
 (let ((?x60227 (* 2.0 l_0_17_71)))
 (let ((?x60443 (* ?x60227 l_0_17_80)))
 (let ((?x60224 (* 2.0 l_0_17_70)))
 (let ((?x60441 (* ?x60224 l_0_17_79)))
 (let ((?x60221 (* 2.0 l_0_17_52)))
 (let ((?x60439 (* ?x60221 l_0_17_61)))
 (let ((?x60218 (* 2.0 l_0_17_51)))
 (let ((?x60437 (* ?x60218 l_0_17_60)))
 (let ((?x60215 (* 2.0 l_0_17_50)))
 (let ((?x60435 (* ?x60215 l_0_17_59)))
 (let ((?x60212 (* 2.0 l_0_17_49)))
 (let ((?x60433 (* ?x60212 l_0_17_58)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x59343 (* ?x59342 l_0_17_135)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x59340 (* ?x59339 l_0_17_134)))
 (let ((?x49557 (- (- (- (* (* (- 2.0) l_0_17_130) l_0_17_133) ?x59340) ?x59343) (* (* 2.0 l_0_17_16) l_0_17_4))))
 (let ((?x49564 (- (- ?x49557 (* (* 2.0 l_0_17_17) l_0_17_5)) (* (* 2.0 l_0_17_18) l_0_17_6))))
 (let ((?x49582 (+ (+ ?x49564 (* (* 2.0 l_0_17_25) l_0_17_37)) (* (* 2.0 l_0_17_26) l_0_17_38))))
 (let ((?x60619 (+ (+ (+ (+ ?x49582 (* (* 2.0 l_0_17_27) l_0_17_39)) ?x60433) ?x60435) ?x60437)))
 (= (- (- (- (- (+ ?x60619 ?x60439) ?x60441) ?x60443) ?x60445) ?x60447) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x59473 (* l_0_17_9 l_0_17_9)))
 (let ((?x59470 (* l_0_17_8 l_0_17_8)))
 (let ((?x59455 (* l_0_17_7 l_0_17_7)))
 (let ((?x59493 (* l_0_17_31 l_0_17_31)))
 (let ((?x38093 (* l_0_17_30 l_0_17_30)))
 (let ((?x59486 (* l_0_17_29 l_0_17_29)))
 (let ((?x39448 (+ (+ (* (- l_0_17_10) l_0_17_10) (* l_0_17_28 l_0_17_28)) ?x59486)))
 (= (- (- (- (+ (+ ?x39448 ?x38093) ?x59493) ?x59455) ?x59470) ?x59473) 0.0)))))))))
(assert
 (let ((?x60693 (* l_0_17_94 l_0_17_94)))
 (let ((?x60691 (* l_0_17_93 l_0_17_93)))
 (let ((?x60689 (* l_0_17_92 l_0_17_92)))
 (let ((?x60687 (* l_0_17_91 l_0_17_91)))
 (let ((?x60673 (* l_0_17_178 l_0_17_178)))
 (let ((?x60671 (* l_0_17_177 l_0_17_177)))
 (let ((?x60669 (* l_0_17_176 l_0_17_176)))
 (let ((?x60667 (* l_0_17_175 l_0_17_175)))
 (let ((?x60665 (* l_0_17_157 l_0_17_157)))
 (let ((?x60663 (* l_0_17_156 l_0_17_156)))
 (let ((?x60661 (* l_0_17_155 l_0_17_155)))
 (let ((?x60659 (* l_0_17_154 l_0_17_154)))
 (let ((?x60653 (* l_0_17_115 l_0_17_115)))
 (let ((?x60651 (* l_0_17_114 l_0_17_114)))
 (let ((?x60649 (* l_0_17_113 l_0_17_113)))
 (let ((?x60647 (* l_0_17_112 l_0_17_112)))
 (let ((?x60646 (- (* (* (- 2.0) l_0_17_10) l_0_17_14) (* (* 2.0 l_0_17_11) l_0_17_7))))
 (let ((?x60656 (- (+ (+ (+ (+ ?x60646 ?x60647) ?x60649) ?x60651) ?x60653) (* (* 2.0 l_0_17_12) l_0_17_8))))
 (let ((?x60664 (- (- (- (- ?x60656 (* (* 2.0 l_0_17_13) l_0_17_9)) ?x60659) ?x60661) ?x60663)))
 (let ((?x60677 (+ (+ (+ (+ (+ (- ?x60664 ?x60665) ?x60667) ?x60669) ?x60671) ?x60673) (* (* 2.0 l_0_17_28) l_0_17_32))))
 (let ((?x60683 (+ (+ ?x60677 (* (* 2.0 l_0_17_29) l_0_17_33)) (* (* 2.0 l_0_17_30) l_0_17_34))))
 (let ((?x60692 (- (- (- (+ ?x60683 (* (* 2.0 l_0_17_31) l_0_17_35)) ?x60687) ?x60689) ?x60691)))
 (= (- ?x60692 ?x60693) 0.0))))))))))))))))))))))))
(assert
 (let ((?x59427 (* l_0_17_136 l_0_17_136)))
 (let ((?x59425 (* l_0_17_135 l_0_17_135)))
 (let ((?x59423 (* l_0_17_134 l_0_17_134)))
 (let ((?x59421 (* l_0_17_133 l_0_17_133)))
 (let ((?x60723 (- (- (- (- (* (* (- 2.0) l_0_17_10) l_0_17_19) ?x59421) ?x59423) ?x59425) ?x59427)))
 (let ((?x60727 (- (- ?x60723 (* (* 2.0 l_0_17_16) l_0_17_7)) (* (* 2.0 l_0_17_17) l_0_17_8))))
 (let ((?x60731 (+ (- ?x60727 (* (* 2.0 l_0_17_18) l_0_17_9)) (* (* 2.0 l_0_17_28) l_0_17_37))))
 (let ((?x60735 (+ (+ ?x60731 (* (* 2.0 l_0_17_29) l_0_17_38)) (* (* 2.0 l_0_17_30) l_0_17_39))))
 (= (+ ?x60735 (* (* 2.0 l_0_17_31) l_0_17_40)) 0.0))))))))))
(assert
 (let ((?x60798 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x60795 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x60792 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x60789 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x48214 (* l_0_17_36 l_0_17_36)))
 (let ((?x12198 (* l_0_17_35 l_0_17_35)))
 (let ((?x13275 (* l_0_17_34 l_0_17_34)))
 (let ((?x13266 (* l_0_17_33 l_0_17_33)))
 (let ((?x26410 (* l_0_17_32 l_0_17_32)))
 (let ((?x60780 (* 2.0 l_0_17_178)))
 (let ((?x60781 (* ?x60780 l_0_17_182)))
 (let ((?x60777 (* 2.0 l_0_17_177)))
 (let ((?x60778 (* ?x60777 l_0_17_181)))
 (let ((?x60774 (* 2.0 l_0_17_176)))
 (let ((?x60775 (* ?x60774 l_0_17_180)))
 (let ((?x60771 (* 2.0 l_0_17_175)))
 (let ((?x60772 (* ?x60771 l_0_17_179)))
 (let ((?x60768 (* 2.0 l_0_17_157)))
 (let ((?x60769 (* ?x60768 l_0_17_161)))
 (let ((?x60765 (* 2.0 l_0_17_156)))
 (let ((?x60766 (* ?x60765 l_0_17_160)))
 (let ((?x60762 (* 2.0 l_0_17_155)))
 (let ((?x60763 (* ?x60762 l_0_17_159)))
 (let ((?x60759 (* 2.0 l_0_17_154)))
 (let ((?x60760 (* ?x60759 l_0_17_158)))
 (let ((?x58217 (* l_0_17_15 l_0_17_15)))
 (let ((?x58211 (* l_0_17_14 l_0_17_14)))
 (let ((?x58208 (* l_0_17_13 l_0_17_13)))
 (let ((?x58205 (* l_0_17_12 l_0_17_12)))
 (let ((?x60752 (* 2.0 l_0_17_115)))
 (let ((?x60753 (* ?x60752 l_0_17_119)))
 (let ((?x60749 (* 2.0 l_0_17_114)))
 (let ((?x60750 (* ?x60749 l_0_17_118)))
 (let ((?x60746 (* 2.0 l_0_17_113)))
 (let ((?x60747 (* ?x60746 l_0_17_117)))
 (let ((?x60745 (+ (* (- l_0_17_11) l_0_17_11) (* (* 2.0 l_0_17_112) l_0_17_116))))
 (let ((?x60758 (- (- (- (- (+ (+ (+ ?x60745 ?x60747) ?x60750) ?x60753) ?x58205) ?x58208) ?x58211) ?x58217)))
 (let ((?x60779 (+ (+ (+ (- (- (- (- ?x60758 ?x60760) ?x60763) ?x60766) ?x60769) ?x60772) ?x60775) ?x60778)))
 (let ((?x60790 (- (+ (+ (+ (+ (+ (+ ?x60779 ?x60781) ?x26410) ?x13266) ?x13275) ?x12198) ?x48214) ?x60789)))
 (= (- (- (- ?x60790 ?x60792) ?x60795) ?x60798) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60780 (* 2.0 l_0_17_178)))
 (let ((?x60899 (* ?x60780 l_0_17_187)))
 (let ((?x60777 (* 2.0 l_0_17_177)))
 (let ((?x60897 (* ?x60777 l_0_17_186)))
 (let ((?x60774 (* 2.0 l_0_17_176)))
 (let ((?x60895 (* ?x60774 l_0_17_185)))
 (let ((?x60771 (* 2.0 l_0_17_175)))
 (let ((?x60893 (* ?x60771 l_0_17_184)))
 (let ((?x60768 (* 2.0 l_0_17_157)))
 (let ((?x60891 (* ?x60768 l_0_17_166)))
 (let ((?x60765 (* 2.0 l_0_17_156)))
 (let ((?x60889 (* ?x60765 l_0_17_165)))
 (let ((?x60762 (* 2.0 l_0_17_155)))
 (let ((?x60887 (* ?x60762 l_0_17_164)))
 (let ((?x60759 (* 2.0 l_0_17_154)))
 (let ((?x60885 (* ?x60759 l_0_17_163)))
 (let ((?x59546 (* 2.0 l_0_17_136)))
 (let ((?x59547 (* ?x59546 l_0_17_140)))
 (let ((?x59543 (* 2.0 l_0_17_135)))
 (let ((?x59544 (* ?x59543 l_0_17_139)))
 (let ((?x59540 (* 2.0 l_0_17_134)))
 (let ((?x59541 (* ?x59540 l_0_17_138)))
 (let ((?x59537 (* 2.0 l_0_17_133)))
 (let ((?x59538 (* ?x59537 l_0_17_137)))
 (let ((?x60752 (* 2.0 l_0_17_115)))
 (let ((?x60869 (* ?x60752 l_0_17_124)))
 (let ((?x60749 (* 2.0 l_0_17_114)))
 (let ((?x60867 (* ?x60749 l_0_17_123)))
 (let ((?x60746 (* 2.0 l_0_17_113)))
 (let ((?x60865 (* ?x60746 l_0_17_122)))
 (let ((?x49252 (* 2.0 l_0_17_112)))
 (let ((?x60863 (* ?x49252 l_0_17_121)))
 (let ((?x60858 (* 2.0 l_0_17_103)))
 (let ((?x60859 (* ?x60858 l_0_17_94)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x60856 (* ?x60855 l_0_17_93)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x60853 (* ?x60852 l_0_17_92)))
 (let ((?x60862 (- (- (- (- (* (* (- 2.0) l_0_17_100) l_0_17_91) ?x60853) ?x60856) ?x60859) (* (* 2.0 l_0_17_11) l_0_17_16))))
 (let ((?x60872 (- (+ (+ (+ (+ ?x60862 ?x60863) ?x60865) ?x60867) ?x60869) (* (* 2.0 l_0_17_12) l_0_17_17))))
 (let ((?x60877 (- (- (- (- ?x60872 (* (* 2.0 l_0_17_13) l_0_17_18)) ?x59538) ?x59541) ?x59544)))
 (let ((?x60884 (- (- (- ?x60877 ?x59547) (* (* 2.0 l_0_17_14) l_0_17_19)) (* (* 2.0 l_0_17_15) l_0_17_20))))
 (let ((?x60898 (+ (+ (+ (- (- (- (- ?x60884 ?x60885) ?x60887) ?x60889) ?x60891) ?x60893) ?x60895) ?x60897)))
 (let ((?x60906 (+ (+ (+ ?x60898 ?x60899) (* (* 2.0 l_0_17_32) l_0_17_37)) (* (* 2.0 l_0_17_33) l_0_17_38))))
 (let ((?x60912 (+ (+ ?x60906 (* (* 2.0 l_0_17_34) l_0_17_39)) (* (* 2.0 l_0_17_35) l_0_17_40))))
 (= (+ ?x60912 (* (* 2.0 l_0_17_36) l_0_17_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60995 (* l_0_17_42 l_0_17_42)))
 (let ((?x60993 (* l_0_17_41 l_0_17_41)))
 (let ((?x60991 (* l_0_17_40 l_0_17_40)))
 (let ((?x60989 (* l_0_17_39 l_0_17_39)))
 (let ((?x60987 (* l_0_17_38 l_0_17_38)))
 (let ((?x60985 (* l_0_17_37 l_0_17_37)))
 (let ((?x60983 (* l_0_17_21 l_0_17_21)))
 (let ((?x60981 (* l_0_17_20 l_0_17_20)))
 (let ((?x60979 (* l_0_17_19 l_0_17_19)))
 (let ((?x60961 (* l_0_17_18 l_0_17_18)))
 (let ((?x60958 (* l_0_17_17 l_0_17_17)))
 (let ((?x60954 (* l_0_17_16 l_0_17_16)))
 (let ((?x59546 (* 2.0 l_0_17_136)))
 (let ((?x59697 (* ?x59546 l_0_17_145)))
 (let ((?x59543 (* 2.0 l_0_17_135)))
 (let ((?x59695 (* ?x59543 l_0_17_144)))
 (let ((?x59540 (* 2.0 l_0_17_134)))
 (let ((?x59693 (* ?x59540 l_0_17_143)))
 (let ((?x60956 (- (- (- (- (* (* (- 2.0) l_0_17_133) l_0_17_142) ?x59693) ?x59695) ?x59697) ?x60954)))
 (let ((?x60988 (+ (+ (- (- (- (- (- ?x60956 ?x60958) ?x60961) ?x60979) ?x60981) ?x60983) ?x60985) ?x60987)))
 (= (+ (+ (+ (+ ?x60988 ?x60989) ?x60991) ?x60993) ?x60995) 0.0))))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61027 (* ?x59229 l_0_17_68)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61025 (* ?x59226 l_0_17_67)))
 (let ((?x59049 (* l_0_17_64 l_0_17_64)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61022 (* ?x59046 l_0_17_67)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61020 (* ?x59221 l_0_17_47)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61018 (* ?x59218 l_0_17_46)))
 (let ((?x37961 (* l_0_17_43 l_0_17_43)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61015 (* ?x59040 l_0_17_46)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61013 (* ?x59086 l_0_17_25)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x50239 (* ?x59076 l_0_17_4)))
 (let ((?x61017 (+ (- (- (+ ?x50239 (* (* 2.0 l_0_17_127) l_0_17_130)) ?x61013) ?x61015) ?x37961)))
 (= (+ (+ (- (+ (- (- ?x61017 ?x61018) ?x61020) ?x61022) ?x59049) ?x61025) ?x61027) 0.0)))))))))))))))))))))
(assert
 (let ((?x61082 (* l_0_17_85 l_0_17_85)))
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61080 (* ?x59229 l_0_17_75)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61078 (* ?x59226 l_0_17_74)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61076 (* ?x59046 l_0_17_74)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61074 (* ?x59221 l_0_17_54)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61072 (* ?x59218 l_0_17_53)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61070 (* ?x59040 l_0_17_53)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61068 (* ?x59086 l_0_17_32)))
 (let ((?x61066 (* l_0_17_169 l_0_17_169)))
 (let ((?x61064 (* l_0_17_148 l_0_17_148)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x61062 (* ?x59079 l_0_17_137)))
 (let ((?x61063 (+ (+ (* (* 12.0 l_0_17_1) l_0_17_11) (* l_0_17_106 l_0_17_106)) ?x61062)))
 (let ((?x61077 (+ (- (- (- (- (+ (- ?x61063 ?x61064) ?x61066) ?x61068) ?x61070) ?x61072) ?x61074) ?x61076)))
 (= (- (+ (+ ?x61077 ?x61078) ?x61080) ?x61082) 0.0)))))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61133 (* ?x59229 l_0_17_80)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61131 (* ?x59226 l_0_17_79)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61129 (* ?x59046 l_0_17_79)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61127 (* ?x59221 l_0_17_59)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61125 (* ?x59218 l_0_17_58)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61123 (* ?x59040 l_0_17_58)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61121 (* ?x59086 l_0_17_37)))
 (let ((?x59031 (* l_0_17_127 l_0_17_127)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x61117 (* ?x59076 l_0_17_16)))
 (let ((?x61124 (- (- (- (+ ?x61117 (* (* 2.0 l_0_17_127) l_0_17_142)) ?x59031) ?x61121) ?x61123)))
 (= (+ (+ (+ (- (- ?x61124 ?x61125) ?x61127) ?x61129) ?x61131) ?x61133) 0.0))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61027 (* ?x59229 l_0_17_68)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61025 (* ?x59226 l_0_17_67)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61181 (* ?x59176 l_0_17_67)))
 (let ((?x59177 (* ?x59176 l_0_17_65)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61020 (* ?x59221 l_0_17_47)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61018 (* ?x59218 l_0_17_46)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61176 (* ?x59171 l_0_17_46)))
 (let ((?x59172 (* ?x59171 l_0_17_44)))
 (let ((?x58777 (* 12.0 l_0_17_3)))
 (let ((?x58778 (* ?x58777 l_0_17_5)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x58767 (* ?x58518 l_0_17_26)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x58761 (* ?x58509 l_0_17_25)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61013 (* ?x59086 l_0_17_25)))
 (let ((?x58754 (* 12.0 l_0_17_2)))
 (let ((?x58755 (* ?x58754 l_0_17_4)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61151 (* ?x59267 l_0_17_131)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x50239 (* ?x59076 l_0_17_4)))
 (let ((?x61161 (- (+ (+ ?x50239 (* (* 2.0 l_0_17_128) l_0_17_130)) ?x61151) (* (* 2.0 l_0_17_190) l_0_17_193))))
 (let ((?x61166 (- (- (- (+ ?x61161 ?x58755) (* (* 2.0 l_0_17_211) l_0_17_214)) ?x61013) ?x58761)))
 (let ((?x61171 (- (- (- ?x61166 (* (* 2.0 l_0_17_232) l_0_17_235)) ?x58767) (* (* 2.0 l_0_17_253) l_0_17_256))))
 (let ((?x61177 (- (+ (+ (- ?x61171 (* (* 2.0 l_0_17_274) l_0_17_277)) ?x58778) ?x59172) ?x61176)))
 (= (+ (+ (+ (- (- (- ?x61177 ?x61018) ?x61020) ?x59177) ?x61181) ?x61025) ?x61027) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61238 (* ?x59593 l_0_17_86)))
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61080 (* ?x59229 l_0_17_75)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61078 (* ?x59226 l_0_17_74)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61234 (* ?x59176 l_0_17_74)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61074 (* ?x59221 l_0_17_54)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61072 (* ?x59218 l_0_17_53)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61230 (* ?x59171 l_0_17_53)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x58519 (* ?x58518 l_0_17_33)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x58510 (* ?x58509 l_0_17_32)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61068 (* ?x59086 l_0_17_32)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61215 (* ?x59552 l_0_17_170)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61213 (* ?x59549 l_0_17_149)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61211 (* ?x59267 l_0_17_138)))
 (let ((?x59264 (* 2.0 l_0_17_128)))
 (let ((?x61209 (* ?x59264 l_0_17_137)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x58487 (* ?x58486 l_0_17_3)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x58484 (* ?x58483 l_0_17_2)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x49965 (* ?x59076 l_0_17_11)))
 (let ((?x61210 (+ (+ (+ (+ ?x49965 (* (* 2.0 l_0_17_106) l_0_17_107)) ?x58484) ?x58487) ?x61209)))
 (let ((?x61218 (- (+ (- (+ ?x61210 ?x61211) ?x61213) ?x61215) (* (* 2.0 l_0_17_190) l_0_17_200))))
 (let ((?x61224 (- (- (- (- ?x61218 (* (* 2.0 l_0_17_211) l_0_17_221)) ?x61068) ?x58510) (* (* 2.0 l_0_17_232) l_0_17_242))))
 (let ((?x61229 (- (- (- ?x61224 ?x58519) (* (* 2.0 l_0_17_253) l_0_17_263)) (* (* 2.0 l_0_17_274) l_0_17_284))))
 (let ((?x61239 (- (+ (+ (+ (- (- (- ?x61229 ?x61230) ?x61072) ?x61074) ?x61234) ?x61078) ?x61080) ?x61238)))
 (= ?x61239 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59229 (* 6.0 l_0_17_66)))
 (let ((?x61133 (* ?x59229 l_0_17_80)))
 (let ((?x59226 (* 6.0 l_0_17_65)))
 (let ((?x61131 (* ?x59226 l_0_17_79)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61318 (* ?x59176 l_0_17_79)))
 (let ((?x59221 (* 6.0 l_0_17_45)))
 (let ((?x61127 (* ?x59221 l_0_17_59)))
 (let ((?x59218 (* 6.0 l_0_17_44)))
 (let ((?x61125 (* ?x59218 l_0_17_58)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61314 (* ?x59171 l_0_17_58)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x61308 (* ?x58518 l_0_17_38)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x61304 (* ?x58509 l_0_17_37)))
 (let ((?x59086 (* 12.0 l_0_17_22)))
 (let ((?x61121 (* ?x59086 l_0_17_37)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x61297 (* ?x59702 l_0_17_3)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x61295 (* ?x59699 l_0_17_2)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61293 (* ?x59267 l_0_17_143)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x59080 (* ?x59079 l_0_17_128)))
 (let ((?x59076 (* 12.0 l_0_17_1)))
 (let ((?x61117 (* ?x59076 l_0_17_16)))
 (let ((?x61296 (+ (+ (+ (- ?x61117 ?x59080) (* (* 2.0 l_0_17_128) l_0_17_142)) ?x61293) ?x61295)))
 (let ((?x61302 (- (- (+ ?x61296 ?x61297) (* (* 2.0 l_0_17_190) l_0_17_205)) (* (* 2.0 l_0_17_211) l_0_17_226))))
 (let ((?x61309 (- (- (- (- ?x61302 ?x61121) ?x61304) (* (* 2.0 l_0_17_232) l_0_17_247)) ?x61308)))
 (let ((?x61313 (- (- ?x61309 (* (* 2.0 l_0_17_253) l_0_17_268)) (* (* 2.0 l_0_17_274) l_0_17_289))))
 (= (+ (+ (+ (- (- (- ?x61313 ?x61314) ?x61125) ?x61127) ?x61318) ?x61131) ?x61133) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58687 (* l_0_17_69 l_0_17_69)))
 (let ((?x61344 (* 3.0 ?x58687)))
 (let ((?x58684 (* l_0_17_68 l_0_17_68)))
 (let ((?x61342 (* 3.0 ?x58684)))
 (let ((?x58681 (* l_0_17_67 l_0_17_67)))
 (let ((?x61340 (* 3.0 ?x58681)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61181 (* ?x59176 l_0_17_67)))
 (let ((?x58674 (* l_0_17_6 l_0_17_6)))
 (let ((?x58675 (* 6.0 ?x58674)))
 (let ((?x58671 (* l_0_17_5 l_0_17_5)))
 (let ((?x58672 (* 6.0 ?x58671)))
 (let ((?x61335 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x61332 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61176 (* ?x59171 l_0_17_46)))
 (let ((?x58655 (* l_0_17_4 l_0_17_4)))
 (let ((?x58656 (* 6.0 ?x58655)))
 (let ((?x58647 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x58644 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x58635 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x16769 (* l_0_17_132 l_0_17_132)))
 (let ((?x39229 (+ (+ (* l_0_17_130 l_0_17_130) (* l_0_17_131 l_0_17_131)) ?x16769)))
 (let ((?x50373 (- (+ (+ (- (- (- ?x39229 ?x58635) ?x58644) ?x58647) ?x58656) ?x61176) (* (* 3.0 l_0_17_46) l_0_17_46))))
 (let ((?x61343 (+ (+ (- (+ (+ (- (- ?x50373 ?x61332) ?x61335) ?x58672) ?x58675) ?x61181) ?x61340) ?x61342)))
 (= (+ ?x61343 ?x61344) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61381 (* ?x59593 l_0_17_88)))
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x61379 (* ?x59379 l_0_17_76)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x61377 (* ?x59376 l_0_17_75)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x61375 (* ?x59373 l_0_17_74)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61234 (* ?x59176 l_0_17_74)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x61372 (* ?x59363 l_0_17_55)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x61370 (* ?x59360 l_0_17_54)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61230 (* ?x59171 l_0_17_53)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x58895 (* ?x58894 l_0_17_34)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x58892 (* ?x58891 l_0_17_33)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x58880 (* ?x58879 l_0_17_32)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61362 (* ?x59552 l_0_17_172)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61360 (* ?x59549 l_0_17_151)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x61358 (* ?x59342 l_0_17_139)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x61356 (* ?x59339 l_0_17_138)))
 (let ((?x59336 (* 2.0 l_0_17_130)))
 (let ((?x61354 (* ?x59336 l_0_17_137)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x58842 (* ?x58841 l_0_17_6)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x58839 (* ?x58486 l_0_17_5)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x58837 (* ?x58483 l_0_17_4)))
 (let ((?x61355 (+ (+ (+ (+ (* (* 2.0 l_0_17_106) l_0_17_109) ?x58837) ?x58839) ?x58842) ?x61354)))
 (let ((?x61366 (- (- (- (+ (- (+ (+ ?x61355 ?x61356) ?x61358) ?x61360) ?x61362) ?x58880) ?x58892) ?x58895)))
 (let ((?x61373 (- (- (- (+ ?x61366 ?x61230) (* (* 6.0 l_0_17_46) l_0_17_53)) ?x61370) ?x61372)))
 (= (- (+ (+ (+ (- ?x61373 ?x61234) ?x61375) ?x61377) ?x61379) ?x61381) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x61463 (* ?x59379 l_0_17_81)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x61461 (* ?x59376 l_0_17_80)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x61459 (* ?x59373 l_0_17_79)))
 (let ((?x59176 (* 2.0 l_0_17_64)))
 (let ((?x61318 (* ?x59176 l_0_17_79)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x61456 (* ?x59363 l_0_17_60)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x61454 (* ?x59360 l_0_17_59)))
 (let ((?x59171 (* 2.0 l_0_17_43)))
 (let ((?x61314 (* ?x59171 l_0_17_58)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x61449 (* ?x58894 l_0_17_39)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x61447 (* ?x58891 l_0_17_38)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x61445 (* ?x58879 l_0_17_37)))
 (let ((?x59705 (* 12.0 l_0_17_18)))
 (let ((?x61443 (* ?x59705 l_0_17_6)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x61441 (* ?x59702 l_0_17_5)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x61439 (* ?x59699 l_0_17_4)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x61437 (* ?x59342 l_0_17_144)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x61435 (* ?x59339 l_0_17_143)))
 (let ((?x61434 (+ (* (* (- 2.0) l_0_17_127) l_0_17_130) (* (* 2.0 l_0_17_130) l_0_17_142))))
 (let ((?x61448 (- (- (+ (+ (+ (+ (+ ?x61434 ?x61435) ?x61437) ?x61439) ?x61441) ?x61443) ?x61445) ?x61447)))
 (let ((?x61455 (- (- (+ (- ?x61448 ?x61449) ?x61314) (* (* 6.0 l_0_17_46) l_0_17_58)) ?x61454)))
 (= (+ (+ (+ (- (- ?x61455 ?x61456) ?x61318) ?x61459) ?x61461) ?x61463) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61550 (* ?x59593 l_0_17_95)))
 (let ((?x58321 (* l_0_17_78 l_0_17_78)))
 (let ((?x61548 (* 3.0 ?x58321)))
 (let ((?x58318 (* l_0_17_77 l_0_17_77)))
 (let ((?x61546 (* 3.0 ?x58318)))
 (let ((?x58315 (* l_0_17_76 l_0_17_76)))
 (let ((?x61544 (* 3.0 ?x58315)))
 (let ((?x58312 (* l_0_17_75 l_0_17_75)))
 (let ((?x61542 (* 3.0 ?x58312)))
 (let ((?x58309 (* l_0_17_74 l_0_17_74)))
 (let ((?x61540 (* 3.0 ?x58309)))
 (let ((?x61538 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x61535 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x61532 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x61529 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x58292 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x58289 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x58286 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x58283 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x58280 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61518 (* ?x59552 l_0_17_179)))
 (let ((?x58217 (* l_0_17_15 l_0_17_15)))
 (let ((?x58218 (* 6.0 ?x58217)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61515 (* ?x59549 l_0_17_158)))
 (let ((?x61513 (* l_0_17_141 l_0_17_141)))
 (let ((?x61511 (* l_0_17_140 l_0_17_140)))
 (let ((?x58211 (* l_0_17_14 l_0_17_14)))
 (let ((?x58212 (* 6.0 ?x58211)))
 (let ((?x61508 (* l_0_17_139 l_0_17_139)))
 (let ((?x61506 (* l_0_17_138 l_0_17_138)))
 (let ((?x61504 (* l_0_17_137 l_0_17_137)))
 (let ((?x58208 (* l_0_17_13 l_0_17_13)))
 (let ((?x58209 (* 6.0 ?x58208)))
 (let ((?x58205 (* l_0_17_12 l_0_17_12)))
 (let ((?x58206 (* 6.0 ?x58205)))
 (let ((?x58202 (* l_0_17_11 l_0_17_11)))
 (let ((?x58203 (* 6.0 ?x58202)))
 (let ((?x61505 (+ (+ (+ (+ (* (* 2.0 l_0_17_106) l_0_17_116) ?x58203) ?x58206) ?x58209) ?x61504)))
 (let ((?x61517 (+ (- (+ (+ (+ (+ (+ ?x61505 ?x61506) ?x61508) ?x58212) ?x61511) ?x61513) ?x61515) ?x58218)))
 (let ((?x61527 (- (- (- (- (- (- (+ ?x61517 ?x61518) ?x58280) ?x58283) ?x58286) ?x58289) ?x58292) (* (* 3.0 l_0_17_53) l_0_17_53))))
 (let ((?x61545 (+ (+ (+ (- (- (- (- ?x61527 ?x61529) ?x61532) ?x61535) ?x61538) ?x61540) ?x61542) ?x61544)))
 (= (- (+ (+ ?x61545 ?x61546) ?x61548) ?x61550) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61660 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x61657 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x61654 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x61651 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x61648 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x61645 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x61642 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x61639 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x61636 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x61630 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61627 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61624 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61621 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61618 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61615 (* ?x59552 l_0_17_184)))
 (let ((?x61613 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61610 (* ?x59549 l_0_17_163)))
 (let ((?x61608 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61605 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61602 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x61599 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61596 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61593 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x61590 (* ?x58841 l_0_17_18)))
 (let ((?x59079 (* 2.0 l_0_17_127)))
 (let ((?x61062 (* ?x59079 l_0_17_137)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x61587 (* ?x58486 l_0_17_17)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x61585 (* ?x58483 l_0_17_16)))
 (let ((?x59528 (* 2.0 l_0_17_106)))
 (let ((?x61583 (* ?x59528 l_0_17_121)))
 (let ((?x61589 (- (+ (+ (+ (* (* (- 2.0) l_0_17_100) l_0_17_85) ?x61583) ?x61585) ?x61587) ?x61062)))
 (let ((?x61609 (+ (+ (+ (+ (+ (+ (+ ?x61589 ?x61590) ?x61593) ?x61596) ?x61599) ?x61602) ?x61605) ?x61608)))
 (let ((?x61628 (- (- (- (- (+ (+ (- ?x61609 ?x61610) ?x61613) ?x61615) ?x61618) ?x61621) ?x61624) ?x61627)))
 (let ((?x61640 (- (- (- (- ?x61628 ?x61630) (* (* 6.0 l_0_17_53) l_0_17_58)) ?x61636) ?x61639)))
 (let ((?x61661 (+ (+ (+ (+ (+ (- (- ?x61640 ?x61642) ?x61645) ?x61648) ?x61651) ?x61654) ?x61657) ?x61660)))
 (= ?x61661 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61801 (* l_0_17_84 l_0_17_84)))
 (let ((?x61802 (* 3.0 ?x61801)))
 (let ((?x61798 (* l_0_17_83 l_0_17_83)))
 (let ((?x61799 (* 3.0 ?x61798)))
 (let ((?x61795 (* l_0_17_82 l_0_17_82)))
 (let ((?x61796 (* 3.0 ?x61795)))
 (let ((?x61792 (* l_0_17_81 l_0_17_81)))
 (let ((?x61793 (* 3.0 ?x61792)))
 (let ((?x61789 (* l_0_17_80 l_0_17_80)))
 (let ((?x61790 (* 3.0 ?x61789)))
 (let ((?x61786 (* l_0_17_79 l_0_17_79)))
 (let ((?x61787 (* 3.0 ?x61786)))
 (let ((?x61784 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x61781 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x61778 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x61775 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x61772 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x61766 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x61763 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x61760 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x61757 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x61754 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x61751 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x60983 (* l_0_17_21 l_0_17_21)))
 (let ((?x61748 (* 6.0 ?x60983)))
 (let ((?x60981 (* l_0_17_20 l_0_17_20)))
 (let ((?x61746 (* 6.0 ?x60981)))
 (let ((?x60979 (* l_0_17_19 l_0_17_19)))
 (let ((?x61744 (* 6.0 ?x60979)))
 (let ((?x60961 (* l_0_17_18 l_0_17_18)))
 (let ((?x61742 (* 6.0 ?x60961)))
 (let ((?x60958 (* l_0_17_17 l_0_17_17)))
 (let ((?x61740 (* 6.0 ?x60958)))
 (let ((?x60954 (* l_0_17_16 l_0_17_16)))
 (let ((?x61738 (* 6.0 ?x60954)))
 (let ((?x61736 (* l_0_17_147 l_0_17_147)))
 (let ((?x61734 (* l_0_17_146 l_0_17_146)))
 (let ((?x61732 (* l_0_17_145 l_0_17_145)))
 (let ((?x61730 (* l_0_17_144 l_0_17_144)))
 (let ((?x61728 (* l_0_17_143 l_0_17_143)))
 (let ((?x61726 (* l_0_17_142 l_0_17_142)))
 (let ((?x61733 (+ (+ (+ (+ (* (* (- 2.0) l_0_17_127) l_0_17_142) ?x61726) ?x61728) ?x61730) ?x61732)))
 (let ((?x61747 (+ (+ (+ (+ (+ (+ (+ ?x61733 ?x61734) ?x61736) ?x61738) ?x61740) ?x61742) ?x61744) ?x61746)))
 (let ((?x61767 (- (- (- (- (- (- (+ ?x61747 ?x61748) ?x61751) ?x61754) ?x61757) ?x61760) ?x61763) ?x61766)))
 (let ((?x61779 (- (- (- (- ?x61767 (* (* 3.0 l_0_17_58) l_0_17_58)) ?x61772) ?x61775) ?x61778)))
 (let ((?x61800 (+ (+ (+ (+ (+ (- (- ?x61779 ?x61781) ?x61784) ?x61787) ?x61790) ?x61793) ?x61796) ?x61799)))
 (= (+ ?x61800 ?x61802) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x61868 (* ?x58542 l_0_17_80)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x61866 (* ?x58539 l_0_17_79)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x61864 (* ?x58536 l_0_17_59)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x61862 (* ?x58533 l_0_17_58)))
 (let ((?x58518 (* 12.0 l_0_17_24)))
 (let ((?x61308 (* ?x58518 l_0_17_38)))
 (let ((?x58509 (* 12.0 l_0_17_23)))
 (let ((?x61304 (* ?x58509 l_0_17_37)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x61297 (* ?x59702 l_0_17_3)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x61295 (* ?x59699 l_0_17_2)))
 (let ((?x61838 (+ (- (* (- l_0_17_128) l_0_17_128) (* l_0_17_129 l_0_17_129)) ?x61295)))
 (let ((?x61843 (- (- (+ ?x61838 ?x61297) (* (* 2.0 l_0_17_191) l_0_17_205)) (* (* 2.0 l_0_17_192) l_0_17_206))))
 (let ((?x61847 (- (- ?x61843 (* (* 2.0 l_0_17_212) l_0_17_226)) (* (* 2.0 l_0_17_213) l_0_17_227))))
 (let ((?x61852 (- (- (- ?x61847 ?x61304) (* (* 2.0 l_0_17_233) l_0_17_247)) (* (* 2.0 l_0_17_234) l_0_17_248))))
 (let ((?x61857 (- (- (- ?x61852 ?x61308) (* (* 2.0 l_0_17_254) l_0_17_268)) (* (* 2.0 l_0_17_255) l_0_17_269))))
 (let ((?x61861 (- (- ?x61857 (* (* 2.0 l_0_17_275) l_0_17_289)) (* (* 2.0 l_0_17_276) l_0_17_290))))
 (= (+ (+ (- (- ?x61861 ?x61862) ?x61864) ?x61866) ?x61868) 0.0))))))))))))))))))))))))
(assert
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x61947 (* ?x58925 l_0_17_81)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x61945 (* ?x58922 l_0_17_80)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x61943 (* ?x58919 l_0_17_79)))
 (let ((?x58542 (* 2.0 l_0_17_66)))
 (let ((?x61868 (* ?x58542 l_0_17_80)))
 (let ((?x58539 (* 2.0 l_0_17_65)))
 (let ((?x61866 (* ?x58539 l_0_17_79)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x61939 (* ?x58914 l_0_17_60)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x61937 (* ?x58911 l_0_17_59)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x61935 (* ?x58908 l_0_17_58)))
 (let ((?x58536 (* 2.0 l_0_17_45)))
 (let ((?x61864 (* ?x58536 l_0_17_59)))
 (let ((?x58533 (* 2.0 l_0_17_44)))
 (let ((?x61862 (* ?x58533 l_0_17_58)))
 (let ((?x58894 (* 12.0 l_0_17_27)))
 (let ((?x61449 (* ?x58894 l_0_17_39)))
 (let ((?x58891 (* 12.0 l_0_17_26)))
 (let ((?x61447 (* ?x58891 l_0_17_38)))
 (let ((?x58879 (* 12.0 l_0_17_25)))
 (let ((?x61445 (* ?x58879 l_0_17_37)))
 (let ((?x59705 (* 12.0 l_0_17_18)))
 (let ((?x61443 (* ?x59705 l_0_17_6)))
 (let ((?x59702 (* 12.0 l_0_17_17)))
 (let ((?x61441 (* ?x59702 l_0_17_5)))
 (let ((?x59699 (* 12.0 l_0_17_16)))
 (let ((?x61439 (* ?x59699 l_0_17_4)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61151 (* ?x59267 l_0_17_131)))
 (let ((?x28812 (+ (+ (+ (- (* (* (- 2.0) l_0_17_128) l_0_17_130) ?x61151) ?x61439) ?x61441) ?x61443)))
 (let ((?x50924 (- (- ?x28812 (* (* 2.0 l_0_17_193) l_0_17_205)) (* (* 2.0 l_0_17_194) l_0_17_206))))
 (let ((?x29940 (- (- ?x50924 (* (* 2.0 l_0_17_195) l_0_17_207)) (* (* 2.0 l_0_17_214) l_0_17_226))))
 (let ((?x61911 (- (- ?x29940 (* (* 2.0 l_0_17_215) l_0_17_227)) (* (* 2.0 l_0_17_216) l_0_17_228))))
 (let ((?x61915 (- (- ?x61911 (* (* 2.0 l_0_17_235) l_0_17_247)) (* (* 2.0 l_0_17_236) l_0_17_248))))
 (let ((?x61920 (- (- (- ?x61915 (* (* 2.0 l_0_17_237) l_0_17_249)) ?x61445) (* (* 2.0 l_0_17_256) l_0_17_268))))
 (let ((?x61924 (- (- ?x61920 (* (* 2.0 l_0_17_257) l_0_17_269)) (* (* 2.0 l_0_17_258) l_0_17_270))))
 (let ((?x61930 (- (- (- (- ?x61924 ?x61447) ?x61449) (* (* 2.0 l_0_17_277) l_0_17_289)) (* (* 2.0 l_0_17_278) l_0_17_290))))
 (let ((?x61936 (- (+ (+ (- ?x61930 (* (* 2.0 l_0_17_279) l_0_17_291)) ?x61862) ?x61864) ?x61935)))
 (let ((?x61948 (+ (+ (+ (- (- (- (- ?x61936 ?x61937) ?x61939) ?x61866) ?x61868) ?x61943) ?x61945) ?x61947)))
 (= ?x61948 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62116 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x62113 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x62110 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x62107 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x62104 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x62101 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x62098 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x62095 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x62092 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x62089 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x61630 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61627 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61624 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61621 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61618 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x62006 (* ?x58226 l_0_17_185)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x62004 (* ?x58223 l_0_17_184)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x62002 (* ?x58220 l_0_17_164)))
 (let ((?x61613 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x61999 (* ?x58214 l_0_17_163)))
 (let ((?x61602 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x58841 (* 12.0 l_0_17_13)))
 (let ((?x61590 (* ?x58841 l_0_17_18)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61211 (* ?x59267 l_0_17_138)))
 (let ((?x59264 (* 2.0 l_0_17_128)))
 (let ((?x61209 (* ?x59264 l_0_17_137)))
 (let ((?x58486 (* 12.0 l_0_17_12)))
 (let ((?x61587 (* ?x58486 l_0_17_17)))
 (let ((?x58483 (* 12.0 l_0_17_11)))
 (let ((?x61585 (* ?x58483 l_0_17_16)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x61991 (* ?x58199 l_0_17_122)))
 (let ((?x58196 (* 2.0 l_0_17_107)))
 (let ((?x51206 (* ?x58196 l_0_17_121)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x51249 (* ?x60852 l_0_17_87)))
 (let ((?x61993 (+ (+ (+ (- (* (* (- 2.0) l_0_17_100) l_0_17_86) ?x51249) ?x51206) ?x61991) ?x61585)))
 (let ((?x62001 (+ (- (+ (+ (- (- (+ ?x61993 ?x61587) ?x61209) ?x61211) ?x61590) ?x61602) ?x61999) ?x61613)))
 (let ((?x62010 (- (+ (+ (- ?x62001 ?x62002) ?x62004) ?x62006) (* (* 2.0 l_0_17_200) l_0_17_205))))
 (let ((?x62016 (- (- ?x62010 (* (* 2.0 l_0_17_201) l_0_17_206)) (* (* 2.0 l_0_17_202) l_0_17_207))))
 (let ((?x62022 (- (- ?x62016 (* (* 2.0 l_0_17_203) l_0_17_208)) (* (* 2.0 l_0_17_204) l_0_17_209))))
 (let ((?x62028 (- (- ?x62022 (* (* 2.0 l_0_17_221) l_0_17_226)) (* (* 2.0 l_0_17_222) l_0_17_227))))
 (let ((?x62034 (- (- ?x62028 (* (* 2.0 l_0_17_223) l_0_17_228)) (* (* 2.0 l_0_17_224) l_0_17_229))))
 (let ((?x62040 (- (- ?x62034 (* (* 2.0 l_0_17_225) l_0_17_230)) (* (* 2.0 l_0_17_242) l_0_17_247))))
 (let ((?x62046 (- (- ?x62040 (* (* 2.0 l_0_17_243) l_0_17_248)) (* (* 2.0 l_0_17_244) l_0_17_249))))
 (let ((?x62052 (- (- ?x62046 (* (* 2.0 l_0_17_245) l_0_17_250)) (* (* 2.0 l_0_17_246) l_0_17_251))))
 (let ((?x62058 (- (- ?x62052 (* (* 2.0 l_0_17_263) l_0_17_268)) (* (* 2.0 l_0_17_264) l_0_17_269))))
 (let ((?x62064 (- (- ?x62058 (* (* 2.0 l_0_17_265) l_0_17_270)) (* (* 2.0 l_0_17_266) l_0_17_271))))
 (let ((?x62070 (- (- ?x62064 (* (* 2.0 l_0_17_267) l_0_17_272)) (* (* 2.0 l_0_17_284) l_0_17_289))))
 (let ((?x62076 (- (- ?x62070 (* (* 2.0 l_0_17_285) l_0_17_290)) (* (* 2.0 l_0_17_286) l_0_17_291))))
 (let ((?x62082 (- (- ?x62076 (* (* 2.0 l_0_17_287) l_0_17_292)) (* (* 2.0 l_0_17_288) l_0_17_293))))
 (let ((?x62093 (- (- (- (- (- (- (- ?x62082 ?x61618) ?x61621) ?x61624) ?x61627) ?x61630) ?x62089) ?x62092)))
 (let ((?x62114 (+ (+ (+ (+ (- (- (- ?x62093 ?x62095) ?x62098) ?x62101) ?x62104) ?x62107) ?x62110) ?x62113)))
 (= (+ ?x62114 ?x62116) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61766 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x61763 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x61760 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x61757 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x61754 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x61751 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x62283 (* l_0_17_294 l_0_17_294)))
 (let ((?x62281 (* l_0_17_293 l_0_17_293)))
 (let ((?x62279 (* l_0_17_292 l_0_17_292)))
 (let ((?x62277 (* l_0_17_291 l_0_17_291)))
 (let ((?x62275 (* l_0_17_290 l_0_17_290)))
 (let ((?x62273 (* l_0_17_289 l_0_17_289)))
 (let ((?x62271 (* l_0_17_273 l_0_17_273)))
 (let ((?x62269 (* l_0_17_272 l_0_17_272)))
 (let ((?x62267 (* l_0_17_271 l_0_17_271)))
 (let ((?x62265 (* l_0_17_270 l_0_17_270)))
 (let ((?x62263 (* l_0_17_269 l_0_17_269)))
 (let ((?x62261 (* l_0_17_268 l_0_17_268)))
 (let ((?x62259 (* l_0_17_252 l_0_17_252)))
 (let ((?x62257 (* l_0_17_251 l_0_17_251)))
 (let ((?x62255 (* l_0_17_250 l_0_17_250)))
 (let ((?x62253 (* l_0_17_249 l_0_17_249)))
 (let ((?x62251 (* l_0_17_248 l_0_17_248)))
 (let ((?x62249 (* l_0_17_247 l_0_17_247)))
 (let ((?x62247 (* l_0_17_231 l_0_17_231)))
 (let ((?x62245 (* l_0_17_230 l_0_17_230)))
 (let ((?x62243 (* l_0_17_229 l_0_17_229)))
 (let ((?x62241 (* l_0_17_228 l_0_17_228)))
 (let ((?x62239 (* l_0_17_227 l_0_17_227)))
 (let ((?x62237 (* l_0_17_226 l_0_17_226)))
 (let ((?x62235 (* l_0_17_210 l_0_17_210)))
 (let ((?x60983 (* l_0_17_21 l_0_17_21)))
 (let ((?x61748 (* 6.0 ?x60983)))
 (let ((?x62232 (* l_0_17_209 l_0_17_209)))
 (let ((?x62230 (* l_0_17_208 l_0_17_208)))
 (let ((?x62228 (* l_0_17_207 l_0_17_207)))
 (let ((?x62226 (* l_0_17_206 l_0_17_206)))
 (let ((?x62224 (* l_0_17_205 l_0_17_205)))
 (let ((?x60981 (* l_0_17_20 l_0_17_20)))
 (let ((?x61746 (* 6.0 ?x60981)))
 (let ((?x60979 (* l_0_17_19 l_0_17_19)))
 (let ((?x61744 (* 6.0 ?x60979)))
 (let ((?x60961 (* l_0_17_18 l_0_17_18)))
 (let ((?x61742 (* 6.0 ?x60961)))
 (let ((?x60958 (* l_0_17_17 l_0_17_17)))
 (let ((?x61740 (* 6.0 ?x60958)))
 (let ((?x60954 (* l_0_17_16 l_0_17_16)))
 (let ((?x61738 (* 6.0 ?x60954)))
 (let ((?x59267 (* 2.0 l_0_17_129)))
 (let ((?x61293 (* ?x59267 l_0_17_143)))
 (let ((?x62204 (+ (+ (+ (- (* (* (- 2.0) l_0_17_128) l_0_17_142) ?x61293) ?x61738) ?x61740) ?x61742)))
 (let ((?x62233 (- (- (- (- (- (+ (+ ?x62204 ?x61744) ?x61746) ?x62224) ?x62226) ?x62228) ?x62230) ?x62232)))
 (let ((?x62246 (- (- (- (- (- (- (+ ?x62233 ?x61748) ?x62235) ?x62237) ?x62239) ?x62241) ?x62243) ?x62245)))
 (let ((?x62260 (- (- (- (- (- (- (- ?x62246 ?x62247) ?x62249) ?x62251) ?x62253) ?x62255) ?x62257) ?x62259)))
 (let ((?x62274 (- (- (- (- (- (- (- ?x62260 ?x62261) ?x62263) ?x62265) ?x62267) ?x62269) ?x62271) ?x62273)))
 (let ((?x62286 (- (- (- (- (- (- (- ?x62274 ?x62275) ?x62277) ?x62279) ?x62281) ?x62283) ?x61751) ?x61754)))
 (let ((?x62293 (- (- (- (- (- ?x62286 ?x61757) ?x61760) ?x61763) ?x61766) (* (* 1.0 l_0_17_58) l_0_17_58))))
 (let ((?x62299 (- (- ?x62293 (* (* 1.0 l_0_17_59) l_0_17_59)) (* (* 1.0 l_0_17_60) l_0_17_60))))
 (let ((?x62305 (- (- ?x62299 (* (* 1.0 l_0_17_61) l_0_17_61)) (* (* 1.0 l_0_17_62) l_0_17_62))))
 (let ((?x62310 (+ (- ?x62305 (* (* 1.0 l_0_17_63) l_0_17_63)) (* 1.0 (* l_0_17_79 l_0_17_79)))))
 (let ((?x62314 (+ (+ ?x62310 (* 1.0 (* l_0_17_80 l_0_17_80))) (* 1.0 (* l_0_17_81 l_0_17_81)))))
 (let ((?x62318 (+ (+ ?x62314 (* 1.0 (* l_0_17_82 l_0_17_82))) (* 1.0 (* l_0_17_83 l_0_17_83)))))
 (= (+ ?x62318 (* 1.0 (* l_0_17_84 l_0_17_84))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61238 (* ?x59593 l_0_17_86)))
 (let ((?x59049 (* l_0_17_64 l_0_17_64)))
 (let ((?x59050 (* 3.0 ?x59049)))
 (let ((?x59044 (* (* 3.0 l_0_17_43) l_0_17_43)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61215 (* ?x59552 l_0_17_170)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61213 (* ?x59549 l_0_17_149)))
 (let ((?x62358 (+ (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_107) ?x61213) ?x61215) ?x59044) ?x59050)))
 (= (+ ?x62358 ?x61238) 0.0))))))))))))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x58930 (* ?x58327 l_0_17_89)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x58928 (* ?x58324 l_0_17_88)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61022 (* ?x59046 l_0_17_67)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61015 (* ?x59040 l_0_17_46)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x58850 (* ?x58226 l_0_17_173)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x58848 (* ?x58223 l_0_17_172)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x58846 (* ?x58220 l_0_17_152)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x58844 (* ?x58214 l_0_17_151)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x58835 (* ?x58199 l_0_17_110)))
 (let ((?x62368 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_109) ?x58835) ?x58844) ?x58846) ?x58848)))
 (= (+ (+ (+ (- (- ?x62368 ?x58850) ?x61015) ?x61022) ?x58928) ?x58930) 0.0)))))))))))))))))))))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x60238 (* ?x58327 l_0_17_92)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x60236 (* ?x58324 l_0_17_91)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x59224 (* ?x59046 l_0_17_70)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x59216 (* ?x59040 l_0_17_49)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x60142 (* ?x58226 l_0_17_176)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x38560 (* ?x58223 l_0_17_175)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x38557 (* ?x58220 l_0_17_155)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x28092 (* ?x58214 l_0_17_154)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x48636 (* ?x58199 l_0_17_113)))
 (let ((?x62379 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_112) ?x48636) ?x28092) ?x38557) ?x38560)))
 (= (+ (+ (+ (- (- ?x62379 ?x60142) ?x59216) ?x59224) ?x60236) ?x60238) 0.0)))))))))))))))))))))
(assert
 (let ((?x58327 (* 2.0 l_0_17_87)))
 (let ((?x58328 (* ?x58327 l_0_17_96)))
 (let ((?x58324 (* 2.0 l_0_17_86)))
 (let ((?x58325 (* ?x58324 l_0_17_95)))
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61076 (* ?x59046 l_0_17_74)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61070 (* ?x59040 l_0_17_53)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x58227 (* ?x58226 l_0_17_180)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x58224 (* ?x58223 l_0_17_179)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x58221 (* ?x58220 l_0_17_159)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x58215 (* ?x58214 l_0_17_158)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x58200 (* ?x58199 l_0_17_117)))
 (let ((?x62387 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_116) ?x58200) ?x58215) ?x58221) ?x58224)))
 (= (+ (+ (+ (- (- ?x62387 ?x58227) ?x61070) ?x61076) ?x58325) ?x58328) 0.0)))))))))))))))))))))
(assert
 (let ((?x59046 (* 6.0 l_0_17_64)))
 (let ((?x61129 (* ?x59046 l_0_17_79)))
 (let ((?x59040 (* 6.0 l_0_17_43)))
 (let ((?x61123 (* ?x59040 l_0_17_58)))
 (let ((?x58226 (* 2.0 l_0_17_171)))
 (let ((?x62006 (* ?x58226 l_0_17_185)))
 (let ((?x58223 (* 2.0 l_0_17_170)))
 (let ((?x62004 (* ?x58223 l_0_17_184)))
 (let ((?x58220 (* 2.0 l_0_17_150)))
 (let ((?x62002 (* ?x58220 l_0_17_164)))
 (let ((?x58214 (* 2.0 l_0_17_149)))
 (let ((?x61999 (* ?x58214 l_0_17_163)))
 (let ((?x58199 (* 2.0 l_0_17_108)))
 (let ((?x61991 (* ?x58199 l_0_17_122)))
 (let ((?x58196 (* 2.0 l_0_17_107)))
 (let ((?x51206 (* ?x58196 l_0_17_121)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x51249 (* ?x60852 l_0_17_87)))
 (let ((?x62402 (+ (- (- (+ (* (* 2.0 l_0_17_100) l_0_17_86) ?x51249) ?x51206) ?x61991) ?x61999)))
 (= (+ (- (- (- (+ ?x62402 ?x62002) ?x62004) ?x62006) ?x61123) ?x61129) 0.0)))))))))))))))))))))
(assert
 (let ((?x58687 (* l_0_17_69 l_0_17_69)))
 (let ((?x61344 (* 3.0 ?x58687)))
 (let ((?x58684 (* l_0_17_68 l_0_17_68)))
 (let ((?x61342 (* 3.0 ?x58684)))
 (let ((?x58681 (* l_0_17_67 l_0_17_67)))
 (let ((?x61340 (* 3.0 ?x58681)))
 (let ((?x61335 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x61332 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x40255 (+ (+ (- (- (* (* (- 3.0) l_0_17_46) l_0_17_46) ?x61332) ?x61335) ?x61340) ?x61342)))
 (= (+ ?x40255 ?x61344) 0.0)))))))))))
(assert
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x59380 (* ?x59379 l_0_17_72)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x59377 (* ?x59376 l_0_17_71)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x59374 (* ?x59373 l_0_17_70)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x59364 (* ?x59363 l_0_17_51)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x59361 (* ?x59360 l_0_17_50)))
 (let ((?x62411 (+ (+ (- (- (* (* (- 6.0) l_0_17_46) l_0_17_49) ?x59361) ?x59364) ?x59374) ?x59377)))
 (= (+ ?x62411 ?x59380) 0.0)))))))))))))
(assert
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x61379 (* ?x59379 l_0_17_76)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x61377 (* ?x59376 l_0_17_75)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x61375 (* ?x59373 l_0_17_74)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x61372 (* ?x59363 l_0_17_55)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x61370 (* ?x59360 l_0_17_54)))
 (let ((?x62419 (+ (+ (- (- (* (* (- 6.0) l_0_17_46) l_0_17_53) ?x61370) ?x61372) ?x61375) ?x61377)))
 (= (+ ?x62419 ?x61379) 0.0)))))))))))))
(assert
 (let ((?x59379 (* 6.0 l_0_17_69)))
 (let ((?x61463 (* ?x59379 l_0_17_81)))
 (let ((?x59376 (* 6.0 l_0_17_68)))
 (let ((?x61461 (* ?x59376 l_0_17_80)))
 (let ((?x59373 (* 6.0 l_0_17_67)))
 (let ((?x61459 (* ?x59373 l_0_17_79)))
 (let ((?x59363 (* 6.0 l_0_17_48)))
 (let ((?x61456 (* ?x59363 l_0_17_60)))
 (let ((?x59360 (* 6.0 l_0_17_47)))
 (let ((?x61454 (* ?x59360 l_0_17_59)))
 (let ((?x62424 (+ (+ (- (- (* (* (- 6.0) l_0_17_46) l_0_17_58) ?x61454) ?x61456) ?x61459) ?x61461)))
 (= (+ ?x62424 ?x61463) 0.0)))))))))))))
(assert
 (let ((?x59467 (* l_0_17_73 l_0_17_73)))
 (let ((?x59468 (* 3.0 ?x59467)))
 (let ((?x59464 (* l_0_17_72 l_0_17_72)))
 (let ((?x59465 (* 3.0 ?x59464)))
 (let ((?x59461 (* l_0_17_71 l_0_17_71)))
 (let ((?x59462 (* 3.0 ?x59461)))
 (let ((?x59458 (* l_0_17_70 l_0_17_70)))
 (let ((?x59459 (* 3.0 ?x59458)))
 (let ((?x59453 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x59450 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x59447 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x62434 (+ (- (- (- (* (* (- 3.0) l_0_17_49) l_0_17_49) ?x59447) ?x59450) ?x59453) ?x59459)))
 (= (+ (+ (+ ?x62434 ?x59462) ?x59465) ?x59468) 0.0))))))))))))))
(assert
 (let ((?x59590 (* 6.0 l_0_17_73)))
 (let ((?x59591 (* ?x59590 l_0_17_77)))
 (let ((?x59587 (* 6.0 l_0_17_72)))
 (let ((?x59588 (* ?x59587 l_0_17_76)))
 (let ((?x59584 (* 6.0 l_0_17_71)))
 (let ((?x59585 (* ?x59584 l_0_17_75)))
 (let ((?x59581 (* 6.0 l_0_17_70)))
 (let ((?x59582 (* ?x59581 l_0_17_74)))
 (let ((?x59578 (* 6.0 l_0_17_52)))
 (let ((?x59579 (* ?x59578 l_0_17_56)))
 (let ((?x59575 (* 6.0 l_0_17_51)))
 (let ((?x59576 (* ?x59575 l_0_17_55)))
 (let ((?x59572 (* 6.0 l_0_17_50)))
 (let ((?x59573 (* ?x59572 l_0_17_54)))
 (let ((?x62445 (+ (- (- (- (* (* (- 6.0) l_0_17_49) l_0_17_53) ?x59573) ?x59576) ?x59579) ?x59582)))
 (= (+ (+ (+ ?x62445 ?x59585) ?x59588) ?x59591) 0.0)))))))))))))))))
(assert
 (let ((?x59590 (* 6.0 l_0_17_73)))
 (let ((?x59732 (* ?x59590 l_0_17_82)))
 (let ((?x59587 (* 6.0 l_0_17_72)))
 (let ((?x59730 (* ?x59587 l_0_17_81)))
 (let ((?x59584 (* 6.0 l_0_17_71)))
 (let ((?x59728 (* ?x59584 l_0_17_80)))
 (let ((?x59581 (* 6.0 l_0_17_70)))
 (let ((?x59726 (* ?x59581 l_0_17_79)))
 (let ((?x59578 (* 6.0 l_0_17_52)))
 (let ((?x59724 (* ?x59578 l_0_17_61)))
 (let ((?x59575 (* 6.0 l_0_17_51)))
 (let ((?x59722 (* ?x59575 l_0_17_60)))
 (let ((?x59572 (* 6.0 l_0_17_50)))
 (let ((?x59720 (* ?x59572 l_0_17_59)))
 (let ((?x62459 (+ (- (- (- (* (* (- 6.0) l_0_17_49) l_0_17_58) ?x59720) ?x59722) ?x59724) ?x59726)))
 (= (+ (+ (+ ?x62459 ?x59728) ?x59730) ?x59732) 0.0)))))))))))))))))
(assert
 (let ((?x58321 (* l_0_17_78 l_0_17_78)))
 (let ((?x61548 (* 3.0 ?x58321)))
 (let ((?x58318 (* l_0_17_77 l_0_17_77)))
 (let ((?x61546 (* 3.0 ?x58318)))
 (let ((?x58315 (* l_0_17_76 l_0_17_76)))
 (let ((?x61544 (* 3.0 ?x58315)))
 (let ((?x58312 (* l_0_17_75 l_0_17_75)))
 (let ((?x61542 (* 3.0 ?x58312)))
 (let ((?x58309 (* l_0_17_74 l_0_17_74)))
 (let ((?x61540 (* 3.0 ?x58309)))
 (let ((?x61538 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x61535 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x61532 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x61529 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x62472 (- (- (- (- (* (* (- 3.0) l_0_17_53) l_0_17_53) ?x61529) ?x61532) ?x61535) ?x61538)))
 (= (+ (+ (+ (+ (+ ?x62472 ?x61540) ?x61542) ?x61544) ?x61546) ?x61548) 0.0)))))))))))))))))
(assert
 (let ((?x61660 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x61657 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x61654 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x61651 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x61648 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x61645 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x61642 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x61639 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x61636 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x62485 (- (- (- (- (* (* (- 6.0) l_0_17_53) l_0_17_58) ?x61636) ?x61639) ?x61642) ?x61645)))
 (= (+ (+ (+ (+ (+ ?x62485 ?x61648) ?x61651) ?x61654) ?x61657) ?x61660) 0.0))))))))))))
(assert
 (let ((?x61801 (* l_0_17_84 l_0_17_84)))
 (let ((?x61802 (* 3.0 ?x61801)))
 (let ((?x61798 (* l_0_17_83 l_0_17_83)))
 (let ((?x61799 (* 3.0 ?x61798)))
 (let ((?x61795 (* l_0_17_82 l_0_17_82)))
 (let ((?x61796 (* 3.0 ?x61795)))
 (let ((?x61792 (* l_0_17_81 l_0_17_81)))
 (let ((?x61793 (* 3.0 ?x61792)))
 (let ((?x61789 (* l_0_17_80 l_0_17_80)))
 (let ((?x61790 (* 3.0 ?x61789)))
 (let ((?x61786 (* l_0_17_79 l_0_17_79)))
 (let ((?x61787 (* 3.0 ?x61786)))
 (let ((?x61784 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x61781 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x61778 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x61775 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x61772 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x62500 (- (- (- (- (* (* (- 3.0) l_0_17_58) l_0_17_58) ?x61772) ?x61775) ?x61778) ?x61781)))
 (let ((?x62507 (+ (+ (+ (+ (+ (+ (- ?x62500 ?x61784) ?x61787) ?x61790) ?x61793) ?x61796) ?x61799) ?x61802)))
 (= ?x62507 0.0)))))))))))))))))))))
(assert
 (let ((?x58687 (* l_0_17_69 l_0_17_69)))
 (let ((?x58684 (* l_0_17_68 l_0_17_68)))
 (let ((?x58681 (* l_0_17_67 l_0_17_67)))
 (let ((?x58736 (* l_0_17_48 l_0_17_48)))
 (let ((?x62513 (- (+ (+ (* l_0_17_46 l_0_17_46) (* l_0_17_47 l_0_17_47)) ?x58736) ?x58681)))
 (= (- (- ?x62513 ?x58684) ?x58687) 0.0)))))))
(assert
 (let ((?x62552 (* l_0_17_90 l_0_17_90)))
 (let ((?x62550 (* l_0_17_89 l_0_17_89)))
 (let ((?x62548 (* l_0_17_88 l_0_17_88)))
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x58926 (* ?x58925 l_0_17_76)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x58923 (* ?x58922 l_0_17_75)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x58920 (* ?x58919 l_0_17_74)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x58915 (* ?x58914 l_0_17_55)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x58912 (* ?x58911 l_0_17_54)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x58909 (* ?x58908 l_0_17_53)))
 (let ((?x62540 (* l_0_17_174 l_0_17_174)))
 (let ((?x62538 (* l_0_17_173 l_0_17_173)))
 (let ((?x62536 (* l_0_17_172 l_0_17_172)))
 (let ((?x62534 (* l_0_17_153 l_0_17_153)))
 (let ((?x62532 (* l_0_17_152 l_0_17_152)))
 (let ((?x62530 (* l_0_17_151 l_0_17_151)))
 (let ((?x62528 (* l_0_17_111 l_0_17_111)))
 (let ((?x62529 (+ (+ (* l_0_17_109 l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x62528)))
 (let ((?x62542 (+ (+ (+ (+ (- (- (- ?x62529 ?x62530) ?x62532) ?x62534) ?x62536) ?x62538) ?x62540) ?x58909)))
 (let ((?x62551 (- (- (- (- (- (+ (+ ?x62542 ?x58912) ?x58915) ?x58920) ?x58923) ?x58926) ?x62548) ?x62550)))
 (= (- ?x62551 ?x62552) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x58925 (* 2.0 l_0_17_69)))
 (let ((?x61947 (* ?x58925 l_0_17_81)))
 (let ((?x58922 (* 2.0 l_0_17_68)))
 (let ((?x61945 (* ?x58922 l_0_17_80)))
 (let ((?x58919 (* 2.0 l_0_17_67)))
 (let ((?x61943 (* ?x58919 l_0_17_79)))
 (let ((?x58914 (* 2.0 l_0_17_48)))
 (let ((?x61939 (* ?x58914 l_0_17_60)))
 (let ((?x58911 (* 2.0 l_0_17_47)))
 (let ((?x61937 (* ?x58911 l_0_17_59)))
 (let ((?x58908 (* 2.0 l_0_17_46)))
 (let ((?x61935 (* ?x58908 l_0_17_58)))
 (let ((?x16769 (* l_0_17_132 l_0_17_132)))
 (let ((?x52199 (- (- (* (- l_0_17_130) l_0_17_130) (* l_0_17_131 l_0_17_131)) ?x16769)))
 (= (- (- (- (+ (+ (+ ?x52199 ?x61935) ?x61937) ?x61939) ?x61943) ?x61945) ?x61947) 0.0))))))))))))))))
(assert
 (let ((?x60583 (* 2.0 l_0_17_90)))
 (let ((?x62598 (* ?x60583 l_0_17_97)))
 (let ((?x60580 (* 2.0 l_0_17_89)))
 (let ((?x62596 (* ?x60580 l_0_17_96)))
 (let ((?x60577 (* 2.0 l_0_17_88)))
 (let ((?x62594 (* ?x60577 l_0_17_95)))
 (let ((?x58321 (* l_0_17_78 l_0_17_78)))
 (let ((?x58318 (* l_0_17_77 l_0_17_77)))
 (let ((?x58315 (* l_0_17_76 l_0_17_76)))
 (let ((?x58312 (* l_0_17_75 l_0_17_75)))
 (let ((?x58309 (* l_0_17_74 l_0_17_74)))
 (let ((?x58385 (* l_0_17_57 l_0_17_57)))
 (let ((?x58381 (* l_0_17_56 l_0_17_56)))
 (let ((?x13296 (* l_0_17_55 l_0_17_55)))
 (let ((?x58377 (* l_0_17_54 l_0_17_54)))
 (let ((?x45757 (* l_0_17_53 l_0_17_53)))
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x62582 (* ?x60560 l_0_17_181)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x62580 (* ?x60557 l_0_17_180)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x62578 (* ?x60554 l_0_17_179)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x62576 (* ?x60551 l_0_17_160)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x62574 (* ?x60548 l_0_17_159)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x62572 (* ?x60545 l_0_17_158)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x62570 (* ?x15252 l_0_17_118)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x52299 (* ?x49437 l_0_17_117)))
 (let ((?x62575 (- (- (+ (+ (* (* 2.0 l_0_17_109) l_0_17_116) ?x52299) ?x62570) ?x62572) ?x62574)))
 (let ((?x62586 (+ (+ (+ (+ (+ (+ (- ?x62575 ?x62576) ?x62578) ?x62580) ?x62582) ?x45757) ?x58377) ?x13296)))
 (let ((?x62593 (- (- (- (- (- (+ (+ ?x62586 ?x58381) ?x58385) ?x58309) ?x58312) ?x58315) ?x58318) ?x58321)))
 (= (- (- (- ?x62593 ?x62594) ?x62596) ?x62598) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62116 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x62113 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x62110 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x62107 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x62104 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x62101 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x62098 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x62095 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x62092 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x62089 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x62654 (* ?x60560 l_0_17_186)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x62652 (* ?x60557 l_0_17_185)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x62650 (* ?x60554 l_0_17_184)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x62648 (* ?x60551 l_0_17_165)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x62646 (* ?x60548 l_0_17_164)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x62644 (* ?x60545 l_0_17_163)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x61358 (* ?x59342 l_0_17_139)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x61356 (* ?x59339 l_0_17_138)))
 (let ((?x59336 (* 2.0 l_0_17_130)))
 (let ((?x61354 (* ?x59336 l_0_17_137)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x62639 (* ?x15252 l_0_17_123)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x62637 (* ?x49437 l_0_17_122)))
 (let ((?x49431 (* 2.0 l_0_17_109)))
 (let ((?x62635 (* ?x49431 l_0_17_121)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x62633 (* ?x60855 l_0_17_90)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x62631 (* ?x60852 l_0_17_89)))
 (let ((?x62638 (+ (+ (- (- (* (* (- 2.0) l_0_17_100) l_0_17_88) ?x62631) ?x62633) ?x62635) ?x62637)))
 (let ((?x62649 (- (- (- (- (- (- (+ ?x62638 ?x62639) ?x61354) ?x61356) ?x61358) ?x62644) ?x62646) ?x62648)))
 (let ((?x62659 (+ (+ (+ (+ (+ (+ (+ ?x62649 ?x62650) ?x62652) ?x62654) ?x62089) ?x62092) ?x62095) ?x62098)))
 (= (- (- (- (- (- (+ ?x62659 ?x62101) ?x62104) ?x62107) ?x62110) ?x62113) ?x62116) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61801 (* l_0_17_84 l_0_17_84)))
 (let ((?x61798 (* l_0_17_83 l_0_17_83)))
 (let ((?x61795 (* l_0_17_82 l_0_17_82)))
 (let ((?x61792 (* l_0_17_81 l_0_17_81)))
 (let ((?x61789 (* l_0_17_80 l_0_17_80)))
 (let ((?x61786 (* l_0_17_79 l_0_17_79)))
 (let ((?x50904 (* l_0_17_63 l_0_17_63)))
 (let ((?x50901 (* l_0_17_62 l_0_17_62)))
 (let ((?x40035 (* l_0_17_61 l_0_17_61)))
 (let ((?x37232 (* l_0_17_60 l_0_17_60)))
 (let ((?x50806 (* l_0_17_59 l_0_17_59)))
 (let ((?x50800 (* l_0_17_58 l_0_17_58)))
 (let ((?x59342 (* 2.0 l_0_17_132)))
 (let ((?x61437 (* ?x59342 l_0_17_144)))
 (let ((?x59339 (* 2.0 l_0_17_131)))
 (let ((?x61435 (* ?x59339 l_0_17_143)))
 (let ((?x62699 (+ (+ (- (- (* (* (- 2.0) l_0_17_130) l_0_17_142) ?x61435) ?x61437) ?x50800) ?x50806)))
 (let ((?x62706 (- (- (- (+ (+ (+ (+ ?x62699 ?x37232) ?x40035) ?x50901) ?x50904) ?x61786) ?x61789) ?x61792)))
 (= (- (- (- ?x62706 ?x61795) ?x61798) ?x61801) 0.0))))))))))))))))))))
(assert
 (let ((?x62745 (* l_0_17_99 l_0_17_99)))
 (let ((?x62743 (* l_0_17_98 l_0_17_98)))
 (let ((?x62741 (* l_0_17_97 l_0_17_97)))
 (let ((?x62739 (* l_0_17_96 l_0_17_96)))
 (let ((?x62737 (* l_0_17_95 l_0_17_95)))
 (let ((?x62735 (* l_0_17_183 l_0_17_183)))
 (let ((?x62733 (* l_0_17_182 l_0_17_182)))
 (let ((?x62731 (* l_0_17_181 l_0_17_181)))
 (let ((?x62729 (* l_0_17_180 l_0_17_180)))
 (let ((?x62727 (* l_0_17_179 l_0_17_179)))
 (let ((?x62725 (* l_0_17_162 l_0_17_162)))
 (let ((?x62723 (* l_0_17_161 l_0_17_161)))
 (let ((?x62721 (* l_0_17_160 l_0_17_160)))
 (let ((?x62719 (* l_0_17_159 l_0_17_159)))
 (let ((?x62717 (* l_0_17_158 l_0_17_158)))
 (let ((?x62715 (* l_0_17_120 l_0_17_120)))
 (let ((?x62713 (* l_0_17_119 l_0_17_119)))
 (let ((?x52471 (* l_0_17_118 l_0_17_118)))
 (let ((?x52467 (+ (+ (* l_0_17_116 l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x52471)))
 (let ((?x62726 (- (- (- (- (- (+ (+ ?x52467 ?x62713) ?x62715) ?x62717) ?x62719) ?x62721) ?x62723) ?x62725)))
 (let ((?x62740 (- (- (+ (+ (+ (+ (+ ?x62726 ?x62727) ?x62729) ?x62731) ?x62733) ?x62735) ?x62737) ?x62739)))
 (= (- (- (- ?x62740 ?x62741) ?x62743) ?x62745) 0.0)))))))))))))))))))))))
(assert
 (let ((?x62803 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62800 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62797 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62794 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62791 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62788 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62785 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62782 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62779 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62776 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x61513 (* l_0_17_141 l_0_17_141)))
 (let ((?x61511 (* l_0_17_140 l_0_17_140)))
 (let ((?x61508 (* l_0_17_139 l_0_17_139)))
 (let ((?x61506 (* l_0_17_138 l_0_17_138)))
 (let ((?x61504 (* l_0_17_137 l_0_17_137)))
 (let ((?x62768 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x62765 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62762 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62759 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x52481 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x19475 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x60858 (* 2.0 l_0_17_103)))
 (let ((?x52412 (* ?x60858 l_0_17_98)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x19469 (* ?x60855 l_0_17_97)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x51304 (* ?x60852 l_0_17_96)))
 (let ((?x52477 (- (- (- (- (* (* (- 2.0) l_0_17_100) l_0_17_95) ?x51304) ?x19469) ?x52412) ?x19475)))
 (let ((?x62771 (- (- (+ (+ (+ (+ (+ ?x52477 ?x52481) ?x62759) ?x62762) ?x62765) ?x62768) ?x61504) ?x61506)))
 (let ((?x62786 (- (- (- (- (- (- (- ?x62771 ?x61508) ?x61511) ?x61513) ?x62776) ?x62779) ?x62782) ?x62785)))
 (= (+ (+ (+ (+ (+ (- ?x62786 ?x62788) ?x62791) ?x62794) ?x62797) ?x62800) ?x62803) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x62894 (* l_0_17_189 l_0_17_189)))
 (let ((?x62892 (* l_0_17_188 l_0_17_188)))
 (let ((?x62890 (* l_0_17_187 l_0_17_187)))
 (let ((?x62888 (* l_0_17_186 l_0_17_186)))
 (let ((?x62886 (* l_0_17_185 l_0_17_185)))
 (let ((?x62884 (* l_0_17_184 l_0_17_184)))
 (let ((?x62882 (* l_0_17_168 l_0_17_168)))
 (let ((?x62880 (* l_0_17_167 l_0_17_167)))
 (let ((?x62878 (* l_0_17_166 l_0_17_166)))
 (let ((?x62876 (* l_0_17_165 l_0_17_165)))
 (let ((?x62874 (* l_0_17_164 l_0_17_164)))
 (let ((?x62872 (* l_0_17_163 l_0_17_163)))
 (let ((?x61608 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61605 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61599 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61596 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61593 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x62865 (* l_0_17_126 l_0_17_126)))
 (let ((?x62863 (* l_0_17_125 l_0_17_125)))
 (let ((?x62861 (* l_0_17_124 l_0_17_124)))
 (let ((?x62859 (* l_0_17_123 l_0_17_123)))
 (let ((?x62857 (* l_0_17_122 l_0_17_122)))
 (let ((?x62855 (* l_0_17_121 l_0_17_121)))
 (let ((?x62853 (* l_0_17_105 l_0_17_105)))
 (let ((?x62851 (* l_0_17_104 l_0_17_104)))
 (let ((?x62849 (* l_0_17_103 l_0_17_103)))
 (let ((?x62847 (* l_0_17_102 l_0_17_102)))
 (let ((?x62848 (- (- (* (- l_0_17_100) l_0_17_100) (* l_0_17_101 l_0_17_101)) ?x62847)))
 (let ((?x62862 (+ (+ (+ (+ (- (- (- ?x62848 ?x62849) ?x62851) ?x62853) ?x62855) ?x62857) ?x62859) ?x62861)))
 (let ((?x62871 (- (- (- (- (- (+ (+ ?x62862 ?x62863) ?x62865) ?x61593) ?x61596) ?x61599) ?x61605) ?x61608)))
 (let ((?x62885 (+ (- (- (- (- (- (- ?x62871 ?x62872) ?x62874) ?x62876) ?x62878) ?x62880) ?x62882) ?x62884)))
 (= (+ (+ (+ (+ (+ ?x62885 ?x62886) ?x62888) ?x62890) ?x62892) ?x62894) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x61082 (* l_0_17_85 l_0_17_85)))
 (let ((?x61066 (* l_0_17_169 l_0_17_169)))
 (let ((?x62923 (- (+ (* (- l_0_17_106) l_0_17_106) (* l_0_17_148 l_0_17_148)) ?x61066)))
 (= (+ ?x62923 ?x61082) 0.0)))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61381 (* ?x59593 l_0_17_88)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61362 (* ?x59552 l_0_17_172)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61360 (* ?x59549 l_0_17_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_109) ?x61360) ?x61362) ?x61381) 0.0))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x59594 (* ?x59593 l_0_17_91)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x59553 (* ?x59552 l_0_17_175)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x59550 (* ?x59549 l_0_17_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_112) ?x59550) ?x59553) ?x59594) 0.0))))))))
(assert
 (let ((?x59593 (* 2.0 l_0_17_85)))
 (let ((?x61550 (* ?x59593 l_0_17_95)))
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61518 (* ?x59552 l_0_17_179)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61515 (* ?x59549 l_0_17_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_116) ?x61515) ?x61518) ?x61550) 0.0))))))))
(assert
 (let ((?x59552 (* 2.0 l_0_17_169)))
 (let ((?x61615 (* ?x59552 l_0_17_184)))
 (let ((?x59549 (* 2.0 l_0_17_148)))
 (let ((?x61610 (* ?x59549 l_0_17_163)))
 (let ((?x59528 (* 2.0 l_0_17_106)))
 (let ((?x61583 (* ?x59528 l_0_17_121)))
 (= (- (+ (- (* (* 2.0 l_0_17_100) l_0_17_85) ?x61583) ?x61610) ?x61615) 0.0))))))))
(assert
 (let ((?x62552 (* l_0_17_90 l_0_17_90)))
 (let ((?x62550 (* l_0_17_89 l_0_17_89)))
 (let ((?x62548 (* l_0_17_88 l_0_17_88)))
 (let ((?x62540 (* l_0_17_174 l_0_17_174)))
 (let ((?x62538 (* l_0_17_173 l_0_17_173)))
 (let ((?x62536 (* l_0_17_172 l_0_17_172)))
 (let ((?x62534 (* l_0_17_153 l_0_17_153)))
 (let ((?x62532 (* l_0_17_152 l_0_17_152)))
 (let ((?x62530 (* l_0_17_151 l_0_17_151)))
 (let ((?x62528 (* l_0_17_111 l_0_17_111)))
 (let ((?x62959 (- (- (* (- l_0_17_109) l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x62528)))
 (let ((?x62966 (+ (- (- (- (+ (+ (+ ?x62959 ?x62530) ?x62532) ?x62534) ?x62536) ?x62538) ?x62540) ?x62548)))
 (= (+ (+ ?x62966 ?x62550) ?x62552) 0.0))))))))))))))
(assert
 (let ((?x60583 (* 2.0 l_0_17_90)))
 (let ((?x60584 (* ?x60583 l_0_17_93)))
 (let ((?x60580 (* 2.0 l_0_17_89)))
 (let ((?x60581 (* ?x60580 l_0_17_92)))
 (let ((?x60577 (* 2.0 l_0_17_88)))
 (let ((?x60578 (* ?x60577 l_0_17_91)))
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x60561 (* ?x60560 l_0_17_177)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x60558 (* ?x60557 l_0_17_176)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x60555 (* ?x60554 l_0_17_175)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x60552 (* ?x60551 l_0_17_156)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x60549 (* ?x60548 l_0_17_155)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x60546 (* ?x60545 l_0_17_154)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x49460 (* ?x15252 l_0_17_114)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x49453 (* ?x49437 l_0_17_113)))
 (let ((?x62978 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_112) ?x49453) ?x49460) ?x60546) ?x60549)))
 (let ((?x62985 (+ (+ (+ (- (- (- (+ ?x62978 ?x60552) ?x60555) ?x60558) ?x60561) ?x60578) ?x60581) ?x60584)))
 (= ?x62985 0.0))))))))))))))))))))))))))
(assert
 (let ((?x60583 (* 2.0 l_0_17_90)))
 (let ((?x62598 (* ?x60583 l_0_17_97)))
 (let ((?x60580 (* 2.0 l_0_17_89)))
 (let ((?x62596 (* ?x60580 l_0_17_96)))
 (let ((?x60577 (* 2.0 l_0_17_88)))
 (let ((?x62594 (* ?x60577 l_0_17_95)))
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x62582 (* ?x60560 l_0_17_181)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x62580 (* ?x60557 l_0_17_180)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x62578 (* ?x60554 l_0_17_179)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x62576 (* ?x60551 l_0_17_160)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x62574 (* ?x60548 l_0_17_159)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x62572 (* ?x60545 l_0_17_158)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x62570 (* ?x15252 l_0_17_118)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x52299 (* ?x49437 l_0_17_117)))
 (let ((?x62993 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_116) ?x52299) ?x62570) ?x62572) ?x62574)))
 (let ((?x63000 (+ (+ (+ (- (- (- (+ ?x62993 ?x62576) ?x62578) ?x62580) ?x62582) ?x62594) ?x62596) ?x62598)))
 (= ?x63000 0.0))))))))))))))))))))))))))
(assert
 (let ((?x60560 (* 2.0 l_0_17_174)))
 (let ((?x62654 (* ?x60560 l_0_17_186)))
 (let ((?x60557 (* 2.0 l_0_17_173)))
 (let ((?x62652 (* ?x60557 l_0_17_185)))
 (let ((?x60554 (* 2.0 l_0_17_172)))
 (let ((?x62650 (* ?x60554 l_0_17_184)))
 (let ((?x60551 (* 2.0 l_0_17_153)))
 (let ((?x62648 (* ?x60551 l_0_17_165)))
 (let ((?x60548 (* 2.0 l_0_17_152)))
 (let ((?x62646 (* ?x60548 l_0_17_164)))
 (let ((?x60545 (* 2.0 l_0_17_151)))
 (let ((?x62644 (* ?x60545 l_0_17_163)))
 (let ((?x15252 (* 2.0 l_0_17_111)))
 (let ((?x62639 (* ?x15252 l_0_17_123)))
 (let ((?x49437 (* 2.0 l_0_17_110)))
 (let ((?x62637 (* ?x49437 l_0_17_122)))
 (let ((?x49431 (* 2.0 l_0_17_109)))
 (let ((?x62635 (* ?x49431 l_0_17_121)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x62633 (* ?x60855 l_0_17_90)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x62631 (* ?x60852 l_0_17_89)))
 (let ((?x52729 (- (- (+ (+ (* (* 2.0 l_0_17_100) l_0_17_88) ?x62631) ?x62633) ?x62635) ?x62637)))
 (let ((?x52737 (- (- (- (+ (+ (+ (- ?x52729 ?x62639) ?x62644) ?x62646) ?x62648) ?x62650) ?x62652) ?x62654)))
 (= ?x52737 0.0))))))))))))))))))))))))))
(assert
 (let ((?x60693 (* l_0_17_94 l_0_17_94)))
 (let ((?x60691 (* l_0_17_93 l_0_17_93)))
 (let ((?x60689 (* l_0_17_92 l_0_17_92)))
 (let ((?x60687 (* l_0_17_91 l_0_17_91)))
 (let ((?x60673 (* l_0_17_178 l_0_17_178)))
 (let ((?x60671 (* l_0_17_177 l_0_17_177)))
 (let ((?x60669 (* l_0_17_176 l_0_17_176)))
 (let ((?x60667 (* l_0_17_175 l_0_17_175)))
 (let ((?x60665 (* l_0_17_157 l_0_17_157)))
 (let ((?x60663 (* l_0_17_156 l_0_17_156)))
 (let ((?x60661 (* l_0_17_155 l_0_17_155)))
 (let ((?x60659 (* l_0_17_154 l_0_17_154)))
 (let ((?x60653 (* l_0_17_115 l_0_17_115)))
 (let ((?x60651 (* l_0_17_114 l_0_17_114)))
 (let ((?x41448 (- (- (* (- l_0_17_112) l_0_17_112) (* l_0_17_113 l_0_17_113)) ?x60651)))
 (let ((?x63005 (- (- (+ (+ (+ (+ (- ?x41448 ?x60653) ?x60659) ?x60661) ?x60663) ?x60665) ?x60667) ?x60669)))
 (= (+ (+ (+ (+ (- (- ?x63005 ?x60671) ?x60673) ?x60687) ?x60689) ?x60691) ?x60693) 0.0))))))))))))))))))
(assert
 (let ((?x60798 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x60795 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x60792 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x60789 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x60780 (* 2.0 l_0_17_178)))
 (let ((?x60781 (* ?x60780 l_0_17_182)))
 (let ((?x60777 (* 2.0 l_0_17_177)))
 (let ((?x60778 (* ?x60777 l_0_17_181)))
 (let ((?x60774 (* 2.0 l_0_17_176)))
 (let ((?x60775 (* ?x60774 l_0_17_180)))
 (let ((?x60771 (* 2.0 l_0_17_175)))
 (let ((?x60772 (* ?x60771 l_0_17_179)))
 (let ((?x60768 (* 2.0 l_0_17_157)))
 (let ((?x60769 (* ?x60768 l_0_17_161)))
 (let ((?x60765 (* 2.0 l_0_17_156)))
 (let ((?x60766 (* ?x60765 l_0_17_160)))
 (let ((?x60762 (* 2.0 l_0_17_155)))
 (let ((?x60763 (* ?x60762 l_0_17_159)))
 (let ((?x60759 (* 2.0 l_0_17_154)))
 (let ((?x60760 (* ?x60759 l_0_17_158)))
 (let ((?x60752 (* 2.0 l_0_17_115)))
 (let ((?x60753 (* ?x60752 l_0_17_119)))
 (let ((?x60749 (* 2.0 l_0_17_114)))
 (let ((?x60750 (* ?x60749 l_0_17_118)))
 (let ((?x60746 (* 2.0 l_0_17_113)))
 (let ((?x60747 (* ?x60746 l_0_17_117)))
 (let ((?x63027 (+ (- (- (- (* (* (- 2.0) l_0_17_112) l_0_17_116) ?x60747) ?x60750) ?x60753) ?x60760)))
 (let ((?x63034 (- (- (- (- (+ (+ (+ ?x63027 ?x60763) ?x60766) ?x60769) ?x60772) ?x60775) ?x60778) ?x60781)))
 (= (+ (+ (+ (+ ?x63034 ?x60789) ?x60792) ?x60795) ?x60798) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x60780 (* 2.0 l_0_17_178)))
 (let ((?x60899 (* ?x60780 l_0_17_187)))
 (let ((?x60777 (* 2.0 l_0_17_177)))
 (let ((?x60897 (* ?x60777 l_0_17_186)))
 (let ((?x60774 (* 2.0 l_0_17_176)))
 (let ((?x60895 (* ?x60774 l_0_17_185)))
 (let ((?x60771 (* 2.0 l_0_17_175)))
 (let ((?x60893 (* ?x60771 l_0_17_184)))
 (let ((?x60768 (* 2.0 l_0_17_157)))
 (let ((?x60891 (* ?x60768 l_0_17_166)))
 (let ((?x60765 (* 2.0 l_0_17_156)))
 (let ((?x60889 (* ?x60765 l_0_17_165)))
 (let ((?x60762 (* 2.0 l_0_17_155)))
 (let ((?x60887 (* ?x60762 l_0_17_164)))
 (let ((?x60759 (* 2.0 l_0_17_154)))
 (let ((?x60885 (* ?x60759 l_0_17_163)))
 (let ((?x60752 (* 2.0 l_0_17_115)))
 (let ((?x60869 (* ?x60752 l_0_17_124)))
 (let ((?x60749 (* 2.0 l_0_17_114)))
 (let ((?x60867 (* ?x60749 l_0_17_123)))
 (let ((?x60746 (* 2.0 l_0_17_113)))
 (let ((?x60865 (* ?x60746 l_0_17_122)))
 (let ((?x49252 (* 2.0 l_0_17_112)))
 (let ((?x60863 (* ?x49252 l_0_17_121)))
 (let ((?x60858 (* 2.0 l_0_17_103)))
 (let ((?x60859 (* ?x60858 l_0_17_94)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x60856 (* ?x60855 l_0_17_93)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x60853 (* ?x60852 l_0_17_92)))
 (let ((?x52600 (- (+ (+ (+ (* (* 2.0 l_0_17_100) l_0_17_91) ?x60853) ?x60856) ?x60859) ?x60863)))
 (let ((?x20219 (+ (+ (+ (+ (- (- (- ?x52600 ?x60865) ?x60867) ?x60869) ?x60885) ?x60887) ?x60889) ?x60891)))
 (= (- (- (- (- ?x20219 ?x60893) ?x60895) ?x60897) ?x60899) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62745 (* l_0_17_99 l_0_17_99)))
 (let ((?x62743 (* l_0_17_98 l_0_17_98)))
 (let ((?x62741 (* l_0_17_97 l_0_17_97)))
 (let ((?x62739 (* l_0_17_96 l_0_17_96)))
 (let ((?x62737 (* l_0_17_95 l_0_17_95)))
 (let ((?x62735 (* l_0_17_183 l_0_17_183)))
 (let ((?x62733 (* l_0_17_182 l_0_17_182)))
 (let ((?x62731 (* l_0_17_181 l_0_17_181)))
 (let ((?x62729 (* l_0_17_180 l_0_17_180)))
 (let ((?x62727 (* l_0_17_179 l_0_17_179)))
 (let ((?x62725 (* l_0_17_162 l_0_17_162)))
 (let ((?x62723 (* l_0_17_161 l_0_17_161)))
 (let ((?x62721 (* l_0_17_160 l_0_17_160)))
 (let ((?x62719 (* l_0_17_159 l_0_17_159)))
 (let ((?x62717 (* l_0_17_158 l_0_17_158)))
 (let ((?x62715 (* l_0_17_120 l_0_17_120)))
 (let ((?x62713 (* l_0_17_119 l_0_17_119)))
 (let ((?x52471 (* l_0_17_118 l_0_17_118)))
 (let ((?x63068 (- (- (* (- l_0_17_116) l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x52471)))
 (let ((?x63075 (+ (+ (+ (+ (+ (- (- ?x63068 ?x62713) ?x62715) ?x62717) ?x62719) ?x62721) ?x62723) ?x62725)))
 (let ((?x63082 (+ (+ (- (- (- (- (- ?x63075 ?x62727) ?x62729) ?x62731) ?x62733) ?x62735) ?x62737) ?x62739)))
 (= (+ (+ (+ ?x63082 ?x62741) ?x62743) ?x62745) 0.0)))))))))))))))))))))))
(assert
 (let ((?x62803 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62800 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62797 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62794 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62791 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62788 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62785 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62782 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62779 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62776 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x62768 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x62765 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62762 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62759 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x52481 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x19475 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x60858 (* 2.0 l_0_17_103)))
 (let ((?x52412 (* ?x60858 l_0_17_98)))
 (let ((?x60855 (* 2.0 l_0_17_102)))
 (let ((?x19469 (* ?x60855 l_0_17_97)))
 (let ((?x60852 (* 2.0 l_0_17_101)))
 (let ((?x51304 (* ?x60852 l_0_17_96)))
 (let ((?x52847 (+ (+ (+ (+ (* (* 2.0 l_0_17_100) l_0_17_95) ?x51304) ?x19469) ?x52412) ?x19475)))
 (let ((?x63105 (+ (+ (- (- (- (- (- ?x52847 ?x52481) ?x62759) ?x62762) ?x62765) ?x62768) ?x62776) ?x62779)))
 (let ((?x63112 (- (- (- (- (+ (+ (+ ?x63105 ?x62782) ?x62785) ?x62788) ?x62791) ?x62794) ?x62797) ?x62800)))
 (= (- ?x63112 ?x62803) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x62894 (* l_0_17_189 l_0_17_189)))
 (let ((?x62892 (* l_0_17_188 l_0_17_188)))
 (let ((?x62890 (* l_0_17_187 l_0_17_187)))
 (let ((?x62888 (* l_0_17_186 l_0_17_186)))
 (let ((?x62886 (* l_0_17_185 l_0_17_185)))
 (let ((?x62884 (* l_0_17_184 l_0_17_184)))
 (let ((?x62882 (* l_0_17_168 l_0_17_168)))
 (let ((?x62880 (* l_0_17_167 l_0_17_167)))
 (let ((?x62878 (* l_0_17_166 l_0_17_166)))
 (let ((?x62876 (* l_0_17_165 l_0_17_165)))
 (let ((?x62874 (* l_0_17_164 l_0_17_164)))
 (let ((?x62872 (* l_0_17_163 l_0_17_163)))
 (let ((?x62865 (* l_0_17_126 l_0_17_126)))
 (let ((?x62863 (* l_0_17_125 l_0_17_125)))
 (let ((?x62861 (* l_0_17_124 l_0_17_124)))
 (let ((?x62859 (* l_0_17_123 l_0_17_123)))
 (let ((?x62857 (* l_0_17_122 l_0_17_122)))
 (let ((?x62855 (* l_0_17_121 l_0_17_121)))
 (let ((?x62853 (* l_0_17_105 l_0_17_105)))
 (let ((?x62851 (* l_0_17_104 l_0_17_104)))
 (let ((?x62849 (* l_0_17_103 l_0_17_103)))
 (let ((?x62847 (* l_0_17_102 l_0_17_102)))
 (let ((?x63125 (+ (+ (* l_0_17_100 l_0_17_100) (* l_0_17_101 l_0_17_101)) ?x62847)))
 (let ((?x63132 (- (- (- (- (+ (+ (+ ?x63125 ?x62849) ?x62851) ?x62853) ?x62855) ?x62857) ?x62859) ?x62861)))
 (let ((?x63139 (+ (+ (+ (+ (+ (- (- ?x63132 ?x62863) ?x62865) ?x62872) ?x62874) ?x62876) ?x62878) ?x62880)))
 (let ((?x63146 (- (- (- (- (- (- (+ ?x63139 ?x62882) ?x62884) ?x62886) ?x62888) ?x62890) ?x62892) ?x62894)))
 (= ?x63146 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x61736 (* l_0_17_147 l_0_17_147)))
 (let ((?x61734 (* l_0_17_146 l_0_17_146)))
 (let ((?x61732 (* l_0_17_145 l_0_17_145)))
 (let ((?x61730 (* l_0_17_144 l_0_17_144)))
 (let ((?x31114 (- (- (* (- l_0_17_142) l_0_17_142) (* l_0_17_143 l_0_17_143)) ?x61730)))
 (= (- (- (- ?x31114 ?x61732) ?x61734) ?x61736) 0.0)))))))
(assert
 (>= l_0_17_1 0.0))
(assert
 (>= l_0_17_3 0.0))
(assert
 (>= l_0_17_6 0.0))
(assert
 (>= l_0_17_10 0.0))
(assert
 (>= l_0_17_15 0.0))
(assert
 (>= l_0_17_21 0.0))
(assert
 (>= l_0_17_22 0.0))
(assert
 (>= l_0_17_24 0.0))
(assert
 (>= l_0_17_27 0.0))
(assert
 (>= l_0_17_31 0.0))
(assert
 (>= l_0_17_36 0.0))
(assert
 (>= l_0_17_42 0.0))
(assert
 (>= l_0_17_43 0.0))
(assert
 (>= l_0_17_45 0.0))
(assert
 (>= l_0_17_48 0.0))
(assert
 (>= l_0_17_52 0.0))
(assert
 (>= l_0_17_57 0.0))
(assert
 (>= l_0_17_63 0.0))
(assert
 (>= l_0_17_64 0.0))
(assert
 (>= l_0_17_66 0.0))
(assert
 (>= l_0_17_69 0.0))
(assert
 (>= l_0_17_73 0.0))
(assert
 (>= l_0_17_78 0.0))
(assert
 (>= l_0_17_84 0.0))
(assert
 (>= l_0_17_85 0.0))
(assert
 (>= l_0_17_87 0.0))
(assert
 (>= l_0_17_90 0.0))
(assert
 (>= l_0_17_94 0.0))
(assert
 (>= l_0_17_99 0.0))
(assert
 (>= l_0_17_105 0.0))
(assert
 (>= l_0_17_106 0.0))
(assert
 (>= l_0_17_108 0.0))
(assert
 (>= l_0_17_111 0.0))
(assert
 (>= l_0_17_115 0.0))
(assert
 (>= l_0_17_120 0.0))
(assert
 (>= l_0_17_126 0.0))
(assert
 (>= l_0_17_127 0.0))
(assert
 (>= l_0_17_129 0.0))
(assert
 (>= l_0_17_132 0.0))
(assert
 (>= l_0_17_136 0.0))
(assert
 (>= l_0_17_141 0.0))
(assert
 (>= l_0_17_147 0.0))
(assert
 (>= l_0_17_148 0.0))
(assert
 (>= l_0_17_150 0.0))
(assert
 (>= l_0_17_153 0.0))
(assert
 (>= l_0_17_157 0.0))
(assert
 (>= l_0_17_162 0.0))
(assert
 (>= l_0_17_168 0.0))
(assert
 (>= l_0_17_169 0.0))
(assert
 (>= l_0_17_171 0.0))
(assert
 (>= l_0_17_174 0.0))
(assert
 (>= l_0_17_178 0.0))
(assert
 (>= l_0_17_183 0.0))
(assert
 (>= l_0_17_189 0.0))
(assert
 (>= l_0_17_190 0.0))
(assert
 (>= l_0_17_192 0.0))
(assert
 (>= l_0_17_195 0.0))
(assert
 (>= l_0_17_199 0.0))
(assert
 (>= l_0_17_204 0.0))
(assert
 (>= l_0_17_210 0.0))
(assert
 (>= l_0_17_211 0.0))
(assert
 (>= l_0_17_213 0.0))
(assert
 (>= l_0_17_216 0.0))
(assert
 (>= l_0_17_220 0.0))
(assert
 (>= l_0_17_225 0.0))
(assert
 (>= l_0_17_231 0.0))
(assert
 (>= l_0_17_232 0.0))
(assert
 (>= l_0_17_234 0.0))
(assert
 (>= l_0_17_237 0.0))
(assert
 (>= l_0_17_241 0.0))
(assert
 (>= l_0_17_246 0.0))
(assert
 (>= l_0_17_252 0.0))
(assert
 (>= l_0_17_253 0.0))
(assert
 (>= l_0_17_255 0.0))
(assert
 (>= l_0_17_258 0.0))
(assert
 (>= l_0_17_262 0.0))
(assert
 (>= l_0_17_267 0.0))
(assert
 (>= l_0_17_273 0.0))
(assert
 (>= l_0_17_274 0.0))
(assert
 (>= l_0_17_276 0.0))
(assert
 (>= l_0_17_279 0.0))
(assert
 (>= l_0_17_283 0.0))
(assert
 (>= l_0_17_288 0.0))
(assert
 (>= l_0_17_294 0.0))
(assert
 (let ((?x63261 (* l_0_18_87 l_0_18_87)))
 (let ((?x63259 (* l_0_18_86 l_0_18_86)))
 (let ((?x63256 (* l_0_18_64 l_0_18_64)))
 (let ((?x63257 (* 3.0 ?x63256)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x63254 (* ?x63253 l_0_18_65)))
 (let ((?x63251 (* (* 3.0 l_0_18_43) l_0_18_43)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x63248 (* ?x63247 l_0_18_44)))
 (let ((?x63245 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x63242 (* l_0_18_171 l_0_18_171)))
 (let ((?x63240 (* l_0_18_170 l_0_18_170)))
 (let ((?x63238 (* l_0_18_150 l_0_18_150)))
 (let ((?x63236 (* l_0_18_149 l_0_18_149)))
 (let ((?x63234 (* l_0_18_127 l_0_18_127)))
 (let ((?x63232 (* l_0_18_108 l_0_18_108)))
 (let ((?x63233 (- (- (* 6.0 (* l_0_18_1 l_0_18_1)) (* l_0_18_107 l_0_18_107)) ?x63232)))
 (let ((?x63249 (- (- (- (- (+ (+ (+ ?x63233 ?x63234) ?x63236) ?x63238) ?x63240) ?x63242) ?x63245) ?x63248)))
 (= (+ (+ (+ (+ (+ (- ?x63249 ?x63251) ?x63254) ?x63257) ?x63259) ?x63261) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x63329 (* l_0_18_66 l_0_18_66)))
 (let ((?x63330 (* 3.0 ?x63329)))
 (let ((?x63326 (* l_0_18_65 l_0_18_65)))
 (let ((?x63327 (* 3.0 ?x63326)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x63254 (* ?x63253 l_0_18_65)))
 (let ((?x63321 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (let ((?x63318 (* (* 3.0 l_0_18_44) l_0_18_44)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x63248 (* ?x63247 l_0_18_44)))
 (let ((?x63311 (* l_0_18_295 l_0_18_295)))
 (let ((?x63309 (* l_0_18_274 l_0_18_274)))
 (let ((?x63307 (* l_0_18_253 l_0_18_253)))
 (let ((?x63305 (* l_0_18_232 l_0_18_232)))
 (let ((?x63245 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x63302 (* ?x63301 l_0_18_23)))
 (let ((?x63299 (* l_0_18_211 l_0_18_211)))
 (let ((?x63297 (* l_0_18_190 l_0_18_190)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x63295 (* ?x63294 l_0_18_128)))
 (let ((?x63228 (* l_0_18_1 l_0_18_1)))
 (let ((?x63229 (* 6.0 ?x63228)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x63282 (* ?x42050 l_0_18_2)))
 (let ((?x63306 (- (- (- (- (- (+ (+ ?x63282 ?x63229) ?x63295) ?x63297) ?x63299) ?x63302) ?x63245) ?x63305)))
 (let ((?x63316 (- (- (- (- (- ?x63306 ?x63307) ?x63309) ?x63311) ?x63248) (* (* 1.0 l_0_18_43) l_0_18_43))))
 (let ((?x63325 (+ (+ (- (- ?x63316 ?x63318) ?x63321) ?x63254) (* 1.0 (* l_0_18_64 l_0_18_64)))))
 (= (+ (+ (+ ?x63325 ?x63327) ?x63330) 3.0) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63329 (* l_0_18_66 l_0_18_66)))
 (let ((?x63330 (* 3.0 ?x63329)))
 (let ((?x63326 (* l_0_18_65 l_0_18_65)))
 (let ((?x63327 (* 3.0 ?x63326)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x63398 (* ?x63397 l_0_18_65)))
 (let ((?x63321 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (let ((?x63318 (* (* 3.0 l_0_18_44) l_0_18_44)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x63393 (* ?x63392 l_0_18_44)))
 (let ((?x63389 (* l_0_18_3 l_0_18_3)))
 (let ((?x63390 (* 6.0 ?x63389)))
 (let ((?x63378 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x63372 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x63302 (* ?x63301 l_0_18_23)))
 (let ((?x63364 (* l_0_18_2 l_0_18_2)))
 (let ((?x63365 (* 6.0 ?x63364)))
 (let ((?x63359 (* l_0_18_129 l_0_18_129)))
 (let ((?x63360 (+ (+ (* (* 12.0 l_0_18_1) l_0_18_2) (* l_0_18_128 l_0_18_128)) ?x63359)))
 (let ((?x63369 (- (+ (- ?x63360 (* (* 2.0 l_0_18_190) l_0_18_191)) ?x63365) (* (* 2.0 l_0_18_211) l_0_18_212))))
 (let ((?x63379 (- (- (- (- ?x63369 ?x63302) ?x63372) (* (* 2.0 l_0_18_232) l_0_18_233)) ?x63378)))
 (let ((?x63385 (- (- ?x63379 (* (* 2.0 l_0_18_253) l_0_18_254)) (* (* 2.0 l_0_18_274) l_0_18_275))))
 (let ((?x63395 (- (- (+ (- ?x63385 (* (* 2.0 l_0_18_295) l_0_18_296)) ?x63390) ?x63393) ?x63318)))
 (= (+ (+ (+ (+ (- ?x63395 ?x63321) ?x63398) ?x63327) ?x63330) 3.0) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63389 (* l_0_18_3 l_0_18_3)))
 (let ((?x63390 (* 6.0 ?x63389)))
 (let ((?x63465 (* l_0_18_297 l_0_18_297)))
 (let ((?x63463 (* l_0_18_296 l_0_18_296)))
 (let ((?x63461 (* l_0_18_276 l_0_18_276)))
 (let ((?x63459 (* l_0_18_275 l_0_18_275)))
 (let ((?x63457 (* l_0_18_255 l_0_18_255)))
 (let ((?x63455 (* l_0_18_254 l_0_18_254)))
 (let ((?x63378 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x63452 (* l_0_18_234 l_0_18_234)))
 (let ((?x63450 (* l_0_18_233 l_0_18_233)))
 (let ((?x63372 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x63447 (* l_0_18_213 l_0_18_213)))
 (let ((?x63445 (* l_0_18_212 l_0_18_212)))
 (let ((?x63364 (* l_0_18_2 l_0_18_2)))
 (let ((?x63365 (* 6.0 ?x63364)))
 (let ((?x63442 (* l_0_18_192 l_0_18_192)))
 (let ((?x63446 (- (+ (- (- (- _a_1_) (* l_0_18_191 l_0_18_191)) ?x63442) ?x63365) ?x63445)))
 (let ((?x63458 (- (- (- (- (- (- (- ?x63446 ?x63447) ?x63372) ?x63450) ?x63452) ?x63378) ?x63455) ?x63457)))
 (let ((?x63470 (- (+ (- (- (- (- ?x63458 ?x63459) ?x63461) ?x63463) ?x63465) ?x63390) (* (* 1.0 l_0_18_44) l_0_18_44))))
 (let ((?x63475 (+ (- ?x63470 (* (* 1.0 l_0_18_45) l_0_18_45)) (* 1.0 (* l_0_18_65 l_0_18_65)))))
 (= (+ (+ ?x63475 (* 1.0 (* l_0_18_66 l_0_18_66))) 1.0) 0.0)))))))))))))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x63651 (* ?x63650 l_0_18_96)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x63648 (* ?x63647 l_0_18_95)))
 (let ((?x63615 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x63612 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x63609 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x63606 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x63603 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x63600 (* l_0_18_309 l_0_18_309)))
 (let ((?x63598 (* l_0_18_308 l_0_18_308)))
 (let ((?x63596 (* l_0_18_307 l_0_18_307)))
 (let ((?x63594 (* l_0_18_306 l_0_18_306)))
 (let ((?x63592 (* l_0_18_305 l_0_18_305)))
 (let ((?x63590 (* l_0_18_288 l_0_18_288)))
 (let ((?x63588 (* l_0_18_287 l_0_18_287)))
 (let ((?x63586 (* l_0_18_286 l_0_18_286)))
 (let ((?x63584 (* l_0_18_285 l_0_18_285)))
 (let ((?x63582 (* l_0_18_284 l_0_18_284)))
 (let ((?x63580 (* l_0_18_267 l_0_18_267)))
 (let ((?x63578 (* l_0_18_266 l_0_18_266)))
 (let ((?x63576 (* l_0_18_265 l_0_18_265)))
 (let ((?x63574 (* l_0_18_264 l_0_18_264)))
 (let ((?x63572 (* l_0_18_263 l_0_18_263)))
 (let ((?x63570 (* l_0_18_246 l_0_18_246)))
 (let ((?x63568 (* l_0_18_245 l_0_18_245)))
 (let ((?x63566 (* l_0_18_244 l_0_18_244)))
 (let ((?x63564 (* l_0_18_243 l_0_18_243)))
 (let ((?x63562 (* l_0_18_242 l_0_18_242)))
 (let ((?x63560 (* l_0_18_225 l_0_18_225)))
 (let ((?x63558 (* l_0_18_224 l_0_18_224)))
 (let ((?x63556 (* l_0_18_223 l_0_18_223)))
 (let ((?x63554 (* l_0_18_222 l_0_18_222)))
 (let ((?x63552 (* l_0_18_221 l_0_18_221)))
 (let ((?x63550 (* l_0_18_204 l_0_18_204)))
 (let ((?x63548 (* l_0_18_203 l_0_18_203)))
 (let ((?x63546 (* l_0_18_202 l_0_18_202)))
 (let ((?x63544 (* l_0_18_201 l_0_18_201)))
 (let ((?x63542 (* l_0_18_200 l_0_18_200)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x63540 (* ?x63539 l_0_18_180)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x63537 (* ?x63536 l_0_18_179)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x63534 (* ?x63533 l_0_18_159)))
 (let ((?x63530 (* l_0_18_15 l_0_18_15)))
 (let ((?x63531 (* 6.0 ?x63530)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x63528 (* ?x63527 l_0_18_158)))
 (let ((?x63524 (* l_0_18_14 l_0_18_14)))
 (let ((?x63525 (* 6.0 ?x63524)))
 (let ((?x63521 (* l_0_18_13 l_0_18_13)))
 (let ((?x63522 (* 6.0 ?x63521)))
 (let ((?x63518 (* l_0_18_12 l_0_18_12)))
 (let ((?x63519 (* 6.0 ?x63518)))
 (let ((?x63515 (* l_0_18_11 l_0_18_11)))
 (let ((?x63516 (* 6.0 ?x63515)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x63513 (* ?x63512 l_0_18_117)))
 (let ((?x63517 (+ (+ (+ (- _a_0_) (* (* 2.0 l_0_18_107) l_0_18_116)) ?x63513) ?x63516)))
 (let ((?x63538 (+ (- (+ (- (+ (+ (+ ?x63517 ?x63519) ?x63522) ?x63525) ?x63528) ?x63531) ?x63534) ?x63537)))
 (let ((?x63553 (- (- (- (- (- (- (+ ?x63538 ?x63540) ?x63542) ?x63544) ?x63546) ?x63548) ?x63550) ?x63552)))
 (let ((?x63567 (- (- (- (- (- (- (- ?x63553 ?x63554) ?x63556) ?x63558) ?x63560) ?x63562) ?x63564) ?x63566)))
 (let ((?x63581 (- (- (- (- (- (- (- ?x63567 ?x63568) ?x63570) ?x63572) ?x63574) ?x63576) ?x63578) ?x63580)))
 (let ((?x63595 (- (- (- (- (- (- (- ?x63581 ?x63582) ?x63584) ?x63586) ?x63588) ?x63590) ?x63592) ?x63594)))
 (let ((?x63613 (- (- (- (- (- (- (- ?x63595 ?x63596) ?x63598) ?x63600) ?x63603) ?x63606) ?x63609) ?x63612)))
 (let ((?x63622 (- (- (- ?x63613 ?x63615) (* (* 1.0 l_0_18_53) l_0_18_53)) (* (* 1.0 l_0_18_54) l_0_18_54))))
 (let ((?x63628 (- (- ?x63622 (* (* 1.0 l_0_18_55) l_0_18_55)) (* (* 1.0 l_0_18_56) l_0_18_56))))
 (let ((?x63634 (+ (- ?x63628 (* (* 1.0 l_0_18_57) l_0_18_57)) (* 1.0 (* l_0_18_74 l_0_18_74)))))
 (let ((?x63640 (+ (+ ?x63634 (* 1.0 (* l_0_18_75 l_0_18_75))) (* 1.0 (* l_0_18_76 l_0_18_76)))))
 (let ((?x63646 (+ (+ ?x63640 (* 1.0 (* l_0_18_77 l_0_18_77))) (* 1.0 (* l_0_18_78 l_0_18_78)))))
 (= (- (- ?x63646 ?x63648) ?x63651) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63261 (* l_0_18_87 l_0_18_87)))
 (let ((?x63259 (* l_0_18_86 l_0_18_86)))
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x63822 (* ?x63821 l_0_18_75)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x63819 (* ?x63818 l_0_18_74)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x63816 (* ?x63815 l_0_18_54)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x63813 (* ?x63812 l_0_18_53)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x63792 (* ?x63791 l_0_18_33)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x63783 (* ?x63782 l_0_18_32)))
 (let ((?x63242 (* l_0_18_171 l_0_18_171)))
 (let ((?x63240 (* l_0_18_170 l_0_18_170)))
 (let ((?x63238 (* l_0_18_150 l_0_18_150)))
 (let ((?x63236 (* l_0_18_149 l_0_18_149)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x63764 (* ?x63763 l_0_18_3)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x63761 (* ?x63760 l_0_18_2)))
 (let ((?x63232 (* l_0_18_108 l_0_18_108)))
 (let ((?x63765 (+ (+ (+ (+ (- _a_2_) (* l_0_18_107 l_0_18_107)) ?x63232) ?x63761) ?x63764)))
 (let ((?x63772 (- (+ (+ (- (- ?x63765 ?x63236) ?x63238) ?x63240) ?x63242) (* (* 2.0 l_0_18_191) l_0_18_200))))
 (let ((?x63778 (- (- ?x63772 (* (* 2.0 l_0_18_192) l_0_18_201)) (* (* 2.0 l_0_18_212) l_0_18_221))))
 (let ((?x63787 (- (- (- ?x63778 (* (* 2.0 l_0_18_213) l_0_18_222)) ?x63783) (* (* 2.0 l_0_18_233) l_0_18_242))))
 (let ((?x63796 (- (- (- ?x63787 (* (* 2.0 l_0_18_234) l_0_18_243)) ?x63792) (* (* 2.0 l_0_18_254) l_0_18_263))))
 (let ((?x63802 (- (- ?x63796 (* (* 2.0 l_0_18_255) l_0_18_264)) (* (* 2.0 l_0_18_275) l_0_18_284))))
 (let ((?x63808 (- (- ?x63802 (* (* 2.0 l_0_18_276) l_0_18_285)) (* (* 2.0 l_0_18_296) l_0_18_305))))
 (let ((?x63820 (+ (- (- (- ?x63808 (* (* 2.0 l_0_18_297) l_0_18_306)) ?x63813) ?x63816) ?x63819)))
 (= (- (- (+ ?x63820 ?x63822) ?x63259) ?x63261) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x63943 (* ?x63821 l_0_18_68)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x63941 (* ?x63818 l_0_18_67)))
 (let ((?x63938 (* l_0_18_6 l_0_18_6)))
 (let ((?x63939 (* 6.0 ?x63938)))
 (let ((?x63935 (* l_0_18_5 l_0_18_5)))
 (let ((?x63936 (* 6.0 ?x63935)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x63924 (* ?x63815 l_0_18_47)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x63922 (* ?x63812 l_0_18_46)))
 (let ((?x63919 (* l_0_18_4 l_0_18_4)))
 (let ((?x63920 (* 6.0 ?x63919)))
 (let ((?x63917 (* l_0_18_300 l_0_18_300)))
 (let ((?x63915 (* l_0_18_299 l_0_18_299)))
 (let ((?x63913 (* l_0_18_298 l_0_18_298)))
 (let ((?x63911 (* l_0_18_279 l_0_18_279)))
 (let ((?x63909 (* l_0_18_278 l_0_18_278)))
 (let ((?x63907 (* l_0_18_277 l_0_18_277)))
 (let ((?x63905 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x63902 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x63899 (* l_0_18_258 l_0_18_258)))
 (let ((?x63897 (* l_0_18_257 l_0_18_257)))
 (let ((?x63895 (* l_0_18_256 l_0_18_256)))
 (let ((?x63893 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x63890 (* l_0_18_237 l_0_18_237)))
 (let ((?x63888 (* l_0_18_236 l_0_18_236)))
 (let ((?x63886 (* l_0_18_235 l_0_18_235)))
 (let ((?x63884 (* l_0_18_216 l_0_18_216)))
 (let ((?x63882 (* l_0_18_215 l_0_18_215)))
 (let ((?x63880 (* l_0_18_214 l_0_18_214)))
 (let ((?x63878 (* l_0_18_195 l_0_18_195)))
 (let ((?x63876 (* l_0_18_194 l_0_18_194)))
 (let ((?x63881 (- (- (- (- (- _a_3_) (* l_0_18_193 l_0_18_193)) ?x63876) ?x63878) ?x63880)))
 (let ((?x63896 (- (- (- (- (- (- (- ?x63881 ?x63882) ?x63884) ?x63886) ?x63888) ?x63890) ?x63893) ?x63895)))
 (let ((?x63912 (- (- (- (- (- (- (- ?x63896 ?x63897) ?x63899) ?x63902) ?x63905) ?x63907) ?x63909) ?x63911)))
 (let ((?x63928 (- (+ (+ (+ (- (- (- ?x63912 ?x63913) ?x63915) ?x63917) ?x63920) ?x63922) ?x63924) (* (* 1.0 l_0_18_46) l_0_18_46))))
 (let ((?x63934 (- (- ?x63928 (* (* 1.0 l_0_18_47) l_0_18_47)) (* (* 1.0 l_0_18_48) l_0_18_48))))
 (let ((?x63947 (+ (- (- (+ (+ ?x63934 ?x63936) ?x63939) ?x63941) ?x63943) (* 1.0 (* l_0_18_67 l_0_18_67)))))
 (let ((?x63953 (+ (+ ?x63947 (* 1.0 (* l_0_18_68 l_0_18_68))) (* 1.0 (* l_0_18_69 l_0_18_69)))))
 (= ?x63953 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63329 (* l_0_18_66 l_0_18_66)))
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x63943 (* ?x63821 l_0_18_68)))
 (let ((?x63326 (* l_0_18_65 l_0_18_65)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x63941 (* ?x63818 l_0_18_67)))
 (let ((?x53050 (* l_0_18_45 l_0_18_45)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x63924 (* ?x63815 l_0_18_47)))
 (let ((?x53043 (* l_0_18_44 l_0_18_44)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x63922 (* ?x63812 l_0_18_46)))
 (let ((?x64053 (* 12.0 l_0_18_3)))
 (let ((?x64054 (* ?x64053 l_0_18_5)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x64039 (* ?x63791 l_0_18_26)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x64033 (* ?x63782 l_0_18_25)))
 (let ((?x64026 (* 12.0 l_0_18_2)))
 (let ((?x64027 (* ?x64026 l_0_18_4)))
 (let ((?x64025 (- (- (- _a_4_) (* (* 2.0 l_0_18_191) l_0_18_193)) (* (* 2.0 l_0_18_192) l_0_18_194))))
 (let ((?x64032 (- (- (+ ?x64025 ?x64027) (* (* 2.0 l_0_18_212) l_0_18_214)) (* (* 2.0 l_0_18_213) l_0_18_215))))
 (let ((?x64038 (- (- (- ?x64032 ?x64033) (* (* 2.0 l_0_18_233) l_0_18_235)) (* (* 2.0 l_0_18_234) l_0_18_236))))
 (let ((?x64044 (- (- (- ?x64038 ?x64039) (* (* 2.0 l_0_18_254) l_0_18_256)) (* (* 2.0 l_0_18_255) l_0_18_257))))
 (let ((?x64048 (- (- ?x64044 (* (* 2.0 l_0_18_275) l_0_18_277)) (* (* 2.0 l_0_18_276) l_0_18_278))))
 (let ((?x64052 (- (- ?x64048 (* (* 2.0 l_0_18_296) l_0_18_298)) (* (* 2.0 l_0_18_297) l_0_18_299))))
 (let ((?x64061 (- (+ (+ (- (+ (- (+ ?x64052 ?x64054) ?x63922) ?x53043) ?x63924) ?x53050) ?x63941) ?x63326)))
 (= (- (+ ?x64061 ?x63943) ?x63329) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x64225 (* ?x63650 l_0_18_89)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x64223 (* ?x63647 l_0_18_88)))
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x64221 (* ?x64220 l_0_18_76)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x64218 (* ?x64217 l_0_18_75)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x64215 (* ?x64214 l_0_18_74)))
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x63822 (* ?x63821 l_0_18_75)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x63819 (* ?x63818 l_0_18_74)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x64210 (* ?x64209 l_0_18_55)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x64207 (* ?x64206 l_0_18_54)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x64204 (* ?x64203 l_0_18_53)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x63816 (* ?x63815 l_0_18_54)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x63813 (* ?x63812 l_0_18_53)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x64181 (* ?x64180 l_0_18_34)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x64178 (* ?x64177 l_0_18_33)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x64166 (* ?x64165 l_0_18_32)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x64136 (* ?x63539 l_0_18_173)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x64134 (* ?x63536 l_0_18_172)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x64132 (* ?x63533 l_0_18_152)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x64130 (* ?x63527 l_0_18_151)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x64128 (* ?x64127 l_0_18_6)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x64125 (* ?x63763 l_0_18_5)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x64123 (* ?x63760 l_0_18_4)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x64121 (* ?x63512 l_0_18_110)))
 (let ((?x64124 (+ (+ (+ (- _a_5_) (* (* 2.0 l_0_18_107) l_0_18_109)) ?x64121) ?x64123)))
 (let ((?x64140 (- (+ (+ (- (- (+ (+ ?x64124 ?x64125) ?x64128) ?x64130) ?x64132) ?x64134) ?x64136) (* (* 2.0 l_0_18_193) l_0_18_200))))
 (let ((?x64146 (- (- ?x64140 (* (* 2.0 l_0_18_194) l_0_18_201)) (* (* 2.0 l_0_18_195) l_0_18_202))))
 (let ((?x64152 (- (- ?x64146 (* (* 2.0 l_0_18_214) l_0_18_221)) (* (* 2.0 l_0_18_215) l_0_18_222))))
 (let ((?x64158 (- (- ?x64152 (* (* 2.0 l_0_18_216) l_0_18_223)) (* (* 2.0 l_0_18_235) l_0_18_242))))
 (let ((?x64164 (- (- ?x64158 (* (* 2.0 l_0_18_236) l_0_18_243)) (* (* 2.0 l_0_18_237) l_0_18_244))))
 (let ((?x64173 (- (- (- ?x64164 ?x64166) (* (* 2.0 l_0_18_256) l_0_18_263)) (* (* 2.0 l_0_18_257) l_0_18_264))))
 (let ((?x64185 (- (- (- (- ?x64173 (* (* 2.0 l_0_18_258) l_0_18_265)) ?x64178) ?x64181) (* (* 2.0 l_0_18_277) l_0_18_284))))
 (let ((?x64191 (- (- ?x64185 (* (* 2.0 l_0_18_278) l_0_18_285)) (* (* 2.0 l_0_18_279) l_0_18_286))))
 (let ((?x64197 (- (- ?x64191 (* (* 2.0 l_0_18_298) l_0_18_305)) (* (* 2.0 l_0_18_299) l_0_18_306))))
 (let ((?x64205 (- (+ (+ (- ?x64197 (* (* 2.0 l_0_18_300) l_0_18_307)) ?x63813) ?x63816) ?x64204)))
 (let ((?x64222 (+ (+ (+ (- (- (- (- ?x64205 ?x64207) ?x64210) ?x63819) ?x63822) ?x64215) ?x64218) ?x64221)))
 (= (- (- ?x64222 ?x64223) ?x64225) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x64367 (* ?x64366 l_0_18_71)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x64364 (* ?x64363 l_0_18_70)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x64361 (* ?x63253 l_0_18_70)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x64359 (* ?x64358 l_0_18_50)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x64356 (* ?x64355 l_0_18_49)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x64353 (* ?x63247 l_0_18_49)))
 (let ((?x63274 (* l_0_18_22 l_0_18_22)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x64350 (* ?x63301 l_0_18_28)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x64348 (* ?x63294 l_0_18_133)))
 (let ((?x64349 (+ (- (* (* 12.0 l_0_18_1) l_0_18_7) (* l_0_18_1 l_0_18_1)) ?x64348)))
 (let ((?x64365 (+ (+ (- (- (- (+ (- ?x64349 ?x64350) ?x63274) ?x64353) ?x64356) ?x64359) ?x64361) ?x64364)))
 (= (+ ?x64365 ?x64367) 0.0)))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x64367 (* ?x64366 l_0_18_71)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x64364 (* ?x64363 l_0_18_70)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x64439 (* ?x63397 l_0_18_70)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x64359 (* ?x64358 l_0_18_50)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x64356 (* ?x64355 l_0_18_49)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x64435 (* ?x63392 l_0_18_49)))
 (let ((?x64053 (* 12.0 l_0_18_3)))
 (let ((?x64433 (* ?x64053 l_0_18_8)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x64425 (* ?x63791 l_0_18_29)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x64421 (* ?x63782 l_0_18_28)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x64350 (* ?x63301 l_0_18_28)))
 (let ((?x64026 (* 12.0 l_0_18_2)))
 (let ((?x64413 (* ?x64026 l_0_18_7)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x64409 (* ?x64408 l_0_18_134)))
 (let ((?x64397 (* 2.0 l_0_18_128)))
 (let ((?x64406 (* ?x64397 l_0_18_133)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x64346 (* ?x42050 l_0_18_7)))
 (let ((?x64412 (- (+ (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_2) ?x64346) ?x64406) ?x64409) (* (* 2.0 l_0_18_190) l_0_18_196))))
 (let ((?x64419 (+ (- (+ ?x64412 ?x64413) (* (* 2.0 l_0_18_211) l_0_18_217)) (* (* 2.0 l_0_18_22) l_0_18_23))))
 (let ((?x64426 (- (- (- (- ?x64419 ?x64350) ?x64421) (* (* 2.0 l_0_18_232) l_0_18_238)) ?x64425)))
 (let ((?x64430 (- (- ?x64426 (* (* 2.0 l_0_18_253) l_0_18_259)) (* (* 2.0 l_0_18_274) l_0_18_280))))
 (let ((?x64437 (- (- (+ (- ?x64430 (* (* 2.0 l_0_18_295) l_0_18_301)) ?x64433) ?x64435) ?x64356)))
 (= (+ (+ (+ (- ?x64437 ?x64359) ?x64439) ?x64364) ?x64367) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x64550 (* ?x64549 l_0_18_72)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x64547 (* ?x64546 l_0_18_71)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x64544 (* ?x64543 l_0_18_70)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x64439 (* ?x63397 l_0_18_70)))
 (let ((?x64540 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x64537 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x64534 (* ?x64533 l_0_18_51)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x64531 (* ?x64530 l_0_18_50)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x64435 (* ?x63392 l_0_18_49)))
 (let ((?x64524 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x64521 (* ?x64180 l_0_18_30)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x64519 (* ?x64177 l_0_18_29)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x64517 (* ?x64165 l_0_18_28)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x64513 (* ?x64512 l_0_18_135)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x64510 (* ?x64509 l_0_18_134)))
 (let ((?x64508 (+ (* (* (- 2.0) l_0_18_1) l_0_18_4) (* (* 2.0 l_0_18_130) l_0_18_133))))
 (let ((?x64518 (- (+ (+ (+ ?x64508 ?x64510) ?x64513) (* (* 2.0 l_0_18_22) l_0_18_25)) ?x64517)))
 (let ((?x64529 (- (+ (+ (- (- ?x64518 ?x64519) ?x64521) ?x64524) ?x64435) (* (* 6.0 l_0_18_46) l_0_18_49))))
 (let ((?x64548 (+ (+ (- (+ (+ (- (- ?x64529 ?x64531) ?x64534) ?x64537) ?x64540) ?x64439) ?x64544) ?x64547)))
 (= (+ ?x64548 ?x64550) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x64663 (* l_0_18_9 l_0_18_9)))
 (let ((?x64664 (* 6.0 ?x64663)))
 (let ((?x64660 (* l_0_18_8 l_0_18_8)))
 (let ((?x64661 (* 6.0 ?x64660)))
 (let ((?x64657 (* l_0_18_73 l_0_18_73)))
 (let ((?x64658 (* 3.0 ?x64657)))
 (let ((?x64654 (* l_0_18_72 l_0_18_72)))
 (let ((?x64655 (* 3.0 ?x64654)))
 (let ((?x64651 (* l_0_18_71 l_0_18_71)))
 (let ((?x64652 (* 3.0 ?x64651)))
 (let ((?x64648 (* l_0_18_70 l_0_18_70)))
 (let ((?x64649 (* 3.0 ?x64648)))
 (let ((?x64645 (* l_0_18_7 l_0_18_7)))
 (let ((?x64646 (* 6.0 ?x64645)))
 (let ((?x64643 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x64640 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x64637 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x64631 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x64628 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64625 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x64622 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x64617 (* l_0_18_136 l_0_18_136)))
 (let ((?x64615 (* l_0_18_135 l_0_18_135)))
 (let ((?x64613 (* l_0_18_134 l_0_18_134)))
 (let ((?x64611 (* l_0_18_133 l_0_18_133)))
 (let ((?x64594 (* l_0_18_10 l_0_18_10)))
 (let ((?x64596 (* 6.0 ?x64594)))
 (let ((?x64616 (+ (+ (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_7) ?x64596) ?x64611) ?x64613) ?x64615)))
 (let ((?x64626 (- (- (+ (+ ?x64616 ?x64617) (* (* 2.0 l_0_18_22) l_0_18_28)) ?x64622) ?x64625)))
 (let ((?x64638 (- (- (- (- ?x64626 ?x64628) ?x64631) (* (* 3.0 l_0_18_49) l_0_18_49)) ?x64637)))
 (let ((?x64659 (+ (+ (+ (+ (+ (- (- ?x64638 ?x64640) ?x64643) ?x64646) ?x64649) ?x64652) ?x64655) ?x64658)))
 (= (+ (+ ?x64659 ?x64661) ?x64664) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x64771 (* ?x64770 l_0_18_91)))
 (let ((?x64767 (* 6.0 l_0_18_73)))
 (let ((?x64768 (* ?x64767 l_0_18_77)))
 (let ((?x64764 (* 6.0 l_0_18_72)))
 (let ((?x64765 (* ?x64764 l_0_18_76)))
 (let ((?x64761 (* 6.0 l_0_18_71)))
 (let ((?x64762 (* ?x64761 l_0_18_75)))
 (let ((?x64758 (* 6.0 l_0_18_70)))
 (let ((?x64759 (* ?x64758 l_0_18_74)))
 (let ((?x64755 (* 6.0 l_0_18_52)))
 (let ((?x64756 (* ?x64755 l_0_18_56)))
 (let ((?x64752 (* 6.0 l_0_18_51)))
 (let ((?x64753 (* ?x64752 l_0_18_55)))
 (let ((?x64749 (* 6.0 l_0_18_50)))
 (let ((?x64750 (* ?x64749 l_0_18_54)))
 (let ((?x64743 (* 12.0 l_0_18_31)))
 (let ((?x64744 (* ?x64743 l_0_18_35)))
 (let ((?x64740 (* 12.0 l_0_18_30)))
 (let ((?x64741 (* ?x64740 l_0_18_34)))
 (let ((?x64737 (* 12.0 l_0_18_29)))
 (let ((?x64738 (* ?x64737 l_0_18_33)))
 (let ((?x64734 (* 12.0 l_0_18_28)))
 (let ((?x64735 (* ?x64734 l_0_18_32)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x64730 (* ?x64729 l_0_18_175)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x64727 (* ?x64726 l_0_18_154)))
 (let ((?x64723 (* 2.0 l_0_18_136)))
 (let ((?x64724 (* ?x64723 l_0_18_140)))
 (let ((?x64720 (* 2.0 l_0_18_135)))
 (let ((?x64721 (* ?x64720 l_0_18_139)))
 (let ((?x64717 (* 2.0 l_0_18_134)))
 (let ((?x64718 (* ?x64717 l_0_18_138)))
 (let ((?x64714 (* 2.0 l_0_18_133)))
 (let ((?x64715 (* ?x64714 l_0_18_137)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x64712 (* ?x64127 l_0_18_9)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x64710 (* ?x63763 l_0_18_8)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x64708 (* ?x63760 l_0_18_7)))
 (let ((?x64702 (* 12.0 l_0_18_10)))
 (let ((?x64703 (* ?x64702 l_0_18_14)))
 (let ((?x64707 (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_11) ?x64703) (* (* 2.0 l_0_18_106) l_0_18_112))))
 (let ((?x64725 (+ (+ (+ (+ (+ (+ (+ ?x64707 ?x64708) ?x64710) ?x64712) ?x64715) ?x64718) ?x64721) ?x64724)))
 (let ((?x64736 (- (+ (+ (- ?x64725 ?x64727) ?x64730) (* (* 2.0 l_0_18_22) l_0_18_32)) ?x64735)))
 (let ((?x64748 (- (- (- (- ?x64736 ?x64738) ?x64741) ?x64744) (* (* 6.0 l_0_18_49) l_0_18_53))))
 (let ((?x64769 (+ (+ (+ (+ (- (- (- ?x64748 ?x64750) ?x64753) ?x64756) ?x64759) ?x64762) ?x64765) ?x64768)))
 (= (- ?x64769 ?x64771) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64767 (* 6.0 l_0_18_73)))
 (let ((?x64892 (* ?x64767 l_0_18_82)))
 (let ((?x64764 (* 6.0 l_0_18_72)))
 (let ((?x64890 (* ?x64764 l_0_18_81)))
 (let ((?x64761 (* 6.0 l_0_18_71)))
 (let ((?x64888 (* ?x64761 l_0_18_80)))
 (let ((?x64758 (* 6.0 l_0_18_70)))
 (let ((?x64886 (* ?x64758 l_0_18_79)))
 (let ((?x64755 (* 6.0 l_0_18_52)))
 (let ((?x64884 (* ?x64755 l_0_18_61)))
 (let ((?x64752 (* 6.0 l_0_18_51)))
 (let ((?x64882 (* ?x64752 l_0_18_60)))
 (let ((?x64749 (* 6.0 l_0_18_50)))
 (let ((?x64880 (* ?x64749 l_0_18_59)))
 (let ((?x64743 (* 12.0 l_0_18_31)))
 (let ((?x64876 (* ?x64743 l_0_18_40)))
 (let ((?x64740 (* 12.0 l_0_18_30)))
 (let ((?x64874 (* ?x64740 l_0_18_39)))
 (let ((?x64737 (* 12.0 l_0_18_29)))
 (let ((?x64872 (* ?x64737 l_0_18_38)))
 (let ((?x64734 (* 12.0 l_0_18_28)))
 (let ((?x64870 (* ?x64734 l_0_18_37)))
 (let ((?x64865 (* 12.0 l_0_18_18)))
 (let ((?x64866 (* ?x64865 l_0_18_9)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x64863 (* ?x64862 l_0_18_8)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x64860 (* ?x64859 l_0_18_7)))
 (let ((?x64723 (* 2.0 l_0_18_136)))
 (let ((?x64857 (* ?x64723 l_0_18_145)))
 (let ((?x64720 (* 2.0 l_0_18_135)))
 (let ((?x64855 (* ?x64720 l_0_18_144)))
 (let ((?x64717 (* 2.0 l_0_18_134)))
 (let ((?x64853 (* ?x64717 l_0_18_143)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x64348 (* ?x63294 l_0_18_133)))
 (let ((?x64702 (* 12.0 l_0_18_10)))
 (let ((?x64848 (* ?x64702 l_0_18_19)))
 (let ((?x64852 (+ (- (+ (* (* (- 2.0) l_0_18_1) l_0_18_16) ?x64848) ?x64348) (* (* 2.0 l_0_18_133) l_0_18_142))))
 (let ((?x64869 (+ (+ (+ (+ (+ (+ (+ ?x64852 ?x64853) ?x64855) ?x64857) ?x64860) ?x64863) ?x64866) (* (* 2.0 l_0_18_22) l_0_18_37))))
 (let ((?x64879 (- (- (- (- (- ?x64869 ?x64870) ?x64872) ?x64874) ?x64876) (* (* 6.0 l_0_18_49) l_0_18_58))))
 (let ((?x64893 (+ (+ (+ (+ (- (- (- ?x64879 ?x64880) ?x64882) ?x64884) ?x64886) ?x64888) ?x64890) ?x64892)))
 (= ?x64893 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x64961 (* ?x63821 l_0_18_71)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x64959 (* ?x63818 l_0_18_70)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x64957 (* ?x63815 l_0_18_50)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x64955 (* ?x63812 l_0_18_49)))
 (let ((?x63389 (* l_0_18_3 l_0_18_3)))
 (let ((?x64053 (* 12.0 l_0_18_3)))
 (let ((?x64433 (* ?x64053 l_0_18_8)))
 (let ((?x20529 (* l_0_18_24 l_0_18_24)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x64425 (* ?x63791 l_0_18_29)))
 (let ((?x53054 (* l_0_18_23 l_0_18_23)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x64421 (* ?x63782 l_0_18_28)))
 (let ((?x63364 (* l_0_18_2 l_0_18_2)))
 (let ((?x64026 (* 12.0 l_0_18_2)))
 (let ((?x64413 (* ?x64026 l_0_18_7)))
 (let ((?x64926 (- (* (* (- 2.0) l_0_18_191) l_0_18_196) (* (* 2.0 l_0_18_192) l_0_18_197))))
 (let ((?x64932 (- (- (- (+ ?x64926 ?x64413) ?x63364) (* (* 2.0 l_0_18_212) l_0_18_217)) (* (* 2.0 l_0_18_213) l_0_18_218))))
 (let ((?x64938 (- (- (+ (- ?x64932 ?x64421) ?x53054) (* (* 2.0 l_0_18_233) l_0_18_238)) (* (* 2.0 l_0_18_234) l_0_18_239))))
 (let ((?x64944 (- (- (+ (- ?x64938 ?x64425) ?x20529) (* (* 2.0 l_0_18_254) l_0_18_259)) (* (* 2.0 l_0_18_255) l_0_18_260))))
 (let ((?x64948 (- (- ?x64944 (* (* 2.0 l_0_18_275) l_0_18_280)) (* (* 2.0 l_0_18_276) l_0_18_281))))
 (let ((?x64952 (- (- ?x64948 (* (* 2.0 l_0_18_296) l_0_18_301)) (* (* 2.0 l_0_18_297) l_0_18_302))))
 (= (+ (+ (- (- (- (+ ?x64952 ?x64433) ?x63389) ?x64955) ?x64957) ?x64959) ?x64961) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x65084 (* ?x64220 l_0_18_72)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x65082 (* ?x64217 l_0_18_71)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x65080 (* ?x64214 l_0_18_70)))
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x64961 (* ?x63821 l_0_18_71)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x64959 (* ?x63818 l_0_18_70)))
 (let ((?x64540 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x64537 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x65074 (* ?x64209 l_0_18_51)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x65072 (* ?x64206 l_0_18_50)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x65070 (* ?x64203 l_0_18_49)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x64957 (* ?x63815 l_0_18_50)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x64955 (* ?x63812 l_0_18_49)))
 (let ((?x64524 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x64521 (* ?x64180 l_0_18_30)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x64519 (* ?x64177 l_0_18_29)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x64517 (* ?x64165 l_0_18_28)))
 (let ((?x65019 (- (* (* (- 2.0) l_0_18_193) l_0_18_196) (* (* 2.0 l_0_18_194) l_0_18_197))))
 (let ((?x65024 (- (- ?x65019 (* (* 2.0 l_0_18_195) l_0_18_198)) (* (* 2.0 l_0_18_2) l_0_18_4))))
 (let ((?x65028 (- (- ?x65024 (* (* 2.0 l_0_18_214) l_0_18_217)) (* (* 2.0 l_0_18_215) l_0_18_218))))
 (let ((?x65033 (+ (- ?x65028 (* (* 2.0 l_0_18_216) l_0_18_219)) (* (* 2.0 l_0_18_23) l_0_18_25))))
 (let ((?x65037 (- (- ?x65033 (* (* 2.0 l_0_18_235) l_0_18_238)) (* (* 2.0 l_0_18_236) l_0_18_239))))
 (let ((?x65042 (+ (- ?x65037 (* (* 2.0 l_0_18_237) l_0_18_240)) (* (* 2.0 l_0_18_24) l_0_18_26))))
 (let ((?x65047 (- (- (- ?x65042 ?x64517) (* (* 2.0 l_0_18_256) l_0_18_259)) (* (* 2.0 l_0_18_257) l_0_18_260))))
 (let ((?x65053 (- (- (- (- ?x65047 (* (* 2.0 l_0_18_258) l_0_18_261)) ?x64519) ?x64521) (* (* 2.0 l_0_18_277) l_0_18_280))))
 (let ((?x65057 (- (- ?x65053 (* (* 2.0 l_0_18_278) l_0_18_281)) (* (* 2.0 l_0_18_279) l_0_18_282))))
 (let ((?x65061 (- (- ?x65057 (* (* 2.0 l_0_18_298) l_0_18_301)) (* (* 2.0 l_0_18_299) l_0_18_302))))
 (let ((?x65066 (- (- ?x65061 (* (* 2.0 l_0_18_3) l_0_18_5)) (* (* 2.0 l_0_18_300) l_0_18_303))))
 (let ((?x65076 (+ (- (- (- (+ (+ (+ ?x65066 ?x64524) ?x64955) ?x64957) ?x65070) ?x65072) ?x65074) ?x64537)))
 (= (+ (+ (+ (- (- (+ ?x65076 ?x64540) ?x64959) ?x64961) ?x65080) ?x65082) ?x65084) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64663 (* l_0_18_9 l_0_18_9)))
 (let ((?x64664 (* 6.0 ?x64663)))
 (let ((?x64660 (* l_0_18_8 l_0_18_8)))
 (let ((?x64661 (* 6.0 ?x64660)))
 (let ((?x64645 (* l_0_18_7 l_0_18_7)))
 (let ((?x64646 (* 6.0 ?x64645)))
 (let ((?x64631 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x65170 (* l_0_18_304 l_0_18_304)))
 (let ((?x65168 (* l_0_18_303 l_0_18_303)))
 (let ((?x65166 (* l_0_18_302 l_0_18_302)))
 (let ((?x65164 (* l_0_18_301 l_0_18_301)))
 (let ((?x64628 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64625 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x65158 (* l_0_18_283 l_0_18_283)))
 (let ((?x65156 (* l_0_18_282 l_0_18_282)))
 (let ((?x65154 (* l_0_18_281 l_0_18_281)))
 (let ((?x65152 (* l_0_18_280 l_0_18_280)))
 (let ((?x64622 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x65149 (* l_0_18_262 l_0_18_262)))
 (let ((?x65147 (* l_0_18_261 l_0_18_261)))
 (let ((?x65145 (* l_0_18_260 l_0_18_260)))
 (let ((?x65143 (* l_0_18_259 l_0_18_259)))
 (let ((?x65141 (* l_0_18_241 l_0_18_241)))
 (let ((?x65139 (* l_0_18_240 l_0_18_240)))
 (let ((?x65135 (* l_0_18_239 l_0_18_239)))
 (let ((?x65133 (* l_0_18_238 l_0_18_238)))
 (let ((?x65129 (* l_0_18_220 l_0_18_220)))
 (let ((?x65127 (* l_0_18_219 l_0_18_219)))
 (let ((?x65125 (* l_0_18_218 l_0_18_218)))
 (let ((?x65123 (* l_0_18_217 l_0_18_217)))
 (let ((?x65119 (* l_0_18_199 l_0_18_199)))
 (let ((?x54064 (* l_0_18_198 l_0_18_198)))
 (let ((?x54125 (* l_0_18_197 l_0_18_197)))
 (let ((?x54122 (* l_0_18_196 l_0_18_196)))
 (let ((?x64594 (* l_0_18_10 l_0_18_10)))
 (let ((?x64596 (* 6.0 ?x64594)))
 (let ((?x65122 (- (- (- (- (- ?x64596 ?x54122) ?x54125) ?x54064) ?x65119) (* (* 2.0 l_0_18_2) l_0_18_7))))
 (let ((?x65132 (+ (- (- (- (- ?x65122 ?x65123) ?x65125) ?x65127) ?x65129) (* (* 2.0 l_0_18_23) l_0_18_28))))
 (let ((?x65140 (- (+ (- (- ?x65132 ?x65133) ?x65135) (* (* 2.0 l_0_18_24) l_0_18_29)) ?x65139)))
 (let ((?x65153 (- (- (- (- (- (- (- ?x65140 ?x65141) ?x65143) ?x65145) ?x65147) ?x65149) ?x64622) ?x65152)))
 (let ((?x65162 (- (- (- (- (- ?x65153 ?x65154) ?x65156) ?x65158) ?x64625) (* (* 2.0 l_0_18_3) l_0_18_8))))
 (let ((?x65175 (- (- (- (- (- (- (- ?x65162 ?x64628) ?x65164) ?x65166) ?x65168) ?x65170) ?x64631) (* (* 1.0 l_0_18_49) l_0_18_49))))
 (let ((?x65181 (- (- ?x65175 (* (* 1.0 l_0_18_50) l_0_18_50)) (* (* 1.0 l_0_18_51) l_0_18_51))))
 (let ((?x65187 (+ (+ (- ?x65181 (* (* 1.0 l_0_18_52) l_0_18_52)) ?x64646) (* 1.0 (* l_0_18_70 l_0_18_70)))))
 (let ((?x65191 (+ (+ ?x65187 (* 1.0 (* l_0_18_71 l_0_18_71))) (* 1.0 (* l_0_18_72 l_0_18_72)))))
 (= (+ (+ (+ ?x65191 (* 1.0 (* l_0_18_73 l_0_18_73))) ?x64661) ?x64664) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x65343 (* ?x63650 l_0_18_92)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x65341 (* ?x63647 l_0_18_91)))
 (let ((?x65338 (* 2.0 l_0_18_73)))
 (let ((?x65339 (* ?x65338 l_0_18_77)))
 (let ((?x65335 (* 2.0 l_0_18_72)))
 (let ((?x65336 (* ?x65335 l_0_18_76)))
 (let ((?x65332 (* 2.0 l_0_18_71)))
 (let ((?x65333 (* ?x65332 l_0_18_75)))
 (let ((?x65329 (* 2.0 l_0_18_70)))
 (let ((?x65330 (* ?x65329 l_0_18_74)))
 (let ((?x65326 (* 2.0 l_0_18_52)))
 (let ((?x65327 (* ?x65326 l_0_18_56)))
 (let ((?x65323 (* 2.0 l_0_18_51)))
 (let ((?x65324 (* ?x65323 l_0_18_55)))
 (let ((?x65320 (* 2.0 l_0_18_50)))
 (let ((?x65321 (* ?x65320 l_0_18_54)))
 (let ((?x65317 (* 2.0 l_0_18_49)))
 (let ((?x65318 (* ?x65317 l_0_18_53)))
 (let ((?x64743 (* 12.0 l_0_18_31)))
 (let ((?x64744 (* ?x64743 l_0_18_35)))
 (let ((?x64740 (* 12.0 l_0_18_30)))
 (let ((?x64741 (* ?x64740 l_0_18_34)))
 (let ((?x64737 (* 12.0 l_0_18_29)))
 (let ((?x64738 (* ?x64737 l_0_18_33)))
 (let ((?x64734 (* 12.0 l_0_18_28)))
 (let ((?x64735 (* ?x64734 l_0_18_32)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x65235 (* ?x63539 l_0_18_176)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x65233 (* ?x63536 l_0_18_175)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x65231 (* ?x63533 l_0_18_155)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x65229 (* ?x63527 l_0_18_154)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x64712 (* ?x64127 l_0_18_9)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x64710 (* ?x63763 l_0_18_8)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x64708 (* ?x63760 l_0_18_7)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x33159 (* ?x63512 l_0_18_113)))
 (let ((?x64702 (* 12.0 l_0_18_10)))
 (let ((?x64703 (* ?x64702 l_0_18_14)))
 (let ((?x65222 (- (+ (+ ?x64703 (* (* 2.0 l_0_18_107) l_0_18_112)) ?x33159) (* (* 2.0 l_0_18_11) l_0_18_2))))
 (let ((?x65228 (+ (+ (- (+ ?x65222 ?x64708) (* (* 2.0 l_0_18_12) l_0_18_3)) ?x64710) ?x64712)))
 (let ((?x65239 (- (+ (+ (- (- ?x65228 ?x65229) ?x65231) ?x65233) ?x65235) (* (* 2.0 l_0_18_196) l_0_18_200))))
 (let ((?x65245 (- (- ?x65239 (* (* 2.0 l_0_18_197) l_0_18_201)) (* (* 2.0 l_0_18_198) l_0_18_202))))
 (let ((?x65251 (- (- ?x65245 (* (* 2.0 l_0_18_199) l_0_18_203)) (* (* 2.0 l_0_18_217) l_0_18_221))))
 (let ((?x65257 (- (- ?x65251 (* (* 2.0 l_0_18_218) l_0_18_222)) (* (* 2.0 l_0_18_219) l_0_18_223))))
 (let ((?x65262 (+ (- ?x65257 (* (* 2.0 l_0_18_220) l_0_18_224)) (* (* 2.0 l_0_18_23) l_0_18_32))))
 (let ((?x65268 (- (- ?x65262 (* (* 2.0 l_0_18_238) l_0_18_242)) (* (* 2.0 l_0_18_239) l_0_18_243))))
 (let ((?x65273 (- (+ ?x65268 (* (* 2.0 l_0_18_24) l_0_18_33)) (* (* 2.0 l_0_18_240) l_0_18_244))))
 (let ((?x65279 (- (- ?x65273 (* (* 2.0 l_0_18_241) l_0_18_245)) (* (* 2.0 l_0_18_259) l_0_18_263))))
 (let ((?x65285 (- (- ?x65279 (* (* 2.0 l_0_18_260) l_0_18_264)) (* (* 2.0 l_0_18_261) l_0_18_265))))
 (let ((?x65292 (- (- (- ?x65285 (* (* 2.0 l_0_18_262) l_0_18_266)) ?x64735) (* (* 2.0 l_0_18_280) l_0_18_284))))
 (let ((?x65298 (- (- ?x65292 (* (* 2.0 l_0_18_281) l_0_18_285)) (* (* 2.0 l_0_18_282) l_0_18_286))))
 (let ((?x65306 (- (- (- (- ?x65298 (* (* 2.0 l_0_18_283) l_0_18_287)) ?x64738) ?x64741) (* (* 2.0 l_0_18_301) l_0_18_305))))
 (let ((?x65312 (- (- ?x65306 (* (* 2.0 l_0_18_302) l_0_18_306)) (* (* 2.0 l_0_18_303) l_0_18_307))))
 (let ((?x65322 (- (- (- (- ?x65312 (* (* 2.0 l_0_18_304) l_0_18_308)) ?x64744) ?x65318) ?x65321)))
 (let ((?x65342 (- (+ (+ (+ (+ (- (- ?x65322 ?x65324) ?x65327) ?x65330) ?x65333) ?x65336) ?x65339) ?x65341)))
 (= (- ?x65342 ?x65343) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65338 (* 2.0 l_0_18_73)))
 (let ((?x65544 (* ?x65338 l_0_18_82)))
 (let ((?x65335 (* 2.0 l_0_18_72)))
 (let ((?x65542 (* ?x65335 l_0_18_81)))
 (let ((?x65332 (* 2.0 l_0_18_71)))
 (let ((?x65540 (* ?x65332 l_0_18_80)))
 (let ((?x65329 (* 2.0 l_0_18_70)))
 (let ((?x65538 (* ?x65329 l_0_18_79)))
 (let ((?x65326 (* 2.0 l_0_18_52)))
 (let ((?x65536 (* ?x65326 l_0_18_61)))
 (let ((?x65323 (* 2.0 l_0_18_51)))
 (let ((?x65534 (* ?x65323 l_0_18_60)))
 (let ((?x65320 (* 2.0 l_0_18_50)))
 (let ((?x65532 (* ?x65320 l_0_18_59)))
 (let ((?x65317 (* 2.0 l_0_18_49)))
 (let ((?x65530 (* ?x65317 l_0_18_58)))
 (let ((?x64743 (* 12.0 l_0_18_31)))
 (let ((?x64876 (* ?x64743 l_0_18_40)))
 (let ((?x64740 (* 12.0 l_0_18_30)))
 (let ((?x64874 (* ?x64740 l_0_18_39)))
 (let ((?x64737 (* 12.0 l_0_18_29)))
 (let ((?x64872 (* ?x64737 l_0_18_38)))
 (let ((?x64734 (* 12.0 l_0_18_28)))
 (let ((?x64870 (* ?x64734 l_0_18_37)))
 (let ((?x64865 (* 12.0 l_0_18_18)))
 (let ((?x64866 (* ?x64865 l_0_18_9)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x64863 (* ?x64862 l_0_18_8)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x64860 (* ?x64859 l_0_18_7)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x64409 (* ?x64408 l_0_18_134)))
 (let ((?x64397 (* 2.0 l_0_18_128)))
 (let ((?x64406 (* ?x64397 l_0_18_133)))
 (let ((?x64702 (* 12.0 l_0_18_10)))
 (let ((?x64848 (* ?x64702 l_0_18_19)))
 (let ((?x65468 (+ (- (- (- ?x64848 ?x64406) ?x64409) (* (* 2.0 l_0_18_16) l_0_18_2)) ?x64860)))
 (let ((?x65475 (- (+ (+ (- ?x65468 (* (* 2.0 l_0_18_17) l_0_18_3)) ?x64863) ?x64866) (* (* 2.0 l_0_18_196) l_0_18_205))))
 (let ((?x65479 (- (- ?x65475 (* (* 2.0 l_0_18_197) l_0_18_206)) (* (* 2.0 l_0_18_198) l_0_18_207))))
 (let ((?x65483 (- (- ?x65479 (* (* 2.0 l_0_18_199) l_0_18_208)) (* (* 2.0 l_0_18_217) l_0_18_226))))
 (let ((?x65487 (- (- ?x65483 (* (* 2.0 l_0_18_218) l_0_18_227)) (* (* 2.0 l_0_18_219) l_0_18_228))))
 (let ((?x65491 (+ (- ?x65487 (* (* 2.0 l_0_18_220) l_0_18_229)) (* (* 2.0 l_0_18_23) l_0_18_37))))
 (let ((?x65495 (- (- ?x65491 (* (* 2.0 l_0_18_238) l_0_18_247)) (* (* 2.0 l_0_18_239) l_0_18_248))))
 (let ((?x65499 (- (+ ?x65495 (* (* 2.0 l_0_18_24) l_0_18_38)) (* (* 2.0 l_0_18_240) l_0_18_249))))
 (let ((?x65503 (- (- ?x65499 (* (* 2.0 l_0_18_241) l_0_18_250)) (* (* 2.0 l_0_18_259) l_0_18_268))))
 (let ((?x65507 (- (- ?x65503 (* (* 2.0 l_0_18_260) l_0_18_269)) (* (* 2.0 l_0_18_261) l_0_18_270))))
 (let ((?x65512 (- (- (- ?x65507 (* (* 2.0 l_0_18_262) l_0_18_271)) ?x64870) (* (* 2.0 l_0_18_280) l_0_18_289))))
 (let ((?x65516 (- (- ?x65512 (* (* 2.0 l_0_18_281) l_0_18_290)) (* (* 2.0 l_0_18_282) l_0_18_291))))
 (let ((?x65522 (- (- (- (- ?x65516 (* (* 2.0 l_0_18_283) l_0_18_292)) ?x64872) ?x64874) (* (* 2.0 l_0_18_301) l_0_18_310))))
 (let ((?x65526 (- (- ?x65522 (* (* 2.0 l_0_18_302) l_0_18_311)) (* (* 2.0 l_0_18_303) l_0_18_312))))
 (let ((?x65533 (- (- (- (- ?x65526 (* (* 2.0 l_0_18_304) l_0_18_313)) ?x64876) ?x65530) ?x65532)))
 (= (+ (+ (+ (+ (- (- ?x65533 ?x65534) ?x65536) ?x65538) ?x65540) ?x65542) ?x65544) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x65084 (* ?x64220 l_0_18_72)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x65082 (* ?x64217 l_0_18_71)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x65080 (* ?x64214 l_0_18_70)))
 (let ((?x63938 (* l_0_18_6 l_0_18_6)))
 (let ((?x63935 (* l_0_18_5 l_0_18_5)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x65074 (* ?x64209 l_0_18_51)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x65072 (* ?x64206 l_0_18_50)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x65070 (* ?x64203 l_0_18_49)))
 (let ((?x63919 (* l_0_18_4 l_0_18_4)))
 (let ((?x63981 (* l_0_18_27 l_0_18_27)))
 (let ((?x65600 (- (+ (+ (* l_0_18_25 l_0_18_25) (* l_0_18_26 l_0_18_26)) ?x63981) ?x63919)))
 (let ((?x65607 (- (- (- (- (+ (+ (+ ?x65600 ?x65070) ?x65072) ?x65074) ?x63935) ?x63938) ?x65080) ?x65082)))
 (= (- ?x65607 ?x65084) 0.0))))))))))))))))))))
(assert
 (let ((?x64657 (* l_0_18_73 l_0_18_73)))
 (let ((?x64654 (* l_0_18_72 l_0_18_72)))
 (let ((?x64651 (* l_0_18_71 l_0_18_71)))
 (let ((?x64648 (* l_0_18_70 l_0_18_70)))
 (let ((?x53639 (* l_0_18_52 l_0_18_52)))
 (let ((?x53636 (* l_0_18_51 l_0_18_51)))
 (let ((?x53634 (* l_0_18_50 l_0_18_50)))
 (let ((?x53532 (* l_0_18_49 l_0_18_49)))
 (let ((?x65624 (+ (* (* 2.0 l_0_18_25) l_0_18_28) (* (* 2.0 l_0_18_26) l_0_18_29))))
 (let ((?x65630 (- (+ ?x65624 (* (* 2.0 l_0_18_27) l_0_18_30)) (* (* 2.0 l_0_18_4) l_0_18_7))))
 (let ((?x65636 (+ (+ (- (+ ?x65630 ?x53532) (* (* 2.0 l_0_18_5) l_0_18_8)) ?x53634) ?x53636)))
 (let ((?x65642 (- (- (- (+ ?x65636 ?x53639) (* (* 2.0 l_0_18_6) l_0_18_9)) ?x64648) ?x64651)))
 (= (- (- ?x65642 ?x64654) ?x64657) 0.0))))))))))))))
(assert
 (let ((?x65720 (* 2.0 l_0_18_90)))
 (let ((?x65721 (* ?x65720 l_0_18_93)))
 (let ((?x65717 (* 2.0 l_0_18_89)))
 (let ((?x65718 (* ?x65717 l_0_18_92)))
 (let ((?x65714 (* 2.0 l_0_18_88)))
 (let ((?x65715 (* ?x65714 l_0_18_91)))
 (let ((?x65338 (* 2.0 l_0_18_73)))
 (let ((?x65339 (* ?x65338 l_0_18_77)))
 (let ((?x65335 (* 2.0 l_0_18_72)))
 (let ((?x65336 (* ?x65335 l_0_18_76)))
 (let ((?x65332 (* 2.0 l_0_18_71)))
 (let ((?x65333 (* ?x65332 l_0_18_75)))
 (let ((?x65329 (* 2.0 l_0_18_70)))
 (let ((?x65330 (* ?x65329 l_0_18_74)))
 (let ((?x65326 (* 2.0 l_0_18_52)))
 (let ((?x65327 (* ?x65326 l_0_18_56)))
 (let ((?x65323 (* 2.0 l_0_18_51)))
 (let ((?x65324 (* ?x65323 l_0_18_55)))
 (let ((?x65320 (* 2.0 l_0_18_50)))
 (let ((?x65321 (* ?x65320 l_0_18_54)))
 (let ((?x65317 (* 2.0 l_0_18_49)))
 (let ((?x65318 (* ?x65317 l_0_18_53)))
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x65698 (* ?x65697 l_0_18_177)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x65695 (* ?x65694 l_0_18_176)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x65692 (* ?x65691 l_0_18_175)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x65689 (* ?x65688 l_0_18_156)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x65686 (* ?x65685 l_0_18_155)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x65683 (* ?x65682 l_0_18_154)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x65675 (* ?x65674 l_0_18_114)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x65672 (* ?x65671 l_0_18_113)))
 (let ((?x65670 (- (* (* 2.0 l_0_18_109) l_0_18_112) (* (* 2.0 l_0_18_11) l_0_18_4))))
 (let ((?x65681 (- (- (+ (+ ?x65670 ?x65672) ?x65675) (* (* 2.0 l_0_18_12) l_0_18_5)) (* (* 2.0 l_0_18_13) l_0_18_6))))
 (let ((?x65701 (+ (+ (+ (+ (- (- (- ?x65681 ?x65683) ?x65686) ?x65689) ?x65692) ?x65695) ?x65698) (* (* 2.0 l_0_18_25) l_0_18_32))))
 (let ((?x65705 (+ (+ ?x65701 (* (* 2.0 l_0_18_26) l_0_18_33)) (* (* 2.0 l_0_18_27) l_0_18_34))))
 (let ((?x65712 (- (- (- (+ (+ (+ (+ ?x65705 ?x65318) ?x65321) ?x65324) ?x65327) ?x65330) ?x65333) ?x65336)))
 (= (- (- (- (- ?x65712 ?x65339) ?x65715) ?x65718) ?x65721) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65338 (* 2.0 l_0_18_73)))
 (let ((?x65544 (* ?x65338 l_0_18_82)))
 (let ((?x65335 (* 2.0 l_0_18_72)))
 (let ((?x65542 (* ?x65335 l_0_18_81)))
 (let ((?x65332 (* 2.0 l_0_18_71)))
 (let ((?x65540 (* ?x65332 l_0_18_80)))
 (let ((?x65329 (* 2.0 l_0_18_70)))
 (let ((?x65538 (* ?x65329 l_0_18_79)))
 (let ((?x65326 (* 2.0 l_0_18_52)))
 (let ((?x65536 (* ?x65326 l_0_18_61)))
 (let ((?x65323 (* 2.0 l_0_18_51)))
 (let ((?x65534 (* ?x65323 l_0_18_60)))
 (let ((?x65320 (* 2.0 l_0_18_50)))
 (let ((?x65532 (* ?x65320 l_0_18_59)))
 (let ((?x65317 (* 2.0 l_0_18_49)))
 (let ((?x65530 (* ?x65317 l_0_18_58)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x64513 (* ?x64512 l_0_18_135)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x64510 (* ?x64509 l_0_18_134)))
 (let ((?x23059 (- (- (- (* (* (- 2.0) l_0_18_130) l_0_18_133) ?x64510) ?x64513) (* (* 2.0 l_0_18_16) l_0_18_4))))
 (let ((?x55045 (- (- ?x23059 (* (* 2.0 l_0_18_17) l_0_18_5)) (* (* 2.0 l_0_18_18) l_0_18_6))))
 (let ((?x54635 (+ (+ ?x55045 (* (* 2.0 l_0_18_25) l_0_18_37)) (* (* 2.0 l_0_18_26) l_0_18_38))))
 (let ((?x55031 (+ (+ (+ (+ ?x54635 (* (* 2.0 l_0_18_27) l_0_18_39)) ?x65530) ?x65532) ?x65534)))
 (= (- (- (- (- (+ ?x55031 ?x65536) ?x65538) ?x65540) ?x65542) ?x65544) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64663 (* l_0_18_9 l_0_18_9)))
 (let ((?x64660 (* l_0_18_8 l_0_18_8)))
 (let ((?x64645 (* l_0_18_7 l_0_18_7)))
 (let ((?x53525 (* l_0_18_31 l_0_18_31)))
 (let ((?x32809 (* l_0_18_30 l_0_18_30)))
 (let ((?x21712 (* l_0_18_29 l_0_18_29)))
 (let ((?x55127 (+ (+ (* (- l_0_18_10) l_0_18_10) (* l_0_18_28 l_0_18_28)) ?x21712)))
 (= (- (- (- (+ (+ ?x55127 ?x32809) ?x53525) ?x64645) ?x64660) ?x64663) 0.0)))))))))
(assert
 (let ((?x65832 (* l_0_18_94 l_0_18_94)))
 (let ((?x65830 (* l_0_18_93 l_0_18_93)))
 (let ((?x65828 (* l_0_18_92 l_0_18_92)))
 (let ((?x65826 (* l_0_18_91 l_0_18_91)))
 (let ((?x65812 (* l_0_18_178 l_0_18_178)))
 (let ((?x65810 (* l_0_18_177 l_0_18_177)))
 (let ((?x65808 (* l_0_18_176 l_0_18_176)))
 (let ((?x65806 (* l_0_18_175 l_0_18_175)))
 (let ((?x65804 (* l_0_18_157 l_0_18_157)))
 (let ((?x65802 (* l_0_18_156 l_0_18_156)))
 (let ((?x65800 (* l_0_18_155 l_0_18_155)))
 (let ((?x65798 (* l_0_18_154 l_0_18_154)))
 (let ((?x65792 (* l_0_18_115 l_0_18_115)))
 (let ((?x65790 (* l_0_18_114 l_0_18_114)))
 (let ((?x65788 (* l_0_18_113 l_0_18_113)))
 (let ((?x65786 (* l_0_18_112 l_0_18_112)))
 (let ((?x65785 (- (* (* (- 2.0) l_0_18_10) l_0_18_14) (* (* 2.0 l_0_18_11) l_0_18_7))))
 (let ((?x65795 (- (+ (+ (+ (+ ?x65785 ?x65786) ?x65788) ?x65790) ?x65792) (* (* 2.0 l_0_18_12) l_0_18_8))))
 (let ((?x65803 (- (- (- (- ?x65795 (* (* 2.0 l_0_18_13) l_0_18_9)) ?x65798) ?x65800) ?x65802)))
 (let ((?x65816 (+ (+ (+ (+ (+ (- ?x65803 ?x65804) ?x65806) ?x65808) ?x65810) ?x65812) (* (* 2.0 l_0_18_28) l_0_18_32))))
 (let ((?x65822 (+ (+ ?x65816 (* (* 2.0 l_0_18_29) l_0_18_33)) (* (* 2.0 l_0_18_30) l_0_18_34))))
 (let ((?x65831 (- (- (- (+ ?x65822 (* (* 2.0 l_0_18_31) l_0_18_35)) ?x65826) ?x65828) ?x65830)))
 (= (- ?x65831 ?x65832) 0.0))))))))))))))))))))))))
(assert
 (let ((?x64617 (* l_0_18_136 l_0_18_136)))
 (let ((?x64615 (* l_0_18_135 l_0_18_135)))
 (let ((?x64613 (* l_0_18_134 l_0_18_134)))
 (let ((?x64611 (* l_0_18_133 l_0_18_133)))
 (let ((?x65873 (- (- (- (- (* (* (- 2.0) l_0_18_10) l_0_18_19) ?x64611) ?x64613) ?x64615) ?x64617)))
 (let ((?x65877 (- (- ?x65873 (* (* 2.0 l_0_18_16) l_0_18_7)) (* (* 2.0 l_0_18_17) l_0_18_8))))
 (let ((?x65881 (+ (- ?x65877 (* (* 2.0 l_0_18_18) l_0_18_9)) (* (* 2.0 l_0_18_28) l_0_18_37))))
 (let ((?x65885 (+ (+ ?x65881 (* (* 2.0 l_0_18_29) l_0_18_38)) (* (* 2.0 l_0_18_30) l_0_18_39))))
 (= (+ ?x65885 (* (* 2.0 l_0_18_31) l_0_18_40)) 0.0))))))))))
(assert
 (let ((?x65940 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x65937 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x65934 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x65931 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x53301 (* l_0_18_36 l_0_18_36)))
 (let ((?x42344 (* l_0_18_35 l_0_18_35)))
 (let ((?x53297 (* l_0_18_34 l_0_18_34)))
 (let ((?x53293 (* l_0_18_33 l_0_18_33)))
 (let ((?x63719 (* l_0_18_32 l_0_18_32)))
 (let ((?x65922 (* 2.0 l_0_18_178)))
 (let ((?x65923 (* ?x65922 l_0_18_182)))
 (let ((?x65919 (* 2.0 l_0_18_177)))
 (let ((?x65920 (* ?x65919 l_0_18_181)))
 (let ((?x65916 (* 2.0 l_0_18_176)))
 (let ((?x65917 (* ?x65916 l_0_18_180)))
 (let ((?x65913 (* 2.0 l_0_18_175)))
 (let ((?x65914 (* ?x65913 l_0_18_179)))
 (let ((?x65910 (* 2.0 l_0_18_157)))
 (let ((?x65911 (* ?x65910 l_0_18_161)))
 (let ((?x65907 (* 2.0 l_0_18_156)))
 (let ((?x65908 (* ?x65907 l_0_18_160)))
 (let ((?x65904 (* 2.0 l_0_18_155)))
 (let ((?x65905 (* ?x65904 l_0_18_159)))
 (let ((?x65901 (* 2.0 l_0_18_154)))
 (let ((?x65902 (* ?x65901 l_0_18_158)))
 (let ((?x63530 (* l_0_18_15 l_0_18_15)))
 (let ((?x63524 (* l_0_18_14 l_0_18_14)))
 (let ((?x63521 (* l_0_18_13 l_0_18_13)))
 (let ((?x63518 (* l_0_18_12 l_0_18_12)))
 (let ((?x65894 (* 2.0 l_0_18_115)))
 (let ((?x65895 (* ?x65894 l_0_18_119)))
 (let ((?x34003 (* 2.0 l_0_18_114)))
 (let ((?x55240 (* ?x34003 l_0_18_118)))
 (let ((?x44478 (* 2.0 l_0_18_113)))
 (let ((?x34006 (* ?x44478 l_0_18_117)))
 (let ((?x20202 (+ (* (- l_0_18_11) l_0_18_11) (* (* 2.0 l_0_18_112) l_0_18_116))))
 (let ((?x65900 (- (- (- (- (+ (+ (+ ?x20202 ?x34006) ?x55240) ?x65895) ?x63518) ?x63521) ?x63524) ?x63530)))
 (let ((?x65921 (+ (+ (+ (- (- (- (- ?x65900 ?x65902) ?x65905) ?x65908) ?x65911) ?x65914) ?x65917) ?x65920)))
 (let ((?x65932 (- (+ (+ (+ (+ (+ (+ ?x65921 ?x65923) ?x63719) ?x53293) ?x53297) ?x42344) ?x53301) ?x65931)))
 (= (- (- (- ?x65932 ?x65934) ?x65937) ?x65940) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65922 (* 2.0 l_0_18_178)))
 (let ((?x66055 (* ?x65922 l_0_18_187)))
 (let ((?x65919 (* 2.0 l_0_18_177)))
 (let ((?x66053 (* ?x65919 l_0_18_186)))
 (let ((?x65916 (* 2.0 l_0_18_176)))
 (let ((?x66051 (* ?x65916 l_0_18_185)))
 (let ((?x65913 (* 2.0 l_0_18_175)))
 (let ((?x66049 (* ?x65913 l_0_18_184)))
 (let ((?x65910 (* 2.0 l_0_18_157)))
 (let ((?x66047 (* ?x65910 l_0_18_166)))
 (let ((?x65907 (* 2.0 l_0_18_156)))
 (let ((?x66045 (* ?x65907 l_0_18_165)))
 (let ((?x65904 (* 2.0 l_0_18_155)))
 (let ((?x66043 (* ?x65904 l_0_18_164)))
 (let ((?x65901 (* 2.0 l_0_18_154)))
 (let ((?x66041 (* ?x65901 l_0_18_163)))
 (let ((?x64723 (* 2.0 l_0_18_136)))
 (let ((?x64724 (* ?x64723 l_0_18_140)))
 (let ((?x64720 (* 2.0 l_0_18_135)))
 (let ((?x64721 (* ?x64720 l_0_18_139)))
 (let ((?x64717 (* 2.0 l_0_18_134)))
 (let ((?x64718 (* ?x64717 l_0_18_138)))
 (let ((?x64714 (* 2.0 l_0_18_133)))
 (let ((?x64715 (* ?x64714 l_0_18_137)))
 (let ((?x65894 (* 2.0 l_0_18_115)))
 (let ((?x66025 (* ?x65894 l_0_18_124)))
 (let ((?x34003 (* 2.0 l_0_18_114)))
 (let ((?x66023 (* ?x34003 l_0_18_123)))
 (let ((?x44478 (* 2.0 l_0_18_113)))
 (let ((?x66021 (* ?x44478 l_0_18_122)))
 (let ((?x55279 (* 2.0 l_0_18_112)))
 (let ((?x66019 (* ?x55279 l_0_18_121)))
 (let ((?x66014 (* 2.0 l_0_18_103)))
 (let ((?x66015 (* ?x66014 l_0_18_94)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x66012 (* ?x66011 l_0_18_93)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x66009 (* ?x66008 l_0_18_92)))
 (let ((?x66018 (- (- (- (- (* (* (- 2.0) l_0_18_100) l_0_18_91) ?x66009) ?x66012) ?x66015) (* (* 2.0 l_0_18_11) l_0_18_16))))
 (let ((?x66028 (- (+ (+ (+ (+ ?x66018 ?x66019) ?x66021) ?x66023) ?x66025) (* (* 2.0 l_0_18_12) l_0_18_17))))
 (let ((?x66033 (- (- (- (- ?x66028 (* (* 2.0 l_0_18_13) l_0_18_18)) ?x64715) ?x64718) ?x64721)))
 (let ((?x66040 (- (- (- ?x66033 ?x64724) (* (* 2.0 l_0_18_14) l_0_18_19)) (* (* 2.0 l_0_18_15) l_0_18_20))))
 (let ((?x66054 (+ (+ (+ (- (- (- (- ?x66040 ?x66041) ?x66043) ?x66045) ?x66047) ?x66049) ?x66051) ?x66053)))
 (let ((?x66062 (+ (+ (+ ?x66054 ?x66055) (* (* 2.0 l_0_18_32) l_0_18_37)) (* (* 2.0 l_0_18_33) l_0_18_38))))
 (let ((?x66068 (+ (+ ?x66062 (* (* 2.0 l_0_18_34) l_0_18_39)) (* (* 2.0 l_0_18_35) l_0_18_40))))
 (= (+ ?x66068 (* (* 2.0 l_0_18_36) l_0_18_41)) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66153 (* l_0_18_42 l_0_18_42)))
 (let ((?x66151 (* l_0_18_41 l_0_18_41)))
 (let ((?x66149 (* l_0_18_40 l_0_18_40)))
 (let ((?x66147 (* l_0_18_39 l_0_18_39)))
 (let ((?x66145 (* l_0_18_38 l_0_18_38)))
 (let ((?x66143 (* l_0_18_37 l_0_18_37)))
 (let ((?x66141 (* l_0_18_21 l_0_18_21)))
 (let ((?x66139 (* l_0_18_20 l_0_18_20)))
 (let ((?x66137 (* l_0_18_19 l_0_18_19)))
 (let ((?x66135 (* l_0_18_18 l_0_18_18)))
 (let ((?x66133 (* l_0_18_17 l_0_18_17)))
 (let ((?x66131 (* l_0_18_16 l_0_18_16)))
 (let ((?x64723 (* 2.0 l_0_18_136)))
 (let ((?x64857 (* ?x64723 l_0_18_145)))
 (let ((?x64720 (* 2.0 l_0_18_135)))
 (let ((?x64855 (* ?x64720 l_0_18_144)))
 (let ((?x64717 (* 2.0 l_0_18_134)))
 (let ((?x64853 (* ?x64717 l_0_18_143)))
 (let ((?x66132 (- (- (- (- (* (* (- 2.0) l_0_18_133) l_0_18_142) ?x64853) ?x64855) ?x64857) ?x66131)))
 (let ((?x66146 (+ (+ (- (- (- (- (- ?x66132 ?x66133) ?x66135) ?x66137) ?x66139) ?x66141) ?x66143) ?x66145)))
 (= (+ (+ (+ (+ ?x66146 ?x66147) ?x66149) ?x66151) ?x66153) 0.0))))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66190 (* ?x64366 l_0_18_68)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66188 (* ?x64363 l_0_18_67)))
 (let ((?x63256 (* l_0_18_64 l_0_18_64)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66185 (* ?x63253 l_0_18_67)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66183 (* ?x64358 l_0_18_47)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66181 (* ?x64355 l_0_18_46)))
 (let ((?x18834 (* l_0_18_43 l_0_18_43)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66178 (* ?x63247 l_0_18_46)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66176 (* ?x63301 l_0_18_25)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x23553 (* ?x42050 l_0_18_4)))
 (let ((?x66180 (+ (- (- (+ ?x23553 (* (* 2.0 l_0_18_127) l_0_18_130)) ?x66176) ?x66178) ?x18834)))
 (= (+ (+ (- (+ (- (- ?x66180 ?x66181) ?x66183) ?x66185) ?x63256) ?x66188) ?x66190) 0.0)))))))))))))))))))))
(assert
 (let ((?x66228 (* l_0_18_85 l_0_18_85)))
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66226 (* ?x64366 l_0_18_75)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66224 (* ?x64363 l_0_18_74)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66222 (* ?x63253 l_0_18_74)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66220 (* ?x64358 l_0_18_54)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66218 (* ?x64355 l_0_18_53)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66216 (* ?x63247 l_0_18_53)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66214 (* ?x63301 l_0_18_32)))
 (let ((?x66212 (* l_0_18_169 l_0_18_169)))
 (let ((?x66210 (* l_0_18_148 l_0_18_148)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x66208 (* ?x63294 l_0_18_137)))
 (let ((?x66209 (+ (+ (* (* 12.0 l_0_18_1) l_0_18_11) (* l_0_18_106 l_0_18_106)) ?x66208)))
 (let ((?x66223 (+ (- (- (- (- (+ (- ?x66209 ?x66210) ?x66212) ?x66214) ?x66216) ?x66218) ?x66220) ?x66222)))
 (= (- (+ (+ ?x66223 ?x66224) ?x66226) ?x66228) 0.0)))))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66283 (* ?x64366 l_0_18_80)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66281 (* ?x64363 l_0_18_79)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66279 (* ?x63253 l_0_18_79)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66277 (* ?x64358 l_0_18_59)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66275 (* ?x64355 l_0_18_58)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66273 (* ?x63247 l_0_18_58)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66271 (* ?x63301 l_0_18_37)))
 (let ((?x63234 (* l_0_18_127 l_0_18_127)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x66267 (* ?x42050 l_0_18_16)))
 (let ((?x66274 (- (- (- (+ ?x66267 (* (* 2.0 l_0_18_127) l_0_18_142)) ?x63234) ?x66271) ?x66273)))
 (= (+ (+ (+ (- (- ?x66274 ?x66275) ?x66277) ?x66279) ?x66281) ?x66283) 0.0))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66190 (* ?x64366 l_0_18_68)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66188 (* ?x64363 l_0_18_67)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66338 (* ?x63397 l_0_18_67)))
 (let ((?x63398 (* ?x63397 l_0_18_65)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66183 (* ?x64358 l_0_18_47)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66181 (* ?x64355 l_0_18_46)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66333 (* ?x63392 l_0_18_46)))
 (let ((?x63393 (* ?x63392 l_0_18_44)))
 (let ((?x64053 (* 12.0 l_0_18_3)))
 (let ((?x64054 (* ?x64053 l_0_18_5)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x64039 (* ?x63791 l_0_18_26)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x64033 (* ?x63782 l_0_18_25)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66176 (* ?x63301 l_0_18_25)))
 (let ((?x64026 (* 12.0 l_0_18_2)))
 (let ((?x64027 (* ?x64026 l_0_18_4)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x66313 (* ?x64408 l_0_18_131)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x23553 (* ?x42050 l_0_18_4)))
 (let ((?x66316 (- (+ (+ ?x23553 (* (* 2.0 l_0_18_128) l_0_18_130)) ?x66313) (* (* 2.0 l_0_18_190) l_0_18_193))))
 (let ((?x66321 (- (- (- (+ ?x66316 ?x64027) (* (* 2.0 l_0_18_211) l_0_18_214)) ?x66176) ?x64033)))
 (let ((?x66326 (- (- (- ?x66321 (* (* 2.0 l_0_18_232) l_0_18_235)) ?x64039) (* (* 2.0 l_0_18_253) l_0_18_256))))
 (let ((?x66330 (- (- ?x66326 (* (* 2.0 l_0_18_274) l_0_18_277)) (* (* 2.0 l_0_18_295) l_0_18_298))))
 (let ((?x66339 (+ (- (- (- (- (+ (+ ?x66330 ?x64054) ?x63393) ?x66333) ?x66181) ?x66183) ?x63398) ?x66338)))
 (= (+ (+ ?x66339 ?x66188) ?x66190) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66396 (* ?x64770 l_0_18_86)))
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66226 (* ?x64366 l_0_18_75)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66224 (* ?x64363 l_0_18_74)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66392 (* ?x63397 l_0_18_74)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66220 (* ?x64358 l_0_18_54)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66218 (* ?x64355 l_0_18_53)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66388 (* ?x63392 l_0_18_53)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x63792 (* ?x63791 l_0_18_33)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x63783 (* ?x63782 l_0_18_32)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66214 (* ?x63301 l_0_18_32)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x55655 (* ?x64729 l_0_18_170)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x23752 (* ?x64726 l_0_18_149)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x55640 (* ?x64408 l_0_18_138)))
 (let ((?x64397 (* 2.0 l_0_18_128)))
 (let ((?x55613 (* ?x64397 l_0_18_137)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x63764 (* ?x63763 l_0_18_3)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x63761 (* ?x63760 l_0_18_2)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x66205 (* ?x42050 l_0_18_11)))
 (let ((?x55626 (+ (+ (+ (+ ?x66205 (* (* 2.0 l_0_18_106) l_0_18_107)) ?x63761) ?x63764) ?x55613)))
 (let ((?x66374 (- (+ (- (+ ?x55626 ?x55640) ?x23752) ?x55655) (* (* 2.0 l_0_18_190) l_0_18_200))))
 (let ((?x66380 (- (- (- (- ?x66374 (* (* 2.0 l_0_18_211) l_0_18_221)) ?x66214) ?x63783) (* (* 2.0 l_0_18_232) l_0_18_242))))
 (let ((?x66385 (- (- (- ?x66380 ?x63792) (* (* 2.0 l_0_18_253) l_0_18_263)) (* (* 2.0 l_0_18_274) l_0_18_284))))
 (let ((?x66391 (- (- (- (- ?x66385 (* (* 2.0 l_0_18_295) l_0_18_305)) ?x66388) ?x66218) ?x66220)))
 (= (- (+ (+ (+ ?x66391 ?x66392) ?x66224) ?x66226) ?x66396) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64366 (* 6.0 l_0_18_66)))
 (let ((?x66283 (* ?x64366 l_0_18_80)))
 (let ((?x64363 (* 6.0 l_0_18_65)))
 (let ((?x66281 (* ?x64363 l_0_18_79)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66436 (* ?x63397 l_0_18_79)))
 (let ((?x64358 (* 6.0 l_0_18_45)))
 (let ((?x66277 (* ?x64358 l_0_18_59)))
 (let ((?x64355 (* 6.0 l_0_18_44)))
 (let ((?x66275 (* ?x64355 l_0_18_58)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66432 (* ?x63392 l_0_18_58)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x66424 (* ?x63791 l_0_18_38)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x66420 (* ?x63782 l_0_18_37)))
 (let ((?x63301 (* 12.0 l_0_18_22)))
 (let ((?x66271 (* ?x63301 l_0_18_37)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x7703 (* ?x64862 l_0_18_3)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x7557 (* ?x64859 l_0_18_2)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x55787 (* ?x64408 l_0_18_143)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x63295 (* ?x63294 l_0_18_128)))
 (let ((?x42050 (* 12.0 l_0_18_1)))
 (let ((?x66267 (* ?x42050 l_0_18_16)))
 (let ((?x34409 (+ (+ (+ (- ?x66267 ?x63295) (* (* 2.0 l_0_18_128) l_0_18_142)) ?x55787) ?x7557)))
 (let ((?x66418 (- (- (+ ?x34409 ?x7703) (* (* 2.0 l_0_18_190) l_0_18_205)) (* (* 2.0 l_0_18_211) l_0_18_226))))
 (let ((?x66425 (- (- (- (- ?x66418 ?x66271) ?x66420) (* (* 2.0 l_0_18_232) l_0_18_247)) ?x66424)))
 (let ((?x66429 (- (- ?x66425 (* (* 2.0 l_0_18_253) l_0_18_268)) (* (* 2.0 l_0_18_274) l_0_18_289))))
 (let ((?x66435 (- (- (- (- ?x66429 (* (* 2.0 l_0_18_295) l_0_18_310)) ?x66432) ?x66275) ?x66277)))
 (= (+ (+ (+ ?x66435 ?x66436) ?x66281) ?x66283) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63951 (* l_0_18_69 l_0_18_69)))
 (let ((?x66495 (* 3.0 ?x63951)))
 (let ((?x63948 (* l_0_18_68 l_0_18_68)))
 (let ((?x66493 (* 3.0 ?x63948)))
 (let ((?x63945 (* l_0_18_67 l_0_18_67)))
 (let ((?x66491 (* 3.0 ?x63945)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66338 (* ?x63397 l_0_18_67)))
 (let ((?x63938 (* l_0_18_6 l_0_18_6)))
 (let ((?x63939 (* 6.0 ?x63938)))
 (let ((?x63935 (* l_0_18_5 l_0_18_5)))
 (let ((?x63936 (* 6.0 ?x63935)))
 (let ((?x66486 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x66483 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66333 (* ?x63392 l_0_18_46)))
 (let ((?x63919 (* l_0_18_4 l_0_18_4)))
 (let ((?x63920 (* 6.0 ?x63919)))
 (let ((?x63905 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x63902 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x63893 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x66472 (* l_0_18_132 l_0_18_132)))
 (let ((?x66473 (+ (+ (* l_0_18_130 l_0_18_130) (* l_0_18_131 l_0_18_131)) ?x66472)))
 (let ((?x66481 (- (+ (+ (- (- (- ?x66473 ?x63893) ?x63902) ?x63905) ?x63920) ?x66333) (* (* 3.0 l_0_18_46) l_0_18_46))))
 (let ((?x66494 (+ (+ (- (+ (+ (- (- ?x66481 ?x66483) ?x66486) ?x63936) ?x63939) ?x66338) ?x66491) ?x66493)))
 (= (+ ?x66494 ?x66495) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66545 (* ?x64770 l_0_18_88)))
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x66543 (* ?x64549 l_0_18_76)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x66541 (* ?x64546 l_0_18_75)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x66539 (* ?x64543 l_0_18_74)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66392 (* ?x63397 l_0_18_74)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x66536 (* ?x64533 l_0_18_55)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x66534 (* ?x64530 l_0_18_54)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66388 (* ?x63392 l_0_18_53)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x64181 (* ?x64180 l_0_18_34)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x64178 (* ?x64177 l_0_18_33)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x64166 (* ?x64165 l_0_18_32)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66526 (* ?x64729 l_0_18_172)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66524 (* ?x64726 l_0_18_151)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x66522 (* ?x64512 l_0_18_139)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x66520 (* ?x64509 l_0_18_138)))
 (let ((?x64497 (* 2.0 l_0_18_130)))
 (let ((?x66518 (* ?x64497 l_0_18_137)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x64128 (* ?x64127 l_0_18_6)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x64125 (* ?x63763 l_0_18_5)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x64123 (* ?x63760 l_0_18_4)))
 (let ((?x66519 (+ (+ (+ (+ (* (* 2.0 l_0_18_106) l_0_18_109) ?x64123) ?x64125) ?x64128) ?x66518)))
 (let ((?x66530 (- (- (- (+ (- (+ (+ ?x66519 ?x66520) ?x66522) ?x66524) ?x66526) ?x64166) ?x64178) ?x64181)))
 (let ((?x66537 (- (- (- (+ ?x66530 ?x66388) (* (* 6.0 l_0_18_46) l_0_18_53)) ?x66534) ?x66536)))
 (= (- (+ (+ (+ (- ?x66537 ?x66392) ?x66539) ?x66541) ?x66543) ?x66545) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x66595 (* ?x64549 l_0_18_81)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x66593 (* ?x64546 l_0_18_80)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x66591 (* ?x64543 l_0_18_79)))
 (let ((?x63397 (* 2.0 l_0_18_64)))
 (let ((?x66436 (* ?x63397 l_0_18_79)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x66588 (* ?x64533 l_0_18_60)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x66586 (* ?x64530 l_0_18_59)))
 (let ((?x63392 (* 2.0 l_0_18_43)))
 (let ((?x66432 (* ?x63392 l_0_18_58)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x66581 (* ?x64180 l_0_18_39)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x66579 (* ?x64177 l_0_18_38)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x66577 (* ?x64165 l_0_18_37)))
 (let ((?x64865 (* 12.0 l_0_18_18)))
 (let ((?x66575 (* ?x64865 l_0_18_6)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x66573 (* ?x64862 l_0_18_5)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x66571 (* ?x64859 l_0_18_4)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x66569 (* ?x64512 l_0_18_144)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x56045 (* ?x64509 l_0_18_143)))
 (let ((?x56044 (+ (* (* (- 2.0) l_0_18_127) l_0_18_130) (* (* 2.0 l_0_18_130) l_0_18_142))))
 (let ((?x66580 (- (- (+ (+ (+ (+ (+ ?x56044 ?x56045) ?x66569) ?x66571) ?x66573) ?x66575) ?x66577) ?x66579)))
 (let ((?x66587 (- (- (+ (- ?x66580 ?x66581) ?x66432) (* (* 6.0 l_0_18_46) l_0_18_58)) ?x66586)))
 (= (+ (+ (+ (- (- ?x66587 ?x66588) ?x66436) ?x66591) ?x66593) ?x66595) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66693 (* ?x64770 l_0_18_95)))
 (let ((?x63644 (* l_0_18_78 l_0_18_78)))
 (let ((?x66691 (* 3.0 ?x63644)))
 (let ((?x63641 (* l_0_18_77 l_0_18_77)))
 (let ((?x66689 (* 3.0 ?x63641)))
 (let ((?x63638 (* l_0_18_76 l_0_18_76)))
 (let ((?x66687 (* 3.0 ?x63638)))
 (let ((?x63635 (* l_0_18_75 l_0_18_75)))
 (let ((?x66685 (* 3.0 ?x63635)))
 (let ((?x63632 (* l_0_18_74 l_0_18_74)))
 (let ((?x66683 (* 3.0 ?x63632)))
 (let ((?x66681 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x66678 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x66675 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x66672 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x63615 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x63612 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x63609 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x63606 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x63603 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66661 (* ?x64729 l_0_18_179)))
 (let ((?x63530 (* l_0_18_15 l_0_18_15)))
 (let ((?x63531 (* 6.0 ?x63530)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66658 (* ?x64726 l_0_18_158)))
 (let ((?x66656 (* l_0_18_141 l_0_18_141)))
 (let ((?x66654 (* l_0_18_140 l_0_18_140)))
 (let ((?x63524 (* l_0_18_14 l_0_18_14)))
 (let ((?x63525 (* 6.0 ?x63524)))
 (let ((?x66651 (* l_0_18_139 l_0_18_139)))
 (let ((?x66649 (* l_0_18_138 l_0_18_138)))
 (let ((?x66647 (* l_0_18_137 l_0_18_137)))
 (let ((?x63521 (* l_0_18_13 l_0_18_13)))
 (let ((?x63522 (* 6.0 ?x63521)))
 (let ((?x63518 (* l_0_18_12 l_0_18_12)))
 (let ((?x63519 (* 6.0 ?x63518)))
 (let ((?x63515 (* l_0_18_11 l_0_18_11)))
 (let ((?x63516 (* 6.0 ?x63515)))
 (let ((?x66648 (+ (+ (+ (+ (* (* 2.0 l_0_18_106) l_0_18_116) ?x63516) ?x63519) ?x63522) ?x66647)))
 (let ((?x66660 (+ (- (+ (+ (+ (+ (+ ?x66648 ?x66649) ?x66651) ?x63525) ?x66654) ?x66656) ?x66658) ?x63531)))
 (let ((?x66670 (- (- (- (- (- (- (+ ?x66660 ?x66661) ?x63603) ?x63606) ?x63609) ?x63612) ?x63615) (* (* 3.0 l_0_18_53) l_0_18_53))))
 (let ((?x66688 (+ (+ (+ (- (- (- (- ?x66670 ?x66672) ?x66675) ?x66678) ?x66681) ?x66683) ?x66685) ?x66687)))
 (= (- (+ (+ ?x66688 ?x66689) ?x66691) ?x66693) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66802 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x66799 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x66796 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x66793 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x66790 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x66787 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x66784 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x66781 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x66778 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x66772 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66769 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66766 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66763 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66760 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66757 (* ?x64729 l_0_18_184)))
 (let ((?x66755 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66752 (* ?x64726 l_0_18_163)))
 (let ((?x66750 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66747 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66744 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x66741 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66738 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66735 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x66732 (* ?x64127 l_0_18_18)))
 (let ((?x63294 (* 2.0 l_0_18_127)))
 (let ((?x66208 (* ?x63294 l_0_18_137)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x66729 (* ?x63763 l_0_18_17)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x66727 (* ?x63760 l_0_18_16)))
 (let ((?x64705 (* 2.0 l_0_18_106)))
 (let ((?x66725 (* ?x64705 l_0_18_121)))
 (let ((?x66731 (- (+ (+ (+ (* (* (- 2.0) l_0_18_100) l_0_18_85) ?x66725) ?x66727) ?x66729) ?x66208)))
 (let ((?x66751 (+ (+ (+ (+ (+ (+ (+ ?x66731 ?x66732) ?x66735) ?x66738) ?x66741) ?x66744) ?x66747) ?x66750)))
 (let ((?x66770 (- (- (- (- (+ (+ (- ?x66751 ?x66752) ?x66755) ?x66757) ?x66760) ?x66763) ?x66766) ?x66769)))
 (let ((?x66782 (- (- (- (- ?x66770 ?x66772) (* (* 6.0 l_0_18_53) l_0_18_58)) ?x66778) ?x66781)))
 (let ((?x66803 (+ (+ (+ (+ (+ (- (- ?x66782 ?x66784) ?x66787) ?x66790) ?x66793) ?x66796) ?x66799) ?x66802)))
 (= ?x66803 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66948 (* l_0_18_84 l_0_18_84)))
 (let ((?x66949 (* 3.0 ?x66948)))
 (let ((?x66945 (* l_0_18_83 l_0_18_83)))
 (let ((?x66946 (* 3.0 ?x66945)))
 (let ((?x66942 (* l_0_18_82 l_0_18_82)))
 (let ((?x66943 (* 3.0 ?x66942)))
 (let ((?x66939 (* l_0_18_81 l_0_18_81)))
 (let ((?x66940 (* 3.0 ?x66939)))
 (let ((?x66936 (* l_0_18_80 l_0_18_80)))
 (let ((?x66937 (* 3.0 ?x66936)))
 (let ((?x66933 (* l_0_18_79 l_0_18_79)))
 (let ((?x66934 (* 3.0 ?x66933)))
 (let ((?x66931 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x66928 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x66925 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x66922 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x66919 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x66913 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x66910 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x66907 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x66904 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x66901 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x66898 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x66141 (* l_0_18_21 l_0_18_21)))
 (let ((?x66895 (* 6.0 ?x66141)))
 (let ((?x66139 (* l_0_18_20 l_0_18_20)))
 (let ((?x66893 (* 6.0 ?x66139)))
 (let ((?x66137 (* l_0_18_19 l_0_18_19)))
 (let ((?x66891 (* 6.0 ?x66137)))
 (let ((?x66135 (* l_0_18_18 l_0_18_18)))
 (let ((?x66889 (* 6.0 ?x66135)))
 (let ((?x66133 (* l_0_18_17 l_0_18_17)))
 (let ((?x66887 (* 6.0 ?x66133)))
 (let ((?x66131 (* l_0_18_16 l_0_18_16)))
 (let ((?x66885 (* 6.0 ?x66131)))
 (let ((?x66883 (* l_0_18_147 l_0_18_147)))
 (let ((?x66881 (* l_0_18_146 l_0_18_146)))
 (let ((?x66879 (* l_0_18_145 l_0_18_145)))
 (let ((?x66857 (* l_0_18_144 l_0_18_144)))
 (let ((?x66854 (* l_0_18_143 l_0_18_143)))
 (let ((?x66850 (* l_0_18_142 l_0_18_142)))
 (let ((?x66880 (+ (+ (+ (+ (* (* (- 2.0) l_0_18_127) l_0_18_142) ?x66850) ?x66854) ?x66857) ?x66879)))
 (let ((?x66894 (+ (+ (+ (+ (+ (+ (+ ?x66880 ?x66881) ?x66883) ?x66885) ?x66887) ?x66889) ?x66891) ?x66893)))
 (let ((?x66914 (- (- (- (- (- (- (+ ?x66894 ?x66895) ?x66898) ?x66901) ?x66904) ?x66907) ?x66910) ?x66913)))
 (let ((?x66926 (- (- (- (- ?x66914 (* (* 3.0 l_0_18_58) l_0_18_58)) ?x66919) ?x66922) ?x66925)))
 (let ((?x66947 (+ (+ (+ (+ (+ (- (- ?x66926 ?x66928) ?x66931) ?x66934) ?x66937) ?x66940) ?x66943) ?x66946)))
 (= (+ ?x66947 ?x66949) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x67023 (* ?x63821 l_0_18_80)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x67021 (* ?x63818 l_0_18_79)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x67019 (* ?x63815 l_0_18_59)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x67017 (* ?x63812 l_0_18_58)))
 (let ((?x63791 (* 12.0 l_0_18_24)))
 (let ((?x66424 (* ?x63791 l_0_18_38)))
 (let ((?x63782 (* 12.0 l_0_18_23)))
 (let ((?x66420 (* ?x63782 l_0_18_37)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x7703 (* ?x64862 l_0_18_3)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x7557 (* ?x64859 l_0_18_2)))
 (let ((?x66989 (+ (- (* (- l_0_18_128) l_0_18_128) (* l_0_18_129 l_0_18_129)) ?x7557)))
 (let ((?x66994 (- (- (+ ?x66989 ?x7703) (* (* 2.0 l_0_18_191) l_0_18_205)) (* (* 2.0 l_0_18_192) l_0_18_206))))
 (let ((?x66998 (- (- ?x66994 (* (* 2.0 l_0_18_212) l_0_18_226)) (* (* 2.0 l_0_18_213) l_0_18_227))))
 (let ((?x67003 (- (- (- ?x66998 ?x66420) (* (* 2.0 l_0_18_233) l_0_18_247)) (* (* 2.0 l_0_18_234) l_0_18_248))))
 (let ((?x67008 (- (- (- ?x67003 ?x66424) (* (* 2.0 l_0_18_254) l_0_18_268)) (* (* 2.0 l_0_18_255) l_0_18_269))))
 (let ((?x67012 (- (- ?x67008 (* (* 2.0 l_0_18_275) l_0_18_289)) (* (* 2.0 l_0_18_276) l_0_18_290))))
 (let ((?x67016 (- (- ?x67012 (* (* 2.0 l_0_18_296) l_0_18_310)) (* (* 2.0 l_0_18_297) l_0_18_311))))
 (= (+ (+ (- (- ?x67016 ?x67017) ?x67019) ?x67021) ?x67023) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x67135 (* ?x64220 l_0_18_81)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x67133 (* ?x64217 l_0_18_80)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x67131 (* ?x64214 l_0_18_79)))
 (let ((?x63821 (* 2.0 l_0_18_66)))
 (let ((?x67023 (* ?x63821 l_0_18_80)))
 (let ((?x63818 (* 2.0 l_0_18_65)))
 (let ((?x67021 (* ?x63818 l_0_18_79)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x67127 (* ?x64209 l_0_18_60)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x67125 (* ?x64206 l_0_18_59)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x67123 (* ?x64203 l_0_18_58)))
 (let ((?x63815 (* 2.0 l_0_18_45)))
 (let ((?x67019 (* ?x63815 l_0_18_59)))
 (let ((?x63812 (* 2.0 l_0_18_44)))
 (let ((?x67017 (* ?x63812 l_0_18_58)))
 (let ((?x64180 (* 12.0 l_0_18_27)))
 (let ((?x66581 (* ?x64180 l_0_18_39)))
 (let ((?x64177 (* 12.0 l_0_18_26)))
 (let ((?x66579 (* ?x64177 l_0_18_38)))
 (let ((?x64165 (* 12.0 l_0_18_25)))
 (let ((?x66577 (* ?x64165 l_0_18_37)))
 (let ((?x64865 (* 12.0 l_0_18_18)))
 (let ((?x66575 (* ?x64865 l_0_18_6)))
 (let ((?x64862 (* 12.0 l_0_18_17)))
 (let ((?x66573 (* ?x64862 l_0_18_5)))
 (let ((?x64859 (* 12.0 l_0_18_16)))
 (let ((?x66571 (* ?x64859 l_0_18_4)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x66313 (* ?x64408 l_0_18_131)))
 (let ((?x67081 (+ (+ (+ (- (* (* (- 2.0) l_0_18_128) l_0_18_130) ?x66313) ?x66571) ?x66573) ?x66575)))
 (let ((?x67085 (- (- ?x67081 (* (* 2.0 l_0_18_193) l_0_18_205)) (* (* 2.0 l_0_18_194) l_0_18_206))))
 (let ((?x67089 (- (- ?x67085 (* (* 2.0 l_0_18_195) l_0_18_207)) (* (* 2.0 l_0_18_214) l_0_18_226))))
 (let ((?x67093 (- (- ?x67089 (* (* 2.0 l_0_18_215) l_0_18_227)) (* (* 2.0 l_0_18_216) l_0_18_228))))
 (let ((?x67097 (- (- ?x67093 (* (* 2.0 l_0_18_235) l_0_18_247)) (* (* 2.0 l_0_18_236) l_0_18_248))))
 (let ((?x67102 (- (- (- ?x67097 (* (* 2.0 l_0_18_237) l_0_18_249)) ?x66577) (* (* 2.0 l_0_18_256) l_0_18_268))))
 (let ((?x67106 (- (- ?x67102 (* (* 2.0 l_0_18_257) l_0_18_269)) (* (* 2.0 l_0_18_258) l_0_18_270))))
 (let ((?x67112 (- (- (- (- ?x67106 ?x66579) ?x66581) (* (* 2.0 l_0_18_277) l_0_18_289)) (* (* 2.0 l_0_18_278) l_0_18_290))))
 (let ((?x67116 (- (- ?x67112 (* (* 2.0 l_0_18_279) l_0_18_291)) (* (* 2.0 l_0_18_298) l_0_18_310))))
 (let ((?x67120 (- (- ?x67116 (* (* 2.0 l_0_18_299) l_0_18_311)) (* (* 2.0 l_0_18_300) l_0_18_312))))
 (let ((?x67130 (- (- (- (- (- (+ (+ ?x67120 ?x67017) ?x67019) ?x67123) ?x67125) ?x67127) ?x67021) ?x67023)))
 (= (+ (+ (+ ?x67130 ?x67131) ?x67133) ?x67135) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67344 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x67341 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x67338 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x67335 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x67332 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x67329 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x67326 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x67323 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x67320 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x67317 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x66772 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66769 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66766 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66763 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66760 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x67219 (* ?x63539 l_0_18_185)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x67217 (* ?x63536 l_0_18_184)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x67215 (* ?x63533 l_0_18_164)))
 (let ((?x66755 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x67212 (* ?x63527 l_0_18_163)))
 (let ((?x66744 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x64127 (* 12.0 l_0_18_13)))
 (let ((?x66732 (* ?x64127 l_0_18_18)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x55640 (* ?x64408 l_0_18_138)))
 (let ((?x64397 (* 2.0 l_0_18_128)))
 (let ((?x55613 (* ?x64397 l_0_18_137)))
 (let ((?x63763 (* 12.0 l_0_18_12)))
 (let ((?x66729 (* ?x63763 l_0_18_17)))
 (let ((?x63760 (* 12.0 l_0_18_11)))
 (let ((?x66727 (* ?x63760 l_0_18_16)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x67204 (* ?x63512 l_0_18_122)))
 (let ((?x42131 (* 2.0 l_0_18_107)))
 (let ((?x67197 (* ?x42131 l_0_18_121)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x56840 (* ?x66008 l_0_18_87)))
 (let ((?x67206 (+ (+ (+ (- (* (* (- 2.0) l_0_18_100) l_0_18_86) ?x56840) ?x67197) ?x67204) ?x66727)))
 (let ((?x67214 (+ (- (+ (+ (- (- (+ ?x67206 ?x66729) ?x55613) ?x55640) ?x66732) ?x66744) ?x67212) ?x66755)))
 (let ((?x67223 (- (+ (+ (- ?x67214 ?x67215) ?x67217) ?x67219) (* (* 2.0 l_0_18_200) l_0_18_205))))
 (let ((?x67229 (- (- ?x67223 (* (* 2.0 l_0_18_201) l_0_18_206)) (* (* 2.0 l_0_18_202) l_0_18_207))))
 (let ((?x67235 (- (- ?x67229 (* (* 2.0 l_0_18_203) l_0_18_208)) (* (* 2.0 l_0_18_204) l_0_18_209))))
 (let ((?x67241 (- (- ?x67235 (* (* 2.0 l_0_18_221) l_0_18_226)) (* (* 2.0 l_0_18_222) l_0_18_227))))
 (let ((?x67247 (- (- ?x67241 (* (* 2.0 l_0_18_223) l_0_18_228)) (* (* 2.0 l_0_18_224) l_0_18_229))))
 (let ((?x67253 (- (- ?x67247 (* (* 2.0 l_0_18_225) l_0_18_230)) (* (* 2.0 l_0_18_242) l_0_18_247))))
 (let ((?x67259 (- (- ?x67253 (* (* 2.0 l_0_18_243) l_0_18_248)) (* (* 2.0 l_0_18_244) l_0_18_249))))
 (let ((?x67265 (- (- ?x67259 (* (* 2.0 l_0_18_245) l_0_18_250)) (* (* 2.0 l_0_18_246) l_0_18_251))))
 (let ((?x67271 (- (- ?x67265 (* (* 2.0 l_0_18_263) l_0_18_268)) (* (* 2.0 l_0_18_264) l_0_18_269))))
 (let ((?x67277 (- (- ?x67271 (* (* 2.0 l_0_18_265) l_0_18_270)) (* (* 2.0 l_0_18_266) l_0_18_271))))
 (let ((?x67283 (- (- ?x67277 (* (* 2.0 l_0_18_267) l_0_18_272)) (* (* 2.0 l_0_18_284) l_0_18_289))))
 (let ((?x67289 (- (- ?x67283 (* (* 2.0 l_0_18_285) l_0_18_290)) (* (* 2.0 l_0_18_286) l_0_18_291))))
 (let ((?x67295 (- (- ?x67289 (* (* 2.0 l_0_18_287) l_0_18_292)) (* (* 2.0 l_0_18_288) l_0_18_293))))
 (let ((?x67301 (- (- ?x67295 (* (* 2.0 l_0_18_305) l_0_18_310)) (* (* 2.0 l_0_18_306) l_0_18_311))))
 (let ((?x67307 (- (- ?x67301 (* (* 2.0 l_0_18_307) l_0_18_312)) (* (* 2.0 l_0_18_308) l_0_18_313))))
 (let ((?x67313 (- (- (- (- ?x67307 (* (* 2.0 l_0_18_309) l_0_18_314)) ?x66760) ?x66763) ?x66766)))
 (let ((?x67330 (- (- (- (- (- (- (- ?x67313 ?x66769) ?x66772) ?x67317) ?x67320) ?x67323) ?x67326) ?x67329)))
 (= (+ (+ (+ (+ (+ ?x67330 ?x67332) ?x67335) ?x67338) ?x67341) ?x67344) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66913 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x66910 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x66907 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x66904 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x66901 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x66898 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x67529 (* l_0_18_315 l_0_18_315)))
 (let ((?x67527 (* l_0_18_314 l_0_18_314)))
 (let ((?x67525 (* l_0_18_313 l_0_18_313)))
 (let ((?x67523 (* l_0_18_312 l_0_18_312)))
 (let ((?x67521 (* l_0_18_311 l_0_18_311)))
 (let ((?x67519 (* l_0_18_310 l_0_18_310)))
 (let ((?x67517 (* l_0_18_294 l_0_18_294)))
 (let ((?x67515 (* l_0_18_293 l_0_18_293)))
 (let ((?x67513 (* l_0_18_292 l_0_18_292)))
 (let ((?x67511 (* l_0_18_291 l_0_18_291)))
 (let ((?x67509 (* l_0_18_290 l_0_18_290)))
 (let ((?x67507 (* l_0_18_289 l_0_18_289)))
 (let ((?x67505 (* l_0_18_273 l_0_18_273)))
 (let ((?x67503 (* l_0_18_272 l_0_18_272)))
 (let ((?x67501 (* l_0_18_271 l_0_18_271)))
 (let ((?x67499 (* l_0_18_270 l_0_18_270)))
 (let ((?x67497 (* l_0_18_269 l_0_18_269)))
 (let ((?x67495 (* l_0_18_268 l_0_18_268)))
 (let ((?x67493 (* l_0_18_252 l_0_18_252)))
 (let ((?x67491 (* l_0_18_251 l_0_18_251)))
 (let ((?x67489 (* l_0_18_250 l_0_18_250)))
 (let ((?x67487 (* l_0_18_249 l_0_18_249)))
 (let ((?x67485 (* l_0_18_248 l_0_18_248)))
 (let ((?x67483 (* l_0_18_247 l_0_18_247)))
 (let ((?x67481 (* l_0_18_231 l_0_18_231)))
 (let ((?x67479 (* l_0_18_230 l_0_18_230)))
 (let ((?x67477 (* l_0_18_229 l_0_18_229)))
 (let ((?x67475 (* l_0_18_228 l_0_18_228)))
 (let ((?x67473 (* l_0_18_227 l_0_18_227)))
 (let ((?x67471 (* l_0_18_226 l_0_18_226)))
 (let ((?x67469 (* l_0_18_210 l_0_18_210)))
 (let ((?x66141 (* l_0_18_21 l_0_18_21)))
 (let ((?x66895 (* 6.0 ?x66141)))
 (let ((?x67466 (* l_0_18_209 l_0_18_209)))
 (let ((?x67464 (* l_0_18_208 l_0_18_208)))
 (let ((?x67462 (* l_0_18_207 l_0_18_207)))
 (let ((?x67460 (* l_0_18_206 l_0_18_206)))
 (let ((?x67458 (* l_0_18_205 l_0_18_205)))
 (let ((?x66139 (* l_0_18_20 l_0_18_20)))
 (let ((?x66893 (* 6.0 ?x66139)))
 (let ((?x66137 (* l_0_18_19 l_0_18_19)))
 (let ((?x66891 (* 6.0 ?x66137)))
 (let ((?x66135 (* l_0_18_18 l_0_18_18)))
 (let ((?x66889 (* 6.0 ?x66135)))
 (let ((?x66133 (* l_0_18_17 l_0_18_17)))
 (let ((?x66887 (* 6.0 ?x66133)))
 (let ((?x66131 (* l_0_18_16 l_0_18_16)))
 (let ((?x66885 (* 6.0 ?x66131)))
 (let ((?x64408 (* 2.0 l_0_18_129)))
 (let ((?x55787 (* ?x64408 l_0_18_143)))
 (let ((?x67443 (+ (+ (+ (- (* (* (- 2.0) l_0_18_128) l_0_18_142) ?x55787) ?x66885) ?x66887) ?x66889)))
 (let ((?x67467 (- (- (- (- (- (+ (+ ?x67443 ?x66891) ?x66893) ?x67458) ?x67460) ?x67462) ?x67464) ?x67466)))
 (let ((?x67480 (- (- (- (- (- (- (+ ?x67467 ?x66895) ?x67469) ?x67471) ?x67473) ?x67475) ?x67477) ?x67479)))
 (let ((?x67494 (- (- (- (- (- (- (- ?x67480 ?x67481) ?x67483) ?x67485) ?x67487) ?x67489) ?x67491) ?x67493)))
 (let ((?x67508 (- (- (- (- (- (- (- ?x67494 ?x67495) ?x67497) ?x67499) ?x67501) ?x67503) ?x67505) ?x67507)))
 (let ((?x67522 (- (- (- (- (- (- (- ?x67508 ?x67509) ?x67511) ?x67513) ?x67515) ?x67517) ?x67519) ?x67521)))
 (let ((?x67533 (- (- (- (- (- (- (- ?x67522 ?x67523) ?x67525) ?x67527) ?x67529) ?x66898) ?x66901) ?x66904)))
 (let ((?x67539 (- (- (- (- ?x67533 ?x66907) ?x66910) ?x66913) (* (* 1.0 l_0_18_58) l_0_18_58))))
 (let ((?x67545 (- (- ?x67539 (* (* 1.0 l_0_18_59) l_0_18_59)) (* (* 1.0 l_0_18_60) l_0_18_60))))
 (let ((?x67551 (- (- ?x67545 (* (* 1.0 l_0_18_61) l_0_18_61)) (* (* 1.0 l_0_18_62) l_0_18_62))))
 (let ((?x67556 (+ (- ?x67551 (* (* 1.0 l_0_18_63) l_0_18_63)) (* 1.0 (* l_0_18_79 l_0_18_79)))))
 (let ((?x67560 (+ (+ ?x67556 (* 1.0 (* l_0_18_80 l_0_18_80))) (* 1.0 (* l_0_18_81 l_0_18_81)))))
 (let ((?x67564 (+ (+ ?x67560 (* 1.0 (* l_0_18_82 l_0_18_82))) (* 1.0 (* l_0_18_83 l_0_18_83)))))
 (= (+ ?x67564 (* 1.0 (* l_0_18_84 l_0_18_84))) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66396 (* ?x64770 l_0_18_86)))
 (let ((?x63256 (* l_0_18_64 l_0_18_64)))
 (let ((?x63257 (* 3.0 ?x63256)))
 (let ((?x63251 (* (* 3.0 l_0_18_43) l_0_18_43)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x55655 (* ?x64729 l_0_18_170)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x23752 (* ?x64726 l_0_18_149)))
 (let ((?x45925 (+ (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_107) ?x23752) ?x55655) ?x63251) ?x63257)))
 (= (+ ?x45925 ?x66396) 0.0))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x64225 (* ?x63650 l_0_18_89)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x64223 (* ?x63647 l_0_18_88)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66185 (* ?x63253 l_0_18_67)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66178 (* ?x63247 l_0_18_46)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x64136 (* ?x63539 l_0_18_173)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x64134 (* ?x63536 l_0_18_172)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x64132 (* ?x63533 l_0_18_152)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x64130 (* ?x63527 l_0_18_151)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x64121 (* ?x63512 l_0_18_110)))
 (let ((?x35184 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_109) ?x64121) ?x64130) ?x64132) ?x64134)))
 (= (+ (+ (+ (- (- ?x35184 ?x64136) ?x66178) ?x66185) ?x64223) ?x64225) 0.0)))))))))))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x65343 (* ?x63650 l_0_18_92)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x65341 (* ?x63647 l_0_18_91)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x64361 (* ?x63253 l_0_18_70)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x64353 (* ?x63247 l_0_18_49)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x65235 (* ?x63539 l_0_18_176)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x65233 (* ?x63536 l_0_18_175)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x65231 (* ?x63533 l_0_18_155)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x65229 (* ?x63527 l_0_18_154)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x33159 (* ?x63512 l_0_18_113)))
 (let ((?x46091 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_112) ?x33159) ?x65229) ?x65231) ?x65233)))
 (= (+ (+ (+ (- (- ?x46091 ?x65235) ?x64353) ?x64361) ?x65341) ?x65343) 0.0)))))))))))))))))))))
(assert
 (let ((?x63650 (* 2.0 l_0_18_87)))
 (let ((?x63651 (* ?x63650 l_0_18_96)))
 (let ((?x63647 (* 2.0 l_0_18_86)))
 (let ((?x63648 (* ?x63647 l_0_18_95)))
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66222 (* ?x63253 l_0_18_74)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66216 (* ?x63247 l_0_18_53)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x63540 (* ?x63539 l_0_18_180)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x63537 (* ?x63536 l_0_18_179)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x63534 (* ?x63533 l_0_18_159)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x63528 (* ?x63527 l_0_18_158)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x63513 (* ?x63512 l_0_18_117)))
 (let ((?x57273 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_116) ?x63513) ?x63528) ?x63534) ?x63537)))
 (= (+ (+ (+ (- (- ?x57273 ?x63540) ?x66216) ?x66222) ?x63648) ?x63651) 0.0)))))))))))))))))))))
(assert
 (let ((?x63253 (* 6.0 l_0_18_64)))
 (let ((?x66279 (* ?x63253 l_0_18_79)))
 (let ((?x63247 (* 6.0 l_0_18_43)))
 (let ((?x66273 (* ?x63247 l_0_18_58)))
 (let ((?x63539 (* 2.0 l_0_18_171)))
 (let ((?x67219 (* ?x63539 l_0_18_185)))
 (let ((?x63536 (* 2.0 l_0_18_170)))
 (let ((?x67217 (* ?x63536 l_0_18_184)))
 (let ((?x63533 (* 2.0 l_0_18_150)))
 (let ((?x67215 (* ?x63533 l_0_18_164)))
 (let ((?x63527 (* 2.0 l_0_18_149)))
 (let ((?x67212 (* ?x63527 l_0_18_163)))
 (let ((?x63512 (* 2.0 l_0_18_108)))
 (let ((?x67204 (* ?x63512 l_0_18_122)))
 (let ((?x42131 (* 2.0 l_0_18_107)))
 (let ((?x67197 (* ?x42131 l_0_18_121)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x56840 (* ?x66008 l_0_18_87)))
 (let ((?x46150 (+ (- (- (+ (* (* 2.0 l_0_18_100) l_0_18_86) ?x56840) ?x67197) ?x67204) ?x67212)))
 (= (+ (- (- (- (+ ?x46150 ?x67215) ?x67217) ?x67219) ?x66273) ?x66279) 0.0)))))))))))))))))))))
(assert
 (let ((?x63951 (* l_0_18_69 l_0_18_69)))
 (let ((?x66495 (* 3.0 ?x63951)))
 (let ((?x63948 (* l_0_18_68 l_0_18_68)))
 (let ((?x66493 (* 3.0 ?x63948)))
 (let ((?x63945 (* l_0_18_67 l_0_18_67)))
 (let ((?x66491 (* 3.0 ?x63945)))
 (let ((?x66486 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x66483 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x46141 (+ (+ (- (- (* (* (- 3.0) l_0_18_46) l_0_18_46) ?x66483) ?x66486) ?x66491) ?x66493)))
 (= (+ ?x46141 ?x66495) 0.0)))))))))))
(assert
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x64550 (* ?x64549 l_0_18_72)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x64547 (* ?x64546 l_0_18_71)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x64544 (* ?x64543 l_0_18_70)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x64534 (* ?x64533 l_0_18_51)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x64531 (* ?x64530 l_0_18_50)))
 (let ((?x67635 (+ (+ (- (- (* (* (- 6.0) l_0_18_46) l_0_18_49) ?x64531) ?x64534) ?x64544) ?x64547)))
 (= (+ ?x67635 ?x64550) 0.0)))))))))))))
(assert
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x66543 (* ?x64549 l_0_18_76)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x66541 (* ?x64546 l_0_18_75)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x66539 (* ?x64543 l_0_18_74)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x66536 (* ?x64533 l_0_18_55)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x66534 (* ?x64530 l_0_18_54)))
 (let ((?x67641 (+ (+ (- (- (* (* (- 6.0) l_0_18_46) l_0_18_53) ?x66534) ?x66536) ?x66539) ?x66541)))
 (= (+ ?x67641 ?x66543) 0.0)))))))))))))
(assert
 (let ((?x64549 (* 6.0 l_0_18_69)))
 (let ((?x66595 (* ?x64549 l_0_18_81)))
 (let ((?x64546 (* 6.0 l_0_18_68)))
 (let ((?x66593 (* ?x64546 l_0_18_80)))
 (let ((?x64543 (* 6.0 l_0_18_67)))
 (let ((?x66591 (* ?x64543 l_0_18_79)))
 (let ((?x64533 (* 6.0 l_0_18_48)))
 (let ((?x66588 (* ?x64533 l_0_18_60)))
 (let ((?x64530 (* 6.0 l_0_18_47)))
 (let ((?x66586 (* ?x64530 l_0_18_59)))
 (let ((?x67648 (+ (+ (- (- (* (* (- 6.0) l_0_18_46) l_0_18_58) ?x66586) ?x66588) ?x66591) ?x66593)))
 (= (+ ?x67648 ?x66595) 0.0)))))))))))))
(assert
 (let ((?x64657 (* l_0_18_73 l_0_18_73)))
 (let ((?x64658 (* 3.0 ?x64657)))
 (let ((?x64654 (* l_0_18_72 l_0_18_72)))
 (let ((?x64655 (* 3.0 ?x64654)))
 (let ((?x64651 (* l_0_18_71 l_0_18_71)))
 (let ((?x64652 (* 3.0 ?x64651)))
 (let ((?x64648 (* l_0_18_70 l_0_18_70)))
 (let ((?x64649 (* 3.0 ?x64648)))
 (let ((?x64643 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x64640 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x64637 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x67658 (+ (- (- (- (* (* (- 3.0) l_0_18_49) l_0_18_49) ?x64637) ?x64640) ?x64643) ?x64649)))
 (= (+ (+ (+ ?x67658 ?x64652) ?x64655) ?x64658) 0.0))))))))))))))
(assert
 (let ((?x64767 (* 6.0 l_0_18_73)))
 (let ((?x64768 (* ?x64767 l_0_18_77)))
 (let ((?x64764 (* 6.0 l_0_18_72)))
 (let ((?x64765 (* ?x64764 l_0_18_76)))
 (let ((?x64761 (* 6.0 l_0_18_71)))
 (let ((?x64762 (* ?x64761 l_0_18_75)))
 (let ((?x64758 (* 6.0 l_0_18_70)))
 (let ((?x64759 (* ?x64758 l_0_18_74)))
 (let ((?x64755 (* 6.0 l_0_18_52)))
 (let ((?x64756 (* ?x64755 l_0_18_56)))
 (let ((?x64752 (* 6.0 l_0_18_51)))
 (let ((?x64753 (* ?x64752 l_0_18_55)))
 (let ((?x64749 (* 6.0 l_0_18_50)))
 (let ((?x64750 (* ?x64749 l_0_18_54)))
 (let ((?x67670 (+ (- (- (- (* (* (- 6.0) l_0_18_49) l_0_18_53) ?x64750) ?x64753) ?x64756) ?x64759)))
 (= (+ (+ (+ ?x67670 ?x64762) ?x64765) ?x64768) 0.0)))))))))))))))))
(assert
 (let ((?x64767 (* 6.0 l_0_18_73)))
 (let ((?x64892 (* ?x64767 l_0_18_82)))
 (let ((?x64764 (* 6.0 l_0_18_72)))
 (let ((?x64890 (* ?x64764 l_0_18_81)))
 (let ((?x64761 (* 6.0 l_0_18_71)))
 (let ((?x64888 (* ?x64761 l_0_18_80)))
 (let ((?x64758 (* 6.0 l_0_18_70)))
 (let ((?x64886 (* ?x64758 l_0_18_79)))
 (let ((?x64755 (* 6.0 l_0_18_52)))
 (let ((?x64884 (* ?x64755 l_0_18_61)))
 (let ((?x64752 (* 6.0 l_0_18_51)))
 (let ((?x64882 (* ?x64752 l_0_18_60)))
 (let ((?x64749 (* 6.0 l_0_18_50)))
 (let ((?x64880 (* ?x64749 l_0_18_59)))
 (let ((?x67682 (+ (- (- (- (* (* (- 6.0) l_0_18_49) l_0_18_58) ?x64880) ?x64882) ?x64884) ?x64886)))
 (= (+ (+ (+ ?x67682 ?x64888) ?x64890) ?x64892) 0.0)))))))))))))))))
(assert
 (let ((?x63644 (* l_0_18_78 l_0_18_78)))
 (let ((?x66691 (* 3.0 ?x63644)))
 (let ((?x63641 (* l_0_18_77 l_0_18_77)))
 (let ((?x66689 (* 3.0 ?x63641)))
 (let ((?x63638 (* l_0_18_76 l_0_18_76)))
 (let ((?x66687 (* 3.0 ?x63638)))
 (let ((?x63635 (* l_0_18_75 l_0_18_75)))
 (let ((?x66685 (* 3.0 ?x63635)))
 (let ((?x63632 (* l_0_18_74 l_0_18_74)))
 (let ((?x66683 (* 3.0 ?x63632)))
 (let ((?x66681 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x66678 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x66675 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x66672 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x67692 (- (- (- (- (* (* (- 3.0) l_0_18_53) l_0_18_53) ?x66672) ?x66675) ?x66678) ?x66681)))
 (= (+ (+ (+ (+ (+ ?x67692 ?x66683) ?x66685) ?x66687) ?x66689) ?x66691) 0.0)))))))))))))))))
(assert
 (let ((?x66802 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x66799 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x66796 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x66793 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x66790 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x66787 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x66784 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x66781 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x66778 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x67704 (- (- (- (- (* (* (- 6.0) l_0_18_53) l_0_18_58) ?x66778) ?x66781) ?x66784) ?x66787)))
 (= (+ (+ (+ (+ (+ ?x67704 ?x66790) ?x66793) ?x66796) ?x66799) ?x66802) 0.0))))))))))))
(assert
 (let ((?x66948 (* l_0_18_84 l_0_18_84)))
 (let ((?x66949 (* 3.0 ?x66948)))
 (let ((?x66945 (* l_0_18_83 l_0_18_83)))
 (let ((?x66946 (* 3.0 ?x66945)))
 (let ((?x66942 (* l_0_18_82 l_0_18_82)))
 (let ((?x66943 (* 3.0 ?x66942)))
 (let ((?x66939 (* l_0_18_81 l_0_18_81)))
 (let ((?x66940 (* 3.0 ?x66939)))
 (let ((?x66936 (* l_0_18_80 l_0_18_80)))
 (let ((?x66937 (* 3.0 ?x66936)))
 (let ((?x66933 (* l_0_18_79 l_0_18_79)))
 (let ((?x66934 (* 3.0 ?x66933)))
 (let ((?x66931 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x66928 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x66925 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x66922 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x66919 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x67715 (- (- (- (- (* (* (- 3.0) l_0_18_58) l_0_18_58) ?x66919) ?x66922) ?x66925) ?x66928)))
 (let ((?x67722 (+ (+ (+ (+ (+ (+ (- ?x67715 ?x66931) ?x66934) ?x66937) ?x66940) ?x66943) ?x66946) ?x66949)))
 (= ?x67722 0.0)))))))))))))))))))))
(assert
 (let ((?x63951 (* l_0_18_69 l_0_18_69)))
 (let ((?x63948 (* l_0_18_68 l_0_18_68)))
 (let ((?x63945 (* l_0_18_67 l_0_18_67)))
 (let ((?x64005 (* l_0_18_48 l_0_18_48)))
 (let ((?x45123 (- (+ (+ (* l_0_18_46 l_0_18_46) (* l_0_18_47 l_0_18_47)) ?x64005) ?x63945)))
 (= (- (- ?x45123 ?x63948) ?x63951) 0.0)))))))
(assert
 (let ((?x67762 (* l_0_18_90 l_0_18_90)))
 (let ((?x67760 (* l_0_18_89 l_0_18_89)))
 (let ((?x67758 (* l_0_18_88 l_0_18_88)))
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x64221 (* ?x64220 l_0_18_76)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x64218 (* ?x64217 l_0_18_75)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x64215 (* ?x64214 l_0_18_74)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x64210 (* ?x64209 l_0_18_55)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x64207 (* ?x64206 l_0_18_54)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x64204 (* ?x64203 l_0_18_53)))
 (let ((?x67750 (* l_0_18_174 l_0_18_174)))
 (let ((?x67748 (* l_0_18_173 l_0_18_173)))
 (let ((?x67746 (* l_0_18_172 l_0_18_172)))
 (let ((?x67744 (* l_0_18_153 l_0_18_153)))
 (let ((?x67742 (* l_0_18_152 l_0_18_152)))
 (let ((?x67740 (* l_0_18_151 l_0_18_151)))
 (let ((?x67738 (* l_0_18_111 l_0_18_111)))
 (let ((?x67739 (+ (+ (* l_0_18_109 l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x67738)))
 (let ((?x67752 (+ (+ (+ (+ (- (- (- ?x67739 ?x67740) ?x67742) ?x67744) ?x67746) ?x67748) ?x67750) ?x64204)))
 (let ((?x67761 (- (- (- (- (- (+ (+ ?x67752 ?x64207) ?x64210) ?x64215) ?x64218) ?x64221) ?x67758) ?x67760)))
 (= (- ?x67761 ?x67762) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x64220 (* 2.0 l_0_18_69)))
 (let ((?x67135 (* ?x64220 l_0_18_81)))
 (let ((?x64217 (* 2.0 l_0_18_68)))
 (let ((?x67133 (* ?x64217 l_0_18_80)))
 (let ((?x64214 (* 2.0 l_0_18_67)))
 (let ((?x67131 (* ?x64214 l_0_18_79)))
 (let ((?x64209 (* 2.0 l_0_18_48)))
 (let ((?x67127 (* ?x64209 l_0_18_60)))
 (let ((?x64206 (* 2.0 l_0_18_47)))
 (let ((?x67125 (* ?x64206 l_0_18_59)))
 (let ((?x64203 (* 2.0 l_0_18_46)))
 (let ((?x67123 (* ?x64203 l_0_18_58)))
 (let ((?x66472 (* l_0_18_132 l_0_18_132)))
 (let ((?x67776 (- (- (* (- l_0_18_130) l_0_18_130) (* l_0_18_131 l_0_18_131)) ?x66472)))
 (= (- (- (- (+ (+ (+ ?x67776 ?x67123) ?x67125) ?x67127) ?x67131) ?x67133) ?x67135) 0.0))))))))))))))))
(assert
 (let ((?x65720 (* 2.0 l_0_18_90)))
 (let ((?x67814 (* ?x65720 l_0_18_97)))
 (let ((?x65717 (* 2.0 l_0_18_89)))
 (let ((?x67812 (* ?x65717 l_0_18_96)))
 (let ((?x65714 (* 2.0 l_0_18_88)))
 (let ((?x67810 (* ?x65714 l_0_18_95)))
 (let ((?x63644 (* l_0_18_78 l_0_18_78)))
 (let ((?x63641 (* l_0_18_77 l_0_18_77)))
 (let ((?x63638 (* l_0_18_76 l_0_18_76)))
 (let ((?x63635 (* l_0_18_75 l_0_18_75)))
 (let ((?x63632 (* l_0_18_74 l_0_18_74)))
 (let ((?x63731 (* l_0_18_57 l_0_18_57)))
 (let ((?x20909 (* l_0_18_56 l_0_18_56)))
 (let ((?x63726 (* l_0_18_55 l_0_18_55)))
 (let ((?x42346 (* l_0_18_54 l_0_18_54)))
 (let ((?x42332 (* l_0_18_53 l_0_18_53)))
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x67798 (* ?x65697 l_0_18_181)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x67796 (* ?x65694 l_0_18_180)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x67794 (* ?x65691 l_0_18_179)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x67792 (* ?x65688 l_0_18_160)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x67790 (* ?x65685 l_0_18_159)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x67788 (* ?x65682 l_0_18_158)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x55786 (* ?x65674 l_0_18_118)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x46545 (* ?x65671 l_0_18_117)))
 (let ((?x67791 (- (- (+ (+ (* (* 2.0 l_0_18_109) l_0_18_116) ?x46545) ?x55786) ?x67788) ?x67790)))
 (let ((?x67802 (+ (+ (+ (+ (+ (+ (- ?x67791 ?x67792) ?x67794) ?x67796) ?x67798) ?x42332) ?x42346) ?x63726)))
 (let ((?x67809 (- (- (- (- (- (+ (+ ?x67802 ?x20909) ?x63731) ?x63632) ?x63635) ?x63638) ?x63641) ?x63644)))
 (= (- (- (- ?x67809 ?x67810) ?x67812) ?x67814) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67344 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x67341 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x67338 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x67335 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x67332 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x67329 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x67326 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x67323 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x67320 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x67317 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x67878 (* ?x65697 l_0_18_186)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x67876 (* ?x65694 l_0_18_185)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x67874 (* ?x65691 l_0_18_184)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x67872 (* ?x65688 l_0_18_165)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x67870 (* ?x65685 l_0_18_164)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x67868 (* ?x65682 l_0_18_163)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x66522 (* ?x64512 l_0_18_139)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x66520 (* ?x64509 l_0_18_138)))
 (let ((?x64497 (* 2.0 l_0_18_130)))
 (let ((?x66518 (* ?x64497 l_0_18_137)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x67863 (* ?x65674 l_0_18_123)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x67861 (* ?x65671 l_0_18_122)))
 (let ((?x55043 (* 2.0 l_0_18_109)))
 (let ((?x67859 (* ?x55043 l_0_18_121)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x67857 (* ?x66011 l_0_18_90)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x67855 (* ?x66008 l_0_18_89)))
 (let ((?x67862 (+ (+ (- (- (* (* (- 2.0) l_0_18_100) l_0_18_88) ?x67855) ?x67857) ?x67859) ?x67861)))
 (let ((?x67873 (- (- (- (- (- (- (+ ?x67862 ?x67863) ?x66518) ?x66520) ?x66522) ?x67868) ?x67870) ?x67872)))
 (let ((?x67883 (+ (+ (+ (+ (+ (+ (+ ?x67873 ?x67874) ?x67876) ?x67878) ?x67317) ?x67320) ?x67323) ?x67326)))
 (= (- (- (- (- (- (+ ?x67883 ?x67329) ?x67332) ?x67335) ?x67338) ?x67341) ?x67344) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66948 (* l_0_18_84 l_0_18_84)))
 (let ((?x66945 (* l_0_18_83 l_0_18_83)))
 (let ((?x66942 (* l_0_18_82 l_0_18_82)))
 (let ((?x66939 (* l_0_18_81 l_0_18_81)))
 (let ((?x66936 (* l_0_18_80 l_0_18_80)))
 (let ((?x66933 (* l_0_18_79 l_0_18_79)))
 (let ((?x31841 (* l_0_18_63 l_0_18_63)))
 (let ((?x8363 (* l_0_18_62 l_0_18_62)))
 (let ((?x56552 (* l_0_18_61 l_0_18_61)))
 (let ((?x56547 (* l_0_18_60 l_0_18_60)))
 (let ((?x34850 (* l_0_18_59 l_0_18_59)))
 (let ((?x45033 (* l_0_18_58 l_0_18_58)))
 (let ((?x64512 (* 2.0 l_0_18_132)))
 (let ((?x66569 (* ?x64512 l_0_18_144)))
 (let ((?x64509 (* 2.0 l_0_18_131)))
 (let ((?x56045 (* ?x64509 l_0_18_143)))
 (let ((?x57477 (+ (+ (- (- (* (* (- 2.0) l_0_18_130) l_0_18_142) ?x56045) ?x66569) ?x45033) ?x34850)))
 (let ((?x67932 (- (- (- (+ (+ (+ (+ ?x57477 ?x56547) ?x56552) ?x8363) ?x31841) ?x66933) ?x66936) ?x66939)))
 (= (- (- (- ?x67932 ?x66942) ?x66945) ?x66948) 0.0))))))))))))))))))))
(assert
 (let ((?x67979 (* l_0_18_99 l_0_18_99)))
 (let ((?x67977 (* l_0_18_98 l_0_18_98)))
 (let ((?x67975 (* l_0_18_97 l_0_18_97)))
 (let ((?x67973 (* l_0_18_96 l_0_18_96)))
 (let ((?x67971 (* l_0_18_95 l_0_18_95)))
 (let ((?x67969 (* l_0_18_183 l_0_18_183)))
 (let ((?x67967 (* l_0_18_182 l_0_18_182)))
 (let ((?x67965 (* l_0_18_181 l_0_18_181)))
 (let ((?x67963 (* l_0_18_180 l_0_18_180)))
 (let ((?x67961 (* l_0_18_179 l_0_18_179)))
 (let ((?x67959 (* l_0_18_162 l_0_18_162)))
 (let ((?x67957 (* l_0_18_161 l_0_18_161)))
 (let ((?x67955 (* l_0_18_160 l_0_18_160)))
 (let ((?x67953 (* l_0_18_159 l_0_18_159)))
 (let ((?x67951 (* l_0_18_158 l_0_18_158)))
 (let ((?x67949 (* l_0_18_120 l_0_18_120)))
 (let ((?x67947 (* l_0_18_119 l_0_18_119)))
 (let ((?x67945 (* l_0_18_118 l_0_18_118)))
 (let ((?x67946 (+ (+ (* l_0_18_116 l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x67945)))
 (let ((?x67960 (- (- (- (- (- (+ (+ ?x67946 ?x67947) ?x67949) ?x67951) ?x67953) ?x67955) ?x67957) ?x67959)))
 (let ((?x67974 (- (- (+ (+ (+ (+ (+ ?x67960 ?x67961) ?x67963) ?x67965) ?x67967) ?x67969) ?x67971) ?x67973)))
 (= (- (- (- ?x67974 ?x67975) ?x67977) ?x67979) 0.0)))))))))))))))))))))))
(assert
 (let ((?x68064 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x68061 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x68058 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x68055 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x68052 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x68049 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x68046 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x68043 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x68040 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x68037 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x66656 (* l_0_18_141 l_0_18_141)))
 (let ((?x66654 (* l_0_18_140 l_0_18_140)))
 (let ((?x66651 (* l_0_18_139 l_0_18_139)))
 (let ((?x66649 (* l_0_18_138 l_0_18_138)))
 (let ((?x66647 (* l_0_18_137 l_0_18_137)))
 (let ((?x68029 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x68026 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x68023 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x68020 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x68017 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x68014 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x66014 (* 2.0 l_0_18_103)))
 (let ((?x68011 (* ?x66014 l_0_18_98)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x68009 (* ?x66011 l_0_18_97)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x68007 (* ?x66008 l_0_18_96)))
 (let ((?x68015 (- (- (- (- (* (* (- 2.0) l_0_18_100) l_0_18_95) ?x68007) ?x68009) ?x68011) ?x68014)))
 (let ((?x68032 (- (- (+ (+ (+ (+ (+ ?x68015 ?x68017) ?x68020) ?x68023) ?x68026) ?x68029) ?x66647) ?x66649)))
 (let ((?x68047 (- (- (- (- (- (- (- ?x68032 ?x66651) ?x66654) ?x66656) ?x68037) ?x68040) ?x68043) ?x68046)))
 (= (+ (+ (+ (+ (+ (- ?x68047 ?x68049) ?x68052) ?x68055) ?x68058) ?x68061) ?x68064) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x68172 (* l_0_18_189 l_0_18_189)))
 (let ((?x68170 (* l_0_18_188 l_0_18_188)))
 (let ((?x68168 (* l_0_18_187 l_0_18_187)))
 (let ((?x68166 (* l_0_18_186 l_0_18_186)))
 (let ((?x68164 (* l_0_18_185 l_0_18_185)))
 (let ((?x68162 (* l_0_18_184 l_0_18_184)))
 (let ((?x68160 (* l_0_18_168 l_0_18_168)))
 (let ((?x68158 (* l_0_18_167 l_0_18_167)))
 (let ((?x68156 (* l_0_18_166 l_0_18_166)))
 (let ((?x68154 (* l_0_18_165 l_0_18_165)))
 (let ((?x68152 (* l_0_18_164 l_0_18_164)))
 (let ((?x68150 (* l_0_18_163 l_0_18_163)))
 (let ((?x66750 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66747 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66741 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66738 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66735 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x68143 (* l_0_18_126 l_0_18_126)))
 (let ((?x68141 (* l_0_18_125 l_0_18_125)))
 (let ((?x68139 (* l_0_18_124 l_0_18_124)))
 (let ((?x68137 (* l_0_18_123 l_0_18_123)))
 (let ((?x68135 (* l_0_18_122 l_0_18_122)))
 (let ((?x68133 (* l_0_18_121 l_0_18_121)))
 (let ((?x68131 (* l_0_18_105 l_0_18_105)))
 (let ((?x68129 (* l_0_18_104 l_0_18_104)))
 (let ((?x68127 (* l_0_18_103 l_0_18_103)))
 (let ((?x68112 (* l_0_18_102 l_0_18_102)))
 (let ((?x68113 (- (- (* (- l_0_18_100) l_0_18_100) (* l_0_18_101 l_0_18_101)) ?x68112)))
 (let ((?x68140 (+ (+ (+ (+ (- (- (- ?x68113 ?x68127) ?x68129) ?x68131) ?x68133) ?x68135) ?x68137) ?x68139)))
 (let ((?x68149 (- (- (- (- (- (+ (+ ?x68140 ?x68141) ?x68143) ?x66735) ?x66738) ?x66741) ?x66747) ?x66750)))
 (let ((?x68163 (+ (- (- (- (- (- (- ?x68149 ?x68150) ?x68152) ?x68154) ?x68156) ?x68158) ?x68160) ?x68162)))
 (= (+ (+ (+ (+ (+ ?x68163 ?x68164) ?x68166) ?x68168) ?x68170) ?x68172) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x66228 (* l_0_18_85 l_0_18_85)))
 (let ((?x66212 (* l_0_18_169 l_0_18_169)))
 (let ((?x68213 (- (+ (* (- l_0_18_106) l_0_18_106) (* l_0_18_148 l_0_18_148)) ?x66212)))
 (= (+ ?x68213 ?x66228) 0.0)))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66545 (* ?x64770 l_0_18_88)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66526 (* ?x64729 l_0_18_172)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66524 (* ?x64726 l_0_18_151)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_109) ?x66524) ?x66526) ?x66545) 0.0))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x64771 (* ?x64770 l_0_18_91)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x64730 (* ?x64729 l_0_18_175)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x64727 (* ?x64726 l_0_18_154)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_112) ?x64727) ?x64730) ?x64771) 0.0))))))))
(assert
 (let ((?x64770 (* 2.0 l_0_18_85)))
 (let ((?x66693 (* ?x64770 l_0_18_95)))
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66661 (* ?x64729 l_0_18_179)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66658 (* ?x64726 l_0_18_158)))
 (= (+ (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_116) ?x66658) ?x66661) ?x66693) 0.0))))))))
(assert
 (let ((?x64729 (* 2.0 l_0_18_169)))
 (let ((?x66757 (* ?x64729 l_0_18_184)))
 (let ((?x64726 (* 2.0 l_0_18_148)))
 (let ((?x66752 (* ?x64726 l_0_18_163)))
 (let ((?x64705 (* 2.0 l_0_18_106)))
 (let ((?x66725 (* ?x64705 l_0_18_121)))
 (= (- (+ (- (* (* 2.0 l_0_18_100) l_0_18_85) ?x66725) ?x66752) ?x66757) 0.0))))))))
(assert
 (let ((?x67762 (* l_0_18_90 l_0_18_90)))
 (let ((?x67760 (* l_0_18_89 l_0_18_89)))
 (let ((?x67758 (* l_0_18_88 l_0_18_88)))
 (let ((?x67750 (* l_0_18_174 l_0_18_174)))
 (let ((?x67748 (* l_0_18_173 l_0_18_173)))
 (let ((?x67746 (* l_0_18_172 l_0_18_172)))
 (let ((?x67744 (* l_0_18_153 l_0_18_153)))
 (let ((?x67742 (* l_0_18_152 l_0_18_152)))
 (let ((?x67740 (* l_0_18_151 l_0_18_151)))
 (let ((?x67738 (* l_0_18_111 l_0_18_111)))
 (let ((?x68245 (- (- (* (- l_0_18_109) l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x67738)))
 (let ((?x68252 (+ (- (- (- (+ (+ (+ ?x68245 ?x67740) ?x67742) ?x67744) ?x67746) ?x67748) ?x67750) ?x67758)))
 (= (+ (+ ?x68252 ?x67760) ?x67762) 0.0))))))))))))))
(assert
 (let ((?x65720 (* 2.0 l_0_18_90)))
 (let ((?x65721 (* ?x65720 l_0_18_93)))
 (let ((?x65717 (* 2.0 l_0_18_89)))
 (let ((?x65718 (* ?x65717 l_0_18_92)))
 (let ((?x65714 (* 2.0 l_0_18_88)))
 (let ((?x65715 (* ?x65714 l_0_18_91)))
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x65698 (* ?x65697 l_0_18_177)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x65695 (* ?x65694 l_0_18_176)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x65692 (* ?x65691 l_0_18_175)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x65689 (* ?x65688 l_0_18_156)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x65686 (* ?x65685 l_0_18_155)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x65683 (* ?x65682 l_0_18_154)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x65675 (* ?x65674 l_0_18_114)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x65672 (* ?x65671 l_0_18_113)))
 (let ((?x57664 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_112) ?x65672) ?x65675) ?x65683) ?x65686)))
 (let ((?x68262 (+ (+ (+ (- (- (- (+ ?x57664 ?x65689) ?x65692) ?x65695) ?x65698) ?x65715) ?x65718) ?x65721)))
 (= ?x68262 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65720 (* 2.0 l_0_18_90)))
 (let ((?x67814 (* ?x65720 l_0_18_97)))
 (let ((?x65717 (* 2.0 l_0_18_89)))
 (let ((?x67812 (* ?x65717 l_0_18_96)))
 (let ((?x65714 (* 2.0 l_0_18_88)))
 (let ((?x67810 (* ?x65714 l_0_18_95)))
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x67798 (* ?x65697 l_0_18_181)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x67796 (* ?x65694 l_0_18_180)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x67794 (* ?x65691 l_0_18_179)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x67792 (* ?x65688 l_0_18_160)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x67790 (* ?x65685 l_0_18_159)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x67788 (* ?x65682 l_0_18_158)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x55786 (* ?x65674 l_0_18_118)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x46545 (* ?x65671 l_0_18_117)))
 (let ((?x68273 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_116) ?x46545) ?x55786) ?x67788) ?x67790)))
 (let ((?x68280 (+ (+ (+ (- (- (- (+ ?x68273 ?x67792) ?x67794) ?x67796) ?x67798) ?x67810) ?x67812) ?x67814)))
 (= ?x68280 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65697 (* 2.0 l_0_18_174)))
 (let ((?x67878 (* ?x65697 l_0_18_186)))
 (let ((?x65694 (* 2.0 l_0_18_173)))
 (let ((?x67876 (* ?x65694 l_0_18_185)))
 (let ((?x65691 (* 2.0 l_0_18_172)))
 (let ((?x67874 (* ?x65691 l_0_18_184)))
 (let ((?x65688 (* 2.0 l_0_18_153)))
 (let ((?x67872 (* ?x65688 l_0_18_165)))
 (let ((?x65685 (* 2.0 l_0_18_152)))
 (let ((?x67870 (* ?x65685 l_0_18_164)))
 (let ((?x65682 (* 2.0 l_0_18_151)))
 (let ((?x67868 (* ?x65682 l_0_18_163)))
 (let ((?x65674 (* 2.0 l_0_18_111)))
 (let ((?x67863 (* ?x65674 l_0_18_123)))
 (let ((?x65671 (* 2.0 l_0_18_110)))
 (let ((?x67861 (* ?x65671 l_0_18_122)))
 (let ((?x55043 (* 2.0 l_0_18_109)))
 (let ((?x67859 (* ?x55043 l_0_18_121)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x67857 (* ?x66011 l_0_18_90)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x67855 (* ?x66008 l_0_18_89)))
 (let ((?x68285 (- (- (+ (+ (* (* 2.0 l_0_18_100) l_0_18_88) ?x67855) ?x67857) ?x67859) ?x67861)))
 (let ((?x68292 (- (- (- (+ (+ (+ (- ?x68285 ?x67863) ?x67868) ?x67870) ?x67872) ?x67874) ?x67876) ?x67878)))
 (= ?x68292 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65832 (* l_0_18_94 l_0_18_94)))
 (let ((?x65830 (* l_0_18_93 l_0_18_93)))
 (let ((?x65828 (* l_0_18_92 l_0_18_92)))
 (let ((?x65826 (* l_0_18_91 l_0_18_91)))
 (let ((?x65812 (* l_0_18_178 l_0_18_178)))
 (let ((?x65810 (* l_0_18_177 l_0_18_177)))
 (let ((?x65808 (* l_0_18_176 l_0_18_176)))
 (let ((?x65806 (* l_0_18_175 l_0_18_175)))
 (let ((?x65804 (* l_0_18_157 l_0_18_157)))
 (let ((?x65802 (* l_0_18_156 l_0_18_156)))
 (let ((?x65800 (* l_0_18_155 l_0_18_155)))
 (let ((?x65798 (* l_0_18_154 l_0_18_154)))
 (let ((?x65792 (* l_0_18_115 l_0_18_115)))
 (let ((?x65790 (* l_0_18_114 l_0_18_114)))
 (let ((?x25247 (- (- (* (- l_0_18_112) l_0_18_112) (* l_0_18_113 l_0_18_113)) ?x65790)))
 (let ((?x25669 (- (- (+ (+ (+ (+ (- ?x25247 ?x65792) ?x65798) ?x65800) ?x65802) ?x65804) ?x65806) ?x65808)))
 (= (+ (+ (+ (+ (- (- ?x25669 ?x65810) ?x65812) ?x65826) ?x65828) ?x65830) ?x65832) 0.0))))))))))))))))))
(assert
 (let ((?x65940 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x65937 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x65934 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x65931 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x65922 (* 2.0 l_0_18_178)))
 (let ((?x65923 (* ?x65922 l_0_18_182)))
 (let ((?x65919 (* 2.0 l_0_18_177)))
 (let ((?x65920 (* ?x65919 l_0_18_181)))
 (let ((?x65916 (* 2.0 l_0_18_176)))
 (let ((?x65917 (* ?x65916 l_0_18_180)))
 (let ((?x65913 (* 2.0 l_0_18_175)))
 (let ((?x65914 (* ?x65913 l_0_18_179)))
 (let ((?x65910 (* 2.0 l_0_18_157)))
 (let ((?x65911 (* ?x65910 l_0_18_161)))
 (let ((?x65907 (* 2.0 l_0_18_156)))
 (let ((?x65908 (* ?x65907 l_0_18_160)))
 (let ((?x65904 (* 2.0 l_0_18_155)))
 (let ((?x65905 (* ?x65904 l_0_18_159)))
 (let ((?x65901 (* 2.0 l_0_18_154)))
 (let ((?x65902 (* ?x65901 l_0_18_158)))
 (let ((?x65894 (* 2.0 l_0_18_115)))
 (let ((?x65895 (* ?x65894 l_0_18_119)))
 (let ((?x34003 (* 2.0 l_0_18_114)))
 (let ((?x55240 (* ?x34003 l_0_18_118)))
 (let ((?x44478 (* 2.0 l_0_18_113)))
 (let ((?x34006 (* ?x44478 l_0_18_117)))
 (let ((?x57768 (+ (- (- (- (* (* (- 2.0) l_0_18_112) l_0_18_116) ?x34006) ?x55240) ?x65895) ?x65902)))
 (let ((?x68307 (- (- (- (- (+ (+ (+ ?x57768 ?x65905) ?x65908) ?x65911) ?x65914) ?x65917) ?x65920) ?x65923)))
 (= (+ (+ (+ (+ ?x68307 ?x65931) ?x65934) ?x65937) ?x65940) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x65922 (* 2.0 l_0_18_178)))
 (let ((?x66055 (* ?x65922 l_0_18_187)))
 (let ((?x65919 (* 2.0 l_0_18_177)))
 (let ((?x66053 (* ?x65919 l_0_18_186)))
 (let ((?x65916 (* 2.0 l_0_18_176)))
 (let ((?x66051 (* ?x65916 l_0_18_185)))
 (let ((?x65913 (* 2.0 l_0_18_175)))
 (let ((?x66049 (* ?x65913 l_0_18_184)))
 (let ((?x65910 (* 2.0 l_0_18_157)))
 (let ((?x66047 (* ?x65910 l_0_18_166)))
 (let ((?x65907 (* 2.0 l_0_18_156)))
 (let ((?x66045 (* ?x65907 l_0_18_165)))
 (let ((?x65904 (* 2.0 l_0_18_155)))
 (let ((?x66043 (* ?x65904 l_0_18_164)))
 (let ((?x65901 (* 2.0 l_0_18_154)))
 (let ((?x66041 (* ?x65901 l_0_18_163)))
 (let ((?x65894 (* 2.0 l_0_18_115)))
 (let ((?x66025 (* ?x65894 l_0_18_124)))
 (let ((?x34003 (* 2.0 l_0_18_114)))
 (let ((?x66023 (* ?x34003 l_0_18_123)))
 (let ((?x44478 (* 2.0 l_0_18_113)))
 (let ((?x66021 (* ?x44478 l_0_18_122)))
 (let ((?x55279 (* 2.0 l_0_18_112)))
 (let ((?x66019 (* ?x55279 l_0_18_121)))
 (let ((?x66014 (* 2.0 l_0_18_103)))
 (let ((?x66015 (* ?x66014 l_0_18_94)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x66012 (* ?x66011 l_0_18_93)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x66009 (* ?x66008 l_0_18_92)))
 (let ((?x68319 (- (+ (+ (+ (* (* 2.0 l_0_18_100) l_0_18_91) ?x66009) ?x66012) ?x66015) ?x66019)))
 (let ((?x68326 (+ (+ (+ (+ (- (- (- ?x68319 ?x66021) ?x66023) ?x66025) ?x66041) ?x66043) ?x66045) ?x66047)))
 (= (- (- (- (- ?x68326 ?x66049) ?x66051) ?x66053) ?x66055) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67979 (* l_0_18_99 l_0_18_99)))
 (let ((?x67977 (* l_0_18_98 l_0_18_98)))
 (let ((?x67975 (* l_0_18_97 l_0_18_97)))
 (let ((?x67973 (* l_0_18_96 l_0_18_96)))
 (let ((?x67971 (* l_0_18_95 l_0_18_95)))
 (let ((?x67969 (* l_0_18_183 l_0_18_183)))
 (let ((?x67967 (* l_0_18_182 l_0_18_182)))
 (let ((?x67965 (* l_0_18_181 l_0_18_181)))
 (let ((?x67963 (* l_0_18_180 l_0_18_180)))
 (let ((?x67961 (* l_0_18_179 l_0_18_179)))
 (let ((?x67959 (* l_0_18_162 l_0_18_162)))
 (let ((?x67957 (* l_0_18_161 l_0_18_161)))
 (let ((?x67955 (* l_0_18_160 l_0_18_160)))
 (let ((?x67953 (* l_0_18_159 l_0_18_159)))
 (let ((?x67951 (* l_0_18_158 l_0_18_158)))
 (let ((?x67949 (* l_0_18_120 l_0_18_120)))
 (let ((?x67947 (* l_0_18_119 l_0_18_119)))
 (let ((?x67945 (* l_0_18_118 l_0_18_118)))
 (let ((?x47568 (- (- (* (- l_0_18_116) l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x67945)))
 (let ((?x36275 (+ (+ (+ (+ (+ (- (- ?x47568 ?x67947) ?x67949) ?x67951) ?x67953) ?x67955) ?x67957) ?x67959)))
 (let ((?x68342 (+ (+ (- (- (- (- (- ?x36275 ?x67961) ?x67963) ?x67965) ?x67967) ?x67969) ?x67971) ?x67973)))
 (= (+ (+ (+ ?x68342 ?x67975) ?x67977) ?x67979) 0.0)))))))))))))))))))))))
(assert
 (let ((?x68064 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x68061 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x68058 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x68055 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x68052 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x68049 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x68046 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x68043 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x68040 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x68037 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x68029 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x68026 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x68023 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x68020 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x68017 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x68014 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x66014 (* 2.0 l_0_18_103)))
 (let ((?x68011 (* ?x66014 l_0_18_98)))
 (let ((?x66011 (* 2.0 l_0_18_102)))
 (let ((?x68009 (* ?x66011 l_0_18_97)))
 (let ((?x66008 (* 2.0 l_0_18_101)))
 (let ((?x68007 (* ?x66008 l_0_18_96)))
 (let ((?x57980 (+ (+ (+ (+ (* (* 2.0 l_0_18_100) l_0_18_95) ?x68007) ?x68009) ?x68011) ?x68014)))
 (let ((?x57986 (+ (+ (- (- (- (- (- ?x57980 ?x68017) ?x68020) ?x68023) ?x68026) ?x68029) ?x68037) ?x68040)))
 (let ((?x36459 (- (- (- (- (+ (+ (+ ?x57986 ?x68043) ?x68046) ?x68049) ?x68052) ?x68055) ?x68058) ?x68061)))
 (= (- ?x36459 ?x68064) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x68172 (* l_0_18_189 l_0_18_189)))
 (let ((?x68170 (* l_0_18_188 l_0_18_188)))
 (let ((?x68168 (* l_0_18_187 l_0_18_187)))
 (let ((?x68166 (* l_0_18_186 l_0_18_186)))
 (let ((?x68164 (* l_0_18_185 l_0_18_185)))
 (let ((?x68162 (* l_0_18_184 l_0_18_184)))
 (let ((?x68160 (* l_0_18_168 l_0_18_168)))
 (let ((?x68158 (* l_0_18_167 l_0_18_167)))
 (let ((?x68156 (* l_0_18_166 l_0_18_166)))
 (let ((?x68154 (* l_0_18_165 l_0_18_165)))
 (let ((?x68152 (* l_0_18_164 l_0_18_164)))
 (let ((?x68150 (* l_0_18_163 l_0_18_163)))
 (let ((?x68143 (* l_0_18_126 l_0_18_126)))
 (let ((?x68141 (* l_0_18_125 l_0_18_125)))
 (let ((?x68139 (* l_0_18_124 l_0_18_124)))
 (let ((?x68137 (* l_0_18_123 l_0_18_123)))
 (let ((?x68135 (* l_0_18_122 l_0_18_122)))
 (let ((?x68133 (* l_0_18_121 l_0_18_121)))
 (let ((?x68131 (* l_0_18_105 l_0_18_105)))
 (let ((?x68129 (* l_0_18_104 l_0_18_104)))
 (let ((?x68127 (* l_0_18_103 l_0_18_103)))
 (let ((?x68112 (* l_0_18_102 l_0_18_102)))
 (let ((?x58056 (+ (+ (* l_0_18_100 l_0_18_100) (* l_0_18_101 l_0_18_101)) ?x68112)))
 (let ((?x36408 (- (- (- (- (+ (+ (+ ?x58056 ?x68127) ?x68129) ?x68131) ?x68133) ?x68135) ?x68137) ?x68139)))
 (let ((?x68360 (+ (+ (+ (+ (+ (- (- ?x36408 ?x68141) ?x68143) ?x68150) ?x68152) ?x68154) ?x68156) ?x68158)))
 (let ((?x68367 (- (- (- (- (- (- (+ ?x68360 ?x68160) ?x68162) ?x68164) ?x68166) ?x68168) ?x68170) ?x68172)))
 (= ?x68367 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x66883 (* l_0_18_147 l_0_18_147)))
 (let ((?x66881 (* l_0_18_146 l_0_18_146)))
 (let ((?x66879 (* l_0_18_145 l_0_18_145)))
 (let ((?x66857 (* l_0_18_144 l_0_18_144)))
 (let ((?x47787 (- (- (* (- l_0_18_142) l_0_18_142) (* l_0_18_143 l_0_18_143)) ?x66857)))
 (= (- (- (- ?x47787 ?x66879) ?x66881) ?x66883) 0.0)))))))
(assert
 (>= l_0_18_1 0.0))
(assert
 (>= l_0_18_3 0.0))
(assert
 (>= l_0_18_6 0.0))
(assert
 (>= l_0_18_10 0.0))
(assert
 (>= l_0_18_15 0.0))
(assert
 (>= l_0_18_21 0.0))
(assert
 (>= l_0_18_22 0.0))
(assert
 (>= l_0_18_24 0.0))
(assert
 (>= l_0_18_27 0.0))
(assert
 (>= l_0_18_31 0.0))
(assert
 (>= l_0_18_36 0.0))
(assert
 (>= l_0_18_42 0.0))
(assert
 (>= l_0_18_43 0.0))
(assert
 (>= l_0_18_45 0.0))
(assert
 (>= l_0_18_48 0.0))
(assert
 (>= l_0_18_52 0.0))
(assert
 (>= l_0_18_57 0.0))
(assert
 (>= l_0_18_63 0.0))
(assert
 (>= l_0_18_64 0.0))
(assert
 (>= l_0_18_66 0.0))
(assert
 (>= l_0_18_69 0.0))
(assert
 (>= l_0_18_73 0.0))
(assert
 (>= l_0_18_78 0.0))
(assert
 (>= l_0_18_84 0.0))
(assert
 (>= l_0_18_85 0.0))
(assert
 (>= l_0_18_87 0.0))
(assert
 (>= l_0_18_90 0.0))
(assert
 (>= l_0_18_94 0.0))
(assert
 (>= l_0_18_99 0.0))
(assert
 (>= l_0_18_105 0.0))
(assert
 (>= l_0_18_106 0.0))
(assert
 (>= l_0_18_108 0.0))
(assert
 (>= l_0_18_111 0.0))
(assert
 (>= l_0_18_115 0.0))
(assert
 (>= l_0_18_120 0.0))
(assert
 (>= l_0_18_126 0.0))
(assert
 (>= l_0_18_127 0.0))
(assert
 (>= l_0_18_129 0.0))
(assert
 (>= l_0_18_132 0.0))
(assert
 (>= l_0_18_136 0.0))
(assert
 (>= l_0_18_141 0.0))
(assert
 (>= l_0_18_147 0.0))
(assert
 (>= l_0_18_148 0.0))
(assert
 (>= l_0_18_150 0.0))
(assert
 (>= l_0_18_153 0.0))
(assert
 (>= l_0_18_157 0.0))
(assert
 (>= l_0_18_162 0.0))
(assert
 (>= l_0_18_168 0.0))
(assert
 (>= l_0_18_169 0.0))
(assert
 (>= l_0_18_171 0.0))
(assert
 (>= l_0_18_174 0.0))
(assert
 (>= l_0_18_178 0.0))
(assert
 (>= l_0_18_183 0.0))
(assert
 (>= l_0_18_189 0.0))
(assert
 (>= l_0_18_190 0.0))
(assert
 (>= l_0_18_192 0.0))
(assert
 (>= l_0_18_195 0.0))
(assert
 (>= l_0_18_199 0.0))
(assert
 (>= l_0_18_204 0.0))
(assert
 (>= l_0_18_210 0.0))
(assert
 (>= l_0_18_211 0.0))
(assert
 (>= l_0_18_213 0.0))
(assert
 (>= l_0_18_216 0.0))
(assert
 (>= l_0_18_220 0.0))
(assert
 (>= l_0_18_225 0.0))
(assert
 (>= l_0_18_231 0.0))
(assert
 (>= l_0_18_232 0.0))
(assert
 (>= l_0_18_234 0.0))
(assert
 (>= l_0_18_237 0.0))
(assert
 (>= l_0_18_241 0.0))
(assert
 (>= l_0_18_246 0.0))
(assert
 (>= l_0_18_252 0.0))
(assert
 (>= l_0_18_253 0.0))
(assert
 (>= l_0_18_255 0.0))
(assert
 (>= l_0_18_258 0.0))
(assert
 (>= l_0_18_262 0.0))
(assert
 (>= l_0_18_267 0.0))
(assert
 (>= l_0_18_273 0.0))
(assert
 (>= l_0_18_274 0.0))
(assert
 (>= l_0_18_276 0.0))
(assert
 (>= l_0_18_279 0.0))
(assert
 (>= l_0_18_283 0.0))
(assert
 (>= l_0_18_288 0.0))
(assert
 (>= l_0_18_294 0.0))
(assert
 (>= l_0_18_295 0.0))
(assert
 (>= l_0_18_297 0.0))
(assert
 (>= l_0_18_300 0.0))
(assert
 (>= l_0_18_304 0.0))
(assert
 (>= l_0_18_309 0.0))
(assert
 (>= l_0_18_315 0.0))
(check-sat)
(get-model)