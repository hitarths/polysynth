(set-option :produce-models true); benchmark generated from python API
(set-info :status unknown)
(declare-fun l_0_0_2 () Real)
(declare-fun l_0_0_1 () Real)
(declare-fun l_0_1_3 () Real)
(declare-fun l_0_1_2 () Real)
(declare-fun l_0_1_1 () Real)
(declare-fun l_0_2_4 () Real)
(declare-fun l_0_2_3 () Real)
(declare-fun l_0_2_2 () Real)
(declare-fun l_0_2_1 () Real)
(declare-fun l_0_3_5 () Real)
(declare-fun l_0_3_4 () Real)
(declare-fun l_0_3_3 () Real)
(declare-fun l_0_3_2 () Real)
(declare-fun l_0_3_1 () Real)
(declare-fun l_0_4_6 () Real)
(declare-fun l_0_4_5 () Real)
(declare-fun l_0_4_4 () Real)
(declare-fun l_0_4_3 () Real)
(declare-fun l_0_4_2 () Real)
(declare-fun l_0_4_1 () Real)
(declare-fun l_0_5_7 () Real)
(declare-fun l_0_5_6 () Real)
(declare-fun l_0_5_5 () Real)
(declare-fun l_0_5_4 () Real)
(declare-fun l_0_5_3 () Real)
(declare-fun l_0_5_2 () Real)
(declare-fun l_0_5_1 () Real)
(declare-fun l_0_6_64 () Real)
(declare-fun l_0_6_43 () Real)
(declare-fun l_0_6_22 () Real)
(declare-fun l_0_6_148 () Real)
(declare-fun l_0_6_1 () Real)
(declare-fun l_0_6_65 () Real)
(declare-fun l_0_6_44 () Real)
(declare-fun l_0_6_23 () Real)
(declare-fun l_0_6_149 () Real)
(declare-fun l_0_6_2 () Real)
(declare-fun l_0_6_66 () Real)
(declare-fun l_0_6_45 () Real)
(declare-fun l_0_6_3 () Real)
(declare-fun l_0_6_24 () Real)
(declare-fun l_0_6_150 () Real)
(declare-fun l_0_6_68 () Real)
(declare-fun l_0_6_67 () Real)
(declare-fun l_0_6_47 () Real)
(declare-fun l_0_6_46 () Real)
(declare-fun l_0_6_5 () Real)
(declare-fun l_0_6_26 () Real)
(declare-fun l_0_6_25 () Real)
(declare-fun l_0_6_4 () Real)
(declare-fun l_0_6_152 () Real)
(declare-fun l_0_6_151 () Real)
(declare-fun l_0_6_128 () Real)
(declare-fun l_0_6_127 () Real)
(declare-fun l_0_6_86 () Real)
(declare-fun l_0_6_85 () Real)
(declare-fun l_0_6_71 () Real)
(declare-fun l_0_6_70 () Real)
(declare-fun l_0_6_50 () Real)
(declare-fun l_0_6_49 () Real)
(declare-fun l_0_6_8 () Real)
(declare-fun l_0_6_29 () Real)
(declare-fun l_0_6_28 () Real)
(declare-fun l_0_6_7 () Real)
(declare-fun l_0_6_155 () Real)
(declare-fun l_0_6_154 () Real)
(declare-fun l_0_6_107 () Real)
(declare-fun l_0_6_106 () Real)
(declare-fun l_0_6_75 () Real)
(declare-fun l_0_6_74 () Real)
(declare-fun l_0_6_54 () Real)
(declare-fun l_0_6_53 () Real)
(declare-fun l_0_6_33 () Real)
(declare-fun l_0_6_32 () Real)
(declare-fun l_0_6_159 () Real)
(declare-fun l_0_6_158 () Real)
(declare-fun l_0_6_12 () Real)
(declare-fun l_0_6_11 () Real)
(declare-fun l_0_6_80 () Real)
(declare-fun l_0_6_79 () Real)
(declare-fun l_0_6_59 () Real)
(declare-fun l_0_6_58 () Real)
(declare-fun l_0_6_38 () Real)
(declare-fun l_0_6_37 () Real)
(declare-fun l_0_6_17 () Real)
(declare-fun l_0_6_16 () Real)
(declare-fun l_0_6_164 () Real)
(declare-fun l_0_6_163 () Real)
(declare-fun l_0_6_129 () Real)
(declare-fun l_0_6_87 () Real)
(declare-fun l_0_6_108 () Real)
(declare-fun l_0_6_6 () Real)
(declare-fun l_0_6_27 () Real)
(declare-fun l_0_6_131 () Real)
(declare-fun l_0_6_130 () Real)
(declare-fun l_0_6_89 () Real)
(declare-fun l_0_6_88 () Real)
(declare-fun l_0_6_9 () Real)
(declare-fun l_0_6_30 () Real)
(declare-fun l_0_6_134 () Real)
(declare-fun l_0_6_133 () Real)
(declare-fun l_0_6_110 () Real)
(declare-fun l_0_6_109 () Real)
(declare-fun l_0_6_34 () Real)
(declare-fun l_0_6_13 () Real)
(declare-fun l_0_6_138 () Real)
(declare-fun l_0_6_137 () Real)
(declare-fun l_0_6_39 () Real)
(declare-fun l_0_6_18 () Real)
(declare-fun l_0_6_143 () Real)
(declare-fun l_0_6_142 () Real)
(declare-fun l_0_6_92 () Real)
(declare-fun l_0_6_91 () Real)
(declare-fun l_0_6_31 () Real)
(declare-fun l_0_6_113 () Real)
(declare-fun l_0_6_112 () Real)
(declare-fun l_0_6_10 () Real)
(declare-fun l_0_6_96 () Real)
(declare-fun l_0_6_95 () Real)
(declare-fun l_0_6_35 () Real)
(declare-fun l_0_6_117 () Real)
(declare-fun l_0_6_116 () Real)
(declare-fun l_0_6_14 () Real)
(declare-fun l_0_6_40 () Real)
(declare-fun l_0_6_122 () Real)
(declare-fun l_0_6_121 () Real)
(declare-fun l_0_6_101 () Real)
(declare-fun l_0_6_100 () Real)
(declare-fun l_0_6_19 () Real)
(declare-fun l_0_6_36 () Real)
(declare-fun l_0_6_15 () Real)
(declare-fun l_0_6_41 () Real)
(declare-fun l_0_6_20 () Real)
(declare-fun l_0_6_42 () Real)
(declare-fun l_0_6_21 () Real)
(declare-fun l_0_6_81 () Real)
(declare-fun l_0_6_69 () Real)
(declare-fun l_0_6_60 () Real)
(declare-fun l_0_6_48 () Real)
(declare-fun l_0_6_165 () Real)
(declare-fun l_0_6_153 () Real)
(declare-fun l_0_6_82 () Real)
(declare-fun l_0_6_73 () Real)
(declare-fun l_0_6_72 () Real)
(declare-fun l_0_6_61 () Real)
(declare-fun l_0_6_52 () Real)
(declare-fun l_0_6_51 () Real)
(declare-fun l_0_6_166 () Real)
(declare-fun l_0_6_157 () Real)
(declare-fun l_0_6_156 () Real)
(declare-fun l_0_6_83 () Real)
(declare-fun l_0_6_78 () Real)
(declare-fun l_0_6_77 () Real)
(declare-fun l_0_6_76 () Real)
(declare-fun l_0_6_62 () Real)
(declare-fun l_0_6_57 () Real)
(declare-fun l_0_6_56 () Real)
(declare-fun l_0_6_55 () Real)
(declare-fun l_0_6_167 () Real)
(declare-fun l_0_6_162 () Real)
(declare-fun l_0_6_161 () Real)
(declare-fun l_0_6_160 () Real)
(declare-fun l_0_6_84 () Real)
(declare-fun l_0_6_63 () Real)
(declare-fun l_0_6_168 () Real)
(declare-fun l_0_6_132 () Real)
(declare-fun l_0_6_144 () Real)
(declare-fun l_0_6_145 () Real)
(declare-fun l_0_6_136 () Real)
(declare-fun l_0_6_135 () Real)
(declare-fun l_0_6_123 () Real)
(declare-fun l_0_6_111 () Real)
(declare-fun l_0_6_90 () Real)
(declare-fun l_0_6_102 () Real)
(declare-fun l_0_6_146 () Real)
(declare-fun l_0_6_141 () Real)
(declare-fun l_0_6_140 () Real)
(declare-fun l_0_6_139 () Real)
(declare-fun l_0_6_147 () Real)
(declare-fun l_0_6_124 () Real)
(declare-fun l_0_6_115 () Real)
(declare-fun l_0_6_114 () Real)
(declare-fun l_0_6_94 () Real)
(declare-fun l_0_6_103 () Real)
(declare-fun l_0_6_93 () Real)
(declare-fun l_0_6_125 () Real)
(declare-fun l_0_6_120 () Real)
(declare-fun l_0_6_119 () Real)
(declare-fun l_0_6_118 () Real)
(declare-fun l_0_6_99 () Real)
(declare-fun l_0_6_104 () Real)
(declare-fun l_0_6_98 () Real)
(declare-fun l_0_6_97 () Real)
(declare-fun l_0_6_126 () Real)
(declare-fun l_0_6_105 () Real)
(declare-fun l_0_7_64 () Real)
(declare-fun l_0_7_43 () Real)
(declare-fun l_0_7_22 () Real)
(declare-fun l_0_7_190 () Real)
(declare-fun l_0_7_1 () Real)
(declare-fun _a_12_ () Real)
(declare-fun l_0_7_65 () Real)
(declare-fun l_0_7_44 () Real)
(declare-fun l_0_7_23 () Real)
(declare-fun l_0_7_191 () Real)
(declare-fun l_0_7_2 () Real)
(declare-fun _a_13_ () Real)
(declare-fun l_0_7_79 () Real)
(declare-fun l_0_7_58 () Real)
(declare-fun l_0_7_37 () Real)
(declare-fun l_0_7_205 () Real)
(declare-fun l_0_7_127 () Real)
(declare-fun l_0_7_16 () Real)
(declare-fun l_0_7_66 () Real)
(declare-fun l_0_7_45 () Real)
(declare-fun l_0_7_3 () Real)
(declare-fun l_0_7_24 () Real)
(declare-fun l_0_7_192 () Real)
(declare-fun l_0_7_68 () Real)
(declare-fun l_0_7_67 () Real)
(declare-fun l_0_7_47 () Real)
(declare-fun l_0_7_46 () Real)
(declare-fun l_0_7_5 () Real)
(declare-fun l_0_7_26 () Real)
(declare-fun l_0_7_25 () Real)
(declare-fun l_0_7_4 () Real)
(declare-fun l_0_7_194 () Real)
(declare-fun l_0_7_193 () Real)
(declare-fun l_0_7_128 () Real)
(declare-fun l_0_7_86 () Real)
(declare-fun l_0_7_85 () Real)
(declare-fun l_0_7_71 () Real)
(declare-fun l_0_7_70 () Real)
(declare-fun l_0_7_50 () Real)
(declare-fun l_0_7_49 () Real)
(declare-fun l_0_7_8 () Real)
(declare-fun l_0_7_29 () Real)
(declare-fun l_0_7_28 () Real)
(declare-fun l_0_7_7 () Real)
(declare-fun l_0_7_197 () Real)
(declare-fun l_0_7_196 () Real)
(declare-fun l_0_7_170 () Real)
(declare-fun l_0_7_169 () Real)
(declare-fun l_0_7_149 () Real)
(declare-fun l_0_7_148 () Real)
(declare-fun l_0_7_107 () Real)
(declare-fun l_0_7_106 () Real)
(declare-fun l_0_7_75 () Real)
(declare-fun l_0_7_74 () Real)
(declare-fun l_0_7_54 () Real)
(declare-fun l_0_7_53 () Real)
(declare-fun l_0_7_33 () Real)
(declare-fun l_0_7_32 () Real)
(declare-fun l_0_7_201 () Real)
(declare-fun l_0_7_200 () Real)
(declare-fun l_0_7_12 () Real)
(declare-fun l_0_7_11 () Real)
(declare-fun l_0_7_80 () Real)
(declare-fun l_0_7_59 () Real)
(declare-fun l_0_7_38 () Real)
(declare-fun l_0_7_206 () Real)
(declare-fun l_0_7_17 () Real)
(declare-fun l_0_7_129 () Real)
(declare-fun l_0_7_87 () Real)
(declare-fun l_0_7_171 () Real)
(declare-fun l_0_7_150 () Real)
(declare-fun l_0_7_108 () Real)
(declare-fun l_0_7_6 () Real)
(declare-fun l_0_7_27 () Real)
(declare-fun l_0_7_131 () Real)
(declare-fun l_0_7_130 () Real)
(declare-fun l_0_7_89 () Real)
(declare-fun l_0_7_88 () Real)
(declare-fun l_0_7_9 () Real)
(declare-fun l_0_7_30 () Real)
(declare-fun l_0_7_173 () Real)
(declare-fun l_0_7_172 () Real)
(declare-fun l_0_7_152 () Real)
(declare-fun l_0_7_151 () Real)
(declare-fun l_0_7_134 () Real)
(declare-fun l_0_7_133 () Real)
(declare-fun l_0_7_110 () Real)
(declare-fun l_0_7_109 () Real)
(declare-fun l_0_7_34 () Real)
(declare-fun l_0_7_13 () Real)
(declare-fun l_0_7_138 () Real)
(declare-fun l_0_7_137 () Real)
(declare-fun l_0_7_39 () Real)
(declare-fun l_0_7_18 () Real)
(declare-fun l_0_7_143 () Real)
(declare-fun l_0_7_142 () Real)
(declare-fun l_0_7_92 () Real)
(declare-fun l_0_7_91 () Real)
(declare-fun l_0_7_31 () Real)
(declare-fun l_0_7_176 () Real)
(declare-fun l_0_7_175 () Real)
(declare-fun l_0_7_155 () Real)
(declare-fun l_0_7_154 () Real)
(declare-fun l_0_7_113 () Real)
(declare-fun l_0_7_112 () Real)
(declare-fun l_0_7_10 () Real)
(declare-fun l_0_7_96 () Real)
(declare-fun l_0_7_95 () Real)
(declare-fun l_0_7_35 () Real)
(declare-fun l_0_7_180 () Real)
(declare-fun l_0_7_179 () Real)
(declare-fun l_0_7_159 () Real)
(declare-fun l_0_7_158 () Real)
(declare-fun l_0_7_117 () Real)
(declare-fun l_0_7_116 () Real)
(declare-fun l_0_7_14 () Real)
(declare-fun l_0_7_40 () Real)
(declare-fun l_0_7_185 () Real)
(declare-fun l_0_7_184 () Real)
(declare-fun l_0_7_164 () Real)
(declare-fun l_0_7_163 () Real)
(declare-fun l_0_7_122 () Real)
(declare-fun l_0_7_121 () Real)
(declare-fun l_0_7_101 () Real)
(declare-fun l_0_7_100 () Real)
(declare-fun l_0_7_19 () Real)
(declare-fun l_0_7_36 () Real)
(declare-fun l_0_7_15 () Real)
(declare-fun l_0_7_41 () Real)
(declare-fun l_0_7_20 () Real)
(declare-fun l_0_7_42 () Real)
(declare-fun l_0_7_21 () Real)
(declare-fun l_0_7_81 () Real)
(declare-fun l_0_7_69 () Real)
(declare-fun l_0_7_60 () Real)
(declare-fun l_0_7_48 () Real)
(declare-fun l_0_7_207 () Real)
(declare-fun l_0_7_195 () Real)
(declare-fun l_0_7_82 () Real)
(declare-fun l_0_7_73 () Real)
(declare-fun l_0_7_72 () Real)
(declare-fun l_0_7_61 () Real)
(declare-fun l_0_7_52 () Real)
(declare-fun l_0_7_51 () Real)
(declare-fun l_0_7_208 () Real)
(declare-fun l_0_7_199 () Real)
(declare-fun l_0_7_198 () Real)
(declare-fun l_0_7_83 () Real)
(declare-fun l_0_7_78 () Real)
(declare-fun l_0_7_77 () Real)
(declare-fun l_0_7_76 () Real)
(declare-fun l_0_7_62 () Real)
(declare-fun l_0_7_57 () Real)
(declare-fun l_0_7_56 () Real)
(declare-fun l_0_7_55 () Real)
(declare-fun l_0_7_209 () Real)
(declare-fun l_0_7_204 () Real)
(declare-fun l_0_7_203 () Real)
(declare-fun l_0_7_202 () Real)
(declare-fun l_0_7_84 () Real)
(declare-fun l_0_7_63 () Real)
(declare-fun l_0_7_210 () Real)
(declare-fun l_0_7_132 () Real)
(declare-fun l_0_7_144 () Real)
(declare-fun l_0_7_186 () Real)
(declare-fun l_0_7_174 () Real)
(declare-fun l_0_7_165 () Real)
(declare-fun l_0_7_153 () Real)
(declare-fun l_0_7_145 () Real)
(declare-fun l_0_7_136 () Real)
(declare-fun l_0_7_135 () Real)
(declare-fun l_0_7_123 () Real)
(declare-fun l_0_7_111 () Real)
(declare-fun l_0_7_90 () Real)
(declare-fun l_0_7_102 () Real)
(declare-fun l_0_7_146 () Real)
(declare-fun l_0_7_141 () Real)
(declare-fun l_0_7_140 () Real)
(declare-fun l_0_7_139 () Real)
(declare-fun l_0_7_147 () Real)
(declare-fun l_0_7_187 () Real)
(declare-fun l_0_7_178 () Real)
(declare-fun l_0_7_177 () Real)
(declare-fun l_0_7_166 () Real)
(declare-fun l_0_7_157 () Real)
(declare-fun l_0_7_156 () Real)
(declare-fun l_0_7_124 () Real)
(declare-fun l_0_7_115 () Real)
(declare-fun l_0_7_114 () Real)
(declare-fun l_0_7_94 () Real)
(declare-fun l_0_7_103 () Real)
(declare-fun l_0_7_93 () Real)
(declare-fun l_0_7_188 () Real)
(declare-fun l_0_7_183 () Real)
(declare-fun l_0_7_182 () Real)
(declare-fun l_0_7_181 () Real)
(declare-fun l_0_7_167 () Real)
(declare-fun l_0_7_162 () Real)
(declare-fun l_0_7_161 () Real)
(declare-fun l_0_7_160 () Real)
(declare-fun l_0_7_125 () Real)
(declare-fun l_0_7_120 () Real)
(declare-fun l_0_7_119 () Real)
(declare-fun l_0_7_118 () Real)
(declare-fun l_0_7_99 () Real)
(declare-fun l_0_7_104 () Real)
(declare-fun l_0_7_98 () Real)
(declare-fun l_0_7_97 () Real)
(declare-fun l_0_7_189 () Real)
(declare-fun l_0_7_168 () Real)
(declare-fun l_0_7_126 () Real)
(declare-fun l_0_7_105 () Real)
(declare-fun l_0_8_64 () Real)
(declare-fun l_0_8_79 () Real)
(declare-fun l_0_8_43 () Real)
(declare-fun l_0_8_58 () Real)
(declare-fun l_0_8_22 () Real)
(declare-fun l_0_8_37 () Real)
(declare-fun l_0_8_226 () Real)
(declare-fun l_0_8_211 () Real)
(declare-fun l_0_8_205 () Real)
(declare-fun l_0_8_190 () Real)
(declare-fun l_0_8_127 () Real)
(declare-fun l_0_8_1 () Real)
(declare-fun l_0_8_16 () Real)
(declare-fun l_0_8_65 () Real)
(declare-fun l_0_8_44 () Real)
(declare-fun l_0_8_23 () Real)
(declare-fun l_0_8_212 () Real)
(declare-fun l_0_8_191 () Real)
(declare-fun l_0_8_2 () Real)
(declare-fun l_0_8_66 () Real)
(declare-fun l_0_8_45 () Real)
(declare-fun l_0_8_3 () Real)
(declare-fun l_0_8_24 () Real)
(declare-fun l_0_8_213 () Real)
(declare-fun l_0_8_192 () Real)
(declare-fun l_0_8_68 () Real)
(declare-fun l_0_8_67 () Real)
(declare-fun l_0_8_47 () Real)
(declare-fun l_0_8_46 () Real)
(declare-fun l_0_8_5 () Real)
(declare-fun l_0_8_26 () Real)
(declare-fun l_0_8_25 () Real)
(declare-fun l_0_8_215 () Real)
(declare-fun l_0_8_214 () Real)
(declare-fun l_0_8_4 () Real)
(declare-fun l_0_8_194 () Real)
(declare-fun l_0_8_193 () Real)
(declare-fun l_0_8_128 () Real)
(declare-fun l_0_8_86 () Real)
(declare-fun l_0_8_85 () Real)
(declare-fun l_0_8_71 () Real)
(declare-fun l_0_8_70 () Real)
(declare-fun l_0_8_50 () Real)
(declare-fun l_0_8_49 () Real)
(declare-fun l_0_8_8 () Real)
(declare-fun l_0_8_29 () Real)
(declare-fun l_0_8_28 () Real)
(declare-fun l_0_8_218 () Real)
(declare-fun l_0_8_217 () Real)
(declare-fun l_0_8_7 () Real)
(declare-fun l_0_8_197 () Real)
(declare-fun l_0_8_196 () Real)
(declare-fun l_0_8_170 () Real)
(declare-fun l_0_8_169 () Real)
(declare-fun l_0_8_149 () Real)
(declare-fun l_0_8_148 () Real)
(declare-fun l_0_8_107 () Real)
(declare-fun l_0_8_106 () Real)
(declare-fun l_0_8_75 () Real)
(declare-fun l_0_8_74 () Real)
(declare-fun l_0_8_54 () Real)
(declare-fun l_0_8_53 () Real)
(declare-fun l_0_8_33 () Real)
(declare-fun l_0_8_32 () Real)
(declare-fun l_0_8_222 () Real)
(declare-fun l_0_8_221 () Real)
(declare-fun l_0_8_201 () Real)
(declare-fun l_0_8_200 () Real)
(declare-fun l_0_8_12 () Real)
(declare-fun l_0_8_11 () Real)
(declare-fun l_0_8_80 () Real)
(declare-fun l_0_8_59 () Real)
(declare-fun l_0_8_38 () Real)
(declare-fun l_0_8_227 () Real)
(declare-fun l_0_8_206 () Real)
(declare-fun l_0_8_17 () Real)
(declare-fun l_0_8_129 () Real)
(declare-fun l_0_8_87 () Real)
(declare-fun l_0_8_171 () Real)
(declare-fun l_0_8_150 () Real)
(declare-fun l_0_8_108 () Real)
(declare-fun l_0_8_6 () Real)
(declare-fun l_0_8_27 () Real)
(declare-fun l_0_8_131 () Real)
(declare-fun l_0_8_130 () Real)
(declare-fun l_0_8_89 () Real)
(declare-fun l_0_8_88 () Real)
(declare-fun l_0_8_9 () Real)
(declare-fun l_0_8_30 () Real)
(declare-fun l_0_8_173 () Real)
(declare-fun l_0_8_172 () Real)
(declare-fun l_0_8_152 () Real)
(declare-fun l_0_8_151 () Real)
(declare-fun l_0_8_134 () Real)
(declare-fun l_0_8_133 () Real)
(declare-fun l_0_8_110 () Real)
(declare-fun l_0_8_109 () Real)
(declare-fun l_0_8_34 () Real)
(declare-fun l_0_8_13 () Real)
(declare-fun l_0_8_138 () Real)
(declare-fun l_0_8_137 () Real)
(declare-fun l_0_8_39 () Real)
(declare-fun l_0_8_18 () Real)
(declare-fun l_0_8_143 () Real)
(declare-fun l_0_8_142 () Real)
(declare-fun l_0_8_92 () Real)
(declare-fun l_0_8_91 () Real)
(declare-fun l_0_8_31 () Real)
(declare-fun l_0_8_176 () Real)
(declare-fun l_0_8_175 () Real)
(declare-fun l_0_8_155 () Real)
(declare-fun l_0_8_154 () Real)
(declare-fun l_0_8_113 () Real)
(declare-fun l_0_8_112 () Real)
(declare-fun l_0_8_10 () Real)
(declare-fun l_0_8_96 () Real)
(declare-fun l_0_8_95 () Real)
(declare-fun l_0_8_35 () Real)
(declare-fun l_0_8_180 () Real)
(declare-fun l_0_8_179 () Real)
(declare-fun l_0_8_159 () Real)
(declare-fun l_0_8_158 () Real)
(declare-fun l_0_8_117 () Real)
(declare-fun l_0_8_116 () Real)
(declare-fun l_0_8_14 () Real)
(declare-fun l_0_8_40 () Real)
(declare-fun l_0_8_185 () Real)
(declare-fun l_0_8_184 () Real)
(declare-fun l_0_8_164 () Real)
(declare-fun l_0_8_163 () Real)
(declare-fun l_0_8_122 () Real)
(declare-fun l_0_8_121 () Real)
(declare-fun l_0_8_101 () Real)
(declare-fun l_0_8_100 () Real)
(declare-fun l_0_8_19 () Real)
(declare-fun l_0_8_36 () Real)
(declare-fun l_0_8_15 () Real)
(declare-fun l_0_8_41 () Real)
(declare-fun l_0_8_20 () Real)
(declare-fun l_0_8_42 () Real)
(declare-fun l_0_8_21 () Real)
(declare-fun l_0_8_81 () Real)
(declare-fun l_0_8_69 () Real)
(declare-fun l_0_8_60 () Real)
(declare-fun l_0_8_48 () Real)
(declare-fun l_0_8_228 () Real)
(declare-fun l_0_8_216 () Real)
(declare-fun l_0_8_207 () Real)
(declare-fun l_0_8_195 () Real)
(declare-fun l_0_8_82 () Real)
(declare-fun l_0_8_73 () Real)
(declare-fun l_0_8_72 () Real)
(declare-fun l_0_8_61 () Real)
(declare-fun l_0_8_52 () Real)
(declare-fun l_0_8_51 () Real)
(declare-fun l_0_8_229 () Real)
(declare-fun l_0_8_220 () Real)
(declare-fun l_0_8_219 () Real)
(declare-fun l_0_8_208 () Real)
(declare-fun l_0_8_199 () Real)
(declare-fun l_0_8_198 () Real)
(declare-fun l_0_8_83 () Real)
(declare-fun l_0_8_78 () Real)
(declare-fun l_0_8_77 () Real)
(declare-fun l_0_8_76 () Real)
(declare-fun l_0_8_62 () Real)
(declare-fun l_0_8_57 () Real)
(declare-fun l_0_8_56 () Real)
(declare-fun l_0_8_55 () Real)
(declare-fun l_0_8_230 () Real)
(declare-fun l_0_8_225 () Real)
(declare-fun l_0_8_224 () Real)
(declare-fun l_0_8_223 () Real)
(declare-fun l_0_8_209 () Real)
(declare-fun l_0_8_204 () Real)
(declare-fun l_0_8_203 () Real)
(declare-fun l_0_8_202 () Real)
(declare-fun l_0_8_84 () Real)
(declare-fun l_0_8_63 () Real)
(declare-fun l_0_8_231 () Real)
(declare-fun l_0_8_210 () Real)
(declare-fun l_0_8_132 () Real)
(declare-fun l_0_8_144 () Real)
(declare-fun l_0_8_186 () Real)
(declare-fun l_0_8_174 () Real)
(declare-fun l_0_8_165 () Real)
(declare-fun l_0_8_153 () Real)
(declare-fun l_0_8_145 () Real)
(declare-fun l_0_8_136 () Real)
(declare-fun l_0_8_135 () Real)
(declare-fun l_0_8_123 () Real)
(declare-fun l_0_8_111 () Real)
(declare-fun l_0_8_90 () Real)
(declare-fun l_0_8_102 () Real)
(declare-fun l_0_8_146 () Real)
(declare-fun l_0_8_141 () Real)
(declare-fun l_0_8_140 () Real)
(declare-fun l_0_8_139 () Real)
(declare-fun l_0_8_147 () Real)
(declare-fun l_0_8_187 () Real)
(declare-fun l_0_8_178 () Real)
(declare-fun l_0_8_177 () Real)
(declare-fun l_0_8_166 () Real)
(declare-fun l_0_8_157 () Real)
(declare-fun l_0_8_156 () Real)
(declare-fun l_0_8_124 () Real)
(declare-fun l_0_8_115 () Real)
(declare-fun l_0_8_114 () Real)
(declare-fun l_0_8_94 () Real)
(declare-fun l_0_8_103 () Real)
(declare-fun l_0_8_93 () Real)
(declare-fun l_0_8_188 () Real)
(declare-fun l_0_8_183 () Real)
(declare-fun l_0_8_182 () Real)
(declare-fun l_0_8_181 () Real)
(declare-fun l_0_8_167 () Real)
(declare-fun l_0_8_162 () Real)
(declare-fun l_0_8_161 () Real)
(declare-fun l_0_8_160 () Real)
(declare-fun l_0_8_125 () Real)
(declare-fun l_0_8_120 () Real)
(declare-fun l_0_8_119 () Real)
(declare-fun l_0_8_118 () Real)
(declare-fun l_0_8_99 () Real)
(declare-fun l_0_8_104 () Real)
(declare-fun l_0_8_98 () Real)
(declare-fun l_0_8_97 () Real)
(declare-fun l_0_8_189 () Real)
(declare-fun l_0_8_168 () Real)
(declare-fun l_0_8_126 () Real)
(declare-fun l_0_8_105 () Real)
(declare-fun l_0_9_84 () Real)
(declare-fun l_0_9_83 () Real)
(declare-fun l_0_9_82 () Real)
(declare-fun l_0_9_81 () Real)
(declare-fun l_0_9_80 () Real)
(declare-fun l_0_9_79 () Real)
(declare-fun l_0_9_64 () Real)
(declare-fun l_0_9_63 () Real)
(declare-fun l_0_9_62 () Real)
(declare-fun l_0_9_61 () Real)
(declare-fun l_0_9_60 () Real)
(declare-fun l_0_9_59 () Real)
(declare-fun l_0_9_58 () Real)
(declare-fun l_0_9_43 () Real)
(declare-fun l_0_9_42 () Real)
(declare-fun l_0_9_41 () Real)
(declare-fun l_0_9_40 () Real)
(declare-fun l_0_9_39 () Real)
(declare-fun l_0_9_38 () Real)
(declare-fun l_0_9_37 () Real)
(declare-fun l_0_9_252 () Real)
(declare-fun l_0_9_251 () Real)
(declare-fun l_0_9_250 () Real)
(declare-fun l_0_9_249 () Real)
(declare-fun l_0_9_248 () Real)
(declare-fun l_0_9_247 () Real)
(declare-fun l_0_9_231 () Real)
(declare-fun l_0_9_230 () Real)
(declare-fun l_0_9_229 () Real)
(declare-fun l_0_9_228 () Real)
(declare-fun l_0_9_227 () Real)
(declare-fun l_0_9_226 () Real)
(declare-fun l_0_9_22 () Real)
(declare-fun l_0_9_210 () Real)
(declare-fun l_0_9_21 () Real)
(declare-fun l_0_9_209 () Real)
(declare-fun l_0_9_208 () Real)
(declare-fun l_0_9_207 () Real)
(declare-fun l_0_9_206 () Real)
(declare-fun l_0_9_205 () Real)
(declare-fun l_0_9_20 () Real)
(declare-fun l_0_9_19 () Real)
(declare-fun l_0_9_18 () Real)
(declare-fun l_0_9_17 () Real)
(declare-fun l_0_9_16 () Real)
(declare-fun l_0_9_142 () Real)
(declare-fun l_0_9_127 () Real)
(declare-fun l_0_9_1 () Real)
(declare-fun l_0_9_232 () Real)
(declare-fun l_0_9_211 () Real)
(declare-fun l_0_9_190 () Real)
(declare-fun _a_6_ () Real)
(declare-fun l_0_9_66 () Real)
(declare-fun l_0_9_65 () Real)
(declare-fun l_0_9_45 () Real)
(declare-fun l_0_9_44 () Real)
(declare-fun l_0_9_3 () Real)
(declare-fun l_0_9_24 () Real)
(declare-fun l_0_9_234 () Real)
(declare-fun l_0_9_233 () Real)
(declare-fun l_0_9_23 () Real)
(declare-fun l_0_9_213 () Real)
(declare-fun l_0_9_212 () Real)
(declare-fun l_0_9_2 () Real)
(declare-fun l_0_9_192 () Real)
(declare-fun l_0_9_191 () Real)
(declare-fun _a_7_ () Real)
(declare-fun l_0_9_75 () Real)
(declare-fun l_0_9_74 () Real)
(declare-fun l_0_9_54 () Real)
(declare-fun l_0_9_53 () Real)
(declare-fun l_0_9_33 () Real)
(declare-fun l_0_9_243 () Real)
(declare-fun l_0_9_242 () Real)
(declare-fun l_0_9_32 () Real)
(declare-fun l_0_9_222 () Real)
(declare-fun l_0_9_221 () Real)
(declare-fun l_0_9_201 () Real)
(declare-fun l_0_9_200 () Real)
(declare-fun l_0_9_12 () Real)
(declare-fun l_0_9_11 () Real)
(declare-fun _a_8_ () Real)
(declare-fun _a_9_ () Real)
(declare-fun _a_10_ () Real)
(declare-fun l_0_9_78 () Real)
(declare-fun l_0_9_77 () Real)
(declare-fun l_0_9_76 () Real)
(declare-fun l_0_9_57 () Real)
(declare-fun l_0_9_56 () Real)
(declare-fun l_0_9_55 () Real)
(declare-fun l_0_9_36 () Real)
(declare-fun l_0_9_35 () Real)
(declare-fun l_0_9_34 () Real)
(declare-fun l_0_9_246 () Real)
(declare-fun l_0_9_245 () Real)
(declare-fun l_0_9_244 () Real)
(declare-fun l_0_9_225 () Real)
(declare-fun l_0_9_224 () Real)
(declare-fun l_0_9_223 () Real)
(declare-fun l_0_9_204 () Real)
(declare-fun l_0_9_203 () Real)
(declare-fun l_0_9_202 () Real)
(declare-fun l_0_9_15 () Real)
(declare-fun l_0_9_14 () Real)
(declare-fun l_0_9_13 () Real)
(declare-fun _a_11_ () Real)
(declare-fun l_0_9_68 () Real)
(declare-fun l_0_9_67 () Real)
(declare-fun l_0_9_47 () Real)
(declare-fun l_0_9_46 () Real)
(declare-fun l_0_9_5 () Real)
(declare-fun l_0_9_26 () Real)
(declare-fun l_0_9_236 () Real)
(declare-fun l_0_9_235 () Real)
(declare-fun l_0_9_25 () Real)
(declare-fun l_0_9_215 () Real)
(declare-fun l_0_9_214 () Real)
(declare-fun l_0_9_4 () Real)
(declare-fun l_0_9_194 () Real)
(declare-fun l_0_9_193 () Real)
(declare-fun l_0_9_128 () Real)
(declare-fun l_0_9_86 () Real)
(declare-fun l_0_9_85 () Real)
(declare-fun l_0_9_71 () Real)
(declare-fun l_0_9_70 () Real)
(declare-fun l_0_9_50 () Real)
(declare-fun l_0_9_49 () Real)
(declare-fun l_0_9_8 () Real)
(declare-fun l_0_9_29 () Real)
(declare-fun l_0_9_239 () Real)
(declare-fun l_0_9_238 () Real)
(declare-fun l_0_9_28 () Real)
(declare-fun l_0_9_218 () Real)
(declare-fun l_0_9_217 () Real)
(declare-fun l_0_9_7 () Real)
(declare-fun l_0_9_197 () Real)
(declare-fun l_0_9_196 () Real)
(declare-fun l_0_9_170 () Real)
(declare-fun l_0_9_169 () Real)
(declare-fun l_0_9_149 () Real)
(declare-fun l_0_9_148 () Real)
(declare-fun l_0_9_107 () Real)
(declare-fun l_0_9_106 () Real)
(declare-fun l_0_9_129 () Real)
(declare-fun l_0_9_87 () Real)
(declare-fun l_0_9_171 () Real)
(declare-fun l_0_9_150 () Real)
(declare-fun l_0_9_108 () Real)
(declare-fun l_0_9_6 () Real)
(declare-fun l_0_9_27 () Real)
(declare-fun l_0_9_131 () Real)
(declare-fun l_0_9_130 () Real)
(declare-fun l_0_9_89 () Real)
(declare-fun l_0_9_88 () Real)
(declare-fun l_0_9_9 () Real)
(declare-fun l_0_9_30 () Real)
(declare-fun l_0_9_173 () Real)
(declare-fun l_0_9_172 () Real)
(declare-fun l_0_9_152 () Real)
(declare-fun l_0_9_151 () Real)
(declare-fun l_0_9_134 () Real)
(declare-fun l_0_9_133 () Real)
(declare-fun l_0_9_110 () Real)
(declare-fun l_0_9_109 () Real)
(declare-fun l_0_9_138 () Real)
(declare-fun l_0_9_137 () Real)
(declare-fun l_0_9_143 () Real)
(declare-fun l_0_9_92 () Real)
(declare-fun l_0_9_91 () Real)
(declare-fun l_0_9_31 () Real)
(declare-fun l_0_9_176 () Real)
(declare-fun l_0_9_175 () Real)
(declare-fun l_0_9_155 () Real)
(declare-fun l_0_9_154 () Real)
(declare-fun l_0_9_113 () Real)
(declare-fun l_0_9_112 () Real)
(declare-fun l_0_9_10 () Real)
(declare-fun l_0_9_96 () Real)
(declare-fun l_0_9_95 () Real)
(declare-fun l_0_9_180 () Real)
(declare-fun l_0_9_179 () Real)
(declare-fun l_0_9_159 () Real)
(declare-fun l_0_9_158 () Real)
(declare-fun l_0_9_117 () Real)
(declare-fun l_0_9_116 () Real)
(declare-fun l_0_9_185 () Real)
(declare-fun l_0_9_184 () Real)
(declare-fun l_0_9_164 () Real)
(declare-fun l_0_9_163 () Real)
(declare-fun l_0_9_122 () Real)
(declare-fun l_0_9_121 () Real)
(declare-fun l_0_9_101 () Real)
(declare-fun l_0_9_100 () Real)
(declare-fun l_0_9_69 () Real)
(declare-fun l_0_9_48 () Real)
(declare-fun l_0_9_237 () Real)
(declare-fun l_0_9_216 () Real)
(declare-fun l_0_9_195 () Real)
(declare-fun l_0_9_73 () Real)
(declare-fun l_0_9_72 () Real)
(declare-fun l_0_9_52 () Real)
(declare-fun l_0_9_51 () Real)
(declare-fun l_0_9_241 () Real)
(declare-fun l_0_9_240 () Real)
(declare-fun l_0_9_220 () Real)
(declare-fun l_0_9_219 () Real)
(declare-fun l_0_9_199 () Real)
(declare-fun l_0_9_198 () Real)
(declare-fun l_0_9_132 () Real)
(declare-fun l_0_9_144 () Real)
(declare-fun l_0_9_186 () Real)
(declare-fun l_0_9_174 () Real)
(declare-fun l_0_9_165 () Real)
(declare-fun l_0_9_153 () Real)
(declare-fun l_0_9_145 () Real)
(declare-fun l_0_9_136 () Real)
(declare-fun l_0_9_135 () Real)
(declare-fun l_0_9_123 () Real)
(declare-fun l_0_9_111 () Real)
(declare-fun l_0_9_90 () Real)
(declare-fun l_0_9_102 () Real)
(declare-fun l_0_9_146 () Real)
(declare-fun l_0_9_141 () Real)
(declare-fun l_0_9_140 () Real)
(declare-fun l_0_9_139 () Real)
(declare-fun l_0_9_147 () Real)
(declare-fun l_0_9_187 () Real)
(declare-fun l_0_9_178 () Real)
(declare-fun l_0_9_177 () Real)
(declare-fun l_0_9_166 () Real)
(declare-fun l_0_9_157 () Real)
(declare-fun l_0_9_156 () Real)
(declare-fun l_0_9_124 () Real)
(declare-fun l_0_9_115 () Real)
(declare-fun l_0_9_114 () Real)
(declare-fun l_0_9_94 () Real)
(declare-fun l_0_9_103 () Real)
(declare-fun l_0_9_93 () Real)
(declare-fun l_0_9_188 () Real)
(declare-fun l_0_9_183 () Real)
(declare-fun l_0_9_182 () Real)
(declare-fun l_0_9_181 () Real)
(declare-fun l_0_9_167 () Real)
(declare-fun l_0_9_162 () Real)
(declare-fun l_0_9_161 () Real)
(declare-fun l_0_9_160 () Real)
(declare-fun l_0_9_125 () Real)
(declare-fun l_0_9_120 () Real)
(declare-fun l_0_9_119 () Real)
(declare-fun l_0_9_118 () Real)
(declare-fun l_0_9_99 () Real)
(declare-fun l_0_9_104 () Real)
(declare-fun l_0_9_98 () Real)
(declare-fun l_0_9_97 () Real)
(declare-fun l_0_9_189 () Real)
(declare-fun l_0_9_168 () Real)
(declare-fun l_0_9_126 () Real)
(declare-fun l_0_9_105 () Real)
(declare-fun l_0_10_64 () Real)
(declare-fun l_0_10_43 () Real)
(declare-fun l_0_10_253 () Real)
(declare-fun l_0_10_232 () Real)
(declare-fun l_0_10_22 () Real)
(declare-fun l_0_10_211 () Real)
(declare-fun l_0_10_190 () Real)
(declare-fun l_0_10_1 () Real)
(declare-fun l_0_10_66 () Real)
(declare-fun l_0_10_65 () Real)
(declare-fun l_0_10_45 () Real)
(declare-fun l_0_10_44 () Real)
(declare-fun l_0_10_3 () Real)
(declare-fun l_0_10_255 () Real)
(declare-fun l_0_10_254 () Real)
(declare-fun l_0_10_24 () Real)
(declare-fun l_0_10_234 () Real)
(declare-fun l_0_10_233 () Real)
(declare-fun l_0_10_23 () Real)
(declare-fun l_0_10_213 () Real)
(declare-fun l_0_10_212 () Real)
(declare-fun l_0_10_2 () Real)
(declare-fun l_0_10_192 () Real)
(declare-fun l_0_10_191 () Real)
(declare-fun l_0_10_75 () Real)
(declare-fun l_0_10_74 () Real)
(declare-fun l_0_10_54 () Real)
(declare-fun l_0_10_53 () Real)
(declare-fun l_0_10_264 () Real)
(declare-fun l_0_10_263 () Real)
(declare-fun l_0_10_33 () Real)
(declare-fun l_0_10_243 () Real)
(declare-fun l_0_10_242 () Real)
(declare-fun l_0_10_32 () Real)
(declare-fun l_0_10_222 () Real)
(declare-fun l_0_10_221 () Real)
(declare-fun l_0_10_201 () Real)
(declare-fun l_0_10_200 () Real)
(declare-fun l_0_10_12 () Real)
(declare-fun l_0_10_11 () Real)
(declare-fun l_0_10_78 () Real)
(declare-fun l_0_10_77 () Real)
(declare-fun l_0_10_76 () Real)
(declare-fun l_0_10_57 () Real)
(declare-fun l_0_10_56 () Real)
(declare-fun l_0_10_55 () Real)
(declare-fun l_0_10_36 () Real)
(declare-fun l_0_10_35 () Real)
(declare-fun l_0_10_34 () Real)
(declare-fun l_0_10_267 () Real)
(declare-fun l_0_10_266 () Real)
(declare-fun l_0_10_265 () Real)
(declare-fun l_0_10_246 () Real)
(declare-fun l_0_10_245 () Real)
(declare-fun l_0_10_244 () Real)
(declare-fun l_0_10_225 () Real)
(declare-fun l_0_10_224 () Real)
(declare-fun l_0_10_223 () Real)
(declare-fun l_0_10_204 () Real)
(declare-fun l_0_10_203 () Real)
(declare-fun l_0_10_202 () Real)
(declare-fun l_0_10_15 () Real)
(declare-fun l_0_10_14 () Real)
(declare-fun l_0_10_13 () Real)
(declare-fun l_0_10_84 () Real)
(declare-fun l_0_10_83 () Real)
(declare-fun l_0_10_82 () Real)
(declare-fun l_0_10_81 () Real)
(declare-fun l_0_10_80 () Real)
(declare-fun l_0_10_79 () Real)
(declare-fun l_0_10_63 () Real)
(declare-fun l_0_10_62 () Real)
(declare-fun l_0_10_61 () Real)
(declare-fun l_0_10_60 () Real)
(declare-fun l_0_10_59 () Real)
(declare-fun l_0_10_58 () Real)
(declare-fun l_0_10_42 () Real)
(declare-fun l_0_10_41 () Real)
(declare-fun l_0_10_40 () Real)
(declare-fun l_0_10_39 () Real)
(declare-fun l_0_10_38 () Real)
(declare-fun l_0_10_37 () Real)
(declare-fun l_0_10_273 () Real)
(declare-fun l_0_10_272 () Real)
(declare-fun l_0_10_271 () Real)
(declare-fun l_0_10_270 () Real)
(declare-fun l_0_10_269 () Real)
(declare-fun l_0_10_268 () Real)
(declare-fun l_0_10_252 () Real)
(declare-fun l_0_10_251 () Real)
(declare-fun l_0_10_250 () Real)
(declare-fun l_0_10_249 () Real)
(declare-fun l_0_10_248 () Real)
(declare-fun l_0_10_247 () Real)
(declare-fun l_0_10_231 () Real)
(declare-fun l_0_10_230 () Real)
(declare-fun l_0_10_229 () Real)
(declare-fun l_0_10_228 () Real)
(declare-fun l_0_10_227 () Real)
(declare-fun l_0_10_226 () Real)
(declare-fun l_0_10_210 () Real)
(declare-fun l_0_10_21 () Real)
(declare-fun l_0_10_209 () Real)
(declare-fun l_0_10_208 () Real)
(declare-fun l_0_10_207 () Real)
(declare-fun l_0_10_206 () Real)
(declare-fun l_0_10_205 () Real)
(declare-fun l_0_10_20 () Real)
(declare-fun l_0_10_19 () Real)
(declare-fun l_0_10_18 () Real)
(declare-fun l_0_10_17 () Real)
(declare-fun l_0_10_16 () Real)
(declare-fun l_0_10_142 () Real)
(declare-fun l_0_10_127 () Real)
(declare-fun l_0_10_68 () Real)
(declare-fun l_0_10_67 () Real)
(declare-fun l_0_10_47 () Real)
(declare-fun l_0_10_46 () Real)
(declare-fun l_0_10_5 () Real)
(declare-fun l_0_10_257 () Real)
(declare-fun l_0_10_256 () Real)
(declare-fun l_0_10_26 () Real)
(declare-fun l_0_10_236 () Real)
(declare-fun l_0_10_235 () Real)
(declare-fun l_0_10_25 () Real)
(declare-fun l_0_10_215 () Real)
(declare-fun l_0_10_214 () Real)
(declare-fun l_0_10_4 () Real)
(declare-fun l_0_10_194 () Real)
(declare-fun l_0_10_193 () Real)
(declare-fun l_0_10_128 () Real)
(declare-fun l_0_10_86 () Real)
(declare-fun l_0_10_85 () Real)
(declare-fun l_0_10_71 () Real)
(declare-fun l_0_10_70 () Real)
(declare-fun l_0_10_50 () Real)
(declare-fun l_0_10_49 () Real)
(declare-fun l_0_10_8 () Real)
(declare-fun l_0_10_260 () Real)
(declare-fun l_0_10_259 () Real)
(declare-fun l_0_10_29 () Real)
(declare-fun l_0_10_239 () Real)
(declare-fun l_0_10_238 () Real)
(declare-fun l_0_10_28 () Real)
(declare-fun l_0_10_218 () Real)
(declare-fun l_0_10_217 () Real)
(declare-fun l_0_10_7 () Real)
(declare-fun l_0_10_197 () Real)
(declare-fun l_0_10_196 () Real)
(declare-fun l_0_10_170 () Real)
(declare-fun l_0_10_169 () Real)
(declare-fun l_0_10_149 () Real)
(declare-fun l_0_10_148 () Real)
(declare-fun l_0_10_107 () Real)
(declare-fun l_0_10_106 () Real)
(declare-fun l_0_10_129 () Real)
(declare-fun l_0_10_87 () Real)
(declare-fun l_0_10_171 () Real)
(declare-fun l_0_10_150 () Real)
(declare-fun l_0_10_108 () Real)
(declare-fun l_0_10_6 () Real)
(declare-fun l_0_10_27 () Real)
(declare-fun l_0_10_131 () Real)
(declare-fun l_0_10_130 () Real)
(declare-fun l_0_10_89 () Real)
(declare-fun l_0_10_88 () Real)
(declare-fun l_0_10_9 () Real)
(declare-fun l_0_10_30 () Real)
(declare-fun l_0_10_173 () Real)
(declare-fun l_0_10_172 () Real)
(declare-fun l_0_10_152 () Real)
(declare-fun l_0_10_151 () Real)
(declare-fun l_0_10_134 () Real)
(declare-fun l_0_10_133 () Real)
(declare-fun l_0_10_110 () Real)
(declare-fun l_0_10_109 () Real)
(declare-fun l_0_10_138 () Real)
(declare-fun l_0_10_137 () Real)
(declare-fun l_0_10_143 () Real)
(declare-fun l_0_10_92 () Real)
(declare-fun l_0_10_91 () Real)
(declare-fun l_0_10_31 () Real)
(declare-fun l_0_10_176 () Real)
(declare-fun l_0_10_175 () Real)
(declare-fun l_0_10_155 () Real)
(declare-fun l_0_10_154 () Real)
(declare-fun l_0_10_113 () Real)
(declare-fun l_0_10_112 () Real)
(declare-fun l_0_10_10 () Real)
(declare-fun l_0_10_96 () Real)
(declare-fun l_0_10_95 () Real)
(declare-fun l_0_10_180 () Real)
(declare-fun l_0_10_179 () Real)
(declare-fun l_0_10_159 () Real)
(declare-fun l_0_10_158 () Real)
(declare-fun l_0_10_117 () Real)
(declare-fun l_0_10_116 () Real)
(declare-fun l_0_10_185 () Real)
(declare-fun l_0_10_184 () Real)
(declare-fun l_0_10_164 () Real)
(declare-fun l_0_10_163 () Real)
(declare-fun l_0_10_122 () Real)
(declare-fun l_0_10_121 () Real)
(declare-fun l_0_10_101 () Real)
(declare-fun l_0_10_100 () Real)
(declare-fun l_0_10_69 () Real)
(declare-fun l_0_10_48 () Real)
(declare-fun l_0_10_258 () Real)
(declare-fun l_0_10_237 () Real)
(declare-fun l_0_10_216 () Real)
(declare-fun l_0_10_195 () Real)
(declare-fun l_0_10_73 () Real)
(declare-fun l_0_10_72 () Real)
(declare-fun l_0_10_52 () Real)
(declare-fun l_0_10_51 () Real)
(declare-fun l_0_10_262 () Real)
(declare-fun l_0_10_261 () Real)
(declare-fun l_0_10_241 () Real)
(declare-fun l_0_10_240 () Real)
(declare-fun l_0_10_220 () Real)
(declare-fun l_0_10_219 () Real)
(declare-fun l_0_10_199 () Real)
(declare-fun l_0_10_198 () Real)
(declare-fun l_0_10_132 () Real)
(declare-fun l_0_10_144 () Real)
(declare-fun l_0_10_186 () Real)
(declare-fun l_0_10_174 () Real)
(declare-fun l_0_10_165 () Real)
(declare-fun l_0_10_153 () Real)
(declare-fun l_0_10_145 () Real)
(declare-fun l_0_10_136 () Real)
(declare-fun l_0_10_135 () Real)
(declare-fun l_0_10_123 () Real)
(declare-fun l_0_10_111 () Real)
(declare-fun l_0_10_90 () Real)
(declare-fun l_0_10_102 () Real)
(declare-fun l_0_10_146 () Real)
(declare-fun l_0_10_141 () Real)
(declare-fun l_0_10_140 () Real)
(declare-fun l_0_10_139 () Real)
(declare-fun l_0_10_147 () Real)
(declare-fun l_0_10_187 () Real)
(declare-fun l_0_10_178 () Real)
(declare-fun l_0_10_177 () Real)
(declare-fun l_0_10_166 () Real)
(declare-fun l_0_10_157 () Real)
(declare-fun l_0_10_156 () Real)
(declare-fun l_0_10_124 () Real)
(declare-fun l_0_10_115 () Real)
(declare-fun l_0_10_114 () Real)
(declare-fun l_0_10_94 () Real)
(declare-fun l_0_10_103 () Real)
(declare-fun l_0_10_93 () Real)
(declare-fun l_0_10_188 () Real)
(declare-fun l_0_10_183 () Real)
(declare-fun l_0_10_182 () Real)
(declare-fun l_0_10_181 () Real)
(declare-fun l_0_10_167 () Real)
(declare-fun l_0_10_162 () Real)
(declare-fun l_0_10_161 () Real)
(declare-fun l_0_10_160 () Real)
(declare-fun l_0_10_125 () Real)
(declare-fun l_0_10_120 () Real)
(declare-fun l_0_10_119 () Real)
(declare-fun l_0_10_118 () Real)
(declare-fun l_0_10_99 () Real)
(declare-fun l_0_10_104 () Real)
(declare-fun l_0_10_98 () Real)
(declare-fun l_0_10_97 () Real)
(declare-fun l_0_10_189 () Real)
(declare-fun l_0_10_168 () Real)
(declare-fun l_0_10_126 () Real)
(declare-fun l_0_10_105 () Real)
(declare-fun l_0_11_64 () Real)
(declare-fun l_0_11_43 () Real)
(declare-fun l_0_11_274 () Real)
(declare-fun l_0_11_253 () Real)
(declare-fun l_0_11_232 () Real)
(declare-fun l_0_11_22 () Real)
(declare-fun l_0_11_211 () Real)
(declare-fun l_0_11_190 () Real)
(declare-fun l_0_11_1 () Real)
(declare-fun _a_0_ () Real)
(declare-fun l_0_11_85 () Real)
(declare-fun l_0_11_70 () Real)
(declare-fun l_0_11_49 () Real)
(declare-fun l_0_11_280 () Real)
(declare-fun l_0_11_259 () Real)
(declare-fun l_0_11_238 () Real)
(declare-fun l_0_11_28 () Real)
(declare-fun l_0_11_217 () Real)
(declare-fun l_0_11_196 () Real)
(declare-fun l_0_11_169 () Real)
(declare-fun l_0_11_148 () Real)
(declare-fun l_0_11_106 () Real)
(declare-fun l_0_11_7 () Real)
(declare-fun _a_1_ () Real)
(declare-fun l_0_11_9 () Real)
(declare-fun l_0_11_91 () Real)
(declare-fun l_0_11_8 () Real)
(declare-fun l_0_11_73 () Real)
(declare-fun l_0_11_72 () Real)
(declare-fun l_0_11_71 () Real)
(declare-fun l_0_11_52 () Real)
(declare-fun l_0_11_51 () Real)
(declare-fun l_0_11_50 () Real)
(declare-fun l_0_11_31 () Real)
(declare-fun l_0_11_30 () Real)
(declare-fun l_0_11_29 () Real)
(declare-fun l_0_11_283 () Real)
(declare-fun l_0_11_282 () Real)
(declare-fun l_0_11_281 () Real)
(declare-fun l_0_11_262 () Real)
(declare-fun l_0_11_261 () Real)
(declare-fun l_0_11_260 () Real)
(declare-fun l_0_11_241 () Real)
(declare-fun l_0_11_240 () Real)
(declare-fun l_0_11_239 () Real)
(declare-fun l_0_11_220 () Real)
(declare-fun l_0_11_219 () Real)
(declare-fun l_0_11_218 () Real)
(declare-fun l_0_11_199 () Real)
(declare-fun l_0_11_198 () Real)
(declare-fun l_0_11_197 () Real)
(declare-fun l_0_11_175 () Real)
(declare-fun l_0_11_154 () Real)
(declare-fun l_0_11_112 () Real)
(declare-fun l_0_11_10 () Real)
(declare-fun _a_2_ () Real)
(declare-fun l_0_11_74 () Real)
(declare-fun l_0_11_53 () Real)
(declare-fun l_0_11_284 () Real)
(declare-fun l_0_11_263 () Real)
(declare-fun l_0_11_242 () Real)
(declare-fun l_0_11_32 () Real)
(declare-fun l_0_11_221 () Real)
(declare-fun l_0_11_200 () Real)
(declare-fun l_0_11_11 () Real)
(declare-fun _a_3_ () Real)
(declare-fun l_0_11_78 () Real)
(declare-fun l_0_11_77 () Real)
(declare-fun l_0_11_76 () Real)
(declare-fun l_0_11_75 () Real)
(declare-fun l_0_11_57 () Real)
(declare-fun l_0_11_56 () Real)
(declare-fun l_0_11_55 () Real)
(declare-fun l_0_11_54 () Real)
(declare-fun l_0_11_36 () Real)
(declare-fun l_0_11_35 () Real)
(declare-fun l_0_11_34 () Real)
(declare-fun l_0_11_33 () Real)
(declare-fun l_0_11_288 () Real)
(declare-fun l_0_11_287 () Real)
(declare-fun l_0_11_286 () Real)
(declare-fun l_0_11_285 () Real)
(declare-fun l_0_11_267 () Real)
(declare-fun l_0_11_266 () Real)
(declare-fun l_0_11_265 () Real)
(declare-fun l_0_11_264 () Real)
(declare-fun l_0_11_246 () Real)
(declare-fun l_0_11_245 () Real)
(declare-fun l_0_11_244 () Real)
(declare-fun l_0_11_243 () Real)
(declare-fun l_0_11_225 () Real)
(declare-fun l_0_11_224 () Real)
(declare-fun l_0_11_223 () Real)
(declare-fun l_0_11_222 () Real)
(declare-fun l_0_11_204 () Real)
(declare-fun l_0_11_203 () Real)
(declare-fun l_0_11_202 () Real)
(declare-fun l_0_11_201 () Real)
(declare-fun l_0_11_15 () Real)
(declare-fun l_0_11_14 () Real)
(declare-fun l_0_11_13 () Real)
(declare-fun l_0_11_12 () Real)
(declare-fun _a_4_ () Real)
(declare-fun l_0_11_95 () Real)
(declare-fun l_0_11_179 () Real)
(declare-fun l_0_11_158 () Real)
(declare-fun l_0_11_116 () Real)
(declare-fun _a_5_ () Real)
(declare-fun l_0_11_84 () Real)
(declare-fun l_0_11_83 () Real)
(declare-fun l_0_11_82 () Real)
(declare-fun l_0_11_81 () Real)
(declare-fun l_0_11_80 () Real)
(declare-fun l_0_11_79 () Real)
(declare-fun l_0_11_63 () Real)
(declare-fun l_0_11_62 () Real)
(declare-fun l_0_11_61 () Real)
(declare-fun l_0_11_60 () Real)
(declare-fun l_0_11_59 () Real)
(declare-fun l_0_11_58 () Real)
(declare-fun l_0_11_42 () Real)
(declare-fun l_0_11_41 () Real)
(declare-fun l_0_11_40 () Real)
(declare-fun l_0_11_39 () Real)
(declare-fun l_0_11_38 () Real)
(declare-fun l_0_11_37 () Real)
(declare-fun l_0_11_21 () Real)
(declare-fun l_0_11_20 () Real)
(declare-fun l_0_11_19 () Real)
(declare-fun l_0_11_18 () Real)
(declare-fun l_0_11_17 () Real)
(declare-fun l_0_11_16 () Real)
(declare-fun l_0_11_147 () Real)
(declare-fun l_0_11_146 () Real)
(declare-fun l_0_11_145 () Real)
(declare-fun l_0_11_144 () Real)
(declare-fun l_0_11_143 () Real)
(declare-fun l_0_11_142 () Real)
(declare-fun l_0_11_294 () Real)
(declare-fun l_0_11_293 () Real)
(declare-fun l_0_11_292 () Real)
(declare-fun l_0_11_291 () Real)
(declare-fun l_0_11_290 () Real)
(declare-fun l_0_11_289 () Real)
(declare-fun l_0_11_273 () Real)
(declare-fun l_0_11_272 () Real)
(declare-fun l_0_11_271 () Real)
(declare-fun l_0_11_270 () Real)
(declare-fun l_0_11_269 () Real)
(declare-fun l_0_11_268 () Real)
(declare-fun l_0_11_252 () Real)
(declare-fun l_0_11_251 () Real)
(declare-fun l_0_11_250 () Real)
(declare-fun l_0_11_249 () Real)
(declare-fun l_0_11_248 () Real)
(declare-fun l_0_11_247 () Real)
(declare-fun l_0_11_231 () Real)
(declare-fun l_0_11_230 () Real)
(declare-fun l_0_11_229 () Real)
(declare-fun l_0_11_228 () Real)
(declare-fun l_0_11_227 () Real)
(declare-fun l_0_11_226 () Real)
(declare-fun l_0_11_210 () Real)
(declare-fun l_0_11_209 () Real)
(declare-fun l_0_11_208 () Real)
(declare-fun l_0_11_207 () Real)
(declare-fun l_0_11_206 () Real)
(declare-fun l_0_11_205 () Real)
(declare-fun l_0_11_127 () Real)
(declare-fun l_0_11_65 () Real)
(declare-fun l_0_11_44 () Real)
(declare-fun l_0_11_275 () Real)
(declare-fun l_0_11_254 () Real)
(declare-fun l_0_11_233 () Real)
(declare-fun l_0_11_23 () Real)
(declare-fun l_0_11_212 () Real)
(declare-fun l_0_11_191 () Real)
(declare-fun l_0_11_2 () Real)
(declare-fun l_0_11_66 () Real)
(declare-fun l_0_11_45 () Real)
(declare-fun l_0_11_3 () Real)
(declare-fun l_0_11_276 () Real)
(declare-fun l_0_11_255 () Real)
(declare-fun l_0_11_24 () Real)
(declare-fun l_0_11_234 () Real)
(declare-fun l_0_11_213 () Real)
(declare-fun l_0_11_192 () Real)
(declare-fun l_0_11_68 () Real)
(declare-fun l_0_11_67 () Real)
(declare-fun l_0_11_47 () Real)
(declare-fun l_0_11_46 () Real)
(declare-fun l_0_11_5 () Real)
(declare-fun l_0_11_278 () Real)
(declare-fun l_0_11_277 () Real)
(declare-fun l_0_11_257 () Real)
(declare-fun l_0_11_256 () Real)
(declare-fun l_0_11_26 () Real)
(declare-fun l_0_11_236 () Real)
(declare-fun l_0_11_235 () Real)
(declare-fun l_0_11_25 () Real)
(declare-fun l_0_11_215 () Real)
(declare-fun l_0_11_214 () Real)
(declare-fun l_0_11_4 () Real)
(declare-fun l_0_11_194 () Real)
(declare-fun l_0_11_193 () Real)
(declare-fun l_0_11_128 () Real)
(declare-fun l_0_11_86 () Real)
(declare-fun l_0_11_170 () Real)
(declare-fun l_0_11_149 () Real)
(declare-fun l_0_11_107 () Real)
(declare-fun l_0_11_129 () Real)
(declare-fun l_0_11_87 () Real)
(declare-fun l_0_11_171 () Real)
(declare-fun l_0_11_150 () Real)
(declare-fun l_0_11_108 () Real)
(declare-fun l_0_11_6 () Real)
(declare-fun l_0_11_27 () Real)
(declare-fun l_0_11_131 () Real)
(declare-fun l_0_11_130 () Real)
(declare-fun l_0_11_89 () Real)
(declare-fun l_0_11_88 () Real)
(declare-fun l_0_11_173 () Real)
(declare-fun l_0_11_172 () Real)
(declare-fun l_0_11_152 () Real)
(declare-fun l_0_11_151 () Real)
(declare-fun l_0_11_134 () Real)
(declare-fun l_0_11_133 () Real)
(declare-fun l_0_11_110 () Real)
(declare-fun l_0_11_109 () Real)
(declare-fun l_0_11_138 () Real)
(declare-fun l_0_11_137 () Real)
(declare-fun l_0_11_92 () Real)
(declare-fun l_0_11_176 () Real)
(declare-fun l_0_11_155 () Real)
(declare-fun l_0_11_113 () Real)
(declare-fun l_0_11_96 () Real)
(declare-fun l_0_11_180 () Real)
(declare-fun l_0_11_159 () Real)
(declare-fun l_0_11_117 () Real)
(declare-fun l_0_11_185 () Real)
(declare-fun l_0_11_184 () Real)
(declare-fun l_0_11_164 () Real)
(declare-fun l_0_11_163 () Real)
(declare-fun l_0_11_122 () Real)
(declare-fun l_0_11_121 () Real)
(declare-fun l_0_11_101 () Real)
(declare-fun l_0_11_100 () Real)
(declare-fun l_0_11_69 () Real)
(declare-fun l_0_11_48 () Real)
(declare-fun l_0_11_279 () Real)
(declare-fun l_0_11_258 () Real)
(declare-fun l_0_11_237 () Real)
(declare-fun l_0_11_216 () Real)
(declare-fun l_0_11_195 () Real)
(declare-fun l_0_11_132 () Real)
(declare-fun l_0_11_186 () Real)
(declare-fun l_0_11_174 () Real)
(declare-fun l_0_11_165 () Real)
(declare-fun l_0_11_153 () Real)
(declare-fun l_0_11_136 () Real)
(declare-fun l_0_11_135 () Real)
(declare-fun l_0_11_123 () Real)
(declare-fun l_0_11_111 () Real)
(declare-fun l_0_11_90 () Real)
(declare-fun l_0_11_102 () Real)
(declare-fun l_0_11_141 () Real)
(declare-fun l_0_11_140 () Real)
(declare-fun l_0_11_139 () Real)
(declare-fun l_0_11_187 () Real)
(declare-fun l_0_11_178 () Real)
(declare-fun l_0_11_177 () Real)
(declare-fun l_0_11_166 () Real)
(declare-fun l_0_11_157 () Real)
(declare-fun l_0_11_156 () Real)
(declare-fun l_0_11_124 () Real)
(declare-fun l_0_11_115 () Real)
(declare-fun l_0_11_114 () Real)
(declare-fun l_0_11_94 () Real)
(declare-fun l_0_11_103 () Real)
(declare-fun l_0_11_93 () Real)
(declare-fun l_0_11_188 () Real)
(declare-fun l_0_11_183 () Real)
(declare-fun l_0_11_182 () Real)
(declare-fun l_0_11_181 () Real)
(declare-fun l_0_11_167 () Real)
(declare-fun l_0_11_162 () Real)
(declare-fun l_0_11_161 () Real)
(declare-fun l_0_11_160 () Real)
(declare-fun l_0_11_125 () Real)
(declare-fun l_0_11_120 () Real)
(declare-fun l_0_11_119 () Real)
(declare-fun l_0_11_118 () Real)
(declare-fun l_0_11_99 () Real)
(declare-fun l_0_11_104 () Real)
(declare-fun l_0_11_98 () Real)
(declare-fun l_0_11_97 () Real)
(declare-fun l_0_11_189 () Real)
(declare-fun l_0_11_168 () Real)
(declare-fun l_0_11_126 () Real)
(declare-fun l_0_11_105 () Real)
(declare-fun l_0_12_85 () Real)
(declare-fun l_0_12_84 () Real)
(declare-fun l_0_12_83 () Real)
(declare-fun l_0_12_82 () Real)
(declare-fun l_0_12_81 () Real)
(declare-fun l_0_12_80 () Real)
(declare-fun l_0_12_79 () Real)
(declare-fun l_0_12_64 () Real)
(declare-fun l_0_12_63 () Real)
(declare-fun l_0_12_62 () Real)
(declare-fun l_0_12_61 () Real)
(declare-fun l_0_12_60 () Real)
(declare-fun l_0_12_59 () Real)
(declare-fun l_0_12_58 () Real)
(declare-fun l_0_12_43 () Real)
(declare-fun l_0_12_42 () Real)
(declare-fun l_0_12_41 () Real)
(declare-fun l_0_12_40 () Real)
(declare-fun l_0_12_39 () Real)
(declare-fun l_0_12_38 () Real)
(declare-fun l_0_12_37 () Real)
(declare-fun l_0_12_21 () Real)
(declare-fun l_0_12_20 () Real)
(declare-fun l_0_12_19 () Real)
(declare-fun l_0_12_18 () Real)
(declare-fun l_0_12_17 () Real)
(declare-fun l_0_12_169 () Real)
(declare-fun l_0_12_16 () Real)
(declare-fun l_0_12_148 () Real)
(declare-fun l_0_12_147 () Real)
(declare-fun l_0_12_146 () Real)
(declare-fun l_0_12_145 () Real)
(declare-fun l_0_12_144 () Real)
(declare-fun l_0_12_143 () Real)
(declare-fun l_0_12_142 () Real)
(declare-fun l_0_12_106 () Real)
(declare-fun l_0_12_315 () Real)
(declare-fun l_0_12_314 () Real)
(declare-fun l_0_12_313 () Real)
(declare-fun l_0_12_312 () Real)
(declare-fun l_0_12_311 () Real)
(declare-fun l_0_12_310 () Real)
(declare-fun l_0_12_294 () Real)
(declare-fun l_0_12_293 () Real)
(declare-fun l_0_12_292 () Real)
(declare-fun l_0_12_291 () Real)
(declare-fun l_0_12_290 () Real)
(declare-fun l_0_12_289 () Real)
(declare-fun l_0_12_273 () Real)
(declare-fun l_0_12_272 () Real)
(declare-fun l_0_12_271 () Real)
(declare-fun l_0_12_270 () Real)
(declare-fun l_0_12_269 () Real)
(declare-fun l_0_12_268 () Real)
(declare-fun l_0_12_252 () Real)
(declare-fun l_0_12_251 () Real)
(declare-fun l_0_12_250 () Real)
(declare-fun l_0_12_249 () Real)
(declare-fun l_0_12_248 () Real)
(declare-fun l_0_12_247 () Real)
(declare-fun l_0_12_231 () Real)
(declare-fun l_0_12_230 () Real)
(declare-fun l_0_12_229 () Real)
(declare-fun l_0_12_228 () Real)
(declare-fun l_0_12_227 () Real)
(declare-fun l_0_12_226 () Real)
(declare-fun l_0_12_22 () Real)
(declare-fun l_0_12_210 () Real)
(declare-fun l_0_12_209 () Real)
(declare-fun l_0_12_208 () Real)
(declare-fun l_0_12_207 () Real)
(declare-fun l_0_12_206 () Real)
(declare-fun l_0_12_205 () Real)
(declare-fun l_0_12_127 () Real)
(declare-fun l_0_12_1 () Real)
(declare-fun l_0_12_295 () Real)
(declare-fun l_0_12_274 () Real)
(declare-fun l_0_12_253 () Real)
(declare-fun l_0_12_232 () Real)
(declare-fun l_0_12_211 () Real)
(declare-fun l_0_12_190 () Real)
(declare-fun l_0_12_70 () Real)
(declare-fun l_0_12_49 () Real)
(declare-fun l_0_12_301 () Real)
(declare-fun l_0_12_280 () Real)
(declare-fun l_0_12_259 () Real)
(declare-fun l_0_12_238 () Real)
(declare-fun l_0_12_28 () Real)
(declare-fun l_0_12_217 () Real)
(declare-fun l_0_12_196 () Real)
(declare-fun l_0_12_7 () Real)
(declare-fun l_0_12_9 () Real)
(declare-fun l_0_12_91 () Real)
(declare-fun l_0_12_8 () Real)
(declare-fun l_0_12_73 () Real)
(declare-fun l_0_12_72 () Real)
(declare-fun l_0_12_71 () Real)
(declare-fun l_0_12_52 () Real)
(declare-fun l_0_12_51 () Real)
(declare-fun l_0_12_50 () Real)
(declare-fun l_0_12_31 () Real)
(declare-fun l_0_12_304 () Real)
(declare-fun l_0_12_303 () Real)
(declare-fun l_0_12_302 () Real)
(declare-fun l_0_12_30 () Real)
(declare-fun l_0_12_29 () Real)
(declare-fun l_0_12_283 () Real)
(declare-fun l_0_12_282 () Real)
(declare-fun l_0_12_281 () Real)
(declare-fun l_0_12_262 () Real)
(declare-fun l_0_12_261 () Real)
(declare-fun l_0_12_260 () Real)
(declare-fun l_0_12_241 () Real)
(declare-fun l_0_12_240 () Real)
(declare-fun l_0_12_239 () Real)
(declare-fun l_0_12_220 () Real)
(declare-fun l_0_12_219 () Real)
(declare-fun l_0_12_218 () Real)
(declare-fun l_0_12_199 () Real)
(declare-fun l_0_12_198 () Real)
(declare-fun l_0_12_197 () Real)
(declare-fun l_0_12_175 () Real)
(declare-fun l_0_12_154 () Real)
(declare-fun l_0_12_112 () Real)
(declare-fun l_0_12_10 () Real)
(declare-fun l_0_12_74 () Real)
(declare-fun l_0_12_53 () Real)
(declare-fun l_0_12_305 () Real)
(declare-fun l_0_12_284 () Real)
(declare-fun l_0_12_263 () Real)
(declare-fun l_0_12_242 () Real)
(declare-fun l_0_12_32 () Real)
(declare-fun l_0_12_221 () Real)
(declare-fun l_0_12_200 () Real)
(declare-fun l_0_12_11 () Real)
(declare-fun l_0_12_78 () Real)
(declare-fun l_0_12_77 () Real)
(declare-fun l_0_12_76 () Real)
(declare-fun l_0_12_75 () Real)
(declare-fun l_0_12_57 () Real)
(declare-fun l_0_12_56 () Real)
(declare-fun l_0_12_55 () Real)
(declare-fun l_0_12_54 () Real)
(declare-fun l_0_12_36 () Real)
(declare-fun l_0_12_35 () Real)
(declare-fun l_0_12_34 () Real)
(declare-fun l_0_12_33 () Real)
(declare-fun l_0_12_309 () Real)
(declare-fun l_0_12_308 () Real)
(declare-fun l_0_12_307 () Real)
(declare-fun l_0_12_306 () Real)
(declare-fun l_0_12_288 () Real)
(declare-fun l_0_12_287 () Real)
(declare-fun l_0_12_286 () Real)
(declare-fun l_0_12_285 () Real)
(declare-fun l_0_12_267 () Real)
(declare-fun l_0_12_266 () Real)
(declare-fun l_0_12_265 () Real)
(declare-fun l_0_12_264 () Real)
(declare-fun l_0_12_246 () Real)
(declare-fun l_0_12_245 () Real)
(declare-fun l_0_12_244 () Real)
(declare-fun l_0_12_243 () Real)
(declare-fun l_0_12_225 () Real)
(declare-fun l_0_12_224 () Real)
(declare-fun l_0_12_223 () Real)
(declare-fun l_0_12_222 () Real)
(declare-fun l_0_12_204 () Real)
(declare-fun l_0_12_203 () Real)
(declare-fun l_0_12_202 () Real)
(declare-fun l_0_12_201 () Real)
(declare-fun l_0_12_15 () Real)
(declare-fun l_0_12_14 () Real)
(declare-fun l_0_12_13 () Real)
(declare-fun l_0_12_12 () Real)
(declare-fun l_0_12_95 () Real)
(declare-fun l_0_12_179 () Real)
(declare-fun l_0_12_158 () Real)
(declare-fun l_0_12_116 () Real)
(declare-fun l_0_12_65 () Real)
(declare-fun l_0_12_44 () Real)
(declare-fun l_0_12_296 () Real)
(declare-fun l_0_12_275 () Real)
(declare-fun l_0_12_254 () Real)
(declare-fun l_0_12_233 () Real)
(declare-fun l_0_12_23 () Real)
(declare-fun l_0_12_212 () Real)
(declare-fun l_0_12_191 () Real)
(declare-fun l_0_12_2 () Real)
(declare-fun l_0_12_66 () Real)
(declare-fun l_0_12_45 () Real)
(declare-fun l_0_12_3 () Real)
(declare-fun l_0_12_297 () Real)
(declare-fun l_0_12_276 () Real)
(declare-fun l_0_12_255 () Real)
(declare-fun l_0_12_24 () Real)
(declare-fun l_0_12_234 () Real)
(declare-fun l_0_12_213 () Real)
(declare-fun l_0_12_192 () Real)
(declare-fun l_0_12_68 () Real)
(declare-fun l_0_12_67 () Real)
(declare-fun l_0_12_47 () Real)
(declare-fun l_0_12_46 () Real)
(declare-fun l_0_12_5 () Real)
(declare-fun l_0_12_299 () Real)
(declare-fun l_0_12_298 () Real)
(declare-fun l_0_12_278 () Real)
(declare-fun l_0_12_277 () Real)
(declare-fun l_0_12_257 () Real)
(declare-fun l_0_12_256 () Real)
(declare-fun l_0_12_26 () Real)
(declare-fun l_0_12_236 () Real)
(declare-fun l_0_12_235 () Real)
(declare-fun l_0_12_25 () Real)
(declare-fun l_0_12_215 () Real)
(declare-fun l_0_12_214 () Real)
(declare-fun l_0_12_4 () Real)
(declare-fun l_0_12_194 () Real)
(declare-fun l_0_12_193 () Real)
(declare-fun l_0_12_128 () Real)
(declare-fun l_0_12_86 () Real)
(declare-fun l_0_12_170 () Real)
(declare-fun l_0_12_149 () Real)
(declare-fun l_0_12_107 () Real)
(declare-fun l_0_12_129 () Real)
(declare-fun l_0_12_87 () Real)
(declare-fun l_0_12_171 () Real)
(declare-fun l_0_12_150 () Real)
(declare-fun l_0_12_108 () Real)
(declare-fun l_0_12_6 () Real)
(declare-fun l_0_12_27 () Real)
(declare-fun l_0_12_131 () Real)
(declare-fun l_0_12_130 () Real)
(declare-fun l_0_12_89 () Real)
(declare-fun l_0_12_88 () Real)
(declare-fun l_0_12_173 () Real)
(declare-fun l_0_12_172 () Real)
(declare-fun l_0_12_152 () Real)
(declare-fun l_0_12_151 () Real)
(declare-fun l_0_12_134 () Real)
(declare-fun l_0_12_133 () Real)
(declare-fun l_0_12_110 () Real)
(declare-fun l_0_12_109 () Real)
(declare-fun l_0_12_138 () Real)
(declare-fun l_0_12_137 () Real)
(declare-fun l_0_12_92 () Real)
(declare-fun l_0_12_176 () Real)
(declare-fun l_0_12_155 () Real)
(declare-fun l_0_12_113 () Real)
(declare-fun l_0_12_96 () Real)
(declare-fun l_0_12_180 () Real)
(declare-fun l_0_12_159 () Real)
(declare-fun l_0_12_117 () Real)
(declare-fun l_0_12_185 () Real)
(declare-fun l_0_12_184 () Real)
(declare-fun l_0_12_164 () Real)
(declare-fun l_0_12_163 () Real)
(declare-fun l_0_12_122 () Real)
(declare-fun l_0_12_121 () Real)
(declare-fun l_0_12_101 () Real)
(declare-fun l_0_12_100 () Real)
(declare-fun l_0_12_69 () Real)
(declare-fun l_0_12_48 () Real)
(declare-fun l_0_12_300 () Real)
(declare-fun l_0_12_279 () Real)
(declare-fun l_0_12_258 () Real)
(declare-fun l_0_12_237 () Real)
(declare-fun l_0_12_216 () Real)
(declare-fun l_0_12_195 () Real)
(declare-fun l_0_12_132 () Real)
(declare-fun l_0_12_186 () Real)
(declare-fun l_0_12_174 () Real)
(declare-fun l_0_12_165 () Real)
(declare-fun l_0_12_153 () Real)
(declare-fun l_0_12_136 () Real)
(declare-fun l_0_12_135 () Real)
(declare-fun l_0_12_123 () Real)
(declare-fun l_0_12_111 () Real)
(declare-fun l_0_12_90 () Real)
(declare-fun l_0_12_102 () Real)
(declare-fun l_0_12_141 () Real)
(declare-fun l_0_12_140 () Real)
(declare-fun l_0_12_139 () Real)
(declare-fun l_0_12_187 () Real)
(declare-fun l_0_12_178 () Real)
(declare-fun l_0_12_177 () Real)
(declare-fun l_0_12_166 () Real)
(declare-fun l_0_12_157 () Real)
(declare-fun l_0_12_156 () Real)
(declare-fun l_0_12_124 () Real)
(declare-fun l_0_12_115 () Real)
(declare-fun l_0_12_114 () Real)
(declare-fun l_0_12_94 () Real)
(declare-fun l_0_12_103 () Real)
(declare-fun l_0_12_93 () Real)
(declare-fun l_0_12_188 () Real)
(declare-fun l_0_12_183 () Real)
(declare-fun l_0_12_182 () Real)
(declare-fun l_0_12_181 () Real)
(declare-fun l_0_12_167 () Real)
(declare-fun l_0_12_162 () Real)
(declare-fun l_0_12_161 () Real)
(declare-fun l_0_12_160 () Real)
(declare-fun l_0_12_125 () Real)
(declare-fun l_0_12_120 () Real)
(declare-fun l_0_12_119 () Real)
(declare-fun l_0_12_118 () Real)
(declare-fun l_0_12_99 () Real)
(declare-fun l_0_12_104 () Real)
(declare-fun l_0_12_98 () Real)
(declare-fun l_0_12_97 () Real)
(declare-fun l_0_12_189 () Real)
(declare-fun l_0_12_168 () Real)
(declare-fun l_0_12_126 () Real)
(declare-fun l_0_12_105 () Real)
(declare-fun l_0_13_64 () Real)
(declare-fun l_0_13_43 () Real)
(declare-fun l_0_13_22 () Real)
(declare-fun l_0_13_190 () Real)
(declare-fun l_0_13_1 () Real)
(declare-fun l_0_13_65 () Real)
(declare-fun l_0_13_44 () Real)
(declare-fun l_0_13_23 () Real)
(declare-fun l_0_13_191 () Real)
(declare-fun l_0_13_2 () Real)
(declare-fun l_0_13_79 () Real)
(declare-fun l_0_13_58 () Real)
(declare-fun l_0_13_37 () Real)
(declare-fun l_0_13_205 () Real)
(declare-fun l_0_13_127 () Real)
(declare-fun l_0_13_16 () Real)
(declare-fun l_0_13_66 () Real)
(declare-fun l_0_13_45 () Real)
(declare-fun l_0_13_3 () Real)
(declare-fun l_0_13_24 () Real)
(declare-fun l_0_13_192 () Real)
(declare-fun l_0_13_68 () Real)
(declare-fun l_0_13_67 () Real)
(declare-fun l_0_13_47 () Real)
(declare-fun l_0_13_46 () Real)
(declare-fun l_0_13_5 () Real)
(declare-fun l_0_13_26 () Real)
(declare-fun l_0_13_25 () Real)
(declare-fun l_0_13_4 () Real)
(declare-fun l_0_13_194 () Real)
(declare-fun l_0_13_193 () Real)
(declare-fun l_0_13_128 () Real)
(declare-fun l_0_13_86 () Real)
(declare-fun l_0_13_85 () Real)
(declare-fun l_0_13_71 () Real)
(declare-fun l_0_13_70 () Real)
(declare-fun l_0_13_50 () Real)
(declare-fun l_0_13_49 () Real)
(declare-fun l_0_13_8 () Real)
(declare-fun l_0_13_29 () Real)
(declare-fun l_0_13_28 () Real)
(declare-fun l_0_13_7 () Real)
(declare-fun l_0_13_197 () Real)
(declare-fun l_0_13_196 () Real)
(declare-fun l_0_13_170 () Real)
(declare-fun l_0_13_169 () Real)
(declare-fun l_0_13_149 () Real)
(declare-fun l_0_13_148 () Real)
(declare-fun l_0_13_107 () Real)
(declare-fun l_0_13_106 () Real)
(declare-fun l_0_13_75 () Real)
(declare-fun l_0_13_74 () Real)
(declare-fun l_0_13_54 () Real)
(declare-fun l_0_13_53 () Real)
(declare-fun l_0_13_33 () Real)
(declare-fun l_0_13_32 () Real)
(declare-fun l_0_13_201 () Real)
(declare-fun l_0_13_200 () Real)
(declare-fun l_0_13_12 () Real)
(declare-fun l_0_13_11 () Real)
(declare-fun l_0_13_80 () Real)
(declare-fun l_0_13_59 () Real)
(declare-fun l_0_13_38 () Real)
(declare-fun l_0_13_206 () Real)
(declare-fun l_0_13_17 () Real)
(declare-fun l_0_13_129 () Real)
(declare-fun l_0_13_87 () Real)
(declare-fun l_0_13_171 () Real)
(declare-fun l_0_13_150 () Real)
(declare-fun l_0_13_108 () Real)
(declare-fun l_0_13_6 () Real)
(declare-fun l_0_13_27 () Real)
(declare-fun l_0_13_131 () Real)
(declare-fun l_0_13_130 () Real)
(declare-fun l_0_13_89 () Real)
(declare-fun l_0_13_88 () Real)
(declare-fun l_0_13_9 () Real)
(declare-fun l_0_13_30 () Real)
(declare-fun l_0_13_173 () Real)
(declare-fun l_0_13_172 () Real)
(declare-fun l_0_13_152 () Real)
(declare-fun l_0_13_151 () Real)
(declare-fun l_0_13_134 () Real)
(declare-fun l_0_13_133 () Real)
(declare-fun l_0_13_110 () Real)
(declare-fun l_0_13_109 () Real)
(declare-fun l_0_13_34 () Real)
(declare-fun l_0_13_13 () Real)
(declare-fun l_0_13_138 () Real)
(declare-fun l_0_13_137 () Real)
(declare-fun l_0_13_39 () Real)
(declare-fun l_0_13_18 () Real)
(declare-fun l_0_13_143 () Real)
(declare-fun l_0_13_142 () Real)
(declare-fun l_0_13_92 () Real)
(declare-fun l_0_13_91 () Real)
(declare-fun l_0_13_31 () Real)
(declare-fun l_0_13_176 () Real)
(declare-fun l_0_13_175 () Real)
(declare-fun l_0_13_155 () Real)
(declare-fun l_0_13_154 () Real)
(declare-fun l_0_13_113 () Real)
(declare-fun l_0_13_112 () Real)
(declare-fun l_0_13_10 () Real)
(declare-fun l_0_13_96 () Real)
(declare-fun l_0_13_95 () Real)
(declare-fun l_0_13_35 () Real)
(declare-fun l_0_13_180 () Real)
(declare-fun l_0_13_179 () Real)
(declare-fun l_0_13_159 () Real)
(declare-fun l_0_13_158 () Real)
(declare-fun l_0_13_117 () Real)
(declare-fun l_0_13_116 () Real)
(declare-fun l_0_13_14 () Real)
(declare-fun l_0_13_40 () Real)
(declare-fun l_0_13_185 () Real)
(declare-fun l_0_13_184 () Real)
(declare-fun l_0_13_164 () Real)
(declare-fun l_0_13_163 () Real)
(declare-fun l_0_13_122 () Real)
(declare-fun l_0_13_121 () Real)
(declare-fun l_0_13_101 () Real)
(declare-fun l_0_13_100 () Real)
(declare-fun l_0_13_19 () Real)
(declare-fun l_0_13_36 () Real)
(declare-fun l_0_13_15 () Real)
(declare-fun l_0_13_41 () Real)
(declare-fun l_0_13_20 () Real)
(declare-fun l_0_13_42 () Real)
(declare-fun l_0_13_21 () Real)
(declare-fun l_0_13_81 () Real)
(declare-fun l_0_13_69 () Real)
(declare-fun l_0_13_60 () Real)
(declare-fun l_0_13_48 () Real)
(declare-fun l_0_13_207 () Real)
(declare-fun l_0_13_195 () Real)
(declare-fun l_0_13_82 () Real)
(declare-fun l_0_13_73 () Real)
(declare-fun l_0_13_72 () Real)
(declare-fun l_0_13_61 () Real)
(declare-fun l_0_13_52 () Real)
(declare-fun l_0_13_51 () Real)
(declare-fun l_0_13_208 () Real)
(declare-fun l_0_13_199 () Real)
(declare-fun l_0_13_198 () Real)
(declare-fun l_0_13_83 () Real)
(declare-fun l_0_13_78 () Real)
(declare-fun l_0_13_77 () Real)
(declare-fun l_0_13_76 () Real)
(declare-fun l_0_13_62 () Real)
(declare-fun l_0_13_57 () Real)
(declare-fun l_0_13_56 () Real)
(declare-fun l_0_13_55 () Real)
(declare-fun l_0_13_209 () Real)
(declare-fun l_0_13_204 () Real)
(declare-fun l_0_13_203 () Real)
(declare-fun l_0_13_202 () Real)
(declare-fun l_0_13_84 () Real)
(declare-fun l_0_13_63 () Real)
(declare-fun l_0_13_210 () Real)
(declare-fun l_0_13_132 () Real)
(declare-fun l_0_13_144 () Real)
(declare-fun l_0_13_186 () Real)
(declare-fun l_0_13_174 () Real)
(declare-fun l_0_13_165 () Real)
(declare-fun l_0_13_153 () Real)
(declare-fun l_0_13_145 () Real)
(declare-fun l_0_13_136 () Real)
(declare-fun l_0_13_135 () Real)
(declare-fun l_0_13_123 () Real)
(declare-fun l_0_13_111 () Real)
(declare-fun l_0_13_90 () Real)
(declare-fun l_0_13_102 () Real)
(declare-fun l_0_13_146 () Real)
(declare-fun l_0_13_141 () Real)
(declare-fun l_0_13_140 () Real)
(declare-fun l_0_13_139 () Real)
(declare-fun l_0_13_147 () Real)
(declare-fun l_0_13_187 () Real)
(declare-fun l_0_13_178 () Real)
(declare-fun l_0_13_177 () Real)
(declare-fun l_0_13_166 () Real)
(declare-fun l_0_13_157 () Real)
(declare-fun l_0_13_156 () Real)
(declare-fun l_0_13_124 () Real)
(declare-fun l_0_13_115 () Real)
(declare-fun l_0_13_114 () Real)
(declare-fun l_0_13_94 () Real)
(declare-fun l_0_13_103 () Real)
(declare-fun l_0_13_93 () Real)
(declare-fun l_0_13_188 () Real)
(declare-fun l_0_13_183 () Real)
(declare-fun l_0_13_182 () Real)
(declare-fun l_0_13_181 () Real)
(declare-fun l_0_13_167 () Real)
(declare-fun l_0_13_162 () Real)
(declare-fun l_0_13_161 () Real)
(declare-fun l_0_13_160 () Real)
(declare-fun l_0_13_125 () Real)
(declare-fun l_0_13_120 () Real)
(declare-fun l_0_13_119 () Real)
(declare-fun l_0_13_118 () Real)
(declare-fun l_0_13_99 () Real)
(declare-fun l_0_13_104 () Real)
(declare-fun l_0_13_98 () Real)
(declare-fun l_0_13_97 () Real)
(declare-fun l_0_13_189 () Real)
(declare-fun l_0_13_168 () Real)
(declare-fun l_0_13_126 () Real)
(declare-fun l_0_13_105 () Real)
(declare-fun l_0_14_64 () Real)
(declare-fun l_0_14_79 () Real)
(declare-fun l_0_14_43 () Real)
(declare-fun l_0_14_58 () Real)
(declare-fun l_0_14_22 () Real)
(declare-fun l_0_14_37 () Real)
(declare-fun l_0_14_226 () Real)
(declare-fun l_0_14_211 () Real)
(declare-fun l_0_14_205 () Real)
(declare-fun l_0_14_190 () Real)
(declare-fun l_0_14_127 () Real)
(declare-fun l_0_14_1 () Real)
(declare-fun l_0_14_16 () Real)
(declare-fun l_0_14_65 () Real)
(declare-fun l_0_14_44 () Real)
(declare-fun l_0_14_23 () Real)
(declare-fun l_0_14_212 () Real)
(declare-fun l_0_14_191 () Real)
(declare-fun l_0_14_2 () Real)
(declare-fun l_0_14_66 () Real)
(declare-fun l_0_14_45 () Real)
(declare-fun l_0_14_3 () Real)
(declare-fun l_0_14_24 () Real)
(declare-fun l_0_14_213 () Real)
(declare-fun l_0_14_192 () Real)
(declare-fun l_0_14_68 () Real)
(declare-fun l_0_14_67 () Real)
(declare-fun l_0_14_47 () Real)
(declare-fun l_0_14_46 () Real)
(declare-fun l_0_14_5 () Real)
(declare-fun l_0_14_26 () Real)
(declare-fun l_0_14_25 () Real)
(declare-fun l_0_14_215 () Real)
(declare-fun l_0_14_214 () Real)
(declare-fun l_0_14_4 () Real)
(declare-fun l_0_14_194 () Real)
(declare-fun l_0_14_193 () Real)
(declare-fun l_0_14_128 () Real)
(declare-fun l_0_14_86 () Real)
(declare-fun l_0_14_85 () Real)
(declare-fun l_0_14_71 () Real)
(declare-fun l_0_14_70 () Real)
(declare-fun l_0_14_50 () Real)
(declare-fun l_0_14_49 () Real)
(declare-fun l_0_14_8 () Real)
(declare-fun l_0_14_29 () Real)
(declare-fun l_0_14_28 () Real)
(declare-fun l_0_14_218 () Real)
(declare-fun l_0_14_217 () Real)
(declare-fun l_0_14_7 () Real)
(declare-fun l_0_14_197 () Real)
(declare-fun l_0_14_196 () Real)
(declare-fun l_0_14_170 () Real)
(declare-fun l_0_14_169 () Real)
(declare-fun l_0_14_149 () Real)
(declare-fun l_0_14_148 () Real)
(declare-fun l_0_14_107 () Real)
(declare-fun l_0_14_106 () Real)
(declare-fun l_0_14_75 () Real)
(declare-fun l_0_14_74 () Real)
(declare-fun l_0_14_54 () Real)
(declare-fun l_0_14_53 () Real)
(declare-fun l_0_14_33 () Real)
(declare-fun l_0_14_32 () Real)
(declare-fun l_0_14_222 () Real)
(declare-fun l_0_14_221 () Real)
(declare-fun l_0_14_201 () Real)
(declare-fun l_0_14_200 () Real)
(declare-fun l_0_14_12 () Real)
(declare-fun l_0_14_11 () Real)
(declare-fun l_0_14_80 () Real)
(declare-fun l_0_14_59 () Real)
(declare-fun l_0_14_38 () Real)
(declare-fun l_0_14_227 () Real)
(declare-fun l_0_14_206 () Real)
(declare-fun l_0_14_17 () Real)
(declare-fun l_0_14_129 () Real)
(declare-fun l_0_14_87 () Real)
(declare-fun l_0_14_171 () Real)
(declare-fun l_0_14_150 () Real)
(declare-fun l_0_14_108 () Real)
(declare-fun l_0_14_6 () Real)
(declare-fun l_0_14_27 () Real)
(declare-fun l_0_14_131 () Real)
(declare-fun l_0_14_130 () Real)
(declare-fun l_0_14_89 () Real)
(declare-fun l_0_14_88 () Real)
(declare-fun l_0_14_9 () Real)
(declare-fun l_0_14_30 () Real)
(declare-fun l_0_14_173 () Real)
(declare-fun l_0_14_172 () Real)
(declare-fun l_0_14_152 () Real)
(declare-fun l_0_14_151 () Real)
(declare-fun l_0_14_134 () Real)
(declare-fun l_0_14_133 () Real)
(declare-fun l_0_14_110 () Real)
(declare-fun l_0_14_109 () Real)
(declare-fun l_0_14_34 () Real)
(declare-fun l_0_14_13 () Real)
(declare-fun l_0_14_138 () Real)
(declare-fun l_0_14_137 () Real)
(declare-fun l_0_14_39 () Real)
(declare-fun l_0_14_18 () Real)
(declare-fun l_0_14_143 () Real)
(declare-fun l_0_14_142 () Real)
(declare-fun l_0_14_92 () Real)
(declare-fun l_0_14_91 () Real)
(declare-fun l_0_14_31 () Real)
(declare-fun l_0_14_176 () Real)
(declare-fun l_0_14_175 () Real)
(declare-fun l_0_14_155 () Real)
(declare-fun l_0_14_154 () Real)
(declare-fun l_0_14_113 () Real)
(declare-fun l_0_14_112 () Real)
(declare-fun l_0_14_10 () Real)
(declare-fun l_0_14_96 () Real)
(declare-fun l_0_14_95 () Real)
(declare-fun l_0_14_35 () Real)
(declare-fun l_0_14_180 () Real)
(declare-fun l_0_14_179 () Real)
(declare-fun l_0_14_159 () Real)
(declare-fun l_0_14_158 () Real)
(declare-fun l_0_14_117 () Real)
(declare-fun l_0_14_116 () Real)
(declare-fun l_0_14_14 () Real)
(declare-fun l_0_14_40 () Real)
(declare-fun l_0_14_185 () Real)
(declare-fun l_0_14_184 () Real)
(declare-fun l_0_14_164 () Real)
(declare-fun l_0_14_163 () Real)
(declare-fun l_0_14_122 () Real)
(declare-fun l_0_14_121 () Real)
(declare-fun l_0_14_101 () Real)
(declare-fun l_0_14_100 () Real)
(declare-fun l_0_14_19 () Real)
(declare-fun l_0_14_36 () Real)
(declare-fun l_0_14_15 () Real)
(declare-fun l_0_14_41 () Real)
(declare-fun l_0_14_20 () Real)
(declare-fun l_0_14_42 () Real)
(declare-fun l_0_14_21 () Real)
(declare-fun l_0_14_81 () Real)
(declare-fun l_0_14_69 () Real)
(declare-fun l_0_14_60 () Real)
(declare-fun l_0_14_48 () Real)
(declare-fun l_0_14_228 () Real)
(declare-fun l_0_14_216 () Real)
(declare-fun l_0_14_207 () Real)
(declare-fun l_0_14_195 () Real)
(declare-fun l_0_14_82 () Real)
(declare-fun l_0_14_73 () Real)
(declare-fun l_0_14_72 () Real)
(declare-fun l_0_14_61 () Real)
(declare-fun l_0_14_52 () Real)
(declare-fun l_0_14_51 () Real)
(declare-fun l_0_14_229 () Real)
(declare-fun l_0_14_220 () Real)
(declare-fun l_0_14_219 () Real)
(declare-fun l_0_14_208 () Real)
(declare-fun l_0_14_199 () Real)
(declare-fun l_0_14_198 () Real)
(declare-fun l_0_14_83 () Real)
(declare-fun l_0_14_78 () Real)
(declare-fun l_0_14_77 () Real)
(declare-fun l_0_14_76 () Real)
(declare-fun l_0_14_62 () Real)
(declare-fun l_0_14_57 () Real)
(declare-fun l_0_14_56 () Real)
(declare-fun l_0_14_55 () Real)
(declare-fun l_0_14_230 () Real)
(declare-fun l_0_14_225 () Real)
(declare-fun l_0_14_224 () Real)
(declare-fun l_0_14_223 () Real)
(declare-fun l_0_14_209 () Real)
(declare-fun l_0_14_204 () Real)
(declare-fun l_0_14_203 () Real)
(declare-fun l_0_14_202 () Real)
(declare-fun l_0_14_84 () Real)
(declare-fun l_0_14_63 () Real)
(declare-fun l_0_14_231 () Real)
(declare-fun l_0_14_210 () Real)
(declare-fun l_0_14_132 () Real)
(declare-fun l_0_14_144 () Real)
(declare-fun l_0_14_186 () Real)
(declare-fun l_0_14_174 () Real)
(declare-fun l_0_14_165 () Real)
(declare-fun l_0_14_153 () Real)
(declare-fun l_0_14_145 () Real)
(declare-fun l_0_14_136 () Real)
(declare-fun l_0_14_135 () Real)
(declare-fun l_0_14_123 () Real)
(declare-fun l_0_14_111 () Real)
(declare-fun l_0_14_90 () Real)
(declare-fun l_0_14_102 () Real)
(declare-fun l_0_14_146 () Real)
(declare-fun l_0_14_141 () Real)
(declare-fun l_0_14_140 () Real)
(declare-fun l_0_14_139 () Real)
(declare-fun l_0_14_147 () Real)
(declare-fun l_0_14_187 () Real)
(declare-fun l_0_14_178 () Real)
(declare-fun l_0_14_177 () Real)
(declare-fun l_0_14_166 () Real)
(declare-fun l_0_14_157 () Real)
(declare-fun l_0_14_156 () Real)
(declare-fun l_0_14_124 () Real)
(declare-fun l_0_14_115 () Real)
(declare-fun l_0_14_114 () Real)
(declare-fun l_0_14_94 () Real)
(declare-fun l_0_14_103 () Real)
(declare-fun l_0_14_93 () Real)
(declare-fun l_0_14_188 () Real)
(declare-fun l_0_14_183 () Real)
(declare-fun l_0_14_182 () Real)
(declare-fun l_0_14_181 () Real)
(declare-fun l_0_14_167 () Real)
(declare-fun l_0_14_162 () Real)
(declare-fun l_0_14_161 () Real)
(declare-fun l_0_14_160 () Real)
(declare-fun l_0_14_125 () Real)
(declare-fun l_0_14_120 () Real)
(declare-fun l_0_14_119 () Real)
(declare-fun l_0_14_118 () Real)
(declare-fun l_0_14_99 () Real)
(declare-fun l_0_14_104 () Real)
(declare-fun l_0_14_98 () Real)
(declare-fun l_0_14_97 () Real)
(declare-fun l_0_14_189 () Real)
(declare-fun l_0_14_168 () Real)
(declare-fun l_0_14_126 () Real)
(declare-fun l_0_14_105 () Real)
(declare-fun l_0_15_84 () Real)
(declare-fun l_0_15_83 () Real)
(declare-fun l_0_15_82 () Real)
(declare-fun l_0_15_81 () Real)
(declare-fun l_0_15_80 () Real)
(declare-fun l_0_15_79 () Real)
(declare-fun l_0_15_64 () Real)
(declare-fun l_0_15_63 () Real)
(declare-fun l_0_15_62 () Real)
(declare-fun l_0_15_61 () Real)
(declare-fun l_0_15_60 () Real)
(declare-fun l_0_15_59 () Real)
(declare-fun l_0_15_58 () Real)
(declare-fun l_0_15_43 () Real)
(declare-fun l_0_15_42 () Real)
(declare-fun l_0_15_41 () Real)
(declare-fun l_0_15_40 () Real)
(declare-fun l_0_15_39 () Real)
(declare-fun l_0_15_38 () Real)
(declare-fun l_0_15_37 () Real)
(declare-fun l_0_15_252 () Real)
(declare-fun l_0_15_251 () Real)
(declare-fun l_0_15_250 () Real)
(declare-fun l_0_15_249 () Real)
(declare-fun l_0_15_248 () Real)
(declare-fun l_0_15_247 () Real)
(declare-fun l_0_15_231 () Real)
(declare-fun l_0_15_230 () Real)
(declare-fun l_0_15_229 () Real)
(declare-fun l_0_15_228 () Real)
(declare-fun l_0_15_227 () Real)
(declare-fun l_0_15_226 () Real)
(declare-fun l_0_15_22 () Real)
(declare-fun l_0_15_210 () Real)
(declare-fun l_0_15_21 () Real)
(declare-fun l_0_15_209 () Real)
(declare-fun l_0_15_208 () Real)
(declare-fun l_0_15_207 () Real)
(declare-fun l_0_15_206 () Real)
(declare-fun l_0_15_205 () Real)
(declare-fun l_0_15_20 () Real)
(declare-fun l_0_15_19 () Real)
(declare-fun l_0_15_18 () Real)
(declare-fun l_0_15_17 () Real)
(declare-fun l_0_15_16 () Real)
(declare-fun l_0_15_142 () Real)
(declare-fun l_0_15_127 () Real)
(declare-fun l_0_15_1 () Real)
(declare-fun l_0_15_232 () Real)
(declare-fun l_0_15_211 () Real)
(declare-fun l_0_15_190 () Real)
(declare-fun l_0_15_66 () Real)
(declare-fun l_0_15_65 () Real)
(declare-fun l_0_15_45 () Real)
(declare-fun l_0_15_44 () Real)
(declare-fun l_0_15_3 () Real)
(declare-fun l_0_15_24 () Real)
(declare-fun l_0_15_234 () Real)
(declare-fun l_0_15_233 () Real)
(declare-fun l_0_15_23 () Real)
(declare-fun l_0_15_213 () Real)
(declare-fun l_0_15_212 () Real)
(declare-fun l_0_15_2 () Real)
(declare-fun l_0_15_192 () Real)
(declare-fun l_0_15_191 () Real)
(declare-fun l_0_15_75 () Real)
(declare-fun l_0_15_74 () Real)
(declare-fun l_0_15_54 () Real)
(declare-fun l_0_15_53 () Real)
(declare-fun l_0_15_33 () Real)
(declare-fun l_0_15_243 () Real)
(declare-fun l_0_15_242 () Real)
(declare-fun l_0_15_32 () Real)
(declare-fun l_0_15_222 () Real)
(declare-fun l_0_15_221 () Real)
(declare-fun l_0_15_201 () Real)
(declare-fun l_0_15_200 () Real)
(declare-fun l_0_15_12 () Real)
(declare-fun l_0_15_11 () Real)
(declare-fun l_0_15_78 () Real)
(declare-fun l_0_15_77 () Real)
(declare-fun l_0_15_76 () Real)
(declare-fun l_0_15_57 () Real)
(declare-fun l_0_15_56 () Real)
(declare-fun l_0_15_55 () Real)
(declare-fun l_0_15_36 () Real)
(declare-fun l_0_15_35 () Real)
(declare-fun l_0_15_34 () Real)
(declare-fun l_0_15_246 () Real)
(declare-fun l_0_15_245 () Real)
(declare-fun l_0_15_244 () Real)
(declare-fun l_0_15_225 () Real)
(declare-fun l_0_15_224 () Real)
(declare-fun l_0_15_223 () Real)
(declare-fun l_0_15_204 () Real)
(declare-fun l_0_15_203 () Real)
(declare-fun l_0_15_202 () Real)
(declare-fun l_0_15_15 () Real)
(declare-fun l_0_15_14 () Real)
(declare-fun l_0_15_13 () Real)
(declare-fun l_0_15_68 () Real)
(declare-fun l_0_15_67 () Real)
(declare-fun l_0_15_47 () Real)
(declare-fun l_0_15_46 () Real)
(declare-fun l_0_15_5 () Real)
(declare-fun l_0_15_26 () Real)
(declare-fun l_0_15_236 () Real)
(declare-fun l_0_15_235 () Real)
(declare-fun l_0_15_25 () Real)
(declare-fun l_0_15_215 () Real)
(declare-fun l_0_15_214 () Real)
(declare-fun l_0_15_4 () Real)
(declare-fun l_0_15_194 () Real)
(declare-fun l_0_15_193 () Real)
(declare-fun l_0_15_128 () Real)
(declare-fun l_0_15_86 () Real)
(declare-fun l_0_15_85 () Real)
(declare-fun l_0_15_71 () Real)
(declare-fun l_0_15_70 () Real)
(declare-fun l_0_15_50 () Real)
(declare-fun l_0_15_49 () Real)
(declare-fun l_0_15_8 () Real)
(declare-fun l_0_15_29 () Real)
(declare-fun l_0_15_239 () Real)
(declare-fun l_0_15_238 () Real)
(declare-fun l_0_15_28 () Real)
(declare-fun l_0_15_218 () Real)
(declare-fun l_0_15_217 () Real)
(declare-fun l_0_15_7 () Real)
(declare-fun l_0_15_197 () Real)
(declare-fun l_0_15_196 () Real)
(declare-fun l_0_15_170 () Real)
(declare-fun l_0_15_169 () Real)
(declare-fun l_0_15_149 () Real)
(declare-fun l_0_15_148 () Real)
(declare-fun l_0_15_107 () Real)
(declare-fun l_0_15_106 () Real)
(declare-fun l_0_15_129 () Real)
(declare-fun l_0_15_87 () Real)
(declare-fun l_0_15_171 () Real)
(declare-fun l_0_15_150 () Real)
(declare-fun l_0_15_108 () Real)
(declare-fun l_0_15_6 () Real)
(declare-fun l_0_15_27 () Real)
(declare-fun l_0_15_131 () Real)
(declare-fun l_0_15_130 () Real)
(declare-fun l_0_15_89 () Real)
(declare-fun l_0_15_88 () Real)
(declare-fun l_0_15_9 () Real)
(declare-fun l_0_15_30 () Real)
(declare-fun l_0_15_173 () Real)
(declare-fun l_0_15_172 () Real)
(declare-fun l_0_15_152 () Real)
(declare-fun l_0_15_151 () Real)
(declare-fun l_0_15_134 () Real)
(declare-fun l_0_15_133 () Real)
(declare-fun l_0_15_110 () Real)
(declare-fun l_0_15_109 () Real)
(declare-fun l_0_15_138 () Real)
(declare-fun l_0_15_137 () Real)
(declare-fun l_0_15_143 () Real)
(declare-fun l_0_15_92 () Real)
(declare-fun l_0_15_91 () Real)
(declare-fun l_0_15_31 () Real)
(declare-fun l_0_15_176 () Real)
(declare-fun l_0_15_175 () Real)
(declare-fun l_0_15_155 () Real)
(declare-fun l_0_15_154 () Real)
(declare-fun l_0_15_113 () Real)
(declare-fun l_0_15_112 () Real)
(declare-fun l_0_15_10 () Real)
(declare-fun l_0_15_96 () Real)
(declare-fun l_0_15_95 () Real)
(declare-fun l_0_15_180 () Real)
(declare-fun l_0_15_179 () Real)
(declare-fun l_0_15_159 () Real)
(declare-fun l_0_15_158 () Real)
(declare-fun l_0_15_117 () Real)
(declare-fun l_0_15_116 () Real)
(declare-fun l_0_15_185 () Real)
(declare-fun l_0_15_184 () Real)
(declare-fun l_0_15_164 () Real)
(declare-fun l_0_15_163 () Real)
(declare-fun l_0_15_122 () Real)
(declare-fun l_0_15_121 () Real)
(declare-fun l_0_15_101 () Real)
(declare-fun l_0_15_100 () Real)
(declare-fun l_0_15_69 () Real)
(declare-fun l_0_15_48 () Real)
(declare-fun l_0_15_237 () Real)
(declare-fun l_0_15_216 () Real)
(declare-fun l_0_15_195 () Real)
(declare-fun l_0_15_73 () Real)
(declare-fun l_0_15_72 () Real)
(declare-fun l_0_15_52 () Real)
(declare-fun l_0_15_51 () Real)
(declare-fun l_0_15_241 () Real)
(declare-fun l_0_15_240 () Real)
(declare-fun l_0_15_220 () Real)
(declare-fun l_0_15_219 () Real)
(declare-fun l_0_15_199 () Real)
(declare-fun l_0_15_198 () Real)
(declare-fun l_0_15_132 () Real)
(declare-fun l_0_15_144 () Real)
(declare-fun l_0_15_186 () Real)
(declare-fun l_0_15_174 () Real)
(declare-fun l_0_15_165 () Real)
(declare-fun l_0_15_153 () Real)
(declare-fun l_0_15_145 () Real)
(declare-fun l_0_15_136 () Real)
(declare-fun l_0_15_135 () Real)
(declare-fun l_0_15_123 () Real)
(declare-fun l_0_15_111 () Real)
(declare-fun l_0_15_90 () Real)
(declare-fun l_0_15_102 () Real)
(declare-fun l_0_15_146 () Real)
(declare-fun l_0_15_141 () Real)
(declare-fun l_0_15_140 () Real)
(declare-fun l_0_15_139 () Real)
(declare-fun l_0_15_147 () Real)
(declare-fun l_0_15_187 () Real)
(declare-fun l_0_15_178 () Real)
(declare-fun l_0_15_177 () Real)
(declare-fun l_0_15_166 () Real)
(declare-fun l_0_15_157 () Real)
(declare-fun l_0_15_156 () Real)
(declare-fun l_0_15_124 () Real)
(declare-fun l_0_15_115 () Real)
(declare-fun l_0_15_114 () Real)
(declare-fun l_0_15_94 () Real)
(declare-fun l_0_15_103 () Real)
(declare-fun l_0_15_93 () Real)
(declare-fun l_0_15_188 () Real)
(declare-fun l_0_15_183 () Real)
(declare-fun l_0_15_182 () Real)
(declare-fun l_0_15_181 () Real)
(declare-fun l_0_15_167 () Real)
(declare-fun l_0_15_162 () Real)
(declare-fun l_0_15_161 () Real)
(declare-fun l_0_15_160 () Real)
(declare-fun l_0_15_125 () Real)
(declare-fun l_0_15_120 () Real)
(declare-fun l_0_15_119 () Real)
(declare-fun l_0_15_118 () Real)
(declare-fun l_0_15_99 () Real)
(declare-fun l_0_15_104 () Real)
(declare-fun l_0_15_98 () Real)
(declare-fun l_0_15_97 () Real)
(declare-fun l_0_15_189 () Real)
(declare-fun l_0_15_168 () Real)
(declare-fun l_0_15_126 () Real)
(declare-fun l_0_15_105 () Real)
(declare-fun l_0_16_64 () Real)
(declare-fun l_0_16_43 () Real)
(declare-fun l_0_16_253 () Real)
(declare-fun l_0_16_232 () Real)
(declare-fun l_0_16_22 () Real)
(declare-fun l_0_16_211 () Real)
(declare-fun l_0_16_190 () Real)
(declare-fun l_0_16_1 () Real)
(declare-fun l_0_16_66 () Real)
(declare-fun l_0_16_65 () Real)
(declare-fun l_0_16_45 () Real)
(declare-fun l_0_16_44 () Real)
(declare-fun l_0_16_3 () Real)
(declare-fun l_0_16_255 () Real)
(declare-fun l_0_16_254 () Real)
(declare-fun l_0_16_24 () Real)
(declare-fun l_0_16_234 () Real)
(declare-fun l_0_16_233 () Real)
(declare-fun l_0_16_23 () Real)
(declare-fun l_0_16_213 () Real)
(declare-fun l_0_16_212 () Real)
(declare-fun l_0_16_2 () Real)
(declare-fun l_0_16_192 () Real)
(declare-fun l_0_16_191 () Real)
(declare-fun l_0_16_75 () Real)
(declare-fun l_0_16_74 () Real)
(declare-fun l_0_16_54 () Real)
(declare-fun l_0_16_53 () Real)
(declare-fun l_0_16_264 () Real)
(declare-fun l_0_16_263 () Real)
(declare-fun l_0_16_33 () Real)
(declare-fun l_0_16_243 () Real)
(declare-fun l_0_16_242 () Real)
(declare-fun l_0_16_32 () Real)
(declare-fun l_0_16_222 () Real)
(declare-fun l_0_16_221 () Real)
(declare-fun l_0_16_201 () Real)
(declare-fun l_0_16_200 () Real)
(declare-fun l_0_16_12 () Real)
(declare-fun l_0_16_11 () Real)
(declare-fun l_0_16_78 () Real)
(declare-fun l_0_16_77 () Real)
(declare-fun l_0_16_76 () Real)
(declare-fun l_0_16_57 () Real)
(declare-fun l_0_16_56 () Real)
(declare-fun l_0_16_55 () Real)
(declare-fun l_0_16_36 () Real)
(declare-fun l_0_16_35 () Real)
(declare-fun l_0_16_34 () Real)
(declare-fun l_0_16_267 () Real)
(declare-fun l_0_16_266 () Real)
(declare-fun l_0_16_265 () Real)
(declare-fun l_0_16_246 () Real)
(declare-fun l_0_16_245 () Real)
(declare-fun l_0_16_244 () Real)
(declare-fun l_0_16_225 () Real)
(declare-fun l_0_16_224 () Real)
(declare-fun l_0_16_223 () Real)
(declare-fun l_0_16_204 () Real)
(declare-fun l_0_16_203 () Real)
(declare-fun l_0_16_202 () Real)
(declare-fun l_0_16_15 () Real)
(declare-fun l_0_16_14 () Real)
(declare-fun l_0_16_13 () Real)
(declare-fun l_0_16_84 () Real)
(declare-fun l_0_16_83 () Real)
(declare-fun l_0_16_82 () Real)
(declare-fun l_0_16_81 () Real)
(declare-fun l_0_16_80 () Real)
(declare-fun l_0_16_79 () Real)
(declare-fun l_0_16_63 () Real)
(declare-fun l_0_16_62 () Real)
(declare-fun l_0_16_61 () Real)
(declare-fun l_0_16_60 () Real)
(declare-fun l_0_16_59 () Real)
(declare-fun l_0_16_58 () Real)
(declare-fun l_0_16_42 () Real)
(declare-fun l_0_16_41 () Real)
(declare-fun l_0_16_40 () Real)
(declare-fun l_0_16_39 () Real)
(declare-fun l_0_16_38 () Real)
(declare-fun l_0_16_37 () Real)
(declare-fun l_0_16_273 () Real)
(declare-fun l_0_16_272 () Real)
(declare-fun l_0_16_271 () Real)
(declare-fun l_0_16_270 () Real)
(declare-fun l_0_16_269 () Real)
(declare-fun l_0_16_268 () Real)
(declare-fun l_0_16_252 () Real)
(declare-fun l_0_16_251 () Real)
(declare-fun l_0_16_250 () Real)
(declare-fun l_0_16_249 () Real)
(declare-fun l_0_16_248 () Real)
(declare-fun l_0_16_247 () Real)
(declare-fun l_0_16_231 () Real)
(declare-fun l_0_16_230 () Real)
(declare-fun l_0_16_229 () Real)
(declare-fun l_0_16_228 () Real)
(declare-fun l_0_16_227 () Real)
(declare-fun l_0_16_226 () Real)
(declare-fun l_0_16_210 () Real)
(declare-fun l_0_16_21 () Real)
(declare-fun l_0_16_209 () Real)
(declare-fun l_0_16_208 () Real)
(declare-fun l_0_16_207 () Real)
(declare-fun l_0_16_206 () Real)
(declare-fun l_0_16_205 () Real)
(declare-fun l_0_16_20 () Real)
(declare-fun l_0_16_19 () Real)
(declare-fun l_0_16_18 () Real)
(declare-fun l_0_16_17 () Real)
(declare-fun l_0_16_16 () Real)
(declare-fun l_0_16_142 () Real)
(declare-fun l_0_16_127 () Real)
(declare-fun l_0_16_68 () Real)
(declare-fun l_0_16_67 () Real)
(declare-fun l_0_16_47 () Real)
(declare-fun l_0_16_46 () Real)
(declare-fun l_0_16_5 () Real)
(declare-fun l_0_16_257 () Real)
(declare-fun l_0_16_256 () Real)
(declare-fun l_0_16_26 () Real)
(declare-fun l_0_16_236 () Real)
(declare-fun l_0_16_235 () Real)
(declare-fun l_0_16_25 () Real)
(declare-fun l_0_16_215 () Real)
(declare-fun l_0_16_214 () Real)
(declare-fun l_0_16_4 () Real)
(declare-fun l_0_16_194 () Real)
(declare-fun l_0_16_193 () Real)
(declare-fun l_0_16_128 () Real)
(declare-fun l_0_16_86 () Real)
(declare-fun l_0_16_85 () Real)
(declare-fun l_0_16_71 () Real)
(declare-fun l_0_16_70 () Real)
(declare-fun l_0_16_50 () Real)
(declare-fun l_0_16_49 () Real)
(declare-fun l_0_16_8 () Real)
(declare-fun l_0_16_260 () Real)
(declare-fun l_0_16_259 () Real)
(declare-fun l_0_16_29 () Real)
(declare-fun l_0_16_239 () Real)
(declare-fun l_0_16_238 () Real)
(declare-fun l_0_16_28 () Real)
(declare-fun l_0_16_218 () Real)
(declare-fun l_0_16_217 () Real)
(declare-fun l_0_16_7 () Real)
(declare-fun l_0_16_197 () Real)
(declare-fun l_0_16_196 () Real)
(declare-fun l_0_16_170 () Real)
(declare-fun l_0_16_169 () Real)
(declare-fun l_0_16_149 () Real)
(declare-fun l_0_16_148 () Real)
(declare-fun l_0_16_107 () Real)
(declare-fun l_0_16_106 () Real)
(declare-fun l_0_16_129 () Real)
(declare-fun l_0_16_87 () Real)
(declare-fun l_0_16_171 () Real)
(declare-fun l_0_16_150 () Real)
(declare-fun l_0_16_108 () Real)
(declare-fun l_0_16_6 () Real)
(declare-fun l_0_16_27 () Real)
(declare-fun l_0_16_131 () Real)
(declare-fun l_0_16_130 () Real)
(declare-fun l_0_16_89 () Real)
(declare-fun l_0_16_88 () Real)
(declare-fun l_0_16_9 () Real)
(declare-fun l_0_16_30 () Real)
(declare-fun l_0_16_173 () Real)
(declare-fun l_0_16_172 () Real)
(declare-fun l_0_16_152 () Real)
(declare-fun l_0_16_151 () Real)
(declare-fun l_0_16_134 () Real)
(declare-fun l_0_16_133 () Real)
(declare-fun l_0_16_110 () Real)
(declare-fun l_0_16_109 () Real)
(declare-fun l_0_16_138 () Real)
(declare-fun l_0_16_137 () Real)
(declare-fun l_0_16_143 () Real)
(declare-fun l_0_16_92 () Real)
(declare-fun l_0_16_91 () Real)
(declare-fun l_0_16_31 () Real)
(declare-fun l_0_16_176 () Real)
(declare-fun l_0_16_175 () Real)
(declare-fun l_0_16_155 () Real)
(declare-fun l_0_16_154 () Real)
(declare-fun l_0_16_113 () Real)
(declare-fun l_0_16_112 () Real)
(declare-fun l_0_16_10 () Real)
(declare-fun l_0_16_96 () Real)
(declare-fun l_0_16_95 () Real)
(declare-fun l_0_16_180 () Real)
(declare-fun l_0_16_179 () Real)
(declare-fun l_0_16_159 () Real)
(declare-fun l_0_16_158 () Real)
(declare-fun l_0_16_117 () Real)
(declare-fun l_0_16_116 () Real)
(declare-fun l_0_16_185 () Real)
(declare-fun l_0_16_184 () Real)
(declare-fun l_0_16_164 () Real)
(declare-fun l_0_16_163 () Real)
(declare-fun l_0_16_122 () Real)
(declare-fun l_0_16_121 () Real)
(declare-fun l_0_16_101 () Real)
(declare-fun l_0_16_100 () Real)
(declare-fun l_0_16_69 () Real)
(declare-fun l_0_16_48 () Real)
(declare-fun l_0_16_258 () Real)
(declare-fun l_0_16_237 () Real)
(declare-fun l_0_16_216 () Real)
(declare-fun l_0_16_195 () Real)
(declare-fun l_0_16_73 () Real)
(declare-fun l_0_16_72 () Real)
(declare-fun l_0_16_52 () Real)
(declare-fun l_0_16_51 () Real)
(declare-fun l_0_16_262 () Real)
(declare-fun l_0_16_261 () Real)
(declare-fun l_0_16_241 () Real)
(declare-fun l_0_16_240 () Real)
(declare-fun l_0_16_220 () Real)
(declare-fun l_0_16_219 () Real)
(declare-fun l_0_16_199 () Real)
(declare-fun l_0_16_198 () Real)
(declare-fun l_0_16_132 () Real)
(declare-fun l_0_16_144 () Real)
(declare-fun l_0_16_186 () Real)
(declare-fun l_0_16_174 () Real)
(declare-fun l_0_16_165 () Real)
(declare-fun l_0_16_153 () Real)
(declare-fun l_0_16_145 () Real)
(declare-fun l_0_16_136 () Real)
(declare-fun l_0_16_135 () Real)
(declare-fun l_0_16_123 () Real)
(declare-fun l_0_16_111 () Real)
(declare-fun l_0_16_90 () Real)
(declare-fun l_0_16_102 () Real)
(declare-fun l_0_16_146 () Real)
(declare-fun l_0_16_141 () Real)
(declare-fun l_0_16_140 () Real)
(declare-fun l_0_16_139 () Real)
(declare-fun l_0_16_147 () Real)
(declare-fun l_0_16_187 () Real)
(declare-fun l_0_16_178 () Real)
(declare-fun l_0_16_177 () Real)
(declare-fun l_0_16_166 () Real)
(declare-fun l_0_16_157 () Real)
(declare-fun l_0_16_156 () Real)
(declare-fun l_0_16_124 () Real)
(declare-fun l_0_16_115 () Real)
(declare-fun l_0_16_114 () Real)
(declare-fun l_0_16_94 () Real)
(declare-fun l_0_16_103 () Real)
(declare-fun l_0_16_93 () Real)
(declare-fun l_0_16_188 () Real)
(declare-fun l_0_16_183 () Real)
(declare-fun l_0_16_182 () Real)
(declare-fun l_0_16_181 () Real)
(declare-fun l_0_16_167 () Real)
(declare-fun l_0_16_162 () Real)
(declare-fun l_0_16_161 () Real)
(declare-fun l_0_16_160 () Real)
(declare-fun l_0_16_125 () Real)
(declare-fun l_0_16_120 () Real)
(declare-fun l_0_16_119 () Real)
(declare-fun l_0_16_118 () Real)
(declare-fun l_0_16_99 () Real)
(declare-fun l_0_16_104 () Real)
(declare-fun l_0_16_98 () Real)
(declare-fun l_0_16_97 () Real)
(declare-fun l_0_16_189 () Real)
(declare-fun l_0_16_168 () Real)
(declare-fun l_0_16_126 () Real)
(declare-fun l_0_16_105 () Real)
(declare-fun l_0_17_64 () Real)
(declare-fun l_0_17_43 () Real)
(declare-fun l_0_17_274 () Real)
(declare-fun l_0_17_253 () Real)
(declare-fun l_0_17_232 () Real)
(declare-fun l_0_17_22 () Real)
(declare-fun l_0_17_211 () Real)
(declare-fun l_0_17_190 () Real)
(declare-fun l_0_17_1 () Real)
(declare-fun l_0_17_85 () Real)
(declare-fun l_0_17_70 () Real)
(declare-fun l_0_17_49 () Real)
(declare-fun l_0_17_280 () Real)
(declare-fun l_0_17_259 () Real)
(declare-fun l_0_17_238 () Real)
(declare-fun l_0_17_28 () Real)
(declare-fun l_0_17_217 () Real)
(declare-fun l_0_17_196 () Real)
(declare-fun l_0_17_169 () Real)
(declare-fun l_0_17_148 () Real)
(declare-fun l_0_17_106 () Real)
(declare-fun l_0_17_7 () Real)
(declare-fun l_0_17_9 () Real)
(declare-fun l_0_17_91 () Real)
(declare-fun l_0_17_8 () Real)
(declare-fun l_0_17_73 () Real)
(declare-fun l_0_17_72 () Real)
(declare-fun l_0_17_71 () Real)
(declare-fun l_0_17_52 () Real)
(declare-fun l_0_17_51 () Real)
(declare-fun l_0_17_50 () Real)
(declare-fun l_0_17_31 () Real)
(declare-fun l_0_17_30 () Real)
(declare-fun l_0_17_29 () Real)
(declare-fun l_0_17_283 () Real)
(declare-fun l_0_17_282 () Real)
(declare-fun l_0_17_281 () Real)
(declare-fun l_0_17_262 () Real)
(declare-fun l_0_17_261 () Real)
(declare-fun l_0_17_260 () Real)
(declare-fun l_0_17_241 () Real)
(declare-fun l_0_17_240 () Real)
(declare-fun l_0_17_239 () Real)
(declare-fun l_0_17_220 () Real)
(declare-fun l_0_17_219 () Real)
(declare-fun l_0_17_218 () Real)
(declare-fun l_0_17_199 () Real)
(declare-fun l_0_17_198 () Real)
(declare-fun l_0_17_197 () Real)
(declare-fun l_0_17_175 () Real)
(declare-fun l_0_17_154 () Real)
(declare-fun l_0_17_112 () Real)
(declare-fun l_0_17_10 () Real)
(declare-fun l_0_17_74 () Real)
(declare-fun l_0_17_53 () Real)
(declare-fun l_0_17_284 () Real)
(declare-fun l_0_17_263 () Real)
(declare-fun l_0_17_242 () Real)
(declare-fun l_0_17_32 () Real)
(declare-fun l_0_17_221 () Real)
(declare-fun l_0_17_200 () Real)
(declare-fun l_0_17_11 () Real)
(declare-fun l_0_17_78 () Real)
(declare-fun l_0_17_77 () Real)
(declare-fun l_0_17_76 () Real)
(declare-fun l_0_17_75 () Real)
(declare-fun l_0_17_57 () Real)
(declare-fun l_0_17_56 () Real)
(declare-fun l_0_17_55 () Real)
(declare-fun l_0_17_54 () Real)
(declare-fun l_0_17_36 () Real)
(declare-fun l_0_17_35 () Real)
(declare-fun l_0_17_34 () Real)
(declare-fun l_0_17_33 () Real)
(declare-fun l_0_17_288 () Real)
(declare-fun l_0_17_287 () Real)
(declare-fun l_0_17_286 () Real)
(declare-fun l_0_17_285 () Real)
(declare-fun l_0_17_267 () Real)
(declare-fun l_0_17_266 () Real)
(declare-fun l_0_17_265 () Real)
(declare-fun l_0_17_264 () Real)
(declare-fun l_0_17_246 () Real)
(declare-fun l_0_17_245 () Real)
(declare-fun l_0_17_244 () Real)
(declare-fun l_0_17_243 () Real)
(declare-fun l_0_17_225 () Real)
(declare-fun l_0_17_224 () Real)
(declare-fun l_0_17_223 () Real)
(declare-fun l_0_17_222 () Real)
(declare-fun l_0_17_204 () Real)
(declare-fun l_0_17_203 () Real)
(declare-fun l_0_17_202 () Real)
(declare-fun l_0_17_201 () Real)
(declare-fun l_0_17_15 () Real)
(declare-fun l_0_17_14 () Real)
(declare-fun l_0_17_13 () Real)
(declare-fun l_0_17_12 () Real)
(declare-fun l_0_17_95 () Real)
(declare-fun l_0_17_179 () Real)
(declare-fun l_0_17_158 () Real)
(declare-fun l_0_17_116 () Real)
(declare-fun l_0_17_84 () Real)
(declare-fun l_0_17_83 () Real)
(declare-fun l_0_17_82 () Real)
(declare-fun l_0_17_81 () Real)
(declare-fun l_0_17_80 () Real)
(declare-fun l_0_17_79 () Real)
(declare-fun l_0_17_63 () Real)
(declare-fun l_0_17_62 () Real)
(declare-fun l_0_17_61 () Real)
(declare-fun l_0_17_60 () Real)
(declare-fun l_0_17_59 () Real)
(declare-fun l_0_17_58 () Real)
(declare-fun l_0_17_42 () Real)
(declare-fun l_0_17_41 () Real)
(declare-fun l_0_17_40 () Real)
(declare-fun l_0_17_39 () Real)
(declare-fun l_0_17_38 () Real)
(declare-fun l_0_17_37 () Real)
(declare-fun l_0_17_21 () Real)
(declare-fun l_0_17_20 () Real)
(declare-fun l_0_17_19 () Real)
(declare-fun l_0_17_18 () Real)
(declare-fun l_0_17_17 () Real)
(declare-fun l_0_17_16 () Real)
(declare-fun l_0_17_147 () Real)
(declare-fun l_0_17_146 () Real)
(declare-fun l_0_17_145 () Real)
(declare-fun l_0_17_144 () Real)
(declare-fun l_0_17_143 () Real)
(declare-fun l_0_17_142 () Real)
(declare-fun l_0_17_294 () Real)
(declare-fun l_0_17_293 () Real)
(declare-fun l_0_17_292 () Real)
(declare-fun l_0_17_291 () Real)
(declare-fun l_0_17_290 () Real)
(declare-fun l_0_17_289 () Real)
(declare-fun l_0_17_273 () Real)
(declare-fun l_0_17_272 () Real)
(declare-fun l_0_17_271 () Real)
(declare-fun l_0_17_270 () Real)
(declare-fun l_0_17_269 () Real)
(declare-fun l_0_17_268 () Real)
(declare-fun l_0_17_252 () Real)
(declare-fun l_0_17_251 () Real)
(declare-fun l_0_17_250 () Real)
(declare-fun l_0_17_249 () Real)
(declare-fun l_0_17_248 () Real)
(declare-fun l_0_17_247 () Real)
(declare-fun l_0_17_231 () Real)
(declare-fun l_0_17_230 () Real)
(declare-fun l_0_17_229 () Real)
(declare-fun l_0_17_228 () Real)
(declare-fun l_0_17_227 () Real)
(declare-fun l_0_17_226 () Real)
(declare-fun l_0_17_210 () Real)
(declare-fun l_0_17_209 () Real)
(declare-fun l_0_17_208 () Real)
(declare-fun l_0_17_207 () Real)
(declare-fun l_0_17_206 () Real)
(declare-fun l_0_17_205 () Real)
(declare-fun l_0_17_127 () Real)
(declare-fun l_0_17_65 () Real)
(declare-fun l_0_17_44 () Real)
(declare-fun l_0_17_275 () Real)
(declare-fun l_0_17_254 () Real)
(declare-fun l_0_17_233 () Real)
(declare-fun l_0_17_23 () Real)
(declare-fun l_0_17_212 () Real)
(declare-fun l_0_17_191 () Real)
(declare-fun l_0_17_2 () Real)
(declare-fun l_0_17_66 () Real)
(declare-fun l_0_17_45 () Real)
(declare-fun l_0_17_3 () Real)
(declare-fun l_0_17_276 () Real)
(declare-fun l_0_17_255 () Real)
(declare-fun l_0_17_24 () Real)
(declare-fun l_0_17_234 () Real)
(declare-fun l_0_17_213 () Real)
(declare-fun l_0_17_192 () Real)
(declare-fun l_0_17_68 () Real)
(declare-fun l_0_17_67 () Real)
(declare-fun l_0_17_47 () Real)
(declare-fun l_0_17_46 () Real)
(declare-fun l_0_17_5 () Real)
(declare-fun l_0_17_278 () Real)
(declare-fun l_0_17_277 () Real)
(declare-fun l_0_17_257 () Real)
(declare-fun l_0_17_256 () Real)
(declare-fun l_0_17_26 () Real)
(declare-fun l_0_17_236 () Real)
(declare-fun l_0_17_235 () Real)
(declare-fun l_0_17_25 () Real)
(declare-fun l_0_17_215 () Real)
(declare-fun l_0_17_214 () Real)
(declare-fun l_0_17_4 () Real)
(declare-fun l_0_17_194 () Real)
(declare-fun l_0_17_193 () Real)
(declare-fun l_0_17_128 () Real)
(declare-fun l_0_17_86 () Real)
(declare-fun l_0_17_170 () Real)
(declare-fun l_0_17_149 () Real)
(declare-fun l_0_17_107 () Real)
(declare-fun l_0_17_129 () Real)
(declare-fun l_0_17_87 () Real)
(declare-fun l_0_17_171 () Real)
(declare-fun l_0_17_150 () Real)
(declare-fun l_0_17_108 () Real)
(declare-fun l_0_17_6 () Real)
(declare-fun l_0_17_27 () Real)
(declare-fun l_0_17_131 () Real)
(declare-fun l_0_17_130 () Real)
(declare-fun l_0_17_89 () Real)
(declare-fun l_0_17_88 () Real)
(declare-fun l_0_17_173 () Real)
(declare-fun l_0_17_172 () Real)
(declare-fun l_0_17_152 () Real)
(declare-fun l_0_17_151 () Real)
(declare-fun l_0_17_134 () Real)
(declare-fun l_0_17_133 () Real)
(declare-fun l_0_17_110 () Real)
(declare-fun l_0_17_109 () Real)
(declare-fun l_0_17_138 () Real)
(declare-fun l_0_17_137 () Real)
(declare-fun l_0_17_92 () Real)
(declare-fun l_0_17_176 () Real)
(declare-fun l_0_17_155 () Real)
(declare-fun l_0_17_113 () Real)
(declare-fun l_0_17_96 () Real)
(declare-fun l_0_17_180 () Real)
(declare-fun l_0_17_159 () Real)
(declare-fun l_0_17_117 () Real)
(declare-fun l_0_17_185 () Real)
(declare-fun l_0_17_184 () Real)
(declare-fun l_0_17_164 () Real)
(declare-fun l_0_17_163 () Real)
(declare-fun l_0_17_122 () Real)
(declare-fun l_0_17_121 () Real)
(declare-fun l_0_17_101 () Real)
(declare-fun l_0_17_100 () Real)
(declare-fun l_0_17_69 () Real)
(declare-fun l_0_17_48 () Real)
(declare-fun l_0_17_279 () Real)
(declare-fun l_0_17_258 () Real)
(declare-fun l_0_17_237 () Real)
(declare-fun l_0_17_216 () Real)
(declare-fun l_0_17_195 () Real)
(declare-fun l_0_17_132 () Real)
(declare-fun l_0_17_186 () Real)
(declare-fun l_0_17_174 () Real)
(declare-fun l_0_17_165 () Real)
(declare-fun l_0_17_153 () Real)
(declare-fun l_0_17_136 () Real)
(declare-fun l_0_17_135 () Real)
(declare-fun l_0_17_123 () Real)
(declare-fun l_0_17_111 () Real)
(declare-fun l_0_17_90 () Real)
(declare-fun l_0_17_102 () Real)
(declare-fun l_0_17_141 () Real)
(declare-fun l_0_17_140 () Real)
(declare-fun l_0_17_139 () Real)
(declare-fun l_0_17_187 () Real)
(declare-fun l_0_17_178 () Real)
(declare-fun l_0_17_177 () Real)
(declare-fun l_0_17_166 () Real)
(declare-fun l_0_17_157 () Real)
(declare-fun l_0_17_156 () Real)
(declare-fun l_0_17_124 () Real)
(declare-fun l_0_17_115 () Real)
(declare-fun l_0_17_114 () Real)
(declare-fun l_0_17_94 () Real)
(declare-fun l_0_17_103 () Real)
(declare-fun l_0_17_93 () Real)
(declare-fun l_0_17_188 () Real)
(declare-fun l_0_17_183 () Real)
(declare-fun l_0_17_182 () Real)
(declare-fun l_0_17_181 () Real)
(declare-fun l_0_17_167 () Real)
(declare-fun l_0_17_162 () Real)
(declare-fun l_0_17_161 () Real)
(declare-fun l_0_17_160 () Real)
(declare-fun l_0_17_125 () Real)
(declare-fun l_0_17_120 () Real)
(declare-fun l_0_17_119 () Real)
(declare-fun l_0_17_118 () Real)
(declare-fun l_0_17_99 () Real)
(declare-fun l_0_17_104 () Real)
(declare-fun l_0_17_98 () Real)
(declare-fun l_0_17_97 () Real)
(declare-fun l_0_17_189 () Real)
(declare-fun l_0_17_168 () Real)
(declare-fun l_0_17_126 () Real)
(declare-fun l_0_17_105 () Real)
(declare-fun l_0_18_85 () Real)
(declare-fun l_0_18_84 () Real)
(declare-fun l_0_18_83 () Real)
(declare-fun l_0_18_82 () Real)
(declare-fun l_0_18_81 () Real)
(declare-fun l_0_18_80 () Real)
(declare-fun l_0_18_79 () Real)
(declare-fun l_0_18_64 () Real)
(declare-fun l_0_18_63 () Real)
(declare-fun l_0_18_62 () Real)
(declare-fun l_0_18_61 () Real)
(declare-fun l_0_18_60 () Real)
(declare-fun l_0_18_59 () Real)
(declare-fun l_0_18_58 () Real)
(declare-fun l_0_18_43 () Real)
(declare-fun l_0_18_42 () Real)
(declare-fun l_0_18_41 () Real)
(declare-fun l_0_18_40 () Real)
(declare-fun l_0_18_39 () Real)
(declare-fun l_0_18_38 () Real)
(declare-fun l_0_18_37 () Real)
(declare-fun l_0_18_21 () Real)
(declare-fun l_0_18_20 () Real)
(declare-fun l_0_18_19 () Real)
(declare-fun l_0_18_18 () Real)
(declare-fun l_0_18_17 () Real)
(declare-fun l_0_18_169 () Real)
(declare-fun l_0_18_16 () Real)
(declare-fun l_0_18_148 () Real)
(declare-fun l_0_18_147 () Real)
(declare-fun l_0_18_146 () Real)
(declare-fun l_0_18_145 () Real)
(declare-fun l_0_18_144 () Real)
(declare-fun l_0_18_143 () Real)
(declare-fun l_0_18_142 () Real)
(declare-fun l_0_18_106 () Real)
(declare-fun l_0_18_315 () Real)
(declare-fun l_0_18_314 () Real)
(declare-fun l_0_18_313 () Real)
(declare-fun l_0_18_312 () Real)
(declare-fun l_0_18_311 () Real)
(declare-fun l_0_18_310 () Real)
(declare-fun l_0_18_294 () Real)
(declare-fun l_0_18_293 () Real)
(declare-fun l_0_18_292 () Real)
(declare-fun l_0_18_291 () Real)
(declare-fun l_0_18_290 () Real)
(declare-fun l_0_18_289 () Real)
(declare-fun l_0_18_273 () Real)
(declare-fun l_0_18_272 () Real)
(declare-fun l_0_18_271 () Real)
(declare-fun l_0_18_270 () Real)
(declare-fun l_0_18_269 () Real)
(declare-fun l_0_18_268 () Real)
(declare-fun l_0_18_252 () Real)
(declare-fun l_0_18_251 () Real)
(declare-fun l_0_18_250 () Real)
(declare-fun l_0_18_249 () Real)
(declare-fun l_0_18_248 () Real)
(declare-fun l_0_18_247 () Real)
(declare-fun l_0_18_231 () Real)
(declare-fun l_0_18_230 () Real)
(declare-fun l_0_18_229 () Real)
(declare-fun l_0_18_228 () Real)
(declare-fun l_0_18_227 () Real)
(declare-fun l_0_18_226 () Real)
(declare-fun l_0_18_22 () Real)
(declare-fun l_0_18_210 () Real)
(declare-fun l_0_18_209 () Real)
(declare-fun l_0_18_208 () Real)
(declare-fun l_0_18_207 () Real)
(declare-fun l_0_18_206 () Real)
(declare-fun l_0_18_205 () Real)
(declare-fun l_0_18_127 () Real)
(declare-fun l_0_18_1 () Real)
(declare-fun l_0_18_295 () Real)
(declare-fun l_0_18_274 () Real)
(declare-fun l_0_18_253 () Real)
(declare-fun l_0_18_232 () Real)
(declare-fun l_0_18_211 () Real)
(declare-fun l_0_18_190 () Real)
(declare-fun l_0_18_70 () Real)
(declare-fun l_0_18_49 () Real)
(declare-fun l_0_18_301 () Real)
(declare-fun l_0_18_280 () Real)
(declare-fun l_0_18_259 () Real)
(declare-fun l_0_18_238 () Real)
(declare-fun l_0_18_28 () Real)
(declare-fun l_0_18_217 () Real)
(declare-fun l_0_18_196 () Real)
(declare-fun l_0_18_7 () Real)
(declare-fun l_0_18_9 () Real)
(declare-fun l_0_18_91 () Real)
(declare-fun l_0_18_8 () Real)
(declare-fun l_0_18_73 () Real)
(declare-fun l_0_18_72 () Real)
(declare-fun l_0_18_71 () Real)
(declare-fun l_0_18_52 () Real)
(declare-fun l_0_18_51 () Real)
(declare-fun l_0_18_50 () Real)
(declare-fun l_0_18_31 () Real)
(declare-fun l_0_18_304 () Real)
(declare-fun l_0_18_303 () Real)
(declare-fun l_0_18_302 () Real)
(declare-fun l_0_18_30 () Real)
(declare-fun l_0_18_29 () Real)
(declare-fun l_0_18_283 () Real)
(declare-fun l_0_18_282 () Real)
(declare-fun l_0_18_281 () Real)
(declare-fun l_0_18_262 () Real)
(declare-fun l_0_18_261 () Real)
(declare-fun l_0_18_260 () Real)
(declare-fun l_0_18_241 () Real)
(declare-fun l_0_18_240 () Real)
(declare-fun l_0_18_239 () Real)
(declare-fun l_0_18_220 () Real)
(declare-fun l_0_18_219 () Real)
(declare-fun l_0_18_218 () Real)
(declare-fun l_0_18_199 () Real)
(declare-fun l_0_18_198 () Real)
(declare-fun l_0_18_197 () Real)
(declare-fun l_0_18_175 () Real)
(declare-fun l_0_18_154 () Real)
(declare-fun l_0_18_112 () Real)
(declare-fun l_0_18_10 () Real)
(declare-fun l_0_18_74 () Real)
(declare-fun l_0_18_53 () Real)
(declare-fun l_0_18_305 () Real)
(declare-fun l_0_18_284 () Real)
(declare-fun l_0_18_263 () Real)
(declare-fun l_0_18_242 () Real)
(declare-fun l_0_18_32 () Real)
(declare-fun l_0_18_221 () Real)
(declare-fun l_0_18_200 () Real)
(declare-fun l_0_18_11 () Real)
(declare-fun l_0_18_78 () Real)
(declare-fun l_0_18_77 () Real)
(declare-fun l_0_18_76 () Real)
(declare-fun l_0_18_75 () Real)
(declare-fun l_0_18_57 () Real)
(declare-fun l_0_18_56 () Real)
(declare-fun l_0_18_55 () Real)
(declare-fun l_0_18_54 () Real)
(declare-fun l_0_18_36 () Real)
(declare-fun l_0_18_35 () Real)
(declare-fun l_0_18_34 () Real)
(declare-fun l_0_18_33 () Real)
(declare-fun l_0_18_309 () Real)
(declare-fun l_0_18_308 () Real)
(declare-fun l_0_18_307 () Real)
(declare-fun l_0_18_306 () Real)
(declare-fun l_0_18_288 () Real)
(declare-fun l_0_18_287 () Real)
(declare-fun l_0_18_286 () Real)
(declare-fun l_0_18_285 () Real)
(declare-fun l_0_18_267 () Real)
(declare-fun l_0_18_266 () Real)
(declare-fun l_0_18_265 () Real)
(declare-fun l_0_18_264 () Real)
(declare-fun l_0_18_246 () Real)
(declare-fun l_0_18_245 () Real)
(declare-fun l_0_18_244 () Real)
(declare-fun l_0_18_243 () Real)
(declare-fun l_0_18_225 () Real)
(declare-fun l_0_18_224 () Real)
(declare-fun l_0_18_223 () Real)
(declare-fun l_0_18_222 () Real)
(declare-fun l_0_18_204 () Real)
(declare-fun l_0_18_203 () Real)
(declare-fun l_0_18_202 () Real)
(declare-fun l_0_18_201 () Real)
(declare-fun l_0_18_15 () Real)
(declare-fun l_0_18_14 () Real)
(declare-fun l_0_18_13 () Real)
(declare-fun l_0_18_12 () Real)
(declare-fun l_0_18_95 () Real)
(declare-fun l_0_18_179 () Real)
(declare-fun l_0_18_158 () Real)
(declare-fun l_0_18_116 () Real)
(declare-fun l_0_18_65 () Real)
(declare-fun l_0_18_44 () Real)
(declare-fun l_0_18_296 () Real)
(declare-fun l_0_18_275 () Real)
(declare-fun l_0_18_254 () Real)
(declare-fun l_0_18_233 () Real)
(declare-fun l_0_18_23 () Real)
(declare-fun l_0_18_212 () Real)
(declare-fun l_0_18_191 () Real)
(declare-fun l_0_18_2 () Real)
(declare-fun l_0_18_66 () Real)
(declare-fun l_0_18_45 () Real)
(declare-fun l_0_18_3 () Real)
(declare-fun l_0_18_297 () Real)
(declare-fun l_0_18_276 () Real)
(declare-fun l_0_18_255 () Real)
(declare-fun l_0_18_24 () Real)
(declare-fun l_0_18_234 () Real)
(declare-fun l_0_18_213 () Real)
(declare-fun l_0_18_192 () Real)
(declare-fun l_0_18_68 () Real)
(declare-fun l_0_18_67 () Real)
(declare-fun l_0_18_47 () Real)
(declare-fun l_0_18_46 () Real)
(declare-fun l_0_18_5 () Real)
(declare-fun l_0_18_299 () Real)
(declare-fun l_0_18_298 () Real)
(declare-fun l_0_18_278 () Real)
(declare-fun l_0_18_277 () Real)
(declare-fun l_0_18_257 () Real)
(declare-fun l_0_18_256 () Real)
(declare-fun l_0_18_26 () Real)
(declare-fun l_0_18_236 () Real)
(declare-fun l_0_18_235 () Real)
(declare-fun l_0_18_25 () Real)
(declare-fun l_0_18_215 () Real)
(declare-fun l_0_18_214 () Real)
(declare-fun l_0_18_4 () Real)
(declare-fun l_0_18_194 () Real)
(declare-fun l_0_18_193 () Real)
(declare-fun l_0_18_128 () Real)
(declare-fun l_0_18_86 () Real)
(declare-fun l_0_18_170 () Real)
(declare-fun l_0_18_149 () Real)
(declare-fun l_0_18_107 () Real)
(declare-fun l_0_18_129 () Real)
(declare-fun l_0_18_87 () Real)
(declare-fun l_0_18_171 () Real)
(declare-fun l_0_18_150 () Real)
(declare-fun l_0_18_108 () Real)
(declare-fun l_0_18_6 () Real)
(declare-fun l_0_18_27 () Real)
(declare-fun l_0_18_131 () Real)
(declare-fun l_0_18_130 () Real)
(declare-fun l_0_18_89 () Real)
(declare-fun l_0_18_88 () Real)
(declare-fun l_0_18_173 () Real)
(declare-fun l_0_18_172 () Real)
(declare-fun l_0_18_152 () Real)
(declare-fun l_0_18_151 () Real)
(declare-fun l_0_18_134 () Real)
(declare-fun l_0_18_133 () Real)
(declare-fun l_0_18_110 () Real)
(declare-fun l_0_18_109 () Real)
(declare-fun l_0_18_138 () Real)
(declare-fun l_0_18_137 () Real)
(declare-fun l_0_18_92 () Real)
(declare-fun l_0_18_176 () Real)
(declare-fun l_0_18_155 () Real)
(declare-fun l_0_18_113 () Real)
(declare-fun l_0_18_96 () Real)
(declare-fun l_0_18_180 () Real)
(declare-fun l_0_18_159 () Real)
(declare-fun l_0_18_117 () Real)
(declare-fun l_0_18_185 () Real)
(declare-fun l_0_18_184 () Real)
(declare-fun l_0_18_164 () Real)
(declare-fun l_0_18_163 () Real)
(declare-fun l_0_18_122 () Real)
(declare-fun l_0_18_121 () Real)
(declare-fun l_0_18_101 () Real)
(declare-fun l_0_18_100 () Real)
(declare-fun l_0_18_69 () Real)
(declare-fun l_0_18_48 () Real)
(declare-fun l_0_18_300 () Real)
(declare-fun l_0_18_279 () Real)
(declare-fun l_0_18_258 () Real)
(declare-fun l_0_18_237 () Real)
(declare-fun l_0_18_216 () Real)
(declare-fun l_0_18_195 () Real)
(declare-fun l_0_18_132 () Real)
(declare-fun l_0_18_186 () Real)
(declare-fun l_0_18_174 () Real)
(declare-fun l_0_18_165 () Real)
(declare-fun l_0_18_153 () Real)
(declare-fun l_0_18_136 () Real)
(declare-fun l_0_18_135 () Real)
(declare-fun l_0_18_123 () Real)
(declare-fun l_0_18_111 () Real)
(declare-fun l_0_18_90 () Real)
(declare-fun l_0_18_102 () Real)
(declare-fun l_0_18_141 () Real)
(declare-fun l_0_18_140 () Real)
(declare-fun l_0_18_139 () Real)
(declare-fun l_0_18_187 () Real)
(declare-fun l_0_18_178 () Real)
(declare-fun l_0_18_177 () Real)
(declare-fun l_0_18_166 () Real)
(declare-fun l_0_18_157 () Real)
(declare-fun l_0_18_156 () Real)
(declare-fun l_0_18_124 () Real)
(declare-fun l_0_18_115 () Real)
(declare-fun l_0_18_114 () Real)
(declare-fun l_0_18_94 () Real)
(declare-fun l_0_18_103 () Real)
(declare-fun l_0_18_93 () Real)
(declare-fun l_0_18_188 () Real)
(declare-fun l_0_18_183 () Real)
(declare-fun l_0_18_182 () Real)
(declare-fun l_0_18_181 () Real)
(declare-fun l_0_18_167 () Real)
(declare-fun l_0_18_162 () Real)
(declare-fun l_0_18_161 () Real)
(declare-fun l_0_18_160 () Real)
(declare-fun l_0_18_125 () Real)
(declare-fun l_0_18_120 () Real)
(declare-fun l_0_18_119 () Real)
(declare-fun l_0_18_118 () Real)
(declare-fun l_0_18_99 () Real)
(declare-fun l_0_18_104 () Real)
(declare-fun l_0_18_98 () Real)
(declare-fun l_0_18_97 () Real)
(declare-fun l_0_18_189 () Real)
(declare-fun l_0_18_168 () Real)
(declare-fun l_0_18_126 () Real)
(declare-fun l_0_18_105 () Real)
(assert
 (= (- (* (* (- 1.0) l_0_0_1) l_0_0_1) (* l_0_0_2 l_0_0_2)) 0.0))
(assert
 (>= l_0_0_1 0.0))
(assert
 (>= l_0_0_2 0.0))
(assert
 (let ((?x3402 (* l_0_1_3 l_0_1_3)))
 (let ((?x3403 (- (- (* (* (- 1.0) l_0_1_1) l_0_1_1) (* l_0_1_2 l_0_1_2)) ?x3402)))
 (= ?x3403 0.0))))
(assert
 (>= l_0_1_1 0.0))
(assert
 (>= l_0_1_2 0.0))
(assert
 (>= l_0_1_3 0.0))
(assert
 (let ((?x3424 (* l_0_2_4 l_0_2_4)))
 (let ((?x3422 (* l_0_2_3 l_0_2_3)))
 (let ((?x3423 (- (- (* (* (- 1.0) l_0_2_1) l_0_2_1) (* l_0_2_2 l_0_2_2)) ?x3422)))
 (= (- ?x3423 ?x3424) 0.0)))))
(assert
 (>= l_0_2_1 0.0))
(assert
 (>= l_0_2_2 0.0))
(assert
 (>= l_0_2_3 0.0))
(assert
 (>= l_0_2_4 0.0))
(assert
 (let ((?x3452 (* l_0_3_5 l_0_3_5)))
 (let ((?x3450 (* l_0_3_4 l_0_3_4)))
 (let ((?x3448 (* l_0_3_3 l_0_3_3)))
 (let ((?x3449 (- (- (* (* (- 1.0) l_0_3_1) l_0_3_1) (* l_0_3_2 l_0_3_2)) ?x3448)))
 (= (- (- ?x3449 ?x3450) ?x3452) 0.0))))))
(assert
 (>= l_0_3_1 0.0))
(assert
 (>= l_0_3_2 0.0))
(assert
 (>= l_0_3_3 0.0))
(assert
 (>= l_0_3_4 0.0))
(assert
 (>= l_0_3_5 0.0))
(assert
 (let ((?x3486 (* l_0_4_6 l_0_4_6)))
 (let ((?x3484 (* l_0_4_5 l_0_4_5)))
 (let ((?x3482 (* l_0_4_4 l_0_4_4)))
 (let ((?x3480 (* l_0_4_3 l_0_4_3)))
 (let ((?x3481 (- (- (* (* (- 1.0) l_0_4_1) l_0_4_1) (* l_0_4_2 l_0_4_2)) ?x3480)))
 (= (- (- (- ?x3481 ?x3482) ?x3484) ?x3486) 0.0)))))))
(assert
 (>= l_0_4_1 0.0))
(assert
 (>= l_0_4_2 0.0))
(assert
 (>= l_0_4_3 0.0))
(assert
 (>= l_0_4_4 0.0))
(assert
 (>= l_0_4_5 0.0))
(assert
 (>= l_0_4_6 0.0))
(assert
 (let ((?x3526 (* l_0_5_7 l_0_5_7)))
 (let ((?x3524 (* l_0_5_6 l_0_5_6)))
 (let ((?x3522 (* l_0_5_5 l_0_5_5)))
 (let ((?x3520 (* l_0_5_4 l_0_5_4)))
 (let ((?x3518 (* l_0_5_3 l_0_5_3)))
 (let ((?x3519 (- (- (* (* (- 1.0) l_0_5_1) l_0_5_1) (* l_0_5_2 l_0_5_2)) ?x3518)))
 (= (- (- (- (- ?x3519 ?x3520) ?x3522) ?x3524) ?x3526) 0.0))))))))
(assert
 (>= l_0_5_1 0.0))
(assert
 (>= l_0_5_2 0.0))
(assert
 (>= l_0_5_3 0.0))
(assert
 (>= l_0_5_4 0.0))
(assert
 (>= l_0_5_5 0.0))
(assert
 (>= l_0_5_6 0.0))
(assert
 (>= l_0_5_7 0.0))
(assert
 (let ((?x3564 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x3565 (- (- (* 6.0 (* l_0_6_1 l_0_6_1)) (* l_0_6_148 l_0_6_148)) ?x3564)))
 (let ((?x3572 (+ (- ?x3565 (* (* 1.0 l_0_6_43) l_0_6_43)) (* 1.0 (* l_0_6_64 l_0_6_64)))))
 (= (+ ?x3572 1.0) 0.0)))))
(assert
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x3606 (* ?x3605 l_0_6_65)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x3603 (* ?x3602 l_0_6_44)))
 (let ((?x3577 (* l_0_6_22 l_0_6_22)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x3599 (* ?x3598 l_0_6_23)))
 (let ((?x3597 (- (- (* (* 12.0 l_0_6_1) l_0_6_2) (* l_0_6_1 l_0_6_1)) (* (* 2.0 l_0_6_148) l_0_6_149))))
 (= (+ (- (+ (- ?x3597 ?x3599) ?x3577) ?x3603) ?x3606) 0.0))))))))))
(assert
 (let ((?x3659 (* l_0_6_3 l_0_6_3)))
 (let ((?x3660 (* 6.0 ?x3659)))
 (let ((?x3657 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x3654 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x3647 (* l_0_6_2 l_0_6_2)))
 (let ((?x3648 (* 6.0 ?x3647)))
 (let ((?x3645 (* l_0_6_150 l_0_6_150)))
 (let ((?x3646 (- (- (* (* (- 2.0) l_0_6_1) l_0_6_2) (* l_0_6_149 l_0_6_149)) ?x3645)))
 (let ((?x3658 (- (- (+ (+ ?x3646 ?x3648) (* (* 2.0 l_0_6_22) l_0_6_23)) ?x3654) ?x3657)))
 (let ((?x3667 (- (- (+ ?x3658 ?x3660) (* (* 1.0 l_0_6_44) l_0_6_44)) (* (* 1.0 l_0_6_45) l_0_6_45))))
 (let ((?x3673 (+ (+ ?x3667 (* 1.0 (* l_0_6_65 l_0_6_65))) (* 1.0 (* l_0_6_66 l_0_6_66)))))
 (= ?x3673 0.0)))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3746 (* ?x3745 l_0_6_68)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3743 (* ?x3742 l_0_6_67)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3740 (* ?x3739 l_0_6_47)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3737 (* ?x3736 l_0_6_46)))
 (let ((?x3733 (* 12.0 l_0_6_3)))
 (let ((?x3734 (* ?x3733 l_0_6_5)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3731 (* ?x3730 l_0_6_26)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3728 (* ?x3727 l_0_6_25)))
 (let ((?x3722 (* 12.0 l_0_6_2)))
 (let ((?x3723 (* ?x3722 l_0_6_4)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x3714 (* ?x3713 l_0_6_128)))
 (let ((?x3718 (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_4) ?x3714) (* (* 2.0 l_0_6_149) l_0_6_151))))
 (let ((?x3726 (+ (+ (- ?x3718 (* (* 2.0 l_0_6_150) l_0_6_152)) ?x3723) (* (* 2.0 l_0_6_22) l_0_6_25))))
 (let ((?x3747 (+ (+ (- (- (+ (- (- ?x3726 ?x3728) ?x3731) ?x3734) ?x3737) ?x3740) ?x3743) ?x3746)))
 (= ?x3747 0.0)))))))))))))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x3836 (* ?x3835 l_0_6_86)))
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3833 (* ?x3745 l_0_6_71)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3831 (* ?x3742 l_0_6_70)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3829 (* ?x3739 l_0_6_50)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3827 (* ?x3736 l_0_6_49)))
 (let ((?x3733 (* 12.0 l_0_6_3)))
 (let ((?x3825 (* ?x3733 l_0_6_8)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3823 (* ?x3730 l_0_6_29)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3821 (* ?x3727 l_0_6_28)))
 (let ((?x3722 (* 12.0 l_0_6_2)))
 (let ((?x3817 (* ?x3722 l_0_6_7)))
 (let ((?x3812 (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) (* (* 2.0 l_0_6_106) l_0_6_107))))
 (let ((?x3816 (- (- ?x3812 (* (* 2.0 l_0_6_149) l_0_6_154)) (* (* 2.0 l_0_6_150) l_0_6_155))))
 (let ((?x3824 (- (- (+ (+ ?x3816 ?x3817) (* (* 2.0 l_0_6_22) l_0_6_28)) ?x3821) ?x3823)))
 (= (- (+ (+ (- (- (+ ?x3824 ?x3825) ?x3827) ?x3829) ?x3831) ?x3833) ?x3836) 0.0)))))))))))))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3933 (* ?x3745 l_0_6_75)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3931 (* ?x3742 l_0_6_74)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x3606 (* ?x3605 l_0_6_65)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3928 (* ?x3739 l_0_6_54)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3926 (* ?x3736 l_0_6_53)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x3603 (* ?x3602 l_0_6_44)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3923 (* ?x3730 l_0_6_33)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3921 (* ?x3727 l_0_6_32)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x3913 (* ?x3912 l_0_6_3)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x3910 (* ?x3909 l_0_6_2)))
 (let ((?x3916 (- (+ (+ (* (* (- 2.0) l_0_6_1) l_0_6_11) ?x3910) ?x3913) (* (* 2.0 l_0_6_149) l_0_6_158))))
 (let ((?x3920 (+ (- ?x3916 (* (* 2.0 l_0_6_150) l_0_6_159)) (* (* 2.0 l_0_6_22) l_0_6_32))))
 (let ((?x3932 (+ (- (- (- (+ (- (- ?x3920 ?x3921) ?x3923) ?x3603) ?x3926) ?x3928) ?x3606) ?x3931)))
 (= (+ ?x3932 ?x3933) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x4025 (* ?x3745 l_0_6_80)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x4023 (* ?x3742 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x4021 (* ?x4020 l_0_6_65)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x4018 (* ?x3739 l_0_6_59)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x4016 (* ?x3736 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x4014 (* ?x4013 l_0_6_44)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x4011 (* ?x3730 l_0_6_38)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x4009 (* ?x3727 l_0_6_37)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x3599 (* ?x3598 l_0_6_23)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x4004 (* ?x4003 l_0_6_3)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x4001 (* ?x4000 l_0_6_2)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x3714 (* ?x3713 l_0_6_128)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x3592 (* ?x3591 l_0_6_2)))
 (let ((?x3997 (- (- (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x3592) ?x3714) (* (* 2.0 l_0_6_149) l_0_6_163))))
 (let ((?x4006 (- (+ (+ (- ?x3997 (* (* 2.0 l_0_6_150) l_0_6_164)) ?x4001) ?x4004) ?x3599)))
 (let ((?x4015 (- (- (- (+ ?x4006 (* (* 2.0 l_0_6_22) l_0_6_37)) ?x4009) ?x4011) ?x4014)))
 (= (+ (+ (+ (- (- ?x4015 ?x4016) ?x4018) ?x4021) ?x4023) ?x4025) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x3659 (* l_0_6_3 l_0_6_3)))
 (let ((?x3689 (* l_0_6_24 l_0_6_24)))
 (let ((?x4096 (- (+ (+ (* (- l_0_6_2) l_0_6_2) (* l_0_6_23 l_0_6_23)) ?x3689) ?x3659)))
 (= ?x4096 0.0)))))
(assert
 (let ((?x4113 (- (+ (* l_0_6_128 l_0_6_128) (* l_0_6_129 l_0_6_129)) (* (* 2.0 l_0_6_2) l_0_6_4))))
 (let ((?x4119 (+ (+ ?x4113 (* (* 2.0 l_0_6_23) l_0_6_25)) (* (* 2.0 l_0_6_24) l_0_6_26))))
 (= (- ?x4119 (* (* 2.0 l_0_6_3) l_0_6_5)) 0.0))))
(assert
 (let ((?x4156 (* l_0_6_87 l_0_6_87)))
 (let ((?x4154 (* l_0_6_86 l_0_6_86)))
 (let ((?x4147 (- (+ (* l_0_6_107 l_0_6_107) (* l_0_6_108 l_0_6_108)) (* (* 2.0 l_0_6_2) l_0_6_7))))
 (let ((?x4151 (+ (+ ?x4147 (* (* 2.0 l_0_6_23) l_0_6_28)) (* (* 2.0 l_0_6_24) l_0_6_29))))
 (= (- (- (- ?x4151 (* (* 2.0 l_0_6_3) l_0_6_8)) ?x4154) ?x4156) 0.0))))))
(assert
 (let ((?x3671 (* l_0_6_66 l_0_6_66)))
 (let ((?x3668 (* l_0_6_65 l_0_6_65)))
 (let ((?x3700 (* l_0_6_45 l_0_6_45)))
 (let ((?x3696 (* l_0_6_44 l_0_6_44)))
 (let ((?x4188 (- (* (* (- 2.0) l_0_6_11) l_0_6_2) (* (* 2.0 l_0_6_12) l_0_6_3))))
 (let ((?x4192 (+ (+ ?x4188 (* (* 2.0 l_0_6_23) l_0_6_32)) (* (* 2.0 l_0_6_24) l_0_6_33))))
 (= (- (- (+ (+ ?x4192 ?x3696) ?x3700) ?x3668) ?x3671) 0.0))))))))
(assert
 (let ((?x3671 (* l_0_6_66 l_0_6_66)))
 (let ((?x4242 (* 3.0 ?x3671)))
 (let ((?x3668 (* l_0_6_65 l_0_6_65)))
 (let ((?x4240 (* 3.0 ?x3668)))
 (let ((?x4238 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (let ((?x3659 (* l_0_6_3 l_0_6_3)))
 (let ((?x3660 (* 6.0 ?x3659)))
 (let ((?x3657 (* (* 6.0 l_0_6_24) l_0_6_24)))
 (let ((?x3654 (* (* 6.0 l_0_6_23) l_0_6_23)))
 (let ((?x3647 (* l_0_6_2 l_0_6_2)))
 (let ((?x3648 (* 6.0 ?x3647)))
 (let ((?x4221 (- (- (* (- l_0_6_128) l_0_6_128) (* l_0_6_129 l_0_6_129)) (* (* 2.0 l_0_6_16) l_0_6_2))))
 (let ((?x4227 (+ (+ (- ?x4221 (* (* 2.0 l_0_6_17) l_0_6_3)) ?x3648) (* (* 2.0 l_0_6_23) l_0_6_37))))
 (let ((?x4232 (+ (- (+ (- ?x4227 ?x3654) (* (* 2.0 l_0_6_24) l_0_6_38)) ?x3657) ?x3660)))
 (let ((?x4243 (+ (+ (- (- ?x4232 (* (* 3.0 l_0_6_44) l_0_6_44)) ?x4238) ?x4240) ?x4242)))
 (= ?x4243 0.0)))))))))))))))))
(assert
 (let ((?x4294 (* l_0_6_6 l_0_6_6)))
 (let ((?x4292 (* l_0_6_5 l_0_6_5)))
 (let ((?x4290 (* l_0_6_4 l_0_6_4)))
 (let ((?x4288 (* l_0_6_27 l_0_6_27)))
 (let ((?x4286 (* l_0_6_26 l_0_6_26)))
 (let ((?x4284 (* l_0_6_25 l_0_6_25)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4282 (* ?x4281 l_0_6_131)))
 (let ((?x4289 (+ (+ (+ (+ (* (* 2.0 l_0_6_128) l_0_6_130) ?x4282) ?x4284) ?x4286) ?x4288)))
 (= (- (- (- ?x4289 ?x4290) ?x4292) ?x4294) 0.0)))))))))))
(assert
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4343 (* ?x4342 l_0_6_89)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4340 (* ?x4339 l_0_6_88)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4319 (* ?x4281 l_0_6_134)))
 (let ((?x4279 (* 2.0 l_0_6_128)))
 (let ((?x4317 (* ?x4279 l_0_6_133)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4315 (* ?x4314 l_0_6_110)))
 (let ((?x4323 (+ (+ (+ (+ (* (* 2.0 l_0_6_107) l_0_6_109) ?x4315) ?x4317) ?x4319) (* (* 2.0 l_0_6_25) l_0_6_28))))
 (let ((?x4329 (+ (+ ?x4323 (* (* 2.0 l_0_6_26) l_0_6_29)) (* (* 2.0 l_0_6_27) l_0_6_30))))
 (let ((?x4335 (- (- ?x4329 (* (* 2.0 l_0_6_4) l_0_6_7)) (* (* 2.0 l_0_6_5) l_0_6_8))))
 (= (- (- (- ?x4335 (* (* 2.0 l_0_6_6) l_0_6_9)) ?x4340) ?x4343) 0.0)))))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3746 (* ?x3745 l_0_6_68)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3743 (* ?x3742 l_0_6_67)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3740 (* ?x3739 l_0_6_47)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3737 (* ?x3736 l_0_6_46)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4397 (* ?x4281 l_0_6_138)))
 (let ((?x4279 (* 2.0 l_0_6_128)))
 (let ((?x4395 (* ?x4279 l_0_6_137)))
 (let ((?x4394 (- (* (* (- 2.0) l_0_6_11) l_0_6_4) (* (* 2.0 l_0_6_12) l_0_6_5))))
 (let ((?x4403 (+ (- (+ (+ ?x4394 ?x4395) ?x4397) (* (* 2.0 l_0_6_13) l_0_6_6)) (* (* 2.0 l_0_6_25) l_0_6_32))))
 (let ((?x4407 (+ (+ ?x4403 (* (* 2.0 l_0_6_26) l_0_6_33)) (* (* 2.0 l_0_6_27) l_0_6_34))))
 (= (- (- (+ (+ ?x4407 ?x3737) ?x3740) ?x3743) ?x3746) 0.0)))))))))))))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4482 (* ?x4481 l_0_6_68)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4479 (* ?x4478 l_0_6_67)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4476 (* ?x4475 l_0_6_47)))
 (let ((?x3733 (* 12.0 l_0_6_3)))
 (let ((?x3734 (* ?x3733 l_0_6_5)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3731 (* ?x3730 l_0_6_26)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3728 (* ?x3727 l_0_6_25)))
 (let ((?x3722 (* 12.0 l_0_6_2)))
 (let ((?x3723 (* ?x3722 l_0_6_4)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4453 (* ?x4281 l_0_6_143)))
 (let ((?x4282 (* ?x4281 l_0_6_131)))
 (let ((?x4451 (+ (* (* (- 2.0) l_0_6_128) l_0_6_130) (* (* 2.0 l_0_6_128) l_0_6_142))))
 (let ((?x4458 (- (- (+ (- ?x4451 ?x4282) ?x4453) (* (* 2.0 l_0_6_16) l_0_6_4)) (* (* 2.0 l_0_6_17) l_0_6_5))))
 (let ((?x4464 (- (- (+ (- ?x4458 (* (* 2.0 l_0_6_18) l_0_6_6)) ?x3723) ?x3728) ?x3731)))
 (let ((?x4468 (+ (+ ?x4464 (* (* 2.0 l_0_6_25) l_0_6_37)) (* (* 2.0 l_0_6_26) l_0_6_38))))
 (let ((?x4474 (- (+ (+ ?x4468 (* (* 2.0 l_0_6_27) l_0_6_39)) ?x3734) (* (* 6.0 l_0_6_44) l_0_6_46))))
 (= (+ (+ (- ?x4474 ?x4476) ?x4479) ?x4482) 0.0))))))))))))))))))))))))
(assert
 (let ((?x4562 (* l_0_6_9 l_0_6_9)))
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4560 (* ?x4342 l_0_6_92)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4558 (* ?x4339 l_0_6_91)))
 (let ((?x4556 (* l_0_6_8 l_0_6_8)))
 (let ((?x4554 (* l_0_6_7 l_0_6_7)))
 (let ((?x4552 (* l_0_6_31 l_0_6_31)))
 (let ((?x4550 (* l_0_6_30 l_0_6_30)))
 (let ((?x4548 (* l_0_6_29 l_0_6_29)))
 (let ((?x4546 (* l_0_6_28 l_0_6_28)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4544 (* ?x4314 l_0_6_113)))
 (let ((?x4543 (+ (* (- l_0_6_10) l_0_6_10) (* (* 2.0 l_0_6_107) l_0_6_112))))
 (let ((?x4557 (- (- (+ (+ (+ (+ (+ ?x4543 ?x4544) ?x4546) ?x4548) ?x4550) ?x4552) ?x4554) ?x4556)))
 (= (- (- (- ?x4557 ?x4558) ?x4560) ?x4562) 0.0)))))))))))))))))
(assert
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4626 (* ?x4342 l_0_6_96)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4624 (* ?x4339 l_0_6_95)))
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3833 (* ?x3745 l_0_6_71)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3831 (* ?x3742 l_0_6_70)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3829 (* ?x3739 l_0_6_50)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3827 (* ?x3736 l_0_6_49)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4599 (* ?x4314 l_0_6_117)))
 (let ((?x4598 (+ (* (* (- 2.0) l_0_6_10) l_0_6_14) (* (* 2.0 l_0_6_107) l_0_6_116))))
 (let ((?x4605 (- (- (+ ?x4598 ?x4599) (* (* 2.0 l_0_6_11) l_0_6_7)) (* (* 2.0 l_0_6_12) l_0_6_8))))
 (let ((?x4610 (+ (- ?x4605 (* (* 2.0 l_0_6_13) l_0_6_9)) (* (* 2.0 l_0_6_28) l_0_6_32))))
 (let ((?x4616 (+ (+ ?x4610 (* (* 2.0 l_0_6_29) l_0_6_33)) (* (* 2.0 l_0_6_30) l_0_6_34))))
 (let ((?x4622 (- (+ (+ (+ ?x4616 (* (* 2.0 l_0_6_31) l_0_6_35)) ?x3827) ?x3829) ?x3831)))
 (= (- (- (- ?x4622 ?x3833) ?x4624) ?x4626) 0.0)))))))))))))))))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4719 (* ?x4481 l_0_6_71)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4717 (* ?x4478 l_0_6_70)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4715 (* ?x4475 l_0_6_50)))
 (let ((?x3733 (* 12.0 l_0_6_3)))
 (let ((?x3825 (* ?x3733 l_0_6_8)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3823 (* ?x3730 l_0_6_29)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3821 (* ?x3727 l_0_6_28)))
 (let ((?x3722 (* 12.0 l_0_6_2)))
 (let ((?x3817 (* ?x3722 l_0_6_7)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4319 (* ?x4281 l_0_6_134)))
 (let ((?x4279 (* 2.0 l_0_6_128)))
 (let ((?x4317 (* ?x4279 l_0_6_133)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4691 (* ?x4314 l_0_6_122)))
 (let ((?x4312 (* 2.0 l_0_6_107)))
 (let ((?x4689 (* ?x4312 l_0_6_121)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x4687 (* ?x4686 l_0_6_87)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x4684 (* ?x4683 l_0_6_86)))
 (let ((?x4692 (+ (+ (- (- (* (* (- 2.0) l_0_6_10) l_0_6_19) ?x4684) ?x4687) ?x4689) ?x4691)))
 (let ((?x4698 (- (- (- (- ?x4692 ?x4317) ?x4319) (* (* 2.0 l_0_6_16) l_0_6_7)) (* (* 2.0 l_0_6_17) l_0_6_8))))
 (let ((?x4703 (- (- (+ (- ?x4698 (* (* 2.0 l_0_6_18) l_0_6_9)) ?x3817) ?x3821) ?x3823)))
 (let ((?x4707 (+ (+ ?x4703 (* (* 2.0 l_0_6_28) l_0_6_37)) (* (* 2.0 l_0_6_29) l_0_6_38))))
 (let ((?x4712 (+ (+ (+ ?x4707 ?x3825) (* (* 2.0 l_0_6_30) l_0_6_39)) (* (* 2.0 l_0_6_31) l_0_6_40))))
 (let ((?x4720 (+ (+ (- (- ?x4712 (* (* 6.0 l_0_6_44) l_0_6_49)) ?x4715) ?x4717) ?x4719)))
 (= ?x4720 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x3933 (* ?x3745 l_0_6_75)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x3931 (* ?x3742 l_0_6_74)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x3928 (* ?x3739 l_0_6_54)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x3926 (* ?x3736 l_0_6_53)))
 (let ((?x4813 (* l_0_6_36 l_0_6_36)))
 (let ((?x4811 (* l_0_6_35 l_0_6_35)))
 (let ((?x4809 (* l_0_6_34 l_0_6_34)))
 (let ((?x4807 (* l_0_6_33 l_0_6_33)))
 (let ((?x4805 (* l_0_6_32 l_0_6_32)))
 (let ((?x4803 (* l_0_6_15 l_0_6_15)))
 (let ((?x4801 (* l_0_6_14 l_0_6_14)))
 (let ((?x4799 (* l_0_6_13 l_0_6_13)))
 (let ((?x4802 (- (- (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x4799) ?x4801)))
 (let ((?x4815 (+ (+ (+ (+ (+ (+ (- ?x4802 ?x4803) ?x4805) ?x4807) ?x4809) ?x4811) ?x4813) ?x3926)))
 (= (- (- (+ ?x4815 ?x3928) ?x3931) ?x3933) 0.0))))))))))))))))))))
(assert
 (let ((?x3745 (* 2.0 l_0_6_66)))
 (let ((?x4025 (* ?x3745 l_0_6_80)))
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4886 (* ?x4481 l_0_6_75)))
 (let ((?x3742 (* 2.0 l_0_6_65)))
 (let ((?x4023 (* ?x3742 l_0_6_79)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4883 (* ?x4478 l_0_6_74)))
 (let ((?x3739 (* 2.0 l_0_6_45)))
 (let ((?x4018 (* ?x3739 l_0_6_59)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4880 (* ?x4475 l_0_6_54)))
 (let ((?x3736 (* 2.0 l_0_6_44)))
 (let ((?x4016 (* ?x3736 l_0_6_58)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x3923 (* ?x3730 l_0_6_33)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x3921 (* ?x3727 l_0_6_32)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4397 (* ?x4281 l_0_6_138)))
 (let ((?x4279 (* 2.0 l_0_6_128)))
 (let ((?x4395 (* ?x4279 l_0_6_137)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x3913 (* ?x3912 l_0_6_3)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x3910 (* ?x3909 l_0_6_2)))
 (let ((?x4848 (- (+ (* (* (- 2.0) l_0_6_11) l_0_6_16) ?x3910) (* (* 2.0 l_0_6_12) l_0_6_17))))
 (let ((?x4853 (- (- (- (+ ?x4848 ?x3913) ?x4395) ?x4397) (* (* 2.0 l_0_6_13) l_0_6_18))))
 (let ((?x4859 (- (- ?x4853 (* (* 2.0 l_0_6_14) l_0_6_19)) (* (* 2.0 l_0_6_15) l_0_6_20))))
 (let ((?x4867 (+ (+ (- (- ?x4859 ?x3921) ?x3923) (* (* 2.0 l_0_6_32) l_0_6_37)) (* (* 2.0 l_0_6_33) l_0_6_38))))
 (let ((?x4873 (+ (+ ?x4867 (* (* 2.0 l_0_6_34) l_0_6_39)) (* (* 2.0 l_0_6_35) l_0_6_40))))
 (let ((?x4878 (- (+ ?x4873 (* (* 2.0 l_0_6_36) l_0_6_41)) (* (* 6.0 l_0_6_44) l_0_6_53))))
 (let ((?x4888 (- (+ (- (+ (+ (- (+ ?x4878 ?x4016) ?x4880) ?x4018) ?x4883) ?x4023) ?x4886) ?x4025)))
 (= ?x4888 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x5003 (* ?x4481 l_0_6_80)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x5001 (* ?x4478 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x4021 (* ?x4020 l_0_6_65)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4998 (* ?x4475 l_0_6_59)))
 (let ((?x4472 (* 6.0 l_0_6_44)))
 (let ((?x4996 (* ?x4472 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x4014 (* ?x4013 l_0_6_44)))
 (let ((?x4993 (* l_0_6_42 l_0_6_42)))
 (let ((?x4991 (* l_0_6_41 l_0_6_41)))
 (let ((?x4989 (* l_0_6_40 l_0_6_40)))
 (let ((?x4987 (* l_0_6_39 l_0_6_39)))
 (let ((?x4985 (* l_0_6_38 l_0_6_38)))
 (let ((?x4983 (* l_0_6_37 l_0_6_37)))
 (let ((?x3730 (* 12.0 l_0_6_24)))
 (let ((?x4011 (* ?x3730 l_0_6_38)))
 (let ((?x3727 (* 12.0 l_0_6_23)))
 (let ((?x4009 (* ?x3727 l_0_6_37)))
 (let ((?x4979 (* l_0_6_21 l_0_6_21)))
 (let ((?x4977 (* l_0_6_20 l_0_6_20)))
 (let ((?x4975 (* l_0_6_19 l_0_6_19)))
 (let ((?x4973 (* l_0_6_18 l_0_6_18)))
 (let ((?x4971 (* l_0_6_17 l_0_6_17)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x4004 (* ?x4003 l_0_6_3)))
 (let ((?x4968 (* l_0_6_16 l_0_6_16)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x4001 (* ?x4000 l_0_6_2)))
 (let ((?x4281 (* 2.0 l_0_6_129)))
 (let ((?x4453 (* ?x4281 l_0_6_143)))
 (let ((?x4970 (+ (- (+ (- (* (* (- 2.0) l_0_6_128) l_0_6_142) ?x4453) ?x4001) ?x4968) ?x4004)))
 (let ((?x4982 (- (- (- (- (- (- (- ?x4970 ?x4971) ?x4973) ?x4975) ?x4977) ?x4979) ?x4009) ?x4011)))
 (let ((?x4995 (- (+ (+ (+ (+ (+ (+ ?x4982 ?x4983) ?x4985) ?x4987) ?x4989) ?x4991) ?x4993) ?x4014)))
 (= (+ (+ (+ (- (- ?x4995 ?x4996) ?x4998) ?x4021) ?x5001) ?x5003) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3570 (* l_0_6_64 l_0_6_64)))
 (let ((?x5077 (* 3.0 ?x3570)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x5075 (* ?x3605 l_0_6_79)))
 (let ((?x5073 (* (* 3.0 l_0_6_43) l_0_6_43)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x5070 (* ?x3602 l_0_6_58)))
 (let ((?x3564 (* (* 6.0 l_0_6_22) l_0_6_22)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5067 (* ?x3598 l_0_6_37)))
 (let ((?x5050 (* l_0_6_127 l_0_6_127)))
 (let ((?x3558 (* l_0_6_1 l_0_6_1)))
 (let ((?x3560 (* 6.0 ?x3558)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x5048 (* ?x3591 l_0_6_16)))
 (let ((?x5068 (- (- (- (+ ?x5048 ?x3560) ?x5050) (* (* 2.0 l_0_6_148) l_0_6_163)) ?x5067)))
 (= (+ (+ (- (- (- ?x5068 ?x3564) ?x5070) ?x5073) ?x5075) ?x5077) 0.0))))))))))))))))))
(assert
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x5165 (* ?x5164 l_0_6_81)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x5162 (* ?x5161 l_0_6_80)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x5159 (* ?x5158 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5156 (* ?x4020 l_0_6_67)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x5154 (* ?x5153 l_0_6_60)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x5151 (* ?x5150 l_0_6_59)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x5148 (* ?x5147 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5145 (* ?x4013 l_0_6_46)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x5143 (* ?x5142 l_0_6_39)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x5140 (* ?x5139 l_0_6_38)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x5137 (* ?x5136 l_0_6_37)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5134 (* ?x3598 l_0_6_25)))
 (let ((?x5131 (* 12.0 l_0_6_18)))
 (let ((?x5132 (* ?x5131 l_0_6_6)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x5129 (* ?x4003 l_0_6_5)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x5127 (* ?x4000 l_0_6_4)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5116 (* ?x3713 l_0_6_142)))
 (let ((?x5120 (- (+ (- (* (* 12.0 l_0_6_1) l_0_6_4) (* ?x3713 l_0_6_130)) ?x5116) (* (* 2.0 l_0_6_151) l_0_6_163))))
 (let ((?x5126 (- (- ?x5120 (* (* 2.0 l_0_6_152) l_0_6_164)) (* (* 2.0 l_0_6_153) l_0_6_165))))
 (let ((?x5144 (- (- (- (- (+ (+ (+ ?x5126 ?x5127) ?x5129) ?x5132) ?x5134) ?x5137) ?x5140) ?x5143)))
 (let ((?x5163 (+ (+ (+ (- (- (- (- ?x5144 ?x5145) ?x5148) ?x5151) ?x5154) ?x5156) ?x5159) ?x5162)))
 (= (+ ?x5163 ?x5165) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5321 (* 2.0 l_0_6_73)))
 (let ((?x5322 (* ?x5321 l_0_6_82)))
 (let ((?x5318 (* 2.0 l_0_6_72)))
 (let ((?x5319 (* ?x5318 l_0_6_81)))
 (let ((?x5315 (* 2.0 l_0_6_71)))
 (let ((?x5316 (* ?x5315 l_0_6_80)))
 (let ((?x5312 (* 2.0 l_0_6_70)))
 (let ((?x5313 (* ?x5312 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5310 (* ?x4020 l_0_6_70)))
 (let ((?x5307 (* 2.0 l_0_6_52)))
 (let ((?x5308 (* ?x5307 l_0_6_61)))
 (let ((?x5304 (* 2.0 l_0_6_51)))
 (let ((?x5305 (* ?x5304 l_0_6_60)))
 (let ((?x5301 (* 2.0 l_0_6_50)))
 (let ((?x5302 (* ?x5301 l_0_6_59)))
 (let ((?x5298 (* 2.0 l_0_6_49)))
 (let ((?x5299 (* ?x5298 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5296 (* ?x4013 l_0_6_49)))
 (let ((?x5293 (* 12.0 l_0_6_31)))
 (let ((?x5294 (* ?x5293 l_0_6_40)))
 (let ((?x5290 (* 12.0 l_0_6_30)))
 (let ((?x5291 (* ?x5290 l_0_6_39)))
 (let ((?x5287 (* 12.0 l_0_6_29)))
 (let ((?x5288 (* ?x5287 l_0_6_38)))
 (let ((?x5284 (* 12.0 l_0_6_28)))
 (let ((?x5285 (* ?x5284 l_0_6_37)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5282 (* ?x3598 l_0_6_28)))
 (let ((?x5131 (* 12.0 l_0_6_18)))
 (let ((?x5280 (* ?x5131 l_0_6_9)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x5278 (* ?x4003 l_0_6_8)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x5276 (* ?x4000 l_0_6_7)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5262 (* ?x3713 l_0_6_133)))
 (let ((?x3801 (* 2.0 l_0_6_106)))
 (let ((?x5260 (* ?x3801 l_0_6_121)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x5258 (* ?x4683 l_0_6_85)))
 (let ((?x5255 (* 12.0 l_0_6_10)))
 (let ((?x5256 (* ?x5255 l_0_6_19)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x5254 (* ?x3591 l_0_6_7)))
 (let ((?x5266 (- (- (+ (- (+ ?x5254 ?x5256) ?x5258) ?x5260) ?x5262) (* (* 2.0 l_0_6_154) l_0_6_163))))
 (let ((?x5272 (- (- ?x5266 (* (* 2.0 l_0_6_155) l_0_6_164)) (* (* 2.0 l_0_6_156) l_0_6_165))))
 (let ((?x5281 (+ (+ (+ (- ?x5272 (* (* 2.0 l_0_6_157) l_0_6_166)) ?x5276) ?x5278) ?x5280)))
 (let ((?x5300 (- (- (- (- (- (- (- ?x5281 ?x5282) ?x5285) ?x5288) ?x5291) ?x5294) ?x5296) ?x5299)))
 (let ((?x5320 (+ (+ (+ (+ (- (- (- ?x5300 ?x5302) ?x5305) ?x5308) ?x5310) ?x5313) ?x5316) ?x5319)))
 (= (+ ?x5320 ?x5322) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5520 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x5517 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x5514 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x5511 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x5508 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x5075 (* ?x3605 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5504 (* ?x4020 l_0_6_74)))
 (let ((?x5502 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x5499 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x5496 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x5493 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x5490 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x5070 (* ?x3602 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5486 (* ?x4013 l_0_6_53)))
 (let ((?x5484 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x5481 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x5478 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x5475 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x5472 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5469 (* ?x3598 l_0_6_32)))
 (let ((?x5452 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x5449 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x5446 (* ?x5445 l_0_6_18)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5443 (* ?x3713 l_0_6_137)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x5441 (* ?x3912 l_0_6_17)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x5439 (* ?x3909 l_0_6_16)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x5438 (* ?x3591 l_0_6_11)))
 (let ((?x5456 (- (+ (+ (+ (- (+ (+ ?x5438 ?x5439) ?x5441) ?x5443) ?x5446) ?x5449) ?x5452) (* (* 2.0 l_0_6_158) l_0_6_163))))
 (let ((?x5462 (- (- ?x5456 (* (* 2.0 l_0_6_159) l_0_6_164)) (* (* 2.0 l_0_6_160) l_0_6_165))))
 (let ((?x5468 (- (- ?x5462 (* (* 2.0 l_0_6_161) l_0_6_166)) (* (* 2.0 l_0_6_162) l_0_6_167))))
 (let ((?x5487 (- (- (- (- (- (- (- ?x5468 ?x5469) ?x5472) ?x5475) ?x5478) ?x5481) ?x5484) ?x5486)))
 (let ((?x5505 (+ (- (- (- (- (- (+ ?x5487 ?x5070) ?x5490) ?x5493) ?x5496) ?x5499) ?x5502) ?x5504)))
 (= (+ (+ (+ (+ (+ (- ?x5505 ?x5075) ?x5508) ?x5511) ?x5514) ?x5517) ?x5520) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3570 (* l_0_6_64 l_0_6_64)))
 (let ((?x5077 (* 3.0 ?x3570)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5718 (* ?x4020 l_0_6_79)))
 (let ((?x5073 (* (* 3.0 l_0_6_43) l_0_6_43)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5697 (* ?x4013 l_0_6_58)))
 (let ((?x5695 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x5692 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x5689 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x5686 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x5683 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x5680 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5067 (* ?x3598 l_0_6_37)))
 (let ((?x4979 (* l_0_6_21 l_0_6_21)))
 (let ((?x5676 (* 6.0 ?x4979)))
 (let ((?x4977 (* l_0_6_20 l_0_6_20)))
 (let ((?x5674 (* 6.0 ?x4977)))
 (let ((?x4975 (* l_0_6_19 l_0_6_19)))
 (let ((?x5672 (* 6.0 ?x4975)))
 (let ((?x4973 (* l_0_6_18 l_0_6_18)))
 (let ((?x5670 (* 6.0 ?x4973)))
 (let ((?x4971 (* l_0_6_17 l_0_6_17)))
 (let ((?x5668 (* 6.0 ?x4971)))
 (let ((?x5666 (* l_0_6_168 l_0_6_168)))
 (let ((?x5664 (* l_0_6_167 l_0_6_167)))
 (let ((?x5662 (* l_0_6_166 l_0_6_166)))
 (let ((?x5660 (* l_0_6_165 l_0_6_165)))
 (let ((?x5658 (* l_0_6_164 l_0_6_164)))
 (let ((?x5656 (* l_0_6_163 l_0_6_163)))
 (let ((?x4968 (* l_0_6_16 l_0_6_16)))
 (let ((?x5654 (* 6.0 ?x4968)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5116 (* ?x3713 l_0_6_142)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x5048 (* ?x3591 l_0_6_16)))
 (let ((?x5665 (- (- (- (- (- (+ (- ?x5048 ?x5116) ?x5654) ?x5656) ?x5658) ?x5660) ?x5662) ?x5664)))
 (let ((?x5678 (- (+ (+ (+ (+ (+ (- ?x5665 ?x5666) ?x5668) ?x5670) ?x5672) ?x5674) ?x5676) ?x5067)))
 (let ((?x5698 (- (- (- (- (- (- (- ?x5678 ?x5680) ?x5683) ?x5686) ?x5689) ?x5692) ?x5695) ?x5697)))
 (let ((?x5705 (- (- (- ?x5698 ?x5073) (* (* 1.0 l_0_6_58) l_0_6_58)) (* (* 1.0 l_0_6_59) l_0_6_59))))
 (let ((?x5711 (- (- ?x5705 (* (* 1.0 l_0_6_60) l_0_6_60)) (* (* 1.0 l_0_6_61) l_0_6_61))))
 (let ((?x5717 (- (- ?x5711 (* (* 1.0 l_0_6_62) l_0_6_62)) (* (* 1.0 l_0_6_63) l_0_6_63))))
 (let ((?x5726 (+ (+ (+ (+ ?x5717 ?x5718) ?x5077) (* 1.0 (* l_0_6_79 l_0_6_79))) (* 1.0 (* l_0_6_80 l_0_6_80)))))
 (let ((?x5732 (+ (+ ?x5726 (* 1.0 (* l_0_6_81 l_0_6_81))) (* 1.0 (* l_0_6_82 l_0_6_82)))))
 (let ((?x5738 (+ (+ ?x5732 (* 1.0 (* l_0_6_83 l_0_6_83))) (* 1.0 (* l_0_6_84 l_0_6_84)))))
 (= ?x5738 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5874 (* l_0_6_69 l_0_6_69)))
 (let ((?x5875 (* 3.0 ?x5874)))
 (let ((?x5871 (* l_0_6_68 l_0_6_68)))
 (let ((?x5872 (* 3.0 ?x5871)))
 (let ((?x5868 (* l_0_6_67 l_0_6_67)))
 (let ((?x5869 (* 3.0 ?x5868)))
 (let ((?x4294 (* l_0_6_6 l_0_6_6)))
 (let ((?x5866 (* 6.0 ?x4294)))
 (let ((?x4292 (* l_0_6_5 l_0_6_5)))
 (let ((?x5864 (* 6.0 ?x4292)))
 (let ((?x5862 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x5859 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x4290 (* l_0_6_4 l_0_6_4)))
 (let ((?x5853 (* 6.0 ?x4290)))
 (let ((?x5851 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x5848 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x5845 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x5842 (* l_0_6_132 l_0_6_132)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x5840 (* ?x5839 l_0_6_144)))
 (let ((?x5837 (* l_0_6_131 l_0_6_131)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x5835 (* ?x5834 l_0_6_143)))
 (let ((?x5836 (+ (- (* (* 2.0 l_0_6_130) l_0_6_142) (* l_0_6_130 l_0_6_130)) ?x5835)))
 (let ((?x5854 (+ (- (- (- (- (+ (- ?x5836 ?x5837) ?x5840) ?x5842) ?x5845) ?x5848) ?x5851) ?x5853)))
 (let ((?x5865 (+ (- (- (- ?x5854 (* (* 3.0 l_0_6_46) l_0_6_46)) ?x5859) ?x5862) ?x5864)))
 (= (+ (+ (+ (+ ?x5865 ?x5866) ?x5869) ?x5872) ?x5875) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6005 (* ?x6004 l_0_6_72)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6002 (* ?x6001 l_0_6_71)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x5999 (* ?x5998 l_0_6_70)))
 (let ((?x5996 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x5993 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x5990 (* ?x5989 l_0_6_51)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x5987 (* ?x5986 l_0_6_50)))
 (let ((?x5981 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x5978 (* ?x5142 l_0_6_30)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x5976 (* ?x5139 l_0_6_29)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x5974 (* ?x5136 l_0_6_28)))
 (let ((?x5971 (* 2.0 l_0_6_136)))
 (let ((?x5972 (* ?x5971 l_0_6_145)))
 (let ((?x5968 (* 2.0 l_0_6_135)))
 (let ((?x5969 (* ?x5968 l_0_6_144)))
 (let ((?x5965 (* 2.0 l_0_6_134)))
 (let ((?x5966 (* ?x5965 l_0_6_143)))
 (let ((?x5962 (* 2.0 l_0_6_133)))
 (let ((?x5963 (* ?x5962 l_0_6_142)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x5960 (* ?x5839 l_0_6_135)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x5958 (* ?x5834 l_0_6_134)))
 (let ((?x5830 (* 2.0 l_0_6_130)))
 (let ((?x5956 (* ?x5830 l_0_6_133)))
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x5954 (* ?x5953 l_0_6_123)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x5951 (* ?x5950 l_0_6_122)))
 (let ((?x5947 (* 2.0 l_0_6_109)))
 (let ((?x5948 (* ?x5947 l_0_6_121)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x5945 (* ?x5944 l_0_6_90)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x5942 (* ?x4686 l_0_6_89)))
 (let ((?x5952 (+ (+ (- (- (* (* (- 2.0) l_0_6_100) l_0_6_88) ?x5942) ?x5945) ?x5948) ?x5951)))
 (let ((?x5970 (+ (+ (+ (- (- (- (+ ?x5952 ?x5954) ?x5956) ?x5958) ?x5960) ?x5963) ?x5966) ?x5969)))
 (let ((?x5985 (- (+ (- (- (- (+ ?x5970 ?x5972) ?x5974) ?x5976) ?x5978) ?x5981) (* (* 6.0 l_0_6_46) l_0_6_49))))
 (let ((?x6006 (+ (+ (+ (+ (+ (- (- ?x5985 ?x5987) ?x5990) ?x5993) ?x5996) ?x5999) ?x6002) ?x6005)))
 (= ?x6006 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x5165 (* ?x5164 l_0_6_81)))
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6157 (* ?x6004 l_0_6_76)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x5162 (* ?x5161 l_0_6_80)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6154 (* ?x6001 l_0_6_75)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x5159 (* ?x5158 l_0_6_79)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x6151 (* ?x5998 l_0_6_74)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x5154 (* ?x5153 l_0_6_60)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x6148 (* ?x5989 l_0_6_55)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x5151 (* ?x5150 l_0_6_59)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x6145 (* ?x5986 l_0_6_54)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x5148 (* ?x5147 l_0_6_58)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x6140 (* ?x5142 l_0_6_34)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x6138 (* ?x5139 l_0_6_33)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x6136 (* ?x5136 l_0_6_32)))
 (let ((?x6134 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6131 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x6128 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6125 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6122 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x6119 (* ?x5839 l_0_6_139)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x6117 (* ?x5834 l_0_6_138)))
 (let ((?x5830 (* 2.0 l_0_6_130)))
 (let ((?x6099 (* ?x5830 l_0_6_137)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x6096 (* ?x5445 l_0_6_6)))
 (let ((?x6094 (+ (* (* 12.0 l_0_6_11) l_0_6_4) (* (* 12.0 l_0_6_12) l_0_6_5))))
 (let ((?x6129 (+ (+ (+ (- (- (- (+ ?x6094 ?x6096) ?x6099) ?x6117) ?x6119) ?x6122) ?x6125) ?x6128)))
 (let ((?x6143 (- (- (- (- (+ (+ ?x6129 ?x6131) ?x6134) ?x6136) ?x6138) ?x6140) (* (* 6.0 l_0_6_46) l_0_6_53))))
 (let ((?x6153 (- (+ (+ (- (+ (- (+ ?x6143 ?x5148) ?x6145) ?x5151) ?x6148) ?x5154) ?x6151) ?x5159)))
 (= (- (+ (- (+ ?x6153 ?x6154) ?x5162) ?x6157) ?x5165) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6285 (* ?x6004 l_0_6_81)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6283 (* ?x6001 l_0_6_80)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x6281 (* ?x5998 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5156 (* ?x4020 l_0_6_67)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x6278 (* ?x5989 l_0_6_60)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x6276 (* ?x5986 l_0_6_59)))
 (let ((?x5983 (* 6.0 l_0_6_46)))
 (let ((?x6274 (* ?x5983 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5145 (* ?x4013 l_0_6_46)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x5143 (* ?x5142 l_0_6_39)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x5140 (* ?x5139 l_0_6_38)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x5137 (* ?x5136 l_0_6_37)))
 (let ((?x5131 (* 12.0 l_0_6_18)))
 (let ((?x5132 (* ?x5131 l_0_6_6)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x5129 (* ?x4003 l_0_6_5)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x5127 (* ?x4000 l_0_6_4)))
 (let ((?x6265 (* l_0_6_147 l_0_6_147)))
 (let ((?x6263 (* l_0_6_146 l_0_6_146)))
 (let ((?x6261 (* l_0_6_145 l_0_6_145)))
 (let ((?x6259 (* l_0_6_144 l_0_6_144)))
 (let ((?x6257 (* l_0_6_143 l_0_6_143)))
 (let ((?x6255 (* l_0_6_142 l_0_6_142)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x5840 (* ?x5839 l_0_6_144)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x5835 (* ?x5834 l_0_6_143)))
 (let ((?x6258 (+ (+ (- (- (* (* (- 2.0) l_0_6_130) l_0_6_142) ?x5835) ?x5840) ?x6255) ?x6257)))
 (let ((?x6269 (+ (+ (+ (+ (+ (+ (+ ?x6258 ?x6259) ?x6261) ?x6263) ?x6265) ?x5127) ?x5129) ?x5132)))
 (let ((?x6279 (- (- (- (- (- (- (- ?x6269 ?x5137) ?x5140) ?x5143) ?x5145) ?x6274) ?x6276) ?x6278)))
 (= (+ (+ (+ (+ ?x6279 ?x5156) ?x6281) ?x6283) ?x6285) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4562 (* l_0_6_9 l_0_6_9)))
 (let ((?x6393 (* 6.0 ?x4562)))
 (let ((?x4556 (* l_0_6_8 l_0_6_8)))
 (let ((?x6391 (* 6.0 ?x4556)))
 (let ((?x6388 (* l_0_6_73 l_0_6_73)))
 (let ((?x6389 (* 3.0 ?x6388)))
 (let ((?x6385 (* l_0_6_72 l_0_6_72)))
 (let ((?x6386 (* 3.0 ?x6385)))
 (let ((?x6382 (* l_0_6_71 l_0_6_71)))
 (let ((?x6383 (* 3.0 ?x6382)))
 (let ((?x6379 (* l_0_6_70 l_0_6_70)))
 (let ((?x6380 (* 3.0 ?x6379)))
 (let ((?x4554 (* l_0_6_7 l_0_6_7)))
 (let ((?x6377 (* 6.0 ?x4554)))
 (let ((?x6375 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x6372 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x6369 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x6363 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x6360 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x6357 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x6354 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x6351 (* l_0_6_136 l_0_6_136)))
 (let ((?x6349 (* l_0_6_135 l_0_6_135)))
 (let ((?x6347 (* l_0_6_134 l_0_6_134)))
 (let ((?x6345 (* l_0_6_133 l_0_6_133)))
 (let ((?x6342 (* 2.0 l_0_6_115)))
 (let ((?x6343 (* ?x6342 l_0_6_124)))
 (let ((?x6339 (* 2.0 l_0_6_114)))
 (let ((?x6340 (* ?x6339 l_0_6_123)))
 (let ((?x6336 (* 2.0 l_0_6_113)))
 (let ((?x6337 (* ?x6336 l_0_6_122)))
 (let ((?x6333 (* 2.0 l_0_6_112)))
 (let ((?x6334 (* ?x6333 l_0_6_121)))
 (let ((?x6330 (* 2.0 l_0_6_103)))
 (let ((?x6331 (* ?x6330 l_0_6_94)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x6328 (* ?x5944 l_0_6_93)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x6326 (* ?x4686 l_0_6_92)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x6324 (* ?x4683 l_0_6_91)))
 (let ((?x4566 (* l_0_6_10 l_0_6_10)))
 (let ((?x6323 (* 6.0 ?x4566)))
 (let ((?x6341 (+ (+ (+ (- (- (- (- ?x6323 ?x6324) ?x6326) ?x6328) ?x6331) ?x6334) ?x6337) ?x6340)))
 (let ((?x6358 (- (- (- (- (- (- (+ ?x6341 ?x6343) ?x6345) ?x6347) ?x6349) ?x6351) ?x6354) ?x6357)))
 (let ((?x6370 (- (- (- (- ?x6358 ?x6360) ?x6363) (* (* 3.0 l_0_6_49) l_0_6_49)) ?x6369)))
 (let ((?x6390 (+ (+ (+ (+ (+ (- (- ?x6370 ?x6372) ?x6375) ?x6377) ?x6380) ?x6383) ?x6386) ?x6389)))
 (= (+ (+ ?x6390 ?x6391) ?x6393) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5321 (* 2.0 l_0_6_73)))
 (let ((?x5322 (* ?x5321 l_0_6_82)))
 (let ((?x6576 (* 6.0 l_0_6_73)))
 (let ((?x6577 (* ?x6576 l_0_6_77)))
 (let ((?x5318 (* 2.0 l_0_6_72)))
 (let ((?x5319 (* ?x5318 l_0_6_81)))
 (let ((?x6572 (* 6.0 l_0_6_72)))
 (let ((?x6573 (* ?x6572 l_0_6_76)))
 (let ((?x5315 (* 2.0 l_0_6_71)))
 (let ((?x5316 (* ?x5315 l_0_6_80)))
 (let ((?x6568 (* 6.0 l_0_6_71)))
 (let ((?x6569 (* ?x6568 l_0_6_75)))
 (let ((?x5312 (* 2.0 l_0_6_70)))
 (let ((?x5313 (* ?x5312 l_0_6_79)))
 (let ((?x6564 (* 6.0 l_0_6_70)))
 (let ((?x6565 (* ?x6564 l_0_6_74)))
 (let ((?x5307 (* 2.0 l_0_6_52)))
 (let ((?x5308 (* ?x5307 l_0_6_61)))
 (let ((?x6560 (* 6.0 l_0_6_52)))
 (let ((?x6561 (* ?x6560 l_0_6_56)))
 (let ((?x5304 (* 2.0 l_0_6_51)))
 (let ((?x5305 (* ?x5304 l_0_6_60)))
 (let ((?x6556 (* 6.0 l_0_6_51)))
 (let ((?x6557 (* ?x6556 l_0_6_55)))
 (let ((?x5301 (* 2.0 l_0_6_50)))
 (let ((?x5302 (* ?x5301 l_0_6_59)))
 (let ((?x6552 (* 6.0 l_0_6_50)))
 (let ((?x6553 (* ?x6552 l_0_6_54)))
 (let ((?x5298 (* 2.0 l_0_6_49)))
 (let ((?x5299 (* ?x5298 l_0_6_58)))
 (let ((?x5293 (* 12.0 l_0_6_31)))
 (let ((?x6546 (* ?x5293 l_0_6_35)))
 (let ((?x5290 (* 12.0 l_0_6_30)))
 (let ((?x6544 (* ?x5290 l_0_6_34)))
 (let ((?x5287 (* 12.0 l_0_6_29)))
 (let ((?x6542 (* ?x5287 l_0_6_33)))
 (let ((?x5284 (* 12.0 l_0_6_28)))
 (let ((?x6540 (* ?x5284 l_0_6_32)))
 (let ((?x5971 (* 2.0 l_0_6_136)))
 (let ((?x6538 (* ?x5971 l_0_6_140)))
 (let ((?x5968 (* 2.0 l_0_6_135)))
 (let ((?x6536 (* ?x5968 l_0_6_139)))
 (let ((?x5965 (* 2.0 l_0_6_134)))
 (let ((?x6534 (* ?x5965 l_0_6_138)))
 (let ((?x5962 (* 2.0 l_0_6_133)))
 (let ((?x6532 (* ?x5962 l_0_6_137)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x6530 (* ?x5445 l_0_6_9)))
 (let ((?x6528 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x6525 (* ?x3912 l_0_6_8)))
 (let ((?x6523 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x6520 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x6517 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x6514 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x6511 (* ?x3909 l_0_6_7)))
 (let ((?x6509 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x6330 (* 2.0 l_0_6_103)))
 (let ((?x6506 (* ?x6330 l_0_6_98)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x6504 (* ?x5944 l_0_6_97)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x6502 (* ?x4686 l_0_6_96)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x6500 (* ?x4683 l_0_6_95)))
 (let ((?x5255 (* 12.0 l_0_6_10)))
 (let ((?x6485 (* ?x5255 l_0_6_14)))
 (let ((?x6515 (+ (+ (- (- (- (- (- ?x6485 ?x6500) ?x6502) ?x6504) ?x6506) ?x6509) ?x6511) ?x6514)))
 (let ((?x6533 (- (+ (+ (+ (+ (+ (+ ?x6515 ?x6517) ?x6520) ?x6523) ?x6525) ?x6528) ?x6530) ?x6532)))
 (let ((?x6547 (- (- (- (- (- (- (- ?x6533 ?x6534) ?x6536) ?x6538) ?x6540) ?x6542) ?x6544) ?x6546)))
 (let ((?x6555 (+ (- (+ (- ?x6547 (* (* 6.0 l_0_6_49) l_0_6_53)) ?x5299) ?x6553) ?x5302)))
 (let ((?x6570 (+ (- (+ (+ (- (+ (- ?x6555 ?x6557) ?x5305) ?x6561) ?x5308) ?x6565) ?x5313) ?x6569)))
 (= (- (+ (- (+ (- ?x6570 ?x5316) ?x6573) ?x5319) ?x6577) ?x5322) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6576 (* 6.0 l_0_6_73)))
 (let ((?x6777 (* ?x6576 l_0_6_82)))
 (let ((?x6572 (* 6.0 l_0_6_72)))
 (let ((?x6775 (* ?x6572 l_0_6_81)))
 (let ((?x6568 (* 6.0 l_0_6_71)))
 (let ((?x6773 (* ?x6568 l_0_6_80)))
 (let ((?x6564 (* 6.0 l_0_6_70)))
 (let ((?x6771 (* ?x6564 l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5310 (* ?x4020 l_0_6_70)))
 (let ((?x6560 (* 6.0 l_0_6_52)))
 (let ((?x6768 (* ?x6560 l_0_6_61)))
 (let ((?x6556 (* 6.0 l_0_6_51)))
 (let ((?x6766 (* ?x6556 l_0_6_60)))
 (let ((?x6552 (* 6.0 l_0_6_50)))
 (let ((?x6764 (* ?x6552 l_0_6_59)))
 (let ((?x6548 (* 6.0 l_0_6_49)))
 (let ((?x6762 (* ?x6548 l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5296 (* ?x4013 l_0_6_49)))
 (let ((?x5293 (* 12.0 l_0_6_31)))
 (let ((?x5294 (* ?x5293 l_0_6_40)))
 (let ((?x5290 (* 12.0 l_0_6_30)))
 (let ((?x5291 (* ?x5290 l_0_6_39)))
 (let ((?x5287 (* 12.0 l_0_6_29)))
 (let ((?x5288 (* ?x5287 l_0_6_38)))
 (let ((?x5284 (* 12.0 l_0_6_28)))
 (let ((?x5285 (* ?x5284 l_0_6_37)))
 (let ((?x5131 (* 12.0 l_0_6_18)))
 (let ((?x5280 (* ?x5131 l_0_6_9)))
 (let ((?x4003 (* 12.0 l_0_6_17)))
 (let ((?x5278 (* ?x4003 l_0_6_8)))
 (let ((?x4000 (* 12.0 l_0_6_16)))
 (let ((?x5276 (* ?x4000 l_0_6_7)))
 (let ((?x5971 (* 2.0 l_0_6_136)))
 (let ((?x5972 (* ?x5971 l_0_6_145)))
 (let ((?x5968 (* 2.0 l_0_6_135)))
 (let ((?x5969 (* ?x5968 l_0_6_144)))
 (let ((?x5965 (* 2.0 l_0_6_134)))
 (let ((?x5966 (* ?x5965 l_0_6_143)))
 (let ((?x5962 (* 2.0 l_0_6_133)))
 (let ((?x5963 (* ?x5962 l_0_6_142)))
 (let ((?x6748 (* l_0_6_126 l_0_6_126)))
 (let ((?x6746 (* l_0_6_125 l_0_6_125)))
 (let ((?x6744 (* l_0_6_124 l_0_6_124)))
 (let ((?x6742 (* l_0_6_123 l_0_6_123)))
 (let ((?x6740 (* l_0_6_122 l_0_6_122)))
 (let ((?x6738 (* l_0_6_121 l_0_6_121)))
 (let ((?x6736 (* l_0_6_105 l_0_6_105)))
 (let ((?x6734 (* l_0_6_104 l_0_6_104)))
 (let ((?x6732 (* l_0_6_103 l_0_6_103)))
 (let ((?x6730 (* l_0_6_102 l_0_6_102)))
 (let ((?x6728 (* l_0_6_101 l_0_6_101)))
 (let ((?x6729 (- (- (* (* 12.0 l_0_6_10) l_0_6_19) (* l_0_6_100 l_0_6_100)) ?x6728)))
 (let ((?x6743 (+ (+ (+ (- (- (- (- ?x6729 ?x6730) ?x6732) ?x6734) ?x6736) ?x6738) ?x6740) ?x6742)))
 (let ((?x6753 (- (- (- (- (+ (+ (+ ?x6743 ?x6744) ?x6746) ?x6748) ?x5963) ?x5966) ?x5969) ?x5972)))
 (let ((?x6760 (- (- (- (- (+ (+ (+ ?x6753 ?x5276) ?x5278) ?x5280) ?x5285) ?x5288) ?x5291) ?x5294)))
 (let ((?x6772 (+ (+ (- (- (- (- (- ?x6760 ?x5296) ?x6762) ?x6764) ?x6766) ?x6768) ?x5310) ?x6771)))
 (= (+ (+ (+ ?x6772 ?x6773) ?x6775) ?x6777) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x6918 (* l_0_6_78 l_0_6_78)))
 (let ((?x6919 (* 3.0 ?x6918)))
 (let ((?x5520 (* (* 2.0 l_0_6_78) l_0_6_83)))
 (let ((?x6914 (* l_0_6_77 l_0_6_77)))
 (let ((?x6915 (* 3.0 ?x6914)))
 (let ((?x5517 (* (* 2.0 l_0_6_77) l_0_6_82)))
 (let ((?x6910 (* l_0_6_76 l_0_6_76)))
 (let ((?x6911 (* 3.0 ?x6910)))
 (let ((?x5514 (* (* 2.0 l_0_6_76) l_0_6_81)))
 (let ((?x6906 (* l_0_6_75 l_0_6_75)))
 (let ((?x6907 (* 3.0 ?x6906)))
 (let ((?x5511 (* (* 2.0 l_0_6_75) l_0_6_80)))
 (let ((?x6902 (* l_0_6_74 l_0_6_74)))
 (let ((?x6903 (* 3.0 ?x6902)))
 (let ((?x5508 (* (* 2.0 l_0_6_74) l_0_6_79)))
 (let ((?x6899 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x5502 (* (* 2.0 l_0_6_57) l_0_6_62)))
 (let ((?x6895 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x5499 (* (* 2.0 l_0_6_56) l_0_6_61)))
 (let ((?x6891 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x5496 (* (* 2.0 l_0_6_55) l_0_6_60)))
 (let ((?x6887 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x5493 (* (* 2.0 l_0_6_54) l_0_6_59)))
 (let ((?x5490 (* (* 2.0 l_0_6_53) l_0_6_58)))
 (let ((?x6879 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6876 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6873 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6870 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6867 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x4803 (* l_0_6_15 l_0_6_15)))
 (let ((?x6864 (* 6.0 ?x4803)))
 (let ((?x6862 (* l_0_6_141 l_0_6_141)))
 (let ((?x6860 (* l_0_6_140 l_0_6_140)))
 (let ((?x4801 (* l_0_6_14 l_0_6_14)))
 (let ((?x6858 (* 6.0 ?x4801)))
 (let ((?x6856 (* l_0_6_139 l_0_6_139)))
 (let ((?x6854 (* l_0_6_138 l_0_6_138)))
 (let ((?x6852 (* l_0_6_137 l_0_6_137)))
 (let ((?x4799 (* l_0_6_13 l_0_6_13)))
 (let ((?x6850 (* 6.0 ?x4799)))
 (let ((?x4797 (* l_0_6_12 l_0_6_12)))
 (let ((?x6848 (* 6.0 ?x4797)))
 (let ((?x4821 (* l_0_6_11 l_0_6_11)))
 (let ((?x6847 (* 6.0 ?x4821)))
 (let ((?x6851 (+ (+ ?x6847 ?x6848) ?x6850)))
 (let ((?x6865 (+ (- (- (+ (- (- (- ?x6851 ?x6852) ?x6854) ?x6856) ?x6858) ?x6860) ?x6862) ?x6864)))
 (let ((?x6884 (- (+ (- (- (- (- (- ?x6865 ?x6867) ?x6870) ?x6873) ?x6876) ?x6879) ?x5490) (* (* 3.0 l_0_6_53) l_0_6_53))))
 (let ((?x6897 (+ (- (+ (- (+ (- (+ ?x6884 ?x5493) ?x6887) ?x5496) ?x6891) ?x5499) ?x6895) ?x5502)))
 (let ((?x6912 (+ (- (+ (- (+ (- (- ?x6897 ?x6899) ?x5508) ?x6903) ?x5511) ?x6907) ?x5514) ?x6911)))
 (= (+ (- (+ (- ?x6912 ?x5517) ?x6915) ?x5520) ?x6919) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5736 (* l_0_6_84 l_0_6_84)))
 (let ((?x5733 (* l_0_6_83 l_0_6_83)))
 (let ((?x5730 (* l_0_6_82 l_0_6_82)))
 (let ((?x5727 (* l_0_6_81 l_0_6_81)))
 (let ((?x5724 (* l_0_6_80 l_0_6_80)))
 (let ((?x5721 (* l_0_6_79 l_0_6_79)))
 (let ((?x7076 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x7073 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x7070 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x7067 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x7064 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5504 (* ?x4020 l_0_6_74)))
 (let ((?x5823 (* l_0_6_63 l_0_6_63)))
 (let ((?x5819 (* l_0_6_62 l_0_6_62)))
 (let ((?x5815 (* l_0_6_61 l_0_6_61)))
 (let ((?x5811 (* l_0_6_60 l_0_6_60)))
 (let ((?x5807 (* l_0_6_59 l_0_6_59)))
 (let ((?x5803 (* l_0_6_58 l_0_6_58)))
 (let ((?x7054 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x7051 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x7048 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x7045 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x7042 (* (* 6.0 l_0_6_53) l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5486 (* ?x4013 l_0_6_53)))
 (let ((?x5484 (* (* 12.0 l_0_6_36) l_0_6_41)))
 (let ((?x5481 (* (* 12.0 l_0_6_35) l_0_6_40)))
 (let ((?x5478 (* (* 12.0 l_0_6_34) l_0_6_39)))
 (let ((?x5475 (* (* 12.0 l_0_6_33) l_0_6_38)))
 (let ((?x5472 (* (* 12.0 l_0_6_32) l_0_6_37)))
 (let ((?x5452 (* (* 12.0 l_0_6_15) l_0_6_20)))
 (let ((?x6134 (* (* 2.0 l_0_6_141) l_0_6_146)))
 (let ((?x6131 (* (* 2.0 l_0_6_140) l_0_6_145)))
 (let ((?x5449 (* (* 12.0 l_0_6_14) l_0_6_19)))
 (let ((?x6128 (* (* 2.0 l_0_6_139) l_0_6_144)))
 (let ((?x6125 (* (* 2.0 l_0_6_138) l_0_6_143)))
 (let ((?x6122 (* (* 2.0 l_0_6_137) l_0_6_142)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x5446 (* ?x5445 l_0_6_18)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x5441 (* ?x3912 l_0_6_17)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x5439 (* ?x3909 l_0_6_16)))
 (let ((?x7032 (- (+ (- (- (- (+ (+ ?x5439 ?x5441) ?x5446) ?x6122) ?x6125) ?x6128) ?x5449) ?x6131)))
 (let ((?x7039 (- (- (- (- (- (+ (- ?x7032 ?x6134) ?x5452) ?x5472) ?x5475) ?x5478) ?x5481) ?x5484)))
 (let ((?x7056 (+ (- (- (- (- (- (- ?x7039 ?x5486) ?x7042) ?x7045) ?x7048) ?x7051) ?x7054) ?x5803)))
 (let ((?x7065 (+ (+ (+ (+ (+ (+ (+ ?x7056 ?x5807) ?x5811) ?x5815) ?x5819) ?x5823) ?x5504) ?x7064)))
 (let ((?x7080 (- (- (- (+ (+ (+ (+ ?x7065 ?x7067) ?x7070) ?x7073) ?x7076) ?x5721) ?x5724) ?x5727)))
 (= (- (- (- ?x7080 ?x5730) ?x5733) ?x5736) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x7222 (* l_0_6_85 l_0_6_85)))
 (let ((?x5736 (* l_0_6_84 l_0_6_84)))
 (let ((?x7220 (* 3.0 ?x5736)))
 (let ((?x5733 (* l_0_6_83 l_0_6_83)))
 (let ((?x7218 (* 3.0 ?x5733)))
 (let ((?x5730 (* l_0_6_82 l_0_6_82)))
 (let ((?x7216 (* 3.0 ?x5730)))
 (let ((?x5727 (* l_0_6_81 l_0_6_81)))
 (let ((?x7214 (* 3.0 ?x5727)))
 (let ((?x5724 (* l_0_6_80 l_0_6_80)))
 (let ((?x7212 (* 3.0 ?x5724)))
 (let ((?x5721 (* l_0_6_79 l_0_6_79)))
 (let ((?x7210 (* 3.0 ?x5721)))
 (let ((?x4020 (* 6.0 l_0_6_64)))
 (let ((?x5718 (* ?x4020 l_0_6_79)))
 (let ((?x7207 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x7204 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x7201 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x7198 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x7195 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x7192 (* (* 3.0 l_0_6_58) l_0_6_58)))
 (let ((?x4013 (* 6.0 l_0_6_43)))
 (let ((?x5697 (* ?x4013 l_0_6_58)))
 (let ((?x5695 (* (* 6.0 l_0_6_42) l_0_6_42)))
 (let ((?x5692 (* (* 6.0 l_0_6_41) l_0_6_41)))
 (let ((?x5689 (* (* 6.0 l_0_6_40) l_0_6_40)))
 (let ((?x5686 (* (* 6.0 l_0_6_39) l_0_6_39)))
 (let ((?x5683 (* (* 6.0 l_0_6_38) l_0_6_38)))
 (let ((?x5680 (* (* 6.0 l_0_6_37) l_0_6_37)))
 (let ((?x4979 (* l_0_6_21 l_0_6_21)))
 (let ((?x5676 (* 6.0 ?x4979)))
 (let ((?x4977 (* l_0_6_20 l_0_6_20)))
 (let ((?x5674 (* 6.0 ?x4977)))
 (let ((?x4975 (* l_0_6_19 l_0_6_19)))
 (let ((?x5672 (* 6.0 ?x4975)))
 (let ((?x4973 (* l_0_6_18 l_0_6_18)))
 (let ((?x5670 (* 6.0 ?x4973)))
 (let ((?x4971 (* l_0_6_17 l_0_6_17)))
 (let ((?x5668 (* 6.0 ?x4971)))
 (let ((?x4968 (* l_0_6_16 l_0_6_16)))
 (let ((?x5654 (* 6.0 ?x4968)))
 (let ((?x6265 (* l_0_6_147 l_0_6_147)))
 (let ((?x6263 (* l_0_6_146 l_0_6_146)))
 (let ((?x6261 (* l_0_6_145 l_0_6_145)))
 (let ((?x6259 (* l_0_6_144 l_0_6_144)))
 (let ((?x6257 (* l_0_6_143 l_0_6_143)))
 (let ((?x7173 (- (- (* (- l_0_6_106) l_0_6_106) (* l_0_6_142 l_0_6_142)) ?x6257)))
 (let ((?x7180 (+ (+ (+ (- (- (- (- ?x7173 ?x6259) ?x6261) ?x6263) ?x6265) ?x5654) ?x5668) ?x5670)))
 (let ((?x7187 (- (- (- (- (+ (+ (+ ?x7180 ?x5672) ?x5674) ?x5676) ?x5680) ?x5683) ?x5686) ?x5689)))
 (let ((?x7202 (- (- (- (- (- (- (- ?x7187 ?x5692) ?x5695) ?x5697) ?x7192) ?x7195) ?x7198) ?x7201)))
 (let ((?x7217 (+ (+ (+ (+ (+ (- (- ?x7202 ?x7204) ?x7207) ?x5718) ?x7210) ?x7212) ?x7214) ?x7216)))
 (= (+ (+ (+ ?x7217 ?x7218) ?x7220) ?x7222) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7299 (* ?x3605 l_0_6_67)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7297 (* ?x3602 l_0_6_46)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5134 (* ?x3598 l_0_6_25)))
 (let ((?x7295 (- (+ (* (* 12.0 l_0_6_1) l_0_6_4) (* l_0_6_127 l_0_6_127)) (* (* 2.0 l_0_6_148) l_0_6_151))))
 (= (+ (- (- ?x7295 ?x5134) ?x7297) ?x7299) 0.0)))))))))
(assert
 (let ((?x7222 (* l_0_6_85 l_0_6_85)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7325 (* ?x3605 l_0_6_70)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7323 (* ?x3602 l_0_6_49)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5282 (* ?x3598 l_0_6_28)))
 (let ((?x7321 (- (+ (* (* 12.0 l_0_6_1) l_0_6_7) (* l_0_6_106 l_0_6_106)) (* (* 2.0 l_0_6_148) l_0_6_154))))
 (= (- (+ (- (- ?x7321 ?x5282) ?x7323) ?x7325) ?x7222) 0.0))))))))))
(assert
 (let ((?x3570 (* l_0_6_64 l_0_6_64)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7355 (* ?x3605 l_0_6_74)))
 (let ((?x3584 (* l_0_6_43 l_0_6_43)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7352 (* ?x3602 l_0_6_53)))
 (let ((?x3598 (* 12.0 l_0_6_22)))
 (let ((?x5469 (* ?x3598 l_0_6_32)))
 (let ((?x3591 (* 12.0 l_0_6_1)))
 (let ((?x5438 (* ?x3591 l_0_6_11)))
 (let ((?x7354 (+ (- (- (- ?x5438 (* (* 2.0 l_0_6_148) l_0_6_158)) ?x5469) ?x7352) ?x3584)))
 (= (- (+ ?x7354 ?x7355) ?x3570) 0.0)))))))))))))
(assert
 (let ((?x4294 (* l_0_6_6 l_0_6_6)))
 (let ((?x5866 (* 6.0 ?x4294)))
 (let ((?x4292 (* l_0_6_5 l_0_6_5)))
 (let ((?x5864 (* 6.0 ?x4292)))
 (let ((?x4290 (* l_0_6_4 l_0_6_4)))
 (let ((?x5853 (* 6.0 ?x4290)))
 (let ((?x5851 (* (* 6.0 l_0_6_27) l_0_6_27)))
 (let ((?x5848 (* (* 6.0 l_0_6_26) l_0_6_26)))
 (let ((?x5845 (* (* 6.0 l_0_6_25) l_0_6_25)))
 (let ((?x7385 (* l_0_6_153 l_0_6_153)))
 (let ((?x7383 (* l_0_6_152 l_0_6_152)))
 (let ((?x7384 (- (- (* (* 2.0 l_0_6_127) l_0_6_130) (* l_0_6_151 l_0_6_151)) ?x7383)))
 (let ((?x7393 (- (+ (- (- (- (- ?x7384 ?x7385) ?x5845) ?x5848) ?x5851) ?x5853) (* (* 1.0 l_0_6_46) l_0_6_46))))
 (let ((?x7399 (- (- ?x7393 (* (* 1.0 l_0_6_47) l_0_6_47)) (* (* 1.0 l_0_6_48) l_0_6_48))))
 (let ((?x7405 (+ (+ (+ (+ ?x7399 ?x5864) ?x5866) (* 1.0 (* l_0_6_67 l_0_6_67))) (* 1.0 (* l_0_6_68 l_0_6_68)))))
 (= (+ ?x7405 (* 1.0 (* l_0_6_69 l_0_6_69))) 0.0)))))))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7464 (* ?x3835 l_0_6_88)))
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x7462 (* ?x5164 l_0_6_72)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x7460 (* ?x5161 l_0_6_71)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x7458 (* ?x5158 l_0_6_70)))
 (let ((?x5996 (* (* 12.0 l_0_6_6) l_0_6_9)))
 (let ((?x5993 (* (* 12.0 l_0_6_5) l_0_6_8)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x7454 (* ?x5153 l_0_6_51)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x7452 (* ?x5150 l_0_6_50)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x7450 (* ?x5147 l_0_6_49)))
 (let ((?x5981 (* (* 12.0 l_0_6_4) l_0_6_7)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x5978 (* ?x5142 l_0_6_30)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x5976 (* ?x5139 l_0_6_29)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x5974 (* ?x5136 l_0_6_28)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5262 (* ?x3713 l_0_6_133)))
 (let ((?x7441 (- (+ (* (* 2.0 l_0_6_106) l_0_6_109) ?x5262) (* (* 2.0 l_0_6_151) l_0_6_154))))
 (let ((?x7445 (- (- ?x7441 (* (* 2.0 l_0_6_152) l_0_6_155)) (* (* 2.0 l_0_6_153) l_0_6_156))))
 (let ((?x7455 (- (- (- (+ (- (- (- ?x7445 ?x5974) ?x5976) ?x5978) ?x5981) ?x7450) ?x7452) ?x7454)))
 (= (- (+ (+ (+ (+ (+ ?x7455 ?x5993) ?x5996) ?x7458) ?x7460) ?x7462) ?x7464) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x7551 (* ?x5164 l_0_6_76)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x7549 (* ?x5161 l_0_6_75)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x7547 (* ?x5158 l_0_6_74)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7299 (* ?x3605 l_0_6_67)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x7544 (* ?x5153 l_0_6_55)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x7542 (* ?x5150 l_0_6_54)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x7540 (* ?x5147 l_0_6_53)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7297 (* ?x3602 l_0_6_46)))
 (let ((?x5142 (* 12.0 l_0_6_27)))
 (let ((?x6140 (* ?x5142 l_0_6_34)))
 (let ((?x5139 (* 12.0 l_0_6_26)))
 (let ((?x6138 (* ?x5139 l_0_6_33)))
 (let ((?x5136 (* 12.0 l_0_6_25)))
 (let ((?x6136 (* ?x5136 l_0_6_32)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x6096 (* ?x5445 l_0_6_6)))
 (let ((?x3713 (* 2.0 l_0_6_127)))
 (let ((?x5443 (* ?x3713 l_0_6_137)))
 (let ((?x6094 (+ (* (* 12.0 l_0_6_11) l_0_6_4) (* (* 12.0 l_0_6_12) l_0_6_5))))
 (let ((?x7533 (- (- (+ (+ ?x6094 ?x5443) ?x6096) (* (* 2.0 l_0_6_151) l_0_6_158)) (* (* 2.0 l_0_6_152) l_0_6_159))))
 (let ((?x7538 (- (- (- (- ?x7533 (* (* 2.0 l_0_6_153) l_0_6_160)) ?x6136) ?x6138) ?x6140)))
 (let ((?x7550 (+ (+ (- (- (- (- (+ ?x7538 ?x7297) ?x7540) ?x7542) ?x7544) ?x7299) ?x7547) ?x7549)))
 (= (+ ?x7550 ?x7551) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x4562 (* l_0_6_9 l_0_6_9)))
 (let ((?x6393 (* 6.0 ?x4562)))
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7641 (* ?x3835 l_0_6_91)))
 (let ((?x4556 (* l_0_6_8 l_0_6_8)))
 (let ((?x6391 (* 6.0 ?x4556)))
 (let ((?x4554 (* l_0_6_7 l_0_6_7)))
 (let ((?x6377 (* 6.0 ?x4554)))
 (let ((?x6363 (* (* 6.0 l_0_6_31) l_0_6_31)))
 (let ((?x6360 (* (* 6.0 l_0_6_30) l_0_6_30)))
 (let ((?x6357 (* (* 6.0 l_0_6_29) l_0_6_29)))
 (let ((?x6354 (* (* 6.0 l_0_6_28) l_0_6_28)))
 (let ((?x7613 (* l_0_6_157 l_0_6_157)))
 (let ((?x7611 (* l_0_6_156 l_0_6_156)))
 (let ((?x7609 (* l_0_6_155 l_0_6_155)))
 (let ((?x7607 (* l_0_6_154 l_0_6_154)))
 (let ((?x4566 (* l_0_6_10 l_0_6_10)))
 (let ((?x6323 (* 6.0 ?x4566)))
 (let ((?x7612 (- (- (- (+ ?x6323 (* (* 2.0 l_0_6_106) l_0_6_112)) ?x7607) ?x7609) ?x7611)))
 (let ((?x7621 (- (- (- (- (- (- ?x7612 ?x7613) ?x6354) ?x6357) ?x6360) ?x6363) (* (* 1.0 l_0_6_49) l_0_6_49))))
 (let ((?x7627 (- (- ?x7621 (* (* 1.0 l_0_6_50) l_0_6_50)) (* (* 1.0 l_0_6_51) l_0_6_51))))
 (let ((?x7633 (+ (+ (- ?x7627 (* (* 1.0 l_0_6_52) l_0_6_52)) ?x6377) (* 1.0 (* l_0_6_70 l_0_6_70)))))
 (let ((?x7637 (+ (+ ?x7633 (* 1.0 (* l_0_6_71 l_0_6_71))) (* 1.0 (* l_0_6_72 l_0_6_72)))))
 (let ((?x7643 (+ (- (+ (+ ?x7637 (* 1.0 (* l_0_6_73 l_0_6_73))) ?x6391) ?x7641) ?x6393)))
 (= ?x7643 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7729 (* ?x3835 l_0_6_95)))
 (let ((?x5321 (* 2.0 l_0_6_73)))
 (let ((?x7727 (* ?x5321 l_0_6_77)))
 (let ((?x5318 (* 2.0 l_0_6_72)))
 (let ((?x7725 (* ?x5318 l_0_6_76)))
 (let ((?x5315 (* 2.0 l_0_6_71)))
 (let ((?x7723 (* ?x5315 l_0_6_75)))
 (let ((?x5312 (* 2.0 l_0_6_70)))
 (let ((?x7721 (* ?x5312 l_0_6_74)))
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7325 (* ?x3605 l_0_6_70)))
 (let ((?x5307 (* 2.0 l_0_6_52)))
 (let ((?x7718 (* ?x5307 l_0_6_56)))
 (let ((?x5304 (* 2.0 l_0_6_51)))
 (let ((?x7716 (* ?x5304 l_0_6_55)))
 (let ((?x5301 (* 2.0 l_0_6_50)))
 (let ((?x7714 (* ?x5301 l_0_6_54)))
 (let ((?x5298 (* 2.0 l_0_6_49)))
 (let ((?x7712 (* ?x5298 l_0_6_53)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7323 (* ?x3602 l_0_6_49)))
 (let ((?x5293 (* 12.0 l_0_6_31)))
 (let ((?x6546 (* ?x5293 l_0_6_35)))
 (let ((?x5290 (* 12.0 l_0_6_30)))
 (let ((?x6544 (* ?x5290 l_0_6_34)))
 (let ((?x5287 (* 12.0 l_0_6_29)))
 (let ((?x6542 (* ?x5287 l_0_6_33)))
 (let ((?x5284 (* 12.0 l_0_6_28)))
 (let ((?x6540 (* ?x5284 l_0_6_32)))
 (let ((?x5445 (* 12.0 l_0_6_13)))
 (let ((?x6530 (* ?x5445 l_0_6_9)))
 (let ((?x3912 (* 12.0 l_0_6_12)))
 (let ((?x6525 (* ?x3912 l_0_6_8)))
 (let ((?x3909 (* 12.0 l_0_6_11)))
 (let ((?x6511 (* ?x3909 l_0_6_7)))
 (let ((?x5255 (* 12.0 l_0_6_10)))
 (let ((?x6485 (* ?x5255 l_0_6_14)))
 (let ((?x7698 (+ (+ (+ (+ ?x6485 (* (* 2.0 l_0_6_106) l_0_6_116)) ?x6511) ?x6525) ?x6530)))
 (let ((?x7702 (- (- ?x7698 (* (* 2.0 l_0_6_154) l_0_6_158)) (* (* 2.0 l_0_6_155) l_0_6_159))))
 (let ((?x7706 (- (- ?x7702 (* (* 2.0 l_0_6_156) l_0_6_160)) (* (* 2.0 l_0_6_157) l_0_6_161))))
 (let ((?x7715 (- (- (+ (- (- (- (- ?x7706 ?x6540) ?x6542) ?x6544) ?x6546) ?x7323) ?x7712) ?x7714)))
 (let ((?x7728 (+ (+ (+ (+ (- (- (- ?x7715 ?x7716) ?x7718) ?x7325) ?x7721) ?x7723) ?x7725) ?x7727)))
 (= (- ?x7728 ?x7729) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3605 (* 2.0 l_0_6_64)))
 (let ((?x7355 (* ?x3605 l_0_6_74)))
 (let ((?x3602 (* 2.0 l_0_6_43)))
 (let ((?x7352 (* ?x3602 l_0_6_53)))
 (let ((?x6879 (* (* 6.0 l_0_6_36) l_0_6_36)))
 (let ((?x6876 (* (* 6.0 l_0_6_35) l_0_6_35)))
 (let ((?x6873 (* (* 6.0 l_0_6_34) l_0_6_34)))
 (let ((?x6870 (* (* 6.0 l_0_6_33) l_0_6_33)))
 (let ((?x6867 (* (* 6.0 l_0_6_32) l_0_6_32)))
 (let ((?x7814 (* l_0_6_162 l_0_6_162)))
 (let ((?x7812 (* l_0_6_161 l_0_6_161)))
 (let ((?x7810 (* l_0_6_160 l_0_6_160)))
 (let ((?x7808 (* l_0_6_159 l_0_6_159)))
 (let ((?x7806 (* l_0_6_158 l_0_6_158)))
 (let ((?x4803 (* l_0_6_15 l_0_6_15)))
 (let ((?x6864 (* 6.0 ?x4803)))
 (let ((?x4801 (* l_0_6_14 l_0_6_14)))
 (let ((?x6858 (* 6.0 ?x4801)))
 (let ((?x4799 (* l_0_6_13 l_0_6_13)))
 (let ((?x6850 (* 6.0 ?x4799)))
 (let ((?x4797 (* l_0_6_12 l_0_6_12)))
 (let ((?x6848 (* 6.0 ?x4797)))
 (let ((?x4821 (* l_0_6_11 l_0_6_11)))
 (let ((?x6847 (* 6.0 ?x4821)))
 (let ((?x6851 (+ (+ ?x6847 ?x6848) ?x6850)))
 (let ((?x7815 (- (- (- (- (- (+ (+ ?x6851 ?x6858) ?x6864) ?x7806) ?x7808) ?x7810) ?x7812) ?x7814)))
 (let ((?x7824 (- (+ (- (- (- (- (- ?x7815 ?x6867) ?x6870) ?x6873) ?x6876) ?x6879) ?x7352) (* (* 1.0 l_0_6_53) l_0_6_53))))
 (let ((?x7830 (- (- ?x7824 (* (* 1.0 l_0_6_54) l_0_6_54)) (* (* 1.0 l_0_6_55) l_0_6_55))))
 (let ((?x7836 (- (- ?x7830 (* (* 1.0 l_0_6_56) l_0_6_56)) (* (* 1.0 l_0_6_57) l_0_6_57))))
 (let ((?x7841 (+ (+ (- ?x7836 ?x7355) (* 1.0 (* l_0_6_74 l_0_6_74))) (* 1.0 (* l_0_6_75 l_0_6_75)))))
 (let ((?x7845 (+ (+ ?x7841 (* 1.0 (* l_0_6_76 l_0_6_76))) (* 1.0 (* l_0_6_77 l_0_6_77)))))
 (= (+ ?x7845 (* 1.0 (* l_0_6_78 l_0_6_78))) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x3671 (* l_0_6_66 l_0_6_66)))
 (let ((?x4242 (* 3.0 ?x3671)))
 (let ((?x3668 (* l_0_6_65 l_0_6_65)))
 (let ((?x4240 (* 3.0 ?x3668)))
 (let ((?x4238 (* (* 3.0 l_0_6_45) l_0_6_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_6_44) l_0_6_44) ?x4238) ?x4240) ?x4242) 0.0)))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4482 (* ?x4481 l_0_6_68)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4479 (* ?x4478 l_0_6_67)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4476 (* ?x4475 l_0_6_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_6_44) l_0_6_46) ?x4476) ?x4479) ?x4482) 0.0))))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4719 (* ?x4481 l_0_6_71)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4717 (* ?x4478 l_0_6_70)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4715 (* ?x4475 l_0_6_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_6_44) l_0_6_49) ?x4715) ?x4717) ?x4719) 0.0))))))))
(assert
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x4886 (* ?x4481 l_0_6_75)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x4883 (* ?x4478 l_0_6_74)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4880 (* ?x4475 l_0_6_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_6_44) l_0_6_53) ?x4880) ?x4883) ?x4886) 0.0))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x3836 (* ?x3835 l_0_6_86)))
 (let ((?x4481 (* 6.0 l_0_6_66)))
 (let ((?x5003 (* ?x4481 l_0_6_80)))
 (let ((?x4478 (* 6.0 l_0_6_65)))
 (let ((?x5001 (* ?x4478 l_0_6_79)))
 (let ((?x4475 (* 6.0 l_0_6_45)))
 (let ((?x4998 (* ?x4475 l_0_6_59)))
 (let ((?x4472 (* 6.0 l_0_6_44)))
 (let ((?x4996 (* ?x4472 l_0_6_58)))
 (let ((?x7945 (+ (+ (- (- (* (* (- 2.0) l_0_6_106) l_0_6_107) ?x4996) ?x4998) ?x5001) ?x5003)))
 (= (+ ?x7945 ?x3836) 0.0)))))))))))))
(assert
 (let ((?x5874 (* l_0_6_69 l_0_6_69)))
 (let ((?x5875 (* 3.0 ?x5874)))
 (let ((?x5871 (* l_0_6_68 l_0_6_68)))
 (let ((?x5872 (* 3.0 ?x5871)))
 (let ((?x5868 (* l_0_6_67 l_0_6_67)))
 (let ((?x5869 (* 3.0 ?x5868)))
 (let ((?x5862 (* (* 3.0 l_0_6_48) l_0_6_48)))
 (let ((?x5859 (* (* 3.0 l_0_6_47) l_0_6_47)))
 (let ((?x7961 (+ (+ (- (- (* (* (- 3.0) l_0_6_46) l_0_6_46) ?x5859) ?x5862) ?x5869) ?x5872)))
 (= (+ ?x7961 ?x5875) 0.0)))))))))))
(assert
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6005 (* ?x6004 l_0_6_72)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6002 (* ?x6001 l_0_6_71)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x5999 (* ?x5998 l_0_6_70)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x5990 (* ?x5989 l_0_6_51)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x5987 (* ?x5986 l_0_6_50)))
 (let ((?x7975 (+ (+ (- (- (* (* (- 6.0) l_0_6_46) l_0_6_49) ?x5987) ?x5990) ?x5999) ?x6002)))
 (= (+ ?x7975 ?x6005) 0.0)))))))))))))
(assert
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6157 (* ?x6004 l_0_6_76)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6154 (* ?x6001 l_0_6_75)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x6151 (* ?x5998 l_0_6_74)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x6148 (* ?x5989 l_0_6_55)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x6145 (* ?x5986 l_0_6_54)))
 (let ((?x7991 (+ (+ (- (- (* (* (- 6.0) l_0_6_46) l_0_6_53) ?x6145) ?x6148) ?x6151) ?x6154)))
 (= (+ ?x7991 ?x6157) 0.0)))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7464 (* ?x3835 l_0_6_88)))
 (let ((?x6004 (* 6.0 l_0_6_69)))
 (let ((?x6285 (* ?x6004 l_0_6_81)))
 (let ((?x6001 (* 6.0 l_0_6_68)))
 (let ((?x6283 (* ?x6001 l_0_6_80)))
 (let ((?x5998 (* 6.0 l_0_6_67)))
 (let ((?x6281 (* ?x5998 l_0_6_79)))
 (let ((?x5989 (* 6.0 l_0_6_48)))
 (let ((?x6278 (* ?x5989 l_0_6_60)))
 (let ((?x5986 (* 6.0 l_0_6_47)))
 (let ((?x6276 (* ?x5986 l_0_6_59)))
 (let ((?x5983 (* 6.0 l_0_6_46)))
 (let ((?x6274 (* ?x5983 l_0_6_58)))
 (let ((?x8007 (+ (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_109) ?x6274) ?x6276) ?x6278) ?x6281)))
 (= (+ (+ (+ ?x8007 ?x6283) ?x6285) ?x7464) 0.0)))))))))))))))))
(assert
 (let ((?x6388 (* l_0_6_73 l_0_6_73)))
 (let ((?x6389 (* 3.0 ?x6388)))
 (let ((?x6385 (* l_0_6_72 l_0_6_72)))
 (let ((?x6386 (* 3.0 ?x6385)))
 (let ((?x6382 (* l_0_6_71 l_0_6_71)))
 (let ((?x6383 (* 3.0 ?x6382)))
 (let ((?x6379 (* l_0_6_70 l_0_6_70)))
 (let ((?x6380 (* 3.0 ?x6379)))
 (let ((?x6375 (* (* 3.0 l_0_6_52) l_0_6_52)))
 (let ((?x6372 (* (* 3.0 l_0_6_51) l_0_6_51)))
 (let ((?x6369 (* (* 3.0 l_0_6_50) l_0_6_50)))
 (let ((?x8028 (+ (- (- (- (* (* (- 3.0) l_0_6_49) l_0_6_49) ?x6369) ?x6372) ?x6375) ?x6380)))
 (= (+ (+ (+ ?x8028 ?x6383) ?x6386) ?x6389) 0.0))))))))))))))
(assert
 (let ((?x6576 (* 6.0 l_0_6_73)))
 (let ((?x6577 (* ?x6576 l_0_6_77)))
 (let ((?x6572 (* 6.0 l_0_6_72)))
 (let ((?x6573 (* ?x6572 l_0_6_76)))
 (let ((?x6568 (* 6.0 l_0_6_71)))
 (let ((?x6569 (* ?x6568 l_0_6_75)))
 (let ((?x6564 (* 6.0 l_0_6_70)))
 (let ((?x6565 (* ?x6564 l_0_6_74)))
 (let ((?x6560 (* 6.0 l_0_6_52)))
 (let ((?x6561 (* ?x6560 l_0_6_56)))
 (let ((?x6556 (* 6.0 l_0_6_51)))
 (let ((?x6557 (* ?x6556 l_0_6_55)))
 (let ((?x6552 (* 6.0 l_0_6_50)))
 (let ((?x6553 (* ?x6552 l_0_6_54)))
 (let ((?x8046 (+ (- (- (- (* (* (- 6.0) l_0_6_49) l_0_6_53) ?x6553) ?x6557) ?x6561) ?x6565)))
 (= (+ (+ (+ ?x8046 ?x6569) ?x6573) ?x6577) 0.0)))))))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7641 (* ?x3835 l_0_6_91)))
 (let ((?x6576 (* 6.0 l_0_6_73)))
 (let ((?x6777 (* ?x6576 l_0_6_82)))
 (let ((?x6572 (* 6.0 l_0_6_72)))
 (let ((?x6775 (* ?x6572 l_0_6_81)))
 (let ((?x6568 (* 6.0 l_0_6_71)))
 (let ((?x6773 (* ?x6568 l_0_6_80)))
 (let ((?x6564 (* 6.0 l_0_6_70)))
 (let ((?x6771 (* ?x6564 l_0_6_79)))
 (let ((?x6560 (* 6.0 l_0_6_52)))
 (let ((?x6768 (* ?x6560 l_0_6_61)))
 (let ((?x6556 (* 6.0 l_0_6_51)))
 (let ((?x6766 (* ?x6556 l_0_6_60)))
 (let ((?x6552 (* 6.0 l_0_6_50)))
 (let ((?x6764 (* ?x6552 l_0_6_59)))
 (let ((?x6548 (* 6.0 l_0_6_49)))
 (let ((?x6762 (* ?x6548 l_0_6_58)))
 (let ((?x8067 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x6762) ?x6764) ?x6766) ?x6768)))
 (= (+ (+ (+ (+ (+ ?x8067 ?x6771) ?x6773) ?x6775) ?x6777) ?x7641) 0.0)))))))))))))))))))))
(assert
 (let ((?x6918 (* l_0_6_78 l_0_6_78)))
 (let ((?x6919 (* 3.0 ?x6918)))
 (let ((?x6914 (* l_0_6_77 l_0_6_77)))
 (let ((?x6915 (* 3.0 ?x6914)))
 (let ((?x6910 (* l_0_6_76 l_0_6_76)))
 (let ((?x6911 (* 3.0 ?x6910)))
 (let ((?x6906 (* l_0_6_75 l_0_6_75)))
 (let ((?x6907 (* 3.0 ?x6906)))
 (let ((?x6902 (* l_0_6_74 l_0_6_74)))
 (let ((?x6903 (* 3.0 ?x6902)))
 (let ((?x6899 (* (* 3.0 l_0_6_57) l_0_6_57)))
 (let ((?x6895 (* (* 3.0 l_0_6_56) l_0_6_56)))
 (let ((?x6891 (* (* 3.0 l_0_6_55) l_0_6_55)))
 (let ((?x6887 (* (* 3.0 l_0_6_54) l_0_6_54)))
 (let ((?x8093 (- (- (- (- (* (* (- 3.0) l_0_6_53) l_0_6_53) ?x6887) ?x6891) ?x6895) ?x6899)))
 (= (+ (+ (+ (+ (+ ?x8093 ?x6903) ?x6907) ?x6911) ?x6915) ?x6919) 0.0)))))))))))))))))
(assert
 (let ((?x3835 (* 2.0 l_0_6_85)))
 (let ((?x7729 (* ?x3835 l_0_6_95)))
 (let ((?x7076 (* (* 6.0 l_0_6_78) l_0_6_83)))
 (let ((?x7073 (* (* 6.0 l_0_6_77) l_0_6_82)))
 (let ((?x7070 (* (* 6.0 l_0_6_76) l_0_6_81)))
 (let ((?x7067 (* (* 6.0 l_0_6_75) l_0_6_80)))
 (let ((?x7064 (* (* 6.0 l_0_6_74) l_0_6_79)))
 (let ((?x7054 (* (* 6.0 l_0_6_57) l_0_6_62)))
 (let ((?x7051 (* (* 6.0 l_0_6_56) l_0_6_61)))
 (let ((?x7048 (* (* 6.0 l_0_6_55) l_0_6_60)))
 (let ((?x7045 (* (* 6.0 l_0_6_54) l_0_6_59)))
 (let ((?x7042 (* (* 6.0 l_0_6_53) l_0_6_58)))
 (let ((?x8114 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_116) ?x7042) ?x7045) ?x7048) ?x7051)))
 (let ((?x8121 (+ (+ (+ (+ (+ (+ (- ?x8114 ?x7054) ?x7064) ?x7067) ?x7070) ?x7073) ?x7076) ?x7729)))
 (= ?x8121 0.0))))))))))))))))
(assert
 (let ((?x5736 (* l_0_6_84 l_0_6_84)))
 (let ((?x7220 (* 3.0 ?x5736)))
 (let ((?x5733 (* l_0_6_83 l_0_6_83)))
 (let ((?x7218 (* 3.0 ?x5733)))
 (let ((?x5730 (* l_0_6_82 l_0_6_82)))
 (let ((?x7216 (* 3.0 ?x5730)))
 (let ((?x5727 (* l_0_6_81 l_0_6_81)))
 (let ((?x7214 (* 3.0 ?x5727)))
 (let ((?x5724 (* l_0_6_80 l_0_6_80)))
 (let ((?x7212 (* 3.0 ?x5724)))
 (let ((?x5721 (* l_0_6_79 l_0_6_79)))
 (let ((?x7210 (* 3.0 ?x5721)))
 (let ((?x7207 (* (* 3.0 l_0_6_63) l_0_6_63)))
 (let ((?x7204 (* (* 3.0 l_0_6_62) l_0_6_62)))
 (let ((?x7201 (* (* 3.0 l_0_6_61) l_0_6_61)))
 (let ((?x7198 (* (* 3.0 l_0_6_60) l_0_6_60)))
 (let ((?x7195 (* (* 3.0 l_0_6_59) l_0_6_59)))
 (let ((?x7192 (* (* 3.0 l_0_6_58) l_0_6_58)))
 (let ((?x3801 (* 2.0 l_0_6_106)))
 (let ((?x5260 (* ?x3801 l_0_6_121)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x5258 (* ?x4683 l_0_6_85)))
 (let ((?x8147 (- (- (- (- (- (- (- ?x5258 ?x5260) ?x7192) ?x7195) ?x7198) ?x7201) ?x7204) ?x7207)))
 (= (+ (+ (+ (+ (+ (+ ?x8147 ?x7210) ?x7212) ?x7214) ?x7216) ?x7218) ?x7220) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x5874 (* l_0_6_69 l_0_6_69)))
 (let ((?x5871 (* l_0_6_68 l_0_6_68)))
 (let ((?x5868 (* l_0_6_67 l_0_6_67)))
 (let ((?x5923 (* l_0_6_48 l_0_6_48)))
 (let ((?x5917 (* l_0_6_47 l_0_6_47)))
 (let ((?x5911 (* l_0_6_46 l_0_6_46)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x6119 (* ?x5839 l_0_6_139)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x6117 (* ?x5834 l_0_6_138)))
 (let ((?x5830 (* 2.0 l_0_6_130)))
 (let ((?x6099 (* ?x5830 l_0_6_137)))
 (let ((?x8179 (- (- (+ (+ (+ (+ (+ ?x6099 ?x6117) ?x6119) ?x5911) ?x5917) ?x5923) ?x5868) ?x5871)))
 (= (- ?x8179 ?x5874) 0.0)))))))))))))))
(assert
 (let ((?x8212 (* 2.0 l_0_6_90)))
 (let ((?x8213 (* ?x8212 l_0_6_97)))
 (let ((?x8209 (* 2.0 l_0_6_89)))
 (let ((?x8210 (* ?x8209 l_0_6_96)))
 (let ((?x8206 (* 2.0 l_0_6_88)))
 (let ((?x8207 (* ?x8206 l_0_6_95)))
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x7462 (* ?x5164 l_0_6_72)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x7460 (* ?x5161 l_0_6_71)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x7458 (* ?x5158 l_0_6_70)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x7454 (* ?x5153 l_0_6_51)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x7452 (* ?x5150 l_0_6_50)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x7450 (* ?x5147 l_0_6_49)))
 (let ((?x5971 (* 2.0 l_0_6_136)))
 (let ((?x6538 (* ?x5971 l_0_6_140)))
 (let ((?x5968 (* 2.0 l_0_6_135)))
 (let ((?x6536 (* ?x5968 l_0_6_139)))
 (let ((?x5965 (* 2.0 l_0_6_134)))
 (let ((?x6534 (* ?x5965 l_0_6_138)))
 (let ((?x5962 (* 2.0 l_0_6_133)))
 (let ((?x6532 (* ?x5962 l_0_6_137)))
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x8194 (* ?x5953 l_0_6_118)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x8192 (* ?x5950 l_0_6_117)))
 (let ((?x8197 (+ (+ (+ (+ (* (* 2.0 l_0_6_109) l_0_6_116) ?x8192) ?x8194) ?x6532) ?x6534)))
 (let ((?x8204 (- (- (+ (+ (+ (+ (+ ?x8197 ?x6536) ?x6538) ?x7450) ?x7452) ?x7454) ?x7458) ?x7460)))
 (= (- (- (- (- ?x8204 ?x7462) ?x8207) ?x8210) ?x8213) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5164 (* 2.0 l_0_6_69)))
 (let ((?x7551 (* ?x5164 l_0_6_76)))
 (let ((?x5161 (* 2.0 l_0_6_68)))
 (let ((?x7549 (* ?x5161 l_0_6_75)))
 (let ((?x5158 (* 2.0 l_0_6_67)))
 (let ((?x7547 (* ?x5158 l_0_6_74)))
 (let ((?x5153 (* 2.0 l_0_6_48)))
 (let ((?x7544 (* ?x5153 l_0_6_55)))
 (let ((?x5150 (* 2.0 l_0_6_47)))
 (let ((?x7542 (* ?x5150 l_0_6_54)))
 (let ((?x5147 (* 2.0 l_0_6_46)))
 (let ((?x7540 (* ?x5147 l_0_6_53)))
 (let ((?x6862 (* l_0_6_141 l_0_6_141)))
 (let ((?x6860 (* l_0_6_140 l_0_6_140)))
 (let ((?x6856 (* l_0_6_139 l_0_6_139)))
 (let ((?x8253 (+ (+ (+ (* l_0_6_137 l_0_6_137) (* l_0_6_138 l_0_6_138)) ?x6856) ?x6860)))
 (let ((?x8260 (- (- (- (+ (+ (+ (+ ?x8253 ?x6862) ?x7540) ?x7542) ?x7544) ?x7547) ?x7549) ?x7551)))
 (= ?x8260 0.0)))))))))))))))))))
(assert
 (let ((?x8301 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x8298 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x8295 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x8292 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x6388 (* l_0_6_73 l_0_6_73)))
 (let ((?x6385 (* l_0_6_72 l_0_6_72)))
 (let ((?x6382 (* l_0_6_71 l_0_6_71)))
 (let ((?x6379 (* l_0_6_70 l_0_6_70)))
 (let ((?x6479 (* l_0_6_52 l_0_6_52)))
 (let ((?x6473 (* l_0_6_51 l_0_6_51)))
 (let ((?x6467 (* l_0_6_50 l_0_6_50)))
 (let ((?x6461 (* l_0_6_49 l_0_6_49)))
 (let ((?x6342 (* 2.0 l_0_6_115)))
 (let ((?x8281 (* ?x6342 l_0_6_119)))
 (let ((?x6339 (* 2.0 l_0_6_114)))
 (let ((?x8279 (* ?x6339 l_0_6_118)))
 (let ((?x6336 (* 2.0 l_0_6_113)))
 (let ((?x8277 (* ?x6336 l_0_6_117)))
 (let ((?x8283 (+ (+ (+ (+ (* (* 2.0 l_0_6_112) l_0_6_116) ?x8277) ?x8279) ?x8281) ?x6461)))
 (let ((?x8290 (- (- (- (- (+ (+ (+ ?x8283 ?x6467) ?x6473) ?x6479) ?x6379) ?x6382) ?x6385) ?x6388)))
 (= (- (- (- (- ?x8290 ?x8292) ?x8295) ?x8298) ?x8301) 0.0))))))))))))))))))))))
(assert
 (let ((?x8376 (* l_0_6_99 l_0_6_99)))
 (let ((?x8374 (* l_0_6_98 l_0_6_98)))
 (let ((?x8372 (* l_0_6_97 l_0_6_97)))
 (let ((?x8370 (* l_0_6_96 l_0_6_96)))
 (let ((?x8368 (* l_0_6_95 l_0_6_95)))
 (let ((?x5321 (* 2.0 l_0_6_73)))
 (let ((?x7727 (* ?x5321 l_0_6_77)))
 (let ((?x5318 (* 2.0 l_0_6_72)))
 (let ((?x7725 (* ?x5318 l_0_6_76)))
 (let ((?x5315 (* 2.0 l_0_6_71)))
 (let ((?x7723 (* ?x5315 l_0_6_75)))
 (let ((?x5312 (* 2.0 l_0_6_70)))
 (let ((?x7721 (* ?x5312 l_0_6_74)))
 (let ((?x5307 (* 2.0 l_0_6_52)))
 (let ((?x7718 (* ?x5307 l_0_6_56)))
 (let ((?x5304 (* 2.0 l_0_6_51)))
 (let ((?x7716 (* ?x5304 l_0_6_55)))
 (let ((?x5301 (* 2.0 l_0_6_50)))
 (let ((?x7714 (* ?x5301 l_0_6_54)))
 (let ((?x5298 (* 2.0 l_0_6_49)))
 (let ((?x7712 (* ?x5298 l_0_6_53)))
 (let ((?x8358 (* l_0_6_120 l_0_6_120)))
 (let ((?x8356 (* l_0_6_119 l_0_6_119)))
 (let ((?x8354 (* l_0_6_118 l_0_6_118)))
 (let ((?x8357 (+ (+ (+ (* l_0_6_116 l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8354) ?x8356)))
 (let ((?x8365 (- (- (+ (+ (+ (+ (+ ?x8357 ?x8358) ?x7712) ?x7714) ?x7716) ?x7718) ?x7721) ?x7723)))
 (let ((?x8377 (- (- (- (- (- (- (- ?x8365 ?x7725) ?x7727) ?x8368) ?x8370) ?x8372) ?x8374) ?x8376)))
 (= ?x8377 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x6918 (* l_0_6_78 l_0_6_78)))
 (let ((?x6914 (* l_0_6_77 l_0_6_77)))
 (let ((?x6910 (* l_0_6_76 l_0_6_76)))
 (let ((?x6906 (* l_0_6_75 l_0_6_75)))
 (let ((?x6902 (* l_0_6_74 l_0_6_74)))
 (let ((?x6994 (* l_0_6_57 l_0_6_57)))
 (let ((?x6987 (* l_0_6_56 l_0_6_56)))
 (let ((?x6980 (* l_0_6_55 l_0_6_55)))
 (let ((?x8414 (+ (+ (+ (* l_0_6_53 l_0_6_53) (* l_0_6_54 l_0_6_54)) ?x6980) ?x6987)))
 (= (- (- (- (- (- (+ ?x8414 ?x6994) ?x6902) ?x6906) ?x6910) ?x6914) ?x6918) 0.0)))))))))))
(assert
 (let ((?x8452 (* l_0_6_90 l_0_6_90)))
 (let ((?x8450 (* l_0_6_89 l_0_6_89)))
 (let ((?x8448 (* l_0_6_88 l_0_6_88)))
 (let ((?x5839 (* 2.0 l_0_6_132)))
 (let ((?x5960 (* ?x5839 l_0_6_135)))
 (let ((?x5834 (* 2.0 l_0_6_131)))
 (let ((?x5958 (* ?x5834 l_0_6_134)))
 (let ((?x5830 (* 2.0 l_0_6_130)))
 (let ((?x5956 (* ?x5830 l_0_6_133)))
 (let ((?x8443 (* l_0_6_111 l_0_6_111)))
 (let ((?x8445 (+ (+ (+ (* l_0_6_109 l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x8443) ?x5956)))
 (= (- (- (- (+ (+ ?x8445 ?x5958) ?x5960) ?x8448) ?x8450) ?x8452) 0.0)))))))))))))
(assert
 (let ((?x8212 (* 2.0 l_0_6_90)))
 (let ((?x8479 (* ?x8212 l_0_6_93)))
 (let ((?x8209 (* 2.0 l_0_6_89)))
 (let ((?x8477 (* ?x8209 l_0_6_92)))
 (let ((?x8206 (* 2.0 l_0_6_88)))
 (let ((?x8475 (* ?x8206 l_0_6_91)))
 (let ((?x6351 (* l_0_6_136 l_0_6_136)))
 (let ((?x6349 (* l_0_6_135 l_0_6_135)))
 (let ((?x6347 (* l_0_6_134 l_0_6_134)))
 (let ((?x6345 (* l_0_6_133 l_0_6_133)))
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x8469 (* ?x5953 l_0_6_114)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x8467 (* ?x5950 l_0_6_113)))
 (let ((?x8472 (+ (+ (+ (+ (* (* 2.0 l_0_6_109) l_0_6_112) ?x8467) ?x8469) ?x6345) ?x6347)))
 (= (- (- (- (+ (+ ?x8472 ?x6349) ?x6351) ?x8475) ?x8477) ?x8479) 0.0)))))))))))))))))
(assert
 (let ((?x8521 (* l_0_6_94 l_0_6_94)))
 (let ((?x8519 (* l_0_6_93 l_0_6_93)))
 (let ((?x8517 (* l_0_6_92 l_0_6_92)))
 (let ((?x8515 (* l_0_6_91 l_0_6_91)))
 (let ((?x8513 (* l_0_6_115 l_0_6_115)))
 (let ((?x8511 (* l_0_6_114 l_0_6_114)))
 (let ((?x8514 (+ (+ (+ (* l_0_6_112 l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x8511) ?x8513)))
 (= (- (- (- (- ?x8514 ?x8515) ?x8517) ?x8519) ?x8521) 0.0)))))))))
(assert
 (let ((?x4156 (* l_0_6_87 l_0_6_87)))
 (let ((?x4154 (* l_0_6_86 l_0_6_86)))
 (let ((?x8541 (+ (- (* (- l_0_6_107) l_0_6_107) (* l_0_6_108 l_0_6_108)) ?x4154)))
 (= (+ ?x8541 ?x4156) 0.0)))))
(assert
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4343 (* ?x4342 l_0_6_89)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4340 (* ?x4339 l_0_6_88)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4315 (* ?x4314 l_0_6_110)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_107) l_0_6_109) ?x4315) ?x4340) ?x4343) 0.0))))))))
(assert
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4560 (* ?x4342 l_0_6_92)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4558 (* ?x4339 l_0_6_91)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4544 (* ?x4314 l_0_6_113)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_107) l_0_6_112) ?x4544) ?x4558) ?x4560) 0.0))))))))
(assert
 (let ((?x4342 (* 2.0 l_0_6_87)))
 (let ((?x4626 (* ?x4342 l_0_6_96)))
 (let ((?x4339 (* 2.0 l_0_6_86)))
 (let ((?x4624 (* ?x4339 l_0_6_95)))
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4599 (* ?x4314 l_0_6_117)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_107) l_0_6_116) ?x4599) ?x4624) ?x4626) 0.0))))))))
(assert
 (let ((?x4314 (* 2.0 l_0_6_108)))
 (let ((?x4691 (* ?x4314 l_0_6_122)))
 (let ((?x4312 (* 2.0 l_0_6_107)))
 (let ((?x4689 (* ?x4312 l_0_6_121)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x4687 (* ?x4686 l_0_6_87)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x4684 (* ?x4683 l_0_6_86)))
 (= (- (- (+ ?x4684 ?x4687) ?x4689) ?x4691) 0.0))))))))))
(assert
 (let ((?x8452 (* l_0_6_90 l_0_6_90)))
 (let ((?x8450 (* l_0_6_89 l_0_6_89)))
 (let ((?x8448 (* l_0_6_88 l_0_6_88)))
 (let ((?x8443 (* l_0_6_111 l_0_6_111)))
 (let ((?x8602 (- (- (* (- l_0_6_109) l_0_6_109) (* l_0_6_110 l_0_6_110)) ?x8443)))
 (= (+ (+ (+ ?x8602 ?x8448) ?x8450) ?x8452) 0.0)))))))
(assert
 (let ((?x8212 (* 2.0 l_0_6_90)))
 (let ((?x8479 (* ?x8212 l_0_6_93)))
 (let ((?x8209 (* 2.0 l_0_6_89)))
 (let ((?x8477 (* ?x8209 l_0_6_92)))
 (let ((?x8206 (* 2.0 l_0_6_88)))
 (let ((?x8475 (* ?x8206 l_0_6_91)))
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x8469 (* ?x5953 l_0_6_114)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x8467 (* ?x5950 l_0_6_113)))
 (let ((?x8621 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_112) ?x8467) ?x8469) ?x8475) ?x8477)))
 (= (+ ?x8621 ?x8479) 0.0)))))))))))))
(assert
 (let ((?x8212 (* 2.0 l_0_6_90)))
 (let ((?x8213 (* ?x8212 l_0_6_97)))
 (let ((?x8209 (* 2.0 l_0_6_89)))
 (let ((?x8210 (* ?x8209 l_0_6_96)))
 (let ((?x8206 (* 2.0 l_0_6_88)))
 (let ((?x8207 (* ?x8206 l_0_6_95)))
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x8194 (* ?x5953 l_0_6_118)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x8192 (* ?x5950 l_0_6_117)))
 (let ((?x8639 (+ (+ (- (- (* (* (- 2.0) l_0_6_109) l_0_6_116) ?x8192) ?x8194) ?x8207) ?x8210)))
 (= (+ ?x8639 ?x8213) 0.0)))))))))))))
(assert
 (let ((?x5953 (* 2.0 l_0_6_111)))
 (let ((?x5954 (* ?x5953 l_0_6_123)))
 (let ((?x5950 (* 2.0 l_0_6_110)))
 (let ((?x5951 (* ?x5950 l_0_6_122)))
 (let ((?x5947 (* 2.0 l_0_6_109)))
 (let ((?x5948 (* ?x5947 l_0_6_121)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x5945 (* ?x5944 l_0_6_90)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x5942 (* ?x4686 l_0_6_89)))
 (let ((?x8657 (- (- (+ (+ (* (* 2.0 l_0_6_100) l_0_6_88) ?x5942) ?x5945) ?x5948) ?x5951)))
 (= (- ?x8657 ?x5954) 0.0)))))))))))))
(assert
 (let ((?x8521 (* l_0_6_94 l_0_6_94)))
 (let ((?x8519 (* l_0_6_93 l_0_6_93)))
 (let ((?x8517 (* l_0_6_92 l_0_6_92)))
 (let ((?x8515 (* l_0_6_91 l_0_6_91)))
 (let ((?x8513 (* l_0_6_115 l_0_6_115)))
 (let ((?x8511 (* l_0_6_114 l_0_6_114)))
 (let ((?x8674 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x8511)))
 (= (+ (+ (+ (+ (- ?x8674 ?x8513) ?x8515) ?x8517) ?x8519) ?x8521) 0.0)))))))))
(assert
 (let ((?x8301 (* (* 2.0 l_0_6_94) l_0_6_98)))
 (let ((?x8298 (* (* 2.0 l_0_6_93) l_0_6_97)))
 (let ((?x8295 (* (* 2.0 l_0_6_92) l_0_6_96)))
 (let ((?x8292 (* (* 2.0 l_0_6_91) l_0_6_95)))
 (let ((?x6342 (* 2.0 l_0_6_115)))
 (let ((?x8281 (* ?x6342 l_0_6_119)))
 (let ((?x6339 (* 2.0 l_0_6_114)))
 (let ((?x8279 (* ?x6339 l_0_6_118)))
 (let ((?x6336 (* 2.0 l_0_6_113)))
 (let ((?x8277 (* ?x6336 l_0_6_117)))
 (let ((?x8696 (+ (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_116) ?x8277) ?x8279) ?x8281) ?x8292)))
 (= (+ (+ (+ ?x8696 ?x8295) ?x8298) ?x8301) 0.0)))))))))))))
(assert
 (let ((?x6342 (* 2.0 l_0_6_115)))
 (let ((?x6343 (* ?x6342 l_0_6_124)))
 (let ((?x6339 (* 2.0 l_0_6_114)))
 (let ((?x6340 (* ?x6339 l_0_6_123)))
 (let ((?x6336 (* 2.0 l_0_6_113)))
 (let ((?x6337 (* ?x6336 l_0_6_122)))
 (let ((?x6333 (* 2.0 l_0_6_112)))
 (let ((?x6334 (* ?x6333 l_0_6_121)))
 (let ((?x6330 (* 2.0 l_0_6_103)))
 (let ((?x6331 (* ?x6330 l_0_6_94)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x6328 (* ?x5944 l_0_6_93)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x6326 (* ?x4686 l_0_6_92)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x6324 (* ?x4683 l_0_6_91)))
 (let ((?x8718 (- (- (- (- (+ (+ (+ ?x6324 ?x6326) ?x6328) ?x6331) ?x6334) ?x6337) ?x6340) ?x6343)))
 (= ?x8718 0.0)))))))))))))))))))
(assert
 (let ((?x8376 (* l_0_6_99 l_0_6_99)))
 (let ((?x8374 (* l_0_6_98 l_0_6_98)))
 (let ((?x8372 (* l_0_6_97 l_0_6_97)))
 (let ((?x8370 (* l_0_6_96 l_0_6_96)))
 (let ((?x8368 (* l_0_6_95 l_0_6_95)))
 (let ((?x8358 (* l_0_6_120 l_0_6_120)))
 (let ((?x8356 (* l_0_6_119 l_0_6_119)))
 (let ((?x8354 (* l_0_6_118 l_0_6_118)))
 (let ((?x8737 (- (- (* (- l_0_6_116) l_0_6_116) (* l_0_6_117 l_0_6_117)) ?x8354)))
 (let ((?x8744 (+ (+ (+ (+ (+ (- (- ?x8737 ?x8356) ?x8358) ?x8368) ?x8370) ?x8372) ?x8374) ?x8376)))
 (= ?x8744 0.0))))))))))))
(assert
 (let ((?x6528 (* (* 2.0 l_0_6_120) l_0_6_125)))
 (let ((?x6523 (* (* 2.0 l_0_6_119) l_0_6_124)))
 (let ((?x6520 (* (* 2.0 l_0_6_118) l_0_6_123)))
 (let ((?x6517 (* (* 2.0 l_0_6_117) l_0_6_122)))
 (let ((?x6514 (* (* 2.0 l_0_6_116) l_0_6_121)))
 (let ((?x6509 (* (* 2.0 l_0_6_104) l_0_6_99)))
 (let ((?x6330 (* 2.0 l_0_6_103)))
 (let ((?x6506 (* ?x6330 l_0_6_98)))
 (let ((?x5944 (* 2.0 l_0_6_102)))
 (let ((?x6504 (* ?x5944 l_0_6_97)))
 (let ((?x4686 (* 2.0 l_0_6_101)))
 (let ((?x6502 (* ?x4686 l_0_6_96)))
 (let ((?x4683 (* 2.0 l_0_6_100)))
 (let ((?x6500 (* ?x4683 l_0_6_95)))
 (let ((?x8767 (- (- (- (+ (+ (+ (+ ?x6500 ?x6502) ?x6504) ?x6506) ?x6509) ?x6514) ?x6517) ?x6520)))
 (= (- (- ?x8767 ?x6523) ?x6528) 0.0)))))))))))))))))
(assert
 (let ((?x6748 (* l_0_6_126 l_0_6_126)))
 (let ((?x6746 (* l_0_6_125 l_0_6_125)))
 (let ((?x6744 (* l_0_6_124 l_0_6_124)))
 (let ((?x6742 (* l_0_6_123 l_0_6_123)))
 (let ((?x6740 (* l_0_6_122 l_0_6_122)))
 (let ((?x6738 (* l_0_6_121 l_0_6_121)))
 (let ((?x6736 (* l_0_6_105 l_0_6_105)))
 (let ((?x6734 (* l_0_6_104 l_0_6_104)))
 (let ((?x6732 (* l_0_6_103 l_0_6_103)))
 (let ((?x6730 (* l_0_6_102 l_0_6_102)))
 (let ((?x8795 (+ (+ (+ (* l_0_6_100 l_0_6_100) (* l_0_6_101 l_0_6_101)) ?x6730) ?x6732)))
 (let ((?x8802 (- (- (- (- (- (+ (+ ?x8795 ?x6734) ?x6736) ?x6738) ?x6740) ?x6742) ?x6744) ?x6746)))
 (= (- ?x8802 ?x6748) 0.0))))))))))))))
(assert
 (let ((?x5842 (* l_0_6_132 l_0_6_132)))
 (= (+ (+ (* l_0_6_130 l_0_6_130) (* l_0_6_131 l_0_6_131)) ?x5842) 0.0)))
(assert
 (>= l_0_6_1 0.0))
(assert
 (>= l_0_6_3 0.0))
(assert
 (>= l_0_6_6 0.0))
(assert
 (>= l_0_6_10 0.0))
(assert
 (>= l_0_6_15 0.0))
(assert
 (>= l_0_6_21 0.0))
(assert
 (>= l_0_6_22 0.0))
(assert
 (>= l_0_6_24 0.0))
(assert
 (>= l_0_6_27 0.0))
(assert
 (>= l_0_6_31 0.0))
(assert
 (>= l_0_6_36 0.0))
(assert
 (>= l_0_6_42 0.0))
(assert
 (>= l_0_6_43 0.0))
(assert
 (>= l_0_6_45 0.0))
(assert
 (>= l_0_6_48 0.0))
(assert
 (>= l_0_6_52 0.0))
(assert
 (>= l_0_6_57 0.0))
(assert
 (>= l_0_6_63 0.0))
(assert
 (>= l_0_6_64 0.0))
(assert
 (>= l_0_6_66 0.0))
(assert
 (>= l_0_6_69 0.0))
(assert
 (>= l_0_6_73 0.0))
(assert
 (>= l_0_6_78 0.0))
(assert
 (>= l_0_6_84 0.0))
(assert
 (>= l_0_6_85 0.0))
(assert
 (>= l_0_6_87 0.0))
(assert
 (>= l_0_6_90 0.0))
(assert
 (>= l_0_6_94 0.0))
(assert
 (>= l_0_6_99 0.0))
(assert
 (>= l_0_6_105 0.0))
(assert
 (>= l_0_6_106 0.0))
(assert
 (>= l_0_6_108 0.0))
(assert
 (>= l_0_6_111 0.0))
(assert
 (>= l_0_6_115 0.0))
(assert
 (>= l_0_6_120 0.0))
(assert
 (>= l_0_6_126 0.0))
(assert
 (>= l_0_6_127 0.0))
(assert
 (>= l_0_6_129 0.0))
(assert
 (>= l_0_6_132 0.0))
(assert
 (>= l_0_6_136 0.0))
(assert
 (>= l_0_6_141 0.0))
(assert
 (>= l_0_6_147 0.0))
(assert
 (>= l_0_6_148 0.0))
(assert
 (>= l_0_6_150 0.0))
(assert
 (>= l_0_6_153 0.0))
(assert
 (>= l_0_6_157 0.0))
(assert
 (>= l_0_6_162 0.0))
(assert
 (>= l_0_6_168 0.0))
(assert
 (let ((?x8884 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x8881 (* l_0_7_190 l_0_7_190)))
 (let ((?x8888 (- (- (- (+ _a_12_ (* 6.0 (* l_0_7_1 l_0_7_1))) ?x8881) ?x8884) (* (* 1.0 l_0_7_43) l_0_7_43))))
 (= (- (+ ?x8888 (* 1.0 (* l_0_7_64 l_0_7_64))) 12.0) 0.0)))))
(assert
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x8927 (* ?x8926 l_0_7_65)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x8924 (* ?x8923 l_0_7_44)))
 (let ((?x8897 (* l_0_7_22 l_0_7_22)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x8920 (* ?x8919 l_0_7_23)))
 (let ((?x8878 (* l_0_7_1 l_0_7_1)))
 (let ((?x8918 (- (- (+ _a_13_ (* (* 12.0 l_0_7_1) l_0_7_2)) ?x8878) (* (* 2.0 l_0_7_190) l_0_7_191))))
 (= (+ (- (+ (- ?x8918 ?x8920) ?x8897) ?x8924) ?x8927) 0.0)))))))))))
(assert
 (let ((?x8889 (* l_0_7_64 l_0_7_64)))
 (let ((?x8975 (* 3.0 ?x8889)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x8973 (* ?x8926 l_0_7_79)))
 (let ((?x8971 (* (* 3.0 l_0_7_43) l_0_7_43)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x8968 (* ?x8923 l_0_7_58)))
 (let ((?x8884 (* (* 6.0 l_0_7_22) l_0_7_22)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x8965 (* ?x8919 l_0_7_37)))
 (let ((?x8961 (* l_0_7_127 l_0_7_127)))
 (let ((?x8878 (* l_0_7_1 l_0_7_1)))
 (let ((?x8879 (* 6.0 ?x8878)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x8959 (* ?x8912 l_0_7_16)))
 (let ((?x8966 (- (- (+ (+ ?x8959 ?x8879) ?x8961) (* (* 2.0 l_0_7_190) l_0_7_205)) ?x8965)))
 (= (- (+ (+ (- (- (- ?x8966 ?x8884) ?x8968) ?x8971) ?x8973) ?x8975) 6.0) 0.0))))))))))))))))))
(assert
 (let ((?x9032 (* l_0_7_3 l_0_7_3)))
 (let ((?x9033 (* 6.0 ?x9032)))
 (let ((?x9030 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x9027 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x9020 (* l_0_7_2 l_0_7_2)))
 (let ((?x9021 (* 6.0 ?x9020)))
 (let ((?x9018 (* l_0_7_192 l_0_7_192)))
 (let ((?x9019 (- (- (* (* (- 2.0) l_0_7_1) l_0_7_2) (* l_0_7_191 l_0_7_191)) ?x9018)))
 (let ((?x9031 (- (- (+ (+ ?x9019 ?x9021) (* (* 2.0 l_0_7_22) l_0_7_23)) ?x9027) ?x9030)))
 (let ((?x9040 (- (- (+ ?x9031 ?x9033) (* (* 1.0 l_0_7_44) l_0_7_44)) (* (* 1.0 l_0_7_45) l_0_7_45))))
 (let ((?x9046 (+ (+ ?x9040 (* 1.0 (* l_0_7_65 l_0_7_65))) (* 1.0 (* l_0_7_66 l_0_7_66)))))
 (= ?x9046 0.0)))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9119 (* ?x9118 l_0_7_68)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9116 (* ?x9115 l_0_7_67)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9113 (* ?x9112 l_0_7_47)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9110 (* ?x9109 l_0_7_46)))
 (let ((?x9106 (* 12.0 l_0_7_3)))
 (let ((?x9107 (* ?x9106 l_0_7_5)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9104 (* ?x9103 l_0_7_26)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9101 (* ?x9100 l_0_7_25)))
 (let ((?x9095 (* 12.0 l_0_7_2)))
 (let ((?x9096 (* ?x9095 l_0_7_4)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x9087 (* ?x9086 l_0_7_128)))
 (let ((?x9091 (- (- (* (* (- 2.0) l_0_7_1) l_0_7_4) ?x9087) (* (* 2.0 l_0_7_191) l_0_7_193))))
 (let ((?x9099 (+ (+ (- ?x9091 (* (* 2.0 l_0_7_192) l_0_7_194)) ?x9096) (* (* 2.0 l_0_7_22) l_0_7_25))))
 (let ((?x9120 (+ (+ (- (- (+ (- (- ?x9099 ?x9101) ?x9104) ?x9107) ?x9110) ?x9113) ?x9116) ?x9119)))
 (= ?x9120 0.0)))))))))))))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x9217 (* ?x9216 l_0_7_86)))
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9214 (* ?x9118 l_0_7_71)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9212 (* ?x9115 l_0_7_70)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9210 (* ?x9112 l_0_7_50)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9208 (* ?x9109 l_0_7_49)))
 (let ((?x9106 (* 12.0 l_0_7_3)))
 (let ((?x9206 (* ?x9106 l_0_7_8)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9204 (* ?x9103 l_0_7_29)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9202 (* ?x9100 l_0_7_28)))
 (let ((?x9095 (* 12.0 l_0_7_2)))
 (let ((?x9198 (* ?x9095 l_0_7_7)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x9192 (* ?x9191 l_0_7_170)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x9189 (* ?x9188 l_0_7_149)))
 (let ((?x9187 (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) (* (* 2.0 l_0_7_106) l_0_7_107))))
 (let ((?x9197 (- (- (- (+ ?x9187 ?x9189) ?x9192) (* (* 2.0 l_0_7_191) l_0_7_196)) (* (* 2.0 l_0_7_192) l_0_7_197))))
 (let ((?x9205 (- (- (+ (+ ?x9197 ?x9198) (* (* 2.0 l_0_7_22) l_0_7_28)) ?x9202) ?x9204)))
 (= (- (+ (+ (- (- (+ ?x9205 ?x9206) ?x9208) ?x9210) ?x9212) ?x9214) ?x9217) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9323 (* ?x9118 l_0_7_75)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9321 (* ?x9115 l_0_7_74)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x8927 (* ?x8926 l_0_7_65)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9318 (* ?x9112 l_0_7_54)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9316 (* ?x9109 l_0_7_53)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x8924 (* ?x8923 l_0_7_44)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9313 (* ?x9103 l_0_7_33)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9311 (* ?x9100 l_0_7_32)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x9303 (* ?x9302 l_0_7_3)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x9300 (* ?x9299 l_0_7_2)))
 (let ((?x9306 (- (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_11) ?x9300) ?x9303) (* (* 2.0 l_0_7_191) l_0_7_200))))
 (let ((?x9310 (+ (- ?x9306 (* (* 2.0 l_0_7_192) l_0_7_201)) (* (* 2.0 l_0_7_22) l_0_7_32))))
 (let ((?x9322 (+ (- (- (- (+ (- (- ?x9310 ?x9311) ?x9313) ?x8924) ?x9316) ?x9318) ?x8927) ?x9321)))
 (= (+ ?x9322 ?x9323) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9415 (* ?x9118 l_0_7_80)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9413 (* ?x9115 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x9411 (* ?x9410 l_0_7_65)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9408 (* ?x9112 l_0_7_59)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9406 (* ?x9109 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x9404 (* ?x9403 l_0_7_44)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9401 (* ?x9103 l_0_7_38)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9399 (* ?x9100 l_0_7_37)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x8920 (* ?x8919 l_0_7_23)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x9390 (* ?x9389 l_0_7_3)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x9387 (* ?x9386 l_0_7_2)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x9087 (* ?x9086 l_0_7_128)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x8913 (* ?x8912 l_0_7_2)))
 (let ((?x9391 (+ (+ (+ (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x8913) ?x9087) ?x9387) ?x9390)))
 (let ((?x9395 (- (- ?x9391 (* (* 2.0 l_0_7_191) l_0_7_205)) (* (* 2.0 l_0_7_192) l_0_7_206))))
 (let ((?x9402 (- (- (+ (- ?x9395 ?x8920) (* (* 2.0 l_0_7_22) l_0_7_37)) ?x9399) ?x9401)))
 (= (+ (+ (+ (- (- (- ?x9402 ?x9404) ?x9406) ?x9408) ?x9411) ?x9413) ?x9415) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x9032 (* l_0_7_3 l_0_7_3)))
 (let ((?x9062 (* l_0_7_24 l_0_7_24)))
 (let ((?x9480 (- (+ (+ (* (- l_0_7_2) l_0_7_2) (* l_0_7_23 l_0_7_23)) ?x9062) ?x9032)))
 (= ?x9480 0.0)))))
(assert
 (let ((?x9498 (- (- (* (- l_0_7_128) l_0_7_128) (* l_0_7_129 l_0_7_129)) (* (* 2.0 l_0_7_2) l_0_7_4))))
 (let ((?x9504 (+ (+ ?x9498 (* (* 2.0 l_0_7_23) l_0_7_25)) (* (* 2.0 l_0_7_24) l_0_7_26))))
 (= (- ?x9504 (* (* 2.0 l_0_7_3) l_0_7_5)) 0.0))))
(assert
 (let ((?x9553 (* l_0_7_87 l_0_7_87)))
 (let ((?x9551 (* l_0_7_86 l_0_7_86)))
 (let ((?x9541 (* l_0_7_171 l_0_7_171)))
 (let ((?x9539 (* l_0_7_170 l_0_7_170)))
 (let ((?x9537 (* l_0_7_150 l_0_7_150)))
 (let ((?x9535 (* l_0_7_149 l_0_7_149)))
 (let ((?x9538 (+ (+ (+ (* l_0_7_107 l_0_7_107) (* l_0_7_108 l_0_7_108)) ?x9535) ?x9537)))
 (let ((?x9546 (+ (- (- (- ?x9538 ?x9539) ?x9541) (* (* 2.0 l_0_7_2) l_0_7_7)) (* (* 2.0 l_0_7_23) l_0_7_28))))
 (let ((?x9550 (- (+ ?x9546 (* (* 2.0 l_0_7_24) l_0_7_29)) (* (* 2.0 l_0_7_3) l_0_7_8))))
 (= (- (- ?x9550 ?x9551) ?x9553) 0.0)))))))))))
(assert
 (let ((?x9044 (* l_0_7_66 l_0_7_66)))
 (let ((?x9041 (* l_0_7_65 l_0_7_65)))
 (let ((?x9073 (* l_0_7_45 l_0_7_45)))
 (let ((?x9069 (* l_0_7_44 l_0_7_44)))
 (let ((?x9594 (- (* (* (- 2.0) l_0_7_11) l_0_7_2) (* (* 2.0 l_0_7_12) l_0_7_3))))
 (let ((?x9598 (+ (+ ?x9594 (* (* 2.0 l_0_7_23) l_0_7_32)) (* (* 2.0 l_0_7_24) l_0_7_33))))
 (= (- (- (+ (+ ?x9598 ?x9069) ?x9073) ?x9041) ?x9044) 0.0))))))))
(assert
 (let ((?x9044 (* l_0_7_66 l_0_7_66)))
 (let ((?x9645 (* 3.0 ?x9044)))
 (let ((?x9041 (* l_0_7_65 l_0_7_65)))
 (let ((?x9643 (* 3.0 ?x9041)))
 (let ((?x9641 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (let ((?x9032 (* l_0_7_3 l_0_7_3)))
 (let ((?x9033 (* 6.0 ?x9032)))
 (let ((?x9030 (* (* 6.0 l_0_7_24) l_0_7_24)))
 (let ((?x9027 (* (* 6.0 l_0_7_23) l_0_7_23)))
 (let ((?x9020 (* l_0_7_2 l_0_7_2)))
 (let ((?x9021 (* 6.0 ?x9020)))
 (let ((?x9625 (- (+ (* l_0_7_128 l_0_7_128) (* l_0_7_129 l_0_7_129)) (* (* 2.0 l_0_7_16) l_0_7_2))))
 (let ((?x9631 (+ (+ (- ?x9625 (* (* 2.0 l_0_7_17) l_0_7_3)) ?x9021) (* (* 2.0 l_0_7_23) l_0_7_37))))
 (let ((?x9636 (+ (- (+ (- ?x9631 ?x9027) (* (* 2.0 l_0_7_24) l_0_7_38)) ?x9030) ?x9033)))
 (let ((?x9646 (+ (+ (- (- ?x9636 (* (* 3.0 l_0_7_44) l_0_7_44)) ?x9641) ?x9643) ?x9645)))
 (= ?x9646 0.0)))))))))))))))))
(assert
 (let ((?x9695 (* l_0_7_6 l_0_7_6)))
 (let ((?x9693 (* l_0_7_5 l_0_7_5)))
 (let ((?x9691 (* l_0_7_4 l_0_7_4)))
 (let ((?x9689 (* l_0_7_27 l_0_7_27)))
 (let ((?x9687 (* l_0_7_26 l_0_7_26)))
 (let ((?x9685 (* l_0_7_25 l_0_7_25)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9683 (* ?x9682 l_0_7_131)))
 (let ((?x9690 (+ (+ (+ (- (* (* (- 2.0) l_0_7_128) l_0_7_130) ?x9683) ?x9685) ?x9687) ?x9689)))
 (= (- (- (- ?x9690 ?x9691) ?x9693) ?x9695) 0.0)))))))))))
(assert
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x9761 (* ?x9760 l_0_7_89)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x9758 (* ?x9757 l_0_7_88)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x9737 (* ?x9736 l_0_7_173)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x9734 (* ?x9733 l_0_7_172)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x9731 (* ?x9730 l_0_7_152)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x9728 (* ?x9727 l_0_7_151)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9725 (* ?x9682 l_0_7_134)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9723 (* ?x9722 l_0_7_133)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x9720 (* ?x9719 l_0_7_110)))
 (let ((?x9729 (+ (- (- (+ (* (* 2.0 l_0_7_107) l_0_7_109) ?x9720) ?x9723) ?x9725) ?x9728)))
 (let ((?x9741 (+ (- (- (+ ?x9729 ?x9731) ?x9734) ?x9737) (* (* 2.0 l_0_7_25) l_0_7_28))))
 (let ((?x9747 (+ (+ ?x9741 (* (* 2.0 l_0_7_26) l_0_7_29)) (* (* 2.0 l_0_7_27) l_0_7_30))))
 (let ((?x9753 (- (- ?x9747 (* (* 2.0 l_0_7_4) l_0_7_7)) (* (* 2.0 l_0_7_5) l_0_7_8))))
 (= (- (- (- ?x9753 (* (* 2.0 l_0_7_6) l_0_7_9)) ?x9758) ?x9761) 0.0))))))))))))))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9119 (* ?x9118 l_0_7_68)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9116 (* ?x9115 l_0_7_67)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9113 (* ?x9112 l_0_7_47)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9110 (* ?x9109 l_0_7_46)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9841 (* ?x9682 l_0_7_138)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9839 (* ?x9722 l_0_7_137)))
 (let ((?x9838 (- (* (* (- 2.0) l_0_7_11) l_0_7_4) (* (* 2.0 l_0_7_12) l_0_7_5))))
 (let ((?x9847 (+ (- (- (- ?x9838 ?x9839) ?x9841) (* (* 2.0 l_0_7_13) l_0_7_6)) (* (* 2.0 l_0_7_25) l_0_7_32))))
 (let ((?x9851 (+ (+ ?x9847 (* (* 2.0 l_0_7_26) l_0_7_33)) (* (* 2.0 l_0_7_27) l_0_7_34))))
 (= (- (- (+ (+ ?x9851 ?x9110) ?x9113) ?x9116) ?x9119) 0.0)))))))))))))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x9932 (* ?x9931 l_0_7_68)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x9929 (* ?x9928 l_0_7_67)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x9926 (* ?x9925 l_0_7_47)))
 (let ((?x9106 (* 12.0 l_0_7_3)))
 (let ((?x9107 (* ?x9106 l_0_7_5)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9104 (* ?x9103 l_0_7_26)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9101 (* ?x9100 l_0_7_25)))
 (let ((?x9095 (* 12.0 l_0_7_2)))
 (let ((?x9096 (* ?x9095 l_0_7_4)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9903 (* ?x9682 l_0_7_143)))
 (let ((?x9683 (* ?x9682 l_0_7_131)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9900 (* ?x9722 l_0_7_142)))
 (let ((?x9906 (- (- (+ (- (* ?x9722 l_0_7_130) ?x9900) ?x9683) ?x9903) (* (* 2.0 l_0_7_16) l_0_7_4))))
 (let ((?x9911 (- (- ?x9906 (* (* 2.0 l_0_7_17) l_0_7_5)) (* (* 2.0 l_0_7_18) l_0_7_6))))
 (let ((?x9916 (+ (- (- (+ ?x9911 ?x9096) ?x9101) ?x9104) (* (* 2.0 l_0_7_25) l_0_7_37))))
 (let ((?x9920 (+ (+ ?x9916 (* (* 2.0 l_0_7_26) l_0_7_38)) (* (* 2.0 l_0_7_27) l_0_7_39))))
 (let ((?x9930 (+ (- (- (+ ?x9920 ?x9107) (* (* 6.0 l_0_7_44) l_0_7_46)) ?x9926) ?x9929)))
 (= (+ ?x9930 ?x9932) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x10023 (* l_0_7_9 l_0_7_9)))
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x10021 (* ?x9760 l_0_7_92)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x10019 (* ?x9757 l_0_7_91)))
 (let ((?x10017 (* l_0_7_8 l_0_7_8)))
 (let ((?x10015 (* l_0_7_7 l_0_7_7)))
 (let ((?x10013 (* l_0_7_31 l_0_7_31)))
 (let ((?x10011 (* l_0_7_30 l_0_7_30)))
 (let ((?x10009 (* l_0_7_29 l_0_7_29)))
 (let ((?x10007 (* l_0_7_28 l_0_7_28)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10005 (* ?x9736 l_0_7_176)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10003 (* ?x9733 l_0_7_175)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10001 (* ?x9730 l_0_7_155)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x9999 (* ?x9727 l_0_7_154)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x9997 (* ?x9719 l_0_7_113)))
 (let ((?x9996 (+ (* (- l_0_7_10) l_0_7_10) (* (* 2.0 l_0_7_107) l_0_7_112))))
 (let ((?x10010 (+ (+ (- (- (+ (+ (+ ?x9996 ?x9997) ?x9999) ?x10001) ?x10003) ?x10005) ?x10007) ?x10009)))
 (let ((?x10024 (- (- (- (- (- (+ (+ ?x10010 ?x10011) ?x10013) ?x10015) ?x10017) ?x10019) ?x10021) ?x10023)))
 (= ?x10024 0.0))))))))))))))))))))))))))
(assert
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x10112 (* ?x9760 l_0_7_96)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x10110 (* ?x9757 l_0_7_95)))
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9214 (* ?x9118 l_0_7_71)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9212 (* ?x9115 l_0_7_70)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9210 (* ?x9112 l_0_7_50)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9208 (* ?x9109 l_0_7_49)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10092 (* ?x9736 l_0_7_180)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10090 (* ?x9733 l_0_7_179)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10088 (* ?x9730 l_0_7_159)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x10086 (* ?x9727 l_0_7_158)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x10077 (* ?x9719 l_0_7_117)))
 (let ((?x10076 (+ (* (* (- 2.0) l_0_7_10) l_0_7_14) (* (* 2.0 l_0_7_107) l_0_7_116))))
 (let ((?x10083 (- (- (+ ?x10076 ?x10077) (* (* 2.0 l_0_7_11) l_0_7_7)) (* (* 2.0 l_0_7_12) l_0_7_8))))
 (let ((?x10091 (- (+ (+ (- ?x10083 (* (* 2.0 l_0_7_13) l_0_7_9)) ?x10086) ?x10088) ?x10090)))
 (let ((?x10099 (+ (+ (- ?x10091 ?x10092) (* (* 2.0 l_0_7_28) l_0_7_32)) (* (* 2.0 l_0_7_29) l_0_7_33))))
 (let ((?x10105 (+ (+ ?x10099 (* (* 2.0 l_0_7_30) l_0_7_34)) (* (* 2.0 l_0_7_31) l_0_7_35))))
 (= (- (- (- (- (+ (+ ?x10105 ?x9208) ?x9210) ?x9212) ?x9214) ?x10110) ?x10112) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10230 (* ?x9931 l_0_7_71)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10228 (* ?x9928 l_0_7_70)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10226 (* ?x9925 l_0_7_50)))
 (let ((?x9106 (* 12.0 l_0_7_3)))
 (let ((?x9206 (* ?x9106 l_0_7_8)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9204 (* ?x9103 l_0_7_29)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9202 (* ?x9100 l_0_7_28)))
 (let ((?x9095 (* 12.0 l_0_7_2)))
 (let ((?x9198 (* ?x9095 l_0_7_7)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10208 (* ?x9736 l_0_7_185)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10206 (* ?x9733 l_0_7_184)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10200 (* ?x9730 l_0_7_164)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x10198 (* ?x9727 l_0_7_163)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9725 (* ?x9682 l_0_7_134)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9723 (* ?x9722 l_0_7_133)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x10194 (* ?x9719 l_0_7_122)))
 (let ((?x9717 (* 2.0 l_0_7_107)))
 (let ((?x10192 (* ?x9717 l_0_7_121)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x10190 (* ?x10189 l_0_7_87)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x10187 (* ?x10186 l_0_7_86)))
 (let ((?x10195 (+ (+ (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) ?x10187) ?x10190) ?x10192) ?x10194)))
 (let ((?x10203 (- (+ (+ (+ (+ ?x10195 ?x9723) ?x9725) ?x10198) ?x10200) (* (* 2.0 l_0_7_16) l_0_7_7))))
 (let ((?x10211 (- (- (- (- ?x10203 (* (* 2.0 l_0_7_17) l_0_7_8)) ?x10206) ?x10208) (* (* 2.0 l_0_7_18) l_0_7_9))))
 (let ((?x10216 (+ (- (- (+ ?x10211 ?x9198) ?x9202) ?x9204) (* (* 2.0 l_0_7_28) l_0_7_37))))
 (let ((?x10221 (+ (+ (+ ?x10216 (* (* 2.0 l_0_7_29) l_0_7_38)) ?x9206) (* (* 2.0 l_0_7_30) l_0_7_39))))
 (let ((?x10225 (- (+ ?x10221 (* (* 2.0 l_0_7_31) l_0_7_40)) (* (* 6.0 l_0_7_44) l_0_7_49))))
 (= (+ (+ (- ?x10225 ?x10226) ?x10228) ?x10230) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9323 (* ?x9118 l_0_7_75)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9321 (* ?x9115 l_0_7_74)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9318 (* ?x9112 l_0_7_54)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9316 (* ?x9109 l_0_7_53)))
 (let ((?x10332 (* l_0_7_36 l_0_7_36)))
 (let ((?x10330 (* l_0_7_35 l_0_7_35)))
 (let ((?x10328 (* l_0_7_34 l_0_7_34)))
 (let ((?x10326 (* l_0_7_33 l_0_7_33)))
 (let ((?x10324 (* l_0_7_32 l_0_7_32)))
 (let ((?x10322 (* l_0_7_15 l_0_7_15)))
 (let ((?x10320 (* l_0_7_14 l_0_7_14)))
 (let ((?x10318 (* l_0_7_13 l_0_7_13)))
 (let ((?x10321 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x10318) ?x10320)))
 (let ((?x10334 (+ (+ (+ (+ (+ (+ (- ?x10321 ?x10322) ?x10324) ?x10326) ?x10328) ?x10330) ?x10332) ?x9316)))
 (= (- (- (+ ?x10334 ?x9318) ?x9321) ?x9323) 0.0))))))))))))))))))))
(assert
 (let ((?x9118 (* 2.0 l_0_7_66)))
 (let ((?x9415 (* ?x9118 l_0_7_80)))
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10405 (* ?x9931 l_0_7_75)))
 (let ((?x9115 (* 2.0 l_0_7_65)))
 (let ((?x9413 (* ?x9115 l_0_7_79)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10402 (* ?x9928 l_0_7_74)))
 (let ((?x9112 (* 2.0 l_0_7_45)))
 (let ((?x9408 (* ?x9112 l_0_7_59)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10399 (* ?x9925 l_0_7_54)))
 (let ((?x9109 (* 2.0 l_0_7_44)))
 (let ((?x9406 (* ?x9109 l_0_7_58)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9313 (* ?x9103 l_0_7_33)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9311 (* ?x9100 l_0_7_32)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9841 (* ?x9682 l_0_7_138)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9839 (* ?x9722 l_0_7_137)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x9303 (* ?x9302 l_0_7_3)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x9300 (* ?x9299 l_0_7_2)))
 (let ((?x10367 (- (+ (* (* (- 2.0) l_0_7_11) l_0_7_16) ?x9300) (* (* 2.0 l_0_7_12) l_0_7_17))))
 (let ((?x10372 (- (+ (+ (+ ?x10367 ?x9303) ?x9839) ?x9841) (* (* 2.0 l_0_7_13) l_0_7_18))))
 (let ((?x10378 (- (- ?x10372 (* (* 2.0 l_0_7_14) l_0_7_19)) (* (* 2.0 l_0_7_15) l_0_7_20))))
 (let ((?x10386 (+ (+ (- (- ?x10378 ?x9311) ?x9313) (* (* 2.0 l_0_7_32) l_0_7_37)) (* (* 2.0 l_0_7_33) l_0_7_38))))
 (let ((?x10392 (+ (+ ?x10386 (* (* 2.0 l_0_7_34) l_0_7_39)) (* (* 2.0 l_0_7_35) l_0_7_40))))
 (let ((?x10397 (- (+ ?x10392 (* (* 2.0 l_0_7_36) l_0_7_41)) (* (* 6.0 l_0_7_44) l_0_7_53))))
 (let ((?x10407 (- (+ (- (+ (+ (- (+ ?x10397 ?x9406) ?x10399) ?x9408) ?x10402) ?x9413) ?x10405) ?x9415)))
 (= ?x10407 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10513 (* ?x9931 l_0_7_80)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10511 (* ?x9928 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x9411 (* ?x9410 l_0_7_65)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10508 (* ?x9925 l_0_7_59)))
 (let ((?x9922 (* 6.0 l_0_7_44)))
 (let ((?x10506 (* ?x9922 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x9404 (* ?x9403 l_0_7_44)))
 (let ((?x10503 (* l_0_7_42 l_0_7_42)))
 (let ((?x10501 (* l_0_7_41 l_0_7_41)))
 (let ((?x10499 (* l_0_7_40 l_0_7_40)))
 (let ((?x10497 (* l_0_7_39 l_0_7_39)))
 (let ((?x10495 (* l_0_7_38 l_0_7_38)))
 (let ((?x10493 (* l_0_7_37 l_0_7_37)))
 (let ((?x9103 (* 12.0 l_0_7_24)))
 (let ((?x9401 (* ?x9103 l_0_7_38)))
 (let ((?x9100 (* 12.0 l_0_7_23)))
 (let ((?x9399 (* ?x9100 l_0_7_37)))
 (let ((?x10489 (* l_0_7_21 l_0_7_21)))
 (let ((?x10487 (* l_0_7_20 l_0_7_20)))
 (let ((?x10485 (* l_0_7_19 l_0_7_19)))
 (let ((?x10483 (* l_0_7_18 l_0_7_18)))
 (let ((?x10481 (* l_0_7_17 l_0_7_17)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x9390 (* ?x9389 l_0_7_3)))
 (let ((?x10478 (* l_0_7_16 l_0_7_16)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x9387 (* ?x9386 l_0_7_2)))
 (let ((?x9682 (* 2.0 l_0_7_129)))
 (let ((?x9903 (* ?x9682 l_0_7_143)))
 (let ((?x9722 (* 2.0 l_0_7_128)))
 (let ((?x9900 (* ?x9722 l_0_7_142)))
 (let ((?x10486 (- (- (- (+ (- (+ (+ ?x9900 ?x9903) ?x9387) ?x10478) ?x9390) ?x10481) ?x10483) ?x10485)))
 (let ((?x10498 (+ (+ (+ (- (- (- (- ?x10486 ?x10487) ?x10489) ?x9399) ?x9401) ?x10493) ?x10495) ?x10497)))
 (let ((?x10510 (+ (- (- (- (+ (+ (+ ?x10498 ?x10499) ?x10501) ?x10503) ?x9404) ?x10506) ?x10508) ?x9411)))
 (= (+ (+ ?x10510 ?x10511) ?x10513) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x10618 (* ?x10617 l_0_7_81)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x10615 (* ?x10614 l_0_7_80)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x10612 (* ?x10611 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10609 (* ?x9410 l_0_7_67)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x10607 (* ?x10606 l_0_7_60)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x10604 (* ?x10603 l_0_7_59)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x10601 (* ?x10600 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10598 (* ?x9403 l_0_7_46)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x10596 (* ?x10595 l_0_7_39)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x10593 (* ?x10592 l_0_7_38)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x10590 (* ?x10589 l_0_7_37)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10587 (* ?x8919 l_0_7_25)))
 (let ((?x10575 (* 12.0 l_0_7_18)))
 (let ((?x10576 (* ?x10575 l_0_7_6)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x10573 (* ?x9389 l_0_7_5)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x10571 (* ?x9386 l_0_7_4)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10569 (* ?x9086 l_0_7_142)))
 (let ((?x10572 (+ (- (+ (* (* 12.0 l_0_7_1) l_0_7_4) (* ?x9086 l_0_7_130)) ?x10569) ?x10571)))
 (let ((?x10583 (- (- (+ (+ ?x10572 ?x10573) ?x10576) (* (* 2.0 l_0_7_193) l_0_7_205)) (* (* 2.0 l_0_7_194) l_0_7_206))))
 (let ((?x10594 (- (- (- (- ?x10583 (* (* 2.0 l_0_7_195) l_0_7_207)) ?x10587) ?x10590) ?x10593)))
 (let ((?x10613 (+ (+ (- (- (- (- (- ?x10594 ?x10596) ?x10598) ?x10601) ?x10604) ?x10607) ?x10609) ?x10612)))
 (= (+ (+ ?x10613 ?x10615) ?x10618) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10778 (* 2.0 l_0_7_73)))
 (let ((?x10779 (* ?x10778 l_0_7_82)))
 (let ((?x10775 (* 2.0 l_0_7_72)))
 (let ((?x10776 (* ?x10775 l_0_7_81)))
 (let ((?x10772 (* 2.0 l_0_7_71)))
 (let ((?x10773 (* ?x10772 l_0_7_80)))
 (let ((?x10769 (* 2.0 l_0_7_70)))
 (let ((?x10770 (* ?x10769 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10767 (* ?x9410 l_0_7_70)))
 (let ((?x10764 (* 2.0 l_0_7_52)))
 (let ((?x10765 (* ?x10764 l_0_7_61)))
 (let ((?x10761 (* 2.0 l_0_7_51)))
 (let ((?x10762 (* ?x10761 l_0_7_60)))
 (let ((?x10758 (* 2.0 l_0_7_50)))
 (let ((?x10759 (* ?x10758 l_0_7_59)))
 (let ((?x10755 (* 2.0 l_0_7_49)))
 (let ((?x10756 (* ?x10755 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10753 (* ?x9403 l_0_7_49)))
 (let ((?x10750 (* 12.0 l_0_7_31)))
 (let ((?x10751 (* ?x10750 l_0_7_40)))
 (let ((?x10747 (* 12.0 l_0_7_30)))
 (let ((?x10748 (* ?x10747 l_0_7_39)))
 (let ((?x10744 (* 12.0 l_0_7_29)))
 (let ((?x10745 (* ?x10744 l_0_7_38)))
 (let ((?x10741 (* 12.0 l_0_7_28)))
 (let ((?x10742 (* ?x10741 l_0_7_37)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10739 (* ?x8919 l_0_7_28)))
 (let ((?x10575 (* 12.0 l_0_7_18)))
 (let ((?x10725 (* ?x10575 l_0_7_9)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x10723 (* ?x9389 l_0_7_8)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x10721 (* ?x9191 l_0_7_184)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x10719 (* ?x9386 l_0_7_7)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x10717 (* ?x9188 l_0_7_163)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10715 (* ?x9086 l_0_7_133)))
 (let ((?x9177 (* 2.0 l_0_7_106)))
 (let ((?x10713 (* ?x9177 l_0_7_121)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x10711 (* ?x10186 l_0_7_85)))
 (let ((?x10708 (* 12.0 l_0_7_10)))
 (let ((?x10709 (* ?x10708 l_0_7_19)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x10707 (* ?x8912 l_0_7_7)))
 (let ((?x10722 (- (+ (+ (+ (+ (- (+ ?x10707 ?x10709) ?x10711) ?x10713) ?x10715) ?x10717) ?x10719) ?x10721)))
 (let ((?x10732 (- (- (+ (+ ?x10722 ?x10723) ?x10725) (* (* 2.0 l_0_7_196) l_0_7_205)) (* (* 2.0 l_0_7_197) l_0_7_206))))
 (let ((?x10738 (- (- ?x10732 (* (* 2.0 l_0_7_198) l_0_7_207)) (* (* 2.0 l_0_7_199) l_0_7_208))))
 (let ((?x10757 (- (- (- (- (- (- (- ?x10738 ?x10739) ?x10742) ?x10745) ?x10748) ?x10751) ?x10753) ?x10756)))
 (let ((?x10777 (+ (+ (+ (+ (- (- (- ?x10757 ?x10759) ?x10762) ?x10765) ?x10767) ?x10770) ?x10773) ?x10776)))
 (= (+ ?x10777 ?x10779) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10981 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x10978 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x10975 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x10972 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x10969 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x8973 (* ?x8926 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10965 (* ?x9410 l_0_7_74)))
 (let ((?x10963 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x10960 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x10957 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x10954 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x10951 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x8968 (* ?x8923 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10947 (* ?x9403 l_0_7_53)))
 (let ((?x10945 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x10942 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x10939 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x10936 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x10933 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10930 (* ?x8919 l_0_7_32)))
 (let ((?x10913 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x10910 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x10907 (* ?x10906 l_0_7_18)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10904 (* ?x9086 l_0_7_137)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x10902 (* ?x9302 l_0_7_17)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x10900 (* ?x9299 l_0_7_16)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x10899 (* ?x8912 l_0_7_11)))
 (let ((?x10917 (- (+ (+ (+ (+ (+ (+ ?x10899 ?x10900) ?x10902) ?x10904) ?x10907) ?x10910) ?x10913) (* (* 2.0 l_0_7_200) l_0_7_205))))
 (let ((?x10923 (- (- ?x10917 (* (* 2.0 l_0_7_201) l_0_7_206)) (* (* 2.0 l_0_7_202) l_0_7_207))))
 (let ((?x10929 (- (- ?x10923 (* (* 2.0 l_0_7_203) l_0_7_208)) (* (* 2.0 l_0_7_204) l_0_7_209))))
 (let ((?x10948 (- (- (- (- (- (- (- ?x10929 ?x10930) ?x10933) ?x10936) ?x10939) ?x10942) ?x10945) ?x10947)))
 (let ((?x10966 (+ (- (- (- (- (- (+ ?x10948 ?x8968) ?x10951) ?x10954) ?x10957) ?x10960) ?x10963) ?x10965)))
 (= (+ (+ (+ (+ (+ (- ?x10966 ?x8973) ?x10969) ?x10972) ?x10975) ?x10978) ?x10981) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x8889 (* l_0_7_64 l_0_7_64)))
 (let ((?x8975 (* 3.0 ?x8889)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x11174 (* ?x9410 l_0_7_79)))
 (let ((?x8971 (* (* 3.0 l_0_7_43) l_0_7_43)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x11153 (* ?x9403 l_0_7_58)))
 (let ((?x11151 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x11148 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x11145 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x11142 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x11139 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x11136 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x8965 (* ?x8919 l_0_7_37)))
 (let ((?x11132 (* l_0_7_210 l_0_7_210)))
 (let ((?x10489 (* l_0_7_21 l_0_7_21)))
 (let ((?x11130 (* 6.0 ?x10489)))
 (let ((?x11128 (* l_0_7_209 l_0_7_209)))
 (let ((?x11126 (* l_0_7_208 l_0_7_208)))
 (let ((?x11124 (* l_0_7_207 l_0_7_207)))
 (let ((?x11122 (* l_0_7_206 l_0_7_206)))
 (let ((?x11120 (* l_0_7_205 l_0_7_205)))
 (let ((?x10487 (* l_0_7_20 l_0_7_20)))
 (let ((?x11118 (* 6.0 ?x10487)))
 (let ((?x10485 (* l_0_7_19 l_0_7_19)))
 (let ((?x11116 (* 6.0 ?x10485)))
 (let ((?x10483 (* l_0_7_18 l_0_7_18)))
 (let ((?x11114 (* 6.0 ?x10483)))
 (let ((?x10481 (* l_0_7_17 l_0_7_17)))
 (let ((?x11112 (* 6.0 ?x10481)))
 (let ((?x10478 (* l_0_7_16 l_0_7_16)))
 (let ((?x11110 (* 6.0 ?x10478)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10569 (* ?x9086 l_0_7_142)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x8959 (* ?x8912 l_0_7_16)))
 (let ((?x11121 (- (+ (+ (+ (+ (+ (+ ?x8959 ?x10569) ?x11110) ?x11112) ?x11114) ?x11116) ?x11118) ?x11120)))
 (let ((?x11134 (- (- (+ (- (- (- (- ?x11121 ?x11122) ?x11124) ?x11126) ?x11128) ?x11130) ?x11132) ?x8965)))
 (let ((?x11154 (- (- (- (- (- (- (- ?x11134 ?x11136) ?x11139) ?x11142) ?x11145) ?x11148) ?x11151) ?x11153)))
 (let ((?x11161 (- (- (- ?x11154 ?x8971) (* (* 1.0 l_0_7_58) l_0_7_58)) (* (* 1.0 l_0_7_59) l_0_7_59))))
 (let ((?x11167 (- (- ?x11161 (* (* 1.0 l_0_7_60) l_0_7_60)) (* (* 1.0 l_0_7_61) l_0_7_61))))
 (let ((?x11173 (- (- ?x11167 (* (* 1.0 l_0_7_62) l_0_7_62)) (* (* 1.0 l_0_7_63) l_0_7_63))))
 (let ((?x11182 (+ (+ (+ (+ ?x11173 ?x11174) ?x8975) (* 1.0 (* l_0_7_79 l_0_7_79))) (* 1.0 (* l_0_7_80 l_0_7_80)))))
 (let ((?x11188 (+ (+ ?x11182 (* 1.0 (* l_0_7_81 l_0_7_81))) (* 1.0 (* l_0_7_82 l_0_7_82)))))
 (let ((?x11194 (+ (+ ?x11188 (* 1.0 (* l_0_7_83 l_0_7_83))) (* 1.0 (* l_0_7_84 l_0_7_84)))))
 (= ?x11194 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11326 (* l_0_7_69 l_0_7_69)))
 (let ((?x11327 (* 3.0 ?x11326)))
 (let ((?x11323 (* l_0_7_68 l_0_7_68)))
 (let ((?x11324 (* 3.0 ?x11323)))
 (let ((?x11320 (* l_0_7_67 l_0_7_67)))
 (let ((?x11321 (* 3.0 ?x11320)))
 (let ((?x9695 (* l_0_7_6 l_0_7_6)))
 (let ((?x11318 (* 6.0 ?x9695)))
 (let ((?x9693 (* l_0_7_5 l_0_7_5)))
 (let ((?x11316 (* 6.0 ?x9693)))
 (let ((?x11314 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x11311 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x9691 (* l_0_7_4 l_0_7_4)))
 (let ((?x11305 (* 6.0 ?x9691)))
 (let ((?x11303 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x11300 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x11297 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x11294 (* l_0_7_132 l_0_7_132)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11292 (* ?x11291 l_0_7_144)))
 (let ((?x11289 (* l_0_7_131 l_0_7_131)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11287 (* ?x11286 l_0_7_143)))
 (let ((?x11288 (- (+ (* (* (- 2.0) l_0_7_130) l_0_7_142) (* l_0_7_130 l_0_7_130)) ?x11287)))
 (let ((?x11306 (+ (- (- (- (+ (- (+ ?x11288 ?x11289) ?x11292) ?x11294) ?x11297) ?x11300) ?x11303) ?x11305)))
 (let ((?x11317 (+ (- (- (- ?x11306 (* (* 3.0 l_0_7_46) l_0_7_46)) ?x11311) ?x11314) ?x11316)))
 (= (+ (+ (+ (+ ?x11317 ?x11318) ?x11321) ?x11324) ?x11327) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11477 (* ?x11476 l_0_7_72)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11474 (* ?x11473 l_0_7_71)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11471 (* ?x11470 l_0_7_70)))
 (let ((?x11468 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x11465 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11462 (* ?x11461 l_0_7_51)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11459 (* ?x11458 l_0_7_50)))
 (let ((?x11453 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x11450 (* ?x10595 l_0_7_30)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x11448 (* ?x10592 l_0_7_29)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x11446 (* ?x10589 l_0_7_28)))
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x11444 (* ?x11443 l_0_7_186)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x11441 (* ?x11440 l_0_7_185)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x11438 (* ?x11437 l_0_7_184)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x11435 (* ?x11434 l_0_7_165)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x11432 (* ?x11431 l_0_7_164)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x11429 (* ?x11428 l_0_7_163)))
 (let ((?x11425 (* 2.0 l_0_7_136)))
 (let ((?x11426 (* ?x11425 l_0_7_145)))
 (let ((?x11422 (* 2.0 l_0_7_135)))
 (let ((?x11423 (* ?x11422 l_0_7_144)))
 (let ((?x11419 (* 2.0 l_0_7_134)))
 (let ((?x11420 (* ?x11419 l_0_7_143)))
 (let ((?x11416 (* 2.0 l_0_7_133)))
 (let ((?x11417 (* ?x11416 l_0_7_142)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11414 (* ?x11291 l_0_7_135)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11412 (* ?x11286 l_0_7_134)))
 (let ((?x11409 (* 2.0 l_0_7_130)))
 (let ((?x11410 (* ?x11409 l_0_7_133)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x11407 (* ?x11406 l_0_7_123)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x11404 (* ?x11403 l_0_7_122)))
 (let ((?x11400 (* 2.0 l_0_7_109)))
 (let ((?x11401 (* ?x11400 l_0_7_121)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x11398 (* ?x11397 l_0_7_90)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x11395 (* ?x10189 l_0_7_89)))
 (let ((?x11405 (+ (+ (- (- (* (* (- 2.0) l_0_7_100) l_0_7_88) ?x11395) ?x11398) ?x11401) ?x11404)))
 (let ((?x11424 (- (- (- (+ (+ (+ (+ ?x11405 ?x11407) ?x11410) ?x11412) ?x11414) ?x11417) ?x11420) ?x11423)))
 (let ((?x11445 (- (- (- (+ (+ (+ (- ?x11424 ?x11426) ?x11429) ?x11432) ?x11435) ?x11438) ?x11441) ?x11444)))
 (let ((?x11457 (- (+ (- (- (- ?x11445 ?x11446) ?x11448) ?x11450) ?x11453) (* (* 6.0 l_0_7_46) l_0_7_49))))
 (let ((?x11478 (+ (+ (+ (+ (+ (- (- ?x11457 ?x11459) ?x11462) ?x11465) ?x11468) ?x11471) ?x11474) ?x11477)))
 (= ?x11478 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x10618 (* ?x10617 l_0_7_81)))
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11659 (* ?x11476 l_0_7_76)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x10615 (* ?x10614 l_0_7_80)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11656 (* ?x11473 l_0_7_75)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x10612 (* ?x10611 l_0_7_79)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11653 (* ?x11470 l_0_7_74)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x10607 (* ?x10606 l_0_7_60)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11650 (* ?x11461 l_0_7_55)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x10604 (* ?x10603 l_0_7_59)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11647 (* ?x11458 l_0_7_54)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x10601 (* ?x10600 l_0_7_58)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x11642 (* ?x10595 l_0_7_34)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x11640 (* ?x10592 l_0_7_33)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x11638 (* ?x10589 l_0_7_32)))
 (let ((?x11636 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x11633 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x11630 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x11627 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x11624 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11621 (* ?x11291 l_0_7_139)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11619 (* ?x11286 l_0_7_138)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x11596 (* ?x10906 l_0_7_6)))
 (let ((?x11594 (+ (* (* 12.0 l_0_7_11) l_0_7_4) (* (* 12.0 l_0_7_12) l_0_7_5))))
 (let ((?x11622 (+ (+ (+ (+ ?x11594 ?x11596) (* (* 2.0 l_0_7_130) l_0_7_137)) ?x11619) ?x11621)))
 (let ((?x11641 (- (- (- (- (- (- (- ?x11622 ?x11624) ?x11627) ?x11630) ?x11633) ?x11636) ?x11638) ?x11640)))
 (let ((?x11648 (- (+ (- (- ?x11641 ?x11642) (* (* 6.0 l_0_7_46) l_0_7_53)) ?x10601) ?x11647)))
 (let ((?x11658 (- (+ (- (+ (+ (- (+ ?x11648 ?x10604) ?x11650) ?x10607) ?x11653) ?x10612) ?x11656) ?x10615)))
 (= (- (+ ?x11658 ?x11659) ?x10618) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11793 (* ?x11476 l_0_7_81)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11791 (* ?x11473 l_0_7_80)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11789 (* ?x11470 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10609 (* ?x9410 l_0_7_67)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11786 (* ?x11461 l_0_7_60)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11784 (* ?x11458 l_0_7_59)))
 (let ((?x11455 (* 6.0 l_0_7_46)))
 (let ((?x11782 (* ?x11455 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10598 (* ?x9403 l_0_7_46)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x10596 (* ?x10595 l_0_7_39)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x10593 (* ?x10592 l_0_7_38)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x10590 (* ?x10589 l_0_7_37)))
 (let ((?x10575 (* 12.0 l_0_7_18)))
 (let ((?x10576 (* ?x10575 l_0_7_6)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x10573 (* ?x9389 l_0_7_5)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x10571 (* ?x9386 l_0_7_4)))
 (let ((?x11773 (* l_0_7_147 l_0_7_147)))
 (let ((?x11771 (* l_0_7_146 l_0_7_146)))
 (let ((?x11769 (* l_0_7_145 l_0_7_145)))
 (let ((?x11767 (* l_0_7_144 l_0_7_144)))
 (let ((?x11765 (* l_0_7_143 l_0_7_143)))
 (let ((?x11763 (* l_0_7_142 l_0_7_142)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11292 (* ?x11291 l_0_7_144)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11287 (* ?x11286 l_0_7_143)))
 (let ((?x11766 (- (- (+ (+ (* (* 2.0 l_0_7_130) l_0_7_142) ?x11287) ?x11292) ?x11763) ?x11765)))
 (let ((?x11777 (+ (+ (+ (- (- (- (- ?x11766 ?x11767) ?x11769) ?x11771) ?x11773) ?x10571) ?x10573) ?x10576)))
 (let ((?x11787 (- (- (- (- (- (- (- ?x11777 ?x10590) ?x10593) ?x10596) ?x10598) ?x11782) ?x11784) ?x11786)))
 (= (+ (+ (+ (+ ?x11787 ?x10609) ?x11789) ?x11791) ?x11793) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10023 (* l_0_7_9 l_0_7_9)))
 (let ((?x11938 (* 6.0 ?x10023)))
 (let ((?x10017 (* l_0_7_8 l_0_7_8)))
 (let ((?x11936 (* 6.0 ?x10017)))
 (let ((?x11933 (* l_0_7_73 l_0_7_73)))
 (let ((?x11934 (* 3.0 ?x11933)))
 (let ((?x11930 (* l_0_7_72 l_0_7_72)))
 (let ((?x11931 (* 3.0 ?x11930)))
 (let ((?x11927 (* l_0_7_71 l_0_7_71)))
 (let ((?x11928 (* 3.0 ?x11927)))
 (let ((?x11924 (* l_0_7_70 l_0_7_70)))
 (let ((?x11925 (* 3.0 ?x11924)))
 (let ((?x10015 (* l_0_7_7 l_0_7_7)))
 (let ((?x11922 (* 6.0 ?x10015)))
 (let ((?x11920 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x11917 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x11914 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x11908 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x11905 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x11902 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x11899 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x11895 (* 2.0 l_0_7_178)))
 (let ((?x11896 (* ?x11895 l_0_7_187)))
 (let ((?x11892 (* 2.0 l_0_7_177)))
 (let ((?x11893 (* ?x11892 l_0_7_186)))
 (let ((?x11889 (* 2.0 l_0_7_176)))
 (let ((?x11890 (* ?x11889 l_0_7_185)))
 (let ((?x11886 (* 2.0 l_0_7_175)))
 (let ((?x11887 (* ?x11886 l_0_7_184)))
 (let ((?x11883 (* 2.0 l_0_7_157)))
 (let ((?x11884 (* ?x11883 l_0_7_166)))
 (let ((?x11880 (* 2.0 l_0_7_156)))
 (let ((?x11881 (* ?x11880 l_0_7_165)))
 (let ((?x11877 (* 2.0 l_0_7_155)))
 (let ((?x11878 (* ?x11877 l_0_7_164)))
 (let ((?x11874 (* 2.0 l_0_7_154)))
 (let ((?x11875 (* ?x11874 l_0_7_163)))
 (let ((?x11872 (* l_0_7_136 l_0_7_136)))
 (let ((?x11870 (* l_0_7_135 l_0_7_135)))
 (let ((?x11868 (* l_0_7_134 l_0_7_134)))
 (let ((?x11866 (* l_0_7_133 l_0_7_133)))
 (let ((?x11863 (* 2.0 l_0_7_115)))
 (let ((?x11864 (* ?x11863 l_0_7_124)))
 (let ((?x11860 (* 2.0 l_0_7_114)))
 (let ((?x11861 (* ?x11860 l_0_7_123)))
 (let ((?x11857 (* 2.0 l_0_7_113)))
 (let ((?x11858 (* ?x11857 l_0_7_122)))
 (let ((?x11854 (* 2.0 l_0_7_112)))
 (let ((?x11855 (* ?x11854 l_0_7_121)))
 (let ((?x11851 (* 2.0 l_0_7_103)))
 (let ((?x11852 (* ?x11851 l_0_7_94)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x11849 (* ?x11397 l_0_7_93)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x11847 (* ?x10189 l_0_7_92)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x11845 (* ?x10186 l_0_7_91)))
 (let ((?x10027 (* l_0_7_10 l_0_7_10)))
 (let ((?x11844 (* 6.0 ?x10027)))
 (let ((?x11862 (+ (+ (+ (- (- (- (- ?x11844 ?x11845) ?x11847) ?x11849) ?x11852) ?x11855) ?x11858) ?x11861)))
 (let ((?x11879 (+ (+ (+ (+ (+ (+ (+ ?x11862 ?x11864) ?x11866) ?x11868) ?x11870) ?x11872) ?x11875) ?x11878)))
 (let ((?x11900 (- (- (- (- (- (+ (+ ?x11879 ?x11881) ?x11884) ?x11887) ?x11890) ?x11893) ?x11896) ?x11899)))
 (let ((?x11912 (- (- (- (- ?x11900 ?x11902) ?x11905) ?x11908) (* (* 3.0 l_0_7_49) l_0_7_49))))
 (let ((?x11932 (+ (+ (+ (+ (- (- (- ?x11912 ?x11914) ?x11917) ?x11920) ?x11922) ?x11925) ?x11928) ?x11931)))
 (= (+ (+ (+ ?x11932 ?x11934) ?x11936) ?x11938) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10778 (* 2.0 l_0_7_73)))
 (let ((?x10779 (* ?x10778 l_0_7_82)))
 (let ((?x12179 (* 6.0 l_0_7_73)))
 (let ((?x12180 (* ?x12179 l_0_7_77)))
 (let ((?x10775 (* 2.0 l_0_7_72)))
 (let ((?x10776 (* ?x10775 l_0_7_81)))
 (let ((?x12175 (* 6.0 l_0_7_72)))
 (let ((?x12176 (* ?x12175 l_0_7_76)))
 (let ((?x10772 (* 2.0 l_0_7_71)))
 (let ((?x10773 (* ?x10772 l_0_7_80)))
 (let ((?x12171 (* 6.0 l_0_7_71)))
 (let ((?x12172 (* ?x12171 l_0_7_75)))
 (let ((?x10769 (* 2.0 l_0_7_70)))
 (let ((?x10770 (* ?x10769 l_0_7_79)))
 (let ((?x12167 (* 6.0 l_0_7_70)))
 (let ((?x12168 (* ?x12167 l_0_7_74)))
 (let ((?x10764 (* 2.0 l_0_7_52)))
 (let ((?x10765 (* ?x10764 l_0_7_61)))
 (let ((?x12163 (* 6.0 l_0_7_52)))
 (let ((?x12164 (* ?x12163 l_0_7_56)))
 (let ((?x10761 (* 2.0 l_0_7_51)))
 (let ((?x10762 (* ?x10761 l_0_7_60)))
 (let ((?x12159 (* 6.0 l_0_7_51)))
 (let ((?x12160 (* ?x12159 l_0_7_55)))
 (let ((?x10758 (* 2.0 l_0_7_50)))
 (let ((?x10759 (* ?x10758 l_0_7_59)))
 (let ((?x12155 (* 6.0 l_0_7_50)))
 (let ((?x12156 (* ?x12155 l_0_7_54)))
 (let ((?x10755 (* 2.0 l_0_7_49)))
 (let ((?x10756 (* ?x10755 l_0_7_58)))
 (let ((?x10750 (* 12.0 l_0_7_31)))
 (let ((?x12149 (* ?x10750 l_0_7_35)))
 (let ((?x10747 (* 12.0 l_0_7_30)))
 (let ((?x12147 (* ?x10747 l_0_7_34)))
 (let ((?x10744 (* 12.0 l_0_7_29)))
 (let ((?x12145 (* ?x10744 l_0_7_33)))
 (let ((?x10741 (* 12.0 l_0_7_28)))
 (let ((?x12143 (* ?x10741 l_0_7_32)))
 (let ((?x12141 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x12138 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x12135 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x12132 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x12129 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x12126 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x12123 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x12120 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x12117 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x12114 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x11425 (* 2.0 l_0_7_136)))
 (let ((?x12111 (* ?x11425 l_0_7_140)))
 (let ((?x11422 (* 2.0 l_0_7_135)))
 (let ((?x12109 (* ?x11422 l_0_7_139)))
 (let ((?x11419 (* 2.0 l_0_7_134)))
 (let ((?x12107 (* ?x11419 l_0_7_138)))
 (let ((?x11416 (* 2.0 l_0_7_133)))
 (let ((?x12105 (* ?x11416 l_0_7_137)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x12103 (* ?x10906 l_0_7_9)))
 (let ((?x12101 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x12098 (* ?x9302 l_0_7_8)))
 (let ((?x12096 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x12093 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x12090 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x12087 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x12084 (* ?x9299 l_0_7_7)))
 (let ((?x12082 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x11851 (* 2.0 l_0_7_103)))
 (let ((?x12079 (* ?x11851 l_0_7_98)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x12077 (* ?x11397 l_0_7_97)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x12075 (* ?x10189 l_0_7_96)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x12073 (* ?x10186 l_0_7_95)))
 (let ((?x10708 (* 12.0 l_0_7_10)))
 (let ((?x12050 (* ?x10708 l_0_7_14)))
 (let ((?x12088 (+ (+ (- (- (- (- (- ?x12050 ?x12073) ?x12075) ?x12077) ?x12079) ?x12082) ?x12084) ?x12087)))
 (let ((?x12106 (+ (+ (+ (+ (+ (+ (+ ?x12088 ?x12090) ?x12093) ?x12096) ?x12098) ?x12101) ?x12103) ?x12105)))
 (let ((?x12124 (+ (+ (+ (+ (+ (+ (+ ?x12106 ?x12107) ?x12109) ?x12111) ?x12114) ?x12117) ?x12120) ?x12123)))
 (let ((?x12144 (- (- (- (- (- (- (+ ?x12124 ?x12126) ?x12129) ?x12132) ?x12135) ?x12138) ?x12141) ?x12143)))
 (let ((?x12153 (- (- (- (- ?x12144 ?x12145) ?x12147) ?x12149) (* (* 6.0 l_0_7_49) l_0_7_53))))
 (let ((?x12166 (+ (- (+ (- (+ (- (+ ?x12153 ?x10756) ?x12156) ?x10759) ?x12160) ?x10762) ?x12164) ?x10765)))
 (let ((?x12181 (+ (- (+ (- (+ (- (+ ?x12166 ?x12168) ?x10770) ?x12172) ?x10773) ?x12176) ?x10776) ?x12180)))
 (= (- ?x12181 ?x10779) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12179 (* 6.0 l_0_7_73)))
 (let ((?x12428 (* ?x12179 l_0_7_82)))
 (let ((?x12175 (* 6.0 l_0_7_72)))
 (let ((?x12426 (* ?x12175 l_0_7_81)))
 (let ((?x12171 (* 6.0 l_0_7_71)))
 (let ((?x12424 (* ?x12171 l_0_7_80)))
 (let ((?x12167 (* 6.0 l_0_7_70)))
 (let ((?x12422 (* ?x12167 l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10767 (* ?x9410 l_0_7_70)))
 (let ((?x12163 (* 6.0 l_0_7_52)))
 (let ((?x12419 (* ?x12163 l_0_7_61)))
 (let ((?x12159 (* 6.0 l_0_7_51)))
 (let ((?x12417 (* ?x12159 l_0_7_60)))
 (let ((?x12155 (* 6.0 l_0_7_50)))
 (let ((?x12415 (* ?x12155 l_0_7_59)))
 (let ((?x12151 (* 6.0 l_0_7_49)))
 (let ((?x12413 (* ?x12151 l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10753 (* ?x9403 l_0_7_49)))
 (let ((?x10750 (* 12.0 l_0_7_31)))
 (let ((?x10751 (* ?x10750 l_0_7_40)))
 (let ((?x10747 (* 12.0 l_0_7_30)))
 (let ((?x10748 (* ?x10747 l_0_7_39)))
 (let ((?x10744 (* 12.0 l_0_7_29)))
 (let ((?x10745 (* ?x10744 l_0_7_38)))
 (let ((?x10741 (* 12.0 l_0_7_28)))
 (let ((?x10742 (* ?x10741 l_0_7_37)))
 (let ((?x12406 (* l_0_7_189 l_0_7_189)))
 (let ((?x12404 (* l_0_7_188 l_0_7_188)))
 (let ((?x12402 (* l_0_7_187 l_0_7_187)))
 (let ((?x12400 (* l_0_7_186 l_0_7_186)))
 (let ((?x12398 (* l_0_7_185 l_0_7_185)))
 (let ((?x12396 (* l_0_7_184 l_0_7_184)))
 (let ((?x10575 (* 12.0 l_0_7_18)))
 (let ((?x10725 (* ?x10575 l_0_7_9)))
 (let ((?x9389 (* 12.0 l_0_7_17)))
 (let ((?x10723 (* ?x9389 l_0_7_8)))
 (let ((?x12392 (* l_0_7_168 l_0_7_168)))
 (let ((?x12390 (* l_0_7_167 l_0_7_167)))
 (let ((?x12388 (* l_0_7_166 l_0_7_166)))
 (let ((?x12386 (* l_0_7_165 l_0_7_165)))
 (let ((?x12384 (* l_0_7_164 l_0_7_164)))
 (let ((?x12382 (* l_0_7_163 l_0_7_163)))
 (let ((?x9386 (* 12.0 l_0_7_16)))
 (let ((?x10719 (* ?x9386 l_0_7_7)))
 (let ((?x11425 (* 2.0 l_0_7_136)))
 (let ((?x11426 (* ?x11425 l_0_7_145)))
 (let ((?x11422 (* 2.0 l_0_7_135)))
 (let ((?x11423 (* ?x11422 l_0_7_144)))
 (let ((?x11419 (* 2.0 l_0_7_134)))
 (let ((?x11420 (* ?x11419 l_0_7_143)))
 (let ((?x11416 (* 2.0 l_0_7_133)))
 (let ((?x11417 (* ?x11416 l_0_7_142)))
 (let ((?x12375 (* l_0_7_126 l_0_7_126)))
 (let ((?x12373 (* l_0_7_125 l_0_7_125)))
 (let ((?x12371 (* l_0_7_124 l_0_7_124)))
 (let ((?x12369 (* l_0_7_123 l_0_7_123)))
 (let ((?x12367 (* l_0_7_122 l_0_7_122)))
 (let ((?x12365 (* l_0_7_121 l_0_7_121)))
 (let ((?x12363 (* l_0_7_105 l_0_7_105)))
 (let ((?x12361 (* l_0_7_104 l_0_7_104)))
 (let ((?x12359 (* l_0_7_103 l_0_7_103)))
 (let ((?x12357 (* l_0_7_102 l_0_7_102)))
 (let ((?x12355 (* l_0_7_101 l_0_7_101)))
 (let ((?x12356 (- (- (* (* 12.0 l_0_7_10) l_0_7_19) (* l_0_7_100 l_0_7_100)) ?x12355)))
 (let ((?x12370 (+ (+ (+ (- (- (- (- ?x12356 ?x12357) ?x12359) ?x12361) ?x12363) ?x12365) ?x12367) ?x12369)))
 (let ((?x12380 (+ (+ (+ (+ (+ (+ (+ ?x12370 ?x12371) ?x12373) ?x12375) ?x11417) ?x11420) ?x11423) ?x11426)))
 (let ((?x12393 (+ (+ (+ (+ (+ (+ (+ ?x12380 ?x10719) ?x12382) ?x12384) ?x12386) ?x12388) ?x12390) ?x12392)))
 (let ((?x12405 (- (- (- (- (- (+ (+ ?x12393 ?x10723) ?x10725) ?x12396) ?x12398) ?x12400) ?x12402) ?x12404)))
 (let ((?x12414 (- (- (- (- (- (- (- ?x12405 ?x12406) ?x10742) ?x10745) ?x10748) ?x10751) ?x10753) ?x12413)))
 (let ((?x12427 (+ (+ (+ (+ (- (- (- ?x12414 ?x12415) ?x12417) ?x12419) ?x10767) ?x12422) ?x12424) ?x12426)))
 (= (+ ?x12427 ?x12428) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12574 (* l_0_7_78 l_0_7_78)))
 (let ((?x12575 (* 3.0 ?x12574)))
 (let ((?x10981 (* (* 2.0 l_0_7_78) l_0_7_83)))
 (let ((?x12570 (* l_0_7_77 l_0_7_77)))
 (let ((?x12571 (* 3.0 ?x12570)))
 (let ((?x10978 (* (* 2.0 l_0_7_77) l_0_7_82)))
 (let ((?x12566 (* l_0_7_76 l_0_7_76)))
 (let ((?x12567 (* 3.0 ?x12566)))
 (let ((?x10975 (* (* 2.0 l_0_7_76) l_0_7_81)))
 (let ((?x12562 (* l_0_7_75 l_0_7_75)))
 (let ((?x12563 (* 3.0 ?x12562)))
 (let ((?x10972 (* (* 2.0 l_0_7_75) l_0_7_80)))
 (let ((?x12558 (* l_0_7_74 l_0_7_74)))
 (let ((?x12559 (* 3.0 ?x12558)))
 (let ((?x10969 (* (* 2.0 l_0_7_74) l_0_7_79)))
 (let ((?x12555 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x10963 (* (* 2.0 l_0_7_57) l_0_7_62)))
 (let ((?x12551 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x10960 (* (* 2.0 l_0_7_56) l_0_7_61)))
 (let ((?x12547 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x10957 (* (* 2.0 l_0_7_55) l_0_7_60)))
 (let ((?x12543 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x10954 (* (* 2.0 l_0_7_54) l_0_7_59)))
 (let ((?x10951 (* (* 2.0 l_0_7_53) l_0_7_58)))
 (let ((?x12535 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x12532 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x12529 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x12526 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x12523 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x10322 (* l_0_7_15 l_0_7_15)))
 (let ((?x12520 (* 6.0 ?x10322)))
 (let ((?x12518 (* l_0_7_141 l_0_7_141)))
 (let ((?x12516 (* l_0_7_140 l_0_7_140)))
 (let ((?x10320 (* l_0_7_14 l_0_7_14)))
 (let ((?x12514 (* 6.0 ?x10320)))
 (let ((?x12512 (* l_0_7_139 l_0_7_139)))
 (let ((?x12510 (* l_0_7_138 l_0_7_138)))
 (let ((?x12508 (* l_0_7_137 l_0_7_137)))
 (let ((?x10318 (* l_0_7_13 l_0_7_13)))
 (let ((?x12506 (* 6.0 ?x10318)))
 (let ((?x10316 (* l_0_7_12 l_0_7_12)))
 (let ((?x12504 (* 6.0 ?x10316)))
 (let ((?x10340 (* l_0_7_11 l_0_7_11)))
 (let ((?x12503 (* 6.0 ?x10340)))
 (let ((?x12507 (+ (+ ?x12503 ?x12504) ?x12506)))
 (let ((?x12521 (+ (+ (+ (+ (+ (+ (+ ?x12507 ?x12508) ?x12510) ?x12512) ?x12514) ?x12516) ?x12518) ?x12520)))
 (let ((?x12540 (- (+ (- (- (- (- (- ?x12521 ?x12523) ?x12526) ?x12529) ?x12532) ?x12535) ?x10951) (* (* 3.0 l_0_7_53) l_0_7_53))))
 (let ((?x12553 (+ (- (+ (- (+ (- (+ ?x12540 ?x10954) ?x12543) ?x10957) ?x12547) ?x10960) ?x12551) ?x10963)))
 (let ((?x12568 (+ (- (+ (- (+ (- (- ?x12553 ?x12555) ?x10969) ?x12559) ?x10972) ?x12563) ?x10975) ?x12567)))
 (= (+ (- (+ (- ?x12568 ?x10978) ?x12571) ?x10981) ?x12575) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11192 (* l_0_7_84 l_0_7_84)))
 (let ((?x11189 (* l_0_7_83 l_0_7_83)))
 (let ((?x11186 (* l_0_7_82 l_0_7_82)))
 (let ((?x11183 (* l_0_7_81 l_0_7_81)))
 (let ((?x11180 (* l_0_7_80 l_0_7_80)))
 (let ((?x11177 (* l_0_7_79 l_0_7_79)))
 (let ((?x12715 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x12712 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x12709 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x12706 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x12703 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x10965 (* ?x9410 l_0_7_74)))
 (let ((?x11275 (* l_0_7_63 l_0_7_63)))
 (let ((?x11271 (* l_0_7_62 l_0_7_62)))
 (let ((?x11267 (* l_0_7_61 l_0_7_61)))
 (let ((?x11263 (* l_0_7_60 l_0_7_60)))
 (let ((?x11259 (* l_0_7_59 l_0_7_59)))
 (let ((?x11255 (* l_0_7_58 l_0_7_58)))
 (let ((?x12693 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x12690 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x12687 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x12684 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x12681 (* (* 6.0 l_0_7_53) l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x10947 (* ?x9403 l_0_7_53)))
 (let ((?x10945 (* (* 12.0 l_0_7_36) l_0_7_41)))
 (let ((?x10942 (* (* 12.0 l_0_7_35) l_0_7_40)))
 (let ((?x10939 (* (* 12.0 l_0_7_34) l_0_7_39)))
 (let ((?x10936 (* (* 12.0 l_0_7_33) l_0_7_38)))
 (let ((?x10933 (* (* 12.0 l_0_7_32) l_0_7_37)))
 (let ((?x10913 (* (* 12.0 l_0_7_15) l_0_7_20)))
 (let ((?x11636 (* (* 2.0 l_0_7_141) l_0_7_146)))
 (let ((?x11633 (* (* 2.0 l_0_7_140) l_0_7_145)))
 (let ((?x10910 (* (* 12.0 l_0_7_14) l_0_7_19)))
 (let ((?x11630 (* (* 2.0 l_0_7_139) l_0_7_144)))
 (let ((?x11627 (* (* 2.0 l_0_7_138) l_0_7_143)))
 (let ((?x11624 (* (* 2.0 l_0_7_137) l_0_7_142)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x10907 (* ?x10906 l_0_7_18)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x10902 (* ?x9302 l_0_7_17)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x10900 (* ?x9299 l_0_7_16)))
 (let ((?x12671 (+ (+ (+ (+ (+ (+ (+ ?x10900 ?x10902) ?x10907) ?x11624) ?x11627) ?x11630) ?x10910) ?x11633)))
 (let ((?x12678 (- (- (- (- (- (+ (+ ?x12671 ?x11636) ?x10913) ?x10933) ?x10936) ?x10939) ?x10942) ?x10945)))
 (let ((?x12695 (+ (- (- (- (- (- (- ?x12678 ?x10947) ?x12681) ?x12684) ?x12687) ?x12690) ?x12693) ?x11255)))
 (let ((?x12704 (+ (+ (+ (+ (+ (+ (+ ?x12695 ?x11259) ?x11263) ?x11267) ?x11271) ?x11275) ?x10965) ?x12703)))
 (let ((?x12719 (- (- (- (+ (+ (+ (+ ?x12704 ?x12706) ?x12709) ?x12712) ?x12715) ?x11177) ?x11180) ?x11183)))
 (= (- (- (- ?x12719 ?x11186) ?x11189) ?x11192) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12843 (* l_0_7_85 l_0_7_85)))
 (let ((?x11192 (* l_0_7_84 l_0_7_84)))
 (let ((?x12841 (* 3.0 ?x11192)))
 (let ((?x11189 (* l_0_7_83 l_0_7_83)))
 (let ((?x12839 (* 3.0 ?x11189)))
 (let ((?x11186 (* l_0_7_82 l_0_7_82)))
 (let ((?x12837 (* 3.0 ?x11186)))
 (let ((?x11183 (* l_0_7_81 l_0_7_81)))
 (let ((?x12835 (* 3.0 ?x11183)))
 (let ((?x11180 (* l_0_7_80 l_0_7_80)))
 (let ((?x12833 (* 3.0 ?x11180)))
 (let ((?x11177 (* l_0_7_79 l_0_7_79)))
 (let ((?x12831 (* 3.0 ?x11177)))
 (let ((?x9410 (* 6.0 l_0_7_64)))
 (let ((?x11174 (* ?x9410 l_0_7_79)))
 (let ((?x12828 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12825 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12822 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12819 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12816 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x12813 (* (* 3.0 l_0_7_58) l_0_7_58)))
 (let ((?x9403 (* 6.0 l_0_7_43)))
 (let ((?x11153 (* ?x9403 l_0_7_58)))
 (let ((?x11151 (* (* 6.0 l_0_7_42) l_0_7_42)))
 (let ((?x11148 (* (* 6.0 l_0_7_41) l_0_7_41)))
 (let ((?x11145 (* (* 6.0 l_0_7_40) l_0_7_40)))
 (let ((?x11142 (* (* 6.0 l_0_7_39) l_0_7_39)))
 (let ((?x11139 (* (* 6.0 l_0_7_38) l_0_7_38)))
 (let ((?x11136 (* (* 6.0 l_0_7_37) l_0_7_37)))
 (let ((?x10489 (* l_0_7_21 l_0_7_21)))
 (let ((?x11130 (* 6.0 ?x10489)))
 (let ((?x10487 (* l_0_7_20 l_0_7_20)))
 (let ((?x11118 (* 6.0 ?x10487)))
 (let ((?x10485 (* l_0_7_19 l_0_7_19)))
 (let ((?x11116 (* 6.0 ?x10485)))
 (let ((?x10483 (* l_0_7_18 l_0_7_18)))
 (let ((?x11114 (* 6.0 ?x10483)))
 (let ((?x10481 (* l_0_7_17 l_0_7_17)))
 (let ((?x11112 (* 6.0 ?x10481)))
 (let ((?x12798 (* l_0_7_169 l_0_7_169)))
 (let ((?x10478 (* l_0_7_16 l_0_7_16)))
 (let ((?x11110 (* 6.0 ?x10478)))
 (let ((?x12795 (* l_0_7_148 l_0_7_148)))
 (let ((?x11773 (* l_0_7_147 l_0_7_147)))
 (let ((?x11771 (* l_0_7_146 l_0_7_146)))
 (let ((?x11769 (* l_0_7_145 l_0_7_145)))
 (let ((?x11767 (* l_0_7_144 l_0_7_144)))
 (let ((?x11765 (* l_0_7_143 l_0_7_143)))
 (let ((?x12790 (+ (+ (* (- l_0_7_106) l_0_7_106) (* l_0_7_142 l_0_7_142)) ?x11765)))
 (let ((?x12799 (+ (+ (- (+ (+ (+ (+ ?x12790 ?x11767) ?x11769) ?x11771) ?x11773) ?x12795) ?x11110) ?x12798)))
 (let ((?x12806 (- (- (+ (+ (+ (+ (+ ?x12799 ?x11112) ?x11114) ?x11116) ?x11118) ?x11130) ?x11136) ?x11139)))
 (let ((?x12817 (- (- (- (- (- (- (- ?x12806 ?x11142) ?x11145) ?x11148) ?x11151) ?x11153) ?x12813) ?x12816)))
 (let ((?x12834 (+ (+ (+ (- (- (- (- ?x12817 ?x12819) ?x12822) ?x12825) ?x12828) ?x11174) ?x12831) ?x12833)))
 (= (+ (+ (+ (+ (+ ?x12834 ?x12835) ?x12837) ?x12839) ?x12841) ?x12843) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12921 (* ?x8926 l_0_7_67)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12919 (* ?x8923 l_0_7_46)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10587 (* ?x8919 l_0_7_25)))
 (let ((?x12917 (- (- (* (* 12.0 l_0_7_1) l_0_7_4) (* l_0_7_127 l_0_7_127)) (* (* 2.0 l_0_7_190) l_0_7_193))))
 (= (+ (- (- ?x12917 ?x10587) ?x12919) ?x12921) 0.0)))))))))
(assert
 (let ((?x12843 (* l_0_7_85 l_0_7_85)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12952 (* ?x8926 l_0_7_70)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12950 (* ?x8923 l_0_7_49)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10739 (* ?x8919 l_0_7_28)))
 (let ((?x12798 (* l_0_7_169 l_0_7_169)))
 (let ((?x12795 (* l_0_7_148 l_0_7_148)))
 (let ((?x12941 (+ (+ (* (* 12.0 l_0_7_1) l_0_7_7) (* l_0_7_106 l_0_7_106)) ?x12795)))
 (let ((?x12951 (- (- (- (- ?x12941 ?x12798) (* (* 2.0 l_0_7_190) l_0_7_196)) ?x10739) ?x12950)))
 (= (- (+ ?x12951 ?x12952) ?x12843) 0.0)))))))))))))
(assert
 (let ((?x8889 (* l_0_7_64 l_0_7_64)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12983 (* ?x8926 l_0_7_74)))
 (let ((?x8903 (* l_0_7_43 l_0_7_43)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12980 (* ?x8923 l_0_7_53)))
 (let ((?x8919 (* 12.0 l_0_7_22)))
 (let ((?x10930 (* ?x8919 l_0_7_32)))
 (let ((?x8912 (* 12.0 l_0_7_1)))
 (let ((?x10899 (* ?x8912 l_0_7_11)))
 (let ((?x12982 (+ (- (- (- ?x10899 (* (* 2.0 l_0_7_190) l_0_7_200)) ?x10930) ?x12980) ?x8903)))
 (= (- (+ ?x12982 ?x12983) ?x8889) 0.0)))))))))))))
(assert
 (let ((?x9695 (* l_0_7_6 l_0_7_6)))
 (let ((?x11318 (* 6.0 ?x9695)))
 (let ((?x9693 (* l_0_7_5 l_0_7_5)))
 (let ((?x11316 (* 6.0 ?x9693)))
 (let ((?x9691 (* l_0_7_4 l_0_7_4)))
 (let ((?x11305 (* 6.0 ?x9691)))
 (let ((?x11303 (* (* 6.0 l_0_7_27) l_0_7_27)))
 (let ((?x11300 (* (* 6.0 l_0_7_26) l_0_7_26)))
 (let ((?x11297 (* (* 6.0 l_0_7_25) l_0_7_25)))
 (let ((?x13015 (* l_0_7_195 l_0_7_195)))
 (let ((?x13013 (* l_0_7_194 l_0_7_194)))
 (let ((?x13014 (- (- (* (* (- 2.0) l_0_7_127) l_0_7_130) (* l_0_7_193 l_0_7_193)) ?x13013)))
 (let ((?x13023 (- (+ (- (- (- (- ?x13014 ?x13015) ?x11297) ?x11300) ?x11303) ?x11305) (* (* 1.0 l_0_7_46) l_0_7_46))))
 (let ((?x13029 (- (- ?x13023 (* (* 1.0 l_0_7_47) l_0_7_47)) (* (* 1.0 l_0_7_48) l_0_7_48))))
 (let ((?x13035 (+ (+ (+ (+ ?x13029 ?x11316) ?x11318) (* 1.0 (* l_0_7_67 l_0_7_67))) (* 1.0 (* l_0_7_68 l_0_7_68)))))
 (= (+ ?x13035 (* 1.0 (* l_0_7_69 l_0_7_69))) 0.0)))))))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13099 (* ?x9216 l_0_7_88)))
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x13097 (* ?x10617 l_0_7_72)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x13095 (* ?x10614 l_0_7_71)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x13093 (* ?x10611 l_0_7_70)))
 (let ((?x11468 (* (* 12.0 l_0_7_6) l_0_7_9)))
 (let ((?x11465 (* (* 12.0 l_0_7_5) l_0_7_8)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x13089 (* ?x10606 l_0_7_51)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x13087 (* ?x10603 l_0_7_50)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x13085 (* ?x10600 l_0_7_49)))
 (let ((?x11453 (* (* 12.0 l_0_7_4) l_0_7_7)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x11450 (* ?x10595 l_0_7_30)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x11448 (* ?x10592 l_0_7_29)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x11446 (* ?x10589 l_0_7_28)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13073 (* ?x9191 l_0_7_172)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13071 (* ?x9188 l_0_7_151)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10715 (* ?x9086 l_0_7_133)))
 (let ((?x13076 (- (- (+ (- (* (* 2.0 l_0_7_106) l_0_7_109) ?x10715) ?x13071) ?x13073) (* (* 2.0 l_0_7_193) l_0_7_196))))
 (let ((?x13080 (- (- ?x13076 (* (* 2.0 l_0_7_194) l_0_7_197)) (* (* 2.0 l_0_7_195) l_0_7_198))))
 (let ((?x13090 (- (- (- (+ (- (- (- ?x13080 ?x11446) ?x11448) ?x11450) ?x11453) ?x13085) ?x13087) ?x13089)))
 (= (- (+ (+ (+ (+ (+ ?x13090 ?x11465) ?x11468) ?x13093) ?x13095) ?x13097) ?x13099) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x13199 (* ?x10617 l_0_7_76)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x13197 (* ?x10614 l_0_7_75)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x13195 (* ?x10611 l_0_7_74)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12921 (* ?x8926 l_0_7_67)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x13192 (* ?x10606 l_0_7_55)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x13190 (* ?x10603 l_0_7_54)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x13188 (* ?x10600 l_0_7_53)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12919 (* ?x8923 l_0_7_46)))
 (let ((?x10595 (* 12.0 l_0_7_27)))
 (let ((?x11642 (* ?x10595 l_0_7_34)))
 (let ((?x10592 (* 12.0 l_0_7_26)))
 (let ((?x11640 (* ?x10592 l_0_7_33)))
 (let ((?x10589 (* 12.0 l_0_7_25)))
 (let ((?x11638 (* ?x10589 l_0_7_32)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x11596 (* ?x10906 l_0_7_6)))
 (let ((?x9086 (* 2.0 l_0_7_127)))
 (let ((?x10904 (* ?x9086 l_0_7_137)))
 (let ((?x11594 (+ (* (* 12.0 l_0_7_11) l_0_7_4) (* (* 12.0 l_0_7_12) l_0_7_5))))
 (let ((?x13181 (- (- (+ (- ?x11594 ?x10904) ?x11596) (* (* 2.0 l_0_7_193) l_0_7_200)) (* (* 2.0 l_0_7_194) l_0_7_201))))
 (let ((?x13186 (- (- (- (- ?x13181 (* (* 2.0 l_0_7_195) l_0_7_202)) ?x11638) ?x11640) ?x11642)))
 (let ((?x13198 (+ (+ (- (- (- (- (+ ?x13186 ?x12919) ?x13188) ?x13190) ?x13192) ?x12921) ?x13195) ?x13197)))
 (= (+ ?x13198 ?x13199) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x10023 (* l_0_7_9 l_0_7_9)))
 (let ((?x11938 (* 6.0 ?x10023)))
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13297 (* ?x9216 l_0_7_91)))
 (let ((?x10017 (* l_0_7_8 l_0_7_8)))
 (let ((?x11936 (* 6.0 ?x10017)))
 (let ((?x10015 (* l_0_7_7 l_0_7_7)))
 (let ((?x11922 (* 6.0 ?x10015)))
 (let ((?x11908 (* (* 6.0 l_0_7_31) l_0_7_31)))
 (let ((?x11905 (* (* 6.0 l_0_7_30) l_0_7_30)))
 (let ((?x11902 (* (* 6.0 l_0_7_29) l_0_7_29)))
 (let ((?x11899 (* (* 6.0 l_0_7_28) l_0_7_28)))
 (let ((?x13269 (* l_0_7_199 l_0_7_199)))
 (let ((?x13267 (* l_0_7_198 l_0_7_198)))
 (let ((?x13265 (* l_0_7_197 l_0_7_197)))
 (let ((?x13263 (* l_0_7_196 l_0_7_196)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13261 (* ?x9191 l_0_7_175)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13259 (* ?x9188 l_0_7_154)))
 (let ((?x10027 (* l_0_7_10 l_0_7_10)))
 (let ((?x11844 (* 6.0 ?x10027)))
 (let ((?x13264 (- (- (+ (+ ?x11844 (* (* 2.0 l_0_7_106) l_0_7_112)) ?x13259) ?x13261) ?x13263)))
 (let ((?x13274 (- (- (- (- (- (- (- ?x13264 ?x13265) ?x13267) ?x13269) ?x11899) ?x11902) ?x11905) ?x11908)))
 (let ((?x13280 (- (- ?x13274 (* (* 1.0 l_0_7_49) l_0_7_49)) (* (* 1.0 l_0_7_50) l_0_7_50))))
 (let ((?x13286 (- (- ?x13280 (* (* 1.0 l_0_7_51) l_0_7_51)) (* (* 1.0 l_0_7_52) l_0_7_52))))
 (let ((?x13291 (+ (+ (+ ?x13286 ?x11922) (* 1.0 (* l_0_7_70 l_0_7_70))) (* 1.0 (* l_0_7_71 l_0_7_71)))))
 (let ((?x13295 (+ (+ ?x13291 (* 1.0 (* l_0_7_72 l_0_7_72))) (* 1.0 (* l_0_7_73 l_0_7_73)))))
 (= (+ (- (+ ?x13295 ?x11936) ?x13297) ?x11938) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13398 (* ?x9216 l_0_7_95)))
 (let ((?x10778 (* 2.0 l_0_7_73)))
 (let ((?x13396 (* ?x10778 l_0_7_77)))
 (let ((?x10775 (* 2.0 l_0_7_72)))
 (let ((?x13394 (* ?x10775 l_0_7_76)))
 (let ((?x10772 (* 2.0 l_0_7_71)))
 (let ((?x13392 (* ?x10772 l_0_7_75)))
 (let ((?x10769 (* 2.0 l_0_7_70)))
 (let ((?x13390 (* ?x10769 l_0_7_74)))
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12952 (* ?x8926 l_0_7_70)))
 (let ((?x10764 (* 2.0 l_0_7_52)))
 (let ((?x13387 (* ?x10764 l_0_7_56)))
 (let ((?x10761 (* 2.0 l_0_7_51)))
 (let ((?x13385 (* ?x10761 l_0_7_55)))
 (let ((?x10758 (* 2.0 l_0_7_50)))
 (let ((?x13383 (* ?x10758 l_0_7_54)))
 (let ((?x10755 (* 2.0 l_0_7_49)))
 (let ((?x13381 (* ?x10755 l_0_7_53)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12950 (* ?x8923 l_0_7_49)))
 (let ((?x10750 (* 12.0 l_0_7_31)))
 (let ((?x12149 (* ?x10750 l_0_7_35)))
 (let ((?x10747 (* 12.0 l_0_7_30)))
 (let ((?x12147 (* ?x10747 l_0_7_34)))
 (let ((?x10744 (* 12.0 l_0_7_29)))
 (let ((?x12145 (* ?x10744 l_0_7_33)))
 (let ((?x10741 (* 12.0 l_0_7_28)))
 (let ((?x12143 (* ?x10741 l_0_7_32)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13366 (* ?x9191 l_0_7_179)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13364 (* ?x9188 l_0_7_158)))
 (let ((?x10906 (* 12.0 l_0_7_13)))
 (let ((?x12103 (* ?x10906 l_0_7_9)))
 (let ((?x9302 (* 12.0 l_0_7_12)))
 (let ((?x12098 (* ?x9302 l_0_7_8)))
 (let ((?x9299 (* 12.0 l_0_7_11)))
 (let ((?x12084 (* ?x9299 l_0_7_7)))
 (let ((?x10708 (* 12.0 l_0_7_10)))
 (let ((?x12050 (* ?x10708 l_0_7_14)))
 (let ((?x13363 (+ (+ (+ (+ ?x12050 (* (* 2.0 l_0_7_106) l_0_7_116)) ?x12084) ?x12098) ?x12103)))
 (let ((?x13371 (- (- (- (+ ?x13363 ?x13364) ?x13366) (* (* 2.0 l_0_7_196) l_0_7_200)) (* (* 2.0 l_0_7_197) l_0_7_201))))
 (let ((?x13375 (- (- ?x13371 (* (* 2.0 l_0_7_198) l_0_7_202)) (* (* 2.0 l_0_7_199) l_0_7_203))))
 (let ((?x13384 (- (- (+ (- (- (- (- ?x13375 ?x12143) ?x12145) ?x12147) ?x12149) ?x12950) ?x13381) ?x13383)))
 (let ((?x13397 (+ (+ (+ (+ (- (- (- ?x13384 ?x13385) ?x13387) ?x12952) ?x13390) ?x13392) ?x13394) ?x13396)))
 (= (- ?x13397 ?x13398) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x8926 (* 2.0 l_0_7_64)))
 (let ((?x12983 (* ?x8926 l_0_7_74)))
 (let ((?x8923 (* 2.0 l_0_7_43)))
 (let ((?x12980 (* ?x8923 l_0_7_53)))
 (let ((?x12535 (* (* 6.0 l_0_7_36) l_0_7_36)))
 (let ((?x12532 (* (* 6.0 l_0_7_35) l_0_7_35)))
 (let ((?x12529 (* (* 6.0 l_0_7_34) l_0_7_34)))
 (let ((?x12526 (* (* 6.0 l_0_7_33) l_0_7_33)))
 (let ((?x12523 (* (* 6.0 l_0_7_32) l_0_7_32)))
 (let ((?x13491 (* l_0_7_204 l_0_7_204)))
 (let ((?x13489 (* l_0_7_203 l_0_7_203)))
 (let ((?x13487 (* l_0_7_202 l_0_7_202)))
 (let ((?x13485 (* l_0_7_201 l_0_7_201)))
 (let ((?x13483 (* l_0_7_200 l_0_7_200)))
 (let ((?x10322 (* l_0_7_15 l_0_7_15)))
 (let ((?x12520 (* 6.0 ?x10322)))
 (let ((?x10320 (* l_0_7_14 l_0_7_14)))
 (let ((?x12514 (* 6.0 ?x10320)))
 (let ((?x10318 (* l_0_7_13 l_0_7_13)))
 (let ((?x12506 (* 6.0 ?x10318)))
 (let ((?x10316 (* l_0_7_12 l_0_7_12)))
 (let ((?x12504 (* 6.0 ?x10316)))
 (let ((?x10340 (* l_0_7_11 l_0_7_11)))
 (let ((?x12503 (* 6.0 ?x10340)))
 (let ((?x12507 (+ (+ ?x12503 ?x12504) ?x12506)))
 (let ((?x13492 (- (- (- (- (- (+ (+ ?x12507 ?x12514) ?x12520) ?x13483) ?x13485) ?x13487) ?x13489) ?x13491)))
 (let ((?x13501 (- (+ (- (- (- (- (- ?x13492 ?x12523) ?x12526) ?x12529) ?x12532) ?x12535) ?x12980) (* (* 1.0 l_0_7_53) l_0_7_53))))
 (let ((?x13507 (- (- ?x13501 (* (* 1.0 l_0_7_54) l_0_7_54)) (* (* 1.0 l_0_7_55) l_0_7_55))))
 (let ((?x13513 (- (- ?x13507 (* (* 1.0 l_0_7_56) l_0_7_56)) (* (* 1.0 l_0_7_57) l_0_7_57))))
 (let ((?x13518 (+ (+ (- ?x13513 ?x12983) (* 1.0 (* l_0_7_74 l_0_7_74))) (* 1.0 (* l_0_7_75 l_0_7_75)))))
 (let ((?x13522 (+ (+ ?x13518 (* 1.0 (* l_0_7_76 l_0_7_76))) (* 1.0 (* l_0_7_77 l_0_7_77)))))
 (= (+ ?x13522 (* 1.0 (* l_0_7_78 l_0_7_78))) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x9044 (* l_0_7_66 l_0_7_66)))
 (let ((?x9645 (* 3.0 ?x9044)))
 (let ((?x9041 (* l_0_7_65 l_0_7_65)))
 (let ((?x9643 (* 3.0 ?x9041)))
 (let ((?x9641 (* (* 3.0 l_0_7_45) l_0_7_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_7_44) l_0_7_44) ?x9641) ?x9643) ?x9645) 0.0)))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x9932 (* ?x9931 l_0_7_68)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x9929 (* ?x9928 l_0_7_67)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x9926 (* ?x9925 l_0_7_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_7_44) l_0_7_46) ?x9926) ?x9929) ?x9932) 0.0))))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10230 (* ?x9931 l_0_7_71)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10228 (* ?x9928 l_0_7_70)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10226 (* ?x9925 l_0_7_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_7_44) l_0_7_49) ?x10226) ?x10228) ?x10230) 0.0))))))))
(assert
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10405 (* ?x9931 l_0_7_75)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10402 (* ?x9928 l_0_7_74)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10399 (* ?x9925 l_0_7_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_7_44) l_0_7_53) ?x10399) ?x10402) ?x10405) 0.0))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x9217 (* ?x9216 l_0_7_86)))
 (let ((?x9931 (* 6.0 l_0_7_66)))
 (let ((?x10513 (* ?x9931 l_0_7_80)))
 (let ((?x9928 (* 6.0 l_0_7_65)))
 (let ((?x10511 (* ?x9928 l_0_7_79)))
 (let ((?x9925 (* 6.0 l_0_7_45)))
 (let ((?x10508 (* ?x9925 l_0_7_59)))
 (let ((?x9922 (* 6.0 l_0_7_44)))
 (let ((?x10506 (* ?x9922 l_0_7_58)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x9192 (* ?x9191 l_0_7_170)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x9189 (* ?x9188 l_0_7_149)))
 (let ((?x13623 (- (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_107) ?x9189) ?x9192) ?x10506) ?x10508)))
 (= (+ (+ (+ ?x13623 ?x10511) ?x10513) ?x9217) 0.0)))))))))))))))))
(assert
 (let ((?x11326 (* l_0_7_69 l_0_7_69)))
 (let ((?x11327 (* 3.0 ?x11326)))
 (let ((?x11323 (* l_0_7_68 l_0_7_68)))
 (let ((?x11324 (* 3.0 ?x11323)))
 (let ((?x11320 (* l_0_7_67 l_0_7_67)))
 (let ((?x11321 (* 3.0 ?x11320)))
 (let ((?x11314 (* (* 3.0 l_0_7_48) l_0_7_48)))
 (let ((?x11311 (* (* 3.0 l_0_7_47) l_0_7_47)))
 (let ((?x13645 (+ (+ (- (- (* (* (- 3.0) l_0_7_46) l_0_7_46) ?x11311) ?x11314) ?x11321) ?x11324)))
 (= (+ ?x13645 ?x11327) 0.0)))))))))))
(assert
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11477 (* ?x11476 l_0_7_72)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11474 (* ?x11473 l_0_7_71)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11471 (* ?x11470 l_0_7_70)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11462 (* ?x11461 l_0_7_51)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11459 (* ?x11458 l_0_7_50)))
 (let ((?x13659 (+ (+ (- (- (* (* (- 6.0) l_0_7_46) l_0_7_49) ?x11459) ?x11462) ?x11471) ?x11474)))
 (= (+ ?x13659 ?x11477) 0.0)))))))))))))
(assert
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11659 (* ?x11476 l_0_7_76)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11656 (* ?x11473 l_0_7_75)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11653 (* ?x11470 l_0_7_74)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11650 (* ?x11461 l_0_7_55)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11647 (* ?x11458 l_0_7_54)))
 (let ((?x13675 (+ (+ (- (- (* (* (- 6.0) l_0_7_46) l_0_7_53) ?x11647) ?x11650) ?x11653) ?x11656)))
 (= (+ ?x13675 ?x11659) 0.0)))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13099 (* ?x9216 l_0_7_88)))
 (let ((?x11476 (* 6.0 l_0_7_69)))
 (let ((?x11793 (* ?x11476 l_0_7_81)))
 (let ((?x11473 (* 6.0 l_0_7_68)))
 (let ((?x11791 (* ?x11473 l_0_7_80)))
 (let ((?x11470 (* 6.0 l_0_7_67)))
 (let ((?x11789 (* ?x11470 l_0_7_79)))
 (let ((?x11461 (* 6.0 l_0_7_48)))
 (let ((?x11786 (* ?x11461 l_0_7_60)))
 (let ((?x11458 (* 6.0 l_0_7_47)))
 (let ((?x11784 (* ?x11458 l_0_7_59)))
 (let ((?x11455 (* 6.0 l_0_7_46)))
 (let ((?x11782 (* ?x11455 l_0_7_58)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13073 (* ?x9191 l_0_7_172)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13071 (* ?x9188 l_0_7_151)))
 (let ((?x13691 (- (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_109) ?x13071) ?x13073) ?x11782) ?x11784)))
 (= (+ (+ (+ (+ (- ?x13691 ?x11786) ?x11789) ?x11791) ?x11793) ?x13099) 0.0)))))))))))))))))))))
(assert
 (let ((?x11933 (* l_0_7_73 l_0_7_73)))
 (let ((?x11934 (* 3.0 ?x11933)))
 (let ((?x11930 (* l_0_7_72 l_0_7_72)))
 (let ((?x11931 (* 3.0 ?x11930)))
 (let ((?x11927 (* l_0_7_71 l_0_7_71)))
 (let ((?x11928 (* 3.0 ?x11927)))
 (let ((?x11924 (* l_0_7_70 l_0_7_70)))
 (let ((?x11925 (* 3.0 ?x11924)))
 (let ((?x11920 (* (* 3.0 l_0_7_52) l_0_7_52)))
 (let ((?x11917 (* (* 3.0 l_0_7_51) l_0_7_51)))
 (let ((?x11914 (* (* 3.0 l_0_7_50) l_0_7_50)))
 (let ((?x13718 (+ (- (- (- (* (* (- 3.0) l_0_7_49) l_0_7_49) ?x11914) ?x11917) ?x11920) ?x11925)))
 (= (+ (+ (+ ?x13718 ?x11928) ?x11931) ?x11934) 0.0))))))))))))))
(assert
 (let ((?x12179 (* 6.0 l_0_7_73)))
 (let ((?x12180 (* ?x12179 l_0_7_77)))
 (let ((?x12175 (* 6.0 l_0_7_72)))
 (let ((?x12176 (* ?x12175 l_0_7_76)))
 (let ((?x12171 (* 6.0 l_0_7_71)))
 (let ((?x12172 (* ?x12171 l_0_7_75)))
 (let ((?x12167 (* 6.0 l_0_7_70)))
 (let ((?x12168 (* ?x12167 l_0_7_74)))
 (let ((?x12163 (* 6.0 l_0_7_52)))
 (let ((?x12164 (* ?x12163 l_0_7_56)))
 (let ((?x12159 (* 6.0 l_0_7_51)))
 (let ((?x12160 (* ?x12159 l_0_7_55)))
 (let ((?x12155 (* 6.0 l_0_7_50)))
 (let ((?x12156 (* ?x12155 l_0_7_54)))
 (let ((?x13736 (+ (- (- (- (* (* (- 6.0) l_0_7_49) l_0_7_53) ?x12156) ?x12160) ?x12164) ?x12168)))
 (= (+ (+ (+ ?x13736 ?x12172) ?x12176) ?x12180) 0.0)))))))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13297 (* ?x9216 l_0_7_91)))
 (let ((?x12179 (* 6.0 l_0_7_73)))
 (let ((?x12428 (* ?x12179 l_0_7_82)))
 (let ((?x12175 (* 6.0 l_0_7_72)))
 (let ((?x12426 (* ?x12175 l_0_7_81)))
 (let ((?x12171 (* 6.0 l_0_7_71)))
 (let ((?x12424 (* ?x12171 l_0_7_80)))
 (let ((?x12167 (* 6.0 l_0_7_70)))
 (let ((?x12422 (* ?x12167 l_0_7_79)))
 (let ((?x12163 (* 6.0 l_0_7_52)))
 (let ((?x12419 (* ?x12163 l_0_7_61)))
 (let ((?x12159 (* 6.0 l_0_7_51)))
 (let ((?x12417 (* ?x12159 l_0_7_60)))
 (let ((?x12155 (* 6.0 l_0_7_50)))
 (let ((?x12415 (* ?x12155 l_0_7_59)))
 (let ((?x12151 (* 6.0 l_0_7_49)))
 (let ((?x12413 (* ?x12151 l_0_7_58)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13261 (* ?x9191 l_0_7_175)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13259 (* ?x9188 l_0_7_154)))
 (let ((?x13757 (- (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x13259) ?x13261) ?x12413) ?x12415)))
 (let ((?x13764 (+ (+ (+ (+ (+ (- (- ?x13757 ?x12417) ?x12419) ?x12422) ?x12424) ?x12426) ?x12428) ?x13297)))
 (= ?x13764 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12574 (* l_0_7_78 l_0_7_78)))
 (let ((?x12575 (* 3.0 ?x12574)))
 (let ((?x12570 (* l_0_7_77 l_0_7_77)))
 (let ((?x12571 (* 3.0 ?x12570)))
 (let ((?x12566 (* l_0_7_76 l_0_7_76)))
 (let ((?x12567 (* 3.0 ?x12566)))
 (let ((?x12562 (* l_0_7_75 l_0_7_75)))
 (let ((?x12563 (* 3.0 ?x12562)))
 (let ((?x12558 (* l_0_7_74 l_0_7_74)))
 (let ((?x12559 (* 3.0 ?x12558)))
 (let ((?x12555 (* (* 3.0 l_0_7_57) l_0_7_57)))
 (let ((?x12551 (* (* 3.0 l_0_7_56) l_0_7_56)))
 (let ((?x12547 (* (* 3.0 l_0_7_55) l_0_7_55)))
 (let ((?x12543 (* (* 3.0 l_0_7_54) l_0_7_54)))
 (let ((?x13789 (- (- (- (- (* (* (- 3.0) l_0_7_53) l_0_7_53) ?x12543) ?x12547) ?x12551) ?x12555)))
 (= (+ (+ (+ (+ (+ ?x13789 ?x12559) ?x12563) ?x12567) ?x12571) ?x12575) 0.0)))))))))))))))))
(assert
 (let ((?x9216 (* 2.0 l_0_7_85)))
 (let ((?x13398 (* ?x9216 l_0_7_95)))
 (let ((?x12715 (* (* 6.0 l_0_7_78) l_0_7_83)))
 (let ((?x12712 (* (* 6.0 l_0_7_77) l_0_7_82)))
 (let ((?x12709 (* (* 6.0 l_0_7_76) l_0_7_81)))
 (let ((?x12706 (* (* 6.0 l_0_7_75) l_0_7_80)))
 (let ((?x12703 (* (* 6.0 l_0_7_74) l_0_7_79)))
 (let ((?x12693 (* (* 6.0 l_0_7_57) l_0_7_62)))
 (let ((?x12690 (* (* 6.0 l_0_7_56) l_0_7_61)))
 (let ((?x12687 (* (* 6.0 l_0_7_55) l_0_7_60)))
 (let ((?x12684 (* (* 6.0 l_0_7_54) l_0_7_59)))
 (let ((?x12681 (* (* 6.0 l_0_7_53) l_0_7_58)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x13366 (* ?x9191 l_0_7_179)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x13364 (* ?x9188 l_0_7_158)))
 (let ((?x13810 (- (- (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_116) ?x13364) ?x13366) ?x12681) ?x12684)))
 (let ((?x13817 (+ (+ (+ (+ (- (- (- ?x13810 ?x12687) ?x12690) ?x12693) ?x12703) ?x12706) ?x12709) ?x12712)))
 (= (+ (+ ?x13817 ?x12715) ?x13398) 0.0))))))))))))))))))))
(assert
 (let ((?x11192 (* l_0_7_84 l_0_7_84)))
 (let ((?x12841 (* 3.0 ?x11192)))
 (let ((?x11189 (* l_0_7_83 l_0_7_83)))
 (let ((?x12839 (* 3.0 ?x11189)))
 (let ((?x11186 (* l_0_7_82 l_0_7_82)))
 (let ((?x12837 (* 3.0 ?x11186)))
 (let ((?x11183 (* l_0_7_81 l_0_7_81)))
 (let ((?x12835 (* 3.0 ?x11183)))
 (let ((?x11180 (* l_0_7_80 l_0_7_80)))
 (let ((?x12833 (* 3.0 ?x11180)))
 (let ((?x11177 (* l_0_7_79 l_0_7_79)))
 (let ((?x12831 (* 3.0 ?x11177)))
 (let ((?x12828 (* (* 3.0 l_0_7_63) l_0_7_63)))
 (let ((?x12825 (* (* 3.0 l_0_7_62) l_0_7_62)))
 (let ((?x12822 (* (* 3.0 l_0_7_61) l_0_7_61)))
 (let ((?x12819 (* (* 3.0 l_0_7_60) l_0_7_60)))
 (let ((?x12816 (* (* 3.0 l_0_7_59) l_0_7_59)))
 (let ((?x12813 (* (* 3.0 l_0_7_58) l_0_7_58)))
 (let ((?x9191 (* 2.0 l_0_7_169)))
 (let ((?x10721 (* ?x9191 l_0_7_184)))
 (let ((?x9188 (* 2.0 l_0_7_148)))
 (let ((?x10717 (* ?x9188 l_0_7_163)))
 (let ((?x9177 (* 2.0 l_0_7_106)))
 (let ((?x10713 (* ?x9177 l_0_7_121)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x10711 (* ?x10186 l_0_7_85)))
 (let ((?x13850 (- (- (- (- (+ (- (- ?x10711 ?x10713) ?x10717) ?x10721) ?x12813) ?x12816) ?x12819) ?x12822)))
 (let ((?x13857 (+ (+ (+ (+ (+ (- (- ?x13850 ?x12825) ?x12828) ?x12831) ?x12833) ?x12835) ?x12837) ?x12839)))
 (= (+ ?x13857 ?x12841) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11326 (* l_0_7_69 l_0_7_69)))
 (let ((?x11323 (* l_0_7_68 l_0_7_68)))
 (let ((?x11320 (* l_0_7_67 l_0_7_67)))
 (let ((?x11375 (* l_0_7_48 l_0_7_48)))
 (let ((?x11369 (* l_0_7_47 l_0_7_47)))
 (let ((?x11363 (* l_0_7_46 l_0_7_46)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11621 (* ?x11291 l_0_7_139)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11619 (* ?x11286 l_0_7_138)))
 (let ((?x13887 (+ (+ (- (- (* (* (- 2.0) l_0_7_130) l_0_7_137) ?x11619) ?x11621) ?x11363) ?x11369)))
 (= (- (- (- (+ ?x13887 ?x11375) ?x11320) ?x11323) ?x11326) 0.0)))))))))))))
(assert
 (let ((?x13944 (* 2.0 l_0_7_90)))
 (let ((?x13945 (* ?x13944 l_0_7_97)))
 (let ((?x13941 (* 2.0 l_0_7_89)))
 (let ((?x13942 (* ?x13941 l_0_7_96)))
 (let ((?x13938 (* 2.0 l_0_7_88)))
 (let ((?x13939 (* ?x13938 l_0_7_95)))
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x13097 (* ?x10617 l_0_7_72)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x13095 (* ?x10614 l_0_7_71)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x13093 (* ?x10611 l_0_7_70)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x13089 (* ?x10606 l_0_7_51)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x13087 (* ?x10603 l_0_7_50)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x13085 (* ?x10600 l_0_7_49)))
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x13930 (* ?x11443 l_0_7_181)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x13928 (* ?x11440 l_0_7_180)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x13926 (* ?x11437 l_0_7_179)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x13924 (* ?x11434 l_0_7_160)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x13922 (* ?x11431 l_0_7_159)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x13920 (* ?x11428 l_0_7_158)))
 (let ((?x11425 (* 2.0 l_0_7_136)))
 (let ((?x12111 (* ?x11425 l_0_7_140)))
 (let ((?x11422 (* 2.0 l_0_7_135)))
 (let ((?x12109 (* ?x11422 l_0_7_139)))
 (let ((?x11419 (* 2.0 l_0_7_134)))
 (let ((?x12107 (* ?x11419 l_0_7_138)))
 (let ((?x11416 (* 2.0 l_0_7_133)))
 (let ((?x12105 (* ?x11416 l_0_7_137)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x13914 (* ?x11406 l_0_7_118)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x13912 (* ?x11403 l_0_7_117)))
 (let ((?x13917 (- (- (+ (+ (* (* 2.0 l_0_7_109) l_0_7_116) ?x13912) ?x13914) ?x12105) ?x12107)))
 (let ((?x13929 (- (- (+ (+ (+ (- (- ?x13917 ?x12109) ?x12111) ?x13920) ?x13922) ?x13924) ?x13926) ?x13928)))
 (let ((?x13937 (- (- (- (+ (+ (+ (- ?x13929 ?x13930) ?x13085) ?x13087) ?x13089) ?x13093) ?x13095) ?x13097)))
 (= (- (- (- ?x13937 ?x13939) ?x13942) ?x13945) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x10617 (* 2.0 l_0_7_69)))
 (let ((?x13199 (* ?x10617 l_0_7_76)))
 (let ((?x10614 (* 2.0 l_0_7_68)))
 (let ((?x13197 (* ?x10614 l_0_7_75)))
 (let ((?x10611 (* 2.0 l_0_7_67)))
 (let ((?x13195 (* ?x10611 l_0_7_74)))
 (let ((?x10606 (* 2.0 l_0_7_48)))
 (let ((?x13192 (* ?x10606 l_0_7_55)))
 (let ((?x10603 (* 2.0 l_0_7_47)))
 (let ((?x13190 (* ?x10603 l_0_7_54)))
 (let ((?x10600 (* 2.0 l_0_7_46)))
 (let ((?x13188 (* ?x10600 l_0_7_53)))
 (let ((?x12518 (* l_0_7_141 l_0_7_141)))
 (let ((?x12516 (* l_0_7_140 l_0_7_140)))
 (let ((?x12512 (* l_0_7_139 l_0_7_139)))
 (let ((?x14028 (- (- (* (- l_0_7_137) l_0_7_137) (* l_0_7_138 l_0_7_138)) ?x12512)))
 (let ((?x14035 (- (- (+ (+ (+ (- (- ?x14028 ?x12516) ?x12518) ?x13188) ?x13190) ?x13192) ?x13195) ?x13197)))
 (= (- ?x14035 ?x13199) 0.0)))))))))))))))))))
(assert
 (let ((?x14106 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x14103 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x14100 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x14097 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x11933 (* l_0_7_73 l_0_7_73)))
 (let ((?x11930 (* l_0_7_72 l_0_7_72)))
 (let ((?x11927 (* l_0_7_71 l_0_7_71)))
 (let ((?x11924 (* l_0_7_70 l_0_7_70)))
 (let ((?x12044 (* l_0_7_52 l_0_7_52)))
 (let ((?x12038 (* l_0_7_51 l_0_7_51)))
 (let ((?x12032 (* l_0_7_50 l_0_7_50)))
 (let ((?x12026 (* l_0_7_49 l_0_7_49)))
 (let ((?x11895 (* 2.0 l_0_7_178)))
 (let ((?x14086 (* ?x11895 l_0_7_182)))
 (let ((?x11892 (* 2.0 l_0_7_177)))
 (let ((?x14084 (* ?x11892 l_0_7_181)))
 (let ((?x11889 (* 2.0 l_0_7_176)))
 (let ((?x14082 (* ?x11889 l_0_7_180)))
 (let ((?x11886 (* 2.0 l_0_7_175)))
 (let ((?x14080 (* ?x11886 l_0_7_179)))
 (let ((?x11883 (* 2.0 l_0_7_157)))
 (let ((?x14078 (* ?x11883 l_0_7_161)))
 (let ((?x11880 (* 2.0 l_0_7_156)))
 (let ((?x14076 (* ?x11880 l_0_7_160)))
 (let ((?x11877 (* 2.0 l_0_7_155)))
 (let ((?x14074 (* ?x11877 l_0_7_159)))
 (let ((?x11874 (* 2.0 l_0_7_154)))
 (let ((?x14072 (* ?x11874 l_0_7_158)))
 (let ((?x11863 (* 2.0 l_0_7_115)))
 (let ((?x14070 (* ?x11863 l_0_7_119)))
 (let ((?x11860 (* 2.0 l_0_7_114)))
 (let ((?x14068 (* ?x11860 l_0_7_118)))
 (let ((?x11857 (* 2.0 l_0_7_113)))
 (let ((?x14066 (* ?x11857 l_0_7_117)))
 (let ((?x14073 (+ (+ (+ (+ (* (* 2.0 l_0_7_112) l_0_7_116) ?x14066) ?x14068) ?x14070) ?x14072)))
 (let ((?x14087 (- (- (- (- (+ (+ (+ ?x14073 ?x14074) ?x14076) ?x14078) ?x14080) ?x14082) ?x14084) ?x14086)))
 (let ((?x14094 (- (- (- (+ (+ (+ (+ ?x14087 ?x12026) ?x12032) ?x12038) ?x12044) ?x11924) ?x11927) ?x11930)))
 (= (- (- (- (- (- ?x14094 ?x11933) ?x14097) ?x14100) ?x14103) ?x14106) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14238 (* l_0_7_99 l_0_7_99)))
 (let ((?x14236 (* l_0_7_98 l_0_7_98)))
 (let ((?x14234 (* l_0_7_97 l_0_7_97)))
 (let ((?x14232 (* l_0_7_96 l_0_7_96)))
 (let ((?x14230 (* l_0_7_95 l_0_7_95)))
 (let ((?x10778 (* 2.0 l_0_7_73)))
 (let ((?x13396 (* ?x10778 l_0_7_77)))
 (let ((?x10775 (* 2.0 l_0_7_72)))
 (let ((?x13394 (* ?x10775 l_0_7_76)))
 (let ((?x10772 (* 2.0 l_0_7_71)))
 (let ((?x13392 (* ?x10772 l_0_7_75)))
 (let ((?x10769 (* 2.0 l_0_7_70)))
 (let ((?x13390 (* ?x10769 l_0_7_74)))
 (let ((?x10764 (* 2.0 l_0_7_52)))
 (let ((?x13387 (* ?x10764 l_0_7_56)))
 (let ((?x10761 (* 2.0 l_0_7_51)))
 (let ((?x13385 (* ?x10761 l_0_7_55)))
 (let ((?x10758 (* 2.0 l_0_7_50)))
 (let ((?x13383 (* ?x10758 l_0_7_54)))
 (let ((?x10755 (* 2.0 l_0_7_49)))
 (let ((?x13381 (* ?x10755 l_0_7_53)))
 (let ((?x14220 (* l_0_7_183 l_0_7_183)))
 (let ((?x14218 (* l_0_7_182 l_0_7_182)))
 (let ((?x14216 (* l_0_7_181 l_0_7_181)))
 (let ((?x14214 (* l_0_7_180 l_0_7_180)))
 (let ((?x14212 (* l_0_7_179 l_0_7_179)))
 (let ((?x14210 (* l_0_7_162 l_0_7_162)))
 (let ((?x14208 (* l_0_7_161 l_0_7_161)))
 (let ((?x14206 (* l_0_7_160 l_0_7_160)))
 (let ((?x14204 (* l_0_7_159 l_0_7_159)))
 (let ((?x14202 (* l_0_7_158 l_0_7_158)))
 (let ((?x14200 (* l_0_7_120 l_0_7_120)))
 (let ((?x14198 (* l_0_7_119 l_0_7_119)))
 (let ((?x14196 (* l_0_7_118 l_0_7_118)))
 (let ((?x14199 (+ (+ (+ (* l_0_7_116 l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14196) ?x14198)))
 (let ((?x14213 (- (+ (+ (+ (+ (+ (+ ?x14199 ?x14200) ?x14202) ?x14204) ?x14206) ?x14208) ?x14210) ?x14212)))
 (let ((?x14224 (+ (+ (+ (- (- (- (- ?x14213 ?x14214) ?x14216) ?x14218) ?x14220) ?x13381) ?x13383) ?x13385)))
 (let ((?x14233 (- (- (- (- (- (- (+ ?x14224 ?x13387) ?x13390) ?x13392) ?x13394) ?x13396) ?x14230) ?x14232)))
 (= (- (- (- ?x14233 ?x14234) ?x14236) ?x14238) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12574 (* l_0_7_78 l_0_7_78)))
 (let ((?x12570 (* l_0_7_77 l_0_7_77)))
 (let ((?x12566 (* l_0_7_76 l_0_7_76)))
 (let ((?x12562 (* l_0_7_75 l_0_7_75)))
 (let ((?x12558 (* l_0_7_74 l_0_7_74)))
 (let ((?x12633 (* l_0_7_57 l_0_7_57)))
 (let ((?x12626 (* l_0_7_56 l_0_7_56)))
 (let ((?x12619 (* l_0_7_55 l_0_7_55)))
 (let ((?x14292 (+ (+ (+ (* l_0_7_53 l_0_7_53) (* l_0_7_54 l_0_7_54)) ?x12619) ?x12626)))
 (= (- (- (- (- (- (+ ?x14292 ?x12633) ?x12558) ?x12562) ?x12566) ?x12570) ?x12574) 0.0)))))))))))
(assert
 (let ((?x14342 (* l_0_7_90 l_0_7_90)))
 (let ((?x14340 (* l_0_7_89 l_0_7_89)))
 (let ((?x14338 (* l_0_7_88 l_0_7_88)))
 (let ((?x14336 (* l_0_7_174 l_0_7_174)))
 (let ((?x14334 (* l_0_7_173 l_0_7_173)))
 (let ((?x14332 (* l_0_7_172 l_0_7_172)))
 (let ((?x14330 (* l_0_7_153 l_0_7_153)))
 (let ((?x14328 (* l_0_7_152 l_0_7_152)))
 (let ((?x14326 (* l_0_7_151 l_0_7_151)))
 (let ((?x11291 (* 2.0 l_0_7_132)))
 (let ((?x11414 (* ?x11291 l_0_7_135)))
 (let ((?x11286 (* 2.0 l_0_7_131)))
 (let ((?x11412 (* ?x11286 l_0_7_134)))
 (let ((?x11409 (* 2.0 l_0_7_130)))
 (let ((?x11410 (* ?x11409 l_0_7_133)))
 (let ((?x14321 (* l_0_7_111 l_0_7_111)))
 (let ((?x14323 (- (+ (+ (* l_0_7_109 l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x14321) ?x11410)))
 (let ((?x14335 (- (- (+ (+ (+ (- (- ?x14323 ?x11412) ?x11414) ?x14326) ?x14328) ?x14330) ?x14332) ?x14334)))
 (= (- (- (- (- ?x14335 ?x14336) ?x14338) ?x14340) ?x14342) 0.0))))))))))))))))))))
(assert
 (let ((?x13944 (* 2.0 l_0_7_90)))
 (let ((?x14407 (* ?x13944 l_0_7_93)))
 (let ((?x13941 (* 2.0 l_0_7_89)))
 (let ((?x14405 (* ?x13941 l_0_7_92)))
 (let ((?x13938 (* 2.0 l_0_7_88)))
 (let ((?x14403 (* ?x13938 l_0_7_91)))
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x14401 (* ?x11443 l_0_7_177)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x14399 (* ?x11440 l_0_7_176)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x14397 (* ?x11437 l_0_7_175)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x14395 (* ?x11434 l_0_7_156)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x14393 (* ?x11431 l_0_7_155)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x14391 (* ?x11428 l_0_7_154)))
 (let ((?x11872 (* l_0_7_136 l_0_7_136)))
 (let ((?x11870 (* l_0_7_135 l_0_7_135)))
 (let ((?x11868 (* l_0_7_134 l_0_7_134)))
 (let ((?x11866 (* l_0_7_133 l_0_7_133)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x14385 (* ?x11406 l_0_7_114)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x14383 (* ?x11403 l_0_7_113)))
 (let ((?x14388 (- (- (+ (+ (* (* 2.0 l_0_7_109) l_0_7_112) ?x14383) ?x14385) ?x11866) ?x11868)))
 (let ((?x14400 (- (- (+ (+ (+ (- (- ?x14388 ?x11870) ?x11872) ?x14391) ?x14393) ?x14395) ?x14397) ?x14399)))
 (= (- (- (- (- ?x14400 ?x14401) ?x14403) ?x14405) ?x14407) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x14505 (* l_0_7_94 l_0_7_94)))
 (let ((?x14503 (* l_0_7_93 l_0_7_93)))
 (let ((?x14501 (* l_0_7_92 l_0_7_92)))
 (let ((?x14499 (* l_0_7_91 l_0_7_91)))
 (let ((?x14497 (* l_0_7_178 l_0_7_178)))
 (let ((?x14495 (* l_0_7_177 l_0_7_177)))
 (let ((?x14493 (* l_0_7_176 l_0_7_176)))
 (let ((?x14491 (* l_0_7_175 l_0_7_175)))
 (let ((?x14489 (* l_0_7_157 l_0_7_157)))
 (let ((?x14487 (* l_0_7_156 l_0_7_156)))
 (let ((?x14485 (* l_0_7_155 l_0_7_155)))
 (let ((?x14483 (* l_0_7_154 l_0_7_154)))
 (let ((?x14481 (* l_0_7_115 l_0_7_115)))
 (let ((?x14479 (* l_0_7_114 l_0_7_114)))
 (let ((?x14482 (+ (+ (+ (* l_0_7_112 l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x14479) ?x14481)))
 (let ((?x14496 (- (- (- (+ (+ (+ (+ ?x14482 ?x14483) ?x14485) ?x14487) ?x14489) ?x14491) ?x14493) ?x14495)))
 (= (- (- (- (- (- ?x14496 ?x14497) ?x14499) ?x14501) ?x14503) ?x14505) 0.0))))))))))))))))))
(assert
 (let ((?x9553 (* l_0_7_87 l_0_7_87)))
 (let ((?x9551 (* l_0_7_86 l_0_7_86)))
 (let ((?x9541 (* l_0_7_171 l_0_7_171)))
 (let ((?x9539 (* l_0_7_170 l_0_7_170)))
 (let ((?x9537 (* l_0_7_150 l_0_7_150)))
 (let ((?x9535 (* l_0_7_149 l_0_7_149)))
 (let ((?x14537 (- (- (* (- l_0_7_107) l_0_7_107) (* l_0_7_108 l_0_7_108)) ?x9535)))
 (= (+ (+ (+ (+ (- ?x14537 ?x9537) ?x9539) ?x9541) ?x9551) ?x9553) 0.0)))))))))
(assert
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x9761 (* ?x9760 l_0_7_89)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x9758 (* ?x9757 l_0_7_88)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x9737 (* ?x9736 l_0_7_173)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x9734 (* ?x9733 l_0_7_172)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x9731 (* ?x9730 l_0_7_152)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x9728 (* ?x9727 l_0_7_151)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x9720 (* ?x9719 l_0_7_110)))
 (let ((?x14557 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_109) ?x9720) ?x9728) ?x9731) ?x9734)))
 (= (+ (+ (+ ?x14557 ?x9737) ?x9758) ?x9761) 0.0)))))))))))))))))
(assert
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x10021 (* ?x9760 l_0_7_92)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x10019 (* ?x9757 l_0_7_91)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10005 (* ?x9736 l_0_7_176)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10003 (* ?x9733 l_0_7_175)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10001 (* ?x9730 l_0_7_155)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x9999 (* ?x9727 l_0_7_154)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x9997 (* ?x9719 l_0_7_113)))
 (let ((?x14581 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_112) ?x9997) ?x9999) ?x10001) ?x10003)))
 (= (+ (+ (+ ?x14581 ?x10005) ?x10019) ?x10021) 0.0)))))))))))))))))
(assert
 (let ((?x9760 (* 2.0 l_0_7_87)))
 (let ((?x10112 (* ?x9760 l_0_7_96)))
 (let ((?x9757 (* 2.0 l_0_7_86)))
 (let ((?x10110 (* ?x9757 l_0_7_95)))
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10092 (* ?x9736 l_0_7_180)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10090 (* ?x9733 l_0_7_179)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10088 (* ?x9730 l_0_7_159)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x10086 (* ?x9727 l_0_7_158)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x10077 (* ?x9719 l_0_7_117)))
 (let ((?x14605 (+ (- (- (- (* (* (- 2.0) l_0_7_107) l_0_7_116) ?x10077) ?x10086) ?x10088) ?x10090)))
 (= (+ (+ (+ ?x14605 ?x10092) ?x10110) ?x10112) 0.0)))))))))))))))))
(assert
 (let ((?x9736 (* 2.0 l_0_7_171)))
 (let ((?x10208 (* ?x9736 l_0_7_185)))
 (let ((?x9733 (* 2.0 l_0_7_170)))
 (let ((?x10206 (* ?x9733 l_0_7_184)))
 (let ((?x9730 (* 2.0 l_0_7_150)))
 (let ((?x10200 (* ?x9730 l_0_7_164)))
 (let ((?x9727 (* 2.0 l_0_7_149)))
 (let ((?x10198 (* ?x9727 l_0_7_163)))
 (let ((?x9719 (* 2.0 l_0_7_108)))
 (let ((?x10194 (* ?x9719 l_0_7_122)))
 (let ((?x9717 (* 2.0 l_0_7_107)))
 (let ((?x10192 (* ?x9717 l_0_7_121)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x10190 (* ?x10189 l_0_7_87)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x10187 (* ?x10186 l_0_7_86)))
 (let ((?x14631 (+ (+ (- (- (- (- (+ ?x10187 ?x10190) ?x10192) ?x10194) ?x10198) ?x10200) ?x10206) ?x10208)))
 (= ?x14631 0.0)))))))))))))))))))
(assert
 (let ((?x14342 (* l_0_7_90 l_0_7_90)))
 (let ((?x14340 (* l_0_7_89 l_0_7_89)))
 (let ((?x14338 (* l_0_7_88 l_0_7_88)))
 (let ((?x14336 (* l_0_7_174 l_0_7_174)))
 (let ((?x14334 (* l_0_7_173 l_0_7_173)))
 (let ((?x14332 (* l_0_7_172 l_0_7_172)))
 (let ((?x14330 (* l_0_7_153 l_0_7_153)))
 (let ((?x14328 (* l_0_7_152 l_0_7_152)))
 (let ((?x14326 (* l_0_7_151 l_0_7_151)))
 (let ((?x14321 (* l_0_7_111 l_0_7_111)))
 (let ((?x14655 (- (- (* (- l_0_7_109) l_0_7_109) (* l_0_7_110 l_0_7_110)) ?x14321)))
 (let ((?x14662 (+ (+ (+ (+ (- (- (- ?x14655 ?x14326) ?x14328) ?x14330) ?x14332) ?x14334) ?x14336) ?x14338)))
 (= (+ (+ ?x14662 ?x14340) ?x14342) 0.0))))))))))))))
(assert
 (let ((?x13944 (* 2.0 l_0_7_90)))
 (let ((?x14407 (* ?x13944 l_0_7_93)))
 (let ((?x13941 (* 2.0 l_0_7_89)))
 (let ((?x14405 (* ?x13941 l_0_7_92)))
 (let ((?x13938 (* 2.0 l_0_7_88)))
 (let ((?x14403 (* ?x13938 l_0_7_91)))
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x14401 (* ?x11443 l_0_7_177)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x14399 (* ?x11440 l_0_7_176)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x14397 (* ?x11437 l_0_7_175)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x14395 (* ?x11434 l_0_7_156)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x14393 (* ?x11431 l_0_7_155)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x14391 (* ?x11428 l_0_7_154)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x14385 (* ?x11406 l_0_7_114)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x14383 (* ?x11403 l_0_7_113)))
 (let ((?x14683 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_112) ?x14383) ?x14385) ?x14391) ?x14393)))
 (let ((?x14690 (+ (+ (+ (+ (+ (+ (- ?x14683 ?x14395) ?x14397) ?x14399) ?x14401) ?x14403) ?x14405) ?x14407)))
 (= ?x14690 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13944 (* 2.0 l_0_7_90)))
 (let ((?x13945 (* ?x13944 l_0_7_97)))
 (let ((?x13941 (* 2.0 l_0_7_89)))
 (let ((?x13942 (* ?x13941 l_0_7_96)))
 (let ((?x13938 (* 2.0 l_0_7_88)))
 (let ((?x13939 (* ?x13938 l_0_7_95)))
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x13930 (* ?x11443 l_0_7_181)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x13928 (* ?x11440 l_0_7_180)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x13926 (* ?x11437 l_0_7_179)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x13924 (* ?x11434 l_0_7_160)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x13922 (* ?x11431 l_0_7_159)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x13920 (* ?x11428 l_0_7_158)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x13914 (* ?x11406 l_0_7_118)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x13912 (* ?x11403 l_0_7_117)))
 (let ((?x14713 (- (- (- (- (* (* (- 2.0) l_0_7_109) l_0_7_116) ?x13912) ?x13914) ?x13920) ?x13922)))
 (let ((?x14720 (+ (+ (+ (+ (+ (+ (- ?x14713 ?x13924) ?x13926) ?x13928) ?x13930) ?x13939) ?x13942) ?x13945)))
 (= ?x14720 0.0))))))))))))))))))))))))))
(assert
 (let ((?x11443 (* 2.0 l_0_7_174)))
 (let ((?x11444 (* ?x11443 l_0_7_186)))
 (let ((?x11440 (* 2.0 l_0_7_173)))
 (let ((?x11441 (* ?x11440 l_0_7_185)))
 (let ((?x11437 (* 2.0 l_0_7_172)))
 (let ((?x11438 (* ?x11437 l_0_7_184)))
 (let ((?x11434 (* 2.0 l_0_7_153)))
 (let ((?x11435 (* ?x11434 l_0_7_165)))
 (let ((?x11431 (* 2.0 l_0_7_152)))
 (let ((?x11432 (* ?x11431 l_0_7_164)))
 (let ((?x11428 (* 2.0 l_0_7_151)))
 (let ((?x11429 (* ?x11428 l_0_7_163)))
 (let ((?x11406 (* 2.0 l_0_7_111)))
 (let ((?x11407 (* ?x11406 l_0_7_123)))
 (let ((?x11403 (* 2.0 l_0_7_110)))
 (let ((?x11404 (* ?x11403 l_0_7_122)))
 (let ((?x11400 (* 2.0 l_0_7_109)))
 (let ((?x11401 (* ?x11400 l_0_7_121)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x11398 (* ?x11397 l_0_7_90)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x11395 (* ?x10189 l_0_7_89)))
 (let ((?x14749 (- (- (+ (+ (* (* 2.0 l_0_7_100) l_0_7_88) ?x11395) ?x11398) ?x11401) ?x11404)))
 (let ((?x14756 (+ (+ (+ (- (- (- (- ?x14749 ?x11407) ?x11429) ?x11432) ?x11435) ?x11438) ?x11441) ?x11444)))
 (= ?x14756 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14505 (* l_0_7_94 l_0_7_94)))
 (let ((?x14503 (* l_0_7_93 l_0_7_93)))
 (let ((?x14501 (* l_0_7_92 l_0_7_92)))
 (let ((?x14499 (* l_0_7_91 l_0_7_91)))
 (let ((?x14497 (* l_0_7_178 l_0_7_178)))
 (let ((?x14495 (* l_0_7_177 l_0_7_177)))
 (let ((?x14493 (* l_0_7_176 l_0_7_176)))
 (let ((?x14491 (* l_0_7_175 l_0_7_175)))
 (let ((?x14489 (* l_0_7_157 l_0_7_157)))
 (let ((?x14487 (* l_0_7_156 l_0_7_156)))
 (let ((?x14485 (* l_0_7_155 l_0_7_155)))
 (let ((?x14483 (* l_0_7_154 l_0_7_154)))
 (let ((?x14481 (* l_0_7_115 l_0_7_115)))
 (let ((?x14479 (* l_0_7_114 l_0_7_114)))
 (let ((?x14782 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x14479)))
 (let ((?x14789 (+ (+ (- (- (- (- (- ?x14782 ?x14481) ?x14483) ?x14485) ?x14487) ?x14489) ?x14491) ?x14493)))
 (= (+ (+ (+ (+ (+ (+ ?x14789 ?x14495) ?x14497) ?x14499) ?x14501) ?x14503) ?x14505) 0.0))))))))))))))))))
(assert
 (let ((?x14106 (* (* 2.0 l_0_7_94) l_0_7_98)))
 (let ((?x14103 (* (* 2.0 l_0_7_93) l_0_7_97)))
 (let ((?x14100 (* (* 2.0 l_0_7_92) l_0_7_96)))
 (let ((?x14097 (* (* 2.0 l_0_7_91) l_0_7_95)))
 (let ((?x11895 (* 2.0 l_0_7_178)))
 (let ((?x14086 (* ?x11895 l_0_7_182)))
 (let ((?x11892 (* 2.0 l_0_7_177)))
 (let ((?x14084 (* ?x11892 l_0_7_181)))
 (let ((?x11889 (* 2.0 l_0_7_176)))
 (let ((?x14082 (* ?x11889 l_0_7_180)))
 (let ((?x11886 (* 2.0 l_0_7_175)))
 (let ((?x14080 (* ?x11886 l_0_7_179)))
 (let ((?x11883 (* 2.0 l_0_7_157)))
 (let ((?x14078 (* ?x11883 l_0_7_161)))
 (let ((?x11880 (* 2.0 l_0_7_156)))
 (let ((?x14076 (* ?x11880 l_0_7_160)))
 (let ((?x11877 (* 2.0 l_0_7_155)))
 (let ((?x14074 (* ?x11877 l_0_7_159)))
 (let ((?x11874 (* 2.0 l_0_7_154)))
 (let ((?x14072 (* ?x11874 l_0_7_158)))
 (let ((?x11863 (* 2.0 l_0_7_115)))
 (let ((?x14070 (* ?x11863 l_0_7_119)))
 (let ((?x11860 (* 2.0 l_0_7_114)))
 (let ((?x14068 (* ?x11860 l_0_7_118)))
 (let ((?x11857 (* 2.0 l_0_7_113)))
 (let ((?x14066 (* ?x11857 l_0_7_117)))
 (let ((?x14824 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_116) ?x14066) ?x14068) ?x14070) ?x14072)))
 (let ((?x14831 (+ (+ (+ (+ (- (- (- ?x14824 ?x14074) ?x14076) ?x14078) ?x14080) ?x14082) ?x14084) ?x14086)))
 (= (+ (+ (+ (+ ?x14831 ?x14097) ?x14100) ?x14103) ?x14106) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11895 (* 2.0 l_0_7_178)))
 (let ((?x11896 (* ?x11895 l_0_7_187)))
 (let ((?x11892 (* 2.0 l_0_7_177)))
 (let ((?x11893 (* ?x11892 l_0_7_186)))
 (let ((?x11889 (* 2.0 l_0_7_176)))
 (let ((?x11890 (* ?x11889 l_0_7_185)))
 (let ((?x11886 (* 2.0 l_0_7_175)))
 (let ((?x11887 (* ?x11886 l_0_7_184)))
 (let ((?x11883 (* 2.0 l_0_7_157)))
 (let ((?x11884 (* ?x11883 l_0_7_166)))
 (let ((?x11880 (* 2.0 l_0_7_156)))
 (let ((?x11881 (* ?x11880 l_0_7_165)))
 (let ((?x11877 (* 2.0 l_0_7_155)))
 (let ((?x11878 (* ?x11877 l_0_7_164)))
 (let ((?x11874 (* 2.0 l_0_7_154)))
 (let ((?x11875 (* ?x11874 l_0_7_163)))
 (let ((?x11863 (* 2.0 l_0_7_115)))
 (let ((?x11864 (* ?x11863 l_0_7_124)))
 (let ((?x11860 (* 2.0 l_0_7_114)))
 (let ((?x11861 (* ?x11860 l_0_7_123)))
 (let ((?x11857 (* 2.0 l_0_7_113)))
 (let ((?x11858 (* ?x11857 l_0_7_122)))
 (let ((?x11854 (* 2.0 l_0_7_112)))
 (let ((?x11855 (* ?x11854 l_0_7_121)))
 (let ((?x11851 (* 2.0 l_0_7_103)))
 (let ((?x11852 (* ?x11851 l_0_7_94)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x11849 (* ?x11397 l_0_7_93)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x11847 (* ?x10189 l_0_7_92)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x11845 (* ?x10186 l_0_7_91)))
 (let ((?x14866 (- (- (- (- (+ (+ (+ ?x11845 ?x11847) ?x11849) ?x11852) ?x11855) ?x11858) ?x11861) ?x11864)))
 (let ((?x14873 (+ (+ (+ (- (- (- (- ?x14866 ?x11875) ?x11878) ?x11881) ?x11884) ?x11887) ?x11890) ?x11893)))
 (= (+ ?x14873 ?x11896) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14238 (* l_0_7_99 l_0_7_99)))
 (let ((?x14236 (* l_0_7_98 l_0_7_98)))
 (let ((?x14234 (* l_0_7_97 l_0_7_97)))
 (let ((?x14232 (* l_0_7_96 l_0_7_96)))
 (let ((?x14230 (* l_0_7_95 l_0_7_95)))
 (let ((?x14220 (* l_0_7_183 l_0_7_183)))
 (let ((?x14218 (* l_0_7_182 l_0_7_182)))
 (let ((?x14216 (* l_0_7_181 l_0_7_181)))
 (let ((?x14214 (* l_0_7_180 l_0_7_180)))
 (let ((?x14212 (* l_0_7_179 l_0_7_179)))
 (let ((?x14210 (* l_0_7_162 l_0_7_162)))
 (let ((?x14208 (* l_0_7_161 l_0_7_161)))
 (let ((?x14206 (* l_0_7_160 l_0_7_160)))
 (let ((?x14204 (* l_0_7_159 l_0_7_159)))
 (let ((?x14202 (* l_0_7_158 l_0_7_158)))
 (let ((?x14200 (* l_0_7_120 l_0_7_120)))
 (let ((?x14198 (* l_0_7_119 l_0_7_119)))
 (let ((?x14196 (* l_0_7_118 l_0_7_118)))
 (let ((?x14906 (- (- (* (- l_0_7_116) l_0_7_116) (* l_0_7_117 l_0_7_117)) ?x14196)))
 (let ((?x14913 (- (- (- (- (- (- (- ?x14906 ?x14198) ?x14200) ?x14202) ?x14204) ?x14206) ?x14208) ?x14210)))
 (let ((?x14920 (+ (+ (+ (+ (+ (+ (+ ?x14913 ?x14212) ?x14214) ?x14216) ?x14218) ?x14220) ?x14230) ?x14232)))
 (= (+ (+ (+ ?x14920 ?x14234) ?x14236) ?x14238) 0.0)))))))))))))))))))))))
(assert
 (let ((?x12141 (* (* 2.0 l_0_7_183) l_0_7_188)))
 (let ((?x12138 (* (* 2.0 l_0_7_182) l_0_7_187)))
 (let ((?x12135 (* (* 2.0 l_0_7_181) l_0_7_186)))
 (let ((?x12132 (* (* 2.0 l_0_7_180) l_0_7_185)))
 (let ((?x12129 (* (* 2.0 l_0_7_179) l_0_7_184)))
 (let ((?x12126 (* (* 2.0 l_0_7_162) l_0_7_167)))
 (let ((?x12123 (* (* 2.0 l_0_7_161) l_0_7_166)))
 (let ((?x12120 (* (* 2.0 l_0_7_160) l_0_7_165)))
 (let ((?x12117 (* (* 2.0 l_0_7_159) l_0_7_164)))
 (let ((?x12114 (* (* 2.0 l_0_7_158) l_0_7_163)))
 (let ((?x12101 (* (* 2.0 l_0_7_120) l_0_7_125)))
 (let ((?x12096 (* (* 2.0 l_0_7_119) l_0_7_124)))
 (let ((?x12093 (* (* 2.0 l_0_7_118) l_0_7_123)))
 (let ((?x12090 (* (* 2.0 l_0_7_117) l_0_7_122)))
 (let ((?x12087 (* (* 2.0 l_0_7_116) l_0_7_121)))
 (let ((?x12082 (* (* 2.0 l_0_7_104) l_0_7_99)))
 (let ((?x11851 (* 2.0 l_0_7_103)))
 (let ((?x12079 (* ?x11851 l_0_7_98)))
 (let ((?x11397 (* 2.0 l_0_7_102)))
 (let ((?x12077 (* ?x11397 l_0_7_97)))
 (let ((?x10189 (* 2.0 l_0_7_101)))
 (let ((?x12075 (* ?x10189 l_0_7_96)))
 (let ((?x10186 (* 2.0 l_0_7_100)))
 (let ((?x12073 (* ?x10186 l_0_7_95)))
 (let ((?x14961 (- (- (- (+ (+ (+ (+ ?x12073 ?x12075) ?x12077) ?x12079) ?x12082) ?x12087) ?x12090) ?x12093)))
 (let ((?x14968 (- (- (- (- (- (- (- ?x14961 ?x12096) ?x12101) ?x12114) ?x12117) ?x12120) ?x12123) ?x12126)))
 (= (+ (+ (+ (+ (+ ?x14968 ?x12129) ?x12132) ?x12135) ?x12138) ?x12141) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x12406 (* l_0_7_189 l_0_7_189)))
 (let ((?x12404 (* l_0_7_188 l_0_7_188)))
 (let ((?x12402 (* l_0_7_187 l_0_7_187)))
 (let ((?x12400 (* l_0_7_186 l_0_7_186)))
 (let ((?x12398 (* l_0_7_185 l_0_7_185)))
 (let ((?x12396 (* l_0_7_184 l_0_7_184)))
 (let ((?x12392 (* l_0_7_168 l_0_7_168)))
 (let ((?x12390 (* l_0_7_167 l_0_7_167)))
 (let ((?x12388 (* l_0_7_166 l_0_7_166)))
 (let ((?x12386 (* l_0_7_165 l_0_7_165)))
 (let ((?x12384 (* l_0_7_164 l_0_7_164)))
 (let ((?x12382 (* l_0_7_163 l_0_7_163)))
 (let ((?x12375 (* l_0_7_126 l_0_7_126)))
 (let ((?x12373 (* l_0_7_125 l_0_7_125)))
 (let ((?x12371 (* l_0_7_124 l_0_7_124)))
 (let ((?x12369 (* l_0_7_123 l_0_7_123)))
 (let ((?x12367 (* l_0_7_122 l_0_7_122)))
 (let ((?x12365 (* l_0_7_121 l_0_7_121)))
 (let ((?x12363 (* l_0_7_105 l_0_7_105)))
 (let ((?x12361 (* l_0_7_104 l_0_7_104)))
 (let ((?x12359 (* l_0_7_103 l_0_7_103)))
 (let ((?x12357 (* l_0_7_102 l_0_7_102)))
 (let ((?x15020 (+ (+ (+ (* l_0_7_100 l_0_7_100) (* l_0_7_101 l_0_7_101)) ?x12357) ?x12359)))
 (let ((?x15027 (- (- (- (- (- (+ (+ ?x15020 ?x12361) ?x12363) ?x12365) ?x12367) ?x12369) ?x12371) ?x12373)))
 (let ((?x15034 (- (- (- (- (- (- (- ?x15027 ?x12375) ?x12382) ?x12384) ?x12386) ?x12388) ?x12390) ?x12392)))
 (= (+ (+ (+ (+ (+ (+ ?x15034 ?x12396) ?x12398) ?x12400) ?x12402) ?x12404) ?x12406) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x11294 (* l_0_7_132 l_0_7_132)))
 (let ((?x15084 (- (- (* (- l_0_7_130) l_0_7_130) (* l_0_7_131 l_0_7_131)) ?x11294)))
 (= ?x15084 0.0))))
(assert
 (>= l_0_7_1 0.0))
(assert
 (>= l_0_7_3 0.0))
(assert
 (>= l_0_7_6 0.0))
(assert
 (>= l_0_7_10 0.0))
(assert
 (>= l_0_7_15 0.0))
(assert
 (>= l_0_7_21 0.0))
(assert
 (>= l_0_7_22 0.0))
(assert
 (>= l_0_7_24 0.0))
(assert
 (>= l_0_7_27 0.0))
(assert
 (>= l_0_7_31 0.0))
(assert
 (>= l_0_7_36 0.0))
(assert
 (>= l_0_7_42 0.0))
(assert
 (>= l_0_7_43 0.0))
(assert
 (>= l_0_7_45 0.0))
(assert
 (>= l_0_7_48 0.0))
(assert
 (>= l_0_7_52 0.0))
(assert
 (>= l_0_7_57 0.0))
(assert
 (>= l_0_7_63 0.0))
(assert
 (>= l_0_7_64 0.0))
(assert
 (>= l_0_7_66 0.0))
(assert
 (>= l_0_7_69 0.0))
(assert
 (>= l_0_7_73 0.0))
(assert
 (>= l_0_7_78 0.0))
(assert
 (>= l_0_7_84 0.0))
(assert
 (>= l_0_7_85 0.0))
(assert
 (>= l_0_7_87 0.0))
(assert
 (>= l_0_7_90 0.0))
(assert
 (>= l_0_7_94 0.0))
(assert
 (>= l_0_7_99 0.0))
(assert
 (>= l_0_7_105 0.0))
(assert
 (>= l_0_7_106 0.0))
(assert
 (>= l_0_7_108 0.0))
(assert
 (>= l_0_7_111 0.0))
(assert
 (>= l_0_7_115 0.0))
(assert
 (>= l_0_7_120 0.0))
(assert
 (>= l_0_7_126 0.0))
(assert
 (>= l_0_7_127 0.0))
(assert
 (>= l_0_7_129 0.0))
(assert
 (>= l_0_7_132 0.0))
(assert
 (>= l_0_7_136 0.0))
(assert
 (>= l_0_7_141 0.0))
(assert
 (>= l_0_7_147 0.0))
(assert
 (>= l_0_7_148 0.0))
(assert
 (>= l_0_7_150 0.0))
(assert
 (>= l_0_7_153 0.0))
(assert
 (>= l_0_7_157 0.0))
(assert
 (>= l_0_7_162 0.0))
(assert
 (>= l_0_7_168 0.0))
(assert
 (>= l_0_7_169 0.0))
(assert
 (>= l_0_7_171 0.0))
(assert
 (>= l_0_7_174 0.0))
(assert
 (>= l_0_7_178 0.0))
(assert
 (>= l_0_7_183 0.0))
(assert
 (>= l_0_7_189 0.0))
(assert
 (>= l_0_7_190 0.0))
(assert
 (>= l_0_7_192 0.0))
(assert
 (>= l_0_7_195 0.0))
(assert
 (>= l_0_7_199 0.0))
(assert
 (>= l_0_7_204 0.0))
(assert
 (>= l_0_7_210 0.0))
(assert
 (let ((?x15180 (* l_0_8_64 l_0_8_64)))
 (let ((?x15181 (* 3.0 ?x15180)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x15178 (* ?x15177 l_0_8_79)))
 (let ((?x15175 (* (* 3.0 l_0_8_43) l_0_8_43)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x15172 (* ?x15171 l_0_8_58)))
 (let ((?x15169 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x15166 (* ?x15165 l_0_8_37)))
 (let ((?x15157 (* l_0_8_127 l_0_8_127)))
 (let ((?x15154 (* l_0_8_1 l_0_8_1)))
 (let ((?x15155 (* 6.0 ?x15154)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x15153 (* ?x15152 l_0_8_16)))
 (let ((?x15164 (- (- (+ (+ ?x15153 ?x15155) ?x15157) (* (* 2.0 l_0_8_190) l_0_8_205)) (* (* 2.0 l_0_8_211) l_0_8_226))))
 (let ((?x15183 (+ (+ (+ (- (- (- (- ?x15164 ?x15166) ?x15169) ?x15172) ?x15175) ?x15178) ?x15181) 6.0)))
 (= ?x15183 0.0)))))))))))))))))))
(assert
 (let ((?x15169 (* (* 6.0 l_0_8_22) l_0_8_22)))
 (let ((?x15232 (* l_0_8_211 l_0_8_211)))
 (let ((?x15230 (* l_0_8_190 l_0_8_190)))
 (let ((?x15233 (- (- (+ (- _a_12_) (* 6.0 (* l_0_8_1 l_0_8_1))) ?x15230) ?x15232)))
 (let ((?x15239 (+ (- (- ?x15233 ?x15169) (* (* 1.0 l_0_8_43) l_0_8_43)) (* 1.0 (* l_0_8_64 l_0_8_64)))))
 (= (+ ?x15239 12.0) 0.0)))))))
(assert
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x15272 (* ?x15177 l_0_8_65)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x15270 (* ?x15171 l_0_8_44)))
 (let ((?x15206 (* l_0_8_22 l_0_8_22)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x15267 (* ?x15165 l_0_8_23)))
 (let ((?x15154 (* l_0_8_1 l_0_8_1)))
 (let ((?x15264 (- (- (+ (- _a_13_) (* (* 12.0 l_0_8_1) l_0_8_2)) ?x15154) (* (* 2.0 l_0_8_190) l_0_8_191))))
 (let ((?x15271 (- (+ (- (- ?x15264 (* (* 2.0 l_0_8_211) l_0_8_212)) ?x15267) ?x15206) ?x15270)))
 (= (+ ?x15271 ?x15272) 0.0))))))))))))
(assert
 (let ((?x15335 (* l_0_8_3 l_0_8_3)))
 (let ((?x15336 (* 6.0 ?x15335)))
 (let ((?x15333 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15330 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15324 (* l_0_8_213 l_0_8_213)))
 (let ((?x15322 (* l_0_8_212 l_0_8_212)))
 (let ((?x15319 (* l_0_8_2 l_0_8_2)))
 (let ((?x15320 (* 6.0 ?x15319)))
 (let ((?x15317 (* l_0_8_192 l_0_8_192)))
 (let ((?x15318 (- (- (* (* (- 2.0) l_0_8_1) l_0_8_2) (* l_0_8_191 l_0_8_191)) ?x15317)))
 (let ((?x15328 (+ (- (- (+ ?x15318 ?x15320) ?x15322) ?x15324) (* (* 2.0 l_0_8_22) l_0_8_23))))
 (let ((?x15340 (- (+ (- (- ?x15328 ?x15330) ?x15333) ?x15336) (* (* 1.0 l_0_8_44) l_0_8_44))))
 (let ((?x15346 (+ (- ?x15340 (* (* 1.0 l_0_8_45) l_0_8_45)) (* 1.0 (* l_0_8_65 l_0_8_65)))))
 (= (+ ?x15346 (* 1.0 (* l_0_8_66 l_0_8_66))) 0.0)))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15435 (* ?x15434 l_0_8_68)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15432 (* ?x15431 l_0_8_67)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15429 (* ?x15428 l_0_8_47)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15426 (* ?x15425 l_0_8_46)))
 (let ((?x15422 (* 12.0 l_0_8_3)))
 (let ((?x15423 (* ?x15422 l_0_8_5)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15420 (* ?x15419 l_0_8_26)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15417 (* ?x15416 l_0_8_25)))
 (let ((?x15405 (* 12.0 l_0_8_2)))
 (let ((?x15406 (* ?x15405 l_0_8_4)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x15397 (* ?x15396 l_0_8_128)))
 (let ((?x15401 (- (- (* (* (- 2.0) l_0_8_1) l_0_8_4) ?x15397) (* (* 2.0 l_0_8_191) l_0_8_193))))
 (let ((?x15410 (- (+ (- ?x15401 (* (* 2.0 l_0_8_192) l_0_8_194)) ?x15406) (* (* 2.0 l_0_8_212) l_0_8_214))))
 (let ((?x15415 (+ (- ?x15410 (* (* 2.0 l_0_8_213) l_0_8_215)) (* (* 2.0 l_0_8_22) l_0_8_25))))
 (let ((?x15436 (+ (+ (- (- (+ (- (- ?x15415 ?x15417) ?x15420) ?x15423) ?x15426) ?x15429) ?x15432) ?x15435)))
 (= ?x15436 0.0))))))))))))))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x15550 (* ?x15549 l_0_8_86)))
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15547 (* ?x15434 l_0_8_71)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15545 (* ?x15431 l_0_8_70)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15543 (* ?x15428 l_0_8_50)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15541 (* ?x15425 l_0_8_49)))
 (let ((?x15422 (* 12.0 l_0_8_3)))
 (let ((?x15539 (* ?x15422 l_0_8_8)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15537 (* ?x15419 l_0_8_29)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15535 (* ?x15416 l_0_8_28)))
 (let ((?x15405 (* 12.0 l_0_8_2)))
 (let ((?x15527 (* ?x15405 l_0_8_7)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x15521 (* ?x15520 l_0_8_170)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x15518 (* ?x15517 l_0_8_149)))
 (let ((?x15516 (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) (* (* 2.0 l_0_8_106) l_0_8_107))))
 (let ((?x15526 (- (- (- (+ ?x15516 ?x15518) ?x15521) (* (* 2.0 l_0_8_191) l_0_8_196)) (* (* 2.0 l_0_8_192) l_0_8_197))))
 (let ((?x15532 (- (- (+ ?x15526 ?x15527) (* (* 2.0 l_0_8_212) l_0_8_217)) (* (* 2.0 l_0_8_213) l_0_8_218))))
 (let ((?x15540 (+ (- (- (+ ?x15532 (* (* 2.0 l_0_8_22) l_0_8_28)) ?x15535) ?x15537) ?x15539)))
 (= (- (+ (+ (- (- ?x15540 ?x15541) ?x15543) ?x15545) ?x15547) ?x15550) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15673 (* ?x15434 l_0_8_75)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15671 (* ?x15431 l_0_8_74)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x15272 (* ?x15177 l_0_8_65)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15668 (* ?x15428 l_0_8_54)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15666 (* ?x15425 l_0_8_53)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x15270 (* ?x15171 l_0_8_44)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15663 (* ?x15419 l_0_8_33)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15661 (* ?x15416 l_0_8_32)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x15649 (* ?x15648 l_0_8_3)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x15646 (* ?x15645 l_0_8_2)))
 (let ((?x15652 (- (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_11) ?x15646) ?x15649) (* (* 2.0 l_0_8_191) l_0_8_200))))
 (let ((?x15656 (- (- ?x15652 (* (* 2.0 l_0_8_192) l_0_8_201)) (* (* 2.0 l_0_8_212) l_0_8_221))))
 (let ((?x15660 (+ (- ?x15656 (* (* 2.0 l_0_8_213) l_0_8_222)) (* (* 2.0 l_0_8_22) l_0_8_32))))
 (let ((?x15672 (+ (- (- (- (+ (- (- ?x15660 ?x15661) ?x15663) ?x15270) ?x15666) ?x15668) ?x15272) ?x15671)))
 (= (+ ?x15672 ?x15673) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15781 (* ?x15434 l_0_8_80)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15779 (* ?x15431 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x15777 (* ?x15776 l_0_8_65)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15774 (* ?x15428 l_0_8_59)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15772 (* ?x15425 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x15770 (* ?x15769 l_0_8_44)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15767 (* ?x15419 l_0_8_38)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15765 (* ?x15416 l_0_8_37)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x15267 (* ?x15165 l_0_8_23)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x15752 (* ?x15751 l_0_8_3)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x15749 (* ?x15748 l_0_8_2)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x15397 (* ?x15396 l_0_8_128)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x15260 (* ?x15152 l_0_8_2)))
 (let ((?x15753 (+ (+ (+ (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x15260) ?x15397) ?x15749) ?x15752)))
 (let ((?x15757 (- (- ?x15753 (* (* 2.0 l_0_8_191) l_0_8_205)) (* (* 2.0 l_0_8_192) l_0_8_206))))
 (let ((?x15761 (- (- ?x15757 (* (* 2.0 l_0_8_212) l_0_8_226)) (* (* 2.0 l_0_8_213) l_0_8_227))))
 (let ((?x15768 (- (- (+ (- ?x15761 ?x15267) (* (* 2.0 l_0_8_22) l_0_8_37)) ?x15765) ?x15767)))
 (= (+ (+ (+ (- (- (- ?x15768 ?x15770) ?x15772) ?x15774) ?x15777) ?x15779) ?x15781) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x15335 (* l_0_8_3 l_0_8_3)))
 (let ((?x15372 (* l_0_8_24 l_0_8_24)))
 (let ((?x15862 (- (+ (+ (* (- l_0_8_2) l_0_8_2) (* l_0_8_23 l_0_8_23)) ?x15372) ?x15335)))
 (= ?x15862 0.0)))))
(assert
 (let ((?x15880 (- (- (* (- l_0_8_128) l_0_8_128) (* l_0_8_129 l_0_8_129)) (* (* 2.0 l_0_8_2) l_0_8_4))))
 (let ((?x15886 (+ (+ ?x15880 (* (* 2.0 l_0_8_23) l_0_8_25)) (* (* 2.0 l_0_8_24) l_0_8_26))))
 (= (- ?x15886 (* (* 2.0 l_0_8_3) l_0_8_5)) 0.0))))
(assert
 (let ((?x15935 (* l_0_8_87 l_0_8_87)))
 (let ((?x15933 (* l_0_8_86 l_0_8_86)))
 (let ((?x15923 (* l_0_8_171 l_0_8_171)))
 (let ((?x15921 (* l_0_8_170 l_0_8_170)))
 (let ((?x15919 (* l_0_8_150 l_0_8_150)))
 (let ((?x15917 (* l_0_8_149 l_0_8_149)))
 (let ((?x15920 (+ (+ (+ (* l_0_8_107 l_0_8_107) (* l_0_8_108 l_0_8_108)) ?x15917) ?x15919)))
 (let ((?x15928 (+ (- (- (- ?x15920 ?x15921) ?x15923) (* (* 2.0 l_0_8_2) l_0_8_7)) (* (* 2.0 l_0_8_23) l_0_8_28))))
 (let ((?x15932 (- (+ ?x15928 (* (* 2.0 l_0_8_24) l_0_8_29)) (* (* 2.0 l_0_8_3) l_0_8_8))))
 (= (- (- ?x15932 ?x15933) ?x15935) 0.0)))))))))))
(assert
 (let ((?x15347 (* l_0_8_66 l_0_8_66)))
 (let ((?x15344 (* l_0_8_65 l_0_8_65)))
 (let ((?x15383 (* l_0_8_45 l_0_8_45)))
 (let ((?x15379 (* l_0_8_44 l_0_8_44)))
 (let ((?x15976 (- (* (* (- 2.0) l_0_8_11) l_0_8_2) (* (* 2.0 l_0_8_12) l_0_8_3))))
 (let ((?x15980 (+ (+ ?x15976 (* (* 2.0 l_0_8_23) l_0_8_32)) (* (* 2.0 l_0_8_24) l_0_8_33))))
 (= (- (- (+ (+ ?x15980 ?x15379) ?x15383) ?x15344) ?x15347) 0.0))))))))
(assert
 (let ((?x15347 (* l_0_8_66 l_0_8_66)))
 (let ((?x16027 (* 3.0 ?x15347)))
 (let ((?x15344 (* l_0_8_65 l_0_8_65)))
 (let ((?x16025 (* 3.0 ?x15344)))
 (let ((?x16023 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (let ((?x15335 (* l_0_8_3 l_0_8_3)))
 (let ((?x15336 (* 6.0 ?x15335)))
 (let ((?x15333 (* (* 6.0 l_0_8_24) l_0_8_24)))
 (let ((?x15330 (* (* 6.0 l_0_8_23) l_0_8_23)))
 (let ((?x15319 (* l_0_8_2 l_0_8_2)))
 (let ((?x15320 (* 6.0 ?x15319)))
 (let ((?x16007 (- (+ (* l_0_8_128 l_0_8_128) (* l_0_8_129 l_0_8_129)) (* (* 2.0 l_0_8_16) l_0_8_2))))
 (let ((?x16013 (+ (+ (- ?x16007 (* (* 2.0 l_0_8_17) l_0_8_3)) ?x15320) (* (* 2.0 l_0_8_23) l_0_8_37))))
 (let ((?x16018 (+ (- (+ (- ?x16013 ?x15330) (* (* 2.0 l_0_8_24) l_0_8_38)) ?x15333) ?x15336)))
 (let ((?x16028 (+ (+ (- (- ?x16018 (* (* 3.0 l_0_8_44) l_0_8_44)) ?x16023) ?x16025) ?x16027)))
 (= ?x16028 0.0)))))))))))))))))
(assert
 (let ((?x16077 (* l_0_8_6 l_0_8_6)))
 (let ((?x16075 (* l_0_8_5 l_0_8_5)))
 (let ((?x16073 (* l_0_8_4 l_0_8_4)))
 (let ((?x16071 (* l_0_8_27 l_0_8_27)))
 (let ((?x16069 (* l_0_8_26 l_0_8_26)))
 (let ((?x16067 (* l_0_8_25 l_0_8_25)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16065 (* ?x16064 l_0_8_131)))
 (let ((?x16072 (+ (+ (+ (- (* (* (- 2.0) l_0_8_128) l_0_8_130) ?x16065) ?x16067) ?x16069) ?x16071)))
 (= (- (- (- ?x16072 ?x16073) ?x16075) ?x16077) 0.0)))))))))))
(assert
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16143 (* ?x16142 l_0_8_89)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16140 (* ?x16139 l_0_8_88)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16119 (* ?x16118 l_0_8_173)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16116 (* ?x16115 l_0_8_172)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16113 (* ?x16112 l_0_8_152)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16110 (* ?x16109 l_0_8_151)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16107 (* ?x16064 l_0_8_134)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16105 (* ?x16104 l_0_8_133)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16102 (* ?x16101 l_0_8_110)))
 (let ((?x16111 (+ (- (- (+ (* (* 2.0 l_0_8_107) l_0_8_109) ?x16102) ?x16105) ?x16107) ?x16110)))
 (let ((?x16123 (+ (- (- (+ ?x16111 ?x16113) ?x16116) ?x16119) (* (* 2.0 l_0_8_25) l_0_8_28))))
 (let ((?x16129 (+ (+ ?x16123 (* (* 2.0 l_0_8_26) l_0_8_29)) (* (* 2.0 l_0_8_27) l_0_8_30))))
 (let ((?x16135 (- (- ?x16129 (* (* 2.0 l_0_8_4) l_0_8_7)) (* (* 2.0 l_0_8_5) l_0_8_8))))
 (= (- (- (- ?x16135 (* (* 2.0 l_0_8_6) l_0_8_9)) ?x16140) ?x16143) 0.0))))))))))))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15435 (* ?x15434 l_0_8_68)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15432 (* ?x15431 l_0_8_67)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15429 (* ?x15428 l_0_8_47)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15426 (* ?x15425 l_0_8_46)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16223 (* ?x16064 l_0_8_138)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16221 (* ?x16104 l_0_8_137)))
 (let ((?x16220 (- (* (* (- 2.0) l_0_8_11) l_0_8_4) (* (* 2.0 l_0_8_12) l_0_8_5))))
 (let ((?x16229 (+ (- (- (- ?x16220 ?x16221) ?x16223) (* (* 2.0 l_0_8_13) l_0_8_6)) (* (* 2.0 l_0_8_25) l_0_8_32))))
 (let ((?x16233 (+ (+ ?x16229 (* (* 2.0 l_0_8_26) l_0_8_33)) (* (* 2.0 l_0_8_27) l_0_8_34))))
 (= (- (- (+ (+ ?x16233 ?x15426) ?x15429) ?x15432) ?x15435) 0.0)))))))))))))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16314 (* ?x16313 l_0_8_68)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16311 (* ?x16310 l_0_8_67)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16308 (* ?x16307 l_0_8_47)))
 (let ((?x15422 (* 12.0 l_0_8_3)))
 (let ((?x15423 (* ?x15422 l_0_8_5)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15420 (* ?x15419 l_0_8_26)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15417 (* ?x15416 l_0_8_25)))
 (let ((?x15405 (* 12.0 l_0_8_2)))
 (let ((?x15406 (* ?x15405 l_0_8_4)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16285 (* ?x16064 l_0_8_143)))
 (let ((?x16065 (* ?x16064 l_0_8_131)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16282 (* ?x16104 l_0_8_142)))
 (let ((?x16288 (- (- (+ (- (* ?x16104 l_0_8_130) ?x16282) ?x16065) ?x16285) (* (* 2.0 l_0_8_16) l_0_8_4))))
 (let ((?x16293 (- (- ?x16288 (* (* 2.0 l_0_8_17) l_0_8_5)) (* (* 2.0 l_0_8_18) l_0_8_6))))
 (let ((?x16298 (+ (- (- (+ ?x16293 ?x15406) ?x15417) ?x15420) (* (* 2.0 l_0_8_25) l_0_8_37))))
 (let ((?x16302 (+ (+ ?x16298 (* (* 2.0 l_0_8_26) l_0_8_38)) (* (* 2.0 l_0_8_27) l_0_8_39))))
 (let ((?x16312 (+ (- (- (+ ?x16302 ?x15423) (* (* 6.0 l_0_8_44) l_0_8_46)) ?x16308) ?x16311)))
 (= (+ ?x16312 ?x16314) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16405 (* l_0_8_9 l_0_8_9)))
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16403 (* ?x16142 l_0_8_92)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16401 (* ?x16139 l_0_8_91)))
 (let ((?x16399 (* l_0_8_8 l_0_8_8)))
 (let ((?x16397 (* l_0_8_7 l_0_8_7)))
 (let ((?x16395 (* l_0_8_31 l_0_8_31)))
 (let ((?x16393 (* l_0_8_30 l_0_8_30)))
 (let ((?x16391 (* l_0_8_29 l_0_8_29)))
 (let ((?x16389 (* l_0_8_28 l_0_8_28)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16387 (* ?x16118 l_0_8_176)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16385 (* ?x16115 l_0_8_175)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16383 (* ?x16112 l_0_8_155)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16381 (* ?x16109 l_0_8_154)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16379 (* ?x16101 l_0_8_113)))
 (let ((?x16378 (+ (* (- l_0_8_10) l_0_8_10) (* (* 2.0 l_0_8_107) l_0_8_112))))
 (let ((?x16392 (+ (+ (- (- (+ (+ (+ ?x16378 ?x16379) ?x16381) ?x16383) ?x16385) ?x16387) ?x16389) ?x16391)))
 (let ((?x16406 (- (- (- (- (- (+ (+ ?x16392 ?x16393) ?x16395) ?x16397) ?x16399) ?x16401) ?x16403) ?x16405)))
 (= ?x16406 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16494 (* ?x16142 l_0_8_96)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16492 (* ?x16139 l_0_8_95)))
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15547 (* ?x15434 l_0_8_71)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15545 (* ?x15431 l_0_8_70)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15543 (* ?x15428 l_0_8_50)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15541 (* ?x15425 l_0_8_49)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16474 (* ?x16118 l_0_8_180)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16472 (* ?x16115 l_0_8_179)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16470 (* ?x16112 l_0_8_159)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16468 (* ?x16109 l_0_8_158)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16459 (* ?x16101 l_0_8_117)))
 (let ((?x16458 (+ (* (* (- 2.0) l_0_8_10) l_0_8_14) (* (* 2.0 l_0_8_107) l_0_8_116))))
 (let ((?x16465 (- (- (+ ?x16458 ?x16459) (* (* 2.0 l_0_8_11) l_0_8_7)) (* (* 2.0 l_0_8_12) l_0_8_8))))
 (let ((?x16473 (- (+ (+ (- ?x16465 (* (* 2.0 l_0_8_13) l_0_8_9)) ?x16468) ?x16470) ?x16472)))
 (let ((?x16481 (+ (+ (- ?x16473 ?x16474) (* (* 2.0 l_0_8_28) l_0_8_32)) (* (* 2.0 l_0_8_29) l_0_8_33))))
 (let ((?x16487 (+ (+ ?x16481 (* (* 2.0 l_0_8_30) l_0_8_34)) (* (* 2.0 l_0_8_31) l_0_8_35))))
 (= (- (- (- (- (+ (+ ?x16487 ?x15541) ?x15543) ?x15545) ?x15547) ?x16492) ?x16494) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16612 (* ?x16313 l_0_8_71)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16610 (* ?x16310 l_0_8_70)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16608 (* ?x16307 l_0_8_50)))
 (let ((?x15422 (* 12.0 l_0_8_3)))
 (let ((?x15539 (* ?x15422 l_0_8_8)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15537 (* ?x15419 l_0_8_29)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15535 (* ?x15416 l_0_8_28)))
 (let ((?x15405 (* 12.0 l_0_8_2)))
 (let ((?x15527 (* ?x15405 l_0_8_7)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16590 (* ?x16118 l_0_8_185)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16588 (* ?x16115 l_0_8_184)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16582 (* ?x16112 l_0_8_164)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16580 (* ?x16109 l_0_8_163)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16107 (* ?x16064 l_0_8_134)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16105 (* ?x16104 l_0_8_133)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16576 (* ?x16101 l_0_8_122)))
 (let ((?x16099 (* 2.0 l_0_8_107)))
 (let ((?x16574 (* ?x16099 l_0_8_121)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x16572 (* ?x16571 l_0_8_87)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x16569 (* ?x16568 l_0_8_86)))
 (let ((?x16577 (+ (+ (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) ?x16569) ?x16572) ?x16574) ?x16576)))
 (let ((?x16585 (- (+ (+ (+ (+ ?x16577 ?x16105) ?x16107) ?x16580) ?x16582) (* (* 2.0 l_0_8_16) l_0_8_7))))
 (let ((?x16593 (- (- (- (- ?x16585 (* (* 2.0 l_0_8_17) l_0_8_8)) ?x16588) ?x16590) (* (* 2.0 l_0_8_18) l_0_8_9))))
 (let ((?x16598 (+ (- (- (+ ?x16593 ?x15527) ?x15535) ?x15537) (* (* 2.0 l_0_8_28) l_0_8_37))))
 (let ((?x16603 (+ (+ (+ ?x16598 (* (* 2.0 l_0_8_29) l_0_8_38)) ?x15539) (* (* 2.0 l_0_8_30) l_0_8_39))))
 (let ((?x16607 (- (+ ?x16603 (* (* 2.0 l_0_8_31) l_0_8_40)) (* (* 6.0 l_0_8_44) l_0_8_49))))
 (= (+ (+ (- ?x16607 ?x16608) ?x16610) ?x16612) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15673 (* ?x15434 l_0_8_75)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15671 (* ?x15431 l_0_8_74)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15668 (* ?x15428 l_0_8_54)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15666 (* ?x15425 l_0_8_53)))
 (let ((?x16714 (* l_0_8_36 l_0_8_36)))
 (let ((?x16712 (* l_0_8_35 l_0_8_35)))
 (let ((?x16710 (* l_0_8_34 l_0_8_34)))
 (let ((?x16708 (* l_0_8_33 l_0_8_33)))
 (let ((?x16706 (* l_0_8_32 l_0_8_32)))
 (let ((?x16704 (* l_0_8_15 l_0_8_15)))
 (let ((?x16702 (* l_0_8_14 l_0_8_14)))
 (let ((?x16700 (* l_0_8_13 l_0_8_13)))
 (let ((?x16703 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x16700) ?x16702)))
 (let ((?x16716 (+ (+ (+ (+ (+ (+ (- ?x16703 ?x16704) ?x16706) ?x16708) ?x16710) ?x16712) ?x16714) ?x15666)))
 (= (- (- (+ ?x16716 ?x15668) ?x15671) ?x15673) 0.0))))))))))))))))))))
(assert
 (let ((?x15434 (* 2.0 l_0_8_66)))
 (let ((?x15781 (* ?x15434 l_0_8_80)))
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16787 (* ?x16313 l_0_8_75)))
 (let ((?x15431 (* 2.0 l_0_8_65)))
 (let ((?x15779 (* ?x15431 l_0_8_79)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16784 (* ?x16310 l_0_8_74)))
 (let ((?x15428 (* 2.0 l_0_8_45)))
 (let ((?x15774 (* ?x15428 l_0_8_59)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16781 (* ?x16307 l_0_8_54)))
 (let ((?x15425 (* 2.0 l_0_8_44)))
 (let ((?x15772 (* ?x15425 l_0_8_58)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15663 (* ?x15419 l_0_8_33)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15661 (* ?x15416 l_0_8_32)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16223 (* ?x16064 l_0_8_138)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16221 (* ?x16104 l_0_8_137)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x15649 (* ?x15648 l_0_8_3)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x15646 (* ?x15645 l_0_8_2)))
 (let ((?x16749 (- (+ (* (* (- 2.0) l_0_8_11) l_0_8_16) ?x15646) (* (* 2.0 l_0_8_12) l_0_8_17))))
 (let ((?x16754 (- (+ (+ (+ ?x16749 ?x15649) ?x16221) ?x16223) (* (* 2.0 l_0_8_13) l_0_8_18))))
 (let ((?x16760 (- (- ?x16754 (* (* 2.0 l_0_8_14) l_0_8_19)) (* (* 2.0 l_0_8_15) l_0_8_20))))
 (let ((?x16768 (+ (+ (- (- ?x16760 ?x15661) ?x15663) (* (* 2.0 l_0_8_32) l_0_8_37)) (* (* 2.0 l_0_8_33) l_0_8_38))))
 (let ((?x16774 (+ (+ ?x16768 (* (* 2.0 l_0_8_34) l_0_8_39)) (* (* 2.0 l_0_8_35) l_0_8_40))))
 (let ((?x16779 (- (+ ?x16774 (* (* 2.0 l_0_8_36) l_0_8_41)) (* (* 6.0 l_0_8_44) l_0_8_53))))
 (let ((?x16789 (- (+ (- (+ (+ (- (+ ?x16779 ?x15772) ?x16781) ?x15774) ?x16784) ?x15779) ?x16787) ?x15781)))
 (= ?x16789 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16895 (* ?x16313 l_0_8_80)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16893 (* ?x16310 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x15777 (* ?x15776 l_0_8_65)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16890 (* ?x16307 l_0_8_59)))
 (let ((?x16304 (* 6.0 l_0_8_44)))
 (let ((?x16888 (* ?x16304 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x15770 (* ?x15769 l_0_8_44)))
 (let ((?x16885 (* l_0_8_42 l_0_8_42)))
 (let ((?x16883 (* l_0_8_41 l_0_8_41)))
 (let ((?x16881 (* l_0_8_40 l_0_8_40)))
 (let ((?x16879 (* l_0_8_39 l_0_8_39)))
 (let ((?x16877 (* l_0_8_38 l_0_8_38)))
 (let ((?x16875 (* l_0_8_37 l_0_8_37)))
 (let ((?x15419 (* 12.0 l_0_8_24)))
 (let ((?x15767 (* ?x15419 l_0_8_38)))
 (let ((?x15416 (* 12.0 l_0_8_23)))
 (let ((?x15765 (* ?x15416 l_0_8_37)))
 (let ((?x16871 (* l_0_8_21 l_0_8_21)))
 (let ((?x16869 (* l_0_8_20 l_0_8_20)))
 (let ((?x16867 (* l_0_8_19 l_0_8_19)))
 (let ((?x16865 (* l_0_8_18 l_0_8_18)))
 (let ((?x16863 (* l_0_8_17 l_0_8_17)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x15752 (* ?x15751 l_0_8_3)))
 (let ((?x16860 (* l_0_8_16 l_0_8_16)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x15749 (* ?x15748 l_0_8_2)))
 (let ((?x16064 (* 2.0 l_0_8_129)))
 (let ((?x16285 (* ?x16064 l_0_8_143)))
 (let ((?x16104 (* 2.0 l_0_8_128)))
 (let ((?x16282 (* ?x16104 l_0_8_142)))
 (let ((?x16868 (- (- (- (+ (- (+ (+ ?x16282 ?x16285) ?x15749) ?x16860) ?x15752) ?x16863) ?x16865) ?x16867)))
 (let ((?x16880 (+ (+ (+ (- (- (- (- ?x16868 ?x16869) ?x16871) ?x15765) ?x15767) ?x16875) ?x16877) ?x16879)))
 (let ((?x16892 (+ (- (- (- (+ (+ (+ ?x16880 ?x16881) ?x16883) ?x16885) ?x15770) ?x16888) ?x16890) ?x15777)))
 (= (+ (+ ?x16892 ?x16893) ?x16895) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x17007 (* ?x17006 l_0_8_81)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x17004 (* ?x17003 l_0_8_80)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x17001 (* ?x17000 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x16998 (* ?x15776 l_0_8_67)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x16996 (* ?x16995 l_0_8_60)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x16993 (* ?x16992 l_0_8_59)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x16990 (* ?x16989 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x16987 (* ?x15769 l_0_8_46)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x16985 (* ?x16984 l_0_8_39)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x16982 (* ?x16981 l_0_8_38)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x16979 (* ?x16978 l_0_8_37)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x16976 (* ?x15165 l_0_8_25)))
 (let ((?x16955 (* 12.0 l_0_8_18)))
 (let ((?x16956 (* ?x16955 l_0_8_6)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x16953 (* ?x15751 l_0_8_5)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x16951 (* ?x15748 l_0_8_4)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x16949 (* ?x15396 l_0_8_142)))
 (let ((?x16952 (+ (- (+ (* (* 12.0 l_0_8_1) l_0_8_4) (* ?x15396 l_0_8_130)) ?x16949) ?x16951)))
 (let ((?x16963 (- (- (+ (+ ?x16952 ?x16953) ?x16956) (* (* 2.0 l_0_8_193) l_0_8_205)) (* (* 2.0 l_0_8_194) l_0_8_206))))
 (let ((?x16969 (- (- ?x16963 (* (* 2.0 l_0_8_195) l_0_8_207)) (* (* 2.0 l_0_8_214) l_0_8_226))))
 (let ((?x16975 (- (- ?x16969 (* (* 2.0 l_0_8_215) l_0_8_227)) (* (* 2.0 l_0_8_216) l_0_8_228))))
 (let ((?x16994 (- (- (- (- (- (- (- ?x16975 ?x16976) ?x16979) ?x16982) ?x16985) ?x16987) ?x16990) ?x16993)))
 (= (+ (+ (+ (+ (- ?x16994 ?x16996) ?x16998) ?x17001) ?x17004) ?x17007) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17197 (* 2.0 l_0_8_73)))
 (let ((?x17198 (* ?x17197 l_0_8_82)))
 (let ((?x17194 (* 2.0 l_0_8_72)))
 (let ((?x17195 (* ?x17194 l_0_8_81)))
 (let ((?x17191 (* 2.0 l_0_8_71)))
 (let ((?x17192 (* ?x17191 l_0_8_80)))
 (let ((?x17188 (* 2.0 l_0_8_70)))
 (let ((?x17189 (* ?x17188 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17186 (* ?x15776 l_0_8_70)))
 (let ((?x17183 (* 2.0 l_0_8_52)))
 (let ((?x17184 (* ?x17183 l_0_8_61)))
 (let ((?x17180 (* 2.0 l_0_8_51)))
 (let ((?x17181 (* ?x17180 l_0_8_60)))
 (let ((?x17177 (* 2.0 l_0_8_50)))
 (let ((?x17178 (* ?x17177 l_0_8_59)))
 (let ((?x17174 (* 2.0 l_0_8_49)))
 (let ((?x17175 (* ?x17174 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17172 (* ?x15769 l_0_8_49)))
 (let ((?x17169 (* 12.0 l_0_8_31)))
 (let ((?x17170 (* ?x17169 l_0_8_40)))
 (let ((?x17166 (* 12.0 l_0_8_30)))
 (let ((?x17167 (* ?x17166 l_0_8_39)))
 (let ((?x17163 (* 12.0 l_0_8_29)))
 (let ((?x17164 (* ?x17163 l_0_8_38)))
 (let ((?x17160 (* 12.0 l_0_8_28)))
 (let ((?x17161 (* ?x17160 l_0_8_37)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x17155 (* ?x15165 l_0_8_28)))
 (let ((?x16955 (* 12.0 l_0_8_18)))
 (let ((?x17132 (* ?x16955 l_0_8_9)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x17130 (* ?x15751 l_0_8_8)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x17128 (* ?x15520 l_0_8_184)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x17126 (* ?x15748 l_0_8_7)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x17124 (* ?x15517 l_0_8_163)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x17122 (* ?x15396 l_0_8_133)))
 (let ((?x15506 (* 2.0 l_0_8_106)))
 (let ((?x17120 (* ?x15506 l_0_8_121)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x17118 (* ?x16568 l_0_8_85)))
 (let ((?x17115 (* 12.0 l_0_8_10)))
 (let ((?x17116 (* ?x17115 l_0_8_19)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x17114 (* ?x15152 l_0_8_7)))
 (let ((?x17129 (- (+ (+ (+ (+ (- (+ ?x17114 ?x17116) ?x17118) ?x17120) ?x17122) ?x17124) ?x17126) ?x17128)))
 (let ((?x17139 (- (- (+ (+ ?x17129 ?x17130) ?x17132) (* (* 2.0 l_0_8_196) l_0_8_205)) (* (* 2.0 l_0_8_197) l_0_8_206))))
 (let ((?x17145 (- (- ?x17139 (* (* 2.0 l_0_8_198) l_0_8_207)) (* (* 2.0 l_0_8_199) l_0_8_208))))
 (let ((?x17151 (- (- ?x17145 (* (* 2.0 l_0_8_217) l_0_8_226)) (* (* 2.0 l_0_8_218) l_0_8_227))))
 (let ((?x17159 (- (- (- ?x17151 (* (* 2.0 l_0_8_219) l_0_8_228)) ?x17155) (* (* 2.0 l_0_8_220) l_0_8_229))))
 (let ((?x17179 (- (- (- (- (- (- (- ?x17159 ?x17161) ?x17164) ?x17167) ?x17170) ?x17172) ?x17175) ?x17178)))
 (let ((?x17199 (+ (+ (+ (+ (+ (- (- ?x17179 ?x17181) ?x17184) ?x17186) ?x17189) ?x17192) ?x17195) ?x17198)))
 (= ?x17199 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17439 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x17436 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x17433 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x17430 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x17427 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x15178 (* ?x15177 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17423 (* ?x15776 l_0_8_74)))
 (let ((?x17421 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x17418 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x17415 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x17412 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x17409 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x15172 (* ?x15171 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17405 (* ?x15769 l_0_8_53)))
 (let ((?x17403 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x17400 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x17397 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x17394 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x17391 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x17373 (* ?x15165 l_0_8_32)))
 (let ((?x17356 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x17353 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x17350 (* ?x17349 l_0_8_18)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x17347 (* ?x15396 l_0_8_137)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x17345 (* ?x15648 l_0_8_17)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x17343 (* ?x15645 l_0_8_16)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x17342 (* ?x15152 l_0_8_11)))
 (let ((?x17360 (- (+ (+ (+ (+ (+ (+ ?x17342 ?x17343) ?x17345) ?x17347) ?x17350) ?x17353) ?x17356) (* (* 2.0 l_0_8_200) l_0_8_205))))
 (let ((?x17366 (- (- ?x17360 (* (* 2.0 l_0_8_201) l_0_8_206)) (* (* 2.0 l_0_8_202) l_0_8_207))))
 (let ((?x17372 (- (- ?x17366 (* (* 2.0 l_0_8_203) l_0_8_208)) (* (* 2.0 l_0_8_204) l_0_8_209))))
 (let ((?x17380 (- (- (- ?x17372 ?x17373) (* (* 2.0 l_0_8_221) l_0_8_226)) (* (* 2.0 l_0_8_222) l_0_8_227))))
 (let ((?x17386 (- (- ?x17380 (* (* 2.0 l_0_8_223) l_0_8_228)) (* (* 2.0 l_0_8_224) l_0_8_229))))
 (let ((?x17398 (- (- (- (- ?x17386 (* (* 2.0 l_0_8_225) l_0_8_230)) ?x17391) ?x17394) ?x17397)))
 (let ((?x17416 (- (- (- (+ (- (- (- ?x17398 ?x17400) ?x17403) ?x17405) ?x15172) ?x17409) ?x17412) ?x17415)))
 (let ((?x17434 (+ (+ (+ (- (+ (- (- ?x17416 ?x17418) ?x17421) ?x17423) ?x15178) ?x17427) ?x17430) ?x17433)))
 (= (+ (+ ?x17434 ?x17436) ?x17439) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15180 (* l_0_8_64 l_0_8_64)))
 (let ((?x15181 (* 3.0 ?x15180)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17674 (* ?x15776 l_0_8_79)))
 (let ((?x15175 (* (* 3.0 l_0_8_43) l_0_8_43)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17653 (* ?x15769 l_0_8_58)))
 (let ((?x17651 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x17648 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x17645 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x17642 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x17639 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x17636 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x17633 (* l_0_8_231 l_0_8_231)))
 (let ((?x17631 (* l_0_8_230 l_0_8_230)))
 (let ((?x17629 (* l_0_8_229 l_0_8_229)))
 (let ((?x17627 (* l_0_8_228 l_0_8_228)))
 (let ((?x17625 (* l_0_8_227 l_0_8_227)))
 (let ((?x17623 (* l_0_8_226 l_0_8_226)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x15166 (* ?x15165 l_0_8_37)))
 (let ((?x17620 (* l_0_8_210 l_0_8_210)))
 (let ((?x16871 (* l_0_8_21 l_0_8_21)))
 (let ((?x17618 (* 6.0 ?x16871)))
 (let ((?x17616 (* l_0_8_209 l_0_8_209)))
 (let ((?x17614 (* l_0_8_208 l_0_8_208)))
 (let ((?x17612 (* l_0_8_207 l_0_8_207)))
 (let ((?x17610 (* l_0_8_206 l_0_8_206)))
 (let ((?x17608 (* l_0_8_205 l_0_8_205)))
 (let ((?x16869 (* l_0_8_20 l_0_8_20)))
 (let ((?x17606 (* 6.0 ?x16869)))
 (let ((?x16867 (* l_0_8_19 l_0_8_19)))
 (let ((?x17604 (* 6.0 ?x16867)))
 (let ((?x16865 (* l_0_8_18 l_0_8_18)))
 (let ((?x17602 (* 6.0 ?x16865)))
 (let ((?x16863 (* l_0_8_17 l_0_8_17)))
 (let ((?x17600 (* 6.0 ?x16863)))
 (let ((?x16860 (* l_0_8_16 l_0_8_16)))
 (let ((?x17598 (* 6.0 ?x16860)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x16949 (* ?x15396 l_0_8_142)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x15153 (* ?x15152 l_0_8_16)))
 (let ((?x17609 (- (+ (+ (+ (+ (+ (+ ?x15153 ?x16949) ?x17598) ?x17600) ?x17602) ?x17604) ?x17606) ?x17608)))
 (let ((?x17622 (- (- (+ (- (- (- (- ?x17609 ?x17610) ?x17612) ?x17614) ?x17616) ?x17618) ?x17620) ?x15166)))
 (let ((?x17637 (- (- (- (- (- (- (- ?x17622 ?x17623) ?x17625) ?x17627) ?x17629) ?x17631) ?x17633) ?x17636)))
 (let ((?x17655 (- (- (- (- (- (- (- ?x17637 ?x17639) ?x17642) ?x17645) ?x17648) ?x17651) ?x17653) ?x15175)))
 (let ((?x17661 (- (- ?x17655 (* (* 1.0 l_0_8_58) l_0_8_58)) (* (* 1.0 l_0_8_59) l_0_8_59))))
 (let ((?x17667 (- (- ?x17661 (* (* 1.0 l_0_8_60) l_0_8_60)) (* (* 1.0 l_0_8_61) l_0_8_61))))
 (let ((?x17673 (- (- ?x17667 (* (* 1.0 l_0_8_62) l_0_8_62)) (* (* 1.0 l_0_8_63) l_0_8_63))))
 (let ((?x17682 (+ (+ (+ (+ ?x17673 ?x17674) ?x15181) (* 1.0 (* l_0_8_79 l_0_8_79))) (* 1.0 (* l_0_8_80 l_0_8_80)))))
 (let ((?x17688 (+ (+ ?x17682 (* 1.0 (* l_0_8_81 l_0_8_81))) (* 1.0 (* l_0_8_82 l_0_8_82)))))
 (let ((?x17694 (+ (+ ?x17688 (* 1.0 (* l_0_8_83 l_0_8_83))) (* 1.0 (* l_0_8_84 l_0_8_84)))))
 (= ?x17694 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17844 (* l_0_8_69 l_0_8_69)))
 (let ((?x17845 (* 3.0 ?x17844)))
 (let ((?x17841 (* l_0_8_68 l_0_8_68)))
 (let ((?x17842 (* 3.0 ?x17841)))
 (let ((?x17838 (* l_0_8_67 l_0_8_67)))
 (let ((?x17839 (* 3.0 ?x17838)))
 (let ((?x16077 (* l_0_8_6 l_0_8_6)))
 (let ((?x17836 (* 6.0 ?x16077)))
 (let ((?x16075 (* l_0_8_5 l_0_8_5)))
 (let ((?x17834 (* 6.0 ?x16075)))
 (let ((?x17832 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x17829 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x16073 (* l_0_8_4 l_0_8_4)))
 (let ((?x17823 (* 6.0 ?x16073)))
 (let ((?x17821 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x17818 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x17815 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x17812 (* l_0_8_132 l_0_8_132)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x17810 (* ?x17809 l_0_8_144)))
 (let ((?x17807 (* l_0_8_131 l_0_8_131)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x17805 (* ?x17804 l_0_8_143)))
 (let ((?x17806 (- (+ (* (* (- 2.0) l_0_8_130) l_0_8_142) (* l_0_8_130 l_0_8_130)) ?x17805)))
 (let ((?x17824 (+ (- (- (- (+ (- (+ ?x17806 ?x17807) ?x17810) ?x17812) ?x17815) ?x17818) ?x17821) ?x17823)))
 (let ((?x17835 (+ (- (- (- ?x17824 (* (* 3.0 l_0_8_46) l_0_8_46)) ?x17829) ?x17832) ?x17834)))
 (= (+ (+ (+ (+ ?x17835 ?x17836) ?x17839) ?x17842) ?x17845) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x17995 (* ?x17994 l_0_8_72)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x17992 (* ?x17991 l_0_8_71)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x17989 (* ?x17988 l_0_8_70)))
 (let ((?x17986 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x17983 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x17980 (* ?x17979 l_0_8_51)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x17977 (* ?x17976 l_0_8_50)))
 (let ((?x17971 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x17968 (* ?x16984 l_0_8_30)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x17966 (* ?x16981 l_0_8_29)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x17964 (* ?x16978 l_0_8_28)))
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x17962 (* ?x17961 l_0_8_186)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x17959 (* ?x17958 l_0_8_185)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x17956 (* ?x17955 l_0_8_184)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x17953 (* ?x17952 l_0_8_165)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x17950 (* ?x17949 l_0_8_164)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x17947 (* ?x17946 l_0_8_163)))
 (let ((?x17943 (* 2.0 l_0_8_136)))
 (let ((?x17944 (* ?x17943 l_0_8_145)))
 (let ((?x17940 (* 2.0 l_0_8_135)))
 (let ((?x17941 (* ?x17940 l_0_8_144)))
 (let ((?x17937 (* 2.0 l_0_8_134)))
 (let ((?x17938 (* ?x17937 l_0_8_143)))
 (let ((?x17934 (* 2.0 l_0_8_133)))
 (let ((?x17935 (* ?x17934 l_0_8_142)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x17932 (* ?x17809 l_0_8_135)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x17930 (* ?x17804 l_0_8_134)))
 (let ((?x17927 (* 2.0 l_0_8_130)))
 (let ((?x17928 (* ?x17927 l_0_8_133)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x17925 (* ?x17924 l_0_8_123)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x17922 (* ?x17921 l_0_8_122)))
 (let ((?x17918 (* 2.0 l_0_8_109)))
 (let ((?x17919 (* ?x17918 l_0_8_121)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x17916 (* ?x17915 l_0_8_90)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x17913 (* ?x16571 l_0_8_89)))
 (let ((?x17923 (+ (+ (- (- (* (* (- 2.0) l_0_8_100) l_0_8_88) ?x17913) ?x17916) ?x17919) ?x17922)))
 (let ((?x17942 (- (- (- (+ (+ (+ (+ ?x17923 ?x17925) ?x17928) ?x17930) ?x17932) ?x17935) ?x17938) ?x17941)))
 (let ((?x17963 (- (- (- (+ (+ (+ (- ?x17942 ?x17944) ?x17947) ?x17950) ?x17953) ?x17956) ?x17959) ?x17962)))
 (let ((?x17975 (- (+ (- (- (- ?x17963 ?x17964) ?x17966) ?x17968) ?x17971) (* (* 6.0 l_0_8_46) l_0_8_49))))
 (let ((?x17996 (+ (+ (+ (+ (+ (- (- ?x17975 ?x17977) ?x17980) ?x17983) ?x17986) ?x17989) ?x17992) ?x17995)))
 (= ?x17996 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x17007 (* ?x17006 l_0_8_81)))
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x18177 (* ?x17994 l_0_8_76)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x17004 (* ?x17003 l_0_8_80)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x18174 (* ?x17991 l_0_8_75)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x17001 (* ?x17000 l_0_8_79)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x18171 (* ?x17988 l_0_8_74)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x16996 (* ?x16995 l_0_8_60)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x18168 (* ?x17979 l_0_8_55)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x16993 (* ?x16992 l_0_8_59)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x18165 (* ?x17976 l_0_8_54)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x16990 (* ?x16989 l_0_8_58)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x18160 (* ?x16984 l_0_8_34)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x18158 (* ?x16981 l_0_8_33)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x18156 (* ?x16978 l_0_8_32)))
 (let ((?x18154 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18151 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x18148 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18145 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18142 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x18139 (* ?x17809 l_0_8_139)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x18137 (* ?x17804 l_0_8_138)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x18114 (* ?x17349 l_0_8_6)))
 (let ((?x18112 (+ (* (* 12.0 l_0_8_11) l_0_8_4) (* (* 12.0 l_0_8_12) l_0_8_5))))
 (let ((?x18140 (+ (+ (+ (+ ?x18112 ?x18114) (* (* 2.0 l_0_8_130) l_0_8_137)) ?x18137) ?x18139)))
 (let ((?x18159 (- (- (- (- (- (- (- ?x18140 ?x18142) ?x18145) ?x18148) ?x18151) ?x18154) ?x18156) ?x18158)))
 (let ((?x18166 (- (+ (- (- ?x18159 ?x18160) (* (* 6.0 l_0_8_46) l_0_8_53)) ?x16990) ?x18165)))
 (let ((?x18176 (- (+ (- (+ (+ (- (+ ?x18166 ?x16993) ?x18168) ?x16996) ?x18171) ?x17001) ?x18174) ?x17004)))
 (= (- (+ ?x18176 ?x18177) ?x17007) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x18311 (* ?x17994 l_0_8_81)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x18309 (* ?x17991 l_0_8_80)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x18307 (* ?x17988 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x16998 (* ?x15776 l_0_8_67)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x18304 (* ?x17979 l_0_8_60)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x18302 (* ?x17976 l_0_8_59)))
 (let ((?x17973 (* 6.0 l_0_8_46)))
 (let ((?x18300 (* ?x17973 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x16987 (* ?x15769 l_0_8_46)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x16985 (* ?x16984 l_0_8_39)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x16982 (* ?x16981 l_0_8_38)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x16979 (* ?x16978 l_0_8_37)))
 (let ((?x16955 (* 12.0 l_0_8_18)))
 (let ((?x16956 (* ?x16955 l_0_8_6)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x16953 (* ?x15751 l_0_8_5)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x16951 (* ?x15748 l_0_8_4)))
 (let ((?x18291 (* l_0_8_147 l_0_8_147)))
 (let ((?x18289 (* l_0_8_146 l_0_8_146)))
 (let ((?x18287 (* l_0_8_145 l_0_8_145)))
 (let ((?x18285 (* l_0_8_144 l_0_8_144)))
 (let ((?x18283 (* l_0_8_143 l_0_8_143)))
 (let ((?x18281 (* l_0_8_142 l_0_8_142)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x17810 (* ?x17809 l_0_8_144)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x17805 (* ?x17804 l_0_8_143)))
 (let ((?x18284 (- (- (+ (+ (* (* 2.0 l_0_8_130) l_0_8_142) ?x17805) ?x17810) ?x18281) ?x18283)))
 (let ((?x18295 (+ (+ (+ (- (- (- (- ?x18284 ?x18285) ?x18287) ?x18289) ?x18291) ?x16951) ?x16953) ?x16956)))
 (let ((?x18305 (- (- (- (- (- (- (- ?x18295 ?x16979) ?x16982) ?x16985) ?x16987) ?x18300) ?x18302) ?x18304)))
 (= (+ (+ (+ (+ ?x18305 ?x16998) ?x18307) ?x18309) ?x18311) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x16405 (* l_0_8_9 l_0_8_9)))
 (let ((?x18456 (* 6.0 ?x16405)))
 (let ((?x16399 (* l_0_8_8 l_0_8_8)))
 (let ((?x18454 (* 6.0 ?x16399)))
 (let ((?x18451 (* l_0_8_73 l_0_8_73)))
 (let ((?x18452 (* 3.0 ?x18451)))
 (let ((?x18448 (* l_0_8_72 l_0_8_72)))
 (let ((?x18449 (* 3.0 ?x18448)))
 (let ((?x18445 (* l_0_8_71 l_0_8_71)))
 (let ((?x18446 (* 3.0 ?x18445)))
 (let ((?x18442 (* l_0_8_70 l_0_8_70)))
 (let ((?x18443 (* 3.0 ?x18442)))
 (let ((?x16397 (* l_0_8_7 l_0_8_7)))
 (let ((?x18440 (* 6.0 ?x16397)))
 (let ((?x18438 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x18435 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x18432 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x18426 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x18423 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x18420 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x18417 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x18413 (* 2.0 l_0_8_178)))
 (let ((?x18414 (* ?x18413 l_0_8_187)))
 (let ((?x18410 (* 2.0 l_0_8_177)))
 (let ((?x18411 (* ?x18410 l_0_8_186)))
 (let ((?x18407 (* 2.0 l_0_8_176)))
 (let ((?x18408 (* ?x18407 l_0_8_185)))
 (let ((?x18404 (* 2.0 l_0_8_175)))
 (let ((?x18405 (* ?x18404 l_0_8_184)))
 (let ((?x18401 (* 2.0 l_0_8_157)))
 (let ((?x18402 (* ?x18401 l_0_8_166)))
 (let ((?x18398 (* 2.0 l_0_8_156)))
 (let ((?x18399 (* ?x18398 l_0_8_165)))
 (let ((?x18395 (* 2.0 l_0_8_155)))
 (let ((?x18396 (* ?x18395 l_0_8_164)))
 (let ((?x18392 (* 2.0 l_0_8_154)))
 (let ((?x18393 (* ?x18392 l_0_8_163)))
 (let ((?x18390 (* l_0_8_136 l_0_8_136)))
 (let ((?x18388 (* l_0_8_135 l_0_8_135)))
 (let ((?x18386 (* l_0_8_134 l_0_8_134)))
 (let ((?x18384 (* l_0_8_133 l_0_8_133)))
 (let ((?x18381 (* 2.0 l_0_8_115)))
 (let ((?x18382 (* ?x18381 l_0_8_124)))
 (let ((?x18378 (* 2.0 l_0_8_114)))
 (let ((?x18379 (* ?x18378 l_0_8_123)))
 (let ((?x18375 (* 2.0 l_0_8_113)))
 (let ((?x18376 (* ?x18375 l_0_8_122)))
 (let ((?x18372 (* 2.0 l_0_8_112)))
 (let ((?x18373 (* ?x18372 l_0_8_121)))
 (let ((?x18369 (* 2.0 l_0_8_103)))
 (let ((?x18370 (* ?x18369 l_0_8_94)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x18367 (* ?x17915 l_0_8_93)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x18365 (* ?x16571 l_0_8_92)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x18363 (* ?x16568 l_0_8_91)))
 (let ((?x16409 (* l_0_8_10 l_0_8_10)))
 (let ((?x18362 (* 6.0 ?x16409)))
 (let ((?x18380 (+ (+ (+ (- (- (- (- ?x18362 ?x18363) ?x18365) ?x18367) ?x18370) ?x18373) ?x18376) ?x18379)))
 (let ((?x18397 (+ (+ (+ (+ (+ (+ (+ ?x18380 ?x18382) ?x18384) ?x18386) ?x18388) ?x18390) ?x18393) ?x18396)))
 (let ((?x18418 (- (- (- (- (- (+ (+ ?x18397 ?x18399) ?x18402) ?x18405) ?x18408) ?x18411) ?x18414) ?x18417)))
 (let ((?x18430 (- (- (- (- ?x18418 ?x18420) ?x18423) ?x18426) (* (* 3.0 l_0_8_49) l_0_8_49))))
 (let ((?x18450 (+ (+ (+ (+ (- (- (- ?x18430 ?x18432) ?x18435) ?x18438) ?x18440) ?x18443) ?x18446) ?x18449)))
 (= (+ (+ (+ ?x18450 ?x18452) ?x18454) ?x18456) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17197 (* 2.0 l_0_8_73)))
 (let ((?x17198 (* ?x17197 l_0_8_82)))
 (let ((?x18697 (* 6.0 l_0_8_73)))
 (let ((?x18698 (* ?x18697 l_0_8_77)))
 (let ((?x17194 (* 2.0 l_0_8_72)))
 (let ((?x17195 (* ?x17194 l_0_8_81)))
 (let ((?x18693 (* 6.0 l_0_8_72)))
 (let ((?x18694 (* ?x18693 l_0_8_76)))
 (let ((?x17191 (* 2.0 l_0_8_71)))
 (let ((?x17192 (* ?x17191 l_0_8_80)))
 (let ((?x18689 (* 6.0 l_0_8_71)))
 (let ((?x18690 (* ?x18689 l_0_8_75)))
 (let ((?x17188 (* 2.0 l_0_8_70)))
 (let ((?x17189 (* ?x17188 l_0_8_79)))
 (let ((?x18685 (* 6.0 l_0_8_70)))
 (let ((?x18686 (* ?x18685 l_0_8_74)))
 (let ((?x17183 (* 2.0 l_0_8_52)))
 (let ((?x17184 (* ?x17183 l_0_8_61)))
 (let ((?x18681 (* 6.0 l_0_8_52)))
 (let ((?x18682 (* ?x18681 l_0_8_56)))
 (let ((?x17180 (* 2.0 l_0_8_51)))
 (let ((?x17181 (* ?x17180 l_0_8_60)))
 (let ((?x18677 (* 6.0 l_0_8_51)))
 (let ((?x18678 (* ?x18677 l_0_8_55)))
 (let ((?x17177 (* 2.0 l_0_8_50)))
 (let ((?x17178 (* ?x17177 l_0_8_59)))
 (let ((?x18673 (* 6.0 l_0_8_50)))
 (let ((?x18674 (* ?x18673 l_0_8_54)))
 (let ((?x17174 (* 2.0 l_0_8_49)))
 (let ((?x17175 (* ?x17174 l_0_8_58)))
 (let ((?x17169 (* 12.0 l_0_8_31)))
 (let ((?x18667 (* ?x17169 l_0_8_35)))
 (let ((?x17166 (* 12.0 l_0_8_30)))
 (let ((?x18665 (* ?x17166 l_0_8_34)))
 (let ((?x17163 (* 12.0 l_0_8_29)))
 (let ((?x18663 (* ?x17163 l_0_8_33)))
 (let ((?x17160 (* 12.0 l_0_8_28)))
 (let ((?x18661 (* ?x17160 l_0_8_32)))
 (let ((?x18659 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x18656 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x18653 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x18650 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x18647 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x18644 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x18641 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x18638 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x18635 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x18632 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x17943 (* 2.0 l_0_8_136)))
 (let ((?x18629 (* ?x17943 l_0_8_140)))
 (let ((?x17940 (* 2.0 l_0_8_135)))
 (let ((?x18627 (* ?x17940 l_0_8_139)))
 (let ((?x17937 (* 2.0 l_0_8_134)))
 (let ((?x18625 (* ?x17937 l_0_8_138)))
 (let ((?x17934 (* 2.0 l_0_8_133)))
 (let ((?x18623 (* ?x17934 l_0_8_137)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x18621 (* ?x17349 l_0_8_9)))
 (let ((?x18619 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x18616 (* ?x15648 l_0_8_8)))
 (let ((?x18614 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x18611 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x18608 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x18605 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x18602 (* ?x15645 l_0_8_7)))
 (let ((?x18600 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x18369 (* 2.0 l_0_8_103)))
 (let ((?x18597 (* ?x18369 l_0_8_98)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x18595 (* ?x17915 l_0_8_97)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x18593 (* ?x16571 l_0_8_96)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x18591 (* ?x16568 l_0_8_95)))
 (let ((?x17115 (* 12.0 l_0_8_10)))
 (let ((?x18568 (* ?x17115 l_0_8_14)))
 (let ((?x18606 (+ (+ (- (- (- (- (- ?x18568 ?x18591) ?x18593) ?x18595) ?x18597) ?x18600) ?x18602) ?x18605)))
 (let ((?x18624 (+ (+ (+ (+ (+ (+ (+ ?x18606 ?x18608) ?x18611) ?x18614) ?x18616) ?x18619) ?x18621) ?x18623)))
 (let ((?x18642 (+ (+ (+ (+ (+ (+ (+ ?x18624 ?x18625) ?x18627) ?x18629) ?x18632) ?x18635) ?x18638) ?x18641)))
 (let ((?x18662 (- (- (- (- (- (- (+ ?x18642 ?x18644) ?x18647) ?x18650) ?x18653) ?x18656) ?x18659) ?x18661)))
 (let ((?x18671 (- (- (- (- ?x18662 ?x18663) ?x18665) ?x18667) (* (* 6.0 l_0_8_49) l_0_8_53))))
 (let ((?x18684 (+ (- (+ (- (+ (- (+ ?x18671 ?x17175) ?x18674) ?x17178) ?x18678) ?x17181) ?x18682) ?x17184)))
 (let ((?x18699 (+ (- (+ (- (+ (- (+ ?x18684 ?x18686) ?x17189) ?x18690) ?x17192) ?x18694) ?x17195) ?x18698)))
 (= (- ?x18699 ?x17198) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18697 (* 6.0 l_0_8_73)))
 (let ((?x18946 (* ?x18697 l_0_8_82)))
 (let ((?x18693 (* 6.0 l_0_8_72)))
 (let ((?x18944 (* ?x18693 l_0_8_81)))
 (let ((?x18689 (* 6.0 l_0_8_71)))
 (let ((?x18942 (* ?x18689 l_0_8_80)))
 (let ((?x18685 (* 6.0 l_0_8_70)))
 (let ((?x18940 (* ?x18685 l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17186 (* ?x15776 l_0_8_70)))
 (let ((?x18681 (* 6.0 l_0_8_52)))
 (let ((?x18937 (* ?x18681 l_0_8_61)))
 (let ((?x18677 (* 6.0 l_0_8_51)))
 (let ((?x18935 (* ?x18677 l_0_8_60)))
 (let ((?x18673 (* 6.0 l_0_8_50)))
 (let ((?x18933 (* ?x18673 l_0_8_59)))
 (let ((?x18669 (* 6.0 l_0_8_49)))
 (let ((?x18931 (* ?x18669 l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17172 (* ?x15769 l_0_8_49)))
 (let ((?x17169 (* 12.0 l_0_8_31)))
 (let ((?x17170 (* ?x17169 l_0_8_40)))
 (let ((?x17166 (* 12.0 l_0_8_30)))
 (let ((?x17167 (* ?x17166 l_0_8_39)))
 (let ((?x17163 (* 12.0 l_0_8_29)))
 (let ((?x17164 (* ?x17163 l_0_8_38)))
 (let ((?x17160 (* 12.0 l_0_8_28)))
 (let ((?x17161 (* ?x17160 l_0_8_37)))
 (let ((?x18924 (* l_0_8_189 l_0_8_189)))
 (let ((?x18922 (* l_0_8_188 l_0_8_188)))
 (let ((?x18920 (* l_0_8_187 l_0_8_187)))
 (let ((?x18918 (* l_0_8_186 l_0_8_186)))
 (let ((?x18916 (* l_0_8_185 l_0_8_185)))
 (let ((?x18914 (* l_0_8_184 l_0_8_184)))
 (let ((?x16955 (* 12.0 l_0_8_18)))
 (let ((?x17132 (* ?x16955 l_0_8_9)))
 (let ((?x15751 (* 12.0 l_0_8_17)))
 (let ((?x17130 (* ?x15751 l_0_8_8)))
 (let ((?x18910 (* l_0_8_168 l_0_8_168)))
 (let ((?x18908 (* l_0_8_167 l_0_8_167)))
 (let ((?x18906 (* l_0_8_166 l_0_8_166)))
 (let ((?x18904 (* l_0_8_165 l_0_8_165)))
 (let ((?x18902 (* l_0_8_164 l_0_8_164)))
 (let ((?x18900 (* l_0_8_163 l_0_8_163)))
 (let ((?x15748 (* 12.0 l_0_8_16)))
 (let ((?x17126 (* ?x15748 l_0_8_7)))
 (let ((?x17943 (* 2.0 l_0_8_136)))
 (let ((?x17944 (* ?x17943 l_0_8_145)))
 (let ((?x17940 (* 2.0 l_0_8_135)))
 (let ((?x17941 (* ?x17940 l_0_8_144)))
 (let ((?x17937 (* 2.0 l_0_8_134)))
 (let ((?x17938 (* ?x17937 l_0_8_143)))
 (let ((?x17934 (* 2.0 l_0_8_133)))
 (let ((?x17935 (* ?x17934 l_0_8_142)))
 (let ((?x18893 (* l_0_8_126 l_0_8_126)))
 (let ((?x18891 (* l_0_8_125 l_0_8_125)))
 (let ((?x18889 (* l_0_8_124 l_0_8_124)))
 (let ((?x18887 (* l_0_8_123 l_0_8_123)))
 (let ((?x18885 (* l_0_8_122 l_0_8_122)))
 (let ((?x18883 (* l_0_8_121 l_0_8_121)))
 (let ((?x18881 (* l_0_8_105 l_0_8_105)))
 (let ((?x18879 (* l_0_8_104 l_0_8_104)))
 (let ((?x18877 (* l_0_8_103 l_0_8_103)))
 (let ((?x18875 (* l_0_8_102 l_0_8_102)))
 (let ((?x18873 (* l_0_8_101 l_0_8_101)))
 (let ((?x18874 (- (- (* (* 12.0 l_0_8_10) l_0_8_19) (* l_0_8_100 l_0_8_100)) ?x18873)))
 (let ((?x18888 (+ (+ (+ (- (- (- (- ?x18874 ?x18875) ?x18877) ?x18879) ?x18881) ?x18883) ?x18885) ?x18887)))
 (let ((?x18898 (+ (+ (+ (+ (+ (+ (+ ?x18888 ?x18889) ?x18891) ?x18893) ?x17935) ?x17938) ?x17941) ?x17944)))
 (let ((?x18911 (+ (+ (+ (+ (+ (+ (+ ?x18898 ?x17126) ?x18900) ?x18902) ?x18904) ?x18906) ?x18908) ?x18910)))
 (let ((?x18923 (- (- (- (- (- (+ (+ ?x18911 ?x17130) ?x17132) ?x18914) ?x18916) ?x18918) ?x18920) ?x18922)))
 (let ((?x18932 (- (- (- (- (- (- (- ?x18923 ?x18924) ?x17161) ?x17164) ?x17167) ?x17170) ?x17172) ?x18931)))
 (let ((?x18945 (+ (+ (+ (+ (- (- (- ?x18932 ?x18933) ?x18935) ?x18937) ?x17186) ?x18940) ?x18942) ?x18944)))
 (= (+ ?x18945 ?x18946) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19092 (* l_0_8_78 l_0_8_78)))
 (let ((?x19093 (* 3.0 ?x19092)))
 (let ((?x17439 (* (* 2.0 l_0_8_78) l_0_8_83)))
 (let ((?x19088 (* l_0_8_77 l_0_8_77)))
 (let ((?x19089 (* 3.0 ?x19088)))
 (let ((?x17436 (* (* 2.0 l_0_8_77) l_0_8_82)))
 (let ((?x19084 (* l_0_8_76 l_0_8_76)))
 (let ((?x19085 (* 3.0 ?x19084)))
 (let ((?x17433 (* (* 2.0 l_0_8_76) l_0_8_81)))
 (let ((?x19080 (* l_0_8_75 l_0_8_75)))
 (let ((?x19081 (* 3.0 ?x19080)))
 (let ((?x17430 (* (* 2.0 l_0_8_75) l_0_8_80)))
 (let ((?x19076 (* l_0_8_74 l_0_8_74)))
 (let ((?x19077 (* 3.0 ?x19076)))
 (let ((?x17427 (* (* 2.0 l_0_8_74) l_0_8_79)))
 (let ((?x19073 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x17421 (* (* 2.0 l_0_8_57) l_0_8_62)))
 (let ((?x19069 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x17418 (* (* 2.0 l_0_8_56) l_0_8_61)))
 (let ((?x19065 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x17415 (* (* 2.0 l_0_8_55) l_0_8_60)))
 (let ((?x19061 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x17412 (* (* 2.0 l_0_8_54) l_0_8_59)))
 (let ((?x17409 (* (* 2.0 l_0_8_53) l_0_8_58)))
 (let ((?x19053 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x19050 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x19047 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x19044 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x19041 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x16704 (* l_0_8_15 l_0_8_15)))
 (let ((?x19038 (* 6.0 ?x16704)))
 (let ((?x19036 (* l_0_8_141 l_0_8_141)))
 (let ((?x19034 (* l_0_8_140 l_0_8_140)))
 (let ((?x16702 (* l_0_8_14 l_0_8_14)))
 (let ((?x19032 (* 6.0 ?x16702)))
 (let ((?x19030 (* l_0_8_139 l_0_8_139)))
 (let ((?x19028 (* l_0_8_138 l_0_8_138)))
 (let ((?x19026 (* l_0_8_137 l_0_8_137)))
 (let ((?x16700 (* l_0_8_13 l_0_8_13)))
 (let ((?x19024 (* 6.0 ?x16700)))
 (let ((?x16698 (* l_0_8_12 l_0_8_12)))
 (let ((?x19022 (* 6.0 ?x16698)))
 (let ((?x16722 (* l_0_8_11 l_0_8_11)))
 (let ((?x19021 (* 6.0 ?x16722)))
 (let ((?x19025 (+ (+ ?x19021 ?x19022) ?x19024)))
 (let ((?x19039 (+ (+ (+ (+ (+ (+ (+ ?x19025 ?x19026) ?x19028) ?x19030) ?x19032) ?x19034) ?x19036) ?x19038)))
 (let ((?x19058 (- (+ (- (- (- (- (- ?x19039 ?x19041) ?x19044) ?x19047) ?x19050) ?x19053) ?x17409) (* (* 3.0 l_0_8_53) l_0_8_53))))
 (let ((?x19071 (+ (- (+ (- (+ (- (+ ?x19058 ?x17412) ?x19061) ?x17415) ?x19065) ?x17418) ?x19069) ?x17421)))
 (let ((?x19086 (+ (- (+ (- (+ (- (- ?x19071 ?x19073) ?x17427) ?x19077) ?x17430) ?x19081) ?x17433) ?x19085)))
 (= (+ (- (+ (- ?x19086 ?x17436) ?x19089) ?x17439) ?x19093) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17692 (* l_0_8_84 l_0_8_84)))
 (let ((?x17689 (* l_0_8_83 l_0_8_83)))
 (let ((?x17686 (* l_0_8_82 l_0_8_82)))
 (let ((?x17683 (* l_0_8_81 l_0_8_81)))
 (let ((?x17680 (* l_0_8_80 l_0_8_80)))
 (let ((?x17677 (* l_0_8_79 l_0_8_79)))
 (let ((?x19233 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x19230 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x19227 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x19224 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x19221 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17423 (* ?x15776 l_0_8_74)))
 (let ((?x17793 (* l_0_8_63 l_0_8_63)))
 (let ((?x17789 (* l_0_8_62 l_0_8_62)))
 (let ((?x17785 (* l_0_8_61 l_0_8_61)))
 (let ((?x17781 (* l_0_8_60 l_0_8_60)))
 (let ((?x17777 (* l_0_8_59 l_0_8_59)))
 (let ((?x17773 (* l_0_8_58 l_0_8_58)))
 (let ((?x19211 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x19208 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x19205 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x19202 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x19199 (* (* 6.0 l_0_8_53) l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17405 (* ?x15769 l_0_8_53)))
 (let ((?x17403 (* (* 12.0 l_0_8_36) l_0_8_41)))
 (let ((?x17400 (* (* 12.0 l_0_8_35) l_0_8_40)))
 (let ((?x17397 (* (* 12.0 l_0_8_34) l_0_8_39)))
 (let ((?x17394 (* (* 12.0 l_0_8_33) l_0_8_38)))
 (let ((?x17391 (* (* 12.0 l_0_8_32) l_0_8_37)))
 (let ((?x17356 (* (* 12.0 l_0_8_15) l_0_8_20)))
 (let ((?x18154 (* (* 2.0 l_0_8_141) l_0_8_146)))
 (let ((?x18151 (* (* 2.0 l_0_8_140) l_0_8_145)))
 (let ((?x17353 (* (* 12.0 l_0_8_14) l_0_8_19)))
 (let ((?x18148 (* (* 2.0 l_0_8_139) l_0_8_144)))
 (let ((?x18145 (* (* 2.0 l_0_8_138) l_0_8_143)))
 (let ((?x18142 (* (* 2.0 l_0_8_137) l_0_8_142)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x17350 (* ?x17349 l_0_8_18)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x17345 (* ?x15648 l_0_8_17)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x17343 (* ?x15645 l_0_8_16)))
 (let ((?x19189 (+ (+ (+ (+ (+ (+ (+ ?x17343 ?x17345) ?x17350) ?x18142) ?x18145) ?x18148) ?x17353) ?x18151)))
 (let ((?x19196 (- (- (- (- (- (+ (+ ?x19189 ?x18154) ?x17356) ?x17391) ?x17394) ?x17397) ?x17400) ?x17403)))
 (let ((?x19213 (+ (- (- (- (- (- (- ?x19196 ?x17405) ?x19199) ?x19202) ?x19205) ?x19208) ?x19211) ?x17773)))
 (let ((?x19222 (+ (+ (+ (+ (+ (+ (+ ?x19213 ?x17777) ?x17781) ?x17785) ?x17789) ?x17793) ?x17423) ?x19221)))
 (let ((?x19237 (- (- (- (+ (+ (+ (+ ?x19222 ?x19224) ?x19227) ?x19230) ?x19233) ?x17677) ?x17680) ?x17683)))
 (= (- (- (- ?x19237 ?x17686) ?x17689) ?x17692) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19361 (* l_0_8_85 l_0_8_85)))
 (let ((?x17692 (* l_0_8_84 l_0_8_84)))
 (let ((?x19359 (* 3.0 ?x17692)))
 (let ((?x17689 (* l_0_8_83 l_0_8_83)))
 (let ((?x19357 (* 3.0 ?x17689)))
 (let ((?x17686 (* l_0_8_82 l_0_8_82)))
 (let ((?x19355 (* 3.0 ?x17686)))
 (let ((?x17683 (* l_0_8_81 l_0_8_81)))
 (let ((?x19353 (* 3.0 ?x17683)))
 (let ((?x17680 (* l_0_8_80 l_0_8_80)))
 (let ((?x19351 (* 3.0 ?x17680)))
 (let ((?x17677 (* l_0_8_79 l_0_8_79)))
 (let ((?x19349 (* 3.0 ?x17677)))
 (let ((?x15776 (* 6.0 l_0_8_64)))
 (let ((?x17674 (* ?x15776 l_0_8_79)))
 (let ((?x19346 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x19343 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x19340 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x19337 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x19334 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x19331 (* (* 3.0 l_0_8_58) l_0_8_58)))
 (let ((?x15769 (* 6.0 l_0_8_43)))
 (let ((?x17653 (* ?x15769 l_0_8_58)))
 (let ((?x17651 (* (* 6.0 l_0_8_42) l_0_8_42)))
 (let ((?x17648 (* (* 6.0 l_0_8_41) l_0_8_41)))
 (let ((?x17645 (* (* 6.0 l_0_8_40) l_0_8_40)))
 (let ((?x17642 (* (* 6.0 l_0_8_39) l_0_8_39)))
 (let ((?x17639 (* (* 6.0 l_0_8_38) l_0_8_38)))
 (let ((?x17636 (* (* 6.0 l_0_8_37) l_0_8_37)))
 (let ((?x16871 (* l_0_8_21 l_0_8_21)))
 (let ((?x17618 (* 6.0 ?x16871)))
 (let ((?x16869 (* l_0_8_20 l_0_8_20)))
 (let ((?x17606 (* 6.0 ?x16869)))
 (let ((?x16867 (* l_0_8_19 l_0_8_19)))
 (let ((?x17604 (* 6.0 ?x16867)))
 (let ((?x16865 (* l_0_8_18 l_0_8_18)))
 (let ((?x17602 (* 6.0 ?x16865)))
 (let ((?x16863 (* l_0_8_17 l_0_8_17)))
 (let ((?x17600 (* 6.0 ?x16863)))
 (let ((?x19316 (* l_0_8_169 l_0_8_169)))
 (let ((?x16860 (* l_0_8_16 l_0_8_16)))
 (let ((?x17598 (* 6.0 ?x16860)))
 (let ((?x19313 (* l_0_8_148 l_0_8_148)))
 (let ((?x18291 (* l_0_8_147 l_0_8_147)))
 (let ((?x18289 (* l_0_8_146 l_0_8_146)))
 (let ((?x18287 (* l_0_8_145 l_0_8_145)))
 (let ((?x18285 (* l_0_8_144 l_0_8_144)))
 (let ((?x18283 (* l_0_8_143 l_0_8_143)))
 (let ((?x19308 (+ (+ (* (- l_0_8_106) l_0_8_106) (* l_0_8_142 l_0_8_142)) ?x18283)))
 (let ((?x19317 (+ (+ (- (+ (+ (+ (+ ?x19308 ?x18285) ?x18287) ?x18289) ?x18291) ?x19313) ?x17598) ?x19316)))
 (let ((?x19324 (- (- (+ (+ (+ (+ (+ ?x19317 ?x17600) ?x17602) ?x17604) ?x17606) ?x17618) ?x17636) ?x17639)))
 (let ((?x19335 (- (- (- (- (- (- (- ?x19324 ?x17642) ?x17645) ?x17648) ?x17651) ?x17653) ?x19331) ?x19334)))
 (let ((?x19352 (+ (+ (+ (- (- (- (- ?x19335 ?x19337) ?x19340) ?x19343) ?x19346) ?x17674) ?x19349) ?x19351)))
 (= (+ (+ (+ (+ (+ ?x19352 ?x19353) ?x19355) ?x19357) ?x19359) ?x19361) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19441 (* ?x15177 l_0_8_67)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19439 (* ?x15171 l_0_8_46)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x16976 (* ?x15165 l_0_8_25)))
 (let ((?x19435 (- (- (* (* 12.0 l_0_8_1) l_0_8_4) (* l_0_8_127 l_0_8_127)) (* (* 2.0 l_0_8_190) l_0_8_193))))
 (let ((?x19442 (+ (- (- (- ?x19435 (* (* 2.0 l_0_8_211) l_0_8_214)) ?x16976) ?x19439) ?x19441)))
 (= ?x19442 0.0))))))))))
(assert
 (let ((?x19361 (* l_0_8_85 l_0_8_85)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19480 (* ?x15177 l_0_8_70)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19478 (* ?x15171 l_0_8_49)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x17155 (* ?x15165 l_0_8_28)))
 (let ((?x19316 (* l_0_8_169 l_0_8_169)))
 (let ((?x19313 (* l_0_8_148 l_0_8_148)))
 (let ((?x19467 (+ (+ (* (* 12.0 l_0_8_1) l_0_8_7) (* l_0_8_106 l_0_8_106)) ?x19313)))
 (let ((?x19476 (- (- (- ?x19467 ?x19316) (* (* 2.0 l_0_8_190) l_0_8_196)) (* (* 2.0 l_0_8_211) l_0_8_217))))
 (= (- (+ (- (- ?x19476 ?x17155) ?x19478) ?x19480) ?x19361) 0.0)))))))))))))
(assert
 (let ((?x15180 (* l_0_8_64 l_0_8_64)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19519 (* ?x15177 l_0_8_74)))
 (let ((?x15218 (* l_0_8_43 l_0_8_43)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19516 (* ?x15171 l_0_8_53)))
 (let ((?x15165 (* 12.0 l_0_8_22)))
 (let ((?x17373 (* ?x15165 l_0_8_32)))
 (let ((?x15152 (* 12.0 l_0_8_1)))
 (let ((?x17342 (* ?x15152 l_0_8_11)))
 (let ((?x19514 (- (- ?x17342 (* (* 2.0 l_0_8_190) l_0_8_200)) (* (* 2.0 l_0_8_211) l_0_8_221))))
 (= (- (+ (+ (- (- ?x19514 ?x17373) ?x19516) ?x15218) ?x19519) ?x15180) 0.0)))))))))))))
(assert
 (let ((?x16077 (* l_0_8_6 l_0_8_6)))
 (let ((?x17836 (* 6.0 ?x16077)))
 (let ((?x16075 (* l_0_8_5 l_0_8_5)))
 (let ((?x17834 (* 6.0 ?x16075)))
 (let ((?x16073 (* l_0_8_4 l_0_8_4)))
 (let ((?x17823 (* 6.0 ?x16073)))
 (let ((?x17821 (* (* 6.0 l_0_8_27) l_0_8_27)))
 (let ((?x17818 (* (* 6.0 l_0_8_26) l_0_8_26)))
 (let ((?x17815 (* (* 6.0 l_0_8_25) l_0_8_25)))
 (let ((?x19562 (* l_0_8_216 l_0_8_216)))
 (let ((?x19560 (* l_0_8_215 l_0_8_215)))
 (let ((?x19558 (* l_0_8_214 l_0_8_214)))
 (let ((?x19556 (* l_0_8_195 l_0_8_195)))
 (let ((?x19554 (* l_0_8_194 l_0_8_194)))
 (let ((?x19555 (- (- (* (* (- 2.0) l_0_8_127) l_0_8_130) (* l_0_8_193 l_0_8_193)) ?x19554)))
 (let ((?x19566 (- (- (- (- (- (- (- ?x19555 ?x19556) ?x19558) ?x19560) ?x19562) ?x17815) ?x17818) ?x17821)))
 (let ((?x19573 (- (- (+ ?x19566 ?x17823) (* (* 1.0 l_0_8_46) l_0_8_46)) (* (* 1.0 l_0_8_47) l_0_8_47))))
 (let ((?x19580 (+ (+ (+ (- ?x19573 (* (* 1.0 l_0_8_48) l_0_8_48)) ?x17834) ?x17836) (* 1.0 (* l_0_8_67 l_0_8_67)))))
 (let ((?x19584 (+ (+ ?x19580 (* 1.0 (* l_0_8_68 l_0_8_68))) (* 1.0 (* l_0_8_69 l_0_8_69)))))
 (= ?x19584 0.0)))))))))))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x19661 (* ?x15549 l_0_8_88)))
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x19659 (* ?x17006 l_0_8_72)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x19657 (* ?x17003 l_0_8_71)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x19655 (* ?x17000 l_0_8_70)))
 (let ((?x17986 (* (* 12.0 l_0_8_6) l_0_8_9)))
 (let ((?x17983 (* (* 12.0 l_0_8_5) l_0_8_8)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x19651 (* ?x16995 l_0_8_51)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x19649 (* ?x16992 l_0_8_50)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x19647 (* ?x16989 l_0_8_49)))
 (let ((?x17971 (* (* 12.0 l_0_8_4) l_0_8_7)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x17968 (* ?x16984 l_0_8_30)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x17966 (* ?x16981 l_0_8_29)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x17964 (* ?x16978 l_0_8_28)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19629 (* ?x15520 l_0_8_172)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19627 (* ?x15517 l_0_8_151)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x17122 (* ?x15396 l_0_8_133)))
 (let ((?x19632 (- (- (+ (- (* (* 2.0 l_0_8_106) l_0_8_109) ?x17122) ?x19627) ?x19629) (* (* 2.0 l_0_8_193) l_0_8_196))))
 (let ((?x19636 (- (- ?x19632 (* (* 2.0 l_0_8_194) l_0_8_197)) (* (* 2.0 l_0_8_195) l_0_8_198))))
 (let ((?x19640 (- (- ?x19636 (* (* 2.0 l_0_8_214) l_0_8_217)) (* (* 2.0 l_0_8_215) l_0_8_218))))
 (let ((?x19645 (- (- (- (- ?x19640 (* (* 2.0 l_0_8_216) l_0_8_219)) ?x17964) ?x17966) ?x17968)))
 (let ((?x19656 (+ (+ (+ (- (- (- (+ ?x19645 ?x17971) ?x19647) ?x19649) ?x19651) ?x17983) ?x17986) ?x19655)))
 (= (- (+ (+ ?x19656 ?x19657) ?x19659) ?x19661) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x19785 (* ?x17006 l_0_8_76)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x19783 (* ?x17003 l_0_8_75)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x19781 (* ?x17000 l_0_8_74)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19441 (* ?x15177 l_0_8_67)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x19778 (* ?x16995 l_0_8_55)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x19776 (* ?x16992 l_0_8_54)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x19774 (* ?x16989 l_0_8_53)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19439 (* ?x15171 l_0_8_46)))
 (let ((?x16984 (* 12.0 l_0_8_27)))
 (let ((?x18160 (* ?x16984 l_0_8_34)))
 (let ((?x16981 (* 12.0 l_0_8_26)))
 (let ((?x18158 (* ?x16981 l_0_8_33)))
 (let ((?x16978 (* 12.0 l_0_8_25)))
 (let ((?x18156 (* ?x16978 l_0_8_32)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x18114 (* ?x17349 l_0_8_6)))
 (let ((?x15396 (* 2.0 l_0_8_127)))
 (let ((?x17347 (* ?x15396 l_0_8_137)))
 (let ((?x18112 (+ (* (* 12.0 l_0_8_11) l_0_8_4) (* (* 12.0 l_0_8_12) l_0_8_5))))
 (let ((?x19761 (- (- (+ (- ?x18112 ?x17347) ?x18114) (* (* 2.0 l_0_8_193) l_0_8_200)) (* (* 2.0 l_0_8_194) l_0_8_201))))
 (let ((?x19765 (- (- ?x19761 (* (* 2.0 l_0_8_195) l_0_8_202)) (* (* 2.0 l_0_8_214) l_0_8_221))))
 (let ((?x19769 (- (- ?x19765 (* (* 2.0 l_0_8_215) l_0_8_222)) (* (* 2.0 l_0_8_216) l_0_8_223))))
 (let ((?x19779 (- (- (- (+ (- (- (- ?x19769 ?x18156) ?x18158) ?x18160) ?x19439) ?x19774) ?x19776) ?x19778)))
 (= (+ (+ (+ (- ?x19779 ?x19441) ?x19781) ?x19783) ?x19785) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x16405 (* l_0_8_9 l_0_8_9)))
 (let ((?x18456 (* 6.0 ?x16405)))
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x19909 (* ?x15549 l_0_8_91)))
 (let ((?x16399 (* l_0_8_8 l_0_8_8)))
 (let ((?x18454 (* 6.0 ?x16399)))
 (let ((?x16397 (* l_0_8_7 l_0_8_7)))
 (let ((?x18440 (* 6.0 ?x16397)))
 (let ((?x18426 (* (* 6.0 l_0_8_31) l_0_8_31)))
 (let ((?x18423 (* (* 6.0 l_0_8_30) l_0_8_30)))
 (let ((?x18420 (* (* 6.0 l_0_8_29) l_0_8_29)))
 (let ((?x18417 (* (* 6.0 l_0_8_28) l_0_8_28)))
 (let ((?x19881 (* l_0_8_220 l_0_8_220)))
 (let ((?x19879 (* l_0_8_219 l_0_8_219)))
 (let ((?x19877 (* l_0_8_218 l_0_8_218)))
 (let ((?x19875 (* l_0_8_217 l_0_8_217)))
 (let ((?x19873 (* l_0_8_199 l_0_8_199)))
 (let ((?x19871 (* l_0_8_198 l_0_8_198)))
 (let ((?x19869 (* l_0_8_197 l_0_8_197)))
 (let ((?x19867 (* l_0_8_196 l_0_8_196)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19865 (* ?x15520 l_0_8_175)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19863 (* ?x15517 l_0_8_154)))
 (let ((?x16409 (* l_0_8_10 l_0_8_10)))
 (let ((?x18362 (* 6.0 ?x16409)))
 (let ((?x19868 (- (- (+ (+ ?x18362 (* (* 2.0 l_0_8_106) l_0_8_112)) ?x19863) ?x19865) ?x19867)))
 (let ((?x19882 (- (- (- (- (- (- (- ?x19868 ?x19869) ?x19871) ?x19873) ?x19875) ?x19877) ?x19879) ?x19881)))
 (let ((?x19889 (- (- (- (- (- ?x19882 ?x18417) ?x18420) ?x18423) ?x18426) (* (* 1.0 l_0_8_49) l_0_8_49))))
 (let ((?x19895 (- (- ?x19889 (* (* 1.0 l_0_8_50) l_0_8_50)) (* (* 1.0 l_0_8_51) l_0_8_51))))
 (let ((?x19901 (+ (+ (- ?x19895 (* (* 1.0 l_0_8_52) l_0_8_52)) ?x18440) (* 1.0 (* l_0_8_70 l_0_8_70)))))
 (let ((?x19905 (+ (+ ?x19901 (* 1.0 (* l_0_8_71 l_0_8_71))) (* 1.0 (* l_0_8_72 l_0_8_72)))))
 (let ((?x19911 (+ (- (+ (+ ?x19905 (* 1.0 (* l_0_8_73 l_0_8_73))) ?x18454) ?x19909) ?x18456)))
 (= ?x19911 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x20030 (* ?x15549 l_0_8_95)))
 (let ((?x17197 (* 2.0 l_0_8_73)))
 (let ((?x20028 (* ?x17197 l_0_8_77)))
 (let ((?x17194 (* 2.0 l_0_8_72)))
 (let ((?x20026 (* ?x17194 l_0_8_76)))
 (let ((?x17191 (* 2.0 l_0_8_71)))
 (let ((?x20024 (* ?x17191 l_0_8_75)))
 (let ((?x17188 (* 2.0 l_0_8_70)))
 (let ((?x20022 (* ?x17188 l_0_8_74)))
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19480 (* ?x15177 l_0_8_70)))
 (let ((?x17183 (* 2.0 l_0_8_52)))
 (let ((?x20019 (* ?x17183 l_0_8_56)))
 (let ((?x17180 (* 2.0 l_0_8_51)))
 (let ((?x20017 (* ?x17180 l_0_8_55)))
 (let ((?x17177 (* 2.0 l_0_8_50)))
 (let ((?x20015 (* ?x17177 l_0_8_54)))
 (let ((?x17174 (* 2.0 l_0_8_49)))
 (let ((?x20013 (* ?x17174 l_0_8_53)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19478 (* ?x15171 l_0_8_49)))
 (let ((?x17169 (* 12.0 l_0_8_31)))
 (let ((?x18667 (* ?x17169 l_0_8_35)))
 (let ((?x17166 (* 12.0 l_0_8_30)))
 (let ((?x18665 (* ?x17166 l_0_8_34)))
 (let ((?x17163 (* 12.0 l_0_8_29)))
 (let ((?x18663 (* ?x17163 l_0_8_33)))
 (let ((?x17160 (* 12.0 l_0_8_28)))
 (let ((?x18661 (* ?x17160 l_0_8_32)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19990 (* ?x15520 l_0_8_179)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19988 (* ?x15517 l_0_8_158)))
 (let ((?x17349 (* 12.0 l_0_8_13)))
 (let ((?x18621 (* ?x17349 l_0_8_9)))
 (let ((?x15648 (* 12.0 l_0_8_12)))
 (let ((?x18616 (* ?x15648 l_0_8_8)))
 (let ((?x15645 (* 12.0 l_0_8_11)))
 (let ((?x18602 (* ?x15645 l_0_8_7)))
 (let ((?x17115 (* 12.0 l_0_8_10)))
 (let ((?x18568 (* ?x17115 l_0_8_14)))
 (let ((?x19987 (+ (+ (+ (+ ?x18568 (* (* 2.0 l_0_8_106) l_0_8_116)) ?x18602) ?x18616) ?x18621)))
 (let ((?x19995 (- (- (- (+ ?x19987 ?x19988) ?x19990) (* (* 2.0 l_0_8_196) l_0_8_200)) (* (* 2.0 l_0_8_197) l_0_8_201))))
 (let ((?x19999 (- (- ?x19995 (* (* 2.0 l_0_8_198) l_0_8_202)) (* (* 2.0 l_0_8_199) l_0_8_203))))
 (let ((?x20003 (- (- ?x19999 (* (* 2.0 l_0_8_217) l_0_8_221)) (* (* 2.0 l_0_8_218) l_0_8_222))))
 (let ((?x20007 (- (- ?x20003 (* (* 2.0 l_0_8_219) l_0_8_223)) (* (* 2.0 l_0_8_220) l_0_8_224))))
 (let ((?x20016 (- (- (+ (- (- (- (- ?x20007 ?x18661) ?x18663) ?x18665) ?x18667) ?x19478) ?x20013) ?x20015)))
 (let ((?x20029 (+ (+ (+ (+ (- (- (- ?x20016 ?x20017) ?x20019) ?x19480) ?x20022) ?x20024) ?x20026) ?x20028)))
 (= (- ?x20029 ?x20030) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15177 (* 2.0 l_0_8_64)))
 (let ((?x19519 (* ?x15177 l_0_8_74)))
 (let ((?x15171 (* 2.0 l_0_8_43)))
 (let ((?x19516 (* ?x15171 l_0_8_53)))
 (let ((?x19053 (* (* 6.0 l_0_8_36) l_0_8_36)))
 (let ((?x19050 (* (* 6.0 l_0_8_35) l_0_8_35)))
 (let ((?x19047 (* (* 6.0 l_0_8_34) l_0_8_34)))
 (let ((?x19044 (* (* 6.0 l_0_8_33) l_0_8_33)))
 (let ((?x19041 (* (* 6.0 l_0_8_32) l_0_8_32)))
 (let ((?x20157 (* l_0_8_225 l_0_8_225)))
 (let ((?x20155 (* l_0_8_224 l_0_8_224)))
 (let ((?x20153 (* l_0_8_223 l_0_8_223)))
 (let ((?x20151 (* l_0_8_222 l_0_8_222)))
 (let ((?x20149 (* l_0_8_221 l_0_8_221)))
 (let ((?x20147 (* l_0_8_204 l_0_8_204)))
 (let ((?x20145 (* l_0_8_203 l_0_8_203)))
 (let ((?x20143 (* l_0_8_202 l_0_8_202)))
 (let ((?x20141 (* l_0_8_201 l_0_8_201)))
 (let ((?x20139 (* l_0_8_200 l_0_8_200)))
 (let ((?x16704 (* l_0_8_15 l_0_8_15)))
 (let ((?x19038 (* 6.0 ?x16704)))
 (let ((?x16702 (* l_0_8_14 l_0_8_14)))
 (let ((?x19032 (* 6.0 ?x16702)))
 (let ((?x16700 (* l_0_8_13 l_0_8_13)))
 (let ((?x19024 (* 6.0 ?x16700)))
 (let ((?x16698 (* l_0_8_12 l_0_8_12)))
 (let ((?x19022 (* 6.0 ?x16698)))
 (let ((?x16722 (* l_0_8_11 l_0_8_11)))
 (let ((?x19021 (* 6.0 ?x16722)))
 (let ((?x19025 (+ (+ ?x19021 ?x19022) ?x19024)))
 (let ((?x20148 (- (- (- (- (- (+ (+ ?x19025 ?x19032) ?x19038) ?x20139) ?x20141) ?x20143) ?x20145) ?x20147)))
 (let ((?x20160 (- (- (- (- (- (- (- ?x20148 ?x20149) ?x20151) ?x20153) ?x20155) ?x20157) ?x19041) ?x19044)))
 (let ((?x20167 (- (+ (- (- (- ?x20160 ?x19047) ?x19050) ?x19053) ?x19516) (* (* 1.0 l_0_8_53) l_0_8_53))))
 (let ((?x20173 (- (- ?x20167 (* (* 1.0 l_0_8_54) l_0_8_54)) (* (* 1.0 l_0_8_55) l_0_8_55))))
 (let ((?x20179 (- (- ?x20173 (* (* 1.0 l_0_8_56) l_0_8_56)) (* (* 1.0 l_0_8_57) l_0_8_57))))
 (let ((?x20184 (+ (+ (- ?x20179 ?x19519) (* 1.0 (* l_0_8_74 l_0_8_74))) (* 1.0 (* l_0_8_75 l_0_8_75)))))
 (let ((?x20188 (+ (+ ?x20184 (* 1.0 (* l_0_8_76 l_0_8_76))) (* 1.0 (* l_0_8_77 l_0_8_77)))))
 (= (+ ?x20188 (* 1.0 (* l_0_8_78 l_0_8_78))) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15347 (* l_0_8_66 l_0_8_66)))
 (let ((?x16027 (* 3.0 ?x15347)))
 (let ((?x15344 (* l_0_8_65 l_0_8_65)))
 (let ((?x16025 (* 3.0 ?x15344)))
 (let ((?x16023 (* (* 3.0 l_0_8_45) l_0_8_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_8_44) l_0_8_44) ?x16023) ?x16025) ?x16027) 0.0)))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16314 (* ?x16313 l_0_8_68)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16311 (* ?x16310 l_0_8_67)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16308 (* ?x16307 l_0_8_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_8_44) l_0_8_46) ?x16308) ?x16311) ?x16314) 0.0))))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16612 (* ?x16313 l_0_8_71)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16610 (* ?x16310 l_0_8_70)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16608 (* ?x16307 l_0_8_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_8_44) l_0_8_49) ?x16608) ?x16610) ?x16612) 0.0))))))))
(assert
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16787 (* ?x16313 l_0_8_75)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16784 (* ?x16310 l_0_8_74)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16781 (* ?x16307 l_0_8_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_8_44) l_0_8_53) ?x16781) ?x16784) ?x16787) 0.0))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x15550 (* ?x15549 l_0_8_86)))
 (let ((?x16313 (* 6.0 l_0_8_66)))
 (let ((?x16895 (* ?x16313 l_0_8_80)))
 (let ((?x16310 (* 6.0 l_0_8_65)))
 (let ((?x16893 (* ?x16310 l_0_8_79)))
 (let ((?x16307 (* 6.0 l_0_8_45)))
 (let ((?x16890 (* ?x16307 l_0_8_59)))
 (let ((?x16304 (* 6.0 l_0_8_44)))
 (let ((?x16888 (* ?x16304 l_0_8_58)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x15521 (* ?x15520 l_0_8_170)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x15518 (* ?x15517 l_0_8_149)))
 (let ((?x20304 (- (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_107) ?x15518) ?x15521) ?x16888) ?x16890)))
 (= (+ (+ (+ ?x20304 ?x16893) ?x16895) ?x15550) 0.0)))))))))))))))))
(assert
 (let ((?x17844 (* l_0_8_69 l_0_8_69)))
 (let ((?x17845 (* 3.0 ?x17844)))
 (let ((?x17841 (* l_0_8_68 l_0_8_68)))
 (let ((?x17842 (* 3.0 ?x17841)))
 (let ((?x17838 (* l_0_8_67 l_0_8_67)))
 (let ((?x17839 (* 3.0 ?x17838)))
 (let ((?x17832 (* (* 3.0 l_0_8_48) l_0_8_48)))
 (let ((?x17829 (* (* 3.0 l_0_8_47) l_0_8_47)))
 (let ((?x20326 (+ (+ (- (- (* (* (- 3.0) l_0_8_46) l_0_8_46) ?x17829) ?x17832) ?x17839) ?x17842)))
 (= (+ ?x20326 ?x17845) 0.0)))))))))))
(assert
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x17995 (* ?x17994 l_0_8_72)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x17992 (* ?x17991 l_0_8_71)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x17989 (* ?x17988 l_0_8_70)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x17980 (* ?x17979 l_0_8_51)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x17977 (* ?x17976 l_0_8_50)))
 (let ((?x20340 (+ (+ (- (- (* (* (- 6.0) l_0_8_46) l_0_8_49) ?x17977) ?x17980) ?x17989) ?x17992)))
 (= (+ ?x20340 ?x17995) 0.0)))))))))))))
(assert
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x18177 (* ?x17994 l_0_8_76)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x18174 (* ?x17991 l_0_8_75)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x18171 (* ?x17988 l_0_8_74)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x18168 (* ?x17979 l_0_8_55)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x18165 (* ?x17976 l_0_8_54)))
 (let ((?x20356 (+ (+ (- (- (* (* (- 6.0) l_0_8_46) l_0_8_53) ?x18165) ?x18168) ?x18171) ?x18174)))
 (= (+ ?x20356 ?x18177) 0.0)))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x19661 (* ?x15549 l_0_8_88)))
 (let ((?x17994 (* 6.0 l_0_8_69)))
 (let ((?x18311 (* ?x17994 l_0_8_81)))
 (let ((?x17991 (* 6.0 l_0_8_68)))
 (let ((?x18309 (* ?x17991 l_0_8_80)))
 (let ((?x17988 (* 6.0 l_0_8_67)))
 (let ((?x18307 (* ?x17988 l_0_8_79)))
 (let ((?x17979 (* 6.0 l_0_8_48)))
 (let ((?x18304 (* ?x17979 l_0_8_60)))
 (let ((?x17976 (* 6.0 l_0_8_47)))
 (let ((?x18302 (* ?x17976 l_0_8_59)))
 (let ((?x17973 (* 6.0 l_0_8_46)))
 (let ((?x18300 (* ?x17973 l_0_8_58)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19629 (* ?x15520 l_0_8_172)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19627 (* ?x15517 l_0_8_151)))
 (let ((?x20372 (- (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_109) ?x19627) ?x19629) ?x18300) ?x18302)))
 (= (+ (+ (+ (+ (- ?x20372 ?x18304) ?x18307) ?x18309) ?x18311) ?x19661) 0.0)))))))))))))))))))))
(assert
 (let ((?x18451 (* l_0_8_73 l_0_8_73)))
 (let ((?x18452 (* 3.0 ?x18451)))
 (let ((?x18448 (* l_0_8_72 l_0_8_72)))
 (let ((?x18449 (* 3.0 ?x18448)))
 (let ((?x18445 (* l_0_8_71 l_0_8_71)))
 (let ((?x18446 (* 3.0 ?x18445)))
 (let ((?x18442 (* l_0_8_70 l_0_8_70)))
 (let ((?x18443 (* 3.0 ?x18442)))
 (let ((?x18438 (* (* 3.0 l_0_8_52) l_0_8_52)))
 (let ((?x18435 (* (* 3.0 l_0_8_51) l_0_8_51)))
 (let ((?x18432 (* (* 3.0 l_0_8_50) l_0_8_50)))
 (let ((?x20399 (+ (- (- (- (* (* (- 3.0) l_0_8_49) l_0_8_49) ?x18432) ?x18435) ?x18438) ?x18443)))
 (= (+ (+ (+ ?x20399 ?x18446) ?x18449) ?x18452) 0.0))))))))))))))
(assert
 (let ((?x18697 (* 6.0 l_0_8_73)))
 (let ((?x18698 (* ?x18697 l_0_8_77)))
 (let ((?x18693 (* 6.0 l_0_8_72)))
 (let ((?x18694 (* ?x18693 l_0_8_76)))
 (let ((?x18689 (* 6.0 l_0_8_71)))
 (let ((?x18690 (* ?x18689 l_0_8_75)))
 (let ((?x18685 (* 6.0 l_0_8_70)))
 (let ((?x18686 (* ?x18685 l_0_8_74)))
 (let ((?x18681 (* 6.0 l_0_8_52)))
 (let ((?x18682 (* ?x18681 l_0_8_56)))
 (let ((?x18677 (* 6.0 l_0_8_51)))
 (let ((?x18678 (* ?x18677 l_0_8_55)))
 (let ((?x18673 (* 6.0 l_0_8_50)))
 (let ((?x18674 (* ?x18673 l_0_8_54)))
 (let ((?x20417 (+ (- (- (- (* (* (- 6.0) l_0_8_49) l_0_8_53) ?x18674) ?x18678) ?x18682) ?x18686)))
 (= (+ (+ (+ ?x20417 ?x18690) ?x18694) ?x18698) 0.0)))))))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x19909 (* ?x15549 l_0_8_91)))
 (let ((?x18697 (* 6.0 l_0_8_73)))
 (let ((?x18946 (* ?x18697 l_0_8_82)))
 (let ((?x18693 (* 6.0 l_0_8_72)))
 (let ((?x18944 (* ?x18693 l_0_8_81)))
 (let ((?x18689 (* 6.0 l_0_8_71)))
 (let ((?x18942 (* ?x18689 l_0_8_80)))
 (let ((?x18685 (* 6.0 l_0_8_70)))
 (let ((?x18940 (* ?x18685 l_0_8_79)))
 (let ((?x18681 (* 6.0 l_0_8_52)))
 (let ((?x18937 (* ?x18681 l_0_8_61)))
 (let ((?x18677 (* 6.0 l_0_8_51)))
 (let ((?x18935 (* ?x18677 l_0_8_60)))
 (let ((?x18673 (* 6.0 l_0_8_50)))
 (let ((?x18933 (* ?x18673 l_0_8_59)))
 (let ((?x18669 (* 6.0 l_0_8_49)))
 (let ((?x18931 (* ?x18669 l_0_8_58)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19865 (* ?x15520 l_0_8_175)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19863 (* ?x15517 l_0_8_154)))
 (let ((?x20438 (- (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x19863) ?x19865) ?x18931) ?x18933)))
 (let ((?x20445 (+ (+ (+ (+ (+ (- (- ?x20438 ?x18935) ?x18937) ?x18940) ?x18942) ?x18944) ?x18946) ?x19909)))
 (= ?x20445 0.0))))))))))))))))))))))))))
(assert
 (let ((?x19092 (* l_0_8_78 l_0_8_78)))
 (let ((?x19093 (* 3.0 ?x19092)))
 (let ((?x19088 (* l_0_8_77 l_0_8_77)))
 (let ((?x19089 (* 3.0 ?x19088)))
 (let ((?x19084 (* l_0_8_76 l_0_8_76)))
 (let ((?x19085 (* 3.0 ?x19084)))
 (let ((?x19080 (* l_0_8_75 l_0_8_75)))
 (let ((?x19081 (* 3.0 ?x19080)))
 (let ((?x19076 (* l_0_8_74 l_0_8_74)))
 (let ((?x19077 (* 3.0 ?x19076)))
 (let ((?x19073 (* (* 3.0 l_0_8_57) l_0_8_57)))
 (let ((?x19069 (* (* 3.0 l_0_8_56) l_0_8_56)))
 (let ((?x19065 (* (* 3.0 l_0_8_55) l_0_8_55)))
 (let ((?x19061 (* (* 3.0 l_0_8_54) l_0_8_54)))
 (let ((?x20470 (- (- (- (- (* (* (- 3.0) l_0_8_53) l_0_8_53) ?x19061) ?x19065) ?x19069) ?x19073)))
 (= (+ (+ (+ (+ (+ ?x20470 ?x19077) ?x19081) ?x19085) ?x19089) ?x19093) 0.0)))))))))))))))))
(assert
 (let ((?x15549 (* 2.0 l_0_8_85)))
 (let ((?x20030 (* ?x15549 l_0_8_95)))
 (let ((?x19233 (* (* 6.0 l_0_8_78) l_0_8_83)))
 (let ((?x19230 (* (* 6.0 l_0_8_77) l_0_8_82)))
 (let ((?x19227 (* (* 6.0 l_0_8_76) l_0_8_81)))
 (let ((?x19224 (* (* 6.0 l_0_8_75) l_0_8_80)))
 (let ((?x19221 (* (* 6.0 l_0_8_74) l_0_8_79)))
 (let ((?x19211 (* (* 6.0 l_0_8_57) l_0_8_62)))
 (let ((?x19208 (* (* 6.0 l_0_8_56) l_0_8_61)))
 (let ((?x19205 (* (* 6.0 l_0_8_55) l_0_8_60)))
 (let ((?x19202 (* (* 6.0 l_0_8_54) l_0_8_59)))
 (let ((?x19199 (* (* 6.0 l_0_8_53) l_0_8_58)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x19990 (* ?x15520 l_0_8_179)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x19988 (* ?x15517 l_0_8_158)))
 (let ((?x20491 (- (- (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_116) ?x19988) ?x19990) ?x19199) ?x19202)))
 (let ((?x20498 (+ (+ (+ (+ (- (- (- ?x20491 ?x19205) ?x19208) ?x19211) ?x19221) ?x19224) ?x19227) ?x19230)))
 (= (+ (+ ?x20498 ?x19233) ?x20030) 0.0))))))))))))))))))))
(assert
 (let ((?x17692 (* l_0_8_84 l_0_8_84)))
 (let ((?x19359 (* 3.0 ?x17692)))
 (let ((?x17689 (* l_0_8_83 l_0_8_83)))
 (let ((?x19357 (* 3.0 ?x17689)))
 (let ((?x17686 (* l_0_8_82 l_0_8_82)))
 (let ((?x19355 (* 3.0 ?x17686)))
 (let ((?x17683 (* l_0_8_81 l_0_8_81)))
 (let ((?x19353 (* 3.0 ?x17683)))
 (let ((?x17680 (* l_0_8_80 l_0_8_80)))
 (let ((?x19351 (* 3.0 ?x17680)))
 (let ((?x17677 (* l_0_8_79 l_0_8_79)))
 (let ((?x19349 (* 3.0 ?x17677)))
 (let ((?x19346 (* (* 3.0 l_0_8_63) l_0_8_63)))
 (let ((?x19343 (* (* 3.0 l_0_8_62) l_0_8_62)))
 (let ((?x19340 (* (* 3.0 l_0_8_61) l_0_8_61)))
 (let ((?x19337 (* (* 3.0 l_0_8_60) l_0_8_60)))
 (let ((?x19334 (* (* 3.0 l_0_8_59) l_0_8_59)))
 (let ((?x19331 (* (* 3.0 l_0_8_58) l_0_8_58)))
 (let ((?x15520 (* 2.0 l_0_8_169)))
 (let ((?x17128 (* ?x15520 l_0_8_184)))
 (let ((?x15517 (* 2.0 l_0_8_148)))
 (let ((?x17124 (* ?x15517 l_0_8_163)))
 (let ((?x15506 (* 2.0 l_0_8_106)))
 (let ((?x17120 (* ?x15506 l_0_8_121)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x17118 (* ?x16568 l_0_8_85)))
 (let ((?x20531 (- (- (- (- (+ (- (- ?x17118 ?x17120) ?x17124) ?x17128) ?x19331) ?x19334) ?x19337) ?x19340)))
 (let ((?x20538 (+ (+ (+ (+ (+ (- (- ?x20531 ?x19343) ?x19346) ?x19349) ?x19351) ?x19353) ?x19355) ?x19357)))
 (= (+ ?x20538 ?x19359) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x17844 (* l_0_8_69 l_0_8_69)))
 (let ((?x17841 (* l_0_8_68 l_0_8_68)))
 (let ((?x17838 (* l_0_8_67 l_0_8_67)))
 (let ((?x17893 (* l_0_8_48 l_0_8_48)))
 (let ((?x17887 (* l_0_8_47 l_0_8_47)))
 (let ((?x17881 (* l_0_8_46 l_0_8_46)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x18139 (* ?x17809 l_0_8_139)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x18137 (* ?x17804 l_0_8_138)))
 (let ((?x20568 (+ (+ (- (- (* (* (- 2.0) l_0_8_130) l_0_8_137) ?x18137) ?x18139) ?x17881) ?x17887)))
 (= (- (- (- (+ ?x20568 ?x17893) ?x17838) ?x17841) ?x17844) 0.0)))))))))))))
(assert
 (let ((?x20625 (* 2.0 l_0_8_90)))
 (let ((?x20626 (* ?x20625 l_0_8_97)))
 (let ((?x20622 (* 2.0 l_0_8_89)))
 (let ((?x20623 (* ?x20622 l_0_8_96)))
 (let ((?x20619 (* 2.0 l_0_8_88)))
 (let ((?x20620 (* ?x20619 l_0_8_95)))
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x19659 (* ?x17006 l_0_8_72)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x19657 (* ?x17003 l_0_8_71)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x19655 (* ?x17000 l_0_8_70)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x19651 (* ?x16995 l_0_8_51)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x19649 (* ?x16992 l_0_8_50)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x19647 (* ?x16989 l_0_8_49)))
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x20611 (* ?x17961 l_0_8_181)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x20609 (* ?x17958 l_0_8_180)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x20607 (* ?x17955 l_0_8_179)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x20605 (* ?x17952 l_0_8_160)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x20603 (* ?x17949 l_0_8_159)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x20601 (* ?x17946 l_0_8_158)))
 (let ((?x17943 (* 2.0 l_0_8_136)))
 (let ((?x18629 (* ?x17943 l_0_8_140)))
 (let ((?x17940 (* 2.0 l_0_8_135)))
 (let ((?x18627 (* ?x17940 l_0_8_139)))
 (let ((?x17937 (* 2.0 l_0_8_134)))
 (let ((?x18625 (* ?x17937 l_0_8_138)))
 (let ((?x17934 (* 2.0 l_0_8_133)))
 (let ((?x18623 (* ?x17934 l_0_8_137)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x20595 (* ?x17924 l_0_8_118)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x20593 (* ?x17921 l_0_8_117)))
 (let ((?x20598 (- (- (+ (+ (* (* 2.0 l_0_8_109) l_0_8_116) ?x20593) ?x20595) ?x18623) ?x18625)))
 (let ((?x20610 (- (- (+ (+ (+ (- (- ?x20598 ?x18627) ?x18629) ?x20601) ?x20603) ?x20605) ?x20607) ?x20609)))
 (let ((?x20618 (- (- (- (+ (+ (+ (- ?x20610 ?x20611) ?x19647) ?x19649) ?x19651) ?x19655) ?x19657) ?x19659)))
 (= (- (- (- ?x20618 ?x20620) ?x20623) ?x20626) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17006 (* 2.0 l_0_8_69)))
 (let ((?x19785 (* ?x17006 l_0_8_76)))
 (let ((?x17003 (* 2.0 l_0_8_68)))
 (let ((?x19783 (* ?x17003 l_0_8_75)))
 (let ((?x17000 (* 2.0 l_0_8_67)))
 (let ((?x19781 (* ?x17000 l_0_8_74)))
 (let ((?x16995 (* 2.0 l_0_8_48)))
 (let ((?x19778 (* ?x16995 l_0_8_55)))
 (let ((?x16992 (* 2.0 l_0_8_47)))
 (let ((?x19776 (* ?x16992 l_0_8_54)))
 (let ((?x16989 (* 2.0 l_0_8_46)))
 (let ((?x19774 (* ?x16989 l_0_8_53)))
 (let ((?x19036 (* l_0_8_141 l_0_8_141)))
 (let ((?x19034 (* l_0_8_140 l_0_8_140)))
 (let ((?x19030 (* l_0_8_139 l_0_8_139)))
 (let ((?x20709 (- (- (* (- l_0_8_137) l_0_8_137) (* l_0_8_138 l_0_8_138)) ?x19030)))
 (let ((?x20716 (- (- (+ (+ (+ (- (- ?x20709 ?x19034) ?x19036) ?x19774) ?x19776) ?x19778) ?x19781) ?x19783)))
 (= (- ?x20716 ?x19785) 0.0)))))))))))))))))))
(assert
 (let ((?x20787 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x20784 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x20781 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x20778 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x18451 (* l_0_8_73 l_0_8_73)))
 (let ((?x18448 (* l_0_8_72 l_0_8_72)))
 (let ((?x18445 (* l_0_8_71 l_0_8_71)))
 (let ((?x18442 (* l_0_8_70 l_0_8_70)))
 (let ((?x18562 (* l_0_8_52 l_0_8_52)))
 (let ((?x18556 (* l_0_8_51 l_0_8_51)))
 (let ((?x18550 (* l_0_8_50 l_0_8_50)))
 (let ((?x18544 (* l_0_8_49 l_0_8_49)))
 (let ((?x18413 (* 2.0 l_0_8_178)))
 (let ((?x20767 (* ?x18413 l_0_8_182)))
 (let ((?x18410 (* 2.0 l_0_8_177)))
 (let ((?x20765 (* ?x18410 l_0_8_181)))
 (let ((?x18407 (* 2.0 l_0_8_176)))
 (let ((?x20763 (* ?x18407 l_0_8_180)))
 (let ((?x18404 (* 2.0 l_0_8_175)))
 (let ((?x20761 (* ?x18404 l_0_8_179)))
 (let ((?x18401 (* 2.0 l_0_8_157)))
 (let ((?x20759 (* ?x18401 l_0_8_161)))
 (let ((?x18398 (* 2.0 l_0_8_156)))
 (let ((?x20757 (* ?x18398 l_0_8_160)))
 (let ((?x18395 (* 2.0 l_0_8_155)))
 (let ((?x20755 (* ?x18395 l_0_8_159)))
 (let ((?x18392 (* 2.0 l_0_8_154)))
 (let ((?x20753 (* ?x18392 l_0_8_158)))
 (let ((?x18381 (* 2.0 l_0_8_115)))
 (let ((?x20751 (* ?x18381 l_0_8_119)))
 (let ((?x18378 (* 2.0 l_0_8_114)))
 (let ((?x20749 (* ?x18378 l_0_8_118)))
 (let ((?x18375 (* 2.0 l_0_8_113)))
 (let ((?x20747 (* ?x18375 l_0_8_117)))
 (let ((?x20754 (+ (+ (+ (+ (* (* 2.0 l_0_8_112) l_0_8_116) ?x20747) ?x20749) ?x20751) ?x20753)))
 (let ((?x20768 (- (- (- (- (+ (+ (+ ?x20754 ?x20755) ?x20757) ?x20759) ?x20761) ?x20763) ?x20765) ?x20767)))
 (let ((?x20775 (- (- (- (+ (+ (+ (+ ?x20768 ?x18544) ?x18550) ?x18556) ?x18562) ?x18442) ?x18445) ?x18448)))
 (= (- (- (- (- (- ?x20775 ?x18451) ?x20778) ?x20781) ?x20784) ?x20787) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x20919 (* l_0_8_99 l_0_8_99)))
 (let ((?x20917 (* l_0_8_98 l_0_8_98)))
 (let ((?x20915 (* l_0_8_97 l_0_8_97)))
 (let ((?x20913 (* l_0_8_96 l_0_8_96)))
 (let ((?x20911 (* l_0_8_95 l_0_8_95)))
 (let ((?x17197 (* 2.0 l_0_8_73)))
 (let ((?x20028 (* ?x17197 l_0_8_77)))
 (let ((?x17194 (* 2.0 l_0_8_72)))
 (let ((?x20026 (* ?x17194 l_0_8_76)))
 (let ((?x17191 (* 2.0 l_0_8_71)))
 (let ((?x20024 (* ?x17191 l_0_8_75)))
 (let ((?x17188 (* 2.0 l_0_8_70)))
 (let ((?x20022 (* ?x17188 l_0_8_74)))
 (let ((?x17183 (* 2.0 l_0_8_52)))
 (let ((?x20019 (* ?x17183 l_0_8_56)))
 (let ((?x17180 (* 2.0 l_0_8_51)))
 (let ((?x20017 (* ?x17180 l_0_8_55)))
 (let ((?x17177 (* 2.0 l_0_8_50)))
 (let ((?x20015 (* ?x17177 l_0_8_54)))
 (let ((?x17174 (* 2.0 l_0_8_49)))
 (let ((?x20013 (* ?x17174 l_0_8_53)))
 (let ((?x20901 (* l_0_8_183 l_0_8_183)))
 (let ((?x20899 (* l_0_8_182 l_0_8_182)))
 (let ((?x20897 (* l_0_8_181 l_0_8_181)))
 (let ((?x20895 (* l_0_8_180 l_0_8_180)))
 (let ((?x20893 (* l_0_8_179 l_0_8_179)))
 (let ((?x20891 (* l_0_8_162 l_0_8_162)))
 (let ((?x20889 (* l_0_8_161 l_0_8_161)))
 (let ((?x20887 (* l_0_8_160 l_0_8_160)))
 (let ((?x20885 (* l_0_8_159 l_0_8_159)))
 (let ((?x20883 (* l_0_8_158 l_0_8_158)))
 (let ((?x20881 (* l_0_8_120 l_0_8_120)))
 (let ((?x20879 (* l_0_8_119 l_0_8_119)))
 (let ((?x20877 (* l_0_8_118 l_0_8_118)))
 (let ((?x20880 (+ (+ (+ (* l_0_8_116 l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20877) ?x20879)))
 (let ((?x20894 (- (+ (+ (+ (+ (+ (+ ?x20880 ?x20881) ?x20883) ?x20885) ?x20887) ?x20889) ?x20891) ?x20893)))
 (let ((?x20905 (+ (+ (+ (- (- (- (- ?x20894 ?x20895) ?x20897) ?x20899) ?x20901) ?x20013) ?x20015) ?x20017)))
 (let ((?x20914 (- (- (- (- (- (- (+ ?x20905 ?x20019) ?x20022) ?x20024) ?x20026) ?x20028) ?x20911) ?x20913)))
 (= (- (- (- ?x20914 ?x20915) ?x20917) ?x20919) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x19092 (* l_0_8_78 l_0_8_78)))
 (let ((?x19088 (* l_0_8_77 l_0_8_77)))
 (let ((?x19084 (* l_0_8_76 l_0_8_76)))
 (let ((?x19080 (* l_0_8_75 l_0_8_75)))
 (let ((?x19076 (* l_0_8_74 l_0_8_74)))
 (let ((?x19151 (* l_0_8_57 l_0_8_57)))
 (let ((?x19144 (* l_0_8_56 l_0_8_56)))
 (let ((?x19137 (* l_0_8_55 l_0_8_55)))
 (let ((?x20973 (+ (+ (+ (* l_0_8_53 l_0_8_53) (* l_0_8_54 l_0_8_54)) ?x19137) ?x19144)))
 (= (- (- (- (- (- (+ ?x20973 ?x19151) ?x19076) ?x19080) ?x19084) ?x19088) ?x19092) 0.0)))))))))))
(assert
 (let ((?x21023 (* l_0_8_90 l_0_8_90)))
 (let ((?x21021 (* l_0_8_89 l_0_8_89)))
 (let ((?x21019 (* l_0_8_88 l_0_8_88)))
 (let ((?x21017 (* l_0_8_174 l_0_8_174)))
 (let ((?x21015 (* l_0_8_173 l_0_8_173)))
 (let ((?x21013 (* l_0_8_172 l_0_8_172)))
 (let ((?x21011 (* l_0_8_153 l_0_8_153)))
 (let ((?x21009 (* l_0_8_152 l_0_8_152)))
 (let ((?x21007 (* l_0_8_151 l_0_8_151)))
 (let ((?x17809 (* 2.0 l_0_8_132)))
 (let ((?x17932 (* ?x17809 l_0_8_135)))
 (let ((?x17804 (* 2.0 l_0_8_131)))
 (let ((?x17930 (* ?x17804 l_0_8_134)))
 (let ((?x17927 (* 2.0 l_0_8_130)))
 (let ((?x17928 (* ?x17927 l_0_8_133)))
 (let ((?x21002 (* l_0_8_111 l_0_8_111)))
 (let ((?x21004 (- (+ (+ (* l_0_8_109 l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x21002) ?x17928)))
 (let ((?x21016 (- (- (+ (+ (+ (- (- ?x21004 ?x17930) ?x17932) ?x21007) ?x21009) ?x21011) ?x21013) ?x21015)))
 (= (- (- (- (- ?x21016 ?x21017) ?x21019) ?x21021) ?x21023) 0.0))))))))))))))))))))
(assert
 (let ((?x20625 (* 2.0 l_0_8_90)))
 (let ((?x21088 (* ?x20625 l_0_8_93)))
 (let ((?x20622 (* 2.0 l_0_8_89)))
 (let ((?x21086 (* ?x20622 l_0_8_92)))
 (let ((?x20619 (* 2.0 l_0_8_88)))
 (let ((?x21084 (* ?x20619 l_0_8_91)))
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x21082 (* ?x17961 l_0_8_177)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x21080 (* ?x17958 l_0_8_176)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x21078 (* ?x17955 l_0_8_175)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x21076 (* ?x17952 l_0_8_156)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x21074 (* ?x17949 l_0_8_155)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x21072 (* ?x17946 l_0_8_154)))
 (let ((?x18390 (* l_0_8_136 l_0_8_136)))
 (let ((?x18388 (* l_0_8_135 l_0_8_135)))
 (let ((?x18386 (* l_0_8_134 l_0_8_134)))
 (let ((?x18384 (* l_0_8_133 l_0_8_133)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x21066 (* ?x17924 l_0_8_114)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x21064 (* ?x17921 l_0_8_113)))
 (let ((?x21069 (- (- (+ (+ (* (* 2.0 l_0_8_109) l_0_8_112) ?x21064) ?x21066) ?x18384) ?x18386)))
 (let ((?x21081 (- (- (+ (+ (+ (- (- ?x21069 ?x18388) ?x18390) ?x21072) ?x21074) ?x21076) ?x21078) ?x21080)))
 (= (- (- (- (- ?x21081 ?x21082) ?x21084) ?x21086) ?x21088) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x21186 (* l_0_8_94 l_0_8_94)))
 (let ((?x21184 (* l_0_8_93 l_0_8_93)))
 (let ((?x21182 (* l_0_8_92 l_0_8_92)))
 (let ((?x21180 (* l_0_8_91 l_0_8_91)))
 (let ((?x21178 (* l_0_8_178 l_0_8_178)))
 (let ((?x21176 (* l_0_8_177 l_0_8_177)))
 (let ((?x21174 (* l_0_8_176 l_0_8_176)))
 (let ((?x21172 (* l_0_8_175 l_0_8_175)))
 (let ((?x21170 (* l_0_8_157 l_0_8_157)))
 (let ((?x21168 (* l_0_8_156 l_0_8_156)))
 (let ((?x21166 (* l_0_8_155 l_0_8_155)))
 (let ((?x21164 (* l_0_8_154 l_0_8_154)))
 (let ((?x21162 (* l_0_8_115 l_0_8_115)))
 (let ((?x21160 (* l_0_8_114 l_0_8_114)))
 (let ((?x21163 (+ (+ (+ (* l_0_8_112 l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x21160) ?x21162)))
 (let ((?x21177 (- (- (- (+ (+ (+ (+ ?x21163 ?x21164) ?x21166) ?x21168) ?x21170) ?x21172) ?x21174) ?x21176)))
 (= (- (- (- (- (- ?x21177 ?x21178) ?x21180) ?x21182) ?x21184) ?x21186) 0.0))))))))))))))))))
(assert
 (let ((?x15935 (* l_0_8_87 l_0_8_87)))
 (let ((?x15933 (* l_0_8_86 l_0_8_86)))
 (let ((?x15923 (* l_0_8_171 l_0_8_171)))
 (let ((?x15921 (* l_0_8_170 l_0_8_170)))
 (let ((?x15919 (* l_0_8_150 l_0_8_150)))
 (let ((?x15917 (* l_0_8_149 l_0_8_149)))
 (let ((?x21218 (- (- (* (- l_0_8_107) l_0_8_107) (* l_0_8_108 l_0_8_108)) ?x15917)))
 (= (+ (+ (+ (+ (- ?x21218 ?x15919) ?x15921) ?x15923) ?x15933) ?x15935) 0.0)))))))))
(assert
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16143 (* ?x16142 l_0_8_89)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16140 (* ?x16139 l_0_8_88)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16119 (* ?x16118 l_0_8_173)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16116 (* ?x16115 l_0_8_172)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16113 (* ?x16112 l_0_8_152)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16110 (* ?x16109 l_0_8_151)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16102 (* ?x16101 l_0_8_110)))
 (let ((?x21238 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_109) ?x16102) ?x16110) ?x16113) ?x16116)))
 (= (+ (+ (+ ?x21238 ?x16119) ?x16140) ?x16143) 0.0)))))))))))))))))
(assert
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16403 (* ?x16142 l_0_8_92)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16401 (* ?x16139 l_0_8_91)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16387 (* ?x16118 l_0_8_176)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16385 (* ?x16115 l_0_8_175)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16383 (* ?x16112 l_0_8_155)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16381 (* ?x16109 l_0_8_154)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16379 (* ?x16101 l_0_8_113)))
 (let ((?x21262 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_112) ?x16379) ?x16381) ?x16383) ?x16385)))
 (= (+ (+ (+ ?x21262 ?x16387) ?x16401) ?x16403) 0.0)))))))))))))))))
(assert
 (let ((?x16142 (* 2.0 l_0_8_87)))
 (let ((?x16494 (* ?x16142 l_0_8_96)))
 (let ((?x16139 (* 2.0 l_0_8_86)))
 (let ((?x16492 (* ?x16139 l_0_8_95)))
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16474 (* ?x16118 l_0_8_180)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16472 (* ?x16115 l_0_8_179)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16470 (* ?x16112 l_0_8_159)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16468 (* ?x16109 l_0_8_158)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16459 (* ?x16101 l_0_8_117)))
 (let ((?x21286 (+ (- (- (- (* (* (- 2.0) l_0_8_107) l_0_8_116) ?x16459) ?x16468) ?x16470) ?x16472)))
 (= (+ (+ (+ ?x21286 ?x16474) ?x16492) ?x16494) 0.0)))))))))))))))))
(assert
 (let ((?x16118 (* 2.0 l_0_8_171)))
 (let ((?x16590 (* ?x16118 l_0_8_185)))
 (let ((?x16115 (* 2.0 l_0_8_170)))
 (let ((?x16588 (* ?x16115 l_0_8_184)))
 (let ((?x16112 (* 2.0 l_0_8_150)))
 (let ((?x16582 (* ?x16112 l_0_8_164)))
 (let ((?x16109 (* 2.0 l_0_8_149)))
 (let ((?x16580 (* ?x16109 l_0_8_163)))
 (let ((?x16101 (* 2.0 l_0_8_108)))
 (let ((?x16576 (* ?x16101 l_0_8_122)))
 (let ((?x16099 (* 2.0 l_0_8_107)))
 (let ((?x16574 (* ?x16099 l_0_8_121)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x16572 (* ?x16571 l_0_8_87)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x16569 (* ?x16568 l_0_8_86)))
 (let ((?x21312 (+ (+ (- (- (- (- (+ ?x16569 ?x16572) ?x16574) ?x16576) ?x16580) ?x16582) ?x16588) ?x16590)))
 (= ?x21312 0.0)))))))))))))))))))
(assert
 (let ((?x21023 (* l_0_8_90 l_0_8_90)))
 (let ((?x21021 (* l_0_8_89 l_0_8_89)))
 (let ((?x21019 (* l_0_8_88 l_0_8_88)))
 (let ((?x21017 (* l_0_8_174 l_0_8_174)))
 (let ((?x21015 (* l_0_8_173 l_0_8_173)))
 (let ((?x21013 (* l_0_8_172 l_0_8_172)))
 (let ((?x21011 (* l_0_8_153 l_0_8_153)))
 (let ((?x21009 (* l_0_8_152 l_0_8_152)))
 (let ((?x21007 (* l_0_8_151 l_0_8_151)))
 (let ((?x21002 (* l_0_8_111 l_0_8_111)))
 (let ((?x21336 (- (- (* (- l_0_8_109) l_0_8_109) (* l_0_8_110 l_0_8_110)) ?x21002)))
 (let ((?x21343 (+ (+ (+ (+ (- (- (- ?x21336 ?x21007) ?x21009) ?x21011) ?x21013) ?x21015) ?x21017) ?x21019)))
 (= (+ (+ ?x21343 ?x21021) ?x21023) 0.0))))))))))))))
(assert
 (let ((?x20625 (* 2.0 l_0_8_90)))
 (let ((?x21088 (* ?x20625 l_0_8_93)))
 (let ((?x20622 (* 2.0 l_0_8_89)))
 (let ((?x21086 (* ?x20622 l_0_8_92)))
 (let ((?x20619 (* 2.0 l_0_8_88)))
 (let ((?x21084 (* ?x20619 l_0_8_91)))
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x21082 (* ?x17961 l_0_8_177)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x21080 (* ?x17958 l_0_8_176)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x21078 (* ?x17955 l_0_8_175)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x21076 (* ?x17952 l_0_8_156)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x21074 (* ?x17949 l_0_8_155)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x21072 (* ?x17946 l_0_8_154)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x21066 (* ?x17924 l_0_8_114)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x21064 (* ?x17921 l_0_8_113)))
 (let ((?x21364 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_112) ?x21064) ?x21066) ?x21072) ?x21074)))
 (let ((?x21371 (+ (+ (+ (+ (+ (+ (- ?x21364 ?x21076) ?x21078) ?x21080) ?x21082) ?x21084) ?x21086) ?x21088)))
 (= ?x21371 0.0))))))))))))))))))))))))))
(assert
 (let ((?x20625 (* 2.0 l_0_8_90)))
 (let ((?x20626 (* ?x20625 l_0_8_97)))
 (let ((?x20622 (* 2.0 l_0_8_89)))
 (let ((?x20623 (* ?x20622 l_0_8_96)))
 (let ((?x20619 (* 2.0 l_0_8_88)))
 (let ((?x20620 (* ?x20619 l_0_8_95)))
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x20611 (* ?x17961 l_0_8_181)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x20609 (* ?x17958 l_0_8_180)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x20607 (* ?x17955 l_0_8_179)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x20605 (* ?x17952 l_0_8_160)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x20603 (* ?x17949 l_0_8_159)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x20601 (* ?x17946 l_0_8_158)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x20595 (* ?x17924 l_0_8_118)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x20593 (* ?x17921 l_0_8_117)))
 (let ((?x21394 (- (- (- (- (* (* (- 2.0) l_0_8_109) l_0_8_116) ?x20593) ?x20595) ?x20601) ?x20603)))
 (let ((?x21401 (+ (+ (+ (+ (+ (+ (- ?x21394 ?x20605) ?x20607) ?x20609) ?x20611) ?x20620) ?x20623) ?x20626)))
 (= ?x21401 0.0))))))))))))))))))))))))))
(assert
 (let ((?x17961 (* 2.0 l_0_8_174)))
 (let ((?x17962 (* ?x17961 l_0_8_186)))
 (let ((?x17958 (* 2.0 l_0_8_173)))
 (let ((?x17959 (* ?x17958 l_0_8_185)))
 (let ((?x17955 (* 2.0 l_0_8_172)))
 (let ((?x17956 (* ?x17955 l_0_8_184)))
 (let ((?x17952 (* 2.0 l_0_8_153)))
 (let ((?x17953 (* ?x17952 l_0_8_165)))
 (let ((?x17949 (* 2.0 l_0_8_152)))
 (let ((?x17950 (* ?x17949 l_0_8_164)))
 (let ((?x17946 (* 2.0 l_0_8_151)))
 (let ((?x17947 (* ?x17946 l_0_8_163)))
 (let ((?x17924 (* 2.0 l_0_8_111)))
 (let ((?x17925 (* ?x17924 l_0_8_123)))
 (let ((?x17921 (* 2.0 l_0_8_110)))
 (let ((?x17922 (* ?x17921 l_0_8_122)))
 (let ((?x17918 (* 2.0 l_0_8_109)))
 (let ((?x17919 (* ?x17918 l_0_8_121)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x17916 (* ?x17915 l_0_8_90)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x17913 (* ?x16571 l_0_8_89)))
 (let ((?x3411 (- (- (+ (+ (* (* 2.0 l_0_8_100) l_0_8_88) ?x17913) ?x17916) ?x17919) ?x17922)))
 (let ((?x21425 (+ (+ (+ (- (- (- (- ?x3411 ?x17925) ?x17947) ?x17950) ?x17953) ?x17956) ?x17959) ?x17962)))
 (= ?x21425 0.0))))))))))))))))))))))))))
(assert
 (let ((?x21186 (* l_0_8_94 l_0_8_94)))
 (let ((?x21184 (* l_0_8_93 l_0_8_93)))
 (let ((?x21182 (* l_0_8_92 l_0_8_92)))
 (let ((?x21180 (* l_0_8_91 l_0_8_91)))
 (let ((?x21178 (* l_0_8_178 l_0_8_178)))
 (let ((?x21176 (* l_0_8_177 l_0_8_177)))
 (let ((?x21174 (* l_0_8_176 l_0_8_176)))
 (let ((?x21172 (* l_0_8_175 l_0_8_175)))
 (let ((?x21170 (* l_0_8_157 l_0_8_157)))
 (let ((?x21168 (* l_0_8_156 l_0_8_156)))
 (let ((?x21166 (* l_0_8_155 l_0_8_155)))
 (let ((?x21164 (* l_0_8_154 l_0_8_154)))
 (let ((?x21162 (* l_0_8_115 l_0_8_115)))
 (let ((?x21160 (* l_0_8_114 l_0_8_114)))
 (let ((?x3534 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x21160)))
 (let ((?x3545 (+ (+ (- (- (- (- (- ?x3534 ?x21162) ?x21164) ?x21166) ?x21168) ?x21170) ?x21172) ?x21174)))
 (= (+ (+ (+ (+ (+ (+ ?x3545 ?x21176) ?x21178) ?x21180) ?x21182) ?x21184) ?x21186) 0.0))))))))))))))))))
(assert
 (let ((?x20787 (* (* 2.0 l_0_8_94) l_0_8_98)))
 (let ((?x20784 (* (* 2.0 l_0_8_93) l_0_8_97)))
 (let ((?x20781 (* (* 2.0 l_0_8_92) l_0_8_96)))
 (let ((?x20778 (* (* 2.0 l_0_8_91) l_0_8_95)))
 (let ((?x18413 (* 2.0 l_0_8_178)))
 (let ((?x20767 (* ?x18413 l_0_8_182)))
 (let ((?x18410 (* 2.0 l_0_8_177)))
 (let ((?x20765 (* ?x18410 l_0_8_181)))
 (let ((?x18407 (* 2.0 l_0_8_176)))
 (let ((?x20763 (* ?x18407 l_0_8_180)))
 (let ((?x18404 (* 2.0 l_0_8_175)))
 (let ((?x20761 (* ?x18404 l_0_8_179)))
 (let ((?x18401 (* 2.0 l_0_8_157)))
 (let ((?x20759 (* ?x18401 l_0_8_161)))
 (let ((?x18398 (* 2.0 l_0_8_156)))
 (let ((?x20757 (* ?x18398 l_0_8_160)))
 (let ((?x18395 (* 2.0 l_0_8_155)))
 (let ((?x20755 (* ?x18395 l_0_8_159)))
 (let ((?x18392 (* 2.0 l_0_8_154)))
 (let ((?x20753 (* ?x18392 l_0_8_158)))
 (let ((?x18381 (* 2.0 l_0_8_115)))
 (let ((?x20751 (* ?x18381 l_0_8_119)))
 (let ((?x18378 (* 2.0 l_0_8_114)))
 (let ((?x20749 (* ?x18378 l_0_8_118)))
 (let ((?x18375 (* 2.0 l_0_8_113)))
 (let ((?x20747 (* ?x18375 l_0_8_117)))
 (let ((?x3763 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_116) ?x20747) ?x20749) ?x20751) ?x20753)))
 (let ((?x3702 (+ (+ (+ (+ (- (- (- ?x3763 ?x20755) ?x20757) ?x20759) ?x20761) ?x20763) ?x20765) ?x20767)))
 (= (+ (+ (+ (+ ?x3702 ?x20778) ?x20781) ?x20784) ?x20787) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x18413 (* 2.0 l_0_8_178)))
 (let ((?x18414 (* ?x18413 l_0_8_187)))
 (let ((?x18410 (* 2.0 l_0_8_177)))
 (let ((?x18411 (* ?x18410 l_0_8_186)))
 (let ((?x18407 (* 2.0 l_0_8_176)))
 (let ((?x18408 (* ?x18407 l_0_8_185)))
 (let ((?x18404 (* 2.0 l_0_8_175)))
 (let ((?x18405 (* ?x18404 l_0_8_184)))
 (let ((?x18401 (* 2.0 l_0_8_157)))
 (let ((?x18402 (* ?x18401 l_0_8_166)))
 (let ((?x18398 (* 2.0 l_0_8_156)))
 (let ((?x18399 (* ?x18398 l_0_8_165)))
 (let ((?x18395 (* 2.0 l_0_8_155)))
 (let ((?x18396 (* ?x18395 l_0_8_164)))
 (let ((?x18392 (* 2.0 l_0_8_154)))
 (let ((?x18393 (* ?x18392 l_0_8_163)))
 (let ((?x18381 (* 2.0 l_0_8_115)))
 (let ((?x18382 (* ?x18381 l_0_8_124)))
 (let ((?x18378 (* 2.0 l_0_8_114)))
 (let ((?x18379 (* ?x18378 l_0_8_123)))
 (let ((?x18375 (* 2.0 l_0_8_113)))
 (let ((?x18376 (* ?x18375 l_0_8_122)))
 (let ((?x18372 (* 2.0 l_0_8_112)))
 (let ((?x18373 (* ?x18372 l_0_8_121)))
 (let ((?x18369 (* 2.0 l_0_8_103)))
 (let ((?x18370 (* ?x18369 l_0_8_94)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x18367 (* ?x17915 l_0_8_93)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x18365 (* ?x16571 l_0_8_92)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x18363 (* ?x16568 l_0_8_91)))
 (let ((?x3880 (- (- (- (- (+ (+ (+ ?x18363 ?x18365) ?x18367) ?x18370) ?x18373) ?x18376) ?x18379) ?x18382)))
 (let ((?x3884 (+ (+ (+ (- (- (- (- ?x3880 ?x18393) ?x18396) ?x18399) ?x18402) ?x18405) ?x18408) ?x18411)))
 (= (+ ?x3884 ?x18414) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x20919 (* l_0_8_99 l_0_8_99)))
 (let ((?x20917 (* l_0_8_98 l_0_8_98)))
 (let ((?x20915 (* l_0_8_97 l_0_8_97)))
 (let ((?x20913 (* l_0_8_96 l_0_8_96)))
 (let ((?x20911 (* l_0_8_95 l_0_8_95)))
 (let ((?x20901 (* l_0_8_183 l_0_8_183)))
 (let ((?x20899 (* l_0_8_182 l_0_8_182)))
 (let ((?x20897 (* l_0_8_181 l_0_8_181)))
 (let ((?x20895 (* l_0_8_180 l_0_8_180)))
 (let ((?x20893 (* l_0_8_179 l_0_8_179)))
 (let ((?x20891 (* l_0_8_162 l_0_8_162)))
 (let ((?x20889 (* l_0_8_161 l_0_8_161)))
 (let ((?x20887 (* l_0_8_160 l_0_8_160)))
 (let ((?x20885 (* l_0_8_159 l_0_8_159)))
 (let ((?x20883 (* l_0_8_158 l_0_8_158)))
 (let ((?x20881 (* l_0_8_120 l_0_8_120)))
 (let ((?x20879 (* l_0_8_119 l_0_8_119)))
 (let ((?x20877 (* l_0_8_118 l_0_8_118)))
 (let ((?x4065 (- (- (* (- l_0_8_116) l_0_8_116) (* l_0_8_117 l_0_8_117)) ?x20877)))
 (let ((?x4035 (- (- (- (- (- (- (- ?x4065 ?x20879) ?x20881) ?x20883) ?x20885) ?x20887) ?x20889) ?x20891)))
 (let ((?x3963 (+ (+ (+ (+ (+ (+ (+ ?x4035 ?x20893) ?x20895) ?x20897) ?x20899) ?x20901) ?x20911) ?x20913)))
 (= (+ (+ (+ ?x3963 ?x20915) ?x20917) ?x20919) 0.0)))))))))))))))))))))))
(assert
 (let ((?x18659 (* (* 2.0 l_0_8_183) l_0_8_188)))
 (let ((?x18656 (* (* 2.0 l_0_8_182) l_0_8_187)))
 (let ((?x18653 (* (* 2.0 l_0_8_181) l_0_8_186)))
 (let ((?x18650 (* (* 2.0 l_0_8_180) l_0_8_185)))
 (let ((?x18647 (* (* 2.0 l_0_8_179) l_0_8_184)))
 (let ((?x18644 (* (* 2.0 l_0_8_162) l_0_8_167)))
 (let ((?x18641 (* (* 2.0 l_0_8_161) l_0_8_166)))
 (let ((?x18638 (* (* 2.0 l_0_8_160) l_0_8_165)))
 (let ((?x18635 (* (* 2.0 l_0_8_159) l_0_8_164)))
 (let ((?x18632 (* (* 2.0 l_0_8_158) l_0_8_163)))
 (let ((?x18619 (* (* 2.0 l_0_8_120) l_0_8_125)))
 (let ((?x18614 (* (* 2.0 l_0_8_119) l_0_8_124)))
 (let ((?x18611 (* (* 2.0 l_0_8_118) l_0_8_123)))
 (let ((?x18608 (* (* 2.0 l_0_8_117) l_0_8_122)))
 (let ((?x18605 (* (* 2.0 l_0_8_116) l_0_8_121)))
 (let ((?x18600 (* (* 2.0 l_0_8_104) l_0_8_99)))
 (let ((?x18369 (* 2.0 l_0_8_103)))
 (let ((?x18597 (* ?x18369 l_0_8_98)))
 (let ((?x17915 (* 2.0 l_0_8_102)))
 (let ((?x18595 (* ?x17915 l_0_8_97)))
 (let ((?x16571 (* 2.0 l_0_8_101)))
 (let ((?x18593 (* ?x16571 l_0_8_96)))
 (let ((?x16568 (* 2.0 l_0_8_100)))
 (let ((?x18591 (* ?x16568 l_0_8_95)))
 (let ((?x4206 (- (- (- (+ (+ (+ (+ ?x18591 ?x18593) ?x18595) ?x18597) ?x18600) ?x18605) ?x18608) ?x18611)))
 (let ((?x4165 (- (- (- (- (- (- (- ?x4206 ?x18614) ?x18619) ?x18632) ?x18635) ?x18638) ?x18641) ?x18644)))
 (= (+ (+ (+ (+ (+ ?x4165 ?x18647) ?x18650) ?x18653) ?x18656) ?x18659) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x18924 (* l_0_8_189 l_0_8_189)))
 (let ((?x18922 (* l_0_8_188 l_0_8_188)))
 (let ((?x18920 (* l_0_8_187 l_0_8_187)))
 (let ((?x18918 (* l_0_8_186 l_0_8_186)))
 (let ((?x18916 (* l_0_8_185 l_0_8_185)))
 (let ((?x18914 (* l_0_8_184 l_0_8_184)))
 (let ((?x18910 (* l_0_8_168 l_0_8_168)))
 (let ((?x18908 (* l_0_8_167 l_0_8_167)))
 (let ((?x18906 (* l_0_8_166 l_0_8_166)))
 (let ((?x18904 (* l_0_8_165 l_0_8_165)))
 (let ((?x18902 (* l_0_8_164 l_0_8_164)))
 (let ((?x18900 (* l_0_8_163 l_0_8_163)))
 (let ((?x18893 (* l_0_8_126 l_0_8_126)))
 (let ((?x18891 (* l_0_8_125 l_0_8_125)))
 (let ((?x18889 (* l_0_8_124 l_0_8_124)))
 (let ((?x18887 (* l_0_8_123 l_0_8_123)))
 (let ((?x18885 (* l_0_8_122 l_0_8_122)))
 (let ((?x18883 (* l_0_8_121 l_0_8_121)))
 (let ((?x18881 (* l_0_8_105 l_0_8_105)))
 (let ((?x18879 (* l_0_8_104 l_0_8_104)))
 (let ((?x18877 (* l_0_8_103 l_0_8_103)))
 (let ((?x18875 (* l_0_8_102 l_0_8_102)))
 (let ((?x4427 (+ (+ (+ (* l_0_8_100 l_0_8_100) (* l_0_8_101 l_0_8_101)) ?x18875) ?x18877)))
 (let ((?x4303 (- (- (- (- (- (+ (+ ?x4427 ?x18879) ?x18881) ?x18883) ?x18885) ?x18887) ?x18889) ?x18891)))
 (let ((?x4263 (- (- (- (- (- (- (- ?x4303 ?x18893) ?x18900) ?x18902) ?x18904) ?x18906) ?x18908) ?x18910)))
 (= (+ (+ (+ (+ (+ (+ ?x4263 ?x18914) ?x18916) ?x18918) ?x18920) ?x18922) ?x18924) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x17812 (* l_0_8_132 l_0_8_132)))
 (let ((?x4592 (- (- (* (- l_0_8_130) l_0_8_130) (* l_0_8_131 l_0_8_131)) ?x17812)))
 (= ?x4592 0.0))))
(assert
 (>= l_0_8_1 0.0))
(assert
 (>= l_0_8_3 0.0))
(assert
 (>= l_0_8_6 0.0))
(assert
 (>= l_0_8_10 0.0))
(assert
 (>= l_0_8_15 0.0))
(assert
 (>= l_0_8_21 0.0))
(assert
 (>= l_0_8_22 0.0))
(assert
 (>= l_0_8_24 0.0))
(assert
 (>= l_0_8_27 0.0))
(assert
 (>= l_0_8_31 0.0))
(assert
 (>= l_0_8_36 0.0))
(assert
 (>= l_0_8_42 0.0))
(assert
 (>= l_0_8_43 0.0))
(assert
 (>= l_0_8_45 0.0))
(assert
 (>= l_0_8_48 0.0))
(assert
 (>= l_0_8_52 0.0))
(assert
 (>= l_0_8_57 0.0))
(assert
 (>= l_0_8_63 0.0))
(assert
 (>= l_0_8_64 0.0))
(assert
 (>= l_0_8_66 0.0))
(assert
 (>= l_0_8_69 0.0))
(assert
 (>= l_0_8_73 0.0))
(assert
 (>= l_0_8_78 0.0))
(assert
 (>= l_0_8_84 0.0))
(assert
 (>= l_0_8_85 0.0))
(assert
 (>= l_0_8_87 0.0))
(assert
 (>= l_0_8_90 0.0))
(assert
 (>= l_0_8_94 0.0))
(assert
 (>= l_0_8_99 0.0))
(assert
 (>= l_0_8_105 0.0))
(assert
 (>= l_0_8_106 0.0))
(assert
 (>= l_0_8_108 0.0))
(assert
 (>= l_0_8_111 0.0))
(assert
 (>= l_0_8_115 0.0))
(assert
 (>= l_0_8_120 0.0))
(assert
 (>= l_0_8_126 0.0))
(assert
 (>= l_0_8_127 0.0))
(assert
 (>= l_0_8_129 0.0))
(assert
 (>= l_0_8_132 0.0))
(assert
 (>= l_0_8_136 0.0))
(assert
 (>= l_0_8_141 0.0))
(assert
 (>= l_0_8_147 0.0))
(assert
 (>= l_0_8_148 0.0))
(assert
 (>= l_0_8_150 0.0))
(assert
 (>= l_0_8_153 0.0))
(assert
 (>= l_0_8_157 0.0))
(assert
 (>= l_0_8_162 0.0))
(assert
 (>= l_0_8_168 0.0))
(assert
 (>= l_0_8_169 0.0))
(assert
 (>= l_0_8_171 0.0))
(assert
 (>= l_0_8_174 0.0))
(assert
 (>= l_0_8_178 0.0))
(assert
 (>= l_0_8_183 0.0))
(assert
 (>= l_0_8_189 0.0))
(assert
 (>= l_0_8_190 0.0))
(assert
 (>= l_0_8_192 0.0))
(assert
 (>= l_0_8_195 0.0))
(assert
 (>= l_0_8_199 0.0))
(assert
 (>= l_0_8_204 0.0))
(assert
 (>= l_0_8_210 0.0))
(assert
 (>= l_0_8_211 0.0))
(assert
 (>= l_0_8_213 0.0))
(assert
 (>= l_0_8_216 0.0))
(assert
 (>= l_0_8_220 0.0))
(assert
 (>= l_0_8_225 0.0))
(assert
 (>= l_0_8_231 0.0))
(assert
 (let ((?x21576 (* l_0_9_64 l_0_9_64)))
 (let ((?x21577 (* 3.0 ?x21576)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x21574 (* ?x21573 l_0_9_79)))
 (let ((?x21553 (* (* 3.0 l_0_9_43) l_0_9_43)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x21550 (* ?x21549 l_0_9_58)))
 (let ((?x21547 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x21544 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x21541 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x21538 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x21535 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x21532 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x21529 (* l_0_9_252 l_0_9_252)))
 (let ((?x21527 (* l_0_9_251 l_0_9_251)))
 (let ((?x21525 (* l_0_9_250 l_0_9_250)))
 (let ((?x21523 (* l_0_9_249 l_0_9_249)))
 (let ((?x21521 (* l_0_9_248 l_0_9_248)))
 (let ((?x21519 (* l_0_9_247 l_0_9_247)))
 (let ((?x21517 (* l_0_9_231 l_0_9_231)))
 (let ((?x21515 (* l_0_9_230 l_0_9_230)))
 (let ((?x21513 (* l_0_9_229 l_0_9_229)))
 (let ((?x21511 (* l_0_9_228 l_0_9_228)))
 (let ((?x21509 (* l_0_9_227 l_0_9_227)))
 (let ((?x21507 (* l_0_9_226 l_0_9_226)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21505 (* ?x21504 l_0_9_37)))
 (let ((?x21502 (* l_0_9_210 l_0_9_210)))
 (let ((?x21499 (* l_0_9_21 l_0_9_21)))
 (let ((?x21500 (* 6.0 ?x21499)))
 (let ((?x21497 (* l_0_9_209 l_0_9_209)))
 (let ((?x21495 (* l_0_9_208 l_0_9_208)))
 (let ((?x21493 (* l_0_9_207 l_0_9_207)))
 (let ((?x21491 (* l_0_9_206 l_0_9_206)))
 (let ((?x21489 (* l_0_9_205 l_0_9_205)))
 (let ((?x21486 (* l_0_9_20 l_0_9_20)))
 (let ((?x21487 (* 6.0 ?x21486)))
 (let ((?x21483 (* l_0_9_19 l_0_9_19)))
 (let ((?x21484 (* 6.0 ?x21483)))
 (let ((?x21480 (* l_0_9_18 l_0_9_18)))
 (let ((?x21481 (* 6.0 ?x21480)))
 (let ((?x21477 (* l_0_9_17 l_0_9_17)))
 (let ((?x21478 (* 6.0 ?x21477)))
 (let ((?x21474 (* l_0_9_16 l_0_9_16)))
 (let ((?x21475 (* 6.0 ?x21474)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x21472 (* ?x21471 l_0_9_142)))
 (let ((?x21469 (* 12.0 l_0_9_1)))
 (let ((?x21470 (* ?x21469 l_0_9_16)))
 (let ((?x21490 (- (+ (+ (+ (+ (+ (+ ?x21470 ?x21472) ?x21475) ?x21478) ?x21481) ?x21484) ?x21487) ?x21489)))
 (let ((?x21506 (- (- (+ (- (- (- (- ?x21490 ?x21491) ?x21493) ?x21495) ?x21497) ?x21500) ?x21502) ?x21505)))
 (let ((?x21520 (- (- (- (- (- (- (- ?x21506 ?x21507) ?x21509) ?x21511) ?x21513) ?x21515) ?x21517) ?x21519)))
 (let ((?x21536 (- (- (- (- (- (- (- ?x21520 ?x21521) ?x21523) ?x21525) ?x21527) ?x21529) ?x21532) ?x21535)))
 (let ((?x21557 (- (- (- (- (- (- (- ?x21536 ?x21538) ?x21541) ?x21544) ?x21547) ?x21550) ?x21553) (* (* 1.0 l_0_9_58) l_0_9_58))))
 (let ((?x21563 (- (- ?x21557 (* (* 1.0 l_0_9_59) l_0_9_59)) (* (* 1.0 l_0_9_60) l_0_9_60))))
 (let ((?x21569 (- (- ?x21563 (* (* 1.0 l_0_9_61) l_0_9_61)) (* (* 1.0 l_0_9_62) l_0_9_62))))
 (let ((?x21581 (+ (+ (+ (- ?x21569 (* (* 1.0 l_0_9_63) l_0_9_63)) ?x21574) ?x21577) (* 1.0 (* l_0_9_79 l_0_9_79)))))
 (let ((?x21587 (+ (+ ?x21581 (* 1.0 (* l_0_9_80 l_0_9_80))) (* 1.0 (* l_0_9_81 l_0_9_81)))))
 (let ((?x21593 (+ (+ ?x21587 (* 1.0 (* l_0_9_82 l_0_9_82))) (* 1.0 (* l_0_9_83 l_0_9_83)))))
 (= (+ (+ ?x21593 (* 1.0 (* l_0_9_84 l_0_9_84))) 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21576 (* l_0_9_64 l_0_9_64)))
 (let ((?x21577 (* 3.0 ?x21576)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21710 (* ?x21709 l_0_9_79)))
 (let ((?x21553 (* (* 3.0 l_0_9_43) l_0_9_43)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21706 (* ?x21705 l_0_9_58)))
 (let ((?x21700 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21505 (* ?x21504 l_0_9_37)))
 (let ((?x21690 (* l_0_9_127 l_0_9_127)))
 (let ((?x21669 (* l_0_9_1 l_0_9_1)))
 (let ((?x21670 (* 6.0 ?x21669)))
 (let ((?x21469 (* 12.0 l_0_9_1)))
 (let ((?x21470 (* ?x21469 l_0_9_16)))
 (let ((?x21697 (- (- (+ (+ ?x21470 ?x21670) ?x21690) (* (* 2.0 l_0_9_190) l_0_9_205)) (* (* 2.0 l_0_9_211) l_0_9_226))))
 (let ((?x21707 (- (- (- (- ?x21697 ?x21505) ?x21700) (* (* 2.0 l_0_9_232) l_0_9_247)) ?x21706)))
 (= (+ (+ (+ (- ?x21707 ?x21553) ?x21710) ?x21577) 9.0) 0.0)))))))))))))))))))
(assert
 (let ((?x21740 (* l_0_9_232 l_0_9_232)))
 (let ((?x21700 (* (* 6.0 l_0_9_22) l_0_9_22)))
 (let ((?x21737 (* l_0_9_211 l_0_9_211)))
 (let ((?x4916 (* l_0_9_190 l_0_9_190)))
 (let ((?x21739 (- (- (- (+ (- _a_6_) (* 6.0 (* l_0_9_1 l_0_9_1))) ?x4916) ?x21737) ?x21700)))
 (let ((?x21746 (+ (- (- ?x21739 ?x21740) (* (* 1.0 l_0_9_43) l_0_9_43)) (* 1.0 (* l_0_9_64 l_0_9_64)))))
 (= (+ ?x21746 7.0) 0.0))))))))
(assert
 (let ((?x21780 (* l_0_9_3 l_0_9_3)))
 (let ((?x21781 (* 6.0 ?x21780)))
 (let ((?x21778 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21775 (* l_0_9_234 l_0_9_234)))
 (let ((?x21773 (* l_0_9_233 l_0_9_233)))
 (let ((?x21771 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21765 (* l_0_9_213 l_0_9_213)))
 (let ((?x21763 (* l_0_9_212 l_0_9_212)))
 (let ((?x21760 (* l_0_9_2 l_0_9_2)))
 (let ((?x21761 (* 6.0 ?x21760)))
 (let ((?x21758 (* l_0_9_192 l_0_9_192)))
 (let ((?x21756 (* l_0_9_191 l_0_9_191)))
 (let ((?x21762 (+ (- (- (- (- _a_7_) (* (* 2.0 l_0_9_1) l_0_9_2)) ?x21756) ?x21758) ?x21761)))
 (let ((?x21772 (- (+ (- (- ?x21762 ?x21763) ?x21765) (* (* 2.0 l_0_9_22) l_0_9_23)) ?x21771)))
 (let ((?x21785 (- (+ (- (- (- ?x21772 ?x21773) ?x21775) ?x21778) ?x21781) (* (* 1.0 l_0_9_44) l_0_9_44))))
 (let ((?x21791 (+ (- ?x21785 (* (* 1.0 l_0_9_45) l_0_9_45)) (* 1.0 (* l_0_9_65 l_0_9_65)))))
 (= (+ ?x21791 (* 1.0 (* l_0_9_66 l_0_9_66))) 0.0))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x21880 (* ?x21879 l_0_9_75)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x21877 (* ?x21876 l_0_9_74)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21874 (* ?x21709 l_0_9_65)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x21872 (* ?x21871 l_0_9_54)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x21869 (* ?x21868 l_0_9_53)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21866 (* ?x21705 l_0_9_44)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x21864 (* ?x21863 l_0_9_33)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x21855 (* ?x21854 l_0_9_32)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x21838 (* ?x21837 l_0_9_3)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x21835 (* ?x21834 l_0_9_2)))
 (let ((?x21839 (+ (+ (- (- _a_8_) (* (* 2.0 l_0_9_1) l_0_9_11)) ?x21835) ?x21838)))
 (let ((?x21845 (- (- ?x21839 (* (* 2.0 l_0_9_191) l_0_9_200)) (* (* 2.0 l_0_9_192) l_0_9_201))))
 (let ((?x21851 (- (- ?x21845 (* (* 2.0 l_0_9_212) l_0_9_221)) (* (* 2.0 l_0_9_213) l_0_9_222))))
 (let ((?x21859 (- (- (+ ?x21851 (* (* 2.0 l_0_9_22) l_0_9_32)) ?x21855) (* (* 2.0 l_0_9_233) l_0_9_242))))
 (let ((?x21870 (- (+ (- (- ?x21859 (* (* 2.0 l_0_9_234) l_0_9_243)) ?x21864) ?x21866) ?x21869)))
 (= (+ (+ (- (- ?x21870 ?x21872) ?x21874) ?x21877) ?x21880) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21874 (* ?x21709 l_0_9_65)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21866 (* ?x21705 l_0_9_44)))
 (let ((?x4895 (* l_0_9_22 l_0_9_22)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21929 (* ?x21504 l_0_9_23)))
 (let ((?x21669 (* l_0_9_1 l_0_9_1)))
 (let ((?x21926 (- (- (+ (- _a_9_) (* (* 12.0 l_0_9_1) l_0_9_2)) ?x21669) (* (* 2.0 l_0_9_190) l_0_9_191))))
 (let ((?x21933 (- (+ (- (- ?x21926 (* (* 2.0 l_0_9_211) l_0_9_212)) ?x21929) ?x4895) (* (* 2.0 l_0_9_232) l_0_9_233))))
 (= (+ (- ?x21933 ?x21866) ?x21874) 0.0))))))))))))
(assert
 (let ((?x21576 (* l_0_9_64 l_0_9_64)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21967 (* ?x21709 l_0_9_74)))
 (let ((?x4790 (* l_0_9_43 l_0_9_43)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21964 (* ?x21705 l_0_9_53)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21960 (* ?x21504 l_0_9_32)))
 (let ((?x21957 (- (+ (- _a_10_) (* (* 12.0 l_0_9_1) l_0_9_11)) (* (* 2.0 l_0_9_190) l_0_9_200))))
 (let ((?x21963 (- (- (- ?x21957 (* (* 2.0 l_0_9_211) l_0_9_221)) ?x21960) (* (* 2.0 l_0_9_232) l_0_9_242))))
 (= (- (+ (+ (- ?x21963 ?x21964) ?x4790) ?x21967) ?x21576) 0.0))))))))))))
(assert
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21967 (* ?x21709 l_0_9_74)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21964 (* ?x21705 l_0_9_53)))
 (let ((?x22052 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x22049 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x22046 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x22043 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x22040 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x22037 (* l_0_9_246 l_0_9_246)))
 (let ((?x22035 (* l_0_9_245 l_0_9_245)))
 (let ((?x22033 (* l_0_9_244 l_0_9_244)))
 (let ((?x22031 (* l_0_9_243 l_0_9_243)))
 (let ((?x22029 (* l_0_9_242 l_0_9_242)))
 (let ((?x22027 (* l_0_9_225 l_0_9_225)))
 (let ((?x22025 (* l_0_9_224 l_0_9_224)))
 (let ((?x22023 (* l_0_9_223 l_0_9_223)))
 (let ((?x22021 (* l_0_9_222 l_0_9_222)))
 (let ((?x22019 (* l_0_9_221 l_0_9_221)))
 (let ((?x22017 (* l_0_9_204 l_0_9_204)))
 (let ((?x22015 (* l_0_9_203 l_0_9_203)))
 (let ((?x22013 (* l_0_9_202 l_0_9_202)))
 (let ((?x22011 (* l_0_9_201 l_0_9_201)))
 (let ((?x22009 (* l_0_9_200 l_0_9_200)))
 (let ((?x22006 (* l_0_9_15 l_0_9_15)))
 (let ((?x22007 (* 6.0 ?x22006)))
 (let ((?x22003 (* l_0_9_14 l_0_9_14)))
 (let ((?x22004 (* 6.0 ?x22003)))
 (let ((?x22000 (* l_0_9_13 l_0_9_13)))
 (let ((?x22001 (* 6.0 ?x22000)))
 (let ((?x21997 (* l_0_9_12 l_0_9_12)))
 (let ((?x21998 (* 6.0 ?x21997)))
 (let ((?x22002 (+ (+ (+ (- _a_11_) (* 6.0 (* l_0_9_11 l_0_9_11))) ?x21998) ?x22001)))
 (let ((?x22018 (- (- (- (- (- (+ (+ ?x22002 ?x22004) ?x22007) ?x22009) ?x22011) ?x22013) ?x22015) ?x22017)))
 (let ((?x22032 (- (- (- (- (- (- (- ?x22018 ?x22019) ?x22021) ?x22023) ?x22025) ?x22027) ?x22029) ?x22031)))
 (let ((?x22050 (- (- (- (- (- (- (- ?x22032 ?x22033) ?x22035) ?x22037) ?x22040) ?x22043) ?x22046) ?x22049)))
 (let ((?x22060 (- (- (+ (- ?x22050 ?x22052) ?x21964) (* (* 1.0 l_0_9_53) l_0_9_53)) (* (* 1.0 l_0_9_54) l_0_9_54))))
 (let ((?x22066 (- (- ?x22060 (* (* 1.0 l_0_9_55) l_0_9_55)) (* (* 1.0 l_0_9_56) l_0_9_56))))
 (let ((?x22073 (+ (- (- ?x22066 (* (* 1.0 l_0_9_57) l_0_9_57)) ?x21967) (* 1.0 (* l_0_9_74 l_0_9_74)))))
 (let ((?x22079 (+ (+ ?x22073 (* 1.0 (* l_0_9_75 l_0_9_75))) (* 1.0 (* l_0_9_76 l_0_9_76)))))
 (let ((?x22085 (+ (+ ?x22079 (* 1.0 (* l_0_9_77 l_0_9_77))) (* 1.0 (* l_0_9_78 l_0_9_78)))))
 (= ?x22085 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22172 (* ?x21879 l_0_9_68)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22170 (* ?x21876 l_0_9_67)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22168 (* ?x21871 l_0_9_47)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22166 (* ?x21868 l_0_9_46)))
 (let ((?x22163 (* 12.0 l_0_9_3)))
 (let ((?x22164 (* ?x22163 l_0_9_5)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22161 (* ?x21863 l_0_9_26)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22155 (* ?x21854 l_0_9_25)))
 (let ((?x22146 (* 12.0 l_0_9_2)))
 (let ((?x22147 (* ?x22146 l_0_9_4)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x22140 (* ?x21471 l_0_9_128)))
 (let ((?x22143 (- (- (* (* (- 2.0) l_0_9_1) l_0_9_4) ?x22140) (* (* 2.0 l_0_9_191) l_0_9_193))))
 (let ((?x22150 (- (+ (- ?x22143 (* (* 2.0 l_0_9_192) l_0_9_194)) ?x22147) (* (* 2.0 l_0_9_212) l_0_9_214))))
 (let ((?x22154 (+ (- ?x22150 (* (* 2.0 l_0_9_213) l_0_9_215)) (* (* 2.0 l_0_9_22) l_0_9_25))))
 (let ((?x22160 (- (- (- ?x22154 ?x22155) (* (* 2.0 l_0_9_233) l_0_9_235)) (* (* 2.0 l_0_9_234) l_0_9_236))))
 (= (+ (+ (- (- (+ (- ?x22160 ?x22161) ?x22164) ?x22166) ?x22168) ?x22170) ?x22172) 0.0))))))))))))))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x22248 (* ?x22247 l_0_9_86)))
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22245 (* ?x21879 l_0_9_71)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22243 (* ?x21876 l_0_9_70)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22241 (* ?x21871 l_0_9_50)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22239 (* ?x21868 l_0_9_49)))
 (let ((?x22163 (* 12.0 l_0_9_3)))
 (let ((?x22237 (* ?x22163 l_0_9_8)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22235 (* ?x21863 l_0_9_29)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22229 (* ?x21854 l_0_9_28)))
 (let ((?x22146 (* 12.0 l_0_9_2)))
 (let ((?x22221 (* ?x22146 l_0_9_7)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x22215 (* ?x22214 l_0_9_170)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x22212 (* ?x22211 l_0_9_149)))
 (let ((?x22210 (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) (* (* 2.0 l_0_9_106) l_0_9_107))))
 (let ((?x22220 (- (- (- (+ ?x22210 ?x22212) ?x22215) (* (* 2.0 l_0_9_191) l_0_9_196)) (* (* 2.0 l_0_9_192) l_0_9_197))))
 (let ((?x22226 (- (- (+ ?x22220 ?x22221) (* (* 2.0 l_0_9_212) l_0_9_217)) (* (* 2.0 l_0_9_213) l_0_9_218))))
 (let ((?x22232 (- (- (+ ?x22226 (* (* 2.0 l_0_9_22) l_0_9_28)) ?x22229) (* (* 2.0 l_0_9_233) l_0_9_238))))
 (let ((?x22240 (- (+ (- (- ?x22232 (* (* 2.0 l_0_9_234) l_0_9_239)) ?x22235) ?x22237) ?x22239)))
 (= (- (+ (+ (- ?x22240 ?x22241) ?x22243) ?x22245) ?x22248) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22364 (* ?x21879 l_0_9_80)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22362 (* ?x21876 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x22360 (* ?x21573 l_0_9_65)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22358 (* ?x21871 l_0_9_59)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22356 (* ?x21868 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x22354 (* ?x21549 l_0_9_44)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22352 (* ?x21863 l_0_9_38)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22346 (* ?x21854 l_0_9_37)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21929 (* ?x21504 l_0_9_23)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x22333 (* ?x22332 l_0_9_3)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x22330 (* ?x22329 l_0_9_2)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x22140 (* ?x21471 l_0_9_128)))
 (let ((?x21469 (* 12.0 l_0_9_1)))
 (let ((?x21914 (* ?x21469 l_0_9_2)))
 (let ((?x22334 (+ (+ (+ (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x21914) ?x22140) ?x22330) ?x22333)))
 (let ((?x22338 (- (- ?x22334 (* (* 2.0 l_0_9_191) l_0_9_205)) (* (* 2.0 l_0_9_192) l_0_9_206))))
 (let ((?x22342 (- (- ?x22338 (* (* 2.0 l_0_9_212) l_0_9_226)) (* (* 2.0 l_0_9_213) l_0_9_227))))
 (let ((?x22349 (- (- (+ (- ?x22342 ?x21929) (* (* 2.0 l_0_9_22) l_0_9_37)) ?x22346) (* (* 2.0 l_0_9_233) l_0_9_247))))
 (let ((?x22357 (- (- (- (- ?x22349 (* (* 2.0 l_0_9_234) l_0_9_248)) ?x22352) ?x22354) ?x22356)))
 (= (+ (+ (+ (- ?x22357 ?x22358) ?x22360) ?x22362) ?x22364) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x21780 (* l_0_9_3 l_0_9_3)))
 (let ((?x5007 (* l_0_9_24 l_0_9_24)))
 (let ((?x22405 (- (+ (+ (* (- l_0_9_2) l_0_9_2) (* l_0_9_23 l_0_9_23)) ?x5007) ?x21780)))
 (= ?x22405 0.0)))))
(assert
 (let ((?x22417 (- (- (* (- l_0_9_128) l_0_9_128) (* l_0_9_129 l_0_9_129)) (* (* 2.0 l_0_9_2) l_0_9_4))))
 (let ((?x22423 (+ (+ ?x22417 (* (* 2.0 l_0_9_23) l_0_9_25)) (* (* 2.0 l_0_9_24) l_0_9_26))))
 (= (- ?x22423 (* (* 2.0 l_0_9_3) l_0_9_5)) 0.0))))
(assert
 (let ((?x22458 (* l_0_9_87 l_0_9_87)))
 (let ((?x22456 (* l_0_9_86 l_0_9_86)))
 (let ((?x22446 (* l_0_9_171 l_0_9_171)))
 (let ((?x22444 (* l_0_9_170 l_0_9_170)))
 (let ((?x22442 (* l_0_9_150 l_0_9_150)))
 (let ((?x22440 (* l_0_9_149 l_0_9_149)))
 (let ((?x22443 (+ (+ (+ (* l_0_9_107 l_0_9_107) (* l_0_9_108 l_0_9_108)) ?x22440) ?x22442)))
 (let ((?x22451 (+ (- (- (- ?x22443 ?x22444) ?x22446) (* (* 2.0 l_0_9_2) l_0_9_7)) (* (* 2.0 l_0_9_23) l_0_9_28))))
 (let ((?x22455 (- (+ ?x22451 (* (* 2.0 l_0_9_24) l_0_9_29)) (* (* 2.0 l_0_9_3) l_0_9_8))))
 (= (- (- ?x22455 ?x22456) ?x22458) 0.0)))))))))))
(assert
 (let ((?x21792 (* l_0_9_66 l_0_9_66)))
 (let ((?x21789 (* l_0_9_65 l_0_9_65)))
 (let ((?x5018 (* l_0_9_45 l_0_9_45)))
 (let ((?x5011 (* l_0_9_44 l_0_9_44)))
 (let ((?x22472 (- (* (* (- 2.0) l_0_9_11) l_0_9_2) (* (* 2.0 l_0_9_12) l_0_9_3))))
 (let ((?x22476 (+ (+ ?x22472 (* (* 2.0 l_0_9_23) l_0_9_32)) (* (* 2.0 l_0_9_24) l_0_9_33))))
 (= (- (- (+ (+ ?x22476 ?x5011) ?x5018) ?x21789) ?x21792) 0.0))))))))
(assert
 (let ((?x21792 (* l_0_9_66 l_0_9_66)))
 (let ((?x22512 (* 3.0 ?x21792)))
 (let ((?x21789 (* l_0_9_65 l_0_9_65)))
 (let ((?x22510 (* 3.0 ?x21789)))
 (let ((?x22508 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (let ((?x21780 (* l_0_9_3 l_0_9_3)))
 (let ((?x21781 (* 6.0 ?x21780)))
 (let ((?x21778 (* (* 6.0 l_0_9_24) l_0_9_24)))
 (let ((?x21771 (* (* 6.0 l_0_9_23) l_0_9_23)))
 (let ((?x21760 (* l_0_9_2 l_0_9_2)))
 (let ((?x21761 (* 6.0 ?x21760)))
 (let ((?x22492 (- (+ (* l_0_9_128 l_0_9_128) (* l_0_9_129 l_0_9_129)) (* (* 2.0 l_0_9_16) l_0_9_2))))
 (let ((?x22498 (+ (+ (- ?x22492 (* (* 2.0 l_0_9_17) l_0_9_3)) ?x21761) (* (* 2.0 l_0_9_23) l_0_9_37))))
 (let ((?x22503 (+ (- (+ (- ?x22498 ?x21771) (* (* 2.0 l_0_9_24) l_0_9_38)) ?x21778) ?x21781)))
 (let ((?x22513 (+ (+ (- (- ?x22503 (* (* 3.0 l_0_9_44) l_0_9_44)) ?x22508) ?x22510) ?x22512)))
 (= ?x22513 0.0)))))))))))))))))
(assert
 (let ((?x22551 (* l_0_9_6 l_0_9_6)))
 (let ((?x22549 (* l_0_9_5 l_0_9_5)))
 (let ((?x22547 (* l_0_9_4 l_0_9_4)))
 (let ((?x22545 (* l_0_9_27 l_0_9_27)))
 (let ((?x22543 (* l_0_9_26 l_0_9_26)))
 (let ((?x22541 (* l_0_9_25 l_0_9_25)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22539 (* ?x22538 l_0_9_131)))
 (let ((?x22546 (+ (+ (+ (- (* (* (- 2.0) l_0_9_128) l_0_9_130) ?x22539) ?x22541) ?x22543) ?x22545)))
 (= (- (- (- ?x22546 ?x22547) ?x22549) ?x22551) 0.0)))))))))))
(assert
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22613 (* ?x22612 l_0_9_89)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22610 (* ?x22609 l_0_9_88)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22589 (* ?x22588 l_0_9_173)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22586 (* ?x22585 l_0_9_172)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22583 (* ?x22582 l_0_9_152)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22580 (* ?x22579 l_0_9_151)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22577 (* ?x22538 l_0_9_134)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x22575 (* ?x22574 l_0_9_133)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22572 (* ?x22571 l_0_9_110)))
 (let ((?x22581 (+ (- (- (+ (* (* 2.0 l_0_9_107) l_0_9_109) ?x22572) ?x22575) ?x22577) ?x22580)))
 (let ((?x22593 (+ (- (- (+ ?x22581 ?x22583) ?x22586) ?x22589) (* (* 2.0 l_0_9_25) l_0_9_28))))
 (let ((?x22599 (+ (+ ?x22593 (* (* 2.0 l_0_9_26) l_0_9_29)) (* (* 2.0 l_0_9_27) l_0_9_30))))
 (let ((?x22605 (- (- ?x22599 (* (* 2.0 l_0_9_4) l_0_9_7)) (* (* 2.0 l_0_9_5) l_0_9_8))))
 (= (- (- (- ?x22605 (* (* 2.0 l_0_9_6) l_0_9_9)) ?x22610) ?x22613) 0.0))))))))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22172 (* ?x21879 l_0_9_68)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22170 (* ?x21876 l_0_9_67)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22168 (* ?x21871 l_0_9_47)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22166 (* ?x21868 l_0_9_46)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22668 (* ?x22538 l_0_9_138)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x22666 (* ?x22574 l_0_9_137)))
 (let ((?x22665 (- (* (* (- 2.0) l_0_9_11) l_0_9_4) (* (* 2.0 l_0_9_12) l_0_9_5))))
 (let ((?x22674 (+ (- (- (- ?x22665 ?x22666) ?x22668) (* (* 2.0 l_0_9_13) l_0_9_6)) (* (* 2.0 l_0_9_25) l_0_9_32))))
 (let ((?x22678 (+ (+ ?x22674 (* (* 2.0 l_0_9_26) l_0_9_33)) (* (* 2.0 l_0_9_27) l_0_9_34))))
 (= (- (- (+ (+ ?x22678 ?x22166) ?x22168) ?x22170) ?x22172) 0.0)))))))))))))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x22730 (* ?x22729 l_0_9_68)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x22727 (* ?x22726 l_0_9_67)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x22724 (* ?x22723 l_0_9_47)))
 (let ((?x22163 (* 12.0 l_0_9_3)))
 (let ((?x22164 (* ?x22163 l_0_9_5)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22161 (* ?x21863 l_0_9_26)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22155 (* ?x21854 l_0_9_25)))
 (let ((?x22146 (* 12.0 l_0_9_2)))
 (let ((?x22147 (* ?x22146 l_0_9_4)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22701 (* ?x22538 l_0_9_143)))
 (let ((?x22539 (* ?x22538 l_0_9_131)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x6482 (* ?x22574 l_0_9_142)))
 (let ((?x22704 (- (- (+ (- (* ?x22574 l_0_9_130) ?x6482) ?x22539) ?x22701) (* (* 2.0 l_0_9_16) l_0_9_4))))
 (let ((?x22709 (- (- ?x22704 (* (* 2.0 l_0_9_17) l_0_9_5)) (* (* 2.0 l_0_9_18) l_0_9_6))))
 (let ((?x22714 (+ (- (- (+ ?x22709 ?x22147) ?x22155) ?x22161) (* (* 2.0 l_0_9_25) l_0_9_37))))
 (let ((?x22718 (+ (+ ?x22714 (* (* 2.0 l_0_9_26) l_0_9_38)) (* (* 2.0 l_0_9_27) l_0_9_39))))
 (let ((?x22728 (+ (- (- (+ ?x22718 ?x22164) (* (* 6.0 l_0_9_44) l_0_9_46)) ?x22724) ?x22727)))
 (= (+ ?x22728 ?x22730) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22799 (* l_0_9_9 l_0_9_9)))
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22797 (* ?x22612 l_0_9_92)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22795 (* ?x22609 l_0_9_91)))
 (let ((?x22793 (* l_0_9_8 l_0_9_8)))
 (let ((?x22791 (* l_0_9_7 l_0_9_7)))
 (let ((?x22789 (* l_0_9_31 l_0_9_31)))
 (let ((?x22787 (* l_0_9_30 l_0_9_30)))
 (let ((?x22785 (* l_0_9_29 l_0_9_29)))
 (let ((?x22783 (* l_0_9_28 l_0_9_28)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22781 (* ?x22588 l_0_9_176)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22779 (* ?x22585 l_0_9_175)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22777 (* ?x22582 l_0_9_155)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22775 (* ?x22579 l_0_9_154)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22773 (* ?x22571 l_0_9_113)))
 (let ((?x22772 (+ (* (- l_0_9_10) l_0_9_10) (* (* 2.0 l_0_9_107) l_0_9_112))))
 (let ((?x22786 (+ (+ (- (- (+ (+ (+ ?x22772 ?x22773) ?x22775) ?x22777) ?x22779) ?x22781) ?x22783) ?x22785)))
 (let ((?x22800 (- (- (- (- (- (+ (+ ?x22786 ?x22787) ?x22789) ?x22791) ?x22793) ?x22795) ?x22797) ?x22799)))
 (= ?x22800 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22860 (* ?x22612 l_0_9_96)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22858 (* ?x22609 l_0_9_95)))
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22245 (* ?x21879 l_0_9_71)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22243 (* ?x21876 l_0_9_70)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22241 (* ?x21871 l_0_9_50)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22239 (* ?x21868 l_0_9_49)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22840 (* ?x22588 l_0_9_180)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22838 (* ?x22585 l_0_9_179)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22836 (* ?x22582 l_0_9_159)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22834 (* ?x22579 l_0_9_158)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22825 (* ?x22571 l_0_9_117)))
 (let ((?x22824 (+ (* (* (- 2.0) l_0_9_10) l_0_9_14) (* (* 2.0 l_0_9_107) l_0_9_116))))
 (let ((?x22831 (- (- (+ ?x22824 ?x22825) (* (* 2.0 l_0_9_11) l_0_9_7)) (* (* 2.0 l_0_9_12) l_0_9_8))))
 (let ((?x22839 (- (+ (+ (- ?x22831 (* (* 2.0 l_0_9_13) l_0_9_9)) ?x22834) ?x22836) ?x22838)))
 (let ((?x22847 (+ (+ (- ?x22839 ?x22840) (* (* 2.0 l_0_9_28) l_0_9_32)) (* (* 2.0 l_0_9_29) l_0_9_33))))
 (let ((?x22853 (+ (+ ?x22847 (* (* 2.0 l_0_9_30) l_0_9_34)) (* (* 2.0 l_0_9_31) l_0_9_35))))
 (= (- (- (- (- (+ (+ ?x22853 ?x22239) ?x22241) ?x22243) ?x22245) ?x22858) ?x22860) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x22953 (* ?x22729 l_0_9_71)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x22951 (* ?x22726 l_0_9_70)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x22949 (* ?x22723 l_0_9_50)))
 (let ((?x22163 (* 12.0 l_0_9_3)))
 (let ((?x22237 (* ?x22163 l_0_9_8)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22235 (* ?x21863 l_0_9_29)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22229 (* ?x21854 l_0_9_28)))
 (let ((?x22146 (* 12.0 l_0_9_2)))
 (let ((?x22221 (* ?x22146 l_0_9_7)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22931 (* ?x22588 l_0_9_185)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22929 (* ?x22585 l_0_9_184)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22923 (* ?x22582 l_0_9_164)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22921 (* ?x22579 l_0_9_163)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22577 (* ?x22538 l_0_9_134)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x22575 (* ?x22574 l_0_9_133)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22917 (* ?x22571 l_0_9_122)))
 (let ((?x22569 (* 2.0 l_0_9_107)))
 (let ((?x22915 (* ?x22569 l_0_9_121)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x22913 (* ?x22912 l_0_9_87)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x22910 (* ?x22909 l_0_9_86)))
 (let ((?x22918 (+ (+ (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) ?x22910) ?x22913) ?x22915) ?x22917)))
 (let ((?x22926 (- (+ (+ (+ (+ ?x22918 ?x22575) ?x22577) ?x22921) ?x22923) (* (* 2.0 l_0_9_16) l_0_9_7))))
 (let ((?x22934 (- (- (- (- ?x22926 (* (* 2.0 l_0_9_17) l_0_9_8)) ?x22929) ?x22931) (* (* 2.0 l_0_9_18) l_0_9_9))))
 (let ((?x22939 (+ (- (- (+ ?x22934 ?x22221) ?x22229) ?x22235) (* (* 2.0 l_0_9_28) l_0_9_37))))
 (let ((?x22944 (+ (+ (+ ?x22939 (* (* 2.0 l_0_9_29) l_0_9_38)) ?x22237) (* (* 2.0 l_0_9_30) l_0_9_39))))
 (let ((?x22948 (- (+ ?x22944 (* (* 2.0 l_0_9_31) l_0_9_40)) (* (* 6.0 l_0_9_44) l_0_9_49))))
 (= (+ (+ (- ?x22948 ?x22949) ?x22951) ?x22953) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x21880 (* ?x21879 l_0_9_75)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x21877 (* ?x21876 l_0_9_74)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x21872 (* ?x21871 l_0_9_54)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x21869 (* ?x21868 l_0_9_53)))
 (let ((?x5544 (* l_0_9_36 l_0_9_36)))
 (let ((?x5538 (* l_0_9_35 l_0_9_35)))
 (let ((?x5532 (* l_0_9_34 l_0_9_34)))
 (let ((?x5416 (* l_0_9_33 l_0_9_33)))
 (let ((?x5410 (* l_0_9_32 l_0_9_32)))
 (let ((?x22006 (* l_0_9_15 l_0_9_15)))
 (let ((?x22003 (* l_0_9_14 l_0_9_14)))
 (let ((?x22000 (* l_0_9_13 l_0_9_13)))
 (let ((?x23005 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x22000) ?x22003)))
 (let ((?x23012 (+ (+ (+ (+ (+ (+ (- ?x23005 ?x22006) ?x5410) ?x5416) ?x5532) ?x5538) ?x5544) ?x21869)))
 (= (- (- (+ ?x23012 ?x21872) ?x21877) ?x21880) 0.0))))))))))))))))))))
(assert
 (let ((?x21879 (* 2.0 l_0_9_66)))
 (let ((?x22364 (* ?x21879 l_0_9_80)))
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x23065 (* ?x22729 l_0_9_75)))
 (let ((?x21876 (* 2.0 l_0_9_65)))
 (let ((?x22362 (* ?x21876 l_0_9_79)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x23062 (* ?x22726 l_0_9_74)))
 (let ((?x21871 (* 2.0 l_0_9_45)))
 (let ((?x22358 (* ?x21871 l_0_9_59)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x23059 (* ?x22723 l_0_9_54)))
 (let ((?x21868 (* 2.0 l_0_9_44)))
 (let ((?x22356 (* ?x21868 l_0_9_58)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x21864 (* ?x21863 l_0_9_33)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x21855 (* ?x21854 l_0_9_32)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22668 (* ?x22538 l_0_9_138)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x22666 (* ?x22574 l_0_9_137)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x21838 (* ?x21837 l_0_9_3)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x21835 (* ?x21834 l_0_9_2)))
 (let ((?x23027 (- (+ (* (* (- 2.0) l_0_9_11) l_0_9_16) ?x21835) (* (* 2.0 l_0_9_12) l_0_9_17))))
 (let ((?x23032 (- (+ (+ (+ ?x23027 ?x21838) ?x22666) ?x22668) (* (* 2.0 l_0_9_13) l_0_9_18))))
 (let ((?x23038 (- (- ?x23032 (* (* 2.0 l_0_9_14) l_0_9_19)) (* (* 2.0 l_0_9_15) l_0_9_20))))
 (let ((?x23046 (+ (+ (- (- ?x23038 ?x21855) ?x21864) (* (* 2.0 l_0_9_32) l_0_9_37)) (* (* 2.0 l_0_9_33) l_0_9_38))))
 (let ((?x23052 (+ (+ ?x23046 (* (* 2.0 l_0_9_34) l_0_9_39)) (* (* 2.0 l_0_9_35) l_0_9_40))))
 (let ((?x23057 (- (+ ?x23052 (* (* 2.0 l_0_9_36) l_0_9_41)) (* (* 6.0 l_0_9_44) l_0_9_53))))
 (let ((?x23067 (- (+ (- (+ (+ (- (+ ?x23057 ?x22356) ?x23059) ?x22358) ?x23062) ?x22362) ?x23065) ?x22364)))
 (= ?x23067 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x23135 (* ?x22729 l_0_9_80)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x23133 (* ?x22726 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x22360 (* ?x21573 l_0_9_65)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x23130 (* ?x22723 l_0_9_59)))
 (let ((?x22720 (* 6.0 l_0_9_44)))
 (let ((?x23128 (* ?x22720 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x22354 (* ?x21549 l_0_9_44)))
 (let ((?x4771 (* l_0_9_42 l_0_9_42)))
 (let ((?x4767 (* l_0_9_41 l_0_9_41)))
 (let ((?x4766 (* l_0_9_40 l_0_9_40)))
 (let ((?x4756 (* l_0_9_39 l_0_9_39)))
 (let ((?x4750 (* l_0_9_38 l_0_9_38)))
 (let ((?x4745 (* l_0_9_37 l_0_9_37)))
 (let ((?x21863 (* 12.0 l_0_9_24)))
 (let ((?x22352 (* ?x21863 l_0_9_38)))
 (let ((?x21854 (* 12.0 l_0_9_23)))
 (let ((?x22346 (* ?x21854 l_0_9_37)))
 (let ((?x21499 (* l_0_9_21 l_0_9_21)))
 (let ((?x21486 (* l_0_9_20 l_0_9_20)))
 (let ((?x21483 (* l_0_9_19 l_0_9_19)))
 (let ((?x21480 (* l_0_9_18 l_0_9_18)))
 (let ((?x21477 (* l_0_9_17 l_0_9_17)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x22333 (* ?x22332 l_0_9_3)))
 (let ((?x21474 (* l_0_9_16 l_0_9_16)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x22330 (* ?x22329 l_0_9_2)))
 (let ((?x22538 (* 2.0 l_0_9_129)))
 (let ((?x22701 (* ?x22538 l_0_9_143)))
 (let ((?x22574 (* 2.0 l_0_9_128)))
 (let ((?x6482 (* ?x22574 l_0_9_142)))
 (let ((?x23116 (- (- (- (+ (- (+ (+ ?x6482 ?x22701) ?x22330) ?x21474) ?x22333) ?x21477) ?x21480) ?x21483)))
 (let ((?x23123 (+ (+ (+ (- (- (- (- ?x23116 ?x21486) ?x21499) ?x22346) ?x22352) ?x4745) ?x4750) ?x4756)))
 (let ((?x23132 (+ (- (- (- (+ (+ (+ ?x23123 ?x4766) ?x4767) ?x4771) ?x22354) ?x23128) ?x23130) ?x22360)))
 (= (+ (+ ?x23132 ?x23133) ?x23135) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x23232 (* ?x23231 l_0_9_81)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x23229 (* ?x23228 l_0_9_80)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x23226 (* ?x23225 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23223 (* ?x21573 l_0_9_67)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x23221 (* ?x23220 l_0_9_60)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x23218 (* ?x23217 l_0_9_59)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x23215 (* ?x23214 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23212 (* ?x21549 l_0_9_46)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23210 (* ?x23209 l_0_9_39)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23207 (* ?x23206 l_0_9_38)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23204 (* ?x23203 l_0_9_37)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x23192 (* ?x21504 l_0_9_25)))
 (let ((?x23171 (* 12.0 l_0_9_18)))
 (let ((?x23172 (* ?x23171 l_0_9_6)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x23169 (* ?x22332 l_0_9_5)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x23167 (* ?x22329 l_0_9_4)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x21472 (* ?x21471 l_0_9_142)))
 (let ((?x23168 (+ (- (+ (* (* 12.0 l_0_9_1) l_0_9_4) (* ?x21471 l_0_9_130)) ?x21472) ?x23167)))
 (let ((?x23179 (- (- (+ (+ ?x23168 ?x23169) ?x23172) (* (* 2.0 l_0_9_193) l_0_9_205)) (* (* 2.0 l_0_9_194) l_0_9_206))))
 (let ((?x23185 (- (- ?x23179 (* (* 2.0 l_0_9_195) l_0_9_207)) (* (* 2.0 l_0_9_214) l_0_9_226))))
 (let ((?x23191 (- (- ?x23185 (* (* 2.0 l_0_9_215) l_0_9_227)) (* (* 2.0 l_0_9_216) l_0_9_228))))
 (let ((?x23199 (- (- (- ?x23191 ?x23192) (* (* 2.0 l_0_9_235) l_0_9_247)) (* (* 2.0 l_0_9_236) l_0_9_248))))
 (let ((?x23211 (- (- (- (- ?x23199 (* (* 2.0 l_0_9_237) l_0_9_249)) ?x23204) ?x23207) ?x23210)))
 (let ((?x23230 (+ (+ (+ (- (- (- (- ?x23211 ?x23212) ?x23215) ?x23218) ?x23221) ?x23223) ?x23226) ?x23229)))
 (= (+ ?x23230 ?x23232) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23390 (* 2.0 l_0_9_73)))
 (let ((?x23391 (* ?x23390 l_0_9_82)))
 (let ((?x23387 (* 2.0 l_0_9_72)))
 (let ((?x23388 (* ?x23387 l_0_9_81)))
 (let ((?x23384 (* 2.0 l_0_9_71)))
 (let ((?x23385 (* ?x23384 l_0_9_80)))
 (let ((?x23381 (* 2.0 l_0_9_70)))
 (let ((?x23382 (* ?x23381 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23379 (* ?x21573 l_0_9_70)))
 (let ((?x23376 (* 2.0 l_0_9_52)))
 (let ((?x23377 (* ?x23376 l_0_9_61)))
 (let ((?x23373 (* 2.0 l_0_9_51)))
 (let ((?x23374 (* ?x23373 l_0_9_60)))
 (let ((?x23370 (* 2.0 l_0_9_50)))
 (let ((?x23371 (* ?x23370 l_0_9_59)))
 (let ((?x23367 (* 2.0 l_0_9_49)))
 (let ((?x23368 (* ?x23367 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23365 (* ?x21549 l_0_9_49)))
 (let ((?x23362 (* 12.0 l_0_9_31)))
 (let ((?x23363 (* ?x23362 l_0_9_40)))
 (let ((?x23359 (* 12.0 l_0_9_30)))
 (let ((?x23360 (* ?x23359 l_0_9_39)))
 (let ((?x23356 (* 12.0 l_0_9_29)))
 (let ((?x23357 (* ?x23356 l_0_9_38)))
 (let ((?x23353 (* 12.0 l_0_9_28)))
 (let ((?x23354 (* ?x23353 l_0_9_37)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x23336 (* ?x21504 l_0_9_28)))
 (let ((?x23171 (* 12.0 l_0_9_18)))
 (let ((?x23313 (* ?x23171 l_0_9_9)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x23311 (* ?x22332 l_0_9_8)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x23309 (* ?x22214 l_0_9_184)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x23307 (* ?x22329 l_0_9_7)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x23305 (* ?x22211 l_0_9_163)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x23303 (* ?x21471 l_0_9_133)))
 (let ((?x22208 (* 2.0 l_0_9_106)))
 (let ((?x23301 (* ?x22208 l_0_9_121)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x23288 (* ?x22909 l_0_9_85)))
 (let ((?x23283 (* 12.0 l_0_9_10)))
 (let ((?x23285 (* ?x23283 l_0_9_19)))
 (let ((?x21469 (* 12.0 l_0_9_1)))
 (let ((?x23281 (* ?x21469 l_0_9_7)))
 (let ((?x23310 (- (+ (+ (+ (+ (- (+ ?x23281 ?x23285) ?x23288) ?x23301) ?x23303) ?x23305) ?x23307) ?x23309)))
 (let ((?x23320 (- (- (+ (+ ?x23310 ?x23311) ?x23313) (* (* 2.0 l_0_9_196) l_0_9_205)) (* (* 2.0 l_0_9_197) l_0_9_206))))
 (let ((?x23326 (- (- ?x23320 (* (* 2.0 l_0_9_198) l_0_9_207)) (* (* 2.0 l_0_9_199) l_0_9_208))))
 (let ((?x23332 (- (- ?x23326 (* (* 2.0 l_0_9_217) l_0_9_226)) (* (* 2.0 l_0_9_218) l_0_9_227))))
 (let ((?x23340 (- (- (- ?x23332 (* (* 2.0 l_0_9_219) l_0_9_228)) ?x23336) (* (* 2.0 l_0_9_220) l_0_9_229))))
 (let ((?x23346 (- (- ?x23340 (* (* 2.0 l_0_9_238) l_0_9_247)) (* (* 2.0 l_0_9_239) l_0_9_248))))
 (let ((?x23352 (- (- ?x23346 (* (* 2.0 l_0_9_240) l_0_9_249)) (* (* 2.0 l_0_9_241) l_0_9_250))))
 (let ((?x23372 (- (- (- (- (- (- (- ?x23352 ?x23354) ?x23357) ?x23360) ?x23363) ?x23365) ?x23368) ?x23371)))
 (let ((?x23392 (+ (+ (+ (+ (+ (- (- ?x23372 ?x23374) ?x23377) ?x23379) ?x23382) ?x23385) ?x23388) ?x23391)))
 (= ?x23392 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23578 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x23575 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x23572 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x23569 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x23566 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x21710 (* ?x21709 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23562 (* ?x21573 l_0_9_74)))
 (let ((?x23560 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x23557 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x23554 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x23551 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x23548 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x21706 (* ?x21705 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23544 (* ?x21549 l_0_9_53)))
 (let ((?x23542 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x23539 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x23536 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x23533 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x23530 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x21960 (* ?x21504 l_0_9_32)))
 (let ((?x23481 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x23478 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x23475 (* ?x23474 l_0_9_18)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x23472 (* ?x21471 l_0_9_137)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x23470 (* ?x21837 l_0_9_17)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x23468 (* ?x21834 l_0_9_16)))
 (let ((?x21469 (* 12.0 l_0_9_1)))
 (let ((?x21954 (* ?x21469 l_0_9_11)))
 (let ((?x23485 (- (+ (+ (+ (+ (+ (+ ?x21954 ?x23468) ?x23470) ?x23472) ?x23475) ?x23478) ?x23481) (* (* 2.0 l_0_9_200) l_0_9_205))))
 (let ((?x23491 (- (- ?x23485 (* (* 2.0 l_0_9_201) l_0_9_206)) (* (* 2.0 l_0_9_202) l_0_9_207))))
 (let ((?x23497 (- (- ?x23491 (* (* 2.0 l_0_9_203) l_0_9_208)) (* (* 2.0 l_0_9_204) l_0_9_209))))
 (let ((?x23504 (- (- (- ?x23497 ?x21960) (* (* 2.0 l_0_9_221) l_0_9_226)) (* (* 2.0 l_0_9_222) l_0_9_227))))
 (let ((?x23510 (- (- ?x23504 (* (* 2.0 l_0_9_223) l_0_9_228)) (* (* 2.0 l_0_9_224) l_0_9_229))))
 (let ((?x23516 (- (- ?x23510 (* (* 2.0 l_0_9_225) l_0_9_230)) (* (* 2.0 l_0_9_242) l_0_9_247))))
 (let ((?x23522 (- (- ?x23516 (* (* 2.0 l_0_9_243) l_0_9_248)) (* (* 2.0 l_0_9_244) l_0_9_249))))
 (let ((?x23528 (- (- ?x23522 (* (* 2.0 l_0_9_245) l_0_9_250)) (* (* 2.0 l_0_9_246) l_0_9_251))))
 (let ((?x23546 (+ (- (- (- (- (- (- ?x23528 ?x23530) ?x23533) ?x23536) ?x23539) ?x23542) ?x23544) ?x21706)))
 (let ((?x23564 (- (+ (- (- (- (- (- ?x23546 ?x23548) ?x23551) ?x23554) ?x23557) ?x23560) ?x23562) ?x21710)))
 (= (+ (+ (+ (+ (+ ?x23564 ?x23566) ?x23569) ?x23572) ?x23575) ?x23578) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23699 (* l_0_9_69 l_0_9_69)))
 (let ((?x23700 (* 3.0 ?x23699)))
 (let ((?x23696 (* l_0_9_68 l_0_9_68)))
 (let ((?x23697 (* 3.0 ?x23696)))
 (let ((?x23693 (* l_0_9_67 l_0_9_67)))
 (let ((?x23694 (* 3.0 ?x23693)))
 (let ((?x22551 (* l_0_9_6 l_0_9_6)))
 (let ((?x23691 (* 6.0 ?x22551)))
 (let ((?x22549 (* l_0_9_5 l_0_9_5)))
 (let ((?x23689 (* 6.0 ?x22549)))
 (let ((?x23687 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23684 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x22547 (* l_0_9_4 l_0_9_4)))
 (let ((?x23678 (* 6.0 ?x22547)))
 (let ((?x23676 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x23673 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x23670 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x23667 (* l_0_9_132 l_0_9_132)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23665 (* ?x23664 l_0_9_144)))
 (let ((?x23662 (* l_0_9_131 l_0_9_131)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23646 (* ?x23645 l_0_9_143)))
 (let ((?x23661 (- (+ (* (* (- 2.0) l_0_9_130) l_0_9_142) (* l_0_9_130 l_0_9_130)) ?x23646)))
 (let ((?x23679 (+ (- (- (- (+ (- (+ ?x23661 ?x23662) ?x23665) ?x23667) ?x23670) ?x23673) ?x23676) ?x23678)))
 (let ((?x23690 (+ (- (- (- ?x23679 (* (* 3.0 l_0_9_46) l_0_9_46)) ?x23684) ?x23687) ?x23689)))
 (= (+ (+ (+ (+ ?x23690 ?x23691) ?x23694) ?x23697) ?x23700) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x23822 (* ?x23821 l_0_9_72)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x23819 (* ?x23818 l_0_9_71)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x23816 (* ?x23815 l_0_9_70)))
 (let ((?x23813 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x23810 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x23807 (* ?x23806 l_0_9_51)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x23804 (* ?x23803 l_0_9_50)))
 (let ((?x23798 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23795 (* ?x23209 l_0_9_30)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23793 (* ?x23206 l_0_9_29)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23791 (* ?x23203 l_0_9_28)))
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x23789 (* ?x23788 l_0_9_186)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x23786 (* ?x23785 l_0_9_185)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x23783 (* ?x23782 l_0_9_184)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x23780 (* ?x23779 l_0_9_165)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x23777 (* ?x23776 l_0_9_164)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x23774 (* ?x23773 l_0_9_163)))
 (let ((?x23770 (* 2.0 l_0_9_136)))
 (let ((?x23771 (* ?x23770 l_0_9_145)))
 (let ((?x23767 (* 2.0 l_0_9_135)))
 (let ((?x23768 (* ?x23767 l_0_9_144)))
 (let ((?x23764 (* 2.0 l_0_9_134)))
 (let ((?x23765 (* ?x23764 l_0_9_143)))
 (let ((?x23761 (* 2.0 l_0_9_133)))
 (let ((?x23762 (* ?x23761 l_0_9_142)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23759 (* ?x23664 l_0_9_135)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23757 (* ?x23645 l_0_9_134)))
 (let ((?x23754 (* 2.0 l_0_9_130)))
 (let ((?x23755 (* ?x23754 l_0_9_133)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x23752 (* ?x23751 l_0_9_123)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x23749 (* ?x23748 l_0_9_122)))
 (let ((?x23745 (* 2.0 l_0_9_109)))
 (let ((?x23746 (* ?x23745 l_0_9_121)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x23743 (* ?x23742 l_0_9_90)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x23740 (* ?x22912 l_0_9_89)))
 (let ((?x23750 (+ (+ (- (- (* (* (- 2.0) l_0_9_100) l_0_9_88) ?x23740) ?x23743) ?x23746) ?x23749)))
 (let ((?x23769 (- (- (- (+ (+ (+ (+ ?x23750 ?x23752) ?x23755) ?x23757) ?x23759) ?x23762) ?x23765) ?x23768)))
 (let ((?x23790 (- (- (- (+ (+ (+ (- ?x23769 ?x23771) ?x23774) ?x23777) ?x23780) ?x23783) ?x23786) ?x23789)))
 (let ((?x23802 (- (+ (- (- (- ?x23790 ?x23791) ?x23793) ?x23795) ?x23798) (* (* 6.0 l_0_9_46) l_0_9_49))))
 (let ((?x23823 (+ (+ (+ (+ (+ (- (- ?x23802 ?x23804) ?x23807) ?x23810) ?x23813) ?x23816) ?x23819) ?x23822)))
 (= ?x23823 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x23232 (* ?x23231 l_0_9_81)))
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x23945 (* ?x23821 l_0_9_76)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x23229 (* ?x23228 l_0_9_80)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x23942 (* ?x23818 l_0_9_75)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x23226 (* ?x23225 l_0_9_79)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x23939 (* ?x23815 l_0_9_74)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x23221 (* ?x23220 l_0_9_60)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x23936 (* ?x23806 l_0_9_55)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x23218 (* ?x23217 l_0_9_59)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x23933 (* ?x23803 l_0_9_54)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x23215 (* ?x23214 l_0_9_58)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23928 (* ?x23209 l_0_9_34)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23926 (* ?x23206 l_0_9_33)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23924 (* ?x23203 l_0_9_32)))
 (let ((?x23922 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x23919 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x23916 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x23913 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x23910 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23907 (* ?x23664 l_0_9_139)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23905 (* ?x23645 l_0_9_138)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x23882 (* ?x23474 l_0_9_6)))
 (let ((?x7864 (+ (* (* 12.0 l_0_9_11) l_0_9_4) (* (* 12.0 l_0_9_12) l_0_9_5))))
 (let ((?x23908 (+ (+ (+ (+ ?x7864 ?x23882) (* (* 2.0 l_0_9_130) l_0_9_137)) ?x23905) ?x23907)))
 (let ((?x23927 (- (- (- (- (- (- (- ?x23908 ?x23910) ?x23913) ?x23916) ?x23919) ?x23922) ?x23924) ?x23926)))
 (let ((?x23934 (- (+ (- (- ?x23927 ?x23928) (* (* 6.0 l_0_9_46) l_0_9_53)) ?x23215) ?x23933)))
 (let ((?x23944 (- (+ (- (+ (+ (- (+ ?x23934 ?x23218) ?x23936) ?x23221) ?x23939) ?x23226) ?x23942) ?x23229)))
 (= (- (+ ?x23944 ?x23945) ?x23232) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x24042 (* ?x23821 l_0_9_81)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x24040 (* ?x23818 l_0_9_80)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x24038 (* ?x23815 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23223 (* ?x21573 l_0_9_67)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x24035 (* ?x23806 l_0_9_60)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x24033 (* ?x23803 l_0_9_59)))
 (let ((?x23800 (* 6.0 l_0_9_46)))
 (let ((?x24031 (* ?x23800 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23212 (* ?x21549 l_0_9_46)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23210 (* ?x23209 l_0_9_39)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23207 (* ?x23206 l_0_9_38)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23204 (* ?x23203 l_0_9_37)))
 (let ((?x23171 (* 12.0 l_0_9_18)))
 (let ((?x23172 (* ?x23171 l_0_9_6)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x23169 (* ?x22332 l_0_9_5)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x23167 (* ?x22329 l_0_9_4)))
 (let ((?x24022 (* l_0_9_147 l_0_9_147)))
 (let ((?x24020 (* l_0_9_146 l_0_9_146)))
 (let ((?x24018 (* l_0_9_145 l_0_9_145)))
 (let ((?x24016 (* l_0_9_144 l_0_9_144)))
 (let ((?x24014 (* l_0_9_143 l_0_9_143)))
 (let ((?x24012 (* l_0_9_142 l_0_9_142)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23665 (* ?x23664 l_0_9_144)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23646 (* ?x23645 l_0_9_143)))
 (let ((?x24015 (- (- (+ (+ (* (* 2.0 l_0_9_130) l_0_9_142) ?x23646) ?x23665) ?x24012) ?x24014)))
 (let ((?x24026 (+ (+ (+ (- (- (- (- ?x24015 ?x24016) ?x24018) ?x24020) ?x24022) ?x23167) ?x23169) ?x23172)))
 (let ((?x24036 (- (- (- (- (- (- (- ?x24026 ?x23204) ?x23207) ?x23210) ?x23212) ?x24031) ?x24033) ?x24035)))
 (= (+ (+ (+ (+ ?x24036 ?x23223) ?x24038) ?x24040) ?x24042) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22799 (* l_0_9_9 l_0_9_9)))
 (let ((?x24165 (* 6.0 ?x22799)))
 (let ((?x22793 (* l_0_9_8 l_0_9_8)))
 (let ((?x24163 (* 6.0 ?x22793)))
 (let ((?x24160 (* l_0_9_73 l_0_9_73)))
 (let ((?x24161 (* 3.0 ?x24160)))
 (let ((?x24157 (* l_0_9_72 l_0_9_72)))
 (let ((?x24158 (* 3.0 ?x24157)))
 (let ((?x24154 (* l_0_9_71 l_0_9_71)))
 (let ((?x24155 (* 3.0 ?x24154)))
 (let ((?x24151 (* l_0_9_70 l_0_9_70)))
 (let ((?x24152 (* 3.0 ?x24151)))
 (let ((?x22791 (* l_0_9_7 l_0_9_7)))
 (let ((?x24149 (* 6.0 ?x22791)))
 (let ((?x24147 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x24144 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x24141 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x24135 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x24132 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x24129 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x24126 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x24122 (* 2.0 l_0_9_178)))
 (let ((?x24123 (* ?x24122 l_0_9_187)))
 (let ((?x24119 (* 2.0 l_0_9_177)))
 (let ((?x24120 (* ?x24119 l_0_9_186)))
 (let ((?x24116 (* 2.0 l_0_9_176)))
 (let ((?x24117 (* ?x24116 l_0_9_185)))
 (let ((?x24113 (* 2.0 l_0_9_175)))
 (let ((?x24114 (* ?x24113 l_0_9_184)))
 (let ((?x24110 (* 2.0 l_0_9_157)))
 (let ((?x24111 (* ?x24110 l_0_9_166)))
 (let ((?x24107 (* 2.0 l_0_9_156)))
 (let ((?x24108 (* ?x24107 l_0_9_165)))
 (let ((?x24104 (* 2.0 l_0_9_155)))
 (let ((?x24105 (* ?x24104 l_0_9_164)))
 (let ((?x24101 (* 2.0 l_0_9_154)))
 (let ((?x24102 (* ?x24101 l_0_9_163)))
 (let ((?x24099 (* l_0_9_136 l_0_9_136)))
 (let ((?x24097 (* l_0_9_135 l_0_9_135)))
 (let ((?x24095 (* l_0_9_134 l_0_9_134)))
 (let ((?x24093 (* l_0_9_133 l_0_9_133)))
 (let ((?x24090 (* 2.0 l_0_9_115)))
 (let ((?x24091 (* ?x24090 l_0_9_124)))
 (let ((?x24087 (* 2.0 l_0_9_114)))
 (let ((?x24088 (* ?x24087 l_0_9_123)))
 (let ((?x24084 (* 2.0 l_0_9_113)))
 (let ((?x24085 (* ?x24084 l_0_9_122)))
 (let ((?x24081 (* 2.0 l_0_9_112)))
 (let ((?x24082 (* ?x24081 l_0_9_121)))
 (let ((?x24078 (* 2.0 l_0_9_103)))
 (let ((?x24079 (* ?x24078 l_0_9_94)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x24076 (* ?x23742 l_0_9_93)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x24074 (* ?x22912 l_0_9_92)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x24072 (* ?x22909 l_0_9_91)))
 (let ((?x22803 (* l_0_9_10 l_0_9_10)))
 (let ((?x24071 (* 6.0 ?x22803)))
 (let ((?x24089 (+ (+ (+ (- (- (- (- ?x24071 ?x24072) ?x24074) ?x24076) ?x24079) ?x24082) ?x24085) ?x24088)))
 (let ((?x24106 (+ (+ (+ (+ (+ (+ (+ ?x24089 ?x24091) ?x24093) ?x24095) ?x24097) ?x24099) ?x24102) ?x24105)))
 (let ((?x24127 (- (- (- (- (- (+ (+ ?x24106 ?x24108) ?x24111) ?x24114) ?x24117) ?x24120) ?x24123) ?x24126)))
 (let ((?x24139 (- (- (- (- ?x24127 ?x24129) ?x24132) ?x24135) (* (* 3.0 l_0_9_49) l_0_9_49))))
 (let ((?x24159 (+ (+ (+ (+ (- (- (- ?x24139 ?x24141) ?x24144) ?x24147) ?x24149) ?x24152) ?x24155) ?x24158)))
 (= (+ (+ (+ ?x24159 ?x24161) ?x24163) ?x24165) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23390 (* 2.0 l_0_9_73)))
 (let ((?x23391 (* ?x23390 l_0_9_82)))
 (let ((?x24370 (* 6.0 l_0_9_73)))
 (let ((?x24371 (* ?x24370 l_0_9_77)))
 (let ((?x23387 (* 2.0 l_0_9_72)))
 (let ((?x23388 (* ?x23387 l_0_9_81)))
 (let ((?x24366 (* 6.0 l_0_9_72)))
 (let ((?x24367 (* ?x24366 l_0_9_76)))
 (let ((?x23384 (* 2.0 l_0_9_71)))
 (let ((?x23385 (* ?x23384 l_0_9_80)))
 (let ((?x24362 (* 6.0 l_0_9_71)))
 (let ((?x24363 (* ?x24362 l_0_9_75)))
 (let ((?x23381 (* 2.0 l_0_9_70)))
 (let ((?x23382 (* ?x23381 l_0_9_79)))
 (let ((?x24358 (* 6.0 l_0_9_70)))
 (let ((?x24359 (* ?x24358 l_0_9_74)))
 (let ((?x23376 (* 2.0 l_0_9_52)))
 (let ((?x23377 (* ?x23376 l_0_9_61)))
 (let ((?x24354 (* 6.0 l_0_9_52)))
 (let ((?x24355 (* ?x24354 l_0_9_56)))
 (let ((?x23373 (* 2.0 l_0_9_51)))
 (let ((?x23374 (* ?x23373 l_0_9_60)))
 (let ((?x24350 (* 6.0 l_0_9_51)))
 (let ((?x24351 (* ?x24350 l_0_9_55)))
 (let ((?x23370 (* 2.0 l_0_9_50)))
 (let ((?x23371 (* ?x23370 l_0_9_59)))
 (let ((?x24346 (* 6.0 l_0_9_50)))
 (let ((?x24347 (* ?x24346 l_0_9_54)))
 (let ((?x23367 (* 2.0 l_0_9_49)))
 (let ((?x23368 (* ?x23367 l_0_9_58)))
 (let ((?x23362 (* 12.0 l_0_9_31)))
 (let ((?x24340 (* ?x23362 l_0_9_35)))
 (let ((?x23359 (* 12.0 l_0_9_30)))
 (let ((?x24338 (* ?x23359 l_0_9_34)))
 (let ((?x23356 (* 12.0 l_0_9_29)))
 (let ((?x24336 (* ?x23356 l_0_9_33)))
 (let ((?x23353 (* 12.0 l_0_9_28)))
 (let ((?x24334 (* ?x23353 l_0_9_32)))
 (let ((?x24332 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x24329 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x24326 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x24323 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x24320 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x24317 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x24314 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x24311 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x24308 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x24305 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x23770 (* 2.0 l_0_9_136)))
 (let ((?x24302 (* ?x23770 l_0_9_140)))
 (let ((?x23767 (* 2.0 l_0_9_135)))
 (let ((?x24300 (* ?x23767 l_0_9_139)))
 (let ((?x23764 (* 2.0 l_0_9_134)))
 (let ((?x24298 (* ?x23764 l_0_9_138)))
 (let ((?x23761 (* 2.0 l_0_9_133)))
 (let ((?x24296 (* ?x23761 l_0_9_137)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x24294 (* ?x23474 l_0_9_9)))
 (let ((?x24292 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x24289 (* ?x21837 l_0_9_8)))
 (let ((?x24287 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x24284 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x24281 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x24278 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x24275 (* ?x21834 l_0_9_7)))
 (let ((?x24273 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x24078 (* 2.0 l_0_9_103)))
 (let ((?x24270 (* ?x24078 l_0_9_98)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x24268 (* ?x23742 l_0_9_97)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x24266 (* ?x22912 l_0_9_96)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x24264 (* ?x22909 l_0_9_95)))
 (let ((?x23283 (* 12.0 l_0_9_10)))
 (let ((?x8075 (* ?x23283 l_0_9_14)))
 (let ((?x24279 (+ (+ (- (- (- (- (- ?x8075 ?x24264) ?x24266) ?x24268) ?x24270) ?x24273) ?x24275) ?x24278)))
 (let ((?x24297 (+ (+ (+ (+ (+ (+ (+ ?x24279 ?x24281) ?x24284) ?x24287) ?x24289) ?x24292) ?x24294) ?x24296)))
 (let ((?x24315 (+ (+ (+ (+ (+ (+ (+ ?x24297 ?x24298) ?x24300) ?x24302) ?x24305) ?x24308) ?x24311) ?x24314)))
 (let ((?x24335 (- (- (- (- (- (- (+ ?x24315 ?x24317) ?x24320) ?x24323) ?x24326) ?x24329) ?x24332) ?x24334)))
 (let ((?x24344 (- (- (- (- ?x24335 ?x24336) ?x24338) ?x24340) (* (* 6.0 l_0_9_49) l_0_9_53))))
 (let ((?x24357 (+ (- (+ (- (+ (- (+ ?x24344 ?x23368) ?x24347) ?x23371) ?x24351) ?x23374) ?x24355) ?x23377)))
 (let ((?x24372 (+ (- (+ (- (+ (- (+ ?x24357 ?x24359) ?x23382) ?x24363) ?x23385) ?x24367) ?x23388) ?x24371)))
 (= (- ?x24372 ?x23391) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24370 (* 6.0 l_0_9_73)))
 (let ((?x24552 (* ?x24370 l_0_9_82)))
 (let ((?x24366 (* 6.0 l_0_9_72)))
 (let ((?x24550 (* ?x24366 l_0_9_81)))
 (let ((?x24362 (* 6.0 l_0_9_71)))
 (let ((?x24548 (* ?x24362 l_0_9_80)))
 (let ((?x24358 (* 6.0 l_0_9_70)))
 (let ((?x24546 (* ?x24358 l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23379 (* ?x21573 l_0_9_70)))
 (let ((?x24354 (* 6.0 l_0_9_52)))
 (let ((?x24543 (* ?x24354 l_0_9_61)))
 (let ((?x24350 (* 6.0 l_0_9_51)))
 (let ((?x24541 (* ?x24350 l_0_9_60)))
 (let ((?x24346 (* 6.0 l_0_9_50)))
 (let ((?x24539 (* ?x24346 l_0_9_59)))
 (let ((?x24342 (* 6.0 l_0_9_49)))
 (let ((?x24537 (* ?x24342 l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23365 (* ?x21549 l_0_9_49)))
 (let ((?x23362 (* 12.0 l_0_9_31)))
 (let ((?x23363 (* ?x23362 l_0_9_40)))
 (let ((?x23359 (* 12.0 l_0_9_30)))
 (let ((?x23360 (* ?x23359 l_0_9_39)))
 (let ((?x23356 (* 12.0 l_0_9_29)))
 (let ((?x23357 (* ?x23356 l_0_9_38)))
 (let ((?x23353 (* 12.0 l_0_9_28)))
 (let ((?x23354 (* ?x23353 l_0_9_37)))
 (let ((?x24530 (* l_0_9_189 l_0_9_189)))
 (let ((?x24528 (* l_0_9_188 l_0_9_188)))
 (let ((?x24526 (* l_0_9_187 l_0_9_187)))
 (let ((?x24524 (* l_0_9_186 l_0_9_186)))
 (let ((?x24522 (* l_0_9_185 l_0_9_185)))
 (let ((?x24520 (* l_0_9_184 l_0_9_184)))
 (let ((?x23171 (* 12.0 l_0_9_18)))
 (let ((?x23313 (* ?x23171 l_0_9_9)))
 (let ((?x22332 (* 12.0 l_0_9_17)))
 (let ((?x23311 (* ?x22332 l_0_9_8)))
 (let ((?x24516 (* l_0_9_168 l_0_9_168)))
 (let ((?x24514 (* l_0_9_167 l_0_9_167)))
 (let ((?x24512 (* l_0_9_166 l_0_9_166)))
 (let ((?x24510 (* l_0_9_165 l_0_9_165)))
 (let ((?x24508 (* l_0_9_164 l_0_9_164)))
 (let ((?x24506 (* l_0_9_163 l_0_9_163)))
 (let ((?x22329 (* 12.0 l_0_9_16)))
 (let ((?x23307 (* ?x22329 l_0_9_7)))
 (let ((?x23770 (* 2.0 l_0_9_136)))
 (let ((?x23771 (* ?x23770 l_0_9_145)))
 (let ((?x23767 (* 2.0 l_0_9_135)))
 (let ((?x23768 (* ?x23767 l_0_9_144)))
 (let ((?x23764 (* 2.0 l_0_9_134)))
 (let ((?x23765 (* ?x23764 l_0_9_143)))
 (let ((?x23761 (* 2.0 l_0_9_133)))
 (let ((?x23762 (* ?x23761 l_0_9_142)))
 (let ((?x24499 (* l_0_9_126 l_0_9_126)))
 (let ((?x24497 (* l_0_9_125 l_0_9_125)))
 (let ((?x24495 (* l_0_9_124 l_0_9_124)))
 (let ((?x24493 (* l_0_9_123 l_0_9_123)))
 (let ((?x24491 (* l_0_9_122 l_0_9_122)))
 (let ((?x24489 (* l_0_9_121 l_0_9_121)))
 (let ((?x24487 (* l_0_9_105 l_0_9_105)))
 (let ((?x24485 (* l_0_9_104 l_0_9_104)))
 (let ((?x24483 (* l_0_9_103 l_0_9_103)))
 (let ((?x24481 (* l_0_9_102 l_0_9_102)))
 (let ((?x24479 (* l_0_9_101 l_0_9_101)))
 (let ((?x24480 (- (- (* (* 12.0 l_0_9_10) l_0_9_19) (* l_0_9_100 l_0_9_100)) ?x24479)))
 (let ((?x24494 (+ (+ (+ (- (- (- (- ?x24480 ?x24481) ?x24483) ?x24485) ?x24487) ?x24489) ?x24491) ?x24493)))
 (let ((?x24504 (+ (+ (+ (+ (+ (+ (+ ?x24494 ?x24495) ?x24497) ?x24499) ?x23762) ?x23765) ?x23768) ?x23771)))
 (let ((?x24517 (+ (+ (+ (+ (+ (+ (+ ?x24504 ?x23307) ?x24506) ?x24508) ?x24510) ?x24512) ?x24514) ?x24516)))
 (let ((?x24529 (- (- (- (- (- (+ (+ ?x24517 ?x23311) ?x23313) ?x24520) ?x24522) ?x24524) ?x24526) ?x24528)))
 (let ((?x24538 (- (- (- (- (- (- (- ?x24529 ?x24530) ?x23354) ?x23357) ?x23360) ?x23363) ?x23365) ?x24537)))
 (let ((?x24551 (+ (+ (+ (+ (- (- (- ?x24538 ?x24539) ?x24541) ?x24543) ?x23379) ?x24546) ?x24548) ?x24550)))
 (= (+ ?x24551 ?x24552) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22083 (* l_0_9_78 l_0_9_78)))
 (let ((?x24648 (* 3.0 ?x22083)))
 (let ((?x23578 (* (* 2.0 l_0_9_78) l_0_9_83)))
 (let ((?x22080 (* l_0_9_77 l_0_9_77)))
 (let ((?x24645 (* 3.0 ?x22080)))
 (let ((?x23575 (* (* 2.0 l_0_9_77) l_0_9_82)))
 (let ((?x22077 (* l_0_9_76 l_0_9_76)))
 (let ((?x24642 (* 3.0 ?x22077)))
 (let ((?x23572 (* (* 2.0 l_0_9_76) l_0_9_81)))
 (let ((?x22074 (* l_0_9_75 l_0_9_75)))
 (let ((?x24639 (* 3.0 ?x22074)))
 (let ((?x23569 (* (* 2.0 l_0_9_75) l_0_9_80)))
 (let ((?x22071 (* l_0_9_74 l_0_9_74)))
 (let ((?x24636 (* 3.0 ?x22071)))
 (let ((?x23566 (* (* 2.0 l_0_9_74) l_0_9_79)))
 (let ((?x24633 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x23560 (* (* 2.0 l_0_9_57) l_0_9_62)))
 (let ((?x24629 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x23557 (* (* 2.0 l_0_9_56) l_0_9_61)))
 (let ((?x24625 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x23554 (* (* 2.0 l_0_9_55) l_0_9_60)))
 (let ((?x24621 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x23551 (* (* 2.0 l_0_9_54) l_0_9_59)))
 (let ((?x23548 (* (* 2.0 l_0_9_53) l_0_9_58)))
 (let ((?x22052 (* (* 6.0 l_0_9_36) l_0_9_36)))
 (let ((?x22049 (* (* 6.0 l_0_9_35) l_0_9_35)))
 (let ((?x22046 (* (* 6.0 l_0_9_34) l_0_9_34)))
 (let ((?x22043 (* (* 6.0 l_0_9_33) l_0_9_33)))
 (let ((?x22040 (* (* 6.0 l_0_9_32) l_0_9_32)))
 (let ((?x22006 (* l_0_9_15 l_0_9_15)))
 (let ((?x22007 (* 6.0 ?x22006)))
 (let ((?x24607 (* l_0_9_141 l_0_9_141)))
 (let ((?x24605 (* l_0_9_140 l_0_9_140)))
 (let ((?x22003 (* l_0_9_14 l_0_9_14)))
 (let ((?x22004 (* 6.0 ?x22003)))
 (let ((?x24602 (* l_0_9_139 l_0_9_139)))
 (let ((?x24600 (* l_0_9_138 l_0_9_138)))
 (let ((?x24598 (* l_0_9_137 l_0_9_137)))
 (let ((?x22000 (* l_0_9_13 l_0_9_13)))
 (let ((?x22001 (* 6.0 ?x22000)))
 (let ((?x21997 (* l_0_9_12 l_0_9_12)))
 (let ((?x21998 (* 6.0 ?x21997)))
 (let ((?x21994 (* l_0_9_11 l_0_9_11)))
 (let ((?x21995 (* 6.0 ?x21994)))
 (let ((?x24606 (+ (+ (+ (+ (+ (+ (+ ?x21995 ?x21998) ?x22001) ?x24598) ?x24600) ?x24602) ?x22004) ?x24605)))
 (let ((?x24614 (- (- (- (- (- (+ (+ ?x24606 ?x24607) ?x22007) ?x22040) ?x22043) ?x22046) ?x22049) ?x22052)))
 (let ((?x24622 (- (+ (- (+ ?x24614 ?x23548) (* (* 3.0 l_0_9_53) l_0_9_53)) ?x23551) ?x24621)))
 (let ((?x24635 (- (- (+ (- (+ (- (+ ?x24622 ?x23554) ?x24625) ?x23557) ?x24629) ?x23560) ?x24633) ?x23566)))
 (let ((?x24646 (+ (- (+ (- (+ (- (+ ?x24635 ?x24636) ?x23569) ?x24639) ?x23572) ?x24642) ?x23575) ?x24645)))
 (= (+ (- ?x24646 ?x23578) ?x24648) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21594 (* l_0_9_84 l_0_9_84)))
 (let ((?x21591 (* l_0_9_83 l_0_9_83)))
 (let ((?x21588 (* l_0_9_82 l_0_9_82)))
 (let ((?x21585 (* l_0_9_81 l_0_9_81)))
 (let ((?x21582 (* l_0_9_80 l_0_9_80)))
 (let ((?x21579 (* l_0_9_79 l_0_9_79)))
 (let ((?x24736 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24733 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24730 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x24727 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x24724 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x23562 (* ?x21573 l_0_9_74)))
 (let ((?x4835 (* l_0_9_63 l_0_9_63)))
 (let ((?x21663 (* l_0_9_62 l_0_9_62)))
 (let ((?x21659 (* l_0_9_61 l_0_9_61)))
 (let ((?x4834 (* l_0_9_60 l_0_9_60)))
 (let ((?x4828 (* l_0_9_59 l_0_9_59)))
 (let ((?x4825 (* l_0_9_58 l_0_9_58)))
 (let ((?x24714 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x24711 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x24708 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x24705 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x24702 (* (* 6.0 l_0_9_53) l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x23544 (* ?x21549 l_0_9_53)))
 (let ((?x23542 (* (* 12.0 l_0_9_36) l_0_9_41)))
 (let ((?x23539 (* (* 12.0 l_0_9_35) l_0_9_40)))
 (let ((?x23536 (* (* 12.0 l_0_9_34) l_0_9_39)))
 (let ((?x23533 (* (* 12.0 l_0_9_33) l_0_9_38)))
 (let ((?x23530 (* (* 12.0 l_0_9_32) l_0_9_37)))
 (let ((?x23481 (* (* 12.0 l_0_9_15) l_0_9_20)))
 (let ((?x23922 (* (* 2.0 l_0_9_141) l_0_9_146)))
 (let ((?x23919 (* (* 2.0 l_0_9_140) l_0_9_145)))
 (let ((?x23478 (* (* 12.0 l_0_9_14) l_0_9_19)))
 (let ((?x23916 (* (* 2.0 l_0_9_139) l_0_9_144)))
 (let ((?x23913 (* (* 2.0 l_0_9_138) l_0_9_143)))
 (let ((?x23910 (* (* 2.0 l_0_9_137) l_0_9_142)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x23475 (* ?x23474 l_0_9_18)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x23470 (* ?x21837 l_0_9_17)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x23468 (* ?x21834 l_0_9_16)))
 (let ((?x24692 (+ (+ (+ (+ (+ (+ (+ ?x23468 ?x23470) ?x23475) ?x23910) ?x23913) ?x23916) ?x23478) ?x23919)))
 (let ((?x24699 (- (- (- (- (- (+ (+ ?x24692 ?x23922) ?x23481) ?x23530) ?x23533) ?x23536) ?x23539) ?x23542)))
 (let ((?x24716 (+ (- (- (- (- (- (- ?x24699 ?x23544) ?x24702) ?x24705) ?x24708) ?x24711) ?x24714) ?x4825)))
 (let ((?x24725 (+ (+ (+ (+ (+ (+ (+ ?x24716 ?x4828) ?x4834) ?x21659) ?x21663) ?x4835) ?x23562) ?x24724)))
 (let ((?x24740 (- (- (- (+ (+ (+ (+ ?x24725 ?x24727) ?x24730) ?x24733) ?x24736) ?x21579) ?x21582) ?x21585)))
 (= (- (- (- ?x24740 ?x21588) ?x21591) ?x21594) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24793 (* l_0_9_85 l_0_9_85)))
 (let ((?x21594 (* l_0_9_84 l_0_9_84)))
 (let ((?x24791 (* 3.0 ?x21594)))
 (let ((?x21591 (* l_0_9_83 l_0_9_83)))
 (let ((?x24789 (* 3.0 ?x21591)))
 (let ((?x21588 (* l_0_9_82 l_0_9_82)))
 (let ((?x24787 (* 3.0 ?x21588)))
 (let ((?x21585 (* l_0_9_81 l_0_9_81)))
 (let ((?x24785 (* 3.0 ?x21585)))
 (let ((?x21582 (* l_0_9_80 l_0_9_80)))
 (let ((?x24783 (* 3.0 ?x21582)))
 (let ((?x21579 (* l_0_9_79 l_0_9_79)))
 (let ((?x24781 (* 3.0 ?x21579)))
 (let ((?x21573 (* 6.0 l_0_9_64)))
 (let ((?x21574 (* ?x21573 l_0_9_79)))
 (let ((?x24778 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24775 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24772 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24769 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24766 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x24763 (* (* 3.0 l_0_9_58) l_0_9_58)))
 (let ((?x21549 (* 6.0 l_0_9_43)))
 (let ((?x21550 (* ?x21549 l_0_9_58)))
 (let ((?x21547 (* (* 6.0 l_0_9_42) l_0_9_42)))
 (let ((?x21544 (* (* 6.0 l_0_9_41) l_0_9_41)))
 (let ((?x21541 (* (* 6.0 l_0_9_40) l_0_9_40)))
 (let ((?x21538 (* (* 6.0 l_0_9_39) l_0_9_39)))
 (let ((?x21535 (* (* 6.0 l_0_9_38) l_0_9_38)))
 (let ((?x21532 (* (* 6.0 l_0_9_37) l_0_9_37)))
 (let ((?x21499 (* l_0_9_21 l_0_9_21)))
 (let ((?x21500 (* 6.0 ?x21499)))
 (let ((?x21486 (* l_0_9_20 l_0_9_20)))
 (let ((?x21487 (* 6.0 ?x21486)))
 (let ((?x21483 (* l_0_9_19 l_0_9_19)))
 (let ((?x21484 (* 6.0 ?x21483)))
 (let ((?x21480 (* l_0_9_18 l_0_9_18)))
 (let ((?x21481 (* 6.0 ?x21480)))
 (let ((?x21477 (* l_0_9_17 l_0_9_17)))
 (let ((?x21478 (* 6.0 ?x21477)))
 (let ((?x24748 (* l_0_9_169 l_0_9_169)))
 (let ((?x21474 (* l_0_9_16 l_0_9_16)))
 (let ((?x21475 (* 6.0 ?x21474)))
 (let ((?x8556 (* l_0_9_148 l_0_9_148)))
 (let ((?x24022 (* l_0_9_147 l_0_9_147)))
 (let ((?x24020 (* l_0_9_146 l_0_9_146)))
 (let ((?x24018 (* l_0_9_145 l_0_9_145)))
 (let ((?x24016 (* l_0_9_144 l_0_9_144)))
 (let ((?x24014 (* l_0_9_143 l_0_9_143)))
 (let ((?x8567 (+ (+ (* (- l_0_9_106) l_0_9_106) (* l_0_9_142 l_0_9_142)) ?x24014)))
 (let ((?x24749 (+ (+ (- (+ (+ (+ (+ ?x8567 ?x24016) ?x24018) ?x24020) ?x24022) ?x8556) ?x21475) ?x24748)))
 (let ((?x24756 (- (- (+ (+ (+ (+ (+ ?x24749 ?x21478) ?x21481) ?x21484) ?x21487) ?x21500) ?x21532) ?x21535)))
 (let ((?x24767 (- (- (- (- (- (- (- ?x24756 ?x21538) ?x21541) ?x21544) ?x21547) ?x21550) ?x24763) ?x24766)))
 (let ((?x24784 (+ (+ (+ (- (- (- (- ?x24767 ?x24769) ?x24772) ?x24775) ?x24778) ?x21574) ?x24781) ?x24783)))
 (= (+ (+ (+ (+ (+ ?x24784 ?x24785) ?x24787) ?x24789) ?x24791) ?x24793) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x24838 (* ?x21709 l_0_9_67)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x24836 (* ?x21705 l_0_9_46)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x23192 (* ?x21504 l_0_9_25)))
 (let ((?x24830 (- (- (* (* 12.0 l_0_9_1) l_0_9_4) (* l_0_9_127 l_0_9_127)) (* (* 2.0 l_0_9_190) l_0_9_193))))
 (let ((?x24835 (- (- (- ?x24830 (* (* 2.0 l_0_9_211) l_0_9_214)) ?x23192) (* (* 2.0 l_0_9_232) l_0_9_235))))
 (= (+ (- ?x24835 ?x24836) ?x24838) 0.0))))))))))
(assert
 (let ((?x24793 (* l_0_9_85 l_0_9_85)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x24869 (* ?x21709 l_0_9_70)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x24867 (* ?x21705 l_0_9_49)))
 (let ((?x21504 (* 12.0 l_0_9_22)))
 (let ((?x23336 (* ?x21504 l_0_9_28)))
 (let ((?x24748 (* l_0_9_169 l_0_9_169)))
 (let ((?x8556 (* l_0_9_148 l_0_9_148)))
 (let ((?x24855 (+ (+ (* (* 12.0 l_0_9_1) l_0_9_7) (* l_0_9_106 l_0_9_106)) ?x8556)))
 (let ((?x24863 (- (- (- ?x24855 ?x24748) (* (* 2.0 l_0_9_190) l_0_9_196)) (* (* 2.0 l_0_9_211) l_0_9_217))))
 (let ((?x24870 (+ (- (- (- ?x24863 ?x23336) (* (* 2.0 l_0_9_232) l_0_9_238)) ?x24867) ?x24869)))
 (= (- ?x24870 ?x24793) 0.0))))))))))))))
(assert
 (let ((?x22551 (* l_0_9_6 l_0_9_6)))
 (let ((?x23691 (* 6.0 ?x22551)))
 (let ((?x22549 (* l_0_9_5 l_0_9_5)))
 (let ((?x23689 (* 6.0 ?x22549)))
 (let ((?x22547 (* l_0_9_4 l_0_9_4)))
 (let ((?x23678 (* 6.0 ?x22547)))
 (let ((?x23676 (* (* 6.0 l_0_9_27) l_0_9_27)))
 (let ((?x23673 (* (* 6.0 l_0_9_26) l_0_9_26)))
 (let ((?x23670 (* (* 6.0 l_0_9_25) l_0_9_25)))
 (let ((?x24910 (* l_0_9_237 l_0_9_237)))
 (let ((?x24908 (* l_0_9_236 l_0_9_236)))
 (let ((?x24906 (* l_0_9_235 l_0_9_235)))
 (let ((?x24904 (* l_0_9_216 l_0_9_216)))
 (let ((?x24902 (* l_0_9_215 l_0_9_215)))
 (let ((?x24900 (* l_0_9_214 l_0_9_214)))
 (let ((?x24898 (* l_0_9_195 l_0_9_195)))
 (let ((?x24896 (* l_0_9_194 l_0_9_194)))
 (let ((?x24897 (- (- (* (* (- 2.0) l_0_9_127) l_0_9_130) (* l_0_9_193 l_0_9_193)) ?x24896)))
 (let ((?x24911 (- (- (- (- (- (- (- ?x24897 ?x24898) ?x24900) ?x24902) ?x24904) ?x24906) ?x24908) ?x24910)))
 (let ((?x24918 (- (+ (- (- (- ?x24911 ?x23670) ?x23673) ?x23676) ?x23678) (* (* 1.0 l_0_9_46) l_0_9_46))))
 (let ((?x24924 (- (- ?x24918 (* (* 1.0 l_0_9_47) l_0_9_47)) (* (* 1.0 l_0_9_48) l_0_9_48))))
 (let ((?x24930 (+ (+ (+ (+ ?x24924 ?x23689) ?x23691) (* 1.0 (* l_0_9_67 l_0_9_67))) (* 1.0 (* l_0_9_68 l_0_9_68)))))
 (= (+ ?x24930 (* 1.0 (* l_0_9_69 l_0_9_69))) 0.0))))))))))))))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25004 (* ?x22247 l_0_9_88)))
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x25002 (* ?x23231 l_0_9_72)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x25000 (* ?x23228 l_0_9_71)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x24998 (* ?x23225 l_0_9_70)))
 (let ((?x23813 (* (* 12.0 l_0_9_6) l_0_9_9)))
 (let ((?x23810 (* (* 12.0 l_0_9_5) l_0_9_8)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x24994 (* ?x23220 l_0_9_51)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x24992 (* ?x23217 l_0_9_50)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x24990 (* ?x23214 l_0_9_49)))
 (let ((?x23798 (* (* 12.0 l_0_9_4) l_0_9_7)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23795 (* ?x23209 l_0_9_30)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23793 (* ?x23206 l_0_9_29)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23791 (* ?x23203 l_0_9_28)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x24966 (* ?x22214 l_0_9_172)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x24964 (* ?x22211 l_0_9_151)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x23303 (* ?x21471 l_0_9_133)))
 (let ((?x24969 (- (- (+ (- (* (* 2.0 l_0_9_106) l_0_9_109) ?x23303) ?x24964) ?x24966) (* (* 2.0 l_0_9_193) l_0_9_196))))
 (let ((?x24973 (- (- ?x24969 (* (* 2.0 l_0_9_194) l_0_9_197)) (* (* 2.0 l_0_9_195) l_0_9_198))))
 (let ((?x24977 (- (- ?x24973 (* (* 2.0 l_0_9_214) l_0_9_217)) (* (* 2.0 l_0_9_215) l_0_9_218))))
 (let ((?x24981 (- (- ?x24977 (* (* 2.0 l_0_9_216) l_0_9_219)) (* (* 2.0 l_0_9_235) l_0_9_238))))
 (let ((?x24985 (- (- ?x24981 (* (* 2.0 l_0_9_236) l_0_9_239)) (* (* 2.0 l_0_9_237) l_0_9_240))))
 (let ((?x24995 (- (- (- (+ (- (- (- ?x24985 ?x23791) ?x23793) ?x23795) ?x23798) ?x24990) ?x24992) ?x24994)))
 (= (- (+ (+ (+ (+ (+ ?x24995 ?x23810) ?x23813) ?x24998) ?x25000) ?x25002) ?x25004) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x25108 (* ?x23231 l_0_9_76)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x25106 (* ?x23228 l_0_9_75)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x25104 (* ?x23225 l_0_9_74)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x24838 (* ?x21709 l_0_9_67)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x25101 (* ?x23220 l_0_9_55)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x25099 (* ?x23217 l_0_9_54)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x25097 (* ?x23214 l_0_9_53)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x24836 (* ?x21705 l_0_9_46)))
 (let ((?x23209 (* 12.0 l_0_9_27)))
 (let ((?x23928 (* ?x23209 l_0_9_34)))
 (let ((?x23206 (* 12.0 l_0_9_26)))
 (let ((?x23926 (* ?x23206 l_0_9_33)))
 (let ((?x23203 (* 12.0 l_0_9_25)))
 (let ((?x23924 (* ?x23203 l_0_9_32)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x23882 (* ?x23474 l_0_9_6)))
 (let ((?x21471 (* 2.0 l_0_9_127)))
 (let ((?x23472 (* ?x21471 l_0_9_137)))
 (let ((?x7864 (+ (* (* 12.0 l_0_9_11) l_0_9_4) (* (* 12.0 l_0_9_12) l_0_9_5))))
 (let ((?x25078 (- (- (+ (- ?x7864 ?x23472) ?x23882) (* (* 2.0 l_0_9_193) l_0_9_200)) (* (* 2.0 l_0_9_194) l_0_9_201))))
 (let ((?x25082 (- (- ?x25078 (* (* 2.0 l_0_9_195) l_0_9_202)) (* (* 2.0 l_0_9_214) l_0_9_221))))
 (let ((?x25086 (- (- ?x25082 (* (* 2.0 l_0_9_215) l_0_9_222)) (* (* 2.0 l_0_9_216) l_0_9_223))))
 (let ((?x25090 (- (- ?x25086 (* (* 2.0 l_0_9_235) l_0_9_242)) (* (* 2.0 l_0_9_236) l_0_9_243))))
 (let ((?x25095 (- (- (- (- ?x25090 (* (* 2.0 l_0_9_237) l_0_9_244)) ?x23924) ?x23926) ?x23928)))
 (let ((?x25107 (+ (+ (- (- (- (- (+ ?x25095 ?x24836) ?x25097) ?x25099) ?x25101) ?x24838) ?x25104) ?x25106)))
 (= (+ ?x25107 ?x25108) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22799 (* l_0_9_9 l_0_9_9)))
 (let ((?x24165 (* 6.0 ?x22799)))
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25194 (* ?x22247 l_0_9_91)))
 (let ((?x22793 (* l_0_9_8 l_0_9_8)))
 (let ((?x24163 (* 6.0 ?x22793)))
 (let ((?x22791 (* l_0_9_7 l_0_9_7)))
 (let ((?x24149 (* 6.0 ?x22791)))
 (let ((?x24135 (* (* 6.0 l_0_9_31) l_0_9_31)))
 (let ((?x24132 (* (* 6.0 l_0_9_30) l_0_9_30)))
 (let ((?x24129 (* (* 6.0 l_0_9_29) l_0_9_29)))
 (let ((?x24126 (* (* 6.0 l_0_9_28) l_0_9_28)))
 (let ((?x25166 (* l_0_9_241 l_0_9_241)))
 (let ((?x25164 (* l_0_9_240 l_0_9_240)))
 (let ((?x25162 (* l_0_9_239 l_0_9_239)))
 (let ((?x25160 (* l_0_9_238 l_0_9_238)))
 (let ((?x25158 (* l_0_9_220 l_0_9_220)))
 (let ((?x25156 (* l_0_9_219 l_0_9_219)))
 (let ((?x25154 (* l_0_9_218 l_0_9_218)))
 (let ((?x25152 (* l_0_9_217 l_0_9_217)))
 (let ((?x25150 (* l_0_9_199 l_0_9_199)))
 (let ((?x25148 (* l_0_9_198 l_0_9_198)))
 (let ((?x25146 (* l_0_9_197 l_0_9_197)))
 (let ((?x25144 (* l_0_9_196 l_0_9_196)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x25142 (* ?x22214 l_0_9_175)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x9135 (* ?x22211 l_0_9_154)))
 (let ((?x22803 (* l_0_9_10 l_0_9_10)))
 (let ((?x24071 (* 6.0 ?x22803)))
 (let ((?x25145 (- (- (+ (+ ?x24071 (* (* 2.0 l_0_9_106) l_0_9_112)) ?x9135) ?x25142) ?x25144)))
 (let ((?x25159 (- (- (- (- (- (- (- ?x25145 ?x25146) ?x25148) ?x25150) ?x25152) ?x25154) ?x25156) ?x25158)))
 (let ((?x25170 (- (- (- (- (- (- (- ?x25159 ?x25160) ?x25162) ?x25164) ?x25166) ?x24126) ?x24129) ?x24132)))
 (let ((?x25177 (- (- (- ?x25170 ?x24135) (* (* 1.0 l_0_9_49) l_0_9_49)) (* (* 1.0 l_0_9_50) l_0_9_50))))
 (let ((?x25183 (- (- ?x25177 (* (* 1.0 l_0_9_51) l_0_9_51)) (* (* 1.0 l_0_9_52) l_0_9_52))))
 (let ((?x25188 (+ (+ (+ ?x25183 ?x24149) (* 1.0 (* l_0_9_70 l_0_9_70))) (* 1.0 (* l_0_9_71 l_0_9_71)))))
 (let ((?x25192 (+ (+ ?x25188 (* 1.0 (* l_0_9_72 l_0_9_72))) (* 1.0 (* l_0_9_73 l_0_9_73)))))
 (= (+ (- (+ ?x25192 ?x24163) ?x25194) ?x24165) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25269 (* ?x22247 l_0_9_95)))
 (let ((?x23390 (* 2.0 l_0_9_73)))
 (let ((?x25267 (* ?x23390 l_0_9_77)))
 (let ((?x23387 (* 2.0 l_0_9_72)))
 (let ((?x25265 (* ?x23387 l_0_9_76)))
 (let ((?x23384 (* 2.0 l_0_9_71)))
 (let ((?x25263 (* ?x23384 l_0_9_75)))
 (let ((?x23381 (* 2.0 l_0_9_70)))
 (let ((?x25261 (* ?x23381 l_0_9_74)))
 (let ((?x21709 (* 2.0 l_0_9_64)))
 (let ((?x24869 (* ?x21709 l_0_9_70)))
 (let ((?x23376 (* 2.0 l_0_9_52)))
 (let ((?x25258 (* ?x23376 l_0_9_56)))
 (let ((?x23373 (* 2.0 l_0_9_51)))
 (let ((?x25256 (* ?x23373 l_0_9_55)))
 (let ((?x23370 (* 2.0 l_0_9_50)))
 (let ((?x25254 (* ?x23370 l_0_9_54)))
 (let ((?x23367 (* 2.0 l_0_9_49)))
 (let ((?x25252 (* ?x23367 l_0_9_53)))
 (let ((?x21705 (* 2.0 l_0_9_43)))
 (let ((?x24867 (* ?x21705 l_0_9_49)))
 (let ((?x23362 (* 12.0 l_0_9_31)))
 (let ((?x24340 (* ?x23362 l_0_9_35)))
 (let ((?x23359 (* 12.0 l_0_9_30)))
 (let ((?x24338 (* ?x23359 l_0_9_34)))
 (let ((?x23356 (* 12.0 l_0_9_29)))
 (let ((?x24336 (* ?x23356 l_0_9_33)))
 (let ((?x23353 (* 12.0 l_0_9_28)))
 (let ((?x24334 (* ?x23353 l_0_9_32)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x25221 (* ?x22214 l_0_9_179)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x25219 (* ?x22211 l_0_9_158)))
 (let ((?x23474 (* 12.0 l_0_9_13)))
 (let ((?x24294 (* ?x23474 l_0_9_9)))
 (let ((?x21837 (* 12.0 l_0_9_12)))
 (let ((?x24289 (* ?x21837 l_0_9_8)))
 (let ((?x21834 (* 12.0 l_0_9_11)))
 (let ((?x24275 (* ?x21834 l_0_9_7)))
 (let ((?x23283 (* 12.0 l_0_9_10)))
 (let ((?x8075 (* ?x23283 l_0_9_14)))
 (let ((?x25218 (+ (+ (+ (+ ?x8075 (* (* 2.0 l_0_9_106) l_0_9_116)) ?x24275) ?x24289) ?x24294)))
 (let ((?x25226 (- (- (- (+ ?x25218 ?x25219) ?x25221) (* (* 2.0 l_0_9_196) l_0_9_200)) (* (* 2.0 l_0_9_197) l_0_9_201))))
 (let ((?x25230 (- (- ?x25226 (* (* 2.0 l_0_9_198) l_0_9_202)) (* (* 2.0 l_0_9_199) l_0_9_203))))
 (let ((?x25234 (- (- ?x25230 (* (* 2.0 l_0_9_217) l_0_9_221)) (* (* 2.0 l_0_9_218) l_0_9_222))))
 (let ((?x25238 (- (- ?x25234 (* (* 2.0 l_0_9_219) l_0_9_223)) (* (* 2.0 l_0_9_220) l_0_9_224))))
 (let ((?x25242 (- (- ?x25238 (* (* 2.0 l_0_9_238) l_0_9_242)) (* (* 2.0 l_0_9_239) l_0_9_243))))
 (let ((?x25246 (- (- ?x25242 (* (* 2.0 l_0_9_240) l_0_9_244)) (* (* 2.0 l_0_9_241) l_0_9_245))))
 (let ((?x25255 (- (- (+ (- (- (- (- ?x25246 ?x24334) ?x24336) ?x24338) ?x24340) ?x24867) ?x25252) ?x25254)))
 (let ((?x25268 (+ (+ (+ (+ (- (- (- ?x25255 ?x25256) ?x25258) ?x24869) ?x25261) ?x25263) ?x25265) ?x25267)))
 (= (- ?x25268 ?x25269) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x21792 (* l_0_9_66 l_0_9_66)))
 (let ((?x22512 (* 3.0 ?x21792)))
 (let ((?x21789 (* l_0_9_65 l_0_9_65)))
 (let ((?x22510 (* 3.0 ?x21789)))
 (let ((?x22508 (* (* 3.0 l_0_9_45) l_0_9_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_9_44) l_0_9_44) ?x22508) ?x22510) ?x22512) 0.0)))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x22730 (* ?x22729 l_0_9_68)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x22727 (* ?x22726 l_0_9_67)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x22724 (* ?x22723 l_0_9_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_9_44) l_0_9_46) ?x22724) ?x22727) ?x22730) 0.0))))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x22953 (* ?x22729 l_0_9_71)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x22951 (* ?x22726 l_0_9_70)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x22949 (* ?x22723 l_0_9_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_9_44) l_0_9_49) ?x22949) ?x22951) ?x22953) 0.0))))))))
(assert
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x23065 (* ?x22729 l_0_9_75)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x23062 (* ?x22726 l_0_9_74)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x23059 (* ?x22723 l_0_9_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_9_44) l_0_9_53) ?x23059) ?x23062) ?x23065) 0.0))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x22248 (* ?x22247 l_0_9_86)))
 (let ((?x22729 (* 6.0 l_0_9_66)))
 (let ((?x23135 (* ?x22729 l_0_9_80)))
 (let ((?x22726 (* 6.0 l_0_9_65)))
 (let ((?x23133 (* ?x22726 l_0_9_79)))
 (let ((?x22723 (* 6.0 l_0_9_45)))
 (let ((?x23130 (* ?x22723 l_0_9_59)))
 (let ((?x22720 (* 6.0 l_0_9_44)))
 (let ((?x23128 (* ?x22720 l_0_9_58)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x22215 (* ?x22214 l_0_9_170)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x22212 (* ?x22211 l_0_9_149)))
 (let ((?x25317 (- (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_107) ?x22212) ?x22215) ?x23128) ?x23130)))
 (= (+ (+ (+ ?x25317 ?x23133) ?x23135) ?x22248) 0.0)))))))))))))))))
(assert
 (let ((?x23699 (* l_0_9_69 l_0_9_69)))
 (let ((?x23700 (* 3.0 ?x23699)))
 (let ((?x23696 (* l_0_9_68 l_0_9_68)))
 (let ((?x23697 (* 3.0 ?x23696)))
 (let ((?x23693 (* l_0_9_67 l_0_9_67)))
 (let ((?x23694 (* 3.0 ?x23693)))
 (let ((?x23687 (* (* 3.0 l_0_9_48) l_0_9_48)))
 (let ((?x23684 (* (* 3.0 l_0_9_47) l_0_9_47)))
 (let ((?x25325 (+ (+ (- (- (* (* (- 3.0) l_0_9_46) l_0_9_46) ?x23684) ?x23687) ?x23694) ?x23697)))
 (= (+ ?x25325 ?x23700) 0.0)))))))))))
(assert
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x23822 (* ?x23821 l_0_9_72)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x23819 (* ?x23818 l_0_9_71)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x23816 (* ?x23815 l_0_9_70)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x23807 (* ?x23806 l_0_9_51)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x23804 (* ?x23803 l_0_9_50)))
 (let ((?x25336 (+ (+ (- (- (* (* (- 6.0) l_0_9_46) l_0_9_49) ?x23804) ?x23807) ?x23816) ?x23819)))
 (= (+ ?x25336 ?x23822) 0.0)))))))))))))
(assert
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x23945 (* ?x23821 l_0_9_76)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x23942 (* ?x23818 l_0_9_75)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x23939 (* ?x23815 l_0_9_74)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x23936 (* ?x23806 l_0_9_55)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x23933 (* ?x23803 l_0_9_54)))
 (let ((?x25346 (+ (+ (- (- (* (* (- 6.0) l_0_9_46) l_0_9_53) ?x23933) ?x23936) ?x23939) ?x23942)))
 (= (+ ?x25346 ?x23945) 0.0)))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25004 (* ?x22247 l_0_9_88)))
 (let ((?x23821 (* 6.0 l_0_9_69)))
 (let ((?x24042 (* ?x23821 l_0_9_81)))
 (let ((?x23818 (* 6.0 l_0_9_68)))
 (let ((?x24040 (* ?x23818 l_0_9_80)))
 (let ((?x23815 (* 6.0 l_0_9_67)))
 (let ((?x24038 (* ?x23815 l_0_9_79)))
 (let ((?x23806 (* 6.0 l_0_9_48)))
 (let ((?x24035 (* ?x23806 l_0_9_60)))
 (let ((?x23803 (* 6.0 l_0_9_47)))
 (let ((?x24033 (* ?x23803 l_0_9_59)))
 (let ((?x23800 (* 6.0 l_0_9_46)))
 (let ((?x24031 (* ?x23800 l_0_9_58)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x24966 (* ?x22214 l_0_9_172)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x24964 (* ?x22211 l_0_9_151)))
 (let ((?x25354 (- (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_109) ?x24964) ?x24966) ?x24031) ?x24033)))
 (= (+ (+ (+ (+ (- ?x25354 ?x24035) ?x24038) ?x24040) ?x24042) ?x25004) 0.0)))))))))))))))))))))
(assert
 (let ((?x24160 (* l_0_9_73 l_0_9_73)))
 (let ((?x24161 (* 3.0 ?x24160)))
 (let ((?x24157 (* l_0_9_72 l_0_9_72)))
 (let ((?x24158 (* 3.0 ?x24157)))
 (let ((?x24154 (* l_0_9_71 l_0_9_71)))
 (let ((?x24155 (* 3.0 ?x24154)))
 (let ((?x24151 (* l_0_9_70 l_0_9_70)))
 (let ((?x24152 (* 3.0 ?x24151)))
 (let ((?x24147 (* (* 3.0 l_0_9_52) l_0_9_52)))
 (let ((?x24144 (* (* 3.0 l_0_9_51) l_0_9_51)))
 (let ((?x24141 (* (* 3.0 l_0_9_50) l_0_9_50)))
 (let ((?x25363 (+ (- (- (- (* (* (- 3.0) l_0_9_49) l_0_9_49) ?x24141) ?x24144) ?x24147) ?x24152)))
 (= (+ (+ (+ ?x25363 ?x24155) ?x24158) ?x24161) 0.0))))))))))))))
(assert
 (let ((?x24370 (* 6.0 l_0_9_73)))
 (let ((?x24371 (* ?x24370 l_0_9_77)))
 (let ((?x24366 (* 6.0 l_0_9_72)))
 (let ((?x24367 (* ?x24366 l_0_9_76)))
 (let ((?x24362 (* 6.0 l_0_9_71)))
 (let ((?x24363 (* ?x24362 l_0_9_75)))
 (let ((?x24358 (* 6.0 l_0_9_70)))
 (let ((?x24359 (* ?x24358 l_0_9_74)))
 (let ((?x24354 (* 6.0 l_0_9_52)))
 (let ((?x24355 (* ?x24354 l_0_9_56)))
 (let ((?x24350 (* 6.0 l_0_9_51)))
 (let ((?x24351 (* ?x24350 l_0_9_55)))
 (let ((?x24346 (* 6.0 l_0_9_50)))
 (let ((?x24347 (* ?x24346 l_0_9_54)))
 (let ((?x25372 (+ (- (- (- (* (* (- 6.0) l_0_9_49) l_0_9_53) ?x24347) ?x24351) ?x24355) ?x24359)))
 (= (+ (+ (+ ?x25372 ?x24363) ?x24367) ?x24371) 0.0)))))))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25194 (* ?x22247 l_0_9_91)))
 (let ((?x24370 (* 6.0 l_0_9_73)))
 (let ((?x24552 (* ?x24370 l_0_9_82)))
 (let ((?x24366 (* 6.0 l_0_9_72)))
 (let ((?x24550 (* ?x24366 l_0_9_81)))
 (let ((?x24362 (* 6.0 l_0_9_71)))
 (let ((?x24548 (* ?x24362 l_0_9_80)))
 (let ((?x24358 (* 6.0 l_0_9_70)))
 (let ((?x24546 (* ?x24358 l_0_9_79)))
 (let ((?x24354 (* 6.0 l_0_9_52)))
 (let ((?x24543 (* ?x24354 l_0_9_61)))
 (let ((?x24350 (* 6.0 l_0_9_51)))
 (let ((?x24541 (* ?x24350 l_0_9_60)))
 (let ((?x24346 (* 6.0 l_0_9_50)))
 (let ((?x24539 (* ?x24346 l_0_9_59)))
 (let ((?x24342 (* 6.0 l_0_9_49)))
 (let ((?x24537 (* ?x24342 l_0_9_58)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x25142 (* ?x22214 l_0_9_175)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x9135 (* ?x22211 l_0_9_154)))
 (let ((?x25390 (- (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x9135) ?x25142) ?x24537) ?x24539)))
 (let ((?x25397 (+ (+ (+ (+ (+ (- (- ?x25390 ?x24541) ?x24543) ?x24546) ?x24548) ?x24550) ?x24552) ?x25194)))
 (= ?x25397 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22083 (* l_0_9_78 l_0_9_78)))
 (let ((?x24648 (* 3.0 ?x22083)))
 (let ((?x22080 (* l_0_9_77 l_0_9_77)))
 (let ((?x24645 (* 3.0 ?x22080)))
 (let ((?x22077 (* l_0_9_76 l_0_9_76)))
 (let ((?x24642 (* 3.0 ?x22077)))
 (let ((?x22074 (* l_0_9_75 l_0_9_75)))
 (let ((?x24639 (* 3.0 ?x22074)))
 (let ((?x22071 (* l_0_9_74 l_0_9_74)))
 (let ((?x24636 (* 3.0 ?x22071)))
 (let ((?x24633 (* (* 3.0 l_0_9_57) l_0_9_57)))
 (let ((?x24629 (* (* 3.0 l_0_9_56) l_0_9_56)))
 (let ((?x24625 (* (* 3.0 l_0_9_55) l_0_9_55)))
 (let ((?x24621 (* (* 3.0 l_0_9_54) l_0_9_54)))
 (let ((?x9981 (- (- (- (- (* (* (- 3.0) l_0_9_53) l_0_9_53) ?x24621) ?x24625) ?x24629) ?x24633)))
 (= (+ (+ (+ (+ (+ ?x9981 ?x24636) ?x24639) ?x24642) ?x24645) ?x24648) 0.0)))))))))))))))))
(assert
 (let ((?x22247 (* 2.0 l_0_9_85)))
 (let ((?x25269 (* ?x22247 l_0_9_95)))
 (let ((?x24736 (* (* 6.0 l_0_9_78) l_0_9_83)))
 (let ((?x24733 (* (* 6.0 l_0_9_77) l_0_9_82)))
 (let ((?x24730 (* (* 6.0 l_0_9_76) l_0_9_81)))
 (let ((?x24727 (* (* 6.0 l_0_9_75) l_0_9_80)))
 (let ((?x24724 (* (* 6.0 l_0_9_74) l_0_9_79)))
 (let ((?x24714 (* (* 6.0 l_0_9_57) l_0_9_62)))
 (let ((?x24711 (* (* 6.0 l_0_9_56) l_0_9_61)))
 (let ((?x24708 (* (* 6.0 l_0_9_55) l_0_9_60)))
 (let ((?x24705 (* (* 6.0 l_0_9_54) l_0_9_59)))
 (let ((?x24702 (* (* 6.0 l_0_9_53) l_0_9_58)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x25221 (* ?x22214 l_0_9_179)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x25219 (* ?x22211 l_0_9_158)))
 (let ((?x25413 (- (- (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_116) ?x25219) ?x25221) ?x24702) ?x24705)))
 (let ((?x25420 (+ (+ (+ (+ (- (- (- ?x25413 ?x24708) ?x24711) ?x24714) ?x24724) ?x24727) ?x24730) ?x24733)))
 (= (+ (+ ?x25420 ?x24736) ?x25269) 0.0))))))))))))))))))))
(assert
 (let ((?x21594 (* l_0_9_84 l_0_9_84)))
 (let ((?x24791 (* 3.0 ?x21594)))
 (let ((?x21591 (* l_0_9_83 l_0_9_83)))
 (let ((?x24789 (* 3.0 ?x21591)))
 (let ((?x21588 (* l_0_9_82 l_0_9_82)))
 (let ((?x24787 (* 3.0 ?x21588)))
 (let ((?x21585 (* l_0_9_81 l_0_9_81)))
 (let ((?x24785 (* 3.0 ?x21585)))
 (let ((?x21582 (* l_0_9_80 l_0_9_80)))
 (let ((?x24783 (* 3.0 ?x21582)))
 (let ((?x21579 (* l_0_9_79 l_0_9_79)))
 (let ((?x24781 (* 3.0 ?x21579)))
 (let ((?x24778 (* (* 3.0 l_0_9_63) l_0_9_63)))
 (let ((?x24775 (* (* 3.0 l_0_9_62) l_0_9_62)))
 (let ((?x24772 (* (* 3.0 l_0_9_61) l_0_9_61)))
 (let ((?x24769 (* (* 3.0 l_0_9_60) l_0_9_60)))
 (let ((?x24766 (* (* 3.0 l_0_9_59) l_0_9_59)))
 (let ((?x24763 (* (* 3.0 l_0_9_58) l_0_9_58)))
 (let ((?x22214 (* 2.0 l_0_9_169)))
 (let ((?x23309 (* ?x22214 l_0_9_184)))
 (let ((?x22211 (* 2.0 l_0_9_148)))
 (let ((?x23305 (* ?x22211 l_0_9_163)))
 (let ((?x22208 (* 2.0 l_0_9_106)))
 (let ((?x23301 (* ?x22208 l_0_9_121)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x23288 (* ?x22909 l_0_9_85)))
 (let ((?x25427 (- (- (- (- (+ (- (- ?x23288 ?x23301) ?x23305) ?x23309) ?x24763) ?x24766) ?x24769) ?x24772)))
 (let ((?x25434 (+ (+ (+ (+ (+ (- (- ?x25427 ?x24775) ?x24778) ?x24781) ?x24783) ?x24785) ?x24787) ?x24789)))
 (= (+ ?x25434 ?x24791) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x23699 (* l_0_9_69 l_0_9_69)))
 (let ((?x23696 (* l_0_9_68 l_0_9_68)))
 (let ((?x23693 (* l_0_9_67 l_0_9_67)))
 (let ((?x7736 (* l_0_9_48 l_0_9_48)))
 (let ((?x23722 (* l_0_9_47 l_0_9_47)))
 (let ((?x7657 (* l_0_9_46 l_0_9_46)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23907 (* ?x23664 l_0_9_139)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23905 (* ?x23645 l_0_9_138)))
 (let ((?x10264 (+ (+ (- (- (* (* (- 2.0) l_0_9_130) l_0_9_137) ?x23905) ?x23907) ?x7657) ?x23722)))
 (= (- (- (- (+ ?x10264 ?x7736) ?x23693) ?x23696) ?x23699) 0.0)))))))))))))
(assert
 (let ((?x25475 (* 2.0 l_0_9_90)))
 (let ((?x25476 (* ?x25475 l_0_9_97)))
 (let ((?x25472 (* 2.0 l_0_9_89)))
 (let ((?x25473 (* ?x25472 l_0_9_96)))
 (let ((?x25469 (* 2.0 l_0_9_88)))
 (let ((?x25470 (* ?x25469 l_0_9_95)))
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x25002 (* ?x23231 l_0_9_72)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x25000 (* ?x23228 l_0_9_71)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x24998 (* ?x23225 l_0_9_70)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x24994 (* ?x23220 l_0_9_51)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x24992 (* ?x23217 l_0_9_50)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x24990 (* ?x23214 l_0_9_49)))
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x25461 (* ?x23788 l_0_9_181)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x25459 (* ?x23785 l_0_9_180)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x25457 (* ?x23782 l_0_9_179)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x25455 (* ?x23779 l_0_9_160)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x25453 (* ?x23776 l_0_9_159)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x25451 (* ?x23773 l_0_9_158)))
 (let ((?x23770 (* 2.0 l_0_9_136)))
 (let ((?x24302 (* ?x23770 l_0_9_140)))
 (let ((?x23767 (* 2.0 l_0_9_135)))
 (let ((?x24300 (* ?x23767 l_0_9_139)))
 (let ((?x23764 (* 2.0 l_0_9_134)))
 (let ((?x24298 (* ?x23764 l_0_9_138)))
 (let ((?x23761 (* 2.0 l_0_9_133)))
 (let ((?x24296 (* ?x23761 l_0_9_137)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x25445 (* ?x23751 l_0_9_118)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x25443 (* ?x23748 l_0_9_117)))
 (let ((?x25448 (- (- (+ (+ (* (* 2.0 l_0_9_109) l_0_9_116) ?x25443) ?x25445) ?x24296) ?x24298)))
 (let ((?x25460 (- (- (+ (+ (+ (- (- ?x25448 ?x24300) ?x24302) ?x25451) ?x25453) ?x25455) ?x25457) ?x25459)))
 (let ((?x25468 (- (- (- (+ (+ (+ (- ?x25460 ?x25461) ?x24990) ?x24992) ?x24994) ?x24998) ?x25000) ?x25002)))
 (= (- (- (- ?x25468 ?x25470) ?x25473) ?x25476) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23231 (* 2.0 l_0_9_69)))
 (let ((?x25108 (* ?x23231 l_0_9_76)))
 (let ((?x23228 (* 2.0 l_0_9_68)))
 (let ((?x25106 (* ?x23228 l_0_9_75)))
 (let ((?x23225 (* 2.0 l_0_9_67)))
 (let ((?x25104 (* ?x23225 l_0_9_74)))
 (let ((?x23220 (* 2.0 l_0_9_48)))
 (let ((?x25101 (* ?x23220 l_0_9_55)))
 (let ((?x23217 (* 2.0 l_0_9_47)))
 (let ((?x25099 (* ?x23217 l_0_9_54)))
 (let ((?x23214 (* 2.0 l_0_9_46)))
 (let ((?x25097 (* ?x23214 l_0_9_53)))
 (let ((?x24607 (* l_0_9_141 l_0_9_141)))
 (let ((?x24605 (* l_0_9_140 l_0_9_140)))
 (let ((?x24602 (* l_0_9_139 l_0_9_139)))
 (let ((?x25500 (- (- (* (- l_0_9_137) l_0_9_137) (* l_0_9_138 l_0_9_138)) ?x24602)))
 (let ((?x25507 (- (- (+ (+ (+ (- (- ?x25500 ?x24605) ?x24607) ?x25097) ?x25099) ?x25101) ?x25104) ?x25106)))
 (= (- ?x25507 ?x25108) 0.0)))))))))))))))))))
(assert
 (let ((?x25534 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x25531 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x25528 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x25525 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x24160 (* l_0_9_73 l_0_9_73)))
 (let ((?x24157 (* l_0_9_72 l_0_9_72)))
 (let ((?x24154 (* l_0_9_71 l_0_9_71)))
 (let ((?x24151 (* l_0_9_70 l_0_9_70)))
 (let ((?x24240 (* l_0_9_52 l_0_9_52)))
 (let ((?x6693 (* l_0_9_51 l_0_9_51)))
 (let ((?x8053 (* l_0_9_50 l_0_9_50)))
 (let ((?x24229 (* l_0_9_49 l_0_9_49)))
 (let ((?x24122 (* 2.0 l_0_9_178)))
 (let ((?x25514 (* ?x24122 l_0_9_182)))
 (let ((?x24119 (* 2.0 l_0_9_177)))
 (let ((?x25512 (* ?x24119 l_0_9_181)))
 (let ((?x24116 (* 2.0 l_0_9_176)))
 (let ((?x10525 (* ?x24116 l_0_9_180)))
 (let ((?x24113 (* 2.0 l_0_9_175)))
 (let ((?x10526 (* ?x24113 l_0_9_179)))
 (let ((?x24110 (* 2.0 l_0_9_157)))
 (let ((?x10538 (* ?x24110 l_0_9_161)))
 (let ((?x24107 (* 2.0 l_0_9_156)))
 (let ((?x10541 (* ?x24107 l_0_9_160)))
 (let ((?x24104 (* 2.0 l_0_9_155)))
 (let ((?x10547 (* ?x24104 l_0_9_159)))
 (let ((?x24101 (* 2.0 l_0_9_154)))
 (let ((?x10533 (* ?x24101 l_0_9_158)))
 (let ((?x24090 (* 2.0 l_0_9_115)))
 (let ((?x10527 (* ?x24090 l_0_9_119)))
 (let ((?x24087 (* 2.0 l_0_9_114)))
 (let ((?x10521 (* ?x24087 l_0_9_118)))
 (let ((?x24084 (* 2.0 l_0_9_113)))
 (let ((?x10638 (* ?x24084 l_0_9_117)))
 (let ((?x10552 (+ (+ (+ (+ (* (* 2.0 l_0_9_112) l_0_9_116) ?x10638) ?x10521) ?x10527) ?x10533)))
 (let ((?x25515 (- (- (- (- (+ (+ (+ ?x10552 ?x10547) ?x10541) ?x10538) ?x10526) ?x10525) ?x25512) ?x25514)))
 (let ((?x25522 (- (- (- (+ (+ (+ (+ ?x25515 ?x24229) ?x8053) ?x6693) ?x24240) ?x24151) ?x24154) ?x24157)))
 (= (- (- (- (- (- ?x25522 ?x24160) ?x25525) ?x25528) ?x25531) ?x25534) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25605 (* l_0_9_99 l_0_9_99)))
 (let ((?x25603 (* l_0_9_98 l_0_9_98)))
 (let ((?x25601 (* l_0_9_97 l_0_9_97)))
 (let ((?x25599 (* l_0_9_96 l_0_9_96)))
 (let ((?x25597 (* l_0_9_95 l_0_9_95)))
 (let ((?x23390 (* 2.0 l_0_9_73)))
 (let ((?x25267 (* ?x23390 l_0_9_77)))
 (let ((?x23387 (* 2.0 l_0_9_72)))
 (let ((?x25265 (* ?x23387 l_0_9_76)))
 (let ((?x23384 (* 2.0 l_0_9_71)))
 (let ((?x25263 (* ?x23384 l_0_9_75)))
 (let ((?x23381 (* 2.0 l_0_9_70)))
 (let ((?x25261 (* ?x23381 l_0_9_74)))
 (let ((?x23376 (* 2.0 l_0_9_52)))
 (let ((?x25258 (* ?x23376 l_0_9_56)))
 (let ((?x23373 (* 2.0 l_0_9_51)))
 (let ((?x25256 (* ?x23373 l_0_9_55)))
 (let ((?x23370 (* 2.0 l_0_9_50)))
 (let ((?x25254 (* ?x23370 l_0_9_54)))
 (let ((?x23367 (* 2.0 l_0_9_49)))
 (let ((?x25252 (* ?x23367 l_0_9_53)))
 (let ((?x25587 (* l_0_9_183 l_0_9_183)))
 (let ((?x25585 (* l_0_9_182 l_0_9_182)))
 (let ((?x25583 (* l_0_9_181 l_0_9_181)))
 (let ((?x25581 (* l_0_9_180 l_0_9_180)))
 (let ((?x25579 (* l_0_9_179 l_0_9_179)))
 (let ((?x25577 (* l_0_9_162 l_0_9_162)))
 (let ((?x25575 (* l_0_9_161 l_0_9_161)))
 (let ((?x25573 (* l_0_9_160 l_0_9_160)))
 (let ((?x25571 (* l_0_9_159 l_0_9_159)))
 (let ((?x25569 (* l_0_9_158 l_0_9_158)))
 (let ((?x25567 (* l_0_9_120 l_0_9_120)))
 (let ((?x25565 (* l_0_9_119 l_0_9_119)))
 (let ((?x25563 (* l_0_9_118 l_0_9_118)))
 (let ((?x25566 (+ (+ (+ (* l_0_9_116 l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x25563) ?x25565)))
 (let ((?x25580 (- (+ (+ (+ (+ (+ (+ ?x25566 ?x25567) ?x25569) ?x25571) ?x25573) ?x25575) ?x25577) ?x25579)))
 (let ((?x25591 (+ (+ (+ (- (- (- (- ?x25580 ?x25581) ?x25583) ?x25585) ?x25587) ?x25252) ?x25254) ?x25256)))
 (let ((?x25600 (- (- (- (- (- (- (+ ?x25591 ?x25258) ?x25261) ?x25263) ?x25265) ?x25267) ?x25597) ?x25599)))
 (= (- (- (- ?x25600 ?x25601) ?x25603) ?x25605) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22083 (* l_0_9_78 l_0_9_78)))
 (let ((?x22080 (* l_0_9_77 l_0_9_77)))
 (let ((?x22077 (* l_0_9_76 l_0_9_76)))
 (let ((?x22074 (* l_0_9_75 l_0_9_75)))
 (let ((?x22071 (* l_0_9_74 l_0_9_74)))
 (let ((?x5562 (* l_0_9_57 l_0_9_57)))
 (let ((?x22123 (* l_0_9_56 l_0_9_56)))
 (let ((?x5556 (* l_0_9_55 l_0_9_55)))
 (let ((?x25626 (+ (+ (+ (* l_0_9_53 l_0_9_53) (* l_0_9_54 l_0_9_54)) ?x5556) ?x22123)))
 (= (- (- (- (- (- (+ ?x25626 ?x5562) ?x22071) ?x22074) ?x22077) ?x22080) ?x22083) 0.0)))))))))))
(assert
 (let ((?x25662 (* l_0_9_90 l_0_9_90)))
 (let ((?x25660 (* l_0_9_89 l_0_9_89)))
 (let ((?x25658 (* l_0_9_88 l_0_9_88)))
 (let ((?x25656 (* l_0_9_174 l_0_9_174)))
 (let ((?x25654 (* l_0_9_173 l_0_9_173)))
 (let ((?x25652 (* l_0_9_172 l_0_9_172)))
 (let ((?x25650 (* l_0_9_153 l_0_9_153)))
 (let ((?x25648 (* l_0_9_152 l_0_9_152)))
 (let ((?x25646 (* l_0_9_151 l_0_9_151)))
 (let ((?x23664 (* 2.0 l_0_9_132)))
 (let ((?x23759 (* ?x23664 l_0_9_135)))
 (let ((?x23645 (* 2.0 l_0_9_131)))
 (let ((?x23757 (* ?x23645 l_0_9_134)))
 (let ((?x23754 (* 2.0 l_0_9_130)))
 (let ((?x23755 (* ?x23754 l_0_9_133)))
 (let ((?x25641 (* l_0_9_111 l_0_9_111)))
 (let ((?x25643 (- (+ (+ (* l_0_9_109 l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x25641) ?x23755)))
 (let ((?x25655 (- (- (+ (+ (+ (- (- ?x25643 ?x23757) ?x23759) ?x25646) ?x25648) ?x25650) ?x25652) ?x25654)))
 (= (- (- (- (- ?x25655 ?x25656) ?x25658) ?x25660) ?x25662) 0.0))))))))))))))))))))
(assert
 (let ((?x25475 (* 2.0 l_0_9_90)))
 (let ((?x25697 (* ?x25475 l_0_9_93)))
 (let ((?x25472 (* 2.0 l_0_9_89)))
 (let ((?x25695 (* ?x25472 l_0_9_92)))
 (let ((?x25469 (* 2.0 l_0_9_88)))
 (let ((?x25693 (* ?x25469 l_0_9_91)))
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x25691 (* ?x23788 l_0_9_177)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x25689 (* ?x23785 l_0_9_176)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x25687 (* ?x23782 l_0_9_175)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x25685 (* ?x23779 l_0_9_156)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x25683 (* ?x23776 l_0_9_155)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x25681 (* ?x23773 l_0_9_154)))
 (let ((?x24099 (* l_0_9_136 l_0_9_136)))
 (let ((?x24097 (* l_0_9_135 l_0_9_135)))
 (let ((?x24095 (* l_0_9_134 l_0_9_134)))
 (let ((?x24093 (* l_0_9_133 l_0_9_133)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x25675 (* ?x23751 l_0_9_114)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x11056 (* ?x23748 l_0_9_113)))
 (let ((?x25678 (- (- (+ (+ (* (* 2.0 l_0_9_109) l_0_9_112) ?x11056) ?x25675) ?x24093) ?x24095)))
 (let ((?x25690 (- (- (+ (+ (+ (- (- ?x25678 ?x24097) ?x24099) ?x25681) ?x25683) ?x25685) ?x25687) ?x25689)))
 (= (- (- (- (- ?x25690 ?x25691) ?x25693) ?x25695) ?x25697) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x25755 (* l_0_9_94 l_0_9_94)))
 (let ((?x25753 (* l_0_9_93 l_0_9_93)))
 (let ((?x25751 (* l_0_9_92 l_0_9_92)))
 (let ((?x25749 (* l_0_9_91 l_0_9_91)))
 (let ((?x25747 (* l_0_9_178 l_0_9_178)))
 (let ((?x25745 (* l_0_9_177 l_0_9_177)))
 (let ((?x25743 (* l_0_9_176 l_0_9_176)))
 (let ((?x25741 (* l_0_9_175 l_0_9_175)))
 (let ((?x25739 (* l_0_9_157 l_0_9_157)))
 (let ((?x25737 (* l_0_9_156 l_0_9_156)))
 (let ((?x25735 (* l_0_9_155 l_0_9_155)))
 (let ((?x25733 (* l_0_9_154 l_0_9_154)))
 (let ((?x25731 (* l_0_9_115 l_0_9_115)))
 (let ((?x25729 (* l_0_9_114 l_0_9_114)))
 (let ((?x25732 (+ (+ (+ (* l_0_9_112 l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x25729) ?x25731)))
 (let ((?x25746 (- (- (- (+ (+ (+ (+ ?x25732 ?x25733) ?x25735) ?x25737) ?x25739) ?x25741) ?x25743) ?x25745)))
 (= (- (- (- (- (- ?x25746 ?x25747) ?x25749) ?x25751) ?x25753) ?x25755) 0.0))))))))))))))))))
(assert
 (let ((?x22458 (* l_0_9_87 l_0_9_87)))
 (let ((?x22456 (* l_0_9_86 l_0_9_86)))
 (let ((?x22446 (* l_0_9_171 l_0_9_171)))
 (let ((?x22444 (* l_0_9_170 l_0_9_170)))
 (let ((?x22442 (* l_0_9_150 l_0_9_150)))
 (let ((?x22440 (* l_0_9_149 l_0_9_149)))
 (let ((?x25775 (- (- (* (- l_0_9_107) l_0_9_107) (* l_0_9_108 l_0_9_108)) ?x22440)))
 (= (+ (+ (+ (+ (- ?x25775 ?x22442) ?x22444) ?x22446) ?x22456) ?x22458) 0.0)))))))))
(assert
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22613 (* ?x22612 l_0_9_89)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22610 (* ?x22609 l_0_9_88)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22589 (* ?x22588 l_0_9_173)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22586 (* ?x22585 l_0_9_172)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22583 (* ?x22582 l_0_9_152)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22580 (* ?x22579 l_0_9_151)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22572 (* ?x22571 l_0_9_110)))
 (let ((?x25793 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_109) ?x22572) ?x22580) ?x22583) ?x22586)))
 (= (+ (+ (+ ?x25793 ?x22589) ?x22610) ?x22613) 0.0)))))))))))))))))
(assert
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22797 (* ?x22612 l_0_9_92)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22795 (* ?x22609 l_0_9_91)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22781 (* ?x22588 l_0_9_176)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22779 (* ?x22585 l_0_9_175)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22777 (* ?x22582 l_0_9_155)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22775 (* ?x22579 l_0_9_154)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22773 (* ?x22571 l_0_9_113)))
 (let ((?x11269 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_112) ?x22773) ?x22775) ?x22777) ?x22779)))
 (= (+ (+ (+ ?x11269 ?x22781) ?x22795) ?x22797) 0.0)))))))))))))))))
(assert
 (let ((?x22612 (* 2.0 l_0_9_87)))
 (let ((?x22860 (* ?x22612 l_0_9_96)))
 (let ((?x22609 (* 2.0 l_0_9_86)))
 (let ((?x22858 (* ?x22609 l_0_9_95)))
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22840 (* ?x22588 l_0_9_180)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22838 (* ?x22585 l_0_9_179)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22836 (* ?x22582 l_0_9_159)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22834 (* ?x22579 l_0_9_158)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22825 (* ?x22571 l_0_9_117)))
 (let ((?x11378 (+ (- (- (- (* (* (- 2.0) l_0_9_107) l_0_9_116) ?x22825) ?x22834) ?x22836) ?x22838)))
 (= (+ (+ (+ ?x11378 ?x22840) ?x22858) ?x22860) 0.0)))))))))))))))))
(assert
 (let ((?x22588 (* 2.0 l_0_9_171)))
 (let ((?x22931 (* ?x22588 l_0_9_185)))
 (let ((?x22585 (* 2.0 l_0_9_170)))
 (let ((?x22929 (* ?x22585 l_0_9_184)))
 (let ((?x22582 (* 2.0 l_0_9_150)))
 (let ((?x22923 (* ?x22582 l_0_9_164)))
 (let ((?x22579 (* 2.0 l_0_9_149)))
 (let ((?x22921 (* ?x22579 l_0_9_163)))
 (let ((?x22571 (* 2.0 l_0_9_108)))
 (let ((?x22917 (* ?x22571 l_0_9_122)))
 (let ((?x22569 (* 2.0 l_0_9_107)))
 (let ((?x22915 (* ?x22569 l_0_9_121)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x22913 (* ?x22912 l_0_9_87)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x22910 (* ?x22909 l_0_9_86)))
 (let ((?x25801 (+ (+ (- (- (- (- (+ ?x22910 ?x22913) ?x22915) ?x22917) ?x22921) ?x22923) ?x22929) ?x22931)))
 (= ?x25801 0.0)))))))))))))))))))
(assert
 (let ((?x25662 (* l_0_9_90 l_0_9_90)))
 (let ((?x25660 (* l_0_9_89 l_0_9_89)))
 (let ((?x25658 (* l_0_9_88 l_0_9_88)))
 (let ((?x25656 (* l_0_9_174 l_0_9_174)))
 (let ((?x25654 (* l_0_9_173 l_0_9_173)))
 (let ((?x25652 (* l_0_9_172 l_0_9_172)))
 (let ((?x25650 (* l_0_9_153 l_0_9_153)))
 (let ((?x25648 (* l_0_9_152 l_0_9_152)))
 (let ((?x25646 (* l_0_9_151 l_0_9_151)))
 (let ((?x25641 (* l_0_9_111 l_0_9_111)))
 (let ((?x11565 (- (- (* (- l_0_9_109) l_0_9_109) (* l_0_9_110 l_0_9_110)) ?x25641)))
 (let ((?x25807 (+ (+ (+ (+ (- (- (- ?x11565 ?x25646) ?x25648) ?x25650) ?x25652) ?x25654) ?x25656) ?x25658)))
 (= (+ (+ ?x25807 ?x25660) ?x25662) 0.0))))))))))))))
(assert
 (let ((?x25475 (* 2.0 l_0_9_90)))
 (let ((?x25697 (* ?x25475 l_0_9_93)))
 (let ((?x25472 (* 2.0 l_0_9_89)))
 (let ((?x25695 (* ?x25472 l_0_9_92)))
 (let ((?x25469 (* 2.0 l_0_9_88)))
 (let ((?x25693 (* ?x25469 l_0_9_91)))
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x25691 (* ?x23788 l_0_9_177)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x25689 (* ?x23785 l_0_9_176)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x25687 (* ?x23782 l_0_9_175)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x25685 (* ?x23779 l_0_9_156)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x25683 (* ?x23776 l_0_9_155)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x25681 (* ?x23773 l_0_9_154)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x25675 (* ?x23751 l_0_9_114)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x11056 (* ?x23748 l_0_9_113)))
 (let ((?x11542 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_112) ?x11056) ?x25675) ?x25681) ?x25683)))
 (let ((?x25814 (+ (+ (+ (+ (+ (+ (- ?x11542 ?x25685) ?x25687) ?x25689) ?x25691) ?x25693) ?x25695) ?x25697)))
 (= ?x25814 0.0))))))))))))))))))))))))))
(assert
 (let ((?x25475 (* 2.0 l_0_9_90)))
 (let ((?x25476 (* ?x25475 l_0_9_97)))
 (let ((?x25472 (* 2.0 l_0_9_89)))
 (let ((?x25473 (* ?x25472 l_0_9_96)))
 (let ((?x25469 (* 2.0 l_0_9_88)))
 (let ((?x25470 (* ?x25469 l_0_9_95)))
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x25461 (* ?x23788 l_0_9_181)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x25459 (* ?x23785 l_0_9_180)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x25457 (* ?x23782 l_0_9_179)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x25455 (* ?x23779 l_0_9_160)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x25453 (* ?x23776 l_0_9_159)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x25451 (* ?x23773 l_0_9_158)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x25445 (* ?x23751 l_0_9_118)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x25443 (* ?x23748 l_0_9_117)))
 (let ((?x11720 (- (- (- (- (* (* (- 2.0) l_0_9_109) l_0_9_116) ?x25443) ?x25445) ?x25451) ?x25453)))
 (let ((?x25826 (+ (+ (+ (+ (+ (+ (- ?x11720 ?x25455) ?x25457) ?x25459) ?x25461) ?x25470) ?x25473) ?x25476)))
 (= ?x25826 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23788 (* 2.0 l_0_9_174)))
 (let ((?x23789 (* ?x23788 l_0_9_186)))
 (let ((?x23785 (* 2.0 l_0_9_173)))
 (let ((?x23786 (* ?x23785 l_0_9_185)))
 (let ((?x23782 (* 2.0 l_0_9_172)))
 (let ((?x23783 (* ?x23782 l_0_9_184)))
 (let ((?x23779 (* 2.0 l_0_9_153)))
 (let ((?x23780 (* ?x23779 l_0_9_165)))
 (let ((?x23776 (* 2.0 l_0_9_152)))
 (let ((?x23777 (* ?x23776 l_0_9_164)))
 (let ((?x23773 (* 2.0 l_0_9_151)))
 (let ((?x23774 (* ?x23773 l_0_9_163)))
 (let ((?x23751 (* 2.0 l_0_9_111)))
 (let ((?x23752 (* ?x23751 l_0_9_123)))
 (let ((?x23748 (* 2.0 l_0_9_110)))
 (let ((?x23749 (* ?x23748 l_0_9_122)))
 (let ((?x23745 (* 2.0 l_0_9_109)))
 (let ((?x23746 (* ?x23745 l_0_9_121)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x23743 (* ?x23742 l_0_9_90)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x23740 (* ?x22912 l_0_9_89)))
 (let ((?x10669 (- (- (+ (+ (* (* 2.0 l_0_9_100) l_0_9_88) ?x23740) ?x23743) ?x23746) ?x23749)))
 (let ((?x11802 (+ (+ (+ (- (- (- (- ?x10669 ?x23752) ?x23774) ?x23777) ?x23780) ?x23783) ?x23786) ?x23789)))
 (= ?x11802 0.0))))))))))))))))))))))))))
(assert
 (let ((?x25755 (* l_0_9_94 l_0_9_94)))
 (let ((?x25753 (* l_0_9_93 l_0_9_93)))
 (let ((?x25751 (* l_0_9_92 l_0_9_92)))
 (let ((?x25749 (* l_0_9_91 l_0_9_91)))
 (let ((?x25747 (* l_0_9_178 l_0_9_178)))
 (let ((?x25745 (* l_0_9_177 l_0_9_177)))
 (let ((?x25743 (* l_0_9_176 l_0_9_176)))
 (let ((?x25741 (* l_0_9_175 l_0_9_175)))
 (let ((?x25739 (* l_0_9_157 l_0_9_157)))
 (let ((?x25737 (* l_0_9_156 l_0_9_156)))
 (let ((?x25735 (* l_0_9_155 l_0_9_155)))
 (let ((?x25733 (* l_0_9_154 l_0_9_154)))
 (let ((?x25731 (* l_0_9_115 l_0_9_115)))
 (let ((?x25729 (* l_0_9_114 l_0_9_114)))
 (let ((?x11985 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x25729)))
 (let ((?x25829 (+ (+ (- (- (- (- (- ?x11985 ?x25731) ?x25733) ?x25735) ?x25737) ?x25739) ?x25741) ?x25743)))
 (= (+ (+ (+ (+ (+ (+ ?x25829 ?x25745) ?x25747) ?x25749) ?x25751) ?x25753) ?x25755) 0.0))))))))))))))))))
(assert
 (let ((?x25534 (* (* 2.0 l_0_9_94) l_0_9_98)))
 (let ((?x25531 (* (* 2.0 l_0_9_93) l_0_9_97)))
 (let ((?x25528 (* (* 2.0 l_0_9_92) l_0_9_96)))
 (let ((?x25525 (* (* 2.0 l_0_9_91) l_0_9_95)))
 (let ((?x24122 (* 2.0 l_0_9_178)))
 (let ((?x25514 (* ?x24122 l_0_9_182)))
 (let ((?x24119 (* 2.0 l_0_9_177)))
 (let ((?x25512 (* ?x24119 l_0_9_181)))
 (let ((?x24116 (* 2.0 l_0_9_176)))
 (let ((?x10525 (* ?x24116 l_0_9_180)))
 (let ((?x24113 (* 2.0 l_0_9_175)))
 (let ((?x10526 (* ?x24113 l_0_9_179)))
 (let ((?x24110 (* 2.0 l_0_9_157)))
 (let ((?x10538 (* ?x24110 l_0_9_161)))
 (let ((?x24107 (* 2.0 l_0_9_156)))
 (let ((?x10541 (* ?x24107 l_0_9_160)))
 (let ((?x24104 (* 2.0 l_0_9_155)))
 (let ((?x10547 (* ?x24104 l_0_9_159)))
 (let ((?x24101 (* 2.0 l_0_9_154)))
 (let ((?x10533 (* ?x24101 l_0_9_158)))
 (let ((?x24090 (* 2.0 l_0_9_115)))
 (let ((?x10527 (* ?x24090 l_0_9_119)))
 (let ((?x24087 (* 2.0 l_0_9_114)))
 (let ((?x10521 (* ?x24087 l_0_9_118)))
 (let ((?x24084 (* 2.0 l_0_9_113)))
 (let ((?x10638 (* ?x24084 l_0_9_117)))
 (let ((?x11963 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_116) ?x10638) ?x10521) ?x10527) ?x10533)))
 (let ((?x12047 (+ (+ (+ (+ (- (- (- ?x11963 ?x10547) ?x10541) ?x10538) ?x10526) ?x10525) ?x25512) ?x25514)))
 (= (+ (+ (+ (+ ?x12047 ?x25525) ?x25528) ?x25531) ?x25534) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x24122 (* 2.0 l_0_9_178)))
 (let ((?x24123 (* ?x24122 l_0_9_187)))
 (let ((?x24119 (* 2.0 l_0_9_177)))
 (let ((?x24120 (* ?x24119 l_0_9_186)))
 (let ((?x24116 (* 2.0 l_0_9_176)))
 (let ((?x24117 (* ?x24116 l_0_9_185)))
 (let ((?x24113 (* 2.0 l_0_9_175)))
 (let ((?x24114 (* ?x24113 l_0_9_184)))
 (let ((?x24110 (* 2.0 l_0_9_157)))
 (let ((?x24111 (* ?x24110 l_0_9_166)))
 (let ((?x24107 (* 2.0 l_0_9_156)))
 (let ((?x24108 (* ?x24107 l_0_9_165)))
 (let ((?x24104 (* 2.0 l_0_9_155)))
 (let ((?x24105 (* ?x24104 l_0_9_164)))
 (let ((?x24101 (* 2.0 l_0_9_154)))
 (let ((?x24102 (* ?x24101 l_0_9_163)))
 (let ((?x24090 (* 2.0 l_0_9_115)))
 (let ((?x24091 (* ?x24090 l_0_9_124)))
 (let ((?x24087 (* 2.0 l_0_9_114)))
 (let ((?x24088 (* ?x24087 l_0_9_123)))
 (let ((?x24084 (* 2.0 l_0_9_113)))
 (let ((?x24085 (* ?x24084 l_0_9_122)))
 (let ((?x24081 (* 2.0 l_0_9_112)))
 (let ((?x24082 (* ?x24081 l_0_9_121)))
 (let ((?x24078 (* 2.0 l_0_9_103)))
 (let ((?x24079 (* ?x24078 l_0_9_94)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x24076 (* ?x23742 l_0_9_93)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x24074 (* ?x22912 l_0_9_92)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x24072 (* ?x22909 l_0_9_91)))
 (let ((?x25859 (- (- (- (- (+ (+ (+ ?x24072 ?x24074) ?x24076) ?x24079) ?x24082) ?x24085) ?x24088) ?x24091)))
 (let ((?x25866 (+ (+ (+ (- (- (- (- ?x25859 ?x24102) ?x24105) ?x24108) ?x24111) ?x24114) ?x24117) ?x24120)))
 (= (+ ?x25866 ?x24123) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25605 (* l_0_9_99 l_0_9_99)))
 (let ((?x25603 (* l_0_9_98 l_0_9_98)))
 (let ((?x25601 (* l_0_9_97 l_0_9_97)))
 (let ((?x25599 (* l_0_9_96 l_0_9_96)))
 (let ((?x25597 (* l_0_9_95 l_0_9_95)))
 (let ((?x25587 (* l_0_9_183 l_0_9_183)))
 (let ((?x25585 (* l_0_9_182 l_0_9_182)))
 (let ((?x25583 (* l_0_9_181 l_0_9_181)))
 (let ((?x25581 (* l_0_9_180 l_0_9_180)))
 (let ((?x25579 (* l_0_9_179 l_0_9_179)))
 (let ((?x25577 (* l_0_9_162 l_0_9_162)))
 (let ((?x25575 (* l_0_9_161 l_0_9_161)))
 (let ((?x25573 (* l_0_9_160 l_0_9_160)))
 (let ((?x25571 (* l_0_9_159 l_0_9_159)))
 (let ((?x25569 (* l_0_9_158 l_0_9_158)))
 (let ((?x25567 (* l_0_9_120 l_0_9_120)))
 (let ((?x25565 (* l_0_9_119 l_0_9_119)))
 (let ((?x25563 (* l_0_9_118 l_0_9_118)))
 (let ((?x12342 (- (- (* (- l_0_9_116) l_0_9_116) (* l_0_9_117 l_0_9_117)) ?x25563)))
 (let ((?x12303 (- (- (- (- (- (- (- ?x12342 ?x25565) ?x25567) ?x25569) ?x25571) ?x25573) ?x25575) ?x25577)))
 (let ((?x25871 (+ (+ (+ (+ (+ (+ (+ ?x12303 ?x25579) ?x25581) ?x25583) ?x25585) ?x25587) ?x25597) ?x25599)))
 (= (+ (+ (+ ?x25871 ?x25601) ?x25603) ?x25605) 0.0)))))))))))))))))))))))
(assert
 (let ((?x24332 (* (* 2.0 l_0_9_183) l_0_9_188)))
 (let ((?x24329 (* (* 2.0 l_0_9_182) l_0_9_187)))
 (let ((?x24326 (* (* 2.0 l_0_9_181) l_0_9_186)))
 (let ((?x24323 (* (* 2.0 l_0_9_180) l_0_9_185)))
 (let ((?x24320 (* (* 2.0 l_0_9_179) l_0_9_184)))
 (let ((?x24317 (* (* 2.0 l_0_9_162) l_0_9_167)))
 (let ((?x24314 (* (* 2.0 l_0_9_161) l_0_9_166)))
 (let ((?x24311 (* (* 2.0 l_0_9_160) l_0_9_165)))
 (let ((?x24308 (* (* 2.0 l_0_9_159) l_0_9_164)))
 (let ((?x24305 (* (* 2.0 l_0_9_158) l_0_9_163)))
 (let ((?x24292 (* (* 2.0 l_0_9_120) l_0_9_125)))
 (let ((?x24287 (* (* 2.0 l_0_9_119) l_0_9_124)))
 (let ((?x24284 (* (* 2.0 l_0_9_118) l_0_9_123)))
 (let ((?x24281 (* (* 2.0 l_0_9_117) l_0_9_122)))
 (let ((?x24278 (* (* 2.0 l_0_9_116) l_0_9_121)))
 (let ((?x24273 (* (* 2.0 l_0_9_104) l_0_9_99)))
 (let ((?x24078 (* 2.0 l_0_9_103)))
 (let ((?x24270 (* ?x24078 l_0_9_98)))
 (let ((?x23742 (* 2.0 l_0_9_102)))
 (let ((?x24268 (* ?x23742 l_0_9_97)))
 (let ((?x22912 (* 2.0 l_0_9_101)))
 (let ((?x24266 (* ?x22912 l_0_9_96)))
 (let ((?x22909 (* 2.0 l_0_9_100)))
 (let ((?x24264 (* ?x22909 l_0_9_95)))
 (let ((?x12466 (- (- (- (+ (+ (+ (+ ?x24264 ?x24266) ?x24268) ?x24270) ?x24273) ?x24278) ?x24281) ?x24284)))
 (let ((?x25888 (- (- (- (- (- (- (- ?x12466 ?x24287) ?x24292) ?x24305) ?x24308) ?x24311) ?x24314) ?x24317)))
 (= (+ (+ (+ (+ (+ ?x25888 ?x24320) ?x24323) ?x24326) ?x24329) ?x24332) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x24530 (* l_0_9_189 l_0_9_189)))
 (let ((?x24528 (* l_0_9_188 l_0_9_188)))
 (let ((?x24526 (* l_0_9_187 l_0_9_187)))
 (let ((?x24524 (* l_0_9_186 l_0_9_186)))
 (let ((?x24522 (* l_0_9_185 l_0_9_185)))
 (let ((?x24520 (* l_0_9_184 l_0_9_184)))
 (let ((?x24516 (* l_0_9_168 l_0_9_168)))
 (let ((?x24514 (* l_0_9_167 l_0_9_167)))
 (let ((?x24512 (* l_0_9_166 l_0_9_166)))
 (let ((?x24510 (* l_0_9_165 l_0_9_165)))
 (let ((?x24508 (* l_0_9_164 l_0_9_164)))
 (let ((?x24506 (* l_0_9_163 l_0_9_163)))
 (let ((?x24499 (* l_0_9_126 l_0_9_126)))
 (let ((?x24497 (* l_0_9_125 l_0_9_125)))
 (let ((?x24495 (* l_0_9_124 l_0_9_124)))
 (let ((?x24493 (* l_0_9_123 l_0_9_123)))
 (let ((?x24491 (* l_0_9_122 l_0_9_122)))
 (let ((?x24489 (* l_0_9_121 l_0_9_121)))
 (let ((?x24487 (* l_0_9_105 l_0_9_105)))
 (let ((?x24485 (* l_0_9_104 l_0_9_104)))
 (let ((?x24483 (* l_0_9_103 l_0_9_103)))
 (let ((?x24481 (* l_0_9_102 l_0_9_102)))
 (let ((?x12652 (+ (+ (+ (* l_0_9_100 l_0_9_100) (* l_0_9_101 l_0_9_101)) ?x24481) ?x24483)))
 (let ((?x12604 (- (- (- (- (- (+ (+ ?x12652 ?x24485) ?x24487) ?x24489) ?x24491) ?x24493) ?x24495) ?x24497)))
 (let ((?x12475 (- (- (- (- (- (- (- ?x12604 ?x24499) ?x24506) ?x24508) ?x24510) ?x24512) ?x24514) ?x24516)))
 (= (+ (+ (+ (+ (+ (+ ?x12475 ?x24520) ?x24522) ?x24524) ?x24526) ?x24528) ?x24530) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x23667 (* l_0_9_132 l_0_9_132)))
 (let ((?x12746 (- (- (* (- l_0_9_130) l_0_9_130) (* l_0_9_131 l_0_9_131)) ?x23667)))
 (= ?x12746 0.0))))
(assert
 (>= l_0_9_1 0.0))
(assert
 (>= l_0_9_3 0.0))
(assert
 (>= l_0_9_6 0.0))
(assert
 (>= l_0_9_10 0.0))
(assert
 (>= l_0_9_15 0.0))
(assert
 (>= l_0_9_21 0.0))
(assert
 (>= l_0_9_22 0.0))
(assert
 (>= l_0_9_24 0.0))
(assert
 (>= l_0_9_27 0.0))
(assert
 (>= l_0_9_31 0.0))
(assert
 (>= l_0_9_36 0.0))
(assert
 (>= l_0_9_42 0.0))
(assert
 (>= l_0_9_43 0.0))
(assert
 (>= l_0_9_45 0.0))
(assert
 (>= l_0_9_48 0.0))
(assert
 (>= l_0_9_52 0.0))
(assert
 (>= l_0_9_57 0.0))
(assert
 (>= l_0_9_63 0.0))
(assert
 (>= l_0_9_64 0.0))
(assert
 (>= l_0_9_66 0.0))
(assert
 (>= l_0_9_69 0.0))
(assert
 (>= l_0_9_73 0.0))
(assert
 (>= l_0_9_78 0.0))
(assert
 (>= l_0_9_84 0.0))
(assert
 (>= l_0_9_85 0.0))
(assert
 (>= l_0_9_87 0.0))
(assert
 (>= l_0_9_90 0.0))
(assert
 (>= l_0_9_94 0.0))
(assert
 (>= l_0_9_99 0.0))
(assert
 (>= l_0_9_105 0.0))
(assert
 (>= l_0_9_106 0.0))
(assert
 (>= l_0_9_108 0.0))
(assert
 (>= l_0_9_111 0.0))
(assert
 (>= l_0_9_115 0.0))
(assert
 (>= l_0_9_120 0.0))
(assert
 (>= l_0_9_126 0.0))
(assert
 (>= l_0_9_127 0.0))
(assert
 (>= l_0_9_129 0.0))
(assert
 (>= l_0_9_132 0.0))
(assert
 (>= l_0_9_136 0.0))
(assert
 (>= l_0_9_141 0.0))
(assert
 (>= l_0_9_147 0.0))
(assert
 (>= l_0_9_148 0.0))
(assert
 (>= l_0_9_150 0.0))
(assert
 (>= l_0_9_153 0.0))
(assert
 (>= l_0_9_157 0.0))
(assert
 (>= l_0_9_162 0.0))
(assert
 (>= l_0_9_168 0.0))
(assert
 (>= l_0_9_169 0.0))
(assert
 (>= l_0_9_171 0.0))
(assert
 (>= l_0_9_174 0.0))
(assert
 (>= l_0_9_178 0.0))
(assert
 (>= l_0_9_183 0.0))
(assert
 (>= l_0_9_189 0.0))
(assert
 (>= l_0_9_190 0.0))
(assert
 (>= l_0_9_192 0.0))
(assert
 (>= l_0_9_195 0.0))
(assert
 (>= l_0_9_199 0.0))
(assert
 (>= l_0_9_204 0.0))
(assert
 (>= l_0_9_210 0.0))
(assert
 (>= l_0_9_211 0.0))
(assert
 (>= l_0_9_213 0.0))
(assert
 (>= l_0_9_216 0.0))
(assert
 (>= l_0_9_220 0.0))
(assert
 (>= l_0_9_225 0.0))
(assert
 (>= l_0_9_231 0.0))
(assert
 (>= l_0_9_232 0.0))
(assert
 (>= l_0_9_234 0.0))
(assert
 (>= l_0_9_237 0.0))
(assert
 (>= l_0_9_241 0.0))
(assert
 (>= l_0_9_246 0.0))
(assert
 (>= l_0_9_252 0.0))
(assert
 (let ((?x25989 (* l_0_10_253 l_0_10_253)))
 (let ((?x25987 (* l_0_10_232 l_0_10_232)))
 (let ((?x25985 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x25982 (* l_0_10_211 l_0_10_211)))
 (let ((?x25980 (* l_0_10_190 l_0_10_190)))
 (let ((?x25986 (- (- (- (+ _a_6_ (* 6.0 (* l_0_10_1 l_0_10_1))) ?x25980) ?x25982) ?x25985)))
 (let ((?x25996 (+ (- (- (- ?x25986 ?x25987) ?x25989) (* (* 1.0 l_0_10_43) l_0_10_43)) (* 1.0 (* l_0_10_64 l_0_10_64)))))
 (= (- ?x25996 7.0) 0.0)))))))))
(assert
 (let ((?x26050 (* l_0_10_3 l_0_10_3)))
 (let ((?x26051 (* 6.0 ?x26050)))
 (let ((?x26048 (* l_0_10_255 l_0_10_255)))
 (let ((?x26046 (* l_0_10_254 l_0_10_254)))
 (let ((?x26044 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x26041 (* l_0_10_234 l_0_10_234)))
 (let ((?x26039 (* l_0_10_233 l_0_10_233)))
 (let ((?x26037 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x26031 (* l_0_10_213 l_0_10_213)))
 (let ((?x26029 (* l_0_10_212 l_0_10_212)))
 (let ((?x26026 (* l_0_10_2 l_0_10_2)))
 (let ((?x26027 (* 6.0 ?x26026)))
 (let ((?x26024 (* l_0_10_192 l_0_10_192)))
 (let ((?x26022 (* l_0_10_191 l_0_10_191)))
 (let ((?x26028 (+ (- (- (- _a_7_ (* (* 2.0 l_0_10_1) l_0_10_2)) ?x26022) ?x26024) ?x26027)))
 (let ((?x26038 (- (+ (- (- ?x26028 ?x26029) ?x26031) (* (* 2.0 l_0_10_22) l_0_10_23)) ?x26037)))
 (let ((?x26055 (- (+ (- (- (- (- (- ?x26038 ?x26039) ?x26041) ?x26044) ?x26046) ?x26048) ?x26051) (* (* 1.0 l_0_10_44) l_0_10_44))))
 (let ((?x26061 (+ (- ?x26055 (* (* 1.0 l_0_10_45) l_0_10_45)) (* 1.0 (* l_0_10_65 l_0_10_65)))))
 (= (+ ?x26061 (* 1.0 (* l_0_10_66 l_0_10_66))) 0.0))))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26161 (* ?x26160 l_0_10_75)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26158 (* ?x26157 l_0_10_74)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26155 (* ?x26154 l_0_10_65)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26152 (* ?x26151 l_0_10_54)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26149 (* ?x26148 l_0_10_53)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26146 (* ?x26145 l_0_10_44)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26137 (* ?x26136 l_0_10_33)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26128 (* ?x26127 l_0_10_32)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x26111 (* ?x26110 l_0_10_3)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x26108 (* ?x26107 l_0_10_2)))
 (let ((?x26115 (- (+ (+ (- _a_8_ (* (* 2.0 l_0_10_1) l_0_10_11)) ?x26108) ?x26111) (* (* 2.0 l_0_10_191) l_0_10_200))))
 (let ((?x26121 (- (- ?x26115 (* (* 2.0 l_0_10_192) l_0_10_201)) (* (* 2.0 l_0_10_212) l_0_10_221))))
 (let ((?x26126 (+ (- ?x26121 (* (* 2.0 l_0_10_213) l_0_10_222)) (* (* 2.0 l_0_10_22) l_0_10_32))))
 (let ((?x26135 (- (- (- ?x26126 ?x26128) (* (* 2.0 l_0_10_233) l_0_10_242)) (* (* 2.0 l_0_10_234) l_0_10_243))))
 (let ((?x26144 (- (- (- ?x26135 ?x26137) (* (* 2.0 l_0_10_254) l_0_10_263)) (* (* 2.0 l_0_10_255) l_0_10_264))))
 (= (+ (+ (- (- (- (+ ?x26144 ?x26146) ?x26149) ?x26152) ?x26155) ?x26158) ?x26161) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26155 (* ?x26154 l_0_10_65)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26146 (* ?x26145 l_0_10_44)))
 (let ((?x12782 (* l_0_10_22 l_0_10_22)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26228 (* ?x26227 l_0_10_23)))
 (let ((?x25977 (* l_0_10_1 l_0_10_1)))
 (let ((?x26223 (- (- (+ _a_9_ (* (* 12.0 l_0_10_1) l_0_10_2)) ?x25977) (* (* 2.0 l_0_10_190) l_0_10_191))))
 (let ((?x26233 (- (+ (- (- ?x26223 (* (* 2.0 l_0_10_211) l_0_10_212)) ?x26228) ?x12782) (* (* 2.0 l_0_10_232) l_0_10_233))))
 (= (+ (- (- ?x26233 (* (* 2.0 l_0_10_253) l_0_10_254)) ?x26146) ?x26155) 0.0))))))))))))
(assert
 (let ((?x25994 (* l_0_10_64 l_0_10_64)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26266 (* ?x26154 l_0_10_74)))
 (let ((?x12852 (* l_0_10_43 l_0_10_43)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26263 (* ?x26145 l_0_10_53)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26257 (* ?x26227 l_0_10_32)))
 (let ((?x26254 (- (+ _a_10_ (* (* 12.0 l_0_10_1) l_0_10_11)) (* (* 2.0 l_0_10_190) l_0_10_200))))
 (let ((?x26260 (- (- (- ?x26254 (* (* 2.0 l_0_10_211) l_0_10_221)) ?x26257) (* (* 2.0 l_0_10_232) l_0_10_242))))
 (let ((?x26267 (+ (+ (- (- ?x26260 (* (* 2.0 l_0_10_253) l_0_10_263)) ?x26263) ?x12852) ?x26266)))
 (= (- ?x26267 ?x25994) 0.0)))))))))))))
(assert
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26266 (* ?x26154 l_0_10_74)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26263 (* ?x26145 l_0_10_53)))
 (let ((?x26354 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x26351 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x26348 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x26345 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x26342 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x26339 (* l_0_10_267 l_0_10_267)))
 (let ((?x26337 (* l_0_10_266 l_0_10_266)))
 (let ((?x26335 (* l_0_10_265 l_0_10_265)))
 (let ((?x26333 (* l_0_10_264 l_0_10_264)))
 (let ((?x26331 (* l_0_10_263 l_0_10_263)))
 (let ((?x26329 (* l_0_10_246 l_0_10_246)))
 (let ((?x26327 (* l_0_10_245 l_0_10_245)))
 (let ((?x26325 (* l_0_10_244 l_0_10_244)))
 (let ((?x26323 (* l_0_10_243 l_0_10_243)))
 (let ((?x26321 (* l_0_10_242 l_0_10_242)))
 (let ((?x26319 (* l_0_10_225 l_0_10_225)))
 (let ((?x26317 (* l_0_10_224 l_0_10_224)))
 (let ((?x26315 (* l_0_10_223 l_0_10_223)))
 (let ((?x26313 (* l_0_10_222 l_0_10_222)))
 (let ((?x26311 (* l_0_10_221 l_0_10_221)))
 (let ((?x26309 (* l_0_10_204 l_0_10_204)))
 (let ((?x26307 (* l_0_10_203 l_0_10_203)))
 (let ((?x26305 (* l_0_10_202 l_0_10_202)))
 (let ((?x26303 (* l_0_10_201 l_0_10_201)))
 (let ((?x26301 (* l_0_10_200 l_0_10_200)))
 (let ((?x26298 (* l_0_10_15 l_0_10_15)))
 (let ((?x26299 (* 6.0 ?x26298)))
 (let ((?x26295 (* l_0_10_14 l_0_10_14)))
 (let ((?x26296 (* 6.0 ?x26295)))
 (let ((?x26292 (* l_0_10_13 l_0_10_13)))
 (let ((?x26293 (* 6.0 ?x26292)))
 (let ((?x26289 (* l_0_10_12 l_0_10_12)))
 (let ((?x26290 (* 6.0 ?x26289)))
 (let ((?x26297 (+ (+ (+ (+ _a_11_ (* 6.0 (* l_0_10_11 l_0_10_11))) ?x26290) ?x26293) ?x26296)))
 (let ((?x26312 (- (- (- (- (- (- (+ ?x26297 ?x26299) ?x26301) ?x26303) ?x26305) ?x26307) ?x26309) ?x26311)))
 (let ((?x26326 (- (- (- (- (- (- (- ?x26312 ?x26313) ?x26315) ?x26317) ?x26319) ?x26321) ?x26323) ?x26325)))
 (let ((?x26340 (- (- (- (- (- (- (- ?x26326 ?x26327) ?x26329) ?x26331) ?x26333) ?x26335) ?x26337) ?x26339)))
 (let ((?x26359 (- (+ (- (- (- (- (- ?x26340 ?x26342) ?x26345) ?x26348) ?x26351) ?x26354) ?x26263) (* (* 1.0 l_0_10_53) l_0_10_53))))
 (let ((?x26365 (- (- ?x26359 (* (* 1.0 l_0_10_54) l_0_10_54)) (* (* 1.0 l_0_10_55) l_0_10_55))))
 (let ((?x26371 (- (- ?x26365 (* (* 1.0 l_0_10_56) l_0_10_56)) (* (* 1.0 l_0_10_57) l_0_10_57))))
 (let ((?x26378 (+ (+ (- ?x26371 ?x26266) (* 1.0 (* l_0_10_74 l_0_10_74))) (* 1.0 (* l_0_10_75 l_0_10_75)))))
 (let ((?x26384 (+ (+ ?x26378 (* 1.0 (* l_0_10_76 l_0_10_76))) (* 1.0 (* l_0_10_77 l_0_10_77)))))
 (= (+ ?x26384 (* 1.0 (* l_0_10_78 l_0_10_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25994 (* l_0_10_64 l_0_10_64)))
 (let ((?x26542 (* 3.0 ?x25994)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x26540 (* ?x26539 l_0_10_79)))
 (let ((?x26519 (* (* 3.0 l_0_10_43) l_0_10_43)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x26516 (* ?x26515 l_0_10_58)))
 (let ((?x26513 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x26510 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x26507 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x26504 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x26501 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x26498 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x26495 (* l_0_10_273 l_0_10_273)))
 (let ((?x26493 (* l_0_10_272 l_0_10_272)))
 (let ((?x26491 (* l_0_10_271 l_0_10_271)))
 (let ((?x26489 (* l_0_10_270 l_0_10_270)))
 (let ((?x26487 (* l_0_10_269 l_0_10_269)))
 (let ((?x26485 (* l_0_10_268 l_0_10_268)))
 (let ((?x26483 (* l_0_10_252 l_0_10_252)))
 (let ((?x26481 (* l_0_10_251 l_0_10_251)))
 (let ((?x26479 (* l_0_10_250 l_0_10_250)))
 (let ((?x26477 (* l_0_10_249 l_0_10_249)))
 (let ((?x26475 (* l_0_10_248 l_0_10_248)))
 (let ((?x26473 (* l_0_10_247 l_0_10_247)))
 (let ((?x26471 (* l_0_10_231 l_0_10_231)))
 (let ((?x26469 (* l_0_10_230 l_0_10_230)))
 (let ((?x26467 (* l_0_10_229 l_0_10_229)))
 (let ((?x26465 (* l_0_10_228 l_0_10_228)))
 (let ((?x26463 (* l_0_10_227 l_0_10_227)))
 (let ((?x26461 (* l_0_10_226 l_0_10_226)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26459 (* ?x26227 l_0_10_37)))
 (let ((?x26457 (* l_0_10_210 l_0_10_210)))
 (let ((?x26454 (* l_0_10_21 l_0_10_21)))
 (let ((?x26455 (* 6.0 ?x26454)))
 (let ((?x26452 (* l_0_10_209 l_0_10_209)))
 (let ((?x26450 (* l_0_10_208 l_0_10_208)))
 (let ((?x26448 (* l_0_10_207 l_0_10_207)))
 (let ((?x26446 (* l_0_10_206 l_0_10_206)))
 (let ((?x26444 (* l_0_10_205 l_0_10_205)))
 (let ((?x26441 (* l_0_10_20 l_0_10_20)))
 (let ((?x26442 (* 6.0 ?x26441)))
 (let ((?x26438 (* l_0_10_19 l_0_10_19)))
 (let ((?x26439 (* 6.0 ?x26438)))
 (let ((?x26435 (* l_0_10_18 l_0_10_18)))
 (let ((?x26436 (* 6.0 ?x26435)))
 (let ((?x26432 (* l_0_10_17 l_0_10_17)))
 (let ((?x26433 (* 6.0 ?x26432)))
 (let ((?x26429 (* l_0_10_16 l_0_10_16)))
 (let ((?x26430 (* 6.0 ?x26429)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x26427 (* ?x26426 l_0_10_142)))
 (let ((?x26217 (* 12.0 l_0_10_1)))
 (let ((?x13319 (* ?x26217 l_0_10_16)))
 (let ((?x26445 (- (+ (+ (+ (+ (+ (+ ?x13319 ?x26427) ?x26430) ?x26433) ?x26436) ?x26439) ?x26442) ?x26444)))
 (let ((?x26460 (- (- (+ (- (- (- (- ?x26445 ?x26446) ?x26448) ?x26450) ?x26452) ?x26455) ?x26457) ?x26459)))
 (let ((?x26474 (- (- (- (- (- (- (- ?x26460 ?x26461) ?x26463) ?x26465) ?x26467) ?x26469) ?x26471) ?x26473)))
 (let ((?x26488 (- (- (- (- (- (- (- ?x26474 ?x26475) ?x26477) ?x26479) ?x26481) ?x26483) ?x26485) ?x26487)))
 (let ((?x26505 (- (- (- (- (- (- (- ?x26488 ?x26489) ?x26491) ?x26493) ?x26495) ?x26498) ?x26501) ?x26504)))
 (let ((?x26523 (- (- (- (- (- (- ?x26505 ?x26507) ?x26510) ?x26513) ?x26516) ?x26519) (* (* 1.0 l_0_10_58) l_0_10_58))))
 (let ((?x26529 (- (- ?x26523 (* (* 1.0 l_0_10_59) l_0_10_59)) (* (* 1.0 l_0_10_60) l_0_10_60))))
 (let ((?x26535 (- (- ?x26529 (* (* 1.0 l_0_10_61) l_0_10_61)) (* (* 1.0 l_0_10_62) l_0_10_62))))
 (let ((?x26546 (+ (+ (+ (- ?x26535 (* (* 1.0 l_0_10_63) l_0_10_63)) ?x26540) ?x26542) (* 1.0 (* l_0_10_79 l_0_10_79)))))
 (let ((?x26552 (+ (+ ?x26546 (* 1.0 (* l_0_10_80 l_0_10_80))) (* 1.0 (* l_0_10_81 l_0_10_81)))))
 (let ((?x26558 (+ (+ ?x26552 (* 1.0 (* l_0_10_82 l_0_10_82))) (* 1.0 (* l_0_10_83 l_0_10_83)))))
 (= (- (+ ?x26558 (* 1.0 (* l_0_10_84 l_0_10_84))) 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25994 (* l_0_10_64 l_0_10_64)))
 (let ((?x26542 (* 3.0 ?x25994)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26678 (* ?x26154 l_0_10_79)))
 (let ((?x26519 (* (* 3.0 l_0_10_43) l_0_10_43)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26675 (* ?x26145 l_0_10_58)))
 (let ((?x25985 (* (* 6.0 l_0_10_22) l_0_10_22)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26459 (* ?x26227 l_0_10_37)))
 (let ((?x26663 (* l_0_10_127 l_0_10_127)))
 (let ((?x25977 (* l_0_10_1 l_0_10_1)))
 (let ((?x25978 (* 6.0 ?x25977)))
 (let ((?x26217 (* 12.0 l_0_10_1)))
 (let ((?x13319 (* ?x26217 l_0_10_16)))
 (let ((?x26668 (- (- (+ (+ ?x13319 ?x25978) ?x26663) (* (* 2.0 l_0_10_190) l_0_10_205)) (* (* 2.0 l_0_10_211) l_0_10_226))))
 (let ((?x26674 (- (- (- (- ?x26668 ?x26459) ?x25985) (* (* 2.0 l_0_10_232) l_0_10_247)) (* (* 2.0 l_0_10_253) l_0_10_268))))
 (= (- (+ (+ (- (- ?x26674 ?x26675) ?x26519) ?x26678) ?x26542) 9.0) 0.0)))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26750 (* ?x26160 l_0_10_68)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26748 (* ?x26157 l_0_10_67)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26746 (* ?x26151 l_0_10_47)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26744 (* ?x26148 l_0_10_46)))
 (let ((?x26741 (* 12.0 l_0_10_3)))
 (let ((?x26742 (* ?x26741 l_0_10_5)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26735 (* ?x26136 l_0_10_26)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26729 (* ?x26127 l_0_10_25)))
 (let ((?x26720 (* 12.0 l_0_10_2)))
 (let ((?x26721 (* ?x26720 l_0_10_4)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x26714 (* ?x26426 l_0_10_128)))
 (let ((?x26717 (- (- (* (* (- 2.0) l_0_10_1) l_0_10_4) ?x26714) (* (* 2.0 l_0_10_191) l_0_10_193))))
 (let ((?x26724 (- (+ (- ?x26717 (* (* 2.0 l_0_10_192) l_0_10_194)) ?x26721) (* (* 2.0 l_0_10_212) l_0_10_214))))
 (let ((?x26728 (+ (- ?x26724 (* (* 2.0 l_0_10_213) l_0_10_215)) (* (* 2.0 l_0_10_22) l_0_10_25))))
 (let ((?x26734 (- (- (- ?x26728 ?x26729) (* (* 2.0 l_0_10_233) l_0_10_235)) (* (* 2.0 l_0_10_234) l_0_10_236))))
 (let ((?x26740 (- (- (- ?x26734 ?x26735) (* (* 2.0 l_0_10_254) l_0_10_256)) (* (* 2.0 l_0_10_255) l_0_10_257))))
 (= (+ (+ (- (- (+ ?x26740 ?x26742) ?x26744) ?x26746) ?x26748) ?x26750) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x26841 (* ?x26840 l_0_10_86)))
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26838 (* ?x26160 l_0_10_71)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26836 (* ?x26157 l_0_10_70)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26834 (* ?x26151 l_0_10_50)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26832 (* ?x26148 l_0_10_49)))
 (let ((?x26741 (* 12.0 l_0_10_3)))
 (let ((?x26830 (* ?x26741 l_0_10_8)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26824 (* ?x26136 l_0_10_29)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26818 (* ?x26127 l_0_10_28)))
 (let ((?x26720 (* 12.0 l_0_10_2)))
 (let ((?x26810 (* ?x26720 l_0_10_7)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x26804 (* ?x26803 l_0_10_170)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x26801 (* ?x26800 l_0_10_149)))
 (let ((?x26799 (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) (* (* 2.0 l_0_10_106) l_0_10_107))))
 (let ((?x26809 (- (- (- (+ ?x26799 ?x26801) ?x26804) (* (* 2.0 l_0_10_191) l_0_10_196)) (* (* 2.0 l_0_10_192) l_0_10_197))))
 (let ((?x26815 (- (- (+ ?x26809 ?x26810) (* (* 2.0 l_0_10_212) l_0_10_217)) (* (* 2.0 l_0_10_213) l_0_10_218))))
 (let ((?x26821 (- (- (+ ?x26815 (* (* 2.0 l_0_10_22) l_0_10_28)) ?x26818) (* (* 2.0 l_0_10_233) l_0_10_238))))
 (let ((?x26827 (- (- (- ?x26821 (* (* 2.0 l_0_10_234) l_0_10_239)) ?x26824) (* (* 2.0 l_0_10_254) l_0_10_259))))
 (let ((?x26835 (- (- (+ (- ?x26827 (* (* 2.0 l_0_10_255) l_0_10_260)) ?x26830) ?x26832) ?x26834)))
 (= (- (+ (+ ?x26835 ?x26836) ?x26838) ?x26841) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26976 (* ?x26160 l_0_10_80)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26974 (* ?x26157 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x26972 (* ?x26539 l_0_10_65)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26970 (* ?x26151 l_0_10_59)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26968 (* ?x26148 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x26966 (* ?x26515 l_0_10_44)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26960 (* ?x26136 l_0_10_38)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26954 (* ?x26127 l_0_10_37)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26228 (* ?x26227 l_0_10_23)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x26941 (* ?x26940 l_0_10_3)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x26938 (* ?x26937 l_0_10_2)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x26714 (* ?x26426 l_0_10_128)))
 (let ((?x26217 (* 12.0 l_0_10_1)))
 (let ((?x26218 (* ?x26217 l_0_10_2)))
 (let ((?x26942 (+ (+ (+ (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x26218) ?x26714) ?x26938) ?x26941)))
 (let ((?x26946 (- (- ?x26942 (* (* 2.0 l_0_10_191) l_0_10_205)) (* (* 2.0 l_0_10_192) l_0_10_206))))
 (let ((?x26950 (- (- ?x26946 (* (* 2.0 l_0_10_212) l_0_10_226)) (* (* 2.0 l_0_10_213) l_0_10_227))))
 (let ((?x26957 (- (- (+ (- ?x26950 ?x26228) (* (* 2.0 l_0_10_22) l_0_10_37)) ?x26954) (* (* 2.0 l_0_10_233) l_0_10_247))))
 (let ((?x26963 (- (- (- ?x26957 (* (* 2.0 l_0_10_234) l_0_10_248)) ?x26960) (* (* 2.0 l_0_10_254) l_0_10_268))))
 (let ((?x26971 (- (- (- (- ?x26963 (* (* 2.0 l_0_10_255) l_0_10_269)) ?x26966) ?x26968) ?x26970)))
 (= (+ (+ (+ ?x26971 ?x26972) ?x26974) ?x26976) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26050 (* l_0_10_3 l_0_10_3)))
 (let ((?x26091 (* l_0_10_24 l_0_10_24)))
 (let ((?x27048 (- (+ (+ (* (- l_0_10_2) l_0_10_2) (* l_0_10_23 l_0_10_23)) ?x26091) ?x26050)))
 (= ?x27048 0.0)))))
(assert
 (let ((?x27066 (- (- (* (- l_0_10_128) l_0_10_128) (* l_0_10_129 l_0_10_129)) (* (* 2.0 l_0_10_2) l_0_10_4))))
 (let ((?x27072 (+ (+ ?x27066 (* (* 2.0 l_0_10_23) l_0_10_25)) (* (* 2.0 l_0_10_24) l_0_10_26))))
 (= (- ?x27072 (* (* 2.0 l_0_10_3) l_0_10_5)) 0.0))))
(assert
 (let ((?x27115 (* l_0_10_87 l_0_10_87)))
 (let ((?x27113 (* l_0_10_86 l_0_10_86)))
 (let ((?x27103 (* l_0_10_171 l_0_10_171)))
 (let ((?x27101 (* l_0_10_170 l_0_10_170)))
 (let ((?x27099 (* l_0_10_150 l_0_10_150)))
 (let ((?x27097 (* l_0_10_149 l_0_10_149)))
 (let ((?x27098 (+ (+ (* l_0_10_107 l_0_10_107) (* l_0_10_108 l_0_10_108)) ?x27097)))
 (let ((?x27106 (- (- (- (+ ?x27098 ?x27099) ?x27101) ?x27103) (* (* 2.0 l_0_10_2) l_0_10_7))))
 (let ((?x27110 (+ (+ ?x27106 (* (* 2.0 l_0_10_23) l_0_10_28)) (* (* 2.0 l_0_10_24) l_0_10_29))))
 (= (- (- (- ?x27110 (* (* 2.0 l_0_10_3) l_0_10_8)) ?x27113) ?x27115) 0.0)))))))))))
(assert
 (let ((?x26062 (* l_0_10_66 l_0_10_66)))
 (let ((?x26059 (* l_0_10_65 l_0_10_65)))
 (let ((?x12863 (* l_0_10_45 l_0_10_45)))
 (let ((?x26098 (* l_0_10_44 l_0_10_44)))
 (let ((?x27141 (- (* (* (- 2.0) l_0_10_11) l_0_10_2) (* (* 2.0 l_0_10_12) l_0_10_3))))
 (let ((?x27145 (+ (+ ?x27141 (* (* 2.0 l_0_10_23) l_0_10_32)) (* (* 2.0 l_0_10_24) l_0_10_33))))
 (= (- (- (+ (+ ?x27145 ?x26098) ?x12863) ?x26059) ?x26062) 0.0))))))))
(assert
 (let ((?x26062 (* l_0_10_66 l_0_10_66)))
 (let ((?x27189 (* 3.0 ?x26062)))
 (let ((?x26059 (* l_0_10_65 l_0_10_65)))
 (let ((?x27187 (* 3.0 ?x26059)))
 (let ((?x27185 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (let ((?x26050 (* l_0_10_3 l_0_10_3)))
 (let ((?x26051 (* 6.0 ?x26050)))
 (let ((?x26044 (* (* 6.0 l_0_10_24) l_0_10_24)))
 (let ((?x26037 (* (* 6.0 l_0_10_23) l_0_10_23)))
 (let ((?x26026 (* l_0_10_2 l_0_10_2)))
 (let ((?x26027 (* 6.0 ?x26026)))
 (let ((?x27169 (- (+ (* l_0_10_128 l_0_10_128) (* l_0_10_129 l_0_10_129)) (* (* 2.0 l_0_10_16) l_0_10_2))))
 (let ((?x27175 (+ (+ (- ?x27169 (* (* 2.0 l_0_10_17) l_0_10_3)) ?x26027) (* (* 2.0 l_0_10_23) l_0_10_37))))
 (let ((?x27180 (+ (- (+ (- ?x27175 ?x26037) (* (* 2.0 l_0_10_24) l_0_10_38)) ?x26044) ?x26051)))
 (let ((?x27190 (+ (+ (- (- ?x27180 (* (* 3.0 l_0_10_44) l_0_10_44)) ?x27185) ?x27187) ?x27189)))
 (= ?x27190 0.0)))))))))))))))))
(assert
 (let ((?x27233 (* l_0_10_6 l_0_10_6)))
 (let ((?x27231 (* l_0_10_5 l_0_10_5)))
 (let ((?x27229 (* l_0_10_4 l_0_10_4)))
 (let ((?x27227 (* l_0_10_27 l_0_10_27)))
 (let ((?x27225 (* l_0_10_26 l_0_10_26)))
 (let ((?x27223 (* l_0_10_25 l_0_10_25)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27221 (* ?x27220 l_0_10_131)))
 (let ((?x27228 (+ (+ (+ (- (* (* (- 2.0) l_0_10_128) l_0_10_130) ?x27221) ?x27223) ?x27225) ?x27227)))
 (= (- (- (- ?x27228 ?x27229) ?x27231) ?x27233) 0.0)))))))))))
(assert
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27296 (* ?x27295 l_0_10_89)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27293 (* ?x27292 l_0_10_88)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27272 (* ?x27271 l_0_10_173)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27269 (* ?x27268 l_0_10_172)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27266 (* ?x27265 l_0_10_152)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27263 (* ?x27262 l_0_10_151)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27260 (* ?x27220 l_0_10_134)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27258 (* ?x27257 l_0_10_133)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27255 (* ?x27254 l_0_10_110)))
 (let ((?x27264 (+ (- (- (+ (* (* 2.0 l_0_10_107) l_0_10_109) ?x27255) ?x27258) ?x27260) ?x27263)))
 (let ((?x27276 (+ (- (- (+ ?x27264 ?x27266) ?x27269) ?x27272) (* (* 2.0 l_0_10_25) l_0_10_28))))
 (let ((?x27282 (+ (+ ?x27276 (* (* 2.0 l_0_10_26) l_0_10_29)) (* (* 2.0 l_0_10_27) l_0_10_30))))
 (let ((?x27288 (- (- ?x27282 (* (* 2.0 l_0_10_4) l_0_10_7)) (* (* 2.0 l_0_10_5) l_0_10_8))))
 (= (- (- (- ?x27288 (* (* 2.0 l_0_10_6) l_0_10_9)) ?x27293) ?x27296) 0.0))))))))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26750 (* ?x26160 l_0_10_68)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26748 (* ?x26157 l_0_10_67)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26746 (* ?x26151 l_0_10_47)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26744 (* ?x26148 l_0_10_46)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27358 (* ?x27220 l_0_10_138)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27356 (* ?x27257 l_0_10_137)))
 (let ((?x27355 (- (* (* (- 2.0) l_0_10_11) l_0_10_4) (* (* 2.0 l_0_10_12) l_0_10_5))))
 (let ((?x27364 (+ (- (- (- ?x27355 ?x27356) ?x27358) (* (* 2.0 l_0_10_13) l_0_10_6)) (* (* 2.0 l_0_10_25) l_0_10_32))))
 (let ((?x27368 (+ (+ ?x27364 (* (* 2.0 l_0_10_26) l_0_10_33)) (* (* 2.0 l_0_10_27) l_0_10_34))))
 (= (- (- (+ (+ ?x27368 ?x26744) ?x26746) ?x26748) ?x26750) 0.0)))))))))))))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27437 (* ?x27436 l_0_10_68)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27434 (* ?x27433 l_0_10_67)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27431 (* ?x27430 l_0_10_47)))
 (let ((?x26741 (* 12.0 l_0_10_3)))
 (let ((?x26742 (* ?x26741 l_0_10_5)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26735 (* ?x26136 l_0_10_26)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26729 (* ?x26127 l_0_10_25)))
 (let ((?x26720 (* 12.0 l_0_10_2)))
 (let ((?x26721 (* ?x26720 l_0_10_4)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27408 (* ?x27220 l_0_10_143)))
 (let ((?x27221 (* ?x27220 l_0_10_131)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27405 (* ?x27257 l_0_10_142)))
 (let ((?x27411 (- (- (+ (- (* ?x27257 l_0_10_130) ?x27405) ?x27221) ?x27408) (* (* 2.0 l_0_10_16) l_0_10_4))))
 (let ((?x27416 (- (- ?x27411 (* (* 2.0 l_0_10_17) l_0_10_5)) (* (* 2.0 l_0_10_18) l_0_10_6))))
 (let ((?x27421 (+ (- (- (+ ?x27416 ?x26721) ?x26729) ?x26735) (* (* 2.0 l_0_10_25) l_0_10_37))))
 (let ((?x27425 (+ (+ ?x27421 (* (* 2.0 l_0_10_26) l_0_10_38)) (* (* 2.0 l_0_10_27) l_0_10_39))))
 (let ((?x27435 (+ (- (- (+ ?x27425 ?x26742) (* (* 6.0 l_0_10_44) l_0_10_46)) ?x27431) ?x27434)))
 (= (+ ?x27435 ?x27437) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27506 (* l_0_10_9 l_0_10_9)))
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27504 (* ?x27295 l_0_10_92)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27502 (* ?x27292 l_0_10_91)))
 (let ((?x27500 (* l_0_10_8 l_0_10_8)))
 (let ((?x27498 (* l_0_10_7 l_0_10_7)))
 (let ((?x27496 (* l_0_10_31 l_0_10_31)))
 (let ((?x27494 (* l_0_10_30 l_0_10_30)))
 (let ((?x27492 (* l_0_10_29 l_0_10_29)))
 (let ((?x27490 (* l_0_10_28 l_0_10_28)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27488 (* ?x27271 l_0_10_176)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27486 (* ?x27268 l_0_10_175)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27484 (* ?x27265 l_0_10_155)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27482 (* ?x27262 l_0_10_154)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27480 (* ?x27254 l_0_10_113)))
 (let ((?x27479 (+ (* (- l_0_10_10) l_0_10_10) (* (* 2.0 l_0_10_107) l_0_10_112))))
 (let ((?x27493 (+ (+ (- (- (+ (+ (+ ?x27479 ?x27480) ?x27482) ?x27484) ?x27486) ?x27488) ?x27490) ?x27492)))
 (let ((?x27507 (- (- (- (- (- (+ (+ ?x27493 ?x27494) ?x27496) ?x27498) ?x27500) ?x27502) ?x27504) ?x27506)))
 (= ?x27507 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27573 (* ?x27295 l_0_10_96)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27571 (* ?x27292 l_0_10_95)))
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26838 (* ?x26160 l_0_10_71)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26836 (* ?x26157 l_0_10_70)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26834 (* ?x26151 l_0_10_50)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26832 (* ?x26148 l_0_10_49)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27553 (* ?x27271 l_0_10_180)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27551 (* ?x27268 l_0_10_179)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27549 (* ?x27265 l_0_10_159)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27547 (* ?x27262 l_0_10_158)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27538 (* ?x27254 l_0_10_117)))
 (let ((?x27537 (+ (* (* (- 2.0) l_0_10_10) l_0_10_14) (* (* 2.0 l_0_10_107) l_0_10_116))))
 (let ((?x27544 (- (- (+ ?x27537 ?x27538) (* (* 2.0 l_0_10_11) l_0_10_7)) (* (* 2.0 l_0_10_12) l_0_10_8))))
 (let ((?x27552 (- (+ (+ (- ?x27544 (* (* 2.0 l_0_10_13) l_0_10_9)) ?x27547) ?x27549) ?x27551)))
 (let ((?x27560 (+ (+ (- ?x27552 ?x27553) (* (* 2.0 l_0_10_28) l_0_10_32)) (* (* 2.0 l_0_10_29) l_0_10_33))))
 (let ((?x27566 (+ (+ ?x27560 (* (* 2.0 l_0_10_30) l_0_10_34)) (* (* 2.0 l_0_10_31) l_0_10_35))))
 (= (- (- (- (- (+ (+ ?x27566 ?x26832) ?x26834) ?x26836) ?x26838) ?x27571) ?x27573) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27682 (* ?x27436 l_0_10_71)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27680 (* ?x27433 l_0_10_70)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27678 (* ?x27430 l_0_10_50)))
 (let ((?x26741 (* 12.0 l_0_10_3)))
 (let ((?x26830 (* ?x26741 l_0_10_8)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26824 (* ?x26136 l_0_10_29)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26818 (* ?x26127 l_0_10_28)))
 (let ((?x26720 (* 12.0 l_0_10_2)))
 (let ((?x26810 (* ?x26720 l_0_10_7)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27660 (* ?x27271 l_0_10_185)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27658 (* ?x27268 l_0_10_184)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27652 (* ?x27265 l_0_10_164)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27650 (* ?x27262 l_0_10_163)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27260 (* ?x27220 l_0_10_134)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27258 (* ?x27257 l_0_10_133)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27646 (* ?x27254 l_0_10_122)))
 (let ((?x27252 (* 2.0 l_0_10_107)))
 (let ((?x27644 (* ?x27252 l_0_10_121)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x27642 (* ?x27641 l_0_10_87)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x27639 (* ?x27638 l_0_10_86)))
 (let ((?x27647 (+ (+ (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x27639) ?x27642) ?x27644) ?x27646)))
 (let ((?x27655 (- (+ (+ (+ (+ ?x27647 ?x27258) ?x27260) ?x27650) ?x27652) (* (* 2.0 l_0_10_16) l_0_10_7))))
 (let ((?x27663 (- (- (- (- ?x27655 (* (* 2.0 l_0_10_17) l_0_10_8)) ?x27658) ?x27660) (* (* 2.0 l_0_10_18) l_0_10_9))))
 (let ((?x27668 (+ (- (- (+ ?x27663 ?x26810) ?x26818) ?x26824) (* (* 2.0 l_0_10_28) l_0_10_37))))
 (let ((?x27673 (+ (+ (+ ?x27668 (* (* 2.0 l_0_10_29) l_0_10_38)) ?x26830) (* (* 2.0 l_0_10_30) l_0_10_39))))
 (let ((?x27677 (- (+ ?x27673 (* (* 2.0 l_0_10_31) l_0_10_40)) (* (* 6.0 l_0_10_44) l_0_10_49))))
 (= (+ (+ (- ?x27677 ?x27678) ?x27680) ?x27682) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26161 (* ?x26160 l_0_10_75)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26158 (* ?x26157 l_0_10_74)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26152 (* ?x26151 l_0_10_54)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26149 (* ?x26148 l_0_10_53)))
 (let ((?x13239 (* l_0_10_36 l_0_10_36)))
 (let ((?x13234 (* l_0_10_35 l_0_10_35)))
 (let ((?x13231 (* l_0_10_34 l_0_10_34)))
 (let ((?x13227 (* l_0_10_33 l_0_10_33)))
 (let ((?x13225 (* l_0_10_32 l_0_10_32)))
 (let ((?x26298 (* l_0_10_15 l_0_10_15)))
 (let ((?x26295 (* l_0_10_14 l_0_10_14)))
 (let ((?x26292 (* l_0_10_13 l_0_10_13)))
 (let ((?x27732 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x26292)))
 (let ((?x27739 (+ (+ (+ (+ (+ (- (- ?x27732 ?x26295) ?x26298) ?x13225) ?x13227) ?x13231) ?x13234) ?x13239)))
 (= (- (- (+ (+ ?x27739 ?x26149) ?x26152) ?x26158) ?x26161) 0.0))))))))))))))))))))
(assert
 (let ((?x26160 (* 2.0 l_0_10_66)))
 (let ((?x26976 (* ?x26160 l_0_10_80)))
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27798 (* ?x27436 l_0_10_75)))
 (let ((?x26157 (* 2.0 l_0_10_65)))
 (let ((?x26974 (* ?x26157 l_0_10_79)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27795 (* ?x27433 l_0_10_74)))
 (let ((?x26151 (* 2.0 l_0_10_45)))
 (let ((?x26970 (* ?x26151 l_0_10_59)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27792 (* ?x27430 l_0_10_54)))
 (let ((?x26148 (* 2.0 l_0_10_44)))
 (let ((?x26968 (* ?x26148 l_0_10_58)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26137 (* ?x26136 l_0_10_33)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26128 (* ?x26127 l_0_10_32)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27358 (* ?x27220 l_0_10_138)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27356 (* ?x27257 l_0_10_137)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x26111 (* ?x26110 l_0_10_3)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x26108 (* ?x26107 l_0_10_2)))
 (let ((?x27760 (- (+ (* (* (- 2.0) l_0_10_11) l_0_10_16) ?x26108) (* (* 2.0 l_0_10_12) l_0_10_17))))
 (let ((?x27765 (- (+ (+ (+ ?x27760 ?x26111) ?x27356) ?x27358) (* (* 2.0 l_0_10_13) l_0_10_18))))
 (let ((?x27771 (- (- ?x27765 (* (* 2.0 l_0_10_14) l_0_10_19)) (* (* 2.0 l_0_10_15) l_0_10_20))))
 (let ((?x27779 (+ (+ (- (- ?x27771 ?x26128) ?x26137) (* (* 2.0 l_0_10_32) l_0_10_37)) (* (* 2.0 l_0_10_33) l_0_10_38))))
 (let ((?x27785 (+ (+ ?x27779 (* (* 2.0 l_0_10_34) l_0_10_39)) (* (* 2.0 l_0_10_35) l_0_10_40))))
 (let ((?x27790 (- (+ ?x27785 (* (* 2.0 l_0_10_36) l_0_10_41)) (* (* 6.0 l_0_10_44) l_0_10_53))))
 (let ((?x27800 (- (+ (- (+ (+ (- (+ ?x27790 ?x26968) ?x27792) ?x26970) ?x27795) ?x26974) ?x27798) ?x26976)))
 (= ?x27800 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27879 (* ?x27436 l_0_10_80)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27877 (* ?x27433 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x26972 (* ?x26539 l_0_10_65)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27874 (* ?x27430 l_0_10_59)))
 (let ((?x27427 (* 6.0 l_0_10_44)))
 (let ((?x27872 (* ?x27427 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x26966 (* ?x26515 l_0_10_44)))
 (let ((?x12283 (* l_0_10_42 l_0_10_42)))
 (let ((?x12278 (* l_0_10_41 l_0_10_41)))
 (let ((?x13432 (* l_0_10_40 l_0_10_40)))
 (let ((?x26616 (* l_0_10_39 l_0_10_39)))
 (let ((?x13423 (* l_0_10_38 l_0_10_38)))
 (let ((?x13419 (* l_0_10_37 l_0_10_37)))
 (let ((?x26136 (* 12.0 l_0_10_24)))
 (let ((?x26960 (* ?x26136 l_0_10_38)))
 (let ((?x26127 (* 12.0 l_0_10_23)))
 (let ((?x26954 (* ?x26127 l_0_10_37)))
 (let ((?x26454 (* l_0_10_21 l_0_10_21)))
 (let ((?x26441 (* l_0_10_20 l_0_10_20)))
 (let ((?x26438 (* l_0_10_19 l_0_10_19)))
 (let ((?x26435 (* l_0_10_18 l_0_10_18)))
 (let ((?x26432 (* l_0_10_17 l_0_10_17)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x26941 (* ?x26940 l_0_10_3)))
 (let ((?x26429 (* l_0_10_16 l_0_10_16)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x26938 (* ?x26937 l_0_10_2)))
 (let ((?x27220 (* 2.0 l_0_10_129)))
 (let ((?x27408 (* ?x27220 l_0_10_143)))
 (let ((?x27257 (* 2.0 l_0_10_128)))
 (let ((?x27405 (* ?x27257 l_0_10_142)))
 (let ((?x27860 (- (- (- (+ (- (+ (+ ?x27405 ?x27408) ?x26938) ?x26429) ?x26941) ?x26432) ?x26435) ?x26438)))
 (let ((?x27867 (+ (+ (+ (- (- (- (- ?x27860 ?x26441) ?x26454) ?x26954) ?x26960) ?x13419) ?x13423) ?x26616)))
 (let ((?x27876 (+ (- (- (- (+ (+ (+ ?x27867 ?x13432) ?x12278) ?x12283) ?x26966) ?x27872) ?x27874) ?x26972)))
 (= (+ (+ ?x27876 ?x27877) ?x27879) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x27972 (* ?x27971 l_0_10_81)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x27969 (* ?x27968 l_0_10_80)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x27966 (* ?x27965 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x27963 (* ?x26539 l_0_10_67)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x27961 (* ?x27960 l_0_10_60)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x27958 (* ?x27957 l_0_10_59)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x27955 (* ?x27954 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x27952 (* ?x26515 l_0_10_46)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x27950 (* ?x27949 l_0_10_39)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x27947 (* ?x27946 l_0_10_38)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x27935 (* ?x27934 l_0_10_37)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x27923 (* ?x26227 l_0_10_25)))
 (let ((?x27902 (* 12.0 l_0_10_18)))
 (let ((?x27903 (* ?x27902 l_0_10_6)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x27900 (* ?x26940 l_0_10_5)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x27898 (* ?x26937 l_0_10_4)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x26427 (* ?x26426 l_0_10_142)))
 (let ((?x27897 (- (+ (* (* 12.0 l_0_10_1) l_0_10_4) (* ?x26426 l_0_10_130)) ?x26427)))
 (let ((?x27907 (- (+ (+ (+ ?x27897 ?x27898) ?x27900) ?x27903) (* (* 2.0 l_0_10_193) l_0_10_205))))
 (let ((?x27913 (- (- ?x27907 (* (* 2.0 l_0_10_194) l_0_10_206)) (* (* 2.0 l_0_10_195) l_0_10_207))))
 (let ((?x27919 (- (- ?x27913 (* (* 2.0 l_0_10_214) l_0_10_226)) (* (* 2.0 l_0_10_215) l_0_10_227))))
 (let ((?x27927 (- (- (- ?x27919 (* (* 2.0 l_0_10_216) l_0_10_228)) ?x27923) (* (* 2.0 l_0_10_235) l_0_10_247))))
 (let ((?x27933 (- (- ?x27927 (* (* 2.0 l_0_10_236) l_0_10_248)) (* (* 2.0 l_0_10_237) l_0_10_249))))
 (let ((?x27942 (- (- (- ?x27933 ?x27935) (* (* 2.0 l_0_10_256) l_0_10_268)) (* (* 2.0 l_0_10_257) l_0_10_269))))
 (let ((?x27953 (- (- (- (- ?x27942 (* (* 2.0 l_0_10_258) l_0_10_270)) ?x27947) ?x27950) ?x27952)))
 (let ((?x27973 (+ (+ (+ (+ (- (- (- ?x27953 ?x27955) ?x27958) ?x27961) ?x27963) ?x27966) ?x27969) ?x27972)))
 (= ?x27973 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28165 (* 2.0 l_0_10_73)))
 (let ((?x28166 (* ?x28165 l_0_10_82)))
 (let ((?x28162 (* 2.0 l_0_10_72)))
 (let ((?x28163 (* ?x28162 l_0_10_81)))
 (let ((?x28159 (* 2.0 l_0_10_71)))
 (let ((?x28160 (* ?x28159 l_0_10_80)))
 (let ((?x28156 (* 2.0 l_0_10_70)))
 (let ((?x28157 (* ?x28156 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x28154 (* ?x26539 l_0_10_70)))
 (let ((?x28151 (* 2.0 l_0_10_52)))
 (let ((?x28152 (* ?x28151 l_0_10_61)))
 (let ((?x28148 (* 2.0 l_0_10_51)))
 (let ((?x28149 (* ?x28148 l_0_10_60)))
 (let ((?x28145 (* 2.0 l_0_10_50)))
 (let ((?x28146 (* ?x28145 l_0_10_59)))
 (let ((?x28142 (* 2.0 l_0_10_49)))
 (let ((?x28143 (* ?x28142 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x28140 (* ?x26515 l_0_10_49)))
 (let ((?x28137 (* 12.0 l_0_10_31)))
 (let ((?x28138 (* ?x28137 l_0_10_40)))
 (let ((?x28134 (* 12.0 l_0_10_30)))
 (let ((?x28135 (* ?x28134 l_0_10_39)))
 (let ((?x28131 (* 12.0 l_0_10_29)))
 (let ((?x28132 (* ?x28131 l_0_10_38)))
 (let ((?x28128 (* 12.0 l_0_10_28)))
 (let ((?x28129 (* ?x28128 l_0_10_37)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x28099 (* ?x26227 l_0_10_28)))
 (let ((?x27902 (* 12.0 l_0_10_18)))
 (let ((?x28076 (* ?x27902 l_0_10_9)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x28074 (* ?x26940 l_0_10_8)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x28072 (* ?x26803 l_0_10_184)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x28070 (* ?x26937 l_0_10_7)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x28068 (* ?x26800 l_0_10_163)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x28066 (* ?x26426 l_0_10_133)))
 (let ((?x10549 (* 2.0 l_0_10_106)))
 (let ((?x28064 (* ?x10549 l_0_10_121)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x28051 (* ?x27638 l_0_10_85)))
 (let ((?x28046 (* 12.0 l_0_10_10)))
 (let ((?x28048 (* ?x28046 l_0_10_19)))
 (let ((?x26217 (* 12.0 l_0_10_1)))
 (let ((?x28044 (* ?x26217 l_0_10_7)))
 (let ((?x28073 (- (+ (+ (+ (+ (- (+ ?x28044 ?x28048) ?x28051) ?x28064) ?x28066) ?x28068) ?x28070) ?x28072)))
 (let ((?x28083 (- (- (+ (+ ?x28073 ?x28074) ?x28076) (* (* 2.0 l_0_10_196) l_0_10_205)) (* (* 2.0 l_0_10_197) l_0_10_206))))
 (let ((?x28089 (- (- ?x28083 (* (* 2.0 l_0_10_198) l_0_10_207)) (* (* 2.0 l_0_10_199) l_0_10_208))))
 (let ((?x28095 (- (- ?x28089 (* (* 2.0 l_0_10_217) l_0_10_226)) (* (* 2.0 l_0_10_218) l_0_10_227))))
 (let ((?x28103 (- (- (- ?x28095 (* (* 2.0 l_0_10_219) l_0_10_228)) ?x28099) (* (* 2.0 l_0_10_220) l_0_10_229))))
 (let ((?x28109 (- (- ?x28103 (* (* 2.0 l_0_10_238) l_0_10_247)) (* (* 2.0 l_0_10_239) l_0_10_248))))
 (let ((?x28115 (- (- ?x28109 (* (* 2.0 l_0_10_240) l_0_10_249)) (* (* 2.0 l_0_10_241) l_0_10_250))))
 (let ((?x28121 (- (- ?x28115 (* (* 2.0 l_0_10_259) l_0_10_268)) (* (* 2.0 l_0_10_260) l_0_10_269))))
 (let ((?x28127 (- (- ?x28121 (* (* 2.0 l_0_10_261) l_0_10_270)) (* (* 2.0 l_0_10_262) l_0_10_271))))
 (let ((?x28147 (- (- (- (- (- (- (- ?x28127 ?x28129) ?x28132) ?x28135) ?x28138) ?x28140) ?x28143) ?x28146)))
 (let ((?x28167 (+ (+ (+ (+ (+ (- (- ?x28147 ?x28149) ?x28152) ?x28154) ?x28157) ?x28160) ?x28163) ?x28166)))
 (= ?x28167 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28404 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x28401 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x28398 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x28395 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x28392 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x26678 (* ?x26154 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x28388 (* ?x26539 l_0_10_74)))
 (let ((?x28386 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x28383 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x28380 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x28377 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x28374 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x26675 (* ?x26145 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x28370 (* ?x26515 l_0_10_53)))
 (let ((?x28368 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28365 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28362 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28359 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28356 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x26257 (* ?x26227 l_0_10_32)))
 (let ((?x28292 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x28289 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x28286 (* ?x28285 l_0_10_18)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x28283 (* ?x26426 l_0_10_137)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x28281 (* ?x26110 l_0_10_17)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x28279 (* ?x26107 l_0_10_16)))
 (let ((?x26217 (* 12.0 l_0_10_1)))
 (let ((?x13051 (* ?x26217 l_0_10_11)))
 (let ((?x28296 (- (+ (+ (+ (+ (+ (+ ?x13051 ?x28279) ?x28281) ?x28283) ?x28286) ?x28289) ?x28292) (* (* 2.0 l_0_10_200) l_0_10_205))))
 (let ((?x28302 (- (- ?x28296 (* (* 2.0 l_0_10_201) l_0_10_206)) (* (* 2.0 l_0_10_202) l_0_10_207))))
 (let ((?x28308 (- (- ?x28302 (* (* 2.0 l_0_10_203) l_0_10_208)) (* (* 2.0 l_0_10_204) l_0_10_209))))
 (let ((?x28315 (- (- (- ?x28308 ?x26257) (* (* 2.0 l_0_10_221) l_0_10_226)) (* (* 2.0 l_0_10_222) l_0_10_227))))
 (let ((?x28321 (- (- ?x28315 (* (* 2.0 l_0_10_223) l_0_10_228)) (* (* 2.0 l_0_10_224) l_0_10_229))))
 (let ((?x28327 (- (- ?x28321 (* (* 2.0 l_0_10_225) l_0_10_230)) (* (* 2.0 l_0_10_242) l_0_10_247))))
 (let ((?x28333 (- (- ?x28327 (* (* 2.0 l_0_10_243) l_0_10_248)) (* (* 2.0 l_0_10_244) l_0_10_249))))
 (let ((?x28339 (- (- ?x28333 (* (* 2.0 l_0_10_245) l_0_10_250)) (* (* 2.0 l_0_10_246) l_0_10_251))))
 (let ((?x28345 (- (- ?x28339 (* (* 2.0 l_0_10_263) l_0_10_268)) (* (* 2.0 l_0_10_264) l_0_10_269))))
 (let ((?x28351 (- (- ?x28345 (* (* 2.0 l_0_10_265) l_0_10_270)) (* (* 2.0 l_0_10_266) l_0_10_271))))
 (let ((?x28363 (- (- (- (- ?x28351 (* (* 2.0 l_0_10_267) l_0_10_272)) ?x28356) ?x28359) ?x28362)))
 (let ((?x28381 (- (- (- (+ (- (- (- ?x28363 ?x28365) ?x28368) ?x28370) ?x26675) ?x28374) ?x28377) ?x28380)))
 (let ((?x28399 (+ (+ (+ (- (+ (- (- ?x28381 ?x28383) ?x28386) ?x28388) ?x26678) ?x28392) ?x28395) ?x28398)))
 (= (+ (+ ?x28399 ?x28401) ?x28404) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28575 (* l_0_10_69 l_0_10_69)))
 (let ((?x28576 (* 3.0 ?x28575)))
 (let ((?x28572 (* l_0_10_68 l_0_10_68)))
 (let ((?x28573 (* 3.0 ?x28572)))
 (let ((?x28569 (* l_0_10_67 l_0_10_67)))
 (let ((?x28570 (* 3.0 ?x28569)))
 (let ((?x27233 (* l_0_10_6 l_0_10_6)))
 (let ((?x28567 (* 6.0 ?x27233)))
 (let ((?x27231 (* l_0_10_5 l_0_10_5)))
 (let ((?x28565 (* 6.0 ?x27231)))
 (let ((?x28563 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x28560 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x27229 (* l_0_10_4 l_0_10_4)))
 (let ((?x28554 (* 6.0 ?x27229)))
 (let ((?x28552 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x28549 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x28546 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x28543 (* l_0_10_132 l_0_10_132)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28541 (* ?x28540 l_0_10_144)))
 (let ((?x28538 (* l_0_10_131 l_0_10_131)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28521 (* ?x28520 l_0_10_143)))
 (let ((?x28516 (* l_0_10_130 l_0_10_130)))
 (let ((?x28542 (- (+ (- (+ (* (* (- 2.0) l_0_10_130) l_0_10_142) ?x28516) ?x28521) ?x28538) ?x28541)))
 (let ((?x28558 (- (+ (- (- (- (+ ?x28542 ?x28543) ?x28546) ?x28549) ?x28552) ?x28554) (* (* 3.0 l_0_10_46) l_0_10_46))))
 (let ((?x28577 (+ (+ (+ (+ (+ (- (- ?x28558 ?x28560) ?x28563) ?x28565) ?x28567) ?x28570) ?x28573) ?x28576)))
 (= ?x28577 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28710 (* ?x28709 l_0_10_72)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28707 (* ?x28706 l_0_10_71)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28704 (* ?x28703 l_0_10_70)))
 (let ((?x28701 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x28698 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28695 (* ?x28694 l_0_10_51)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28692 (* ?x28691 l_0_10_50)))
 (let ((?x28686 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x28683 (* ?x27949 l_0_10_30)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x28681 (* ?x27946 l_0_10_29)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x28679 (* ?x27934 l_0_10_28)))
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x28677 (* ?x28676 l_0_10_186)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x28674 (* ?x28673 l_0_10_185)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x28671 (* ?x28670 l_0_10_184)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x28668 (* ?x28667 l_0_10_165)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x28665 (* ?x28664 l_0_10_164)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x28662 (* ?x28661 l_0_10_163)))
 (let ((?x28658 (* 2.0 l_0_10_136)))
 (let ((?x28659 (* ?x28658 l_0_10_145)))
 (let ((?x28655 (* 2.0 l_0_10_135)))
 (let ((?x28656 (* ?x28655 l_0_10_144)))
 (let ((?x28652 (* 2.0 l_0_10_134)))
 (let ((?x28653 (* ?x28652 l_0_10_143)))
 (let ((?x28649 (* 2.0 l_0_10_133)))
 (let ((?x28650 (* ?x28649 l_0_10_142)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28647 (* ?x28540 l_0_10_135)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28645 (* ?x28520 l_0_10_134)))
 (let ((?x28642 (* 2.0 l_0_10_130)))
 (let ((?x28643 (* ?x28642 l_0_10_133)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x28640 (* ?x28639 l_0_10_123)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x28637 (* ?x28636 l_0_10_122)))
 (let ((?x28633 (* 2.0 l_0_10_109)))
 (let ((?x28634 (* ?x28633 l_0_10_121)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x28631 (* ?x28630 l_0_10_90)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x28628 (* ?x27641 l_0_10_89)))
 (let ((?x28638 (+ (+ (- (- (* (* (- 2.0) l_0_10_100) l_0_10_88) ?x28628) ?x28631) ?x28634) ?x28637)))
 (let ((?x28657 (- (- (- (+ (+ (+ (+ ?x28638 ?x28640) ?x28643) ?x28645) ?x28647) ?x28650) ?x28653) ?x28656)))
 (let ((?x28678 (- (- (- (+ (+ (+ (- ?x28657 ?x28659) ?x28662) ?x28665) ?x28668) ?x28671) ?x28674) ?x28677)))
 (let ((?x28690 (- (+ (- (- (- ?x28678 ?x28679) ?x28681) ?x28683) ?x28686) (* (* 6.0 l_0_10_46) l_0_10_49))))
 (let ((?x28711 (+ (+ (+ (+ (+ (- (- ?x28690 ?x28692) ?x28695) ?x28698) ?x28701) ?x28704) ?x28707) ?x28710)))
 (= ?x28711 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x27972 (* ?x27971 l_0_10_81)))
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28846 (* ?x28709 l_0_10_76)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x27969 (* ?x27968 l_0_10_80)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28843 (* ?x28706 l_0_10_75)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x27966 (* ?x27965 l_0_10_79)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28840 (* ?x28703 l_0_10_74)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x27961 (* ?x27960 l_0_10_60)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28837 (* ?x28694 l_0_10_55)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x27958 (* ?x27957 l_0_10_59)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28834 (* ?x28691 l_0_10_54)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x27955 (* ?x27954 l_0_10_58)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x28829 (* ?x27949 l_0_10_34)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x28827 (* ?x27946 l_0_10_33)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x28825 (* ?x27934 l_0_10_32)))
 (let ((?x28823 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28820 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28817 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28814 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28811 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28808 (* ?x28540 l_0_10_139)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28806 (* ?x28520 l_0_10_138)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x28783 (* ?x28285 l_0_10_6)))
 (let ((?x28781 (+ (* (* 12.0 l_0_10_11) l_0_10_4) (* (* 12.0 l_0_10_12) l_0_10_5))))
 (let ((?x28809 (+ (+ (+ (+ ?x28781 ?x28783) (* (* 2.0 l_0_10_130) l_0_10_137)) ?x28806) ?x28808)))
 (let ((?x28828 (- (- (- (- (- (- (- ?x28809 ?x28811) ?x28814) ?x28817) ?x28820) ?x28823) ?x28825) ?x28827)))
 (let ((?x28835 (- (+ (- (- ?x28828 ?x28829) (* (* 6.0 l_0_10_46) l_0_10_53)) ?x27955) ?x28834)))
 (let ((?x28845 (- (+ (- (+ (+ (- (+ ?x28835 ?x27958) ?x28837) ?x27961) ?x28840) ?x27966) ?x28843) ?x27969)))
 (= (- (+ ?x28845 ?x28846) ?x27972) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28959 (* ?x28709 l_0_10_81)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28957 (* ?x28706 l_0_10_80)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28955 (* ?x28703 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x27963 (* ?x26539 l_0_10_67)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28952 (* ?x28694 l_0_10_60)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28950 (* ?x28691 l_0_10_59)))
 (let ((?x28688 (* 6.0 l_0_10_46)))
 (let ((?x28948 (* ?x28688 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x27952 (* ?x26515 l_0_10_46)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x27950 (* ?x27949 l_0_10_39)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x27947 (* ?x27946 l_0_10_38)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x27935 (* ?x27934 l_0_10_37)))
 (let ((?x27902 (* 12.0 l_0_10_18)))
 (let ((?x27903 (* ?x27902 l_0_10_6)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x27900 (* ?x26940 l_0_10_5)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x27898 (* ?x26937 l_0_10_4)))
 (let ((?x28939 (* l_0_10_147 l_0_10_147)))
 (let ((?x28937 (* l_0_10_146 l_0_10_146)))
 (let ((?x28935 (* l_0_10_145 l_0_10_145)))
 (let ((?x28933 (* l_0_10_144 l_0_10_144)))
 (let ((?x28931 (* l_0_10_143 l_0_10_143)))
 (let ((?x28929 (* l_0_10_142 l_0_10_142)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28541 (* ?x28540 l_0_10_144)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28521 (* ?x28520 l_0_10_143)))
 (let ((?x28932 (- (- (+ (+ (* (* 2.0 l_0_10_130) l_0_10_142) ?x28521) ?x28541) ?x28929) ?x28931)))
 (let ((?x28943 (+ (+ (+ (- (- (- (- ?x28932 ?x28933) ?x28935) ?x28937) ?x28939) ?x27898) ?x27900) ?x27903)))
 (let ((?x28953 (- (- (- (- (- (- (- ?x28943 ?x27935) ?x27947) ?x27950) ?x27952) ?x28948) ?x28950) ?x28952)))
 (= (+ (+ (+ (+ ?x28953 ?x27963) ?x28955) ?x28957) ?x28959) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27506 (* l_0_10_9 l_0_10_9)))
 (let ((?x29093 (* 6.0 ?x27506)))
 (let ((?x27500 (* l_0_10_8 l_0_10_8)))
 (let ((?x29091 (* 6.0 ?x27500)))
 (let ((?x29088 (* l_0_10_73 l_0_10_73)))
 (let ((?x29089 (* 3.0 ?x29088)))
 (let ((?x29085 (* l_0_10_72 l_0_10_72)))
 (let ((?x29086 (* 3.0 ?x29085)))
 (let ((?x29082 (* l_0_10_71 l_0_10_71)))
 (let ((?x29083 (* 3.0 ?x29082)))
 (let ((?x29079 (* l_0_10_70 l_0_10_70)))
 (let ((?x29080 (* 3.0 ?x29079)))
 (let ((?x27498 (* l_0_10_7 l_0_10_7)))
 (let ((?x29077 (* 6.0 ?x27498)))
 (let ((?x29075 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x29072 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x29069 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x29063 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x29060 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x29057 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x29054 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x29050 (* 2.0 l_0_10_178)))
 (let ((?x29051 (* ?x29050 l_0_10_187)))
 (let ((?x29047 (* 2.0 l_0_10_177)))
 (let ((?x29048 (* ?x29047 l_0_10_186)))
 (let ((?x29044 (* 2.0 l_0_10_176)))
 (let ((?x29045 (* ?x29044 l_0_10_185)))
 (let ((?x29041 (* 2.0 l_0_10_175)))
 (let ((?x29042 (* ?x29041 l_0_10_184)))
 (let ((?x29038 (* 2.0 l_0_10_157)))
 (let ((?x29039 (* ?x29038 l_0_10_166)))
 (let ((?x29035 (* 2.0 l_0_10_156)))
 (let ((?x29036 (* ?x29035 l_0_10_165)))
 (let ((?x29032 (* 2.0 l_0_10_155)))
 (let ((?x29033 (* ?x29032 l_0_10_164)))
 (let ((?x29029 (* 2.0 l_0_10_154)))
 (let ((?x29030 (* ?x29029 l_0_10_163)))
 (let ((?x29027 (* l_0_10_136 l_0_10_136)))
 (let ((?x29025 (* l_0_10_135 l_0_10_135)))
 (let ((?x29023 (* l_0_10_134 l_0_10_134)))
 (let ((?x29021 (* l_0_10_133 l_0_10_133)))
 (let ((?x29018 (* 2.0 l_0_10_115)))
 (let ((?x29019 (* ?x29018 l_0_10_124)))
 (let ((?x29015 (* 2.0 l_0_10_114)))
 (let ((?x29016 (* ?x29015 l_0_10_123)))
 (let ((?x29012 (* 2.0 l_0_10_113)))
 (let ((?x29013 (* ?x29012 l_0_10_122)))
 (let ((?x29009 (* 2.0 l_0_10_112)))
 (let ((?x29010 (* ?x29009 l_0_10_121)))
 (let ((?x29006 (* 2.0 l_0_10_103)))
 (let ((?x29007 (* ?x29006 l_0_10_94)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x29004 (* ?x28630 l_0_10_93)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x29002 (* ?x27641 l_0_10_92)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x29000 (* ?x27638 l_0_10_91)))
 (let ((?x27510 (* l_0_10_10 l_0_10_10)))
 (let ((?x28999 (* 6.0 ?x27510)))
 (let ((?x29017 (+ (+ (+ (- (- (- (- ?x28999 ?x29000) ?x29002) ?x29004) ?x29007) ?x29010) ?x29013) ?x29016)))
 (let ((?x29034 (+ (+ (+ (+ (+ (+ (+ ?x29017 ?x29019) ?x29021) ?x29023) ?x29025) ?x29027) ?x29030) ?x29033)))
 (let ((?x29055 (- (- (- (- (- (+ (+ ?x29034 ?x29036) ?x29039) ?x29042) ?x29045) ?x29048) ?x29051) ?x29054)))
 (let ((?x29067 (- (- (- (- ?x29055 ?x29057) ?x29060) ?x29063) (* (* 3.0 l_0_10_49) l_0_10_49))))
 (let ((?x29087 (+ (+ (+ (+ (- (- (- ?x29067 ?x29069) ?x29072) ?x29075) ?x29077) ?x29080) ?x29083) ?x29086)))
 (= (+ (+ (+ ?x29087 ?x29089) ?x29091) ?x29093) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x28165 (* 2.0 l_0_10_73)))
 (let ((?x28166 (* ?x28165 l_0_10_82)))
 (let ((?x29285 (* 6.0 l_0_10_73)))
 (let ((?x29286 (* ?x29285 l_0_10_77)))
 (let ((?x28162 (* 2.0 l_0_10_72)))
 (let ((?x28163 (* ?x28162 l_0_10_81)))
 (let ((?x29281 (* 6.0 l_0_10_72)))
 (let ((?x29282 (* ?x29281 l_0_10_76)))
 (let ((?x28159 (* 2.0 l_0_10_71)))
 (let ((?x28160 (* ?x28159 l_0_10_80)))
 (let ((?x29277 (* 6.0 l_0_10_71)))
 (let ((?x29278 (* ?x29277 l_0_10_75)))
 (let ((?x28156 (* 2.0 l_0_10_70)))
 (let ((?x28157 (* ?x28156 l_0_10_79)))
 (let ((?x29273 (* 6.0 l_0_10_70)))
 (let ((?x29274 (* ?x29273 l_0_10_74)))
 (let ((?x28151 (* 2.0 l_0_10_52)))
 (let ((?x28152 (* ?x28151 l_0_10_61)))
 (let ((?x29269 (* 6.0 l_0_10_52)))
 (let ((?x29270 (* ?x29269 l_0_10_56)))
 (let ((?x28148 (* 2.0 l_0_10_51)))
 (let ((?x28149 (* ?x28148 l_0_10_60)))
 (let ((?x29265 (* 6.0 l_0_10_51)))
 (let ((?x29266 (* ?x29265 l_0_10_55)))
 (let ((?x28145 (* 2.0 l_0_10_50)))
 (let ((?x28146 (* ?x28145 l_0_10_59)))
 (let ((?x29261 (* 6.0 l_0_10_50)))
 (let ((?x29262 (* ?x29261 l_0_10_54)))
 (let ((?x28142 (* 2.0 l_0_10_49)))
 (let ((?x28143 (* ?x28142 l_0_10_58)))
 (let ((?x28137 (* 12.0 l_0_10_31)))
 (let ((?x29255 (* ?x28137 l_0_10_35)))
 (let ((?x28134 (* 12.0 l_0_10_30)))
 (let ((?x29253 (* ?x28134 l_0_10_34)))
 (let ((?x28131 (* 12.0 l_0_10_29)))
 (let ((?x29251 (* ?x28131 l_0_10_33)))
 (let ((?x28128 (* 12.0 l_0_10_28)))
 (let ((?x29249 (* ?x28128 l_0_10_32)))
 (let ((?x29247 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x29244 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x29241 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x29238 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x29235 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x29232 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x29229 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x29226 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x29223 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x29220 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x28658 (* 2.0 l_0_10_136)))
 (let ((?x29217 (* ?x28658 l_0_10_140)))
 (let ((?x28655 (* 2.0 l_0_10_135)))
 (let ((?x29215 (* ?x28655 l_0_10_139)))
 (let ((?x28652 (* 2.0 l_0_10_134)))
 (let ((?x29213 (* ?x28652 l_0_10_138)))
 (let ((?x28649 (* 2.0 l_0_10_133)))
 (let ((?x29211 (* ?x28649 l_0_10_137)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x29209 (* ?x28285 l_0_10_9)))
 (let ((?x29207 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x29204 (* ?x26110 l_0_10_8)))
 (let ((?x29202 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x29199 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x29196 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x29193 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x29190 (* ?x26107 l_0_10_7)))
 (let ((?x29188 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x29006 (* 2.0 l_0_10_103)))
 (let ((?x29185 (* ?x29006 l_0_10_98)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x29183 (* ?x28630 l_0_10_97)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x29181 (* ?x27641 l_0_10_96)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x29179 (* ?x27638 l_0_10_95)))
 (let ((?x28046 (* 12.0 l_0_10_10)))
 (let ((?x15278 (* ?x28046 l_0_10_14)))
 (let ((?x29194 (+ (+ (- (- (- (- (- ?x15278 ?x29179) ?x29181) ?x29183) ?x29185) ?x29188) ?x29190) ?x29193)))
 (let ((?x29212 (+ (+ (+ (+ (+ (+ (+ ?x29194 ?x29196) ?x29199) ?x29202) ?x29204) ?x29207) ?x29209) ?x29211)))
 (let ((?x29230 (+ (+ (+ (+ (+ (+ (+ ?x29212 ?x29213) ?x29215) ?x29217) ?x29220) ?x29223) ?x29226) ?x29229)))
 (let ((?x29250 (- (- (- (- (- (- (+ ?x29230 ?x29232) ?x29235) ?x29238) ?x29241) ?x29244) ?x29247) ?x29249)))
 (let ((?x29259 (- (- (- (- ?x29250 ?x29251) ?x29253) ?x29255) (* (* 6.0 l_0_10_49) l_0_10_53))))
 (let ((?x29272 (+ (- (+ (- (+ (- (+ ?x29259 ?x28143) ?x29262) ?x28146) ?x29266) ?x28149) ?x29270) ?x28152)))
 (let ((?x29287 (+ (- (+ (- (+ (- (+ ?x29272 ?x29274) ?x28157) ?x29278) ?x28160) ?x29282) ?x28163) ?x29286)))
 (= (- ?x29287 ?x28166) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29285 (* 6.0 l_0_10_73)))
 (let ((?x29401 (* ?x29285 l_0_10_82)))
 (let ((?x29281 (* 6.0 l_0_10_72)))
 (let ((?x29399 (* ?x29281 l_0_10_81)))
 (let ((?x29277 (* 6.0 l_0_10_71)))
 (let ((?x29397 (* ?x29277 l_0_10_80)))
 (let ((?x29273 (* 6.0 l_0_10_70)))
 (let ((?x29395 (* ?x29273 l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x28154 (* ?x26539 l_0_10_70)))
 (let ((?x29269 (* 6.0 l_0_10_52)))
 (let ((?x29392 (* ?x29269 l_0_10_61)))
 (let ((?x29265 (* 6.0 l_0_10_51)))
 (let ((?x29390 (* ?x29265 l_0_10_60)))
 (let ((?x29261 (* 6.0 l_0_10_50)))
 (let ((?x29388 (* ?x29261 l_0_10_59)))
 (let ((?x29257 (* 6.0 l_0_10_49)))
 (let ((?x29386 (* ?x29257 l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x28140 (* ?x26515 l_0_10_49)))
 (let ((?x28137 (* 12.0 l_0_10_31)))
 (let ((?x28138 (* ?x28137 l_0_10_40)))
 (let ((?x28134 (* 12.0 l_0_10_30)))
 (let ((?x28135 (* ?x28134 l_0_10_39)))
 (let ((?x28131 (* 12.0 l_0_10_29)))
 (let ((?x28132 (* ?x28131 l_0_10_38)))
 (let ((?x28128 (* 12.0 l_0_10_28)))
 (let ((?x28129 (* ?x28128 l_0_10_37)))
 (let ((?x29379 (* l_0_10_189 l_0_10_189)))
 (let ((?x29377 (* l_0_10_188 l_0_10_188)))
 (let ((?x29375 (* l_0_10_187 l_0_10_187)))
 (let ((?x29373 (* l_0_10_186 l_0_10_186)))
 (let ((?x29371 (* l_0_10_185 l_0_10_185)))
 (let ((?x29369 (* l_0_10_184 l_0_10_184)))
 (let ((?x27902 (* 12.0 l_0_10_18)))
 (let ((?x28076 (* ?x27902 l_0_10_9)))
 (let ((?x26940 (* 12.0 l_0_10_17)))
 (let ((?x28074 (* ?x26940 l_0_10_8)))
 (let ((?x29365 (* l_0_10_168 l_0_10_168)))
 (let ((?x29363 (* l_0_10_167 l_0_10_167)))
 (let ((?x29361 (* l_0_10_166 l_0_10_166)))
 (let ((?x29359 (* l_0_10_165 l_0_10_165)))
 (let ((?x29357 (* l_0_10_164 l_0_10_164)))
 (let ((?x29355 (* l_0_10_163 l_0_10_163)))
 (let ((?x26937 (* 12.0 l_0_10_16)))
 (let ((?x28070 (* ?x26937 l_0_10_7)))
 (let ((?x28658 (* 2.0 l_0_10_136)))
 (let ((?x28659 (* ?x28658 l_0_10_145)))
 (let ((?x28655 (* 2.0 l_0_10_135)))
 (let ((?x28656 (* ?x28655 l_0_10_144)))
 (let ((?x28652 (* 2.0 l_0_10_134)))
 (let ((?x28653 (* ?x28652 l_0_10_143)))
 (let ((?x28649 (* 2.0 l_0_10_133)))
 (let ((?x28650 (* ?x28649 l_0_10_142)))
 (let ((?x29348 (* l_0_10_126 l_0_10_126)))
 (let ((?x29346 (* l_0_10_125 l_0_10_125)))
 (let ((?x29344 (* l_0_10_124 l_0_10_124)))
 (let ((?x29342 (* l_0_10_123 l_0_10_123)))
 (let ((?x29340 (* l_0_10_122 l_0_10_122)))
 (let ((?x29338 (* l_0_10_121 l_0_10_121)))
 (let ((?x29336 (* l_0_10_105 l_0_10_105)))
 (let ((?x29334 (* l_0_10_104 l_0_10_104)))
 (let ((?x29332 (* l_0_10_103 l_0_10_103)))
 (let ((?x29330 (* l_0_10_102 l_0_10_102)))
 (let ((?x15704 (* l_0_10_101 l_0_10_101)))
 (let ((?x15702 (* l_0_10_100 l_0_10_100)))
 (let ((?x28046 (* 12.0 l_0_10_10)))
 (let ((?x28048 (* ?x28046 l_0_10_19)))
 (let ((?x29339 (+ (- (- (- (- (- (- ?x28048 ?x15702) ?x15704) ?x29330) ?x29332) ?x29334) ?x29336) ?x29338)))
 (let ((?x29351 (+ (+ (+ (+ (+ (+ (+ ?x29339 ?x29340) ?x29342) ?x29344) ?x29346) ?x29348) ?x28650) ?x28653)))
 (let ((?x29362 (+ (+ (+ (+ (+ (+ (+ ?x29351 ?x28656) ?x28659) ?x28070) ?x29355) ?x29357) ?x29359) ?x29361)))
 (let ((?x29374 (- (- (- (+ (+ (+ (+ ?x29362 ?x29363) ?x29365) ?x28074) ?x28076) ?x29369) ?x29371) ?x29373)))
 (let ((?x29384 (- (- (- (- (- (- (- ?x29374 ?x29375) ?x29377) ?x29379) ?x28129) ?x28132) ?x28135) ?x28138)))
 (let ((?x29396 (+ (+ (- (- (- (- (- ?x29384 ?x28140) ?x29386) ?x29388) ?x29390) ?x29392) ?x28154) ?x29395)))
 (= (+ (+ (+ ?x29396 ?x29397) ?x29399) ?x29401) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26385 (* l_0_10_78 l_0_10_78)))
 (let ((?x29467 (* 3.0 ?x26385)))
 (let ((?x28404 (* (* 2.0 l_0_10_78) l_0_10_83)))
 (let ((?x26382 (* l_0_10_77 l_0_10_77)))
 (let ((?x29464 (* 3.0 ?x26382)))
 (let ((?x28401 (* (* 2.0 l_0_10_77) l_0_10_82)))
 (let ((?x26379 (* l_0_10_76 l_0_10_76)))
 (let ((?x29461 (* 3.0 ?x26379)))
 (let ((?x28398 (* (* 2.0 l_0_10_76) l_0_10_81)))
 (let ((?x26376 (* l_0_10_75 l_0_10_75)))
 (let ((?x29458 (* 3.0 ?x26376)))
 (let ((?x28395 (* (* 2.0 l_0_10_75) l_0_10_80)))
 (let ((?x26373 (* l_0_10_74 l_0_10_74)))
 (let ((?x29455 (* 3.0 ?x26373)))
 (let ((?x28392 (* (* 2.0 l_0_10_74) l_0_10_79)))
 (let ((?x29452 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x28386 (* (* 2.0 l_0_10_57) l_0_10_62)))
 (let ((?x29448 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x28383 (* (* 2.0 l_0_10_56) l_0_10_61)))
 (let ((?x29444 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x28380 (* (* 2.0 l_0_10_55) l_0_10_60)))
 (let ((?x29440 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x28377 (* (* 2.0 l_0_10_54) l_0_10_59)))
 (let ((?x28374 (* (* 2.0 l_0_10_53) l_0_10_58)))
 (let ((?x26354 (* (* 6.0 l_0_10_36) l_0_10_36)))
 (let ((?x26351 (* (* 6.0 l_0_10_35) l_0_10_35)))
 (let ((?x26348 (* (* 6.0 l_0_10_34) l_0_10_34)))
 (let ((?x26345 (* (* 6.0 l_0_10_33) l_0_10_33)))
 (let ((?x26342 (* (* 6.0 l_0_10_32) l_0_10_32)))
 (let ((?x26298 (* l_0_10_15 l_0_10_15)))
 (let ((?x26299 (* 6.0 ?x26298)))
 (let ((?x15846 (* l_0_10_141 l_0_10_141)))
 (let ((?x15839 (* l_0_10_140 l_0_10_140)))
 (let ((?x26295 (* l_0_10_14 l_0_10_14)))
 (let ((?x26296 (* 6.0 ?x26295)))
 (let ((?x15800 (* l_0_10_139 l_0_10_139)))
 (let ((?x15277 (* l_0_10_138 l_0_10_138)))
 (let ((?x15784 (* l_0_10_137 l_0_10_137)))
 (let ((?x26292 (* l_0_10_13 l_0_10_13)))
 (let ((?x26293 (* 6.0 ?x26292)))
 (let ((?x26289 (* l_0_10_12 l_0_10_12)))
 (let ((?x26290 (* 6.0 ?x26289)))
 (let ((?x26286 (* l_0_10_11 l_0_10_11)))
 (let ((?x26287 (* 6.0 ?x26286)))
 (let ((?x15845 (+ (+ (+ (+ (+ (+ (+ ?x26287 ?x26290) ?x26293) ?x15784) ?x15277) ?x15800) ?x26296) ?x15839)))
 (let ((?x29433 (- (- (- (- (- (+ (+ ?x15845 ?x15846) ?x26299) ?x26342) ?x26345) ?x26348) ?x26351) ?x26354)))
 (let ((?x29441 (- (+ (- (+ ?x29433 ?x28374) (* (* 3.0 l_0_10_53) l_0_10_53)) ?x28377) ?x29440)))
 (let ((?x29454 (- (- (+ (- (+ (- (+ ?x29441 ?x28380) ?x29444) ?x28383) ?x29448) ?x28386) ?x29452) ?x28392)))
 (let ((?x29465 (+ (- (+ (- (+ (- (+ ?x29454 ?x29455) ?x28395) ?x29458) ?x28398) ?x29461) ?x28401) ?x29464)))
 (= (+ (- ?x29465 ?x28404) ?x29467) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26559 (* l_0_10_84 l_0_10_84)))
 (let ((?x26556 (* l_0_10_83 l_0_10_83)))
 (let ((?x26553 (* l_0_10_82 l_0_10_82)))
 (let ((?x26550 (* l_0_10_81 l_0_10_81)))
 (let ((?x26547 (* l_0_10_80 l_0_10_80)))
 (let ((?x26544 (* l_0_10_79 l_0_10_79)))
 (let ((?x29520 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x29517 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x29514 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x29511 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x29508 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x28388 (* ?x26539 l_0_10_74)))
 (let ((?x26638 (* l_0_10_63 l_0_10_63)))
 (let ((?x13461 (* l_0_10_62 l_0_10_62)))
 (let ((?x26633 (* l_0_10_61 l_0_10_61)))
 (let ((?x13454 (* l_0_10_60 l_0_10_60)))
 (let ((?x13451 (* l_0_10_59 l_0_10_59)))
 (let ((?x13442 (* l_0_10_58 l_0_10_58)))
 (let ((?x29498 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x29495 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x29492 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x29489 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x29486 (* (* 6.0 l_0_10_53) l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x28370 (* ?x26515 l_0_10_53)))
 (let ((?x28368 (* (* 12.0 l_0_10_36) l_0_10_41)))
 (let ((?x28365 (* (* 12.0 l_0_10_35) l_0_10_40)))
 (let ((?x28362 (* (* 12.0 l_0_10_34) l_0_10_39)))
 (let ((?x28359 (* (* 12.0 l_0_10_33) l_0_10_38)))
 (let ((?x28356 (* (* 12.0 l_0_10_32) l_0_10_37)))
 (let ((?x28292 (* (* 12.0 l_0_10_15) l_0_10_20)))
 (let ((?x28823 (* (* 2.0 l_0_10_141) l_0_10_146)))
 (let ((?x28820 (* (* 2.0 l_0_10_140) l_0_10_145)))
 (let ((?x28289 (* (* 12.0 l_0_10_14) l_0_10_19)))
 (let ((?x28817 (* (* 2.0 l_0_10_139) l_0_10_144)))
 (let ((?x28814 (* (* 2.0 l_0_10_138) l_0_10_143)))
 (let ((?x28811 (* (* 2.0 l_0_10_137) l_0_10_142)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x28286 (* ?x28285 l_0_10_18)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x28281 (* ?x26110 l_0_10_17)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x28279 (* ?x26107 l_0_10_16)))
 (let ((?x29476 (+ (+ (+ (+ (+ (+ (+ ?x28279 ?x28281) ?x28286) ?x28811) ?x28814) ?x28817) ?x28289) ?x28820)))
 (let ((?x29483 (- (- (- (- (- (+ (+ ?x29476 ?x28823) ?x28292) ?x28356) ?x28359) ?x28362) ?x28365) ?x28368)))
 (let ((?x29500 (+ (- (- (- (- (- (- ?x29483 ?x28370) ?x29486) ?x29489) ?x29492) ?x29495) ?x29498) ?x13442)))
 (let ((?x29509 (+ (+ (+ (+ (+ (+ (+ ?x29500 ?x13451) ?x13454) ?x26633) ?x13461) ?x26638) ?x28388) ?x29508)))
 (let ((?x29524 (- (- (- (+ (+ (+ (+ ?x29509 ?x29511) ?x29514) ?x29517) ?x29520) ?x26544) ?x26547) ?x26550)))
 (= (- (- (- ?x29524 ?x26553) ?x26556) ?x26559) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29581 (* l_0_10_85 l_0_10_85)))
 (let ((?x26559 (* l_0_10_84 l_0_10_84)))
 (let ((?x29579 (* 3.0 ?x26559)))
 (let ((?x26556 (* l_0_10_83 l_0_10_83)))
 (let ((?x29577 (* 3.0 ?x26556)))
 (let ((?x26553 (* l_0_10_82 l_0_10_82)))
 (let ((?x29575 (* 3.0 ?x26553)))
 (let ((?x26550 (* l_0_10_81 l_0_10_81)))
 (let ((?x29573 (* 3.0 ?x26550)))
 (let ((?x26547 (* l_0_10_80 l_0_10_80)))
 (let ((?x29571 (* 3.0 ?x26547)))
 (let ((?x26544 (* l_0_10_79 l_0_10_79)))
 (let ((?x29569 (* 3.0 ?x26544)))
 (let ((?x26539 (* 6.0 l_0_10_64)))
 (let ((?x26540 (* ?x26539 l_0_10_79)))
 (let ((?x29566 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x29563 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x29560 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x29557 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x29554 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x29551 (* (* 3.0 l_0_10_58) l_0_10_58)))
 (let ((?x26515 (* 6.0 l_0_10_43)))
 (let ((?x26516 (* ?x26515 l_0_10_58)))
 (let ((?x26513 (* (* 6.0 l_0_10_42) l_0_10_42)))
 (let ((?x26510 (* (* 6.0 l_0_10_41) l_0_10_41)))
 (let ((?x26507 (* (* 6.0 l_0_10_40) l_0_10_40)))
 (let ((?x26504 (* (* 6.0 l_0_10_39) l_0_10_39)))
 (let ((?x26501 (* (* 6.0 l_0_10_38) l_0_10_38)))
 (let ((?x26498 (* (* 6.0 l_0_10_37) l_0_10_37)))
 (let ((?x26454 (* l_0_10_21 l_0_10_21)))
 (let ((?x26455 (* 6.0 ?x26454)))
 (let ((?x26441 (* l_0_10_20 l_0_10_20)))
 (let ((?x26442 (* 6.0 ?x26441)))
 (let ((?x26438 (* l_0_10_19 l_0_10_19)))
 (let ((?x26439 (* 6.0 ?x26438)))
 (let ((?x26435 (* l_0_10_18 l_0_10_18)))
 (let ((?x26436 (* 6.0 ?x26435)))
 (let ((?x26432 (* l_0_10_17 l_0_10_17)))
 (let ((?x26433 (* 6.0 ?x26432)))
 (let ((?x29536 (* l_0_10_169 l_0_10_169)))
 (let ((?x26429 (* l_0_10_16 l_0_10_16)))
 (let ((?x26430 (* 6.0 ?x26429)))
 (let ((?x16274 (* l_0_10_148 l_0_10_148)))
 (let ((?x28939 (* l_0_10_147 l_0_10_147)))
 (let ((?x28937 (* l_0_10_146 l_0_10_146)))
 (let ((?x28935 (* l_0_10_145 l_0_10_145)))
 (let ((?x28933 (* l_0_10_144 l_0_10_144)))
 (let ((?x28931 (* l_0_10_143 l_0_10_143)))
 (let ((?x16328 (+ (+ (* (- l_0_10_106) l_0_10_106) (* l_0_10_142 l_0_10_142)) ?x28931)))
 (let ((?x29537 (+ (+ (- (+ (+ (+ (+ ?x16328 ?x28933) ?x28935) ?x28937) ?x28939) ?x16274) ?x26430) ?x29536)))
 (let ((?x29544 (- (- (+ (+ (+ (+ (+ ?x29537 ?x26433) ?x26436) ?x26439) ?x26442) ?x26455) ?x26498) ?x26501)))
 (let ((?x29555 (- (- (- (- (- (- (- ?x29544 ?x26504) ?x26507) ?x26510) ?x26513) ?x26516) ?x29551) ?x29554)))
 (let ((?x29572 (+ (+ (+ (- (- (- (- ?x29555 ?x29557) ?x29560) ?x29563) ?x29566) ?x26540) ?x29569) ?x29571)))
 (= (+ (+ (+ (+ (+ ?x29572 ?x29573) ?x29575) ?x29577) ?x29579) ?x29581) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x29616 (* ?x26154 l_0_10_67)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x29614 (* ?x26145 l_0_10_46)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x27923 (* ?x26227 l_0_10_25)))
 (let ((?x29606 (- (- (* (* 12.0 l_0_10_1) l_0_10_4) (* l_0_10_127 l_0_10_127)) (* (* 2.0 l_0_10_190) l_0_10_193))))
 (let ((?x29611 (- (- (- ?x29606 (* (* 2.0 l_0_10_211) l_0_10_214)) ?x27923) (* (* 2.0 l_0_10_232) l_0_10_235))))
 (= (+ (- (- ?x29611 (* (* 2.0 l_0_10_253) l_0_10_256)) ?x29614) ?x29616) 0.0))))))))))
(assert
 (let ((?x29581 (* l_0_10_85 l_0_10_85)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x29649 (* ?x26154 l_0_10_70)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x29647 (* ?x26145 l_0_10_49)))
 (let ((?x26227 (* 12.0 l_0_10_22)))
 (let ((?x28099 (* ?x26227 l_0_10_28)))
 (let ((?x29536 (* l_0_10_169 l_0_10_169)))
 (let ((?x16274 (* l_0_10_148 l_0_10_148)))
 (let ((?x29633 (+ (+ (* (* 12.0 l_0_10_1) l_0_10_7) (* l_0_10_106 l_0_10_106)) ?x16274)))
 (let ((?x29641 (- (- (- ?x29633 ?x29536) (* (* 2.0 l_0_10_190) l_0_10_196)) (* (* 2.0 l_0_10_211) l_0_10_217))))
 (let ((?x29646 (- (- (- ?x29641 ?x28099) (* (* 2.0 l_0_10_232) l_0_10_238)) (* (* 2.0 l_0_10_253) l_0_10_259))))
 (= (- (+ (- ?x29646 ?x29647) ?x29649) ?x29581) 0.0))))))))))))))
(assert
 (let ((?x27233 (* l_0_10_6 l_0_10_6)))
 (let ((?x28567 (* 6.0 ?x27233)))
 (let ((?x27231 (* l_0_10_5 l_0_10_5)))
 (let ((?x28565 (* 6.0 ?x27231)))
 (let ((?x27229 (* l_0_10_4 l_0_10_4)))
 (let ((?x28554 (* 6.0 ?x27229)))
 (let ((?x28552 (* (* 6.0 l_0_10_27) l_0_10_27)))
 (let ((?x28549 (* (* 6.0 l_0_10_26) l_0_10_26)))
 (let ((?x29693 (* l_0_10_258 l_0_10_258)))
 (let ((?x29691 (* l_0_10_257 l_0_10_257)))
 (let ((?x29689 (* l_0_10_256 l_0_10_256)))
 (let ((?x28546 (* (* 6.0 l_0_10_25) l_0_10_25)))
 (let ((?x29686 (* l_0_10_237 l_0_10_237)))
 (let ((?x29684 (* l_0_10_236 l_0_10_236)))
 (let ((?x29682 (* l_0_10_235 l_0_10_235)))
 (let ((?x29680 (* l_0_10_216 l_0_10_216)))
 (let ((?x29678 (* l_0_10_215 l_0_10_215)))
 (let ((?x29676 (* l_0_10_214 l_0_10_214)))
 (let ((?x29674 (* l_0_10_195 l_0_10_195)))
 (let ((?x29672 (* l_0_10_194 l_0_10_194)))
 (let ((?x16641 (* l_0_10_193 l_0_10_193)))
 (let ((?x29677 (- (- (- (- (* (* (- 2.0) l_0_10_127) l_0_10_130) ?x16641) ?x29672) ?x29674) ?x29676)))
 (let ((?x29690 (- (- (- (- (- (- (- ?x29677 ?x29678) ?x29680) ?x29682) ?x29684) ?x29686) ?x28546) ?x29689)))
 (let ((?x29700 (- (+ (- (- (- (- ?x29690 ?x29691) ?x29693) ?x28549) ?x28552) ?x28554) (* (* 1.0 l_0_10_46) l_0_10_46))))
 (let ((?x29706 (- (- ?x29700 (* (* 1.0 l_0_10_47) l_0_10_47)) (* (* 1.0 l_0_10_48) l_0_10_48))))
 (let ((?x29712 (+ (+ (+ (+ ?x29706 ?x28565) ?x28567) (* 1.0 (* l_0_10_67 l_0_10_67))) (* 1.0 (* l_0_10_68 l_0_10_68)))))
 (= (+ ?x29712 (* 1.0 (* l_0_10_69 l_0_10_69))) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x29784 (* ?x26840 l_0_10_88)))
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x29782 (* ?x27971 l_0_10_72)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x29780 (* ?x27968 l_0_10_71)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x29778 (* ?x27965 l_0_10_70)))
 (let ((?x28701 (* (* 12.0 l_0_10_6) l_0_10_9)))
 (let ((?x28698 (* (* 12.0 l_0_10_5) l_0_10_8)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x29774 (* ?x27960 l_0_10_51)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x29772 (* ?x27957 l_0_10_50)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x29770 (* ?x27954 l_0_10_49)))
 (let ((?x28686 (* (* 12.0 l_0_10_4) l_0_10_7)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x28683 (* ?x27949 l_0_10_30)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x28681 (* ?x27946 l_0_10_29)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x28679 (* ?x27934 l_0_10_28)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x29740 (* ?x26803 l_0_10_172)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x29738 (* ?x26800 l_0_10_151)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x28066 (* ?x26426 l_0_10_133)))
 (let ((?x29743 (- (- (+ (- (* (* 2.0 l_0_10_106) l_0_10_109) ?x28066) ?x29738) ?x29740) (* (* 2.0 l_0_10_193) l_0_10_196))))
 (let ((?x29747 (- (- ?x29743 (* (* 2.0 l_0_10_194) l_0_10_197)) (* (* 2.0 l_0_10_195) l_0_10_198))))
 (let ((?x29751 (- (- ?x29747 (* (* 2.0 l_0_10_214) l_0_10_217)) (* (* 2.0 l_0_10_215) l_0_10_218))))
 (let ((?x29755 (- (- ?x29751 (* (* 2.0 l_0_10_216) l_0_10_219)) (* (* 2.0 l_0_10_235) l_0_10_238))))
 (let ((?x29759 (- (- ?x29755 (* (* 2.0 l_0_10_236) l_0_10_239)) (* (* 2.0 l_0_10_237) l_0_10_240))))
 (let ((?x29764 (- (- (- ?x29759 ?x28679) (* (* 2.0 l_0_10_256) l_0_10_259)) (* (* 2.0 l_0_10_257) l_0_10_260))))
 (let ((?x29769 (+ (- (- (- ?x29764 (* (* 2.0 l_0_10_258) l_0_10_261)) ?x28681) ?x28683) ?x28686)))
 (let ((?x29781 (+ (+ (+ (+ (- (- (- ?x29769 ?x29770) ?x29772) ?x29774) ?x28698) ?x28701) ?x29778) ?x29780)))
 (= (- (+ ?x29781 ?x29782) ?x29784) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x29857 (* ?x27971 l_0_10_76)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x29855 (* ?x27968 l_0_10_75)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x29853 (* ?x27965 l_0_10_74)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x29616 (* ?x26154 l_0_10_67)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x29850 (* ?x27960 l_0_10_55)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x29848 (* ?x27957 l_0_10_54)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x29846 (* ?x27954 l_0_10_53)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x29614 (* ?x26145 l_0_10_46)))
 (let ((?x27949 (* 12.0 l_0_10_27)))
 (let ((?x28829 (* ?x27949 l_0_10_34)))
 (let ((?x27946 (* 12.0 l_0_10_26)))
 (let ((?x28827 (* ?x27946 l_0_10_33)))
 (let ((?x27934 (* 12.0 l_0_10_25)))
 (let ((?x28825 (* ?x27934 l_0_10_32)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x28783 (* ?x28285 l_0_10_6)))
 (let ((?x26426 (* 2.0 l_0_10_127)))
 (let ((?x28283 (* ?x26426 l_0_10_137)))
 (let ((?x28781 (+ (* (* 12.0 l_0_10_11) l_0_10_4) (* (* 12.0 l_0_10_12) l_0_10_5))))
 (let ((?x29821 (- (- (+ (- ?x28781 ?x28283) ?x28783) (* (* 2.0 l_0_10_193) l_0_10_200)) (* (* 2.0 l_0_10_194) l_0_10_201))))
 (let ((?x29825 (- (- ?x29821 (* (* 2.0 l_0_10_195) l_0_10_202)) (* (* 2.0 l_0_10_214) l_0_10_221))))
 (let ((?x29829 (- (- ?x29825 (* (* 2.0 l_0_10_215) l_0_10_222)) (* (* 2.0 l_0_10_216) l_0_10_223))))
 (let ((?x29833 (- (- ?x29829 (* (* 2.0 l_0_10_235) l_0_10_242)) (* (* 2.0 l_0_10_236) l_0_10_243))))
 (let ((?x29838 (- (- (- ?x29833 (* (* 2.0 l_0_10_237) l_0_10_244)) ?x28825) (* (* 2.0 l_0_10_256) l_0_10_263))))
 (let ((?x29842 (- (- ?x29838 (* (* 2.0 l_0_10_257) l_0_10_264)) (* (* 2.0 l_0_10_258) l_0_10_265))))
 (let ((?x29852 (- (- (- (- (+ (- (- ?x29842 ?x28827) ?x28829) ?x29614) ?x29846) ?x29848) ?x29850) ?x29616)))
 (= (+ (+ (+ ?x29852 ?x29853) ?x29855) ?x29857) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27506 (* l_0_10_9 l_0_10_9)))
 (let ((?x29093 (* 6.0 ?x27506)))
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x29972 (* ?x26840 l_0_10_91)))
 (let ((?x27500 (* l_0_10_8 l_0_10_8)))
 (let ((?x29091 (* 6.0 ?x27500)))
 (let ((?x27498 (* l_0_10_7 l_0_10_7)))
 (let ((?x29077 (* 6.0 ?x27498)))
 (let ((?x29063 (* (* 6.0 l_0_10_31) l_0_10_31)))
 (let ((?x29060 (* (* 6.0 l_0_10_30) l_0_10_30)))
 (let ((?x29057 (* (* 6.0 l_0_10_29) l_0_10_29)))
 (let ((?x29054 (* (* 6.0 l_0_10_28) l_0_10_28)))
 (let ((?x29944 (* l_0_10_262 l_0_10_262)))
 (let ((?x29942 (* l_0_10_261 l_0_10_261)))
 (let ((?x29940 (* l_0_10_260 l_0_10_260)))
 (let ((?x29938 (* l_0_10_259 l_0_10_259)))
 (let ((?x29936 (* l_0_10_241 l_0_10_241)))
 (let ((?x29934 (* l_0_10_240 l_0_10_240)))
 (let ((?x29932 (* l_0_10_239 l_0_10_239)))
 (let ((?x29930 (* l_0_10_238 l_0_10_238)))
 (let ((?x29928 (* l_0_10_220 l_0_10_220)))
 (let ((?x29926 (* l_0_10_219 l_0_10_219)))
 (let ((?x29924 (* l_0_10_218 l_0_10_218)))
 (let ((?x29922 (* l_0_10_217 l_0_10_217)))
 (let ((?x29920 (* l_0_10_199 l_0_10_199)))
 (let ((?x29918 (* l_0_10_198 l_0_10_198)))
 (let ((?x29916 (* l_0_10_197 l_0_10_197)))
 (let ((?x29914 (* l_0_10_196 l_0_10_196)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x29912 (* ?x26803 l_0_10_175)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x17248 (* ?x26800 l_0_10_154)))
 (let ((?x27510 (* l_0_10_10 l_0_10_10)))
 (let ((?x28999 (* 6.0 ?x27510)))
 (let ((?x29915 (- (- (+ (+ ?x28999 (* (* 2.0 l_0_10_106) l_0_10_112)) ?x17248) ?x29912) ?x29914)))
 (let ((?x29929 (- (- (- (- (- (- (- ?x29915 ?x29916) ?x29918) ?x29920) ?x29922) ?x29924) ?x29926) ?x29928)))
 (let ((?x29943 (- (- (- (- (- (- (- ?x29929 ?x29930) ?x29932) ?x29934) ?x29936) ?x29938) ?x29940) ?x29942)))
 (let ((?x29952 (- (- (- (- (- (- ?x29943 ?x29944) ?x29054) ?x29057) ?x29060) ?x29063) (* (* 1.0 l_0_10_49) l_0_10_49))))
 (let ((?x29958 (- (- ?x29952 (* (* 1.0 l_0_10_50) l_0_10_50)) (* (* 1.0 l_0_10_51) l_0_10_51))))
 (let ((?x29964 (+ (+ (- ?x29958 (* (* 1.0 l_0_10_52) l_0_10_52)) ?x29077) (* 1.0 (* l_0_10_70 l_0_10_70)))))
 (let ((?x29968 (+ (+ ?x29964 (* 1.0 (* l_0_10_71 l_0_10_71))) (* 1.0 (* l_0_10_72 l_0_10_72)))))
 (let ((?x29974 (+ (- (+ (+ ?x29968 (* 1.0 (* l_0_10_73 l_0_10_73))) ?x29091) ?x29972) ?x29093)))
 (= ?x29974 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x30080 (* ?x26840 l_0_10_95)))
 (let ((?x28165 (* 2.0 l_0_10_73)))
 (let ((?x30078 (* ?x28165 l_0_10_77)))
 (let ((?x28162 (* 2.0 l_0_10_72)))
 (let ((?x30076 (* ?x28162 l_0_10_76)))
 (let ((?x28159 (* 2.0 l_0_10_71)))
 (let ((?x30074 (* ?x28159 l_0_10_75)))
 (let ((?x28156 (* 2.0 l_0_10_70)))
 (let ((?x30072 (* ?x28156 l_0_10_74)))
 (let ((?x26154 (* 2.0 l_0_10_64)))
 (let ((?x29649 (* ?x26154 l_0_10_70)))
 (let ((?x28151 (* 2.0 l_0_10_52)))
 (let ((?x30069 (* ?x28151 l_0_10_56)))
 (let ((?x28148 (* 2.0 l_0_10_51)))
 (let ((?x30067 (* ?x28148 l_0_10_55)))
 (let ((?x28145 (* 2.0 l_0_10_50)))
 (let ((?x30065 (* ?x28145 l_0_10_54)))
 (let ((?x28142 (* 2.0 l_0_10_49)))
 (let ((?x30063 (* ?x28142 l_0_10_53)))
 (let ((?x26145 (* 2.0 l_0_10_43)))
 (let ((?x29647 (* ?x26145 l_0_10_49)))
 (let ((?x28137 (* 12.0 l_0_10_31)))
 (let ((?x29255 (* ?x28137 l_0_10_35)))
 (let ((?x28134 (* 12.0 l_0_10_30)))
 (let ((?x29253 (* ?x28134 l_0_10_34)))
 (let ((?x28131 (* 12.0 l_0_10_29)))
 (let ((?x29251 (* ?x28131 l_0_10_33)))
 (let ((?x28128 (* 12.0 l_0_10_28)))
 (let ((?x29249 (* ?x28128 l_0_10_32)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x30024 (* ?x26803 l_0_10_179)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x30022 (* ?x26800 l_0_10_158)))
 (let ((?x28285 (* 12.0 l_0_10_13)))
 (let ((?x29209 (* ?x28285 l_0_10_9)))
 (let ((?x26110 (* 12.0 l_0_10_12)))
 (let ((?x29204 (* ?x26110 l_0_10_8)))
 (let ((?x26107 (* 12.0 l_0_10_11)))
 (let ((?x29190 (* ?x26107 l_0_10_7)))
 (let ((?x28046 (* 12.0 l_0_10_10)))
 (let ((?x15278 (* ?x28046 l_0_10_14)))
 (let ((?x30021 (+ (+ (+ (+ ?x15278 (* (* 2.0 l_0_10_106) l_0_10_116)) ?x29190) ?x29204) ?x29209)))
 (let ((?x30029 (- (- (- (+ ?x30021 ?x30022) ?x30024) (* (* 2.0 l_0_10_196) l_0_10_200)) (* (* 2.0 l_0_10_197) l_0_10_201))))
 (let ((?x30033 (- (- ?x30029 (* (* 2.0 l_0_10_198) l_0_10_202)) (* (* 2.0 l_0_10_199) l_0_10_203))))
 (let ((?x30037 (- (- ?x30033 (* (* 2.0 l_0_10_217) l_0_10_221)) (* (* 2.0 l_0_10_218) l_0_10_222))))
 (let ((?x30041 (- (- ?x30037 (* (* 2.0 l_0_10_219) l_0_10_223)) (* (* 2.0 l_0_10_220) l_0_10_224))))
 (let ((?x30045 (- (- ?x30041 (* (* 2.0 l_0_10_238) l_0_10_242)) (* (* 2.0 l_0_10_239) l_0_10_243))))
 (let ((?x30049 (- (- ?x30045 (* (* 2.0 l_0_10_240) l_0_10_244)) (* (* 2.0 l_0_10_241) l_0_10_245))))
 (let ((?x30053 (- (- ?x30049 (* (* 2.0 l_0_10_259) l_0_10_263)) (* (* 2.0 l_0_10_260) l_0_10_264))))
 (let ((?x30057 (- (- ?x30053 (* (* 2.0 l_0_10_261) l_0_10_265)) (* (* 2.0 l_0_10_262) l_0_10_266))))
 (let ((?x30066 (- (- (+ (- (- (- (- ?x30057 ?x29249) ?x29251) ?x29253) ?x29255) ?x29647) ?x30063) ?x30065)))
 (let ((?x30079 (+ (+ (+ (+ (- (- (- ?x30066 ?x30067) ?x30069) ?x29649) ?x30072) ?x30074) ?x30076) ?x30078)))
 (= (- ?x30079 ?x30080) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26062 (* l_0_10_66 l_0_10_66)))
 (let ((?x27189 (* 3.0 ?x26062)))
 (let ((?x26059 (* l_0_10_65 l_0_10_65)))
 (let ((?x27187 (* 3.0 ?x26059)))
 (let ((?x27185 (* (* 3.0 l_0_10_45) l_0_10_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_10_44) l_0_10_44) ?x27185) ?x27187) ?x27189) 0.0)))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27437 (* ?x27436 l_0_10_68)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27434 (* ?x27433 l_0_10_67)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27431 (* ?x27430 l_0_10_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_10_44) l_0_10_46) ?x27431) ?x27434) ?x27437) 0.0))))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27682 (* ?x27436 l_0_10_71)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27680 (* ?x27433 l_0_10_70)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27678 (* ?x27430 l_0_10_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_10_44) l_0_10_49) ?x27678) ?x27680) ?x27682) 0.0))))))))
(assert
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27798 (* ?x27436 l_0_10_75)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27795 (* ?x27433 l_0_10_74)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27792 (* ?x27430 l_0_10_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_10_44) l_0_10_53) ?x27792) ?x27795) ?x27798) 0.0))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x26841 (* ?x26840 l_0_10_86)))
 (let ((?x27436 (* 6.0 l_0_10_66)))
 (let ((?x27879 (* ?x27436 l_0_10_80)))
 (let ((?x27433 (* 6.0 l_0_10_65)))
 (let ((?x27877 (* ?x27433 l_0_10_79)))
 (let ((?x27430 (* 6.0 l_0_10_45)))
 (let ((?x27874 (* ?x27430 l_0_10_59)))
 (let ((?x27427 (* 6.0 l_0_10_44)))
 (let ((?x27872 (* ?x27427 l_0_10_58)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x26804 (* ?x26803 l_0_10_170)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x26801 (* ?x26800 l_0_10_149)))
 (let ((?x30153 (- (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_107) ?x26801) ?x26804) ?x27872) ?x27874)))
 (= (+ (+ (+ ?x30153 ?x27877) ?x27879) ?x26841) 0.0)))))))))))))))))
(assert
 (let ((?x28575 (* l_0_10_69 l_0_10_69)))
 (let ((?x28576 (* 3.0 ?x28575)))
 (let ((?x28572 (* l_0_10_68 l_0_10_68)))
 (let ((?x28573 (* 3.0 ?x28572)))
 (let ((?x28569 (* l_0_10_67 l_0_10_67)))
 (let ((?x28570 (* 3.0 ?x28569)))
 (let ((?x28563 (* (* 3.0 l_0_10_48) l_0_10_48)))
 (let ((?x28560 (* (* 3.0 l_0_10_47) l_0_10_47)))
 (let ((?x17890 (+ (+ (- (- (* (* (- 3.0) l_0_10_46) l_0_10_46) ?x28560) ?x28563) ?x28570) ?x28573)))
 (= (+ ?x17890 ?x28576) 0.0)))))))))))
(assert
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28710 (* ?x28709 l_0_10_72)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28707 (* ?x28706 l_0_10_71)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28704 (* ?x28703 l_0_10_70)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28695 (* ?x28694 l_0_10_51)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28692 (* ?x28691 l_0_10_50)))
 (let ((?x30163 (+ (+ (- (- (* (* (- 6.0) l_0_10_46) l_0_10_49) ?x28692) ?x28695) ?x28704) ?x28707)))
 (= (+ ?x30163 ?x28710) 0.0)))))))))))))
(assert
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28846 (* ?x28709 l_0_10_76)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28843 (* ?x28706 l_0_10_75)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28840 (* ?x28703 l_0_10_74)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28837 (* ?x28694 l_0_10_55)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28834 (* ?x28691 l_0_10_54)))
 (let ((?x30172 (+ (+ (- (- (* (* (- 6.0) l_0_10_46) l_0_10_53) ?x28834) ?x28837) ?x28840) ?x28843)))
 (= (+ ?x30172 ?x28846) 0.0)))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x29784 (* ?x26840 l_0_10_88)))
 (let ((?x28709 (* 6.0 l_0_10_69)))
 (let ((?x28959 (* ?x28709 l_0_10_81)))
 (let ((?x28706 (* 6.0 l_0_10_68)))
 (let ((?x28957 (* ?x28706 l_0_10_80)))
 (let ((?x28703 (* 6.0 l_0_10_67)))
 (let ((?x28955 (* ?x28703 l_0_10_79)))
 (let ((?x28694 (* 6.0 l_0_10_48)))
 (let ((?x28952 (* ?x28694 l_0_10_60)))
 (let ((?x28691 (* 6.0 l_0_10_47)))
 (let ((?x28950 (* ?x28691 l_0_10_59)))
 (let ((?x28688 (* 6.0 l_0_10_46)))
 (let ((?x28948 (* ?x28688 l_0_10_58)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x29740 (* ?x26803 l_0_10_172)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x29738 (* ?x26800 l_0_10_151)))
 (let ((?x30179 (- (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_109) ?x29738) ?x29740) ?x28948) ?x28950)))
 (= (+ (+ (+ (+ (- ?x30179 ?x28952) ?x28955) ?x28957) ?x28959) ?x29784) 0.0)))))))))))))))))))))
(assert
 (let ((?x29088 (* l_0_10_73 l_0_10_73)))
 (let ((?x29089 (* 3.0 ?x29088)))
 (let ((?x29085 (* l_0_10_72 l_0_10_72)))
 (let ((?x29086 (* 3.0 ?x29085)))
 (let ((?x29082 (* l_0_10_71 l_0_10_71)))
 (let ((?x29083 (* 3.0 ?x29082)))
 (let ((?x29079 (* l_0_10_70 l_0_10_70)))
 (let ((?x29080 (* 3.0 ?x29079)))
 (let ((?x29075 (* (* 3.0 l_0_10_52) l_0_10_52)))
 (let ((?x29072 (* (* 3.0 l_0_10_51) l_0_10_51)))
 (let ((?x29069 (* (* 3.0 l_0_10_50) l_0_10_50)))
 (let ((?x30191 (+ (- (- (- (* (* (- 3.0) l_0_10_49) l_0_10_49) ?x29069) ?x29072) ?x29075) ?x29080)))
 (= (+ (+ (+ ?x30191 ?x29083) ?x29086) ?x29089) 0.0))))))))))))))
(assert
 (let ((?x29285 (* 6.0 l_0_10_73)))
 (let ((?x29286 (* ?x29285 l_0_10_77)))
 (let ((?x29281 (* 6.0 l_0_10_72)))
 (let ((?x29282 (* ?x29281 l_0_10_76)))
 (let ((?x29277 (* 6.0 l_0_10_71)))
 (let ((?x29278 (* ?x29277 l_0_10_75)))
 (let ((?x29273 (* 6.0 l_0_10_70)))
 (let ((?x29274 (* ?x29273 l_0_10_74)))
 (let ((?x29269 (* 6.0 l_0_10_52)))
 (let ((?x29270 (* ?x29269 l_0_10_56)))
 (let ((?x29265 (* 6.0 l_0_10_51)))
 (let ((?x29266 (* ?x29265 l_0_10_55)))
 (let ((?x29261 (* 6.0 l_0_10_50)))
 (let ((?x29262 (* ?x29261 l_0_10_54)))
 (let ((?x30199 (+ (- (- (- (* (* (- 6.0) l_0_10_49) l_0_10_53) ?x29262) ?x29266) ?x29270) ?x29274)))
 (= (+ (+ (+ ?x30199 ?x29278) ?x29282) ?x29286) 0.0)))))))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x29972 (* ?x26840 l_0_10_91)))
 (let ((?x29285 (* 6.0 l_0_10_73)))
 (let ((?x29401 (* ?x29285 l_0_10_82)))
 (let ((?x29281 (* 6.0 l_0_10_72)))
 (let ((?x29399 (* ?x29281 l_0_10_81)))
 (let ((?x29277 (* 6.0 l_0_10_71)))
 (let ((?x29397 (* ?x29277 l_0_10_80)))
 (let ((?x29273 (* 6.0 l_0_10_70)))
 (let ((?x29395 (* ?x29273 l_0_10_79)))
 (let ((?x29269 (* 6.0 l_0_10_52)))
 (let ((?x29392 (* ?x29269 l_0_10_61)))
 (let ((?x29265 (* 6.0 l_0_10_51)))
 (let ((?x29390 (* ?x29265 l_0_10_60)))
 (let ((?x29261 (* 6.0 l_0_10_50)))
 (let ((?x29388 (* ?x29261 l_0_10_59)))
 (let ((?x29257 (* 6.0 l_0_10_49)))
 (let ((?x29386 (* ?x29257 l_0_10_58)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x29912 (* ?x26803 l_0_10_175)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x17248 (* ?x26800 l_0_10_154)))
 (let ((?x18066 (- (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x17248) ?x29912) ?x29386) ?x29388)))
 (let ((?x30210 (+ (+ (+ (+ (+ (- (- ?x18066 ?x29390) ?x29392) ?x29395) ?x29397) ?x29399) ?x29401) ?x29972)))
 (= ?x30210 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26385 (* l_0_10_78 l_0_10_78)))
 (let ((?x29467 (* 3.0 ?x26385)))
 (let ((?x26382 (* l_0_10_77 l_0_10_77)))
 (let ((?x29464 (* 3.0 ?x26382)))
 (let ((?x26379 (* l_0_10_76 l_0_10_76)))
 (let ((?x29461 (* 3.0 ?x26379)))
 (let ((?x26376 (* l_0_10_75 l_0_10_75)))
 (let ((?x29458 (* 3.0 ?x26376)))
 (let ((?x26373 (* l_0_10_74 l_0_10_74)))
 (let ((?x29455 (* 3.0 ?x26373)))
 (let ((?x29452 (* (* 3.0 l_0_10_57) l_0_10_57)))
 (let ((?x29448 (* (* 3.0 l_0_10_56) l_0_10_56)))
 (let ((?x29444 (* (* 3.0 l_0_10_55) l_0_10_55)))
 (let ((?x29440 (* (* 3.0 l_0_10_54) l_0_10_54)))
 (let ((?x30218 (- (- (- (- (* (* (- 3.0) l_0_10_53) l_0_10_53) ?x29440) ?x29444) ?x29448) ?x29452)))
 (= (+ (+ (+ (+ (+ ?x30218 ?x29455) ?x29458) ?x29461) ?x29464) ?x29467) 0.0)))))))))))))))))
(assert
 (let ((?x26840 (* 2.0 l_0_10_85)))
 (let ((?x30080 (* ?x26840 l_0_10_95)))
 (let ((?x29520 (* (* 6.0 l_0_10_78) l_0_10_83)))
 (let ((?x29517 (* (* 6.0 l_0_10_77) l_0_10_82)))
 (let ((?x29514 (* (* 6.0 l_0_10_76) l_0_10_81)))
 (let ((?x29511 (* (* 6.0 l_0_10_75) l_0_10_80)))
 (let ((?x29508 (* (* 6.0 l_0_10_74) l_0_10_79)))
 (let ((?x29498 (* (* 6.0 l_0_10_57) l_0_10_62)))
 (let ((?x29495 (* (* 6.0 l_0_10_56) l_0_10_61)))
 (let ((?x29492 (* (* 6.0 l_0_10_55) l_0_10_60)))
 (let ((?x29489 (* (* 6.0 l_0_10_54) l_0_10_59)))
 (let ((?x29486 (* (* 6.0 l_0_10_53) l_0_10_58)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x30024 (* ?x26803 l_0_10_179)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x30022 (* ?x26800 l_0_10_158)))
 (let ((?x30228 (- (- (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_116) ?x30022) ?x30024) ?x29486) ?x29489)))
 (let ((?x30235 (+ (+ (+ (+ (- (- (- ?x30228 ?x29492) ?x29495) ?x29498) ?x29508) ?x29511) ?x29514) ?x29517)))
 (= (+ (+ ?x30235 ?x29520) ?x30080) 0.0))))))))))))))))))))
(assert
 (let ((?x26559 (* l_0_10_84 l_0_10_84)))
 (let ((?x29579 (* 3.0 ?x26559)))
 (let ((?x26556 (* l_0_10_83 l_0_10_83)))
 (let ((?x29577 (* 3.0 ?x26556)))
 (let ((?x26553 (* l_0_10_82 l_0_10_82)))
 (let ((?x29575 (* 3.0 ?x26553)))
 (let ((?x26550 (* l_0_10_81 l_0_10_81)))
 (let ((?x29573 (* 3.0 ?x26550)))
 (let ((?x26547 (* l_0_10_80 l_0_10_80)))
 (let ((?x29571 (* 3.0 ?x26547)))
 (let ((?x26544 (* l_0_10_79 l_0_10_79)))
 (let ((?x29569 (* 3.0 ?x26544)))
 (let ((?x29566 (* (* 3.0 l_0_10_63) l_0_10_63)))
 (let ((?x29563 (* (* 3.0 l_0_10_62) l_0_10_62)))
 (let ((?x29560 (* (* 3.0 l_0_10_61) l_0_10_61)))
 (let ((?x29557 (* (* 3.0 l_0_10_60) l_0_10_60)))
 (let ((?x29554 (* (* 3.0 l_0_10_59) l_0_10_59)))
 (let ((?x29551 (* (* 3.0 l_0_10_58) l_0_10_58)))
 (let ((?x26803 (* 2.0 l_0_10_169)))
 (let ((?x28072 (* ?x26803 l_0_10_184)))
 (let ((?x26800 (* 2.0 l_0_10_148)))
 (let ((?x28068 (* ?x26800 l_0_10_163)))
 (let ((?x10549 (* 2.0 l_0_10_106)))
 (let ((?x28064 (* ?x10549 l_0_10_121)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x28051 (* ?x27638 l_0_10_85)))
 (let ((?x30246 (- (- (- (- (+ (- (- ?x28051 ?x28064) ?x28068) ?x28072) ?x29551) ?x29554) ?x29557) ?x29560)))
 (let ((?x30253 (+ (+ (+ (+ (+ (- (- ?x30246 ?x29563) ?x29566) ?x29569) ?x29571) ?x29573) ?x29575) ?x29577)))
 (= (+ ?x30253 ?x29579) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x28575 (* l_0_10_69 l_0_10_69)))
 (let ((?x28572 (* l_0_10_68 l_0_10_68)))
 (let ((?x28569 (* l_0_10_67 l_0_10_67)))
 (let ((?x28616 (* l_0_10_48 l_0_10_48)))
 (let ((?x14876 (* l_0_10_47 l_0_10_47)))
 (let ((?x28608 (* l_0_10_46 l_0_10_46)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28808 (* ?x28540 l_0_10_139)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28806 (* ?x28520 l_0_10_138)))
 (let ((?x18340 (+ (+ (- (- (* (* (- 2.0) l_0_10_130) l_0_10_137) ?x28806) ?x28808) ?x28608) ?x14876)))
 (= (- (- (- (+ ?x18340 ?x28616) ?x28569) ?x28572) ?x28575) 0.0)))))))))))))
(assert
 (let ((?x30290 (* 2.0 l_0_10_90)))
 (let ((?x30291 (* ?x30290 l_0_10_97)))
 (let ((?x30287 (* 2.0 l_0_10_89)))
 (let ((?x30288 (* ?x30287 l_0_10_96)))
 (let ((?x30284 (* 2.0 l_0_10_88)))
 (let ((?x30285 (* ?x30284 l_0_10_95)))
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x29782 (* ?x27971 l_0_10_72)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x29780 (* ?x27968 l_0_10_71)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x29778 (* ?x27965 l_0_10_70)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x29774 (* ?x27960 l_0_10_51)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x29772 (* ?x27957 l_0_10_50)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x29770 (* ?x27954 l_0_10_49)))
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x30276 (* ?x28676 l_0_10_181)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x30274 (* ?x28673 l_0_10_180)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x30272 (* ?x28670 l_0_10_179)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x30270 (* ?x28667 l_0_10_160)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x30268 (* ?x28664 l_0_10_159)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x30266 (* ?x28661 l_0_10_158)))
 (let ((?x28658 (* 2.0 l_0_10_136)))
 (let ((?x29217 (* ?x28658 l_0_10_140)))
 (let ((?x28655 (* 2.0 l_0_10_135)))
 (let ((?x29215 (* ?x28655 l_0_10_139)))
 (let ((?x28652 (* 2.0 l_0_10_134)))
 (let ((?x29213 (* ?x28652 l_0_10_138)))
 (let ((?x28649 (* 2.0 l_0_10_133)))
 (let ((?x29211 (* ?x28649 l_0_10_137)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x30260 (* ?x28639 l_0_10_118)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x18509 (* ?x28636 l_0_10_117)))
 (let ((?x30263 (- (- (+ (+ (* (* 2.0 l_0_10_109) l_0_10_116) ?x18509) ?x30260) ?x29211) ?x29213)))
 (let ((?x30275 (- (- (+ (+ (+ (- (- ?x30263 ?x29215) ?x29217) ?x30266) ?x30268) ?x30270) ?x30272) ?x30274)))
 (let ((?x30283 (- (- (- (+ (+ (+ (- ?x30275 ?x30276) ?x29770) ?x29772) ?x29774) ?x29778) ?x29780) ?x29782)))
 (= (- (- (- ?x30283 ?x30285) ?x30288) ?x30291) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27971 (* 2.0 l_0_10_69)))
 (let ((?x29857 (* ?x27971 l_0_10_76)))
 (let ((?x27968 (* 2.0 l_0_10_68)))
 (let ((?x29855 (* ?x27968 l_0_10_75)))
 (let ((?x27965 (* 2.0 l_0_10_67)))
 (let ((?x29853 (* ?x27965 l_0_10_74)))
 (let ((?x27960 (* 2.0 l_0_10_48)))
 (let ((?x29850 (* ?x27960 l_0_10_55)))
 (let ((?x27957 (* 2.0 l_0_10_47)))
 (let ((?x29848 (* ?x27957 l_0_10_54)))
 (let ((?x27954 (* 2.0 l_0_10_46)))
 (let ((?x29846 (* ?x27954 l_0_10_53)))
 (let ((?x15846 (* l_0_10_141 l_0_10_141)))
 (let ((?x15839 (* l_0_10_140 l_0_10_140)))
 (let ((?x15800 (* l_0_10_139 l_0_10_139)))
 (let ((?x30312 (- (- (* (- l_0_10_137) l_0_10_137) (* l_0_10_138 l_0_10_138)) ?x15800)))
 (let ((?x30319 (- (- (+ (+ (+ (- (- ?x30312 ?x15839) ?x15846) ?x29846) ?x29848) ?x29850) ?x29853) ?x29855)))
 (= (- ?x30319 ?x29857) 0.0)))))))))))))))))))
(assert
 (let ((?x30353 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x30350 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x30347 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x30344 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x29088 (* l_0_10_73 l_0_10_73)))
 (let ((?x29085 (* l_0_10_72 l_0_10_72)))
 (let ((?x29082 (* l_0_10_71 l_0_10_71)))
 (let ((?x29079 (* l_0_10_70 l_0_10_70)))
 (let ((?x15208 (* l_0_10_52 l_0_10_52)))
 (let ((?x15248 (* l_0_10_51 l_0_10_51)))
 (let ((?x15217 (* l_0_10_50 l_0_10_50)))
 (let ((?x15211 (* l_0_10_49 l_0_10_49)))
 (let ((?x29050 (* 2.0 l_0_10_178)))
 (let ((?x30333 (* ?x29050 l_0_10_182)))
 (let ((?x29047 (* 2.0 l_0_10_177)))
 (let ((?x30331 (* ?x29047 l_0_10_181)))
 (let ((?x29044 (* 2.0 l_0_10_176)))
 (let ((?x30329 (* ?x29044 l_0_10_180)))
 (let ((?x29041 (* 2.0 l_0_10_175)))
 (let ((?x30327 (* ?x29041 l_0_10_179)))
 (let ((?x29038 (* 2.0 l_0_10_157)))
 (let ((?x30325 (* ?x29038 l_0_10_161)))
 (let ((?x29035 (* 2.0 l_0_10_156)))
 (let ((?x30323 (* ?x29035 l_0_10_160)))
 (let ((?x29032 (* 2.0 l_0_10_155)))
 (let ((?x18807 (* ?x29032 l_0_10_159)))
 (let ((?x29029 (* 2.0 l_0_10_154)))
 (let ((?x18818 (* ?x29029 l_0_10_158)))
 (let ((?x29018 (* 2.0 l_0_10_115)))
 (let ((?x18814 (* ?x29018 l_0_10_119)))
 (let ((?x29015 (* 2.0 l_0_10_114)))
 (let ((?x18821 (* ?x29015 l_0_10_118)))
 (let ((?x29012 (* 2.0 l_0_10_113)))
 (let ((?x18860 (* ?x29012 l_0_10_117)))
 (let ((?x18812 (+ (+ (+ (+ (* (* 2.0 l_0_10_112) l_0_10_116) ?x18860) ?x18821) ?x18814) ?x18818)))
 (let ((?x30334 (- (- (- (- (+ (+ (+ ?x18812 ?x18807) ?x30323) ?x30325) ?x30327) ?x30329) ?x30331) ?x30333)))
 (let ((?x30341 (- (- (- (+ (+ (+ (+ ?x30334 ?x15211) ?x15217) ?x15248) ?x15208) ?x29079) ?x29082) ?x29085)))
 (= (- (- (- (- (- ?x30341 ?x29088) ?x30344) ?x30347) ?x30350) ?x30353) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30431 (* l_0_10_99 l_0_10_99)))
 (let ((?x30429 (* l_0_10_98 l_0_10_98)))
 (let ((?x30427 (* l_0_10_97 l_0_10_97)))
 (let ((?x30425 (* l_0_10_96 l_0_10_96)))
 (let ((?x30423 (* l_0_10_95 l_0_10_95)))
 (let ((?x28165 (* 2.0 l_0_10_73)))
 (let ((?x30078 (* ?x28165 l_0_10_77)))
 (let ((?x28162 (* 2.0 l_0_10_72)))
 (let ((?x30076 (* ?x28162 l_0_10_76)))
 (let ((?x28159 (* 2.0 l_0_10_71)))
 (let ((?x30074 (* ?x28159 l_0_10_75)))
 (let ((?x28156 (* 2.0 l_0_10_70)))
 (let ((?x30072 (* ?x28156 l_0_10_74)))
 (let ((?x28151 (* 2.0 l_0_10_52)))
 (let ((?x30069 (* ?x28151 l_0_10_56)))
 (let ((?x28148 (* 2.0 l_0_10_51)))
 (let ((?x30067 (* ?x28148 l_0_10_55)))
 (let ((?x28145 (* 2.0 l_0_10_50)))
 (let ((?x30065 (* ?x28145 l_0_10_54)))
 (let ((?x28142 (* 2.0 l_0_10_49)))
 (let ((?x30063 (* ?x28142 l_0_10_53)))
 (let ((?x30413 (* l_0_10_183 l_0_10_183)))
 (let ((?x30411 (* l_0_10_182 l_0_10_182)))
 (let ((?x30409 (* l_0_10_181 l_0_10_181)))
 (let ((?x30407 (* l_0_10_180 l_0_10_180)))
 (let ((?x30405 (* l_0_10_179 l_0_10_179)))
 (let ((?x30403 (* l_0_10_162 l_0_10_162)))
 (let ((?x30401 (* l_0_10_161 l_0_10_161)))
 (let ((?x30399 (* l_0_10_160 l_0_10_160)))
 (let ((?x30397 (* l_0_10_159 l_0_10_159)))
 (let ((?x30395 (* l_0_10_158 l_0_10_158)))
 (let ((?x30393 (* l_0_10_120 l_0_10_120)))
 (let ((?x30391 (* l_0_10_119 l_0_10_119)))
 (let ((?x30389 (* l_0_10_118 l_0_10_118)))
 (let ((?x30390 (+ (+ (* l_0_10_116 l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x30389)))
 (let ((?x30404 (+ (+ (+ (+ (+ (+ (+ ?x30390 ?x30391) ?x30393) ?x30395) ?x30397) ?x30399) ?x30401) ?x30403)))
 (let ((?x30416 (+ (+ (- (- (- (- (- ?x30404 ?x30405) ?x30407) ?x30409) ?x30411) ?x30413) ?x30063) ?x30065)))
 (let ((?x30424 (- (- (- (- (- (+ (+ ?x30416 ?x30067) ?x30069) ?x30072) ?x30074) ?x30076) ?x30078) ?x30423)))
 (= (- (- (- (- ?x30424 ?x30425) ?x30427) ?x30429) ?x30431) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26385 (* l_0_10_78 l_0_10_78)))
 (let ((?x26382 (* l_0_10_77 l_0_10_77)))
 (let ((?x26379 (* l_0_10_76 l_0_10_76)))
 (let ((?x26376 (* l_0_10_75 l_0_10_75)))
 (let ((?x26373 (* l_0_10_74 l_0_10_74)))
 (let ((?x13311 (* l_0_10_57 l_0_10_57)))
 (let ((?x13305 (* l_0_10_56 l_0_10_56)))
 (let ((?x13247 (* l_0_10_55 l_0_10_55)))
 (let ((?x30460 (+ (+ (+ (* l_0_10_53 l_0_10_53) (* l_0_10_54 l_0_10_54)) ?x13247) ?x13305)))
 (= (- (- (- (- (- (+ ?x30460 ?x13311) ?x26373) ?x26376) ?x26379) ?x26382) ?x26385) 0.0)))))))))))
(assert
 (let ((?x30505 (* l_0_10_90 l_0_10_90)))
 (let ((?x30503 (* l_0_10_89 l_0_10_89)))
 (let ((?x30501 (* l_0_10_88 l_0_10_88)))
 (let ((?x30499 (* l_0_10_174 l_0_10_174)))
 (let ((?x30497 (* l_0_10_173 l_0_10_173)))
 (let ((?x30495 (* l_0_10_172 l_0_10_172)))
 (let ((?x30493 (* l_0_10_153 l_0_10_153)))
 (let ((?x30491 (* l_0_10_152 l_0_10_152)))
 (let ((?x30489 (* l_0_10_151 l_0_10_151)))
 (let ((?x28540 (* 2.0 l_0_10_132)))
 (let ((?x28647 (* ?x28540 l_0_10_135)))
 (let ((?x28520 (* 2.0 l_0_10_131)))
 (let ((?x28645 (* ?x28520 l_0_10_134)))
 (let ((?x28642 (* 2.0 l_0_10_130)))
 (let ((?x28643 (* ?x28642 l_0_10_133)))
 (let ((?x30484 (* l_0_10_111 l_0_10_111)))
 (let ((?x30485 (+ (+ (* l_0_10_109 l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x30484)))
 (let ((?x30496 (- (+ (+ (+ (- (- (- ?x30485 ?x28643) ?x28645) ?x28647) ?x30489) ?x30491) ?x30493) ?x30495)))
 (= (- (- (- (- (- ?x30496 ?x30497) ?x30499) ?x30501) ?x30503) ?x30505) 0.0))))))))))))))))))))
(assert
 (let ((?x30290 (* 2.0 l_0_10_90)))
 (let ((?x30554 (* ?x30290 l_0_10_93)))
 (let ((?x30287 (* 2.0 l_0_10_89)))
 (let ((?x30552 (* ?x30287 l_0_10_92)))
 (let ((?x30284 (* 2.0 l_0_10_88)))
 (let ((?x30550 (* ?x30284 l_0_10_91)))
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x30548 (* ?x28676 l_0_10_177)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x30546 (* ?x28673 l_0_10_176)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x30544 (* ?x28670 l_0_10_175)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x30542 (* ?x28667 l_0_10_156)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x30540 (* ?x28664 l_0_10_155)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x30538 (* ?x28661 l_0_10_154)))
 (let ((?x29027 (* l_0_10_136 l_0_10_136)))
 (let ((?x29025 (* l_0_10_135 l_0_10_135)))
 (let ((?x29023 (* l_0_10_134 l_0_10_134)))
 (let ((?x29021 (* l_0_10_133 l_0_10_133)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x30532 (* ?x28639 l_0_10_114)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x30530 (* ?x28636 l_0_10_113)))
 (let ((?x30535 (- (- (+ (+ (* (* 2.0 l_0_10_109) l_0_10_112) ?x30530) ?x30532) ?x29021) ?x29023)))
 (let ((?x30547 (- (- (+ (+ (+ (- (- ?x30535 ?x29025) ?x29027) ?x30538) ?x30540) ?x30542) ?x30544) ?x30546)))
 (= (- (- (- (- ?x30547 ?x30548) ?x30550) ?x30552) ?x30554) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30613 (* l_0_10_94 l_0_10_94)))
 (let ((?x30611 (* l_0_10_93 l_0_10_93)))
 (let ((?x30609 (* l_0_10_92 l_0_10_92)))
 (let ((?x30607 (* l_0_10_91 l_0_10_91)))
 (let ((?x30605 (* l_0_10_178 l_0_10_178)))
 (let ((?x30603 (* l_0_10_177 l_0_10_177)))
 (let ((?x30601 (* l_0_10_176 l_0_10_176)))
 (let ((?x30599 (* l_0_10_175 l_0_10_175)))
 (let ((?x30597 (* l_0_10_157 l_0_10_157)))
 (let ((?x30595 (* l_0_10_156 l_0_10_156)))
 (let ((?x30593 (* l_0_10_155 l_0_10_155)))
 (let ((?x30591 (* l_0_10_154 l_0_10_154)))
 (let ((?x30589 (* l_0_10_115 l_0_10_115)))
 (let ((?x30587 (* l_0_10_114 l_0_10_114)))
 (let ((?x30588 (+ (+ (* l_0_10_112 l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x30587)))
 (let ((?x30602 (- (- (+ (+ (+ (+ (+ ?x30588 ?x30589) ?x30591) ?x30593) ?x30595) ?x30597) ?x30599) ?x30601)))
 (= (- (- (- (- (- (- ?x30602 ?x30603) ?x30605) ?x30607) ?x30609) ?x30611) ?x30613) 0.0))))))))))))))))))
(assert
 (let ((?x27115 (* l_0_10_87 l_0_10_87)))
 (let ((?x27113 (* l_0_10_86 l_0_10_86)))
 (let ((?x27103 (* l_0_10_171 l_0_10_171)))
 (let ((?x27101 (* l_0_10_170 l_0_10_170)))
 (let ((?x27099 (* l_0_10_150 l_0_10_150)))
 (let ((?x27097 (* l_0_10_149 l_0_10_149)))
 (let ((?x30629 (- (- (* (- l_0_10_107) l_0_10_107) (* l_0_10_108 l_0_10_108)) ?x27097)))
 (= (+ (+ (+ (+ (- ?x30629 ?x27099) ?x27101) ?x27103) ?x27113) ?x27115) 0.0)))))))))
(assert
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27296 (* ?x27295 l_0_10_89)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27293 (* ?x27292 l_0_10_88)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27272 (* ?x27271 l_0_10_173)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27269 (* ?x27268 l_0_10_172)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27266 (* ?x27265 l_0_10_152)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27263 (* ?x27262 l_0_10_151)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27255 (* ?x27254 l_0_10_110)))
 (let ((?x30646 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_109) ?x27255) ?x27263) ?x27266) ?x27269)))
 (= (+ (+ (+ ?x30646 ?x27272) ?x27293) ?x27296) 0.0)))))))))))))))))
(assert
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27504 (* ?x27295 l_0_10_92)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27502 (* ?x27292 l_0_10_91)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27488 (* ?x27271 l_0_10_176)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27486 (* ?x27268 l_0_10_175)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27484 (* ?x27265 l_0_10_155)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27482 (* ?x27262 l_0_10_154)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27480 (* ?x27254 l_0_10_113)))
 (let ((?x30651 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_112) ?x27480) ?x27482) ?x27484) ?x27486)))
 (= (+ (+ (+ ?x30651 ?x27488) ?x27502) ?x27504) 0.0)))))))))))))))))
(assert
 (let ((?x27295 (* 2.0 l_0_10_87)))
 (let ((?x27573 (* ?x27295 l_0_10_96)))
 (let ((?x27292 (* 2.0 l_0_10_86)))
 (let ((?x27571 (* ?x27292 l_0_10_95)))
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27553 (* ?x27271 l_0_10_180)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27551 (* ?x27268 l_0_10_179)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27549 (* ?x27265 l_0_10_159)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27547 (* ?x27262 l_0_10_158)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27538 (* ?x27254 l_0_10_117)))
 (let ((?x19408 (+ (- (- (- (* (* (- 2.0) l_0_10_107) l_0_10_116) ?x27538) ?x27547) ?x27549) ?x27551)))
 (= (+ (+ (+ ?x19408 ?x27553) ?x27571) ?x27573) 0.0)))))))))))))))))
(assert
 (let ((?x27271 (* 2.0 l_0_10_171)))
 (let ((?x27660 (* ?x27271 l_0_10_185)))
 (let ((?x27268 (* 2.0 l_0_10_170)))
 (let ((?x27658 (* ?x27268 l_0_10_184)))
 (let ((?x27265 (* 2.0 l_0_10_150)))
 (let ((?x27652 (* ?x27265 l_0_10_164)))
 (let ((?x27262 (* 2.0 l_0_10_149)))
 (let ((?x27650 (* ?x27262 l_0_10_163)))
 (let ((?x27254 (* 2.0 l_0_10_108)))
 (let ((?x27646 (* ?x27254 l_0_10_122)))
 (let ((?x27252 (* 2.0 l_0_10_107)))
 (let ((?x27644 (* ?x27252 l_0_10_121)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x27642 (* ?x27641 l_0_10_87)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x27639 (* ?x27638 l_0_10_86)))
 (let ((?x30666 (+ (+ (- (- (- (- (+ ?x27639 ?x27642) ?x27644) ?x27646) ?x27650) ?x27652) ?x27658) ?x27660)))
 (= ?x30666 0.0)))))))))))))))))))
(assert
 (let ((?x30505 (* l_0_10_90 l_0_10_90)))
 (let ((?x30503 (* l_0_10_89 l_0_10_89)))
 (let ((?x30501 (* l_0_10_88 l_0_10_88)))
 (let ((?x30499 (* l_0_10_174 l_0_10_174)))
 (let ((?x30497 (* l_0_10_173 l_0_10_173)))
 (let ((?x30495 (* l_0_10_172 l_0_10_172)))
 (let ((?x30493 (* l_0_10_153 l_0_10_153)))
 (let ((?x30491 (* l_0_10_152 l_0_10_152)))
 (let ((?x30489 (* l_0_10_151 l_0_10_151)))
 (let ((?x30484 (* l_0_10_111 l_0_10_111)))
 (let ((?x17270 (- (- (* (- l_0_10_109) l_0_10_109) (* l_0_10_110 l_0_10_110)) ?x30484)))
 (let ((?x30671 (+ (+ (+ (+ (- (- (- ?x17270 ?x30489) ?x30491) ?x30493) ?x30495) ?x30497) ?x30499) ?x30501)))
 (= (+ (+ ?x30671 ?x30503) ?x30505) 0.0))))))))))))))
(assert
 (let ((?x30290 (* 2.0 l_0_10_90)))
 (let ((?x30554 (* ?x30290 l_0_10_93)))
 (let ((?x30287 (* 2.0 l_0_10_89)))
 (let ((?x30552 (* ?x30287 l_0_10_92)))
 (let ((?x30284 (* 2.0 l_0_10_88)))
 (let ((?x30550 (* ?x30284 l_0_10_91)))
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x30548 (* ?x28676 l_0_10_177)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x30546 (* ?x28673 l_0_10_176)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x30544 (* ?x28670 l_0_10_175)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x30542 (* ?x28667 l_0_10_156)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x30540 (* ?x28664 l_0_10_155)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x30538 (* ?x28661 l_0_10_154)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x30532 (* ?x28639 l_0_10_114)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x30530 (* ?x28636 l_0_10_113)))
 (let ((?x19533 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_112) ?x30530) ?x30532) ?x30538) ?x30540)))
 (let ((?x17482 (+ (+ (+ (+ (+ (+ (- ?x19533 ?x30542) ?x30544) ?x30546) ?x30548) ?x30550) ?x30552) ?x30554)))
 (= ?x17482 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30290 (* 2.0 l_0_10_90)))
 (let ((?x30291 (* ?x30290 l_0_10_97)))
 (let ((?x30287 (* 2.0 l_0_10_89)))
 (let ((?x30288 (* ?x30287 l_0_10_96)))
 (let ((?x30284 (* 2.0 l_0_10_88)))
 (let ((?x30285 (* ?x30284 l_0_10_95)))
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x30276 (* ?x28676 l_0_10_181)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x30274 (* ?x28673 l_0_10_180)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x30272 (* ?x28670 l_0_10_179)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x30270 (* ?x28667 l_0_10_160)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x30268 (* ?x28664 l_0_10_159)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x30266 (* ?x28661 l_0_10_158)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x30260 (* ?x28639 l_0_10_118)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x18509 (* ?x28636 l_0_10_117)))
 (let ((?x19618 (- (- (- (- (* (* (- 2.0) l_0_10_109) l_0_10_116) ?x18509) ?x30260) ?x30266) ?x30268)))
 (let ((?x30684 (+ (+ (+ (+ (+ (+ (- ?x19618 ?x30270) ?x30272) ?x30274) ?x30276) ?x30285) ?x30288) ?x30291)))
 (= ?x30684 0.0))))))))))))))))))))))))))
(assert
 (let ((?x28676 (* 2.0 l_0_10_174)))
 (let ((?x28677 (* ?x28676 l_0_10_186)))
 (let ((?x28673 (* 2.0 l_0_10_173)))
 (let ((?x28674 (* ?x28673 l_0_10_185)))
 (let ((?x28670 (* 2.0 l_0_10_172)))
 (let ((?x28671 (* ?x28670 l_0_10_184)))
 (let ((?x28667 (* 2.0 l_0_10_153)))
 (let ((?x28668 (* ?x28667 l_0_10_165)))
 (let ((?x28664 (* 2.0 l_0_10_152)))
 (let ((?x28665 (* ?x28664 l_0_10_164)))
 (let ((?x28661 (* 2.0 l_0_10_151)))
 (let ((?x28662 (* ?x28661 l_0_10_163)))
 (let ((?x28639 (* 2.0 l_0_10_111)))
 (let ((?x28640 (* ?x28639 l_0_10_123)))
 (let ((?x28636 (* 2.0 l_0_10_110)))
 (let ((?x28637 (* ?x28636 l_0_10_122)))
 (let ((?x28633 (* 2.0 l_0_10_109)))
 (let ((?x28634 (* ?x28633 l_0_10_121)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x28631 (* ?x28630 l_0_10_90)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x28628 (* ?x27641 l_0_10_89)))
 (let ((?x30689 (- (- (+ (+ (* (* 2.0 l_0_10_100) l_0_10_88) ?x28628) ?x28631) ?x28634) ?x28637)))
 (let ((?x30696 (+ (+ (+ (- (- (- (- ?x30689 ?x28640) ?x28662) ?x28665) ?x28668) ?x28671) ?x28674) ?x28677)))
 (= ?x30696 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30613 (* l_0_10_94 l_0_10_94)))
 (let ((?x30611 (* l_0_10_93 l_0_10_93)))
 (let ((?x30609 (* l_0_10_92 l_0_10_92)))
 (let ((?x30607 (* l_0_10_91 l_0_10_91)))
 (let ((?x30605 (* l_0_10_178 l_0_10_178)))
 (let ((?x30603 (* l_0_10_177 l_0_10_177)))
 (let ((?x30601 (* l_0_10_176 l_0_10_176)))
 (let ((?x30599 (* l_0_10_175 l_0_10_175)))
 (let ((?x30597 (* l_0_10_157 l_0_10_157)))
 (let ((?x30595 (* l_0_10_156 l_0_10_156)))
 (let ((?x30593 (* l_0_10_155 l_0_10_155)))
 (let ((?x30591 (* l_0_10_154 l_0_10_154)))
 (let ((?x30589 (* l_0_10_115 l_0_10_115)))
 (let ((?x30587 (* l_0_10_114 l_0_10_114)))
 (let ((?x19789 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x30587)))
 (let ((?x19689 (+ (+ (- (- (- (- (- ?x19789 ?x30589) ?x30591) ?x30593) ?x30595) ?x30597) ?x30599) ?x30601)))
 (= (+ (+ (+ (+ (+ (+ ?x19689 ?x30603) ?x30605) ?x30607) ?x30609) ?x30611) ?x30613) 0.0))))))))))))))))))
(assert
 (let ((?x30353 (* (* 2.0 l_0_10_94) l_0_10_98)))
 (let ((?x30350 (* (* 2.0 l_0_10_93) l_0_10_97)))
 (let ((?x30347 (* (* 2.0 l_0_10_92) l_0_10_96)))
 (let ((?x30344 (* (* 2.0 l_0_10_91) l_0_10_95)))
 (let ((?x29050 (* 2.0 l_0_10_178)))
 (let ((?x30333 (* ?x29050 l_0_10_182)))
 (let ((?x29047 (* 2.0 l_0_10_177)))
 (let ((?x30331 (* ?x29047 l_0_10_181)))
 (let ((?x29044 (* 2.0 l_0_10_176)))
 (let ((?x30329 (* ?x29044 l_0_10_180)))
 (let ((?x29041 (* 2.0 l_0_10_175)))
 (let ((?x30327 (* ?x29041 l_0_10_179)))
 (let ((?x29038 (* 2.0 l_0_10_157)))
 (let ((?x30325 (* ?x29038 l_0_10_161)))
 (let ((?x29035 (* 2.0 l_0_10_156)))
 (let ((?x30323 (* ?x29035 l_0_10_160)))
 (let ((?x29032 (* 2.0 l_0_10_155)))
 (let ((?x18807 (* ?x29032 l_0_10_159)))
 (let ((?x29029 (* 2.0 l_0_10_154)))
 (let ((?x18818 (* ?x29029 l_0_10_158)))
 (let ((?x29018 (* 2.0 l_0_10_115)))
 (let ((?x18814 (* ?x29018 l_0_10_119)))
 (let ((?x29015 (* 2.0 l_0_10_114)))
 (let ((?x18821 (* ?x29015 l_0_10_118)))
 (let ((?x29012 (* 2.0 l_0_10_113)))
 (let ((?x18860 (* ?x29012 l_0_10_117)))
 (let ((?x18221 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_116) ?x18860) ?x18821) ?x18814) ?x18818)))
 (let ((?x30699 (+ (+ (+ (+ (- (- (- ?x18221 ?x18807) ?x30323) ?x30325) ?x30327) ?x30329) ?x30331) ?x30333)))
 (= (+ (+ (+ (+ ?x30699 ?x30344) ?x30347) ?x30350) ?x30353) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x29050 (* 2.0 l_0_10_178)))
 (let ((?x29051 (* ?x29050 l_0_10_187)))
 (let ((?x29047 (* 2.0 l_0_10_177)))
 (let ((?x29048 (* ?x29047 l_0_10_186)))
 (let ((?x29044 (* 2.0 l_0_10_176)))
 (let ((?x29045 (* ?x29044 l_0_10_185)))
 (let ((?x29041 (* 2.0 l_0_10_175)))
 (let ((?x29042 (* ?x29041 l_0_10_184)))
 (let ((?x29038 (* 2.0 l_0_10_157)))
 (let ((?x29039 (* ?x29038 l_0_10_166)))
 (let ((?x29035 (* 2.0 l_0_10_156)))
 (let ((?x29036 (* ?x29035 l_0_10_165)))
 (let ((?x29032 (* 2.0 l_0_10_155)))
 (let ((?x29033 (* ?x29032 l_0_10_164)))
 (let ((?x29029 (* 2.0 l_0_10_154)))
 (let ((?x29030 (* ?x29029 l_0_10_163)))
 (let ((?x29018 (* 2.0 l_0_10_115)))
 (let ((?x29019 (* ?x29018 l_0_10_124)))
 (let ((?x29015 (* 2.0 l_0_10_114)))
 (let ((?x29016 (* ?x29015 l_0_10_123)))
 (let ((?x29012 (* 2.0 l_0_10_113)))
 (let ((?x29013 (* ?x29012 l_0_10_122)))
 (let ((?x29009 (* 2.0 l_0_10_112)))
 (let ((?x29010 (* ?x29009 l_0_10_121)))
 (let ((?x29006 (* 2.0 l_0_10_103)))
 (let ((?x29007 (* ?x29006 l_0_10_94)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x29004 (* ?x28630 l_0_10_93)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x29002 (* ?x27641 l_0_10_92)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x29000 (* ?x27638 l_0_10_91)))
 (let ((?x19853 (- (- (- (- (+ (+ (+ ?x29000 ?x29002) ?x29004) ?x29007) ?x29010) ?x29013) ?x29016) ?x29019)))
 (let ((?x30715 (+ (+ (+ (- (- (- (- ?x19853 ?x29030) ?x29033) ?x29036) ?x29039) ?x29042) ?x29045) ?x29048)))
 (= (+ ?x30715 ?x29051) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30431 (* l_0_10_99 l_0_10_99)))
 (let ((?x30429 (* l_0_10_98 l_0_10_98)))
 (let ((?x30427 (* l_0_10_97 l_0_10_97)))
 (let ((?x30425 (* l_0_10_96 l_0_10_96)))
 (let ((?x30423 (* l_0_10_95 l_0_10_95)))
 (let ((?x30413 (* l_0_10_183 l_0_10_183)))
 (let ((?x30411 (* l_0_10_182 l_0_10_182)))
 (let ((?x30409 (* l_0_10_181 l_0_10_181)))
 (let ((?x30407 (* l_0_10_180 l_0_10_180)))
 (let ((?x30405 (* l_0_10_179 l_0_10_179)))
 (let ((?x30403 (* l_0_10_162 l_0_10_162)))
 (let ((?x30401 (* l_0_10_161 l_0_10_161)))
 (let ((?x30399 (* l_0_10_160 l_0_10_160)))
 (let ((?x30397 (* l_0_10_159 l_0_10_159)))
 (let ((?x30395 (* l_0_10_158 l_0_10_158)))
 (let ((?x30393 (* l_0_10_120 l_0_10_120)))
 (let ((?x30391 (* l_0_10_119 l_0_10_119)))
 (let ((?x30389 (* l_0_10_118 l_0_10_118)))
 (let ((?x19942 (- (- (* (- l_0_10_116) l_0_10_116) (* l_0_10_117 l_0_10_117)) ?x30389)))
 (let ((?x18540 (- (- (- (- (- (- (- ?x19942 ?x30391) ?x30393) ?x30395) ?x30397) ?x30399) ?x30401) ?x30403)))
 (let ((?x30722 (+ (+ (+ (+ (+ (+ (+ ?x18540 ?x30405) ?x30407) ?x30409) ?x30411) ?x30413) ?x30423) ?x30425)))
 (= (+ (+ (+ ?x30722 ?x30427) ?x30429) ?x30431) 0.0)))))))))))))))))))))))
(assert
 (let ((?x29247 (* (* 2.0 l_0_10_183) l_0_10_188)))
 (let ((?x29244 (* (* 2.0 l_0_10_182) l_0_10_187)))
 (let ((?x29241 (* (* 2.0 l_0_10_181) l_0_10_186)))
 (let ((?x29238 (* (* 2.0 l_0_10_180) l_0_10_185)))
 (let ((?x29235 (* (* 2.0 l_0_10_179) l_0_10_184)))
 (let ((?x29232 (* (* 2.0 l_0_10_162) l_0_10_167)))
 (let ((?x29229 (* (* 2.0 l_0_10_161) l_0_10_166)))
 (let ((?x29226 (* (* 2.0 l_0_10_160) l_0_10_165)))
 (let ((?x29223 (* (* 2.0 l_0_10_159) l_0_10_164)))
 (let ((?x29220 (* (* 2.0 l_0_10_158) l_0_10_163)))
 (let ((?x29207 (* (* 2.0 l_0_10_120) l_0_10_125)))
 (let ((?x29202 (* (* 2.0 l_0_10_119) l_0_10_124)))
 (let ((?x29199 (* (* 2.0 l_0_10_118) l_0_10_123)))
 (let ((?x29196 (* (* 2.0 l_0_10_117) l_0_10_122)))
 (let ((?x29193 (* (* 2.0 l_0_10_116) l_0_10_121)))
 (let ((?x29188 (* (* 2.0 l_0_10_104) l_0_10_99)))
 (let ((?x29006 (* 2.0 l_0_10_103)))
 (let ((?x29185 (* ?x29006 l_0_10_98)))
 (let ((?x28630 (* 2.0 l_0_10_102)))
 (let ((?x29183 (* ?x28630 l_0_10_97)))
 (let ((?x27641 (* 2.0 l_0_10_101)))
 (let ((?x29181 (* ?x27641 l_0_10_96)))
 (let ((?x27638 (* 2.0 l_0_10_100)))
 (let ((?x29179 (* ?x27638 l_0_10_95)))
 (let ((?x20085 (- (- (- (+ (+ (+ (+ ?x29179 ?x29181) ?x29183) ?x29185) ?x29188) ?x29193) ?x29196) ?x29199)))
 (let ((?x20070 (- (- (- (- (- (- (- ?x20085 ?x29202) ?x29207) ?x29220) ?x29223) ?x29226) ?x29229) ?x29232)))
 (= (+ (+ (+ (+ (+ ?x20070 ?x29235) ?x29238) ?x29241) ?x29244) ?x29247) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x29379 (* l_0_10_189 l_0_10_189)))
 (let ((?x29377 (* l_0_10_188 l_0_10_188)))
 (let ((?x29375 (* l_0_10_187 l_0_10_187)))
 (let ((?x29373 (* l_0_10_186 l_0_10_186)))
 (let ((?x29371 (* l_0_10_185 l_0_10_185)))
 (let ((?x29369 (* l_0_10_184 l_0_10_184)))
 (let ((?x29365 (* l_0_10_168 l_0_10_168)))
 (let ((?x29363 (* l_0_10_167 l_0_10_167)))
 (let ((?x29361 (* l_0_10_166 l_0_10_166)))
 (let ((?x29359 (* l_0_10_165 l_0_10_165)))
 (let ((?x29357 (* l_0_10_164 l_0_10_164)))
 (let ((?x29355 (* l_0_10_163 l_0_10_163)))
 (let ((?x29348 (* l_0_10_126 l_0_10_126)))
 (let ((?x29346 (* l_0_10_125 l_0_10_125)))
 (let ((?x29344 (* l_0_10_124 l_0_10_124)))
 (let ((?x29342 (* l_0_10_123 l_0_10_123)))
 (let ((?x29340 (* l_0_10_122 l_0_10_122)))
 (let ((?x29338 (* l_0_10_121 l_0_10_121)))
 (let ((?x29336 (* l_0_10_105 l_0_10_105)))
 (let ((?x29334 (* l_0_10_104 l_0_10_104)))
 (let ((?x29332 (* l_0_10_103 l_0_10_103)))
 (let ((?x29330 (* l_0_10_102 l_0_10_102)))
 (let ((?x20224 (+ (+ (* l_0_10_100 l_0_10_100) (* l_0_10_101 l_0_10_101)) ?x29330)))
 (let ((?x18811 (- (- (- (- (+ (+ (+ ?x20224 ?x29332) ?x29334) ?x29336) ?x29338) ?x29340) ?x29342) ?x29344)))
 (let ((?x30732 (- (- (- (- (- (- (- ?x18811 ?x29346) ?x29348) ?x29355) ?x29357) ?x29359) ?x29361) ?x29363)))
 (let ((?x30739 (+ (+ (+ (+ (+ (+ (- ?x30732 ?x29365) ?x29369) ?x29371) ?x29373) ?x29375) ?x29377) ?x29379)))
 (= ?x30739 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x28543 (* l_0_10_132 l_0_10_132)))
 (let ((?x20282 (- (- (* (- l_0_10_130) l_0_10_130) (* l_0_10_131 l_0_10_131)) ?x28543)))
 (= ?x20282 0.0))))
(assert
 (>= l_0_10_1 0.0))
(assert
 (>= l_0_10_3 0.0))
(assert
 (>= l_0_10_6 0.0))
(assert
 (>= l_0_10_10 0.0))
(assert
 (>= l_0_10_15 0.0))
(assert
 (>= l_0_10_21 0.0))
(assert
 (>= l_0_10_22 0.0))
(assert
 (>= l_0_10_24 0.0))
(assert
 (>= l_0_10_27 0.0))
(assert
 (>= l_0_10_31 0.0))
(assert
 (>= l_0_10_36 0.0))
(assert
 (>= l_0_10_42 0.0))
(assert
 (>= l_0_10_43 0.0))
(assert
 (>= l_0_10_45 0.0))
(assert
 (>= l_0_10_48 0.0))
(assert
 (>= l_0_10_52 0.0))
(assert
 (>= l_0_10_57 0.0))
(assert
 (>= l_0_10_63 0.0))
(assert
 (>= l_0_10_64 0.0))
(assert
 (>= l_0_10_66 0.0))
(assert
 (>= l_0_10_69 0.0))
(assert
 (>= l_0_10_73 0.0))
(assert
 (>= l_0_10_78 0.0))
(assert
 (>= l_0_10_84 0.0))
(assert
 (>= l_0_10_85 0.0))
(assert
 (>= l_0_10_87 0.0))
(assert
 (>= l_0_10_90 0.0))
(assert
 (>= l_0_10_94 0.0))
(assert
 (>= l_0_10_99 0.0))
(assert
 (>= l_0_10_105 0.0))
(assert
 (>= l_0_10_106 0.0))
(assert
 (>= l_0_10_108 0.0))
(assert
 (>= l_0_10_111 0.0))
(assert
 (>= l_0_10_115 0.0))
(assert
 (>= l_0_10_120 0.0))
(assert
 (>= l_0_10_126 0.0))
(assert
 (>= l_0_10_127 0.0))
(assert
 (>= l_0_10_129 0.0))
(assert
 (>= l_0_10_132 0.0))
(assert
 (>= l_0_10_136 0.0))
(assert
 (>= l_0_10_141 0.0))
(assert
 (>= l_0_10_147 0.0))
(assert
 (>= l_0_10_148 0.0))
(assert
 (>= l_0_10_150 0.0))
(assert
 (>= l_0_10_153 0.0))
(assert
 (>= l_0_10_157 0.0))
(assert
 (>= l_0_10_162 0.0))
(assert
 (>= l_0_10_168 0.0))
(assert
 (>= l_0_10_169 0.0))
(assert
 (>= l_0_10_171 0.0))
(assert
 (>= l_0_10_174 0.0))
(assert
 (>= l_0_10_178 0.0))
(assert
 (>= l_0_10_183 0.0))
(assert
 (>= l_0_10_189 0.0))
(assert
 (>= l_0_10_190 0.0))
(assert
 (>= l_0_10_192 0.0))
(assert
 (>= l_0_10_195 0.0))
(assert
 (>= l_0_10_199 0.0))
(assert
 (>= l_0_10_204 0.0))
(assert
 (>= l_0_10_210 0.0))
(assert
 (>= l_0_10_211 0.0))
(assert
 (>= l_0_10_213 0.0))
(assert
 (>= l_0_10_216 0.0))
(assert
 (>= l_0_10_220 0.0))
(assert
 (>= l_0_10_225 0.0))
(assert
 (>= l_0_10_231 0.0))
(assert
 (>= l_0_10_232 0.0))
(assert
 (>= l_0_10_234 0.0))
(assert
 (>= l_0_10_237 0.0))
(assert
 (>= l_0_10_241 0.0))
(assert
 (>= l_0_10_246 0.0))
(assert
 (>= l_0_10_252 0.0))
(assert
 (>= l_0_10_253 0.0))
(assert
 (>= l_0_10_255 0.0))
(assert
 (>= l_0_10_258 0.0))
(assert
 (>= l_0_10_262 0.0))
(assert
 (>= l_0_10_267 0.0))
(assert
 (>= l_0_10_273 0.0))
(assert
 (let ((?x30835 (* l_0_11_274 l_0_11_274)))
 (let ((?x30833 (* l_0_11_253 l_0_11_253)))
 (let ((?x30831 (* l_0_11_232 l_0_11_232)))
 (let ((?x30829 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x30826 (* l_0_11_211 l_0_11_211)))
 (let ((?x30824 (* l_0_11_190 l_0_11_190)))
 (let ((?x30830 (- (- (- (+ _a_0_ (* 6.0 (* l_0_11_1 l_0_11_1))) ?x30824) ?x30826) ?x30829)))
 (let ((?x30839 (- (- (- (- ?x30830 ?x30831) ?x30833) ?x30835) (* (* 1.0 l_0_11_43) l_0_11_43))))
 (= (- (+ ?x30839 (* 1.0 (* l_0_11_64 l_0_11_64))) 1.0) 0.0))))))))))
(assert
 (let ((?x30893 (* l_0_11_85 l_0_11_85)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x30891 (* ?x30890 l_0_11_70)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x30888 (* ?x30887 l_0_11_49)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x30876 (* ?x30875 l_0_11_28)))
 (let ((?x30867 (* l_0_11_169 l_0_11_169)))
 (let ((?x30865 (* l_0_11_148 l_0_11_148)))
 (let ((?x30863 (* l_0_11_106 l_0_11_106)))
 (let ((?x30868 (- (+ (+ (+ _a_1_ (* (* 12.0 l_0_11_1) l_0_11_7)) ?x30863) ?x30865) ?x30867)))
 (let ((?x30874 (- (- ?x30868 (* (* 2.0 l_0_11_190) l_0_11_196)) (* (* 2.0 l_0_11_211) l_0_11_217))))
 (let ((?x30883 (- (- (- ?x30874 ?x30876) (* (* 2.0 l_0_11_232) l_0_11_238)) (* (* 2.0 l_0_11_253) l_0_11_259))))
 (let ((?x30894 (- (+ (- (- ?x30883 (* (* 2.0 l_0_11_274) l_0_11_280)) ?x30888) ?x30891) ?x30893)))
 (= ?x30894 0.0))))))))))))))))
(assert
 (let ((?x31030 (* l_0_11_9 l_0_11_9)))
 (let ((?x31031 (* 6.0 ?x31030)))
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x31028 (* ?x31027 l_0_11_91)))
 (let ((?x31024 (* l_0_11_8 l_0_11_8)))
 (let ((?x31025 (* 6.0 ?x31024)))
 (let ((?x31009 (* l_0_11_7 l_0_11_7)))
 (let ((?x31010 (* 6.0 ?x31009)))
 (let ((?x30995 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x30992 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x30989 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x30986 (* l_0_11_283 l_0_11_283)))
 (let ((?x30984 (* l_0_11_282 l_0_11_282)))
 (let ((?x30982 (* l_0_11_281 l_0_11_281)))
 (let ((?x30980 (* l_0_11_280 l_0_11_280)))
 (let ((?x30978 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x30975 (* l_0_11_262 l_0_11_262)))
 (let ((?x30973 (* l_0_11_261 l_0_11_261)))
 (let ((?x30971 (* l_0_11_260 l_0_11_260)))
 (let ((?x30969 (* l_0_11_259 l_0_11_259)))
 (let ((?x30967 (* l_0_11_241 l_0_11_241)))
 (let ((?x30965 (* l_0_11_240 l_0_11_240)))
 (let ((?x30963 (* l_0_11_239 l_0_11_239)))
 (let ((?x30961 (* l_0_11_238 l_0_11_238)))
 (let ((?x30959 (* l_0_11_220 l_0_11_220)))
 (let ((?x30957 (* l_0_11_219 l_0_11_219)))
 (let ((?x30955 (* l_0_11_218 l_0_11_218)))
 (let ((?x30953 (* l_0_11_217 l_0_11_217)))
 (let ((?x30951 (* l_0_11_199 l_0_11_199)))
 (let ((?x30949 (* l_0_11_198 l_0_11_198)))
 (let ((?x30947 (* l_0_11_197 l_0_11_197)))
 (let ((?x30945 (* l_0_11_196 l_0_11_196)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x30943 (* ?x30942 l_0_11_175)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x30940 (* ?x30939 l_0_11_154)))
 (let ((?x30938 (+ (+ _a_2_ (* 6.0 (* l_0_11_10 l_0_11_10))) (* (* 2.0 l_0_11_106) l_0_11_112))))
 (let ((?x30954 (- (- (- (- (- (- (+ ?x30938 ?x30940) ?x30943) ?x30945) ?x30947) ?x30949) ?x30951) ?x30953)))
 (let ((?x30968 (- (- (- (- (- (- (- ?x30954 ?x30955) ?x30957) ?x30959) ?x30961) ?x30963) ?x30965) ?x30967)))
 (let ((?x30983 (- (- (- (- (- (- (- ?x30968 ?x30969) ?x30971) ?x30973) ?x30975) ?x30978) ?x30980) ?x30982)))
 (let ((?x30999 (- (- (- (- (- (- ?x30983 ?x30984) ?x30986) ?x30989) ?x30992) ?x30995) (* (* 1.0 l_0_11_49) l_0_11_49))))
 (let ((?x31005 (- (- ?x30999 (* (* 1.0 l_0_11_50) l_0_11_50)) (* (* 1.0 l_0_11_51) l_0_11_51))))
 (let ((?x31014 (+ (+ (- ?x31005 (* (* 1.0 l_0_11_52) l_0_11_52)) ?x31010) (* 1.0 (* l_0_11_70 l_0_11_70)))))
 (let ((?x31020 (+ (+ ?x31014 (* 1.0 (* l_0_11_71 l_0_11_71))) (* 1.0 (* l_0_11_72 l_0_11_72)))))
 (let ((?x31032 (+ (- (+ (+ ?x31020 (* 1.0 (* l_0_11_73 l_0_11_73))) ?x31025) ?x31028) ?x31031)))
 (= ?x31032 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* l_0_11_64 l_0_11_64)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31127 (* ?x30890 l_0_11_74)))
 (let ((?x20329 (* l_0_11_43 l_0_11_43)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31124 (* ?x30887 l_0_11_53)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31116 (* ?x30875 l_0_11_32)))
 (let ((?x31113 (- (+ _a_3_ (* (* 12.0 l_0_11_1) l_0_11_11)) (* (* 2.0 l_0_11_190) l_0_11_200))))
 (let ((?x31119 (- (- (- ?x31113 (* (* 2.0 l_0_11_211) l_0_11_221)) ?x31116) (* (* 2.0 l_0_11_232) l_0_11_242))))
 (let ((?x31123 (- (- ?x31119 (* (* 2.0 l_0_11_253) l_0_11_263)) (* (* 2.0 l_0_11_274) l_0_11_284))))
 (= (- (+ (+ (- ?x31123 ?x31124) ?x20329) ?x31127) ?x30840) 0.0)))))))))))))
(assert
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31127 (* ?x30890 l_0_11_74)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31124 (* ?x30887 l_0_11_53)))
 (let ((?x31233 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x31230 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x31227 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x31224 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x31221 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x31218 (* l_0_11_288 l_0_11_288)))
 (let ((?x31216 (* l_0_11_287 l_0_11_287)))
 (let ((?x31214 (* l_0_11_286 l_0_11_286)))
 (let ((?x31212 (* l_0_11_285 l_0_11_285)))
 (let ((?x31210 (* l_0_11_284 l_0_11_284)))
 (let ((?x31208 (* l_0_11_267 l_0_11_267)))
 (let ((?x31206 (* l_0_11_266 l_0_11_266)))
 (let ((?x31204 (* l_0_11_265 l_0_11_265)))
 (let ((?x31202 (* l_0_11_264 l_0_11_264)))
 (let ((?x31200 (* l_0_11_263 l_0_11_263)))
 (let ((?x31198 (* l_0_11_246 l_0_11_246)))
 (let ((?x31196 (* l_0_11_245 l_0_11_245)))
 (let ((?x31194 (* l_0_11_244 l_0_11_244)))
 (let ((?x31192 (* l_0_11_243 l_0_11_243)))
 (let ((?x31190 (* l_0_11_242 l_0_11_242)))
 (let ((?x31188 (* l_0_11_225 l_0_11_225)))
 (let ((?x31186 (* l_0_11_224 l_0_11_224)))
 (let ((?x31184 (* l_0_11_223 l_0_11_223)))
 (let ((?x31182 (* l_0_11_222 l_0_11_222)))
 (let ((?x31180 (* l_0_11_221 l_0_11_221)))
 (let ((?x31178 (* l_0_11_204 l_0_11_204)))
 (let ((?x31176 (* l_0_11_203 l_0_11_203)))
 (let ((?x31174 (* l_0_11_202 l_0_11_202)))
 (let ((?x31172 (* l_0_11_201 l_0_11_201)))
 (let ((?x31170 (* l_0_11_200 l_0_11_200)))
 (let ((?x31167 (* l_0_11_15 l_0_11_15)))
 (let ((?x31168 (* 6.0 ?x31167)))
 (let ((?x31164 (* l_0_11_14 l_0_11_14)))
 (let ((?x31165 (* 6.0 ?x31164)))
 (let ((?x31161 (* l_0_11_13 l_0_11_13)))
 (let ((?x31162 (* 6.0 ?x31161)))
 (let ((?x31158 (* l_0_11_12 l_0_11_12)))
 (let ((?x31159 (* 6.0 ?x31158)))
 (let ((?x31166 (+ (+ (+ (+ _a_4_ (* 6.0 (* l_0_11_11 l_0_11_11))) ?x31159) ?x31162) ?x31165)))
 (let ((?x31181 (- (- (- (- (- (- (+ ?x31166 ?x31168) ?x31170) ?x31172) ?x31174) ?x31176) ?x31178) ?x31180)))
 (let ((?x31195 (- (- (- (- (- (- (- ?x31181 ?x31182) ?x31184) ?x31186) ?x31188) ?x31190) ?x31192) ?x31194)))
 (let ((?x31209 (- (- (- (- (- (- (- ?x31195 ?x31196) ?x31198) ?x31200) ?x31202) ?x31204) ?x31206) ?x31208)))
 (let ((?x31225 (- (- (- (- (- (- (- ?x31209 ?x31210) ?x31212) ?x31214) ?x31216) ?x31218) ?x31221) ?x31224)))
 (let ((?x31238 (- (+ (- (- (- ?x31225 ?x31227) ?x31230) ?x31233) ?x31124) (* (* 1.0 l_0_11_53) l_0_11_53))))
 (let ((?x31244 (- (- ?x31238 (* (* 1.0 l_0_11_54) l_0_11_54)) (* (* 1.0 l_0_11_55) l_0_11_55))))
 (let ((?x31250 (- (- ?x31244 (* (* 1.0 l_0_11_56) l_0_11_56)) (* (* 1.0 l_0_11_57) l_0_11_57))))
 (let ((?x31257 (+ (+ (- ?x31250 ?x31127) (* 1.0 (* l_0_11_74 l_0_11_74))) (* 1.0 (* l_0_11_75 l_0_11_75)))))
 (let ((?x31263 (+ (+ ?x31257 (* 1.0 (* l_0_11_76 l_0_11_76))) (* 1.0 (* l_0_11_77 l_0_11_77)))))
 (= (+ ?x31263 (* 1.0 (* l_0_11_78 l_0_11_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x31459 (* ?x31027 l_0_11_95)))
 (let ((?x31456 (* 2.0 l_0_11_73)))
 (let ((?x31457 (* ?x31456 l_0_11_77)))
 (let ((?x31453 (* 2.0 l_0_11_72)))
 (let ((?x31454 (* ?x31453 l_0_11_76)))
 (let ((?x31450 (* 2.0 l_0_11_71)))
 (let ((?x31451 (* ?x31450 l_0_11_75)))
 (let ((?x31447 (* 2.0 l_0_11_70)))
 (let ((?x31448 (* ?x31447 l_0_11_74)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x30891 (* ?x30890 l_0_11_70)))
 (let ((?x31443 (* 2.0 l_0_11_52)))
 (let ((?x31444 (* ?x31443 l_0_11_56)))
 (let ((?x31440 (* 2.0 l_0_11_51)))
 (let ((?x31441 (* ?x31440 l_0_11_55)))
 (let ((?x31437 (* 2.0 l_0_11_50)))
 (let ((?x31438 (* ?x31437 l_0_11_54)))
 (let ((?x31434 (* 2.0 l_0_11_49)))
 (let ((?x31435 (* ?x31434 l_0_11_53)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x30888 (* ?x30887 l_0_11_49)))
 (let ((?x31430 (* 12.0 l_0_11_31)))
 (let ((?x31431 (* ?x31430 l_0_11_35)))
 (let ((?x31427 (* 12.0 l_0_11_30)))
 (let ((?x31428 (* ?x31427 l_0_11_34)))
 (let ((?x31424 (* 12.0 l_0_11_29)))
 (let ((?x31425 (* ?x31424 l_0_11_33)))
 (let ((?x31409 (* 12.0 l_0_11_28)))
 (let ((?x31410 (* ?x31409 l_0_11_32)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x31359 (* ?x30942 l_0_11_179)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x31357 (* ?x30939 l_0_11_158)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x31355 (* ?x31354 l_0_11_9)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x31352 (* ?x31351 l_0_11_8)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x31349 (* ?x31348 l_0_11_7)))
 (let ((?x31347 (+ (+ _a_5_ (* (* 12.0 l_0_11_10) l_0_11_14)) (* (* 2.0 l_0_11_106) l_0_11_116))))
 (let ((?x31363 (- (- (+ (+ (+ (+ ?x31347 ?x31349) ?x31352) ?x31355) ?x31357) ?x31359) (* (* 2.0 l_0_11_196) l_0_11_200))))
 (let ((?x31369 (- (- ?x31363 (* (* 2.0 l_0_11_197) l_0_11_201)) (* (* 2.0 l_0_11_198) l_0_11_202))))
 (let ((?x31375 (- (- ?x31369 (* (* 2.0 l_0_11_199) l_0_11_203)) (* (* 2.0 l_0_11_217) l_0_11_221))))
 (let ((?x31381 (- (- ?x31375 (* (* 2.0 l_0_11_218) l_0_11_222)) (* (* 2.0 l_0_11_219) l_0_11_223))))
 (let ((?x31387 (- (- ?x31381 (* (* 2.0 l_0_11_220) l_0_11_224)) (* (* 2.0 l_0_11_238) l_0_11_242))))
 (let ((?x31393 (- (- ?x31387 (* (* 2.0 l_0_11_239) l_0_11_243)) (* (* 2.0 l_0_11_240) l_0_11_244))))
 (let ((?x31399 (- (- ?x31393 (* (* 2.0 l_0_11_241) l_0_11_245)) (* (* 2.0 l_0_11_259) l_0_11_263))))
 (let ((?x31405 (- (- ?x31399 (* (* 2.0 l_0_11_260) l_0_11_264)) (* (* 2.0 l_0_11_261) l_0_11_265))))
 (let ((?x31414 (- (- (- ?x31405 (* (* 2.0 l_0_11_262) l_0_11_266)) ?x31410) (* (* 2.0 l_0_11_280) l_0_11_284))))
 (let ((?x31420 (- (- ?x31414 (* (* 2.0 l_0_11_281) l_0_11_285)) (* (* 2.0 l_0_11_282) l_0_11_286))))
 (let ((?x31432 (- (- (- (- ?x31420 (* (* 2.0 l_0_11_283) l_0_11_287)) ?x31425) ?x31428) ?x31431)))
 (let ((?x31449 (+ (- (- (- (- (- (+ ?x31432 ?x30888) ?x31435) ?x31438) ?x31441) ?x31444) ?x30891) ?x31448)))
 (= (- (+ (+ (+ ?x31449 ?x31451) ?x31454) ?x31457) ?x31459) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30893 (* l_0_11_85 l_0_11_85)))
 (let ((?x31662 (* l_0_11_84 l_0_11_84)))
 (let ((?x31663 (* 3.0 ?x31662)))
 (let ((?x31659 (* l_0_11_83 l_0_11_83)))
 (let ((?x31660 (* 3.0 ?x31659)))
 (let ((?x31656 (* l_0_11_82 l_0_11_82)))
 (let ((?x31657 (* 3.0 ?x31656)))
 (let ((?x31653 (* l_0_11_81 l_0_11_81)))
 (let ((?x31654 (* 3.0 ?x31653)))
 (let ((?x31650 (* l_0_11_80 l_0_11_80)))
 (let ((?x31651 (* 3.0 ?x31650)))
 (let ((?x31647 (* l_0_11_79 l_0_11_79)))
 (let ((?x31648 (* 3.0 ?x31647)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x31645 (* ?x31644 l_0_11_79)))
 (let ((?x31642 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x31639 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x31636 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x31633 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x31630 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x31627 (* (* 3.0 l_0_11_58) l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x31624 (* ?x31623 l_0_11_58)))
 (let ((?x31621 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x31618 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x31615 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x31612 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x31609 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x31606 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x31602 (* l_0_11_21 l_0_11_21)))
 (let ((?x31603 (* 6.0 ?x31602)))
 (let ((?x31599 (* l_0_11_20 l_0_11_20)))
 (let ((?x31600 (* 6.0 ?x31599)))
 (let ((?x31596 (* l_0_11_19 l_0_11_19)))
 (let ((?x31597 (* 6.0 ?x31596)))
 (let ((?x31593 (* l_0_11_18 l_0_11_18)))
 (let ((?x31594 (* 6.0 ?x31593)))
 (let ((?x31590 (* l_0_11_17 l_0_11_17)))
 (let ((?x31591 (* 6.0 ?x31590)))
 (let ((?x30867 (* l_0_11_169 l_0_11_169)))
 (let ((?x31586 (* l_0_11_16 l_0_11_16)))
 (let ((?x31587 (* 6.0 ?x31586)))
 (let ((?x30865 (* l_0_11_148 l_0_11_148)))
 (let ((?x31583 (* l_0_11_147 l_0_11_147)))
 (let ((?x31581 (* l_0_11_146 l_0_11_146)))
 (let ((?x31579 (* l_0_11_145 l_0_11_145)))
 (let ((?x31577 (* l_0_11_144 l_0_11_144)))
 (let ((?x31575 (* l_0_11_143 l_0_11_143)))
 (let ((?x31576 (+ (+ (* (- l_0_11_106) l_0_11_106) (* l_0_11_142 l_0_11_142)) ?x31575)))
 (let ((?x31589 (+ (+ (- (+ (+ (+ (+ ?x31576 ?x31577) ?x31579) ?x31581) ?x31583) ?x30865) ?x31587) ?x30867)))
 (let ((?x31610 (- (- (+ (+ (+ (+ (+ ?x31589 ?x31591) ?x31594) ?x31597) ?x31600) ?x31603) ?x31606) ?x31609)))
 (let ((?x31631 (- (- (- (- (- (- (- ?x31610 ?x31612) ?x31615) ?x31618) ?x31621) ?x31624) ?x31627) ?x31630)))
 (let ((?x31652 (+ (+ (+ (- (- (- (- ?x31631 ?x31633) ?x31636) ?x31639) ?x31642) ?x31645) ?x31648) ?x31651)))
 (= (- (+ (+ (+ (+ (+ ?x31652 ?x31654) ?x31657) ?x31660) ?x31663) ?x30893) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* l_0_11_64 l_0_11_64)))
 (let ((?x31828 (* 3.0 ?x30840)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x31645 (* ?x31644 l_0_11_79)))
 (let ((?x31807 (* (* 3.0 l_0_11_43) l_0_11_43)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x31624 (* ?x31623 l_0_11_58)))
 (let ((?x31621 (* (* 6.0 l_0_11_42) l_0_11_42)))
 (let ((?x31618 (* (* 6.0 l_0_11_41) l_0_11_41)))
 (let ((?x31615 (* (* 6.0 l_0_11_40) l_0_11_40)))
 (let ((?x31612 (* (* 6.0 l_0_11_39) l_0_11_39)))
 (let ((?x31609 (* (* 6.0 l_0_11_38) l_0_11_38)))
 (let ((?x31606 (* (* 6.0 l_0_11_37) l_0_11_37)))
 (let ((?x31797 (* l_0_11_294 l_0_11_294)))
 (let ((?x31795 (* l_0_11_293 l_0_11_293)))
 (let ((?x31793 (* l_0_11_292 l_0_11_292)))
 (let ((?x31791 (* l_0_11_291 l_0_11_291)))
 (let ((?x31789 (* l_0_11_290 l_0_11_290)))
 (let ((?x31787 (* l_0_11_289 l_0_11_289)))
 (let ((?x31785 (* l_0_11_273 l_0_11_273)))
 (let ((?x31783 (* l_0_11_272 l_0_11_272)))
 (let ((?x31781 (* l_0_11_271 l_0_11_271)))
 (let ((?x31779 (* l_0_11_270 l_0_11_270)))
 (let ((?x31777 (* l_0_11_269 l_0_11_269)))
 (let ((?x31775 (* l_0_11_268 l_0_11_268)))
 (let ((?x31773 (* l_0_11_252 l_0_11_252)))
 (let ((?x31771 (* l_0_11_251 l_0_11_251)))
 (let ((?x31769 (* l_0_11_250 l_0_11_250)))
 (let ((?x31767 (* l_0_11_249 l_0_11_249)))
 (let ((?x31765 (* l_0_11_248 l_0_11_248)))
 (let ((?x31763 (* l_0_11_247 l_0_11_247)))
 (let ((?x31761 (* l_0_11_231 l_0_11_231)))
 (let ((?x31759 (* l_0_11_230 l_0_11_230)))
 (let ((?x31757 (* l_0_11_229 l_0_11_229)))
 (let ((?x31755 (* l_0_11_228 l_0_11_228)))
 (let ((?x31753 (* l_0_11_227 l_0_11_227)))
 (let ((?x31751 (* l_0_11_226 l_0_11_226)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31749 (* ?x30875 l_0_11_37)))
 (let ((?x31747 (* l_0_11_210 l_0_11_210)))
 (let ((?x31602 (* l_0_11_21 l_0_11_21)))
 (let ((?x31603 (* 6.0 ?x31602)))
 (let ((?x31744 (* l_0_11_209 l_0_11_209)))
 (let ((?x31742 (* l_0_11_208 l_0_11_208)))
 (let ((?x31740 (* l_0_11_207 l_0_11_207)))
 (let ((?x31738 (* l_0_11_206 l_0_11_206)))
 (let ((?x31736 (* l_0_11_205 l_0_11_205)))
 (let ((?x31599 (* l_0_11_20 l_0_11_20)))
 (let ((?x31600 (* 6.0 ?x31599)))
 (let ((?x31596 (* l_0_11_19 l_0_11_19)))
 (let ((?x31597 (* 6.0 ?x31596)))
 (let ((?x31593 (* l_0_11_18 l_0_11_18)))
 (let ((?x31594 (* 6.0 ?x31593)))
 (let ((?x31590 (* l_0_11_17 l_0_11_17)))
 (let ((?x31591 (* 6.0 ?x31590)))
 (let ((?x31586 (* l_0_11_16 l_0_11_16)))
 (let ((?x31587 (* 6.0 ?x31586)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x31729 (* ?x31728 l_0_11_142)))
 (let ((?x20330 (* 12.0 l_0_11_1)))
 (let ((?x31727 (* ?x20330 l_0_11_16)))
 (let ((?x31737 (- (+ (+ (+ (+ (+ (+ ?x31727 ?x31729) ?x31587) ?x31591) ?x31594) ?x31597) ?x31600) ?x31736)))
 (let ((?x31750 (- (- (+ (- (- (- (- ?x31737 ?x31738) ?x31740) ?x31742) ?x31744) ?x31603) ?x31747) ?x31749)))
 (let ((?x31764 (- (- (- (- (- (- (- ?x31750 ?x31751) ?x31753) ?x31755) ?x31757) ?x31759) ?x31761) ?x31763)))
 (let ((?x31778 (- (- (- (- (- (- (- ?x31764 ?x31765) ?x31767) ?x31769) ?x31771) ?x31773) ?x31775) ?x31777)))
 (let ((?x31792 (- (- (- (- (- (- (- ?x31778 ?x31779) ?x31781) ?x31783) ?x31785) ?x31787) ?x31789) ?x31791)))
 (let ((?x31802 (- (- (- (- (- (- (- ?x31792 ?x31793) ?x31795) ?x31797) ?x31606) ?x31609) ?x31612) ?x31615)))
 (let ((?x31811 (- (- (- (- (- ?x31802 ?x31618) ?x31621) ?x31624) ?x31807) (* (* 1.0 l_0_11_58) l_0_11_58))))
 (let ((?x31817 (- (- ?x31811 (* (* 1.0 l_0_11_59) l_0_11_59)) (* (* 1.0 l_0_11_60) l_0_11_60))))
 (let ((?x31823 (- (- ?x31817 (* (* 1.0 l_0_11_61) l_0_11_61)) (* (* 1.0 l_0_11_62) l_0_11_62))))
 (let ((?x31831 (+ (+ (+ (- ?x31823 (* (* 1.0 l_0_11_63) l_0_11_63)) ?x31645) ?x31828) (* 1.0 (* l_0_11_79 l_0_11_79)))))
 (let ((?x31835 (+ (+ ?x31831 (* 1.0 (* l_0_11_80 l_0_11_80))) (* 1.0 (* l_0_11_81 l_0_11_81)))))
 (let ((?x31839 (+ (+ ?x31835 (* 1.0 (* l_0_11_82 l_0_11_82))) (* 1.0 (* l_0_11_83 l_0_11_83)))))
 (= (- (+ ?x31839 (* 1.0 (* l_0_11_84 l_0_11_84))) 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* l_0_11_64 l_0_11_64)))
 (let ((?x31828 (* 3.0 ?x30840)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31923 (* ?x30890 l_0_11_79)))
 (let ((?x31807 (* (* 3.0 l_0_11_43) l_0_11_43)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31920 (* ?x30887 l_0_11_58)))
 (let ((?x30829 (* (* 6.0 l_0_11_22) l_0_11_22)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31749 (* ?x30875 l_0_11_37)))
 (let ((?x31906 (* l_0_11_127 l_0_11_127)))
 (let ((?x30821 (* l_0_11_1 l_0_11_1)))
 (let ((?x30822 (* 6.0 ?x30821)))
 (let ((?x20330 (* 12.0 l_0_11_1)))
 (let ((?x31727 (* ?x20330 l_0_11_16)))
 (let ((?x31911 (- (- (+ (+ ?x31727 ?x30822) ?x31906) (* (* 2.0 l_0_11_190) l_0_11_205)) (* (* 2.0 l_0_11_211) l_0_11_226))))
 (let ((?x31917 (- (- (- (- ?x31911 ?x31749) ?x30829) (* (* 2.0 l_0_11_232) l_0_11_247)) (* (* 2.0 l_0_11_253) l_0_11_268))))
 (let ((?x31924 (+ (- (- (- ?x31917 (* (* 2.0 l_0_11_274) l_0_11_289)) ?x31920) ?x31807) ?x31923)))
 (= (- (+ ?x31924 ?x31828) 3.0) 0.0))))))))))))))))))))
(assert
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31973 (* ?x30890 l_0_11_65)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31971 (* ?x30887 l_0_11_44)))
 (let ((?x16926 (* l_0_11_22 l_0_11_22)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31962 (* ?x30875 l_0_11_23)))
 (let ((?x31959 (- (- (* (* 12.0 l_0_11_1) l_0_11_2) (* l_0_11_1 l_0_11_1)) (* (* 2.0 l_0_11_190) l_0_11_191))))
 (let ((?x31966 (- (+ (- (- ?x31959 (* (* 2.0 l_0_11_211) l_0_11_212)) ?x31962) ?x16926) (* (* 2.0 l_0_11_232) l_0_11_233))))
 (let ((?x31970 (- (- ?x31966 (* (* 2.0 l_0_11_253) l_0_11_254)) (* (* 2.0 l_0_11_274) l_0_11_275))))
 (= (+ (- ?x31970 ?x31971) ?x31973) 0.0))))))))))))
(assert
 (let ((?x32049 (* l_0_11_3 l_0_11_3)))
 (let ((?x32050 (* 6.0 ?x32049)))
 (let ((?x32047 (* l_0_11_276 l_0_11_276)))
 (let ((?x32045 (* l_0_11_275 l_0_11_275)))
 (let ((?x32043 (* l_0_11_255 l_0_11_255)))
 (let ((?x32041 (* l_0_11_254 l_0_11_254)))
 (let ((?x32039 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x32036 (* l_0_11_234 l_0_11_234)))
 (let ((?x32034 (* l_0_11_233 l_0_11_233)))
 (let ((?x32032 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x32026 (* l_0_11_213 l_0_11_213)))
 (let ((?x32024 (* l_0_11_212 l_0_11_212)))
 (let ((?x32021 (* l_0_11_2 l_0_11_2)))
 (let ((?x32022 (* 6.0 ?x32021)))
 (let ((?x32019 (* l_0_11_192 l_0_11_192)))
 (let ((?x32020 (- (- (* (* (- 2.0) l_0_11_1) l_0_11_2) (* l_0_11_191 l_0_11_191)) ?x32019)))
 (let ((?x32030 (+ (- (- (+ ?x32020 ?x32022) ?x32024) ?x32026) (* (* 2.0 l_0_11_22) l_0_11_23))))
 (let ((?x32046 (- (- (- (- (- (- (- ?x32030 ?x32032) ?x32034) ?x32036) ?x32039) ?x32041) ?x32043) ?x32045)))
 (let ((?x32057 (- (- (+ (- ?x32046 ?x32047) ?x32050) (* (* 1.0 l_0_11_44) l_0_11_44)) (* (* 1.0 l_0_11_45) l_0_11_45))))
 (let ((?x32063 (+ (+ ?x32057 (* 1.0 (* l_0_11_65 l_0_11_65))) (* 1.0 (* l_0_11_66 l_0_11_66)))))
 (= ?x32063 0.0))))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32167 (* ?x32166 l_0_11_68)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32164 (* ?x32163 l_0_11_67)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32161 (* ?x32160 l_0_11_47)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32158 (* ?x32157 l_0_11_46)))
 (let ((?x32154 (* 12.0 l_0_11_3)))
 (let ((?x32155 (* ?x32154 l_0_11_5)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32140 (* ?x32139 l_0_11_26)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32131 (* ?x32130 l_0_11_25)))
 (let ((?x32119 (* 12.0 l_0_11_2)))
 (let ((?x32120 (* ?x32119 l_0_11_4)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x32111 (* ?x31728 l_0_11_128)))
 (let ((?x32115 (- (- (* (* (- 2.0) l_0_11_1) l_0_11_4) ?x32111) (* (* 2.0 l_0_11_191) l_0_11_193))))
 (let ((?x32124 (- (+ (- ?x32115 (* (* 2.0 l_0_11_192) l_0_11_194)) ?x32120) (* (* 2.0 l_0_11_212) l_0_11_214))))
 (let ((?x32129 (+ (- ?x32124 (* (* 2.0 l_0_11_213) l_0_11_215)) (* (* 2.0 l_0_11_22) l_0_11_25))))
 (let ((?x32138 (- (- (- ?x32129 ?x32131) (* (* 2.0 l_0_11_233) l_0_11_235)) (* (* 2.0 l_0_11_234) l_0_11_236))))
 (let ((?x32147 (- (- (- ?x32138 ?x32140) (* (* 2.0 l_0_11_254) l_0_11_256)) (* (* 2.0 l_0_11_255) l_0_11_257))))
 (let ((?x32153 (- (- ?x32147 (* (* 2.0 l_0_11_275) l_0_11_277)) (* (* 2.0 l_0_11_276) l_0_11_278))))
 (= (+ (+ (- (- (+ ?x32153 ?x32155) ?x32158) ?x32161) ?x32164) ?x32167) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x32276 (* ?x31027 l_0_11_86)))
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32274 (* ?x32166 l_0_11_71)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32272 (* ?x32163 l_0_11_70)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32270 (* ?x32160 l_0_11_50)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32268 (* ?x32157 l_0_11_49)))
 (let ((?x32154 (* 12.0 l_0_11_3)))
 (let ((?x32266 (* ?x32154 l_0_11_8)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32256 (* ?x32139 l_0_11_29)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32250 (* ?x32130 l_0_11_28)))
 (let ((?x32119 (* 12.0 l_0_11_2)))
 (let ((?x32242 (* ?x32119 l_0_11_7)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x32236 (* ?x30942 l_0_11_170)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x32234 (* ?x30939 l_0_11_149)))
 (let ((?x32233 (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) (* (* 2.0 l_0_11_106) l_0_11_107))))
 (let ((?x32241 (- (- (- (+ ?x32233 ?x32234) ?x32236) (* (* 2.0 l_0_11_191) l_0_11_196)) (* (* 2.0 l_0_11_192) l_0_11_197))))
 (let ((?x32247 (- (- (+ ?x32241 ?x32242) (* (* 2.0 l_0_11_212) l_0_11_217)) (* (* 2.0 l_0_11_213) l_0_11_218))))
 (let ((?x32253 (- (- (+ ?x32247 (* (* 2.0 l_0_11_22) l_0_11_28)) ?x32250) (* (* 2.0 l_0_11_233) l_0_11_238))))
 (let ((?x32259 (- (- (- ?x32253 (* (* 2.0 l_0_11_234) l_0_11_239)) ?x32256) (* (* 2.0 l_0_11_254) l_0_11_259))))
 (let ((?x32263 (- (- ?x32259 (* (* 2.0 l_0_11_255) l_0_11_260)) (* (* 2.0 l_0_11_275) l_0_11_280))))
 (let ((?x32271 (- (- (+ (- ?x32263 (* (* 2.0 l_0_11_276) l_0_11_281)) ?x32266) ?x32268) ?x32270)))
 (= (- (+ (+ ?x32271 ?x32272) ?x32274) ?x32276) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32388 (* ?x32166 l_0_11_75)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32386 (* ?x32163 l_0_11_74)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31973 (* ?x30890 l_0_11_65)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32383 (* ?x32160 l_0_11_54)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32381 (* ?x32157 l_0_11_53)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31971 (* ?x30887 l_0_11_44)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32370 (* ?x32139 l_0_11_33)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32364 (* ?x32130 l_0_11_32)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x32352 (* ?x31351 l_0_11_3)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x32350 (* ?x31348 l_0_11_2)))
 (let ((?x32355 (- (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_11) ?x32350) ?x32352) (* (* 2.0 l_0_11_191) l_0_11_200))))
 (let ((?x32359 (- (- ?x32355 (* (* 2.0 l_0_11_192) l_0_11_201)) (* (* 2.0 l_0_11_212) l_0_11_221))))
 (let ((?x32363 (+ (- ?x32359 (* (* 2.0 l_0_11_213) l_0_11_222)) (* (* 2.0 l_0_11_22) l_0_11_32))))
 (let ((?x32369 (- (- (- ?x32363 ?x32364) (* (* 2.0 l_0_11_233) l_0_11_242)) (* (* 2.0 l_0_11_234) l_0_11_243))))
 (let ((?x32375 (- (- (- ?x32369 ?x32370) (* (* 2.0 l_0_11_254) l_0_11_263)) (* (* 2.0 l_0_11_255) l_0_11_264))))
 (let ((?x32379 (- (- ?x32375 (* (* 2.0 l_0_11_275) l_0_11_284)) (* (* 2.0 l_0_11_276) l_0_11_285))))
 (= (+ (+ (- (- (- (+ ?x32379 ?x31971) ?x32381) ?x32383) ?x31973) ?x32386) ?x32388) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32517 (* ?x32166 l_0_11_80)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32515 (* ?x32163 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x32513 (* ?x31644 l_0_11_65)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32511 (* ?x32160 l_0_11_59)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32509 (* ?x32157 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x32507 (* ?x31623 l_0_11_44)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32497 (* ?x32139 l_0_11_38)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32491 (* ?x32130 l_0_11_37)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31962 (* ?x30875 l_0_11_23)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x32478 (* ?x32477 l_0_11_3)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x32475 (* ?x32474 l_0_11_2)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x32111 (* ?x31728 l_0_11_128)))
 (let ((?x20330 (* 12.0 l_0_11_1)))
 (let ((?x31956 (* ?x20330 l_0_11_2)))
 (let ((?x32479 (+ (+ (+ (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x31956) ?x32111) ?x32475) ?x32478)))
 (let ((?x32483 (- (- ?x32479 (* (* 2.0 l_0_11_191) l_0_11_205)) (* (* 2.0 l_0_11_192) l_0_11_206))))
 (let ((?x32487 (- (- ?x32483 (* (* 2.0 l_0_11_212) l_0_11_226)) (* (* 2.0 l_0_11_213) l_0_11_227))))
 (let ((?x32494 (- (- (+ (- ?x32487 ?x31962) (* (* 2.0 l_0_11_22) l_0_11_37)) ?x32491) (* (* 2.0 l_0_11_233) l_0_11_247))))
 (let ((?x32500 (- (- (- ?x32494 (* (* 2.0 l_0_11_234) l_0_11_248)) ?x32497) (* (* 2.0 l_0_11_254) l_0_11_268))))
 (let ((?x32504 (- (- ?x32500 (* (* 2.0 l_0_11_255) l_0_11_269)) (* (* 2.0 l_0_11_275) l_0_11_289))))
 (let ((?x32512 (- (- (- (- ?x32504 (* (* 2.0 l_0_11_276) l_0_11_290)) ?x32507) ?x32509) ?x32511)))
 (= (+ (+ (+ ?x32512 ?x32513) ?x32515) ?x32517) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32049 (* l_0_11_3 l_0_11_3)))
 (let ((?x32089 (* l_0_11_24 l_0_11_24)))
 (let ((?x32597 (- (+ (+ (* (- l_0_11_2) l_0_11_2) (* l_0_11_23 l_0_11_23)) ?x32089) ?x32049)))
 (= ?x32597 0.0)))))
(assert
 (let ((?x32612 (- (- (* (- l_0_11_128) l_0_11_128) (* l_0_11_129 l_0_11_129)) (* (* 2.0 l_0_11_2) l_0_11_4))))
 (let ((?x32618 (+ (+ ?x32612 (* (* 2.0 l_0_11_23) l_0_11_25)) (* (* 2.0 l_0_11_24) l_0_11_26))))
 (= (- ?x32618 (* (* 2.0 l_0_11_3) l_0_11_5)) 0.0))))
(assert
 (let ((?x32664 (* l_0_11_87 l_0_11_87)))
 (let ((?x32662 (* l_0_11_86 l_0_11_86)))
 (let ((?x32652 (* l_0_11_171 l_0_11_171)))
 (let ((?x32650 (* l_0_11_170 l_0_11_170)))
 (let ((?x32648 (* l_0_11_150 l_0_11_150)))
 (let ((?x32646 (* l_0_11_149 l_0_11_149)))
 (let ((?x32647 (+ (+ (* l_0_11_107 l_0_11_107) (* l_0_11_108 l_0_11_108)) ?x32646)))
 (let ((?x32655 (- (- (- (+ ?x32647 ?x32648) ?x32650) ?x32652) (* (* 2.0 l_0_11_2) l_0_11_7))))
 (let ((?x32659 (+ (+ ?x32655 (* (* 2.0 l_0_11_23) l_0_11_28)) (* (* 2.0 l_0_11_24) l_0_11_29))))
 (= (- (- (- ?x32659 (* (* 2.0 l_0_11_3) l_0_11_8)) ?x32662) ?x32664) 0.0)))))))))))
(assert
 (let ((?x32061 (* l_0_11_66 l_0_11_66)))
 (let ((?x32058 (* l_0_11_65 l_0_11_65)))
 (let ((?x32104 (* l_0_11_45 l_0_11_45)))
 (let ((?x21380 (* l_0_11_44 l_0_11_44)))
 (let ((?x32693 (- (* (* (- 2.0) l_0_11_11) l_0_11_2) (* (* 2.0 l_0_11_12) l_0_11_3))))
 (let ((?x32697 (+ (+ ?x32693 (* (* 2.0 l_0_11_23) l_0_11_32)) (* (* 2.0 l_0_11_24) l_0_11_33))))
 (= (- (- (+ (+ ?x32697 ?x21380) ?x32104) ?x32058) ?x32061) 0.0))))))))
(assert
 (let ((?x32061 (* l_0_11_66 l_0_11_66)))
 (let ((?x32736 (* 3.0 ?x32061)))
 (let ((?x32058 (* l_0_11_65 l_0_11_65)))
 (let ((?x32734 (* 3.0 ?x32058)))
 (let ((?x32732 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (let ((?x32049 (* l_0_11_3 l_0_11_3)))
 (let ((?x32050 (* 6.0 ?x32049)))
 (let ((?x32039 (* (* 6.0 l_0_11_24) l_0_11_24)))
 (let ((?x32032 (* (* 6.0 l_0_11_23) l_0_11_23)))
 (let ((?x32021 (* l_0_11_2 l_0_11_2)))
 (let ((?x32022 (* 6.0 ?x32021)))
 (let ((?x32716 (- (+ (* l_0_11_128 l_0_11_128) (* l_0_11_129 l_0_11_129)) (* (* 2.0 l_0_11_16) l_0_11_2))))
 (let ((?x32722 (+ (+ (- ?x32716 (* (* 2.0 l_0_11_17) l_0_11_3)) ?x32022) (* (* 2.0 l_0_11_23) l_0_11_37))))
 (let ((?x32727 (+ (- (+ (- ?x32722 ?x32032) (* (* 2.0 l_0_11_24) l_0_11_38)) ?x32039) ?x32050)))
 (let ((?x32737 (+ (+ (- (- ?x32727 (* (* 3.0 l_0_11_44) l_0_11_44)) ?x32732) ?x32734) ?x32736)))
 (= ?x32737 0.0)))))))))))))))))
(assert
 (let ((?x32779 (* l_0_11_6 l_0_11_6)))
 (let ((?x32777 (* l_0_11_5 l_0_11_5)))
 (let ((?x32775 (* l_0_11_4 l_0_11_4)))
 (let ((?x32773 (* l_0_11_27 l_0_11_27)))
 (let ((?x32771 (* l_0_11_26 l_0_11_26)))
 (let ((?x32769 (* l_0_11_25 l_0_11_25)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32767 (* ?x32766 l_0_11_131)))
 (let ((?x32774 (+ (+ (+ (- (* (* (- 2.0) l_0_11_128) l_0_11_130) ?x32767) ?x32769) ?x32771) ?x32773)))
 (= (- (- (- ?x32774 ?x32775) ?x32777) ?x32779) 0.0)))))))))))
(assert
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x32843 (* ?x32842 l_0_11_89)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x32840 (* ?x32839 l_0_11_88)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x32819 (* ?x32818 l_0_11_173)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x32816 (* ?x32815 l_0_11_172)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x32813 (* ?x32812 l_0_11_152)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x32810 (* ?x32809 l_0_11_151)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32807 (* ?x32766 l_0_11_134)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32805 (* ?x32804 l_0_11_133)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x32802 (* ?x32801 l_0_11_110)))
 (let ((?x32811 (+ (- (- (+ (* (* 2.0 l_0_11_107) l_0_11_109) ?x32802) ?x32805) ?x32807) ?x32810)))
 (let ((?x32823 (+ (- (- (+ ?x32811 ?x32813) ?x32816) ?x32819) (* (* 2.0 l_0_11_25) l_0_11_28))))
 (let ((?x32829 (+ (+ ?x32823 (* (* 2.0 l_0_11_26) l_0_11_29)) (* (* 2.0 l_0_11_27) l_0_11_30))))
 (let ((?x32835 (- (- ?x32829 (* (* 2.0 l_0_11_4) l_0_11_7)) (* (* 2.0 l_0_11_5) l_0_11_8))))
 (= (- (- (- ?x32835 (* (* 2.0 l_0_11_6) l_0_11_9)) ?x32840) ?x32843) 0.0))))))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32167 (* ?x32166 l_0_11_68)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32164 (* ?x32163 l_0_11_67)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32161 (* ?x32160 l_0_11_47)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32158 (* ?x32157 l_0_11_46)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32908 (* ?x32766 l_0_11_138)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32906 (* ?x32804 l_0_11_137)))
 (let ((?x32905 (- (* (* (- 2.0) l_0_11_11) l_0_11_4) (* (* 2.0 l_0_11_12) l_0_11_5))))
 (let ((?x32914 (+ (- (- (- ?x32905 ?x32906) ?x32908) (* (* 2.0 l_0_11_13) l_0_11_6)) (* (* 2.0 l_0_11_25) l_0_11_32))))
 (let ((?x32918 (+ (+ ?x32914 (* (* 2.0 l_0_11_26) l_0_11_33)) (* (* 2.0 l_0_11_27) l_0_11_34))))
 (= (- (- (+ (+ ?x32918 ?x32158) ?x32161) ?x32164) ?x32167) 0.0)))))))))))))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x32980 (* ?x32979 l_0_11_68)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x32977 (* ?x32976 l_0_11_67)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x32974 (* ?x32973 l_0_11_47)))
 (let ((?x32154 (* 12.0 l_0_11_3)))
 (let ((?x32155 (* ?x32154 l_0_11_5)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32140 (* ?x32139 l_0_11_26)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32131 (* ?x32130 l_0_11_25)))
 (let ((?x32119 (* 12.0 l_0_11_2)))
 (let ((?x32120 (* ?x32119 l_0_11_4)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32951 (* ?x32766 l_0_11_143)))
 (let ((?x32767 (* ?x32766 l_0_11_131)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32948 (* ?x32804 l_0_11_142)))
 (let ((?x32954 (- (- (+ (- (* ?x32804 l_0_11_130) ?x32948) ?x32767) ?x32951) (* (* 2.0 l_0_11_16) l_0_11_4))))
 (let ((?x32959 (- (- ?x32954 (* (* 2.0 l_0_11_17) l_0_11_5)) (* (* 2.0 l_0_11_18) l_0_11_6))))
 (let ((?x32964 (+ (- (- (+ ?x32959 ?x32120) ?x32131) ?x32140) (* (* 2.0 l_0_11_25) l_0_11_37))))
 (let ((?x32968 (+ (+ ?x32964 (* (* 2.0 l_0_11_26) l_0_11_38)) (* (* 2.0 l_0_11_27) l_0_11_39))))
 (let ((?x32978 (+ (- (- (+ ?x32968 ?x32155) (* (* 6.0 l_0_11_44) l_0_11_46)) ?x32974) ?x32977)))
 (= (+ ?x32978 ?x32980) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31030 (* l_0_11_9 l_0_11_9)))
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x33037 (* ?x32842 l_0_11_92)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x33035 (* ?x32839 l_0_11_91)))
 (let ((?x31024 (* l_0_11_8 l_0_11_8)))
 (let ((?x31009 (* l_0_11_7 l_0_11_7)))
 (let ((?x18996 (* l_0_11_31 l_0_11_31)))
 (let ((?x20447 (* l_0_11_30 l_0_11_30)))
 (let ((?x31083 (* l_0_11_29 l_0_11_29)))
 (let ((?x31072 (* l_0_11_28 l_0_11_28)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33027 (* ?x32818 l_0_11_176)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33025 (* ?x32815 l_0_11_175)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33023 (* ?x32812 l_0_11_155)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x33021 (* ?x32809 l_0_11_154)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x33019 (* ?x32801 l_0_11_113)))
 (let ((?x33018 (+ (* (- l_0_11_10) l_0_11_10) (* (* 2.0 l_0_11_107) l_0_11_112))))
 (let ((?x33030 (+ (+ (- (- (+ (+ (+ ?x33018 ?x33019) ?x33021) ?x33023) ?x33025) ?x33027) ?x31072) ?x31083)))
 (let ((?x33039 (- (- (- (- (- (+ (+ ?x33030 ?x20447) ?x18996) ?x31009) ?x31024) ?x33035) ?x33037) ?x31030)))
 (= ?x33039 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x33084 (* ?x32842 l_0_11_96)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x33082 (* ?x32839 l_0_11_95)))
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32274 (* ?x32166 l_0_11_71)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32272 (* ?x32163 l_0_11_70)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32270 (* ?x32160 l_0_11_50)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32268 (* ?x32157 l_0_11_49)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33064 (* ?x32818 l_0_11_180)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33062 (* ?x32815 l_0_11_179)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33060 (* ?x32812 l_0_11_159)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x4837 (* ?x32809 l_0_11_158)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x4735 (* ?x32801 l_0_11_117)))
 (let ((?x21626 (+ (* (* (- 2.0) l_0_11_10) l_0_11_14) (* (* 2.0 l_0_11_107) l_0_11_116))))
 (let ((?x21664 (- (- (+ ?x21626 ?x4735) (* (* 2.0 l_0_11_11) l_0_11_7)) (* (* 2.0 l_0_11_12) l_0_11_8))))
 (let ((?x33063 (- (+ (+ (- ?x21664 (* (* 2.0 l_0_11_13) l_0_11_9)) ?x4837) ?x33060) ?x33062)))
 (let ((?x33071 (+ (+ (- ?x33063 ?x33064) (* (* 2.0 l_0_11_28) l_0_11_32)) (* (* 2.0 l_0_11_29) l_0_11_33))))
 (let ((?x33077 (+ (+ ?x33071 (* (* 2.0 l_0_11_30) l_0_11_34)) (* (* 2.0 l_0_11_31) l_0_11_35))))
 (= (- (- (- (- (+ (+ ?x33077 ?x32268) ?x32270) ?x32272) ?x32274) ?x33082) ?x33084) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33168 (* ?x32979 l_0_11_71)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33166 (* ?x32976 l_0_11_70)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33164 (* ?x32973 l_0_11_50)))
 (let ((?x32154 (* 12.0 l_0_11_3)))
 (let ((?x32266 (* ?x32154 l_0_11_8)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32256 (* ?x32139 l_0_11_29)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32250 (* ?x32130 l_0_11_28)))
 (let ((?x32119 (* 12.0 l_0_11_2)))
 (let ((?x32242 (* ?x32119 l_0_11_7)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33146 (* ?x32818 l_0_11_185)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33144 (* ?x32815 l_0_11_184)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33138 (* ?x32812 l_0_11_164)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x33136 (* ?x32809 l_0_11_163)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32807 (* ?x32766 l_0_11_134)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32805 (* ?x32804 l_0_11_133)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x33132 (* ?x32801 l_0_11_122)))
 (let ((?x32799 (* 2.0 l_0_11_107)))
 (let ((?x33130 (* ?x32799 l_0_11_121)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x33128 (* ?x33127 l_0_11_87)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x4925 (* ?x21725 l_0_11_86)))
 (let ((?x33133 (+ (+ (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x4925) ?x33128) ?x33130) ?x33132)))
 (let ((?x33141 (- (+ (+ (+ (+ ?x33133 ?x32805) ?x32807) ?x33136) ?x33138) (* (* 2.0 l_0_11_16) l_0_11_7))))
 (let ((?x33149 (- (- (- (- ?x33141 (* (* 2.0 l_0_11_17) l_0_11_8)) ?x33144) ?x33146) (* (* 2.0 l_0_11_18) l_0_11_9))))
 (let ((?x33154 (+ (- (- (+ ?x33149 ?x32242) ?x32250) ?x32256) (* (* 2.0 l_0_11_28) l_0_11_37))))
 (let ((?x33159 (+ (+ (+ ?x33154 (* (* 2.0 l_0_11_29) l_0_11_38)) ?x32266) (* (* 2.0 l_0_11_30) l_0_11_39))))
 (let ((?x33163 (- (+ ?x33159 (* (* 2.0 l_0_11_31) l_0_11_40)) (* (* 6.0 l_0_11_44) l_0_11_49))))
 (= (+ (+ (- ?x33163 ?x33164) ?x33166) ?x33168) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32388 (* ?x32166 l_0_11_75)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32386 (* ?x32163 l_0_11_74)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32383 (* ?x32160 l_0_11_54)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32381 (* ?x32157 l_0_11_53)))
 (let ((?x20583 (* l_0_11_36 l_0_11_36)))
 (let ((?x31324 (* l_0_11_35 l_0_11_35)))
 (let ((?x31320 (* l_0_11_34 l_0_11_34)))
 (let ((?x31314 (* l_0_11_33 l_0_11_33)))
 (let ((?x20560 (* l_0_11_32 l_0_11_32)))
 (let ((?x31167 (* l_0_11_15 l_0_11_15)))
 (let ((?x31164 (* l_0_11_14 l_0_11_14)))
 (let ((?x31161 (* l_0_11_13 l_0_11_13)))
 (let ((?x33194 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x31161)))
 (let ((?x33201 (+ (+ (+ (+ (+ (- (- ?x33194 ?x31164) ?x31167) ?x20560) ?x31314) ?x31320) ?x31324) ?x20583)))
 (= (- (- (+ (+ ?x33201 ?x32381) ?x32383) ?x32386) ?x32388) 0.0))))))))))))))))))))
(assert
 (let ((?x32166 (* 2.0 l_0_11_66)))
 (let ((?x32517 (* ?x32166 l_0_11_80)))
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33256 (* ?x32979 l_0_11_75)))
 (let ((?x32163 (* 2.0 l_0_11_65)))
 (let ((?x32515 (* ?x32163 l_0_11_79)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33253 (* ?x32976 l_0_11_74)))
 (let ((?x32160 (* 2.0 l_0_11_45)))
 (let ((?x32511 (* ?x32160 l_0_11_59)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33250 (* ?x32973 l_0_11_54)))
 (let ((?x32157 (* 2.0 l_0_11_44)))
 (let ((?x32509 (* ?x32157 l_0_11_58)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32370 (* ?x32139 l_0_11_33)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32364 (* ?x32130 l_0_11_32)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32908 (* ?x32766 l_0_11_138)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32906 (* ?x32804 l_0_11_137)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x32352 (* ?x31351 l_0_11_3)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x32350 (* ?x31348 l_0_11_2)))
 (let ((?x33218 (- (+ (* (* (- 2.0) l_0_11_11) l_0_11_16) ?x32350) (* (* 2.0 l_0_11_12) l_0_11_17))))
 (let ((?x33223 (- (+ (+ (+ ?x33218 ?x32352) ?x32906) ?x32908) (* (* 2.0 l_0_11_13) l_0_11_18))))
 (let ((?x33229 (- (- ?x33223 (* (* 2.0 l_0_11_14) l_0_11_19)) (* (* 2.0 l_0_11_15) l_0_11_20))))
 (let ((?x33237 (+ (+ (- (- ?x33229 ?x32364) ?x32370) (* (* 2.0 l_0_11_32) l_0_11_37)) (* (* 2.0 l_0_11_33) l_0_11_38))))
 (let ((?x33243 (+ (+ ?x33237 (* (* 2.0 l_0_11_34) l_0_11_39)) (* (* 2.0 l_0_11_35) l_0_11_40))))
 (let ((?x33248 (- (+ ?x33243 (* (* 2.0 l_0_11_36) l_0_11_41)) (* (* 6.0 l_0_11_44) l_0_11_53))))
 (let ((?x33258 (- (+ (- (+ (+ (- (+ ?x33248 ?x32509) ?x33250) ?x32511) ?x33253) ?x32515) ?x33256) ?x32517)))
 (= ?x33258 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33321 (* ?x32979 l_0_11_80)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33319 (* ?x32976 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x32513 (* ?x31644 l_0_11_65)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33316 (* ?x32973 l_0_11_59)))
 (let ((?x32970 (* 6.0 l_0_11_44)))
 (let ((?x33314 (* ?x32970 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x32507 (* ?x31623 l_0_11_44)))
 (let ((?x20951 (* l_0_11_42 l_0_11_42)))
 (let ((?x20947 (* l_0_11_41 l_0_11_41)))
 (let ((?x20944 (* l_0_11_40 l_0_11_40)))
 (let ((?x31684 (* l_0_11_39 l_0_11_39)))
 (let ((?x20938 (* l_0_11_38 l_0_11_38)))
 (let ((?x31675 (* l_0_11_37 l_0_11_37)))
 (let ((?x32139 (* 12.0 l_0_11_24)))
 (let ((?x32497 (* ?x32139 l_0_11_38)))
 (let ((?x32130 (* 12.0 l_0_11_23)))
 (let ((?x32491 (* ?x32130 l_0_11_37)))
 (let ((?x31602 (* l_0_11_21 l_0_11_21)))
 (let ((?x31599 (* l_0_11_20 l_0_11_20)))
 (let ((?x31596 (* l_0_11_19 l_0_11_19)))
 (let ((?x31593 (* l_0_11_18 l_0_11_18)))
 (let ((?x31590 (* l_0_11_17 l_0_11_17)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x32478 (* ?x32477 l_0_11_3)))
 (let ((?x31586 (* l_0_11_16 l_0_11_16)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x32475 (* ?x32474 l_0_11_2)))
 (let ((?x32766 (* 2.0 l_0_11_129)))
 (let ((?x32951 (* ?x32766 l_0_11_143)))
 (let ((?x32804 (* 2.0 l_0_11_128)))
 (let ((?x32948 (* ?x32804 l_0_11_142)))
 (let ((?x33302 (- (- (- (+ (- (+ (+ ?x32948 ?x32951) ?x32475) ?x31586) ?x32478) ?x31590) ?x31593) ?x31596)))
 (let ((?x33309 (+ (+ (+ (- (- (- (- ?x33302 ?x31599) ?x31602) ?x32491) ?x32497) ?x31675) ?x20938) ?x31684)))
 (let ((?x33318 (+ (- (- (- (+ (+ (+ ?x33309 ?x20944) ?x20947) ?x20951) ?x32507) ?x33314) ?x33316) ?x32513)))
 (= (+ (+ ?x33318 ?x33319) ?x33321) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x33440 (* ?x33439 l_0_11_81)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x33437 (* ?x33436 l_0_11_80)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x33434 (* ?x33433 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33431 (* ?x31644 l_0_11_67)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x33429 (* ?x33428 l_0_11_60)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x33426 (* ?x33425 l_0_11_59)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x33423 (* ?x33422 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33420 (* ?x31623 l_0_11_46)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x33409 (* ?x33408 l_0_11_39)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x33406 (* ?x33405 l_0_11_38)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x33394 (* ?x33393 l_0_11_37)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x33382 (* ?x30875 l_0_11_25)))
 (let ((?x33361 (* 12.0 l_0_11_18)))
 (let ((?x33362 (* ?x33361 l_0_11_6)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x33359 (* ?x32477 l_0_11_5)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x33357 (* ?x32474 l_0_11_4)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x31729 (* ?x31728 l_0_11_142)))
 (let ((?x33356 (- (+ (* (* 12.0 l_0_11_1) l_0_11_4) (* ?x31728 l_0_11_130)) ?x31729)))
 (let ((?x33366 (- (+ (+ (+ ?x33356 ?x33357) ?x33359) ?x33362) (* (* 2.0 l_0_11_193) l_0_11_205))))
 (let ((?x33372 (- (- ?x33366 (* (* 2.0 l_0_11_194) l_0_11_206)) (* (* 2.0 l_0_11_195) l_0_11_207))))
 (let ((?x33378 (- (- ?x33372 (* (* 2.0 l_0_11_214) l_0_11_226)) (* (* 2.0 l_0_11_215) l_0_11_227))))
 (let ((?x33386 (- (- (- ?x33378 (* (* 2.0 l_0_11_216) l_0_11_228)) ?x33382) (* (* 2.0 l_0_11_235) l_0_11_247))))
 (let ((?x33392 (- (- ?x33386 (* (* 2.0 l_0_11_236) l_0_11_248)) (* (* 2.0 l_0_11_237) l_0_11_249))))
 (let ((?x33401 (- (- (- ?x33392 ?x33394) (* (* 2.0 l_0_11_256) l_0_11_268)) (* (* 2.0 l_0_11_257) l_0_11_269))))
 (let ((?x33413 (- (- (- (- ?x33401 (* (* 2.0 l_0_11_258) l_0_11_270)) ?x33406) ?x33409) (* (* 2.0 l_0_11_277) l_0_11_289))))
 (let ((?x33419 (- (- ?x33413 (* (* 2.0 l_0_11_278) l_0_11_290)) (* (* 2.0 l_0_11_279) l_0_11_291))))
 (let ((?x33438 (+ (+ (+ (- (- (- (- ?x33419 ?x33420) ?x33423) ?x33426) ?x33429) ?x33431) ?x33434) ?x33437)))
 (= (+ ?x33438 ?x33440) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31456 (* 2.0 l_0_11_73)))
 (let ((?x33564 (* ?x31456 l_0_11_82)))
 (let ((?x31453 (* 2.0 l_0_11_72)))
 (let ((?x33562 (* ?x31453 l_0_11_81)))
 (let ((?x31450 (* 2.0 l_0_11_71)))
 (let ((?x33560 (* ?x31450 l_0_11_80)))
 (let ((?x31447 (* 2.0 l_0_11_70)))
 (let ((?x33558 (* ?x31447 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33556 (* ?x31644 l_0_11_70)))
 (let ((?x31443 (* 2.0 l_0_11_52)))
 (let ((?x33554 (* ?x31443 l_0_11_61)))
 (let ((?x31440 (* 2.0 l_0_11_51)))
 (let ((?x33552 (* ?x31440 l_0_11_60)))
 (let ((?x31437 (* 2.0 l_0_11_50)))
 (let ((?x33550 (* ?x31437 l_0_11_59)))
 (let ((?x31434 (* 2.0 l_0_11_49)))
 (let ((?x33548 (* ?x31434 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33546 (* ?x31623 l_0_11_49)))
 (let ((?x31430 (* 12.0 l_0_11_31)))
 (let ((?x33544 (* ?x31430 l_0_11_40)))
 (let ((?x31427 (* 12.0 l_0_11_30)))
 (let ((?x33542 (* ?x31427 l_0_11_39)))
 (let ((?x31424 (* 12.0 l_0_11_29)))
 (let ((?x33540 (* ?x31424 l_0_11_38)))
 (let ((?x31409 (* 12.0 l_0_11_28)))
 (let ((?x33530 (* ?x31409 l_0_11_37)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x30876 (* ?x30875 l_0_11_28)))
 (let ((?x33361 (* 12.0 l_0_11_18)))
 (let ((?x33495 (* ?x33361 l_0_11_9)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x33493 (* ?x32477 l_0_11_8)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x33491 (* ?x30942 l_0_11_184)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x33489 (* ?x32474 l_0_11_7)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x33487 (* ?x30939 l_0_11_163)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x33485 (* ?x31728 l_0_11_133)))
 (let ((?x30936 (* 2.0 l_0_11_106)))
 (let ((?x33483 (* ?x30936 l_0_11_121)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x33481 (* ?x21725 l_0_11_85)))
 (let ((?x31343 (* 12.0 l_0_11_10)))
 (let ((?x33479 (* ?x31343 l_0_11_19)))
 (let ((?x20330 (* 12.0 l_0_11_1)))
 (let ((?x17895 (* ?x20330 l_0_11_7)))
 (let ((?x33492 (- (+ (+ (+ (+ (- (+ ?x17895 ?x33479) ?x33481) ?x33483) ?x33485) ?x33487) ?x33489) ?x33491)))
 (let ((?x33500 (- (- (+ (+ ?x33492 ?x33493) ?x33495) (* (* 2.0 l_0_11_196) l_0_11_205)) (* (* 2.0 l_0_11_197) l_0_11_206))))
 (let ((?x33504 (- (- ?x33500 (* (* 2.0 l_0_11_198) l_0_11_207)) (* (* 2.0 l_0_11_199) l_0_11_208))))
 (let ((?x33508 (- (- ?x33504 (* (* 2.0 l_0_11_217) l_0_11_226)) (* (* 2.0 l_0_11_218) l_0_11_227))))
 (let ((?x33513 (- (- (- ?x33508 (* (* 2.0 l_0_11_219) l_0_11_228)) ?x30876) (* (* 2.0 l_0_11_220) l_0_11_229))))
 (let ((?x33517 (- (- ?x33513 (* (* 2.0 l_0_11_238) l_0_11_247)) (* (* 2.0 l_0_11_239) l_0_11_248))))
 (let ((?x33521 (- (- ?x33517 (* (* 2.0 l_0_11_240) l_0_11_249)) (* (* 2.0 l_0_11_241) l_0_11_250))))
 (let ((?x33525 (- (- ?x33521 (* (* 2.0 l_0_11_259) l_0_11_268)) (* (* 2.0 l_0_11_260) l_0_11_269))))
 (let ((?x33529 (- (- ?x33525 (* (* 2.0 l_0_11_261) l_0_11_270)) (* (* 2.0 l_0_11_262) l_0_11_271))))
 (let ((?x33535 (- (- (- ?x33529 ?x33530) (* (* 2.0 l_0_11_280) l_0_11_289)) (* (* 2.0 l_0_11_281) l_0_11_290))))
 (let ((?x33539 (- (- ?x33535 (* (* 2.0 l_0_11_282) l_0_11_291)) (* (* 2.0 l_0_11_283) l_0_11_292))))
 (let ((?x33553 (- (- (- (- (- (- (- ?x33539 ?x33540) ?x33542) ?x33544) ?x33546) ?x33548) ?x33550) ?x33552)))
 (= (+ (+ (+ (+ (+ (- ?x33553 ?x33554) ?x33556) ?x33558) ?x33560) ?x33562) ?x33564) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33740 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x33737 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x33734 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x33731 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x33728 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x31923 (* ?x30890 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33724 (* ?x31644 l_0_11_74)))
 (let ((?x33722 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x33719 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x33716 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x33713 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x33710 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x31920 (* ?x30887 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33706 (* ?x31623 l_0_11_53)))
 (let ((?x33704 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x33701 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x33698 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x33695 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x33692 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x31116 (* ?x30875 l_0_11_32)))
 (let ((?x33613 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x33610 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x33607 (* ?x31354 l_0_11_18)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x22522 (* ?x31728 l_0_11_137)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x22632 (* ?x31351 l_0_11_17)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x5222 (* ?x31348 l_0_11_16)))
 (let ((?x20330 (* 12.0 l_0_11_1)))
 (let ((?x31110 (* ?x20330 l_0_11_11)))
 (let ((?x33617 (- (+ (+ (+ (+ (+ (+ ?x31110 ?x5222) ?x22632) ?x22522) ?x33607) ?x33610) ?x33613) (* (* 2.0 l_0_11_200) l_0_11_205))))
 (let ((?x33623 (- (- ?x33617 (* (* 2.0 l_0_11_201) l_0_11_206)) (* (* 2.0 l_0_11_202) l_0_11_207))))
 (let ((?x33629 (- (- ?x33623 (* (* 2.0 l_0_11_203) l_0_11_208)) (* (* 2.0 l_0_11_204) l_0_11_209))))
 (let ((?x33636 (- (- (- ?x33629 ?x31116) (* (* 2.0 l_0_11_221) l_0_11_226)) (* (* 2.0 l_0_11_222) l_0_11_227))))
 (let ((?x33642 (- (- ?x33636 (* (* 2.0 l_0_11_223) l_0_11_228)) (* (* 2.0 l_0_11_224) l_0_11_229))))
 (let ((?x33648 (- (- ?x33642 (* (* 2.0 l_0_11_225) l_0_11_230)) (* (* 2.0 l_0_11_242) l_0_11_247))))
 (let ((?x33654 (- (- ?x33648 (* (* 2.0 l_0_11_243) l_0_11_248)) (* (* 2.0 l_0_11_244) l_0_11_249))))
 (let ((?x33660 (- (- ?x33654 (* (* 2.0 l_0_11_245) l_0_11_250)) (* (* 2.0 l_0_11_246) l_0_11_251))))
 (let ((?x33666 (- (- ?x33660 (* (* 2.0 l_0_11_263) l_0_11_268)) (* (* 2.0 l_0_11_264) l_0_11_269))))
 (let ((?x33672 (- (- ?x33666 (* (* 2.0 l_0_11_265) l_0_11_270)) (* (* 2.0 l_0_11_266) l_0_11_271))))
 (let ((?x33678 (- (- ?x33672 (* (* 2.0 l_0_11_267) l_0_11_272)) (* (* 2.0 l_0_11_284) l_0_11_289))))
 (let ((?x33684 (- (- ?x33678 (* (* 2.0 l_0_11_285) l_0_11_290)) (* (* 2.0 l_0_11_286) l_0_11_291))))
 (let ((?x33690 (- (- ?x33684 (* (* 2.0 l_0_11_287) l_0_11_292)) (* (* 2.0 l_0_11_288) l_0_11_293))))
 (let ((?x33708 (+ (- (- (- (- (- (- ?x33690 ?x33692) ?x33695) ?x33698) ?x33701) ?x33704) ?x33706) ?x31920)))
 (let ((?x33726 (- (+ (- (- (- (- (- ?x33708 ?x33710) ?x33713) ?x33716) ?x33719) ?x33722) ?x33724) ?x31923)))
 (= (+ (+ (+ (+ (+ ?x33726 ?x33728) ?x33731) ?x33734) ?x33737) ?x33740) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33873 (* l_0_11_69 l_0_11_69)))
 (let ((?x33874 (* 3.0 ?x33873)))
 (let ((?x33870 (* l_0_11_68 l_0_11_68)))
 (let ((?x33871 (* 3.0 ?x33870)))
 (let ((?x33867 (* l_0_11_67 l_0_11_67)))
 (let ((?x33868 (* 3.0 ?x33867)))
 (let ((?x32779 (* l_0_11_6 l_0_11_6)))
 (let ((?x33865 (* 6.0 ?x32779)))
 (let ((?x32777 (* l_0_11_5 l_0_11_5)))
 (let ((?x33863 (* 6.0 ?x32777)))
 (let ((?x33861 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x33858 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x32775 (* l_0_11_4 l_0_11_4)))
 (let ((?x33852 (* 6.0 ?x32775)))
 (let ((?x33850 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x33847 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x33844 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x33841 (* l_0_11_132 l_0_11_132)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x33839 (* ?x33838 l_0_11_144)))
 (let ((?x33836 (* l_0_11_131 l_0_11_131)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x33834 (* ?x33833 l_0_11_143)))
 (let ((?x33831 (* l_0_11_130 l_0_11_130)))
 (let ((?x33840 (- (+ (- (+ (* (* (- 2.0) l_0_11_130) l_0_11_142) ?x33831) ?x33834) ?x33836) ?x33839)))
 (let ((?x33856 (- (+ (- (- (- (+ ?x33840 ?x33841) ?x33844) ?x33847) ?x33850) ?x33852) (* (* 3.0 l_0_11_46) l_0_11_46))))
 (let ((?x33875 (+ (+ (+ (+ (+ (- (- ?x33856 ?x33858) ?x33861) ?x33863) ?x33865) ?x33868) ?x33871) ?x33874)))
 (= ?x33875 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x33985 (* ?x33984 l_0_11_72)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x33982 (* ?x33981 l_0_11_71)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x33979 (* ?x33978 l_0_11_70)))
 (let ((?x33976 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x33973 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x33970 (* ?x33969 l_0_11_51)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x33967 (* ?x33966 l_0_11_50)))
 (let ((?x33961 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x33958 (* ?x33408 l_0_11_30)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x33956 (* ?x33405 l_0_11_29)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x33954 (* ?x33393 l_0_11_28)))
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x33952 (* ?x33951 l_0_11_186)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x33949 (* ?x33948 l_0_11_185)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x33946 (* ?x33945 l_0_11_184)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x33943 (* ?x33942 l_0_11_165)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x33940 (* ?x33939 l_0_11_164)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x33937 (* ?x33936 l_0_11_163)))
 (let ((?x33933 (* 2.0 l_0_11_136)))
 (let ((?x33934 (* ?x33933 l_0_11_145)))
 (let ((?x33930 (* 2.0 l_0_11_135)))
 (let ((?x33931 (* ?x33930 l_0_11_144)))
 (let ((?x33927 (* 2.0 l_0_11_134)))
 (let ((?x33928 (* ?x33927 l_0_11_143)))
 (let ((?x33924 (* 2.0 l_0_11_133)))
 (let ((?x33925 (* ?x33924 l_0_11_142)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x33922 (* ?x33838 l_0_11_135)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x33920 (* ?x33833 l_0_11_134)))
 (let ((?x33917 (* 2.0 l_0_11_130)))
 (let ((?x33918 (* ?x33917 l_0_11_133)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x33915 (* ?x33914 l_0_11_123)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x33912 (* ?x33911 l_0_11_122)))
 (let ((?x6815 (* 2.0 l_0_11_109)))
 (let ((?x33909 (* ?x6815 l_0_11_121)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x6838 (* ?x22988 l_0_11_90)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x22982 (* ?x33127 l_0_11_89)))
 (let ((?x33913 (+ (+ (- (- (* (* (- 2.0) l_0_11_100) l_0_11_88) ?x22982) ?x6838) ?x33909) ?x33912)))
 (let ((?x33932 (- (- (- (+ (+ (+ (+ ?x33913 ?x33915) ?x33918) ?x33920) ?x33922) ?x33925) ?x33928) ?x33931)))
 (let ((?x33953 (- (- (- (+ (+ (+ (- ?x33932 ?x33934) ?x33937) ?x33940) ?x33943) ?x33946) ?x33949) ?x33952)))
 (let ((?x33965 (- (+ (- (- (- ?x33953 ?x33954) ?x33956) ?x33958) ?x33961) (* (* 6.0 l_0_11_46) l_0_11_49))))
 (let ((?x33986 (+ (+ (+ (+ (+ (- (- ?x33965 ?x33967) ?x33970) ?x33973) ?x33976) ?x33979) ?x33982) ?x33985)))
 (= ?x33986 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x33440 (* ?x33439 l_0_11_81)))
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x34098 (* ?x33984 l_0_11_76)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x33437 (* ?x33436 l_0_11_80)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x34095 (* ?x33981 l_0_11_75)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x33434 (* ?x33433 l_0_11_79)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x34092 (* ?x33978 l_0_11_74)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x33429 (* ?x33428 l_0_11_60)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x34089 (* ?x33969 l_0_11_55)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x33426 (* ?x33425 l_0_11_59)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x34086 (* ?x33966 l_0_11_54)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x33423 (* ?x33422 l_0_11_58)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x34081 (* ?x33408 l_0_11_34)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x34079 (* ?x33405 l_0_11_33)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x34077 (* ?x33393 l_0_11_32)))
 (let ((?x34075 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x34072 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x34069 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x34066 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x34063 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x34060 (* ?x33838 l_0_11_139)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x34058 (* ?x33833 l_0_11_138)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x23083 (* ?x31354 l_0_11_6)))
 (let ((?x23076 (+ (* (* 12.0 l_0_11_11) l_0_11_4) (* (* 12.0 l_0_11_12) l_0_11_5))))
 (let ((?x34061 (+ (+ (+ (+ ?x23076 ?x23083) (* (* 2.0 l_0_11_130) l_0_11_137)) ?x34058) ?x34060)))
 (let ((?x34080 (- (- (- (- (- (- (- ?x34061 ?x34063) ?x34066) ?x34069) ?x34072) ?x34075) ?x34077) ?x34079)))
 (let ((?x34087 (- (+ (- (- ?x34080 ?x34081) (* (* 6.0 l_0_11_46) l_0_11_53)) ?x33423) ?x34086)))
 (let ((?x34097 (- (+ (- (+ (+ (- (+ ?x34087 ?x33426) ?x34089) ?x33429) ?x34092) ?x33434) ?x34095) ?x33437)))
 (= (- (+ ?x34097 ?x34098) ?x33440) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x34190 (* ?x33984 l_0_11_81)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x34188 (* ?x33981 l_0_11_80)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x34186 (* ?x33978 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33431 (* ?x31644 l_0_11_67)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x34183 (* ?x33969 l_0_11_60)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x34181 (* ?x33966 l_0_11_59)))
 (let ((?x33963 (* 6.0 l_0_11_46)))
 (let ((?x34179 (* ?x33963 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33420 (* ?x31623 l_0_11_46)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x33409 (* ?x33408 l_0_11_39)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x33406 (* ?x33405 l_0_11_38)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x33394 (* ?x33393 l_0_11_37)))
 (let ((?x33361 (* 12.0 l_0_11_18)))
 (let ((?x33362 (* ?x33361 l_0_11_6)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x33359 (* ?x32477 l_0_11_5)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x33357 (* ?x32474 l_0_11_4)))
 (let ((?x31583 (* l_0_11_147 l_0_11_147)))
 (let ((?x31581 (* l_0_11_146 l_0_11_146)))
 (let ((?x31579 (* l_0_11_145 l_0_11_145)))
 (let ((?x31577 (* l_0_11_144 l_0_11_144)))
 (let ((?x31575 (* l_0_11_143 l_0_11_143)))
 (let ((?x31573 (* l_0_11_142 l_0_11_142)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x33839 (* ?x33838 l_0_11_144)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x33834 (* ?x33833 l_0_11_143)))
 (let ((?x34167 (- (- (+ (+ (* (* 2.0 l_0_11_130) l_0_11_142) ?x33834) ?x33839) ?x31573) ?x31575)))
 (let ((?x34174 (+ (+ (+ (- (- (- (- ?x34167 ?x31577) ?x31579) ?x31581) ?x31583) ?x33357) ?x33359) ?x33362)))
 (let ((?x34184 (- (- (- (- (- (- (- ?x34174 ?x33394) ?x33406) ?x33409) ?x33420) ?x34179) ?x34181) ?x34183)))
 (= (+ (+ (+ (+ ?x34184 ?x33431) ?x34186) ?x34188) ?x34190) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31030 (* l_0_11_9 l_0_11_9)))
 (let ((?x31031 (* 6.0 ?x31030)))
 (let ((?x31024 (* l_0_11_8 l_0_11_8)))
 (let ((?x31025 (* 6.0 ?x31024)))
 (let ((?x31021 (* l_0_11_73 l_0_11_73)))
 (let ((?x34262 (* 3.0 ?x31021)))
 (let ((?x31018 (* l_0_11_72 l_0_11_72)))
 (let ((?x34260 (* 3.0 ?x31018)))
 (let ((?x31015 (* l_0_11_71 l_0_11_71)))
 (let ((?x34258 (* 3.0 ?x31015)))
 (let ((?x31012 (* l_0_11_70 l_0_11_70)))
 (let ((?x34256 (* 3.0 ?x31012)))
 (let ((?x31009 (* l_0_11_7 l_0_11_7)))
 (let ((?x31010 (* 6.0 ?x31009)))
 (let ((?x34253 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x34250 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x34247 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x30995 (* (* 6.0 l_0_11_31) l_0_11_31)))
 (let ((?x30992 (* (* 6.0 l_0_11_30) l_0_11_30)))
 (let ((?x30989 (* (* 6.0 l_0_11_29) l_0_11_29)))
 (let ((?x30978 (* (* 6.0 l_0_11_28) l_0_11_28)))
 (let ((?x34236 (* 2.0 l_0_11_178)))
 (let ((?x34237 (* ?x34236 l_0_11_187)))
 (let ((?x34233 (* 2.0 l_0_11_177)))
 (let ((?x34234 (* ?x34233 l_0_11_186)))
 (let ((?x34230 (* 2.0 l_0_11_176)))
 (let ((?x34231 (* ?x34230 l_0_11_185)))
 (let ((?x34227 (* 2.0 l_0_11_175)))
 (let ((?x34228 (* ?x34227 l_0_11_184)))
 (let ((?x34224 (* 2.0 l_0_11_157)))
 (let ((?x34225 (* ?x34224 l_0_11_166)))
 (let ((?x34221 (* 2.0 l_0_11_156)))
 (let ((?x34222 (* ?x34221 l_0_11_165)))
 (let ((?x34218 (* 2.0 l_0_11_155)))
 (let ((?x34219 (* ?x34218 l_0_11_164)))
 (let ((?x34215 (* 2.0 l_0_11_154)))
 (let ((?x34216 (* ?x34215 l_0_11_163)))
 (let ((?x34213 (* l_0_11_136 l_0_11_136)))
 (let ((?x34211 (* l_0_11_135 l_0_11_135)))
 (let ((?x34209 (* l_0_11_134 l_0_11_134)))
 (let ((?x34207 (* l_0_11_133 l_0_11_133)))
 (let ((?x34204 (* 2.0 l_0_11_115)))
 (let ((?x34205 (* ?x34204 l_0_11_124)))
 (let ((?x34201 (* 2.0 l_0_11_114)))
 (let ((?x34202 (* ?x34201 l_0_11_123)))
 (let ((?x34198 (* 2.0 l_0_11_113)))
 (let ((?x34199 (* ?x34198 l_0_11_122)))
 (let ((?x34195 (* 2.0 l_0_11_112)))
 (let ((?x34196 (* ?x34195 l_0_11_121)))
 (let ((?x23263 (* 2.0 l_0_11_103)))
 (let ((?x34193 (* ?x23263 l_0_11_94)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x7164 (* ?x22988 l_0_11_93)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x23272 (* ?x33127 l_0_11_92)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x23275 (* ?x21725 l_0_11_91)))
 (let ((?x30933 (* l_0_11_10 l_0_11_10)))
 (let ((?x30934 (* 6.0 ?x30933)))
 (let ((?x34203 (+ (+ (+ (- (- (- (- ?x30934 ?x23275) ?x23272) ?x7164) ?x34193) ?x34196) ?x34199) ?x34202)))
 (let ((?x34220 (+ (+ (+ (+ (+ (+ (+ ?x34203 ?x34205) ?x34207) ?x34209) ?x34211) ?x34213) ?x34216) ?x34219)))
 (let ((?x34239 (- (- (- (- (- (+ (+ ?x34220 ?x34222) ?x34225) ?x34228) ?x34231) ?x34234) ?x34237) ?x30978)))
 (let ((?x34245 (- (- (- (- ?x34239 ?x30989) ?x30992) ?x30995) (* (* 3.0 l_0_11_49) l_0_11_49))))
 (let ((?x34261 (+ (+ (+ (+ (- (- (- ?x34245 ?x34247) ?x34250) ?x34253) ?x31010) ?x34256) ?x34258) ?x34260)))
 (= (+ (+ (+ ?x34261 ?x34262) ?x31025) ?x31031) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31456 (* 2.0 l_0_11_73)))
 (let ((?x33564 (* ?x31456 l_0_11_82)))
 (let ((?x34426 (* 6.0 l_0_11_73)))
 (let ((?x34427 (* ?x34426 l_0_11_77)))
 (let ((?x31453 (* 2.0 l_0_11_72)))
 (let ((?x33562 (* ?x31453 l_0_11_81)))
 (let ((?x34422 (* 6.0 l_0_11_72)))
 (let ((?x34423 (* ?x34422 l_0_11_76)))
 (let ((?x31450 (* 2.0 l_0_11_71)))
 (let ((?x33560 (* ?x31450 l_0_11_80)))
 (let ((?x34418 (* 6.0 l_0_11_71)))
 (let ((?x34419 (* ?x34418 l_0_11_75)))
 (let ((?x31447 (* 2.0 l_0_11_70)))
 (let ((?x33558 (* ?x31447 l_0_11_79)))
 (let ((?x34414 (* 6.0 l_0_11_70)))
 (let ((?x34415 (* ?x34414 l_0_11_74)))
 (let ((?x31443 (* 2.0 l_0_11_52)))
 (let ((?x33554 (* ?x31443 l_0_11_61)))
 (let ((?x34410 (* 6.0 l_0_11_52)))
 (let ((?x34411 (* ?x34410 l_0_11_56)))
 (let ((?x31440 (* 2.0 l_0_11_51)))
 (let ((?x33552 (* ?x31440 l_0_11_60)))
 (let ((?x34406 (* 6.0 l_0_11_51)))
 (let ((?x34407 (* ?x34406 l_0_11_55)))
 (let ((?x31437 (* 2.0 l_0_11_50)))
 (let ((?x33550 (* ?x31437 l_0_11_59)))
 (let ((?x34402 (* 6.0 l_0_11_50)))
 (let ((?x34403 (* ?x34402 l_0_11_54)))
 (let ((?x31434 (* 2.0 l_0_11_49)))
 (let ((?x33548 (* ?x31434 l_0_11_58)))
 (let ((?x31430 (* 12.0 l_0_11_31)))
 (let ((?x31431 (* ?x31430 l_0_11_35)))
 (let ((?x31427 (* 12.0 l_0_11_30)))
 (let ((?x31428 (* ?x31427 l_0_11_34)))
 (let ((?x31424 (* 12.0 l_0_11_29)))
 (let ((?x31425 (* ?x31424 l_0_11_33)))
 (let ((?x31409 (* 12.0 l_0_11_28)))
 (let ((?x31410 (* ?x31409 l_0_11_32)))
 (let ((?x34392 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x34389 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x34386 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x34383 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x34380 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x34377 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x34374 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x34371 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x34368 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x34365 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x33933 (* 2.0 l_0_11_136)))
 (let ((?x34362 (* ?x33933 l_0_11_140)))
 (let ((?x33930 (* 2.0 l_0_11_135)))
 (let ((?x34360 (* ?x33930 l_0_11_139)))
 (let ((?x33927 (* 2.0 l_0_11_134)))
 (let ((?x34358 (* ?x33927 l_0_11_138)))
 (let ((?x33924 (* 2.0 l_0_11_133)))
 (let ((?x34356 (* ?x33924 l_0_11_137)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x31355 (* ?x31354 l_0_11_9)))
 (let ((?x34353 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x31352 (* ?x31351 l_0_11_8)))
 (let ((?x34349 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x34346 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x34343 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x34340 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x31349 (* ?x31348 l_0_11_7)))
 (let ((?x34336 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x23263 (* 2.0 l_0_11_103)))
 (let ((?x34333 (* ?x23263 l_0_11_98)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x34331 (* ?x22988 l_0_11_97)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x34329 (* ?x33127 l_0_11_96)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x7364 (* ?x21725 l_0_11_95)))
 (let ((?x31343 (* 12.0 l_0_11_10)))
 (let ((?x31344 (* ?x31343 l_0_11_14)))
 (let ((?x34341 (+ (+ (- (- (- (- (- ?x31344 ?x7364) ?x34329) ?x34331) ?x34333) ?x34336) ?x31349) ?x34340)))
 (let ((?x34357 (+ (+ (+ (+ (+ (+ (+ ?x34341 ?x34343) ?x34346) ?x34349) ?x31352) ?x34353) ?x31355) ?x34356)))
 (let ((?x34375 (+ (+ (+ (+ (+ (+ (+ ?x34357 ?x34358) ?x34360) ?x34362) ?x34365) ?x34368) ?x34371) ?x34374)))
 (let ((?x34394 (- (- (- (- (- (- (+ ?x34375 ?x34377) ?x34380) ?x34383) ?x34386) ?x34389) ?x34392) ?x31410)))
 (let ((?x34400 (- (- (- (- ?x34394 ?x31425) ?x31428) ?x31431) (* (* 6.0 l_0_11_49) l_0_11_53))))
 (let ((?x34413 (+ (- (+ (- (+ (- (+ ?x34400 ?x33548) ?x34403) ?x33550) ?x34407) ?x33552) ?x34411) ?x33554)))
 (let ((?x34428 (+ (- (+ (- (+ (- (+ ?x34413 ?x34415) ?x33558) ?x34419) ?x33560) ?x34423) ?x33562) ?x34427)))
 (= (- ?x34428 ?x33564) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34426 (* 6.0 l_0_11_73)))
 (let ((?x34593 (* ?x34426 l_0_11_82)))
 (let ((?x34422 (* 6.0 l_0_11_72)))
 (let ((?x34591 (* ?x34422 l_0_11_81)))
 (let ((?x34418 (* 6.0 l_0_11_71)))
 (let ((?x34589 (* ?x34418 l_0_11_80)))
 (let ((?x34414 (* 6.0 l_0_11_70)))
 (let ((?x34587 (* ?x34414 l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33556 (* ?x31644 l_0_11_70)))
 (let ((?x34410 (* 6.0 l_0_11_52)))
 (let ((?x34584 (* ?x34410 l_0_11_61)))
 (let ((?x34406 (* 6.0 l_0_11_51)))
 (let ((?x34582 (* ?x34406 l_0_11_60)))
 (let ((?x34402 (* 6.0 l_0_11_50)))
 (let ((?x34580 (* ?x34402 l_0_11_59)))
 (let ((?x34398 (* 6.0 l_0_11_49)))
 (let ((?x34578 (* ?x34398 l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33546 (* ?x31623 l_0_11_49)))
 (let ((?x31430 (* 12.0 l_0_11_31)))
 (let ((?x33544 (* ?x31430 l_0_11_40)))
 (let ((?x31427 (* 12.0 l_0_11_30)))
 (let ((?x33542 (* ?x31427 l_0_11_39)))
 (let ((?x31424 (* 12.0 l_0_11_29)))
 (let ((?x33540 (* ?x31424 l_0_11_38)))
 (let ((?x31409 (* 12.0 l_0_11_28)))
 (let ((?x33530 (* ?x31409 l_0_11_37)))
 (let ((?x34571 (* l_0_11_189 l_0_11_189)))
 (let ((?x34569 (* l_0_11_188 l_0_11_188)))
 (let ((?x34567 (* l_0_11_187 l_0_11_187)))
 (let ((?x34565 (* l_0_11_186 l_0_11_186)))
 (let ((?x34563 (* l_0_11_185 l_0_11_185)))
 (let ((?x34561 (* l_0_11_184 l_0_11_184)))
 (let ((?x33361 (* 12.0 l_0_11_18)))
 (let ((?x33495 (* ?x33361 l_0_11_9)))
 (let ((?x32477 (* 12.0 l_0_11_17)))
 (let ((?x33493 (* ?x32477 l_0_11_8)))
 (let ((?x34557 (* l_0_11_168 l_0_11_168)))
 (let ((?x34555 (* l_0_11_167 l_0_11_167)))
 (let ((?x34553 (* l_0_11_166 l_0_11_166)))
 (let ((?x34551 (* l_0_11_165 l_0_11_165)))
 (let ((?x34549 (* l_0_11_164 l_0_11_164)))
 (let ((?x34547 (* l_0_11_163 l_0_11_163)))
 (let ((?x32474 (* 12.0 l_0_11_16)))
 (let ((?x33489 (* ?x32474 l_0_11_7)))
 (let ((?x33933 (* 2.0 l_0_11_136)))
 (let ((?x33934 (* ?x33933 l_0_11_145)))
 (let ((?x33930 (* 2.0 l_0_11_135)))
 (let ((?x33931 (* ?x33930 l_0_11_144)))
 (let ((?x33927 (* 2.0 l_0_11_134)))
 (let ((?x33928 (* ?x33927 l_0_11_143)))
 (let ((?x33924 (* 2.0 l_0_11_133)))
 (let ((?x33925 (* ?x33924 l_0_11_142)))
 (let ((?x34540 (* l_0_11_126 l_0_11_126)))
 (let ((?x34538 (* l_0_11_125 l_0_11_125)))
 (let ((?x34536 (* l_0_11_124 l_0_11_124)))
 (let ((?x34534 (* l_0_11_123 l_0_11_123)))
 (let ((?x34532 (* l_0_11_122 l_0_11_122)))
 (let ((?x34530 (* l_0_11_121 l_0_11_121)))
 (let ((?x34528 (* l_0_11_105 l_0_11_105)))
 (let ((?x34526 (* l_0_11_104 l_0_11_104)))
 (let ((?x34524 (* l_0_11_103 l_0_11_103)))
 (let ((?x34522 (* l_0_11_102 l_0_11_102)))
 (let ((?x34520 (* l_0_11_101 l_0_11_101)))
 (let ((?x7565 (* l_0_11_100 l_0_11_100)))
 (let ((?x31343 (* 12.0 l_0_11_10)))
 (let ((?x33479 (* ?x31343 l_0_11_19)))
 (let ((?x34531 (+ (- (- (- (- (- (- ?x33479 ?x7565) ?x34520) ?x34522) ?x34524) ?x34526) ?x34528) ?x34530)))
 (let ((?x34543 (+ (+ (+ (+ (+ (+ (+ ?x34531 ?x34532) ?x34534) ?x34536) ?x34538) ?x34540) ?x33925) ?x33928)))
 (let ((?x34554 (+ (+ (+ (+ (+ (+ (+ ?x34543 ?x33931) ?x33934) ?x33489) ?x34547) ?x34549) ?x34551) ?x34553)))
 (let ((?x34566 (- (- (- (+ (+ (+ (+ ?x34554 ?x34555) ?x34557) ?x33493) ?x33495) ?x34561) ?x34563) ?x34565)))
 (let ((?x34576 (- (- (- (- (- (- (- ?x34566 ?x34567) ?x34569) ?x34571) ?x33530) ?x33540) ?x33542) ?x33544)))
 (let ((?x34588 (+ (+ (- (- (- (- (- ?x34576 ?x33546) ?x34578) ?x34580) ?x34582) ?x34584) ?x33556) ?x34587)))
 (= (+ (+ (+ ?x34588 ?x34589) ?x34591) ?x34593) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31264 (* l_0_11_78 l_0_11_78)))
 (let ((?x34657 (* 3.0 ?x31264)))
 (let ((?x33740 (* (* 2.0 l_0_11_78) l_0_11_83)))
 (let ((?x31261 (* l_0_11_77 l_0_11_77)))
 (let ((?x34654 (* 3.0 ?x31261)))
 (let ((?x33737 (* (* 2.0 l_0_11_77) l_0_11_82)))
 (let ((?x31258 (* l_0_11_76 l_0_11_76)))
 (let ((?x34651 (* 3.0 ?x31258)))
 (let ((?x33734 (* (* 2.0 l_0_11_76) l_0_11_81)))
 (let ((?x31255 (* l_0_11_75 l_0_11_75)))
 (let ((?x34648 (* 3.0 ?x31255)))
 (let ((?x33731 (* (* 2.0 l_0_11_75) l_0_11_80)))
 (let ((?x31252 (* l_0_11_74 l_0_11_74)))
 (let ((?x34645 (* 3.0 ?x31252)))
 (let ((?x33728 (* (* 2.0 l_0_11_74) l_0_11_79)))
 (let ((?x34642 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x33722 (* (* 2.0 l_0_11_57) l_0_11_62)))
 (let ((?x34638 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x33719 (* (* 2.0 l_0_11_56) l_0_11_61)))
 (let ((?x34634 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x33716 (* (* 2.0 l_0_11_55) l_0_11_60)))
 (let ((?x34630 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x33713 (* (* 2.0 l_0_11_54) l_0_11_59)))
 (let ((?x33710 (* (* 2.0 l_0_11_53) l_0_11_58)))
 (let ((?x31233 (* (* 6.0 l_0_11_36) l_0_11_36)))
 (let ((?x31230 (* (* 6.0 l_0_11_35) l_0_11_35)))
 (let ((?x31227 (* (* 6.0 l_0_11_34) l_0_11_34)))
 (let ((?x31224 (* (* 6.0 l_0_11_33) l_0_11_33)))
 (let ((?x31221 (* (* 6.0 l_0_11_32) l_0_11_32)))
 (let ((?x31167 (* l_0_11_15 l_0_11_15)))
 (let ((?x31168 (* 6.0 ?x31167)))
 (let ((?x34616 (* l_0_11_141 l_0_11_141)))
 (let ((?x34614 (* l_0_11_140 l_0_11_140)))
 (let ((?x31164 (* l_0_11_14 l_0_11_14)))
 (let ((?x31165 (* 6.0 ?x31164)))
 (let ((?x23630 (* l_0_11_139 l_0_11_139)))
 (let ((?x23710 (* l_0_11_138 l_0_11_138)))
 (let ((?x23830 (* l_0_11_137 l_0_11_137)))
 (let ((?x31161 (* l_0_11_13 l_0_11_13)))
 (let ((?x31162 (* 6.0 ?x31161)))
 (let ((?x31158 (* l_0_11_12 l_0_11_12)))
 (let ((?x31159 (* 6.0 ?x31158)))
 (let ((?x31155 (* l_0_11_11 l_0_11_11)))
 (let ((?x31156 (* 6.0 ?x31155)))
 (let ((?x34615 (+ (+ (+ (+ (+ (+ (+ ?x31156 ?x31159) ?x31162) ?x23830) ?x23710) ?x23630) ?x31165) ?x34614)))
 (let ((?x34623 (- (- (- (- (- (+ (+ ?x34615 ?x34616) ?x31168) ?x31221) ?x31224) ?x31227) ?x31230) ?x31233)))
 (let ((?x34631 (- (+ (- (+ ?x34623 ?x33710) (* (* 3.0 l_0_11_53) l_0_11_53)) ?x33713) ?x34630)))
 (let ((?x34644 (- (- (+ (- (+ (- (+ ?x34631 ?x33716) ?x34634) ?x33719) ?x34638) ?x33722) ?x34642) ?x33728)))
 (let ((?x34655 (+ (- (+ (- (+ (- (+ ?x34644 ?x34645) ?x33731) ?x34648) ?x33734) ?x34651) ?x33737) ?x34654)))
 (= (+ (- ?x34655 ?x33740) ?x34657) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31662 (* l_0_11_84 l_0_11_84)))
 (let ((?x31659 (* l_0_11_83 l_0_11_83)))
 (let ((?x31656 (* l_0_11_82 l_0_11_82)))
 (let ((?x31653 (* l_0_11_81 l_0_11_81)))
 (let ((?x31650 (* l_0_11_80 l_0_11_80)))
 (let ((?x31647 (* l_0_11_79 l_0_11_79)))
 (let ((?x34732 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x34729 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x34726 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x34723 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x34720 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x31644 (* 6.0 l_0_11_64)))
 (let ((?x33724 (* ?x31644 l_0_11_74)))
 (let ((?x21030 (* l_0_11_63 l_0_11_63)))
 (let ((?x21027 (* l_0_11_62 l_0_11_62)))
 (let ((?x20985 (* l_0_11_61 l_0_11_61)))
 (let ((?x20990 (* l_0_11_60 l_0_11_60)))
 (let ((?x20984 (* l_0_11_59 l_0_11_59)))
 (let ((?x20965 (* l_0_11_58 l_0_11_58)))
 (let ((?x34710 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x34707 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x34704 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x34701 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x34698 (* (* 6.0 l_0_11_53) l_0_11_58)))
 (let ((?x31623 (* 6.0 l_0_11_43)))
 (let ((?x33706 (* ?x31623 l_0_11_53)))
 (let ((?x33704 (* (* 12.0 l_0_11_36) l_0_11_41)))
 (let ((?x33701 (* (* 12.0 l_0_11_35) l_0_11_40)))
 (let ((?x33698 (* (* 12.0 l_0_11_34) l_0_11_39)))
 (let ((?x33695 (* (* 12.0 l_0_11_33) l_0_11_38)))
 (let ((?x33692 (* (* 12.0 l_0_11_32) l_0_11_37)))
 (let ((?x33613 (* (* 12.0 l_0_11_15) l_0_11_20)))
 (let ((?x34075 (* (* 2.0 l_0_11_141) l_0_11_146)))
 (let ((?x34072 (* (* 2.0 l_0_11_140) l_0_11_145)))
 (let ((?x33610 (* (* 12.0 l_0_11_14) l_0_11_19)))
 (let ((?x34069 (* (* 2.0 l_0_11_139) l_0_11_144)))
 (let ((?x34066 (* (* 2.0 l_0_11_138) l_0_11_143)))
 (let ((?x34063 (* (* 2.0 l_0_11_137) l_0_11_142)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x33607 (* ?x31354 l_0_11_18)))
 (let ((?x31351 (* 12.0 l_0_11_12)))
 (let ((?x22632 (* ?x31351 l_0_11_17)))
 (let ((?x31348 (* 12.0 l_0_11_11)))
 (let ((?x5222 (* ?x31348 l_0_11_16)))
 (let ((?x34688 (+ (+ (+ (+ (+ (+ (+ ?x5222 ?x22632) ?x33607) ?x34063) ?x34066) ?x34069) ?x33610) ?x34072)))
 (let ((?x34695 (- (- (- (- (- (+ (+ ?x34688 ?x34075) ?x33613) ?x33692) ?x33695) ?x33698) ?x33701) ?x33704)))
 (let ((?x34712 (+ (- (- (- (- (- (- ?x34695 ?x33706) ?x34698) ?x34701) ?x34704) ?x34707) ?x34710) ?x20965)))
 (let ((?x34721 (+ (+ (+ (+ (+ (+ (+ ?x34712 ?x20984) ?x20990) ?x20985) ?x21027) ?x21030) ?x33724) ?x34720)))
 (let ((?x34736 (- (- (- (+ (+ (+ (+ ?x34721 ?x34723) ?x34726) ?x34729) ?x34732) ?x31647) ?x31650) ?x31653)))
 (= (- (- (- ?x34736 ?x31656) ?x31659) ?x31662) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x34765 (* ?x30890 l_0_11_67)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x34763 (* ?x30887 l_0_11_46)))
 (let ((?x30875 (* 12.0 l_0_11_22)))
 (let ((?x33382 (* ?x30875 l_0_11_25)))
 (let ((?x34753 (- (- (* (* 12.0 l_0_11_1) l_0_11_4) (* l_0_11_127 l_0_11_127)) (* (* 2.0 l_0_11_190) l_0_11_193))))
 (let ((?x34758 (- (- (- ?x34753 (* (* 2.0 l_0_11_211) l_0_11_214)) ?x33382) (* (* 2.0 l_0_11_232) l_0_11_235))))
 (let ((?x34762 (- (- ?x34758 (* (* 2.0 l_0_11_253) l_0_11_256)) (* (* 2.0 l_0_11_274) l_0_11_277))))
 (= (+ (- ?x34762 ?x34763) ?x34765) 0.0)))))))))))
(assert
 (let ((?x32779 (* l_0_11_6 l_0_11_6)))
 (let ((?x33865 (* 6.0 ?x32779)))
 (let ((?x32777 (* l_0_11_5 l_0_11_5)))
 (let ((?x33863 (* 6.0 ?x32777)))
 (let ((?x32775 (* l_0_11_4 l_0_11_4)))
 (let ((?x33852 (* 6.0 ?x32775)))
 (let ((?x34822 (* l_0_11_279 l_0_11_279)))
 (let ((?x34820 (* l_0_11_278 l_0_11_278)))
 (let ((?x34818 (* l_0_11_277 l_0_11_277)))
 (let ((?x33850 (* (* 6.0 l_0_11_27) l_0_11_27)))
 (let ((?x33847 (* (* 6.0 l_0_11_26) l_0_11_26)))
 (let ((?x34814 (* l_0_11_258 l_0_11_258)))
 (let ((?x34812 (* l_0_11_257 l_0_11_257)))
 (let ((?x34810 (* l_0_11_256 l_0_11_256)))
 (let ((?x33844 (* (* 6.0 l_0_11_25) l_0_11_25)))
 (let ((?x34807 (* l_0_11_237 l_0_11_237)))
 (let ((?x34805 (* l_0_11_236 l_0_11_236)))
 (let ((?x34803 (* l_0_11_235 l_0_11_235)))
 (let ((?x34801 (* l_0_11_216 l_0_11_216)))
 (let ((?x34799 (* l_0_11_215 l_0_11_215)))
 (let ((?x34797 (* l_0_11_214 l_0_11_214)))
 (let ((?x34795 (* l_0_11_195 l_0_11_195)))
 (let ((?x34793 (* l_0_11_194 l_0_11_194)))
 (let ((?x34791 (* l_0_11_193 l_0_11_193)))
 (let ((?x34798 (- (- (- (- (* (* (- 2.0) l_0_11_127) l_0_11_130) ?x34791) ?x34793) ?x34795) ?x34797)))
 (let ((?x34811 (- (- (- (- (- (- (- ?x34798 ?x34799) ?x34801) ?x34803) ?x34805) ?x34807) ?x33844) ?x34810)))
 (let ((?x34823 (- (- (- (- (- (- (- ?x34811 ?x34812) ?x34814) ?x33847) ?x33850) ?x34818) ?x34820) ?x34822)))
 (let ((?x34830 (- (- (+ ?x34823 ?x33852) (* (* 1.0 l_0_11_46) l_0_11_46)) (* (* 1.0 l_0_11_47) l_0_11_47))))
 (let ((?x34837 (+ (+ (+ (- ?x34830 (* (* 1.0 l_0_11_48) l_0_11_48)) ?x33863) ?x33865) (* 1.0 (* l_0_11_67 l_0_11_67)))))
 (let ((?x34841 (+ (+ ?x34837 (* 1.0 (* l_0_11_68 l_0_11_68))) (* 1.0 (* l_0_11_69 l_0_11_69)))))
 (= ?x34841 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x34926 (* ?x31027 l_0_11_88)))
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x34924 (* ?x33439 l_0_11_72)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x34922 (* ?x33436 l_0_11_71)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x34920 (* ?x33433 l_0_11_70)))
 (let ((?x33976 (* (* 12.0 l_0_11_6) l_0_11_9)))
 (let ((?x33973 (* (* 12.0 l_0_11_5) l_0_11_8)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x34916 (* ?x33428 l_0_11_51)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x34914 (* ?x33425 l_0_11_50)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x34912 (* ?x33422 l_0_11_49)))
 (let ((?x33961 (* (* 12.0 l_0_11_4) l_0_11_7)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x33958 (* ?x33408 l_0_11_30)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x33956 (* ?x33405 l_0_11_29)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x33954 (* ?x33393 l_0_11_28)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x34876 (* ?x30942 l_0_11_172)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x34874 (* ?x30939 l_0_11_151)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x33485 (* ?x31728 l_0_11_133)))
 (let ((?x34879 (- (- (+ (- (* (* 2.0 l_0_11_106) l_0_11_109) ?x33485) ?x34874) ?x34876) (* (* 2.0 l_0_11_193) l_0_11_196))))
 (let ((?x34883 (- (- ?x34879 (* (* 2.0 l_0_11_194) l_0_11_197)) (* (* 2.0 l_0_11_195) l_0_11_198))))
 (let ((?x34887 (- (- ?x34883 (* (* 2.0 l_0_11_214) l_0_11_217)) (* (* 2.0 l_0_11_215) l_0_11_218))))
 (let ((?x34891 (- (- ?x34887 (* (* 2.0 l_0_11_216) l_0_11_219)) (* (* 2.0 l_0_11_235) l_0_11_238))))
 (let ((?x34895 (- (- ?x34891 (* (* 2.0 l_0_11_236) l_0_11_239)) (* (* 2.0 l_0_11_237) l_0_11_240))))
 (let ((?x34900 (- (- (- ?x34895 ?x33954) (* (* 2.0 l_0_11_256) l_0_11_259)) (* (* 2.0 l_0_11_257) l_0_11_260))))
 (let ((?x34906 (- (- (- (- ?x34900 (* (* 2.0 l_0_11_258) l_0_11_261)) ?x33956) ?x33958) (* (* 2.0 l_0_11_277) l_0_11_280))))
 (let ((?x34910 (- (- ?x34906 (* (* 2.0 l_0_11_278) l_0_11_281)) (* (* 2.0 l_0_11_279) l_0_11_282))))
 (let ((?x34921 (+ (+ (+ (- (- (- (+ ?x34910 ?x33961) ?x34912) ?x34914) ?x34916) ?x33973) ?x33976) ?x34920)))
 (= (- (+ (+ ?x34921 ?x34922) ?x34924) ?x34926) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x35022 (* ?x33439 l_0_11_76)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x35020 (* ?x33436 l_0_11_75)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x35018 (* ?x33433 l_0_11_74)))
 (let ((?x30890 (* 2.0 l_0_11_64)))
 (let ((?x34765 (* ?x30890 l_0_11_67)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x35015 (* ?x33428 l_0_11_55)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x35013 (* ?x33425 l_0_11_54)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x35011 (* ?x33422 l_0_11_53)))
 (let ((?x30887 (* 2.0 l_0_11_43)))
 (let ((?x34763 (* ?x30887 l_0_11_46)))
 (let ((?x33408 (* 12.0 l_0_11_27)))
 (let ((?x34081 (* ?x33408 l_0_11_34)))
 (let ((?x33405 (* 12.0 l_0_11_26)))
 (let ((?x34079 (* ?x33405 l_0_11_33)))
 (let ((?x33393 (* 12.0 l_0_11_25)))
 (let ((?x34077 (* ?x33393 l_0_11_32)))
 (let ((?x31354 (* 12.0 l_0_11_13)))
 (let ((?x23083 (* ?x31354 l_0_11_6)))
 (let ((?x31728 (* 2.0 l_0_11_127)))
 (let ((?x22522 (* ?x31728 l_0_11_137)))
 (let ((?x23076 (+ (* (* 12.0 l_0_11_11) l_0_11_4) (* (* 12.0 l_0_11_12) l_0_11_5))))
 (let ((?x34980 (- (- (+ (- ?x23076 ?x22522) ?x23083) (* (* 2.0 l_0_11_193) l_0_11_200)) (* (* 2.0 l_0_11_194) l_0_11_201))))
 (let ((?x34984 (- (- ?x34980 (* (* 2.0 l_0_11_195) l_0_11_202)) (* (* 2.0 l_0_11_214) l_0_11_221))))
 (let ((?x34988 (- (- ?x34984 (* (* 2.0 l_0_11_215) l_0_11_222)) (* (* 2.0 l_0_11_216) l_0_11_223))))
 (let ((?x34992 (- (- ?x34988 (* (* 2.0 l_0_11_235) l_0_11_242)) (* (* 2.0 l_0_11_236) l_0_11_243))))
 (let ((?x34997 (- (- (- ?x34992 (* (* 2.0 l_0_11_237) l_0_11_244)) ?x34077) (* (* 2.0 l_0_11_256) l_0_11_263))))
 (let ((?x35001 (- (- ?x34997 (* (* 2.0 l_0_11_257) l_0_11_264)) (* (* 2.0 l_0_11_258) l_0_11_265))))
 (let ((?x35007 (- (- (- (- ?x35001 ?x34079) ?x34081) (* (* 2.0 l_0_11_277) l_0_11_284)) (* (* 2.0 l_0_11_278) l_0_11_285))))
 (let ((?x35014 (- (- (+ (- ?x35007 (* (* 2.0 l_0_11_279) l_0_11_286)) ?x34763) ?x35011) ?x35013)))
 (= (+ (+ (+ (- (- ?x35014 ?x35015) ?x34765) ?x35018) ?x35020) ?x35022) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32061 (* l_0_11_66 l_0_11_66)))
 (let ((?x32736 (* 3.0 ?x32061)))
 (let ((?x32058 (* l_0_11_65 l_0_11_65)))
 (let ((?x32734 (* 3.0 ?x32058)))
 (let ((?x32732 (* (* 3.0 l_0_11_45) l_0_11_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_11_44) l_0_11_44) ?x32732) ?x32734) ?x32736) 0.0)))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x32980 (* ?x32979 l_0_11_68)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x32977 (* ?x32976 l_0_11_67)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x32974 (* ?x32973 l_0_11_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_11_44) l_0_11_46) ?x32974) ?x32977) ?x32980) 0.0))))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33168 (* ?x32979 l_0_11_71)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33166 (* ?x32976 l_0_11_70)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33164 (* ?x32973 l_0_11_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_11_44) l_0_11_49) ?x33164) ?x33166) ?x33168) 0.0))))))))
(assert
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33256 (* ?x32979 l_0_11_75)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33253 (* ?x32976 l_0_11_74)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33250 (* ?x32973 l_0_11_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_11_44) l_0_11_53) ?x33250) ?x33253) ?x33256) 0.0))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x32276 (* ?x31027 l_0_11_86)))
 (let ((?x32979 (* 6.0 l_0_11_66)))
 (let ((?x33321 (* ?x32979 l_0_11_80)))
 (let ((?x32976 (* 6.0 l_0_11_65)))
 (let ((?x33319 (* ?x32976 l_0_11_79)))
 (let ((?x32973 (* 6.0 l_0_11_45)))
 (let ((?x33316 (* ?x32973 l_0_11_59)))
 (let ((?x32970 (* 6.0 l_0_11_44)))
 (let ((?x33314 (* ?x32970 l_0_11_58)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x32236 (* ?x30942 l_0_11_170)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x32234 (* ?x30939 l_0_11_149)))
 (let ((?x35127 (- (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_107) ?x32234) ?x32236) ?x33314) ?x33316)))
 (= (+ (+ (+ ?x35127 ?x33319) ?x33321) ?x32276) 0.0)))))))))))))))))
(assert
 (let ((?x33873 (* l_0_11_69 l_0_11_69)))
 (let ((?x33874 (* 3.0 ?x33873)))
 (let ((?x33870 (* l_0_11_68 l_0_11_68)))
 (let ((?x33871 (* 3.0 ?x33870)))
 (let ((?x33867 (* l_0_11_67 l_0_11_67)))
 (let ((?x33868 (* 3.0 ?x33867)))
 (let ((?x33861 (* (* 3.0 l_0_11_48) l_0_11_48)))
 (let ((?x33858 (* (* 3.0 l_0_11_47) l_0_11_47)))
 (let ((?x35143 (+ (+ (- (- (* (* (- 3.0) l_0_11_46) l_0_11_46) ?x33858) ?x33861) ?x33868) ?x33871)))
 (= (+ ?x35143 ?x33874) 0.0)))))))))))
(assert
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x33985 (* ?x33984 l_0_11_72)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x33982 (* ?x33981 l_0_11_71)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x33979 (* ?x33978 l_0_11_70)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x33970 (* ?x33969 l_0_11_51)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x33967 (* ?x33966 l_0_11_50)))
 (let ((?x35157 (+ (+ (- (- (* (* (- 6.0) l_0_11_46) l_0_11_49) ?x33967) ?x33970) ?x33979) ?x33982)))
 (= (+ ?x35157 ?x33985) 0.0)))))))))))))
(assert
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x34098 (* ?x33984 l_0_11_76)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x34095 (* ?x33981 l_0_11_75)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x34092 (* ?x33978 l_0_11_74)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x34089 (* ?x33969 l_0_11_55)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x34086 (* ?x33966 l_0_11_54)))
 (let ((?x35167 (+ (+ (- (- (* (* (- 6.0) l_0_11_46) l_0_11_53) ?x34086) ?x34089) ?x34092) ?x34095)))
 (= (+ ?x35167 ?x34098) 0.0)))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x34926 (* ?x31027 l_0_11_88)))
 (let ((?x33984 (* 6.0 l_0_11_69)))
 (let ((?x34190 (* ?x33984 l_0_11_81)))
 (let ((?x33981 (* 6.0 l_0_11_68)))
 (let ((?x34188 (* ?x33981 l_0_11_80)))
 (let ((?x33978 (* 6.0 l_0_11_67)))
 (let ((?x34186 (* ?x33978 l_0_11_79)))
 (let ((?x33969 (* 6.0 l_0_11_48)))
 (let ((?x34183 (* ?x33969 l_0_11_60)))
 (let ((?x33966 (* 6.0 l_0_11_47)))
 (let ((?x34181 (* ?x33966 l_0_11_59)))
 (let ((?x33963 (* 6.0 l_0_11_46)))
 (let ((?x34179 (* ?x33963 l_0_11_58)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x34876 (* ?x30942 l_0_11_172)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x34874 (* ?x30939 l_0_11_151)))
 (let ((?x35174 (- (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_109) ?x34874) ?x34876) ?x34179) ?x34181)))
 (= (+ (+ (+ (+ (- ?x35174 ?x34183) ?x34186) ?x34188) ?x34190) ?x34926) 0.0)))))))))))))))))))))
(assert
 (let ((?x31021 (* l_0_11_73 l_0_11_73)))
 (let ((?x34262 (* 3.0 ?x31021)))
 (let ((?x31018 (* l_0_11_72 l_0_11_72)))
 (let ((?x34260 (* 3.0 ?x31018)))
 (let ((?x31015 (* l_0_11_71 l_0_11_71)))
 (let ((?x34258 (* 3.0 ?x31015)))
 (let ((?x31012 (* l_0_11_70 l_0_11_70)))
 (let ((?x34256 (* 3.0 ?x31012)))
 (let ((?x34253 (* (* 3.0 l_0_11_52) l_0_11_52)))
 (let ((?x34250 (* (* 3.0 l_0_11_51) l_0_11_51)))
 (let ((?x34247 (* (* 3.0 l_0_11_50) l_0_11_50)))
 (let ((?x35184 (+ (- (- (- (* (* (- 3.0) l_0_11_49) l_0_11_49) ?x34247) ?x34250) ?x34253) ?x34256)))
 (= (+ (+ (+ ?x35184 ?x34258) ?x34260) ?x34262) 0.0))))))))))))))
(assert
 (let ((?x34426 (* 6.0 l_0_11_73)))
 (let ((?x34427 (* ?x34426 l_0_11_77)))
 (let ((?x34422 (* 6.0 l_0_11_72)))
 (let ((?x34423 (* ?x34422 l_0_11_76)))
 (let ((?x34418 (* 6.0 l_0_11_71)))
 (let ((?x34419 (* ?x34418 l_0_11_75)))
 (let ((?x34414 (* 6.0 l_0_11_70)))
 (let ((?x34415 (* ?x34414 l_0_11_74)))
 (let ((?x34410 (* 6.0 l_0_11_52)))
 (let ((?x34411 (* ?x34410 l_0_11_56)))
 (let ((?x34406 (* 6.0 l_0_11_51)))
 (let ((?x34407 (* ?x34406 l_0_11_55)))
 (let ((?x34402 (* 6.0 l_0_11_50)))
 (let ((?x34403 (* ?x34402 l_0_11_54)))
 (let ((?x35196 (+ (- (- (- (* (* (- 6.0) l_0_11_49) l_0_11_53) ?x34403) ?x34407) ?x34411) ?x34415)))
 (= (+ (+ (+ ?x35196 ?x34419) ?x34423) ?x34427) 0.0)))))))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x31028 (* ?x31027 l_0_11_91)))
 (let ((?x34426 (* 6.0 l_0_11_73)))
 (let ((?x34593 (* ?x34426 l_0_11_82)))
 (let ((?x34422 (* 6.0 l_0_11_72)))
 (let ((?x34591 (* ?x34422 l_0_11_81)))
 (let ((?x34418 (* 6.0 l_0_11_71)))
 (let ((?x34589 (* ?x34418 l_0_11_80)))
 (let ((?x34414 (* 6.0 l_0_11_70)))
 (let ((?x34587 (* ?x34414 l_0_11_79)))
 (let ((?x34410 (* 6.0 l_0_11_52)))
 (let ((?x34584 (* ?x34410 l_0_11_61)))
 (let ((?x34406 (* 6.0 l_0_11_51)))
 (let ((?x34582 (* ?x34406 l_0_11_60)))
 (let ((?x34402 (* 6.0 l_0_11_50)))
 (let ((?x34580 (* ?x34402 l_0_11_59)))
 (let ((?x34398 (* 6.0 l_0_11_49)))
 (let ((?x34578 (* ?x34398 l_0_11_58)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x30943 (* ?x30942 l_0_11_175)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x30940 (* ?x30939 l_0_11_154)))
 (let ((?x35215 (- (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x30940) ?x30943) ?x34578) ?x34580)))
 (let ((?x35222 (+ (+ (+ (+ (+ (- (- ?x35215 ?x34582) ?x34584) ?x34587) ?x34589) ?x34591) ?x34593) ?x31028)))
 (= ?x35222 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31264 (* l_0_11_78 l_0_11_78)))
 (let ((?x34657 (* 3.0 ?x31264)))
 (let ((?x31261 (* l_0_11_77 l_0_11_77)))
 (let ((?x34654 (* 3.0 ?x31261)))
 (let ((?x31258 (* l_0_11_76 l_0_11_76)))
 (let ((?x34651 (* 3.0 ?x31258)))
 (let ((?x31255 (* l_0_11_75 l_0_11_75)))
 (let ((?x34648 (* 3.0 ?x31255)))
 (let ((?x31252 (* l_0_11_74 l_0_11_74)))
 (let ((?x34645 (* 3.0 ?x31252)))
 (let ((?x34642 (* (* 3.0 l_0_11_57) l_0_11_57)))
 (let ((?x34638 (* (* 3.0 l_0_11_56) l_0_11_56)))
 (let ((?x34634 (* (* 3.0 l_0_11_55) l_0_11_55)))
 (let ((?x34630 (* (* 3.0 l_0_11_54) l_0_11_54)))
 (let ((?x35241 (- (- (- (- (* (* (- 3.0) l_0_11_53) l_0_11_53) ?x34630) ?x34634) ?x34638) ?x34642)))
 (= (+ (+ (+ (+ (+ ?x35241 ?x34645) ?x34648) ?x34651) ?x34654) ?x34657) 0.0)))))))))))))))))
(assert
 (let ((?x31027 (* 2.0 l_0_11_85)))
 (let ((?x31459 (* ?x31027 l_0_11_95)))
 (let ((?x34732 (* (* 6.0 l_0_11_78) l_0_11_83)))
 (let ((?x34729 (* (* 6.0 l_0_11_77) l_0_11_82)))
 (let ((?x34726 (* (* 6.0 l_0_11_76) l_0_11_81)))
 (let ((?x34723 (* (* 6.0 l_0_11_75) l_0_11_80)))
 (let ((?x34720 (* (* 6.0 l_0_11_74) l_0_11_79)))
 (let ((?x34710 (* (* 6.0 l_0_11_57) l_0_11_62)))
 (let ((?x34707 (* (* 6.0 l_0_11_56) l_0_11_61)))
 (let ((?x34704 (* (* 6.0 l_0_11_55) l_0_11_60)))
 (let ((?x34701 (* (* 6.0 l_0_11_54) l_0_11_59)))
 (let ((?x34698 (* (* 6.0 l_0_11_53) l_0_11_58)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x31359 (* ?x30942 l_0_11_179)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x31357 (* ?x30939 l_0_11_158)))
 (let ((?x35256 (- (- (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_116) ?x31357) ?x31359) ?x34698) ?x34701)))
 (let ((?x35263 (+ (+ (+ (+ (- (- (- ?x35256 ?x34704) ?x34707) ?x34710) ?x34720) ?x34723) ?x34726) ?x34729)))
 (= (+ (+ ?x35263 ?x34732) ?x31459) 0.0))))))))))))))))))))
(assert
 (let ((?x31662 (* l_0_11_84 l_0_11_84)))
 (let ((?x31663 (* 3.0 ?x31662)))
 (let ((?x31659 (* l_0_11_83 l_0_11_83)))
 (let ((?x31660 (* 3.0 ?x31659)))
 (let ((?x31656 (* l_0_11_82 l_0_11_82)))
 (let ((?x31657 (* 3.0 ?x31656)))
 (let ((?x31653 (* l_0_11_81 l_0_11_81)))
 (let ((?x31654 (* 3.0 ?x31653)))
 (let ((?x31650 (* l_0_11_80 l_0_11_80)))
 (let ((?x31651 (* 3.0 ?x31650)))
 (let ((?x31647 (* l_0_11_79 l_0_11_79)))
 (let ((?x31648 (* 3.0 ?x31647)))
 (let ((?x31642 (* (* 3.0 l_0_11_63) l_0_11_63)))
 (let ((?x31639 (* (* 3.0 l_0_11_62) l_0_11_62)))
 (let ((?x31636 (* (* 3.0 l_0_11_61) l_0_11_61)))
 (let ((?x31633 (* (* 3.0 l_0_11_60) l_0_11_60)))
 (let ((?x31630 (* (* 3.0 l_0_11_59) l_0_11_59)))
 (let ((?x31627 (* (* 3.0 l_0_11_58) l_0_11_58)))
 (let ((?x30942 (* 2.0 l_0_11_169)))
 (let ((?x33491 (* ?x30942 l_0_11_184)))
 (let ((?x30939 (* 2.0 l_0_11_148)))
 (let ((?x33487 (* ?x30939 l_0_11_163)))
 (let ((?x30936 (* 2.0 l_0_11_106)))
 (let ((?x33483 (* ?x30936 l_0_11_121)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x33481 (* ?x21725 l_0_11_85)))
 (let ((?x8595 (- (- (- (- (+ (- (- ?x33481 ?x33483) ?x33487) ?x33491) ?x31627) ?x31630) ?x31633) ?x31636)))
 (let ((?x35275 (+ (+ (+ (+ (+ (- (- ?x8595 ?x31639) ?x31642) ?x31648) ?x31651) ?x31654) ?x31657) ?x31660)))
 (= (+ ?x35275 ?x31663) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x33873 (* l_0_11_69 l_0_11_69)))
 (let ((?x33870 (* l_0_11_68 l_0_11_68)))
 (let ((?x33867 (* l_0_11_67 l_0_11_67)))
 (let ((?x33905 (* l_0_11_48 l_0_11_48)))
 (let ((?x5391 (* l_0_11_47 l_0_11_47)))
 (let ((?x6816 (* l_0_11_46 l_0_11_46)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x34060 (* ?x33838 l_0_11_139)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x34058 (* ?x33833 l_0_11_138)))
 (let ((?x8648 (+ (+ (- (- (* (* (- 2.0) l_0_11_130) l_0_11_137) ?x34058) ?x34060) ?x6816) ?x5391)))
 (= (- (- (- (+ ?x8648 ?x33905) ?x33867) ?x33870) ?x33873) 0.0)))))))))))))
(assert
 (let ((?x35315 (* 2.0 l_0_11_90)))
 (let ((?x35316 (* ?x35315 l_0_11_97)))
 (let ((?x35312 (* 2.0 l_0_11_89)))
 (let ((?x35313 (* ?x35312 l_0_11_96)))
 (let ((?x35309 (* 2.0 l_0_11_88)))
 (let ((?x35310 (* ?x35309 l_0_11_95)))
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x34924 (* ?x33439 l_0_11_72)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x34922 (* ?x33436 l_0_11_71)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x34920 (* ?x33433 l_0_11_70)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x34916 (* ?x33428 l_0_11_51)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x34914 (* ?x33425 l_0_11_50)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x34912 (* ?x33422 l_0_11_49)))
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x35301 (* ?x33951 l_0_11_181)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x35299 (* ?x33948 l_0_11_180)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x35297 (* ?x33945 l_0_11_179)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x35295 (* ?x33942 l_0_11_160)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x35293 (* ?x33939 l_0_11_159)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x35291 (* ?x33936 l_0_11_158)))
 (let ((?x33933 (* 2.0 l_0_11_136)))
 (let ((?x34362 (* ?x33933 l_0_11_140)))
 (let ((?x33930 (* 2.0 l_0_11_135)))
 (let ((?x34360 (* ?x33930 l_0_11_139)))
 (let ((?x33927 (* 2.0 l_0_11_134)))
 (let ((?x34358 (* ?x33927 l_0_11_138)))
 (let ((?x33924 (* 2.0 l_0_11_133)))
 (let ((?x34356 (* ?x33924 l_0_11_137)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x35285 (* ?x33914 l_0_11_118)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x24878 (* ?x33911 l_0_11_117)))
 (let ((?x35288 (- (- (+ (+ (* (* 2.0 l_0_11_109) l_0_11_116) ?x24878) ?x35285) ?x34356) ?x34358)))
 (let ((?x35300 (- (- (+ (+ (+ (- (- ?x35288 ?x34360) ?x34362) ?x35291) ?x35293) ?x35295) ?x35297) ?x35299)))
 (let ((?x35308 (- (- (- (+ (+ (+ (- ?x35300 ?x35301) ?x34912) ?x34914) ?x34916) ?x34920) ?x34922) ?x34924)))
 (= (- (- (- ?x35308 ?x35310) ?x35313) ?x35316) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33439 (* 2.0 l_0_11_69)))
 (let ((?x35022 (* ?x33439 l_0_11_76)))
 (let ((?x33436 (* 2.0 l_0_11_68)))
 (let ((?x35020 (* ?x33436 l_0_11_75)))
 (let ((?x33433 (* 2.0 l_0_11_67)))
 (let ((?x35018 (* ?x33433 l_0_11_74)))
 (let ((?x33428 (* 2.0 l_0_11_48)))
 (let ((?x35015 (* ?x33428 l_0_11_55)))
 (let ((?x33425 (* 2.0 l_0_11_47)))
 (let ((?x35013 (* ?x33425 l_0_11_54)))
 (let ((?x33422 (* 2.0 l_0_11_46)))
 (let ((?x35011 (* ?x33422 l_0_11_53)))
 (let ((?x34616 (* l_0_11_141 l_0_11_141)))
 (let ((?x34614 (* l_0_11_140 l_0_11_140)))
 (let ((?x23630 (* l_0_11_139 l_0_11_139)))
 (let ((?x24956 (- (- (* (- l_0_11_137) l_0_11_137) (* l_0_11_138 l_0_11_138)) ?x23630)))
 (let ((?x35335 (- (- (+ (+ (+ (- (- ?x24956 ?x34614) ?x34616) ?x35011) ?x35013) ?x35015) ?x35018) ?x35020)))
 (= (- ?x35335 ?x35022) 0.0)))))))))))))))))))
(assert
 (let ((?x35375 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x35372 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x35369 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x35366 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x31021 (* l_0_11_73 l_0_11_73)))
 (let ((?x31018 (* l_0_11_72 l_0_11_72)))
 (let ((?x31015 (* l_0_11_71 l_0_11_71)))
 (let ((?x31012 (* l_0_11_70 l_0_11_70)))
 (let ((?x31101 (* l_0_11_52 l_0_11_52)))
 (let ((?x19006 (* l_0_11_51 l_0_11_51)))
 (let ((?x31096 (* l_0_11_50 l_0_11_50)))
 (let ((?x19001 (* l_0_11_49 l_0_11_49)))
 (let ((?x34236 (* 2.0 l_0_11_178)))
 (let ((?x35355 (* ?x34236 l_0_11_182)))
 (let ((?x34233 (* 2.0 l_0_11_177)))
 (let ((?x35353 (* ?x34233 l_0_11_181)))
 (let ((?x34230 (* 2.0 l_0_11_176)))
 (let ((?x35351 (* ?x34230 l_0_11_180)))
 (let ((?x34227 (* 2.0 l_0_11_175)))
 (let ((?x35349 (* ?x34227 l_0_11_179)))
 (let ((?x34224 (* 2.0 l_0_11_157)))
 (let ((?x35347 (* ?x34224 l_0_11_161)))
 (let ((?x34221 (* 2.0 l_0_11_156)))
 (let ((?x35345 (* ?x34221 l_0_11_160)))
 (let ((?x34218 (* 2.0 l_0_11_155)))
 (let ((?x35343 (* ?x34218 l_0_11_159)))
 (let ((?x34215 (* 2.0 l_0_11_154)))
 (let ((?x35341 (* ?x34215 l_0_11_158)))
 (let ((?x34204 (* 2.0 l_0_11_115)))
 (let ((?x35339 (* ?x34204 l_0_11_119)))
 (let ((?x34201 (* 2.0 l_0_11_114)))
 (let ((?x25038 (* ?x34201 l_0_11_118)))
 (let ((?x34198 (* 2.0 l_0_11_113)))
 (let ((?x25044 (* ?x34198 l_0_11_117)))
 (let ((?x35342 (+ (+ (+ (+ (* (* 2.0 l_0_11_112) l_0_11_116) ?x25044) ?x25038) ?x35339) ?x35341)))
 (let ((?x35356 (- (- (- (- (+ (+ (+ ?x35342 ?x35343) ?x35345) ?x35347) ?x35349) ?x35351) ?x35353) ?x35355)))
 (let ((?x35363 (- (- (- (+ (+ (+ (+ ?x35356 ?x19001) ?x31096) ?x19006) ?x31101) ?x31012) ?x31015) ?x31018)))
 (= (- (- (- (- (- ?x35363 ?x31021) ?x35366) ?x35369) ?x35372) ?x35375) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35462 (* l_0_11_99 l_0_11_99)))
 (let ((?x35460 (* l_0_11_98 l_0_11_98)))
 (let ((?x35458 (* l_0_11_97 l_0_11_97)))
 (let ((?x35456 (* l_0_11_96 l_0_11_96)))
 (let ((?x35454 (* l_0_11_95 l_0_11_95)))
 (let ((?x31456 (* 2.0 l_0_11_73)))
 (let ((?x31457 (* ?x31456 l_0_11_77)))
 (let ((?x31453 (* 2.0 l_0_11_72)))
 (let ((?x31454 (* ?x31453 l_0_11_76)))
 (let ((?x31450 (* 2.0 l_0_11_71)))
 (let ((?x31451 (* ?x31450 l_0_11_75)))
 (let ((?x31447 (* 2.0 l_0_11_70)))
 (let ((?x31448 (* ?x31447 l_0_11_74)))
 (let ((?x31443 (* 2.0 l_0_11_52)))
 (let ((?x31444 (* ?x31443 l_0_11_56)))
 (let ((?x31440 (* 2.0 l_0_11_51)))
 (let ((?x31441 (* ?x31440 l_0_11_55)))
 (let ((?x31437 (* 2.0 l_0_11_50)))
 (let ((?x31438 (* ?x31437 l_0_11_54)))
 (let ((?x31434 (* 2.0 l_0_11_49)))
 (let ((?x31435 (* ?x31434 l_0_11_53)))
 (let ((?x35444 (* l_0_11_183 l_0_11_183)))
 (let ((?x35442 (* l_0_11_182 l_0_11_182)))
 (let ((?x35440 (* l_0_11_181 l_0_11_181)))
 (let ((?x35438 (* l_0_11_180 l_0_11_180)))
 (let ((?x35436 (* l_0_11_179 l_0_11_179)))
 (let ((?x35434 (* l_0_11_162 l_0_11_162)))
 (let ((?x35432 (* l_0_11_161 l_0_11_161)))
 (let ((?x35430 (* l_0_11_160 l_0_11_160)))
 (let ((?x35428 (* l_0_11_159 l_0_11_159)))
 (let ((?x35426 (* l_0_11_158 l_0_11_158)))
 (let ((?x35424 (* l_0_11_120 l_0_11_120)))
 (let ((?x35422 (* l_0_11_119 l_0_11_119)))
 (let ((?x35420 (* l_0_11_118 l_0_11_118)))
 (let ((?x35421 (+ (+ (* l_0_11_116 l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35420)))
 (let ((?x35435 (+ (+ (+ (+ (+ (+ (+ ?x35421 ?x35422) ?x35424) ?x35426) ?x35428) ?x35430) ?x35432) ?x35434)))
 (let ((?x35447 (+ (+ (- (- (- (- (- ?x35435 ?x35436) ?x35438) ?x35440) ?x35442) ?x35444) ?x31435) ?x31438)))
 (let ((?x35455 (- (- (- (- (- (+ (+ ?x35447 ?x31441) ?x31444) ?x31448) ?x31451) ?x31454) ?x31457) ?x35454)))
 (= (- (- (- (- ?x35455 ?x35456) ?x35458) ?x35460) ?x35462) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31264 (* l_0_11_78 l_0_11_78)))
 (let ((?x31261 (* l_0_11_77 l_0_11_77)))
 (let ((?x31258 (* l_0_11_76 l_0_11_76)))
 (let ((?x31255 (* l_0_11_75 l_0_11_75)))
 (let ((?x31252 (* l_0_11_74 l_0_11_74)))
 (let ((?x20636 (* l_0_11_57 l_0_11_57)))
 (let ((?x20588 (* l_0_11_56 l_0_11_56)))
 (let ((?x20577 (* l_0_11_55 l_0_11_55)))
 (let ((?x25119 (+ (+ (+ (* l_0_11_53 l_0_11_53) (* l_0_11_54 l_0_11_54)) ?x20577) ?x20588)))
 (= (- (- (- (- (- (+ ?x25119 ?x20636) ?x31252) ?x31255) ?x31258) ?x31261) ?x31264) 0.0)))))))))))
(assert
 (let ((?x35506 (* l_0_11_90 l_0_11_90)))
 (let ((?x35504 (* l_0_11_89 l_0_11_89)))
 (let ((?x35502 (* l_0_11_88 l_0_11_88)))
 (let ((?x35500 (* l_0_11_174 l_0_11_174)))
 (let ((?x35498 (* l_0_11_173 l_0_11_173)))
 (let ((?x35496 (* l_0_11_172 l_0_11_172)))
 (let ((?x35494 (* l_0_11_153 l_0_11_153)))
 (let ((?x35492 (* l_0_11_152 l_0_11_152)))
 (let ((?x35490 (* l_0_11_151 l_0_11_151)))
 (let ((?x33838 (* 2.0 l_0_11_132)))
 (let ((?x33922 (* ?x33838 l_0_11_135)))
 (let ((?x33833 (* 2.0 l_0_11_131)))
 (let ((?x33920 (* ?x33833 l_0_11_134)))
 (let ((?x33917 (* 2.0 l_0_11_130)))
 (let ((?x33918 (* ?x33917 l_0_11_133)))
 (let ((?x35485 (* l_0_11_111 l_0_11_111)))
 (let ((?x35486 (+ (+ (* l_0_11_109 l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x35485)))
 (let ((?x35497 (- (+ (+ (+ (- (- (- ?x35486 ?x33918) ?x33920) ?x33922) ?x35490) ?x35492) ?x35494) ?x35496)))
 (= (- (- (- (- (- ?x35497 ?x35498) ?x35500) ?x35502) ?x35504) ?x35506) 0.0))))))))))))))))))))
(assert
 (let ((?x35315 (* 2.0 l_0_11_90)))
 (let ((?x35550 (* ?x35315 l_0_11_93)))
 (let ((?x35312 (* 2.0 l_0_11_89)))
 (let ((?x35548 (* ?x35312 l_0_11_92)))
 (let ((?x35309 (* 2.0 l_0_11_88)))
 (let ((?x35546 (* ?x35309 l_0_11_91)))
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x35544 (* ?x33951 l_0_11_177)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x35542 (* ?x33948 l_0_11_176)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x35540 (* ?x33945 l_0_11_175)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x35538 (* ?x33942 l_0_11_156)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x35536 (* ?x33939 l_0_11_155)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x35534 (* ?x33936 l_0_11_154)))
 (let ((?x34213 (* l_0_11_136 l_0_11_136)))
 (let ((?x34211 (* l_0_11_135 l_0_11_135)))
 (let ((?x34209 (* l_0_11_134 l_0_11_134)))
 (let ((?x34207 (* l_0_11_133 l_0_11_133)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x35528 (* ?x33914 l_0_11_114)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x35526 (* ?x33911 l_0_11_113)))
 (let ((?x35531 (- (- (+ (+ (* (* 2.0 l_0_11_109) l_0_11_112) ?x35526) ?x35528) ?x34207) ?x34209)))
 (let ((?x35543 (- (- (+ (+ (+ (- (- ?x35531 ?x34211) ?x34213) ?x35534) ?x35536) ?x35538) ?x35540) ?x35542)))
 (= (- (- (- (- ?x35543 ?x35544) ?x35546) ?x35548) ?x35550) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35610 (* l_0_11_94 l_0_11_94)))
 (let ((?x35608 (* l_0_11_93 l_0_11_93)))
 (let ((?x35606 (* l_0_11_92 l_0_11_92)))
 (let ((?x35604 (* l_0_11_91 l_0_11_91)))
 (let ((?x35602 (* l_0_11_178 l_0_11_178)))
 (let ((?x35600 (* l_0_11_177 l_0_11_177)))
 (let ((?x35598 (* l_0_11_176 l_0_11_176)))
 (let ((?x35596 (* l_0_11_175 l_0_11_175)))
 (let ((?x35594 (* l_0_11_157 l_0_11_157)))
 (let ((?x35592 (* l_0_11_156 l_0_11_156)))
 (let ((?x35590 (* l_0_11_155 l_0_11_155)))
 (let ((?x35588 (* l_0_11_154 l_0_11_154)))
 (let ((?x35586 (* l_0_11_115 l_0_11_115)))
 (let ((?x35584 (* l_0_11_114 l_0_11_114)))
 (let ((?x35585 (+ (+ (* l_0_11_112 l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x35584)))
 (let ((?x35599 (- (- (+ (+ (+ (+ (+ ?x35585 ?x35586) ?x35588) ?x35590) ?x35592) ?x35594) ?x35596) ?x35598)))
 (= (- (- (- (- (- (- ?x35599 ?x35600) ?x35602) ?x35604) ?x35606) ?x35608) ?x35610) 0.0))))))))))))))))))
(assert
 (let ((?x32664 (* l_0_11_87 l_0_11_87)))
 (let ((?x32662 (* l_0_11_86 l_0_11_86)))
 (let ((?x32652 (* l_0_11_171 l_0_11_171)))
 (let ((?x32650 (* l_0_11_170 l_0_11_170)))
 (let ((?x32648 (* l_0_11_150 l_0_11_150)))
 (let ((?x32646 (* l_0_11_149 l_0_11_149)))
 (let ((?x35633 (- (- (* (- l_0_11_107) l_0_11_107) (* l_0_11_108 l_0_11_108)) ?x32646)))
 (= (+ (+ (+ (+ (- ?x35633 ?x32648) ?x32650) ?x32652) ?x32662) ?x32664) 0.0)))))))))
(assert
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x32843 (* ?x32842 l_0_11_89)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x32840 (* ?x32839 l_0_11_88)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x32819 (* ?x32818 l_0_11_173)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x32816 (* ?x32815 l_0_11_172)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x32813 (* ?x32812 l_0_11_152)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x32810 (* ?x32809 l_0_11_151)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x32802 (* ?x32801 l_0_11_110)))
 (let ((?x35644 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_109) ?x32802) ?x32810) ?x32813) ?x32816)))
 (= (+ (+ (+ ?x35644 ?x32819) ?x32840) ?x32843) 0.0)))))))))))))))))
(assert
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x33037 (* ?x32842 l_0_11_92)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x33035 (* ?x32839 l_0_11_91)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33027 (* ?x32818 l_0_11_176)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33025 (* ?x32815 l_0_11_175)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33023 (* ?x32812 l_0_11_155)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x33021 (* ?x32809 l_0_11_154)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x33019 (* ?x32801 l_0_11_113)))
 (let ((?x35652 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_112) ?x33019) ?x33021) ?x33023) ?x33025)))
 (= (+ (+ (+ ?x35652 ?x33027) ?x33035) ?x33037) 0.0)))))))))))))))))
(assert
 (let ((?x32842 (* 2.0 l_0_11_87)))
 (let ((?x33084 (* ?x32842 l_0_11_96)))
 (let ((?x32839 (* 2.0 l_0_11_86)))
 (let ((?x33082 (* ?x32839 l_0_11_95)))
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33064 (* ?x32818 l_0_11_180)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33062 (* ?x32815 l_0_11_179)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33060 (* ?x32812 l_0_11_159)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x4837 (* ?x32809 l_0_11_158)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x4735 (* ?x32801 l_0_11_117)))
 (let ((?x9610 (+ (- (- (- (* (* (- 2.0) l_0_11_107) l_0_11_116) ?x4735) ?x4837) ?x33060) ?x33062)))
 (= (+ (+ (+ ?x9610 ?x33064) ?x33082) ?x33084) 0.0)))))))))))))))))
(assert
 (let ((?x32818 (* 2.0 l_0_11_171)))
 (let ((?x33146 (* ?x32818 l_0_11_185)))
 (let ((?x32815 (* 2.0 l_0_11_170)))
 (let ((?x33144 (* ?x32815 l_0_11_184)))
 (let ((?x32812 (* 2.0 l_0_11_150)))
 (let ((?x33138 (* ?x32812 l_0_11_164)))
 (let ((?x32809 (* 2.0 l_0_11_149)))
 (let ((?x33136 (* ?x32809 l_0_11_163)))
 (let ((?x32801 (* 2.0 l_0_11_108)))
 (let ((?x33132 (* ?x32801 l_0_11_122)))
 (let ((?x32799 (* 2.0 l_0_11_107)))
 (let ((?x33130 (* ?x32799 l_0_11_121)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x33128 (* ?x33127 l_0_11_87)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x4925 (* ?x21725 l_0_11_86)))
 (let ((?x35666 (+ (+ (- (- (- (- (+ ?x4925 ?x33128) ?x33130) ?x33132) ?x33136) ?x33138) ?x33144) ?x33146)))
 (= ?x35666 0.0)))))))))))))))))))
(assert
 (let ((?x35506 (* l_0_11_90 l_0_11_90)))
 (let ((?x35504 (* l_0_11_89 l_0_11_89)))
 (let ((?x35502 (* l_0_11_88 l_0_11_88)))
 (let ((?x35500 (* l_0_11_174 l_0_11_174)))
 (let ((?x35498 (* l_0_11_173 l_0_11_173)))
 (let ((?x35496 (* l_0_11_172 l_0_11_172)))
 (let ((?x35494 (* l_0_11_153 l_0_11_153)))
 (let ((?x35492 (* l_0_11_152 l_0_11_152)))
 (let ((?x35490 (* l_0_11_151 l_0_11_151)))
 (let ((?x35485 (* l_0_11_111 l_0_11_111)))
 (let ((?x25282 (- (- (* (- l_0_11_109) l_0_11_109) (* l_0_11_110 l_0_11_110)) ?x35485)))
 (let ((?x9527 (+ (+ (+ (+ (- (- (- ?x25282 ?x35490) ?x35492) ?x35494) ?x35496) ?x35498) ?x35500) ?x35502)))
 (= (+ (+ ?x9527 ?x35504) ?x35506) 0.0))))))))))))))
(assert
 (let ((?x35315 (* 2.0 l_0_11_90)))
 (let ((?x35550 (* ?x35315 l_0_11_93)))
 (let ((?x35312 (* 2.0 l_0_11_89)))
 (let ((?x35548 (* ?x35312 l_0_11_92)))
 (let ((?x35309 (* 2.0 l_0_11_88)))
 (let ((?x35546 (* ?x35309 l_0_11_91)))
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x35544 (* ?x33951 l_0_11_177)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x35542 (* ?x33948 l_0_11_176)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x35540 (* ?x33945 l_0_11_175)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x35538 (* ?x33942 l_0_11_156)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x35536 (* ?x33939 l_0_11_155)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x35534 (* ?x33936 l_0_11_154)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x35528 (* ?x33914 l_0_11_114)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x35526 (* ?x33911 l_0_11_113)))
 (let ((?x25323 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_112) ?x35526) ?x35528) ?x35534) ?x35536)))
 (let ((?x35672 (+ (+ (+ (+ (+ (+ (- ?x25323 ?x35538) ?x35540) ?x35542) ?x35544) ?x35546) ?x35548) ?x35550)))
 (= ?x35672 0.0))))))))))))))))))))))))))
(assert
 (let ((?x35315 (* 2.0 l_0_11_90)))
 (let ((?x35316 (* ?x35315 l_0_11_97)))
 (let ((?x35312 (* 2.0 l_0_11_89)))
 (let ((?x35313 (* ?x35312 l_0_11_96)))
 (let ((?x35309 (* 2.0 l_0_11_88)))
 (let ((?x35310 (* ?x35309 l_0_11_95)))
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x35301 (* ?x33951 l_0_11_181)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x35299 (* ?x33948 l_0_11_180)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x35297 (* ?x33945 l_0_11_179)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x35295 (* ?x33942 l_0_11_160)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x35293 (* ?x33939 l_0_11_159)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x35291 (* ?x33936 l_0_11_158)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x35285 (* ?x33914 l_0_11_118)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x24878 (* ?x33911 l_0_11_117)))
 (let ((?x35677 (- (- (- (- (* (* (- 2.0) l_0_11_109) l_0_11_116) ?x24878) ?x35285) ?x35291) ?x35293)))
 (let ((?x35684 (+ (+ (+ (+ (+ (+ (- ?x35677 ?x35295) ?x35297) ?x35299) ?x35301) ?x35310) ?x35313) ?x35316)))
 (= ?x35684 0.0))))))))))))))))))))))))))
(assert
 (let ((?x33951 (* 2.0 l_0_11_174)))
 (let ((?x33952 (* ?x33951 l_0_11_186)))
 (let ((?x33948 (* 2.0 l_0_11_173)))
 (let ((?x33949 (* ?x33948 l_0_11_185)))
 (let ((?x33945 (* 2.0 l_0_11_172)))
 (let ((?x33946 (* ?x33945 l_0_11_184)))
 (let ((?x33942 (* 2.0 l_0_11_153)))
 (let ((?x33943 (* ?x33942 l_0_11_165)))
 (let ((?x33939 (* 2.0 l_0_11_152)))
 (let ((?x33940 (* ?x33939 l_0_11_164)))
 (let ((?x33936 (* 2.0 l_0_11_151)))
 (let ((?x33937 (* ?x33936 l_0_11_163)))
 (let ((?x33914 (* 2.0 l_0_11_111)))
 (let ((?x33915 (* ?x33914 l_0_11_123)))
 (let ((?x33911 (* 2.0 l_0_11_110)))
 (let ((?x33912 (* ?x33911 l_0_11_122)))
 (let ((?x6815 (* 2.0 l_0_11_109)))
 (let ((?x33909 (* ?x6815 l_0_11_121)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x6838 (* ?x22988 l_0_11_90)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x22982 (* ?x33127 l_0_11_89)))
 (let ((?x35694 (- (- (+ (+ (* (* 2.0 l_0_11_100) l_0_11_88) ?x22982) ?x6838) ?x33909) ?x33912)))
 (let ((?x35701 (+ (+ (+ (- (- (- (- ?x35694 ?x33915) ?x33937) ?x33940) ?x33943) ?x33946) ?x33949) ?x33952)))
 (= ?x35701 0.0))))))))))))))))))))))))))
(assert
 (let ((?x35610 (* l_0_11_94 l_0_11_94)))
 (let ((?x35608 (* l_0_11_93 l_0_11_93)))
 (let ((?x35606 (* l_0_11_92 l_0_11_92)))
 (let ((?x35604 (* l_0_11_91 l_0_11_91)))
 (let ((?x35602 (* l_0_11_178 l_0_11_178)))
 (let ((?x35600 (* l_0_11_177 l_0_11_177)))
 (let ((?x35598 (* l_0_11_176 l_0_11_176)))
 (let ((?x35596 (* l_0_11_175 l_0_11_175)))
 (let ((?x35594 (* l_0_11_157 l_0_11_157)))
 (let ((?x35592 (* l_0_11_156 l_0_11_156)))
 (let ((?x35590 (* l_0_11_155 l_0_11_155)))
 (let ((?x35588 (* l_0_11_154 l_0_11_154)))
 (let ((?x35586 (* l_0_11_115 l_0_11_115)))
 (let ((?x35584 (* l_0_11_114 l_0_11_114)))
 (let ((?x10026 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x35584)))
 (let ((?x35709 (+ (+ (- (- (- (- (- ?x10026 ?x35586) ?x35588) ?x35590) ?x35592) ?x35594) ?x35596) ?x35598)))
 (= (+ (+ (+ (+ (+ (+ ?x35709 ?x35600) ?x35602) ?x35604) ?x35606) ?x35608) ?x35610) 0.0))))))))))))))))))
(assert
 (let ((?x35375 (* (* 2.0 l_0_11_94) l_0_11_98)))
 (let ((?x35372 (* (* 2.0 l_0_11_93) l_0_11_97)))
 (let ((?x35369 (* (* 2.0 l_0_11_92) l_0_11_96)))
 (let ((?x35366 (* (* 2.0 l_0_11_91) l_0_11_95)))
 (let ((?x34236 (* 2.0 l_0_11_178)))
 (let ((?x35355 (* ?x34236 l_0_11_182)))
 (let ((?x34233 (* 2.0 l_0_11_177)))
 (let ((?x35353 (* ?x34233 l_0_11_181)))
 (let ((?x34230 (* 2.0 l_0_11_176)))
 (let ((?x35351 (* ?x34230 l_0_11_180)))
 (let ((?x34227 (* 2.0 l_0_11_175)))
 (let ((?x35349 (* ?x34227 l_0_11_179)))
 (let ((?x34224 (* 2.0 l_0_11_157)))
 (let ((?x35347 (* ?x34224 l_0_11_161)))
 (let ((?x34221 (* 2.0 l_0_11_156)))
 (let ((?x35345 (* ?x34221 l_0_11_160)))
 (let ((?x34218 (* 2.0 l_0_11_155)))
 (let ((?x35343 (* ?x34218 l_0_11_159)))
 (let ((?x34215 (* 2.0 l_0_11_154)))
 (let ((?x35341 (* ?x34215 l_0_11_158)))
 (let ((?x34204 (* 2.0 l_0_11_115)))
 (let ((?x35339 (* ?x34204 l_0_11_119)))
 (let ((?x34201 (* 2.0 l_0_11_114)))
 (let ((?x25038 (* ?x34201 l_0_11_118)))
 (let ((?x34198 (* 2.0 l_0_11_113)))
 (let ((?x25044 (* ?x34198 l_0_11_117)))
 (let ((?x35732 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_116) ?x25044) ?x25038) ?x35339) ?x35341)))
 (let ((?x35739 (+ (+ (+ (+ (- (- (- ?x35732 ?x35343) ?x35345) ?x35347) ?x35349) ?x35351) ?x35353) ?x35355)))
 (= (+ (+ (+ (+ ?x35739 ?x35366) ?x35369) ?x35372) ?x35375) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x34236 (* 2.0 l_0_11_178)))
 (let ((?x34237 (* ?x34236 l_0_11_187)))
 (let ((?x34233 (* 2.0 l_0_11_177)))
 (let ((?x34234 (* ?x34233 l_0_11_186)))
 (let ((?x34230 (* 2.0 l_0_11_176)))
 (let ((?x34231 (* ?x34230 l_0_11_185)))
 (let ((?x34227 (* 2.0 l_0_11_175)))
 (let ((?x34228 (* ?x34227 l_0_11_184)))
 (let ((?x34224 (* 2.0 l_0_11_157)))
 (let ((?x34225 (* ?x34224 l_0_11_166)))
 (let ((?x34221 (* 2.0 l_0_11_156)))
 (let ((?x34222 (* ?x34221 l_0_11_165)))
 (let ((?x34218 (* 2.0 l_0_11_155)))
 (let ((?x34219 (* ?x34218 l_0_11_164)))
 (let ((?x34215 (* 2.0 l_0_11_154)))
 (let ((?x34216 (* ?x34215 l_0_11_163)))
 (let ((?x34204 (* 2.0 l_0_11_115)))
 (let ((?x34205 (* ?x34204 l_0_11_124)))
 (let ((?x34201 (* 2.0 l_0_11_114)))
 (let ((?x34202 (* ?x34201 l_0_11_123)))
 (let ((?x34198 (* 2.0 l_0_11_113)))
 (let ((?x34199 (* ?x34198 l_0_11_122)))
 (let ((?x34195 (* 2.0 l_0_11_112)))
 (let ((?x34196 (* ?x34195 l_0_11_121)))
 (let ((?x23263 (* 2.0 l_0_11_103)))
 (let ((?x34193 (* ?x23263 l_0_11_94)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x7164 (* ?x22988 l_0_11_93)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x23272 (* ?x33127 l_0_11_92)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x23275 (* ?x21725 l_0_11_91)))
 (let ((?x35755 (- (- (- (- (+ (+ (+ ?x23275 ?x23272) ?x7164) ?x34193) ?x34196) ?x34199) ?x34202) ?x34205)))
 (let ((?x35762 (+ (+ (+ (- (- (- (- ?x35755 ?x34216) ?x34219) ?x34222) ?x34225) ?x34228) ?x34231) ?x34234)))
 (= (+ ?x35762 ?x34237) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35462 (* l_0_11_99 l_0_11_99)))
 (let ((?x35460 (* l_0_11_98 l_0_11_98)))
 (let ((?x35458 (* l_0_11_97 l_0_11_97)))
 (let ((?x35456 (* l_0_11_96 l_0_11_96)))
 (let ((?x35454 (* l_0_11_95 l_0_11_95)))
 (let ((?x35444 (* l_0_11_183 l_0_11_183)))
 (let ((?x35442 (* l_0_11_182 l_0_11_182)))
 (let ((?x35440 (* l_0_11_181 l_0_11_181)))
 (let ((?x35438 (* l_0_11_180 l_0_11_180)))
 (let ((?x35436 (* l_0_11_179 l_0_11_179)))
 (let ((?x35434 (* l_0_11_162 l_0_11_162)))
 (let ((?x35432 (* l_0_11_161 l_0_11_161)))
 (let ((?x35430 (* l_0_11_160 l_0_11_160)))
 (let ((?x35428 (* l_0_11_159 l_0_11_159)))
 (let ((?x35426 (* l_0_11_158 l_0_11_158)))
 (let ((?x35424 (* l_0_11_120 l_0_11_120)))
 (let ((?x35422 (* l_0_11_119 l_0_11_119)))
 (let ((?x35420 (* l_0_11_118 l_0_11_118)))
 (let ((?x8629 (- (- (* (- l_0_11_116) l_0_11_116) (* l_0_11_117 l_0_11_117)) ?x35420)))
 (let ((?x35770 (- (- (- (- (- (- (- ?x8629 ?x35422) ?x35424) ?x35426) ?x35428) ?x35430) ?x35432) ?x35434)))
 (let ((?x35777 (+ (+ (+ (+ (+ (+ (+ ?x35770 ?x35436) ?x35438) ?x35440) ?x35442) ?x35444) ?x35454) ?x35456)))
 (= (+ (+ (+ ?x35777 ?x35458) ?x35460) ?x35462) 0.0)))))))))))))))))))))))
(assert
 (let ((?x34392 (* (* 2.0 l_0_11_183) l_0_11_188)))
 (let ((?x34389 (* (* 2.0 l_0_11_182) l_0_11_187)))
 (let ((?x34386 (* (* 2.0 l_0_11_181) l_0_11_186)))
 (let ((?x34383 (* (* 2.0 l_0_11_180) l_0_11_185)))
 (let ((?x34380 (* (* 2.0 l_0_11_179) l_0_11_184)))
 (let ((?x34377 (* (* 2.0 l_0_11_162) l_0_11_167)))
 (let ((?x34374 (* (* 2.0 l_0_11_161) l_0_11_166)))
 (let ((?x34371 (* (* 2.0 l_0_11_160) l_0_11_165)))
 (let ((?x34368 (* (* 2.0 l_0_11_159) l_0_11_164)))
 (let ((?x34365 (* (* 2.0 l_0_11_158) l_0_11_163)))
 (let ((?x34353 (* (* 2.0 l_0_11_120) l_0_11_125)))
 (let ((?x34349 (* (* 2.0 l_0_11_119) l_0_11_124)))
 (let ((?x34346 (* (* 2.0 l_0_11_118) l_0_11_123)))
 (let ((?x34343 (* (* 2.0 l_0_11_117) l_0_11_122)))
 (let ((?x34340 (* (* 2.0 l_0_11_116) l_0_11_121)))
 (let ((?x34336 (* (* 2.0 l_0_11_104) l_0_11_99)))
 (let ((?x23263 (* 2.0 l_0_11_103)))
 (let ((?x34333 (* ?x23263 l_0_11_98)))
 (let ((?x22988 (* 2.0 l_0_11_102)))
 (let ((?x34331 (* ?x22988 l_0_11_97)))
 (let ((?x33127 (* 2.0 l_0_11_101)))
 (let ((?x34329 (* ?x33127 l_0_11_96)))
 (let ((?x21725 (* 2.0 l_0_11_100)))
 (let ((?x7364 (* ?x21725 l_0_11_95)))
 (let ((?x10353 (- (- (- (+ (+ (+ (+ ?x7364 ?x34329) ?x34331) ?x34333) ?x34336) ?x34340) ?x34343) ?x34346)))
 (let ((?x35798 (- (- (- (- (- (- (- ?x10353 ?x34349) ?x34353) ?x34365) ?x34368) ?x34371) ?x34374) ?x34377)))
 (= (+ (+ (+ (+ (+ ?x35798 ?x34380) ?x34383) ?x34386) ?x34389) ?x34392) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x34571 (* l_0_11_189 l_0_11_189)))
 (let ((?x34569 (* l_0_11_188 l_0_11_188)))
 (let ((?x34567 (* l_0_11_187 l_0_11_187)))
 (let ((?x34565 (* l_0_11_186 l_0_11_186)))
 (let ((?x34563 (* l_0_11_185 l_0_11_185)))
 (let ((?x34561 (* l_0_11_184 l_0_11_184)))
 (let ((?x34557 (* l_0_11_168 l_0_11_168)))
 (let ((?x34555 (* l_0_11_167 l_0_11_167)))
 (let ((?x34553 (* l_0_11_166 l_0_11_166)))
 (let ((?x34551 (* l_0_11_165 l_0_11_165)))
 (let ((?x34549 (* l_0_11_164 l_0_11_164)))
 (let ((?x34547 (* l_0_11_163 l_0_11_163)))
 (let ((?x34540 (* l_0_11_126 l_0_11_126)))
 (let ((?x34538 (* l_0_11_125 l_0_11_125)))
 (let ((?x34536 (* l_0_11_124 l_0_11_124)))
 (let ((?x34534 (* l_0_11_123 l_0_11_123)))
 (let ((?x34532 (* l_0_11_122 l_0_11_122)))
 (let ((?x34530 (* l_0_11_121 l_0_11_121)))
 (let ((?x34528 (* l_0_11_105 l_0_11_105)))
 (let ((?x34526 (* l_0_11_104 l_0_11_104)))
 (let ((?x34524 (* l_0_11_103 l_0_11_103)))
 (let ((?x34522 (* l_0_11_102 l_0_11_102)))
 (let ((?x9453 (+ (+ (* l_0_11_100 l_0_11_100) (* l_0_11_101 l_0_11_101)) ?x34522)))
 (let ((?x35815 (- (- (- (- (+ (+ (+ ?x9453 ?x34524) ?x34526) ?x34528) ?x34530) ?x34532) ?x34534) ?x34536)))
 (let ((?x35822 (- (- (- (- (- (- (- ?x35815 ?x34538) ?x34540) ?x34547) ?x34549) ?x34551) ?x34553) ?x34555)))
 (let ((?x35829 (+ (+ (+ (+ (+ (+ (- ?x35822 ?x34557) ?x34561) ?x34563) ?x34565) ?x34567) ?x34569) ?x34571)))
 (= ?x35829 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x33841 (* l_0_11_132 l_0_11_132)))
 (let ((?x25613 (- (- (* (- l_0_11_130) l_0_11_130) (* l_0_11_131 l_0_11_131)) ?x33841)))
 (= ?x25613 0.0))))
(assert
 (>= l_0_11_1 0.0))
(assert
 (>= l_0_11_3 0.0))
(assert
 (>= l_0_11_6 0.0))
(assert
 (>= l_0_11_10 0.0))
(assert
 (>= l_0_11_15 0.0))
(assert
 (>= l_0_11_21 0.0))
(assert
 (>= l_0_11_22 0.0))
(assert
 (>= l_0_11_24 0.0))
(assert
 (>= l_0_11_27 0.0))
(assert
 (>= l_0_11_31 0.0))
(assert
 (>= l_0_11_36 0.0))
(assert
 (>= l_0_11_42 0.0))
(assert
 (>= l_0_11_43 0.0))
(assert
 (>= l_0_11_45 0.0))
(assert
 (>= l_0_11_48 0.0))
(assert
 (>= l_0_11_52 0.0))
(assert
 (>= l_0_11_57 0.0))
(assert
 (>= l_0_11_63 0.0))
(assert
 (>= l_0_11_64 0.0))
(assert
 (>= l_0_11_66 0.0))
(assert
 (>= l_0_11_69 0.0))
(assert
 (>= l_0_11_73 0.0))
(assert
 (>= l_0_11_78 0.0))
(assert
 (>= l_0_11_84 0.0))
(assert
 (>= l_0_11_85 0.0))
(assert
 (>= l_0_11_87 0.0))
(assert
 (>= l_0_11_90 0.0))
(assert
 (>= l_0_11_94 0.0))
(assert
 (>= l_0_11_99 0.0))
(assert
 (>= l_0_11_105 0.0))
(assert
 (>= l_0_11_106 0.0))
(assert
 (>= l_0_11_108 0.0))
(assert
 (>= l_0_11_111 0.0))
(assert
 (>= l_0_11_115 0.0))
(assert
 (>= l_0_11_120 0.0))
(assert
 (>= l_0_11_126 0.0))
(assert
 (>= l_0_11_127 0.0))
(assert
 (>= l_0_11_129 0.0))
(assert
 (>= l_0_11_132 0.0))
(assert
 (>= l_0_11_136 0.0))
(assert
 (>= l_0_11_141 0.0))
(assert
 (>= l_0_11_147 0.0))
(assert
 (>= l_0_11_148 0.0))
(assert
 (>= l_0_11_150 0.0))
(assert
 (>= l_0_11_153 0.0))
(assert
 (>= l_0_11_157 0.0))
(assert
 (>= l_0_11_162 0.0))
(assert
 (>= l_0_11_168 0.0))
(assert
 (>= l_0_11_169 0.0))
(assert
 (>= l_0_11_171 0.0))
(assert
 (>= l_0_11_174 0.0))
(assert
 (>= l_0_11_178 0.0))
(assert
 (>= l_0_11_183 0.0))
(assert
 (>= l_0_11_189 0.0))
(assert
 (>= l_0_11_190 0.0))
(assert
 (>= l_0_11_192 0.0))
(assert
 (>= l_0_11_195 0.0))
(assert
 (>= l_0_11_199 0.0))
(assert
 (>= l_0_11_204 0.0))
(assert
 (>= l_0_11_210 0.0))
(assert
 (>= l_0_11_211 0.0))
(assert
 (>= l_0_11_213 0.0))
(assert
 (>= l_0_11_216 0.0))
(assert
 (>= l_0_11_220 0.0))
(assert
 (>= l_0_11_225 0.0))
(assert
 (>= l_0_11_231 0.0))
(assert
 (>= l_0_11_232 0.0))
(assert
 (>= l_0_11_234 0.0))
(assert
 (>= l_0_11_237 0.0))
(assert
 (>= l_0_11_241 0.0))
(assert
 (>= l_0_11_246 0.0))
(assert
 (>= l_0_11_252 0.0))
(assert
 (>= l_0_11_253 0.0))
(assert
 (>= l_0_11_255 0.0))
(assert
 (>= l_0_11_258 0.0))
(assert
 (>= l_0_11_262 0.0))
(assert
 (>= l_0_11_267 0.0))
(assert
 (>= l_0_11_273 0.0))
(assert
 (>= l_0_11_274 0.0))
(assert
 (>= l_0_11_276 0.0))
(assert
 (>= l_0_11_279 0.0))
(assert
 (>= l_0_11_283 0.0))
(assert
 (>= l_0_11_288 0.0))
(assert
 (>= l_0_11_294 0.0))
(assert
 (let ((?x35997 (* l_0_12_85 l_0_12_85)))
 (let ((?x35994 (* l_0_12_84 l_0_12_84)))
 (let ((?x35995 (* 3.0 ?x35994)))
 (let ((?x35991 (* l_0_12_83 l_0_12_83)))
 (let ((?x35992 (* 3.0 ?x35991)))
 (let ((?x35988 (* l_0_12_82 l_0_12_82)))
 (let ((?x35989 (* 3.0 ?x35988)))
 (let ((?x35985 (* l_0_12_81 l_0_12_81)))
 (let ((?x35986 (* 3.0 ?x35985)))
 (let ((?x35982 (* l_0_12_80 l_0_12_80)))
 (let ((?x35983 (* 3.0 ?x35982)))
 (let ((?x35979 (* l_0_12_79 l_0_12_79)))
 (let ((?x35980 (* 3.0 ?x35979)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x35977 (* ?x35976 l_0_12_79)))
 (let ((?x35974 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x35971 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x35968 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x35965 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x35962 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x35959 (* (* 3.0 l_0_12_58) l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x35956 (* ?x35955 l_0_12_58)))
 (let ((?x35953 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x35950 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x35947 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x35944 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x35941 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x35938 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x35934 (* l_0_12_21 l_0_12_21)))
 (let ((?x35935 (* 6.0 ?x35934)))
 (let ((?x35931 (* l_0_12_20 l_0_12_20)))
 (let ((?x35932 (* 6.0 ?x35931)))
 (let ((?x35928 (* l_0_12_19 l_0_12_19)))
 (let ((?x35929 (* 6.0 ?x35928)))
 (let ((?x35925 (* l_0_12_18 l_0_12_18)))
 (let ((?x35926 (* 6.0 ?x35925)))
 (let ((?x35922 (* l_0_12_17 l_0_12_17)))
 (let ((?x35923 (* 6.0 ?x35922)))
 (let ((?x35920 (* l_0_12_169 l_0_12_169)))
 (let ((?x35917 (* l_0_12_16 l_0_12_16)))
 (let ((?x35918 (* 6.0 ?x35917)))
 (let ((?x35915 (* l_0_12_148 l_0_12_148)))
 (let ((?x35913 (* l_0_12_147 l_0_12_147)))
 (let ((?x35911 (* l_0_12_146 l_0_12_146)))
 (let ((?x35909 (* l_0_12_145 l_0_12_145)))
 (let ((?x35907 (* l_0_12_144 l_0_12_144)))
 (let ((?x35905 (* l_0_12_143 l_0_12_143)))
 (let ((?x35906 (+ (+ (* (- l_0_12_106) l_0_12_106) (* l_0_12_142 l_0_12_142)) ?x35905)))
 (let ((?x35921 (+ (+ (- (+ (+ (+ (+ ?x35906 ?x35907) ?x35909) ?x35911) ?x35913) ?x35915) ?x35918) ?x35920)))
 (let ((?x35942 (- (- (+ (+ (+ (+ (+ ?x35921 ?x35923) ?x35926) ?x35929) ?x35932) ?x35935) ?x35938) ?x35941)))
 (let ((?x35963 (- (- (- (- (- (- (- ?x35942 ?x35944) ?x35947) ?x35950) ?x35953) ?x35956) ?x35959) ?x35962)))
 (let ((?x35984 (+ (+ (+ (- (- (- (- ?x35963 ?x35965) ?x35968) ?x35971) ?x35974) ?x35977) ?x35980) ?x35983)))
 (= (+ (+ (+ (+ (+ (+ ?x35984 ?x35986) ?x35989) ?x35992) ?x35995) ?x35997) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36182 (* l_0_12_64 l_0_12_64)))
 (let ((?x36183 (* 3.0 ?x36182)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x35977 (* ?x35976 l_0_12_79)))
 (let ((?x36161 (* (* 3.0 l_0_12_43) l_0_12_43)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x35956 (* ?x35955 l_0_12_58)))
 (let ((?x35953 (* (* 6.0 l_0_12_42) l_0_12_42)))
 (let ((?x35950 (* (* 6.0 l_0_12_41) l_0_12_41)))
 (let ((?x35947 (* (* 6.0 l_0_12_40) l_0_12_40)))
 (let ((?x35944 (* (* 6.0 l_0_12_39) l_0_12_39)))
 (let ((?x35941 (* (* 6.0 l_0_12_38) l_0_12_38)))
 (let ((?x35938 (* (* 6.0 l_0_12_37) l_0_12_37)))
 (let ((?x36151 (* l_0_12_315 l_0_12_315)))
 (let ((?x36149 (* l_0_12_314 l_0_12_314)))
 (let ((?x36147 (* l_0_12_313 l_0_12_313)))
 (let ((?x36145 (* l_0_12_312 l_0_12_312)))
 (let ((?x36143 (* l_0_12_311 l_0_12_311)))
 (let ((?x36141 (* l_0_12_310 l_0_12_310)))
 (let ((?x36139 (* l_0_12_294 l_0_12_294)))
 (let ((?x36137 (* l_0_12_293 l_0_12_293)))
 (let ((?x36135 (* l_0_12_292 l_0_12_292)))
 (let ((?x36133 (* l_0_12_291 l_0_12_291)))
 (let ((?x36131 (* l_0_12_290 l_0_12_290)))
 (let ((?x36129 (* l_0_12_289 l_0_12_289)))
 (let ((?x36127 (* l_0_12_273 l_0_12_273)))
 (let ((?x36125 (* l_0_12_272 l_0_12_272)))
 (let ((?x36123 (* l_0_12_271 l_0_12_271)))
 (let ((?x36121 (* l_0_12_270 l_0_12_270)))
 (let ((?x36119 (* l_0_12_269 l_0_12_269)))
 (let ((?x36117 (* l_0_12_268 l_0_12_268)))
 (let ((?x36115 (* l_0_12_252 l_0_12_252)))
 (let ((?x36113 (* l_0_12_251 l_0_12_251)))
 (let ((?x36111 (* l_0_12_250 l_0_12_250)))
 (let ((?x36109 (* l_0_12_249 l_0_12_249)))
 (let ((?x36107 (* l_0_12_248 l_0_12_248)))
 (let ((?x36105 (* l_0_12_247 l_0_12_247)))
 (let ((?x36103 (* l_0_12_231 l_0_12_231)))
 (let ((?x36101 (* l_0_12_230 l_0_12_230)))
 (let ((?x36099 (* l_0_12_229 l_0_12_229)))
 (let ((?x36097 (* l_0_12_228 l_0_12_228)))
 (let ((?x36095 (* l_0_12_227 l_0_12_227)))
 (let ((?x36093 (* l_0_12_226 l_0_12_226)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36091 (* ?x36090 l_0_12_37)))
 (let ((?x36088 (* l_0_12_210 l_0_12_210)))
 (let ((?x35934 (* l_0_12_21 l_0_12_21)))
 (let ((?x35935 (* 6.0 ?x35934)))
 (let ((?x36085 (* l_0_12_209 l_0_12_209)))
 (let ((?x36083 (* l_0_12_208 l_0_12_208)))
 (let ((?x36081 (* l_0_12_207 l_0_12_207)))
 (let ((?x36079 (* l_0_12_206 l_0_12_206)))
 (let ((?x36077 (* l_0_12_205 l_0_12_205)))
 (let ((?x35931 (* l_0_12_20 l_0_12_20)))
 (let ((?x35932 (* 6.0 ?x35931)))
 (let ((?x35928 (* l_0_12_19 l_0_12_19)))
 (let ((?x35929 (* 6.0 ?x35928)))
 (let ((?x35925 (* l_0_12_18 l_0_12_18)))
 (let ((?x35926 (* 6.0 ?x35925)))
 (let ((?x35922 (* l_0_12_17 l_0_12_17)))
 (let ((?x35923 (* 6.0 ?x35922)))
 (let ((?x35917 (* l_0_12_16 l_0_12_16)))
 (let ((?x35918 (* 6.0 ?x35917)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x36070 (* ?x36069 l_0_12_142)))
 (let ((?x11018 (* 12.0 l_0_12_1)))
 (let ((?x36045 (* ?x11018 l_0_12_16)))
 (let ((?x36078 (- (+ (+ (+ (+ (+ (+ ?x36045 ?x36070) ?x35918) ?x35923) ?x35926) ?x35929) ?x35932) ?x36077)))
 (let ((?x36092 (- (- (+ (- (- (- (- ?x36078 ?x36079) ?x36081) ?x36083) ?x36085) ?x35935) ?x36088) ?x36091)))
 (let ((?x36106 (- (- (- (- (- (- (- ?x36092 ?x36093) ?x36095) ?x36097) ?x36099) ?x36101) ?x36103) ?x36105)))
 (let ((?x36120 (- (- (- (- (- (- (- ?x36106 ?x36107) ?x36109) ?x36111) ?x36113) ?x36115) ?x36117) ?x36119)))
 (let ((?x36134 (- (- (- (- (- (- (- ?x36120 ?x36121) ?x36123) ?x36125) ?x36127) ?x36129) ?x36131) ?x36133)))
 (let ((?x36148 (- (- (- (- (- (- (- ?x36134 ?x36135) ?x36137) ?x36139) ?x36141) ?x36143) ?x36145) ?x36147)))
 (let ((?x36157 (- (- (- (- (- (- (- ?x36148 ?x36149) ?x36151) ?x35938) ?x35941) ?x35944) ?x35947) ?x35950)))
 (let ((?x36165 (- (- (- (- ?x36157 ?x35953) ?x35956) ?x36161) (* (* 1.0 l_0_12_58) l_0_12_58))))
 (let ((?x36171 (- (- ?x36165 (* (* 1.0 l_0_12_59) l_0_12_59)) (* (* 1.0 l_0_12_60) l_0_12_60))))
 (let ((?x36177 (- (- ?x36171 (* (* 1.0 l_0_12_61) l_0_12_61)) (* (* 1.0 l_0_12_62) l_0_12_62))))
 (let ((?x36186 (+ (+ (+ (- ?x36177 (* (* 1.0 l_0_12_63) l_0_12_63)) ?x35977) ?x36183) (* 1.0 (* l_0_12_79 l_0_12_79)))))
 (let ((?x36190 (+ (+ ?x36186 (* 1.0 (* l_0_12_80 l_0_12_80))) (* 1.0 (* l_0_12_81 l_0_12_81)))))
 (let ((?x36194 (+ (+ ?x36190 (* 1.0 (* l_0_12_82 l_0_12_82))) (* 1.0 (* l_0_12_83 l_0_12_83)))))
 (= (+ (+ ?x36194 (* 1.0 (* l_0_12_84 l_0_12_84))) 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36182 (* l_0_12_64 l_0_12_64)))
 (let ((?x36183 (* 3.0 ?x36182)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36293 (* ?x36292 l_0_12_79)))
 (let ((?x36161 (* (* 3.0 l_0_12_43) l_0_12_43)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36289 (* ?x36288 l_0_12_58)))
 (let ((?x36274 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36091 (* ?x36090 l_0_12_37)))
 (let ((?x36264 (* l_0_12_127 l_0_12_127)))
 (let ((?x22892 (* l_0_12_1 l_0_12_1)))
 (let ((?x36262 (* 6.0 ?x22892)))
 (let ((?x11018 (* 12.0 l_0_12_1)))
 (let ((?x36045 (* ?x11018 l_0_12_16)))
 (let ((?x36271 (- (- (+ (+ ?x36045 ?x36262) ?x36264) (* (* 2.0 l_0_12_190) l_0_12_205)) (* (* 2.0 l_0_12_211) l_0_12_226))))
 (let ((?x36281 (- (- (- (- ?x36271 ?x36091) ?x36274) (* (* 2.0 l_0_12_232) l_0_12_247)) (* (* 2.0 l_0_12_253) l_0_12_268))))
 (let ((?x36287 (- (- ?x36281 (* (* 2.0 l_0_12_274) l_0_12_289)) (* (* 2.0 l_0_12_295) l_0_12_310))))
 (= (+ (+ (+ (- (- ?x36287 ?x36289) ?x36161) ?x36293) ?x36183) 3.0) 0.0))))))))))))))))))))
(assert
 (let ((?x36341 (* l_0_12_295 l_0_12_295)))
 (let ((?x36339 (* l_0_12_274 l_0_12_274)))
 (let ((?x36337 (* l_0_12_253 l_0_12_253)))
 (let ((?x36335 (* l_0_12_232 l_0_12_232)))
 (let ((?x36274 (* (* 6.0 l_0_12_22) l_0_12_22)))
 (let ((?x36332 (* l_0_12_211 l_0_12_211)))
 (let ((?x36330 (* l_0_12_190 l_0_12_190)))
 (let ((?x36333 (- (- (+ (- _a_0_) (* 6.0 (* l_0_12_1 l_0_12_1))) ?x36330) ?x36332)))
 (let ((?x36345 (- (- (- (- (- (- ?x36333 ?x36274) ?x36335) ?x36337) ?x36339) ?x36341) (* (* 1.0 l_0_12_43) l_0_12_43))))
 (= (+ (+ ?x36345 (* 1.0 (* l_0_12_64 l_0_12_64))) 1.0) 0.0)))))))))))
(assert
 (let ((?x35997 (* l_0_12_85 l_0_12_85)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36386 (* ?x36292 l_0_12_70)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36384 (* ?x36288 l_0_12_49)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36374 (* ?x36090 l_0_12_28)))
 (let ((?x35920 (* l_0_12_169 l_0_12_169)))
 (let ((?x35915 (* l_0_12_148 l_0_12_148)))
 (let ((?x36002 (* l_0_12_106 l_0_12_106)))
 (let ((?x36368 (+ (+ (+ (- _a_1_) (* (* 12.0 l_0_12_1) l_0_12_7)) ?x36002) ?x35915)))
 (let ((?x36373 (- (- (- ?x36368 ?x35920) (* (* 2.0 l_0_12_190) l_0_12_196)) (* (* 2.0 l_0_12_211) l_0_12_217))))
 (let ((?x36379 (- (- (- ?x36373 ?x36374) (* (* 2.0 l_0_12_232) l_0_12_238)) (* (* 2.0 l_0_12_253) l_0_12_259))))
 (let ((?x36383 (- (- ?x36379 (* (* 2.0 l_0_12_274) l_0_12_280)) (* (* 2.0 l_0_12_295) l_0_12_301))))
 (= (- (+ (- ?x36383 ?x36384) ?x36386) ?x35997) 0.0))))))))))))))))
(assert
 (let ((?x36522 (* l_0_12_9 l_0_12_9)))
 (let ((?x36523 (* 6.0 ?x36522)))
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x36520 (* ?x36519 l_0_12_91)))
 (let ((?x36516 (* l_0_12_8 l_0_12_8)))
 (let ((?x36517 (* 6.0 ?x36516)))
 (let ((?x36501 (* l_0_12_7 l_0_12_7)))
 (let ((?x36502 (* 6.0 ?x36501)))
 (let ((?x36487 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x36484 (* l_0_12_304 l_0_12_304)))
 (let ((?x36482 (* l_0_12_303 l_0_12_303)))
 (let ((?x36480 (* l_0_12_302 l_0_12_302)))
 (let ((?x36478 (* l_0_12_301 l_0_12_301)))
 (let ((?x36476 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x36473 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x36470 (* l_0_12_283 l_0_12_283)))
 (let ((?x36468 (* l_0_12_282 l_0_12_282)))
 (let ((?x36466 (* l_0_12_281 l_0_12_281)))
 (let ((?x36464 (* l_0_12_280 l_0_12_280)))
 (let ((?x36462 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x36459 (* l_0_12_262 l_0_12_262)))
 (let ((?x36457 (* l_0_12_261 l_0_12_261)))
 (let ((?x36455 (* l_0_12_260 l_0_12_260)))
 (let ((?x36453 (* l_0_12_259 l_0_12_259)))
 (let ((?x36451 (* l_0_12_241 l_0_12_241)))
 (let ((?x36449 (* l_0_12_240 l_0_12_240)))
 (let ((?x36447 (* l_0_12_239 l_0_12_239)))
 (let ((?x36445 (* l_0_12_238 l_0_12_238)))
 (let ((?x36443 (* l_0_12_220 l_0_12_220)))
 (let ((?x36441 (* l_0_12_219 l_0_12_219)))
 (let ((?x36439 (* l_0_12_218 l_0_12_218)))
 (let ((?x36437 (* l_0_12_217 l_0_12_217)))
 (let ((?x36435 (* l_0_12_199 l_0_12_199)))
 (let ((?x36433 (* l_0_12_198 l_0_12_198)))
 (let ((?x36431 (* l_0_12_197 l_0_12_197)))
 (let ((?x36429 (* l_0_12_196 l_0_12_196)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x36427 (* ?x36426 l_0_12_175)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x36424 (* ?x36423 l_0_12_154)))
 (let ((?x36422 (+ (+ (- _a_2_) (* 6.0 (* l_0_12_10 l_0_12_10))) (* (* 2.0 l_0_12_106) l_0_12_112))))
 (let ((?x36438 (- (- (- (- (- (- (+ ?x36422 ?x36424) ?x36427) ?x36429) ?x36431) ?x36433) ?x36435) ?x36437)))
 (let ((?x36452 (- (- (- (- (- (- (- ?x36438 ?x36439) ?x36441) ?x36443) ?x36445) ?x36447) ?x36449) ?x36451)))
 (let ((?x36467 (- (- (- (- (- (- (- ?x36452 ?x36453) ?x36455) ?x36457) ?x36459) ?x36462) ?x36464) ?x36466)))
 (let ((?x36483 (- (- (- (- (- (- (- ?x36467 ?x36468) ?x36470) ?x36473) ?x36476) ?x36478) ?x36480) ?x36482)))
 (let ((?x36494 (- (- (- (- ?x36483 ?x36484) ?x36487) (* (* 1.0 l_0_12_49) l_0_12_49)) (* (* 1.0 l_0_12_50) l_0_12_50))))
 (let ((?x36500 (- (- ?x36494 (* (* 1.0 l_0_12_51) l_0_12_51)) (* (* 1.0 l_0_12_52) l_0_12_52))))
 (let ((?x36509 (+ (+ (+ ?x36500 ?x36502) (* 1.0 (* l_0_12_70 l_0_12_70))) (* 1.0 (* l_0_12_71 l_0_12_71)))))
 (let ((?x36515 (+ (+ ?x36509 (* 1.0 (* l_0_12_72 l_0_12_72))) (* 1.0 (* l_0_12_73 l_0_12_73)))))
 (= (+ (- (+ ?x36515 ?x36517) ?x36520) ?x36523) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36182 (* l_0_12_64 l_0_12_64)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36639 (* ?x36292 l_0_12_74)))
 (let ((?x11354 (* l_0_12_43 l_0_12_43)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36636 (* ?x36288 l_0_12_53)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36626 (* ?x36090 l_0_12_32)))
 (let ((?x36623 (- (+ (- _a_3_) (* (* 12.0 l_0_12_1) l_0_12_11)) (* (* 2.0 l_0_12_190) l_0_12_200))))
 (let ((?x36629 (- (- (- ?x36623 (* (* 2.0 l_0_12_211) l_0_12_221)) ?x36626) (* (* 2.0 l_0_12_232) l_0_12_242))))
 (let ((?x36633 (- (- ?x36629 (* (* 2.0 l_0_12_253) l_0_12_263)) (* (* 2.0 l_0_12_274) l_0_12_284))))
 (let ((?x36640 (+ (+ (- (- ?x36633 (* (* 2.0 l_0_12_295) l_0_12_305)) ?x36636) ?x11354) ?x36639)))
 (= (- ?x36640 ?x36182) 0.0))))))))))))))
(assert
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36639 (* ?x36292 l_0_12_74)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36636 (* ?x36288 l_0_12_53)))
 (let ((?x36768 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x36765 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x36762 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x36759 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x36756 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x36753 (* l_0_12_309 l_0_12_309)))
 (let ((?x36751 (* l_0_12_308 l_0_12_308)))
 (let ((?x36749 (* l_0_12_307 l_0_12_307)))
 (let ((?x36747 (* l_0_12_306 l_0_12_306)))
 (let ((?x36745 (* l_0_12_305 l_0_12_305)))
 (let ((?x36743 (* l_0_12_288 l_0_12_288)))
 (let ((?x36741 (* l_0_12_287 l_0_12_287)))
 (let ((?x36739 (* l_0_12_286 l_0_12_286)))
 (let ((?x36737 (* l_0_12_285 l_0_12_285)))
 (let ((?x36735 (* l_0_12_284 l_0_12_284)))
 (let ((?x36733 (* l_0_12_267 l_0_12_267)))
 (let ((?x36731 (* l_0_12_266 l_0_12_266)))
 (let ((?x36729 (* l_0_12_265 l_0_12_265)))
 (let ((?x36727 (* l_0_12_264 l_0_12_264)))
 (let ((?x36725 (* l_0_12_263 l_0_12_263)))
 (let ((?x36723 (* l_0_12_246 l_0_12_246)))
 (let ((?x36721 (* l_0_12_245 l_0_12_245)))
 (let ((?x36719 (* l_0_12_244 l_0_12_244)))
 (let ((?x36717 (* l_0_12_243 l_0_12_243)))
 (let ((?x36715 (* l_0_12_242 l_0_12_242)))
 (let ((?x36713 (* l_0_12_225 l_0_12_225)))
 (let ((?x36711 (* l_0_12_224 l_0_12_224)))
 (let ((?x36709 (* l_0_12_223 l_0_12_223)))
 (let ((?x36707 (* l_0_12_222 l_0_12_222)))
 (let ((?x36705 (* l_0_12_221 l_0_12_221)))
 (let ((?x36703 (* l_0_12_204 l_0_12_204)))
 (let ((?x36701 (* l_0_12_203 l_0_12_203)))
 (let ((?x36699 (* l_0_12_202 l_0_12_202)))
 (let ((?x36697 (* l_0_12_201 l_0_12_201)))
 (let ((?x36695 (* l_0_12_200 l_0_12_200)))
 (let ((?x36692 (* l_0_12_15 l_0_12_15)))
 (let ((?x36693 (* 6.0 ?x36692)))
 (let ((?x36689 (* l_0_12_14 l_0_12_14)))
 (let ((?x36690 (* 6.0 ?x36689)))
 (let ((?x36686 (* l_0_12_13 l_0_12_13)))
 (let ((?x36687 (* 6.0 ?x36686)))
 (let ((?x36683 (* l_0_12_12 l_0_12_12)))
 (let ((?x36684 (* 6.0 ?x36683)))
 (let ((?x36688 (+ (+ (+ (- _a_4_) (* 6.0 (* l_0_12_11 l_0_12_11))) ?x36684) ?x36687)))
 (let ((?x36704 (- (- (- (- (- (+ (+ ?x36688 ?x36690) ?x36693) ?x36695) ?x36697) ?x36699) ?x36701) ?x36703)))
 (let ((?x36718 (- (- (- (- (- (- (- ?x36704 ?x36705) ?x36707) ?x36709) ?x36711) ?x36713) ?x36715) ?x36717)))
 (let ((?x36732 (- (- (- (- (- (- (- ?x36718 ?x36719) ?x36721) ?x36723) ?x36725) ?x36727) ?x36729) ?x36731)))
 (let ((?x36746 (- (- (- (- (- (- (- ?x36732 ?x36733) ?x36735) ?x36737) ?x36739) ?x36741) ?x36743) ?x36745)))
 (let ((?x36763 (- (- (- (- (- (- (- ?x36746 ?x36747) ?x36749) ?x36751) ?x36753) ?x36756) ?x36759) ?x36762)))
 (let ((?x36773 (- (+ (- (- ?x36763 ?x36765) ?x36768) ?x36636) (* (* 1.0 l_0_12_53) l_0_12_53))))
 (let ((?x36779 (- (- ?x36773 (* (* 1.0 l_0_12_54) l_0_12_54)) (* (* 1.0 l_0_12_55) l_0_12_55))))
 (let ((?x36785 (- (- ?x36779 (* (* 1.0 l_0_12_56) l_0_12_56)) (* (* 1.0 l_0_12_57) l_0_12_57))))
 (let ((?x36792 (+ (+ (- ?x36785 ?x36639) (* 1.0 (* l_0_12_74 l_0_12_74))) (* 1.0 (* l_0_12_75 l_0_12_75)))))
 (let ((?x36798 (+ (+ ?x36792 (* 1.0 (* l_0_12_76 l_0_12_76))) (* 1.0 (* l_0_12_77 l_0_12_77)))))
 (= (+ ?x36798 (* 1.0 (* l_0_12_78 l_0_12_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x37025 (* ?x36519 l_0_12_95)))
 (let ((?x37022 (* 2.0 l_0_12_73)))
 (let ((?x37023 (* ?x37022 l_0_12_77)))
 (let ((?x37019 (* 2.0 l_0_12_72)))
 (let ((?x37020 (* ?x37019 l_0_12_76)))
 (let ((?x37016 (* 2.0 l_0_12_71)))
 (let ((?x37017 (* ?x37016 l_0_12_75)))
 (let ((?x37013 (* 2.0 l_0_12_70)))
 (let ((?x37014 (* ?x37013 l_0_12_74)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36386 (* ?x36292 l_0_12_70)))
 (let ((?x37009 (* 2.0 l_0_12_52)))
 (let ((?x37010 (* ?x37009 l_0_12_56)))
 (let ((?x37006 (* 2.0 l_0_12_51)))
 (let ((?x37007 (* ?x37006 l_0_12_55)))
 (let ((?x37003 (* 2.0 l_0_12_50)))
 (let ((?x37004 (* ?x37003 l_0_12_54)))
 (let ((?x37000 (* 2.0 l_0_12_49)))
 (let ((?x37001 (* ?x37000 l_0_12_53)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36384 (* ?x36288 l_0_12_49)))
 (let ((?x36996 (* 12.0 l_0_12_31)))
 (let ((?x36997 (* ?x36996 l_0_12_35)))
 (let ((?x36981 (* 12.0 l_0_12_30)))
 (let ((?x36982 (* ?x36981 l_0_12_34)))
 (let ((?x36978 (* 12.0 l_0_12_29)))
 (let ((?x36979 (* ?x36978 l_0_12_33)))
 (let ((?x36963 (* 12.0 l_0_12_28)))
 (let ((?x36964 (* ?x36963 l_0_12_32)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x36913 (* ?x36426 l_0_12_179)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x36911 (* ?x36423 l_0_12_158)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x36909 (* ?x36908 l_0_12_9)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x36906 (* ?x36905 l_0_12_8)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x36903 (* ?x36902 l_0_12_7)))
 (let ((?x36901 (+ (+ (- _a_5_) (* (* 12.0 l_0_12_10) l_0_12_14)) (* (* 2.0 l_0_12_106) l_0_12_116))))
 (let ((?x36917 (- (- (+ (+ (+ (+ ?x36901 ?x36903) ?x36906) ?x36909) ?x36911) ?x36913) (* (* 2.0 l_0_12_196) l_0_12_200))))
 (let ((?x36923 (- (- ?x36917 (* (* 2.0 l_0_12_197) l_0_12_201)) (* (* 2.0 l_0_12_198) l_0_12_202))))
 (let ((?x36929 (- (- ?x36923 (* (* 2.0 l_0_12_199) l_0_12_203)) (* (* 2.0 l_0_12_217) l_0_12_221))))
 (let ((?x36935 (- (- ?x36929 (* (* 2.0 l_0_12_218) l_0_12_222)) (* (* 2.0 l_0_12_219) l_0_12_223))))
 (let ((?x36941 (- (- ?x36935 (* (* 2.0 l_0_12_220) l_0_12_224)) (* (* 2.0 l_0_12_238) l_0_12_242))))
 (let ((?x36947 (- (- ?x36941 (* (* 2.0 l_0_12_239) l_0_12_243)) (* (* 2.0 l_0_12_240) l_0_12_244))))
 (let ((?x36953 (- (- ?x36947 (* (* 2.0 l_0_12_241) l_0_12_245)) (* (* 2.0 l_0_12_259) l_0_12_263))))
 (let ((?x36959 (- (- ?x36953 (* (* 2.0 l_0_12_260) l_0_12_264)) (* (* 2.0 l_0_12_261) l_0_12_265))))
 (let ((?x36968 (- (- (- ?x36959 (* (* 2.0 l_0_12_262) l_0_12_266)) ?x36964) (* (* 2.0 l_0_12_280) l_0_12_284))))
 (let ((?x36974 (- (- ?x36968 (* (* 2.0 l_0_12_281) l_0_12_285)) (* (* 2.0 l_0_12_282) l_0_12_286))))
 (let ((?x36986 (- (- (- (- ?x36974 (* (* 2.0 l_0_12_283) l_0_12_287)) ?x36979) ?x36982) (* (* 2.0 l_0_12_301) l_0_12_305))))
 (let ((?x36992 (- (- ?x36986 (* (* 2.0 l_0_12_302) l_0_12_306)) (* (* 2.0 l_0_12_303) l_0_12_307))))
 (let ((?x37002 (- (+ (- (- ?x36992 (* (* 2.0 l_0_12_304) l_0_12_308)) ?x36997) ?x36384) ?x37001)))
 (let ((?x37021 (+ (+ (+ (- (- (- (- ?x37002 ?x37004) ?x37007) ?x37010) ?x36386) ?x37014) ?x37017) ?x37020)))
 (= (- (+ ?x37021 ?x37023) ?x37025) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x37187 (* ?x36292 l_0_12_65)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x37185 (* ?x36288 l_0_12_44)))
 (let ((?x11537 (* l_0_12_22 l_0_12_22)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x37174 (* ?x36090 l_0_12_23)))
 (let ((?x37171 (- (- (* (* 12.0 l_0_12_1) l_0_12_2) (* l_0_12_1 l_0_12_1)) (* (* 2.0 l_0_12_190) l_0_12_191))))
 (let ((?x37178 (- (+ (- (- ?x37171 (* (* 2.0 l_0_12_211) l_0_12_212)) ?x37174) ?x11537) (* (* 2.0 l_0_12_232) l_0_12_233))))
 (let ((?x37182 (- (- ?x37178 (* (* 2.0 l_0_12_253) l_0_12_254)) (* (* 2.0 l_0_12_274) l_0_12_275))))
 (= (+ (- (- ?x37182 (* (* 2.0 l_0_12_295) l_0_12_296)) ?x37185) ?x37187) 0.0))))))))))))
(assert
 (let ((?x37253 (* l_0_12_3 l_0_12_3)))
 (let ((?x37254 (* 6.0 ?x37253)))
 (let ((?x37251 (* l_0_12_297 l_0_12_297)))
 (let ((?x37249 (* l_0_12_296 l_0_12_296)))
 (let ((?x37247 (* l_0_12_276 l_0_12_276)))
 (let ((?x37245 (* l_0_12_275 l_0_12_275)))
 (let ((?x37243 (* l_0_12_255 l_0_12_255)))
 (let ((?x37241 (* l_0_12_254 l_0_12_254)))
 (let ((?x37239 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x37236 (* l_0_12_234 l_0_12_234)))
 (let ((?x37234 (* l_0_12_233 l_0_12_233)))
 (let ((?x37232 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x37226 (* l_0_12_213 l_0_12_213)))
 (let ((?x37224 (* l_0_12_212 l_0_12_212)))
 (let ((?x37221 (* l_0_12_2 l_0_12_2)))
 (let ((?x37222 (* 6.0 ?x37221)))
 (let ((?x37219 (* l_0_12_192 l_0_12_192)))
 (let ((?x37220 (- (- (* (* (- 2.0) l_0_12_1) l_0_12_2) (* l_0_12_191 l_0_12_191)) ?x37219)))
 (let ((?x37230 (+ (- (- (+ ?x37220 ?x37222) ?x37224) ?x37226) (* (* 2.0 l_0_12_22) l_0_12_23))))
 (let ((?x37246 (- (- (- (- (- (- (- ?x37230 ?x37232) ?x37234) ?x37236) ?x37239) ?x37241) ?x37243) ?x37245)))
 (let ((?x37258 (- (+ (- (- (- ?x37246 ?x37247) ?x37249) ?x37251) ?x37254) (* (* 1.0 l_0_12_44) l_0_12_44))))
 (let ((?x37264 (+ (- ?x37258 (* (* 1.0 l_0_12_45) l_0_12_45)) (* 1.0 (* l_0_12_65 l_0_12_65)))))
 (= (+ ?x37264 (* 1.0 (* l_0_12_66 l_0_12_66))) 0.0))))))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37362 (* ?x37361 l_0_12_68)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37359 (* ?x37358 l_0_12_67)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37356 (* ?x37355 l_0_12_47)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37353 (* ?x37352 l_0_12_46)))
 (let ((?x37349 (* 12.0 l_0_12_3)))
 (let ((?x37350 (* ?x37349 l_0_12_5)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37329 (* ?x37328 l_0_12_26)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37320 (* ?x37319 l_0_12_25)))
 (let ((?x37308 (* 12.0 l_0_12_2)))
 (let ((?x37309 (* ?x37308 l_0_12_4)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x37300 (* ?x36069 l_0_12_128)))
 (let ((?x37304 (- (- (* (* (- 2.0) l_0_12_1) l_0_12_4) ?x37300) (* (* 2.0 l_0_12_191) l_0_12_193))))
 (let ((?x37313 (- (+ (- ?x37304 (* (* 2.0 l_0_12_192) l_0_12_194)) ?x37309) (* (* 2.0 l_0_12_212) l_0_12_214))))
 (let ((?x37318 (+ (- ?x37313 (* (* 2.0 l_0_12_213) l_0_12_215)) (* (* 2.0 l_0_12_22) l_0_12_25))))
 (let ((?x37327 (- (- (- ?x37318 ?x37320) (* (* 2.0 l_0_12_233) l_0_12_235)) (* (* 2.0 l_0_12_234) l_0_12_236))))
 (let ((?x37336 (- (- (- ?x37327 ?x37329) (* (* 2.0 l_0_12_254) l_0_12_256)) (* (* 2.0 l_0_12_255) l_0_12_257))))
 (let ((?x37342 (- (- ?x37336 (* (* 2.0 l_0_12_275) l_0_12_277)) (* (* 2.0 l_0_12_276) l_0_12_278))))
 (let ((?x37348 (- (- ?x37342 (* (* 2.0 l_0_12_296) l_0_12_298)) (* (* 2.0 l_0_12_297) l_0_12_299))))
 (= (+ (+ (- (- (+ ?x37348 ?x37350) ?x37353) ?x37356) ?x37359) ?x37362) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x37465 (* ?x36519 l_0_12_86)))
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37463 (* ?x37361 l_0_12_71)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37461 (* ?x37358 l_0_12_70)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37459 (* ?x37355 l_0_12_50)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37457 (* ?x37352 l_0_12_49)))
 (let ((?x37349 (* 12.0 l_0_12_3)))
 (let ((?x37455 (* ?x37349 l_0_12_8)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37441 (* ?x37328 l_0_12_29)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37435 (* ?x37319 l_0_12_28)))
 (let ((?x37308 (* 12.0 l_0_12_2)))
 (let ((?x37427 (* ?x37308 l_0_12_7)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x37421 (* ?x36426 l_0_12_170)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x37419 (* ?x36423 l_0_12_149)))
 (let ((?x37410 (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) (* (* 2.0 l_0_12_106) l_0_12_107))))
 (let ((?x37426 (- (- (- (+ ?x37410 ?x37419) ?x37421) (* (* 2.0 l_0_12_191) l_0_12_196)) (* (* 2.0 l_0_12_192) l_0_12_197))))
 (let ((?x37432 (- (- (+ ?x37426 ?x37427) (* (* 2.0 l_0_12_212) l_0_12_217)) (* (* 2.0 l_0_12_213) l_0_12_218))))
 (let ((?x37438 (- (- (+ ?x37432 (* (* 2.0 l_0_12_22) l_0_12_28)) ?x37435) (* (* 2.0 l_0_12_233) l_0_12_238))))
 (let ((?x37444 (- (- (- ?x37438 (* (* 2.0 l_0_12_234) l_0_12_239)) ?x37441) (* (* 2.0 l_0_12_254) l_0_12_259))))
 (let ((?x37448 (- (- ?x37444 (* (* 2.0 l_0_12_255) l_0_12_260)) (* (* 2.0 l_0_12_275) l_0_12_280))))
 (let ((?x37452 (- (- ?x37448 (* (* 2.0 l_0_12_276) l_0_12_281)) (* (* 2.0 l_0_12_296) l_0_12_301))))
 (let ((?x37460 (- (- (+ (- ?x37452 (* (* 2.0 l_0_12_297) l_0_12_302)) ?x37455) ?x37457) ?x37459)))
 (= (- (+ (+ ?x37460 ?x37461) ?x37463) ?x37465) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37557 (* ?x37361 l_0_12_75)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37555 (* ?x37358 l_0_12_74)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x37187 (* ?x36292 l_0_12_65)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37552 (* ?x37355 l_0_12_54)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37550 (* ?x37352 l_0_12_53)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x37185 (* ?x36288 l_0_12_44)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37535 (* ?x37328 l_0_12_33)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37529 (* ?x37319 l_0_12_32)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x37517 (* ?x36905 l_0_12_3)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x37515 (* ?x36902 l_0_12_2)))
 (let ((?x37520 (- (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_11) ?x37515) ?x37517) (* (* 2.0 l_0_12_191) l_0_12_200))))
 (let ((?x37524 (- (- ?x37520 (* (* 2.0 l_0_12_192) l_0_12_201)) (* (* 2.0 l_0_12_212) l_0_12_221))))
 (let ((?x37528 (+ (- ?x37524 (* (* 2.0 l_0_12_213) l_0_12_222)) (* (* 2.0 l_0_12_22) l_0_12_32))))
 (let ((?x37534 (- (- (- ?x37528 ?x37529) (* (* 2.0 l_0_12_233) l_0_12_242)) (* (* 2.0 l_0_12_234) l_0_12_243))))
 (let ((?x37540 (- (- (- ?x37534 ?x37535) (* (* 2.0 l_0_12_254) l_0_12_263)) (* (* 2.0 l_0_12_255) l_0_12_264))))
 (let ((?x37544 (- (- ?x37540 (* (* 2.0 l_0_12_275) l_0_12_284)) (* (* 2.0 l_0_12_276) l_0_12_285))))
 (let ((?x37548 (- (- ?x37544 (* (* 2.0 l_0_12_296) l_0_12_305)) (* (* 2.0 l_0_12_297) l_0_12_306))))
 (= (+ (+ (- (- (- (+ ?x37548 ?x37185) ?x37550) ?x37552) ?x37187) ?x37555) ?x37557) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37647 (* ?x37361 l_0_12_80)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37645 (* ?x37358 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x37643 (* ?x35976 l_0_12_65)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37641 (* ?x37355 l_0_12_59)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37639 (* ?x37352 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x37637 (* ?x35955 l_0_12_44)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37623 (* ?x37328 l_0_12_38)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37617 (* ?x37319 l_0_12_37)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x37174 (* ?x36090 l_0_12_23)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x37604 (* ?x37603 l_0_12_3)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x37601 (* ?x37600 l_0_12_2)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x37300 (* ?x36069 l_0_12_128)))
 (let ((?x11018 (* 12.0 l_0_12_1)))
 (let ((?x37168 (* ?x11018 l_0_12_2)))
 (let ((?x37605 (+ (+ (+ (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x37168) ?x37300) ?x37601) ?x37604)))
 (let ((?x37609 (- (- ?x37605 (* (* 2.0 l_0_12_191) l_0_12_205)) (* (* 2.0 l_0_12_192) l_0_12_206))))
 (let ((?x37613 (- (- ?x37609 (* (* 2.0 l_0_12_212) l_0_12_226)) (* (* 2.0 l_0_12_213) l_0_12_227))))
 (let ((?x37620 (- (- (+ (- ?x37613 ?x37174) (* (* 2.0 l_0_12_22) l_0_12_37)) ?x37617) (* (* 2.0 l_0_12_233) l_0_12_247))))
 (let ((?x37626 (- (- (- ?x37620 (* (* 2.0 l_0_12_234) l_0_12_248)) ?x37623) (* (* 2.0 l_0_12_254) l_0_12_268))))
 (let ((?x37630 (- (- ?x37626 (* (* 2.0 l_0_12_255) l_0_12_269)) (* (* 2.0 l_0_12_275) l_0_12_289))))
 (let ((?x37634 (- (- ?x37630 (* (* 2.0 l_0_12_276) l_0_12_290)) (* (* 2.0 l_0_12_296) l_0_12_310))))
 (let ((?x37642 (- (- (- (- ?x37634 (* (* 2.0 l_0_12_297) l_0_12_311)) ?x37637) ?x37639) ?x37641)))
 (= (+ (+ (+ ?x37642 ?x37643) ?x37645) ?x37647) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37253 (* l_0_12_3 l_0_12_3)))
 (let ((?x26200 (* l_0_12_24 l_0_12_24)))
 (let ((?x37698 (- (+ (+ (* (- l_0_12_2) l_0_12_2) (* l_0_12_23 l_0_12_23)) ?x26200) ?x37253)))
 (= ?x37698 0.0)))))
(assert
 (let ((?x37709 (- (- (* (- l_0_12_128) l_0_12_128) (* l_0_12_129 l_0_12_129)) (* (* 2.0 l_0_12_2) l_0_12_4))))
 (let ((?x37715 (+ (+ ?x37709 (* (* 2.0 l_0_12_23) l_0_12_25)) (* (* 2.0 l_0_12_24) l_0_12_26))))
 (= (- ?x37715 (* (* 2.0 l_0_12_3) l_0_12_5)) 0.0))))
(assert
 (let ((?x37756 (* l_0_12_87 l_0_12_87)))
 (let ((?x37754 (* l_0_12_86 l_0_12_86)))
 (let ((?x37744 (* l_0_12_171 l_0_12_171)))
 (let ((?x37742 (* l_0_12_170 l_0_12_170)))
 (let ((?x37740 (* l_0_12_150 l_0_12_150)))
 (let ((?x37738 (* l_0_12_149 l_0_12_149)))
 (let ((?x37739 (+ (+ (* l_0_12_107 l_0_12_107) (* l_0_12_108 l_0_12_108)) ?x37738)))
 (let ((?x37747 (- (- (- (+ ?x37739 ?x37740) ?x37742) ?x37744) (* (* 2.0 l_0_12_2) l_0_12_7))))
 (let ((?x37751 (+ (+ ?x37747 (* (* 2.0 l_0_12_23) l_0_12_28)) (* (* 2.0 l_0_12_24) l_0_12_29))))
 (= (- (- (- ?x37751 (* (* 2.0 l_0_12_3) l_0_12_8)) ?x37754) ?x37756) 0.0)))))))))))
(assert
 (let ((?x37265 (* l_0_12_66 l_0_12_66)))
 (let ((?x37262 (* l_0_12_65 l_0_12_65)))
 (let ((?x13044 (* l_0_12_45 l_0_12_45)))
 (let ((?x37292 (* l_0_12_44 l_0_12_44)))
 (let ((?x37778 (- (* (* (- 2.0) l_0_12_11) l_0_12_2) (* (* 2.0 l_0_12_12) l_0_12_3))))
 (let ((?x37782 (+ (+ ?x37778 (* (* 2.0 l_0_12_23) l_0_12_32)) (* (* 2.0 l_0_12_24) l_0_12_33))))
 (= (- (- (+ (+ ?x37782 ?x37292) ?x13044) ?x37262) ?x37265) 0.0))))))))
(assert
 (let ((?x37265 (* l_0_12_66 l_0_12_66)))
 (let ((?x37807 (* 3.0 ?x37265)))
 (let ((?x37262 (* l_0_12_65 l_0_12_65)))
 (let ((?x37805 (* 3.0 ?x37262)))
 (let ((?x37803 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (let ((?x37253 (* l_0_12_3 l_0_12_3)))
 (let ((?x37254 (* 6.0 ?x37253)))
 (let ((?x37239 (* (* 6.0 l_0_12_24) l_0_12_24)))
 (let ((?x37232 (* (* 6.0 l_0_12_23) l_0_12_23)))
 (let ((?x37221 (* l_0_12_2 l_0_12_2)))
 (let ((?x37222 (* 6.0 ?x37221)))
 (let ((?x26888 (- (+ (* l_0_12_128 l_0_12_128) (* l_0_12_129 l_0_12_129)) (* (* 2.0 l_0_12_16) l_0_12_2))))
 (let ((?x37793 (+ (+ (- ?x26888 (* (* 2.0 l_0_12_17) l_0_12_3)) ?x37222) (* (* 2.0 l_0_12_23) l_0_12_37))))
 (let ((?x37798 (+ (- (+ (- ?x37793 ?x37232) (* (* 2.0 l_0_12_24) l_0_12_38)) ?x37239) ?x37254)))
 (let ((?x37808 (+ (+ (- (- ?x37798 (* (* 3.0 l_0_12_44) l_0_12_44)) ?x37803) ?x37805) ?x37807)))
 (= ?x37808 0.0)))))))))))))))))
(assert
 (let ((?x37848 (* l_0_12_6 l_0_12_6)))
 (let ((?x37846 (* l_0_12_5 l_0_12_5)))
 (let ((?x37844 (* l_0_12_4 l_0_12_4)))
 (let ((?x37842 (* l_0_12_27 l_0_12_27)))
 (let ((?x37840 (* l_0_12_26 l_0_12_26)))
 (let ((?x37838 (* l_0_12_25 l_0_12_25)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x37836 (* ?x37835 l_0_12_131)))
 (let ((?x37843 (+ (+ (+ (- (* (* (- 2.0) l_0_12_128) l_0_12_130) ?x37836) ?x37838) ?x37840) ?x37842)))
 (= (- (- (- ?x37843 ?x37844) ?x37846) ?x37848) 0.0)))))))))))
(assert
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x37911 (* ?x37910 l_0_12_89)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x37908 (* ?x37907 l_0_12_88)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x37887 (* ?x37886 l_0_12_173)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x37884 (* ?x37883 l_0_12_172)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x37881 (* ?x37880 l_0_12_152)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x37878 (* ?x37877 l_0_12_151)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x37875 (* ?x37835 l_0_12_134)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x37873 (* ?x37872 l_0_12_133)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x37870 (* ?x37869 l_0_12_110)))
 (let ((?x37879 (+ (- (- (+ (* (* 2.0 l_0_12_107) l_0_12_109) ?x37870) ?x37873) ?x37875) ?x37878)))
 (let ((?x37891 (+ (- (- (+ ?x37879 ?x37881) ?x37884) ?x37887) (* (* 2.0 l_0_12_25) l_0_12_28))))
 (let ((?x37897 (+ (+ ?x37891 (* (* 2.0 l_0_12_26) l_0_12_29)) (* (* 2.0 l_0_12_27) l_0_12_30))))
 (let ((?x37903 (- (- ?x37897 (* (* 2.0 l_0_12_4) l_0_12_7)) (* (* 2.0 l_0_12_5) l_0_12_8))))
 (= (- (- (- ?x37903 (* (* 2.0 l_0_12_6) l_0_12_9)) ?x37908) ?x37911) 0.0))))))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37362 (* ?x37361 l_0_12_68)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37359 (* ?x37358 l_0_12_67)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37356 (* ?x37355 l_0_12_47)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37353 (* ?x37352 l_0_12_46)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x13773 (* ?x37835 l_0_12_138)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x13772 (* ?x37872 l_0_12_137)))
 (let ((?x27086 (- (* (* (- 2.0) l_0_12_11) l_0_12_4) (* (* 2.0 l_0_12_12) l_0_12_5))))
 (let ((?x26979 (+ (- (- (- ?x27086 ?x13772) ?x13773) (* (* 2.0 l_0_12_13) l_0_12_6)) (* (* 2.0 l_0_12_25) l_0_12_32))))
 (let ((?x27031 (+ (+ ?x26979 (* (* 2.0 l_0_12_26) l_0_12_33)) (* (* 2.0 l_0_12_27) l_0_12_34))))
 (= (- (- (+ (+ ?x27031 ?x37353) ?x37356) ?x37359) ?x37362) 0.0)))))))))))))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x37991 (* ?x37990 l_0_12_68)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x37988 (* ?x37987 l_0_12_67)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x37985 (* ?x37984 l_0_12_47)))
 (let ((?x37349 (* 12.0 l_0_12_3)))
 (let ((?x37350 (* ?x37349 l_0_12_5)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37329 (* ?x37328 l_0_12_26)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37320 (* ?x37319 l_0_12_25)))
 (let ((?x37308 (* 12.0 l_0_12_2)))
 (let ((?x37309 (* ?x37308 l_0_12_4)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x12621 (* ?x37835 l_0_12_143)))
 (let ((?x37836 (* ?x37835 l_0_12_131)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x13823 (* ?x37872 l_0_12_142)))
 (let ((?x37965 (- (- (+ (- (* ?x37872 l_0_12_130) ?x13823) ?x37836) ?x12621) (* (* 2.0 l_0_12_16) l_0_12_4))))
 (let ((?x37970 (- (- ?x37965 (* (* 2.0 l_0_12_17) l_0_12_5)) (* (* 2.0 l_0_12_18) l_0_12_6))))
 (let ((?x37975 (+ (- (- (+ ?x37970 ?x37309) ?x37320) ?x37329) (* (* 2.0 l_0_12_25) l_0_12_37))))
 (let ((?x37979 (+ (+ ?x37975 (* (* 2.0 l_0_12_26) l_0_12_38)) (* (* 2.0 l_0_12_27) l_0_12_39))))
 (let ((?x37989 (+ (- (- (+ ?x37979 ?x37350) (* (* 6.0 l_0_12_44) l_0_12_46)) ?x37985) ?x37988)))
 (= (+ ?x37989 ?x37991) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x36522 (* l_0_12_9 l_0_12_9)))
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x38043 (* ?x37910 l_0_12_92)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x38041 (* ?x37907 l_0_12_91)))
 (let ((?x36516 (* l_0_12_8 l_0_12_8)))
 (let ((?x36501 (* l_0_12_7 l_0_12_7)))
 (let ((?x36586 (* l_0_12_31 l_0_12_31)))
 (let ((?x12018 (* l_0_12_30 l_0_12_30)))
 (let ((?x12013 (* l_0_12_29 l_0_12_29)))
 (let ((?x25837 (* l_0_12_28 l_0_12_28)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38033 (* ?x37886 l_0_12_176)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38031 (* ?x37883 l_0_12_175)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38029 (* ?x37880 l_0_12_155)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38027 (* ?x37877 l_0_12_154)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x38025 (* ?x37869 l_0_12_113)))
 (let ((?x38024 (+ (* (- l_0_12_10) l_0_12_10) (* (* 2.0 l_0_12_107) l_0_12_112))))
 (let ((?x38036 (+ (+ (- (- (+ (+ (+ ?x38024 ?x38025) ?x38027) ?x38029) ?x38031) ?x38033) ?x25837) ?x12013)))
 (let ((?x38045 (- (- (- (- (- (+ (+ ?x38036 ?x12018) ?x36586) ?x36501) ?x36516) ?x38041) ?x38043) ?x36522)))
 (= ?x38045 0.0))))))))))))))))))))))))))
(assert
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x38099 (* ?x37910 l_0_12_96)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x38097 (* ?x37907 l_0_12_95)))
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37463 (* ?x37361 l_0_12_71)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37461 (* ?x37358 l_0_12_70)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37459 (* ?x37355 l_0_12_50)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37457 (* ?x37352 l_0_12_49)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38079 (* ?x37886 l_0_12_180)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38077 (* ?x37883 l_0_12_179)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38075 (* ?x37880 l_0_12_159)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38073 (* ?x37877 l_0_12_158)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x27328 (* ?x37869 l_0_12_117)))
 (let ((?x27326 (+ (* (* (- 2.0) l_0_12_10) l_0_12_14) (* (* 2.0 l_0_12_107) l_0_12_116))))
 (let ((?x38070 (- (- (+ ?x27326 ?x27328) (* (* 2.0 l_0_12_11) l_0_12_7)) (* (* 2.0 l_0_12_12) l_0_12_8))))
 (let ((?x38078 (- (+ (+ (- ?x38070 (* (* 2.0 l_0_12_13) l_0_12_9)) ?x38073) ?x38075) ?x38077)))
 (let ((?x38086 (+ (+ (- ?x38078 ?x38079) (* (* 2.0 l_0_12_28) l_0_12_32)) (* (* 2.0 l_0_12_29) l_0_12_33))))
 (let ((?x38092 (+ (+ ?x38086 (* (* 2.0 l_0_12_30) l_0_12_34)) (* (* 2.0 l_0_12_31) l_0_12_35))))
 (= (- (- (- (- (+ (+ ?x38092 ?x37457) ?x37459) ?x37461) ?x37463) ?x38097) ?x38099) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38185 (* ?x37990 l_0_12_71)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38183 (* ?x37987 l_0_12_70)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38181 (* ?x37984 l_0_12_50)))
 (let ((?x37349 (* 12.0 l_0_12_3)))
 (let ((?x37455 (* ?x37349 l_0_12_8)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37441 (* ?x37328 l_0_12_29)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37435 (* ?x37319 l_0_12_28)))
 (let ((?x37308 (* 12.0 l_0_12_2)))
 (let ((?x37427 (* ?x37308 l_0_12_7)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38163 (* ?x37886 l_0_12_185)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38161 (* ?x37883 l_0_12_184)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38155 (* ?x37880 l_0_12_164)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38153 (* ?x37877 l_0_12_163)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x37875 (* ?x37835 l_0_12_134)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x37873 (* ?x37872 l_0_12_133)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x38149 (* ?x37869 l_0_12_122)))
 (let ((?x37867 (* 2.0 l_0_12_107)))
 (let ((?x38147 (* ?x37867 l_0_12_121)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x38145 (* ?x38144 l_0_12_87)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x38142 (* ?x38141 l_0_12_86)))
 (let ((?x38150 (+ (+ (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x38142) ?x38145) ?x38147) ?x38149)))
 (let ((?x38158 (- (+ (+ (+ (+ ?x38150 ?x37873) ?x37875) ?x38153) ?x38155) (* (* 2.0 l_0_12_16) l_0_12_7))))
 (let ((?x38166 (- (- (- (- ?x38158 (* (* 2.0 l_0_12_17) l_0_12_8)) ?x38161) ?x38163) (* (* 2.0 l_0_12_18) l_0_12_9))))
 (let ((?x38171 (+ (- (- (+ ?x38166 ?x37427) ?x37435) ?x37441) (* (* 2.0 l_0_12_28) l_0_12_37))))
 (let ((?x38176 (+ (+ (+ ?x38171 (* (* 2.0 l_0_12_29) l_0_12_38)) ?x37455) (* (* 2.0 l_0_12_30) l_0_12_39))))
 (let ((?x38180 (- (+ ?x38176 (* (* 2.0 l_0_12_31) l_0_12_40)) (* (* 6.0 l_0_12_44) l_0_12_49))))
 (= (+ (+ (- ?x38180 ?x38181) ?x38183) ?x38185) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37557 (* ?x37361 l_0_12_75)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37555 (* ?x37358 l_0_12_74)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37552 (* ?x37355 l_0_12_54)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37550 (* ?x37352 l_0_12_53)))
 (let ((?x12441 (* l_0_12_36 l_0_12_36)))
 (let ((?x12456 (* l_0_12_35 l_0_12_35)))
 (let ((?x12450 (* l_0_12_34 l_0_12_34)))
 (let ((?x25881 (* l_0_12_33 l_0_12_33)))
 (let ((?x36854 (* l_0_12_32 l_0_12_32)))
 (let ((?x36692 (* l_0_12_15 l_0_12_15)))
 (let ((?x36689 (* l_0_12_14 l_0_12_14)))
 (let ((?x36686 (* l_0_12_13 l_0_12_13)))
 (let ((?x38223 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x36686)))
 (let ((?x38230 (+ (+ (+ (+ (+ (- (- ?x38223 ?x36689) ?x36692) ?x36854) ?x25881) ?x12450) ?x12456) ?x12441)))
 (= (- (- (+ (+ ?x38230 ?x37550) ?x37552) ?x37555) ?x37557) 0.0))))))))))))))))))))
(assert
 (let ((?x37361 (* 2.0 l_0_12_66)))
 (let ((?x37647 (* ?x37361 l_0_12_80)))
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38287 (* ?x37990 l_0_12_75)))
 (let ((?x37358 (* 2.0 l_0_12_65)))
 (let ((?x37645 (* ?x37358 l_0_12_79)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38284 (* ?x37987 l_0_12_74)))
 (let ((?x37355 (* 2.0 l_0_12_45)))
 (let ((?x37641 (* ?x37355 l_0_12_59)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38281 (* ?x37984 l_0_12_54)))
 (let ((?x37352 (* 2.0 l_0_12_44)))
 (let ((?x37639 (* ?x37352 l_0_12_58)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37535 (* ?x37328 l_0_12_33)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37529 (* ?x37319 l_0_12_32)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x13773 (* ?x37835 l_0_12_138)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x13772 (* ?x37872 l_0_12_137)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x37517 (* ?x36905 l_0_12_3)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x37515 (* ?x36902 l_0_12_2)))
 (let ((?x38249 (- (+ (* (* (- 2.0) l_0_12_11) l_0_12_16) ?x37515) (* (* 2.0 l_0_12_12) l_0_12_17))))
 (let ((?x38254 (- (+ (+ (+ ?x38249 ?x37517) ?x13772) ?x13773) (* (* 2.0 l_0_12_13) l_0_12_18))))
 (let ((?x38260 (- (- ?x38254 (* (* 2.0 l_0_12_14) l_0_12_19)) (* (* 2.0 l_0_12_15) l_0_12_20))))
 (let ((?x38268 (+ (+ (- (- ?x38260 ?x37529) ?x37535) (* (* 2.0 l_0_12_32) l_0_12_37)) (* (* 2.0 l_0_12_33) l_0_12_38))))
 (let ((?x38274 (+ (+ ?x38268 (* (* 2.0 l_0_12_34) l_0_12_39)) (* (* 2.0 l_0_12_35) l_0_12_40))))
 (let ((?x38279 (- (+ ?x38274 (* (* 2.0 l_0_12_36) l_0_12_41)) (* (* 6.0 l_0_12_44) l_0_12_53))))
 (let ((?x38289 (- (+ (- (+ (+ (- (+ ?x38279 ?x37639) ?x38281) ?x37641) ?x38284) ?x37645) ?x38287) ?x37647)))
 (= ?x38289 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38356 (* ?x37990 l_0_12_80)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38354 (* ?x37987 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x37643 (* ?x35976 l_0_12_65)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38351 (* ?x37984 l_0_12_59)))
 (let ((?x37981 (* 6.0 l_0_12_44)))
 (let ((?x38349 (* ?x37981 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x37637 (* ?x35955 l_0_12_44)))
 (let ((?x10866 (* l_0_12_42 l_0_12_42)))
 (let ((?x10856 (* l_0_12_41 l_0_12_41)))
 (let ((?x9768 (* l_0_12_40 l_0_12_40)))
 (let ((?x9714 (* l_0_12_39 l_0_12_39)))
 (let ((?x36011 (* l_0_12_38 l_0_12_38)))
 (let ((?x9712 (* l_0_12_37 l_0_12_37)))
 (let ((?x37328 (* 12.0 l_0_12_24)))
 (let ((?x37623 (* ?x37328 l_0_12_38)))
 (let ((?x37319 (* 12.0 l_0_12_23)))
 (let ((?x37617 (* ?x37319 l_0_12_37)))
 (let ((?x35934 (* l_0_12_21 l_0_12_21)))
 (let ((?x35931 (* l_0_12_20 l_0_12_20)))
 (let ((?x35928 (* l_0_12_19 l_0_12_19)))
 (let ((?x35925 (* l_0_12_18 l_0_12_18)))
 (let ((?x35922 (* l_0_12_17 l_0_12_17)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x37604 (* ?x37603 l_0_12_3)))
 (let ((?x35917 (* l_0_12_16 l_0_12_16)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x37601 (* ?x37600 l_0_12_2)))
 (let ((?x37835 (* 2.0 l_0_12_129)))
 (let ((?x12621 (* ?x37835 l_0_12_143)))
 (let ((?x37872 (* 2.0 l_0_12_128)))
 (let ((?x13823 (* ?x37872 l_0_12_142)))
 (let ((?x38337 (- (- (- (+ (- (+ (+ ?x13823 ?x12621) ?x37601) ?x35917) ?x37604) ?x35922) ?x35925) ?x35928)))
 (let ((?x38344 (+ (+ (+ (- (- (- (- ?x38337 ?x35931) ?x35934) ?x37617) ?x37623) ?x9712) ?x36011) ?x9714)))
 (let ((?x38353 (+ (- (- (- (+ (+ (+ ?x38344 ?x9768) ?x10856) ?x10866) ?x37637) ?x38349) ?x38351) ?x37643)))
 (= (+ (+ ?x38353 ?x38354) ?x38356) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x38482 (* ?x38481 l_0_12_81)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x38479 (* ?x38478 l_0_12_80)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x38476 (* ?x38475 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38473 (* ?x35976 l_0_12_67)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x38471 (* ?x38470 l_0_12_60)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x38468 (* ?x38467 l_0_12_59)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x38465 (* ?x38464 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38462 (* ?x35955 l_0_12_46)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x38442 (* ?x38441 l_0_12_39)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x38439 (* ?x38438 l_0_12_38)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x38427 (* ?x38426 l_0_12_37)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x38415 (* ?x36090 l_0_12_25)))
 (let ((?x38394 (* 12.0 l_0_12_18)))
 (let ((?x38395 (* ?x38394 l_0_12_6)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x38392 (* ?x37603 l_0_12_5)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x38390 (* ?x37600 l_0_12_4)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x36070 (* ?x36069 l_0_12_142)))
 (let ((?x38389 (- (+ (* (* 12.0 l_0_12_1) l_0_12_4) (* ?x36069 l_0_12_130)) ?x36070)))
 (let ((?x38399 (- (+ (+ (+ ?x38389 ?x38390) ?x38392) ?x38395) (* (* 2.0 l_0_12_193) l_0_12_205))))
 (let ((?x38405 (- (- ?x38399 (* (* 2.0 l_0_12_194) l_0_12_206)) (* (* 2.0 l_0_12_195) l_0_12_207))))
 (let ((?x38411 (- (- ?x38405 (* (* 2.0 l_0_12_214) l_0_12_226)) (* (* 2.0 l_0_12_215) l_0_12_227))))
 (let ((?x38419 (- (- (- ?x38411 (* (* 2.0 l_0_12_216) l_0_12_228)) ?x38415) (* (* 2.0 l_0_12_235) l_0_12_247))))
 (let ((?x38425 (- (- ?x38419 (* (* 2.0 l_0_12_236) l_0_12_248)) (* (* 2.0 l_0_12_237) l_0_12_249))))
 (let ((?x38434 (- (- (- ?x38425 ?x38427) (* (* 2.0 l_0_12_256) l_0_12_268)) (* (* 2.0 l_0_12_257) l_0_12_269))))
 (let ((?x38446 (- (- (- (- ?x38434 (* (* 2.0 l_0_12_258) l_0_12_270)) ?x38439) ?x38442) (* (* 2.0 l_0_12_277) l_0_12_289))))
 (let ((?x38452 (- (- ?x38446 (* (* 2.0 l_0_12_278) l_0_12_290)) (* (* 2.0 l_0_12_279) l_0_12_291))))
 (let ((?x38458 (- (- ?x38452 (* (* 2.0 l_0_12_298) l_0_12_310)) (* (* 2.0 l_0_12_299) l_0_12_311))))
 (let ((?x38469 (- (- (- (- ?x38458 (* (* 2.0 l_0_12_300) l_0_12_312)) ?x38462) ?x38465) ?x38468)))
 (= (+ (+ (+ (+ (- ?x38469 ?x38471) ?x38473) ?x38476) ?x38479) ?x38482) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37022 (* 2.0 l_0_12_73)))
 (let ((?x38646 (* ?x37022 l_0_12_82)))
 (let ((?x37019 (* 2.0 l_0_12_72)))
 (let ((?x38644 (* ?x37019 l_0_12_81)))
 (let ((?x37016 (* 2.0 l_0_12_71)))
 (let ((?x38642 (* ?x37016 l_0_12_80)))
 (let ((?x37013 (* 2.0 l_0_12_70)))
 (let ((?x38640 (* ?x37013 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38638 (* ?x35976 l_0_12_70)))
 (let ((?x37009 (* 2.0 l_0_12_52)))
 (let ((?x38636 (* ?x37009 l_0_12_61)))
 (let ((?x37006 (* 2.0 l_0_12_51)))
 (let ((?x38634 (* ?x37006 l_0_12_60)))
 (let ((?x37003 (* 2.0 l_0_12_50)))
 (let ((?x38632 (* ?x37003 l_0_12_59)))
 (let ((?x37000 (* 2.0 l_0_12_49)))
 (let ((?x38630 (* ?x37000 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38628 (* ?x35955 l_0_12_49)))
 (let ((?x36996 (* 12.0 l_0_12_31)))
 (let ((?x38626 (* ?x36996 l_0_12_40)))
 (let ((?x36981 (* 12.0 l_0_12_30)))
 (let ((?x38616 (* ?x36981 l_0_12_39)))
 (let ((?x36978 (* 12.0 l_0_12_29)))
 (let ((?x38614 (* ?x36978 l_0_12_38)))
 (let ((?x36963 (* 12.0 l_0_12_28)))
 (let ((?x38604 (* ?x36963 l_0_12_37)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36374 (* ?x36090 l_0_12_28)))
 (let ((?x38394 (* 12.0 l_0_12_18)))
 (let ((?x38569 (* ?x38394 l_0_12_9)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x38567 (* ?x37603 l_0_12_8)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x38565 (* ?x36426 l_0_12_184)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x38563 (* ?x37600 l_0_12_7)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x38561 (* ?x36423 l_0_12_163)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x38559 (* ?x36069 l_0_12_133)))
 (let ((?x36420 (* 2.0 l_0_12_106)))
 (let ((?x38557 (* ?x36420 l_0_12_121)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x38555 (* ?x38141 l_0_12_85)))
 (let ((?x36897 (* 12.0 l_0_12_10)))
 (let ((?x38553 (* ?x36897 l_0_12_19)))
 (let ((?x11018 (* 12.0 l_0_12_1)))
 (let ((?x36365 (* ?x11018 l_0_12_7)))
 (let ((?x38566 (- (+ (+ (+ (+ (- (+ ?x36365 ?x38553) ?x38555) ?x38557) ?x38559) ?x38561) ?x38563) ?x38565)))
 (let ((?x38574 (- (- (+ (+ ?x38566 ?x38567) ?x38569) (* (* 2.0 l_0_12_196) l_0_12_205)) (* (* 2.0 l_0_12_197) l_0_12_206))))
 (let ((?x38578 (- (- ?x38574 (* (* 2.0 l_0_12_198) l_0_12_207)) (* (* 2.0 l_0_12_199) l_0_12_208))))
 (let ((?x38582 (- (- ?x38578 (* (* 2.0 l_0_12_217) l_0_12_226)) (* (* 2.0 l_0_12_218) l_0_12_227))))
 (let ((?x38587 (- (- (- ?x38582 (* (* 2.0 l_0_12_219) l_0_12_228)) ?x36374) (* (* 2.0 l_0_12_220) l_0_12_229))))
 (let ((?x38591 (- (- ?x38587 (* (* 2.0 l_0_12_238) l_0_12_247)) (* (* 2.0 l_0_12_239) l_0_12_248))))
 (let ((?x38595 (- (- ?x38591 (* (* 2.0 l_0_12_240) l_0_12_249)) (* (* 2.0 l_0_12_241) l_0_12_250))))
 (let ((?x38599 (- (- ?x38595 (* (* 2.0 l_0_12_259) l_0_12_268)) (* (* 2.0 l_0_12_260) l_0_12_269))))
 (let ((?x38603 (- (- ?x38599 (* (* 2.0 l_0_12_261) l_0_12_270)) (* (* 2.0 l_0_12_262) l_0_12_271))))
 (let ((?x38609 (- (- (- ?x38603 ?x38604) (* (* 2.0 l_0_12_280) l_0_12_289)) (* (* 2.0 l_0_12_281) l_0_12_290))))
 (let ((?x38613 (- (- ?x38609 (* (* 2.0 l_0_12_282) l_0_12_291)) (* (* 2.0 l_0_12_283) l_0_12_292))))
 (let ((?x38621 (- (- (- (- ?x38613 ?x38614) ?x38616) (* (* 2.0 l_0_12_301) l_0_12_310)) (* (* 2.0 l_0_12_302) l_0_12_311))))
 (let ((?x38625 (- (- ?x38621 (* (* 2.0 l_0_12_303) l_0_12_312)) (* (* 2.0 l_0_12_304) l_0_12_313))))
 (let ((?x38639 (+ (- (- (- (- (- (- ?x38625 ?x38626) ?x38628) ?x38630) ?x38632) ?x38634) ?x38636) ?x38638)))
 (= (+ (+ (+ (+ ?x38639 ?x38640) ?x38642) ?x38644) ?x38646) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38869 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x38866 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x38863 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x38860 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x38857 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x36293 (* ?x36292 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38853 (* ?x35976 l_0_12_74)))
 (let ((?x38851 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x38848 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x38845 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x38842 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x38839 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x36289 (* ?x36288 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38835 (* ?x35955 l_0_12_53)))
 (let ((?x38833 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x38830 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x38827 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x38824 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x38821 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x36626 (* ?x36090 l_0_12_32)))
 (let ((?x38727 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x38724 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x38721 (* ?x36908 l_0_12_18)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x38705 (* ?x36069 l_0_12_137)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x38703 (* ?x36905 l_0_12_17)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x28263 (* ?x36902 l_0_12_16)))
 (let ((?x11018 (* 12.0 l_0_12_1)))
 (let ((?x36620 (* ?x11018 l_0_12_11)))
 (let ((?x38731 (- (+ (+ (+ (+ (+ (+ ?x36620 ?x28263) ?x38703) ?x38705) ?x38721) ?x38724) ?x38727) (* (* 2.0 l_0_12_200) l_0_12_205))))
 (let ((?x38737 (- (- ?x38731 (* (* 2.0 l_0_12_201) l_0_12_206)) (* (* 2.0 l_0_12_202) l_0_12_207))))
 (let ((?x38743 (- (- ?x38737 (* (* 2.0 l_0_12_203) l_0_12_208)) (* (* 2.0 l_0_12_204) l_0_12_209))))
 (let ((?x38750 (- (- (- ?x38743 ?x36626) (* (* 2.0 l_0_12_221) l_0_12_226)) (* (* 2.0 l_0_12_222) l_0_12_227))))
 (let ((?x38756 (- (- ?x38750 (* (* 2.0 l_0_12_223) l_0_12_228)) (* (* 2.0 l_0_12_224) l_0_12_229))))
 (let ((?x38762 (- (- ?x38756 (* (* 2.0 l_0_12_225) l_0_12_230)) (* (* 2.0 l_0_12_242) l_0_12_247))))
 (let ((?x38768 (- (- ?x38762 (* (* 2.0 l_0_12_243) l_0_12_248)) (* (* 2.0 l_0_12_244) l_0_12_249))))
 (let ((?x38774 (- (- ?x38768 (* (* 2.0 l_0_12_245) l_0_12_250)) (* (* 2.0 l_0_12_246) l_0_12_251))))
 (let ((?x38780 (- (- ?x38774 (* (* 2.0 l_0_12_263) l_0_12_268)) (* (* 2.0 l_0_12_264) l_0_12_269))))
 (let ((?x38786 (- (- ?x38780 (* (* 2.0 l_0_12_265) l_0_12_270)) (* (* 2.0 l_0_12_266) l_0_12_271))))
 (let ((?x38792 (- (- ?x38786 (* (* 2.0 l_0_12_267) l_0_12_272)) (* (* 2.0 l_0_12_284) l_0_12_289))))
 (let ((?x38798 (- (- ?x38792 (* (* 2.0 l_0_12_285) l_0_12_290)) (* (* 2.0 l_0_12_286) l_0_12_291))))
 (let ((?x38804 (- (- ?x38798 (* (* 2.0 l_0_12_287) l_0_12_292)) (* (* 2.0 l_0_12_288) l_0_12_293))))
 (let ((?x38810 (- (- ?x38804 (* (* 2.0 l_0_12_305) l_0_12_310)) (* (* 2.0 l_0_12_306) l_0_12_311))))
 (let ((?x38816 (- (- ?x38810 (* (* 2.0 l_0_12_307) l_0_12_312)) (* (* 2.0 l_0_12_308) l_0_12_313))))
 (let ((?x38828 (- (- (- (- ?x38816 (* (* 2.0 l_0_12_309) l_0_12_314)) ?x38821) ?x38824) ?x38827)))
 (let ((?x38846 (- (- (- (+ (- (- (- ?x38828 ?x38830) ?x38833) ?x38835) ?x36289) ?x38839) ?x38842) ?x38845)))
 (let ((?x38864 (+ (+ (+ (- (+ (- (- ?x38846 ?x38848) ?x38851) ?x38853) ?x36293) ?x38857) ?x38860) ?x38863)))
 (= (+ (+ ?x38864 ?x38866) ?x38869) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39022 (* l_0_12_69 l_0_12_69)))
 (let ((?x39023 (* 3.0 ?x39022)))
 (let ((?x39019 (* l_0_12_68 l_0_12_68)))
 (let ((?x39020 (* 3.0 ?x39019)))
 (let ((?x39016 (* l_0_12_67 l_0_12_67)))
 (let ((?x39017 (* 3.0 ?x39016)))
 (let ((?x37848 (* l_0_12_6 l_0_12_6)))
 (let ((?x39014 (* 6.0 ?x37848)))
 (let ((?x37846 (* l_0_12_5 l_0_12_5)))
 (let ((?x39012 (* 6.0 ?x37846)))
 (let ((?x39010 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x39007 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x37844 (* l_0_12_4 l_0_12_4)))
 (let ((?x39001 (* 6.0 ?x37844)))
 (let ((?x38999 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x38996 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x38993 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x38990 (* l_0_12_132 l_0_12_132)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x38988 (* ?x38987 l_0_12_144)))
 (let ((?x38985 (* l_0_12_131 l_0_12_131)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x38969 (* ?x38968 l_0_12_143)))
 (let ((?x38964 (* l_0_12_130 l_0_12_130)))
 (let ((?x38989 (- (+ (- (+ (* (* (- 2.0) l_0_12_130) l_0_12_142) ?x38964) ?x38969) ?x38985) ?x38988)))
 (let ((?x39005 (- (+ (- (- (- (+ ?x38989 ?x38990) ?x38993) ?x38996) ?x38999) ?x39001) (* (* 3.0 l_0_12_46) l_0_12_46))))
 (let ((?x39024 (+ (+ (+ (+ (+ (- (- ?x39005 ?x39007) ?x39010) ?x39012) ?x39014) ?x39017) ?x39020) ?x39023)))
 (= ?x39024 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39142 (* ?x39141 l_0_12_72)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39139 (* ?x39138 l_0_12_71)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39136 (* ?x39135 l_0_12_70)))
 (let ((?x39133 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x39130 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39127 (* ?x39126 l_0_12_51)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39124 (* ?x39123 l_0_12_50)))
 (let ((?x39118 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x39115 (* ?x38441 l_0_12_30)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x39113 (* ?x38438 l_0_12_29)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x39111 (* ?x38426 l_0_12_28)))
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x39109 (* ?x39108 l_0_12_186)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x39106 (* ?x39105 l_0_12_185)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x39103 (* ?x39102 l_0_12_184)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x39100 (* ?x39099 l_0_12_165)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x39097 (* ?x39096 l_0_12_164)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x39094 (* ?x39093 l_0_12_163)))
 (let ((?x39090 (* 2.0 l_0_12_136)))
 (let ((?x39091 (* ?x39090 l_0_12_145)))
 (let ((?x39087 (* 2.0 l_0_12_135)))
 (let ((?x39088 (* ?x39087 l_0_12_144)))
 (let ((?x39084 (* 2.0 l_0_12_134)))
 (let ((?x39085 (* ?x39084 l_0_12_143)))
 (let ((?x39081 (* 2.0 l_0_12_133)))
 (let ((?x39082 (* ?x39081 l_0_12_142)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x39079 (* ?x38987 l_0_12_135)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x39077 (* ?x38968 l_0_12_134)))
 (let ((?x39074 (* 2.0 l_0_12_130)))
 (let ((?x39075 (* ?x39074 l_0_12_133)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x39072 (* ?x39071 l_0_12_123)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x39069 (* ?x39068 l_0_12_122)))
 (let ((?x39065 (* 2.0 l_0_12_109)))
 (let ((?x39066 (* ?x39065 l_0_12_121)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39063 (* ?x39062 l_0_12_90)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39060 (* ?x38144 l_0_12_89)))
 (let ((?x39070 (+ (+ (- (- (* (* (- 2.0) l_0_12_100) l_0_12_88) ?x39060) ?x39063) ?x39066) ?x39069)))
 (let ((?x39089 (- (- (- (+ (+ (+ (+ ?x39070 ?x39072) ?x39075) ?x39077) ?x39079) ?x39082) ?x39085) ?x39088)))
 (let ((?x39110 (- (- (- (+ (+ (+ (- ?x39089 ?x39091) ?x39094) ?x39097) ?x39100) ?x39103) ?x39106) ?x39109)))
 (let ((?x39122 (- (+ (- (- (- ?x39110 ?x39111) ?x39113) ?x39115) ?x39118) (* (* 6.0 l_0_12_46) l_0_12_49))))
 (let ((?x39143 (+ (+ (+ (+ (+ (- (- ?x39122 ?x39124) ?x39127) ?x39130) ?x39133) ?x39136) ?x39139) ?x39142)))
 (= ?x39143 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x38482 (* ?x38481 l_0_12_81)))
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39262 (* ?x39141 l_0_12_76)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x38479 (* ?x38478 l_0_12_80)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39259 (* ?x39138 l_0_12_75)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x38476 (* ?x38475 l_0_12_79)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39256 (* ?x39135 l_0_12_74)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x38471 (* ?x38470 l_0_12_60)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39253 (* ?x39126 l_0_12_55)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x38468 (* ?x38467 l_0_12_59)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39250 (* ?x39123 l_0_12_54)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x38465 (* ?x38464 l_0_12_58)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x39245 (* ?x38441 l_0_12_34)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x39243 (* ?x38438 l_0_12_33)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x39241 (* ?x38426 l_0_12_32)))
 (let ((?x39239 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x39236 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x39233 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x39230 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x39227 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x39224 (* ?x38987 l_0_12_139)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x39222 (* ?x38968 l_0_12_138)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x39199 (* ?x36908 l_0_12_6)))
 (let ((?x39197 (+ (* (* 12.0 l_0_12_11) l_0_12_4) (* (* 12.0 l_0_12_12) l_0_12_5))))
 (let ((?x39225 (+ (+ (+ (+ ?x39197 ?x39199) (* (* 2.0 l_0_12_130) l_0_12_137)) ?x39222) ?x39224)))
 (let ((?x39244 (- (- (- (- (- (- (- ?x39225 ?x39227) ?x39230) ?x39233) ?x39236) ?x39239) ?x39241) ?x39243)))
 (let ((?x39251 (- (+ (- (- ?x39244 ?x39245) (* (* 6.0 l_0_12_46) l_0_12_53)) ?x38465) ?x39250)))
 (let ((?x39261 (- (+ (- (+ (+ (- (+ ?x39251 ?x38468) ?x39253) ?x38471) ?x39256) ?x38476) ?x39259) ?x38479)))
 (= (- (+ ?x39261 ?x39262) ?x38482) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39333 (* ?x39141 l_0_12_81)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39331 (* ?x39138 l_0_12_80)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39329 (* ?x39135 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38473 (* ?x35976 l_0_12_67)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39326 (* ?x39126 l_0_12_60)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39324 (* ?x39123 l_0_12_59)))
 (let ((?x39120 (* 6.0 l_0_12_46)))
 (let ((?x39322 (* ?x39120 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38462 (* ?x35955 l_0_12_46)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x38442 (* ?x38441 l_0_12_39)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x38439 (* ?x38438 l_0_12_38)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x38427 (* ?x38426 l_0_12_37)))
 (let ((?x38394 (* 12.0 l_0_12_18)))
 (let ((?x38395 (* ?x38394 l_0_12_6)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x38392 (* ?x37603 l_0_12_5)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x38390 (* ?x37600 l_0_12_4)))
 (let ((?x35913 (* l_0_12_147 l_0_12_147)))
 (let ((?x35911 (* l_0_12_146 l_0_12_146)))
 (let ((?x35909 (* l_0_12_145 l_0_12_145)))
 (let ((?x35907 (* l_0_12_144 l_0_12_144)))
 (let ((?x35905 (* l_0_12_143 l_0_12_143)))
 (let ((?x35903 (* l_0_12_142 l_0_12_142)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x38988 (* ?x38987 l_0_12_144)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x38969 (* ?x38968 l_0_12_143)))
 (let ((?x29131 (- (- (+ (+ (* (* 2.0 l_0_12_130) l_0_12_142) ?x38969) ?x38988) ?x35903) ?x35905)))
 (let ((?x39317 (+ (+ (+ (- (- (- (- ?x29131 ?x35907) ?x35909) ?x35911) ?x35913) ?x38390) ?x38392) ?x38395)))
 (let ((?x39327 (- (- (- (- (- (- (- ?x39317 ?x38427) ?x38439) ?x38442) ?x38462) ?x39322) ?x39324) ?x39326)))
 (= (+ (+ (+ (+ ?x39327 ?x38473) ?x39329) ?x39331) ?x39333) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36522 (* l_0_12_9 l_0_12_9)))
 (let ((?x36523 (* 6.0 ?x36522)))
 (let ((?x36516 (* l_0_12_8 l_0_12_8)))
 (let ((?x36517 (* 6.0 ?x36516)))
 (let ((?x36513 (* l_0_12_73 l_0_12_73)))
 (let ((?x39426 (* 3.0 ?x36513)))
 (let ((?x36510 (* l_0_12_72 l_0_12_72)))
 (let ((?x39424 (* 3.0 ?x36510)))
 (let ((?x36507 (* l_0_12_71 l_0_12_71)))
 (let ((?x39422 (* 3.0 ?x36507)))
 (let ((?x36504 (* l_0_12_70 l_0_12_70)))
 (let ((?x39420 (* 3.0 ?x36504)))
 (let ((?x36501 (* l_0_12_7 l_0_12_7)))
 (let ((?x36502 (* 6.0 ?x36501)))
 (let ((?x39417 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x39414 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x39411 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x36487 (* (* 6.0 l_0_12_31) l_0_12_31)))
 (let ((?x36476 (* (* 6.0 l_0_12_30) l_0_12_30)))
 (let ((?x36473 (* (* 6.0 l_0_12_29) l_0_12_29)))
 (let ((?x36462 (* (* 6.0 l_0_12_28) l_0_12_28)))
 (let ((?x39400 (* 2.0 l_0_12_178)))
 (let ((?x39401 (* ?x39400 l_0_12_187)))
 (let ((?x39397 (* 2.0 l_0_12_177)))
 (let ((?x39398 (* ?x39397 l_0_12_186)))
 (let ((?x39394 (* 2.0 l_0_12_176)))
 (let ((?x39395 (* ?x39394 l_0_12_185)))
 (let ((?x39391 (* 2.0 l_0_12_175)))
 (let ((?x39392 (* ?x39391 l_0_12_184)))
 (let ((?x39388 (* 2.0 l_0_12_157)))
 (let ((?x39389 (* ?x39388 l_0_12_166)))
 (let ((?x39385 (* 2.0 l_0_12_156)))
 (let ((?x39386 (* ?x39385 l_0_12_165)))
 (let ((?x39382 (* 2.0 l_0_12_155)))
 (let ((?x39383 (* ?x39382 l_0_12_164)))
 (let ((?x39379 (* 2.0 l_0_12_154)))
 (let ((?x39380 (* ?x39379 l_0_12_163)))
 (let ((?x39377 (* l_0_12_136 l_0_12_136)))
 (let ((?x39375 (* l_0_12_135 l_0_12_135)))
 (let ((?x39373 (* l_0_12_134 l_0_12_134)))
 (let ((?x39371 (* l_0_12_133 l_0_12_133)))
 (let ((?x39368 (* 2.0 l_0_12_115)))
 (let ((?x39369 (* ?x39368 l_0_12_124)))
 (let ((?x39365 (* 2.0 l_0_12_114)))
 (let ((?x39366 (* ?x39365 l_0_12_123)))
 (let ((?x39362 (* 2.0 l_0_12_113)))
 (let ((?x39363 (* ?x39362 l_0_12_122)))
 (let ((?x39359 (* 2.0 l_0_12_112)))
 (let ((?x39360 (* ?x39359 l_0_12_121)))
 (let ((?x39356 (* 2.0 l_0_12_103)))
 (let ((?x39357 (* ?x39356 l_0_12_94)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39354 (* ?x39062 l_0_12_93)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39343 (* ?x38144 l_0_12_92)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x15475 (* ?x38141 l_0_12_91)))
 (let ((?x36417 (* l_0_12_10 l_0_12_10)))
 (let ((?x36418 (* 6.0 ?x36417)))
 (let ((?x39367 (+ (+ (+ (- (- (- (- ?x36418 ?x15475) ?x39343) ?x39354) ?x39357) ?x39360) ?x39363) ?x39366)))
 (let ((?x39384 (+ (+ (+ (+ (+ (+ (+ ?x39367 ?x39369) ?x39371) ?x39373) ?x39375) ?x39377) ?x39380) ?x39383)))
 (let ((?x39403 (- (- (- (- (- (+ (+ ?x39384 ?x39386) ?x39389) ?x39392) ?x39395) ?x39398) ?x39401) ?x36462)))
 (let ((?x39409 (- (- (- (- ?x39403 ?x36473) ?x36476) ?x36487) (* (* 3.0 l_0_12_49) l_0_12_49))))
 (let ((?x39425 (+ (+ (+ (+ (- (- (- ?x39409 ?x39411) ?x39414) ?x39417) ?x36502) ?x39420) ?x39422) ?x39424)))
 (= (+ (+ (+ ?x39425 ?x39426) ?x36517) ?x36523) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37022 (* 2.0 l_0_12_73)))
 (let ((?x38646 (* ?x37022 l_0_12_82)))
 (let ((?x39588 (* 6.0 l_0_12_73)))
 (let ((?x39589 (* ?x39588 l_0_12_77)))
 (let ((?x37019 (* 2.0 l_0_12_72)))
 (let ((?x38644 (* ?x37019 l_0_12_81)))
 (let ((?x39584 (* 6.0 l_0_12_72)))
 (let ((?x39585 (* ?x39584 l_0_12_76)))
 (let ((?x37016 (* 2.0 l_0_12_71)))
 (let ((?x38642 (* ?x37016 l_0_12_80)))
 (let ((?x39580 (* 6.0 l_0_12_71)))
 (let ((?x39581 (* ?x39580 l_0_12_75)))
 (let ((?x37013 (* 2.0 l_0_12_70)))
 (let ((?x38640 (* ?x37013 l_0_12_79)))
 (let ((?x39576 (* 6.0 l_0_12_70)))
 (let ((?x39577 (* ?x39576 l_0_12_74)))
 (let ((?x37009 (* 2.0 l_0_12_52)))
 (let ((?x38636 (* ?x37009 l_0_12_61)))
 (let ((?x39572 (* 6.0 l_0_12_52)))
 (let ((?x39573 (* ?x39572 l_0_12_56)))
 (let ((?x37006 (* 2.0 l_0_12_51)))
 (let ((?x38634 (* ?x37006 l_0_12_60)))
 (let ((?x39568 (* 6.0 l_0_12_51)))
 (let ((?x39569 (* ?x39568 l_0_12_55)))
 (let ((?x37003 (* 2.0 l_0_12_50)))
 (let ((?x38632 (* ?x37003 l_0_12_59)))
 (let ((?x39564 (* 6.0 l_0_12_50)))
 (let ((?x39565 (* ?x39564 l_0_12_54)))
 (let ((?x37000 (* 2.0 l_0_12_49)))
 (let ((?x38630 (* ?x37000 l_0_12_58)))
 (let ((?x36996 (* 12.0 l_0_12_31)))
 (let ((?x36997 (* ?x36996 l_0_12_35)))
 (let ((?x36981 (* 12.0 l_0_12_30)))
 (let ((?x36982 (* ?x36981 l_0_12_34)))
 (let ((?x36978 (* 12.0 l_0_12_29)))
 (let ((?x36979 (* ?x36978 l_0_12_33)))
 (let ((?x36963 (* 12.0 l_0_12_28)))
 (let ((?x36964 (* ?x36963 l_0_12_32)))
 (let ((?x39554 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x39551 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x39548 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x39545 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x39542 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x39539 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x39536 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x39533 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x39530 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x39527 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x39090 (* 2.0 l_0_12_136)))
 (let ((?x39524 (* ?x39090 l_0_12_140)))
 (let ((?x39087 (* 2.0 l_0_12_135)))
 (let ((?x39522 (* ?x39087 l_0_12_139)))
 (let ((?x39084 (* 2.0 l_0_12_134)))
 (let ((?x39520 (* ?x39084 l_0_12_138)))
 (let ((?x39081 (* 2.0 l_0_12_133)))
 (let ((?x39518 (* ?x39081 l_0_12_137)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x36909 (* ?x36908 l_0_12_9)))
 (let ((?x39515 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x36906 (* ?x36905 l_0_12_8)))
 (let ((?x39511 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x39508 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x39505 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x39502 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x36903 (* ?x36902 l_0_12_7)))
 (let ((?x39498 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x39356 (* 2.0 l_0_12_103)))
 (let ((?x39495 (* ?x39356 l_0_12_98)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39493 (* ?x39062 l_0_12_97)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39491 (* ?x38144 l_0_12_96)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x29412 (* ?x38141 l_0_12_95)))
 (let ((?x36897 (* 12.0 l_0_12_10)))
 (let ((?x36898 (* ?x36897 l_0_12_14)))
 (let ((?x39503 (+ (+ (- (- (- (- (- ?x36898 ?x29412) ?x39491) ?x39493) ?x39495) ?x39498) ?x36903) ?x39502)))
 (let ((?x39519 (+ (+ (+ (+ (+ (+ (+ ?x39503 ?x39505) ?x39508) ?x39511) ?x36906) ?x39515) ?x36909) ?x39518)))
 (let ((?x39537 (+ (+ (+ (+ (+ (+ (+ ?x39519 ?x39520) ?x39522) ?x39524) ?x39527) ?x39530) ?x39533) ?x39536)))
 (let ((?x39556 (- (- (- (- (- (- (+ ?x39537 ?x39539) ?x39542) ?x39545) ?x39548) ?x39551) ?x39554) ?x36964)))
 (let ((?x39562 (- (- (- (- ?x39556 ?x36979) ?x36982) ?x36997) (* (* 6.0 l_0_12_49) l_0_12_53))))
 (let ((?x39575 (+ (- (+ (- (+ (- (+ ?x39562 ?x38630) ?x39565) ?x38632) ?x39569) ?x38634) ?x39573) ?x38636)))
 (let ((?x39590 (+ (- (+ (- (+ (- (+ ?x39575 ?x39577) ?x38640) ?x39581) ?x38642) ?x39585) ?x38644) ?x39589)))
 (= (- ?x39590 ?x38646) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39588 (* 6.0 l_0_12_73)))
 (let ((?x39766 (* ?x39588 l_0_12_82)))
 (let ((?x39584 (* 6.0 l_0_12_72)))
 (let ((?x39764 (* ?x39584 l_0_12_81)))
 (let ((?x39580 (* 6.0 l_0_12_71)))
 (let ((?x39762 (* ?x39580 l_0_12_80)))
 (let ((?x39576 (* 6.0 l_0_12_70)))
 (let ((?x39760 (* ?x39576 l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38638 (* ?x35976 l_0_12_70)))
 (let ((?x39572 (* 6.0 l_0_12_52)))
 (let ((?x39757 (* ?x39572 l_0_12_61)))
 (let ((?x39568 (* 6.0 l_0_12_51)))
 (let ((?x39755 (* ?x39568 l_0_12_60)))
 (let ((?x39564 (* 6.0 l_0_12_50)))
 (let ((?x39753 (* ?x39564 l_0_12_59)))
 (let ((?x39560 (* 6.0 l_0_12_49)))
 (let ((?x39751 (* ?x39560 l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38628 (* ?x35955 l_0_12_49)))
 (let ((?x36996 (* 12.0 l_0_12_31)))
 (let ((?x38626 (* ?x36996 l_0_12_40)))
 (let ((?x36981 (* 12.0 l_0_12_30)))
 (let ((?x38616 (* ?x36981 l_0_12_39)))
 (let ((?x36978 (* 12.0 l_0_12_29)))
 (let ((?x38614 (* ?x36978 l_0_12_38)))
 (let ((?x36963 (* 12.0 l_0_12_28)))
 (let ((?x38604 (* ?x36963 l_0_12_37)))
 (let ((?x39744 (* l_0_12_189 l_0_12_189)))
 (let ((?x39742 (* l_0_12_188 l_0_12_188)))
 (let ((?x39740 (* l_0_12_187 l_0_12_187)))
 (let ((?x39738 (* l_0_12_186 l_0_12_186)))
 (let ((?x39736 (* l_0_12_185 l_0_12_185)))
 (let ((?x39734 (* l_0_12_184 l_0_12_184)))
 (let ((?x38394 (* 12.0 l_0_12_18)))
 (let ((?x38569 (* ?x38394 l_0_12_9)))
 (let ((?x37603 (* 12.0 l_0_12_17)))
 (let ((?x38567 (* ?x37603 l_0_12_8)))
 (let ((?x39730 (* l_0_12_168 l_0_12_168)))
 (let ((?x39728 (* l_0_12_167 l_0_12_167)))
 (let ((?x39726 (* l_0_12_166 l_0_12_166)))
 (let ((?x39724 (* l_0_12_165 l_0_12_165)))
 (let ((?x39722 (* l_0_12_164 l_0_12_164)))
 (let ((?x39720 (* l_0_12_163 l_0_12_163)))
 (let ((?x37600 (* 12.0 l_0_12_16)))
 (let ((?x38563 (* ?x37600 l_0_12_7)))
 (let ((?x39090 (* 2.0 l_0_12_136)))
 (let ((?x39091 (* ?x39090 l_0_12_145)))
 (let ((?x39087 (* 2.0 l_0_12_135)))
 (let ((?x39088 (* ?x39087 l_0_12_144)))
 (let ((?x39084 (* 2.0 l_0_12_134)))
 (let ((?x39085 (* ?x39084 l_0_12_143)))
 (let ((?x39081 (* 2.0 l_0_12_133)))
 (let ((?x39082 (* ?x39081 l_0_12_142)))
 (let ((?x39713 (* l_0_12_126 l_0_12_126)))
 (let ((?x39711 (* l_0_12_125 l_0_12_125)))
 (let ((?x39709 (* l_0_12_124 l_0_12_124)))
 (let ((?x39707 (* l_0_12_123 l_0_12_123)))
 (let ((?x39705 (* l_0_12_122 l_0_12_122)))
 (let ((?x39703 (* l_0_12_121 l_0_12_121)))
 (let ((?x39701 (* l_0_12_105 l_0_12_105)))
 (let ((?x39699 (* l_0_12_104 l_0_12_104)))
 (let ((?x39697 (* l_0_12_103 l_0_12_103)))
 (let ((?x39695 (* l_0_12_102 l_0_12_102)))
 (let ((?x39693 (* l_0_12_101 l_0_12_101)))
 (let ((?x39691 (* l_0_12_100 l_0_12_100)))
 (let ((?x36897 (* 12.0 l_0_12_10)))
 (let ((?x38553 (* ?x36897 l_0_12_19)))
 (let ((?x39704 (+ (- (- (- (- (- (- ?x38553 ?x39691) ?x39693) ?x39695) ?x39697) ?x39699) ?x39701) ?x39703)))
 (let ((?x39716 (+ (+ (+ (+ (+ (+ (+ ?x39704 ?x39705) ?x39707) ?x39709) ?x39711) ?x39713) ?x39082) ?x39085)))
 (let ((?x39727 (+ (+ (+ (+ (+ (+ (+ ?x39716 ?x39088) ?x39091) ?x38563) ?x39720) ?x39722) ?x39724) ?x39726)))
 (let ((?x39739 (- (- (- (+ (+ (+ (+ ?x39727 ?x39728) ?x39730) ?x38567) ?x38569) ?x39734) ?x39736) ?x39738)))
 (let ((?x39749 (- (- (- (- (- (- (- ?x39739 ?x39740) ?x39742) ?x39744) ?x38604) ?x38614) ?x38616) ?x38626)))
 (let ((?x39761 (+ (+ (- (- (- (- (- ?x39749 ?x38628) ?x39751) ?x39753) ?x39755) ?x39757) ?x38638) ?x39760)))
 (= (+ (+ (+ ?x39761 ?x39762) ?x39764) ?x39766) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36799 (* l_0_12_78 l_0_12_78)))
 (let ((?x39864 (* 3.0 ?x36799)))
 (let ((?x38869 (* (* 2.0 l_0_12_78) l_0_12_83)))
 (let ((?x36796 (* l_0_12_77 l_0_12_77)))
 (let ((?x39861 (* 3.0 ?x36796)))
 (let ((?x38866 (* (* 2.0 l_0_12_77) l_0_12_82)))
 (let ((?x36793 (* l_0_12_76 l_0_12_76)))
 (let ((?x39858 (* 3.0 ?x36793)))
 (let ((?x38863 (* (* 2.0 l_0_12_76) l_0_12_81)))
 (let ((?x36790 (* l_0_12_75 l_0_12_75)))
 (let ((?x39855 (* 3.0 ?x36790)))
 (let ((?x38860 (* (* 2.0 l_0_12_75) l_0_12_80)))
 (let ((?x36787 (* l_0_12_74 l_0_12_74)))
 (let ((?x39852 (* 3.0 ?x36787)))
 (let ((?x38857 (* (* 2.0 l_0_12_74) l_0_12_79)))
 (let ((?x39849 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x38851 (* (* 2.0 l_0_12_57) l_0_12_62)))
 (let ((?x39845 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x38848 (* (* 2.0 l_0_12_56) l_0_12_61)))
 (let ((?x39841 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x38845 (* (* 2.0 l_0_12_55) l_0_12_60)))
 (let ((?x39837 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x38842 (* (* 2.0 l_0_12_54) l_0_12_59)))
 (let ((?x38839 (* (* 2.0 l_0_12_53) l_0_12_58)))
 (let ((?x36768 (* (* 6.0 l_0_12_36) l_0_12_36)))
 (let ((?x36765 (* (* 6.0 l_0_12_35) l_0_12_35)))
 (let ((?x36762 (* (* 6.0 l_0_12_34) l_0_12_34)))
 (let ((?x36759 (* (* 6.0 l_0_12_33) l_0_12_33)))
 (let ((?x36756 (* (* 6.0 l_0_12_32) l_0_12_32)))
 (let ((?x36692 (* l_0_12_15 l_0_12_15)))
 (let ((?x36693 (* 6.0 ?x36692)))
 (let ((?x39823 (* l_0_12_141 l_0_12_141)))
 (let ((?x39821 (* l_0_12_140 l_0_12_140)))
 (let ((?x36689 (* l_0_12_14 l_0_12_14)))
 (let ((?x36690 (* 6.0 ?x36689)))
 (let ((?x39818 (* l_0_12_139 l_0_12_139)))
 (let ((?x16170 (* l_0_12_138 l_0_12_138)))
 (let ((?x16202 (* l_0_12_137 l_0_12_137)))
 (let ((?x36686 (* l_0_12_13 l_0_12_13)))
 (let ((?x36687 (* 6.0 ?x36686)))
 (let ((?x36683 (* l_0_12_12 l_0_12_12)))
 (let ((?x36684 (* 6.0 ?x36683)))
 (let ((?x36680 (* l_0_12_11 l_0_12_11)))
 (let ((?x36681 (* 6.0 ?x36680)))
 (let ((?x39822 (+ (+ (+ (+ (+ (+ (+ ?x36681 ?x36684) ?x36687) ?x16202) ?x16170) ?x39818) ?x36690) ?x39821)))
 (let ((?x39830 (- (- (- (- (- (+ (+ ?x39822 ?x39823) ?x36693) ?x36756) ?x36759) ?x36762) ?x36765) ?x36768)))
 (let ((?x39838 (- (+ (- (+ ?x39830 ?x38839) (* (* 3.0 l_0_12_53) l_0_12_53)) ?x38842) ?x39837)))
 (let ((?x39851 (- (- (+ (- (+ (- (+ ?x39838 ?x38845) ?x39841) ?x38848) ?x39845) ?x38851) ?x39849) ?x38857)))
 (let ((?x39862 (+ (- (+ (- (+ (- (+ ?x39851 ?x39852) ?x38860) ?x39855) ?x38863) ?x39858) ?x38866) ?x39861)))
 (= (+ (- ?x39862 ?x38869) ?x39864) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35994 (* l_0_12_84 l_0_12_84)))
 (let ((?x35991 (* l_0_12_83 l_0_12_83)))
 (let ((?x35988 (* l_0_12_82 l_0_12_82)))
 (let ((?x35985 (* l_0_12_81 l_0_12_81)))
 (let ((?x35982 (* l_0_12_80 l_0_12_80)))
 (let ((?x35979 (* l_0_12_79 l_0_12_79)))
 (let ((?x39953 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39950 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39947 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39944 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39941 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x35976 (* 6.0 l_0_12_64)))
 (let ((?x38853 (* ?x35976 l_0_12_74)))
 (let ((?x36041 (* l_0_12_63 l_0_12_63)))
 (let ((?x25665 (* l_0_12_62 l_0_12_62)))
 (let ((?x11001 (* l_0_12_61 l_0_12_61)))
 (let ((?x25639 (* l_0_12_60 l_0_12_60)))
 (let ((?x25637 (* l_0_12_59 l_0_12_59)))
 (let ((?x25634 (* l_0_12_58 l_0_12_58)))
 (let ((?x39931 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39928 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39925 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39922 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x39919 (* (* 6.0 l_0_12_53) l_0_12_58)))
 (let ((?x35955 (* 6.0 l_0_12_43)))
 (let ((?x38835 (* ?x35955 l_0_12_53)))
 (let ((?x38833 (* (* 12.0 l_0_12_36) l_0_12_41)))
 (let ((?x38830 (* (* 12.0 l_0_12_35) l_0_12_40)))
 (let ((?x38827 (* (* 12.0 l_0_12_34) l_0_12_39)))
 (let ((?x38824 (* (* 12.0 l_0_12_33) l_0_12_38)))
 (let ((?x38821 (* (* 12.0 l_0_12_32) l_0_12_37)))
 (let ((?x38727 (* (* 12.0 l_0_12_15) l_0_12_20)))
 (let ((?x39239 (* (* 2.0 l_0_12_141) l_0_12_146)))
 (let ((?x39236 (* (* 2.0 l_0_12_140) l_0_12_145)))
 (let ((?x38724 (* (* 12.0 l_0_12_14) l_0_12_19)))
 (let ((?x39233 (* (* 2.0 l_0_12_139) l_0_12_144)))
 (let ((?x39230 (* (* 2.0 l_0_12_138) l_0_12_143)))
 (let ((?x39227 (* (* 2.0 l_0_12_137) l_0_12_142)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x38721 (* ?x36908 l_0_12_18)))
 (let ((?x36905 (* 12.0 l_0_12_12)))
 (let ((?x38703 (* ?x36905 l_0_12_17)))
 (let ((?x36902 (* 12.0 l_0_12_11)))
 (let ((?x28263 (* ?x36902 l_0_12_16)))
 (let ((?x39909 (+ (+ (+ (+ (+ (+ (+ ?x28263 ?x38703) ?x38721) ?x39227) ?x39230) ?x39233) ?x38724) ?x39236)))
 (let ((?x39916 (- (- (- (- (- (+ (+ ?x39909 ?x39239) ?x38727) ?x38821) ?x38824) ?x38827) ?x38830) ?x38833)))
 (let ((?x39933 (+ (- (- (- (- (- (- ?x39916 ?x38835) ?x39919) ?x39922) ?x39925) ?x39928) ?x39931) ?x25634)))
 (let ((?x39942 (+ (+ (+ (+ (+ (+ (+ ?x39933 ?x25637) ?x25639) ?x11001) ?x25665) ?x36041) ?x38853) ?x39941)))
 (let ((?x39957 (- (- (- (+ (+ (+ (+ ?x39942 ?x39944) ?x39947) ?x39950) ?x39953) ?x35979) ?x35982) ?x35985)))
 (= (- (- (- ?x39957 ?x35988) ?x35991) ?x35994) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x40006 (* ?x36292 l_0_12_67)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x40004 (* ?x36288 l_0_12_46)))
 (let ((?x36090 (* 12.0 l_0_12_22)))
 (let ((?x38415 (* ?x36090 l_0_12_25)))
 (let ((?x39992 (- (- (* (* 12.0 l_0_12_1) l_0_12_4) (* l_0_12_127 l_0_12_127)) (* (* 2.0 l_0_12_190) l_0_12_193))))
 (let ((?x39997 (- (- (- ?x39992 (* (* 2.0 l_0_12_211) l_0_12_214)) ?x38415) (* (* 2.0 l_0_12_232) l_0_12_235))))
 (let ((?x40001 (- (- ?x39997 (* (* 2.0 l_0_12_253) l_0_12_256)) (* (* 2.0 l_0_12_274) l_0_12_277))))
 (= (+ (- (- ?x40001 (* (* 2.0 l_0_12_295) l_0_12_298)) ?x40004) ?x40006) 0.0)))))))))))
(assert
 (let ((?x37848 (* l_0_12_6 l_0_12_6)))
 (let ((?x39014 (* 6.0 ?x37848)))
 (let ((?x37846 (* l_0_12_5 l_0_12_5)))
 (let ((?x39012 (* 6.0 ?x37846)))
 (let ((?x37844 (* l_0_12_4 l_0_12_4)))
 (let ((?x39001 (* 6.0 ?x37844)))
 (let ((?x40060 (* l_0_12_300 l_0_12_300)))
 (let ((?x40058 (* l_0_12_299 l_0_12_299)))
 (let ((?x40056 (* l_0_12_298 l_0_12_298)))
 (let ((?x40054 (* l_0_12_279 l_0_12_279)))
 (let ((?x40052 (* l_0_12_278 l_0_12_278)))
 (let ((?x40050 (* l_0_12_277 l_0_12_277)))
 (let ((?x38999 (* (* 6.0 l_0_12_27) l_0_12_27)))
 (let ((?x38996 (* (* 6.0 l_0_12_26) l_0_12_26)))
 (let ((?x40046 (* l_0_12_258 l_0_12_258)))
 (let ((?x40044 (* l_0_12_257 l_0_12_257)))
 (let ((?x40042 (* l_0_12_256 l_0_12_256)))
 (let ((?x38993 (* (* 6.0 l_0_12_25) l_0_12_25)))
 (let ((?x40039 (* l_0_12_237 l_0_12_237)))
 (let ((?x40037 (* l_0_12_236 l_0_12_236)))
 (let ((?x40035 (* l_0_12_235 l_0_12_235)))
 (let ((?x40033 (* l_0_12_216 l_0_12_216)))
 (let ((?x40031 (* l_0_12_215 l_0_12_215)))
 (let ((?x40029 (* l_0_12_214 l_0_12_214)))
 (let ((?x40027 (* l_0_12_195 l_0_12_195)))
 (let ((?x40025 (* l_0_12_194 l_0_12_194)))
 (let ((?x40023 (* l_0_12_193 l_0_12_193)))
 (let ((?x40030 (- (- (- (- (* (* (- 2.0) l_0_12_127) l_0_12_130) ?x40023) ?x40025) ?x40027) ?x40029)))
 (let ((?x40043 (- (- (- (- (- (- (- ?x40030 ?x40031) ?x40033) ?x40035) ?x40037) ?x40039) ?x38993) ?x40042)))
 (let ((?x40055 (- (- (- (- (- (- (- ?x40043 ?x40044) ?x40046) ?x38996) ?x38999) ?x40050) ?x40052) ?x40054)))
 (let ((?x40065 (- (+ (- (- (- ?x40055 ?x40056) ?x40058) ?x40060) ?x39001) (* (* 1.0 l_0_12_46) l_0_12_46))))
 (let ((?x40071 (- (- ?x40065 (* (* 1.0 l_0_12_47) l_0_12_47)) (* (* 1.0 l_0_12_48) l_0_12_48))))
 (let ((?x40077 (+ (+ (+ (+ ?x40071 ?x39012) ?x39014) (* 1.0 (* l_0_12_67 l_0_12_67))) (* 1.0 (* l_0_12_68 l_0_12_68)))))
 (= (+ ?x40077 (* 1.0 (* l_0_12_69 l_0_12_69))) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x40156 (* ?x36519 l_0_12_88)))
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x40154 (* ?x38481 l_0_12_72)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x40152 (* ?x38478 l_0_12_71)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x40150 (* ?x38475 l_0_12_70)))
 (let ((?x39133 (* (* 12.0 l_0_12_6) l_0_12_9)))
 (let ((?x39130 (* (* 12.0 l_0_12_5) l_0_12_8)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x40146 (* ?x38470 l_0_12_51)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x40144 (* ?x38467 l_0_12_50)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x40142 (* ?x38464 l_0_12_49)))
 (let ((?x39118 (* (* 12.0 l_0_12_4) l_0_12_7)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x39115 (* ?x38441 l_0_12_30)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x39113 (* ?x38438 l_0_12_29)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x39111 (* ?x38426 l_0_12_28)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x16668 (* ?x36426 l_0_12_172)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x29727 (* ?x36423 l_0_12_151)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x38559 (* ?x36069 l_0_12_133)))
 (let ((?x16726 (- (- (+ (- (* (* 2.0 l_0_12_106) l_0_12_109) ?x38559) ?x29727) ?x16668) (* (* 2.0 l_0_12_193) l_0_12_196))))
 (let ((?x40107 (- (- ?x16726 (* (* 2.0 l_0_12_194) l_0_12_197)) (* (* 2.0 l_0_12_195) l_0_12_198))))
 (let ((?x40111 (- (- ?x40107 (* (* 2.0 l_0_12_214) l_0_12_217)) (* (* 2.0 l_0_12_215) l_0_12_218))))
 (let ((?x40115 (- (- ?x40111 (* (* 2.0 l_0_12_216) l_0_12_219)) (* (* 2.0 l_0_12_235) l_0_12_238))))
 (let ((?x40119 (- (- ?x40115 (* (* 2.0 l_0_12_236) l_0_12_239)) (* (* 2.0 l_0_12_237) l_0_12_240))))
 (let ((?x40124 (- (- (- ?x40119 ?x39111) (* (* 2.0 l_0_12_256) l_0_12_259)) (* (* 2.0 l_0_12_257) l_0_12_260))))
 (let ((?x40130 (- (- (- (- ?x40124 (* (* 2.0 l_0_12_258) l_0_12_261)) ?x39113) ?x39115) (* (* 2.0 l_0_12_277) l_0_12_280))))
 (let ((?x40134 (- (- ?x40130 (* (* 2.0 l_0_12_278) l_0_12_281)) (* (* 2.0 l_0_12_279) l_0_12_282))))
 (let ((?x40138 (- (- ?x40134 (* (* 2.0 l_0_12_298) l_0_12_301)) (* (* 2.0 l_0_12_299) l_0_12_302))))
 (let ((?x40145 (- (- (+ (- ?x40138 (* (* 2.0 l_0_12_300) l_0_12_303)) ?x39118) ?x40142) ?x40144)))
 (let ((?x40157 (- (+ (+ (+ (+ (+ (- ?x40145 ?x40146) ?x39130) ?x39133) ?x40150) ?x40152) ?x40154) ?x40156)))
 (= ?x40157 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x40259 (* ?x38481 l_0_12_76)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x40257 (* ?x38478 l_0_12_75)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x40255 (* ?x38475 l_0_12_74)))
 (let ((?x36292 (* 2.0 l_0_12_64)))
 (let ((?x40006 (* ?x36292 l_0_12_67)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x40252 (* ?x38470 l_0_12_55)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x40250 (* ?x38467 l_0_12_54)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x40248 (* ?x38464 l_0_12_53)))
 (let ((?x36288 (* 2.0 l_0_12_43)))
 (let ((?x40004 (* ?x36288 l_0_12_46)))
 (let ((?x38441 (* 12.0 l_0_12_27)))
 (let ((?x39245 (* ?x38441 l_0_12_34)))
 (let ((?x38438 (* 12.0 l_0_12_26)))
 (let ((?x39243 (* ?x38438 l_0_12_33)))
 (let ((?x38426 (* 12.0 l_0_12_25)))
 (let ((?x39241 (* ?x38426 l_0_12_32)))
 (let ((?x36908 (* 12.0 l_0_12_13)))
 (let ((?x39199 (* ?x36908 l_0_12_6)))
 (let ((?x36069 (* 2.0 l_0_12_127)))
 (let ((?x38705 (* ?x36069 l_0_12_137)))
 (let ((?x39197 (+ (* (* 12.0 l_0_12_11) l_0_12_4) (* (* 12.0 l_0_12_12) l_0_12_5))))
 (let ((?x40211 (- (- (+ (- ?x39197 ?x38705) ?x39199) (* (* 2.0 l_0_12_193) l_0_12_200)) (* (* 2.0 l_0_12_194) l_0_12_201))))
 (let ((?x40215 (- (- ?x40211 (* (* 2.0 l_0_12_195) l_0_12_202)) (* (* 2.0 l_0_12_214) l_0_12_221))))
 (let ((?x40219 (- (- ?x40215 (* (* 2.0 l_0_12_215) l_0_12_222)) (* (* 2.0 l_0_12_216) l_0_12_223))))
 (let ((?x40223 (- (- ?x40219 (* (* 2.0 l_0_12_235) l_0_12_242)) (* (* 2.0 l_0_12_236) l_0_12_243))))
 (let ((?x40228 (- (- (- ?x40223 (* (* 2.0 l_0_12_237) l_0_12_244)) ?x39241) (* (* 2.0 l_0_12_256) l_0_12_263))))
 (let ((?x40232 (- (- ?x40228 (* (* 2.0 l_0_12_257) l_0_12_264)) (* (* 2.0 l_0_12_258) l_0_12_265))))
 (let ((?x40238 (- (- (- (- ?x40232 ?x39243) ?x39245) (* (* 2.0 l_0_12_277) l_0_12_284)) (* (* 2.0 l_0_12_278) l_0_12_285))))
 (let ((?x40242 (- (- ?x40238 (* (* 2.0 l_0_12_279) l_0_12_286)) (* (* 2.0 l_0_12_298) l_0_12_305))))
 (let ((?x40246 (- (- ?x40242 (* (* 2.0 l_0_12_299) l_0_12_306)) (* (* 2.0 l_0_12_300) l_0_12_307))))
 (let ((?x40258 (+ (+ (- (- (- (- (+ ?x40246 ?x40004) ?x40248) ?x40250) ?x40252) ?x40006) ?x40255) ?x40257)))
 (= (+ ?x40258 ?x40259) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x37265 (* l_0_12_66 l_0_12_66)))
 (let ((?x37807 (* 3.0 ?x37265)))
 (let ((?x37262 (* l_0_12_65 l_0_12_65)))
 (let ((?x37805 (* 3.0 ?x37262)))
 (let ((?x37803 (* (* 3.0 l_0_12_45) l_0_12_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_12_44) l_0_12_44) ?x37803) ?x37805) ?x37807) 0.0)))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x37991 (* ?x37990 l_0_12_68)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x37988 (* ?x37987 l_0_12_67)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x37985 (* ?x37984 l_0_12_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_12_44) l_0_12_46) ?x37985) ?x37988) ?x37991) 0.0))))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38185 (* ?x37990 l_0_12_71)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38183 (* ?x37987 l_0_12_70)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38181 (* ?x37984 l_0_12_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_12_44) l_0_12_49) ?x38181) ?x38183) ?x38185) 0.0))))))))
(assert
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38287 (* ?x37990 l_0_12_75)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38284 (* ?x37987 l_0_12_74)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38281 (* ?x37984 l_0_12_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_12_44) l_0_12_53) ?x38281) ?x38284) ?x38287) 0.0))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x37465 (* ?x36519 l_0_12_86)))
 (let ((?x37990 (* 6.0 l_0_12_66)))
 (let ((?x38356 (* ?x37990 l_0_12_80)))
 (let ((?x37987 (* 6.0 l_0_12_65)))
 (let ((?x38354 (* ?x37987 l_0_12_79)))
 (let ((?x37984 (* 6.0 l_0_12_45)))
 (let ((?x38351 (* ?x37984 l_0_12_59)))
 (let ((?x37981 (* 6.0 l_0_12_44)))
 (let ((?x38349 (* ?x37981 l_0_12_58)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x37421 (* ?x36426 l_0_12_170)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x37419 (* ?x36423 l_0_12_149)))
 (let ((?x40359 (- (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_107) ?x37419) ?x37421) ?x38349) ?x38351)))
 (= (+ (+ (+ ?x40359 ?x38354) ?x38356) ?x37465) 0.0)))))))))))))))))
(assert
 (let ((?x39022 (* l_0_12_69 l_0_12_69)))
 (let ((?x39023 (* 3.0 ?x39022)))
 (let ((?x39019 (* l_0_12_68 l_0_12_68)))
 (let ((?x39020 (* 3.0 ?x39019)))
 (let ((?x39016 (* l_0_12_67 l_0_12_67)))
 (let ((?x39017 (* 3.0 ?x39016)))
 (let ((?x39010 (* (* 3.0 l_0_12_48) l_0_12_48)))
 (let ((?x39007 (* (* 3.0 l_0_12_47) l_0_12_47)))
 (let ((?x17260 (+ (+ (- (- (* (* (- 3.0) l_0_12_46) l_0_12_46) ?x39007) ?x39010) ?x39017) ?x39020)))
 (= (+ ?x17260 ?x39023) 0.0)))))))))))
(assert
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39142 (* ?x39141 l_0_12_72)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39139 (* ?x39138 l_0_12_71)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39136 (* ?x39135 l_0_12_70)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39127 (* ?x39126 l_0_12_51)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39124 (* ?x39123 l_0_12_50)))
 (let ((?x17456 (+ (+ (- (- (* (* (- 6.0) l_0_12_46) l_0_12_49) ?x39124) ?x39127) ?x39136) ?x39139)))
 (= (+ ?x17456 ?x39142) 0.0)))))))))))))
(assert
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39262 (* ?x39141 l_0_12_76)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39259 (* ?x39138 l_0_12_75)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39256 (* ?x39135 l_0_12_74)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39253 (* ?x39126 l_0_12_55)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39250 (* ?x39123 l_0_12_54)))
 (let ((?x40375 (+ (+ (- (- (* (* (- 6.0) l_0_12_46) l_0_12_53) ?x39250) ?x39253) ?x39256) ?x39259)))
 (= (+ ?x40375 ?x39262) 0.0)))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x40156 (* ?x36519 l_0_12_88)))
 (let ((?x39141 (* 6.0 l_0_12_69)))
 (let ((?x39333 (* ?x39141 l_0_12_81)))
 (let ((?x39138 (* 6.0 l_0_12_68)))
 (let ((?x39331 (* ?x39138 l_0_12_80)))
 (let ((?x39135 (* 6.0 l_0_12_67)))
 (let ((?x39329 (* ?x39135 l_0_12_79)))
 (let ((?x39126 (* 6.0 l_0_12_48)))
 (let ((?x39326 (* ?x39126 l_0_12_60)))
 (let ((?x39123 (* 6.0 l_0_12_47)))
 (let ((?x39324 (* ?x39123 l_0_12_59)))
 (let ((?x39120 (* 6.0 l_0_12_46)))
 (let ((?x39322 (* ?x39120 l_0_12_58)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x16668 (* ?x36426 l_0_12_172)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x29727 (* ?x36423 l_0_12_151)))
 (let ((?x40384 (- (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_109) ?x29727) ?x16668) ?x39322) ?x39324)))
 (= (+ (+ (+ (+ (- ?x40384 ?x39326) ?x39329) ?x39331) ?x39333) ?x40156) 0.0)))))))))))))))))))))
(assert
 (let ((?x36513 (* l_0_12_73 l_0_12_73)))
 (let ((?x39426 (* 3.0 ?x36513)))
 (let ((?x36510 (* l_0_12_72 l_0_12_72)))
 (let ((?x39424 (* 3.0 ?x36510)))
 (let ((?x36507 (* l_0_12_71 l_0_12_71)))
 (let ((?x39422 (* 3.0 ?x36507)))
 (let ((?x36504 (* l_0_12_70 l_0_12_70)))
 (let ((?x39420 (* 3.0 ?x36504)))
 (let ((?x39417 (* (* 3.0 l_0_12_52) l_0_12_52)))
 (let ((?x39414 (* (* 3.0 l_0_12_51) l_0_12_51)))
 (let ((?x39411 (* (* 3.0 l_0_12_50) l_0_12_50)))
 (let ((?x40395 (+ (- (- (- (* (* (- 3.0) l_0_12_49) l_0_12_49) ?x39411) ?x39414) ?x39417) ?x39420)))
 (= (+ (+ (+ ?x40395 ?x39422) ?x39424) ?x39426) 0.0))))))))))))))
(assert
 (let ((?x39588 (* 6.0 l_0_12_73)))
 (let ((?x39589 (* ?x39588 l_0_12_77)))
 (let ((?x39584 (* 6.0 l_0_12_72)))
 (let ((?x39585 (* ?x39584 l_0_12_76)))
 (let ((?x39580 (* 6.0 l_0_12_71)))
 (let ((?x39581 (* ?x39580 l_0_12_75)))
 (let ((?x39576 (* 6.0 l_0_12_70)))
 (let ((?x39577 (* ?x39576 l_0_12_74)))
 (let ((?x39572 (* 6.0 l_0_12_52)))
 (let ((?x39573 (* ?x39572 l_0_12_56)))
 (let ((?x39568 (* 6.0 l_0_12_51)))
 (let ((?x39569 (* ?x39568 l_0_12_55)))
 (let ((?x39564 (* 6.0 l_0_12_50)))
 (let ((?x39565 (* ?x39564 l_0_12_54)))
 (let ((?x40409 (+ (- (- (- (* (* (- 6.0) l_0_12_49) l_0_12_53) ?x39565) ?x39569) ?x39573) ?x39577)))
 (= (+ (+ (+ ?x40409 ?x39581) ?x39585) ?x39589) 0.0)))))))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x36520 (* ?x36519 l_0_12_91)))
 (let ((?x39588 (* 6.0 l_0_12_73)))
 (let ((?x39766 (* ?x39588 l_0_12_82)))
 (let ((?x39584 (* 6.0 l_0_12_72)))
 (let ((?x39764 (* ?x39584 l_0_12_81)))
 (let ((?x39580 (* 6.0 l_0_12_71)))
 (let ((?x39762 (* ?x39580 l_0_12_80)))
 (let ((?x39576 (* 6.0 l_0_12_70)))
 (let ((?x39760 (* ?x39576 l_0_12_79)))
 (let ((?x39572 (* 6.0 l_0_12_52)))
 (let ((?x39757 (* ?x39572 l_0_12_61)))
 (let ((?x39568 (* 6.0 l_0_12_51)))
 (let ((?x39755 (* ?x39568 l_0_12_60)))
 (let ((?x39564 (* 6.0 l_0_12_50)))
 (let ((?x39753 (* ?x39564 l_0_12_59)))
 (let ((?x39560 (* 6.0 l_0_12_49)))
 (let ((?x39751 (* ?x39560 l_0_12_58)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x36427 (* ?x36426 l_0_12_175)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x36424 (* ?x36423 l_0_12_154)))
 (let ((?x40422 (- (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x36424) ?x36427) ?x39751) ?x39753)))
 (let ((?x40429 (+ (+ (+ (+ (+ (- (- ?x40422 ?x39755) ?x39757) ?x39760) ?x39762) ?x39764) ?x39766) ?x36520)))
 (= ?x40429 0.0))))))))))))))))))))))))))
(assert
 (let ((?x36799 (* l_0_12_78 l_0_12_78)))
 (let ((?x39864 (* 3.0 ?x36799)))
 (let ((?x36796 (* l_0_12_77 l_0_12_77)))
 (let ((?x39861 (* 3.0 ?x36796)))
 (let ((?x36793 (* l_0_12_76 l_0_12_76)))
 (let ((?x39858 (* 3.0 ?x36793)))
 (let ((?x36790 (* l_0_12_75 l_0_12_75)))
 (let ((?x39855 (* 3.0 ?x36790)))
 (let ((?x36787 (* l_0_12_74 l_0_12_74)))
 (let ((?x39852 (* 3.0 ?x36787)))
 (let ((?x39849 (* (* 3.0 l_0_12_57) l_0_12_57)))
 (let ((?x39845 (* (* 3.0 l_0_12_56) l_0_12_56)))
 (let ((?x39841 (* (* 3.0 l_0_12_55) l_0_12_55)))
 (let ((?x39837 (* (* 3.0 l_0_12_54) l_0_12_54)))
 (let ((?x40438 (- (- (- (- (* (* (- 3.0) l_0_12_53) l_0_12_53) ?x39837) ?x39841) ?x39845) ?x39849)))
 (= (+ (+ (+ (+ (+ ?x40438 ?x39852) ?x39855) ?x39858) ?x39861) ?x39864) 0.0)))))))))))))))))
(assert
 (let ((?x36519 (* 2.0 l_0_12_85)))
 (let ((?x37025 (* ?x36519 l_0_12_95)))
 (let ((?x39953 (* (* 6.0 l_0_12_78) l_0_12_83)))
 (let ((?x39950 (* (* 6.0 l_0_12_77) l_0_12_82)))
 (let ((?x39947 (* (* 6.0 l_0_12_76) l_0_12_81)))
 (let ((?x39944 (* (* 6.0 l_0_12_75) l_0_12_80)))
 (let ((?x39941 (* (* 6.0 l_0_12_74) l_0_12_79)))
 (let ((?x39931 (* (* 6.0 l_0_12_57) l_0_12_62)))
 (let ((?x39928 (* (* 6.0 l_0_12_56) l_0_12_61)))
 (let ((?x39925 (* (* 6.0 l_0_12_55) l_0_12_60)))
 (let ((?x39922 (* (* 6.0 l_0_12_54) l_0_12_59)))
 (let ((?x39919 (* (* 6.0 l_0_12_53) l_0_12_58)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x36913 (* ?x36426 l_0_12_179)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x36911 (* ?x36423 l_0_12_158)))
 (let ((?x40451 (- (- (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_116) ?x36911) ?x36913) ?x39919) ?x39922)))
 (let ((?x40458 (+ (+ (+ (+ (- (- (- ?x40451 ?x39925) ?x39928) ?x39931) ?x39941) ?x39944) ?x39947) ?x39950)))
 (= (+ (+ ?x40458 ?x39953) ?x37025) 0.0))))))))))))))))))))
(assert
 (let ((?x35994 (* l_0_12_84 l_0_12_84)))
 (let ((?x35995 (* 3.0 ?x35994)))
 (let ((?x35991 (* l_0_12_83 l_0_12_83)))
 (let ((?x35992 (* 3.0 ?x35991)))
 (let ((?x35988 (* l_0_12_82 l_0_12_82)))
 (let ((?x35989 (* 3.0 ?x35988)))
 (let ((?x35985 (* l_0_12_81 l_0_12_81)))
 (let ((?x35986 (* 3.0 ?x35985)))
 (let ((?x35982 (* l_0_12_80 l_0_12_80)))
 (let ((?x35983 (* 3.0 ?x35982)))
 (let ((?x35979 (* l_0_12_79 l_0_12_79)))
 (let ((?x35980 (* 3.0 ?x35979)))
 (let ((?x35974 (* (* 3.0 l_0_12_63) l_0_12_63)))
 (let ((?x35971 (* (* 3.0 l_0_12_62) l_0_12_62)))
 (let ((?x35968 (* (* 3.0 l_0_12_61) l_0_12_61)))
 (let ((?x35965 (* (* 3.0 l_0_12_60) l_0_12_60)))
 (let ((?x35962 (* (* 3.0 l_0_12_59) l_0_12_59)))
 (let ((?x35959 (* (* 3.0 l_0_12_58) l_0_12_58)))
 (let ((?x36426 (* 2.0 l_0_12_169)))
 (let ((?x38565 (* ?x36426 l_0_12_184)))
 (let ((?x36423 (* 2.0 l_0_12_148)))
 (let ((?x38561 (* ?x36423 l_0_12_163)))
 (let ((?x36420 (* 2.0 l_0_12_106)))
 (let ((?x38557 (* ?x36420 l_0_12_121)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x38555 (* ?x38141 l_0_12_85)))
 (let ((?x15562 (- (- (- (- (+ (- (- ?x38555 ?x38557) ?x38561) ?x38565) ?x35959) ?x35962) ?x35965) ?x35968)))
 (let ((?x17710 (+ (+ (+ (+ (+ (- (- ?x15562 ?x35971) ?x35974) ?x35980) ?x35983) ?x35986) ?x35989) ?x35992)))
 (= (+ ?x17710 ?x35995) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39022 (* l_0_12_69 l_0_12_69)))
 (let ((?x39019 (* l_0_12_68 l_0_12_68)))
 (let ((?x39016 (* l_0_12_67 l_0_12_67)))
 (let ((?x28871 (* l_0_12_48 l_0_12_48)))
 (let ((?x28865 (* l_0_12_47 l_0_12_47)))
 (let ((?x28862 (* l_0_12_46 l_0_12_46)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x39224 (* ?x38987 l_0_12_139)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x39222 (* ?x38968 l_0_12_138)))
 (let ((?x30139 (+ (+ (- (- (* (* (- 2.0) l_0_12_130) l_0_12_137) ?x39222) ?x39224) ?x28862) ?x28865)))
 (= (- (- (- (+ ?x30139 ?x28871) ?x39016) ?x39019) ?x39022) 0.0)))))))))))))
(assert
 (let ((?x40503 (* 2.0 l_0_12_90)))
 (let ((?x40504 (* ?x40503 l_0_12_97)))
 (let ((?x40500 (* 2.0 l_0_12_89)))
 (let ((?x40501 (* ?x40500 l_0_12_96)))
 (let ((?x40497 (* 2.0 l_0_12_88)))
 (let ((?x40498 (* ?x40497 l_0_12_95)))
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x40154 (* ?x38481 l_0_12_72)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x40152 (* ?x38478 l_0_12_71)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x40150 (* ?x38475 l_0_12_70)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x40146 (* ?x38470 l_0_12_51)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x40144 (* ?x38467 l_0_12_50)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x40142 (* ?x38464 l_0_12_49)))
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x40489 (* ?x39108 l_0_12_181)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x40487 (* ?x39105 l_0_12_180)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x40485 (* ?x39102 l_0_12_179)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x40483 (* ?x39099 l_0_12_160)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x40481 (* ?x39096 l_0_12_159)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x40479 (* ?x39093 l_0_12_158)))
 (let ((?x39090 (* 2.0 l_0_12_136)))
 (let ((?x39524 (* ?x39090 l_0_12_140)))
 (let ((?x39087 (* 2.0 l_0_12_135)))
 (let ((?x39522 (* ?x39087 l_0_12_139)))
 (let ((?x39084 (* 2.0 l_0_12_134)))
 (let ((?x39520 (* ?x39084 l_0_12_138)))
 (let ((?x39081 (* 2.0 l_0_12_133)))
 (let ((?x39518 (* ?x39081 l_0_12_137)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x17879 (* ?x39071 l_0_12_118)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x27884 (* ?x39068 l_0_12_117)))
 (let ((?x40476 (- (- (+ (+ (* (* 2.0 l_0_12_109) l_0_12_116) ?x27884) ?x17879) ?x39518) ?x39520)))
 (let ((?x40488 (- (- (+ (+ (+ (- (- ?x40476 ?x39522) ?x39524) ?x40479) ?x40481) ?x40483) ?x40485) ?x40487)))
 (let ((?x40496 (- (- (- (+ (+ (+ (- ?x40488 ?x40489) ?x40142) ?x40144) ?x40146) ?x40150) ?x40152) ?x40154)))
 (= (- (- (- ?x40496 ?x40498) ?x40501) ?x40504) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x38481 (* 2.0 l_0_12_69)))
 (let ((?x40259 (* ?x38481 l_0_12_76)))
 (let ((?x38478 (* 2.0 l_0_12_68)))
 (let ((?x40257 (* ?x38478 l_0_12_75)))
 (let ((?x38475 (* 2.0 l_0_12_67)))
 (let ((?x40255 (* ?x38475 l_0_12_74)))
 (let ((?x38470 (* 2.0 l_0_12_48)))
 (let ((?x40252 (* ?x38470 l_0_12_55)))
 (let ((?x38467 (* 2.0 l_0_12_47)))
 (let ((?x40250 (* ?x38467 l_0_12_54)))
 (let ((?x38464 (* 2.0 l_0_12_46)))
 (let ((?x40248 (* ?x38464 l_0_12_53)))
 (let ((?x39823 (* l_0_12_141 l_0_12_141)))
 (let ((?x39821 (* l_0_12_140 l_0_12_140)))
 (let ((?x39818 (* l_0_12_139 l_0_12_139)))
 (let ((?x40537 (- (- (* (- l_0_12_137) l_0_12_137) (* l_0_12_138 l_0_12_138)) ?x39818)))
 (let ((?x40544 (- (- (+ (+ (+ (- (- ?x40537 ?x39821) ?x39823) ?x40248) ?x40250) ?x40252) ?x40255) ?x40257)))
 (= (- ?x40544 ?x40259) 0.0)))))))))))))))))))
(assert
 (let ((?x40588 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x40585 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x40582 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x40579 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x36513 (* l_0_12_73 l_0_12_73)))
 (let ((?x36510 (* l_0_12_72 l_0_12_72)))
 (let ((?x36507 (* l_0_12_71 l_0_12_71)))
 (let ((?x36504 (* l_0_12_70 l_0_12_70)))
 (let ((?x12193 (* l_0_12_52 l_0_12_52)))
 (let ((?x36598 (* l_0_12_51 l_0_12_51)))
 (let ((?x36594 (* l_0_12_50 l_0_12_50)))
 (let ((?x25848 (* l_0_12_49 l_0_12_49)))
 (let ((?x39400 (* 2.0 l_0_12_178)))
 (let ((?x40568 (* ?x39400 l_0_12_182)))
 (let ((?x39397 (* 2.0 l_0_12_177)))
 (let ((?x40566 (* ?x39397 l_0_12_181)))
 (let ((?x39394 (* 2.0 l_0_12_176)))
 (let ((?x40564 (* ?x39394 l_0_12_180)))
 (let ((?x39391 (* 2.0 l_0_12_175)))
 (let ((?x40562 (* ?x39391 l_0_12_179)))
 (let ((?x39388 (* 2.0 l_0_12_157)))
 (let ((?x40560 (* ?x39388 l_0_12_161)))
 (let ((?x39385 (* 2.0 l_0_12_156)))
 (let ((?x40558 (* ?x39385 l_0_12_160)))
 (let ((?x39382 (* 2.0 l_0_12_155)))
 (let ((?x40556 (* ?x39382 l_0_12_159)))
 (let ((?x39379 (* 2.0 l_0_12_154)))
 (let ((?x40554 (* ?x39379 l_0_12_158)))
 (let ((?x39368 (* 2.0 l_0_12_115)))
 (let ((?x40552 (* ?x39368 l_0_12_119)))
 (let ((?x39365 (* 2.0 l_0_12_114)))
 (let ((?x40550 (* ?x39365 l_0_12_118)))
 (let ((?x39362 (* 2.0 l_0_12_113)))
 (let ((?x30206 (* ?x39362 l_0_12_117)))
 (let ((?x40555 (+ (+ (+ (+ (* (* 2.0 l_0_12_112) l_0_12_116) ?x30206) ?x40550) ?x40552) ?x40554)))
 (let ((?x40569 (- (- (- (- (+ (+ (+ ?x40555 ?x40556) ?x40558) ?x40560) ?x40562) ?x40564) ?x40566) ?x40568)))
 (let ((?x40576 (- (- (- (+ (+ (+ (+ ?x40569 ?x25848) ?x36594) ?x36598) ?x12193) ?x36504) ?x36507) ?x36510)))
 (= (- (- (- (- (- ?x40576 ?x36513) ?x40579) ?x40582) ?x40585) ?x40588) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40680 (* l_0_12_99 l_0_12_99)))
 (let ((?x40678 (* l_0_12_98 l_0_12_98)))
 (let ((?x40676 (* l_0_12_97 l_0_12_97)))
 (let ((?x40674 (* l_0_12_96 l_0_12_96)))
 (let ((?x40672 (* l_0_12_95 l_0_12_95)))
 (let ((?x37022 (* 2.0 l_0_12_73)))
 (let ((?x37023 (* ?x37022 l_0_12_77)))
 (let ((?x37019 (* 2.0 l_0_12_72)))
 (let ((?x37020 (* ?x37019 l_0_12_76)))
 (let ((?x37016 (* 2.0 l_0_12_71)))
 (let ((?x37017 (* ?x37016 l_0_12_75)))
 (let ((?x37013 (* 2.0 l_0_12_70)))
 (let ((?x37014 (* ?x37013 l_0_12_74)))
 (let ((?x37009 (* 2.0 l_0_12_52)))
 (let ((?x37010 (* ?x37009 l_0_12_56)))
 (let ((?x37006 (* 2.0 l_0_12_51)))
 (let ((?x37007 (* ?x37006 l_0_12_55)))
 (let ((?x37003 (* 2.0 l_0_12_50)))
 (let ((?x37004 (* ?x37003 l_0_12_54)))
 (let ((?x37000 (* 2.0 l_0_12_49)))
 (let ((?x37001 (* ?x37000 l_0_12_53)))
 (let ((?x40662 (* l_0_12_183 l_0_12_183)))
 (let ((?x40660 (* l_0_12_182 l_0_12_182)))
 (let ((?x40658 (* l_0_12_181 l_0_12_181)))
 (let ((?x40656 (* l_0_12_180 l_0_12_180)))
 (let ((?x40654 (* l_0_12_179 l_0_12_179)))
 (let ((?x40652 (* l_0_12_162 l_0_12_162)))
 (let ((?x40650 (* l_0_12_161 l_0_12_161)))
 (let ((?x40648 (* l_0_12_160 l_0_12_160)))
 (let ((?x40646 (* l_0_12_159 l_0_12_159)))
 (let ((?x40644 (* l_0_12_158 l_0_12_158)))
 (let ((?x40642 (* l_0_12_120 l_0_12_120)))
 (let ((?x40640 (* l_0_12_119 l_0_12_119)))
 (let ((?x40638 (* l_0_12_118 l_0_12_118)))
 (let ((?x40639 (+ (+ (* l_0_12_116 l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40638)))
 (let ((?x40653 (+ (+ (+ (+ (+ (+ (+ ?x40639 ?x40640) ?x40642) ?x40644) ?x40646) ?x40648) ?x40650) ?x40652)))
 (let ((?x40665 (+ (+ (- (- (- (- (- ?x40653 ?x40654) ?x40656) ?x40658) ?x40660) ?x40662) ?x37001) ?x37004)))
 (let ((?x40673 (- (- (- (- (- (+ (+ ?x40665 ?x37007) ?x37010) ?x37014) ?x37017) ?x37020) ?x37023) ?x40672)))
 (= (- (- (- (- ?x40673 ?x40674) ?x40676) ?x40678) ?x40680) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x36799 (* l_0_12_78 l_0_12_78)))
 (let ((?x36796 (* l_0_12_77 l_0_12_77)))
 (let ((?x36793 (* l_0_12_76 l_0_12_76)))
 (let ((?x36790 (* l_0_12_75 l_0_12_75)))
 (let ((?x36787 (* l_0_12_74 l_0_12_74)))
 (let ((?x36880 (* l_0_12_57 l_0_12_57)))
 (let ((?x36876 (* l_0_12_56 l_0_12_56)))
 (let ((?x36872 (* l_0_12_55 l_0_12_55)))
 (let ((?x40712 (+ (+ (+ (* l_0_12_53 l_0_12_53) (* l_0_12_54 l_0_12_54)) ?x36872) ?x36876)))
 (= (- (- (- (- (- (+ ?x40712 ?x36880) ?x36787) ?x36790) ?x36793) ?x36796) ?x36799) 0.0)))))))))))
(assert
 (let ((?x40748 (* l_0_12_90 l_0_12_90)))
 (let ((?x40746 (* l_0_12_89 l_0_12_89)))
 (let ((?x40744 (* l_0_12_88 l_0_12_88)))
 (let ((?x40742 (* l_0_12_174 l_0_12_174)))
 (let ((?x40740 (* l_0_12_173 l_0_12_173)))
 (let ((?x40738 (* l_0_12_172 l_0_12_172)))
 (let ((?x40736 (* l_0_12_153 l_0_12_153)))
 (let ((?x40734 (* l_0_12_152 l_0_12_152)))
 (let ((?x40732 (* l_0_12_151 l_0_12_151)))
 (let ((?x38987 (* 2.0 l_0_12_132)))
 (let ((?x39079 (* ?x38987 l_0_12_135)))
 (let ((?x38968 (* 2.0 l_0_12_131)))
 (let ((?x39077 (* ?x38968 l_0_12_134)))
 (let ((?x39074 (* 2.0 l_0_12_130)))
 (let ((?x39075 (* ?x39074 l_0_12_133)))
 (let ((?x40727 (* l_0_12_111 l_0_12_111)))
 (let ((?x40728 (+ (+ (* l_0_12_109 l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x40727)))
 (let ((?x40739 (- (+ (+ (+ (- (- (- ?x40728 ?x39075) ?x39077) ?x39079) ?x40732) ?x40734) ?x40736) ?x40738)))
 (= (- (- (- (- (- ?x40739 ?x40740) ?x40742) ?x40744) ?x40746) ?x40748) 0.0))))))))))))))))))))
(assert
 (let ((?x40503 (* 2.0 l_0_12_90)))
 (let ((?x40789 (* ?x40503 l_0_12_93)))
 (let ((?x40500 (* 2.0 l_0_12_89)))
 (let ((?x40787 (* ?x40500 l_0_12_92)))
 (let ((?x40497 (* 2.0 l_0_12_88)))
 (let ((?x40785 (* ?x40497 l_0_12_91)))
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x40783 (* ?x39108 l_0_12_177)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x40781 (* ?x39105 l_0_12_176)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x40779 (* ?x39102 l_0_12_175)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x40777 (* ?x39099 l_0_12_156)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x40775 (* ?x39096 l_0_12_155)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x40773 (* ?x39093 l_0_12_154)))
 (let ((?x39377 (* l_0_12_136 l_0_12_136)))
 (let ((?x39375 (* l_0_12_135 l_0_12_135)))
 (let ((?x39373 (* l_0_12_134 l_0_12_134)))
 (let ((?x39371 (* l_0_12_133 l_0_12_133)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x40767 (* ?x39071 l_0_12_114)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x40765 (* ?x39068 l_0_12_113)))
 (let ((?x40770 (- (- (+ (+ (* (* 2.0 l_0_12_109) l_0_12_112) ?x40765) ?x40767) ?x39371) ?x39373)))
 (let ((?x40782 (- (- (+ (+ (+ (- (- ?x40770 ?x39375) ?x39377) ?x40773) ?x40775) ?x40777) ?x40779) ?x40781)))
 (= (- (- (- (- ?x40782 ?x40783) ?x40785) ?x40787) ?x40789) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x40856 (* l_0_12_94 l_0_12_94)))
 (let ((?x40854 (* l_0_12_93 l_0_12_93)))
 (let ((?x40852 (* l_0_12_92 l_0_12_92)))
 (let ((?x40850 (* l_0_12_91 l_0_12_91)))
 (let ((?x40848 (* l_0_12_178 l_0_12_178)))
 (let ((?x40846 (* l_0_12_177 l_0_12_177)))
 (let ((?x40844 (* l_0_12_176 l_0_12_176)))
 (let ((?x40842 (* l_0_12_175 l_0_12_175)))
 (let ((?x40840 (* l_0_12_157 l_0_12_157)))
 (let ((?x40838 (* l_0_12_156 l_0_12_156)))
 (let ((?x40836 (* l_0_12_155 l_0_12_155)))
 (let ((?x40834 (* l_0_12_154 l_0_12_154)))
 (let ((?x40832 (* l_0_12_115 l_0_12_115)))
 (let ((?x40830 (* l_0_12_114 l_0_12_114)))
 (let ((?x40831 (+ (+ (* l_0_12_112 l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x40830)))
 (let ((?x40845 (- (- (+ (+ (+ (+ (+ ?x40831 ?x40832) ?x40834) ?x40836) ?x40838) ?x40840) ?x40842) ?x40844)))
 (= (- (- (- (- (- (- ?x40845 ?x40846) ?x40848) ?x40850) ?x40852) ?x40854) ?x40856) 0.0))))))))))))))))))
(assert
 (let ((?x37756 (* l_0_12_87 l_0_12_87)))
 (let ((?x37754 (* l_0_12_86 l_0_12_86)))
 (let ((?x37744 (* l_0_12_171 l_0_12_171)))
 (let ((?x37742 (* l_0_12_170 l_0_12_170)))
 (let ((?x37740 (* l_0_12_150 l_0_12_150)))
 (let ((?x37738 (* l_0_12_149 l_0_12_149)))
 (let ((?x40877 (- (- (* (- l_0_12_107) l_0_12_107) (* l_0_12_108 l_0_12_108)) ?x37738)))
 (= (+ (+ (+ (+ (- ?x40877 ?x37740) ?x37742) ?x37744) ?x37754) ?x37756) 0.0)))))))))
(assert
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x37911 (* ?x37910 l_0_12_89)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x37908 (* ?x37907 l_0_12_88)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x37887 (* ?x37886 l_0_12_173)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x37884 (* ?x37883 l_0_12_172)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x37881 (* ?x37880 l_0_12_152)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x37878 (* ?x37877 l_0_12_151)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x37870 (* ?x37869 l_0_12_110)))
 (let ((?x40887 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_109) ?x37870) ?x37878) ?x37881) ?x37884)))
 (= (+ (+ (+ ?x40887 ?x37887) ?x37908) ?x37911) 0.0)))))))))))))))))
(assert
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x38043 (* ?x37910 l_0_12_92)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x38041 (* ?x37907 l_0_12_91)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38033 (* ?x37886 l_0_12_176)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38031 (* ?x37883 l_0_12_175)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38029 (* ?x37880 l_0_12_155)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38027 (* ?x37877 l_0_12_154)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x38025 (* ?x37869 l_0_12_113)))
 (let ((?x40902 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_112) ?x38025) ?x38027) ?x38029) ?x38031)))
 (= (+ (+ (+ ?x40902 ?x38033) ?x38041) ?x38043) 0.0)))))))))))))))))
(assert
 (let ((?x37910 (* 2.0 l_0_12_87)))
 (let ((?x38099 (* ?x37910 l_0_12_96)))
 (let ((?x37907 (* 2.0 l_0_12_86)))
 (let ((?x38097 (* ?x37907 l_0_12_95)))
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38079 (* ?x37886 l_0_12_180)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38077 (* ?x37883 l_0_12_179)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38075 (* ?x37880 l_0_12_159)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38073 (* ?x37877 l_0_12_158)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x27328 (* ?x37869 l_0_12_117)))
 (let ((?x40909 (+ (- (- (- (* (* (- 2.0) l_0_12_107) l_0_12_116) ?x27328) ?x38073) ?x38075) ?x38077)))
 (= (+ (+ (+ ?x40909 ?x38079) ?x38097) ?x38099) 0.0)))))))))))))))))
(assert
 (let ((?x37886 (* 2.0 l_0_12_171)))
 (let ((?x38163 (* ?x37886 l_0_12_185)))
 (let ((?x37883 (* 2.0 l_0_12_170)))
 (let ((?x38161 (* ?x37883 l_0_12_184)))
 (let ((?x37880 (* 2.0 l_0_12_150)))
 (let ((?x38155 (* ?x37880 l_0_12_164)))
 (let ((?x37877 (* 2.0 l_0_12_149)))
 (let ((?x38153 (* ?x37877 l_0_12_163)))
 (let ((?x37869 (* 2.0 l_0_12_108)))
 (let ((?x38149 (* ?x37869 l_0_12_122)))
 (let ((?x37867 (* 2.0 l_0_12_107)))
 (let ((?x38147 (* ?x37867 l_0_12_121)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x38145 (* ?x38144 l_0_12_87)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x38142 (* ?x38141 l_0_12_86)))
 (let ((?x40920 (+ (+ (- (- (- (- (+ ?x38142 ?x38145) ?x38147) ?x38149) ?x38153) ?x38155) ?x38161) ?x38163)))
 (= ?x40920 0.0)))))))))))))))))))
(assert
 (let ((?x40748 (* l_0_12_90 l_0_12_90)))
 (let ((?x40746 (* l_0_12_89 l_0_12_89)))
 (let ((?x40744 (* l_0_12_88 l_0_12_88)))
 (let ((?x40742 (* l_0_12_174 l_0_12_174)))
 (let ((?x40740 (* l_0_12_173 l_0_12_173)))
 (let ((?x40738 (* l_0_12_172 l_0_12_172)))
 (let ((?x40736 (* l_0_12_153 l_0_12_153)))
 (let ((?x40734 (* l_0_12_152 l_0_12_152)))
 (let ((?x40732 (* l_0_12_151 l_0_12_151)))
 (let ((?x40727 (* l_0_12_111 l_0_12_111)))
 (let ((?x18991 (- (- (* (- l_0_12_109) l_0_12_109) (* l_0_12_110 l_0_12_110)) ?x40727)))
 (let ((?x40931 (+ (+ (+ (+ (- (- (- ?x18991 ?x40732) ?x40734) ?x40736) ?x40738) ?x40740) ?x40742) ?x40744)))
 (= (+ (+ ?x40931 ?x40746) ?x40748) 0.0))))))))))))))
(assert
 (let ((?x40503 (* 2.0 l_0_12_90)))
 (let ((?x40789 (* ?x40503 l_0_12_93)))
 (let ((?x40500 (* 2.0 l_0_12_89)))
 (let ((?x40787 (* ?x40500 l_0_12_92)))
 (let ((?x40497 (* 2.0 l_0_12_88)))
 (let ((?x40785 (* ?x40497 l_0_12_91)))
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x40783 (* ?x39108 l_0_12_177)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x40781 (* ?x39105 l_0_12_176)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x40779 (* ?x39102 l_0_12_175)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x40777 (* ?x39099 l_0_12_156)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x40775 (* ?x39096 l_0_12_155)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x40773 (* ?x39093 l_0_12_154)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x40767 (* ?x39071 l_0_12_114)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x40765 (* ?x39068 l_0_12_113)))
 (let ((?x40947 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_112) ?x40765) ?x40767) ?x40773) ?x40775)))
 (let ((?x40954 (+ (+ (+ (+ (+ (+ (- ?x40947 ?x40777) ?x40779) ?x40781) ?x40783) ?x40785) ?x40787) ?x40789)))
 (= ?x40954 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40503 (* 2.0 l_0_12_90)))
 (let ((?x40504 (* ?x40503 l_0_12_97)))
 (let ((?x40500 (* 2.0 l_0_12_89)))
 (let ((?x40501 (* ?x40500 l_0_12_96)))
 (let ((?x40497 (* 2.0 l_0_12_88)))
 (let ((?x40498 (* ?x40497 l_0_12_95)))
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x40489 (* ?x39108 l_0_12_181)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x40487 (* ?x39105 l_0_12_180)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x40485 (* ?x39102 l_0_12_179)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x40483 (* ?x39099 l_0_12_160)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x40481 (* ?x39096 l_0_12_159)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x40479 (* ?x39093 l_0_12_158)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x17879 (* ?x39071 l_0_12_118)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x27884 (* ?x39068 l_0_12_117)))
 (let ((?x30446 (- (- (- (- (* (* (- 2.0) l_0_12_109) l_0_12_116) ?x27884) ?x17879) ?x40479) ?x40481)))
 (let ((?x19133 (+ (+ (+ (+ (+ (+ (- ?x30446 ?x40483) ?x40485) ?x40487) ?x40489) ?x40498) ?x40501) ?x40504)))
 (= ?x19133 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39108 (* 2.0 l_0_12_174)))
 (let ((?x39109 (* ?x39108 l_0_12_186)))
 (let ((?x39105 (* 2.0 l_0_12_173)))
 (let ((?x39106 (* ?x39105 l_0_12_185)))
 (let ((?x39102 (* 2.0 l_0_12_172)))
 (let ((?x39103 (* ?x39102 l_0_12_184)))
 (let ((?x39099 (* 2.0 l_0_12_153)))
 (let ((?x39100 (* ?x39099 l_0_12_165)))
 (let ((?x39096 (* 2.0 l_0_12_152)))
 (let ((?x39097 (* ?x39096 l_0_12_164)))
 (let ((?x39093 (* 2.0 l_0_12_151)))
 (let ((?x39094 (* ?x39093 l_0_12_163)))
 (let ((?x39071 (* 2.0 l_0_12_111)))
 (let ((?x39072 (* ?x39071 l_0_12_123)))
 (let ((?x39068 (* 2.0 l_0_12_110)))
 (let ((?x39069 (* ?x39068 l_0_12_122)))
 (let ((?x39065 (* 2.0 l_0_12_109)))
 (let ((?x39066 (* ?x39065 l_0_12_121)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39063 (* ?x39062 l_0_12_90)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39060 (* ?x38144 l_0_12_89)))
 (let ((?x19167 (- (- (+ (+ (* (* 2.0 l_0_12_100) l_0_12_88) ?x39060) ?x39063) ?x39066) ?x39069)))
 (let ((?x40968 (+ (+ (+ (- (- (- (- ?x19167 ?x39072) ?x39094) ?x39097) ?x39100) ?x39103) ?x39106) ?x39109)))
 (= ?x40968 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40856 (* l_0_12_94 l_0_12_94)))
 (let ((?x40854 (* l_0_12_93 l_0_12_93)))
 (let ((?x40852 (* l_0_12_92 l_0_12_92)))
 (let ((?x40850 (* l_0_12_91 l_0_12_91)))
 (let ((?x40848 (* l_0_12_178 l_0_12_178)))
 (let ((?x40846 (* l_0_12_177 l_0_12_177)))
 (let ((?x40844 (* l_0_12_176 l_0_12_176)))
 (let ((?x40842 (* l_0_12_175 l_0_12_175)))
 (let ((?x40840 (* l_0_12_157 l_0_12_157)))
 (let ((?x40838 (* l_0_12_156 l_0_12_156)))
 (let ((?x40836 (* l_0_12_155 l_0_12_155)))
 (let ((?x40834 (* l_0_12_154 l_0_12_154)))
 (let ((?x40832 (* l_0_12_115 l_0_12_115)))
 (let ((?x40830 (* l_0_12_114 l_0_12_114)))
 (let ((?x30618 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x40830)))
 (let ((?x40970 (+ (+ (- (- (- (- (- ?x30618 ?x40832) ?x40834) ?x40836) ?x40838) ?x40840) ?x40842) ?x40844)))
 (= (+ (+ (+ (+ (+ (+ ?x40970 ?x40846) ?x40848) ?x40850) ?x40852) ?x40854) ?x40856) 0.0))))))))))))))))))
(assert
 (let ((?x40588 (* (* 2.0 l_0_12_94) l_0_12_98)))
 (let ((?x40585 (* (* 2.0 l_0_12_93) l_0_12_97)))
 (let ((?x40582 (* (* 2.0 l_0_12_92) l_0_12_96)))
 (let ((?x40579 (* (* 2.0 l_0_12_91) l_0_12_95)))
 (let ((?x39400 (* 2.0 l_0_12_178)))
 (let ((?x40568 (* ?x39400 l_0_12_182)))
 (let ((?x39397 (* 2.0 l_0_12_177)))
 (let ((?x40566 (* ?x39397 l_0_12_181)))
 (let ((?x39394 (* 2.0 l_0_12_176)))
 (let ((?x40564 (* ?x39394 l_0_12_180)))
 (let ((?x39391 (* 2.0 l_0_12_175)))
 (let ((?x40562 (* ?x39391 l_0_12_179)))
 (let ((?x39388 (* 2.0 l_0_12_157)))
 (let ((?x40560 (* ?x39388 l_0_12_161)))
 (let ((?x39385 (* 2.0 l_0_12_156)))
 (let ((?x40558 (* ?x39385 l_0_12_160)))
 (let ((?x39382 (* 2.0 l_0_12_155)))
 (let ((?x40556 (* ?x39382 l_0_12_159)))
 (let ((?x39379 (* 2.0 l_0_12_154)))
 (let ((?x40554 (* ?x39379 l_0_12_158)))
 (let ((?x39368 (* 2.0 l_0_12_115)))
 (let ((?x40552 (* ?x39368 l_0_12_119)))
 (let ((?x39365 (* 2.0 l_0_12_114)))
 (let ((?x40550 (* ?x39365 l_0_12_118)))
 (let ((?x39362 (* 2.0 l_0_12_113)))
 (let ((?x30206 (* ?x39362 l_0_12_117)))
 (let ((?x40992 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_116) ?x30206) ?x40550) ?x40552) ?x40554)))
 (let ((?x40999 (+ (+ (+ (+ (- (- (- ?x40992 ?x40556) ?x40558) ?x40560) ?x40562) ?x40564) ?x40566) ?x40568)))
 (= (+ (+ (+ (+ ?x40999 ?x40579) ?x40582) ?x40585) ?x40588) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39400 (* 2.0 l_0_12_178)))
 (let ((?x39401 (* ?x39400 l_0_12_187)))
 (let ((?x39397 (* 2.0 l_0_12_177)))
 (let ((?x39398 (* ?x39397 l_0_12_186)))
 (let ((?x39394 (* 2.0 l_0_12_176)))
 (let ((?x39395 (* ?x39394 l_0_12_185)))
 (let ((?x39391 (* 2.0 l_0_12_175)))
 (let ((?x39392 (* ?x39391 l_0_12_184)))
 (let ((?x39388 (* 2.0 l_0_12_157)))
 (let ((?x39389 (* ?x39388 l_0_12_166)))
 (let ((?x39385 (* 2.0 l_0_12_156)))
 (let ((?x39386 (* ?x39385 l_0_12_165)))
 (let ((?x39382 (* 2.0 l_0_12_155)))
 (let ((?x39383 (* ?x39382 l_0_12_164)))
 (let ((?x39379 (* 2.0 l_0_12_154)))
 (let ((?x39380 (* ?x39379 l_0_12_163)))
 (let ((?x39368 (* 2.0 l_0_12_115)))
 (let ((?x39369 (* ?x39368 l_0_12_124)))
 (let ((?x39365 (* 2.0 l_0_12_114)))
 (let ((?x39366 (* ?x39365 l_0_12_123)))
 (let ((?x39362 (* 2.0 l_0_12_113)))
 (let ((?x39363 (* ?x39362 l_0_12_122)))
 (let ((?x39359 (* 2.0 l_0_12_112)))
 (let ((?x39360 (* ?x39359 l_0_12_121)))
 (let ((?x39356 (* 2.0 l_0_12_103)))
 (let ((?x39357 (* ?x39356 l_0_12_94)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39354 (* ?x39062 l_0_12_93)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39343 (* ?x38144 l_0_12_92)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x15475 (* ?x38141 l_0_12_91)))
 (let ((?x19385 (- (- (- (- (+ (+ (+ ?x15475 ?x39343) ?x39354) ?x39357) ?x39360) ?x39363) ?x39366) ?x39369)))
 (let ((?x41025 (+ (+ (+ (- (- (- (- ?x19385 ?x39380) ?x39383) ?x39386) ?x39389) ?x39392) ?x39395) ?x39398)))
 (= (+ ?x41025 ?x39401) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40680 (* l_0_12_99 l_0_12_99)))
 (let ((?x40678 (* l_0_12_98 l_0_12_98)))
 (let ((?x40676 (* l_0_12_97 l_0_12_97)))
 (let ((?x40674 (* l_0_12_96 l_0_12_96)))
 (let ((?x40672 (* l_0_12_95 l_0_12_95)))
 (let ((?x40662 (* l_0_12_183 l_0_12_183)))
 (let ((?x40660 (* l_0_12_182 l_0_12_182)))
 (let ((?x40658 (* l_0_12_181 l_0_12_181)))
 (let ((?x40656 (* l_0_12_180 l_0_12_180)))
 (let ((?x40654 (* l_0_12_179 l_0_12_179)))
 (let ((?x40652 (* l_0_12_162 l_0_12_162)))
 (let ((?x40650 (* l_0_12_161 l_0_12_161)))
 (let ((?x40648 (* l_0_12_160 l_0_12_160)))
 (let ((?x40646 (* l_0_12_159 l_0_12_159)))
 (let ((?x40644 (* l_0_12_158 l_0_12_158)))
 (let ((?x40642 (* l_0_12_120 l_0_12_120)))
 (let ((?x40640 (* l_0_12_119 l_0_12_119)))
 (let ((?x40638 (* l_0_12_118 l_0_12_118)))
 (let ((?x41035 (- (- (* (- l_0_12_116) l_0_12_116) (* l_0_12_117 l_0_12_117)) ?x40638)))
 (let ((?x41042 (- (- (- (- (- (- (- ?x41035 ?x40640) ?x40642) ?x40644) ?x40646) ?x40648) ?x40650) ?x40652)))
 (let ((?x41049 (+ (+ (+ (+ (+ (+ (+ ?x41042 ?x40654) ?x40656) ?x40658) ?x40660) ?x40662) ?x40672) ?x40674)))
 (= (+ (+ (+ ?x41049 ?x40676) ?x40678) ?x40680) 0.0)))))))))))))))))))))))
(assert
 (let ((?x39554 (* (* 2.0 l_0_12_183) l_0_12_188)))
 (let ((?x39551 (* (* 2.0 l_0_12_182) l_0_12_187)))
 (let ((?x39548 (* (* 2.0 l_0_12_181) l_0_12_186)))
 (let ((?x39545 (* (* 2.0 l_0_12_180) l_0_12_185)))
 (let ((?x39542 (* (* 2.0 l_0_12_179) l_0_12_184)))
 (let ((?x39539 (* (* 2.0 l_0_12_162) l_0_12_167)))
 (let ((?x39536 (* (* 2.0 l_0_12_161) l_0_12_166)))
 (let ((?x39533 (* (* 2.0 l_0_12_160) l_0_12_165)))
 (let ((?x39530 (* (* 2.0 l_0_12_159) l_0_12_164)))
 (let ((?x39527 (* (* 2.0 l_0_12_158) l_0_12_163)))
 (let ((?x39515 (* (* 2.0 l_0_12_120) l_0_12_125)))
 (let ((?x39511 (* (* 2.0 l_0_12_119) l_0_12_124)))
 (let ((?x39508 (* (* 2.0 l_0_12_118) l_0_12_123)))
 (let ((?x39505 (* (* 2.0 l_0_12_117) l_0_12_122)))
 (let ((?x39502 (* (* 2.0 l_0_12_116) l_0_12_121)))
 (let ((?x39498 (* (* 2.0 l_0_12_104) l_0_12_99)))
 (let ((?x39356 (* 2.0 l_0_12_103)))
 (let ((?x39495 (* ?x39356 l_0_12_98)))
 (let ((?x39062 (* 2.0 l_0_12_102)))
 (let ((?x39493 (* ?x39062 l_0_12_97)))
 (let ((?x38144 (* 2.0 l_0_12_101)))
 (let ((?x39491 (* ?x38144 l_0_12_96)))
 (let ((?x38141 (* 2.0 l_0_12_100)))
 (let ((?x29412 (* ?x38141 l_0_12_95)))
 (let ((?x19613 (- (- (- (+ (+ (+ (+ ?x29412 ?x39491) ?x39493) ?x39495) ?x39498) ?x39502) ?x39505) ?x39508)))
 (let ((?x19604 (- (- (- (- (- (- (- ?x19613 ?x39511) ?x39515) ?x39527) ?x39530) ?x39533) ?x39536) ?x39539)))
 (= (+ (+ (+ (+ (+ ?x19604 ?x39542) ?x39545) ?x39548) ?x39551) ?x39554) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x39744 (* l_0_12_189 l_0_12_189)))
 (let ((?x39742 (* l_0_12_188 l_0_12_188)))
 (let ((?x39740 (* l_0_12_187 l_0_12_187)))
 (let ((?x39738 (* l_0_12_186 l_0_12_186)))
 (let ((?x39736 (* l_0_12_185 l_0_12_185)))
 (let ((?x39734 (* l_0_12_184 l_0_12_184)))
 (let ((?x39730 (* l_0_12_168 l_0_12_168)))
 (let ((?x39728 (* l_0_12_167 l_0_12_167)))
 (let ((?x39726 (* l_0_12_166 l_0_12_166)))
 (let ((?x39724 (* l_0_12_165 l_0_12_165)))
 (let ((?x39722 (* l_0_12_164 l_0_12_164)))
 (let ((?x39720 (* l_0_12_163 l_0_12_163)))
 (let ((?x39713 (* l_0_12_126 l_0_12_126)))
 (let ((?x39711 (* l_0_12_125 l_0_12_125)))
 (let ((?x39709 (* l_0_12_124 l_0_12_124)))
 (let ((?x39707 (* l_0_12_123 l_0_12_123)))
 (let ((?x39705 (* l_0_12_122 l_0_12_122)))
 (let ((?x39703 (* l_0_12_121 l_0_12_121)))
 (let ((?x39701 (* l_0_12_105 l_0_12_105)))
 (let ((?x39699 (* l_0_12_104 l_0_12_104)))
 (let ((?x39697 (* l_0_12_103 l_0_12_103)))
 (let ((?x39695 (* l_0_12_102 l_0_12_102)))
 (let ((?x19721 (+ (+ (* l_0_12_100 l_0_12_100) (* l_0_12_101 l_0_12_101)) ?x39695)))
 (let ((?x41073 (- (- (- (- (+ (+ (+ ?x19721 ?x39697) ?x39699) ?x39701) ?x39703) ?x39705) ?x39707) ?x39709)))
 (let ((?x41080 (- (- (- (- (- (- (- ?x41073 ?x39711) ?x39713) ?x39720) ?x39722) ?x39724) ?x39726) ?x39728)))
 (let ((?x41087 (+ (+ (+ (+ (+ (+ (- ?x41080 ?x39730) ?x39734) ?x39736) ?x39738) ?x39740) ?x39742) ?x39744)))
 (= ?x41087 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x38990 (* l_0_12_132 l_0_12_132)))
 (let ((?x19823 (- (- (* (- l_0_12_130) l_0_12_130) (* l_0_12_131 l_0_12_131)) ?x38990)))
 (= ?x19823 0.0))))
(assert
 (>= l_0_12_1 0.0))
(assert
 (>= l_0_12_3 0.0))
(assert
 (>= l_0_12_6 0.0))
(assert
 (>= l_0_12_10 0.0))
(assert
 (>= l_0_12_15 0.0))
(assert
 (>= l_0_12_21 0.0))
(assert
 (>= l_0_12_22 0.0))
(assert
 (>= l_0_12_24 0.0))
(assert
 (>= l_0_12_27 0.0))
(assert
 (>= l_0_12_31 0.0))
(assert
 (>= l_0_12_36 0.0))
(assert
 (>= l_0_12_42 0.0))
(assert
 (>= l_0_12_43 0.0))
(assert
 (>= l_0_12_45 0.0))
(assert
 (>= l_0_12_48 0.0))
(assert
 (>= l_0_12_52 0.0))
(assert
 (>= l_0_12_57 0.0))
(assert
 (>= l_0_12_63 0.0))
(assert
 (>= l_0_12_64 0.0))
(assert
 (>= l_0_12_66 0.0))
(assert
 (>= l_0_12_69 0.0))
(assert
 (>= l_0_12_73 0.0))
(assert
 (>= l_0_12_78 0.0))
(assert
 (>= l_0_12_84 0.0))
(assert
 (>= l_0_12_85 0.0))
(assert
 (>= l_0_12_87 0.0))
(assert
 (>= l_0_12_90 0.0))
(assert
 (>= l_0_12_94 0.0))
(assert
 (>= l_0_12_99 0.0))
(assert
 (>= l_0_12_105 0.0))
(assert
 (>= l_0_12_106 0.0))
(assert
 (>= l_0_12_108 0.0))
(assert
 (>= l_0_12_111 0.0))
(assert
 (>= l_0_12_115 0.0))
(assert
 (>= l_0_12_120 0.0))
(assert
 (>= l_0_12_126 0.0))
(assert
 (>= l_0_12_127 0.0))
(assert
 (>= l_0_12_129 0.0))
(assert
 (>= l_0_12_132 0.0))
(assert
 (>= l_0_12_136 0.0))
(assert
 (>= l_0_12_141 0.0))
(assert
 (>= l_0_12_147 0.0))
(assert
 (>= l_0_12_148 0.0))
(assert
 (>= l_0_12_150 0.0))
(assert
 (>= l_0_12_153 0.0))
(assert
 (>= l_0_12_157 0.0))
(assert
 (>= l_0_12_162 0.0))
(assert
 (>= l_0_12_168 0.0))
(assert
 (>= l_0_12_169 0.0))
(assert
 (>= l_0_12_171 0.0))
(assert
 (>= l_0_12_174 0.0))
(assert
 (>= l_0_12_178 0.0))
(assert
 (>= l_0_12_183 0.0))
(assert
 (>= l_0_12_189 0.0))
(assert
 (>= l_0_12_190 0.0))
(assert
 (>= l_0_12_192 0.0))
(assert
 (>= l_0_12_195 0.0))
(assert
 (>= l_0_12_199 0.0))
(assert
 (>= l_0_12_204 0.0))
(assert
 (>= l_0_12_210 0.0))
(assert
 (>= l_0_12_211 0.0))
(assert
 (>= l_0_12_213 0.0))
(assert
 (>= l_0_12_216 0.0))
(assert
 (>= l_0_12_220 0.0))
(assert
 (>= l_0_12_225 0.0))
(assert
 (>= l_0_12_231 0.0))
(assert
 (>= l_0_12_232 0.0))
(assert
 (>= l_0_12_234 0.0))
(assert
 (>= l_0_12_237 0.0))
(assert
 (>= l_0_12_241 0.0))
(assert
 (>= l_0_12_246 0.0))
(assert
 (>= l_0_12_252 0.0))
(assert
 (>= l_0_12_253 0.0))
(assert
 (>= l_0_12_255 0.0))
(assert
 (>= l_0_12_258 0.0))
(assert
 (>= l_0_12_262 0.0))
(assert
 (>= l_0_12_267 0.0))
(assert
 (>= l_0_12_273 0.0))
(assert
 (>= l_0_12_274 0.0))
(assert
 (>= l_0_12_276 0.0))
(assert
 (>= l_0_12_279 0.0))
(assert
 (>= l_0_12_283 0.0))
(assert
 (>= l_0_12_288 0.0))
(assert
 (>= l_0_12_294 0.0))
(assert
 (>= l_0_12_295 0.0))
(assert
 (>= l_0_12_297 0.0))
(assert
 (>= l_0_12_300 0.0))
(assert
 (>= l_0_12_304 0.0))
(assert
 (>= l_0_12_309 0.0))
(assert
 (>= l_0_12_315 0.0))
(assert
 (let ((?x41179 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x41176 (* l_0_13_190 l_0_13_190)))
 (let ((?x41183 (- (- (- (+ _a_12_ (* 6.0 (* l_0_13_1 l_0_13_1))) ?x41176) ?x41179) (* (* 1.0 l_0_13_43) l_0_13_43))))
 (= (- (+ ?x41183 (* 1.0 (* l_0_13_64 l_0_13_64))) 12.0) 0.0)))))
(assert
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x41207 (* ?x41206 l_0_13_65)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x41204 (* ?x41203 l_0_13_44)))
 (let ((?x41192 (* l_0_13_22 l_0_13_22)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x19923 (* ?x19929 l_0_13_23)))
 (let ((?x41173 (* l_0_13_1 l_0_13_1)))
 (let ((?x19921 (- (- (+ _a_13_ (* (* 12.0 l_0_13_1) l_0_13_2)) ?x41173) (* (* 2.0 l_0_13_190) l_0_13_191))))
 (= (+ (- (+ (- ?x19921 ?x19923) ?x41192) ?x41204) ?x41207) 0.0)))))))))))
(assert
 (let ((?x41184 (* l_0_13_64 l_0_13_64)))
 (let ((?x41247 (* 3.0 ?x41184)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x41245 (* ?x41206 l_0_13_79)))
 (let ((?x41243 (* (* 3.0 l_0_13_43) l_0_13_43)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x41240 (* ?x41203 l_0_13_58)))
 (let ((?x41179 (* (* 6.0 l_0_13_22) l_0_13_22)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x41237 (* ?x19929 l_0_13_37)))
 (let ((?x41233 (* l_0_13_127 l_0_13_127)))
 (let ((?x41173 (* l_0_13_1 l_0_13_1)))
 (let ((?x41174 (* 6.0 ?x41173)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x41231 (* ?x30708 l_0_13_16)))
 (let ((?x41238 (- (- (+ (+ ?x41231 ?x41174) ?x41233) (* (* 2.0 l_0_13_190) l_0_13_205)) ?x41237)))
 (= (- (+ (+ (- (- (- ?x41238 ?x41179) ?x41240) ?x41243) ?x41245) ?x41247) 6.0) 0.0))))))))))))))))))
(assert
 (let ((?x41290 (* l_0_13_3 l_0_13_3)))
 (let ((?x41291 (* 6.0 ?x41290)))
 (let ((?x41288 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x41285 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x41278 (* l_0_13_2 l_0_13_2)))
 (let ((?x41279 (* 6.0 ?x41278)))
 (let ((?x41276 (* l_0_13_192 l_0_13_192)))
 (let ((?x41277 (- (- (* (* (- 2.0) l_0_13_1) l_0_13_2) (* l_0_13_191 l_0_13_191)) ?x41276)))
 (let ((?x41289 (- (- (+ (+ ?x41277 ?x41279) (* (* 2.0 l_0_13_22) l_0_13_23)) ?x41285) ?x41288)))
 (let ((?x41298 (- (- (+ ?x41289 ?x41291) (* (* 1.0 l_0_13_44) l_0_13_44)) (* (* 1.0 l_0_13_45) l_0_13_45))))
 (let ((?x41304 (+ (+ ?x41298 (* 1.0 (* l_0_13_65 l_0_13_65))) (* 1.0 (* l_0_13_66 l_0_13_66)))))
 (= ?x41304 0.0)))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41363 (* ?x41362 l_0_13_68)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41360 (* ?x41359 l_0_13_67)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41357 (* ?x41356 l_0_13_47)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41354 (* ?x41353 l_0_13_46)))
 (let ((?x41350 (* 12.0 l_0_13_3)))
 (let ((?x41351 (* ?x41350 l_0_13_5)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41348 (* ?x41347 l_0_13_26)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41345 (* ?x41344 l_0_13_25)))
 (let ((?x41339 (* 12.0 l_0_13_2)))
 (let ((?x41340 (* ?x41339 l_0_13_4)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x41331 (* ?x41330 l_0_13_128)))
 (let ((?x41335 (- (- (* (* (- 2.0) l_0_13_1) l_0_13_4) ?x41331) (* (* 2.0 l_0_13_191) l_0_13_193))))
 (let ((?x41343 (+ (+ (- ?x41335 (* (* 2.0 l_0_13_192) l_0_13_194)) ?x41340) (* (* 2.0 l_0_13_22) l_0_13_25))))
 (let ((?x41364 (+ (+ (- (- (+ (- (- ?x41343 ?x41345) ?x41348) ?x41351) ?x41354) ?x41357) ?x41360) ?x41363)))
 (= ?x41364 0.0)))))))))))))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x41448 (* ?x41447 l_0_13_86)))
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41445 (* ?x41362 l_0_13_71)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41443 (* ?x41359 l_0_13_70)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41441 (* ?x41356 l_0_13_50)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41439 (* ?x41353 l_0_13_49)))
 (let ((?x41350 (* 12.0 l_0_13_3)))
 (let ((?x41437 (* ?x41350 l_0_13_8)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41435 (* ?x41347 l_0_13_29)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41433 (* ?x41344 l_0_13_28)))
 (let ((?x41339 (* 12.0 l_0_13_2)))
 (let ((?x41429 (* ?x41339 l_0_13_7)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x41423 (* ?x41422 l_0_13_170)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x41420 (* ?x41419 l_0_13_149)))
 (let ((?x41418 (+ (* (* (- 2.0) l_0_13_1) l_0_13_7) (* (* 2.0 l_0_13_106) l_0_13_107))))
 (let ((?x41428 (- (- (+ (- ?x41418 ?x41420) ?x41423) (* (* 2.0 l_0_13_191) l_0_13_196)) (* (* 2.0 l_0_13_192) l_0_13_197))))
 (let ((?x41436 (- (- (+ (+ ?x41428 ?x41429) (* (* 2.0 l_0_13_22) l_0_13_28)) ?x41433) ?x41435)))
 (= (- (+ (+ (- (- (+ ?x41436 ?x41437) ?x41439) ?x41441) ?x41443) ?x41445) ?x41448) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41543 (* ?x41362 l_0_13_75)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41541 (* ?x41359 l_0_13_74)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x41207 (* ?x41206 l_0_13_65)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41538 (* ?x41356 l_0_13_54)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41536 (* ?x41353 l_0_13_53)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x41204 (* ?x41203 l_0_13_44)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41533 (* ?x41347 l_0_13_33)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41531 (* ?x41344 l_0_13_32)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x41523 (* ?x41522 l_0_13_3)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x41520 (* ?x41519 l_0_13_2)))
 (let ((?x41526 (- (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_11) ?x41520) ?x41523) (* (* 2.0 l_0_13_191) l_0_13_200))))
 (let ((?x41530 (+ (- ?x41526 (* (* 2.0 l_0_13_192) l_0_13_201)) (* (* 2.0 l_0_13_22) l_0_13_32))))
 (let ((?x41542 (+ (- (- (- (+ (- (- ?x41530 ?x41531) ?x41533) ?x41204) ?x41536) ?x41538) ?x41207) ?x41541)))
 (= (+ ?x41542 ?x41543) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41623 (* ?x41362 l_0_13_80)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41621 (* ?x41359 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x41619 (* ?x41618 l_0_13_65)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41616 (* ?x41356 l_0_13_59)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41614 (* ?x41353 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x41612 (* ?x41611 l_0_13_44)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41609 (* ?x41347 l_0_13_38)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41607 (* ?x41344 l_0_13_37)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x19923 (* ?x19929 l_0_13_23)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x41598 (* ?x41597 l_0_13_3)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x41595 (* ?x41594 l_0_13_2)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x41331 (* ?x41330 l_0_13_128)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x19841 (* ?x30708 l_0_13_2)))
 (let ((?x41599 (+ (+ (+ (+ (* (* (- 2.0) l_0_13_1) l_0_13_16) ?x19841) ?x41331) ?x41595) ?x41598)))
 (let ((?x41603 (- (- ?x41599 (* (* 2.0 l_0_13_191) l_0_13_205)) (* (* 2.0 l_0_13_192) l_0_13_206))))
 (let ((?x41610 (- (- (+ (- ?x41603 ?x19923) (* (* 2.0 l_0_13_22) l_0_13_37)) ?x41607) ?x41609)))
 (= (+ (+ (+ (- (- (- ?x41610 ?x41612) ?x41614) ?x41616) ?x41619) ?x41621) ?x41623) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x41290 (* l_0_13_3 l_0_13_3)))
 (let ((?x19958 (* l_0_13_24 l_0_13_24)))
 (let ((?x41672 (- (+ (+ (* (- l_0_13_2) l_0_13_2) (* l_0_13_23 l_0_13_23)) ?x19958) ?x41290)))
 (= ?x41672 0.0)))))
(assert
 (let ((?x41687 (- (- (* (- l_0_13_128) l_0_13_128) (* l_0_13_129 l_0_13_129)) (* (* 2.0 l_0_13_2) l_0_13_4))))
 (let ((?x41693 (+ (+ ?x41687 (* (* 2.0 l_0_13_23) l_0_13_25)) (* (* 2.0 l_0_13_24) l_0_13_26))))
 (= (- ?x41693 (* (* 2.0 l_0_13_3) l_0_13_5)) 0.0))))
(assert
 (let ((?x41742 (* l_0_13_87 l_0_13_87)))
 (let ((?x41740 (* l_0_13_86 l_0_13_86)))
 (let ((?x41730 (* l_0_13_171 l_0_13_171)))
 (let ((?x41728 (* l_0_13_170 l_0_13_170)))
 (let ((?x41726 (* l_0_13_150 l_0_13_150)))
 (let ((?x41724 (* l_0_13_149 l_0_13_149)))
 (let ((?x41725 (- (+ (* l_0_13_107 l_0_13_107) (* l_0_13_108 l_0_13_108)) ?x41724)))
 (let ((?x41733 (- (+ (+ (- ?x41725 ?x41726) ?x41728) ?x41730) (* (* 2.0 l_0_13_2) l_0_13_7))))
 (let ((?x41737 (+ (+ ?x41733 (* (* 2.0 l_0_13_23) l_0_13_28)) (* (* 2.0 l_0_13_24) l_0_13_29))))
 (= (- (- (- ?x41737 (* (* 2.0 l_0_13_3) l_0_13_8)) ?x41740) ?x41742) 0.0)))))))))))
(assert
 (let ((?x41302 (* l_0_13_66 l_0_13_66)))
 (let ((?x41299 (* l_0_13_65 l_0_13_65)))
 (let ((?x19967 (* l_0_13_45 l_0_13_45)))
 (let ((?x41323 (* l_0_13_44 l_0_13_44)))
 (let ((?x41771 (- (* (* (- 2.0) l_0_13_11) l_0_13_2) (* (* 2.0 l_0_13_12) l_0_13_3))))
 (let ((?x41775 (+ (+ ?x41771 (* (* 2.0 l_0_13_23) l_0_13_32)) (* (* 2.0 l_0_13_24) l_0_13_33))))
 (= (- (- (+ (+ ?x41775 ?x41323) ?x19967) ?x41299) ?x41302) 0.0))))))))
(assert
 (let ((?x41302 (* l_0_13_66 l_0_13_66)))
 (let ((?x41816 (* 3.0 ?x41302)))
 (let ((?x41299 (* l_0_13_65 l_0_13_65)))
 (let ((?x41814 (* 3.0 ?x41299)))
 (let ((?x41812 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (let ((?x41290 (* l_0_13_3 l_0_13_3)))
 (let ((?x41291 (* 6.0 ?x41290)))
 (let ((?x41288 (* (* 6.0 l_0_13_24) l_0_13_24)))
 (let ((?x41285 (* (* 6.0 l_0_13_23) l_0_13_23)))
 (let ((?x41278 (* l_0_13_2 l_0_13_2)))
 (let ((?x41279 (* 6.0 ?x41278)))
 (let ((?x41796 (- (+ (* l_0_13_128 l_0_13_128) (* l_0_13_129 l_0_13_129)) (* (* 2.0 l_0_13_16) l_0_13_2))))
 (let ((?x41802 (+ (+ (- ?x41796 (* (* 2.0 l_0_13_17) l_0_13_3)) ?x41279) (* (* 2.0 l_0_13_23) l_0_13_37))))
 (let ((?x41807 (+ (- (+ (- ?x41802 ?x41285) (* (* 2.0 l_0_13_24) l_0_13_38)) ?x41288) ?x41291)))
 (let ((?x41817 (+ (+ (- (- ?x41807 (* (* 3.0 l_0_13_44) l_0_13_44)) ?x41812) ?x41814) ?x41816)))
 (= ?x41817 0.0)))))))))))))))))
(assert
 (let ((?x41862 (* l_0_13_6 l_0_13_6)))
 (let ((?x41860 (* l_0_13_5 l_0_13_5)))
 (let ((?x41858 (* l_0_13_4 l_0_13_4)))
 (let ((?x41856 (* l_0_13_27 l_0_13_27)))
 (let ((?x41854 (* l_0_13_26 l_0_13_26)))
 (let ((?x41852 (* l_0_13_25 l_0_13_25)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x41850 (* ?x41849 l_0_13_131)))
 (let ((?x41857 (+ (+ (+ (- (* (* (- 2.0) l_0_13_128) l_0_13_130) ?x41850) ?x41852) ?x41854) ?x41856)))
 (= (- (- (- ?x41857 ?x41858) ?x41860) ?x41862) 0.0)))))))))))
(assert
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x41926 (* ?x41925 l_0_13_89)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x41923 (* ?x41922 l_0_13_88)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x41902 (* ?x41901 l_0_13_173)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x41899 (* ?x41898 l_0_13_172)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x41896 (* ?x41895 l_0_13_152)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x41893 (* ?x41892 l_0_13_151)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x41890 (* ?x41849 l_0_13_134)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x41888 (* ?x41887 l_0_13_133)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x41885 (* ?x41884 l_0_13_110)))
 (let ((?x41894 (- (- (- (+ (* (* 2.0 l_0_13_107) l_0_13_109) ?x41885) ?x41888) ?x41890) ?x41893)))
 (let ((?x41906 (+ (+ (+ (- ?x41894 ?x41896) ?x41899) ?x41902) (* (* 2.0 l_0_13_25) l_0_13_28))))
 (let ((?x41912 (+ (+ ?x41906 (* (* 2.0 l_0_13_26) l_0_13_29)) (* (* 2.0 l_0_13_27) l_0_13_30))))
 (let ((?x41918 (- (- ?x41912 (* (* 2.0 l_0_13_4) l_0_13_7)) (* (* 2.0 l_0_13_5) l_0_13_8))))
 (= (- (- (- ?x41918 (* (* 2.0 l_0_13_6) l_0_13_9)) ?x41923) ?x41926) 0.0))))))))))))))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41363 (* ?x41362 l_0_13_68)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41360 (* ?x41359 l_0_13_67)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41357 (* ?x41356 l_0_13_47)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41354 (* ?x41353 l_0_13_46)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x41977 (* ?x41849 l_0_13_138)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x41975 (* ?x41887 l_0_13_137)))
 (let ((?x41974 (- (* (* (- 2.0) l_0_13_11) l_0_13_4) (* (* 2.0 l_0_13_12) l_0_13_5))))
 (let ((?x41983 (+ (- (- (- ?x41974 ?x41975) ?x41977) (* (* 2.0 l_0_13_13) l_0_13_6)) (* (* 2.0 l_0_13_25) l_0_13_32))))
 (let ((?x41987 (+ (+ ?x41983 (* (* 2.0 l_0_13_26) l_0_13_33)) (* (* 2.0 l_0_13_27) l_0_13_34))))
 (= (- (- (+ (+ ?x41987 ?x41354) ?x41357) ?x41360) ?x41363) 0.0)))))))))))))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42040 (* ?x42039 l_0_13_68)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42037 (* ?x42036 l_0_13_67)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42034 (* ?x42033 l_0_13_47)))
 (let ((?x41350 (* 12.0 l_0_13_3)))
 (let ((?x41351 (* ?x41350 l_0_13_5)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41348 (* ?x41347 l_0_13_26)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41345 (* ?x41344 l_0_13_25)))
 (let ((?x41339 (* 12.0 l_0_13_2)))
 (let ((?x41340 (* ?x41339 l_0_13_4)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x42011 (* ?x41849 l_0_13_143)))
 (let ((?x41850 (* ?x41849 l_0_13_131)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x42008 (* ?x41887 l_0_13_142)))
 (let ((?x42014 (- (- (+ (- (* ?x41887 l_0_13_130) ?x42008) ?x41850) ?x42011) (* (* 2.0 l_0_13_16) l_0_13_4))))
 (let ((?x42019 (- (- ?x42014 (* (* 2.0 l_0_13_17) l_0_13_5)) (* (* 2.0 l_0_13_18) l_0_13_6))))
 (let ((?x42024 (+ (- (- (+ ?x42019 ?x41340) ?x41345) ?x41348) (* (* 2.0 l_0_13_25) l_0_13_37))))
 (let ((?x42028 (+ (+ ?x42024 (* (* 2.0 l_0_13_26) l_0_13_38)) (* (* 2.0 l_0_13_27) l_0_13_39))))
 (let ((?x42038 (+ (- (- (+ ?x42028 ?x41351) (* (* 6.0 l_0_13_44) l_0_13_46)) ?x42034) ?x42037)))
 (= (+ ?x42038 ?x42040) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x42105 (* l_0_13_9 l_0_13_9)))
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x42103 (* ?x41925 l_0_13_92)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x42101 (* ?x41922 l_0_13_91)))
 (let ((?x42099 (* l_0_13_8 l_0_13_8)))
 (let ((?x42097 (* l_0_13_7 l_0_13_7)))
 (let ((?x42095 (* l_0_13_31 l_0_13_31)))
 (let ((?x42093 (* l_0_13_30 l_0_13_30)))
 (let ((?x42091 (* l_0_13_29 l_0_13_29)))
 (let ((?x42089 (* l_0_13_28 l_0_13_28)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42087 (* ?x41901 l_0_13_176)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42085 (* ?x41898 l_0_13_175)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42083 (* ?x41895 l_0_13_155)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42081 (* ?x41892 l_0_13_154)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42079 (* ?x41884 l_0_13_113)))
 (let ((?x42078 (+ (* (- l_0_13_10) l_0_13_10) (* (* 2.0 l_0_13_107) l_0_13_112))))
 (let ((?x42092 (+ (+ (+ (+ (- (- (+ ?x42078 ?x42079) ?x42081) ?x42083) ?x42085) ?x42087) ?x42089) ?x42091)))
 (let ((?x42106 (- (- (- (- (- (+ (+ ?x42092 ?x42093) ?x42095) ?x42097) ?x42099) ?x42101) ?x42103) ?x42105)))
 (= ?x42106 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x42165 (* ?x41925 l_0_13_96)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x42163 (* ?x41922 l_0_13_95)))
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41445 (* ?x41362 l_0_13_71)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41443 (* ?x41359 l_0_13_70)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41441 (* ?x41356 l_0_13_50)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41439 (* ?x41353 l_0_13_49)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42145 (* ?x41901 l_0_13_180)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42143 (* ?x41898 l_0_13_179)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42141 (* ?x41895 l_0_13_159)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42139 (* ?x41892 l_0_13_158)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42130 (* ?x41884 l_0_13_117)))
 (let ((?x42129 (+ (* (* (- 2.0) l_0_13_10) l_0_13_14) (* (* 2.0 l_0_13_107) l_0_13_116))))
 (let ((?x42136 (- (- (+ ?x42129 ?x42130) (* (* 2.0 l_0_13_11) l_0_13_7)) (* (* 2.0 l_0_13_12) l_0_13_8))))
 (let ((?x42144 (+ (- (- (- ?x42136 (* (* 2.0 l_0_13_13) l_0_13_9)) ?x42139) ?x42141) ?x42143)))
 (let ((?x42152 (+ (+ (+ ?x42144 ?x42145) (* (* 2.0 l_0_13_28) l_0_13_32)) (* (* 2.0 l_0_13_29) l_0_13_33))))
 (let ((?x42158 (+ (+ ?x42152 (* (* 2.0 l_0_13_30) l_0_13_34)) (* (* 2.0 l_0_13_31) l_0_13_35))))
 (= (- (- (- (- (+ (+ ?x42158 ?x41439) ?x41441) ?x41443) ?x41445) ?x42163) ?x42165) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42258 (* ?x42039 l_0_13_71)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42256 (* ?x42036 l_0_13_70)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42254 (* ?x42033 l_0_13_50)))
 (let ((?x41350 (* 12.0 l_0_13_3)))
 (let ((?x41437 (* ?x41350 l_0_13_8)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41435 (* ?x41347 l_0_13_29)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41433 (* ?x41344 l_0_13_28)))
 (let ((?x41339 (* 12.0 l_0_13_2)))
 (let ((?x41429 (* ?x41339 l_0_13_7)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42236 (* ?x41901 l_0_13_185)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42234 (* ?x41898 l_0_13_184)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42228 (* ?x41895 l_0_13_164)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42226 (* ?x41892 l_0_13_163)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x41890 (* ?x41849 l_0_13_134)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x41888 (* ?x41887 l_0_13_133)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42222 (* ?x41884 l_0_13_122)))
 (let ((?x41882 (* 2.0 l_0_13_107)))
 (let ((?x42220 (* ?x41882 l_0_13_121)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x42218 (* ?x42217 l_0_13_87)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x42215 (* ?x42214 l_0_13_86)))
 (let ((?x42223 (+ (+ (- (- (* (* (- 2.0) l_0_13_10) l_0_13_19) ?x42215) ?x42218) ?x42220) ?x42222)))
 (let ((?x42231 (- (- (- (+ (+ ?x42223 ?x41888) ?x41890) ?x42226) ?x42228) (* (* 2.0 l_0_13_16) l_0_13_7))))
 (let ((?x42239 (- (+ (+ (- ?x42231 (* (* 2.0 l_0_13_17) l_0_13_8)) ?x42234) ?x42236) (* (* 2.0 l_0_13_18) l_0_13_9))))
 (let ((?x42244 (+ (- (- (+ ?x42239 ?x41429) ?x41433) ?x41435) (* (* 2.0 l_0_13_28) l_0_13_37))))
 (let ((?x42249 (+ (+ (+ ?x42244 (* (* 2.0 l_0_13_29) l_0_13_38)) ?x41437) (* (* 2.0 l_0_13_30) l_0_13_39))))
 (let ((?x42253 (- (+ ?x42249 (* (* 2.0 l_0_13_31) l_0_13_40)) (* (* 6.0 l_0_13_44) l_0_13_49))))
 (= (+ (+ (- ?x42253 ?x42254) ?x42256) ?x42258) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41543 (* ?x41362 l_0_13_75)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41541 (* ?x41359 l_0_13_74)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41538 (* ?x41356 l_0_13_54)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41536 (* ?x41353 l_0_13_53)))
 (let ((?x42323 (* l_0_13_36 l_0_13_36)))
 (let ((?x42321 (* l_0_13_35 l_0_13_35)))
 (let ((?x42319 (* l_0_13_34 l_0_13_34)))
 (let ((?x42317 (* l_0_13_33 l_0_13_33)))
 (let ((?x42315 (* l_0_13_32 l_0_13_32)))
 (let ((?x42313 (* l_0_13_15 l_0_13_15)))
 (let ((?x42311 (* l_0_13_14 l_0_13_14)))
 (let ((?x42309 (* l_0_13_13 l_0_13_13)))
 (let ((?x42310 (- (- (* (- l_0_13_11) l_0_13_11) (* l_0_13_12 l_0_13_12)) ?x42309)))
 (let ((?x42324 (+ (+ (+ (+ (+ (- (- ?x42310 ?x42311) ?x42313) ?x42315) ?x42317) ?x42319) ?x42321) ?x42323)))
 (= (- (- (+ (+ ?x42324 ?x41536) ?x41538) ?x41541) ?x41543) 0.0))))))))))))))))))))
(assert
 (let ((?x41362 (* 2.0 l_0_13_66)))
 (let ((?x41623 (* ?x41362 l_0_13_80)))
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42381 (* ?x42039 l_0_13_75)))
 (let ((?x41359 (* 2.0 l_0_13_65)))
 (let ((?x41621 (* ?x41359 l_0_13_79)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42378 (* ?x42036 l_0_13_74)))
 (let ((?x41356 (* 2.0 l_0_13_45)))
 (let ((?x41616 (* ?x41356 l_0_13_59)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42375 (* ?x42033 l_0_13_54)))
 (let ((?x41353 (* 2.0 l_0_13_44)))
 (let ((?x41614 (* ?x41353 l_0_13_58)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41533 (* ?x41347 l_0_13_33)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41531 (* ?x41344 l_0_13_32)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x41977 (* ?x41849 l_0_13_138)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x41975 (* ?x41887 l_0_13_137)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x41523 (* ?x41522 l_0_13_3)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x41520 (* ?x41519 l_0_13_2)))
 (let ((?x42343 (- (+ (* (* (- 2.0) l_0_13_11) l_0_13_16) ?x41520) (* (* 2.0 l_0_13_12) l_0_13_17))))
 (let ((?x42348 (- (+ (+ (+ ?x42343 ?x41523) ?x41975) ?x41977) (* (* 2.0 l_0_13_13) l_0_13_18))))
 (let ((?x42354 (- (- ?x42348 (* (* 2.0 l_0_13_14) l_0_13_19)) (* (* 2.0 l_0_13_15) l_0_13_20))))
 (let ((?x42362 (+ (+ (- (- ?x42354 ?x41531) ?x41533) (* (* 2.0 l_0_13_32) l_0_13_37)) (* (* 2.0 l_0_13_33) l_0_13_38))))
 (let ((?x42368 (+ (+ ?x42362 (* (* 2.0 l_0_13_34) l_0_13_39)) (* (* 2.0 l_0_13_35) l_0_13_40))))
 (let ((?x42373 (- (+ ?x42368 (* (* 2.0 l_0_13_36) l_0_13_41)) (* (* 6.0 l_0_13_44) l_0_13_53))))
 (let ((?x42383 (- (+ (- (+ (+ (- (+ ?x42373 ?x41614) ?x42375) ?x41616) ?x42378) ?x41621) ?x42381) ?x41623)))
 (= ?x42383 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42468 (* ?x42039 l_0_13_80)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42466 (* ?x42036 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x41619 (* ?x41618 l_0_13_65)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42463 (* ?x42033 l_0_13_59)))
 (let ((?x42030 (* 6.0 l_0_13_44)))
 (let ((?x42461 (* ?x42030 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x41612 (* ?x41611 l_0_13_44)))
 (let ((?x42458 (* l_0_13_42 l_0_13_42)))
 (let ((?x42456 (* l_0_13_41 l_0_13_41)))
 (let ((?x42454 (* l_0_13_40 l_0_13_40)))
 (let ((?x42452 (* l_0_13_39 l_0_13_39)))
 (let ((?x42450 (* l_0_13_38 l_0_13_38)))
 (let ((?x42448 (* l_0_13_37 l_0_13_37)))
 (let ((?x41347 (* 12.0 l_0_13_24)))
 (let ((?x41609 (* ?x41347 l_0_13_38)))
 (let ((?x41344 (* 12.0 l_0_13_23)))
 (let ((?x41607 (* ?x41344 l_0_13_37)))
 (let ((?x42444 (* l_0_13_21 l_0_13_21)))
 (let ((?x42442 (* l_0_13_20 l_0_13_20)))
 (let ((?x42440 (* l_0_13_19 l_0_13_19)))
 (let ((?x42438 (* l_0_13_18 l_0_13_18)))
 (let ((?x42436 (* l_0_13_17 l_0_13_17)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x41598 (* ?x41597 l_0_13_3)))
 (let ((?x42433 (* l_0_13_16 l_0_13_16)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x41595 (* ?x41594 l_0_13_2)))
 (let ((?x41849 (* 2.0 l_0_13_129)))
 (let ((?x42011 (* ?x41849 l_0_13_143)))
 (let ((?x41887 (* 2.0 l_0_13_128)))
 (let ((?x42008 (* ?x41887 l_0_13_142)))
 (let ((?x42441 (- (- (- (+ (- (+ (+ ?x42008 ?x42011) ?x41595) ?x42433) ?x41598) ?x42436) ?x42438) ?x42440)))
 (let ((?x42453 (+ (+ (+ (- (- (- (- ?x42441 ?x42442) ?x42444) ?x41607) ?x41609) ?x42448) ?x42450) ?x42452)))
 (let ((?x42465 (+ (- (- (- (+ (+ (+ ?x42453 ?x42454) ?x42456) ?x42458) ?x41612) ?x42461) ?x42463) ?x41619)))
 (= (+ (+ ?x42465 ?x42466) ?x42468) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x42545 (* ?x42544 l_0_13_81)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x42542 (* ?x42541 l_0_13_80)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x42539 (* ?x42538 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42536 (* ?x41618 l_0_13_67)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x42534 (* ?x42533 l_0_13_60)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x42531 (* ?x42530 l_0_13_59)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x42528 (* ?x42527 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42525 (* ?x41611 l_0_13_46)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x42523 (* ?x42522 l_0_13_39)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x42520 (* ?x42519 l_0_13_38)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x42517 (* ?x42516 l_0_13_37)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42514 (* ?x19929 l_0_13_25)))
 (let ((?x42502 (* 12.0 l_0_13_18)))
 (let ((?x42503 (* ?x42502 l_0_13_6)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x42500 (* ?x41597 l_0_13_5)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x42498 (* ?x41594 l_0_13_4)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42496 (* ?x41330 l_0_13_142)))
 (let ((?x42497 (- (+ (* (* 12.0 l_0_13_1) l_0_13_4) (* ?x41330 l_0_13_130)) ?x42496)))
 (let ((?x42507 (- (+ (+ (+ ?x42497 ?x42498) ?x42500) ?x42503) (* (* 2.0 l_0_13_193) l_0_13_205))))
 (let ((?x42513 (- (- ?x42507 (* (* 2.0 l_0_13_194) l_0_13_206)) (* (* 2.0 l_0_13_195) l_0_13_207))))
 (let ((?x42532 (- (- (- (- (- (- (- ?x42513 ?x42514) ?x42517) ?x42520) ?x42523) ?x42525) ?x42528) ?x42531)))
 (= (+ (+ (+ (+ (- ?x42532 ?x42534) ?x42536) ?x42539) ?x42542) ?x42545) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42660 (* 2.0 l_0_13_73)))
 (let ((?x42661 (* ?x42660 l_0_13_82)))
 (let ((?x42657 (* 2.0 l_0_13_72)))
 (let ((?x42658 (* ?x42657 l_0_13_81)))
 (let ((?x42654 (* 2.0 l_0_13_71)))
 (let ((?x42655 (* ?x42654 l_0_13_80)))
 (let ((?x42651 (* 2.0 l_0_13_70)))
 (let ((?x42652 (* ?x42651 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42649 (* ?x41618 l_0_13_70)))
 (let ((?x42646 (* 2.0 l_0_13_52)))
 (let ((?x42647 (* ?x42646 l_0_13_61)))
 (let ((?x42643 (* 2.0 l_0_13_51)))
 (let ((?x42644 (* ?x42643 l_0_13_60)))
 (let ((?x42640 (* 2.0 l_0_13_50)))
 (let ((?x42641 (* ?x42640 l_0_13_59)))
 (let ((?x42637 (* 2.0 l_0_13_49)))
 (let ((?x42638 (* ?x42637 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42635 (* ?x41611 l_0_13_49)))
 (let ((?x42632 (* 12.0 l_0_13_31)))
 (let ((?x42633 (* ?x42632 l_0_13_40)))
 (let ((?x42629 (* 12.0 l_0_13_30)))
 (let ((?x42630 (* ?x42629 l_0_13_39)))
 (let ((?x42626 (* 12.0 l_0_13_29)))
 (let ((?x42627 (* ?x42626 l_0_13_38)))
 (let ((?x42623 (* 12.0 l_0_13_28)))
 (let ((?x42624 (* ?x42623 l_0_13_37)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42621 (* ?x19929 l_0_13_28)))
 (let ((?x42502 (* 12.0 l_0_13_18)))
 (let ((?x42607 (* ?x42502 l_0_13_9)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x42605 (* ?x41597 l_0_13_8)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x42603 (* ?x41422 l_0_13_184)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x42601 (* ?x41594 l_0_13_7)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x42599 (* ?x41419 l_0_13_163)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42597 (* ?x41330 l_0_13_133)))
 (let ((?x41408 (* 2.0 l_0_13_106)))
 (let ((?x42595 (* ?x41408 l_0_13_121)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x42593 (* ?x42214 l_0_13_85)))
 (let ((?x42590 (* 12.0 l_0_13_10)))
 (let ((?x42591 (* ?x42590 l_0_13_19)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x42589 (* ?x30708 l_0_13_7)))
 (let ((?x42604 (+ (+ (- (+ (+ (- (+ ?x42589 ?x42591) ?x42593) ?x42595) ?x42597) ?x42599) ?x42601) ?x42603)))
 (let ((?x42614 (- (- (+ (+ ?x42604 ?x42605) ?x42607) (* (* 2.0 l_0_13_196) l_0_13_205)) (* (* 2.0 l_0_13_197) l_0_13_206))))
 (let ((?x42620 (- (- ?x42614 (* (* 2.0 l_0_13_198) l_0_13_207)) (* (* 2.0 l_0_13_199) l_0_13_208))))
 (let ((?x42639 (- (- (- (- (- (- (- ?x42620 ?x42621) ?x42624) ?x42627) ?x42630) ?x42633) ?x42635) ?x42638)))
 (let ((?x42659 (+ (+ (+ (+ (- (- (- ?x42639 ?x42641) ?x42644) ?x42647) ?x42649) ?x42652) ?x42655) ?x42658)))
 (= (+ ?x42659 ?x42661) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42798 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x42795 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x42792 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x42789 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x42786 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x41245 (* ?x41206 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42782 (* ?x41618 l_0_13_74)))
 (let ((?x42780 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x42777 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x42774 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x42771 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x42768 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x41240 (* ?x41203 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42764 (* ?x41611 l_0_13_53)))
 (let ((?x42762 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x42759 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x42756 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x42753 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x42750 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42747 (* ?x19929 l_0_13_32)))
 (let ((?x42730 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x42727 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x42724 (* ?x42723 l_0_13_18)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42721 (* ?x41330 l_0_13_137)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x42719 (* ?x41522 l_0_13_17)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x42717 (* ?x41519 l_0_13_16)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x42716 (* ?x30708 l_0_13_11)))
 (let ((?x42734 (- (+ (+ (+ (+ (+ (+ ?x42716 ?x42717) ?x42719) ?x42721) ?x42724) ?x42727) ?x42730) (* (* 2.0 l_0_13_200) l_0_13_205))))
 (let ((?x42740 (- (- ?x42734 (* (* 2.0 l_0_13_201) l_0_13_206)) (* (* 2.0 l_0_13_202) l_0_13_207))))
 (let ((?x42746 (- (- ?x42740 (* (* 2.0 l_0_13_203) l_0_13_208)) (* (* 2.0 l_0_13_204) l_0_13_209))))
 (let ((?x42765 (- (- (- (- (- (- (- ?x42746 ?x42747) ?x42750) ?x42753) ?x42756) ?x42759) ?x42762) ?x42764)))
 (let ((?x42783 (+ (- (- (- (- (- (+ ?x42765 ?x41240) ?x42768) ?x42771) ?x42774) ?x42777) ?x42780) ?x42782)))
 (= (+ (+ (+ (+ (+ (- ?x42783 ?x41245) ?x42786) ?x42789) ?x42792) ?x42795) ?x42798) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41184 (* l_0_13_64 l_0_13_64)))
 (let ((?x41247 (* 3.0 ?x41184)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42933 (* ?x41618 l_0_13_79)))
 (let ((?x41243 (* (* 3.0 l_0_13_43) l_0_13_43)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42912 (* ?x41611 l_0_13_58)))
 (let ((?x42910 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x42907 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x42904 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x42901 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x42898 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x42895 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x41237 (* ?x19929 l_0_13_37)))
 (let ((?x42891 (* l_0_13_210 l_0_13_210)))
 (let ((?x42444 (* l_0_13_21 l_0_13_21)))
 (let ((?x42889 (* 6.0 ?x42444)))
 (let ((?x42887 (* l_0_13_209 l_0_13_209)))
 (let ((?x42885 (* l_0_13_208 l_0_13_208)))
 (let ((?x42883 (* l_0_13_207 l_0_13_207)))
 (let ((?x42881 (* l_0_13_206 l_0_13_206)))
 (let ((?x42879 (* l_0_13_205 l_0_13_205)))
 (let ((?x42442 (* l_0_13_20 l_0_13_20)))
 (let ((?x42877 (* 6.0 ?x42442)))
 (let ((?x42440 (* l_0_13_19 l_0_13_19)))
 (let ((?x42875 (* 6.0 ?x42440)))
 (let ((?x42438 (* l_0_13_18 l_0_13_18)))
 (let ((?x42858 (* 6.0 ?x42438)))
 (let ((?x42436 (* l_0_13_17 l_0_13_17)))
 (let ((?x42855 (* 6.0 ?x42436)))
 (let ((?x42433 (* l_0_13_16 l_0_13_16)))
 (let ((?x31898 (* 6.0 ?x42433)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42496 (* ?x41330 l_0_13_142)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x41231 (* ?x30708 l_0_13_16)))
 (let ((?x42880 (- (+ (+ (+ (+ (+ (+ ?x41231 ?x42496) ?x31898) ?x42855) ?x42858) ?x42875) ?x42877) ?x42879)))
 (let ((?x42893 (- (- (+ (- (- (- (- ?x42880 ?x42881) ?x42883) ?x42885) ?x42887) ?x42889) ?x42891) ?x41237)))
 (let ((?x42913 (- (- (- (- (- (- (- ?x42893 ?x42895) ?x42898) ?x42901) ?x42904) ?x42907) ?x42910) ?x42912)))
 (let ((?x42920 (- (- (- ?x42913 ?x41243) (* (* 1.0 l_0_13_58) l_0_13_58)) (* (* 1.0 l_0_13_59) l_0_13_59))))
 (let ((?x42926 (- (- ?x42920 (* (* 1.0 l_0_13_60) l_0_13_60)) (* (* 1.0 l_0_13_61) l_0_13_61))))
 (let ((?x42932 (- (- ?x42926 (* (* 1.0 l_0_13_62) l_0_13_62)) (* (* 1.0 l_0_13_63) l_0_13_63))))
 (let ((?x42941 (+ (+ (+ (+ ?x42932 ?x42933) ?x41247) (* 1.0 (* l_0_13_79 l_0_13_79))) (* 1.0 (* l_0_13_80 l_0_13_80)))))
 (let ((?x42947 (+ (+ ?x42941 (* 1.0 (* l_0_13_81 l_0_13_81))) (* 1.0 (* l_0_13_82 l_0_13_82)))))
 (let ((?x42953 (+ (+ ?x42947 (* 1.0 (* l_0_13_83 l_0_13_83))) (* 1.0 (* l_0_13_84 l_0_13_84)))))
 (= ?x42953 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42998 (* l_0_13_69 l_0_13_69)))
 (let ((?x42999 (* 3.0 ?x42998)))
 (let ((?x42995 (* l_0_13_68 l_0_13_68)))
 (let ((?x42996 (* 3.0 ?x42995)))
 (let ((?x42992 (* l_0_13_67 l_0_13_67)))
 (let ((?x42993 (* 3.0 ?x42992)))
 (let ((?x41862 (* l_0_13_6 l_0_13_6)))
 (let ((?x42990 (* 6.0 ?x41862)))
 (let ((?x41860 (* l_0_13_5 l_0_13_5)))
 (let ((?x42988 (* 6.0 ?x41860)))
 (let ((?x42986 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42983 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x41858 (* l_0_13_4 l_0_13_4)))
 (let ((?x42977 (* 6.0 ?x41858)))
 (let ((?x42975 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x42972 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x42969 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x42966 (* l_0_13_132 l_0_13_132)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x42964 (* ?x42963 l_0_13_144)))
 (let ((?x42961 (* l_0_13_131 l_0_13_131)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x42959 (* ?x42958 l_0_13_143)))
 (let ((?x42956 (* l_0_13_130 l_0_13_130)))
 (let ((?x42965 (- (+ (- (+ (* (* (- 2.0) l_0_13_130) l_0_13_142) ?x42956) ?x42959) ?x42961) ?x42964)))
 (let ((?x42981 (- (+ (- (- (- (+ ?x42965 ?x42966) ?x42969) ?x42972) ?x42975) ?x42977) (* (* 3.0 l_0_13_46) l_0_13_46))))
 (let ((?x43000 (+ (+ (+ (+ (+ (- (- ?x42981 ?x42983) ?x42986) ?x42988) ?x42990) ?x42993) ?x42996) ?x42999)))
 (= ?x43000 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43108 (* ?x43107 l_0_13_72)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43105 (* ?x43104 l_0_13_71)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43102 (* ?x43101 l_0_13_70)))
 (let ((?x43099 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x43096 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43093 (* ?x43092 l_0_13_51)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43090 (* ?x43089 l_0_13_50)))
 (let ((?x43084 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x43081 (* ?x42522 l_0_13_30)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x43079 (* ?x42519 l_0_13_29)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x43077 (* ?x42516 l_0_13_28)))
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x43075 (* ?x43074 l_0_13_186)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x43072 (* ?x43071 l_0_13_185)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x43069 (* ?x43068 l_0_13_184)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x43066 (* ?x43065 l_0_13_165)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x43063 (* ?x43062 l_0_13_164)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x43060 (* ?x43059 l_0_13_163)))
 (let ((?x43056 (* 2.0 l_0_13_136)))
 (let ((?x43057 (* ?x43056 l_0_13_145)))
 (let ((?x43053 (* 2.0 l_0_13_135)))
 (let ((?x43054 (* ?x43053 l_0_13_144)))
 (let ((?x43050 (* 2.0 l_0_13_134)))
 (let ((?x43051 (* ?x43050 l_0_13_143)))
 (let ((?x43047 (* 2.0 l_0_13_133)))
 (let ((?x43048 (* ?x43047 l_0_13_142)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x43045 (* ?x42963 l_0_13_135)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x43043 (* ?x42958 l_0_13_134)))
 (let ((?x43040 (* 2.0 l_0_13_130)))
 (let ((?x43041 (* ?x43040 l_0_13_133)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x43038 (* ?x43037 l_0_13_123)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x43035 (* ?x43034 l_0_13_122)))
 (let ((?x43031 (* 2.0 l_0_13_109)))
 (let ((?x43032 (* ?x43031 l_0_13_121)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43029 (* ?x43028 l_0_13_90)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43026 (* ?x42217 l_0_13_89)))
 (let ((?x43036 (+ (+ (- (- (* (* (- 2.0) l_0_13_100) l_0_13_88) ?x43026) ?x43029) ?x43032) ?x43035)))
 (let ((?x43055 (- (- (- (+ (+ (+ (+ ?x43036 ?x43038) ?x43041) ?x43043) ?x43045) ?x43048) ?x43051) ?x43054)))
 (let ((?x43076 (+ (+ (+ (- (- (- (- ?x43055 ?x43057) ?x43060) ?x43063) ?x43066) ?x43069) ?x43072) ?x43075)))
 (let ((?x43088 (- (+ (- (- (- ?x43076 ?x43077) ?x43079) ?x43081) ?x43084) (* (* 6.0 l_0_13_46) l_0_13_49))))
 (let ((?x43109 (+ (+ (+ (+ (+ (- (- ?x43088 ?x43090) ?x43093) ?x43096) ?x43099) ?x43102) ?x43105) ?x43108)))
 (= ?x43109 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x42545 (* ?x42544 l_0_13_81)))
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43227 (* ?x43107 l_0_13_76)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x42542 (* ?x42541 l_0_13_80)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43224 (* ?x43104 l_0_13_75)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x42539 (* ?x42538 l_0_13_79)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43221 (* ?x43101 l_0_13_74)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x42534 (* ?x42533 l_0_13_60)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43218 (* ?x43092 l_0_13_55)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x42531 (* ?x42530 l_0_13_59)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43215 (* ?x43089 l_0_13_54)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x42528 (* ?x42527 l_0_13_58)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x43210 (* ?x42522 l_0_13_34)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x43208 (* ?x42519 l_0_13_33)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x43206 (* ?x42516 l_0_13_32)))
 (let ((?x43204 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x43201 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x43198 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x43195 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x43192 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x43189 (* ?x42963 l_0_13_139)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x43187 (* ?x42958 l_0_13_138)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x43164 (* ?x42723 l_0_13_6)))
 (let ((?x43162 (+ (* (* 12.0 l_0_13_11) l_0_13_4) (* (* 12.0 l_0_13_12) l_0_13_5))))
 (let ((?x43190 (+ (+ (+ (+ ?x43162 ?x43164) (* (* 2.0 l_0_13_130) l_0_13_137)) ?x43187) ?x43189)))
 (let ((?x43209 (- (- (- (- (- (- (- ?x43190 ?x43192) ?x43195) ?x43198) ?x43201) ?x43204) ?x43206) ?x43208)))
 (let ((?x43216 (- (+ (- (- ?x43209 ?x43210) (* (* 6.0 l_0_13_46) l_0_13_53)) ?x42528) ?x43215)))
 (let ((?x43226 (- (+ (- (+ (+ (- (+ ?x43216 ?x42531) ?x43218) ?x42534) ?x43221) ?x42539) ?x43224) ?x42542)))
 (= (- (+ ?x43226 ?x43227) ?x42545) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43309 (* ?x43107 l_0_13_81)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43307 (* ?x43104 l_0_13_80)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43305 (* ?x43101 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42536 (* ?x41618 l_0_13_67)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43302 (* ?x43092 l_0_13_60)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43300 (* ?x43089 l_0_13_59)))
 (let ((?x43086 (* 6.0 l_0_13_46)))
 (let ((?x43298 (* ?x43086 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42525 (* ?x41611 l_0_13_46)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x42523 (* ?x42522 l_0_13_39)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x42520 (* ?x42519 l_0_13_38)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x42517 (* ?x42516 l_0_13_37)))
 (let ((?x42502 (* 12.0 l_0_13_18)))
 (let ((?x42503 (* ?x42502 l_0_13_6)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x42500 (* ?x41597 l_0_13_5)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x42498 (* ?x41594 l_0_13_4)))
 (let ((?x43289 (* l_0_13_147 l_0_13_147)))
 (let ((?x43287 (* l_0_13_146 l_0_13_146)))
 (let ((?x43285 (* l_0_13_145 l_0_13_145)))
 (let ((?x43283 (* l_0_13_144 l_0_13_144)))
 (let ((?x43281 (* l_0_13_143 l_0_13_143)))
 (let ((?x43279 (* l_0_13_142 l_0_13_142)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x42964 (* ?x42963 l_0_13_144)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x42959 (* ?x42958 l_0_13_143)))
 (let ((?x43282 (- (- (+ (+ (* (* 2.0 l_0_13_130) l_0_13_142) ?x42959) ?x42964) ?x43279) ?x43281)))
 (let ((?x43293 (+ (+ (+ (- (- (- (- ?x43282 ?x43283) ?x43285) ?x43287) ?x43289) ?x42498) ?x42500) ?x42503)))
 (let ((?x43303 (- (- (- (- (- (- (- ?x43293 ?x42517) ?x42520) ?x42523) ?x42525) ?x43298) ?x43300) ?x43302)))
 (= (+ (+ (+ (+ ?x43303 ?x42536) ?x43305) ?x43307) ?x43309) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42105 (* l_0_13_9 l_0_13_9)))
 (let ((?x43431 (* 6.0 ?x42105)))
 (let ((?x42099 (* l_0_13_8 l_0_13_8)))
 (let ((?x43429 (* 6.0 ?x42099)))
 (let ((?x43426 (* l_0_13_73 l_0_13_73)))
 (let ((?x43427 (* 3.0 ?x43426)))
 (let ((?x43423 (* l_0_13_72 l_0_13_72)))
 (let ((?x43424 (* 3.0 ?x43423)))
 (let ((?x43420 (* l_0_13_71 l_0_13_71)))
 (let ((?x43421 (* 3.0 ?x43420)))
 (let ((?x43417 (* l_0_13_70 l_0_13_70)))
 (let ((?x43418 (* 3.0 ?x43417)))
 (let ((?x42097 (* l_0_13_7 l_0_13_7)))
 (let ((?x43415 (* 6.0 ?x42097)))
 (let ((?x43413 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x43410 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x43407 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x43401 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x43398 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x43395 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x43392 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x43388 (* 2.0 l_0_13_178)))
 (let ((?x43389 (* ?x43388 l_0_13_187)))
 (let ((?x43385 (* 2.0 l_0_13_177)))
 (let ((?x43386 (* ?x43385 l_0_13_186)))
 (let ((?x43382 (* 2.0 l_0_13_176)))
 (let ((?x43383 (* ?x43382 l_0_13_185)))
 (let ((?x43379 (* 2.0 l_0_13_175)))
 (let ((?x43380 (* ?x43379 l_0_13_184)))
 (let ((?x43376 (* 2.0 l_0_13_157)))
 (let ((?x43377 (* ?x43376 l_0_13_166)))
 (let ((?x43373 (* 2.0 l_0_13_156)))
 (let ((?x43374 (* ?x43373 l_0_13_165)))
 (let ((?x43370 (* 2.0 l_0_13_155)))
 (let ((?x43371 (* ?x43370 l_0_13_164)))
 (let ((?x43367 (* 2.0 l_0_13_154)))
 (let ((?x43368 (* ?x43367 l_0_13_163)))
 (let ((?x43365 (* l_0_13_136 l_0_13_136)))
 (let ((?x43363 (* l_0_13_135 l_0_13_135)))
 (let ((?x43361 (* l_0_13_134 l_0_13_134)))
 (let ((?x43359 (* l_0_13_133 l_0_13_133)))
 (let ((?x43356 (* 2.0 l_0_13_115)))
 (let ((?x43357 (* ?x43356 l_0_13_124)))
 (let ((?x43353 (* 2.0 l_0_13_114)))
 (let ((?x43354 (* ?x43353 l_0_13_123)))
 (let ((?x43350 (* 2.0 l_0_13_113)))
 (let ((?x43351 (* ?x43350 l_0_13_122)))
 (let ((?x43347 (* 2.0 l_0_13_112)))
 (let ((?x43348 (* ?x43347 l_0_13_121)))
 (let ((?x43344 (* 2.0 l_0_13_103)))
 (let ((?x43345 (* ?x43344 l_0_13_94)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43342 (* ?x43028 l_0_13_93)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43340 (* ?x42217 l_0_13_92)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x43338 (* ?x42214 l_0_13_91)))
 (let ((?x42109 (* l_0_13_10 l_0_13_10)))
 (let ((?x43337 (* 6.0 ?x42109)))
 (let ((?x43355 (+ (+ (+ (- (- (- (- ?x43337 ?x43338) ?x43340) ?x43342) ?x43345) ?x43348) ?x43351) ?x43354)))
 (let ((?x43372 (- (- (+ (+ (+ (+ (+ ?x43355 ?x43357) ?x43359) ?x43361) ?x43363) ?x43365) ?x43368) ?x43371)))
 (let ((?x43393 (- (+ (+ (+ (+ (- (- ?x43372 ?x43374) ?x43377) ?x43380) ?x43383) ?x43386) ?x43389) ?x43392)))
 (let ((?x43405 (- (- (- (- ?x43393 ?x43395) ?x43398) ?x43401) (* (* 3.0 l_0_13_49) l_0_13_49))))
 (let ((?x43425 (+ (+ (+ (+ (- (- (- ?x43405 ?x43407) ?x43410) ?x43413) ?x43415) ?x43418) ?x43421) ?x43424)))
 (= (+ (+ (+ ?x43425 ?x43427) ?x43429) ?x43431) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42660 (* 2.0 l_0_13_73)))
 (let ((?x42661 (* ?x42660 l_0_13_82)))
 (let ((?x43588 (* 6.0 l_0_13_73)))
 (let ((?x43589 (* ?x43588 l_0_13_77)))
 (let ((?x42657 (* 2.0 l_0_13_72)))
 (let ((?x42658 (* ?x42657 l_0_13_81)))
 (let ((?x43584 (* 6.0 l_0_13_72)))
 (let ((?x43585 (* ?x43584 l_0_13_76)))
 (let ((?x42654 (* 2.0 l_0_13_71)))
 (let ((?x42655 (* ?x42654 l_0_13_80)))
 (let ((?x43580 (* 6.0 l_0_13_71)))
 (let ((?x43581 (* ?x43580 l_0_13_75)))
 (let ((?x42651 (* 2.0 l_0_13_70)))
 (let ((?x42652 (* ?x42651 l_0_13_79)))
 (let ((?x43576 (* 6.0 l_0_13_70)))
 (let ((?x43577 (* ?x43576 l_0_13_74)))
 (let ((?x42646 (* 2.0 l_0_13_52)))
 (let ((?x42647 (* ?x42646 l_0_13_61)))
 (let ((?x43572 (* 6.0 l_0_13_52)))
 (let ((?x43573 (* ?x43572 l_0_13_56)))
 (let ((?x42643 (* 2.0 l_0_13_51)))
 (let ((?x42644 (* ?x42643 l_0_13_60)))
 (let ((?x43568 (* 6.0 l_0_13_51)))
 (let ((?x43569 (* ?x43568 l_0_13_55)))
 (let ((?x42640 (* 2.0 l_0_13_50)))
 (let ((?x42641 (* ?x42640 l_0_13_59)))
 (let ((?x43564 (* 6.0 l_0_13_50)))
 (let ((?x43565 (* ?x43564 l_0_13_54)))
 (let ((?x42637 (* 2.0 l_0_13_49)))
 (let ((?x42638 (* ?x42637 l_0_13_58)))
 (let ((?x42632 (* 12.0 l_0_13_31)))
 (let ((?x43558 (* ?x42632 l_0_13_35)))
 (let ((?x42629 (* 12.0 l_0_13_30)))
 (let ((?x43556 (* ?x42629 l_0_13_34)))
 (let ((?x42626 (* 12.0 l_0_13_29)))
 (let ((?x43554 (* ?x42626 l_0_13_33)))
 (let ((?x42623 (* 12.0 l_0_13_28)))
 (let ((?x43552 (* ?x42623 l_0_13_32)))
 (let ((?x43550 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x43547 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x43544 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x43541 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x43538 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x43535 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x43532 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x43529 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x43526 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x43523 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x43056 (* 2.0 l_0_13_136)))
 (let ((?x43520 (* ?x43056 l_0_13_140)))
 (let ((?x43053 (* 2.0 l_0_13_135)))
 (let ((?x43518 (* ?x43053 l_0_13_139)))
 (let ((?x43050 (* 2.0 l_0_13_134)))
 (let ((?x43516 (* ?x43050 l_0_13_138)))
 (let ((?x43047 (* 2.0 l_0_13_133)))
 (let ((?x43514 (* ?x43047 l_0_13_137)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x43512 (* ?x42723 l_0_13_9)))
 (let ((?x43510 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x43507 (* ?x41522 l_0_13_8)))
 (let ((?x43505 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x43502 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x43499 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x43496 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x43493 (* ?x41519 l_0_13_7)))
 (let ((?x43491 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x43344 (* 2.0 l_0_13_103)))
 (let ((?x43488 (* ?x43344 l_0_13_98)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43486 (* ?x43028 l_0_13_97)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43484 (* ?x42217 l_0_13_96)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x32562 (* ?x42214 l_0_13_95)))
 (let ((?x42590 (* 12.0 l_0_13_10)))
 (let ((?x32566 (* ?x42590 l_0_13_14)))
 (let ((?x43497 (+ (+ (- (- (- (- (- ?x32566 ?x32562) ?x43484) ?x43486) ?x43488) ?x43491) ?x43493) ?x43496)))
 (let ((?x43515 (+ (+ (+ (+ (+ (+ (+ ?x43497 ?x43499) ?x43502) ?x43505) ?x43507) ?x43510) ?x43512) ?x43514)))
 (let ((?x43533 (- (- (- (- (+ (+ (+ ?x43515 ?x43516) ?x43518) ?x43520) ?x43523) ?x43526) ?x43529) ?x43532)))
 (let ((?x43553 (- (+ (+ (+ (+ (+ (- ?x43533 ?x43535) ?x43538) ?x43541) ?x43544) ?x43547) ?x43550) ?x43552)))
 (let ((?x43562 (- (- (- (- ?x43553 ?x43554) ?x43556) ?x43558) (* (* 6.0 l_0_13_49) l_0_13_53))))
 (let ((?x43575 (+ (- (+ (- (+ (- (+ ?x43562 ?x42638) ?x43565) ?x42641) ?x43569) ?x42644) ?x43573) ?x42647)))
 (let ((?x43590 (+ (- (+ (- (+ (- (+ ?x43575 ?x43577) ?x42652) ?x43581) ?x42655) ?x43585) ?x42658) ?x43589)))
 (= (- ?x43590 ?x42661) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43588 (* 6.0 l_0_13_73)))
 (let ((?x43709 (* ?x43588 l_0_13_82)))
 (let ((?x43584 (* 6.0 l_0_13_72)))
 (let ((?x43707 (* ?x43584 l_0_13_81)))
 (let ((?x43580 (* 6.0 l_0_13_71)))
 (let ((?x43705 (* ?x43580 l_0_13_80)))
 (let ((?x43576 (* 6.0 l_0_13_70)))
 (let ((?x43703 (* ?x43576 l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42649 (* ?x41618 l_0_13_70)))
 (let ((?x43572 (* 6.0 l_0_13_52)))
 (let ((?x43700 (* ?x43572 l_0_13_61)))
 (let ((?x43568 (* 6.0 l_0_13_51)))
 (let ((?x43698 (* ?x43568 l_0_13_60)))
 (let ((?x43564 (* 6.0 l_0_13_50)))
 (let ((?x43696 (* ?x43564 l_0_13_59)))
 (let ((?x43560 (* 6.0 l_0_13_49)))
 (let ((?x43694 (* ?x43560 l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42635 (* ?x41611 l_0_13_49)))
 (let ((?x42632 (* 12.0 l_0_13_31)))
 (let ((?x42633 (* ?x42632 l_0_13_40)))
 (let ((?x42629 (* 12.0 l_0_13_30)))
 (let ((?x42630 (* ?x42629 l_0_13_39)))
 (let ((?x42626 (* 12.0 l_0_13_29)))
 (let ((?x42627 (* ?x42626 l_0_13_38)))
 (let ((?x42623 (* 12.0 l_0_13_28)))
 (let ((?x42624 (* ?x42623 l_0_13_37)))
 (let ((?x43687 (* l_0_13_189 l_0_13_189)))
 (let ((?x43685 (* l_0_13_188 l_0_13_188)))
 (let ((?x43683 (* l_0_13_187 l_0_13_187)))
 (let ((?x43681 (* l_0_13_186 l_0_13_186)))
 (let ((?x43679 (* l_0_13_185 l_0_13_185)))
 (let ((?x43677 (* l_0_13_184 l_0_13_184)))
 (let ((?x42502 (* 12.0 l_0_13_18)))
 (let ((?x42607 (* ?x42502 l_0_13_9)))
 (let ((?x41597 (* 12.0 l_0_13_17)))
 (let ((?x42605 (* ?x41597 l_0_13_8)))
 (let ((?x43673 (* l_0_13_168 l_0_13_168)))
 (let ((?x43671 (* l_0_13_167 l_0_13_167)))
 (let ((?x43669 (* l_0_13_166 l_0_13_166)))
 (let ((?x43667 (* l_0_13_165 l_0_13_165)))
 (let ((?x43665 (* l_0_13_164 l_0_13_164)))
 (let ((?x43663 (* l_0_13_163 l_0_13_163)))
 (let ((?x41594 (* 12.0 l_0_13_16)))
 (let ((?x42601 (* ?x41594 l_0_13_7)))
 (let ((?x43056 (* 2.0 l_0_13_136)))
 (let ((?x43057 (* ?x43056 l_0_13_145)))
 (let ((?x43053 (* 2.0 l_0_13_135)))
 (let ((?x43054 (* ?x43053 l_0_13_144)))
 (let ((?x43050 (* 2.0 l_0_13_134)))
 (let ((?x43051 (* ?x43050 l_0_13_143)))
 (let ((?x43047 (* 2.0 l_0_13_133)))
 (let ((?x43048 (* ?x43047 l_0_13_142)))
 (let ((?x43656 (* l_0_13_126 l_0_13_126)))
 (let ((?x43654 (* l_0_13_125 l_0_13_125)))
 (let ((?x43652 (* l_0_13_124 l_0_13_124)))
 (let ((?x43650 (* l_0_13_123 l_0_13_123)))
 (let ((?x43648 (* l_0_13_122 l_0_13_122)))
 (let ((?x43646 (* l_0_13_121 l_0_13_121)))
 (let ((?x43644 (* l_0_13_105 l_0_13_105)))
 (let ((?x43642 (* l_0_13_104 l_0_13_104)))
 (let ((?x43640 (* l_0_13_103 l_0_13_103)))
 (let ((?x43638 (* l_0_13_102 l_0_13_102)))
 (let ((?x43636 (* l_0_13_101 l_0_13_101)))
 (let ((?x32884 (* l_0_13_100 l_0_13_100)))
 (let ((?x42590 (* 12.0 l_0_13_10)))
 (let ((?x42591 (* ?x42590 l_0_13_19)))
 (let ((?x43647 (+ (- (- (- (- (- (- ?x42591 ?x32884) ?x43636) ?x43638) ?x43640) ?x43642) ?x43644) ?x43646)))
 (let ((?x43659 (+ (+ (+ (+ (+ (+ (+ ?x43647 ?x43648) ?x43650) ?x43652) ?x43654) ?x43656) ?x43048) ?x43051)))
 (let ((?x43670 (- (- (- (- (+ (+ (+ ?x43659 ?x43054) ?x43057) ?x42601) ?x43663) ?x43665) ?x43667) ?x43669)))
 (let ((?x43682 (+ (+ (+ (+ (+ (- (- ?x43670 ?x43671) ?x43673) ?x42605) ?x42607) ?x43677) ?x43679) ?x43681)))
 (let ((?x43692 (- (- (- (- (+ (+ (+ ?x43682 ?x43683) ?x43685) ?x43687) ?x42624) ?x42627) ?x42630) ?x42633)))
 (let ((?x43704 (+ (+ (- (- (- (- (- ?x43692 ?x42635) ?x43694) ?x43696) ?x43698) ?x43700) ?x42649) ?x43703)))
 (= (+ (+ (+ ?x43704 ?x43705) ?x43707) ?x43709) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43799 (* l_0_13_78 l_0_13_78)))
 (let ((?x43800 (* 3.0 ?x43799)))
 (let ((?x42798 (* (* 2.0 l_0_13_78) l_0_13_83)))
 (let ((?x43795 (* l_0_13_77 l_0_13_77)))
 (let ((?x43796 (* 3.0 ?x43795)))
 (let ((?x42795 (* (* 2.0 l_0_13_77) l_0_13_82)))
 (let ((?x43791 (* l_0_13_76 l_0_13_76)))
 (let ((?x43792 (* 3.0 ?x43791)))
 (let ((?x42792 (* (* 2.0 l_0_13_76) l_0_13_81)))
 (let ((?x43787 (* l_0_13_75 l_0_13_75)))
 (let ((?x43788 (* 3.0 ?x43787)))
 (let ((?x42789 (* (* 2.0 l_0_13_75) l_0_13_80)))
 (let ((?x43783 (* l_0_13_74 l_0_13_74)))
 (let ((?x43784 (* 3.0 ?x43783)))
 (let ((?x42786 (* (* 2.0 l_0_13_74) l_0_13_79)))
 (let ((?x43780 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x42780 (* (* 2.0 l_0_13_57) l_0_13_62)))
 (let ((?x43776 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x42777 (* (* 2.0 l_0_13_56) l_0_13_61)))
 (let ((?x43772 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x42774 (* (* 2.0 l_0_13_55) l_0_13_60)))
 (let ((?x43768 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x42771 (* (* 2.0 l_0_13_54) l_0_13_59)))
 (let ((?x42768 (* (* 2.0 l_0_13_53) l_0_13_58)))
 (let ((?x43760 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x43757 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x43754 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x43751 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x43748 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x42313 (* l_0_13_15 l_0_13_15)))
 (let ((?x43745 (* 6.0 ?x42313)))
 (let ((?x43743 (* l_0_13_141 l_0_13_141)))
 (let ((?x43741 (* l_0_13_140 l_0_13_140)))
 (let ((?x42311 (* l_0_13_14 l_0_13_14)))
 (let ((?x43739 (* 6.0 ?x42311)))
 (let ((?x43737 (* l_0_13_139 l_0_13_139)))
 (let ((?x43735 (* l_0_13_138 l_0_13_138)))
 (let ((?x43733 (* l_0_13_137 l_0_13_137)))
 (let ((?x4666 (+ (* 6.0 (* l_0_13_11 l_0_13_11)) (* 6.0 (* l_0_13_12 l_0_13_12)))))
 (let ((?x43732 (+ ?x4666 (* 6.0 (* l_0_13_13 l_0_13_13)))))
 (let ((?x43746 (+ (+ (+ (+ (+ (+ (+ ?x43732 ?x43733) ?x43735) ?x43737) ?x43739) ?x43741) ?x43743) ?x43745)))
 (let ((?x43765 (- (+ (- (- (- (- (- ?x43746 ?x43748) ?x43751) ?x43754) ?x43757) ?x43760) ?x42768) (* (* 3.0 l_0_13_53) l_0_13_53))))
 (let ((?x43778 (+ (- (+ (- (+ (- (+ ?x43765 ?x42771) ?x43768) ?x42774) ?x43772) ?x42777) ?x43776) ?x42780)))
 (let ((?x43793 (+ (- (+ (- (+ (- (- ?x43778 ?x43780) ?x42786) ?x43784) ?x42789) ?x43788) ?x42792) ?x43792)))
 (= (+ (- (+ (- ?x43793 ?x42795) ?x43796) ?x42798) ?x43800) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42951 (* l_0_13_84 l_0_13_84)))
 (let ((?x42948 (* l_0_13_83 l_0_13_83)))
 (let ((?x42945 (* l_0_13_82 l_0_13_82)))
 (let ((?x42942 (* l_0_13_81 l_0_13_81)))
 (let ((?x42939 (* l_0_13_80 l_0_13_80)))
 (let ((?x42936 (* l_0_13_79 l_0_13_79)))
 (let ((?x43877 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x43874 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x43871 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x43868 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x43865 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42782 (* ?x41618 l_0_13_74)))
 (let ((?x31991 (* l_0_13_63 l_0_13_63)))
 (let ((?x21330 (* l_0_13_62 l_0_13_62)))
 (let ((?x21243 (* l_0_13_61 l_0_13_61)))
 (let ((?x21323 (* l_0_13_60 l_0_13_60)))
 (let ((?x31950 (* l_0_13_59 l_0_13_59)))
 (let ((?x31980 (* l_0_13_58 l_0_13_58)))
 (let ((?x43855 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x43852 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x43849 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x43846 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x43843 (* (* 6.0 l_0_13_53) l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42764 (* ?x41611 l_0_13_53)))
 (let ((?x42762 (* (* 12.0 l_0_13_36) l_0_13_41)))
 (let ((?x42759 (* (* 12.0 l_0_13_35) l_0_13_40)))
 (let ((?x42756 (* (* 12.0 l_0_13_34) l_0_13_39)))
 (let ((?x42753 (* (* 12.0 l_0_13_33) l_0_13_38)))
 (let ((?x42750 (* (* 12.0 l_0_13_32) l_0_13_37)))
 (let ((?x42730 (* (* 12.0 l_0_13_15) l_0_13_20)))
 (let ((?x43204 (* (* 2.0 l_0_13_141) l_0_13_146)))
 (let ((?x43201 (* (* 2.0 l_0_13_140) l_0_13_145)))
 (let ((?x42727 (* (* 12.0 l_0_13_14) l_0_13_19)))
 (let ((?x43198 (* (* 2.0 l_0_13_139) l_0_13_144)))
 (let ((?x43195 (* (* 2.0 l_0_13_138) l_0_13_143)))
 (let ((?x43192 (* (* 2.0 l_0_13_137) l_0_13_142)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x42724 (* ?x42723 l_0_13_18)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x42719 (* ?x41522 l_0_13_17)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x42717 (* ?x41519 l_0_13_16)))
 (let ((?x43833 (+ (+ (+ (+ (+ (+ (+ ?x42717 ?x42719) ?x42724) ?x43192) ?x43195) ?x43198) ?x42727) ?x43201)))
 (let ((?x43840 (- (- (- (- (- (+ (+ ?x43833 ?x43204) ?x42730) ?x42750) ?x42753) ?x42756) ?x42759) ?x42762)))
 (let ((?x43857 (+ (- (- (- (- (- (- ?x43840 ?x42764) ?x43843) ?x43846) ?x43849) ?x43852) ?x43855) ?x31980)))
 (let ((?x43866 (+ (+ (+ (+ (+ (+ (+ ?x43857 ?x31950) ?x21323) ?x21243) ?x21330) ?x31991) ?x42782) ?x43865)))
 (let ((?x43881 (- (- (- (+ (+ (+ (+ ?x43866 ?x43868) ?x43871) ?x43874) ?x43877) ?x42936) ?x42939) ?x42942)))
 (= (- (- (- ?x43881 ?x42945) ?x42948) ?x42951) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43949 (* l_0_13_85 l_0_13_85)))
 (let ((?x42951 (* l_0_13_84 l_0_13_84)))
 (let ((?x43947 (* 3.0 ?x42951)))
 (let ((?x42948 (* l_0_13_83 l_0_13_83)))
 (let ((?x43945 (* 3.0 ?x42948)))
 (let ((?x42945 (* l_0_13_82 l_0_13_82)))
 (let ((?x43943 (* 3.0 ?x42945)))
 (let ((?x42942 (* l_0_13_81 l_0_13_81)))
 (let ((?x43941 (* 3.0 ?x42942)))
 (let ((?x42939 (* l_0_13_80 l_0_13_80)))
 (let ((?x43939 (* 3.0 ?x42939)))
 (let ((?x42936 (* l_0_13_79 l_0_13_79)))
 (let ((?x43937 (* 3.0 ?x42936)))
 (let ((?x41618 (* 6.0 l_0_13_64)))
 (let ((?x42933 (* ?x41618 l_0_13_79)))
 (let ((?x43934 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43931 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43928 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43925 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43922 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x43919 (* (* 3.0 l_0_13_58) l_0_13_58)))
 (let ((?x41611 (* 6.0 l_0_13_43)))
 (let ((?x42912 (* ?x41611 l_0_13_58)))
 (let ((?x42910 (* (* 6.0 l_0_13_42) l_0_13_42)))
 (let ((?x42907 (* (* 6.0 l_0_13_41) l_0_13_41)))
 (let ((?x42904 (* (* 6.0 l_0_13_40) l_0_13_40)))
 (let ((?x42901 (* (* 6.0 l_0_13_39) l_0_13_39)))
 (let ((?x42898 (* (* 6.0 l_0_13_38) l_0_13_38)))
 (let ((?x42895 (* (* 6.0 l_0_13_37) l_0_13_37)))
 (let ((?x42444 (* l_0_13_21 l_0_13_21)))
 (let ((?x42889 (* 6.0 ?x42444)))
 (let ((?x42442 (* l_0_13_20 l_0_13_20)))
 (let ((?x42877 (* 6.0 ?x42442)))
 (let ((?x42440 (* l_0_13_19 l_0_13_19)))
 (let ((?x42875 (* 6.0 ?x42440)))
 (let ((?x42438 (* l_0_13_18 l_0_13_18)))
 (let ((?x42858 (* 6.0 ?x42438)))
 (let ((?x42436 (* l_0_13_17 l_0_13_17)))
 (let ((?x42855 (* 6.0 ?x42436)))
 (let ((?x43904 (* l_0_13_169 l_0_13_169)))
 (let ((?x42433 (* l_0_13_16 l_0_13_16)))
 (let ((?x31898 (* 6.0 ?x42433)))
 (let ((?x43901 (* l_0_13_148 l_0_13_148)))
 (let ((?x43289 (* l_0_13_147 l_0_13_147)))
 (let ((?x43287 (* l_0_13_146 l_0_13_146)))
 (let ((?x43285 (* l_0_13_145 l_0_13_145)))
 (let ((?x43283 (* l_0_13_144 l_0_13_144)))
 (let ((?x43281 (* l_0_13_143 l_0_13_143)))
 (let ((?x43896 (+ (+ (* (- l_0_13_106) l_0_13_106) (* l_0_13_142 l_0_13_142)) ?x43281)))
 (let ((?x43905 (- (+ (+ (+ (+ (+ (+ ?x43896 ?x43283) ?x43285) ?x43287) ?x43289) ?x43901) ?x31898) ?x43904)))
 (let ((?x43912 (- (- (+ (+ (+ (+ (+ ?x43905 ?x42855) ?x42858) ?x42875) ?x42877) ?x42889) ?x42895) ?x42898)))
 (let ((?x43923 (- (- (- (- (- (- (- ?x43912 ?x42901) ?x42904) ?x42907) ?x42910) ?x42912) ?x43919) ?x43922)))
 (let ((?x43940 (+ (+ (+ (- (- (- (- ?x43923 ?x43925) ?x43928) ?x43931) ?x43934) ?x42933) ?x43937) ?x43939)))
 (= (+ (+ (+ (+ (+ ?x43940 ?x43941) ?x43943) ?x43945) ?x43947) ?x43949) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x43982 (* ?x41206 l_0_13_67)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x43980 (* ?x41203 l_0_13_46)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42514 (* ?x19929 l_0_13_25)))
 (let ((?x43978 (- (- (* (* 12.0 l_0_13_1) l_0_13_4) (* l_0_13_127 l_0_13_127)) (* (* 2.0 l_0_13_190) l_0_13_193))))
 (= (+ (- (- ?x43978 ?x42514) ?x43980) ?x43982) 0.0)))))))))
(assert
 (let ((?x43949 (* l_0_13_85 l_0_13_85)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x43993 (* ?x41206 l_0_13_70)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x33286 (* ?x41203 l_0_13_49)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42621 (* ?x19929 l_0_13_28)))
 (let ((?x43904 (* l_0_13_169 l_0_13_169)))
 (let ((?x43901 (* l_0_13_148 l_0_13_148)))
 (let ((?x21975 (- (+ (* (* 12.0 l_0_13_1) l_0_13_7) (* l_0_13_106 l_0_13_106)) ?x43901)))
 (let ((?x33287 (- (- (- (+ ?x21975 ?x43904) (* (* 2.0 l_0_13_190) l_0_13_196)) ?x42621) ?x33286)))
 (= (- (+ ?x33287 ?x43993) ?x43949) 0.0)))))))))))))
(assert
 (let ((?x41184 (* l_0_13_64 l_0_13_64)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x44012 (* ?x41206 l_0_13_74)))
 (let ((?x19917 (* l_0_13_43 l_0_13_43)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x44009 (* ?x41203 l_0_13_53)))
 (let ((?x19929 (* 12.0 l_0_13_22)))
 (let ((?x42747 (* ?x19929 l_0_13_32)))
 (let ((?x30708 (* 12.0 l_0_13_1)))
 (let ((?x42716 (* ?x30708 l_0_13_11)))
 (let ((?x44011 (+ (- (- (- ?x42716 (* (* 2.0 l_0_13_190) l_0_13_200)) ?x42747) ?x44009) ?x19917)))
 (= (- (+ ?x44011 ?x44012) ?x41184) 0.0)))))))))))))
(assert
 (let ((?x41862 (* l_0_13_6 l_0_13_6)))
 (let ((?x42990 (* 6.0 ?x41862)))
 (let ((?x41860 (* l_0_13_5 l_0_13_5)))
 (let ((?x42988 (* 6.0 ?x41860)))
 (let ((?x41858 (* l_0_13_4 l_0_13_4)))
 (let ((?x42977 (* 6.0 ?x41858)))
 (let ((?x42975 (* (* 6.0 l_0_13_27) l_0_13_27)))
 (let ((?x42972 (* (* 6.0 l_0_13_26) l_0_13_26)))
 (let ((?x42969 (* (* 6.0 l_0_13_25) l_0_13_25)))
 (let ((?x44018 (* l_0_13_195 l_0_13_195)))
 (let ((?x21974 (* l_0_13_194 l_0_13_194)))
 (let ((?x33339 (* l_0_13_193 l_0_13_193)))
 (let ((?x44020 (- (- (- (- (* (* (- 2.0) l_0_13_127) l_0_13_130) ?x33339) ?x21974) ?x44018) ?x42969)))
 (let ((?x44026 (- (+ (- (- ?x44020 ?x42972) ?x42975) ?x42977) (* (* 1.0 l_0_13_46) l_0_13_46))))
 (let ((?x44032 (- (- ?x44026 (* (* 1.0 l_0_13_47) l_0_13_47)) (* (* 1.0 l_0_13_48) l_0_13_48))))
 (let ((?x44038 (+ (+ (+ (+ ?x44032 ?x42988) ?x42990) (* 1.0 (* l_0_13_67 l_0_13_67))) (* 1.0 (* l_0_13_68 l_0_13_68)))))
 (= (+ ?x44038 (* 1.0 (* l_0_13_69 l_0_13_69))) 0.0))))))))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44078 (* ?x41447 l_0_13_88)))
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x44076 (* ?x42544 l_0_13_72)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x44074 (* ?x42541 l_0_13_71)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x44072 (* ?x42538 l_0_13_70)))
 (let ((?x43099 (* (* 12.0 l_0_13_6) l_0_13_9)))
 (let ((?x43096 (* (* 12.0 l_0_13_5) l_0_13_8)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x44068 (* ?x42533 l_0_13_51)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x44066 (* ?x42530 l_0_13_50)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x44064 (* ?x42527 l_0_13_49)))
 (let ((?x43084 (* (* 12.0 l_0_13_4) l_0_13_7)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x43081 (* ?x42522 l_0_13_30)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x43079 (* ?x42519 l_0_13_29)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x43077 (* ?x42516 l_0_13_28)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44052 (* ?x41422 l_0_13_172)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44050 (* ?x41419 l_0_13_151)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42597 (* ?x41330 l_0_13_133)))
 (let ((?x44055 (- (+ (- (- (* (* 2.0 l_0_13_106) l_0_13_109) ?x42597) ?x44050) ?x44052) (* (* 2.0 l_0_13_193) l_0_13_196))))
 (let ((?x44059 (- (- ?x44055 (* (* 2.0 l_0_13_194) l_0_13_197)) (* (* 2.0 l_0_13_195) l_0_13_198))))
 (let ((?x44069 (- (- (- (+ (- (- (- ?x44059 ?x43077) ?x43079) ?x43081) ?x43084) ?x44064) ?x44066) ?x44068)))
 (= (- (+ (+ (+ (+ (+ ?x44069 ?x43096) ?x43099) ?x44072) ?x44074) ?x44076) ?x44078) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x44138 (* ?x42544 l_0_13_76)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x44136 (* ?x42541 l_0_13_75)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x44134 (* ?x42538 l_0_13_74)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x43982 (* ?x41206 l_0_13_67)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x44131 (* ?x42533 l_0_13_55)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x44129 (* ?x42530 l_0_13_54)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x44127 (* ?x42527 l_0_13_53)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x43980 (* ?x41203 l_0_13_46)))
 (let ((?x42522 (* 12.0 l_0_13_27)))
 (let ((?x43210 (* ?x42522 l_0_13_34)))
 (let ((?x42519 (* 12.0 l_0_13_26)))
 (let ((?x43208 (* ?x42519 l_0_13_33)))
 (let ((?x42516 (* 12.0 l_0_13_25)))
 (let ((?x43206 (* ?x42516 l_0_13_32)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x43164 (* ?x42723 l_0_13_6)))
 (let ((?x41330 (* 2.0 l_0_13_127)))
 (let ((?x42721 (* ?x41330 l_0_13_137)))
 (let ((?x43162 (+ (* (* 12.0 l_0_13_11) l_0_13_4) (* (* 12.0 l_0_13_12) l_0_13_5))))
 (let ((?x44120 (- (- (+ (- ?x43162 ?x42721) ?x43164) (* (* 2.0 l_0_13_193) l_0_13_200)) (* (* 2.0 l_0_13_194) l_0_13_201))))
 (let ((?x44125 (- (- (- (- ?x44120 (* (* 2.0 l_0_13_195) l_0_13_202)) ?x43206) ?x43208) ?x43210)))
 (let ((?x44137 (+ (+ (- (- (- (- (+ ?x44125 ?x43980) ?x44127) ?x44129) ?x44131) ?x43982) ?x44134) ?x44136)))
 (= (+ ?x44137 ?x44138) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x42105 (* l_0_13_9 l_0_13_9)))
 (let ((?x43431 (* 6.0 ?x42105)))
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44204 (* ?x41447 l_0_13_91)))
 (let ((?x42099 (* l_0_13_8 l_0_13_8)))
 (let ((?x43429 (* 6.0 ?x42099)))
 (let ((?x42097 (* l_0_13_7 l_0_13_7)))
 (let ((?x43415 (* 6.0 ?x42097)))
 (let ((?x43401 (* (* 6.0 l_0_13_31) l_0_13_31)))
 (let ((?x43398 (* (* 6.0 l_0_13_30) l_0_13_30)))
 (let ((?x43395 (* (* 6.0 l_0_13_29) l_0_13_29)))
 (let ((?x43392 (* (* 6.0 l_0_13_28) l_0_13_28)))
 (let ((?x44176 (* l_0_13_199 l_0_13_199)))
 (let ((?x44174 (* l_0_13_198 l_0_13_198)))
 (let ((?x44172 (* l_0_13_197 l_0_13_197)))
 (let ((?x44170 (* l_0_13_196 l_0_13_196)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44168 (* ?x41422 l_0_13_175)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44161 (* ?x41419 l_0_13_154)))
 (let ((?x42109 (* l_0_13_10 l_0_13_10)))
 (let ((?x43337 (* 6.0 ?x42109)))
 (let ((?x44171 (- (+ (- (+ ?x43337 (* (* 2.0 l_0_13_106) l_0_13_112)) ?x44161) ?x44168) ?x44170)))
 (let ((?x44181 (- (- (- (- (- (- (- ?x44171 ?x44172) ?x44174) ?x44176) ?x43392) ?x43395) ?x43398) ?x43401)))
 (let ((?x44187 (- (- ?x44181 (* (* 1.0 l_0_13_49) l_0_13_49)) (* (* 1.0 l_0_13_50) l_0_13_50))))
 (let ((?x44193 (- (- ?x44187 (* (* 1.0 l_0_13_51) l_0_13_51)) (* (* 1.0 l_0_13_52) l_0_13_52))))
 (let ((?x44198 (+ (+ (+ ?x44193 ?x43415) (* 1.0 (* l_0_13_70 l_0_13_70))) (* 1.0 (* l_0_13_71 l_0_13_71)))))
 (let ((?x44202 (+ (+ ?x44198 (* 1.0 (* l_0_13_72 l_0_13_72))) (* 1.0 (* l_0_13_73 l_0_13_73)))))
 (= (+ (- (+ ?x44202 ?x43429) ?x44204) ?x43431) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44289 (* ?x41447 l_0_13_95)))
 (let ((?x42660 (* 2.0 l_0_13_73)))
 (let ((?x44287 (* ?x42660 l_0_13_77)))
 (let ((?x42657 (* 2.0 l_0_13_72)))
 (let ((?x44285 (* ?x42657 l_0_13_76)))
 (let ((?x42654 (* 2.0 l_0_13_71)))
 (let ((?x44283 (* ?x42654 l_0_13_75)))
 (let ((?x42651 (* 2.0 l_0_13_70)))
 (let ((?x44281 (* ?x42651 l_0_13_74)))
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x43993 (* ?x41206 l_0_13_70)))
 (let ((?x42646 (* 2.0 l_0_13_52)))
 (let ((?x44278 (* ?x42646 l_0_13_56)))
 (let ((?x42643 (* 2.0 l_0_13_51)))
 (let ((?x44276 (* ?x42643 l_0_13_55)))
 (let ((?x42640 (* 2.0 l_0_13_50)))
 (let ((?x44274 (* ?x42640 l_0_13_54)))
 (let ((?x42637 (* 2.0 l_0_13_49)))
 (let ((?x44272 (* ?x42637 l_0_13_53)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x33286 (* ?x41203 l_0_13_49)))
 (let ((?x42632 (* 12.0 l_0_13_31)))
 (let ((?x43558 (* ?x42632 l_0_13_35)))
 (let ((?x42629 (* 12.0 l_0_13_30)))
 (let ((?x43556 (* ?x42629 l_0_13_34)))
 (let ((?x42626 (* 12.0 l_0_13_29)))
 (let ((?x43554 (* ?x42626 l_0_13_33)))
 (let ((?x42623 (* 12.0 l_0_13_28)))
 (let ((?x43552 (* ?x42623 l_0_13_32)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44257 (* ?x41422 l_0_13_179)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44255 (* ?x41419 l_0_13_158)))
 (let ((?x42723 (* 12.0 l_0_13_13)))
 (let ((?x43512 (* ?x42723 l_0_13_9)))
 (let ((?x41522 (* 12.0 l_0_13_12)))
 (let ((?x43507 (* ?x41522 l_0_13_8)))
 (let ((?x41519 (* 12.0 l_0_13_11)))
 (let ((?x43493 (* ?x41519 l_0_13_7)))
 (let ((?x42590 (* 12.0 l_0_13_10)))
 (let ((?x32566 (* ?x42590 l_0_13_14)))
 (let ((?x44254 (+ (+ (+ (+ ?x32566 (* (* 2.0 l_0_13_106) l_0_13_116)) ?x43493) ?x43507) ?x43512)))
 (let ((?x44262 (- (- (+ (- ?x44254 ?x44255) ?x44257) (* (* 2.0 l_0_13_196) l_0_13_200)) (* (* 2.0 l_0_13_197) l_0_13_201))))
 (let ((?x44266 (- (- ?x44262 (* (* 2.0 l_0_13_198) l_0_13_202)) (* (* 2.0 l_0_13_199) l_0_13_203))))
 (let ((?x44275 (- (- (+ (- (- (- (- ?x44266 ?x43552) ?x43554) ?x43556) ?x43558) ?x33286) ?x44272) ?x44274)))
 (let ((?x44288 (+ (+ (+ (+ (- (- (- ?x44275 ?x44276) ?x44278) ?x43993) ?x44281) ?x44283) ?x44285) ?x44287)))
 (= (- ?x44288 ?x44289) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41206 (* 2.0 l_0_13_64)))
 (let ((?x44012 (* ?x41206 l_0_13_74)))
 (let ((?x41203 (* 2.0 l_0_13_43)))
 (let ((?x44009 (* ?x41203 l_0_13_53)))
 (let ((?x43760 (* (* 6.0 l_0_13_36) l_0_13_36)))
 (let ((?x43757 (* (* 6.0 l_0_13_35) l_0_13_35)))
 (let ((?x43754 (* (* 6.0 l_0_13_34) l_0_13_34)))
 (let ((?x43751 (* (* 6.0 l_0_13_33) l_0_13_33)))
 (let ((?x43748 (* (* 6.0 l_0_13_32) l_0_13_32)))
 (let ((?x44345 (* l_0_13_204 l_0_13_204)))
 (let ((?x44343 (* l_0_13_203 l_0_13_203)))
 (let ((?x44341 (* l_0_13_202 l_0_13_202)))
 (let ((?x44339 (* l_0_13_201 l_0_13_201)))
 (let ((?x44337 (* l_0_13_200 l_0_13_200)))
 (let ((?x42313 (* l_0_13_15 l_0_13_15)))
 (let ((?x43745 (* 6.0 ?x42313)))
 (let ((?x42311 (* l_0_13_14 l_0_13_14)))
 (let ((?x43739 (* 6.0 ?x42311)))
 (let ((?x4666 (+ (* 6.0 (* l_0_13_11 l_0_13_11)) (* 6.0 (* l_0_13_12 l_0_13_12)))))
 (let ((?x43732 (+ ?x4666 (* 6.0 (* l_0_13_13 l_0_13_13)))))
 (let ((?x44346 (- (- (- (- (- (+ (+ ?x43732 ?x43739) ?x43745) ?x44337) ?x44339) ?x44341) ?x44343) ?x44345)))
 (let ((?x44355 (- (+ (- (- (- (- (- ?x44346 ?x43748) ?x43751) ?x43754) ?x43757) ?x43760) ?x44009) (* (* 1.0 l_0_13_53) l_0_13_53))))
 (let ((?x44361 (- (- ?x44355 (* (* 1.0 l_0_13_54) l_0_13_54)) (* (* 1.0 l_0_13_55) l_0_13_55))))
 (let ((?x44367 (- (- ?x44361 (* (* 1.0 l_0_13_56) l_0_13_56)) (* (* 1.0 l_0_13_57) l_0_13_57))))
 (let ((?x44372 (+ (+ (- ?x44367 ?x44012) (* 1.0 (* l_0_13_74 l_0_13_74))) (* 1.0 (* l_0_13_75 l_0_13_75)))))
 (let ((?x44376 (+ (+ ?x44372 (* 1.0 (* l_0_13_76 l_0_13_76))) (* 1.0 (* l_0_13_77 l_0_13_77)))))
 (= (+ ?x44376 (* 1.0 (* l_0_13_78 l_0_13_78))) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x41302 (* l_0_13_66 l_0_13_66)))
 (let ((?x41816 (* 3.0 ?x41302)))
 (let ((?x41299 (* l_0_13_65 l_0_13_65)))
 (let ((?x41814 (* 3.0 ?x41299)))
 (let ((?x41812 (* (* 3.0 l_0_13_45) l_0_13_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_13_44) l_0_13_44) ?x41812) ?x41814) ?x41816) 0.0)))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42040 (* ?x42039 l_0_13_68)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42037 (* ?x42036 l_0_13_67)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42034 (* ?x42033 l_0_13_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_13_44) l_0_13_46) ?x42034) ?x42037) ?x42040) 0.0))))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42258 (* ?x42039 l_0_13_71)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42256 (* ?x42036 l_0_13_70)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42254 (* ?x42033 l_0_13_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_13_44) l_0_13_49) ?x42254) ?x42256) ?x42258) 0.0))))))))
(assert
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42381 (* ?x42039 l_0_13_75)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42378 (* ?x42036 l_0_13_74)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42375 (* ?x42033 l_0_13_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_13_44) l_0_13_53) ?x42375) ?x42378) ?x42381) 0.0))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x41448 (* ?x41447 l_0_13_86)))
 (let ((?x42039 (* 6.0 l_0_13_66)))
 (let ((?x42468 (* ?x42039 l_0_13_80)))
 (let ((?x42036 (* 6.0 l_0_13_65)))
 (let ((?x42466 (* ?x42036 l_0_13_79)))
 (let ((?x42033 (* 6.0 l_0_13_45)))
 (let ((?x42463 (* ?x42033 l_0_13_59)))
 (let ((?x42030 (* 6.0 l_0_13_44)))
 (let ((?x42461 (* ?x42030 l_0_13_58)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x41423 (* ?x41422 l_0_13_170)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x41420 (* ?x41419 l_0_13_149)))
 (let ((?x44405 (- (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_107) ?x41420) ?x41423) ?x42461) ?x42463)))
 (= (+ (+ (+ ?x44405 ?x42466) ?x42468) ?x41448) 0.0)))))))))))))))))
(assert
 (let ((?x42998 (* l_0_13_69 l_0_13_69)))
 (let ((?x42999 (* 3.0 ?x42998)))
 (let ((?x42995 (* l_0_13_68 l_0_13_68)))
 (let ((?x42996 (* 3.0 ?x42995)))
 (let ((?x42992 (* l_0_13_67 l_0_13_67)))
 (let ((?x42993 (* 3.0 ?x42992)))
 (let ((?x42986 (* (* 3.0 l_0_13_48) l_0_13_48)))
 (let ((?x42983 (* (* 3.0 l_0_13_47) l_0_13_47)))
 (let ((?x44411 (+ (+ (- (- (* (* (- 3.0) l_0_13_46) l_0_13_46) ?x42983) ?x42986) ?x42993) ?x42996)))
 (= (+ ?x44411 ?x42999) 0.0)))))))))))
(assert
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43108 (* ?x43107 l_0_13_72)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43105 (* ?x43104 l_0_13_71)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43102 (* ?x43101 l_0_13_70)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43093 (* ?x43092 l_0_13_51)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43090 (* ?x43089 l_0_13_50)))
 (let ((?x44421 (+ (+ (- (- (* (* (- 6.0) l_0_13_46) l_0_13_49) ?x43090) ?x43093) ?x43102) ?x43105)))
 (= (+ ?x44421 ?x43108) 0.0)))))))))))))
(assert
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43227 (* ?x43107 l_0_13_76)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43224 (* ?x43104 l_0_13_75)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43221 (* ?x43101 l_0_13_74)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43218 (* ?x43092 l_0_13_55)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43215 (* ?x43089 l_0_13_54)))
 (let ((?x44433 (+ (+ (- (- (* (* (- 6.0) l_0_13_46) l_0_13_53) ?x43215) ?x43218) ?x43221) ?x43224)))
 (= (+ ?x44433 ?x43227) 0.0)))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44078 (* ?x41447 l_0_13_88)))
 (let ((?x43107 (* 6.0 l_0_13_69)))
 (let ((?x43309 (* ?x43107 l_0_13_81)))
 (let ((?x43104 (* 6.0 l_0_13_68)))
 (let ((?x43307 (* ?x43104 l_0_13_80)))
 (let ((?x43101 (* 6.0 l_0_13_67)))
 (let ((?x43305 (* ?x43101 l_0_13_79)))
 (let ((?x43092 (* 6.0 l_0_13_48)))
 (let ((?x43302 (* ?x43092 l_0_13_60)))
 (let ((?x43089 (* 6.0 l_0_13_47)))
 (let ((?x43300 (* ?x43089 l_0_13_59)))
 (let ((?x43086 (* 6.0 l_0_13_46)))
 (let ((?x43298 (* ?x43086 l_0_13_58)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44052 (* ?x41422 l_0_13_172)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44050 (* ?x41419 l_0_13_151)))
 (let ((?x44438 (- (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_109) ?x44050) ?x44052) ?x43298) ?x43300)))
 (= (+ (+ (+ (+ (- ?x44438 ?x43302) ?x43305) ?x43307) ?x43309) ?x44078) 0.0)))))))))))))))))))))
(assert
 (let ((?x43426 (* l_0_13_73 l_0_13_73)))
 (let ((?x43427 (* 3.0 ?x43426)))
 (let ((?x43423 (* l_0_13_72 l_0_13_72)))
 (let ((?x43424 (* 3.0 ?x43423)))
 (let ((?x43420 (* l_0_13_71 l_0_13_71)))
 (let ((?x43421 (* 3.0 ?x43420)))
 (let ((?x43417 (* l_0_13_70 l_0_13_70)))
 (let ((?x43418 (* 3.0 ?x43417)))
 (let ((?x43413 (* (* 3.0 l_0_13_52) l_0_13_52)))
 (let ((?x43410 (* (* 3.0 l_0_13_51) l_0_13_51)))
 (let ((?x43407 (* (* 3.0 l_0_13_50) l_0_13_50)))
 (let ((?x44445 (+ (- (- (- (* (* (- 3.0) l_0_13_49) l_0_13_49) ?x43407) ?x43410) ?x43413) ?x43418)))
 (= (+ (+ (+ ?x44445 ?x43421) ?x43424) ?x43427) 0.0))))))))))))))
(assert
 (let ((?x43588 (* 6.0 l_0_13_73)))
 (let ((?x43589 (* ?x43588 l_0_13_77)))
 (let ((?x43584 (* 6.0 l_0_13_72)))
 (let ((?x43585 (* ?x43584 l_0_13_76)))
 (let ((?x43580 (* 6.0 l_0_13_71)))
 (let ((?x43581 (* ?x43580 l_0_13_75)))
 (let ((?x43576 (* 6.0 l_0_13_70)))
 (let ((?x43577 (* ?x43576 l_0_13_74)))
 (let ((?x43572 (* 6.0 l_0_13_52)))
 (let ((?x43573 (* ?x43572 l_0_13_56)))
 (let ((?x43568 (* 6.0 l_0_13_51)))
 (let ((?x43569 (* ?x43568 l_0_13_55)))
 (let ((?x43564 (* 6.0 l_0_13_50)))
 (let ((?x43565 (* ?x43564 l_0_13_54)))
 (let ((?x44459 (+ (- (- (- (* (* (- 6.0) l_0_13_49) l_0_13_53) ?x43565) ?x43569) ?x43573) ?x43577)))
 (= (+ (+ (+ ?x44459 ?x43581) ?x43585) ?x43589) 0.0)))))))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44204 (* ?x41447 l_0_13_91)))
 (let ((?x43588 (* 6.0 l_0_13_73)))
 (let ((?x43709 (* ?x43588 l_0_13_82)))
 (let ((?x43584 (* 6.0 l_0_13_72)))
 (let ((?x43707 (* ?x43584 l_0_13_81)))
 (let ((?x43580 (* 6.0 l_0_13_71)))
 (let ((?x43705 (* ?x43580 l_0_13_80)))
 (let ((?x43576 (* 6.0 l_0_13_70)))
 (let ((?x43703 (* ?x43576 l_0_13_79)))
 (let ((?x43572 (* 6.0 l_0_13_52)))
 (let ((?x43700 (* ?x43572 l_0_13_61)))
 (let ((?x43568 (* 6.0 l_0_13_51)))
 (let ((?x43698 (* ?x43568 l_0_13_60)))
 (let ((?x43564 (* 6.0 l_0_13_50)))
 (let ((?x43696 (* ?x43564 l_0_13_59)))
 (let ((?x43560 (* 6.0 l_0_13_49)))
 (let ((?x43694 (* ?x43560 l_0_13_58)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44168 (* ?x41422 l_0_13_175)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44161 (* ?x41419 l_0_13_154)))
 (let ((?x44472 (- (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_112) ?x44161) ?x44168) ?x43694) ?x43696)))
 (let ((?x44479 (+ (+ (+ (+ (+ (- (- ?x44472 ?x43698) ?x43700) ?x43703) ?x43705) ?x43707) ?x43709) ?x44204)))
 (= ?x44479 0.0))))))))))))))))))))))))))
(assert
 (let ((?x43799 (* l_0_13_78 l_0_13_78)))
 (let ((?x43800 (* 3.0 ?x43799)))
 (let ((?x43795 (* l_0_13_77 l_0_13_77)))
 (let ((?x43796 (* 3.0 ?x43795)))
 (let ((?x43791 (* l_0_13_76 l_0_13_76)))
 (let ((?x43792 (* 3.0 ?x43791)))
 (let ((?x43787 (* l_0_13_75 l_0_13_75)))
 (let ((?x43788 (* 3.0 ?x43787)))
 (let ((?x43783 (* l_0_13_74 l_0_13_74)))
 (let ((?x43784 (* 3.0 ?x43783)))
 (let ((?x43780 (* (* 3.0 l_0_13_57) l_0_13_57)))
 (let ((?x43776 (* (* 3.0 l_0_13_56) l_0_13_56)))
 (let ((?x43772 (* (* 3.0 l_0_13_55) l_0_13_55)))
 (let ((?x43768 (* (* 3.0 l_0_13_54) l_0_13_54)))
 (let ((?x44486 (- (- (- (- (* (* (- 3.0) l_0_13_53) l_0_13_53) ?x43768) ?x43772) ?x43776) ?x43780)))
 (= (+ (+ (+ (+ (+ ?x44486 ?x43784) ?x43788) ?x43792) ?x43796) ?x43800) 0.0)))))))))))))))))
(assert
 (let ((?x41447 (* 2.0 l_0_13_85)))
 (let ((?x44289 (* ?x41447 l_0_13_95)))
 (let ((?x43877 (* (* 6.0 l_0_13_78) l_0_13_83)))
 (let ((?x43874 (* (* 6.0 l_0_13_77) l_0_13_82)))
 (let ((?x43871 (* (* 6.0 l_0_13_76) l_0_13_81)))
 (let ((?x43868 (* (* 6.0 l_0_13_75) l_0_13_80)))
 (let ((?x43865 (* (* 6.0 l_0_13_74) l_0_13_79)))
 (let ((?x43855 (* (* 6.0 l_0_13_57) l_0_13_62)))
 (let ((?x43852 (* (* 6.0 l_0_13_56) l_0_13_61)))
 (let ((?x43849 (* (* 6.0 l_0_13_55) l_0_13_60)))
 (let ((?x43846 (* (* 6.0 l_0_13_54) l_0_13_59)))
 (let ((?x43843 (* (* 6.0 l_0_13_53) l_0_13_58)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x44257 (* ?x41422 l_0_13_179)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x44255 (* ?x41419 l_0_13_158)))
 (let ((?x44500 (- (- (- (+ (* (* (- 2.0) l_0_13_106) l_0_13_116) ?x44255) ?x44257) ?x43843) ?x43846)))
 (let ((?x44507 (+ (+ (+ (+ (- (- (- ?x44500 ?x43849) ?x43852) ?x43855) ?x43865) ?x43868) ?x43871) ?x43874)))
 (= (+ (+ ?x44507 ?x43877) ?x44289) 0.0))))))))))))))))))))
(assert
 (let ((?x42951 (* l_0_13_84 l_0_13_84)))
 (let ((?x43947 (* 3.0 ?x42951)))
 (let ((?x42948 (* l_0_13_83 l_0_13_83)))
 (let ((?x43945 (* 3.0 ?x42948)))
 (let ((?x42945 (* l_0_13_82 l_0_13_82)))
 (let ((?x43943 (* 3.0 ?x42945)))
 (let ((?x42942 (* l_0_13_81 l_0_13_81)))
 (let ((?x43941 (* 3.0 ?x42942)))
 (let ((?x42939 (* l_0_13_80 l_0_13_80)))
 (let ((?x43939 (* 3.0 ?x42939)))
 (let ((?x42936 (* l_0_13_79 l_0_13_79)))
 (let ((?x43937 (* 3.0 ?x42936)))
 (let ((?x43934 (* (* 3.0 l_0_13_63) l_0_13_63)))
 (let ((?x43931 (* (* 3.0 l_0_13_62) l_0_13_62)))
 (let ((?x43928 (* (* 3.0 l_0_13_61) l_0_13_61)))
 (let ((?x43925 (* (* 3.0 l_0_13_60) l_0_13_60)))
 (let ((?x43922 (* (* 3.0 l_0_13_59) l_0_13_59)))
 (let ((?x43919 (* (* 3.0 l_0_13_58) l_0_13_58)))
 (let ((?x41422 (* 2.0 l_0_13_169)))
 (let ((?x42603 (* ?x41422 l_0_13_184)))
 (let ((?x41419 (* 2.0 l_0_13_148)))
 (let ((?x42599 (* ?x41419 l_0_13_163)))
 (let ((?x41408 (* 2.0 l_0_13_106)))
 (let ((?x42595 (* ?x41408 l_0_13_121)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x42593 (* ?x42214 l_0_13_85)))
 (let ((?x33882 (- (- (- (- (- (+ (- ?x42593 ?x42595) ?x42599) ?x42603) ?x43919) ?x43922) ?x43925) ?x43928)))
 (let ((?x33809 (+ (+ (+ (+ (+ (- (- ?x33882 ?x43931) ?x43934) ?x43937) ?x43939) ?x43941) ?x43943) ?x43945)))
 (= (+ ?x33809 ?x43947) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42998 (* l_0_13_69 l_0_13_69)))
 (let ((?x42995 (* l_0_13_68 l_0_13_68)))
 (let ((?x42992 (* l_0_13_67 l_0_13_67)))
 (let ((?x21376 (* l_0_13_48 l_0_13_48)))
 (let ((?x32092 (* l_0_13_47 l_0_13_47)))
 (let ((?x32087 (* l_0_13_46 l_0_13_46)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x43189 (* ?x42963 l_0_13_139)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x43187 (* ?x42958 l_0_13_138)))
 (let ((?x34019 (+ (+ (- (- (* (* (- 2.0) l_0_13_130) l_0_13_137) ?x43187) ?x43189) ?x32087) ?x32092)))
 (= (- (- (- (+ ?x34019 ?x21376) ?x42992) ?x42995) ?x42998) 0.0)))))))))))))
(assert
 (let ((?x44546 (* 2.0 l_0_13_90)))
 (let ((?x44547 (* ?x44546 l_0_13_97)))
 (let ((?x44543 (* 2.0 l_0_13_89)))
 (let ((?x44544 (* ?x44543 l_0_13_96)))
 (let ((?x44540 (* 2.0 l_0_13_88)))
 (let ((?x44541 (* ?x44540 l_0_13_95)))
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x44076 (* ?x42544 l_0_13_72)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x44074 (* ?x42541 l_0_13_71)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x44072 (* ?x42538 l_0_13_70)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x44068 (* ?x42533 l_0_13_51)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x44066 (* ?x42530 l_0_13_50)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x44064 (* ?x42527 l_0_13_49)))
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x44532 (* ?x43074 l_0_13_181)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x44530 (* ?x43071 l_0_13_180)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x44528 (* ?x43068 l_0_13_179)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x44526 (* ?x43065 l_0_13_160)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x44524 (* ?x43062 l_0_13_159)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x44522 (* ?x43059 l_0_13_158)))
 (let ((?x43056 (* 2.0 l_0_13_136)))
 (let ((?x43520 (* ?x43056 l_0_13_140)))
 (let ((?x43053 (* 2.0 l_0_13_135)))
 (let ((?x43518 (* ?x43053 l_0_13_139)))
 (let ((?x43050 (* 2.0 l_0_13_134)))
 (let ((?x43516 (* ?x43050 l_0_13_138)))
 (let ((?x43047 (* 2.0 l_0_13_133)))
 (let ((?x43514 (* ?x43047 l_0_13_137)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x44516 (* ?x43037 l_0_13_118)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x22985 (* ?x43034 l_0_13_117)))
 (let ((?x44519 (- (- (+ (+ (* (* 2.0 l_0_13_109) l_0_13_116) ?x22985) ?x44516) ?x43514) ?x43516)))
 (let ((?x44531 (+ (+ (- (- (- (- (- ?x44519 ?x43518) ?x43520) ?x44522) ?x44524) ?x44526) ?x44528) ?x44530)))
 (let ((?x44539 (- (- (- (+ (+ (+ (+ ?x44531 ?x44532) ?x44064) ?x44066) ?x44068) ?x44072) ?x44074) ?x44076)))
 (= (- (- (- ?x44539 ?x44541) ?x44544) ?x44547) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42544 (* 2.0 l_0_13_69)))
 (let ((?x44138 (* ?x42544 l_0_13_76)))
 (let ((?x42541 (* 2.0 l_0_13_68)))
 (let ((?x44136 (* ?x42541 l_0_13_75)))
 (let ((?x42538 (* 2.0 l_0_13_67)))
 (let ((?x44134 (* ?x42538 l_0_13_74)))
 (let ((?x42533 (* 2.0 l_0_13_48)))
 (let ((?x44131 (* ?x42533 l_0_13_55)))
 (let ((?x42530 (* 2.0 l_0_13_47)))
 (let ((?x44129 (* ?x42530 l_0_13_54)))
 (let ((?x42527 (* 2.0 l_0_13_46)))
 (let ((?x44127 (* ?x42527 l_0_13_53)))
 (let ((?x43743 (* l_0_13_141 l_0_13_141)))
 (let ((?x43741 (* l_0_13_140 l_0_13_140)))
 (let ((?x43737 (* l_0_13_139 l_0_13_139)))
 (let ((?x23255 (- (- (* (- l_0_13_137) l_0_13_137) (* l_0_13_138 l_0_13_138)) ?x43737)))
 (let ((?x44558 (- (- (+ (+ (+ (- (- ?x23255 ?x43741) ?x43743) ?x44127) ?x44129) ?x44131) ?x44134) ?x44136)))
 (= (- ?x44558 ?x44138) 0.0)))))))))))))))))))
(assert
 (let ((?x44597 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x44594 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x44591 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x44588 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x43426 (* l_0_13_73 l_0_13_73)))
 (let ((?x43423 (* l_0_13_72 l_0_13_72)))
 (let ((?x43420 (* l_0_13_71 l_0_13_71)))
 (let ((?x43417 (* l_0_13_70 l_0_13_70)))
 (let ((?x32560 (* l_0_13_52 l_0_13_52)))
 (let ((?x43476 (* l_0_13_51 l_0_13_51)))
 (let ((?x32551 (* l_0_13_50 l_0_13_50)))
 (let ((?x32548 (* l_0_13_49 l_0_13_49)))
 (let ((?x43388 (* 2.0 l_0_13_178)))
 (let ((?x44577 (* ?x43388 l_0_13_182)))
 (let ((?x43385 (* 2.0 l_0_13_177)))
 (let ((?x44575 (* ?x43385 l_0_13_181)))
 (let ((?x43382 (* 2.0 l_0_13_176)))
 (let ((?x44573 (* ?x43382 l_0_13_180)))
 (let ((?x43379 (* 2.0 l_0_13_175)))
 (let ((?x44571 (* ?x43379 l_0_13_179)))
 (let ((?x43376 (* 2.0 l_0_13_157)))
 (let ((?x44569 (* ?x43376 l_0_13_161)))
 (let ((?x43373 (* 2.0 l_0_13_156)))
 (let ((?x44567 (* ?x43373 l_0_13_160)))
 (let ((?x43370 (* 2.0 l_0_13_155)))
 (let ((?x44565 (* ?x43370 l_0_13_159)))
 (let ((?x43367 (* 2.0 l_0_13_154)))
 (let ((?x44563 (* ?x43367 l_0_13_158)))
 (let ((?x43356 (* 2.0 l_0_13_115)))
 (let ((?x7111 (* ?x43356 l_0_13_119)))
 (let ((?x43353 (* 2.0 l_0_13_114)))
 (let ((?x23412 (* ?x43353 l_0_13_118)))
 (let ((?x43350 (* 2.0 l_0_13_113)))
 (let ((?x23409 (* ?x43350 l_0_13_117)))
 (let ((?x44564 (- (+ (+ (+ (* (* 2.0 l_0_13_112) l_0_13_116) ?x23409) ?x23412) ?x7111) ?x44563)))
 (let ((?x44578 (+ (+ (+ (+ (- (- (- ?x44564 ?x44565) ?x44567) ?x44569) ?x44571) ?x44573) ?x44575) ?x44577)))
 (let ((?x44585 (- (- (- (+ (+ (+ (+ ?x44578 ?x32548) ?x32551) ?x43476) ?x32560) ?x43417) ?x43420) ?x43423)))
 (= (- (- (- (- (- ?x44585 ?x43426) ?x44588) ?x44591) ?x44594) ?x44597) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44690 (* l_0_13_99 l_0_13_99)))
 (let ((?x44688 (* l_0_13_98 l_0_13_98)))
 (let ((?x44686 (* l_0_13_97 l_0_13_97)))
 (let ((?x44684 (* l_0_13_96 l_0_13_96)))
 (let ((?x44682 (* l_0_13_95 l_0_13_95)))
 (let ((?x42660 (* 2.0 l_0_13_73)))
 (let ((?x44287 (* ?x42660 l_0_13_77)))
 (let ((?x42657 (* 2.0 l_0_13_72)))
 (let ((?x44285 (* ?x42657 l_0_13_76)))
 (let ((?x42654 (* 2.0 l_0_13_71)))
 (let ((?x44283 (* ?x42654 l_0_13_75)))
 (let ((?x42651 (* 2.0 l_0_13_70)))
 (let ((?x44281 (* ?x42651 l_0_13_74)))
 (let ((?x42646 (* 2.0 l_0_13_52)))
 (let ((?x44278 (* ?x42646 l_0_13_56)))
 (let ((?x42643 (* 2.0 l_0_13_51)))
 (let ((?x44276 (* ?x42643 l_0_13_55)))
 (let ((?x42640 (* 2.0 l_0_13_50)))
 (let ((?x44274 (* ?x42640 l_0_13_54)))
 (let ((?x42637 (* 2.0 l_0_13_49)))
 (let ((?x44272 (* ?x42637 l_0_13_53)))
 (let ((?x44672 (* l_0_13_183 l_0_13_183)))
 (let ((?x44670 (* l_0_13_182 l_0_13_182)))
 (let ((?x44668 (* l_0_13_181 l_0_13_181)))
 (let ((?x44666 (* l_0_13_180 l_0_13_180)))
 (let ((?x44664 (* l_0_13_179 l_0_13_179)))
 (let ((?x44662 (* l_0_13_162 l_0_13_162)))
 (let ((?x44660 (* l_0_13_161 l_0_13_161)))
 (let ((?x44658 (* l_0_13_160 l_0_13_160)))
 (let ((?x44656 (* l_0_13_159 l_0_13_159)))
 (let ((?x44654 (* l_0_13_158 l_0_13_158)))
 (let ((?x44652 (* l_0_13_120 l_0_13_120)))
 (let ((?x44650 (* l_0_13_119 l_0_13_119)))
 (let ((?x44648 (* l_0_13_118 l_0_13_118)))
 (let ((?x44649 (+ (+ (* l_0_13_116 l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x44648)))
 (let ((?x44663 (- (- (- (- (- (+ (+ ?x44649 ?x44650) ?x44652) ?x44654) ?x44656) ?x44658) ?x44660) ?x44662)))
 (let ((?x44675 (+ (+ (+ (+ (+ (+ (+ ?x44663 ?x44664) ?x44666) ?x44668) ?x44670) ?x44672) ?x44272) ?x44274)))
 (let ((?x44683 (- (- (- (- (- (+ (+ ?x44675 ?x44276) ?x44278) ?x44281) ?x44283) ?x44285) ?x44287) ?x44682)))
 (= (- (- (- (- ?x44683 ?x44684) ?x44686) ?x44688) ?x44690) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43799 (* l_0_13_78 l_0_13_78)))
 (let ((?x43795 (* l_0_13_77 l_0_13_77)))
 (let ((?x43791 (* l_0_13_76 l_0_13_76)))
 (let ((?x43787 (* l_0_13_75 l_0_13_75)))
 (let ((?x43783 (* l_0_13_74 l_0_13_74)))
 (let ((?x33093 (* l_0_13_57 l_0_13_57)))
 (let ((?x4831 (* l_0_13_56 l_0_13_56)))
 (let ((?x33057 (* l_0_13_55 l_0_13_55)))
 (let ((?x44722 (+ (+ (+ (* l_0_13_53 l_0_13_53) (* l_0_13_54 l_0_13_54)) ?x33057) ?x4831)))
 (= (- (- (- (- (- (+ ?x44722 ?x33093) ?x43783) ?x43787) ?x43791) ?x43795) ?x43799) 0.0)))))))))))
(assert
 (let ((?x44760 (* l_0_13_90 l_0_13_90)))
 (let ((?x44758 (* l_0_13_89 l_0_13_89)))
 (let ((?x44756 (* l_0_13_88 l_0_13_88)))
 (let ((?x44754 (* l_0_13_174 l_0_13_174)))
 (let ((?x44752 (* l_0_13_173 l_0_13_173)))
 (let ((?x44750 (* l_0_13_172 l_0_13_172)))
 (let ((?x44748 (* l_0_13_153 l_0_13_153)))
 (let ((?x44746 (* l_0_13_152 l_0_13_152)))
 (let ((?x44744 (* l_0_13_151 l_0_13_151)))
 (let ((?x42963 (* 2.0 l_0_13_132)))
 (let ((?x43045 (* ?x42963 l_0_13_135)))
 (let ((?x42958 (* 2.0 l_0_13_131)))
 (let ((?x43043 (* ?x42958 l_0_13_134)))
 (let ((?x43040 (* 2.0 l_0_13_130)))
 (let ((?x43041 (* ?x43040 l_0_13_133)))
 (let ((?x44739 (* l_0_13_111 l_0_13_111)))
 (let ((?x44740 (+ (+ (* l_0_13_109 l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x44739)))
 (let ((?x44751 (+ (- (- (- (- (- (- ?x44740 ?x43041) ?x43043) ?x43045) ?x44744) ?x44746) ?x44748) ?x44750)))
 (= (- (- (- (+ (+ ?x44751 ?x44752) ?x44754) ?x44756) ?x44758) ?x44760) 0.0))))))))))))))))))))
(assert
 (let ((?x44546 (* 2.0 l_0_13_90)))
 (let ((?x44797 (* ?x44546 l_0_13_93)))
 (let ((?x44543 (* 2.0 l_0_13_89)))
 (let ((?x44795 (* ?x44543 l_0_13_92)))
 (let ((?x44540 (* 2.0 l_0_13_88)))
 (let ((?x44793 (* ?x44540 l_0_13_91)))
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x44791 (* ?x43074 l_0_13_177)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x44789 (* ?x43071 l_0_13_176)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x44787 (* ?x43068 l_0_13_175)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x44785 (* ?x43065 l_0_13_156)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x44783 (* ?x43062 l_0_13_155)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x44781 (* ?x43059 l_0_13_154)))
 (let ((?x43365 (* l_0_13_136 l_0_13_136)))
 (let ((?x43363 (* l_0_13_135 l_0_13_135)))
 (let ((?x43361 (* l_0_13_134 l_0_13_134)))
 (let ((?x43359 (* l_0_13_133 l_0_13_133)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x44775 (* ?x43037 l_0_13_114)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x44773 (* ?x43034 l_0_13_113)))
 (let ((?x44778 (- (- (+ (+ (* (* 2.0 l_0_13_109) l_0_13_112) ?x44773) ?x44775) ?x43359) ?x43361)))
 (let ((?x44790 (+ (+ (- (- (- (- (- ?x44778 ?x43363) ?x43365) ?x44781) ?x44783) ?x44785) ?x44787) ?x44789)))
 (= (- (- (- (+ ?x44790 ?x44791) ?x44793) ?x44795) ?x44797) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x44863 (* l_0_13_94 l_0_13_94)))
 (let ((?x44861 (* l_0_13_93 l_0_13_93)))
 (let ((?x44859 (* l_0_13_92 l_0_13_92)))
 (let ((?x44857 (* l_0_13_91 l_0_13_91)))
 (let ((?x44855 (* l_0_13_178 l_0_13_178)))
 (let ((?x44853 (* l_0_13_177 l_0_13_177)))
 (let ((?x44851 (* l_0_13_176 l_0_13_176)))
 (let ((?x44849 (* l_0_13_175 l_0_13_175)))
 (let ((?x44847 (* l_0_13_157 l_0_13_157)))
 (let ((?x44845 (* l_0_13_156 l_0_13_156)))
 (let ((?x44843 (* l_0_13_155 l_0_13_155)))
 (let ((?x44841 (* l_0_13_154 l_0_13_154)))
 (let ((?x44839 (* l_0_13_115 l_0_13_115)))
 (let ((?x44837 (* l_0_13_114 l_0_13_114)))
 (let ((?x44838 (+ (+ (* l_0_13_112 l_0_13_112) (* l_0_13_113 l_0_13_113)) ?x44837)))
 (let ((?x44852 (+ (+ (- (- (- (- (+ ?x44838 ?x44839) ?x44841) ?x44843) ?x44845) ?x44847) ?x44849) ?x44851)))
 (= (- (- (- (- (+ (+ ?x44852 ?x44853) ?x44855) ?x44857) ?x44859) ?x44861) ?x44863) 0.0))))))))))))))))))
(assert
 (let ((?x41742 (* l_0_13_87 l_0_13_87)))
 (let ((?x41740 (* l_0_13_86 l_0_13_86)))
 (let ((?x41730 (* l_0_13_171 l_0_13_171)))
 (let ((?x41728 (* l_0_13_170 l_0_13_170)))
 (let ((?x41726 (* l_0_13_150 l_0_13_150)))
 (let ((?x41724 (* l_0_13_149 l_0_13_149)))
 (let ((?x44884 (+ (- (* (- l_0_13_107) l_0_13_107) (* l_0_13_108 l_0_13_108)) ?x41724)))
 (= (+ (+ (- (- (+ ?x44884 ?x41726) ?x41728) ?x41730) ?x41740) ?x41742) 0.0)))))))))
(assert
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x41926 (* ?x41925 l_0_13_89)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x41923 (* ?x41922 l_0_13_88)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x41902 (* ?x41901 l_0_13_173)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x41899 (* ?x41898 l_0_13_172)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x41896 (* ?x41895 l_0_13_152)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x41893 (* ?x41892 l_0_13_151)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x41885 (* ?x41884 l_0_13_110)))
 (let ((?x44893 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_109) ?x41885) ?x41893) ?x41896) ?x41899)))
 (= (+ (+ (- ?x44893 ?x41902) ?x41923) ?x41926) 0.0)))))))))))))))))
(assert
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x42103 (* ?x41925 l_0_13_92)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x42101 (* ?x41922 l_0_13_91)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42087 (* ?x41901 l_0_13_176)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42085 (* ?x41898 l_0_13_175)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42083 (* ?x41895 l_0_13_155)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42081 (* ?x41892 l_0_13_154)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42079 (* ?x41884 l_0_13_113)))
 (let ((?x44902 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_112) ?x42079) ?x42081) ?x42083) ?x42085)))
 (= (+ (+ (- ?x44902 ?x42087) ?x42101) ?x42103) 0.0)))))))))))))))))
(assert
 (let ((?x41925 (* 2.0 l_0_13_87)))
 (let ((?x42165 (* ?x41925 l_0_13_96)))
 (let ((?x41922 (* 2.0 l_0_13_86)))
 (let ((?x42163 (* ?x41922 l_0_13_95)))
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42145 (* ?x41901 l_0_13_180)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42143 (* ?x41898 l_0_13_179)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42141 (* ?x41895 l_0_13_159)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42139 (* ?x41892 l_0_13_158)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42130 (* ?x41884 l_0_13_117)))
 (let ((?x7588 (- (+ (+ (- (* (* (- 2.0) l_0_13_107) l_0_13_116) ?x42130) ?x42139) ?x42141) ?x42143)))
 (= (+ (+ (- ?x7588 ?x42145) ?x42163) ?x42165) 0.0)))))))))))))))))
(assert
 (let ((?x41901 (* 2.0 l_0_13_171)))
 (let ((?x42236 (* ?x41901 l_0_13_185)))
 (let ((?x41898 (* 2.0 l_0_13_170)))
 (let ((?x42234 (* ?x41898 l_0_13_184)))
 (let ((?x41895 (* 2.0 l_0_13_150)))
 (let ((?x42228 (* ?x41895 l_0_13_164)))
 (let ((?x41892 (* 2.0 l_0_13_149)))
 (let ((?x42226 (* ?x41892 l_0_13_163)))
 (let ((?x41884 (* 2.0 l_0_13_108)))
 (let ((?x42222 (* ?x41884 l_0_13_122)))
 (let ((?x41882 (* 2.0 l_0_13_107)))
 (let ((?x42220 (* ?x41882 l_0_13_121)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x42218 (* ?x42217 l_0_13_87)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x42215 (* ?x42214 l_0_13_86)))
 (let ((?x23717 (- (- (+ (+ (- (- (+ ?x42215 ?x42218) ?x42220) ?x42222) ?x42226) ?x42228) ?x42234) ?x42236)))
 (= ?x23717 0.0)))))))))))))))))))
(assert
 (let ((?x44760 (* l_0_13_90 l_0_13_90)))
 (let ((?x44758 (* l_0_13_89 l_0_13_89)))
 (let ((?x44756 (* l_0_13_88 l_0_13_88)))
 (let ((?x44754 (* l_0_13_174 l_0_13_174)))
 (let ((?x44752 (* l_0_13_173 l_0_13_173)))
 (let ((?x44750 (* l_0_13_172 l_0_13_172)))
 (let ((?x44748 (* l_0_13_153 l_0_13_153)))
 (let ((?x44746 (* l_0_13_152 l_0_13_152)))
 (let ((?x44744 (* l_0_13_151 l_0_13_151)))
 (let ((?x44739 (* l_0_13_111 l_0_13_111)))
 (let ((?x34666 (- (- (* (- l_0_13_109) l_0_13_109) (* l_0_13_110 l_0_13_110)) ?x44739)))
 (let ((?x44909 (+ (- (- (- (+ (+ (+ ?x34666 ?x44744) ?x44746) ?x44748) ?x44750) ?x44752) ?x44754) ?x44756)))
 (= (+ (+ ?x44909 ?x44758) ?x44760) 0.0))))))))))))))
(assert
 (let ((?x44546 (* 2.0 l_0_13_90)))
 (let ((?x44797 (* ?x44546 l_0_13_93)))
 (let ((?x44543 (* 2.0 l_0_13_89)))
 (let ((?x44795 (* ?x44543 l_0_13_92)))
 (let ((?x44540 (* 2.0 l_0_13_88)))
 (let ((?x44793 (* ?x44540 l_0_13_91)))
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x44791 (* ?x43074 l_0_13_177)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x44789 (* ?x43071 l_0_13_176)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x44787 (* ?x43068 l_0_13_175)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x44785 (* ?x43065 l_0_13_156)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x44783 (* ?x43062 l_0_13_155)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x44781 (* ?x43059 l_0_13_154)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x44775 (* ?x43037 l_0_13_114)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x44773 (* ?x43034 l_0_13_113)))
 (let ((?x7869 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_112) ?x44773) ?x44775) ?x44781) ?x44783)))
 (let ((?x44922 (+ (+ (+ (- (- (- (+ ?x7869 ?x44785) ?x44787) ?x44789) ?x44791) ?x44793) ?x44795) ?x44797)))
 (= ?x44922 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44546 (* 2.0 l_0_13_90)))
 (let ((?x44547 (* ?x44546 l_0_13_97)))
 (let ((?x44543 (* 2.0 l_0_13_89)))
 (let ((?x44544 (* ?x44543 l_0_13_96)))
 (let ((?x44540 (* 2.0 l_0_13_88)))
 (let ((?x44541 (* ?x44540 l_0_13_95)))
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x44532 (* ?x43074 l_0_13_181)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x44530 (* ?x43071 l_0_13_180)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x44528 (* ?x43068 l_0_13_179)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x44526 (* ?x43065 l_0_13_160)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x44524 (* ?x43062 l_0_13_159)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x44522 (* ?x43059 l_0_13_158)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x44516 (* ?x43037 l_0_13_118)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x22985 (* ?x43034 l_0_13_117)))
 (let ((?x23985 (+ (+ (- (- (* (* (- 2.0) l_0_13_109) l_0_13_116) ?x22985) ?x44516) ?x44522) ?x44524)))
 (let ((?x44927 (+ (+ (+ (- (- (- (+ ?x23985 ?x44526) ?x44528) ?x44530) ?x44532) ?x44541) ?x44544) ?x44547)))
 (= ?x44927 0.0))))))))))))))))))))))))))
(assert
 (let ((?x43074 (* 2.0 l_0_13_174)))
 (let ((?x43075 (* ?x43074 l_0_13_186)))
 (let ((?x43071 (* 2.0 l_0_13_173)))
 (let ((?x43072 (* ?x43071 l_0_13_185)))
 (let ((?x43068 (* 2.0 l_0_13_172)))
 (let ((?x43069 (* ?x43068 l_0_13_184)))
 (let ((?x43065 (* 2.0 l_0_13_153)))
 (let ((?x43066 (* ?x43065 l_0_13_165)))
 (let ((?x43062 (* 2.0 l_0_13_152)))
 (let ((?x43063 (* ?x43062 l_0_13_164)))
 (let ((?x43059 (* 2.0 l_0_13_151)))
 (let ((?x43060 (* ?x43059 l_0_13_163)))
 (let ((?x43037 (* 2.0 l_0_13_111)))
 (let ((?x43038 (* ?x43037 l_0_13_123)))
 (let ((?x43034 (* 2.0 l_0_13_110)))
 (let ((?x43035 (* ?x43034 l_0_13_122)))
 (let ((?x43031 (* 2.0 l_0_13_109)))
 (let ((?x43032 (* ?x43031 l_0_13_121)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43029 (* ?x43028 l_0_13_90)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43026 (* ?x42217 l_0_13_89)))
 (let ((?x44936 (- (- (+ (+ (* (* 2.0 l_0_13_100) l_0_13_88) ?x43026) ?x43029) ?x43032) ?x43035)))
 (let ((?x44943 (- (- (- (+ (+ (+ (- ?x44936 ?x43038) ?x43060) ?x43063) ?x43066) ?x43069) ?x43072) ?x43075)))
 (= ?x44943 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44863 (* l_0_13_94 l_0_13_94)))
 (let ((?x44861 (* l_0_13_93 l_0_13_93)))
 (let ((?x44859 (* l_0_13_92 l_0_13_92)))
 (let ((?x44857 (* l_0_13_91 l_0_13_91)))
 (let ((?x44855 (* l_0_13_178 l_0_13_178)))
 (let ((?x44853 (* l_0_13_177 l_0_13_177)))
 (let ((?x44851 (* l_0_13_176 l_0_13_176)))
 (let ((?x44849 (* l_0_13_175 l_0_13_175)))
 (let ((?x44847 (* l_0_13_157 l_0_13_157)))
 (let ((?x44845 (* l_0_13_156 l_0_13_156)))
 (let ((?x44843 (* l_0_13_155 l_0_13_155)))
 (let ((?x44841 (* l_0_13_154 l_0_13_154)))
 (let ((?x44839 (* l_0_13_115 l_0_13_115)))
 (let ((?x44837 (* l_0_13_114 l_0_13_114)))
 (let ((?x34778 (- (- (* (- l_0_13_112) l_0_13_112) (* l_0_13_113 l_0_13_113)) ?x44837)))
 (let ((?x34784 (- (- (+ (+ (+ (+ (- ?x34778 ?x44839) ?x44841) ?x44843) ?x44845) ?x44847) ?x44849) ?x44851)))
 (= (+ (+ (+ (+ (- (- ?x34784 ?x44853) ?x44855) ?x44857) ?x44859) ?x44861) ?x44863) 0.0))))))))))))))))))
(assert
 (let ((?x44597 (* (* 2.0 l_0_13_94) l_0_13_98)))
 (let ((?x44594 (* (* 2.0 l_0_13_93) l_0_13_97)))
 (let ((?x44591 (* (* 2.0 l_0_13_92) l_0_13_96)))
 (let ((?x44588 (* (* 2.0 l_0_13_91) l_0_13_95)))
 (let ((?x43388 (* 2.0 l_0_13_178)))
 (let ((?x44577 (* ?x43388 l_0_13_182)))
 (let ((?x43385 (* 2.0 l_0_13_177)))
 (let ((?x44575 (* ?x43385 l_0_13_181)))
 (let ((?x43382 (* 2.0 l_0_13_176)))
 (let ((?x44573 (* ?x43382 l_0_13_180)))
 (let ((?x43379 (* 2.0 l_0_13_175)))
 (let ((?x44571 (* ?x43379 l_0_13_179)))
 (let ((?x43376 (* 2.0 l_0_13_157)))
 (let ((?x44569 (* ?x43376 l_0_13_161)))
 (let ((?x43373 (* 2.0 l_0_13_156)))
 (let ((?x44567 (* ?x43373 l_0_13_160)))
 (let ((?x43370 (* 2.0 l_0_13_155)))
 (let ((?x44565 (* ?x43370 l_0_13_159)))
 (let ((?x43367 (* 2.0 l_0_13_154)))
 (let ((?x44563 (* ?x43367 l_0_13_158)))
 (let ((?x43356 (* 2.0 l_0_13_115)))
 (let ((?x7111 (* ?x43356 l_0_13_119)))
 (let ((?x43353 (* 2.0 l_0_13_114)))
 (let ((?x23412 (* ?x43353 l_0_13_118)))
 (let ((?x43350 (* 2.0 l_0_13_113)))
 (let ((?x23409 (* ?x43350 l_0_13_117)))
 (let ((?x44956 (+ (- (- (- (* (* (- 2.0) l_0_13_112) l_0_13_116) ?x23409) ?x23412) ?x7111) ?x44563)))
 (let ((?x44963 (- (- (- (- (+ (+ (+ ?x44956 ?x44565) ?x44567) ?x44569) ?x44571) ?x44573) ?x44575) ?x44577)))
 (= (+ (+ (+ (+ ?x44963 ?x44588) ?x44591) ?x44594) ?x44597) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x43388 (* 2.0 l_0_13_178)))
 (let ((?x43389 (* ?x43388 l_0_13_187)))
 (let ((?x43385 (* 2.0 l_0_13_177)))
 (let ((?x43386 (* ?x43385 l_0_13_186)))
 (let ((?x43382 (* 2.0 l_0_13_176)))
 (let ((?x43383 (* ?x43382 l_0_13_185)))
 (let ((?x43379 (* 2.0 l_0_13_175)))
 (let ((?x43380 (* ?x43379 l_0_13_184)))
 (let ((?x43376 (* 2.0 l_0_13_157)))
 (let ((?x43377 (* ?x43376 l_0_13_166)))
 (let ((?x43373 (* 2.0 l_0_13_156)))
 (let ((?x43374 (* ?x43373 l_0_13_165)))
 (let ((?x43370 (* 2.0 l_0_13_155)))
 (let ((?x43371 (* ?x43370 l_0_13_164)))
 (let ((?x43367 (* 2.0 l_0_13_154)))
 (let ((?x43368 (* ?x43367 l_0_13_163)))
 (let ((?x43356 (* 2.0 l_0_13_115)))
 (let ((?x43357 (* ?x43356 l_0_13_124)))
 (let ((?x43353 (* 2.0 l_0_13_114)))
 (let ((?x43354 (* ?x43353 l_0_13_123)))
 (let ((?x43350 (* 2.0 l_0_13_113)))
 (let ((?x43351 (* ?x43350 l_0_13_122)))
 (let ((?x43347 (* 2.0 l_0_13_112)))
 (let ((?x43348 (* ?x43347 l_0_13_121)))
 (let ((?x43344 (* 2.0 l_0_13_103)))
 (let ((?x43345 (* ?x43344 l_0_13_94)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43342 (* ?x43028 l_0_13_93)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43340 (* ?x42217 l_0_13_92)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x43338 (* ?x42214 l_0_13_91)))
 (let ((?x24185 (- (- (- (- (+ (+ (+ ?x43338 ?x43340) ?x43342) ?x43345) ?x43348) ?x43351) ?x43354) ?x43357)))
 (let ((?x8051 (- (- (- (+ (+ (+ (+ ?x24185 ?x43368) ?x43371) ?x43374) ?x43377) ?x43380) ?x43383) ?x43386)))
 (= (- ?x8051 ?x43389) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44690 (* l_0_13_99 l_0_13_99)))
 (let ((?x44688 (* l_0_13_98 l_0_13_98)))
 (let ((?x44686 (* l_0_13_97 l_0_13_97)))
 (let ((?x44684 (* l_0_13_96 l_0_13_96)))
 (let ((?x44682 (* l_0_13_95 l_0_13_95)))
 (let ((?x44672 (* l_0_13_183 l_0_13_183)))
 (let ((?x44670 (* l_0_13_182 l_0_13_182)))
 (let ((?x44668 (* l_0_13_181 l_0_13_181)))
 (let ((?x44666 (* l_0_13_180 l_0_13_180)))
 (let ((?x44664 (* l_0_13_179 l_0_13_179)))
 (let ((?x44662 (* l_0_13_162 l_0_13_162)))
 (let ((?x44660 (* l_0_13_161 l_0_13_161)))
 (let ((?x44658 (* l_0_13_160 l_0_13_160)))
 (let ((?x44656 (* l_0_13_159 l_0_13_159)))
 (let ((?x44654 (* l_0_13_158 l_0_13_158)))
 (let ((?x44652 (* l_0_13_120 l_0_13_120)))
 (let ((?x44650 (* l_0_13_119 l_0_13_119)))
 (let ((?x44648 (* l_0_13_118 l_0_13_118)))
 (let ((?x44972 (- (- (* (- l_0_13_116) l_0_13_116) (* l_0_13_117 l_0_13_117)) ?x44648)))
 (let ((?x44979 (+ (+ (+ (+ (+ (- (- ?x44972 ?x44650) ?x44652) ?x44654) ?x44656) ?x44658) ?x44660) ?x44662)))
 (let ((?x44986 (+ (+ (- (- (- (- (- ?x44979 ?x44664) ?x44666) ?x44668) ?x44670) ?x44672) ?x44682) ?x44684)))
 (= (+ (+ (+ ?x44986 ?x44686) ?x44688) ?x44690) 0.0)))))))))))))))))))))))
(assert
 (let ((?x43550 (* (* 2.0 l_0_13_183) l_0_13_188)))
 (let ((?x43547 (* (* 2.0 l_0_13_182) l_0_13_187)))
 (let ((?x43544 (* (* 2.0 l_0_13_181) l_0_13_186)))
 (let ((?x43541 (* (* 2.0 l_0_13_180) l_0_13_185)))
 (let ((?x43538 (* (* 2.0 l_0_13_179) l_0_13_184)))
 (let ((?x43535 (* (* 2.0 l_0_13_162) l_0_13_167)))
 (let ((?x43532 (* (* 2.0 l_0_13_161) l_0_13_166)))
 (let ((?x43529 (* (* 2.0 l_0_13_160) l_0_13_165)))
 (let ((?x43526 (* (* 2.0 l_0_13_159) l_0_13_164)))
 (let ((?x43523 (* (* 2.0 l_0_13_158) l_0_13_163)))
 (let ((?x43510 (* (* 2.0 l_0_13_120) l_0_13_125)))
 (let ((?x43505 (* (* 2.0 l_0_13_119) l_0_13_124)))
 (let ((?x43502 (* (* 2.0 l_0_13_118) l_0_13_123)))
 (let ((?x43499 (* (* 2.0 l_0_13_117) l_0_13_122)))
 (let ((?x43496 (* (* 2.0 l_0_13_116) l_0_13_121)))
 (let ((?x43491 (* (* 2.0 l_0_13_104) l_0_13_99)))
 (let ((?x43344 (* 2.0 l_0_13_103)))
 (let ((?x43488 (* ?x43344 l_0_13_98)))
 (let ((?x43028 (* 2.0 l_0_13_102)))
 (let ((?x43486 (* ?x43028 l_0_13_97)))
 (let ((?x42217 (* 2.0 l_0_13_101)))
 (let ((?x43484 (* ?x42217 l_0_13_96)))
 (let ((?x42214 (* 2.0 l_0_13_100)))
 (let ((?x32562 (* ?x42214 l_0_13_95)))
 (let ((?x34934 (- (- (- (+ (+ (+ (+ ?x32562 ?x43484) ?x43486) ?x43488) ?x43491) ?x43496) ?x43499) ?x43502)))
 (let ((?x34942 (+ (+ (+ (+ (+ (- (- ?x34934 ?x43505) ?x43510) ?x43523) ?x43526) ?x43529) ?x43532) ?x43535)))
 (= (- (- (- (- (- ?x34942 ?x43538) ?x43541) ?x43544) ?x43547) ?x43550) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x43687 (* l_0_13_189 l_0_13_189)))
 (let ((?x43685 (* l_0_13_188 l_0_13_188)))
 (let ((?x43683 (* l_0_13_187 l_0_13_187)))
 (let ((?x43681 (* l_0_13_186 l_0_13_186)))
 (let ((?x43679 (* l_0_13_185 l_0_13_185)))
 (let ((?x43677 (* l_0_13_184 l_0_13_184)))
 (let ((?x43673 (* l_0_13_168 l_0_13_168)))
 (let ((?x43671 (* l_0_13_167 l_0_13_167)))
 (let ((?x43669 (* l_0_13_166 l_0_13_166)))
 (let ((?x43667 (* l_0_13_165 l_0_13_165)))
 (let ((?x43665 (* l_0_13_164 l_0_13_164)))
 (let ((?x43663 (* l_0_13_163 l_0_13_163)))
 (let ((?x43656 (* l_0_13_126 l_0_13_126)))
 (let ((?x43654 (* l_0_13_125 l_0_13_125)))
 (let ((?x43652 (* l_0_13_124 l_0_13_124)))
 (let ((?x43650 (* l_0_13_123 l_0_13_123)))
 (let ((?x43648 (* l_0_13_122 l_0_13_122)))
 (let ((?x43646 (* l_0_13_121 l_0_13_121)))
 (let ((?x43644 (* l_0_13_105 l_0_13_105)))
 (let ((?x43642 (* l_0_13_104 l_0_13_104)))
 (let ((?x43640 (* l_0_13_103 l_0_13_103)))
 (let ((?x43638 (* l_0_13_102 l_0_13_102)))
 (let ((?x34951 (+ (+ (* l_0_13_100 l_0_13_100) (* l_0_13_101 l_0_13_101)) ?x43638)))
 (let ((?x34959 (- (- (- (- (+ (+ (+ ?x34951 ?x43640) ?x43642) ?x43644) ?x43646) ?x43648) ?x43650) ?x43652)))
 (let ((?x34950 (+ (+ (+ (+ (+ (- (- ?x34959 ?x43654) ?x43656) ?x43663) ?x43665) ?x43667) ?x43669) ?x43671)))
 (let ((?x44995 (- (- (- (- (- (- (+ ?x34950 ?x43673) ?x43677) ?x43679) ?x43681) ?x43683) ?x43685) ?x43687)))
 (= ?x44995 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x42966 (* l_0_13_132 l_0_13_132)))
 (let ((?x35068 (- (- (* (- l_0_13_130) l_0_13_130) (* l_0_13_131 l_0_13_131)) ?x42966)))
 (= ?x35068 0.0))))
(assert
 (>= l_0_13_1 0.0))
(assert
 (>= l_0_13_3 0.0))
(assert
 (>= l_0_13_6 0.0))
(assert
 (>= l_0_13_10 0.0))
(assert
 (>= l_0_13_15 0.0))
(assert
 (>= l_0_13_21 0.0))
(assert
 (>= l_0_13_22 0.0))
(assert
 (>= l_0_13_24 0.0))
(assert
 (>= l_0_13_27 0.0))
(assert
 (>= l_0_13_31 0.0))
(assert
 (>= l_0_13_36 0.0))
(assert
 (>= l_0_13_42 0.0))
(assert
 (>= l_0_13_43 0.0))
(assert
 (>= l_0_13_45 0.0))
(assert
 (>= l_0_13_48 0.0))
(assert
 (>= l_0_13_52 0.0))
(assert
 (>= l_0_13_57 0.0))
(assert
 (>= l_0_13_63 0.0))
(assert
 (>= l_0_13_64 0.0))
(assert
 (>= l_0_13_66 0.0))
(assert
 (>= l_0_13_69 0.0))
(assert
 (>= l_0_13_73 0.0))
(assert
 (>= l_0_13_78 0.0))
(assert
 (>= l_0_13_84 0.0))
(assert
 (>= l_0_13_85 0.0))
(assert
 (>= l_0_13_87 0.0))
(assert
 (>= l_0_13_90 0.0))
(assert
 (>= l_0_13_94 0.0))
(assert
 (>= l_0_13_99 0.0))
(assert
 (>= l_0_13_105 0.0))
(assert
 (>= l_0_13_106 0.0))
(assert
 (>= l_0_13_108 0.0))
(assert
 (>= l_0_13_111 0.0))
(assert
 (>= l_0_13_115 0.0))
(assert
 (>= l_0_13_120 0.0))
(assert
 (>= l_0_13_126 0.0))
(assert
 (>= l_0_13_127 0.0))
(assert
 (>= l_0_13_129 0.0))
(assert
 (>= l_0_13_132 0.0))
(assert
 (>= l_0_13_136 0.0))
(assert
 (>= l_0_13_141 0.0))
(assert
 (>= l_0_13_147 0.0))
(assert
 (>= l_0_13_148 0.0))
(assert
 (>= l_0_13_150 0.0))
(assert
 (>= l_0_13_153 0.0))
(assert
 (>= l_0_13_157 0.0))
(assert
 (>= l_0_13_162 0.0))
(assert
 (>= l_0_13_168 0.0))
(assert
 (>= l_0_13_169 0.0))
(assert
 (>= l_0_13_171 0.0))
(assert
 (>= l_0_13_174 0.0))
(assert
 (>= l_0_13_178 0.0))
(assert
 (>= l_0_13_183 0.0))
(assert
 (>= l_0_13_189 0.0))
(assert
 (>= l_0_13_190 0.0))
(assert
 (>= l_0_13_192 0.0))
(assert
 (>= l_0_13_195 0.0))
(assert
 (>= l_0_13_199 0.0))
(assert
 (>= l_0_13_204 0.0))
(assert
 (>= l_0_13_210 0.0))
(assert
 (let ((?x45068 (* l_0_14_64 l_0_14_64)))
 (let ((?x45069 (* 3.0 ?x45068)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x45066 (* ?x45065 l_0_14_79)))
 (let ((?x45063 (* (* 3.0 l_0_14_43) l_0_14_43)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x45060 (* ?x45059 l_0_14_58)))
 (let ((?x45057 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x45054 (* ?x45053 l_0_14_37)))
 (let ((?x45045 (* l_0_14_127 l_0_14_127)))
 (let ((?x45042 (* l_0_14_1 l_0_14_1)))
 (let ((?x45043 (* 6.0 ?x45042)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x45041 (* ?x45040 l_0_14_16)))
 (let ((?x45052 (- (- (+ (+ ?x45041 ?x45043) ?x45045) (* (* 2.0 l_0_14_190) l_0_14_205)) (* (* 2.0 l_0_14_211) l_0_14_226))))
 (let ((?x45071 (+ (+ (+ (- (- (- (- ?x45052 ?x45054) ?x45057) ?x45060) ?x45063) ?x45066) ?x45069) 6.0)))
 (= ?x45071 0.0)))))))))))))))))))
(assert
 (let ((?x45057 (* (* 6.0 l_0_14_22) l_0_14_22)))
 (let ((?x45101 (* l_0_14_211 l_0_14_211)))
 (let ((?x45099 (* l_0_14_190 l_0_14_190)))
 (let ((?x45102 (- (- (+ (- _a_12_) (* 6.0 (* l_0_14_1 l_0_14_1))) ?x45099) ?x45101)))
 (let ((?x45108 (+ (- (- ?x45102 ?x45057) (* (* 1.0 l_0_14_43) l_0_14_43)) (* 1.0 (* l_0_14_64 l_0_14_64)))))
 (= (+ ?x45108 12.0) 0.0)))))))
(assert
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x45134 (* ?x45065 l_0_14_65)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x45132 (* ?x45059 l_0_14_44)))
 (let ((?x35147 (* l_0_14_22 l_0_14_22)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x45129 (* ?x45053 l_0_14_23)))
 (let ((?x45042 (* l_0_14_1 l_0_14_1)))
 (let ((?x45126 (- (- (+ (- _a_13_) (* (* 12.0 l_0_14_1) l_0_14_2)) ?x45042) (* (* 2.0 l_0_14_190) l_0_14_191))))
 (let ((?x45133 (- (+ (- (- ?x45126 (* (* 2.0 l_0_14_211) l_0_14_212)) ?x45129) ?x35147) ?x45132)))
 (= (+ ?x45133 ?x45134) 0.0))))))))))))
(assert
 (let ((?x45182 (* l_0_14_3 l_0_14_3)))
 (let ((?x45183 (* 6.0 ?x45182)))
 (let ((?x45180 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x45177 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x45171 (* l_0_14_213 l_0_14_213)))
 (let ((?x45169 (* l_0_14_212 l_0_14_212)))
 (let ((?x45166 (* l_0_14_2 l_0_14_2)))
 (let ((?x45167 (* 6.0 ?x45166)))
 (let ((?x45164 (* l_0_14_192 l_0_14_192)))
 (let ((?x45165 (- (- (* (* (- 2.0) l_0_14_1) l_0_14_2) (* l_0_14_191 l_0_14_191)) ?x45164)))
 (let ((?x45175 (+ (- (- (+ ?x45165 ?x45167) ?x45169) ?x45171) (* (* 2.0 l_0_14_22) l_0_14_23))))
 (let ((?x45187 (- (+ (- (- ?x45175 ?x45177) ?x45180) ?x45183) (* (* 1.0 l_0_14_44) l_0_14_44))))
 (let ((?x45193 (+ (- ?x45187 (* (* 1.0 l_0_14_45) l_0_14_45)) (* 1.0 (* l_0_14_65 l_0_14_65)))))
 (= (+ ?x45193 (* 1.0 (* l_0_14_66 l_0_14_66))) 0.0)))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45267 (* ?x45266 l_0_14_68)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45264 (* ?x45263 l_0_14_67)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45261 (* ?x45260 l_0_14_47)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45258 (* ?x45257 l_0_14_46)))
 (let ((?x45254 (* 12.0 l_0_14_3)))
 (let ((?x45255 (* ?x45254 l_0_14_5)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45252 (* ?x45251 l_0_14_26)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45249 (* ?x45248 l_0_14_25)))
 (let ((?x45237 (* 12.0 l_0_14_2)))
 (let ((?x45238 (* ?x45237 l_0_14_4)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x45229 (* ?x45228 l_0_14_128)))
 (let ((?x45233 (- (- (* (* (- 2.0) l_0_14_1) l_0_14_4) ?x45229) (* (* 2.0 l_0_14_191) l_0_14_193))))
 (let ((?x45242 (- (+ (- ?x45233 (* (* 2.0 l_0_14_192) l_0_14_194)) ?x45238) (* (* 2.0 l_0_14_212) l_0_14_214))))
 (let ((?x45247 (+ (- ?x45242 (* (* 2.0 l_0_14_213) l_0_14_215)) (* (* 2.0 l_0_14_22) l_0_14_25))))
 (let ((?x45268 (+ (+ (- (- (+ (- (- ?x45247 ?x45249) ?x45252) ?x45255) ?x45258) ?x45261) ?x45264) ?x45267)))
 (= ?x45268 0.0))))))))))))))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x45350 (* ?x45349 l_0_14_86)))
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45347 (* ?x45266 l_0_14_71)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45345 (* ?x45263 l_0_14_70)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45343 (* ?x45260 l_0_14_50)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45341 (* ?x45257 l_0_14_49)))
 (let ((?x45254 (* 12.0 l_0_14_3)))
 (let ((?x45339 (* ?x45254 l_0_14_8)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45337 (* ?x45251 l_0_14_29)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45335 (* ?x45248 l_0_14_28)))
 (let ((?x45237 (* 12.0 l_0_14_2)))
 (let ((?x45327 (* ?x45237 l_0_14_7)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x45321 (* ?x45320 l_0_14_170)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x45318 (* ?x45317 l_0_14_149)))
 (let ((?x45316 (+ (* (* (- 2.0) l_0_14_1) l_0_14_7) (* (* 2.0 l_0_14_106) l_0_14_107))))
 (let ((?x45326 (- (- (+ (- ?x45316 ?x45318) ?x45321) (* (* 2.0 l_0_14_191) l_0_14_196)) (* (* 2.0 l_0_14_192) l_0_14_197))))
 (let ((?x45332 (- (- (+ ?x45326 ?x45327) (* (* 2.0 l_0_14_212) l_0_14_217)) (* (* 2.0 l_0_14_213) l_0_14_218))))
 (let ((?x45340 (+ (- (- (+ ?x45332 (* (* 2.0 l_0_14_22) l_0_14_28)) ?x45335) ?x45337) ?x45339)))
 (= (- (+ (+ (- (- ?x45340 ?x45341) ?x45343) ?x45345) ?x45347) ?x45350) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45440 (* ?x45266 l_0_14_75)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45438 (* ?x45263 l_0_14_74)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x45134 (* ?x45065 l_0_14_65)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45435 (* ?x45260 l_0_14_54)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45433 (* ?x45257 l_0_14_53)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x45132 (* ?x45059 l_0_14_44)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45430 (* ?x45251 l_0_14_33)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45428 (* ?x45248 l_0_14_32)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x45416 (* ?x45415 l_0_14_3)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x45413 (* ?x45412 l_0_14_2)))
 (let ((?x45419 (- (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_11) ?x45413) ?x45416) (* (* 2.0 l_0_14_191) l_0_14_200))))
 (let ((?x45423 (- (- ?x45419 (* (* 2.0 l_0_14_192) l_0_14_201)) (* (* 2.0 l_0_14_212) l_0_14_221))))
 (let ((?x45427 (+ (- ?x45423 (* (* 2.0 l_0_14_213) l_0_14_222)) (* (* 2.0 l_0_14_22) l_0_14_32))))
 (let ((?x45439 (+ (- (- (- (+ (- (- ?x45427 ?x45428) ?x45430) ?x45132) ?x45433) ?x45435) ?x45134) ?x45438)))
 (= (+ ?x45439 ?x45440) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45538 (* ?x45266 l_0_14_80)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45536 (* ?x45263 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x45534 (* ?x45533 l_0_14_65)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45531 (* ?x45260 l_0_14_59)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45529 (* ?x45257 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x45527 (* ?x45526 l_0_14_44)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45524 (* ?x45251 l_0_14_38)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45522 (* ?x45248 l_0_14_37)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x45129 (* ?x45053 l_0_14_23)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x45509 (* ?x45508 l_0_14_3)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x45506 (* ?x45505 l_0_14_2)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x45229 (* ?x45228 l_0_14_128)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x45118 (* ?x45040 l_0_14_2)))
 (let ((?x45510 (+ (+ (+ (+ (* (* (- 2.0) l_0_14_1) l_0_14_16) ?x45118) ?x45229) ?x45506) ?x45509)))
 (let ((?x45514 (- (- ?x45510 (* (* 2.0 l_0_14_191) l_0_14_205)) (* (* 2.0 l_0_14_192) l_0_14_206))))
 (let ((?x45518 (- (- ?x45514 (* (* 2.0 l_0_14_212) l_0_14_226)) (* (* 2.0 l_0_14_213) l_0_14_227))))
 (let ((?x45525 (- (- (+ (- ?x45518 ?x45129) (* (* 2.0 l_0_14_22) l_0_14_37)) ?x45522) ?x45524)))
 (= (+ (+ (+ (- (- (- ?x45525 ?x45527) ?x45529) ?x45531) ?x45534) ?x45536) ?x45538) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x45182 (* l_0_14_3 l_0_14_3)))
 (let ((?x8533 (* l_0_14_24 l_0_14_24)))
 (let ((?x45596 (- (+ (+ (* (- l_0_14_2) l_0_14_2) (* l_0_14_23 l_0_14_23)) ?x8533) ?x45182)))
 (= ?x45596 0.0)))))
(assert
 (let ((?x45611 (- (- (* (- l_0_14_128) l_0_14_128) (* l_0_14_129 l_0_14_129)) (* (* 2.0 l_0_14_2) l_0_14_4))))
 (let ((?x45617 (+ (+ ?x45611 (* (* 2.0 l_0_14_23) l_0_14_25)) (* (* 2.0 l_0_14_24) l_0_14_26))))
 (= (- ?x45617 (* (* 2.0 l_0_14_3) l_0_14_5)) 0.0))))
(assert
 (let ((?x45657 (* l_0_14_87 l_0_14_87)))
 (let ((?x45655 (* l_0_14_86 l_0_14_86)))
 (let ((?x45645 (* l_0_14_171 l_0_14_171)))
 (let ((?x45643 (* l_0_14_170 l_0_14_170)))
 (let ((?x45641 (* l_0_14_150 l_0_14_150)))
 (let ((?x45639 (* l_0_14_149 l_0_14_149)))
 (let ((?x45640 (- (+ (* l_0_14_107 l_0_14_107) (* l_0_14_108 l_0_14_108)) ?x45639)))
 (let ((?x45648 (- (+ (+ (- ?x45640 ?x45641) ?x45643) ?x45645) (* (* 2.0 l_0_14_2) l_0_14_7))))
 (let ((?x45652 (+ (+ ?x45648 (* (* 2.0 l_0_14_23) l_0_14_28)) (* (* 2.0 l_0_14_24) l_0_14_29))))
 (= (- (- (- ?x45652 (* (* 2.0 l_0_14_3) l_0_14_8)) ?x45655) ?x45657) 0.0)))))))))))
(assert
 (let ((?x45194 (* l_0_14_66 l_0_14_66)))
 (let ((?x45191 (* l_0_14_65 l_0_14_65)))
 (let ((?x45223 (* l_0_14_45 l_0_14_45)))
 (let ((?x45219 (* l_0_14_44 l_0_14_44)))
 (let ((?x45687 (- (* (* (- 2.0) l_0_14_11) l_0_14_2) (* (* 2.0 l_0_14_12) l_0_14_3))))
 (let ((?x45691 (+ (+ ?x45687 (* (* 2.0 l_0_14_23) l_0_14_32)) (* (* 2.0 l_0_14_24) l_0_14_33))))
 (= (- (- (+ (+ ?x45691 ?x45219) ?x45223) ?x45191) ?x45194) 0.0))))))))
(assert
 (let ((?x45194 (* l_0_14_66 l_0_14_66)))
 (let ((?x45733 (* 3.0 ?x45194)))
 (let ((?x45191 (* l_0_14_65 l_0_14_65)))
 (let ((?x45731 (* 3.0 ?x45191)))
 (let ((?x45729 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (let ((?x45182 (* l_0_14_3 l_0_14_3)))
 (let ((?x45183 (* 6.0 ?x45182)))
 (let ((?x45180 (* (* 6.0 l_0_14_24) l_0_14_24)))
 (let ((?x45177 (* (* 6.0 l_0_14_23) l_0_14_23)))
 (let ((?x45166 (* l_0_14_2 l_0_14_2)))
 (let ((?x45167 (* 6.0 ?x45166)))
 (let ((?x45713 (- (+ (* l_0_14_128 l_0_14_128) (* l_0_14_129 l_0_14_129)) (* (* 2.0 l_0_14_16) l_0_14_2))))
 (let ((?x45719 (+ (+ (- ?x45713 (* (* 2.0 l_0_14_17) l_0_14_3)) ?x45167) (* (* 2.0 l_0_14_23) l_0_14_37))))
 (let ((?x45724 (+ (- (+ (- ?x45719 ?x45177) (* (* 2.0 l_0_14_24) l_0_14_38)) ?x45180) ?x45183)))
 (let ((?x45734 (+ (+ (- (- ?x45724 (* (* 3.0 l_0_14_44) l_0_14_44)) ?x45729) ?x45731) ?x45733)))
 (= ?x45734 0.0)))))))))))))))))
(assert
 (let ((?x45774 (* l_0_14_6 l_0_14_6)))
 (let ((?x45772 (* l_0_14_5 l_0_14_5)))
 (let ((?x45770 (* l_0_14_4 l_0_14_4)))
 (let ((?x45768 (* l_0_14_27 l_0_14_27)))
 (let ((?x45766 (* l_0_14_26 l_0_14_26)))
 (let ((?x45764 (* l_0_14_25 l_0_14_25)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x45762 (* ?x45761 l_0_14_131)))
 (let ((?x45769 (+ (+ (+ (- (* (* (- 2.0) l_0_14_128) l_0_14_130) ?x45762) ?x45764) ?x45766) ?x45768)))
 (= (- (- (- ?x45769 ?x45770) ?x45772) ?x45774) 0.0)))))))))))
(assert
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x45836 (* ?x45835 l_0_14_89)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x45833 (* ?x45832 l_0_14_88)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x45812 (* ?x45811 l_0_14_173)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x45809 (* ?x45808 l_0_14_172)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x45806 (* ?x45805 l_0_14_152)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x45803 (* ?x45802 l_0_14_151)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x45800 (* ?x45761 l_0_14_134)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x45798 (* ?x45797 l_0_14_133)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x45795 (* ?x45794 l_0_14_110)))
 (let ((?x45804 (- (- (- (+ (* (* 2.0 l_0_14_107) l_0_14_109) ?x45795) ?x45798) ?x45800) ?x45803)))
 (let ((?x45816 (+ (+ (+ (- ?x45804 ?x45806) ?x45809) ?x45812) (* (* 2.0 l_0_14_25) l_0_14_28))))
 (let ((?x45822 (+ (+ ?x45816 (* (* 2.0 l_0_14_26) l_0_14_29)) (* (* 2.0 l_0_14_27) l_0_14_30))))
 (let ((?x45828 (- (- ?x45822 (* (* 2.0 l_0_14_4) l_0_14_7)) (* (* 2.0 l_0_14_5) l_0_14_8))))
 (= (- (- (- ?x45828 (* (* 2.0 l_0_14_6) l_0_14_9)) ?x45833) ?x45836) 0.0))))))))))))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45267 (* ?x45266 l_0_14_68)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45264 (* ?x45263 l_0_14_67)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45261 (* ?x45260 l_0_14_47)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45258 (* ?x45257 l_0_14_46)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x45902 (* ?x45761 l_0_14_138)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x45900 (* ?x45797 l_0_14_137)))
 (let ((?x45899 (- (* (* (- 2.0) l_0_14_11) l_0_14_4) (* (* 2.0 l_0_14_12) l_0_14_5))))
 (let ((?x45908 (+ (- (- (- ?x45899 ?x45900) ?x45902) (* (* 2.0 l_0_14_13) l_0_14_6)) (* (* 2.0 l_0_14_25) l_0_14_32))))
 (let ((?x45912 (+ (+ ?x45908 (* (* 2.0 l_0_14_26) l_0_14_33)) (* (* 2.0 l_0_14_27) l_0_14_34))))
 (= (- (- (+ (+ ?x45912 ?x45258) ?x45261) ?x45264) ?x45267) 0.0)))))))))))))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x45965 (* ?x45964 l_0_14_68)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x45962 (* ?x45961 l_0_14_67)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x45959 (* ?x45958 l_0_14_47)))
 (let ((?x45254 (* 12.0 l_0_14_3)))
 (let ((?x45255 (* ?x45254 l_0_14_5)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45252 (* ?x45251 l_0_14_26)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45249 (* ?x45248 l_0_14_25)))
 (let ((?x45237 (* 12.0 l_0_14_2)))
 (let ((?x45238 (* ?x45237 l_0_14_4)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x25113 (* ?x45761 l_0_14_143)))
 (let ((?x45762 (* ?x45761 l_0_14_131)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x35390 (* ?x45797 l_0_14_142)))
 (let ((?x45939 (- (- (+ (- (* ?x45797 l_0_14_130) ?x35390) ?x45762) ?x25113) (* (* 2.0 l_0_14_16) l_0_14_4))))
 (let ((?x45944 (- (- ?x45939 (* (* 2.0 l_0_14_17) l_0_14_5)) (* (* 2.0 l_0_14_18) l_0_14_6))))
 (let ((?x45949 (+ (- (- (+ ?x45944 ?x45238) ?x45249) ?x45252) (* (* 2.0 l_0_14_25) l_0_14_37))))
 (let ((?x45953 (+ (+ ?x45949 (* (* 2.0 l_0_14_26) l_0_14_38)) (* (* 2.0 l_0_14_27) l_0_14_39))))
 (let ((?x45963 (+ (- (- (+ ?x45953 ?x45255) (* (* 6.0 l_0_14_44) l_0_14_46)) ?x45959) ?x45962)))
 (= (+ ?x45963 ?x45965) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x46024 (* l_0_14_9 l_0_14_9)))
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x46022 (* ?x45835 l_0_14_92)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x46020 (* ?x45832 l_0_14_91)))
 (let ((?x46018 (* l_0_14_8 l_0_14_8)))
 (let ((?x46016 (* l_0_14_7 l_0_14_7)))
 (let ((?x46014 (* l_0_14_31 l_0_14_31)))
 (let ((?x46012 (* l_0_14_30 l_0_14_30)))
 (let ((?x46010 (* l_0_14_29 l_0_14_29)))
 (let ((?x46008 (* l_0_14_28 l_0_14_28)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46006 (* ?x45811 l_0_14_176)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46004 (* ?x45808 l_0_14_175)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46002 (* ?x45805 l_0_14_155)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46000 (* ?x45802 l_0_14_154)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x45998 (* ?x45794 l_0_14_113)))
 (let ((?x45997 (+ (* (- l_0_14_10) l_0_14_10) (* (* 2.0 l_0_14_107) l_0_14_112))))
 (let ((?x46011 (+ (+ (+ (+ (- (- (+ ?x45997 ?x45998) ?x46000) ?x46002) ?x46004) ?x46006) ?x46008) ?x46010)))
 (let ((?x46025 (- (- (- (- (- (+ (+ ?x46011 ?x46012) ?x46014) ?x46016) ?x46018) ?x46020) ?x46022) ?x46024)))
 (= ?x46025 0.0))))))))))))))))))))))))))
(assert
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x46095 (* ?x45835 l_0_14_96)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x46093 (* ?x45832 l_0_14_95)))
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45347 (* ?x45266 l_0_14_71)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45345 (* ?x45263 l_0_14_70)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45343 (* ?x45260 l_0_14_50)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45341 (* ?x45257 l_0_14_49)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46075 (* ?x45811 l_0_14_180)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46073 (* ?x45808 l_0_14_179)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46071 (* ?x45805 l_0_14_159)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46069 (* ?x45802 l_0_14_158)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x46060 (* ?x45794 l_0_14_117)))
 (let ((?x46059 (+ (* (* (- 2.0) l_0_14_10) l_0_14_14) (* (* 2.0 l_0_14_107) l_0_14_116))))
 (let ((?x46066 (- (- (+ ?x46059 ?x46060) (* (* 2.0 l_0_14_11) l_0_14_7)) (* (* 2.0 l_0_14_12) l_0_14_8))))
 (let ((?x46074 (+ (- (- (- ?x46066 (* (* 2.0 l_0_14_13) l_0_14_9)) ?x46069) ?x46071) ?x46073)))
 (let ((?x46082 (+ (+ (+ ?x46074 ?x46075) (* (* 2.0 l_0_14_28) l_0_14_32)) (* (* 2.0 l_0_14_29) l_0_14_33))))
 (let ((?x46088 (+ (+ ?x46082 (* (* 2.0 l_0_14_30) l_0_14_34)) (* (* 2.0 l_0_14_31) l_0_14_35))))
 (= (- (- (- (- (+ (+ ?x46088 ?x45341) ?x45343) ?x45345) ?x45347) ?x46093) ?x46095) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46184 (* ?x45964 l_0_14_71)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46182 (* ?x45961 l_0_14_70)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46180 (* ?x45958 l_0_14_50)))
 (let ((?x45254 (* 12.0 l_0_14_3)))
 (let ((?x45339 (* ?x45254 l_0_14_8)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45337 (* ?x45251 l_0_14_29)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45335 (* ?x45248 l_0_14_28)))
 (let ((?x45237 (* 12.0 l_0_14_2)))
 (let ((?x45327 (* ?x45237 l_0_14_7)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46162 (* ?x45811 l_0_14_185)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46160 (* ?x45808 l_0_14_184)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46154 (* ?x45805 l_0_14_164)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46152 (* ?x45802 l_0_14_163)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x45800 (* ?x45761 l_0_14_134)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x45798 (* ?x45797 l_0_14_133)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x46148 (* ?x45794 l_0_14_122)))
 (let ((?x45792 (* 2.0 l_0_14_107)))
 (let ((?x46146 (* ?x45792 l_0_14_121)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x46144 (* ?x46143 l_0_14_87)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x46141 (* ?x9172 l_0_14_86)))
 (let ((?x46149 (+ (+ (- (- (* (* (- 2.0) l_0_14_10) l_0_14_19) ?x46141) ?x46144) ?x46146) ?x46148)))
 (let ((?x46157 (- (- (- (+ (+ ?x46149 ?x45798) ?x45800) ?x46152) ?x46154) (* (* 2.0 l_0_14_16) l_0_14_7))))
 (let ((?x46165 (- (+ (+ (- ?x46157 (* (* 2.0 l_0_14_17) l_0_14_8)) ?x46160) ?x46162) (* (* 2.0 l_0_14_18) l_0_14_9))))
 (let ((?x46170 (+ (- (- (+ ?x46165 ?x45327) ?x45335) ?x45337) (* (* 2.0 l_0_14_28) l_0_14_37))))
 (let ((?x46175 (+ (+ (+ ?x46170 (* (* 2.0 l_0_14_29) l_0_14_38)) ?x45339) (* (* 2.0 l_0_14_30) l_0_14_39))))
 (let ((?x46179 (- (+ ?x46175 (* (* 2.0 l_0_14_31) l_0_14_40)) (* (* 6.0 l_0_14_44) l_0_14_49))))
 (= (+ (+ (- ?x46179 ?x46180) ?x46182) ?x46184) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45440 (* ?x45266 l_0_14_75)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45438 (* ?x45263 l_0_14_74)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45435 (* ?x45260 l_0_14_54)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45433 (* ?x45257 l_0_14_53)))
 (let ((?x46254 (* l_0_14_36 l_0_14_36)))
 (let ((?x46252 (* l_0_14_35 l_0_14_35)))
 (let ((?x46250 (* l_0_14_34 l_0_14_34)))
 (let ((?x46248 (* l_0_14_33 l_0_14_33)))
 (let ((?x46246 (* l_0_14_32 l_0_14_32)))
 (let ((?x46244 (* l_0_14_15 l_0_14_15)))
 (let ((?x46242 (* l_0_14_14 l_0_14_14)))
 (let ((?x46240 (* l_0_14_13 l_0_14_13)))
 (let ((?x46241 (- (- (* (- l_0_14_11) l_0_14_11) (* l_0_14_12 l_0_14_12)) ?x46240)))
 (let ((?x46255 (+ (+ (+ (+ (+ (- (- ?x46241 ?x46242) ?x46244) ?x46246) ?x46248) ?x46250) ?x46252) ?x46254)))
 (= (- (- (+ (+ ?x46255 ?x45433) ?x45435) ?x45438) ?x45440) 0.0))))))))))))))))))))
(assert
 (let ((?x45266 (* 2.0 l_0_14_66)))
 (let ((?x45538 (* ?x45266 l_0_14_80)))
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46304 (* ?x45964 l_0_14_75)))
 (let ((?x45263 (* 2.0 l_0_14_65)))
 (let ((?x45536 (* ?x45263 l_0_14_79)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46301 (* ?x45961 l_0_14_74)))
 (let ((?x45260 (* 2.0 l_0_14_45)))
 (let ((?x45531 (* ?x45260 l_0_14_59)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46298 (* ?x45958 l_0_14_54)))
 (let ((?x45257 (* 2.0 l_0_14_44)))
 (let ((?x45529 (* ?x45257 l_0_14_58)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45430 (* ?x45251 l_0_14_33)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45428 (* ?x45248 l_0_14_32)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x45902 (* ?x45761 l_0_14_138)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x45900 (* ?x45797 l_0_14_137)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x45416 (* ?x45415 l_0_14_3)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x45413 (* ?x45412 l_0_14_2)))
 (let ((?x46266 (- (+ (* (* (- 2.0) l_0_14_11) l_0_14_16) ?x45413) (* (* 2.0 l_0_14_12) l_0_14_17))))
 (let ((?x46271 (- (+ (+ (+ ?x46266 ?x45416) ?x45900) ?x45902) (* (* 2.0 l_0_14_13) l_0_14_18))))
 (let ((?x46277 (- (- ?x46271 (* (* 2.0 l_0_14_14) l_0_14_19)) (* (* 2.0 l_0_14_15) l_0_14_20))))
 (let ((?x46285 (+ (+ (- (- ?x46277 ?x45428) ?x45430) (* (* 2.0 l_0_14_32) l_0_14_37)) (* (* 2.0 l_0_14_33) l_0_14_38))))
 (let ((?x46291 (+ (+ ?x46285 (* (* 2.0 l_0_14_34) l_0_14_39)) (* (* 2.0 l_0_14_35) l_0_14_40))))
 (let ((?x46296 (- (+ ?x46291 (* (* 2.0 l_0_14_36) l_0_14_41)) (* (* 6.0 l_0_14_44) l_0_14_53))))
 (let ((?x46306 (- (+ (- (+ (+ (- (+ ?x46296 ?x45529) ?x46298) ?x45531) ?x46301) ?x45536) ?x46304) ?x45538)))
 (= ?x46306 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46399 (* ?x45964 l_0_14_80)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46397 (* ?x45961 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x45534 (* ?x45533 l_0_14_65)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46394 (* ?x45958 l_0_14_59)))
 (let ((?x45955 (* 6.0 l_0_14_44)))
 (let ((?x46392 (* ?x45955 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x45527 (* ?x45526 l_0_14_44)))
 (let ((?x46389 (* l_0_14_42 l_0_14_42)))
 (let ((?x46387 (* l_0_14_41 l_0_14_41)))
 (let ((?x46385 (* l_0_14_40 l_0_14_40)))
 (let ((?x46383 (* l_0_14_39 l_0_14_39)))
 (let ((?x46381 (* l_0_14_38 l_0_14_38)))
 (let ((?x46379 (* l_0_14_37 l_0_14_37)))
 (let ((?x45251 (* 12.0 l_0_14_24)))
 (let ((?x45524 (* ?x45251 l_0_14_38)))
 (let ((?x45248 (* 12.0 l_0_14_23)))
 (let ((?x45522 (* ?x45248 l_0_14_37)))
 (let ((?x46375 (* l_0_14_21 l_0_14_21)))
 (let ((?x46373 (* l_0_14_20 l_0_14_20)))
 (let ((?x46371 (* l_0_14_19 l_0_14_19)))
 (let ((?x46369 (* l_0_14_18 l_0_14_18)))
 (let ((?x46367 (* l_0_14_17 l_0_14_17)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x45509 (* ?x45508 l_0_14_3)))
 (let ((?x46364 (* l_0_14_16 l_0_14_16)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x45506 (* ?x45505 l_0_14_2)))
 (let ((?x45761 (* 2.0 l_0_14_129)))
 (let ((?x25113 (* ?x45761 l_0_14_143)))
 (let ((?x45797 (* 2.0 l_0_14_128)))
 (let ((?x35390 (* ?x45797 l_0_14_142)))
 (let ((?x46372 (- (- (- (+ (- (+ (+ ?x35390 ?x25113) ?x45506) ?x46364) ?x45509) ?x46367) ?x46369) ?x46371)))
 (let ((?x46384 (+ (+ (+ (- (- (- (- ?x46372 ?x46373) ?x46375) ?x45522) ?x45524) ?x46379) ?x46381) ?x46383)))
 (let ((?x46396 (+ (- (- (- (+ (+ (+ ?x46384 ?x46385) ?x46387) ?x46389) ?x45527) ?x46392) ?x46394) ?x45534)))
 (= (+ (+ ?x46396 ?x46397) ?x46399) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x46490 (* ?x46489 l_0_14_81)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x46487 (* ?x46486 l_0_14_80)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x46484 (* ?x46483 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46481 (* ?x45533 l_0_14_67)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x46479 (* ?x46478 l_0_14_60)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x46476 (* ?x46475 l_0_14_59)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x46473 (* ?x46472 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46470 (* ?x45526 l_0_14_46)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x46468 (* ?x46467 l_0_14_39)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x46465 (* ?x46464 l_0_14_38)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x46462 (* ?x46461 l_0_14_37)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46459 (* ?x45053 l_0_14_25)))
 (let ((?x46438 (* 12.0 l_0_14_18)))
 (let ((?x46439 (* ?x46438 l_0_14_6)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x46436 (* ?x45508 l_0_14_5)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x46434 (* ?x45505 l_0_14_4)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46432 (* ?x45228 l_0_14_142)))
 (let ((?x46433 (- (+ (* (* 12.0 l_0_14_1) l_0_14_4) (* ?x45228 l_0_14_130)) ?x46432)))
 (let ((?x46443 (- (+ (+ (+ ?x46433 ?x46434) ?x46436) ?x46439) (* (* 2.0 l_0_14_193) l_0_14_205))))
 (let ((?x46449 (- (- ?x46443 (* (* 2.0 l_0_14_194) l_0_14_206)) (* (* 2.0 l_0_14_195) l_0_14_207))))
 (let ((?x46455 (- (- ?x46449 (* (* 2.0 l_0_14_214) l_0_14_226)) (* (* 2.0 l_0_14_215) l_0_14_227))))
 (let ((?x46466 (- (- (- (- ?x46455 (* (* 2.0 l_0_14_216) l_0_14_228)) ?x46459) ?x46462) ?x46465)))
 (let ((?x46485 (+ (+ (- (- (- (- (- ?x46466 ?x46468) ?x46470) ?x46473) ?x46476) ?x46479) ?x46481) ?x46484)))
 (= (+ (+ ?x46485 ?x46487) ?x46490) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46656 (* 2.0 l_0_14_73)))
 (let ((?x46657 (* ?x46656 l_0_14_82)))
 (let ((?x46653 (* 2.0 l_0_14_72)))
 (let ((?x46654 (* ?x46653 l_0_14_81)))
 (let ((?x46650 (* 2.0 l_0_14_71)))
 (let ((?x46651 (* ?x46650 l_0_14_80)))
 (let ((?x46647 (* 2.0 l_0_14_70)))
 (let ((?x46648 (* ?x46647 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46645 (* ?x45533 l_0_14_70)))
 (let ((?x46642 (* 2.0 l_0_14_52)))
 (let ((?x46643 (* ?x46642 l_0_14_61)))
 (let ((?x46639 (* 2.0 l_0_14_51)))
 (let ((?x46640 (* ?x46639 l_0_14_60)))
 (let ((?x46636 (* 2.0 l_0_14_50)))
 (let ((?x46637 (* ?x46636 l_0_14_59)))
 (let ((?x46633 (* 2.0 l_0_14_49)))
 (let ((?x46634 (* ?x46633 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46631 (* ?x45526 l_0_14_49)))
 (let ((?x46628 (* 12.0 l_0_14_31)))
 (let ((?x46629 (* ?x46628 l_0_14_40)))
 (let ((?x46625 (* 12.0 l_0_14_30)))
 (let ((?x46626 (* ?x46625 l_0_14_39)))
 (let ((?x46622 (* 12.0 l_0_14_29)))
 (let ((?x46623 (* ?x46622 l_0_14_38)))
 (let ((?x46619 (* 12.0 l_0_14_28)))
 (let ((?x46620 (* ?x46619 l_0_14_37)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46614 (* ?x45053 l_0_14_28)))
 (let ((?x46438 (* 12.0 l_0_14_18)))
 (let ((?x46591 (* ?x46438 l_0_14_9)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x46589 (* ?x45508 l_0_14_8)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x46587 (* ?x45320 l_0_14_184)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x46585 (* ?x45505 l_0_14_7)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x46583 (* ?x45317 l_0_14_163)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46581 (* ?x45228 l_0_14_133)))
 (let ((?x35231 (* 2.0 l_0_14_106)))
 (let ((?x46579 (* ?x35231 l_0_14_121)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x46566 (* ?x9172 l_0_14_85)))
 (let ((?x46561 (* 12.0 l_0_14_10)))
 (let ((?x46563 (* ?x46561 l_0_14_19)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x46559 (* ?x45040 l_0_14_7)))
 (let ((?x46588 (+ (+ (- (+ (+ (- (+ ?x46559 ?x46563) ?x46566) ?x46579) ?x46581) ?x46583) ?x46585) ?x46587)))
 (let ((?x46598 (- (- (+ (+ ?x46588 ?x46589) ?x46591) (* (* 2.0 l_0_14_196) l_0_14_205)) (* (* 2.0 l_0_14_197) l_0_14_206))))
 (let ((?x46604 (- (- ?x46598 (* (* 2.0 l_0_14_198) l_0_14_207)) (* (* 2.0 l_0_14_199) l_0_14_208))))
 (let ((?x46610 (- (- ?x46604 (* (* 2.0 l_0_14_217) l_0_14_226)) (* (* 2.0 l_0_14_218) l_0_14_227))))
 (let ((?x46618 (- (- (- ?x46610 (* (* 2.0 l_0_14_219) l_0_14_228)) ?x46614) (* (* 2.0 l_0_14_220) l_0_14_229))))
 (let ((?x46638 (- (- (- (- (- (- (- ?x46618 ?x46620) ?x46623) ?x46626) ?x46629) ?x46631) ?x46634) ?x46637)))
 (let ((?x46658 (+ (+ (+ (+ (+ (- (- ?x46638 ?x46640) ?x46643) ?x46645) ?x46648) ?x46651) ?x46654) ?x46657)))
 (= ?x46658 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46859 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x46856 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x46853 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x46850 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x46847 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x45066 (* ?x45065 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46843 (* ?x45533 l_0_14_74)))
 (let ((?x46841 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x46838 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x46835 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x46832 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x46829 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x45060 (* ?x45059 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46825 (* ?x45526 l_0_14_53)))
 (let ((?x46823 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x46820 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x46817 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x46814 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x46811 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46793 (* ?x45053 l_0_14_32)))
 (let ((?x46776 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x46773 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x46770 (* ?x46769 l_0_14_18)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46752 (* ?x45228 l_0_14_137)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x46749 (* ?x45415 l_0_14_17)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x25380 (* ?x45412 l_0_14_16)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x46745 (* ?x45040 l_0_14_11)))
 (let ((?x46780 (- (+ (+ (+ (+ (+ (+ ?x46745 ?x25380) ?x46749) ?x46752) ?x46770) ?x46773) ?x46776) (* (* 2.0 l_0_14_200) l_0_14_205))))
 (let ((?x46786 (- (- ?x46780 (* (* 2.0 l_0_14_201) l_0_14_206)) (* (* 2.0 l_0_14_202) l_0_14_207))))
 (let ((?x46792 (- (- ?x46786 (* (* 2.0 l_0_14_203) l_0_14_208)) (* (* 2.0 l_0_14_204) l_0_14_209))))
 (let ((?x46800 (- (- (- ?x46792 ?x46793) (* (* 2.0 l_0_14_221) l_0_14_226)) (* (* 2.0 l_0_14_222) l_0_14_227))))
 (let ((?x46806 (- (- ?x46800 (* (* 2.0 l_0_14_223) l_0_14_228)) (* (* 2.0 l_0_14_224) l_0_14_229))))
 (let ((?x46818 (- (- (- (- ?x46806 (* (* 2.0 l_0_14_225) l_0_14_230)) ?x46811) ?x46814) ?x46817)))
 (let ((?x46836 (- (- (- (+ (- (- (- ?x46818 ?x46820) ?x46823) ?x46825) ?x45060) ?x46829) ?x46832) ?x46835)))
 (let ((?x46854 (+ (+ (+ (- (+ (- (- ?x46836 ?x46838) ?x46841) ?x46843) ?x45066) ?x46847) ?x46850) ?x46853)))
 (= (+ (+ ?x46854 ?x46856) ?x46859) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45068 (* l_0_14_64 l_0_14_64)))
 (let ((?x45069 (* 3.0 ?x45068)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x47042 (* ?x45533 l_0_14_79)))
 (let ((?x45063 (* (* 3.0 l_0_14_43) l_0_14_43)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x47021 (* ?x45526 l_0_14_58)))
 (let ((?x47019 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47016 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47013 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47010 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47007 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47004 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x47001 (* l_0_14_231 l_0_14_231)))
 (let ((?x46999 (* l_0_14_230 l_0_14_230)))
 (let ((?x46997 (* l_0_14_229 l_0_14_229)))
 (let ((?x46995 (* l_0_14_228 l_0_14_228)))
 (let ((?x46993 (* l_0_14_227 l_0_14_227)))
 (let ((?x46991 (* l_0_14_226 l_0_14_226)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x45054 (* ?x45053 l_0_14_37)))
 (let ((?x46988 (* l_0_14_210 l_0_14_210)))
 (let ((?x46375 (* l_0_14_21 l_0_14_21)))
 (let ((?x46986 (* 6.0 ?x46375)))
 (let ((?x46984 (* l_0_14_209 l_0_14_209)))
 (let ((?x46982 (* l_0_14_208 l_0_14_208)))
 (let ((?x46980 (* l_0_14_207 l_0_14_207)))
 (let ((?x46978 (* l_0_14_206 l_0_14_206)))
 (let ((?x46976 (* l_0_14_205 l_0_14_205)))
 (let ((?x46373 (* l_0_14_20 l_0_14_20)))
 (let ((?x46974 (* 6.0 ?x46373)))
 (let ((?x46371 (* l_0_14_19 l_0_14_19)))
 (let ((?x46972 (* 6.0 ?x46371)))
 (let ((?x46369 (* l_0_14_18 l_0_14_18)))
 (let ((?x46955 (* 6.0 ?x46369)))
 (let ((?x46367 (* l_0_14_17 l_0_14_17)))
 (let ((?x46952 (* 6.0 ?x46367)))
 (let ((?x46364 (* l_0_14_16 l_0_14_16)))
 (let ((?x46948 (* 6.0 ?x46364)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46432 (* ?x45228 l_0_14_142)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x45041 (* ?x45040 l_0_14_16)))
 (let ((?x46977 (- (+ (+ (+ (+ (+ (+ ?x45041 ?x46432) ?x46948) ?x46952) ?x46955) ?x46972) ?x46974) ?x46976)))
 (let ((?x46990 (- (- (+ (- (- (- (- ?x46977 ?x46978) ?x46980) ?x46982) ?x46984) ?x46986) ?x46988) ?x45054)))
 (let ((?x47005 (- (- (- (- (- (- (- ?x46990 ?x46991) ?x46993) ?x46995) ?x46997) ?x46999) ?x47001) ?x47004)))
 (let ((?x47023 (- (- (- (- (- (- (- ?x47005 ?x47007) ?x47010) ?x47013) ?x47016) ?x47019) ?x47021) ?x45063)))
 (let ((?x47029 (- (- ?x47023 (* (* 1.0 l_0_14_58) l_0_14_58)) (* (* 1.0 l_0_14_59) l_0_14_59))))
 (let ((?x47035 (- (- ?x47029 (* (* 1.0 l_0_14_60) l_0_14_60)) (* (* 1.0 l_0_14_61) l_0_14_61))))
 (let ((?x47041 (- (- ?x47035 (* (* 1.0 l_0_14_62) l_0_14_62)) (* (* 1.0 l_0_14_63) l_0_14_63))))
 (let ((?x47050 (+ (+ (+ (+ ?x47041 ?x47042) ?x45069) (* 1.0 (* l_0_14_79 l_0_14_79))) (* 1.0 (* l_0_14_80 l_0_14_80)))))
 (let ((?x47056 (+ (+ ?x47050 (* 1.0 (* l_0_14_81 l_0_14_81))) (* 1.0 (* l_0_14_82 l_0_14_82)))))
 (let ((?x47062 (+ (+ ?x47056 (* 1.0 (* l_0_14_83 l_0_14_83))) (* 1.0 (* l_0_14_84 l_0_14_84)))))
 (= ?x47062 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47154 (* l_0_14_69 l_0_14_69)))
 (let ((?x47155 (* 3.0 ?x47154)))
 (let ((?x47151 (* l_0_14_68 l_0_14_68)))
 (let ((?x47152 (* 3.0 ?x47151)))
 (let ((?x47148 (* l_0_14_67 l_0_14_67)))
 (let ((?x47149 (* 3.0 ?x47148)))
 (let ((?x45774 (* l_0_14_6 l_0_14_6)))
 (let ((?x47146 (* 6.0 ?x45774)))
 (let ((?x45772 (* l_0_14_5 l_0_14_5)))
 (let ((?x47144 (* 6.0 ?x45772)))
 (let ((?x47142 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x47139 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x45770 (* l_0_14_4 l_0_14_4)))
 (let ((?x47133 (* 6.0 ?x45770)))
 (let ((?x47131 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x47128 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x47125 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x47122 (* l_0_14_132 l_0_14_132)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47120 (* ?x47119 l_0_14_144)))
 (let ((?x47117 (* l_0_14_131 l_0_14_131)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47115 (* ?x47114 l_0_14_143)))
 (let ((?x47112 (* l_0_14_130 l_0_14_130)))
 (let ((?x47121 (- (+ (- (+ (* (* (- 2.0) l_0_14_130) l_0_14_142) ?x47112) ?x47115) ?x47117) ?x47120)))
 (let ((?x47137 (- (+ (- (- (- (+ ?x47121 ?x47122) ?x47125) ?x47128) ?x47131) ?x47133) (* (* 3.0 l_0_14_46) l_0_14_46))))
 (let ((?x47156 (+ (+ (+ (+ (+ (- (- ?x47137 ?x47139) ?x47142) ?x47144) ?x47146) ?x47149) ?x47152) ?x47155)))
 (= ?x47156 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47290 (* ?x47289 l_0_14_72)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47287 (* ?x47286 l_0_14_71)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47284 (* ?x47283 l_0_14_70)))
 (let ((?x47281 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x47278 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47275 (* ?x47274 l_0_14_51)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47272 (* ?x47271 l_0_14_50)))
 (let ((?x47266 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x47263 (* ?x46467 l_0_14_30)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x47261 (* ?x46464 l_0_14_29)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x47259 (* ?x46461 l_0_14_28)))
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x47257 (* ?x47256 l_0_14_186)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x47254 (* ?x47253 l_0_14_185)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x47251 (* ?x47250 l_0_14_184)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x47248 (* ?x47247 l_0_14_165)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x47245 (* ?x47244 l_0_14_164)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x47242 (* ?x47241 l_0_14_163)))
 (let ((?x47238 (* 2.0 l_0_14_136)))
 (let ((?x47239 (* ?x47238 l_0_14_145)))
 (let ((?x47235 (* 2.0 l_0_14_135)))
 (let ((?x47236 (* ?x47235 l_0_14_144)))
 (let ((?x47232 (* 2.0 l_0_14_134)))
 (let ((?x47233 (* ?x47232 l_0_14_143)))
 (let ((?x47229 (* 2.0 l_0_14_133)))
 (let ((?x47230 (* ?x47229 l_0_14_142)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47227 (* ?x47119 l_0_14_135)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47225 (* ?x47114 l_0_14_134)))
 (let ((?x47222 (* 2.0 l_0_14_130)))
 (let ((?x47223 (* ?x47222 l_0_14_133)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x47220 (* ?x47219 l_0_14_123)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x47217 (* ?x47216 l_0_14_122)))
 (let ((?x47213 (* 2.0 l_0_14_109)))
 (let ((?x47214 (* ?x47213 l_0_14_121)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47211 (* ?x47210 l_0_14_90)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47208 (* ?x46143 l_0_14_89)))
 (let ((?x47218 (+ (+ (- (- (* (* (- 2.0) l_0_14_100) l_0_14_88) ?x47208) ?x47211) ?x47214) ?x47217)))
 (let ((?x47237 (- (- (- (+ (+ (+ (+ ?x47218 ?x47220) ?x47223) ?x47225) ?x47227) ?x47230) ?x47233) ?x47236)))
 (let ((?x47258 (+ (+ (+ (- (- (- (- ?x47237 ?x47239) ?x47242) ?x47245) ?x47248) ?x47251) ?x47254) ?x47257)))
 (let ((?x47270 (- (+ (- (- (- ?x47258 ?x47259) ?x47261) ?x47263) ?x47266) (* (* 6.0 l_0_14_46) l_0_14_49))))
 (let ((?x47291 (+ (+ (+ (+ (+ (- (- ?x47270 ?x47272) ?x47275) ?x47278) ?x47281) ?x47284) ?x47287) ?x47290)))
 (= ?x47291 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x46490 (* ?x46489 l_0_14_81)))
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47444 (* ?x47289 l_0_14_76)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x46487 (* ?x46486 l_0_14_80)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47441 (* ?x47286 l_0_14_75)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x46484 (* ?x46483 l_0_14_79)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47438 (* ?x47283 l_0_14_74)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x46479 (* ?x46478 l_0_14_60)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47435 (* ?x47274 l_0_14_55)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x46476 (* ?x46475 l_0_14_59)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47432 (* ?x47271 l_0_14_54)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x46473 (* ?x46472 l_0_14_58)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x47427 (* ?x46467 l_0_14_34)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x47425 (* ?x46464 l_0_14_33)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x47423 (* ?x46461 l_0_14_32)))
 (let ((?x47421 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47418 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x47415 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47412 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47409 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47406 (* ?x47119 l_0_14_139)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47404 (* ?x47114 l_0_14_138)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x47381 (* ?x46769 l_0_14_6)))
 (let ((?x47379 (+ (* (* 12.0 l_0_14_11) l_0_14_4) (* (* 12.0 l_0_14_12) l_0_14_5))))
 (let ((?x47407 (+ (+ (+ (+ ?x47379 ?x47381) (* (* 2.0 l_0_14_130) l_0_14_137)) ?x47404) ?x47406)))
 (let ((?x47426 (- (- (- (- (- (- (- ?x47407 ?x47409) ?x47412) ?x47415) ?x47418) ?x47421) ?x47423) ?x47425)))
 (let ((?x47433 (- (+ (- (- ?x47426 ?x47427) (* (* 6.0 l_0_14_46) l_0_14_53)) ?x46473) ?x47432)))
 (let ((?x47443 (- (+ (- (+ (+ (- (+ ?x47433 ?x46476) ?x47435) ?x46479) ?x47438) ?x46484) ?x47441) ?x46487)))
 (= (- (+ ?x47443 ?x47444) ?x46490) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47536 (* ?x47289 l_0_14_81)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47534 (* ?x47286 l_0_14_80)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47532 (* ?x47283 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46481 (* ?x45533 l_0_14_67)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47529 (* ?x47274 l_0_14_60)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47527 (* ?x47271 l_0_14_59)))
 (let ((?x47268 (* 6.0 l_0_14_46)))
 (let ((?x47525 (* ?x47268 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46470 (* ?x45526 l_0_14_46)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x46468 (* ?x46467 l_0_14_39)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x46465 (* ?x46464 l_0_14_38)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x46462 (* ?x46461 l_0_14_37)))
 (let ((?x46438 (* 12.0 l_0_14_18)))
 (let ((?x46439 (* ?x46438 l_0_14_6)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x46436 (* ?x45508 l_0_14_5)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x46434 (* ?x45505 l_0_14_4)))
 (let ((?x47516 (* l_0_14_147 l_0_14_147)))
 (let ((?x47514 (* l_0_14_146 l_0_14_146)))
 (let ((?x47512 (* l_0_14_145 l_0_14_145)))
 (let ((?x47510 (* l_0_14_144 l_0_14_144)))
 (let ((?x47508 (* l_0_14_143 l_0_14_143)))
 (let ((?x47506 (* l_0_14_142 l_0_14_142)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47120 (* ?x47119 l_0_14_144)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47115 (* ?x47114 l_0_14_143)))
 (let ((?x47509 (- (- (+ (+ (* (* 2.0 l_0_14_130) l_0_14_142) ?x47115) ?x47120) ?x47506) ?x47508)))
 (let ((?x47520 (+ (+ (+ (- (- (- (- ?x47509 ?x47510) ?x47512) ?x47514) ?x47516) ?x46434) ?x46436) ?x46439)))
 (let ((?x47530 (- (- (- (- (- (- (- ?x47520 ?x46462) ?x46465) ?x46468) ?x46470) ?x47525) ?x47527) ?x47529)))
 (= (+ (+ (+ (+ ?x47530 ?x46481) ?x47532) ?x47534) ?x47536) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46024 (* l_0_14_9 l_0_14_9)))
 (let ((?x47656 (* 6.0 ?x46024)))
 (let ((?x46018 (* l_0_14_8 l_0_14_8)))
 (let ((?x47654 (* 6.0 ?x46018)))
 (let ((?x47651 (* l_0_14_73 l_0_14_73)))
 (let ((?x47652 (* 3.0 ?x47651)))
 (let ((?x47648 (* l_0_14_72 l_0_14_72)))
 (let ((?x47649 (* 3.0 ?x47648)))
 (let ((?x47645 (* l_0_14_71 l_0_14_71)))
 (let ((?x47646 (* 3.0 ?x47645)))
 (let ((?x47642 (* l_0_14_70 l_0_14_70)))
 (let ((?x47643 (* 3.0 ?x47642)))
 (let ((?x46016 (* l_0_14_7 l_0_14_7)))
 (let ((?x47640 (* 6.0 ?x46016)))
 (let ((?x47638 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x47635 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x47632 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x47626 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x47623 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x47620 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x47617 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x47613 (* 2.0 l_0_14_178)))
 (let ((?x47614 (* ?x47613 l_0_14_187)))
 (let ((?x47610 (* 2.0 l_0_14_177)))
 (let ((?x47611 (* ?x47610 l_0_14_186)))
 (let ((?x47607 (* 2.0 l_0_14_176)))
 (let ((?x47608 (* ?x47607 l_0_14_185)))
 (let ((?x47604 (* 2.0 l_0_14_175)))
 (let ((?x47605 (* ?x47604 l_0_14_184)))
 (let ((?x47601 (* 2.0 l_0_14_157)))
 (let ((?x47602 (* ?x47601 l_0_14_166)))
 (let ((?x47598 (* 2.0 l_0_14_156)))
 (let ((?x47599 (* ?x47598 l_0_14_165)))
 (let ((?x47595 (* 2.0 l_0_14_155)))
 (let ((?x47596 (* ?x47595 l_0_14_164)))
 (let ((?x47592 (* 2.0 l_0_14_154)))
 (let ((?x47593 (* ?x47592 l_0_14_163)))
 (let ((?x47590 (* l_0_14_136 l_0_14_136)))
 (let ((?x47588 (* l_0_14_135 l_0_14_135)))
 (let ((?x47586 (* l_0_14_134 l_0_14_134)))
 (let ((?x47584 (* l_0_14_133 l_0_14_133)))
 (let ((?x47581 (* 2.0 l_0_14_115)))
 (let ((?x47582 (* ?x47581 l_0_14_124)))
 (let ((?x47578 (* 2.0 l_0_14_114)))
 (let ((?x47579 (* ?x47578 l_0_14_123)))
 (let ((?x47575 (* 2.0 l_0_14_113)))
 (let ((?x47576 (* ?x47575 l_0_14_122)))
 (let ((?x47572 (* 2.0 l_0_14_112)))
 (let ((?x47573 (* ?x47572 l_0_14_121)))
 (let ((?x47569 (* 2.0 l_0_14_103)))
 (let ((?x47570 (* ?x47569 l_0_14_94)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47567 (* ?x47210 l_0_14_93)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47565 (* ?x46143 l_0_14_92)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x47563 (* ?x9172 l_0_14_91)))
 (let ((?x46028 (* l_0_14_10 l_0_14_10)))
 (let ((?x47562 (* 6.0 ?x46028)))
 (let ((?x47580 (+ (+ (+ (- (- (- (- ?x47562 ?x47563) ?x47565) ?x47567) ?x47570) ?x47573) ?x47576) ?x47579)))
 (let ((?x47597 (- (- (+ (+ (+ (+ (+ ?x47580 ?x47582) ?x47584) ?x47586) ?x47588) ?x47590) ?x47593) ?x47596)))
 (let ((?x47618 (- (+ (+ (+ (+ (- (- ?x47597 ?x47599) ?x47602) ?x47605) ?x47608) ?x47611) ?x47614) ?x47617)))
 (let ((?x47630 (- (- (- (- ?x47618 ?x47620) ?x47623) ?x47626) (* (* 3.0 l_0_14_49) l_0_14_49))))
 (let ((?x47650 (+ (+ (+ (+ (- (- (- ?x47630 ?x47632) ?x47635) ?x47638) ?x47640) ?x47643) ?x47646) ?x47649)))
 (= (+ (+ (+ ?x47650 ?x47652) ?x47654) ?x47656) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46656 (* 2.0 l_0_14_73)))
 (let ((?x46657 (* ?x46656 l_0_14_82)))
 (let ((?x47818 (* 6.0 l_0_14_73)))
 (let ((?x47819 (* ?x47818 l_0_14_77)))
 (let ((?x46653 (* 2.0 l_0_14_72)))
 (let ((?x46654 (* ?x46653 l_0_14_81)))
 (let ((?x47814 (* 6.0 l_0_14_72)))
 (let ((?x47815 (* ?x47814 l_0_14_76)))
 (let ((?x46650 (* 2.0 l_0_14_71)))
 (let ((?x46651 (* ?x46650 l_0_14_80)))
 (let ((?x47810 (* 6.0 l_0_14_71)))
 (let ((?x47811 (* ?x47810 l_0_14_75)))
 (let ((?x46647 (* 2.0 l_0_14_70)))
 (let ((?x46648 (* ?x46647 l_0_14_79)))
 (let ((?x47806 (* 6.0 l_0_14_70)))
 (let ((?x47807 (* ?x47806 l_0_14_74)))
 (let ((?x46642 (* 2.0 l_0_14_52)))
 (let ((?x46643 (* ?x46642 l_0_14_61)))
 (let ((?x47802 (* 6.0 l_0_14_52)))
 (let ((?x47803 (* ?x47802 l_0_14_56)))
 (let ((?x46639 (* 2.0 l_0_14_51)))
 (let ((?x46640 (* ?x46639 l_0_14_60)))
 (let ((?x47798 (* 6.0 l_0_14_51)))
 (let ((?x47799 (* ?x47798 l_0_14_55)))
 (let ((?x46636 (* 2.0 l_0_14_50)))
 (let ((?x46637 (* ?x46636 l_0_14_59)))
 (let ((?x47794 (* 6.0 l_0_14_50)))
 (let ((?x47795 (* ?x47794 l_0_14_54)))
 (let ((?x46633 (* 2.0 l_0_14_49)))
 (let ((?x46634 (* ?x46633 l_0_14_58)))
 (let ((?x46628 (* 12.0 l_0_14_31)))
 (let ((?x47788 (* ?x46628 l_0_14_35)))
 (let ((?x46625 (* 12.0 l_0_14_30)))
 (let ((?x47786 (* ?x46625 l_0_14_34)))
 (let ((?x46622 (* 12.0 l_0_14_29)))
 (let ((?x47784 (* ?x46622 l_0_14_33)))
 (let ((?x46619 (* 12.0 l_0_14_28)))
 (let ((?x47782 (* ?x46619 l_0_14_32)))
 (let ((?x47780 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x47777 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x47774 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x47771 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x47768 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x47765 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x47762 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x47759 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x47756 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x47753 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x47238 (* 2.0 l_0_14_136)))
 (let ((?x47750 (* ?x47238 l_0_14_140)))
 (let ((?x47235 (* 2.0 l_0_14_135)))
 (let ((?x47748 (* ?x47235 l_0_14_139)))
 (let ((?x47232 (* 2.0 l_0_14_134)))
 (let ((?x47746 (* ?x47232 l_0_14_138)))
 (let ((?x47229 (* 2.0 l_0_14_133)))
 (let ((?x47744 (* ?x47229 l_0_14_137)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x47742 (* ?x46769 l_0_14_9)))
 (let ((?x47740 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x47737 (* ?x45415 l_0_14_8)))
 (let ((?x47735 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x47732 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x47729 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x47726 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x47723 (* ?x45412 l_0_14_7)))
 (let ((?x47721 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x47569 (* 2.0 l_0_14_103)))
 (let ((?x47718 (* ?x47569 l_0_14_98)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47716 (* ?x47210 l_0_14_97)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47714 (* ?x46143 l_0_14_96)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x25620 (* ?x9172 l_0_14_95)))
 (let ((?x46561 (* 12.0 l_0_14_10)))
 (let ((?x11261 (* ?x46561 l_0_14_14)))
 (let ((?x47727 (+ (+ (- (- (- (- (- ?x11261 ?x25620) ?x47714) ?x47716) ?x47718) ?x47721) ?x47723) ?x47726)))
 (let ((?x47745 (+ (+ (+ (+ (+ (+ (+ ?x47727 ?x47729) ?x47732) ?x47735) ?x47737) ?x47740) ?x47742) ?x47744)))
 (let ((?x47763 (- (- (- (- (+ (+ (+ ?x47745 ?x47746) ?x47748) ?x47750) ?x47753) ?x47756) ?x47759) ?x47762)))
 (let ((?x47783 (- (+ (+ (+ (+ (+ (- ?x47763 ?x47765) ?x47768) ?x47771) ?x47774) ?x47777) ?x47780) ?x47782)))
 (let ((?x47792 (- (- (- (- ?x47783 ?x47784) ?x47786) ?x47788) (* (* 6.0 l_0_14_49) l_0_14_53))))
 (let ((?x47805 (+ (- (+ (- (+ (- (+ ?x47792 ?x46634) ?x47795) ?x46637) ?x47799) ?x46640) ?x47803) ?x46643)))
 (let ((?x47820 (+ (- (+ (- (+ (- (+ ?x47805 ?x47807) ?x46648) ?x47811) ?x46651) ?x47815) ?x46654) ?x47819)))
 (= (- ?x47820 ?x46657) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47818 (* 6.0 l_0_14_73)))
 (let ((?x47962 (* ?x47818 l_0_14_82)))
 (let ((?x47814 (* 6.0 l_0_14_72)))
 (let ((?x47960 (* ?x47814 l_0_14_81)))
 (let ((?x47810 (* 6.0 l_0_14_71)))
 (let ((?x47958 (* ?x47810 l_0_14_80)))
 (let ((?x47806 (* 6.0 l_0_14_70)))
 (let ((?x47956 (* ?x47806 l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46645 (* ?x45533 l_0_14_70)))
 (let ((?x47802 (* 6.0 l_0_14_52)))
 (let ((?x47953 (* ?x47802 l_0_14_61)))
 (let ((?x47798 (* 6.0 l_0_14_51)))
 (let ((?x47951 (* ?x47798 l_0_14_60)))
 (let ((?x47794 (* 6.0 l_0_14_50)))
 (let ((?x47949 (* ?x47794 l_0_14_59)))
 (let ((?x47790 (* 6.0 l_0_14_49)))
 (let ((?x47947 (* ?x47790 l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46631 (* ?x45526 l_0_14_49)))
 (let ((?x46628 (* 12.0 l_0_14_31)))
 (let ((?x46629 (* ?x46628 l_0_14_40)))
 (let ((?x46625 (* 12.0 l_0_14_30)))
 (let ((?x46626 (* ?x46625 l_0_14_39)))
 (let ((?x46622 (* 12.0 l_0_14_29)))
 (let ((?x46623 (* ?x46622 l_0_14_38)))
 (let ((?x46619 (* 12.0 l_0_14_28)))
 (let ((?x46620 (* ?x46619 l_0_14_37)))
 (let ((?x47940 (* l_0_14_189 l_0_14_189)))
 (let ((?x47938 (* l_0_14_188 l_0_14_188)))
 (let ((?x47936 (* l_0_14_187 l_0_14_187)))
 (let ((?x47934 (* l_0_14_186 l_0_14_186)))
 (let ((?x47932 (* l_0_14_185 l_0_14_185)))
 (let ((?x47930 (* l_0_14_184 l_0_14_184)))
 (let ((?x46438 (* 12.0 l_0_14_18)))
 (let ((?x46591 (* ?x46438 l_0_14_9)))
 (let ((?x45508 (* 12.0 l_0_14_17)))
 (let ((?x46589 (* ?x45508 l_0_14_8)))
 (let ((?x47926 (* l_0_14_168 l_0_14_168)))
 (let ((?x47924 (* l_0_14_167 l_0_14_167)))
 (let ((?x47922 (* l_0_14_166 l_0_14_166)))
 (let ((?x47920 (* l_0_14_165 l_0_14_165)))
 (let ((?x47918 (* l_0_14_164 l_0_14_164)))
 (let ((?x47916 (* l_0_14_163 l_0_14_163)))
 (let ((?x45505 (* 12.0 l_0_14_16)))
 (let ((?x46585 (* ?x45505 l_0_14_7)))
 (let ((?x47238 (* 2.0 l_0_14_136)))
 (let ((?x47239 (* ?x47238 l_0_14_145)))
 (let ((?x47235 (* 2.0 l_0_14_135)))
 (let ((?x47236 (* ?x47235 l_0_14_144)))
 (let ((?x47232 (* 2.0 l_0_14_134)))
 (let ((?x47233 (* ?x47232 l_0_14_143)))
 (let ((?x47229 (* 2.0 l_0_14_133)))
 (let ((?x47230 (* ?x47229 l_0_14_142)))
 (let ((?x47909 (* l_0_14_126 l_0_14_126)))
 (let ((?x47907 (* l_0_14_125 l_0_14_125)))
 (let ((?x47905 (* l_0_14_124 l_0_14_124)))
 (let ((?x47903 (* l_0_14_123 l_0_14_123)))
 (let ((?x47901 (* l_0_14_122 l_0_14_122)))
 (let ((?x47899 (* l_0_14_121 l_0_14_121)))
 (let ((?x47897 (* l_0_14_105 l_0_14_105)))
 (let ((?x47895 (* l_0_14_104 l_0_14_104)))
 (let ((?x47893 (* l_0_14_103 l_0_14_103)))
 (let ((?x47891 (* l_0_14_102 l_0_14_102)))
 (let ((?x47889 (* l_0_14_101 l_0_14_101)))
 (let ((?x47887 (* l_0_14_100 l_0_14_100)))
 (let ((?x46561 (* 12.0 l_0_14_10)))
 (let ((?x46563 (* ?x46561 l_0_14_19)))
 (let ((?x47900 (+ (- (- (- (- (- (- ?x46563 ?x47887) ?x47889) ?x47891) ?x47893) ?x47895) ?x47897) ?x47899)))
 (let ((?x47912 (+ (+ (+ (+ (+ (+ (+ ?x47900 ?x47901) ?x47903) ?x47905) ?x47907) ?x47909) ?x47230) ?x47233)))
 (let ((?x47923 (- (- (- (- (+ (+ (+ ?x47912 ?x47236) ?x47239) ?x46585) ?x47916) ?x47918) ?x47920) ?x47922)))
 (let ((?x47935 (+ (+ (+ (+ (+ (- (- ?x47923 ?x47924) ?x47926) ?x46589) ?x46591) ?x47930) ?x47932) ?x47934)))
 (let ((?x47945 (- (- (- (- (+ (+ (+ ?x47935 ?x47936) ?x47938) ?x47940) ?x46620) ?x46623) ?x46626) ?x46629)))
 (let ((?x47957 (+ (+ (- (- (- (- (- ?x47945 ?x46631) ?x47947) ?x47949) ?x47951) ?x47953) ?x46645) ?x47956)))
 (= (+ (+ (+ ?x47957 ?x47958) ?x47960) ?x47962) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48073 (* l_0_14_78 l_0_14_78)))
 (let ((?x48074 (* 3.0 ?x48073)))
 (let ((?x46859 (* (* 2.0 l_0_14_78) l_0_14_83)))
 (let ((?x48069 (* l_0_14_77 l_0_14_77)))
 (let ((?x48070 (* 3.0 ?x48069)))
 (let ((?x46856 (* (* 2.0 l_0_14_77) l_0_14_82)))
 (let ((?x48065 (* l_0_14_76 l_0_14_76)))
 (let ((?x48066 (* 3.0 ?x48065)))
 (let ((?x46853 (* (* 2.0 l_0_14_76) l_0_14_81)))
 (let ((?x48061 (* l_0_14_75 l_0_14_75)))
 (let ((?x48062 (* 3.0 ?x48061)))
 (let ((?x46850 (* (* 2.0 l_0_14_75) l_0_14_80)))
 (let ((?x48057 (* l_0_14_74 l_0_14_74)))
 (let ((?x48058 (* 3.0 ?x48057)))
 (let ((?x46847 (* (* 2.0 l_0_14_74) l_0_14_79)))
 (let ((?x48054 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x46841 (* (* 2.0 l_0_14_57) l_0_14_62)))
 (let ((?x48050 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x46838 (* (* 2.0 l_0_14_56) l_0_14_61)))
 (let ((?x48046 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x46835 (* (* 2.0 l_0_14_55) l_0_14_60)))
 (let ((?x48042 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x46832 (* (* 2.0 l_0_14_54) l_0_14_59)))
 (let ((?x46829 (* (* 2.0 l_0_14_53) l_0_14_58)))
 (let ((?x48034 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x48031 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x48028 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x48025 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x48022 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x46244 (* l_0_14_15 l_0_14_15)))
 (let ((?x48019 (* 6.0 ?x46244)))
 (let ((?x48017 (* l_0_14_141 l_0_14_141)))
 (let ((?x48015 (* l_0_14_140 l_0_14_140)))
 (let ((?x46242 (* l_0_14_14 l_0_14_14)))
 (let ((?x48013 (* 6.0 ?x46242)))
 (let ((?x48011 (* l_0_14_139 l_0_14_139)))
 (let ((?x48009 (* l_0_14_138 l_0_14_138)))
 (let ((?x48007 (* l_0_14_137 l_0_14_137)))
 (let ((?x46240 (* l_0_14_13 l_0_14_13)))
 (let ((?x36546 (* 6.0 ?x46240)))
 (let ((?x46238 (* l_0_14_12 l_0_14_12)))
 (let ((?x36543 (* 6.0 ?x46238)))
 (let ((?x25273 (* l_0_14_11 l_0_14_11)))
 (let ((?x11823 (* 6.0 ?x25273)))
 (let ((?x11838 (+ (+ ?x11823 ?x36543) ?x36546)))
 (let ((?x48020 (+ (+ (+ (+ (+ (+ (+ ?x11838 ?x48007) ?x48009) ?x48011) ?x48013) ?x48015) ?x48017) ?x48019)))
 (let ((?x48039 (- (+ (- (- (- (- (- ?x48020 ?x48022) ?x48025) ?x48028) ?x48031) ?x48034) ?x46829) (* (* 3.0 l_0_14_53) l_0_14_53))))
 (let ((?x48052 (+ (- (+ (- (+ (- (+ ?x48039 ?x46832) ?x48042) ?x46835) ?x48046) ?x46838) ?x48050) ?x46841)))
 (let ((?x48067 (+ (- (+ (- (+ (- (- ?x48052 ?x48054) ?x46847) ?x48058) ?x46850) ?x48062) ?x46853) ?x48066)))
 (= (+ (- (+ (- ?x48067 ?x46856) ?x48070) ?x46859) ?x48074) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47060 (* l_0_14_84 l_0_14_84)))
 (let ((?x47057 (* l_0_14_83 l_0_14_83)))
 (let ((?x47054 (* l_0_14_82 l_0_14_82)))
 (let ((?x47051 (* l_0_14_81 l_0_14_81)))
 (let ((?x47048 (* l_0_14_80 l_0_14_80)))
 (let ((?x47045 (* l_0_14_79 l_0_14_79)))
 (let ((?x48117 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x48114 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x48111 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x48108 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x48105 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x46843 (* ?x45533 l_0_14_74)))
 (let ((?x47103 (* l_0_14_63 l_0_14_63)))
 (let ((?x35792 (* l_0_14_62 l_0_14_62)))
 (let ((?x10290 (* l_0_14_61 l_0_14_61)))
 (let ((?x10286 (* l_0_14_60 l_0_14_60)))
 (let ((?x35791 (* l_0_14_59 l_0_14_59)))
 (let ((?x47096 (* l_0_14_58 l_0_14_58)))
 (let ((?x36606 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x36608 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x36536 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x12020 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x36576 (* (* 6.0 l_0_14_53) l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x46825 (* ?x45526 l_0_14_53)))
 (let ((?x46823 (* (* 12.0 l_0_14_36) l_0_14_41)))
 (let ((?x46820 (* (* 12.0 l_0_14_35) l_0_14_40)))
 (let ((?x46817 (* (* 12.0 l_0_14_34) l_0_14_39)))
 (let ((?x46814 (* (* 12.0 l_0_14_33) l_0_14_38)))
 (let ((?x46811 (* (* 12.0 l_0_14_32) l_0_14_37)))
 (let ((?x46776 (* (* 12.0 l_0_14_15) l_0_14_20)))
 (let ((?x47421 (* (* 2.0 l_0_14_141) l_0_14_146)))
 (let ((?x47418 (* (* 2.0 l_0_14_140) l_0_14_145)))
 (let ((?x46773 (* (* 12.0 l_0_14_14) l_0_14_19)))
 (let ((?x47415 (* (* 2.0 l_0_14_139) l_0_14_144)))
 (let ((?x47412 (* (* 2.0 l_0_14_138) l_0_14_143)))
 (let ((?x47409 (* (* 2.0 l_0_14_137) l_0_14_142)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x46770 (* ?x46769 l_0_14_18)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x46749 (* ?x45415 l_0_14_17)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x25380 (* ?x45412 l_0_14_16)))
 (let ((?x11946 (+ (+ (+ (+ (+ (+ (+ ?x25380 ?x46749) ?x46770) ?x47409) ?x47412) ?x47415) ?x46773) ?x47418)))
 (let ((?x36571 (- (- (- (- (- (+ (+ ?x11946 ?x47421) ?x46776) ?x46811) ?x46814) ?x46817) ?x46820) ?x46823)))
 (let ((?x48097 (+ (- (- (- (- (- (- ?x36571 ?x46825) ?x36576) ?x12020) ?x36536) ?x36608) ?x36606) ?x47096)))
 (let ((?x48106 (+ (+ (+ (+ (+ (+ (+ ?x48097 ?x35791) ?x10286) ?x10290) ?x35792) ?x47103) ?x46843) ?x48105)))
 (let ((?x48121 (- (- (- (+ (+ (+ (+ ?x48106 ?x48108) ?x48111) ?x48114) ?x48117) ?x47045) ?x47048) ?x47051)))
 (= (- (- (- ?x48121 ?x47054) ?x47057) ?x47060) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48187 (* l_0_14_85 l_0_14_85)))
 (let ((?x47060 (* l_0_14_84 l_0_14_84)))
 (let ((?x48185 (* 3.0 ?x47060)))
 (let ((?x47057 (* l_0_14_83 l_0_14_83)))
 (let ((?x48183 (* 3.0 ?x47057)))
 (let ((?x47054 (* l_0_14_82 l_0_14_82)))
 (let ((?x48181 (* 3.0 ?x47054)))
 (let ((?x47051 (* l_0_14_81 l_0_14_81)))
 (let ((?x48179 (* 3.0 ?x47051)))
 (let ((?x47048 (* l_0_14_80 l_0_14_80)))
 (let ((?x48177 (* 3.0 ?x47048)))
 (let ((?x47045 (* l_0_14_79 l_0_14_79)))
 (let ((?x48175 (* 3.0 ?x47045)))
 (let ((?x45533 (* 6.0 l_0_14_64)))
 (let ((?x47042 (* ?x45533 l_0_14_79)))
 (let ((?x48172 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x48169 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x48166 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x48163 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x48160 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x48157 (* (* 3.0 l_0_14_58) l_0_14_58)))
 (let ((?x45526 (* 6.0 l_0_14_43)))
 (let ((?x47021 (* ?x45526 l_0_14_58)))
 (let ((?x47019 (* (* 6.0 l_0_14_42) l_0_14_42)))
 (let ((?x47016 (* (* 6.0 l_0_14_41) l_0_14_41)))
 (let ((?x47013 (* (* 6.0 l_0_14_40) l_0_14_40)))
 (let ((?x47010 (* (* 6.0 l_0_14_39) l_0_14_39)))
 (let ((?x47007 (* (* 6.0 l_0_14_38) l_0_14_38)))
 (let ((?x47004 (* (* 6.0 l_0_14_37) l_0_14_37)))
 (let ((?x46375 (* l_0_14_21 l_0_14_21)))
 (let ((?x46986 (* 6.0 ?x46375)))
 (let ((?x46373 (* l_0_14_20 l_0_14_20)))
 (let ((?x46974 (* 6.0 ?x46373)))
 (let ((?x46371 (* l_0_14_19 l_0_14_19)))
 (let ((?x46972 (* 6.0 ?x46371)))
 (let ((?x46369 (* l_0_14_18 l_0_14_18)))
 (let ((?x46955 (* 6.0 ?x46369)))
 (let ((?x46367 (* l_0_14_17 l_0_14_17)))
 (let ((?x46952 (* 6.0 ?x46367)))
 (let ((?x48142 (* l_0_14_169 l_0_14_169)))
 (let ((?x46364 (* l_0_14_16 l_0_14_16)))
 (let ((?x46948 (* 6.0 ?x46364)))
 (let ((?x48139 (* l_0_14_148 l_0_14_148)))
 (let ((?x47516 (* l_0_14_147 l_0_14_147)))
 (let ((?x47514 (* l_0_14_146 l_0_14_146)))
 (let ((?x47512 (* l_0_14_145 l_0_14_145)))
 (let ((?x47510 (* l_0_14_144 l_0_14_144)))
 (let ((?x47508 (* l_0_14_143 l_0_14_143)))
 (let ((?x48134 (+ (+ (* (- l_0_14_106) l_0_14_106) (* l_0_14_142 l_0_14_142)) ?x47508)))
 (let ((?x48143 (- (+ (+ (+ (+ (+ (+ ?x48134 ?x47510) ?x47512) ?x47514) ?x47516) ?x48139) ?x46948) ?x48142)))
 (let ((?x48150 (- (- (+ (+ (+ (+ (+ ?x48143 ?x46952) ?x46955) ?x46972) ?x46974) ?x46986) ?x47004) ?x47007)))
 (let ((?x48161 (- (- (- (- (- (- (- ?x48150 ?x47010) ?x47013) ?x47016) ?x47019) ?x47021) ?x48157) ?x48160)))
 (let ((?x48178 (+ (+ (+ (- (- (- (- ?x48161 ?x48163) ?x48166) ?x48169) ?x48172) ?x47042) ?x48175) ?x48177)))
 (= (+ (+ (+ (+ (+ ?x48178 ?x48179) ?x48181) ?x48183) ?x48185) ?x48187) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x48209 (* ?x45065 l_0_14_67)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x48207 (* ?x45059 l_0_14_46)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46459 (* ?x45053 l_0_14_25)))
 (let ((?x48203 (- (- (* (* 12.0 l_0_14_1) l_0_14_4) (* l_0_14_127 l_0_14_127)) (* (* 2.0 l_0_14_190) l_0_14_193))))
 (let ((?x48210 (+ (- (- (- ?x48203 (* (* 2.0 l_0_14_211) l_0_14_214)) ?x46459) ?x48207) ?x48209)))
 (= ?x48210 0.0))))))))))
(assert
 (let ((?x48187 (* l_0_14_85 l_0_14_85)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x12316 (* ?x45065 l_0_14_70)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x24193 (* ?x45059 l_0_14_49)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46614 (* ?x45053 l_0_14_28)))
 (let ((?x48142 (* l_0_14_169 l_0_14_169)))
 (let ((?x48139 (* l_0_14_148 l_0_14_148)))
 (let ((?x36813 (- (+ (* (* 12.0 l_0_14_1) l_0_14_7) (* l_0_14_106 l_0_14_106)) ?x48139)))
 (let ((?x12289 (- (- (+ ?x36813 ?x48142) (* (* 2.0 l_0_14_190) l_0_14_196)) (* (* 2.0 l_0_14_211) l_0_14_217))))
 (= (- (+ (- (- ?x12289 ?x46614) ?x24193) ?x12316) ?x48187) 0.0)))))))))))))
(assert
 (let ((?x45068 (* l_0_14_64 l_0_14_64)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x48234 (* ?x45065 l_0_14_74)))
 (let ((?x45095 (* l_0_14_43 l_0_14_43)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x48231 (* ?x45059 l_0_14_53)))
 (let ((?x45053 (* 12.0 l_0_14_22)))
 (let ((?x46793 (* ?x45053 l_0_14_32)))
 (let ((?x45040 (* 12.0 l_0_14_1)))
 (let ((?x46745 (* ?x45040 l_0_14_11)))
 (let ((?x48229 (- (- ?x46745 (* (* 2.0 l_0_14_190) l_0_14_200)) (* (* 2.0 l_0_14_211) l_0_14_221))))
 (= (- (+ (+ (- (- ?x48229 ?x46793) ?x48231) ?x45095) ?x48234) ?x45068) 0.0)))))))))))))
(assert
 (let ((?x45774 (* l_0_14_6 l_0_14_6)))
 (let ((?x47146 (* 6.0 ?x45774)))
 (let ((?x45772 (* l_0_14_5 l_0_14_5)))
 (let ((?x47144 (* 6.0 ?x45772)))
 (let ((?x45770 (* l_0_14_4 l_0_14_4)))
 (let ((?x47133 (* 6.0 ?x45770)))
 (let ((?x47131 (* (* 6.0 l_0_14_27) l_0_14_27)))
 (let ((?x47128 (* (* 6.0 l_0_14_26) l_0_14_26)))
 (let ((?x47125 (* (* 6.0 l_0_14_25) l_0_14_25)))
 (let ((?x48264 (* l_0_14_216 l_0_14_216)))
 (let ((?x48262 (* l_0_14_215 l_0_14_215)))
 (let ((?x48260 (* l_0_14_214 l_0_14_214)))
 (let ((?x48258 (* l_0_14_195 l_0_14_195)))
 (let ((?x48256 (* l_0_14_194 l_0_14_194)))
 (let ((?x48254 (* l_0_14_193 l_0_14_193)))
 (let ((?x48261 (- (- (- (- (* (* (- 2.0) l_0_14_127) l_0_14_130) ?x48254) ?x48256) ?x48258) ?x48260)))
 (let ((?x48272 (- (+ (- (- (- (- (- ?x48261 ?x48262) ?x48264) ?x47125) ?x47128) ?x47131) ?x47133) (* (* 1.0 l_0_14_46) l_0_14_46))))
 (let ((?x48278 (- (- ?x48272 (* (* 1.0 l_0_14_47) l_0_14_47)) (* (* 1.0 l_0_14_48) l_0_14_48))))
 (let ((?x48284 (+ (+ (+ (+ ?x48278 ?x47144) ?x47146) (* 1.0 (* l_0_14_67 l_0_14_67))) (* 1.0 (* l_0_14_68 l_0_14_68)))))
 (= (+ ?x48284 (* 1.0 (* l_0_14_69 l_0_14_69))) 0.0)))))))))))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48344 (* ?x45349 l_0_14_88)))
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x48342 (* ?x46489 l_0_14_72)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x48340 (* ?x46486 l_0_14_71)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x48338 (* ?x46483 l_0_14_70)))
 (let ((?x47281 (* (* 12.0 l_0_14_6) l_0_14_9)))
 (let ((?x47278 (* (* 12.0 l_0_14_5) l_0_14_8)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x48334 (* ?x46478 l_0_14_51)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x48332 (* ?x46475 l_0_14_50)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x48330 (* ?x46472 l_0_14_49)))
 (let ((?x47266 (* (* 12.0 l_0_14_4) l_0_14_7)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x47263 (* ?x46467 l_0_14_30)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x47261 (* ?x46464 l_0_14_29)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x47259 (* ?x46461 l_0_14_28)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x48312 (* ?x45320 l_0_14_172)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x48310 (* ?x45317 l_0_14_151)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46581 (* ?x45228 l_0_14_133)))
 (let ((?x48315 (- (+ (- (- (* (* 2.0 l_0_14_106) l_0_14_109) ?x46581) ?x48310) ?x48312) (* (* 2.0 l_0_14_193) l_0_14_196))))
 (let ((?x48319 (- (- ?x48315 (* (* 2.0 l_0_14_194) l_0_14_197)) (* (* 2.0 l_0_14_195) l_0_14_198))))
 (let ((?x48323 (- (- ?x48319 (* (* 2.0 l_0_14_214) l_0_14_217)) (* (* 2.0 l_0_14_215) l_0_14_218))))
 (let ((?x48328 (- (- (- (- ?x48323 (* (* 2.0 l_0_14_216) l_0_14_219)) ?x47259) ?x47261) ?x47263)))
 (let ((?x48339 (+ (+ (+ (- (- (- (+ ?x48328 ?x47266) ?x48330) ?x48332) ?x48334) ?x47278) ?x47281) ?x48338)))
 (= (- (+ (+ ?x48339 ?x48340) ?x48342) ?x48344) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x48416 (* ?x46489 l_0_14_76)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x48414 (* ?x46486 l_0_14_75)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x48412 (* ?x46483 l_0_14_74)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x48209 (* ?x45065 l_0_14_67)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x48409 (* ?x46478 l_0_14_55)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x48407 (* ?x46475 l_0_14_54)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x48405 (* ?x46472 l_0_14_53)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x48207 (* ?x45059 l_0_14_46)))
 (let ((?x46467 (* 12.0 l_0_14_27)))
 (let ((?x47427 (* ?x46467 l_0_14_34)))
 (let ((?x46464 (* 12.0 l_0_14_26)))
 (let ((?x47425 (* ?x46464 l_0_14_33)))
 (let ((?x46461 (* 12.0 l_0_14_25)))
 (let ((?x47423 (* ?x46461 l_0_14_32)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x47381 (* ?x46769 l_0_14_6)))
 (let ((?x45228 (* 2.0 l_0_14_127)))
 (let ((?x46752 (* ?x45228 l_0_14_137)))
 (let ((?x47379 (+ (* (* 12.0 l_0_14_11) l_0_14_4) (* (* 12.0 l_0_14_12) l_0_14_5))))
 (let ((?x48392 (- (- (+ (- ?x47379 ?x46752) ?x47381) (* (* 2.0 l_0_14_193) l_0_14_200)) (* (* 2.0 l_0_14_194) l_0_14_201))))
 (let ((?x48396 (- (- ?x48392 (* (* 2.0 l_0_14_195) l_0_14_202)) (* (* 2.0 l_0_14_214) l_0_14_221))))
 (let ((?x48400 (- (- ?x48396 (* (* 2.0 l_0_14_215) l_0_14_222)) (* (* 2.0 l_0_14_216) l_0_14_223))))
 (let ((?x48410 (- (- (- (+ (- (- (- ?x48400 ?x47423) ?x47425) ?x47427) ?x48207) ?x48405) ?x48407) ?x48409)))
 (= (+ (+ (+ (- ?x48410 ?x48209) ?x48412) ?x48414) ?x48416) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x46024 (* l_0_14_9 l_0_14_9)))
 (let ((?x47656 (* 6.0 ?x46024)))
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48467 (* ?x45349 l_0_14_91)))
 (let ((?x46018 (* l_0_14_8 l_0_14_8)))
 (let ((?x47654 (* 6.0 ?x46018)))
 (let ((?x46016 (* l_0_14_7 l_0_14_7)))
 (let ((?x47640 (* 6.0 ?x46016)))
 (let ((?x47626 (* (* 6.0 l_0_14_31) l_0_14_31)))
 (let ((?x47623 (* (* 6.0 l_0_14_30) l_0_14_30)))
 (let ((?x47620 (* (* 6.0 l_0_14_29) l_0_14_29)))
 (let ((?x47617 (* (* 6.0 l_0_14_28) l_0_14_28)))
 (let ((?x48439 (* l_0_14_220 l_0_14_220)))
 (let ((?x48437 (* l_0_14_219 l_0_14_219)))
 (let ((?x48435 (* l_0_14_218 l_0_14_218)))
 (let ((?x48433 (* l_0_14_217 l_0_14_217)))
 (let ((?x48431 (* l_0_14_199 l_0_14_199)))
 (let ((?x48429 (* l_0_14_198 l_0_14_198)))
 (let ((?x48427 (* l_0_14_197 l_0_14_197)))
 (let ((?x48425 (* l_0_14_196 l_0_14_196)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x12864 (* ?x45320 l_0_14_175)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x37155 (* ?x45317 l_0_14_154)))
 (let ((?x46028 (* l_0_14_10 l_0_14_10)))
 (let ((?x47562 (* 6.0 ?x46028)))
 (let ((?x48426 (- (+ (- (+ ?x47562 (* (* 2.0 l_0_14_106) l_0_14_112)) ?x37155) ?x12864) ?x48425)))
 (let ((?x48440 (- (- (- (- (- (- (- ?x48426 ?x48427) ?x48429) ?x48431) ?x48433) ?x48435) ?x48437) ?x48439)))
 (let ((?x48447 (- (- (- (- (- ?x48440 ?x47617) ?x47620) ?x47623) ?x47626) (* (* 1.0 l_0_14_49) l_0_14_49))))
 (let ((?x48453 (- (- ?x48447 (* (* 1.0 l_0_14_50) l_0_14_50)) (* (* 1.0 l_0_14_51) l_0_14_51))))
 (let ((?x48459 (+ (+ (- ?x48453 (* (* 1.0 l_0_14_52) l_0_14_52)) ?x47640) (* 1.0 (* l_0_14_70 l_0_14_70)))))
 (let ((?x48463 (+ (+ ?x48459 (* 1.0 (* l_0_14_71 l_0_14_71))) (* 1.0 (* l_0_14_72 l_0_14_72)))))
 (let ((?x48469 (+ (- (+ (+ ?x48463 (* 1.0 (* l_0_14_73 l_0_14_73))) ?x47654) ?x48467) ?x47656)))
 (= ?x48469 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48552 (* ?x45349 l_0_14_95)))
 (let ((?x46656 (* 2.0 l_0_14_73)))
 (let ((?x48550 (* ?x46656 l_0_14_77)))
 (let ((?x46653 (* 2.0 l_0_14_72)))
 (let ((?x48548 (* ?x46653 l_0_14_76)))
 (let ((?x46650 (* 2.0 l_0_14_71)))
 (let ((?x48546 (* ?x46650 l_0_14_75)))
 (let ((?x46647 (* 2.0 l_0_14_70)))
 (let ((?x48544 (* ?x46647 l_0_14_74)))
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x12316 (* ?x45065 l_0_14_70)))
 (let ((?x46642 (* 2.0 l_0_14_52)))
 (let ((?x48541 (* ?x46642 l_0_14_56)))
 (let ((?x46639 (* 2.0 l_0_14_51)))
 (let ((?x48539 (* ?x46639 l_0_14_55)))
 (let ((?x46636 (* 2.0 l_0_14_50)))
 (let ((?x48537 (* ?x46636 l_0_14_54)))
 (let ((?x46633 (* 2.0 l_0_14_49)))
 (let ((?x48535 (* ?x46633 l_0_14_53)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x24193 (* ?x45059 l_0_14_49)))
 (let ((?x46628 (* 12.0 l_0_14_31)))
 (let ((?x47788 (* ?x46628 l_0_14_35)))
 (let ((?x46625 (* 12.0 l_0_14_30)))
 (let ((?x47786 (* ?x46625 l_0_14_34)))
 (let ((?x46622 (* 12.0 l_0_14_29)))
 (let ((?x47784 (* ?x46622 l_0_14_33)))
 (let ((?x46619 (* 12.0 l_0_14_28)))
 (let ((?x47782 (* ?x46619 l_0_14_32)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x48512 (* ?x45320 l_0_14_179)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x48510 (* ?x45317 l_0_14_158)))
 (let ((?x46769 (* 12.0 l_0_14_13)))
 (let ((?x47742 (* ?x46769 l_0_14_9)))
 (let ((?x45415 (* 12.0 l_0_14_12)))
 (let ((?x47737 (* ?x45415 l_0_14_8)))
 (let ((?x45412 (* 12.0 l_0_14_11)))
 (let ((?x47723 (* ?x45412 l_0_14_7)))
 (let ((?x46561 (* 12.0 l_0_14_10)))
 (let ((?x11261 (* ?x46561 l_0_14_14)))
 (let ((?x48509 (+ (+ (+ (+ ?x11261 (* (* 2.0 l_0_14_106) l_0_14_116)) ?x47723) ?x47737) ?x47742)))
 (let ((?x48517 (- (- (+ (- ?x48509 ?x48510) ?x48512) (* (* 2.0 l_0_14_196) l_0_14_200)) (* (* 2.0 l_0_14_197) l_0_14_201))))
 (let ((?x48521 (- (- ?x48517 (* (* 2.0 l_0_14_198) l_0_14_202)) (* (* 2.0 l_0_14_199) l_0_14_203))))
 (let ((?x48525 (- (- ?x48521 (* (* 2.0 l_0_14_217) l_0_14_221)) (* (* 2.0 l_0_14_218) l_0_14_222))))
 (let ((?x48529 (- (- ?x48525 (* (* 2.0 l_0_14_219) l_0_14_223)) (* (* 2.0 l_0_14_220) l_0_14_224))))
 (let ((?x48538 (- (- (+ (- (- (- (- ?x48529 ?x47782) ?x47784) ?x47786) ?x47788) ?x24193) ?x48535) ?x48537)))
 (let ((?x48551 (+ (+ (+ (+ (- (- (- ?x48538 ?x48539) ?x48541) ?x12316) ?x48544) ?x48546) ?x48548) ?x48550)))
 (= (- ?x48551 ?x48552) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45065 (* 2.0 l_0_14_64)))
 (let ((?x48234 (* ?x45065 l_0_14_74)))
 (let ((?x45059 (* 2.0 l_0_14_43)))
 (let ((?x48231 (* ?x45059 l_0_14_53)))
 (let ((?x48034 (* (* 6.0 l_0_14_36) l_0_14_36)))
 (let ((?x48031 (* (* 6.0 l_0_14_35) l_0_14_35)))
 (let ((?x48028 (* (* 6.0 l_0_14_34) l_0_14_34)))
 (let ((?x48025 (* (* 6.0 l_0_14_33) l_0_14_33)))
 (let ((?x48022 (* (* 6.0 l_0_14_32) l_0_14_32)))
 (let ((?x48589 (* l_0_14_225 l_0_14_225)))
 (let ((?x48587 (* l_0_14_224 l_0_14_224)))
 (let ((?x48585 (* l_0_14_223 l_0_14_223)))
 (let ((?x48583 (* l_0_14_222 l_0_14_222)))
 (let ((?x48581 (* l_0_14_221 l_0_14_221)))
 (let ((?x48579 (* l_0_14_204 l_0_14_204)))
 (let ((?x37400 (* l_0_14_203 l_0_14_203)))
 (let ((?x13209 (* l_0_14_202 l_0_14_202)))
 (let ((?x13165 (* l_0_14_201 l_0_14_201)))
 (let ((?x13042 (* l_0_14_200 l_0_14_200)))
 (let ((?x46244 (* l_0_14_15 l_0_14_15)))
 (let ((?x48019 (* 6.0 ?x46244)))
 (let ((?x46242 (* l_0_14_14 l_0_14_14)))
 (let ((?x48013 (* 6.0 ?x46242)))
 (let ((?x46240 (* l_0_14_13 l_0_14_13)))
 (let ((?x36546 (* 6.0 ?x46240)))
 (let ((?x46238 (* l_0_14_12 l_0_14_12)))
 (let ((?x36543 (* 6.0 ?x46238)))
 (let ((?x25273 (* l_0_14_11 l_0_14_11)))
 (let ((?x11823 (* 6.0 ?x25273)))
 (let ((?x11838 (+ (+ ?x11823 ?x36543) ?x36546)))
 (let ((?x48580 (- (- (- (- (- (+ (+ ?x11838 ?x48013) ?x48019) ?x13042) ?x13165) ?x13209) ?x37400) ?x48579)))
 (let ((?x48592 (- (- (- (- (- (- (- ?x48580 ?x48581) ?x48583) ?x48585) ?x48587) ?x48589) ?x48022) ?x48025)))
 (let ((?x48599 (- (+ (- (- (- ?x48592 ?x48028) ?x48031) ?x48034) ?x48231) (* (* 1.0 l_0_14_53) l_0_14_53))))
 (let ((?x48605 (- (- ?x48599 (* (* 1.0 l_0_14_54) l_0_14_54)) (* (* 1.0 l_0_14_55) l_0_14_55))))
 (let ((?x48611 (- (- ?x48605 (* (* 1.0 l_0_14_56) l_0_14_56)) (* (* 1.0 l_0_14_57) l_0_14_57))))
 (let ((?x48616 (+ (+ (- ?x48611 ?x48234) (* 1.0 (* l_0_14_74 l_0_14_74))) (* 1.0 (* l_0_14_75 l_0_14_75)))))
 (let ((?x48620 (+ (+ ?x48616 (* 1.0 (* l_0_14_76 l_0_14_76))) (* 1.0 (* l_0_14_77 l_0_14_77)))))
 (= (+ ?x48620 (* 1.0 (* l_0_14_78 l_0_14_78))) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x45194 (* l_0_14_66 l_0_14_66)))
 (let ((?x45733 (* 3.0 ?x45194)))
 (let ((?x45191 (* l_0_14_65 l_0_14_65)))
 (let ((?x45731 (* 3.0 ?x45191)))
 (let ((?x45729 (* (* 3.0 l_0_14_45) l_0_14_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_14_44) l_0_14_44) ?x45729) ?x45731) ?x45733) 0.0)))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x45965 (* ?x45964 l_0_14_68)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x45962 (* ?x45961 l_0_14_67)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x45959 (* ?x45958 l_0_14_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_14_44) l_0_14_46) ?x45959) ?x45962) ?x45965) 0.0))))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46184 (* ?x45964 l_0_14_71)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46182 (* ?x45961 l_0_14_70)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46180 (* ?x45958 l_0_14_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_14_44) l_0_14_49) ?x46180) ?x46182) ?x46184) 0.0))))))))
(assert
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46304 (* ?x45964 l_0_14_75)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46301 (* ?x45961 l_0_14_74)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46298 (* ?x45958 l_0_14_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_14_44) l_0_14_53) ?x46298) ?x46301) ?x46304) 0.0))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x45350 (* ?x45349 l_0_14_86)))
 (let ((?x45964 (* 6.0 l_0_14_66)))
 (let ((?x46399 (* ?x45964 l_0_14_80)))
 (let ((?x45961 (* 6.0 l_0_14_65)))
 (let ((?x46397 (* ?x45961 l_0_14_79)))
 (let ((?x45958 (* 6.0 l_0_14_45)))
 (let ((?x46394 (* ?x45958 l_0_14_59)))
 (let ((?x45955 (* 6.0 l_0_14_44)))
 (let ((?x46392 (* ?x45955 l_0_14_58)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x45321 (* ?x45320 l_0_14_170)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x45318 (* ?x45317 l_0_14_149)))
 (let ((?x48676 (- (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_107) ?x45318) ?x45321) ?x46392) ?x46394)))
 (= (+ (+ (+ ?x48676 ?x46397) ?x46399) ?x45350) 0.0)))))))))))))))))
(assert
 (let ((?x47154 (* l_0_14_69 l_0_14_69)))
 (let ((?x47155 (* 3.0 ?x47154)))
 (let ((?x47151 (* l_0_14_68 l_0_14_68)))
 (let ((?x47152 (* 3.0 ?x47151)))
 (let ((?x47148 (* l_0_14_67 l_0_14_67)))
 (let ((?x47149 (* 3.0 ?x47148)))
 (let ((?x47142 (* (* 3.0 l_0_14_48) l_0_14_48)))
 (let ((?x47139 (* (* 3.0 l_0_14_47) l_0_14_47)))
 (let ((?x48682 (+ (+ (- (- (* (* (- 3.0) l_0_14_46) l_0_14_46) ?x47139) ?x47142) ?x47149) ?x47152)))
 (= (+ ?x48682 ?x47155) 0.0)))))))))))
(assert
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47290 (* ?x47289 l_0_14_72)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47287 (* ?x47286 l_0_14_71)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47284 (* ?x47283 l_0_14_70)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47275 (* ?x47274 l_0_14_51)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47272 (* ?x47271 l_0_14_50)))
 (let ((?x48693 (+ (+ (- (- (* (* (- 6.0) l_0_14_46) l_0_14_49) ?x47272) ?x47275) ?x47284) ?x47287)))
 (= (+ ?x48693 ?x47290) 0.0)))))))))))))
(assert
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47444 (* ?x47289 l_0_14_76)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47441 (* ?x47286 l_0_14_75)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47438 (* ?x47283 l_0_14_74)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47435 (* ?x47274 l_0_14_55)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47432 (* ?x47271 l_0_14_54)))
 (let ((?x48702 (+ (+ (- (- (* (* (- 6.0) l_0_14_46) l_0_14_53) ?x47432) ?x47435) ?x47438) ?x47441)))
 (= (+ ?x48702 ?x47444) 0.0)))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48344 (* ?x45349 l_0_14_88)))
 (let ((?x47289 (* 6.0 l_0_14_69)))
 (let ((?x47536 (* ?x47289 l_0_14_81)))
 (let ((?x47286 (* 6.0 l_0_14_68)))
 (let ((?x47534 (* ?x47286 l_0_14_80)))
 (let ((?x47283 (* 6.0 l_0_14_67)))
 (let ((?x47532 (* ?x47283 l_0_14_79)))
 (let ((?x47274 (* 6.0 l_0_14_48)))
 (let ((?x47529 (* ?x47274 l_0_14_60)))
 (let ((?x47271 (* 6.0 l_0_14_47)))
 (let ((?x47527 (* ?x47271 l_0_14_59)))
 (let ((?x47268 (* 6.0 l_0_14_46)))
 (let ((?x47525 (* ?x47268 l_0_14_58)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x48312 (* ?x45320 l_0_14_172)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x48310 (* ?x45317 l_0_14_151)))
 (let ((?x48709 (- (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_109) ?x48310) ?x48312) ?x47525) ?x47527)))
 (= (+ (+ (+ (+ (- ?x48709 ?x47529) ?x47532) ?x47534) ?x47536) ?x48344) 0.0)))))))))))))))))))))
(assert
 (let ((?x47651 (* l_0_14_73 l_0_14_73)))
 (let ((?x47652 (* 3.0 ?x47651)))
 (let ((?x47648 (* l_0_14_72 l_0_14_72)))
 (let ((?x47649 (* 3.0 ?x47648)))
 (let ((?x47645 (* l_0_14_71 l_0_14_71)))
 (let ((?x47646 (* 3.0 ?x47645)))
 (let ((?x47642 (* l_0_14_70 l_0_14_70)))
 (let ((?x47643 (* 3.0 ?x47642)))
 (let ((?x47638 (* (* 3.0 l_0_14_52) l_0_14_52)))
 (let ((?x47635 (* (* 3.0 l_0_14_51) l_0_14_51)))
 (let ((?x47632 (* (* 3.0 l_0_14_50) l_0_14_50)))
 (let ((?x48721 (+ (- (- (- (* (* (- 3.0) l_0_14_49) l_0_14_49) ?x47632) ?x47635) ?x47638) ?x47643)))
 (= (+ (+ (+ ?x48721 ?x47646) ?x47649) ?x47652) 0.0))))))))))))))
(assert
 (let ((?x47818 (* 6.0 l_0_14_73)))
 (let ((?x47819 (* ?x47818 l_0_14_77)))
 (let ((?x47814 (* 6.0 l_0_14_72)))
 (let ((?x47815 (* ?x47814 l_0_14_76)))
 (let ((?x47810 (* 6.0 l_0_14_71)))
 (let ((?x47811 (* ?x47810 l_0_14_75)))
 (let ((?x47806 (* 6.0 l_0_14_70)))
 (let ((?x47807 (* ?x47806 l_0_14_74)))
 (let ((?x47802 (* 6.0 l_0_14_52)))
 (let ((?x47803 (* ?x47802 l_0_14_56)))
 (let ((?x47798 (* 6.0 l_0_14_51)))
 (let ((?x47799 (* ?x47798 l_0_14_55)))
 (let ((?x47794 (* 6.0 l_0_14_50)))
 (let ((?x47795 (* ?x47794 l_0_14_54)))
 (let ((?x48738 (+ (- (- (- (* (* (- 6.0) l_0_14_49) l_0_14_53) ?x47795) ?x47799) ?x47803) ?x47807)))
 (= (+ (+ (+ ?x48738 ?x47811) ?x47815) ?x47819) 0.0)))))))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48467 (* ?x45349 l_0_14_91)))
 (let ((?x47818 (* 6.0 l_0_14_73)))
 (let ((?x47962 (* ?x47818 l_0_14_82)))
 (let ((?x47814 (* 6.0 l_0_14_72)))
 (let ((?x47960 (* ?x47814 l_0_14_81)))
 (let ((?x47810 (* 6.0 l_0_14_71)))
 (let ((?x47958 (* ?x47810 l_0_14_80)))
 (let ((?x47806 (* 6.0 l_0_14_70)))
 (let ((?x47956 (* ?x47806 l_0_14_79)))
 (let ((?x47802 (* 6.0 l_0_14_52)))
 (let ((?x47953 (* ?x47802 l_0_14_61)))
 (let ((?x47798 (* 6.0 l_0_14_51)))
 (let ((?x47951 (* ?x47798 l_0_14_60)))
 (let ((?x47794 (* 6.0 l_0_14_50)))
 (let ((?x47949 (* ?x47794 l_0_14_59)))
 (let ((?x47790 (* 6.0 l_0_14_49)))
 (let ((?x47947 (* ?x47790 l_0_14_58)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x12864 (* ?x45320 l_0_14_175)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x37155 (* ?x45317 l_0_14_154)))
 (let ((?x48752 (- (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_112) ?x37155) ?x12864) ?x47947) ?x47949)))
 (let ((?x48759 (+ (+ (+ (+ (+ (- (- ?x48752 ?x47951) ?x47953) ?x47956) ?x47958) ?x47960) ?x47962) ?x48467)))
 (= ?x48759 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48073 (* l_0_14_78 l_0_14_78)))
 (let ((?x48074 (* 3.0 ?x48073)))
 (let ((?x48069 (* l_0_14_77 l_0_14_77)))
 (let ((?x48070 (* 3.0 ?x48069)))
 (let ((?x48065 (* l_0_14_76 l_0_14_76)))
 (let ((?x48066 (* 3.0 ?x48065)))
 (let ((?x48061 (* l_0_14_75 l_0_14_75)))
 (let ((?x48062 (* 3.0 ?x48061)))
 (let ((?x48057 (* l_0_14_74 l_0_14_74)))
 (let ((?x48058 (* 3.0 ?x48057)))
 (let ((?x48054 (* (* 3.0 l_0_14_57) l_0_14_57)))
 (let ((?x48050 (* (* 3.0 l_0_14_56) l_0_14_56)))
 (let ((?x48046 (* (* 3.0 l_0_14_55) l_0_14_55)))
 (let ((?x48042 (* (* 3.0 l_0_14_54) l_0_14_54)))
 (let ((?x48767 (- (- (- (- (* (* (- 3.0) l_0_14_53) l_0_14_53) ?x48042) ?x48046) ?x48050) ?x48054)))
 (= (+ (+ (+ (+ (+ ?x48767 ?x48058) ?x48062) ?x48066) ?x48070) ?x48074) 0.0)))))))))))))))))
(assert
 (let ((?x45349 (* 2.0 l_0_14_85)))
 (let ((?x48552 (* ?x45349 l_0_14_95)))
 (let ((?x48117 (* (* 6.0 l_0_14_78) l_0_14_83)))
 (let ((?x48114 (* (* 6.0 l_0_14_77) l_0_14_82)))
 (let ((?x48111 (* (* 6.0 l_0_14_76) l_0_14_81)))
 (let ((?x48108 (* (* 6.0 l_0_14_75) l_0_14_80)))
 (let ((?x48105 (* (* 6.0 l_0_14_74) l_0_14_79)))
 (let ((?x36606 (* (* 6.0 l_0_14_57) l_0_14_62)))
 (let ((?x36608 (* (* 6.0 l_0_14_56) l_0_14_61)))
 (let ((?x36536 (* (* 6.0 l_0_14_55) l_0_14_60)))
 (let ((?x12020 (* (* 6.0 l_0_14_54) l_0_14_59)))
 (let ((?x36576 (* (* 6.0 l_0_14_53) l_0_14_58)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x48512 (* ?x45320 l_0_14_179)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x48510 (* ?x45317 l_0_14_158)))
 (let ((?x37675 (- (- (- (+ (* (* (- 2.0) l_0_14_106) l_0_14_116) ?x48510) ?x48512) ?x36576) ?x12020)))
 (let ((?x26863 (+ (+ (+ (+ (- (- (- ?x37675 ?x36536) ?x36608) ?x36606) ?x48105) ?x48108) ?x48111) ?x48114)))
 (= (+ (+ ?x26863 ?x48117) ?x48552) 0.0))))))))))))))))))))
(assert
 (let ((?x47060 (* l_0_14_84 l_0_14_84)))
 (let ((?x48185 (* 3.0 ?x47060)))
 (let ((?x47057 (* l_0_14_83 l_0_14_83)))
 (let ((?x48183 (* 3.0 ?x47057)))
 (let ((?x47054 (* l_0_14_82 l_0_14_82)))
 (let ((?x48181 (* 3.0 ?x47054)))
 (let ((?x47051 (* l_0_14_81 l_0_14_81)))
 (let ((?x48179 (* 3.0 ?x47051)))
 (let ((?x47048 (* l_0_14_80 l_0_14_80)))
 (let ((?x48177 (* 3.0 ?x47048)))
 (let ((?x47045 (* l_0_14_79 l_0_14_79)))
 (let ((?x48175 (* 3.0 ?x47045)))
 (let ((?x48172 (* (* 3.0 l_0_14_63) l_0_14_63)))
 (let ((?x48169 (* (* 3.0 l_0_14_62) l_0_14_62)))
 (let ((?x48166 (* (* 3.0 l_0_14_61) l_0_14_61)))
 (let ((?x48163 (* (* 3.0 l_0_14_60) l_0_14_60)))
 (let ((?x48160 (* (* 3.0 l_0_14_59) l_0_14_59)))
 (let ((?x48157 (* (* 3.0 l_0_14_58) l_0_14_58)))
 (let ((?x45320 (* 2.0 l_0_14_169)))
 (let ((?x46587 (* ?x45320 l_0_14_184)))
 (let ((?x45317 (* 2.0 l_0_14_148)))
 (let ((?x46583 (* ?x45317 l_0_14_163)))
 (let ((?x35231 (* 2.0 l_0_14_106)))
 (let ((?x46579 (* ?x35231 l_0_14_121)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x46566 (* ?x9172 l_0_14_85)))
 (let ((?x37764 (- (- (- (- (- (+ (- ?x46566 ?x46579) ?x46583) ?x46587) ?x48157) ?x48160) ?x48163) ?x48166)))
 (let ((?x37767 (+ (+ (+ (+ (+ (- (- ?x37764 ?x48169) ?x48172) ?x48175) ?x48177) ?x48179) ?x48181) ?x48183)))
 (= (+ ?x37767 ?x48185) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x47154 (* l_0_14_69 l_0_14_69)))
 (let ((?x47151 (* l_0_14_68 l_0_14_68)))
 (let ((?x47148 (* l_0_14_67 l_0_14_67)))
 (let ((?x47194 (* l_0_14_48 l_0_14_48)))
 (let ((?x35806 (* l_0_14_47 l_0_14_47)))
 (let ((?x10421 (* l_0_14_46 l_0_14_46)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47406 (* ?x47119 l_0_14_139)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47404 (* ?x47114 l_0_14_138)))
 (let ((?x37824 (+ (+ (- (- (* (* (- 2.0) l_0_14_130) l_0_14_137) ?x47404) ?x47406) ?x10421) ?x35806)))
 (= (- (- (- (+ ?x37824 ?x47194) ?x47148) ?x47151) ?x47154) 0.0)))))))))))))
(assert
 (let ((?x48805 (* 2.0 l_0_14_90)))
 (let ((?x48806 (* ?x48805 l_0_14_97)))
 (let ((?x48802 (* 2.0 l_0_14_89)))
 (let ((?x48803 (* ?x48802 l_0_14_96)))
 (let ((?x48799 (* 2.0 l_0_14_88)))
 (let ((?x48800 (* ?x48799 l_0_14_95)))
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x48342 (* ?x46489 l_0_14_72)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x48340 (* ?x46486 l_0_14_71)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x48338 (* ?x46483 l_0_14_70)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x48334 (* ?x46478 l_0_14_51)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x48332 (* ?x46475 l_0_14_50)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x48330 (* ?x46472 l_0_14_49)))
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x48791 (* ?x47256 l_0_14_181)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x48789 (* ?x47253 l_0_14_180)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x48787 (* ?x47250 l_0_14_179)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x48785 (* ?x47247 l_0_14_160)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x48783 (* ?x47244 l_0_14_159)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x48781 (* ?x47241 l_0_14_158)))
 (let ((?x47238 (* 2.0 l_0_14_136)))
 (let ((?x47750 (* ?x47238 l_0_14_140)))
 (let ((?x47235 (* 2.0 l_0_14_135)))
 (let ((?x47748 (* ?x47235 l_0_14_139)))
 (let ((?x47232 (* 2.0 l_0_14_134)))
 (let ((?x47746 (* ?x47232 l_0_14_138)))
 (let ((?x47229 (* 2.0 l_0_14_133)))
 (let ((?x47744 (* ?x47229 l_0_14_137)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x37945 (* ?x47219 l_0_14_118)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x37947 (* ?x47216 l_0_14_117)))
 (let ((?x37726 (- (- (+ (+ (* (* 2.0 l_0_14_109) l_0_14_116) ?x37947) ?x37945) ?x47744) ?x47746)))
 (let ((?x48790 (+ (+ (- (- (- (- (- ?x37726 ?x47748) ?x47750) ?x48781) ?x48783) ?x48785) ?x48787) ?x48789)))
 (let ((?x48798 (- (- (- (+ (+ (+ (+ ?x48790 ?x48791) ?x48330) ?x48332) ?x48334) ?x48338) ?x48340) ?x48342)))
 (= (- (- (- ?x48798 ?x48800) ?x48803) ?x48806) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x46489 (* 2.0 l_0_14_69)))
 (let ((?x48416 (* ?x46489 l_0_14_76)))
 (let ((?x46486 (* 2.0 l_0_14_68)))
 (let ((?x48414 (* ?x46486 l_0_14_75)))
 (let ((?x46483 (* 2.0 l_0_14_67)))
 (let ((?x48412 (* ?x46483 l_0_14_74)))
 (let ((?x46478 (* 2.0 l_0_14_48)))
 (let ((?x48409 (* ?x46478 l_0_14_55)))
 (let ((?x46475 (* 2.0 l_0_14_47)))
 (let ((?x48407 (* ?x46475 l_0_14_54)))
 (let ((?x46472 (* 2.0 l_0_14_46)))
 (let ((?x48405 (* ?x46472 l_0_14_53)))
 (let ((?x48017 (* l_0_14_141 l_0_14_141)))
 (let ((?x48015 (* l_0_14_140 l_0_14_140)))
 (let ((?x48011 (* l_0_14_139 l_0_14_139)))
 (let ((?x37999 (- (- (* (- l_0_14_137) l_0_14_137) (* l_0_14_138 l_0_14_138)) ?x48011)))
 (let ((?x48825 (- (- (+ (+ (+ (- (- ?x37999 ?x48015) ?x48017) ?x48405) ?x48407) ?x48409) ?x48412) ?x48414)))
 (= (- ?x48825 ?x48416) 0.0)))))))))))))))))))
(assert
 (let ((?x48873 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x48870 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x48867 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x48864 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x47651 (* l_0_14_73 l_0_14_73)))
 (let ((?x47648 (* l_0_14_72 l_0_14_72)))
 (let ((?x47645 (* l_0_14_71 l_0_14_71)))
 (let ((?x47642 (* l_0_14_70 l_0_14_70)))
 (let ((?x36248 (* l_0_14_52 l_0_14_52)))
 (let ((?x36244 (* l_0_14_51 l_0_14_51)))
 (let ((?x36238 (* l_0_14_50 l_0_14_50)))
 (let ((?x36237 (* l_0_14_49 l_0_14_49)))
 (let ((?x47613 (* 2.0 l_0_14_178)))
 (let ((?x48853 (* ?x47613 l_0_14_182)))
 (let ((?x47610 (* 2.0 l_0_14_177)))
 (let ((?x48851 (* ?x47610 l_0_14_181)))
 (let ((?x47607 (* 2.0 l_0_14_176)))
 (let ((?x48849 (* ?x47607 l_0_14_180)))
 (let ((?x47604 (* 2.0 l_0_14_175)))
 (let ((?x48847 (* ?x47604 l_0_14_179)))
 (let ((?x47601 (* 2.0 l_0_14_157)))
 (let ((?x48845 (* ?x47601 l_0_14_161)))
 (let ((?x47598 (* 2.0 l_0_14_156)))
 (let ((?x48843 (* ?x47598 l_0_14_160)))
 (let ((?x47595 (* 2.0 l_0_14_155)))
 (let ((?x48841 (* ?x47595 l_0_14_159)))
 (let ((?x47592 (* 2.0 l_0_14_154)))
 (let ((?x48839 (* ?x47592 l_0_14_158)))
 (let ((?x47581 (* 2.0 l_0_14_115)))
 (let ((?x48837 (* ?x47581 l_0_14_119)))
 (let ((?x47578 (* 2.0 l_0_14_114)))
 (let ((?x48835 (* ?x47578 l_0_14_118)))
 (let ((?x47575 (* 2.0 l_0_14_113)))
 (let ((?x38057 (* ?x47575 l_0_14_117)))
 (let ((?x48840 (- (+ (+ (+ (* (* 2.0 l_0_14_112) l_0_14_116) ?x38057) ?x48835) ?x48837) ?x48839)))
 (let ((?x48854 (+ (+ (+ (+ (- (- (- ?x48840 ?x48841) ?x48843) ?x48845) ?x48847) ?x48849) ?x48851) ?x48853)))
 (let ((?x48861 (- (- (- (+ (+ (+ (+ ?x48854 ?x36237) ?x36238) ?x36244) ?x36248) ?x47642) ?x47645) ?x47648)))
 (= (- (- (- (- (- ?x48861 ?x47651) ?x48864) ?x48867) ?x48870) ?x48873) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48963 (* l_0_14_99 l_0_14_99)))
 (let ((?x48961 (* l_0_14_98 l_0_14_98)))
 (let ((?x48959 (* l_0_14_97 l_0_14_97)))
 (let ((?x48957 (* l_0_14_96 l_0_14_96)))
 (let ((?x48955 (* l_0_14_95 l_0_14_95)))
 (let ((?x46656 (* 2.0 l_0_14_73)))
 (let ((?x48550 (* ?x46656 l_0_14_77)))
 (let ((?x46653 (* 2.0 l_0_14_72)))
 (let ((?x48548 (* ?x46653 l_0_14_76)))
 (let ((?x46650 (* 2.0 l_0_14_71)))
 (let ((?x48546 (* ?x46650 l_0_14_75)))
 (let ((?x46647 (* 2.0 l_0_14_70)))
 (let ((?x48544 (* ?x46647 l_0_14_74)))
 (let ((?x46642 (* 2.0 l_0_14_52)))
 (let ((?x48541 (* ?x46642 l_0_14_56)))
 (let ((?x46639 (* 2.0 l_0_14_51)))
 (let ((?x48539 (* ?x46639 l_0_14_55)))
 (let ((?x46636 (* 2.0 l_0_14_50)))
 (let ((?x48537 (* ?x46636 l_0_14_54)))
 (let ((?x46633 (* 2.0 l_0_14_49)))
 (let ((?x48535 (* ?x46633 l_0_14_53)))
 (let ((?x48945 (* l_0_14_183 l_0_14_183)))
 (let ((?x48943 (* l_0_14_182 l_0_14_182)))
 (let ((?x48941 (* l_0_14_181 l_0_14_181)))
 (let ((?x48939 (* l_0_14_180 l_0_14_180)))
 (let ((?x48937 (* l_0_14_179 l_0_14_179)))
 (let ((?x48935 (* l_0_14_162 l_0_14_162)))
 (let ((?x48933 (* l_0_14_161 l_0_14_161)))
 (let ((?x48931 (* l_0_14_160 l_0_14_160)))
 (let ((?x48929 (* l_0_14_159 l_0_14_159)))
 (let ((?x48927 (* l_0_14_158 l_0_14_158)))
 (let ((?x48925 (* l_0_14_120 l_0_14_120)))
 (let ((?x48923 (* l_0_14_119 l_0_14_119)))
 (let ((?x48921 (* l_0_14_118 l_0_14_118)))
 (let ((?x48922 (+ (+ (* l_0_14_116 l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48921)))
 (let ((?x48936 (- (- (- (- (- (+ (+ ?x48922 ?x48923) ?x48925) ?x48927) ?x48929) ?x48931) ?x48933) ?x48935)))
 (let ((?x48948 (+ (+ (+ (+ (+ (+ (+ ?x48936 ?x48937) ?x48939) ?x48941) ?x48943) ?x48945) ?x48535) ?x48537)))
 (let ((?x48956 (- (- (- (- (- (+ (+ ?x48948 ?x48539) ?x48541) ?x48544) ?x48546) ?x48548) ?x48550) ?x48955)))
 (= (- (- (- (- ?x48956 ?x48957) ?x48959) ?x48961) ?x48963) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48073 (* l_0_14_78 l_0_14_78)))
 (let ((?x48069 (* l_0_14_77 l_0_14_77)))
 (let ((?x48065 (* l_0_14_76 l_0_14_76)))
 (let ((?x48061 (* l_0_14_75 l_0_14_75)))
 (let ((?x48057 (* l_0_14_74 l_0_14_74)))
 (let ((?x12010 (* l_0_14_57 l_0_14_57)))
 (let ((?x36584 (* l_0_14_56 l_0_14_56)))
 (let ((?x36577 (* l_0_14_55 l_0_14_55)))
 (let ((?x48991 (+ (+ (+ (* l_0_14_53 l_0_14_53) (* l_0_14_54 l_0_14_54)) ?x36577) ?x36584)))
 (= (- (- (- (- (- (+ ?x48991 ?x12010) ?x48057) ?x48061) ?x48065) ?x48069) ?x48073) 0.0)))))))))))
(assert
 (let ((?x49032 (* l_0_14_90 l_0_14_90)))
 (let ((?x49030 (* l_0_14_89 l_0_14_89)))
 (let ((?x49028 (* l_0_14_88 l_0_14_88)))
 (let ((?x49026 (* l_0_14_174 l_0_14_174)))
 (let ((?x49024 (* l_0_14_173 l_0_14_173)))
 (let ((?x49022 (* l_0_14_172 l_0_14_172)))
 (let ((?x49020 (* l_0_14_153 l_0_14_153)))
 (let ((?x49018 (* l_0_14_152 l_0_14_152)))
 (let ((?x49016 (* l_0_14_151 l_0_14_151)))
 (let ((?x47119 (* 2.0 l_0_14_132)))
 (let ((?x47227 (* ?x47119 l_0_14_135)))
 (let ((?x47114 (* 2.0 l_0_14_131)))
 (let ((?x47225 (* ?x47114 l_0_14_134)))
 (let ((?x47222 (* 2.0 l_0_14_130)))
 (let ((?x47223 (* ?x47222 l_0_14_133)))
 (let ((?x49011 (* l_0_14_111 l_0_14_111)))
 (let ((?x49012 (+ (+ (* l_0_14_109 l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x49011)))
 (let ((?x49023 (+ (- (- (- (- (- (- ?x49012 ?x47223) ?x47225) ?x47227) ?x49016) ?x49018) ?x49020) ?x49022)))
 (= (- (- (- (+ (+ ?x49023 ?x49024) ?x49026) ?x49028) ?x49030) ?x49032) 0.0))))))))))))))))))))
(assert
 (let ((?x48805 (* 2.0 l_0_14_90)))
 (let ((?x49073 (* ?x48805 l_0_14_93)))
 (let ((?x48802 (* 2.0 l_0_14_89)))
 (let ((?x49071 (* ?x48802 l_0_14_92)))
 (let ((?x48799 (* 2.0 l_0_14_88)))
 (let ((?x49069 (* ?x48799 l_0_14_91)))
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x49067 (* ?x47256 l_0_14_177)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x49065 (* ?x47253 l_0_14_176)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x49063 (* ?x47250 l_0_14_175)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x49061 (* ?x47247 l_0_14_156)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x49059 (* ?x47244 l_0_14_155)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x49057 (* ?x47241 l_0_14_154)))
 (let ((?x47590 (* l_0_14_136 l_0_14_136)))
 (let ((?x47588 (* l_0_14_135 l_0_14_135)))
 (let ((?x47586 (* l_0_14_134 l_0_14_134)))
 (let ((?x47584 (* l_0_14_133 l_0_14_133)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x49051 (* ?x47219 l_0_14_114)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x49049 (* ?x47216 l_0_14_113)))
 (let ((?x49054 (- (- (+ (+ (* (* 2.0 l_0_14_109) l_0_14_112) ?x49049) ?x49051) ?x47584) ?x47586)))
 (let ((?x49066 (+ (+ (- (- (- (- (- ?x49054 ?x47588) ?x47590) ?x49057) ?x49059) ?x49061) ?x49063) ?x49065)))
 (= (- (- (- (+ ?x49066 ?x49067) ?x49069) ?x49071) ?x49073) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49141 (* l_0_14_94 l_0_14_94)))
 (let ((?x49139 (* l_0_14_93 l_0_14_93)))
 (let ((?x49137 (* l_0_14_92 l_0_14_92)))
 (let ((?x49135 (* l_0_14_91 l_0_14_91)))
 (let ((?x49133 (* l_0_14_178 l_0_14_178)))
 (let ((?x49131 (* l_0_14_177 l_0_14_177)))
 (let ((?x49129 (* l_0_14_176 l_0_14_176)))
 (let ((?x49127 (* l_0_14_175 l_0_14_175)))
 (let ((?x49125 (* l_0_14_157 l_0_14_157)))
 (let ((?x49123 (* l_0_14_156 l_0_14_156)))
 (let ((?x49121 (* l_0_14_155 l_0_14_155)))
 (let ((?x49119 (* l_0_14_154 l_0_14_154)))
 (let ((?x49117 (* l_0_14_115 l_0_14_115)))
 (let ((?x49115 (* l_0_14_114 l_0_14_114)))
 (let ((?x49116 (+ (+ (* l_0_14_112 l_0_14_112) (* l_0_14_113 l_0_14_113)) ?x49115)))
 (let ((?x49130 (+ (+ (- (- (- (- (+ ?x49116 ?x49117) ?x49119) ?x49121) ?x49123) ?x49125) ?x49127) ?x49129)))
 (= (- (- (- (- (+ (+ ?x49130 ?x49131) ?x49133) ?x49135) ?x49137) ?x49139) ?x49141) 0.0))))))))))))))))))
(assert
 (let ((?x45657 (* l_0_14_87 l_0_14_87)))
 (let ((?x45655 (* l_0_14_86 l_0_14_86)))
 (let ((?x45645 (* l_0_14_171 l_0_14_171)))
 (let ((?x45643 (* l_0_14_170 l_0_14_170)))
 (let ((?x45641 (* l_0_14_150 l_0_14_150)))
 (let ((?x45639 (* l_0_14_149 l_0_14_149)))
 (let ((?x49162 (+ (- (* (- l_0_14_107) l_0_14_107) (* l_0_14_108 l_0_14_108)) ?x45639)))
 (= (+ (+ (- (- (+ ?x49162 ?x45641) ?x45643) ?x45645) ?x45655) ?x45657) 0.0)))))))))
(assert
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x45836 (* ?x45835 l_0_14_89)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x45833 (* ?x45832 l_0_14_88)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x45812 (* ?x45811 l_0_14_173)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x45809 (* ?x45808 l_0_14_172)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x45806 (* ?x45805 l_0_14_152)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x45803 (* ?x45802 l_0_14_151)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x45795 (* ?x45794 l_0_14_110)))
 (let ((?x38490 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_109) ?x45795) ?x45803) ?x45806) ?x45809)))
 (= (+ (+ (- ?x38490 ?x45812) ?x45833) ?x45836) 0.0)))))))))))))))))
(assert
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x46022 (* ?x45835 l_0_14_92)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x46020 (* ?x45832 l_0_14_91)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46006 (* ?x45811 l_0_14_176)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46004 (* ?x45808 l_0_14_175)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46002 (* ?x45805 l_0_14_155)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46000 (* ?x45802 l_0_14_154)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x45998 (* ?x45794 l_0_14_113)))
 (let ((?x38506 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_112) ?x45998) ?x46000) ?x46002) ?x46004)))
 (= (+ (+ (- ?x38506 ?x46006) ?x46020) ?x46022) 0.0)))))))))))))))))
(assert
 (let ((?x45835 (* 2.0 l_0_14_87)))
 (let ((?x46095 (* ?x45835 l_0_14_96)))
 (let ((?x45832 (* 2.0 l_0_14_86)))
 (let ((?x46093 (* ?x45832 l_0_14_95)))
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46075 (* ?x45811 l_0_14_180)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46073 (* ?x45808 l_0_14_179)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46071 (* ?x45805 l_0_14_159)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46069 (* ?x45802 l_0_14_158)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x46060 (* ?x45794 l_0_14_117)))
 (let ((?x49177 (- (+ (+ (- (* (* (- 2.0) l_0_14_107) l_0_14_116) ?x46060) ?x46069) ?x46071) ?x46073)))
 (= (+ (+ (- ?x49177 ?x46075) ?x46093) ?x46095) 0.0)))))))))))))))))
(assert
 (let ((?x45811 (* 2.0 l_0_14_171)))
 (let ((?x46162 (* ?x45811 l_0_14_185)))
 (let ((?x45808 (* 2.0 l_0_14_170)))
 (let ((?x46160 (* ?x45808 l_0_14_184)))
 (let ((?x45805 (* 2.0 l_0_14_150)))
 (let ((?x46154 (* ?x45805 l_0_14_164)))
 (let ((?x45802 (* 2.0 l_0_14_149)))
 (let ((?x46152 (* ?x45802 l_0_14_163)))
 (let ((?x45794 (* 2.0 l_0_14_108)))
 (let ((?x46148 (* ?x45794 l_0_14_122)))
 (let ((?x45792 (* 2.0 l_0_14_107)))
 (let ((?x46146 (* ?x45792 l_0_14_121)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x46144 (* ?x46143 l_0_14_87)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x46141 (* ?x9172 l_0_14_86)))
 (let ((?x49192 (- (- (+ (+ (- (- (+ ?x46141 ?x46144) ?x46146) ?x46148) ?x46152) ?x46154) ?x46160) ?x46162)))
 (= ?x49192 0.0)))))))))))))))))))
(assert
 (let ((?x49032 (* l_0_14_90 l_0_14_90)))
 (let ((?x49030 (* l_0_14_89 l_0_14_89)))
 (let ((?x49028 (* l_0_14_88 l_0_14_88)))
 (let ((?x49026 (* l_0_14_174 l_0_14_174)))
 (let ((?x49024 (* l_0_14_173 l_0_14_173)))
 (let ((?x49022 (* l_0_14_172 l_0_14_172)))
 (let ((?x49020 (* l_0_14_153 l_0_14_153)))
 (let ((?x49018 (* l_0_14_152 l_0_14_152)))
 (let ((?x49016 (* l_0_14_151 l_0_14_151)))
 (let ((?x49011 (* l_0_14_111 l_0_14_111)))
 (let ((?x27840 (- (- (* (- l_0_14_109) l_0_14_109) (* l_0_14_110 l_0_14_110)) ?x49011)))
 (let ((?x49200 (+ (- (- (- (+ (+ (+ ?x27840 ?x49016) ?x49018) ?x49020) ?x49022) ?x49024) ?x49026) ?x49028)))
 (= (+ (+ ?x49200 ?x49030) ?x49032) 0.0))))))))))))))
(assert
 (let ((?x48805 (* 2.0 l_0_14_90)))
 (let ((?x49073 (* ?x48805 l_0_14_93)))
 (let ((?x48802 (* 2.0 l_0_14_89)))
 (let ((?x49071 (* ?x48802 l_0_14_92)))
 (let ((?x48799 (* 2.0 l_0_14_88)))
 (let ((?x49069 (* ?x48799 l_0_14_91)))
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x49067 (* ?x47256 l_0_14_177)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x49065 (* ?x47253 l_0_14_176)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x49063 (* ?x47250 l_0_14_175)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x49061 (* ?x47247 l_0_14_156)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x49059 (* ?x47244 l_0_14_155)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x49057 (* ?x47241 l_0_14_154)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x49051 (* ?x47219 l_0_14_114)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x49049 (* ?x47216 l_0_14_113)))
 (let ((?x38545 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_112) ?x49049) ?x49051) ?x49057) ?x49059)))
 (let ((?x49206 (+ (+ (+ (- (- (- (+ ?x38545 ?x49061) ?x49063) ?x49065) ?x49067) ?x49069) ?x49071) ?x49073)))
 (= ?x49206 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48805 (* 2.0 l_0_14_90)))
 (let ((?x48806 (* ?x48805 l_0_14_97)))
 (let ((?x48802 (* 2.0 l_0_14_89)))
 (let ((?x48803 (* ?x48802 l_0_14_96)))
 (let ((?x48799 (* 2.0 l_0_14_88)))
 (let ((?x48800 (* ?x48799 l_0_14_95)))
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x48791 (* ?x47256 l_0_14_181)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x48789 (* ?x47253 l_0_14_180)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x48787 (* ?x47250 l_0_14_179)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x48785 (* ?x47247 l_0_14_160)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x48783 (* ?x47244 l_0_14_159)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x48781 (* ?x47241 l_0_14_158)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x37945 (* ?x47219 l_0_14_118)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x37947 (* ?x47216 l_0_14_117)))
 (let ((?x49212 (+ (+ (- (- (* (* (- 2.0) l_0_14_109) l_0_14_116) ?x37947) ?x37945) ?x48781) ?x48783)))
 (let ((?x49219 (+ (+ (+ (- (- (- (+ ?x49212 ?x48785) ?x48787) ?x48789) ?x48791) ?x48800) ?x48803) ?x48806)))
 (= ?x49219 0.0))))))))))))))))))))))))))
(assert
 (let ((?x47256 (* 2.0 l_0_14_174)))
 (let ((?x47257 (* ?x47256 l_0_14_186)))
 (let ((?x47253 (* 2.0 l_0_14_173)))
 (let ((?x47254 (* ?x47253 l_0_14_185)))
 (let ((?x47250 (* 2.0 l_0_14_172)))
 (let ((?x47251 (* ?x47250 l_0_14_184)))
 (let ((?x47247 (* 2.0 l_0_14_153)))
 (let ((?x47248 (* ?x47247 l_0_14_165)))
 (let ((?x47244 (* 2.0 l_0_14_152)))
 (let ((?x47245 (* ?x47244 l_0_14_164)))
 (let ((?x47241 (* 2.0 l_0_14_151)))
 (let ((?x47242 (* ?x47241 l_0_14_163)))
 (let ((?x47219 (* 2.0 l_0_14_111)))
 (let ((?x47220 (* ?x47219 l_0_14_123)))
 (let ((?x47216 (* 2.0 l_0_14_110)))
 (let ((?x47217 (* ?x47216 l_0_14_122)))
 (let ((?x47213 (* 2.0 l_0_14_109)))
 (let ((?x47214 (* ?x47213 l_0_14_121)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47211 (* ?x47210 l_0_14_90)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47208 (* ?x46143 l_0_14_89)))
 (let ((?x49225 (- (- (+ (+ (* (* 2.0 l_0_14_100) l_0_14_88) ?x47208) ?x47211) ?x47214) ?x47217)))
 (let ((?x49232 (- (- (- (+ (+ (+ (- ?x49225 ?x47220) ?x47242) ?x47245) ?x47248) ?x47251) ?x47254) ?x47257)))
 (= ?x49232 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49141 (* l_0_14_94 l_0_14_94)))
 (let ((?x49139 (* l_0_14_93 l_0_14_93)))
 (let ((?x49137 (* l_0_14_92 l_0_14_92)))
 (let ((?x49135 (* l_0_14_91 l_0_14_91)))
 (let ((?x49133 (* l_0_14_178 l_0_14_178)))
 (let ((?x49131 (* l_0_14_177 l_0_14_177)))
 (let ((?x49129 (* l_0_14_176 l_0_14_176)))
 (let ((?x49127 (* l_0_14_175 l_0_14_175)))
 (let ((?x49125 (* l_0_14_157 l_0_14_157)))
 (let ((?x49123 (* l_0_14_156 l_0_14_156)))
 (let ((?x49121 (* l_0_14_155 l_0_14_155)))
 (let ((?x49119 (* l_0_14_154 l_0_14_154)))
 (let ((?x49117 (* l_0_14_115 l_0_14_115)))
 (let ((?x49115 (* l_0_14_114 l_0_14_114)))
 (let ((?x49239 (- (- (* (- l_0_14_112) l_0_14_112) (* l_0_14_113 l_0_14_113)) ?x49115)))
 (let ((?x49246 (- (- (+ (+ (+ (+ (- ?x49239 ?x49117) ?x49119) ?x49121) ?x49123) ?x49125) ?x49127) ?x49129)))
 (= (+ (+ (+ (+ (- (- ?x49246 ?x49131) ?x49133) ?x49135) ?x49137) ?x49139) ?x49141) 0.0))))))))))))))))))
(assert
 (let ((?x48873 (* (* 2.0 l_0_14_94) l_0_14_98)))
 (let ((?x48870 (* (* 2.0 l_0_14_93) l_0_14_97)))
 (let ((?x48867 (* (* 2.0 l_0_14_92) l_0_14_96)))
 (let ((?x48864 (* (* 2.0 l_0_14_91) l_0_14_95)))
 (let ((?x47613 (* 2.0 l_0_14_178)))
 (let ((?x48853 (* ?x47613 l_0_14_182)))
 (let ((?x47610 (* 2.0 l_0_14_177)))
 (let ((?x48851 (* ?x47610 l_0_14_181)))
 (let ((?x47607 (* 2.0 l_0_14_176)))
 (let ((?x48849 (* ?x47607 l_0_14_180)))
 (let ((?x47604 (* 2.0 l_0_14_175)))
 (let ((?x48847 (* ?x47604 l_0_14_179)))
 (let ((?x47601 (* 2.0 l_0_14_157)))
 (let ((?x48845 (* ?x47601 l_0_14_161)))
 (let ((?x47598 (* 2.0 l_0_14_156)))
 (let ((?x48843 (* ?x47598 l_0_14_160)))
 (let ((?x47595 (* 2.0 l_0_14_155)))
 (let ((?x48841 (* ?x47595 l_0_14_159)))
 (let ((?x47592 (* 2.0 l_0_14_154)))
 (let ((?x48839 (* ?x47592 l_0_14_158)))
 (let ((?x47581 (* 2.0 l_0_14_115)))
 (let ((?x48837 (* ?x47581 l_0_14_119)))
 (let ((?x47578 (* 2.0 l_0_14_114)))
 (let ((?x48835 (* ?x47578 l_0_14_118)))
 (let ((?x47575 (* 2.0 l_0_14_113)))
 (let ((?x38057 (* ?x47575 l_0_14_117)))
 (let ((?x49266 (+ (- (- (- (* (* (- 2.0) l_0_14_112) l_0_14_116) ?x38057) ?x48835) ?x48837) ?x48839)))
 (let ((?x49273 (- (- (- (- (+ (+ (+ ?x49266 ?x48841) ?x48843) ?x48845) ?x48847) ?x48849) ?x48851) ?x48853)))
 (= (+ (+ (+ (+ ?x49273 ?x48864) ?x48867) ?x48870) ?x48873) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x47613 (* 2.0 l_0_14_178)))
 (let ((?x47614 (* ?x47613 l_0_14_187)))
 (let ((?x47610 (* 2.0 l_0_14_177)))
 (let ((?x47611 (* ?x47610 l_0_14_186)))
 (let ((?x47607 (* 2.0 l_0_14_176)))
 (let ((?x47608 (* ?x47607 l_0_14_185)))
 (let ((?x47604 (* 2.0 l_0_14_175)))
 (let ((?x47605 (* ?x47604 l_0_14_184)))
 (let ((?x47601 (* 2.0 l_0_14_157)))
 (let ((?x47602 (* ?x47601 l_0_14_166)))
 (let ((?x47598 (* 2.0 l_0_14_156)))
 (let ((?x47599 (* ?x47598 l_0_14_165)))
 (let ((?x47595 (* 2.0 l_0_14_155)))
 (let ((?x47596 (* ?x47595 l_0_14_164)))
 (let ((?x47592 (* 2.0 l_0_14_154)))
 (let ((?x47593 (* ?x47592 l_0_14_163)))
 (let ((?x47581 (* 2.0 l_0_14_115)))
 (let ((?x47582 (* ?x47581 l_0_14_124)))
 (let ((?x47578 (* 2.0 l_0_14_114)))
 (let ((?x47579 (* ?x47578 l_0_14_123)))
 (let ((?x47575 (* 2.0 l_0_14_113)))
 (let ((?x47576 (* ?x47575 l_0_14_122)))
 (let ((?x47572 (* 2.0 l_0_14_112)))
 (let ((?x47573 (* ?x47572 l_0_14_121)))
 (let ((?x47569 (* 2.0 l_0_14_103)))
 (let ((?x47570 (* ?x47569 l_0_14_94)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47567 (* ?x47210 l_0_14_93)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47565 (* ?x46143 l_0_14_92)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x47563 (* ?x9172 l_0_14_91)))
 (let ((?x38690 (- (- (- (- (+ (+ (+ ?x47563 ?x47565) ?x47567) ?x47570) ?x47573) ?x47576) ?x47579) ?x47582)))
 (let ((?x38677 (- (- (- (+ (+ (+ (+ ?x38690 ?x47593) ?x47596) ?x47599) ?x47602) ?x47605) ?x47608) ?x47611)))
 (= (- ?x38677 ?x47614) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48963 (* l_0_14_99 l_0_14_99)))
 (let ((?x48961 (* l_0_14_98 l_0_14_98)))
 (let ((?x48959 (* l_0_14_97 l_0_14_97)))
 (let ((?x48957 (* l_0_14_96 l_0_14_96)))
 (let ((?x48955 (* l_0_14_95 l_0_14_95)))
 (let ((?x48945 (* l_0_14_183 l_0_14_183)))
 (let ((?x48943 (* l_0_14_182 l_0_14_182)))
 (let ((?x48941 (* l_0_14_181 l_0_14_181)))
 (let ((?x48939 (* l_0_14_180 l_0_14_180)))
 (let ((?x48937 (* l_0_14_179 l_0_14_179)))
 (let ((?x48935 (* l_0_14_162 l_0_14_162)))
 (let ((?x48933 (* l_0_14_161 l_0_14_161)))
 (let ((?x48931 (* l_0_14_160 l_0_14_160)))
 (let ((?x48929 (* l_0_14_159 l_0_14_159)))
 (let ((?x48927 (* l_0_14_158 l_0_14_158)))
 (let ((?x48925 (* l_0_14_120 l_0_14_120)))
 (let ((?x48923 (* l_0_14_119 l_0_14_119)))
 (let ((?x48921 (* l_0_14_118 l_0_14_118)))
 (let ((?x14615 (- (- (* (- l_0_14_116) l_0_14_116) (* l_0_14_117 l_0_14_117)) ?x48921)))
 (let ((?x38699 (+ (+ (+ (+ (+ (- (- ?x14615 ?x48923) ?x48925) ?x48927) ?x48929) ?x48931) ?x48933) ?x48935)))
 (let ((?x49288 (+ (+ (- (- (- (- (- ?x38699 ?x48937) ?x48939) ?x48941) ?x48943) ?x48945) ?x48955) ?x48957)))
 (= (+ (+ (+ ?x49288 ?x48959) ?x48961) ?x48963) 0.0)))))))))))))))))))))))
(assert
 (let ((?x47780 (* (* 2.0 l_0_14_183) l_0_14_188)))
 (let ((?x47777 (* (* 2.0 l_0_14_182) l_0_14_187)))
 (let ((?x47774 (* (* 2.0 l_0_14_181) l_0_14_186)))
 (let ((?x47771 (* (* 2.0 l_0_14_180) l_0_14_185)))
 (let ((?x47768 (* (* 2.0 l_0_14_179) l_0_14_184)))
 (let ((?x47765 (* (* 2.0 l_0_14_162) l_0_14_167)))
 (let ((?x47762 (* (* 2.0 l_0_14_161) l_0_14_166)))
 (let ((?x47759 (* (* 2.0 l_0_14_160) l_0_14_165)))
 (let ((?x47756 (* (* 2.0 l_0_14_159) l_0_14_164)))
 (let ((?x47753 (* (* 2.0 l_0_14_158) l_0_14_163)))
 (let ((?x47740 (* (* 2.0 l_0_14_120) l_0_14_125)))
 (let ((?x47735 (* (* 2.0 l_0_14_119) l_0_14_124)))
 (let ((?x47732 (* (* 2.0 l_0_14_118) l_0_14_123)))
 (let ((?x47729 (* (* 2.0 l_0_14_117) l_0_14_122)))
 (let ((?x47726 (* (* 2.0 l_0_14_116) l_0_14_121)))
 (let ((?x47721 (* (* 2.0 l_0_14_104) l_0_14_99)))
 (let ((?x47569 (* 2.0 l_0_14_103)))
 (let ((?x47718 (* ?x47569 l_0_14_98)))
 (let ((?x47210 (* 2.0 l_0_14_102)))
 (let ((?x47716 (* ?x47210 l_0_14_97)))
 (let ((?x46143 (* 2.0 l_0_14_101)))
 (let ((?x47714 (* ?x46143 l_0_14_96)))
 (let ((?x9172 (* 2.0 l_0_14_100)))
 (let ((?x25620 (* ?x9172 l_0_14_95)))
 (let ((?x38930 (- (- (- (+ (+ (+ (+ ?x25620 ?x47714) ?x47716) ?x47718) ?x47721) ?x47726) ?x47729) ?x47732)))
 (let ((?x49294 (+ (+ (+ (+ (+ (- (- ?x38930 ?x47735) ?x47740) ?x47753) ?x47756) ?x47759) ?x47762) ?x47765)))
 (= (- (- (- (- (- ?x49294 ?x47768) ?x47771) ?x47774) ?x47777) ?x47780) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x47940 (* l_0_14_189 l_0_14_189)))
 (let ((?x47938 (* l_0_14_188 l_0_14_188)))
 (let ((?x47936 (* l_0_14_187 l_0_14_187)))
 (let ((?x47934 (* l_0_14_186 l_0_14_186)))
 (let ((?x47932 (* l_0_14_185 l_0_14_185)))
 (let ((?x47930 (* l_0_14_184 l_0_14_184)))
 (let ((?x47926 (* l_0_14_168 l_0_14_168)))
 (let ((?x47924 (* l_0_14_167 l_0_14_167)))
 (let ((?x47922 (* l_0_14_166 l_0_14_166)))
 (let ((?x47920 (* l_0_14_165 l_0_14_165)))
 (let ((?x47918 (* l_0_14_164 l_0_14_164)))
 (let ((?x47916 (* l_0_14_163 l_0_14_163)))
 (let ((?x47909 (* l_0_14_126 l_0_14_126)))
 (let ((?x47907 (* l_0_14_125 l_0_14_125)))
 (let ((?x47905 (* l_0_14_124 l_0_14_124)))
 (let ((?x47903 (* l_0_14_123 l_0_14_123)))
 (let ((?x47901 (* l_0_14_122 l_0_14_122)))
 (let ((?x47899 (* l_0_14_121 l_0_14_121)))
 (let ((?x47897 (* l_0_14_105 l_0_14_105)))
 (let ((?x47895 (* l_0_14_104 l_0_14_104)))
 (let ((?x47893 (* l_0_14_103 l_0_14_103)))
 (let ((?x47891 (* l_0_14_102 l_0_14_102)))
 (let ((?x28475 (+ (+ (* l_0_14_100 l_0_14_100) (* l_0_14_101 l_0_14_101)) ?x47891)))
 (let ((?x28509 (- (- (- (- (+ (+ (+ ?x28475 ?x47893) ?x47895) ?x47897) ?x47899) ?x47901) ?x47903) ?x47905)))
 (let ((?x49303 (+ (+ (+ (+ (+ (- (- ?x28509 ?x47907) ?x47909) ?x47916) ?x47918) ?x47920) ?x47922) ?x47924)))
 (let ((?x49310 (- (- (- (- (- (- (+ ?x49303 ?x47926) ?x47930) ?x47932) ?x47934) ?x47936) ?x47938) ?x47940)))
 (= ?x49310 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x47122 (* l_0_14_132 l_0_14_132)))
 (let ((?x39174 (- (- (* (- l_0_14_130) l_0_14_130) (* l_0_14_131 l_0_14_131)) ?x47122)))
 (= ?x39174 0.0))))
(assert
 (>= l_0_14_1 0.0))
(assert
 (>= l_0_14_3 0.0))
(assert
 (>= l_0_14_6 0.0))
(assert
 (>= l_0_14_10 0.0))
(assert
 (>= l_0_14_15 0.0))
(assert
 (>= l_0_14_21 0.0))
(assert
 (>= l_0_14_22 0.0))
(assert
 (>= l_0_14_24 0.0))
(assert
 (>= l_0_14_27 0.0))
(assert
 (>= l_0_14_31 0.0))
(assert
 (>= l_0_14_36 0.0))
(assert
 (>= l_0_14_42 0.0))
(assert
 (>= l_0_14_43 0.0))
(assert
 (>= l_0_14_45 0.0))
(assert
 (>= l_0_14_48 0.0))
(assert
 (>= l_0_14_52 0.0))
(assert
 (>= l_0_14_57 0.0))
(assert
 (>= l_0_14_63 0.0))
(assert
 (>= l_0_14_64 0.0))
(assert
 (>= l_0_14_66 0.0))
(assert
 (>= l_0_14_69 0.0))
(assert
 (>= l_0_14_73 0.0))
(assert
 (>= l_0_14_78 0.0))
(assert
 (>= l_0_14_84 0.0))
(assert
 (>= l_0_14_85 0.0))
(assert
 (>= l_0_14_87 0.0))
(assert
 (>= l_0_14_90 0.0))
(assert
 (>= l_0_14_94 0.0))
(assert
 (>= l_0_14_99 0.0))
(assert
 (>= l_0_14_105 0.0))
(assert
 (>= l_0_14_106 0.0))
(assert
 (>= l_0_14_108 0.0))
(assert
 (>= l_0_14_111 0.0))
(assert
 (>= l_0_14_115 0.0))
(assert
 (>= l_0_14_120 0.0))
(assert
 (>= l_0_14_126 0.0))
(assert
 (>= l_0_14_127 0.0))
(assert
 (>= l_0_14_129 0.0))
(assert
 (>= l_0_14_132 0.0))
(assert
 (>= l_0_14_136 0.0))
(assert
 (>= l_0_14_141 0.0))
(assert
 (>= l_0_14_147 0.0))
(assert
 (>= l_0_14_148 0.0))
(assert
 (>= l_0_14_150 0.0))
(assert
 (>= l_0_14_153 0.0))
(assert
 (>= l_0_14_157 0.0))
(assert
 (>= l_0_14_162 0.0))
(assert
 (>= l_0_14_168 0.0))
(assert
 (>= l_0_14_169 0.0))
(assert
 (>= l_0_14_171 0.0))
(assert
 (>= l_0_14_174 0.0))
(assert
 (>= l_0_14_178 0.0))
(assert
 (>= l_0_14_183 0.0))
(assert
 (>= l_0_14_189 0.0))
(assert
 (>= l_0_14_190 0.0))
(assert
 (>= l_0_14_192 0.0))
(assert
 (>= l_0_14_195 0.0))
(assert
 (>= l_0_14_199 0.0))
(assert
 (>= l_0_14_204 0.0))
(assert
 (>= l_0_14_210 0.0))
(assert
 (>= l_0_14_211 0.0))
(assert
 (>= l_0_14_213 0.0))
(assert
 (>= l_0_14_216 0.0))
(assert
 (>= l_0_14_220 0.0))
(assert
 (>= l_0_14_225 0.0))
(assert
 (>= l_0_14_231 0.0))
(assert
 (let ((?x49428 (* l_0_15_64 l_0_15_64)))
 (let ((?x49429 (* 3.0 ?x49428)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x49426 (* ?x49425 l_0_15_79)))
 (let ((?x49405 (* (* 3.0 l_0_15_43) l_0_15_43)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x49402 (* ?x49401 l_0_15_58)))
 (let ((?x49399 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x49396 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x49393 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x49390 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x49387 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x49384 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x49381 (* l_0_15_252 l_0_15_252)))
 (let ((?x49379 (* l_0_15_251 l_0_15_251)))
 (let ((?x49377 (* l_0_15_250 l_0_15_250)))
 (let ((?x49375 (* l_0_15_249 l_0_15_249)))
 (let ((?x49373 (* l_0_15_248 l_0_15_248)))
 (let ((?x49371 (* l_0_15_247 l_0_15_247)))
 (let ((?x49369 (* l_0_15_231 l_0_15_231)))
 (let ((?x49367 (* l_0_15_230 l_0_15_230)))
 (let ((?x49365 (* l_0_15_229 l_0_15_229)))
 (let ((?x49363 (* l_0_15_228 l_0_15_228)))
 (let ((?x49361 (* l_0_15_227 l_0_15_227)))
 (let ((?x49359 (* l_0_15_226 l_0_15_226)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49357 (* ?x49356 l_0_15_37)))
 (let ((?x49354 (* l_0_15_210 l_0_15_210)))
 (let ((?x49351 (* l_0_15_21 l_0_15_21)))
 (let ((?x49352 (* 6.0 ?x49351)))
 (let ((?x49349 (* l_0_15_209 l_0_15_209)))
 (let ((?x49347 (* l_0_15_208 l_0_15_208)))
 (let ((?x49345 (* l_0_15_207 l_0_15_207)))
 (let ((?x49343 (* l_0_15_206 l_0_15_206)))
 (let ((?x49341 (* l_0_15_205 l_0_15_205)))
 (let ((?x49338 (* l_0_15_20 l_0_15_20)))
 (let ((?x49339 (* 6.0 ?x49338)))
 (let ((?x49335 (* l_0_15_19 l_0_15_19)))
 (let ((?x49336 (* 6.0 ?x49335)))
 (let ((?x49332 (* l_0_15_18 l_0_15_18)))
 (let ((?x49333 (* 6.0 ?x49332)))
 (let ((?x49329 (* l_0_15_17 l_0_15_17)))
 (let ((?x49330 (* 6.0 ?x49329)))
 (let ((?x49326 (* l_0_15_16 l_0_15_16)))
 (let ((?x49327 (* 6.0 ?x49326)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x49324 (* ?x49323 l_0_15_142)))
 (let ((?x49321 (* 12.0 l_0_15_1)))
 (let ((?x49322 (* ?x49321 l_0_15_16)))
 (let ((?x49342 (- (+ (+ (+ (+ (+ (+ ?x49322 ?x49324) ?x49327) ?x49330) ?x49333) ?x49336) ?x49339) ?x49341)))
 (let ((?x49358 (- (- (+ (- (- (- (- ?x49342 ?x49343) ?x49345) ?x49347) ?x49349) ?x49352) ?x49354) ?x49357)))
 (let ((?x49372 (- (- (- (- (- (- (- ?x49358 ?x49359) ?x49361) ?x49363) ?x49365) ?x49367) ?x49369) ?x49371)))
 (let ((?x49388 (- (- (- (- (- (- (- ?x49372 ?x49373) ?x49375) ?x49377) ?x49379) ?x49381) ?x49384) ?x49387)))
 (let ((?x49409 (- (- (- (- (- (- (- ?x49388 ?x49390) ?x49393) ?x49396) ?x49399) ?x49402) ?x49405) (* (* 1.0 l_0_15_58) l_0_15_58))))
 (let ((?x49415 (- (- ?x49409 (* (* 1.0 l_0_15_59) l_0_15_59)) (* (* 1.0 l_0_15_60) l_0_15_60))))
 (let ((?x49421 (- (- ?x49415 (* (* 1.0 l_0_15_61) l_0_15_61)) (* (* 1.0 l_0_15_62) l_0_15_62))))
 (let ((?x49433 (+ (+ (+ (- ?x49421 (* (* 1.0 l_0_15_63) l_0_15_63)) ?x49426) ?x49429) (* 1.0 (* l_0_15_79 l_0_15_79)))))
 (let ((?x49439 (+ (+ ?x49433 (* 1.0 (* l_0_15_80 l_0_15_80))) (* 1.0 (* l_0_15_81 l_0_15_81)))))
 (let ((?x49445 (+ (+ ?x49439 (* 1.0 (* l_0_15_82 l_0_15_82))) (* 1.0 (* l_0_15_83 l_0_15_83)))))
 (= (+ (+ ?x49445 (* 1.0 (* l_0_15_84 l_0_15_84))) 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49428 (* l_0_15_64 l_0_15_64)))
 (let ((?x49429 (* 3.0 ?x49428)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49556 (* ?x49555 l_0_15_79)))
 (let ((?x49405 (* (* 3.0 l_0_15_43) l_0_15_43)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49552 (* ?x49551 l_0_15_58)))
 (let ((?x49546 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49357 (* ?x49356 l_0_15_37)))
 (let ((?x49536 (* l_0_15_127 l_0_15_127)))
 (let ((?x15365 (* l_0_15_1 l_0_15_1)))
 (let ((?x49516 (* 6.0 ?x15365)))
 (let ((?x49321 (* 12.0 l_0_15_1)))
 (let ((?x49322 (* ?x49321 l_0_15_16)))
 (let ((?x49543 (- (- (+ (+ ?x49322 ?x49516) ?x49536) (* (* 2.0 l_0_15_190) l_0_15_205)) (* (* 2.0 l_0_15_211) l_0_15_226))))
 (let ((?x49553 (- (- (- (- ?x49543 ?x49357) ?x49546) (* (* 2.0 l_0_15_232) l_0_15_247)) ?x49552)))
 (= (+ (+ (+ (- ?x49553 ?x49405) ?x49556) ?x49429) 9.0) 0.0)))))))))))))))))))
(assert
 (let ((?x49585 (* l_0_15_232 l_0_15_232)))
 (let ((?x49546 (* (* 6.0 l_0_15_22) l_0_15_22)))
 (let ((?x49582 (* l_0_15_211 l_0_15_211)))
 (let ((?x49580 (* l_0_15_190 l_0_15_190)))
 (let ((?x49583 (- (- (+ (- _a_6_) (* 6.0 (* l_0_15_1 l_0_15_1))) ?x49580) ?x49582)))
 (let ((?x49591 (+ (- (- (- ?x49583 ?x49546) ?x49585) (* (* 1.0 l_0_15_43) l_0_15_43)) (* 1.0 (* l_0_15_64 l_0_15_64)))))
 (= (+ ?x49591 7.0) 0.0))))))))
(assert
 (let ((?x49633 (* l_0_15_3 l_0_15_3)))
 (let ((?x49634 (* 6.0 ?x49633)))
 (let ((?x49631 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x49628 (* l_0_15_234 l_0_15_234)))
 (let ((?x49626 (* l_0_15_233 l_0_15_233)))
 (let ((?x49624 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x49618 (* l_0_15_213 l_0_15_213)))
 (let ((?x49616 (* l_0_15_212 l_0_15_212)))
 (let ((?x49613 (* l_0_15_2 l_0_15_2)))
 (let ((?x49614 (* 6.0 ?x49613)))
 (let ((?x49611 (* l_0_15_192 l_0_15_192)))
 (let ((?x49609 (* l_0_15_191 l_0_15_191)))
 (let ((?x49612 (- (- (- (- _a_7_) (* (* 2.0 l_0_15_1) l_0_15_2)) ?x49609) ?x49611)))
 (let ((?x49622 (+ (- (- (+ ?x49612 ?x49614) ?x49616) ?x49618) (* (* 2.0 l_0_15_22) l_0_15_23))))
 (let ((?x49638 (- (+ (- (- (- (- ?x49622 ?x49624) ?x49626) ?x49628) ?x49631) ?x49634) (* (* 1.0 l_0_15_44) l_0_15_44))))
 (let ((?x49644 (+ (- ?x49638 (* (* 1.0 l_0_15_45) l_0_15_45)) (* 1.0 (* l_0_15_65 l_0_15_65)))))
 (= (+ ?x49644 (* 1.0 (* l_0_15_66 l_0_15_66))) 0.0))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x49731 (* ?x49730 l_0_15_75)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x49728 (* ?x49727 l_0_15_74)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49725 (* ?x49555 l_0_15_65)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x49723 (* ?x49722 l_0_15_54)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x49720 (* ?x49719 l_0_15_53)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49717 (* ?x49551 l_0_15_44)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x49715 (* ?x49714 l_0_15_33)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x49706 (* ?x49705 l_0_15_32)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x49689 (* ?x49688 l_0_15_3)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x49686 (* ?x49685 l_0_15_2)))
 (let ((?x49690 (+ (+ (- (- _a_8_) (* (* 2.0 l_0_15_1) l_0_15_11)) ?x49686) ?x49689)))
 (let ((?x49696 (- (- ?x49690 (* (* 2.0 l_0_15_191) l_0_15_200)) (* (* 2.0 l_0_15_192) l_0_15_201))))
 (let ((?x49702 (- (- ?x49696 (* (* 2.0 l_0_15_212) l_0_15_221)) (* (* 2.0 l_0_15_213) l_0_15_222))))
 (let ((?x49710 (- (- (+ ?x49702 (* (* 2.0 l_0_15_22) l_0_15_32)) ?x49706) (* (* 2.0 l_0_15_233) l_0_15_242))))
 (let ((?x49721 (- (+ (- (- ?x49710 (* (* 2.0 l_0_15_234) l_0_15_243)) ?x49715) ?x49717) ?x49720)))
 (= (+ (+ (- (- ?x49721 ?x49723) ?x49725) ?x49728) ?x49731) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49725 (* ?x49555 l_0_15_65)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49717 (* ?x49551 l_0_15_44)))
 (let ((?x29314 (* l_0_15_22 l_0_15_22)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49792 (* ?x49356 l_0_15_23)))
 (let ((?x15365 (* l_0_15_1 l_0_15_1)))
 (let ((?x49789 (- (- (+ (- _a_9_) (* (* 12.0 l_0_15_1) l_0_15_2)) ?x15365) (* (* 2.0 l_0_15_190) l_0_15_191))))
 (let ((?x49796 (- (+ (- (- ?x49789 (* (* 2.0 l_0_15_211) l_0_15_212)) ?x49792) ?x29314) (* (* 2.0 l_0_15_232) l_0_15_233))))
 (= (+ (- ?x49796 ?x49717) ?x49725) 0.0))))))))))))
(assert
 (let ((?x49428 (* l_0_15_64 l_0_15_64)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49829 (* ?x49555 l_0_15_74)))
 (let ((?x29291 (* l_0_15_43 l_0_15_43)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49826 (* ?x49551 l_0_15_53)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49822 (* ?x49356 l_0_15_32)))
 (let ((?x49819 (- (+ (- _a_10_) (* (* 12.0 l_0_15_1) l_0_15_11)) (* (* 2.0 l_0_15_190) l_0_15_200))))
 (let ((?x49825 (- (- (- ?x49819 (* (* 2.0 l_0_15_211) l_0_15_221)) ?x49822) (* (* 2.0 l_0_15_232) l_0_15_242))))
 (= (- (+ (+ (- ?x49825 ?x49826) ?x29291) ?x49829) ?x49428) 0.0))))))))))))
(assert
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49829 (* ?x49555 l_0_15_74)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49826 (* ?x49551 l_0_15_53)))
 (let ((?x49912 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x49909 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x49906 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x49903 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x49900 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x49897 (* l_0_15_246 l_0_15_246)))
 (let ((?x49895 (* l_0_15_245 l_0_15_245)))
 (let ((?x49893 (* l_0_15_244 l_0_15_244)))
 (let ((?x49891 (* l_0_15_243 l_0_15_243)))
 (let ((?x49889 (* l_0_15_242 l_0_15_242)))
 (let ((?x49887 (* l_0_15_225 l_0_15_225)))
 (let ((?x49885 (* l_0_15_224 l_0_15_224)))
 (let ((?x49883 (* l_0_15_223 l_0_15_223)))
 (let ((?x49881 (* l_0_15_222 l_0_15_222)))
 (let ((?x49879 (* l_0_15_221 l_0_15_221)))
 (let ((?x49877 (* l_0_15_204 l_0_15_204)))
 (let ((?x49875 (* l_0_15_203 l_0_15_203)))
 (let ((?x49873 (* l_0_15_202 l_0_15_202)))
 (let ((?x49871 (* l_0_15_201 l_0_15_201)))
 (let ((?x49869 (* l_0_15_200 l_0_15_200)))
 (let ((?x49866 (* l_0_15_15 l_0_15_15)))
 (let ((?x49867 (* 6.0 ?x49866)))
 (let ((?x49863 (* l_0_15_14 l_0_15_14)))
 (let ((?x49864 (* 6.0 ?x49863)))
 (let ((?x49860 (* l_0_15_13 l_0_15_13)))
 (let ((?x49861 (* 6.0 ?x49860)))
 (let ((?x49857 (* l_0_15_12 l_0_15_12)))
 (let ((?x49858 (* 6.0 ?x49857)))
 (let ((?x49862 (+ (+ (+ (- _a_11_) (* 6.0 (* l_0_15_11 l_0_15_11))) ?x49858) ?x49861)))
 (let ((?x49878 (- (- (- (- (- (+ (+ ?x49862 ?x49864) ?x49867) ?x49869) ?x49871) ?x49873) ?x49875) ?x49877)))
 (let ((?x49892 (- (- (- (- (- (- (- ?x49878 ?x49879) ?x49881) ?x49883) ?x49885) ?x49887) ?x49889) ?x49891)))
 (let ((?x49910 (- (- (- (- (- (- (- ?x49892 ?x49893) ?x49895) ?x49897) ?x49900) ?x49903) ?x49906) ?x49909)))
 (let ((?x49920 (- (- (+ (- ?x49910 ?x49912) ?x49826) (* (* 1.0 l_0_15_53) l_0_15_53)) (* (* 1.0 l_0_15_54) l_0_15_54))))
 (let ((?x49926 (- (- ?x49920 (* (* 1.0 l_0_15_55) l_0_15_55)) (* (* 1.0 l_0_15_56) l_0_15_56))))
 (let ((?x49933 (+ (- (- ?x49926 (* (* 1.0 l_0_15_57) l_0_15_57)) ?x49829) (* 1.0 (* l_0_15_74 l_0_15_74)))))
 (let ((?x49939 (+ (+ ?x49933 (* 1.0 (* l_0_15_75 l_0_15_75))) (* 1.0 (* l_0_15_76 l_0_15_76)))))
 (let ((?x49945 (+ (+ ?x49939 (* 1.0 (* l_0_15_77 l_0_15_77))) (* 1.0 (* l_0_15_78 l_0_15_78)))))
 (= ?x49945 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50025 (* ?x49730 l_0_15_68)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50023 (* ?x49727 l_0_15_67)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50021 (* ?x49722 l_0_15_47)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50019 (* ?x49719 l_0_15_46)))
 (let ((?x50016 (* 12.0 l_0_15_3)))
 (let ((?x50017 (* ?x50016 l_0_15_5)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50014 (* ?x49714 l_0_15_26)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50008 (* ?x49705 l_0_15_25)))
 (let ((?x49999 (* 12.0 l_0_15_2)))
 (let ((?x50000 (* ?x49999 l_0_15_4)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x49993 (* ?x49323 l_0_15_128)))
 (let ((?x49996 (- (- (* (* (- 2.0) l_0_15_1) l_0_15_4) ?x49993) (* (* 2.0 l_0_15_191) l_0_15_193))))
 (let ((?x50003 (- (+ (- ?x49996 (* (* 2.0 l_0_15_192) l_0_15_194)) ?x50000) (* (* 2.0 l_0_15_212) l_0_15_214))))
 (let ((?x50007 (+ (- ?x50003 (* (* 2.0 l_0_15_213) l_0_15_215)) (* (* 2.0 l_0_15_22) l_0_15_25))))
 (let ((?x50013 (- (- (- ?x50007 ?x50008) (* (* 2.0 l_0_15_233) l_0_15_235)) (* (* 2.0 l_0_15_234) l_0_15_236))))
 (= (+ (+ (- (- (+ (- ?x50013 ?x50014) ?x50017) ?x50019) ?x50021) ?x50023) ?x50025) 0.0))))))))))))))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x50095 (* ?x50094 l_0_15_86)))
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50092 (* ?x49730 l_0_15_71)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50090 (* ?x49727 l_0_15_70)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50088 (* ?x49722 l_0_15_50)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50086 (* ?x49719 l_0_15_49)))
 (let ((?x50016 (* 12.0 l_0_15_3)))
 (let ((?x50084 (* ?x50016 l_0_15_8)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50082 (* ?x49714 l_0_15_29)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50076 (* ?x49705 l_0_15_28)))
 (let ((?x49999 (* 12.0 l_0_15_2)))
 (let ((?x50068 (* ?x49999 l_0_15_7)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x50062 (* ?x50061 l_0_15_170)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x50059 (* ?x50058 l_0_15_149)))
 (let ((?x50057 (+ (* (* (- 2.0) l_0_15_1) l_0_15_7) (* (* 2.0 l_0_15_106) l_0_15_107))))
 (let ((?x50067 (- (- (+ (- ?x50057 ?x50059) ?x50062) (* (* 2.0 l_0_15_191) l_0_15_196)) (* (* 2.0 l_0_15_192) l_0_15_197))))
 (let ((?x50073 (- (- (+ ?x50067 ?x50068) (* (* 2.0 l_0_15_212) l_0_15_217)) (* (* 2.0 l_0_15_213) l_0_15_218))))
 (let ((?x50079 (- (- (+ ?x50073 (* (* 2.0 l_0_15_22) l_0_15_28)) ?x50076) (* (* 2.0 l_0_15_233) l_0_15_238))))
 (let ((?x50087 (- (+ (- (- ?x50079 (* (* 2.0 l_0_15_234) l_0_15_239)) ?x50082) ?x50084) ?x50086)))
 (= (- (+ (+ (- ?x50087 ?x50088) ?x50090) ?x50092) ?x50095) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50211 (* ?x49730 l_0_15_80)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50209 (* ?x49727 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x50207 (* ?x49425 l_0_15_65)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50205 (* ?x49722 l_0_15_59)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50203 (* ?x49719 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x50201 (* ?x49401 l_0_15_44)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50199 (* ?x49714 l_0_15_38)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50193 (* ?x49705 l_0_15_37)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49792 (* ?x49356 l_0_15_23)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x50180 (* ?x50179 l_0_15_3)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x50177 (* ?x50176 l_0_15_2)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x49993 (* ?x49323 l_0_15_128)))
 (let ((?x49321 (* 12.0 l_0_15_1)))
 (let ((?x49776 (* ?x49321 l_0_15_2)))
 (let ((?x50181 (+ (+ (+ (+ (* (* (- 2.0) l_0_15_1) l_0_15_16) ?x49776) ?x49993) ?x50177) ?x50180)))
 (let ((?x50185 (- (- ?x50181 (* (* 2.0 l_0_15_191) l_0_15_205)) (* (* 2.0 l_0_15_192) l_0_15_206))))
 (let ((?x50189 (- (- ?x50185 (* (* 2.0 l_0_15_212) l_0_15_226)) (* (* 2.0 l_0_15_213) l_0_15_227))))
 (let ((?x50196 (- (- (+ (- ?x50189 ?x49792) (* (* 2.0 l_0_15_22) l_0_15_37)) ?x50193) (* (* 2.0 l_0_15_233) l_0_15_247))))
 (let ((?x50204 (- (- (- (- ?x50196 (* (* 2.0 l_0_15_234) l_0_15_248)) ?x50199) ?x50201) ?x50203)))
 (= (+ (+ (+ (- ?x50204 ?x50205) ?x50207) ?x50209) ?x50211) 0.0)))))))))))))))))))))))))))))))))
(assert
 (let ((?x49633 (* l_0_15_3 l_0_15_3)))
 (let ((?x15591 (* l_0_15_24 l_0_15_24)))
 (let ((?x50256 (- (+ (+ (* (- l_0_15_2) l_0_15_2) (* l_0_15_23 l_0_15_23)) ?x15591) ?x49633)))
 (= ?x50256 0.0)))))
(assert
 (let ((?x50271 (- (- (* (- l_0_15_128) l_0_15_128) (* l_0_15_129 l_0_15_129)) (* (* 2.0 l_0_15_2) l_0_15_4))))
 (let ((?x50277 (+ (+ ?x50271 (* (* 2.0 l_0_15_23) l_0_15_25)) (* (* 2.0 l_0_15_24) l_0_15_26))))
 (= (- ?x50277 (* (* 2.0 l_0_15_3) l_0_15_5)) 0.0))))
(assert
 (let ((?x50318 (* l_0_15_87 l_0_15_87)))
 (let ((?x50316 (* l_0_15_86 l_0_15_86)))
 (let ((?x50306 (* l_0_15_171 l_0_15_171)))
 (let ((?x50304 (* l_0_15_170 l_0_15_170)))
 (let ((?x50302 (* l_0_15_150 l_0_15_150)))
 (let ((?x50300 (* l_0_15_149 l_0_15_149)))
 (let ((?x50301 (- (+ (* l_0_15_107 l_0_15_107) (* l_0_15_108 l_0_15_108)) ?x50300)))
 (let ((?x50309 (- (+ (+ (- ?x50301 ?x50302) ?x50304) ?x50306) (* (* 2.0 l_0_15_2) l_0_15_7))))
 (let ((?x50313 (+ (+ ?x50309 (* (* 2.0 l_0_15_23) l_0_15_28)) (* (* 2.0 l_0_15_24) l_0_15_29))))
 (= (- (- (- ?x50313 (* (* 2.0 l_0_15_3) l_0_15_8)) ?x50316) ?x50318) 0.0)))))))))))
(assert
 (let ((?x49645 (* l_0_15_66 l_0_15_66)))
 (let ((?x49642 (* l_0_15_65 l_0_15_65)))
 (let ((?x49675 (* l_0_15_45 l_0_15_45)))
 (let ((?x15686 (* l_0_15_44 l_0_15_44)))
 (let ((?x50331 (- (* (* (- 2.0) l_0_15_11) l_0_15_2) (* (* 2.0 l_0_15_12) l_0_15_3))))
 (let ((?x50335 (+ (+ ?x50331 (* (* 2.0 l_0_15_23) l_0_15_32)) (* (* 2.0 l_0_15_24) l_0_15_33))))
 (= (- (- (+ (+ ?x50335 ?x15686) ?x49675) ?x49642) ?x49645) 0.0))))))))
(assert
 (let ((?x49645 (* l_0_15_66 l_0_15_66)))
 (let ((?x50368 (* 3.0 ?x49645)))
 (let ((?x49642 (* l_0_15_65 l_0_15_65)))
 (let ((?x50366 (* 3.0 ?x49642)))
 (let ((?x50364 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (let ((?x49633 (* l_0_15_3 l_0_15_3)))
 (let ((?x49634 (* 6.0 ?x49633)))
 (let ((?x49631 (* (* 6.0 l_0_15_24) l_0_15_24)))
 (let ((?x49624 (* (* 6.0 l_0_15_23) l_0_15_23)))
 (let ((?x49613 (* l_0_15_2 l_0_15_2)))
 (let ((?x49614 (* 6.0 ?x49613)))
 (let ((?x50348 (- (+ (* l_0_15_128 l_0_15_128) (* l_0_15_129 l_0_15_129)) (* (* 2.0 l_0_15_16) l_0_15_2))))
 (let ((?x50354 (+ (+ (- ?x50348 (* (* 2.0 l_0_15_17) l_0_15_3)) ?x49614) (* (* 2.0 l_0_15_23) l_0_15_37))))
 (let ((?x50359 (+ (- (+ (- ?x50354 ?x49624) (* (* 2.0 l_0_15_24) l_0_15_38)) ?x49631) ?x49634)))
 (let ((?x50369 (+ (+ (- (- ?x50359 (* (* 3.0 l_0_15_44) l_0_15_44)) ?x50364) ?x50366) ?x50368)))
 (= ?x50369 0.0)))))))))))))))))
(assert
 (let ((?x50407 (* l_0_15_6 l_0_15_6)))
 (let ((?x50405 (* l_0_15_5 l_0_15_5)))
 (let ((?x50403 (* l_0_15_4 l_0_15_4)))
 (let ((?x50401 (* l_0_15_27 l_0_15_27)))
 (let ((?x50399 (* l_0_15_26 l_0_15_26)))
 (let ((?x50397 (* l_0_15_25 l_0_15_25)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50395 (* ?x50394 l_0_15_131)))
 (let ((?x50402 (+ (+ (+ (- (* (* (- 2.0) l_0_15_128) l_0_15_130) ?x50395) ?x50397) ?x50399) ?x50401)))
 (= (- (- (- ?x50402 ?x50403) ?x50405) ?x50407) 0.0)))))))))))
(assert
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50467 (* ?x50466 l_0_15_89)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50464 (* ?x50463 l_0_15_88)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50443 (* ?x50442 l_0_15_173)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50440 (* ?x50439 l_0_15_172)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50437 (* ?x50436 l_0_15_152)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50434 (* ?x50433 l_0_15_151)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50431 (* ?x50394 l_0_15_134)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50429 (* ?x50428 l_0_15_133)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50426 (* ?x50425 l_0_15_110)))
 (let ((?x50435 (- (- (- (+ (* (* 2.0 l_0_15_107) l_0_15_109) ?x50426) ?x50429) ?x50431) ?x50434)))
 (let ((?x50447 (+ (+ (+ (- ?x50435 ?x50437) ?x50440) ?x50443) (* (* 2.0 l_0_15_25) l_0_15_28))))
 (let ((?x50453 (+ (+ ?x50447 (* (* 2.0 l_0_15_26) l_0_15_29)) (* (* 2.0 l_0_15_27) l_0_15_30))))
 (let ((?x50459 (- (- ?x50453 (* (* 2.0 l_0_15_4) l_0_15_7)) (* (* 2.0 l_0_15_5) l_0_15_8))))
 (= (- (- (- ?x50459 (* (* 2.0 l_0_15_6) l_0_15_9)) ?x50464) ?x50467) 0.0))))))))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50025 (* ?x49730 l_0_15_68)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50023 (* ?x49727 l_0_15_67)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50021 (* ?x49722 l_0_15_47)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50019 (* ?x49719 l_0_15_46)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50497 (* ?x50394 l_0_15_138)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50495 (* ?x50428 l_0_15_137)))
 (let ((?x50494 (- (* (* (- 2.0) l_0_15_11) l_0_15_4) (* (* 2.0 l_0_15_12) l_0_15_5))))
 (let ((?x50503 (+ (- (- (- ?x50494 ?x50495) ?x50497) (* (* 2.0 l_0_15_13) l_0_15_6)) (* (* 2.0 l_0_15_25) l_0_15_32))))
 (let ((?x50507 (+ (+ ?x50503 (* (* 2.0 l_0_15_26) l_0_15_33)) (* (* 2.0 l_0_15_27) l_0_15_34))))
 (= (- (- (+ (+ ?x50507 ?x50019) ?x50021) ?x50023) ?x50025) 0.0)))))))))))))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50564 (* ?x50563 l_0_15_68)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50561 (* ?x50560 l_0_15_67)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50558 (* ?x50557 l_0_15_47)))
 (let ((?x50016 (* 12.0 l_0_15_3)))
 (let ((?x50017 (* ?x50016 l_0_15_5)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50014 (* ?x49714 l_0_15_26)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50008 (* ?x49705 l_0_15_25)))
 (let ((?x49999 (* 12.0 l_0_15_2)))
 (let ((?x50000 (* ?x49999 l_0_15_4)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50535 (* ?x50394 l_0_15_143)))
 (let ((?x50395 (* ?x50394 l_0_15_131)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50532 (* ?x50428 l_0_15_142)))
 (let ((?x50538 (- (- (+ (- (* ?x50428 l_0_15_130) ?x50532) ?x50395) ?x50535) (* (* 2.0 l_0_15_16) l_0_15_4))))
 (let ((?x50543 (- (- ?x50538 (* (* 2.0 l_0_15_17) l_0_15_5)) (* (* 2.0 l_0_15_18) l_0_15_6))))
 (let ((?x50548 (+ (- (- (+ ?x50543 ?x50000) ?x50008) ?x50014) (* (* 2.0 l_0_15_25) l_0_15_37))))
 (let ((?x50552 (+ (+ ?x50548 (* (* 2.0 l_0_15_26) l_0_15_38)) (* (* 2.0 l_0_15_27) l_0_15_39))))
 (let ((?x50562 (+ (- (- (+ ?x50552 ?x50017) (* (* 6.0 l_0_15_44) l_0_15_46)) ?x50558) ?x50561)))
 (= (+ ?x50562 ?x50564) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50640 (* l_0_15_9 l_0_15_9)))
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50638 (* ?x50466 l_0_15_92)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50636 (* ?x50463 l_0_15_91)))
 (let ((?x50634 (* l_0_15_8 l_0_15_8)))
 (let ((?x50632 (* l_0_15_7 l_0_15_7)))
 (let ((?x50630 (* l_0_15_31 l_0_15_31)))
 (let ((?x50628 (* l_0_15_30 l_0_15_30)))
 (let ((?x50626 (* l_0_15_29 l_0_15_29)))
 (let ((?x50624 (* l_0_15_28 l_0_15_28)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50622 (* ?x50442 l_0_15_176)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50620 (* ?x50439 l_0_15_175)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50618 (* ?x50436 l_0_15_155)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50616 (* ?x50433 l_0_15_154)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50614 (* ?x50425 l_0_15_113)))
 (let ((?x50613 (+ (* (- l_0_15_10) l_0_15_10) (* (* 2.0 l_0_15_107) l_0_15_112))))
 (let ((?x50627 (+ (+ (+ (+ (- (- (+ ?x50613 ?x50614) ?x50616) ?x50618) ?x50620) ?x50622) ?x50624) ?x50626)))
 (let ((?x50641 (- (- (- (- (- (+ (+ ?x50627 ?x50628) ?x50630) ?x50632) ?x50634) ?x50636) ?x50638) ?x50640)))
 (= ?x50641 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50678 (* ?x50466 l_0_15_96)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50676 (* ?x50463 l_0_15_95)))
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50092 (* ?x49730 l_0_15_71)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50090 (* ?x49727 l_0_15_70)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50088 (* ?x49722 l_0_15_50)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50086 (* ?x49719 l_0_15_49)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x16741 (* ?x50442 l_0_15_180)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x16800 (* ?x50439 l_0_15_179)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x17027 (* ?x50436 l_0_15_159)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x29886 (* ?x50433 l_0_15_158)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x40183 (* ?x50425 l_0_15_117)))
 (let ((?x40186 (+ (* (* (- 2.0) l_0_15_10) l_0_15_14) (* (* 2.0 l_0_15_107) l_0_15_116))))
 (let ((?x29813 (- (- (+ ?x40186 ?x40183) (* (* 2.0 l_0_15_11) l_0_15_7)) (* (* 2.0 l_0_15_12) l_0_15_8))))
 (let ((?x40171 (+ (- (- (- ?x29813 (* (* 2.0 l_0_15_13) l_0_15_9)) ?x29886) ?x17027) ?x16800)))
 (let ((?x50665 (+ (+ (+ ?x40171 ?x16741) (* (* 2.0 l_0_15_28) l_0_15_32)) (* (* 2.0 l_0_15_29) l_0_15_33))))
 (let ((?x50671 (+ (+ ?x50665 (* (* 2.0 l_0_15_30) l_0_15_34)) (* (* 2.0 l_0_15_31) l_0_15_35))))
 (= (- (- (- (- (+ (+ ?x50671 ?x50086) ?x50088) ?x50090) ?x50092) ?x50676) ?x50678) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50778 (* ?x50563 l_0_15_71)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50776 (* ?x50560 l_0_15_70)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50774 (* ?x50557 l_0_15_50)))
 (let ((?x50016 (* 12.0 l_0_15_3)))
 (let ((?x50084 (* ?x50016 l_0_15_8)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50082 (* ?x49714 l_0_15_29)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50076 (* ?x49705 l_0_15_28)))
 (let ((?x49999 (* 12.0 l_0_15_2)))
 (let ((?x50068 (* ?x49999 l_0_15_7)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50756 (* ?x50442 l_0_15_185)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50754 (* ?x50439 l_0_15_184)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50748 (* ?x50436 l_0_15_164)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50746 (* ?x50433 l_0_15_163)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50431 (* ?x50394 l_0_15_134)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50429 (* ?x50428 l_0_15_133)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50742 (* ?x50425 l_0_15_122)))
 (let ((?x16671 (* 2.0 l_0_15_107)))
 (let ((?x50740 (* ?x16671 l_0_15_121)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x50738 (* ?x50737 l_0_15_87)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x50735 (* ?x50734 l_0_15_86)))
 (let ((?x50743 (+ (+ (- (- (* (* (- 2.0) l_0_15_10) l_0_15_19) ?x50735) ?x50738) ?x50740) ?x50742)))
 (let ((?x50751 (- (- (- (+ (+ ?x50743 ?x50429) ?x50431) ?x50746) ?x50748) (* (* 2.0 l_0_15_16) l_0_15_7))))
 (let ((?x50759 (- (+ (+ (- ?x50751 (* (* 2.0 l_0_15_17) l_0_15_8)) ?x50754) ?x50756) (* (* 2.0 l_0_15_18) l_0_15_9))))
 (let ((?x50764 (+ (- (- (+ ?x50759 ?x50068) ?x50076) ?x50082) (* (* 2.0 l_0_15_28) l_0_15_37))))
 (let ((?x50769 (+ (+ (+ ?x50764 (* (* 2.0 l_0_15_29) l_0_15_38)) ?x50084) (* (* 2.0 l_0_15_30) l_0_15_39))))
 (let ((?x50773 (- (+ ?x50769 (* (* 2.0 l_0_15_31) l_0_15_40)) (* (* 6.0 l_0_15_44) l_0_15_49))))
 (= (+ (+ (- ?x50773 ?x50774) ?x50776) ?x50778) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x49731 (* ?x49730 l_0_15_75)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x49728 (* ?x49727 l_0_15_74)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x49723 (* ?x49722 l_0_15_54)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x49720 (* ?x49719 l_0_15_53)))
 (let ((?x39786 (* l_0_15_36 l_0_15_36)))
 (let ((?x39784 (* l_0_15_35 l_0_15_35)))
 (let ((?x16087 (* l_0_15_34 l_0_15_34)))
 (let ((?x16050 (* l_0_15_33 l_0_15_33)))
 (let ((?x16047 (* l_0_15_32 l_0_15_32)))
 (let ((?x49866 (* l_0_15_15 l_0_15_15)))
 (let ((?x49863 (* l_0_15_14 l_0_15_14)))
 (let ((?x49860 (* l_0_15_13 l_0_15_13)))
 (let ((?x50822 (- (- (* (- l_0_15_11) l_0_15_11) (* l_0_15_12 l_0_15_12)) ?x49860)))
 (let ((?x50829 (+ (+ (+ (+ (+ (- (- ?x50822 ?x49863) ?x49866) ?x16047) ?x16050) ?x16087) ?x39784) ?x39786)))
 (= (- (- (+ (+ ?x50829 ?x49720) ?x49723) ?x49728) ?x49731) 0.0))))))))))))))))))))
(assert
 (let ((?x49730 (* 2.0 l_0_15_66)))
 (let ((?x50211 (* ?x49730 l_0_15_80)))
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50882 (* ?x50563 l_0_15_75)))
 (let ((?x49727 (* 2.0 l_0_15_65)))
 (let ((?x50209 (* ?x49727 l_0_15_79)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50879 (* ?x50560 l_0_15_74)))
 (let ((?x49722 (* 2.0 l_0_15_45)))
 (let ((?x50205 (* ?x49722 l_0_15_59)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50876 (* ?x50557 l_0_15_54)))
 (let ((?x49719 (* 2.0 l_0_15_44)))
 (let ((?x50203 (* ?x49719 l_0_15_58)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x49715 (* ?x49714 l_0_15_33)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x49706 (* ?x49705 l_0_15_32)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50497 (* ?x50394 l_0_15_138)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50495 (* ?x50428 l_0_15_137)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x49689 (* ?x49688 l_0_15_3)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x49686 (* ?x49685 l_0_15_2)))
 (let ((?x50844 (- (+ (* (* (- 2.0) l_0_15_11) l_0_15_16) ?x49686) (* (* 2.0 l_0_15_12) l_0_15_17))))
 (let ((?x50849 (- (+ (+ (+ ?x50844 ?x49689) ?x50495) ?x50497) (* (* 2.0 l_0_15_13) l_0_15_18))))
 (let ((?x50855 (- (- ?x50849 (* (* 2.0 l_0_15_14) l_0_15_19)) (* (* 2.0 l_0_15_15) l_0_15_20))))
 (let ((?x50863 (+ (+ (- (- ?x50855 ?x49706) ?x49715) (* (* 2.0 l_0_15_32) l_0_15_37)) (* (* 2.0 l_0_15_33) l_0_15_38))))
 (let ((?x50869 (+ (+ ?x50863 (* (* 2.0 l_0_15_34) l_0_15_39)) (* (* 2.0 l_0_15_35) l_0_15_40))))
 (let ((?x50874 (- (+ ?x50869 (* (* 2.0 l_0_15_36) l_0_15_41)) (* (* 6.0 l_0_15_44) l_0_15_53))))
 (let ((?x50884 (- (+ (- (+ (+ (- (+ ?x50874 ?x50203) ?x50876) ?x50205) ?x50879) ?x50209) ?x50882) ?x50211)))
 (= ?x50884 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50960 (* ?x50563 l_0_15_80)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50958 (* ?x50560 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x50207 (* ?x49425 l_0_15_65)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50955 (* ?x50557 l_0_15_59)))
 (let ((?x50554 (* 6.0 l_0_15_44)))
 (let ((?x50953 (* ?x50554 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x50201 (* ?x49401 l_0_15_44)))
 (let ((?x29153 (* l_0_15_42 l_0_15_42)))
 (let ((?x39313 (* l_0_15_41 l_0_15_41)))
 (let ((?x29149 (* l_0_15_40 l_0_15_40)))
 (let ((?x39307 (* l_0_15_39 l_0_15_39)))
 (let ((?x15077 (* l_0_15_38 l_0_15_38)))
 (let ((?x29111 (* l_0_15_37 l_0_15_37)))
 (let ((?x49714 (* 12.0 l_0_15_24)))
 (let ((?x50199 (* ?x49714 l_0_15_38)))
 (let ((?x49705 (* 12.0 l_0_15_23)))
 (let ((?x50193 (* ?x49705 l_0_15_37)))
 (let ((?x49351 (* l_0_15_21 l_0_15_21)))
 (let ((?x49338 (* l_0_15_20 l_0_15_20)))
 (let ((?x49335 (* l_0_15_19 l_0_15_19)))
 (let ((?x49332 (* l_0_15_18 l_0_15_18)))
 (let ((?x49329 (* l_0_15_17 l_0_15_17)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x50180 (* ?x50179 l_0_15_3)))
 (let ((?x49326 (* l_0_15_16 l_0_15_16)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x50177 (* ?x50176 l_0_15_2)))
 (let ((?x50394 (* 2.0 l_0_15_129)))
 (let ((?x50535 (* ?x50394 l_0_15_143)))
 (let ((?x50428 (* 2.0 l_0_15_128)))
 (let ((?x50532 (* ?x50428 l_0_15_142)))
 (let ((?x50941 (- (- (- (+ (- (+ (+ ?x50532 ?x50535) ?x50177) ?x49326) ?x50180) ?x49329) ?x49332) ?x49335)))
 (let ((?x50948 (+ (+ (+ (- (- (- (- ?x50941 ?x49338) ?x49351) ?x50193) ?x50199) ?x29111) ?x15077) ?x39307)))
 (let ((?x50957 (+ (- (- (- (+ (+ (+ ?x50948 ?x29149) ?x39313) ?x29153) ?x50201) ?x50953) ?x50955) ?x50207)))
 (= (+ (+ ?x50957 ?x50958) ?x50960) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x51054 (* ?x51053 l_0_15_81)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x51051 (* ?x51050 l_0_15_80)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x51048 (* ?x51047 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51045 (* ?x49425 l_0_15_67)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x51043 (* ?x51042 l_0_15_60)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x51040 (* ?x51039 l_0_15_59)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x51037 (* ?x51036 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51034 (* ?x49401 l_0_15_46)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51032 (* ?x51031 l_0_15_39)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51029 (* ?x51028 l_0_15_38)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51026 (* ?x51025 l_0_15_37)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x51014 (* ?x49356 l_0_15_25)))
 (let ((?x50993 (* 12.0 l_0_15_18)))
 (let ((?x50994 (* ?x50993 l_0_15_6)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x50991 (* ?x50179 l_0_15_5)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x50989 (* ?x50176 l_0_15_4)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x49324 (* ?x49323 l_0_15_142)))
 (let ((?x50988 (- (+ (* (* 12.0 l_0_15_1) l_0_15_4) (* ?x49323 l_0_15_130)) ?x49324)))
 (let ((?x50998 (- (+ (+ (+ ?x50988 ?x50989) ?x50991) ?x50994) (* (* 2.0 l_0_15_193) l_0_15_205))))
 (let ((?x51004 (- (- ?x50998 (* (* 2.0 l_0_15_194) l_0_15_206)) (* (* 2.0 l_0_15_195) l_0_15_207))))
 (let ((?x51010 (- (- ?x51004 (* (* 2.0 l_0_15_214) l_0_15_226)) (* (* 2.0 l_0_15_215) l_0_15_227))))
 (let ((?x51018 (- (- (- ?x51010 (* (* 2.0 l_0_15_216) l_0_15_228)) ?x51014) (* (* 2.0 l_0_15_235) l_0_15_247))))
 (let ((?x51024 (- (- ?x51018 (* (* 2.0 l_0_15_236) l_0_15_248)) (* (* 2.0 l_0_15_237) l_0_15_249))))
 (let ((?x51044 (- (- (- (- (- (- (- ?x51024 ?x51026) ?x51029) ?x51032) ?x51034) ?x51037) ?x51040) ?x51043)))
 (= (+ (+ (+ (+ ?x51044 ?x51045) ?x51048) ?x51051) ?x51054) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51225 (* 2.0 l_0_15_73)))
 (let ((?x51226 (* ?x51225 l_0_15_82)))
 (let ((?x51222 (* 2.0 l_0_15_72)))
 (let ((?x51223 (* ?x51222 l_0_15_81)))
 (let ((?x51219 (* 2.0 l_0_15_71)))
 (let ((?x51220 (* ?x51219 l_0_15_80)))
 (let ((?x51216 (* 2.0 l_0_15_70)))
 (let ((?x51217 (* ?x51216 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51214 (* ?x49425 l_0_15_70)))
 (let ((?x51211 (* 2.0 l_0_15_52)))
 (let ((?x51212 (* ?x51211 l_0_15_61)))
 (let ((?x51208 (* 2.0 l_0_15_51)))
 (let ((?x51209 (* ?x51208 l_0_15_60)))
 (let ((?x51205 (* 2.0 l_0_15_50)))
 (let ((?x51206 (* ?x51205 l_0_15_59)))
 (let ((?x51202 (* 2.0 l_0_15_49)))
 (let ((?x51203 (* ?x51202 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51200 (* ?x49401 l_0_15_49)))
 (let ((?x51197 (* 12.0 l_0_15_31)))
 (let ((?x51198 (* ?x51197 l_0_15_40)))
 (let ((?x51194 (* 12.0 l_0_15_30)))
 (let ((?x51195 (* ?x51194 l_0_15_39)))
 (let ((?x51191 (* 12.0 l_0_15_29)))
 (let ((?x51192 (* ?x51191 l_0_15_38)))
 (let ((?x51188 (* 12.0 l_0_15_28)))
 (let ((?x51189 (* ?x51188 l_0_15_37)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x51171 (* ?x49356 l_0_15_28)))
 (let ((?x50993 (* 12.0 l_0_15_18)))
 (let ((?x51148 (* ?x50993 l_0_15_9)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x51146 (* ?x50179 l_0_15_8)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x51144 (* ?x50061 l_0_15_184)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x51142 (* ?x50176 l_0_15_7)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x51140 (* ?x50058 l_0_15_163)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x51138 (* ?x49323 l_0_15_133)))
 (let ((?x39891 (* 2.0 l_0_15_106)))
 (let ((?x51136 (* ?x39891 l_0_15_121)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x51123 (* ?x50734 l_0_15_85)))
 (let ((?x51118 (* 12.0 l_0_15_10)))
 (let ((?x51120 (* ?x51118 l_0_15_19)))
 (let ((?x49321 (* 12.0 l_0_15_1)))
 (let ((?x30099 (* ?x49321 l_0_15_7)))
 (let ((?x51145 (+ (+ (- (+ (+ (- (+ ?x30099 ?x51120) ?x51123) ?x51136) ?x51138) ?x51140) ?x51142) ?x51144)))
 (let ((?x51155 (- (- (+ (+ ?x51145 ?x51146) ?x51148) (* (* 2.0 l_0_15_196) l_0_15_205)) (* (* 2.0 l_0_15_197) l_0_15_206))))
 (let ((?x51161 (- (- ?x51155 (* (* 2.0 l_0_15_198) l_0_15_207)) (* (* 2.0 l_0_15_199) l_0_15_208))))
 (let ((?x51167 (- (- ?x51161 (* (* 2.0 l_0_15_217) l_0_15_226)) (* (* 2.0 l_0_15_218) l_0_15_227))))
 (let ((?x51175 (- (- (- ?x51167 (* (* 2.0 l_0_15_219) l_0_15_228)) ?x51171) (* (* 2.0 l_0_15_220) l_0_15_229))))
 (let ((?x51181 (- (- ?x51175 (* (* 2.0 l_0_15_238) l_0_15_247)) (* (* 2.0 l_0_15_239) l_0_15_248))))
 (let ((?x51187 (- (- ?x51181 (* (* 2.0 l_0_15_240) l_0_15_249)) (* (* 2.0 l_0_15_241) l_0_15_250))))
 (let ((?x51207 (- (- (- (- (- (- (- ?x51187 ?x51189) ?x51192) ?x51195) ?x51198) ?x51200) ?x51203) ?x51206)))
 (let ((?x51227 (+ (+ (+ (+ (+ (- (- ?x51207 ?x51209) ?x51212) ?x51214) ?x51217) ?x51220) ?x51223) ?x51226)))
 (= ?x51227 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51454 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x51451 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x51448 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x51445 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x51442 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x49556 (* ?x49555 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51438 (* ?x49425 l_0_15_74)))
 (let ((?x51436 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x51433 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x51430 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x51427 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x51424 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x49552 (* ?x49551 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51420 (* ?x49401 l_0_15_53)))
 (let ((?x51418 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51415 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51412 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51409 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51406 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x49822 (* ?x49356 l_0_15_32)))
 (let ((?x51357 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x51354 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x51351 (* ?x51350 l_0_15_18)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x51333 (* ?x49323 l_0_15_137)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x51329 (* ?x49688 l_0_15_17)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x51325 (* ?x49685 l_0_15_16)))
 (let ((?x49321 (* 12.0 l_0_15_1)))
 (let ((?x37129 (* ?x49321 l_0_15_11)))
 (let ((?x51361 (- (+ (+ (+ (+ (+ (+ ?x37129 ?x51325) ?x51329) ?x51333) ?x51351) ?x51354) ?x51357) (* (* 2.0 l_0_15_200) l_0_15_205))))
 (let ((?x51367 (- (- ?x51361 (* (* 2.0 l_0_15_201) l_0_15_206)) (* (* 2.0 l_0_15_202) l_0_15_207))))
 (let ((?x51373 (- (- ?x51367 (* (* 2.0 l_0_15_203) l_0_15_208)) (* (* 2.0 l_0_15_204) l_0_15_209))))
 (let ((?x51380 (- (- (- ?x51373 ?x49822) (* (* 2.0 l_0_15_221) l_0_15_226)) (* (* 2.0 l_0_15_222) l_0_15_227))))
 (let ((?x51386 (- (- ?x51380 (* (* 2.0 l_0_15_223) l_0_15_228)) (* (* 2.0 l_0_15_224) l_0_15_229))))
 (let ((?x51392 (- (- ?x51386 (* (* 2.0 l_0_15_225) l_0_15_230)) (* (* 2.0 l_0_15_242) l_0_15_247))))
 (let ((?x51398 (- (- ?x51392 (* (* 2.0 l_0_15_243) l_0_15_248)) (* (* 2.0 l_0_15_244) l_0_15_249))))
 (let ((?x51404 (- (- ?x51398 (* (* 2.0 l_0_15_245) l_0_15_250)) (* (* 2.0 l_0_15_246) l_0_15_251))))
 (let ((?x51422 (+ (- (- (- (- (- (- ?x51404 ?x51406) ?x51409) ?x51412) ?x51415) ?x51418) ?x51420) ?x49552)))
 (let ((?x51440 (- (+ (- (- (- (- (- ?x51422 ?x51424) ?x51427) ?x51430) ?x51433) ?x51436) ?x51438) ?x49556)))
 (= (+ (+ (+ (+ (+ ?x51440 ?x51442) ?x51445) ?x51448) ?x51451) ?x51454) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51607 (* l_0_15_69 l_0_15_69)))
 (let ((?x51608 (* 3.0 ?x51607)))
 (let ((?x51604 (* l_0_15_68 l_0_15_68)))
 (let ((?x51605 (* 3.0 ?x51604)))
 (let ((?x51601 (* l_0_15_67 l_0_15_67)))
 (let ((?x51602 (* 3.0 ?x51601)))
 (let ((?x50407 (* l_0_15_6 l_0_15_6)))
 (let ((?x51599 (* 6.0 ?x50407)))
 (let ((?x50405 (* l_0_15_5 l_0_15_5)))
 (let ((?x51597 (* 6.0 ?x50405)))
 (let ((?x51595 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x51592 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x50403 (* l_0_15_4 l_0_15_4)))
 (let ((?x51586 (* 6.0 ?x50403)))
 (let ((?x51584 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x51581 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x51578 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x51575 (* l_0_15_132 l_0_15_132)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51573 (* ?x51572 l_0_15_144)))
 (let ((?x51570 (* l_0_15_131 l_0_15_131)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51554 (* ?x51553 l_0_15_143)))
 (let ((?x51549 (* l_0_15_130 l_0_15_130)))
 (let ((?x51574 (- (+ (- (+ (* (* (- 2.0) l_0_15_130) l_0_15_142) ?x51549) ?x51554) ?x51570) ?x51573)))
 (let ((?x51590 (- (+ (- (- (- (+ ?x51574 ?x51575) ?x51578) ?x51581) ?x51584) ?x51586) (* (* 3.0 l_0_15_46) l_0_15_46))))
 (let ((?x51609 (+ (+ (+ (+ (+ (- (- ?x51590 ?x51592) ?x51595) ?x51597) ?x51599) ?x51602) ?x51605) ?x51608)))
 (= ?x51609 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51731 (* ?x51730 l_0_15_72)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51728 (* ?x51727 l_0_15_71)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51725 (* ?x51724 l_0_15_70)))
 (let ((?x51722 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x51719 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51716 (* ?x51715 l_0_15_51)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51713 (* ?x51712 l_0_15_50)))
 (let ((?x51707 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51704 (* ?x51031 l_0_15_30)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51702 (* ?x51028 l_0_15_29)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51700 (* ?x51025 l_0_15_28)))
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x51698 (* ?x51697 l_0_15_186)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x51695 (* ?x51694 l_0_15_185)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x51692 (* ?x51691 l_0_15_184)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x51689 (* ?x51688 l_0_15_165)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x51686 (* ?x51685 l_0_15_164)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x51683 (* ?x51682 l_0_15_163)))
 (let ((?x51679 (* 2.0 l_0_15_136)))
 (let ((?x51680 (* ?x51679 l_0_15_145)))
 (let ((?x51676 (* 2.0 l_0_15_135)))
 (let ((?x51677 (* ?x51676 l_0_15_144)))
 (let ((?x51673 (* 2.0 l_0_15_134)))
 (let ((?x51674 (* ?x51673 l_0_15_143)))
 (let ((?x51670 (* 2.0 l_0_15_133)))
 (let ((?x51671 (* ?x51670 l_0_15_142)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51668 (* ?x51572 l_0_15_135)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51666 (* ?x51553 l_0_15_134)))
 (let ((?x51663 (* 2.0 l_0_15_130)))
 (let ((?x51664 (* ?x51663 l_0_15_133)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x51661 (* ?x51660 l_0_15_123)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x51658 (* ?x51657 l_0_15_122)))
 (let ((?x51654 (* 2.0 l_0_15_109)))
 (let ((?x51655 (* ?x51654 l_0_15_121)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x51652 (* ?x51651 l_0_15_90)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x51649 (* ?x50737 l_0_15_89)))
 (let ((?x51659 (+ (+ (- (- (* (* (- 2.0) l_0_15_100) l_0_15_88) ?x51649) ?x51652) ?x51655) ?x51658)))
 (let ((?x51678 (- (- (- (+ (+ (+ (+ ?x51659 ?x51661) ?x51664) ?x51666) ?x51668) ?x51671) ?x51674) ?x51677)))
 (let ((?x51699 (+ (+ (+ (- (- (- (- ?x51678 ?x51680) ?x51683) ?x51686) ?x51689) ?x51692) ?x51695) ?x51698)))
 (let ((?x51711 (- (+ (- (- (- ?x51699 ?x51700) ?x51702) ?x51704) ?x51707) (* (* 6.0 l_0_15_46) l_0_15_49))))
 (let ((?x51732 (+ (+ (+ (+ (+ (- (- ?x51711 ?x51713) ?x51716) ?x51719) ?x51722) ?x51725) ?x51728) ?x51731)))
 (= ?x51732 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x51054 (* ?x51053 l_0_15_81)))
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51855 (* ?x51730 l_0_15_76)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x51051 (* ?x51050 l_0_15_80)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51852 (* ?x51727 l_0_15_75)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x51048 (* ?x51047 l_0_15_79)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51849 (* ?x51724 l_0_15_74)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x51043 (* ?x51042 l_0_15_60)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51846 (* ?x51715 l_0_15_55)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x51040 (* ?x51039 l_0_15_59)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51843 (* ?x51712 l_0_15_54)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x51037 (* ?x51036 l_0_15_58)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51838 (* ?x51031 l_0_15_34)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51836 (* ?x51028 l_0_15_33)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51834 (* ?x51025 l_0_15_32)))
 (let ((?x51832 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51829 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51826 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51823 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51820 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51817 (* ?x51572 l_0_15_139)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51815 (* ?x51553 l_0_15_138)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x51811 (* ?x51350 l_0_15_6)))
 (let ((?x51810 (+ (* (* 12.0 l_0_15_11) l_0_15_4) (* (* 12.0 l_0_15_12) l_0_15_5))))
 (let ((?x51818 (+ (+ (+ (+ ?x51810 ?x51811) (* (* 2.0 l_0_15_130) l_0_15_137)) ?x51815) ?x51817)))
 (let ((?x51837 (- (- (- (- (- (- (- ?x51818 ?x51820) ?x51823) ?x51826) ?x51829) ?x51832) ?x51834) ?x51836)))
 (let ((?x51844 (- (+ (- (- ?x51837 ?x51838) (* (* 6.0 l_0_15_46) l_0_15_53)) ?x51037) ?x51843)))
 (let ((?x51854 (- (+ (- (+ (+ (- (+ ?x51844 ?x51040) ?x51846) ?x51043) ?x51849) ?x51048) ?x51852) ?x51051)))
 (= (- (+ ?x51854 ?x51855) ?x51054) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51948 (* ?x51730 l_0_15_81)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51946 (* ?x51727 l_0_15_80)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51944 (* ?x51724 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51045 (* ?x49425 l_0_15_67)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51941 (* ?x51715 l_0_15_60)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51939 (* ?x51712 l_0_15_59)))
 (let ((?x51709 (* 6.0 l_0_15_46)))
 (let ((?x51937 (* ?x51709 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51034 (* ?x49401 l_0_15_46)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51032 (* ?x51031 l_0_15_39)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51029 (* ?x51028 l_0_15_38)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51026 (* ?x51025 l_0_15_37)))
 (let ((?x50993 (* 12.0 l_0_15_18)))
 (let ((?x50994 (* ?x50993 l_0_15_6)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x50991 (* ?x50179 l_0_15_5)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x50989 (* ?x50176 l_0_15_4)))
 (let ((?x51928 (* l_0_15_147 l_0_15_147)))
 (let ((?x51926 (* l_0_15_146 l_0_15_146)))
 (let ((?x51924 (* l_0_15_145 l_0_15_145)))
 (let ((?x51922 (* l_0_15_144 l_0_15_144)))
 (let ((?x51920 (* l_0_15_143 l_0_15_143)))
 (let ((?x51918 (* l_0_15_142 l_0_15_142)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51573 (* ?x51572 l_0_15_144)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51554 (* ?x51553 l_0_15_143)))
 (let ((?x51921 (- (- (+ (+ (* (* 2.0 l_0_15_130) l_0_15_142) ?x51554) ?x51573) ?x51918) ?x51920)))
 (let ((?x51932 (+ (+ (+ (- (- (- (- ?x51921 ?x51922) ?x51924) ?x51926) ?x51928) ?x50989) ?x50991) ?x50994)))
 (let ((?x51942 (- (- (- (- (- (- (- ?x51932 ?x51026) ?x51029) ?x51032) ?x51034) ?x51937) ?x51939) ?x51941)))
 (= (+ (+ (+ (+ ?x51942 ?x51045) ?x51944) ?x51946) ?x51948) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50640 (* l_0_15_9 l_0_15_9)))
 (let ((?x52075 (* 6.0 ?x50640)))
 (let ((?x50634 (* l_0_15_8 l_0_15_8)))
 (let ((?x52073 (* 6.0 ?x50634)))
 (let ((?x52070 (* l_0_15_73 l_0_15_73)))
 (let ((?x52071 (* 3.0 ?x52070)))
 (let ((?x52067 (* l_0_15_72 l_0_15_72)))
 (let ((?x52068 (* 3.0 ?x52067)))
 (let ((?x52064 (* l_0_15_71 l_0_15_71)))
 (let ((?x52065 (* 3.0 ?x52064)))
 (let ((?x52061 (* l_0_15_70 l_0_15_70)))
 (let ((?x52062 (* 3.0 ?x52061)))
 (let ((?x50632 (* l_0_15_7 l_0_15_7)))
 (let ((?x52059 (* 6.0 ?x50632)))
 (let ((?x52057 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x52054 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x52051 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x52045 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x52042 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x52039 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x52036 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x52032 (* 2.0 l_0_15_178)))
 (let ((?x52033 (* ?x52032 l_0_15_187)))
 (let ((?x52029 (* 2.0 l_0_15_177)))
 (let ((?x52030 (* ?x52029 l_0_15_186)))
 (let ((?x52026 (* 2.0 l_0_15_176)))
 (let ((?x52027 (* ?x52026 l_0_15_185)))
 (let ((?x52023 (* 2.0 l_0_15_175)))
 (let ((?x52024 (* ?x52023 l_0_15_184)))
 (let ((?x52020 (* 2.0 l_0_15_157)))
 (let ((?x52021 (* ?x52020 l_0_15_166)))
 (let ((?x52017 (* 2.0 l_0_15_156)))
 (let ((?x52018 (* ?x52017 l_0_15_165)))
 (let ((?x52014 (* 2.0 l_0_15_155)))
 (let ((?x52015 (* ?x52014 l_0_15_164)))
 (let ((?x52011 (* 2.0 l_0_15_154)))
 (let ((?x52012 (* ?x52011 l_0_15_163)))
 (let ((?x52009 (* l_0_15_136 l_0_15_136)))
 (let ((?x52007 (* l_0_15_135 l_0_15_135)))
 (let ((?x52005 (* l_0_15_134 l_0_15_134)))
 (let ((?x52003 (* l_0_15_133 l_0_15_133)))
 (let ((?x52000 (* 2.0 l_0_15_115)))
 (let ((?x52001 (* ?x52000 l_0_15_124)))
 (let ((?x51997 (* 2.0 l_0_15_114)))
 (let ((?x51998 (* ?x51997 l_0_15_123)))
 (let ((?x51994 (* 2.0 l_0_15_113)))
 (let ((?x51995 (* ?x51994 l_0_15_122)))
 (let ((?x51991 (* 2.0 l_0_15_112)))
 (let ((?x51992 (* ?x51991 l_0_15_121)))
 (let ((?x51988 (* 2.0 l_0_15_103)))
 (let ((?x51989 (* ?x51988 l_0_15_94)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x51986 (* ?x51651 l_0_15_93)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x51984 (* ?x50737 l_0_15_92)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x51982 (* ?x50734 l_0_15_91)))
 (let ((?x50644 (* l_0_15_10 l_0_15_10)))
 (let ((?x51981 (* 6.0 ?x50644)))
 (let ((?x51999 (+ (+ (+ (- (- (- (- ?x51981 ?x51982) ?x51984) ?x51986) ?x51989) ?x51992) ?x51995) ?x51998)))
 (let ((?x52016 (- (- (+ (+ (+ (+ (+ ?x51999 ?x52001) ?x52003) ?x52005) ?x52007) ?x52009) ?x52012) ?x52015)))
 (let ((?x52037 (- (+ (+ (+ (+ (- (- ?x52016 ?x52018) ?x52021) ?x52024) ?x52027) ?x52030) ?x52033) ?x52036)))
 (let ((?x52049 (- (- (- (- ?x52037 ?x52039) ?x52042) ?x52045) (* (* 3.0 l_0_15_49) l_0_15_49))))
 (let ((?x52069 (+ (+ (+ (+ (- (- (- ?x52049 ?x52051) ?x52054) ?x52057) ?x52059) ?x52062) ?x52065) ?x52068)))
 (= (+ (+ (+ ?x52069 ?x52071) ?x52073) ?x52075) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51225 (* 2.0 l_0_15_73)))
 (let ((?x51226 (* ?x51225 l_0_15_82)))
 (let ((?x52268 (* 6.0 l_0_15_73)))
 (let ((?x52269 (* ?x52268 l_0_15_77)))
 (let ((?x51222 (* 2.0 l_0_15_72)))
 (let ((?x51223 (* ?x51222 l_0_15_81)))
 (let ((?x52264 (* 6.0 l_0_15_72)))
 (let ((?x52265 (* ?x52264 l_0_15_76)))
 (let ((?x51219 (* 2.0 l_0_15_71)))
 (let ((?x51220 (* ?x51219 l_0_15_80)))
 (let ((?x52260 (* 6.0 l_0_15_71)))
 (let ((?x52261 (* ?x52260 l_0_15_75)))
 (let ((?x51216 (* 2.0 l_0_15_70)))
 (let ((?x51217 (* ?x51216 l_0_15_79)))
 (let ((?x52256 (* 6.0 l_0_15_70)))
 (let ((?x52257 (* ?x52256 l_0_15_74)))
 (let ((?x51211 (* 2.0 l_0_15_52)))
 (let ((?x51212 (* ?x51211 l_0_15_61)))
 (let ((?x52252 (* 6.0 l_0_15_52)))
 (let ((?x52253 (* ?x52252 l_0_15_56)))
 (let ((?x51208 (* 2.0 l_0_15_51)))
 (let ((?x51209 (* ?x51208 l_0_15_60)))
 (let ((?x52248 (* 6.0 l_0_15_51)))
 (let ((?x52249 (* ?x52248 l_0_15_55)))
 (let ((?x51205 (* 2.0 l_0_15_50)))
 (let ((?x51206 (* ?x51205 l_0_15_59)))
 (let ((?x52244 (* 6.0 l_0_15_50)))
 (let ((?x52245 (* ?x52244 l_0_15_54)))
 (let ((?x51202 (* 2.0 l_0_15_49)))
 (let ((?x51203 (* ?x51202 l_0_15_58)))
 (let ((?x51197 (* 12.0 l_0_15_31)))
 (let ((?x52238 (* ?x51197 l_0_15_35)))
 (let ((?x51194 (* 12.0 l_0_15_30)))
 (let ((?x52236 (* ?x51194 l_0_15_34)))
 (let ((?x51191 (* 12.0 l_0_15_29)))
 (let ((?x52234 (* ?x51191 l_0_15_33)))
 (let ((?x51188 (* 12.0 l_0_15_28)))
 (let ((?x52232 (* ?x51188 l_0_15_32)))
 (let ((?x52230 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x52227 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x52224 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x52221 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x52218 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x52215 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x52212 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x52209 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x52206 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x52203 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x51679 (* 2.0 l_0_15_136)))
 (let ((?x52200 (* ?x51679 l_0_15_140)))
 (let ((?x51676 (* 2.0 l_0_15_135)))
 (let ((?x52198 (* ?x51676 l_0_15_139)))
 (let ((?x51673 (* 2.0 l_0_15_134)))
 (let ((?x52196 (* ?x51673 l_0_15_138)))
 (let ((?x51670 (* 2.0 l_0_15_133)))
 (let ((?x52194 (* ?x51670 l_0_15_137)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x52192 (* ?x51350 l_0_15_9)))
 (let ((?x52190 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x52187 (* ?x49688 l_0_15_8)))
 (let ((?x52185 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x52182 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x52179 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x52176 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x52173 (* ?x49685 l_0_15_7)))
 (let ((?x52171 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x51988 (* 2.0 l_0_15_103)))
 (let ((?x52168 (* ?x51988 l_0_15_98)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x52166 (* ?x51651 l_0_15_97)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x52164 (* ?x50737 l_0_15_96)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x52162 (* ?x50734 l_0_15_95)))
 (let ((?x51118 (* 12.0 l_0_15_10)))
 (let ((?x40907 (* ?x51118 l_0_15_14)))
 (let ((?x52177 (+ (+ (- (- (- (- (- ?x40907 ?x52162) ?x52164) ?x52166) ?x52168) ?x52171) ?x52173) ?x52176)))
 (let ((?x52195 (+ (+ (+ (+ (+ (+ (+ ?x52177 ?x52179) ?x52182) ?x52185) ?x52187) ?x52190) ?x52192) ?x52194)))
 (let ((?x52213 (- (- (- (- (+ (+ (+ ?x52195 ?x52196) ?x52198) ?x52200) ?x52203) ?x52206) ?x52209) ?x52212)))
 (let ((?x52233 (- (+ (+ (+ (+ (+ (- ?x52213 ?x52215) ?x52218) ?x52221) ?x52224) ?x52227) ?x52230) ?x52232)))
 (let ((?x52242 (- (- (- (- ?x52233 ?x52234) ?x52236) ?x52238) (* (* 6.0 l_0_15_49) l_0_15_53))))
 (let ((?x52255 (+ (- (+ (- (+ (- (+ ?x52242 ?x51203) ?x52245) ?x51206) ?x52249) ?x51209) ?x52253) ?x51212)))
 (let ((?x52270 (+ (- (+ (- (+ (- (+ ?x52255 ?x52257) ?x51217) ?x52261) ?x51220) ?x52265) ?x51223) ?x52269)))
 (= (- ?x52270 ?x51226) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x52268 (* 6.0 l_0_15_73)))
 (let ((?x52456 (* ?x52268 l_0_15_82)))
 (let ((?x52264 (* 6.0 l_0_15_72)))
 (let ((?x52454 (* ?x52264 l_0_15_81)))
 (let ((?x52260 (* 6.0 l_0_15_71)))
 (let ((?x52452 (* ?x52260 l_0_15_80)))
 (let ((?x52256 (* 6.0 l_0_15_70)))
 (let ((?x52450 (* ?x52256 l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51214 (* ?x49425 l_0_15_70)))
 (let ((?x52252 (* 6.0 l_0_15_52)))
 (let ((?x52447 (* ?x52252 l_0_15_61)))
 (let ((?x52248 (* 6.0 l_0_15_51)))
 (let ((?x52445 (* ?x52248 l_0_15_60)))
 (let ((?x52244 (* 6.0 l_0_15_50)))
 (let ((?x52443 (* ?x52244 l_0_15_59)))
 (let ((?x52240 (* 6.0 l_0_15_49)))
 (let ((?x52441 (* ?x52240 l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51200 (* ?x49401 l_0_15_49)))
 (let ((?x51197 (* 12.0 l_0_15_31)))
 (let ((?x51198 (* ?x51197 l_0_15_40)))
 (let ((?x51194 (* 12.0 l_0_15_30)))
 (let ((?x51195 (* ?x51194 l_0_15_39)))
 (let ((?x51191 (* 12.0 l_0_15_29)))
 (let ((?x51192 (* ?x51191 l_0_15_38)))
 (let ((?x51188 (* 12.0 l_0_15_28)))
 (let ((?x51189 (* ?x51188 l_0_15_37)))
 (let ((?x52434 (* l_0_15_189 l_0_15_189)))
 (let ((?x52432 (* l_0_15_188 l_0_15_188)))
 (let ((?x52430 (* l_0_15_187 l_0_15_187)))
 (let ((?x52428 (* l_0_15_186 l_0_15_186)))
 (let ((?x52426 (* l_0_15_185 l_0_15_185)))
 (let ((?x52424 (* l_0_15_184 l_0_15_184)))
 (let ((?x50993 (* 12.0 l_0_15_18)))
 (let ((?x51148 (* ?x50993 l_0_15_9)))
 (let ((?x50179 (* 12.0 l_0_15_17)))
 (let ((?x51146 (* ?x50179 l_0_15_8)))
 (let ((?x52420 (* l_0_15_168 l_0_15_168)))
 (let ((?x52418 (* l_0_15_167 l_0_15_167)))
 (let ((?x52416 (* l_0_15_166 l_0_15_166)))
 (let ((?x52414 (* l_0_15_165 l_0_15_165)))
 (let ((?x52412 (* l_0_15_164 l_0_15_164)))
 (let ((?x52410 (* l_0_15_163 l_0_15_163)))
 (let ((?x50176 (* 12.0 l_0_15_16)))
 (let ((?x51142 (* ?x50176 l_0_15_7)))
 (let ((?x51679 (* 2.0 l_0_15_136)))
 (let ((?x51680 (* ?x51679 l_0_15_145)))
 (let ((?x51676 (* 2.0 l_0_15_135)))
 (let ((?x51677 (* ?x51676 l_0_15_144)))
 (let ((?x51673 (* 2.0 l_0_15_134)))
 (let ((?x51674 (* ?x51673 l_0_15_143)))
 (let ((?x51670 (* 2.0 l_0_15_133)))
 (let ((?x51671 (* ?x51670 l_0_15_142)))
 (let ((?x52403 (* l_0_15_126 l_0_15_126)))
 (let ((?x52401 (* l_0_15_125 l_0_15_125)))
 (let ((?x52399 (* l_0_15_124 l_0_15_124)))
 (let ((?x52397 (* l_0_15_123 l_0_15_123)))
 (let ((?x52395 (* l_0_15_122 l_0_15_122)))
 (let ((?x52393 (* l_0_15_121 l_0_15_121)))
 (let ((?x52391 (* l_0_15_105 l_0_15_105)))
 (let ((?x52389 (* l_0_15_104 l_0_15_104)))
 (let ((?x52387 (* l_0_15_103 l_0_15_103)))
 (let ((?x52385 (* l_0_15_102 l_0_15_102)))
 (let ((?x52383 (* l_0_15_101 l_0_15_101)))
 (let ((?x52381 (* l_0_15_100 l_0_15_100)))
 (let ((?x51118 (* 12.0 l_0_15_10)))
 (let ((?x51120 (* ?x51118 l_0_15_19)))
 (let ((?x52394 (+ (- (- (- (- (- (- ?x51120 ?x52381) ?x52383) ?x52385) ?x52387) ?x52389) ?x52391) ?x52393)))
 (let ((?x52406 (+ (+ (+ (+ (+ (+ (+ ?x52394 ?x52395) ?x52397) ?x52399) ?x52401) ?x52403) ?x51671) ?x51674)))
 (let ((?x52417 (- (- (- (- (+ (+ (+ ?x52406 ?x51677) ?x51680) ?x51142) ?x52410) ?x52412) ?x52414) ?x52416)))
 (let ((?x52429 (+ (+ (+ (+ (+ (- (- ?x52417 ?x52418) ?x52420) ?x51146) ?x51148) ?x52424) ?x52426) ?x52428)))
 (let ((?x52439 (- (- (- (- (+ (+ (+ ?x52429 ?x52430) ?x52432) ?x52434) ?x51189) ?x51192) ?x51195) ?x51198)))
 (let ((?x52451 (+ (+ (- (- (- (- (- ?x52439 ?x51200) ?x52441) ?x52443) ?x52445) ?x52447) ?x51214) ?x52450)))
 (= (+ (+ (+ ?x52451 ?x52452) ?x52454) ?x52456) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49943 (* l_0_15_78 l_0_15_78)))
 (let ((?x52546 (* 3.0 ?x49943)))
 (let ((?x51454 (* (* 2.0 l_0_15_78) l_0_15_83)))
 (let ((?x49940 (* l_0_15_77 l_0_15_77)))
 (let ((?x52543 (* 3.0 ?x49940)))
 (let ((?x51451 (* (* 2.0 l_0_15_77) l_0_15_82)))
 (let ((?x49937 (* l_0_15_76 l_0_15_76)))
 (let ((?x52540 (* 3.0 ?x49937)))
 (let ((?x51448 (* (* 2.0 l_0_15_76) l_0_15_81)))
 (let ((?x49934 (* l_0_15_75 l_0_15_75)))
 (let ((?x52537 (* 3.0 ?x49934)))
 (let ((?x51445 (* (* 2.0 l_0_15_75) l_0_15_80)))
 (let ((?x49931 (* l_0_15_74 l_0_15_74)))
 (let ((?x52534 (* 3.0 ?x49931)))
 (let ((?x51442 (* (* 2.0 l_0_15_74) l_0_15_79)))
 (let ((?x52531 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x51436 (* (* 2.0 l_0_15_57) l_0_15_62)))
 (let ((?x52527 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x51433 (* (* 2.0 l_0_15_56) l_0_15_61)))
 (let ((?x52523 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x51430 (* (* 2.0 l_0_15_55) l_0_15_60)))
 (let ((?x52519 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x51427 (* (* 2.0 l_0_15_54) l_0_15_59)))
 (let ((?x51424 (* (* 2.0 l_0_15_53) l_0_15_58)))
 (let ((?x49912 (* (* 6.0 l_0_15_36) l_0_15_36)))
 (let ((?x49909 (* (* 6.0 l_0_15_35) l_0_15_35)))
 (let ((?x49906 (* (* 6.0 l_0_15_34) l_0_15_34)))
 (let ((?x49903 (* (* 6.0 l_0_15_33) l_0_15_33)))
 (let ((?x49900 (* (* 6.0 l_0_15_32) l_0_15_32)))
 (let ((?x49866 (* l_0_15_15 l_0_15_15)))
 (let ((?x49867 (* 6.0 ?x49866)))
 (let ((?x52505 (* l_0_15_141 l_0_15_141)))
 (let ((?x52503 (* l_0_15_140 l_0_15_140)))
 (let ((?x49863 (* l_0_15_14 l_0_15_14)))
 (let ((?x49864 (* 6.0 ?x49863)))
 (let ((?x52500 (* l_0_15_139 l_0_15_139)))
 (let ((?x30570 (* l_0_15_138 l_0_15_138)))
 (let ((?x39155 (* l_0_15_137 l_0_15_137)))
 (let ((?x49860 (* l_0_15_13 l_0_15_13)))
 (let ((?x49861 (* 6.0 ?x49860)))
 (let ((?x49857 (* l_0_15_12 l_0_15_12)))
 (let ((?x49858 (* 6.0 ?x49857)))
 (let ((?x49854 (* l_0_15_11 l_0_15_11)))
 (let ((?x49855 (* 6.0 ?x49854)))
 (let ((?x52504 (+ (+ (+ (+ (+ (+ (+ ?x49855 ?x49858) ?x49861) ?x39155) ?x30570) ?x52500) ?x49864) ?x52503)))
 (let ((?x52512 (- (- (- (- (- (+ (+ ?x52504 ?x52505) ?x49867) ?x49900) ?x49903) ?x49906) ?x49909) ?x49912)))
 (let ((?x52520 (- (+ (- (+ ?x52512 ?x51424) (* (* 3.0 l_0_15_53) l_0_15_53)) ?x51427) ?x52519)))
 (let ((?x52533 (- (- (+ (- (+ (- (+ ?x52520 ?x51430) ?x52523) ?x51433) ?x52527) ?x51436) ?x52531) ?x51442)))
 (let ((?x52544 (+ (- (+ (- (+ (- (+ ?x52533 ?x52534) ?x51445) ?x52537) ?x51448) ?x52540) ?x51451) ?x52543)))
 (= (+ (- ?x52544 ?x51454) ?x52546) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49446 (* l_0_15_84 l_0_15_84)))
 (let ((?x49443 (* l_0_15_83 l_0_15_83)))
 (let ((?x49440 (* l_0_15_82 l_0_15_82)))
 (let ((?x49437 (* l_0_15_81 l_0_15_81)))
 (let ((?x49434 (* l_0_15_80 l_0_15_80)))
 (let ((?x49431 (* l_0_15_79 l_0_15_79)))
 (let ((?x52632 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x52629 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x52626 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x52623 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x52620 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x51438 (* ?x49425 l_0_15_74)))
 (let ((?x49513 (* l_0_15_63 l_0_15_63)))
 (let ((?x15356 (* l_0_15_62 l_0_15_62)))
 (let ((?x49507 (* l_0_15_61 l_0_15_61)))
 (let ((?x15297 (* l_0_15_60 l_0_15_60)))
 (let ((?x49501 (* l_0_15_59 l_0_15_59)))
 (let ((?x29296 (* l_0_15_58 l_0_15_58)))
 (let ((?x52610 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x52607 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x52604 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x52601 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x52598 (* (* 6.0 l_0_15_53) l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x51420 (* ?x49401 l_0_15_53)))
 (let ((?x51418 (* (* 12.0 l_0_15_36) l_0_15_41)))
 (let ((?x51415 (* (* 12.0 l_0_15_35) l_0_15_40)))
 (let ((?x51412 (* (* 12.0 l_0_15_34) l_0_15_39)))
 (let ((?x51409 (* (* 12.0 l_0_15_33) l_0_15_38)))
 (let ((?x51406 (* (* 12.0 l_0_15_32) l_0_15_37)))
 (let ((?x51357 (* (* 12.0 l_0_15_15) l_0_15_20)))
 (let ((?x51832 (* (* 2.0 l_0_15_141) l_0_15_146)))
 (let ((?x51829 (* (* 2.0 l_0_15_140) l_0_15_145)))
 (let ((?x51354 (* (* 12.0 l_0_15_14) l_0_15_19)))
 (let ((?x51826 (* (* 2.0 l_0_15_139) l_0_15_144)))
 (let ((?x51823 (* (* 2.0 l_0_15_138) l_0_15_143)))
 (let ((?x51820 (* (* 2.0 l_0_15_137) l_0_15_142)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x51351 (* ?x51350 l_0_15_18)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x51329 (* ?x49688 l_0_15_17)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x51325 (* ?x49685 l_0_15_16)))
 (let ((?x52588 (+ (+ (+ (+ (+ (+ (+ ?x51325 ?x51329) ?x51351) ?x51820) ?x51823) ?x51826) ?x51354) ?x51829)))
 (let ((?x52595 (- (- (- (- (- (+ (+ ?x52588 ?x51832) ?x51357) ?x51406) ?x51409) ?x51412) ?x51415) ?x51418)))
 (let ((?x52612 (+ (- (- (- (- (- (- ?x52595 ?x51420) ?x52598) ?x52601) ?x52604) ?x52607) ?x52610) ?x29296)))
 (let ((?x52621 (+ (+ (+ (+ (+ (+ (+ ?x52612 ?x49501) ?x15297) ?x49507) ?x15356) ?x49513) ?x51438) ?x52620)))
 (let ((?x52636 (- (- (- (+ (+ (+ (+ ?x52621 ?x52623) ?x52626) ?x52629) ?x52632) ?x49431) ?x49434) ?x49437)))
 (= (- (- (- ?x52636 ?x49440) ?x49443) ?x49446) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x52697 (* l_0_15_85 l_0_15_85)))
 (let ((?x49446 (* l_0_15_84 l_0_15_84)))
 (let ((?x52695 (* 3.0 ?x49446)))
 (let ((?x49443 (* l_0_15_83 l_0_15_83)))
 (let ((?x52693 (* 3.0 ?x49443)))
 (let ((?x49440 (* l_0_15_82 l_0_15_82)))
 (let ((?x52691 (* 3.0 ?x49440)))
 (let ((?x49437 (* l_0_15_81 l_0_15_81)))
 (let ((?x52689 (* 3.0 ?x49437)))
 (let ((?x49434 (* l_0_15_80 l_0_15_80)))
 (let ((?x52687 (* 3.0 ?x49434)))
 (let ((?x49431 (* l_0_15_79 l_0_15_79)))
 (let ((?x52685 (* 3.0 ?x49431)))
 (let ((?x49425 (* 6.0 l_0_15_64)))
 (let ((?x49426 (* ?x49425 l_0_15_79)))
 (let ((?x52682 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x52679 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x52676 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x52673 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x52670 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x52667 (* (* 3.0 l_0_15_58) l_0_15_58)))
 (let ((?x49401 (* 6.0 l_0_15_43)))
 (let ((?x49402 (* ?x49401 l_0_15_58)))
 (let ((?x49399 (* (* 6.0 l_0_15_42) l_0_15_42)))
 (let ((?x49396 (* (* 6.0 l_0_15_41) l_0_15_41)))
 (let ((?x49393 (* (* 6.0 l_0_15_40) l_0_15_40)))
 (let ((?x49390 (* (* 6.0 l_0_15_39) l_0_15_39)))
 (let ((?x49387 (* (* 6.0 l_0_15_38) l_0_15_38)))
 (let ((?x49384 (* (* 6.0 l_0_15_37) l_0_15_37)))
 (let ((?x49351 (* l_0_15_21 l_0_15_21)))
 (let ((?x49352 (* 6.0 ?x49351)))
 (let ((?x49338 (* l_0_15_20 l_0_15_20)))
 (let ((?x49339 (* 6.0 ?x49338)))
 (let ((?x49335 (* l_0_15_19 l_0_15_19)))
 (let ((?x49336 (* 6.0 ?x49335)))
 (let ((?x49332 (* l_0_15_18 l_0_15_18)))
 (let ((?x49333 (* 6.0 ?x49332)))
 (let ((?x49329 (* l_0_15_17 l_0_15_17)))
 (let ((?x49330 (* 6.0 ?x49329)))
 (let ((?x52652 (* l_0_15_169 l_0_15_169)))
 (let ((?x49326 (* l_0_15_16 l_0_15_16)))
 (let ((?x49327 (* 6.0 ?x49326)))
 (let ((?x52649 (* l_0_15_148 l_0_15_148)))
 (let ((?x51928 (* l_0_15_147 l_0_15_147)))
 (let ((?x51926 (* l_0_15_146 l_0_15_146)))
 (let ((?x51924 (* l_0_15_145 l_0_15_145)))
 (let ((?x51922 (* l_0_15_144 l_0_15_144)))
 (let ((?x51920 (* l_0_15_143 l_0_15_143)))
 (let ((?x19451 (+ (+ (* (- l_0_15_106) l_0_15_106) (* l_0_15_142 l_0_15_142)) ?x51920)))
 (let ((?x52653 (- (+ (+ (+ (+ (+ (+ ?x19451 ?x51922) ?x51924) ?x51926) ?x51928) ?x52649) ?x49327) ?x52652)))
 (let ((?x52660 (- (- (+ (+ (+ (+ (+ ?x52653 ?x49330) ?x49333) ?x49336) ?x49339) ?x49352) ?x49384) ?x49387)))
 (let ((?x52671 (- (- (- (- (- (- (- ?x52660 ?x49390) ?x49393) ?x49396) ?x49399) ?x49402) ?x52667) ?x52670)))
 (let ((?x52688 (+ (+ (+ (- (- (- (- ?x52671 ?x52673) ?x52676) ?x52679) ?x52682) ?x49426) ?x52685) ?x52687)))
 (= (+ (+ (+ (+ (+ ?x52688 ?x52689) ?x52691) ?x52693) ?x52695) ?x52697) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x52754 (* ?x49555 l_0_15_67)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x52752 (* ?x49551 l_0_15_46)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x51014 (* ?x49356 l_0_15_25)))
 (let ((?x52746 (- (- (* (* 12.0 l_0_15_1) l_0_15_4) (* l_0_15_127 l_0_15_127)) (* (* 2.0 l_0_15_190) l_0_15_193))))
 (let ((?x52751 (- (- (- ?x52746 (* (* 2.0 l_0_15_211) l_0_15_214)) ?x51014) (* (* 2.0 l_0_15_232) l_0_15_235))))
 (= (+ (- ?x52751 ?x52752) ?x52754) 0.0))))))))))
(assert
 (let ((?x52697 (* l_0_15_85 l_0_15_85)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x52797 (* ?x49555 l_0_15_70)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x52795 (* ?x49551 l_0_15_49)))
 (let ((?x49356 (* 12.0 l_0_15_22)))
 (let ((?x51171 (* ?x49356 l_0_15_28)))
 (let ((?x52652 (* l_0_15_169 l_0_15_169)))
 (let ((?x52649 (* l_0_15_148 l_0_15_148)))
 (let ((?x52783 (- (+ (* (* 12.0 l_0_15_1) l_0_15_7) (* l_0_15_106 l_0_15_106)) ?x52649)))
 (let ((?x52791 (- (- (+ ?x52783 ?x52652) (* (* 2.0 l_0_15_190) l_0_15_196)) (* (* 2.0 l_0_15_211) l_0_15_217))))
 (let ((?x52798 (+ (- (- (- ?x52791 ?x51171) (* (* 2.0 l_0_15_232) l_0_15_238)) ?x52795) ?x52797)))
 (= (- ?x52798 ?x52697) 0.0))))))))))))))
(assert
 (let ((?x50407 (* l_0_15_6 l_0_15_6)))
 (let ((?x51599 (* 6.0 ?x50407)))
 (let ((?x50405 (* l_0_15_5 l_0_15_5)))
 (let ((?x51597 (* 6.0 ?x50405)))
 (let ((?x50403 (* l_0_15_4 l_0_15_4)))
 (let ((?x51586 (* 6.0 ?x50403)))
 (let ((?x51584 (* (* 6.0 l_0_15_27) l_0_15_27)))
 (let ((?x51581 (* (* 6.0 l_0_15_26) l_0_15_26)))
 (let ((?x51578 (* (* 6.0 l_0_15_25) l_0_15_25)))
 (let ((?x52839 (* l_0_15_237 l_0_15_237)))
 (let ((?x52837 (* l_0_15_236 l_0_15_236)))
 (let ((?x52835 (* l_0_15_235 l_0_15_235)))
 (let ((?x52833 (* l_0_15_216 l_0_15_216)))
 (let ((?x52831 (* l_0_15_215 l_0_15_215)))
 (let ((?x52829 (* l_0_15_214 l_0_15_214)))
 (let ((?x52827 (* l_0_15_195 l_0_15_195)))
 (let ((?x52825 (* l_0_15_194 l_0_15_194)))
 (let ((?x52823 (* l_0_15_193 l_0_15_193)))
 (let ((?x52830 (- (- (- (- (* (* (- 2.0) l_0_15_127) l_0_15_130) ?x52823) ?x52825) ?x52827) ?x52829)))
 (let ((?x52842 (- (- (- (- (- (- (- ?x52830 ?x52831) ?x52833) ?x52835) ?x52837) ?x52839) ?x51578) ?x51581)))
 (let ((?x52850 (- (- (+ (- ?x52842 ?x51584) ?x51586) (* (* 1.0 l_0_15_46) l_0_15_46)) (* (* 1.0 l_0_15_47) l_0_15_47))))
 (let ((?x52857 (+ (+ (+ (- ?x52850 (* (* 1.0 l_0_15_48) l_0_15_48)) ?x51597) ?x51599) (* 1.0 (* l_0_15_67 l_0_15_67)))))
 (let ((?x52861 (+ (+ ?x52857 (* 1.0 (* l_0_15_68 l_0_15_68))) (* 1.0 (* l_0_15_69 l_0_15_69)))))
 (= ?x52861 0.0)))))))))))))))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x52927 (* ?x50094 l_0_15_88)))
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x52925 (* ?x51053 l_0_15_72)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x52923 (* ?x51050 l_0_15_71)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x52921 (* ?x51047 l_0_15_70)))
 (let ((?x51722 (* (* 12.0 l_0_15_6) l_0_15_9)))
 (let ((?x51719 (* (* 12.0 l_0_15_5) l_0_15_8)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x52917 (* ?x51042 l_0_15_51)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x52915 (* ?x51039 l_0_15_50)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x52913 (* ?x51036 l_0_15_49)))
 (let ((?x51707 (* (* 12.0 l_0_15_4) l_0_15_7)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51704 (* ?x51031 l_0_15_30)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51702 (* ?x51028 l_0_15_29)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51700 (* ?x51025 l_0_15_28)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x52889 (* ?x50061 l_0_15_172)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x52887 (* ?x50058 l_0_15_151)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x51138 (* ?x49323 l_0_15_133)))
 (let ((?x52892 (- (+ (- (- (* (* 2.0 l_0_15_106) l_0_15_109) ?x51138) ?x52887) ?x52889) (* (* 2.0 l_0_15_193) l_0_15_196))))
 (let ((?x52896 (- (- ?x52892 (* (* 2.0 l_0_15_194) l_0_15_197)) (* (* 2.0 l_0_15_195) l_0_15_198))))
 (let ((?x52900 (- (- ?x52896 (* (* 2.0 l_0_15_214) l_0_15_217)) (* (* 2.0 l_0_15_215) l_0_15_218))))
 (let ((?x52904 (- (- ?x52900 (* (* 2.0 l_0_15_216) l_0_15_219)) (* (* 2.0 l_0_15_235) l_0_15_238))))
 (let ((?x52908 (- (- ?x52904 (* (* 2.0 l_0_15_236) l_0_15_239)) (* (* 2.0 l_0_15_237) l_0_15_240))))
 (let ((?x52918 (- (- (- (+ (- (- (- ?x52908 ?x51700) ?x51702) ?x51704) ?x51707) ?x52913) ?x52915) ?x52917)))
 (= (- (+ (+ (+ (+ (+ ?x52918 ?x51719) ?x51722) ?x52921) ?x52923) ?x52925) ?x52927) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x53032 (* ?x51053 l_0_15_76)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x53030 (* ?x51050 l_0_15_75)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x53028 (* ?x51047 l_0_15_74)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x52754 (* ?x49555 l_0_15_67)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x53025 (* ?x51042 l_0_15_55)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x53023 (* ?x51039 l_0_15_54)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x53021 (* ?x51036 l_0_15_53)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x52752 (* ?x49551 l_0_15_46)))
 (let ((?x51031 (* 12.0 l_0_15_27)))
 (let ((?x51838 (* ?x51031 l_0_15_34)))
 (let ((?x51028 (* 12.0 l_0_15_26)))
 (let ((?x51836 (* ?x51028 l_0_15_33)))
 (let ((?x51025 (* 12.0 l_0_15_25)))
 (let ((?x51834 (* ?x51025 l_0_15_32)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x51811 (* ?x51350 l_0_15_6)))
 (let ((?x49323 (* 2.0 l_0_15_127)))
 (let ((?x51333 (* ?x49323 l_0_15_137)))
 (let ((?x51810 (+ (* (* 12.0 l_0_15_11) l_0_15_4) (* (* 12.0 l_0_15_12) l_0_15_5))))
 (let ((?x53002 (- (- (+ (- ?x51810 ?x51333) ?x51811) (* (* 2.0 l_0_15_193) l_0_15_200)) (* (* 2.0 l_0_15_194) l_0_15_201))))
 (let ((?x53006 (- (- ?x53002 (* (* 2.0 l_0_15_195) l_0_15_202)) (* (* 2.0 l_0_15_214) l_0_15_221))))
 (let ((?x53010 (- (- ?x53006 (* (* 2.0 l_0_15_215) l_0_15_222)) (* (* 2.0 l_0_15_216) l_0_15_223))))
 (let ((?x53014 (- (- ?x53010 (* (* 2.0 l_0_15_235) l_0_15_242)) (* (* 2.0 l_0_15_236) l_0_15_243))))
 (let ((?x53019 (- (- (- (- ?x53014 (* (* 2.0 l_0_15_237) l_0_15_244)) ?x51834) ?x51836) ?x51838)))
 (let ((?x53031 (+ (+ (- (- (- (- (+ ?x53019 ?x52752) ?x53021) ?x53023) ?x53025) ?x52754) ?x53028) ?x53030)))
 (= (+ ?x53031 ?x53032) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50640 (* l_0_15_9 l_0_15_9)))
 (let ((?x52075 (* 6.0 ?x50640)))
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x53117 (* ?x50094 l_0_15_91)))
 (let ((?x50634 (* l_0_15_8 l_0_15_8)))
 (let ((?x52073 (* 6.0 ?x50634)))
 (let ((?x50632 (* l_0_15_7 l_0_15_7)))
 (let ((?x52059 (* 6.0 ?x50632)))
 (let ((?x52045 (* (* 6.0 l_0_15_31) l_0_15_31)))
 (let ((?x52042 (* (* 6.0 l_0_15_30) l_0_15_30)))
 (let ((?x52039 (* (* 6.0 l_0_15_29) l_0_15_29)))
 (let ((?x52036 (* (* 6.0 l_0_15_28) l_0_15_28)))
 (let ((?x53089 (* l_0_15_241 l_0_15_241)))
 (let ((?x53087 (* l_0_15_240 l_0_15_240)))
 (let ((?x53085 (* l_0_15_239 l_0_15_239)))
 (let ((?x53083 (* l_0_15_238 l_0_15_238)))
 (let ((?x53081 (* l_0_15_220 l_0_15_220)))
 (let ((?x53079 (* l_0_15_219 l_0_15_219)))
 (let ((?x53077 (* l_0_15_218 l_0_15_218)))
 (let ((?x53075 (* l_0_15_217 l_0_15_217)))
 (let ((?x53073 (* l_0_15_199 l_0_15_199)))
 (let ((?x53071 (* l_0_15_198 l_0_15_198)))
 (let ((?x53069 (* l_0_15_197 l_0_15_197)))
 (let ((?x53067 (* l_0_15_196 l_0_15_196)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x41399 (* ?x50061 l_0_15_175)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x41403 (* ?x50058 l_0_15_154)))
 (let ((?x50644 (* l_0_15_10 l_0_15_10)))
 (let ((?x51981 (* 6.0 ?x50644)))
 (let ((?x53068 (- (+ (- (+ ?x51981 (* (* 2.0 l_0_15_106) l_0_15_112)) ?x41403) ?x41399) ?x53067)))
 (let ((?x53082 (- (- (- (- (- (- (- ?x53068 ?x53069) ?x53071) ?x53073) ?x53075) ?x53077) ?x53079) ?x53081)))
 (let ((?x53093 (- (- (- (- (- (- (- ?x53082 ?x53083) ?x53085) ?x53087) ?x53089) ?x52036) ?x52039) ?x52042)))
 (let ((?x53100 (- (- (- ?x53093 ?x52045) (* (* 1.0 l_0_15_49) l_0_15_49)) (* (* 1.0 l_0_15_50) l_0_15_50))))
 (let ((?x53106 (- (- ?x53100 (* (* 1.0 l_0_15_51) l_0_15_51)) (* (* 1.0 l_0_15_52) l_0_15_52))))
 (let ((?x53111 (+ (+ (+ ?x53106 ?x52059) (* 1.0 (* l_0_15_70 l_0_15_70))) (* 1.0 (* l_0_15_71 l_0_15_71)))))
 (let ((?x53115 (+ (+ ?x53111 (* 1.0 (* l_0_15_72 l_0_15_72))) (* 1.0 (* l_0_15_73 l_0_15_73)))))
 (= (+ (- (+ ?x53115 ?x52073) ?x53117) ?x52075) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x53204 (* ?x50094 l_0_15_95)))
 (let ((?x51225 (* 2.0 l_0_15_73)))
 (let ((?x53202 (* ?x51225 l_0_15_77)))
 (let ((?x51222 (* 2.0 l_0_15_72)))
 (let ((?x53200 (* ?x51222 l_0_15_76)))
 (let ((?x51219 (* 2.0 l_0_15_71)))
 (let ((?x53198 (* ?x51219 l_0_15_75)))
 (let ((?x51216 (* 2.0 l_0_15_70)))
 (let ((?x53196 (* ?x51216 l_0_15_74)))
 (let ((?x49555 (* 2.0 l_0_15_64)))
 (let ((?x52797 (* ?x49555 l_0_15_70)))
 (let ((?x51211 (* 2.0 l_0_15_52)))
 (let ((?x53193 (* ?x51211 l_0_15_56)))
 (let ((?x51208 (* 2.0 l_0_15_51)))
 (let ((?x53191 (* ?x51208 l_0_15_55)))
 (let ((?x51205 (* 2.0 l_0_15_50)))
 (let ((?x53189 (* ?x51205 l_0_15_54)))
 (let ((?x51202 (* 2.0 l_0_15_49)))
 (let ((?x53187 (* ?x51202 l_0_15_53)))
 (let ((?x49551 (* 2.0 l_0_15_43)))
 (let ((?x52795 (* ?x49551 l_0_15_49)))
 (let ((?x51197 (* 12.0 l_0_15_31)))
 (let ((?x52238 (* ?x51197 l_0_15_35)))
 (let ((?x51194 (* 12.0 l_0_15_30)))
 (let ((?x52236 (* ?x51194 l_0_15_34)))
 (let ((?x51191 (* 12.0 l_0_15_29)))
 (let ((?x52234 (* ?x51191 l_0_15_33)))
 (let ((?x51188 (* 12.0 l_0_15_28)))
 (let ((?x52232 (* ?x51188 l_0_15_32)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x53156 (* ?x50061 l_0_15_179)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x53154 (* ?x50058 l_0_15_158)))
 (let ((?x51350 (* 12.0 l_0_15_13)))
 (let ((?x52192 (* ?x51350 l_0_15_9)))
 (let ((?x49688 (* 12.0 l_0_15_12)))
 (let ((?x52187 (* ?x49688 l_0_15_8)))
 (let ((?x49685 (* 12.0 l_0_15_11)))
 (let ((?x52173 (* ?x49685 l_0_15_7)))
 (let ((?x51118 (* 12.0 l_0_15_10)))
 (let ((?x40907 (* ?x51118 l_0_15_14)))
 (let ((?x53153 (+ (+ (+ (+ ?x40907 (* (* 2.0 l_0_15_106) l_0_15_116)) ?x52173) ?x52187) ?x52192)))
 (let ((?x53161 (- (- (+ (- ?x53153 ?x53154) ?x53156) (* (* 2.0 l_0_15_196) l_0_15_200)) (* (* 2.0 l_0_15_197) l_0_15_201))))
 (let ((?x53165 (- (- ?x53161 (* (* 2.0 l_0_15_198) l_0_15_202)) (* (* 2.0 l_0_15_199) l_0_15_203))))
 (let ((?x53169 (- (- ?x53165 (* (* 2.0 l_0_15_217) l_0_15_221)) (* (* 2.0 l_0_15_218) l_0_15_222))))
 (let ((?x53173 (- (- ?x53169 (* (* 2.0 l_0_15_219) l_0_15_223)) (* (* 2.0 l_0_15_220) l_0_15_224))))
 (let ((?x53177 (- (- ?x53173 (* (* 2.0 l_0_15_238) l_0_15_242)) (* (* 2.0 l_0_15_239) l_0_15_243))))
 (let ((?x53181 (- (- ?x53177 (* (* 2.0 l_0_15_240) l_0_15_244)) (* (* 2.0 l_0_15_241) l_0_15_245))))
 (let ((?x53190 (- (- (+ (- (- (- (- ?x53181 ?x52232) ?x52234) ?x52236) ?x52238) ?x52795) ?x53187) ?x53189)))
 (let ((?x53203 (+ (+ (+ (+ (- (- (- ?x53190 ?x53191) ?x53193) ?x52797) ?x53196) ?x53198) ?x53200) ?x53202)))
 (= (- ?x53203 ?x53204) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49645 (* l_0_15_66 l_0_15_66)))
 (let ((?x50368 (* 3.0 ?x49645)))
 (let ((?x49642 (* l_0_15_65 l_0_15_65)))
 (let ((?x50366 (* 3.0 ?x49642)))
 (let ((?x50364 (* (* 3.0 l_0_15_45) l_0_15_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_15_44) l_0_15_44) ?x50364) ?x50366) ?x50368) 0.0)))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50564 (* ?x50563 l_0_15_68)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50561 (* ?x50560 l_0_15_67)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50558 (* ?x50557 l_0_15_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_15_44) l_0_15_46) ?x50558) ?x50561) ?x50564) 0.0))))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50778 (* ?x50563 l_0_15_71)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50776 (* ?x50560 l_0_15_70)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50774 (* ?x50557 l_0_15_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_15_44) l_0_15_49) ?x50774) ?x50776) ?x50778) 0.0))))))))
(assert
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50882 (* ?x50563 l_0_15_75)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50879 (* ?x50560 l_0_15_74)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50876 (* ?x50557 l_0_15_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_15_44) l_0_15_53) ?x50876) ?x50879) ?x50882) 0.0))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x50095 (* ?x50094 l_0_15_86)))
 (let ((?x50563 (* 6.0 l_0_15_66)))
 (let ((?x50960 (* ?x50563 l_0_15_80)))
 (let ((?x50560 (* 6.0 l_0_15_65)))
 (let ((?x50958 (* ?x50560 l_0_15_79)))
 (let ((?x50557 (* 6.0 l_0_15_45)))
 (let ((?x50955 (* ?x50557 l_0_15_59)))
 (let ((?x50554 (* 6.0 l_0_15_44)))
 (let ((?x50953 (* ?x50554 l_0_15_58)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x50062 (* ?x50061 l_0_15_170)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x50059 (* ?x50058 l_0_15_149)))
 (let ((?x53253 (- (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_107) ?x50059) ?x50062) ?x50953) ?x50955)))
 (= (+ (+ (+ ?x53253 ?x50958) ?x50960) ?x50095) 0.0)))))))))))))))))
(assert
 (let ((?x51607 (* l_0_15_69 l_0_15_69)))
 (let ((?x51608 (* 3.0 ?x51607)))
 (let ((?x51604 (* l_0_15_68 l_0_15_68)))
 (let ((?x51605 (* 3.0 ?x51604)))
 (let ((?x51601 (* l_0_15_67 l_0_15_67)))
 (let ((?x51602 (* 3.0 ?x51601)))
 (let ((?x51595 (* (* 3.0 l_0_15_48) l_0_15_48)))
 (let ((?x51592 (* (* 3.0 l_0_15_47) l_0_15_47)))
 (let ((?x41947 (+ (+ (- (- (* (* (- 3.0) l_0_15_46) l_0_15_46) ?x51592) ?x51595) ?x51602) ?x51605)))
 (= (+ ?x41947 ?x51608) 0.0)))))))))))
(assert
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51731 (* ?x51730 l_0_15_72)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51728 (* ?x51727 l_0_15_71)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51725 (* ?x51724 l_0_15_70)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51716 (* ?x51715 l_0_15_51)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51713 (* ?x51712 l_0_15_50)))
 (let ((?x53265 (+ (+ (- (- (* (* (- 6.0) l_0_15_46) l_0_15_49) ?x51713) ?x51716) ?x51725) ?x51728)))
 (= (+ ?x53265 ?x51731) 0.0)))))))))))))
(assert
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51855 (* ?x51730 l_0_15_76)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51852 (* ?x51727 l_0_15_75)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51849 (* ?x51724 l_0_15_74)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51846 (* ?x51715 l_0_15_55)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51843 (* ?x51712 l_0_15_54)))
 (let ((?x53277 (+ (+ (- (- (* (* (- 6.0) l_0_15_46) l_0_15_53) ?x51843) ?x51846) ?x51849) ?x51852)))
 (= (+ ?x53277 ?x51855) 0.0)))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x52927 (* ?x50094 l_0_15_88)))
 (let ((?x51730 (* 6.0 l_0_15_69)))
 (let ((?x51948 (* ?x51730 l_0_15_81)))
 (let ((?x51727 (* 6.0 l_0_15_68)))
 (let ((?x51946 (* ?x51727 l_0_15_80)))
 (let ((?x51724 (* 6.0 l_0_15_67)))
 (let ((?x51944 (* ?x51724 l_0_15_79)))
 (let ((?x51715 (* 6.0 l_0_15_48)))
 (let ((?x51941 (* ?x51715 l_0_15_60)))
 (let ((?x51712 (* 6.0 l_0_15_47)))
 (let ((?x51939 (* ?x51712 l_0_15_59)))
 (let ((?x51709 (* 6.0 l_0_15_46)))
 (let ((?x51937 (* ?x51709 l_0_15_58)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x52889 (* ?x50061 l_0_15_172)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x52887 (* ?x50058 l_0_15_151)))
 (let ((?x31059 (- (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_109) ?x52887) ?x52889) ?x51937) ?x51939)))
 (= (+ (+ (+ (+ (- ?x31059 ?x51941) ?x51944) ?x51946) ?x51948) ?x52927) 0.0)))))))))))))))))))))
(assert
 (let ((?x52070 (* l_0_15_73 l_0_15_73)))
 (let ((?x52071 (* 3.0 ?x52070)))
 (let ((?x52067 (* l_0_15_72 l_0_15_72)))
 (let ((?x52068 (* 3.0 ?x52067)))
 (let ((?x52064 (* l_0_15_71 l_0_15_71)))
 (let ((?x52065 (* 3.0 ?x52064)))
 (let ((?x52061 (* l_0_15_70 l_0_15_70)))
 (let ((?x52062 (* 3.0 ?x52061)))
 (let ((?x52057 (* (* 3.0 l_0_15_52) l_0_15_52)))
 (let ((?x52054 (* (* 3.0 l_0_15_51) l_0_15_51)))
 (let ((?x52051 (* (* 3.0 l_0_15_50) l_0_15_50)))
 (let ((?x53285 (+ (- (- (- (* (* (- 3.0) l_0_15_49) l_0_15_49) ?x52051) ?x52054) ?x52057) ?x52062)))
 (= (+ (+ (+ ?x53285 ?x52065) ?x52068) ?x52071) 0.0))))))))))))))
(assert
 (let ((?x52268 (* 6.0 l_0_15_73)))
 (let ((?x52269 (* ?x52268 l_0_15_77)))
 (let ((?x52264 (* 6.0 l_0_15_72)))
 (let ((?x52265 (* ?x52264 l_0_15_76)))
 (let ((?x52260 (* 6.0 l_0_15_71)))
 (let ((?x52261 (* ?x52260 l_0_15_75)))
 (let ((?x52256 (* 6.0 l_0_15_70)))
 (let ((?x52257 (* ?x52256 l_0_15_74)))
 (let ((?x52252 (* 6.0 l_0_15_52)))
 (let ((?x52253 (* ?x52252 l_0_15_56)))
 (let ((?x52248 (* 6.0 l_0_15_51)))
 (let ((?x52249 (* ?x52248 l_0_15_55)))
 (let ((?x52244 (* 6.0 l_0_15_50)))
 (let ((?x52245 (* ?x52244 l_0_15_54)))
 (let ((?x53296 (+ (- (- (- (* (* (- 6.0) l_0_15_49) l_0_15_53) ?x52245) ?x52249) ?x52253) ?x52257)))
 (= (+ (+ (+ ?x53296 ?x52261) ?x52265) ?x52269) 0.0)))))))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x53117 (* ?x50094 l_0_15_91)))
 (let ((?x52268 (* 6.0 l_0_15_73)))
 (let ((?x52456 (* ?x52268 l_0_15_82)))
 (let ((?x52264 (* 6.0 l_0_15_72)))
 (let ((?x52454 (* ?x52264 l_0_15_81)))
 (let ((?x52260 (* 6.0 l_0_15_71)))
 (let ((?x52452 (* ?x52260 l_0_15_80)))
 (let ((?x52256 (* 6.0 l_0_15_70)))
 (let ((?x52450 (* ?x52256 l_0_15_79)))
 (let ((?x52252 (* 6.0 l_0_15_52)))
 (let ((?x52447 (* ?x52252 l_0_15_61)))
 (let ((?x52248 (* 6.0 l_0_15_51)))
 (let ((?x52445 (* ?x52248 l_0_15_60)))
 (let ((?x52244 (* 6.0 l_0_15_50)))
 (let ((?x52443 (* ?x52244 l_0_15_59)))
 (let ((?x52240 (* 6.0 l_0_15_49)))
 (let ((?x52441 (* ?x52240 l_0_15_58)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x41399 (* ?x50061 l_0_15_175)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x41403 (* ?x50058 l_0_15_154)))
 (let ((?x53311 (- (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_112) ?x41403) ?x41399) ?x52441) ?x52443)))
 (let ((?x53318 (+ (+ (+ (+ (+ (- (- ?x53311 ?x52445) ?x52447) ?x52450) ?x52452) ?x52454) ?x52456) ?x53117)))
 (= ?x53318 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49943 (* l_0_15_78 l_0_15_78)))
 (let ((?x52546 (* 3.0 ?x49943)))
 (let ((?x49940 (* l_0_15_77 l_0_15_77)))
 (let ((?x52543 (* 3.0 ?x49940)))
 (let ((?x49937 (* l_0_15_76 l_0_15_76)))
 (let ((?x52540 (* 3.0 ?x49937)))
 (let ((?x49934 (* l_0_15_75 l_0_15_75)))
 (let ((?x52537 (* 3.0 ?x49934)))
 (let ((?x49931 (* l_0_15_74 l_0_15_74)))
 (let ((?x52534 (* 3.0 ?x49931)))
 (let ((?x52531 (* (* 3.0 l_0_15_57) l_0_15_57)))
 (let ((?x52527 (* (* 3.0 l_0_15_56) l_0_15_56)))
 (let ((?x52523 (* (* 3.0 l_0_15_55) l_0_15_55)))
 (let ((?x52519 (* (* 3.0 l_0_15_54) l_0_15_54)))
 (let ((?x53325 (- (- (- (- (* (* (- 3.0) l_0_15_53) l_0_15_53) ?x52519) ?x52523) ?x52527) ?x52531)))
 (= (+ (+ (+ (+ (+ ?x53325 ?x52534) ?x52537) ?x52540) ?x52543) ?x52546) 0.0)))))))))))))))))
(assert
 (let ((?x50094 (* 2.0 l_0_15_85)))
 (let ((?x53204 (* ?x50094 l_0_15_95)))
 (let ((?x52632 (* (* 6.0 l_0_15_78) l_0_15_83)))
 (let ((?x52629 (* (* 6.0 l_0_15_77) l_0_15_82)))
 (let ((?x52626 (* (* 6.0 l_0_15_76) l_0_15_81)))
 (let ((?x52623 (* (* 6.0 l_0_15_75) l_0_15_80)))
 (let ((?x52620 (* (* 6.0 l_0_15_74) l_0_15_79)))
 (let ((?x52610 (* (* 6.0 l_0_15_57) l_0_15_62)))
 (let ((?x52607 (* (* 6.0 l_0_15_56) l_0_15_61)))
 (let ((?x52604 (* (* 6.0 l_0_15_55) l_0_15_60)))
 (let ((?x52601 (* (* 6.0 l_0_15_54) l_0_15_59)))
 (let ((?x52598 (* (* 6.0 l_0_15_53) l_0_15_58)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x53156 (* ?x50061 l_0_15_179)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x53154 (* ?x50058 l_0_15_158)))
 (let ((?x53338 (- (- (- (+ (* (* (- 2.0) l_0_15_106) l_0_15_116) ?x53154) ?x53156) ?x52598) ?x52601)))
 (let ((?x53345 (+ (+ (+ (+ (- (- (- ?x53338 ?x52604) ?x52607) ?x52610) ?x52620) ?x52623) ?x52626) ?x52629)))
 (= (+ (+ ?x53345 ?x52632) ?x53204) 0.0))))))))))))))))))))
(assert
 (let ((?x49446 (* l_0_15_84 l_0_15_84)))
 (let ((?x52695 (* 3.0 ?x49446)))
 (let ((?x49443 (* l_0_15_83 l_0_15_83)))
 (let ((?x52693 (* 3.0 ?x49443)))
 (let ((?x49440 (* l_0_15_82 l_0_15_82)))
 (let ((?x52691 (* 3.0 ?x49440)))
 (let ((?x49437 (* l_0_15_81 l_0_15_81)))
 (let ((?x52689 (* 3.0 ?x49437)))
 (let ((?x49434 (* l_0_15_80 l_0_15_80)))
 (let ((?x52687 (* 3.0 ?x49434)))
 (let ((?x49431 (* l_0_15_79 l_0_15_79)))
 (let ((?x52685 (* 3.0 ?x49431)))
 (let ((?x52682 (* (* 3.0 l_0_15_63) l_0_15_63)))
 (let ((?x52679 (* (* 3.0 l_0_15_62) l_0_15_62)))
 (let ((?x52676 (* (* 3.0 l_0_15_61) l_0_15_61)))
 (let ((?x52673 (* (* 3.0 l_0_15_60) l_0_15_60)))
 (let ((?x52670 (* (* 3.0 l_0_15_59) l_0_15_59)))
 (let ((?x52667 (* (* 3.0 l_0_15_58) l_0_15_58)))
 (let ((?x50061 (* 2.0 l_0_15_169)))
 (let ((?x51144 (* ?x50061 l_0_15_184)))
 (let ((?x50058 (* 2.0 l_0_15_148)))
 (let ((?x51140 (* ?x50058 l_0_15_163)))
 (let ((?x39891 (* 2.0 l_0_15_106)))
 (let ((?x51136 (* ?x39891 l_0_15_121)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x51123 (* ?x50734 l_0_15_85)))
 (let ((?x53354 (- (- (- (- (- (+ (- ?x51123 ?x51136) ?x51140) ?x51144) ?x52667) ?x52670) ?x52673) ?x52676)))
 (let ((?x53361 (+ (+ (+ (+ (+ (- (- ?x53354 ?x52679) ?x52682) ?x52685) ?x52687) ?x52689) ?x52691) ?x52693)))
 (= (+ ?x53361 ?x52695) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x51607 (* l_0_15_69 l_0_15_69)))
 (let ((?x51604 (* l_0_15_68 l_0_15_68)))
 (let ((?x51601 (* l_0_15_67 l_0_15_67)))
 (let ((?x18196 (* l_0_15_48 l_0_15_48)))
 (let ((?x51639 (* l_0_15_47 l_0_15_47)))
 (let ((?x30212 (* l_0_15_46 l_0_15_46)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51817 (* ?x51572 l_0_15_139)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51815 (* ?x51553 l_0_15_138)))
 (let ((?x42281 (+ (+ (- (- (* (* (- 2.0) l_0_15_130) l_0_15_137) ?x51815) ?x51817) ?x30212) ?x51639)))
 (= (- (- (- (+ ?x42281 ?x18196) ?x51601) ?x51604) ?x51607) 0.0)))))))))))))
(assert
 (let ((?x53373 (* 2.0 l_0_15_90)))
 (let ((?x53374 (* ?x53373 l_0_15_97)))
 (let ((?x53370 (* 2.0 l_0_15_89)))
 (let ((?x53371 (* ?x53370 l_0_15_96)))
 (let ((?x53367 (* 2.0 l_0_15_88)))
 (let ((?x53368 (* ?x53367 l_0_15_95)))
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x52925 (* ?x51053 l_0_15_72)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x52923 (* ?x51050 l_0_15_71)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x52921 (* ?x51047 l_0_15_70)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x52917 (* ?x51042 l_0_15_51)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x52915 (* ?x51039 l_0_15_50)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x52913 (* ?x51036 l_0_15_49)))
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x42192 (* ?x51697 l_0_15_181)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x42185 (* ?x51694 l_0_15_180)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x42293 (* ?x51691 l_0_15_179)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x42295 (* ?x51688 l_0_15_160)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x42265 (* ?x51685 l_0_15_159)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x31323 (* ?x51682 l_0_15_158)))
 (let ((?x51679 (* 2.0 l_0_15_136)))
 (let ((?x52200 (* ?x51679 l_0_15_140)))
 (let ((?x51676 (* 2.0 l_0_15_135)))
 (let ((?x52198 (* ?x51676 l_0_15_139)))
 (let ((?x51673 (* 2.0 l_0_15_134)))
 (let ((?x52196 (* ?x51673 l_0_15_138)))
 (let ((?x51670 (* 2.0 l_0_15_133)))
 (let ((?x52194 (* ?x51670 l_0_15_137)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x31291 (* ?x51660 l_0_15_118)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x31287 (* ?x51657 l_0_15_117)))
 (let ((?x42282 (- (- (+ (+ (* (* 2.0 l_0_15_109) l_0_15_116) ?x31287) ?x31291) ?x52194) ?x52196)))
 (let ((?x42190 (+ (+ (- (- (- (- (- ?x42282 ?x52198) ?x52200) ?x31323) ?x42265) ?x42295) ?x42293) ?x42185)))
 (let ((?x53366 (- (- (- (+ (+ (+ (+ ?x42190 ?x42192) ?x52913) ?x52915) ?x52917) ?x52921) ?x52923) ?x52925)))
 (= (- (- (- ?x53366 ?x53368) ?x53371) ?x53374) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51053 (* 2.0 l_0_15_69)))
 (let ((?x53032 (* ?x51053 l_0_15_76)))
 (let ((?x51050 (* 2.0 l_0_15_68)))
 (let ((?x53030 (* ?x51050 l_0_15_75)))
 (let ((?x51047 (* 2.0 l_0_15_67)))
 (let ((?x53028 (* ?x51047 l_0_15_74)))
 (let ((?x51042 (* 2.0 l_0_15_48)))
 (let ((?x53025 (* ?x51042 l_0_15_55)))
 (let ((?x51039 (* 2.0 l_0_15_47)))
 (let ((?x53023 (* ?x51039 l_0_15_54)))
 (let ((?x51036 (* 2.0 l_0_15_46)))
 (let ((?x53021 (* ?x51036 l_0_15_53)))
 (let ((?x52505 (* l_0_15_141 l_0_15_141)))
 (let ((?x52503 (* l_0_15_140 l_0_15_140)))
 (let ((?x52500 (* l_0_15_139 l_0_15_139)))
 (let ((?x42392 (- (- (* (- l_0_15_137) l_0_15_137) (* l_0_15_138 l_0_15_138)) ?x52500)))
 (let ((?x42420 (- (- (+ (+ (+ (- (- ?x42392 ?x52503) ?x52505) ?x53021) ?x53023) ?x53025) ?x53028) ?x53030)))
 (= (- ?x42420 ?x53032) 0.0)))))))))))))))))))
(assert
 (let ((?x53415 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x53412 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x53409 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x53406 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x52070 (* l_0_15_73 l_0_15_73)))
 (let ((?x52067 (* l_0_15_72 l_0_15_72)))
 (let ((?x52064 (* l_0_15_71 l_0_15_71)))
 (let ((?x52061 (* l_0_15_70 l_0_15_70)))
 (let ((?x40895 (* l_0_15_52 l_0_15_52)))
 (let ((?x37935 (* l_0_15_51 l_0_15_51)))
 (let ((?x40896 (* l_0_15_50 l_0_15_50)))
 (let ((?x52135 (* l_0_15_49 l_0_15_49)))
 (let ((?x52032 (* 2.0 l_0_15_178)))
 (let ((?x53395 (* ?x52032 l_0_15_182)))
 (let ((?x52029 (* 2.0 l_0_15_177)))
 (let ((?x41573 (* ?x52029 l_0_15_181)))
 (let ((?x52026 (* 2.0 l_0_15_176)))
 (let ((?x31515 (* ?x52026 l_0_15_180)))
 (let ((?x52023 (* 2.0 l_0_15_175)))
 (let ((?x31514 (* ?x52023 l_0_15_179)))
 (let ((?x52020 (* 2.0 l_0_15_157)))
 (let ((?x20202 (* ?x52020 l_0_15_161)))
 (let ((?x52017 (* 2.0 l_0_15_156)))
 (let ((?x42481 (* ?x52017 l_0_15_160)))
 (let ((?x52014 (* 2.0 l_0_15_155)))
 (let ((?x42483 (* ?x52014 l_0_15_159)))
 (let ((?x52011 (* 2.0 l_0_15_154)))
 (let ((?x42477 (* ?x52011 l_0_15_158)))
 (let ((?x52000 (* 2.0 l_0_15_115)))
 (let ((?x42475 (* ?x52000 l_0_15_119)))
 (let ((?x51997 (* 2.0 l_0_15_114)))
 (let ((?x20690 (* ?x51997 l_0_15_118)))
 (let ((?x51994 (* 2.0 l_0_15_113)))
 (let ((?x42554 (* ?x51994 l_0_15_117)))
 (let ((?x20701 (- (+ (+ (+ (* (* 2.0 l_0_15_112) l_0_15_116) ?x42554) ?x20690) ?x42475) ?x42477)))
 (let ((?x53396 (+ (+ (+ (+ (- (- (- ?x20701 ?x42483) ?x42481) ?x20202) ?x31514) ?x31515) ?x41573) ?x53395)))
 (let ((?x53403 (- (- (- (+ (+ (+ (+ ?x53396 ?x52135) ?x40896) ?x37935) ?x40895) ?x52061) ?x52064) ?x52067)))
 (= (- (- (- (- (- ?x53403 ?x52070) ?x53406) ?x53409) ?x53412) ?x53415) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53499 (* l_0_15_99 l_0_15_99)))
 (let ((?x53497 (* l_0_15_98 l_0_15_98)))
 (let ((?x53495 (* l_0_15_97 l_0_15_97)))
 (let ((?x53493 (* l_0_15_96 l_0_15_96)))
 (let ((?x53491 (* l_0_15_95 l_0_15_95)))
 (let ((?x51225 (* 2.0 l_0_15_73)))
 (let ((?x53202 (* ?x51225 l_0_15_77)))
 (let ((?x51222 (* 2.0 l_0_15_72)))
 (let ((?x53200 (* ?x51222 l_0_15_76)))
 (let ((?x51219 (* 2.0 l_0_15_71)))
 (let ((?x53198 (* ?x51219 l_0_15_75)))
 (let ((?x51216 (* 2.0 l_0_15_70)))
 (let ((?x53196 (* ?x51216 l_0_15_74)))
 (let ((?x51211 (* 2.0 l_0_15_52)))
 (let ((?x53193 (* ?x51211 l_0_15_56)))
 (let ((?x51208 (* 2.0 l_0_15_51)))
 (let ((?x53191 (* ?x51208 l_0_15_55)))
 (let ((?x51205 (* 2.0 l_0_15_50)))
 (let ((?x53189 (* ?x51205 l_0_15_54)))
 (let ((?x51202 (* 2.0 l_0_15_49)))
 (let ((?x53187 (* ?x51202 l_0_15_53)))
 (let ((?x53481 (* l_0_15_183 l_0_15_183)))
 (let ((?x53479 (* l_0_15_182 l_0_15_182)))
 (let ((?x53477 (* l_0_15_181 l_0_15_181)))
 (let ((?x53475 (* l_0_15_180 l_0_15_180)))
 (let ((?x53473 (* l_0_15_179 l_0_15_179)))
 (let ((?x53471 (* l_0_15_162 l_0_15_162)))
 (let ((?x53469 (* l_0_15_161 l_0_15_161)))
 (let ((?x53467 (* l_0_15_160 l_0_15_160)))
 (let ((?x53465 (* l_0_15_159 l_0_15_159)))
 (let ((?x53463 (* l_0_15_158 l_0_15_158)))
 (let ((?x53461 (* l_0_15_120 l_0_15_120)))
 (let ((?x53459 (* l_0_15_119 l_0_15_119)))
 (let ((?x53457 (* l_0_15_118 l_0_15_118)))
 (let ((?x53458 (+ (+ (* l_0_15_116 l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53457)))
 (let ((?x53472 (- (- (- (- (- (+ (+ ?x53458 ?x53459) ?x53461) ?x53463) ?x53465) ?x53467) ?x53469) ?x53471)))
 (let ((?x53484 (+ (+ (+ (+ (+ (+ (+ ?x53472 ?x53473) ?x53475) ?x53477) ?x53479) ?x53481) ?x53187) ?x53189)))
 (let ((?x53492 (- (- (- (- (- (+ (+ ?x53484 ?x53191) ?x53193) ?x53196) ?x53198) ?x53200) ?x53202) ?x53491)))
 (= (- (- (- (- ?x53492 ?x53493) ?x53495) ?x53497) ?x53499) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49943 (* l_0_15_78 l_0_15_78)))
 (let ((?x49940 (* l_0_15_77 l_0_15_77)))
 (let ((?x49937 (* l_0_15_76 l_0_15_76)))
 (let ((?x49934 (* l_0_15_75 l_0_15_75)))
 (let ((?x49931 (* l_0_15_74 l_0_15_74)))
 (let ((?x16179 (* l_0_15_57 l_0_15_57)))
 (let ((?x49977 (* l_0_15_56 l_0_15_56)))
 (let ((?x16167 (* l_0_15_55 l_0_15_55)))
 (let ((?x53522 (+ (+ (+ (* l_0_15_53 l_0_15_53) (* l_0_15_54 l_0_15_54)) ?x16167) ?x49977)))
 (= (- (- (- (- (- (+ ?x53522 ?x16179) ?x49931) ?x49934) ?x49937) ?x49940) ?x49943) 0.0)))))))))))
(assert
 (let ((?x53559 (* l_0_15_90 l_0_15_90)))
 (let ((?x53557 (* l_0_15_89 l_0_15_89)))
 (let ((?x53555 (* l_0_15_88 l_0_15_88)))
 (let ((?x53553 (* l_0_15_174 l_0_15_174)))
 (let ((?x53551 (* l_0_15_173 l_0_15_173)))
 (let ((?x53549 (* l_0_15_172 l_0_15_172)))
 (let ((?x53547 (* l_0_15_153 l_0_15_153)))
 (let ((?x53545 (* l_0_15_152 l_0_15_152)))
 (let ((?x53543 (* l_0_15_151 l_0_15_151)))
 (let ((?x51572 (* 2.0 l_0_15_132)))
 (let ((?x51668 (* ?x51572 l_0_15_135)))
 (let ((?x51553 (* 2.0 l_0_15_131)))
 (let ((?x51666 (* ?x51553 l_0_15_134)))
 (let ((?x51663 (* 2.0 l_0_15_130)))
 (let ((?x51664 (* ?x51663 l_0_15_133)))
 (let ((?x53538 (* l_0_15_111 l_0_15_111)))
 (let ((?x53539 (+ (+ (* l_0_15_109 l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x53538)))
 (let ((?x53550 (+ (- (- (- (- (- (- ?x53539 ?x51664) ?x51666) ?x51668) ?x53543) ?x53545) ?x53547) ?x53549)))
 (= (- (- (- (+ (+ ?x53550 ?x53551) ?x53553) ?x53555) ?x53557) ?x53559) 0.0))))))))))))))))))))
(assert
 (let ((?x53373 (* 2.0 l_0_15_90)))
 (let ((?x53607 (* ?x53373 l_0_15_93)))
 (let ((?x53370 (* 2.0 l_0_15_89)))
 (let ((?x53605 (* ?x53370 l_0_15_92)))
 (let ((?x53367 (* 2.0 l_0_15_88)))
 (let ((?x53603 (* ?x53367 l_0_15_91)))
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x53601 (* ?x51697 l_0_15_177)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x53599 (* ?x51694 l_0_15_176)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x53597 (* ?x51691 l_0_15_175)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x53595 (* ?x51688 l_0_15_156)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x53593 (* ?x51685 l_0_15_155)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x53591 (* ?x51682 l_0_15_154)))
 (let ((?x52009 (* l_0_15_136 l_0_15_136)))
 (let ((?x52007 (* l_0_15_135 l_0_15_135)))
 (let ((?x52005 (* l_0_15_134 l_0_15_134)))
 (let ((?x52003 (* l_0_15_133 l_0_15_133)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x53585 (* ?x51660 l_0_15_114)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x53583 (* ?x51657 l_0_15_113)))
 (let ((?x53588 (- (- (+ (+ (* (* 2.0 l_0_15_109) l_0_15_112) ?x53583) ?x53585) ?x52003) ?x52005)))
 (let ((?x53600 (+ (+ (- (- (- (- (- ?x53588 ?x52007) ?x52009) ?x53591) ?x53593) ?x53595) ?x53597) ?x53599)))
 (= (- (- (- (+ ?x53600 ?x53601) ?x53603) ?x53605) ?x53607) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x53669 (* l_0_15_94 l_0_15_94)))
 (let ((?x53667 (* l_0_15_93 l_0_15_93)))
 (let ((?x53665 (* l_0_15_92 l_0_15_92)))
 (let ((?x53663 (* l_0_15_91 l_0_15_91)))
 (let ((?x53661 (* l_0_15_178 l_0_15_178)))
 (let ((?x53659 (* l_0_15_177 l_0_15_177)))
 (let ((?x53657 (* l_0_15_176 l_0_15_176)))
 (let ((?x53655 (* l_0_15_175 l_0_15_175)))
 (let ((?x53653 (* l_0_15_157 l_0_15_157)))
 (let ((?x53651 (* l_0_15_156 l_0_15_156)))
 (let ((?x53649 (* l_0_15_155 l_0_15_155)))
 (let ((?x53647 (* l_0_15_154 l_0_15_154)))
 (let ((?x53645 (* l_0_15_115 l_0_15_115)))
 (let ((?x53643 (* l_0_15_114 l_0_15_114)))
 (let ((?x53644 (+ (+ (* l_0_15_112 l_0_15_112) (* l_0_15_113 l_0_15_113)) ?x53643)))
 (let ((?x53658 (+ (+ (- (- (- (- (+ ?x53644 ?x53645) ?x53647) ?x53649) ?x53651) ?x53653) ?x53655) ?x53657)))
 (= (- (- (- (- (+ (+ ?x53658 ?x53659) ?x53661) ?x53663) ?x53665) ?x53667) ?x53669) 0.0))))))))))))))))))
(assert
 (let ((?x50318 (* l_0_15_87 l_0_15_87)))
 (let ((?x50316 (* l_0_15_86 l_0_15_86)))
 (let ((?x50306 (* l_0_15_171 l_0_15_171)))
 (let ((?x50304 (* l_0_15_170 l_0_15_170)))
 (let ((?x50302 (* l_0_15_150 l_0_15_150)))
 (let ((?x50300 (* l_0_15_149 l_0_15_149)))
 (let ((?x53692 (+ (- (* (- l_0_15_107) l_0_15_107) (* l_0_15_108 l_0_15_108)) ?x50300)))
 (= (+ (+ (- (- (+ ?x53692 ?x50302) ?x50304) ?x50306) ?x50316) ?x50318) 0.0)))))))))
(assert
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50467 (* ?x50466 l_0_15_89)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50464 (* ?x50463 l_0_15_88)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50443 (* ?x50442 l_0_15_173)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50440 (* ?x50439 l_0_15_172)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50437 (* ?x50436 l_0_15_152)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50434 (* ?x50433 l_0_15_151)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50426 (* ?x50425 l_0_15_110)))
 (let ((?x53704 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_109) ?x50426) ?x50434) ?x50437) ?x50440)))
 (= (+ (+ (- ?x53704 ?x50443) ?x50464) ?x50467) 0.0)))))))))))))))))
(assert
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50638 (* ?x50466 l_0_15_92)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50636 (* ?x50463 l_0_15_91)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50622 (* ?x50442 l_0_15_176)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50620 (* ?x50439 l_0_15_175)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50618 (* ?x50436 l_0_15_155)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50616 (* ?x50433 l_0_15_154)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50614 (* ?x50425 l_0_15_113)))
 (let ((?x42553 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_112) ?x50614) ?x50616) ?x50618) ?x50620)))
 (= (+ (+ (- ?x42553 ?x50622) ?x50636) ?x50638) 0.0)))))))))))))))))
(assert
 (let ((?x50466 (* 2.0 l_0_15_87)))
 (let ((?x50678 (* ?x50466 l_0_15_96)))
 (let ((?x50463 (* 2.0 l_0_15_86)))
 (let ((?x50676 (* ?x50463 l_0_15_95)))
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x16741 (* ?x50442 l_0_15_180)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x16800 (* ?x50439 l_0_15_179)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x17027 (* ?x50436 l_0_15_159)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x29886 (* ?x50433 l_0_15_158)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x40183 (* ?x50425 l_0_15_117)))
 (let ((?x43017 (- (+ (+ (- (* (* (- 2.0) l_0_15_107) l_0_15_116) ?x40183) ?x29886) ?x17027) ?x16800)))
 (= (+ (+ (- ?x43017 ?x16741) ?x50676) ?x50678) 0.0)))))))))))))))))
(assert
 (let ((?x50442 (* 2.0 l_0_15_171)))
 (let ((?x50756 (* ?x50442 l_0_15_185)))
 (let ((?x50439 (* 2.0 l_0_15_170)))
 (let ((?x50754 (* ?x50439 l_0_15_184)))
 (let ((?x50436 (* 2.0 l_0_15_150)))
 (let ((?x50748 (* ?x50436 l_0_15_164)))
 (let ((?x50433 (* 2.0 l_0_15_149)))
 (let ((?x50746 (* ?x50433 l_0_15_163)))
 (let ((?x50425 (* 2.0 l_0_15_108)))
 (let ((?x50742 (* ?x50425 l_0_15_122)))
 (let ((?x16671 (* 2.0 l_0_15_107)))
 (let ((?x50740 (* ?x16671 l_0_15_121)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x50738 (* ?x50737 l_0_15_87)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x50735 (* ?x50734 l_0_15_86)))
 (let ((?x53716 (- (- (+ (+ (- (- (+ ?x50735 ?x50738) ?x50740) ?x50742) ?x50746) ?x50748) ?x50754) ?x50756)))
 (= ?x53716 0.0)))))))))))))))))))
(assert
 (let ((?x53559 (* l_0_15_90 l_0_15_90)))
 (let ((?x53557 (* l_0_15_89 l_0_15_89)))
 (let ((?x53555 (* l_0_15_88 l_0_15_88)))
 (let ((?x53553 (* l_0_15_174 l_0_15_174)))
 (let ((?x53551 (* l_0_15_173 l_0_15_173)))
 (let ((?x53549 (* l_0_15_172 l_0_15_172)))
 (let ((?x53547 (* l_0_15_153 l_0_15_153)))
 (let ((?x53545 (* l_0_15_152 l_0_15_152)))
 (let ((?x53543 (* l_0_15_151 l_0_15_151)))
 (let ((?x53538 (* l_0_15_111 l_0_15_111)))
 (let ((?x32195 (- (- (* (- l_0_15_109) l_0_15_109) (* l_0_15_110 l_0_15_110)) ?x53538)))
 (let ((?x43160 (+ (- (- (- (+ (+ (+ ?x32195 ?x53543) ?x53545) ?x53547) ?x53549) ?x53551) ?x53553) ?x53555)))
 (= (+ (+ ?x43160 ?x53557) ?x53559) 0.0))))))))))))))
(assert
 (let ((?x53373 (* 2.0 l_0_15_90)))
 (let ((?x53607 (* ?x53373 l_0_15_93)))
 (let ((?x53370 (* 2.0 l_0_15_89)))
 (let ((?x53605 (* ?x53370 l_0_15_92)))
 (let ((?x53367 (* 2.0 l_0_15_88)))
 (let ((?x53603 (* ?x53367 l_0_15_91)))
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x53601 (* ?x51697 l_0_15_177)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x53599 (* ?x51694 l_0_15_176)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x53597 (* ?x51691 l_0_15_175)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x53595 (* ?x51688 l_0_15_156)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x53593 (* ?x51685 l_0_15_155)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x53591 (* ?x51682 l_0_15_154)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x53585 (* ?x51660 l_0_15_114)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x53583 (* ?x51657 l_0_15_113)))
 (let ((?x3496 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_112) ?x53583) ?x53585) ?x53591) ?x53593)))
 (let ((?x53726 (+ (+ (+ (- (- (- (+ ?x3496 ?x53595) ?x53597) ?x53599) ?x53601) ?x53603) ?x53605) ?x53607)))
 (= ?x53726 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53373 (* 2.0 l_0_15_90)))
 (let ((?x53374 (* ?x53373 l_0_15_97)))
 (let ((?x53370 (* 2.0 l_0_15_89)))
 (let ((?x53371 (* ?x53370 l_0_15_96)))
 (let ((?x53367 (* 2.0 l_0_15_88)))
 (let ((?x53368 (* ?x53367 l_0_15_95)))
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x42192 (* ?x51697 l_0_15_181)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x42185 (* ?x51694 l_0_15_180)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x42293 (* ?x51691 l_0_15_179)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x42295 (* ?x51688 l_0_15_160)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x42265 (* ?x51685 l_0_15_159)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x31323 (* ?x51682 l_0_15_158)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x31291 (* ?x51660 l_0_15_118)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x31287 (* ?x51657 l_0_15_117)))
 (let ((?x43262 (+ (+ (- (- (* (* (- 2.0) l_0_15_109) l_0_15_116) ?x31287) ?x31291) ?x31323) ?x42265)))
 (let ((?x32348 (+ (+ (+ (- (- (- (+ ?x43262 ?x42295) ?x42293) ?x42185) ?x42192) ?x53368) ?x53371) ?x53374)))
 (= ?x32348 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51697 (* 2.0 l_0_15_174)))
 (let ((?x51698 (* ?x51697 l_0_15_186)))
 (let ((?x51694 (* 2.0 l_0_15_173)))
 (let ((?x51695 (* ?x51694 l_0_15_185)))
 (let ((?x51691 (* 2.0 l_0_15_172)))
 (let ((?x51692 (* ?x51691 l_0_15_184)))
 (let ((?x51688 (* 2.0 l_0_15_153)))
 (let ((?x51689 (* ?x51688 l_0_15_165)))
 (let ((?x51685 (* 2.0 l_0_15_152)))
 (let ((?x51686 (* ?x51685 l_0_15_164)))
 (let ((?x51682 (* 2.0 l_0_15_151)))
 (let ((?x51683 (* ?x51682 l_0_15_163)))
 (let ((?x51660 (* 2.0 l_0_15_111)))
 (let ((?x51661 (* ?x51660 l_0_15_123)))
 (let ((?x51657 (* 2.0 l_0_15_110)))
 (let ((?x51658 (* ?x51657 l_0_15_122)))
 (let ((?x51654 (* 2.0 l_0_15_109)))
 (let ((?x51655 (* ?x51654 l_0_15_121)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x51652 (* ?x51651 l_0_15_90)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x51649 (* ?x50737 l_0_15_89)))
 (let ((?x32443 (- (- (+ (+ (* (* 2.0 l_0_15_100) l_0_15_88) ?x51649) ?x51652) ?x51655) ?x51658)))
 (let ((?x53729 (- (- (- (+ (+ (+ (- ?x32443 ?x51661) ?x51683) ?x51686) ?x51689) ?x51692) ?x51695) ?x51698)))
 (= ?x53729 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53669 (* l_0_15_94 l_0_15_94)))
 (let ((?x53667 (* l_0_15_93 l_0_15_93)))
 (let ((?x53665 (* l_0_15_92 l_0_15_92)))
 (let ((?x53663 (* l_0_15_91 l_0_15_91)))
 (let ((?x53661 (* l_0_15_178 l_0_15_178)))
 (let ((?x53659 (* l_0_15_177 l_0_15_177)))
 (let ((?x53657 (* l_0_15_176 l_0_15_176)))
 (let ((?x53655 (* l_0_15_175 l_0_15_175)))
 (let ((?x53653 (* l_0_15_157 l_0_15_157)))
 (let ((?x53651 (* l_0_15_156 l_0_15_156)))
 (let ((?x53649 (* l_0_15_155 l_0_15_155)))
 (let ((?x53647 (* l_0_15_154 l_0_15_154)))
 (let ((?x53645 (* l_0_15_115 l_0_15_115)))
 (let ((?x53643 (* l_0_15_114 l_0_15_114)))
 (let ((?x53736 (- (- (* (- l_0_15_112) l_0_15_112) (* l_0_15_113 l_0_15_113)) ?x53643)))
 (let ((?x53743 (- (- (+ (+ (+ (+ (- ?x53736 ?x53645) ?x53647) ?x53649) ?x53651) ?x53653) ?x53655) ?x53657)))
 (= (+ (+ (+ (+ (- (- ?x53743 ?x53659) ?x53661) ?x53663) ?x53665) ?x53667) ?x53669) 0.0))))))))))))))))))
(assert
 (let ((?x53415 (* (* 2.0 l_0_15_94) l_0_15_98)))
 (let ((?x53412 (* (* 2.0 l_0_15_93) l_0_15_97)))
 (let ((?x53409 (* (* 2.0 l_0_15_92) l_0_15_96)))
 (let ((?x53406 (* (* 2.0 l_0_15_91) l_0_15_95)))
 (let ((?x52032 (* 2.0 l_0_15_178)))
 (let ((?x53395 (* ?x52032 l_0_15_182)))
 (let ((?x52029 (* 2.0 l_0_15_177)))
 (let ((?x41573 (* ?x52029 l_0_15_181)))
 (let ((?x52026 (* 2.0 l_0_15_176)))
 (let ((?x31515 (* ?x52026 l_0_15_180)))
 (let ((?x52023 (* 2.0 l_0_15_175)))
 (let ((?x31514 (* ?x52023 l_0_15_179)))
 (let ((?x52020 (* 2.0 l_0_15_157)))
 (let ((?x20202 (* ?x52020 l_0_15_161)))
 (let ((?x52017 (* 2.0 l_0_15_156)))
 (let ((?x42481 (* ?x52017 l_0_15_160)))
 (let ((?x52014 (* 2.0 l_0_15_155)))
 (let ((?x42483 (* ?x52014 l_0_15_159)))
 (let ((?x52011 (* 2.0 l_0_15_154)))
 (let ((?x42477 (* ?x52011 l_0_15_158)))
 (let ((?x52000 (* 2.0 l_0_15_115)))
 (let ((?x42475 (* ?x52000 l_0_15_119)))
 (let ((?x51997 (* 2.0 l_0_15_114)))
 (let ((?x20690 (* ?x51997 l_0_15_118)))
 (let ((?x51994 (* 2.0 l_0_15_113)))
 (let ((?x42554 (* ?x51994 l_0_15_117)))
 (let ((?x53758 (+ (- (- (- (* (* (- 2.0) l_0_15_112) l_0_15_116) ?x42554) ?x20690) ?x42475) ?x42477)))
 (let ((?x53765 (- (- (- (- (+ (+ (+ ?x53758 ?x42483) ?x42481) ?x20202) ?x31514) ?x31515) ?x41573) ?x53395)))
 (= (+ (+ (+ (+ ?x53765 ?x53406) ?x53409) ?x53412) ?x53415) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52032 (* 2.0 l_0_15_178)))
 (let ((?x52033 (* ?x52032 l_0_15_187)))
 (let ((?x52029 (* 2.0 l_0_15_177)))
 (let ((?x52030 (* ?x52029 l_0_15_186)))
 (let ((?x52026 (* 2.0 l_0_15_176)))
 (let ((?x52027 (* ?x52026 l_0_15_185)))
 (let ((?x52023 (* 2.0 l_0_15_175)))
 (let ((?x52024 (* ?x52023 l_0_15_184)))
 (let ((?x52020 (* 2.0 l_0_15_157)))
 (let ((?x52021 (* ?x52020 l_0_15_166)))
 (let ((?x52017 (* 2.0 l_0_15_156)))
 (let ((?x52018 (* ?x52017 l_0_15_165)))
 (let ((?x52014 (* 2.0 l_0_15_155)))
 (let ((?x52015 (* ?x52014 l_0_15_164)))
 (let ((?x52011 (* 2.0 l_0_15_154)))
 (let ((?x52012 (* ?x52011 l_0_15_163)))
 (let ((?x52000 (* 2.0 l_0_15_115)))
 (let ((?x52001 (* ?x52000 l_0_15_124)))
 (let ((?x51997 (* 2.0 l_0_15_114)))
 (let ((?x51998 (* ?x51997 l_0_15_123)))
 (let ((?x51994 (* 2.0 l_0_15_113)))
 (let ((?x51995 (* ?x51994 l_0_15_122)))
 (let ((?x51991 (* 2.0 l_0_15_112)))
 (let ((?x51992 (* ?x51991 l_0_15_121)))
 (let ((?x51988 (* 2.0 l_0_15_103)))
 (let ((?x51989 (* ?x51988 l_0_15_94)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x51986 (* ?x51651 l_0_15_93)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x51984 (* ?x50737 l_0_15_92)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x51982 (* ?x50734 l_0_15_91)))
 (let ((?x53773 (- (- (- (- (+ (+ (+ ?x51982 ?x51984) ?x51986) ?x51989) ?x51992) ?x51995) ?x51998) ?x52001)))
 (let ((?x53780 (- (- (- (+ (+ (+ (+ ?x53773 ?x52012) ?x52015) ?x52018) ?x52021) ?x52024) ?x52027) ?x52030)))
 (= (- ?x53780 ?x52033) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53499 (* l_0_15_99 l_0_15_99)))
 (let ((?x53497 (* l_0_15_98 l_0_15_98)))
 (let ((?x53495 (* l_0_15_97 l_0_15_97)))
 (let ((?x53493 (* l_0_15_96 l_0_15_96)))
 (let ((?x53491 (* l_0_15_95 l_0_15_95)))
 (let ((?x53481 (* l_0_15_183 l_0_15_183)))
 (let ((?x53479 (* l_0_15_182 l_0_15_182)))
 (let ((?x53477 (* l_0_15_181 l_0_15_181)))
 (let ((?x53475 (* l_0_15_180 l_0_15_180)))
 (let ((?x53473 (* l_0_15_179 l_0_15_179)))
 (let ((?x53471 (* l_0_15_162 l_0_15_162)))
 (let ((?x53469 (* l_0_15_161 l_0_15_161)))
 (let ((?x53467 (* l_0_15_160 l_0_15_160)))
 (let ((?x53465 (* l_0_15_159 l_0_15_159)))
 (let ((?x53463 (* l_0_15_158 l_0_15_158)))
 (let ((?x53461 (* l_0_15_120 l_0_15_120)))
 (let ((?x53459 (* l_0_15_119 l_0_15_119)))
 (let ((?x53457 (* l_0_15_118 l_0_15_118)))
 (let ((?x43718 (- (- (* (- l_0_15_116) l_0_15_116) (* l_0_15_117 l_0_15_117)) ?x53457)))
 (let ((?x4489 (+ (+ (+ (+ (+ (- (- ?x43718 ?x53459) ?x53461) ?x53463) ?x53465) ?x53467) ?x53469) ?x53471)))
 (let ((?x32749 (+ (+ (- (- (- (- (- ?x4489 ?x53473) ?x53475) ?x53477) ?x53479) ?x53481) ?x53491) ?x53493)))
 (= (+ (+ (+ ?x32749 ?x53495) ?x53497) ?x53499) 0.0)))))))))))))))))))))))
(assert
 (let ((?x52230 (* (* 2.0 l_0_15_183) l_0_15_188)))
 (let ((?x52227 (* (* 2.0 l_0_15_182) l_0_15_187)))
 (let ((?x52224 (* (* 2.0 l_0_15_181) l_0_15_186)))
 (let ((?x52221 (* (* 2.0 l_0_15_180) l_0_15_185)))
 (let ((?x52218 (* (* 2.0 l_0_15_179) l_0_15_184)))
 (let ((?x52215 (* (* 2.0 l_0_15_162) l_0_15_167)))
 (let ((?x52212 (* (* 2.0 l_0_15_161) l_0_15_166)))
 (let ((?x52209 (* (* 2.0 l_0_15_160) l_0_15_165)))
 (let ((?x52206 (* (* 2.0 l_0_15_159) l_0_15_164)))
 (let ((?x52203 (* (* 2.0 l_0_15_158) l_0_15_163)))
 (let ((?x52190 (* (* 2.0 l_0_15_120) l_0_15_125)))
 (let ((?x52185 (* (* 2.0 l_0_15_119) l_0_15_124)))
 (let ((?x52182 (* (* 2.0 l_0_15_118) l_0_15_123)))
 (let ((?x52179 (* (* 2.0 l_0_15_117) l_0_15_122)))
 (let ((?x52176 (* (* 2.0 l_0_15_116) l_0_15_121)))
 (let ((?x52171 (* (* 2.0 l_0_15_104) l_0_15_99)))
 (let ((?x51988 (* 2.0 l_0_15_103)))
 (let ((?x52168 (* ?x51988 l_0_15_98)))
 (let ((?x51651 (* 2.0 l_0_15_102)))
 (let ((?x52166 (* ?x51651 l_0_15_97)))
 (let ((?x50737 (* 2.0 l_0_15_101)))
 (let ((?x52164 (* ?x50737 l_0_15_96)))
 (let ((?x50734 (* 2.0 l_0_15_100)))
 (let ((?x52162 (* ?x50734 l_0_15_95)))
 (let ((?x32929 (- (- (- (+ (+ (+ (+ ?x52162 ?x52164) ?x52166) ?x52168) ?x52171) ?x52176) ?x52179) ?x52182)))
 (let ((?x53802 (+ (+ (+ (+ (+ (- (- ?x32929 ?x52185) ?x52190) ?x52203) ?x52206) ?x52209) ?x52212) ?x52215)))
 (= (- (- (- (- (- ?x53802 ?x52218) ?x52221) ?x52224) ?x52227) ?x52230) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x52434 (* l_0_15_189 l_0_15_189)))
 (let ((?x52432 (* l_0_15_188 l_0_15_188)))
 (let ((?x52430 (* l_0_15_187 l_0_15_187)))
 (let ((?x52428 (* l_0_15_186 l_0_15_186)))
 (let ((?x52426 (* l_0_15_185 l_0_15_185)))
 (let ((?x52424 (* l_0_15_184 l_0_15_184)))
 (let ((?x52420 (* l_0_15_168 l_0_15_168)))
 (let ((?x52418 (* l_0_15_167 l_0_15_167)))
 (let ((?x52416 (* l_0_15_166 l_0_15_166)))
 (let ((?x52414 (* l_0_15_165 l_0_15_165)))
 (let ((?x52412 (* l_0_15_164 l_0_15_164)))
 (let ((?x52410 (* l_0_15_163 l_0_15_163)))
 (let ((?x52403 (* l_0_15_126 l_0_15_126)))
 (let ((?x52401 (* l_0_15_125 l_0_15_125)))
 (let ((?x52399 (* l_0_15_124 l_0_15_124)))
 (let ((?x52397 (* l_0_15_123 l_0_15_123)))
 (let ((?x52395 (* l_0_15_122 l_0_15_122)))
 (let ((?x52393 (* l_0_15_121 l_0_15_121)))
 (let ((?x52391 (* l_0_15_105 l_0_15_105)))
 (let ((?x52389 (* l_0_15_104 l_0_15_104)))
 (let ((?x52387 (* l_0_15_103 l_0_15_103)))
 (let ((?x52385 (* l_0_15_102 l_0_15_102)))
 (let ((?x33042 (+ (+ (* l_0_15_100 l_0_15_100) (* l_0_15_101 l_0_15_101)) ?x52385)))
 (let ((?x21655 (- (- (- (- (+ (+ (+ ?x33042 ?x52387) ?x52389) ?x52391) ?x52393) ?x52395) ?x52397) ?x52399)))
 (let ((?x53809 (+ (+ (+ (+ (+ (- (- ?x21655 ?x52401) ?x52403) ?x52410) ?x52412) ?x52414) ?x52416) ?x52418)))
 (let ((?x53816 (- (- (- (- (- (- (+ ?x53809 ?x52420) ?x52424) ?x52426) ?x52428) ?x52430) ?x52432) ?x52434)))
 (= ?x53816 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x51575 (* l_0_15_132 l_0_15_132)))
 (let ((?x21819 (- (- (* (- l_0_15_130) l_0_15_130) (* l_0_15_131 l_0_15_131)) ?x51575)))
 (= ?x21819 0.0))))
(assert
 (>= l_0_15_1 0.0))
(assert
 (>= l_0_15_3 0.0))
(assert
 (>= l_0_15_6 0.0))
(assert
 (>= l_0_15_10 0.0))
(assert
 (>= l_0_15_15 0.0))
(assert
 (>= l_0_15_21 0.0))
(assert
 (>= l_0_15_22 0.0))
(assert
 (>= l_0_15_24 0.0))
(assert
 (>= l_0_15_27 0.0))
(assert
 (>= l_0_15_31 0.0))
(assert
 (>= l_0_15_36 0.0))
(assert
 (>= l_0_15_42 0.0))
(assert
 (>= l_0_15_43 0.0))
(assert
 (>= l_0_15_45 0.0))
(assert
 (>= l_0_15_48 0.0))
(assert
 (>= l_0_15_52 0.0))
(assert
 (>= l_0_15_57 0.0))
(assert
 (>= l_0_15_63 0.0))
(assert
 (>= l_0_15_64 0.0))
(assert
 (>= l_0_15_66 0.0))
(assert
 (>= l_0_15_69 0.0))
(assert
 (>= l_0_15_73 0.0))
(assert
 (>= l_0_15_78 0.0))
(assert
 (>= l_0_15_84 0.0))
(assert
 (>= l_0_15_85 0.0))
(assert
 (>= l_0_15_87 0.0))
(assert
 (>= l_0_15_90 0.0))
(assert
 (>= l_0_15_94 0.0))
(assert
 (>= l_0_15_99 0.0))
(assert
 (>= l_0_15_105 0.0))
(assert
 (>= l_0_15_106 0.0))
(assert
 (>= l_0_15_108 0.0))
(assert
 (>= l_0_15_111 0.0))
(assert
 (>= l_0_15_115 0.0))
(assert
 (>= l_0_15_120 0.0))
(assert
 (>= l_0_15_126 0.0))
(assert
 (>= l_0_15_127 0.0))
(assert
 (>= l_0_15_129 0.0))
(assert
 (>= l_0_15_132 0.0))
(assert
 (>= l_0_15_136 0.0))
(assert
 (>= l_0_15_141 0.0))
(assert
 (>= l_0_15_147 0.0))
(assert
 (>= l_0_15_148 0.0))
(assert
 (>= l_0_15_150 0.0))
(assert
 (>= l_0_15_153 0.0))
(assert
 (>= l_0_15_157 0.0))
(assert
 (>= l_0_15_162 0.0))
(assert
 (>= l_0_15_168 0.0))
(assert
 (>= l_0_15_169 0.0))
(assert
 (>= l_0_15_171 0.0))
(assert
 (>= l_0_15_174 0.0))
(assert
 (>= l_0_15_178 0.0))
(assert
 (>= l_0_15_183 0.0))
(assert
 (>= l_0_15_189 0.0))
(assert
 (>= l_0_15_190 0.0))
(assert
 (>= l_0_15_192 0.0))
(assert
 (>= l_0_15_195 0.0))
(assert
 (>= l_0_15_199 0.0))
(assert
 (>= l_0_15_204 0.0))
(assert
 (>= l_0_15_210 0.0))
(assert
 (>= l_0_15_211 0.0))
(assert
 (>= l_0_15_213 0.0))
(assert
 (>= l_0_15_216 0.0))
(assert
 (>= l_0_15_220 0.0))
(assert
 (>= l_0_15_225 0.0))
(assert
 (>= l_0_15_231 0.0))
(assert
 (>= l_0_15_232 0.0))
(assert
 (>= l_0_15_234 0.0))
(assert
 (>= l_0_15_237 0.0))
(assert
 (>= l_0_15_241 0.0))
(assert
 (>= l_0_15_246 0.0))
(assert
 (>= l_0_15_252 0.0))
(assert
 (let ((?x53891 (* l_0_16_253 l_0_16_253)))
 (let ((?x53889 (* l_0_16_232 l_0_16_232)))
 (let ((?x53887 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x53884 (* l_0_16_211 l_0_16_211)))
 (let ((?x53882 (* l_0_16_190 l_0_16_190)))
 (let ((?x53888 (- (- (- (+ _a_6_ (* 6.0 (* l_0_16_1 l_0_16_1))) ?x53882) ?x53884) ?x53887)))
 (let ((?x53898 (+ (- (- (- ?x53888 ?x53889) ?x53891) (* (* 1.0 l_0_16_43) l_0_16_43)) (* 1.0 (* l_0_16_64 l_0_16_64)))))
 (= (- ?x53898 7.0) 0.0)))))))))
(assert
 (let ((?x53954 (* l_0_16_3 l_0_16_3)))
 (let ((?x53955 (* 6.0 ?x53954)))
 (let ((?x53952 (* l_0_16_255 l_0_16_255)))
 (let ((?x53950 (* l_0_16_254 l_0_16_254)))
 (let ((?x53948 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53945 (* l_0_16_234 l_0_16_234)))
 (let ((?x53943 (* l_0_16_233 l_0_16_233)))
 (let ((?x53941 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x53935 (* l_0_16_213 l_0_16_213)))
 (let ((?x53933 (* l_0_16_212 l_0_16_212)))
 (let ((?x53930 (* l_0_16_2 l_0_16_2)))
 (let ((?x53931 (* 6.0 ?x53930)))
 (let ((?x53928 (* l_0_16_192 l_0_16_192)))
 (let ((?x53926 (* l_0_16_191 l_0_16_191)))
 (let ((?x53932 (+ (- (- (- _a_7_ (* (* 2.0 l_0_16_1) l_0_16_2)) ?x53926) ?x53928) ?x53931)))
 (let ((?x53942 (- (+ (- (- ?x53932 ?x53933) ?x53935) (* (* 2.0 l_0_16_22) l_0_16_23)) ?x53941)))
 (let ((?x53959 (- (+ (- (- (- (- (- ?x53942 ?x53943) ?x53945) ?x53948) ?x53950) ?x53952) ?x53955) (* (* 1.0 l_0_16_44) l_0_16_44))))
 (let ((?x53965 (+ (- ?x53959 (* (* 1.0 l_0_16_45) l_0_16_45)) (* 1.0 (* l_0_16_65 l_0_16_65)))))
 (= (+ ?x53965 (* 1.0 (* l_0_16_66 l_0_16_66))) 0.0))))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54059 (* ?x54058 l_0_16_75)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54056 (* ?x54055 l_0_16_74)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54053 (* ?x54052 l_0_16_65)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54050 (* ?x54049 l_0_16_54)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54047 (* ?x54046 l_0_16_53)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54044 (* ?x54043 l_0_16_44)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54035 (* ?x54034 l_0_16_33)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54026 (* ?x54025 l_0_16_32)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x54009 (* ?x54008 l_0_16_3)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x54006 (* ?x54005 l_0_16_2)))
 (let ((?x54013 (- (+ (+ (- _a_8_ (* (* 2.0 l_0_16_1) l_0_16_11)) ?x54006) ?x54009) (* (* 2.0 l_0_16_191) l_0_16_200))))
 (let ((?x54019 (- (- ?x54013 (* (* 2.0 l_0_16_192) l_0_16_201)) (* (* 2.0 l_0_16_212) l_0_16_221))))
 (let ((?x54024 (+ (- ?x54019 (* (* 2.0 l_0_16_213) l_0_16_222)) (* (* 2.0 l_0_16_22) l_0_16_32))))
 (let ((?x54033 (- (- (- ?x54024 ?x54026) (* (* 2.0 l_0_16_233) l_0_16_242)) (* (* 2.0 l_0_16_234) l_0_16_243))))
 (let ((?x54042 (- (- (- ?x54033 ?x54035) (* (* 2.0 l_0_16_254) l_0_16_263)) (* (* 2.0 l_0_16_255) l_0_16_264))))
 (= (+ (+ (- (- (- (+ ?x54042 ?x54044) ?x54047) ?x54050) ?x54053) ?x54056) ?x54059) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54053 (* ?x54052 l_0_16_65)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54044 (* ?x54043 l_0_16_44)))
 (let ((?x33215 (* l_0_16_22 l_0_16_22)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x54123 (* ?x54122 l_0_16_23)))
 (let ((?x53879 (* l_0_16_1 l_0_16_1)))
 (let ((?x54118 (- (- (+ _a_9_ (* (* 12.0 l_0_16_1) l_0_16_2)) ?x53879) (* (* 2.0 l_0_16_190) l_0_16_191))))
 (let ((?x54128 (- (+ (- (- ?x54118 (* (* 2.0 l_0_16_211) l_0_16_212)) ?x54123) ?x33215) (* (* 2.0 l_0_16_232) l_0_16_233))))
 (= (+ (- (- ?x54128 (* (* 2.0 l_0_16_253) l_0_16_254)) ?x54044) ?x54053) 0.0))))))))))))
(assert
 (let ((?x53896 (* l_0_16_64 l_0_16_64)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54162 (* ?x54052 l_0_16_74)))
 (let ((?x21910 (* l_0_16_43 l_0_16_43)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54159 (* ?x54043 l_0_16_53)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x44049 (* ?x54122 l_0_16_32)))
 (let ((?x22088 (- (+ _a_10_ (* (* 12.0 l_0_16_1) l_0_16_11)) (* (* 2.0 l_0_16_190) l_0_16_200))))
 (let ((?x22095 (- (- (- ?x22088 (* (* 2.0 l_0_16_211) l_0_16_221)) ?x44049) (* (* 2.0 l_0_16_232) l_0_16_242))))
 (let ((?x54163 (+ (+ (- (- ?x22095 (* (* 2.0 l_0_16_253) l_0_16_263)) ?x54159) ?x21910) ?x54162)))
 (= (- ?x54163 ?x53896) 0.0)))))))))))))
(assert
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54162 (* ?x54052 l_0_16_74)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54159 (* ?x54043 l_0_16_53)))
 (let ((?x54250 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x54247 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x54244 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x54241 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x54238 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x54235 (* l_0_16_267 l_0_16_267)))
 (let ((?x54233 (* l_0_16_266 l_0_16_266)))
 (let ((?x54231 (* l_0_16_265 l_0_16_265)))
 (let ((?x54229 (* l_0_16_264 l_0_16_264)))
 (let ((?x54227 (* l_0_16_263 l_0_16_263)))
 (let ((?x54225 (* l_0_16_246 l_0_16_246)))
 (let ((?x54223 (* l_0_16_245 l_0_16_245)))
 (let ((?x54221 (* l_0_16_244 l_0_16_244)))
 (let ((?x54219 (* l_0_16_243 l_0_16_243)))
 (let ((?x54217 (* l_0_16_242 l_0_16_242)))
 (let ((?x54215 (* l_0_16_225 l_0_16_225)))
 (let ((?x54213 (* l_0_16_224 l_0_16_224)))
 (let ((?x54211 (* l_0_16_223 l_0_16_223)))
 (let ((?x54209 (* l_0_16_222 l_0_16_222)))
 (let ((?x54207 (* l_0_16_221 l_0_16_221)))
 (let ((?x54205 (* l_0_16_204 l_0_16_204)))
 (let ((?x54203 (* l_0_16_203 l_0_16_203)))
 (let ((?x54201 (* l_0_16_202 l_0_16_202)))
 (let ((?x54199 (* l_0_16_201 l_0_16_201)))
 (let ((?x54197 (* l_0_16_200 l_0_16_200)))
 (let ((?x54194 (* l_0_16_15 l_0_16_15)))
 (let ((?x54195 (* 6.0 ?x54194)))
 (let ((?x54191 (* l_0_16_14 l_0_16_14)))
 (let ((?x54192 (* 6.0 ?x54191)))
 (let ((?x54188 (* l_0_16_13 l_0_16_13)))
 (let ((?x54189 (* 6.0 ?x54188)))
 (let ((?x54185 (* l_0_16_12 l_0_16_12)))
 (let ((?x54186 (* 6.0 ?x54185)))
 (let ((?x54193 (+ (+ (+ (+ _a_11_ (* 6.0 (* l_0_16_11 l_0_16_11))) ?x54186) ?x54189) ?x54192)))
 (let ((?x54208 (- (- (- (- (- (- (+ ?x54193 ?x54195) ?x54197) ?x54199) ?x54201) ?x54203) ?x54205) ?x54207)))
 (let ((?x54222 (- (- (- (- (- (- (- ?x54208 ?x54209) ?x54211) ?x54213) ?x54215) ?x54217) ?x54219) ?x54221)))
 (let ((?x54236 (- (- (- (- (- (- (- ?x54222 ?x54223) ?x54225) ?x54227) ?x54229) ?x54231) ?x54233) ?x54235)))
 (let ((?x54255 (- (+ (- (- (- (- (- ?x54236 ?x54238) ?x54241) ?x54244) ?x54247) ?x54250) ?x54159) (* (* 1.0 l_0_16_53) l_0_16_53))))
 (let ((?x54261 (- (- ?x54255 (* (* 1.0 l_0_16_54) l_0_16_54)) (* (* 1.0 l_0_16_55) l_0_16_55))))
 (let ((?x54267 (- (- ?x54261 (* (* 1.0 l_0_16_56) l_0_16_56)) (* (* 1.0 l_0_16_57) l_0_16_57))))
 (let ((?x54274 (+ (+ (- ?x54267 ?x54162) (* 1.0 (* l_0_16_74 l_0_16_74))) (* 1.0 (* l_0_16_75 l_0_16_75)))))
 (let ((?x54280 (+ (+ ?x54274 (* 1.0 (* l_0_16_76 l_0_16_76))) (* 1.0 (* l_0_16_77 l_0_16_77)))))
 (= (+ ?x54280 (* 1.0 (* l_0_16_78 l_0_16_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53896 (* l_0_16_64 l_0_16_64)))
 (let ((?x54436 (* 3.0 ?x53896)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x54434 (* ?x54433 l_0_16_79)))
 (let ((?x54413 (* (* 3.0 l_0_16_43) l_0_16_43)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x54410 (* ?x54409 l_0_16_58)))
 (let ((?x54407 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x54404 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x54401 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x54398 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x54395 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x54392 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x54389 (* l_0_16_273 l_0_16_273)))
 (let ((?x54387 (* l_0_16_272 l_0_16_272)))
 (let ((?x54385 (* l_0_16_271 l_0_16_271)))
 (let ((?x54383 (* l_0_16_270 l_0_16_270)))
 (let ((?x54381 (* l_0_16_269 l_0_16_269)))
 (let ((?x54379 (* l_0_16_268 l_0_16_268)))
 (let ((?x54377 (* l_0_16_252 l_0_16_252)))
 (let ((?x54375 (* l_0_16_251 l_0_16_251)))
 (let ((?x54373 (* l_0_16_250 l_0_16_250)))
 (let ((?x54371 (* l_0_16_249 l_0_16_249)))
 (let ((?x54369 (* l_0_16_248 l_0_16_248)))
 (let ((?x54367 (* l_0_16_247 l_0_16_247)))
 (let ((?x54365 (* l_0_16_231 l_0_16_231)))
 (let ((?x54363 (* l_0_16_230 l_0_16_230)))
 (let ((?x54361 (* l_0_16_229 l_0_16_229)))
 (let ((?x54359 (* l_0_16_228 l_0_16_228)))
 (let ((?x54357 (* l_0_16_227 l_0_16_227)))
 (let ((?x54355 (* l_0_16_226 l_0_16_226)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x54353 (* ?x54122 l_0_16_37)))
 (let ((?x54351 (* l_0_16_210 l_0_16_210)))
 (let ((?x54348 (* l_0_16_21 l_0_16_21)))
 (let ((?x54349 (* 6.0 ?x54348)))
 (let ((?x54346 (* l_0_16_209 l_0_16_209)))
 (let ((?x54344 (* l_0_16_208 l_0_16_208)))
 (let ((?x54342 (* l_0_16_207 l_0_16_207)))
 (let ((?x54340 (* l_0_16_206 l_0_16_206)))
 (let ((?x54338 (* l_0_16_205 l_0_16_205)))
 (let ((?x54335 (* l_0_16_20 l_0_16_20)))
 (let ((?x54336 (* 6.0 ?x54335)))
 (let ((?x54332 (* l_0_16_19 l_0_16_19)))
 (let ((?x54333 (* 6.0 ?x54332)))
 (let ((?x54329 (* l_0_16_18 l_0_16_18)))
 (let ((?x54330 (* 6.0 ?x54329)))
 (let ((?x54326 (* l_0_16_17 l_0_16_17)))
 (let ((?x54327 (* 6.0 ?x54326)))
 (let ((?x54323 (* l_0_16_16 l_0_16_16)))
 (let ((?x54324 (* 6.0 ?x54323)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x54321 (* ?x54320 l_0_16_142)))
 (let ((?x54112 (* 12.0 l_0_16_1)))
 (let ((?x33591 (* ?x54112 l_0_16_16)))
 (let ((?x54339 (- (+ (+ (+ (+ (+ (+ ?x33591 ?x54321) ?x54324) ?x54327) ?x54330) ?x54333) ?x54336) ?x54338)))
 (let ((?x54354 (- (- (+ (- (- (- (- ?x54339 ?x54340) ?x54342) ?x54344) ?x54346) ?x54349) ?x54351) ?x54353)))
 (let ((?x54368 (- (- (- (- (- (- (- ?x54354 ?x54355) ?x54357) ?x54359) ?x54361) ?x54363) ?x54365) ?x54367)))
 (let ((?x54382 (- (- (- (- (- (- (- ?x54368 ?x54369) ?x54371) ?x54373) ?x54375) ?x54377) ?x54379) ?x54381)))
 (let ((?x54399 (- (- (- (- (- (- (- ?x54382 ?x54383) ?x54385) ?x54387) ?x54389) ?x54392) ?x54395) ?x54398)))
 (let ((?x54417 (- (- (- (- (- (- ?x54399 ?x54401) ?x54404) ?x54407) ?x54410) ?x54413) (* (* 1.0 l_0_16_58) l_0_16_58))))
 (let ((?x54423 (- (- ?x54417 (* (* 1.0 l_0_16_59) l_0_16_59)) (* (* 1.0 l_0_16_60) l_0_16_60))))
 (let ((?x54429 (- (- ?x54423 (* (* 1.0 l_0_16_61) l_0_16_61)) (* (* 1.0 l_0_16_62) l_0_16_62))))
 (let ((?x54440 (+ (+ (+ (- ?x54429 (* (* 1.0 l_0_16_63) l_0_16_63)) ?x54434) ?x54436) (* 1.0 (* l_0_16_79 l_0_16_79)))))
 (let ((?x54446 (+ (+ ?x54440 (* 1.0 (* l_0_16_80 l_0_16_80))) (* 1.0 (* l_0_16_81 l_0_16_81)))))
 (let ((?x54452 (+ (+ ?x54446 (* 1.0 (* l_0_16_82 l_0_16_82))) (* 1.0 (* l_0_16_83 l_0_16_83)))))
 (= (- (+ ?x54452 (* 1.0 (* l_0_16_84 l_0_16_84))) 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53896 (* l_0_16_64 l_0_16_64)))
 (let ((?x54436 (* 3.0 ?x53896)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54572 (* ?x54052 l_0_16_79)))
 (let ((?x54413 (* (* 3.0 l_0_16_43) l_0_16_43)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54569 (* ?x54043 l_0_16_58)))
 (let ((?x53887 (* (* 6.0 l_0_16_22) l_0_16_22)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x54353 (* ?x54122 l_0_16_37)))
 (let ((?x54557 (* l_0_16_127 l_0_16_127)))
 (let ((?x53879 (* l_0_16_1 l_0_16_1)))
 (let ((?x53880 (* 6.0 ?x53879)))
 (let ((?x54112 (* 12.0 l_0_16_1)))
 (let ((?x33591 (* ?x54112 l_0_16_16)))
 (let ((?x54562 (- (- (+ (+ ?x33591 ?x53880) ?x54557) (* (* 2.0 l_0_16_190) l_0_16_205)) (* (* 2.0 l_0_16_211) l_0_16_226))))
 (let ((?x54568 (- (- (- (- ?x54562 ?x54353) ?x53887) (* (* 2.0 l_0_16_232) l_0_16_247)) (* (* 2.0 l_0_16_253) l_0_16_268))))
 (= (- (+ (+ (- (- ?x54568 ?x54569) ?x54413) ?x54572) ?x54436) 9.0) 0.0)))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54639 (* ?x54058 l_0_16_68)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54637 (* ?x54055 l_0_16_67)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54635 (* ?x54049 l_0_16_47)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54633 (* ?x54046 l_0_16_46)))
 (let ((?x54630 (* 12.0 l_0_16_3)))
 (let ((?x54631 (* ?x54630 l_0_16_5)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54624 (* ?x54034 l_0_16_26)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54618 (* ?x54025 l_0_16_25)))
 (let ((?x54609 (* 12.0 l_0_16_2)))
 (let ((?x54610 (* ?x54609 l_0_16_4)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x54603 (* ?x54320 l_0_16_128)))
 (let ((?x54606 (- (- (* (* (- 2.0) l_0_16_1) l_0_16_4) ?x54603) (* (* 2.0 l_0_16_191) l_0_16_193))))
 (let ((?x54613 (- (+ (- ?x54606 (* (* 2.0 l_0_16_192) l_0_16_194)) ?x54610) (* (* 2.0 l_0_16_212) l_0_16_214))))
 (let ((?x54617 (+ (- ?x54613 (* (* 2.0 l_0_16_213) l_0_16_215)) (* (* 2.0 l_0_16_22) l_0_16_25))))
 (let ((?x54623 (- (- (- ?x54617 ?x54618) (* (* 2.0 l_0_16_233) l_0_16_235)) (* (* 2.0 l_0_16_234) l_0_16_236))))
 (let ((?x54629 (- (- (- ?x54623 ?x54624) (* (* 2.0 l_0_16_254) l_0_16_256)) (* (* 2.0 l_0_16_255) l_0_16_257))))
 (= (+ (+ (- (- (+ ?x54629 ?x54631) ?x54633) ?x54635) ?x54637) ?x54639) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x54722 (* ?x54721 l_0_16_86)))
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54719 (* ?x54058 l_0_16_71)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54717 (* ?x54055 l_0_16_70)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54715 (* ?x54049 l_0_16_50)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54713 (* ?x54046 l_0_16_49)))
 (let ((?x54630 (* 12.0 l_0_16_3)))
 (let ((?x54711 (* ?x54630 l_0_16_8)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54705 (* ?x54034 l_0_16_29)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54699 (* ?x54025 l_0_16_28)))
 (let ((?x54609 (* 12.0 l_0_16_2)))
 (let ((?x54691 (* ?x54609 l_0_16_7)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x54685 (* ?x54684 l_0_16_170)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x54682 (* ?x54681 l_0_16_149)))
 (let ((?x54680 (+ (* (* (- 2.0) l_0_16_1) l_0_16_7) (* (* 2.0 l_0_16_106) l_0_16_107))))
 (let ((?x54690 (- (- (+ (- ?x54680 ?x54682) ?x54685) (* (* 2.0 l_0_16_191) l_0_16_196)) (* (* 2.0 l_0_16_192) l_0_16_197))))
 (let ((?x54696 (- (- (+ ?x54690 ?x54691) (* (* 2.0 l_0_16_212) l_0_16_217)) (* (* 2.0 l_0_16_213) l_0_16_218))))
 (let ((?x54702 (- (- (+ ?x54696 (* (* 2.0 l_0_16_22) l_0_16_28)) ?x54699) (* (* 2.0 l_0_16_233) l_0_16_238))))
 (let ((?x54708 (- (- (- ?x54702 (* (* 2.0 l_0_16_234) l_0_16_239)) ?x54705) (* (* 2.0 l_0_16_254) l_0_16_259))))
 (let ((?x54716 (- (- (+ (- ?x54708 (* (* 2.0 l_0_16_255) l_0_16_260)) ?x54711) ?x54713) ?x54715)))
 (= (- (+ (+ ?x54716 ?x54717) ?x54719) ?x54722) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54856 (* ?x54058 l_0_16_80)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54854 (* ?x54055 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x54852 (* ?x54433 l_0_16_65)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54850 (* ?x54049 l_0_16_59)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54848 (* ?x54046 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x54846 (* ?x54409 l_0_16_44)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54840 (* ?x54034 l_0_16_38)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54834 (* ?x54025 l_0_16_37)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x54123 (* ?x54122 l_0_16_23)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x54821 (* ?x54820 l_0_16_3)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x54818 (* ?x54817 l_0_16_2)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x54603 (* ?x54320 l_0_16_128)))
 (let ((?x54112 (* 12.0 l_0_16_1)))
 (let ((?x54113 (* ?x54112 l_0_16_2)))
 (let ((?x54822 (+ (+ (+ (+ (* (* (- 2.0) l_0_16_1) l_0_16_16) ?x54113) ?x54603) ?x54818) ?x54821)))
 (let ((?x54826 (- (- ?x54822 (* (* 2.0 l_0_16_191) l_0_16_205)) (* (* 2.0 l_0_16_192) l_0_16_206))))
 (let ((?x54830 (- (- ?x54826 (* (* 2.0 l_0_16_212) l_0_16_226)) (* (* 2.0 l_0_16_213) l_0_16_227))))
 (let ((?x54837 (- (- (+ (- ?x54830 ?x54123) (* (* 2.0 l_0_16_22) l_0_16_37)) ?x54834) (* (* 2.0 l_0_16_233) l_0_16_247))))
 (let ((?x54843 (- (- (- ?x54837 (* (* 2.0 l_0_16_234) l_0_16_248)) ?x54840) (* (* 2.0 l_0_16_254) l_0_16_268))))
 (let ((?x54851 (- (- (- (- ?x54843 (* (* 2.0 l_0_16_255) l_0_16_269)) ?x54846) ?x54848) ?x54850)))
 (= (+ (+ (+ ?x54851 ?x54852) ?x54854) ?x54856) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53954 (* l_0_16_3 l_0_16_3)))
 (let ((?x21895 (* l_0_16_24 l_0_16_24)))
 (let ((?x54925 (- (+ (+ (* (- l_0_16_2) l_0_16_2) (* l_0_16_23 l_0_16_23)) ?x21895) ?x53954)))
 (= ?x54925 0.0)))))
(assert
 (let ((?x54940 (- (- (* (- l_0_16_128) l_0_16_128) (* l_0_16_129 l_0_16_129)) (* (* 2.0 l_0_16_2) l_0_16_4))))
 (let ((?x54946 (+ (+ ?x54940 (* (* 2.0 l_0_16_23) l_0_16_25)) (* (* 2.0 l_0_16_24) l_0_16_26))))
 (= (- ?x54946 (* (* 2.0 l_0_16_3) l_0_16_5)) 0.0))))
(assert
 (let ((?x54991 (* l_0_16_87 l_0_16_87)))
 (let ((?x54989 (* l_0_16_86 l_0_16_86)))
 (let ((?x54979 (* l_0_16_171 l_0_16_171)))
 (let ((?x54977 (* l_0_16_170 l_0_16_170)))
 (let ((?x54975 (* l_0_16_150 l_0_16_150)))
 (let ((?x54973 (* l_0_16_149 l_0_16_149)))
 (let ((?x54974 (- (+ (* l_0_16_107 l_0_16_107) (* l_0_16_108 l_0_16_108)) ?x54973)))
 (let ((?x54982 (- (+ (+ (- ?x54974 ?x54975) ?x54977) ?x54979) (* (* 2.0 l_0_16_2) l_0_16_7))))
 (let ((?x54986 (+ (+ ?x54982 (* (* 2.0 l_0_16_23) l_0_16_28)) (* (* 2.0 l_0_16_24) l_0_16_29))))
 (= (- (- (- ?x54986 (* (* 2.0 l_0_16_3) l_0_16_8)) ?x54989) ?x54991) 0.0)))))))))))
(assert
 (let ((?x53966 (* l_0_16_66 l_0_16_66)))
 (let ((?x53963 (* l_0_16_65 l_0_16_65)))
 (let ((?x53999 (* l_0_16_45 l_0_16_45)))
 (let ((?x43957 (* l_0_16_44 l_0_16_44)))
 (let ((?x55020 (- (* (* (- 2.0) l_0_16_11) l_0_16_2) (* (* 2.0 l_0_16_12) l_0_16_3))))
 (let ((?x55024 (+ (+ ?x55020 (* (* 2.0 l_0_16_23) l_0_16_32)) (* (* 2.0 l_0_16_24) l_0_16_33))))
 (= (- (- (+ (+ ?x55024 ?x43957) ?x53999) ?x53963) ?x53966) 0.0))))))))
(assert
 (let ((?x53966 (* l_0_16_66 l_0_16_66)))
 (let ((?x55066 (* 3.0 ?x53966)))
 (let ((?x53963 (* l_0_16_65 l_0_16_65)))
 (let ((?x55064 (* 3.0 ?x53963)))
 (let ((?x55062 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (let ((?x53954 (* l_0_16_3 l_0_16_3)))
 (let ((?x53955 (* 6.0 ?x53954)))
 (let ((?x53948 (* (* 6.0 l_0_16_24) l_0_16_24)))
 (let ((?x53941 (* (* 6.0 l_0_16_23) l_0_16_23)))
 (let ((?x53930 (* l_0_16_2 l_0_16_2)))
 (let ((?x53931 (* 6.0 ?x53930)))
 (let ((?x55046 (- (+ (* l_0_16_128 l_0_16_128) (* l_0_16_129 l_0_16_129)) (* (* 2.0 l_0_16_16) l_0_16_2))))
 (let ((?x55052 (+ (+ (- ?x55046 (* (* 2.0 l_0_16_17) l_0_16_3)) ?x53931) (* (* 2.0 l_0_16_23) l_0_16_37))))
 (let ((?x55057 (+ (- (+ (- ?x55052 ?x53941) (* (* 2.0 l_0_16_24) l_0_16_38)) ?x53948) ?x53955)))
 (let ((?x55067 (+ (+ (- (- ?x55057 (* (* 3.0 l_0_16_44) l_0_16_44)) ?x55062) ?x55064) ?x55066)))
 (= ?x55067 0.0)))))))))))))))))
(assert
 (let ((?x55103 (* l_0_16_6 l_0_16_6)))
 (let ((?x55101 (* l_0_16_5 l_0_16_5)))
 (let ((?x55099 (* l_0_16_4 l_0_16_4)))
 (let ((?x55097 (* l_0_16_27 l_0_16_27)))
 (let ((?x55095 (* l_0_16_26 l_0_16_26)))
 (let ((?x55093 (* l_0_16_25 l_0_16_25)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55091 (* ?x55090 l_0_16_131)))
 (let ((?x55098 (+ (+ (+ (- (* (* (- 2.0) l_0_16_128) l_0_16_130) ?x55091) ?x55093) ?x55095) ?x55097)))
 (= (- (- (- ?x55098 ?x55099) ?x55101) ?x55103) 0.0)))))))))))
(assert
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55163 (* ?x55162 l_0_16_89)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55160 (* ?x55159 l_0_16_88)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55139 (* ?x55138 l_0_16_173)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55136 (* ?x55135 l_0_16_172)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55133 (* ?x55132 l_0_16_152)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55130 (* ?x55129 l_0_16_151)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55127 (* ?x55090 l_0_16_134)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55125 (* ?x55124 l_0_16_133)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55122 (* ?x55121 l_0_16_110)))
 (let ((?x55131 (- (- (- (+ (* (* 2.0 l_0_16_107) l_0_16_109) ?x55122) ?x55125) ?x55127) ?x55130)))
 (let ((?x55143 (+ (+ (+ (- ?x55131 ?x55133) ?x55136) ?x55139) (* (* 2.0 l_0_16_25) l_0_16_28))))
 (let ((?x55149 (+ (+ ?x55143 (* (* 2.0 l_0_16_26) l_0_16_29)) (* (* 2.0 l_0_16_27) l_0_16_30))))
 (let ((?x55155 (- (- ?x55149 (* (* 2.0 l_0_16_4) l_0_16_7)) (* (* 2.0 l_0_16_5) l_0_16_8))))
 (= (- (- (- ?x55155 (* (* 2.0 l_0_16_6) l_0_16_9)) ?x55160) ?x55163) 0.0))))))))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54639 (* ?x54058 l_0_16_68)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54637 (* ?x54055 l_0_16_67)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54635 (* ?x54049 l_0_16_47)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54633 (* ?x54046 l_0_16_46)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55221 (* ?x55090 l_0_16_138)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55219 (* ?x55124 l_0_16_137)))
 (let ((?x55218 (- (* (* (- 2.0) l_0_16_11) l_0_16_4) (* (* 2.0 l_0_16_12) l_0_16_5))))
 (let ((?x55227 (+ (- (- (- ?x55218 ?x55219) ?x55221) (* (* 2.0 l_0_16_13) l_0_16_6)) (* (* 2.0 l_0_16_25) l_0_16_32))))
 (let ((?x55231 (+ (+ ?x55227 (* (* 2.0 l_0_16_26) l_0_16_33)) (* (* 2.0 l_0_16_27) l_0_16_34))))
 (= (- (- (+ (+ ?x55231 ?x54633) ?x54635) ?x54637) ?x54639) 0.0)))))))))))))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55300 (* ?x55299 l_0_16_68)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55297 (* ?x55296 l_0_16_67)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55294 (* ?x55293 l_0_16_47)))
 (let ((?x54630 (* 12.0 l_0_16_3)))
 (let ((?x54631 (* ?x54630 l_0_16_5)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54624 (* ?x54034 l_0_16_26)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54618 (* ?x54025 l_0_16_25)))
 (let ((?x54609 (* 12.0 l_0_16_2)))
 (let ((?x54610 (* ?x54609 l_0_16_4)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55271 (* ?x55090 l_0_16_143)))
 (let ((?x55091 (* ?x55090 l_0_16_131)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55268 (* ?x55124 l_0_16_142)))
 (let ((?x55274 (- (- (+ (- (* ?x55124 l_0_16_130) ?x55268) ?x55091) ?x55271) (* (* 2.0 l_0_16_16) l_0_16_4))))
 (let ((?x55279 (- (- ?x55274 (* (* 2.0 l_0_16_17) l_0_16_5)) (* (* 2.0 l_0_16_18) l_0_16_6))))
 (let ((?x55284 (+ (- (- (+ ?x55279 ?x54610) ?x54618) ?x54624) (* (* 2.0 l_0_16_25) l_0_16_37))))
 (let ((?x55288 (+ (+ ?x55284 (* (* 2.0 l_0_16_26) l_0_16_38)) (* (* 2.0 l_0_16_27) l_0_16_39))))
 (let ((?x55298 (+ (- (- (+ ?x55288 ?x54631) (* (* 6.0 l_0_16_44) l_0_16_46)) ?x55294) ?x55297)))
 (= (+ ?x55298 ?x55300) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55372 (* l_0_16_9 l_0_16_9)))
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55370 (* ?x55162 l_0_16_92)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55368 (* ?x55159 l_0_16_91)))
 (let ((?x55366 (* l_0_16_8 l_0_16_8)))
 (let ((?x55364 (* l_0_16_7 l_0_16_7)))
 (let ((?x55362 (* l_0_16_31 l_0_16_31)))
 (let ((?x55360 (* l_0_16_30 l_0_16_30)))
 (let ((?x55358 (* l_0_16_29 l_0_16_29)))
 (let ((?x55356 (* l_0_16_28 l_0_16_28)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55354 (* ?x55138 l_0_16_176)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55352 (* ?x55135 l_0_16_175)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55350 (* ?x55132 l_0_16_155)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55348 (* ?x55129 l_0_16_154)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55346 (* ?x55121 l_0_16_113)))
 (let ((?x55345 (+ (* (- l_0_16_10) l_0_16_10) (* (* 2.0 l_0_16_107) l_0_16_112))))
 (let ((?x55359 (+ (+ (+ (+ (- (- (+ ?x55345 ?x55346) ?x55348) ?x55350) ?x55352) ?x55354) ?x55356) ?x55358)))
 (let ((?x55373 (- (- (- (- (- (+ (+ ?x55359 ?x55360) ?x55362) ?x55364) ?x55366) ?x55368) ?x55370) ?x55372)))
 (= ?x55373 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55449 (* ?x55162 l_0_16_96)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55447 (* ?x55159 l_0_16_95)))
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54719 (* ?x54058 l_0_16_71)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54717 (* ?x54055 l_0_16_70)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54715 (* ?x54049 l_0_16_50)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54713 (* ?x54046 l_0_16_49)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55429 (* ?x55138 l_0_16_180)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55427 (* ?x55135 l_0_16_179)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55425 (* ?x55132 l_0_16_159)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55423 (* ?x55129 l_0_16_158)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55414 (* ?x55121 l_0_16_117)))
 (let ((?x55413 (+ (* (* (- 2.0) l_0_16_10) l_0_16_14) (* (* 2.0 l_0_16_107) l_0_16_116))))
 (let ((?x55420 (- (- (+ ?x55413 ?x55414) (* (* 2.0 l_0_16_11) l_0_16_7)) (* (* 2.0 l_0_16_12) l_0_16_8))))
 (let ((?x55428 (+ (- (- (- ?x55420 (* (* 2.0 l_0_16_13) l_0_16_9)) ?x55423) ?x55425) ?x55427)))
 (let ((?x55436 (+ (+ (+ ?x55428 ?x55429) (* (* 2.0 l_0_16_28) l_0_16_32)) (* (* 2.0 l_0_16_29) l_0_16_33))))
 (let ((?x55442 (+ (+ ?x55436 (* (* 2.0 l_0_16_30) l_0_16_34)) (* (* 2.0 l_0_16_31) l_0_16_35))))
 (= (- (- (- (- (+ (+ ?x55442 ?x54713) ?x54715) ?x54717) ?x54719) ?x55447) ?x55449) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55561 (* ?x55299 l_0_16_71)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55559 (* ?x55296 l_0_16_70)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55557 (* ?x55293 l_0_16_50)))
 (let ((?x54630 (* 12.0 l_0_16_3)))
 (let ((?x54711 (* ?x54630 l_0_16_8)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54705 (* ?x54034 l_0_16_29)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54699 (* ?x54025 l_0_16_28)))
 (let ((?x54609 (* 12.0 l_0_16_2)))
 (let ((?x54691 (* ?x54609 l_0_16_7)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55539 (* ?x55138 l_0_16_185)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55537 (* ?x55135 l_0_16_184)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55531 (* ?x55132 l_0_16_164)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55529 (* ?x55129 l_0_16_163)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55127 (* ?x55090 l_0_16_134)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55125 (* ?x55124 l_0_16_133)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55525 (* ?x55121 l_0_16_122)))
 (let ((?x55119 (* 2.0 l_0_16_107)))
 (let ((?x55523 (* ?x55119 l_0_16_121)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x55521 (* ?x55520 l_0_16_87)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x55518 (* ?x55517 l_0_16_86)))
 (let ((?x55526 (+ (+ (- (- (* (* (- 2.0) l_0_16_10) l_0_16_19) ?x55518) ?x55521) ?x55523) ?x55525)))
 (let ((?x55534 (- (- (- (+ (+ ?x55526 ?x55125) ?x55127) ?x55529) ?x55531) (* (* 2.0 l_0_16_16) l_0_16_7))))
 (let ((?x55542 (- (+ (+ (- ?x55534 (* (* 2.0 l_0_16_17) l_0_16_8)) ?x55537) ?x55539) (* (* 2.0 l_0_16_18) l_0_16_9))))
 (let ((?x55547 (+ (- (- (+ ?x55542 ?x54691) ?x54699) ?x54705) (* (* 2.0 l_0_16_28) l_0_16_37))))
 (let ((?x55552 (+ (+ (+ ?x55547 (* (* 2.0 l_0_16_29) l_0_16_38)) ?x54711) (* (* 2.0 l_0_16_30) l_0_16_39))))
 (let ((?x55556 (- (+ ?x55552 (* (* 2.0 l_0_16_31) l_0_16_40)) (* (* 6.0 l_0_16_44) l_0_16_49))))
 (= (+ (+ (- ?x55556 ?x55557) ?x55559) ?x55561) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54059 (* ?x54058 l_0_16_75)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54056 (* ?x54055 l_0_16_74)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54050 (* ?x54049 l_0_16_54)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54047 (* ?x54046 l_0_16_53)))
 (let ((?x44156 (* l_0_16_36 l_0_16_36)))
 (let ((?x44154 (* l_0_16_35 l_0_16_35)))
 (let ((?x22199 (* l_0_16_34 l_0_16_34)))
 (let ((?x33581 (* l_0_16_33 l_0_16_33)))
 (let ((?x54306 (* l_0_16_32 l_0_16_32)))
 (let ((?x54194 (* l_0_16_15 l_0_16_15)))
 (let ((?x54191 (* l_0_16_14 l_0_16_14)))
 (let ((?x54188 (* l_0_16_13 l_0_16_13)))
 (let ((?x55609 (- (- (* (- l_0_16_11) l_0_16_11) (* l_0_16_12 l_0_16_12)) ?x54188)))
 (let ((?x55616 (+ (+ (+ (+ (+ (- (- ?x55609 ?x54191) ?x54194) ?x54306) ?x33581) ?x22199) ?x44154) ?x44156)))
 (= (- (- (+ (+ ?x55616 ?x54047) ?x54050) ?x54056) ?x54059) 0.0))))))))))))))))))))
(assert
 (let ((?x54058 (* 2.0 l_0_16_66)))
 (let ((?x54856 (* ?x54058 l_0_16_80)))
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55680 (* ?x55299 l_0_16_75)))
 (let ((?x54055 (* 2.0 l_0_16_65)))
 (let ((?x54854 (* ?x54055 l_0_16_79)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55677 (* ?x55296 l_0_16_74)))
 (let ((?x54049 (* 2.0 l_0_16_45)))
 (let ((?x54850 (* ?x54049 l_0_16_59)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55674 (* ?x55293 l_0_16_54)))
 (let ((?x54046 (* 2.0 l_0_16_44)))
 (let ((?x54848 (* ?x54046 l_0_16_58)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54035 (* ?x54034 l_0_16_33)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54026 (* ?x54025 l_0_16_32)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55221 (* ?x55090 l_0_16_138)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55219 (* ?x55124 l_0_16_137)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x54009 (* ?x54008 l_0_16_3)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x54006 (* ?x54005 l_0_16_2)))
 (let ((?x55642 (- (+ (* (* (- 2.0) l_0_16_11) l_0_16_16) ?x54006) (* (* 2.0 l_0_16_12) l_0_16_17))))
 (let ((?x55647 (- (+ (+ (+ ?x55642 ?x54009) ?x55219) ?x55221) (* (* 2.0 l_0_16_13) l_0_16_18))))
 (let ((?x55653 (- (- ?x55647 (* (* 2.0 l_0_16_14) l_0_16_19)) (* (* 2.0 l_0_16_15) l_0_16_20))))
 (let ((?x55661 (+ (+ (- (- ?x55653 ?x54026) ?x54035) (* (* 2.0 l_0_16_32) l_0_16_37)) (* (* 2.0 l_0_16_33) l_0_16_38))))
 (let ((?x55667 (+ (+ ?x55661 (* (* 2.0 l_0_16_34) l_0_16_39)) (* (* 2.0 l_0_16_35) l_0_16_40))))
 (let ((?x55672 (- (+ ?x55667 (* (* 2.0 l_0_16_36) l_0_16_41)) (* (* 6.0 l_0_16_44) l_0_16_53))))
 (let ((?x55682 (- (+ (- (+ (+ (- (+ ?x55672 ?x54848) ?x55674) ?x54850) ?x55677) ?x54854) ?x55680) ?x54856)))
 (= ?x55682 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55744 (* ?x55299 l_0_16_80)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55742 (* ?x55296 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x54852 (* ?x54433 l_0_16_65)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55739 (* ?x55293 l_0_16_59)))
 (let ((?x55290 (* 6.0 l_0_16_44)))
 (let ((?x55737 (* ?x55290 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x54846 (* ?x54409 l_0_16_44)))
 (let ((?x22381 (* l_0_16_42 l_0_16_42)))
 (let ((?x44314 (* l_0_16_41 l_0_16_41)))
 (let ((?x33595 (* l_0_16_40 l_0_16_40)))
 (let ((?x6015 (* l_0_16_39 l_0_16_39)))
 (let ((?x22385 (* l_0_16_38 l_0_16_38)))
 (let ((?x5928 (* l_0_16_37 l_0_16_37)))
 (let ((?x54034 (* 12.0 l_0_16_24)))
 (let ((?x54840 (* ?x54034 l_0_16_38)))
 (let ((?x54025 (* 12.0 l_0_16_23)))
 (let ((?x54834 (* ?x54025 l_0_16_37)))
 (let ((?x54348 (* l_0_16_21 l_0_16_21)))
 (let ((?x54335 (* l_0_16_20 l_0_16_20)))
 (let ((?x54332 (* l_0_16_19 l_0_16_19)))
 (let ((?x54329 (* l_0_16_18 l_0_16_18)))
 (let ((?x54326 (* l_0_16_17 l_0_16_17)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x54821 (* ?x54820 l_0_16_3)))
 (let ((?x54323 (* l_0_16_16 l_0_16_16)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x54818 (* ?x54817 l_0_16_2)))
 (let ((?x55090 (* 2.0 l_0_16_129)))
 (let ((?x55271 (* ?x55090 l_0_16_143)))
 (let ((?x55124 (* 2.0 l_0_16_128)))
 (let ((?x55268 (* ?x55124 l_0_16_142)))
 (let ((?x34441 (- (- (- (+ (- (+ (+ ?x55268 ?x55271) ?x54818) ?x54323) ?x54821) ?x54326) ?x54329) ?x54332)))
 (let ((?x55732 (+ (+ (+ (- (- (- (- ?x34441 ?x54335) ?x54348) ?x54834) ?x54840) ?x5928) ?x22385) ?x6015)))
 (let ((?x55741 (+ (- (- (- (+ (+ (+ ?x55732 ?x33595) ?x44314) ?x22381) ?x54846) ?x55737) ?x55739) ?x54852)))
 (= (+ (+ ?x55741 ?x55742) ?x55744) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x55853 (* ?x55852 l_0_16_81)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x55850 (* ?x55849 l_0_16_80)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x55847 (* ?x55846 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x55844 (* ?x54433 l_0_16_67)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x55842 (* ?x55841 l_0_16_60)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x55839 (* ?x55838 l_0_16_59)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x55836 (* ?x55835 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x55833 (* ?x54409 l_0_16_46)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x55831 (* ?x55830 l_0_16_39)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x55828 (* ?x55827 l_0_16_38)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x55816 (* ?x55815 l_0_16_37)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x55804 (* ?x54122 l_0_16_25)))
 (let ((?x55783 (* 12.0 l_0_16_18)))
 (let ((?x55784 (* ?x55783 l_0_16_6)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x55781 (* ?x54820 l_0_16_5)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x55779 (* ?x54817 l_0_16_4)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x54321 (* ?x54320 l_0_16_142)))
 (let ((?x55778 (- (+ (* (* 12.0 l_0_16_1) l_0_16_4) (* ?x54320 l_0_16_130)) ?x54321)))
 (let ((?x55788 (- (+ (+ (+ ?x55778 ?x55779) ?x55781) ?x55784) (* (* 2.0 l_0_16_193) l_0_16_205))))
 (let ((?x55794 (- (- ?x55788 (* (* 2.0 l_0_16_194) l_0_16_206)) (* (* 2.0 l_0_16_195) l_0_16_207))))
 (let ((?x55800 (- (- ?x55794 (* (* 2.0 l_0_16_214) l_0_16_226)) (* (* 2.0 l_0_16_215) l_0_16_227))))
 (let ((?x55808 (- (- (- ?x55800 (* (* 2.0 l_0_16_216) l_0_16_228)) ?x55804) (* (* 2.0 l_0_16_235) l_0_16_247))))
 (let ((?x55814 (- (- ?x55808 (* (* 2.0 l_0_16_236) l_0_16_248)) (* (* 2.0 l_0_16_237) l_0_16_249))))
 (let ((?x55823 (- (- (- ?x55814 ?x55816) (* (* 2.0 l_0_16_256) l_0_16_268)) (* (* 2.0 l_0_16_257) l_0_16_269))))
 (let ((?x55834 (- (- (- (- ?x55823 (* (* 2.0 l_0_16_258) l_0_16_270)) ?x55828) ?x55831) ?x55833)))
 (let ((?x55854 (+ (+ (+ (+ (- (- (- ?x55834 ?x55836) ?x55839) ?x55842) ?x55844) ?x55847) ?x55850) ?x55853)))
 (= ?x55854 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56023 (* 2.0 l_0_16_73)))
 (let ((?x56024 (* ?x56023 l_0_16_82)))
 (let ((?x56020 (* 2.0 l_0_16_72)))
 (let ((?x56021 (* ?x56020 l_0_16_81)))
 (let ((?x56017 (* 2.0 l_0_16_71)))
 (let ((?x56018 (* ?x56017 l_0_16_80)))
 (let ((?x56014 (* 2.0 l_0_16_70)))
 (let ((?x56015 (* ?x56014 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x56012 (* ?x54433 l_0_16_70)))
 (let ((?x56009 (* 2.0 l_0_16_52)))
 (let ((?x56010 (* ?x56009 l_0_16_61)))
 (let ((?x56006 (* 2.0 l_0_16_51)))
 (let ((?x56007 (* ?x56006 l_0_16_60)))
 (let ((?x56003 (* 2.0 l_0_16_50)))
 (let ((?x56004 (* ?x56003 l_0_16_59)))
 (let ((?x56000 (* 2.0 l_0_16_49)))
 (let ((?x56001 (* ?x56000 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x55998 (* ?x54409 l_0_16_49)))
 (let ((?x55995 (* 12.0 l_0_16_31)))
 (let ((?x55996 (* ?x55995 l_0_16_40)))
 (let ((?x55992 (* 12.0 l_0_16_30)))
 (let ((?x55993 (* ?x55992 l_0_16_39)))
 (let ((?x55989 (* 12.0 l_0_16_29)))
 (let ((?x55990 (* ?x55989 l_0_16_38)))
 (let ((?x55986 (* 12.0 l_0_16_28)))
 (let ((?x55987 (* ?x55986 l_0_16_37)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x55957 (* ?x54122 l_0_16_28)))
 (let ((?x55783 (* 12.0 l_0_16_18)))
 (let ((?x55934 (* ?x55783 l_0_16_9)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x55932 (* ?x54820 l_0_16_8)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x55930 (* ?x54684 l_0_16_184)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x55928 (* ?x54817 l_0_16_7)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x55926 (* ?x54681 l_0_16_163)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x55924 (* ?x54320 l_0_16_133)))
 (let ((?x44415 (* 2.0 l_0_16_106)))
 (let ((?x55922 (* ?x44415 l_0_16_121)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x55909 (* ?x55517 l_0_16_85)))
 (let ((?x6239 (* 12.0 l_0_16_10)))
 (let ((?x55906 (* ?x6239 l_0_16_19)))
 (let ((?x54112 (* 12.0 l_0_16_1)))
 (let ((?x55904 (* ?x54112 l_0_16_7)))
 (let ((?x55931 (+ (+ (- (+ (+ (- (+ ?x55904 ?x55906) ?x55909) ?x55922) ?x55924) ?x55926) ?x55928) ?x55930)))
 (let ((?x55941 (- (- (+ (+ ?x55931 ?x55932) ?x55934) (* (* 2.0 l_0_16_196) l_0_16_205)) (* (* 2.0 l_0_16_197) l_0_16_206))))
 (let ((?x55947 (- (- ?x55941 (* (* 2.0 l_0_16_198) l_0_16_207)) (* (* 2.0 l_0_16_199) l_0_16_208))))
 (let ((?x55953 (- (- ?x55947 (* (* 2.0 l_0_16_217) l_0_16_226)) (* (* 2.0 l_0_16_218) l_0_16_227))))
 (let ((?x55961 (- (- (- ?x55953 (* (* 2.0 l_0_16_219) l_0_16_228)) ?x55957) (* (* 2.0 l_0_16_220) l_0_16_229))))
 (let ((?x55967 (- (- ?x55961 (* (* 2.0 l_0_16_238) l_0_16_247)) (* (* 2.0 l_0_16_239) l_0_16_248))))
 (let ((?x55973 (- (- ?x55967 (* (* 2.0 l_0_16_240) l_0_16_249)) (* (* 2.0 l_0_16_241) l_0_16_250))))
 (let ((?x55979 (- (- ?x55973 (* (* 2.0 l_0_16_259) l_0_16_268)) (* (* 2.0 l_0_16_260) l_0_16_269))))
 (let ((?x55985 (- (- ?x55979 (* (* 2.0 l_0_16_261) l_0_16_270)) (* (* 2.0 l_0_16_262) l_0_16_271))))
 (let ((?x56005 (- (- (- (- (- (- (- ?x55985 ?x55987) ?x55990) ?x55993) ?x55996) ?x55998) ?x56001) ?x56004)))
 (let ((?x56025 (+ (+ (+ (+ (+ (- (- ?x56005 ?x56007) ?x56010) ?x56012) ?x56015) ?x56018) ?x56021) ?x56024)))
 (= ?x56025 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56261 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x56258 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x56255 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x56252 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x56249 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x54572 (* ?x54052 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x56245 (* ?x54433 l_0_16_74)))
 (let ((?x56243 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x56240 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x56237 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x56234 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x56231 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x54569 (* ?x54043 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x56227 (* ?x54409 l_0_16_53)))
 (let ((?x56225 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56222 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56219 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56216 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56213 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x44049 (* ?x54122 l_0_16_32)))
 (let ((?x56149 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x56146 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x56143 (* ?x56142 l_0_16_18)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x56125 (* ?x54320 l_0_16_137)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x56121 (* ?x54008 l_0_16_17)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x56117 (* ?x54005 l_0_16_16)))
 (let ((?x54112 (* 12.0 l_0_16_1)))
 (let ((?x33455 (* ?x54112 l_0_16_11)))
 (let ((?x56153 (- (+ (+ (+ (+ (+ (+ ?x33455 ?x56117) ?x56121) ?x56125) ?x56143) ?x56146) ?x56149) (* (* 2.0 l_0_16_200) l_0_16_205))))
 (let ((?x56159 (- (- ?x56153 (* (* 2.0 l_0_16_201) l_0_16_206)) (* (* 2.0 l_0_16_202) l_0_16_207))))
 (let ((?x56165 (- (- ?x56159 (* (* 2.0 l_0_16_203) l_0_16_208)) (* (* 2.0 l_0_16_204) l_0_16_209))))
 (let ((?x56172 (- (- (- ?x56165 ?x44049) (* (* 2.0 l_0_16_221) l_0_16_226)) (* (* 2.0 l_0_16_222) l_0_16_227))))
 (let ((?x56178 (- (- ?x56172 (* (* 2.0 l_0_16_223) l_0_16_228)) (* (* 2.0 l_0_16_224) l_0_16_229))))
 (let ((?x56184 (- (- ?x56178 (* (* 2.0 l_0_16_225) l_0_16_230)) (* (* 2.0 l_0_16_242) l_0_16_247))))
 (let ((?x56190 (- (- ?x56184 (* (* 2.0 l_0_16_243) l_0_16_248)) (* (* 2.0 l_0_16_244) l_0_16_249))))
 (let ((?x56196 (- (- ?x56190 (* (* 2.0 l_0_16_245) l_0_16_250)) (* (* 2.0 l_0_16_246) l_0_16_251))))
 (let ((?x56202 (- (- ?x56196 (* (* 2.0 l_0_16_263) l_0_16_268)) (* (* 2.0 l_0_16_264) l_0_16_269))))
 (let ((?x56208 (- (- ?x56202 (* (* 2.0 l_0_16_265) l_0_16_270)) (* (* 2.0 l_0_16_266) l_0_16_271))))
 (let ((?x56220 (- (- (- (- ?x56208 (* (* 2.0 l_0_16_267) l_0_16_272)) ?x56213) ?x56216) ?x56219)))
 (let ((?x56238 (- (- (- (+ (- (- (- ?x56220 ?x56222) ?x56225) ?x56227) ?x54569) ?x56231) ?x56234) ?x56237)))
 (let ((?x56256 (+ (+ (+ (- (+ (- (- ?x56238 ?x56240) ?x56243) ?x56245) ?x54572) ?x56249) ?x56252) ?x56255)))
 (= (+ (+ ?x56256 ?x56258) ?x56261) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56422 (* l_0_16_69 l_0_16_69)))
 (let ((?x56423 (* 3.0 ?x56422)))
 (let ((?x56419 (* l_0_16_68 l_0_16_68)))
 (let ((?x56420 (* 3.0 ?x56419)))
 (let ((?x56416 (* l_0_16_67 l_0_16_67)))
 (let ((?x56417 (* 3.0 ?x56416)))
 (let ((?x55103 (* l_0_16_6 l_0_16_6)))
 (let ((?x56414 (* 6.0 ?x55103)))
 (let ((?x55101 (* l_0_16_5 l_0_16_5)))
 (let ((?x56412 (* 6.0 ?x55101)))
 (let ((?x56410 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x56407 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x55099 (* l_0_16_4 l_0_16_4)))
 (let ((?x56401 (* 6.0 ?x55099)))
 (let ((?x56399 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x56396 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x56393 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x56390 (* l_0_16_132 l_0_16_132)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56388 (* ?x56387 l_0_16_144)))
 (let ((?x56385 (* l_0_16_131 l_0_16_131)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56368 (* ?x56367 l_0_16_143)))
 (let ((?x56363 (* l_0_16_130 l_0_16_130)))
 (let ((?x56389 (- (+ (- (+ (* (* (- 2.0) l_0_16_130) l_0_16_142) ?x56363) ?x56368) ?x56385) ?x56388)))
 (let ((?x56405 (- (+ (- (- (- (+ ?x56389 ?x56390) ?x56393) ?x56396) ?x56399) ?x56401) (* (* 3.0 l_0_16_46) l_0_16_46))))
 (let ((?x56424 (+ (+ (+ (+ (+ (- (- ?x56405 ?x56407) ?x56410) ?x56412) ?x56414) ?x56417) ?x56420) ?x56423)))
 (= ?x56424 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56557 (* ?x56556 l_0_16_72)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56554 (* ?x56553 l_0_16_71)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56551 (* ?x56550 l_0_16_70)))
 (let ((?x56548 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x56545 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56542 (* ?x56541 l_0_16_51)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56539 (* ?x56538 l_0_16_50)))
 (let ((?x56533 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x56530 (* ?x55830 l_0_16_30)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x56528 (* ?x55827 l_0_16_29)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x56526 (* ?x55815 l_0_16_28)))
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x56524 (* ?x56523 l_0_16_186)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x56521 (* ?x56520 l_0_16_185)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x56518 (* ?x56517 l_0_16_184)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x56515 (* ?x56514 l_0_16_165)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x56512 (* ?x56511 l_0_16_164)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x56509 (* ?x56508 l_0_16_163)))
 (let ((?x56505 (* 2.0 l_0_16_136)))
 (let ((?x56506 (* ?x56505 l_0_16_145)))
 (let ((?x56502 (* 2.0 l_0_16_135)))
 (let ((?x56503 (* ?x56502 l_0_16_144)))
 (let ((?x56499 (* 2.0 l_0_16_134)))
 (let ((?x56500 (* ?x56499 l_0_16_143)))
 (let ((?x56496 (* 2.0 l_0_16_133)))
 (let ((?x56497 (* ?x56496 l_0_16_142)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56494 (* ?x56387 l_0_16_135)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56492 (* ?x56367 l_0_16_134)))
 (let ((?x56489 (* 2.0 l_0_16_130)))
 (let ((?x56490 (* ?x56489 l_0_16_133)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x56487 (* ?x56486 l_0_16_123)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x56484 (* ?x56483 l_0_16_122)))
 (let ((?x56480 (* 2.0 l_0_16_109)))
 (let ((?x56481 (* ?x56480 l_0_16_121)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56478 (* ?x56477 l_0_16_90)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56475 (* ?x55520 l_0_16_89)))
 (let ((?x56485 (+ (+ (- (- (* (* (- 2.0) l_0_16_100) l_0_16_88) ?x56475) ?x56478) ?x56481) ?x56484)))
 (let ((?x56504 (- (- (- (+ (+ (+ (+ ?x56485 ?x56487) ?x56490) ?x56492) ?x56494) ?x56497) ?x56500) ?x56503)))
 (let ((?x56525 (+ (+ (+ (- (- (- (- ?x56504 ?x56506) ?x56509) ?x56512) ?x56515) ?x56518) ?x56521) ?x56524)))
 (let ((?x56537 (- (+ (- (- (- ?x56525 ?x56526) ?x56528) ?x56530) ?x56533) (* (* 6.0 l_0_16_46) l_0_16_49))))
 (let ((?x56558 (+ (+ (+ (+ (+ (- (- ?x56537 ?x56539) ?x56542) ?x56545) ?x56548) ?x56551) ?x56554) ?x56557)))
 (= ?x56558 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x55853 (* ?x55852 l_0_16_81)))
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56684 (* ?x56556 l_0_16_76)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x55850 (* ?x55849 l_0_16_80)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56681 (* ?x56553 l_0_16_75)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x55847 (* ?x55846 l_0_16_79)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56678 (* ?x56550 l_0_16_74)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x55842 (* ?x55841 l_0_16_60)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56675 (* ?x56541 l_0_16_55)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x55839 (* ?x55838 l_0_16_59)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56672 (* ?x56538 l_0_16_54)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x55836 (* ?x55835 l_0_16_58)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x56667 (* ?x55830 l_0_16_34)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x56665 (* ?x55827 l_0_16_33)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x56663 (* ?x55815 l_0_16_32)))
 (let ((?x56661 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56658 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56655 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56652 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56649 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56646 (* ?x56387 l_0_16_139)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56644 (* ?x56367 l_0_16_138)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x56640 (* ?x56142 l_0_16_6)))
 (let ((?x56639 (+ (* (* 12.0 l_0_16_11) l_0_16_4) (* (* 12.0 l_0_16_12) l_0_16_5))))
 (let ((?x56647 (+ (+ (+ (+ ?x56639 ?x56640) (* (* 2.0 l_0_16_130) l_0_16_137)) ?x56644) ?x56646)))
 (let ((?x56666 (- (- (- (- (- (- (- ?x56647 ?x56649) ?x56652) ?x56655) ?x56658) ?x56661) ?x56663) ?x56665)))
 (let ((?x56673 (- (+ (- (- ?x56666 ?x56667) (* (* 6.0 l_0_16_46) l_0_16_53)) ?x55836) ?x56672)))
 (let ((?x56683 (- (+ (- (+ (+ (- (+ ?x56673 ?x55839) ?x56675) ?x55842) ?x56678) ?x55847) ?x56681) ?x55850)))
 (= (- (+ ?x56683 ?x56684) ?x55853) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56776 (* ?x56556 l_0_16_81)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56774 (* ?x56553 l_0_16_80)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56772 (* ?x56550 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x55844 (* ?x54433 l_0_16_67)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56769 (* ?x56541 l_0_16_60)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56767 (* ?x56538 l_0_16_59)))
 (let ((?x56535 (* 6.0 l_0_16_46)))
 (let ((?x56765 (* ?x56535 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x55833 (* ?x54409 l_0_16_46)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x55831 (* ?x55830 l_0_16_39)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x55828 (* ?x55827 l_0_16_38)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x55816 (* ?x55815 l_0_16_37)))
 (let ((?x55783 (* 12.0 l_0_16_18)))
 (let ((?x55784 (* ?x55783 l_0_16_6)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x55781 (* ?x54820 l_0_16_5)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x55779 (* ?x54817 l_0_16_4)))
 (let ((?x56756 (* l_0_16_147 l_0_16_147)))
 (let ((?x56754 (* l_0_16_146 l_0_16_146)))
 (let ((?x34134 (* l_0_16_145 l_0_16_145)))
 (let ((?x35067 (* l_0_16_144 l_0_16_144)))
 (let ((?x8268 (* l_0_16_143 l_0_16_143)))
 (let ((?x35049 (* l_0_16_142 l_0_16_142)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56388 (* ?x56387 l_0_16_144)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56368 (* ?x56367 l_0_16_143)))
 (let ((?x5540 (- (- (+ (+ (* (* 2.0 l_0_16_130) l_0_16_142) ?x56368) ?x56388) ?x35049) ?x8268)))
 (let ((?x56760 (+ (+ (+ (- (- (- (- ?x5540 ?x35067) ?x34134) ?x56754) ?x56756) ?x55779) ?x55781) ?x55784)))
 (let ((?x56770 (- (- (- (- (- (- (- ?x56760 ?x55816) ?x55828) ?x55831) ?x55833) ?x56765) ?x56767) ?x56769)))
 (= (+ (+ (+ (+ ?x56770 ?x55844) ?x56772) ?x56774) ?x56776) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55372 (* l_0_16_9 l_0_16_9)))
 (let ((?x56907 (* 6.0 ?x55372)))
 (let ((?x55366 (* l_0_16_8 l_0_16_8)))
 (let ((?x56905 (* 6.0 ?x55366)))
 (let ((?x56902 (* l_0_16_73 l_0_16_73)))
 (let ((?x56903 (* 3.0 ?x56902)))
 (let ((?x56899 (* l_0_16_72 l_0_16_72)))
 (let ((?x56900 (* 3.0 ?x56899)))
 (let ((?x56896 (* l_0_16_71 l_0_16_71)))
 (let ((?x56897 (* 3.0 ?x56896)))
 (let ((?x56893 (* l_0_16_70 l_0_16_70)))
 (let ((?x56894 (* 3.0 ?x56893)))
 (let ((?x55364 (* l_0_16_7 l_0_16_7)))
 (let ((?x56891 (* 6.0 ?x55364)))
 (let ((?x56889 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x56886 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x56883 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x56877 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x56874 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x56871 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x56868 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x56864 (* 2.0 l_0_16_178)))
 (let ((?x56865 (* ?x56864 l_0_16_187)))
 (let ((?x56861 (* 2.0 l_0_16_177)))
 (let ((?x56862 (* ?x56861 l_0_16_186)))
 (let ((?x56858 (* 2.0 l_0_16_176)))
 (let ((?x56859 (* ?x56858 l_0_16_185)))
 (let ((?x56855 (* 2.0 l_0_16_175)))
 (let ((?x56856 (* ?x56855 l_0_16_184)))
 (let ((?x56852 (* 2.0 l_0_16_157)))
 (let ((?x56853 (* ?x56852 l_0_16_166)))
 (let ((?x56849 (* 2.0 l_0_16_156)))
 (let ((?x56850 (* ?x56849 l_0_16_165)))
 (let ((?x56846 (* 2.0 l_0_16_155)))
 (let ((?x56847 (* ?x56846 l_0_16_164)))
 (let ((?x56843 (* 2.0 l_0_16_154)))
 (let ((?x56844 (* ?x56843 l_0_16_163)))
 (let ((?x56841 (* l_0_16_136 l_0_16_136)))
 (let ((?x56839 (* l_0_16_135 l_0_16_135)))
 (let ((?x56837 (* l_0_16_134 l_0_16_134)))
 (let ((?x56835 (* l_0_16_133 l_0_16_133)))
 (let ((?x56832 (* 2.0 l_0_16_115)))
 (let ((?x56833 (* ?x56832 l_0_16_124)))
 (let ((?x56829 (* 2.0 l_0_16_114)))
 (let ((?x56830 (* ?x56829 l_0_16_123)))
 (let ((?x56826 (* 2.0 l_0_16_113)))
 (let ((?x56827 (* ?x56826 l_0_16_122)))
 (let ((?x56823 (* 2.0 l_0_16_112)))
 (let ((?x56824 (* ?x56823 l_0_16_121)))
 (let ((?x56820 (* 2.0 l_0_16_103)))
 (let ((?x56821 (* ?x56820 l_0_16_94)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56818 (* ?x56477 l_0_16_93)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56811 (* ?x55520 l_0_16_92)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x56809 (* ?x55517 l_0_16_91)))
 (let ((?x55376 (* l_0_16_10 l_0_16_10)))
 (let ((?x33007 (* 6.0 ?x55376)))
 (let ((?x56831 (+ (+ (+ (- (- (- (- ?x33007 ?x56809) ?x56811) ?x56818) ?x56821) ?x56824) ?x56827) ?x56830)))
 (let ((?x56848 (- (- (+ (+ (+ (+ (+ ?x56831 ?x56833) ?x56835) ?x56837) ?x56839) ?x56841) ?x56844) ?x56847)))
 (let ((?x56869 (- (+ (+ (+ (+ (- (- ?x56848 ?x56850) ?x56853) ?x56856) ?x56859) ?x56862) ?x56865) ?x56868)))
 (let ((?x56881 (- (- (- (- ?x56869 ?x56871) ?x56874) ?x56877) (* (* 3.0 l_0_16_49) l_0_16_49))))
 (let ((?x56901 (+ (+ (+ (+ (- (- (- ?x56881 ?x56883) ?x56886) ?x56889) ?x56891) ?x56894) ?x56897) ?x56900)))
 (= (+ (+ (+ ?x56901 ?x56903) ?x56905) ?x56907) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56023 (* 2.0 l_0_16_73)))
 (let ((?x56024 (* ?x56023 l_0_16_82)))
 (let ((?x57077 (* 6.0 l_0_16_73)))
 (let ((?x57078 (* ?x57077 l_0_16_77)))
 (let ((?x56020 (* 2.0 l_0_16_72)))
 (let ((?x56021 (* ?x56020 l_0_16_81)))
 (let ((?x57073 (* 6.0 l_0_16_72)))
 (let ((?x57074 (* ?x57073 l_0_16_76)))
 (let ((?x56017 (* 2.0 l_0_16_71)))
 (let ((?x56018 (* ?x56017 l_0_16_80)))
 (let ((?x57069 (* 6.0 l_0_16_71)))
 (let ((?x57070 (* ?x57069 l_0_16_75)))
 (let ((?x56014 (* 2.0 l_0_16_70)))
 (let ((?x56015 (* ?x56014 l_0_16_79)))
 (let ((?x57065 (* 6.0 l_0_16_70)))
 (let ((?x57066 (* ?x57065 l_0_16_74)))
 (let ((?x56009 (* 2.0 l_0_16_52)))
 (let ((?x56010 (* ?x56009 l_0_16_61)))
 (let ((?x57061 (* 6.0 l_0_16_52)))
 (let ((?x57062 (* ?x57061 l_0_16_56)))
 (let ((?x56006 (* 2.0 l_0_16_51)))
 (let ((?x56007 (* ?x56006 l_0_16_60)))
 (let ((?x57057 (* 6.0 l_0_16_51)))
 (let ((?x57058 (* ?x57057 l_0_16_55)))
 (let ((?x56003 (* 2.0 l_0_16_50)))
 (let ((?x56004 (* ?x56003 l_0_16_59)))
 (let ((?x57053 (* 6.0 l_0_16_50)))
 (let ((?x57054 (* ?x57053 l_0_16_54)))
 (let ((?x56000 (* 2.0 l_0_16_49)))
 (let ((?x56001 (* ?x56000 l_0_16_58)))
 (let ((?x55995 (* 12.0 l_0_16_31)))
 (let ((?x57047 (* ?x55995 l_0_16_35)))
 (let ((?x55992 (* 12.0 l_0_16_30)))
 (let ((?x57045 (* ?x55992 l_0_16_34)))
 (let ((?x55989 (* 12.0 l_0_16_29)))
 (let ((?x57043 (* ?x55989 l_0_16_33)))
 (let ((?x55986 (* 12.0 l_0_16_28)))
 (let ((?x57041 (* ?x55986 l_0_16_32)))
 (let ((?x57039 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57036 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57033 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57030 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57027 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57024 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57021 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57018 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57015 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57012 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x56505 (* 2.0 l_0_16_136)))
 (let ((?x57009 (* ?x56505 l_0_16_140)))
 (let ((?x56502 (* 2.0 l_0_16_135)))
 (let ((?x57007 (* ?x56502 l_0_16_139)))
 (let ((?x56499 (* 2.0 l_0_16_134)))
 (let ((?x57005 (* ?x56499 l_0_16_138)))
 (let ((?x56496 (* 2.0 l_0_16_133)))
 (let ((?x57003 (* ?x56496 l_0_16_137)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x57001 (* ?x56142 l_0_16_9)))
 (let ((?x56999 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x56996 (* ?x54008 l_0_16_8)))
 (let ((?x56994 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x56991 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x56988 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x56985 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x56982 (* ?x54005 l_0_16_7)))
 (let ((?x56980 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x56820 (* 2.0 l_0_16_103)))
 (let ((?x56977 (* ?x56820 l_0_16_98)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56975 (* ?x56477 l_0_16_97)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56973 (* ?x55520 l_0_16_96)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x45143 (* ?x55517 l_0_16_95)))
 (let ((?x6239 (* 12.0 l_0_16_10)))
 (let ((?x45147 (* ?x6239 l_0_16_14)))
 (let ((?x56986 (+ (+ (- (- (- (- (- ?x45147 ?x45143) ?x56973) ?x56975) ?x56977) ?x56980) ?x56982) ?x56985)))
 (let ((?x57004 (+ (+ (+ (+ (+ (+ (+ ?x56986 ?x56988) ?x56991) ?x56994) ?x56996) ?x56999) ?x57001) ?x57003)))
 (let ((?x57022 (- (- (- (- (+ (+ (+ ?x57004 ?x57005) ?x57007) ?x57009) ?x57012) ?x57015) ?x57018) ?x57021)))
 (let ((?x57042 (- (+ (+ (+ (+ (+ (- ?x57022 ?x57024) ?x57027) ?x57030) ?x57033) ?x57036) ?x57039) ?x57041)))
 (let ((?x57051 (- (- (- (- ?x57042 ?x57043) ?x57045) ?x57047) (* (* 6.0 l_0_16_49) l_0_16_53))))
 (let ((?x57064 (+ (- (+ (- (+ (- (+ ?x57051 ?x56001) ?x57054) ?x56004) ?x57058) ?x56007) ?x57062) ?x56010)))
 (let ((?x57079 (+ (- (+ (- (+ (- (+ ?x57064 ?x57066) ?x56015) ?x57070) ?x56018) ?x57074) ?x56021) ?x57078)))
 (= (- ?x57079 ?x56024) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57077 (* 6.0 l_0_16_73)))
 (let ((?x57207 (* ?x57077 l_0_16_82)))
 (let ((?x57073 (* 6.0 l_0_16_72)))
 (let ((?x57205 (* ?x57073 l_0_16_81)))
 (let ((?x57069 (* 6.0 l_0_16_71)))
 (let ((?x57203 (* ?x57069 l_0_16_80)))
 (let ((?x57065 (* 6.0 l_0_16_70)))
 (let ((?x57201 (* ?x57065 l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x56012 (* ?x54433 l_0_16_70)))
 (let ((?x57061 (* 6.0 l_0_16_52)))
 (let ((?x57198 (* ?x57061 l_0_16_61)))
 (let ((?x57057 (* 6.0 l_0_16_51)))
 (let ((?x57196 (* ?x57057 l_0_16_60)))
 (let ((?x57053 (* 6.0 l_0_16_50)))
 (let ((?x57194 (* ?x57053 l_0_16_59)))
 (let ((?x57049 (* 6.0 l_0_16_49)))
 (let ((?x57192 (* ?x57049 l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x55998 (* ?x54409 l_0_16_49)))
 (let ((?x55995 (* 12.0 l_0_16_31)))
 (let ((?x55996 (* ?x55995 l_0_16_40)))
 (let ((?x55992 (* 12.0 l_0_16_30)))
 (let ((?x55993 (* ?x55992 l_0_16_39)))
 (let ((?x55989 (* 12.0 l_0_16_29)))
 (let ((?x55990 (* ?x55989 l_0_16_38)))
 (let ((?x55986 (* 12.0 l_0_16_28)))
 (let ((?x55987 (* ?x55986 l_0_16_37)))
 (let ((?x57185 (* l_0_16_189 l_0_16_189)))
 (let ((?x57183 (* l_0_16_188 l_0_16_188)))
 (let ((?x57181 (* l_0_16_187 l_0_16_187)))
 (let ((?x57179 (* l_0_16_186 l_0_16_186)))
 (let ((?x57177 (* l_0_16_185 l_0_16_185)))
 (let ((?x57175 (* l_0_16_184 l_0_16_184)))
 (let ((?x55783 (* 12.0 l_0_16_18)))
 (let ((?x55934 (* ?x55783 l_0_16_9)))
 (let ((?x54820 (* 12.0 l_0_16_17)))
 (let ((?x55932 (* ?x54820 l_0_16_8)))
 (let ((?x57171 (* l_0_16_168 l_0_16_168)))
 (let ((?x57169 (* l_0_16_167 l_0_16_167)))
 (let ((?x57167 (* l_0_16_166 l_0_16_166)))
 (let ((?x57165 (* l_0_16_165 l_0_16_165)))
 (let ((?x57163 (* l_0_16_164 l_0_16_164)))
 (let ((?x57161 (* l_0_16_163 l_0_16_163)))
 (let ((?x54817 (* 12.0 l_0_16_16)))
 (let ((?x55928 (* ?x54817 l_0_16_7)))
 (let ((?x56505 (* 2.0 l_0_16_136)))
 (let ((?x56506 (* ?x56505 l_0_16_145)))
 (let ((?x56502 (* 2.0 l_0_16_135)))
 (let ((?x56503 (* ?x56502 l_0_16_144)))
 (let ((?x56499 (* 2.0 l_0_16_134)))
 (let ((?x56500 (* ?x56499 l_0_16_143)))
 (let ((?x56496 (* 2.0 l_0_16_133)))
 (let ((?x56497 (* ?x56496 l_0_16_142)))
 (let ((?x57154 (* l_0_16_126 l_0_16_126)))
 (let ((?x57152 (* l_0_16_125 l_0_16_125)))
 (let ((?x57150 (* l_0_16_124 l_0_16_124)))
 (let ((?x57148 (* l_0_16_123 l_0_16_123)))
 (let ((?x57146 (* l_0_16_122 l_0_16_122)))
 (let ((?x57144 (* l_0_16_121 l_0_16_121)))
 (let ((?x57142 (* l_0_16_105 l_0_16_105)))
 (let ((?x57140 (* l_0_16_104 l_0_16_104)))
 (let ((?x57138 (* l_0_16_103 l_0_16_103)))
 (let ((?x57136 (* l_0_16_102 l_0_16_102)))
 (let ((?x57134 (* l_0_16_101 l_0_16_101)))
 (let ((?x45481 (* l_0_16_100 l_0_16_100)))
 (let ((?x6239 (* 12.0 l_0_16_10)))
 (let ((?x55906 (* ?x6239 l_0_16_19)))
 (let ((?x57145 (+ (- (- (- (- (- (- ?x55906 ?x45481) ?x57134) ?x57136) ?x57138) ?x57140) ?x57142) ?x57144)))
 (let ((?x57157 (+ (+ (+ (+ (+ (+ (+ ?x57145 ?x57146) ?x57148) ?x57150) ?x57152) ?x57154) ?x56497) ?x56500)))
 (let ((?x57168 (- (- (- (- (+ (+ (+ ?x57157 ?x56503) ?x56506) ?x55928) ?x57161) ?x57163) ?x57165) ?x57167)))
 (let ((?x57180 (+ (+ (+ (+ (+ (- (- ?x57168 ?x57169) ?x57171) ?x55932) ?x55934) ?x57175) ?x57177) ?x57179)))
 (let ((?x57190 (- (- (- (- (+ (+ (+ ?x57180 ?x57181) ?x57183) ?x57185) ?x55987) ?x55990) ?x55993) ?x55996)))
 (let ((?x57202 (+ (+ (- (- (- (- (- ?x57190 ?x55998) ?x57192) ?x57194) ?x57196) ?x57198) ?x56012) ?x57201)))
 (= (+ (+ (+ ?x57202 ?x57203) ?x57205) ?x57207) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54281 (* l_0_16_78 l_0_16_78)))
 (let ((?x57291 (* 3.0 ?x54281)))
 (let ((?x56261 (* (* 2.0 l_0_16_78) l_0_16_83)))
 (let ((?x54278 (* l_0_16_77 l_0_16_77)))
 (let ((?x57288 (* 3.0 ?x54278)))
 (let ((?x56258 (* (* 2.0 l_0_16_77) l_0_16_82)))
 (let ((?x54275 (* l_0_16_76 l_0_16_76)))
 (let ((?x57285 (* 3.0 ?x54275)))
 (let ((?x56255 (* (* 2.0 l_0_16_76) l_0_16_81)))
 (let ((?x54272 (* l_0_16_75 l_0_16_75)))
 (let ((?x57282 (* 3.0 ?x54272)))
 (let ((?x56252 (* (* 2.0 l_0_16_75) l_0_16_80)))
 (let ((?x54269 (* l_0_16_74 l_0_16_74)))
 (let ((?x57279 (* 3.0 ?x54269)))
 (let ((?x56249 (* (* 2.0 l_0_16_74) l_0_16_79)))
 (let ((?x57276 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x56243 (* (* 2.0 l_0_16_57) l_0_16_62)))
 (let ((?x57272 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x56240 (* (* 2.0 l_0_16_56) l_0_16_61)))
 (let ((?x57268 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x56237 (* (* 2.0 l_0_16_55) l_0_16_60)))
 (let ((?x57264 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x56234 (* (* 2.0 l_0_16_54) l_0_16_59)))
 (let ((?x56231 (* (* 2.0 l_0_16_53) l_0_16_58)))
 (let ((?x54250 (* (* 6.0 l_0_16_36) l_0_16_36)))
 (let ((?x54247 (* (* 6.0 l_0_16_35) l_0_16_35)))
 (let ((?x54244 (* (* 6.0 l_0_16_34) l_0_16_34)))
 (let ((?x54241 (* (* 6.0 l_0_16_33) l_0_16_33)))
 (let ((?x54238 (* (* 6.0 l_0_16_32) l_0_16_32)))
 (let ((?x54194 (* l_0_16_15 l_0_16_15)))
 (let ((?x54195 (* 6.0 ?x54194)))
 (let ((?x57250 (* l_0_16_141 l_0_16_141)))
 (let ((?x57248 (* l_0_16_140 l_0_16_140)))
 (let ((?x54191 (* l_0_16_14 l_0_16_14)))
 (let ((?x54192 (* 6.0 ?x54191)))
 (let ((?x57245 (* l_0_16_139 l_0_16_139)))
 (let ((?x8664 (* l_0_16_138 l_0_16_138)))
 (let ((?x8667 (* l_0_16_137 l_0_16_137)))
 (let ((?x54188 (* l_0_16_13 l_0_16_13)))
 (let ((?x54189 (* 6.0 ?x54188)))
 (let ((?x54185 (* l_0_16_12 l_0_16_12)))
 (let ((?x54186 (* 6.0 ?x54185)))
 (let ((?x54182 (* l_0_16_11 l_0_16_11)))
 (let ((?x54183 (* 6.0 ?x54182)))
 (let ((?x57249 (+ (+ (+ (+ (+ (+ (+ ?x54183 ?x54186) ?x54189) ?x8667) ?x8664) ?x57245) ?x54192) ?x57248)))
 (let ((?x57257 (- (- (- (- (- (+ (+ ?x57249 ?x57250) ?x54195) ?x54238) ?x54241) ?x54244) ?x54247) ?x54250)))
 (let ((?x57265 (- (+ (- (+ ?x57257 ?x56231) (* (* 3.0 l_0_16_53) l_0_16_53)) ?x56234) ?x57264)))
 (let ((?x57278 (- (- (+ (- (+ (- (+ ?x57265 ?x56237) ?x57268) ?x56240) ?x57272) ?x56243) ?x57276) ?x56249)))
 (let ((?x57289 (+ (- (+ (- (+ (- (+ ?x57278 ?x57279) ?x56252) ?x57282) ?x56255) ?x57285) ?x56258) ?x57288)))
 (= (+ (- ?x57289 ?x56261) ?x57291) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54453 (* l_0_16_84 l_0_16_84)))
 (let ((?x54450 (* l_0_16_83 l_0_16_83)))
 (let ((?x54447 (* l_0_16_82 l_0_16_82)))
 (let ((?x54444 (* l_0_16_81 l_0_16_81)))
 (let ((?x54441 (* l_0_16_80 l_0_16_80)))
 (let ((?x54438 (* l_0_16_79 l_0_16_79)))
 (let ((?x57329 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x57326 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x57323 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x57320 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x57317 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x56245 (* ?x54433 l_0_16_74)))
 (let ((?x44380 (* l_0_16_63 l_0_16_63)))
 (let ((?x54526 (* l_0_16_62 l_0_16_62)))
 (let ((?x44330 (* l_0_16_61 l_0_16_61)))
 (let ((?x44327 (* l_0_16_60 l_0_16_60)))
 (let ((?x54521 (* l_0_16_59 l_0_16_59)))
 (let ((?x54517 (* l_0_16_58 l_0_16_58)))
 (let ((?x57307 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x57304 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x57301 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x57298 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x57295 (* (* 6.0 l_0_16_53) l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x56227 (* ?x54409 l_0_16_53)))
 (let ((?x56225 (* (* 12.0 l_0_16_36) l_0_16_41)))
 (let ((?x56222 (* (* 12.0 l_0_16_35) l_0_16_40)))
 (let ((?x56219 (* (* 12.0 l_0_16_34) l_0_16_39)))
 (let ((?x56216 (* (* 12.0 l_0_16_33) l_0_16_38)))
 (let ((?x56213 (* (* 12.0 l_0_16_32) l_0_16_37)))
 (let ((?x56149 (* (* 12.0 l_0_16_15) l_0_16_20)))
 (let ((?x56661 (* (* 2.0 l_0_16_141) l_0_16_146)))
 (let ((?x56658 (* (* 2.0 l_0_16_140) l_0_16_145)))
 (let ((?x56146 (* (* 12.0 l_0_16_14) l_0_16_19)))
 (let ((?x56655 (* (* 2.0 l_0_16_139) l_0_16_144)))
 (let ((?x56652 (* (* 2.0 l_0_16_138) l_0_16_143)))
 (let ((?x56649 (* (* 2.0 l_0_16_137) l_0_16_142)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x56143 (* ?x56142 l_0_16_18)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x56121 (* ?x54008 l_0_16_17)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x56117 (* ?x54005 l_0_16_16)))
 (let ((?x45742 (+ (+ (+ (+ (+ (+ (+ ?x56117 ?x56121) ?x56143) ?x56649) ?x56652) ?x56655) ?x56146) ?x56658)))
 (let ((?x45630 (- (- (- (- (- (+ (+ ?x45742 ?x56661) ?x56149) ?x56213) ?x56216) ?x56219) ?x56222) ?x56225)))
 (let ((?x57309 (+ (- (- (- (- (- (- ?x45630 ?x56227) ?x57295) ?x57298) ?x57301) ?x57304) ?x57307) ?x54517)))
 (let ((?x57318 (+ (+ (+ (+ (+ (+ (+ ?x57309 ?x54521) ?x44327) ?x44330) ?x54526) ?x44380) ?x56245) ?x57317)))
 (let ((?x57333 (- (- (- (+ (+ (+ (+ ?x57318 ?x57320) ?x57323) ?x57326) ?x57329) ?x54438) ?x54441) ?x54444)))
 (= (- (- (- ?x57333 ?x54447) ?x54450) ?x54453) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57389 (* l_0_16_85 l_0_16_85)))
 (let ((?x54453 (* l_0_16_84 l_0_16_84)))
 (let ((?x57387 (* 3.0 ?x54453)))
 (let ((?x54450 (* l_0_16_83 l_0_16_83)))
 (let ((?x57385 (* 3.0 ?x54450)))
 (let ((?x54447 (* l_0_16_82 l_0_16_82)))
 (let ((?x57383 (* 3.0 ?x54447)))
 (let ((?x54444 (* l_0_16_81 l_0_16_81)))
 (let ((?x57381 (* 3.0 ?x54444)))
 (let ((?x54441 (* l_0_16_80 l_0_16_80)))
 (let ((?x57379 (* 3.0 ?x54441)))
 (let ((?x54438 (* l_0_16_79 l_0_16_79)))
 (let ((?x57377 (* 3.0 ?x54438)))
 (let ((?x54433 (* 6.0 l_0_16_64)))
 (let ((?x54434 (* ?x54433 l_0_16_79)))
 (let ((?x57374 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x57371 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x57368 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x57365 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x57362 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x57359 (* (* 3.0 l_0_16_58) l_0_16_58)))
 (let ((?x54409 (* 6.0 l_0_16_43)))
 (let ((?x54410 (* ?x54409 l_0_16_58)))
 (let ((?x54407 (* (* 6.0 l_0_16_42) l_0_16_42)))
 (let ((?x54404 (* (* 6.0 l_0_16_41) l_0_16_41)))
 (let ((?x54401 (* (* 6.0 l_0_16_40) l_0_16_40)))
 (let ((?x54398 (* (* 6.0 l_0_16_39) l_0_16_39)))
 (let ((?x54395 (* (* 6.0 l_0_16_38) l_0_16_38)))
 (let ((?x54392 (* (* 6.0 l_0_16_37) l_0_16_37)))
 (let ((?x54348 (* l_0_16_21 l_0_16_21)))
 (let ((?x54349 (* 6.0 ?x54348)))
 (let ((?x54335 (* l_0_16_20 l_0_16_20)))
 (let ((?x54336 (* 6.0 ?x54335)))
 (let ((?x54332 (* l_0_16_19 l_0_16_19)))
 (let ((?x54333 (* 6.0 ?x54332)))
 (let ((?x54329 (* l_0_16_18 l_0_16_18)))
 (let ((?x54330 (* 6.0 ?x54329)))
 (let ((?x54326 (* l_0_16_17 l_0_16_17)))
 (let ((?x54327 (* 6.0 ?x54326)))
 (let ((?x57344 (* l_0_16_169 l_0_16_169)))
 (let ((?x54323 (* l_0_16_16 l_0_16_16)))
 (let ((?x54324 (* 6.0 ?x54323)))
 (let ((?x57341 (* l_0_16_148 l_0_16_148)))
 (let ((?x56756 (* l_0_16_147 l_0_16_147)))
 (let ((?x56754 (* l_0_16_146 l_0_16_146)))
 (let ((?x34134 (* l_0_16_145 l_0_16_145)))
 (let ((?x35067 (* l_0_16_144 l_0_16_144)))
 (let ((?x8268 (* l_0_16_143 l_0_16_143)))
 (let ((?x45852 (+ (+ (* (- l_0_16_106) l_0_16_106) (* l_0_16_142 l_0_16_142)) ?x8268)))
 (let ((?x57345 (- (+ (+ (+ (+ (+ (+ ?x45852 ?x35067) ?x34134) ?x56754) ?x56756) ?x57341) ?x54324) ?x57344)))
 (let ((?x57352 (- (- (+ (+ (+ (+ (+ ?x57345 ?x54327) ?x54330) ?x54333) ?x54336) ?x54349) ?x54392) ?x54395)))
 (let ((?x57363 (- (- (- (- (- (- (- ?x57352 ?x54398) ?x54401) ?x54404) ?x54407) ?x54410) ?x57359) ?x57362)))
 (let ((?x57380 (+ (+ (+ (- (- (- (- ?x57363 ?x57365) ?x57368) ?x57371) ?x57374) ?x54434) ?x57377) ?x57379)))
 (= (+ (+ (+ (+ (+ ?x57380 ?x57381) ?x57383) ?x57385) ?x57387) ?x57389) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x57415 (* ?x54052 l_0_16_67)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x57413 (* ?x54043 l_0_16_46)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x55804 (* ?x54122 l_0_16_25)))
 (let ((?x57405 (- (- (* (* 12.0 l_0_16_1) l_0_16_4) (* l_0_16_127 l_0_16_127)) (* (* 2.0 l_0_16_190) l_0_16_193))))
 (let ((?x57410 (- (- (- ?x57405 (* (* 2.0 l_0_16_211) l_0_16_214)) ?x55804) (* (* 2.0 l_0_16_232) l_0_16_235))))
 (= (+ (- (- ?x57410 (* (* 2.0 l_0_16_253) l_0_16_256)) ?x57413) ?x57415) 0.0))))))))))
(assert
 (let ((?x57389 (* l_0_16_85 l_0_16_85)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x57449 (* ?x54052 l_0_16_70)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x57447 (* ?x54043 l_0_16_49)))
 (let ((?x54122 (* 12.0 l_0_16_22)))
 (let ((?x55957 (* ?x54122 l_0_16_28)))
 (let ((?x57344 (* l_0_16_169 l_0_16_169)))
 (let ((?x57341 (* l_0_16_148 l_0_16_148)))
 (let ((?x24045 (- (+ (* (* 12.0 l_0_16_1) l_0_16_7) (* l_0_16_106 l_0_16_106)) ?x57341)))
 (let ((?x57441 (- (- (+ ?x24045 ?x57344) (* (* 2.0 l_0_16_190) l_0_16_196)) (* (* 2.0 l_0_16_211) l_0_16_217))))
 (let ((?x57446 (- (- (- ?x57441 ?x55957) (* (* 2.0 l_0_16_232) l_0_16_238)) (* (* 2.0 l_0_16_253) l_0_16_259))))
 (= (- (+ (- ?x57446 ?x57447) ?x57449) ?x57389) 0.0))))))))))))))
(assert
 (let ((?x55103 (* l_0_16_6 l_0_16_6)))
 (let ((?x56414 (* 6.0 ?x55103)))
 (let ((?x55101 (* l_0_16_5 l_0_16_5)))
 (let ((?x56412 (* 6.0 ?x55101)))
 (let ((?x55099 (* l_0_16_4 l_0_16_4)))
 (let ((?x56401 (* 6.0 ?x55099)))
 (let ((?x56399 (* (* 6.0 l_0_16_27) l_0_16_27)))
 (let ((?x56396 (* (* 6.0 l_0_16_26) l_0_16_26)))
 (let ((?x57501 (* l_0_16_258 l_0_16_258)))
 (let ((?x57499 (* l_0_16_257 l_0_16_257)))
 (let ((?x57497 (* l_0_16_256 l_0_16_256)))
 (let ((?x56393 (* (* 6.0 l_0_16_25) l_0_16_25)))
 (let ((?x57494 (* l_0_16_237 l_0_16_237)))
 (let ((?x57492 (* l_0_16_236 l_0_16_236)))
 (let ((?x57490 (* l_0_16_235 l_0_16_235)))
 (let ((?x57488 (* l_0_16_216 l_0_16_216)))
 (let ((?x57486 (* l_0_16_215 l_0_16_215)))
 (let ((?x57484 (* l_0_16_214 l_0_16_214)))
 (let ((?x57482 (* l_0_16_195 l_0_16_195)))
 (let ((?x57480 (* l_0_16_194 l_0_16_194)))
 (let ((?x57478 (* l_0_16_193 l_0_16_193)))
 (let ((?x57485 (- (- (- (- (* (* (- 2.0) l_0_16_127) l_0_16_130) ?x57478) ?x57480) ?x57482) ?x57484)))
 (let ((?x57498 (- (- (- (- (- (- (- ?x57485 ?x57486) ?x57488) ?x57490) ?x57492) ?x57494) ?x56393) ?x57497)))
 (let ((?x57508 (- (+ (- (- (- (- ?x57498 ?x57499) ?x57501) ?x56396) ?x56399) ?x56401) (* (* 1.0 l_0_16_46) l_0_16_46))))
 (let ((?x57514 (- (- ?x57508 (* (* 1.0 l_0_16_47) l_0_16_47)) (* (* 1.0 l_0_16_48) l_0_16_48))))
 (let ((?x57520 (+ (+ (+ (+ ?x57514 ?x56412) ?x56414) (* 1.0 (* l_0_16_67 l_0_16_67))) (* 1.0 (* l_0_16_68 l_0_16_68)))))
 (= (+ ?x57520 (* 1.0 (* l_0_16_69 l_0_16_69))) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57591 (* ?x54721 l_0_16_88)))
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x57589 (* ?x55852 l_0_16_72)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x57587 (* ?x55849 l_0_16_71)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x57585 (* ?x55846 l_0_16_70)))
 (let ((?x56548 (* (* 12.0 l_0_16_6) l_0_16_9)))
 (let ((?x56545 (* (* 12.0 l_0_16_5) l_0_16_8)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x57581 (* ?x55841 l_0_16_51)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x57579 (* ?x55838 l_0_16_50)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x57577 (* ?x55835 l_0_16_49)))
 (let ((?x56533 (* (* 12.0 l_0_16_4) l_0_16_7)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x56530 (* ?x55830 l_0_16_30)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x56528 (* ?x55827 l_0_16_29)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x56526 (* ?x55815 l_0_16_28)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57547 (* ?x54684 l_0_16_172)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57545 (* ?x54681 l_0_16_151)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x55924 (* ?x54320 l_0_16_133)))
 (let ((?x57550 (- (+ (- (- (* (* 2.0 l_0_16_106) l_0_16_109) ?x55924) ?x57545) ?x57547) (* (* 2.0 l_0_16_193) l_0_16_196))))
 (let ((?x57554 (- (- ?x57550 (* (* 2.0 l_0_16_194) l_0_16_197)) (* (* 2.0 l_0_16_195) l_0_16_198))))
 (let ((?x57558 (- (- ?x57554 (* (* 2.0 l_0_16_214) l_0_16_217)) (* (* 2.0 l_0_16_215) l_0_16_218))))
 (let ((?x57562 (- (- ?x57558 (* (* 2.0 l_0_16_216) l_0_16_219)) (* (* 2.0 l_0_16_235) l_0_16_238))))
 (let ((?x57566 (- (- ?x57562 (* (* 2.0 l_0_16_236) l_0_16_239)) (* (* 2.0 l_0_16_237) l_0_16_240))))
 (let ((?x57571 (- (- (- ?x57566 ?x56526) (* (* 2.0 l_0_16_256) l_0_16_259)) (* (* 2.0 l_0_16_257) l_0_16_260))))
 (let ((?x57576 (+ (- (- (- ?x57571 (* (* 2.0 l_0_16_258) l_0_16_261)) ?x56528) ?x56530) ?x56533)))
 (let ((?x57588 (+ (+ (+ (+ (- (- (- ?x57576 ?x57577) ?x57579) ?x57581) ?x56545) ?x56548) ?x57585) ?x57587)))
 (= (- (+ ?x57588 ?x57589) ?x57591) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x57670 (* ?x55852 l_0_16_76)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x57668 (* ?x55849 l_0_16_75)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x57666 (* ?x55846 l_0_16_74)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x57415 (* ?x54052 l_0_16_67)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x57663 (* ?x55841 l_0_16_55)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x57661 (* ?x55838 l_0_16_54)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x57659 (* ?x55835 l_0_16_53)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x57413 (* ?x54043 l_0_16_46)))
 (let ((?x55830 (* 12.0 l_0_16_27)))
 (let ((?x56667 (* ?x55830 l_0_16_34)))
 (let ((?x55827 (* 12.0 l_0_16_26)))
 (let ((?x56665 (* ?x55827 l_0_16_33)))
 (let ((?x55815 (* 12.0 l_0_16_25)))
 (let ((?x56663 (* ?x55815 l_0_16_32)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x56640 (* ?x56142 l_0_16_6)))
 (let ((?x54320 (* 2.0 l_0_16_127)))
 (let ((?x56125 (* ?x54320 l_0_16_137)))
 (let ((?x56639 (+ (* (* 12.0 l_0_16_11) l_0_16_4) (* (* 12.0 l_0_16_12) l_0_16_5))))
 (let ((?x57634 (- (- (+ (- ?x56639 ?x56125) ?x56640) (* (* 2.0 l_0_16_193) l_0_16_200)) (* (* 2.0 l_0_16_194) l_0_16_201))))
 (let ((?x57638 (- (- ?x57634 (* (* 2.0 l_0_16_195) l_0_16_202)) (* (* 2.0 l_0_16_214) l_0_16_221))))
 (let ((?x57642 (- (- ?x57638 (* (* 2.0 l_0_16_215) l_0_16_222)) (* (* 2.0 l_0_16_216) l_0_16_223))))
 (let ((?x57646 (- (- ?x57642 (* (* 2.0 l_0_16_235) l_0_16_242)) (* (* 2.0 l_0_16_236) l_0_16_243))))
 (let ((?x57651 (- (- (- ?x57646 (* (* 2.0 l_0_16_237) l_0_16_244)) ?x56663) (* (* 2.0 l_0_16_256) l_0_16_263))))
 (let ((?x57655 (- (- ?x57651 (* (* 2.0 l_0_16_257) l_0_16_264)) (* (* 2.0 l_0_16_258) l_0_16_265))))
 (let ((?x57665 (- (- (- (- (+ (- (- ?x57655 ?x56665) ?x56667) ?x57413) ?x57659) ?x57661) ?x57663) ?x57415)))
 (= (+ (+ (+ ?x57665 ?x57666) ?x57668) ?x57670) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55372 (* l_0_16_9 l_0_16_9)))
 (let ((?x56907 (* 6.0 ?x55372)))
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57783 (* ?x54721 l_0_16_91)))
 (let ((?x55366 (* l_0_16_8 l_0_16_8)))
 (let ((?x56905 (* 6.0 ?x55366)))
 (let ((?x55364 (* l_0_16_7 l_0_16_7)))
 (let ((?x56891 (* 6.0 ?x55364)))
 (let ((?x56877 (* (* 6.0 l_0_16_31) l_0_16_31)))
 (let ((?x56874 (* (* 6.0 l_0_16_30) l_0_16_30)))
 (let ((?x56871 (* (* 6.0 l_0_16_29) l_0_16_29)))
 (let ((?x56868 (* (* 6.0 l_0_16_28) l_0_16_28)))
 (let ((?x57755 (* l_0_16_262 l_0_16_262)))
 (let ((?x57753 (* l_0_16_261 l_0_16_261)))
 (let ((?x57751 (* l_0_16_260 l_0_16_260)))
 (let ((?x57749 (* l_0_16_259 l_0_16_259)))
 (let ((?x57747 (* l_0_16_241 l_0_16_241)))
 (let ((?x57745 (* l_0_16_240 l_0_16_240)))
 (let ((?x57743 (* l_0_16_239 l_0_16_239)))
 (let ((?x57741 (* l_0_16_238 l_0_16_238)))
 (let ((?x57739 (* l_0_16_220 l_0_16_220)))
 (let ((?x57737 (* l_0_16_219 l_0_16_219)))
 (let ((?x57735 (* l_0_16_218 l_0_16_218)))
 (let ((?x57733 (* l_0_16_217 l_0_16_217)))
 (let ((?x57731 (* l_0_16_199 l_0_16_199)))
 (let ((?x57729 (* l_0_16_198 l_0_16_198)))
 (let ((?x57727 (* l_0_16_197 l_0_16_197)))
 (let ((?x57725 (* l_0_16_196 l_0_16_196)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57723 (* ?x54684 l_0_16_175)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57721 (* ?x54681 l_0_16_154)))
 (let ((?x55376 (* l_0_16_10 l_0_16_10)))
 (let ((?x33007 (* 6.0 ?x55376)))
 (let ((?x57726 (- (+ (- (+ ?x33007 (* (* 2.0 l_0_16_106) l_0_16_112)) ?x57721) ?x57723) ?x57725)))
 (let ((?x57740 (- (- (- (- (- (- (- ?x57726 ?x57727) ?x57729) ?x57731) ?x57733) ?x57735) ?x57737) ?x57739)))
 (let ((?x57754 (- (- (- (- (- (- (- ?x57740 ?x57741) ?x57743) ?x57745) ?x57747) ?x57749) ?x57751) ?x57753)))
 (let ((?x57763 (- (- (- (- (- (- ?x57754 ?x57755) ?x56868) ?x56871) ?x56874) ?x56877) (* (* 1.0 l_0_16_49) l_0_16_49))))
 (let ((?x57769 (- (- ?x57763 (* (* 1.0 l_0_16_50) l_0_16_50)) (* (* 1.0 l_0_16_51) l_0_16_51))))
 (let ((?x57775 (+ (+ (- ?x57769 (* (* 1.0 l_0_16_52) l_0_16_52)) ?x56891) (* 1.0 (* l_0_16_70 l_0_16_70)))))
 (let ((?x57779 (+ (+ ?x57775 (* 1.0 (* l_0_16_71 l_0_16_71))) (* 1.0 (* l_0_16_72 l_0_16_72)))))
 (let ((?x57785 (+ (- (+ (+ ?x57779 (* 1.0 (* l_0_16_73 l_0_16_73))) ?x56905) ?x57783) ?x56907)))
 (= ?x57785 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57895 (* ?x54721 l_0_16_95)))
 (let ((?x56023 (* 2.0 l_0_16_73)))
 (let ((?x57893 (* ?x56023 l_0_16_77)))
 (let ((?x56020 (* 2.0 l_0_16_72)))
 (let ((?x57891 (* ?x56020 l_0_16_76)))
 (let ((?x56017 (* 2.0 l_0_16_71)))
 (let ((?x57889 (* ?x56017 l_0_16_75)))
 (let ((?x56014 (* 2.0 l_0_16_70)))
 (let ((?x57887 (* ?x56014 l_0_16_74)))
 (let ((?x54052 (* 2.0 l_0_16_64)))
 (let ((?x57449 (* ?x54052 l_0_16_70)))
 (let ((?x56009 (* 2.0 l_0_16_52)))
 (let ((?x57884 (* ?x56009 l_0_16_56)))
 (let ((?x56006 (* 2.0 l_0_16_51)))
 (let ((?x57882 (* ?x56006 l_0_16_55)))
 (let ((?x56003 (* 2.0 l_0_16_50)))
 (let ((?x57880 (* ?x56003 l_0_16_54)))
 (let ((?x56000 (* 2.0 l_0_16_49)))
 (let ((?x57878 (* ?x56000 l_0_16_53)))
 (let ((?x54043 (* 2.0 l_0_16_43)))
 (let ((?x57447 (* ?x54043 l_0_16_49)))
 (let ((?x55995 (* 12.0 l_0_16_31)))
 (let ((?x57047 (* ?x55995 l_0_16_35)))
 (let ((?x55992 (* 12.0 l_0_16_30)))
 (let ((?x57045 (* ?x55992 l_0_16_34)))
 (let ((?x55989 (* 12.0 l_0_16_29)))
 (let ((?x57043 (* ?x55989 l_0_16_33)))
 (let ((?x55986 (* 12.0 l_0_16_28)))
 (let ((?x57041 (* ?x55986 l_0_16_32)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57839 (* ?x54684 l_0_16_179)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57837 (* ?x54681 l_0_16_158)))
 (let ((?x56142 (* 12.0 l_0_16_13)))
 (let ((?x57001 (* ?x56142 l_0_16_9)))
 (let ((?x54008 (* 12.0 l_0_16_12)))
 (let ((?x56996 (* ?x54008 l_0_16_8)))
 (let ((?x54005 (* 12.0 l_0_16_11)))
 (let ((?x56982 (* ?x54005 l_0_16_7)))
 (let ((?x6239 (* 12.0 l_0_16_10)))
 (let ((?x45147 (* ?x6239 l_0_16_14)))
 (let ((?x57836 (+ (+ (+ (+ ?x45147 (* (* 2.0 l_0_16_106) l_0_16_116)) ?x56982) ?x56996) ?x57001)))
 (let ((?x57844 (- (- (+ (- ?x57836 ?x57837) ?x57839) (* (* 2.0 l_0_16_196) l_0_16_200)) (* (* 2.0 l_0_16_197) l_0_16_201))))
 (let ((?x57848 (- (- ?x57844 (* (* 2.0 l_0_16_198) l_0_16_202)) (* (* 2.0 l_0_16_199) l_0_16_203))))
 (let ((?x57852 (- (- ?x57848 (* (* 2.0 l_0_16_217) l_0_16_221)) (* (* 2.0 l_0_16_218) l_0_16_222))))
 (let ((?x57856 (- (- ?x57852 (* (* 2.0 l_0_16_219) l_0_16_223)) (* (* 2.0 l_0_16_220) l_0_16_224))))
 (let ((?x57860 (- (- ?x57856 (* (* 2.0 l_0_16_238) l_0_16_242)) (* (* 2.0 l_0_16_239) l_0_16_243))))
 (let ((?x57864 (- (- ?x57860 (* (* 2.0 l_0_16_240) l_0_16_244)) (* (* 2.0 l_0_16_241) l_0_16_245))))
 (let ((?x57868 (- (- ?x57864 (* (* 2.0 l_0_16_259) l_0_16_263)) (* (* 2.0 l_0_16_260) l_0_16_264))))
 (let ((?x57872 (- (- ?x57868 (* (* 2.0 l_0_16_261) l_0_16_265)) (* (* 2.0 l_0_16_262) l_0_16_266))))
 (let ((?x57881 (- (- (+ (- (- (- (- ?x57872 ?x57041) ?x57043) ?x57045) ?x57047) ?x57447) ?x57878) ?x57880)))
 (let ((?x57894 (+ (+ (+ (+ (- (- (- ?x57881 ?x57882) ?x57884) ?x57449) ?x57887) ?x57889) ?x57891) ?x57893)))
 (= (- ?x57894 ?x57895) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53966 (* l_0_16_66 l_0_16_66)))
 (let ((?x55066 (* 3.0 ?x53966)))
 (let ((?x53963 (* l_0_16_65 l_0_16_65)))
 (let ((?x55064 (* 3.0 ?x53963)))
 (let ((?x55062 (* (* 3.0 l_0_16_45) l_0_16_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_16_44) l_0_16_44) ?x55062) ?x55064) ?x55066) 0.0)))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55300 (* ?x55299 l_0_16_68)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55297 (* ?x55296 l_0_16_67)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55294 (* ?x55293 l_0_16_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_16_44) l_0_16_46) ?x55294) ?x55297) ?x55300) 0.0))))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55561 (* ?x55299 l_0_16_71)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55559 (* ?x55296 l_0_16_70)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55557 (* ?x55293 l_0_16_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_16_44) l_0_16_49) ?x55557) ?x55559) ?x55561) 0.0))))))))
(assert
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55680 (* ?x55299 l_0_16_75)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55677 (* ?x55296 l_0_16_74)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55674 (* ?x55293 l_0_16_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_16_44) l_0_16_53) ?x55674) ?x55677) ?x55680) 0.0))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x54722 (* ?x54721 l_0_16_86)))
 (let ((?x55299 (* 6.0 l_0_16_66)))
 (let ((?x55744 (* ?x55299 l_0_16_80)))
 (let ((?x55296 (* 6.0 l_0_16_65)))
 (let ((?x55742 (* ?x55296 l_0_16_79)))
 (let ((?x55293 (* 6.0 l_0_16_45)))
 (let ((?x55739 (* ?x55293 l_0_16_59)))
 (let ((?x55290 (* 6.0 l_0_16_44)))
 (let ((?x55737 (* ?x55290 l_0_16_58)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x54685 (* ?x54684 l_0_16_170)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x54682 (* ?x54681 l_0_16_149)))
 (let ((?x57959 (- (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_107) ?x54682) ?x54685) ?x55737) ?x55739)))
 (= (+ (+ (+ ?x57959 ?x55742) ?x55744) ?x54722) 0.0)))))))))))))))))
(assert
 (let ((?x56422 (* l_0_16_69 l_0_16_69)))
 (let ((?x56423 (* 3.0 ?x56422)))
 (let ((?x56419 (* l_0_16_68 l_0_16_68)))
 (let ((?x56420 (* 3.0 ?x56419)))
 (let ((?x56416 (* l_0_16_67 l_0_16_67)))
 (let ((?x56417 (* 3.0 ?x56416)))
 (let ((?x56410 (* (* 3.0 l_0_16_48) l_0_16_48)))
 (let ((?x56407 (* (* 3.0 l_0_16_47) l_0_16_47)))
 (let ((?x10417 (+ (+ (- (- (* (* (- 3.0) l_0_16_46) l_0_16_46) ?x56407) ?x56410) ?x56417) ?x56420)))
 (= (+ ?x10417 ?x56423) 0.0)))))))))))
(assert
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56557 (* ?x56556 l_0_16_72)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56554 (* ?x56553 l_0_16_71)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56551 (* ?x56550 l_0_16_70)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56542 (* ?x56541 l_0_16_51)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56539 (* ?x56538 l_0_16_50)))
 (let ((?x57975 (+ (+ (- (- (* (* (- 6.0) l_0_16_46) l_0_16_49) ?x56539) ?x56542) ?x56551) ?x56554)))
 (= (+ ?x57975 ?x56557) 0.0)))))))))))))
(assert
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56684 (* ?x56556 l_0_16_76)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56681 (* ?x56553 l_0_16_75)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56678 (* ?x56550 l_0_16_74)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56675 (* ?x56541 l_0_16_55)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56672 (* ?x56538 l_0_16_54)))
 (let ((?x57984 (+ (+ (- (- (* (* (- 6.0) l_0_16_46) l_0_16_53) ?x56672) ?x56675) ?x56678) ?x56681)))
 (= (+ ?x57984 ?x56684) 0.0)))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57591 (* ?x54721 l_0_16_88)))
 (let ((?x56556 (* 6.0 l_0_16_69)))
 (let ((?x56776 (* ?x56556 l_0_16_81)))
 (let ((?x56553 (* 6.0 l_0_16_68)))
 (let ((?x56774 (* ?x56553 l_0_16_80)))
 (let ((?x56550 (* 6.0 l_0_16_67)))
 (let ((?x56772 (* ?x56550 l_0_16_79)))
 (let ((?x56541 (* 6.0 l_0_16_48)))
 (let ((?x56769 (* ?x56541 l_0_16_60)))
 (let ((?x56538 (* 6.0 l_0_16_47)))
 (let ((?x56767 (* ?x56538 l_0_16_59)))
 (let ((?x56535 (* 6.0 l_0_16_46)))
 (let ((?x56765 (* ?x56535 l_0_16_58)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57547 (* ?x54684 l_0_16_172)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57545 (* ?x54681 l_0_16_151)))
 (let ((?x57991 (- (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_109) ?x57545) ?x57547) ?x56765) ?x56767)))
 (= (+ (+ (+ (+ (- ?x57991 ?x56769) ?x56772) ?x56774) ?x56776) ?x57591) 0.0)))))))))))))))))))))
(assert
 (let ((?x56902 (* l_0_16_73 l_0_16_73)))
 (let ((?x56903 (* 3.0 ?x56902)))
 (let ((?x56899 (* l_0_16_72 l_0_16_72)))
 (let ((?x56900 (* 3.0 ?x56899)))
 (let ((?x56896 (* l_0_16_71 l_0_16_71)))
 (let ((?x56897 (* 3.0 ?x56896)))
 (let ((?x56893 (* l_0_16_70 l_0_16_70)))
 (let ((?x56894 (* 3.0 ?x56893)))
 (let ((?x56889 (* (* 3.0 l_0_16_52) l_0_16_52)))
 (let ((?x56886 (* (* 3.0 l_0_16_51) l_0_16_51)))
 (let ((?x56883 (* (* 3.0 l_0_16_50) l_0_16_50)))
 (let ((?x58001 (+ (- (- (- (* (* (- 3.0) l_0_16_49) l_0_16_49) ?x56883) ?x56886) ?x56889) ?x56894)))
 (= (+ (+ (+ ?x58001 ?x56897) ?x56900) ?x56903) 0.0))))))))))))))
(assert
 (let ((?x57077 (* 6.0 l_0_16_73)))
 (let ((?x57078 (* ?x57077 l_0_16_77)))
 (let ((?x57073 (* 6.0 l_0_16_72)))
 (let ((?x57074 (* ?x57073 l_0_16_76)))
 (let ((?x57069 (* 6.0 l_0_16_71)))
 (let ((?x57070 (* ?x57069 l_0_16_75)))
 (let ((?x57065 (* 6.0 l_0_16_70)))
 (let ((?x57066 (* ?x57065 l_0_16_74)))
 (let ((?x57061 (* 6.0 l_0_16_52)))
 (let ((?x57062 (* ?x57061 l_0_16_56)))
 (let ((?x57057 (* 6.0 l_0_16_51)))
 (let ((?x57058 (* ?x57057 l_0_16_55)))
 (let ((?x57053 (* 6.0 l_0_16_50)))
 (let ((?x57054 (* ?x57053 l_0_16_54)))
 (let ((?x58012 (+ (- (- (- (* (* (- 6.0) l_0_16_49) l_0_16_53) ?x57054) ?x57058) ?x57062) ?x57066)))
 (= (+ (+ (+ ?x58012 ?x57070) ?x57074) ?x57078) 0.0)))))))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57783 (* ?x54721 l_0_16_91)))
 (let ((?x57077 (* 6.0 l_0_16_73)))
 (let ((?x57207 (* ?x57077 l_0_16_82)))
 (let ((?x57073 (* 6.0 l_0_16_72)))
 (let ((?x57205 (* ?x57073 l_0_16_81)))
 (let ((?x57069 (* 6.0 l_0_16_71)))
 (let ((?x57203 (* ?x57069 l_0_16_80)))
 (let ((?x57065 (* 6.0 l_0_16_70)))
 (let ((?x57201 (* ?x57065 l_0_16_79)))
 (let ((?x57061 (* 6.0 l_0_16_52)))
 (let ((?x57198 (* ?x57061 l_0_16_61)))
 (let ((?x57057 (* 6.0 l_0_16_51)))
 (let ((?x57196 (* ?x57057 l_0_16_60)))
 (let ((?x57053 (* 6.0 l_0_16_50)))
 (let ((?x57194 (* ?x57053 l_0_16_59)))
 (let ((?x57049 (* 6.0 l_0_16_49)))
 (let ((?x57192 (* ?x57049 l_0_16_58)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57723 (* ?x54684 l_0_16_175)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57721 (* ?x54681 l_0_16_154)))
 (let ((?x58026 (- (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_112) ?x57721) ?x57723) ?x57192) ?x57194)))
 (let ((?x58033 (+ (+ (+ (+ (+ (- (- ?x58026 ?x57196) ?x57198) ?x57201) ?x57203) ?x57205) ?x57207) ?x57783)))
 (= ?x58033 0.0))))))))))))))))))))))))))
(assert
 (let ((?x54281 (* l_0_16_78 l_0_16_78)))
 (let ((?x57291 (* 3.0 ?x54281)))
 (let ((?x54278 (* l_0_16_77 l_0_16_77)))
 (let ((?x57288 (* 3.0 ?x54278)))
 (let ((?x54275 (* l_0_16_76 l_0_16_76)))
 (let ((?x57285 (* 3.0 ?x54275)))
 (let ((?x54272 (* l_0_16_75 l_0_16_75)))
 (let ((?x57282 (* 3.0 ?x54272)))
 (let ((?x54269 (* l_0_16_74 l_0_16_74)))
 (let ((?x57279 (* 3.0 ?x54269)))
 (let ((?x57276 (* (* 3.0 l_0_16_57) l_0_16_57)))
 (let ((?x57272 (* (* 3.0 l_0_16_56) l_0_16_56)))
 (let ((?x57268 (* (* 3.0 l_0_16_55) l_0_16_55)))
 (let ((?x57264 (* (* 3.0 l_0_16_54) l_0_16_54)))
 (let ((?x58044 (- (- (- (- (* (* (- 3.0) l_0_16_53) l_0_16_53) ?x57264) ?x57268) ?x57272) ?x57276)))
 (= (+ (+ (+ (+ (+ ?x58044 ?x57279) ?x57282) ?x57285) ?x57288) ?x57291) 0.0)))))))))))))))))
(assert
 (let ((?x54721 (* 2.0 l_0_16_85)))
 (let ((?x57895 (* ?x54721 l_0_16_95)))
 (let ((?x57329 (* (* 6.0 l_0_16_78) l_0_16_83)))
 (let ((?x57326 (* (* 6.0 l_0_16_77) l_0_16_82)))
 (let ((?x57323 (* (* 6.0 l_0_16_76) l_0_16_81)))
 (let ((?x57320 (* (* 6.0 l_0_16_75) l_0_16_80)))
 (let ((?x57317 (* (* 6.0 l_0_16_74) l_0_16_79)))
 (let ((?x57307 (* (* 6.0 l_0_16_57) l_0_16_62)))
 (let ((?x57304 (* (* 6.0 l_0_16_56) l_0_16_61)))
 (let ((?x57301 (* (* 6.0 l_0_16_55) l_0_16_60)))
 (let ((?x57298 (* (* 6.0 l_0_16_54) l_0_16_59)))
 (let ((?x57295 (* (* 6.0 l_0_16_53) l_0_16_58)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x57839 (* ?x54684 l_0_16_179)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x57837 (* ?x54681 l_0_16_158)))
 (let ((?x58055 (- (- (- (+ (* (* (- 2.0) l_0_16_106) l_0_16_116) ?x57837) ?x57839) ?x57295) ?x57298)))
 (let ((?x58062 (+ (+ (+ (+ (- (- (- ?x58055 ?x57301) ?x57304) ?x57307) ?x57317) ?x57320) ?x57323) ?x57326)))
 (= (+ (+ ?x58062 ?x57329) ?x57895) 0.0))))))))))))))))))))
(assert
 (let ((?x54453 (* l_0_16_84 l_0_16_84)))
 (let ((?x57387 (* 3.0 ?x54453)))
 (let ((?x54450 (* l_0_16_83 l_0_16_83)))
 (let ((?x57385 (* 3.0 ?x54450)))
 (let ((?x54447 (* l_0_16_82 l_0_16_82)))
 (let ((?x57383 (* 3.0 ?x54447)))
 (let ((?x54444 (* l_0_16_81 l_0_16_81)))
 (let ((?x57381 (* 3.0 ?x54444)))
 (let ((?x54441 (* l_0_16_80 l_0_16_80)))
 (let ((?x57379 (* 3.0 ?x54441)))
 (let ((?x54438 (* l_0_16_79 l_0_16_79)))
 (let ((?x57377 (* 3.0 ?x54438)))
 (let ((?x57374 (* (* 3.0 l_0_16_63) l_0_16_63)))
 (let ((?x57371 (* (* 3.0 l_0_16_62) l_0_16_62)))
 (let ((?x57368 (* (* 3.0 l_0_16_61) l_0_16_61)))
 (let ((?x57365 (* (* 3.0 l_0_16_60) l_0_16_60)))
 (let ((?x57362 (* (* 3.0 l_0_16_59) l_0_16_59)))
 (let ((?x57359 (* (* 3.0 l_0_16_58) l_0_16_58)))
 (let ((?x54684 (* 2.0 l_0_16_169)))
 (let ((?x55930 (* ?x54684 l_0_16_184)))
 (let ((?x54681 (* 2.0 l_0_16_148)))
 (let ((?x55926 (* ?x54681 l_0_16_163)))
 (let ((?x44415 (* 2.0 l_0_16_106)))
 (let ((?x55922 (* ?x44415 l_0_16_121)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x55909 (* ?x55517 l_0_16_85)))
 (let ((?x36040 (- (- (- (- (- (+ (- ?x55909 ?x55922) ?x55926) ?x55930) ?x57359) ?x57362) ?x57365) ?x57368)))
 (let ((?x36014 (+ (+ (+ (+ (+ (- (- ?x36040 ?x57371) ?x57374) ?x57377) ?x57379) ?x57381) ?x57383) ?x57385)))
 (= (+ ?x36014 ?x57387) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56422 (* l_0_16_69 l_0_16_69)))
 (let ((?x56419 (* l_0_16_68 l_0_16_68)))
 (let ((?x56416 (* l_0_16_67 l_0_16_67)))
 (let ((?x24432 (* l_0_16_48 l_0_16_48)))
 (let ((?x56456 (* l_0_16_47 l_0_16_47)))
 (let ((?x6996 (* l_0_16_46 l_0_16_46)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56646 (* ?x56387 l_0_16_139)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56644 (* ?x56367 l_0_16_138)))
 (let ((?x11025 (+ (+ (- (- (* (* (- 2.0) l_0_16_130) l_0_16_137) ?x56644) ?x56646) ?x6996) ?x56456)))
 (= (- (- (- (+ ?x11025 ?x24432) ?x56416) ?x56419) ?x56422) 0.0)))))))))))))
(assert
 (let ((?x58114 (* 2.0 l_0_16_90)))
 (let ((?x58115 (* ?x58114 l_0_16_97)))
 (let ((?x58111 (* 2.0 l_0_16_89)))
 (let ((?x58112 (* ?x58111 l_0_16_96)))
 (let ((?x58108 (* 2.0 l_0_16_88)))
 (let ((?x58109 (* ?x58108 l_0_16_95)))
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x57589 (* ?x55852 l_0_16_72)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x57587 (* ?x55849 l_0_16_71)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x57585 (* ?x55846 l_0_16_70)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x57581 (* ?x55841 l_0_16_51)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x57579 (* ?x55838 l_0_16_50)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x57577 (* ?x55835 l_0_16_49)))
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x58100 (* ?x56523 l_0_16_181)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x58098 (* ?x56520 l_0_16_180)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x58096 (* ?x56517 l_0_16_179)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x58094 (* ?x56514 l_0_16_160)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x58092 (* ?x56511 l_0_16_159)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x58090 (* ?x56508 l_0_16_158)))
 (let ((?x56505 (* 2.0 l_0_16_136)))
 (let ((?x57009 (* ?x56505 l_0_16_140)))
 (let ((?x56502 (* 2.0 l_0_16_135)))
 (let ((?x57007 (* ?x56502 l_0_16_139)))
 (let ((?x56499 (* 2.0 l_0_16_134)))
 (let ((?x57005 (* ?x56499 l_0_16_138)))
 (let ((?x56496 (* 2.0 l_0_16_133)))
 (let ((?x57003 (* ?x56496 l_0_16_137)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x58084 (* ?x56486 l_0_16_118)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x58082 (* ?x56483 l_0_16_117)))
 (let ((?x58087 (- (- (+ (+ (* (* 2.0 l_0_16_109) l_0_16_116) ?x58082) ?x58084) ?x57003) ?x57005)))
 (let ((?x58099 (+ (+ (- (- (- (- (- ?x58087 ?x57007) ?x57009) ?x58090) ?x58092) ?x58094) ?x58096) ?x58098)))
 (let ((?x58107 (- (- (- (+ (+ (+ (+ ?x58099 ?x58100) ?x57577) ?x57579) ?x57581) ?x57585) ?x57587) ?x57589)))
 (= (- (- (- ?x58107 ?x58109) ?x58112) ?x58115) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55852 (* 2.0 l_0_16_69)))
 (let ((?x57670 (* ?x55852 l_0_16_76)))
 (let ((?x55849 (* 2.0 l_0_16_68)))
 (let ((?x57668 (* ?x55849 l_0_16_75)))
 (let ((?x55846 (* 2.0 l_0_16_67)))
 (let ((?x57666 (* ?x55846 l_0_16_74)))
 (let ((?x55841 (* 2.0 l_0_16_48)))
 (let ((?x57663 (* ?x55841 l_0_16_55)))
 (let ((?x55838 (* 2.0 l_0_16_47)))
 (let ((?x57661 (* ?x55838 l_0_16_54)))
 (let ((?x55835 (* 2.0 l_0_16_46)))
 (let ((?x57659 (* ?x55835 l_0_16_53)))
 (let ((?x57250 (* l_0_16_141 l_0_16_141)))
 (let ((?x57248 (* l_0_16_140 l_0_16_140)))
 (let ((?x57245 (* l_0_16_139 l_0_16_139)))
 (let ((?x58144 (- (- (* (- l_0_16_137) l_0_16_137) (* l_0_16_138 l_0_16_138)) ?x57245)))
 (let ((?x58151 (- (- (+ (+ (+ (- (- ?x58144 ?x57248) ?x57250) ?x57659) ?x57661) ?x57663) ?x57666) ?x57668)))
 (= (- ?x58151 ?x57670) 0.0)))))))))))))))))))
(assert
 (let ((?x58181 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x58178 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x58175 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x58172 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x56902 (* l_0_16_73 l_0_16_73)))
 (let ((?x56899 (* l_0_16_72 l_0_16_72)))
 (let ((?x56896 (* l_0_16_71 l_0_16_71)))
 (let ((?x56893 (* l_0_16_70 l_0_16_70)))
 (let ((?x35181 (* l_0_16_52 l_0_16_52)))
 (let ((?x45113 (* l_0_16_51 l_0_16_51)))
 (let ((?x56967 (* l_0_16_50 l_0_16_50)))
 (let ((?x45114 (* l_0_16_49 l_0_16_49)))
 (let ((?x56864 (* 2.0 l_0_16_178)))
 (let ((?x58161 (* ?x56864 l_0_16_182)))
 (let ((?x56861 (* 2.0 l_0_16_177)))
 (let ((?x58159 (* ?x56861 l_0_16_181)))
 (let ((?x56858 (* 2.0 l_0_16_176)))
 (let ((?x25768 (* ?x56858 l_0_16_180)))
 (let ((?x56855 (* 2.0 l_0_16_175)))
 (let ((?x36236 (* ?x56855 l_0_16_179)))
 (let ((?x56852 (* 2.0 l_0_16_157)))
 (let ((?x36258 (* ?x56852 l_0_16_161)))
 (let ((?x56849 (* 2.0 l_0_16_156)))
 (let ((?x47871 (* ?x56849 l_0_16_160)))
 (let ((?x56846 (* 2.0 l_0_16_155)))
 (let ((?x36356 (* ?x56846 l_0_16_159)))
 (let ((?x56843 (* 2.0 l_0_16_154)))
 (let ((?x47863 (* ?x56843 l_0_16_158)))
 (let ((?x56832 (* 2.0 l_0_16_115)))
 (let ((?x47831 (* ?x56832 l_0_16_119)))
 (let ((?x56829 (* 2.0 l_0_16_114)))
 (let ((?x11493 (* ?x56829 l_0_16_118)))
 (let ((?x56826 (* 2.0 l_0_16_113)))
 (let ((?x47840 (* ?x56826 l_0_16_117)))
 (let ((?x36350 (- (+ (+ (+ (* (* 2.0 l_0_16_112) l_0_16_116) ?x47840) ?x11493) ?x47831) ?x47863)))
 (let ((?x58162 (+ (+ (+ (+ (- (- (- ?x36350 ?x36356) ?x47871) ?x36258) ?x36236) ?x25768) ?x58159) ?x58161)))
 (let ((?x58169 (- (- (- (+ (+ (+ (+ ?x58162 ?x45114) ?x56967) ?x45113) ?x35181) ?x56893) ?x56896) ?x56899)))
 (= (- (- (- (- (- ?x58169 ?x56902) ?x58172) ?x58175) ?x58178) ?x58181) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58273 (* l_0_16_99 l_0_16_99)))
 (let ((?x58271 (* l_0_16_98 l_0_16_98)))
 (let ((?x58269 (* l_0_16_97 l_0_16_97)))
 (let ((?x58267 (* l_0_16_96 l_0_16_96)))
 (let ((?x58265 (* l_0_16_95 l_0_16_95)))
 (let ((?x56023 (* 2.0 l_0_16_73)))
 (let ((?x57893 (* ?x56023 l_0_16_77)))
 (let ((?x56020 (* 2.0 l_0_16_72)))
 (let ((?x57891 (* ?x56020 l_0_16_76)))
 (let ((?x56017 (* 2.0 l_0_16_71)))
 (let ((?x57889 (* ?x56017 l_0_16_75)))
 (let ((?x56014 (* 2.0 l_0_16_70)))
 (let ((?x57887 (* ?x56014 l_0_16_74)))
 (let ((?x56009 (* 2.0 l_0_16_52)))
 (let ((?x57884 (* ?x56009 l_0_16_56)))
 (let ((?x56006 (* 2.0 l_0_16_51)))
 (let ((?x57882 (* ?x56006 l_0_16_55)))
 (let ((?x56003 (* 2.0 l_0_16_50)))
 (let ((?x57880 (* ?x56003 l_0_16_54)))
 (let ((?x56000 (* 2.0 l_0_16_49)))
 (let ((?x57878 (* ?x56000 l_0_16_53)))
 (let ((?x58255 (* l_0_16_183 l_0_16_183)))
 (let ((?x58253 (* l_0_16_182 l_0_16_182)))
 (let ((?x58251 (* l_0_16_181 l_0_16_181)))
 (let ((?x58249 (* l_0_16_180 l_0_16_180)))
 (let ((?x58247 (* l_0_16_179 l_0_16_179)))
 (let ((?x58245 (* l_0_16_162 l_0_16_162)))
 (let ((?x58243 (* l_0_16_161 l_0_16_161)))
 (let ((?x58241 (* l_0_16_160 l_0_16_160)))
 (let ((?x58239 (* l_0_16_159 l_0_16_159)))
 (let ((?x58237 (* l_0_16_158 l_0_16_158)))
 (let ((?x58235 (* l_0_16_120 l_0_16_120)))
 (let ((?x58233 (* l_0_16_119 l_0_16_119)))
 (let ((?x58231 (* l_0_16_118 l_0_16_118)))
 (let ((?x58232 (+ (+ (* l_0_16_116 l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x58231)))
 (let ((?x58246 (- (- (- (- (- (+ (+ ?x58232 ?x58233) ?x58235) ?x58237) ?x58239) ?x58241) ?x58243) ?x58245)))
 (let ((?x58258 (+ (+ (+ (+ (+ (+ (+ ?x58246 ?x58247) ?x58249) ?x58251) ?x58253) ?x58255) ?x57878) ?x57880)))
 (let ((?x58266 (- (- (- (- (- (+ (+ ?x58258 ?x57882) ?x57884) ?x57887) ?x57889) ?x57891) ?x57893) ?x58265)))
 (= (- (- (- (- ?x58266 ?x58267) ?x58269) ?x58271) ?x58273) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x54281 (* l_0_16_78 l_0_16_78)))
 (let ((?x54278 (* l_0_16_77 l_0_16_77)))
 (let ((?x54275 (* l_0_16_76 l_0_16_76)))
 (let ((?x54272 (* l_0_16_75 l_0_16_75)))
 (let ((?x54269 (* l_0_16_74 l_0_16_74)))
 (let ((?x22274 (* l_0_16_57 l_0_16_57)))
 (let ((?x44225 (* l_0_16_56 l_0_16_56)))
 (let ((?x33587 (* l_0_16_55 l_0_16_55)))
 (let ((?x58290 (+ (+ (+ (* l_0_16_53 l_0_16_53) (* l_0_16_54 l_0_16_54)) ?x33587) ?x44225)))
 (= (- (- (- (- (- (+ ?x58290 ?x22274) ?x54269) ?x54272) ?x54275) ?x54278) ?x54281) 0.0)))))))))))
(assert
 (let ((?x58334 (* l_0_16_90 l_0_16_90)))
 (let ((?x58332 (* l_0_16_89 l_0_16_89)))
 (let ((?x58330 (* l_0_16_88 l_0_16_88)))
 (let ((?x58328 (* l_0_16_174 l_0_16_174)))
 (let ((?x58326 (* l_0_16_173 l_0_16_173)))
 (let ((?x58324 (* l_0_16_172 l_0_16_172)))
 (let ((?x58322 (* l_0_16_153 l_0_16_153)))
 (let ((?x58320 (* l_0_16_152 l_0_16_152)))
 (let ((?x58318 (* l_0_16_151 l_0_16_151)))
 (let ((?x56387 (* 2.0 l_0_16_132)))
 (let ((?x56494 (* ?x56387 l_0_16_135)))
 (let ((?x56367 (* 2.0 l_0_16_131)))
 (let ((?x56492 (* ?x56367 l_0_16_134)))
 (let ((?x56489 (* 2.0 l_0_16_130)))
 (let ((?x56490 (* ?x56489 l_0_16_133)))
 (let ((?x58313 (* l_0_16_111 l_0_16_111)))
 (let ((?x58314 (+ (+ (* l_0_16_109 l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x58313)))
 (let ((?x58325 (+ (- (- (- (- (- (- ?x58314 ?x56490) ?x56492) ?x56494) ?x58318) ?x58320) ?x58322) ?x58324)))
 (= (- (- (- (+ (+ ?x58325 ?x58326) ?x58328) ?x58330) ?x58332) ?x58334) 0.0))))))))))))))))))))
(assert
 (let ((?x58114 (* 2.0 l_0_16_90)))
 (let ((?x58375 (* ?x58114 l_0_16_93)))
 (let ((?x58111 (* 2.0 l_0_16_89)))
 (let ((?x58373 (* ?x58111 l_0_16_92)))
 (let ((?x58108 (* 2.0 l_0_16_88)))
 (let ((?x58371 (* ?x58108 l_0_16_91)))
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x58369 (* ?x56523 l_0_16_177)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x58367 (* ?x56520 l_0_16_176)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x58365 (* ?x56517 l_0_16_175)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x58363 (* ?x56514 l_0_16_156)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x58361 (* ?x56511 l_0_16_155)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x58359 (* ?x56508 l_0_16_154)))
 (let ((?x56841 (* l_0_16_136 l_0_16_136)))
 (let ((?x56839 (* l_0_16_135 l_0_16_135)))
 (let ((?x56837 (* l_0_16_134 l_0_16_134)))
 (let ((?x56835 (* l_0_16_133 l_0_16_133)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x58353 (* ?x56486 l_0_16_114)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x58351 (* ?x56483 l_0_16_113)))
 (let ((?x58356 (- (- (+ (+ (* (* 2.0 l_0_16_109) l_0_16_112) ?x58351) ?x58353) ?x56835) ?x56837)))
 (let ((?x58368 (+ (+ (- (- (- (- (- ?x58356 ?x56839) ?x56841) ?x58359) ?x58361) ?x58363) ?x58365) ?x58367)))
 (= (- (- (- (+ ?x58368 ?x58369) ?x58371) ?x58373) ?x58375) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x58453 (* l_0_16_94 l_0_16_94)))
 (let ((?x58451 (* l_0_16_93 l_0_16_93)))
 (let ((?x58449 (* l_0_16_92 l_0_16_92)))
 (let ((?x58447 (* l_0_16_91 l_0_16_91)))
 (let ((?x58445 (* l_0_16_178 l_0_16_178)))
 (let ((?x58443 (* l_0_16_177 l_0_16_177)))
 (let ((?x58441 (* l_0_16_176 l_0_16_176)))
 (let ((?x58439 (* l_0_16_175 l_0_16_175)))
 (let ((?x58437 (* l_0_16_157 l_0_16_157)))
 (let ((?x58435 (* l_0_16_156 l_0_16_156)))
 (let ((?x58433 (* l_0_16_155 l_0_16_155)))
 (let ((?x58431 (* l_0_16_154 l_0_16_154)))
 (let ((?x58429 (* l_0_16_115 l_0_16_115)))
 (let ((?x58427 (* l_0_16_114 l_0_16_114)))
 (let ((?x58428 (+ (+ (* l_0_16_112 l_0_16_112) (* l_0_16_113 l_0_16_113)) ?x58427)))
 (let ((?x58442 (+ (+ (- (- (- (- (+ ?x58428 ?x58429) ?x58431) ?x58433) ?x58435) ?x58437) ?x58439) ?x58441)))
 (= (- (- (- (- (+ (+ ?x58442 ?x58443) ?x58445) ?x58447) ?x58449) ?x58451) ?x58453) 0.0))))))))))))))))))
(assert
 (let ((?x54991 (* l_0_16_87 l_0_16_87)))
 (let ((?x54989 (* l_0_16_86 l_0_16_86)))
 (let ((?x54979 (* l_0_16_171 l_0_16_171)))
 (let ((?x54977 (* l_0_16_170 l_0_16_170)))
 (let ((?x54975 (* l_0_16_150 l_0_16_150)))
 (let ((?x54973 (* l_0_16_149 l_0_16_149)))
 (let ((?x58471 (+ (- (* (- l_0_16_107) l_0_16_107) (* l_0_16_108 l_0_16_108)) ?x54973)))
 (= (+ (+ (- (- (+ ?x58471 ?x54975) ?x54977) ?x54979) ?x54989) ?x54991) 0.0)))))))))
(assert
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55163 (* ?x55162 l_0_16_89)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55160 (* ?x55159 l_0_16_88)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55139 (* ?x55138 l_0_16_173)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55136 (* ?x55135 l_0_16_172)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55133 (* ?x55132 l_0_16_152)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55130 (* ?x55129 l_0_16_151)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55122 (* ?x55121 l_0_16_110)))
 (let ((?x46939 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_109) ?x55122) ?x55130) ?x55133) ?x55136)))
 (= (+ (+ (- ?x46939 ?x55139) ?x55160) ?x55163) 0.0)))))))))))))))))
(assert
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55370 (* ?x55162 l_0_16_92)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55368 (* ?x55159 l_0_16_91)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55354 (* ?x55138 l_0_16_176)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55352 (* ?x55135 l_0_16_175)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55350 (* ?x55132 l_0_16_155)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55348 (* ?x55129 l_0_16_154)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55346 (* ?x55121 l_0_16_113)))
 (let ((?x10175 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_112) ?x55346) ?x55348) ?x55350) ?x55352)))
 (= (+ (+ (- ?x10175 ?x55354) ?x55368) ?x55370) 0.0)))))))))))))))))
(assert
 (let ((?x55162 (* 2.0 l_0_16_87)))
 (let ((?x55449 (* ?x55162 l_0_16_96)))
 (let ((?x55159 (* 2.0 l_0_16_86)))
 (let ((?x55447 (* ?x55159 l_0_16_95)))
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55429 (* ?x55138 l_0_16_180)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55427 (* ?x55135 l_0_16_179)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55425 (* ?x55132 l_0_16_159)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55423 (* ?x55129 l_0_16_158)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55414 (* ?x55121 l_0_16_117)))
 (let ((?x35788 (- (+ (+ (- (* (* (- 2.0) l_0_16_107) l_0_16_116) ?x55414) ?x55423) ?x55425) ?x55427)))
 (= (+ (+ (- ?x35788 ?x55429) ?x55447) ?x55449) 0.0)))))))))))))))))
(assert
 (let ((?x55138 (* 2.0 l_0_16_171)))
 (let ((?x55539 (* ?x55138 l_0_16_185)))
 (let ((?x55135 (* 2.0 l_0_16_170)))
 (let ((?x55537 (* ?x55135 l_0_16_184)))
 (let ((?x55132 (* 2.0 l_0_16_150)))
 (let ((?x55531 (* ?x55132 l_0_16_164)))
 (let ((?x55129 (* 2.0 l_0_16_149)))
 (let ((?x55529 (* ?x55129 l_0_16_163)))
 (let ((?x55121 (* 2.0 l_0_16_108)))
 (let ((?x55525 (* ?x55121 l_0_16_122)))
 (let ((?x55119 (* 2.0 l_0_16_107)))
 (let ((?x55523 (* ?x55119 l_0_16_121)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x55521 (* ?x55520 l_0_16_87)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x55518 (* ?x55517 l_0_16_86)))
 (let ((?x58485 (- (- (+ (+ (- (- (+ ?x55518 ?x55521) ?x55523) ?x55525) ?x55529) ?x55531) ?x55537) ?x55539)))
 (= ?x58485 0.0)))))))))))))))))))
(assert
 (let ((?x58334 (* l_0_16_90 l_0_16_90)))
 (let ((?x58332 (* l_0_16_89 l_0_16_89)))
 (let ((?x58330 (* l_0_16_88 l_0_16_88)))
 (let ((?x58328 (* l_0_16_174 l_0_16_174)))
 (let ((?x58326 (* l_0_16_173 l_0_16_173)))
 (let ((?x58324 (* l_0_16_172 l_0_16_172)))
 (let ((?x58322 (* l_0_16_153 l_0_16_153)))
 (let ((?x58320 (* l_0_16_152 l_0_16_152)))
 (let ((?x58318 (* l_0_16_151 l_0_16_151)))
 (let ((?x58313 (* l_0_16_111 l_0_16_111)))
 (let ((?x48219 (- (- (* (- l_0_16_109) l_0_16_109) (* l_0_16_110 l_0_16_110)) ?x58313)))
 (let ((?x58488 (+ (- (- (- (+ (+ (+ ?x48219 ?x58318) ?x58320) ?x58322) ?x58324) ?x58326) ?x58328) ?x58330)))
 (= (+ (+ ?x58488 ?x58332) ?x58334) 0.0))))))))))))))
(assert
 (let ((?x58114 (* 2.0 l_0_16_90)))
 (let ((?x58375 (* ?x58114 l_0_16_93)))
 (let ((?x58111 (* 2.0 l_0_16_89)))
 (let ((?x58373 (* ?x58111 l_0_16_92)))
 (let ((?x58108 (* 2.0 l_0_16_88)))
 (let ((?x58371 (* ?x58108 l_0_16_91)))
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x58369 (* ?x56523 l_0_16_177)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x58367 (* ?x56520 l_0_16_176)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x58365 (* ?x56517 l_0_16_175)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x58363 (* ?x56514 l_0_16_156)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x58361 (* ?x56511 l_0_16_155)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x58359 (* ?x56508 l_0_16_154)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x58353 (* ?x56486 l_0_16_114)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x58351 (* ?x56483 l_0_16_113)))
 (let ((?x58496 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_112) ?x58351) ?x58353) ?x58359) ?x58361)))
 (let ((?x58503 (+ (+ (+ (- (- (- (+ ?x58496 ?x58363) ?x58365) ?x58367) ?x58369) ?x58371) ?x58373) ?x58375)))
 (= ?x58503 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58114 (* 2.0 l_0_16_90)))
 (let ((?x58115 (* ?x58114 l_0_16_97)))
 (let ((?x58111 (* 2.0 l_0_16_89)))
 (let ((?x58112 (* ?x58111 l_0_16_96)))
 (let ((?x58108 (* 2.0 l_0_16_88)))
 (let ((?x58109 (* ?x58108 l_0_16_95)))
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x58100 (* ?x56523 l_0_16_181)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x58098 (* ?x56520 l_0_16_180)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x58096 (* ?x56517 l_0_16_179)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x58094 (* ?x56514 l_0_16_160)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x58092 (* ?x56511 l_0_16_159)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x58090 (* ?x56508 l_0_16_158)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x58084 (* ?x56486 l_0_16_118)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x58082 (* ?x56483 l_0_16_117)))
 (let ((?x48294 (+ (+ (- (- (* (* (- 2.0) l_0_16_109) l_0_16_116) ?x58082) ?x58084) ?x58090) ?x58092)))
 (let ((?x37069 (+ (+ (+ (- (- (- (+ ?x48294 ?x58094) ?x58096) ?x58098) ?x58100) ?x58109) ?x58112) ?x58115)))
 (= ?x37069 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56523 (* 2.0 l_0_16_174)))
 (let ((?x56524 (* ?x56523 l_0_16_186)))
 (let ((?x56520 (* 2.0 l_0_16_173)))
 (let ((?x56521 (* ?x56520 l_0_16_185)))
 (let ((?x56517 (* 2.0 l_0_16_172)))
 (let ((?x56518 (* ?x56517 l_0_16_184)))
 (let ((?x56514 (* 2.0 l_0_16_153)))
 (let ((?x56515 (* ?x56514 l_0_16_165)))
 (let ((?x56511 (* 2.0 l_0_16_152)))
 (let ((?x56512 (* ?x56511 l_0_16_164)))
 (let ((?x56508 (* 2.0 l_0_16_151)))
 (let ((?x56509 (* ?x56508 l_0_16_163)))
 (let ((?x56486 (* 2.0 l_0_16_111)))
 (let ((?x56487 (* ?x56486 l_0_16_123)))
 (let ((?x56483 (* 2.0 l_0_16_110)))
 (let ((?x56484 (* ?x56483 l_0_16_122)))
 (let ((?x56480 (* 2.0 l_0_16_109)))
 (let ((?x56481 (* ?x56480 l_0_16_121)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56478 (* ?x56477 l_0_16_90)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56475 (* ?x55520 l_0_16_89)))
 (let ((?x48352 (- (- (+ (+ (* (* 2.0 l_0_16_100) l_0_16_88) ?x56475) ?x56478) ?x56481) ?x56484)))
 (let ((?x37095 (- (- (- (+ (+ (+ (- ?x48352 ?x56487) ?x56509) ?x56512) ?x56515) ?x56518) ?x56521) ?x56524)))
 (= ?x37095 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58453 (* l_0_16_94 l_0_16_94)))
 (let ((?x58451 (* l_0_16_93 l_0_16_93)))
 (let ((?x58449 (* l_0_16_92 l_0_16_92)))
 (let ((?x58447 (* l_0_16_91 l_0_16_91)))
 (let ((?x58445 (* l_0_16_178 l_0_16_178)))
 (let ((?x58443 (* l_0_16_177 l_0_16_177)))
 (let ((?x58441 (* l_0_16_176 l_0_16_176)))
 (let ((?x58439 (* l_0_16_175 l_0_16_175)))
 (let ((?x58437 (* l_0_16_157 l_0_16_157)))
 (let ((?x58435 (* l_0_16_156 l_0_16_156)))
 (let ((?x58433 (* l_0_16_155 l_0_16_155)))
 (let ((?x58431 (* l_0_16_154 l_0_16_154)))
 (let ((?x58429 (* l_0_16_115 l_0_16_115)))
 (let ((?x58427 (* l_0_16_114 l_0_16_114)))
 (let ((?x11038 (- (- (* (- l_0_16_112) l_0_16_112) (* l_0_16_113 l_0_16_113)) ?x58427)))
 (let ((?x48380 (- (- (+ (+ (+ (+ (- ?x11038 ?x58429) ?x58431) ?x58433) ?x58435) ?x58437) ?x58439) ?x58441)))
 (= (+ (+ (+ (+ (- (- ?x48380 ?x58443) ?x58445) ?x58447) ?x58449) ?x58451) ?x58453) 0.0))))))))))))))))))
(assert
 (let ((?x58181 (* (* 2.0 l_0_16_94) l_0_16_98)))
 (let ((?x58178 (* (* 2.0 l_0_16_93) l_0_16_97)))
 (let ((?x58175 (* (* 2.0 l_0_16_92) l_0_16_96)))
 (let ((?x58172 (* (* 2.0 l_0_16_91) l_0_16_95)))
 (let ((?x56864 (* 2.0 l_0_16_178)))
 (let ((?x58161 (* ?x56864 l_0_16_182)))
 (let ((?x56861 (* 2.0 l_0_16_177)))
 (let ((?x58159 (* ?x56861 l_0_16_181)))
 (let ((?x56858 (* 2.0 l_0_16_176)))
 (let ((?x25768 (* ?x56858 l_0_16_180)))
 (let ((?x56855 (* 2.0 l_0_16_175)))
 (let ((?x36236 (* ?x56855 l_0_16_179)))
 (let ((?x56852 (* 2.0 l_0_16_157)))
 (let ((?x36258 (* ?x56852 l_0_16_161)))
 (let ((?x56849 (* 2.0 l_0_16_156)))
 (let ((?x47871 (* ?x56849 l_0_16_160)))
 (let ((?x56846 (* 2.0 l_0_16_155)))
 (let ((?x36356 (* ?x56846 l_0_16_159)))
 (let ((?x56843 (* 2.0 l_0_16_154)))
 (let ((?x47863 (* ?x56843 l_0_16_158)))
 (let ((?x56832 (* 2.0 l_0_16_115)))
 (let ((?x47831 (* ?x56832 l_0_16_119)))
 (let ((?x56829 (* 2.0 l_0_16_114)))
 (let ((?x11493 (* ?x56829 l_0_16_118)))
 (let ((?x56826 (* 2.0 l_0_16_113)))
 (let ((?x47840 (* ?x56826 l_0_16_117)))
 (let ((?x37197 (+ (- (- (- (* (* (- 2.0) l_0_16_112) l_0_16_116) ?x47840) ?x11493) ?x47831) ?x47863)))
 (let ((?x58523 (- (- (- (- (+ (+ (+ ?x37197 ?x36356) ?x47871) ?x36258) ?x36236) ?x25768) ?x58159) ?x58161)))
 (= (+ (+ (+ (+ ?x58523 ?x58172) ?x58175) ?x58178) ?x58181) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56864 (* 2.0 l_0_16_178)))
 (let ((?x56865 (* ?x56864 l_0_16_187)))
 (let ((?x56861 (* 2.0 l_0_16_177)))
 (let ((?x56862 (* ?x56861 l_0_16_186)))
 (let ((?x56858 (* 2.0 l_0_16_176)))
 (let ((?x56859 (* ?x56858 l_0_16_185)))
 (let ((?x56855 (* 2.0 l_0_16_175)))
 (let ((?x56856 (* ?x56855 l_0_16_184)))
 (let ((?x56852 (* 2.0 l_0_16_157)))
 (let ((?x56853 (* ?x56852 l_0_16_166)))
 (let ((?x56849 (* 2.0 l_0_16_156)))
 (let ((?x56850 (* ?x56849 l_0_16_165)))
 (let ((?x56846 (* 2.0 l_0_16_155)))
 (let ((?x56847 (* ?x56846 l_0_16_164)))
 (let ((?x56843 (* 2.0 l_0_16_154)))
 (let ((?x56844 (* ?x56843 l_0_16_163)))
 (let ((?x56832 (* 2.0 l_0_16_115)))
 (let ((?x56833 (* ?x56832 l_0_16_124)))
 (let ((?x56829 (* 2.0 l_0_16_114)))
 (let ((?x56830 (* ?x56829 l_0_16_123)))
 (let ((?x56826 (* 2.0 l_0_16_113)))
 (let ((?x56827 (* ?x56826 l_0_16_122)))
 (let ((?x56823 (* 2.0 l_0_16_112)))
 (let ((?x56824 (* ?x56823 l_0_16_121)))
 (let ((?x56820 (* 2.0 l_0_16_103)))
 (let ((?x56821 (* ?x56820 l_0_16_94)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56818 (* ?x56477 l_0_16_93)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56811 (* ?x55520 l_0_16_92)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x56809 (* ?x55517 l_0_16_91)))
 (let ((?x37205 (- (- (- (- (+ (+ (+ ?x56809 ?x56811) ?x56818) ?x56821) ?x56824) ?x56827) ?x56830) ?x56833)))
 (let ((?x58535 (- (- (- (+ (+ (+ (+ ?x37205 ?x56844) ?x56847) ?x56850) ?x56853) ?x56856) ?x56859) ?x56862)))
 (= (- ?x58535 ?x56865) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58273 (* l_0_16_99 l_0_16_99)))
 (let ((?x58271 (* l_0_16_98 l_0_16_98)))
 (let ((?x58269 (* l_0_16_97 l_0_16_97)))
 (let ((?x58267 (* l_0_16_96 l_0_16_96)))
 (let ((?x58265 (* l_0_16_95 l_0_16_95)))
 (let ((?x58255 (* l_0_16_183 l_0_16_183)))
 (let ((?x58253 (* l_0_16_182 l_0_16_182)))
 (let ((?x58251 (* l_0_16_181 l_0_16_181)))
 (let ((?x58249 (* l_0_16_180 l_0_16_180)))
 (let ((?x58247 (* l_0_16_179 l_0_16_179)))
 (let ((?x58245 (* l_0_16_162 l_0_16_162)))
 (let ((?x58243 (* l_0_16_161 l_0_16_161)))
 (let ((?x58241 (* l_0_16_160 l_0_16_160)))
 (let ((?x58239 (* l_0_16_159 l_0_16_159)))
 (let ((?x58237 (* l_0_16_158 l_0_16_158)))
 (let ((?x58235 (* l_0_16_120 l_0_16_120)))
 (let ((?x58233 (* l_0_16_119 l_0_16_119)))
 (let ((?x58231 (* l_0_16_118 l_0_16_118)))
 (let ((?x48476 (- (- (* (- l_0_16_116) l_0_16_116) (* l_0_16_117 l_0_16_117)) ?x58231)))
 (let ((?x58543 (+ (+ (+ (+ (+ (- (- ?x48476 ?x58233) ?x58235) ?x58237) ?x58239) ?x58241) ?x58243) ?x58245)))
 (let ((?x58550 (+ (+ (- (- (- (- (- ?x58543 ?x58247) ?x58249) ?x58251) ?x58253) ?x58255) ?x58265) ?x58267)))
 (= (+ (+ (+ ?x58550 ?x58269) ?x58271) ?x58273) 0.0)))))))))))))))))))))))
(assert
 (let ((?x57039 (* (* 2.0 l_0_16_183) l_0_16_188)))
 (let ((?x57036 (* (* 2.0 l_0_16_182) l_0_16_187)))
 (let ((?x57033 (* (* 2.0 l_0_16_181) l_0_16_186)))
 (let ((?x57030 (* (* 2.0 l_0_16_180) l_0_16_185)))
 (let ((?x57027 (* (* 2.0 l_0_16_179) l_0_16_184)))
 (let ((?x57024 (* (* 2.0 l_0_16_162) l_0_16_167)))
 (let ((?x57021 (* (* 2.0 l_0_16_161) l_0_16_166)))
 (let ((?x57018 (* (* 2.0 l_0_16_160) l_0_16_165)))
 (let ((?x57015 (* (* 2.0 l_0_16_159) l_0_16_164)))
 (let ((?x57012 (* (* 2.0 l_0_16_158) l_0_16_163)))
 (let ((?x56999 (* (* 2.0 l_0_16_120) l_0_16_125)))
 (let ((?x56994 (* (* 2.0 l_0_16_119) l_0_16_124)))
 (let ((?x56991 (* (* 2.0 l_0_16_118) l_0_16_123)))
 (let ((?x56988 (* (* 2.0 l_0_16_117) l_0_16_122)))
 (let ((?x56985 (* (* 2.0 l_0_16_116) l_0_16_121)))
 (let ((?x56980 (* (* 2.0 l_0_16_104) l_0_16_99)))
 (let ((?x56820 (* 2.0 l_0_16_103)))
 (let ((?x56977 (* ?x56820 l_0_16_98)))
 (let ((?x56477 (* 2.0 l_0_16_102)))
 (let ((?x56975 (* ?x56477 l_0_16_97)))
 (let ((?x55520 (* 2.0 l_0_16_101)))
 (let ((?x56973 (* ?x55520 l_0_16_96)))
 (let ((?x55517 (* 2.0 l_0_16_100)))
 (let ((?x45143 (* ?x55517 l_0_16_95)))
 (let ((?x48561 (- (- (- (+ (+ (+ (+ ?x45143 ?x56973) ?x56975) ?x56977) ?x56980) ?x56985) ?x56988) ?x56991)))
 (let ((?x11353 (+ (+ (+ (+ (+ (- (- ?x48561 ?x56994) ?x56999) ?x57012) ?x57015) ?x57018) ?x57021) ?x57024)))
 (= (- (- (- (- (- ?x11353 ?x57027) ?x57030) ?x57033) ?x57036) ?x57039) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x57185 (* l_0_16_189 l_0_16_189)))
 (let ((?x57183 (* l_0_16_188 l_0_16_188)))
 (let ((?x57181 (* l_0_16_187 l_0_16_187)))
 (let ((?x57179 (* l_0_16_186 l_0_16_186)))
 (let ((?x57177 (* l_0_16_185 l_0_16_185)))
 (let ((?x57175 (* l_0_16_184 l_0_16_184)))
 (let ((?x57171 (* l_0_16_168 l_0_16_168)))
 (let ((?x57169 (* l_0_16_167 l_0_16_167)))
 (let ((?x57167 (* l_0_16_166 l_0_16_166)))
 (let ((?x57165 (* l_0_16_165 l_0_16_165)))
 (let ((?x57163 (* l_0_16_164 l_0_16_164)))
 (let ((?x57161 (* l_0_16_163 l_0_16_163)))
 (let ((?x57154 (* l_0_16_126 l_0_16_126)))
 (let ((?x57152 (* l_0_16_125 l_0_16_125)))
 (let ((?x57150 (* l_0_16_124 l_0_16_124)))
 (let ((?x57148 (* l_0_16_123 l_0_16_123)))
 (let ((?x57146 (* l_0_16_122 l_0_16_122)))
 (let ((?x57144 (* l_0_16_121 l_0_16_121)))
 (let ((?x57142 (* l_0_16_105 l_0_16_105)))
 (let ((?x57140 (* l_0_16_104 l_0_16_104)))
 (let ((?x57138 (* l_0_16_103 l_0_16_103)))
 (let ((?x57136 (* l_0_16_102 l_0_16_102)))
 (let ((?x13336 (+ (+ (* l_0_16_100 l_0_16_100) (* l_0_16_101 l_0_16_101)) ?x57136)))
 (let ((?x36252 (- (- (- (- (+ (+ (+ ?x13336 ?x57138) ?x57140) ?x57142) ?x57144) ?x57146) ?x57148) ?x57150)))
 (let ((?x37497 (+ (+ (+ (+ (+ (- (- ?x36252 ?x57152) ?x57154) ?x57161) ?x57163) ?x57165) ?x57167) ?x57169)))
 (let ((?x58563 (- (- (- (- (- (- (+ ?x37497 ?x57171) ?x57175) ?x57177) ?x57179) ?x57181) ?x57183) ?x57185)))
 (= ?x58563 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x56390 (* l_0_16_132 l_0_16_132)))
 (let ((?x13459 (- (- (* (- l_0_16_130) l_0_16_130) (* l_0_16_131 l_0_16_131)) ?x56390)))
 (= ?x13459 0.0))))
(assert
 (>= l_0_16_1 0.0))
(assert
 (>= l_0_16_3 0.0))
(assert
 (>= l_0_16_6 0.0))
(assert
 (>= l_0_16_10 0.0))
(assert
 (>= l_0_16_15 0.0))
(assert
 (>= l_0_16_21 0.0))
(assert
 (>= l_0_16_22 0.0))
(assert
 (>= l_0_16_24 0.0))
(assert
 (>= l_0_16_27 0.0))
(assert
 (>= l_0_16_31 0.0))
(assert
 (>= l_0_16_36 0.0))
(assert
 (>= l_0_16_42 0.0))
(assert
 (>= l_0_16_43 0.0))
(assert
 (>= l_0_16_45 0.0))
(assert
 (>= l_0_16_48 0.0))
(assert
 (>= l_0_16_52 0.0))
(assert
 (>= l_0_16_57 0.0))
(assert
 (>= l_0_16_63 0.0))
(assert
 (>= l_0_16_64 0.0))
(assert
 (>= l_0_16_66 0.0))
(assert
 (>= l_0_16_69 0.0))
(assert
 (>= l_0_16_73 0.0))
(assert
 (>= l_0_16_78 0.0))
(assert
 (>= l_0_16_84 0.0))
(assert
 (>= l_0_16_85 0.0))
(assert
 (>= l_0_16_87 0.0))
(assert
 (>= l_0_16_90 0.0))
(assert
 (>= l_0_16_94 0.0))
(assert
 (>= l_0_16_99 0.0))
(assert
 (>= l_0_16_105 0.0))
(assert
 (>= l_0_16_106 0.0))
(assert
 (>= l_0_16_108 0.0))
(assert
 (>= l_0_16_111 0.0))
(assert
 (>= l_0_16_115 0.0))
(assert
 (>= l_0_16_120 0.0))
(assert
 (>= l_0_16_126 0.0))
(assert
 (>= l_0_16_127 0.0))
(assert
 (>= l_0_16_129 0.0))
(assert
 (>= l_0_16_132 0.0))
(assert
 (>= l_0_16_136 0.0))
(assert
 (>= l_0_16_141 0.0))
(assert
 (>= l_0_16_147 0.0))
(assert
 (>= l_0_16_148 0.0))
(assert
 (>= l_0_16_150 0.0))
(assert
 (>= l_0_16_153 0.0))
(assert
 (>= l_0_16_157 0.0))
(assert
 (>= l_0_16_162 0.0))
(assert
 (>= l_0_16_168 0.0))
(assert
 (>= l_0_16_169 0.0))
(assert
 (>= l_0_16_171 0.0))
(assert
 (>= l_0_16_174 0.0))
(assert
 (>= l_0_16_178 0.0))
(assert
 (>= l_0_16_183 0.0))
(assert
 (>= l_0_16_189 0.0))
(assert
 (>= l_0_16_190 0.0))
(assert
 (>= l_0_16_192 0.0))
(assert
 (>= l_0_16_195 0.0))
(assert
 (>= l_0_16_199 0.0))
(assert
 (>= l_0_16_204 0.0))
(assert
 (>= l_0_16_210 0.0))
(assert
 (>= l_0_16_211 0.0))
(assert
 (>= l_0_16_213 0.0))
(assert
 (>= l_0_16_216 0.0))
(assert
 (>= l_0_16_220 0.0))
(assert
 (>= l_0_16_225 0.0))
(assert
 (>= l_0_16_231 0.0))
(assert
 (>= l_0_16_232 0.0))
(assert
 (>= l_0_16_234 0.0))
(assert
 (>= l_0_16_237 0.0))
(assert
 (>= l_0_16_241 0.0))
(assert
 (>= l_0_16_246 0.0))
(assert
 (>= l_0_16_252 0.0))
(assert
 (>= l_0_16_253 0.0))
(assert
 (>= l_0_16_255 0.0))
(assert
 (>= l_0_16_258 0.0))
(assert
 (>= l_0_16_262 0.0))
(assert
 (>= l_0_16_267 0.0))
(assert
 (>= l_0_16_273 0.0))
(assert
 (let ((?x58627 (* l_0_17_274 l_0_17_274)))
 (let ((?x58625 (* l_0_17_253 l_0_17_253)))
 (let ((?x58623 (* l_0_17_232 l_0_17_232)))
 (let ((?x58621 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x58618 (* l_0_17_211 l_0_17_211)))
 (let ((?x58616 (* l_0_17_190 l_0_17_190)))
 (let ((?x58613 (* l_0_17_1 l_0_17_1)))
 (let ((?x58614 (* 6.0 ?x58613)))
 (let ((?x58615 (+ _a_0_ ?x58614)))
 (let ((?x58631 (- (- (- (- (- (- (- ?x58615 ?x58616) ?x58618) ?x58621) ?x58623) ?x58625) ?x58627) (* (* 1.0 l_0_17_43) l_0_17_43))))
 (= (- (+ ?x58631 (* 1.0 (* l_0_17_64 l_0_17_64))) 1.0) 0.0))))))))))))
(assert
 (let ((?x58688 (* l_0_17_85 l_0_17_85)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x58686 (* ?x58685 l_0_17_70)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x58683 (* ?x58682 l_0_17_49)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x58671 (* ?x58670 l_0_17_28)))
 (let ((?x58662 (* l_0_17_169 l_0_17_169)))
 (let ((?x58660 (* l_0_17_148 l_0_17_148)))
 (let ((?x58658 (* l_0_17_106 l_0_17_106)))
 (let ((?x58663 (+ (- (+ (+ _a_1_ (* (* 12.0 l_0_17_1) l_0_17_7)) ?x58658) ?x58660) ?x58662)))
 (let ((?x58669 (- (- ?x58663 (* (* 2.0 l_0_17_190) l_0_17_196)) (* (* 2.0 l_0_17_211) l_0_17_217))))
 (let ((?x58678 (- (- (- ?x58669 ?x58671) (* (* 2.0 l_0_17_232) l_0_17_238)) (* (* 2.0 l_0_17_253) l_0_17_259))))
 (let ((?x58689 (- (+ (- (- ?x58678 (* (* 2.0 l_0_17_274) l_0_17_280)) ?x58683) ?x58686) ?x58688)))
 (= ?x58689 0.0))))))))))))))))
(assert
 (let ((?x58823 (* l_0_17_9 l_0_17_9)))
 (let ((?x58824 (* 6.0 ?x58823)))
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x58821 (* ?x58820 l_0_17_91)))
 (let ((?x58817 (* l_0_17_8 l_0_17_8)))
 (let ((?x58818 (* 6.0 ?x58817)))
 (let ((?x58802 (* l_0_17_7 l_0_17_7)))
 (let ((?x58803 (* 6.0 ?x58802)))
 (let ((?x58788 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x58785 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x58782 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x58779 (* l_0_17_283 l_0_17_283)))
 (let ((?x58777 (* l_0_17_282 l_0_17_282)))
 (let ((?x58775 (* l_0_17_281 l_0_17_281)))
 (let ((?x58773 (* l_0_17_280 l_0_17_280)))
 (let ((?x58771 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x58768 (* l_0_17_262 l_0_17_262)))
 (let ((?x58766 (* l_0_17_261 l_0_17_261)))
 (let ((?x58764 (* l_0_17_260 l_0_17_260)))
 (let ((?x58762 (* l_0_17_259 l_0_17_259)))
 (let ((?x58760 (* l_0_17_241 l_0_17_241)))
 (let ((?x58758 (* l_0_17_240 l_0_17_240)))
 (let ((?x58756 (* l_0_17_239 l_0_17_239)))
 (let ((?x58754 (* l_0_17_238 l_0_17_238)))
 (let ((?x58752 (* l_0_17_220 l_0_17_220)))
 (let ((?x58750 (* l_0_17_219 l_0_17_219)))
 (let ((?x58748 (* l_0_17_218 l_0_17_218)))
 (let ((?x58746 (* l_0_17_217 l_0_17_217)))
 (let ((?x58744 (* l_0_17_199 l_0_17_199)))
 (let ((?x58742 (* l_0_17_198 l_0_17_198)))
 (let ((?x58740 (* l_0_17_197 l_0_17_197)))
 (let ((?x58738 (* l_0_17_196 l_0_17_196)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x58736 (* ?x58735 l_0_17_175)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x58733 (* ?x58732 l_0_17_154)))
 (let ((?x58731 (+ (+ _a_2_ (* 6.0 (* l_0_17_10 l_0_17_10))) (* (* 2.0 l_0_17_106) l_0_17_112))))
 (let ((?x58747 (- (- (- (- (- (+ (- ?x58731 ?x58733) ?x58736) ?x58738) ?x58740) ?x58742) ?x58744) ?x58746)))
 (let ((?x58761 (- (- (- (- (- (- (- ?x58747 ?x58748) ?x58750) ?x58752) ?x58754) ?x58756) ?x58758) ?x58760)))
 (let ((?x58776 (- (- (- (- (- (- (- ?x58761 ?x58762) ?x58764) ?x58766) ?x58768) ?x58771) ?x58773) ?x58775)))
 (let ((?x58792 (- (- (- (- (- (- ?x58776 ?x58777) ?x58779) ?x58782) ?x58785) ?x58788) (* (* 1.0 l_0_17_49) l_0_17_49))))
 (let ((?x58798 (- (- ?x58792 (* (* 1.0 l_0_17_50) l_0_17_50)) (* (* 1.0 l_0_17_51) l_0_17_51))))
 (let ((?x58807 (+ (+ (- ?x58798 (* (* 1.0 l_0_17_52) l_0_17_52)) ?x58803) (* 1.0 (* l_0_17_70 l_0_17_70)))))
 (let ((?x58813 (+ (+ ?x58807 (* 1.0 (* l_0_17_71 l_0_17_71))) (* 1.0 (* l_0_17_72 l_0_17_72)))))
 (let ((?x58825 (+ (- (+ (+ ?x58813 (* 1.0 (* l_0_17_73 l_0_17_73))) ?x58818) ?x58821) ?x58824)))
 (= ?x58825 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58632 (* l_0_17_64 l_0_17_64)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x58922 (* ?x58685 l_0_17_74)))
 (let ((?x58648 (* l_0_17_43 l_0_17_43)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x58919 (* ?x58682 l_0_17_53)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x58911 (* ?x58670 l_0_17_32)))
 (let ((?x58908 (- (+ _a_3_ (* (* 12.0 l_0_17_1) l_0_17_11)) (* (* 2.0 l_0_17_190) l_0_17_200))))
 (let ((?x58914 (- (- (- ?x58908 (* (* 2.0 l_0_17_211) l_0_17_221)) ?x58911) (* (* 2.0 l_0_17_232) l_0_17_242))))
 (let ((?x58918 (- (- ?x58914 (* (* 2.0 l_0_17_253) l_0_17_263)) (* (* 2.0 l_0_17_274) l_0_17_284))))
 (= (- (+ (+ (- ?x58918 ?x58919) ?x58648) ?x58922) ?x58632) 0.0)))))))))))))
(assert
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x58922 (* ?x58685 l_0_17_74)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x58919 (* ?x58682 l_0_17_53)))
 (let ((?x59030 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x59027 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x59024 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x59021 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x59018 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x59015 (* l_0_17_288 l_0_17_288)))
 (let ((?x59013 (* l_0_17_287 l_0_17_287)))
 (let ((?x59011 (* l_0_17_286 l_0_17_286)))
 (let ((?x59009 (* l_0_17_285 l_0_17_285)))
 (let ((?x59007 (* l_0_17_284 l_0_17_284)))
 (let ((?x59005 (* l_0_17_267 l_0_17_267)))
 (let ((?x59003 (* l_0_17_266 l_0_17_266)))
 (let ((?x59001 (* l_0_17_265 l_0_17_265)))
 (let ((?x58999 (* l_0_17_264 l_0_17_264)))
 (let ((?x58997 (* l_0_17_263 l_0_17_263)))
 (let ((?x58995 (* l_0_17_246 l_0_17_246)))
 (let ((?x58993 (* l_0_17_245 l_0_17_245)))
 (let ((?x58991 (* l_0_17_244 l_0_17_244)))
 (let ((?x58989 (* l_0_17_243 l_0_17_243)))
 (let ((?x58987 (* l_0_17_242 l_0_17_242)))
 (let ((?x58985 (* l_0_17_225 l_0_17_225)))
 (let ((?x58983 (* l_0_17_224 l_0_17_224)))
 (let ((?x58981 (* l_0_17_223 l_0_17_223)))
 (let ((?x58979 (* l_0_17_222 l_0_17_222)))
 (let ((?x58977 (* l_0_17_221 l_0_17_221)))
 (let ((?x58975 (* l_0_17_204 l_0_17_204)))
 (let ((?x58973 (* l_0_17_203 l_0_17_203)))
 (let ((?x58971 (* l_0_17_202 l_0_17_202)))
 (let ((?x58969 (* l_0_17_201 l_0_17_201)))
 (let ((?x58967 (* l_0_17_200 l_0_17_200)))
 (let ((?x58964 (* l_0_17_15 l_0_17_15)))
 (let ((?x58965 (* 6.0 ?x58964)))
 (let ((?x58961 (* l_0_17_14 l_0_17_14)))
 (let ((?x58962 (* 6.0 ?x58961)))
 (let ((?x58958 (* l_0_17_13 l_0_17_13)))
 (let ((?x58959 (* 6.0 ?x58958)))
 (let ((?x58955 (* l_0_17_12 l_0_17_12)))
 (let ((?x58956 (* 6.0 ?x58955)))
 (let ((?x58963 (+ (+ (+ (+ _a_4_ (* 6.0 (* l_0_17_11 l_0_17_11))) ?x58956) ?x58959) ?x58962)))
 (let ((?x58978 (- (- (- (- (- (- (+ ?x58963 ?x58965) ?x58967) ?x58969) ?x58971) ?x58973) ?x58975) ?x58977)))
 (let ((?x58992 (- (- (- (- (- (- (- ?x58978 ?x58979) ?x58981) ?x58983) ?x58985) ?x58987) ?x58989) ?x58991)))
 (let ((?x59006 (- (- (- (- (- (- (- ?x58992 ?x58993) ?x58995) ?x58997) ?x58999) ?x59001) ?x59003) ?x59005)))
 (let ((?x59022 (- (- (- (- (- (- (- ?x59006 ?x59007) ?x59009) ?x59011) ?x59013) ?x59015) ?x59018) ?x59021)))
 (let ((?x59035 (- (+ (- (- (- ?x59022 ?x59024) ?x59027) ?x59030) ?x58919) (* (* 1.0 l_0_17_53) l_0_17_53))))
 (let ((?x59041 (- (- ?x59035 (* (* 1.0 l_0_17_54) l_0_17_54)) (* (* 1.0 l_0_17_55) l_0_17_55))))
 (let ((?x59047 (- (- ?x59041 (* (* 1.0 l_0_17_56) l_0_17_56)) (* (* 1.0 l_0_17_57) l_0_17_57))))
 (let ((?x59054 (+ (+ (- ?x59047 ?x58922) (* 1.0 (* l_0_17_74 l_0_17_74))) (* 1.0 (* l_0_17_75 l_0_17_75)))))
 (let ((?x59060 (+ (+ ?x59054 (* 1.0 (* l_0_17_76 l_0_17_76))) (* 1.0 (* l_0_17_77 l_0_17_77)))))
 (= (+ ?x59060 (* 1.0 (* l_0_17_78 l_0_17_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x59256 (* ?x58820 l_0_17_95)))
 (let ((?x59253 (* 2.0 l_0_17_73)))
 (let ((?x59254 (* ?x59253 l_0_17_77)))
 (let ((?x59250 (* 2.0 l_0_17_72)))
 (let ((?x59251 (* ?x59250 l_0_17_76)))
 (let ((?x59247 (* 2.0 l_0_17_71)))
 (let ((?x59248 (* ?x59247 l_0_17_75)))
 (let ((?x59244 (* 2.0 l_0_17_70)))
 (let ((?x59245 (* ?x59244 l_0_17_74)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x58686 (* ?x58685 l_0_17_70)))
 (let ((?x59240 (* 2.0 l_0_17_52)))
 (let ((?x59241 (* ?x59240 l_0_17_56)))
 (let ((?x59237 (* 2.0 l_0_17_51)))
 (let ((?x59238 (* ?x59237 l_0_17_55)))
 (let ((?x59234 (* 2.0 l_0_17_50)))
 (let ((?x59235 (* ?x59234 l_0_17_54)))
 (let ((?x59231 (* 2.0 l_0_17_49)))
 (let ((?x59232 (* ?x59231 l_0_17_53)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x58683 (* ?x58682 l_0_17_49)))
 (let ((?x59227 (* 12.0 l_0_17_31)))
 (let ((?x59228 (* ?x59227 l_0_17_35)))
 (let ((?x59224 (* 12.0 l_0_17_30)))
 (let ((?x59225 (* ?x59224 l_0_17_34)))
 (let ((?x59221 (* 12.0 l_0_17_29)))
 (let ((?x59222 (* ?x59221 l_0_17_33)))
 (let ((?x59206 (* 12.0 l_0_17_28)))
 (let ((?x59207 (* ?x59206 l_0_17_32)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x59156 (* ?x58735 l_0_17_179)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x59154 (* ?x58732 l_0_17_158)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x59152 (* ?x59151 l_0_17_9)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x59149 (* ?x59148 l_0_17_8)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x59146 (* ?x59145 l_0_17_7)))
 (let ((?x59144 (+ (+ _a_5_ (* (* 12.0 l_0_17_10) l_0_17_14)) (* (* 2.0 l_0_17_106) l_0_17_116))))
 (let ((?x59160 (- (+ (- (+ (+ (+ ?x59144 ?x59146) ?x59149) ?x59152) ?x59154) ?x59156) (* (* 2.0 l_0_17_196) l_0_17_200))))
 (let ((?x59166 (- (- ?x59160 (* (* 2.0 l_0_17_197) l_0_17_201)) (* (* 2.0 l_0_17_198) l_0_17_202))))
 (let ((?x59172 (- (- ?x59166 (* (* 2.0 l_0_17_199) l_0_17_203)) (* (* 2.0 l_0_17_217) l_0_17_221))))
 (let ((?x59178 (- (- ?x59172 (* (* 2.0 l_0_17_218) l_0_17_222)) (* (* 2.0 l_0_17_219) l_0_17_223))))
 (let ((?x59184 (- (- ?x59178 (* (* 2.0 l_0_17_220) l_0_17_224)) (* (* 2.0 l_0_17_238) l_0_17_242))))
 (let ((?x59190 (- (- ?x59184 (* (* 2.0 l_0_17_239) l_0_17_243)) (* (* 2.0 l_0_17_240) l_0_17_244))))
 (let ((?x59196 (- (- ?x59190 (* (* 2.0 l_0_17_241) l_0_17_245)) (* (* 2.0 l_0_17_259) l_0_17_263))))
 (let ((?x59202 (- (- ?x59196 (* (* 2.0 l_0_17_260) l_0_17_264)) (* (* 2.0 l_0_17_261) l_0_17_265))))
 (let ((?x59211 (- (- (- ?x59202 (* (* 2.0 l_0_17_262) l_0_17_266)) ?x59207) (* (* 2.0 l_0_17_280) l_0_17_284))))
 (let ((?x59217 (- (- ?x59211 (* (* 2.0 l_0_17_281) l_0_17_285)) (* (* 2.0 l_0_17_282) l_0_17_286))))
 (let ((?x59229 (- (- (- (- ?x59217 (* (* 2.0 l_0_17_283) l_0_17_287)) ?x59222) ?x59225) ?x59228)))
 (let ((?x59246 (+ (- (- (- (- (- (+ ?x59229 ?x58683) ?x59232) ?x59235) ?x59238) ?x59241) ?x58686) ?x59245)))
 (= (- (+ (+ (+ ?x59246 ?x59248) ?x59251) ?x59254) ?x59256) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58688 (* l_0_17_85 l_0_17_85)))
 (let ((?x59443 (* l_0_17_84 l_0_17_84)))
 (let ((?x59444 (* 3.0 ?x59443)))
 (let ((?x59440 (* l_0_17_83 l_0_17_83)))
 (let ((?x59441 (* 3.0 ?x59440)))
 (let ((?x59437 (* l_0_17_82 l_0_17_82)))
 (let ((?x59438 (* 3.0 ?x59437)))
 (let ((?x59434 (* l_0_17_81 l_0_17_81)))
 (let ((?x59435 (* 3.0 ?x59434)))
 (let ((?x59431 (* l_0_17_80 l_0_17_80)))
 (let ((?x59432 (* 3.0 ?x59431)))
 (let ((?x59428 (* l_0_17_79 l_0_17_79)))
 (let ((?x59429 (* 3.0 ?x59428)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x59426 (* ?x59425 l_0_17_79)))
 (let ((?x59423 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x59420 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x59417 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x59414 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x59411 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x59408 (* (* 3.0 l_0_17_58) l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x59405 (* ?x59404 l_0_17_58)))
 (let ((?x59402 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x59399 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x59396 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x59393 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x59390 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x59387 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x59383 (* l_0_17_21 l_0_17_21)))
 (let ((?x59384 (* 6.0 ?x59383)))
 (let ((?x59380 (* l_0_17_20 l_0_17_20)))
 (let ((?x59381 (* 6.0 ?x59380)))
 (let ((?x59377 (* l_0_17_19 l_0_17_19)))
 (let ((?x59378 (* 6.0 ?x59377)))
 (let ((?x59374 (* l_0_17_18 l_0_17_18)))
 (let ((?x59375 (* 6.0 ?x59374)))
 (let ((?x59371 (* l_0_17_17 l_0_17_17)))
 (let ((?x59372 (* 6.0 ?x59371)))
 (let ((?x58662 (* l_0_17_169 l_0_17_169)))
 (let ((?x59367 (* l_0_17_16 l_0_17_16)))
 (let ((?x59368 (* 6.0 ?x59367)))
 (let ((?x58660 (* l_0_17_148 l_0_17_148)))
 (let ((?x48909 (* l_0_17_147 l_0_17_147)))
 (let ((?x38199 (* l_0_17_146 l_0_17_146)))
 (let ((?x13956 (* l_0_17_145 l_0_17_145)))
 (let ((?x48908 (* l_0_17_144 l_0_17_144)))
 (let ((?x48885 (* l_0_17_143 l_0_17_143)))
 (let ((?x48888 (+ (+ (* (- l_0_17_106) l_0_17_106) (* l_0_17_142 l_0_17_142)) ?x48885)))
 (let ((?x59370 (- (+ (+ (+ (+ (+ (+ ?x48888 ?x48908) ?x13956) ?x38199) ?x48909) ?x58660) ?x59368) ?x58662)))
 (let ((?x59391 (- (- (+ (+ (+ (+ (+ ?x59370 ?x59372) ?x59375) ?x59378) ?x59381) ?x59384) ?x59387) ?x59390)))
 (let ((?x59412 (- (- (- (- (- (- (- ?x59391 ?x59393) ?x59396) ?x59399) ?x59402) ?x59405) ?x59408) ?x59411)))
 (let ((?x59433 (+ (+ (+ (- (- (- (- ?x59412 ?x59414) ?x59417) ?x59420) ?x59423) ?x59426) ?x59429) ?x59432)))
 (= (- (+ (+ (+ (+ (+ ?x59433 ?x59435) ?x59438) ?x59441) ?x59444) ?x58688) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58632 (* l_0_17_64 l_0_17_64)))
 (let ((?x59619 (* 3.0 ?x58632)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x59426 (* ?x59425 l_0_17_79)))
 (let ((?x59598 (* (* 3.0 l_0_17_43) l_0_17_43)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x59405 (* ?x59404 l_0_17_58)))
 (let ((?x59402 (* (* 6.0 l_0_17_42) l_0_17_42)))
 (let ((?x59399 (* (* 6.0 l_0_17_41) l_0_17_41)))
 (let ((?x59396 (* (* 6.0 l_0_17_40) l_0_17_40)))
 (let ((?x59393 (* (* 6.0 l_0_17_39) l_0_17_39)))
 (let ((?x59390 (* (* 6.0 l_0_17_38) l_0_17_38)))
 (let ((?x59387 (* (* 6.0 l_0_17_37) l_0_17_37)))
 (let ((?x59588 (* l_0_17_294 l_0_17_294)))
 (let ((?x59586 (* l_0_17_293 l_0_17_293)))
 (let ((?x59584 (* l_0_17_292 l_0_17_292)))
 (let ((?x59582 (* l_0_17_291 l_0_17_291)))
 (let ((?x59580 (* l_0_17_290 l_0_17_290)))
 (let ((?x59578 (* l_0_17_289 l_0_17_289)))
 (let ((?x59576 (* l_0_17_273 l_0_17_273)))
 (let ((?x59574 (* l_0_17_272 l_0_17_272)))
 (let ((?x59572 (* l_0_17_271 l_0_17_271)))
 (let ((?x59570 (* l_0_17_270 l_0_17_270)))
 (let ((?x59568 (* l_0_17_269 l_0_17_269)))
 (let ((?x59566 (* l_0_17_268 l_0_17_268)))
 (let ((?x59564 (* l_0_17_252 l_0_17_252)))
 (let ((?x59562 (* l_0_17_251 l_0_17_251)))
 (let ((?x59560 (* l_0_17_250 l_0_17_250)))
 (let ((?x59558 (* l_0_17_249 l_0_17_249)))
 (let ((?x59556 (* l_0_17_248 l_0_17_248)))
 (let ((?x59554 (* l_0_17_247 l_0_17_247)))
 (let ((?x59552 (* l_0_17_231 l_0_17_231)))
 (let ((?x59550 (* l_0_17_230 l_0_17_230)))
 (let ((?x59548 (* l_0_17_229 l_0_17_229)))
 (let ((?x59546 (* l_0_17_228 l_0_17_228)))
 (let ((?x59544 (* l_0_17_227 l_0_17_227)))
 (let ((?x59542 (* l_0_17_226 l_0_17_226)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x59540 (* ?x58670 l_0_17_37)))
 (let ((?x59538 (* l_0_17_210 l_0_17_210)))
 (let ((?x59383 (* l_0_17_21 l_0_17_21)))
 (let ((?x59384 (* 6.0 ?x59383)))
 (let ((?x59535 (* l_0_17_209 l_0_17_209)))
 (let ((?x59533 (* l_0_17_208 l_0_17_208)))
 (let ((?x59531 (* l_0_17_207 l_0_17_207)))
 (let ((?x59529 (* l_0_17_206 l_0_17_206)))
 (let ((?x59527 (* l_0_17_205 l_0_17_205)))
 (let ((?x59380 (* l_0_17_20 l_0_17_20)))
 (let ((?x59381 (* 6.0 ?x59380)))
 (let ((?x59377 (* l_0_17_19 l_0_17_19)))
 (let ((?x59378 (* 6.0 ?x59377)))
 (let ((?x59374 (* l_0_17_18 l_0_17_18)))
 (let ((?x59375 (* 6.0 ?x59374)))
 (let ((?x59371 (* l_0_17_17 l_0_17_17)))
 (let ((?x59372 (* 6.0 ?x59371)))
 (let ((?x59367 (* l_0_17_16 l_0_17_16)))
 (let ((?x59368 (* 6.0 ?x59367)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x59520 (* ?x59519 l_0_17_142)))
 (let ((?x13411 (* 12.0 l_0_17_1)))
 (let ((?x59518 (* ?x13411 l_0_17_16)))
 (let ((?x59528 (- (+ (+ (+ (+ (+ (+ ?x59518 ?x59520) ?x59368) ?x59372) ?x59375) ?x59378) ?x59381) ?x59527)))
 (let ((?x59541 (- (- (+ (- (- (- (- ?x59528 ?x59529) ?x59531) ?x59533) ?x59535) ?x59384) ?x59538) ?x59540)))
 (let ((?x59555 (- (- (- (- (- (- (- ?x59541 ?x59542) ?x59544) ?x59546) ?x59548) ?x59550) ?x59552) ?x59554)))
 (let ((?x59569 (- (- (- (- (- (- (- ?x59555 ?x59556) ?x59558) ?x59560) ?x59562) ?x59564) ?x59566) ?x59568)))
 (let ((?x59583 (- (- (- (- (- (- (- ?x59569 ?x59570) ?x59572) ?x59574) ?x59576) ?x59578) ?x59580) ?x59582)))
 (let ((?x59593 (- (- (- (- (- (- (- ?x59583 ?x59584) ?x59586) ?x59588) ?x59387) ?x59390) ?x59393) ?x59396)))
 (let ((?x59602 (- (- (- (- (- ?x59593 ?x59399) ?x59402) ?x59405) ?x59598) (* (* 1.0 l_0_17_58) l_0_17_58))))
 (let ((?x59608 (- (- ?x59602 (* (* 1.0 l_0_17_59) l_0_17_59)) (* (* 1.0 l_0_17_60) l_0_17_60))))
 (let ((?x59614 (- (- ?x59608 (* (* 1.0 l_0_17_61) l_0_17_61)) (* (* 1.0 l_0_17_62) l_0_17_62))))
 (let ((?x59622 (+ (+ (+ (- ?x59614 (* (* 1.0 l_0_17_63) l_0_17_63)) ?x59426) ?x59619) (* 1.0 (* l_0_17_79 l_0_17_79)))))
 (let ((?x59626 (+ (+ ?x59622 (* 1.0 (* l_0_17_80 l_0_17_80))) (* 1.0 (* l_0_17_81 l_0_17_81)))))
 (let ((?x59630 (+ (+ ?x59626 (* 1.0 (* l_0_17_82 l_0_17_82))) (* 1.0 (* l_0_17_83 l_0_17_83)))))
 (= (- (+ ?x59630 (* 1.0 (* l_0_17_84 l_0_17_84))) 3.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58632 (* l_0_17_64 l_0_17_64)))
 (let ((?x59619 (* 3.0 ?x58632)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x59701 (* ?x58685 l_0_17_79)))
 (let ((?x59598 (* (* 3.0 l_0_17_43) l_0_17_43)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x59698 (* ?x58682 l_0_17_58)))
 (let ((?x58621 (* (* 6.0 l_0_17_22) l_0_17_22)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x59540 (* ?x58670 l_0_17_37)))
 (let ((?x59684 (* l_0_17_127 l_0_17_127)))
 (let ((?x58613 (* l_0_17_1 l_0_17_1)))
 (let ((?x58614 (* 6.0 ?x58613)))
 (let ((?x13411 (* 12.0 l_0_17_1)))
 (let ((?x59518 (* ?x13411 l_0_17_16)))
 (let ((?x59689 (- (- (+ (+ ?x59518 ?x58614) ?x59684) (* (* 2.0 l_0_17_190) l_0_17_205)) (* (* 2.0 l_0_17_211) l_0_17_226))))
 (let ((?x59695 (- (- (- (- ?x59689 ?x59540) ?x58621) (* (* 2.0 l_0_17_232) l_0_17_247)) (* (* 2.0 l_0_17_253) l_0_17_268))))
 (let ((?x59702 (+ (- (- (- ?x59695 (* (* 2.0 l_0_17_274) l_0_17_289)) ?x59698) ?x59598) ?x59701)))
 (= (- (+ ?x59702 ?x59619) 3.0) 0.0))))))))))))))))))))
(assert
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x59752 (* ?x58685 l_0_17_65)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x59750 (* ?x58682 l_0_17_44)))
 (let ((?x26687 (* l_0_17_22 l_0_17_22)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x59741 (* ?x58670 l_0_17_23)))
 (let ((?x59738 (- (- (* (* 12.0 l_0_17_1) l_0_17_2) (* l_0_17_1 l_0_17_1)) (* (* 2.0 l_0_17_190) l_0_17_191))))
 (let ((?x59745 (- (+ (- (- ?x59738 (* (* 2.0 l_0_17_211) l_0_17_212)) ?x59741) ?x26687) (* (* 2.0 l_0_17_232) l_0_17_233))))
 (let ((?x59749 (- (- ?x59745 (* (* 2.0 l_0_17_253) l_0_17_254)) (* (* 2.0 l_0_17_274) l_0_17_275))))
 (= (+ (- ?x59749 ?x59750) ?x59752) 0.0))))))))))))
(assert
 (let ((?x59818 (* l_0_17_3 l_0_17_3)))
 (let ((?x59819 (* 6.0 ?x59818)))
 (let ((?x59816 (* l_0_17_276 l_0_17_276)))
 (let ((?x59814 (* l_0_17_275 l_0_17_275)))
 (let ((?x59812 (* l_0_17_255 l_0_17_255)))
 (let ((?x59810 (* l_0_17_254 l_0_17_254)))
 (let ((?x59808 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x59805 (* l_0_17_234 l_0_17_234)))
 (let ((?x59803 (* l_0_17_233 l_0_17_233)))
 (let ((?x59801 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x59795 (* l_0_17_213 l_0_17_213)))
 (let ((?x59793 (* l_0_17_212 l_0_17_212)))
 (let ((?x59790 (* l_0_17_2 l_0_17_2)))
 (let ((?x59791 (* 6.0 ?x59790)))
 (let ((?x59788 (* l_0_17_192 l_0_17_192)))
 (let ((?x59789 (- (- (* (* (- 2.0) l_0_17_1) l_0_17_2) (* l_0_17_191 l_0_17_191)) ?x59788)))
 (let ((?x59799 (+ (- (- (+ ?x59789 ?x59791) ?x59793) ?x59795) (* (* 2.0 l_0_17_22) l_0_17_23))))
 (let ((?x59815 (- (- (- (- (- (- (- ?x59799 ?x59801) ?x59803) ?x59805) ?x59808) ?x59810) ?x59812) ?x59814)))
 (let ((?x59826 (- (- (+ (- ?x59815 ?x59816) ?x59819) (* (* 1.0 l_0_17_44) l_0_17_44)) (* (* 1.0 l_0_17_45) l_0_17_45))))
 (let ((?x59832 (+ (+ ?x59826 (* 1.0 (* l_0_17_65 l_0_17_65))) (* 1.0 (* l_0_17_66 l_0_17_66)))))
 (= ?x59832 0.0))))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x59938 (* ?x59937 l_0_17_68)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x59935 (* ?x59934 l_0_17_67)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x59932 (* ?x59931 l_0_17_47)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x59929 (* ?x59928 l_0_17_46)))
 (let ((?x59925 (* 12.0 l_0_17_3)))
 (let ((?x59926 (* ?x59925 l_0_17_5)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x59911 (* ?x59910 l_0_17_26)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x59902 (* ?x59901 l_0_17_25)))
 (let ((?x59890 (* 12.0 l_0_17_2)))
 (let ((?x59891 (* ?x59890 l_0_17_4)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x59882 (* ?x59519 l_0_17_128)))
 (let ((?x59886 (- (- (* (* (- 2.0) l_0_17_1) l_0_17_4) ?x59882) (* (* 2.0 l_0_17_191) l_0_17_193))))
 (let ((?x59895 (- (+ (- ?x59886 (* (* 2.0 l_0_17_192) l_0_17_194)) ?x59891) (* (* 2.0 l_0_17_212) l_0_17_214))))
 (let ((?x59900 (+ (- ?x59895 (* (* 2.0 l_0_17_213) l_0_17_215)) (* (* 2.0 l_0_17_22) l_0_17_25))))
 (let ((?x59909 (- (- (- ?x59900 ?x59902) (* (* 2.0 l_0_17_233) l_0_17_235)) (* (* 2.0 l_0_17_234) l_0_17_236))))
 (let ((?x59918 (- (- (- ?x59909 ?x59911) (* (* 2.0 l_0_17_254) l_0_17_256)) (* (* 2.0 l_0_17_255) l_0_17_257))))
 (let ((?x59924 (- (- ?x59918 (* (* 2.0 l_0_17_275) l_0_17_277)) (* (* 2.0 l_0_17_276) l_0_17_278))))
 (= (+ (+ (- (- (+ ?x59924 ?x59926) ?x59929) ?x59932) ?x59935) ?x59938) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x60057 (* ?x58820 l_0_17_86)))
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60055 (* ?x59937 l_0_17_71)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60053 (* ?x59934 l_0_17_70)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60051 (* ?x59931 l_0_17_50)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60049 (* ?x59928 l_0_17_49)))
 (let ((?x59925 (* 12.0 l_0_17_3)))
 (let ((?x60047 (* ?x59925 l_0_17_8)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60037 (* ?x59910 l_0_17_29)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60031 (* ?x59901 l_0_17_28)))
 (let ((?x59890 (* 12.0 l_0_17_2)))
 (let ((?x60023 (* ?x59890 l_0_17_7)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x60017 (* ?x58735 l_0_17_170)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x60015 (* ?x58732 l_0_17_149)))
 (let ((?x60006 (+ (* (* (- 2.0) l_0_17_1) l_0_17_7) (* (* 2.0 l_0_17_106) l_0_17_107))))
 (let ((?x60022 (- (- (+ (- ?x60006 ?x60015) ?x60017) (* (* 2.0 l_0_17_191) l_0_17_196)) (* (* 2.0 l_0_17_192) l_0_17_197))))
 (let ((?x60028 (- (- (+ ?x60022 ?x60023) (* (* 2.0 l_0_17_212) l_0_17_217)) (* (* 2.0 l_0_17_213) l_0_17_218))))
 (let ((?x60034 (- (- (+ ?x60028 (* (* 2.0 l_0_17_22) l_0_17_28)) ?x60031) (* (* 2.0 l_0_17_233) l_0_17_238))))
 (let ((?x60040 (- (- (- ?x60034 (* (* 2.0 l_0_17_234) l_0_17_239)) ?x60037) (* (* 2.0 l_0_17_254) l_0_17_259))))
 (let ((?x60044 (- (- ?x60040 (* (* 2.0 l_0_17_255) l_0_17_260)) (* (* 2.0 l_0_17_275) l_0_17_280))))
 (let ((?x60052 (- (- (+ (- ?x60044 (* (* 2.0 l_0_17_276) l_0_17_281)) ?x60047) ?x60049) ?x60051)))
 (= (- (+ (+ ?x60052 ?x60053) ?x60055) ?x60057) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60179 (* ?x59937 l_0_17_75)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60177 (* ?x59934 l_0_17_74)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x59752 (* ?x58685 l_0_17_65)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60174 (* ?x59931 l_0_17_54)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60172 (* ?x59928 l_0_17_53)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x59750 (* ?x58682 l_0_17_44)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60161 (* ?x59910 l_0_17_33)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60155 (* ?x59901 l_0_17_32)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x60143 (* ?x59148 l_0_17_3)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x60141 (* ?x59145 l_0_17_2)))
 (let ((?x60146 (- (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_11) ?x60141) ?x60143) (* (* 2.0 l_0_17_191) l_0_17_200))))
 (let ((?x60150 (- (- ?x60146 (* (* 2.0 l_0_17_192) l_0_17_201)) (* (* 2.0 l_0_17_212) l_0_17_221))))
 (let ((?x60154 (+ (- ?x60150 (* (* 2.0 l_0_17_213) l_0_17_222)) (* (* 2.0 l_0_17_22) l_0_17_32))))
 (let ((?x60160 (- (- (- ?x60154 ?x60155) (* (* 2.0 l_0_17_233) l_0_17_242)) (* (* 2.0 l_0_17_234) l_0_17_243))))
 (let ((?x60166 (- (- (- ?x60160 ?x60161) (* (* 2.0 l_0_17_254) l_0_17_263)) (* (* 2.0 l_0_17_255) l_0_17_264))))
 (let ((?x60170 (- (- ?x60166 (* (* 2.0 l_0_17_275) l_0_17_284)) (* (* 2.0 l_0_17_276) l_0_17_285))))
 (= (+ (+ (- (- (- (+ ?x60170 ?x59750) ?x60172) ?x60174) ?x59752) ?x60177) ?x60179) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60305 (* ?x59937 l_0_17_80)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60303 (* ?x59934 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x60301 (* ?x59425 l_0_17_65)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60299 (* ?x59931 l_0_17_59)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60297 (* ?x59928 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x60295 (* ?x59404 l_0_17_44)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60285 (* ?x59910 l_0_17_38)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60279 (* ?x59901 l_0_17_37)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x59741 (* ?x58670 l_0_17_23)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x60266 (* ?x60265 l_0_17_3)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x60263 (* ?x60262 l_0_17_2)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x59882 (* ?x59519 l_0_17_128)))
 (let ((?x13411 (* 12.0 l_0_17_1)))
 (let ((?x59735 (* ?x13411 l_0_17_2)))
 (let ((?x60267 (+ (+ (+ (+ (* (* (- 2.0) l_0_17_1) l_0_17_16) ?x59735) ?x59882) ?x60263) ?x60266)))
 (let ((?x60271 (- (- ?x60267 (* (* 2.0 l_0_17_191) l_0_17_205)) (* (* 2.0 l_0_17_192) l_0_17_206))))
 (let ((?x60275 (- (- ?x60271 (* (* 2.0 l_0_17_212) l_0_17_226)) (* (* 2.0 l_0_17_213) l_0_17_227))))
 (let ((?x60282 (- (- (+ (- ?x60275 ?x59741) (* (* 2.0 l_0_17_22) l_0_17_37)) ?x60279) (* (* 2.0 l_0_17_233) l_0_17_247))))
 (let ((?x60288 (- (- (- ?x60282 (* (* 2.0 l_0_17_234) l_0_17_248)) ?x60285) (* (* 2.0 l_0_17_254) l_0_17_268))))
 (let ((?x60292 (- (- ?x60288 (* (* 2.0 l_0_17_255) l_0_17_269)) (* (* 2.0 l_0_17_275) l_0_17_289))))
 (let ((?x60300 (- (- (- (- ?x60292 (* (* 2.0 l_0_17_276) l_0_17_290)) ?x60295) ?x60297) ?x60299)))
 (= (+ (+ (+ ?x60300 ?x60301) ?x60303) ?x60305) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59818 (* l_0_17_3 l_0_17_3)))
 (let ((?x27883 (* l_0_17_24 l_0_17_24)))
 (let ((?x60371 (- (+ (+ (* (- l_0_17_2) l_0_17_2) (* l_0_17_23 l_0_17_23)) ?x27883) ?x59818)))
 (= ?x60371 0.0)))))
(assert
 (let ((?x60386 (- (- (* (- l_0_17_128) l_0_17_128) (* l_0_17_129 l_0_17_129)) (* (* 2.0 l_0_17_2) l_0_17_4))))
 (let ((?x60392 (+ (+ ?x60386 (* (* 2.0 l_0_17_23) l_0_17_25)) (* (* 2.0 l_0_17_24) l_0_17_26))))
 (= (- ?x60392 (* (* 2.0 l_0_17_3) l_0_17_5)) 0.0))))
(assert
 (let ((?x60441 (* l_0_17_87 l_0_17_87)))
 (let ((?x60439 (* l_0_17_86 l_0_17_86)))
 (let ((?x60429 (* l_0_17_171 l_0_17_171)))
 (let ((?x60427 (* l_0_17_170 l_0_17_170)))
 (let ((?x60425 (* l_0_17_150 l_0_17_150)))
 (let ((?x60423 (* l_0_17_149 l_0_17_149)))
 (let ((?x60421 (* l_0_17_108 l_0_17_108)))
 (let ((?x60420 (* l_0_17_107 l_0_17_107)))
 (let ((?x60422 (+ ?x60420 ?x60421)))
 (let ((?x60432 (- (+ (+ (- (- ?x60422 ?x60423) ?x60425) ?x60427) ?x60429) (* (* 2.0 l_0_17_2) l_0_17_7))))
 (let ((?x60436 (+ (+ ?x60432 (* (* 2.0 l_0_17_23) l_0_17_28)) (* (* 2.0 l_0_17_24) l_0_17_29))))
 (= (- (- (- ?x60436 (* (* 2.0 l_0_17_3) l_0_17_8)) ?x60439) ?x60441) 0.0)))))))))))))
(assert
 (let ((?x59830 (* l_0_17_66 l_0_17_66)))
 (let ((?x59827 (* l_0_17_65 l_0_17_65)))
 (let ((?x59869 (* l_0_17_45 l_0_17_45)))
 (let ((?x38669 (* l_0_17_44 l_0_17_44)))
 (let ((?x60466 (- (* (* (- 2.0) l_0_17_11) l_0_17_2) (* (* 2.0 l_0_17_12) l_0_17_3))))
 (let ((?x60470 (+ (+ ?x60466 (* (* 2.0 l_0_17_23) l_0_17_32)) (* (* 2.0 l_0_17_24) l_0_17_33))))
 (= (- (- (+ (+ ?x60470 ?x38669) ?x59869) ?x59827) ?x59830) 0.0))))))))
(assert
 (let ((?x59830 (* l_0_17_66 l_0_17_66)))
 (let ((?x60512 (* 3.0 ?x59830)))
 (let ((?x59827 (* l_0_17_65 l_0_17_65)))
 (let ((?x60510 (* 3.0 ?x59827)))
 (let ((?x60508 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (let ((?x59818 (* l_0_17_3 l_0_17_3)))
 (let ((?x59819 (* 6.0 ?x59818)))
 (let ((?x59808 (* (* 6.0 l_0_17_24) l_0_17_24)))
 (let ((?x59801 (* (* 6.0 l_0_17_23) l_0_17_23)))
 (let ((?x59790 (* l_0_17_2 l_0_17_2)))
 (let ((?x59791 (* 6.0 ?x59790)))
 (let ((?x60492 (- (+ (* l_0_17_128 l_0_17_128) (* l_0_17_129 l_0_17_129)) (* (* 2.0 l_0_17_16) l_0_17_2))))
 (let ((?x60498 (+ (+ (- ?x60492 (* (* 2.0 l_0_17_17) l_0_17_3)) ?x59791) (* (* 2.0 l_0_17_23) l_0_17_37))))
 (let ((?x60503 (+ (- (+ (- ?x60498 ?x59801) (* (* 2.0 l_0_17_24) l_0_17_38)) ?x59808) ?x59819)))
 (let ((?x60513 (+ (+ (- (- ?x60503 (* (* 3.0 l_0_17_44) l_0_17_44)) ?x60508) ?x60510) ?x60512)))
 (= ?x60513 0.0)))))))))))))))))
(assert
 (let ((?x60550 (* l_0_17_6 l_0_17_6)))
 (let ((?x60548 (* l_0_17_5 l_0_17_5)))
 (let ((?x60546 (* l_0_17_4 l_0_17_4)))
 (let ((?x60544 (* l_0_17_27 l_0_17_27)))
 (let ((?x60542 (* l_0_17_26 l_0_17_26)))
 (let ((?x60540 (* l_0_17_25 l_0_17_25)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60538 (* ?x60537 l_0_17_131)))
 (let ((?x60545 (+ (+ (+ (- (* (* (- 2.0) l_0_17_128) l_0_17_130) ?x60538) ?x60540) ?x60542) ?x60544)))
 (= (- (- (- ?x60545 ?x60546) ?x60548) ?x60550) 0.0)))))))))))
(assert
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60612 (* ?x60611 l_0_17_89)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60609 (* ?x60608 l_0_17_88)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60588 (* ?x60587 l_0_17_173)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60585 (* ?x60584 l_0_17_172)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60582 (* ?x60581 l_0_17_152)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60579 (* ?x60578 l_0_17_151)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60576 (* ?x60537 l_0_17_134)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60574 (* ?x60573 l_0_17_133)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60571 (* ?x60570 l_0_17_110)))
 (let ((?x60580 (- (- (- (+ (* (* 2.0 l_0_17_107) l_0_17_109) ?x60571) ?x60574) ?x60576) ?x60579)))
 (let ((?x60592 (+ (+ (+ (- ?x60580 ?x60582) ?x60585) ?x60588) (* (* 2.0 l_0_17_25) l_0_17_28))))
 (let ((?x60598 (+ (+ ?x60592 (* (* 2.0 l_0_17_26) l_0_17_29)) (* (* 2.0 l_0_17_27) l_0_17_30))))
 (let ((?x60604 (- (- ?x60598 (* (* 2.0 l_0_17_4) l_0_17_7)) (* (* 2.0 l_0_17_5) l_0_17_8))))
 (= (- (- (- ?x60604 (* (* 2.0 l_0_17_6) l_0_17_9)) ?x60609) ?x60612) 0.0))))))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x59938 (* ?x59937 l_0_17_68)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x59935 (* ?x59934 l_0_17_67)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x59932 (* ?x59931 l_0_17_47)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x59929 (* ?x59928 l_0_17_46)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60686 (* ?x60537 l_0_17_138)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60684 (* ?x60573 l_0_17_137)))
 (let ((?x60683 (- (* (* (- 2.0) l_0_17_11) l_0_17_4) (* (* 2.0 l_0_17_12) l_0_17_5))))
 (let ((?x60692 (+ (- (- (- ?x60683 ?x60684) ?x60686) (* (* 2.0 l_0_17_13) l_0_17_6)) (* (* 2.0 l_0_17_25) l_0_17_32))))
 (let ((?x60696 (+ (+ ?x60692 (* (* 2.0 l_0_17_26) l_0_17_33)) (* (* 2.0 l_0_17_27) l_0_17_34))))
 (= (- (- (+ (+ ?x60696 ?x59929) ?x59932) ?x59935) ?x59938) 0.0)))))))))))))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x60765 (* ?x60764 l_0_17_68)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x60762 (* ?x60761 l_0_17_67)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x60759 (* ?x60758 l_0_17_47)))
 (let ((?x59925 (* 12.0 l_0_17_3)))
 (let ((?x59926 (* ?x59925 l_0_17_5)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x59911 (* ?x59910 l_0_17_26)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x59902 (* ?x59901 l_0_17_25)))
 (let ((?x59890 (* 12.0 l_0_17_2)))
 (let ((?x59891 (* ?x59890 l_0_17_4)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60736 (* ?x60537 l_0_17_143)))
 (let ((?x60538 (* ?x60537 l_0_17_131)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60733 (* ?x60573 l_0_17_142)))
 (let ((?x60739 (- (- (+ (- (* ?x60573 l_0_17_130) ?x60733) ?x60538) ?x60736) (* (* 2.0 l_0_17_16) l_0_17_4))))
 (let ((?x60744 (- (- ?x60739 (* (* 2.0 l_0_17_17) l_0_17_5)) (* (* 2.0 l_0_17_18) l_0_17_6))))
 (let ((?x60749 (+ (- (- (+ ?x60744 ?x59891) ?x59902) ?x59911) (* (* 2.0 l_0_17_25) l_0_17_37))))
 (let ((?x60753 (+ (+ ?x60749 (* (* 2.0 l_0_17_26) l_0_17_38)) (* (* 2.0 l_0_17_27) l_0_17_39))))
 (let ((?x60763 (+ (- (- (+ ?x60753 ?x59926) (* (* 6.0 l_0_17_44) l_0_17_46)) ?x60759) ?x60762)))
 (= (+ ?x60763 ?x60765) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58823 (* l_0_17_9 l_0_17_9)))
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60824 (* ?x60611 l_0_17_92)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60822 (* ?x60608 l_0_17_91)))
 (let ((?x58817 (* l_0_17_8 l_0_17_8)))
 (let ((?x58802 (* l_0_17_7 l_0_17_7)))
 (let ((?x58886 (* l_0_17_31 l_0_17_31)))
 (let ((?x58880 (* l_0_17_30 l_0_17_30)))
 (let ((?x13568 (* l_0_17_29 l_0_17_29)))
 (let ((?x58865 (* l_0_17_28 l_0_17_28)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60814 (* ?x60587 l_0_17_176)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60812 (* ?x60584 l_0_17_175)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60810 (* ?x60581 l_0_17_155)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60808 (* ?x60578 l_0_17_154)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60806 (* ?x60570 l_0_17_113)))
 (let ((?x60805 (+ (* (- l_0_17_10) l_0_17_10) (* (* 2.0 l_0_17_107) l_0_17_112))))
 (let ((?x60817 (+ (+ (+ (+ (- (- (+ ?x60805 ?x60806) ?x60808) ?x60810) ?x60812) ?x60814) ?x58865) ?x13568)))
 (let ((?x60826 (- (- (- (- (- (+ (+ ?x60817 ?x58880) ?x58886) ?x58802) ?x58817) ?x60822) ?x60824) ?x58823)))
 (= ?x60826 0.0))))))))))))))))))))))))))
(assert
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60885 (* ?x60611 l_0_17_96)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60883 (* ?x60608 l_0_17_95)))
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60055 (* ?x59937 l_0_17_71)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60053 (* ?x59934 l_0_17_70)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60051 (* ?x59931 l_0_17_50)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60049 (* ?x59928 l_0_17_49)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60865 (* ?x60587 l_0_17_180)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60863 (* ?x60584 l_0_17_179)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60861 (* ?x60581 l_0_17_159)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60859 (* ?x60578 l_0_17_158)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60850 (* ?x60570 l_0_17_117)))
 (let ((?x60849 (+ (* (* (- 2.0) l_0_17_10) l_0_17_14) (* (* 2.0 l_0_17_107) l_0_17_116))))
 (let ((?x60856 (- (- (+ ?x60849 ?x60850) (* (* 2.0 l_0_17_11) l_0_17_7)) (* (* 2.0 l_0_17_12) l_0_17_8))))
 (let ((?x60864 (+ (- (- (- ?x60856 (* (* 2.0 l_0_17_13) l_0_17_9)) ?x60859) ?x60861) ?x60863)))
 (let ((?x60872 (+ (+ (+ ?x60864 ?x60865) (* (* 2.0 l_0_17_28) l_0_17_32)) (* (* 2.0 l_0_17_29) l_0_17_33))))
 (let ((?x60878 (+ (+ ?x60872 (* (* 2.0 l_0_17_30) l_0_17_34)) (* (* 2.0 l_0_17_31) l_0_17_35))))
 (= (- (- (- (- (+ (+ ?x60878 ?x60049) ?x60051) ?x60053) ?x60055) ?x60883) ?x60885) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x60952 (* ?x60764 l_0_17_71)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x60950 (* ?x60761 l_0_17_70)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x60948 (* ?x60758 l_0_17_50)))
 (let ((?x59925 (* 12.0 l_0_17_3)))
 (let ((?x60047 (* ?x59925 l_0_17_8)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60037 (* ?x59910 l_0_17_29)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60031 (* ?x59901 l_0_17_28)))
 (let ((?x59890 (* 12.0 l_0_17_2)))
 (let ((?x60023 (* ?x59890 l_0_17_7)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60930 (* ?x60587 l_0_17_185)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60928 (* ?x60584 l_0_17_184)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60922 (* ?x60581 l_0_17_164)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60920 (* ?x60578 l_0_17_163)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60576 (* ?x60537 l_0_17_134)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60574 (* ?x60573 l_0_17_133)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60916 (* ?x60570 l_0_17_122)))
 (let ((?x28452 (* 2.0 l_0_17_107)))
 (let ((?x60914 (* ?x28452 l_0_17_121)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x60912 (* ?x60911 l_0_17_87)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x60909 (* ?x60908 l_0_17_86)))
 (let ((?x60917 (+ (+ (- (- (* (* (- 2.0) l_0_17_10) l_0_17_19) ?x60909) ?x60912) ?x60914) ?x60916)))
 (let ((?x60925 (- (- (- (+ (+ ?x60917 ?x60574) ?x60576) ?x60920) ?x60922) (* (* 2.0 l_0_17_16) l_0_17_7))))
 (let ((?x60933 (- (+ (+ (- ?x60925 (* (* 2.0 l_0_17_17) l_0_17_8)) ?x60928) ?x60930) (* (* 2.0 l_0_17_18) l_0_17_9))))
 (let ((?x60938 (+ (- (- (+ ?x60933 ?x60023) ?x60031) ?x60037) (* (* 2.0 l_0_17_28) l_0_17_37))))
 (let ((?x60943 (+ (+ (+ ?x60938 (* (* 2.0 l_0_17_29) l_0_17_38)) ?x60047) (* (* 2.0 l_0_17_30) l_0_17_39))))
 (let ((?x60947 (- (+ ?x60943 (* (* 2.0 l_0_17_31) l_0_17_40)) (* (* 6.0 l_0_17_44) l_0_17_49))))
 (= (+ (+ (- ?x60947 ?x60948) ?x60950) ?x60952) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60179 (* ?x59937 l_0_17_75)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60177 (* ?x59934 l_0_17_74)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60174 (* ?x59931 l_0_17_54)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60172 (* ?x59928 l_0_17_53)))
 (let ((?x27009 (* l_0_17_36 l_0_17_36)))
 (let ((?x59116 (* l_0_17_35 l_0_17_35)))
 (let ((?x48199 (* l_0_17_34 l_0_17_34)))
 (let ((?x37858 (* l_0_17_33 l_0_17_33)))
 (let ((?x59105 (* l_0_17_32 l_0_17_32)))
 (let ((?x58964 (* l_0_17_15 l_0_17_15)))
 (let ((?x58961 (* l_0_17_14 l_0_17_14)))
 (let ((?x58958 (* l_0_17_13 l_0_17_13)))
 (let ((?x60990 (- (- (* (- l_0_17_11) l_0_17_11) (* l_0_17_12 l_0_17_12)) ?x58958)))
 (let ((?x60997 (+ (+ (+ (+ (+ (- (- ?x60990 ?x58961) ?x58964) ?x59105) ?x37858) ?x48199) ?x59116) ?x27009)))
 (= (- (- (+ (+ ?x60997 ?x60172) ?x60174) ?x60177) ?x60179) 0.0))))))))))))))))))))
(assert
 (let ((?x59937 (* 2.0 l_0_17_66)))
 (let ((?x60305 (* ?x59937 l_0_17_80)))
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x61051 (* ?x60764 l_0_17_75)))
 (let ((?x59934 (* 2.0 l_0_17_65)))
 (let ((?x60303 (* ?x59934 l_0_17_79)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x61048 (* ?x60761 l_0_17_74)))
 (let ((?x59931 (* 2.0 l_0_17_45)))
 (let ((?x60299 (* ?x59931 l_0_17_59)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x61045 (* ?x60758 l_0_17_54)))
 (let ((?x59928 (* 2.0 l_0_17_44)))
 (let ((?x60297 (* ?x59928 l_0_17_58)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60161 (* ?x59910 l_0_17_33)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60155 (* ?x59901 l_0_17_32)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60686 (* ?x60537 l_0_17_138)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60684 (* ?x60573 l_0_17_137)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x60143 (* ?x59148 l_0_17_3)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x60141 (* ?x59145 l_0_17_2)))
 (let ((?x61013 (- (+ (* (* (- 2.0) l_0_17_11) l_0_17_16) ?x60141) (* (* 2.0 l_0_17_12) l_0_17_17))))
 (let ((?x61018 (- (+ (+ (+ ?x61013 ?x60143) ?x60684) ?x60686) (* (* 2.0 l_0_17_13) l_0_17_18))))
 (let ((?x61024 (- (- ?x61018 (* (* 2.0 l_0_17_14) l_0_17_19)) (* (* 2.0 l_0_17_15) l_0_17_20))))
 (let ((?x61032 (+ (+ (- (- ?x61024 ?x60155) ?x60161) (* (* 2.0 l_0_17_32) l_0_17_37)) (* (* 2.0 l_0_17_33) l_0_17_38))))
 (let ((?x61038 (+ (+ ?x61032 (* (* 2.0 l_0_17_34) l_0_17_39)) (* (* 2.0 l_0_17_35) l_0_17_40))))
 (let ((?x61043 (- (+ ?x61038 (* (* 2.0 l_0_17_36) l_0_17_41)) (* (* 6.0 l_0_17_44) l_0_17_53))))
 (let ((?x61053 (- (+ (- (+ (+ (- (+ ?x61043 ?x60297) ?x61045) ?x60299) ?x61048) ?x60303) ?x61051) ?x60305)))
 (= ?x61053 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x61114 (* ?x60764 l_0_17_80)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x61112 (* ?x60761 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x60301 (* ?x59425 l_0_17_65)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x61109 (* ?x60758 l_0_17_59)))
 (let ((?x60755 (* 6.0 l_0_17_44)))
 (let ((?x61107 (* ?x60755 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x60295 (* ?x59404 l_0_17_44)))
 (let ((?x13980 (* l_0_17_42 l_0_17_42)))
 (let ((?x48978 (* l_0_17_41 l_0_17_41)))
 (let ((?x59465 (* l_0_17_40 l_0_17_40)))
 (let ((?x38213 (* l_0_17_39 l_0_17_39)))
 (let ((?x48974 (* l_0_17_38 l_0_17_38)))
 (let ((?x27454 (* l_0_17_37 l_0_17_37)))
 (let ((?x59910 (* 12.0 l_0_17_24)))
 (let ((?x60285 (* ?x59910 l_0_17_38)))
 (let ((?x59901 (* 12.0 l_0_17_23)))
 (let ((?x60279 (* ?x59901 l_0_17_37)))
 (let ((?x59383 (* l_0_17_21 l_0_17_21)))
 (let ((?x59380 (* l_0_17_20 l_0_17_20)))
 (let ((?x59377 (* l_0_17_19 l_0_17_19)))
 (let ((?x59374 (* l_0_17_18 l_0_17_18)))
 (let ((?x59371 (* l_0_17_17 l_0_17_17)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x60266 (* ?x60265 l_0_17_3)))
 (let ((?x59367 (* l_0_17_16 l_0_17_16)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x60263 (* ?x60262 l_0_17_2)))
 (let ((?x60537 (* 2.0 l_0_17_129)))
 (let ((?x60736 (* ?x60537 l_0_17_143)))
 (let ((?x60573 (* 2.0 l_0_17_128)))
 (let ((?x60733 (* ?x60573 l_0_17_142)))
 (let ((?x61095 (- (- (- (+ (- (+ (+ ?x60733 ?x60736) ?x60263) ?x59367) ?x60266) ?x59371) ?x59374) ?x59377)))
 (let ((?x61102 (+ (+ (+ (- (- (- (- ?x61095 ?x59380) ?x59383) ?x60279) ?x60285) ?x27454) ?x48974) ?x38213)))
 (let ((?x61111 (+ (- (- (- (+ (+ (+ ?x61102 ?x59465) ?x48978) ?x13980) ?x60295) ?x61107) ?x61109) ?x60301)))
 (= (+ (+ ?x61111 ?x61112) ?x61114) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x61233 (* ?x61232 l_0_17_81)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x61230 (* ?x61229 l_0_17_80)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x61227 (* ?x61226 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61224 (* ?x59425 l_0_17_67)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x61222 (* ?x61221 l_0_17_60)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x61219 (* ?x61218 l_0_17_59)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x61216 (* ?x61215 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61213 (* ?x59404 l_0_17_46)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61202 (* ?x61201 l_0_17_39)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61199 (* ?x61198 l_0_17_38)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61187 (* ?x61186 l_0_17_37)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x61175 (* ?x58670 l_0_17_25)))
 (let ((?x61154 (* 12.0 l_0_17_18)))
 (let ((?x61155 (* ?x61154 l_0_17_6)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x61152 (* ?x60265 l_0_17_5)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x61150 (* ?x60262 l_0_17_4)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x59520 (* ?x59519 l_0_17_142)))
 (let ((?x61149 (- (+ (* (* 12.0 l_0_17_1) l_0_17_4) (* ?x59519 l_0_17_130)) ?x59520)))
 (let ((?x61159 (- (+ (+ (+ ?x61149 ?x61150) ?x61152) ?x61155) (* (* 2.0 l_0_17_193) l_0_17_205))))
 (let ((?x61165 (- (- ?x61159 (* (* 2.0 l_0_17_194) l_0_17_206)) (* (* 2.0 l_0_17_195) l_0_17_207))))
 (let ((?x61171 (- (- ?x61165 (* (* 2.0 l_0_17_214) l_0_17_226)) (* (* 2.0 l_0_17_215) l_0_17_227))))
 (let ((?x61179 (- (- (- ?x61171 (* (* 2.0 l_0_17_216) l_0_17_228)) ?x61175) (* (* 2.0 l_0_17_235) l_0_17_247))))
 (let ((?x61185 (- (- ?x61179 (* (* 2.0 l_0_17_236) l_0_17_248)) (* (* 2.0 l_0_17_237) l_0_17_249))))
 (let ((?x61194 (- (- (- ?x61185 ?x61187) (* (* 2.0 l_0_17_256) l_0_17_268)) (* (* 2.0 l_0_17_257) l_0_17_269))))
 (let ((?x61206 (- (- (- (- ?x61194 (* (* 2.0 l_0_17_258) l_0_17_270)) ?x61199) ?x61202) (* (* 2.0 l_0_17_277) l_0_17_289))))
 (let ((?x61212 (- (- ?x61206 (* (* 2.0 l_0_17_278) l_0_17_290)) (* (* 2.0 l_0_17_279) l_0_17_291))))
 (let ((?x61231 (+ (+ (+ (- (- (- (- ?x61212 ?x61213) ?x61216) ?x61219) ?x61222) ?x61224) ?x61227) ?x61230)))
 (= (+ ?x61231 ?x61233) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59253 (* 2.0 l_0_17_73)))
 (let ((?x61362 (* ?x59253 l_0_17_82)))
 (let ((?x59250 (* 2.0 l_0_17_72)))
 (let ((?x61360 (* ?x59250 l_0_17_81)))
 (let ((?x59247 (* 2.0 l_0_17_71)))
 (let ((?x61358 (* ?x59247 l_0_17_80)))
 (let ((?x59244 (* 2.0 l_0_17_70)))
 (let ((?x61356 (* ?x59244 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61354 (* ?x59425 l_0_17_70)))
 (let ((?x59240 (* 2.0 l_0_17_52)))
 (let ((?x61352 (* ?x59240 l_0_17_61)))
 (let ((?x59237 (* 2.0 l_0_17_51)))
 (let ((?x61350 (* ?x59237 l_0_17_60)))
 (let ((?x59234 (* 2.0 l_0_17_50)))
 (let ((?x61348 (* ?x59234 l_0_17_59)))
 (let ((?x59231 (* 2.0 l_0_17_49)))
 (let ((?x61346 (* ?x59231 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61344 (* ?x59404 l_0_17_49)))
 (let ((?x59227 (* 12.0 l_0_17_31)))
 (let ((?x61342 (* ?x59227 l_0_17_40)))
 (let ((?x59224 (* 12.0 l_0_17_30)))
 (let ((?x61340 (* ?x59224 l_0_17_39)))
 (let ((?x59221 (* 12.0 l_0_17_29)))
 (let ((?x61338 (* ?x59221 l_0_17_38)))
 (let ((?x59206 (* 12.0 l_0_17_28)))
 (let ((?x61328 (* ?x59206 l_0_17_37)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x58671 (* ?x58670 l_0_17_28)))
 (let ((?x61154 (* 12.0 l_0_17_18)))
 (let ((?x61293 (* ?x61154 l_0_17_9)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x61291 (* ?x60265 l_0_17_8)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x61289 (* ?x58735 l_0_17_184)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x61287 (* ?x60262 l_0_17_7)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x61285 (* ?x58732 l_0_17_163)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x61283 (* ?x59519 l_0_17_133)))
 (let ((?x58729 (* 2.0 l_0_17_106)))
 (let ((?x49978 (* ?x58729 l_0_17_121)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x50030 (* ?x60908 l_0_17_85)))
 (let ((?x27053 (* 12.0 l_0_17_10)))
 (let ((?x37038 (* ?x27053 l_0_17_19)))
 (let ((?x13411 (* 12.0 l_0_17_1)))
 (let ((?x58656 (* ?x13411 l_0_17_7)))
 (let ((?x61290 (+ (+ (- (+ (+ (- (+ ?x58656 ?x37038) ?x50030) ?x49978) ?x61283) ?x61285) ?x61287) ?x61289)))
 (let ((?x61298 (- (- (+ (+ ?x61290 ?x61291) ?x61293) (* (* 2.0 l_0_17_196) l_0_17_205)) (* (* 2.0 l_0_17_197) l_0_17_206))))
 (let ((?x61302 (- (- ?x61298 (* (* 2.0 l_0_17_198) l_0_17_207)) (* (* 2.0 l_0_17_199) l_0_17_208))))
 (let ((?x61306 (- (- ?x61302 (* (* 2.0 l_0_17_217) l_0_17_226)) (* (* 2.0 l_0_17_218) l_0_17_227))))
 (let ((?x61311 (- (- (- ?x61306 (* (* 2.0 l_0_17_219) l_0_17_228)) ?x58671) (* (* 2.0 l_0_17_220) l_0_17_229))))
 (let ((?x61315 (- (- ?x61311 (* (* 2.0 l_0_17_238) l_0_17_247)) (* (* 2.0 l_0_17_239) l_0_17_248))))
 (let ((?x61319 (- (- ?x61315 (* (* 2.0 l_0_17_240) l_0_17_249)) (* (* 2.0 l_0_17_241) l_0_17_250))))
 (let ((?x61323 (- (- ?x61319 (* (* 2.0 l_0_17_259) l_0_17_268)) (* (* 2.0 l_0_17_260) l_0_17_269))))
 (let ((?x61327 (- (- ?x61323 (* (* 2.0 l_0_17_261) l_0_17_270)) (* (* 2.0 l_0_17_262) l_0_17_271))))
 (let ((?x61333 (- (- (- ?x61327 ?x61328) (* (* 2.0 l_0_17_280) l_0_17_289)) (* (* 2.0 l_0_17_281) l_0_17_290))))
 (let ((?x61337 (- (- ?x61333 (* (* 2.0 l_0_17_282) l_0_17_291)) (* (* 2.0 l_0_17_283) l_0_17_292))))
 (let ((?x61351 (- (- (- (- (- (- (- ?x61337 ?x61338) ?x61340) ?x61342) ?x61344) ?x61346) ?x61348) ?x61350)))
 (= (+ (+ (+ (+ (+ (- ?x61351 ?x61352) ?x61354) ?x61356) ?x61358) ?x61360) ?x61362) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61531 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x61528 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x61525 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x61522 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x61519 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x59701 (* ?x58685 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61515 (* ?x59425 l_0_17_74)))
 (let ((?x61513 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x61510 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x61507 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x61504 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x61501 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x59698 (* ?x58682 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61497 (* ?x59404 l_0_17_53)))
 (let ((?x61495 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61492 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61489 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61486 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61483 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x58911 (* ?x58670 l_0_17_32)))
 (let ((?x61404 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x61401 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x61398 (* ?x59151 l_0_17_18)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x16667 (* ?x59519 l_0_17_137)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x50377 (* ?x59148 l_0_17_17)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x50380 (* ?x59145 l_0_17_16)))
 (let ((?x13411 (* 12.0 l_0_17_1)))
 (let ((?x58905 (* ?x13411 l_0_17_11)))
 (let ((?x61408 (- (+ (+ (+ (+ (+ (+ ?x58905 ?x50380) ?x50377) ?x16667) ?x61398) ?x61401) ?x61404) (* (* 2.0 l_0_17_200) l_0_17_205))))
 (let ((?x61414 (- (- ?x61408 (* (* 2.0 l_0_17_201) l_0_17_206)) (* (* 2.0 l_0_17_202) l_0_17_207))))
 (let ((?x61420 (- (- ?x61414 (* (* 2.0 l_0_17_203) l_0_17_208)) (* (* 2.0 l_0_17_204) l_0_17_209))))
 (let ((?x61427 (- (- (- ?x61420 ?x58911) (* (* 2.0 l_0_17_221) l_0_17_226)) (* (* 2.0 l_0_17_222) l_0_17_227))))
 (let ((?x61433 (- (- ?x61427 (* (* 2.0 l_0_17_223) l_0_17_228)) (* (* 2.0 l_0_17_224) l_0_17_229))))
 (let ((?x61439 (- (- ?x61433 (* (* 2.0 l_0_17_225) l_0_17_230)) (* (* 2.0 l_0_17_242) l_0_17_247))))
 (let ((?x61445 (- (- ?x61439 (* (* 2.0 l_0_17_243) l_0_17_248)) (* (* 2.0 l_0_17_244) l_0_17_249))))
 (let ((?x61451 (- (- ?x61445 (* (* 2.0 l_0_17_245) l_0_17_250)) (* (* 2.0 l_0_17_246) l_0_17_251))))
 (let ((?x61457 (- (- ?x61451 (* (* 2.0 l_0_17_263) l_0_17_268)) (* (* 2.0 l_0_17_264) l_0_17_269))))
 (let ((?x61463 (- (- ?x61457 (* (* 2.0 l_0_17_265) l_0_17_270)) (* (* 2.0 l_0_17_266) l_0_17_271))))
 (let ((?x61469 (- (- ?x61463 (* (* 2.0 l_0_17_267) l_0_17_272)) (* (* 2.0 l_0_17_284) l_0_17_289))))
 (let ((?x61475 (- (- ?x61469 (* (* 2.0 l_0_17_285) l_0_17_290)) (* (* 2.0 l_0_17_286) l_0_17_291))))
 (let ((?x61481 (- (- ?x61475 (* (* 2.0 l_0_17_287) l_0_17_292)) (* (* 2.0 l_0_17_288) l_0_17_293))))
 (let ((?x61499 (+ (- (- (- (- (- (- ?x61481 ?x61483) ?x61486) ?x61489) ?x61492) ?x61495) ?x61497) ?x59698)))
 (let ((?x61517 (- (+ (- (- (- (- (- ?x61499 ?x61501) ?x61504) ?x61507) ?x61510) ?x61513) ?x61515) ?x59701)))
 (= (+ (+ (+ (+ (+ ?x61517 ?x61519) ?x61522) ?x61525) ?x61528) ?x61531) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61679 (* l_0_17_69 l_0_17_69)))
 (let ((?x61680 (* 3.0 ?x61679)))
 (let ((?x61676 (* l_0_17_68 l_0_17_68)))
 (let ((?x61677 (* 3.0 ?x61676)))
 (let ((?x61673 (* l_0_17_67 l_0_17_67)))
 (let ((?x61674 (* 3.0 ?x61673)))
 (let ((?x60550 (* l_0_17_6 l_0_17_6)))
 (let ((?x61671 (* 6.0 ?x60550)))
 (let ((?x60548 (* l_0_17_5 l_0_17_5)))
 (let ((?x61669 (* 6.0 ?x60548)))
 (let ((?x61667 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x61664 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x60546 (* l_0_17_4 l_0_17_4)))
 (let ((?x61658 (* 6.0 ?x60546)))
 (let ((?x61656 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x61653 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x61650 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x61647 (* l_0_17_132 l_0_17_132)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61645 (* ?x61644 l_0_17_144)))
 (let ((?x61642 (* l_0_17_131 l_0_17_131)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61625 (* ?x61624 l_0_17_143)))
 (let ((?x61620 (* l_0_17_130 l_0_17_130)))
 (let ((?x61646 (- (+ (- (+ (* (* (- 2.0) l_0_17_130) l_0_17_142) ?x61620) ?x61625) ?x61642) ?x61645)))
 (let ((?x61662 (- (+ (- (- (- (+ ?x61646 ?x61647) ?x61650) ?x61653) ?x61656) ?x61658) (* (* 3.0 l_0_17_46) l_0_17_46))))
 (let ((?x61681 (+ (+ (+ (+ (+ (- (- ?x61662 ?x61664) ?x61667) ?x61669) ?x61671) ?x61674) ?x61677) ?x61680)))
 (= ?x61681 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61790 (* ?x61789 l_0_17_72)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61787 (* ?x61786 l_0_17_71)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61784 (* ?x61783 l_0_17_70)))
 (let ((?x61781 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x61778 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61775 (* ?x61774 l_0_17_51)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61772 (* ?x61771 l_0_17_50)))
 (let ((?x61766 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61763 (* ?x61201 l_0_17_30)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61761 (* ?x61198 l_0_17_29)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61759 (* ?x61186 l_0_17_28)))
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x61757 (* ?x61756 l_0_17_186)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x61754 (* ?x61753 l_0_17_185)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x61751 (* ?x61750 l_0_17_184)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x61748 (* ?x61747 l_0_17_165)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x61745 (* ?x61744 l_0_17_164)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x61742 (* ?x61741 l_0_17_163)))
 (let ((?x61738 (* 2.0 l_0_17_136)))
 (let ((?x61739 (* ?x61738 l_0_17_145)))
 (let ((?x61735 (* 2.0 l_0_17_135)))
 (let ((?x61736 (* ?x61735 l_0_17_144)))
 (let ((?x61732 (* 2.0 l_0_17_134)))
 (let ((?x61733 (* ?x61732 l_0_17_143)))
 (let ((?x61729 (* 2.0 l_0_17_133)))
 (let ((?x61730 (* ?x61729 l_0_17_142)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61727 (* ?x61644 l_0_17_135)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61725 (* ?x61624 l_0_17_134)))
 (let ((?x61722 (* 2.0 l_0_17_130)))
 (let ((?x61723 (* ?x61722 l_0_17_133)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x61720 (* ?x61719 l_0_17_123)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x61717 (* ?x61716 l_0_17_122)))
 (let ((?x61713 (* 2.0 l_0_17_109)))
 (let ((?x61714 (* ?x61713 l_0_17_121)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x61711 (* ?x61710 l_0_17_90)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x61708 (* ?x60911 l_0_17_89)))
 (let ((?x61718 (+ (+ (- (- (* (* (- 2.0) l_0_17_100) l_0_17_88) ?x61708) ?x61711) ?x61714) ?x61717)))
 (let ((?x61737 (- (- (- (+ (+ (+ (+ ?x61718 ?x61720) ?x61723) ?x61725) ?x61727) ?x61730) ?x61733) ?x61736)))
 (let ((?x61758 (+ (+ (+ (- (- (- (- ?x61737 ?x61739) ?x61742) ?x61745) ?x61748) ?x61751) ?x61754) ?x61757)))
 (let ((?x61770 (- (+ (- (- (- ?x61758 ?x61759) ?x61761) ?x61763) ?x61766) (* (* 6.0 l_0_17_46) l_0_17_49))))
 (let ((?x61791 (+ (+ (+ (+ (+ (- (- ?x61770 ?x61772) ?x61775) ?x61778) ?x61781) ?x61784) ?x61787) ?x61790)))
 (= ?x61791 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x61233 (* ?x61232 l_0_17_81)))
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61904 (* ?x61789 l_0_17_76)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x61230 (* ?x61229 l_0_17_80)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61901 (* ?x61786 l_0_17_75)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x61227 (* ?x61226 l_0_17_79)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61898 (* ?x61783 l_0_17_74)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x61222 (* ?x61221 l_0_17_60)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61895 (* ?x61774 l_0_17_55)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x61219 (* ?x61218 l_0_17_59)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61892 (* ?x61771 l_0_17_54)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x61216 (* ?x61215 l_0_17_58)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61887 (* ?x61201 l_0_17_34)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61885 (* ?x61198 l_0_17_33)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61883 (* ?x61186 l_0_17_32)))
 (let ((?x61881 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61878 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61875 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61872 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61869 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61866 (* ?x61644 l_0_17_139)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61864 (* ?x61624 l_0_17_138)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x61860 (* ?x59151 l_0_17_6)))
 (let ((?x61859 (+ (* (* 12.0 l_0_17_11) l_0_17_4) (* (* 12.0 l_0_17_12) l_0_17_5))))
 (let ((?x61867 (+ (+ (+ (+ ?x61859 ?x61860) (* (* 2.0 l_0_17_130) l_0_17_137)) ?x61864) ?x61866)))
 (let ((?x61886 (- (- (- (- (- (- (- ?x61867 ?x61869) ?x61872) ?x61875) ?x61878) ?x61881) ?x61883) ?x61885)))
 (let ((?x61893 (- (+ (- (- ?x61886 ?x61887) (* (* 6.0 l_0_17_46) l_0_17_53)) ?x61216) ?x61892)))
 (let ((?x61903 (- (+ (- (+ (+ (- (+ ?x61893 ?x61219) ?x61895) ?x61222) ?x61898) ?x61227) ?x61901) ?x61230)))
 (= (- (+ ?x61903 ?x61904) ?x61233) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61971 (* ?x61789 l_0_17_81)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61969 (* ?x61786 l_0_17_80)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61967 (* ?x61783 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61224 (* ?x59425 l_0_17_67)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61964 (* ?x61774 l_0_17_60)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61962 (* ?x61771 l_0_17_59)))
 (let ((?x61768 (* 6.0 l_0_17_46)))
 (let ((?x61960 (* ?x61768 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61213 (* ?x59404 l_0_17_46)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61202 (* ?x61201 l_0_17_39)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61199 (* ?x61198 l_0_17_38)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61187 (* ?x61186 l_0_17_37)))
 (let ((?x61154 (* 12.0 l_0_17_18)))
 (let ((?x61155 (* ?x61154 l_0_17_6)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x61152 (* ?x60265 l_0_17_5)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x61150 (* ?x60262 l_0_17_4)))
 (let ((?x48909 (* l_0_17_147 l_0_17_147)))
 (let ((?x38199 (* l_0_17_146 l_0_17_146)))
 (let ((?x13956 (* l_0_17_145 l_0_17_145)))
 (let ((?x48908 (* l_0_17_144 l_0_17_144)))
 (let ((?x48885 (* l_0_17_143 l_0_17_143)))
 (let ((?x38113 (* l_0_17_142 l_0_17_142)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61645 (* ?x61644 l_0_17_144)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61625 (* ?x61624 l_0_17_143)))
 (let ((?x61948 (- (- (+ (+ (* (* 2.0 l_0_17_130) l_0_17_142) ?x61625) ?x61645) ?x38113) ?x48885)))
 (let ((?x61955 (+ (+ (+ (- (- (- (- ?x61948 ?x48908) ?x13956) ?x38199) ?x48909) ?x61150) ?x61152) ?x61155)))
 (let ((?x61965 (- (- (- (- (- (- (- ?x61955 ?x61187) ?x61199) ?x61202) ?x61213) ?x61960) ?x61962) ?x61964)))
 (= (+ (+ (+ (+ ?x61965 ?x61224) ?x61967) ?x61969) ?x61971) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58823 (* l_0_17_9 l_0_17_9)))
 (let ((?x58824 (* 6.0 ?x58823)))
 (let ((?x58817 (* l_0_17_8 l_0_17_8)))
 (let ((?x58818 (* 6.0 ?x58817)))
 (let ((?x58814 (* l_0_17_73 l_0_17_73)))
 (let ((?x62062 (* 3.0 ?x58814)))
 (let ((?x58811 (* l_0_17_72 l_0_17_72)))
 (let ((?x62060 (* 3.0 ?x58811)))
 (let ((?x58808 (* l_0_17_71 l_0_17_71)))
 (let ((?x62058 (* 3.0 ?x58808)))
 (let ((?x58805 (* l_0_17_70 l_0_17_70)))
 (let ((?x62056 (* 3.0 ?x58805)))
 (let ((?x58802 (* l_0_17_7 l_0_17_7)))
 (let ((?x58803 (* 6.0 ?x58802)))
 (let ((?x62053 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x62050 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x62047 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x58788 (* (* 6.0 l_0_17_31) l_0_17_31)))
 (let ((?x58785 (* (* 6.0 l_0_17_30) l_0_17_30)))
 (let ((?x58782 (* (* 6.0 l_0_17_29) l_0_17_29)))
 (let ((?x58771 (* (* 6.0 l_0_17_28) l_0_17_28)))
 (let ((?x62036 (* 2.0 l_0_17_178)))
 (let ((?x62037 (* ?x62036 l_0_17_187)))
 (let ((?x62033 (* 2.0 l_0_17_177)))
 (let ((?x62034 (* ?x62033 l_0_17_186)))
 (let ((?x62030 (* 2.0 l_0_17_176)))
 (let ((?x62031 (* ?x62030 l_0_17_185)))
 (let ((?x62027 (* 2.0 l_0_17_175)))
 (let ((?x62028 (* ?x62027 l_0_17_184)))
 (let ((?x62024 (* 2.0 l_0_17_157)))
 (let ((?x62025 (* ?x62024 l_0_17_166)))
 (let ((?x62021 (* 2.0 l_0_17_156)))
 (let ((?x62022 (* ?x62021 l_0_17_165)))
 (let ((?x62018 (* 2.0 l_0_17_155)))
 (let ((?x62019 (* ?x62018 l_0_17_164)))
 (let ((?x62015 (* 2.0 l_0_17_154)))
 (let ((?x62016 (* ?x62015 l_0_17_163)))
 (let ((?x62013 (* l_0_17_136 l_0_17_136)))
 (let ((?x62011 (* l_0_17_135 l_0_17_135)))
 (let ((?x62009 (* l_0_17_134 l_0_17_134)))
 (let ((?x62007 (* l_0_17_133 l_0_17_133)))
 (let ((?x62004 (* 2.0 l_0_17_115)))
 (let ((?x62005 (* ?x62004 l_0_17_124)))
 (let ((?x62001 (* 2.0 l_0_17_114)))
 (let ((?x62002 (* ?x62001 l_0_17_123)))
 (let ((?x61998 (* 2.0 l_0_17_113)))
 (let ((?x61999 (* ?x61998 l_0_17_122)))
 (let ((?x61995 (* 2.0 l_0_17_112)))
 (let ((?x61996 (* ?x61995 l_0_17_121)))
 (let ((?x61992 (* 2.0 l_0_17_103)))
 (let ((?x61993 (* ?x61992 l_0_17_94)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x61990 (* ?x61710 l_0_17_93)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x51103 (* ?x60911 l_0_17_92)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x17523 (* ?x60908 l_0_17_91)))
 (let ((?x58726 (* l_0_17_10 l_0_17_10)))
 (let ((?x58727 (* 6.0 ?x58726)))
 (let ((?x62003 (+ (+ (+ (- (- (- (- ?x58727 ?x17523) ?x51103) ?x61990) ?x61993) ?x61996) ?x61999) ?x62002)))
 (let ((?x62020 (- (- (+ (+ (+ (+ (+ ?x62003 ?x62005) ?x62007) ?x62009) ?x62011) ?x62013) ?x62016) ?x62019)))
 (let ((?x62039 (- (+ (+ (+ (+ (- (- ?x62020 ?x62022) ?x62025) ?x62028) ?x62031) ?x62034) ?x62037) ?x58771)))
 (let ((?x62045 (- (- (- (- ?x62039 ?x58782) ?x58785) ?x58788) (* (* 3.0 l_0_17_49) l_0_17_49))))
 (let ((?x62061 (+ (+ (+ (+ (- (- (- ?x62045 ?x62047) ?x62050) ?x62053) ?x58803) ?x62056) ?x62058) ?x62060)))
 (= (+ (+ (+ ?x62061 ?x62062) ?x58818) ?x58824) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59253 (* 2.0 l_0_17_73)))
 (let ((?x61362 (* ?x59253 l_0_17_82)))
 (let ((?x62223 (* 6.0 l_0_17_73)))
 (let ((?x62224 (* ?x62223 l_0_17_77)))
 (let ((?x59250 (* 2.0 l_0_17_72)))
 (let ((?x61360 (* ?x59250 l_0_17_81)))
 (let ((?x62219 (* 6.0 l_0_17_72)))
 (let ((?x62220 (* ?x62219 l_0_17_76)))
 (let ((?x59247 (* 2.0 l_0_17_71)))
 (let ((?x61358 (* ?x59247 l_0_17_80)))
 (let ((?x62215 (* 6.0 l_0_17_71)))
 (let ((?x62216 (* ?x62215 l_0_17_75)))
 (let ((?x59244 (* 2.0 l_0_17_70)))
 (let ((?x61356 (* ?x59244 l_0_17_79)))
 (let ((?x62211 (* 6.0 l_0_17_70)))
 (let ((?x62212 (* ?x62211 l_0_17_74)))
 (let ((?x59240 (* 2.0 l_0_17_52)))
 (let ((?x61352 (* ?x59240 l_0_17_61)))
 (let ((?x62207 (* 6.0 l_0_17_52)))
 (let ((?x62208 (* ?x62207 l_0_17_56)))
 (let ((?x59237 (* 2.0 l_0_17_51)))
 (let ((?x61350 (* ?x59237 l_0_17_60)))
 (let ((?x62203 (* 6.0 l_0_17_51)))
 (let ((?x62204 (* ?x62203 l_0_17_55)))
 (let ((?x59234 (* 2.0 l_0_17_50)))
 (let ((?x61348 (* ?x59234 l_0_17_59)))
 (let ((?x62199 (* 6.0 l_0_17_50)))
 (let ((?x62200 (* ?x62199 l_0_17_54)))
 (let ((?x59231 (* 2.0 l_0_17_49)))
 (let ((?x61346 (* ?x59231 l_0_17_58)))
 (let ((?x59227 (* 12.0 l_0_17_31)))
 (let ((?x59228 (* ?x59227 l_0_17_35)))
 (let ((?x59224 (* 12.0 l_0_17_30)))
 (let ((?x59225 (* ?x59224 l_0_17_34)))
 (let ((?x59221 (* 12.0 l_0_17_29)))
 (let ((?x59222 (* ?x59221 l_0_17_33)))
 (let ((?x59206 (* 12.0 l_0_17_28)))
 (let ((?x59207 (* ?x59206 l_0_17_32)))
 (let ((?x62189 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62186 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62183 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62180 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62177 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62174 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62171 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62168 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62165 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62162 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x61738 (* 2.0 l_0_17_136)))
 (let ((?x62159 (* ?x61738 l_0_17_140)))
 (let ((?x61735 (* 2.0 l_0_17_135)))
 (let ((?x62157 (* ?x61735 l_0_17_139)))
 (let ((?x61732 (* 2.0 l_0_17_134)))
 (let ((?x62155 (* ?x61732 l_0_17_138)))
 (let ((?x61729 (* 2.0 l_0_17_133)))
 (let ((?x62153 (* ?x61729 l_0_17_137)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x59152 (* ?x59151 l_0_17_9)))
 (let ((?x62150 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x59149 (* ?x59148 l_0_17_8)))
 (let ((?x62146 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62143 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62140 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x62137 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x59146 (* ?x59145 l_0_17_7)))
 (let ((?x62133 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x61992 (* 2.0 l_0_17_103)))
 (let ((?x62130 (* ?x61992 l_0_17_98)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x62128 (* ?x61710 l_0_17_97)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x62126 (* ?x60911 l_0_17_96)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x51284 (* ?x60908 l_0_17_95)))
 (let ((?x27053 (* 12.0 l_0_17_10)))
 (let ((?x59141 (* ?x27053 l_0_17_14)))
 (let ((?x62138 (+ (+ (- (- (- (- (- ?x59141 ?x51284) ?x62126) ?x62128) ?x62130) ?x62133) ?x59146) ?x62137)))
 (let ((?x62154 (+ (+ (+ (+ (+ (+ (+ ?x62138 ?x62140) ?x62143) ?x62146) ?x59149) ?x62150) ?x59152) ?x62153)))
 (let ((?x62172 (- (- (- (- (+ (+ (+ ?x62154 ?x62155) ?x62157) ?x62159) ?x62162) ?x62165) ?x62168) ?x62171)))
 (let ((?x62191 (- (+ (+ (+ (+ (+ (- ?x62172 ?x62174) ?x62177) ?x62180) ?x62183) ?x62186) ?x62189) ?x59207)))
 (let ((?x62197 (- (- (- (- ?x62191 ?x59222) ?x59225) ?x59228) (* (* 6.0 l_0_17_49) l_0_17_53))))
 (let ((?x62210 (+ (- (+ (- (+ (- (+ ?x62197 ?x61346) ?x62200) ?x61348) ?x62204) ?x61350) ?x62208) ?x61352)))
 (let ((?x62225 (+ (- (+ (- (+ (- (+ ?x62210 ?x62212) ?x61356) ?x62216) ?x61358) ?x62220) ?x61360) ?x62224)))
 (= (- ?x62225 ?x61362) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x62223 (* 6.0 l_0_17_73)))
 (let ((?x62377 (* ?x62223 l_0_17_82)))
 (let ((?x62219 (* 6.0 l_0_17_72)))
 (let ((?x62375 (* ?x62219 l_0_17_81)))
 (let ((?x62215 (* 6.0 l_0_17_71)))
 (let ((?x62373 (* ?x62215 l_0_17_80)))
 (let ((?x62211 (* 6.0 l_0_17_70)))
 (let ((?x62371 (* ?x62211 l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61354 (* ?x59425 l_0_17_70)))
 (let ((?x62207 (* 6.0 l_0_17_52)))
 (let ((?x62368 (* ?x62207 l_0_17_61)))
 (let ((?x62203 (* 6.0 l_0_17_51)))
 (let ((?x62366 (* ?x62203 l_0_17_60)))
 (let ((?x62199 (* 6.0 l_0_17_50)))
 (let ((?x62364 (* ?x62199 l_0_17_59)))
 (let ((?x62195 (* 6.0 l_0_17_49)))
 (let ((?x62362 (* ?x62195 l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61344 (* ?x59404 l_0_17_49)))
 (let ((?x59227 (* 12.0 l_0_17_31)))
 (let ((?x61342 (* ?x59227 l_0_17_40)))
 (let ((?x59224 (* 12.0 l_0_17_30)))
 (let ((?x61340 (* ?x59224 l_0_17_39)))
 (let ((?x59221 (* 12.0 l_0_17_29)))
 (let ((?x61338 (* ?x59221 l_0_17_38)))
 (let ((?x59206 (* 12.0 l_0_17_28)))
 (let ((?x61328 (* ?x59206 l_0_17_37)))
 (let ((?x62355 (* l_0_17_189 l_0_17_189)))
 (let ((?x62353 (* l_0_17_188 l_0_17_188)))
 (let ((?x62351 (* l_0_17_187 l_0_17_187)))
 (let ((?x62349 (* l_0_17_186 l_0_17_186)))
 (let ((?x62347 (* l_0_17_185 l_0_17_185)))
 (let ((?x62345 (* l_0_17_184 l_0_17_184)))
 (let ((?x61154 (* 12.0 l_0_17_18)))
 (let ((?x61293 (* ?x61154 l_0_17_9)))
 (let ((?x60265 (* 12.0 l_0_17_17)))
 (let ((?x61291 (* ?x60265 l_0_17_8)))
 (let ((?x62341 (* l_0_17_168 l_0_17_168)))
 (let ((?x62339 (* l_0_17_167 l_0_17_167)))
 (let ((?x62337 (* l_0_17_166 l_0_17_166)))
 (let ((?x62335 (* l_0_17_165 l_0_17_165)))
 (let ((?x62333 (* l_0_17_164 l_0_17_164)))
 (let ((?x62331 (* l_0_17_163 l_0_17_163)))
 (let ((?x60262 (* 12.0 l_0_17_16)))
 (let ((?x61287 (* ?x60262 l_0_17_7)))
 (let ((?x61738 (* 2.0 l_0_17_136)))
 (let ((?x61739 (* ?x61738 l_0_17_145)))
 (let ((?x61735 (* 2.0 l_0_17_135)))
 (let ((?x61736 (* ?x61735 l_0_17_144)))
 (let ((?x61732 (* 2.0 l_0_17_134)))
 (let ((?x61733 (* ?x61732 l_0_17_143)))
 (let ((?x61729 (* 2.0 l_0_17_133)))
 (let ((?x61730 (* ?x61729 l_0_17_142)))
 (let ((?x62324 (* l_0_17_126 l_0_17_126)))
 (let ((?x62322 (* l_0_17_125 l_0_17_125)))
 (let ((?x62320 (* l_0_17_124 l_0_17_124)))
 (let ((?x62318 (* l_0_17_123 l_0_17_123)))
 (let ((?x62316 (* l_0_17_122 l_0_17_122)))
 (let ((?x62314 (* l_0_17_121 l_0_17_121)))
 (let ((?x62312 (* l_0_17_105 l_0_17_105)))
 (let ((?x62310 (* l_0_17_104 l_0_17_104)))
 (let ((?x62308 (* l_0_17_103 l_0_17_103)))
 (let ((?x62306 (* l_0_17_102 l_0_17_102)))
 (let ((?x62304 (* l_0_17_101 l_0_17_101)))
 (let ((?x40472 (* l_0_17_100 l_0_17_100)))
 (let ((?x27053 (* 12.0 l_0_17_10)))
 (let ((?x37038 (* ?x27053 l_0_17_19)))
 (let ((?x62315 (+ (- (- (- (- (- (- ?x37038 ?x40472) ?x62304) ?x62306) ?x62308) ?x62310) ?x62312) ?x62314)))
 (let ((?x62327 (+ (+ (+ (+ (+ (+ (+ ?x62315 ?x62316) ?x62318) ?x62320) ?x62322) ?x62324) ?x61730) ?x61733)))
 (let ((?x62338 (- (- (- (- (+ (+ (+ ?x62327 ?x61736) ?x61739) ?x61287) ?x62331) ?x62333) ?x62335) ?x62337)))
 (let ((?x62350 (+ (+ (+ (+ (+ (- (- ?x62338 ?x62339) ?x62341) ?x61291) ?x61293) ?x62345) ?x62347) ?x62349)))
 (let ((?x62360 (- (- (- (- (+ (+ (+ ?x62350 ?x62351) ?x62353) ?x62355) ?x61328) ?x61338) ?x61340) ?x61342)))
 (let ((?x62372 (+ (+ (- (- (- (- (- ?x62360 ?x61344) ?x62362) ?x62364) ?x62366) ?x62368) ?x61354) ?x62371)))
 (= (+ (+ (+ ?x62372 ?x62373) ?x62375) ?x62377) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59061 (* l_0_17_78 l_0_17_78)))
 (let ((?x62472 (* 3.0 ?x59061)))
 (let ((?x61531 (* (* 2.0 l_0_17_78) l_0_17_83)))
 (let ((?x59058 (* l_0_17_77 l_0_17_77)))
 (let ((?x62469 (* 3.0 ?x59058)))
 (let ((?x61528 (* (* 2.0 l_0_17_77) l_0_17_82)))
 (let ((?x59055 (* l_0_17_76 l_0_17_76)))
 (let ((?x62466 (* 3.0 ?x59055)))
 (let ((?x61525 (* (* 2.0 l_0_17_76) l_0_17_81)))
 (let ((?x59052 (* l_0_17_75 l_0_17_75)))
 (let ((?x62463 (* 3.0 ?x59052)))
 (let ((?x61522 (* (* 2.0 l_0_17_75) l_0_17_80)))
 (let ((?x59049 (* l_0_17_74 l_0_17_74)))
 (let ((?x62460 (* 3.0 ?x59049)))
 (let ((?x61519 (* (* 2.0 l_0_17_74) l_0_17_79)))
 (let ((?x62457 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x61513 (* (* 2.0 l_0_17_57) l_0_17_62)))
 (let ((?x62453 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x61510 (* (* 2.0 l_0_17_56) l_0_17_61)))
 (let ((?x62449 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x61507 (* (* 2.0 l_0_17_55) l_0_17_60)))
 (let ((?x62445 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x61504 (* (* 2.0 l_0_17_54) l_0_17_59)))
 (let ((?x61501 (* (* 2.0 l_0_17_53) l_0_17_58)))
 (let ((?x59030 (* (* 6.0 l_0_17_36) l_0_17_36)))
 (let ((?x59027 (* (* 6.0 l_0_17_35) l_0_17_35)))
 (let ((?x59024 (* (* 6.0 l_0_17_34) l_0_17_34)))
 (let ((?x59021 (* (* 6.0 l_0_17_33) l_0_17_33)))
 (let ((?x59018 (* (* 6.0 l_0_17_32) l_0_17_32)))
 (let ((?x58964 (* l_0_17_15 l_0_17_15)))
 (let ((?x58965 (* 6.0 ?x58964)))
 (let ((?x62431 (* l_0_17_141 l_0_17_141)))
 (let ((?x62429 (* l_0_17_140 l_0_17_140)))
 (let ((?x58961 (* l_0_17_14 l_0_17_14)))
 (let ((?x58962 (* 6.0 ?x58961)))
 (let ((?x62426 (* l_0_17_139 l_0_17_139)))
 (let ((?x51535 (* l_0_17_138 l_0_17_138)))
 (let ((?x30187 (* l_0_17_137 l_0_17_137)))
 (let ((?x58958 (* l_0_17_13 l_0_17_13)))
 (let ((?x58959 (* 6.0 ?x58958)))
 (let ((?x58955 (* l_0_17_12 l_0_17_12)))
 (let ((?x58956 (* 6.0 ?x58955)))
 (let ((?x58952 (* l_0_17_11 l_0_17_11)))
 (let ((?x58953 (* 6.0 ?x58952)))
 (let ((?x62430 (+ (+ (+ (+ (+ (+ (+ ?x58953 ?x58956) ?x58959) ?x30187) ?x51535) ?x62426) ?x58962) ?x62429)))
 (let ((?x62438 (- (- (- (- (- (+ (+ ?x62430 ?x62431) ?x58965) ?x59018) ?x59021) ?x59024) ?x59027) ?x59030)))
 (let ((?x62446 (- (+ (- (+ ?x62438 ?x61501) (* (* 3.0 l_0_17_53) l_0_17_53)) ?x61504) ?x62445)))
 (let ((?x62459 (- (- (+ (- (+ (- (+ ?x62446 ?x61507) ?x62449) ?x61510) ?x62453) ?x61513) ?x62457) ?x61519)))
 (let ((?x62470 (+ (- (+ (- (+ (- (+ ?x62459 ?x62460) ?x61522) ?x62463) ?x61525) ?x62466) ?x61528) ?x62469)))
 (= (+ (- ?x62470 ?x61531) ?x62472) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59443 (* l_0_17_84 l_0_17_84)))
 (let ((?x59440 (* l_0_17_83 l_0_17_83)))
 (let ((?x59437 (* l_0_17_82 l_0_17_82)))
 (let ((?x59434 (* l_0_17_81 l_0_17_81)))
 (let ((?x59431 (* l_0_17_80 l_0_17_80)))
 (let ((?x59428 (* l_0_17_79 l_0_17_79)))
 (let ((?x62525 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x62522 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x62519 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x62516 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x62513 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x59425 (* 6.0 l_0_17_64)))
 (let ((?x61515 (* ?x59425 l_0_17_74)))
 (let ((?x49004 (* l_0_17_63 l_0_17_63)))
 (let ((?x49002 (* l_0_17_62 l_0_17_62)))
 (let ((?x48999 (* l_0_17_61 l_0_17_61)))
 (let ((?x27585 (* l_0_17_60 l_0_17_60)))
 (let ((?x13590 (* l_0_17_59 l_0_17_59)))
 (let ((?x13996 (* l_0_17_58 l_0_17_58)))
 (let ((?x62503 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x62500 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x62497 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x62494 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x62491 (* (* 6.0 l_0_17_53) l_0_17_58)))
 (let ((?x59404 (* 6.0 l_0_17_43)))
 (let ((?x61497 (* ?x59404 l_0_17_53)))
 (let ((?x61495 (* (* 12.0 l_0_17_36) l_0_17_41)))
 (let ((?x61492 (* (* 12.0 l_0_17_35) l_0_17_40)))
 (let ((?x61489 (* (* 12.0 l_0_17_34) l_0_17_39)))
 (let ((?x61486 (* (* 12.0 l_0_17_33) l_0_17_38)))
 (let ((?x61483 (* (* 12.0 l_0_17_32) l_0_17_37)))
 (let ((?x61404 (* (* 12.0 l_0_17_15) l_0_17_20)))
 (let ((?x61881 (* (* 2.0 l_0_17_141) l_0_17_146)))
 (let ((?x61878 (* (* 2.0 l_0_17_140) l_0_17_145)))
 (let ((?x61401 (* (* 12.0 l_0_17_14) l_0_17_19)))
 (let ((?x61875 (* (* 2.0 l_0_17_139) l_0_17_144)))
 (let ((?x61872 (* (* 2.0 l_0_17_138) l_0_17_143)))
 (let ((?x61869 (* (* 2.0 l_0_17_137) l_0_17_142)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x61398 (* ?x59151 l_0_17_18)))
 (let ((?x59148 (* 12.0 l_0_17_12)))
 (let ((?x50377 (* ?x59148 l_0_17_17)))
 (let ((?x59145 (* 12.0 l_0_17_11)))
 (let ((?x50380 (* ?x59145 l_0_17_16)))
 (let ((?x62481 (+ (+ (+ (+ (+ (+ (+ ?x50380 ?x50377) ?x61398) ?x61869) ?x61872) ?x61875) ?x61401) ?x61878)))
 (let ((?x62488 (- (- (- (- (- (+ (+ ?x62481 ?x61881) ?x61404) ?x61483) ?x61486) ?x61489) ?x61492) ?x61495)))
 (let ((?x62505 (+ (- (- (- (- (- (- ?x62488 ?x61497) ?x62491) ?x62494) ?x62497) ?x62500) ?x62503) ?x13996)))
 (let ((?x62514 (+ (+ (+ (+ (+ (+ (+ ?x62505 ?x13590) ?x27585) ?x48999) ?x49002) ?x49004) ?x61515) ?x62513)))
 (let ((?x62529 (- (- (- (+ (+ (+ (+ ?x62514 ?x62516) ?x62519) ?x62522) ?x62525) ?x59428) ?x59431) ?x59434)))
 (= (- (- (- ?x62529 ?x59437) ?x59440) ?x59443) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x62564 (* ?x58685 l_0_17_67)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x62562 (* ?x58682 l_0_17_46)))
 (let ((?x58670 (* 12.0 l_0_17_22)))
 (let ((?x61175 (* ?x58670 l_0_17_25)))
 (let ((?x51894 (- (- (* (* 12.0 l_0_17_1) l_0_17_4) (* l_0_17_127 l_0_17_127)) (* (* 2.0 l_0_17_190) l_0_17_193))))
 (let ((?x62557 (- (- (- ?x51894 (* (* 2.0 l_0_17_211) l_0_17_214)) ?x61175) (* (* 2.0 l_0_17_232) l_0_17_235))))
 (let ((?x62561 (- (- ?x62557 (* (* 2.0 l_0_17_253) l_0_17_256)) (* (* 2.0 l_0_17_274) l_0_17_277))))
 (= (+ (- ?x62561 ?x62562) ?x62564) 0.0)))))))))))
(assert
 (let ((?x60550 (* l_0_17_6 l_0_17_6)))
 (let ((?x61671 (* 6.0 ?x60550)))
 (let ((?x60548 (* l_0_17_5 l_0_17_5)))
 (let ((?x61669 (* 6.0 ?x60548)))
 (let ((?x60546 (* l_0_17_4 l_0_17_4)))
 (let ((?x61658 (* 6.0 ?x60546)))
 (let ((?x62608 (* l_0_17_279 l_0_17_279)))
 (let ((?x62606 (* l_0_17_278 l_0_17_278)))
 (let ((?x62604 (* l_0_17_277 l_0_17_277)))
 (let ((?x61656 (* (* 6.0 l_0_17_27) l_0_17_27)))
 (let ((?x61653 (* (* 6.0 l_0_17_26) l_0_17_26)))
 (let ((?x62600 (* l_0_17_258 l_0_17_258)))
 (let ((?x62598 (* l_0_17_257 l_0_17_257)))
 (let ((?x62596 (* l_0_17_256 l_0_17_256)))
 (let ((?x61650 (* (* 6.0 l_0_17_25) l_0_17_25)))
 (let ((?x62593 (* l_0_17_237 l_0_17_237)))
 (let ((?x62591 (* l_0_17_236 l_0_17_236)))
 (let ((?x62589 (* l_0_17_235 l_0_17_235)))
 (let ((?x62587 (* l_0_17_216 l_0_17_216)))
 (let ((?x62585 (* l_0_17_215 l_0_17_215)))
 (let ((?x62583 (* l_0_17_214 l_0_17_214)))
 (let ((?x62581 (* l_0_17_195 l_0_17_195)))
 (let ((?x62579 (* l_0_17_194 l_0_17_194)))
 (let ((?x62577 (* l_0_17_193 l_0_17_193)))
 (let ((?x62584 (- (- (- (- (* (* (- 2.0) l_0_17_127) l_0_17_130) ?x62577) ?x62579) ?x62581) ?x62583)))
 (let ((?x62597 (- (- (- (- (- (- (- ?x62584 ?x62585) ?x62587) ?x62589) ?x62591) ?x62593) ?x61650) ?x62596)))
 (let ((?x62609 (- (- (- (- (- (- (- ?x62597 ?x62598) ?x62600) ?x61653) ?x61656) ?x62604) ?x62606) ?x62608)))
 (let ((?x62616 (- (- (+ ?x62609 ?x61658) (* (* 1.0 l_0_17_46) l_0_17_46)) (* (* 1.0 l_0_17_47) l_0_17_47))))
 (let ((?x62623 (+ (+ (+ (- ?x62616 (* (* 1.0 l_0_17_48) l_0_17_48)) ?x61669) ?x61671) (* 1.0 (* l_0_17_67 l_0_17_67)))))
 (let ((?x62627 (+ (+ ?x62623 (* 1.0 (* l_0_17_68 l_0_17_68))) (* 1.0 (* l_0_17_69 l_0_17_69)))))
 (= ?x62627 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x62714 (* ?x58820 l_0_17_88)))
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x62712 (* ?x61232 l_0_17_72)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x62710 (* ?x61229 l_0_17_71)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x62708 (* ?x61226 l_0_17_70)))
 (let ((?x61781 (* (* 12.0 l_0_17_6) l_0_17_9)))
 (let ((?x61778 (* (* 12.0 l_0_17_5) l_0_17_8)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x62704 (* ?x61221 l_0_17_51)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x62702 (* ?x61218 l_0_17_50)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x62700 (* ?x61215 l_0_17_49)))
 (let ((?x61766 (* (* 12.0 l_0_17_4) l_0_17_7)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61763 (* ?x61201 l_0_17_30)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61761 (* ?x61198 l_0_17_29)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61759 (* ?x61186 l_0_17_28)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x62664 (* ?x58735 l_0_17_172)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x62662 (* ?x58732 l_0_17_151)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x61283 (* ?x59519 l_0_17_133)))
 (let ((?x62667 (- (+ (- (- (* (* 2.0 l_0_17_106) l_0_17_109) ?x61283) ?x62662) ?x62664) (* (* 2.0 l_0_17_193) l_0_17_196))))
 (let ((?x62671 (- (- ?x62667 (* (* 2.0 l_0_17_194) l_0_17_197)) (* (* 2.0 l_0_17_195) l_0_17_198))))
 (let ((?x62675 (- (- ?x62671 (* (* 2.0 l_0_17_214) l_0_17_217)) (* (* 2.0 l_0_17_215) l_0_17_218))))
 (let ((?x62679 (- (- ?x62675 (* (* 2.0 l_0_17_216) l_0_17_219)) (* (* 2.0 l_0_17_235) l_0_17_238))))
 (let ((?x62683 (- (- ?x62679 (* (* 2.0 l_0_17_236) l_0_17_239)) (* (* 2.0 l_0_17_237) l_0_17_240))))
 (let ((?x62688 (- (- (- ?x62683 ?x61759) (* (* 2.0 l_0_17_256) l_0_17_259)) (* (* 2.0 l_0_17_257) l_0_17_260))))
 (let ((?x62694 (- (- (- (- ?x62688 (* (* 2.0 l_0_17_258) l_0_17_261)) ?x61761) ?x61763) (* (* 2.0 l_0_17_277) l_0_17_280))))
 (let ((?x62698 (- (- ?x62694 (* (* 2.0 l_0_17_278) l_0_17_281)) (* (* 2.0 l_0_17_279) l_0_17_282))))
 (let ((?x62709 (+ (+ (+ (- (- (- (+ ?x62698 ?x61766) ?x62700) ?x62702) ?x62704) ?x61778) ?x61781) ?x62708)))
 (= (- (+ (+ ?x62709 ?x62710) ?x62712) ?x62714) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x62800 (* ?x61232 l_0_17_76)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x62798 (* ?x61229 l_0_17_75)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x62796 (* ?x61226 l_0_17_74)))
 (let ((?x58685 (* 2.0 l_0_17_64)))
 (let ((?x62564 (* ?x58685 l_0_17_67)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x62793 (* ?x61221 l_0_17_55)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x62791 (* ?x61218 l_0_17_54)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x62789 (* ?x61215 l_0_17_53)))
 (let ((?x58682 (* 2.0 l_0_17_43)))
 (let ((?x62562 (* ?x58682 l_0_17_46)))
 (let ((?x61201 (* 12.0 l_0_17_27)))
 (let ((?x61887 (* ?x61201 l_0_17_34)))
 (let ((?x61198 (* 12.0 l_0_17_26)))
 (let ((?x61885 (* ?x61198 l_0_17_33)))
 (let ((?x61186 (* 12.0 l_0_17_25)))
 (let ((?x61883 (* ?x61186 l_0_17_32)))
 (let ((?x59151 (* 12.0 l_0_17_13)))
 (let ((?x61860 (* ?x59151 l_0_17_6)))
 (let ((?x59519 (* 2.0 l_0_17_127)))
 (let ((?x16667 (* ?x59519 l_0_17_137)))
 (let ((?x61859 (+ (* (* 12.0 l_0_17_11) l_0_17_4) (* (* 12.0 l_0_17_12) l_0_17_5))))
 (let ((?x62758 (- (- (+ (- ?x61859 ?x16667) ?x61860) (* (* 2.0 l_0_17_193) l_0_17_200)) (* (* 2.0 l_0_17_194) l_0_17_201))))
 (let ((?x62762 (- (- ?x62758 (* (* 2.0 l_0_17_195) l_0_17_202)) (* (* 2.0 l_0_17_214) l_0_17_221))))
 (let ((?x62766 (- (- ?x62762 (* (* 2.0 l_0_17_215) l_0_17_222)) (* (* 2.0 l_0_17_216) l_0_17_223))))
 (let ((?x62770 (- (- ?x62766 (* (* 2.0 l_0_17_235) l_0_17_242)) (* (* 2.0 l_0_17_236) l_0_17_243))))
 (let ((?x62775 (- (- (- ?x62770 (* (* 2.0 l_0_17_237) l_0_17_244)) ?x61883) (* (* 2.0 l_0_17_256) l_0_17_263))))
 (let ((?x62779 (- (- ?x62775 (* (* 2.0 l_0_17_257) l_0_17_264)) (* (* 2.0 l_0_17_258) l_0_17_265))))
 (let ((?x62785 (- (- (- (- ?x62779 ?x61885) ?x61887) (* (* 2.0 l_0_17_277) l_0_17_284)) (* (* 2.0 l_0_17_278) l_0_17_285))))
 (let ((?x62792 (- (- (+ (- ?x62785 (* (* 2.0 l_0_17_279) l_0_17_286)) ?x62562) ?x62789) ?x62791)))
 (= (+ (+ (+ (- (- ?x62792 ?x62793) ?x62564) ?x62796) ?x62798) ?x62800) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59830 (* l_0_17_66 l_0_17_66)))
 (let ((?x60512 (* 3.0 ?x59830)))
 (let ((?x59827 (* l_0_17_65 l_0_17_65)))
 (let ((?x60510 (* 3.0 ?x59827)))
 (let ((?x60508 (* (* 3.0 l_0_17_45) l_0_17_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_17_44) l_0_17_44) ?x60508) ?x60510) ?x60512) 0.0)))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x60765 (* ?x60764 l_0_17_68)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x60762 (* ?x60761 l_0_17_67)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x60759 (* ?x60758 l_0_17_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_17_44) l_0_17_46) ?x60759) ?x60762) ?x60765) 0.0))))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x60952 (* ?x60764 l_0_17_71)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x60950 (* ?x60761 l_0_17_70)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x60948 (* ?x60758 l_0_17_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_17_44) l_0_17_49) ?x60948) ?x60950) ?x60952) 0.0))))))))
(assert
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x61051 (* ?x60764 l_0_17_75)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x61048 (* ?x60761 l_0_17_74)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x61045 (* ?x60758 l_0_17_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_17_44) l_0_17_53) ?x61045) ?x61048) ?x61051) 0.0))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x60057 (* ?x58820 l_0_17_86)))
 (let ((?x60764 (* 6.0 l_0_17_66)))
 (let ((?x61114 (* ?x60764 l_0_17_80)))
 (let ((?x60761 (* 6.0 l_0_17_65)))
 (let ((?x61112 (* ?x60761 l_0_17_79)))
 (let ((?x60758 (* 6.0 l_0_17_45)))
 (let ((?x61109 (* ?x60758 l_0_17_59)))
 (let ((?x60755 (* 6.0 l_0_17_44)))
 (let ((?x61107 (* ?x60755 l_0_17_58)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x60017 (* ?x58735 l_0_17_170)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x60015 (* ?x58732 l_0_17_149)))
 (let ((?x62899 (- (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_107) ?x60015) ?x60017) ?x61107) ?x61109)))
 (= (+ (+ (+ ?x62899 ?x61112) ?x61114) ?x60057) 0.0)))))))))))))))))
(assert
 (let ((?x61679 (* l_0_17_69 l_0_17_69)))
 (let ((?x61680 (* 3.0 ?x61679)))
 (let ((?x61676 (* l_0_17_68 l_0_17_68)))
 (let ((?x61677 (* 3.0 ?x61676)))
 (let ((?x61673 (* l_0_17_67 l_0_17_67)))
 (let ((?x61674 (* 3.0 ?x61673)))
 (let ((?x61667 (* (* 3.0 l_0_17_48) l_0_17_48)))
 (let ((?x61664 (* (* 3.0 l_0_17_47) l_0_17_47)))
 (let ((?x30621 (+ (+ (- (- (* (* (- 3.0) l_0_17_46) l_0_17_46) ?x61664) ?x61667) ?x61674) ?x61677)))
 (= (+ ?x30621 ?x61680) 0.0)))))))))))
(assert
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61790 (* ?x61789 l_0_17_72)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61787 (* ?x61786 l_0_17_71)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61784 (* ?x61783 l_0_17_70)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61775 (* ?x61774 l_0_17_51)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61772 (* ?x61771 l_0_17_50)))
 (let ((?x62912 (+ (+ (- (- (* (* (- 6.0) l_0_17_46) l_0_17_49) ?x61772) ?x61775) ?x61784) ?x61787)))
 (= (+ ?x62912 ?x61790) 0.0)))))))))))))
(assert
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61904 (* ?x61789 l_0_17_76)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61901 (* ?x61786 l_0_17_75)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61898 (* ?x61783 l_0_17_74)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61895 (* ?x61774 l_0_17_55)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61892 (* ?x61771 l_0_17_54)))
 (let ((?x62924 (+ (+ (- (- (* (* (- 6.0) l_0_17_46) l_0_17_53) ?x61892) ?x61895) ?x61898) ?x61901)))
 (= (+ ?x62924 ?x61904) 0.0)))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x62714 (* ?x58820 l_0_17_88)))
 (let ((?x61789 (* 6.0 l_0_17_69)))
 (let ((?x61971 (* ?x61789 l_0_17_81)))
 (let ((?x61786 (* 6.0 l_0_17_68)))
 (let ((?x61969 (* ?x61786 l_0_17_80)))
 (let ((?x61783 (* 6.0 l_0_17_67)))
 (let ((?x61967 (* ?x61783 l_0_17_79)))
 (let ((?x61774 (* 6.0 l_0_17_48)))
 (let ((?x61964 (* ?x61774 l_0_17_60)))
 (let ((?x61771 (* 6.0 l_0_17_47)))
 (let ((?x61962 (* ?x61771 l_0_17_59)))
 (let ((?x61768 (* 6.0 l_0_17_46)))
 (let ((?x61960 (* ?x61768 l_0_17_58)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x62664 (* ?x58735 l_0_17_172)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x62662 (* ?x58732 l_0_17_151)))
 (let ((?x62929 (- (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_109) ?x62662) ?x62664) ?x61960) ?x61962)))
 (= (+ (+ (+ (+ (- ?x62929 ?x61964) ?x61967) ?x61969) ?x61971) ?x62714) 0.0)))))))))))))))))))))
(assert
 (let ((?x58814 (* l_0_17_73 l_0_17_73)))
 (let ((?x62062 (* 3.0 ?x58814)))
 (let ((?x58811 (* l_0_17_72 l_0_17_72)))
 (let ((?x62060 (* 3.0 ?x58811)))
 (let ((?x58808 (* l_0_17_71 l_0_17_71)))
 (let ((?x62058 (* 3.0 ?x58808)))
 (let ((?x58805 (* l_0_17_70 l_0_17_70)))
 (let ((?x62056 (* 3.0 ?x58805)))
 (let ((?x62053 (* (* 3.0 l_0_17_52) l_0_17_52)))
 (let ((?x62050 (* (* 3.0 l_0_17_51) l_0_17_51)))
 (let ((?x62047 (* (* 3.0 l_0_17_50) l_0_17_50)))
 (let ((?x62947 (+ (- (- (- (* (* (- 3.0) l_0_17_49) l_0_17_49) ?x62047) ?x62050) ?x62053) ?x62056)))
 (= (+ (+ (+ ?x62947 ?x62058) ?x62060) ?x62062) 0.0))))))))))))))
(assert
 (let ((?x62223 (* 6.0 l_0_17_73)))
 (let ((?x62224 (* ?x62223 l_0_17_77)))
 (let ((?x62219 (* 6.0 l_0_17_72)))
 (let ((?x62220 (* ?x62219 l_0_17_76)))
 (let ((?x62215 (* 6.0 l_0_17_71)))
 (let ((?x62216 (* ?x62215 l_0_17_75)))
 (let ((?x62211 (* 6.0 l_0_17_70)))
 (let ((?x62212 (* ?x62211 l_0_17_74)))
 (let ((?x62207 (* 6.0 l_0_17_52)))
 (let ((?x62208 (* ?x62207 l_0_17_56)))
 (let ((?x62203 (* 6.0 l_0_17_51)))
 (let ((?x62204 (* ?x62203 l_0_17_55)))
 (let ((?x62199 (* 6.0 l_0_17_50)))
 (let ((?x62200 (* ?x62199 l_0_17_54)))
 (let ((?x62959 (+ (- (- (- (* (* (- 6.0) l_0_17_49) l_0_17_53) ?x62200) ?x62204) ?x62208) ?x62212)))
 (= (+ (+ (+ ?x62959 ?x62216) ?x62220) ?x62224) 0.0)))))))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x58821 (* ?x58820 l_0_17_91)))
 (let ((?x62223 (* 6.0 l_0_17_73)))
 (let ((?x62377 (* ?x62223 l_0_17_82)))
 (let ((?x62219 (* 6.0 l_0_17_72)))
 (let ((?x62375 (* ?x62219 l_0_17_81)))
 (let ((?x62215 (* 6.0 l_0_17_71)))
 (let ((?x62373 (* ?x62215 l_0_17_80)))
 (let ((?x62211 (* 6.0 l_0_17_70)))
 (let ((?x62371 (* ?x62211 l_0_17_79)))
 (let ((?x62207 (* 6.0 l_0_17_52)))
 (let ((?x62368 (* ?x62207 l_0_17_61)))
 (let ((?x62203 (* 6.0 l_0_17_51)))
 (let ((?x62366 (* ?x62203 l_0_17_60)))
 (let ((?x62199 (* 6.0 l_0_17_50)))
 (let ((?x62364 (* ?x62199 l_0_17_59)))
 (let ((?x62195 (* 6.0 l_0_17_49)))
 (let ((?x62362 (* ?x62195 l_0_17_58)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x58736 (* ?x58735 l_0_17_175)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x58733 (* ?x58732 l_0_17_154)))
 (let ((?x62977 (- (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_112) ?x58733) ?x58736) ?x62362) ?x62364)))
 (let ((?x62984 (+ (+ (+ (+ (+ (- (- ?x62977 ?x62366) ?x62368) ?x62371) ?x62373) ?x62375) ?x62377) ?x58821)))
 (= ?x62984 0.0))))))))))))))))))))))))))
(assert
 (let ((?x59061 (* l_0_17_78 l_0_17_78)))
 (let ((?x62472 (* 3.0 ?x59061)))
 (let ((?x59058 (* l_0_17_77 l_0_17_77)))
 (let ((?x62469 (* 3.0 ?x59058)))
 (let ((?x59055 (* l_0_17_76 l_0_17_76)))
 (let ((?x62466 (* 3.0 ?x59055)))
 (let ((?x59052 (* l_0_17_75 l_0_17_75)))
 (let ((?x62463 (* 3.0 ?x59052)))
 (let ((?x59049 (* l_0_17_74 l_0_17_74)))
 (let ((?x62460 (* 3.0 ?x59049)))
 (let ((?x62457 (* (* 3.0 l_0_17_57) l_0_17_57)))
 (let ((?x62453 (* (* 3.0 l_0_17_56) l_0_17_56)))
 (let ((?x62449 (* (* 3.0 l_0_17_55) l_0_17_55)))
 (let ((?x62445 (* (* 3.0 l_0_17_54) l_0_17_54)))
 (let ((?x62994 (- (- (- (- (* (* (- 3.0) l_0_17_53) l_0_17_53) ?x62445) ?x62449) ?x62453) ?x62457)))
 (= (+ (+ (+ (+ (+ ?x62994 ?x62460) ?x62463) ?x62466) ?x62469) ?x62472) 0.0)))))))))))))))))
(assert
 (let ((?x58820 (* 2.0 l_0_17_85)))
 (let ((?x59256 (* ?x58820 l_0_17_95)))
 (let ((?x62525 (* (* 6.0 l_0_17_78) l_0_17_83)))
 (let ((?x62522 (* (* 6.0 l_0_17_77) l_0_17_82)))
 (let ((?x62519 (* (* 6.0 l_0_17_76) l_0_17_81)))
 (let ((?x62516 (* (* 6.0 l_0_17_75) l_0_17_80)))
 (let ((?x62513 (* (* 6.0 l_0_17_74) l_0_17_79)))
 (let ((?x62503 (* (* 6.0 l_0_17_57) l_0_17_62)))
 (let ((?x62500 (* (* 6.0 l_0_17_56) l_0_17_61)))
 (let ((?x62497 (* (* 6.0 l_0_17_55) l_0_17_60)))
 (let ((?x62494 (* (* 6.0 l_0_17_54) l_0_17_59)))
 (let ((?x62491 (* (* 6.0 l_0_17_53) l_0_17_58)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x59156 (* ?x58735 l_0_17_179)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x59154 (* ?x58732 l_0_17_158)))
 (let ((?x63008 (- (- (- (+ (* (* (- 2.0) l_0_17_106) l_0_17_116) ?x59154) ?x59156) ?x62491) ?x62494)))
 (let ((?x63015 (+ (+ (+ (+ (- (- (- ?x63008 ?x62497) ?x62500) ?x62503) ?x62513) ?x62516) ?x62519) ?x62522)))
 (= (+ (+ ?x63015 ?x62525) ?x59256) 0.0))))))))))))))))))))
(assert
 (let ((?x59443 (* l_0_17_84 l_0_17_84)))
 (let ((?x59444 (* 3.0 ?x59443)))
 (let ((?x59440 (* l_0_17_83 l_0_17_83)))
 (let ((?x59441 (* 3.0 ?x59440)))
 (let ((?x59437 (* l_0_17_82 l_0_17_82)))
 (let ((?x59438 (* 3.0 ?x59437)))
 (let ((?x59434 (* l_0_17_81 l_0_17_81)))
 (let ((?x59435 (* 3.0 ?x59434)))
 (let ((?x59431 (* l_0_17_80 l_0_17_80)))
 (let ((?x59432 (* 3.0 ?x59431)))
 (let ((?x59428 (* l_0_17_79 l_0_17_79)))
 (let ((?x59429 (* 3.0 ?x59428)))
 (let ((?x59423 (* (* 3.0 l_0_17_63) l_0_17_63)))
 (let ((?x59420 (* (* 3.0 l_0_17_62) l_0_17_62)))
 (let ((?x59417 (* (* 3.0 l_0_17_61) l_0_17_61)))
 (let ((?x59414 (* (* 3.0 l_0_17_60) l_0_17_60)))
 (let ((?x59411 (* (* 3.0 l_0_17_59) l_0_17_59)))
 (let ((?x59408 (* (* 3.0 l_0_17_58) l_0_17_58)))
 (let ((?x58735 (* 2.0 l_0_17_169)))
 (let ((?x61289 (* ?x58735 l_0_17_184)))
 (let ((?x58732 (* 2.0 l_0_17_148)))
 (let ((?x61285 (* ?x58732 l_0_17_163)))
 (let ((?x58729 (* 2.0 l_0_17_106)))
 (let ((?x49978 (* ?x58729 l_0_17_121)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x50030 (* ?x60908 l_0_17_85)))
 (let ((?x63031 (- (- (- (- (- (+ (- ?x50030 ?x49978) ?x61285) ?x61289) ?x59408) ?x59411) ?x59414) ?x59417)))
 (let ((?x63038 (+ (+ (+ (+ (+ (- (- ?x63031 ?x59420) ?x59423) ?x59429) ?x59432) ?x59435) ?x59438) ?x59441)))
 (= (+ ?x63038 ?x59444) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x61679 (* l_0_17_69 l_0_17_69)))
 (let ((?x61676 (* l_0_17_68 l_0_17_68)))
 (let ((?x61673 (* l_0_17_67 l_0_17_67)))
 (let ((?x29901 (* l_0_17_48 l_0_17_48)))
 (let ((?x50791 (* l_0_17_47 l_0_17_47)))
 (let ((?x40287 (* l_0_17_46 l_0_17_46)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61866 (* ?x61644 l_0_17_139)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61864 (* ?x61624 l_0_17_138)))
 (let ((?x52719 (+ (+ (- (- (* (* (- 2.0) l_0_17_130) l_0_17_137) ?x61864) ?x61866) ?x40287) ?x50791)))
 (= (- (- (- (+ ?x52719 ?x29901) ?x61673) ?x61676) ?x61679) 0.0)))))))))))))
(assert
 (let ((?x63070 (* 2.0 l_0_17_90)))
 (let ((?x63071 (* ?x63070 l_0_17_97)))
 (let ((?x63067 (* 2.0 l_0_17_89)))
 (let ((?x63068 (* ?x63067 l_0_17_96)))
 (let ((?x63064 (* 2.0 l_0_17_88)))
 (let ((?x63065 (* ?x63064 l_0_17_95)))
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x62712 (* ?x61232 l_0_17_72)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x62710 (* ?x61229 l_0_17_71)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x62708 (* ?x61226 l_0_17_70)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x62704 (* ?x61221 l_0_17_51)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x62702 (* ?x61218 l_0_17_50)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x62700 (* ?x61215 l_0_17_49)))
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x63056 (* ?x61756 l_0_17_181)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x63054 (* ?x61753 l_0_17_180)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x63052 (* ?x61750 l_0_17_179)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x63050 (* ?x61747 l_0_17_160)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x63048 (* ?x61744 l_0_17_159)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x63046 (* ?x61741 l_0_17_158)))
 (let ((?x61738 (* 2.0 l_0_17_136)))
 (let ((?x62159 (* ?x61738 l_0_17_140)))
 (let ((?x61735 (* 2.0 l_0_17_135)))
 (let ((?x62157 (* ?x61735 l_0_17_139)))
 (let ((?x61732 (* 2.0 l_0_17_134)))
 (let ((?x62155 (* ?x61732 l_0_17_138)))
 (let ((?x61729 (* 2.0 l_0_17_133)))
 (let ((?x62153 (* ?x61729 l_0_17_137)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x52775 (* ?x61719 l_0_17_118)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x51057 (* ?x61716 l_0_17_117)))
 (let ((?x52778 (- (- (+ (+ (* (* 2.0 l_0_17_109) l_0_17_116) ?x51057) ?x52775) ?x62153) ?x62155)))
 (let ((?x63055 (+ (+ (- (- (- (- (- ?x52778 ?x62157) ?x62159) ?x63046) ?x63048) ?x63050) ?x63052) ?x63054)))
 (let ((?x63063 (- (- (- (+ (+ (+ (+ ?x63055 ?x63056) ?x62700) ?x62702) ?x62704) ?x62708) ?x62710) ?x62712)))
 (= (- (- (- ?x63063 ?x63065) ?x63068) ?x63071) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x61232 (* 2.0 l_0_17_69)))
 (let ((?x62800 (* ?x61232 l_0_17_76)))
 (let ((?x61229 (* 2.0 l_0_17_68)))
 (let ((?x62798 (* ?x61229 l_0_17_75)))
 (let ((?x61226 (* 2.0 l_0_17_67)))
 (let ((?x62796 (* ?x61226 l_0_17_74)))
 (let ((?x61221 (* 2.0 l_0_17_48)))
 (let ((?x62793 (* ?x61221 l_0_17_55)))
 (let ((?x61218 (* 2.0 l_0_17_47)))
 (let ((?x62791 (* ?x61218 l_0_17_54)))
 (let ((?x61215 (* 2.0 l_0_17_46)))
 (let ((?x62789 (* ?x61215 l_0_17_53)))
 (let ((?x62431 (* l_0_17_141 l_0_17_141)))
 (let ((?x62429 (* l_0_17_140 l_0_17_140)))
 (let ((?x62426 (* l_0_17_139 l_0_17_139)))
 (let ((?x52879 (- (- (* (- l_0_17_137) l_0_17_137) (* l_0_17_138 l_0_17_138)) ?x62426)))
 (let ((?x63084 (- (- (+ (+ (+ (- (- ?x52879 ?x62429) ?x62431) ?x62789) ?x62791) ?x62793) ?x62796) ?x62798)))
 (= (- ?x63084 ?x62800) 0.0)))))))))))))))))))
(assert
 (let ((?x63126 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x63123 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x63120 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x63117 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x58814 (* l_0_17_73 l_0_17_73)))
 (let ((?x58811 (* l_0_17_72 l_0_17_72)))
 (let ((?x58808 (* l_0_17_71 l_0_17_71)))
 (let ((?x58805 (* l_0_17_70 l_0_17_70)))
 (let ((?x11741 (* l_0_17_52 l_0_17_52)))
 (let ((?x58894 (* l_0_17_51 l_0_17_51)))
 (let ((?x11814 (* l_0_17_50 l_0_17_50)))
 (let ((?x48763 (* l_0_17_49 l_0_17_49)))
 (let ((?x62036 (* 2.0 l_0_17_178)))
 (let ((?x63106 (* ?x62036 l_0_17_182)))
 (let ((?x62033 (* 2.0 l_0_17_177)))
 (let ((?x63104 (* ?x62033 l_0_17_181)))
 (let ((?x62030 (* 2.0 l_0_17_176)))
 (let ((?x63102 (* ?x62030 l_0_17_180)))
 (let ((?x62027 (* 2.0 l_0_17_175)))
 (let ((?x63100 (* ?x62027 l_0_17_179)))
 (let ((?x62024 (* 2.0 l_0_17_157)))
 (let ((?x63098 (* ?x62024 l_0_17_161)))
 (let ((?x62021 (* 2.0 l_0_17_156)))
 (let ((?x63096 (* ?x62021 l_0_17_160)))
 (let ((?x62018 (* 2.0 l_0_17_155)))
 (let ((?x63094 (* ?x62018 l_0_17_159)))
 (let ((?x62015 (* 2.0 l_0_17_154)))
 (let ((?x63092 (* ?x62015 l_0_17_158)))
 (let ((?x62004 (* 2.0 l_0_17_115)))
 (let ((?x63090 (* ?x62004 l_0_17_119)))
 (let ((?x62001 (* 2.0 l_0_17_114)))
 (let ((?x52947 (* ?x62001 l_0_17_118)))
 (let ((?x61998 (* 2.0 l_0_17_113)))
 (let ((?x52953 (* ?x61998 l_0_17_117)))
 (let ((?x63093 (- (+ (+ (+ (* (* 2.0 l_0_17_112) l_0_17_116) ?x52953) ?x52947) ?x63090) ?x63092)))
 (let ((?x63107 (+ (+ (+ (+ (- (- (- ?x63093 ?x63094) ?x63096) ?x63098) ?x63100) ?x63102) ?x63104) ?x63106)))
 (let ((?x63114 (- (- (- (+ (+ (+ (+ ?x63107 ?x48763) ?x11814) ?x58894) ?x11741) ?x58805) ?x58808) ?x58811)))
 (= (- (- (- (- (- ?x63114 ?x58814) ?x63117) ?x63120) ?x63123) ?x63126) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63201 (* l_0_17_99 l_0_17_99)))
 (let ((?x63199 (* l_0_17_98 l_0_17_98)))
 (let ((?x63197 (* l_0_17_97 l_0_17_97)))
 (let ((?x63195 (* l_0_17_96 l_0_17_96)))
 (let ((?x63193 (* l_0_17_95 l_0_17_95)))
 (let ((?x59253 (* 2.0 l_0_17_73)))
 (let ((?x59254 (* ?x59253 l_0_17_77)))
 (let ((?x59250 (* 2.0 l_0_17_72)))
 (let ((?x59251 (* ?x59250 l_0_17_76)))
 (let ((?x59247 (* 2.0 l_0_17_71)))
 (let ((?x59248 (* ?x59247 l_0_17_75)))
 (let ((?x59244 (* 2.0 l_0_17_70)))
 (let ((?x59245 (* ?x59244 l_0_17_74)))
 (let ((?x59240 (* 2.0 l_0_17_52)))
 (let ((?x59241 (* ?x59240 l_0_17_56)))
 (let ((?x59237 (* 2.0 l_0_17_51)))
 (let ((?x59238 (* ?x59237 l_0_17_55)))
 (let ((?x59234 (* 2.0 l_0_17_50)))
 (let ((?x59235 (* ?x59234 l_0_17_54)))
 (let ((?x59231 (* 2.0 l_0_17_49)))
 (let ((?x59232 (* ?x59231 l_0_17_53)))
 (let ((?x63183 (* l_0_17_183 l_0_17_183)))
 (let ((?x63181 (* l_0_17_182 l_0_17_182)))
 (let ((?x63179 (* l_0_17_181 l_0_17_181)))
 (let ((?x63177 (* l_0_17_180 l_0_17_180)))
 (let ((?x63175 (* l_0_17_179 l_0_17_179)))
 (let ((?x63173 (* l_0_17_162 l_0_17_162)))
 (let ((?x63171 (* l_0_17_161 l_0_17_161)))
 (let ((?x63169 (* l_0_17_160 l_0_17_160)))
 (let ((?x63167 (* l_0_17_159 l_0_17_159)))
 (let ((?x63165 (* l_0_17_158 l_0_17_158)))
 (let ((?x63163 (* l_0_17_120 l_0_17_120)))
 (let ((?x63161 (* l_0_17_119 l_0_17_119)))
 (let ((?x63159 (* l_0_17_118 l_0_17_118)))
 (let ((?x63160 (+ (+ (* l_0_17_116 l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x63159)))
 (let ((?x63174 (- (- (- (- (- (+ (+ ?x63160 ?x63161) ?x63163) ?x63165) ?x63167) ?x63169) ?x63171) ?x63173)))
 (let ((?x63186 (+ (+ (+ (+ (+ (+ (+ ?x63174 ?x63175) ?x63177) ?x63179) ?x63181) ?x63183) ?x59232) ?x59235)))
 (let ((?x63194 (- (- (- (- (- (+ (+ ?x63186 ?x59238) ?x59241) ?x59245) ?x59248) ?x59251) ?x59254) ?x63193)))
 (= (- (- (- (- ?x63194 ?x63195) ?x63197) ?x63199) ?x63201) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59061 (* l_0_17_78 l_0_17_78)))
 (let ((?x59058 (* l_0_17_77 l_0_17_77)))
 (let ((?x59055 (* l_0_17_76 l_0_17_76)))
 (let ((?x59052 (* l_0_17_75 l_0_17_75)))
 (let ((?x59049 (* l_0_17_74 l_0_17_74)))
 (let ((?x26996 (* l_0_17_57 l_0_17_57)))
 (let ((?x59133 (* l_0_17_56 l_0_17_56)))
 (let ((?x37933 (* l_0_17_55 l_0_17_55)))
 (let ((?x63214 (+ (+ (+ (* l_0_17_53 l_0_17_53) (* l_0_17_54 l_0_17_54)) ?x37933) ?x59133)))
 (= (- (- (- (- (- (+ ?x63214 ?x26996) ?x59049) ?x59052) ?x59055) ?x59058) ?x59061) 0.0)))))))))))
(assert
 (let ((?x63257 (* l_0_17_90 l_0_17_90)))
 (let ((?x63255 (* l_0_17_89 l_0_17_89)))
 (let ((?x63253 (* l_0_17_88 l_0_17_88)))
 (let ((?x63251 (* l_0_17_174 l_0_17_174)))
 (let ((?x63249 (* l_0_17_173 l_0_17_173)))
 (let ((?x63247 (* l_0_17_172 l_0_17_172)))
 (let ((?x63245 (* l_0_17_153 l_0_17_153)))
 (let ((?x63243 (* l_0_17_152 l_0_17_152)))
 (let ((?x63241 (* l_0_17_151 l_0_17_151)))
 (let ((?x61644 (* 2.0 l_0_17_132)))
 (let ((?x61727 (* ?x61644 l_0_17_135)))
 (let ((?x61624 (* 2.0 l_0_17_131)))
 (let ((?x61725 (* ?x61624 l_0_17_134)))
 (let ((?x61722 (* 2.0 l_0_17_130)))
 (let ((?x61723 (* ?x61722 l_0_17_133)))
 (let ((?x63236 (* l_0_17_111 l_0_17_111)))
 (let ((?x63237 (+ (+ (* l_0_17_109 l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x63236)))
 (let ((?x63248 (+ (- (- (- (- (- (- ?x63237 ?x61723) ?x61725) ?x61727) ?x63241) ?x63243) ?x63245) ?x63247)))
 (= (- (- (- (+ (+ ?x63248 ?x63249) ?x63251) ?x63253) ?x63255) ?x63257) 0.0))))))))))))))))))))
(assert
 (let ((?x63070 (* 2.0 l_0_17_90)))
 (let ((?x63298 (* ?x63070 l_0_17_93)))
 (let ((?x63067 (* 2.0 l_0_17_89)))
 (let ((?x63296 (* ?x63067 l_0_17_92)))
 (let ((?x63064 (* 2.0 l_0_17_88)))
 (let ((?x63294 (* ?x63064 l_0_17_91)))
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x63292 (* ?x61756 l_0_17_177)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x63290 (* ?x61753 l_0_17_176)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x63288 (* ?x61750 l_0_17_175)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x63286 (* ?x61747 l_0_17_156)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x63284 (* ?x61744 l_0_17_155)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x63282 (* ?x61741 l_0_17_154)))
 (let ((?x62013 (* l_0_17_136 l_0_17_136)))
 (let ((?x62011 (* l_0_17_135 l_0_17_135)))
 (let ((?x62009 (* l_0_17_134 l_0_17_134)))
 (let ((?x62007 (* l_0_17_133 l_0_17_133)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x63276 (* ?x61719 l_0_17_114)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x63274 (* ?x61716 l_0_17_113)))
 (let ((?x63279 (- (- (+ (+ (* (* 2.0 l_0_17_109) l_0_17_112) ?x63274) ?x63276) ?x62007) ?x62009)))
 (let ((?x63291 (+ (+ (- (- (- (- (- ?x63279 ?x62011) ?x62013) ?x63282) ?x63284) ?x63286) ?x63288) ?x63290)))
 (= (- (- (- (+ ?x63291 ?x63292) ?x63294) ?x63296) ?x63298) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63369 (* l_0_17_94 l_0_17_94)))
 (let ((?x63367 (* l_0_17_93 l_0_17_93)))
 (let ((?x63365 (* l_0_17_92 l_0_17_92)))
 (let ((?x63363 (* l_0_17_91 l_0_17_91)))
 (let ((?x63361 (* l_0_17_178 l_0_17_178)))
 (let ((?x63359 (* l_0_17_177 l_0_17_177)))
 (let ((?x63357 (* l_0_17_176 l_0_17_176)))
 (let ((?x63355 (* l_0_17_175 l_0_17_175)))
 (let ((?x63353 (* l_0_17_157 l_0_17_157)))
 (let ((?x63351 (* l_0_17_156 l_0_17_156)))
 (let ((?x63349 (* l_0_17_155 l_0_17_155)))
 (let ((?x63347 (* l_0_17_154 l_0_17_154)))
 (let ((?x63345 (* l_0_17_115 l_0_17_115)))
 (let ((?x63343 (* l_0_17_114 l_0_17_114)))
 (let ((?x63344 (+ (+ (* l_0_17_112 l_0_17_112) (* l_0_17_113 l_0_17_113)) ?x63343)))
 (let ((?x63358 (+ (+ (- (- (- (- (+ ?x63344 ?x63345) ?x63347) ?x63349) ?x63351) ?x63353) ?x63355) ?x63357)))
 (= (- (- (- (- (+ (+ ?x63358 ?x63359) ?x63361) ?x63363) ?x63365) ?x63367) ?x63369) 0.0))))))))))))))))))
(assert
 (let ((?x60441 (* l_0_17_87 l_0_17_87)))
 (let ((?x60439 (* l_0_17_86 l_0_17_86)))
 (let ((?x60429 (* l_0_17_171 l_0_17_171)))
 (let ((?x60427 (* l_0_17_170 l_0_17_170)))
 (let ((?x60425 (* l_0_17_150 l_0_17_150)))
 (let ((?x60423 (* l_0_17_149 l_0_17_149)))
 (let ((?x63379 (+ (- (* (- l_0_17_107) l_0_17_107) (* l_0_17_108 l_0_17_108)) ?x60423)))
 (= (+ (+ (- (- (+ ?x63379 ?x60425) ?x60427) ?x60429) ?x60439) ?x60441) 0.0)))))))))
(assert
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60612 (* ?x60611 l_0_17_89)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60609 (* ?x60608 l_0_17_88)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60588 (* ?x60587 l_0_17_173)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60585 (* ?x60584 l_0_17_172)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60582 (* ?x60581 l_0_17_152)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60579 (* ?x60578 l_0_17_151)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60571 (* ?x60570 l_0_17_110)))
 (let ((?x53212 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_109) ?x60571) ?x60579) ?x60582) ?x60585)))
 (= (+ (+ (- ?x53212 ?x60588) ?x60609) ?x60612) 0.0)))))))))))))))))
(assert
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60824 (* ?x60611 l_0_17_92)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60822 (* ?x60608 l_0_17_91)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60814 (* ?x60587 l_0_17_176)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60812 (* ?x60584 l_0_17_175)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60810 (* ?x60581 l_0_17_155)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60808 (* ?x60578 l_0_17_154)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60806 (* ?x60570 l_0_17_113)))
 (let ((?x63393 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_112) ?x60806) ?x60808) ?x60810) ?x60812)))
 (= (+ (+ (- ?x63393 ?x60814) ?x60822) ?x60824) 0.0)))))))))))))))))
(assert
 (let ((?x60611 (* 2.0 l_0_17_87)))
 (let ((?x60885 (* ?x60611 l_0_17_96)))
 (let ((?x60608 (* 2.0 l_0_17_86)))
 (let ((?x60883 (* ?x60608 l_0_17_95)))
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60865 (* ?x60587 l_0_17_180)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60863 (* ?x60584 l_0_17_179)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60861 (* ?x60581 l_0_17_159)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60859 (* ?x60578 l_0_17_158)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60850 (* ?x60570 l_0_17_117)))
 (let ((?x63402 (- (+ (+ (- (* (* (- 2.0) l_0_17_107) l_0_17_116) ?x60850) ?x60859) ?x60861) ?x60863)))
 (= (+ (+ (- ?x63402 ?x60865) ?x60883) ?x60885) 0.0)))))))))))))))))
(assert
 (let ((?x60587 (* 2.0 l_0_17_171)))
 (let ((?x60930 (* ?x60587 l_0_17_185)))
 (let ((?x60584 (* 2.0 l_0_17_170)))
 (let ((?x60928 (* ?x60584 l_0_17_184)))
 (let ((?x60581 (* 2.0 l_0_17_150)))
 (let ((?x60922 (* ?x60581 l_0_17_164)))
 (let ((?x60578 (* 2.0 l_0_17_149)))
 (let ((?x60920 (* ?x60578 l_0_17_163)))
 (let ((?x60570 (* 2.0 l_0_17_108)))
 (let ((?x60916 (* ?x60570 l_0_17_122)))
 (let ((?x28452 (* 2.0 l_0_17_107)))
 (let ((?x60914 (* ?x28452 l_0_17_121)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x60912 (* ?x60911 l_0_17_87)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x60909 (* ?x60908 l_0_17_86)))
 (let ((?x41784 (- (- (+ (+ (- (- (+ ?x60909 ?x60912) ?x60914) ?x60916) ?x60920) ?x60922) ?x60928) ?x60930)))
 (= ?x41784 0.0)))))))))))))))))))
(assert
 (let ((?x63257 (* l_0_17_90 l_0_17_90)))
 (let ((?x63255 (* l_0_17_89 l_0_17_89)))
 (let ((?x63253 (* l_0_17_88 l_0_17_88)))
 (let ((?x63251 (* l_0_17_174 l_0_17_174)))
 (let ((?x63249 (* l_0_17_173 l_0_17_173)))
 (let ((?x63247 (* l_0_17_172 l_0_17_172)))
 (let ((?x63245 (* l_0_17_153 l_0_17_153)))
 (let ((?x63243 (* l_0_17_152 l_0_17_152)))
 (let ((?x63241 (* l_0_17_151 l_0_17_151)))
 (let ((?x63236 (* l_0_17_111 l_0_17_111)))
 (let ((?x41875 (- (- (* (- l_0_17_109) l_0_17_109) (* l_0_17_110 l_0_17_110)) ?x63236)))
 (let ((?x63414 (+ (- (- (- (+ (+ (+ ?x41875 ?x63241) ?x63243) ?x63245) ?x63247) ?x63249) ?x63251) ?x63253)))
 (= (+ (+ ?x63414 ?x63255) ?x63257) 0.0))))))))))))))
(assert
 (let ((?x63070 (* 2.0 l_0_17_90)))
 (let ((?x63298 (* ?x63070 l_0_17_93)))
 (let ((?x63067 (* 2.0 l_0_17_89)))
 (let ((?x63296 (* ?x63067 l_0_17_92)))
 (let ((?x63064 (* 2.0 l_0_17_88)))
 (let ((?x63294 (* ?x63064 l_0_17_91)))
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x63292 (* ?x61756 l_0_17_177)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x63290 (* ?x61753 l_0_17_176)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x63288 (* ?x61750 l_0_17_175)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x63286 (* ?x61747 l_0_17_156)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x63284 (* ?x61744 l_0_17_155)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x63282 (* ?x61741 l_0_17_154)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x63276 (* ?x61719 l_0_17_114)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x63274 (* ?x61716 l_0_17_113)))
 (let ((?x53223 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_112) ?x63274) ?x63276) ?x63282) ?x63284)))
 (let ((?x63423 (+ (+ (+ (- (- (- (+ ?x53223 ?x63286) ?x63288) ?x63290) ?x63292) ?x63294) ?x63296) ?x63298)))
 (= ?x63423 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63070 (* 2.0 l_0_17_90)))
 (let ((?x63071 (* ?x63070 l_0_17_97)))
 (let ((?x63067 (* 2.0 l_0_17_89)))
 (let ((?x63068 (* ?x63067 l_0_17_96)))
 (let ((?x63064 (* 2.0 l_0_17_88)))
 (let ((?x63065 (* ?x63064 l_0_17_95)))
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x63056 (* ?x61756 l_0_17_181)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x63054 (* ?x61753 l_0_17_180)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x63052 (* ?x61750 l_0_17_179)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x63050 (* ?x61747 l_0_17_160)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x63048 (* ?x61744 l_0_17_159)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x63046 (* ?x61741 l_0_17_158)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x52775 (* ?x61719 l_0_17_118)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x51057 (* ?x61716 l_0_17_117)))
 (let ((?x20343 (+ (+ (- (- (* (* (- 2.0) l_0_17_109) l_0_17_116) ?x51057) ?x52775) ?x63046) ?x63048)))
 (let ((?x63432 (+ (+ (+ (- (- (- (+ ?x20343 ?x63050) ?x63052) ?x63054) ?x63056) ?x63065) ?x63068) ?x63071)))
 (= ?x63432 0.0))))))))))))))))))))))))))
(assert
 (let ((?x61756 (* 2.0 l_0_17_174)))
 (let ((?x61757 (* ?x61756 l_0_17_186)))
 (let ((?x61753 (* 2.0 l_0_17_173)))
 (let ((?x61754 (* ?x61753 l_0_17_185)))
 (let ((?x61750 (* 2.0 l_0_17_172)))
 (let ((?x61751 (* ?x61750 l_0_17_184)))
 (let ((?x61747 (* 2.0 l_0_17_153)))
 (let ((?x61748 (* ?x61747 l_0_17_165)))
 (let ((?x61744 (* 2.0 l_0_17_152)))
 (let ((?x61745 (* ?x61744 l_0_17_164)))
 (let ((?x61741 (* 2.0 l_0_17_151)))
 (let ((?x61742 (* ?x61741 l_0_17_163)))
 (let ((?x61719 (* 2.0 l_0_17_111)))
 (let ((?x61720 (* ?x61719 l_0_17_123)))
 (let ((?x61716 (* 2.0 l_0_17_110)))
 (let ((?x61717 (* ?x61716 l_0_17_122)))
 (let ((?x61713 (* 2.0 l_0_17_109)))
 (let ((?x61714 (* ?x61713 l_0_17_121)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x61711 (* ?x61710 l_0_17_90)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x61708 (* ?x60911 l_0_17_89)))
 (let ((?x63443 (- (- (+ (+ (* (* 2.0 l_0_17_100) l_0_17_88) ?x61708) ?x61711) ?x61714) ?x61717)))
 (let ((?x63450 (- (- (- (+ (+ (+ (- ?x63443 ?x61720) ?x61742) ?x61745) ?x61748) ?x61751) ?x61754) ?x61757)))
 (= ?x63450 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63369 (* l_0_17_94 l_0_17_94)))
 (let ((?x63367 (* l_0_17_93 l_0_17_93)))
 (let ((?x63365 (* l_0_17_92 l_0_17_92)))
 (let ((?x63363 (* l_0_17_91 l_0_17_91)))
 (let ((?x63361 (* l_0_17_178 l_0_17_178)))
 (let ((?x63359 (* l_0_17_177 l_0_17_177)))
 (let ((?x63357 (* l_0_17_176 l_0_17_176)))
 (let ((?x63355 (* l_0_17_175 l_0_17_175)))
 (let ((?x63353 (* l_0_17_157 l_0_17_157)))
 (let ((?x63351 (* l_0_17_156 l_0_17_156)))
 (let ((?x63349 (* l_0_17_155 l_0_17_155)))
 (let ((?x63347 (* l_0_17_154 l_0_17_154)))
 (let ((?x63345 (* l_0_17_115 l_0_17_115)))
 (let ((?x63343 (* l_0_17_114 l_0_17_114)))
 (let ((?x63466 (- (- (* (- l_0_17_112) l_0_17_112) (* l_0_17_113 l_0_17_113)) ?x63343)))
 (let ((?x63473 (- (- (+ (+ (+ (+ (- ?x63466 ?x63345) ?x63347) ?x63349) ?x63351) ?x63353) ?x63355) ?x63357)))
 (= (+ (+ (+ (+ (- (- ?x63473 ?x63359) ?x63361) ?x63363) ?x63365) ?x63367) ?x63369) 0.0))))))))))))))))))
(assert
 (let ((?x63126 (* (* 2.0 l_0_17_94) l_0_17_98)))
 (let ((?x63123 (* (* 2.0 l_0_17_93) l_0_17_97)))
 (let ((?x63120 (* (* 2.0 l_0_17_92) l_0_17_96)))
 (let ((?x63117 (* (* 2.0 l_0_17_91) l_0_17_95)))
 (let ((?x62036 (* 2.0 l_0_17_178)))
 (let ((?x63106 (* ?x62036 l_0_17_182)))
 (let ((?x62033 (* 2.0 l_0_17_177)))
 (let ((?x63104 (* ?x62033 l_0_17_181)))
 (let ((?x62030 (* 2.0 l_0_17_176)))
 (let ((?x63102 (* ?x62030 l_0_17_180)))
 (let ((?x62027 (* 2.0 l_0_17_175)))
 (let ((?x63100 (* ?x62027 l_0_17_179)))
 (let ((?x62024 (* 2.0 l_0_17_157)))
 (let ((?x63098 (* ?x62024 l_0_17_161)))
 (let ((?x62021 (* 2.0 l_0_17_156)))
 (let ((?x63096 (* ?x62021 l_0_17_160)))
 (let ((?x62018 (* 2.0 l_0_17_155)))
 (let ((?x63094 (* ?x62018 l_0_17_159)))
 (let ((?x62015 (* 2.0 l_0_17_154)))
 (let ((?x63092 (* ?x62015 l_0_17_158)))
 (let ((?x62004 (* 2.0 l_0_17_115)))
 (let ((?x63090 (* ?x62004 l_0_17_119)))
 (let ((?x62001 (* 2.0 l_0_17_114)))
 (let ((?x52947 (* ?x62001 l_0_17_118)))
 (let ((?x61998 (* 2.0 l_0_17_113)))
 (let ((?x52953 (* ?x61998 l_0_17_117)))
 (let ((?x30517 (+ (- (- (- (* (* (- 2.0) l_0_17_112) l_0_17_116) ?x52953) ?x52947) ?x63090) ?x63092)))
 (let ((?x63495 (- (- (- (- (+ (+ (+ ?x30517 ?x63094) ?x63096) ?x63098) ?x63100) ?x63102) ?x63104) ?x63106)))
 (= (+ (+ (+ (+ ?x63495 ?x63117) ?x63120) ?x63123) ?x63126) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x62036 (* 2.0 l_0_17_178)))
 (let ((?x62037 (* ?x62036 l_0_17_187)))
 (let ((?x62033 (* 2.0 l_0_17_177)))
 (let ((?x62034 (* ?x62033 l_0_17_186)))
 (let ((?x62030 (* 2.0 l_0_17_176)))
 (let ((?x62031 (* ?x62030 l_0_17_185)))
 (let ((?x62027 (* 2.0 l_0_17_175)))
 (let ((?x62028 (* ?x62027 l_0_17_184)))
 (let ((?x62024 (* 2.0 l_0_17_157)))
 (let ((?x62025 (* ?x62024 l_0_17_166)))
 (let ((?x62021 (* 2.0 l_0_17_156)))
 (let ((?x62022 (* ?x62021 l_0_17_165)))
 (let ((?x62018 (* 2.0 l_0_17_155)))
 (let ((?x62019 (* ?x62018 l_0_17_164)))
 (let ((?x62015 (* 2.0 l_0_17_154)))
 (let ((?x62016 (* ?x62015 l_0_17_163)))
 (let ((?x62004 (* 2.0 l_0_17_115)))
 (let ((?x62005 (* ?x62004 l_0_17_124)))
 (let ((?x62001 (* 2.0 l_0_17_114)))
 (let ((?x62002 (* ?x62001 l_0_17_123)))
 (let ((?x61998 (* 2.0 l_0_17_113)))
 (let ((?x61999 (* ?x61998 l_0_17_122)))
 (let ((?x61995 (* 2.0 l_0_17_112)))
 (let ((?x61996 (* ?x61995 l_0_17_121)))
 (let ((?x61992 (* 2.0 l_0_17_103)))
 (let ((?x61993 (* ?x61992 l_0_17_94)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x61990 (* ?x61710 l_0_17_93)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x51103 (* ?x60911 l_0_17_92)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x17523 (* ?x60908 l_0_17_91)))
 (let ((?x63524 (- (- (- (- (+ (+ (+ ?x17523 ?x51103) ?x61990) ?x61993) ?x61996) ?x61999) ?x62002) ?x62005)))
 (let ((?x63531 (- (- (- (+ (+ (+ (+ ?x63524 ?x62016) ?x62019) ?x62022) ?x62025) ?x62028) ?x62031) ?x62034)))
 (= (- ?x63531 ?x62037) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63201 (* l_0_17_99 l_0_17_99)))
 (let ((?x63199 (* l_0_17_98 l_0_17_98)))
 (let ((?x63197 (* l_0_17_97 l_0_17_97)))
 (let ((?x63195 (* l_0_17_96 l_0_17_96)))
 (let ((?x63193 (* l_0_17_95 l_0_17_95)))
 (let ((?x63183 (* l_0_17_183 l_0_17_183)))
 (let ((?x63181 (* l_0_17_182 l_0_17_182)))
 (let ((?x63179 (* l_0_17_181 l_0_17_181)))
 (let ((?x63177 (* l_0_17_180 l_0_17_180)))
 (let ((?x63175 (* l_0_17_179 l_0_17_179)))
 (let ((?x63173 (* l_0_17_162 l_0_17_162)))
 (let ((?x63171 (* l_0_17_161 l_0_17_161)))
 (let ((?x63169 (* l_0_17_160 l_0_17_160)))
 (let ((?x63167 (* l_0_17_159 l_0_17_159)))
 (let ((?x63165 (* l_0_17_158 l_0_17_158)))
 (let ((?x63163 (* l_0_17_120 l_0_17_120)))
 (let ((?x63161 (* l_0_17_119 l_0_17_119)))
 (let ((?x63159 (* l_0_17_118 l_0_17_118)))
 (let ((?x31151 (- (- (* (- l_0_17_116) l_0_17_116) (* l_0_17_117 l_0_17_117)) ?x63159)))
 (let ((?x63542 (+ (+ (+ (+ (+ (- (- ?x31151 ?x63161) ?x63163) ?x63165) ?x63167) ?x63169) ?x63171) ?x63173)))
 (let ((?x63549 (+ (+ (- (- (- (- (- ?x63542 ?x63175) ?x63177) ?x63179) ?x63181) ?x63183) ?x63193) ?x63195)))
 (= (+ (+ (+ ?x63549 ?x63197) ?x63199) ?x63201) 0.0)))))))))))))))))))))))
(assert
 (let ((?x62189 (* (* 2.0 l_0_17_183) l_0_17_188)))
 (let ((?x62186 (* (* 2.0 l_0_17_182) l_0_17_187)))
 (let ((?x62183 (* (* 2.0 l_0_17_181) l_0_17_186)))
 (let ((?x62180 (* (* 2.0 l_0_17_180) l_0_17_185)))
 (let ((?x62177 (* (* 2.0 l_0_17_179) l_0_17_184)))
 (let ((?x62174 (* (* 2.0 l_0_17_162) l_0_17_167)))
 (let ((?x62171 (* (* 2.0 l_0_17_161) l_0_17_166)))
 (let ((?x62168 (* (* 2.0 l_0_17_160) l_0_17_165)))
 (let ((?x62165 (* (* 2.0 l_0_17_159) l_0_17_164)))
 (let ((?x62162 (* (* 2.0 l_0_17_158) l_0_17_163)))
 (let ((?x62150 (* (* 2.0 l_0_17_120) l_0_17_125)))
 (let ((?x62146 (* (* 2.0 l_0_17_119) l_0_17_124)))
 (let ((?x62143 (* (* 2.0 l_0_17_118) l_0_17_123)))
 (let ((?x62140 (* (* 2.0 l_0_17_117) l_0_17_122)))
 (let ((?x62137 (* (* 2.0 l_0_17_116) l_0_17_121)))
 (let ((?x62133 (* (* 2.0 l_0_17_104) l_0_17_99)))
 (let ((?x61992 (* 2.0 l_0_17_103)))
 (let ((?x62130 (* ?x61992 l_0_17_98)))
 (let ((?x61710 (* 2.0 l_0_17_102)))
 (let ((?x62128 (* ?x61710 l_0_17_97)))
 (let ((?x60911 (* 2.0 l_0_17_101)))
 (let ((?x62126 (* ?x60911 l_0_17_96)))
 (let ((?x60908 (* 2.0 l_0_17_100)))
 (let ((?x51284 (* ?x60908 l_0_17_95)))
 (let ((?x63566 (- (- (- (+ (+ (+ (+ ?x51284 ?x62126) ?x62128) ?x62130) ?x62133) ?x62137) ?x62140) ?x62143)))
 (let ((?x63573 (+ (+ (+ (+ (+ (- (- ?x63566 ?x62146) ?x62150) ?x62162) ?x62165) ?x62168) ?x62171) ?x62174)))
 (= (- (- (- (- (- ?x63573 ?x62177) ?x62180) ?x62183) ?x62186) ?x62189) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x62355 (* l_0_17_189 l_0_17_189)))
 (let ((?x62353 (* l_0_17_188 l_0_17_188)))
 (let ((?x62351 (* l_0_17_187 l_0_17_187)))
 (let ((?x62349 (* l_0_17_186 l_0_17_186)))
 (let ((?x62347 (* l_0_17_185 l_0_17_185)))
 (let ((?x62345 (* l_0_17_184 l_0_17_184)))
 (let ((?x62341 (* l_0_17_168 l_0_17_168)))
 (let ((?x62339 (* l_0_17_167 l_0_17_167)))
 (let ((?x62337 (* l_0_17_166 l_0_17_166)))
 (let ((?x62335 (* l_0_17_165 l_0_17_165)))
 (let ((?x62333 (* l_0_17_164 l_0_17_164)))
 (let ((?x62331 (* l_0_17_163 l_0_17_163)))
 (let ((?x62324 (* l_0_17_126 l_0_17_126)))
 (let ((?x62322 (* l_0_17_125 l_0_17_125)))
 (let ((?x62320 (* l_0_17_124 l_0_17_124)))
 (let ((?x62318 (* l_0_17_123 l_0_17_123)))
 (let ((?x62316 (* l_0_17_122 l_0_17_122)))
 (let ((?x62314 (* l_0_17_121 l_0_17_121)))
 (let ((?x62312 (* l_0_17_105 l_0_17_105)))
 (let ((?x62310 (* l_0_17_104 l_0_17_104)))
 (let ((?x62308 (* l_0_17_103 l_0_17_103)))
 (let ((?x62306 (* l_0_17_102 l_0_17_102)))
 (let ((?x53386 (+ (+ (* l_0_17_100 l_0_17_100) (* l_0_17_101 l_0_17_101)) ?x62306)))
 (let ((?x63591 (- (- (- (- (+ (+ (+ ?x53386 ?x62308) ?x62310) ?x62312) ?x62314) ?x62316) ?x62318) ?x62320)))
 (let ((?x63598 (+ (+ (+ (+ (+ (- (- ?x63591 ?x62322) ?x62324) ?x62331) ?x62333) ?x62335) ?x62337) ?x62339)))
 (let ((?x63605 (- (- (- (- (- (- (+ ?x63598 ?x62341) ?x62345) ?x62347) ?x62349) ?x62351) ?x62353) ?x62355)))
 (= ?x63605 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x61647 (* l_0_17_132 l_0_17_132)))
 (let ((?x53428 (- (- (* (- l_0_17_130) l_0_17_130) (* l_0_17_131 l_0_17_131)) ?x61647)))
 (= ?x53428 0.0))))
(assert
 (>= l_0_17_1 0.0))
(assert
 (>= l_0_17_3 0.0))
(assert
 (>= l_0_17_6 0.0))
(assert
 (>= l_0_17_10 0.0))
(assert
 (>= l_0_17_15 0.0))
(assert
 (>= l_0_17_21 0.0))
(assert
 (>= l_0_17_22 0.0))
(assert
 (>= l_0_17_24 0.0))
(assert
 (>= l_0_17_27 0.0))
(assert
 (>= l_0_17_31 0.0))
(assert
 (>= l_0_17_36 0.0))
(assert
 (>= l_0_17_42 0.0))
(assert
 (>= l_0_17_43 0.0))
(assert
 (>= l_0_17_45 0.0))
(assert
 (>= l_0_17_48 0.0))
(assert
 (>= l_0_17_52 0.0))
(assert
 (>= l_0_17_57 0.0))
(assert
 (>= l_0_17_63 0.0))
(assert
 (>= l_0_17_64 0.0))
(assert
 (>= l_0_17_66 0.0))
(assert
 (>= l_0_17_69 0.0))
(assert
 (>= l_0_17_73 0.0))
(assert
 (>= l_0_17_78 0.0))
(assert
 (>= l_0_17_84 0.0))
(assert
 (>= l_0_17_85 0.0))
(assert
 (>= l_0_17_87 0.0))
(assert
 (>= l_0_17_90 0.0))
(assert
 (>= l_0_17_94 0.0))
(assert
 (>= l_0_17_99 0.0))
(assert
 (>= l_0_17_105 0.0))
(assert
 (>= l_0_17_106 0.0))
(assert
 (>= l_0_17_108 0.0))
(assert
 (>= l_0_17_111 0.0))
(assert
 (>= l_0_17_115 0.0))
(assert
 (>= l_0_17_120 0.0))
(assert
 (>= l_0_17_126 0.0))
(assert
 (>= l_0_17_127 0.0))
(assert
 (>= l_0_17_129 0.0))
(assert
 (>= l_0_17_132 0.0))
(assert
 (>= l_0_17_136 0.0))
(assert
 (>= l_0_17_141 0.0))
(assert
 (>= l_0_17_147 0.0))
(assert
 (>= l_0_17_148 0.0))
(assert
 (>= l_0_17_150 0.0))
(assert
 (>= l_0_17_153 0.0))
(assert
 (>= l_0_17_157 0.0))
(assert
 (>= l_0_17_162 0.0))
(assert
 (>= l_0_17_168 0.0))
(assert
 (>= l_0_17_169 0.0))
(assert
 (>= l_0_17_171 0.0))
(assert
 (>= l_0_17_174 0.0))
(assert
 (>= l_0_17_178 0.0))
(assert
 (>= l_0_17_183 0.0))
(assert
 (>= l_0_17_189 0.0))
(assert
 (>= l_0_17_190 0.0))
(assert
 (>= l_0_17_192 0.0))
(assert
 (>= l_0_17_195 0.0))
(assert
 (>= l_0_17_199 0.0))
(assert
 (>= l_0_17_204 0.0))
(assert
 (>= l_0_17_210 0.0))
(assert
 (>= l_0_17_211 0.0))
(assert
 (>= l_0_17_213 0.0))
(assert
 (>= l_0_17_216 0.0))
(assert
 (>= l_0_17_220 0.0))
(assert
 (>= l_0_17_225 0.0))
(assert
 (>= l_0_17_231 0.0))
(assert
 (>= l_0_17_232 0.0))
(assert
 (>= l_0_17_234 0.0))
(assert
 (>= l_0_17_237 0.0))
(assert
 (>= l_0_17_241 0.0))
(assert
 (>= l_0_17_246 0.0))
(assert
 (>= l_0_17_252 0.0))
(assert
 (>= l_0_17_253 0.0))
(assert
 (>= l_0_17_255 0.0))
(assert
 (>= l_0_17_258 0.0))
(assert
 (>= l_0_17_262 0.0))
(assert
 (>= l_0_17_267 0.0))
(assert
 (>= l_0_17_273 0.0))
(assert
 (>= l_0_17_274 0.0))
(assert
 (>= l_0_17_276 0.0))
(assert
 (>= l_0_17_279 0.0))
(assert
 (>= l_0_17_283 0.0))
(assert
 (>= l_0_17_288 0.0))
(assert
 (>= l_0_17_294 0.0))
(assert
 (let ((?x63775 (* l_0_18_85 l_0_18_85)))
 (let ((?x63772 (* l_0_18_84 l_0_18_84)))
 (let ((?x63773 (* 3.0 ?x63772)))
 (let ((?x63769 (* l_0_18_83 l_0_18_83)))
 (let ((?x63770 (* 3.0 ?x63769)))
 (let ((?x63766 (* l_0_18_82 l_0_18_82)))
 (let ((?x63767 (* 3.0 ?x63766)))
 (let ((?x63763 (* l_0_18_81 l_0_18_81)))
 (let ((?x63764 (* 3.0 ?x63763)))
 (let ((?x63760 (* l_0_18_80 l_0_18_80)))
 (let ((?x63761 (* 3.0 ?x63760)))
 (let ((?x63757 (* l_0_18_79 l_0_18_79)))
 (let ((?x63758 (* 3.0 ?x63757)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x63755 (* ?x63754 l_0_18_79)))
 (let ((?x63752 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x63749 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x63746 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x63743 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x63740 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x63737 (* (* 3.0 l_0_18_58) l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x63734 (* ?x63733 l_0_18_58)))
 (let ((?x63731 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x63728 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x63725 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x63722 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x63719 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x63716 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x63712 (* l_0_18_21 l_0_18_21)))
 (let ((?x63713 (* 6.0 ?x63712)))
 (let ((?x63709 (* l_0_18_20 l_0_18_20)))
 (let ((?x63710 (* 6.0 ?x63709)))
 (let ((?x63706 (* l_0_18_19 l_0_18_19)))
 (let ((?x63707 (* 6.0 ?x63706)))
 (let ((?x63703 (* l_0_18_18 l_0_18_18)))
 (let ((?x63704 (* 6.0 ?x63703)))
 (let ((?x63700 (* l_0_18_17 l_0_18_17)))
 (let ((?x63701 (* 6.0 ?x63700)))
 (let ((?x63698 (* l_0_18_169 l_0_18_169)))
 (let ((?x63695 (* l_0_18_16 l_0_18_16)))
 (let ((?x63696 (* 6.0 ?x63695)))
 (let ((?x63693 (* l_0_18_148 l_0_18_148)))
 (let ((?x63691 (* l_0_18_147 l_0_18_147)))
 (let ((?x63689 (* l_0_18_146 l_0_18_146)))
 (let ((?x63687 (* l_0_18_145 l_0_18_145)))
 (let ((?x63685 (* l_0_18_144 l_0_18_144)))
 (let ((?x63683 (* l_0_18_143 l_0_18_143)))
 (let ((?x63684 (+ (+ (* (- l_0_18_106) l_0_18_106) (* l_0_18_142 l_0_18_142)) ?x63683)))
 (let ((?x63699 (- (+ (+ (+ (+ (+ (+ ?x63684 ?x63685) ?x63687) ?x63689) ?x63691) ?x63693) ?x63696) ?x63698)))
 (let ((?x63720 (- (- (+ (+ (+ (+ (+ ?x63699 ?x63701) ?x63704) ?x63707) ?x63710) ?x63713) ?x63716) ?x63719)))
 (let ((?x63741 (- (- (- (- (- (- (- ?x63720 ?x63722) ?x63725) ?x63728) ?x63731) ?x63734) ?x63737) ?x63740)))
 (let ((?x63762 (+ (+ (+ (- (- (- (- ?x63741 ?x63743) ?x63746) ?x63749) ?x63752) ?x63755) ?x63758) ?x63761)))
 (= (+ (+ (+ (+ (+ (+ ?x63762 ?x63764) ?x63767) ?x63770) ?x63773) ?x63775) 1.0) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63955 (* l_0_18_64 l_0_18_64)))
 (let ((?x63956 (* 3.0 ?x63955)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x63755 (* ?x63754 l_0_18_79)))
 (let ((?x63934 (* (* 3.0 l_0_18_43) l_0_18_43)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x63734 (* ?x63733 l_0_18_58)))
 (let ((?x63731 (* (* 6.0 l_0_18_42) l_0_18_42)))
 (let ((?x63728 (* (* 6.0 l_0_18_41) l_0_18_41)))
 (let ((?x63725 (* (* 6.0 l_0_18_40) l_0_18_40)))
 (let ((?x63722 (* (* 6.0 l_0_18_39) l_0_18_39)))
 (let ((?x63719 (* (* 6.0 l_0_18_38) l_0_18_38)))
 (let ((?x63716 (* (* 6.0 l_0_18_37) l_0_18_37)))
 (let ((?x63924 (* l_0_18_315 l_0_18_315)))
 (let ((?x63922 (* l_0_18_314 l_0_18_314)))
 (let ((?x63920 (* l_0_18_313 l_0_18_313)))
 (let ((?x63918 (* l_0_18_312 l_0_18_312)))
 (let ((?x63916 (* l_0_18_311 l_0_18_311)))
 (let ((?x63914 (* l_0_18_310 l_0_18_310)))
 (let ((?x63912 (* l_0_18_294 l_0_18_294)))
 (let ((?x63910 (* l_0_18_293 l_0_18_293)))
 (let ((?x63908 (* l_0_18_292 l_0_18_292)))
 (let ((?x63906 (* l_0_18_291 l_0_18_291)))
 (let ((?x63904 (* l_0_18_290 l_0_18_290)))
 (let ((?x63902 (* l_0_18_289 l_0_18_289)))
 (let ((?x63900 (* l_0_18_273 l_0_18_273)))
 (let ((?x63898 (* l_0_18_272 l_0_18_272)))
 (let ((?x63896 (* l_0_18_271 l_0_18_271)))
 (let ((?x63894 (* l_0_18_270 l_0_18_270)))
 (let ((?x63892 (* l_0_18_269 l_0_18_269)))
 (let ((?x63890 (* l_0_18_268 l_0_18_268)))
 (let ((?x63888 (* l_0_18_252 l_0_18_252)))
 (let ((?x63886 (* l_0_18_251 l_0_18_251)))
 (let ((?x63884 (* l_0_18_250 l_0_18_250)))
 (let ((?x63882 (* l_0_18_249 l_0_18_249)))
 (let ((?x63880 (* l_0_18_248 l_0_18_248)))
 (let ((?x63878 (* l_0_18_247 l_0_18_247)))
 (let ((?x63876 (* l_0_18_231 l_0_18_231)))
 (let ((?x63874 (* l_0_18_230 l_0_18_230)))
 (let ((?x63872 (* l_0_18_229 l_0_18_229)))
 (let ((?x63870 (* l_0_18_228 l_0_18_228)))
 (let ((?x63868 (* l_0_18_227 l_0_18_227)))
 (let ((?x63866 (* l_0_18_226 l_0_18_226)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x63864 (* ?x63863 l_0_18_37)))
 (let ((?x63861 (* l_0_18_210 l_0_18_210)))
 (let ((?x63712 (* l_0_18_21 l_0_18_21)))
 (let ((?x63713 (* 6.0 ?x63712)))
 (let ((?x63858 (* l_0_18_209 l_0_18_209)))
 (let ((?x63856 (* l_0_18_208 l_0_18_208)))
 (let ((?x63854 (* l_0_18_207 l_0_18_207)))
 (let ((?x63852 (* l_0_18_206 l_0_18_206)))
 (let ((?x63850 (* l_0_18_205 l_0_18_205)))
 (let ((?x63709 (* l_0_18_20 l_0_18_20)))
 (let ((?x63710 (* 6.0 ?x63709)))
 (let ((?x63706 (* l_0_18_19 l_0_18_19)))
 (let ((?x63707 (* 6.0 ?x63706)))
 (let ((?x63703 (* l_0_18_18 l_0_18_18)))
 (let ((?x63704 (* 6.0 ?x63703)))
 (let ((?x63700 (* l_0_18_17 l_0_18_17)))
 (let ((?x63701 (* 6.0 ?x63700)))
 (let ((?x63695 (* l_0_18_16 l_0_18_16)))
 (let ((?x63696 (* 6.0 ?x63695)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x63843 (* ?x63842 l_0_18_142)))
 (let ((?x42705 (* 12.0 l_0_18_1)))
 (let ((?x31861 (* ?x42705 l_0_18_16)))
 (let ((?x63851 (- (+ (+ (+ (+ (+ (+ ?x31861 ?x63843) ?x63696) ?x63701) ?x63704) ?x63707) ?x63710) ?x63850)))
 (let ((?x63865 (- (- (+ (- (- (- (- ?x63851 ?x63852) ?x63854) ?x63856) ?x63858) ?x63713) ?x63861) ?x63864)))
 (let ((?x63879 (- (- (- (- (- (- (- ?x63865 ?x63866) ?x63868) ?x63870) ?x63872) ?x63874) ?x63876) ?x63878)))
 (let ((?x63893 (- (- (- (- (- (- (- ?x63879 ?x63880) ?x63882) ?x63884) ?x63886) ?x63888) ?x63890) ?x63892)))
 (let ((?x63907 (- (- (- (- (- (- (- ?x63893 ?x63894) ?x63896) ?x63898) ?x63900) ?x63902) ?x63904) ?x63906)))
 (let ((?x63921 (- (- (- (- (- (- (- ?x63907 ?x63908) ?x63910) ?x63912) ?x63914) ?x63916) ?x63918) ?x63920)))
 (let ((?x63930 (- (- (- (- (- (- (- ?x63921 ?x63922) ?x63924) ?x63716) ?x63719) ?x63722) ?x63725) ?x63728)))
 (let ((?x63938 (- (- (- (- ?x63930 ?x63731) ?x63734) ?x63934) (* (* 1.0 l_0_18_58) l_0_18_58))))
 (let ((?x63944 (- (- ?x63938 (* (* 1.0 l_0_18_59) l_0_18_59)) (* (* 1.0 l_0_18_60) l_0_18_60))))
 (let ((?x63950 (- (- ?x63944 (* (* 1.0 l_0_18_61) l_0_18_61)) (* (* 1.0 l_0_18_62) l_0_18_62))))
 (let ((?x63959 (+ (+ (+ (- ?x63950 (* (* 1.0 l_0_18_63) l_0_18_63)) ?x63755) ?x63956) (* 1.0 (* l_0_18_79 l_0_18_79)))))
 (let ((?x63963 (+ (+ ?x63959 (* 1.0 (* l_0_18_80 l_0_18_80))) (* 1.0 (* l_0_18_81 l_0_18_81)))))
 (let ((?x63967 (+ (+ ?x63963 (* 1.0 (* l_0_18_82 l_0_18_82))) (* 1.0 (* l_0_18_83 l_0_18_83)))))
 (= (+ (+ ?x63967 (* 1.0 (* l_0_18_84 l_0_18_84))) 3.0) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63955 (* l_0_18_64 l_0_18_64)))
 (let ((?x63956 (* 3.0 ?x63955)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64049 (* ?x64048 l_0_18_79)))
 (let ((?x63934 (* (* 3.0 l_0_18_43) l_0_18_43)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64045 (* ?x64044 l_0_18_58)))
 (let ((?x64030 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x63864 (* ?x63863 l_0_18_37)))
 (let ((?x30718 (* l_0_18_127 l_0_18_127)))
 (let ((?x40173 (* l_0_18_1 l_0_18_1)))
 (let ((?x21103 (* 6.0 ?x40173)))
 (let ((?x42705 (* 12.0 l_0_18_1)))
 (let ((?x31861 (* ?x42705 l_0_18_16)))
 (let ((?x64027 (- (- (+ (+ ?x31861 ?x21103) ?x30718) (* (* 2.0 l_0_18_190) l_0_18_205)) (* (* 2.0 l_0_18_211) l_0_18_226))))
 (let ((?x64037 (- (- (- (- ?x64027 ?x63864) ?x64030) (* (* 2.0 l_0_18_232) l_0_18_247)) (* (* 2.0 l_0_18_253) l_0_18_268))))
 (let ((?x64043 (- (- ?x64037 (* (* 2.0 l_0_18_274) l_0_18_289)) (* (* 2.0 l_0_18_295) l_0_18_310))))
 (= (+ (+ (+ (- (- ?x64043 ?x64045) ?x63934) ?x64049) ?x63956) 3.0) 0.0))))))))))))))))))))
(assert
 (let ((?x64092 (* l_0_18_295 l_0_18_295)))
 (let ((?x64090 (* l_0_18_274 l_0_18_274)))
 (let ((?x64088 (* l_0_18_253 l_0_18_253)))
 (let ((?x64086 (* l_0_18_232 l_0_18_232)))
 (let ((?x64030 (* (* 6.0 l_0_18_22) l_0_18_22)))
 (let ((?x64083 (* l_0_18_211 l_0_18_211)))
 (let ((?x64076 (* l_0_18_190 l_0_18_190)))
 (let ((?x64084 (- (- (+ (- _a_0_) (* 6.0 (* l_0_18_1 l_0_18_1))) ?x64076) ?x64083)))
 (let ((?x64096 (- (- (- (- (- (- ?x64084 ?x64030) ?x64086) ?x64088) ?x64090) ?x64092) (* (* 1.0 l_0_18_43) l_0_18_43))))
 (= (+ (+ ?x64096 (* 1.0 (* l_0_18_64 l_0_18_64))) 1.0) 0.0)))))))))))
(assert
 (let ((?x63775 (* l_0_18_85 l_0_18_85)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64136 (* ?x64048 l_0_18_70)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64134 (* ?x64044 l_0_18_49)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64124 (* ?x63863 l_0_18_28)))
 (let ((?x63698 (* l_0_18_169 l_0_18_169)))
 (let ((?x63693 (* l_0_18_148 l_0_18_148)))
 (let ((?x63780 (* l_0_18_106 l_0_18_106)))
 (let ((?x64118 (- (+ (+ (- _a_1_) (* (* 12.0 l_0_18_1) l_0_18_7)) ?x63780) ?x63693)))
 (let ((?x64123 (- (- (+ ?x64118 ?x63698) (* (* 2.0 l_0_18_190) l_0_18_196)) (* (* 2.0 l_0_18_211) l_0_18_217))))
 (let ((?x64129 (- (- (- ?x64123 ?x64124) (* (* 2.0 l_0_18_232) l_0_18_238)) (* (* 2.0 l_0_18_253) l_0_18_259))))
 (let ((?x64133 (- (- ?x64129 (* (* 2.0 l_0_18_274) l_0_18_280)) (* (* 2.0 l_0_18_295) l_0_18_301))))
 (= (- (+ (- ?x64133 ?x64134) ?x64136) ?x63775) 0.0))))))))))))))))
(assert
 (let ((?x64279 (* l_0_18_9 l_0_18_9)))
 (let ((?x64280 (* 6.0 ?x64279)))
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x64277 (* ?x64276 l_0_18_91)))
 (let ((?x64273 (* l_0_18_8 l_0_18_8)))
 (let ((?x64274 (* 6.0 ?x64273)))
 (let ((?x64258 (* l_0_18_7 l_0_18_7)))
 (let ((?x64259 (* 6.0 ?x64258)))
 (let ((?x64244 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x64241 (* l_0_18_304 l_0_18_304)))
 (let ((?x64239 (* l_0_18_303 l_0_18_303)))
 (let ((?x64237 (* l_0_18_302 l_0_18_302)))
 (let ((?x64235 (* l_0_18_301 l_0_18_301)))
 (let ((?x64233 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64230 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x64227 (* l_0_18_283 l_0_18_283)))
 (let ((?x64225 (* l_0_18_282 l_0_18_282)))
 (let ((?x64223 (* l_0_18_281 l_0_18_281)))
 (let ((?x64221 (* l_0_18_280 l_0_18_280)))
 (let ((?x64219 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x64216 (* l_0_18_262 l_0_18_262)))
 (let ((?x64214 (* l_0_18_261 l_0_18_261)))
 (let ((?x64212 (* l_0_18_260 l_0_18_260)))
 (let ((?x64210 (* l_0_18_259 l_0_18_259)))
 (let ((?x64208 (* l_0_18_241 l_0_18_241)))
 (let ((?x64206 (* l_0_18_240 l_0_18_240)))
 (let ((?x64204 (* l_0_18_239 l_0_18_239)))
 (let ((?x64202 (* l_0_18_238 l_0_18_238)))
 (let ((?x64200 (* l_0_18_220 l_0_18_220)))
 (let ((?x64198 (* l_0_18_219 l_0_18_219)))
 (let ((?x64196 (* l_0_18_218 l_0_18_218)))
 (let ((?x64194 (* l_0_18_217 l_0_18_217)))
 (let ((?x64192 (* l_0_18_199 l_0_18_199)))
 (let ((?x64190 (* l_0_18_198 l_0_18_198)))
 (let ((?x64188 (* l_0_18_197 l_0_18_197)))
 (let ((?x64186 (* l_0_18_196 l_0_18_196)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x64184 (* ?x64183 l_0_18_175)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x64181 (* ?x64180 l_0_18_154)))
 (let ((?x64179 (+ (+ (- _a_2_) (* 6.0 (* l_0_18_10 l_0_18_10))) (* (* 2.0 l_0_18_106) l_0_18_112))))
 (let ((?x64195 (- (- (- (- (- (+ (- ?x64179 ?x64181) ?x64184) ?x64186) ?x64188) ?x64190) ?x64192) ?x64194)))
 (let ((?x64209 (- (- (- (- (- (- (- ?x64195 ?x64196) ?x64198) ?x64200) ?x64202) ?x64204) ?x64206) ?x64208)))
 (let ((?x64224 (- (- (- (- (- (- (- ?x64209 ?x64210) ?x64212) ?x64214) ?x64216) ?x64219) ?x64221) ?x64223)))
 (let ((?x64240 (- (- (- (- (- (- (- ?x64224 ?x64225) ?x64227) ?x64230) ?x64233) ?x64235) ?x64237) ?x64239)))
 (let ((?x64251 (- (- (- (- ?x64240 ?x64241) ?x64244) (* (* 1.0 l_0_18_49) l_0_18_49)) (* (* 1.0 l_0_18_50) l_0_18_50))))
 (let ((?x64257 (- (- ?x64251 (* (* 1.0 l_0_18_51) l_0_18_51)) (* (* 1.0 l_0_18_52) l_0_18_52))))
 (let ((?x64266 (+ (+ (+ ?x64257 ?x64259) (* 1.0 (* l_0_18_70 l_0_18_70))) (* 1.0 (* l_0_18_71 l_0_18_71)))))
 (let ((?x64272 (+ (+ ?x64266 (* 1.0 (* l_0_18_72 l_0_18_72))) (* 1.0 (* l_0_18_73 l_0_18_73)))))
 (= (+ (- (+ ?x64272 ?x64274) ?x64277) ?x64280) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63955 (* l_0_18_64 l_0_18_64)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64379 (* ?x64048 l_0_18_74)))
 (let ((?x31949 (* l_0_18_43 l_0_18_43)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64376 (* ?x64044 l_0_18_53)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64366 (* ?x63863 l_0_18_32)))
 (let ((?x64363 (- (+ (- _a_3_) (* (* 12.0 l_0_18_1) l_0_18_11)) (* (* 2.0 l_0_18_190) l_0_18_200))))
 (let ((?x64369 (- (- (- ?x64363 (* (* 2.0 l_0_18_211) l_0_18_221)) ?x64366) (* (* 2.0 l_0_18_232) l_0_18_242))))
 (let ((?x64373 (- (- ?x64369 (* (* 2.0 l_0_18_253) l_0_18_263)) (* (* 2.0 l_0_18_274) l_0_18_284))))
 (let ((?x64380 (+ (+ (- (- ?x64373 (* (* 2.0 l_0_18_295) l_0_18_305)) ?x64376) ?x31949) ?x64379)))
 (= (- ?x64380 ?x63955) 0.0))))))))))))))
(assert
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64379 (* ?x64048 l_0_18_74)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64376 (* ?x64044 l_0_18_53)))
 (let ((?x64512 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x64509 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x64506 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x64503 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x64500 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x64497 (* l_0_18_309 l_0_18_309)))
 (let ((?x64495 (* l_0_18_308 l_0_18_308)))
 (let ((?x64493 (* l_0_18_307 l_0_18_307)))
 (let ((?x64491 (* l_0_18_306 l_0_18_306)))
 (let ((?x64489 (* l_0_18_305 l_0_18_305)))
 (let ((?x64487 (* l_0_18_288 l_0_18_288)))
 (let ((?x64485 (* l_0_18_287 l_0_18_287)))
 (let ((?x64483 (* l_0_18_286 l_0_18_286)))
 (let ((?x64481 (* l_0_18_285 l_0_18_285)))
 (let ((?x64479 (* l_0_18_284 l_0_18_284)))
 (let ((?x64477 (* l_0_18_267 l_0_18_267)))
 (let ((?x64475 (* l_0_18_266 l_0_18_266)))
 (let ((?x64473 (* l_0_18_265 l_0_18_265)))
 (let ((?x64471 (* l_0_18_264 l_0_18_264)))
 (let ((?x64469 (* l_0_18_263 l_0_18_263)))
 (let ((?x64467 (* l_0_18_246 l_0_18_246)))
 (let ((?x64465 (* l_0_18_245 l_0_18_245)))
 (let ((?x64463 (* l_0_18_244 l_0_18_244)))
 (let ((?x64461 (* l_0_18_243 l_0_18_243)))
 (let ((?x64459 (* l_0_18_242 l_0_18_242)))
 (let ((?x64457 (* l_0_18_225 l_0_18_225)))
 (let ((?x64455 (* l_0_18_224 l_0_18_224)))
 (let ((?x64453 (* l_0_18_223 l_0_18_223)))
 (let ((?x64451 (* l_0_18_222 l_0_18_222)))
 (let ((?x64449 (* l_0_18_221 l_0_18_221)))
 (let ((?x64447 (* l_0_18_204 l_0_18_204)))
 (let ((?x64445 (* l_0_18_203 l_0_18_203)))
 (let ((?x64443 (* l_0_18_202 l_0_18_202)))
 (let ((?x64441 (* l_0_18_201 l_0_18_201)))
 (let ((?x64439 (* l_0_18_200 l_0_18_200)))
 (let ((?x64436 (* l_0_18_15 l_0_18_15)))
 (let ((?x64437 (* 6.0 ?x64436)))
 (let ((?x64433 (* l_0_18_14 l_0_18_14)))
 (let ((?x64434 (* 6.0 ?x64433)))
 (let ((?x64430 (* l_0_18_13 l_0_18_13)))
 (let ((?x64431 (* 6.0 ?x64430)))
 (let ((?x64427 (* l_0_18_12 l_0_18_12)))
 (let ((?x64428 (* 6.0 ?x64427)))
 (let ((?x64432 (+ (+ (+ (- _a_4_) (* 6.0 (* l_0_18_11 l_0_18_11))) ?x64428) ?x64431)))
 (let ((?x64448 (- (- (- (- (- (+ (+ ?x64432 ?x64434) ?x64437) ?x64439) ?x64441) ?x64443) ?x64445) ?x64447)))
 (let ((?x64462 (- (- (- (- (- (- (- ?x64448 ?x64449) ?x64451) ?x64453) ?x64455) ?x64457) ?x64459) ?x64461)))
 (let ((?x64476 (- (- (- (- (- (- (- ?x64462 ?x64463) ?x64465) ?x64467) ?x64469) ?x64471) ?x64473) ?x64475)))
 (let ((?x64490 (- (- (- (- (- (- (- ?x64476 ?x64477) ?x64479) ?x64481) ?x64483) ?x64485) ?x64487) ?x64489)))
 (let ((?x64507 (- (- (- (- (- (- (- ?x64490 ?x64491) ?x64493) ?x64495) ?x64497) ?x64500) ?x64503) ?x64506)))
 (let ((?x64517 (- (+ (- (- ?x64507 ?x64509) ?x64512) ?x64376) (* (* 1.0 l_0_18_53) l_0_18_53))))
 (let ((?x64523 (- (- ?x64517 (* (* 1.0 l_0_18_54) l_0_18_54)) (* (* 1.0 l_0_18_55) l_0_18_55))))
 (let ((?x64529 (- (- ?x64523 (* (* 1.0 l_0_18_56) l_0_18_56)) (* (* 1.0 l_0_18_57) l_0_18_57))))
 (let ((?x64536 (+ (+ (- ?x64529 ?x64379) (* 1.0 (* l_0_18_74 l_0_18_74))) (* 1.0 (* l_0_18_75 l_0_18_75)))))
 (let ((?x64542 (+ (+ ?x64536 (* 1.0 (* l_0_18_76 l_0_18_76))) (* 1.0 (* l_0_18_77 l_0_18_77)))))
 (= (+ ?x64542 (* 1.0 (* l_0_18_78 l_0_18_78))) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x64767 (* ?x64276 l_0_18_95)))
 (let ((?x64764 (* 2.0 l_0_18_73)))
 (let ((?x64765 (* ?x64764 l_0_18_77)))
 (let ((?x64761 (* 2.0 l_0_18_72)))
 (let ((?x64762 (* ?x64761 l_0_18_76)))
 (let ((?x64758 (* 2.0 l_0_18_71)))
 (let ((?x64759 (* ?x64758 l_0_18_75)))
 (let ((?x64755 (* 2.0 l_0_18_70)))
 (let ((?x64756 (* ?x64755 l_0_18_74)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64136 (* ?x64048 l_0_18_70)))
 (let ((?x64751 (* 2.0 l_0_18_52)))
 (let ((?x64752 (* ?x64751 l_0_18_56)))
 (let ((?x64748 (* 2.0 l_0_18_51)))
 (let ((?x64749 (* ?x64748 l_0_18_55)))
 (let ((?x64745 (* 2.0 l_0_18_50)))
 (let ((?x64746 (* ?x64745 l_0_18_54)))
 (let ((?x64742 (* 2.0 l_0_18_49)))
 (let ((?x64743 (* ?x64742 l_0_18_53)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64134 (* ?x64044 l_0_18_49)))
 (let ((?x64738 (* 12.0 l_0_18_31)))
 (let ((?x64739 (* ?x64738 l_0_18_35)))
 (let ((?x64723 (* 12.0 l_0_18_30)))
 (let ((?x64724 (* ?x64723 l_0_18_34)))
 (let ((?x64720 (* 12.0 l_0_18_29)))
 (let ((?x64721 (* ?x64720 l_0_18_33)))
 (let ((?x64705 (* 12.0 l_0_18_28)))
 (let ((?x64706 (* ?x64705 l_0_18_32)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x64655 (* ?x64183 l_0_18_179)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x64653 (* ?x64180 l_0_18_158)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x64651 (* ?x64650 l_0_18_9)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x64648 (* ?x64647 l_0_18_8)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x64645 (* ?x64644 l_0_18_7)))
 (let ((?x64643 (+ (+ (- _a_5_) (* (* 12.0 l_0_18_10) l_0_18_14)) (* (* 2.0 l_0_18_106) l_0_18_116))))
 (let ((?x64659 (- (+ (- (+ (+ (+ ?x64643 ?x64645) ?x64648) ?x64651) ?x64653) ?x64655) (* (* 2.0 l_0_18_196) l_0_18_200))))
 (let ((?x64665 (- (- ?x64659 (* (* 2.0 l_0_18_197) l_0_18_201)) (* (* 2.0 l_0_18_198) l_0_18_202))))
 (let ((?x64671 (- (- ?x64665 (* (* 2.0 l_0_18_199) l_0_18_203)) (* (* 2.0 l_0_18_217) l_0_18_221))))
 (let ((?x64677 (- (- ?x64671 (* (* 2.0 l_0_18_218) l_0_18_222)) (* (* 2.0 l_0_18_219) l_0_18_223))))
 (let ((?x64683 (- (- ?x64677 (* (* 2.0 l_0_18_220) l_0_18_224)) (* (* 2.0 l_0_18_238) l_0_18_242))))
 (let ((?x64689 (- (- ?x64683 (* (* 2.0 l_0_18_239) l_0_18_243)) (* (* 2.0 l_0_18_240) l_0_18_244))))
 (let ((?x64695 (- (- ?x64689 (* (* 2.0 l_0_18_241) l_0_18_245)) (* (* 2.0 l_0_18_259) l_0_18_263))))
 (let ((?x64701 (- (- ?x64695 (* (* 2.0 l_0_18_260) l_0_18_264)) (* (* 2.0 l_0_18_261) l_0_18_265))))
 (let ((?x64710 (- (- (- ?x64701 (* (* 2.0 l_0_18_262) l_0_18_266)) ?x64706) (* (* 2.0 l_0_18_280) l_0_18_284))))
 (let ((?x64716 (- (- ?x64710 (* (* 2.0 l_0_18_281) l_0_18_285)) (* (* 2.0 l_0_18_282) l_0_18_286))))
 (let ((?x64728 (- (- (- (- ?x64716 (* (* 2.0 l_0_18_283) l_0_18_287)) ?x64721) ?x64724) (* (* 2.0 l_0_18_301) l_0_18_305))))
 (let ((?x64734 (- (- ?x64728 (* (* 2.0 l_0_18_302) l_0_18_306)) (* (* 2.0 l_0_18_303) l_0_18_307))))
 (let ((?x64744 (- (+ (- (- ?x64734 (* (* 2.0 l_0_18_304) l_0_18_308)) ?x64739) ?x64134) ?x64743)))
 (let ((?x64763 (+ (+ (+ (- (- (- (- ?x64744 ?x64746) ?x64749) ?x64752) ?x64136) ?x64756) ?x64759) ?x64762)))
 (= (- (+ ?x64763 ?x64765) ?x64767) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64931 (* ?x64048 l_0_18_65)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64929 (* ?x64044 l_0_18_44)))
 (let ((?x43116 (* l_0_18_22 l_0_18_22)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64918 (* ?x63863 l_0_18_23)))
 (let ((?x64915 (- (- (* (* 12.0 l_0_18_1) l_0_18_2) (* l_0_18_1 l_0_18_1)) (* (* 2.0 l_0_18_190) l_0_18_191))))
 (let ((?x64922 (- (+ (- (- ?x64915 (* (* 2.0 l_0_18_211) l_0_18_212)) ?x64918) ?x43116) (* (* 2.0 l_0_18_232) l_0_18_233))))
 (let ((?x64926 (- (- ?x64922 (* (* 2.0 l_0_18_253) l_0_18_254)) (* (* 2.0 l_0_18_274) l_0_18_275))))
 (= (+ (- (- ?x64926 (* (* 2.0 l_0_18_295) l_0_18_296)) ?x64929) ?x64931) 0.0))))))))))))
(assert
 (let ((?x64992 (* l_0_18_3 l_0_18_3)))
 (let ((?x64993 (* 6.0 ?x64992)))
 (let ((?x64990 (* l_0_18_297 l_0_18_297)))
 (let ((?x64988 (* l_0_18_296 l_0_18_296)))
 (let ((?x64986 (* l_0_18_276 l_0_18_276)))
 (let ((?x64984 (* l_0_18_275 l_0_18_275)))
 (let ((?x64982 (* l_0_18_255 l_0_18_255)))
 (let ((?x64980 (* l_0_18_254 l_0_18_254)))
 (let ((?x64978 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x64975 (* l_0_18_234 l_0_18_234)))
 (let ((?x64973 (* l_0_18_233 l_0_18_233)))
 (let ((?x64971 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x64965 (* l_0_18_213 l_0_18_213)))
 (let ((?x64963 (* l_0_18_212 l_0_18_212)))
 (let ((?x64960 (* l_0_18_2 l_0_18_2)))
 (let ((?x64961 (* 6.0 ?x64960)))
 (let ((?x64958 (* l_0_18_192 l_0_18_192)))
 (let ((?x64959 (- (- (* (* (- 2.0) l_0_18_1) l_0_18_2) (* l_0_18_191 l_0_18_191)) ?x64958)))
 (let ((?x64969 (+ (- (- (+ ?x64959 ?x64961) ?x64963) ?x64965) (* (* 2.0 l_0_18_22) l_0_18_23))))
 (let ((?x64985 (- (- (- (- (- (- (- ?x64969 ?x64971) ?x64973) ?x64975) ?x64978) ?x64980) ?x64982) ?x64984)))
 (let ((?x64997 (- (+ (- (- (- ?x64985 ?x64986) ?x64988) ?x64990) ?x64993) (* (* 1.0 l_0_18_44) l_0_18_44))))
 (let ((?x65003 (+ (- ?x64997 (* (* 1.0 l_0_18_45) l_0_18_45)) (* 1.0 (* l_0_18_65 l_0_18_65)))))
 (= (+ ?x65003 (* 1.0 (* l_0_18_66 l_0_18_66))) 0.0))))))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65108 (* ?x65107 l_0_18_68)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65105 (* ?x65104 l_0_18_67)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65102 (* ?x65101 l_0_18_47)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65099 (* ?x65098 l_0_18_46)))
 (let ((?x65095 (* 12.0 l_0_18_3)))
 (let ((?x65096 (* ?x65095 l_0_18_5)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65075 (* ?x65074 l_0_18_26)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65066 (* ?x65065 l_0_18_25)))
 (let ((?x65054 (* 12.0 l_0_18_2)))
 (let ((?x65055 (* ?x65054 l_0_18_4)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x65046 (* ?x63842 l_0_18_128)))
 (let ((?x65050 (- (- (* (* (- 2.0) l_0_18_1) l_0_18_4) ?x65046) (* (* 2.0 l_0_18_191) l_0_18_193))))
 (let ((?x65059 (- (+ (- ?x65050 (* (* 2.0 l_0_18_192) l_0_18_194)) ?x65055) (* (* 2.0 l_0_18_212) l_0_18_214))))
 (let ((?x65064 (+ (- ?x65059 (* (* 2.0 l_0_18_213) l_0_18_215)) (* (* 2.0 l_0_18_22) l_0_18_25))))
 (let ((?x65073 (- (- (- ?x65064 ?x65066) (* (* 2.0 l_0_18_233) l_0_18_235)) (* (* 2.0 l_0_18_234) l_0_18_236))))
 (let ((?x65082 (- (- (- ?x65073 ?x65075) (* (* 2.0 l_0_18_254) l_0_18_256)) (* (* 2.0 l_0_18_255) l_0_18_257))))
 (let ((?x65088 (- (- ?x65082 (* (* 2.0 l_0_18_275) l_0_18_277)) (* (* 2.0 l_0_18_276) l_0_18_278))))
 (let ((?x65094 (- (- ?x65088 (* (* 2.0 l_0_18_296) l_0_18_298)) (* (* 2.0 l_0_18_297) l_0_18_299))))
 (= (+ (+ (- (- (+ ?x65094 ?x65096) ?x65099) ?x65102) ?x65105) ?x65108) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x65209 (* ?x64276 l_0_18_86)))
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65207 (* ?x65107 l_0_18_71)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65205 (* ?x65104 l_0_18_70)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65203 (* ?x65101 l_0_18_50)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65201 (* ?x65098 l_0_18_49)))
 (let ((?x65095 (* 12.0 l_0_18_3)))
 (let ((?x65199 (* ?x65095 l_0_18_8)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65185 (* ?x65074 l_0_18_29)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65179 (* ?x65065 l_0_18_28)))
 (let ((?x65054 (* 12.0 l_0_18_2)))
 (let ((?x65171 (* ?x65054 l_0_18_7)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x65165 (* ?x64183 l_0_18_170)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x65163 (* ?x64180 l_0_18_149)))
 (let ((?x65154 (+ (* (* (- 2.0) l_0_18_1) l_0_18_7) (* (* 2.0 l_0_18_106) l_0_18_107))))
 (let ((?x65170 (- (- (+ (- ?x65154 ?x65163) ?x65165) (* (* 2.0 l_0_18_191) l_0_18_196)) (* (* 2.0 l_0_18_192) l_0_18_197))))
 (let ((?x65176 (- (- (+ ?x65170 ?x65171) (* (* 2.0 l_0_18_212) l_0_18_217)) (* (* 2.0 l_0_18_213) l_0_18_218))))
 (let ((?x65182 (- (- (+ ?x65176 (* (* 2.0 l_0_18_22) l_0_18_28)) ?x65179) (* (* 2.0 l_0_18_233) l_0_18_238))))
 (let ((?x65188 (- (- (- ?x65182 (* (* 2.0 l_0_18_234) l_0_18_239)) ?x65185) (* (* 2.0 l_0_18_254) l_0_18_259))))
 (let ((?x65192 (- (- ?x65188 (* (* 2.0 l_0_18_255) l_0_18_260)) (* (* 2.0 l_0_18_275) l_0_18_280))))
 (let ((?x65196 (- (- ?x65192 (* (* 2.0 l_0_18_276) l_0_18_281)) (* (* 2.0 l_0_18_296) l_0_18_301))))
 (let ((?x65204 (- (- (+ (- ?x65196 (* (* 2.0 l_0_18_297) l_0_18_302)) ?x65199) ?x65201) ?x65203)))
 (= (- (+ (+ ?x65204 ?x65205) ?x65207) ?x65209) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65311 (* ?x65107 l_0_18_75)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65309 (* ?x65104 l_0_18_74)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64931 (* ?x64048 l_0_18_65)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65306 (* ?x65101 l_0_18_54)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65304 (* ?x65098 l_0_18_53)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64929 (* ?x64044 l_0_18_44)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65289 (* ?x65074 l_0_18_33)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65283 (* ?x65065 l_0_18_32)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x65271 (* ?x64647 l_0_18_3)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x65269 (* ?x64644 l_0_18_2)))
 (let ((?x65274 (- (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_11) ?x65269) ?x65271) (* (* 2.0 l_0_18_191) l_0_18_200))))
 (let ((?x65278 (- (- ?x65274 (* (* 2.0 l_0_18_192) l_0_18_201)) (* (* 2.0 l_0_18_212) l_0_18_221))))
 (let ((?x65282 (+ (- ?x65278 (* (* 2.0 l_0_18_213) l_0_18_222)) (* (* 2.0 l_0_18_22) l_0_18_32))))
 (let ((?x65288 (- (- (- ?x65282 ?x65283) (* (* 2.0 l_0_18_233) l_0_18_242)) (* (* 2.0 l_0_18_234) l_0_18_243))))
 (let ((?x65294 (- (- (- ?x65288 ?x65289) (* (* 2.0 l_0_18_254) l_0_18_263)) (* (* 2.0 l_0_18_255) l_0_18_264))))
 (let ((?x65298 (- (- ?x65294 (* (* 2.0 l_0_18_275) l_0_18_284)) (* (* 2.0 l_0_18_276) l_0_18_285))))
 (let ((?x65302 (- (- ?x65298 (* (* 2.0 l_0_18_296) l_0_18_305)) (* (* 2.0 l_0_18_297) l_0_18_306))))
 (= (+ (+ (- (- (- (+ ?x65302 ?x64929) ?x65304) ?x65306) ?x64931) ?x65309) ?x65311) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65427 (* ?x65107 l_0_18_80)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65425 (* ?x65104 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x65423 (* ?x63754 l_0_18_65)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65421 (* ?x65101 l_0_18_59)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65419 (* ?x65098 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x65417 (* ?x63733 l_0_18_44)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65403 (* ?x65074 l_0_18_38)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65397 (* ?x65065 l_0_18_37)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64918 (* ?x63863 l_0_18_23)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x65384 (* ?x65383 l_0_18_3)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x65381 (* ?x65380 l_0_18_2)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x65046 (* ?x63842 l_0_18_128)))
 (let ((?x42705 (* 12.0 l_0_18_1)))
 (let ((?x64912 (* ?x42705 l_0_18_2)))
 (let ((?x65385 (+ (+ (+ (+ (* (* (- 2.0) l_0_18_1) l_0_18_16) ?x64912) ?x65046) ?x65381) ?x65384)))
 (let ((?x65389 (- (- ?x65385 (* (* 2.0 l_0_18_191) l_0_18_205)) (* (* 2.0 l_0_18_192) l_0_18_206))))
 (let ((?x65393 (- (- ?x65389 (* (* 2.0 l_0_18_212) l_0_18_226)) (* (* 2.0 l_0_18_213) l_0_18_227))))
 (let ((?x65400 (- (- (+ (- ?x65393 ?x64918) (* (* 2.0 l_0_18_22) l_0_18_37)) ?x65397) (* (* 2.0 l_0_18_233) l_0_18_247))))
 (let ((?x65406 (- (- (- ?x65400 (* (* 2.0 l_0_18_234) l_0_18_248)) ?x65403) (* (* 2.0 l_0_18_254) l_0_18_268))))
 (let ((?x65410 (- (- ?x65406 (* (* 2.0 l_0_18_255) l_0_18_269)) (* (* 2.0 l_0_18_275) l_0_18_289))))
 (let ((?x65414 (- (- ?x65410 (* (* 2.0 l_0_18_276) l_0_18_290)) (* (* 2.0 l_0_18_296) l_0_18_310))))
 (let ((?x65422 (- (- (- (- ?x65414 (* (* 2.0 l_0_18_297) l_0_18_311)) ?x65417) ?x65419) ?x65421)))
 (= (+ (+ (+ ?x65422 ?x65423) ?x65425) ?x65427) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64992 (* l_0_18_3 l_0_18_3)))
 (let ((?x33213 (* l_0_18_24 l_0_18_24)))
 (let ((?x65464 (- (+ (+ (* (- l_0_18_2) l_0_18_2) (* l_0_18_23 l_0_18_23)) ?x33213) ?x64992)))
 (= ?x65464 0.0)))))
(assert
 (let ((?x65479 (- (- (* (- l_0_18_128) l_0_18_128) (* l_0_18_129 l_0_18_129)) (* (* 2.0 l_0_18_2) l_0_18_4))))
 (let ((?x65485 (+ (+ ?x65479 (* (* 2.0 l_0_18_23) l_0_18_25)) (* (* 2.0 l_0_18_24) l_0_18_26))))
 (= (- ?x65485 (* (* 2.0 l_0_18_3) l_0_18_5)) 0.0))))
(assert
 (let ((?x65526 (* l_0_18_87 l_0_18_87)))
 (let ((?x65524 (* l_0_18_86 l_0_18_86)))
 (let ((?x65514 (* l_0_18_171 l_0_18_171)))
 (let ((?x65512 (* l_0_18_170 l_0_18_170)))
 (let ((?x65510 (* l_0_18_150 l_0_18_150)))
 (let ((?x65508 (* l_0_18_149 l_0_18_149)))
 (let ((?x65506 (* l_0_18_108 l_0_18_108)))
 (let ((?x65505 (* l_0_18_107 l_0_18_107)))
 (let ((?x65507 (+ ?x65505 ?x65506)))
 (let ((?x65517 (- (+ (+ (- (- ?x65507 ?x65508) ?x65510) ?x65512) ?x65514) (* (* 2.0 l_0_18_2) l_0_18_7))))
 (let ((?x65521 (+ (+ ?x65517 (* (* 2.0 l_0_18_23) l_0_18_28)) (* (* 2.0 l_0_18_24) l_0_18_29))))
 (= (- (- (- ?x65521 (* (* 2.0 l_0_18_3) l_0_18_8)) ?x65524) ?x65526) 0.0)))))))))))))
(assert
 (let ((?x65004 (* l_0_18_66 l_0_18_66)))
 (let ((?x65001 (* l_0_18_65 l_0_18_65)))
 (let ((?x54089 (* l_0_18_45 l_0_18_45)))
 (let ((?x65033 (* l_0_18_44 l_0_18_44)))
 (let ((?x54662 (- (* (* (- 2.0) l_0_18_11) l_0_18_2) (* (* 2.0 l_0_18_12) l_0_18_3))))
 (let ((?x54670 (+ (+ ?x54662 (* (* 2.0 l_0_18_23) l_0_18_32)) (* (* 2.0 l_0_18_24) l_0_18_33))))
 (= (- (- (+ (+ ?x54670 ?x65033) ?x54089) ?x65001) ?x65004) 0.0))))))))
(assert
 (let ((?x65004 (* l_0_18_66 l_0_18_66)))
 (let ((?x65570 (* 3.0 ?x65004)))
 (let ((?x65001 (* l_0_18_65 l_0_18_65)))
 (let ((?x65568 (* 3.0 ?x65001)))
 (let ((?x65566 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (let ((?x64992 (* l_0_18_3 l_0_18_3)))
 (let ((?x64993 (* 6.0 ?x64992)))
 (let ((?x64978 (* (* 6.0 l_0_18_24) l_0_18_24)))
 (let ((?x64971 (* (* 6.0 l_0_18_23) l_0_18_23)))
 (let ((?x64960 (* l_0_18_2 l_0_18_2)))
 (let ((?x64961 (* 6.0 ?x64960)))
 (let ((?x65550 (- (+ (* l_0_18_128 l_0_18_128) (* l_0_18_129 l_0_18_129)) (* (* 2.0 l_0_18_16) l_0_18_2))))
 (let ((?x65556 (+ (+ (- ?x65550 (* (* 2.0 l_0_18_17) l_0_18_3)) ?x64961) (* (* 2.0 l_0_18_23) l_0_18_37))))
 (let ((?x65561 (+ (- (+ (- ?x65556 ?x64971) (* (* 2.0 l_0_18_24) l_0_18_38)) ?x64978) ?x64993)))
 (let ((?x65571 (+ (+ (- (- ?x65561 (* (* 3.0 l_0_18_44) l_0_18_44)) ?x65566) ?x65568) ?x65570)))
 (= ?x65571 0.0)))))))))))))))))
(assert
 (let ((?x65606 (* l_0_18_6 l_0_18_6)))
 (let ((?x65604 (* l_0_18_5 l_0_18_5)))
 (let ((?x65602 (* l_0_18_4 l_0_18_4)))
 (let ((?x65600 (* l_0_18_27 l_0_18_27)))
 (let ((?x65598 (* l_0_18_26 l_0_18_26)))
 (let ((?x65596 (* l_0_18_25 l_0_18_25)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x65594 (* ?x65593 l_0_18_131)))
 (let ((?x65601 (+ (+ (+ (- (* (* (- 2.0) l_0_18_128) l_0_18_130) ?x65594) ?x65596) ?x65598) ?x65600)))
 (= (- (- (- ?x65601 ?x65602) ?x65604) ?x65606) 0.0)))))))))))
(assert
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65651 (* ?x65650 l_0_18_89)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65648 (* ?x65647 l_0_18_88)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65627 (* ?x65626 l_0_18_173)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65624 (* ?x65623 l_0_18_172)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x54800 (* ?x54797 l_0_18_152)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x54802 (* ?x54779 l_0_18_151)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x54758 (* ?x65593 l_0_18_134)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x54734 (* ?x54728 l_0_18_133)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x54752 (* ?x54768 l_0_18_110)))
 (let ((?x54803 (- (- (- (+ (* (* 2.0 l_0_18_107) l_0_18_109) ?x54752) ?x54734) ?x54758) ?x54802)))
 (let ((?x65631 (+ (+ (+ (- ?x54803 ?x54800) ?x65624) ?x65627) (* (* 2.0 l_0_18_25) l_0_18_28))))
 (let ((?x65637 (+ (+ ?x65631 (* (* 2.0 l_0_18_26) l_0_18_29)) (* (* 2.0 l_0_18_27) l_0_18_30))))
 (let ((?x65643 (- (- ?x65637 (* (* 2.0 l_0_18_4) l_0_18_7)) (* (* 2.0 l_0_18_5) l_0_18_8))))
 (= (- (- (- ?x65643 (* (* 2.0 l_0_18_6) l_0_18_9)) ?x65648) ?x65651) 0.0))))))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65108 (* ?x65107 l_0_18_68)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65105 (* ?x65104 l_0_18_67)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65102 (* ?x65101 l_0_18_47)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65099 (* ?x65098 l_0_18_46)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x65712 (* ?x65593 l_0_18_138)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x65710 (* ?x54728 l_0_18_137)))
 (let ((?x65709 (- (* (* (- 2.0) l_0_18_11) l_0_18_4) (* (* 2.0 l_0_18_12) l_0_18_5))))
 (let ((?x65718 (+ (- (- (- ?x65709 ?x65710) ?x65712) (* (* 2.0 l_0_18_13) l_0_18_6)) (* (* 2.0 l_0_18_25) l_0_18_32))))
 (let ((?x65722 (+ (+ ?x65718 (* (* 2.0 l_0_18_26) l_0_18_33)) (* (* 2.0 l_0_18_27) l_0_18_34))))
 (= (- (- (+ (+ ?x65722 ?x65099) ?x65102) ?x65105) ?x65108) 0.0)))))))))))))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x65760 (* ?x65759 l_0_18_68)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x65757 (* ?x65756 l_0_18_67)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x65754 (* ?x65753 l_0_18_47)))
 (let ((?x65095 (* 12.0 l_0_18_3)))
 (let ((?x65096 (* ?x65095 l_0_18_5)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65075 (* ?x65074 l_0_18_26)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65066 (* ?x65065 l_0_18_25)))
 (let ((?x65054 (* 12.0 l_0_18_2)))
 (let ((?x65055 (* ?x65054 l_0_18_4)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x54859 (* ?x65593 l_0_18_143)))
 (let ((?x65594 (* ?x65593 l_0_18_131)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x54963 (* ?x54728 l_0_18_142)))
 (let ((?x54877 (- (- (+ (- (* ?x54728 l_0_18_130) ?x54963) ?x65594) ?x54859) (* (* 2.0 l_0_18_16) l_0_18_4))))
 (let ((?x43727 (- (- ?x54877 (* (* 2.0 l_0_18_17) l_0_18_5)) (* (* 2.0 l_0_18_18) l_0_18_6))))
 (let ((?x65744 (+ (- (- (+ ?x43727 ?x65055) ?x65066) ?x65075) (* (* 2.0 l_0_18_25) l_0_18_37))))
 (let ((?x65748 (+ (+ ?x65744 (* (* 2.0 l_0_18_26) l_0_18_38)) (* (* 2.0 l_0_18_27) l_0_18_39))))
 (let ((?x65758 (+ (- (- (+ ?x65748 ?x65096) (* (* 6.0 l_0_18_44) l_0_18_46)) ?x65754) ?x65757)))
 (= (+ ?x65758 ?x65760) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64279 (* l_0_18_9 l_0_18_9)))
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65819 (* ?x65650 l_0_18_92)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65817 (* ?x65647 l_0_18_91)))
 (let ((?x64273 (* l_0_18_8 l_0_18_8)))
 (let ((?x64258 (* l_0_18_7 l_0_18_7)))
 (let ((?x53733 (* l_0_18_31 l_0_18_31)))
 (let ((?x64330 (* l_0_18_30 l_0_18_30)))
 (let ((?x53735 (* l_0_18_29 l_0_18_29)))
 (let ((?x43324 (* l_0_18_28 l_0_18_28)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65809 (* ?x65626 l_0_18_176)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65807 (* ?x65623 l_0_18_175)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65805 (* ?x54797 l_0_18_155)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65803 (* ?x54779 l_0_18_154)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65801 (* ?x54768 l_0_18_113)))
 (let ((?x65800 (+ (* (- l_0_18_10) l_0_18_10) (* (* 2.0 l_0_18_107) l_0_18_112))))
 (let ((?x65812 (+ (+ (+ (+ (- (- (+ ?x65800 ?x65801) ?x65803) ?x65805) ?x65807) ?x65809) ?x43324) ?x53735)))
 (let ((?x65821 (- (- (- (- (- (+ (+ ?x65812 ?x64330) ?x53733) ?x64258) ?x64273) ?x65817) ?x65819) ?x64279)))
 (= ?x65821 0.0))))))))))))))))))))))))))
(assert
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65880 (* ?x65650 l_0_18_96)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65878 (* ?x65647 l_0_18_95)))
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65207 (* ?x65107 l_0_18_71)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65205 (* ?x65104 l_0_18_70)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65203 (* ?x65101 l_0_18_50)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65201 (* ?x65098 l_0_18_49)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65860 (* ?x65626 l_0_18_180)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65858 (* ?x65623 l_0_18_179)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65856 (* ?x54797 l_0_18_159)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65854 (* ?x54779 l_0_18_158)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65845 (* ?x54768 l_0_18_117)))
 (let ((?x65844 (+ (* (* (- 2.0) l_0_18_10) l_0_18_14) (* (* 2.0 l_0_18_107) l_0_18_116))))
 (let ((?x65851 (- (- (+ ?x65844 ?x65845) (* (* 2.0 l_0_18_11) l_0_18_7)) (* (* 2.0 l_0_18_12) l_0_18_8))))
 (let ((?x65859 (+ (- (- (- ?x65851 (* (* 2.0 l_0_18_13) l_0_18_9)) ?x65854) ?x65856) ?x65858)))
 (let ((?x65867 (+ (+ (+ ?x65859 ?x65860) (* (* 2.0 l_0_18_28) l_0_18_32)) (* (* 2.0 l_0_18_29) l_0_18_33))))
 (let ((?x65873 (+ (+ ?x65867 (* (* 2.0 l_0_18_30) l_0_18_34)) (* (* 2.0 l_0_18_31) l_0_18_35))))
 (= (- (- (- (- (+ (+ ?x65873 ?x65201) ?x65203) ?x65205) ?x65207) ?x65878) ?x65880) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x65963 (* ?x65759 l_0_18_71)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x65961 (* ?x65756 l_0_18_70)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x65959 (* ?x65753 l_0_18_50)))
 (let ((?x65095 (* 12.0 l_0_18_3)))
 (let ((?x65199 (* ?x65095 l_0_18_8)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65185 (* ?x65074 l_0_18_29)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65179 (* ?x65065 l_0_18_28)))
 (let ((?x65054 (* 12.0 l_0_18_2)))
 (let ((?x65171 (* ?x65054 l_0_18_7)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65941 (* ?x65626 l_0_18_185)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65939 (* ?x65623 l_0_18_184)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65933 (* ?x54797 l_0_18_164)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65931 (* ?x54779 l_0_18_163)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x54758 (* ?x65593 l_0_18_134)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x54734 (* ?x54728 l_0_18_133)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65927 (* ?x54768 l_0_18_122)))
 (let ((?x54756 (* 2.0 l_0_18_107)))
 (let ((?x65925 (* ?x54756 l_0_18_121)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x65923 (* ?x65922 l_0_18_87)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x65920 (* ?x65919 l_0_18_86)))
 (let ((?x65928 (+ (+ (- (- (* (* (- 2.0) l_0_18_10) l_0_18_19) ?x65920) ?x65923) ?x65925) ?x65927)))
 (let ((?x65936 (- (- (- (+ (+ ?x65928 ?x54734) ?x54758) ?x65931) ?x65933) (* (* 2.0 l_0_18_16) l_0_18_7))))
 (let ((?x65944 (- (+ (+ (- ?x65936 (* (* 2.0 l_0_18_17) l_0_18_8)) ?x65939) ?x65941) (* (* 2.0 l_0_18_18) l_0_18_9))))
 (let ((?x65949 (+ (- (- (+ ?x65944 ?x65171) ?x65179) ?x65185) (* (* 2.0 l_0_18_28) l_0_18_37))))
 (let ((?x65954 (+ (+ (+ ?x65949 (* (* 2.0 l_0_18_29) l_0_18_38)) ?x65199) (* (* 2.0 l_0_18_30) l_0_18_39))))
 (let ((?x65958 (- (+ ?x65954 (* (* 2.0 l_0_18_31) l_0_18_40)) (* (* 6.0 l_0_18_44) l_0_18_49))))
 (= (+ (+ (- ?x65958 ?x65959) ?x65961) ?x65963) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65311 (* ?x65107 l_0_18_75)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65309 (* ?x65104 l_0_18_74)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65306 (* ?x65101 l_0_18_54)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65304 (* ?x65098 l_0_18_53)))
 (let ((?x43716 (* l_0_18_36 l_0_18_36)))
 (let ((?x43632 (* l_0_18_35 l_0_18_35)))
 (let ((?x64604 (* l_0_18_34 l_0_18_34)))
 (let ((?x43626 (* l_0_18_33 l_0_18_33)))
 (let ((?x52112 (* l_0_18_32 l_0_18_32)))
 (let ((?x64436 (* l_0_18_15 l_0_18_15)))
 (let ((?x64433 (* l_0_18_14 l_0_18_14)))
 (let ((?x64430 (* l_0_18_13 l_0_18_13)))
 (let ((?x66016 (- (- (* (- l_0_18_11) l_0_18_11) (* l_0_18_12 l_0_18_12)) ?x64430)))
 (let ((?x66023 (+ (+ (+ (+ (+ (- (- ?x66016 ?x64433) ?x64436) ?x52112) ?x43626) ?x64604) ?x43632) ?x43716)))
 (= (- (- (+ (+ ?x66023 ?x65304) ?x65306) ?x65309) ?x65311) 0.0))))))))))))))))))))
(assert
 (let ((?x65107 (* 2.0 l_0_18_66)))
 (let ((?x65427 (* ?x65107 l_0_18_80)))
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x66082 (* ?x65759 l_0_18_75)))
 (let ((?x65104 (* 2.0 l_0_18_65)))
 (let ((?x65425 (* ?x65104 l_0_18_79)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x66079 (* ?x65756 l_0_18_74)))
 (let ((?x65101 (* 2.0 l_0_18_45)))
 (let ((?x65421 (* ?x65101 l_0_18_59)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x66076 (* ?x65753 l_0_18_54)))
 (let ((?x65098 (* 2.0 l_0_18_44)))
 (let ((?x65419 (* ?x65098 l_0_18_58)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65289 (* ?x65074 l_0_18_33)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65283 (* ?x65065 l_0_18_32)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x65712 (* ?x65593 l_0_18_138)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x65710 (* ?x54728 l_0_18_137)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x65271 (* ?x64647 l_0_18_3)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x65269 (* ?x64644 l_0_18_2)))
 (let ((?x66044 (- (+ (* (* (- 2.0) l_0_18_11) l_0_18_16) ?x65269) (* (* 2.0 l_0_18_12) l_0_18_17))))
 (let ((?x66049 (- (+ (+ (+ ?x66044 ?x65271) ?x65710) ?x65712) (* (* 2.0 l_0_18_13) l_0_18_18))))
 (let ((?x66055 (- (- ?x66049 (* (* 2.0 l_0_18_14) l_0_18_19)) (* (* 2.0 l_0_18_15) l_0_18_20))))
 (let ((?x66063 (+ (+ (- (- ?x66055 ?x65283) ?x65289) (* (* 2.0 l_0_18_32) l_0_18_37)) (* (* 2.0 l_0_18_33) l_0_18_38))))
 (let ((?x66069 (+ (+ ?x66063 (* (* 2.0 l_0_18_34) l_0_18_39)) (* (* 2.0 l_0_18_35) l_0_18_40))))
 (let ((?x66074 (- (+ ?x66069 (* (* 2.0 l_0_18_36) l_0_18_41)) (* (* 6.0 l_0_18_44) l_0_18_53))))
 (let ((?x66084 (- (+ (- (+ (+ (- (+ ?x66074 ?x65419) ?x66076) ?x65421) ?x66079) ?x65425) ?x66082) ?x65427)))
 (= ?x66084 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x66143 (* ?x65759 l_0_18_80)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x66141 (* ?x65756 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x65423 (* ?x63754 l_0_18_65)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x66138 (* ?x65753 l_0_18_59)))
 (let ((?x65750 (* 6.0 l_0_18_44)))
 (let ((?x66136 (* ?x65750 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x65417 (* ?x63733 l_0_18_44)))
 (let ((?x53504 (* l_0_18_42 l_0_18_42)))
 (let ((?x42689 (* l_0_18_41 l_0_18_41)))
 (let ((?x53438 (* l_0_18_40 l_0_18_40)))
 (let ((?x53436 (* l_0_18_39 l_0_18_39)))
 (let ((?x20946 (* l_0_18_38 l_0_18_38)))
 (let ((?x63787 (* l_0_18_37 l_0_18_37)))
 (let ((?x65074 (* 12.0 l_0_18_24)))
 (let ((?x65403 (* ?x65074 l_0_18_38)))
 (let ((?x65065 (* 12.0 l_0_18_23)))
 (let ((?x65397 (* ?x65065 l_0_18_37)))
 (let ((?x63712 (* l_0_18_21 l_0_18_21)))
 (let ((?x63709 (* l_0_18_20 l_0_18_20)))
 (let ((?x63706 (* l_0_18_19 l_0_18_19)))
 (let ((?x63703 (* l_0_18_18 l_0_18_18)))
 (let ((?x63700 (* l_0_18_17 l_0_18_17)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x65384 (* ?x65383 l_0_18_3)))
 (let ((?x63695 (* l_0_18_16 l_0_18_16)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x65381 (* ?x65380 l_0_18_2)))
 (let ((?x65593 (* 2.0 l_0_18_129)))
 (let ((?x54859 (* ?x65593 l_0_18_143)))
 (let ((?x54728 (* 2.0 l_0_18_128)))
 (let ((?x54963 (* ?x54728 l_0_18_142)))
 (let ((?x66124 (- (- (- (+ (- (+ (+ ?x54963 ?x54859) ?x65381) ?x63695) ?x65384) ?x63700) ?x63703) ?x63706)))
 (let ((?x66131 (+ (+ (+ (- (- (- (- ?x66124 ?x63709) ?x63712) ?x65397) ?x65403) ?x63787) ?x20946) ?x53436)))
 (let ((?x66140 (+ (- (- (- (+ (+ (+ ?x66131 ?x53438) ?x42689) ?x53504) ?x65417) ?x66136) ?x66138) ?x65423)))
 (= (+ (+ ?x66140 ?x66141) ?x66143) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x66280 (* ?x66279 l_0_18_81)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x66277 (* ?x66276 l_0_18_80)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x66274 (* ?x66273 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66271 (* ?x63754 l_0_18_67)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x66269 (* ?x66268 l_0_18_60)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x66266 (* ?x66265 l_0_18_59)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x66263 (* ?x66262 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66260 (* ?x63733 l_0_18_46)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66240 (* ?x66239 l_0_18_39)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66237 (* ?x66236 l_0_18_38)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66225 (* ?x66224 l_0_18_37)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x66213 (* ?x63863 l_0_18_25)))
 (let ((?x66192 (* 12.0 l_0_18_18)))
 (let ((?x66193 (* ?x66192 l_0_18_6)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x66190 (* ?x65383 l_0_18_5)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x66188 (* ?x65380 l_0_18_4)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x63843 (* ?x63842 l_0_18_142)))
 (let ((?x66187 (- (+ (* (* 12.0 l_0_18_1) l_0_18_4) (* ?x63842 l_0_18_130)) ?x63843)))
 (let ((?x66197 (- (+ (+ (+ ?x66187 ?x66188) ?x66190) ?x66193) (* (* 2.0 l_0_18_193) l_0_18_205))))
 (let ((?x66203 (- (- ?x66197 (* (* 2.0 l_0_18_194) l_0_18_206)) (* (* 2.0 l_0_18_195) l_0_18_207))))
 (let ((?x66209 (- (- ?x66203 (* (* 2.0 l_0_18_214) l_0_18_226)) (* (* 2.0 l_0_18_215) l_0_18_227))))
 (let ((?x66217 (- (- (- ?x66209 (* (* 2.0 l_0_18_216) l_0_18_228)) ?x66213) (* (* 2.0 l_0_18_235) l_0_18_247))))
 (let ((?x66223 (- (- ?x66217 (* (* 2.0 l_0_18_236) l_0_18_248)) (* (* 2.0 l_0_18_237) l_0_18_249))))
 (let ((?x66232 (- (- (- ?x66223 ?x66225) (* (* 2.0 l_0_18_256) l_0_18_268)) (* (* 2.0 l_0_18_257) l_0_18_269))))
 (let ((?x66244 (- (- (- (- ?x66232 (* (* 2.0 l_0_18_258) l_0_18_270)) ?x66237) ?x66240) (* (* 2.0 l_0_18_277) l_0_18_289))))
 (let ((?x66250 (- (- ?x66244 (* (* 2.0 l_0_18_278) l_0_18_290)) (* (* 2.0 l_0_18_279) l_0_18_291))))
 (let ((?x66256 (- (- ?x66250 (* (* 2.0 l_0_18_298) l_0_18_310)) (* (* 2.0 l_0_18_299) l_0_18_311))))
 (let ((?x66267 (- (- (- (- ?x66256 (* (* 2.0 l_0_18_300) l_0_18_312)) ?x66260) ?x66263) ?x66266)))
 (= (+ (+ (+ (+ (- ?x66267 ?x66269) ?x66271) ?x66274) ?x66277) ?x66280) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64764 (* 2.0 l_0_18_73)))
 (let ((?x66421 (* ?x64764 l_0_18_82)))
 (let ((?x64761 (* 2.0 l_0_18_72)))
 (let ((?x66419 (* ?x64761 l_0_18_81)))
 (let ((?x64758 (* 2.0 l_0_18_71)))
 (let ((?x66417 (* ?x64758 l_0_18_80)))
 (let ((?x64755 (* 2.0 l_0_18_70)))
 (let ((?x66415 (* ?x64755 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66413 (* ?x63754 l_0_18_70)))
 (let ((?x64751 (* 2.0 l_0_18_52)))
 (let ((?x66411 (* ?x64751 l_0_18_61)))
 (let ((?x64748 (* 2.0 l_0_18_51)))
 (let ((?x66409 (* ?x64748 l_0_18_60)))
 (let ((?x64745 (* 2.0 l_0_18_50)))
 (let ((?x66407 (* ?x64745 l_0_18_59)))
 (let ((?x64742 (* 2.0 l_0_18_49)))
 (let ((?x66405 (* ?x64742 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66403 (* ?x63733 l_0_18_49)))
 (let ((?x64738 (* 12.0 l_0_18_31)))
 (let ((?x66401 (* ?x64738 l_0_18_40)))
 (let ((?x64723 (* 12.0 l_0_18_30)))
 (let ((?x66391 (* ?x64723 l_0_18_39)))
 (let ((?x64720 (* 12.0 l_0_18_29)))
 (let ((?x66389 (* ?x64720 l_0_18_38)))
 (let ((?x64705 (* 12.0 l_0_18_28)))
 (let ((?x66379 (* ?x64705 l_0_18_37)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64124 (* ?x63863 l_0_18_28)))
 (let ((?x66192 (* 12.0 l_0_18_18)))
 (let ((?x66344 (* ?x66192 l_0_18_9)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x66342 (* ?x65383 l_0_18_8)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x66340 (* ?x64183 l_0_18_184)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x66338 (* ?x65380 l_0_18_7)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x66336 (* ?x64180 l_0_18_163)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x66334 (* ?x63842 l_0_18_133)))
 (let ((?x64177 (* 2.0 l_0_18_106)))
 (let ((?x66321 (* ?x64177 l_0_18_121)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x55725 (* ?x65919 l_0_18_85)))
 (let ((?x32881 (* 12.0 l_0_18_10)))
 (let ((?x66318 (* ?x32881 l_0_18_19)))
 (let ((?x42705 (* 12.0 l_0_18_1)))
 (let ((?x64112 (* ?x42705 l_0_18_7)))
 (let ((?x66341 (+ (+ (- (+ (+ (- (+ ?x64112 ?x66318) ?x55725) ?x66321) ?x66334) ?x66336) ?x66338) ?x66340)))
 (let ((?x66349 (- (- (+ (+ ?x66341 ?x66342) ?x66344) (* (* 2.0 l_0_18_196) l_0_18_205)) (* (* 2.0 l_0_18_197) l_0_18_206))))
 (let ((?x66353 (- (- ?x66349 (* (* 2.0 l_0_18_198) l_0_18_207)) (* (* 2.0 l_0_18_199) l_0_18_208))))
 (let ((?x66357 (- (- ?x66353 (* (* 2.0 l_0_18_217) l_0_18_226)) (* (* 2.0 l_0_18_218) l_0_18_227))))
 (let ((?x66362 (- (- (- ?x66357 (* (* 2.0 l_0_18_219) l_0_18_228)) ?x64124) (* (* 2.0 l_0_18_220) l_0_18_229))))
 (let ((?x66366 (- (- ?x66362 (* (* 2.0 l_0_18_238) l_0_18_247)) (* (* 2.0 l_0_18_239) l_0_18_248))))
 (let ((?x66370 (- (- ?x66366 (* (* 2.0 l_0_18_240) l_0_18_249)) (* (* 2.0 l_0_18_241) l_0_18_250))))
 (let ((?x66374 (- (- ?x66370 (* (* 2.0 l_0_18_259) l_0_18_268)) (* (* 2.0 l_0_18_260) l_0_18_269))))
 (let ((?x66378 (- (- ?x66374 (* (* 2.0 l_0_18_261) l_0_18_270)) (* (* 2.0 l_0_18_262) l_0_18_271))))
 (let ((?x66384 (- (- (- ?x66378 ?x66379) (* (* 2.0 l_0_18_280) l_0_18_289)) (* (* 2.0 l_0_18_281) l_0_18_290))))
 (let ((?x66388 (- (- ?x66384 (* (* 2.0 l_0_18_282) l_0_18_291)) (* (* 2.0 l_0_18_283) l_0_18_292))))
 (let ((?x66396 (- (- (- (- ?x66388 ?x66389) ?x66391) (* (* 2.0 l_0_18_301) l_0_18_310)) (* (* 2.0 l_0_18_302) l_0_18_311))))
 (let ((?x66400 (- (- ?x66396 (* (* 2.0 l_0_18_303) l_0_18_312)) (* (* 2.0 l_0_18_304) l_0_18_313))))
 (let ((?x66414 (+ (- (- (- (- (- (- ?x66400 ?x66401) ?x66403) ?x66405) ?x66407) ?x66409) ?x66411) ?x66413)))
 (= (+ (+ (+ (+ ?x66414 ?x66415) ?x66417) ?x66419) ?x66421) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66646 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x66643 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x66640 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x66637 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x66634 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x64049 (* ?x64048 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66630 (* ?x63754 l_0_18_74)))
 (let ((?x66628 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x66625 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x66622 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x66619 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x66616 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x64045 (* ?x64044 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66612 (* ?x63733 l_0_18_53)))
 (let ((?x66610 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66607 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66604 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66601 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66598 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x64366 (* ?x63863 l_0_18_32)))
 (let ((?x66504 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x66501 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x66498 (* ?x64650 l_0_18_18)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x66482 (* ?x63842 l_0_18_137)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x56088 (* ?x64647 l_0_18_17)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x66479 (* ?x64644 l_0_18_16)))
 (let ((?x42705 (* 12.0 l_0_18_1)))
 (let ((?x43475 (* ?x42705 l_0_18_11)))
 (let ((?x66508 (- (+ (+ (+ (+ (+ (+ ?x43475 ?x66479) ?x56088) ?x66482) ?x66498) ?x66501) ?x66504) (* (* 2.0 l_0_18_200) l_0_18_205))))
 (let ((?x66514 (- (- ?x66508 (* (* 2.0 l_0_18_201) l_0_18_206)) (* (* 2.0 l_0_18_202) l_0_18_207))))
 (let ((?x66520 (- (- ?x66514 (* (* 2.0 l_0_18_203) l_0_18_208)) (* (* 2.0 l_0_18_204) l_0_18_209))))
 (let ((?x66527 (- (- (- ?x66520 ?x64366) (* (* 2.0 l_0_18_221) l_0_18_226)) (* (* 2.0 l_0_18_222) l_0_18_227))))
 (let ((?x66533 (- (- ?x66527 (* (* 2.0 l_0_18_223) l_0_18_228)) (* (* 2.0 l_0_18_224) l_0_18_229))))
 (let ((?x66539 (- (- ?x66533 (* (* 2.0 l_0_18_225) l_0_18_230)) (* (* 2.0 l_0_18_242) l_0_18_247))))
 (let ((?x66545 (- (- ?x66539 (* (* 2.0 l_0_18_243) l_0_18_248)) (* (* 2.0 l_0_18_244) l_0_18_249))))
 (let ((?x66551 (- (- ?x66545 (* (* 2.0 l_0_18_245) l_0_18_250)) (* (* 2.0 l_0_18_246) l_0_18_251))))
 (let ((?x66557 (- (- ?x66551 (* (* 2.0 l_0_18_263) l_0_18_268)) (* (* 2.0 l_0_18_264) l_0_18_269))))
 (let ((?x66563 (- (- ?x66557 (* (* 2.0 l_0_18_265) l_0_18_270)) (* (* 2.0 l_0_18_266) l_0_18_271))))
 (let ((?x66569 (- (- ?x66563 (* (* 2.0 l_0_18_267) l_0_18_272)) (* (* 2.0 l_0_18_284) l_0_18_289))))
 (let ((?x66575 (- (- ?x66569 (* (* 2.0 l_0_18_285) l_0_18_290)) (* (* 2.0 l_0_18_286) l_0_18_291))))
 (let ((?x66581 (- (- ?x66575 (* (* 2.0 l_0_18_287) l_0_18_292)) (* (* 2.0 l_0_18_288) l_0_18_293))))
 (let ((?x66587 (- (- ?x66581 (* (* 2.0 l_0_18_305) l_0_18_310)) (* (* 2.0 l_0_18_306) l_0_18_311))))
 (let ((?x66593 (- (- ?x66587 (* (* 2.0 l_0_18_307) l_0_18_312)) (* (* 2.0 l_0_18_308) l_0_18_313))))
 (let ((?x66605 (- (- (- (- ?x66593 (* (* 2.0 l_0_18_309) l_0_18_314)) ?x66598) ?x66601) ?x66604)))
 (let ((?x66623 (- (- (- (+ (- (- (- ?x66605 ?x66607) ?x66610) ?x66612) ?x64045) ?x66616) ?x66619) ?x66622)))
 (let ((?x66641 (+ (+ (+ (- (+ (- (- ?x66623 ?x66625) ?x66628) ?x66630) ?x64049) ?x66634) ?x66637) ?x66640)))
 (= (+ (+ ?x66641 ?x66643) ?x66646) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66770 (* l_0_18_69 l_0_18_69)))
 (let ((?x66771 (* 3.0 ?x66770)))
 (let ((?x66767 (* l_0_18_68 l_0_18_68)))
 (let ((?x66768 (* 3.0 ?x66767)))
 (let ((?x66764 (* l_0_18_67 l_0_18_67)))
 (let ((?x66765 (* 3.0 ?x66764)))
 (let ((?x65606 (* l_0_18_6 l_0_18_6)))
 (let ((?x66762 (* 6.0 ?x65606)))
 (let ((?x65604 (* l_0_18_5 l_0_18_5)))
 (let ((?x66760 (* 6.0 ?x65604)))
 (let ((?x66758 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x66755 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x65602 (* l_0_18_4 l_0_18_4)))
 (let ((?x66749 (* 6.0 ?x65602)))
 (let ((?x66747 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x66744 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x66741 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x66738 (* l_0_18_132 l_0_18_132)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x24218 (* ?x24207 l_0_18_144)))
 (let ((?x56357 (* l_0_18_131 l_0_18_131)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x56344 (* ?x56322 l_0_18_143)))
 (let ((?x56303 (* l_0_18_130 l_0_18_130)))
 (let ((?x66737 (- (+ (- (+ (* (* (- 2.0) l_0_18_130) l_0_18_142) ?x56303) ?x56344) ?x56357) ?x24218)))
 (let ((?x66753 (- (+ (- (- (- (+ ?x66737 ?x66738) ?x66741) ?x66744) ?x66747) ?x66749) (* (* 3.0 l_0_18_46) l_0_18_46))))
 (let ((?x66772 (+ (+ (+ (+ (+ (- (- ?x66753 ?x66755) ?x66758) ?x66760) ?x66762) ?x66765) ?x66768) ?x66771)))
 (= ?x66772 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x66895 (* ?x66894 l_0_18_72)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x66892 (* ?x66891 l_0_18_71)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x66889 (* ?x66888 l_0_18_70)))
 (let ((?x66886 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x66883 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x66880 (* ?x66879 l_0_18_51)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x66877 (* ?x66876 l_0_18_50)))
 (let ((?x66871 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66868 (* ?x66239 l_0_18_30)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66866 (* ?x66236 l_0_18_29)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66864 (* ?x66224 l_0_18_28)))
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x66862 (* ?x66861 l_0_18_186)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x66859 (* ?x66858 l_0_18_185)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x66856 (* ?x66855 l_0_18_184)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x66853 (* ?x66852 l_0_18_165)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x66850 (* ?x66849 l_0_18_164)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x66847 (* ?x66846 l_0_18_163)))
 (let ((?x66843 (* 2.0 l_0_18_136)))
 (let ((?x66844 (* ?x66843 l_0_18_145)))
 (let ((?x66840 (* 2.0 l_0_18_135)))
 (let ((?x66841 (* ?x66840 l_0_18_144)))
 (let ((?x66837 (* 2.0 l_0_18_134)))
 (let ((?x66838 (* ?x66837 l_0_18_143)))
 (let ((?x66834 (* 2.0 l_0_18_133)))
 (let ((?x66835 (* ?x66834 l_0_18_142)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x66832 (* ?x24207 l_0_18_135)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x66830 (* ?x56322 l_0_18_134)))
 (let ((?x66827 (* 2.0 l_0_18_130)))
 (let ((?x66828 (* ?x66827 l_0_18_133)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x66825 (* ?x66824 l_0_18_123)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x66822 (* ?x66821 l_0_18_122)))
 (let ((?x66818 (* 2.0 l_0_18_109)))
 (let ((?x66819 (* ?x66818 l_0_18_121)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x66816 (* ?x66815 l_0_18_90)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x66813 (* ?x65922 l_0_18_89)))
 (let ((?x66823 (+ (+ (- (- (* (* (- 2.0) l_0_18_100) l_0_18_88) ?x66813) ?x66816) ?x66819) ?x66822)))
 (let ((?x66842 (- (- (- (+ (+ (+ (+ ?x66823 ?x66825) ?x66828) ?x66830) ?x66832) ?x66835) ?x66838) ?x66841)))
 (let ((?x66863 (+ (+ (+ (- (- (- (- ?x66842 ?x66844) ?x66847) ?x66850) ?x66853) ?x66856) ?x66859) ?x66862)))
 (let ((?x66875 (- (+ (- (- (- ?x66863 ?x66864) ?x66866) ?x66868) ?x66871) (* (* 6.0 l_0_18_46) l_0_18_49))))
 (let ((?x66896 (+ (+ (+ (+ (+ (- (- ?x66875 ?x66877) ?x66880) ?x66883) ?x66886) ?x66889) ?x66892) ?x66895)))
 (= ?x66896 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x66280 (* ?x66279 l_0_18_81)))
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x67007 (* ?x66894 l_0_18_76)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x66277 (* ?x66276 l_0_18_80)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x67004 (* ?x66891 l_0_18_75)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x66274 (* ?x66273 l_0_18_79)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x67001 (* ?x66888 l_0_18_74)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x66269 (* ?x66268 l_0_18_60)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x66998 (* ?x66879 l_0_18_55)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x66266 (* ?x66265 l_0_18_59)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x66995 (* ?x66876 l_0_18_54)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x66263 (* ?x66262 l_0_18_58)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66990 (* ?x66239 l_0_18_34)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66988 (* ?x66236 l_0_18_33)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66986 (* ?x66224 l_0_18_32)))
 (let ((?x66984 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66981 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66978 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66975 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66972 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x66969 (* ?x24207 l_0_18_139)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x66967 (* ?x56322 l_0_18_138)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x66963 (* ?x64650 l_0_18_6)))
 (let ((?x66962 (+ (* (* 12.0 l_0_18_11) l_0_18_4) (* (* 12.0 l_0_18_12) l_0_18_5))))
 (let ((?x66970 (+ (+ (+ (+ ?x66962 ?x66963) (* (* 2.0 l_0_18_130) l_0_18_137)) ?x66967) ?x66969)))
 (let ((?x66989 (- (- (- (- (- (- (- ?x66970 ?x66972) ?x66975) ?x66978) ?x66981) ?x66984) ?x66986) ?x66988)))
 (let ((?x66996 (- (+ (- (- ?x66989 ?x66990) (* (* 6.0 l_0_18_46) l_0_18_53)) ?x66263) ?x66995)))
 (let ((?x67006 (- (+ (- (+ (+ (- (+ ?x66996 ?x66266) ?x66998) ?x66269) ?x67001) ?x66274) ?x67004) ?x66277)))
 (= (- (+ ?x67006 ?x67007) ?x66280) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x67094 (* ?x66894 l_0_18_81)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x67092 (* ?x66891 l_0_18_80)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x67090 (* ?x66888 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66271 (* ?x63754 l_0_18_67)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x67087 (* ?x66879 l_0_18_60)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x67085 (* ?x66876 l_0_18_59)))
 (let ((?x66873 (* 6.0 l_0_18_46)))
 (let ((?x67083 (* ?x66873 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66260 (* ?x63733 l_0_18_46)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66240 (* ?x66239 l_0_18_39)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66237 (* ?x66236 l_0_18_38)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66225 (* ?x66224 l_0_18_37)))
 (let ((?x66192 (* 12.0 l_0_18_18)))
 (let ((?x66193 (* ?x66192 l_0_18_6)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x66190 (* ?x65383 l_0_18_5)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x66188 (* ?x65380 l_0_18_4)))
 (let ((?x63691 (* l_0_18_147 l_0_18_147)))
 (let ((?x63689 (* l_0_18_146 l_0_18_146)))
 (let ((?x63687 (* l_0_18_145 l_0_18_145)))
 (let ((?x63685 (* l_0_18_144 l_0_18_144)))
 (let ((?x63683 (* l_0_18_143 l_0_18_143)))
 (let ((?x63681 (* l_0_18_142 l_0_18_142)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x24218 (* ?x24207 l_0_18_144)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x56344 (* ?x56322 l_0_18_143)))
 (let ((?x67071 (- (- (+ (+ (* (* 2.0 l_0_18_130) l_0_18_142) ?x56344) ?x24218) ?x63681) ?x63683)))
 (let ((?x67078 (+ (+ (+ (- (- (- (- ?x67071 ?x63685) ?x63687) ?x63689) ?x63691) ?x66188) ?x66190) ?x66193)))
 (let ((?x67088 (- (- (- (- (- (- (- ?x67078 ?x66225) ?x66237) ?x66240) ?x66260) ?x67083) ?x67085) ?x67087)))
 (= (+ (+ (+ (+ ?x67088 ?x66271) ?x67090) ?x67092) ?x67094) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64279 (* l_0_18_9 l_0_18_9)))
 (let ((?x64280 (* 6.0 ?x64279)))
 (let ((?x64273 (* l_0_18_8 l_0_18_8)))
 (let ((?x64274 (* 6.0 ?x64273)))
 (let ((?x64270 (* l_0_18_73 l_0_18_73)))
 (let ((?x67180 (* 3.0 ?x64270)))
 (let ((?x64267 (* l_0_18_72 l_0_18_72)))
 (let ((?x67178 (* 3.0 ?x64267)))
 (let ((?x64264 (* l_0_18_71 l_0_18_71)))
 (let ((?x67176 (* 3.0 ?x64264)))
 (let ((?x64261 (* l_0_18_70 l_0_18_70)))
 (let ((?x67174 (* 3.0 ?x64261)))
 (let ((?x64258 (* l_0_18_7 l_0_18_7)))
 (let ((?x64259 (* 6.0 ?x64258)))
 (let ((?x67171 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x67168 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x67165 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x64244 (* (* 6.0 l_0_18_31) l_0_18_31)))
 (let ((?x64233 (* (* 6.0 l_0_18_30) l_0_18_30)))
 (let ((?x64230 (* (* 6.0 l_0_18_29) l_0_18_29)))
 (let ((?x64219 (* (* 6.0 l_0_18_28) l_0_18_28)))
 (let ((?x67154 (* 2.0 l_0_18_178)))
 (let ((?x67155 (* ?x67154 l_0_18_187)))
 (let ((?x67151 (* 2.0 l_0_18_177)))
 (let ((?x67152 (* ?x67151 l_0_18_186)))
 (let ((?x67148 (* 2.0 l_0_18_176)))
 (let ((?x67149 (* ?x67148 l_0_18_185)))
 (let ((?x67145 (* 2.0 l_0_18_175)))
 (let ((?x67146 (* ?x67145 l_0_18_184)))
 (let ((?x67142 (* 2.0 l_0_18_157)))
 (let ((?x67143 (* ?x67142 l_0_18_166)))
 (let ((?x67139 (* 2.0 l_0_18_156)))
 (let ((?x67140 (* ?x67139 l_0_18_165)))
 (let ((?x67136 (* 2.0 l_0_18_155)))
 (let ((?x67137 (* ?x67136 l_0_18_164)))
 (let ((?x67133 (* 2.0 l_0_18_154)))
 (let ((?x67134 (* ?x67133 l_0_18_163)))
 (let ((?x67131 (* l_0_18_136 l_0_18_136)))
 (let ((?x67129 (* l_0_18_135 l_0_18_135)))
 (let ((?x67127 (* l_0_18_134 l_0_18_134)))
 (let ((?x67125 (* l_0_18_133 l_0_18_133)))
 (let ((?x67122 (* 2.0 l_0_18_115)))
 (let ((?x67123 (* ?x67122 l_0_18_124)))
 (let ((?x67119 (* 2.0 l_0_18_114)))
 (let ((?x67120 (* ?x67119 l_0_18_123)))
 (let ((?x67116 (* 2.0 l_0_18_113)))
 (let ((?x67117 (* ?x67116 l_0_18_122)))
 (let ((?x67113 (* 2.0 l_0_18_112)))
 (let ((?x67114 (* ?x67113 l_0_18_121)))
 (let ((?x67110 (* 2.0 l_0_18_103)))
 (let ((?x67111 (* ?x67110 l_0_18_94)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x67108 (* ?x66815 l_0_18_93)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x67106 (* ?x65922 l_0_18_92)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x67104 (* ?x65919 l_0_18_91)))
 (let ((?x64174 (* l_0_18_10 l_0_18_10)))
 (let ((?x64175 (* 6.0 ?x64174)))
 (let ((?x67121 (+ (+ (+ (- (- (- (- ?x64175 ?x67104) ?x67106) ?x67108) ?x67111) ?x67114) ?x67117) ?x67120)))
 (let ((?x67138 (- (- (+ (+ (+ (+ (+ ?x67121 ?x67123) ?x67125) ?x67127) ?x67129) ?x67131) ?x67134) ?x67137)))
 (let ((?x67157 (- (+ (+ (+ (+ (- (- ?x67138 ?x67140) ?x67143) ?x67146) ?x67149) ?x67152) ?x67155) ?x64219)))
 (let ((?x67163 (- (- (- (- ?x67157 ?x64230) ?x64233) ?x64244) (* (* 3.0 l_0_18_49) l_0_18_49))))
 (let ((?x67179 (+ (+ (+ (+ (- (- (- ?x67163 ?x67165) ?x67168) ?x67171) ?x64259) ?x67174) ?x67176) ?x67178)))
 (= (+ (+ (+ ?x67179 ?x67180) ?x64274) ?x64280) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64764 (* 2.0 l_0_18_73)))
 (let ((?x66421 (* ?x64764 l_0_18_82)))
 (let ((?x67336 (* 6.0 l_0_18_73)))
 (let ((?x67337 (* ?x67336 l_0_18_77)))
 (let ((?x64761 (* 2.0 l_0_18_72)))
 (let ((?x66419 (* ?x64761 l_0_18_81)))
 (let ((?x67332 (* 6.0 l_0_18_72)))
 (let ((?x67333 (* ?x67332 l_0_18_76)))
 (let ((?x64758 (* 2.0 l_0_18_71)))
 (let ((?x66417 (* ?x64758 l_0_18_80)))
 (let ((?x67328 (* 6.0 l_0_18_71)))
 (let ((?x67329 (* ?x67328 l_0_18_75)))
 (let ((?x64755 (* 2.0 l_0_18_70)))
 (let ((?x66415 (* ?x64755 l_0_18_79)))
 (let ((?x67324 (* 6.0 l_0_18_70)))
 (let ((?x67325 (* ?x67324 l_0_18_74)))
 (let ((?x64751 (* 2.0 l_0_18_52)))
 (let ((?x66411 (* ?x64751 l_0_18_61)))
 (let ((?x67320 (* 6.0 l_0_18_52)))
 (let ((?x67321 (* ?x67320 l_0_18_56)))
 (let ((?x64748 (* 2.0 l_0_18_51)))
 (let ((?x66409 (* ?x64748 l_0_18_60)))
 (let ((?x67316 (* 6.0 l_0_18_51)))
 (let ((?x67317 (* ?x67316 l_0_18_55)))
 (let ((?x64745 (* 2.0 l_0_18_50)))
 (let ((?x66407 (* ?x64745 l_0_18_59)))
 (let ((?x67312 (* 6.0 l_0_18_50)))
 (let ((?x67313 (* ?x67312 l_0_18_54)))
 (let ((?x64742 (* 2.0 l_0_18_49)))
 (let ((?x66405 (* ?x64742 l_0_18_58)))
 (let ((?x64738 (* 12.0 l_0_18_31)))
 (let ((?x64739 (* ?x64738 l_0_18_35)))
 (let ((?x64723 (* 12.0 l_0_18_30)))
 (let ((?x64724 (* ?x64723 l_0_18_34)))
 (let ((?x64720 (* 12.0 l_0_18_29)))
 (let ((?x64721 (* ?x64720 l_0_18_33)))
 (let ((?x64705 (* 12.0 l_0_18_28)))
 (let ((?x64706 (* ?x64705 l_0_18_32)))
 (let ((?x67302 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x67299 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x67296 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x67293 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x67290 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x67287 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x67284 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x67281 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x67278 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x67275 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x66843 (* 2.0 l_0_18_136)))
 (let ((?x67272 (* ?x66843 l_0_18_140)))
 (let ((?x66840 (* 2.0 l_0_18_135)))
 (let ((?x67270 (* ?x66840 l_0_18_139)))
 (let ((?x66837 (* 2.0 l_0_18_134)))
 (let ((?x67268 (* ?x66837 l_0_18_138)))
 (let ((?x66834 (* 2.0 l_0_18_133)))
 (let ((?x67266 (* ?x66834 l_0_18_137)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x64651 (* ?x64650 l_0_18_9)))
 (let ((?x67263 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x64648 (* ?x64647 l_0_18_8)))
 (let ((?x67259 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x67256 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x67253 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x67250 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x64645 (* ?x64644 l_0_18_7)))
 (let ((?x67246 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x67110 (* 2.0 l_0_18_103)))
 (let ((?x67243 (* ?x67110 l_0_18_98)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x67241 (* ?x66815 l_0_18_97)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x67239 (* ?x65922 l_0_18_96)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x45468 (* ?x65919 l_0_18_95)))
 (let ((?x32881 (* 12.0 l_0_18_10)))
 (let ((?x64640 (* ?x32881 l_0_18_14)))
 (let ((?x67251 (+ (+ (- (- (- (- (- ?x64640 ?x45468) ?x67239) ?x67241) ?x67243) ?x67246) ?x64645) ?x67250)))
 (let ((?x67267 (+ (+ (+ (+ (+ (+ (+ ?x67251 ?x67253) ?x67256) ?x67259) ?x64648) ?x67263) ?x64651) ?x67266)))
 (let ((?x67285 (- (- (- (- (+ (+ (+ ?x67267 ?x67268) ?x67270) ?x67272) ?x67275) ?x67278) ?x67281) ?x67284)))
 (let ((?x67304 (- (+ (+ (+ (+ (+ (- ?x67285 ?x67287) ?x67290) ?x67293) ?x67296) ?x67299) ?x67302) ?x64706)))
 (let ((?x67310 (- (- (- (- ?x67304 ?x64721) ?x64724) ?x64739) (* (* 6.0 l_0_18_49) l_0_18_53))))
 (let ((?x67323 (+ (- (+ (- (+ (- (+ ?x67310 ?x66405) ?x67313) ?x66407) ?x67317) ?x66409) ?x67321) ?x66411)))
 (let ((?x67338 (+ (- (+ (- (+ (- (+ ?x67323 ?x67325) ?x66415) ?x67329) ?x66417) ?x67333) ?x66419) ?x67337)))
 (= (- ?x67338 ?x66421) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67336 (* 6.0 l_0_18_73)))
 (let ((?x67488 (* ?x67336 l_0_18_82)))
 (let ((?x67332 (* 6.0 l_0_18_72)))
 (let ((?x67486 (* ?x67332 l_0_18_81)))
 (let ((?x67328 (* 6.0 l_0_18_71)))
 (let ((?x67484 (* ?x67328 l_0_18_80)))
 (let ((?x67324 (* 6.0 l_0_18_70)))
 (let ((?x67482 (* ?x67324 l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66413 (* ?x63754 l_0_18_70)))
 (let ((?x67320 (* 6.0 l_0_18_52)))
 (let ((?x67479 (* ?x67320 l_0_18_61)))
 (let ((?x67316 (* 6.0 l_0_18_51)))
 (let ((?x67477 (* ?x67316 l_0_18_60)))
 (let ((?x67312 (* 6.0 l_0_18_50)))
 (let ((?x67475 (* ?x67312 l_0_18_59)))
 (let ((?x67308 (* 6.0 l_0_18_49)))
 (let ((?x67473 (* ?x67308 l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66403 (* ?x63733 l_0_18_49)))
 (let ((?x64738 (* 12.0 l_0_18_31)))
 (let ((?x66401 (* ?x64738 l_0_18_40)))
 (let ((?x64723 (* 12.0 l_0_18_30)))
 (let ((?x66391 (* ?x64723 l_0_18_39)))
 (let ((?x64720 (* 12.0 l_0_18_29)))
 (let ((?x66389 (* ?x64720 l_0_18_38)))
 (let ((?x64705 (* 12.0 l_0_18_28)))
 (let ((?x66379 (* ?x64705 l_0_18_37)))
 (let ((?x67466 (* l_0_18_189 l_0_18_189)))
 (let ((?x67464 (* l_0_18_188 l_0_18_188)))
 (let ((?x67462 (* l_0_18_187 l_0_18_187)))
 (let ((?x67460 (* l_0_18_186 l_0_18_186)))
 (let ((?x67458 (* l_0_18_185 l_0_18_185)))
 (let ((?x67456 (* l_0_18_184 l_0_18_184)))
 (let ((?x66192 (* 12.0 l_0_18_18)))
 (let ((?x66344 (* ?x66192 l_0_18_9)))
 (let ((?x65383 (* 12.0 l_0_18_17)))
 (let ((?x66342 (* ?x65383 l_0_18_8)))
 (let ((?x67452 (* l_0_18_168 l_0_18_168)))
 (let ((?x67450 (* l_0_18_167 l_0_18_167)))
 (let ((?x67448 (* l_0_18_166 l_0_18_166)))
 (let ((?x67446 (* l_0_18_165 l_0_18_165)))
 (let ((?x67444 (* l_0_18_164 l_0_18_164)))
 (let ((?x67442 (* l_0_18_163 l_0_18_163)))
 (let ((?x65380 (* 12.0 l_0_18_16)))
 (let ((?x66338 (* ?x65380 l_0_18_7)))
 (let ((?x66843 (* 2.0 l_0_18_136)))
 (let ((?x66844 (* ?x66843 l_0_18_145)))
 (let ((?x66840 (* 2.0 l_0_18_135)))
 (let ((?x66841 (* ?x66840 l_0_18_144)))
 (let ((?x66837 (* 2.0 l_0_18_134)))
 (let ((?x66838 (* ?x66837 l_0_18_143)))
 (let ((?x66834 (* 2.0 l_0_18_133)))
 (let ((?x66835 (* ?x66834 l_0_18_142)))
 (let ((?x67435 (* l_0_18_126 l_0_18_126)))
 (let ((?x67433 (* l_0_18_125 l_0_18_125)))
 (let ((?x67431 (* l_0_18_124 l_0_18_124)))
 (let ((?x67429 (* l_0_18_123 l_0_18_123)))
 (let ((?x67427 (* l_0_18_122 l_0_18_122)))
 (let ((?x67425 (* l_0_18_121 l_0_18_121)))
 (let ((?x67423 (* l_0_18_105 l_0_18_105)))
 (let ((?x45581 (* l_0_18_104 l_0_18_104)))
 (let ((?x57220 (* l_0_18_103 l_0_18_103)))
 (let ((?x24813 (* l_0_18_102 l_0_18_102)))
 (let ((?x24841 (* l_0_18_101 l_0_18_101)))
 (let ((?x45461 (* l_0_18_100 l_0_18_100)))
 (let ((?x32881 (* 12.0 l_0_18_10)))
 (let ((?x66318 (* ?x32881 l_0_18_19)))
 (let ((?x67426 (+ (- (- (- (- (- (- ?x66318 ?x45461) ?x24841) ?x24813) ?x57220) ?x45581) ?x67423) ?x67425)))
 (let ((?x67438 (+ (+ (+ (+ (+ (+ (+ ?x67426 ?x67427) ?x67429) ?x67431) ?x67433) ?x67435) ?x66835) ?x66838)))
 (let ((?x67449 (- (- (- (- (+ (+ (+ ?x67438 ?x66841) ?x66844) ?x66338) ?x67442) ?x67444) ?x67446) ?x67448)))
 (let ((?x67461 (+ (+ (+ (+ (+ (- (- ?x67449 ?x67450) ?x67452) ?x66342) ?x66344) ?x67456) ?x67458) ?x67460)))
 (let ((?x67471 (- (- (- (- (+ (+ (+ ?x67461 ?x67462) ?x67464) ?x67466) ?x66379) ?x66389) ?x66391) ?x66401)))
 (let ((?x67483 (+ (+ (- (- (- (- (- ?x67471 ?x66403) ?x67473) ?x67475) ?x67477) ?x67479) ?x66413) ?x67482)))
 (= (+ (+ (+ ?x67483 ?x67484) ?x67486) ?x67488) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64543 (* l_0_18_78 l_0_18_78)))
 (let ((?x67569 (* 3.0 ?x64543)))
 (let ((?x66646 (* (* 2.0 l_0_18_78) l_0_18_83)))
 (let ((?x64540 (* l_0_18_77 l_0_18_77)))
 (let ((?x67566 (* 3.0 ?x64540)))
 (let ((?x66643 (* (* 2.0 l_0_18_77) l_0_18_82)))
 (let ((?x64537 (* l_0_18_76 l_0_18_76)))
 (let ((?x67563 (* 3.0 ?x64537)))
 (let ((?x66640 (* (* 2.0 l_0_18_76) l_0_18_81)))
 (let ((?x64534 (* l_0_18_75 l_0_18_75)))
 (let ((?x67560 (* 3.0 ?x64534)))
 (let ((?x66637 (* (* 2.0 l_0_18_75) l_0_18_80)))
 (let ((?x64531 (* l_0_18_74 l_0_18_74)))
 (let ((?x67557 (* 3.0 ?x64531)))
 (let ((?x66634 (* (* 2.0 l_0_18_74) l_0_18_79)))
 (let ((?x67554 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x66628 (* (* 2.0 l_0_18_57) l_0_18_62)))
 (let ((?x67550 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x66625 (* (* 2.0 l_0_18_56) l_0_18_61)))
 (let ((?x67546 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x66622 (* (* 2.0 l_0_18_55) l_0_18_60)))
 (let ((?x67542 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x66619 (* (* 2.0 l_0_18_54) l_0_18_59)))
 (let ((?x66616 (* (* 2.0 l_0_18_53) l_0_18_58)))
 (let ((?x64512 (* (* 6.0 l_0_18_36) l_0_18_36)))
 (let ((?x64509 (* (* 6.0 l_0_18_35) l_0_18_35)))
 (let ((?x64506 (* (* 6.0 l_0_18_34) l_0_18_34)))
 (let ((?x64503 (* (* 6.0 l_0_18_33) l_0_18_33)))
 (let ((?x64500 (* (* 6.0 l_0_18_32) l_0_18_32)))
 (let ((?x64436 (* l_0_18_15 l_0_18_15)))
 (let ((?x64437 (* 6.0 ?x64436)))
 (let ((?x67528 (* l_0_18_141 l_0_18_141)))
 (let ((?x67526 (* l_0_18_140 l_0_18_140)))
 (let ((?x64433 (* l_0_18_14 l_0_18_14)))
 (let ((?x64434 (* 6.0 ?x64433)))
 (let ((?x67523 (* l_0_18_139 l_0_18_139)))
 (let ((?x67503 (* l_0_18_138 l_0_18_138)))
 (let ((?x24937 (* l_0_18_137 l_0_18_137)))
 (let ((?x64430 (* l_0_18_13 l_0_18_13)))
 (let ((?x64431 (* 6.0 ?x64430)))
 (let ((?x64427 (* l_0_18_12 l_0_18_12)))
 (let ((?x64428 (* 6.0 ?x64427)))
 (let ((?x64424 (* l_0_18_11 l_0_18_11)))
 (let ((?x64425 (* 6.0 ?x64424)))
 (let ((?x67527 (+ (+ (+ (+ (+ (+ (+ ?x64425 ?x64428) ?x64431) ?x24937) ?x67503) ?x67523) ?x64434) ?x67526)))
 (let ((?x67535 (- (- (- (- (- (+ (+ ?x67527 ?x67528) ?x64437) ?x64500) ?x64503) ?x64506) ?x64509) ?x64512)))
 (let ((?x67543 (- (+ (- (+ ?x67535 ?x66616) (* (* 3.0 l_0_18_53) l_0_18_53)) ?x66619) ?x67542)))
 (let ((?x67556 (- (- (+ (- (+ (- (+ ?x67543 ?x66622) ?x67546) ?x66625) ?x67550) ?x66628) ?x67554) ?x66634)))
 (let ((?x67567 (+ (- (+ (- (+ (- (+ ?x67556 ?x67557) ?x66637) ?x67560) ?x66640) ?x67563) ?x66643) ?x67566)))
 (= (+ (- ?x67567 ?x66646) ?x67569) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63772 (* l_0_18_84 l_0_18_84)))
 (let ((?x63769 (* l_0_18_83 l_0_18_83)))
 (let ((?x63766 (* l_0_18_82 l_0_18_82)))
 (let ((?x63763 (* l_0_18_81 l_0_18_81)))
 (let ((?x63760 (* l_0_18_80 l_0_18_80)))
 (let ((?x63757 (* l_0_18_79 l_0_18_79)))
 (let ((?x67637 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x67634 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x67631 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x67628 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x67625 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x63754 (* 6.0 l_0_18_64)))
 (let ((?x66630 (* ?x63754 l_0_18_74)))
 (let ((?x42703 (* l_0_18_63 l_0_18_63)))
 (let ((?x63812 (* l_0_18_62 l_0_18_62)))
 (let ((?x53513 (* l_0_18_61 l_0_18_61)))
 (let ((?x42698 (* l_0_18_60 l_0_18_60)))
 (let ((?x53427 (* l_0_18_59 l_0_18_59)))
 (let ((?x21042 (* l_0_18_58 l_0_18_58)))
 (let ((?x67615 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x67612 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x67609 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x67606 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x67603 (* (* 6.0 l_0_18_53) l_0_18_58)))
 (let ((?x63733 (* 6.0 l_0_18_43)))
 (let ((?x66612 (* ?x63733 l_0_18_53)))
 (let ((?x66610 (* (* 12.0 l_0_18_36) l_0_18_41)))
 (let ((?x66607 (* (* 12.0 l_0_18_35) l_0_18_40)))
 (let ((?x66604 (* (* 12.0 l_0_18_34) l_0_18_39)))
 (let ((?x66601 (* (* 12.0 l_0_18_33) l_0_18_38)))
 (let ((?x66598 (* (* 12.0 l_0_18_32) l_0_18_37)))
 (let ((?x66504 (* (* 12.0 l_0_18_15) l_0_18_20)))
 (let ((?x66984 (* (* 2.0 l_0_18_141) l_0_18_146)))
 (let ((?x66981 (* (* 2.0 l_0_18_140) l_0_18_145)))
 (let ((?x66501 (* (* 12.0 l_0_18_14) l_0_18_19)))
 (let ((?x66978 (* (* 2.0 l_0_18_139) l_0_18_144)))
 (let ((?x66975 (* (* 2.0 l_0_18_138) l_0_18_143)))
 (let ((?x66972 (* (* 2.0 l_0_18_137) l_0_18_142)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x66498 (* ?x64650 l_0_18_18)))
 (let ((?x64647 (* 12.0 l_0_18_12)))
 (let ((?x56088 (* ?x64647 l_0_18_17)))
 (let ((?x64644 (* 12.0 l_0_18_11)))
 (let ((?x66479 (* ?x64644 l_0_18_16)))
 (let ((?x67593 (+ (+ (+ (+ (+ (+ (+ ?x66479 ?x56088) ?x66498) ?x66972) ?x66975) ?x66978) ?x66501) ?x66981)))
 (let ((?x67600 (- (- (- (- (- (+ (+ ?x67593 ?x66984) ?x66504) ?x66598) ?x66601) ?x66604) ?x66607) ?x66610)))
 (let ((?x67617 (+ (- (- (- (- (- (- ?x67600 ?x66612) ?x67603) ?x67606) ?x67609) ?x67612) ?x67615) ?x21042)))
 (let ((?x67626 (+ (+ (+ (+ (+ (+ (+ ?x67617 ?x53427) ?x42698) ?x53513) ?x63812) ?x42703) ?x66630) ?x67625)))
 (let ((?x67641 (- (- (- (+ (+ (+ (+ ?x67626 ?x67628) ?x67631) ?x67634) ?x67637) ?x63757) ?x63760) ?x63763)))
 (= (- (- (- ?x67641 ?x63766) ?x63769) ?x63772) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x67685 (* ?x64048 l_0_18_67)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x67683 (* ?x64044 l_0_18_46)))
 (let ((?x63863 (* 12.0 l_0_18_22)))
 (let ((?x66213 (* ?x63863 l_0_18_25)))
 (let ((?x67671 (- (- (* (* 12.0 l_0_18_1) l_0_18_4) (* l_0_18_127 l_0_18_127)) (* (* 2.0 l_0_18_190) l_0_18_193))))
 (let ((?x67676 (- (- (- ?x67671 (* (* 2.0 l_0_18_211) l_0_18_214)) ?x66213) (* (* 2.0 l_0_18_232) l_0_18_235))))
 (let ((?x67680 (- (- ?x67676 (* (* 2.0 l_0_18_253) l_0_18_256)) (* (* 2.0 l_0_18_274) l_0_18_277))))
 (= (+ (- (- ?x67680 (* (* 2.0 l_0_18_295) l_0_18_298)) ?x67683) ?x67685) 0.0)))))))))))
(assert
 (let ((?x65606 (* l_0_18_6 l_0_18_6)))
 (let ((?x66762 (* 6.0 ?x65606)))
 (let ((?x65604 (* l_0_18_5 l_0_18_5)))
 (let ((?x66760 (* 6.0 ?x65604)))
 (let ((?x65602 (* l_0_18_4 l_0_18_4)))
 (let ((?x66749 (* 6.0 ?x65602)))
 (let ((?x67745 (* l_0_18_300 l_0_18_300)))
 (let ((?x67743 (* l_0_18_299 l_0_18_299)))
 (let ((?x67741 (* l_0_18_298 l_0_18_298)))
 (let ((?x67739 (* l_0_18_279 l_0_18_279)))
 (let ((?x67737 (* l_0_18_278 l_0_18_278)))
 (let ((?x67735 (* l_0_18_277 l_0_18_277)))
 (let ((?x66747 (* (* 6.0 l_0_18_27) l_0_18_27)))
 (let ((?x66744 (* (* 6.0 l_0_18_26) l_0_18_26)))
 (let ((?x67731 (* l_0_18_258 l_0_18_258)))
 (let ((?x67729 (* l_0_18_257 l_0_18_257)))
 (let ((?x67727 (* l_0_18_256 l_0_18_256)))
 (let ((?x66741 (* (* 6.0 l_0_18_25) l_0_18_25)))
 (let ((?x67724 (* l_0_18_237 l_0_18_237)))
 (let ((?x67722 (* l_0_18_236 l_0_18_236)))
 (let ((?x67720 (* l_0_18_235 l_0_18_235)))
 (let ((?x67718 (* l_0_18_216 l_0_18_216)))
 (let ((?x67716 (* l_0_18_215 l_0_18_215)))
 (let ((?x67714 (* l_0_18_214 l_0_18_214)))
 (let ((?x67712 (* l_0_18_195 l_0_18_195)))
 (let ((?x67710 (* l_0_18_194 l_0_18_194)))
 (let ((?x57433 (* l_0_18_193 l_0_18_193)))
 (let ((?x67715 (- (- (- (- (* (* (- 2.0) l_0_18_127) l_0_18_130) ?x57433) ?x67710) ?x67712) ?x67714)))
 (let ((?x67728 (- (- (- (- (- (- (- ?x67715 ?x67716) ?x67718) ?x67720) ?x67722) ?x67724) ?x66741) ?x67727)))
 (let ((?x67740 (- (- (- (- (- (- (- ?x67728 ?x67729) ?x67731) ?x66744) ?x66747) ?x67735) ?x67737) ?x67739)))
 (let ((?x67750 (- (+ (- (- (- ?x67740 ?x67741) ?x67743) ?x67745) ?x66749) (* (* 1.0 l_0_18_46) l_0_18_46))))
 (let ((?x67756 (- (- ?x67750 (* (* 1.0 l_0_18_47) l_0_18_47)) (* (* 1.0 l_0_18_48) l_0_18_48))))
 (let ((?x67762 (+ (+ (+ (+ ?x67756 ?x66760) ?x66762) (* 1.0 (* l_0_18_67 l_0_18_67))) (* 1.0 (* l_0_18_68 l_0_18_68)))))
 (= (+ ?x67762 (* 1.0 (* l_0_18_69 l_0_18_69))) 0.0)))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x67849 (* ?x64276 l_0_18_88)))
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x67847 (* ?x66279 l_0_18_72)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x67845 (* ?x66276 l_0_18_71)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x67843 (* ?x66273 l_0_18_70)))
 (let ((?x66886 (* (* 12.0 l_0_18_6) l_0_18_9)))
 (let ((?x66883 (* (* 12.0 l_0_18_5) l_0_18_8)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x67839 (* ?x66268 l_0_18_51)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x67837 (* ?x66265 l_0_18_50)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x67835 (* ?x66262 l_0_18_49)))
 (let ((?x66871 (* (* 12.0 l_0_18_4) l_0_18_7)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66868 (* ?x66239 l_0_18_30)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66866 (* ?x66236 l_0_18_29)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66864 (* ?x66224 l_0_18_28)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x67793 (* ?x64183 l_0_18_172)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x67791 (* ?x64180 l_0_18_151)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x66334 (* ?x63842 l_0_18_133)))
 (let ((?x67796 (- (+ (- (- (* (* 2.0 l_0_18_106) l_0_18_109) ?x66334) ?x67791) ?x67793) (* (* 2.0 l_0_18_193) l_0_18_196))))
 (let ((?x67800 (- (- ?x67796 (* (* 2.0 l_0_18_194) l_0_18_197)) (* (* 2.0 l_0_18_195) l_0_18_198))))
 (let ((?x67804 (- (- ?x67800 (* (* 2.0 l_0_18_214) l_0_18_217)) (* (* 2.0 l_0_18_215) l_0_18_218))))
 (let ((?x67808 (- (- ?x67804 (* (* 2.0 l_0_18_216) l_0_18_219)) (* (* 2.0 l_0_18_235) l_0_18_238))))
 (let ((?x67812 (- (- ?x67808 (* (* 2.0 l_0_18_236) l_0_18_239)) (* (* 2.0 l_0_18_237) l_0_18_240))))
 (let ((?x67817 (- (- (- ?x67812 ?x66864) (* (* 2.0 l_0_18_256) l_0_18_259)) (* (* 2.0 l_0_18_257) l_0_18_260))))
 (let ((?x67823 (- (- (- (- ?x67817 (* (* 2.0 l_0_18_258) l_0_18_261)) ?x66866) ?x66868) (* (* 2.0 l_0_18_277) l_0_18_280))))
 (let ((?x67827 (- (- ?x67823 (* (* 2.0 l_0_18_278) l_0_18_281)) (* (* 2.0 l_0_18_279) l_0_18_282))))
 (let ((?x67831 (- (- ?x67827 (* (* 2.0 l_0_18_298) l_0_18_301)) (* (* 2.0 l_0_18_299) l_0_18_302))))
 (let ((?x67838 (- (- (+ (- ?x67831 (* (* 2.0 l_0_18_300) l_0_18_303)) ?x66871) ?x67835) ?x67837)))
 (let ((?x67850 (- (+ (+ (+ (+ (+ (- ?x67838 ?x67839) ?x66883) ?x66886) ?x67843) ?x67845) ?x67847) ?x67849)))
 (= ?x67850 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x67938 (* ?x66279 l_0_18_76)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x67936 (* ?x66276 l_0_18_75)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x67934 (* ?x66273 l_0_18_74)))
 (let ((?x64048 (* 2.0 l_0_18_64)))
 (let ((?x67685 (* ?x64048 l_0_18_67)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x67931 (* ?x66268 l_0_18_55)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x67929 (* ?x66265 l_0_18_54)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x67927 (* ?x66262 l_0_18_53)))
 (let ((?x64044 (* 2.0 l_0_18_43)))
 (let ((?x67683 (* ?x64044 l_0_18_46)))
 (let ((?x66239 (* 12.0 l_0_18_27)))
 (let ((?x66990 (* ?x66239 l_0_18_34)))
 (let ((?x66236 (* 12.0 l_0_18_26)))
 (let ((?x66988 (* ?x66236 l_0_18_33)))
 (let ((?x66224 (* 12.0 l_0_18_25)))
 (let ((?x66986 (* ?x66224 l_0_18_32)))
 (let ((?x64650 (* 12.0 l_0_18_13)))
 (let ((?x66963 (* ?x64650 l_0_18_6)))
 (let ((?x63842 (* 2.0 l_0_18_127)))
 (let ((?x66482 (* ?x63842 l_0_18_137)))
 (let ((?x66962 (+ (* (* 12.0 l_0_18_11) l_0_18_4) (* (* 12.0 l_0_18_12) l_0_18_5))))
 (let ((?x67890 (- (- (+ (- ?x66962 ?x66482) ?x66963) (* (* 2.0 l_0_18_193) l_0_18_200)) (* (* 2.0 l_0_18_194) l_0_18_201))))
 (let ((?x67894 (- (- ?x67890 (* (* 2.0 l_0_18_195) l_0_18_202)) (* (* 2.0 l_0_18_214) l_0_18_221))))
 (let ((?x67898 (- (- ?x67894 (* (* 2.0 l_0_18_215) l_0_18_222)) (* (* 2.0 l_0_18_216) l_0_18_223))))
 (let ((?x67902 (- (- ?x67898 (* (* 2.0 l_0_18_235) l_0_18_242)) (* (* 2.0 l_0_18_236) l_0_18_243))))
 (let ((?x67907 (- (- (- ?x67902 (* (* 2.0 l_0_18_237) l_0_18_244)) ?x66986) (* (* 2.0 l_0_18_256) l_0_18_263))))
 (let ((?x67911 (- (- ?x67907 (* (* 2.0 l_0_18_257) l_0_18_264)) (* (* 2.0 l_0_18_258) l_0_18_265))))
 (let ((?x67917 (- (- (- (- ?x67911 ?x66988) ?x66990) (* (* 2.0 l_0_18_277) l_0_18_284)) (* (* 2.0 l_0_18_278) l_0_18_285))))
 (let ((?x67921 (- (- ?x67917 (* (* 2.0 l_0_18_279) l_0_18_286)) (* (* 2.0 l_0_18_298) l_0_18_305))))
 (let ((?x67925 (- (- ?x67921 (* (* 2.0 l_0_18_299) l_0_18_306)) (* (* 2.0 l_0_18_300) l_0_18_307))))
 (let ((?x67937 (+ (+ (- (- (- (- (+ ?x67925 ?x67683) ?x67927) ?x67929) ?x67931) ?x67685) ?x67934) ?x67936)))
 (= (+ ?x67937 ?x67938) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65004 (* l_0_18_66 l_0_18_66)))
 (let ((?x65570 (* 3.0 ?x65004)))
 (let ((?x65001 (* l_0_18_65 l_0_18_65)))
 (let ((?x65568 (* 3.0 ?x65001)))
 (let ((?x65566 (* (* 3.0 l_0_18_45) l_0_18_45)))
 (= (+ (+ (- (* (* (- 3.0) l_0_18_44) l_0_18_44) ?x65566) ?x65568) ?x65570) 0.0)))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x65760 (* ?x65759 l_0_18_68)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x65757 (* ?x65756 l_0_18_67)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x65754 (* ?x65753 l_0_18_47)))
 (= (+ (+ (- (* (* (- 6.0) l_0_18_44) l_0_18_46) ?x65754) ?x65757) ?x65760) 0.0))))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x65963 (* ?x65759 l_0_18_71)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x65961 (* ?x65756 l_0_18_70)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x65959 (* ?x65753 l_0_18_50)))
 (= (+ (+ (- (* (* (- 6.0) l_0_18_44) l_0_18_49) ?x65959) ?x65961) ?x65963) 0.0))))))))
(assert
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x66082 (* ?x65759 l_0_18_75)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x66079 (* ?x65756 l_0_18_74)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x66076 (* ?x65753 l_0_18_54)))
 (= (+ (+ (- (* (* (- 6.0) l_0_18_44) l_0_18_53) ?x66076) ?x66079) ?x66082) 0.0))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x65209 (* ?x64276 l_0_18_86)))
 (let ((?x65759 (* 6.0 l_0_18_66)))
 (let ((?x66143 (* ?x65759 l_0_18_80)))
 (let ((?x65756 (* 6.0 l_0_18_65)))
 (let ((?x66141 (* ?x65756 l_0_18_79)))
 (let ((?x65753 (* 6.0 l_0_18_45)))
 (let ((?x66138 (* ?x65753 l_0_18_59)))
 (let ((?x65750 (* 6.0 l_0_18_44)))
 (let ((?x66136 (* ?x65750 l_0_18_58)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x65165 (* ?x64183 l_0_18_170)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x65163 (* ?x64180 l_0_18_149)))
 (let ((?x68047 (- (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_107) ?x65163) ?x65165) ?x66136) ?x66138)))
 (= (+ (+ (+ ?x68047 ?x66141) ?x66143) ?x65209) 0.0)))))))))))))))))
(assert
 (let ((?x66770 (* l_0_18_69 l_0_18_69)))
 (let ((?x66771 (* 3.0 ?x66770)))
 (let ((?x66767 (* l_0_18_68 l_0_18_68)))
 (let ((?x66768 (* 3.0 ?x66767)))
 (let ((?x66764 (* l_0_18_67 l_0_18_67)))
 (let ((?x66765 (* 3.0 ?x66764)))
 (let ((?x66758 (* (* 3.0 l_0_18_48) l_0_18_48)))
 (let ((?x66755 (* (* 3.0 l_0_18_47) l_0_18_47)))
 (let ((?x68058 (+ (+ (- (- (* (* (- 3.0) l_0_18_46) l_0_18_46) ?x66755) ?x66758) ?x66765) ?x66768)))
 (= (+ ?x68058 ?x66771) 0.0)))))))))))
(assert
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x66895 (* ?x66894 l_0_18_72)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x66892 (* ?x66891 l_0_18_71)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x66889 (* ?x66888 l_0_18_70)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x66880 (* ?x66879 l_0_18_51)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x66877 (* ?x66876 l_0_18_50)))
 (let ((?x68069 (+ (+ (- (- (* (* (- 6.0) l_0_18_46) l_0_18_49) ?x66877) ?x66880) ?x66889) ?x66892)))
 (= (+ ?x68069 ?x66895) 0.0)))))))))))))
(assert
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x67007 (* ?x66894 l_0_18_76)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x67004 (* ?x66891 l_0_18_75)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x67001 (* ?x66888 l_0_18_74)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x66998 (* ?x66879 l_0_18_55)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x66995 (* ?x66876 l_0_18_54)))
 (let ((?x68073 (+ (+ (- (- (* (* (- 6.0) l_0_18_46) l_0_18_53) ?x66995) ?x66998) ?x67001) ?x67004)))
 (= (+ ?x68073 ?x67007) 0.0)))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x67849 (* ?x64276 l_0_18_88)))
 (let ((?x66894 (* 6.0 l_0_18_69)))
 (let ((?x67094 (* ?x66894 l_0_18_81)))
 (let ((?x66891 (* 6.0 l_0_18_68)))
 (let ((?x67092 (* ?x66891 l_0_18_80)))
 (let ((?x66888 (* 6.0 l_0_18_67)))
 (let ((?x67090 (* ?x66888 l_0_18_79)))
 (let ((?x66879 (* 6.0 l_0_18_48)))
 (let ((?x67087 (* ?x66879 l_0_18_60)))
 (let ((?x66876 (* 6.0 l_0_18_47)))
 (let ((?x67085 (* ?x66876 l_0_18_59)))
 (let ((?x66873 (* 6.0 l_0_18_46)))
 (let ((?x67083 (* ?x66873 l_0_18_58)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x67793 (* ?x64183 l_0_18_172)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x67791 (* ?x64180 l_0_18_151)))
 (let ((?x46704 (- (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_109) ?x67791) ?x67793) ?x67083) ?x67085)))
 (= (+ (+ (+ (+ (- ?x46704 ?x67087) ?x67090) ?x67092) ?x67094) ?x67849) 0.0)))))))))))))))))))))
(assert
 (let ((?x64270 (* l_0_18_73 l_0_18_73)))
 (let ((?x67180 (* 3.0 ?x64270)))
 (let ((?x64267 (* l_0_18_72 l_0_18_72)))
 (let ((?x67178 (* 3.0 ?x64267)))
 (let ((?x64264 (* l_0_18_71 l_0_18_71)))
 (let ((?x67176 (* 3.0 ?x64264)))
 (let ((?x64261 (* l_0_18_70 l_0_18_70)))
 (let ((?x67174 (* 3.0 ?x64261)))
 (let ((?x67171 (* (* 3.0 l_0_18_52) l_0_18_52)))
 (let ((?x67168 (* (* 3.0 l_0_18_51) l_0_18_51)))
 (let ((?x67165 (* (* 3.0 l_0_18_50) l_0_18_50)))
 (let ((?x57788 (+ (- (- (- (* (* (- 3.0) l_0_18_49) l_0_18_49) ?x67165) ?x67168) ?x67171) ?x67174)))
 (= (+ (+ (+ ?x57788 ?x67176) ?x67178) ?x67180) 0.0))))))))))))))
(assert
 (let ((?x67336 (* 6.0 l_0_18_73)))
 (let ((?x67337 (* ?x67336 l_0_18_77)))
 (let ((?x67332 (* 6.0 l_0_18_72)))
 (let ((?x67333 (* ?x67332 l_0_18_76)))
 (let ((?x67328 (* 6.0 l_0_18_71)))
 (let ((?x67329 (* ?x67328 l_0_18_75)))
 (let ((?x67324 (* 6.0 l_0_18_70)))
 (let ((?x67325 (* ?x67324 l_0_18_74)))
 (let ((?x67320 (* 6.0 l_0_18_52)))
 (let ((?x67321 (* ?x67320 l_0_18_56)))
 (let ((?x67316 (* 6.0 l_0_18_51)))
 (let ((?x67317 (* ?x67316 l_0_18_55)))
 (let ((?x67312 (* 6.0 l_0_18_50)))
 (let ((?x67313 (* ?x67312 l_0_18_54)))
 (let ((?x68088 (+ (- (- (- (* (* (- 6.0) l_0_18_49) l_0_18_53) ?x67313) ?x67317) ?x67321) ?x67325)))
 (= (+ (+ (+ ?x68088 ?x67329) ?x67333) ?x67337) 0.0)))))))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x64277 (* ?x64276 l_0_18_91)))
 (let ((?x67336 (* 6.0 l_0_18_73)))
 (let ((?x67488 (* ?x67336 l_0_18_82)))
 (let ((?x67332 (* 6.0 l_0_18_72)))
 (let ((?x67486 (* ?x67332 l_0_18_81)))
 (let ((?x67328 (* 6.0 l_0_18_71)))
 (let ((?x67484 (* ?x67328 l_0_18_80)))
 (let ((?x67324 (* 6.0 l_0_18_70)))
 (let ((?x67482 (* ?x67324 l_0_18_79)))
 (let ((?x67320 (* 6.0 l_0_18_52)))
 (let ((?x67479 (* ?x67320 l_0_18_61)))
 (let ((?x67316 (* 6.0 l_0_18_51)))
 (let ((?x67477 (* ?x67316 l_0_18_60)))
 (let ((?x67312 (* 6.0 l_0_18_50)))
 (let ((?x67475 (* ?x67312 l_0_18_59)))
 (let ((?x67308 (* 6.0 l_0_18_49)))
 (let ((?x67473 (* ?x67308 l_0_18_58)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x64184 (* ?x64183 l_0_18_175)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x64181 (* ?x64180 l_0_18_154)))
 (let ((?x68105 (- (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_112) ?x64181) ?x64184) ?x67473) ?x67475)))
 (let ((?x68112 (+ (+ (+ (+ (+ (- (- ?x68105 ?x67477) ?x67479) ?x67482) ?x67484) ?x67486) ?x67488) ?x64277)))
 (= ?x68112 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64543 (* l_0_18_78 l_0_18_78)))
 (let ((?x67569 (* 3.0 ?x64543)))
 (let ((?x64540 (* l_0_18_77 l_0_18_77)))
 (let ((?x67566 (* 3.0 ?x64540)))
 (let ((?x64537 (* l_0_18_76 l_0_18_76)))
 (let ((?x67563 (* 3.0 ?x64537)))
 (let ((?x64534 (* l_0_18_75 l_0_18_75)))
 (let ((?x67560 (* 3.0 ?x64534)))
 (let ((?x64531 (* l_0_18_74 l_0_18_74)))
 (let ((?x67557 (* 3.0 ?x64531)))
 (let ((?x67554 (* (* 3.0 l_0_18_57) l_0_18_57)))
 (let ((?x67550 (* (* 3.0 l_0_18_56) l_0_18_56)))
 (let ((?x67546 (* (* 3.0 l_0_18_55) l_0_18_55)))
 (let ((?x67542 (* (* 3.0 l_0_18_54) l_0_18_54)))
 (let ((?x68121 (- (- (- (- (* (* (- 3.0) l_0_18_53) l_0_18_53) ?x67542) ?x67546) ?x67550) ?x67554)))
 (= (+ (+ (+ (+ (+ ?x68121 ?x67557) ?x67560) ?x67563) ?x67566) ?x67569) 0.0)))))))))))))))))
(assert
 (let ((?x64276 (* 2.0 l_0_18_85)))
 (let ((?x64767 (* ?x64276 l_0_18_95)))
 (let ((?x67637 (* (* 6.0 l_0_18_78) l_0_18_83)))
 (let ((?x67634 (* (* 6.0 l_0_18_77) l_0_18_82)))
 (let ((?x67631 (* (* 6.0 l_0_18_76) l_0_18_81)))
 (let ((?x67628 (* (* 6.0 l_0_18_75) l_0_18_80)))
 (let ((?x67625 (* (* 6.0 l_0_18_74) l_0_18_79)))
 (let ((?x67615 (* (* 6.0 l_0_18_57) l_0_18_62)))
 (let ((?x67612 (* (* 6.0 l_0_18_56) l_0_18_61)))
 (let ((?x67609 (* (* 6.0 l_0_18_55) l_0_18_60)))
 (let ((?x67606 (* (* 6.0 l_0_18_54) l_0_18_59)))
 (let ((?x67603 (* (* 6.0 l_0_18_53) l_0_18_58)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x64655 (* ?x64183 l_0_18_179)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x64653 (* ?x64180 l_0_18_158)))
 (let ((?x68139 (- (- (- (+ (* (* (- 2.0) l_0_18_106) l_0_18_116) ?x64653) ?x64655) ?x67603) ?x67606)))
 (let ((?x68146 (+ (+ (+ (+ (- (- (- ?x68139 ?x67609) ?x67612) ?x67615) ?x67625) ?x67628) ?x67631) ?x67634)))
 (= (+ (+ ?x68146 ?x67637) ?x64767) 0.0))))))))))))))))))))
(assert
 (let ((?x63772 (* l_0_18_84 l_0_18_84)))
 (let ((?x63773 (* 3.0 ?x63772)))
 (let ((?x63769 (* l_0_18_83 l_0_18_83)))
 (let ((?x63770 (* 3.0 ?x63769)))
 (let ((?x63766 (* l_0_18_82 l_0_18_82)))
 (let ((?x63767 (* 3.0 ?x63766)))
 (let ((?x63763 (* l_0_18_81 l_0_18_81)))
 (let ((?x63764 (* 3.0 ?x63763)))
 (let ((?x63760 (* l_0_18_80 l_0_18_80)))
 (let ((?x63761 (* 3.0 ?x63760)))
 (let ((?x63757 (* l_0_18_79 l_0_18_79)))
 (let ((?x63758 (* 3.0 ?x63757)))
 (let ((?x63752 (* (* 3.0 l_0_18_63) l_0_18_63)))
 (let ((?x63749 (* (* 3.0 l_0_18_62) l_0_18_62)))
 (let ((?x63746 (* (* 3.0 l_0_18_61) l_0_18_61)))
 (let ((?x63743 (* (* 3.0 l_0_18_60) l_0_18_60)))
 (let ((?x63740 (* (* 3.0 l_0_18_59) l_0_18_59)))
 (let ((?x63737 (* (* 3.0 l_0_18_58) l_0_18_58)))
 (let ((?x64183 (* 2.0 l_0_18_169)))
 (let ((?x66340 (* ?x64183 l_0_18_184)))
 (let ((?x64180 (* 2.0 l_0_18_148)))
 (let ((?x66336 (* ?x64180 l_0_18_163)))
 (let ((?x64177 (* 2.0 l_0_18_106)))
 (let ((?x66321 (* ?x64177 l_0_18_121)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x55725 (* ?x65919 l_0_18_85)))
 (let ((?x68157 (- (- (- (- (- (+ (- ?x55725 ?x66321) ?x66336) ?x66340) ?x63737) ?x63740) ?x63743) ?x63746)))
 (let ((?x68164 (+ (+ (+ (+ (+ (- (- ?x68157 ?x63749) ?x63752) ?x63758) ?x63761) ?x63764) ?x63767) ?x63770)))
 (= (+ ?x68164 ?x63773) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x66770 (* l_0_18_69 l_0_18_69)))
 (let ((?x66767 (* l_0_18_68 l_0_18_68)))
 (let ((?x66764 (* l_0_18_67 l_0_18_67)))
 (let ((?x34871 (* l_0_18_48 l_0_18_48)))
 (let ((?x24436 (* l_0_18_47 l_0_18_47)))
 (let ((?x24437 (* l_0_18_46 l_0_18_46)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x66969 (* ?x24207 l_0_18_139)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x66967 (* ?x56322 l_0_18_138)))
 (let ((?x35787 (+ (+ (- (- (* (* (- 2.0) l_0_18_130) l_0_18_137) ?x66967) ?x66969) ?x24437) ?x24436)))
 (= (- (- (- (+ ?x35787 ?x34871) ?x66764) ?x66767) ?x66770) 0.0)))))))))))))
(assert
 (let ((?x68199 (* 2.0 l_0_18_90)))
 (let ((?x68200 (* ?x68199 l_0_18_97)))
 (let ((?x68196 (* 2.0 l_0_18_89)))
 (let ((?x68197 (* ?x68196 l_0_18_96)))
 (let ((?x68193 (* 2.0 l_0_18_88)))
 (let ((?x68194 (* ?x68193 l_0_18_95)))
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x67847 (* ?x66279 l_0_18_72)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x67845 (* ?x66276 l_0_18_71)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x67843 (* ?x66273 l_0_18_70)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x67839 (* ?x66268 l_0_18_51)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x67837 (* ?x66265 l_0_18_50)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x67835 (* ?x66262 l_0_18_49)))
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x68185 (* ?x66861 l_0_18_181)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x68183 (* ?x66858 l_0_18_180)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x68181 (* ?x66855 l_0_18_179)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x68179 (* ?x66852 l_0_18_160)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x68177 (* ?x66849 l_0_18_159)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x68175 (* ?x66846 l_0_18_158)))
 (let ((?x66843 (* 2.0 l_0_18_136)))
 (let ((?x67272 (* ?x66843 l_0_18_140)))
 (let ((?x66840 (* 2.0 l_0_18_135)))
 (let ((?x67270 (* ?x66840 l_0_18_139)))
 (let ((?x66837 (* 2.0 l_0_18_134)))
 (let ((?x67268 (* ?x66837 l_0_18_138)))
 (let ((?x66834 (* 2.0 l_0_18_133)))
 (let ((?x67266 (* ?x66834 l_0_18_137)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x68169 (* ?x66824 l_0_18_118)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x68167 (* ?x66821 l_0_18_117)))
 (let ((?x68172 (- (- (+ (+ (* (* 2.0 l_0_18_109) l_0_18_116) ?x68167) ?x68169) ?x67266) ?x67268)))
 (let ((?x68184 (+ (+ (- (- (- (- (- ?x68172 ?x67270) ?x67272) ?x68175) ?x68177) ?x68179) ?x68181) ?x68183)))
 (let ((?x68192 (- (- (- (+ (+ (+ (+ ?x68184 ?x68185) ?x67835) ?x67837) ?x67839) ?x67843) ?x67845) ?x67847)))
 (= (- (- (- ?x68192 ?x68194) ?x68197) ?x68200) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66279 (* 2.0 l_0_18_69)))
 (let ((?x67938 (* ?x66279 l_0_18_76)))
 (let ((?x66276 (* 2.0 l_0_18_68)))
 (let ((?x67936 (* ?x66276 l_0_18_75)))
 (let ((?x66273 (* 2.0 l_0_18_67)))
 (let ((?x67934 (* ?x66273 l_0_18_74)))
 (let ((?x66268 (* 2.0 l_0_18_48)))
 (let ((?x67931 (* ?x66268 l_0_18_55)))
 (let ((?x66265 (* 2.0 l_0_18_47)))
 (let ((?x67929 (* ?x66265 l_0_18_54)))
 (let ((?x66262 (* 2.0 l_0_18_46)))
 (let ((?x67927 (* ?x66262 l_0_18_53)))
 (let ((?x67528 (* l_0_18_141 l_0_18_141)))
 (let ((?x67526 (* l_0_18_140 l_0_18_140)))
 (let ((?x67523 (* l_0_18_139 l_0_18_139)))
 (let ((?x68241 (- (- (* (- l_0_18_137) l_0_18_137) (* l_0_18_138 l_0_18_138)) ?x67523)))
 (let ((?x68248 (- (- (+ (+ (+ (- (- ?x68241 ?x67526) ?x67528) ?x67927) ?x67929) ?x67931) ?x67934) ?x67936)))
 (= (- ?x68248 ?x67938) 0.0)))))))))))))))))))
(assert
 (let ((?x68302 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x68299 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x68296 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x68293 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x64270 (* l_0_18_73 l_0_18_73)))
 (let ((?x64267 (* l_0_18_72 l_0_18_72)))
 (let ((?x64264 (* l_0_18_71 l_0_18_71)))
 (let ((?x64261 (* l_0_18_70 l_0_18_70)))
 (let ((?x32525 (* l_0_18_52 l_0_18_52)))
 (let ((?x53755 (* l_0_18_51 l_0_18_51)))
 (let ((?x32455 (* l_0_18_50 l_0_18_50)))
 (let ((?x53754 (* l_0_18_49 l_0_18_49)))
 (let ((?x67154 (* 2.0 l_0_18_178)))
 (let ((?x68282 (* ?x67154 l_0_18_182)))
 (let ((?x67151 (* 2.0 l_0_18_177)))
 (let ((?x68280 (* ?x67151 l_0_18_181)))
 (let ((?x67148 (* 2.0 l_0_18_176)))
 (let ((?x68278 (* ?x67148 l_0_18_180)))
 (let ((?x67145 (* 2.0 l_0_18_175)))
 (let ((?x68276 (* ?x67145 l_0_18_179)))
 (let ((?x67142 (* 2.0 l_0_18_157)))
 (let ((?x68274 (* ?x67142 l_0_18_161)))
 (let ((?x67139 (* 2.0 l_0_18_156)))
 (let ((?x68272 (* ?x67139 l_0_18_160)))
 (let ((?x67136 (* 2.0 l_0_18_155)))
 (let ((?x68270 (* ?x67136 l_0_18_159)))
 (let ((?x67133 (* 2.0 l_0_18_154)))
 (let ((?x68268 (* ?x67133 l_0_18_158)))
 (let ((?x67122 (* 2.0 l_0_18_115)))
 (let ((?x68266 (* ?x67122 l_0_18_119)))
 (let ((?x67119 (* 2.0 l_0_18_114)))
 (let ((?x68264 (* ?x67119 l_0_18_118)))
 (let ((?x67116 (* 2.0 l_0_18_113)))
 (let ((?x58019 (* ?x67116 l_0_18_117)))
 (let ((?x68269 (- (+ (+ (+ (* (* 2.0 l_0_18_112) l_0_18_116) ?x58019) ?x68264) ?x68266) ?x68268)))
 (let ((?x68283 (+ (+ (+ (+ (- (- (- ?x68269 ?x68270) ?x68272) ?x68274) ?x68276) ?x68278) ?x68280) ?x68282)))
 (let ((?x68290 (- (- (- (+ (+ (+ (+ ?x68283 ?x53754) ?x32455) ?x53755) ?x32525) ?x64261) ?x64264) ?x64267)))
 (= (- (- (- (- (- ?x68290 ?x64270) ?x68293) ?x68296) ?x68299) ?x68302) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x68391 (* l_0_18_99 l_0_18_99)))
 (let ((?x68389 (* l_0_18_98 l_0_18_98)))
 (let ((?x68387 (* l_0_18_97 l_0_18_97)))
 (let ((?x68385 (* l_0_18_96 l_0_18_96)))
 (let ((?x68383 (* l_0_18_95 l_0_18_95)))
 (let ((?x64764 (* 2.0 l_0_18_73)))
 (let ((?x64765 (* ?x64764 l_0_18_77)))
 (let ((?x64761 (* 2.0 l_0_18_72)))
 (let ((?x64762 (* ?x64761 l_0_18_76)))
 (let ((?x64758 (* 2.0 l_0_18_71)))
 (let ((?x64759 (* ?x64758 l_0_18_75)))
 (let ((?x64755 (* 2.0 l_0_18_70)))
 (let ((?x64756 (* ?x64755 l_0_18_74)))
 (let ((?x64751 (* 2.0 l_0_18_52)))
 (let ((?x64752 (* ?x64751 l_0_18_56)))
 (let ((?x64748 (* 2.0 l_0_18_51)))
 (let ((?x64749 (* ?x64748 l_0_18_55)))
 (let ((?x64745 (* 2.0 l_0_18_50)))
 (let ((?x64746 (* ?x64745 l_0_18_54)))
 (let ((?x64742 (* 2.0 l_0_18_49)))
 (let ((?x64743 (* ?x64742 l_0_18_53)))
 (let ((?x68373 (* l_0_18_183 l_0_18_183)))
 (let ((?x68371 (* l_0_18_182 l_0_18_182)))
 (let ((?x68369 (* l_0_18_181 l_0_18_181)))
 (let ((?x68367 (* l_0_18_180 l_0_18_180)))
 (let ((?x68365 (* l_0_18_179 l_0_18_179)))
 (let ((?x68363 (* l_0_18_162 l_0_18_162)))
 (let ((?x68361 (* l_0_18_161 l_0_18_161)))
 (let ((?x68359 (* l_0_18_160 l_0_18_160)))
 (let ((?x68357 (* l_0_18_159 l_0_18_159)))
 (let ((?x68355 (* l_0_18_158 l_0_18_158)))
 (let ((?x68353 (* l_0_18_120 l_0_18_120)))
 (let ((?x68351 (* l_0_18_119 l_0_18_119)))
 (let ((?x68349 (* l_0_18_118 l_0_18_118)))
 (let ((?x68350 (+ (+ (* l_0_18_116 l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x68349)))
 (let ((?x68364 (- (- (- (- (- (+ (+ ?x68350 ?x68351) ?x68353) ?x68355) ?x68357) ?x68359) ?x68361) ?x68363)))
 (let ((?x68376 (+ (+ (+ (+ (+ (+ (+ ?x68364 ?x68365) ?x68367) ?x68369) ?x68371) ?x68373) ?x64743) ?x64746)))
 (let ((?x68384 (- (- (- (- (- (+ (+ ?x68376 ?x64749) ?x64752) ?x64756) ?x64759) ?x64762) ?x64765) ?x68383)))
 (= (- (- (- (- ?x68384 ?x68385) ?x68387) ?x68389) ?x68391) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64543 (* l_0_18_78 l_0_18_78)))
 (let ((?x64540 (* l_0_18_77 l_0_18_77)))
 (let ((?x64537 (* l_0_18_76 l_0_18_76)))
 (let ((?x64534 (* l_0_18_75 l_0_18_75)))
 (let ((?x64531 (* l_0_18_74 l_0_18_74)))
 (let ((?x64624 (* l_0_18_57 l_0_18_57)))
 (let ((?x64620 (* l_0_18_56 l_0_18_56)))
 (let ((?x32885 (* l_0_18_55 l_0_18_55)))
 (let ((?x68410 (+ (+ (+ (* l_0_18_53 l_0_18_53) (* l_0_18_54 l_0_18_54)) ?x32885) ?x64620)))
 (= (- (- (- (- (- (+ ?x68410 ?x64624) ?x64531) ?x64534) ?x64537) ?x64540) ?x64543) 0.0)))))))))))
(assert
 (let ((?x68445 (* l_0_18_90 l_0_18_90)))
 (let ((?x68443 (* l_0_18_89 l_0_18_89)))
 (let ((?x68441 (* l_0_18_88 l_0_18_88)))
 (let ((?x68439 (* l_0_18_174 l_0_18_174)))
 (let ((?x68437 (* l_0_18_173 l_0_18_173)))
 (let ((?x68435 (* l_0_18_172 l_0_18_172)))
 (let ((?x68433 (* l_0_18_153 l_0_18_153)))
 (let ((?x68431 (* l_0_18_152 l_0_18_152)))
 (let ((?x68429 (* l_0_18_151 l_0_18_151)))
 (let ((?x24207 (* 2.0 l_0_18_132)))
 (let ((?x66832 (* ?x24207 l_0_18_135)))
 (let ((?x56322 (* 2.0 l_0_18_131)))
 (let ((?x66830 (* ?x56322 l_0_18_134)))
 (let ((?x66827 (* 2.0 l_0_18_130)))
 (let ((?x66828 (* ?x66827 l_0_18_133)))
 (let ((?x68424 (* l_0_18_111 l_0_18_111)))
 (let ((?x68425 (+ (+ (* l_0_18_109 l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x68424)))
 (let ((?x68436 (+ (- (- (- (- (- (- ?x68425 ?x66828) ?x66830) ?x66832) ?x68429) ?x68431) ?x68433) ?x68435)))
 (= (- (- (- (+ (+ ?x68436 ?x68437) ?x68439) ?x68441) ?x68443) ?x68445) 0.0))))))))))))))))))))
(assert
 (let ((?x68199 (* 2.0 l_0_18_90)))
 (let ((?x68493 (* ?x68199 l_0_18_93)))
 (let ((?x68196 (* 2.0 l_0_18_89)))
 (let ((?x68491 (* ?x68196 l_0_18_92)))
 (let ((?x68193 (* 2.0 l_0_18_88)))
 (let ((?x68489 (* ?x68193 l_0_18_91)))
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x68487 (* ?x66861 l_0_18_177)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x68485 (* ?x66858 l_0_18_176)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x68483 (* ?x66855 l_0_18_175)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x68481 (* ?x66852 l_0_18_156)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x68479 (* ?x66849 l_0_18_155)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x68477 (* ?x66846 l_0_18_154)))
 (let ((?x67131 (* l_0_18_136 l_0_18_136)))
 (let ((?x67129 (* l_0_18_135 l_0_18_135)))
 (let ((?x67127 (* l_0_18_134 l_0_18_134)))
 (let ((?x67125 (* l_0_18_133 l_0_18_133)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x68471 (* ?x66824 l_0_18_114)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x68469 (* ?x66821 l_0_18_113)))
 (let ((?x68474 (- (- (+ (+ (* (* 2.0 l_0_18_109) l_0_18_112) ?x68469) ?x68471) ?x67125) ?x67127)))
 (let ((?x68486 (+ (+ (- (- (- (- (- ?x68474 ?x67129) ?x67131) ?x68477) ?x68479) ?x68481) ?x68483) ?x68485)))
 (= (- (- (- (+ ?x68486 ?x68487) ?x68489) ?x68491) ?x68493) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x68568 (* l_0_18_94 l_0_18_94)))
 (let ((?x68566 (* l_0_18_93 l_0_18_93)))
 (let ((?x68564 (* l_0_18_92 l_0_18_92)))
 (let ((?x68562 (* l_0_18_91 l_0_18_91)))
 (let ((?x68560 (* l_0_18_178 l_0_18_178)))
 (let ((?x68558 (* l_0_18_177 l_0_18_177)))
 (let ((?x68556 (* l_0_18_176 l_0_18_176)))
 (let ((?x68554 (* l_0_18_175 l_0_18_175)))
 (let ((?x68552 (* l_0_18_157 l_0_18_157)))
 (let ((?x68550 (* l_0_18_156 l_0_18_156)))
 (let ((?x68548 (* l_0_18_155 l_0_18_155)))
 (let ((?x68546 (* l_0_18_154 l_0_18_154)))
 (let ((?x68544 (* l_0_18_115 l_0_18_115)))
 (let ((?x68542 (* l_0_18_114 l_0_18_114)))
 (let ((?x68543 (+ (+ (* l_0_18_112 l_0_18_112) (* l_0_18_113 l_0_18_113)) ?x68542)))
 (let ((?x68557 (+ (+ (- (- (- (- (+ ?x68543 ?x68544) ?x68546) ?x68548) ?x68550) ?x68552) ?x68554) ?x68556)))
 (= (- (- (- (- (+ (+ ?x68557 ?x68558) ?x68560) ?x68562) ?x68564) ?x68566) ?x68568) 0.0))))))))))))))))))
(assert
 (let ((?x65526 (* l_0_18_87 l_0_18_87)))
 (let ((?x65524 (* l_0_18_86 l_0_18_86)))
 (let ((?x65514 (* l_0_18_171 l_0_18_171)))
 (let ((?x65512 (* l_0_18_170 l_0_18_170)))
 (let ((?x65510 (* l_0_18_150 l_0_18_150)))
 (let ((?x65508 (* l_0_18_149 l_0_18_149)))
 (let ((?x68592 (+ (- (* (- l_0_18_107) l_0_18_107) (* l_0_18_108 l_0_18_108)) ?x65508)))
 (= (+ (+ (- (- (+ ?x68592 ?x65510) ?x65512) ?x65514) ?x65524) ?x65526) 0.0)))))))))
(assert
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65651 (* ?x65650 l_0_18_89)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65648 (* ?x65647 l_0_18_88)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65627 (* ?x65626 l_0_18_173)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65624 (* ?x65623 l_0_18_172)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x54800 (* ?x54797 l_0_18_152)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x54802 (* ?x54779 l_0_18_151)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x54752 (* ?x54768 l_0_18_110)))
 (let ((?x68610 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_109) ?x54752) ?x54802) ?x54800) ?x65624)))
 (= (+ (+ (- ?x68610 ?x65627) ?x65648) ?x65651) 0.0)))))))))))))))))
(assert
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65819 (* ?x65650 l_0_18_92)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65817 (* ?x65647 l_0_18_91)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65809 (* ?x65626 l_0_18_176)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65807 (* ?x65623 l_0_18_175)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65805 (* ?x54797 l_0_18_155)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65803 (* ?x54779 l_0_18_154)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65801 (* ?x54768 l_0_18_113)))
 (let ((?x58133 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_112) ?x65801) ?x65803) ?x65805) ?x65807)))
 (= (+ (+ (- ?x58133 ?x65809) ?x65817) ?x65819) 0.0)))))))))))))))))
(assert
 (let ((?x65650 (* 2.0 l_0_18_87)))
 (let ((?x65880 (* ?x65650 l_0_18_96)))
 (let ((?x65647 (* 2.0 l_0_18_86)))
 (let ((?x65878 (* ?x65647 l_0_18_95)))
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65860 (* ?x65626 l_0_18_180)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65858 (* ?x65623 l_0_18_179)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65856 (* ?x54797 l_0_18_159)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65854 (* ?x54779 l_0_18_158)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65845 (* ?x54768 l_0_18_117)))
 (let ((?x58131 (- (+ (+ (- (* (* (- 2.0) l_0_18_107) l_0_18_116) ?x65845) ?x65854) ?x65856) ?x65858)))
 (= (+ (+ (- ?x58131 ?x65860) ?x65878) ?x65880) 0.0)))))))))))))))))
(assert
 (let ((?x65626 (* 2.0 l_0_18_171)))
 (let ((?x65941 (* ?x65626 l_0_18_185)))
 (let ((?x65623 (* 2.0 l_0_18_170)))
 (let ((?x65939 (* ?x65623 l_0_18_184)))
 (let ((?x54797 (* 2.0 l_0_18_150)))
 (let ((?x65933 (* ?x54797 l_0_18_164)))
 (let ((?x54779 (* 2.0 l_0_18_149)))
 (let ((?x65931 (* ?x54779 l_0_18_163)))
 (let ((?x54768 (* 2.0 l_0_18_108)))
 (let ((?x65927 (* ?x54768 l_0_18_122)))
 (let ((?x54756 (* 2.0 l_0_18_107)))
 (let ((?x65925 (* ?x54756 l_0_18_121)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x65923 (* ?x65922 l_0_18_87)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x65920 (* ?x65919 l_0_18_86)))
 (let ((?x46555 (- (- (+ (+ (- (- (+ ?x65920 ?x65923) ?x65925) ?x65927) ?x65931) ?x65933) ?x65939) ?x65941)))
 (= ?x46555 0.0)))))))))))))))))))
(assert
 (let ((?x68445 (* l_0_18_90 l_0_18_90)))
 (let ((?x68443 (* l_0_18_89 l_0_18_89)))
 (let ((?x68441 (* l_0_18_88 l_0_18_88)))
 (let ((?x68439 (* l_0_18_174 l_0_18_174)))
 (let ((?x68437 (* l_0_18_173 l_0_18_173)))
 (let ((?x68435 (* l_0_18_172 l_0_18_172)))
 (let ((?x68433 (* l_0_18_153 l_0_18_153)))
 (let ((?x68431 (* l_0_18_152 l_0_18_152)))
 (let ((?x68429 (* l_0_18_151 l_0_18_151)))
 (let ((?x68424 (* l_0_18_111 l_0_18_111)))
 (let ((?x47868 (- (- (* (- l_0_18_109) l_0_18_109) (* l_0_18_110 l_0_18_110)) ?x68424)))
 (let ((?x68625 (+ (- (- (- (+ (+ (+ ?x47868 ?x68429) ?x68431) ?x68433) ?x68435) ?x68437) ?x68439) ?x68441)))
 (= (+ (+ ?x68625 ?x68443) ?x68445) 0.0))))))))))))))
(assert
 (let ((?x68199 (* 2.0 l_0_18_90)))
 (let ((?x68493 (* ?x68199 l_0_18_93)))
 (let ((?x68196 (* 2.0 l_0_18_89)))
 (let ((?x68491 (* ?x68196 l_0_18_92)))
 (let ((?x68193 (* 2.0 l_0_18_88)))
 (let ((?x68489 (* ?x68193 l_0_18_91)))
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x68487 (* ?x66861 l_0_18_177)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x68485 (* ?x66858 l_0_18_176)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x68483 (* ?x66855 l_0_18_175)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x68481 (* ?x66852 l_0_18_156)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x68479 (* ?x66849 l_0_18_155)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x68477 (* ?x66846 l_0_18_154)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x68471 (* ?x66824 l_0_18_114)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x68469 (* ?x66821 l_0_18_113)))
 (let ((?x58194 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_112) ?x68469) ?x68471) ?x68477) ?x68479)))
 (let ((?x58219 (+ (+ (+ (- (- (- (+ ?x58194 ?x68481) ?x68483) ?x68485) ?x68487) ?x68489) ?x68491) ?x68493)))
 (= ?x58219 0.0))))))))))))))))))))))))))
(assert
 (let ((?x68199 (* 2.0 l_0_18_90)))
 (let ((?x68200 (* ?x68199 l_0_18_97)))
 (let ((?x68196 (* 2.0 l_0_18_89)))
 (let ((?x68197 (* ?x68196 l_0_18_96)))
 (let ((?x68193 (* 2.0 l_0_18_88)))
 (let ((?x68194 (* ?x68193 l_0_18_95)))
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x68185 (* ?x66861 l_0_18_181)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x68183 (* ?x66858 l_0_18_180)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x68181 (* ?x66855 l_0_18_179)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x68179 (* ?x66852 l_0_18_160)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x68177 (* ?x66849 l_0_18_159)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x68175 (* ?x66846 l_0_18_158)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x68169 (* ?x66824 l_0_18_118)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x68167 (* ?x66821 l_0_18_117)))
 (let ((?x68639 (+ (+ (- (- (* (* (- 2.0) l_0_18_109) l_0_18_116) ?x68167) ?x68169) ?x68175) ?x68177)))
 (let ((?x68646 (+ (+ (+ (- (- (- (+ ?x68639 ?x68179) ?x68181) ?x68183) ?x68185) ?x68194) ?x68197) ?x68200)))
 (= ?x68646 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66861 (* 2.0 l_0_18_174)))
 (let ((?x66862 (* ?x66861 l_0_18_186)))
 (let ((?x66858 (* 2.0 l_0_18_173)))
 (let ((?x66859 (* ?x66858 l_0_18_185)))
 (let ((?x66855 (* 2.0 l_0_18_172)))
 (let ((?x66856 (* ?x66855 l_0_18_184)))
 (let ((?x66852 (* 2.0 l_0_18_153)))
 (let ((?x66853 (* ?x66852 l_0_18_165)))
 (let ((?x66849 (* 2.0 l_0_18_152)))
 (let ((?x66850 (* ?x66849 l_0_18_164)))
 (let ((?x66846 (* 2.0 l_0_18_151)))
 (let ((?x66847 (* ?x66846 l_0_18_163)))
 (let ((?x66824 (* 2.0 l_0_18_111)))
 (let ((?x66825 (* ?x66824 l_0_18_123)))
 (let ((?x66821 (* 2.0 l_0_18_110)))
 (let ((?x66822 (* ?x66821 l_0_18_122)))
 (let ((?x66818 (* 2.0 l_0_18_109)))
 (let ((?x66819 (* ?x66818 l_0_18_121)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x66816 (* ?x66815 l_0_18_90)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x66813 (* ?x65922 l_0_18_89)))
 (let ((?x47083 (- (- (+ (+ (* (* 2.0 l_0_18_100) l_0_18_88) ?x66813) ?x66816) ?x66819) ?x66822)))
 (let ((?x36561 (- (- (- (+ (+ (+ (- ?x47083 ?x66825) ?x66847) ?x66850) ?x66853) ?x66856) ?x66859) ?x66862)))
 (= ?x36561 0.0))))))))))))))))))))))))))
(assert
 (let ((?x68568 (* l_0_18_94 l_0_18_94)))
 (let ((?x68566 (* l_0_18_93 l_0_18_93)))
 (let ((?x68564 (* l_0_18_92 l_0_18_92)))
 (let ((?x68562 (* l_0_18_91 l_0_18_91)))
 (let ((?x68560 (* l_0_18_178 l_0_18_178)))
 (let ((?x68558 (* l_0_18_177 l_0_18_177)))
 (let ((?x68556 (* l_0_18_176 l_0_18_176)))
 (let ((?x68554 (* l_0_18_175 l_0_18_175)))
 (let ((?x68552 (* l_0_18_157 l_0_18_157)))
 (let ((?x68550 (* l_0_18_156 l_0_18_156)))
 (let ((?x68548 (* l_0_18_155 l_0_18_155)))
 (let ((?x68546 (* l_0_18_154 l_0_18_154)))
 (let ((?x68544 (* l_0_18_115 l_0_18_115)))
 (let ((?x68542 (* l_0_18_114 l_0_18_114)))
 (let ((?x48092 (- (- (* (- l_0_18_112) l_0_18_112) (* l_0_18_113 l_0_18_113)) ?x68542)))
 (let ((?x68653 (- (- (+ (+ (+ (+ (- ?x48092 ?x68544) ?x68546) ?x68548) ?x68550) ?x68552) ?x68554) ?x68556)))
 (= (+ (+ (+ (+ (- (- ?x68653 ?x68558) ?x68560) ?x68562) ?x68564) ?x68566) ?x68568) 0.0))))))))))))))))))
(assert
 (let ((?x68302 (* (* 2.0 l_0_18_94) l_0_18_98)))
 (let ((?x68299 (* (* 2.0 l_0_18_93) l_0_18_97)))
 (let ((?x68296 (* (* 2.0 l_0_18_92) l_0_18_96)))
 (let ((?x68293 (* (* 2.0 l_0_18_91) l_0_18_95)))
 (let ((?x67154 (* 2.0 l_0_18_178)))
 (let ((?x68282 (* ?x67154 l_0_18_182)))
 (let ((?x67151 (* 2.0 l_0_18_177)))
 (let ((?x68280 (* ?x67151 l_0_18_181)))
 (let ((?x67148 (* 2.0 l_0_18_176)))
 (let ((?x68278 (* ?x67148 l_0_18_180)))
 (let ((?x67145 (* 2.0 l_0_18_175)))
 (let ((?x68276 (* ?x67145 l_0_18_179)))
 (let ((?x67142 (* 2.0 l_0_18_157)))
 (let ((?x68274 (* ?x67142 l_0_18_161)))
 (let ((?x67139 (* 2.0 l_0_18_156)))
 (let ((?x68272 (* ?x67139 l_0_18_160)))
 (let ((?x67136 (* 2.0 l_0_18_155)))
 (let ((?x68270 (* ?x67136 l_0_18_159)))
 (let ((?x67133 (* 2.0 l_0_18_154)))
 (let ((?x68268 (* ?x67133 l_0_18_158)))
 (let ((?x67122 (* 2.0 l_0_18_115)))
 (let ((?x68266 (* ?x67122 l_0_18_119)))
 (let ((?x67119 (* 2.0 l_0_18_114)))
 (let ((?x68264 (* ?x67119 l_0_18_118)))
 (let ((?x67116 (* 2.0 l_0_18_113)))
 (let ((?x58019 (* ?x67116 l_0_18_117)))
 (let ((?x58464 (+ (- (- (- (* (* (- 2.0) l_0_18_112) l_0_18_116) ?x58019) ?x68264) ?x68266) ?x68268)))
 (let ((?x36661 (- (- (- (- (+ (+ (+ ?x58464 ?x68270) ?x68272) ?x68274) ?x68276) ?x68278) ?x68280) ?x68282)))
 (= (+ (+ (+ (+ ?x36661 ?x68293) ?x68296) ?x68299) ?x68302) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67154 (* 2.0 l_0_18_178)))
 (let ((?x67155 (* ?x67154 l_0_18_187)))
 (let ((?x67151 (* 2.0 l_0_18_177)))
 (let ((?x67152 (* ?x67151 l_0_18_186)))
 (let ((?x67148 (* 2.0 l_0_18_176)))
 (let ((?x67149 (* ?x67148 l_0_18_185)))
 (let ((?x67145 (* 2.0 l_0_18_175)))
 (let ((?x67146 (* ?x67145 l_0_18_184)))
 (let ((?x67142 (* 2.0 l_0_18_157)))
 (let ((?x67143 (* ?x67142 l_0_18_166)))
 (let ((?x67139 (* 2.0 l_0_18_156)))
 (let ((?x67140 (* ?x67139 l_0_18_165)))
 (let ((?x67136 (* 2.0 l_0_18_155)))
 (let ((?x67137 (* ?x67136 l_0_18_164)))
 (let ((?x67133 (* 2.0 l_0_18_154)))
 (let ((?x67134 (* ?x67133 l_0_18_163)))
 (let ((?x67122 (* 2.0 l_0_18_115)))
 (let ((?x67123 (* ?x67122 l_0_18_124)))
 (let ((?x67119 (* 2.0 l_0_18_114)))
 (let ((?x67120 (* ?x67119 l_0_18_123)))
 (let ((?x67116 (* 2.0 l_0_18_113)))
 (let ((?x67117 (* ?x67116 l_0_18_122)))
 (let ((?x67113 (* 2.0 l_0_18_112)))
 (let ((?x67114 (* ?x67113 l_0_18_121)))
 (let ((?x67110 (* 2.0 l_0_18_103)))
 (let ((?x67111 (* ?x67110 l_0_18_94)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x67108 (* ?x66815 l_0_18_93)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x67106 (* ?x65922 l_0_18_92)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x67104 (* ?x65919 l_0_18_91)))
 (let ((?x68683 (- (- (- (- (+ (+ (+ ?x67104 ?x67106) ?x67108) ?x67111) ?x67114) ?x67117) ?x67120) ?x67123)))
 (let ((?x68690 (- (- (- (+ (+ (+ (+ ?x68683 ?x67134) ?x67137) ?x67140) ?x67143) ?x67146) ?x67149) ?x67152)))
 (= (- ?x68690 ?x67155) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x68391 (* l_0_18_99 l_0_18_99)))
 (let ((?x68389 (* l_0_18_98 l_0_18_98)))
 (let ((?x68387 (* l_0_18_97 l_0_18_97)))
 (let ((?x68385 (* l_0_18_96 l_0_18_96)))
 (let ((?x68383 (* l_0_18_95 l_0_18_95)))
 (let ((?x68373 (* l_0_18_183 l_0_18_183)))
 (let ((?x68371 (* l_0_18_182 l_0_18_182)))
 (let ((?x68369 (* l_0_18_181 l_0_18_181)))
 (let ((?x68367 (* l_0_18_180 l_0_18_180)))
 (let ((?x68365 (* l_0_18_179 l_0_18_179)))
 (let ((?x68363 (* l_0_18_162 l_0_18_162)))
 (let ((?x68361 (* l_0_18_161 l_0_18_161)))
 (let ((?x68359 (* l_0_18_160 l_0_18_160)))
 (let ((?x68357 (* l_0_18_159 l_0_18_159)))
 (let ((?x68355 (* l_0_18_158 l_0_18_158)))
 (let ((?x68353 (* l_0_18_120 l_0_18_120)))
 (let ((?x68351 (* l_0_18_119 l_0_18_119)))
 (let ((?x68349 (* l_0_18_118 l_0_18_118)))
 (let ((?x24201 (- (- (* (- l_0_18_116) l_0_18_116) (* l_0_18_117 l_0_18_117)) ?x68349)))
 (let ((?x68699 (+ (+ (+ (+ (+ (- (- ?x24201 ?x68351) ?x68353) ?x68355) ?x68357) ?x68359) ?x68361) ?x68363)))
 (let ((?x68706 (+ (+ (- (- (- (- (- ?x68699 ?x68365) ?x68367) ?x68369) ?x68371) ?x68373) ?x68383) ?x68385)))
 (= (+ (+ (+ ?x68706 ?x68387) ?x68389) ?x68391) 0.0)))))))))))))))))))))))
(assert
 (let ((?x67302 (* (* 2.0 l_0_18_183) l_0_18_188)))
 (let ((?x67299 (* (* 2.0 l_0_18_182) l_0_18_187)))
 (let ((?x67296 (* (* 2.0 l_0_18_181) l_0_18_186)))
 (let ((?x67293 (* (* 2.0 l_0_18_180) l_0_18_185)))
 (let ((?x67290 (* (* 2.0 l_0_18_179) l_0_18_184)))
 (let ((?x67287 (* (* 2.0 l_0_18_162) l_0_18_167)))
 (let ((?x67284 (* (* 2.0 l_0_18_161) l_0_18_166)))
 (let ((?x67281 (* (* 2.0 l_0_18_160) l_0_18_165)))
 (let ((?x67278 (* (* 2.0 l_0_18_159) l_0_18_164)))
 (let ((?x67275 (* (* 2.0 l_0_18_158) l_0_18_163)))
 (let ((?x67263 (* (* 2.0 l_0_18_120) l_0_18_125)))
 (let ((?x67259 (* (* 2.0 l_0_18_119) l_0_18_124)))
 (let ((?x67256 (* (* 2.0 l_0_18_118) l_0_18_123)))
 (let ((?x67253 (* (* 2.0 l_0_18_117) l_0_18_122)))
 (let ((?x67250 (* (* 2.0 l_0_18_116) l_0_18_121)))
 (let ((?x67246 (* (* 2.0 l_0_18_104) l_0_18_99)))
 (let ((?x67110 (* 2.0 l_0_18_103)))
 (let ((?x67243 (* ?x67110 l_0_18_98)))
 (let ((?x66815 (* 2.0 l_0_18_102)))
 (let ((?x67241 (* ?x66815 l_0_18_97)))
 (let ((?x65922 (* 2.0 l_0_18_101)))
 (let ((?x67239 (* ?x65922 l_0_18_96)))
 (let ((?x65919 (* 2.0 l_0_18_100)))
 (let ((?x45468 (* ?x65919 l_0_18_95)))
 (let ((?x68724 (- (- (- (+ (+ (+ (+ ?x45468 ?x67239) ?x67241) ?x67243) ?x67246) ?x67250) ?x67253) ?x67256)))
 (let ((?x68731 (+ (+ (+ (+ (+ (- (- ?x68724 ?x67259) ?x67263) ?x67275) ?x67278) ?x67281) ?x67284) ?x67287)))
 (= (- (- (- (- (- ?x68731 ?x67290) ?x67293) ?x67296) ?x67299) ?x67302) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x67466 (* l_0_18_189 l_0_18_189)))
 (let ((?x67464 (* l_0_18_188 l_0_18_188)))
 (let ((?x67462 (* l_0_18_187 l_0_18_187)))
 (let ((?x67460 (* l_0_18_186 l_0_18_186)))
 (let ((?x67458 (* l_0_18_185 l_0_18_185)))
 (let ((?x67456 (* l_0_18_184 l_0_18_184)))
 (let ((?x67452 (* l_0_18_168 l_0_18_168)))
 (let ((?x67450 (* l_0_18_167 l_0_18_167)))
 (let ((?x67448 (* l_0_18_166 l_0_18_166)))
 (let ((?x67446 (* l_0_18_165 l_0_18_165)))
 (let ((?x67444 (* l_0_18_164 l_0_18_164)))
 (let ((?x67442 (* l_0_18_163 l_0_18_163)))
 (let ((?x67435 (* l_0_18_126 l_0_18_126)))
 (let ((?x67433 (* l_0_18_125 l_0_18_125)))
 (let ((?x67431 (* l_0_18_124 l_0_18_124)))
 (let ((?x67429 (* l_0_18_123 l_0_18_123)))
 (let ((?x67427 (* l_0_18_122 l_0_18_122)))
 (let ((?x67425 (* l_0_18_121 l_0_18_121)))
 (let ((?x67423 (* l_0_18_105 l_0_18_105)))
 (let ((?x45581 (* l_0_18_104 l_0_18_104)))
 (let ((?x57220 (* l_0_18_103 l_0_18_103)))
 (let ((?x24813 (* l_0_18_102 l_0_18_102)))
 (let ((?x68739 (+ (+ (* l_0_18_100 l_0_18_100) (* l_0_18_101 l_0_18_101)) ?x24813)))
 (let ((?x68746 (- (- (- (- (+ (+ (+ ?x68739 ?x57220) ?x45581) ?x67423) ?x67425) ?x67427) ?x67429) ?x67431)))
 (let ((?x68753 (+ (+ (+ (+ (+ (- (- ?x68746 ?x67433) ?x67435) ?x67442) ?x67444) ?x67446) ?x67448) ?x67450)))
 (let ((?x68760 (- (- (- (- (- (- (+ ?x68753 ?x67452) ?x67456) ?x67458) ?x67460) ?x67462) ?x67464) ?x67466)))
 (= ?x68760 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x66738 (* l_0_18_132 l_0_18_132)))
 (let ((?x24468 (- (- (* (- l_0_18_130) l_0_18_130) (* l_0_18_131 l_0_18_131)) ?x66738)))
 (= ?x24468 0.0))))
(assert
 (>= l_0_18_1 0.0))
(assert
 (>= l_0_18_3 0.0))
(assert
 (>= l_0_18_6 0.0))
(assert
 (>= l_0_18_10 0.0))
(assert
 (>= l_0_18_15 0.0))
(assert
 (>= l_0_18_21 0.0))
(assert
 (>= l_0_18_22 0.0))
(assert
 (>= l_0_18_24 0.0))
(assert
 (>= l_0_18_27 0.0))
(assert
 (>= l_0_18_31 0.0))
(assert
 (>= l_0_18_36 0.0))
(assert
 (>= l_0_18_42 0.0))
(assert
 (>= l_0_18_43 0.0))
(assert
 (>= l_0_18_45 0.0))
(assert
 (>= l_0_18_48 0.0))
(assert
 (>= l_0_18_52 0.0))
(assert
 (>= l_0_18_57 0.0))
(assert
 (>= l_0_18_63 0.0))
(assert
 (>= l_0_18_64 0.0))
(assert
 (>= l_0_18_66 0.0))
(assert
 (>= l_0_18_69 0.0))
(assert
 (>= l_0_18_73 0.0))
(assert
 (>= l_0_18_78 0.0))
(assert
 (>= l_0_18_84 0.0))
(assert
 (>= l_0_18_85 0.0))
(assert
 (>= l_0_18_87 0.0))
(assert
 (>= l_0_18_90 0.0))
(assert
 (>= l_0_18_94 0.0))
(assert
 (>= l_0_18_99 0.0))
(assert
 (>= l_0_18_105 0.0))
(assert
 (>= l_0_18_106 0.0))
(assert
 (>= l_0_18_108 0.0))
(assert
 (>= l_0_18_111 0.0))
(assert
 (>= l_0_18_115 0.0))
(assert
 (>= l_0_18_120 0.0))
(assert
 (>= l_0_18_126 0.0))
(assert
 (>= l_0_18_127 0.0))
(assert
 (>= l_0_18_129 0.0))
(assert
 (>= l_0_18_132 0.0))
(assert
 (>= l_0_18_136 0.0))
(assert
 (>= l_0_18_141 0.0))
(assert
 (>= l_0_18_147 0.0))
(assert
 (>= l_0_18_148 0.0))
(assert
 (>= l_0_18_150 0.0))
(assert
 (>= l_0_18_153 0.0))
(assert
 (>= l_0_18_157 0.0))
(assert
 (>= l_0_18_162 0.0))
(assert
 (>= l_0_18_168 0.0))
(assert
 (>= l_0_18_169 0.0))
(assert
 (>= l_0_18_171 0.0))
(assert
 (>= l_0_18_174 0.0))
(assert
 (>= l_0_18_178 0.0))
(assert
 (>= l_0_18_183 0.0))
(assert
 (>= l_0_18_189 0.0))
(assert
 (>= l_0_18_190 0.0))
(assert
 (>= l_0_18_192 0.0))
(assert
 (>= l_0_18_195 0.0))
(assert
 (>= l_0_18_199 0.0))
(assert
 (>= l_0_18_204 0.0))
(assert
 (>= l_0_18_210 0.0))
(assert
 (>= l_0_18_211 0.0))
(assert
 (>= l_0_18_213 0.0))
(assert
 (>= l_0_18_216 0.0))
(assert
 (>= l_0_18_220 0.0))
(assert
 (>= l_0_18_225 0.0))
(assert
 (>= l_0_18_231 0.0))
(assert
 (>= l_0_18_232 0.0))
(assert
 (>= l_0_18_234 0.0))
(assert
 (>= l_0_18_237 0.0))
(assert
 (>= l_0_18_241 0.0))
(assert
 (>= l_0_18_246 0.0))
(assert
 (>= l_0_18_252 0.0))
(assert
 (>= l_0_18_253 0.0))
(assert
 (>= l_0_18_255 0.0))
(assert
 (>= l_0_18_258 0.0))
(assert
 (>= l_0_18_262 0.0))
(assert
 (>= l_0_18_267 0.0))
(assert
 (>= l_0_18_273 0.0))
(assert
 (>= l_0_18_274 0.0))
(assert
 (>= l_0_18_276 0.0))
(assert
 (>= l_0_18_279 0.0))
(assert
 (>= l_0_18_283 0.0))
(assert
 (>= l_0_18_288 0.0))
(assert
 (>= l_0_18_294 0.0))
(assert
 (>= l_0_18_295 0.0))
(assert
 (>= l_0_18_297 0.0))
(assert
 (>= l_0_18_300 0.0))
(assert
 (>= l_0_18_304 0.0))
(assert
 (>= l_0_18_309 0.0))
(assert
 (>= l_0_18_315 0.0))
(check-sat)
(get-model)