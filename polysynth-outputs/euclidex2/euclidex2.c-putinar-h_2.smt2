(set-option :produce-models true); benchmark generated from python API
(set-info :status unknown)
(declare-fun l_0_0_1 () Real)
(declare-fun l_0_0_2 () Real)
(declare-fun l_0_0_3 () Real)
(declare-fun l_0_1_1 () Real)
(declare-fun l_0_1_2 () Real)
(declare-fun l_0_1_5 () Real)
(declare-fun l_0_1_4 () Real)
(declare-fun l_0_1_3 () Real)
(declare-fun l_0_2_2 () Real)
(declare-fun l_0_2_1 () Real)
(declare-fun l_0_2_7 () Real)
(declare-fun l_0_2_6 () Real)
(declare-fun l_0_2_5 () Real)
(declare-fun l_0_2_4 () Real)
(declare-fun l_0_2_3 () Real)
(declare-fun l_0_3_2 () Real)
(declare-fun l_0_3_1 () Real)
(declare-fun l_0_3_9 () Real)
(declare-fun l_0_3_8 () Real)
(declare-fun l_0_3_7 () Real)
(declare-fun l_0_3_6 () Real)
(declare-fun l_0_3_5 () Real)
(declare-fun l_0_3_4 () Real)
(declare-fun l_0_3_3 () Real)
(declare-fun l_0_4_226 () Real)
(declare-fun l_0_4_181 () Real)
(declare-fun l_0_4_46 () Real)
(declare-fun l_0_4_252 () Real)
(declare-fun l_0_4_246 () Real)
(declare-fun l_0_4_251 () Real)
(declare-fun l_0_4_245 () Real)
(declare-fun l_0_4_250 () Real)
(declare-fun l_0_4_244 () Real)
(declare-fun l_0_4_249 () Real)
(declare-fun l_0_4_243 () Real)
(declare-fun l_0_4_248 () Real)
(declare-fun l_0_4_242 () Real)
(declare-fun l_0_4_247 () Real)
(declare-fun l_0_4_241 () Real)
(declare-fun l_0_4_207 () Real)
(declare-fun l_0_4_201 () Real)
(declare-fun l_0_4_206 () Real)
(declare-fun l_0_4_200 () Real)
(declare-fun l_0_4_205 () Real)
(declare-fun l_0_4_199 () Real)
(declare-fun l_0_4_204 () Real)
(declare-fun l_0_4_198 () Real)
(declare-fun l_0_4_203 () Real)
(declare-fun l_0_4_197 () Real)
(declare-fun l_0_4_202 () Real)
(declare-fun l_0_4_196 () Real)
(declare-fun l_0_4_1 () Real)
(declare-fun l_0_4_47 () Real)
(declare-fun l_0_4_2 () Real)
(declare-fun l_0_4_72 () Real)
(declare-fun l_0_4_66 () Real)
(declare-fun l_0_4_71 () Real)
(declare-fun l_0_4_65 () Real)
(declare-fun l_0_4_70 () Real)
(declare-fun l_0_4_64 () Real)
(declare-fun l_0_4_69 () Real)
(declare-fun l_0_4_63 () Real)
(declare-fun l_0_4_68 () Real)
(declare-fun l_0_4_62 () Real)
(declare-fun l_0_4_67 () Real)
(declare-fun l_0_4_61 () Real)
(declare-fun l_0_4_49 () Real)
(declare-fun l_0_4_27 () Real)
(declare-fun l_0_4_21 () Real)
(declare-fun l_0_4_26 () Real)
(declare-fun l_0_4_20 () Real)
(declare-fun l_0_4_25 () Real)
(declare-fun l_0_4_19 () Real)
(declare-fun l_0_4_24 () Real)
(declare-fun l_0_4_18 () Real)
(declare-fun l_0_4_23 () Real)
(declare-fun l_0_4_17 () Real)
(declare-fun l_0_4_22 () Real)
(declare-fun l_0_4_16 () Real)
(declare-fun l_0_4_4 () Real)
(declare-fun l_0_4_52 () Real)
(declare-fun l_0_4_7 () Real)
(declare-fun l_0_4_56 () Real)
(declare-fun l_0_4_11 () Real)
(declare-fun l_0_4_74 () Real)
(declare-fun l_0_4_162 () Real)
(declare-fun l_0_4_156 () Real)
(declare-fun l_0_4_161 () Real)
(declare-fun l_0_4_155 () Real)
(declare-fun l_0_4_160 () Real)
(declare-fun l_0_4_154 () Real)
(declare-fun l_0_4_159 () Real)
(declare-fun l_0_4_153 () Real)
(declare-fun l_0_4_158 () Real)
(declare-fun l_0_4_152 () Real)
(declare-fun l_0_4_157 () Real)
(declare-fun l_0_4_151 () Real)
(declare-fun l_0_4_117 () Real)
(declare-fun l_0_4_111 () Real)
(declare-fun l_0_4_116 () Real)
(declare-fun l_0_4_110 () Real)
(declare-fun l_0_4_115 () Real)
(declare-fun l_0_4_109 () Real)
(declare-fun l_0_4_114 () Real)
(declare-fun l_0_4_108 () Real)
(declare-fun l_0_4_113 () Real)
(declare-fun l_0_4_107 () Real)
(declare-fun l_0_4_112 () Real)
(declare-fun l_0_4_106 () Real)
(declare-fun l_0_4_29 () Real)
(declare-fun l_0_4_82 () Real)
(declare-fun l_0_4_136 () Real)
(declare-fun l_0_4_91 () Real)
(declare-fun l_0_4_37 () Real)
(declare-fun l_0_4_48 () Real)
(declare-fun l_0_4_3 () Real)
(declare-fun l_0_4_50 () Real)
(declare-fun l_0_4_5 () Real)
(declare-fun l_0_4_53 () Real)
(declare-fun l_0_4_8 () Real)
(declare-fun l_0_4_57 () Real)
(declare-fun l_0_4_12 () Real)
(declare-fun l_0_4_75 () Real)
(declare-fun l_0_4_30 () Real)
(declare-fun l_0_4_83 () Real)
(declare-fun l_0_4_38 () Real)
(declare-fun l_0_4_138 () Real)
(declare-fun l_0_4_137 () Real)
(declare-fun l_0_4_93 () Real)
(declare-fun l_0_4_92 () Real)
(declare-fun l_0_4_6 () Real)
(declare-fun l_0_4_51 () Real)
(declare-fun l_0_4_9 () Real)
(declare-fun l_0_4_54 () Real)
(declare-fun l_0_4_58 () Real)
(declare-fun l_0_4_13 () Real)
(declare-fun l_0_4_76 () Real)
(declare-fun l_0_4_31 () Real)
(declare-fun l_0_4_84 () Real)
(declare-fun l_0_4_39 () Real)
(declare-fun l_0_4_141 () Real)
(declare-fun l_0_4_140 () Real)
(declare-fun l_0_4_139 () Real)
(declare-fun l_0_4_96 () Real)
(declare-fun l_0_4_95 () Real)
(declare-fun l_0_4_94 () Real)
(declare-fun l_0_4_55 () Real)
(declare-fun l_0_4_10 () Real)
(declare-fun l_0_4_59 () Real)
(declare-fun l_0_4_14 () Real)
(declare-fun l_0_4_77 () Real)
(declare-fun l_0_4_32 () Real)
(declare-fun l_0_4_85 () Real)
(declare-fun l_0_4_145 () Real)
(declare-fun l_0_4_144 () Real)
(declare-fun l_0_4_143 () Real)
(declare-fun l_0_4_142 () Real)
(declare-fun l_0_4_99 () Real)
(declare-fun l_0_4_98 () Real)
(declare-fun l_0_4_97 () Real)
(declare-fun l_0_4_100 () Real)
(declare-fun l_0_4_40 () Real)
(declare-fun l_0_4_60 () Real)
(declare-fun l_0_4_15 () Real)
(declare-fun l_0_4_78 () Real)
(declare-fun l_0_4_33 () Real)
(declare-fun l_0_4_86 () Real)
(declare-fun l_0_4_150 () Real)
(declare-fun l_0_4_41 () Real)
(declare-fun l_0_4_149 () Real)
(declare-fun l_0_4_148 () Real)
(declare-fun l_0_4_147 () Real)
(declare-fun l_0_4_146 () Real)
(declare-fun l_0_4_105 () Real)
(declare-fun l_0_4_104 () Real)
(declare-fun l_0_4_103 () Real)
(declare-fun l_0_4_102 () Real)
(declare-fun l_0_4_101 () Real)
(declare-fun l_0_4_79 () Real)
(declare-fun l_0_4_34 () Real)
(declare-fun l_0_4_87 () Real)
(declare-fun l_0_4_42 () Real)
(declare-fun l_0_4_73 () Real)
(declare-fun l_0_4_28 () Real)
(declare-fun l_0_4_80 () Real)
(declare-fun l_0_4_35 () Real)
(declare-fun l_0_4_88 () Real)
(declare-fun l_0_4_43 () Real)
(declare-fun l_0_4_81 () Real)
(declare-fun l_0_4_36 () Real)
(declare-fun l_0_4_89 () Real)
(declare-fun l_0_4_44 () Real)
(declare-fun l_0_4_169 () Real)
(declare-fun l_0_4_168 () Real)
(declare-fun l_0_4_167 () Real)
(declare-fun l_0_4_166 () Real)
(declare-fun l_0_4_165 () Real)
(declare-fun l_0_4_164 () Real)
(declare-fun l_0_4_124 () Real)
(declare-fun l_0_4_123 () Real)
(declare-fun l_0_4_122 () Real)
(declare-fun l_0_4_121 () Real)
(declare-fun l_0_4_120 () Real)
(declare-fun l_0_4_119 () Real)
(declare-fun l_0_4_90 () Real)
(declare-fun l_0_4_45 () Real)
(declare-fun l_0_4_177 () Real)
(declare-fun l_0_4_176 () Real)
(declare-fun l_0_4_175 () Real)
(declare-fun l_0_4_174 () Real)
(declare-fun l_0_4_173 () Real)
(declare-fun l_0_4_172 () Real)
(declare-fun l_0_4_132 () Real)
(declare-fun l_0_4_131 () Real)
(declare-fun l_0_4_130 () Real)
(declare-fun l_0_4_129 () Real)
(declare-fun l_0_4_128 () Real)
(declare-fun l_0_4_127 () Real)
(declare-fun l_0_4_239 () Real)
(declare-fun l_0_4_235 () Real)
(declare-fun l_0_4_238 () Real)
(declare-fun l_0_4_234 () Real)
(declare-fun l_0_4_237 () Real)
(declare-fun l_0_4_233 () Real)
(declare-fun l_0_4_236 () Real)
(declare-fun l_0_4_232 () Real)
(declare-fun l_0_4_194 () Real)
(declare-fun l_0_4_190 () Real)
(declare-fun l_0_4_193 () Real)
(declare-fun l_0_4_189 () Real)
(declare-fun l_0_4_192 () Real)
(declare-fun l_0_4_188 () Real)
(declare-fun l_0_4_191 () Real)
(declare-fun l_0_4_187 () Real)
(declare-fun l_0_4_229 () Real)
(declare-fun l_0_4_184 () Real)
(declare-fun l_0_4_230 () Real)
(declare-fun l_0_4_228 () Real)
(declare-fun l_0_4_227 () Real)
(declare-fun l_0_4_185 () Real)
(declare-fun l_0_4_183 () Real)
(declare-fun l_0_4_182 () Real)
(declare-fun l_0_4_231 () Real)
(declare-fun l_0_4_186 () Real)
(declare-fun l_0_4_256 () Real)
(declare-fun l_0_4_255 () Real)
(declare-fun l_0_4_254 () Real)
(declare-fun l_0_4_211 () Real)
(declare-fun l_0_4_210 () Real)
(declare-fun l_0_4_209 () Real)
(declare-fun l_0_4_264 () Real)
(declare-fun l_0_4_263 () Real)
(declare-fun l_0_4_262 () Real)
(declare-fun l_0_4_219 () Real)
(declare-fun l_0_4_218 () Real)
(declare-fun l_0_4_217 () Real)
(declare-fun l_0_4_163 () Real)
(declare-fun l_0_4_118 () Real)
(declare-fun l_0_4_170 () Real)
(declare-fun l_0_4_125 () Real)
(declare-fun l_0_4_178 () Real)
(declare-fun l_0_4_133 () Real)
(declare-fun l_0_4_171 () Real)
(declare-fun l_0_4_126 () Real)
(declare-fun l_0_4_179 () Real)
(declare-fun l_0_4_134 () Real)
(declare-fun l_0_4_180 () Real)
(declare-fun l_0_4_135 () Real)
(declare-fun l_0_4_268 () Real)
(declare-fun l_0_4_253 () Real)
(declare-fun l_0_4_267 () Real)
(declare-fun l_0_4_266 () Real)
(declare-fun l_0_4_265 () Real)
(declare-fun l_0_4_223 () Real)
(declare-fun l_0_4_208 () Real)
(declare-fun l_0_4_222 () Real)
(declare-fun l_0_4_221 () Real)
(declare-fun l_0_4_220 () Real)
(declare-fun l_0_4_257 () Real)
(declare-fun l_0_4_212 () Real)
(declare-fun l_0_4_258 () Real)
(declare-fun l_0_4_240 () Real)
(declare-fun l_0_4_213 () Real)
(declare-fun l_0_4_195 () Real)
(declare-fun l_0_4_259 () Real)
(declare-fun l_0_4_214 () Real)
(declare-fun l_0_4_260 () Real)
(declare-fun l_0_4_215 () Real)
(declare-fun l_0_4_261 () Real)
(declare-fun l_0_4_216 () Real)
(declare-fun l_0_4_269 () Real)
(declare-fun l_0_4_224 () Real)
(declare-fun l_0_4_270 () Real)
(declare-fun l_0_4_225 () Real)
(declare-fun l_0_5_46 () Real)
(declare-fun l_0_5_297 () Real)
(declare-fun l_0_5_291 () Real)
(declare-fun l_0_5_296 () Real)
(declare-fun l_0_5_290 () Real)
(declare-fun l_0_5_295 () Real)
(declare-fun l_0_5_289 () Real)
(declare-fun l_0_5_294 () Real)
(declare-fun l_0_5_288 () Real)
(declare-fun l_0_5_293 () Real)
(declare-fun l_0_5_287 () Real)
(declare-fun l_0_5_292 () Real)
(declare-fun l_0_5_286 () Real)
(declare-fun l_0_5_207 () Real)
(declare-fun l_0_5_201 () Real)
(declare-fun l_0_5_206 () Real)
(declare-fun l_0_5_200 () Real)
(declare-fun l_0_5_205 () Real)
(declare-fun l_0_5_199 () Real)
(declare-fun l_0_5_204 () Real)
(declare-fun l_0_5_198 () Real)
(declare-fun l_0_5_203 () Real)
(declare-fun l_0_5_197 () Real)
(declare-fun l_0_5_202 () Real)
(declare-fun l_0_5_196 () Real)
(declare-fun l_0_5_1 () Real)
(declare-fun l_0_5_91 () Real)
(declare-fun l_0_5_313 () Real)
(declare-fun l_0_5_298 () Real)
(declare-fun l_0_5_312 () Real)
(declare-fun l_0_5_311 () Real)
(declare-fun l_0_5_310 () Real)
(declare-fun l_0_5_309 () Real)
(declare-fun l_0_5_308 () Real)
(declare-fun l_0_5_307 () Real)
(declare-fun l_0_5_223 () Real)
(declare-fun l_0_5_208 () Real)
(declare-fun l_0_5_222 () Real)
(declare-fun l_0_5_221 () Real)
(declare-fun l_0_5_220 () Real)
(declare-fun l_0_5_219 () Real)
(declare-fun l_0_5_218 () Real)
(declare-fun l_0_5_217 () Real)
(declare-fun l_0_5_136 () Real)
(declare-fun l_0_5_277 () Real)
(declare-fun l_0_5_271 () Real)
(declare-fun l_0_5_187 () Real)
(declare-fun l_0_5_181 () Real)
(declare-fun _a_3_ () Real)
(declare-fun l_0_5_284 () Real)
(declare-fun l_0_5_280 () Real)
(declare-fun l_0_5_283 () Real)
(declare-fun l_0_5_279 () Real)
(declare-fun l_0_5_282 () Real)
(declare-fun l_0_5_278 () Real)
(declare-fun l_0_5_281 () Real)
(declare-fun l_0_5_194 () Real)
(declare-fun l_0_5_190 () Real)
(declare-fun l_0_5_193 () Real)
(declare-fun l_0_5_189 () Real)
(declare-fun l_0_5_192 () Real)
(declare-fun l_0_5_188 () Real)
(declare-fun l_0_5_191 () Real)
(declare-fun _a_4_ () Real)
(declare-fun l_0_5_273 () Real)
(declare-fun l_0_5_272 () Real)
(declare-fun l_0_5_183 () Real)
(declare-fun l_0_5_182 () Real)
(declare-fun _a_5_ () Real)
(declare-fun _a_0_ () Real)
(declare-fun l_0_5_299 () Real)
(declare-fun l_0_5_226 () Real)
(declare-fun l_0_5_209 () Real)
(declare-fun _a_1_ () Real)
(declare-fun l_0_5_274 () Real)
(declare-fun l_0_5_184 () Real)
(declare-fun _a_2_ () Real)
(declare-fun l_0_5_47 () Real)
(declare-fun l_0_5_2 () Real)
(declare-fun l_0_5_72 () Real)
(declare-fun l_0_5_66 () Real)
(declare-fun l_0_5_71 () Real)
(declare-fun l_0_5_65 () Real)
(declare-fun l_0_5_70 () Real)
(declare-fun l_0_5_64 () Real)
(declare-fun l_0_5_69 () Real)
(declare-fun l_0_5_63 () Real)
(declare-fun l_0_5_68 () Real)
(declare-fun l_0_5_62 () Real)
(declare-fun l_0_5_67 () Real)
(declare-fun l_0_5_61 () Real)
(declare-fun l_0_5_49 () Real)
(declare-fun l_0_5_252 () Real)
(declare-fun l_0_5_246 () Real)
(declare-fun l_0_5_251 () Real)
(declare-fun l_0_5_245 () Real)
(declare-fun l_0_5_250 () Real)
(declare-fun l_0_5_244 () Real)
(declare-fun l_0_5_249 () Real)
(declare-fun l_0_5_243 () Real)
(declare-fun l_0_5_248 () Real)
(declare-fun l_0_5_242 () Real)
(declare-fun l_0_5_247 () Real)
(declare-fun l_0_5_241 () Real)
(declare-fun l_0_5_27 () Real)
(declare-fun l_0_5_21 () Real)
(declare-fun l_0_5_26 () Real)
(declare-fun l_0_5_20 () Real)
(declare-fun l_0_5_25 () Real)
(declare-fun l_0_5_19 () Real)
(declare-fun l_0_5_24 () Real)
(declare-fun l_0_5_18 () Real)
(declare-fun l_0_5_23 () Real)
(declare-fun l_0_5_17 () Real)
(declare-fun l_0_5_22 () Real)
(declare-fun l_0_5_16 () Real)
(declare-fun l_0_5_4 () Real)
(declare-fun l_0_5_52 () Real)
(declare-fun l_0_5_7 () Real)
(declare-fun l_0_5_56 () Real)
(declare-fun l_0_5_11 () Real)
(declare-fun l_0_5_74 () Real)
(declare-fun l_0_5_162 () Real)
(declare-fun l_0_5_156 () Real)
(declare-fun l_0_5_161 () Real)
(declare-fun l_0_5_155 () Real)
(declare-fun l_0_5_160 () Real)
(declare-fun l_0_5_154 () Real)
(declare-fun l_0_5_159 () Real)
(declare-fun l_0_5_153 () Real)
(declare-fun l_0_5_158 () Real)
(declare-fun l_0_5_152 () Real)
(declare-fun l_0_5_157 () Real)
(declare-fun l_0_5_151 () Real)
(declare-fun l_0_5_117 () Real)
(declare-fun l_0_5_111 () Real)
(declare-fun l_0_5_116 () Real)
(declare-fun l_0_5_110 () Real)
(declare-fun l_0_5_115 () Real)
(declare-fun l_0_5_109 () Real)
(declare-fun l_0_5_114 () Real)
(declare-fun l_0_5_108 () Real)
(declare-fun l_0_5_113 () Real)
(declare-fun l_0_5_107 () Real)
(declare-fun l_0_5_112 () Real)
(declare-fun l_0_5_106 () Real)
(declare-fun l_0_5_29 () Real)
(declare-fun l_0_5_82 () Real)
(declare-fun l_0_5_37 () Real)
(declare-fun l_0_5_48 () Real)
(declare-fun l_0_5_3 () Real)
(declare-fun l_0_5_50 () Real)
(declare-fun l_0_5_5 () Real)
(declare-fun l_0_5_53 () Real)
(declare-fun l_0_5_8 () Real)
(declare-fun l_0_5_57 () Real)
(declare-fun l_0_5_12 () Real)
(declare-fun l_0_5_75 () Real)
(declare-fun l_0_5_30 () Real)
(declare-fun l_0_5_83 () Real)
(declare-fun l_0_5_38 () Real)
(declare-fun l_0_5_138 () Real)
(declare-fun l_0_5_137 () Real)
(declare-fun l_0_5_93 () Real)
(declare-fun l_0_5_92 () Real)
(declare-fun l_0_5_6 () Real)
(declare-fun l_0_5_51 () Real)
(declare-fun l_0_5_9 () Real)
(declare-fun l_0_5_54 () Real)
(declare-fun l_0_5_58 () Real)
(declare-fun l_0_5_13 () Real)
(declare-fun l_0_5_76 () Real)
(declare-fun l_0_5_31 () Real)
(declare-fun l_0_5_84 () Real)
(declare-fun l_0_5_39 () Real)
(declare-fun l_0_5_141 () Real)
(declare-fun l_0_5_140 () Real)
(declare-fun l_0_5_139 () Real)
(declare-fun l_0_5_96 () Real)
(declare-fun l_0_5_95 () Real)
(declare-fun l_0_5_94 () Real)
(declare-fun l_0_5_55 () Real)
(declare-fun l_0_5_10 () Real)
(declare-fun l_0_5_59 () Real)
(declare-fun l_0_5_14 () Real)
(declare-fun l_0_5_77 () Real)
(declare-fun l_0_5_32 () Real)
(declare-fun l_0_5_85 () Real)
(declare-fun l_0_5_145 () Real)
(declare-fun l_0_5_144 () Real)
(declare-fun l_0_5_143 () Real)
(declare-fun l_0_5_142 () Real)
(declare-fun l_0_5_99 () Real)
(declare-fun l_0_5_98 () Real)
(declare-fun l_0_5_97 () Real)
(declare-fun l_0_5_100 () Real)
(declare-fun l_0_5_40 () Real)
(declare-fun l_0_5_60 () Real)
(declare-fun l_0_5_15 () Real)
(declare-fun l_0_5_78 () Real)
(declare-fun l_0_5_33 () Real)
(declare-fun l_0_5_86 () Real)
(declare-fun l_0_5_150 () Real)
(declare-fun l_0_5_41 () Real)
(declare-fun l_0_5_149 () Real)
(declare-fun l_0_5_148 () Real)
(declare-fun l_0_5_147 () Real)
(declare-fun l_0_5_146 () Real)
(declare-fun l_0_5_105 () Real)
(declare-fun l_0_5_104 () Real)
(declare-fun l_0_5_103 () Real)
(declare-fun l_0_5_102 () Real)
(declare-fun l_0_5_101 () Real)
(declare-fun l_0_5_79 () Real)
(declare-fun l_0_5_34 () Real)
(declare-fun l_0_5_87 () Real)
(declare-fun l_0_5_42 () Real)
(declare-fun l_0_5_73 () Real)
(declare-fun l_0_5_28 () Real)
(declare-fun l_0_5_80 () Real)
(declare-fun l_0_5_35 () Real)
(declare-fun l_0_5_88 () Real)
(declare-fun l_0_5_43 () Real)
(declare-fun l_0_5_81 () Real)
(declare-fun l_0_5_36 () Real)
(declare-fun l_0_5_89 () Real)
(declare-fun l_0_5_44 () Real)
(declare-fun l_0_5_169 () Real)
(declare-fun l_0_5_168 () Real)
(declare-fun l_0_5_167 () Real)
(declare-fun l_0_5_166 () Real)
(declare-fun l_0_5_165 () Real)
(declare-fun l_0_5_164 () Real)
(declare-fun l_0_5_124 () Real)
(declare-fun l_0_5_123 () Real)
(declare-fun l_0_5_122 () Real)
(declare-fun l_0_5_121 () Real)
(declare-fun l_0_5_120 () Real)
(declare-fun l_0_5_119 () Real)
(declare-fun l_0_5_90 () Real)
(declare-fun l_0_5_45 () Real)
(declare-fun l_0_5_177 () Real)
(declare-fun l_0_5_176 () Real)
(declare-fun l_0_5_175 () Real)
(declare-fun l_0_5_174 () Real)
(declare-fun l_0_5_173 () Real)
(declare-fun l_0_5_172 () Real)
(declare-fun l_0_5_132 () Real)
(declare-fun l_0_5_131 () Real)
(declare-fun l_0_5_130 () Real)
(declare-fun l_0_5_129 () Real)
(declare-fun l_0_5_128 () Real)
(declare-fun l_0_5_127 () Real)
(declare-fun l_0_5_239 () Real)
(declare-fun l_0_5_235 () Real)
(declare-fun l_0_5_238 () Real)
(declare-fun l_0_5_234 () Real)
(declare-fun l_0_5_237 () Real)
(declare-fun l_0_5_233 () Real)
(declare-fun l_0_5_236 () Real)
(declare-fun l_0_5_232 () Real)
(declare-fun l_0_5_275 () Real)
(declare-fun l_0_5_227 () Real)
(declare-fun l_0_5_185 () Real)
(declare-fun l_0_5_276 () Real)
(declare-fun l_0_5_229 () Real)
(declare-fun l_0_5_186 () Real)
(declare-fun l_0_5_301 () Real)
(declare-fun l_0_5_300 () Real)
(declare-fun l_0_5_254 () Real)
(declare-fun l_0_5_211 () Real)
(declare-fun l_0_5_210 () Real)
(declare-fun l_0_5_262 () Real)
(declare-fun l_0_5_228 () Real)
(declare-fun l_0_5_230 () Real)
(declare-fun l_0_5_255 () Real)
(declare-fun l_0_5_263 () Real)
(declare-fun l_0_5_231 () Real)
(declare-fun l_0_5_256 () Real)
(declare-fun l_0_5_264 () Real)
(declare-fun l_0_5_257 () Real)
(declare-fun l_0_5_265 () Real)
(declare-fun l_0_5_240 () Real)
(declare-fun l_0_5_258 () Real)
(declare-fun l_0_5_266 () Real)
(declare-fun l_0_5_259 () Real)
(declare-fun l_0_5_267 () Real)
(declare-fun l_0_5_253 () Real)
(declare-fun l_0_5_260 () Real)
(declare-fun l_0_5_268 () Real)
(declare-fun l_0_5_261 () Real)
(declare-fun l_0_5_269 () Real)
(declare-fun l_0_5_270 () Real)
(declare-fun l_0_5_163 () Real)
(declare-fun l_0_5_118 () Real)
(declare-fun l_0_5_170 () Real)
(declare-fun l_0_5_125 () Real)
(declare-fun l_0_5_178 () Real)
(declare-fun l_0_5_133 () Real)
(declare-fun l_0_5_171 () Real)
(declare-fun l_0_5_126 () Real)
(declare-fun l_0_5_179 () Real)
(declare-fun l_0_5_134 () Real)
(declare-fun l_0_5_180 () Real)
(declare-fun l_0_5_135 () Real)
(declare-fun l_0_5_302 () Real)
(declare-fun l_0_5_212 () Real)
(declare-fun l_0_5_303 () Real)
(declare-fun l_0_5_285 () Real)
(declare-fun l_0_5_213 () Real)
(declare-fun l_0_5_195 () Real)
(declare-fun l_0_5_304 () Real)
(declare-fun l_0_5_214 () Real)
(declare-fun l_0_5_305 () Real)
(declare-fun l_0_5_215 () Real)
(declare-fun l_0_5_306 () Real)
(declare-fun l_0_5_216 () Real)
(declare-fun l_0_5_314 () Real)
(declare-fun l_0_5_224 () Real)
(declare-fun l_0_5_315 () Real)
(declare-fun l_0_5_225 () Real)
(declare-fun l_0_6_316 () Real)
(declare-fun l_0_6_271 () Real)
(declare-fun l_0_6_181 () Real)
(declare-fun l_0_6_91 () Real)
(declare-fun l_0_6_344 () Real)
(declare-fun l_0_6_299 () Real)
(declare-fun l_0_6_226 () Real)
(declare-fun l_0_6_209 () Real)
(declare-fun l_0_6_136 () Real)
(declare-fun l_0_6_46 () Real)
(declare-fun l_0_6_319 () Real)
(declare-fun l_0_6_274 () Real)
(declare-fun l_0_6_184 () Real)
(declare-fun l_0_6_1 () Real)
(declare-fun l_0_6_342 () Real)
(declare-fun l_0_6_336 () Real)
(declare-fun l_0_6_341 () Real)
(declare-fun l_0_6_335 () Real)
(declare-fun l_0_6_340 () Real)
(declare-fun l_0_6_334 () Real)
(declare-fun l_0_6_339 () Real)
(declare-fun l_0_6_333 () Real)
(declare-fun l_0_6_338 () Real)
(declare-fun l_0_6_332 () Real)
(declare-fun l_0_6_337 () Real)
(declare-fun l_0_6_331 () Real)
(declare-fun l_0_6_297 () Real)
(declare-fun l_0_6_291 () Real)
(declare-fun l_0_6_296 () Real)
(declare-fun l_0_6_290 () Real)
(declare-fun l_0_6_295 () Real)
(declare-fun l_0_6_289 () Real)
(declare-fun l_0_6_294 () Real)
(declare-fun l_0_6_288 () Real)
(declare-fun l_0_6_293 () Real)
(declare-fun l_0_6_287 () Real)
(declare-fun l_0_6_292 () Real)
(declare-fun l_0_6_286 () Real)
(declare-fun l_0_6_207 () Real)
(declare-fun l_0_6_201 () Real)
(declare-fun l_0_6_206 () Real)
(declare-fun l_0_6_200 () Real)
(declare-fun l_0_6_205 () Real)
(declare-fun l_0_6_199 () Real)
(declare-fun l_0_6_204 () Real)
(declare-fun l_0_6_198 () Real)
(declare-fun l_0_6_203 () Real)
(declare-fun l_0_6_197 () Real)
(declare-fun l_0_6_202 () Real)
(declare-fun l_0_6_196 () Real)
(declare-fun l_0_6_358 () Real)
(declare-fun l_0_6_343 () Real)
(declare-fun l_0_6_357 () Real)
(declare-fun l_0_6_356 () Real)
(declare-fun l_0_6_355 () Real)
(declare-fun l_0_6_354 () Real)
(declare-fun l_0_6_353 () Real)
(declare-fun l_0_6_352 () Real)
(declare-fun l_0_6_313 () Real)
(declare-fun l_0_6_298 () Real)
(declare-fun l_0_6_312 () Real)
(declare-fun l_0_6_311 () Real)
(declare-fun l_0_6_310 () Real)
(declare-fun l_0_6_309 () Real)
(declare-fun l_0_6_308 () Real)
(declare-fun l_0_6_307 () Real)
(declare-fun l_0_6_223 () Real)
(declare-fun l_0_6_208 () Real)
(declare-fun l_0_6_222 () Real)
(declare-fun l_0_6_221 () Real)
(declare-fun l_0_6_220 () Real)
(declare-fun l_0_6_219 () Real)
(declare-fun l_0_6_218 () Real)
(declare-fun l_0_6_217 () Real)
(declare-fun l_0_6_322 () Real)
(declare-fun l_0_6_277 () Real)
(declare-fun l_0_6_187 () Real)
(declare-fun l_0_6_329 () Real)
(declare-fun l_0_6_325 () Real)
(declare-fun l_0_6_328 () Real)
(declare-fun l_0_6_324 () Real)
(declare-fun l_0_6_327 () Real)
(declare-fun l_0_6_323 () Real)
(declare-fun l_0_6_326 () Real)
(declare-fun l_0_6_284 () Real)
(declare-fun l_0_6_280 () Real)
(declare-fun l_0_6_283 () Real)
(declare-fun l_0_6_279 () Real)
(declare-fun l_0_6_282 () Real)
(declare-fun l_0_6_278 () Real)
(declare-fun l_0_6_281 () Real)
(declare-fun l_0_6_194 () Real)
(declare-fun l_0_6_190 () Real)
(declare-fun l_0_6_193 () Real)
(declare-fun l_0_6_189 () Real)
(declare-fun l_0_6_192 () Real)
(declare-fun l_0_6_188 () Real)
(declare-fun l_0_6_191 () Real)
(declare-fun l_0_6_318 () Real)
(declare-fun l_0_6_317 () Real)
(declare-fun l_0_6_273 () Real)
(declare-fun l_0_6_272 () Real)
(declare-fun l_0_6_183 () Real)
(declare-fun l_0_6_182 () Real)
(declare-fun l_0_6_47 () Real)
(declare-fun l_0_6_2 () Real)
(declare-fun l_0_6_72 () Real)
(declare-fun l_0_6_66 () Real)
(declare-fun l_0_6_71 () Real)
(declare-fun l_0_6_65 () Real)
(declare-fun l_0_6_70 () Real)
(declare-fun l_0_6_64 () Real)
(declare-fun l_0_6_69 () Real)
(declare-fun l_0_6_63 () Real)
(declare-fun l_0_6_68 () Real)
(declare-fun l_0_6_62 () Real)
(declare-fun l_0_6_67 () Real)
(declare-fun l_0_6_61 () Real)
(declare-fun l_0_6_49 () Real)
(declare-fun l_0_6_252 () Real)
(declare-fun l_0_6_246 () Real)
(declare-fun l_0_6_251 () Real)
(declare-fun l_0_6_245 () Real)
(declare-fun l_0_6_250 () Real)
(declare-fun l_0_6_244 () Real)
(declare-fun l_0_6_249 () Real)
(declare-fun l_0_6_243 () Real)
(declare-fun l_0_6_248 () Real)
(declare-fun l_0_6_242 () Real)
(declare-fun l_0_6_247 () Real)
(declare-fun l_0_6_241 () Real)
(declare-fun l_0_6_27 () Real)
(declare-fun l_0_6_21 () Real)
(declare-fun l_0_6_26 () Real)
(declare-fun l_0_6_20 () Real)
(declare-fun l_0_6_25 () Real)
(declare-fun l_0_6_19 () Real)
(declare-fun l_0_6_24 () Real)
(declare-fun l_0_6_18 () Real)
(declare-fun l_0_6_23 () Real)
(declare-fun l_0_6_17 () Real)
(declare-fun l_0_6_22 () Real)
(declare-fun l_0_6_16 () Real)
(declare-fun l_0_6_4 () Real)
(declare-fun l_0_6_52 () Real)
(declare-fun l_0_6_7 () Real)
(declare-fun l_0_6_56 () Real)
(declare-fun l_0_6_11 () Real)
(declare-fun l_0_6_74 () Real)
(declare-fun l_0_6_162 () Real)
(declare-fun l_0_6_156 () Real)
(declare-fun l_0_6_161 () Real)
(declare-fun l_0_6_155 () Real)
(declare-fun l_0_6_160 () Real)
(declare-fun l_0_6_154 () Real)
(declare-fun l_0_6_159 () Real)
(declare-fun l_0_6_153 () Real)
(declare-fun l_0_6_158 () Real)
(declare-fun l_0_6_152 () Real)
(declare-fun l_0_6_157 () Real)
(declare-fun l_0_6_151 () Real)
(declare-fun l_0_6_117 () Real)
(declare-fun l_0_6_111 () Real)
(declare-fun l_0_6_116 () Real)
(declare-fun l_0_6_110 () Real)
(declare-fun l_0_6_115 () Real)
(declare-fun l_0_6_109 () Real)
(declare-fun l_0_6_114 () Real)
(declare-fun l_0_6_108 () Real)
(declare-fun l_0_6_113 () Real)
(declare-fun l_0_6_107 () Real)
(declare-fun l_0_6_112 () Real)
(declare-fun l_0_6_106 () Real)
(declare-fun l_0_6_29 () Real)
(declare-fun l_0_6_82 () Real)
(declare-fun l_0_6_37 () Real)
(declare-fun l_0_6_48 () Real)
(declare-fun l_0_6_3 () Real)
(declare-fun l_0_6_50 () Real)
(declare-fun l_0_6_5 () Real)
(declare-fun l_0_6_53 () Real)
(declare-fun l_0_6_8 () Real)
(declare-fun l_0_6_57 () Real)
(declare-fun l_0_6_12 () Real)
(declare-fun l_0_6_75 () Real)
(declare-fun l_0_6_30 () Real)
(declare-fun l_0_6_83 () Real)
(declare-fun l_0_6_38 () Real)
(declare-fun l_0_6_138 () Real)
(declare-fun l_0_6_137 () Real)
(declare-fun l_0_6_93 () Real)
(declare-fun l_0_6_92 () Real)
(declare-fun l_0_6_6 () Real)
(declare-fun l_0_6_51 () Real)
(declare-fun l_0_6_9 () Real)
(declare-fun l_0_6_54 () Real)
(declare-fun l_0_6_58 () Real)
(declare-fun l_0_6_13 () Real)
(declare-fun l_0_6_76 () Real)
(declare-fun l_0_6_31 () Real)
(declare-fun l_0_6_84 () Real)
(declare-fun l_0_6_39 () Real)
(declare-fun l_0_6_141 () Real)
(declare-fun l_0_6_140 () Real)
(declare-fun l_0_6_139 () Real)
(declare-fun l_0_6_96 () Real)
(declare-fun l_0_6_95 () Real)
(declare-fun l_0_6_94 () Real)
(declare-fun l_0_6_55 () Real)
(declare-fun l_0_6_10 () Real)
(declare-fun l_0_6_59 () Real)
(declare-fun l_0_6_14 () Real)
(declare-fun l_0_6_77 () Real)
(declare-fun l_0_6_32 () Real)
(declare-fun l_0_6_85 () Real)
(declare-fun l_0_6_145 () Real)
(declare-fun l_0_6_144 () Real)
(declare-fun l_0_6_143 () Real)
(declare-fun l_0_6_142 () Real)
(declare-fun l_0_6_99 () Real)
(declare-fun l_0_6_98 () Real)
(declare-fun l_0_6_97 () Real)
(declare-fun l_0_6_100 () Real)
(declare-fun l_0_6_40 () Real)
(declare-fun l_0_6_60 () Real)
(declare-fun l_0_6_15 () Real)
(declare-fun l_0_6_78 () Real)
(declare-fun l_0_6_33 () Real)
(declare-fun l_0_6_86 () Real)
(declare-fun l_0_6_150 () Real)
(declare-fun l_0_6_41 () Real)
(declare-fun l_0_6_149 () Real)
(declare-fun l_0_6_148 () Real)
(declare-fun l_0_6_147 () Real)
(declare-fun l_0_6_146 () Real)
(declare-fun l_0_6_105 () Real)
(declare-fun l_0_6_104 () Real)
(declare-fun l_0_6_103 () Real)
(declare-fun l_0_6_102 () Real)
(declare-fun l_0_6_101 () Real)
(declare-fun l_0_6_79 () Real)
(declare-fun l_0_6_34 () Real)
(declare-fun l_0_6_87 () Real)
(declare-fun l_0_6_42 () Real)
(declare-fun l_0_6_73 () Real)
(declare-fun l_0_6_28 () Real)
(declare-fun l_0_6_80 () Real)
(declare-fun l_0_6_35 () Real)
(declare-fun l_0_6_88 () Real)
(declare-fun l_0_6_43 () Real)
(declare-fun l_0_6_81 () Real)
(declare-fun l_0_6_36 () Real)
(declare-fun l_0_6_89 () Real)
(declare-fun l_0_6_44 () Real)
(declare-fun l_0_6_169 () Real)
(declare-fun l_0_6_168 () Real)
(declare-fun l_0_6_167 () Real)
(declare-fun l_0_6_166 () Real)
(declare-fun l_0_6_165 () Real)
(declare-fun l_0_6_164 () Real)
(declare-fun l_0_6_124 () Real)
(declare-fun l_0_6_123 () Real)
(declare-fun l_0_6_122 () Real)
(declare-fun l_0_6_121 () Real)
(declare-fun l_0_6_120 () Real)
(declare-fun l_0_6_119 () Real)
(declare-fun l_0_6_90 () Real)
(declare-fun l_0_6_45 () Real)
(declare-fun l_0_6_177 () Real)
(declare-fun l_0_6_176 () Real)
(declare-fun l_0_6_175 () Real)
(declare-fun l_0_6_174 () Real)
(declare-fun l_0_6_173 () Real)
(declare-fun l_0_6_172 () Real)
(declare-fun l_0_6_132 () Real)
(declare-fun l_0_6_131 () Real)
(declare-fun l_0_6_130 () Real)
(declare-fun l_0_6_129 () Real)
(declare-fun l_0_6_128 () Real)
(declare-fun l_0_6_127 () Real)
(declare-fun l_0_6_239 () Real)
(declare-fun l_0_6_235 () Real)
(declare-fun l_0_6_238 () Real)
(declare-fun l_0_6_234 () Real)
(declare-fun l_0_6_237 () Real)
(declare-fun l_0_6_233 () Real)
(declare-fun l_0_6_236 () Real)
(declare-fun l_0_6_232 () Real)
(declare-fun l_0_6_320 () Real)
(declare-fun l_0_6_275 () Real)
(declare-fun l_0_6_227 () Real)
(declare-fun l_0_6_185 () Real)
(declare-fun l_0_6_321 () Real)
(declare-fun l_0_6_276 () Real)
(declare-fun l_0_6_229 () Real)
(declare-fun l_0_6_186 () Real)
(declare-fun l_0_6_346 () Real)
(declare-fun l_0_6_345 () Real)
(declare-fun l_0_6_301 () Real)
(declare-fun l_0_6_300 () Real)
(declare-fun l_0_6_254 () Real)
(declare-fun l_0_6_211 () Real)
(declare-fun l_0_6_210 () Real)
(declare-fun l_0_6_262 () Real)
(declare-fun l_0_6_228 () Real)
(declare-fun l_0_6_230 () Real)
(declare-fun l_0_6_255 () Real)
(declare-fun l_0_6_263 () Real)
(declare-fun l_0_6_231 () Real)
(declare-fun l_0_6_256 () Real)
(declare-fun l_0_6_264 () Real)
(declare-fun l_0_6_257 () Real)
(declare-fun l_0_6_265 () Real)
(declare-fun l_0_6_240 () Real)
(declare-fun l_0_6_258 () Real)
(declare-fun l_0_6_266 () Real)
(declare-fun l_0_6_259 () Real)
(declare-fun l_0_6_267 () Real)
(declare-fun l_0_6_253 () Real)
(declare-fun l_0_6_260 () Real)
(declare-fun l_0_6_268 () Real)
(declare-fun l_0_6_261 () Real)
(declare-fun l_0_6_269 () Real)
(declare-fun l_0_6_270 () Real)
(declare-fun l_0_6_163 () Real)
(declare-fun l_0_6_118 () Real)
(declare-fun l_0_6_170 () Real)
(declare-fun l_0_6_125 () Real)
(declare-fun l_0_6_178 () Real)
(declare-fun l_0_6_133 () Real)
(declare-fun l_0_6_171 () Real)
(declare-fun l_0_6_126 () Real)
(declare-fun l_0_6_179 () Real)
(declare-fun l_0_6_134 () Real)
(declare-fun l_0_6_180 () Real)
(declare-fun l_0_6_135 () Real)
(declare-fun l_0_6_347 () Real)
(declare-fun l_0_6_302 () Real)
(declare-fun l_0_6_212 () Real)
(declare-fun l_0_6_348 () Real)
(declare-fun l_0_6_330 () Real)
(declare-fun l_0_6_303 () Real)
(declare-fun l_0_6_285 () Real)
(declare-fun l_0_6_213 () Real)
(declare-fun l_0_6_195 () Real)
(declare-fun l_0_6_349 () Real)
(declare-fun l_0_6_304 () Real)
(declare-fun l_0_6_214 () Real)
(declare-fun l_0_6_350 () Real)
(declare-fun l_0_6_305 () Real)
(declare-fun l_0_6_215 () Real)
(declare-fun l_0_6_351 () Real)
(declare-fun l_0_6_306 () Real)
(declare-fun l_0_6_216 () Real)
(declare-fun l_0_6_359 () Real)
(declare-fun l_0_6_314 () Real)
(declare-fun l_0_6_224 () Real)
(declare-fun l_0_6_360 () Real)
(declare-fun l_0_6_315 () Real)
(declare-fun l_0_6_225 () Real)
(declare-fun l_0_7_91 () Real)
(declare-fun l_0_7_368 () Real)
(declare-fun l_0_7_363 () Real)
(declare-fun l_0_7_367 () Real)
(declare-fun l_0_7_362 () Real)
(declare-fun l_0_7_323 () Real)
(declare-fun l_0_7_318 () Real)
(declare-fun l_0_7_322 () Real)
(declare-fun l_0_7_317 () Real)
(declare-fun l_0_7_278 () Real)
(declare-fun l_0_7_273 () Real)
(declare-fun l_0_7_277 () Real)
(declare-fun l_0_7_272 () Real)
(declare-fun l_0_7_188 () Real)
(declare-fun l_0_7_183 () Real)
(declare-fun l_0_7_187 () Real)
(declare-fun l_0_7_182 () Real)
(declare-fun l_0_7_136 () Real)
(declare-fun l_0_7_403 () Real)
(declare-fun l_0_7_388 () Real)
(declare-fun l_0_7_402 () Real)
(declare-fun l_0_7_387 () Real)
(declare-fun l_0_7_401 () Real)
(declare-fun l_0_7_386 () Real)
(declare-fun l_0_7_400 () Real)
(declare-fun l_0_7_385 () Real)
(declare-fun l_0_7_399 () Real)
(declare-fun l_0_7_384 () Real)
(declare-fun l_0_7_398 () Real)
(declare-fun l_0_7_383 () Real)
(declare-fun l_0_7_397 () Real)
(declare-fun l_0_7_382 () Real)
(declare-fun l_0_7_358 () Real)
(declare-fun l_0_7_343 () Real)
(declare-fun l_0_7_357 () Real)
(declare-fun l_0_7_342 () Real)
(declare-fun l_0_7_356 () Real)
(declare-fun l_0_7_341 () Real)
(declare-fun l_0_7_355 () Real)
(declare-fun l_0_7_340 () Real)
(declare-fun l_0_7_354 () Real)
(declare-fun l_0_7_339 () Real)
(declare-fun l_0_7_353 () Real)
(declare-fun l_0_7_338 () Real)
(declare-fun l_0_7_352 () Real)
(declare-fun l_0_7_337 () Real)
(declare-fun l_0_7_313 () Real)
(declare-fun l_0_7_298 () Real)
(declare-fun l_0_7_312 () Real)
(declare-fun l_0_7_297 () Real)
(declare-fun l_0_7_311 () Real)
(declare-fun l_0_7_296 () Real)
(declare-fun l_0_7_310 () Real)
(declare-fun l_0_7_295 () Real)
(declare-fun l_0_7_309 () Real)
(declare-fun l_0_7_294 () Real)
(declare-fun l_0_7_308 () Real)
(declare-fun l_0_7_293 () Real)
(declare-fun l_0_7_307 () Real)
(declare-fun l_0_7_292 () Real)
(declare-fun l_0_7_223 () Real)
(declare-fun l_0_7_208 () Real)
(declare-fun l_0_7_222 () Real)
(declare-fun l_0_7_207 () Real)
(declare-fun l_0_7_221 () Real)
(declare-fun l_0_7_206 () Real)
(declare-fun l_0_7_220 () Real)
(declare-fun l_0_7_205 () Real)
(declare-fun l_0_7_219 () Real)
(declare-fun l_0_7_204 () Real)
(declare-fun l_0_7_218 () Real)
(declare-fun l_0_7_203 () Real)
(declare-fun l_0_7_217 () Real)
(declare-fun l_0_7_202 () Real)
(declare-fun l_0_7_389 () Real)
(declare-fun l_0_7_361 () Real)
(declare-fun l_0_7_344 () Real)
(declare-fun l_0_7_316 () Real)
(declare-fun l_0_7_299 () Real)
(declare-fun l_0_7_271 () Real)
(declare-fun l_0_7_226 () Real)
(declare-fun l_0_7_209 () Real)
(declare-fun l_0_7_181 () Real)
(declare-fun l_0_7_46 () Real)
(declare-fun l_0_7_381 () Real)
(declare-fun l_0_7_380 () Real)
(declare-fun l_0_7_379 () Real)
(declare-fun l_0_7_378 () Real)
(declare-fun l_0_7_377 () Real)
(declare-fun l_0_7_376 () Real)
(declare-fun l_0_7_336 () Real)
(declare-fun l_0_7_335 () Real)
(declare-fun l_0_7_334 () Real)
(declare-fun l_0_7_333 () Real)
(declare-fun l_0_7_332 () Real)
(declare-fun l_0_7_331 () Real)
(declare-fun l_0_7_291 () Real)
(declare-fun l_0_7_290 () Real)
(declare-fun l_0_7_289 () Real)
(declare-fun l_0_7_288 () Real)
(declare-fun l_0_7_287 () Real)
(declare-fun l_0_7_286 () Real)
(declare-fun l_0_7_201 () Real)
(declare-fun l_0_7_200 () Real)
(declare-fun l_0_7_199 () Real)
(declare-fun l_0_7_198 () Real)
(declare-fun l_0_7_197 () Real)
(declare-fun l_0_7_196 () Real)
(declare-fun l_0_7_1 () Real)
(declare-fun l_0_7_47 () Real)
(declare-fun l_0_7_2 () Real)
(declare-fun l_0_7_72 () Real)
(declare-fun l_0_7_66 () Real)
(declare-fun l_0_7_71 () Real)
(declare-fun l_0_7_65 () Real)
(declare-fun l_0_7_70 () Real)
(declare-fun l_0_7_64 () Real)
(declare-fun l_0_7_69 () Real)
(declare-fun l_0_7_63 () Real)
(declare-fun l_0_7_68 () Real)
(declare-fun l_0_7_62 () Real)
(declare-fun l_0_7_67 () Real)
(declare-fun l_0_7_61 () Real)
(declare-fun l_0_7_49 () Real)
(declare-fun l_0_7_252 () Real)
(declare-fun l_0_7_246 () Real)
(declare-fun l_0_7_251 () Real)
(declare-fun l_0_7_245 () Real)
(declare-fun l_0_7_250 () Real)
(declare-fun l_0_7_244 () Real)
(declare-fun l_0_7_249 () Real)
(declare-fun l_0_7_243 () Real)
(declare-fun l_0_7_248 () Real)
(declare-fun l_0_7_242 () Real)
(declare-fun l_0_7_247 () Real)
(declare-fun l_0_7_241 () Real)
(declare-fun l_0_7_27 () Real)
(declare-fun l_0_7_21 () Real)
(declare-fun l_0_7_26 () Real)
(declare-fun l_0_7_20 () Real)
(declare-fun l_0_7_25 () Real)
(declare-fun l_0_7_19 () Real)
(declare-fun l_0_7_24 () Real)
(declare-fun l_0_7_18 () Real)
(declare-fun l_0_7_23 () Real)
(declare-fun l_0_7_17 () Real)
(declare-fun l_0_7_22 () Real)
(declare-fun l_0_7_16 () Real)
(declare-fun l_0_7_4 () Real)
(declare-fun l_0_7_52 () Real)
(declare-fun l_0_7_7 () Real)
(declare-fun l_0_7_56 () Real)
(declare-fun l_0_7_11 () Real)
(declare-fun l_0_7_74 () Real)
(declare-fun l_0_7_162 () Real)
(declare-fun l_0_7_156 () Real)
(declare-fun l_0_7_161 () Real)
(declare-fun l_0_7_155 () Real)
(declare-fun l_0_7_160 () Real)
(declare-fun l_0_7_154 () Real)
(declare-fun l_0_7_159 () Real)
(declare-fun l_0_7_153 () Real)
(declare-fun l_0_7_158 () Real)
(declare-fun l_0_7_152 () Real)
(declare-fun l_0_7_157 () Real)
(declare-fun l_0_7_151 () Real)
(declare-fun l_0_7_117 () Real)
(declare-fun l_0_7_111 () Real)
(declare-fun l_0_7_116 () Real)
(declare-fun l_0_7_110 () Real)
(declare-fun l_0_7_115 () Real)
(declare-fun l_0_7_109 () Real)
(declare-fun l_0_7_114 () Real)
(declare-fun l_0_7_108 () Real)
(declare-fun l_0_7_113 () Real)
(declare-fun l_0_7_107 () Real)
(declare-fun l_0_7_112 () Real)
(declare-fun l_0_7_106 () Real)
(declare-fun l_0_7_29 () Real)
(declare-fun l_0_7_82 () Real)
(declare-fun l_0_7_37 () Real)
(declare-fun l_0_7_48 () Real)
(declare-fun l_0_7_3 () Real)
(declare-fun l_0_7_50 () Real)
(declare-fun l_0_7_5 () Real)
(declare-fun l_0_7_53 () Real)
(declare-fun l_0_7_8 () Real)
(declare-fun l_0_7_57 () Real)
(declare-fun l_0_7_12 () Real)
(declare-fun l_0_7_75 () Real)
(declare-fun l_0_7_30 () Real)
(declare-fun l_0_7_83 () Real)
(declare-fun l_0_7_38 () Real)
(declare-fun l_0_7_138 () Real)
(declare-fun l_0_7_137 () Real)
(declare-fun l_0_7_93 () Real)
(declare-fun l_0_7_92 () Real)
(declare-fun l_0_7_6 () Real)
(declare-fun l_0_7_51 () Real)
(declare-fun l_0_7_9 () Real)
(declare-fun l_0_7_54 () Real)
(declare-fun l_0_7_58 () Real)
(declare-fun l_0_7_13 () Real)
(declare-fun l_0_7_76 () Real)
(declare-fun l_0_7_31 () Real)
(declare-fun l_0_7_84 () Real)
(declare-fun l_0_7_39 () Real)
(declare-fun l_0_7_141 () Real)
(declare-fun l_0_7_140 () Real)
(declare-fun l_0_7_139 () Real)
(declare-fun l_0_7_96 () Real)
(declare-fun l_0_7_95 () Real)
(declare-fun l_0_7_94 () Real)
(declare-fun l_0_7_55 () Real)
(declare-fun l_0_7_10 () Real)
(declare-fun l_0_7_59 () Real)
(declare-fun l_0_7_14 () Real)
(declare-fun l_0_7_77 () Real)
(declare-fun l_0_7_32 () Real)
(declare-fun l_0_7_85 () Real)
(declare-fun l_0_7_145 () Real)
(declare-fun l_0_7_144 () Real)
(declare-fun l_0_7_143 () Real)
(declare-fun l_0_7_142 () Real)
(declare-fun l_0_7_99 () Real)
(declare-fun l_0_7_98 () Real)
(declare-fun l_0_7_97 () Real)
(declare-fun l_0_7_100 () Real)
(declare-fun l_0_7_40 () Real)
(declare-fun l_0_7_60 () Real)
(declare-fun l_0_7_15 () Real)
(declare-fun l_0_7_78 () Real)
(declare-fun l_0_7_33 () Real)
(declare-fun l_0_7_86 () Real)
(declare-fun l_0_7_150 () Real)
(declare-fun l_0_7_41 () Real)
(declare-fun l_0_7_149 () Real)
(declare-fun l_0_7_148 () Real)
(declare-fun l_0_7_147 () Real)
(declare-fun l_0_7_146 () Real)
(declare-fun l_0_7_105 () Real)
(declare-fun l_0_7_104 () Real)
(declare-fun l_0_7_103 () Real)
(declare-fun l_0_7_102 () Real)
(declare-fun l_0_7_101 () Real)
(declare-fun l_0_7_79 () Real)
(declare-fun l_0_7_34 () Real)
(declare-fun l_0_7_87 () Real)
(declare-fun l_0_7_42 () Real)
(declare-fun l_0_7_73 () Real)
(declare-fun l_0_7_28 () Real)
(declare-fun l_0_7_80 () Real)
(declare-fun l_0_7_35 () Real)
(declare-fun l_0_7_88 () Real)
(declare-fun l_0_7_43 () Real)
(declare-fun l_0_7_81 () Real)
(declare-fun l_0_7_36 () Real)
(declare-fun l_0_7_89 () Real)
(declare-fun l_0_7_44 () Real)
(declare-fun l_0_7_169 () Real)
(declare-fun l_0_7_168 () Real)
(declare-fun l_0_7_167 () Real)
(declare-fun l_0_7_166 () Real)
(declare-fun l_0_7_165 () Real)
(declare-fun l_0_7_164 () Real)
(declare-fun l_0_7_124 () Real)
(declare-fun l_0_7_123 () Real)
(declare-fun l_0_7_122 () Real)
(declare-fun l_0_7_121 () Real)
(declare-fun l_0_7_120 () Real)
(declare-fun l_0_7_119 () Real)
(declare-fun l_0_7_90 () Real)
(declare-fun l_0_7_45 () Real)
(declare-fun l_0_7_177 () Real)
(declare-fun l_0_7_176 () Real)
(declare-fun l_0_7_175 () Real)
(declare-fun l_0_7_174 () Real)
(declare-fun l_0_7_173 () Real)
(declare-fun l_0_7_172 () Real)
(declare-fun l_0_7_132 () Real)
(declare-fun l_0_7_131 () Real)
(declare-fun l_0_7_130 () Real)
(declare-fun l_0_7_129 () Real)
(declare-fun l_0_7_128 () Real)
(declare-fun l_0_7_127 () Real)
(declare-fun l_0_7_374 () Real)
(declare-fun l_0_7_370 () Real)
(declare-fun l_0_7_373 () Real)
(declare-fun l_0_7_369 () Real)
(declare-fun l_0_7_372 () Real)
(declare-fun l_0_7_371 () Real)
(declare-fun l_0_7_329 () Real)
(declare-fun l_0_7_325 () Real)
(declare-fun l_0_7_328 () Real)
(declare-fun l_0_7_324 () Real)
(declare-fun l_0_7_327 () Real)
(declare-fun l_0_7_326 () Real)
(declare-fun l_0_7_284 () Real)
(declare-fun l_0_7_280 () Real)
(declare-fun l_0_7_283 () Real)
(declare-fun l_0_7_279 () Real)
(declare-fun l_0_7_282 () Real)
(declare-fun l_0_7_281 () Real)
(declare-fun l_0_7_194 () Real)
(declare-fun l_0_7_190 () Real)
(declare-fun l_0_7_193 () Real)
(declare-fun l_0_7_189 () Real)
(declare-fun l_0_7_192 () Real)
(declare-fun l_0_7_191 () Real)
(declare-fun l_0_7_239 () Real)
(declare-fun l_0_7_235 () Real)
(declare-fun l_0_7_238 () Real)
(declare-fun l_0_7_234 () Real)
(declare-fun l_0_7_237 () Real)
(declare-fun l_0_7_233 () Real)
(declare-fun l_0_7_236 () Real)
(declare-fun l_0_7_232 () Real)
(declare-fun l_0_7_364 () Real)
(declare-fun l_0_7_319 () Real)
(declare-fun l_0_7_274 () Real)
(declare-fun l_0_7_184 () Real)
(declare-fun l_0_7_365 () Real)
(declare-fun l_0_7_320 () Real)
(declare-fun l_0_7_275 () Real)
(declare-fun l_0_7_227 () Real)
(declare-fun l_0_7_185 () Real)
(declare-fun l_0_7_366 () Real)
(declare-fun l_0_7_321 () Real)
(declare-fun l_0_7_276 () Real)
(declare-fun l_0_7_229 () Real)
(declare-fun l_0_7_186 () Real)
(declare-fun l_0_7_391 () Real)
(declare-fun l_0_7_390 () Real)
(declare-fun l_0_7_346 () Real)
(declare-fun l_0_7_345 () Real)
(declare-fun l_0_7_301 () Real)
(declare-fun l_0_7_300 () Real)
(declare-fun l_0_7_254 () Real)
(declare-fun l_0_7_211 () Real)
(declare-fun l_0_7_210 () Real)
(declare-fun l_0_7_262 () Real)
(declare-fun l_0_7_228 () Real)
(declare-fun l_0_7_230 () Real)
(declare-fun l_0_7_255 () Real)
(declare-fun l_0_7_263 () Real)
(declare-fun l_0_7_231 () Real)
(declare-fun l_0_7_256 () Real)
(declare-fun l_0_7_264 () Real)
(declare-fun l_0_7_257 () Real)
(declare-fun l_0_7_265 () Real)
(declare-fun l_0_7_240 () Real)
(declare-fun l_0_7_258 () Real)
(declare-fun l_0_7_266 () Real)
(declare-fun l_0_7_259 () Real)
(declare-fun l_0_7_267 () Real)
(declare-fun l_0_7_253 () Real)
(declare-fun l_0_7_260 () Real)
(declare-fun l_0_7_268 () Real)
(declare-fun l_0_7_261 () Real)
(declare-fun l_0_7_269 () Real)
(declare-fun l_0_7_270 () Real)
(declare-fun l_0_7_163 () Real)
(declare-fun l_0_7_118 () Real)
(declare-fun l_0_7_170 () Real)
(declare-fun l_0_7_125 () Real)
(declare-fun l_0_7_178 () Real)
(declare-fun l_0_7_133 () Real)
(declare-fun l_0_7_171 () Real)
(declare-fun l_0_7_126 () Real)
(declare-fun l_0_7_179 () Real)
(declare-fun l_0_7_134 () Real)
(declare-fun l_0_7_180 () Real)
(declare-fun l_0_7_135 () Real)
(declare-fun l_0_7_392 () Real)
(declare-fun l_0_7_347 () Real)
(declare-fun l_0_7_302 () Real)
(declare-fun l_0_7_212 () Real)
(declare-fun l_0_7_393 () Real)
(declare-fun l_0_7_375 () Real)
(declare-fun l_0_7_348 () Real)
(declare-fun l_0_7_330 () Real)
(declare-fun l_0_7_303 () Real)
(declare-fun l_0_7_285 () Real)
(declare-fun l_0_7_213 () Real)
(declare-fun l_0_7_195 () Real)
(declare-fun l_0_7_394 () Real)
(declare-fun l_0_7_349 () Real)
(declare-fun l_0_7_304 () Real)
(declare-fun l_0_7_214 () Real)
(declare-fun l_0_7_395 () Real)
(declare-fun l_0_7_350 () Real)
(declare-fun l_0_7_305 () Real)
(declare-fun l_0_7_215 () Real)
(declare-fun l_0_7_396 () Real)
(declare-fun l_0_7_351 () Real)
(declare-fun l_0_7_306 () Real)
(declare-fun l_0_7_216 () Real)
(declare-fun l_0_7_404 () Real)
(declare-fun l_0_7_359 () Real)
(declare-fun l_0_7_314 () Real)
(declare-fun l_0_7_224 () Real)
(declare-fun l_0_7_405 () Real)
(declare-fun l_0_7_360 () Real)
(declare-fun l_0_7_315 () Real)
(declare-fun l_0_7_225 () Real)
(declare-fun l_0_8_91 () Real)
(declare-fun l_0_8_434 () Real)
(declare-fun l_0_8_406 () Real)
(declare-fun l_0_8_389 () Real)
(declare-fun l_0_8_361 () Real)
(declare-fun l_0_8_344 () Real)
(declare-fun l_0_8_316 () Real)
(declare-fun l_0_8_299 () Real)
(declare-fun l_0_8_271 () Real)
(declare-fun l_0_8_226 () Real)
(declare-fun l_0_8_209 () Real)
(declare-fun l_0_8_181 () Real)
(declare-fun l_0_8_136 () Real)
(declare-fun l_0_8_413 () Real)
(declare-fun l_0_8_408 () Real)
(declare-fun l_0_8_412 () Real)
(declare-fun l_0_8_407 () Real)
(declare-fun l_0_8_368 () Real)
(declare-fun l_0_8_363 () Real)
(declare-fun l_0_8_367 () Real)
(declare-fun l_0_8_362 () Real)
(declare-fun l_0_8_323 () Real)
(declare-fun l_0_8_318 () Real)
(declare-fun l_0_8_322 () Real)
(declare-fun l_0_8_317 () Real)
(declare-fun l_0_8_278 () Real)
(declare-fun l_0_8_273 () Real)
(declare-fun l_0_8_277 () Real)
(declare-fun l_0_8_272 () Real)
(declare-fun l_0_8_188 () Real)
(declare-fun l_0_8_183 () Real)
(declare-fun l_0_8_187 () Real)
(declare-fun l_0_8_182 () Real)
(declare-fun l_0_8_448 () Real)
(declare-fun l_0_8_433 () Real)
(declare-fun l_0_8_447 () Real)
(declare-fun l_0_8_432 () Real)
(declare-fun l_0_8_446 () Real)
(declare-fun l_0_8_431 () Real)
(declare-fun l_0_8_445 () Real)
(declare-fun l_0_8_430 () Real)
(declare-fun l_0_8_444 () Real)
(declare-fun l_0_8_429 () Real)
(declare-fun l_0_8_443 () Real)
(declare-fun l_0_8_428 () Real)
(declare-fun l_0_8_442 () Real)
(declare-fun l_0_8_427 () Real)
(declare-fun l_0_8_403 () Real)
(declare-fun l_0_8_388 () Real)
(declare-fun l_0_8_402 () Real)
(declare-fun l_0_8_387 () Real)
(declare-fun l_0_8_401 () Real)
(declare-fun l_0_8_386 () Real)
(declare-fun l_0_8_400 () Real)
(declare-fun l_0_8_385 () Real)
(declare-fun l_0_8_399 () Real)
(declare-fun l_0_8_384 () Real)
(declare-fun l_0_8_398 () Real)
(declare-fun l_0_8_383 () Real)
(declare-fun l_0_8_397 () Real)
(declare-fun l_0_8_382 () Real)
(declare-fun l_0_8_358 () Real)
(declare-fun l_0_8_343 () Real)
(declare-fun l_0_8_357 () Real)
(declare-fun l_0_8_342 () Real)
(declare-fun l_0_8_356 () Real)
(declare-fun l_0_8_341 () Real)
(declare-fun l_0_8_355 () Real)
(declare-fun l_0_8_340 () Real)
(declare-fun l_0_8_354 () Real)
(declare-fun l_0_8_339 () Real)
(declare-fun l_0_8_353 () Real)
(declare-fun l_0_8_338 () Real)
(declare-fun l_0_8_352 () Real)
(declare-fun l_0_8_337 () Real)
(declare-fun l_0_8_313 () Real)
(declare-fun l_0_8_298 () Real)
(declare-fun l_0_8_312 () Real)
(declare-fun l_0_8_297 () Real)
(declare-fun l_0_8_311 () Real)
(declare-fun l_0_8_296 () Real)
(declare-fun l_0_8_310 () Real)
(declare-fun l_0_8_295 () Real)
(declare-fun l_0_8_309 () Real)
(declare-fun l_0_8_294 () Real)
(declare-fun l_0_8_308 () Real)
(declare-fun l_0_8_293 () Real)
(declare-fun l_0_8_307 () Real)
(declare-fun l_0_8_292 () Real)
(declare-fun l_0_8_223 () Real)
(declare-fun l_0_8_208 () Real)
(declare-fun l_0_8_222 () Real)
(declare-fun l_0_8_207 () Real)
(declare-fun l_0_8_221 () Real)
(declare-fun l_0_8_206 () Real)
(declare-fun l_0_8_220 () Real)
(declare-fun l_0_8_205 () Real)
(declare-fun l_0_8_219 () Real)
(declare-fun l_0_8_204 () Real)
(declare-fun l_0_8_218 () Real)
(declare-fun l_0_8_203 () Real)
(declare-fun l_0_8_217 () Real)
(declare-fun l_0_8_202 () Real)
(declare-fun l_0_8_46 () Real)
(declare-fun l_0_8_426 () Real)
(declare-fun l_0_8_425 () Real)
(declare-fun l_0_8_424 () Real)
(declare-fun l_0_8_423 () Real)
(declare-fun l_0_8_422 () Real)
(declare-fun l_0_8_421 () Real)
(declare-fun l_0_8_381 () Real)
(declare-fun l_0_8_380 () Real)
(declare-fun l_0_8_379 () Real)
(declare-fun l_0_8_378 () Real)
(declare-fun l_0_8_377 () Real)
(declare-fun l_0_8_376 () Real)
(declare-fun l_0_8_336 () Real)
(declare-fun l_0_8_335 () Real)
(declare-fun l_0_8_334 () Real)
(declare-fun l_0_8_333 () Real)
(declare-fun l_0_8_332 () Real)
(declare-fun l_0_8_331 () Real)
(declare-fun l_0_8_291 () Real)
(declare-fun l_0_8_290 () Real)
(declare-fun l_0_8_289 () Real)
(declare-fun l_0_8_288 () Real)
(declare-fun l_0_8_287 () Real)
(declare-fun l_0_8_286 () Real)
(declare-fun l_0_8_201 () Real)
(declare-fun l_0_8_200 () Real)
(declare-fun l_0_8_199 () Real)
(declare-fun l_0_8_198 () Real)
(declare-fun l_0_8_197 () Real)
(declare-fun l_0_8_196 () Real)
(declare-fun l_0_8_1 () Real)
(declare-fun l_0_8_47 () Real)
(declare-fun l_0_8_2 () Real)
(declare-fun l_0_8_72 () Real)
(declare-fun l_0_8_66 () Real)
(declare-fun l_0_8_71 () Real)
(declare-fun l_0_8_65 () Real)
(declare-fun l_0_8_70 () Real)
(declare-fun l_0_8_64 () Real)
(declare-fun l_0_8_69 () Real)
(declare-fun l_0_8_63 () Real)
(declare-fun l_0_8_68 () Real)
(declare-fun l_0_8_62 () Real)
(declare-fun l_0_8_67 () Real)
(declare-fun l_0_8_61 () Real)
(declare-fun l_0_8_49 () Real)
(declare-fun l_0_8_252 () Real)
(declare-fun l_0_8_246 () Real)
(declare-fun l_0_8_251 () Real)
(declare-fun l_0_8_245 () Real)
(declare-fun l_0_8_250 () Real)
(declare-fun l_0_8_244 () Real)
(declare-fun l_0_8_249 () Real)
(declare-fun l_0_8_243 () Real)
(declare-fun l_0_8_248 () Real)
(declare-fun l_0_8_242 () Real)
(declare-fun l_0_8_247 () Real)
(declare-fun l_0_8_241 () Real)
(declare-fun l_0_8_27 () Real)
(declare-fun l_0_8_21 () Real)
(declare-fun l_0_8_26 () Real)
(declare-fun l_0_8_20 () Real)
(declare-fun l_0_8_25 () Real)
(declare-fun l_0_8_19 () Real)
(declare-fun l_0_8_24 () Real)
(declare-fun l_0_8_18 () Real)
(declare-fun l_0_8_23 () Real)
(declare-fun l_0_8_17 () Real)
(declare-fun l_0_8_22 () Real)
(declare-fun l_0_8_16 () Real)
(declare-fun l_0_8_4 () Real)
(declare-fun l_0_8_52 () Real)
(declare-fun l_0_8_7 () Real)
(declare-fun l_0_8_56 () Real)
(declare-fun l_0_8_11 () Real)
(declare-fun l_0_8_74 () Real)
(declare-fun l_0_8_162 () Real)
(declare-fun l_0_8_156 () Real)
(declare-fun l_0_8_161 () Real)
(declare-fun l_0_8_155 () Real)
(declare-fun l_0_8_160 () Real)
(declare-fun l_0_8_154 () Real)
(declare-fun l_0_8_159 () Real)
(declare-fun l_0_8_153 () Real)
(declare-fun l_0_8_158 () Real)
(declare-fun l_0_8_152 () Real)
(declare-fun l_0_8_157 () Real)
(declare-fun l_0_8_151 () Real)
(declare-fun l_0_8_117 () Real)
(declare-fun l_0_8_111 () Real)
(declare-fun l_0_8_116 () Real)
(declare-fun l_0_8_110 () Real)
(declare-fun l_0_8_115 () Real)
(declare-fun l_0_8_109 () Real)
(declare-fun l_0_8_114 () Real)
(declare-fun l_0_8_108 () Real)
(declare-fun l_0_8_113 () Real)
(declare-fun l_0_8_107 () Real)
(declare-fun l_0_8_112 () Real)
(declare-fun l_0_8_106 () Real)
(declare-fun l_0_8_29 () Real)
(declare-fun l_0_8_82 () Real)
(declare-fun l_0_8_37 () Real)
(declare-fun l_0_8_48 () Real)
(declare-fun l_0_8_3 () Real)
(declare-fun l_0_8_50 () Real)
(declare-fun l_0_8_5 () Real)
(declare-fun l_0_8_53 () Real)
(declare-fun l_0_8_8 () Real)
(declare-fun l_0_8_57 () Real)
(declare-fun l_0_8_12 () Real)
(declare-fun l_0_8_75 () Real)
(declare-fun l_0_8_30 () Real)
(declare-fun l_0_8_83 () Real)
(declare-fun l_0_8_38 () Real)
(declare-fun l_0_8_138 () Real)
(declare-fun l_0_8_137 () Real)
(declare-fun l_0_8_93 () Real)
(declare-fun l_0_8_92 () Real)
(declare-fun l_0_8_6 () Real)
(declare-fun l_0_8_51 () Real)
(declare-fun l_0_8_9 () Real)
(declare-fun l_0_8_54 () Real)
(declare-fun l_0_8_58 () Real)
(declare-fun l_0_8_13 () Real)
(declare-fun l_0_8_76 () Real)
(declare-fun l_0_8_31 () Real)
(declare-fun l_0_8_84 () Real)
(declare-fun l_0_8_39 () Real)
(declare-fun l_0_8_141 () Real)
(declare-fun l_0_8_140 () Real)
(declare-fun l_0_8_139 () Real)
(declare-fun l_0_8_96 () Real)
(declare-fun l_0_8_95 () Real)
(declare-fun l_0_8_94 () Real)
(declare-fun l_0_8_55 () Real)
(declare-fun l_0_8_10 () Real)
(declare-fun l_0_8_59 () Real)
(declare-fun l_0_8_14 () Real)
(declare-fun l_0_8_77 () Real)
(declare-fun l_0_8_32 () Real)
(declare-fun l_0_8_85 () Real)
(declare-fun l_0_8_145 () Real)
(declare-fun l_0_8_144 () Real)
(declare-fun l_0_8_143 () Real)
(declare-fun l_0_8_142 () Real)
(declare-fun l_0_8_99 () Real)
(declare-fun l_0_8_98 () Real)
(declare-fun l_0_8_97 () Real)
(declare-fun l_0_8_100 () Real)
(declare-fun l_0_8_40 () Real)
(declare-fun l_0_8_60 () Real)
(declare-fun l_0_8_15 () Real)
(declare-fun l_0_8_78 () Real)
(declare-fun l_0_8_33 () Real)
(declare-fun l_0_8_86 () Real)
(declare-fun l_0_8_150 () Real)
(declare-fun l_0_8_41 () Real)
(declare-fun l_0_8_149 () Real)
(declare-fun l_0_8_148 () Real)
(declare-fun l_0_8_147 () Real)
(declare-fun l_0_8_146 () Real)
(declare-fun l_0_8_105 () Real)
(declare-fun l_0_8_104 () Real)
(declare-fun l_0_8_103 () Real)
(declare-fun l_0_8_102 () Real)
(declare-fun l_0_8_101 () Real)
(declare-fun l_0_8_79 () Real)
(declare-fun l_0_8_34 () Real)
(declare-fun l_0_8_87 () Real)
(declare-fun l_0_8_42 () Real)
(declare-fun l_0_8_73 () Real)
(declare-fun l_0_8_28 () Real)
(declare-fun l_0_8_80 () Real)
(declare-fun l_0_8_35 () Real)
(declare-fun l_0_8_88 () Real)
(declare-fun l_0_8_43 () Real)
(declare-fun l_0_8_81 () Real)
(declare-fun l_0_8_36 () Real)
(declare-fun l_0_8_89 () Real)
(declare-fun l_0_8_44 () Real)
(declare-fun l_0_8_169 () Real)
(declare-fun l_0_8_168 () Real)
(declare-fun l_0_8_167 () Real)
(declare-fun l_0_8_166 () Real)
(declare-fun l_0_8_165 () Real)
(declare-fun l_0_8_164 () Real)
(declare-fun l_0_8_124 () Real)
(declare-fun l_0_8_123 () Real)
(declare-fun l_0_8_122 () Real)
(declare-fun l_0_8_121 () Real)
(declare-fun l_0_8_120 () Real)
(declare-fun l_0_8_119 () Real)
(declare-fun l_0_8_90 () Real)
(declare-fun l_0_8_45 () Real)
(declare-fun l_0_8_177 () Real)
(declare-fun l_0_8_176 () Real)
(declare-fun l_0_8_175 () Real)
(declare-fun l_0_8_174 () Real)
(declare-fun l_0_8_173 () Real)
(declare-fun l_0_8_172 () Real)
(declare-fun l_0_8_132 () Real)
(declare-fun l_0_8_131 () Real)
(declare-fun l_0_8_130 () Real)
(declare-fun l_0_8_129 () Real)
(declare-fun l_0_8_128 () Real)
(declare-fun l_0_8_127 () Real)
(declare-fun l_0_8_419 () Real)
(declare-fun l_0_8_415 () Real)
(declare-fun l_0_8_418 () Real)
(declare-fun l_0_8_414 () Real)
(declare-fun l_0_8_417 () Real)
(declare-fun l_0_8_416 () Real)
(declare-fun l_0_8_374 () Real)
(declare-fun l_0_8_370 () Real)
(declare-fun l_0_8_373 () Real)
(declare-fun l_0_8_369 () Real)
(declare-fun l_0_8_372 () Real)
(declare-fun l_0_8_371 () Real)
(declare-fun l_0_8_329 () Real)
(declare-fun l_0_8_325 () Real)
(declare-fun l_0_8_328 () Real)
(declare-fun l_0_8_324 () Real)
(declare-fun l_0_8_327 () Real)
(declare-fun l_0_8_326 () Real)
(declare-fun l_0_8_284 () Real)
(declare-fun l_0_8_280 () Real)
(declare-fun l_0_8_283 () Real)
(declare-fun l_0_8_279 () Real)
(declare-fun l_0_8_282 () Real)
(declare-fun l_0_8_281 () Real)
(declare-fun l_0_8_194 () Real)
(declare-fun l_0_8_190 () Real)
(declare-fun l_0_8_193 () Real)
(declare-fun l_0_8_189 () Real)
(declare-fun l_0_8_192 () Real)
(declare-fun l_0_8_191 () Real)
(declare-fun l_0_8_239 () Real)
(declare-fun l_0_8_235 () Real)
(declare-fun l_0_8_238 () Real)
(declare-fun l_0_8_234 () Real)
(declare-fun l_0_8_237 () Real)
(declare-fun l_0_8_233 () Real)
(declare-fun l_0_8_236 () Real)
(declare-fun l_0_8_232 () Real)
(declare-fun l_0_8_409 () Real)
(declare-fun l_0_8_364 () Real)
(declare-fun l_0_8_319 () Real)
(declare-fun l_0_8_274 () Real)
(declare-fun l_0_8_184 () Real)
(declare-fun l_0_8_410 () Real)
(declare-fun l_0_8_365 () Real)
(declare-fun l_0_8_320 () Real)
(declare-fun l_0_8_275 () Real)
(declare-fun l_0_8_227 () Real)
(declare-fun l_0_8_185 () Real)
(declare-fun l_0_8_411 () Real)
(declare-fun l_0_8_366 () Real)
(declare-fun l_0_8_321 () Real)
(declare-fun l_0_8_276 () Real)
(declare-fun l_0_8_229 () Real)
(declare-fun l_0_8_186 () Real)
(declare-fun l_0_8_436 () Real)
(declare-fun l_0_8_435 () Real)
(declare-fun l_0_8_391 () Real)
(declare-fun l_0_8_390 () Real)
(declare-fun l_0_8_346 () Real)
(declare-fun l_0_8_345 () Real)
(declare-fun l_0_8_301 () Real)
(declare-fun l_0_8_300 () Real)
(declare-fun l_0_8_254 () Real)
(declare-fun l_0_8_211 () Real)
(declare-fun l_0_8_210 () Real)
(declare-fun l_0_8_262 () Real)
(declare-fun l_0_8_228 () Real)
(declare-fun l_0_8_230 () Real)
(declare-fun l_0_8_255 () Real)
(declare-fun l_0_8_263 () Real)
(declare-fun l_0_8_231 () Real)
(declare-fun l_0_8_256 () Real)
(declare-fun l_0_8_264 () Real)
(declare-fun l_0_8_257 () Real)
(declare-fun l_0_8_265 () Real)
(declare-fun l_0_8_240 () Real)
(declare-fun l_0_8_258 () Real)
(declare-fun l_0_8_266 () Real)
(declare-fun l_0_8_259 () Real)
(declare-fun l_0_8_267 () Real)
(declare-fun l_0_8_253 () Real)
(declare-fun l_0_8_260 () Real)
(declare-fun l_0_8_268 () Real)
(declare-fun l_0_8_261 () Real)
(declare-fun l_0_8_269 () Real)
(declare-fun l_0_8_270 () Real)
(declare-fun l_0_8_163 () Real)
(declare-fun l_0_8_118 () Real)
(declare-fun l_0_8_170 () Real)
(declare-fun l_0_8_125 () Real)
(declare-fun l_0_8_178 () Real)
(declare-fun l_0_8_133 () Real)
(declare-fun l_0_8_171 () Real)
(declare-fun l_0_8_126 () Real)
(declare-fun l_0_8_179 () Real)
(declare-fun l_0_8_134 () Real)
(declare-fun l_0_8_180 () Real)
(declare-fun l_0_8_135 () Real)
(declare-fun l_0_8_437 () Real)
(declare-fun l_0_8_392 () Real)
(declare-fun l_0_8_347 () Real)
(declare-fun l_0_8_302 () Real)
(declare-fun l_0_8_212 () Real)
(declare-fun l_0_8_438 () Real)
(declare-fun l_0_8_420 () Real)
(declare-fun l_0_8_393 () Real)
(declare-fun l_0_8_375 () Real)
(declare-fun l_0_8_348 () Real)
(declare-fun l_0_8_330 () Real)
(declare-fun l_0_8_303 () Real)
(declare-fun l_0_8_285 () Real)
(declare-fun l_0_8_213 () Real)
(declare-fun l_0_8_195 () Real)
(declare-fun l_0_8_439 () Real)
(declare-fun l_0_8_394 () Real)
(declare-fun l_0_8_349 () Real)
(declare-fun l_0_8_304 () Real)
(declare-fun l_0_8_214 () Real)
(declare-fun l_0_8_440 () Real)
(declare-fun l_0_8_395 () Real)
(declare-fun l_0_8_350 () Real)
(declare-fun l_0_8_305 () Real)
(declare-fun l_0_8_215 () Real)
(declare-fun l_0_8_441 () Real)
(declare-fun l_0_8_396 () Real)
(declare-fun l_0_8_351 () Real)
(declare-fun l_0_8_306 () Real)
(declare-fun l_0_8_216 () Real)
(declare-fun l_0_8_449 () Real)
(declare-fun l_0_8_404 () Real)
(declare-fun l_0_8_359 () Real)
(declare-fun l_0_8_314 () Real)
(declare-fun l_0_8_224 () Real)
(declare-fun l_0_8_450 () Real)
(declare-fun l_0_8_405 () Real)
(declare-fun l_0_8_360 () Real)
(declare-fun l_0_8_315 () Real)
(declare-fun l_0_8_225 () Real)
(declare-fun l_0_9_46 () Real)
(declare-fun l_0_9_297 () Real)
(declare-fun l_0_9_291 () Real)
(declare-fun l_0_9_296 () Real)
(declare-fun l_0_9_290 () Real)
(declare-fun l_0_9_295 () Real)
(declare-fun l_0_9_289 () Real)
(declare-fun l_0_9_294 () Real)
(declare-fun l_0_9_288 () Real)
(declare-fun l_0_9_293 () Real)
(declare-fun l_0_9_287 () Real)
(declare-fun l_0_9_292 () Real)
(declare-fun l_0_9_286 () Real)
(declare-fun l_0_9_207 () Real)
(declare-fun l_0_9_201 () Real)
(declare-fun l_0_9_206 () Real)
(declare-fun l_0_9_200 () Real)
(declare-fun l_0_9_205 () Real)
(declare-fun l_0_9_199 () Real)
(declare-fun l_0_9_204 () Real)
(declare-fun l_0_9_198 () Real)
(declare-fun l_0_9_203 () Real)
(declare-fun l_0_9_197 () Real)
(declare-fun l_0_9_202 () Real)
(declare-fun l_0_9_196 () Real)
(declare-fun l_0_9_1 () Real)
(declare-fun l_0_9_284 () Real)
(declare-fun l_0_9_280 () Real)
(declare-fun l_0_9_283 () Real)
(declare-fun l_0_9_279 () Real)
(declare-fun l_0_9_282 () Real)
(declare-fun l_0_9_278 () Real)
(declare-fun l_0_9_281 () Real)
(declare-fun l_0_9_277 () Real)
(declare-fun l_0_9_194 () Real)
(declare-fun l_0_9_190 () Real)
(declare-fun l_0_9_193 () Real)
(declare-fun l_0_9_189 () Real)
(declare-fun l_0_9_192 () Real)
(declare-fun l_0_9_188 () Real)
(declare-fun l_0_9_191 () Real)
(declare-fun l_0_9_187 () Real)
(declare-fun l_0_9_274 () Real)
(declare-fun l_0_9_271 () Real)
(declare-fun l_0_9_226 () Real)
(declare-fun l_0_9_184 () Real)
(declare-fun l_0_9_181 () Real)
(declare-fun l_0_9_47 () Real)
(declare-fun l_0_9_2 () Real)
(declare-fun l_0_9_72 () Real)
(declare-fun l_0_9_66 () Real)
(declare-fun l_0_9_71 () Real)
(declare-fun l_0_9_65 () Real)
(declare-fun l_0_9_70 () Real)
(declare-fun l_0_9_64 () Real)
(declare-fun l_0_9_69 () Real)
(declare-fun l_0_9_63 () Real)
(declare-fun l_0_9_68 () Real)
(declare-fun l_0_9_62 () Real)
(declare-fun l_0_9_67 () Real)
(declare-fun l_0_9_61 () Real)
(declare-fun l_0_9_49 () Real)
(declare-fun l_0_9_252 () Real)
(declare-fun l_0_9_246 () Real)
(declare-fun l_0_9_251 () Real)
(declare-fun l_0_9_245 () Real)
(declare-fun l_0_9_250 () Real)
(declare-fun l_0_9_244 () Real)
(declare-fun l_0_9_249 () Real)
(declare-fun l_0_9_243 () Real)
(declare-fun l_0_9_248 () Real)
(declare-fun l_0_9_242 () Real)
(declare-fun l_0_9_247 () Real)
(declare-fun l_0_9_241 () Real)
(declare-fun l_0_9_27 () Real)
(declare-fun l_0_9_21 () Real)
(declare-fun l_0_9_26 () Real)
(declare-fun l_0_9_20 () Real)
(declare-fun l_0_9_25 () Real)
(declare-fun l_0_9_19 () Real)
(declare-fun l_0_9_24 () Real)
(declare-fun l_0_9_18 () Real)
(declare-fun l_0_9_23 () Real)
(declare-fun l_0_9_17 () Real)
(declare-fun l_0_9_22 () Real)
(declare-fun l_0_9_16 () Real)
(declare-fun l_0_9_4 () Real)
(declare-fun l_0_9_52 () Real)
(declare-fun l_0_9_7 () Real)
(declare-fun l_0_9_56 () Real)
(declare-fun l_0_9_11 () Real)
(declare-fun l_0_9_74 () Real)
(declare-fun l_0_9_162 () Real)
(declare-fun l_0_9_156 () Real)
(declare-fun l_0_9_161 () Real)
(declare-fun l_0_9_155 () Real)
(declare-fun l_0_9_160 () Real)
(declare-fun l_0_9_154 () Real)
(declare-fun l_0_9_159 () Real)
(declare-fun l_0_9_153 () Real)
(declare-fun l_0_9_158 () Real)
(declare-fun l_0_9_152 () Real)
(declare-fun l_0_9_157 () Real)
(declare-fun l_0_9_151 () Real)
(declare-fun l_0_9_117 () Real)
(declare-fun l_0_9_111 () Real)
(declare-fun l_0_9_116 () Real)
(declare-fun l_0_9_110 () Real)
(declare-fun l_0_9_115 () Real)
(declare-fun l_0_9_109 () Real)
(declare-fun l_0_9_114 () Real)
(declare-fun l_0_9_108 () Real)
(declare-fun l_0_9_113 () Real)
(declare-fun l_0_9_107 () Real)
(declare-fun l_0_9_112 () Real)
(declare-fun l_0_9_106 () Real)
(declare-fun l_0_9_29 () Real)
(declare-fun l_0_9_82 () Real)
(declare-fun l_0_9_136 () Real)
(declare-fun l_0_9_91 () Real)
(declare-fun l_0_9_37 () Real)
(declare-fun l_0_9_48 () Real)
(declare-fun l_0_9_3 () Real)
(declare-fun l_0_9_50 () Real)
(declare-fun l_0_9_5 () Real)
(declare-fun l_0_9_53 () Real)
(declare-fun l_0_9_8 () Real)
(declare-fun l_0_9_57 () Real)
(declare-fun l_0_9_12 () Real)
(declare-fun l_0_9_75 () Real)
(declare-fun l_0_9_30 () Real)
(declare-fun l_0_9_83 () Real)
(declare-fun l_0_9_38 () Real)
(declare-fun l_0_9_138 () Real)
(declare-fun l_0_9_137 () Real)
(declare-fun l_0_9_93 () Real)
(declare-fun l_0_9_92 () Real)
(declare-fun l_0_9_6 () Real)
(declare-fun l_0_9_51 () Real)
(declare-fun l_0_9_9 () Real)
(declare-fun l_0_9_54 () Real)
(declare-fun l_0_9_58 () Real)
(declare-fun l_0_9_13 () Real)
(declare-fun l_0_9_76 () Real)
(declare-fun l_0_9_31 () Real)
(declare-fun l_0_9_84 () Real)
(declare-fun l_0_9_39 () Real)
(declare-fun l_0_9_141 () Real)
(declare-fun l_0_9_140 () Real)
(declare-fun l_0_9_139 () Real)
(declare-fun l_0_9_96 () Real)
(declare-fun l_0_9_95 () Real)
(declare-fun l_0_9_94 () Real)
(declare-fun l_0_9_55 () Real)
(declare-fun l_0_9_10 () Real)
(declare-fun l_0_9_59 () Real)
(declare-fun l_0_9_14 () Real)
(declare-fun l_0_9_77 () Real)
(declare-fun l_0_9_32 () Real)
(declare-fun l_0_9_85 () Real)
(declare-fun l_0_9_145 () Real)
(declare-fun l_0_9_144 () Real)
(declare-fun l_0_9_143 () Real)
(declare-fun l_0_9_142 () Real)
(declare-fun l_0_9_99 () Real)
(declare-fun l_0_9_98 () Real)
(declare-fun l_0_9_97 () Real)
(declare-fun l_0_9_100 () Real)
(declare-fun l_0_9_40 () Real)
(declare-fun l_0_9_60 () Real)
(declare-fun l_0_9_15 () Real)
(declare-fun l_0_9_78 () Real)
(declare-fun l_0_9_33 () Real)
(declare-fun l_0_9_86 () Real)
(declare-fun l_0_9_150 () Real)
(declare-fun l_0_9_41 () Real)
(declare-fun l_0_9_149 () Real)
(declare-fun l_0_9_148 () Real)
(declare-fun l_0_9_147 () Real)
(declare-fun l_0_9_146 () Real)
(declare-fun l_0_9_105 () Real)
(declare-fun l_0_9_104 () Real)
(declare-fun l_0_9_103 () Real)
(declare-fun l_0_9_102 () Real)
(declare-fun l_0_9_101 () Real)
(declare-fun l_0_9_79 () Real)
(declare-fun l_0_9_34 () Real)
(declare-fun l_0_9_87 () Real)
(declare-fun l_0_9_42 () Real)
(declare-fun l_0_9_73 () Real)
(declare-fun l_0_9_28 () Real)
(declare-fun l_0_9_80 () Real)
(declare-fun l_0_9_35 () Real)
(declare-fun l_0_9_88 () Real)
(declare-fun l_0_9_43 () Real)
(declare-fun l_0_9_81 () Real)
(declare-fun l_0_9_36 () Real)
(declare-fun l_0_9_89 () Real)
(declare-fun l_0_9_44 () Real)
(declare-fun l_0_9_169 () Real)
(declare-fun l_0_9_168 () Real)
(declare-fun l_0_9_167 () Real)
(declare-fun l_0_9_166 () Real)
(declare-fun l_0_9_165 () Real)
(declare-fun l_0_9_164 () Real)
(declare-fun l_0_9_124 () Real)
(declare-fun l_0_9_123 () Real)
(declare-fun l_0_9_122 () Real)
(declare-fun l_0_9_121 () Real)
(declare-fun l_0_9_120 () Real)
(declare-fun l_0_9_119 () Real)
(declare-fun l_0_9_90 () Real)
(declare-fun l_0_9_45 () Real)
(declare-fun l_0_9_177 () Real)
(declare-fun l_0_9_176 () Real)
(declare-fun l_0_9_175 () Real)
(declare-fun l_0_9_174 () Real)
(declare-fun l_0_9_173 () Real)
(declare-fun l_0_9_172 () Real)
(declare-fun l_0_9_132 () Real)
(declare-fun l_0_9_131 () Real)
(declare-fun l_0_9_130 () Real)
(declare-fun l_0_9_129 () Real)
(declare-fun l_0_9_128 () Real)
(declare-fun l_0_9_127 () Real)
(declare-fun l_0_9_239 () Real)
(declare-fun l_0_9_235 () Real)
(declare-fun l_0_9_238 () Real)
(declare-fun l_0_9_234 () Real)
(declare-fun l_0_9_237 () Real)
(declare-fun l_0_9_233 () Real)
(declare-fun l_0_9_236 () Real)
(declare-fun l_0_9_232 () Real)
(declare-fun l_0_9_275 () Real)
(declare-fun l_0_9_273 () Real)
(declare-fun l_0_9_272 () Real)
(declare-fun l_0_9_227 () Real)
(declare-fun l_0_9_185 () Real)
(declare-fun l_0_9_183 () Real)
(declare-fun l_0_9_182 () Real)
(declare-fun l_0_9_276 () Real)
(declare-fun l_0_9_229 () Real)
(declare-fun l_0_9_186 () Real)
(declare-fun l_0_9_301 () Real)
(declare-fun l_0_9_300 () Real)
(declare-fun l_0_9_299 () Real)
(declare-fun l_0_9_254 () Real)
(declare-fun l_0_9_211 () Real)
(declare-fun l_0_9_210 () Real)
(declare-fun l_0_9_209 () Real)
(declare-fun l_0_9_309 () Real)
(declare-fun l_0_9_308 () Real)
(declare-fun l_0_9_307 () Real)
(declare-fun l_0_9_262 () Real)
(declare-fun l_0_9_219 () Real)
(declare-fun l_0_9_218 () Real)
(declare-fun l_0_9_217 () Real)
(declare-fun l_0_9_228 () Real)
(declare-fun l_0_9_230 () Real)
(declare-fun l_0_9_255 () Real)
(declare-fun l_0_9_263 () Real)
(declare-fun l_0_9_231 () Real)
(declare-fun l_0_9_256 () Real)
(declare-fun l_0_9_264 () Real)
(declare-fun l_0_9_257 () Real)
(declare-fun l_0_9_265 () Real)
(declare-fun l_0_9_240 () Real)
(declare-fun l_0_9_258 () Real)
(declare-fun l_0_9_266 () Real)
(declare-fun l_0_9_259 () Real)
(declare-fun l_0_9_267 () Real)
(declare-fun l_0_9_253 () Real)
(declare-fun l_0_9_260 () Real)
(declare-fun l_0_9_268 () Real)
(declare-fun l_0_9_261 () Real)
(declare-fun l_0_9_269 () Real)
(declare-fun l_0_9_270 () Real)
(declare-fun l_0_9_163 () Real)
(declare-fun l_0_9_118 () Real)
(declare-fun l_0_9_170 () Real)
(declare-fun l_0_9_125 () Real)
(declare-fun l_0_9_178 () Real)
(declare-fun l_0_9_133 () Real)
(declare-fun l_0_9_171 () Real)
(declare-fun l_0_9_126 () Real)
(declare-fun l_0_9_179 () Real)
(declare-fun l_0_9_134 () Real)
(declare-fun l_0_9_180 () Real)
(declare-fun l_0_9_135 () Real)
(declare-fun l_0_9_313 () Real)
(declare-fun l_0_9_298 () Real)
(declare-fun l_0_9_312 () Real)
(declare-fun l_0_9_311 () Real)
(declare-fun l_0_9_310 () Real)
(declare-fun l_0_9_223 () Real)
(declare-fun l_0_9_208 () Real)
(declare-fun l_0_9_222 () Real)
(declare-fun l_0_9_221 () Real)
(declare-fun l_0_9_220 () Real)
(declare-fun l_0_9_302 () Real)
(declare-fun l_0_9_212 () Real)
(declare-fun l_0_9_303 () Real)
(declare-fun l_0_9_285 () Real)
(declare-fun l_0_9_213 () Real)
(declare-fun l_0_9_195 () Real)
(declare-fun l_0_9_304 () Real)
(declare-fun l_0_9_214 () Real)
(declare-fun l_0_9_305 () Real)
(declare-fun l_0_9_215 () Real)
(declare-fun l_0_9_306 () Real)
(declare-fun l_0_9_216 () Real)
(declare-fun l_0_9_314 () Real)
(declare-fun l_0_9_224 () Real)
(declare-fun l_0_9_315 () Real)
(declare-fun l_0_9_225 () Real)
(declare-fun l_0_10_46 () Real)
(declare-fun l_0_10_319 () Real)
(declare-fun l_0_10_316 () Real)
(declare-fun l_0_10_274 () Real)
(declare-fun l_0_10_271 () Real)
(declare-fun l_0_10_226 () Real)
(declare-fun l_0_10_184 () Real)
(declare-fun l_0_10_181 () Real)
(declare-fun l_0_10_1 () Real)
(declare-fun l_0_10_342 () Real)
(declare-fun l_0_10_336 () Real)
(declare-fun l_0_10_341 () Real)
(declare-fun l_0_10_335 () Real)
(declare-fun l_0_10_340 () Real)
(declare-fun l_0_10_334 () Real)
(declare-fun l_0_10_339 () Real)
(declare-fun l_0_10_333 () Real)
(declare-fun l_0_10_338 () Real)
(declare-fun l_0_10_332 () Real)
(declare-fun l_0_10_337 () Real)
(declare-fun l_0_10_331 () Real)
(declare-fun l_0_10_297 () Real)
(declare-fun l_0_10_291 () Real)
(declare-fun l_0_10_296 () Real)
(declare-fun l_0_10_290 () Real)
(declare-fun l_0_10_295 () Real)
(declare-fun l_0_10_289 () Real)
(declare-fun l_0_10_294 () Real)
(declare-fun l_0_10_288 () Real)
(declare-fun l_0_10_293 () Real)
(declare-fun l_0_10_287 () Real)
(declare-fun l_0_10_292 () Real)
(declare-fun l_0_10_286 () Real)
(declare-fun l_0_10_207 () Real)
(declare-fun l_0_10_201 () Real)
(declare-fun l_0_10_206 () Real)
(declare-fun l_0_10_200 () Real)
(declare-fun l_0_10_205 () Real)
(declare-fun l_0_10_199 () Real)
(declare-fun l_0_10_204 () Real)
(declare-fun l_0_10_198 () Real)
(declare-fun l_0_10_203 () Real)
(declare-fun l_0_10_197 () Real)
(declare-fun l_0_10_202 () Real)
(declare-fun l_0_10_196 () Real)
(declare-fun l_0_10_329 () Real)
(declare-fun l_0_10_325 () Real)
(declare-fun l_0_10_328 () Real)
(declare-fun l_0_10_324 () Real)
(declare-fun l_0_10_327 () Real)
(declare-fun l_0_10_323 () Real)
(declare-fun l_0_10_326 () Real)
(declare-fun l_0_10_322 () Real)
(declare-fun l_0_10_284 () Real)
(declare-fun l_0_10_280 () Real)
(declare-fun l_0_10_283 () Real)
(declare-fun l_0_10_279 () Real)
(declare-fun l_0_10_282 () Real)
(declare-fun l_0_10_278 () Real)
(declare-fun l_0_10_281 () Real)
(declare-fun l_0_10_277 () Real)
(declare-fun l_0_10_194 () Real)
(declare-fun l_0_10_190 () Real)
(declare-fun l_0_10_193 () Real)
(declare-fun l_0_10_189 () Real)
(declare-fun l_0_10_192 () Real)
(declare-fun l_0_10_188 () Real)
(declare-fun l_0_10_191 () Real)
(declare-fun l_0_10_187 () Real)
(declare-fun l_0_10_47 () Real)
(declare-fun l_0_10_2 () Real)
(declare-fun l_0_10_72 () Real)
(declare-fun l_0_10_66 () Real)
(declare-fun l_0_10_71 () Real)
(declare-fun l_0_10_65 () Real)
(declare-fun l_0_10_70 () Real)
(declare-fun l_0_10_64 () Real)
(declare-fun l_0_10_69 () Real)
(declare-fun l_0_10_63 () Real)
(declare-fun l_0_10_68 () Real)
(declare-fun l_0_10_62 () Real)
(declare-fun l_0_10_67 () Real)
(declare-fun l_0_10_61 () Real)
(declare-fun l_0_10_49 () Real)
(declare-fun l_0_10_252 () Real)
(declare-fun l_0_10_246 () Real)
(declare-fun l_0_10_251 () Real)
(declare-fun l_0_10_245 () Real)
(declare-fun l_0_10_250 () Real)
(declare-fun l_0_10_244 () Real)
(declare-fun l_0_10_249 () Real)
(declare-fun l_0_10_243 () Real)
(declare-fun l_0_10_248 () Real)
(declare-fun l_0_10_242 () Real)
(declare-fun l_0_10_247 () Real)
(declare-fun l_0_10_241 () Real)
(declare-fun l_0_10_27 () Real)
(declare-fun l_0_10_21 () Real)
(declare-fun l_0_10_26 () Real)
(declare-fun l_0_10_20 () Real)
(declare-fun l_0_10_25 () Real)
(declare-fun l_0_10_19 () Real)
(declare-fun l_0_10_24 () Real)
(declare-fun l_0_10_18 () Real)
(declare-fun l_0_10_23 () Real)
(declare-fun l_0_10_17 () Real)
(declare-fun l_0_10_22 () Real)
(declare-fun l_0_10_16 () Real)
(declare-fun l_0_10_4 () Real)
(declare-fun l_0_10_52 () Real)
(declare-fun l_0_10_7 () Real)
(declare-fun l_0_10_56 () Real)
(declare-fun l_0_10_11 () Real)
(declare-fun l_0_10_74 () Real)
(declare-fun l_0_10_162 () Real)
(declare-fun l_0_10_156 () Real)
(declare-fun l_0_10_161 () Real)
(declare-fun l_0_10_155 () Real)
(declare-fun l_0_10_160 () Real)
(declare-fun l_0_10_154 () Real)
(declare-fun l_0_10_159 () Real)
(declare-fun l_0_10_153 () Real)
(declare-fun l_0_10_158 () Real)
(declare-fun l_0_10_152 () Real)
(declare-fun l_0_10_157 () Real)
(declare-fun l_0_10_151 () Real)
(declare-fun l_0_10_117 () Real)
(declare-fun l_0_10_111 () Real)
(declare-fun l_0_10_116 () Real)
(declare-fun l_0_10_110 () Real)
(declare-fun l_0_10_115 () Real)
(declare-fun l_0_10_109 () Real)
(declare-fun l_0_10_114 () Real)
(declare-fun l_0_10_108 () Real)
(declare-fun l_0_10_113 () Real)
(declare-fun l_0_10_107 () Real)
(declare-fun l_0_10_112 () Real)
(declare-fun l_0_10_106 () Real)
(declare-fun l_0_10_29 () Real)
(declare-fun l_0_10_82 () Real)
(declare-fun l_0_10_136 () Real)
(declare-fun l_0_10_91 () Real)
(declare-fun l_0_10_37 () Real)
(declare-fun l_0_10_48 () Real)
(declare-fun l_0_10_3 () Real)
(declare-fun l_0_10_50 () Real)
(declare-fun l_0_10_5 () Real)
(declare-fun l_0_10_53 () Real)
(declare-fun l_0_10_8 () Real)
(declare-fun l_0_10_57 () Real)
(declare-fun l_0_10_12 () Real)
(declare-fun l_0_10_75 () Real)
(declare-fun l_0_10_30 () Real)
(declare-fun l_0_10_83 () Real)
(declare-fun l_0_10_38 () Real)
(declare-fun l_0_10_138 () Real)
(declare-fun l_0_10_137 () Real)
(declare-fun l_0_10_93 () Real)
(declare-fun l_0_10_92 () Real)
(declare-fun l_0_10_6 () Real)
(declare-fun l_0_10_51 () Real)
(declare-fun l_0_10_9 () Real)
(declare-fun l_0_10_54 () Real)
(declare-fun l_0_10_58 () Real)
(declare-fun l_0_10_13 () Real)
(declare-fun l_0_10_76 () Real)
(declare-fun l_0_10_31 () Real)
(declare-fun l_0_10_84 () Real)
(declare-fun l_0_10_39 () Real)
(declare-fun l_0_10_141 () Real)
(declare-fun l_0_10_140 () Real)
(declare-fun l_0_10_139 () Real)
(declare-fun l_0_10_96 () Real)
(declare-fun l_0_10_95 () Real)
(declare-fun l_0_10_94 () Real)
(declare-fun l_0_10_55 () Real)
(declare-fun l_0_10_10 () Real)
(declare-fun l_0_10_59 () Real)
(declare-fun l_0_10_14 () Real)
(declare-fun l_0_10_77 () Real)
(declare-fun l_0_10_32 () Real)
(declare-fun l_0_10_85 () Real)
(declare-fun l_0_10_145 () Real)
(declare-fun l_0_10_144 () Real)
(declare-fun l_0_10_143 () Real)
(declare-fun l_0_10_142 () Real)
(declare-fun l_0_10_99 () Real)
(declare-fun l_0_10_98 () Real)
(declare-fun l_0_10_97 () Real)
(declare-fun l_0_10_100 () Real)
(declare-fun l_0_10_40 () Real)
(declare-fun l_0_10_60 () Real)
(declare-fun l_0_10_15 () Real)
(declare-fun l_0_10_78 () Real)
(declare-fun l_0_10_33 () Real)
(declare-fun l_0_10_86 () Real)
(declare-fun l_0_10_150 () Real)
(declare-fun l_0_10_41 () Real)
(declare-fun l_0_10_149 () Real)
(declare-fun l_0_10_148 () Real)
(declare-fun l_0_10_147 () Real)
(declare-fun l_0_10_146 () Real)
(declare-fun l_0_10_105 () Real)
(declare-fun l_0_10_104 () Real)
(declare-fun l_0_10_103 () Real)
(declare-fun l_0_10_102 () Real)
(declare-fun l_0_10_101 () Real)
(declare-fun l_0_10_79 () Real)
(declare-fun l_0_10_34 () Real)
(declare-fun l_0_10_87 () Real)
(declare-fun l_0_10_42 () Real)
(declare-fun l_0_10_73 () Real)
(declare-fun l_0_10_28 () Real)
(declare-fun l_0_10_80 () Real)
(declare-fun l_0_10_35 () Real)
(declare-fun l_0_10_88 () Real)
(declare-fun l_0_10_43 () Real)
(declare-fun l_0_10_81 () Real)
(declare-fun l_0_10_36 () Real)
(declare-fun l_0_10_89 () Real)
(declare-fun l_0_10_44 () Real)
(declare-fun l_0_10_169 () Real)
(declare-fun l_0_10_168 () Real)
(declare-fun l_0_10_167 () Real)
(declare-fun l_0_10_166 () Real)
(declare-fun l_0_10_165 () Real)
(declare-fun l_0_10_164 () Real)
(declare-fun l_0_10_124 () Real)
(declare-fun l_0_10_123 () Real)
(declare-fun l_0_10_122 () Real)
(declare-fun l_0_10_121 () Real)
(declare-fun l_0_10_120 () Real)
(declare-fun l_0_10_119 () Real)
(declare-fun l_0_10_90 () Real)
(declare-fun l_0_10_45 () Real)
(declare-fun l_0_10_177 () Real)
(declare-fun l_0_10_176 () Real)
(declare-fun l_0_10_175 () Real)
(declare-fun l_0_10_174 () Real)
(declare-fun l_0_10_173 () Real)
(declare-fun l_0_10_172 () Real)
(declare-fun l_0_10_132 () Real)
(declare-fun l_0_10_131 () Real)
(declare-fun l_0_10_130 () Real)
(declare-fun l_0_10_129 () Real)
(declare-fun l_0_10_128 () Real)
(declare-fun l_0_10_127 () Real)
(declare-fun l_0_10_239 () Real)
(declare-fun l_0_10_235 () Real)
(declare-fun l_0_10_238 () Real)
(declare-fun l_0_10_234 () Real)
(declare-fun l_0_10_237 () Real)
(declare-fun l_0_10_233 () Real)
(declare-fun l_0_10_236 () Real)
(declare-fun l_0_10_232 () Real)
(declare-fun l_0_10_320 () Real)
(declare-fun l_0_10_318 () Real)
(declare-fun l_0_10_317 () Real)
(declare-fun l_0_10_275 () Real)
(declare-fun l_0_10_273 () Real)
(declare-fun l_0_10_272 () Real)
(declare-fun l_0_10_227 () Real)
(declare-fun l_0_10_185 () Real)
(declare-fun l_0_10_183 () Real)
(declare-fun l_0_10_182 () Real)
(declare-fun l_0_10_321 () Real)
(declare-fun l_0_10_276 () Real)
(declare-fun l_0_10_229 () Real)
(declare-fun l_0_10_186 () Real)
(declare-fun l_0_10_346 () Real)
(declare-fun l_0_10_345 () Real)
(declare-fun l_0_10_344 () Real)
(declare-fun l_0_10_301 () Real)
(declare-fun l_0_10_300 () Real)
(declare-fun l_0_10_299 () Real)
(declare-fun l_0_10_254 () Real)
(declare-fun l_0_10_211 () Real)
(declare-fun l_0_10_210 () Real)
(declare-fun l_0_10_209 () Real)
(declare-fun l_0_10_354 () Real)
(declare-fun l_0_10_353 () Real)
(declare-fun l_0_10_352 () Real)
(declare-fun l_0_10_309 () Real)
(declare-fun l_0_10_308 () Real)
(declare-fun l_0_10_307 () Real)
(declare-fun l_0_10_262 () Real)
(declare-fun l_0_10_219 () Real)
(declare-fun l_0_10_218 () Real)
(declare-fun l_0_10_217 () Real)
(declare-fun l_0_10_228 () Real)
(declare-fun l_0_10_230 () Real)
(declare-fun l_0_10_255 () Real)
(declare-fun l_0_10_263 () Real)
(declare-fun l_0_10_231 () Real)
(declare-fun l_0_10_256 () Real)
(declare-fun l_0_10_264 () Real)
(declare-fun l_0_10_257 () Real)
(declare-fun l_0_10_265 () Real)
(declare-fun l_0_10_240 () Real)
(declare-fun l_0_10_258 () Real)
(declare-fun l_0_10_266 () Real)
(declare-fun l_0_10_259 () Real)
(declare-fun l_0_10_267 () Real)
(declare-fun l_0_10_253 () Real)
(declare-fun l_0_10_260 () Real)
(declare-fun l_0_10_268 () Real)
(declare-fun l_0_10_261 () Real)
(declare-fun l_0_10_269 () Real)
(declare-fun l_0_10_270 () Real)
(declare-fun l_0_10_163 () Real)
(declare-fun l_0_10_118 () Real)
(declare-fun l_0_10_170 () Real)
(declare-fun l_0_10_125 () Real)
(declare-fun l_0_10_178 () Real)
(declare-fun l_0_10_133 () Real)
(declare-fun l_0_10_171 () Real)
(declare-fun l_0_10_126 () Real)
(declare-fun l_0_10_179 () Real)
(declare-fun l_0_10_134 () Real)
(declare-fun l_0_10_180 () Real)
(declare-fun l_0_10_135 () Real)
(declare-fun l_0_10_358 () Real)
(declare-fun l_0_10_343 () Real)
(declare-fun l_0_10_357 () Real)
(declare-fun l_0_10_356 () Real)
(declare-fun l_0_10_355 () Real)
(declare-fun l_0_10_313 () Real)
(declare-fun l_0_10_298 () Real)
(declare-fun l_0_10_312 () Real)
(declare-fun l_0_10_311 () Real)
(declare-fun l_0_10_310 () Real)
(declare-fun l_0_10_223 () Real)
(declare-fun l_0_10_208 () Real)
(declare-fun l_0_10_222 () Real)
(declare-fun l_0_10_221 () Real)
(declare-fun l_0_10_220 () Real)
(declare-fun l_0_10_347 () Real)
(declare-fun l_0_10_302 () Real)
(declare-fun l_0_10_212 () Real)
(declare-fun l_0_10_348 () Real)
(declare-fun l_0_10_330 () Real)
(declare-fun l_0_10_303 () Real)
(declare-fun l_0_10_285 () Real)
(declare-fun l_0_10_213 () Real)
(declare-fun l_0_10_195 () Real)
(declare-fun l_0_10_349 () Real)
(declare-fun l_0_10_304 () Real)
(declare-fun l_0_10_214 () Real)
(declare-fun l_0_10_350 () Real)
(declare-fun l_0_10_305 () Real)
(declare-fun l_0_10_215 () Real)
(declare-fun l_0_10_351 () Real)
(declare-fun l_0_10_306 () Real)
(declare-fun l_0_10_216 () Real)
(declare-fun l_0_10_359 () Real)
(declare-fun l_0_10_314 () Real)
(declare-fun l_0_10_224 () Real)
(declare-fun l_0_10_360 () Real)
(declare-fun l_0_10_315 () Real)
(declare-fun l_0_10_225 () Real)
(declare-fun l_0_11_91 () Real)
(declare-fun l_0_11_368 () Real)
(declare-fun l_0_11_363 () Real)
(declare-fun l_0_11_367 () Real)
(declare-fun l_0_11_362 () Real)
(declare-fun l_0_11_323 () Real)
(declare-fun l_0_11_318 () Real)
(declare-fun l_0_11_322 () Real)
(declare-fun l_0_11_317 () Real)
(declare-fun l_0_11_278 () Real)
(declare-fun l_0_11_273 () Real)
(declare-fun l_0_11_277 () Real)
(declare-fun l_0_11_272 () Real)
(declare-fun l_0_11_188 () Real)
(declare-fun l_0_11_183 () Real)
(declare-fun l_0_11_187 () Real)
(declare-fun l_0_11_182 () Real)
(declare-fun l_0_11_136 () Real)
(declare-fun l_0_11_46 () Real)
(declare-fun l_0_11_374 () Real)
(declare-fun l_0_11_370 () Real)
(declare-fun l_0_11_373 () Real)
(declare-fun l_0_11_369 () Real)
(declare-fun l_0_11_372 () Real)
(declare-fun l_0_11_371 () Real)
(declare-fun l_0_11_329 () Real)
(declare-fun l_0_11_325 () Real)
(declare-fun l_0_11_328 () Real)
(declare-fun l_0_11_324 () Real)
(declare-fun l_0_11_327 () Real)
(declare-fun l_0_11_326 () Real)
(declare-fun l_0_11_284 () Real)
(declare-fun l_0_11_280 () Real)
(declare-fun l_0_11_283 () Real)
(declare-fun l_0_11_279 () Real)
(declare-fun l_0_11_282 () Real)
(declare-fun l_0_11_281 () Real)
(declare-fun l_0_11_194 () Real)
(declare-fun l_0_11_190 () Real)
(declare-fun l_0_11_193 () Real)
(declare-fun l_0_11_189 () Real)
(declare-fun l_0_11_192 () Real)
(declare-fun l_0_11_191 () Real)
(declare-fun l_0_11_1 () Real)
(declare-fun l_0_11_382 () Real)
(declare-fun l_0_11_361 () Real)
(declare-fun l_0_11_337 () Real)
(declare-fun l_0_11_316 () Real)
(declare-fun l_0_11_292 () Real)
(declare-fun l_0_11_271 () Real)
(declare-fun l_0_11_202 () Real)
(declare-fun l_0_11_181 () Real)
(declare-fun _a_9_ () Real)
(declare-fun l_0_11_387 () Real)
(declare-fun l_0_11_381 () Real)
(declare-fun l_0_11_386 () Real)
(declare-fun l_0_11_380 () Real)
(declare-fun l_0_11_385 () Real)
(declare-fun l_0_11_379 () Real)
(declare-fun l_0_11_384 () Real)
(declare-fun l_0_11_378 () Real)
(declare-fun l_0_11_383 () Real)
(declare-fun l_0_11_377 () Real)
(declare-fun l_0_11_376 () Real)
(declare-fun l_0_11_342 () Real)
(declare-fun l_0_11_336 () Real)
(declare-fun l_0_11_341 () Real)
(declare-fun l_0_11_335 () Real)
(declare-fun l_0_11_340 () Real)
(declare-fun l_0_11_334 () Real)
(declare-fun l_0_11_339 () Real)
(declare-fun l_0_11_333 () Real)
(declare-fun l_0_11_338 () Real)
(declare-fun l_0_11_332 () Real)
(declare-fun l_0_11_331 () Real)
(declare-fun l_0_11_297 () Real)
(declare-fun l_0_11_291 () Real)
(declare-fun l_0_11_296 () Real)
(declare-fun l_0_11_290 () Real)
(declare-fun l_0_11_295 () Real)
(declare-fun l_0_11_289 () Real)
(declare-fun l_0_11_294 () Real)
(declare-fun l_0_11_288 () Real)
(declare-fun l_0_11_293 () Real)
(declare-fun l_0_11_287 () Real)
(declare-fun l_0_11_286 () Real)
(declare-fun l_0_11_207 () Real)
(declare-fun l_0_11_201 () Real)
(declare-fun l_0_11_206 () Real)
(declare-fun l_0_11_200 () Real)
(declare-fun l_0_11_205 () Real)
(declare-fun l_0_11_199 () Real)
(declare-fun l_0_11_204 () Real)
(declare-fun l_0_11_198 () Real)
(declare-fun l_0_11_203 () Real)
(declare-fun l_0_11_197 () Real)
(declare-fun l_0_11_196 () Real)
(declare-fun _a_10_ () Real)
(declare-fun l_0_11_403 () Real)
(declare-fun l_0_11_388 () Real)
(declare-fun l_0_11_402 () Real)
(declare-fun l_0_11_401 () Real)
(declare-fun l_0_11_400 () Real)
(declare-fun l_0_11_399 () Real)
(declare-fun l_0_11_398 () Real)
(declare-fun l_0_11_397 () Real)
(declare-fun l_0_11_358 () Real)
(declare-fun l_0_11_343 () Real)
(declare-fun l_0_11_357 () Real)
(declare-fun l_0_11_356 () Real)
(declare-fun l_0_11_355 () Real)
(declare-fun l_0_11_354 () Real)
(declare-fun l_0_11_353 () Real)
(declare-fun l_0_11_352 () Real)
(declare-fun l_0_11_313 () Real)
(declare-fun l_0_11_298 () Real)
(declare-fun l_0_11_312 () Real)
(declare-fun l_0_11_311 () Real)
(declare-fun l_0_11_310 () Real)
(declare-fun l_0_11_309 () Real)
(declare-fun l_0_11_308 () Real)
(declare-fun l_0_11_307 () Real)
(declare-fun l_0_11_223 () Real)
(declare-fun l_0_11_208 () Real)
(declare-fun l_0_11_222 () Real)
(declare-fun l_0_11_221 () Real)
(declare-fun l_0_11_220 () Real)
(declare-fun l_0_11_219 () Real)
(declare-fun l_0_11_218 () Real)
(declare-fun l_0_11_217 () Real)
(declare-fun _a_11_ () Real)
(declare-fun _a_6_ () Real)
(declare-fun l_0_11_389 () Real)
(declare-fun l_0_11_344 () Real)
(declare-fun l_0_11_299 () Real)
(declare-fun l_0_11_226 () Real)
(declare-fun l_0_11_209 () Real)
(declare-fun _a_7_ () Real)
(declare-fun l_0_11_364 () Real)
(declare-fun l_0_11_319 () Real)
(declare-fun l_0_11_274 () Real)
(declare-fun l_0_11_184 () Real)
(declare-fun _a_8_ () Real)
(declare-fun l_0_11_47 () Real)
(declare-fun l_0_11_2 () Real)
(declare-fun l_0_11_72 () Real)
(declare-fun l_0_11_66 () Real)
(declare-fun l_0_11_71 () Real)
(declare-fun l_0_11_65 () Real)
(declare-fun l_0_11_70 () Real)
(declare-fun l_0_11_64 () Real)
(declare-fun l_0_11_69 () Real)
(declare-fun l_0_11_63 () Real)
(declare-fun l_0_11_68 () Real)
(declare-fun l_0_11_62 () Real)
(declare-fun l_0_11_67 () Real)
(declare-fun l_0_11_61 () Real)
(declare-fun l_0_11_49 () Real)
(declare-fun l_0_11_252 () Real)
(declare-fun l_0_11_246 () Real)
(declare-fun l_0_11_251 () Real)
(declare-fun l_0_11_245 () Real)
(declare-fun l_0_11_250 () Real)
(declare-fun l_0_11_244 () Real)
(declare-fun l_0_11_249 () Real)
(declare-fun l_0_11_243 () Real)
(declare-fun l_0_11_248 () Real)
(declare-fun l_0_11_242 () Real)
(declare-fun l_0_11_247 () Real)
(declare-fun l_0_11_241 () Real)
(declare-fun l_0_11_27 () Real)
(declare-fun l_0_11_21 () Real)
(declare-fun l_0_11_26 () Real)
(declare-fun l_0_11_20 () Real)
(declare-fun l_0_11_25 () Real)
(declare-fun l_0_11_19 () Real)
(declare-fun l_0_11_24 () Real)
(declare-fun l_0_11_18 () Real)
(declare-fun l_0_11_23 () Real)
(declare-fun l_0_11_17 () Real)
(declare-fun l_0_11_22 () Real)
(declare-fun l_0_11_16 () Real)
(declare-fun l_0_11_4 () Real)
(declare-fun l_0_11_52 () Real)
(declare-fun l_0_11_7 () Real)
(declare-fun l_0_11_56 () Real)
(declare-fun l_0_11_11 () Real)
(declare-fun l_0_11_74 () Real)
(declare-fun l_0_11_162 () Real)
(declare-fun l_0_11_156 () Real)
(declare-fun l_0_11_161 () Real)
(declare-fun l_0_11_155 () Real)
(declare-fun l_0_11_160 () Real)
(declare-fun l_0_11_154 () Real)
(declare-fun l_0_11_159 () Real)
(declare-fun l_0_11_153 () Real)
(declare-fun l_0_11_158 () Real)
(declare-fun l_0_11_152 () Real)
(declare-fun l_0_11_157 () Real)
(declare-fun l_0_11_151 () Real)
(declare-fun l_0_11_117 () Real)
(declare-fun l_0_11_111 () Real)
(declare-fun l_0_11_116 () Real)
(declare-fun l_0_11_110 () Real)
(declare-fun l_0_11_115 () Real)
(declare-fun l_0_11_109 () Real)
(declare-fun l_0_11_114 () Real)
(declare-fun l_0_11_108 () Real)
(declare-fun l_0_11_113 () Real)
(declare-fun l_0_11_107 () Real)
(declare-fun l_0_11_112 () Real)
(declare-fun l_0_11_106 () Real)
(declare-fun l_0_11_29 () Real)
(declare-fun l_0_11_82 () Real)
(declare-fun l_0_11_37 () Real)
(declare-fun l_0_11_48 () Real)
(declare-fun l_0_11_3 () Real)
(declare-fun l_0_11_50 () Real)
(declare-fun l_0_11_5 () Real)
(declare-fun l_0_11_53 () Real)
(declare-fun l_0_11_8 () Real)
(declare-fun l_0_11_57 () Real)
(declare-fun l_0_11_12 () Real)
(declare-fun l_0_11_75 () Real)
(declare-fun l_0_11_30 () Real)
(declare-fun l_0_11_83 () Real)
(declare-fun l_0_11_38 () Real)
(declare-fun l_0_11_138 () Real)
(declare-fun l_0_11_137 () Real)
(declare-fun l_0_11_93 () Real)
(declare-fun l_0_11_92 () Real)
(declare-fun l_0_11_6 () Real)
(declare-fun l_0_11_51 () Real)
(declare-fun l_0_11_9 () Real)
(declare-fun l_0_11_54 () Real)
(declare-fun l_0_11_58 () Real)
(declare-fun l_0_11_13 () Real)
(declare-fun l_0_11_76 () Real)
(declare-fun l_0_11_31 () Real)
(declare-fun l_0_11_84 () Real)
(declare-fun l_0_11_39 () Real)
(declare-fun l_0_11_141 () Real)
(declare-fun l_0_11_140 () Real)
(declare-fun l_0_11_139 () Real)
(declare-fun l_0_11_96 () Real)
(declare-fun l_0_11_95 () Real)
(declare-fun l_0_11_94 () Real)
(declare-fun l_0_11_55 () Real)
(declare-fun l_0_11_10 () Real)
(declare-fun l_0_11_59 () Real)
(declare-fun l_0_11_14 () Real)
(declare-fun l_0_11_77 () Real)
(declare-fun l_0_11_32 () Real)
(declare-fun l_0_11_85 () Real)
(declare-fun l_0_11_145 () Real)
(declare-fun l_0_11_144 () Real)
(declare-fun l_0_11_143 () Real)
(declare-fun l_0_11_142 () Real)
(declare-fun l_0_11_99 () Real)
(declare-fun l_0_11_98 () Real)
(declare-fun l_0_11_97 () Real)
(declare-fun l_0_11_100 () Real)
(declare-fun l_0_11_40 () Real)
(declare-fun l_0_11_60 () Real)
(declare-fun l_0_11_15 () Real)
(declare-fun l_0_11_78 () Real)
(declare-fun l_0_11_33 () Real)
(declare-fun l_0_11_86 () Real)
(declare-fun l_0_11_150 () Real)
(declare-fun l_0_11_41 () Real)
(declare-fun l_0_11_149 () Real)
(declare-fun l_0_11_148 () Real)
(declare-fun l_0_11_147 () Real)
(declare-fun l_0_11_146 () Real)
(declare-fun l_0_11_105 () Real)
(declare-fun l_0_11_104 () Real)
(declare-fun l_0_11_103 () Real)
(declare-fun l_0_11_102 () Real)
(declare-fun l_0_11_101 () Real)
(declare-fun l_0_11_79 () Real)
(declare-fun l_0_11_34 () Real)
(declare-fun l_0_11_87 () Real)
(declare-fun l_0_11_42 () Real)
(declare-fun l_0_11_73 () Real)
(declare-fun l_0_11_28 () Real)
(declare-fun l_0_11_80 () Real)
(declare-fun l_0_11_35 () Real)
(declare-fun l_0_11_88 () Real)
(declare-fun l_0_11_43 () Real)
(declare-fun l_0_11_81 () Real)
(declare-fun l_0_11_36 () Real)
(declare-fun l_0_11_89 () Real)
(declare-fun l_0_11_44 () Real)
(declare-fun l_0_11_169 () Real)
(declare-fun l_0_11_168 () Real)
(declare-fun l_0_11_167 () Real)
(declare-fun l_0_11_166 () Real)
(declare-fun l_0_11_165 () Real)
(declare-fun l_0_11_164 () Real)
(declare-fun l_0_11_124 () Real)
(declare-fun l_0_11_123 () Real)
(declare-fun l_0_11_122 () Real)
(declare-fun l_0_11_121 () Real)
(declare-fun l_0_11_120 () Real)
(declare-fun l_0_11_119 () Real)
(declare-fun l_0_11_90 () Real)
(declare-fun l_0_11_45 () Real)
(declare-fun l_0_11_177 () Real)
(declare-fun l_0_11_176 () Real)
(declare-fun l_0_11_175 () Real)
(declare-fun l_0_11_174 () Real)
(declare-fun l_0_11_173 () Real)
(declare-fun l_0_11_172 () Real)
(declare-fun l_0_11_132 () Real)
(declare-fun l_0_11_131 () Real)
(declare-fun l_0_11_130 () Real)
(declare-fun l_0_11_129 () Real)
(declare-fun l_0_11_128 () Real)
(declare-fun l_0_11_127 () Real)
(declare-fun l_0_11_239 () Real)
(declare-fun l_0_11_235 () Real)
(declare-fun l_0_11_238 () Real)
(declare-fun l_0_11_234 () Real)
(declare-fun l_0_11_237 () Real)
(declare-fun l_0_11_233 () Real)
(declare-fun l_0_11_236 () Real)
(declare-fun l_0_11_232 () Real)
(declare-fun l_0_11_365 () Real)
(declare-fun l_0_11_320 () Real)
(declare-fun l_0_11_275 () Real)
(declare-fun l_0_11_227 () Real)
(declare-fun l_0_11_185 () Real)
(declare-fun l_0_11_366 () Real)
(declare-fun l_0_11_321 () Real)
(declare-fun l_0_11_276 () Real)
(declare-fun l_0_11_229 () Real)
(declare-fun l_0_11_186 () Real)
(declare-fun l_0_11_391 () Real)
(declare-fun l_0_11_390 () Real)
(declare-fun l_0_11_346 () Real)
(declare-fun l_0_11_345 () Real)
(declare-fun l_0_11_301 () Real)
(declare-fun l_0_11_300 () Real)
(declare-fun l_0_11_254 () Real)
(declare-fun l_0_11_211 () Real)
(declare-fun l_0_11_210 () Real)
(declare-fun l_0_11_262 () Real)
(declare-fun l_0_11_228 () Real)
(declare-fun l_0_11_230 () Real)
(declare-fun l_0_11_255 () Real)
(declare-fun l_0_11_263 () Real)
(declare-fun l_0_11_231 () Real)
(declare-fun l_0_11_256 () Real)
(declare-fun l_0_11_264 () Real)
(declare-fun l_0_11_257 () Real)
(declare-fun l_0_11_265 () Real)
(declare-fun l_0_11_240 () Real)
(declare-fun l_0_11_258 () Real)
(declare-fun l_0_11_266 () Real)
(declare-fun l_0_11_259 () Real)
(declare-fun l_0_11_267 () Real)
(declare-fun l_0_11_253 () Real)
(declare-fun l_0_11_260 () Real)
(declare-fun l_0_11_268 () Real)
(declare-fun l_0_11_261 () Real)
(declare-fun l_0_11_269 () Real)
(declare-fun l_0_11_270 () Real)
(declare-fun l_0_11_163 () Real)
(declare-fun l_0_11_118 () Real)
(declare-fun l_0_11_170 () Real)
(declare-fun l_0_11_125 () Real)
(declare-fun l_0_11_178 () Real)
(declare-fun l_0_11_133 () Real)
(declare-fun l_0_11_171 () Real)
(declare-fun l_0_11_126 () Real)
(declare-fun l_0_11_179 () Real)
(declare-fun l_0_11_134 () Real)
(declare-fun l_0_11_180 () Real)
(declare-fun l_0_11_135 () Real)
(declare-fun l_0_11_392 () Real)
(declare-fun l_0_11_347 () Real)
(declare-fun l_0_11_302 () Real)
(declare-fun l_0_11_212 () Real)
(declare-fun l_0_11_393 () Real)
(declare-fun l_0_11_375 () Real)
(declare-fun l_0_11_348 () Real)
(declare-fun l_0_11_330 () Real)
(declare-fun l_0_11_303 () Real)
(declare-fun l_0_11_285 () Real)
(declare-fun l_0_11_213 () Real)
(declare-fun l_0_11_195 () Real)
(declare-fun l_0_11_394 () Real)
(declare-fun l_0_11_349 () Real)
(declare-fun l_0_11_304 () Real)
(declare-fun l_0_11_214 () Real)
(declare-fun l_0_11_395 () Real)
(declare-fun l_0_11_350 () Real)
(declare-fun l_0_11_305 () Real)
(declare-fun l_0_11_215 () Real)
(declare-fun l_0_11_396 () Real)
(declare-fun l_0_11_351 () Real)
(declare-fun l_0_11_306 () Real)
(declare-fun l_0_11_216 () Real)
(declare-fun l_0_11_404 () Real)
(declare-fun l_0_11_359 () Real)
(declare-fun l_0_11_314 () Real)
(declare-fun l_0_11_224 () Real)
(declare-fun l_0_11_405 () Real)
(declare-fun l_0_11_360 () Real)
(declare-fun l_0_11_315 () Real)
(declare-fun l_0_11_225 () Real)
(declare-fun l_0_12_406 () Real)
(declare-fun l_0_12_361 () Real)
(declare-fun l_0_12_316 () Real)
(declare-fun l_0_12_271 () Real)
(declare-fun l_0_12_181 () Real)
(declare-fun l_0_12_91 () Real)
(declare-fun l_0_12_434 () Real)
(declare-fun l_0_12_389 () Real)
(declare-fun l_0_12_344 () Real)
(declare-fun l_0_12_299 () Real)
(declare-fun l_0_12_226 () Real)
(declare-fun l_0_12_209 () Real)
(declare-fun l_0_12_136 () Real)
(declare-fun l_0_12_46 () Real)
(declare-fun l_0_12_409 () Real)
(declare-fun l_0_12_364 () Real)
(declare-fun l_0_12_319 () Real)
(declare-fun l_0_12_274 () Real)
(declare-fun l_0_12_184 () Real)
(declare-fun l_0_12_1 () Real)
(declare-fun l_0_12_413 () Real)
(declare-fun l_0_12_408 () Real)
(declare-fun l_0_12_412 () Real)
(declare-fun l_0_12_407 () Real)
(declare-fun l_0_12_368 () Real)
(declare-fun l_0_12_363 () Real)
(declare-fun l_0_12_367 () Real)
(declare-fun l_0_12_362 () Real)
(declare-fun l_0_12_323 () Real)
(declare-fun l_0_12_318 () Real)
(declare-fun l_0_12_322 () Real)
(declare-fun l_0_12_317 () Real)
(declare-fun l_0_12_278 () Real)
(declare-fun l_0_12_273 () Real)
(declare-fun l_0_12_277 () Real)
(declare-fun l_0_12_272 () Real)
(declare-fun l_0_12_188 () Real)
(declare-fun l_0_12_183 () Real)
(declare-fun l_0_12_187 () Real)
(declare-fun l_0_12_182 () Real)
(declare-fun l_0_12_419 () Real)
(declare-fun l_0_12_415 () Real)
(declare-fun l_0_12_418 () Real)
(declare-fun l_0_12_414 () Real)
(declare-fun l_0_12_417 () Real)
(declare-fun l_0_12_416 () Real)
(declare-fun l_0_12_374 () Real)
(declare-fun l_0_12_370 () Real)
(declare-fun l_0_12_373 () Real)
(declare-fun l_0_12_369 () Real)
(declare-fun l_0_12_372 () Real)
(declare-fun l_0_12_371 () Real)
(declare-fun l_0_12_329 () Real)
(declare-fun l_0_12_325 () Real)
(declare-fun l_0_12_328 () Real)
(declare-fun l_0_12_324 () Real)
(declare-fun l_0_12_327 () Real)
(declare-fun l_0_12_326 () Real)
(declare-fun l_0_12_284 () Real)
(declare-fun l_0_12_280 () Real)
(declare-fun l_0_12_283 () Real)
(declare-fun l_0_12_279 () Real)
(declare-fun l_0_12_282 () Real)
(declare-fun l_0_12_281 () Real)
(declare-fun l_0_12_194 () Real)
(declare-fun l_0_12_190 () Real)
(declare-fun l_0_12_193 () Real)
(declare-fun l_0_12_189 () Real)
(declare-fun l_0_12_192 () Real)
(declare-fun l_0_12_191 () Real)
(declare-fun l_0_12_427 () Real)
(declare-fun l_0_12_382 () Real)
(declare-fun l_0_12_337 () Real)
(declare-fun l_0_12_292 () Real)
(declare-fun l_0_12_202 () Real)
(declare-fun l_0_12_432 () Real)
(declare-fun l_0_12_426 () Real)
(declare-fun l_0_12_431 () Real)
(declare-fun l_0_12_425 () Real)
(declare-fun l_0_12_430 () Real)
(declare-fun l_0_12_424 () Real)
(declare-fun l_0_12_429 () Real)
(declare-fun l_0_12_423 () Real)
(declare-fun l_0_12_428 () Real)
(declare-fun l_0_12_422 () Real)
(declare-fun l_0_12_421 () Real)
(declare-fun l_0_12_387 () Real)
(declare-fun l_0_12_381 () Real)
(declare-fun l_0_12_386 () Real)
(declare-fun l_0_12_380 () Real)
(declare-fun l_0_12_385 () Real)
(declare-fun l_0_12_379 () Real)
(declare-fun l_0_12_384 () Real)
(declare-fun l_0_12_378 () Real)
(declare-fun l_0_12_383 () Real)
(declare-fun l_0_12_377 () Real)
(declare-fun l_0_12_376 () Real)
(declare-fun l_0_12_342 () Real)
(declare-fun l_0_12_336 () Real)
(declare-fun l_0_12_341 () Real)
(declare-fun l_0_12_335 () Real)
(declare-fun l_0_12_340 () Real)
(declare-fun l_0_12_334 () Real)
(declare-fun l_0_12_339 () Real)
(declare-fun l_0_12_333 () Real)
(declare-fun l_0_12_338 () Real)
(declare-fun l_0_12_332 () Real)
(declare-fun l_0_12_331 () Real)
(declare-fun l_0_12_297 () Real)
(declare-fun l_0_12_291 () Real)
(declare-fun l_0_12_296 () Real)
(declare-fun l_0_12_290 () Real)
(declare-fun l_0_12_295 () Real)
(declare-fun l_0_12_289 () Real)
(declare-fun l_0_12_294 () Real)
(declare-fun l_0_12_288 () Real)
(declare-fun l_0_12_293 () Real)
(declare-fun l_0_12_287 () Real)
(declare-fun l_0_12_286 () Real)
(declare-fun l_0_12_207 () Real)
(declare-fun l_0_12_201 () Real)
(declare-fun l_0_12_206 () Real)
(declare-fun l_0_12_200 () Real)
(declare-fun l_0_12_205 () Real)
(declare-fun l_0_12_199 () Real)
(declare-fun l_0_12_204 () Real)
(declare-fun l_0_12_198 () Real)
(declare-fun l_0_12_203 () Real)
(declare-fun l_0_12_197 () Real)
(declare-fun l_0_12_196 () Real)
(declare-fun l_0_12_448 () Real)
(declare-fun l_0_12_433 () Real)
(declare-fun l_0_12_447 () Real)
(declare-fun l_0_12_446 () Real)
(declare-fun l_0_12_445 () Real)
(declare-fun l_0_12_444 () Real)
(declare-fun l_0_12_443 () Real)
(declare-fun l_0_12_442 () Real)
(declare-fun l_0_12_403 () Real)
(declare-fun l_0_12_388 () Real)
(declare-fun l_0_12_402 () Real)
(declare-fun l_0_12_401 () Real)
(declare-fun l_0_12_400 () Real)
(declare-fun l_0_12_399 () Real)
(declare-fun l_0_12_398 () Real)
(declare-fun l_0_12_397 () Real)
(declare-fun l_0_12_358 () Real)
(declare-fun l_0_12_343 () Real)
(declare-fun l_0_12_357 () Real)
(declare-fun l_0_12_356 () Real)
(declare-fun l_0_12_355 () Real)
(declare-fun l_0_12_354 () Real)
(declare-fun l_0_12_353 () Real)
(declare-fun l_0_12_352 () Real)
(declare-fun l_0_12_313 () Real)
(declare-fun l_0_12_298 () Real)
(declare-fun l_0_12_312 () Real)
(declare-fun l_0_12_311 () Real)
(declare-fun l_0_12_310 () Real)
(declare-fun l_0_12_309 () Real)
(declare-fun l_0_12_308 () Real)
(declare-fun l_0_12_307 () Real)
(declare-fun l_0_12_223 () Real)
(declare-fun l_0_12_208 () Real)
(declare-fun l_0_12_222 () Real)
(declare-fun l_0_12_221 () Real)
(declare-fun l_0_12_220 () Real)
(declare-fun l_0_12_219 () Real)
(declare-fun l_0_12_218 () Real)
(declare-fun l_0_12_217 () Real)
(declare-fun l_0_12_47 () Real)
(declare-fun l_0_12_2 () Real)
(declare-fun l_0_12_72 () Real)
(declare-fun l_0_12_66 () Real)
(declare-fun l_0_12_71 () Real)
(declare-fun l_0_12_65 () Real)
(declare-fun l_0_12_70 () Real)
(declare-fun l_0_12_64 () Real)
(declare-fun l_0_12_69 () Real)
(declare-fun l_0_12_63 () Real)
(declare-fun l_0_12_68 () Real)
(declare-fun l_0_12_62 () Real)
(declare-fun l_0_12_67 () Real)
(declare-fun l_0_12_61 () Real)
(declare-fun l_0_12_49 () Real)
(declare-fun l_0_12_252 () Real)
(declare-fun l_0_12_246 () Real)
(declare-fun l_0_12_251 () Real)
(declare-fun l_0_12_245 () Real)
(declare-fun l_0_12_250 () Real)
(declare-fun l_0_12_244 () Real)
(declare-fun l_0_12_249 () Real)
(declare-fun l_0_12_243 () Real)
(declare-fun l_0_12_248 () Real)
(declare-fun l_0_12_242 () Real)
(declare-fun l_0_12_247 () Real)
(declare-fun l_0_12_241 () Real)
(declare-fun l_0_12_27 () Real)
(declare-fun l_0_12_21 () Real)
(declare-fun l_0_12_26 () Real)
(declare-fun l_0_12_20 () Real)
(declare-fun l_0_12_25 () Real)
(declare-fun l_0_12_19 () Real)
(declare-fun l_0_12_24 () Real)
(declare-fun l_0_12_18 () Real)
(declare-fun l_0_12_23 () Real)
(declare-fun l_0_12_17 () Real)
(declare-fun l_0_12_22 () Real)
(declare-fun l_0_12_16 () Real)
(declare-fun l_0_12_4 () Real)
(declare-fun l_0_12_52 () Real)
(declare-fun l_0_12_7 () Real)
(declare-fun l_0_12_56 () Real)
(declare-fun l_0_12_11 () Real)
(declare-fun l_0_12_74 () Real)
(declare-fun l_0_12_162 () Real)
(declare-fun l_0_12_156 () Real)
(declare-fun l_0_12_161 () Real)
(declare-fun l_0_12_155 () Real)
(declare-fun l_0_12_160 () Real)
(declare-fun l_0_12_154 () Real)
(declare-fun l_0_12_159 () Real)
(declare-fun l_0_12_153 () Real)
(declare-fun l_0_12_158 () Real)
(declare-fun l_0_12_152 () Real)
(declare-fun l_0_12_157 () Real)
(declare-fun l_0_12_151 () Real)
(declare-fun l_0_12_117 () Real)
(declare-fun l_0_12_111 () Real)
(declare-fun l_0_12_116 () Real)
(declare-fun l_0_12_110 () Real)
(declare-fun l_0_12_115 () Real)
(declare-fun l_0_12_109 () Real)
(declare-fun l_0_12_114 () Real)
(declare-fun l_0_12_108 () Real)
(declare-fun l_0_12_113 () Real)
(declare-fun l_0_12_107 () Real)
(declare-fun l_0_12_112 () Real)
(declare-fun l_0_12_106 () Real)
(declare-fun l_0_12_29 () Real)
(declare-fun l_0_12_82 () Real)
(declare-fun l_0_12_37 () Real)
(declare-fun l_0_12_48 () Real)
(declare-fun l_0_12_3 () Real)
(declare-fun l_0_12_50 () Real)
(declare-fun l_0_12_5 () Real)
(declare-fun l_0_12_53 () Real)
(declare-fun l_0_12_8 () Real)
(declare-fun l_0_12_57 () Real)
(declare-fun l_0_12_12 () Real)
(declare-fun l_0_12_75 () Real)
(declare-fun l_0_12_30 () Real)
(declare-fun l_0_12_83 () Real)
(declare-fun l_0_12_38 () Real)
(declare-fun l_0_12_138 () Real)
(declare-fun l_0_12_137 () Real)
(declare-fun l_0_12_93 () Real)
(declare-fun l_0_12_92 () Real)
(declare-fun l_0_12_6 () Real)
(declare-fun l_0_12_51 () Real)
(declare-fun l_0_12_9 () Real)
(declare-fun l_0_12_54 () Real)
(declare-fun l_0_12_58 () Real)
(declare-fun l_0_12_13 () Real)
(declare-fun l_0_12_76 () Real)
(declare-fun l_0_12_31 () Real)
(declare-fun l_0_12_84 () Real)
(declare-fun l_0_12_39 () Real)
(declare-fun l_0_12_141 () Real)
(declare-fun l_0_12_140 () Real)
(declare-fun l_0_12_139 () Real)
(declare-fun l_0_12_96 () Real)
(declare-fun l_0_12_95 () Real)
(declare-fun l_0_12_94 () Real)
(declare-fun l_0_12_55 () Real)
(declare-fun l_0_12_10 () Real)
(declare-fun l_0_12_59 () Real)
(declare-fun l_0_12_14 () Real)
(declare-fun l_0_12_77 () Real)
(declare-fun l_0_12_32 () Real)
(declare-fun l_0_12_85 () Real)
(declare-fun l_0_12_145 () Real)
(declare-fun l_0_12_144 () Real)
(declare-fun l_0_12_143 () Real)
(declare-fun l_0_12_142 () Real)
(declare-fun l_0_12_99 () Real)
(declare-fun l_0_12_98 () Real)
(declare-fun l_0_12_97 () Real)
(declare-fun l_0_12_100 () Real)
(declare-fun l_0_12_40 () Real)
(declare-fun l_0_12_60 () Real)
(declare-fun l_0_12_15 () Real)
(declare-fun l_0_12_78 () Real)
(declare-fun l_0_12_33 () Real)
(declare-fun l_0_12_86 () Real)
(declare-fun l_0_12_150 () Real)
(declare-fun l_0_12_41 () Real)
(declare-fun l_0_12_149 () Real)
(declare-fun l_0_12_148 () Real)
(declare-fun l_0_12_147 () Real)
(declare-fun l_0_12_146 () Real)
(declare-fun l_0_12_105 () Real)
(declare-fun l_0_12_104 () Real)
(declare-fun l_0_12_103 () Real)
(declare-fun l_0_12_102 () Real)
(declare-fun l_0_12_101 () Real)
(declare-fun l_0_12_79 () Real)
(declare-fun l_0_12_34 () Real)
(declare-fun l_0_12_87 () Real)
(declare-fun l_0_12_42 () Real)
(declare-fun l_0_12_73 () Real)
(declare-fun l_0_12_28 () Real)
(declare-fun l_0_12_80 () Real)
(declare-fun l_0_12_35 () Real)
(declare-fun l_0_12_88 () Real)
(declare-fun l_0_12_43 () Real)
(declare-fun l_0_12_81 () Real)
(declare-fun l_0_12_36 () Real)
(declare-fun l_0_12_89 () Real)
(declare-fun l_0_12_44 () Real)
(declare-fun l_0_12_169 () Real)
(declare-fun l_0_12_168 () Real)
(declare-fun l_0_12_167 () Real)
(declare-fun l_0_12_166 () Real)
(declare-fun l_0_12_165 () Real)
(declare-fun l_0_12_164 () Real)
(declare-fun l_0_12_124 () Real)
(declare-fun l_0_12_123 () Real)
(declare-fun l_0_12_122 () Real)
(declare-fun l_0_12_121 () Real)
(declare-fun l_0_12_120 () Real)
(declare-fun l_0_12_119 () Real)
(declare-fun l_0_12_90 () Real)
(declare-fun l_0_12_45 () Real)
(declare-fun l_0_12_177 () Real)
(declare-fun l_0_12_176 () Real)
(declare-fun l_0_12_175 () Real)
(declare-fun l_0_12_174 () Real)
(declare-fun l_0_12_173 () Real)
(declare-fun l_0_12_172 () Real)
(declare-fun l_0_12_132 () Real)
(declare-fun l_0_12_131 () Real)
(declare-fun l_0_12_130 () Real)
(declare-fun l_0_12_129 () Real)
(declare-fun l_0_12_128 () Real)
(declare-fun l_0_12_127 () Real)
(declare-fun l_0_12_239 () Real)
(declare-fun l_0_12_235 () Real)
(declare-fun l_0_12_238 () Real)
(declare-fun l_0_12_234 () Real)
(declare-fun l_0_12_237 () Real)
(declare-fun l_0_12_233 () Real)
(declare-fun l_0_12_236 () Real)
(declare-fun l_0_12_232 () Real)
(declare-fun l_0_12_410 () Real)
(declare-fun l_0_12_365 () Real)
(declare-fun l_0_12_320 () Real)
(declare-fun l_0_12_275 () Real)
(declare-fun l_0_12_227 () Real)
(declare-fun l_0_12_185 () Real)
(declare-fun l_0_12_411 () Real)
(declare-fun l_0_12_366 () Real)
(declare-fun l_0_12_321 () Real)
(declare-fun l_0_12_276 () Real)
(declare-fun l_0_12_229 () Real)
(declare-fun l_0_12_186 () Real)
(declare-fun l_0_12_436 () Real)
(declare-fun l_0_12_435 () Real)
(declare-fun l_0_12_391 () Real)
(declare-fun l_0_12_390 () Real)
(declare-fun l_0_12_346 () Real)
(declare-fun l_0_12_345 () Real)
(declare-fun l_0_12_301 () Real)
(declare-fun l_0_12_300 () Real)
(declare-fun l_0_12_254 () Real)
(declare-fun l_0_12_211 () Real)
(declare-fun l_0_12_210 () Real)
(declare-fun l_0_12_262 () Real)
(declare-fun l_0_12_228 () Real)
(declare-fun l_0_12_230 () Real)
(declare-fun l_0_12_255 () Real)
(declare-fun l_0_12_263 () Real)
(declare-fun l_0_12_231 () Real)
(declare-fun l_0_12_256 () Real)
(declare-fun l_0_12_264 () Real)
(declare-fun l_0_12_257 () Real)
(declare-fun l_0_12_265 () Real)
(declare-fun l_0_12_240 () Real)
(declare-fun l_0_12_258 () Real)
(declare-fun l_0_12_266 () Real)
(declare-fun l_0_12_259 () Real)
(declare-fun l_0_12_267 () Real)
(declare-fun l_0_12_253 () Real)
(declare-fun l_0_12_260 () Real)
(declare-fun l_0_12_268 () Real)
(declare-fun l_0_12_261 () Real)
(declare-fun l_0_12_269 () Real)
(declare-fun l_0_12_270 () Real)
(declare-fun l_0_12_163 () Real)
(declare-fun l_0_12_118 () Real)
(declare-fun l_0_12_170 () Real)
(declare-fun l_0_12_125 () Real)
(declare-fun l_0_12_178 () Real)
(declare-fun l_0_12_133 () Real)
(declare-fun l_0_12_171 () Real)
(declare-fun l_0_12_126 () Real)
(declare-fun l_0_12_179 () Real)
(declare-fun l_0_12_134 () Real)
(declare-fun l_0_12_180 () Real)
(declare-fun l_0_12_135 () Real)
(declare-fun l_0_12_437 () Real)
(declare-fun l_0_12_392 () Real)
(declare-fun l_0_12_347 () Real)
(declare-fun l_0_12_302 () Real)
(declare-fun l_0_12_212 () Real)
(declare-fun l_0_12_438 () Real)
(declare-fun l_0_12_420 () Real)
(declare-fun l_0_12_393 () Real)
(declare-fun l_0_12_375 () Real)
(declare-fun l_0_12_348 () Real)
(declare-fun l_0_12_330 () Real)
(declare-fun l_0_12_303 () Real)
(declare-fun l_0_12_285 () Real)
(declare-fun l_0_12_213 () Real)
(declare-fun l_0_12_195 () Real)
(declare-fun l_0_12_439 () Real)
(declare-fun l_0_12_394 () Real)
(declare-fun l_0_12_349 () Real)
(declare-fun l_0_12_304 () Real)
(declare-fun l_0_12_214 () Real)
(declare-fun l_0_12_440 () Real)
(declare-fun l_0_12_395 () Real)
(declare-fun l_0_12_350 () Real)
(declare-fun l_0_12_305 () Real)
(declare-fun l_0_12_215 () Real)
(declare-fun l_0_12_441 () Real)
(declare-fun l_0_12_396 () Real)
(declare-fun l_0_12_351 () Real)
(declare-fun l_0_12_306 () Real)
(declare-fun l_0_12_216 () Real)
(declare-fun l_0_12_449 () Real)
(declare-fun l_0_12_404 () Real)
(declare-fun l_0_12_359 () Real)
(declare-fun l_0_12_314 () Real)
(declare-fun l_0_12_224 () Real)
(declare-fun l_0_12_450 () Real)
(declare-fun l_0_12_405 () Real)
(declare-fun l_0_12_360 () Real)
(declare-fun l_0_12_315 () Real)
(declare-fun l_0_12_225 () Real)
(assert
 (= (- l_0_0_1) 0.0))
(assert
 (= (- l_0_0_2) 0.0))
(assert
 (= (- l_0_0_3) 0.0))
(assert
 (>= l_0_0_1 0.0))
(assert
 (>= l_0_0_2 0.0))
(assert
 (>= l_0_0_3 0.0))
(assert
 (= (- l_0_1_1) 0.0))
(assert
 (= (- l_0_1_2) 0.0))
(assert
 (= (- (- (- l_0_1_3) l_0_1_4) l_0_1_5) 0.0))
(assert
 (>= l_0_1_1 0.0))
(assert
 (>= l_0_1_2 0.0))
(assert
 (>= l_0_1_3 0.0))
(assert
 (>= l_0_1_4 0.0))
(assert
 (>= l_0_1_5 0.0))
(assert
 (= (- l_0_2_2) 0.0))
(assert
 (= (- l_0_2_1) 0.0))
(assert
 (= (- (- (- (- (- l_0_2_3) l_0_2_4) l_0_2_5) l_0_2_6) l_0_2_7) 0.0))
(assert
 (>= l_0_2_1 0.0))
(assert
 (>= l_0_2_2 0.0))
(assert
 (>= l_0_2_3 0.0))
(assert
 (>= l_0_2_4 0.0))
(assert
 (>= l_0_2_5 0.0))
(assert
 (>= l_0_2_6 0.0))
(assert
 (>= l_0_2_7 0.0))
(assert
 (= (- l_0_3_2) 0.0))
(assert
 (= (- l_0_3_1) 0.0))
(assert
 (let ((?x3479 (- (- (- (- (- (- l_0_3_3) l_0_3_4) l_0_3_5) l_0_3_6) l_0_3_7) l_0_3_8)))
 (= (- ?x3479 l_0_3_9) 0.0)))
(assert
 (>= l_0_3_1 0.0))
(assert
 (>= l_0_3_2 0.0))
(assert
 (>= l_0_3_3 0.0))
(assert
 (>= l_0_3_4 0.0))
(assert
 (>= l_0_3_5 0.0))
(assert
 (>= l_0_3_6 0.0))
(assert
 (>= l_0_3_7 0.0))
(assert
 (>= l_0_3_8 0.0))
(assert
 (>= l_0_3_9 0.0))
(assert
 (let ((?x3516 (+ (- (* 1.0 (* l_0_4_181 l_0_4_181)) (* l_0_4_226 l_0_4_226)) 1.0)))
 (= ?x3516 0.0)))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x3529 (+ (+ (* (- l_0_4_1) l_0_4_1) (* (* 2.0 l_0_4_196) l_0_4_202)) (* (* 2.0 l_0_4_197) l_0_4_203))))
 (let ((?x3535 (+ (+ ?x3529 (* (* 2.0 l_0_4_198) l_0_4_204)) (* (* 2.0 l_0_4_199) l_0_4_205))))
 (let ((?x3541 (+ (+ ?x3535 (* (* 2.0 l_0_4_200) l_0_4_206)) (* (* 2.0 l_0_4_201) l_0_4_207))))
 (let ((?x3547 (- (- ?x3541 (* (* 2.0 l_0_4_241) l_0_4_247)) (* (* 2.0 l_0_4_242) l_0_4_248))))
 (let ((?x3553 (- (- ?x3547 (* (* 2.0 l_0_4_243) l_0_4_249)) (* (* 2.0 l_0_4_244) l_0_4_250))))
 (let ((?x3559 (- (- ?x3553 (* (* 2.0 l_0_4_245) l_0_4_251)) (* (* 2.0 l_0_4_246) l_0_4_252))))
 (= (+ ?x3559 ?x3560) 0.0)))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3621 (* ?x3620 l_0_4_47)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3619 (* ?x3618 l_0_4_2)))
 (= (+ ?x3619 ?x3621) 0.0))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x3667 (* ?x3666 l_0_4_72)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x3664 (* ?x3663 l_0_4_71)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x3661 (* ?x3660 l_0_4_70)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x3658 (* ?x3657 l_0_4_69)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x3655 (* ?x3654 l_0_4_68)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x3652 (* ?x3651 l_0_4_67)))
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3649 (* ?x3620 l_0_4_49)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x3647 (* ?x3646 l_0_4_27)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x3644 (* ?x3643 l_0_4_26)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x3641 (* ?x3640 l_0_4_25)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x3638 (* ?x3637 l_0_4_24)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x3635 (* ?x3634 l_0_4_23)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x3628 (* ?x3627 l_0_4_22)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3625 (* ?x3618 l_0_4_4)))
 (let ((?x3650 (+ (+ (+ (+ (+ (+ (+ ?x3625 ?x3628) ?x3635) ?x3638) ?x3641) ?x3644) ?x3647) ?x3649)))
 (= (- (- (- (- (- (- ?x3650 ?x3652) ?x3655) ?x3658) ?x3661) ?x3664) ?x3667) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3734 (* ?x3620 l_0_4_52)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_7) ?x3734) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3740 (* ?x3620 l_0_4_56)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_11) ?x3740) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3750 (* ?x3620 l_0_4_61)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_16) ?x3750) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3760 (* ?x3620 l_0_4_67)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_22) ?x3760) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3810 (* ?x3620 l_0_4_74)))
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x3808 (* ?x3807 l_0_4_162)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x3805 (* ?x3804 l_0_4_161)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x3802 (* ?x3801 l_0_4_160)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x3799 (* ?x3798 l_0_4_159)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x3796 (* ?x3795 l_0_4_158)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x3793 (* ?x3792 l_0_4_157)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x3790 (* ?x3789 l_0_4_117)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x3787 (* ?x3786 l_0_4_116)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x3784 (* ?x3783 l_0_4_115)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x3781 (* ?x3780 l_0_4_114)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x3778 (* ?x3777 l_0_4_113)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3768 (* ?x3618 l_0_4_29)))
 (let ((?x3785 (+ (+ (+ (+ ?x3768 (* (* 2.0 l_0_4_106) l_0_4_112)) ?x3778) ?x3781) ?x3784)))
 (let ((?x3806 (- (- (- (- (- (+ (+ ?x3785 ?x3787) ?x3790) ?x3793) ?x3796) ?x3799) ?x3802) ?x3805)))
 (= (+ (- ?x3806 ?x3808) ?x3810) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3881 (* ?x3620 l_0_4_82)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x3879 (* ?x3878 l_0_4_151)))
 (let ((?x3770 (* 2.0 l_0_4_106)))
 (let ((?x3866 (* ?x3770 l_0_4_91)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3865 (* ?x3618 l_0_4_37)))
 (= (+ (+ (- ?x3865 ?x3866) ?x3879) ?x3881) 0.0))))))))))
(assert
 (let ((?x3905 (* l_0_4_48 l_0_4_48)))
 (let ((?x3903 (* l_0_4_47 l_0_4_47)))
 (let ((?x3906 (+ (+ (- (* (- l_0_4_2) l_0_4_2) (* l_0_4_3 l_0_4_3)) ?x3903) ?x3905)))
 (= ?x3906 0.0)))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3927 (* ?x3926 l_0_4_50)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3924 (* ?x3923 l_0_4_49)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3921 (* ?x3920 l_0_4_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_4) ?x3921) ?x3924) ?x3927) 0.0))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3965 (* ?x3926 l_0_4_53)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3963 (* ?x3923 l_0_4_52)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3961 (* ?x3920 l_0_4_8)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x3959 (* ?x3958 l_0_4_7)))
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x3808 (* ?x3807 l_0_4_162)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x3805 (* ?x3804 l_0_4_161)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x3802 (* ?x3801 l_0_4_160)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x3799 (* ?x3798 l_0_4_159)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x3796 (* ?x3795 l_0_4_158)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x3793 (* ?x3792 l_0_4_157)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x3790 (* ?x3789 l_0_4_117)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x3787 (* ?x3786 l_0_4_116)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x3784 (* ?x3783 l_0_4_115)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x3781 (* ?x3780 l_0_4_114)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x3778 (* ?x3777 l_0_4_113)))
 (let ((?x3950 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_112) ?x3778) ?x3781) ?x3784) ?x3787)))
 (let ((?x3957 (+ (+ (+ (+ (+ (+ (- ?x3950 ?x3790) ?x3793) ?x3796) ?x3799) ?x3802) ?x3805) ?x3808)))
 (= (+ (+ (- (- ?x3957 ?x3959) ?x3961) ?x3963) ?x3965) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4009 (* ?x3926 l_0_4_57)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4007 (* ?x3923 l_0_4_56)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4005 (* ?x4000 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_11) l_0_4_2) ?x4005) ?x4007) ?x4009) 0.0))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4033 (* ?x3926 l_0_4_62)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4031 (* ?x3923 l_0_4_61)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4024 (* ?x3634 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_16) l_0_4_2) ?x4024) ?x4031) ?x4033) 0.0))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4057 (* ?x3926 l_0_4_68)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4055 (* ?x3923 l_0_4_67)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4048 (* ?x4047 l_0_4_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_22) ?x4048) ?x4055) ?x4057) 0.0))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4080 (* ?x3926 l_0_4_75)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4078 (* ?x3923 l_0_4_74)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4071 (* ?x3920 l_0_4_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_2) l_0_4_29) ?x4071) ?x4078) ?x4080) 0.0))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4113 (* ?x3926 l_0_4_83)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4111 (* ?x3923 l_0_4_82)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4109 (* ?x3920 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4107 (* ?x3958 l_0_4_37)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x4105 (* ?x4104 l_0_4_152)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x4102 (* ?x4101 l_0_4_151)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4094 (* ?x3777 l_0_4_93)))
 (let ((?x4106 (+ (+ (- (* (* (- 2.0) l_0_4_106) l_0_4_92) ?x4094) ?x4102) ?x4105)))
 (= (+ (+ (- (- ?x4106 ?x4107) ?x4109) ?x4111) ?x4113) 0.0)))))))))))))))))
(assert
 (let ((?x4160 (* l_0_4_6 l_0_4_6)))
 (let ((?x4158 (* l_0_4_51 l_0_4_51)))
 (let ((?x4156 (* l_0_4_50 l_0_4_50)))
 (let ((?x4154 (* l_0_4_5 l_0_4_5)))
 (let ((?x4157 (+ (- (+ (* (- l_0_4_4) l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4154) ?x4156)))
 (= (- (+ ?x4157 ?x4158) ?x4160) 0.0)))))))
(assert
 (let ((?x4190 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4187 (* ?x4186 l_0_4_54)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4184 (* ?x4183 l_0_4_53)))
 (let ((?x4181 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4178 (* ?x4177 l_0_4_52)))
 (let ((?x4188 (+ (+ (- (+ (* (* (- 2.0) l_0_4_4) l_0_4_7) ?x4178) ?x4181) ?x4184) ?x4187)))
 (= (- ?x4188 ?x4190) 0.0)))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4231 (* ?x4186 l_0_4_58)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4229 (* ?x4183 l_0_4_57)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4227 (* ?x4177 l_0_4_56)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4225 (* ?x4224 l_0_4_6)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4222 (* ?x4000 l_0_4_5)))
 (let ((?x4230 (+ (+ (- (- (* (* (- 2.0) l_0_4_11) l_0_4_4) ?x4222) ?x4225) ?x4227) ?x4229)))
 (= (+ ?x4230 ?x4231) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4266 (* ?x4186 l_0_4_63)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4264 (* ?x4183 l_0_4_62)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4262 (* ?x4177 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4254 (* ?x3637 l_0_4_6)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4251 (* ?x3634 l_0_4_5)))
 (let ((?x4265 (+ (+ (- (- (* (* (- 2.0) l_0_4_16) l_0_4_4) ?x4251) ?x4254) ?x4262) ?x4264)))
 (= (+ ?x4265 ?x4266) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4303 (* ?x4186 l_0_4_69)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4301 (* ?x4183 l_0_4_68)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4299 (* ?x4177 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4297 (* ?x4296 l_0_4_6)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4288 (* ?x4047 l_0_4_5)))
 (let ((?x4302 (+ (+ (- (- (* (* (- 2.0) l_0_4_22) l_0_4_4) ?x4288) ?x4297) ?x4299) ?x4301)))
 (= (+ ?x4302 ?x4303) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4341 (* ?x4186 l_0_4_76)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4339 (* ?x4183 l_0_4_75)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4337 (* ?x4177 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4335 (* ?x4334 l_0_4_6)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4326 (* ?x4325 l_0_4_5)))
 (let ((?x4340 (+ (+ (- (- (* (* (- 2.0) l_0_4_29) l_0_4_4) ?x4326) ?x4335) ?x4337) ?x4339)))
 (= (+ ?x4340 ?x4341) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4394 (* ?x4186 l_0_4_84)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4392 (* ?x4183 l_0_4_83)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4390 (* ?x4177 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4388 (* ?x4387 l_0_4_6)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4385 (* ?x4384 l_0_4_5)))
 (let ((?x4381 (* 2.0 l_0_4_37)))
 (let ((?x4382 (* ?x4381 l_0_4_4)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x4379 (* ?x4378 l_0_4_153)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x4376 (* ?x4375 l_0_4_152)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x4373 (* ?x4372 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4364 (* ?x3780 l_0_4_96)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4361 (* ?x3777 l_0_4_95)))
 (let ((?x4377 (+ (+ (- (- (* (* (- 2.0) l_0_4_106) l_0_4_94) ?x4361) ?x4364) ?x4373) ?x4376)))
 (let ((?x4380 (+ ?x4377 ?x4379)))
 (= (+ (+ (+ (- (- (- ?x4380 ?x4382) ?x4385) ?x4388) ?x4390) ?x4392) ?x4394) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x4462 (* l_0_4_9 l_0_4_9)))
 (let ((?x4460 (* l_0_4_8 l_0_4_8)))
 (let ((?x4458 (* l_0_4_7 l_0_4_7)))
 (let ((?x4456 (* l_0_4_55 l_0_4_55)))
 (let ((?x4454 (* l_0_4_54 l_0_4_54)))
 (let ((?x4452 (* l_0_4_53 l_0_4_53)))
 (let ((?x4455 (+ (+ (+ (* (- l_0_4_10) l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4452) ?x4454)))
 (= (- (- (- (+ ?x4455 ?x4456) ?x4458) ?x4460) ?x4462) 0.0)))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x3667 (* ?x3666 l_0_4_72)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x3664 (* ?x3663 l_0_4_71)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x3661 (* ?x3660 l_0_4_70)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x3658 (* ?x3657 l_0_4_69)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x3655 (* ?x3654 l_0_4_68)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x3652 (* ?x3651 l_0_4_67)))
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4504 (* ?x4503 l_0_4_59)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4501 (* ?x4500 l_0_4_58)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4498 (* ?x4497 l_0_4_57)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4495 (* ?x4494 l_0_4_56)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x3647 (* ?x3646 l_0_4_27)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x3644 (* ?x3643 l_0_4_26)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x3641 (* ?x3640 l_0_4_25)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x3638 (* ?x3637 l_0_4_24)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x3635 (* ?x3634 l_0_4_23)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x3628 (* ?x3627 l_0_4_22)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4486 (* ?x4224 l_0_4_9)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4484 (* ?x4000 l_0_4_8)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x4482 (* ?x4481 l_0_4_7)))
 (let ((?x4487 (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_14) ?x4482) ?x4484) ?x4486)))
 (let ((?x4496 (+ (- (- (- (- (- (- ?x4487 ?x3628) ?x3635) ?x3638) ?x3641) ?x3644) ?x3647) ?x4495)))
 (let ((?x4509 (+ (+ (+ (+ (+ (+ (+ ?x4496 ?x4498) ?x4501) ?x4504) ?x3652) ?x3655) ?x3658) ?x3661)))
 (= (+ (+ ?x4509 ?x3664) ?x3667) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4575 (* ?x4503 l_0_4_64)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4573 (* ?x4500 l_0_4_63)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4571 (* ?x4497 l_0_4_62)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4569 (* ?x4494 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4567 (* ?x3637 l_0_4_9)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4558 (* ?x3634 l_0_4_8)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x4554 (* ?x3627 l_0_4_7)))
 (let ((?x4570 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_19) ?x4554) ?x4558) ?x4567) ?x4569)))
 (= (+ (+ (+ ?x4570 ?x4571) ?x4573) ?x4575) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4623 (* ?x4503 l_0_4_70)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4621 (* ?x4500 l_0_4_69)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4619 (* ?x4497 l_0_4_68)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4617 (* ?x4494 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4615 (* ?x4296 l_0_4_9)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4606 (* ?x4047 l_0_4_8)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x4603 (* ?x4601 l_0_4_7)))
 (let ((?x4618 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_25) ?x4603) ?x4606) ?x4615) ?x4617)))
 (= (+ (+ (+ ?x4618 ?x4619) ?x4621) ?x4623) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4671 (* ?x4503 l_0_4_77)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4669 (* ?x4500 l_0_4_76)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4667 (* ?x4497 l_0_4_75)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4665 (* ?x4494 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4663 (* ?x4334 l_0_4_9)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4654 (* ?x4325 l_0_4_8)))
 (let ((?x4649 (* 2.0 l_0_4_29)))
 (let ((?x4651 (* ?x4649 l_0_4_7)))
 (let ((?x4666 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_32) ?x4651) ?x4654) ?x4663) ?x4665)))
 (= (+ (+ (+ ?x4666 ?x4667) ?x4669) ?x4671) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4739 (* ?x4503 l_0_4_85)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4737 (* ?x4500 l_0_4_84)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4735 (* ?x4497 l_0_4_83)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4733 (* ?x4494 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4731 (* ?x4387 l_0_4_9)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4729 (* ?x4384 l_0_4_8)))
 (let ((?x4381 (* 2.0 l_0_4_37)))
 (let ((?x4727 (* ?x4381 l_0_4_7)))
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x4725 (* ?x4724 l_0_4_154)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x4722 (* ?x4721 l_0_4_153)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x4719 (* ?x4718 l_0_4_152)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x4716 (* ?x4715 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4713 (* ?x3780 l_0_4_99)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4711 (* ?x3777 l_0_4_98)))
 (let ((?x3770 (* 2.0 l_0_4_106)))
 (let ((?x4702 (* ?x3770 l_0_4_97)))
 (let ((?x4697 (* 2.0 l_0_4_100)))
 (let ((?x4699 (* ?x4697 l_0_4_109)))
 (let ((?x4479 (* (- 2.0) l_0_4_10)))
 (let ((?x4695 (* ?x4479 l_0_4_40)))
 (let ((?x4723 (+ (+ (+ (- (- (- (- ?x4695 ?x4699) ?x4702) ?x4711) ?x4713) ?x4716) ?x4719) ?x4722)))
 (let ((?x4738 (+ (+ (+ (- (- (- (+ ?x4723 ?x4725) ?x4727) ?x4729) ?x4731) ?x4733) ?x4735) ?x4737)))
 (= (+ ?x4738 ?x4739) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x4828 (* l_0_4_60 l_0_4_60)))
 (let ((?x4826 (* l_0_4_59 l_0_4_59)))
 (let ((?x4824 (* l_0_4_58 l_0_4_58)))
 (let ((?x4822 (* l_0_4_57 l_0_4_57)))
 (let ((?x4820 (* l_0_4_56 l_0_4_56)))
 (let ((?x4818 (* l_0_4_15 l_0_4_15)))
 (let ((?x4816 (* l_0_4_14 l_0_4_14)))
 (let ((?x4803 (* l_0_4_13 l_0_4_13)))
 (let ((?x4817 (- (- (- (* (- l_0_4_11) l_0_4_11) (* l_0_4_12 l_0_4_12)) ?x4803) ?x4816)))
 (= (+ (+ (+ (+ (+ (- ?x4817 ?x4818) ?x4820) ?x4822) ?x4824) ?x4826) ?x4828) 0.0)))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4877 (* ?x4876 l_0_4_65)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4874 (* ?x4873 l_0_4_64)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4871 (* ?x4870 l_0_4_63)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4868 (* ?x4867 l_0_4_62)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4865 (* ?x4864 l_0_4_61)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4862 (* ?x4861 l_0_4_20)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4859 (* ?x4858 l_0_4_19)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4856 (* ?x4224 l_0_4_18)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4854 (* ?x4000 l_0_4_17)))
 (let ((?x4863 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_16) ?x4854) ?x4856) ?x4859) ?x4862)))
 (= (+ (+ (+ (+ (+ ?x4863 ?x4865) ?x4868) ?x4871) ?x4874) ?x4877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4936 (* ?x4876 l_0_4_71)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4934 (* ?x4873 l_0_4_70)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4932 (* ?x4870 l_0_4_69)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4930 (* ?x4867 l_0_4_68)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4928 (* ?x4864 l_0_4_67)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4926 (* ?x4861 l_0_4_26)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4916 (* ?x4858 l_0_4_25)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4913 (* ?x4224 l_0_4_24)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4909 (* ?x4000 l_0_4_23)))
 (let ((?x4927 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_22) ?x4909) ?x4913) ?x4916) ?x4926)))
 (= (+ (+ (+ (+ (+ ?x4927 ?x4928) ?x4930) ?x4932) ?x4934) ?x4936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4995 (* ?x4876 l_0_4_78)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4993 (* ?x4873 l_0_4_77)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4991 (* ?x4870 l_0_4_76)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4989 (* ?x4867 l_0_4_75)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4987 (* ?x4864 l_0_4_74)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4985 (* ?x4861 l_0_4_33)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4975 (* ?x4858 l_0_4_32)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4972 (* ?x4224 l_0_4_31)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4968 (* ?x4000 l_0_4_30)))
 (let ((?x4986 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_29) ?x4968) ?x4972) ?x4975) ?x4985)))
 (= (+ (+ (+ (+ (+ ?x4986 ?x4987) ?x4989) ?x4991) ?x4993) ?x4995) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x5084 (* ?x4876 l_0_4_86)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x5082 (* ?x4873 l_0_4_85)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x5080 (* ?x4870 l_0_4_84)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x5078 (* ?x4867 l_0_4_83)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x5076 (* ?x4864 l_0_4_82)))
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x5074 (* ?x5073 l_0_4_155)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x5071 (* ?x4861 l_0_4_41)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x5069 (* ?x5068 l_0_4_154)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x5066 (* ?x5065 l_0_4_153)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x5063 (* ?x5062 l_0_4_152)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x5060 (* ?x5059 l_0_4_151)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x5057 (* ?x4858 l_0_4_40)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x5055 (* ?x4224 l_0_4_39)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x5053 (* ?x4000 l_0_4_38)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x5051 (* ?x4481 l_0_4_37)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x5049 (* ?x5048 l_0_4_110)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x5046 (* ?x5045 l_0_4_109)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x5043 (* ?x5034 l_0_4_108)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x5031 (* ?x5029 l_0_4_107)))
 (let ((?x5050 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_106) ?x5031) ?x5043) ?x5046) ?x5049)))
 (let ((?x5067 (+ (+ (+ (- (- (- (- ?x5050 ?x5051) ?x5053) ?x5055) ?x5057) ?x5060) ?x5063) ?x5066)))
 (let ((?x5083 (+ (+ (+ (+ (+ (- (+ ?x5067 ?x5069) ?x5071) ?x5074) ?x5076) ?x5078) ?x5080) ?x5082)))
 (= (+ ?x5083 ?x5084) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5193 (* l_0_4_66 l_0_4_66)))
 (let ((?x5191 (* l_0_4_65 l_0_4_65)))
 (let ((?x5189 (* l_0_4_64 l_0_4_64)))
 (let ((?x5187 (* l_0_4_63 l_0_4_63)))
 (let ((?x5185 (* l_0_4_62 l_0_4_62)))
 (let ((?x5183 (* l_0_4_61 l_0_4_61)))
 (let ((?x5181 (* l_0_4_21 l_0_4_21)))
 (let ((?x5179 (* l_0_4_20 l_0_4_20)))
 (let ((?x5164 (* l_0_4_19 l_0_4_19)))
 (let ((?x5161 (* l_0_4_18 l_0_4_18)))
 (let ((?x5178 (- (- (- (* (- l_0_4_16) l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5161) ?x5164)))
 (let ((?x5192 (+ (+ (+ (+ (+ (- (- ?x5178 ?x5179) ?x5181) ?x5183) ?x5185) ?x5187) ?x5189) ?x5191)))
 (= (+ ?x5192 ?x5193) 0.0))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x3667 (* ?x3666 l_0_4_72)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x3664 (* ?x3663 l_0_4_71)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x3661 (* ?x3660 l_0_4_70)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x3658 (* ?x3657 l_0_4_69)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x3655 (* ?x3654 l_0_4_68)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x3652 (* ?x3651 l_0_4_67)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x3647 (* ?x3646 l_0_4_27)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x3644 (* ?x3643 l_0_4_26)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x3641 (* ?x3640 l_0_4_25)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x3638 (* ?x3637 l_0_4_24)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x3635 (* ?x3634 l_0_4_23)))
 (let ((?x5226 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_22) ?x3635) ?x3638) ?x3641) ?x3644)))
 (let ((?x5233 (+ (+ (+ (+ (+ (+ (- ?x5226 ?x3647) ?x3652) ?x3655) ?x3658) ?x3661) ?x3664) ?x3667)))
 (= ?x5233 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5268 (* ?x3666 l_0_4_79)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5266 (* ?x3663 l_0_4_78)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5264 (* ?x3660 l_0_4_77)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5262 (* ?x3657 l_0_4_76)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5260 (* ?x3654 l_0_4_75)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5258 (* ?x3651 l_0_4_74)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5256 (* ?x3646 l_0_4_34)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5254 (* ?x3643 l_0_4_33)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5252 (* ?x3640 l_0_4_32)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5250 (* ?x3637 l_0_4_31)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5248 (* ?x3634 l_0_4_30)))
 (let ((?x5255 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_29) ?x5248) ?x5250) ?x5252) ?x5254)))
 (let ((?x5269 (+ (+ (+ (+ (+ (+ (- ?x5255 ?x5256) ?x5258) ?x5260) ?x5262) ?x5264) ?x5266) ?x5268)))
 (= ?x5269 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5364 (* ?x3666 l_0_4_87)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5362 (* ?x3663 l_0_4_86)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5360 (* ?x3660 l_0_4_85)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5358 (* ?x3657 l_0_4_84)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5356 (* ?x3654 l_0_4_83)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5354 (* ?x3651 l_0_4_82)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5352 (* ?x3646 l_0_4_42)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5350 (* ?x3643 l_0_4_41)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5348 (* ?x3640 l_0_4_40)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5346 (* ?x3637 l_0_4_39)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5344 (* ?x3634 l_0_4_38)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x5342 (* ?x3627 l_0_4_37)))
 (let ((?x5340 (* l_0_4_156 l_0_4_156)))
 (let ((?x5338 (* l_0_4_155 l_0_4_155)))
 (let ((?x5336 (* l_0_4_154 l_0_4_154)))
 (let ((?x5334 (* l_0_4_153 l_0_4_153)))
 (let ((?x5332 (* l_0_4_152 l_0_4_152)))
 (let ((?x5330 (* l_0_4_151 l_0_4_151)))
 (let ((?x5328 (* l_0_4_111 l_0_4_111)))
 (let ((?x5326 (* l_0_4_110 l_0_4_110)))
 (let ((?x5315 (* l_0_4_109 l_0_4_109)))
 (let ((?x5312 (* l_0_4_108 l_0_4_108)))
 (let ((?x5314 (- (- (* (- l_0_4_106) l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x5312)))
 (let ((?x5337 (+ (+ (+ (+ (- (- (- ?x5314 ?x5315) ?x5326) ?x5328) ?x5330) ?x5332) ?x5334) ?x5336)))
 (let ((?x5341 (+ (+ ?x5337 ?x5338) ?x5340)))
 (let ((?x5355 (+ (- (- (- (- (- (- ?x5341 ?x5342) ?x5344) ?x5346) ?x5348) ?x5350) ?x5352) ?x5354)))
 (= (+ (+ (+ (+ (+ ?x5355 ?x5356) ?x5358) ?x5360) ?x5362) ?x5364) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5468 (* l_0_4_73 l_0_4_73)))
 (let ((?x5466 (* l_0_4_72 l_0_4_72)))
 (let ((?x5464 (* l_0_4_71 l_0_4_71)))
 (let ((?x5462 (* l_0_4_70 l_0_4_70)))
 (let ((?x5460 (* l_0_4_69 l_0_4_69)))
 (let ((?x5458 (* l_0_4_68 l_0_4_68)))
 (let ((?x5456 (* l_0_4_67 l_0_4_67)))
 (let ((?x5454 (* l_0_4_28 l_0_4_28)))
 (let ((?x5452 (* l_0_4_27 l_0_4_27)))
 (let ((?x5450 (* l_0_4_26 l_0_4_26)))
 (let ((?x5434 (* l_0_4_25 l_0_4_25)))
 (let ((?x5431 (* l_0_4_24 l_0_4_24)))
 (let ((?x5449 (- (- (- (* (- l_0_4_22) l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5431) ?x5434)))
 (let ((?x5463 (+ (+ (+ (+ (- (- (- ?x5449 ?x5450) ?x5452) ?x5454) ?x5456) ?x5458) ?x5460) ?x5462)))
 (= (+ (+ (+ ?x5463 ?x5464) ?x5466) ?x5468) 0.0))))))))))))))))
(assert
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5537 (* ?x5536 l_0_4_80)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5534 (* ?x5533 l_0_4_79)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5531 (* ?x5530 l_0_4_78)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5528 (* ?x5527 l_0_4_77)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5525 (* ?x5524 l_0_4_76)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5522 (* ?x5521 l_0_4_75)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5519 (* ?x5518 l_0_4_74)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5516 (* ?x5515 l_0_4_35)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5513 (* ?x5512 l_0_4_34)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5510 (* ?x5509 l_0_4_33)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5507 (* ?x5506 l_0_4_32)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5504 (* ?x4296 l_0_4_31)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5502 (* ?x4047 l_0_4_30)))
 (let ((?x5511 (- (- (- (- (* (* (- 2.0) l_0_4_22) l_0_4_29) ?x5502) ?x5504) ?x5507) ?x5510)))
 (let ((?x5532 (+ (+ (+ (+ (+ (- (- ?x5511 ?x5513) ?x5516) ?x5519) ?x5522) ?x5525) ?x5528) ?x5531)))
 (= (+ (+ ?x5532 ?x5534) ?x5537) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5621 (* ?x5536 l_0_4_88)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5619 (* ?x5533 l_0_4_87)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5617 (* ?x5530 l_0_4_86)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5615 (* ?x5527 l_0_4_85)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5613 (* ?x5524 l_0_4_84)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5611 (* ?x5521 l_0_4_83)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5609 (* ?x5518 l_0_4_82)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5607 (* ?x5515 l_0_4_43)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5605 (* ?x5512 l_0_4_42)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5603 (* ?x5509 l_0_4_41)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5591 (* ?x5506 l_0_4_40)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5587 (* ?x4296 l_0_4_39)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5583 (* ?x4047 l_0_4_38)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x5579 (* ?x4601 l_0_4_37)))
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x3808 (* ?x3807 l_0_4_162)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x3805 (* ?x3804 l_0_4_161)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x3802 (* ?x3801 l_0_4_160)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x3799 (* ?x3798 l_0_4_159)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x3796 (* ?x3795 l_0_4_158)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x3793 (* ?x3792 l_0_4_157)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x3790 (* ?x3789 l_0_4_117)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x3787 (* ?x3786 l_0_4_116)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x3784 (* ?x3783 l_0_4_115)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x3781 (* ?x3780 l_0_4_114)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x3778 (* ?x3777 l_0_4_113)))
 (let ((?x3950 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_112) ?x3778) ?x3781) ?x3784) ?x3787)))
 (let ((?x3957 (+ (+ (+ (+ (+ (+ (- ?x3950 ?x3790) ?x3793) ?x3796) ?x3799) ?x3802) ?x3805) ?x3808)))
 (let ((?x5608 (- (- (- (- (- (- (- ?x3957 ?x5579) ?x5583) ?x5587) ?x5591) ?x5603) ?x5605) ?x5607)))
 (let ((?x5622 (+ (+ (+ (+ (+ (+ (+ ?x5608 ?x5609) ?x5611) ?x5613) ?x5615) ?x5617) ?x5619) ?x5621)))
 (= ?x5622 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5712 (* l_0_4_81 l_0_4_81)))
 (let ((?x5710 (* l_0_4_80 l_0_4_80)))
 (let ((?x5708 (* l_0_4_79 l_0_4_79)))
 (let ((?x5706 (* l_0_4_78 l_0_4_78)))
 (let ((?x5704 (* l_0_4_77 l_0_4_77)))
 (let ((?x5702 (* l_0_4_76 l_0_4_76)))
 (let ((?x5700 (* l_0_4_75 l_0_4_75)))
 (let ((?x5698 (* l_0_4_74 l_0_4_74)))
 (let ((?x5696 (* l_0_4_36 l_0_4_36)))
 (let ((?x5694 (* l_0_4_35 l_0_4_35)))
 (let ((?x5692 (* l_0_4_34 l_0_4_34)))
 (let ((?x5690 (* l_0_4_33 l_0_4_33)))
 (let ((?x5679 (* l_0_4_32 l_0_4_32)))
 (let ((?x5675 (* l_0_4_31 l_0_4_31)))
 (let ((?x5680 (- (- (- (* (- l_0_4_29) l_0_4_29) (* l_0_4_30 l_0_4_30)) ?x5675) ?x5679)))
 (let ((?x5703 (+ (+ (+ (- (- (- (- ?x5680 ?x5690) ?x5692) ?x5694) ?x5696) ?x5698) ?x5700) ?x5702)))
 (= (+ (+ (+ (+ (+ ?x5703 ?x5704) ?x5706) ?x5708) ?x5710) ?x5712) 0.0))))))))))))))))))
(assert
 (let ((?x5815 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5812 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5809 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5806 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5803 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5800 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5797 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5794 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5791 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5788 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5785 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5782 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5779 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x5776 (* ?x4334 l_0_4_39)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x5774 (* ?x4325 l_0_4_38)))
 (let ((?x4649 (* 2.0 l_0_4_29)))
 (let ((?x5772 (* ?x4649 l_0_4_37)))
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5770 (* ?x3807 l_0_4_169)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5768 (* ?x3804 l_0_4_168)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5766 (* ?x3801 l_0_4_167)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5764 (* ?x3798 l_0_4_166)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5762 (* ?x3795 l_0_4_165)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5760 (* ?x3792 l_0_4_164)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5758 (* ?x3789 l_0_4_124)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5756 (* ?x3786 l_0_4_123)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5754 (* ?x3783 l_0_4_122)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5752 (* ?x3780 l_0_4_121)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5750 (* ?x3777 l_0_4_120)))
 (let ((?x5757 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_119) ?x5750) ?x5752) ?x5754) ?x5756)))
 (let ((?x5771 (+ (+ (+ (+ (+ (+ (- ?x5757 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (let ((?x5789 (- (- (- (- (- (- (- ?x5771 ?x5772) ?x5774) ?x5776) ?x5779) ?x5782) ?x5785) ?x5788)))
 (let ((?x5810 (+ (+ (+ (+ (+ (+ (- ?x5789 ?x5791) ?x5794) ?x5797) ?x5800) ?x5803) ?x5806) ?x5809)))
 (= (+ (+ ?x5810 ?x5812) ?x5815) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5993 (* l_0_4_90 l_0_4_90)))
 (let ((?x5991 (* l_0_4_89 l_0_4_89)))
 (let ((?x5989 (* l_0_4_88 l_0_4_88)))
 (let ((?x5987 (* l_0_4_87 l_0_4_87)))
 (let ((?x5985 (* l_0_4_86 l_0_4_86)))
 (let ((?x5983 (* l_0_4_85 l_0_4_85)))
 (let ((?x5981 (* l_0_4_84 l_0_4_84)))
 (let ((?x5979 (* l_0_4_83 l_0_4_83)))
 (let ((?x5977 (* l_0_4_82 l_0_4_82)))
 (let ((?x5975 (* l_0_4_45 l_0_4_45)))
 (let ((?x5973 (* l_0_4_44 l_0_4_44)))
 (let ((?x5971 (* l_0_4_43 l_0_4_43)))
 (let ((?x5969 (* l_0_4_42 l_0_4_42)))
 (let ((?x5967 (* l_0_4_41 l_0_4_41)))
 (let ((?x5965 (* l_0_4_40 l_0_4_40)))
 (let ((?x5963 (* l_0_4_39 l_0_4_39)))
 (let ((?x5961 (* l_0_4_38 l_0_4_38)))
 (let ((?x5959 (* l_0_4_37 l_0_4_37)))
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5957 (* ?x3807 l_0_4_177)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5955 (* ?x3804 l_0_4_176)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5953 (* ?x3801 l_0_4_175)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5951 (* ?x3798 l_0_4_174)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5949 (* ?x3795 l_0_4_173)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5947 (* ?x3792 l_0_4_172)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5945 (* ?x3789 l_0_4_132)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5926 (* ?x3786 l_0_4_131)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5922 (* ?x3783 l_0_4_130)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5918 (* ?x3780 l_0_4_129)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5914 (* ?x3777 l_0_4_128)))
 (let ((?x5927 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_127) ?x5914) ?x5918) ?x5922) ?x5926)))
 (let ((?x5958 (+ (+ (+ (+ (+ (+ (- ?x5927 ?x5945) ?x5947) ?x5949) ?x5951) ?x5953) ?x5955) ?x5957)))
 (let ((?x5972 (- (- (- (- (- (- (- ?x5958 ?x5959) ?x5961) ?x5963) ?x5965) ?x5967) ?x5969) ?x5971)))
 (let ((?x5986 (+ (+ (+ (+ (+ (- (- ?x5972 ?x5973) ?x5975) ?x5977) ?x5979) ?x5981) ?x5983) ?x5985)))
 (= (+ (+ (+ (+ ?x5986 ?x5987) ?x5989) ?x5991) ?x5993) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x6091 (+ (+ (* (- l_0_4_1) l_0_4_1) (* (* 2.0 l_0_4_187) l_0_4_191)) (* (* 2.0 l_0_4_188) l_0_4_192))))
 (let ((?x6097 (+ (+ ?x6091 (* (* 2.0 l_0_4_189) l_0_4_193)) (* (* 2.0 l_0_4_190) l_0_4_194))))
 (let ((?x6103 (- (- ?x6097 (* (* 2.0 l_0_4_232) l_0_4_236)) (* (* 2.0 l_0_4_233) l_0_4_237))))
 (let ((?x6109 (- (- ?x6103 (* (* 2.0 l_0_4_234) l_0_4_238)) (* (* 2.0 l_0_4_235) l_0_4_239))))
 (= (+ ?x6109 ?x3560) 0.0)))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3621 (* ?x3620 l_0_4_47)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x6150 (* ?x3878 l_0_4_146)))
 (let ((?x6147 (* 2.0 l_0_4_101)))
 (let ((?x6148 (* ?x6147 l_0_4_91)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3619 (* ?x3618 l_0_4_2)))
 (= (+ (+ (- ?x3619 ?x6148) ?x6150) ?x3621) 0.0))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4504 (* ?x4503 l_0_4_59)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4501 (* ?x4500 l_0_4_58)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4498 (* ?x4497 l_0_4_57)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4495 (* ?x4494 l_0_4_56)))
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3649 (* ?x3620 l_0_4_49)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4486 (* ?x4224 l_0_4_9)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4484 (* ?x4000 l_0_4_8)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x4482 (* ?x4481 l_0_4_7)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3625 (* ?x3618 l_0_4_4)))
 (let ((?x6171 (+ (+ (+ (+ ?x3625 (* (* 2.0 l_0_4_10) l_0_4_14)) ?x4482) ?x4484) ?x4486)))
 (= (- (- (- (- (+ ?x6171 ?x3649) ?x4495) ?x4498) ?x4501) ?x4504) 0.0)))))))))))))))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3734 (* ?x3620 l_0_4_52)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_7) ?x3734) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3740 (* ?x3620 l_0_4_56)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_11) ?x3740) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3750 (* ?x3620 l_0_4_61)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_16) ?x3750) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3760 (* ?x3620 l_0_4_67)))
 (= (+ (* (* (- 2.0) l_0_4_1) l_0_4_22) ?x3760) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3810 (* ?x3620 l_0_4_74)))
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x6211 (* ?x4724 l_0_4_149)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x6209 (* ?x4721 l_0_4_148)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x6207 (* ?x4718 l_0_4_147)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x6205 (* ?x4715 l_0_4_146)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6203 (* ?x5034 l_0_4_99)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6201 (* ?x5029 l_0_4_98)))
 (let ((?x6147 (* 2.0 l_0_4_101)))
 (let ((?x6199 (* ?x6147 l_0_4_97)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3768 (* ?x3618 l_0_4_29)))
 (let ((?x6204 (+ (+ (+ (+ ?x3768 (* (* 2.0 l_0_4_100) l_0_4_104)) ?x6199) ?x6201) ?x6203)))
 (= (+ (- (- (- (- ?x6204 ?x6205) ?x6207) ?x6209) ?x6211) ?x3810) 0.0)))))))))))))))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3881 (* ?x3620 l_0_4_82)))
 (let ((?x3618 (* (- 2.0) l_0_4_1)))
 (let ((?x3865 (* ?x3618 l_0_4_37)))
 (= (+ ?x3865 ?x3881) 0.0))))))
(assert
 (let ((?x3905 (* l_0_4_48 l_0_4_48)))
 (let ((?x3903 (* l_0_4_47 l_0_4_47)))
 (let ((?x3896 (* l_0_4_3 l_0_4_3)))
 (let ((?x3909 (* l_0_4_2 l_0_4_2)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x6265 (* ?x4104 l_0_4_147)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x6263 (* ?x4101 l_0_4_146)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6261 (* ?x5029 l_0_4_93)))
 (let ((?x6266 (+ (+ (- (* (* (- 2.0) l_0_4_101) l_0_4_92) ?x6261) ?x6263) ?x6265)))
 (= (+ (+ (- (- ?x6266 ?x3909) ?x3896) ?x3903) ?x3905) 0.0)))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3927 (* ?x3926 l_0_4_50)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3924 (* ?x3923 l_0_4_49)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3921 (* ?x3920 l_0_4_5)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6305 (* ?x3958 l_0_4_4)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x6303 (* ?x4378 l_0_4_148)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x6301 (* ?x4375 l_0_4_147)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x6299 (* ?x4372 l_0_4_146)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6297 (* ?x5034 l_0_4_96)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6295 (* ?x5029 l_0_4_95)))
 (let ((?x6302 (+ (+ (- (- (* (* (- 2.0) l_0_4_101) l_0_4_94) ?x6295) ?x6297) ?x6299) ?x6301)))
 (let ((?x6304 (+ ?x6302 ?x6303)))
 (= (+ (+ (- (- ?x6304 ?x6305) ?x3921) ?x3924) ?x3927) 0.0))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3965 (* ?x3926 l_0_4_53)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3963 (* ?x3923 l_0_4_52)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3961 (* ?x3920 l_0_4_8)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x3959 (* ?x3958 l_0_4_7)))
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x6211 (* ?x4724 l_0_4_149)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x6209 (* ?x4721 l_0_4_148)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x6207 (* ?x4718 l_0_4_147)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x6205 (* ?x4715 l_0_4_146)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6203 (* ?x5034 l_0_4_99)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6201 (* ?x5029 l_0_4_98)))
 (let ((?x6147 (* 2.0 l_0_4_101)))
 (let ((?x6199 (* ?x6147 l_0_4_97)))
 (let ((?x6350 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_104) ?x6199) ?x6201) ?x6203) ?x6205)))
 (let ((?x6353 (+ (+ (+ ?x6350 ?x6207) ?x6209) ?x6211)))
 (= (+ (+ (- (- ?x6353 ?x3959) ?x3961) ?x3963) ?x3965) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4009 (* ?x3926 l_0_4_57)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4007 (* ?x3923 l_0_4_56)))
 (let ((?x6398 (* l_0_4_150 l_0_4_150)))
 (let ((?x6396 (* l_0_4_149 l_0_4_149)))
 (let ((?x6394 (* l_0_4_148 l_0_4_148)))
 (let ((?x6392 (* l_0_4_147 l_0_4_147)))
 (let ((?x6390 (* l_0_4_146 l_0_4_146)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4005 (* ?x4000 l_0_4_3)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x6387 (* ?x4481 l_0_4_2)))
 (let ((?x6385 (* l_0_4_105 l_0_4_105)))
 (let ((?x6383 (* l_0_4_104 l_0_4_104)))
 (let ((?x6381 (* l_0_4_103 l_0_4_103)))
 (let ((?x6382 (- (- (* (- l_0_4_101) l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x6381)))
 (let ((?x6386 (- (- ?x6382 ?x6383) ?x6385)))
 (let ((?x6399 (+ (+ (+ (+ (+ (- (- ?x6386 ?x6387) ?x4005) ?x6390) ?x6392) ?x6394) ?x6396) ?x6398)))
 (= (+ (+ ?x6399 ?x4007) ?x4009) 0.0)))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4033 (* ?x3926 l_0_4_62)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4031 (* ?x3923 l_0_4_61)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4024 (* ?x3634 l_0_4_3)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x6437 (* ?x3627 l_0_4_2)))
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x5074 (* ?x5073 l_0_4_155)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x5069 (* ?x5068 l_0_4_154)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x5066 (* ?x5065 l_0_4_153)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x5063 (* ?x5062 l_0_4_152)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x5060 (* ?x5059 l_0_4_151)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x5049 (* ?x5048 l_0_4_110)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x5046 (* ?x5045 l_0_4_109)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x5043 (* ?x5034 l_0_4_108)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x5031 (* ?x5029 l_0_4_107)))
 (let ((?x5050 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_106) ?x5031) ?x5043) ?x5046) ?x5049)))
 (let ((?x6439 (- (- (+ (+ (+ (+ (+ ?x5050 ?x5060) ?x5063) ?x5066) ?x5069) ?x5074) ?x6437) ?x4024)))
 (= (+ (+ ?x6439 ?x4031) ?x4033) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4057 (* ?x3926 l_0_4_68)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4055 (* ?x3923 l_0_4_67)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4048 (* ?x4047 l_0_4_3)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6473 (* ?x3958 l_0_4_22)))
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6471 (* ?x5073 l_0_4_161)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6469 (* ?x5068 l_0_4_160)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6467 (* ?x5065 l_0_4_159)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6465 (* ?x5062 l_0_4_158)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6463 (* ?x5059 l_0_4_157)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6461 (* ?x5048 l_0_4_116)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6459 (* ?x5045 l_0_4_115)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6457 (* ?x5034 l_0_4_114)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6455 (* ?x5029 l_0_4_113)))
 (let ((?x6462 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_112) ?x6455) ?x6457) ?x6459) ?x6461)))
 (let ((?x6472 (+ (+ (+ (+ (+ ?x6462 ?x6463) ?x6465) ?x6467) ?x6469) ?x6471)))
 (= (+ (+ (- (- ?x6472 ?x6473) ?x4048) ?x4055) ?x4057) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4080 (* ?x3926 l_0_4_75)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4078 (* ?x3923 l_0_4_74)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4071 (* ?x3920 l_0_4_30)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6550 (* ?x3958 l_0_4_29)))
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6548 (* ?x5073 l_0_4_168)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6546 (* ?x5068 l_0_4_167)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6544 (* ?x5065 l_0_4_166)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6542 (* ?x5062 l_0_4_165)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6540 (* ?x5059 l_0_4_164)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6538 (* ?x5048 l_0_4_123)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6536 (* ?x5045 l_0_4_122)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6534 (* ?x5034 l_0_4_121)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6532 (* ?x5029 l_0_4_120)))
 (let ((?x6539 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_119) ?x6532) ?x6534) ?x6536) ?x6538)))
 (let ((?x6549 (+ (+ (+ (+ (+ ?x6539 ?x6540) ?x6542) ?x6544) ?x6546) ?x6548)))
 (= (+ (+ (- (- ?x6549 ?x6550) ?x4071) ?x4078) ?x4080) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4113 (* ?x3926 l_0_4_83)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4111 (* ?x3923 l_0_4_82)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4109 (* ?x3920 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4107 (* ?x3958 l_0_4_37)))
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6625 (* ?x5073 l_0_4_176)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6623 (* ?x5068 l_0_4_175)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6621 (* ?x5065 l_0_4_174)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6619 (* ?x5062 l_0_4_173)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6617 (* ?x5059 l_0_4_172)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6615 (* ?x5048 l_0_4_131)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6613 (* ?x5045 l_0_4_130)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6611 (* ?x5034 l_0_4_129)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6609 (* ?x5029 l_0_4_128)))
 (let ((?x6616 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_127) ?x6609) ?x6611) ?x6613) ?x6615)))
 (let ((?x6626 (+ (+ (+ (+ (+ ?x6616 ?x6617) ?x6619) ?x6621) ?x6623) ?x6625)))
 (= (+ (+ (- (- ?x6626 ?x4107) ?x4109) ?x4111) ?x4113) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x4160 (* l_0_4_6 l_0_4_6)))
 (let ((?x4158 (* l_0_4_51 l_0_4_51)))
 (let ((?x4156 (* l_0_4_50 l_0_4_50)))
 (let ((?x4154 (* l_0_4_5 l_0_4_5)))
 (let ((?x4157 (+ (- (+ (* (- l_0_4_4) l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4154) ?x4156)))
 (= (- (+ ?x4157 ?x4158) ?x4160) 0.0)))))))
(assert
 (let ((?x4190 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4187 (* ?x4186 l_0_4_54)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4184 (* ?x4183 l_0_4_53)))
 (let ((?x4181 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4178 (* ?x4177 l_0_4_52)))
 (let ((?x4188 (+ (+ (- (+ (* (* (- 2.0) l_0_4_4) l_0_4_7) ?x4178) ?x4181) ?x4184) ?x4187)))
 (= (- ?x4188 ?x4190) 0.0)))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4231 (* ?x4186 l_0_4_58)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4229 (* ?x4183 l_0_4_57)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4227 (* ?x4177 l_0_4_56)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4225 (* ?x4224 l_0_4_6)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4222 (* ?x4000 l_0_4_5)))
 (let ((?x4230 (+ (+ (- (- (* (* (- 2.0) l_0_4_11) l_0_4_4) ?x4222) ?x4225) ?x4227) ?x4229)))
 (= (+ ?x4230 ?x4231) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4266 (* ?x4186 l_0_4_63)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4264 (* ?x4183 l_0_4_62)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4262 (* ?x4177 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4254 (* ?x3637 l_0_4_6)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4251 (* ?x3634 l_0_4_5)))
 (let ((?x4265 (+ (+ (- (- (* (* (- 2.0) l_0_4_16) l_0_4_4) ?x4251) ?x4254) ?x4262) ?x4264)))
 (= (+ ?x4265 ?x4266) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4303 (* ?x4186 l_0_4_69)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4301 (* ?x4183 l_0_4_68)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4299 (* ?x4177 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4297 (* ?x4296 l_0_4_6)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4288 (* ?x4047 l_0_4_5)))
 (let ((?x4302 (+ (+ (- (- (* (* (- 2.0) l_0_4_22) l_0_4_4) ?x4288) ?x4297) ?x4299) ?x4301)))
 (= (+ ?x4302 ?x4303) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4341 (* ?x4186 l_0_4_76)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4339 (* ?x4183 l_0_4_75)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4337 (* ?x4177 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4335 (* ?x4334 l_0_4_6)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4326 (* ?x4325 l_0_4_5)))
 (let ((?x4340 (+ (+ (- (- (* (* (- 2.0) l_0_4_29) l_0_4_4) ?x4326) ?x4335) ?x4337) ?x4339)))
 (= (+ ?x4340 ?x4341) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4394 (* ?x4186 l_0_4_84)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4392 (* ?x4183 l_0_4_83)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4390 (* ?x4177 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4388 (* ?x4387 l_0_4_6)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4385 (* ?x4384 l_0_4_5)))
 (let ((?x6688 (+ (+ (- (- (* (* (- 2.0) l_0_4_37) l_0_4_4) ?x4385) ?x4388) ?x4390) ?x4392)))
 (= (+ ?x6688 ?x4394) 0.0)))))))))))))
(assert
 (let ((?x4462 (* l_0_4_9 l_0_4_9)))
 (let ((?x4460 (* l_0_4_8 l_0_4_8)))
 (let ((?x4458 (* l_0_4_7 l_0_4_7)))
 (let ((?x4456 (* l_0_4_55 l_0_4_55)))
 (let ((?x4454 (* l_0_4_54 l_0_4_54)))
 (let ((?x4452 (* l_0_4_53 l_0_4_53)))
 (let ((?x4455 (+ (+ (+ (* (- l_0_4_10) l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4452) ?x4454)))
 (= (- (- (- (+ ?x4455 ?x4456) ?x4458) ?x4460) ?x4462) 0.0)))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4504 (* ?x4503 l_0_4_59)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4501 (* ?x4500 l_0_4_58)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4498 (* ?x4497 l_0_4_57)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4495 (* ?x4494 l_0_4_56)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4486 (* ?x4224 l_0_4_9)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4484 (* ?x4000 l_0_4_8)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x4482 (* ?x4481 l_0_4_7)))
 (let ((?x4487 (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_14) ?x4482) ?x4484) ?x4486)))
 (= (+ (+ (+ (+ ?x4487 ?x4495) ?x4498) ?x4501) ?x4504) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4575 (* ?x4503 l_0_4_64)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4573 (* ?x4500 l_0_4_63)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4571 (* ?x4497 l_0_4_62)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4569 (* ?x4494 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4567 (* ?x3637 l_0_4_9)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4558 (* ?x3634 l_0_4_8)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x4554 (* ?x3627 l_0_4_7)))
 (let ((?x4570 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_19) ?x4554) ?x4558) ?x4567) ?x4569)))
 (= (+ (+ (+ ?x4570 ?x4571) ?x4573) ?x4575) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4623 (* ?x4503 l_0_4_70)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4621 (* ?x4500 l_0_4_69)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4619 (* ?x4497 l_0_4_68)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4617 (* ?x4494 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4615 (* ?x4296 l_0_4_9)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4606 (* ?x4047 l_0_4_8)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x4603 (* ?x4601 l_0_4_7)))
 (let ((?x4618 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_25) ?x4603) ?x4606) ?x4615) ?x4617)))
 (= (+ (+ (+ ?x4618 ?x4619) ?x4621) ?x4623) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4671 (* ?x4503 l_0_4_77)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4669 (* ?x4500 l_0_4_76)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4667 (* ?x4497 l_0_4_75)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4665 (* ?x4494 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4663 (* ?x4334 l_0_4_9)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4654 (* ?x4325 l_0_4_8)))
 (let ((?x4649 (* 2.0 l_0_4_29)))
 (let ((?x4651 (* ?x4649 l_0_4_7)))
 (let ((?x4666 (+ (- (- (- (* (* (- 2.0) l_0_4_10) l_0_4_32) ?x4651) ?x4654) ?x4663) ?x4665)))
 (= (+ (+ (+ ?x4666 ?x4667) ?x4669) ?x4671) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4739 (* ?x4503 l_0_4_85)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4737 (* ?x4500 l_0_4_84)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4735 (* ?x4497 l_0_4_83)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4733 (* ?x4494 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4731 (* ?x4387 l_0_4_9)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4729 (* ?x4384 l_0_4_8)))
 (let ((?x4381 (* 2.0 l_0_4_37)))
 (let ((?x4727 (* ?x4381 l_0_4_7)))
 (let ((?x4479 (* (- 2.0) l_0_4_10)))
 (let ((?x4695 (* ?x4479 l_0_4_40)))
 (let ((?x6713 (+ (+ (+ (+ (- (- (- ?x4695 ?x4727) ?x4729) ?x4731) ?x4733) ?x4735) ?x4737) ?x4739)))
 (= ?x6713 0.0)))))))))))))))))))
(assert
 (let ((?x4828 (* l_0_4_60 l_0_4_60)))
 (let ((?x4826 (* l_0_4_59 l_0_4_59)))
 (let ((?x4824 (* l_0_4_58 l_0_4_58)))
 (let ((?x4822 (* l_0_4_57 l_0_4_57)))
 (let ((?x4820 (* l_0_4_56 l_0_4_56)))
 (let ((?x4818 (* l_0_4_15 l_0_4_15)))
 (let ((?x4816 (* l_0_4_14 l_0_4_14)))
 (let ((?x4803 (* l_0_4_13 l_0_4_13)))
 (let ((?x4817 (- (- (- (* (- l_0_4_11) l_0_4_11) (* l_0_4_12 l_0_4_12)) ?x4803) ?x4816)))
 (= (+ (+ (+ (+ (+ (- ?x4817 ?x4818) ?x4820) ?x4822) ?x4824) ?x4826) ?x4828) 0.0)))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4877 (* ?x4876 l_0_4_65)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4874 (* ?x4873 l_0_4_64)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4871 (* ?x4870 l_0_4_63)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4868 (* ?x4867 l_0_4_62)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4865 (* ?x4864 l_0_4_61)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4862 (* ?x4861 l_0_4_20)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4859 (* ?x4858 l_0_4_19)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4856 (* ?x4224 l_0_4_18)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4854 (* ?x4000 l_0_4_17)))
 (let ((?x4863 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_16) ?x4854) ?x4856) ?x4859) ?x4862)))
 (= (+ (+ (+ (+ (+ ?x4863 ?x4865) ?x4868) ?x4871) ?x4874) ?x4877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4936 (* ?x4876 l_0_4_71)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4934 (* ?x4873 l_0_4_70)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4932 (* ?x4870 l_0_4_69)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4930 (* ?x4867 l_0_4_68)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4928 (* ?x4864 l_0_4_67)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4926 (* ?x4861 l_0_4_26)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4916 (* ?x4858 l_0_4_25)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4913 (* ?x4224 l_0_4_24)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4909 (* ?x4000 l_0_4_23)))
 (let ((?x4927 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_22) ?x4909) ?x4913) ?x4916) ?x4926)))
 (= (+ (+ (+ (+ (+ ?x4927 ?x4928) ?x4930) ?x4932) ?x4934) ?x4936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4995 (* ?x4876 l_0_4_78)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4993 (* ?x4873 l_0_4_77)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4991 (* ?x4870 l_0_4_76)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4989 (* ?x4867 l_0_4_75)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4987 (* ?x4864 l_0_4_74)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4985 (* ?x4861 l_0_4_33)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4975 (* ?x4858 l_0_4_32)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4972 (* ?x4224 l_0_4_31)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4968 (* ?x4000 l_0_4_30)))
 (let ((?x4986 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_29) ?x4968) ?x4972) ?x4975) ?x4985)))
 (= (+ (+ (+ (+ (+ ?x4986 ?x4987) ?x4989) ?x4991) ?x4993) ?x4995) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x5084 (* ?x4876 l_0_4_86)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x5082 (* ?x4873 l_0_4_85)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x5080 (* ?x4870 l_0_4_84)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x5078 (* ?x4867 l_0_4_83)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x5076 (* ?x4864 l_0_4_82)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x5071 (* ?x4861 l_0_4_41)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x5057 (* ?x4858 l_0_4_40)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x5055 (* ?x4224 l_0_4_39)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x5053 (* ?x4000 l_0_4_38)))
 (let ((?x6731 (- (- (- (- (* (* (- 2.0) l_0_4_11) l_0_4_37) ?x5053) ?x5055) ?x5057) ?x5071)))
 (= (+ (+ (+ (+ (+ ?x6731 ?x5076) ?x5078) ?x5080) ?x5082) ?x5084) 0.0)))))))))))))))))))))
(assert
 (let ((?x5193 (* l_0_4_66 l_0_4_66)))
 (let ((?x5191 (* l_0_4_65 l_0_4_65)))
 (let ((?x5189 (* l_0_4_64 l_0_4_64)))
 (let ((?x5187 (* l_0_4_63 l_0_4_63)))
 (let ((?x5185 (* l_0_4_62 l_0_4_62)))
 (let ((?x5183 (* l_0_4_61 l_0_4_61)))
 (let ((?x5181 (* l_0_4_21 l_0_4_21)))
 (let ((?x5179 (* l_0_4_20 l_0_4_20)))
 (let ((?x5164 (* l_0_4_19 l_0_4_19)))
 (let ((?x5161 (* l_0_4_18 l_0_4_18)))
 (let ((?x5178 (- (- (- (* (- l_0_4_16) l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5161) ?x5164)))
 (let ((?x5192 (+ (+ (+ (+ (+ (- (- ?x5178 ?x5179) ?x5181) ?x5183) ?x5185) ?x5187) ?x5189) ?x5191)))
 (= (+ ?x5192 ?x5193) 0.0))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5268 (* ?x3666 l_0_4_79)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5266 (* ?x3663 l_0_4_78)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5264 (* ?x3660 l_0_4_77)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5262 (* ?x3657 l_0_4_76)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5260 (* ?x3654 l_0_4_75)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5258 (* ?x3651 l_0_4_74)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5256 (* ?x3646 l_0_4_34)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5254 (* ?x3643 l_0_4_33)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5252 (* ?x3640 l_0_4_32)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5250 (* ?x3637 l_0_4_31)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5248 (* ?x3634 l_0_4_30)))
 (let ((?x5255 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_29) ?x5248) ?x5250) ?x5252) ?x5254)))
 (let ((?x5269 (+ (+ (+ (+ (+ (+ (- ?x5255 ?x5256) ?x5258) ?x5260) ?x5262) ?x5264) ?x5266) ?x5268)))
 (= ?x5269 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5364 (* ?x3666 l_0_4_87)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5362 (* ?x3663 l_0_4_86)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5360 (* ?x3660 l_0_4_85)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5358 (* ?x3657 l_0_4_84)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5356 (* ?x3654 l_0_4_83)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5354 (* ?x3651 l_0_4_82)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5352 (* ?x3646 l_0_4_42)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5350 (* ?x3643 l_0_4_41)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5348 (* ?x3640 l_0_4_40)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5346 (* ?x3637 l_0_4_39)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5344 (* ?x3634 l_0_4_38)))
 (let ((?x6757 (- (- (- (- (* (* (- 2.0) l_0_4_16) l_0_4_37) ?x5344) ?x5346) ?x5348) ?x5350)))
 (let ((?x6764 (+ (+ (+ (+ (+ (+ (- ?x6757 ?x5352) ?x5354) ?x5356) ?x5358) ?x5360) ?x5362) ?x5364)))
 (= ?x6764 0.0))))))))))))))))))))))))))
(assert
 (let ((?x5468 (* l_0_4_73 l_0_4_73)))
 (let ((?x5466 (* l_0_4_72 l_0_4_72)))
 (let ((?x5464 (* l_0_4_71 l_0_4_71)))
 (let ((?x5462 (* l_0_4_70 l_0_4_70)))
 (let ((?x5460 (* l_0_4_69 l_0_4_69)))
 (let ((?x5458 (* l_0_4_68 l_0_4_68)))
 (let ((?x5456 (* l_0_4_67 l_0_4_67)))
 (let ((?x5454 (* l_0_4_28 l_0_4_28)))
 (let ((?x5452 (* l_0_4_27 l_0_4_27)))
 (let ((?x5450 (* l_0_4_26 l_0_4_26)))
 (let ((?x5434 (* l_0_4_25 l_0_4_25)))
 (let ((?x5431 (* l_0_4_24 l_0_4_24)))
 (let ((?x5449 (- (- (- (* (- l_0_4_22) l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5431) ?x5434)))
 (let ((?x5463 (+ (+ (+ (+ (- (- (- ?x5449 ?x5450) ?x5452) ?x5454) ?x5456) ?x5458) ?x5460) ?x5462)))
 (= (+ (+ (+ ?x5463 ?x5464) ?x5466) ?x5468) 0.0))))))))))))))))
(assert
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5537 (* ?x5536 l_0_4_80)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5534 (* ?x5533 l_0_4_79)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5531 (* ?x5530 l_0_4_78)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5528 (* ?x5527 l_0_4_77)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5525 (* ?x5524 l_0_4_76)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5522 (* ?x5521 l_0_4_75)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5519 (* ?x5518 l_0_4_74)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5516 (* ?x5515 l_0_4_35)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5513 (* ?x5512 l_0_4_34)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5510 (* ?x5509 l_0_4_33)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5507 (* ?x5506 l_0_4_32)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5504 (* ?x4296 l_0_4_31)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5502 (* ?x4047 l_0_4_30)))
 (let ((?x5511 (- (- (- (- (* (* (- 2.0) l_0_4_22) l_0_4_29) ?x5502) ?x5504) ?x5507) ?x5510)))
 (let ((?x5532 (+ (+ (+ (+ (+ (- (- ?x5511 ?x5513) ?x5516) ?x5519) ?x5522) ?x5525) ?x5528) ?x5531)))
 (= (+ (+ ?x5532 ?x5534) ?x5537) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5621 (* ?x5536 l_0_4_88)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5619 (* ?x5533 l_0_4_87)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5617 (* ?x5530 l_0_4_86)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5615 (* ?x5527 l_0_4_85)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5613 (* ?x5524 l_0_4_84)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5611 (* ?x5521 l_0_4_83)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5609 (* ?x5518 l_0_4_82)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5607 (* ?x5515 l_0_4_43)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5605 (* ?x5512 l_0_4_42)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5603 (* ?x5509 l_0_4_41)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5591 (* ?x5506 l_0_4_40)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5587 (* ?x4296 l_0_4_39)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5583 (* ?x4047 l_0_4_38)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x5579 (* ?x4601 l_0_4_37)))
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x6211 (* ?x4724 l_0_4_149)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x6209 (* ?x4721 l_0_4_148)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x6207 (* ?x4718 l_0_4_147)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x6205 (* ?x4715 l_0_4_146)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6203 (* ?x5034 l_0_4_99)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6201 (* ?x5029 l_0_4_98)))
 (let ((?x6147 (* 2.0 l_0_4_101)))
 (let ((?x6199 (* ?x6147 l_0_4_97)))
 (let ((?x6350 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_104) ?x6199) ?x6201) ?x6203) ?x6205)))
 (let ((?x6353 (+ (+ (+ ?x6350 ?x6207) ?x6209) ?x6211)))
 (let ((?x6790 (- (- (- (- (- (- (- ?x6353 ?x5579) ?x5583) ?x5587) ?x5591) ?x5603) ?x5605) ?x5607)))
 (let ((?x6797 (+ (+ (+ (+ (+ (+ (+ ?x6790 ?x5609) ?x5611) ?x5613) ?x5615) ?x5617) ?x5619) ?x5621)))
 (= ?x6797 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5712 (* l_0_4_81 l_0_4_81)))
 (let ((?x5710 (* l_0_4_80 l_0_4_80)))
 (let ((?x5708 (* l_0_4_79 l_0_4_79)))
 (let ((?x5706 (* l_0_4_78 l_0_4_78)))
 (let ((?x5704 (* l_0_4_77 l_0_4_77)))
 (let ((?x5702 (* l_0_4_76 l_0_4_76)))
 (let ((?x5700 (* l_0_4_75 l_0_4_75)))
 (let ((?x5698 (* l_0_4_74 l_0_4_74)))
 (let ((?x5696 (* l_0_4_36 l_0_4_36)))
 (let ((?x5694 (* l_0_4_35 l_0_4_35)))
 (let ((?x5692 (* l_0_4_34 l_0_4_34)))
 (let ((?x5690 (* l_0_4_33 l_0_4_33)))
 (let ((?x5679 (* l_0_4_32 l_0_4_32)))
 (let ((?x5675 (* l_0_4_31 l_0_4_31)))
 (let ((?x5680 (- (- (- (* (- l_0_4_29) l_0_4_29) (* l_0_4_30 l_0_4_30)) ?x5675) ?x5679)))
 (let ((?x5703 (+ (+ (+ (- (- (- (- ?x5680 ?x5690) ?x5692) ?x5694) ?x5696) ?x5698) ?x5700) ?x5702)))
 (= (+ (+ (+ (+ (+ ?x5703 ?x5704) ?x5706) ?x5708) ?x5710) ?x5712) 0.0))))))))))))))))))
(assert
 (let ((?x5815 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5812 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5809 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5806 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5803 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5800 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5797 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5794 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5791 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5788 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5785 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5782 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5779 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x5776 (* ?x4334 l_0_4_39)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x5774 (* ?x4325 l_0_4_38)))
 (let ((?x6826 (- (- (- (- (* (* (- 2.0) l_0_4_29) l_0_4_37) ?x5774) ?x5776) ?x5779) ?x5782)))
 (let ((?x6833 (+ (+ (+ (+ (- (- (- ?x6826 ?x5785) ?x5788) ?x5791) ?x5794) ?x5797) ?x5800) ?x5803)))
 (= (+ (+ (+ (+ ?x6833 ?x5806) ?x5809) ?x5812) ?x5815) 0.0)))))))))))))))))))))
(assert
 (let ((?x5993 (* l_0_4_90 l_0_4_90)))
 (let ((?x5991 (* l_0_4_89 l_0_4_89)))
 (let ((?x5989 (* l_0_4_88 l_0_4_88)))
 (let ((?x5987 (* l_0_4_87 l_0_4_87)))
 (let ((?x5985 (* l_0_4_86 l_0_4_86)))
 (let ((?x5983 (* l_0_4_85 l_0_4_85)))
 (let ((?x5981 (* l_0_4_84 l_0_4_84)))
 (let ((?x5979 (* l_0_4_83 l_0_4_83)))
 (let ((?x5977 (* l_0_4_82 l_0_4_82)))
 (let ((?x5975 (* l_0_4_45 l_0_4_45)))
 (let ((?x5973 (* l_0_4_44 l_0_4_44)))
 (let ((?x5971 (* l_0_4_43 l_0_4_43)))
 (let ((?x5969 (* l_0_4_42 l_0_4_42)))
 (let ((?x5967 (* l_0_4_41 l_0_4_41)))
 (let ((?x5965 (* l_0_4_40 l_0_4_40)))
 (let ((?x5963 (* l_0_4_39 l_0_4_39)))
 (let ((?x6867 (- (- (- (* (- l_0_4_37) l_0_4_37) (* l_0_4_38 l_0_4_38)) ?x5963) ?x5965)))
 (let ((?x6874 (+ (+ (- (- (- (- (- ?x6867 ?x5967) ?x5969) ?x5971) ?x5973) ?x5975) ?x5977) ?x5979)))
 (let ((?x6881 (+ (+ (+ (+ (+ (+ (+ ?x6874 ?x5981) ?x5983) ?x5985) ?x5987) ?x5989) ?x5991) ?x5993)))
 (= ?x6881 0.0)))))))))))))))))))))
(assert
 (let ((?x3560 (* l_0_4_46 l_0_4_46)))
 (let ((?x6906 (- (+ (* l_0_4_1 l_0_4_1) (* (* 2.0 l_0_4_181) l_0_4_184)) (* (* 2.0 l_0_4_226) l_0_4_229))))
 (= (- ?x6906 ?x3560) 0.0))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3621 (* ?x3620 l_0_4_47)))
 (let ((?x6928 (+ (* (* 2.0 l_0_4_1) l_0_4_2) (* (* 2.0 l_0_4_182) l_0_4_184))))
 (let ((?x6934 (- (+ ?x6928 (* (* 2.0 l_0_4_183) l_0_4_185)) (* (* 2.0 l_0_4_227) l_0_4_229))))
 (= (- (- ?x6934 (* (* 2.0 l_0_4_228) l_0_4_230)) ?x3621) 0.0))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3649 (* ?x3620 l_0_4_49)))
 (let ((?x6975 (* l_0_4_231 l_0_4_231)))
 (let ((?x6973 (* l_0_4_230 l_0_4_230)))
 (let ((?x6971 (* l_0_4_229 l_0_4_229)))
 (let ((?x6964 (+ (* (* 2.0 l_0_4_1) l_0_4_4) (* 1.0 (* l_0_4_184 l_0_4_184)))))
 (let ((?x6970 (+ (+ ?x6964 (* 1.0 (* l_0_4_185 l_0_4_185))) (* 1.0 (* l_0_4_186 l_0_4_186)))))
 (= (- (- (- (- ?x6970 ?x6971) ?x6973) ?x6975) ?x3649) 0.0)))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3734 (* ?x3620 l_0_4_52)))
 (let ((?x6996 (+ (* (* 2.0 l_0_4_1) l_0_4_7) (* (* 2.0 l_0_4_184) l_0_4_187))))
 (let ((?x7002 (+ (+ ?x6996 (* (* 2.0 l_0_4_185) l_0_4_188)) (* (* 2.0 l_0_4_186) l_0_4_189))))
 (let ((?x7008 (- (- ?x7002 (* (* 2.0 l_0_4_229) l_0_4_232)) (* (* 2.0 l_0_4_230) l_0_4_233))))
 (= (- (- ?x7008 (* (* 2.0 l_0_4_231) l_0_4_234)) ?x3734) 0.0)))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3740 (* ?x3620 l_0_4_56)))
 (let ((?x7046 (+ (* (* 2.0 l_0_4_1) l_0_4_11) (* (* 2.0 l_0_4_184) l_0_4_191))))
 (let ((?x7050 (+ (+ ?x7046 (* (* 2.0 l_0_4_185) l_0_4_192)) (* (* 2.0 l_0_4_186) l_0_4_193))))
 (let ((?x7054 (- (- ?x7050 (* (* 2.0 l_0_4_229) l_0_4_236)) (* (* 2.0 l_0_4_230) l_0_4_237))))
 (= (- (- ?x7054 (* (* 2.0 l_0_4_231) l_0_4_238)) ?x3740) 0.0)))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3750 (* ?x3620 l_0_4_61)))
 (let ((?x7091 (+ (* (* 2.0 l_0_4_1) l_0_4_16) (* (* 2.0 l_0_4_184) l_0_4_196))))
 (let ((?x7095 (+ (+ ?x7091 (* (* 2.0 l_0_4_185) l_0_4_197)) (* (* 2.0 l_0_4_186) l_0_4_198))))
 (let ((?x7099 (- (- ?x7095 (* (* 2.0 l_0_4_229) l_0_4_241)) (* (* 2.0 l_0_4_230) l_0_4_242))))
 (= (- (- ?x7099 (* (* 2.0 l_0_4_231) l_0_4_243)) ?x3750) 0.0)))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3760 (* ?x3620 l_0_4_67)))
 (let ((?x7136 (+ (* (* 2.0 l_0_4_1) l_0_4_22) (* (* 2.0 l_0_4_184) l_0_4_202))))
 (let ((?x7140 (+ (+ ?x7136 (* (* 2.0 l_0_4_185) l_0_4_203)) (* (* 2.0 l_0_4_186) l_0_4_204))))
 (let ((?x7144 (- (- ?x7140 (* (* 2.0 l_0_4_229) l_0_4_247)) (* (* 2.0 l_0_4_230) l_0_4_248))))
 (= (- (- ?x7144 (* (* 2.0 l_0_4_231) l_0_4_249)) ?x3760) 0.0)))))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x7196 (* ?x7195 l_0_4_94)))
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3810 (* ?x3620 l_0_4_74)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x7180 (* ?x3878 l_0_4_139)))
 (let ((?x7183 (+ (- (* (* 2.0 l_0_4_1) l_0_4_29) ?x7180) (* (* 2.0 l_0_4_184) l_0_4_209))))
 (let ((?x7187 (+ (+ ?x7183 (* (* 2.0 l_0_4_185) l_0_4_210)) (* (* 2.0 l_0_4_186) l_0_4_211))))
 (let ((?x7191 (- (- ?x7187 (* (* 2.0 l_0_4_229) l_0_4_254)) (* (* 2.0 l_0_4_230) l_0_4_255))))
 (= (+ (- (- ?x7191 (* (* 2.0 l_0_4_231) l_0_4_256)) ?x3810) ?x7196) 0.0)))))))))))
(assert
 (let ((?x3620 (* 2.0 l_0_4_46)))
 (let ((?x3881 (* ?x3620 l_0_4_82)))
 (let ((?x7239 (+ (* (* 2.0 l_0_4_1) l_0_4_37) (* (* 2.0 l_0_4_184) l_0_4_217))))
 (let ((?x7243 (+ (+ ?x7239 (* (* 2.0 l_0_4_185) l_0_4_218)) (* (* 2.0 l_0_4_186) l_0_4_219))))
 (let ((?x7247 (- (- ?x7243 (* (* 2.0 l_0_4_229) l_0_4_262)) (* (* 2.0 l_0_4_230) l_0_4_263))))
 (= (- (- ?x7247 (* (* 2.0 l_0_4_231) l_0_4_264)) ?x3881) 0.0)))))))
(assert
 (let ((?x3905 (* l_0_4_48 l_0_4_48)))
 (let ((?x3903 (* l_0_4_47 l_0_4_47)))
 (= (- (- (+ (* l_0_4_2 l_0_4_2) (* l_0_4_3 l_0_4_3)) ?x3903) ?x3905) 0.0))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3927 (* ?x3926 l_0_4_50)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3924 (* ?x3923 l_0_4_49)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3921 (* ?x3920 l_0_4_5)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6305 (* ?x3958 l_0_4_4)))
 (= (- (- (+ ?x6305 ?x3921) ?x3924) ?x3927) 0.0))))))))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x7196 (* ?x7195 l_0_4_94)))
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x3965 (* ?x3926 l_0_4_53)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x3963 (* ?x3923 l_0_4_52)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x3961 (* ?x3920 l_0_4_8)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x3959 (* ?x3958 l_0_4_7)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x7180 (* ?x3878 l_0_4_139)))
 (= (- (- (- (+ (+ ?x7180 ?x3959) ?x3961) ?x3963) ?x3965) ?x7196) 0.0))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4009 (* ?x3926 l_0_4_57)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4007 (* ?x3923 l_0_4_56)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4005 (* ?x4000 l_0_4_3)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x6387 (* ?x4481 l_0_4_2)))
 (= (- (- (+ ?x6387 ?x4005) ?x4007) ?x4009) 0.0))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4033 (* ?x3926 l_0_4_62)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4031 (* ?x3923 l_0_4_61)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4024 (* ?x3634 l_0_4_3)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x6437 (* ?x3627 l_0_4_2)))
 (= (- (- (+ ?x6437 ?x4024) ?x4031) ?x4033) 0.0))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4057 (* ?x3926 l_0_4_68)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4055 (* ?x3923 l_0_4_67)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4048 (* ?x4047 l_0_4_3)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6473 (* ?x3958 l_0_4_22)))
 (= (- (- (+ ?x6473 ?x4048) ?x4055) ?x4057) 0.0))))))))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x7359 (* ?x7358 l_0_4_95)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x7356 (* ?x7355 l_0_4_94)))
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4080 (* ?x3926 l_0_4_75)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4078 (* ?x3923 l_0_4_74)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4071 (* ?x3920 l_0_4_30)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x6550 (* ?x3958 l_0_4_29)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x7349 (* ?x4104 l_0_4_140)))
 (let ((?x7353 (- (+ (+ (- (* (* (- 2.0) l_0_4_137) l_0_4_139) ?x7349) ?x6550) ?x4071) ?x4078)))
 (= (+ (+ (- ?x7353 ?x4080) ?x7356) ?x7359) 0.0)))))))))))))))))
(assert
 (let ((?x3926 (* 2.0 l_0_4_48)))
 (let ((?x4113 (* ?x3926 l_0_4_83)))
 (let ((?x3923 (* 2.0 l_0_4_47)))
 (let ((?x4111 (* ?x3923 l_0_4_82)))
 (let ((?x3920 (* 2.0 l_0_4_3)))
 (let ((?x4109 (* ?x3920 l_0_4_38)))
 (let ((?x3958 (* 2.0 l_0_4_2)))
 (let ((?x4107 (* ?x3958 l_0_4_37)))
 (= (- (- (+ ?x4107 ?x4109) ?x4111) ?x4113) 0.0))))))))))
(assert
 (let ((?x4160 (* l_0_4_6 l_0_4_6)))
 (let ((?x4158 (* l_0_4_51 l_0_4_51)))
 (let ((?x4156 (* l_0_4_50 l_0_4_50)))
 (let ((?x4154 (* l_0_4_5 l_0_4_5)))
 (let ((?x7397 (- (+ (- (* l_0_4_4 l_0_4_4) (* l_0_4_49 l_0_4_49)) ?x4154) ?x4156)))
 (= (+ (- ?x7397 ?x4158) ?x4160) 0.0)))))))
(assert
 (let ((?x4190 (* (* 2.0 l_0_4_6) l_0_4_9)))
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4187 (* ?x4186 l_0_4_54)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4184 (* ?x4183 l_0_4_53)))
 (let ((?x4181 (* (* 2.0 l_0_4_5) l_0_4_8)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4178 (* ?x4177 l_0_4_52)))
 (let ((?x7416 (- (- (+ (- (* (* 2.0 l_0_4_4) l_0_4_7) ?x4178) ?x4181) ?x4184) ?x4187)))
 (= (+ ?x7416 ?x4190) 0.0)))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4231 (* ?x4186 l_0_4_58)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4229 (* ?x4183 l_0_4_57)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4227 (* ?x4177 l_0_4_56)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4225 (* ?x4224 l_0_4_6)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4222 (* ?x4000 l_0_4_5)))
 (let ((?x7433 (- (- (+ (+ (* (* 2.0 l_0_4_11) l_0_4_4) ?x4222) ?x4225) ?x4227) ?x4229)))
 (= (- ?x7433 ?x4231) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4266 (* ?x4186 l_0_4_63)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4264 (* ?x4183 l_0_4_62)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4262 (* ?x4177 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4254 (* ?x3637 l_0_4_6)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4251 (* ?x3634 l_0_4_5)))
 (let ((?x7452 (- (- (+ (+ (* (* 2.0 l_0_4_16) l_0_4_4) ?x4251) ?x4254) ?x4262) ?x4264)))
 (= (- ?x7452 ?x4266) 0.0)))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4303 (* ?x4186 l_0_4_69)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4301 (* ?x4183 l_0_4_68)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4299 (* ?x4177 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4297 (* ?x4296 l_0_4_6)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4288 (* ?x4047 l_0_4_5)))
 (let ((?x7471 (- (- (+ (+ (* (* 2.0 l_0_4_22) l_0_4_4) ?x4288) ?x4297) ?x4299) ?x4301)))
 (= (- ?x7471 ?x4303) 0.0)))))))))))))
(assert
 (let ((?x7503 (* l_0_4_96 l_0_4_96)))
 (let ((?x7501 (* l_0_4_95 l_0_4_95)))
 (let ((?x7499 (* l_0_4_94 l_0_4_94)))
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4341 (* ?x4186 l_0_4_76)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4339 (* ?x4183 l_0_4_75)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4337 (* ?x4177 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4335 (* ?x4334 l_0_4_6)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4326 (* ?x4325 l_0_4_5)))
 (let ((?x7490 (* l_0_4_141 l_0_4_141)))
 (let ((?x7491 (- (- (* (- l_0_4_139) l_0_4_139) (* l_0_4_140 l_0_4_140)) ?x7490)))
 (let ((?x7496 (- (+ (+ (+ ?x7491 (* (* 2.0 l_0_4_29) l_0_4_4)) ?x4326) ?x4335) ?x4337)))
 (= (+ (+ (+ (- (- ?x7496 ?x4339) ?x4341) ?x7499) ?x7501) ?x7503) 0.0))))))))))))))))))
(assert
 (let ((?x4186 (* 2.0 l_0_4_51)))
 (let ((?x4394 (* ?x4186 l_0_4_84)))
 (let ((?x4183 (* 2.0 l_0_4_50)))
 (let ((?x4392 (* ?x4183 l_0_4_83)))
 (let ((?x4177 (* 2.0 l_0_4_49)))
 (let ((?x4390 (* ?x4177 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4388 (* ?x4387 l_0_4_6)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4385 (* ?x4384 l_0_4_5)))
 (let ((?x4381 (* 2.0 l_0_4_37)))
 (let ((?x4382 (* ?x4381 l_0_4_4)))
 (= (- (- (- (+ (+ ?x4382 ?x4385) ?x4388) ?x4390) ?x4392) ?x4394) 0.0))))))))))))))
(assert
 (let ((?x4462 (* l_0_4_9 l_0_4_9)))
 (let ((?x4460 (* l_0_4_8 l_0_4_8)))
 (let ((?x4458 (* l_0_4_7 l_0_4_7)))
 (let ((?x4456 (* l_0_4_55 l_0_4_55)))
 (let ((?x4454 (* l_0_4_54 l_0_4_54)))
 (let ((?x4452 (* l_0_4_53 l_0_4_53)))
 (let ((?x7547 (- (- (- (* l_0_4_10 l_0_4_10) (* l_0_4_52 l_0_4_52)) ?x4452) ?x4454)))
 (= (+ (+ (+ (- ?x7547 ?x4456) ?x4458) ?x4460) ?x4462) 0.0)))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4575 (* ?x4503 l_0_4_64)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4573 (* ?x4500 l_0_4_63)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4571 (* ?x4497 l_0_4_62)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4569 (* ?x4494 l_0_4_61)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x4567 (* ?x3637 l_0_4_9)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x4558 (* ?x3634 l_0_4_8)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x4554 (* ?x3627 l_0_4_7)))
 (let ((?x7569 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_19) ?x4554) ?x4558) ?x4567) ?x4569)))
 (= (- (- (- ?x7569 ?x4571) ?x4573) ?x4575) 0.0)))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4623 (* ?x4503 l_0_4_70)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4621 (* ?x4500 l_0_4_69)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4619 (* ?x4497 l_0_4_68)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4617 (* ?x4494 l_0_4_67)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x4615 (* ?x4296 l_0_4_9)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x4606 (* ?x4047 l_0_4_8)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x4603 (* ?x4601 l_0_4_7)))
 (let ((?x7594 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_25) ?x4603) ?x4606) ?x4615) ?x4617)))
 (= (- (- (- ?x7594 ?x4619) ?x4621) ?x4623) 0.0)))))))))))))))))
(assert
 (let ((?x7636 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x7633 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x7630 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4671 (* ?x4503 l_0_4_77)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4669 (* ?x4500 l_0_4_76)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4667 (* ?x4497 l_0_4_75)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4665 (* ?x4494 l_0_4_74)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x4663 (* ?x4334 l_0_4_9)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x4654 (* ?x4325 l_0_4_8)))
 (let ((?x4649 (* 2.0 l_0_4_29)))
 (let ((?x4651 (* ?x4649 l_0_4_7)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x7620 (* ?x4378 l_0_4_144)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x7618 (* ?x4375 l_0_4_143)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x7616 (* ?x4372 l_0_4_142)))
 (let ((?x7622 (+ (- (- (- (* (* 2.0 l_0_4_10) l_0_4_32) ?x7616) ?x7618) ?x7620) ?x4651)))
 (let ((?x7631 (+ (- (- (- (- (+ (+ ?x7622 ?x4654) ?x4663) ?x4665) ?x4667) ?x4669) ?x4671) ?x7630)))
 (= (+ (+ ?x7631 ?x7633) ?x7636) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x4503 (* 2.0 l_0_4_55)))
 (let ((?x4739 (* ?x4503 l_0_4_85)))
 (let ((?x4500 (* 2.0 l_0_4_54)))
 (let ((?x4737 (* ?x4500 l_0_4_84)))
 (let ((?x4497 (* 2.0 l_0_4_53)))
 (let ((?x4735 (* ?x4497 l_0_4_83)))
 (let ((?x4494 (* 2.0 l_0_4_52)))
 (let ((?x4733 (* ?x4494 l_0_4_82)))
 (let ((?x4387 (* 2.0 l_0_4_39)))
 (let ((?x4731 (* ?x4387 l_0_4_9)))
 (let ((?x4384 (* 2.0 l_0_4_38)))
 (let ((?x4729 (* ?x4384 l_0_4_8)))
 (let ((?x4381 (* 2.0 l_0_4_37)))
 (let ((?x4727 (* ?x4381 l_0_4_7)))
 (let ((?x7686 (- (+ (+ (+ (* (* 2.0 l_0_4_10) l_0_4_40) ?x4727) ?x4729) ?x4731) ?x4733)))
 (= (- (- (- ?x7686 ?x4735) ?x4737) ?x4739) 0.0)))))))))))))))))
(assert
 (let ((?x4828 (* l_0_4_60 l_0_4_60)))
 (let ((?x4826 (* l_0_4_59 l_0_4_59)))
 (let ((?x4824 (* l_0_4_58 l_0_4_58)))
 (let ((?x4822 (* l_0_4_57 l_0_4_57)))
 (let ((?x4820 (* l_0_4_56 l_0_4_56)))
 (let ((?x4818 (* l_0_4_15 l_0_4_15)))
 (let ((?x4816 (* l_0_4_14 l_0_4_14)))
 (let ((?x4803 (* l_0_4_13 l_0_4_13)))
 (let ((?x7705 (+ (+ (+ (* l_0_4_11 l_0_4_11) (* l_0_4_12 l_0_4_12)) ?x4803) ?x4816)))
 (= (- (- (- (- (- (+ ?x7705 ?x4818) ?x4820) ?x4822) ?x4824) ?x4826) ?x4828) 0.0)))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4877 (* ?x4876 l_0_4_65)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4874 (* ?x4873 l_0_4_64)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4871 (* ?x4870 l_0_4_63)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4868 (* ?x4867 l_0_4_62)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4865 (* ?x4864 l_0_4_61)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4862 (* ?x4861 l_0_4_20)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4859 (* ?x4858 l_0_4_19)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4856 (* ?x4224 l_0_4_18)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4854 (* ?x4000 l_0_4_17)))
 (let ((?x7727 (+ (+ (+ (+ (* (* 2.0 l_0_4_11) l_0_4_16) ?x4854) ?x4856) ?x4859) ?x4862)))
 (= (- (- (- (- (- ?x7727 ?x4865) ?x4868) ?x4871) ?x4874) ?x4877) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4936 (* ?x4876 l_0_4_71)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4934 (* ?x4873 l_0_4_70)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4932 (* ?x4870 l_0_4_69)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4930 (* ?x4867 l_0_4_68)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4928 (* ?x4864 l_0_4_67)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4926 (* ?x4861 l_0_4_26)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4916 (* ?x4858 l_0_4_25)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4913 (* ?x4224 l_0_4_24)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4909 (* ?x4000 l_0_4_23)))
 (let ((?x7758 (+ (+ (+ (+ (* (* 2.0 l_0_4_11) l_0_4_22) ?x4909) ?x4913) ?x4916) ?x4926)))
 (= (- (- (- (- (- ?x7758 ?x4928) ?x4930) ?x4932) ?x4934) ?x4936) 0.0)))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x4995 (* ?x4876 l_0_4_78)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x4993 (* ?x4873 l_0_4_77)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x4991 (* ?x4870 l_0_4_76)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x4989 (* ?x4867 l_0_4_75)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x4987 (* ?x4864 l_0_4_74)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x4985 (* ?x4861 l_0_4_33)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x6303 (* ?x4378 l_0_4_148)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x6301 (* ?x4375 l_0_4_147)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x4975 (* ?x4858 l_0_4_32)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x6299 (* ?x4372 l_0_4_146)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x4972 (* ?x4224 l_0_4_31)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x4968 (* ?x4000 l_0_4_30)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6297 (* ?x5034 l_0_4_96)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6295 (* ?x5029 l_0_4_95)))
 (let ((?x7789 (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_94) ?x6295) ?x6297) (* (* 2.0 l_0_4_11) l_0_4_29))))
 (let ((?x7796 (+ (- (- (+ (- (+ (+ ?x7789 ?x4968) ?x4972) ?x6299) ?x4975) ?x6301) ?x6303) ?x4985)))
 (= (- (- (- (- (- ?x7796 ?x4987) ?x4989) ?x4991) ?x4993) ?x4995) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x4876 (* 2.0 l_0_4_60)))
 (let ((?x5084 (* ?x4876 l_0_4_86)))
 (let ((?x4873 (* 2.0 l_0_4_59)))
 (let ((?x5082 (* ?x4873 l_0_4_85)))
 (let ((?x4870 (* 2.0 l_0_4_58)))
 (let ((?x5080 (* ?x4870 l_0_4_84)))
 (let ((?x4867 (* 2.0 l_0_4_57)))
 (let ((?x5078 (* ?x4867 l_0_4_83)))
 (let ((?x4864 (* 2.0 l_0_4_56)))
 (let ((?x5076 (* ?x4864 l_0_4_82)))
 (let ((?x4861 (* 2.0 l_0_4_15)))
 (let ((?x5071 (* ?x4861 l_0_4_41)))
 (let ((?x4858 (* 2.0 l_0_4_14)))
 (let ((?x5057 (* ?x4858 l_0_4_40)))
 (let ((?x4224 (* 2.0 l_0_4_13)))
 (let ((?x5055 (* ?x4224 l_0_4_39)))
 (let ((?x4000 (* 2.0 l_0_4_12)))
 (let ((?x5053 (* ?x4000 l_0_4_38)))
 (let ((?x4481 (* 2.0 l_0_4_11)))
 (let ((?x5051 (* ?x4481 l_0_4_37)))
 (let ((?x7842 (- (- (- (+ (+ (+ (+ ?x5051 ?x5053) ?x5055) ?x5057) ?x5071) ?x5076) ?x5078) ?x5080)))
 (= (- (- ?x7842 ?x5082) ?x5084) 0.0)))))))))))))))))))))))
(assert
 (let ((?x5193 (* l_0_4_66 l_0_4_66)))
 (let ((?x5191 (* l_0_4_65 l_0_4_65)))
 (let ((?x5189 (* l_0_4_64 l_0_4_64)))
 (let ((?x5187 (* l_0_4_63 l_0_4_63)))
 (let ((?x5185 (* l_0_4_62 l_0_4_62)))
 (let ((?x5183 (* l_0_4_61 l_0_4_61)))
 (let ((?x5181 (* l_0_4_21 l_0_4_21)))
 (let ((?x5179 (* l_0_4_20 l_0_4_20)))
 (let ((?x5164 (* l_0_4_19 l_0_4_19)))
 (let ((?x5161 (* l_0_4_18 l_0_4_18)))
 (let ((?x7863 (+ (+ (+ (* l_0_4_16 l_0_4_16) (* l_0_4_17 l_0_4_17)) ?x5161) ?x5164)))
 (let ((?x7870 (- (- (- (- (- (+ (+ ?x7863 ?x5179) ?x5181) ?x5183) ?x5185) ?x5187) ?x5189) ?x5191)))
 (= (- ?x7870 ?x5193) 0.0))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5268 (* ?x3666 l_0_4_79)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5266 (* ?x3663 l_0_4_78)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5264 (* ?x3660 l_0_4_77)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5262 (* ?x3657 l_0_4_76)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5260 (* ?x3654 l_0_4_75)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5258 (* ?x3651 l_0_4_74)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5256 (* ?x3646 l_0_4_34)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5254 (* ?x3643 l_0_4_33)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5252 (* ?x3640 l_0_4_32)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5250 (* ?x3637 l_0_4_31)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5248 (* ?x3634 l_0_4_30)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x4379 (* ?x4378 l_0_4_153)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x4376 (* ?x4375 l_0_4_152)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x4373 (* ?x4372 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4364 (* ?x3780 l_0_4_96)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4361 (* ?x3777 l_0_4_95)))
 (let ((?x7889 (- (- (+ (+ (* (* 2.0 l_0_4_106) l_0_4_94) ?x4361) ?x4364) ?x4373) ?x4376)))
 (let ((?x7894 (+ (+ (+ (- ?x7889 ?x4379) (* (* 2.0 l_0_4_16) l_0_4_29)) ?x5248) ?x5250)))
 (let ((?x7901 (- (- (- (- (+ (+ (+ ?x7894 ?x5252) ?x5254) ?x5256) ?x5258) ?x5260) ?x5262) ?x5264)))
 (= (- (- ?x7901 ?x5266) ?x5268) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3666 (* 2.0 l_0_4_66)))
 (let ((?x5364 (* ?x3666 l_0_4_87)))
 (let ((?x3663 (* 2.0 l_0_4_65)))
 (let ((?x5362 (* ?x3663 l_0_4_86)))
 (let ((?x3660 (* 2.0 l_0_4_64)))
 (let ((?x5360 (* ?x3660 l_0_4_85)))
 (let ((?x3657 (* 2.0 l_0_4_63)))
 (let ((?x5358 (* ?x3657 l_0_4_84)))
 (let ((?x3654 (* 2.0 l_0_4_62)))
 (let ((?x5356 (* ?x3654 l_0_4_83)))
 (let ((?x3651 (* 2.0 l_0_4_61)))
 (let ((?x5354 (* ?x3651 l_0_4_82)))
 (let ((?x3646 (* 2.0 l_0_4_21)))
 (let ((?x5352 (* ?x3646 l_0_4_42)))
 (let ((?x3643 (* 2.0 l_0_4_20)))
 (let ((?x5350 (* ?x3643 l_0_4_41)))
 (let ((?x3640 (* 2.0 l_0_4_19)))
 (let ((?x5348 (* ?x3640 l_0_4_40)))
 (let ((?x3637 (* 2.0 l_0_4_18)))
 (let ((?x5346 (* ?x3637 l_0_4_39)))
 (let ((?x3634 (* 2.0 l_0_4_17)))
 (let ((?x5344 (* ?x3634 l_0_4_38)))
 (let ((?x3627 (* 2.0 l_0_4_16)))
 (let ((?x5342 (* ?x3627 l_0_4_37)))
 (let ((?x7947 (- (- (+ (+ (+ (+ (+ ?x5342 ?x5344) ?x5346) ?x5348) ?x5350) ?x5352) ?x5354) ?x5356)))
 (= (- (- (- (- ?x7947 ?x5358) ?x5360) ?x5362) ?x5364) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x5468 (* l_0_4_73 l_0_4_73)))
 (let ((?x5466 (* l_0_4_72 l_0_4_72)))
 (let ((?x5464 (* l_0_4_71 l_0_4_71)))
 (let ((?x5462 (* l_0_4_70 l_0_4_70)))
 (let ((?x5460 (* l_0_4_69 l_0_4_69)))
 (let ((?x5458 (* l_0_4_68 l_0_4_68)))
 (let ((?x5456 (* l_0_4_67 l_0_4_67)))
 (let ((?x5454 (* l_0_4_28 l_0_4_28)))
 (let ((?x5452 (* l_0_4_27 l_0_4_27)))
 (let ((?x5450 (* l_0_4_26 l_0_4_26)))
 (let ((?x5434 (* l_0_4_25 l_0_4_25)))
 (let ((?x5431 (* l_0_4_24 l_0_4_24)))
 (let ((?x7973 (+ (+ (+ (* l_0_4_22 l_0_4_22) (* l_0_4_23 l_0_4_23)) ?x5431) ?x5434)))
 (let ((?x7980 (- (- (- (- (+ (+ (+ ?x7973 ?x5450) ?x5452) ?x5454) ?x5456) ?x5458) ?x5460) ?x5462)))
 (= (- (- (- ?x7980 ?x5464) ?x5466) ?x5468) 0.0))))))))))))))))
(assert
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5537 (* ?x5536 l_0_4_80)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5534 (* ?x5533 l_0_4_79)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5531 (* ?x5530 l_0_4_78)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5528 (* ?x5527 l_0_4_77)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5525 (* ?x5524 l_0_4_76)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5522 (* ?x5521 l_0_4_75)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5519 (* ?x5518 l_0_4_74)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5516 (* ?x5515 l_0_4_35)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5513 (* ?x5512 l_0_4_34)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5510 (* ?x5509 l_0_4_33)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5507 (* ?x5506 l_0_4_32)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5504 (* ?x4296 l_0_4_31)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5502 (* ?x4047 l_0_4_30)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8011 (* ?x4378 l_0_4_159)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8009 (* ?x4375 l_0_4_158)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8007 (* ?x4372 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8005 (* ?x8004 l_0_4_96)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8002 (* ?x8001 l_0_4_95)))
 (let ((?x8010 (- (- (+ (+ (* (* 2.0 l_0_4_112) l_0_4_94) ?x8002) ?x8005) ?x8007) ?x8009)))
 (let ((?x8016 (+ (+ (+ (- ?x8010 ?x8011) (* (* 2.0 l_0_4_22) l_0_4_29)) ?x5502) ?x5504)))
 (let ((?x8023 (- (- (- (+ (+ (+ (+ ?x8016 ?x5507) ?x5510) ?x5513) ?x5516) ?x5519) ?x5522) ?x5525)))
 (= (- (- (- (- ?x8023 ?x5528) ?x5531) ?x5534) ?x5537) 0.0)))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x7196 (* ?x7195 l_0_4_94)))
 (let ((?x5536 (* 2.0 l_0_4_73)))
 (let ((?x5621 (* ?x5536 l_0_4_88)))
 (let ((?x5533 (* 2.0 l_0_4_72)))
 (let ((?x5619 (* ?x5533 l_0_4_87)))
 (let ((?x5530 (* 2.0 l_0_4_71)))
 (let ((?x5617 (* ?x5530 l_0_4_86)))
 (let ((?x5527 (* 2.0 l_0_4_70)))
 (let ((?x5615 (* ?x5527 l_0_4_85)))
 (let ((?x5524 (* 2.0 l_0_4_69)))
 (let ((?x5613 (* ?x5524 l_0_4_84)))
 (let ((?x5521 (* 2.0 l_0_4_68)))
 (let ((?x5611 (* ?x5521 l_0_4_83)))
 (let ((?x5518 (* 2.0 l_0_4_67)))
 (let ((?x5609 (* ?x5518 l_0_4_82)))
 (let ((?x5515 (* 2.0 l_0_4_28)))
 (let ((?x5607 (* ?x5515 l_0_4_43)))
 (let ((?x5512 (* 2.0 l_0_4_27)))
 (let ((?x5605 (* ?x5512 l_0_4_42)))
 (let ((?x5509 (* 2.0 l_0_4_26)))
 (let ((?x5603 (* ?x5509 l_0_4_41)))
 (let ((?x5506 (* 2.0 l_0_4_25)))
 (let ((?x5591 (* ?x5506 l_0_4_40)))
 (let ((?x4296 (* 2.0 l_0_4_24)))
 (let ((?x5587 (* ?x4296 l_0_4_39)))
 (let ((?x4047 (* 2.0 l_0_4_23)))
 (let ((?x5583 (* ?x4047 l_0_4_38)))
 (let ((?x4601 (* 2.0 l_0_4_22)))
 (let ((?x5579 (* ?x4601 l_0_4_37)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x7180 (* ?x3878 l_0_4_139)))
 (let ((?x8090 (+ (+ (+ (+ (+ (+ (+ ?x7180 ?x5579) ?x5583) ?x5587) ?x5591) ?x5603) ?x5605) ?x5607)))
 (let ((?x8097 (- (- (- (- (- (- (- ?x8090 ?x5609) ?x5611) ?x5613) ?x5615) ?x5617) ?x5619) ?x5621)))
 (= (- ?x8097 ?x7196) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5712 (* l_0_4_81 l_0_4_81)))
 (let ((?x5710 (* l_0_4_80 l_0_4_80)))
 (let ((?x5708 (* l_0_4_79 l_0_4_79)))
 (let ((?x5706 (* l_0_4_78 l_0_4_78)))
 (let ((?x5704 (* l_0_4_77 l_0_4_77)))
 (let ((?x5702 (* l_0_4_76 l_0_4_76)))
 (let ((?x5700 (* l_0_4_75 l_0_4_75)))
 (let ((?x5698 (* l_0_4_74 l_0_4_74)))
 (let ((?x5696 (* l_0_4_36 l_0_4_36)))
 (let ((?x5694 (* l_0_4_35 l_0_4_35)))
 (let ((?x5692 (* l_0_4_34 l_0_4_34)))
 (let ((?x5690 (* l_0_4_33 l_0_4_33)))
 (let ((?x5679 (* l_0_4_32 l_0_4_32)))
 (let ((?x5675 (* l_0_4_31 l_0_4_31)))
 (let ((?x5671 (* l_0_4_30 l_0_4_30)))
 (let ((?x5716 (* l_0_4_29 l_0_4_29)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8137 (* ?x4378 l_0_4_166)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8135 (* ?x4375 l_0_4_165)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8133 (* ?x4372 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8131 (* ?x8130 l_0_4_96)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8128 (* ?x8127 l_0_4_95)))
 (let ((?x8136 (- (- (+ (+ (* (* 2.0 l_0_4_119) l_0_4_94) ?x8128) ?x8131) ?x8133) ?x8135)))
 (let ((?x8144 (+ (+ (+ (+ (+ (+ (- ?x8136 ?x8137) ?x5716) ?x5671) ?x5675) ?x5679) ?x5690) ?x5692)))
 (let ((?x8151 (- (- (- (- (- (+ (+ ?x8144 ?x5694) ?x5696) ?x5698) ?x5700) ?x5702) ?x5704) ?x5706)))
 (= (- (- (- ?x8151 ?x5708) ?x5710) ?x5712) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x5815 (* (* 2.0 l_0_4_81) l_0_4_89)))
 (let ((?x5812 (* (* 2.0 l_0_4_80) l_0_4_88)))
 (let ((?x5809 (* (* 2.0 l_0_4_79) l_0_4_87)))
 (let ((?x5806 (* (* 2.0 l_0_4_78) l_0_4_86)))
 (let ((?x5803 (* (* 2.0 l_0_4_77) l_0_4_85)))
 (let ((?x5800 (* (* 2.0 l_0_4_76) l_0_4_84)))
 (let ((?x5797 (* (* 2.0 l_0_4_75) l_0_4_83)))
 (let ((?x5794 (* (* 2.0 l_0_4_74) l_0_4_82)))
 (let ((?x5791 (* (* 2.0 l_0_4_36) l_0_4_44)))
 (let ((?x5788 (* (* 2.0 l_0_4_35) l_0_4_43)))
 (let ((?x5785 (* (* 2.0 l_0_4_34) l_0_4_42)))
 (let ((?x5782 (* (* 2.0 l_0_4_33) l_0_4_41)))
 (let ((?x5779 (* (* 2.0 l_0_4_32) l_0_4_40)))
 (let ((?x4334 (* 2.0 l_0_4_31)))
 (let ((?x5776 (* ?x4334 l_0_4_39)))
 (let ((?x4325 (* 2.0 l_0_4_30)))
 (let ((?x5774 (* ?x4325 l_0_4_38)))
 (let ((?x4649 (* 2.0 l_0_4_29)))
 (let ((?x5772 (* ?x4649 l_0_4_37)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8211 (* ?x4378 l_0_4_174)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8209 (* ?x4375 l_0_4_173)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8207 (* ?x4372 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8205 (* ?x8204 l_0_4_96)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8202 (* ?x8201 l_0_4_95)))
 (let ((?x8210 (- (- (+ (+ (* (* 2.0 l_0_4_127) l_0_4_94) ?x8202) ?x8205) ?x8207) ?x8209)))
 (let ((?x8218 (+ (+ (+ (+ (+ (+ (- ?x8210 ?x8211) ?x5772) ?x5774) ?x5776) ?x5779) ?x5782) ?x5785)))
 (let ((?x8225 (- (- (- (- (- (+ (+ ?x8218 ?x5788) ?x5791) ?x5794) ?x5797) ?x5800) ?x5803) ?x5806)))
 (= (- (- (- ?x8225 ?x5809) ?x5812) ?x5815) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x5993 (* l_0_4_90 l_0_4_90)))
 (let ((?x5991 (* l_0_4_89 l_0_4_89)))
 (let ((?x5989 (* l_0_4_88 l_0_4_88)))
 (let ((?x5987 (* l_0_4_87 l_0_4_87)))
 (let ((?x5985 (* l_0_4_86 l_0_4_86)))
 (let ((?x5983 (* l_0_4_85 l_0_4_85)))
 (let ((?x5981 (* l_0_4_84 l_0_4_84)))
 (let ((?x5979 (* l_0_4_83 l_0_4_83)))
 (let ((?x5977 (* l_0_4_82 l_0_4_82)))
 (let ((?x5975 (* l_0_4_45 l_0_4_45)))
 (let ((?x5973 (* l_0_4_44 l_0_4_44)))
 (let ((?x5971 (* l_0_4_43 l_0_4_43)))
 (let ((?x5969 (* l_0_4_42 l_0_4_42)))
 (let ((?x5967 (* l_0_4_41 l_0_4_41)))
 (let ((?x5965 (* l_0_4_40 l_0_4_40)))
 (let ((?x5963 (* l_0_4_39 l_0_4_39)))
 (let ((?x8283 (+ (+ (+ (* l_0_4_37 l_0_4_37) (* l_0_4_38 l_0_4_38)) ?x5963) ?x5965)))
 (let ((?x8290 (- (- (+ (+ (+ (+ (+ ?x8283 ?x5967) ?x5969) ?x5971) ?x5973) ?x5975) ?x5977) ?x5979)))
 (let ((?x8297 (- (- (- (- (- (- (- ?x8290 ?x5981) ?x5983) ?x5985) ?x5987) ?x5989) ?x5991) ?x5993)))
 (= ?x8297 0.0)))))))))))))))))))))
(assert
 (let ((?x8326 (* l_0_4_91 l_0_4_91)))
 (let ((?x8321 (+ (+ (* l_0_4_136 l_0_4_136) (* (* 2.0 l_0_4_182) l_0_4_187)) (* (* 2.0 l_0_4_183) l_0_4_188))))
 (let ((?x8325 (- (- ?x8321 (* (* 2.0 l_0_4_227) l_0_4_232)) (* (* 2.0 l_0_4_228) l_0_4_233))))
 (= (- ?x8325 ?x8326) 0.0)))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8351 (* ?x7195 l_0_4_92)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_137) ?x8351) 0.0))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8364 (* ?x7195 l_0_4_97)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_142) ?x8364) 0.0))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x3879 (* ?x3878 l_0_4_151)))
 (= (+ (* (* (- 2.0) l_0_4_106) l_0_4_91) ?x3879) 0.0))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8384 (* ?x3878 l_0_4_157)))
 (= (+ (* (* (- 2.0) l_0_4_112) l_0_4_91) ?x8384) 0.0))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x8403 (* ?x7358 l_0_4_98)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x8401 (* ?x7355 l_0_4_97)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8399 (* ?x4104 l_0_4_143)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8397 (* ?x4101 l_0_4_142)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8391 (* ?x3878 l_0_4_164)))
 (let ((?x8402 (+ (- (- (+ (* (* (- 2.0) l_0_4_119) l_0_4_91) ?x8391) ?x8397) ?x8399) ?x8401)))
 (= (+ ?x8402 ?x8403) 0.0)))))))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8427 (* ?x3878 l_0_4_172)))
 (= (+ (* (* (- 2.0) l_0_4_127) l_0_4_91) ?x8427) 0.0))))
(assert
 (let ((?x8447 (* l_0_4_93 l_0_4_93)))
 (let ((?x8445 (* l_0_4_92 l_0_4_92)))
 (let ((?x8439 (* l_0_4_138 l_0_4_138)))
 (let ((?x8437 (* l_0_4_137 l_0_4_137)))
 (let ((?x8440 (+ ?x8437 ?x8439)))
 (= (- (- ?x8440 ?x8445) ?x8447) 0.0)))))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x7359 (* ?x7358 l_0_4_95)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x7356 (* ?x7355 l_0_4_94)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x7349 (* ?x4104 l_0_4_140)))
 (= (- (- (+ (* (* 2.0 l_0_4_137) l_0_4_139) ?x7349) ?x7356) ?x7359) 0.0))))))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x8403 (* ?x7358 l_0_4_98)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x8401 (* ?x7355 l_0_4_97)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8399 (* ?x4104 l_0_4_143)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8397 (* ?x4101 l_0_4_142)))
 (= (- (- (+ ?x8397 ?x8399) ?x8401) ?x8403) 0.0))))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x4105 (* ?x4104 l_0_4_152)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x4102 (* ?x4101 l_0_4_151)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4094 (* ?x3777 l_0_4_93)))
 (let ((?x4106 (+ (+ (- (* (* (- 2.0) l_0_4_106) l_0_4_92) ?x4094) ?x4102) ?x4105)))
 (= ?x4106 0.0)))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8495 (* ?x4104 l_0_4_158)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8493 (* ?x4101 l_0_4_157)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8491 (* ?x8001 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_112) l_0_4_92) ?x8491) ?x8493) ?x8495) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8518 (* ?x4104 l_0_4_165)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8516 (* ?x4101 l_0_4_164)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8509 (* ?x8127 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_119) l_0_4_92) ?x8509) ?x8516) ?x8518) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8541 (* ?x4104 l_0_4_173)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8539 (* ?x4101 l_0_4_172)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8532 (* ?x8201 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_127) l_0_4_92) ?x8532) ?x8539) ?x8541) 0.0))))))))
(assert
 (let ((?x7503 (* l_0_4_96 l_0_4_96)))
 (let ((?x7501 (* l_0_4_95 l_0_4_95)))
 (let ((?x7499 (* l_0_4_94 l_0_4_94)))
 (let ((?x7490 (* l_0_4_141 l_0_4_141)))
 (let ((?x8556 (- (+ (+ (* l_0_4_139 l_0_4_139) (* l_0_4_140 l_0_4_140)) ?x7490) ?x7499)))
 (= (- (- ?x8556 ?x7501) ?x7503) 0.0)))))))
(assert
 (let ((?x7636 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x7633 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x7630 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x7620 (* ?x4378 l_0_4_144)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x7618 (* ?x4375 l_0_4_143)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x7616 (* ?x4372 l_0_4_142)))
 (= (- (- (- (+ (+ ?x7616 ?x7618) ?x7620) ?x7630) ?x7633) ?x7636) 0.0)))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x4379 (* ?x4378 l_0_4_153)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x4376 (* ?x4375 l_0_4_152)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x4373 (* ?x4372 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4364 (* ?x3780 l_0_4_96)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4361 (* ?x3777 l_0_4_95)))
 (let ((?x4377 (+ (+ (- (- (* (* (- 2.0) l_0_4_106) l_0_4_94) ?x4361) ?x4364) ?x4373) ?x4376)))
 (let ((?x4380 (+ ?x4377 ?x4379)))
 (= ?x4380 0.0))))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8011 (* ?x4378 l_0_4_159)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8009 (* ?x4375 l_0_4_158)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8007 (* ?x4372 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8005 (* ?x8004 l_0_4_96)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8002 (* ?x8001 l_0_4_95)))
 (let ((?x8602 (+ (+ (- (- (* (* (- 2.0) l_0_4_112) l_0_4_94) ?x8002) ?x8005) ?x8007) ?x8009)))
 (= (+ ?x8602 ?x8011) 0.0)))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8137 (* ?x4378 l_0_4_166)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8135 (* ?x4375 l_0_4_165)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8133 (* ?x4372 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8131 (* ?x8130 l_0_4_96)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8128 (* ?x8127 l_0_4_95)))
 (let ((?x8619 (+ (+ (- (- (* (* (- 2.0) l_0_4_119) l_0_4_94) ?x8128) ?x8131) ?x8133) ?x8135)))
 (= (+ ?x8619 ?x8137) 0.0)))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8211 (* ?x4378 l_0_4_174)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8209 (* ?x4375 l_0_4_173)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8207 (* ?x4372 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8205 (* ?x8204 l_0_4_96)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8202 (* ?x8201 l_0_4_95)))
 (let ((?x8636 (+ (+ (- (- (* (* (- 2.0) l_0_4_127) l_0_4_94) ?x8202) ?x8205) ?x8207) ?x8209)))
 (= (+ ?x8636 ?x8211) 0.0)))))))))))))
(assert
 (let ((?x8663 (* l_0_4_99 l_0_4_99)))
 (let ((?x8661 (* l_0_4_98 l_0_4_98)))
 (let ((?x8659 (* l_0_4_97 l_0_4_97)))
 (let ((?x8657 (* l_0_4_145 l_0_4_145)))
 (let ((?x8655 (* l_0_4_144 l_0_4_144)))
 (let ((?x8653 (* l_0_4_143 l_0_4_143)))
 (let ((?x8654 (+ (+ (* (- l_0_4_100) l_0_4_100) (* l_0_4_142 l_0_4_142)) ?x8653)))
 (= (- (- (- (+ (+ ?x8654 ?x8655) ?x8657) ?x8659) ?x8661) ?x8663) 0.0)))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x4725 (* ?x4724 l_0_4_154)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x4722 (* ?x4721 l_0_4_153)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x4719 (* ?x4718 l_0_4_152)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x4716 (* ?x4715 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4713 (* ?x3780 l_0_4_99)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4711 (* ?x3777 l_0_4_98)))
 (let ((?x3770 (* 2.0 l_0_4_106)))
 (let ((?x4702 (* ?x3770 l_0_4_97)))
 (let ((?x8684 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_109) ?x4702) ?x4711) ?x4713) ?x4716)))
 (= (+ (+ (+ ?x8684 ?x4719) ?x4722) ?x4725) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8710 (* ?x4724 l_0_4_160)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8708 (* ?x4721 l_0_4_159)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8706 (* ?x4718 l_0_4_158)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8704 (* ?x4715 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8702 (* ?x8004 l_0_4_99)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8700 (* ?x8001 l_0_4_98)))
 (let ((?x7999 (* 2.0 l_0_4_112)))
 (let ((?x8698 (* ?x7999 l_0_4_97)))
 (let ((?x8705 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_115) ?x8698) ?x8700) ?x8702) ?x8704)))
 (= (+ (+ (+ ?x8705 ?x8706) ?x8708) ?x8710) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8757 (* ?x4724 l_0_4_167)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8755 (* ?x4721 l_0_4_166)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8753 (* ?x4718 l_0_4_165)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8751 (* ?x4715 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8749 (* ?x8130 l_0_4_99)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8740 (* ?x8127 l_0_4_98)))
 (let ((?x8125 (* 2.0 l_0_4_119)))
 (let ((?x8736 (* ?x8125 l_0_4_97)))
 (let ((?x8752 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_122) ?x8736) ?x8740) ?x8749) ?x8751)))
 (= (+ (+ (+ ?x8752 ?x8753) ?x8755) ?x8757) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8804 (* ?x4724 l_0_4_175)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8802 (* ?x4721 l_0_4_174)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8800 (* ?x4718 l_0_4_173)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8798 (* ?x4715 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8796 (* ?x8204 l_0_4_99)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8787 (* ?x8201 l_0_4_98)))
 (let ((?x8199 (* 2.0 l_0_4_127)))
 (let ((?x8783 (* ?x8199 l_0_4_97)))
 (let ((?x8799 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_130) ?x8783) ?x8787) ?x8796) ?x8798)))
 (= (+ (+ (+ ?x8799 ?x8800) ?x8802) ?x8804) 0.0)))))))))))))))))
(assert
 (let ((?x5340 (* l_0_4_156 l_0_4_156)))
 (let ((?x5338 (* l_0_4_155 l_0_4_155)))
 (let ((?x5336 (* l_0_4_154 l_0_4_154)))
 (let ((?x5334 (* l_0_4_153 l_0_4_153)))
 (let ((?x5332 (* l_0_4_152 l_0_4_152)))
 (let ((?x5330 (* l_0_4_151 l_0_4_151)))
 (let ((?x5328 (* l_0_4_111 l_0_4_111)))
 (let ((?x5326 (* l_0_4_110 l_0_4_110)))
 (let ((?x5315 (* l_0_4_109 l_0_4_109)))
 (let ((?x5312 (* l_0_4_108 l_0_4_108)))
 (let ((?x5314 (- (- (* (- l_0_4_106) l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x5312)))
 (let ((?x5337 (+ (+ (+ (+ (- (- (- ?x5314 ?x5315) ?x5326) ?x5328) ?x5330) ?x5332) ?x5334) ?x5336)))
 (let ((?x5341 (+ (+ ?x5337 ?x5338) ?x5340)))
 (= ?x5341 0.0)))))))))))))))
(assert
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5770 (* ?x3807 l_0_4_169)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5768 (* ?x3804 l_0_4_168)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5766 (* ?x3801 l_0_4_167)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5764 (* ?x3798 l_0_4_166)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5762 (* ?x3795 l_0_4_165)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5760 (* ?x3792 l_0_4_164)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5758 (* ?x3789 l_0_4_124)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5756 (* ?x3786 l_0_4_123)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5754 (* ?x3783 l_0_4_122)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5752 (* ?x3780 l_0_4_121)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5750 (* ?x3777 l_0_4_120)))
 (let ((?x5757 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_119) ?x5750) ?x5752) ?x5754) ?x5756)))
 (let ((?x5771 (+ (+ (+ (+ (+ (+ (- ?x5757 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (= ?x5771 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5957 (* ?x3807 l_0_4_177)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5955 (* ?x3804 l_0_4_176)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5953 (* ?x3801 l_0_4_175)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5951 (* ?x3798 l_0_4_174)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5949 (* ?x3795 l_0_4_173)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5947 (* ?x3792 l_0_4_172)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5945 (* ?x3789 l_0_4_132)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5926 (* ?x3786 l_0_4_131)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5922 (* ?x3783 l_0_4_130)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5918 (* ?x3780 l_0_4_129)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5914 (* ?x3777 l_0_4_128)))
 (let ((?x5927 (- (- (- (- (* (* (- 2.0) l_0_4_106) l_0_4_127) ?x5914) ?x5918) ?x5922) ?x5926)))
 (let ((?x5958 (+ (+ (+ (+ (+ (+ (- ?x5927 ?x5945) ?x5947) ?x5949) ?x5951) ?x5953) ?x5955) ?x5957)))
 (= ?x5958 0.0))))))))))))))))))))))))))
(assert
 (let ((?x8873 (* l_0_4_163 l_0_4_163)))
 (let ((?x8871 (* l_0_4_162 l_0_4_162)))
 (let ((?x8869 (* l_0_4_161 l_0_4_161)))
 (let ((?x8867 (* l_0_4_160 l_0_4_160)))
 (let ((?x8865 (* l_0_4_159 l_0_4_159)))
 (let ((?x8863 (* l_0_4_158 l_0_4_158)))
 (let ((?x8861 (* l_0_4_157 l_0_4_157)))
 (let ((?x8859 (* l_0_4_118 l_0_4_118)))
 (let ((?x8857 (* l_0_4_117 l_0_4_117)))
 (let ((?x8855 (* l_0_4_116 l_0_4_116)))
 (let ((?x8853 (* l_0_4_115 l_0_4_115)))
 (let ((?x8851 (* l_0_4_114 l_0_4_114)))
 (let ((?x8852 (- (- (* (- l_0_4_112) l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x8851)))
 (let ((?x8866 (+ (+ (+ (- (- (- (- ?x8852 ?x8853) ?x8855) ?x8857) ?x8859) ?x8861) ?x8863) ?x8865)))
 (= (+ (+ (+ (+ ?x8866 ?x8867) ?x8869) ?x8871) ?x8873) 0.0))))))))))))))))
(assert
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x8942 (* ?x8941 l_0_4_170)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x8939 (* ?x8938 l_0_4_169)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x8936 (* ?x8935 l_0_4_168)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x8933 (* ?x8932 l_0_4_167)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x8930 (* ?x8929 l_0_4_166)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x8927 (* ?x8926 l_0_4_165)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x8924 (* ?x8923 l_0_4_164)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x8921 (* ?x8920 l_0_4_125)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x8918 (* ?x8917 l_0_4_124)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8915 (* ?x8914 l_0_4_123)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8912 (* ?x8911 l_0_4_122)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8909 (* ?x8004 l_0_4_121)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8907 (* ?x8001 l_0_4_120)))
 (let ((?x8916 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_119) ?x8907) ?x8909) ?x8912) ?x8915)))
 (let ((?x8937 (+ (+ (+ (+ (+ (- (- ?x8916 ?x8918) ?x8921) ?x8924) ?x8927) ?x8930) ?x8933) ?x8936)))
 (= (+ (+ ?x8937 ?x8939) ?x8942) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x8403 (* ?x7358 l_0_4_98)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x8401 (* ?x7355 l_0_4_97)))
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x9027 (* ?x8941 l_0_4_178)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x9025 (* ?x8938 l_0_4_177)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x9023 (* ?x8935 l_0_4_176)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x9021 (* ?x8932 l_0_4_175)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x9019 (* ?x8929 l_0_4_174)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x9017 (* ?x8926 l_0_4_173)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x9015 (* ?x8923 l_0_4_172)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8399 (* ?x4104 l_0_4_143)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8397 (* ?x4101 l_0_4_142)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x9011 (* ?x8920 l_0_4_133)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x9009 (* ?x8917 l_0_4_132)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8997 (* ?x8914 l_0_4_131)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8994 (* ?x8911 l_0_4_130)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8990 (* ?x8004 l_0_4_129)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8986 (* ?x8001 l_0_4_128)))
 (let ((?x9008 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_127) ?x8986) ?x8990) ?x8994) ?x8997)))
 (let ((?x9012 (- (- ?x9008 ?x9009) ?x9011)))
 (let ((?x9024 (+ (+ (+ (+ (+ (+ (+ ?x9012 ?x8397) ?x8399) ?x9015) ?x9017) ?x9019) ?x9021) ?x9023)))
 (= (- (- (+ (+ ?x9024 ?x9025) ?x9027) ?x8401) ?x8403) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x9120 (* l_0_4_171 l_0_4_171)))
 (let ((?x9118 (* l_0_4_170 l_0_4_170)))
 (let ((?x9116 (* l_0_4_169 l_0_4_169)))
 (let ((?x9114 (* l_0_4_168 l_0_4_168)))
 (let ((?x9112 (* l_0_4_167 l_0_4_167)))
 (let ((?x9110 (* l_0_4_166 l_0_4_166)))
 (let ((?x9108 (* l_0_4_165 l_0_4_165)))
 (let ((?x9106 (* l_0_4_164 l_0_4_164)))
 (let ((?x9104 (* l_0_4_126 l_0_4_126)))
 (let ((?x9102 (* l_0_4_125 l_0_4_125)))
 (let ((?x9100 (* l_0_4_124 l_0_4_124)))
 (let ((?x9098 (* l_0_4_123 l_0_4_123)))
 (let ((?x9096 (* l_0_4_122 l_0_4_122)))
 (let ((?x9094 (* l_0_4_121 l_0_4_121)))
 (let ((?x9095 (- (- (* (- l_0_4_119) l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9094)))
 (let ((?x9109 (+ (+ (- (- (- (- (- ?x9095 ?x9096) ?x9098) ?x9100) ?x9102) ?x9104) ?x9106) ?x9108)))
 (= (+ (+ (+ (+ (+ (+ ?x9109 ?x9110) ?x9112) ?x9114) ?x9116) ?x9118) ?x9120) 0.0))))))))))))))))))
(assert
 (let ((?x9199 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9196 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9193 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9190 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9187 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9184 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9181 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9178 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9175 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9172 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9169 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9166 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9163 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x9160 (* ?x8130 l_0_4_129)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x9158 (* ?x8127 l_0_4_128)))
 (let ((?x9167 (- (- (- (- (* (* (- 2.0) l_0_4_119) l_0_4_127) ?x9158) ?x9160) ?x9163) ?x9166)))
 (let ((?x9188 (+ (+ (+ (+ (- (- (- ?x9167 ?x9169) ?x9172) ?x9175) ?x9178) ?x9181) ?x9184) ?x9187)))
 (= (+ (+ (+ (+ ?x9188 ?x9190) ?x9193) ?x9196) ?x9199) 0.0)))))))))))))))))))))
(assert
 (let ((?x9299 (* l_0_4_180 l_0_4_180)))
 (let ((?x9297 (* l_0_4_179 l_0_4_179)))
 (let ((?x9295 (* l_0_4_178 l_0_4_178)))
 (let ((?x9293 (* l_0_4_177 l_0_4_177)))
 (let ((?x9291 (* l_0_4_176 l_0_4_176)))
 (let ((?x9289 (* l_0_4_175 l_0_4_175)))
 (let ((?x9287 (* l_0_4_174 l_0_4_174)))
 (let ((?x9285 (* l_0_4_173 l_0_4_173)))
 (let ((?x9283 (* l_0_4_172 l_0_4_172)))
 (let ((?x9281 (* l_0_4_135 l_0_4_135)))
 (let ((?x9279 (* l_0_4_134 l_0_4_134)))
 (let ((?x9277 (* l_0_4_133 l_0_4_133)))
 (let ((?x9275 (* l_0_4_132 l_0_4_132)))
 (let ((?x9262 (* l_0_4_131 l_0_4_131)))
 (let ((?x9259 (* l_0_4_130 l_0_4_130)))
 (let ((?x9255 (* l_0_4_129 l_0_4_129)))
 (let ((?x9257 (- (- (* (- l_0_4_127) l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9255)))
 (let ((?x9284 (+ (- (- (- (- (- (- ?x9257 ?x9259) ?x9262) ?x9275) ?x9277) ?x9279) ?x9281) ?x9283)))
 (let ((?x9298 (+ (+ (+ (+ (+ (+ (+ ?x9284 ?x9285) ?x9287) ?x9289) ?x9291) ?x9293) ?x9295) ?x9297)))
 (= (+ ?x9298 ?x9299) 0.0)))))))))))))))))))))
(assert
 (let ((?x8326 (* l_0_4_91 l_0_4_91)))
 (let ((?x9345 (+ (+ (* l_0_4_136 l_0_4_136) (* (* 2.0 l_0_4_202) l_0_4_217)) (* (* 2.0 l_0_4_203) l_0_4_218))))
 (let ((?x9351 (+ (+ ?x9345 (* (* 2.0 l_0_4_204) l_0_4_219)) (* (* 2.0 l_0_4_205) l_0_4_220))))
 (let ((?x9357 (+ (+ ?x9351 (* (* 2.0 l_0_4_206) l_0_4_221)) (* (* 2.0 l_0_4_207) l_0_4_222))))
 (let ((?x9363 (- (+ ?x9357 (* (* 2.0 l_0_4_208) l_0_4_223)) (* (* 2.0 l_0_4_247) l_0_4_262))))
 (let ((?x9369 (- (- ?x9363 (* (* 2.0 l_0_4_248) l_0_4_263)) (* (* 2.0 l_0_4_249) l_0_4_264))))
 (let ((?x9375 (- (- ?x9369 (* (* 2.0 l_0_4_250) l_0_4_265)) (* (* 2.0 l_0_4_251) l_0_4_266))))
 (let ((?x9381 (- (- ?x9375 (* (* 2.0 l_0_4_252) l_0_4_267)) (* (* 2.0 l_0_4_253) l_0_4_268))))
 (= (- ?x9381 ?x8326) 0.0))))))))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8351 (* ?x7195 l_0_4_92)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_137) ?x8351) 0.0))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8364 (* ?x7195 l_0_4_97)))
 (= (- (* (* 2.0 l_0_4_136) l_0_4_142) ?x8364) 0.0))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x6150 (* ?x3878 l_0_4_146)))
 (= (+ (* (* (- 2.0) l_0_4_101) l_0_4_91) ?x6150) 0.0))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8384 (* ?x3878 l_0_4_157)))
 (= (+ (* (* (- 2.0) l_0_4_112) l_0_4_91) ?x8384) 0.0))))
(assert
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x9027 (* ?x8941 l_0_4_178)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x9025 (* ?x8938 l_0_4_177)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x9023 (* ?x8935 l_0_4_176)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x9021 (* ?x8932 l_0_4_175)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x9019 (* ?x8929 l_0_4_174)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x9017 (* ?x8926 l_0_4_173)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x9015 (* ?x8923 l_0_4_172)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8391 (* ?x3878 l_0_4_164)))
 (let ((?x8125 (* 2.0 l_0_4_119)))
 (let ((?x9457 (* ?x8125 l_0_4_91)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x9011 (* ?x8920 l_0_4_133)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x9009 (* ?x8917 l_0_4_132)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8997 (* ?x8914 l_0_4_131)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8994 (* ?x8911 l_0_4_130)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8990 (* ?x8004 l_0_4_129)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8986 (* ?x8001 l_0_4_128)))
 (let ((?x9454 (+ (+ (+ (+ (* (* 2.0 l_0_4_112) l_0_4_127) ?x8986) ?x8990) ?x8994) ?x8997)))
 (let ((?x9462 (- (- (- (+ (- (+ (+ ?x9454 ?x9009) ?x9011) ?x9457) ?x8391) ?x9015) ?x9017) ?x9019)))
 (= (- (- (- (- ?x9462 ?x9021) ?x9023) ?x9025) ?x9027) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8427 (* ?x3878 l_0_4_172)))
 (= (+ (* (* (- 2.0) l_0_4_127) l_0_4_91) ?x8427) 0.0))))
(assert
 (let ((?x8447 (* l_0_4_93 l_0_4_93)))
 (let ((?x8445 (* l_0_4_92 l_0_4_92)))
 (let ((?x8439 (* l_0_4_138 l_0_4_138)))
 (let ((?x8437 (* l_0_4_137 l_0_4_137)))
 (let ((?x8440 (+ ?x8437 ?x8439)))
 (= (- (- ?x8440 ?x8445) ?x8447) 0.0)))))))
(assert
 (let ((?x7358 (* 2.0 l_0_4_93)))
 (let ((?x7359 (* ?x7358 l_0_4_95)))
 (let ((?x7355 (* 2.0 l_0_4_92)))
 (let ((?x7356 (* ?x7355 l_0_4_94)))
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x7349 (* ?x4104 l_0_4_140)))
 (= (- (- (+ (* (* 2.0 l_0_4_137) l_0_4_139) ?x7349) ?x7356) ?x7359) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x6265 (* ?x4104 l_0_4_147)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x6263 (* ?x4101 l_0_4_146)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6261 (* ?x5029 l_0_4_93)))
 (let ((?x6266 (+ (+ (- (* (* (- 2.0) l_0_4_101) l_0_4_92) ?x6261) ?x6263) ?x6265)))
 (= ?x6266 0.0)))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8495 (* ?x4104 l_0_4_158)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8493 (* ?x4101 l_0_4_157)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8491 (* ?x8001 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_112) l_0_4_92) ?x8491) ?x8493) ?x8495) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8518 (* ?x4104 l_0_4_165)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8516 (* ?x4101 l_0_4_164)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8509 (* ?x8127 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_119) l_0_4_92) ?x8509) ?x8516) ?x8518) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8541 (* ?x4104 l_0_4_173)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8539 (* ?x4101 l_0_4_172)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8532 (* ?x8201 l_0_4_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_4_127) l_0_4_92) ?x8532) ?x8539) ?x8541) 0.0))))))))
(assert
 (let ((?x7503 (* l_0_4_96 l_0_4_96)))
 (let ((?x7501 (* l_0_4_95 l_0_4_95)))
 (let ((?x7499 (* l_0_4_94 l_0_4_94)))
 (let ((?x7490 (* l_0_4_141 l_0_4_141)))
 (let ((?x8556 (- (+ (+ (* l_0_4_139 l_0_4_139) (* l_0_4_140 l_0_4_140)) ?x7490) ?x7499)))
 (= (- (- ?x8556 ?x7501) ?x7503) 0.0)))))))
(assert
 (let ((?x7636 (* (* 2.0 l_0_4_96) l_0_4_99)))
 (let ((?x7633 (* (* 2.0 l_0_4_95) l_0_4_98)))
 (let ((?x7630 (* (* 2.0 l_0_4_94) l_0_4_97)))
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x7620 (* ?x4378 l_0_4_144)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x7618 (* ?x4375 l_0_4_143)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x7616 (* ?x4372 l_0_4_142)))
 (= (- (- (- (+ (+ ?x7616 ?x7618) ?x7620) ?x7630) ?x7633) ?x7636) 0.0)))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x6303 (* ?x4378 l_0_4_148)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x6301 (* ?x4375 l_0_4_147)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x6299 (* ?x4372 l_0_4_146)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6297 (* ?x5034 l_0_4_96)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6295 (* ?x5029 l_0_4_95)))
 (let ((?x6302 (+ (+ (- (- (* (* (- 2.0) l_0_4_101) l_0_4_94) ?x6295) ?x6297) ?x6299) ?x6301)))
 (let ((?x6304 (+ ?x6302 ?x6303)))
 (= ?x6304 0.0))))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8011 (* ?x4378 l_0_4_159)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8009 (* ?x4375 l_0_4_158)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8007 (* ?x4372 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8005 (* ?x8004 l_0_4_96)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8002 (* ?x8001 l_0_4_95)))
 (let ((?x8602 (+ (+ (- (- (* (* (- 2.0) l_0_4_112) l_0_4_94) ?x8002) ?x8005) ?x8007) ?x8009)))
 (= (+ ?x8602 ?x8011) 0.0)))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8137 (* ?x4378 l_0_4_166)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8135 (* ?x4375 l_0_4_165)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8133 (* ?x4372 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8131 (* ?x8130 l_0_4_96)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8128 (* ?x8127 l_0_4_95)))
 (let ((?x8619 (+ (+ (- (- (* (* (- 2.0) l_0_4_119) l_0_4_94) ?x8128) ?x8131) ?x8133) ?x8135)))
 (= (+ ?x8619 ?x8137) 0.0)))))))))))))
(assert
 (let ((?x4378 (* 2.0 l_0_4_141)))
 (let ((?x8211 (* ?x4378 l_0_4_174)))
 (let ((?x4375 (* 2.0 l_0_4_140)))
 (let ((?x8209 (* ?x4375 l_0_4_173)))
 (let ((?x4372 (* 2.0 l_0_4_139)))
 (let ((?x8207 (* ?x4372 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8205 (* ?x8204 l_0_4_96)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8202 (* ?x8201 l_0_4_95)))
 (let ((?x8636 (+ (+ (- (- (* (* (- 2.0) l_0_4_127) l_0_4_94) ?x8202) ?x8205) ?x8207) ?x8209)))
 (= (+ ?x8636 ?x8211) 0.0)))))))))))))
(assert
 (let ((?x8663 (* l_0_4_99 l_0_4_99)))
 (let ((?x8661 (* l_0_4_98 l_0_4_98)))
 (let ((?x8659 (* l_0_4_97 l_0_4_97)))
 (let ((?x8657 (* l_0_4_145 l_0_4_145)))
 (let ((?x8655 (* l_0_4_144 l_0_4_144)))
 (let ((?x8653 (* l_0_4_143 l_0_4_143)))
 (let ((?x8654 (+ (+ (* (- l_0_4_100) l_0_4_100) (* l_0_4_142 l_0_4_142)) ?x8653)))
 (= (- (- (- (+ (+ ?x8654 ?x8655) ?x8657) ?x8659) ?x8661) ?x8663) 0.0)))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8710 (* ?x4724 l_0_4_160)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8708 (* ?x4721 l_0_4_159)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8706 (* ?x4718 l_0_4_158)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8704 (* ?x4715 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8702 (* ?x8004 l_0_4_99)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8700 (* ?x8001 l_0_4_98)))
 (let ((?x7999 (* 2.0 l_0_4_112)))
 (let ((?x8698 (* ?x7999 l_0_4_97)))
 (let ((?x8705 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_115) ?x8698) ?x8700) ?x8702) ?x8704)))
 (= (+ (+ (+ ?x8705 ?x8706) ?x8708) ?x8710) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8757 (* ?x4724 l_0_4_167)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8755 (* ?x4721 l_0_4_166)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8753 (* ?x4718 l_0_4_165)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8751 (* ?x4715 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8749 (* ?x8130 l_0_4_99)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8740 (* ?x8127 l_0_4_98)))
 (let ((?x8125 (* 2.0 l_0_4_119)))
 (let ((?x8736 (* ?x8125 l_0_4_97)))
 (let ((?x8752 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_122) ?x8736) ?x8740) ?x8749) ?x8751)))
 (= (+ (+ (+ ?x8752 ?x8753) ?x8755) ?x8757) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8804 (* ?x4724 l_0_4_175)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8802 (* ?x4721 l_0_4_174)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8800 (* ?x4718 l_0_4_173)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8798 (* ?x4715 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8796 (* ?x8204 l_0_4_99)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8787 (* ?x8201 l_0_4_98)))
 (let ((?x8199 (* 2.0 l_0_4_127)))
 (let ((?x8783 (* ?x8199 l_0_4_97)))
 (let ((?x8799 (+ (- (- (- (* (* (- 2.0) l_0_4_100) l_0_4_130) ?x8783) ?x8787) ?x8796) ?x8798)))
 (= (+ (+ (+ ?x8799 ?x8800) ?x8802) ?x8804) 0.0)))))))))))))))))
(assert
 (let ((?x6398 (* l_0_4_150 l_0_4_150)))
 (let ((?x6396 (* l_0_4_149 l_0_4_149)))
 (let ((?x6394 (* l_0_4_148 l_0_4_148)))
 (let ((?x6392 (* l_0_4_147 l_0_4_147)))
 (let ((?x6390 (* l_0_4_146 l_0_4_146)))
 (let ((?x6385 (* l_0_4_105 l_0_4_105)))
 (let ((?x6383 (* l_0_4_104 l_0_4_104)))
 (let ((?x6381 (* l_0_4_103 l_0_4_103)))
 (let ((?x6382 (- (- (* (- l_0_4_101) l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x6381)))
 (let ((?x6386 (- (- ?x6382 ?x6383) ?x6385)))
 (= (+ (+ (+ (+ (+ ?x6386 ?x6390) ?x6392) ?x6394) ?x6396) ?x6398) 0.0))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6471 (* ?x5073 l_0_4_161)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6469 (* ?x5068 l_0_4_160)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6467 (* ?x5065 l_0_4_159)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6465 (* ?x5062 l_0_4_158)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6463 (* ?x5059 l_0_4_157)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6461 (* ?x5048 l_0_4_116)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6459 (* ?x5045 l_0_4_115)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6457 (* ?x5034 l_0_4_114)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6455 (* ?x5029 l_0_4_113)))
 (let ((?x6462 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_112) ?x6455) ?x6457) ?x6459) ?x6461)))
 (let ((?x6472 (+ (+ (+ (+ (+ ?x6462 ?x6463) ?x6465) ?x6467) ?x6469) ?x6471)))
 (= ?x6472 0.0))))))))))))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6548 (* ?x5073 l_0_4_168)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6546 (* ?x5068 l_0_4_167)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6544 (* ?x5065 l_0_4_166)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6542 (* ?x5062 l_0_4_165)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6540 (* ?x5059 l_0_4_164)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6538 (* ?x5048 l_0_4_123)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6536 (* ?x5045 l_0_4_122)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6534 (* ?x5034 l_0_4_121)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6532 (* ?x5029 l_0_4_120)))
 (let ((?x6539 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_119) ?x6532) ?x6534) ?x6536) ?x6538)))
 (let ((?x6549 (+ (+ (+ (+ (+ ?x6539 ?x6540) ?x6542) ?x6544) ?x6546) ?x6548)))
 (= ?x6549 0.0))))))))))))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6625 (* ?x5073 l_0_4_176)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6623 (* ?x5068 l_0_4_175)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6621 (* ?x5065 l_0_4_174)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6619 (* ?x5062 l_0_4_173)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6617 (* ?x5059 l_0_4_172)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6615 (* ?x5048 l_0_4_131)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6613 (* ?x5045 l_0_4_130)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6611 (* ?x5034 l_0_4_129)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6609 (* ?x5029 l_0_4_128)))
 (let ((?x6616 (- (- (- (- (* (* (- 2.0) l_0_4_101) l_0_4_127) ?x6609) ?x6611) ?x6613) ?x6615)))
 (let ((?x6626 (+ (+ (+ (+ (+ ?x6616 ?x6617) ?x6619) ?x6621) ?x6623) ?x6625)))
 (= ?x6626 0.0))))))))))))))))))))))
(assert
 (let ((?x8873 (* l_0_4_163 l_0_4_163)))
 (let ((?x8871 (* l_0_4_162 l_0_4_162)))
 (let ((?x8869 (* l_0_4_161 l_0_4_161)))
 (let ((?x8867 (* l_0_4_160 l_0_4_160)))
 (let ((?x8865 (* l_0_4_159 l_0_4_159)))
 (let ((?x8863 (* l_0_4_158 l_0_4_158)))
 (let ((?x8861 (* l_0_4_157 l_0_4_157)))
 (let ((?x8859 (* l_0_4_118 l_0_4_118)))
 (let ((?x8857 (* l_0_4_117 l_0_4_117)))
 (let ((?x8855 (* l_0_4_116 l_0_4_116)))
 (let ((?x8853 (* l_0_4_115 l_0_4_115)))
 (let ((?x8851 (* l_0_4_114 l_0_4_114)))
 (let ((?x8852 (- (- (* (- l_0_4_112) l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x8851)))
 (let ((?x8866 (+ (+ (+ (- (- (- (- ?x8852 ?x8853) ?x8855) ?x8857) ?x8859) ?x8861) ?x8863) ?x8865)))
 (= (+ (+ (+ (+ ?x8866 ?x8867) ?x8869) ?x8871) ?x8873) 0.0))))))))))))))))
(assert
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x8942 (* ?x8941 l_0_4_170)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x8939 (* ?x8938 l_0_4_169)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x8936 (* ?x8935 l_0_4_168)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x8933 (* ?x8932 l_0_4_167)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x8930 (* ?x8929 l_0_4_166)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x8927 (* ?x8926 l_0_4_165)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x8924 (* ?x8923 l_0_4_164)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x8921 (* ?x8920 l_0_4_125)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x8918 (* ?x8917 l_0_4_124)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8915 (* ?x8914 l_0_4_123)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8912 (* ?x8911 l_0_4_122)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8909 (* ?x8004 l_0_4_121)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8907 (* ?x8001 l_0_4_120)))
 (let ((?x8916 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_119) ?x8907) ?x8909) ?x8912) ?x8915)))
 (let ((?x8937 (+ (+ (+ (+ (+ (- (- ?x8916 ?x8918) ?x8921) ?x8924) ?x8927) ?x8930) ?x8933) ?x8936)))
 (= (+ (+ ?x8937 ?x8939) ?x8942) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x9027 (* ?x8941 l_0_4_178)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x9025 (* ?x8938 l_0_4_177)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x9023 (* ?x8935 l_0_4_176)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x9021 (* ?x8932 l_0_4_175)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x9019 (* ?x8929 l_0_4_174)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x9017 (* ?x8926 l_0_4_173)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x9015 (* ?x8923 l_0_4_172)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x9011 (* ?x8920 l_0_4_133)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x9009 (* ?x8917 l_0_4_132)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8997 (* ?x8914 l_0_4_131)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8994 (* ?x8911 l_0_4_130)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8990 (* ?x8004 l_0_4_129)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8986 (* ?x8001 l_0_4_128)))
 (let ((?x9008 (- (- (- (- (* (* (- 2.0) l_0_4_112) l_0_4_127) ?x8986) ?x8990) ?x8994) ?x8997)))
 (let ((?x9012 (- (- ?x9008 ?x9009) ?x9011)))
 (let ((?x9533 (+ (+ (+ (+ (+ (+ (+ ?x9012 ?x9015) ?x9017) ?x9019) ?x9021) ?x9023) ?x9025) ?x9027)))
 (= ?x9533 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x9120 (* l_0_4_171 l_0_4_171)))
 (let ((?x9118 (* l_0_4_170 l_0_4_170)))
 (let ((?x9116 (* l_0_4_169 l_0_4_169)))
 (let ((?x9114 (* l_0_4_168 l_0_4_168)))
 (let ((?x9112 (* l_0_4_167 l_0_4_167)))
 (let ((?x9110 (* l_0_4_166 l_0_4_166)))
 (let ((?x9108 (* l_0_4_165 l_0_4_165)))
 (let ((?x9106 (* l_0_4_164 l_0_4_164)))
 (let ((?x9104 (* l_0_4_126 l_0_4_126)))
 (let ((?x9102 (* l_0_4_125 l_0_4_125)))
 (let ((?x9100 (* l_0_4_124 l_0_4_124)))
 (let ((?x9098 (* l_0_4_123 l_0_4_123)))
 (let ((?x9096 (* l_0_4_122 l_0_4_122)))
 (let ((?x9094 (* l_0_4_121 l_0_4_121)))
 (let ((?x9095 (- (- (* (- l_0_4_119) l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9094)))
 (let ((?x9109 (+ (+ (- (- (- (- (- ?x9095 ?x9096) ?x9098) ?x9100) ?x9102) ?x9104) ?x9106) ?x9108)))
 (= (+ (+ (+ (+ (+ (+ ?x9109 ?x9110) ?x9112) ?x9114) ?x9116) ?x9118) ?x9120) 0.0))))))))))))))))))
(assert
 (let ((?x9199 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9196 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9193 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9190 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9187 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9184 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9181 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9178 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9175 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9172 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9169 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9166 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9163 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x9160 (* ?x8130 l_0_4_129)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x9158 (* ?x8127 l_0_4_128)))
 (let ((?x9167 (- (- (- (- (* (* (- 2.0) l_0_4_119) l_0_4_127) ?x9158) ?x9160) ?x9163) ?x9166)))
 (let ((?x9188 (+ (+ (+ (+ (- (- (- ?x9167 ?x9169) ?x9172) ?x9175) ?x9178) ?x9181) ?x9184) ?x9187)))
 (= (+ (+ (+ (+ ?x9188 ?x9190) ?x9193) ?x9196) ?x9199) 0.0)))))))))))))))))))))
(assert
 (let ((?x9299 (* l_0_4_180 l_0_4_180)))
 (let ((?x9297 (* l_0_4_179 l_0_4_179)))
 (let ((?x9295 (* l_0_4_178 l_0_4_178)))
 (let ((?x9293 (* l_0_4_177 l_0_4_177)))
 (let ((?x9291 (* l_0_4_176 l_0_4_176)))
 (let ((?x9289 (* l_0_4_175 l_0_4_175)))
 (let ((?x9287 (* l_0_4_174 l_0_4_174)))
 (let ((?x9285 (* l_0_4_173 l_0_4_173)))
 (let ((?x9283 (* l_0_4_172 l_0_4_172)))
 (let ((?x9281 (* l_0_4_135 l_0_4_135)))
 (let ((?x9279 (* l_0_4_134 l_0_4_134)))
 (let ((?x9277 (* l_0_4_133 l_0_4_133)))
 (let ((?x9275 (* l_0_4_132 l_0_4_132)))
 (let ((?x9262 (* l_0_4_131 l_0_4_131)))
 (let ((?x9259 (* l_0_4_130 l_0_4_130)))
 (let ((?x9255 (* l_0_4_129 l_0_4_129)))
 (let ((?x9257 (- (- (* (- l_0_4_127) l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9255)))
 (let ((?x9284 (+ (- (- (- (- (- (- ?x9257 ?x9259) ?x9262) ?x9275) ?x9277) ?x9279) ?x9281) ?x9283)))
 (let ((?x9298 (+ (+ (+ (+ (+ (+ (+ ?x9284 ?x9285) ?x9287) ?x9289) ?x9291) ?x9293) ?x9295) ?x9297)))
 (= (+ ?x9298 ?x9299) 0.0)))))))))))))))))))))
(assert
 (let ((?x8326 (* l_0_4_91 l_0_4_91)))
 (let ((?x9540 (+ (* (- l_0_4_136) l_0_4_136) (* (* 2.0 l_0_4_181) l_0_4_209))))
 (= (+ (- ?x9540 (* (* 2.0 l_0_4_226) l_0_4_254)) ?x8326) 0.0))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8351 (* ?x7195 l_0_4_92)))
 (let ((?x9562 (+ (* (* (- 2.0) l_0_4_136) l_0_4_137) (* (* 2.0 l_0_4_182) l_0_4_209))))
 (let ((?x9566 (- (+ ?x9562 (* (* 2.0 l_0_4_183) l_0_4_210)) (* (* 2.0 l_0_4_227) l_0_4_254))))
 (= (+ (- ?x9566 (* (* 2.0 l_0_4_228) l_0_4_255)) ?x8351) 0.0))))))
(assert
 (let ((?x7195 (* 2.0 l_0_4_91)))
 (let ((?x8364 (* ?x7195 l_0_4_97)))
 (let ((?x9595 (+ (* (* (- 2.0) l_0_4_136) l_0_4_142) (* (* 2.0 l_0_4_187) l_0_4_209))))
 (let ((?x9599 (+ (+ ?x9595 (* (* 2.0 l_0_4_188) l_0_4_210)) (* (* 2.0 l_0_4_189) l_0_4_211))))
 (let ((?x9603 (- (+ ?x9599 (* (* 2.0 l_0_4_190) l_0_4_212)) (* (* 2.0 l_0_4_232) l_0_4_254))))
 (let ((?x9607 (- (- ?x9603 (* (* 2.0 l_0_4_233) l_0_4_255)) (* (* 2.0 l_0_4_234) l_0_4_256))))
 (= (+ (- ?x9607 (* (* 2.0 l_0_4_235) l_0_4_257)) ?x8364) 0.0))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x6150 (* ?x3878 l_0_4_146)))
 (let ((?x6147 (* 2.0 l_0_4_101)))
 (let ((?x6148 (* ?x6147 l_0_4_91)))
 (let ((?x9658 (+ (+ (- ?x6148 ?x6150) (* (* 2.0 l_0_4_191) l_0_4_209)) (* (* 2.0 l_0_4_192) l_0_4_210))))
 (let ((?x9664 (+ (+ ?x9658 (* (* 2.0 l_0_4_193) l_0_4_211)) (* (* 2.0 l_0_4_194) l_0_4_212))))
 (let ((?x9670 (- (+ ?x9664 (* (* 2.0 l_0_4_195) l_0_4_213)) (* (* 2.0 l_0_4_236) l_0_4_254))))
 (let ((?x9676 (- (- ?x9670 (* (* 2.0 l_0_4_237) l_0_4_255)) (* (* 2.0 l_0_4_238) l_0_4_256))))
 (let ((?x9682 (- (- ?x9676 (* (* 2.0 l_0_4_239) l_0_4_257)) (* (* 2.0 l_0_4_240) l_0_4_258))))
 (= ?x9682 0.0)))))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x3879 (* ?x3878 l_0_4_151)))
 (let ((?x3770 (* 2.0 l_0_4_106)))
 (let ((?x3866 (* ?x3770 l_0_4_91)))
 (let ((?x9732 (+ (+ (- ?x3866 ?x3879) (* (* 2.0 l_0_4_196) l_0_4_209)) (* (* 2.0 l_0_4_197) l_0_4_210))))
 (let ((?x9736 (+ (+ ?x9732 (* (* 2.0 l_0_4_198) l_0_4_211)) (* (* 2.0 l_0_4_199) l_0_4_212))))
 (let ((?x9740 (+ (+ ?x9736 (* (* 2.0 l_0_4_200) l_0_4_213)) (* (* 2.0 l_0_4_201) l_0_4_214))))
 (let ((?x9744 (- (- ?x9740 (* (* 2.0 l_0_4_241) l_0_4_254)) (* (* 2.0 l_0_4_242) l_0_4_255))))
 (let ((?x9748 (- (- ?x9744 (* (* 2.0 l_0_4_243) l_0_4_256)) (* (* 2.0 l_0_4_244) l_0_4_257))))
 (let ((?x9752 (- (- ?x9748 (* (* 2.0 l_0_4_245) l_0_4_258)) (* (* 2.0 l_0_4_246) l_0_4_259))))
 (= ?x9752 0.0))))))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8384 (* ?x3878 l_0_4_157)))
 (let ((?x9809 (+ (- (* (* 2.0 l_0_4_112) l_0_4_91) ?x8384) (* (* 2.0 l_0_4_202) l_0_4_209))))
 (let ((?x9813 (+ (+ ?x9809 (* (* 2.0 l_0_4_203) l_0_4_210)) (* (* 2.0 l_0_4_204) l_0_4_211))))
 (let ((?x9817 (+ (+ ?x9813 (* (* 2.0 l_0_4_205) l_0_4_212)) (* (* 2.0 l_0_4_206) l_0_4_213))))
 (let ((?x9821 (+ (+ ?x9817 (* (* 2.0 l_0_4_207) l_0_4_214)) (* (* 2.0 l_0_4_208) l_0_4_215))))
 (let ((?x9825 (- (- ?x9821 (* (* 2.0 l_0_4_247) l_0_4_254)) (* (* 2.0 l_0_4_248) l_0_4_255))))
 (let ((?x9829 (- (- ?x9825 (* (* 2.0 l_0_4_249) l_0_4_256)) (* (* 2.0 l_0_4_250) l_0_4_257))))
 (let ((?x9833 (- (- ?x9829 (* (* 2.0 l_0_4_251) l_0_4_258)) (* (* 2.0 l_0_4_252) l_0_4_259))))
 (= (- ?x9833 (* (* 2.0 l_0_4_253) l_0_4_260)) 0.0)))))))))))
(assert
 (let ((?x9937 (* l_0_4_261 l_0_4_261)))
 (let ((?x9935 (* l_0_4_260 l_0_4_260)))
 (let ((?x9933 (* l_0_4_259 l_0_4_259)))
 (let ((?x9931 (* l_0_4_258 l_0_4_258)))
 (let ((?x9929 (* l_0_4_257 l_0_4_257)))
 (let ((?x9927 (* l_0_4_256 l_0_4_256)))
 (let ((?x9925 (* l_0_4_255 l_0_4_255)))
 (let ((?x9923 (* l_0_4_254 l_0_4_254)))
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8391 (* ?x3878 l_0_4_164)))
 (let ((?x8125 (* 2.0 l_0_4_119)))
 (let ((?x9457 (* ?x8125 l_0_4_91)))
 (let ((?x9904 (+ (+ (- ?x9457 ?x8391) (* 1.0 (* l_0_4_209 l_0_4_209))) (* 1.0 (* l_0_4_210 l_0_4_210)))))
 (let ((?x9910 (+ (+ ?x9904 (* 1.0 (* l_0_4_211 l_0_4_211))) (* 1.0 (* l_0_4_212 l_0_4_212)))))
 (let ((?x9916 (+ (+ ?x9910 (* 1.0 (* l_0_4_213 l_0_4_213))) (* 1.0 (* l_0_4_214 l_0_4_214)))))
 (let ((?x9922 (+ (+ ?x9916 (* 1.0 (* l_0_4_215 l_0_4_215))) (* 1.0 (* l_0_4_216 l_0_4_216)))))
 (let ((?x9936 (- (- (- (- (- (- (- ?x9922 ?x9923) ?x9925) ?x9927) ?x9929) ?x9931) ?x9933) ?x9935)))
 (= (- ?x9936 ?x9937) 0.0)))))))))))))))))))
(assert
 (let ((?x3878 (* 2.0 l_0_4_136)))
 (let ((?x8427 (* ?x3878 l_0_4_172)))
 (let ((?x9973 (+ (- (* (* 2.0 l_0_4_127) l_0_4_91) ?x8427) (* (* 2.0 l_0_4_209) l_0_4_217))))
 (let ((?x9979 (+ (+ ?x9973 (* (* 2.0 l_0_4_210) l_0_4_218)) (* (* 2.0 l_0_4_211) l_0_4_219))))
 (let ((?x9985 (+ (+ ?x9979 (* (* 2.0 l_0_4_212) l_0_4_220)) (* (* 2.0 l_0_4_213) l_0_4_221))))
 (let ((?x9991 (+ (+ ?x9985 (* (* 2.0 l_0_4_214) l_0_4_222)) (* (* 2.0 l_0_4_215) l_0_4_223))))
 (let ((?x9997 (- (+ ?x9991 (* (* 2.0 l_0_4_216) l_0_4_224)) (* (* 2.0 l_0_4_254) l_0_4_262))))
 (let ((?x10003 (- (- ?x9997 (* (* 2.0 l_0_4_255) l_0_4_263)) (* (* 2.0 l_0_4_256) l_0_4_264))))
 (let ((?x10009 (- (- ?x10003 (* (* 2.0 l_0_4_257) l_0_4_265)) (* (* 2.0 l_0_4_258) l_0_4_266))))
 (let ((?x10015 (- (- ?x10009 (* (* 2.0 l_0_4_259) l_0_4_267)) (* (* 2.0 l_0_4_260) l_0_4_268))))
 (= (- ?x10015 (* (* 2.0 l_0_4_261) l_0_4_269)) 0.0))))))))))))
(assert
 (let ((?x8447 (* l_0_4_93 l_0_4_93)))
 (let ((?x8445 (* l_0_4_92 l_0_4_92)))
 (let ((?x10092 (+ (- (* (- l_0_4_137) l_0_4_137) (* l_0_4_138 l_0_4_138)) ?x8445)))
 (= (+ ?x10092 ?x8447) 0.0)))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x6265 (* ?x4104 l_0_4_147)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x6263 (* ?x4101 l_0_4_146)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6261 (* ?x5029 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_101) l_0_4_92) ?x6261) ?x6263) ?x6265) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x4105 (* ?x4104 l_0_4_152)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x4102 (* ?x4101 l_0_4_151)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4094 (* ?x3777 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_106) l_0_4_92) ?x4094) ?x4102) ?x4105) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8495 (* ?x4104 l_0_4_158)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8493 (* ?x4101 l_0_4_157)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8491 (* ?x8001 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_112) l_0_4_92) ?x8491) ?x8493) ?x8495) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8518 (* ?x4104 l_0_4_165)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8516 (* ?x4101 l_0_4_164)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8509 (* ?x8127 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_119) l_0_4_92) ?x8509) ?x8516) ?x8518) 0.0))))))))
(assert
 (let ((?x4104 (* 2.0 l_0_4_138)))
 (let ((?x8541 (* ?x4104 l_0_4_173)))
 (let ((?x4101 (* 2.0 l_0_4_137)))
 (let ((?x8539 (* ?x4101 l_0_4_172)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8532 (* ?x8201 l_0_4_93)))
 (= (- (- (+ (* (* 2.0 l_0_4_127) l_0_4_92) ?x8532) ?x8539) ?x8541) 0.0))))))))
(assert
 (let ((?x8663 (* l_0_4_99 l_0_4_99)))
 (let ((?x8661 (* l_0_4_98 l_0_4_98)))
 (let ((?x8659 (* l_0_4_97 l_0_4_97)))
 (let ((?x8657 (* l_0_4_145 l_0_4_145)))
 (let ((?x8655 (* l_0_4_144 l_0_4_144)))
 (let ((?x8653 (* l_0_4_143 l_0_4_143)))
 (let ((?x10162 (- (- (- (* l_0_4_100 l_0_4_100) (* l_0_4_142 l_0_4_142)) ?x8653) ?x8655)))
 (= (+ (+ (+ (- ?x10162 ?x8657) ?x8659) ?x8661) ?x8663) 0.0)))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x4725 (* ?x4724 l_0_4_154)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x4722 (* ?x4721 l_0_4_153)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x4719 (* ?x4718 l_0_4_152)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x4716 (* ?x4715 l_0_4_151)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x4713 (* ?x3780 l_0_4_99)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x4711 (* ?x3777 l_0_4_98)))
 (let ((?x3770 (* 2.0 l_0_4_106)))
 (let ((?x4702 (* ?x3770 l_0_4_97)))
 (let ((?x4697 (* 2.0 l_0_4_100)))
 (let ((?x4699 (* ?x4697 l_0_4_109)))
 (let ((?x10186 (- (- (- (- (+ (+ (+ ?x4699 ?x4702) ?x4711) ?x4713) ?x4716) ?x4719) ?x4722) ?x4725)))
 (= ?x10186 0.0)))))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8710 (* ?x4724 l_0_4_160)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8708 (* ?x4721 l_0_4_159)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8706 (* ?x4718 l_0_4_158)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8704 (* ?x4715 l_0_4_157)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8702 (* ?x8004 l_0_4_99)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8700 (* ?x8001 l_0_4_98)))
 (let ((?x7999 (* 2.0 l_0_4_112)))
 (let ((?x8698 (* ?x7999 l_0_4_97)))
 (let ((?x10204 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_115) ?x8698) ?x8700) ?x8702) ?x8704)))
 (= (- (- (- ?x10204 ?x8706) ?x8708) ?x8710) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8757 (* ?x4724 l_0_4_167)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8755 (* ?x4721 l_0_4_166)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8753 (* ?x4718 l_0_4_165)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8751 (* ?x4715 l_0_4_164)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x8749 (* ?x8130 l_0_4_99)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x8740 (* ?x8127 l_0_4_98)))
 (let ((?x8125 (* 2.0 l_0_4_119)))
 (let ((?x8736 (* ?x8125 l_0_4_97)))
 (let ((?x10229 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_122) ?x8736) ?x8740) ?x8749) ?x8751)))
 (= (- (- (- ?x10229 ?x8753) ?x8755) ?x8757) 0.0)))))))))))))))))
(assert
 (let ((?x4724 (* 2.0 l_0_4_145)))
 (let ((?x8804 (* ?x4724 l_0_4_175)))
 (let ((?x4721 (* 2.0 l_0_4_144)))
 (let ((?x8802 (* ?x4721 l_0_4_174)))
 (let ((?x4718 (* 2.0 l_0_4_143)))
 (let ((?x8800 (* ?x4718 l_0_4_173)))
 (let ((?x4715 (* 2.0 l_0_4_142)))
 (let ((?x8798 (* ?x4715 l_0_4_172)))
 (let ((?x8204 (* 2.0 l_0_4_129)))
 (let ((?x8796 (* ?x8204 l_0_4_99)))
 (let ((?x8201 (* 2.0 l_0_4_128)))
 (let ((?x8787 (* ?x8201 l_0_4_98)))
 (let ((?x8199 (* 2.0 l_0_4_127)))
 (let ((?x8783 (* ?x8199 l_0_4_97)))
 (let ((?x10254 (- (+ (+ (+ (* (* 2.0 l_0_4_100) l_0_4_130) ?x8783) ?x8787) ?x8796) ?x8798)))
 (= (- (- (- ?x10254 ?x8800) ?x8802) ?x8804) 0.0)))))))))))))))))
(assert
 (let ((?x6398 (* l_0_4_150 l_0_4_150)))
 (let ((?x6396 (* l_0_4_149 l_0_4_149)))
 (let ((?x6394 (* l_0_4_148 l_0_4_148)))
 (let ((?x6392 (* l_0_4_147 l_0_4_147)))
 (let ((?x6390 (* l_0_4_146 l_0_4_146)))
 (let ((?x6385 (* l_0_4_105 l_0_4_105)))
 (let ((?x6383 (* l_0_4_104 l_0_4_104)))
 (let ((?x6381 (* l_0_4_103 l_0_4_103)))
 (let ((?x10277 (+ (+ (+ (* l_0_4_101 l_0_4_101) (* l_0_4_102 l_0_4_102)) ?x6381) ?x6383)))
 (= (- (- (- (- (- (+ ?x10277 ?x6385) ?x6390) ?x6392) ?x6394) ?x6396) ?x6398) 0.0)))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x5074 (* ?x5073 l_0_4_155)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x5069 (* ?x5068 l_0_4_154)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x5066 (* ?x5065 l_0_4_153)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x5063 (* ?x5062 l_0_4_152)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x5060 (* ?x5059 l_0_4_151)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x5049 (* ?x5048 l_0_4_110)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x5046 (* ?x5045 l_0_4_109)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x5043 (* ?x5034 l_0_4_108)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x5031 (* ?x5029 l_0_4_107)))
 (let ((?x10299 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_106) ?x5031) ?x5043) ?x5046) ?x5049)))
 (= (- (- (- (- (- ?x10299 ?x5060) ?x5063) ?x5066) ?x5069) ?x5074) 0.0)))))))))))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6471 (* ?x5073 l_0_4_161)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6469 (* ?x5068 l_0_4_160)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6467 (* ?x5065 l_0_4_159)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6465 (* ?x5062 l_0_4_158)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6463 (* ?x5059 l_0_4_157)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6461 (* ?x5048 l_0_4_116)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6459 (* ?x5045 l_0_4_115)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6457 (* ?x5034 l_0_4_114)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6455 (* ?x5029 l_0_4_113)))
 (let ((?x10327 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_112) ?x6455) ?x6457) ?x6459) ?x6461)))
 (= (- (- (- (- (- ?x10327 ?x6463) ?x6465) ?x6467) ?x6469) ?x6471) 0.0)))))))))))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6548 (* ?x5073 l_0_4_168)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6546 (* ?x5068 l_0_4_167)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6544 (* ?x5065 l_0_4_166)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6542 (* ?x5062 l_0_4_165)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6540 (* ?x5059 l_0_4_164)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6538 (* ?x5048 l_0_4_123)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6536 (* ?x5045 l_0_4_122)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6534 (* ?x5034 l_0_4_121)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6532 (* ?x5029 l_0_4_120)))
 (let ((?x10353 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_119) ?x6532) ?x6534) ?x6536) ?x6538)))
 (= (- (- (- (- (- ?x10353 ?x6540) ?x6542) ?x6544) ?x6546) ?x6548) 0.0)))))))))))))))))))))
(assert
 (let ((?x5073 (* 2.0 l_0_4_150)))
 (let ((?x6625 (* ?x5073 l_0_4_176)))
 (let ((?x5068 (* 2.0 l_0_4_149)))
 (let ((?x6623 (* ?x5068 l_0_4_175)))
 (let ((?x5065 (* 2.0 l_0_4_148)))
 (let ((?x6621 (* ?x5065 l_0_4_174)))
 (let ((?x5062 (* 2.0 l_0_4_147)))
 (let ((?x6619 (* ?x5062 l_0_4_173)))
 (let ((?x5059 (* 2.0 l_0_4_146)))
 (let ((?x6617 (* ?x5059 l_0_4_172)))
 (let ((?x5048 (* 2.0 l_0_4_105)))
 (let ((?x6615 (* ?x5048 l_0_4_131)))
 (let ((?x5045 (* 2.0 l_0_4_104)))
 (let ((?x6613 (* ?x5045 l_0_4_130)))
 (let ((?x5034 (* 2.0 l_0_4_103)))
 (let ((?x6611 (* ?x5034 l_0_4_129)))
 (let ((?x5029 (* 2.0 l_0_4_102)))
 (let ((?x6609 (* ?x5029 l_0_4_128)))
 (let ((?x10379 (+ (+ (+ (+ (* (* 2.0 l_0_4_101) l_0_4_127) ?x6609) ?x6611) ?x6613) ?x6615)))
 (= (- (- (- (- (- ?x10379 ?x6617) ?x6619) ?x6621) ?x6623) ?x6625) 0.0)))))))))))))))))))))
(assert
 (let ((?x5340 (* l_0_4_156 l_0_4_156)))
 (let ((?x5338 (* l_0_4_155 l_0_4_155)))
 (let ((?x5336 (* l_0_4_154 l_0_4_154)))
 (let ((?x5334 (* l_0_4_153 l_0_4_153)))
 (let ((?x5332 (* l_0_4_152 l_0_4_152)))
 (let ((?x5330 (* l_0_4_151 l_0_4_151)))
 (let ((?x5328 (* l_0_4_111 l_0_4_111)))
 (let ((?x5326 (* l_0_4_110 l_0_4_110)))
 (let ((?x5315 (* l_0_4_109 l_0_4_109)))
 (let ((?x5312 (* l_0_4_108 l_0_4_108)))
 (let ((?x10403 (+ (+ (+ (* l_0_4_106 l_0_4_106) (* l_0_4_107 l_0_4_107)) ?x5312) ?x5315)))
 (let ((?x10410 (- (- (- (- (- (+ (+ ?x10403 ?x5326) ?x5328) ?x5330) ?x5332) ?x5334) ?x5336) ?x5338)))
 (= (- ?x10410 ?x5340) 0.0))))))))))))))
(assert
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5770 (* ?x3807 l_0_4_169)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5768 (* ?x3804 l_0_4_168)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5766 (* ?x3801 l_0_4_167)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5764 (* ?x3798 l_0_4_166)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5762 (* ?x3795 l_0_4_165)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5760 (* ?x3792 l_0_4_164)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5758 (* ?x3789 l_0_4_124)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5756 (* ?x3786 l_0_4_123)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5754 (* ?x3783 l_0_4_122)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5752 (* ?x3780 l_0_4_121)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5750 (* ?x3777 l_0_4_120)))
 (let ((?x10429 (+ (+ (+ (+ (* (* 2.0 l_0_4_106) l_0_4_119) ?x5750) ?x5752) ?x5754) ?x5756)))
 (let ((?x10436 (- (- (- (- (- (- (+ ?x10429 ?x5758) ?x5760) ?x5762) ?x5764) ?x5766) ?x5768) ?x5770)))
 (= ?x10436 0.0))))))))))))))))))))))))))
(assert
 (let ((?x3807 (* 2.0 l_0_4_156)))
 (let ((?x5957 (* ?x3807 l_0_4_177)))
 (let ((?x3804 (* 2.0 l_0_4_155)))
 (let ((?x5955 (* ?x3804 l_0_4_176)))
 (let ((?x3801 (* 2.0 l_0_4_154)))
 (let ((?x5953 (* ?x3801 l_0_4_175)))
 (let ((?x3798 (* 2.0 l_0_4_153)))
 (let ((?x5951 (* ?x3798 l_0_4_174)))
 (let ((?x3795 (* 2.0 l_0_4_152)))
 (let ((?x5949 (* ?x3795 l_0_4_173)))
 (let ((?x3792 (* 2.0 l_0_4_151)))
 (let ((?x5947 (* ?x3792 l_0_4_172)))
 (let ((?x3789 (* 2.0 l_0_4_111)))
 (let ((?x5945 (* ?x3789 l_0_4_132)))
 (let ((?x3786 (* 2.0 l_0_4_110)))
 (let ((?x5926 (* ?x3786 l_0_4_131)))
 (let ((?x3783 (* 2.0 l_0_4_109)))
 (let ((?x5922 (* ?x3783 l_0_4_130)))
 (let ((?x3780 (* 2.0 l_0_4_108)))
 (let ((?x5918 (* ?x3780 l_0_4_129)))
 (let ((?x3777 (* 2.0 l_0_4_107)))
 (let ((?x5914 (* ?x3777 l_0_4_128)))
 (let ((?x10460 (+ (+ (+ (+ (* (* 2.0 l_0_4_106) l_0_4_127) ?x5914) ?x5918) ?x5922) ?x5926)))
 (let ((?x10467 (- (- (- (- (- (- (+ ?x10460 ?x5945) ?x5947) ?x5949) ?x5951) ?x5953) ?x5955) ?x5957)))
 (= ?x10467 0.0))))))))))))))))))))))))))
(assert
 (let ((?x8873 (* l_0_4_163 l_0_4_163)))
 (let ((?x8871 (* l_0_4_162 l_0_4_162)))
 (let ((?x8869 (* l_0_4_161 l_0_4_161)))
 (let ((?x8867 (* l_0_4_160 l_0_4_160)))
 (let ((?x8865 (* l_0_4_159 l_0_4_159)))
 (let ((?x8863 (* l_0_4_158 l_0_4_158)))
 (let ((?x8861 (* l_0_4_157 l_0_4_157)))
 (let ((?x8859 (* l_0_4_118 l_0_4_118)))
 (let ((?x8857 (* l_0_4_117 l_0_4_117)))
 (let ((?x8855 (* l_0_4_116 l_0_4_116)))
 (let ((?x8853 (* l_0_4_115 l_0_4_115)))
 (let ((?x8851 (* l_0_4_114 l_0_4_114)))
 (let ((?x10489 (+ (+ (+ (* l_0_4_112 l_0_4_112) (* l_0_4_113 l_0_4_113)) ?x8851) ?x8853)))
 (let ((?x10496 (- (- (- (- (+ (+ (+ ?x10489 ?x8855) ?x8857) ?x8859) ?x8861) ?x8863) ?x8865) ?x8867)))
 (= (- (- (- ?x10496 ?x8869) ?x8871) ?x8873) 0.0))))))))))))))))
(assert
 (let ((?x8941 (* 2.0 l_0_4_163)))
 (let ((?x8942 (* ?x8941 l_0_4_170)))
 (let ((?x8938 (* 2.0 l_0_4_162)))
 (let ((?x8939 (* ?x8938 l_0_4_169)))
 (let ((?x8935 (* 2.0 l_0_4_161)))
 (let ((?x8936 (* ?x8935 l_0_4_168)))
 (let ((?x8932 (* 2.0 l_0_4_160)))
 (let ((?x8933 (* ?x8932 l_0_4_167)))
 (let ((?x8929 (* 2.0 l_0_4_159)))
 (let ((?x8930 (* ?x8929 l_0_4_166)))
 (let ((?x8926 (* 2.0 l_0_4_158)))
 (let ((?x8927 (* ?x8926 l_0_4_165)))
 (let ((?x8923 (* 2.0 l_0_4_157)))
 (let ((?x8924 (* ?x8923 l_0_4_164)))
 (let ((?x8920 (* 2.0 l_0_4_118)))
 (let ((?x8921 (* ?x8920 l_0_4_125)))
 (let ((?x8917 (* 2.0 l_0_4_117)))
 (let ((?x8918 (* ?x8917 l_0_4_124)))
 (let ((?x8914 (* 2.0 l_0_4_116)))
 (let ((?x8915 (* ?x8914 l_0_4_123)))
 (let ((?x8911 (* 2.0 l_0_4_115)))
 (let ((?x8912 (* ?x8911 l_0_4_122)))
 (let ((?x8004 (* 2.0 l_0_4_114)))
 (let ((?x8909 (* ?x8004 l_0_4_121)))
 (let ((?x8001 (* 2.0 l_0_4_113)))
 (let ((?x8907 (* ?x8001 l_0_4_120)))
 (let ((?x10519 (+ (+ (+ (+ (* (* 2.0 l_0_4_112) l_0_4_119) ?x8907) ?x8909) ?x8912) ?x8915)))
 (let ((?x10526 (- (- (- (- (- (+ (+ ?x10519 ?x8918) ?x8921) ?x8924) ?x8927) ?x8930) ?x8933) ?x8936)))
 (= (- (- ?x10526 ?x8939) ?x8942) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x9120 (* l_0_4_171 l_0_4_171)))
 (let ((?x9118 (* l_0_4_170 l_0_4_170)))
 (let ((?x9116 (* l_0_4_169 l_0_4_169)))
 (let ((?x9114 (* l_0_4_168 l_0_4_168)))
 (let ((?x9112 (* l_0_4_167 l_0_4_167)))
 (let ((?x9110 (* l_0_4_166 l_0_4_166)))
 (let ((?x9108 (* l_0_4_165 l_0_4_165)))
 (let ((?x9106 (* l_0_4_164 l_0_4_164)))
 (let ((?x9104 (* l_0_4_126 l_0_4_126)))
 (let ((?x9102 (* l_0_4_125 l_0_4_125)))
 (let ((?x9100 (* l_0_4_124 l_0_4_124)))
 (let ((?x9098 (* l_0_4_123 l_0_4_123)))
 (let ((?x9096 (* l_0_4_122 l_0_4_122)))
 (let ((?x9094 (* l_0_4_121 l_0_4_121)))
 (let ((?x10560 (+ (+ (+ (* l_0_4_119 l_0_4_119) (* l_0_4_120 l_0_4_120)) ?x9094) ?x9096)))
 (let ((?x10567 (- (- (- (+ (+ (+ (+ ?x10560 ?x9098) ?x9100) ?x9102) ?x9104) ?x9106) ?x9108) ?x9110)))
 (= (- (- (- (- (- ?x10567 ?x9112) ?x9114) ?x9116) ?x9118) ?x9120) 0.0))))))))))))))))))
(assert
 (let ((?x9199 (* (* 2.0 l_0_4_171) l_0_4_179)))
 (let ((?x9196 (* (* 2.0 l_0_4_170) l_0_4_178)))
 (let ((?x9193 (* (* 2.0 l_0_4_169) l_0_4_177)))
 (let ((?x9190 (* (* 2.0 l_0_4_168) l_0_4_176)))
 (let ((?x9187 (* (* 2.0 l_0_4_167) l_0_4_175)))
 (let ((?x9184 (* (* 2.0 l_0_4_166) l_0_4_174)))
 (let ((?x9181 (* (* 2.0 l_0_4_165) l_0_4_173)))
 (let ((?x9178 (* (* 2.0 l_0_4_164) l_0_4_172)))
 (let ((?x9175 (* (* 2.0 l_0_4_126) l_0_4_134)))
 (let ((?x9172 (* (* 2.0 l_0_4_125) l_0_4_133)))
 (let ((?x9169 (* (* 2.0 l_0_4_124) l_0_4_132)))
 (let ((?x9166 (* (* 2.0 l_0_4_123) l_0_4_131)))
 (let ((?x9163 (* (* 2.0 l_0_4_122) l_0_4_130)))
 (let ((?x8130 (* 2.0 l_0_4_121)))
 (let ((?x9160 (* ?x8130 l_0_4_129)))
 (let ((?x8127 (* 2.0 l_0_4_120)))
 (let ((?x9158 (* ?x8127 l_0_4_128)))
 (let ((?x10594 (+ (+ (+ (+ (* (* 2.0 l_0_4_119) l_0_4_127) ?x9158) ?x9160) ?x9163) ?x9166)))
 (let ((?x10601 (- (- (- (- (+ (+ (+ ?x10594 ?x9169) ?x9172) ?x9175) ?x9178) ?x9181) ?x9184) ?x9187)))
 (= (- (- (- (- ?x10601 ?x9190) ?x9193) ?x9196) ?x9199) 0.0)))))))))))))))))))))
(assert
 (let ((?x9299 (* l_0_4_180 l_0_4_180)))
 (let ((?x9297 (* l_0_4_179 l_0_4_179)))
 (let ((?x9295 (* l_0_4_178 l_0_4_178)))
 (let ((?x9293 (* l_0_4_177 l_0_4_177)))
 (let ((?x9291 (* l_0_4_176 l_0_4_176)))
 (let ((?x9289 (* l_0_4_175 l_0_4_175)))
 (let ((?x9287 (* l_0_4_174 l_0_4_174)))
 (let ((?x9285 (* l_0_4_173 l_0_4_173)))
 (let ((?x9283 (* l_0_4_172 l_0_4_172)))
 (let ((?x9281 (* l_0_4_135 l_0_4_135)))
 (let ((?x9279 (* l_0_4_134 l_0_4_134)))
 (let ((?x9277 (* l_0_4_133 l_0_4_133)))
 (let ((?x9275 (* l_0_4_132 l_0_4_132)))
 (let ((?x9262 (* l_0_4_131 l_0_4_131)))
 (let ((?x9259 (* l_0_4_130 l_0_4_130)))
 (let ((?x9255 (* l_0_4_129 l_0_4_129)))
 (let ((?x10641 (+ (+ (+ (* l_0_4_127 l_0_4_127) (* l_0_4_128 l_0_4_128)) ?x9255) ?x9259)))
 (let ((?x10648 (- (- (+ (+ (+ (+ (+ ?x10641 ?x9262) ?x9275) ?x9277) ?x9279) ?x9281) ?x9283) ?x9285)))
 (let ((?x10655 (- (- (- (- (- (- (- ?x10648 ?x9287) ?x9289) ?x9291) ?x9293) ?x9295) ?x9297) ?x9299)))
 (= ?x10655 0.0)))))))))))))))))))))
(assert
 (let ((?x10677 (- (* (* 2.0 l_0_4_181) l_0_4_182) (* (* 2.0 l_0_4_226) l_0_4_227))))
 (= ?x10677 0.0)))
(assert
 (let ((?x10690 (- (* (* 2.0 l_0_4_181) l_0_4_187) (* (* 2.0 l_0_4_226) l_0_4_232))))
 (= ?x10690 0.0)))
(assert
 (let ((?x10703 (- (* (* 2.0 l_0_4_181) l_0_4_191) (* (* 2.0 l_0_4_226) l_0_4_236))))
 (= ?x10703 0.0)))
(assert
 (let ((?x10716 (- (* (* 2.0 l_0_4_181) l_0_4_196) (* (* 2.0 l_0_4_226) l_0_4_241))))
 (= ?x10716 0.0)))
(assert
 (let ((?x10729 (- (* (* 2.0 l_0_4_181) l_0_4_202) (* (* 2.0 l_0_4_226) l_0_4_247))))
 (= ?x10729 0.0)))
(assert
 (let ((?x10742 (- (* (* 2.0 l_0_4_181) l_0_4_217) (* (* 2.0 l_0_4_226) l_0_4_262))))
 (= ?x10742 0.0)))
(assert
 (let ((?x10760 (* l_0_4_228 l_0_4_228)))
 (let ((?x10758 (* l_0_4_227 l_0_4_227)))
 (let ((?x10757 (+ (* 1.0 (* l_0_4_182 l_0_4_182)) (* 1.0 (* l_0_4_183 l_0_4_183)))))
 (= (- (- ?x10757 ?x10758) ?x10760) 0.0)))))
(assert
 (let ((?x10773 (+ (* (* 2.0 l_0_4_182) l_0_4_191) (* (* 2.0 l_0_4_183) l_0_4_192))))
 (let ((?x10777 (- (- ?x10773 (* (* 2.0 l_0_4_227) l_0_4_236)) (* (* 2.0 l_0_4_228) l_0_4_237))))
 (= ?x10777 0.0))))
(assert
 (let ((?x10799 (+ (* (* 2.0 l_0_4_182) l_0_4_196) (* (* 2.0 l_0_4_183) l_0_4_197))))
 (let ((?x10803 (- (- ?x10799 (* (* 2.0 l_0_4_227) l_0_4_241)) (* (* 2.0 l_0_4_228) l_0_4_242))))
 (= ?x10803 0.0))))
(assert
 (let ((?x10825 (+ (* (* 2.0 l_0_4_182) l_0_4_202) (* (* 2.0 l_0_4_183) l_0_4_203))))
 (let ((?x10829 (- (- ?x10825 (* (* 2.0 l_0_4_227) l_0_4_247)) (* (* 2.0 l_0_4_228) l_0_4_248))))
 (= ?x10829 0.0))))
(assert
 (let ((?x10851 (+ (* (* 2.0 l_0_4_182) l_0_4_217) (* (* 2.0 l_0_4_183) l_0_4_218))))
 (let ((?x10855 (- (- ?x10851 (* (* 2.0 l_0_4_227) l_0_4_262)) (* (* 2.0 l_0_4_228) l_0_4_263))))
 (= ?x10855 0.0))))
(assert
 (let ((?x10892 (* l_0_4_235 l_0_4_235)))
 (let ((?x10890 (* l_0_4_234 l_0_4_234)))
 (let ((?x10888 (* l_0_4_233 l_0_4_233)))
 (let ((?x10886 (* l_0_4_232 l_0_4_232)))
 (let ((?x10879 (+ (* 1.0 (* l_0_4_187 l_0_4_187)) (* 1.0 (* l_0_4_188 l_0_4_188)))))
 (let ((?x10885 (+ (+ ?x10879 (* 1.0 (* l_0_4_189 l_0_4_189))) (* 1.0 (* l_0_4_190 l_0_4_190)))))
 (= (- (- (- (- ?x10885 ?x10886) ?x10888) ?x10890) ?x10892) 0.0))))))))
(assert
 (let ((?x10911 (+ (* (* 2.0 l_0_4_187) l_0_4_196) (* (* 2.0 l_0_4_188) l_0_4_197))))
 (let ((?x10915 (+ (+ ?x10911 (* (* 2.0 l_0_4_189) l_0_4_198)) (* (* 2.0 l_0_4_190) l_0_4_199))))
 (let ((?x10919 (- (- ?x10915 (* (* 2.0 l_0_4_232) l_0_4_241)) (* (* 2.0 l_0_4_233) l_0_4_242))))
 (let ((?x10923 (- (- ?x10919 (* (* 2.0 l_0_4_234) l_0_4_243)) (* (* 2.0 l_0_4_235) l_0_4_244))))
 (= ?x10923 0.0))))))
(assert
 (let ((?x10961 (+ (* (* 2.0 l_0_4_187) l_0_4_202) (* (* 2.0 l_0_4_188) l_0_4_203))))
 (let ((?x10965 (+ (+ ?x10961 (* (* 2.0 l_0_4_189) l_0_4_204)) (* (* 2.0 l_0_4_190) l_0_4_205))))
 (let ((?x10969 (- (- ?x10965 (* (* 2.0 l_0_4_232) l_0_4_247)) (* (* 2.0 l_0_4_233) l_0_4_248))))
 (let ((?x10973 (- (- ?x10969 (* (* 2.0 l_0_4_234) l_0_4_249)) (* (* 2.0 l_0_4_235) l_0_4_250))))
 (= ?x10973 0.0))))))
(assert
 (let ((?x11011 (+ (* (* 2.0 l_0_4_187) l_0_4_217) (* (* 2.0 l_0_4_188) l_0_4_218))))
 (let ((?x11015 (+ (+ ?x11011 (* (* 2.0 l_0_4_189) l_0_4_219)) (* (* 2.0 l_0_4_190) l_0_4_220))))
 (let ((?x11019 (- (- ?x11015 (* (* 2.0 l_0_4_232) l_0_4_262)) (* (* 2.0 l_0_4_233) l_0_4_263))))
 (let ((?x11023 (- (- ?x11019 (* (* 2.0 l_0_4_234) l_0_4_264)) (* (* 2.0 l_0_4_235) l_0_4_265))))
 (= ?x11023 0.0))))))
(assert
 (let ((?x11081 (* l_0_4_240 l_0_4_240)))
 (let ((?x11079 (* l_0_4_239 l_0_4_239)))
 (let ((?x11077 (* l_0_4_238 l_0_4_238)))
 (let ((?x11075 (* l_0_4_237 l_0_4_237)))
 (let ((?x11073 (* l_0_4_236 l_0_4_236)))
 (let ((?x11063 (+ (* 1.0 (* l_0_4_191 l_0_4_191)) (* 1.0 (* l_0_4_192 l_0_4_192)))))
 (let ((?x11069 (+ (+ ?x11063 (* 1.0 (* l_0_4_193 l_0_4_193))) (* 1.0 (* l_0_4_194 l_0_4_194)))))
 (let ((?x11078 (- (- (- (+ ?x11069 (* 1.0 (* l_0_4_195 l_0_4_195))) ?x11073) ?x11075) ?x11077)))
 (= (- (- ?x11078 ?x11079) ?x11081) 0.0))))))))))
(assert
 (let ((?x11103 (+ (* (* 2.0 l_0_4_191) l_0_4_196) (* (* 2.0 l_0_4_192) l_0_4_197))))
 (let ((?x11107 (+ (+ ?x11103 (* (* 2.0 l_0_4_193) l_0_4_198)) (* (* 2.0 l_0_4_194) l_0_4_199))))
 (let ((?x11111 (- (+ ?x11107 (* (* 2.0 l_0_4_195) l_0_4_200)) (* (* 2.0 l_0_4_236) l_0_4_241))))
 (let ((?x11115 (- (- ?x11111 (* (* 2.0 l_0_4_237) l_0_4_242)) (* (* 2.0 l_0_4_238) l_0_4_243))))
 (let ((?x11119 (- (- ?x11115 (* (* 2.0 l_0_4_239) l_0_4_244)) (* (* 2.0 l_0_4_240) l_0_4_245))))
 (= ?x11119 0.0)))))))
(assert
 (let ((?x11165 (+ (* (* 2.0 l_0_4_191) l_0_4_202) (* (* 2.0 l_0_4_192) l_0_4_203))))
 (let ((?x11169 (+ (+ ?x11165 (* (* 2.0 l_0_4_193) l_0_4_204)) (* (* 2.0 l_0_4_194) l_0_4_205))))
 (let ((?x11173 (- (+ ?x11169 (* (* 2.0 l_0_4_195) l_0_4_206)) (* (* 2.0 l_0_4_236) l_0_4_247))))
 (let ((?x11177 (- (- ?x11173 (* (* 2.0 l_0_4_237) l_0_4_248)) (* (* 2.0 l_0_4_238) l_0_4_249))))
 (let ((?x11181 (- (- ?x11177 (* (* 2.0 l_0_4_239) l_0_4_250)) (* (* 2.0 l_0_4_240) l_0_4_251))))
 (= ?x11181 0.0)))))))
(assert
 (let ((?x11227 (+ (* (* 2.0 l_0_4_191) l_0_4_217) (* (* 2.0 l_0_4_192) l_0_4_218))))
 (let ((?x11231 (+ (+ ?x11227 (* (* 2.0 l_0_4_193) l_0_4_219)) (* (* 2.0 l_0_4_194) l_0_4_220))))
 (let ((?x11235 (- (+ ?x11231 (* (* 2.0 l_0_4_195) l_0_4_221)) (* (* 2.0 l_0_4_236) l_0_4_262))))
 (let ((?x11239 (- (- ?x11235 (* (* 2.0 l_0_4_237) l_0_4_263)) (* (* 2.0 l_0_4_238) l_0_4_264))))
 (let ((?x11243 (- (- ?x11239 (* (* 2.0 l_0_4_239) l_0_4_265)) (* (* 2.0 l_0_4_240) l_0_4_266))))
 (= ?x11243 0.0)))))))
(assert
 (let ((?x11314 (* l_0_4_246 l_0_4_246)))
 (let ((?x11312 (* l_0_4_245 l_0_4_245)))
 (let ((?x11310 (* l_0_4_244 l_0_4_244)))
 (let ((?x11308 (* l_0_4_243 l_0_4_243)))
 (let ((?x11306 (* l_0_4_242 l_0_4_242)))
 (let ((?x11304 (* l_0_4_241 l_0_4_241)))
 (let ((?x11291 (+ (* 1.0 (* l_0_4_196 l_0_4_196)) (* 1.0 (* l_0_4_197 l_0_4_197)))))
 (let ((?x11297 (+ (+ ?x11291 (* 1.0 (* l_0_4_198 l_0_4_198))) (* 1.0 (* l_0_4_199 l_0_4_199)))))
 (let ((?x11303 (+ (+ ?x11297 (* 1.0 (* l_0_4_200 l_0_4_200))) (* 1.0 (* l_0_4_201 l_0_4_201)))))
 (= (- (- (- (- (- (- ?x11303 ?x11304) ?x11306) ?x11308) ?x11310) ?x11312) ?x11314) 0.0)))))))))))
(assert
 (let ((?x11339 (+ (* (* 2.0 l_0_4_196) l_0_4_217) (* (* 2.0 l_0_4_197) l_0_4_218))))
 (let ((?x11343 (+ (+ ?x11339 (* (* 2.0 l_0_4_198) l_0_4_219)) (* (* 2.0 l_0_4_199) l_0_4_220))))
 (let ((?x11347 (+ (+ ?x11343 (* (* 2.0 l_0_4_200) l_0_4_221)) (* (* 2.0 l_0_4_201) l_0_4_222))))
 (let ((?x11351 (- (- ?x11347 (* (* 2.0 l_0_4_241) l_0_4_262)) (* (* 2.0 l_0_4_242) l_0_4_263))))
 (let ((?x11355 (- (- ?x11351 (* (* 2.0 l_0_4_243) l_0_4_264)) (* (* 2.0 l_0_4_244) l_0_4_265))))
 (let ((?x11359 (- (- ?x11355 (* (* 2.0 l_0_4_245) l_0_4_266)) (* (* 2.0 l_0_4_246) l_0_4_267))))
 (= ?x11359 0.0))))))))
(assert
 (let ((?x11443 (* l_0_4_253 l_0_4_253)))
 (let ((?x11441 (* l_0_4_252 l_0_4_252)))
 (let ((?x11439 (* l_0_4_251 l_0_4_251)))
 (let ((?x11437 (* l_0_4_250 l_0_4_250)))
 (let ((?x11435 (* l_0_4_249 l_0_4_249)))
 (let ((?x11433 (* l_0_4_248 l_0_4_248)))
 (let ((?x11431 (* l_0_4_247 l_0_4_247)))
 (let ((?x11415 (+ (* 1.0 (* l_0_4_202 l_0_4_202)) (* 1.0 (* l_0_4_203 l_0_4_203)))))
 (let ((?x11421 (+ (+ ?x11415 (* 1.0 (* l_0_4_204 l_0_4_204))) (* 1.0 (* l_0_4_205 l_0_4_205)))))
 (let ((?x11427 (+ (+ ?x11421 (* 1.0 (* l_0_4_206 l_0_4_206))) (* 1.0 (* l_0_4_207 l_0_4_207)))))
 (let ((?x11436 (- (- (- (+ ?x11427 (* 1.0 (* l_0_4_208 l_0_4_208))) ?x11431) ?x11433) ?x11435)))
 (= (- (- (- (- ?x11436 ?x11437) ?x11439) ?x11441) ?x11443) 0.0)))))))))))))
(assert
 (let ((?x11511 (* l_0_4_270 l_0_4_270)))
 (let ((?x11509 (* l_0_4_269 l_0_4_269)))
 (let ((?x11507 (* l_0_4_268 l_0_4_268)))
 (let ((?x11505 (* l_0_4_267 l_0_4_267)))
 (let ((?x11503 (* l_0_4_266 l_0_4_266)))
 (let ((?x11501 (* l_0_4_265 l_0_4_265)))
 (let ((?x11499 (* l_0_4_264 l_0_4_264)))
 (let ((?x11497 (* l_0_4_263 l_0_4_263)))
 (let ((?x11495 (* l_0_4_262 l_0_4_262)))
 (let ((?x11473 (+ (* 1.0 (* l_0_4_217 l_0_4_217)) (* 1.0 (* l_0_4_218 l_0_4_218)))))
 (let ((?x11479 (+ (+ ?x11473 (* 1.0 (* l_0_4_219 l_0_4_219))) (* 1.0 (* l_0_4_220 l_0_4_220)))))
 (let ((?x11485 (+ (+ ?x11479 (* 1.0 (* l_0_4_221 l_0_4_221))) (* 1.0 (* l_0_4_222 l_0_4_222)))))
 (let ((?x11491 (+ (+ ?x11485 (* 1.0 (* l_0_4_223 l_0_4_223))) (* 1.0 (* l_0_4_224 l_0_4_224)))))
 (let ((?x11500 (- (- (- (+ ?x11491 (* 1.0 (* l_0_4_225 l_0_4_225))) ?x11495) ?x11497) ?x11499)))
 (= (- (- (- (- (- (- ?x11500 ?x11501) ?x11503) ?x11505) ?x11507) ?x11509) ?x11511) 0.0))))))))))))))))
(assert
 (>= l_0_4_1 0.0))
(assert
 (>= l_0_4_3 0.0))
(assert
 (>= l_0_4_6 0.0))
(assert
 (>= l_0_4_10 0.0))
(assert
 (>= l_0_4_15 0.0))
(assert
 (>= l_0_4_21 0.0))
(assert
 (>= l_0_4_28 0.0))
(assert
 (>= l_0_4_36 0.0))
(assert
 (>= l_0_4_45 0.0))
(assert
 (>= l_0_4_46 0.0))
(assert
 (>= l_0_4_48 0.0))
(assert
 (>= l_0_4_51 0.0))
(assert
 (>= l_0_4_55 0.0))
(assert
 (>= l_0_4_60 0.0))
(assert
 (>= l_0_4_66 0.0))
(assert
 (>= l_0_4_73 0.0))
(assert
 (>= l_0_4_81 0.0))
(assert
 (>= l_0_4_90 0.0))
(assert
 (>= l_0_4_91 0.0))
(assert
 (>= l_0_4_93 0.0))
(assert
 (>= l_0_4_96 0.0))
(assert
 (>= l_0_4_100 0.0))
(assert
 (>= l_0_4_105 0.0))
(assert
 (>= l_0_4_111 0.0))
(assert
 (>= l_0_4_118 0.0))
(assert
 (>= l_0_4_126 0.0))
(assert
 (>= l_0_4_135 0.0))
(assert
 (>= l_0_4_136 0.0))
(assert
 (>= l_0_4_138 0.0))
(assert
 (>= l_0_4_141 0.0))
(assert
 (>= l_0_4_145 0.0))
(assert
 (>= l_0_4_150 0.0))
(assert
 (>= l_0_4_156 0.0))
(assert
 (>= l_0_4_163 0.0))
(assert
 (>= l_0_4_171 0.0))
(assert
 (>= l_0_4_180 0.0))
(assert
 (>= l_0_4_181 0.0))
(assert
 (>= l_0_4_183 0.0))
(assert
 (>= l_0_4_186 0.0))
(assert
 (>= l_0_4_190 0.0))
(assert
 (>= l_0_4_195 0.0))
(assert
 (>= l_0_4_201 0.0))
(assert
 (>= l_0_4_208 0.0))
(assert
 (>= l_0_4_216 0.0))
(assert
 (>= l_0_4_225 0.0))
(assert
 (>= l_0_4_226 0.0))
(assert
 (>= l_0_4_228 0.0))
(assert
 (>= l_0_4_231 0.0))
(assert
 (>= l_0_4_235 0.0))
(assert
 (>= l_0_4_240 0.0))
(assert
 (>= l_0_4_246 0.0))
(assert
 (>= l_0_4_253 0.0))
(assert
 (>= l_0_4_261 0.0))
(assert
 (>= l_0_4_270 0.0))
(assert
 (let ((?x11635 (* l_0_5_46 l_0_5_46)))
 (let ((?x11604 (- (- (* (- l_0_5_1) l_0_5_1) (* (* 2.0 l_0_5_196) l_0_5_202)) (* (* 2.0 l_0_5_197) l_0_5_203))))
 (let ((?x11610 (- (- ?x11604 (* (* 2.0 l_0_5_198) l_0_5_204)) (* (* 2.0 l_0_5_199) l_0_5_205))))
 (let ((?x11616 (- (- ?x11610 (* (* 2.0 l_0_5_200) l_0_5_206)) (* (* 2.0 l_0_5_201) l_0_5_207))))
 (let ((?x11622 (- (- ?x11616 (* (* 2.0 l_0_5_286) l_0_5_292)) (* (* 2.0 l_0_5_287) l_0_5_293))))
 (let ((?x11628 (- (- ?x11622 (* (* 2.0 l_0_5_288) l_0_5_294)) (* (* 2.0 l_0_5_289) l_0_5_295))))
 (let ((?x11634 (- (- ?x11628 (* (* 2.0 l_0_5_290) l_0_5_296)) (* (* 2.0 l_0_5_291) l_0_5_297))))
 (= (+ (+ ?x11634 ?x11635) 1.0) 0.0)))))))))
(assert
 (let ((?x11759 (* l_0_5_91 l_0_5_91)))
 (let ((?x11722 (- (- (* l_0_5_136 l_0_5_136) (* (* 2.0 l_0_5_202) l_0_5_217)) (* (* 2.0 l_0_5_203) l_0_5_218))))
 (let ((?x11728 (- (- ?x11722 (* (* 2.0 l_0_5_204) l_0_5_219)) (* (* 2.0 l_0_5_205) l_0_5_220))))
 (let ((?x11734 (- (- ?x11728 (* (* 2.0 l_0_5_206) l_0_5_221)) (* (* 2.0 l_0_5_207) l_0_5_222))))
 (let ((?x11740 (- (- ?x11734 (* (* 2.0 l_0_5_208) l_0_5_223)) (* (* 2.0 l_0_5_292) l_0_5_307))))
 (let ((?x11746 (- (- ?x11740 (* (* 2.0 l_0_5_293) l_0_5_308)) (* (* 2.0 l_0_5_294) l_0_5_309))))
 (let ((?x11752 (- (- ?x11746 (* (* 2.0 l_0_5_295) l_0_5_310)) (* (* 2.0 l_0_5_296) l_0_5_311))))
 (let ((?x11758 (- (- ?x11752 (* (* 2.0 l_0_5_297) l_0_5_312)) (* (* 2.0 l_0_5_298) l_0_5_313))))
 (= (- (- ?x11758 ?x11759) 1.0) 0.0))))))))))
(assert
 (let ((?x11859 (- (- _a_3_ (* (* 2.0 l_0_5_181) l_0_5_187)) (* (* 2.0 l_0_5_271) l_0_5_277))))
 (= ?x11859 0.0)))
(assert
 (let ((?x11635 (* l_0_5_46 l_0_5_46)))
 (let ((?x11877 (- (- _a_4_ (* l_0_5_1 l_0_5_1)) (* (* 2.0 l_0_5_187) l_0_5_191))))
 (let ((?x11883 (- (- ?x11877 (* (* 2.0 l_0_5_188) l_0_5_192)) (* (* 2.0 l_0_5_189) l_0_5_193))))
 (let ((?x11889 (- (- ?x11883 (* (* 2.0 l_0_5_190) l_0_5_194)) (* (* 2.0 l_0_5_277) l_0_5_281))))
 (let ((?x11895 (- (- ?x11889 (* (* 2.0 l_0_5_278) l_0_5_282)) (* (* 2.0 l_0_5_279) l_0_5_283))))
 (= (+ (- ?x11895 (* (* 2.0 l_0_5_280) l_0_5_284)) ?x11635) 0.0)))))))
(assert
 (let ((?x11759 (* l_0_5_91 l_0_5_91)))
 (let ((?x11955 (- (+ _a_5_ (* l_0_5_136 l_0_5_136)) (* (* 2.0 l_0_5_182) l_0_5_187))))
 (let ((?x11961 (- (- ?x11955 (* (* 2.0 l_0_5_183) l_0_5_188)) (* (* 2.0 l_0_5_272) l_0_5_277))))
 (= (- (- ?x11961 (* (* 2.0 l_0_5_273) l_0_5_278)) ?x11759) 0.0)))))
(assert
 (let ((?x11998 (* l_0_5_271 l_0_5_271)))
 (= (- (- (- _a_0_) (* (* 1.0 l_0_5_181) l_0_5_181)) ?x11998) 0.0)))
(assert
 (let ((?x11759 (* l_0_5_91 l_0_5_91)))
 (let ((?x12014 (* l_0_5_226 l_0_5_226)))
 (let ((?x12013 (- (- (- _a_1_) (* l_0_5_136 l_0_5_136)) (* (* 2.0 l_0_5_181) l_0_5_209))))
 (= (+ (- (+ ?x12013 ?x12014) (* (* 2.0 l_0_5_271) l_0_5_299)) ?x11759) 0.0)))))
(assert
 (let ((?x11635 (* l_0_5_46 l_0_5_46)))
 (let ((?x12014 (* l_0_5_226 l_0_5_226)))
 (let ((?x12042 (- (+ (- _a_2_) (* l_0_5_1 l_0_5_1)) (* (* 2.0 l_0_5_181) l_0_5_184))))
 (= (- (- (- ?x12042 ?x12014) (* (* 2.0 l_0_5_271) l_0_5_274)) ?x11635) 0.0)))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12072 (* ?x12071 l_0_5_47)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12070 (* ?x12069 l_0_5_2)))
 (= (+ ?x12070 ?x12072) 0.0))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x12136 (* ?x12135 l_0_5_72)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x12133 (* ?x12132 l_0_5_71)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x12130 (* ?x12129 l_0_5_70)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x12127 (* ?x12126 l_0_5_69)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x12124 (* ?x12123 l_0_5_68)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x12121 (* ?x12120 l_0_5_67)))
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12118 (* ?x12071 l_0_5_49)))
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x12116 (* ?x12115 l_0_5_252)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x12113 (* ?x12112 l_0_5_251)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x12110 (* ?x12109 l_0_5_250)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x12107 (* ?x12106 l_0_5_249)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x12104 (* ?x12103 l_0_5_248)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x12101 (* ?x12100 l_0_5_247)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x12098 (* ?x12097 l_0_5_27)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x12095 (* ?x12094 l_0_5_26)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x12092 (* ?x12091 l_0_5_25)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12089 (* ?x12088 l_0_5_24)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12086 (* ?x12085 l_0_5_23)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x12079 (* ?x12078 l_0_5_22)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12076 (* ?x12069 l_0_5_4)))
 (let ((?x12102 (- (+ (+ (+ (+ (+ (+ ?x12076 ?x12079) ?x12086) ?x12089) ?x12092) ?x12095) ?x12098) ?x12101)))
 (let ((?x12122 (- (+ (- (- (- (- (- ?x12102 ?x12104) ?x12107) ?x12110) ?x12113) ?x12116) ?x12118) ?x12121)))
 (= (- (- (- (- (- ?x12122 ?x12124) ?x12127) ?x12130) ?x12133) ?x12136) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12240 (* ?x12071 l_0_5_52)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_7) ?x12240) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12246 (* ?x12071 l_0_5_56)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_11) ?x12246) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12256 (* ?x12071 l_0_5_61)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_16) ?x12256) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12266 (* ?x12071 l_0_5_67)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_22) ?x12266) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12322 (* ?x12071 l_0_5_74)))
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x12116 (* ?x12115 l_0_5_252)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x12113 (* ?x12112 l_0_5_251)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x12110 (* ?x12109 l_0_5_250)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x12107 (* ?x12106 l_0_5_249)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x12104 (* ?x12103 l_0_5_248)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x12101 (* ?x12100 l_0_5_247)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x12314 (* ?x12313 l_0_5_162)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x12311 (* ?x12310 l_0_5_161)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x12308 (* ?x12307 l_0_5_160)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x12305 (* ?x12304 l_0_5_159)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x12302 (* ?x12301 l_0_5_158)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x12299 (* ?x12298 l_0_5_157)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x12296 (* ?x12295 l_0_5_117)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x12293 (* ?x12292 l_0_5_116)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x12290 (* ?x12289 l_0_5_115)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12287 (* ?x12286 l_0_5_114)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12284 (* ?x12283 l_0_5_113)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12274 (* ?x12069 l_0_5_29)))
 (let ((?x12291 (+ (+ (+ (+ ?x12274 (* (* 2.0 l_0_5_106) l_0_5_112)) ?x12284) ?x12287) ?x12290)))
 (let ((?x12312 (- (- (- (- (- (+ (+ ?x12291 ?x12293) ?x12296) ?x12299) ?x12302) ?x12305) ?x12308) ?x12311)))
 (let ((?x12321 (+ (+ (+ (+ (+ (+ (- ?x12312 ?x12314) ?x12101) ?x12104) ?x12107) ?x12110) ?x12113) ?x12116)))
 (= (+ ?x12321 ?x12322) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12386 (* ?x12071 l_0_5_82)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x12384 (* ?x12383 l_0_5_151)))
 (let ((?x12276 (* 2.0 l_0_5_106)))
 (let ((?x12381 (* ?x12276 l_0_5_91)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12380 (* ?x12069 l_0_5_37)))
 (= (+ (+ (- ?x12380 ?x12381) ?x12384) ?x12386) 0.0))))))))))
(assert
 (let ((?x12410 (* l_0_5_48 l_0_5_48)))
 (let ((?x12408 (* l_0_5_47 l_0_5_47)))
 (let ((?x12411 (+ (+ (- (* (- l_0_5_2) l_0_5_2) (* l_0_5_3 l_0_5_3)) ?x12408) ?x12410)))
 (= ?x12411 0.0)))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12432 (* ?x12431 l_0_5_50)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12429 (* ?x12428 l_0_5_49)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12426 (* ?x12425 l_0_5_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_4) ?x12426) ?x12429) ?x12432) 0.0))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12470 (* ?x12431 l_0_5_53)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12468 (* ?x12428 l_0_5_52)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12466 (* ?x12425 l_0_5_8)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12464 (* ?x12463 l_0_5_7)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x12314 (* ?x12313 l_0_5_162)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x12311 (* ?x12310 l_0_5_161)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x12308 (* ?x12307 l_0_5_160)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x12305 (* ?x12304 l_0_5_159)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x12302 (* ?x12301 l_0_5_158)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x12299 (* ?x12298 l_0_5_157)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x12296 (* ?x12295 l_0_5_117)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x12293 (* ?x12292 l_0_5_116)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x12290 (* ?x12289 l_0_5_115)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12287 (* ?x12286 l_0_5_114)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12284 (* ?x12283 l_0_5_113)))
 (let ((?x12455 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_112) ?x12284) ?x12287) ?x12290) ?x12293)))
 (let ((?x12462 (+ (+ (+ (+ (+ (+ (- ?x12455 ?x12296) ?x12299) ?x12302) ?x12305) ?x12308) ?x12311) ?x12314)))
 (= (+ (+ (- (- ?x12462 ?x12464) ?x12466) ?x12468) ?x12470) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12520 (* ?x12431 l_0_5_57)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12518 (* ?x12428 l_0_5_56)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12516 (* ?x12511 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_11) l_0_5_2) ?x12516) ?x12518) ?x12520) 0.0))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12544 (* ?x12431 l_0_5_62)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12542 (* ?x12428 l_0_5_61)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12535 (* ?x12085 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_16) l_0_5_2) ?x12535) ?x12542) ?x12544) 0.0))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12431 l_0_5_68)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12428 l_0_5_67)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12559 (* ?x12558 l_0_5_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_22) ?x12559) ?x12566) ?x12568) 0.0))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12591 (* ?x12431 l_0_5_75)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12589 (* ?x12428 l_0_5_74)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12582 (* ?x12425 l_0_5_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_2) l_0_5_29) ?x12582) ?x12589) ?x12591) 0.0))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12624 (* ?x12431 l_0_5_83)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12622 (* ?x12428 l_0_5_82)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12620 (* ?x12425 l_0_5_38)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12618 (* ?x12463 l_0_5_37)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x12616 (* ?x12615 l_0_5_152)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x12613 (* ?x12612 l_0_5_151)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12605 (* ?x12283 l_0_5_93)))
 (let ((?x12617 (+ (+ (- (* (* (- 2.0) l_0_5_106) l_0_5_92) ?x12605) ?x12613) ?x12616)))
 (= (+ (+ (- (- ?x12617 ?x12618) ?x12620) ?x12622) ?x12624) 0.0)))))))))))))))))
(assert
 (let ((?x12671 (* l_0_5_6 l_0_5_6)))
 (let ((?x12669 (* l_0_5_51 l_0_5_51)))
 (let ((?x12667 (* l_0_5_50 l_0_5_50)))
 (let ((?x12665 (* l_0_5_5 l_0_5_5)))
 (let ((?x12668 (+ (- (+ (* (- l_0_5_4) l_0_5_4) (* l_0_5_49 l_0_5_49)) ?x12665) ?x12667)))
 (= (- (+ ?x12668 ?x12669) ?x12671) 0.0)))))))
(assert
 (let ((?x12701 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12698 (* ?x12697 l_0_5_54)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12695 (* ?x12694 l_0_5_53)))
 (let ((?x12692 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12689 (* ?x12688 l_0_5_52)))
 (let ((?x12699 (+ (+ (- (+ (* (* (- 2.0) l_0_5_4) l_0_5_7) ?x12689) ?x12692) ?x12695) ?x12698)))
 (= (- ?x12699 ?x12701) 0.0)))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12742 (* ?x12697 l_0_5_58)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12740 (* ?x12694 l_0_5_57)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12738 (* ?x12688 l_0_5_56)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12736 (* ?x12735 l_0_5_6)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12733 (* ?x12511 l_0_5_5)))
 (let ((?x12741 (+ (+ (- (- (* (* (- 2.0) l_0_5_11) l_0_5_4) ?x12733) ?x12736) ?x12738) ?x12740)))
 (= (+ ?x12741 ?x12742) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12777 (* ?x12697 l_0_5_63)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12775 (* ?x12694 l_0_5_62)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12773 (* ?x12688 l_0_5_61)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12765 (* ?x12088 l_0_5_6)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12762 (* ?x12085 l_0_5_5)))
 (let ((?x12776 (+ (+ (- (- (* (* (- 2.0) l_0_5_16) l_0_5_4) ?x12762) ?x12765) ?x12773) ?x12775)))
 (= (+ ?x12776 ?x12777) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12814 (* ?x12697 l_0_5_69)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12812 (* ?x12694 l_0_5_68)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12810 (* ?x12688 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x12808 (* ?x12807 l_0_5_6)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12799 (* ?x12558 l_0_5_5)))
 (let ((?x12813 (+ (+ (- (- (* (* (- 2.0) l_0_5_22) l_0_5_4) ?x12799) ?x12808) ?x12810) ?x12812)))
 (= (+ ?x12813 ?x12814) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12852 (* ?x12697 l_0_5_76)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12850 (* ?x12694 l_0_5_75)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12848 (* ?x12688 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x12846 (* ?x12845 l_0_5_6)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x12837 (* ?x12836 l_0_5_5)))
 (let ((?x12851 (+ (+ (- (- (* (* (- 2.0) l_0_5_29) l_0_5_4) ?x12837) ?x12846) ?x12848) ?x12850)))
 (= (+ ?x12851 ?x12852) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12905 (* ?x12697 l_0_5_84)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12903 (* ?x12694 l_0_5_83)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12901 (* ?x12688 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x12899 (* ?x12898 l_0_5_6)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x12896 (* ?x12895 l_0_5_5)))
 (let ((?x12892 (* 2.0 l_0_5_37)))
 (let ((?x12893 (* ?x12892 l_0_5_4)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x12890 (* ?x12889 l_0_5_153)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x12887 (* ?x12886 l_0_5_152)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x12884 (* ?x12883 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12875 (* ?x12286 l_0_5_96)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12872 (* ?x12283 l_0_5_95)))
 (let ((?x12888 (+ (+ (- (- (* (* (- 2.0) l_0_5_106) l_0_5_94) ?x12872) ?x12875) ?x12884) ?x12887)))
 (let ((?x12891 (+ ?x12888 ?x12890)))
 (= (+ (+ (+ (- (- (- ?x12891 ?x12893) ?x12896) ?x12899) ?x12901) ?x12903) ?x12905) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12973 (* l_0_5_9 l_0_5_9)))
 (let ((?x12971 (* l_0_5_8 l_0_5_8)))
 (let ((?x12969 (* l_0_5_7 l_0_5_7)))
 (let ((?x12967 (* l_0_5_55 l_0_5_55)))
 (let ((?x12965 (* l_0_5_54 l_0_5_54)))
 (let ((?x12963 (* l_0_5_53 l_0_5_53)))
 (let ((?x12966 (+ (+ (+ (* (- l_0_5_10) l_0_5_10) (* l_0_5_52 l_0_5_52)) ?x12963) ?x12965)))
 (= (- (- (- (+ ?x12966 ?x12967) ?x12969) ?x12971) ?x12973) 0.0)))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x12136 (* ?x12135 l_0_5_72)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x12133 (* ?x12132 l_0_5_71)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x12130 (* ?x12129 l_0_5_70)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x12127 (* ?x12126 l_0_5_69)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x12124 (* ?x12123 l_0_5_68)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x12121 (* ?x12120 l_0_5_67)))
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13015 (* ?x13014 l_0_5_59)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13012 (* ?x13011 l_0_5_58)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13009 (* ?x13008 l_0_5_57)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13006 (* ?x13005 l_0_5_56)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x12098 (* ?x12097 l_0_5_27)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x12095 (* ?x12094 l_0_5_26)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x12092 (* ?x12091 l_0_5_25)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12089 (* ?x12088 l_0_5_24)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12086 (* ?x12085 l_0_5_23)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x12079 (* ?x12078 l_0_5_22)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12997 (* ?x12735 l_0_5_9)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12995 (* ?x12511 l_0_5_8)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x12993 (* ?x12992 l_0_5_7)))
 (let ((?x12998 (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_14) ?x12993) ?x12995) ?x12997)))
 (let ((?x13007 (+ (- (- (- (- (- (- ?x12998 ?x12079) ?x12086) ?x12089) ?x12092) ?x12095) ?x12098) ?x13006)))
 (let ((?x13020 (+ (+ (+ (+ (+ (+ (+ ?x13007 ?x13009) ?x13012) ?x13015) ?x12121) ?x12124) ?x12127) ?x12130)))
 (= (+ (+ ?x13020 ?x12133) ?x12136) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13086 (* ?x13014 l_0_5_64)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13084 (* ?x13011 l_0_5_63)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13082 (* ?x13008 l_0_5_62)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13080 (* ?x13005 l_0_5_61)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13078 (* ?x12088 l_0_5_9)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13069 (* ?x12085 l_0_5_8)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x13065 (* ?x12078 l_0_5_7)))
 (let ((?x13081 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_19) ?x13065) ?x13069) ?x13078) ?x13080)))
 (= (+ (+ (+ ?x13081 ?x13082) ?x13084) ?x13086) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13134 (* ?x13014 l_0_5_70)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13132 (* ?x13011 l_0_5_69)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13130 (* ?x13008 l_0_5_68)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13128 (* ?x13005 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x13126 (* ?x12807 l_0_5_9)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x13117 (* ?x12558 l_0_5_8)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x13114 (* ?x13112 l_0_5_7)))
 (let ((?x13129 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_25) ?x13114) ?x13117) ?x13126) ?x13128)))
 (= (+ (+ (+ ?x13129 ?x13130) ?x13132) ?x13134) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13182 (* ?x13014 l_0_5_77)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13180 (* ?x13011 l_0_5_76)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13178 (* ?x13008 l_0_5_75)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13176 (* ?x13005 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x13174 (* ?x12845 l_0_5_9)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x13165 (* ?x12836 l_0_5_8)))
 (let ((?x13160 (* 2.0 l_0_5_29)))
 (let ((?x13162 (* ?x13160 l_0_5_7)))
 (let ((?x13177 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_32) ?x13162) ?x13165) ?x13174) ?x13176)))
 (= (+ (+ (+ ?x13177 ?x13178) ?x13180) ?x13182) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13250 (* ?x13014 l_0_5_85)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13248 (* ?x13011 l_0_5_84)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13246 (* ?x13008 l_0_5_83)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13244 (* ?x13005 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x13242 (* ?x12898 l_0_5_9)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x13240 (* ?x12895 l_0_5_8)))
 (let ((?x12892 (* 2.0 l_0_5_37)))
 (let ((?x13238 (* ?x12892 l_0_5_7)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x13236 (* ?x13235 l_0_5_154)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x13233 (* ?x13232 l_0_5_153)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x13230 (* ?x13229 l_0_5_152)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x13227 (* ?x13226 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x13224 (* ?x12286 l_0_5_99)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x13222 (* ?x12283 l_0_5_98)))
 (let ((?x12276 (* 2.0 l_0_5_106)))
 (let ((?x13213 (* ?x12276 l_0_5_97)))
 (let ((?x13208 (* 2.0 l_0_5_100)))
 (let ((?x13210 (* ?x13208 l_0_5_109)))
 (let ((?x12990 (* (- 2.0) l_0_5_10)))
 (let ((?x13206 (* ?x12990 l_0_5_40)))
 (let ((?x13234 (+ (+ (+ (- (- (- (- ?x13206 ?x13210) ?x13213) ?x13222) ?x13224) ?x13227) ?x13230) ?x13233)))
 (let ((?x13249 (+ (+ (+ (- (- (- (+ ?x13234 ?x13236) ?x13238) ?x13240) ?x13242) ?x13244) ?x13246) ?x13248)))
 (= (+ ?x13249 ?x13250) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13339 (* l_0_5_60 l_0_5_60)))
 (let ((?x13337 (* l_0_5_59 l_0_5_59)))
 (let ((?x13335 (* l_0_5_58 l_0_5_58)))
 (let ((?x13333 (* l_0_5_57 l_0_5_57)))
 (let ((?x13331 (* l_0_5_56 l_0_5_56)))
 (let ((?x13329 (* l_0_5_15 l_0_5_15)))
 (let ((?x13327 (* l_0_5_14 l_0_5_14)))
 (let ((?x13314 (* l_0_5_13 l_0_5_13)))
 (let ((?x13328 (- (- (- (* (- l_0_5_11) l_0_5_11) (* l_0_5_12 l_0_5_12)) ?x13314) ?x13327)))
 (= (+ (+ (+ (+ (+ (- ?x13328 ?x13329) ?x13331) ?x13333) ?x13335) ?x13337) ?x13339) 0.0)))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13388 (* ?x13387 l_0_5_65)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13385 (* ?x13384 l_0_5_64)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13382 (* ?x13381 l_0_5_63)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13379 (* ?x13378 l_0_5_62)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13376 (* ?x13375 l_0_5_61)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13373 (* ?x13372 l_0_5_20)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13370 (* ?x13369 l_0_5_19)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13367 (* ?x12735 l_0_5_18)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13365 (* ?x12511 l_0_5_17)))
 (let ((?x13374 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_16) ?x13365) ?x13367) ?x13370) ?x13373)))
 (= (+ (+ (+ (+ (+ ?x13374 ?x13376) ?x13379) ?x13382) ?x13385) ?x13388) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13447 (* ?x13387 l_0_5_71)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13445 (* ?x13384 l_0_5_70)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13443 (* ?x13381 l_0_5_69)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13441 (* ?x13378 l_0_5_68)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13439 (* ?x13375 l_0_5_67)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13437 (* ?x13372 l_0_5_26)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13427 (* ?x13369 l_0_5_25)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13424 (* ?x12735 l_0_5_24)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13420 (* ?x12511 l_0_5_23)))
 (let ((?x13438 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_22) ?x13420) ?x13424) ?x13427) ?x13437)))
 (= (+ (+ (+ (+ (+ ?x13438 ?x13439) ?x13441) ?x13443) ?x13445) ?x13447) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13506 (* ?x13387 l_0_5_78)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13504 (* ?x13384 l_0_5_77)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13502 (* ?x13381 l_0_5_76)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13500 (* ?x13378 l_0_5_75)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13498 (* ?x13375 l_0_5_74)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13496 (* ?x13372 l_0_5_33)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13486 (* ?x13369 l_0_5_32)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13483 (* ?x12735 l_0_5_31)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13479 (* ?x12511 l_0_5_30)))
 (let ((?x13497 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_29) ?x13479) ?x13483) ?x13486) ?x13496)))
 (= (+ (+ (+ (+ (+ ?x13497 ?x13498) ?x13500) ?x13502) ?x13504) ?x13506) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13595 (* ?x13387 l_0_5_86)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13593 (* ?x13384 l_0_5_85)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13591 (* ?x13381 l_0_5_84)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13589 (* ?x13378 l_0_5_83)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13587 (* ?x13375 l_0_5_82)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x13585 (* ?x13584 l_0_5_155)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13582 (* ?x13372 l_0_5_41)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x13580 (* ?x13579 l_0_5_154)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x13577 (* ?x13576 l_0_5_153)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x13574 (* ?x13573 l_0_5_152)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x13571 (* ?x13570 l_0_5_151)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13568 (* ?x13369 l_0_5_40)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13566 (* ?x12735 l_0_5_39)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13564 (* ?x12511 l_0_5_38)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x13562 (* ?x12992 l_0_5_37)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x13560 (* ?x13559 l_0_5_110)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x13557 (* ?x13556 l_0_5_109)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x13554 (* ?x13545 l_0_5_108)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x13542 (* ?x13540 l_0_5_107)))
 (let ((?x13561 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_106) ?x13542) ?x13554) ?x13557) ?x13560)))
 (let ((?x13578 (+ (+ (+ (- (- (- (- ?x13561 ?x13562) ?x13564) ?x13566) ?x13568) ?x13571) ?x13574) ?x13577)))
 (let ((?x13594 (+ (+ (+ (+ (+ (- (+ ?x13578 ?x13580) ?x13582) ?x13585) ?x13587) ?x13589) ?x13591) ?x13593)))
 (= (+ ?x13594 ?x13595) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13704 (* l_0_5_66 l_0_5_66)))
 (let ((?x13702 (* l_0_5_65 l_0_5_65)))
 (let ((?x13700 (* l_0_5_64 l_0_5_64)))
 (let ((?x13698 (* l_0_5_63 l_0_5_63)))
 (let ((?x13696 (* l_0_5_62 l_0_5_62)))
 (let ((?x13694 (* l_0_5_61 l_0_5_61)))
 (let ((?x13692 (* l_0_5_21 l_0_5_21)))
 (let ((?x13690 (* l_0_5_20 l_0_5_20)))
 (let ((?x13675 (* l_0_5_19 l_0_5_19)))
 (let ((?x13672 (* l_0_5_18 l_0_5_18)))
 (let ((?x13689 (- (- (- (* (- l_0_5_16) l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13672) ?x13675)))
 (let ((?x13703 (+ (+ (+ (+ (+ (- (- ?x13689 ?x13690) ?x13692) ?x13694) ?x13696) ?x13698) ?x13700) ?x13702)))
 (= (+ ?x13703 ?x13704) 0.0))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x12136 (* ?x12135 l_0_5_72)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x12133 (* ?x12132 l_0_5_71)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x12130 (* ?x12129 l_0_5_70)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x12127 (* ?x12126 l_0_5_69)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x12124 (* ?x12123 l_0_5_68)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x12121 (* ?x12120 l_0_5_67)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x12098 (* ?x12097 l_0_5_27)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x12095 (* ?x12094 l_0_5_26)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x12092 (* ?x12091 l_0_5_25)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12089 (* ?x12088 l_0_5_24)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12086 (* ?x12085 l_0_5_23)))
 (let ((?x13737 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_22) ?x12086) ?x12089) ?x12092) ?x12095)))
 (let ((?x13744 (+ (+ (+ (+ (+ (+ (- ?x13737 ?x12098) ?x12121) ?x12124) ?x12127) ?x12130) ?x12133) ?x12136)))
 (= ?x13744 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13779 (* ?x12135 l_0_5_79)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13777 (* ?x12132 l_0_5_78)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13775 (* ?x12129 l_0_5_77)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13773 (* ?x12126 l_0_5_76)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13771 (* ?x12123 l_0_5_75)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13769 (* ?x12120 l_0_5_74)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13767 (* ?x12097 l_0_5_34)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13765 (* ?x12094 l_0_5_33)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13763 (* ?x12091 l_0_5_32)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13761 (* ?x12088 l_0_5_31)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13759 (* ?x12085 l_0_5_30)))
 (let ((?x13766 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_29) ?x13759) ?x13761) ?x13763) ?x13765)))
 (let ((?x13780 (+ (+ (+ (+ (+ (+ (- ?x13766 ?x13767) ?x13769) ?x13771) ?x13773) ?x13775) ?x13777) ?x13779)))
 (= ?x13780 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13875 (* ?x12135 l_0_5_87)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13873 (* ?x12132 l_0_5_86)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13871 (* ?x12129 l_0_5_85)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13869 (* ?x12126 l_0_5_84)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13867 (* ?x12123 l_0_5_83)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13865 (* ?x12120 l_0_5_82)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13863 (* ?x12097 l_0_5_42)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13861 (* ?x12094 l_0_5_41)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13859 (* ?x12091 l_0_5_40)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13857 (* ?x12088 l_0_5_39)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13855 (* ?x12085 l_0_5_38)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x13853 (* ?x12078 l_0_5_37)))
 (let ((?x13851 (* l_0_5_156 l_0_5_156)))
 (let ((?x13849 (* l_0_5_155 l_0_5_155)))
 (let ((?x13847 (* l_0_5_154 l_0_5_154)))
 (let ((?x13845 (* l_0_5_153 l_0_5_153)))
 (let ((?x13843 (* l_0_5_152 l_0_5_152)))
 (let ((?x13841 (* l_0_5_151 l_0_5_151)))
 (let ((?x13839 (* l_0_5_111 l_0_5_111)))
 (let ((?x13837 (* l_0_5_110 l_0_5_110)))
 (let ((?x13826 (* l_0_5_109 l_0_5_109)))
 (let ((?x13823 (* l_0_5_108 l_0_5_108)))
 (let ((?x13825 (- (- (* (- l_0_5_106) l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x13823)))
 (let ((?x13848 (+ (+ (+ (+ (- (- (- ?x13825 ?x13826) ?x13837) ?x13839) ?x13841) ?x13843) ?x13845) ?x13847)))
 (let ((?x13852 (+ (+ ?x13848 ?x13849) ?x13851)))
 (let ((?x13866 (+ (- (- (- (- (- (- ?x13852 ?x13853) ?x13855) ?x13857) ?x13859) ?x13861) ?x13863) ?x13865)))
 (= (+ (+ (+ (+ (+ ?x13866 ?x13867) ?x13869) ?x13871) ?x13873) ?x13875) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13979 (* l_0_5_73 l_0_5_73)))
 (let ((?x13977 (* l_0_5_72 l_0_5_72)))
 (let ((?x13975 (* l_0_5_71 l_0_5_71)))
 (let ((?x13973 (* l_0_5_70 l_0_5_70)))
 (let ((?x13971 (* l_0_5_69 l_0_5_69)))
 (let ((?x13969 (* l_0_5_68 l_0_5_68)))
 (let ((?x13967 (* l_0_5_67 l_0_5_67)))
 (let ((?x13965 (* l_0_5_28 l_0_5_28)))
 (let ((?x13963 (* l_0_5_27 l_0_5_27)))
 (let ((?x13961 (* l_0_5_26 l_0_5_26)))
 (let ((?x13945 (* l_0_5_25 l_0_5_25)))
 (let ((?x13942 (* l_0_5_24 l_0_5_24)))
 (let ((?x13960 (- (- (- (* (- l_0_5_22) l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x13942) ?x13945)))
 (let ((?x13974 (+ (+ (+ (+ (- (- (- ?x13960 ?x13961) ?x13963) ?x13965) ?x13967) ?x13969) ?x13971) ?x13973)))
 (= (+ (+ (+ ?x13974 ?x13975) ?x13977) ?x13979) 0.0))))))))))))))))
(assert
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14048 (* ?x14047 l_0_5_80)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14045 (* ?x14044 l_0_5_79)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14042 (* ?x14041 l_0_5_78)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14039 (* ?x14038 l_0_5_77)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14036 (* ?x14035 l_0_5_76)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14033 (* ?x14032 l_0_5_75)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14030 (* ?x14029 l_0_5_74)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14027 (* ?x14026 l_0_5_35)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14024 (* ?x14023 l_0_5_34)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14021 (* ?x14020 l_0_5_33)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14018 (* ?x14017 l_0_5_32)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14015 (* ?x12807 l_0_5_31)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14013 (* ?x12558 l_0_5_30)))
 (let ((?x14022 (- (- (- (- (* (* (- 2.0) l_0_5_22) l_0_5_29) ?x14013) ?x14015) ?x14018) ?x14021)))
 (let ((?x14043 (+ (+ (+ (+ (+ (- (- ?x14022 ?x14024) ?x14027) ?x14030) ?x14033) ?x14036) ?x14039) ?x14042)))
 (= (+ (+ ?x14043 ?x14045) ?x14048) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14132 (* ?x14047 l_0_5_88)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14130 (* ?x14044 l_0_5_87)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14128 (* ?x14041 l_0_5_86)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14126 (* ?x14038 l_0_5_85)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14124 (* ?x14035 l_0_5_84)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14122 (* ?x14032 l_0_5_83)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14120 (* ?x14029 l_0_5_82)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14118 (* ?x14026 l_0_5_43)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14116 (* ?x14023 l_0_5_42)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14114 (* ?x14020 l_0_5_41)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14102 (* ?x14017 l_0_5_40)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14098 (* ?x12807 l_0_5_39)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14094 (* ?x12558 l_0_5_38)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x14090 (* ?x13112 l_0_5_37)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x12314 (* ?x12313 l_0_5_162)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x12311 (* ?x12310 l_0_5_161)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x12308 (* ?x12307 l_0_5_160)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x12305 (* ?x12304 l_0_5_159)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x12302 (* ?x12301 l_0_5_158)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x12299 (* ?x12298 l_0_5_157)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x12296 (* ?x12295 l_0_5_117)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x12293 (* ?x12292 l_0_5_116)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x12290 (* ?x12289 l_0_5_115)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12287 (* ?x12286 l_0_5_114)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12284 (* ?x12283 l_0_5_113)))
 (let ((?x12455 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_112) ?x12284) ?x12287) ?x12290) ?x12293)))
 (let ((?x12462 (+ (+ (+ (+ (+ (+ (- ?x12455 ?x12296) ?x12299) ?x12302) ?x12305) ?x12308) ?x12311) ?x12314)))
 (let ((?x14119 (- (- (- (- (- (- (- ?x12462 ?x14090) ?x14094) ?x14098) ?x14102) ?x14114) ?x14116) ?x14118)))
 (let ((?x14133 (+ (+ (+ (+ (+ (+ (+ ?x14119 ?x14120) ?x14122) ?x14124) ?x14126) ?x14128) ?x14130) ?x14132)))
 (= ?x14133 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14223 (* l_0_5_81 l_0_5_81)))
 (let ((?x14221 (* l_0_5_80 l_0_5_80)))
 (let ((?x14219 (* l_0_5_79 l_0_5_79)))
 (let ((?x14217 (* l_0_5_78 l_0_5_78)))
 (let ((?x14215 (* l_0_5_77 l_0_5_77)))
 (let ((?x14213 (* l_0_5_76 l_0_5_76)))
 (let ((?x14211 (* l_0_5_75 l_0_5_75)))
 (let ((?x14209 (* l_0_5_74 l_0_5_74)))
 (let ((?x14207 (* l_0_5_36 l_0_5_36)))
 (let ((?x14205 (* l_0_5_35 l_0_5_35)))
 (let ((?x14203 (* l_0_5_34 l_0_5_34)))
 (let ((?x14201 (* l_0_5_33 l_0_5_33)))
 (let ((?x14190 (* l_0_5_32 l_0_5_32)))
 (let ((?x14186 (* l_0_5_31 l_0_5_31)))
 (let ((?x14191 (- (- (- (* (- l_0_5_29) l_0_5_29) (* l_0_5_30 l_0_5_30)) ?x14186) ?x14190)))
 (let ((?x14214 (+ (+ (+ (- (- (- (- ?x14191 ?x14201) ?x14203) ?x14205) ?x14207) ?x14209) ?x14211) ?x14213)))
 (= (+ (+ (+ (+ (+ ?x14214 ?x14215) ?x14217) ?x14219) ?x14221) ?x14223) 0.0))))))))))))))))))
(assert
 (let ((?x14326 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14323 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14320 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14317 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14314 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14311 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14308 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14305 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14302 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14299 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14296 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14293 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14290 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x14287 (* ?x12845 l_0_5_39)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x14285 (* ?x12836 l_0_5_38)))
 (let ((?x13160 (* 2.0 l_0_5_29)))
 (let ((?x14283 (* ?x13160 l_0_5_37)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14281 (* ?x12313 l_0_5_169)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14279 (* ?x12310 l_0_5_168)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14277 (* ?x12307 l_0_5_167)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14275 (* ?x12304 l_0_5_166)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14273 (* ?x12301 l_0_5_165)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14271 (* ?x12298 l_0_5_164)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14269 (* ?x12295 l_0_5_124)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14267 (* ?x12292 l_0_5_123)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14265 (* ?x12289 l_0_5_122)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14263 (* ?x12286 l_0_5_121)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14261 (* ?x12283 l_0_5_120)))
 (let ((?x14268 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_119) ?x14261) ?x14263) ?x14265) ?x14267)))
 (let ((?x14282 (+ (+ (+ (+ (+ (+ (- ?x14268 ?x14269) ?x14271) ?x14273) ?x14275) ?x14277) ?x14279) ?x14281)))
 (let ((?x14300 (- (- (- (- (- (- (- ?x14282 ?x14283) ?x14285) ?x14287) ?x14290) ?x14293) ?x14296) ?x14299)))
 (let ((?x14321 (+ (+ (+ (+ (+ (+ (- ?x14300 ?x14302) ?x14305) ?x14308) ?x14311) ?x14314) ?x14317) ?x14320)))
 (= (+ (+ ?x14321 ?x14323) ?x14326) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14504 (* l_0_5_90 l_0_5_90)))
 (let ((?x14502 (* l_0_5_89 l_0_5_89)))
 (let ((?x14500 (* l_0_5_88 l_0_5_88)))
 (let ((?x14498 (* l_0_5_87 l_0_5_87)))
 (let ((?x14496 (* l_0_5_86 l_0_5_86)))
 (let ((?x14494 (* l_0_5_85 l_0_5_85)))
 (let ((?x14492 (* l_0_5_84 l_0_5_84)))
 (let ((?x14490 (* l_0_5_83 l_0_5_83)))
 (let ((?x14488 (* l_0_5_82 l_0_5_82)))
 (let ((?x14486 (* l_0_5_45 l_0_5_45)))
 (let ((?x14484 (* l_0_5_44 l_0_5_44)))
 (let ((?x14482 (* l_0_5_43 l_0_5_43)))
 (let ((?x14480 (* l_0_5_42 l_0_5_42)))
 (let ((?x14478 (* l_0_5_41 l_0_5_41)))
 (let ((?x14476 (* l_0_5_40 l_0_5_40)))
 (let ((?x14474 (* l_0_5_39 l_0_5_39)))
 (let ((?x14472 (* l_0_5_38 l_0_5_38)))
 (let ((?x14470 (* l_0_5_37 l_0_5_37)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14468 (* ?x12313 l_0_5_177)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14466 (* ?x12310 l_0_5_176)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14464 (* ?x12307 l_0_5_175)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14462 (* ?x12304 l_0_5_174)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14460 (* ?x12301 l_0_5_173)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14458 (* ?x12298 l_0_5_172)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14456 (* ?x12295 l_0_5_132)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14437 (* ?x12292 l_0_5_131)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14433 (* ?x12289 l_0_5_130)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14429 (* ?x12286 l_0_5_129)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14425 (* ?x12283 l_0_5_128)))
 (let ((?x14438 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_127) ?x14425) ?x14429) ?x14433) ?x14437)))
 (let ((?x14469 (+ (+ (+ (+ (+ (+ (- ?x14438 ?x14456) ?x14458) ?x14460) ?x14462) ?x14464) ?x14466) ?x14468)))
 (let ((?x14483 (- (- (- (- (- (- (- ?x14469 ?x14470) ?x14472) ?x14474) ?x14476) ?x14478) ?x14480) ?x14482)))
 (let ((?x14497 (+ (+ (+ (+ (+ (- (- ?x14483 ?x14484) ?x14486) ?x14488) ?x14490) ?x14492) ?x14494) ?x14496)))
 (= (+ (+ (+ (+ ?x14497 ?x14498) ?x14500) ?x14502) ?x14504) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12072 (* ?x12071 l_0_5_47)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x14600 (* ?x12383 l_0_5_146)))
 (let ((?x14579 (* 2.0 l_0_5_101)))
 (let ((?x14598 (* ?x14579 l_0_5_91)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12070 (* ?x12069 l_0_5_2)))
 (= (+ (+ (- ?x12070 ?x14598) ?x14600) ?x12072) 0.0))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13015 (* ?x13014 l_0_5_59)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13012 (* ?x13011 l_0_5_58)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13009 (* ?x13008 l_0_5_57)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13006 (* ?x13005 l_0_5_56)))
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12118 (* ?x12071 l_0_5_49)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x14632 (* ?x14631 l_0_5_239)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x14629 (* ?x14628 l_0_5_238)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x14626 (* ?x14625 l_0_5_237)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x14623 (* ?x14622 l_0_5_236)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12997 (* ?x12735 l_0_5_9)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12995 (* ?x12511 l_0_5_8)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x12993 (* ?x12992 l_0_5_7)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12076 (* ?x12069 l_0_5_4)))
 (let ((?x14621 (+ (+ (+ (+ ?x12076 (* (* 2.0 l_0_5_10) l_0_5_14)) ?x12993) ?x12995) ?x12997)))
 (let ((?x14636 (- (- (+ (- (- (- (- ?x14621 ?x14623) ?x14626) ?x14629) ?x14632) ?x12118) ?x13006) ?x13009)))
 (= (- (- ?x14636 ?x13012) ?x13015) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12240 (* ?x12071 l_0_5_52)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_7) ?x12240) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12246 (* ?x12071 l_0_5_56)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_11) ?x12246) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12256 (* ?x12071 l_0_5_61)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_16) ?x12256) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12266 (* ?x12071 l_0_5_67)))
 (= (+ (* (* (- 2.0) l_0_5_1) l_0_5_22) ?x12266) 0.0))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12322 (* ?x12071 l_0_5_74)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x14632 (* ?x14631 l_0_5_239)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x14629 (* ?x14628 l_0_5_238)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x14626 (* ?x14625 l_0_5_237)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x14623 (* ?x14622 l_0_5_236)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x14698 (* ?x13235 l_0_5_149)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x14696 (* ?x13232 l_0_5_148)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x14694 (* ?x13229 l_0_5_147)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x14692 (* ?x13226 l_0_5_146)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14690 (* ?x13545 l_0_5_99)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14688 (* ?x13540 l_0_5_98)))
 (let ((?x14579 (* 2.0 l_0_5_101)))
 (let ((?x14686 (* ?x14579 l_0_5_97)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12274 (* ?x12069 l_0_5_29)))
 (let ((?x14691 (+ (+ (+ (+ ?x12274 (* (* 2.0 l_0_5_100) l_0_5_104)) ?x14686) ?x14688) ?x14690)))
 (let ((?x14702 (+ (+ (+ (- (- (- (- ?x14691 ?x14692) ?x14694) ?x14696) ?x14698) ?x14623) ?x14626) ?x14629)))
 (= (+ (+ ?x14702 ?x14632) ?x12322) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12386 (* ?x12071 l_0_5_82)))
 (let ((?x12069 (* (- 2.0) l_0_5_1)))
 (let ((?x12380 (* ?x12069 l_0_5_37)))
 (= (+ ?x12380 ?x12386) 0.0))))))
(assert
 (let ((?x12410 (* l_0_5_48 l_0_5_48)))
 (let ((?x12408 (* l_0_5_47 l_0_5_47)))
 (let ((?x12401 (* l_0_5_3 l_0_5_3)))
 (let ((?x12414 (* l_0_5_2 l_0_5_2)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x14757 (* ?x12615 l_0_5_147)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x14755 (* ?x12612 l_0_5_146)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14753 (* ?x13540 l_0_5_93)))
 (let ((?x14758 (+ (+ (- (* (* (- 2.0) l_0_5_101) l_0_5_92) ?x14753) ?x14755) ?x14757)))
 (= (+ (+ (- (- ?x14758 ?x12414) ?x12401) ?x12408) ?x12410) 0.0)))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12432 (* ?x12431 l_0_5_50)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12429 (* ?x12428 l_0_5_49)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12426 (* ?x12425 l_0_5_5)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x14797 (* ?x12463 l_0_5_4)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x14795 (* ?x12889 l_0_5_148)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x14793 (* ?x12886 l_0_5_147)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x14791 (* ?x12883 l_0_5_146)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14789 (* ?x13545 l_0_5_96)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14787 (* ?x13540 l_0_5_95)))
 (let ((?x14794 (+ (+ (- (- (* (* (- 2.0) l_0_5_101) l_0_5_94) ?x14787) ?x14789) ?x14791) ?x14793)))
 (let ((?x14796 (+ ?x14794 ?x14795)))
 (= (+ (+ (- (- ?x14796 ?x14797) ?x12426) ?x12429) ?x12432) 0.0))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12470 (* ?x12431 l_0_5_53)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12468 (* ?x12428 l_0_5_52)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12466 (* ?x12425 l_0_5_8)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12464 (* ?x12463 l_0_5_7)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x14698 (* ?x13235 l_0_5_149)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x14696 (* ?x13232 l_0_5_148)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x14694 (* ?x13229 l_0_5_147)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x14692 (* ?x13226 l_0_5_146)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14690 (* ?x13545 l_0_5_99)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14688 (* ?x13540 l_0_5_98)))
 (let ((?x14579 (* 2.0 l_0_5_101)))
 (let ((?x14686 (* ?x14579 l_0_5_97)))
 (let ((?x14842 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_104) ?x14686) ?x14688) ?x14690) ?x14692)))
 (let ((?x14845 (+ (+ (+ ?x14842 ?x14694) ?x14696) ?x14698)))
 (= (+ (+ (- (- ?x14845 ?x12464) ?x12466) ?x12468) ?x12470) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12520 (* ?x12431 l_0_5_57)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12518 (* ?x12428 l_0_5_56)))
 (let ((?x14890 (* l_0_5_150 l_0_5_150)))
 (let ((?x14888 (* l_0_5_149 l_0_5_149)))
 (let ((?x14886 (* l_0_5_148 l_0_5_148)))
 (let ((?x14884 (* l_0_5_147 l_0_5_147)))
 (let ((?x14882 (* l_0_5_146 l_0_5_146)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12516 (* ?x12511 l_0_5_3)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x14879 (* ?x12992 l_0_5_2)))
 (let ((?x14877 (* l_0_5_105 l_0_5_105)))
 (let ((?x14875 (* l_0_5_104 l_0_5_104)))
 (let ((?x14873 (* l_0_5_103 l_0_5_103)))
 (let ((?x14874 (- (- (* (- l_0_5_101) l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x14873)))
 (let ((?x14878 (- (- ?x14874 ?x14875) ?x14877)))
 (let ((?x14891 (+ (+ (+ (+ (+ (- (- ?x14878 ?x14879) ?x12516) ?x14882) ?x14884) ?x14886) ?x14888) ?x14890)))
 (= (+ (+ ?x14891 ?x12518) ?x12520) 0.0)))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12544 (* ?x12431 l_0_5_62)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12542 (* ?x12428 l_0_5_61)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12535 (* ?x12085 l_0_5_3)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x14929 (* ?x12078 l_0_5_2)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x13585 (* ?x13584 l_0_5_155)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x13580 (* ?x13579 l_0_5_154)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x13577 (* ?x13576 l_0_5_153)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x13574 (* ?x13573 l_0_5_152)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x13571 (* ?x13570 l_0_5_151)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x13560 (* ?x13559 l_0_5_110)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x13557 (* ?x13556 l_0_5_109)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x13554 (* ?x13545 l_0_5_108)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x13542 (* ?x13540 l_0_5_107)))
 (let ((?x13561 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_106) ?x13542) ?x13554) ?x13557) ?x13560)))
 (let ((?x14931 (- (- (+ (+ (+ (+ (+ ?x13561 ?x13571) ?x13574) ?x13577) ?x13580) ?x13585) ?x14929) ?x12535)))
 (= (+ (+ ?x14931 ?x12542) ?x12544) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12431 l_0_5_68)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12428 l_0_5_67)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12559 (* ?x12558 l_0_5_3)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x14965 (* ?x12463 l_0_5_22)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x14963 (* ?x13584 l_0_5_161)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x14961 (* ?x13579 l_0_5_160)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x14959 (* ?x13576 l_0_5_159)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x14957 (* ?x13573 l_0_5_158)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x14955 (* ?x13570 l_0_5_157)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x14953 (* ?x13559 l_0_5_116)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x14951 (* ?x13556 l_0_5_115)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14949 (* ?x13545 l_0_5_114)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14947 (* ?x13540 l_0_5_113)))
 (let ((?x14954 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_112) ?x14947) ?x14949) ?x14951) ?x14953)))
 (let ((?x14964 (+ (+ (+ (+ (+ ?x14954 ?x14955) ?x14957) ?x14959) ?x14961) ?x14963)))
 (= (+ (+ (- (- ?x14964 ?x14965) ?x12559) ?x12566) ?x12568) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12591 (* ?x12431 l_0_5_75)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12589 (* ?x12428 l_0_5_74)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12582 (* ?x12425 l_0_5_30)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x15042 (* ?x12463 l_0_5_29)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15040 (* ?x13584 l_0_5_168)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15038 (* ?x13579 l_0_5_167)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15036 (* ?x13576 l_0_5_166)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15034 (* ?x13573 l_0_5_165)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15032 (* ?x13570 l_0_5_164)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15030 (* ?x13559 l_0_5_123)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15028 (* ?x13556 l_0_5_122)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15026 (* ?x13545 l_0_5_121)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15024 (* ?x13540 l_0_5_120)))
 (let ((?x15031 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_119) ?x15024) ?x15026) ?x15028) ?x15030)))
 (let ((?x15041 (+ (+ (+ (+ (+ ?x15031 ?x15032) ?x15034) ?x15036) ?x15038) ?x15040)))
 (= (+ (+ (- (- ?x15041 ?x15042) ?x12582) ?x12589) ?x12591) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12624 (* ?x12431 l_0_5_83)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12622 (* ?x12428 l_0_5_82)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12620 (* ?x12425 l_0_5_38)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12618 (* ?x12463 l_0_5_37)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15117 (* ?x13584 l_0_5_176)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15115 (* ?x13579 l_0_5_175)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15113 (* ?x13576 l_0_5_174)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15111 (* ?x13573 l_0_5_173)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15109 (* ?x13570 l_0_5_172)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15107 (* ?x13559 l_0_5_131)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15105 (* ?x13556 l_0_5_130)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15103 (* ?x13545 l_0_5_129)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15101 (* ?x13540 l_0_5_128)))
 (let ((?x15108 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_127) ?x15101) ?x15103) ?x15105) ?x15107)))
 (let ((?x15118 (+ (+ (+ (+ (+ ?x15108 ?x15109) ?x15111) ?x15113) ?x15115) ?x15117)))
 (= (+ (+ (- (- ?x15118 ?x12618) ?x12620) ?x12622) ?x12624) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x12671 (* l_0_5_6 l_0_5_6)))
 (let ((?x12669 (* l_0_5_51 l_0_5_51)))
 (let ((?x12667 (* l_0_5_50 l_0_5_50)))
 (let ((?x12665 (* l_0_5_5 l_0_5_5)))
 (let ((?x12668 (+ (- (+ (* (- l_0_5_4) l_0_5_4) (* l_0_5_49 l_0_5_49)) ?x12665) ?x12667)))
 (= (- (+ ?x12668 ?x12669) ?x12671) 0.0)))))))
(assert
 (let ((?x12701 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12698 (* ?x12697 l_0_5_54)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12695 (* ?x12694 l_0_5_53)))
 (let ((?x12692 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12689 (* ?x12688 l_0_5_52)))
 (let ((?x12699 (+ (+ (- (+ (* (* (- 2.0) l_0_5_4) l_0_5_7) ?x12689) ?x12692) ?x12695) ?x12698)))
 (= (- ?x12699 ?x12701) 0.0)))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12742 (* ?x12697 l_0_5_58)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12740 (* ?x12694 l_0_5_57)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12738 (* ?x12688 l_0_5_56)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12736 (* ?x12735 l_0_5_6)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12733 (* ?x12511 l_0_5_5)))
 (let ((?x12741 (+ (+ (- (- (* (* (- 2.0) l_0_5_11) l_0_5_4) ?x12733) ?x12736) ?x12738) ?x12740)))
 (= (+ ?x12741 ?x12742) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12777 (* ?x12697 l_0_5_63)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12775 (* ?x12694 l_0_5_62)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12773 (* ?x12688 l_0_5_61)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12765 (* ?x12088 l_0_5_6)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12762 (* ?x12085 l_0_5_5)))
 (let ((?x12776 (+ (+ (- (- (* (* (- 2.0) l_0_5_16) l_0_5_4) ?x12762) ?x12765) ?x12773) ?x12775)))
 (= (+ ?x12776 ?x12777) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12814 (* ?x12697 l_0_5_69)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12812 (* ?x12694 l_0_5_68)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12810 (* ?x12688 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x12808 (* ?x12807 l_0_5_6)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12799 (* ?x12558 l_0_5_5)))
 (let ((?x12813 (+ (+ (- (- (* (* (- 2.0) l_0_5_22) l_0_5_4) ?x12799) ?x12808) ?x12810) ?x12812)))
 (= (+ ?x12813 ?x12814) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12852 (* ?x12697 l_0_5_76)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12850 (* ?x12694 l_0_5_75)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12848 (* ?x12688 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x12846 (* ?x12845 l_0_5_6)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x12837 (* ?x12836 l_0_5_5)))
 (let ((?x12851 (+ (+ (- (- (* (* (- 2.0) l_0_5_29) l_0_5_4) ?x12837) ?x12846) ?x12848) ?x12850)))
 (= (+ ?x12851 ?x12852) 0.0)))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12905 (* ?x12697 l_0_5_84)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12903 (* ?x12694 l_0_5_83)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12901 (* ?x12688 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x12899 (* ?x12898 l_0_5_6)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x12896 (* ?x12895 l_0_5_5)))
 (let ((?x15180 (+ (+ (- (- (* (* (- 2.0) l_0_5_37) l_0_5_4) ?x12896) ?x12899) ?x12901) ?x12903)))
 (= (+ ?x15180 ?x12905) 0.0)))))))))))))
(assert
 (let ((?x12973 (* l_0_5_9 l_0_5_9)))
 (let ((?x12971 (* l_0_5_8 l_0_5_8)))
 (let ((?x12969 (* l_0_5_7 l_0_5_7)))
 (let ((?x12967 (* l_0_5_55 l_0_5_55)))
 (let ((?x12965 (* l_0_5_54 l_0_5_54)))
 (let ((?x12963 (* l_0_5_53 l_0_5_53)))
 (let ((?x12966 (+ (+ (+ (* (- l_0_5_10) l_0_5_10) (* l_0_5_52 l_0_5_52)) ?x12963) ?x12965)))
 (= (- (- (- (+ ?x12966 ?x12967) ?x12969) ?x12971) ?x12973) 0.0)))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13015 (* ?x13014 l_0_5_59)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13012 (* ?x13011 l_0_5_58)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13009 (* ?x13008 l_0_5_57)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13006 (* ?x13005 l_0_5_56)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12997 (* ?x12735 l_0_5_9)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12995 (* ?x12511 l_0_5_8)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x12993 (* ?x12992 l_0_5_7)))
 (let ((?x12998 (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_14) ?x12993) ?x12995) ?x12997)))
 (= (+ (+ (+ (+ ?x12998 ?x13006) ?x13009) ?x13012) ?x13015) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13086 (* ?x13014 l_0_5_64)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13084 (* ?x13011 l_0_5_63)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13082 (* ?x13008 l_0_5_62)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13080 (* ?x13005 l_0_5_61)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13078 (* ?x12088 l_0_5_9)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13069 (* ?x12085 l_0_5_8)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x13065 (* ?x12078 l_0_5_7)))
 (let ((?x13081 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_19) ?x13065) ?x13069) ?x13078) ?x13080)))
 (= (+ (+ (+ ?x13081 ?x13082) ?x13084) ?x13086) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13134 (* ?x13014 l_0_5_70)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13132 (* ?x13011 l_0_5_69)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13130 (* ?x13008 l_0_5_68)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13128 (* ?x13005 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x13126 (* ?x12807 l_0_5_9)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x13117 (* ?x12558 l_0_5_8)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x13114 (* ?x13112 l_0_5_7)))
 (let ((?x13129 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_25) ?x13114) ?x13117) ?x13126) ?x13128)))
 (= (+ (+ (+ ?x13129 ?x13130) ?x13132) ?x13134) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13182 (* ?x13014 l_0_5_77)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13180 (* ?x13011 l_0_5_76)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13178 (* ?x13008 l_0_5_75)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13176 (* ?x13005 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x13174 (* ?x12845 l_0_5_9)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x13165 (* ?x12836 l_0_5_8)))
 (let ((?x13160 (* 2.0 l_0_5_29)))
 (let ((?x13162 (* ?x13160 l_0_5_7)))
 (let ((?x13177 (+ (- (- (- (* (* (- 2.0) l_0_5_10) l_0_5_32) ?x13162) ?x13165) ?x13174) ?x13176)))
 (= (+ (+ (+ ?x13177 ?x13178) ?x13180) ?x13182) 0.0)))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13250 (* ?x13014 l_0_5_85)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13248 (* ?x13011 l_0_5_84)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13246 (* ?x13008 l_0_5_83)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13244 (* ?x13005 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x13242 (* ?x12898 l_0_5_9)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x13240 (* ?x12895 l_0_5_8)))
 (let ((?x12892 (* 2.0 l_0_5_37)))
 (let ((?x13238 (* ?x12892 l_0_5_7)))
 (let ((?x12990 (* (- 2.0) l_0_5_10)))
 (let ((?x13206 (* ?x12990 l_0_5_40)))
 (let ((?x15205 (+ (+ (+ (+ (- (- (- ?x13206 ?x13238) ?x13240) ?x13242) ?x13244) ?x13246) ?x13248) ?x13250)))
 (= ?x15205 0.0)))))))))))))))))))
(assert
 (let ((?x13339 (* l_0_5_60 l_0_5_60)))
 (let ((?x13337 (* l_0_5_59 l_0_5_59)))
 (let ((?x13335 (* l_0_5_58 l_0_5_58)))
 (let ((?x13333 (* l_0_5_57 l_0_5_57)))
 (let ((?x13331 (* l_0_5_56 l_0_5_56)))
 (let ((?x13329 (* l_0_5_15 l_0_5_15)))
 (let ((?x13327 (* l_0_5_14 l_0_5_14)))
 (let ((?x13314 (* l_0_5_13 l_0_5_13)))
 (let ((?x13328 (- (- (- (* (- l_0_5_11) l_0_5_11) (* l_0_5_12 l_0_5_12)) ?x13314) ?x13327)))
 (= (+ (+ (+ (+ (+ (- ?x13328 ?x13329) ?x13331) ?x13333) ?x13335) ?x13337) ?x13339) 0.0)))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13388 (* ?x13387 l_0_5_65)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13385 (* ?x13384 l_0_5_64)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13382 (* ?x13381 l_0_5_63)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13379 (* ?x13378 l_0_5_62)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13376 (* ?x13375 l_0_5_61)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13373 (* ?x13372 l_0_5_20)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13370 (* ?x13369 l_0_5_19)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13367 (* ?x12735 l_0_5_18)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13365 (* ?x12511 l_0_5_17)))
 (let ((?x13374 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_16) ?x13365) ?x13367) ?x13370) ?x13373)))
 (= (+ (+ (+ (+ (+ ?x13374 ?x13376) ?x13379) ?x13382) ?x13385) ?x13388) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13447 (* ?x13387 l_0_5_71)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13445 (* ?x13384 l_0_5_70)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13443 (* ?x13381 l_0_5_69)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13441 (* ?x13378 l_0_5_68)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13439 (* ?x13375 l_0_5_67)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13437 (* ?x13372 l_0_5_26)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13427 (* ?x13369 l_0_5_25)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13424 (* ?x12735 l_0_5_24)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13420 (* ?x12511 l_0_5_23)))
 (let ((?x13438 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_22) ?x13420) ?x13424) ?x13427) ?x13437)))
 (= (+ (+ (+ (+ (+ ?x13438 ?x13439) ?x13441) ?x13443) ?x13445) ?x13447) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13506 (* ?x13387 l_0_5_78)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13504 (* ?x13384 l_0_5_77)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13502 (* ?x13381 l_0_5_76)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13500 (* ?x13378 l_0_5_75)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13498 (* ?x13375 l_0_5_74)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13496 (* ?x13372 l_0_5_33)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13486 (* ?x13369 l_0_5_32)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13483 (* ?x12735 l_0_5_31)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13479 (* ?x12511 l_0_5_30)))
 (let ((?x13497 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_29) ?x13479) ?x13483) ?x13486) ?x13496)))
 (= (+ (+ (+ (+ (+ ?x13497 ?x13498) ?x13500) ?x13502) ?x13504) ?x13506) 0.0)))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13595 (* ?x13387 l_0_5_86)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13593 (* ?x13384 l_0_5_85)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13591 (* ?x13381 l_0_5_84)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13589 (* ?x13378 l_0_5_83)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13587 (* ?x13375 l_0_5_82)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13582 (* ?x13372 l_0_5_41)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13568 (* ?x13369 l_0_5_40)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13566 (* ?x12735 l_0_5_39)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13564 (* ?x12511 l_0_5_38)))
 (let ((?x15223 (- (- (- (- (* (* (- 2.0) l_0_5_11) l_0_5_37) ?x13564) ?x13566) ?x13568) ?x13582)))
 (= (+ (+ (+ (+ (+ ?x15223 ?x13587) ?x13589) ?x13591) ?x13593) ?x13595) 0.0)))))))))))))))))))))
(assert
 (let ((?x13704 (* l_0_5_66 l_0_5_66)))
 (let ((?x13702 (* l_0_5_65 l_0_5_65)))
 (let ((?x13700 (* l_0_5_64 l_0_5_64)))
 (let ((?x13698 (* l_0_5_63 l_0_5_63)))
 (let ((?x13696 (* l_0_5_62 l_0_5_62)))
 (let ((?x13694 (* l_0_5_61 l_0_5_61)))
 (let ((?x13692 (* l_0_5_21 l_0_5_21)))
 (let ((?x13690 (* l_0_5_20 l_0_5_20)))
 (let ((?x13675 (* l_0_5_19 l_0_5_19)))
 (let ((?x13672 (* l_0_5_18 l_0_5_18)))
 (let ((?x13689 (- (- (- (* (- l_0_5_16) l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13672) ?x13675)))
 (let ((?x13703 (+ (+ (+ (+ (+ (- (- ?x13689 ?x13690) ?x13692) ?x13694) ?x13696) ?x13698) ?x13700) ?x13702)))
 (= (+ ?x13703 ?x13704) 0.0))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13779 (* ?x12135 l_0_5_79)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13777 (* ?x12132 l_0_5_78)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13775 (* ?x12129 l_0_5_77)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13773 (* ?x12126 l_0_5_76)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13771 (* ?x12123 l_0_5_75)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13769 (* ?x12120 l_0_5_74)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13767 (* ?x12097 l_0_5_34)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13765 (* ?x12094 l_0_5_33)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13763 (* ?x12091 l_0_5_32)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13761 (* ?x12088 l_0_5_31)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13759 (* ?x12085 l_0_5_30)))
 (let ((?x13766 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_29) ?x13759) ?x13761) ?x13763) ?x13765)))
 (let ((?x13780 (+ (+ (+ (+ (+ (+ (- ?x13766 ?x13767) ?x13769) ?x13771) ?x13773) ?x13775) ?x13777) ?x13779)))
 (= ?x13780 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13875 (* ?x12135 l_0_5_87)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13873 (* ?x12132 l_0_5_86)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13871 (* ?x12129 l_0_5_85)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13869 (* ?x12126 l_0_5_84)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13867 (* ?x12123 l_0_5_83)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13865 (* ?x12120 l_0_5_82)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13863 (* ?x12097 l_0_5_42)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13861 (* ?x12094 l_0_5_41)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13859 (* ?x12091 l_0_5_40)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13857 (* ?x12088 l_0_5_39)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13855 (* ?x12085 l_0_5_38)))
 (let ((?x15249 (- (- (- (- (* (* (- 2.0) l_0_5_16) l_0_5_37) ?x13855) ?x13857) ?x13859) ?x13861)))
 (let ((?x15256 (+ (+ (+ (+ (+ (+ (- ?x15249 ?x13863) ?x13865) ?x13867) ?x13869) ?x13871) ?x13873) ?x13875)))
 (= ?x15256 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13979 (* l_0_5_73 l_0_5_73)))
 (let ((?x13977 (* l_0_5_72 l_0_5_72)))
 (let ((?x13975 (* l_0_5_71 l_0_5_71)))
 (let ((?x13973 (* l_0_5_70 l_0_5_70)))
 (let ((?x13971 (* l_0_5_69 l_0_5_69)))
 (let ((?x13969 (* l_0_5_68 l_0_5_68)))
 (let ((?x13967 (* l_0_5_67 l_0_5_67)))
 (let ((?x13965 (* l_0_5_28 l_0_5_28)))
 (let ((?x13963 (* l_0_5_27 l_0_5_27)))
 (let ((?x13961 (* l_0_5_26 l_0_5_26)))
 (let ((?x13945 (* l_0_5_25 l_0_5_25)))
 (let ((?x13942 (* l_0_5_24 l_0_5_24)))
 (let ((?x13960 (- (- (- (* (- l_0_5_22) l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x13942) ?x13945)))
 (let ((?x13974 (+ (+ (+ (+ (- (- (- ?x13960 ?x13961) ?x13963) ?x13965) ?x13967) ?x13969) ?x13971) ?x13973)))
 (= (+ (+ (+ ?x13974 ?x13975) ?x13977) ?x13979) 0.0))))))))))))))))
(assert
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14048 (* ?x14047 l_0_5_80)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14045 (* ?x14044 l_0_5_79)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14042 (* ?x14041 l_0_5_78)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14039 (* ?x14038 l_0_5_77)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14036 (* ?x14035 l_0_5_76)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14033 (* ?x14032 l_0_5_75)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14030 (* ?x14029 l_0_5_74)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14027 (* ?x14026 l_0_5_35)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14024 (* ?x14023 l_0_5_34)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14021 (* ?x14020 l_0_5_33)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14018 (* ?x14017 l_0_5_32)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14015 (* ?x12807 l_0_5_31)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14013 (* ?x12558 l_0_5_30)))
 (let ((?x14022 (- (- (- (- (* (* (- 2.0) l_0_5_22) l_0_5_29) ?x14013) ?x14015) ?x14018) ?x14021)))
 (let ((?x14043 (+ (+ (+ (+ (+ (- (- ?x14022 ?x14024) ?x14027) ?x14030) ?x14033) ?x14036) ?x14039) ?x14042)))
 (= (+ (+ ?x14043 ?x14045) ?x14048) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14132 (* ?x14047 l_0_5_88)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14130 (* ?x14044 l_0_5_87)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14128 (* ?x14041 l_0_5_86)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14126 (* ?x14038 l_0_5_85)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14124 (* ?x14035 l_0_5_84)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14122 (* ?x14032 l_0_5_83)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14120 (* ?x14029 l_0_5_82)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14118 (* ?x14026 l_0_5_43)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14116 (* ?x14023 l_0_5_42)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14114 (* ?x14020 l_0_5_41)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14102 (* ?x14017 l_0_5_40)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14098 (* ?x12807 l_0_5_39)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14094 (* ?x12558 l_0_5_38)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x14090 (* ?x13112 l_0_5_37)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x14698 (* ?x13235 l_0_5_149)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x14696 (* ?x13232 l_0_5_148)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x14694 (* ?x13229 l_0_5_147)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x14692 (* ?x13226 l_0_5_146)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14690 (* ?x13545 l_0_5_99)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14688 (* ?x13540 l_0_5_98)))
 (let ((?x14579 (* 2.0 l_0_5_101)))
 (let ((?x14686 (* ?x14579 l_0_5_97)))
 (let ((?x14842 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_104) ?x14686) ?x14688) ?x14690) ?x14692)))
 (let ((?x14845 (+ (+ (+ ?x14842 ?x14694) ?x14696) ?x14698)))
 (let ((?x15282 (- (- (- (- (- (- (- ?x14845 ?x14090) ?x14094) ?x14098) ?x14102) ?x14114) ?x14116) ?x14118)))
 (let ((?x15289 (+ (+ (+ (+ (+ (+ (+ ?x15282 ?x14120) ?x14122) ?x14124) ?x14126) ?x14128) ?x14130) ?x14132)))
 (= ?x15289 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14223 (* l_0_5_81 l_0_5_81)))
 (let ((?x14221 (* l_0_5_80 l_0_5_80)))
 (let ((?x14219 (* l_0_5_79 l_0_5_79)))
 (let ((?x14217 (* l_0_5_78 l_0_5_78)))
 (let ((?x14215 (* l_0_5_77 l_0_5_77)))
 (let ((?x14213 (* l_0_5_76 l_0_5_76)))
 (let ((?x14211 (* l_0_5_75 l_0_5_75)))
 (let ((?x14209 (* l_0_5_74 l_0_5_74)))
 (let ((?x14207 (* l_0_5_36 l_0_5_36)))
 (let ((?x14205 (* l_0_5_35 l_0_5_35)))
 (let ((?x14203 (* l_0_5_34 l_0_5_34)))
 (let ((?x14201 (* l_0_5_33 l_0_5_33)))
 (let ((?x14190 (* l_0_5_32 l_0_5_32)))
 (let ((?x14186 (* l_0_5_31 l_0_5_31)))
 (let ((?x14191 (- (- (- (* (- l_0_5_29) l_0_5_29) (* l_0_5_30 l_0_5_30)) ?x14186) ?x14190)))
 (let ((?x14214 (+ (+ (+ (- (- (- (- ?x14191 ?x14201) ?x14203) ?x14205) ?x14207) ?x14209) ?x14211) ?x14213)))
 (= (+ (+ (+ (+ (+ ?x14214 ?x14215) ?x14217) ?x14219) ?x14221) ?x14223) 0.0))))))))))))))))))
(assert
 (let ((?x14326 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14323 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14320 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14317 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14314 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14311 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14308 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14305 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14302 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14299 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14296 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14293 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14290 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x14287 (* ?x12845 l_0_5_39)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x14285 (* ?x12836 l_0_5_38)))
 (let ((?x15318 (- (- (- (- (* (* (- 2.0) l_0_5_29) l_0_5_37) ?x14285) ?x14287) ?x14290) ?x14293)))
 (let ((?x15325 (+ (+ (+ (+ (- (- (- ?x15318 ?x14296) ?x14299) ?x14302) ?x14305) ?x14308) ?x14311) ?x14314)))
 (= (+ (+ (+ (+ ?x15325 ?x14317) ?x14320) ?x14323) ?x14326) 0.0)))))))))))))))))))))
(assert
 (let ((?x14504 (* l_0_5_90 l_0_5_90)))
 (let ((?x14502 (* l_0_5_89 l_0_5_89)))
 (let ((?x14500 (* l_0_5_88 l_0_5_88)))
 (let ((?x14498 (* l_0_5_87 l_0_5_87)))
 (let ((?x14496 (* l_0_5_86 l_0_5_86)))
 (let ((?x14494 (* l_0_5_85 l_0_5_85)))
 (let ((?x14492 (* l_0_5_84 l_0_5_84)))
 (let ((?x14490 (* l_0_5_83 l_0_5_83)))
 (let ((?x14488 (* l_0_5_82 l_0_5_82)))
 (let ((?x14486 (* l_0_5_45 l_0_5_45)))
 (let ((?x14484 (* l_0_5_44 l_0_5_44)))
 (let ((?x14482 (* l_0_5_43 l_0_5_43)))
 (let ((?x14480 (* l_0_5_42 l_0_5_42)))
 (let ((?x14478 (* l_0_5_41 l_0_5_41)))
 (let ((?x14476 (* l_0_5_40 l_0_5_40)))
 (let ((?x14474 (* l_0_5_39 l_0_5_39)))
 (let ((?x15359 (- (- (- (* (- l_0_5_37) l_0_5_37) (* l_0_5_38 l_0_5_38)) ?x14474) ?x14476)))
 (let ((?x15366 (+ (+ (- (- (- (- (- ?x15359 ?x14478) ?x14480) ?x14482) ?x14484) ?x14486) ?x14488) ?x14490)))
 (let ((?x15373 (+ (+ (+ (+ (+ (+ (+ ?x15366 ?x14492) ?x14494) ?x14496) ?x14498) ?x14500) ?x14502) ?x14504)))
 (= ?x15373 0.0)))))))))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12072 (* ?x12071 l_0_5_47)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15400 (* ?x15399 l_0_5_227)))
 (let ((?x15396 (- (* (* 2.0 l_0_5_1) l_0_5_2) (* (* 2.0 l_0_5_182) l_0_5_184))))
 (let ((?x15403 (- (- (- ?x15396 (* (* 2.0 l_0_5_183) l_0_5_185)) ?x15400) (* (* 2.0 l_0_5_272) l_0_5_274))))
 (= (- (- ?x15403 (* (* 2.0 l_0_5_273) l_0_5_275)) ?x12072) 0.0))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12118 (* ?x12071 l_0_5_49)))
 (let ((?x15458 (* l_0_5_276 l_0_5_276)))
 (let ((?x15456 (* l_0_5_275 l_0_5_275)))
 (let ((?x15454 (* l_0_5_274 l_0_5_274)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15452 (* ?x15399 l_0_5_229)))
 (let ((?x15445 (- (* (* 2.0 l_0_5_1) l_0_5_4) (* (* 1.0 l_0_5_184) l_0_5_184))))
 (let ((?x15451 (- (- ?x15445 (* (* 1.0 l_0_5_185) l_0_5_185)) (* (* 1.0 l_0_5_186) l_0_5_186))))
 (= (- (- (- (- (- ?x15451 ?x15452) ?x15454) ?x15456) ?x15458) ?x12118) 0.0)))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12240 (* ?x12071 l_0_5_52)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15502 (* ?x15399 l_0_5_232)))
 (let ((?x15495 (- (* (* 2.0 l_0_5_1) l_0_5_7) (* (* 2.0 l_0_5_184) l_0_5_187))))
 (let ((?x15501 (- (- ?x15495 (* (* 2.0 l_0_5_185) l_0_5_188)) (* (* 2.0 l_0_5_186) l_0_5_189))))
 (let ((?x15509 (- (- (- ?x15501 ?x15502) (* (* 2.0 l_0_5_274) l_0_5_277)) (* (* 2.0 l_0_5_275) l_0_5_278))))
 (= (- (- ?x15509 (* (* 2.0 l_0_5_276) l_0_5_279)) ?x12240) 0.0)))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12246 (* ?x12071 l_0_5_56)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15569 (* ?x15399 l_0_5_236)))
 (let ((?x15564 (- (* (* 2.0 l_0_5_1) l_0_5_11) (* (* 2.0 l_0_5_184) l_0_5_191))))
 (let ((?x15568 (- (- ?x15564 (* (* 2.0 l_0_5_185) l_0_5_192)) (* (* 2.0 l_0_5_186) l_0_5_193))))
 (let ((?x15574 (- (- (- ?x15568 ?x15569) (* (* 2.0 l_0_5_274) l_0_5_281)) (* (* 2.0 l_0_5_275) l_0_5_282))))
 (= (- (- ?x15574 (* (* 2.0 l_0_5_276) l_0_5_283)) ?x12246) 0.0)))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12256 (* ?x12071 l_0_5_61)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15633 (* ?x15399 l_0_5_241)))
 (let ((?x15628 (- (* (* 2.0 l_0_5_1) l_0_5_16) (* (* 2.0 l_0_5_184) l_0_5_196))))
 (let ((?x15632 (- (- ?x15628 (* (* 2.0 l_0_5_185) l_0_5_197)) (* (* 2.0 l_0_5_186) l_0_5_198))))
 (let ((?x15638 (- (- (- ?x15632 ?x15633) (* (* 2.0 l_0_5_274) l_0_5_286)) (* (* 2.0 l_0_5_275) l_0_5_287))))
 (= (- (- ?x15638 (* (* 2.0 l_0_5_276) l_0_5_288)) ?x12256) 0.0)))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12266 (* ?x12071 l_0_5_67)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15697 (* ?x15399 l_0_5_247)))
 (let ((?x15692 (- (* (* 2.0 l_0_5_1) l_0_5_22) (* (* 2.0 l_0_5_184) l_0_5_202))))
 (let ((?x15696 (- (- ?x15692 (* (* 2.0 l_0_5_185) l_0_5_203)) (* (* 2.0 l_0_5_186) l_0_5_204))))
 (let ((?x15702 (- (- (- ?x15696 ?x15697) (* (* 2.0 l_0_5_274) l_0_5_292)) (* (* 2.0 l_0_5_275) l_0_5_293))))
 (= (- (- ?x15702 (* (* 2.0 l_0_5_276) l_0_5_294)) ?x12266) 0.0)))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x15774 (* ?x15773 l_0_5_94)))
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12322 (* ?x12071 l_0_5_74)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15764 (* ?x15399 l_0_5_254)))
 (let ((?x15452 (* ?x15399 l_0_5_229)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x15755 (* ?x12383 l_0_5_139)))
 (let ((?x15758 (- (- (* (* 2.0 l_0_5_1) l_0_5_29) ?x15755) (* (* 2.0 l_0_5_184) l_0_5_209))))
 (let ((?x15762 (- (- ?x15758 (* (* 2.0 l_0_5_185) l_0_5_210)) (* (* 2.0 l_0_5_186) l_0_5_211))))
 (let ((?x15769 (- (- (- (+ ?x15762 ?x15452) ?x15764) (* (* 2.0 l_0_5_274) l_0_5_299)) (* (* 2.0 l_0_5_275) l_0_5_300))))
 (= (+ (- (- ?x15769 (* (* 2.0 l_0_5_276) l_0_5_301)) ?x12322) ?x15774) 0.0))))))))))))))
(assert
 (let ((?x12071 (* 2.0 l_0_5_46)))
 (let ((?x12386 (* ?x12071 l_0_5_82)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15840 (* ?x15399 l_0_5_262)))
 (let ((?x15835 (- (* (* 2.0 l_0_5_1) l_0_5_37) (* (* 2.0 l_0_5_184) l_0_5_217))))
 (let ((?x15839 (- (- ?x15835 (* (* 2.0 l_0_5_185) l_0_5_218)) (* (* 2.0 l_0_5_186) l_0_5_219))))
 (let ((?x15845 (- (- (- ?x15839 ?x15840) (* (* 2.0 l_0_5_274) l_0_5_307)) (* (* 2.0 l_0_5_275) l_0_5_308))))
 (= (- (- ?x15845 (* (* 2.0 l_0_5_276) l_0_5_309)) ?x12386) 0.0)))))))))
(assert
 (let ((?x12410 (* l_0_5_48 l_0_5_48)))
 (let ((?x12408 (* l_0_5_47 l_0_5_47)))
 (let ((?x12401 (* l_0_5_3 l_0_5_3)))
 (let ((?x15898 (* l_0_5_228 l_0_5_228)))
 (let ((?x15900 (+ (- (- (* l_0_5_2 l_0_5_2) (* l_0_5_227 l_0_5_227)) ?x15898) ?x12401)))
 (= (- (- ?x15900 ?x12408) ?x12410) 0.0)))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12432 (* ?x12431 l_0_5_50)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12429 (* ?x12428 l_0_5_49)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12426 (* ?x12425 l_0_5_5)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x15919 (* ?x15918 l_0_5_230)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x15916 (* ?x15915 l_0_5_229)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x14797 (* ?x12463 l_0_5_4)))
 (= (- (- (+ (- (- ?x14797 ?x15916) ?x15919) ?x12426) ?x12429) ?x12432) 0.0))))))))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x15774 (* ?x15773 l_0_5_94)))
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12470 (* ?x12431 l_0_5_53)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12468 (* ?x12428 l_0_5_52)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12466 (* ?x12425 l_0_5_8)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x15948 (* ?x15918 l_0_5_233)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x15946 (* ?x15915 l_0_5_232)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12464 (* ?x12463 l_0_5_7)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x15755 (* ?x12383 l_0_5_139)))
 (let ((?x15953 (- (- (- (+ (- (- (+ ?x15755 ?x12464) ?x15946) ?x15948) ?x12466) ?x12468) ?x12470) ?x15774)))
 (= ?x15953 0.0)))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12520 (* ?x12431 l_0_5_57)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12518 (* ?x12428 l_0_5_56)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x15983 (* ?x15918 l_0_5_237)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x15981 (* ?x15915 l_0_5_236)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12516 (* ?x12511 l_0_5_3)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x14879 (* ?x12992 l_0_5_2)))
 (= (- (- (- (- (+ ?x14879 ?x12516) ?x15981) ?x15983) ?x12518) ?x12520) 0.0))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12544 (* ?x12431 l_0_5_62)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12542 (* ?x12428 l_0_5_61)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16011 (* ?x15918 l_0_5_242)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16009 (* ?x15915 l_0_5_241)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12535 (* ?x12085 l_0_5_3)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x14929 (* ?x12078 l_0_5_2)))
 (= (- (- (- (- (+ ?x14929 ?x12535) ?x16009) ?x16011) ?x12542) ?x12544) 0.0))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12568 (* ?x12431 l_0_5_68)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12566 (* ?x12428 l_0_5_67)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12559 (* ?x12558 l_0_5_3)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16038 (* ?x15918 l_0_5_248)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16036 (* ?x15915 l_0_5_247)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x14965 (* ?x12463 l_0_5_22)))
 (= (- (- (+ (- (- ?x14965 ?x16036) ?x16038) ?x12559) ?x12566) ?x12568) 0.0))))))))))))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x16082 (* ?x16081 l_0_5_95)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x16079 (* ?x16078 l_0_5_94)))
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12591 (* ?x12431 l_0_5_75)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12589 (* ?x12428 l_0_5_74)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12582 (* ?x12425 l_0_5_30)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16073 (* ?x15918 l_0_5_255)))
 (let ((?x15919 (* ?x15918 l_0_5_230)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16070 (* ?x15915 l_0_5_254)))
 (let ((?x15916 (* ?x15915 l_0_5_229)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x15042 (* ?x12463 l_0_5_29)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x16066 (* ?x12615 l_0_5_140)))
 (let ((?x16071 (- (+ (+ (- (* (* (- 2.0) l_0_5_137) l_0_5_139) ?x16066) ?x15042) ?x15916) ?x16070)))
 (let ((?x16083 (+ (+ (- (- (+ (- (+ ?x16071 ?x15919) ?x16073) ?x12582) ?x12589) ?x12591) ?x16079) ?x16082)))
 (= ?x16083 0.0))))))))))))))))))))))))
(assert
 (let ((?x12431 (* 2.0 l_0_5_48)))
 (let ((?x12624 (* ?x12431 l_0_5_83)))
 (let ((?x12428 (* 2.0 l_0_5_47)))
 (let ((?x12622 (* ?x12428 l_0_5_82)))
 (let ((?x12425 (* 2.0 l_0_5_3)))
 (let ((?x12620 (* ?x12425 l_0_5_38)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16122 (* ?x15918 l_0_5_263)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16120 (* ?x15915 l_0_5_262)))
 (let ((?x12463 (* 2.0 l_0_5_2)))
 (let ((?x12618 (* ?x12463 l_0_5_37)))
 (= (- (- (+ (- (- ?x12618 ?x16120) ?x16122) ?x12620) ?x12622) ?x12624) 0.0))))))))))))))
(assert
 (let ((?x12671 (* l_0_5_6 l_0_5_6)))
 (let ((?x12669 (* l_0_5_51 l_0_5_51)))
 (let ((?x12667 (* l_0_5_50 l_0_5_50)))
 (let ((?x12665 (* l_0_5_5 l_0_5_5)))
 (let ((?x12656 (* l_0_5_49 l_0_5_49)))
 (let ((?x12675 (* l_0_5_4 l_0_5_4)))
 (let ((?x16152 (* l_0_5_231 l_0_5_231)))
 (let ((?x16153 (- (- (* (- l_0_5_229) l_0_5_229) (* l_0_5_230 l_0_5_230)) ?x16152)))
 (= (+ (- (- (+ (- (+ ?x16153 ?x12675) ?x12656) ?x12665) ?x12667) ?x12669) ?x12671) 0.0))))))))))
(assert
 (let ((?x12701 (* (* 2.0 l_0_5_6) l_0_5_9)))
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12698 (* ?x12697 l_0_5_54)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12695 (* ?x12694 l_0_5_53)))
 (let ((?x12692 (* (* 2.0 l_0_5_5) l_0_5_8)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12689 (* ?x12688 l_0_5_52)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16189 (* ?x16188 l_0_5_234)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16186 (* ?x16185 l_0_5_233)))
 (let ((?x16193 (+ (- (- (* (* (- 2.0) l_0_5_229) l_0_5_232) ?x16186) ?x16189) (* (* 2.0 l_0_5_4) l_0_5_7))))
 (= (+ (- (- (+ (- ?x16193 ?x12689) ?x12692) ?x12695) ?x12698) ?x12701) 0.0)))))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12742 (* ?x12697 l_0_5_58)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12740 (* ?x12694 l_0_5_57)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12738 (* ?x12688 l_0_5_56)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16235 (* ?x16188 l_0_5_238)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16233 (* ?x16185 l_0_5_237)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16231 (* ?x16230 l_0_5_236)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x12736 (* ?x12735 l_0_5_6)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x12733 (* ?x12511 l_0_5_5)))
 (let ((?x16234 (- (- (+ (+ (* (* 2.0 l_0_5_11) l_0_5_4) ?x12733) ?x12736) ?x16231) ?x16233)))
 (= (- (- (- (- ?x16234 ?x16235) ?x12738) ?x12740) ?x12742) 0.0)))))))))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12777 (* ?x12697 l_0_5_63)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12775 (* ?x12694 l_0_5_62)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12773 (* ?x12688 l_0_5_61)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16280 (* ?x16188 l_0_5_243)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16278 (* ?x16185 l_0_5_242)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16276 (* ?x16230 l_0_5_241)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x12765 (* ?x12088 l_0_5_6)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x12762 (* ?x12085 l_0_5_5)))
 (let ((?x16279 (- (- (+ (+ (* (* 2.0 l_0_5_16) l_0_5_4) ?x12762) ?x12765) ?x16276) ?x16278)))
 (= (- (- (- (- ?x16279 ?x16280) ?x12773) ?x12775) ?x12777) 0.0)))))))))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12814 (* ?x12697 l_0_5_69)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12812 (* ?x12694 l_0_5_68)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12810 (* ?x12688 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x12808 (* ?x12807 l_0_5_6)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16324 (* ?x16188 l_0_5_249)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16322 (* ?x16185 l_0_5_248)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x12799 (* ?x12558 l_0_5_5)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16319 (* ?x16230 l_0_5_247)))
 (let ((?x16325 (- (- (+ (- (* (* 2.0 l_0_5_22) l_0_5_4) ?x16319) ?x12799) ?x16322) ?x16324)))
 (= (- (- (- (+ ?x16325 ?x12808) ?x12810) ?x12812) ?x12814) 0.0)))))))))))))))))))
(assert
 (let ((?x16390 (* l_0_5_96 l_0_5_96)))
 (let ((?x16388 (* l_0_5_95 l_0_5_95)))
 (let ((?x16386 (* l_0_5_94 l_0_5_94)))
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12852 (* ?x12697 l_0_5_76)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12850 (* ?x12694 l_0_5_75)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12848 (* ?x12688 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x12846 (* ?x12845 l_0_5_6)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x12837 (* ?x12836 l_0_5_5)))
 (let ((?x16152 (* l_0_5_231 l_0_5_231)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16376 (* ?x16188 l_0_5_256)))
 (let ((?x16150 (* l_0_5_230 l_0_5_230)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16373 (* ?x16185 l_0_5_255)))
 (let ((?x16162 (* l_0_5_229 l_0_5_229)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16370 (* ?x16230 l_0_5_254)))
 (let ((?x16368 (* l_0_5_141 l_0_5_141)))
 (let ((?x16369 (- (- (* (- l_0_5_139) l_0_5_139) (* l_0_5_140 l_0_5_140)) ?x16368)))
 (let ((?x16380 (+ (+ (- (+ (- (+ (- ?x16369 ?x16370) ?x16162) ?x16373) ?x16150) ?x16376) ?x16152) (* (* 2.0 l_0_5_29) l_0_5_4))))
 (let ((?x16389 (+ (+ (- (- (- (+ (+ ?x16380 ?x12837) ?x12846) ?x12848) ?x12850) ?x12852) ?x16386) ?x16388)))
 (= (+ ?x16389 ?x16390) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x12697 (* 2.0 l_0_5_51)))
 (let ((?x12905 (* ?x12697 l_0_5_84)))
 (let ((?x12694 (* 2.0 l_0_5_50)))
 (let ((?x12903 (* ?x12694 l_0_5_83)))
 (let ((?x12688 (* 2.0 l_0_5_49)))
 (let ((?x12901 (* ?x12688 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x12899 (* ?x12898 l_0_5_6)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x12896 (* ?x12895 l_0_5_5)))
 (let ((?x12892 (* 2.0 l_0_5_37)))
 (let ((?x12893 (* ?x12892 l_0_5_4)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16440 (* ?x16188 l_0_5_264)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16438 (* ?x16185 l_0_5_263)))
 (let ((?x16443 (+ (+ (- (- (* (* (- 2.0) l_0_5_229) l_0_5_262) ?x16438) ?x16440) ?x12893) ?x12896)))
 (= (- (- (- (+ ?x16443 ?x12899) ?x12901) ?x12903) ?x12905) 0.0)))))))))))))))))))
(assert
 (let ((?x12973 (* l_0_5_9 l_0_5_9)))
 (let ((?x12971 (* l_0_5_8 l_0_5_8)))
 (let ((?x12969 (* l_0_5_7 l_0_5_7)))
 (let ((?x12967 (* l_0_5_55 l_0_5_55)))
 (let ((?x12965 (* l_0_5_54 l_0_5_54)))
 (let ((?x12963 (* l_0_5_53 l_0_5_53)))
 (let ((?x12952 (* l_0_5_52 l_0_5_52)))
 (let ((?x16480 (* l_0_5_235 l_0_5_235)))
 (let ((?x16478 (* l_0_5_234 l_0_5_234)))
 (let ((?x16476 (* l_0_5_233 l_0_5_233)))
 (let ((?x16479 (- (- (- (* l_0_5_10 l_0_5_10) (* l_0_5_232 l_0_5_232)) ?x16476) ?x16478)))
 (let ((?x16487 (+ (+ (- (- (- (- (- ?x16479 ?x16480) ?x12952) ?x12963) ?x12965) ?x12967) ?x12969) ?x12971)))
 (= (+ ?x16487 ?x12973) 0.0))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13086 (* ?x13014 l_0_5_64)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13084 (* ?x13011 l_0_5_63)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13082 (* ?x13008 l_0_5_62)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13080 (* ?x13005 l_0_5_61)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16525 (* ?x14631 l_0_5_244)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16523 (* ?x14628 l_0_5_243)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16521 (* ?x14625 l_0_5_242)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16519 (* ?x14622 l_0_5_241)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13078 (* ?x12088 l_0_5_9)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13069 (* ?x12085 l_0_5_8)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x13065 (* ?x12078 l_0_5_7)))
 (let ((?x16520 (- (+ (+ (+ (* (* 2.0 l_0_5_10) l_0_5_19) ?x13065) ?x13069) ?x13078) ?x16519)))
 (let ((?x16530 (- (- (- (- (- (- (- ?x16520 ?x16521) ?x16523) ?x16525) ?x13080) ?x13082) ?x13084) ?x13086)))
 (= ?x16530 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13134 (* ?x13014 l_0_5_70)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13132 (* ?x13011 l_0_5_69)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13130 (* ?x13008 l_0_5_68)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13128 (* ?x13005 l_0_5_67)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x13126 (* ?x12807 l_0_5_9)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16583 (* ?x14631 l_0_5_250)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16581 (* ?x14628 l_0_5_249)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16579 (* ?x14625 l_0_5_248)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16577 (* ?x14622 l_0_5_247)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x13117 (* ?x12558 l_0_5_8)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x13114 (* ?x13112 l_0_5_7)))
 (let ((?x16580 (- (- (+ (+ (* (* 2.0 l_0_5_10) l_0_5_25) ?x13114) ?x13117) ?x16577) ?x16579)))
 (let ((?x16589 (- (- (- (- (+ (- (- ?x16580 ?x16581) ?x16583) ?x13126) ?x13128) ?x13130) ?x13132) ?x13134)))
 (= ?x16589 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16667 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x16664 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x16661 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13182 (* ?x13014 l_0_5_77)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13180 (* ?x13011 l_0_5_76)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13178 (* ?x13008 l_0_5_75)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13176 (* ?x13005 l_0_5_74)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x13174 (* ?x12845 l_0_5_9)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x13165 (* ?x12836 l_0_5_8)))
 (let ((?x13160 (* 2.0 l_0_5_29)))
 (let ((?x13162 (* ?x13160 l_0_5_7)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16651 (* ?x14631 l_0_5_257)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16649 (* ?x14628 l_0_5_256)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16647 (* ?x14625 l_0_5_255)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16645 (* ?x14622 l_0_5_254)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16189 (* ?x16188 l_0_5_234)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16186 (* ?x16185 l_0_5_233)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x16639 (* ?x12889 l_0_5_144)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x16637 (* ?x12886 l_0_5_143)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x16635 (* ?x12883 l_0_5_142)))
 (let ((?x16642 (+ (- (- (- (* (* 2.0 l_0_5_10) l_0_5_32) ?x16635) ?x16637) ?x16639) (* (* 2.0 l_0_5_229) l_0_5_232))))
 (let ((?x16653 (+ (- (- (- (- (+ (+ ?x16642 ?x16186) ?x16189) ?x16645) ?x16647) ?x16649) ?x16651) ?x13162)))
 (let ((?x16662 (+ (- (- (- (- (+ (+ ?x16653 ?x13165) ?x13174) ?x13176) ?x13178) ?x13180) ?x13182) ?x16661)))
 (= (+ (+ ?x16662 ?x16664) ?x16667) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13014 (* 2.0 l_0_5_55)))
 (let ((?x13250 (* ?x13014 l_0_5_85)))
 (let ((?x13011 (* 2.0 l_0_5_54)))
 (let ((?x13248 (* ?x13011 l_0_5_84)))
 (let ((?x13008 (* 2.0 l_0_5_53)))
 (let ((?x13246 (* ?x13008 l_0_5_83)))
 (let ((?x13005 (* 2.0 l_0_5_52)))
 (let ((?x13244 (* ?x13005 l_0_5_82)))
 (let ((?x12898 (* 2.0 l_0_5_39)))
 (let ((?x13242 (* ?x12898 l_0_5_9)))
 (let ((?x12895 (* 2.0 l_0_5_38)))
 (let ((?x13240 (* ?x12895 l_0_5_8)))
 (let ((?x12892 (* 2.0 l_0_5_37)))
 (let ((?x13238 (* ?x12892 l_0_5_7)))
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16746 (* ?x14631 l_0_5_265)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16744 (* ?x14628 l_0_5_264)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16742 (* ?x14625 l_0_5_263)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16740 (* ?x14622 l_0_5_262)))
 (let ((?x16747 (- (- (- (- (* (* 2.0 l_0_5_10) l_0_5_40) ?x16740) ?x16742) ?x16744) ?x16746)))
 (let ((?x16754 (- (- (- (- (+ (+ (+ ?x16747 ?x13238) ?x13240) ?x13242) ?x13244) ?x13246) ?x13248) ?x13250)))
 (= ?x16754 0.0))))))))))))))))))))))))))
(assert
 (let ((?x13339 (* l_0_5_60 l_0_5_60)))
 (let ((?x13337 (* l_0_5_59 l_0_5_59)))
 (let ((?x13335 (* l_0_5_58 l_0_5_58)))
 (let ((?x13333 (* l_0_5_57 l_0_5_57)))
 (let ((?x13331 (* l_0_5_56 l_0_5_56)))
 (let ((?x16806 (* l_0_5_240 l_0_5_240)))
 (let ((?x16804 (* l_0_5_239 l_0_5_239)))
 (let ((?x16802 (* l_0_5_238 l_0_5_238)))
 (let ((?x16800 (* l_0_5_237 l_0_5_237)))
 (let ((?x16798 (* l_0_5_236 l_0_5_236)))
 (let ((?x13329 (* l_0_5_15 l_0_5_15)))
 (let ((?x13327 (* l_0_5_14 l_0_5_14)))
 (let ((?x13314 (* l_0_5_13 l_0_5_13)))
 (let ((?x16796 (+ (+ (+ (* l_0_5_11 l_0_5_11) (* l_0_5_12 l_0_5_12)) ?x13314) ?x13327)))
 (let ((?x16808 (- (- (- (- (- (- (+ ?x16796 ?x13329) ?x16798) ?x16800) ?x16802) ?x16804) ?x16806) ?x13331)))
 (= (- (- (- (- ?x16808 ?x13333) ?x13335) ?x13337) ?x13339) 0.0)))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13388 (* ?x13387 l_0_5_65)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13385 (* ?x13384 l_0_5_64)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13382 (* ?x13381 l_0_5_63)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13379 (* ?x13378 l_0_5_62)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13376 (* ?x13375 l_0_5_61)))
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x16859 (* ?x16858 l_0_5_245)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x16856 (* ?x16855 l_0_5_244)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x16853 (* ?x16852 l_0_5_243)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x16850 (* ?x16849 l_0_5_242)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x16847 (* ?x16846 l_0_5_241)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13373 (* ?x13372 l_0_5_20)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13370 (* ?x13369 l_0_5_19)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13367 (* ?x12735 l_0_5_18)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13365 (* ?x12511 l_0_5_17)))
 (let ((?x16845 (+ (+ (+ (+ (* (* 2.0 l_0_5_11) l_0_5_16) ?x13365) ?x13367) ?x13370) ?x13373)))
 (let ((?x16862 (- (- (- (- (- (- (- ?x16845 ?x16847) ?x16850) ?x16853) ?x16856) ?x16859) ?x13376) ?x13379)))
 (= (- (- (- ?x16862 ?x13382) ?x13385) ?x13388) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13447 (* ?x13387 l_0_5_71)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13445 (* ?x13384 l_0_5_70)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13443 (* ?x13381 l_0_5_69)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13441 (* ?x13378 l_0_5_68)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13439 (* ?x13375 l_0_5_67)))
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x16932 (* ?x16858 l_0_5_251)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x16930 (* ?x16855 l_0_5_250)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x16928 (* ?x16852 l_0_5_249)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x16926 (* ?x16849 l_0_5_248)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x16924 (* ?x16846 l_0_5_247)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13437 (* ?x13372 l_0_5_26)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13427 (* ?x13369 l_0_5_25)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13424 (* ?x12735 l_0_5_24)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13420 (* ?x12511 l_0_5_23)))
 (let ((?x16923 (+ (+ (+ (+ (* (* 2.0 l_0_5_11) l_0_5_22) ?x13420) ?x13424) ?x13427) ?x13437)))
 (let ((?x16935 (- (- (- (- (- (- (- ?x16923 ?x16924) ?x16926) ?x16928) ?x16930) ?x16932) ?x13439) ?x13441)))
 (= (- (- (- ?x16935 ?x13443) ?x13445) ?x13447) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13506 (* ?x13387 l_0_5_78)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13504 (* ?x13384 l_0_5_77)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13502 (* ?x13381 l_0_5_76)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13500 (* ?x13378 l_0_5_75)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13498 (* ?x13375 l_0_5_74)))
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x17015 (* ?x16858 l_0_5_258)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x17013 (* ?x16855 l_0_5_257)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x17011 (* ?x16852 l_0_5_256)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x17009 (* ?x16849 l_0_5_255)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x17007 (* ?x16846 l_0_5_254)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16235 (* ?x16188 l_0_5_238)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16233 (* ?x16185 l_0_5_237)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16231 (* ?x16230 l_0_5_236)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13496 (* ?x13372 l_0_5_33)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x14795 (* ?x12889 l_0_5_148)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x14793 (* ?x12886 l_0_5_147)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13486 (* ?x13369 l_0_5_32)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x14791 (* ?x12883 l_0_5_146)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13483 (* ?x12735 l_0_5_31)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13479 (* ?x12511 l_0_5_30)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14789 (* ?x13545 l_0_5_96)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14787 (* ?x13540 l_0_5_95)))
 (let ((?x16996 (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_94) ?x14787) ?x14789) (* (* 2.0 l_0_5_11) l_0_5_29))))
 (let ((?x17003 (+ (- (- (+ (- (+ (+ ?x16996 ?x13479) ?x13483) ?x14791) ?x13486) ?x14793) ?x14795) ?x13496)))
 (let ((?x17014 (- (- (- (- (+ (+ (+ ?x17003 ?x16231) ?x16233) ?x16235) ?x17007) ?x17009) ?x17011) ?x17013)))
 (= (- (- (- (- (- (- ?x17014 ?x17015) ?x13498) ?x13500) ?x13502) ?x13504) ?x13506) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13387 (* 2.0 l_0_5_60)))
 (let ((?x13595 (* ?x13387 l_0_5_86)))
 (let ((?x13384 (* 2.0 l_0_5_59)))
 (let ((?x13593 (* ?x13384 l_0_5_85)))
 (let ((?x13381 (* 2.0 l_0_5_58)))
 (let ((?x13591 (* ?x13381 l_0_5_84)))
 (let ((?x13378 (* 2.0 l_0_5_57)))
 (let ((?x13589 (* ?x13378 l_0_5_83)))
 (let ((?x13375 (* 2.0 l_0_5_56)))
 (let ((?x13587 (* ?x13375 l_0_5_82)))
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x17098 (* ?x16858 l_0_5_266)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x17096 (* ?x16855 l_0_5_265)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x17094 (* ?x16852 l_0_5_264)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x17092 (* ?x16849 l_0_5_263)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x17090 (* ?x16846 l_0_5_262)))
 (let ((?x13372 (* 2.0 l_0_5_15)))
 (let ((?x13582 (* ?x13372 l_0_5_41)))
 (let ((?x13369 (* 2.0 l_0_5_14)))
 (let ((?x13568 (* ?x13369 l_0_5_40)))
 (let ((?x12735 (* 2.0 l_0_5_13)))
 (let ((?x13566 (* ?x12735 l_0_5_39)))
 (let ((?x12511 (* 2.0 l_0_5_12)))
 (let ((?x13564 (* ?x12511 l_0_5_38)))
 (let ((?x12992 (* 2.0 l_0_5_11)))
 (let ((?x13562 (* ?x12992 l_0_5_37)))
 (let ((?x17095 (- (- (- (+ (+ (+ (+ ?x13562 ?x13564) ?x13566) ?x13568) ?x13582) ?x17090) ?x17092) ?x17094)))
 (let ((?x17104 (- (- (- (- (- (- (- ?x17095 ?x17096) ?x17098) ?x13587) ?x13589) ?x13591) ?x13593) ?x13595)))
 (= ?x17104 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13704 (* l_0_5_66 l_0_5_66)))
 (let ((?x13702 (* l_0_5_65 l_0_5_65)))
 (let ((?x13700 (* l_0_5_64 l_0_5_64)))
 (let ((?x13698 (* l_0_5_63 l_0_5_63)))
 (let ((?x13696 (* l_0_5_62 l_0_5_62)))
 (let ((?x13694 (* l_0_5_61 l_0_5_61)))
 (let ((?x17168 (* l_0_5_246 l_0_5_246)))
 (let ((?x17166 (* l_0_5_245 l_0_5_245)))
 (let ((?x17164 (* l_0_5_244 l_0_5_244)))
 (let ((?x17162 (* l_0_5_243 l_0_5_243)))
 (let ((?x17160 (* l_0_5_242 l_0_5_242)))
 (let ((?x17158 (* l_0_5_241 l_0_5_241)))
 (let ((?x13692 (* l_0_5_21 l_0_5_21)))
 (let ((?x13690 (* l_0_5_20 l_0_5_20)))
 (let ((?x13675 (* l_0_5_19 l_0_5_19)))
 (let ((?x13672 (* l_0_5_18 l_0_5_18)))
 (let ((?x17155 (+ (+ (+ (* l_0_5_16 l_0_5_16) (* l_0_5_17 l_0_5_17)) ?x13672) ?x13675)))
 (let ((?x17167 (- (- (- (- (- (+ (+ ?x17155 ?x13690) ?x13692) ?x17158) ?x17160) ?x17162) ?x17164) ?x17166)))
 (let ((?x17175 (- (- (- (- (- (- (- ?x17167 ?x17168) ?x13694) ?x13696) ?x13698) ?x13700) ?x13702) ?x13704)))
 (= ?x17175 0.0)))))))))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13779 (* ?x12135 l_0_5_79)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13777 (* ?x12132 l_0_5_78)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13775 (* ?x12129 l_0_5_77)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13773 (* ?x12126 l_0_5_76)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13771 (* ?x12123 l_0_5_75)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13769 (* ?x12120 l_0_5_74)))
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x17235 (* ?x12115 l_0_5_259)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x17233 (* ?x12112 l_0_5_258)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x17231 (* ?x12109 l_0_5_257)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x17229 (* ?x12106 l_0_5_256)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x17227 (* ?x12103 l_0_5_255)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x17225 (* ?x12100 l_0_5_254)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16280 (* ?x16188 l_0_5_243)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16278 (* ?x16185 l_0_5_242)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16276 (* ?x16230 l_0_5_241)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13767 (* ?x12097 l_0_5_34)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13765 (* ?x12094 l_0_5_33)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13763 (* ?x12091 l_0_5_32)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13761 (* ?x12088 l_0_5_31)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13759 (* ?x12085 l_0_5_30)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x12890 (* ?x12889 l_0_5_153)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x12887 (* ?x12886 l_0_5_152)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x12884 (* ?x12883 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12875 (* ?x12286 l_0_5_96)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12872 (* ?x12283 l_0_5_95)))
 (let ((?x17213 (- (- (+ (+ (* (* 2.0 l_0_5_106) l_0_5_94) ?x12872) ?x12875) ?x12884) ?x12887)))
 (let ((?x17218 (+ (+ (+ (- ?x17213 ?x12890) (* (* 2.0 l_0_5_16) l_0_5_29)) ?x13759) ?x13761)))
 (let ((?x17226 (- (+ (+ (+ (+ (+ (+ ?x17218 ?x13763) ?x13765) ?x13767) ?x16276) ?x16278) ?x16280) ?x17225)))
 (let ((?x17238 (- (- (- (- (- (- (- ?x17226 ?x17227) ?x17229) ?x17231) ?x17233) ?x17235) ?x13769) ?x13771)))
 (= (- (- (- (- ?x17238 ?x13773) ?x13775) ?x13777) ?x13779) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12135 (* 2.0 l_0_5_66)))
 (let ((?x13875 (* ?x12135 l_0_5_87)))
 (let ((?x12132 (* 2.0 l_0_5_65)))
 (let ((?x13873 (* ?x12132 l_0_5_86)))
 (let ((?x12129 (* 2.0 l_0_5_64)))
 (let ((?x13871 (* ?x12129 l_0_5_85)))
 (let ((?x12126 (* 2.0 l_0_5_63)))
 (let ((?x13869 (* ?x12126 l_0_5_84)))
 (let ((?x12123 (* 2.0 l_0_5_62)))
 (let ((?x13867 (* ?x12123 l_0_5_83)))
 (let ((?x12120 (* 2.0 l_0_5_61)))
 (let ((?x13865 (* ?x12120 l_0_5_82)))
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x17331 (* ?x12115 l_0_5_267)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x17329 (* ?x12112 l_0_5_266)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x17327 (* ?x12109 l_0_5_265)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x17325 (* ?x12106 l_0_5_264)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x17323 (* ?x12103 l_0_5_263)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x17321 (* ?x12100 l_0_5_262)))
 (let ((?x12097 (* 2.0 l_0_5_21)))
 (let ((?x13863 (* ?x12097 l_0_5_42)))
 (let ((?x12094 (* 2.0 l_0_5_20)))
 (let ((?x13861 (* ?x12094 l_0_5_41)))
 (let ((?x12091 (* 2.0 l_0_5_19)))
 (let ((?x13859 (* ?x12091 l_0_5_40)))
 (let ((?x12088 (* 2.0 l_0_5_18)))
 (let ((?x13857 (* ?x12088 l_0_5_39)))
 (let ((?x12085 (* 2.0 l_0_5_17)))
 (let ((?x13855 (* ?x12085 l_0_5_38)))
 (let ((?x12078 (* 2.0 l_0_5_16)))
 (let ((?x13853 (* ?x12078 l_0_5_37)))
 (let ((?x17324 (- (- (+ (+ (+ (+ (+ ?x13853 ?x13855) ?x13857) ?x13859) ?x13861) ?x13863) ?x17321) ?x17323)))
 (let ((?x17335 (- (- (- (- (- (- (- ?x17324 ?x17325) ?x17327) ?x17329) ?x17331) ?x13865) ?x13867) ?x13869)))
 (= (- (- (- ?x17335 ?x13871) ?x13873) ?x13875) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x13979 (* l_0_5_73 l_0_5_73)))
 (let ((?x13977 (* l_0_5_72 l_0_5_72)))
 (let ((?x13975 (* l_0_5_71 l_0_5_71)))
 (let ((?x13973 (* l_0_5_70 l_0_5_70)))
 (let ((?x13971 (* l_0_5_69 l_0_5_69)))
 (let ((?x13969 (* l_0_5_68 l_0_5_68)))
 (let ((?x13967 (* l_0_5_67 l_0_5_67)))
 (let ((?x13965 (* l_0_5_28 l_0_5_28)))
 (let ((?x13963 (* l_0_5_27 l_0_5_27)))
 (let ((?x13961 (* l_0_5_26 l_0_5_26)))
 (let ((?x17411 (* l_0_5_253 l_0_5_253)))
 (let ((?x17409 (* l_0_5_252 l_0_5_252)))
 (let ((?x17407 (* l_0_5_251 l_0_5_251)))
 (let ((?x17405 (* l_0_5_250 l_0_5_250)))
 (let ((?x13945 (* l_0_5_25 l_0_5_25)))
 (let ((?x17402 (* l_0_5_249 l_0_5_249)))
 (let ((?x17400 (* l_0_5_248 l_0_5_248)))
 (let ((?x17398 (* l_0_5_247 l_0_5_247)))
 (let ((?x13942 (* l_0_5_24 l_0_5_24)))
 (let ((?x17399 (- (+ (+ (* l_0_5_22 l_0_5_22) (* l_0_5_23 l_0_5_23)) ?x13942) ?x17398)))
 (let ((?x17412 (- (- (- (- (+ (- (- ?x17399 ?x17400) ?x17402) ?x13945) ?x17405) ?x17407) ?x17409) ?x17411)))
 (let ((?x17419 (- (- (- (- (+ (+ (+ ?x17412 ?x13961) ?x13963) ?x13965) ?x13967) ?x13969) ?x13971) ?x13973)))
 (= (- (- (- ?x17419 ?x13975) ?x13977) ?x13979) 0.0))))))))))))))))))))))))
(assert
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14048 (* ?x14047 l_0_5_80)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14045 (* ?x14044 l_0_5_79)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14042 (* ?x14041 l_0_5_78)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14039 (* ?x14038 l_0_5_77)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14036 (* ?x14035 l_0_5_76)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14033 (* ?x14032 l_0_5_75)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14030 (* ?x14029 l_0_5_74)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14027 (* ?x14026 l_0_5_35)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14024 (* ?x14023 l_0_5_34)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14021 (* ?x14020 l_0_5_33)))
 (let ((?x17503 (* 2.0 l_0_5_253)))
 (let ((?x17504 (* ?x17503 l_0_5_260)))
 (let ((?x17500 (* 2.0 l_0_5_252)))
 (let ((?x17501 (* ?x17500 l_0_5_259)))
 (let ((?x17497 (* 2.0 l_0_5_251)))
 (let ((?x17498 (* ?x17497 l_0_5_258)))
 (let ((?x17494 (* 2.0 l_0_5_250)))
 (let ((?x17495 (* ?x17494 l_0_5_257)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14018 (* ?x14017 l_0_5_32)))
 (let ((?x17490 (* 2.0 l_0_5_249)))
 (let ((?x17491 (* ?x17490 l_0_5_256)))
 (let ((?x17487 (* 2.0 l_0_5_248)))
 (let ((?x17488 (* ?x17487 l_0_5_255)))
 (let ((?x17484 (* 2.0 l_0_5_247)))
 (let ((?x17485 (* ?x17484 l_0_5_254)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14015 (* ?x12807 l_0_5_31)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16324 (* ?x16188 l_0_5_249)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16322 (* ?x16185 l_0_5_248)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14013 (* ?x12558 l_0_5_30)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16319 (* ?x16230 l_0_5_247)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17475 (* ?x12889 l_0_5_159)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17473 (* ?x12886 l_0_5_158)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17471 (* ?x12883 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x17469 (* ?x17468 l_0_5_96)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x17466 (* ?x17465 l_0_5_95)))
 (let ((?x17474 (- (- (+ (+ (* (* 2.0 l_0_5_112) l_0_5_94) ?x17466) ?x17469) ?x17471) ?x17473)))
 (let ((?x17480 (+ (+ (+ (- ?x17474 ?x17475) (* (* 2.0 l_0_5_22) l_0_5_29)) ?x16319) ?x14013)))
 (let ((?x17493 (+ (- (- (- (+ (+ (+ ?x17480 ?x16322) ?x16324) ?x14015) ?x17485) ?x17488) ?x17491) ?x14018)))
 (let ((?x17508 (+ (+ (+ (- (- (- (- ?x17493 ?x17495) ?x17498) ?x17501) ?x17504) ?x14021) ?x14024) ?x14027)))
 (let ((?x17515 (- (- (- (- (- (- (- ?x17508 ?x14030) ?x14033) ?x14036) ?x14039) ?x14042) ?x14045) ?x14048)))
 (= ?x17515 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x15774 (* ?x15773 l_0_5_94)))
 (let ((?x14047 (* 2.0 l_0_5_73)))
 (let ((?x14132 (* ?x14047 l_0_5_88)))
 (let ((?x14044 (* 2.0 l_0_5_72)))
 (let ((?x14130 (* ?x14044 l_0_5_87)))
 (let ((?x14041 (* 2.0 l_0_5_71)))
 (let ((?x14128 (* ?x14041 l_0_5_86)))
 (let ((?x14038 (* 2.0 l_0_5_70)))
 (let ((?x14126 (* ?x14038 l_0_5_85)))
 (let ((?x14035 (* 2.0 l_0_5_69)))
 (let ((?x14124 (* ?x14035 l_0_5_84)))
 (let ((?x14032 (* 2.0 l_0_5_68)))
 (let ((?x14122 (* ?x14032 l_0_5_83)))
 (let ((?x14029 (* 2.0 l_0_5_67)))
 (let ((?x14120 (* ?x14029 l_0_5_82)))
 (let ((?x14026 (* 2.0 l_0_5_28)))
 (let ((?x14118 (* ?x14026 l_0_5_43)))
 (let ((?x14023 (* 2.0 l_0_5_27)))
 (let ((?x14116 (* ?x14023 l_0_5_42)))
 (let ((?x14020 (* 2.0 l_0_5_26)))
 (let ((?x14114 (* ?x14020 l_0_5_41)))
 (let ((?x17503 (* 2.0 l_0_5_253)))
 (let ((?x17632 (* ?x17503 l_0_5_268)))
 (let ((?x17500 (* 2.0 l_0_5_252)))
 (let ((?x17630 (* ?x17500 l_0_5_267)))
 (let ((?x17497 (* 2.0 l_0_5_251)))
 (let ((?x17628 (* ?x17497 l_0_5_266)))
 (let ((?x17494 (* 2.0 l_0_5_250)))
 (let ((?x17626 (* ?x17494 l_0_5_265)))
 (let ((?x14017 (* 2.0 l_0_5_25)))
 (let ((?x14102 (* ?x14017 l_0_5_40)))
 (let ((?x17490 (* 2.0 l_0_5_249)))
 (let ((?x17623 (* ?x17490 l_0_5_264)))
 (let ((?x17487 (* 2.0 l_0_5_248)))
 (let ((?x17621 (* ?x17487 l_0_5_263)))
 (let ((?x17484 (* 2.0 l_0_5_247)))
 (let ((?x17619 (* ?x17484 l_0_5_262)))
 (let ((?x12807 (* 2.0 l_0_5_24)))
 (let ((?x14098 (* ?x12807 l_0_5_39)))
 (let ((?x12558 (* 2.0 l_0_5_23)))
 (let ((?x14094 (* ?x12558 l_0_5_38)))
 (let ((?x13112 (* 2.0 l_0_5_22)))
 (let ((?x14090 (* ?x13112 l_0_5_37)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x15755 (* ?x12383 l_0_5_139)))
 (let ((?x17625 (+ (- (- (- (+ (+ (+ ?x15755 ?x14090) ?x14094) ?x14098) ?x17619) ?x17621) ?x17623) ?x14102)))
 (let ((?x17636 (+ (+ (+ (- (- (- (- ?x17625 ?x17626) ?x17628) ?x17630) ?x17632) ?x14114) ?x14116) ?x14118)))
 (let ((?x17643 (- (- (- (- (- (- (- ?x17636 ?x14120) ?x14122) ?x14124) ?x14126) ?x14128) ?x14130) ?x14132)))
 (= (- ?x17643 ?x15774) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14223 (* l_0_5_81 l_0_5_81)))
 (let ((?x14221 (* l_0_5_80 l_0_5_80)))
 (let ((?x14219 (* l_0_5_79 l_0_5_79)))
 (let ((?x14217 (* l_0_5_78 l_0_5_78)))
 (let ((?x14215 (* l_0_5_77 l_0_5_77)))
 (let ((?x14213 (* l_0_5_76 l_0_5_76)))
 (let ((?x14211 (* l_0_5_75 l_0_5_75)))
 (let ((?x14209 (* l_0_5_74 l_0_5_74)))
 (let ((?x14207 (* l_0_5_36 l_0_5_36)))
 (let ((?x14205 (* l_0_5_35 l_0_5_35)))
 (let ((?x14203 (* l_0_5_34 l_0_5_34)))
 (let ((?x14201 (* l_0_5_33 l_0_5_33)))
 (let ((?x14190 (* l_0_5_32 l_0_5_32)))
 (let ((?x14186 (* l_0_5_31 l_0_5_31)))
 (let ((?x14182 (* l_0_5_30 l_0_5_30)))
 (let ((?x14227 (* l_0_5_29 l_0_5_29)))
 (let ((?x17746 (* l_0_5_261 l_0_5_261)))
 (let ((?x17744 (* l_0_5_260 l_0_5_260)))
 (let ((?x17742 (* l_0_5_259 l_0_5_259)))
 (let ((?x17740 (* l_0_5_258 l_0_5_258)))
 (let ((?x17738 (* l_0_5_257 l_0_5_257)))
 (let ((?x17736 (* l_0_5_256 l_0_5_256)))
 (let ((?x17734 (* l_0_5_255 l_0_5_255)))
 (let ((?x17732 (* l_0_5_254 l_0_5_254)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16376 (* ?x16188 l_0_5_256)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16373 (* ?x16185 l_0_5_255)))
 (let ((?x16230 (* 2.0 l_0_5_229)))
 (let ((?x16370 (* ?x16230 l_0_5_254)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17727 (* ?x12889 l_0_5_166)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17725 (* ?x12886 l_0_5_165)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17723 (* ?x12883 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x17721 (* ?x17720 l_0_5_96)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x17718 (* ?x17717 l_0_5_95)))
 (let ((?x17726 (- (- (+ (+ (* (* 2.0 l_0_5_119) l_0_5_94) ?x17718) ?x17721) ?x17723) ?x17725)))
 (let ((?x17737 (- (- (- (+ (+ (+ (- ?x17726 ?x17727) ?x16370) ?x16373) ?x16376) ?x17732) ?x17734) ?x17736)))
 (let ((?x17749 (+ (+ (- (- (- (- (- ?x17737 ?x17738) ?x17740) ?x17742) ?x17744) ?x17746) ?x14227) ?x14182)))
 (let ((?x17756 (- (+ (+ (+ (+ (+ (+ ?x17749 ?x14186) ?x14190) ?x14201) ?x14203) ?x14205) ?x14207) ?x14209)))
 (let ((?x17763 (- (- (- (- (- (- (- ?x17756 ?x14211) ?x14213) ?x14215) ?x14217) ?x14219) ?x14221) ?x14223)))
 (= ?x17763 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14326 (* (* 2.0 l_0_5_81) l_0_5_89)))
 (let ((?x14323 (* (* 2.0 l_0_5_80) l_0_5_88)))
 (let ((?x14320 (* (* 2.0 l_0_5_79) l_0_5_87)))
 (let ((?x14317 (* (* 2.0 l_0_5_78) l_0_5_86)))
 (let ((?x14314 (* (* 2.0 l_0_5_77) l_0_5_85)))
 (let ((?x14311 (* (* 2.0 l_0_5_76) l_0_5_84)))
 (let ((?x14308 (* (* 2.0 l_0_5_75) l_0_5_83)))
 (let ((?x14305 (* (* 2.0 l_0_5_74) l_0_5_82)))
 (let ((?x14302 (* (* 2.0 l_0_5_36) l_0_5_44)))
 (let ((?x14299 (* (* 2.0 l_0_5_35) l_0_5_43)))
 (let ((?x14296 (* (* 2.0 l_0_5_34) l_0_5_42)))
 (let ((?x14293 (* (* 2.0 l_0_5_33) l_0_5_41)))
 (let ((?x14290 (* (* 2.0 l_0_5_32) l_0_5_40)))
 (let ((?x12845 (* 2.0 l_0_5_31)))
 (let ((?x14287 (* ?x12845 l_0_5_39)))
 (let ((?x12836 (* 2.0 l_0_5_30)))
 (let ((?x14285 (* ?x12836 l_0_5_38)))
 (let ((?x13160 (* 2.0 l_0_5_29)))
 (let ((?x14283 (* ?x13160 l_0_5_37)))
 (let ((?x17873 (* (* 2.0 l_0_5_261) l_0_5_269)))
 (let ((?x17870 (* (* 2.0 l_0_5_260) l_0_5_268)))
 (let ((?x17867 (* (* 2.0 l_0_5_259) l_0_5_267)))
 (let ((?x17864 (* (* 2.0 l_0_5_258) l_0_5_266)))
 (let ((?x17861 (* (* 2.0 l_0_5_257) l_0_5_265)))
 (let ((?x17858 (* (* 2.0 l_0_5_256) l_0_5_264)))
 (let ((?x17855 (* (* 2.0 l_0_5_255) l_0_5_263)))
 (let ((?x17852 (* (* 2.0 l_0_5_254) l_0_5_262)))
 (let ((?x16188 (* 2.0 l_0_5_231)))
 (let ((?x16440 (* ?x16188 l_0_5_264)))
 (let ((?x16185 (* 2.0 l_0_5_230)))
 (let ((?x16438 (* ?x16185 l_0_5_263)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17845 (* ?x12889 l_0_5_174)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17843 (* ?x12886 l_0_5_173)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17841 (* ?x12883 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x17839 (* ?x17838 l_0_5_96)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x17836 (* ?x17835 l_0_5_95)))
 (let ((?x17844 (- (- (+ (+ (* (* 2.0 l_0_5_127) l_0_5_94) ?x17836) ?x17839) ?x17841) ?x17843)))
 (let ((?x17850 (+ (+ (+ (- ?x17844 ?x17845) (* (* 2.0 l_0_5_229) l_0_5_262)) ?x16438) ?x16440)))
 (let ((?x17871 (- (- (- (- (- (- (- ?x17850 ?x17852) ?x17855) ?x17858) ?x17861) ?x17864) ?x17867) ?x17870)))
 (let ((?x17880 (+ (+ (+ (+ (+ (+ (- ?x17871 ?x17873) ?x14283) ?x14285) ?x14287) ?x14290) ?x14293) ?x14296)))
 (let ((?x17887 (- (- (- (- (- (+ (+ ?x17880 ?x14299) ?x14302) ?x14305) ?x14308) ?x14311) ?x14314) ?x14317)))
 (= (- (- (- ?x17887 ?x14320) ?x14323) ?x14326) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x14504 (* l_0_5_90 l_0_5_90)))
 (let ((?x14502 (* l_0_5_89 l_0_5_89)))
 (let ((?x14500 (* l_0_5_88 l_0_5_88)))
 (let ((?x14498 (* l_0_5_87 l_0_5_87)))
 (let ((?x14496 (* l_0_5_86 l_0_5_86)))
 (let ((?x14494 (* l_0_5_85 l_0_5_85)))
 (let ((?x14492 (* l_0_5_84 l_0_5_84)))
 (let ((?x14490 (* l_0_5_83 l_0_5_83)))
 (let ((?x14488 (* l_0_5_82 l_0_5_82)))
 (let ((?x14486 (* l_0_5_45 l_0_5_45)))
 (let ((?x14484 (* l_0_5_44 l_0_5_44)))
 (let ((?x14482 (* l_0_5_43 l_0_5_43)))
 (let ((?x14480 (* l_0_5_42 l_0_5_42)))
 (let ((?x14478 (* l_0_5_41 l_0_5_41)))
 (let ((?x14476 (* l_0_5_40 l_0_5_40)))
 (let ((?x14474 (* l_0_5_39 l_0_5_39)))
 (let ((?x14472 (* l_0_5_38 l_0_5_38)))
 (let ((?x14470 (* l_0_5_37 l_0_5_37)))
 (let ((?x18009 (* l_0_5_270 l_0_5_270)))
 (let ((?x18007 (* l_0_5_269 l_0_5_269)))
 (let ((?x18005 (* l_0_5_268 l_0_5_268)))
 (let ((?x18003 (* l_0_5_267 l_0_5_267)))
 (let ((?x18001 (* l_0_5_266 l_0_5_266)))
 (let ((?x17999 (* l_0_5_265 l_0_5_265)))
 (let ((?x17997 (* l_0_5_264 l_0_5_264)))
 (let ((?x17998 (- (- (* (- l_0_5_262) l_0_5_262) (* l_0_5_263 l_0_5_263)) ?x17997)))
 (let ((?x18011 (+ (- (- (- (- (- (- ?x17998 ?x17999) ?x18001) ?x18003) ?x18005) ?x18007) ?x18009) ?x14470)))
 (let ((?x18018 (+ (+ (+ (+ (+ (+ (+ ?x18011 ?x14472) ?x14474) ?x14476) ?x14478) ?x14480) ?x14482) ?x14484)))
 (let ((?x18025 (- (- (- (- (- (- (+ ?x18018 ?x14486) ?x14488) ?x14490) ?x14492) ?x14494) ?x14496) ?x14498)))
 (= (- (- (- ?x18025 ?x14500) ?x14502) ?x14504) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18078 (* ?x15773 l_0_5_92)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_137) ?x18078) 0.0))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18091 (* ?x15773 l_0_5_97)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_142) ?x18091) 0.0))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x12384 (* ?x12383 l_0_5_151)))
 (= (+ (* (* (- 2.0) l_0_5_106) l_0_5_91) ?x12384) 0.0))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18111 (* ?x12383 l_0_5_157)))
 (= (+ (* (* (- 2.0) l_0_5_112) l_0_5_91) ?x18111) 0.0))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x18132 (* ?x16081 l_0_5_98)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x18130 (* ?x16078 l_0_5_97)))
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x15948 (* ?x15918 l_0_5_233)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x15946 (* ?x15915 l_0_5_232)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18126 (* ?x12615 l_0_5_143)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18124 (* ?x12612 l_0_5_142)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18118 (* ?x12383 l_0_5_164)))
 (let ((?x18128 (+ (- (- (+ (* (* (- 2.0) l_0_5_119) l_0_5_91) ?x18118) ?x18124) ?x18126) ?x15946)))
 (= (+ (+ (+ ?x18128 ?x15948) ?x18130) ?x18132) 0.0)))))))))))))))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18160 (* ?x12383 l_0_5_172)))
 (= (+ (* (* (- 2.0) l_0_5_127) l_0_5_91) ?x18160) 0.0))))
(assert
 (let ((?x18174 (* l_0_5_93 l_0_5_93)))
 (let ((?x18172 (* l_0_5_92 l_0_5_92)))
 (let ((?x18166 (* l_0_5_138 l_0_5_138)))
 (let ((?x18164 (* l_0_5_137 l_0_5_137)))
 (let ((?x18167 (+ ?x18164 ?x18166)))
 (= (- (- ?x18167 ?x18172) ?x18174) 0.0)))))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x16082 (* ?x16081 l_0_5_95)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x16079 (* ?x16078 l_0_5_94)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x16066 (* ?x12615 l_0_5_140)))
 (= (- (- (+ (* (* 2.0 l_0_5_137) l_0_5_139) ?x16066) ?x16079) ?x16082) 0.0))))))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x18132 (* ?x16081 l_0_5_98)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x18130 (* ?x16078 l_0_5_97)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18126 (* ?x12615 l_0_5_143)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18124 (* ?x12612 l_0_5_142)))
 (= (- (- (+ ?x18124 ?x18126) ?x18130) ?x18132) 0.0))))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x12616 (* ?x12615 l_0_5_152)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x12613 (* ?x12612 l_0_5_151)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12605 (* ?x12283 l_0_5_93)))
 (let ((?x12617 (+ (+ (- (* (* (- 2.0) l_0_5_106) l_0_5_92) ?x12605) ?x12613) ?x12616)))
 (= ?x12617 0.0)))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18222 (* ?x12615 l_0_5_158)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18220 (* ?x12612 l_0_5_157)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18218 (* ?x17465 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_112) l_0_5_92) ?x18218) ?x18220) ?x18222) 0.0))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18245 (* ?x12615 l_0_5_165)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18243 (* ?x12612 l_0_5_164)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18236 (* ?x17717 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_119) l_0_5_92) ?x18236) ?x18243) ?x18245) 0.0))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18268 (* ?x12615 l_0_5_173)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18266 (* ?x12612 l_0_5_172)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18259 (* ?x17835 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_127) l_0_5_92) ?x18259) ?x18266) ?x18268) 0.0))))))))
(assert
 (let ((?x16390 (* l_0_5_96 l_0_5_96)))
 (let ((?x16388 (* l_0_5_95 l_0_5_95)))
 (let ((?x16386 (* l_0_5_94 l_0_5_94)))
 (let ((?x16368 (* l_0_5_141 l_0_5_141)))
 (let ((?x18283 (- (+ (+ (* l_0_5_139 l_0_5_139) (* l_0_5_140 l_0_5_140)) ?x16368) ?x16386)))
 (= (- (- ?x18283 ?x16388) ?x16390) 0.0)))))))
(assert
 (let ((?x16667 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x16664 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x16661 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x16639 (* ?x12889 l_0_5_144)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x16637 (* ?x12886 l_0_5_143)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x16635 (* ?x12883 l_0_5_142)))
 (= (- (- (- (+ (+ ?x16635 ?x16637) ?x16639) ?x16661) ?x16664) ?x16667) 0.0)))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x12890 (* ?x12889 l_0_5_153)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x12887 (* ?x12886 l_0_5_152)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x12884 (* ?x12883 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x12875 (* ?x12286 l_0_5_96)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12872 (* ?x12283 l_0_5_95)))
 (let ((?x12888 (+ (+ (- (- (* (* (- 2.0) l_0_5_106) l_0_5_94) ?x12872) ?x12875) ?x12884) ?x12887)))
 (let ((?x12891 (+ ?x12888 ?x12890)))
 (= ?x12891 0.0))))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17475 (* ?x12889 l_0_5_159)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17473 (* ?x12886 l_0_5_158)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17471 (* ?x12883 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x17469 (* ?x17468 l_0_5_96)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x17466 (* ?x17465 l_0_5_95)))
 (let ((?x18329 (+ (+ (- (- (* (* (- 2.0) l_0_5_112) l_0_5_94) ?x17466) ?x17469) ?x17471) ?x17473)))
 (= (+ ?x18329 ?x17475) 0.0)))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17727 (* ?x12889 l_0_5_166)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17725 (* ?x12886 l_0_5_165)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17723 (* ?x12883 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x17721 (* ?x17720 l_0_5_96)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x17718 (* ?x17717 l_0_5_95)))
 (let ((?x18346 (+ (+ (- (- (* (* (- 2.0) l_0_5_119) l_0_5_94) ?x17718) ?x17721) ?x17723) ?x17725)))
 (= (+ ?x18346 ?x17727) 0.0)))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17845 (* ?x12889 l_0_5_174)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17843 (* ?x12886 l_0_5_173)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17841 (* ?x12883 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x17839 (* ?x17838 l_0_5_96)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x17836 (* ?x17835 l_0_5_95)))
 (let ((?x18363 (+ (+ (- (- (* (* (- 2.0) l_0_5_127) l_0_5_94) ?x17836) ?x17839) ?x17841) ?x17843)))
 (= (+ ?x18363 ?x17845) 0.0)))))))))))))
(assert
 (let ((?x18390 (* l_0_5_99 l_0_5_99)))
 (let ((?x18388 (* l_0_5_98 l_0_5_98)))
 (let ((?x18386 (* l_0_5_97 l_0_5_97)))
 (let ((?x18384 (* l_0_5_145 l_0_5_145)))
 (let ((?x18382 (* l_0_5_144 l_0_5_144)))
 (let ((?x18380 (* l_0_5_143 l_0_5_143)))
 (let ((?x18381 (+ (+ (* (- l_0_5_100) l_0_5_100) (* l_0_5_142 l_0_5_142)) ?x18380)))
 (= (- (- (- (+ (+ ?x18381 ?x18382) ?x18384) ?x18386) ?x18388) ?x18390) 0.0)))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x13236 (* ?x13235 l_0_5_154)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x13233 (* ?x13232 l_0_5_153)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x13230 (* ?x13229 l_0_5_152)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x13227 (* ?x13226 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x13224 (* ?x12286 l_0_5_99)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x13222 (* ?x12283 l_0_5_98)))
 (let ((?x12276 (* 2.0 l_0_5_106)))
 (let ((?x13213 (* ?x12276 l_0_5_97)))
 (let ((?x18411 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_109) ?x13213) ?x13222) ?x13224) ?x13227)))
 (= (+ (+ (+ ?x18411 ?x13230) ?x13233) ?x13236) 0.0)))))))))))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18437 (* ?x13235 l_0_5_160)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18435 (* ?x13232 l_0_5_159)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18433 (* ?x13229 l_0_5_158)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18431 (* ?x13226 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18429 (* ?x17468 l_0_5_99)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18427 (* ?x17465 l_0_5_98)))
 (let ((?x17463 (* 2.0 l_0_5_112)))
 (let ((?x18425 (* ?x17463 l_0_5_97)))
 (let ((?x18432 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_115) ?x18425) ?x18427) ?x18429) ?x18431)))
 (= (+ (+ (+ ?x18432 ?x18433) ?x18435) ?x18437) 0.0)))))))))))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18484 (* ?x13235 l_0_5_167)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18482 (* ?x13232 l_0_5_166)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18480 (* ?x13229 l_0_5_165)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18478 (* ?x13226 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18476 (* ?x17720 l_0_5_99)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18467 (* ?x17717 l_0_5_98)))
 (let ((?x17715 (* 2.0 l_0_5_119)))
 (let ((?x18463 (* ?x17715 l_0_5_97)))
 (let ((?x18479 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_122) ?x18463) ?x18467) ?x18476) ?x18478)))
 (= (+ (+ (+ ?x18479 ?x18480) ?x18482) ?x18484) 0.0)))))))))))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18531 (* ?x13235 l_0_5_175)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18529 (* ?x13232 l_0_5_174)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18527 (* ?x13229 l_0_5_173)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18525 (* ?x13226 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x18523 (* ?x17838 l_0_5_99)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18514 (* ?x17835 l_0_5_98)))
 (let ((?x17833 (* 2.0 l_0_5_127)))
 (let ((?x18510 (* ?x17833 l_0_5_97)))
 (let ((?x18526 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_130) ?x18510) ?x18514) ?x18523) ?x18525)))
 (= (+ (+ (+ ?x18526 ?x18527) ?x18529) ?x18531) 0.0)))))))))))))))))
(assert
 (let ((?x13851 (* l_0_5_156 l_0_5_156)))
 (let ((?x13849 (* l_0_5_155 l_0_5_155)))
 (let ((?x13847 (* l_0_5_154 l_0_5_154)))
 (let ((?x13845 (* l_0_5_153 l_0_5_153)))
 (let ((?x13843 (* l_0_5_152 l_0_5_152)))
 (let ((?x13841 (* l_0_5_151 l_0_5_151)))
 (let ((?x13839 (* l_0_5_111 l_0_5_111)))
 (let ((?x13837 (* l_0_5_110 l_0_5_110)))
 (let ((?x13826 (* l_0_5_109 l_0_5_109)))
 (let ((?x13823 (* l_0_5_108 l_0_5_108)))
 (let ((?x13825 (- (- (* (- l_0_5_106) l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x13823)))
 (let ((?x13848 (+ (+ (+ (+ (- (- (- ?x13825 ?x13826) ?x13837) ?x13839) ?x13841) ?x13843) ?x13845) ?x13847)))
 (let ((?x13852 (+ (+ ?x13848 ?x13849) ?x13851)))
 (= ?x13852 0.0)))))))))))))))
(assert
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14281 (* ?x12313 l_0_5_169)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14279 (* ?x12310 l_0_5_168)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14277 (* ?x12307 l_0_5_167)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14275 (* ?x12304 l_0_5_166)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14273 (* ?x12301 l_0_5_165)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14271 (* ?x12298 l_0_5_164)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14269 (* ?x12295 l_0_5_124)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14267 (* ?x12292 l_0_5_123)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14265 (* ?x12289 l_0_5_122)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14263 (* ?x12286 l_0_5_121)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14261 (* ?x12283 l_0_5_120)))
 (let ((?x14268 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_119) ?x14261) ?x14263) ?x14265) ?x14267)))
 (let ((?x14282 (+ (+ (+ (+ (+ (+ (- ?x14268 ?x14269) ?x14271) ?x14273) ?x14275) ?x14277) ?x14279) ?x14281)))
 (= ?x14282 0.0))))))))))))))))))))))))))
(assert
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14468 (* ?x12313 l_0_5_177)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14466 (* ?x12310 l_0_5_176)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14464 (* ?x12307 l_0_5_175)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14462 (* ?x12304 l_0_5_174)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14460 (* ?x12301 l_0_5_173)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14458 (* ?x12298 l_0_5_172)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14456 (* ?x12295 l_0_5_132)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14437 (* ?x12292 l_0_5_131)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14433 (* ?x12289 l_0_5_130)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14429 (* ?x12286 l_0_5_129)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14425 (* ?x12283 l_0_5_128)))
 (let ((?x14438 (- (- (- (- (* (* (- 2.0) l_0_5_106) l_0_5_127) ?x14425) ?x14429) ?x14433) ?x14437)))
 (let ((?x14469 (+ (+ (+ (+ (+ (+ (- ?x14438 ?x14456) ?x14458) ?x14460) ?x14462) ?x14464) ?x14466) ?x14468)))
 (= ?x14469 0.0))))))))))))))))))))))))))
(assert
 (let ((?x18600 (* l_0_5_163 l_0_5_163)))
 (let ((?x18598 (* l_0_5_162 l_0_5_162)))
 (let ((?x18596 (* l_0_5_161 l_0_5_161)))
 (let ((?x18594 (* l_0_5_160 l_0_5_160)))
 (let ((?x18592 (* l_0_5_159 l_0_5_159)))
 (let ((?x18590 (* l_0_5_158 l_0_5_158)))
 (let ((?x18588 (* l_0_5_157 l_0_5_157)))
 (let ((?x18586 (* l_0_5_118 l_0_5_118)))
 (let ((?x18584 (* l_0_5_117 l_0_5_117)))
 (let ((?x18582 (* l_0_5_116 l_0_5_116)))
 (let ((?x18580 (* l_0_5_115 l_0_5_115)))
 (let ((?x18578 (* l_0_5_114 l_0_5_114)))
 (let ((?x18579 (- (- (* (- l_0_5_112) l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18578)))
 (let ((?x18593 (+ (+ (+ (- (- (- (- ?x18579 ?x18580) ?x18582) ?x18584) ?x18586) ?x18588) ?x18590) ?x18592)))
 (= (+ (+ (+ (+ ?x18593 ?x18594) ?x18596) ?x18598) ?x18600) 0.0))))))))))))))))
(assert
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18669 (* ?x18668 l_0_5_170)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18666 (* ?x18665 l_0_5_169)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18663 (* ?x18662 l_0_5_168)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18660 (* ?x18659 l_0_5_167)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18657 (* ?x18656 l_0_5_166)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18654 (* ?x18653 l_0_5_165)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18651 (* ?x18650 l_0_5_164)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18648 (* ?x18647 l_0_5_125)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18645 (* ?x18644 l_0_5_124)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18642 (* ?x18641 l_0_5_123)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18639 (* ?x18638 l_0_5_122)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18636 (* ?x17468 l_0_5_121)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18634 (* ?x17465 l_0_5_120)))
 (let ((?x18643 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_119) ?x18634) ?x18636) ?x18639) ?x18642)))
 (let ((?x18664 (+ (+ (+ (+ (+ (- (- ?x18643 ?x18645) ?x18648) ?x18651) ?x18654) ?x18657) ?x18660) ?x18663)))
 (= (+ (+ ?x18664 ?x18666) ?x18669) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x18132 (* ?x16081 l_0_5_98)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x18130 (* ?x16078 l_0_5_97)))
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18754 (* ?x18668 l_0_5_178)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18752 (* ?x18665 l_0_5_177)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18750 (* ?x18662 l_0_5_176)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18748 (* ?x18659 l_0_5_175)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18746 (* ?x18656 l_0_5_174)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18744 (* ?x18653 l_0_5_173)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18742 (* ?x18650 l_0_5_172)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18126 (* ?x12615 l_0_5_143)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18124 (* ?x12612 l_0_5_142)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18738 (* ?x18647 l_0_5_133)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18736 (* ?x18644 l_0_5_132)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18724 (* ?x18641 l_0_5_131)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18721 (* ?x18638 l_0_5_130)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18717 (* ?x17468 l_0_5_129)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18713 (* ?x17465 l_0_5_128)))
 (let ((?x18735 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_127) ?x18713) ?x18717) ?x18721) ?x18724)))
 (let ((?x18739 (- (- ?x18735 ?x18736) ?x18738)))
 (let ((?x18751 (+ (+ (+ (+ (+ (+ (+ ?x18739 ?x18124) ?x18126) ?x18742) ?x18744) ?x18746) ?x18748) ?x18750)))
 (= (- (- (+ (+ ?x18751 ?x18752) ?x18754) ?x18130) ?x18132) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x18847 (* l_0_5_171 l_0_5_171)))
 (let ((?x18845 (* l_0_5_170 l_0_5_170)))
 (let ((?x18843 (* l_0_5_169 l_0_5_169)))
 (let ((?x18841 (* l_0_5_168 l_0_5_168)))
 (let ((?x18839 (* l_0_5_167 l_0_5_167)))
 (let ((?x18837 (* l_0_5_166 l_0_5_166)))
 (let ((?x18835 (* l_0_5_165 l_0_5_165)))
 (let ((?x18833 (* l_0_5_164 l_0_5_164)))
 (let ((?x18831 (* l_0_5_126 l_0_5_126)))
 (let ((?x18829 (* l_0_5_125 l_0_5_125)))
 (let ((?x18827 (* l_0_5_124 l_0_5_124)))
 (let ((?x18825 (* l_0_5_123 l_0_5_123)))
 (let ((?x18823 (* l_0_5_122 l_0_5_122)))
 (let ((?x18821 (* l_0_5_121 l_0_5_121)))
 (let ((?x18822 (- (- (* (- l_0_5_119) l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18821)))
 (let ((?x18836 (+ (+ (- (- (- (- (- ?x18822 ?x18823) ?x18825) ?x18827) ?x18829) ?x18831) ?x18833) ?x18835)))
 (= (+ (+ (+ (+ (+ (+ ?x18836 ?x18837) ?x18839) ?x18841) ?x18843) ?x18845) ?x18847) 0.0))))))))))))))))))
(assert
 (let ((?x18926 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18923 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18920 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18917 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18914 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18911 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18908 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18905 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18902 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18899 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18896 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18893 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18890 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18887 (* ?x17720 l_0_5_129)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18885 (* ?x17717 l_0_5_128)))
 (let ((?x18894 (- (- (- (- (* (* (- 2.0) l_0_5_119) l_0_5_127) ?x18885) ?x18887) ?x18890) ?x18893)))
 (let ((?x18915 (+ (+ (+ (+ (- (- (- ?x18894 ?x18896) ?x18899) ?x18902) ?x18905) ?x18908) ?x18911) ?x18914)))
 (= (+ (+ (+ (+ ?x18915 ?x18917) ?x18920) ?x18923) ?x18926) 0.0)))))))))))))))))))))
(assert
 (let ((?x19026 (* l_0_5_180 l_0_5_180)))
 (let ((?x19024 (* l_0_5_179 l_0_5_179)))
 (let ((?x19022 (* l_0_5_178 l_0_5_178)))
 (let ((?x19020 (* l_0_5_177 l_0_5_177)))
 (let ((?x19018 (* l_0_5_176 l_0_5_176)))
 (let ((?x19016 (* l_0_5_175 l_0_5_175)))
 (let ((?x19014 (* l_0_5_174 l_0_5_174)))
 (let ((?x19012 (* l_0_5_173 l_0_5_173)))
 (let ((?x19010 (* l_0_5_172 l_0_5_172)))
 (let ((?x19008 (* l_0_5_135 l_0_5_135)))
 (let ((?x19006 (* l_0_5_134 l_0_5_134)))
 (let ((?x19004 (* l_0_5_133 l_0_5_133)))
 (let ((?x19002 (* l_0_5_132 l_0_5_132)))
 (let ((?x18989 (* l_0_5_131 l_0_5_131)))
 (let ((?x18986 (* l_0_5_130 l_0_5_130)))
 (let ((?x18982 (* l_0_5_129 l_0_5_129)))
 (let ((?x18984 (- (- (* (- l_0_5_127) l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x18982)))
 (let ((?x19011 (+ (- (- (- (- (- (- ?x18984 ?x18986) ?x18989) ?x19002) ?x19004) ?x19006) ?x19008) ?x19010)))
 (let ((?x19025 (+ (+ (+ (+ (+ (+ (+ ?x19011 ?x19012) ?x19014) ?x19016) ?x19018) ?x19020) ?x19022) ?x19024)))
 (= (+ ?x19025 ?x19026) 0.0)))))))))))))))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18078 (* ?x15773 l_0_5_92)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_137) ?x18078) 0.0))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18091 (* ?x15773 l_0_5_97)))
 (= (- (* (* 2.0 l_0_5_136) l_0_5_142) ?x18091) 0.0))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x14600 (* ?x12383 l_0_5_146)))
 (= (+ (* (* (- 2.0) l_0_5_101) l_0_5_91) ?x14600) 0.0))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18111 (* ?x12383 l_0_5_157)))
 (= (+ (* (* (- 2.0) l_0_5_112) l_0_5_91) ?x18111) 0.0))))
(assert
 (let ((?x17503 (* 2.0 l_0_5_253)))
 (let ((?x17632 (* ?x17503 l_0_5_268)))
 (let ((?x17500 (* 2.0 l_0_5_252)))
 (let ((?x17630 (* ?x17500 l_0_5_267)))
 (let ((?x17497 (* 2.0 l_0_5_251)))
 (let ((?x17628 (* ?x17497 l_0_5_266)))
 (let ((?x17494 (* 2.0 l_0_5_250)))
 (let ((?x17626 (* ?x17494 l_0_5_265)))
 (let ((?x17490 (* 2.0 l_0_5_249)))
 (let ((?x17623 (* ?x17490 l_0_5_264)))
 (let ((?x17487 (* 2.0 l_0_5_248)))
 (let ((?x17621 (* ?x17487 l_0_5_263)))
 (let ((?x17484 (* 2.0 l_0_5_247)))
 (let ((?x17619 (* ?x17484 l_0_5_262)))
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18754 (* ?x18668 l_0_5_178)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18752 (* ?x18665 l_0_5_177)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18750 (* ?x18662 l_0_5_176)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18748 (* ?x18659 l_0_5_175)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18746 (* ?x18656 l_0_5_174)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18744 (* ?x18653 l_0_5_173)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18742 (* ?x18650 l_0_5_172)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18118 (* ?x12383 l_0_5_164)))
 (let ((?x17715 (* 2.0 l_0_5_119)))
 (let ((?x19080 (* ?x17715 l_0_5_91)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18738 (* ?x18647 l_0_5_133)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18736 (* ?x18644 l_0_5_132)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18724 (* ?x18641 l_0_5_131)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18721 (* ?x18638 l_0_5_130)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18717 (* ?x17468 l_0_5_129)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18713 (* ?x17465 l_0_5_128)))
 (let ((?x19077 (+ (+ (+ (+ (* (* 2.0 l_0_5_112) l_0_5_127) ?x18713) ?x18717) ?x18721) ?x18724)))
 (let ((?x19085 (- (- (- (+ (- (+ (+ ?x19077 ?x18736) ?x18738) ?x19080) ?x18118) ?x18742) ?x18744) ?x18746)))
 (let ((?x19092 (+ (+ (+ (- (- (- (- ?x19085 ?x18748) ?x18750) ?x18752) ?x18754) ?x17619) ?x17621) ?x17623)))
 (= (+ (+ (+ (+ ?x19092 ?x17626) ?x17628) ?x17630) ?x17632) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18160 (* ?x12383 l_0_5_172)))
 (= (+ (* (* (- 2.0) l_0_5_127) l_0_5_91) ?x18160) 0.0))))
(assert
 (let ((?x18174 (* l_0_5_93 l_0_5_93)))
 (let ((?x18172 (* l_0_5_92 l_0_5_92)))
 (let ((?x18166 (* l_0_5_138 l_0_5_138)))
 (let ((?x18164 (* l_0_5_137 l_0_5_137)))
 (let ((?x18167 (+ ?x18164 ?x18166)))
 (= (- (- ?x18167 ?x18172) ?x18174) 0.0)))))))
(assert
 (let ((?x16081 (* 2.0 l_0_5_93)))
 (let ((?x16082 (* ?x16081 l_0_5_95)))
 (let ((?x16078 (* 2.0 l_0_5_92)))
 (let ((?x16079 (* ?x16078 l_0_5_94)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x16066 (* ?x12615 l_0_5_140)))
 (= (- (- (+ (* (* 2.0 l_0_5_137) l_0_5_139) ?x16066) ?x16079) ?x16082) 0.0))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x14757 (* ?x12615 l_0_5_147)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x14755 (* ?x12612 l_0_5_146)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14753 (* ?x13540 l_0_5_93)))
 (let ((?x14758 (+ (+ (- (* (* (- 2.0) l_0_5_101) l_0_5_92) ?x14753) ?x14755) ?x14757)))
 (= ?x14758 0.0)))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18222 (* ?x12615 l_0_5_158)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18220 (* ?x12612 l_0_5_157)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18218 (* ?x17465 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_112) l_0_5_92) ?x18218) ?x18220) ?x18222) 0.0))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18245 (* ?x12615 l_0_5_165)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18243 (* ?x12612 l_0_5_164)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18236 (* ?x17717 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_119) l_0_5_92) ?x18236) ?x18243) ?x18245) 0.0))))))))
(assert
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18268 (* ?x12615 l_0_5_173)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18266 (* ?x12612 l_0_5_172)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18259 (* ?x17835 l_0_5_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_5_127) l_0_5_92) ?x18259) ?x18266) ?x18268) 0.0))))))))
(assert
 (let ((?x16390 (* l_0_5_96 l_0_5_96)))
 (let ((?x16388 (* l_0_5_95 l_0_5_95)))
 (let ((?x16386 (* l_0_5_94 l_0_5_94)))
 (let ((?x16368 (* l_0_5_141 l_0_5_141)))
 (let ((?x18283 (- (+ (+ (* l_0_5_139 l_0_5_139) (* l_0_5_140 l_0_5_140)) ?x16368) ?x16386)))
 (= (- (- ?x18283 ?x16388) ?x16390) 0.0)))))))
(assert
 (let ((?x16667 (* (* 2.0 l_0_5_96) l_0_5_99)))
 (let ((?x16664 (* (* 2.0 l_0_5_95) l_0_5_98)))
 (let ((?x16661 (* (* 2.0 l_0_5_94) l_0_5_97)))
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x16639 (* ?x12889 l_0_5_144)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x16637 (* ?x12886 l_0_5_143)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x16635 (* ?x12883 l_0_5_142)))
 (= (- (- (- (+ (+ ?x16635 ?x16637) ?x16639) ?x16661) ?x16664) ?x16667) 0.0)))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x14795 (* ?x12889 l_0_5_148)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x14793 (* ?x12886 l_0_5_147)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x14791 (* ?x12883 l_0_5_146)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14789 (* ?x13545 l_0_5_96)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14787 (* ?x13540 l_0_5_95)))
 (let ((?x14794 (+ (+ (- (- (* (* (- 2.0) l_0_5_101) l_0_5_94) ?x14787) ?x14789) ?x14791) ?x14793)))
 (let ((?x14796 (+ ?x14794 ?x14795)))
 (= ?x14796 0.0))))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17475 (* ?x12889 l_0_5_159)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17473 (* ?x12886 l_0_5_158)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17471 (* ?x12883 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x17469 (* ?x17468 l_0_5_96)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x17466 (* ?x17465 l_0_5_95)))
 (let ((?x18329 (+ (+ (- (- (* (* (- 2.0) l_0_5_112) l_0_5_94) ?x17466) ?x17469) ?x17471) ?x17473)))
 (= (+ ?x18329 ?x17475) 0.0)))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17727 (* ?x12889 l_0_5_166)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17725 (* ?x12886 l_0_5_165)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17723 (* ?x12883 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x17721 (* ?x17720 l_0_5_96)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x17718 (* ?x17717 l_0_5_95)))
 (let ((?x18346 (+ (+ (- (- (* (* (- 2.0) l_0_5_119) l_0_5_94) ?x17718) ?x17721) ?x17723) ?x17725)))
 (= (+ ?x18346 ?x17727) 0.0)))))))))))))
(assert
 (let ((?x12889 (* 2.0 l_0_5_141)))
 (let ((?x17845 (* ?x12889 l_0_5_174)))
 (let ((?x12886 (* 2.0 l_0_5_140)))
 (let ((?x17843 (* ?x12886 l_0_5_173)))
 (let ((?x12883 (* 2.0 l_0_5_139)))
 (let ((?x17841 (* ?x12883 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x17839 (* ?x17838 l_0_5_96)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x17836 (* ?x17835 l_0_5_95)))
 (let ((?x18363 (+ (+ (- (- (* (* (- 2.0) l_0_5_127) l_0_5_94) ?x17836) ?x17839) ?x17841) ?x17843)))
 (= (+ ?x18363 ?x17845) 0.0)))))))))))))
(assert
 (let ((?x18390 (* l_0_5_99 l_0_5_99)))
 (let ((?x18388 (* l_0_5_98 l_0_5_98)))
 (let ((?x18386 (* l_0_5_97 l_0_5_97)))
 (let ((?x18384 (* l_0_5_145 l_0_5_145)))
 (let ((?x18382 (* l_0_5_144 l_0_5_144)))
 (let ((?x18380 (* l_0_5_143 l_0_5_143)))
 (let ((?x18381 (+ (+ (* (- l_0_5_100) l_0_5_100) (* l_0_5_142 l_0_5_142)) ?x18380)))
 (= (- (- (- (+ (+ ?x18381 ?x18382) ?x18384) ?x18386) ?x18388) ?x18390) 0.0)))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18437 (* ?x13235 l_0_5_160)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18435 (* ?x13232 l_0_5_159)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18433 (* ?x13229 l_0_5_158)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18431 (* ?x13226 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18429 (* ?x17468 l_0_5_99)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18427 (* ?x17465 l_0_5_98)))
 (let ((?x17463 (* 2.0 l_0_5_112)))
 (let ((?x18425 (* ?x17463 l_0_5_97)))
 (let ((?x18432 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_115) ?x18425) ?x18427) ?x18429) ?x18431)))
 (= (+ (+ (+ ?x18432 ?x18433) ?x18435) ?x18437) 0.0)))))))))))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18484 (* ?x13235 l_0_5_167)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18482 (* ?x13232 l_0_5_166)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18480 (* ?x13229 l_0_5_165)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18478 (* ?x13226 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18476 (* ?x17720 l_0_5_99)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18467 (* ?x17717 l_0_5_98)))
 (let ((?x17715 (* 2.0 l_0_5_119)))
 (let ((?x18463 (* ?x17715 l_0_5_97)))
 (let ((?x18479 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_122) ?x18463) ?x18467) ?x18476) ?x18478)))
 (= (+ (+ (+ ?x18479 ?x18480) ?x18482) ?x18484) 0.0)))))))))))))))))
(assert
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18531 (* ?x13235 l_0_5_175)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18529 (* ?x13232 l_0_5_174)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18527 (* ?x13229 l_0_5_173)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18525 (* ?x13226 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x18523 (* ?x17838 l_0_5_99)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18514 (* ?x17835 l_0_5_98)))
 (let ((?x17833 (* 2.0 l_0_5_127)))
 (let ((?x18510 (* ?x17833 l_0_5_97)))
 (let ((?x18526 (+ (- (- (- (* (* (- 2.0) l_0_5_100) l_0_5_130) ?x18510) ?x18514) ?x18523) ?x18525)))
 (= (+ (+ (+ ?x18526 ?x18527) ?x18529) ?x18531) 0.0)))))))))))))))))
(assert
 (let ((?x14890 (* l_0_5_150 l_0_5_150)))
 (let ((?x14888 (* l_0_5_149 l_0_5_149)))
 (let ((?x14886 (* l_0_5_148 l_0_5_148)))
 (let ((?x14884 (* l_0_5_147 l_0_5_147)))
 (let ((?x14882 (* l_0_5_146 l_0_5_146)))
 (let ((?x14877 (* l_0_5_105 l_0_5_105)))
 (let ((?x14875 (* l_0_5_104 l_0_5_104)))
 (let ((?x14873 (* l_0_5_103 l_0_5_103)))
 (let ((?x14874 (- (- (* (- l_0_5_101) l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x14873)))
 (let ((?x14878 (- (- ?x14874 ?x14875) ?x14877)))
 (= (+ (+ (+ (+ (+ ?x14878 ?x14882) ?x14884) ?x14886) ?x14888) ?x14890) 0.0))))))))))))
(assert
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x14963 (* ?x13584 l_0_5_161)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x14961 (* ?x13579 l_0_5_160)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x14959 (* ?x13576 l_0_5_159)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x14957 (* ?x13573 l_0_5_158)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x14955 (* ?x13570 l_0_5_157)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x14953 (* ?x13559 l_0_5_116)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x14951 (* ?x13556 l_0_5_115)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14949 (* ?x13545 l_0_5_114)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14947 (* ?x13540 l_0_5_113)))
 (let ((?x14954 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_112) ?x14947) ?x14949) ?x14951) ?x14953)))
 (let ((?x14964 (+ (+ (+ (+ (+ ?x14954 ?x14955) ?x14957) ?x14959) ?x14961) ?x14963)))
 (= ?x14964 0.0))))))))))))))))))))))
(assert
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15040 (* ?x13584 l_0_5_168)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15038 (* ?x13579 l_0_5_167)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15036 (* ?x13576 l_0_5_166)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15034 (* ?x13573 l_0_5_165)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15032 (* ?x13570 l_0_5_164)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15030 (* ?x13559 l_0_5_123)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15028 (* ?x13556 l_0_5_122)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15026 (* ?x13545 l_0_5_121)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15024 (* ?x13540 l_0_5_120)))
 (let ((?x15031 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_119) ?x15024) ?x15026) ?x15028) ?x15030)))
 (let ((?x15041 (+ (+ (+ (+ (+ ?x15031 ?x15032) ?x15034) ?x15036) ?x15038) ?x15040)))
 (= ?x15041 0.0))))))))))))))))))))))
(assert
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15117 (* ?x13584 l_0_5_176)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15115 (* ?x13579 l_0_5_175)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15113 (* ?x13576 l_0_5_174)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15111 (* ?x13573 l_0_5_173)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15109 (* ?x13570 l_0_5_172)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15107 (* ?x13559 l_0_5_131)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15105 (* ?x13556 l_0_5_130)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15103 (* ?x13545 l_0_5_129)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15101 (* ?x13540 l_0_5_128)))
 (let ((?x15108 (- (- (- (- (* (* (- 2.0) l_0_5_101) l_0_5_127) ?x15101) ?x15103) ?x15105) ?x15107)))
 (let ((?x15118 (+ (+ (+ (+ (+ ?x15108 ?x15109) ?x15111) ?x15113) ?x15115) ?x15117)))
 (= ?x15118 0.0))))))))))))))))))))))
(assert
 (let ((?x18600 (* l_0_5_163 l_0_5_163)))
 (let ((?x18598 (* l_0_5_162 l_0_5_162)))
 (let ((?x18596 (* l_0_5_161 l_0_5_161)))
 (let ((?x18594 (* l_0_5_160 l_0_5_160)))
 (let ((?x18592 (* l_0_5_159 l_0_5_159)))
 (let ((?x18590 (* l_0_5_158 l_0_5_158)))
 (let ((?x18588 (* l_0_5_157 l_0_5_157)))
 (let ((?x18586 (* l_0_5_118 l_0_5_118)))
 (let ((?x18584 (* l_0_5_117 l_0_5_117)))
 (let ((?x18582 (* l_0_5_116 l_0_5_116)))
 (let ((?x18580 (* l_0_5_115 l_0_5_115)))
 (let ((?x18578 (* l_0_5_114 l_0_5_114)))
 (let ((?x18579 (- (- (* (- l_0_5_112) l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18578)))
 (let ((?x18593 (+ (+ (+ (- (- (- (- ?x18579 ?x18580) ?x18582) ?x18584) ?x18586) ?x18588) ?x18590) ?x18592)))
 (= (+ (+ (+ (+ ?x18593 ?x18594) ?x18596) ?x18598) ?x18600) 0.0))))))))))))))))
(assert
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18669 (* ?x18668 l_0_5_170)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18666 (* ?x18665 l_0_5_169)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18663 (* ?x18662 l_0_5_168)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18660 (* ?x18659 l_0_5_167)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18657 (* ?x18656 l_0_5_166)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18654 (* ?x18653 l_0_5_165)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18651 (* ?x18650 l_0_5_164)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18648 (* ?x18647 l_0_5_125)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18645 (* ?x18644 l_0_5_124)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18642 (* ?x18641 l_0_5_123)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18639 (* ?x18638 l_0_5_122)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18636 (* ?x17468 l_0_5_121)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18634 (* ?x17465 l_0_5_120)))
 (let ((?x18643 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_119) ?x18634) ?x18636) ?x18639) ?x18642)))
 (let ((?x18664 (+ (+ (+ (+ (+ (- (- ?x18643 ?x18645) ?x18648) ?x18651) ?x18654) ?x18657) ?x18660) ?x18663)))
 (= (+ (+ ?x18664 ?x18666) ?x18669) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18754 (* ?x18668 l_0_5_178)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18752 (* ?x18665 l_0_5_177)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18750 (* ?x18662 l_0_5_176)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18748 (* ?x18659 l_0_5_175)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18746 (* ?x18656 l_0_5_174)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18744 (* ?x18653 l_0_5_173)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18742 (* ?x18650 l_0_5_172)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18738 (* ?x18647 l_0_5_133)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18736 (* ?x18644 l_0_5_132)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18724 (* ?x18641 l_0_5_131)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18721 (* ?x18638 l_0_5_130)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18717 (* ?x17468 l_0_5_129)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18713 (* ?x17465 l_0_5_128)))
 (let ((?x18735 (- (- (- (- (* (* (- 2.0) l_0_5_112) l_0_5_127) ?x18713) ?x18717) ?x18721) ?x18724)))
 (let ((?x18739 (- (- ?x18735 ?x18736) ?x18738)))
 (let ((?x19164 (+ (+ (+ (+ (+ (+ (+ ?x18739 ?x18742) ?x18744) ?x18746) ?x18748) ?x18750) ?x18752) ?x18754)))
 (= ?x19164 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x18847 (* l_0_5_171 l_0_5_171)))
 (let ((?x18845 (* l_0_5_170 l_0_5_170)))
 (let ((?x18843 (* l_0_5_169 l_0_5_169)))
 (let ((?x18841 (* l_0_5_168 l_0_5_168)))
 (let ((?x18839 (* l_0_5_167 l_0_5_167)))
 (let ((?x18837 (* l_0_5_166 l_0_5_166)))
 (let ((?x18835 (* l_0_5_165 l_0_5_165)))
 (let ((?x18833 (* l_0_5_164 l_0_5_164)))
 (let ((?x18831 (* l_0_5_126 l_0_5_126)))
 (let ((?x18829 (* l_0_5_125 l_0_5_125)))
 (let ((?x18827 (* l_0_5_124 l_0_5_124)))
 (let ((?x18825 (* l_0_5_123 l_0_5_123)))
 (let ((?x18823 (* l_0_5_122 l_0_5_122)))
 (let ((?x18821 (* l_0_5_121 l_0_5_121)))
 (let ((?x18822 (- (- (* (- l_0_5_119) l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18821)))
 (let ((?x18836 (+ (+ (- (- (- (- (- ?x18822 ?x18823) ?x18825) ?x18827) ?x18829) ?x18831) ?x18833) ?x18835)))
 (= (+ (+ (+ (+ (+ (+ ?x18836 ?x18837) ?x18839) ?x18841) ?x18843) ?x18845) ?x18847) 0.0))))))))))))))))))
(assert
 (let ((?x18926 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18923 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18920 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18917 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18914 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18911 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18908 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18905 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18902 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18899 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18896 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18893 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18890 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18887 (* ?x17720 l_0_5_129)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18885 (* ?x17717 l_0_5_128)))
 (let ((?x18894 (- (- (- (- (* (* (- 2.0) l_0_5_119) l_0_5_127) ?x18885) ?x18887) ?x18890) ?x18893)))
 (let ((?x18915 (+ (+ (+ (+ (- (- (- ?x18894 ?x18896) ?x18899) ?x18902) ?x18905) ?x18908) ?x18911) ?x18914)))
 (= (+ (+ (+ (+ ?x18915 ?x18917) ?x18920) ?x18923) ?x18926) 0.0)))))))))))))))))))))
(assert
 (let ((?x19026 (* l_0_5_180 l_0_5_180)))
 (let ((?x19024 (* l_0_5_179 l_0_5_179)))
 (let ((?x19022 (* l_0_5_178 l_0_5_178)))
 (let ((?x19020 (* l_0_5_177 l_0_5_177)))
 (let ((?x19018 (* l_0_5_176 l_0_5_176)))
 (let ((?x19016 (* l_0_5_175 l_0_5_175)))
 (let ((?x19014 (* l_0_5_174 l_0_5_174)))
 (let ((?x19012 (* l_0_5_173 l_0_5_173)))
 (let ((?x19010 (* l_0_5_172 l_0_5_172)))
 (let ((?x19008 (* l_0_5_135 l_0_5_135)))
 (let ((?x19006 (* l_0_5_134 l_0_5_134)))
 (let ((?x19004 (* l_0_5_133 l_0_5_133)))
 (let ((?x19002 (* l_0_5_132 l_0_5_132)))
 (let ((?x18989 (* l_0_5_131 l_0_5_131)))
 (let ((?x18986 (* l_0_5_130 l_0_5_130)))
 (let ((?x18982 (* l_0_5_129 l_0_5_129)))
 (let ((?x18984 (- (- (* (- l_0_5_127) l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x18982)))
 (let ((?x19011 (+ (- (- (- (- (- (- ?x18984 ?x18986) ?x18989) ?x19002) ?x19004) ?x19006) ?x19008) ?x19010)))
 (let ((?x19025 (+ (+ (+ (+ (+ (+ (+ ?x19011 ?x19012) ?x19014) ?x19016) ?x19018) ?x19020) ?x19022) ?x19024)))
 (= (+ ?x19025 ?x19026) 0.0)))))))))))))))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18078 (* ?x15773 l_0_5_92)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15400 (* ?x15399 l_0_5_227)))
 (let ((?x19171 (- (* (* (- 2.0) l_0_5_136) l_0_5_137) (* (* 2.0 l_0_5_182) l_0_5_209))))
 (let ((?x19176 (- (+ (- ?x19171 (* (* 2.0 l_0_5_183) l_0_5_210)) ?x15400) (* (* 2.0 l_0_5_272) l_0_5_299))))
 (= (+ (- ?x19176 (* (* 2.0 l_0_5_273) l_0_5_300)) ?x18078) 0.0))))))))
(assert
 (let ((?x15773 (* 2.0 l_0_5_91)))
 (let ((?x18091 (* ?x15773 l_0_5_97)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15502 (* ?x15399 l_0_5_232)))
 (let ((?x19211 (- (* (* (- 2.0) l_0_5_136) l_0_5_142) (* (* 2.0 l_0_5_187) l_0_5_209))))
 (let ((?x19215 (- (- ?x19211 (* (* 2.0 l_0_5_188) l_0_5_210)) (* (* 2.0 l_0_5_189) l_0_5_211))))
 (let ((?x19220 (- (+ (- ?x19215 (* (* 2.0 l_0_5_190) l_0_5_212)) ?x15502) (* (* 2.0 l_0_5_277) l_0_5_299))))
 (let ((?x19224 (- (- ?x19220 (* (* 2.0 l_0_5_278) l_0_5_300)) (* (* 2.0 l_0_5_279) l_0_5_301))))
 (= (+ (- ?x19224 (* (* 2.0 l_0_5_280) l_0_5_302)) ?x18091) 0.0))))))))))
(assert
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15569 (* ?x15399 l_0_5_236)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x14600 (* ?x12383 l_0_5_146)))
 (let ((?x14579 (* 2.0 l_0_5_101)))
 (let ((?x14598 (* ?x14579 l_0_5_91)))
 (let ((?x19287 (- (- (- ?x14598 ?x14600) (* (* 2.0 l_0_5_191) l_0_5_209)) (* (* 2.0 l_0_5_192) l_0_5_210))))
 (let ((?x19293 (- (- ?x19287 (* (* 2.0 l_0_5_193) l_0_5_211)) (* (* 2.0 l_0_5_194) l_0_5_212))))
 (let ((?x19300 (- (+ (- ?x19293 (* (* 2.0 l_0_5_195) l_0_5_213)) ?x15569) (* (* 2.0 l_0_5_281) l_0_5_299))))
 (let ((?x19306 (- (- ?x19300 (* (* 2.0 l_0_5_282) l_0_5_300)) (* (* 2.0 l_0_5_283) l_0_5_301))))
 (let ((?x19312 (- (- ?x19306 (* (* 2.0 l_0_5_284) l_0_5_302)) (* (* 2.0 l_0_5_285) l_0_5_303))))
 (= ?x19312 0.0)))))))))))))
(assert
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15633 (* ?x15399 l_0_5_241)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x12384 (* ?x12383 l_0_5_151)))
 (let ((?x12276 (* 2.0 l_0_5_106)))
 (let ((?x12381 (* ?x12276 l_0_5_91)))
 (let ((?x19382 (- (- (- ?x12381 ?x12384) (* (* 2.0 l_0_5_196) l_0_5_209)) (* (* 2.0 l_0_5_197) l_0_5_210))))
 (let ((?x19386 (- (- ?x19382 (* (* 2.0 l_0_5_198) l_0_5_211)) (* (* 2.0 l_0_5_199) l_0_5_212))))
 (let ((?x19390 (- (- ?x19386 (* (* 2.0 l_0_5_200) l_0_5_213)) (* (* 2.0 l_0_5_201) l_0_5_214))))
 (let ((?x19395 (- (- (+ ?x19390 ?x15633) (* (* 2.0 l_0_5_286) l_0_5_299)) (* (* 2.0 l_0_5_287) l_0_5_300))))
 (let ((?x19399 (- (- ?x19395 (* (* 2.0 l_0_5_288) l_0_5_301)) (* (* 2.0 l_0_5_289) l_0_5_302))))
 (let ((?x19403 (- (- ?x19399 (* (* 2.0 l_0_5_290) l_0_5_303)) (* (* 2.0 l_0_5_291) l_0_5_304))))
 (= ?x19403 0.0))))))))))))))
(assert
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15697 (* ?x15399 l_0_5_247)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18111 (* ?x12383 l_0_5_157)))
 (let ((?x19484 (- (- (* (* 2.0 l_0_5_112) l_0_5_91) ?x18111) (* (* 2.0 l_0_5_202) l_0_5_209))))
 (let ((?x19488 (- (- ?x19484 (* (* 2.0 l_0_5_203) l_0_5_210)) (* (* 2.0 l_0_5_204) l_0_5_211))))
 (let ((?x19492 (- (- ?x19488 (* (* 2.0 l_0_5_205) l_0_5_212)) (* (* 2.0 l_0_5_206) l_0_5_213))))
 (let ((?x19496 (- (- ?x19492 (* (* 2.0 l_0_5_207) l_0_5_214)) (* (* 2.0 l_0_5_208) l_0_5_215))))
 (let ((?x19501 (- (- (+ ?x19496 ?x15697) (* (* 2.0 l_0_5_292) l_0_5_299)) (* (* 2.0 l_0_5_293) l_0_5_300))))
 (let ((?x19505 (- (- ?x19501 (* (* 2.0 l_0_5_294) l_0_5_301)) (* (* 2.0 l_0_5_295) l_0_5_302))))
 (let ((?x19509 (- (- ?x19505 (* (* 2.0 l_0_5_296) l_0_5_303)) (* (* 2.0 l_0_5_297) l_0_5_304))))
 (= (- ?x19509 (* (* 2.0 l_0_5_298) l_0_5_305)) 0.0)))))))))))))
(assert
 (let ((?x19642 (* l_0_5_306 l_0_5_306)))
 (let ((?x19640 (* l_0_5_305 l_0_5_305)))
 (let ((?x19638 (* l_0_5_304 l_0_5_304)))
 (let ((?x19636 (* l_0_5_303 l_0_5_303)))
 (let ((?x19634 (* l_0_5_302 l_0_5_302)))
 (let ((?x19632 (* l_0_5_301 l_0_5_301)))
 (let ((?x19630 (* l_0_5_300 l_0_5_300)))
 (let ((?x19628 (* l_0_5_299 l_0_5_299)))
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15764 (* ?x15399 l_0_5_254)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18118 (* ?x12383 l_0_5_164)))
 (let ((?x17715 (* 2.0 l_0_5_119)))
 (let ((?x19080 (* ?x17715 l_0_5_91)))
 (let ((?x19608 (- (- (- ?x19080 ?x18118) (* (* 1.0 l_0_5_209) l_0_5_209)) (* (* 1.0 l_0_5_210) l_0_5_210))))
 (let ((?x19614 (- (- ?x19608 (* (* 1.0 l_0_5_211) l_0_5_211)) (* (* 1.0 l_0_5_212) l_0_5_212))))
 (let ((?x19620 (- (- ?x19614 (* (* 1.0 l_0_5_213) l_0_5_213)) (* (* 1.0 l_0_5_214) l_0_5_214))))
 (let ((?x19626 (- (- ?x19620 (* (* 1.0 l_0_5_215) l_0_5_215)) (* (* 1.0 l_0_5_216) l_0_5_216))))
 (let ((?x19639 (- (- (- (- (- (- (+ ?x19626 ?x15764) ?x19628) ?x19630) ?x19632) ?x19634) ?x19636) ?x19638)))
 (= (- (- ?x19639 ?x19640) ?x19642) 0.0)))))))))))))))))))))
(assert
 (let ((?x15399 (* 2.0 l_0_5_226)))
 (let ((?x15840 (* ?x15399 l_0_5_262)))
 (let ((?x12383 (* 2.0 l_0_5_136)))
 (let ((?x18160 (* ?x12383 l_0_5_172)))
 (let ((?x19711 (- (- (* (* 2.0 l_0_5_127) l_0_5_91) ?x18160) (* (* 2.0 l_0_5_209) l_0_5_217))))
 (let ((?x19717 (- (- ?x19711 (* (* 2.0 l_0_5_210) l_0_5_218)) (* (* 2.0 l_0_5_211) l_0_5_219))))
 (let ((?x19723 (- (- ?x19717 (* (* 2.0 l_0_5_212) l_0_5_220)) (* (* 2.0 l_0_5_213) l_0_5_221))))
 (let ((?x19729 (- (- ?x19723 (* (* 2.0 l_0_5_214) l_0_5_222)) (* (* 2.0 l_0_5_215) l_0_5_223))))
 (let ((?x19736 (- (+ (- ?x19729 (* (* 2.0 l_0_5_216) l_0_5_224)) ?x15840) (* (* 2.0 l_0_5_299) l_0_5_307))))
 (let ((?x19742 (- (- ?x19736 (* (* 2.0 l_0_5_300) l_0_5_308)) (* (* 2.0 l_0_5_301) l_0_5_309))))
 (let ((?x19748 (- (- ?x19742 (* (* 2.0 l_0_5_302) l_0_5_310)) (* (* 2.0 l_0_5_303) l_0_5_311))))
 (let ((?x19754 (- (- ?x19748 (* (* 2.0 l_0_5_304) l_0_5_312)) (* (* 2.0 l_0_5_305) l_0_5_313))))
 (= (- ?x19754 (* (* 2.0 l_0_5_306) l_0_5_314)) 0.0))))))))))))))
(assert
 (let ((?x18174 (* l_0_5_93 l_0_5_93)))
 (let ((?x18172 (* l_0_5_92 l_0_5_92)))
 (let ((?x15898 (* l_0_5_228 l_0_5_228)))
 (let ((?x15896 (* l_0_5_227 l_0_5_227)))
 (let ((?x19863 (+ (- (* (- l_0_5_137) l_0_5_137) (* l_0_5_138 l_0_5_138)) ?x15896)))
 (= (+ (+ (+ ?x19863 ?x15898) ?x18172) ?x18174) 0.0)))))))
(assert
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x15983 (* ?x15918 l_0_5_237)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x15981 (* ?x15915 l_0_5_236)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x14757 (* ?x12615 l_0_5_147)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x14755 (* ?x12612 l_0_5_146)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14753 (* ?x13540 l_0_5_93)))
 (let ((?x19878 (+ (- (- (+ (* (* 2.0 l_0_5_101) l_0_5_92) ?x14753) ?x14755) ?x14757) ?x15981)))
 (= (+ ?x19878 ?x15983) 0.0)))))))))))))
(assert
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16011 (* ?x15918 l_0_5_242)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16009 (* ?x15915 l_0_5_241)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x12616 (* ?x12615 l_0_5_152)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x12613 (* ?x12612 l_0_5_151)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x12605 (* ?x12283 l_0_5_93)))
 (let ((?x19893 (+ (- (- (+ (* (* 2.0 l_0_5_106) l_0_5_92) ?x12605) ?x12613) ?x12616) ?x16009)))
 (= (+ ?x19893 ?x16011) 0.0)))))))))))))
(assert
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16038 (* ?x15918 l_0_5_248)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16036 (* ?x15915 l_0_5_247)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18222 (* ?x12615 l_0_5_158)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18220 (* ?x12612 l_0_5_157)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18218 (* ?x17465 l_0_5_93)))
 (let ((?x19908 (+ (- (- (+ (* (* 2.0 l_0_5_112) l_0_5_92) ?x18218) ?x18220) ?x18222) ?x16036)))
 (= (+ ?x19908 ?x16038) 0.0)))))))))))))
(assert
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16073 (* ?x15918 l_0_5_255)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16070 (* ?x15915 l_0_5_254)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18245 (* ?x12615 l_0_5_165)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18243 (* ?x12612 l_0_5_164)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18236 (* ?x17717 l_0_5_93)))
 (let ((?x19925 (+ (- (- (+ (* (* 2.0 l_0_5_119) l_0_5_92) ?x18236) ?x18243) ?x18245) ?x16070)))
 (= (+ ?x19925 ?x16073) 0.0)))))))))))))
(assert
 (let ((?x15918 (* 2.0 l_0_5_228)))
 (let ((?x16122 (* ?x15918 l_0_5_263)))
 (let ((?x15915 (* 2.0 l_0_5_227)))
 (let ((?x16120 (* ?x15915 l_0_5_262)))
 (let ((?x12615 (* 2.0 l_0_5_138)))
 (let ((?x18268 (* ?x12615 l_0_5_173)))
 (let ((?x12612 (* 2.0 l_0_5_137)))
 (let ((?x18266 (* ?x12612 l_0_5_172)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18259 (* ?x17835 l_0_5_93)))
 (let ((?x19942 (+ (- (- (+ (* (* 2.0 l_0_5_127) l_0_5_92) ?x18259) ?x18266) ?x18268) ?x16120)))
 (= (+ ?x19942 ?x16122) 0.0)))))))))))))
(assert
 (let ((?x18390 (* l_0_5_99 l_0_5_99)))
 (let ((?x18388 (* l_0_5_98 l_0_5_98)))
 (let ((?x18386 (* l_0_5_97 l_0_5_97)))
 (let ((?x16480 (* l_0_5_235 l_0_5_235)))
 (let ((?x16478 (* l_0_5_234 l_0_5_234)))
 (let ((?x16476 (* l_0_5_233 l_0_5_233)))
 (let ((?x16474 (* l_0_5_232 l_0_5_232)))
 (let ((?x18384 (* l_0_5_145 l_0_5_145)))
 (let ((?x18382 (* l_0_5_144 l_0_5_144)))
 (let ((?x18380 (* l_0_5_143 l_0_5_143)))
 (let ((?x19957 (- (- (- (* l_0_5_100 l_0_5_100) (* l_0_5_142 l_0_5_142)) ?x18380) ?x18382)))
 (let ((?x19964 (+ (+ (+ (+ (+ (+ (- ?x19957 ?x18384) ?x16474) ?x16476) ?x16478) ?x16480) ?x18386) ?x18388)))
 (= (+ ?x19964 ?x18390) 0.0))))))))))))))
(assert
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16525 (* ?x14631 l_0_5_244)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16523 (* ?x14628 l_0_5_243)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16521 (* ?x14625 l_0_5_242)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16519 (* ?x14622 l_0_5_241)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x13236 (* ?x13235 l_0_5_154)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x13233 (* ?x13232 l_0_5_153)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x13230 (* ?x13229 l_0_5_152)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x13227 (* ?x13226 l_0_5_151)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x13224 (* ?x12286 l_0_5_99)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x13222 (* ?x12283 l_0_5_98)))
 (let ((?x12276 (* 2.0 l_0_5_106)))
 (let ((?x13213 (* ?x12276 l_0_5_97)))
 (let ((?x13208 (* 2.0 l_0_5_100)))
 (let ((?x13210 (* ?x13208 l_0_5_109)))
 (let ((?x19987 (- (- (- (- (+ (+ (+ ?x13210 ?x13213) ?x13222) ?x13224) ?x13227) ?x13230) ?x13233) ?x13236)))
 (= (+ (+ (+ (+ ?x19987 ?x16519) ?x16521) ?x16523) ?x16525) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16583 (* ?x14631 l_0_5_250)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16581 (* ?x14628 l_0_5_249)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16579 (* ?x14625 l_0_5_248)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16577 (* ?x14622 l_0_5_247)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18437 (* ?x13235 l_0_5_160)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18435 (* ?x13232 l_0_5_159)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18433 (* ?x13229 l_0_5_158)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18431 (* ?x13226 l_0_5_157)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18429 (* ?x17468 l_0_5_99)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18427 (* ?x17465 l_0_5_98)))
 (let ((?x17463 (* 2.0 l_0_5_112)))
 (let ((?x18425 (* ?x17463 l_0_5_97)))
 (let ((?x20011 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_115) ?x18425) ?x18427) ?x18429) ?x18431)))
 (let ((?x20018 (+ (+ (+ (+ (- (- (- ?x20011 ?x18433) ?x18435) ?x18437) ?x16577) ?x16579) ?x16581) ?x16583)))
 (= ?x20018 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16651 (* ?x14631 l_0_5_257)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16649 (* ?x14628 l_0_5_256)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16647 (* ?x14625 l_0_5_255)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16645 (* ?x14622 l_0_5_254)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18484 (* ?x13235 l_0_5_167)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18482 (* ?x13232 l_0_5_166)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18480 (* ?x13229 l_0_5_165)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18478 (* ?x13226 l_0_5_164)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18476 (* ?x17720 l_0_5_99)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18467 (* ?x17717 l_0_5_98)))
 (let ((?x17715 (* 2.0 l_0_5_119)))
 (let ((?x18463 (* ?x17715 l_0_5_97)))
 (let ((?x20042 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_122) ?x18463) ?x18467) ?x18476) ?x18478)))
 (let ((?x20049 (+ (+ (+ (+ (- (- (- ?x20042 ?x18480) ?x18482) ?x18484) ?x16645) ?x16647) ?x16649) ?x16651)))
 (= ?x20049 0.0))))))))))))))))))))))))))
(assert
 (let ((?x14631 (* 2.0 l_0_5_235)))
 (let ((?x16746 (* ?x14631 l_0_5_265)))
 (let ((?x14628 (* 2.0 l_0_5_234)))
 (let ((?x16744 (* ?x14628 l_0_5_264)))
 (let ((?x14625 (* 2.0 l_0_5_233)))
 (let ((?x16742 (* ?x14625 l_0_5_263)))
 (let ((?x14622 (* 2.0 l_0_5_232)))
 (let ((?x16740 (* ?x14622 l_0_5_262)))
 (let ((?x13235 (* 2.0 l_0_5_145)))
 (let ((?x18531 (* ?x13235 l_0_5_175)))
 (let ((?x13232 (* 2.0 l_0_5_144)))
 (let ((?x18529 (* ?x13232 l_0_5_174)))
 (let ((?x13229 (* 2.0 l_0_5_143)))
 (let ((?x18527 (* ?x13229 l_0_5_173)))
 (let ((?x13226 (* 2.0 l_0_5_142)))
 (let ((?x18525 (* ?x13226 l_0_5_172)))
 (let ((?x17838 (* 2.0 l_0_5_129)))
 (let ((?x18523 (* ?x17838 l_0_5_99)))
 (let ((?x17835 (* 2.0 l_0_5_128)))
 (let ((?x18514 (* ?x17835 l_0_5_98)))
 (let ((?x17833 (* 2.0 l_0_5_127)))
 (let ((?x18510 (* ?x17833 l_0_5_97)))
 (let ((?x20073 (- (+ (+ (+ (* (* 2.0 l_0_5_100) l_0_5_130) ?x18510) ?x18514) ?x18523) ?x18525)))
 (let ((?x20080 (+ (+ (+ (+ (- (- (- ?x20073 ?x18527) ?x18529) ?x18531) ?x16740) ?x16742) ?x16744) ?x16746)))
 (= ?x20080 0.0))))))))))))))))))))))))))
(assert
 (let ((?x16806 (* l_0_5_240 l_0_5_240)))
 (let ((?x16804 (* l_0_5_239 l_0_5_239)))
 (let ((?x16802 (* l_0_5_238 l_0_5_238)))
 (let ((?x16800 (* l_0_5_237 l_0_5_237)))
 (let ((?x16798 (* l_0_5_236 l_0_5_236)))
 (let ((?x14890 (* l_0_5_150 l_0_5_150)))
 (let ((?x14888 (* l_0_5_149 l_0_5_149)))
 (let ((?x14886 (* l_0_5_148 l_0_5_148)))
 (let ((?x14884 (* l_0_5_147 l_0_5_147)))
 (let ((?x14882 (* l_0_5_146 l_0_5_146)))
 (let ((?x14877 (* l_0_5_105 l_0_5_105)))
 (let ((?x14875 (* l_0_5_104 l_0_5_104)))
 (let ((?x14873 (* l_0_5_103 l_0_5_103)))
 (let ((?x20102 (+ (+ (+ (* l_0_5_101 l_0_5_101) (* l_0_5_102 l_0_5_102)) ?x14873) ?x14875)))
 (let ((?x20109 (+ (- (- (- (- (- (+ ?x20102 ?x14877) ?x14882) ?x14884) ?x14886) ?x14888) ?x14890) ?x16798)))
 (= (+ (+ (+ (+ ?x20109 ?x16800) ?x16802) ?x16804) ?x16806) 0.0)))))))))))))))))
(assert
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x16859 (* ?x16858 l_0_5_245)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x16856 (* ?x16855 l_0_5_244)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x16853 (* ?x16852 l_0_5_243)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x16850 (* ?x16849 l_0_5_242)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x16847 (* ?x16846 l_0_5_241)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x13585 (* ?x13584 l_0_5_155)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x13580 (* ?x13579 l_0_5_154)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x13577 (* ?x13576 l_0_5_153)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x13574 (* ?x13573 l_0_5_152)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x13571 (* ?x13570 l_0_5_151)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x13560 (* ?x13559 l_0_5_110)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x13557 (* ?x13556 l_0_5_109)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x13554 (* ?x13545 l_0_5_108)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x13542 (* ?x13540 l_0_5_107)))
 (let ((?x20131 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_106) ?x13542) ?x13554) ?x13557) ?x13560)))
 (let ((?x20138 (+ (+ (- (- (- (- (- ?x20131 ?x13571) ?x13574) ?x13577) ?x13580) ?x13585) ?x16847) ?x16850)))
 (= (+ (+ (+ ?x20138 ?x16853) ?x16856) ?x16859) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x16932 (* ?x16858 l_0_5_251)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x16930 (* ?x16855 l_0_5_250)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x16928 (* ?x16852 l_0_5_249)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x16926 (* ?x16849 l_0_5_248)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x16924 (* ?x16846 l_0_5_247)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x14963 (* ?x13584 l_0_5_161)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x14961 (* ?x13579 l_0_5_160)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x14959 (* ?x13576 l_0_5_159)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x14957 (* ?x13573 l_0_5_158)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x14955 (* ?x13570 l_0_5_157)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x14953 (* ?x13559 l_0_5_116)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x14951 (* ?x13556 l_0_5_115)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x14949 (* ?x13545 l_0_5_114)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x14947 (* ?x13540 l_0_5_113)))
 (let ((?x20165 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_112) ?x14947) ?x14949) ?x14951) ?x14953)))
 (let ((?x20172 (+ (+ (- (- (- (- (- ?x20165 ?x14955) ?x14957) ?x14959) ?x14961) ?x14963) ?x16924) ?x16926)))
 (= (+ (+ (+ ?x20172 ?x16928) ?x16930) ?x16932) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x17015 (* ?x16858 l_0_5_258)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x17013 (* ?x16855 l_0_5_257)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x17011 (* ?x16852 l_0_5_256)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x17009 (* ?x16849 l_0_5_255)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x17007 (* ?x16846 l_0_5_254)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15040 (* ?x13584 l_0_5_168)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15038 (* ?x13579 l_0_5_167)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15036 (* ?x13576 l_0_5_166)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15034 (* ?x13573 l_0_5_165)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15032 (* ?x13570 l_0_5_164)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15030 (* ?x13559 l_0_5_123)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15028 (* ?x13556 l_0_5_122)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15026 (* ?x13545 l_0_5_121)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15024 (* ?x13540 l_0_5_120)))
 (let ((?x20198 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_119) ?x15024) ?x15026) ?x15028) ?x15030)))
 (let ((?x20205 (+ (+ (- (- (- (- (- ?x20198 ?x15032) ?x15034) ?x15036) ?x15038) ?x15040) ?x17007) ?x17009)))
 (= (+ (+ (+ ?x20205 ?x17011) ?x17013) ?x17015) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x16858 (* 2.0 l_0_5_240)))
 (let ((?x17098 (* ?x16858 l_0_5_266)))
 (let ((?x16855 (* 2.0 l_0_5_239)))
 (let ((?x17096 (* ?x16855 l_0_5_265)))
 (let ((?x16852 (* 2.0 l_0_5_238)))
 (let ((?x17094 (* ?x16852 l_0_5_264)))
 (let ((?x16849 (* 2.0 l_0_5_237)))
 (let ((?x17092 (* ?x16849 l_0_5_263)))
 (let ((?x16846 (* 2.0 l_0_5_236)))
 (let ((?x17090 (* ?x16846 l_0_5_262)))
 (let ((?x13584 (* 2.0 l_0_5_150)))
 (let ((?x15117 (* ?x13584 l_0_5_176)))
 (let ((?x13579 (* 2.0 l_0_5_149)))
 (let ((?x15115 (* ?x13579 l_0_5_175)))
 (let ((?x13576 (* 2.0 l_0_5_148)))
 (let ((?x15113 (* ?x13576 l_0_5_174)))
 (let ((?x13573 (* 2.0 l_0_5_147)))
 (let ((?x15111 (* ?x13573 l_0_5_173)))
 (let ((?x13570 (* 2.0 l_0_5_146)))
 (let ((?x15109 (* ?x13570 l_0_5_172)))
 (let ((?x13559 (* 2.0 l_0_5_105)))
 (let ((?x15107 (* ?x13559 l_0_5_131)))
 (let ((?x13556 (* 2.0 l_0_5_104)))
 (let ((?x15105 (* ?x13556 l_0_5_130)))
 (let ((?x13545 (* 2.0 l_0_5_103)))
 (let ((?x15103 (* ?x13545 l_0_5_129)))
 (let ((?x13540 (* 2.0 l_0_5_102)))
 (let ((?x15101 (* ?x13540 l_0_5_128)))
 (let ((?x20231 (+ (+ (+ (+ (* (* 2.0 l_0_5_101) l_0_5_127) ?x15101) ?x15103) ?x15105) ?x15107)))
 (let ((?x20238 (+ (+ (- (- (- (- (- ?x20231 ?x15109) ?x15111) ?x15113) ?x15115) ?x15117) ?x17090) ?x17092)))
 (= (+ (+ (+ ?x20238 ?x17094) ?x17096) ?x17098) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x17168 (* l_0_5_246 l_0_5_246)))
 (let ((?x17166 (* l_0_5_245 l_0_5_245)))
 (let ((?x17164 (* l_0_5_244 l_0_5_244)))
 (let ((?x17162 (* l_0_5_243 l_0_5_243)))
 (let ((?x17160 (* l_0_5_242 l_0_5_242)))
 (let ((?x17158 (* l_0_5_241 l_0_5_241)))
 (let ((?x13851 (* l_0_5_156 l_0_5_156)))
 (let ((?x13849 (* l_0_5_155 l_0_5_155)))
 (let ((?x13847 (* l_0_5_154 l_0_5_154)))
 (let ((?x13845 (* l_0_5_153 l_0_5_153)))
 (let ((?x13843 (* l_0_5_152 l_0_5_152)))
 (let ((?x13841 (* l_0_5_151 l_0_5_151)))
 (let ((?x13839 (* l_0_5_111 l_0_5_111)))
 (let ((?x13837 (* l_0_5_110 l_0_5_110)))
 (let ((?x13826 (* l_0_5_109 l_0_5_109)))
 (let ((?x13823 (* l_0_5_108 l_0_5_108)))
 (let ((?x20262 (+ (+ (+ (* l_0_5_106 l_0_5_106) (* l_0_5_107 l_0_5_107)) ?x13823) ?x13826)))
 (let ((?x20269 (- (- (- (- (- (+ (+ ?x20262 ?x13837) ?x13839) ?x13841) ?x13843) ?x13845) ?x13847) ?x13849)))
 (let ((?x20276 (+ (+ (+ (+ (+ (+ (- ?x20269 ?x13851) ?x17158) ?x17160) ?x17162) ?x17164) ?x17166) ?x17168)))
 (= ?x20276 0.0)))))))))))))))))))))
(assert
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x17235 (* ?x12115 l_0_5_259)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x17233 (* ?x12112 l_0_5_258)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x17231 (* ?x12109 l_0_5_257)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x17229 (* ?x12106 l_0_5_256)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x17227 (* ?x12103 l_0_5_255)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x17225 (* ?x12100 l_0_5_254)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14281 (* ?x12313 l_0_5_169)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14279 (* ?x12310 l_0_5_168)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14277 (* ?x12307 l_0_5_167)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14275 (* ?x12304 l_0_5_166)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14273 (* ?x12301 l_0_5_165)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14271 (* ?x12298 l_0_5_164)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14269 (* ?x12295 l_0_5_124)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14267 (* ?x12292 l_0_5_123)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14265 (* ?x12289 l_0_5_122)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14263 (* ?x12286 l_0_5_121)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14261 (* ?x12283 l_0_5_120)))
 (let ((?x20296 (+ (+ (+ (+ (* (* 2.0 l_0_5_106) l_0_5_119) ?x14261) ?x14263) ?x14265) ?x14267)))
 (let ((?x20303 (- (- (- (- (- (- (+ ?x20296 ?x14269) ?x14271) ?x14273) ?x14275) ?x14277) ?x14279) ?x14281)))
 (= (+ (+ (+ (+ (+ (+ ?x20303 ?x17225) ?x17227) ?x17229) ?x17231) ?x17233) ?x17235) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x12115 (* 2.0 l_0_5_246)))
 (let ((?x17331 (* ?x12115 l_0_5_267)))
 (let ((?x12112 (* 2.0 l_0_5_245)))
 (let ((?x17329 (* ?x12112 l_0_5_266)))
 (let ((?x12109 (* 2.0 l_0_5_244)))
 (let ((?x17327 (* ?x12109 l_0_5_265)))
 (let ((?x12106 (* 2.0 l_0_5_243)))
 (let ((?x17325 (* ?x12106 l_0_5_264)))
 (let ((?x12103 (* 2.0 l_0_5_242)))
 (let ((?x17323 (* ?x12103 l_0_5_263)))
 (let ((?x12100 (* 2.0 l_0_5_241)))
 (let ((?x17321 (* ?x12100 l_0_5_262)))
 (let ((?x12313 (* 2.0 l_0_5_156)))
 (let ((?x14468 (* ?x12313 l_0_5_177)))
 (let ((?x12310 (* 2.0 l_0_5_155)))
 (let ((?x14466 (* ?x12310 l_0_5_176)))
 (let ((?x12307 (* 2.0 l_0_5_154)))
 (let ((?x14464 (* ?x12307 l_0_5_175)))
 (let ((?x12304 (* 2.0 l_0_5_153)))
 (let ((?x14462 (* ?x12304 l_0_5_174)))
 (let ((?x12301 (* 2.0 l_0_5_152)))
 (let ((?x14460 (* ?x12301 l_0_5_173)))
 (let ((?x12298 (* 2.0 l_0_5_151)))
 (let ((?x14458 (* ?x12298 l_0_5_172)))
 (let ((?x12295 (* 2.0 l_0_5_111)))
 (let ((?x14456 (* ?x12295 l_0_5_132)))
 (let ((?x12292 (* 2.0 l_0_5_110)))
 (let ((?x14437 (* ?x12292 l_0_5_131)))
 (let ((?x12289 (* 2.0 l_0_5_109)))
 (let ((?x14433 (* ?x12289 l_0_5_130)))
 (let ((?x12286 (* 2.0 l_0_5_108)))
 (let ((?x14429 (* ?x12286 l_0_5_129)))
 (let ((?x12283 (* 2.0 l_0_5_107)))
 (let ((?x14425 (* ?x12283 l_0_5_128)))
 (let ((?x20335 (+ (+ (+ (+ (* (* 2.0 l_0_5_106) l_0_5_127) ?x14425) ?x14429) ?x14433) ?x14437)))
 (let ((?x20342 (- (- (- (- (- (- (+ ?x20335 ?x14456) ?x14458) ?x14460) ?x14462) ?x14464) ?x14466) ?x14468)))
 (= (+ (+ (+ (+ (+ (+ ?x20342 ?x17321) ?x17323) ?x17325) ?x17327) ?x17329) ?x17331) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17411 (* l_0_5_253 l_0_5_253)))
 (let ((?x17409 (* l_0_5_252 l_0_5_252)))
 (let ((?x17407 (* l_0_5_251 l_0_5_251)))
 (let ((?x17405 (* l_0_5_250 l_0_5_250)))
 (let ((?x17402 (* l_0_5_249 l_0_5_249)))
 (let ((?x17400 (* l_0_5_248 l_0_5_248)))
 (let ((?x17398 (* l_0_5_247 l_0_5_247)))
 (let ((?x18600 (* l_0_5_163 l_0_5_163)))
 (let ((?x18598 (* l_0_5_162 l_0_5_162)))
 (let ((?x18596 (* l_0_5_161 l_0_5_161)))
 (let ((?x18594 (* l_0_5_160 l_0_5_160)))
 (let ((?x18592 (* l_0_5_159 l_0_5_159)))
 (let ((?x18590 (* l_0_5_158 l_0_5_158)))
 (let ((?x18588 (* l_0_5_157 l_0_5_157)))
 (let ((?x18586 (* l_0_5_118 l_0_5_118)))
 (let ((?x18584 (* l_0_5_117 l_0_5_117)))
 (let ((?x18582 (* l_0_5_116 l_0_5_116)))
 (let ((?x18580 (* l_0_5_115 l_0_5_115)))
 (let ((?x18578 (* l_0_5_114 l_0_5_114)))
 (let ((?x20372 (+ (+ (+ (* l_0_5_112 l_0_5_112) (* l_0_5_113 l_0_5_113)) ?x18578) ?x18580)))
 (let ((?x20379 (- (- (- (- (+ (+ (+ ?x20372 ?x18582) ?x18584) ?x18586) ?x18588) ?x18590) ?x18592) ?x18594)))
 (let ((?x20386 (+ (+ (+ (+ (- (- (- ?x20379 ?x18596) ?x18598) ?x18600) ?x17398) ?x17400) ?x17402) ?x17405)))
 (= (+ (+ (+ ?x20386 ?x17407) ?x17409) ?x17411) 0.0))))))))))))))))))))))))
(assert
 (let ((?x17503 (* 2.0 l_0_5_253)))
 (let ((?x17504 (* ?x17503 l_0_5_260)))
 (let ((?x17500 (* 2.0 l_0_5_252)))
 (let ((?x17501 (* ?x17500 l_0_5_259)))
 (let ((?x17497 (* 2.0 l_0_5_251)))
 (let ((?x17498 (* ?x17497 l_0_5_258)))
 (let ((?x17494 (* 2.0 l_0_5_250)))
 (let ((?x17495 (* ?x17494 l_0_5_257)))
 (let ((?x17490 (* 2.0 l_0_5_249)))
 (let ((?x17491 (* ?x17490 l_0_5_256)))
 (let ((?x17487 (* 2.0 l_0_5_248)))
 (let ((?x17488 (* ?x17487 l_0_5_255)))
 (let ((?x17484 (* 2.0 l_0_5_247)))
 (let ((?x17485 (* ?x17484 l_0_5_254)))
 (let ((?x18668 (* 2.0 l_0_5_163)))
 (let ((?x18669 (* ?x18668 l_0_5_170)))
 (let ((?x18665 (* 2.0 l_0_5_162)))
 (let ((?x18666 (* ?x18665 l_0_5_169)))
 (let ((?x18662 (* 2.0 l_0_5_161)))
 (let ((?x18663 (* ?x18662 l_0_5_168)))
 (let ((?x18659 (* 2.0 l_0_5_160)))
 (let ((?x18660 (* ?x18659 l_0_5_167)))
 (let ((?x18656 (* 2.0 l_0_5_159)))
 (let ((?x18657 (* ?x18656 l_0_5_166)))
 (let ((?x18653 (* 2.0 l_0_5_158)))
 (let ((?x18654 (* ?x18653 l_0_5_165)))
 (let ((?x18650 (* 2.0 l_0_5_157)))
 (let ((?x18651 (* ?x18650 l_0_5_164)))
 (let ((?x18647 (* 2.0 l_0_5_118)))
 (let ((?x18648 (* ?x18647 l_0_5_125)))
 (let ((?x18644 (* 2.0 l_0_5_117)))
 (let ((?x18645 (* ?x18644 l_0_5_124)))
 (let ((?x18641 (* 2.0 l_0_5_116)))
 (let ((?x18642 (* ?x18641 l_0_5_123)))
 (let ((?x18638 (* 2.0 l_0_5_115)))
 (let ((?x18639 (* ?x18638 l_0_5_122)))
 (let ((?x17468 (* 2.0 l_0_5_114)))
 (let ((?x18636 (* ?x17468 l_0_5_121)))
 (let ((?x17465 (* 2.0 l_0_5_113)))
 (let ((?x18634 (* ?x17465 l_0_5_120)))
 (let ((?x20411 (+ (+ (+ (+ (* (* 2.0 l_0_5_112) l_0_5_119) ?x18634) ?x18636) ?x18639) ?x18642)))
 (let ((?x20418 (- (- (- (- (- (+ (+ ?x20411 ?x18645) ?x18648) ?x18651) ?x18654) ?x18657) ?x18660) ?x18663)))
 (let ((?x20425 (+ (+ (+ (+ (+ (- (- ?x20418 ?x18666) ?x18669) ?x17485) ?x17488) ?x17491) ?x17495) ?x17498)))
 (= (+ (+ ?x20425 ?x17501) ?x17504) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x17746 (* l_0_5_261 l_0_5_261)))
 (let ((?x17744 (* l_0_5_260 l_0_5_260)))
 (let ((?x17742 (* l_0_5_259 l_0_5_259)))
 (let ((?x17740 (* l_0_5_258 l_0_5_258)))
 (let ((?x17738 (* l_0_5_257 l_0_5_257)))
 (let ((?x17736 (* l_0_5_256 l_0_5_256)))
 (let ((?x17734 (* l_0_5_255 l_0_5_255)))
 (let ((?x17732 (* l_0_5_254 l_0_5_254)))
 (let ((?x18847 (* l_0_5_171 l_0_5_171)))
 (let ((?x18845 (* l_0_5_170 l_0_5_170)))
 (let ((?x18843 (* l_0_5_169 l_0_5_169)))
 (let ((?x18841 (* l_0_5_168 l_0_5_168)))
 (let ((?x18839 (* l_0_5_167 l_0_5_167)))
 (let ((?x18837 (* l_0_5_166 l_0_5_166)))
 (let ((?x18835 (* l_0_5_165 l_0_5_165)))
 (let ((?x18833 (* l_0_5_164 l_0_5_164)))
 (let ((?x18831 (* l_0_5_126 l_0_5_126)))
 (let ((?x18829 (* l_0_5_125 l_0_5_125)))
 (let ((?x18827 (* l_0_5_124 l_0_5_124)))
 (let ((?x18825 (* l_0_5_123 l_0_5_123)))
 (let ((?x18823 (* l_0_5_122 l_0_5_122)))
 (let ((?x18821 (* l_0_5_121 l_0_5_121)))
 (let ((?x20461 (+ (+ (+ (* l_0_5_119 l_0_5_119) (* l_0_5_120 l_0_5_120)) ?x18821) ?x18823)))
 (let ((?x20468 (- (- (- (+ (+ (+ (+ ?x20461 ?x18825) ?x18827) ?x18829) ?x18831) ?x18833) ?x18835) ?x18837)))
 (let ((?x20475 (+ (+ (- (- (- (- (- ?x20468 ?x18839) ?x18841) ?x18843) ?x18845) ?x18847) ?x17732) ?x17734)))
 (= (+ (+ (+ (+ (+ (+ ?x20475 ?x17736) ?x17738) ?x17740) ?x17742) ?x17744) ?x17746) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x17873 (* (* 2.0 l_0_5_261) l_0_5_269)))
 (let ((?x17870 (* (* 2.0 l_0_5_260) l_0_5_268)))
 (let ((?x17867 (* (* 2.0 l_0_5_259) l_0_5_267)))
 (let ((?x17864 (* (* 2.0 l_0_5_258) l_0_5_266)))
 (let ((?x17861 (* (* 2.0 l_0_5_257) l_0_5_265)))
 (let ((?x17858 (* (* 2.0 l_0_5_256) l_0_5_264)))
 (let ((?x17855 (* (* 2.0 l_0_5_255) l_0_5_263)))
 (let ((?x17852 (* (* 2.0 l_0_5_254) l_0_5_262)))
 (let ((?x18926 (* (* 2.0 l_0_5_171) l_0_5_179)))
 (let ((?x18923 (* (* 2.0 l_0_5_170) l_0_5_178)))
 (let ((?x18920 (* (* 2.0 l_0_5_169) l_0_5_177)))
 (let ((?x18917 (* (* 2.0 l_0_5_168) l_0_5_176)))
 (let ((?x18914 (* (* 2.0 l_0_5_167) l_0_5_175)))
 (let ((?x18911 (* (* 2.0 l_0_5_166) l_0_5_174)))
 (let ((?x18908 (* (* 2.0 l_0_5_165) l_0_5_173)))
 (let ((?x18905 (* (* 2.0 l_0_5_164) l_0_5_172)))
 (let ((?x18902 (* (* 2.0 l_0_5_126) l_0_5_134)))
 (let ((?x18899 (* (* 2.0 l_0_5_125) l_0_5_133)))
 (let ((?x18896 (* (* 2.0 l_0_5_124) l_0_5_132)))
 (let ((?x18893 (* (* 2.0 l_0_5_123) l_0_5_131)))
 (let ((?x18890 (* (* 2.0 l_0_5_122) l_0_5_130)))
 (let ((?x17720 (* 2.0 l_0_5_121)))
 (let ((?x18887 (* ?x17720 l_0_5_129)))
 (let ((?x17717 (* 2.0 l_0_5_120)))
 (let ((?x18885 (* ?x17717 l_0_5_128)))
 (let ((?x20505 (+ (+ (+ (+ (* (* 2.0 l_0_5_119) l_0_5_127) ?x18885) ?x18887) ?x18890) ?x18893)))
 (let ((?x20512 (- (- (- (- (+ (+ (+ ?x20505 ?x18896) ?x18899) ?x18902) ?x18905) ?x18908) ?x18911) ?x18914)))
 (let ((?x20519 (+ (+ (+ (- (- (- (- ?x20512 ?x18917) ?x18920) ?x18923) ?x18926) ?x17852) ?x17855) ?x17858)))
 (= (+ (+ (+ (+ (+ ?x20519 ?x17861) ?x17864) ?x17867) ?x17870) ?x17873) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x18009 (* l_0_5_270 l_0_5_270)))
 (let ((?x18007 (* l_0_5_269 l_0_5_269)))
 (let ((?x18005 (* l_0_5_268 l_0_5_268)))
 (let ((?x18003 (* l_0_5_267 l_0_5_267)))
 (let ((?x18001 (* l_0_5_266 l_0_5_266)))
 (let ((?x17999 (* l_0_5_265 l_0_5_265)))
 (let ((?x17997 (* l_0_5_264 l_0_5_264)))
 (let ((?x17995 (* l_0_5_263 l_0_5_263)))
 (let ((?x18031 (* l_0_5_262 l_0_5_262)))
 (let ((?x19026 (* l_0_5_180 l_0_5_180)))
 (let ((?x19024 (* l_0_5_179 l_0_5_179)))
 (let ((?x19022 (* l_0_5_178 l_0_5_178)))
 (let ((?x19020 (* l_0_5_177 l_0_5_177)))
 (let ((?x19018 (* l_0_5_176 l_0_5_176)))
 (let ((?x19016 (* l_0_5_175 l_0_5_175)))
 (let ((?x19014 (* l_0_5_174 l_0_5_174)))
 (let ((?x19012 (* l_0_5_173 l_0_5_173)))
 (let ((?x19010 (* l_0_5_172 l_0_5_172)))
 (let ((?x19008 (* l_0_5_135 l_0_5_135)))
 (let ((?x19006 (* l_0_5_134 l_0_5_134)))
 (let ((?x19004 (* l_0_5_133 l_0_5_133)))
 (let ((?x19002 (* l_0_5_132 l_0_5_132)))
 (let ((?x18989 (* l_0_5_131 l_0_5_131)))
 (let ((?x18986 (* l_0_5_130 l_0_5_130)))
 (let ((?x18982 (* l_0_5_129 l_0_5_129)))
 (let ((?x20562 (+ (+ (+ (* l_0_5_127 l_0_5_127) (* l_0_5_128 l_0_5_128)) ?x18982) ?x18986)))
 (let ((?x20569 (- (- (+ (+ (+ (+ (+ ?x20562 ?x18989) ?x19002) ?x19004) ?x19006) ?x19008) ?x19010) ?x19012)))
 (let ((?x20576 (- (- (- (- (- (- (- ?x20569 ?x19014) ?x19016) ?x19018) ?x19020) ?x19022) ?x19024) ?x19026)))
 (let ((?x20583 (+ (+ (+ (+ (+ (+ (+ ?x20576 ?x18031) ?x17995) ?x17997) ?x17999) ?x18001) ?x18003) ?x18005)))
 (= (+ (+ ?x20583 ?x18007) ?x18009) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x20610 (- (* (* (- 2.0) l_0_5_181) l_0_5_182) (* (* 2.0 l_0_5_271) l_0_5_272))))
 (= ?x20610 0.0)))
(assert
 (let ((?x20625 (- (* (* (- 2.0) l_0_5_181) l_0_5_191) (* (* 2.0 l_0_5_271) l_0_5_281))))
 (= ?x20625 0.0)))
(assert
 (let ((?x20640 (- (* (* (- 2.0) l_0_5_181) l_0_5_196) (* (* 2.0 l_0_5_271) l_0_5_286))))
 (= ?x20640 0.0)))
(assert
 (let ((?x20655 (- (* (* (- 2.0) l_0_5_181) l_0_5_202) (* (* 2.0 l_0_5_271) l_0_5_292))))
 (= ?x20655 0.0)))
(assert
 (let ((?x20670 (- (* (* (- 2.0) l_0_5_181) l_0_5_217) (* (* 2.0 l_0_5_271) l_0_5_307))))
 (= ?x20670 0.0)))
(assert
 (let ((?x20690 (* l_0_5_273 l_0_5_273)))
 (let ((?x20688 (* l_0_5_272 l_0_5_272)))
 (let ((?x20687 (- (* (* (- 1.0) l_0_5_182) l_0_5_182) (* (* 1.0 l_0_5_183) l_0_5_183))))
 (= (- (- ?x20687 ?x20688) ?x20690) 0.0)))))
(assert
 (let ((?x20709 (- (* (* (- 2.0) l_0_5_182) l_0_5_191) (* (* 2.0 l_0_5_183) l_0_5_192))))
 (let ((?x20713 (- (- ?x20709 (* (* 2.0 l_0_5_272) l_0_5_281)) (* (* 2.0 l_0_5_273) l_0_5_282))))
 (= ?x20713 0.0))))
(assert
 (let ((?x20740 (- (* (* (- 2.0) l_0_5_182) l_0_5_196) (* (* 2.0 l_0_5_183) l_0_5_197))))
 (let ((?x20744 (- (- ?x20740 (* (* 2.0 l_0_5_272) l_0_5_286)) (* (* 2.0 l_0_5_273) l_0_5_287))))
 (= ?x20744 0.0))))
(assert
 (let ((?x20771 (- (* (* (- 2.0) l_0_5_182) l_0_5_202) (* (* 2.0 l_0_5_183) l_0_5_203))))
 (let ((?x20775 (- (- ?x20771 (* (* 2.0 l_0_5_272) l_0_5_292)) (* (* 2.0 l_0_5_273) l_0_5_293))))
 (= ?x20775 0.0))))
(assert
 (let ((?x20802 (- (* (* (- 2.0) l_0_5_182) l_0_5_217) (* (* 2.0 l_0_5_183) l_0_5_218))))
 (let ((?x20806 (- (- ?x20802 (* (* 2.0 l_0_5_272) l_0_5_307)) (* (* 2.0 l_0_5_273) l_0_5_308))))
 (= ?x20806 0.0))))
(assert
 (let ((?x20848 (* l_0_5_280 l_0_5_280)))
 (let ((?x20846 (* l_0_5_279 l_0_5_279)))
 (let ((?x20844 (* l_0_5_278 l_0_5_278)))
 (let ((?x20842 (* l_0_5_277 l_0_5_277)))
 (let ((?x20835 (- (* (* (- 1.0) l_0_5_187) l_0_5_187) (* (* 1.0 l_0_5_188) l_0_5_188))))
 (let ((?x20841 (- (- ?x20835 (* (* 1.0 l_0_5_189) l_0_5_189)) (* (* 1.0 l_0_5_190) l_0_5_190))))
 (= (- (- (- (- ?x20841 ?x20842) ?x20844) ?x20846) ?x20848) 0.0))))))))
(assert
 (let ((?x20881 (- (* (* (- 2.0) l_0_5_187) l_0_5_196) (* (* 2.0 l_0_5_188) l_0_5_197))))
 (let ((?x20885 (- (- ?x20881 (* (* 2.0 l_0_5_189) l_0_5_198)) (* (* 2.0 l_0_5_190) l_0_5_199))))
 (let ((?x20889 (- (- ?x20885 (* (* 2.0 l_0_5_277) l_0_5_286)) (* (* 2.0 l_0_5_278) l_0_5_287))))
 (let ((?x20893 (- (- ?x20889 (* (* 2.0 l_0_5_279) l_0_5_288)) (* (* 2.0 l_0_5_280) l_0_5_289))))
 (= ?x20893 0.0))))))
(assert
 (let ((?x20944 (- (* (* (- 2.0) l_0_5_187) l_0_5_202) (* (* 2.0 l_0_5_188) l_0_5_203))))
 (let ((?x20948 (- (- ?x20944 (* (* 2.0 l_0_5_189) l_0_5_204)) (* (* 2.0 l_0_5_190) l_0_5_205))))
 (let ((?x20952 (- (- ?x20948 (* (* 2.0 l_0_5_277) l_0_5_292)) (* (* 2.0 l_0_5_278) l_0_5_293))))
 (let ((?x20956 (- (- ?x20952 (* (* 2.0 l_0_5_279) l_0_5_294)) (* (* 2.0 l_0_5_280) l_0_5_295))))
 (= ?x20956 0.0))))))
(assert
 (let ((?x21007 (- (* (* (- 2.0) l_0_5_187) l_0_5_217) (* (* 2.0 l_0_5_188) l_0_5_218))))
 (let ((?x21011 (- (- ?x21007 (* (* 2.0 l_0_5_189) l_0_5_219)) (* (* 2.0 l_0_5_190) l_0_5_220))))
 (let ((?x21015 (- (- ?x21011 (* (* 2.0 l_0_5_277) l_0_5_307)) (* (* 2.0 l_0_5_278) l_0_5_308))))
 (let ((?x21019 (- (- ?x21015 (* (* 2.0 l_0_5_279) l_0_5_309)) (* (* 2.0 l_0_5_280) l_0_5_310))))
 (= ?x21019 0.0))))))
(assert
 (let ((?x21090 (* l_0_5_285 l_0_5_285)))
 (let ((?x21088 (* l_0_5_284 l_0_5_284)))
 (let ((?x21086 (* l_0_5_283 l_0_5_283)))
 (let ((?x21084 (* l_0_5_282 l_0_5_282)))
 (let ((?x21082 (* l_0_5_281 l_0_5_281)))
 (let ((?x21072 (- (* (* (- 1.0) l_0_5_191) l_0_5_191) (* (* 1.0 l_0_5_192) l_0_5_192))))
 (let ((?x21078 (- (- ?x21072 (* (* 1.0 l_0_5_193) l_0_5_193)) (* (* 1.0 l_0_5_194) l_0_5_194))))
 (let ((?x21087 (- (- (- (- ?x21078 (* (* 1.0 l_0_5_195) l_0_5_195)) ?x21082) ?x21084) ?x21086)))
 (= (- (- ?x21087 ?x21088) ?x21090) 0.0))))))))))
(assert
 (let ((?x21130 (- (* (* (- 2.0) l_0_5_191) l_0_5_196) (* (* 2.0 l_0_5_192) l_0_5_197))))
 (let ((?x21134 (- (- ?x21130 (* (* 2.0 l_0_5_193) l_0_5_198)) (* (* 2.0 l_0_5_194) l_0_5_199))))
 (let ((?x21138 (- (- ?x21134 (* (* 2.0 l_0_5_195) l_0_5_200)) (* (* 2.0 l_0_5_281) l_0_5_286))))
 (let ((?x21142 (- (- ?x21138 (* (* 2.0 l_0_5_282) l_0_5_287)) (* (* 2.0 l_0_5_283) l_0_5_288))))
 (let ((?x21146 (- (- ?x21142 (* (* 2.0 l_0_5_284) l_0_5_289)) (* (* 2.0 l_0_5_285) l_0_5_290))))
 (= ?x21146 0.0)))))))
(assert
 (let ((?x21209 (- (* (* (- 2.0) l_0_5_191) l_0_5_202) (* (* 2.0 l_0_5_192) l_0_5_203))))
 (let ((?x21213 (- (- ?x21209 (* (* 2.0 l_0_5_193) l_0_5_204)) (* (* 2.0 l_0_5_194) l_0_5_205))))
 (let ((?x21217 (- (- ?x21213 (* (* 2.0 l_0_5_195) l_0_5_206)) (* (* 2.0 l_0_5_281) l_0_5_292))))
 (let ((?x21221 (- (- ?x21217 (* (* 2.0 l_0_5_282) l_0_5_293)) (* (* 2.0 l_0_5_283) l_0_5_294))))
 (let ((?x21225 (- (- ?x21221 (* (* 2.0 l_0_5_284) l_0_5_295)) (* (* 2.0 l_0_5_285) l_0_5_296))))
 (= ?x21225 0.0)))))))
(assert
 (let ((?x21288 (- (* (* (- 2.0) l_0_5_191) l_0_5_217) (* (* 2.0 l_0_5_192) l_0_5_218))))
 (let ((?x21292 (- (- ?x21288 (* (* 2.0 l_0_5_193) l_0_5_219)) (* (* 2.0 l_0_5_194) l_0_5_220))))
 (let ((?x21296 (- (- ?x21292 (* (* 2.0 l_0_5_195) l_0_5_221)) (* (* 2.0 l_0_5_281) l_0_5_307))))
 (let ((?x21300 (- (- ?x21296 (* (* 2.0 l_0_5_282) l_0_5_308)) (* (* 2.0 l_0_5_283) l_0_5_309))))
 (let ((?x21304 (- (- ?x21300 (* (* 2.0 l_0_5_284) l_0_5_310)) (* (* 2.0 l_0_5_285) l_0_5_311))))
 (= ?x21304 0.0)))))))
(assert
 (let ((?x21392 (* l_0_5_291 l_0_5_291)))
 (let ((?x21390 (* l_0_5_290 l_0_5_290)))
 (let ((?x21388 (* l_0_5_289 l_0_5_289)))
 (let ((?x21386 (* l_0_5_288 l_0_5_288)))
 (let ((?x21384 (* l_0_5_287 l_0_5_287)))
 (let ((?x21382 (* l_0_5_286 l_0_5_286)))
 (let ((?x21369 (- (* (* (- 1.0) l_0_5_196) l_0_5_196) (* (* 1.0 l_0_5_197) l_0_5_197))))
 (let ((?x21375 (- (- ?x21369 (* (* 1.0 l_0_5_198) l_0_5_198)) (* (* 1.0 l_0_5_199) l_0_5_199))))
 (let ((?x21381 (- (- ?x21375 (* (* 1.0 l_0_5_200) l_0_5_200)) (* (* 1.0 l_0_5_201) l_0_5_201))))
 (= (- (- (- (- (- (- ?x21381 ?x21382) ?x21384) ?x21386) ?x21388) ?x21390) ?x21392) 0.0)))))))))))
(assert
 (let ((?x21439 (- (* (* (- 2.0) l_0_5_196) l_0_5_217) (* (* 2.0 l_0_5_197) l_0_5_218))))
 (let ((?x21443 (- (- ?x21439 (* (* 2.0 l_0_5_198) l_0_5_219)) (* (* 2.0 l_0_5_199) l_0_5_220))))
 (let ((?x21447 (- (- ?x21443 (* (* 2.0 l_0_5_200) l_0_5_221)) (* (* 2.0 l_0_5_201) l_0_5_222))))
 (let ((?x21451 (- (- ?x21447 (* (* 2.0 l_0_5_286) l_0_5_307)) (* (* 2.0 l_0_5_287) l_0_5_308))))
 (let ((?x21455 (- (- ?x21451 (* (* 2.0 l_0_5_288) l_0_5_309)) (* (* 2.0 l_0_5_289) l_0_5_310))))
 (let ((?x21459 (- (- ?x21455 (* (* 2.0 l_0_5_290) l_0_5_311)) (* (* 2.0 l_0_5_291) l_0_5_312))))
 (= ?x21459 0.0))))))))
(assert
 (let ((?x21564 (* l_0_5_298 l_0_5_298)))
 (let ((?x21562 (* l_0_5_297 l_0_5_297)))
 (let ((?x21560 (* l_0_5_296 l_0_5_296)))
 (let ((?x21558 (* l_0_5_295 l_0_5_295)))
 (let ((?x21556 (* l_0_5_294 l_0_5_294)))
 (let ((?x21554 (* l_0_5_293 l_0_5_293)))
 (let ((?x21552 (* l_0_5_292 l_0_5_292)))
 (let ((?x21536 (- (* (* (- 1.0) l_0_5_202) l_0_5_202) (* (* 1.0 l_0_5_203) l_0_5_203))))
 (let ((?x21542 (- (- ?x21536 (* (* 1.0 l_0_5_204) l_0_5_204)) (* (* 1.0 l_0_5_205) l_0_5_205))))
 (let ((?x21548 (- (- ?x21542 (* (* 1.0 l_0_5_206) l_0_5_206)) (* (* 1.0 l_0_5_207) l_0_5_207))))
 (let ((?x21557 (- (- (- (- ?x21548 (* (* 1.0 l_0_5_208) l_0_5_208)) ?x21552) ?x21554) ?x21556)))
 (= (- (- (- (- ?x21557 ?x21558) ?x21560) ?x21562) ?x21564) 0.0)))))))))))))
(assert
 (let ((?x21657 (* l_0_5_315 l_0_5_315)))
 (let ((?x21655 (* l_0_5_314 l_0_5_314)))
 (let ((?x21653 (* l_0_5_313 l_0_5_313)))
 (let ((?x21651 (* l_0_5_312 l_0_5_312)))
 (let ((?x21649 (* l_0_5_311 l_0_5_311)))
 (let ((?x21647 (* l_0_5_310 l_0_5_310)))
 (let ((?x21645 (* l_0_5_309 l_0_5_309)))
 (let ((?x21643 (* l_0_5_308 l_0_5_308)))
 (let ((?x21641 (* l_0_5_307 l_0_5_307)))
 (let ((?x21619 (- (* (* (- 1.0) l_0_5_217) l_0_5_217) (* (* 1.0 l_0_5_218) l_0_5_218))))
 (let ((?x21625 (- (- ?x21619 (* (* 1.0 l_0_5_219) l_0_5_219)) (* (* 1.0 l_0_5_220) l_0_5_220))))
 (let ((?x21631 (- (- ?x21625 (* (* 1.0 l_0_5_221) l_0_5_221)) (* (* 1.0 l_0_5_222) l_0_5_222))))
 (let ((?x21637 (- (- ?x21631 (* (* 1.0 l_0_5_223) l_0_5_223)) (* (* 1.0 l_0_5_224) l_0_5_224))))
 (let ((?x21646 (- (- (- (- ?x21637 (* (* 1.0 l_0_5_225) l_0_5_225)) ?x21641) ?x21643) ?x21645)))
 (= (- (- (- (- (- (- ?x21646 ?x21647) ?x21649) ?x21651) ?x21653) ?x21655) ?x21657) 0.0))))))))))))))))
(assert
 (>= l_0_5_1 0.0))
(assert
 (>= l_0_5_3 0.0))
(assert
 (>= l_0_5_6 0.0))
(assert
 (>= l_0_5_10 0.0))
(assert
 (>= l_0_5_15 0.0))
(assert
 (>= l_0_5_21 0.0))
(assert
 (>= l_0_5_28 0.0))
(assert
 (>= l_0_5_36 0.0))
(assert
 (>= l_0_5_45 0.0))
(assert
 (>= l_0_5_46 0.0))
(assert
 (>= l_0_5_48 0.0))
(assert
 (>= l_0_5_51 0.0))
(assert
 (>= l_0_5_55 0.0))
(assert
 (>= l_0_5_60 0.0))
(assert
 (>= l_0_5_66 0.0))
(assert
 (>= l_0_5_73 0.0))
(assert
 (>= l_0_5_81 0.0))
(assert
 (>= l_0_5_90 0.0))
(assert
 (>= l_0_5_91 0.0))
(assert
 (>= l_0_5_93 0.0))
(assert
 (>= l_0_5_96 0.0))
(assert
 (>= l_0_5_100 0.0))
(assert
 (>= l_0_5_105 0.0))
(assert
 (>= l_0_5_111 0.0))
(assert
 (>= l_0_5_118 0.0))
(assert
 (>= l_0_5_126 0.0))
(assert
 (>= l_0_5_135 0.0))
(assert
 (>= l_0_5_136 0.0))
(assert
 (>= l_0_5_138 0.0))
(assert
 (>= l_0_5_141 0.0))
(assert
 (>= l_0_5_145 0.0))
(assert
 (>= l_0_5_150 0.0))
(assert
 (>= l_0_5_156 0.0))
(assert
 (>= l_0_5_163 0.0))
(assert
 (>= l_0_5_171 0.0))
(assert
 (>= l_0_5_180 0.0))
(assert
 (>= l_0_5_181 0.0))
(assert
 (>= l_0_5_183 0.0))
(assert
 (>= l_0_5_186 0.0))
(assert
 (>= l_0_5_190 0.0))
(assert
 (>= l_0_5_195 0.0))
(assert
 (>= l_0_5_201 0.0))
(assert
 (>= l_0_5_208 0.0))
(assert
 (>= l_0_5_216 0.0))
(assert
 (>= l_0_5_225 0.0))
(assert
 (>= l_0_5_226 0.0))
(assert
 (>= l_0_5_228 0.0))
(assert
 (>= l_0_5_231 0.0))
(assert
 (>= l_0_5_235 0.0))
(assert
 (>= l_0_5_240 0.0))
(assert
 (>= l_0_5_246 0.0))
(assert
 (>= l_0_5_253 0.0))
(assert
 (>= l_0_5_261 0.0))
(assert
 (>= l_0_5_270 0.0))
(assert
 (>= l_0_5_271 0.0))
(assert
 (>= l_0_5_273 0.0))
(assert
 (>= l_0_5_276 0.0))
(assert
 (>= l_0_5_280 0.0))
(assert
 (>= l_0_5_285 0.0))
(assert
 (>= l_0_5_291 0.0))
(assert
 (>= l_0_5_298 0.0))
(assert
 (>= l_0_5_306 0.0))
(assert
 (>= l_0_5_315 0.0))
(assert
 (let ((?x21790 (* l_0_6_316 l_0_6_316)))
 (let ((?x21788 (* l_0_6_271 l_0_6_271)))
 (= (- (- (- _a_0_ (* (* 1.0 l_0_6_181) l_0_6_181)) ?x21788) ?x21790) 0.0))))
(assert
 (let ((?x21816 (* l_0_6_91 l_0_6_91)))
 (let ((?x21808 (* l_0_6_226 l_0_6_226)))
 (let ((?x21807 (- (- _a_1_ (* l_0_6_136 l_0_6_136)) (* (* 2.0 l_0_6_181) l_0_6_209))))
 (let ((?x21815 (- (- (+ ?x21807 ?x21808) (* (* 2.0 l_0_6_271) l_0_6_299)) (* (* 2.0 l_0_6_316) l_0_6_344))))
 (= (+ ?x21815 ?x21816) 0.0))))))
(assert
 (let ((?x21851 (* l_0_6_46 l_0_6_46)))
 (let ((?x21808 (* l_0_6_226 l_0_6_226)))
 (let ((?x21845 (- (+ _a_2_ (* l_0_6_1 l_0_6_1)) (* (* 2.0 l_0_6_181) l_0_6_184))))
 (let ((?x21850 (- (- (- ?x21845 ?x21808) (* (* 2.0 l_0_6_271) l_0_6_274)) (* (* 2.0 l_0_6_316) l_0_6_319))))
 (= (- ?x21850 ?x21851) 0.0))))))
(assert
 (let ((?x21851 (* l_0_6_46 l_0_6_46)))
 (let ((?x21886 (- (- (* (- l_0_6_1) l_0_6_1) (* (* 2.0 l_0_6_196) l_0_6_202)) (* (* 2.0 l_0_6_197) l_0_6_203))))
 (let ((?x21892 (- (- ?x21886 (* (* 2.0 l_0_6_198) l_0_6_204)) (* (* 2.0 l_0_6_199) l_0_6_205))))
 (let ((?x21898 (- (- ?x21892 (* (* 2.0 l_0_6_200) l_0_6_206)) (* (* 2.0 l_0_6_201) l_0_6_207))))
 (let ((?x21904 (- (- ?x21898 (* (* 2.0 l_0_6_286) l_0_6_292)) (* (* 2.0 l_0_6_287) l_0_6_293))))
 (let ((?x21910 (- (- ?x21904 (* (* 2.0 l_0_6_288) l_0_6_294)) (* (* 2.0 l_0_6_289) l_0_6_295))))
 (let ((?x21916 (- (- ?x21910 (* (* 2.0 l_0_6_290) l_0_6_296)) (* (* 2.0 l_0_6_291) l_0_6_297))))
 (let ((?x21922 (- (- ?x21916 (* (* 2.0 l_0_6_331) l_0_6_337)) (* (* 2.0 l_0_6_332) l_0_6_338))))
 (let ((?x21928 (- (- ?x21922 (* (* 2.0 l_0_6_333) l_0_6_339)) (* (* 2.0 l_0_6_334) l_0_6_340))))
 (let ((?x21934 (- (- ?x21928 (* (* 2.0 l_0_6_335) l_0_6_341)) (* (* 2.0 l_0_6_336) l_0_6_342))))
 (= (- (+ ?x21934 ?x21851) 1.0) 0.0))))))))))))
(assert
 (let ((?x21816 (* l_0_6_91 l_0_6_91)))
 (let ((?x22058 (- (- (* l_0_6_136 l_0_6_136) (* (* 2.0 l_0_6_202) l_0_6_217)) (* (* 2.0 l_0_6_203) l_0_6_218))))
 (let ((?x22064 (- (- ?x22058 (* (* 2.0 l_0_6_204) l_0_6_219)) (* (* 2.0 l_0_6_205) l_0_6_220))))
 (let ((?x22070 (- (- ?x22064 (* (* 2.0 l_0_6_206) l_0_6_221)) (* (* 2.0 l_0_6_207) l_0_6_222))))
 (let ((?x22076 (- (- ?x22070 (* (* 2.0 l_0_6_208) l_0_6_223)) (* (* 2.0 l_0_6_292) l_0_6_307))))
 (let ((?x22082 (- (- ?x22076 (* (* 2.0 l_0_6_293) l_0_6_308)) (* (* 2.0 l_0_6_294) l_0_6_309))))
 (let ((?x22088 (- (- ?x22082 (* (* 2.0 l_0_6_295) l_0_6_310)) (* (* 2.0 l_0_6_296) l_0_6_311))))
 (let ((?x22094 (- (- ?x22088 (* (* 2.0 l_0_6_297) l_0_6_312)) (* (* 2.0 l_0_6_298) l_0_6_313))))
 (let ((?x22100 (- (- ?x22094 (* (* 2.0 l_0_6_337) l_0_6_352)) (* (* 2.0 l_0_6_338) l_0_6_353))))
 (let ((?x22106 (- (- ?x22100 (* (* 2.0 l_0_6_339) l_0_6_354)) (* (* 2.0 l_0_6_340) l_0_6_355))))
 (let ((?x22112 (- (- ?x22106 (* (* 2.0 l_0_6_341) l_0_6_356)) (* (* 2.0 l_0_6_342) l_0_6_357))))
 (= (+ (- (- ?x22112 (* (* 2.0 l_0_6_343) l_0_6_358)) ?x21816) 1.0) 0.0)))))))))))))
(assert
 (let ((?x22253 (- (- (- _a_3_) (* (* 2.0 l_0_6_181) l_0_6_187)) (* (* 2.0 l_0_6_271) l_0_6_277))))
 (= (- ?x22253 (* (* 2.0 l_0_6_316) l_0_6_322)) 0.0)))
(assert
 (let ((?x21851 (* l_0_6_46 l_0_6_46)))
 (let ((?x22282 (- (- (- _a_4_) (* l_0_6_1 l_0_6_1)) (* (* 2.0 l_0_6_187) l_0_6_191))))
 (let ((?x22288 (- (- ?x22282 (* (* 2.0 l_0_6_188) l_0_6_192)) (* (* 2.0 l_0_6_189) l_0_6_193))))
 (let ((?x22294 (- (- ?x22288 (* (* 2.0 l_0_6_190) l_0_6_194)) (* (* 2.0 l_0_6_277) l_0_6_281))))
 (let ((?x22300 (- (- ?x22294 (* (* 2.0 l_0_6_278) l_0_6_282)) (* (* 2.0 l_0_6_279) l_0_6_283))))
 (let ((?x22306 (- (- ?x22300 (* (* 2.0 l_0_6_280) l_0_6_284)) (* (* 2.0 l_0_6_322) l_0_6_326))))
 (let ((?x22312 (- (- ?x22306 (* (* 2.0 l_0_6_323) l_0_6_327)) (* (* 2.0 l_0_6_324) l_0_6_328))))
 (= (+ (- ?x22312 (* (* 2.0 l_0_6_325) l_0_6_329)) ?x21851) 0.0)))))))))
(assert
 (let ((?x21816 (* l_0_6_91 l_0_6_91)))
 (let ((?x22398 (- (+ (- _a_5_) (* l_0_6_136 l_0_6_136)) (* (* 2.0 l_0_6_182) l_0_6_187))))
 (let ((?x22404 (- (- ?x22398 (* (* 2.0 l_0_6_183) l_0_6_188)) (* (* 2.0 l_0_6_272) l_0_6_277))))
 (let ((?x22410 (- (- ?x22404 (* (* 2.0 l_0_6_273) l_0_6_278)) (* (* 2.0 l_0_6_317) l_0_6_322))))
 (= (- (- ?x22410 (* (* 2.0 l_0_6_318) l_0_6_323)) ?x21816) 0.0))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22461 (* ?x22460 l_0_6_47)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22459 (* ?x22458 l_0_6_2)))
 (= (+ ?x22459 ?x22461) 0.0))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x22525 (* ?x22524 l_0_6_72)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x22522 (* ?x22521 l_0_6_71)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x22519 (* ?x22518 l_0_6_70)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x22516 (* ?x22515 l_0_6_69)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x22513 (* ?x22512 l_0_6_68)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x22510 (* ?x22509 l_0_6_67)))
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22507 (* ?x22460 l_0_6_49)))
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x22505 (* ?x22504 l_0_6_252)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x22502 (* ?x22501 l_0_6_251)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x22499 (* ?x22498 l_0_6_250)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x22496 (* ?x22495 l_0_6_249)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x22493 (* ?x22492 l_0_6_248)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x22490 (* ?x22489 l_0_6_247)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x22487 (* ?x22486 l_0_6_27)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x22484 (* ?x22483 l_0_6_26)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x22481 (* ?x22480 l_0_6_25)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x22478 (* ?x22477 l_0_6_24)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22475 (* ?x22474 l_0_6_23)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x22468 (* ?x22467 l_0_6_22)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22465 (* ?x22458 l_0_6_4)))
 (let ((?x22491 (- (+ (+ (+ (+ (+ (+ ?x22465 ?x22468) ?x22475) ?x22478) ?x22481) ?x22484) ?x22487) ?x22490)))
 (let ((?x22511 (- (+ (- (- (- (- (- ?x22491 ?x22493) ?x22496) ?x22499) ?x22502) ?x22505) ?x22507) ?x22510)))
 (= (- (- (- (- (- ?x22511 ?x22513) ?x22516) ?x22519) ?x22522) ?x22525) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22573 (* ?x22460 l_0_6_52)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) ?x22573) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22579 (* ?x22460 l_0_6_56)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_11) ?x22579) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22589 (* ?x22460 l_0_6_61)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x22589) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22599 (* ?x22460 l_0_6_67)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_22) ?x22599) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22655 (* ?x22460 l_0_6_74)))
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x22505 (* ?x22504 l_0_6_252)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x22502 (* ?x22501 l_0_6_251)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x22499 (* ?x22498 l_0_6_250)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x22496 (* ?x22495 l_0_6_249)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x22493 (* ?x22492 l_0_6_248)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x22490 (* ?x22489 l_0_6_247)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x22647 (* ?x22646 l_0_6_162)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x22644 (* ?x22643 l_0_6_161)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x22641 (* ?x22640 l_0_6_160)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x22638 (* ?x22637 l_0_6_159)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x22635 (* ?x22634 l_0_6_158)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x22632 (* ?x22631 l_0_6_157)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x22629 (* ?x22628 l_0_6_117)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x22626 (* ?x22625 l_0_6_116)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x22623 (* ?x22622 l_0_6_115)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x22620 (* ?x22619 l_0_6_114)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22617 (* ?x22616 l_0_6_113)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22607 (* ?x22458 l_0_6_29)))
 (let ((?x22624 (+ (+ (+ (+ ?x22607 (* (* 2.0 l_0_6_106) l_0_6_112)) ?x22617) ?x22620) ?x22623)))
 (let ((?x22645 (- (- (- (- (- (+ (+ ?x22624 ?x22626) ?x22629) ?x22632) ?x22635) ?x22638) ?x22641) ?x22644)))
 (let ((?x22654 (+ (+ (+ (+ (+ (+ (- ?x22645 ?x22647) ?x22490) ?x22493) ?x22496) ?x22499) ?x22502) ?x22505)))
 (= (+ ?x22654 ?x22655) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22695 (* ?x22460 l_0_6_82)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x22693 (* ?x3708 l_0_6_151)))
 (let ((?x22609 (* 2.0 l_0_6_106)))
 (let ((?x3713 (* ?x22609 l_0_6_91)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x3710 (* ?x22458 l_0_6_37)))
 (= (+ (+ (- ?x3710 ?x3713) ?x22693) ?x22695) 0.0))))))))))
(assert
 (let ((?x22715 (* l_0_6_48 l_0_6_48)))
 (let ((?x22713 (* l_0_6_47 l_0_6_47)))
 (let ((?x22716 (+ (+ (- (* (- l_0_6_2) l_0_6_2) (* l_0_6_3 l_0_6_3)) ?x22713) ?x22715)))
 (= ?x22716 0.0)))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22734 (* ?x22733 l_0_6_50)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22731 (* ?x22730 l_0_6_49)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22728 (* ?x22727 l_0_6_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_4) ?x22728) ?x22731) ?x22734) 0.0))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22772 (* ?x22733 l_0_6_53)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22770 (* ?x22730 l_0_6_52)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22768 (* ?x22727 l_0_6_8)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22766 (* ?x22765 l_0_6_7)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x22647 (* ?x22646 l_0_6_162)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x22644 (* ?x22643 l_0_6_161)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x22641 (* ?x22640 l_0_6_160)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x22638 (* ?x22637 l_0_6_159)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x22635 (* ?x22634 l_0_6_158)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x22632 (* ?x22631 l_0_6_157)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x22629 (* ?x22628 l_0_6_117)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x22626 (* ?x22625 l_0_6_116)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x22623 (* ?x22622 l_0_6_115)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x22620 (* ?x22619 l_0_6_114)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22617 (* ?x22616 l_0_6_113)))
 (let ((?x22757 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x22617) ?x22620) ?x22623) ?x22626)))
 (let ((?x22764 (+ (+ (+ (+ (+ (+ (- ?x22757 ?x22629) ?x22632) ?x22635) ?x22638) ?x22641) ?x22644) ?x22647)))
 (= (+ (+ (- (- ?x22764 ?x22766) ?x22768) ?x22770) ?x22772) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22796 (* ?x22733 l_0_6_57)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22794 (* ?x22730 l_0_6_56)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22792 (* ?x22791 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_11) l_0_6_2) ?x22792) ?x22794) ?x22796) 0.0))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22817 (* ?x22733 l_0_6_62)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22815 (* ?x22730 l_0_6_61)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22813 (* ?x22474 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_16) l_0_6_2) ?x22813) ?x22815) ?x22817) 0.0))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22838 (* ?x22733 l_0_6_68)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22836 (* ?x22730 l_0_6_67)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x22834 (* ?x22833 l_0_6_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_22) ?x22834) ?x22836) ?x22838) 0.0))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22857 (* ?x22733 l_0_6_75)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22855 (* ?x22730 l_0_6_74)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22848 (* ?x22727 l_0_6_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_2) l_0_6_29) ?x22848) ?x22855) ?x22857) 0.0))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22890 (* ?x22733 l_0_6_83)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22888 (* ?x22730 l_0_6_82)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22886 (* ?x22727 l_0_6_38)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22884 (* ?x22765 l_0_6_37)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x22882 (* ?x22881 l_0_6_152)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x22879 (* ?x22878 l_0_6_151)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22871 (* ?x22616 l_0_6_93)))
 (let ((?x22883 (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_92) ?x22871) ?x22879) ?x22882)))
 (= (+ (+ (- (- ?x22883 ?x22884) ?x22886) ?x22888) ?x22890) 0.0)))))))))))))))))
(assert
 (let ((?x22933 (* l_0_6_6 l_0_6_6)))
 (let ((?x22931 (* l_0_6_51 l_0_6_51)))
 (let ((?x22929 (* l_0_6_50 l_0_6_50)))
 (let ((?x22927 (* l_0_6_5 l_0_6_5)))
 (let ((?x22930 (+ (- (+ (* (- l_0_6_4) l_0_6_4) (* l_0_6_49 l_0_6_49)) ?x22927) ?x22929)))
 (= (- (+ ?x22930 ?x22931) ?x22933) 0.0)))))))
(assert
 (let ((?x22963 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x22960 (* ?x22959 l_0_6_54)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x22957 (* ?x22956 l_0_6_53)))
 (let ((?x22954 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x22951 (* ?x22950 l_0_6_52)))
 (let ((?x22961 (+ (+ (- (+ (* (* (- 2.0) l_0_6_4) l_0_6_7) ?x22951) ?x22954) ?x22957) ?x22960)))
 (= (- ?x22961 ?x22963) 0.0)))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23004 (* ?x22959 l_0_6_58)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23002 (* ?x22956 l_0_6_57)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23000 (* ?x22950 l_0_6_56)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x22998 (* ?x22997 l_0_6_6)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22995 (* ?x22791 l_0_6_5)))
 (let ((?x23003 (+ (+ (- (- (* (* (- 2.0) l_0_6_11) l_0_6_4) ?x22995) ?x22998) ?x23000) ?x23002)))
 (= (+ ?x23003 ?x23004) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23039 (* ?x22959 l_0_6_63)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23037 (* ?x22956 l_0_6_62)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23035 (* ?x22950 l_0_6_61)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23027 (* ?x22477 l_0_6_6)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23024 (* ?x22474 l_0_6_5)))
 (let ((?x23038 (+ (+ (- (- (* (* (- 2.0) l_0_6_16) l_0_6_4) ?x23024) ?x23027) ?x23035) ?x23037)))
 (= (+ ?x23038 ?x23039) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23069 (* ?x22959 l_0_6_69)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23067 (* ?x22956 l_0_6_68)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23065 (* ?x22950 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23063 (* ?x23062 l_0_6_6)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23054 (* ?x22833 l_0_6_5)))
 (let ((?x23068 (+ (+ (- (- (* (* (- 2.0) l_0_6_22) l_0_6_4) ?x23054) ?x23063) ?x23065) ?x23067)))
 (= (+ ?x23068 ?x23069) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23107 (* ?x22959 l_0_6_76)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23105 (* ?x22956 l_0_6_75)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23103 (* ?x22950 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23101 (* ?x23100 l_0_6_6)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23092 (* ?x23091 l_0_6_5)))
 (let ((?x23106 (+ (+ (- (- (* (* (- 2.0) l_0_6_29) l_0_6_4) ?x23092) ?x23101) ?x23103) ?x23105)))
 (= (+ ?x23106 ?x23107) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23160 (* ?x22959 l_0_6_84)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23158 (* ?x22956 l_0_6_83)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23156 (* ?x22950 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23154 (* ?x23153 l_0_6_6)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23151 (* ?x23150 l_0_6_5)))
 (let ((?x23147 (* 2.0 l_0_6_37)))
 (let ((?x23148 (* ?x23147 l_0_6_4)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x23145 (* ?x23144 l_0_6_153)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x23142 (* ?x23141 l_0_6_152)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x23139 (* ?x23138 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23130 (* ?x22619 l_0_6_96)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23127 (* ?x22616 l_0_6_95)))
 (let ((?x23143 (+ (+ (- (- (* (* (- 2.0) l_0_6_106) l_0_6_94) ?x23127) ?x23130) ?x23139) ?x23142)))
 (let ((?x23146 (+ ?x23143 ?x23145)))
 (= (+ (+ (+ (- (- (- ?x23146 ?x23148) ?x23151) ?x23154) ?x23156) ?x23158) ?x23160) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23215 (* l_0_6_9 l_0_6_9)))
 (let ((?x23213 (* l_0_6_8 l_0_6_8)))
 (let ((?x23211 (* l_0_6_7 l_0_6_7)))
 (let ((?x23209 (* l_0_6_55 l_0_6_55)))
 (let ((?x23207 (* l_0_6_54 l_0_6_54)))
 (let ((?x23205 (* l_0_6_53 l_0_6_53)))
 (let ((?x23208 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_52 l_0_6_52)) ?x23205) ?x23207)))
 (= (- (- (- (+ ?x23208 ?x23209) ?x23211) ?x23213) ?x23215) 0.0)))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x22525 (* ?x22524 l_0_6_72)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x22522 (* ?x22521 l_0_6_71)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x22519 (* ?x22518 l_0_6_70)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x22516 (* ?x22515 l_0_6_69)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x22513 (* ?x22512 l_0_6_68)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x22510 (* ?x22509 l_0_6_67)))
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23257 (* ?x23256 l_0_6_59)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23254 (* ?x23253 l_0_6_58)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23251 (* ?x23250 l_0_6_57)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23248 (* ?x23247 l_0_6_56)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x22487 (* ?x22486 l_0_6_27)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x22484 (* ?x22483 l_0_6_26)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x22481 (* ?x22480 l_0_6_25)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x22478 (* ?x22477 l_0_6_24)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22475 (* ?x22474 l_0_6_23)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x22468 (* ?x22467 l_0_6_22)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23239 (* ?x22997 l_0_6_9)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23237 (* ?x22791 l_0_6_8)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x23235 (* ?x23234 l_0_6_7)))
 (let ((?x23240 (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_14) ?x23235) ?x23237) ?x23239)))
 (let ((?x23249 (+ (- (- (- (- (- (- ?x23240 ?x22468) ?x22475) ?x22478) ?x22481) ?x22484) ?x22487) ?x23248)))
 (let ((?x23262 (+ (+ (+ (+ (+ (+ (+ ?x23249 ?x23251) ?x23254) ?x23257) ?x22510) ?x22513) ?x22516) ?x22519)))
 (= (+ (+ ?x23262 ?x22522) ?x22525) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23311 (* ?x23256 l_0_6_64)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23309 (* ?x23253 l_0_6_63)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23307 (* ?x23250 l_0_6_62)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23305 (* ?x23247 l_0_6_61)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23303 (* ?x22477 l_0_6_9)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23301 (* ?x22474 l_0_6_8)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x23299 (* ?x22467 l_0_6_7)))
 (let ((?x23306 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_19) ?x23299) ?x23301) ?x23303) ?x23305)))
 (= (+ (+ (+ ?x23306 ?x23307) ?x23309) ?x23311) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23359 (* ?x23256 l_0_6_70)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23357 (* ?x23253 l_0_6_69)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23355 (* ?x23250 l_0_6_68)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23353 (* ?x23247 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23351 (* ?x23062 l_0_6_9)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23342 (* ?x22833 l_0_6_8)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x23339 (* ?x23337 l_0_6_7)))
 (let ((?x23354 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_25) ?x23339) ?x23342) ?x23351) ?x23353)))
 (= (+ (+ (+ ?x23354 ?x23355) ?x23357) ?x23359) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23407 (* ?x23256 l_0_6_77)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23405 (* ?x23253 l_0_6_76)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23403 (* ?x23250 l_0_6_75)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23401 (* ?x23247 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23399 (* ?x23100 l_0_6_9)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23390 (* ?x23091 l_0_6_8)))
 (let ((?x23385 (* 2.0 l_0_6_29)))
 (let ((?x23387 (* ?x23385 l_0_6_7)))
 (let ((?x23402 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_32) ?x23387) ?x23390) ?x23399) ?x23401)))
 (= (+ (+ (+ ?x23402 ?x23403) ?x23405) ?x23407) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23475 (* ?x23256 l_0_6_85)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23473 (* ?x23253 l_0_6_84)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23471 (* ?x23250 l_0_6_83)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23469 (* ?x23247 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23467 (* ?x23153 l_0_6_9)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23465 (* ?x23150 l_0_6_8)))
 (let ((?x23147 (* 2.0 l_0_6_37)))
 (let ((?x23463 (* ?x23147 l_0_6_7)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x23461 (* ?x23460 l_0_6_154)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x23458 (* ?x23457 l_0_6_153)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x23455 (* ?x23454 l_0_6_152)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x23452 (* ?x23451 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23449 (* ?x22619 l_0_6_99)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23447 (* ?x22616 l_0_6_98)))
 (let ((?x22609 (* 2.0 l_0_6_106)))
 (let ((?x23438 (* ?x22609 l_0_6_97)))
 (let ((?x23433 (* 2.0 l_0_6_100)))
 (let ((?x23435 (* ?x23433 l_0_6_109)))
 (let ((?x23232 (* (- 2.0) l_0_6_10)))
 (let ((?x23431 (* ?x23232 l_0_6_40)))
 (let ((?x23459 (+ (+ (+ (- (- (- (- ?x23431 ?x23435) ?x23438) ?x23447) ?x23449) ?x23452) ?x23455) ?x23458)))
 (let ((?x23474 (+ (+ (+ (- (- (- (+ ?x23459 ?x23461) ?x23463) ?x23465) ?x23467) ?x23469) ?x23471) ?x23473)))
 (= (+ ?x23474 ?x23475) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23547 (* l_0_6_60 l_0_6_60)))
 (let ((?x23545 (* l_0_6_59 l_0_6_59)))
 (let ((?x23543 (* l_0_6_58 l_0_6_58)))
 (let ((?x23541 (* l_0_6_57 l_0_6_57)))
 (let ((?x23539 (* l_0_6_56 l_0_6_56)))
 (let ((?x23537 (* l_0_6_15 l_0_6_15)))
 (let ((?x23535 (* l_0_6_14 l_0_6_14)))
 (let ((?x23522 (* l_0_6_13 l_0_6_13)))
 (let ((?x23536 (- (- (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x23522) ?x23535)))
 (= (+ (+ (+ (+ (+ (- ?x23536 ?x23537) ?x23539) ?x23541) ?x23543) ?x23545) ?x23547) 0.0)))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23589 (* ?x23588 l_0_6_65)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23586 (* ?x23585 l_0_6_64)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23583 (* ?x23582 l_0_6_63)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23580 (* ?x23579 l_0_6_62)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23577 (* ?x23576 l_0_6_61)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23574 (* ?x23573 l_0_6_20)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23571 (* ?x23570 l_0_6_19)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23568 (* ?x22997 l_0_6_18)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23566 (* ?x22791 l_0_6_17)))
 (let ((?x23575 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_16) ?x23566) ?x23568) ?x23571) ?x23574)))
 (= (+ (+ (+ (+ (+ ?x23575 ?x23577) ?x23580) ?x23583) ?x23586) ?x23589) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23644 (* ?x23588 l_0_6_71)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23642 (* ?x23585 l_0_6_70)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23640 (* ?x23582 l_0_6_69)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23638 (* ?x23579 l_0_6_68)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23636 (* ?x23576 l_0_6_67)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23634 (* ?x23573 l_0_6_26)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23624 (* ?x23570 l_0_6_25)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23621 (* ?x22997 l_0_6_24)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23617 (* ?x22791 l_0_6_23)))
 (let ((?x23635 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_22) ?x23617) ?x23621) ?x23624) ?x23634)))
 (= (+ (+ (+ (+ (+ ?x23635 ?x23636) ?x23638) ?x23640) ?x23642) ?x23644) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23693 (* ?x23588 l_0_6_78)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23691 (* ?x23585 l_0_6_77)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23689 (* ?x23582 l_0_6_76)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23687 (* ?x23579 l_0_6_75)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23685 (* ?x23576 l_0_6_74)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23683 (* ?x23573 l_0_6_33)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23673 (* ?x23570 l_0_6_32)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23670 (* ?x22997 l_0_6_31)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x5413 (* ?x22791 l_0_6_30)))
 (let ((?x23684 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_29) ?x5413) ?x23670) ?x23673) ?x23683)))
 (= (+ (+ (+ (+ (+ ?x23684 ?x23685) ?x23687) ?x23689) ?x23691) ?x23693) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23779 (* ?x23588 l_0_6_86)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23777 (* ?x23585 l_0_6_85)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23775 (* ?x23582 l_0_6_84)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23773 (* ?x23579 l_0_6_83)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23771 (* ?x23576 l_0_6_82)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x23769 (* ?x23768 l_0_6_155)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23766 (* ?x23573 l_0_6_41)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x23764 (* ?x23763 l_0_6_154)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x23761 (* ?x23760 l_0_6_153)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x23758 (* ?x23757 l_0_6_152)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x23755 (* ?x23754 l_0_6_151)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23752 (* ?x23570 l_0_6_40)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23750 (* ?x22997 l_0_6_39)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23748 (* ?x22791 l_0_6_38)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x23746 (* ?x23234 l_0_6_37)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x23744 (* ?x23743 l_0_6_110)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x23741 (* ?x23740 l_0_6_109)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x23738 (* ?x23729 l_0_6_108)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x23726 (* ?x23724 l_0_6_107)))
 (let ((?x23745 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_106) ?x23726) ?x23738) ?x23741) ?x23744)))
 (let ((?x23762 (+ (+ (+ (- (- (- (- ?x23745 ?x23746) ?x23748) ?x23750) ?x23752) ?x23755) ?x23758) ?x23761)))
 (let ((?x23778 (+ (+ (+ (+ (+ (- (+ ?x23762 ?x23764) ?x23766) ?x23769) ?x23771) ?x23773) ?x23775) ?x23777)))
 (= (+ ?x23778 ?x23779) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23876 (* l_0_6_66 l_0_6_66)))
 (let ((?x23874 (* l_0_6_65 l_0_6_65)))
 (let ((?x23872 (* l_0_6_64 l_0_6_64)))
 (let ((?x23870 (* l_0_6_63 l_0_6_63)))
 (let ((?x23868 (* l_0_6_62 l_0_6_62)))
 (let ((?x23866 (* l_0_6_61 l_0_6_61)))
 (let ((?x23864 (* l_0_6_21 l_0_6_21)))
 (let ((?x23862 (* l_0_6_20 l_0_6_20)))
 (let ((?x23847 (* l_0_6_19 l_0_6_19)))
 (let ((?x23844 (* l_0_6_18 l_0_6_18)))
 (let ((?x23861 (- (- (- (* (- l_0_6_16) l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x23844) ?x23847)))
 (let ((?x23875 (+ (+ (+ (+ (+ (- (- ?x23861 ?x23862) ?x23864) ?x23866) ?x23868) ?x23870) ?x23872) ?x23874)))
 (= (+ ?x23875 ?x23876) 0.0))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x22525 (* ?x22524 l_0_6_72)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x22522 (* ?x22521 l_0_6_71)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x22519 (* ?x22518 l_0_6_70)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x22516 (* ?x22515 l_0_6_69)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x22513 (* ?x22512 l_0_6_68)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x22510 (* ?x22509 l_0_6_67)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x22487 (* ?x22486 l_0_6_27)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x22484 (* ?x22483 l_0_6_26)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x22481 (* ?x22480 l_0_6_25)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x22478 (* ?x22477 l_0_6_24)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22475 (* ?x22474 l_0_6_23)))
 (let ((?x23906 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_22) ?x22475) ?x22478) ?x22481) ?x22484)))
 (let ((?x23913 (+ (+ (+ (+ (+ (+ (- ?x23906 ?x22487) ?x22510) ?x22513) ?x22516) ?x22519) ?x22522) ?x22525)))
 (= ?x23913 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x23948 (* ?x22524 l_0_6_79)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x23946 (* ?x22521 l_0_6_78)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x23944 (* ?x22518 l_0_6_77)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x23942 (* ?x22515 l_0_6_76)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x23940 (* ?x22512 l_0_6_75)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x23938 (* ?x22509 l_0_6_74)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x23936 (* ?x22486 l_0_6_34)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x23934 (* ?x22483 l_0_6_33)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x23932 (* ?x22480 l_0_6_32)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23930 (* ?x22477 l_0_6_31)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23928 (* ?x22474 l_0_6_30)))
 (let ((?x23935 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_29) ?x23928) ?x23930) ?x23932) ?x23934)))
 (let ((?x23949 (+ (+ (+ (+ (+ (+ (- ?x23935 ?x23936) ?x23938) ?x23940) ?x23942) ?x23944) ?x23946) ?x23948)))
 (= ?x23949 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x24036 (* ?x22524 l_0_6_87)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x24034 (* ?x22521 l_0_6_86)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x24032 (* ?x22518 l_0_6_85)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x24030 (* ?x22515 l_0_6_84)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x24028 (* ?x22512 l_0_6_83)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x24026 (* ?x22509 l_0_6_82)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x24024 (* ?x22486 l_0_6_42)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x24022 (* ?x22483 l_0_6_41)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x24020 (* ?x22480 l_0_6_40)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x24018 (* ?x22477 l_0_6_39)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x24016 (* ?x22474 l_0_6_38)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x24014 (* ?x22467 l_0_6_37)))
 (let ((?x24012 (* l_0_6_156 l_0_6_156)))
 (let ((?x24010 (* l_0_6_155 l_0_6_155)))
 (let ((?x24008 (* l_0_6_154 l_0_6_154)))
 (let ((?x24006 (* l_0_6_153 l_0_6_153)))
 (let ((?x24004 (* l_0_6_152 l_0_6_152)))
 (let ((?x24002 (* l_0_6_151 l_0_6_151)))
 (let ((?x24000 (* l_0_6_111 l_0_6_111)))
 (let ((?x23998 (* l_0_6_110 l_0_6_110)))
 (let ((?x23987 (* l_0_6_109 l_0_6_109)))
 (let ((?x23984 (* l_0_6_108 l_0_6_108)))
 (let ((?x23986 (- (- (* (- l_0_6_106) l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x23984)))
 (let ((?x24009 (+ (+ (+ (+ (- (- (- ?x23986 ?x23987) ?x23998) ?x24000) ?x24002) ?x24004) ?x24006) ?x24008)))
 (let ((?x24013 (+ (+ ?x24009 ?x24010) ?x24012)))
 (let ((?x24027 (+ (- (- (- (- (- (- ?x24013 ?x24014) ?x24016) ?x24018) ?x24020) ?x24022) ?x24024) ?x24026)))
 (= (+ (+ (+ (+ (+ ?x24027 ?x24028) ?x24030) ?x24032) ?x24034) ?x24036) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24128 (* l_0_6_73 l_0_6_73)))
 (let ((?x24126 (* l_0_6_72 l_0_6_72)))
 (let ((?x24124 (* l_0_6_71 l_0_6_71)))
 (let ((?x24122 (* l_0_6_70 l_0_6_70)))
 (let ((?x24120 (* l_0_6_69 l_0_6_69)))
 (let ((?x24118 (* l_0_6_68 l_0_6_68)))
 (let ((?x24116 (* l_0_6_67 l_0_6_67)))
 (let ((?x24114 (* l_0_6_28 l_0_6_28)))
 (let ((?x24112 (* l_0_6_27 l_0_6_27)))
 (let ((?x24110 (* l_0_6_26 l_0_6_26)))
 (let ((?x24094 (* l_0_6_25 l_0_6_25)))
 (let ((?x24091 (* l_0_6_24 l_0_6_24)))
 (let ((?x24109 (- (- (- (* (- l_0_6_22) l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24091) ?x24094)))
 (let ((?x24123 (+ (+ (+ (+ (- (- (- ?x24109 ?x24110) ?x24112) ?x24114) ?x24116) ?x24118) ?x24120) ?x24122)))
 (= (+ (+ (+ ?x24123 ?x24124) ?x24126) ?x24128) 0.0))))))))))))))))
(assert
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24191 (* ?x24190 l_0_6_80)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24188 (* ?x24187 l_0_6_79)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24185 (* ?x24184 l_0_6_78)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24182 (* ?x24181 l_0_6_77)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24179 (* ?x24178 l_0_6_76)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24176 (* ?x24175 l_0_6_75)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24173 (* ?x24172 l_0_6_74)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24170 (* ?x24169 l_0_6_35)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24167 (* ?x24166 l_0_6_34)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24164 (* ?x24163 l_0_6_33)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24161 (* ?x24160 l_0_6_32)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24158 (* ?x23062 l_0_6_31)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x24156 (* ?x22833 l_0_6_30)))
 (let ((?x24165 (- (- (- (- (* (* (- 2.0) l_0_6_22) l_0_6_29) ?x24156) ?x24158) ?x24161) ?x24164)))
 (let ((?x24186 (+ (+ (+ (+ (+ (- (- ?x24165 ?x24167) ?x24170) ?x24173) ?x24176) ?x24179) ?x24182) ?x24185)))
 (= (+ (+ ?x24186 ?x24188) ?x24191) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24249 (* ?x24190 l_0_6_88)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24247 (* ?x24187 l_0_6_87)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24245 (* ?x24184 l_0_6_86)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24243 (* ?x24181 l_0_6_85)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24241 (* ?x24178 l_0_6_84)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24239 (* ?x24175 l_0_6_83)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24237 (* ?x24172 l_0_6_82)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24235 (* ?x24169 l_0_6_43)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24233 (* ?x24166 l_0_6_42)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24231 (* ?x24163 l_0_6_41)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24219 (* ?x24160 l_0_6_40)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24215 (* ?x23062 l_0_6_39)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x6138 (* ?x22833 l_0_6_38)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x6141 (* ?x23337 l_0_6_37)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x22647 (* ?x22646 l_0_6_162)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x22644 (* ?x22643 l_0_6_161)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x22641 (* ?x22640 l_0_6_160)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x22638 (* ?x22637 l_0_6_159)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x22635 (* ?x22634 l_0_6_158)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x22632 (* ?x22631 l_0_6_157)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x22629 (* ?x22628 l_0_6_117)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x22626 (* ?x22625 l_0_6_116)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x22623 (* ?x22622 l_0_6_115)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x22620 (* ?x22619 l_0_6_114)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22617 (* ?x22616 l_0_6_113)))
 (let ((?x22757 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_112) ?x22617) ?x22620) ?x22623) ?x22626)))
 (let ((?x22764 (+ (+ (+ (+ (+ (+ (- ?x22757 ?x22629) ?x22632) ?x22635) ?x22638) ?x22641) ?x22644) ?x22647)))
 (let ((?x24236 (- (- (- (- (- (- (- ?x22764 ?x6141) ?x6138) ?x24215) ?x24219) ?x24231) ?x24233) ?x24235)))
 (let ((?x24250 (+ (+ (+ (+ (+ (+ (+ ?x24236 ?x24237) ?x24239) ?x24241) ?x24243) ?x24245) ?x24247) ?x24249)))
 (= ?x24250 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24318 (* l_0_6_81 l_0_6_81)))
 (let ((?x24316 (* l_0_6_80 l_0_6_80)))
 (let ((?x24314 (* l_0_6_79 l_0_6_79)))
 (let ((?x24312 (* l_0_6_78 l_0_6_78)))
 (let ((?x24310 (* l_0_6_77 l_0_6_77)))
 (let ((?x24308 (* l_0_6_76 l_0_6_76)))
 (let ((?x24306 (* l_0_6_75 l_0_6_75)))
 (let ((?x24304 (* l_0_6_74 l_0_6_74)))
 (let ((?x24302 (* l_0_6_36 l_0_6_36)))
 (let ((?x24300 (* l_0_6_35 l_0_6_35)))
 (let ((?x24298 (* l_0_6_34 l_0_6_34)))
 (let ((?x24296 (* l_0_6_33 l_0_6_33)))
 (let ((?x24294 (* l_0_6_32 l_0_6_32)))
 (let ((?x24292 (* l_0_6_31 l_0_6_31)))
 (let ((?x24295 (- (- (- (* (- l_0_6_29) l_0_6_29) (* l_0_6_30 l_0_6_30)) ?x24292) ?x24294)))
 (let ((?x24309 (+ (+ (+ (- (- (- (- ?x24295 ?x24296) ?x24298) ?x24300) ?x24302) ?x24304) ?x24306) ?x24308)))
 (= (+ (+ (+ (+ (+ ?x24309 ?x24310) ?x24312) ?x24314) ?x24316) ?x24318) 0.0))))))))))))))))))
(assert
 (let ((?x24409 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24406 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24403 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24400 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24397 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24394 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24391 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24388 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24385 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24382 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24379 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24376 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24373 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x24370 (* ?x23100 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x24368 (* ?x23091 l_0_6_38)))
 (let ((?x23385 (* 2.0 l_0_6_29)))
 (let ((?x24366 (* ?x23385 l_0_6_37)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24364 (* ?x22646 l_0_6_169)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24362 (* ?x22643 l_0_6_168)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24360 (* ?x22640 l_0_6_167)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24358 (* ?x22637 l_0_6_166)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24356 (* ?x22634 l_0_6_165)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24354 (* ?x22631 l_0_6_164)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24352 (* ?x22628 l_0_6_124)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24350 (* ?x22625 l_0_6_123)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24348 (* ?x22622 l_0_6_122)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24346 (* ?x22619 l_0_6_121)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24344 (* ?x22616 l_0_6_120)))
 (let ((?x24351 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_119) ?x24344) ?x24346) ?x24348) ?x24350)))
 (let ((?x24365 (+ (+ (+ (+ (+ (+ (- ?x24351 ?x24352) ?x24354) ?x24356) ?x24358) ?x24360) ?x24362) ?x24364)))
 (let ((?x24383 (- (- (- (- (- (- (- ?x24365 ?x24366) ?x24368) ?x24370) ?x24373) ?x24376) ?x24379) ?x24382)))
 (let ((?x24404 (+ (+ (+ (+ (+ (+ (- ?x24383 ?x24385) ?x24388) ?x24391) ?x24394) ?x24397) ?x24400) ?x24403)))
 (= (+ (+ ?x24404 ?x24406) ?x24409) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24553 (* l_0_6_90 l_0_6_90)))
 (let ((?x24551 (* l_0_6_89 l_0_6_89)))
 (let ((?x24549 (* l_0_6_88 l_0_6_88)))
 (let ((?x24547 (* l_0_6_87 l_0_6_87)))
 (let ((?x24545 (* l_0_6_86 l_0_6_86)))
 (let ((?x24543 (* l_0_6_85 l_0_6_85)))
 (let ((?x24541 (* l_0_6_84 l_0_6_84)))
 (let ((?x24539 (* l_0_6_83 l_0_6_83)))
 (let ((?x24537 (* l_0_6_82 l_0_6_82)))
 (let ((?x24535 (* l_0_6_45 l_0_6_45)))
 (let ((?x24533 (* l_0_6_44 l_0_6_44)))
 (let ((?x24531 (* l_0_6_43 l_0_6_43)))
 (let ((?x24529 (* l_0_6_42 l_0_6_42)))
 (let ((?x24527 (* l_0_6_41 l_0_6_41)))
 (let ((?x24525 (* l_0_6_40 l_0_6_40)))
 (let ((?x24523 (* l_0_6_39 l_0_6_39)))
 (let ((?x24521 (* l_0_6_38 l_0_6_38)))
 (let ((?x24519 (* l_0_6_37 l_0_6_37)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24517 (* ?x22646 l_0_6_177)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24515 (* ?x22643 l_0_6_176)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24513 (* ?x22640 l_0_6_175)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24511 (* ?x22637 l_0_6_174)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24509 (* ?x22634 l_0_6_173)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24507 (* ?x22631 l_0_6_172)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24505 (* ?x22628 l_0_6_132)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24486 (* ?x22625 l_0_6_131)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24482 (* ?x22622 l_0_6_130)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24478 (* ?x22619 l_0_6_129)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24474 (* ?x22616 l_0_6_128)))
 (let ((?x24487 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_127) ?x24474) ?x24478) ?x24482) ?x24486)))
 (let ((?x24518 (+ (+ (+ (+ (+ (+ (- ?x24487 ?x24505) ?x24507) ?x24509) ?x24511) ?x24513) ?x24515) ?x24517)))
 (let ((?x24532 (- (- (- (- (- (- (- ?x24518 ?x24519) ?x24521) ?x24523) ?x24525) ?x24527) ?x24529) ?x24531)))
 (let ((?x24546 (+ (+ (+ (+ (+ (- (- ?x24532 ?x24533) ?x24535) ?x24537) ?x24539) ?x24541) ?x24543) ?x24545)))
 (= (+ (+ (+ (+ ?x24546 ?x24547) ?x24549) ?x24551) ?x24553) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22461 (* ?x22460 l_0_6_47)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x24635 (* ?x3708 l_0_6_146)))
 (let ((?x6596 (* 2.0 l_0_6_101)))
 (let ((?x24633 (* ?x6596 l_0_6_91)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22459 (* ?x22458 l_0_6_2)))
 (= (+ (+ (- ?x22459 ?x24633) ?x24635) ?x22461) 0.0))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23257 (* ?x23256 l_0_6_59)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23254 (* ?x23253 l_0_6_58)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23251 (* ?x23250 l_0_6_57)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23248 (* ?x23247 l_0_6_56)))
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22507 (* ?x22460 l_0_6_49)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x24667 (* ?x24666 l_0_6_239)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x24664 (* ?x24663 l_0_6_238)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x24661 (* ?x24660 l_0_6_237)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x24658 (* ?x24657 l_0_6_236)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23239 (* ?x22997 l_0_6_9)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23237 (* ?x22791 l_0_6_8)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x23235 (* ?x23234 l_0_6_7)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22465 (* ?x22458 l_0_6_4)))
 (let ((?x24656 (+ (+ (+ (+ ?x22465 (* (* 2.0 l_0_6_10) l_0_6_14)) ?x23235) ?x23237) ?x23239)))
 (let ((?x24671 (- (- (+ (- (- (- (- ?x24656 ?x24658) ?x24661) ?x24664) ?x24667) ?x22507) ?x23248) ?x23251)))
 (= (- (- ?x24671 ?x23254) ?x23257) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22573 (* ?x22460 l_0_6_52)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_7) ?x22573) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22579 (* ?x22460 l_0_6_56)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_11) ?x22579) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22589 (* ?x22460 l_0_6_61)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_16) ?x22589) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22599 (* ?x22460 l_0_6_67)))
 (= (+ (* (* (- 2.0) l_0_6_1) l_0_6_22) ?x22599) 0.0))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22655 (* ?x22460 l_0_6_74)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x24667 (* ?x24666 l_0_6_239)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x24664 (* ?x24663 l_0_6_238)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x24661 (* ?x24660 l_0_6_237)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x24658 (* ?x24657 l_0_6_236)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x24694 (* ?x23460 l_0_6_149)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x24692 (* ?x23457 l_0_6_148)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x24690 (* ?x23454 l_0_6_147)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x24688 (* ?x23451 l_0_6_146)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x4791 (* ?x23729 l_0_6_99)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6742 (* ?x23724 l_0_6_98)))
 (let ((?x6596 (* 2.0 l_0_6_101)))
 (let ((?x5148 (* ?x6596 l_0_6_97)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x22607 (* ?x22458 l_0_6_29)))
 (let ((?x6719 (+ (+ (+ (+ ?x22607 (* (* 2.0 l_0_6_100) l_0_6_104)) ?x5148) ?x6742) ?x4791)))
 (let ((?x24698 (+ (+ (+ (- (- (- (- ?x6719 ?x24688) ?x24690) ?x24692) ?x24694) ?x24658) ?x24661) ?x24664)))
 (= (+ (+ ?x24698 ?x24667) ?x22655) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22695 (* ?x22460 l_0_6_82)))
 (let ((?x22458 (* (- 2.0) l_0_6_1)))
 (let ((?x3710 (* ?x22458 l_0_6_37)))
 (= (+ ?x3710 ?x22695) 0.0))))))
(assert
 (let ((?x22715 (* l_0_6_48 l_0_6_48)))
 (let ((?x22713 (* l_0_6_47 l_0_6_47)))
 (let ((?x22711 (* l_0_6_3 l_0_6_3)))
 (let ((?x22719 (* l_0_6_2 l_0_6_2)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x24716 (* ?x22881 l_0_6_147)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x6805 (* ?x22878 l_0_6_146)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6807 (* ?x23724 l_0_6_93)))
 (let ((?x24717 (+ (+ (- (* (* (- 2.0) l_0_6_101) l_0_6_92) ?x6807) ?x6805) ?x24716)))
 (= (+ (+ (- (- ?x24717 ?x22719) ?x22711) ?x22713) ?x22715) 0.0)))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22734 (* ?x22733 l_0_6_50)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22731 (* ?x22730 l_0_6_49)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22728 (* ?x22727 l_0_6_5)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24742 (* ?x22765 l_0_6_4)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x24740 (* ?x23144 l_0_6_148)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x24738 (* ?x23141 l_0_6_147)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x24736 (* ?x23138 l_0_6_146)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24734 (* ?x23729 l_0_6_96)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6843 (* ?x23724 l_0_6_95)))
 (let ((?x24739 (+ (+ (- (- (* (* (- 2.0) l_0_6_101) l_0_6_94) ?x6843) ?x24734) ?x24736) ?x24738)))
 (let ((?x24741 (+ ?x24739 ?x24740)))
 (= (+ (+ (- (- ?x24741 ?x24742) ?x22728) ?x22731) ?x22734) 0.0))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22772 (* ?x22733 l_0_6_53)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22770 (* ?x22730 l_0_6_52)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22768 (* ?x22727 l_0_6_8)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22766 (* ?x22765 l_0_6_7)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x24694 (* ?x23460 l_0_6_149)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x24692 (* ?x23457 l_0_6_148)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x24690 (* ?x23454 l_0_6_147)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x24688 (* ?x23451 l_0_6_146)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x4791 (* ?x23729 l_0_6_99)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6742 (* ?x23724 l_0_6_98)))
 (let ((?x6596 (* 2.0 l_0_6_101)))
 (let ((?x5148 (* ?x6596 l_0_6_97)))
 (let ((?x24773 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_104) ?x5148) ?x6742) ?x4791) ?x24688)))
 (let ((?x24776 (+ (+ (+ ?x24773 ?x24690) ?x24692) ?x24694)))
 (= (+ (+ (- (- ?x24776 ?x22766) ?x22768) ?x22770) ?x22772) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22796 (* ?x22733 l_0_6_57)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22794 (* ?x22730 l_0_6_56)))
 (let ((?x24804 (* l_0_6_150 l_0_6_150)))
 (let ((?x24802 (* l_0_6_149 l_0_6_149)))
 (let ((?x24800 (* l_0_6_148 l_0_6_148)))
 (let ((?x24798 (* l_0_6_147 l_0_6_147)))
 (let ((?x24796 (* l_0_6_146 l_0_6_146)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22792 (* ?x22791 l_0_6_3)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x24793 (* ?x23234 l_0_6_2)))
 (let ((?x24791 (* l_0_6_105 l_0_6_105)))
 (let ((?x6897 (* l_0_6_104 l_0_6_104)))
 (let ((?x6898 (* l_0_6_103 l_0_6_103)))
 (let ((?x6896 (- (- (* (- l_0_6_101) l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x6898)))
 (let ((?x24792 (- (- ?x6896 ?x6897) ?x24791)))
 (let ((?x24805 (+ (+ (+ (+ (+ (- (- ?x24792 ?x24793) ?x22792) ?x24796) ?x24798) ?x24800) ?x24802) ?x24804)))
 (= (+ (+ ?x24805 ?x22794) ?x22796) 0.0)))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22817 (* ?x22733 l_0_6_62)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22815 (* ?x22730 l_0_6_61)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22813 (* ?x22474 l_0_6_3)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x24814 (* ?x22467 l_0_6_2)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x23769 (* ?x23768 l_0_6_155)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x23764 (* ?x23763 l_0_6_154)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x23761 (* ?x23760 l_0_6_153)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x23758 (* ?x23757 l_0_6_152)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x23755 (* ?x23754 l_0_6_151)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x23744 (* ?x23743 l_0_6_110)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x23741 (* ?x23740 l_0_6_109)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x23738 (* ?x23729 l_0_6_108)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x23726 (* ?x23724 l_0_6_107)))
 (let ((?x23745 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_106) ?x23726) ?x23738) ?x23741) ?x23744)))
 (let ((?x24816 (- (- (+ (+ (+ (+ (+ ?x23745 ?x23755) ?x23758) ?x23761) ?x23764) ?x23769) ?x24814) ?x22813)))
 (= (+ (+ ?x24816 ?x22815) ?x22817) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22838 (* ?x22733 l_0_6_68)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22836 (* ?x22730 l_0_6_67)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x22834 (* ?x22833 l_0_6_3)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24842 (* ?x22765 l_0_6_22)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24840 (* ?x23768 l_0_6_161)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24838 (* ?x23763 l_0_6_160)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24836 (* ?x23760 l_0_6_159)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24834 (* ?x23757 l_0_6_158)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24832 (* ?x23754 l_0_6_157)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24830 (* ?x23743 l_0_6_116)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24828 (* ?x23740 l_0_6_115)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24826 (* ?x23729 l_0_6_114)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6990 (* ?x23724 l_0_6_113)))
 (let ((?x24831 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_112) ?x6990) ?x24826) ?x24828) ?x24830)))
 (let ((?x24841 (+ (+ (+ (+ (+ ?x24831 ?x24832) ?x24834) ?x24836) ?x24838) ?x24840)))
 (= (+ (+ (- (- ?x24841 ?x24842) ?x22834) ?x22836) ?x22838) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22857 (* ?x22733 l_0_6_75)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22855 (* ?x22730 l_0_6_74)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22848 (* ?x22727 l_0_6_30)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24887 (* ?x22765 l_0_6_29)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24885 (* ?x23768 l_0_6_168)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24883 (* ?x23763 l_0_6_167)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24881 (* ?x23760 l_0_6_166)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24879 (* ?x23757 l_0_6_165)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24877 (* ?x23754 l_0_6_164)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24875 (* ?x23743 l_0_6_123)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24873 (* ?x23740 l_0_6_122)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24871 (* ?x23729 l_0_6_121)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24869 (* ?x23724 l_0_6_120)))
 (let ((?x24876 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_119) ?x24869) ?x24871) ?x24873) ?x24875)))
 (let ((?x24886 (+ (+ (+ (+ (+ ?x24876 ?x24877) ?x24879) ?x24881) ?x24883) ?x24885)))
 (= (+ (+ (- (- ?x24886 ?x24887) ?x22848) ?x22855) ?x22857) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22890 (* ?x22733 l_0_6_83)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22888 (* ?x22730 l_0_6_82)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22886 (* ?x22727 l_0_6_38)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22884 (* ?x22765 l_0_6_37)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24946 (* ?x23768 l_0_6_176)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24944 (* ?x23763 l_0_6_175)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24942 (* ?x23760 l_0_6_174)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24940 (* ?x23757 l_0_6_173)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24938 (* ?x23754 l_0_6_172)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24936 (* ?x23743 l_0_6_131)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24934 (* ?x23740 l_0_6_130)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24932 (* ?x23729 l_0_6_129)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24930 (* ?x23724 l_0_6_128)))
 (let ((?x24937 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_127) ?x24930) ?x24932) ?x24934) ?x24936)))
 (let ((?x24947 (+ (+ (+ (+ (+ ?x24937 ?x24938) ?x24940) ?x24942) ?x24944) ?x24946)))
 (= (+ (+ (- (- ?x24947 ?x22884) ?x22886) ?x22888) ?x22890) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x22933 (* l_0_6_6 l_0_6_6)))
 (let ((?x22931 (* l_0_6_51 l_0_6_51)))
 (let ((?x22929 (* l_0_6_50 l_0_6_50)))
 (let ((?x22927 (* l_0_6_5 l_0_6_5)))
 (let ((?x22930 (+ (- (+ (* (- l_0_6_4) l_0_6_4) (* l_0_6_49 l_0_6_49)) ?x22927) ?x22929)))
 (= (- (+ ?x22930 ?x22931) ?x22933) 0.0)))))))
(assert
 (let ((?x22963 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x22960 (* ?x22959 l_0_6_54)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x22957 (* ?x22956 l_0_6_53)))
 (let ((?x22954 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x22951 (* ?x22950 l_0_6_52)))
 (let ((?x22961 (+ (+ (- (+ (* (* (- 2.0) l_0_6_4) l_0_6_7) ?x22951) ?x22954) ?x22957) ?x22960)))
 (= (- ?x22961 ?x22963) 0.0)))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23004 (* ?x22959 l_0_6_58)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23002 (* ?x22956 l_0_6_57)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23000 (* ?x22950 l_0_6_56)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x22998 (* ?x22997 l_0_6_6)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22995 (* ?x22791 l_0_6_5)))
 (let ((?x23003 (+ (+ (- (- (* (* (- 2.0) l_0_6_11) l_0_6_4) ?x22995) ?x22998) ?x23000) ?x23002)))
 (= (+ ?x23003 ?x23004) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23039 (* ?x22959 l_0_6_63)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23037 (* ?x22956 l_0_6_62)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23035 (* ?x22950 l_0_6_61)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23027 (* ?x22477 l_0_6_6)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23024 (* ?x22474 l_0_6_5)))
 (let ((?x23038 (+ (+ (- (- (* (* (- 2.0) l_0_6_16) l_0_6_4) ?x23024) ?x23027) ?x23035) ?x23037)))
 (= (+ ?x23038 ?x23039) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23069 (* ?x22959 l_0_6_69)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23067 (* ?x22956 l_0_6_68)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23065 (* ?x22950 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23063 (* ?x23062 l_0_6_6)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23054 (* ?x22833 l_0_6_5)))
 (let ((?x23068 (+ (+ (- (- (* (* (- 2.0) l_0_6_22) l_0_6_4) ?x23054) ?x23063) ?x23065) ?x23067)))
 (= (+ ?x23068 ?x23069) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23107 (* ?x22959 l_0_6_76)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23105 (* ?x22956 l_0_6_75)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23103 (* ?x22950 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23101 (* ?x23100 l_0_6_6)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23092 (* ?x23091 l_0_6_5)))
 (let ((?x23106 (+ (+ (- (- (* (* (- 2.0) l_0_6_29) l_0_6_4) ?x23092) ?x23101) ?x23103) ?x23105)))
 (= (+ ?x23106 ?x23107) 0.0)))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23160 (* ?x22959 l_0_6_84)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23158 (* ?x22956 l_0_6_83)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23156 (* ?x22950 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23154 (* ?x23153 l_0_6_6)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23151 (* ?x23150 l_0_6_5)))
 (let ((?x24986 (+ (+ (- (- (* (* (- 2.0) l_0_6_37) l_0_6_4) ?x23151) ?x23154) ?x23156) ?x23158)))
 (= (+ ?x24986 ?x23160) 0.0)))))))))))))
(assert
 (let ((?x23215 (* l_0_6_9 l_0_6_9)))
 (let ((?x23213 (* l_0_6_8 l_0_6_8)))
 (let ((?x23211 (* l_0_6_7 l_0_6_7)))
 (let ((?x23209 (* l_0_6_55 l_0_6_55)))
 (let ((?x23207 (* l_0_6_54 l_0_6_54)))
 (let ((?x23205 (* l_0_6_53 l_0_6_53)))
 (let ((?x23208 (+ (+ (+ (* (- l_0_6_10) l_0_6_10) (* l_0_6_52 l_0_6_52)) ?x23205) ?x23207)))
 (= (- (- (- (+ ?x23208 ?x23209) ?x23211) ?x23213) ?x23215) 0.0)))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23257 (* ?x23256 l_0_6_59)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23254 (* ?x23253 l_0_6_58)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23251 (* ?x23250 l_0_6_57)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23248 (* ?x23247 l_0_6_56)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23239 (* ?x22997 l_0_6_9)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23237 (* ?x22791 l_0_6_8)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x23235 (* ?x23234 l_0_6_7)))
 (let ((?x23240 (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_14) ?x23235) ?x23237) ?x23239)))
 (= (+ (+ (+ (+ ?x23240 ?x23248) ?x23251) ?x23254) ?x23257) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23311 (* ?x23256 l_0_6_64)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23309 (* ?x23253 l_0_6_63)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23307 (* ?x23250 l_0_6_62)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23305 (* ?x23247 l_0_6_61)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23303 (* ?x22477 l_0_6_9)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23301 (* ?x22474 l_0_6_8)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x23299 (* ?x22467 l_0_6_7)))
 (let ((?x23306 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_19) ?x23299) ?x23301) ?x23303) ?x23305)))
 (= (+ (+ (+ ?x23306 ?x23307) ?x23309) ?x23311) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23359 (* ?x23256 l_0_6_70)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23357 (* ?x23253 l_0_6_69)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23355 (* ?x23250 l_0_6_68)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23353 (* ?x23247 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23351 (* ?x23062 l_0_6_9)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23342 (* ?x22833 l_0_6_8)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x23339 (* ?x23337 l_0_6_7)))
 (let ((?x23354 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_25) ?x23339) ?x23342) ?x23351) ?x23353)))
 (= (+ (+ (+ ?x23354 ?x23355) ?x23357) ?x23359) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23407 (* ?x23256 l_0_6_77)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23405 (* ?x23253 l_0_6_76)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23403 (* ?x23250 l_0_6_75)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23401 (* ?x23247 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23399 (* ?x23100 l_0_6_9)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23390 (* ?x23091 l_0_6_8)))
 (let ((?x23385 (* 2.0 l_0_6_29)))
 (let ((?x23387 (* ?x23385 l_0_6_7)))
 (let ((?x23402 (+ (- (- (- (* (* (- 2.0) l_0_6_10) l_0_6_32) ?x23387) ?x23390) ?x23399) ?x23401)))
 (= (+ (+ (+ ?x23402 ?x23403) ?x23405) ?x23407) 0.0)))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23475 (* ?x23256 l_0_6_85)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23473 (* ?x23253 l_0_6_84)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23471 (* ?x23250 l_0_6_83)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23469 (* ?x23247 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23467 (* ?x23153 l_0_6_9)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23465 (* ?x23150 l_0_6_8)))
 (let ((?x23147 (* 2.0 l_0_6_37)))
 (let ((?x23463 (* ?x23147 l_0_6_7)))
 (let ((?x23232 (* (- 2.0) l_0_6_10)))
 (let ((?x23431 (* ?x23232 l_0_6_40)))
 (let ((?x25011 (+ (+ (+ (+ (- (- (- ?x23431 ?x23463) ?x23465) ?x23467) ?x23469) ?x23471) ?x23473) ?x23475)))
 (= ?x25011 0.0)))))))))))))))))))
(assert
 (let ((?x23547 (* l_0_6_60 l_0_6_60)))
 (let ((?x23545 (* l_0_6_59 l_0_6_59)))
 (let ((?x23543 (* l_0_6_58 l_0_6_58)))
 (let ((?x23541 (* l_0_6_57 l_0_6_57)))
 (let ((?x23539 (* l_0_6_56 l_0_6_56)))
 (let ((?x23537 (* l_0_6_15 l_0_6_15)))
 (let ((?x23535 (* l_0_6_14 l_0_6_14)))
 (let ((?x23522 (* l_0_6_13 l_0_6_13)))
 (let ((?x23536 (- (- (- (* (- l_0_6_11) l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x23522) ?x23535)))
 (= (+ (+ (+ (+ (+ (- ?x23536 ?x23537) ?x23539) ?x23541) ?x23543) ?x23545) ?x23547) 0.0)))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23589 (* ?x23588 l_0_6_65)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23586 (* ?x23585 l_0_6_64)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23583 (* ?x23582 l_0_6_63)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23580 (* ?x23579 l_0_6_62)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23577 (* ?x23576 l_0_6_61)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23574 (* ?x23573 l_0_6_20)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23571 (* ?x23570 l_0_6_19)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23568 (* ?x22997 l_0_6_18)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23566 (* ?x22791 l_0_6_17)))
 (let ((?x23575 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_16) ?x23566) ?x23568) ?x23571) ?x23574)))
 (= (+ (+ (+ (+ (+ ?x23575 ?x23577) ?x23580) ?x23583) ?x23586) ?x23589) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23644 (* ?x23588 l_0_6_71)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23642 (* ?x23585 l_0_6_70)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23640 (* ?x23582 l_0_6_69)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23638 (* ?x23579 l_0_6_68)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23636 (* ?x23576 l_0_6_67)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23634 (* ?x23573 l_0_6_26)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23624 (* ?x23570 l_0_6_25)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23621 (* ?x22997 l_0_6_24)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23617 (* ?x22791 l_0_6_23)))
 (let ((?x23635 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_22) ?x23617) ?x23621) ?x23624) ?x23634)))
 (= (+ (+ (+ (+ (+ ?x23635 ?x23636) ?x23638) ?x23640) ?x23642) ?x23644) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23693 (* ?x23588 l_0_6_78)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23691 (* ?x23585 l_0_6_77)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23689 (* ?x23582 l_0_6_76)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23687 (* ?x23579 l_0_6_75)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23685 (* ?x23576 l_0_6_74)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23683 (* ?x23573 l_0_6_33)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23673 (* ?x23570 l_0_6_32)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23670 (* ?x22997 l_0_6_31)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x5413 (* ?x22791 l_0_6_30)))
 (let ((?x23684 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_29) ?x5413) ?x23670) ?x23673) ?x23683)))
 (= (+ (+ (+ (+ (+ ?x23684 ?x23685) ?x23687) ?x23689) ?x23691) ?x23693) 0.0)))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23779 (* ?x23588 l_0_6_86)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23777 (* ?x23585 l_0_6_85)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23775 (* ?x23582 l_0_6_84)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23773 (* ?x23579 l_0_6_83)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23771 (* ?x23576 l_0_6_82)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23766 (* ?x23573 l_0_6_41)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23752 (* ?x23570 l_0_6_40)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23750 (* ?x22997 l_0_6_39)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23748 (* ?x22791 l_0_6_38)))
 (let ((?x25029 (- (- (- (- (* (* (- 2.0) l_0_6_11) l_0_6_37) ?x23748) ?x23750) ?x23752) ?x23766)))
 (= (+ (+ (+ (+ (+ ?x25029 ?x23771) ?x23773) ?x23775) ?x23777) ?x23779) 0.0)))))))))))))))))))))
(assert
 (let ((?x23876 (* l_0_6_66 l_0_6_66)))
 (let ((?x23874 (* l_0_6_65 l_0_6_65)))
 (let ((?x23872 (* l_0_6_64 l_0_6_64)))
 (let ((?x23870 (* l_0_6_63 l_0_6_63)))
 (let ((?x23868 (* l_0_6_62 l_0_6_62)))
 (let ((?x23866 (* l_0_6_61 l_0_6_61)))
 (let ((?x23864 (* l_0_6_21 l_0_6_21)))
 (let ((?x23862 (* l_0_6_20 l_0_6_20)))
 (let ((?x23847 (* l_0_6_19 l_0_6_19)))
 (let ((?x23844 (* l_0_6_18 l_0_6_18)))
 (let ((?x23861 (- (- (- (* (- l_0_6_16) l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x23844) ?x23847)))
 (let ((?x23875 (+ (+ (+ (+ (+ (- (- ?x23861 ?x23862) ?x23864) ?x23866) ?x23868) ?x23870) ?x23872) ?x23874)))
 (= (+ ?x23875 ?x23876) 0.0))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x23948 (* ?x22524 l_0_6_79)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x23946 (* ?x22521 l_0_6_78)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x23944 (* ?x22518 l_0_6_77)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x23942 (* ?x22515 l_0_6_76)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x23940 (* ?x22512 l_0_6_75)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x23938 (* ?x22509 l_0_6_74)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x23936 (* ?x22486 l_0_6_34)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x23934 (* ?x22483 l_0_6_33)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x23932 (* ?x22480 l_0_6_32)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23930 (* ?x22477 l_0_6_31)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23928 (* ?x22474 l_0_6_30)))
 (let ((?x23935 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_29) ?x23928) ?x23930) ?x23932) ?x23934)))
 (let ((?x23949 (+ (+ (+ (+ (+ (+ (- ?x23935 ?x23936) ?x23938) ?x23940) ?x23942) ?x23944) ?x23946) ?x23948)))
 (= ?x23949 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x24036 (* ?x22524 l_0_6_87)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x24034 (* ?x22521 l_0_6_86)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x24032 (* ?x22518 l_0_6_85)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x24030 (* ?x22515 l_0_6_84)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x24028 (* ?x22512 l_0_6_83)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x24026 (* ?x22509 l_0_6_82)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x24024 (* ?x22486 l_0_6_42)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x24022 (* ?x22483 l_0_6_41)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x24020 (* ?x22480 l_0_6_40)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x24018 (* ?x22477 l_0_6_39)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x24016 (* ?x22474 l_0_6_38)))
 (let ((?x7227 (- (- (- (- (* (* (- 2.0) l_0_6_16) l_0_6_37) ?x24016) ?x24018) ?x24020) ?x24022)))
 (let ((?x25058 (+ (+ (+ (+ (+ (+ (- ?x7227 ?x24024) ?x24026) ?x24028) ?x24030) ?x24032) ?x24034) ?x24036)))
 (= ?x25058 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24128 (* l_0_6_73 l_0_6_73)))
 (let ((?x24126 (* l_0_6_72 l_0_6_72)))
 (let ((?x24124 (* l_0_6_71 l_0_6_71)))
 (let ((?x24122 (* l_0_6_70 l_0_6_70)))
 (let ((?x24120 (* l_0_6_69 l_0_6_69)))
 (let ((?x24118 (* l_0_6_68 l_0_6_68)))
 (let ((?x24116 (* l_0_6_67 l_0_6_67)))
 (let ((?x24114 (* l_0_6_28 l_0_6_28)))
 (let ((?x24112 (* l_0_6_27 l_0_6_27)))
 (let ((?x24110 (* l_0_6_26 l_0_6_26)))
 (let ((?x24094 (* l_0_6_25 l_0_6_25)))
 (let ((?x24091 (* l_0_6_24 l_0_6_24)))
 (let ((?x24109 (- (- (- (* (- l_0_6_22) l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24091) ?x24094)))
 (let ((?x24123 (+ (+ (+ (+ (- (- (- ?x24109 ?x24110) ?x24112) ?x24114) ?x24116) ?x24118) ?x24120) ?x24122)))
 (= (+ (+ (+ ?x24123 ?x24124) ?x24126) ?x24128) 0.0))))))))))))))))
(assert
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24191 (* ?x24190 l_0_6_80)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24188 (* ?x24187 l_0_6_79)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24185 (* ?x24184 l_0_6_78)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24182 (* ?x24181 l_0_6_77)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24179 (* ?x24178 l_0_6_76)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24176 (* ?x24175 l_0_6_75)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24173 (* ?x24172 l_0_6_74)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24170 (* ?x24169 l_0_6_35)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24167 (* ?x24166 l_0_6_34)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24164 (* ?x24163 l_0_6_33)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24161 (* ?x24160 l_0_6_32)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24158 (* ?x23062 l_0_6_31)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x24156 (* ?x22833 l_0_6_30)))
 (let ((?x24165 (- (- (- (- (* (* (- 2.0) l_0_6_22) l_0_6_29) ?x24156) ?x24158) ?x24161) ?x24164)))
 (let ((?x24186 (+ (+ (+ (+ (+ (- (- ?x24165 ?x24167) ?x24170) ?x24173) ?x24176) ?x24179) ?x24182) ?x24185)))
 (= (+ (+ ?x24186 ?x24188) ?x24191) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24249 (* ?x24190 l_0_6_88)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24247 (* ?x24187 l_0_6_87)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24245 (* ?x24184 l_0_6_86)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24243 (* ?x24181 l_0_6_85)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24241 (* ?x24178 l_0_6_84)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24239 (* ?x24175 l_0_6_83)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24237 (* ?x24172 l_0_6_82)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24235 (* ?x24169 l_0_6_43)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24233 (* ?x24166 l_0_6_42)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24231 (* ?x24163 l_0_6_41)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24219 (* ?x24160 l_0_6_40)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24215 (* ?x23062 l_0_6_39)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x6138 (* ?x22833 l_0_6_38)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x6141 (* ?x23337 l_0_6_37)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x24694 (* ?x23460 l_0_6_149)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x24692 (* ?x23457 l_0_6_148)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x24690 (* ?x23454 l_0_6_147)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x24688 (* ?x23451 l_0_6_146)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x4791 (* ?x23729 l_0_6_99)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6742 (* ?x23724 l_0_6_98)))
 (let ((?x6596 (* 2.0 l_0_6_101)))
 (let ((?x5148 (* ?x6596 l_0_6_97)))
 (let ((?x24773 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_104) ?x5148) ?x6742) ?x4791) ?x24688)))
 (let ((?x24776 (+ (+ (+ ?x24773 ?x24690) ?x24692) ?x24694)))
 (let ((?x7274 (- (- (- (- (- (- (- ?x24776 ?x6141) ?x6138) ?x24215) ?x24219) ?x24231) ?x24233) ?x24235)))
 (let ((?x25072 (+ (+ (+ (+ (+ (+ (+ ?x7274 ?x24237) ?x24239) ?x24241) ?x24243) ?x24245) ?x24247) ?x24249)))
 (= ?x25072 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24318 (* l_0_6_81 l_0_6_81)))
 (let ((?x24316 (* l_0_6_80 l_0_6_80)))
 (let ((?x24314 (* l_0_6_79 l_0_6_79)))
 (let ((?x24312 (* l_0_6_78 l_0_6_78)))
 (let ((?x24310 (* l_0_6_77 l_0_6_77)))
 (let ((?x24308 (* l_0_6_76 l_0_6_76)))
 (let ((?x24306 (* l_0_6_75 l_0_6_75)))
 (let ((?x24304 (* l_0_6_74 l_0_6_74)))
 (let ((?x24302 (* l_0_6_36 l_0_6_36)))
 (let ((?x24300 (* l_0_6_35 l_0_6_35)))
 (let ((?x24298 (* l_0_6_34 l_0_6_34)))
 (let ((?x24296 (* l_0_6_33 l_0_6_33)))
 (let ((?x24294 (* l_0_6_32 l_0_6_32)))
 (let ((?x24292 (* l_0_6_31 l_0_6_31)))
 (let ((?x24295 (- (- (- (* (- l_0_6_29) l_0_6_29) (* l_0_6_30 l_0_6_30)) ?x24292) ?x24294)))
 (let ((?x24309 (+ (+ (+ (- (- (- (- ?x24295 ?x24296) ?x24298) ?x24300) ?x24302) ?x24304) ?x24306) ?x24308)))
 (= (+ (+ (+ (+ (+ ?x24309 ?x24310) ?x24312) ?x24314) ?x24316) ?x24318) 0.0))))))))))))))))))
(assert
 (let ((?x24409 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24406 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24403 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24400 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24397 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24394 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24391 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24388 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24385 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24382 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24379 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24376 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24373 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x24370 (* ?x23100 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x24368 (* ?x23091 l_0_6_38)))
 (let ((?x7288 (- (- (- (- (* (* (- 2.0) l_0_6_29) l_0_6_37) ?x24368) ?x24370) ?x24373) ?x24376)))
 (let ((?x25094 (+ (+ (+ (+ (- (- (- ?x7288 ?x24379) ?x24382) ?x24385) ?x24388) ?x24391) ?x24394) ?x24397)))
 (= (+ (+ (+ (+ ?x25094 ?x24400) ?x24403) ?x24406) ?x24409) 0.0)))))))))))))))))))))
(assert
 (let ((?x24553 (* l_0_6_90 l_0_6_90)))
 (let ((?x24551 (* l_0_6_89 l_0_6_89)))
 (let ((?x24549 (* l_0_6_88 l_0_6_88)))
 (let ((?x24547 (* l_0_6_87 l_0_6_87)))
 (let ((?x24545 (* l_0_6_86 l_0_6_86)))
 (let ((?x24543 (* l_0_6_85 l_0_6_85)))
 (let ((?x24541 (* l_0_6_84 l_0_6_84)))
 (let ((?x24539 (* l_0_6_83 l_0_6_83)))
 (let ((?x24537 (* l_0_6_82 l_0_6_82)))
 (let ((?x24535 (* l_0_6_45 l_0_6_45)))
 (let ((?x24533 (* l_0_6_44 l_0_6_44)))
 (let ((?x24531 (* l_0_6_43 l_0_6_43)))
 (let ((?x24529 (* l_0_6_42 l_0_6_42)))
 (let ((?x24527 (* l_0_6_41 l_0_6_41)))
 (let ((?x24525 (* l_0_6_40 l_0_6_40)))
 (let ((?x24523 (* l_0_6_39 l_0_6_39)))
 (let ((?x25108 (- (- (- (* (- l_0_6_37) l_0_6_37) (* l_0_6_38 l_0_6_38)) ?x24523) ?x24525)))
 (let ((?x25115 (+ (+ (- (- (- (- (- ?x25108 ?x24527) ?x24529) ?x24531) ?x24533) ?x24535) ?x24537) ?x24539)))
 (let ((?x25122 (+ (+ (+ (+ (+ (+ (+ ?x25115 ?x24541) ?x24543) ?x24545) ?x24547) ?x24549) ?x24551) ?x24553)))
 (= ?x25122 0.0)))))))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22461 (* ?x22460 l_0_6_47)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x7406 (* ?x7409 l_0_6_227)))
 (let ((?x7408 (- (* (* 2.0 l_0_6_1) l_0_6_2) (* (* 2.0 l_0_6_182) l_0_6_184))))
 (let ((?x7391 (- (- (- ?x7408 (* (* 2.0 l_0_6_183) l_0_6_185)) ?x7406) (* (* 2.0 l_0_6_272) l_0_6_274))))
 (let ((?x7375 (- (- ?x7391 (* (* 2.0 l_0_6_273) l_0_6_275)) (* (* 2.0 l_0_6_317) l_0_6_319))))
 (= (- (- ?x7375 (* (* 2.0 l_0_6_318) l_0_6_320)) ?x22461) 0.0)))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22507 (* ?x22460 l_0_6_49)))
 (let ((?x25165 (* l_0_6_321 l_0_6_321)))
 (let ((?x25163 (* l_0_6_320 l_0_6_320)))
 (let ((?x25161 (* l_0_6_319 l_0_6_319)))
 (let ((?x25159 (* l_0_6_276 l_0_6_276)))
 (let ((?x25157 (* l_0_6_275 l_0_6_275)))
 (let ((?x25155 (* l_0_6_274 l_0_6_274)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25153 (* ?x7409 l_0_6_229)))
 (let ((?x25146 (- (* (* 2.0 l_0_6_1) l_0_6_4) (* (* 1.0 l_0_6_184) l_0_6_184))))
 (let ((?x25152 (- (- ?x25146 (* (* 1.0 l_0_6_185) l_0_6_185)) (* (* 1.0 l_0_6_186) l_0_6_186))))
 (let ((?x25166 (- (- (- (- (- (- (- ?x25152 ?x25153) ?x25155) ?x25157) ?x25159) ?x25161) ?x25163) ?x25165)))
 (= (- ?x25166 ?x22507) 0.0)))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22573 (* ?x22460 l_0_6_52)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25198 (* ?x7409 l_0_6_232)))
 (let ((?x25191 (- (* (* 2.0 l_0_6_1) l_0_6_7) (* (* 2.0 l_0_6_184) l_0_6_187))))
 (let ((?x25197 (- (- ?x25191 (* (* 2.0 l_0_6_185) l_0_6_188)) (* (* 2.0 l_0_6_186) l_0_6_189))))
 (let ((?x25205 (- (- (- ?x25197 ?x25198) (* (* 2.0 l_0_6_274) l_0_6_277)) (* (* 2.0 l_0_6_275) l_0_6_278))))
 (let ((?x25211 (- (- ?x25205 (* (* 2.0 l_0_6_276) l_0_6_279)) (* (* 2.0 l_0_6_319) l_0_6_322))))
 (let ((?x25217 (- (- ?x25211 (* (* 2.0 l_0_6_320) l_0_6_323)) (* (* 2.0 l_0_6_321) l_0_6_324))))
 (= (- ?x25217 ?x22573) 0.0)))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22579 (* ?x22460 l_0_6_56)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25256 (* ?x7409 l_0_6_236)))
 (let ((?x25251 (- (* (* 2.0 l_0_6_1) l_0_6_11) (* (* 2.0 l_0_6_184) l_0_6_191))))
 (let ((?x25255 (- (- ?x25251 (* (* 2.0 l_0_6_185) l_0_6_192)) (* (* 2.0 l_0_6_186) l_0_6_193))))
 (let ((?x25261 (- (- (- ?x25255 ?x25256) (* (* 2.0 l_0_6_274) l_0_6_281)) (* (* 2.0 l_0_6_275) l_0_6_282))))
 (let ((?x25265 (- (- ?x25261 (* (* 2.0 l_0_6_276) l_0_6_283)) (* (* 2.0 l_0_6_319) l_0_6_326))))
 (let ((?x25269 (- (- ?x25265 (* (* 2.0 l_0_6_320) l_0_6_327)) (* (* 2.0 l_0_6_321) l_0_6_328))))
 (= (- ?x25269 ?x22579) 0.0)))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22589 (* ?x22460 l_0_6_61)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25305 (* ?x7409 l_0_6_241)))
 (let ((?x25300 (- (* (* 2.0 l_0_6_1) l_0_6_16) (* (* 2.0 l_0_6_184) l_0_6_196))))
 (let ((?x25304 (- (- ?x25300 (* (* 2.0 l_0_6_185) l_0_6_197)) (* (* 2.0 l_0_6_186) l_0_6_198))))
 (let ((?x25310 (- (- (- ?x25304 ?x25305) (* (* 2.0 l_0_6_274) l_0_6_286)) (* (* 2.0 l_0_6_275) l_0_6_287))))
 (let ((?x25314 (- (- ?x25310 (* (* 2.0 l_0_6_276) l_0_6_288)) (* (* 2.0 l_0_6_319) l_0_6_331))))
 (let ((?x25318 (- (- ?x25314 (* (* 2.0 l_0_6_320) l_0_6_332)) (* (* 2.0 l_0_6_321) l_0_6_333))))
 (= (- ?x25318 ?x22589) 0.0)))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22599 (* ?x22460 l_0_6_67)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25366 (* ?x7409 l_0_6_247)))
 (let ((?x25361 (- (* (* 2.0 l_0_6_1) l_0_6_22) (* (* 2.0 l_0_6_184) l_0_6_202))))
 (let ((?x25365 (- (- ?x25361 (* (* 2.0 l_0_6_185) l_0_6_203)) (* (* 2.0 l_0_6_186) l_0_6_204))))
 (let ((?x25371 (- (- (- ?x25365 ?x25366) (* (* 2.0 l_0_6_274) l_0_6_292)) (* (* 2.0 l_0_6_275) l_0_6_293))))
 (let ((?x25375 (- (- ?x25371 (* (* 2.0 l_0_6_276) l_0_6_294)) (* (* 2.0 l_0_6_319) l_0_6_337))))
 (let ((?x25379 (- (- ?x25375 (* (* 2.0 l_0_6_320) l_0_6_338)) (* (* 2.0 l_0_6_321) l_0_6_339))))
 (= (- ?x25379 ?x22599) 0.0)))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x25445 (* ?x25444 l_0_6_94)))
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22655 (* ?x22460 l_0_6_74)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25429 (* ?x7409 l_0_6_254)))
 (let ((?x25153 (* ?x7409 l_0_6_229)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x25420 (* ?x3708 l_0_6_139)))
 (let ((?x25423 (- (- (* (* 2.0 l_0_6_1) l_0_6_29) ?x25420) (* (* 2.0 l_0_6_184) l_0_6_209))))
 (let ((?x25427 (- (- ?x25423 (* (* 2.0 l_0_6_185) l_0_6_210)) (* (* 2.0 l_0_6_186) l_0_6_211))))
 (let ((?x25434 (- (- (- (+ ?x25427 ?x25153) ?x25429) (* (* 2.0 l_0_6_274) l_0_6_299)) (* (* 2.0 l_0_6_275) l_0_6_300))))
 (let ((?x25438 (- (- ?x25434 (* (* 2.0 l_0_6_276) l_0_6_301)) (* (* 2.0 l_0_6_319) l_0_6_344))))
 (let ((?x25442 (- (- ?x25438 (* (* 2.0 l_0_6_320) l_0_6_345)) (* (* 2.0 l_0_6_321) l_0_6_346))))
 (= (+ (- ?x25442 ?x22655) ?x25445) 0.0))))))))))))))))
(assert
 (let ((?x22460 (* 2.0 l_0_6_46)))
 (let ((?x22695 (* ?x22460 l_0_6_82)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25496 (* ?x7409 l_0_6_262)))
 (let ((?x25491 (- (* (* 2.0 l_0_6_1) l_0_6_37) (* (* 2.0 l_0_6_184) l_0_6_217))))
 (let ((?x25495 (- (- ?x25491 (* (* 2.0 l_0_6_185) l_0_6_218)) (* (* 2.0 l_0_6_186) l_0_6_219))))
 (let ((?x25501 (- (- (- ?x25495 ?x25496) (* (* 2.0 l_0_6_274) l_0_6_307)) (* (* 2.0 l_0_6_275) l_0_6_308))))
 (let ((?x25505 (- (- ?x25501 (* (* 2.0 l_0_6_276) l_0_6_309)) (* (* 2.0 l_0_6_319) l_0_6_352))))
 (let ((?x25509 (- (- ?x25505 (* (* 2.0 l_0_6_320) l_0_6_353)) (* (* 2.0 l_0_6_321) l_0_6_354))))
 (= (- ?x25509 ?x22695) 0.0)))))))))))
(assert
 (let ((?x22715 (* l_0_6_48 l_0_6_48)))
 (let ((?x22713 (* l_0_6_47 l_0_6_47)))
 (let ((?x22711 (* l_0_6_3 l_0_6_3)))
 (let ((?x25544 (* l_0_6_228 l_0_6_228)))
 (let ((?x25546 (+ (- (- (* l_0_6_2 l_0_6_2) (* l_0_6_227 l_0_6_227)) ?x25544) ?x22711)))
 (= (- (- ?x25546 ?x22713) ?x22715) 0.0)))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22734 (* ?x22733 l_0_6_50)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22731 (* ?x22730 l_0_6_49)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22728 (* ?x22727 l_0_6_5)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25565 (* ?x25564 l_0_6_230)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25562 (* ?x25561 l_0_6_229)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24742 (* ?x22765 l_0_6_4)))
 (= (- (- (+ (- (- ?x24742 ?x25562) ?x25565) ?x22728) ?x22731) ?x22734) 0.0))))))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x25445 (* ?x25444 l_0_6_94)))
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22772 (* ?x22733 l_0_6_53)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22770 (* ?x22730 l_0_6_52)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22768 (* ?x22727 l_0_6_8)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25585 (* ?x25564 l_0_6_233)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25583 (* ?x25561 l_0_6_232)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22766 (* ?x22765 l_0_6_7)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x25420 (* ?x3708 l_0_6_139)))
 (let ((?x25590 (- (- (- (+ (- (- (+ ?x25420 ?x22766) ?x25583) ?x25585) ?x22768) ?x22770) ?x22772) ?x25445)))
 (= ?x25590 0.0)))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22796 (* ?x22733 l_0_6_57)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22794 (* ?x22730 l_0_6_56)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25609 (* ?x25564 l_0_6_237)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x7922 (* ?x25561 l_0_6_236)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22792 (* ?x22791 l_0_6_3)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x24793 (* ?x23234 l_0_6_2)))
 (= (- (- (- (- (+ ?x24793 ?x22792) ?x7922) ?x25609) ?x22794) ?x22796) 0.0))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22817 (* ?x22733 l_0_6_62)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22815 (* ?x22730 l_0_6_61)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25632 (* ?x25564 l_0_6_242)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25630 (* ?x25561 l_0_6_241)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x22813 (* ?x22474 l_0_6_3)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x24814 (* ?x22467 l_0_6_2)))
 (= (- (- (- (- (+ ?x24814 ?x22813) ?x25630) ?x25632) ?x22815) ?x22817) 0.0))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22838 (* ?x22733 l_0_6_68)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22836 (* ?x22730 l_0_6_67)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x22834 (* ?x22833 l_0_6_3)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25651 (* ?x25564 l_0_6_248)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25649 (* ?x25561 l_0_6_247)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24842 (* ?x22765 l_0_6_22)))
 (= (- (- (+ (- (- ?x24842 ?x25649) ?x25651) ?x22834) ?x22836) ?x22838) 0.0))))))))))))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x25686 (* ?x25685 l_0_6_95)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x25683 (* ?x25682 l_0_6_94)))
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22857 (* ?x22733 l_0_6_75)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22855 (* ?x22730 l_0_6_74)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22848 (* ?x22727 l_0_6_30)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25677 (* ?x25564 l_0_6_255)))
 (let ((?x25565 (* ?x25564 l_0_6_230)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25674 (* ?x25561 l_0_6_254)))
 (let ((?x25562 (* ?x25561 l_0_6_229)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x24887 (* ?x22765 l_0_6_29)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x25670 (* ?x22881 l_0_6_140)))
 (let ((?x25675 (- (+ (+ (- (* (* (- 2.0) l_0_6_137) l_0_6_139) ?x25670) ?x24887) ?x25562) ?x25674)))
 (let ((?x25687 (+ (+ (- (- (+ (- (+ ?x25675 ?x25565) ?x25677) ?x22848) ?x22855) ?x22857) ?x25683) ?x25686)))
 (= ?x25687 0.0))))))))))))))))))))))))
(assert
 (let ((?x22733 (* 2.0 l_0_6_48)))
 (let ((?x22890 (* ?x22733 l_0_6_83)))
 (let ((?x22730 (* 2.0 l_0_6_47)))
 (let ((?x22888 (* ?x22730 l_0_6_82)))
 (let ((?x22727 (* 2.0 l_0_6_3)))
 (let ((?x22886 (* ?x22727 l_0_6_38)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25714 (* ?x25564 l_0_6_263)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25712 (* ?x25561 l_0_6_262)))
 (let ((?x22765 (* 2.0 l_0_6_2)))
 (let ((?x22884 (* ?x22765 l_0_6_37)))
 (= (- (- (+ (- (- ?x22884 ?x25712) ?x25714) ?x22886) ?x22888) ?x22890) 0.0))))))))))))))
(assert
 (let ((?x22933 (* l_0_6_6 l_0_6_6)))
 (let ((?x22931 (* l_0_6_51 l_0_6_51)))
 (let ((?x22929 (* l_0_6_50 l_0_6_50)))
 (let ((?x22927 (* l_0_6_5 l_0_6_5)))
 (let ((?x22918 (* l_0_6_49 l_0_6_49)))
 (let ((?x22937 (* l_0_6_4 l_0_6_4)))
 (let ((?x25737 (* l_0_6_231 l_0_6_231)))
 (let ((?x25738 (- (- (* (- l_0_6_229) l_0_6_229) (* l_0_6_230 l_0_6_230)) ?x25737)))
 (= (+ (- (- (+ (- (+ ?x25738 ?x22937) ?x22918) ?x22927) ?x22929) ?x22931) ?x22933) 0.0))))))))))
(assert
 (let ((?x22963 (* (* 2.0 l_0_6_6) l_0_6_9)))
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x22960 (* ?x22959 l_0_6_54)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x22957 (* ?x22956 l_0_6_53)))
 (let ((?x22954 (* (* 2.0 l_0_6_5) l_0_6_8)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x22951 (* ?x22950 l_0_6_52)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25771 (* ?x25770 l_0_6_234)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25768 (* ?x25767 l_0_6_233)))
 (let ((?x25775 (+ (- (- (* (* (- 2.0) l_0_6_229) l_0_6_232) ?x25768) ?x25771) (* (* 2.0 l_0_6_4) l_0_6_7))))
 (= (+ (- (- (+ (- ?x25775 ?x22951) ?x22954) ?x22957) ?x22960) ?x22963) 0.0)))))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23004 (* ?x22959 l_0_6_58)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23002 (* ?x22956 l_0_6_57)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23000 (* ?x22950 l_0_6_56)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25804 (* ?x25770 l_0_6_238)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25802 (* ?x25767 l_0_6_237)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25800 (* ?x25799 l_0_6_236)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x22998 (* ?x22997 l_0_6_6)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x22995 (* ?x22791 l_0_6_5)))
 (let ((?x25803 (- (- (+ (+ (* (* 2.0 l_0_6_11) l_0_6_4) ?x22995) ?x22998) ?x25800) ?x25802)))
 (= (- (- (- (- ?x25803 ?x25804) ?x23000) ?x23002) ?x23004) 0.0)))))))))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23039 (* ?x22959 l_0_6_63)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23037 (* ?x22956 l_0_6_62)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23035 (* ?x22950 l_0_6_61)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25827 (* ?x25770 l_0_6_243)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25825 (* ?x25767 l_0_6_242)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25823 (* ?x25799 l_0_6_241)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23027 (* ?x22477 l_0_6_6)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23024 (* ?x22474 l_0_6_5)))
 (let ((?x25826 (- (- (+ (+ (* (* 2.0 l_0_6_16) l_0_6_4) ?x23024) ?x23027) ?x25823) ?x25825)))
 (= (- (- (- (- ?x25826 ?x25827) ?x23035) ?x23037) ?x23039) 0.0)))))))))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23069 (* ?x22959 l_0_6_69)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23067 (* ?x22956 l_0_6_68)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23065 (* ?x22950 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23063 (* ?x23062 l_0_6_6)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25850 (* ?x25770 l_0_6_249)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25848 (* ?x25767 l_0_6_248)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23054 (* ?x22833 l_0_6_5)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x8114 (* ?x25799 l_0_6_247)))
 (let ((?x25851 (- (- (+ (- (* (* 2.0 l_0_6_22) l_0_6_4) ?x8114) ?x23054) ?x25848) ?x25850)))
 (= (- (- (- (+ ?x25851 ?x23063) ?x23065) ?x23067) ?x23069) 0.0)))))))))))))))))))
(assert
 (let ((?x25898 (* l_0_6_96 l_0_6_96)))
 (let ((?x25896 (* l_0_6_95 l_0_6_95)))
 (let ((?x25894 (* l_0_6_94 l_0_6_94)))
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23107 (* ?x22959 l_0_6_76)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23105 (* ?x22956 l_0_6_75)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23103 (* ?x22950 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23101 (* ?x23100 l_0_6_6)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23092 (* ?x23091 l_0_6_5)))
 (let ((?x25737 (* l_0_6_231 l_0_6_231)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25884 (* ?x25770 l_0_6_256)))
 (let ((?x25735 (* l_0_6_230 l_0_6_230)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25881 (* ?x25767 l_0_6_255)))
 (let ((?x25747 (* l_0_6_229 l_0_6_229)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25878 (* ?x25799 l_0_6_254)))
 (let ((?x25876 (* l_0_6_141 l_0_6_141)))
 (let ((?x25877 (- (- (* (- l_0_6_139) l_0_6_139) (* l_0_6_140 l_0_6_140)) ?x25876)))
 (let ((?x25888 (+ (+ (- (+ (- (+ (- ?x25877 ?x25878) ?x25747) ?x25881) ?x25735) ?x25884) ?x25737) (* (* 2.0 l_0_6_29) l_0_6_4))))
 (let ((?x25897 (+ (+ (- (- (- (+ (+ ?x25888 ?x23092) ?x23101) ?x23103) ?x23105) ?x23107) ?x25894) ?x25896)))
 (= (+ ?x25897 ?x25898) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x22959 (* 2.0 l_0_6_51)))
 (let ((?x23160 (* ?x22959 l_0_6_84)))
 (let ((?x22956 (* 2.0 l_0_6_50)))
 (let ((?x23158 (* ?x22956 l_0_6_83)))
 (let ((?x22950 (* 2.0 l_0_6_49)))
 (let ((?x23156 (* ?x22950 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23154 (* ?x23153 l_0_6_6)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23151 (* ?x23150 l_0_6_5)))
 (let ((?x23147 (* 2.0 l_0_6_37)))
 (let ((?x23148 (* ?x23147 l_0_6_4)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25926 (* ?x25770 l_0_6_264)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25924 (* ?x25767 l_0_6_263)))
 (let ((?x25929 (+ (+ (- (- (* (* (- 2.0) l_0_6_229) l_0_6_262) ?x25924) ?x25926) ?x23148) ?x23151)))
 (= (- (- (- (+ ?x25929 ?x23154) ?x23156) ?x23158) ?x23160) 0.0)))))))))))))))))))
(assert
 (let ((?x23215 (* l_0_6_9 l_0_6_9)))
 (let ((?x23213 (* l_0_6_8 l_0_6_8)))
 (let ((?x23211 (* l_0_6_7 l_0_6_7)))
 (let ((?x23209 (* l_0_6_55 l_0_6_55)))
 (let ((?x23207 (* l_0_6_54 l_0_6_54)))
 (let ((?x23205 (* l_0_6_53 l_0_6_53)))
 (let ((?x23194 (* l_0_6_52 l_0_6_52)))
 (let ((?x25954 (* l_0_6_235 l_0_6_235)))
 (let ((?x25952 (* l_0_6_234 l_0_6_234)))
 (let ((?x25950 (* l_0_6_233 l_0_6_233)))
 (let ((?x25953 (- (- (- (* l_0_6_10 l_0_6_10) (* l_0_6_232 l_0_6_232)) ?x25950) ?x25952)))
 (let ((?x25961 (+ (+ (- (- (- (- (- ?x25953 ?x25954) ?x23194) ?x23205) ?x23207) ?x23209) ?x23211) ?x23213)))
 (= (+ ?x25961 ?x23215) 0.0))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23311 (* ?x23256 l_0_6_64)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23309 (* ?x23253 l_0_6_63)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23307 (* ?x23250 l_0_6_62)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23305 (* ?x23247 l_0_6_61)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x25993 (* ?x24666 l_0_6_244)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x25991 (* ?x24663 l_0_6_243)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x25989 (* ?x24660 l_0_6_242)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x25987 (* ?x24657 l_0_6_241)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23303 (* ?x22477 l_0_6_9)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23301 (* ?x22474 l_0_6_8)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x23299 (* ?x22467 l_0_6_7)))
 (let ((?x25988 (- (+ (+ (+ (* (* 2.0 l_0_6_10) l_0_6_19) ?x23299) ?x23301) ?x23303) ?x25987)))
 (let ((?x25998 (- (- (- (- (- (- (- ?x25988 ?x25989) ?x25991) ?x25993) ?x23305) ?x23307) ?x23309) ?x23311)))
 (= ?x25998 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23359 (* ?x23256 l_0_6_70)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23357 (* ?x23253 l_0_6_69)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23355 (* ?x23250 l_0_6_68)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23353 (* ?x23247 l_0_6_67)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x23351 (* ?x23062 l_0_6_9)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26019 (* ?x24666 l_0_6_250)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26017 (* ?x24663 l_0_6_249)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26015 (* ?x24660 l_0_6_248)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x8420 (* ?x24657 l_0_6_247)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x23342 (* ?x22833 l_0_6_8)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x23339 (* ?x23337 l_0_6_7)))
 (let ((?x26016 (- (- (+ (+ (* (* 2.0 l_0_6_10) l_0_6_25) ?x23339) ?x23342) ?x8420) ?x26015)))
 (let ((?x26025 (- (- (- (- (+ (- (- ?x26016 ?x26017) ?x26019) ?x23351) ?x23353) ?x23355) ?x23357) ?x23359)))
 (= ?x26025 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26098 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x26095 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x26092 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23407 (* ?x23256 l_0_6_77)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23405 (* ?x23253 l_0_6_76)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23403 (* ?x23250 l_0_6_75)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23401 (* ?x23247 l_0_6_74)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x23399 (* ?x23100 l_0_6_9)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x23390 (* ?x23091 l_0_6_8)))
 (let ((?x23385 (* 2.0 l_0_6_29)))
 (let ((?x23387 (* ?x23385 l_0_6_7)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26082 (* ?x24666 l_0_6_257)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26080 (* ?x24663 l_0_6_256)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26078 (* ?x24660 l_0_6_255)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x26076 (* ?x24657 l_0_6_254)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25771 (* ?x25770 l_0_6_234)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25768 (* ?x25767 l_0_6_233)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26070 (* ?x23144 l_0_6_144)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26068 (* ?x23141 l_0_6_143)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26066 (* ?x23138 l_0_6_142)))
 (let ((?x26073 (+ (- (- (- (* (* 2.0 l_0_6_10) l_0_6_32) ?x26066) ?x26068) ?x26070) (* (* 2.0 l_0_6_229) l_0_6_232))))
 (let ((?x26084 (+ (- (- (- (- (+ (+ ?x26073 ?x25768) ?x25771) ?x26076) ?x26078) ?x26080) ?x26082) ?x23387)))
 (let ((?x26093 (+ (- (- (- (- (+ (+ ?x26084 ?x23390) ?x23399) ?x23401) ?x23403) ?x23405) ?x23407) ?x26092)))
 (= (+ (+ ?x26093 ?x26095) ?x26098) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23256 (* 2.0 l_0_6_55)))
 (let ((?x23475 (* ?x23256 l_0_6_85)))
 (let ((?x23253 (* 2.0 l_0_6_54)))
 (let ((?x23473 (* ?x23253 l_0_6_84)))
 (let ((?x23250 (* 2.0 l_0_6_53)))
 (let ((?x23471 (* ?x23250 l_0_6_83)))
 (let ((?x23247 (* 2.0 l_0_6_52)))
 (let ((?x23469 (* ?x23247 l_0_6_82)))
 (let ((?x23153 (* 2.0 l_0_6_39)))
 (let ((?x23467 (* ?x23153 l_0_6_9)))
 (let ((?x23150 (* 2.0 l_0_6_38)))
 (let ((?x23465 (* ?x23150 l_0_6_8)))
 (let ((?x23147 (* 2.0 l_0_6_37)))
 (let ((?x23463 (* ?x23147 l_0_6_7)))
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26165 (* ?x24666 l_0_6_265)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26163 (* ?x24663 l_0_6_264)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26161 (* ?x24660 l_0_6_263)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x26159 (* ?x24657 l_0_6_262)))
 (let ((?x26166 (- (- (- (- (* (* 2.0 l_0_6_10) l_0_6_40) ?x26159) ?x26161) ?x26163) ?x26165)))
 (let ((?x26173 (- (- (- (- (+ (+ (+ ?x26166 ?x23463) ?x23465) ?x23467) ?x23469) ?x23471) ?x23473) ?x23475)))
 (= ?x26173 0.0))))))))))))))))))))))))))
(assert
 (let ((?x23547 (* l_0_6_60 l_0_6_60)))
 (let ((?x23545 (* l_0_6_59 l_0_6_59)))
 (let ((?x23543 (* l_0_6_58 l_0_6_58)))
 (let ((?x23541 (* l_0_6_57 l_0_6_57)))
 (let ((?x23539 (* l_0_6_56 l_0_6_56)))
 (let ((?x26224 (* l_0_6_240 l_0_6_240)))
 (let ((?x26222 (* l_0_6_239 l_0_6_239)))
 (let ((?x26220 (* l_0_6_238 l_0_6_238)))
 (let ((?x26218 (* l_0_6_237 l_0_6_237)))
 (let ((?x26216 (* l_0_6_236 l_0_6_236)))
 (let ((?x23537 (* l_0_6_15 l_0_6_15)))
 (let ((?x23535 (* l_0_6_14 l_0_6_14)))
 (let ((?x23522 (* l_0_6_13 l_0_6_13)))
 (let ((?x26214 (+ (+ (+ (* l_0_6_11 l_0_6_11) (* l_0_6_12 l_0_6_12)) ?x23522) ?x23535)))
 (let ((?x26226 (- (- (- (- (- (- (+ ?x26214 ?x23537) ?x26216) ?x26218) ?x26220) ?x26222) ?x26224) ?x23539)))
 (= (- (- (- (- ?x26226 ?x23541) ?x23543) ?x23545) ?x23547) 0.0)))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23589 (* ?x23588 l_0_6_65)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23586 (* ?x23585 l_0_6_64)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23583 (* ?x23582 l_0_6_63)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23580 (* ?x23579 l_0_6_62)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23577 (* ?x23576 l_0_6_61)))
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26277 (* ?x26276 l_0_6_245)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26274 (* ?x26273 l_0_6_244)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26271 (* ?x26270 l_0_6_243)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26268 (* ?x26267 l_0_6_242)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26265 (* ?x26264 l_0_6_241)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23574 (* ?x23573 l_0_6_20)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23571 (* ?x23570 l_0_6_19)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23568 (* ?x22997 l_0_6_18)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23566 (* ?x22791 l_0_6_17)))
 (let ((?x26263 (+ (+ (+ (+ (* (* 2.0 l_0_6_11) l_0_6_16) ?x23566) ?x23568) ?x23571) ?x23574)))
 (let ((?x26280 (- (- (- (- (- (- (- ?x26263 ?x26265) ?x26268) ?x26271) ?x26274) ?x26277) ?x23577) ?x23580)))
 (= (- (- (- ?x26280 ?x23583) ?x23586) ?x23589) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23644 (* ?x23588 l_0_6_71)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23642 (* ?x23585 l_0_6_70)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23640 (* ?x23582 l_0_6_69)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23638 (* ?x23579 l_0_6_68)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23636 (* ?x23576 l_0_6_67)))
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26336 (* ?x26276 l_0_6_251)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26334 (* ?x26273 l_0_6_250)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26332 (* ?x26270 l_0_6_249)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26330 (* ?x26267 l_0_6_248)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26328 (* ?x26264 l_0_6_247)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23634 (* ?x23573 l_0_6_26)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23624 (* ?x23570 l_0_6_25)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23621 (* ?x22997 l_0_6_24)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23617 (* ?x22791 l_0_6_23)))
 (let ((?x26327 (+ (+ (+ (+ (* (* 2.0 l_0_6_11) l_0_6_22) ?x23617) ?x23621) ?x23624) ?x23634)))
 (let ((?x26339 (- (- (- (- (- (- (- ?x26327 ?x26328) ?x26330) ?x26332) ?x26334) ?x26336) ?x23636) ?x23638)))
 (= (- (- (- ?x26339 ?x23640) ?x23642) ?x23644) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23693 (* ?x23588 l_0_6_78)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23691 (* ?x23585 l_0_6_77)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23689 (* ?x23582 l_0_6_76)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23687 (* ?x23579 l_0_6_75)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23685 (* ?x23576 l_0_6_74)))
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26368 (* ?x26276 l_0_6_258)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26366 (* ?x26273 l_0_6_257)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26364 (* ?x26270 l_0_6_256)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26362 (* ?x26267 l_0_6_255)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26360 (* ?x26264 l_0_6_254)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25804 (* ?x25770 l_0_6_238)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25802 (* ?x25767 l_0_6_237)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25800 (* ?x25799 l_0_6_236)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23683 (* ?x23573 l_0_6_33)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x24740 (* ?x23144 l_0_6_148)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x24738 (* ?x23141 l_0_6_147)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23673 (* ?x23570 l_0_6_32)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x24736 (* ?x23138 l_0_6_146)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23670 (* ?x22997 l_0_6_31)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x5413 (* ?x22791 l_0_6_30)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24734 (* ?x23729 l_0_6_96)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6843 (* ?x23724 l_0_6_95)))
 (let ((?x9499 (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_94) ?x6843) ?x24734) (* (* 2.0 l_0_6_11) l_0_6_29))))
 (let ((?x26356 (+ (- (- (+ (- (+ (+ ?x9499 ?x5413) ?x23670) ?x24736) ?x23673) ?x24738) ?x24740) ?x23683)))
 (let ((?x26367 (- (- (- (- (+ (+ (+ ?x26356 ?x25800) ?x25802) ?x25804) ?x26360) ?x26362) ?x26364) ?x26366)))
 (= (- (- (- (- (- (- ?x26367 ?x26368) ?x23685) ?x23687) ?x23689) ?x23691) ?x23693) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23588 (* 2.0 l_0_6_60)))
 (let ((?x23779 (* ?x23588 l_0_6_86)))
 (let ((?x23585 (* 2.0 l_0_6_59)))
 (let ((?x23777 (* ?x23585 l_0_6_85)))
 (let ((?x23582 (* 2.0 l_0_6_58)))
 (let ((?x23775 (* ?x23582 l_0_6_84)))
 (let ((?x23579 (* 2.0 l_0_6_57)))
 (let ((?x23773 (* ?x23579 l_0_6_83)))
 (let ((?x23576 (* 2.0 l_0_6_56)))
 (let ((?x23771 (* ?x23576 l_0_6_82)))
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26384 (* ?x26276 l_0_6_266)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26382 (* ?x26273 l_0_6_265)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26380 (* ?x26270 l_0_6_264)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x9642 (* ?x26267 l_0_6_263)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x9645 (* ?x26264 l_0_6_262)))
 (let ((?x23573 (* 2.0 l_0_6_15)))
 (let ((?x23766 (* ?x23573 l_0_6_41)))
 (let ((?x23570 (* 2.0 l_0_6_14)))
 (let ((?x23752 (* ?x23570 l_0_6_40)))
 (let ((?x22997 (* 2.0 l_0_6_13)))
 (let ((?x23750 (* ?x22997 l_0_6_39)))
 (let ((?x22791 (* 2.0 l_0_6_12)))
 (let ((?x23748 (* ?x22791 l_0_6_38)))
 (let ((?x23234 (* 2.0 l_0_6_11)))
 (let ((?x23746 (* ?x23234 l_0_6_37)))
 (let ((?x26381 (- (- (- (+ (+ (+ (+ ?x23746 ?x23748) ?x23750) ?x23752) ?x23766) ?x9645) ?x9642) ?x26380)))
 (let ((?x26390 (- (- (- (- (- (- (- ?x26381 ?x26382) ?x26384) ?x23771) ?x23773) ?x23775) ?x23777) ?x23779)))
 (= ?x26390 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x23876 (* l_0_6_66 l_0_6_66)))
 (let ((?x23874 (* l_0_6_65 l_0_6_65)))
 (let ((?x23872 (* l_0_6_64 l_0_6_64)))
 (let ((?x23870 (* l_0_6_63 l_0_6_63)))
 (let ((?x23868 (* l_0_6_62 l_0_6_62)))
 (let ((?x23866 (* l_0_6_61 l_0_6_61)))
 (let ((?x26425 (* l_0_6_246 l_0_6_246)))
 (let ((?x26423 (* l_0_6_245 l_0_6_245)))
 (let ((?x26421 (* l_0_6_244 l_0_6_244)))
 (let ((?x26419 (* l_0_6_243 l_0_6_243)))
 (let ((?x26417 (* l_0_6_242 l_0_6_242)))
 (let ((?x26415 (* l_0_6_241 l_0_6_241)))
 (let ((?x23864 (* l_0_6_21 l_0_6_21)))
 (let ((?x23862 (* l_0_6_20 l_0_6_20)))
 (let ((?x23847 (* l_0_6_19 l_0_6_19)))
 (let ((?x23844 (* l_0_6_18 l_0_6_18)))
 (let ((?x26412 (+ (+ (+ (* l_0_6_16 l_0_6_16) (* l_0_6_17 l_0_6_17)) ?x23844) ?x23847)))
 (let ((?x26424 (- (- (- (- (- (+ (+ ?x26412 ?x23862) ?x23864) ?x26415) ?x26417) ?x26419) ?x26421) ?x26423)))
 (let ((?x26432 (- (- (- (- (- (- (- ?x26424 ?x26425) ?x23866) ?x23868) ?x23870) ?x23872) ?x23874) ?x23876)))
 (= ?x26432 0.0)))))))))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x23948 (* ?x22524 l_0_6_79)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x23946 (* ?x22521 l_0_6_78)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x23944 (* ?x22518 l_0_6_77)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x23942 (* ?x22515 l_0_6_76)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x23940 (* ?x22512 l_0_6_75)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x23938 (* ?x22509 l_0_6_74)))
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x26484 (* ?x22504 l_0_6_259)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x26482 (* ?x22501 l_0_6_258)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x26480 (* ?x22498 l_0_6_257)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x26478 (* ?x22495 l_0_6_256)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x26476 (* ?x22492 l_0_6_255)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x26474 (* ?x22489 l_0_6_254)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25827 (* ?x25770 l_0_6_243)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25825 (* ?x25767 l_0_6_242)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25823 (* ?x25799 l_0_6_241)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x23936 (* ?x22486 l_0_6_34)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x23934 (* ?x22483 l_0_6_33)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x23932 (* ?x22480 l_0_6_32)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x23930 (* ?x22477 l_0_6_31)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x23928 (* ?x22474 l_0_6_30)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x23145 (* ?x23144 l_0_6_153)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x23142 (* ?x23141 l_0_6_152)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x23139 (* ?x23138 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23130 (* ?x22619 l_0_6_96)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23127 (* ?x22616 l_0_6_95)))
 (let ((?x26462 (- (- (+ (+ (* (* 2.0 l_0_6_106) l_0_6_94) ?x23127) ?x23130) ?x23139) ?x23142)))
 (let ((?x26467 (+ (+ (+ (- ?x26462 ?x23145) (* (* 2.0 l_0_6_16) l_0_6_29)) ?x23928) ?x23930)))
 (let ((?x26475 (- (+ (+ (+ (+ (+ (+ ?x26467 ?x23932) ?x23934) ?x23936) ?x25823) ?x25825) ?x25827) ?x26474)))
 (let ((?x26487 (- (- (- (- (- (- (- ?x26475 ?x26476) ?x26478) ?x26480) ?x26482) ?x26484) ?x23938) ?x23940)))
 (= (- (- (- (- ?x26487 ?x23942) ?x23944) ?x23946) ?x23948) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22524 (* 2.0 l_0_6_66)))
 (let ((?x24036 (* ?x22524 l_0_6_87)))
 (let ((?x22521 (* 2.0 l_0_6_65)))
 (let ((?x24034 (* ?x22521 l_0_6_86)))
 (let ((?x22518 (* 2.0 l_0_6_64)))
 (let ((?x24032 (* ?x22518 l_0_6_85)))
 (let ((?x22515 (* 2.0 l_0_6_63)))
 (let ((?x24030 (* ?x22515 l_0_6_84)))
 (let ((?x22512 (* 2.0 l_0_6_62)))
 (let ((?x24028 (* ?x22512 l_0_6_83)))
 (let ((?x22509 (* 2.0 l_0_6_61)))
 (let ((?x24026 (* ?x22509 l_0_6_82)))
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x26502 (* ?x22504 l_0_6_267)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x26500 (* ?x22501 l_0_6_266)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x26498 (* ?x22498 l_0_6_265)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x26496 (* ?x22495 l_0_6_264)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x26494 (* ?x22492 l_0_6_263)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x10067 (* ?x22489 l_0_6_262)))
 (let ((?x22486 (* 2.0 l_0_6_21)))
 (let ((?x24024 (* ?x22486 l_0_6_42)))
 (let ((?x22483 (* 2.0 l_0_6_20)))
 (let ((?x24022 (* ?x22483 l_0_6_41)))
 (let ((?x22480 (* 2.0 l_0_6_19)))
 (let ((?x24020 (* ?x22480 l_0_6_40)))
 (let ((?x22477 (* 2.0 l_0_6_18)))
 (let ((?x24018 (* ?x22477 l_0_6_39)))
 (let ((?x22474 (* 2.0 l_0_6_17)))
 (let ((?x24016 (* ?x22474 l_0_6_38)))
 (let ((?x22467 (* 2.0 l_0_6_16)))
 (let ((?x24014 (* ?x22467 l_0_6_37)))
 (let ((?x26495 (- (- (+ (+ (+ (+ (+ ?x24014 ?x24016) ?x24018) ?x24020) ?x24022) ?x24024) ?x10067) ?x26494)))
 (let ((?x26506 (- (- (- (- (- (- (- ?x26495 ?x26496) ?x26498) ?x26500) ?x26502) ?x24026) ?x24028) ?x24030)))
 (= (- (- (- ?x26506 ?x24032) ?x24034) ?x24036) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24128 (* l_0_6_73 l_0_6_73)))
 (let ((?x24126 (* l_0_6_72 l_0_6_72)))
 (let ((?x24124 (* l_0_6_71 l_0_6_71)))
 (let ((?x24122 (* l_0_6_70 l_0_6_70)))
 (let ((?x24120 (* l_0_6_69 l_0_6_69)))
 (let ((?x24118 (* l_0_6_68 l_0_6_68)))
 (let ((?x24116 (* l_0_6_67 l_0_6_67)))
 (let ((?x24114 (* l_0_6_28 l_0_6_28)))
 (let ((?x24112 (* l_0_6_27 l_0_6_27)))
 (let ((?x24110 (* l_0_6_26 l_0_6_26)))
 (let ((?x26558 (* l_0_6_253 l_0_6_253)))
 (let ((?x26556 (* l_0_6_252 l_0_6_252)))
 (let ((?x26554 (* l_0_6_251 l_0_6_251)))
 (let ((?x26552 (* l_0_6_250 l_0_6_250)))
 (let ((?x24094 (* l_0_6_25 l_0_6_25)))
 (let ((?x26549 (* l_0_6_249 l_0_6_249)))
 (let ((?x26547 (* l_0_6_248 l_0_6_248)))
 (let ((?x26545 (* l_0_6_247 l_0_6_247)))
 (let ((?x24091 (* l_0_6_24 l_0_6_24)))
 (let ((?x26546 (- (+ (+ (* l_0_6_22 l_0_6_22) (* l_0_6_23 l_0_6_23)) ?x24091) ?x26545)))
 (let ((?x26559 (- (- (- (- (+ (- (- ?x26546 ?x26547) ?x26549) ?x24094) ?x26552) ?x26554) ?x26556) ?x26558)))
 (let ((?x26566 (- (- (- (- (+ (+ (+ ?x26559 ?x24110) ?x24112) ?x24114) ?x24116) ?x24118) ?x24120) ?x24122)))
 (= (- (- (- ?x26566 ?x24124) ?x24126) ?x24128) 0.0))))))))))))))))))))))))
(assert
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24191 (* ?x24190 l_0_6_80)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24188 (* ?x24187 l_0_6_79)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24185 (* ?x24184 l_0_6_78)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24182 (* ?x24181 l_0_6_77)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24179 (* ?x24178 l_0_6_76)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24176 (* ?x24175 l_0_6_75)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24173 (* ?x24172 l_0_6_74)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24170 (* ?x24169 l_0_6_35)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24167 (* ?x24166 l_0_6_34)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24164 (* ?x24163 l_0_6_33)))
 (let ((?x26631 (* 2.0 l_0_6_253)))
 (let ((?x26632 (* ?x26631 l_0_6_260)))
 (let ((?x26628 (* 2.0 l_0_6_252)))
 (let ((?x26629 (* ?x26628 l_0_6_259)))
 (let ((?x26625 (* 2.0 l_0_6_251)))
 (let ((?x26626 (* ?x26625 l_0_6_258)))
 (let ((?x26622 (* 2.0 l_0_6_250)))
 (let ((?x26623 (* ?x26622 l_0_6_257)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24161 (* ?x24160 l_0_6_32)))
 (let ((?x26618 (* 2.0 l_0_6_249)))
 (let ((?x26619 (* ?x26618 l_0_6_256)))
 (let ((?x26615 (* 2.0 l_0_6_248)))
 (let ((?x26616 (* ?x26615 l_0_6_255)))
 (let ((?x26612 (* 2.0 l_0_6_247)))
 (let ((?x26613 (* ?x26612 l_0_6_254)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24158 (* ?x23062 l_0_6_31)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25850 (* ?x25770 l_0_6_249)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25848 (* ?x25767 l_0_6_248)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x24156 (* ?x22833 l_0_6_30)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x8114 (* ?x25799 l_0_6_247)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26603 (* ?x23144 l_0_6_159)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26601 (* ?x23141 l_0_6_158)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26599 (* ?x23138 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x26597 (* ?x26596 l_0_6_96)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x26594 (* ?x26593 l_0_6_95)))
 (let ((?x26602 (- (- (+ (+ (* (* 2.0 l_0_6_112) l_0_6_94) ?x26594) ?x26597) ?x26599) ?x26601)))
 (let ((?x26608 (+ (+ (+ (- ?x26602 ?x26603) (* (* 2.0 l_0_6_22) l_0_6_29)) ?x8114) ?x24156)))
 (let ((?x26621 (+ (- (- (- (+ (+ (+ ?x26608 ?x25848) ?x25850) ?x24158) ?x26613) ?x26616) ?x26619) ?x24161)))
 (let ((?x26636 (+ (+ (+ (- (- (- (- ?x26621 ?x26623) ?x26626) ?x26629) ?x26632) ?x24164) ?x24167) ?x24170)))
 (let ((?x26643 (- (- (- (- (- (- (- ?x26636 ?x24173) ?x24176) ?x24179) ?x24182) ?x24185) ?x24188) ?x24191)))
 (= ?x26643 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x25445 (* ?x25444 l_0_6_94)))
 (let ((?x24190 (* 2.0 l_0_6_73)))
 (let ((?x24249 (* ?x24190 l_0_6_88)))
 (let ((?x24187 (* 2.0 l_0_6_72)))
 (let ((?x24247 (* ?x24187 l_0_6_87)))
 (let ((?x24184 (* 2.0 l_0_6_71)))
 (let ((?x24245 (* ?x24184 l_0_6_86)))
 (let ((?x24181 (* 2.0 l_0_6_70)))
 (let ((?x24243 (* ?x24181 l_0_6_85)))
 (let ((?x24178 (* 2.0 l_0_6_69)))
 (let ((?x24241 (* ?x24178 l_0_6_84)))
 (let ((?x24175 (* 2.0 l_0_6_68)))
 (let ((?x24239 (* ?x24175 l_0_6_83)))
 (let ((?x24172 (* 2.0 l_0_6_67)))
 (let ((?x24237 (* ?x24172 l_0_6_82)))
 (let ((?x24169 (* 2.0 l_0_6_28)))
 (let ((?x24235 (* ?x24169 l_0_6_43)))
 (let ((?x24166 (* 2.0 l_0_6_27)))
 (let ((?x24233 (* ?x24166 l_0_6_42)))
 (let ((?x24163 (* 2.0 l_0_6_26)))
 (let ((?x24231 (* ?x24163 l_0_6_41)))
 (let ((?x26631 (* 2.0 l_0_6_253)))
 (let ((?x26695 (* ?x26631 l_0_6_268)))
 (let ((?x26628 (* 2.0 l_0_6_252)))
 (let ((?x26693 (* ?x26628 l_0_6_267)))
 (let ((?x26625 (* 2.0 l_0_6_251)))
 (let ((?x26691 (* ?x26625 l_0_6_266)))
 (let ((?x26622 (* 2.0 l_0_6_250)))
 (let ((?x26689 (* ?x26622 l_0_6_265)))
 (let ((?x24160 (* 2.0 l_0_6_25)))
 (let ((?x24219 (* ?x24160 l_0_6_40)))
 (let ((?x26618 (* 2.0 l_0_6_249)))
 (let ((?x26686 (* ?x26618 l_0_6_264)))
 (let ((?x26615 (* 2.0 l_0_6_248)))
 (let ((?x26684 (* ?x26615 l_0_6_263)))
 (let ((?x26612 (* 2.0 l_0_6_247)))
 (let ((?x26682 (* ?x26612 l_0_6_262)))
 (let ((?x23062 (* 2.0 l_0_6_24)))
 (let ((?x24215 (* ?x23062 l_0_6_39)))
 (let ((?x22833 (* 2.0 l_0_6_23)))
 (let ((?x6138 (* ?x22833 l_0_6_38)))
 (let ((?x23337 (* 2.0 l_0_6_22)))
 (let ((?x6141 (* ?x23337 l_0_6_37)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x25420 (* ?x3708 l_0_6_139)))
 (let ((?x26688 (+ (- (- (- (+ (+ (+ ?x25420 ?x6141) ?x6138) ?x24215) ?x26682) ?x26684) ?x26686) ?x24219)))
 (let ((?x26699 (+ (+ (+ (- (- (- (- ?x26688 ?x26689) ?x26691) ?x26693) ?x26695) ?x24231) ?x24233) ?x24235)))
 (let ((?x26706 (- (- (- (- (- (- (- ?x26699 ?x24237) ?x24239) ?x24241) ?x24243) ?x24245) ?x24247) ?x24249)))
 (= (- ?x26706 ?x25445) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24318 (* l_0_6_81 l_0_6_81)))
 (let ((?x24316 (* l_0_6_80 l_0_6_80)))
 (let ((?x24314 (* l_0_6_79 l_0_6_79)))
 (let ((?x24312 (* l_0_6_78 l_0_6_78)))
 (let ((?x24310 (* l_0_6_77 l_0_6_77)))
 (let ((?x24308 (* l_0_6_76 l_0_6_76)))
 (let ((?x24306 (* l_0_6_75 l_0_6_75)))
 (let ((?x24304 (* l_0_6_74 l_0_6_74)))
 (let ((?x24302 (* l_0_6_36 l_0_6_36)))
 (let ((?x24300 (* l_0_6_35 l_0_6_35)))
 (let ((?x24298 (* l_0_6_34 l_0_6_34)))
 (let ((?x24296 (* l_0_6_33 l_0_6_33)))
 (let ((?x24294 (* l_0_6_32 l_0_6_32)))
 (let ((?x24292 (* l_0_6_31 l_0_6_31)))
 (let ((?x24290 (* l_0_6_30 l_0_6_30)))
 (let ((?x24322 (* l_0_6_29 l_0_6_29)))
 (let ((?x26788 (* l_0_6_261 l_0_6_261)))
 (let ((?x26786 (* l_0_6_260 l_0_6_260)))
 (let ((?x26784 (* l_0_6_259 l_0_6_259)))
 (let ((?x26782 (* l_0_6_258 l_0_6_258)))
 (let ((?x26780 (* l_0_6_257 l_0_6_257)))
 (let ((?x26778 (* l_0_6_256 l_0_6_256)))
 (let ((?x26776 (* l_0_6_255 l_0_6_255)))
 (let ((?x26774 (* l_0_6_254 l_0_6_254)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25884 (* ?x25770 l_0_6_256)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25881 (* ?x25767 l_0_6_255)))
 (let ((?x25799 (* 2.0 l_0_6_229)))
 (let ((?x25878 (* ?x25799 l_0_6_254)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26769 (* ?x23144 l_0_6_166)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26767 (* ?x23141 l_0_6_165)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26765 (* ?x23138 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x26763 (* ?x26762 l_0_6_96)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x26760 (* ?x26759 l_0_6_95)))
 (let ((?x26768 (- (- (+ (+ (* (* 2.0 l_0_6_119) l_0_6_94) ?x26760) ?x26763) ?x26765) ?x26767)))
 (let ((?x26779 (- (- (- (+ (+ (+ (- ?x26768 ?x26769) ?x25878) ?x25881) ?x25884) ?x26774) ?x26776) ?x26778)))
 (let ((?x26791 (+ (+ (- (- (- (- (- ?x26779 ?x26780) ?x26782) ?x26784) ?x26786) ?x26788) ?x24322) ?x24290)))
 (let ((?x26798 (- (+ (+ (+ (+ (+ (+ ?x26791 ?x24292) ?x24294) ?x24296) ?x24298) ?x24300) ?x24302) ?x24304)))
 (let ((?x26805 (- (- (- (- (- (- (- ?x26798 ?x24306) ?x24308) ?x24310) ?x24312) ?x24314) ?x24316) ?x24318)))
 (= ?x26805 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24409 (* (* 2.0 l_0_6_81) l_0_6_89)))
 (let ((?x24406 (* (* 2.0 l_0_6_80) l_0_6_88)))
 (let ((?x24403 (* (* 2.0 l_0_6_79) l_0_6_87)))
 (let ((?x24400 (* (* 2.0 l_0_6_78) l_0_6_86)))
 (let ((?x24397 (* (* 2.0 l_0_6_77) l_0_6_85)))
 (let ((?x24394 (* (* 2.0 l_0_6_76) l_0_6_84)))
 (let ((?x24391 (* (* 2.0 l_0_6_75) l_0_6_83)))
 (let ((?x24388 (* (* 2.0 l_0_6_74) l_0_6_82)))
 (let ((?x24385 (* (* 2.0 l_0_6_36) l_0_6_44)))
 (let ((?x24382 (* (* 2.0 l_0_6_35) l_0_6_43)))
 (let ((?x24379 (* (* 2.0 l_0_6_34) l_0_6_42)))
 (let ((?x24376 (* (* 2.0 l_0_6_33) l_0_6_41)))
 (let ((?x24373 (* (* 2.0 l_0_6_32) l_0_6_40)))
 (let ((?x23100 (* 2.0 l_0_6_31)))
 (let ((?x24370 (* ?x23100 l_0_6_39)))
 (let ((?x23091 (* 2.0 l_0_6_30)))
 (let ((?x24368 (* ?x23091 l_0_6_38)))
 (let ((?x23385 (* 2.0 l_0_6_29)))
 (let ((?x24366 (* ?x23385 l_0_6_37)))
 (let ((?x26891 (* (* 2.0 l_0_6_261) l_0_6_269)))
 (let ((?x26888 (* (* 2.0 l_0_6_260) l_0_6_268)))
 (let ((?x26885 (* (* 2.0 l_0_6_259) l_0_6_267)))
 (let ((?x26882 (* (* 2.0 l_0_6_258) l_0_6_266)))
 (let ((?x26879 (* (* 2.0 l_0_6_257) l_0_6_265)))
 (let ((?x26876 (* (* 2.0 l_0_6_256) l_0_6_264)))
 (let ((?x26873 (* (* 2.0 l_0_6_255) l_0_6_263)))
 (let ((?x26870 (* (* 2.0 l_0_6_254) l_0_6_262)))
 (let ((?x25770 (* 2.0 l_0_6_231)))
 (let ((?x25926 (* ?x25770 l_0_6_264)))
 (let ((?x25767 (* 2.0 l_0_6_230)))
 (let ((?x25924 (* ?x25767 l_0_6_263)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26863 (* ?x23144 l_0_6_174)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26861 (* ?x23141 l_0_6_173)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26859 (* ?x23138 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x26857 (* ?x26856 l_0_6_96)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x26854 (* ?x26853 l_0_6_95)))
 (let ((?x26862 (- (- (+ (+ (* (* 2.0 l_0_6_127) l_0_6_94) ?x26854) ?x26857) ?x26859) ?x26861)))
 (let ((?x26868 (+ (+ (+ (- ?x26862 ?x26863) (* (* 2.0 l_0_6_229) l_0_6_262)) ?x25924) ?x25926)))
 (let ((?x26889 (- (- (- (- (- (- (- ?x26868 ?x26870) ?x26873) ?x26876) ?x26879) ?x26882) ?x26885) ?x26888)))
 (let ((?x26898 (+ (+ (+ (+ (+ (+ (- ?x26889 ?x26891) ?x24366) ?x24368) ?x24370) ?x24373) ?x24376) ?x24379)))
 (let ((?x26905 (- (- (- (- (- (+ (+ ?x26898 ?x24382) ?x24385) ?x24388) ?x24391) ?x24394) ?x24397) ?x24400)))
 (= (- (- (- ?x26905 ?x24403) ?x24406) ?x24409) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x24553 (* l_0_6_90 l_0_6_90)))
 (let ((?x24551 (* l_0_6_89 l_0_6_89)))
 (let ((?x24549 (* l_0_6_88 l_0_6_88)))
 (let ((?x24547 (* l_0_6_87 l_0_6_87)))
 (let ((?x24545 (* l_0_6_86 l_0_6_86)))
 (let ((?x24543 (* l_0_6_85 l_0_6_85)))
 (let ((?x24541 (* l_0_6_84 l_0_6_84)))
 (let ((?x24539 (* l_0_6_83 l_0_6_83)))
 (let ((?x24537 (* l_0_6_82 l_0_6_82)))
 (let ((?x24535 (* l_0_6_45 l_0_6_45)))
 (let ((?x24533 (* l_0_6_44 l_0_6_44)))
 (let ((?x24531 (* l_0_6_43 l_0_6_43)))
 (let ((?x24529 (* l_0_6_42 l_0_6_42)))
 (let ((?x24527 (* l_0_6_41 l_0_6_41)))
 (let ((?x24525 (* l_0_6_40 l_0_6_40)))
 (let ((?x24523 (* l_0_6_39 l_0_6_39)))
 (let ((?x24521 (* l_0_6_38 l_0_6_38)))
 (let ((?x24519 (* l_0_6_37 l_0_6_37)))
 (let ((?x26983 (* l_0_6_270 l_0_6_270)))
 (let ((?x26981 (* l_0_6_269 l_0_6_269)))
 (let ((?x26979 (* l_0_6_268 l_0_6_268)))
 (let ((?x26977 (* l_0_6_267 l_0_6_267)))
 (let ((?x26975 (* l_0_6_266 l_0_6_266)))
 (let ((?x26973 (* l_0_6_265 l_0_6_265)))
 (let ((?x26971 (* l_0_6_264 l_0_6_264)))
 (let ((?x26972 (- (- (* (- l_0_6_262) l_0_6_262) (* l_0_6_263 l_0_6_263)) ?x26971)))
 (let ((?x26985 (+ (- (- (- (- (- (- ?x26972 ?x26973) ?x26975) ?x26977) ?x26979) ?x26981) ?x26983) ?x24519)))
 (let ((?x26992 (+ (+ (+ (+ (+ (+ (+ ?x26985 ?x24521) ?x24523) ?x24525) ?x24527) ?x24529) ?x24531) ?x24533)))
 (let ((?x26999 (- (- (- (- (- (- (+ ?x26992 ?x24535) ?x24537) ?x24539) ?x24541) ?x24543) ?x24545) ?x24547)))
 (= (- (- (- ?x26999 ?x24549) ?x24551) ?x24553) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x27036 (* ?x25444 l_0_6_92)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_137) ?x27036) 0.0))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x10452 (* ?x25444 l_0_6_97)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_142) ?x10452) 0.0))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x22693 (* ?x3708 l_0_6_151)))
 (= (+ (* (* (- 2.0) l_0_6_106) l_0_6_91) ?x22693) 0.0))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27064 (* ?x3708 l_0_6_157)))
 (= (+ (* (* (- 2.0) l_0_6_112) l_0_6_91) ?x27064) 0.0))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x27085 (* ?x25685 l_0_6_98)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x27083 (* ?x25682 l_0_6_97)))
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25585 (* ?x25564 l_0_6_233)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25583 (* ?x25561 l_0_6_232)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27079 (* ?x22881 l_0_6_143)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27077 (* ?x22878 l_0_6_142)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27071 (* ?x3708 l_0_6_164)))
 (let ((?x27081 (+ (- (- (+ (* (* (- 2.0) l_0_6_119) l_0_6_91) ?x27071) ?x27077) ?x27079) ?x25583)))
 (= (+ (+ (+ ?x27081 ?x25585) ?x27083) ?x27085) 0.0)))))))))))))))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x10470 (* ?x3708 l_0_6_172)))
 (= (+ (* (* (- 2.0) l_0_6_127) l_0_6_91) ?x10470) 0.0))))
(assert
 (let ((?x27121 (* l_0_6_93 l_0_6_93)))
 (let ((?x27119 (* l_0_6_92 l_0_6_92)))
 (let ((?x27113 (* l_0_6_138 l_0_6_138)))
 (let ((?x27111 (* l_0_6_137 l_0_6_137)))
 (let ((?x27114 (+ ?x27111 ?x27113)))
 (= (- (- ?x27114 ?x27119) ?x27121) 0.0)))))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x25686 (* ?x25685 l_0_6_95)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x25683 (* ?x25682 l_0_6_94)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x25670 (* ?x22881 l_0_6_140)))
 (= (- (- (+ (* (* 2.0 l_0_6_137) l_0_6_139) ?x25670) ?x25683) ?x25686) 0.0))))))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x27085 (* ?x25685 l_0_6_98)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x27083 (* ?x25682 l_0_6_97)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27079 (* ?x22881 l_0_6_143)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27077 (* ?x22878 l_0_6_142)))
 (= (- (- (+ ?x27077 ?x27079) ?x27083) ?x27085) 0.0))))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x22882 (* ?x22881 l_0_6_152)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x22879 (* ?x22878 l_0_6_151)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22871 (* ?x22616 l_0_6_93)))
 (let ((?x22883 (+ (+ (- (* (* (- 2.0) l_0_6_106) l_0_6_92) ?x22871) ?x22879) ?x22882)))
 (= ?x22883 0.0)))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27154 (* ?x22881 l_0_6_158)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27152 (* ?x22878 l_0_6_157)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27150 (* ?x26593 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_112) l_0_6_92) ?x27150) ?x27152) ?x27154) 0.0))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27171 (* ?x22881 l_0_6_165)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27169 (* ?x22878 l_0_6_164)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27162 (* ?x26759 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_119) l_0_6_92) ?x27162) ?x27169) ?x27171) 0.0))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27191 (* ?x22881 l_0_6_173)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27189 (* ?x22878 l_0_6_172)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27187 (* ?x26853 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_127) l_0_6_92) ?x27187) ?x27189) ?x27191) 0.0))))))))
(assert
 (let ((?x25898 (* l_0_6_96 l_0_6_96)))
 (let ((?x25896 (* l_0_6_95 l_0_6_95)))
 (let ((?x25894 (* l_0_6_94 l_0_6_94)))
 (let ((?x25876 (* l_0_6_141 l_0_6_141)))
 (let ((?x27202 (- (+ (+ (* l_0_6_139 l_0_6_139) (* l_0_6_140 l_0_6_140)) ?x25876) ?x25894)))
 (= (- (- ?x27202 ?x25896) ?x25898) 0.0)))))))
(assert
 (let ((?x26098 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x26095 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x26092 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26070 (* ?x23144 l_0_6_144)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26068 (* ?x23141 l_0_6_143)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26066 (* ?x23138 l_0_6_142)))
 (= (- (- (- (+ (+ ?x26066 ?x26068) ?x26070) ?x26092) ?x26095) ?x26098) 0.0)))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x23145 (* ?x23144 l_0_6_153)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x23142 (* ?x23141 l_0_6_152)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x23139 (* ?x23138 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23130 (* ?x22619 l_0_6_96)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23127 (* ?x22616 l_0_6_95)))
 (let ((?x23143 (+ (+ (- (- (* (* (- 2.0) l_0_6_106) l_0_6_94) ?x23127) ?x23130) ?x23139) ?x23142)))
 (let ((?x23146 (+ ?x23143 ?x23145)))
 (= ?x23146 0.0))))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26603 (* ?x23144 l_0_6_159)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26601 (* ?x23141 l_0_6_158)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26599 (* ?x23138 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x26597 (* ?x26596 l_0_6_96)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x26594 (* ?x26593 l_0_6_95)))
 (let ((?x27228 (+ (+ (- (- (* (* (- 2.0) l_0_6_112) l_0_6_94) ?x26594) ?x26597) ?x26599) ?x26601)))
 (= (+ ?x27228 ?x26603) 0.0)))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26769 (* ?x23144 l_0_6_166)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26767 (* ?x23141 l_0_6_165)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26765 (* ?x23138 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x26763 (* ?x26762 l_0_6_96)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x26760 (* ?x26759 l_0_6_95)))
 (let ((?x27242 (+ (+ (- (- (* (* (- 2.0) l_0_6_119) l_0_6_94) ?x26760) ?x26763) ?x26765) ?x26767)))
 (= (+ ?x27242 ?x26769) 0.0)))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26863 (* ?x23144 l_0_6_174)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26861 (* ?x23141 l_0_6_173)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26859 (* ?x23138 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x26857 (* ?x26856 l_0_6_96)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x26854 (* ?x26853 l_0_6_95)))
 (let ((?x27249 (+ (+ (- (- (* (* (- 2.0) l_0_6_127) l_0_6_94) ?x26854) ?x26857) ?x26859) ?x26861)))
 (= (+ ?x27249 ?x26863) 0.0)))))))))))))
(assert
 (let ((?x27269 (* l_0_6_99 l_0_6_99)))
 (let ((?x27267 (* l_0_6_98 l_0_6_98)))
 (let ((?x27265 (* l_0_6_97 l_0_6_97)))
 (let ((?x27263 (* l_0_6_145 l_0_6_145)))
 (let ((?x27261 (* l_0_6_144 l_0_6_144)))
 (let ((?x27259 (* l_0_6_143 l_0_6_143)))
 (let ((?x27260 (+ (+ (* (- l_0_6_100) l_0_6_100) (* l_0_6_142 l_0_6_142)) ?x27259)))
 (= (- (- (- (+ (+ ?x27260 ?x27261) ?x27263) ?x27265) ?x27267) ?x27269) 0.0)))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x23461 (* ?x23460 l_0_6_154)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x23458 (* ?x23457 l_0_6_153)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x23455 (* ?x23454 l_0_6_152)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x23452 (* ?x23451 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23449 (* ?x22619 l_0_6_99)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23447 (* ?x22616 l_0_6_98)))
 (let ((?x22609 (* 2.0 l_0_6_106)))
 (let ((?x23438 (* ?x22609 l_0_6_97)))
 (let ((?x27291 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_109) ?x23438) ?x23447) ?x23449) ?x23452)))
 (= (+ (+ (+ ?x27291 ?x23455) ?x23458) ?x23461) 0.0)))))))))))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27309 (* ?x23460 l_0_6_160)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27307 (* ?x23457 l_0_6_159)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27305 (* ?x23454 l_0_6_158)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27303 (* ?x23451 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27301 (* ?x26596 l_0_6_99)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27299 (* ?x26593 l_0_6_98)))
 (let ((?x10158 (* 2.0 l_0_6_112)))
 (let ((?x27297 (* ?x10158 l_0_6_97)))
 (let ((?x27304 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_115) ?x27297) ?x27299) ?x27301) ?x27303)))
 (= (+ (+ (+ ?x27304 ?x27305) ?x27307) ?x27309) 0.0)))))))))))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27351 (* ?x23460 l_0_6_167)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27349 (* ?x23457 l_0_6_166)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27347 (* ?x23454 l_0_6_165)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27345 (* ?x23451 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27343 (* ?x26762 l_0_6_99)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27341 (* ?x26759 l_0_6_98)))
 (let ((?x26757 (* 2.0 l_0_6_119)))
 (let ((?x27339 (* ?x26757 l_0_6_97)))
 (let ((?x27346 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_122) ?x27339) ?x27341) ?x27343) ?x27345)))
 (= (+ (+ (+ ?x27346 ?x27347) ?x27349) ?x27351) 0.0)))))))))))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27386 (* ?x23460 l_0_6_175)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27384 (* ?x23457 l_0_6_174)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27382 (* ?x23454 l_0_6_173)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27380 (* ?x23451 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x27378 (* ?x26856 l_0_6_99)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27369 (* ?x26853 l_0_6_98)))
 (let ((?x26851 (* 2.0 l_0_6_127)))
 (let ((?x27365 (* ?x26851 l_0_6_97)))
 (let ((?x27381 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_130) ?x27365) ?x27369) ?x27378) ?x27380)))
 (= (+ (+ (+ ?x27381 ?x27382) ?x27384) ?x27386) 0.0)))))))))))))))))
(assert
 (let ((?x24012 (* l_0_6_156 l_0_6_156)))
 (let ((?x24010 (* l_0_6_155 l_0_6_155)))
 (let ((?x24008 (* l_0_6_154 l_0_6_154)))
 (let ((?x24006 (* l_0_6_153 l_0_6_153)))
 (let ((?x24004 (* l_0_6_152 l_0_6_152)))
 (let ((?x24002 (* l_0_6_151 l_0_6_151)))
 (let ((?x24000 (* l_0_6_111 l_0_6_111)))
 (let ((?x23998 (* l_0_6_110 l_0_6_110)))
 (let ((?x23987 (* l_0_6_109 l_0_6_109)))
 (let ((?x23984 (* l_0_6_108 l_0_6_108)))
 (let ((?x23986 (- (- (* (- l_0_6_106) l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x23984)))
 (let ((?x24009 (+ (+ (+ (+ (- (- (- ?x23986 ?x23987) ?x23998) ?x24000) ?x24002) ?x24004) ?x24006) ?x24008)))
 (let ((?x24013 (+ (+ ?x24009 ?x24010) ?x24012)))
 (= ?x24013 0.0)))))))))))))))
(assert
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24364 (* ?x22646 l_0_6_169)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24362 (* ?x22643 l_0_6_168)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24360 (* ?x22640 l_0_6_167)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24358 (* ?x22637 l_0_6_166)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24356 (* ?x22634 l_0_6_165)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24354 (* ?x22631 l_0_6_164)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24352 (* ?x22628 l_0_6_124)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24350 (* ?x22625 l_0_6_123)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24348 (* ?x22622 l_0_6_122)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24346 (* ?x22619 l_0_6_121)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24344 (* ?x22616 l_0_6_120)))
 (let ((?x24351 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_119) ?x24344) ?x24346) ?x24348) ?x24350)))
 (let ((?x24365 (+ (+ (+ (+ (+ (+ (- ?x24351 ?x24352) ?x24354) ?x24356) ?x24358) ?x24360) ?x24362) ?x24364)))
 (= ?x24365 0.0))))))))))))))))))))))))))
(assert
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24517 (* ?x22646 l_0_6_177)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24515 (* ?x22643 l_0_6_176)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24513 (* ?x22640 l_0_6_175)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24511 (* ?x22637 l_0_6_174)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24509 (* ?x22634 l_0_6_173)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24507 (* ?x22631 l_0_6_172)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24505 (* ?x22628 l_0_6_132)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24486 (* ?x22625 l_0_6_131)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24482 (* ?x22622 l_0_6_130)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24478 (* ?x22619 l_0_6_129)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24474 (* ?x22616 l_0_6_128)))
 (let ((?x24487 (- (- (- (- (* (* (- 2.0) l_0_6_106) l_0_6_127) ?x24474) ?x24478) ?x24482) ?x24486)))
 (let ((?x24518 (+ (+ (+ (+ (+ (+ (- ?x24487 ?x24505) ?x24507) ?x24509) ?x24511) ?x24513) ?x24515) ?x24517)))
 (= ?x24518 0.0))))))))))))))))))))))))))
(assert
 (let ((?x27439 (* l_0_6_163 l_0_6_163)))
 (let ((?x27437 (* l_0_6_162 l_0_6_162)))
 (let ((?x27435 (* l_0_6_161 l_0_6_161)))
 (let ((?x27433 (* l_0_6_160 l_0_6_160)))
 (let ((?x27431 (* l_0_6_159 l_0_6_159)))
 (let ((?x27429 (* l_0_6_158 l_0_6_158)))
 (let ((?x27427 (* l_0_6_157 l_0_6_157)))
 (let ((?x27425 (* l_0_6_118 l_0_6_118)))
 (let ((?x27423 (* l_0_6_117 l_0_6_117)))
 (let ((?x27421 (* l_0_6_116 l_0_6_116)))
 (let ((?x27419 (* l_0_6_115 l_0_6_115)))
 (let ((?x27417 (* l_0_6_114 l_0_6_114)))
 (let ((?x27418 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27417)))
 (let ((?x27432 (+ (+ (+ (- (- (- (- ?x27418 ?x27419) ?x27421) ?x27423) ?x27425) ?x27427) ?x27429) ?x27431)))
 (= (+ (+ (+ (+ ?x27432 ?x27433) ?x27435) ?x27437) ?x27439) 0.0))))))))))))))))
(assert
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27506 (* ?x27505 l_0_6_170)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27503 (* ?x27502 l_0_6_169)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27500 (* ?x27499 l_0_6_168)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27497 (* ?x27496 l_0_6_167)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27494 (* ?x27493 l_0_6_166)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27491 (* ?x27490 l_0_6_165)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27488 (* ?x27487 l_0_6_164)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27485 (* ?x27484 l_0_6_125)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27482 (* ?x27481 l_0_6_124)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27479 (* ?x27478 l_0_6_123)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27476 (* ?x27475 l_0_6_122)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27473 (* ?x26596 l_0_6_121)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27471 (* ?x26593 l_0_6_120)))
 (let ((?x27480 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_119) ?x27471) ?x27473) ?x27476) ?x27479)))
 (let ((?x27501 (+ (+ (+ (+ (+ (- (- ?x27480 ?x27482) ?x27485) ?x27488) ?x27491) ?x27494) ?x27497) ?x27500)))
 (= (+ (+ ?x27501 ?x27503) ?x27506) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x27085 (* ?x25685 l_0_6_98)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x27083 (* ?x25682 l_0_6_97)))
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27577 (* ?x27505 l_0_6_178)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27575 (* ?x27502 l_0_6_177)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27573 (* ?x27499 l_0_6_176)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27571 (* ?x27496 l_0_6_175)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27569 (* ?x27493 l_0_6_174)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27567 (* ?x27490 l_0_6_173)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27565 (* ?x27487 l_0_6_172)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27079 (* ?x22881 l_0_6_143)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27077 (* ?x22878 l_0_6_142)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27484 l_0_6_133)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27481 l_0_6_132)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27547 (* ?x27478 l_0_6_131)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27544 (* ?x27475 l_0_6_130)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27540 (* ?x26596 l_0_6_129)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27536 (* ?x26593 l_0_6_128)))
 (let ((?x27558 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_127) ?x27536) ?x27540) ?x27544) ?x27547)))
 (let ((?x27562 (- (- ?x27558 ?x27559) ?x27561)))
 (let ((?x27574 (+ (+ (+ (+ (+ (+ (+ ?x27562 ?x27077) ?x27079) ?x27565) ?x27567) ?x27569) ?x27571) ?x27573)))
 (= (- (- (+ (+ ?x27574 ?x27575) ?x27577) ?x27083) ?x27085) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x27634 (* l_0_6_171 l_0_6_171)))
 (let ((?x27632 (* l_0_6_170 l_0_6_170)))
 (let ((?x27630 (* l_0_6_169 l_0_6_169)))
 (let ((?x27628 (* l_0_6_168 l_0_6_168)))
 (let ((?x27626 (* l_0_6_167 l_0_6_167)))
 (let ((?x27624 (* l_0_6_166 l_0_6_166)))
 (let ((?x27622 (* l_0_6_165 l_0_6_165)))
 (let ((?x27620 (* l_0_6_164 l_0_6_164)))
 (let ((?x27618 (* l_0_6_126 l_0_6_126)))
 (let ((?x27616 (* l_0_6_125 l_0_6_125)))
 (let ((?x27614 (* l_0_6_124 l_0_6_124)))
 (let ((?x27612 (* l_0_6_123 l_0_6_123)))
 (let ((?x27610 (* l_0_6_122 l_0_6_122)))
 (let ((?x27608 (* l_0_6_121 l_0_6_121)))
 (let ((?x27609 (- (- (* (- l_0_6_119) l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27608)))
 (let ((?x27623 (+ (+ (- (- (- (- (- ?x27609 ?x27610) ?x27612) ?x27614) ?x27616) ?x27618) ?x27620) ?x27622)))
 (= (+ (+ (+ (+ (+ (+ ?x27623 ?x27624) ?x27626) ?x27628) ?x27630) ?x27632) ?x27634) 0.0))))))))))))))))))
(assert
 (let ((?x27697 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27694 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27691 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27688 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27685 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27682 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27679 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27676 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27673 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27670 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27667 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27664 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27661 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27658 (* ?x26762 l_0_6_129)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27656 (* ?x26759 l_0_6_128)))
 (let ((?x27665 (- (- (- (- (* (* (- 2.0) l_0_6_119) l_0_6_127) ?x27656) ?x27658) ?x27661) ?x27664)))
 (let ((?x27686 (+ (+ (+ (+ (- (- (- ?x27665 ?x27667) ?x27670) ?x27673) ?x27676) ?x27679) ?x27682) ?x27685)))
 (= (+ (+ (+ (+ ?x27686 ?x27688) ?x27691) ?x27694) ?x27697) 0.0)))))))))))))))))))))
(assert
 (let ((?x27769 (* l_0_6_180 l_0_6_180)))
 (let ((?x27767 (* l_0_6_179 l_0_6_179)))
 (let ((?x27765 (* l_0_6_178 l_0_6_178)))
 (let ((?x27763 (* l_0_6_177 l_0_6_177)))
 (let ((?x27761 (* l_0_6_176 l_0_6_176)))
 (let ((?x27759 (* l_0_6_175 l_0_6_175)))
 (let ((?x27757 (* l_0_6_174 l_0_6_174)))
 (let ((?x27755 (* l_0_6_173 l_0_6_173)))
 (let ((?x27753 (* l_0_6_172 l_0_6_172)))
 (let ((?x27751 (* l_0_6_135 l_0_6_135)))
 (let ((?x27749 (* l_0_6_134 l_0_6_134)))
 (let ((?x27747 (* l_0_6_133 l_0_6_133)))
 (let ((?x27745 (* l_0_6_132 l_0_6_132)))
 (let ((?x27732 (* l_0_6_131 l_0_6_131)))
 (let ((?x27729 (* l_0_6_130 l_0_6_130)))
 (let ((?x27725 (* l_0_6_129 l_0_6_129)))
 (let ((?x27727 (- (- (* (- l_0_6_127) l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27725)))
 (let ((?x27754 (+ (- (- (- (- (- (- ?x27727 ?x27729) ?x27732) ?x27745) ?x27747) ?x27749) ?x27751) ?x27753)))
 (let ((?x27768 (+ (+ (+ (+ (+ (+ (+ ?x27754 ?x27755) ?x27757) ?x27759) ?x27761) ?x27763) ?x27765) ?x27767)))
 (= (+ ?x27768 ?x27769) 0.0)))))))))))))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x27036 (* ?x25444 l_0_6_92)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_137) ?x27036) 0.0))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x10452 (* ?x25444 l_0_6_97)))
 (= (- (* (* 2.0 l_0_6_136) l_0_6_142) ?x10452) 0.0))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x24635 (* ?x3708 l_0_6_146)))
 (= (+ (* (* (- 2.0) l_0_6_101) l_0_6_91) ?x24635) 0.0))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27064 (* ?x3708 l_0_6_157)))
 (= (+ (* (* (- 2.0) l_0_6_112) l_0_6_91) ?x27064) 0.0))))
(assert
 (let ((?x26631 (* 2.0 l_0_6_253)))
 (let ((?x26695 (* ?x26631 l_0_6_268)))
 (let ((?x26628 (* 2.0 l_0_6_252)))
 (let ((?x26693 (* ?x26628 l_0_6_267)))
 (let ((?x26625 (* 2.0 l_0_6_251)))
 (let ((?x26691 (* ?x26625 l_0_6_266)))
 (let ((?x26622 (* 2.0 l_0_6_250)))
 (let ((?x26689 (* ?x26622 l_0_6_265)))
 (let ((?x26618 (* 2.0 l_0_6_249)))
 (let ((?x26686 (* ?x26618 l_0_6_264)))
 (let ((?x26615 (* 2.0 l_0_6_248)))
 (let ((?x26684 (* ?x26615 l_0_6_263)))
 (let ((?x26612 (* 2.0 l_0_6_247)))
 (let ((?x26682 (* ?x26612 l_0_6_262)))
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27577 (* ?x27505 l_0_6_178)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27575 (* ?x27502 l_0_6_177)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27573 (* ?x27499 l_0_6_176)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27571 (* ?x27496 l_0_6_175)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27569 (* ?x27493 l_0_6_174)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27567 (* ?x27490 l_0_6_173)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27565 (* ?x27487 l_0_6_172)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27071 (* ?x3708 l_0_6_164)))
 (let ((?x26757 (* 2.0 l_0_6_119)))
 (let ((?x27807 (* ?x26757 l_0_6_91)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27484 l_0_6_133)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27481 l_0_6_132)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27547 (* ?x27478 l_0_6_131)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27544 (* ?x27475 l_0_6_130)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27540 (* ?x26596 l_0_6_129)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27536 (* ?x26593 l_0_6_128)))
 (let ((?x27804 (+ (+ (+ (+ (* (* 2.0 l_0_6_112) l_0_6_127) ?x27536) ?x27540) ?x27544) ?x27547)))
 (let ((?x27812 (- (- (- (+ (- (+ (+ ?x27804 ?x27559) ?x27561) ?x27807) ?x27071) ?x27565) ?x27567) ?x27569)))
 (let ((?x27819 (+ (+ (+ (- (- (- (- ?x27812 ?x27571) ?x27573) ?x27575) ?x27577) ?x26682) ?x26684) ?x26686)))
 (= (+ (+ (+ (+ ?x27819 ?x26689) ?x26691) ?x26693) ?x26695) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x10470 (* ?x3708 l_0_6_172)))
 (= (+ (* (* (- 2.0) l_0_6_127) l_0_6_91) ?x10470) 0.0))))
(assert
 (let ((?x27121 (* l_0_6_93 l_0_6_93)))
 (let ((?x27119 (* l_0_6_92 l_0_6_92)))
 (let ((?x27113 (* l_0_6_138 l_0_6_138)))
 (let ((?x27111 (* l_0_6_137 l_0_6_137)))
 (let ((?x27114 (+ ?x27111 ?x27113)))
 (= (- (- ?x27114 ?x27119) ?x27121) 0.0)))))))
(assert
 (let ((?x25685 (* 2.0 l_0_6_93)))
 (let ((?x25686 (* ?x25685 l_0_6_95)))
 (let ((?x25682 (* 2.0 l_0_6_92)))
 (let ((?x25683 (* ?x25682 l_0_6_94)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x25670 (* ?x22881 l_0_6_140)))
 (= (- (- (+ (* (* 2.0 l_0_6_137) l_0_6_139) ?x25670) ?x25683) ?x25686) 0.0))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x24716 (* ?x22881 l_0_6_147)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x6805 (* ?x22878 l_0_6_146)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6807 (* ?x23724 l_0_6_93)))
 (let ((?x24717 (+ (+ (- (* (* (- 2.0) l_0_6_101) l_0_6_92) ?x6807) ?x6805) ?x24716)))
 (= ?x24717 0.0)))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27154 (* ?x22881 l_0_6_158)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27152 (* ?x22878 l_0_6_157)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27150 (* ?x26593 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_112) l_0_6_92) ?x27150) ?x27152) ?x27154) 0.0))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27171 (* ?x22881 l_0_6_165)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27169 (* ?x22878 l_0_6_164)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27162 (* ?x26759 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_119) l_0_6_92) ?x27162) ?x27169) ?x27171) 0.0))))))))
(assert
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27191 (* ?x22881 l_0_6_173)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27189 (* ?x22878 l_0_6_172)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27187 (* ?x26853 l_0_6_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_6_127) l_0_6_92) ?x27187) ?x27189) ?x27191) 0.0))))))))
(assert
 (let ((?x25898 (* l_0_6_96 l_0_6_96)))
 (let ((?x25896 (* l_0_6_95 l_0_6_95)))
 (let ((?x25894 (* l_0_6_94 l_0_6_94)))
 (let ((?x25876 (* l_0_6_141 l_0_6_141)))
 (let ((?x27202 (- (+ (+ (* l_0_6_139 l_0_6_139) (* l_0_6_140 l_0_6_140)) ?x25876) ?x25894)))
 (= (- (- ?x27202 ?x25896) ?x25898) 0.0)))))))
(assert
 (let ((?x26098 (* (* 2.0 l_0_6_96) l_0_6_99)))
 (let ((?x26095 (* (* 2.0 l_0_6_95) l_0_6_98)))
 (let ((?x26092 (* (* 2.0 l_0_6_94) l_0_6_97)))
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26070 (* ?x23144 l_0_6_144)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26068 (* ?x23141 l_0_6_143)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26066 (* ?x23138 l_0_6_142)))
 (= (- (- (- (+ (+ ?x26066 ?x26068) ?x26070) ?x26092) ?x26095) ?x26098) 0.0)))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x24740 (* ?x23144 l_0_6_148)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x24738 (* ?x23141 l_0_6_147)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x24736 (* ?x23138 l_0_6_146)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24734 (* ?x23729 l_0_6_96)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6843 (* ?x23724 l_0_6_95)))
 (let ((?x24739 (+ (+ (- (- (* (* (- 2.0) l_0_6_101) l_0_6_94) ?x6843) ?x24734) ?x24736) ?x24738)))
 (let ((?x24741 (+ ?x24739 ?x24740)))
 (= ?x24741 0.0))))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26603 (* ?x23144 l_0_6_159)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26601 (* ?x23141 l_0_6_158)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26599 (* ?x23138 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x26597 (* ?x26596 l_0_6_96)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x26594 (* ?x26593 l_0_6_95)))
 (let ((?x27228 (+ (+ (- (- (* (* (- 2.0) l_0_6_112) l_0_6_94) ?x26594) ?x26597) ?x26599) ?x26601)))
 (= (+ ?x27228 ?x26603) 0.0)))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26769 (* ?x23144 l_0_6_166)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26767 (* ?x23141 l_0_6_165)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26765 (* ?x23138 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x26763 (* ?x26762 l_0_6_96)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x26760 (* ?x26759 l_0_6_95)))
 (let ((?x27242 (+ (+ (- (- (* (* (- 2.0) l_0_6_119) l_0_6_94) ?x26760) ?x26763) ?x26765) ?x26767)))
 (= (+ ?x27242 ?x26769) 0.0)))))))))))))
(assert
 (let ((?x23144 (* 2.0 l_0_6_141)))
 (let ((?x26863 (* ?x23144 l_0_6_174)))
 (let ((?x23141 (* 2.0 l_0_6_140)))
 (let ((?x26861 (* ?x23141 l_0_6_173)))
 (let ((?x23138 (* 2.0 l_0_6_139)))
 (let ((?x26859 (* ?x23138 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x26857 (* ?x26856 l_0_6_96)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x26854 (* ?x26853 l_0_6_95)))
 (let ((?x27249 (+ (+ (- (- (* (* (- 2.0) l_0_6_127) l_0_6_94) ?x26854) ?x26857) ?x26859) ?x26861)))
 (= (+ ?x27249 ?x26863) 0.0)))))))))))))
(assert
 (let ((?x27269 (* l_0_6_99 l_0_6_99)))
 (let ((?x27267 (* l_0_6_98 l_0_6_98)))
 (let ((?x27265 (* l_0_6_97 l_0_6_97)))
 (let ((?x27263 (* l_0_6_145 l_0_6_145)))
 (let ((?x27261 (* l_0_6_144 l_0_6_144)))
 (let ((?x27259 (* l_0_6_143 l_0_6_143)))
 (let ((?x27260 (+ (+ (* (- l_0_6_100) l_0_6_100) (* l_0_6_142 l_0_6_142)) ?x27259)))
 (= (- (- (- (+ (+ ?x27260 ?x27261) ?x27263) ?x27265) ?x27267) ?x27269) 0.0)))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27309 (* ?x23460 l_0_6_160)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27307 (* ?x23457 l_0_6_159)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27305 (* ?x23454 l_0_6_158)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27303 (* ?x23451 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27301 (* ?x26596 l_0_6_99)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27299 (* ?x26593 l_0_6_98)))
 (let ((?x10158 (* 2.0 l_0_6_112)))
 (let ((?x27297 (* ?x10158 l_0_6_97)))
 (let ((?x27304 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_115) ?x27297) ?x27299) ?x27301) ?x27303)))
 (= (+ (+ (+ ?x27304 ?x27305) ?x27307) ?x27309) 0.0)))))))))))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27351 (* ?x23460 l_0_6_167)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27349 (* ?x23457 l_0_6_166)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27347 (* ?x23454 l_0_6_165)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27345 (* ?x23451 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27343 (* ?x26762 l_0_6_99)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27341 (* ?x26759 l_0_6_98)))
 (let ((?x26757 (* 2.0 l_0_6_119)))
 (let ((?x27339 (* ?x26757 l_0_6_97)))
 (let ((?x27346 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_122) ?x27339) ?x27341) ?x27343) ?x27345)))
 (= (+ (+ (+ ?x27346 ?x27347) ?x27349) ?x27351) 0.0)))))))))))))))))
(assert
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27386 (* ?x23460 l_0_6_175)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27384 (* ?x23457 l_0_6_174)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27382 (* ?x23454 l_0_6_173)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27380 (* ?x23451 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x27378 (* ?x26856 l_0_6_99)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27369 (* ?x26853 l_0_6_98)))
 (let ((?x26851 (* 2.0 l_0_6_127)))
 (let ((?x27365 (* ?x26851 l_0_6_97)))
 (let ((?x27381 (+ (- (- (- (* (* (- 2.0) l_0_6_100) l_0_6_130) ?x27365) ?x27369) ?x27378) ?x27380)))
 (= (+ (+ (+ ?x27381 ?x27382) ?x27384) ?x27386) 0.0)))))))))))))))))
(assert
 (let ((?x24804 (* l_0_6_150 l_0_6_150)))
 (let ((?x24802 (* l_0_6_149 l_0_6_149)))
 (let ((?x24800 (* l_0_6_148 l_0_6_148)))
 (let ((?x24798 (* l_0_6_147 l_0_6_147)))
 (let ((?x24796 (* l_0_6_146 l_0_6_146)))
 (let ((?x24791 (* l_0_6_105 l_0_6_105)))
 (let ((?x6897 (* l_0_6_104 l_0_6_104)))
 (let ((?x6898 (* l_0_6_103 l_0_6_103)))
 (let ((?x6896 (- (- (* (- l_0_6_101) l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x6898)))
 (let ((?x24792 (- (- ?x6896 ?x6897) ?x24791)))
 (= (+ (+ (+ (+ (+ ?x24792 ?x24796) ?x24798) ?x24800) ?x24802) ?x24804) 0.0))))))))))))
(assert
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24840 (* ?x23768 l_0_6_161)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24838 (* ?x23763 l_0_6_160)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24836 (* ?x23760 l_0_6_159)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24834 (* ?x23757 l_0_6_158)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24832 (* ?x23754 l_0_6_157)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24830 (* ?x23743 l_0_6_116)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24828 (* ?x23740 l_0_6_115)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24826 (* ?x23729 l_0_6_114)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6990 (* ?x23724 l_0_6_113)))
 (let ((?x24831 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_112) ?x6990) ?x24826) ?x24828) ?x24830)))
 (let ((?x24841 (+ (+ (+ (+ (+ ?x24831 ?x24832) ?x24834) ?x24836) ?x24838) ?x24840)))
 (= ?x24841 0.0))))))))))))))))))))))
(assert
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24885 (* ?x23768 l_0_6_168)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24883 (* ?x23763 l_0_6_167)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24881 (* ?x23760 l_0_6_166)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24879 (* ?x23757 l_0_6_165)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24877 (* ?x23754 l_0_6_164)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24875 (* ?x23743 l_0_6_123)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24873 (* ?x23740 l_0_6_122)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24871 (* ?x23729 l_0_6_121)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24869 (* ?x23724 l_0_6_120)))
 (let ((?x24876 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_119) ?x24869) ?x24871) ?x24873) ?x24875)))
 (let ((?x24886 (+ (+ (+ (+ (+ ?x24876 ?x24877) ?x24879) ?x24881) ?x24883) ?x24885)))
 (= ?x24886 0.0))))))))))))))))))))))
(assert
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24946 (* ?x23768 l_0_6_176)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24944 (* ?x23763 l_0_6_175)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24942 (* ?x23760 l_0_6_174)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24940 (* ?x23757 l_0_6_173)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24938 (* ?x23754 l_0_6_172)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24936 (* ?x23743 l_0_6_131)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24934 (* ?x23740 l_0_6_130)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24932 (* ?x23729 l_0_6_129)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24930 (* ?x23724 l_0_6_128)))
 (let ((?x24937 (- (- (- (- (* (* (- 2.0) l_0_6_101) l_0_6_127) ?x24930) ?x24932) ?x24934) ?x24936)))
 (let ((?x24947 (+ (+ (+ (+ (+ ?x24937 ?x24938) ?x24940) ?x24942) ?x24944) ?x24946)))
 (= ?x24947 0.0))))))))))))))))))))))
(assert
 (let ((?x27439 (* l_0_6_163 l_0_6_163)))
 (let ((?x27437 (* l_0_6_162 l_0_6_162)))
 (let ((?x27435 (* l_0_6_161 l_0_6_161)))
 (let ((?x27433 (* l_0_6_160 l_0_6_160)))
 (let ((?x27431 (* l_0_6_159 l_0_6_159)))
 (let ((?x27429 (* l_0_6_158 l_0_6_158)))
 (let ((?x27427 (* l_0_6_157 l_0_6_157)))
 (let ((?x27425 (* l_0_6_118 l_0_6_118)))
 (let ((?x27423 (* l_0_6_117 l_0_6_117)))
 (let ((?x27421 (* l_0_6_116 l_0_6_116)))
 (let ((?x27419 (* l_0_6_115 l_0_6_115)))
 (let ((?x27417 (* l_0_6_114 l_0_6_114)))
 (let ((?x27418 (- (- (* (- l_0_6_112) l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27417)))
 (let ((?x27432 (+ (+ (+ (- (- (- (- ?x27418 ?x27419) ?x27421) ?x27423) ?x27425) ?x27427) ?x27429) ?x27431)))
 (= (+ (+ (+ (+ ?x27432 ?x27433) ?x27435) ?x27437) ?x27439) 0.0))))))))))))))))
(assert
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27506 (* ?x27505 l_0_6_170)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27503 (* ?x27502 l_0_6_169)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27500 (* ?x27499 l_0_6_168)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27497 (* ?x27496 l_0_6_167)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27494 (* ?x27493 l_0_6_166)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27491 (* ?x27490 l_0_6_165)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27488 (* ?x27487 l_0_6_164)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27485 (* ?x27484 l_0_6_125)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27482 (* ?x27481 l_0_6_124)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27479 (* ?x27478 l_0_6_123)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27476 (* ?x27475 l_0_6_122)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27473 (* ?x26596 l_0_6_121)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27471 (* ?x26593 l_0_6_120)))
 (let ((?x27480 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_119) ?x27471) ?x27473) ?x27476) ?x27479)))
 (let ((?x27501 (+ (+ (+ (+ (+ (- (- ?x27480 ?x27482) ?x27485) ?x27488) ?x27491) ?x27494) ?x27497) ?x27500)))
 (= (+ (+ ?x27501 ?x27503) ?x27506) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27577 (* ?x27505 l_0_6_178)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27575 (* ?x27502 l_0_6_177)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27573 (* ?x27499 l_0_6_176)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27571 (* ?x27496 l_0_6_175)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27569 (* ?x27493 l_0_6_174)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27567 (* ?x27490 l_0_6_173)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27565 (* ?x27487 l_0_6_172)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27561 (* ?x27484 l_0_6_133)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27559 (* ?x27481 l_0_6_132)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27547 (* ?x27478 l_0_6_131)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27544 (* ?x27475 l_0_6_130)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27540 (* ?x26596 l_0_6_129)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27536 (* ?x26593 l_0_6_128)))
 (let ((?x27558 (- (- (- (- (* (* (- 2.0) l_0_6_112) l_0_6_127) ?x27536) ?x27540) ?x27544) ?x27547)))
 (let ((?x27562 (- (- ?x27558 ?x27559) ?x27561)))
 (let ((?x27860 (+ (+ (+ (+ (+ (+ (+ ?x27562 ?x27565) ?x27567) ?x27569) ?x27571) ?x27573) ?x27575) ?x27577)))
 (= ?x27860 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x27634 (* l_0_6_171 l_0_6_171)))
 (let ((?x27632 (* l_0_6_170 l_0_6_170)))
 (let ((?x27630 (* l_0_6_169 l_0_6_169)))
 (let ((?x27628 (* l_0_6_168 l_0_6_168)))
 (let ((?x27626 (* l_0_6_167 l_0_6_167)))
 (let ((?x27624 (* l_0_6_166 l_0_6_166)))
 (let ((?x27622 (* l_0_6_165 l_0_6_165)))
 (let ((?x27620 (* l_0_6_164 l_0_6_164)))
 (let ((?x27618 (* l_0_6_126 l_0_6_126)))
 (let ((?x27616 (* l_0_6_125 l_0_6_125)))
 (let ((?x27614 (* l_0_6_124 l_0_6_124)))
 (let ((?x27612 (* l_0_6_123 l_0_6_123)))
 (let ((?x27610 (* l_0_6_122 l_0_6_122)))
 (let ((?x27608 (* l_0_6_121 l_0_6_121)))
 (let ((?x27609 (- (- (* (- l_0_6_119) l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27608)))
 (let ((?x27623 (+ (+ (- (- (- (- (- ?x27609 ?x27610) ?x27612) ?x27614) ?x27616) ?x27618) ?x27620) ?x27622)))
 (= (+ (+ (+ (+ (+ (+ ?x27623 ?x27624) ?x27626) ?x27628) ?x27630) ?x27632) ?x27634) 0.0))))))))))))))))))
(assert
 (let ((?x27697 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27694 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27691 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27688 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27685 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27682 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27679 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27676 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27673 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27670 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27667 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27664 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27661 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27658 (* ?x26762 l_0_6_129)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27656 (* ?x26759 l_0_6_128)))
 (let ((?x27665 (- (- (- (- (* (* (- 2.0) l_0_6_119) l_0_6_127) ?x27656) ?x27658) ?x27661) ?x27664)))
 (let ((?x27686 (+ (+ (+ (+ (- (- (- ?x27665 ?x27667) ?x27670) ?x27673) ?x27676) ?x27679) ?x27682) ?x27685)))
 (= (+ (+ (+ (+ ?x27686 ?x27688) ?x27691) ?x27694) ?x27697) 0.0)))))))))))))))))))))
(assert
 (let ((?x27769 (* l_0_6_180 l_0_6_180)))
 (let ((?x27767 (* l_0_6_179 l_0_6_179)))
 (let ((?x27765 (* l_0_6_178 l_0_6_178)))
 (let ((?x27763 (* l_0_6_177 l_0_6_177)))
 (let ((?x27761 (* l_0_6_176 l_0_6_176)))
 (let ((?x27759 (* l_0_6_175 l_0_6_175)))
 (let ((?x27757 (* l_0_6_174 l_0_6_174)))
 (let ((?x27755 (* l_0_6_173 l_0_6_173)))
 (let ((?x27753 (* l_0_6_172 l_0_6_172)))
 (let ((?x27751 (* l_0_6_135 l_0_6_135)))
 (let ((?x27749 (* l_0_6_134 l_0_6_134)))
 (let ((?x27747 (* l_0_6_133 l_0_6_133)))
 (let ((?x27745 (* l_0_6_132 l_0_6_132)))
 (let ((?x27732 (* l_0_6_131 l_0_6_131)))
 (let ((?x27729 (* l_0_6_130 l_0_6_130)))
 (let ((?x27725 (* l_0_6_129 l_0_6_129)))
 (let ((?x27727 (- (- (* (- l_0_6_127) l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27725)))
 (let ((?x27754 (+ (- (- (- (- (- (- ?x27727 ?x27729) ?x27732) ?x27745) ?x27747) ?x27749) ?x27751) ?x27753)))
 (let ((?x27768 (+ (+ (+ (+ (+ (+ (+ ?x27754 ?x27755) ?x27757) ?x27759) ?x27761) ?x27763) ?x27765) ?x27767)))
 (= (+ ?x27768 ?x27769) 0.0)))))))))))))))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x27036 (* ?x25444 l_0_6_92)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x7406 (* ?x7409 l_0_6_227)))
 (let ((?x27867 (- (* (* (- 2.0) l_0_6_136) l_0_6_137) (* (* 2.0 l_0_6_182) l_0_6_209))))
 (let ((?x27872 (- (+ (- ?x27867 (* (* 2.0 l_0_6_183) l_0_6_210)) ?x7406) (* (* 2.0 l_0_6_272) l_0_6_299))))
 (let ((?x27876 (- (- ?x27872 (* (* 2.0 l_0_6_273) l_0_6_300)) (* (* 2.0 l_0_6_317) l_0_6_344))))
 (= (+ (- ?x27876 (* (* 2.0 l_0_6_318) l_0_6_345)) ?x27036) 0.0)))))))))
(assert
 (let ((?x25444 (* 2.0 l_0_6_91)))
 (let ((?x10452 (* ?x25444 l_0_6_97)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25198 (* ?x7409 l_0_6_232)))
 (let ((?x27923 (- (* (* (- 2.0) l_0_6_136) l_0_6_142) (* (* 2.0 l_0_6_187) l_0_6_209))))
 (let ((?x27927 (- (- ?x27923 (* (* 2.0 l_0_6_188) l_0_6_210)) (* (* 2.0 l_0_6_189) l_0_6_211))))
 (let ((?x27932 (- (+ (- ?x27927 (* (* 2.0 l_0_6_190) l_0_6_212)) ?x25198) (* (* 2.0 l_0_6_277) l_0_6_299))))
 (let ((?x27936 (- (- ?x27932 (* (* 2.0 l_0_6_278) l_0_6_300)) (* (* 2.0 l_0_6_279) l_0_6_301))))
 (let ((?x27940 (- (- ?x27936 (* (* 2.0 l_0_6_280) l_0_6_302)) (* (* 2.0 l_0_6_322) l_0_6_344))))
 (let ((?x27944 (- (- ?x27940 (* (* 2.0 l_0_6_323) l_0_6_345)) (* (* 2.0 l_0_6_324) l_0_6_346))))
 (= (+ (- ?x27944 (* (* 2.0 l_0_6_325) l_0_6_347)) ?x10452) 0.0))))))))))))
(assert
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25256 (* ?x7409 l_0_6_236)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x24635 (* ?x3708 l_0_6_146)))
 (let ((?x6596 (* 2.0 l_0_6_101)))
 (let ((?x24633 (* ?x6596 l_0_6_91)))
 (let ((?x28027 (- (- (- ?x24633 ?x24635) (* (* 2.0 l_0_6_191) l_0_6_209)) (* (* 2.0 l_0_6_192) l_0_6_210))))
 (let ((?x28033 (- (- ?x28027 (* (* 2.0 l_0_6_193) l_0_6_211)) (* (* 2.0 l_0_6_194) l_0_6_212))))
 (let ((?x28040 (- (+ (- ?x28033 (* (* 2.0 l_0_6_195) l_0_6_213)) ?x25256) (* (* 2.0 l_0_6_281) l_0_6_299))))
 (let ((?x28046 (- (- ?x28040 (* (* 2.0 l_0_6_282) l_0_6_300)) (* (* 2.0 l_0_6_283) l_0_6_301))))
 (let ((?x28052 (- (- ?x28046 (* (* 2.0 l_0_6_284) l_0_6_302)) (* (* 2.0 l_0_6_285) l_0_6_303))))
 (let ((?x28058 (- (- ?x28052 (* (* 2.0 l_0_6_326) l_0_6_344)) (* (* 2.0 l_0_6_327) l_0_6_345))))
 (let ((?x28064 (- (- ?x28058 (* (* 2.0 l_0_6_328) l_0_6_346)) (* (* 2.0 l_0_6_329) l_0_6_347))))
 (= (- ?x28064 (* (* 2.0 l_0_6_330) l_0_6_348)) 0.0)))))))))))))))
(assert
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25305 (* ?x7409 l_0_6_241)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x22693 (* ?x3708 l_0_6_151)))
 (let ((?x22609 (* 2.0 l_0_6_106)))
 (let ((?x3713 (* ?x22609 l_0_6_91)))
 (let ((?x28100 (- (- (- ?x3713 ?x22693) (* (* 2.0 l_0_6_196) l_0_6_209)) (* (* 2.0 l_0_6_197) l_0_6_210))))
 (let ((?x28104 (- (- ?x28100 (* (* 2.0 l_0_6_198) l_0_6_211)) (* (* 2.0 l_0_6_199) l_0_6_212))))
 (let ((?x28108 (- (- ?x28104 (* (* 2.0 l_0_6_200) l_0_6_213)) (* (* 2.0 l_0_6_201) l_0_6_214))))
 (let ((?x28113 (- (- (+ ?x28108 ?x25305) (* (* 2.0 l_0_6_286) l_0_6_299)) (* (* 2.0 l_0_6_287) l_0_6_300))))
 (let ((?x28117 (- (- ?x28113 (* (* 2.0 l_0_6_288) l_0_6_301)) (* (* 2.0 l_0_6_289) l_0_6_302))))
 (let ((?x28121 (- (- ?x28117 (* (* 2.0 l_0_6_290) l_0_6_303)) (* (* 2.0 l_0_6_291) l_0_6_304))))
 (let ((?x28125 (- (- ?x28121 (* (* 2.0 l_0_6_331) l_0_6_344)) (* (* 2.0 l_0_6_332) l_0_6_345))))
 (let ((?x28129 (- (- ?x28125 (* (* 2.0 l_0_6_333) l_0_6_346)) (* (* 2.0 l_0_6_334) l_0_6_347))))
 (let ((?x28133 (- (- ?x28129 (* (* 2.0 l_0_6_335) l_0_6_348)) (* (* 2.0 l_0_6_336) l_0_6_349))))
 (= ?x28133 0.0)))))))))))))))))
(assert
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25366 (* ?x7409 l_0_6_247)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27064 (* ?x3708 l_0_6_157)))
 (let ((?x28156 (- (- (* (* 2.0 l_0_6_112) l_0_6_91) ?x27064) (* (* 2.0 l_0_6_202) l_0_6_209))))
 (let ((?x28160 (- (- ?x28156 (* (* 2.0 l_0_6_203) l_0_6_210)) (* (* 2.0 l_0_6_204) l_0_6_211))))
 (let ((?x28164 (- (- ?x28160 (* (* 2.0 l_0_6_205) l_0_6_212)) (* (* 2.0 l_0_6_206) l_0_6_213))))
 (let ((?x28168 (- (- ?x28164 (* (* 2.0 l_0_6_207) l_0_6_214)) (* (* 2.0 l_0_6_208) l_0_6_215))))
 (let ((?x28173 (- (- (+ ?x28168 ?x25366) (* (* 2.0 l_0_6_292) l_0_6_299)) (* (* 2.0 l_0_6_293) l_0_6_300))))
 (let ((?x28177 (- (- ?x28173 (* (* 2.0 l_0_6_294) l_0_6_301)) (* (* 2.0 l_0_6_295) l_0_6_302))))
 (let ((?x28181 (- (- ?x28177 (* (* 2.0 l_0_6_296) l_0_6_303)) (* (* 2.0 l_0_6_297) l_0_6_304))))
 (let ((?x28185 (- (- ?x28181 (* (* 2.0 l_0_6_298) l_0_6_305)) (* (* 2.0 l_0_6_337) l_0_6_344))))
 (let ((?x28189 (- (- ?x28185 (* (* 2.0 l_0_6_338) l_0_6_345)) (* (* 2.0 l_0_6_339) l_0_6_346))))
 (let ((?x28193 (- (- ?x28189 (* (* 2.0 l_0_6_340) l_0_6_347)) (* (* 2.0 l_0_6_341) l_0_6_348))))
 (let ((?x28197 (- (- ?x28193 (* (* 2.0 l_0_6_342) l_0_6_349)) (* (* 2.0 l_0_6_343) l_0_6_350))))
 (= ?x28197 0.0)))))))))))))))))
(assert
 (let ((?x28279 (* l_0_6_351 l_0_6_351)))
 (let ((?x28277 (* l_0_6_350 l_0_6_350)))
 (let ((?x28275 (* l_0_6_349 l_0_6_349)))
 (let ((?x28273 (* l_0_6_348 l_0_6_348)))
 (let ((?x28271 (* l_0_6_347 l_0_6_347)))
 (let ((?x28269 (* l_0_6_346 l_0_6_346)))
 (let ((?x28267 (* l_0_6_345 l_0_6_345)))
 (let ((?x28265 (* l_0_6_344 l_0_6_344)))
 (let ((?x28263 (* l_0_6_306 l_0_6_306)))
 (let ((?x28261 (* l_0_6_305 l_0_6_305)))
 (let ((?x28259 (* l_0_6_304 l_0_6_304)))
 (let ((?x28257 (* l_0_6_303 l_0_6_303)))
 (let ((?x28255 (* l_0_6_302 l_0_6_302)))
 (let ((?x28253 (* l_0_6_301 l_0_6_301)))
 (let ((?x28251 (* l_0_6_300 l_0_6_300)))
 (let ((?x28249 (* l_0_6_299 l_0_6_299)))
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25429 (* ?x7409 l_0_6_254)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x27071 (* ?x3708 l_0_6_164)))
 (let ((?x26757 (* 2.0 l_0_6_119)))
 (let ((?x27807 (* ?x26757 l_0_6_91)))
 (let ((?x28229 (- (- (- ?x27807 ?x27071) (* (* 1.0 l_0_6_209) l_0_6_209)) (* (* 1.0 l_0_6_210) l_0_6_210))))
 (let ((?x28235 (- (- ?x28229 (* (* 1.0 l_0_6_211) l_0_6_211)) (* (* 1.0 l_0_6_212) l_0_6_212))))
 (let ((?x28241 (- (- ?x28235 (* (* 1.0 l_0_6_213) l_0_6_213)) (* (* 1.0 l_0_6_214) l_0_6_214))))
 (let ((?x28247 (- (- ?x28241 (* (* 1.0 l_0_6_215) l_0_6_215)) (* (* 1.0 l_0_6_216) l_0_6_216))))
 (let ((?x28260 (- (- (- (- (- (- (+ ?x28247 ?x25429) ?x28249) ?x28251) ?x28253) ?x28255) ?x28257) ?x28259)))
 (let ((?x28274 (- (- (- (- (- (- (- ?x28260 ?x28261) ?x28263) ?x28265) ?x28267) ?x28269) ?x28271) ?x28273)))
 (= (- (- (- ?x28274 ?x28275) ?x28277) ?x28279) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x7409 (* 2.0 l_0_6_226)))
 (let ((?x25496 (* ?x7409 l_0_6_262)))
 (let ((?x3708 (* 2.0 l_0_6_136)))
 (let ((?x10470 (* ?x3708 l_0_6_172)))
 (let ((?x28319 (- (- (* (* 2.0 l_0_6_127) l_0_6_91) ?x10470) (* (* 2.0 l_0_6_209) l_0_6_217))))
 (let ((?x28325 (- (- ?x28319 (* (* 2.0 l_0_6_210) l_0_6_218)) (* (* 2.0 l_0_6_211) l_0_6_219))))
 (let ((?x28331 (- (- ?x28325 (* (* 2.0 l_0_6_212) l_0_6_220)) (* (* 2.0 l_0_6_213) l_0_6_221))))
 (let ((?x28337 (- (- ?x28331 (* (* 2.0 l_0_6_214) l_0_6_222)) (* (* 2.0 l_0_6_215) l_0_6_223))))
 (let ((?x28344 (- (+ (- ?x28337 (* (* 2.0 l_0_6_216) l_0_6_224)) ?x25496) (* (* 2.0 l_0_6_299) l_0_6_307))))
 (let ((?x28350 (- (- ?x28344 (* (* 2.0 l_0_6_300) l_0_6_308)) (* (* 2.0 l_0_6_301) l_0_6_309))))
 (let ((?x28356 (- (- ?x28350 (* (* 2.0 l_0_6_302) l_0_6_310)) (* (* 2.0 l_0_6_303) l_0_6_311))))
 (let ((?x28362 (- (- ?x28356 (* (* 2.0 l_0_6_304) l_0_6_312)) (* (* 2.0 l_0_6_305) l_0_6_313))))
 (let ((?x28368 (- (- ?x28362 (* (* 2.0 l_0_6_306) l_0_6_314)) (* (* 2.0 l_0_6_344) l_0_6_352))))
 (let ((?x28374 (- (- ?x28368 (* (* 2.0 l_0_6_345) l_0_6_353)) (* (* 2.0 l_0_6_346) l_0_6_354))))
 (let ((?x28380 (- (- ?x28374 (* (* 2.0 l_0_6_347) l_0_6_355)) (* (* 2.0 l_0_6_348) l_0_6_356))))
 (let ((?x28386 (- (- ?x28380 (* (* 2.0 l_0_6_349) l_0_6_357)) (* (* 2.0 l_0_6_350) l_0_6_358))))
 (= (- ?x28386 (* (* 2.0 l_0_6_351) l_0_6_359)) 0.0))))))))))))))))))
(assert
 (let ((?x27121 (* l_0_6_93 l_0_6_93)))
 (let ((?x27119 (* l_0_6_92 l_0_6_92)))
 (let ((?x25544 (* l_0_6_228 l_0_6_228)))
 (let ((?x25542 (* l_0_6_227 l_0_6_227)))
 (let ((?x28474 (+ (- (* (- l_0_6_137) l_0_6_137) (* l_0_6_138 l_0_6_138)) ?x25542)))
 (= (+ (+ (+ ?x28474 ?x25544) ?x27119) ?x27121) 0.0)))))))
(assert
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25609 (* ?x25564 l_0_6_237)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x7922 (* ?x25561 l_0_6_236)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x24716 (* ?x22881 l_0_6_147)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x6805 (* ?x22878 l_0_6_146)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6807 (* ?x23724 l_0_6_93)))
 (let ((?x28489 (+ (- (- (+ (* (* 2.0 l_0_6_101) l_0_6_92) ?x6807) ?x6805) ?x24716) ?x7922)))
 (= (+ ?x28489 ?x25609) 0.0)))))))))))))
(assert
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25632 (* ?x25564 l_0_6_242)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25630 (* ?x25561 l_0_6_241)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x22882 (* ?x22881 l_0_6_152)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x22879 (* ?x22878 l_0_6_151)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x22871 (* ?x22616 l_0_6_93)))
 (let ((?x28508 (+ (- (- (+ (* (* 2.0 l_0_6_106) l_0_6_92) ?x22871) ?x22879) ?x22882) ?x25630)))
 (= (+ ?x28508 ?x25632) 0.0)))))))))))))
(assert
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25651 (* ?x25564 l_0_6_248)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25649 (* ?x25561 l_0_6_247)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27154 (* ?x22881 l_0_6_158)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27152 (* ?x22878 l_0_6_157)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27150 (* ?x26593 l_0_6_93)))
 (let ((?x28519 (+ (- (- (+ (* (* 2.0 l_0_6_112) l_0_6_92) ?x27150) ?x27152) ?x27154) ?x25649)))
 (= (+ ?x28519 ?x25651) 0.0)))))))))))))
(assert
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25677 (* ?x25564 l_0_6_255)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25674 (* ?x25561 l_0_6_254)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27171 (* ?x22881 l_0_6_165)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27169 (* ?x22878 l_0_6_164)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27162 (* ?x26759 l_0_6_93)))
 (let ((?x28533 (+ (- (- (+ (* (* 2.0 l_0_6_119) l_0_6_92) ?x27162) ?x27169) ?x27171) ?x25674)))
 (= (+ ?x28533 ?x25677) 0.0)))))))))))))
(assert
 (let ((?x25564 (* 2.0 l_0_6_228)))
 (let ((?x25714 (* ?x25564 l_0_6_263)))
 (let ((?x25561 (* 2.0 l_0_6_227)))
 (let ((?x25712 (* ?x25561 l_0_6_262)))
 (let ((?x22881 (* 2.0 l_0_6_138)))
 (let ((?x27191 (* ?x22881 l_0_6_173)))
 (let ((?x22878 (* 2.0 l_0_6_137)))
 (let ((?x27189 (* ?x22878 l_0_6_172)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27187 (* ?x26853 l_0_6_93)))
 (let ((?x28544 (+ (- (- (+ (* (* 2.0 l_0_6_127) l_0_6_92) ?x27187) ?x27189) ?x27191) ?x25712)))
 (= (+ ?x28544 ?x25714) 0.0)))))))))))))
(assert
 (let ((?x27269 (* l_0_6_99 l_0_6_99)))
 (let ((?x27267 (* l_0_6_98 l_0_6_98)))
 (let ((?x27265 (* l_0_6_97 l_0_6_97)))
 (let ((?x25954 (* l_0_6_235 l_0_6_235)))
 (let ((?x25952 (* l_0_6_234 l_0_6_234)))
 (let ((?x25950 (* l_0_6_233 l_0_6_233)))
 (let ((?x8274 (* l_0_6_232 l_0_6_232)))
 (let ((?x27263 (* l_0_6_145 l_0_6_145)))
 (let ((?x27261 (* l_0_6_144 l_0_6_144)))
 (let ((?x27259 (* l_0_6_143 l_0_6_143)))
 (let ((?x28554 (- (- (- (* l_0_6_100 l_0_6_100) (* l_0_6_142 l_0_6_142)) ?x27259) ?x27261)))
 (let ((?x28561 (+ (+ (+ (+ (+ (+ (- ?x28554 ?x27263) ?x8274) ?x25950) ?x25952) ?x25954) ?x27265) ?x27267)))
 (= (+ ?x28561 ?x27269) 0.0))))))))))))))
(assert
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x25993 (* ?x24666 l_0_6_244)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x25991 (* ?x24663 l_0_6_243)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x25989 (* ?x24660 l_0_6_242)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x25987 (* ?x24657 l_0_6_241)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x23461 (* ?x23460 l_0_6_154)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x23458 (* ?x23457 l_0_6_153)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x23455 (* ?x23454 l_0_6_152)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x23452 (* ?x23451 l_0_6_151)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x23449 (* ?x22619 l_0_6_99)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x23447 (* ?x22616 l_0_6_98)))
 (let ((?x22609 (* 2.0 l_0_6_106)))
 (let ((?x23438 (* ?x22609 l_0_6_97)))
 (let ((?x23433 (* 2.0 l_0_6_100)))
 (let ((?x23435 (* ?x23433 l_0_6_109)))
 (let ((?x28579 (- (- (- (- (+ (+ (+ ?x23435 ?x23438) ?x23447) ?x23449) ?x23452) ?x23455) ?x23458) ?x23461)))
 (= (+ (+ (+ (+ ?x28579 ?x25987) ?x25989) ?x25991) ?x25993) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26019 (* ?x24666 l_0_6_250)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26017 (* ?x24663 l_0_6_249)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26015 (* ?x24660 l_0_6_248)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x8420 (* ?x24657 l_0_6_247)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27309 (* ?x23460 l_0_6_160)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27307 (* ?x23457 l_0_6_159)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27305 (* ?x23454 l_0_6_158)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27303 (* ?x23451 l_0_6_157)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27301 (* ?x26596 l_0_6_99)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27299 (* ?x26593 l_0_6_98)))
 (let ((?x10158 (* 2.0 l_0_6_112)))
 (let ((?x27297 (* ?x10158 l_0_6_97)))
 (let ((?x28603 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_115) ?x27297) ?x27299) ?x27301) ?x27303)))
 (let ((?x28610 (+ (+ (+ (+ (- (- (- ?x28603 ?x27305) ?x27307) ?x27309) ?x8420) ?x26015) ?x26017) ?x26019)))
 (= ?x28610 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26082 (* ?x24666 l_0_6_257)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26080 (* ?x24663 l_0_6_256)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26078 (* ?x24660 l_0_6_255)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x26076 (* ?x24657 l_0_6_254)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27351 (* ?x23460 l_0_6_167)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27349 (* ?x23457 l_0_6_166)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27347 (* ?x23454 l_0_6_165)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27345 (* ?x23451 l_0_6_164)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27343 (* ?x26762 l_0_6_99)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27341 (* ?x26759 l_0_6_98)))
 (let ((?x26757 (* 2.0 l_0_6_119)))
 (let ((?x27339 (* ?x26757 l_0_6_97)))
 (let ((?x28620 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_122) ?x27339) ?x27341) ?x27343) ?x27345)))
 (let ((?x28627 (+ (+ (+ (+ (- (- (- ?x28620 ?x27347) ?x27349) ?x27351) ?x26076) ?x26078) ?x26080) ?x26082)))
 (= ?x28627 0.0))))))))))))))))))))))))))
(assert
 (let ((?x24666 (* 2.0 l_0_6_235)))
 (let ((?x26165 (* ?x24666 l_0_6_265)))
 (let ((?x24663 (* 2.0 l_0_6_234)))
 (let ((?x26163 (* ?x24663 l_0_6_264)))
 (let ((?x24660 (* 2.0 l_0_6_233)))
 (let ((?x26161 (* ?x24660 l_0_6_263)))
 (let ((?x24657 (* 2.0 l_0_6_232)))
 (let ((?x26159 (* ?x24657 l_0_6_262)))
 (let ((?x23460 (* 2.0 l_0_6_145)))
 (let ((?x27386 (* ?x23460 l_0_6_175)))
 (let ((?x23457 (* 2.0 l_0_6_144)))
 (let ((?x27384 (* ?x23457 l_0_6_174)))
 (let ((?x23454 (* 2.0 l_0_6_143)))
 (let ((?x27382 (* ?x23454 l_0_6_173)))
 (let ((?x23451 (* 2.0 l_0_6_142)))
 (let ((?x27380 (* ?x23451 l_0_6_172)))
 (let ((?x26856 (* 2.0 l_0_6_129)))
 (let ((?x27378 (* ?x26856 l_0_6_99)))
 (let ((?x26853 (* 2.0 l_0_6_128)))
 (let ((?x27369 (* ?x26853 l_0_6_98)))
 (let ((?x26851 (* 2.0 l_0_6_127)))
 (let ((?x27365 (* ?x26851 l_0_6_97)))
 (let ((?x28651 (- (+ (+ (+ (* (* 2.0 l_0_6_100) l_0_6_130) ?x27365) ?x27369) ?x27378) ?x27380)))
 (let ((?x28658 (+ (+ (+ (+ (- (- (- ?x28651 ?x27382) ?x27384) ?x27386) ?x26159) ?x26161) ?x26163) ?x26165)))
 (= ?x28658 0.0))))))))))))))))))))))))))
(assert
 (let ((?x26224 (* l_0_6_240 l_0_6_240)))
 (let ((?x26222 (* l_0_6_239 l_0_6_239)))
 (let ((?x26220 (* l_0_6_238 l_0_6_238)))
 (let ((?x26218 (* l_0_6_237 l_0_6_237)))
 (let ((?x26216 (* l_0_6_236 l_0_6_236)))
 (let ((?x24804 (* l_0_6_150 l_0_6_150)))
 (let ((?x24802 (* l_0_6_149 l_0_6_149)))
 (let ((?x24800 (* l_0_6_148 l_0_6_148)))
 (let ((?x24798 (* l_0_6_147 l_0_6_147)))
 (let ((?x24796 (* l_0_6_146 l_0_6_146)))
 (let ((?x24791 (* l_0_6_105 l_0_6_105)))
 (let ((?x6897 (* l_0_6_104 l_0_6_104)))
 (let ((?x6898 (* l_0_6_103 l_0_6_103)))
 (let ((?x13639 (+ (+ (+ (* l_0_6_101 l_0_6_101) (* l_0_6_102 l_0_6_102)) ?x6898) ?x6897)))
 (let ((?x28678 (+ (- (- (- (- (- (+ ?x13639 ?x24791) ?x24796) ?x24798) ?x24800) ?x24802) ?x24804) ?x26216)))
 (= (+ (+ (+ (+ ?x28678 ?x26218) ?x26220) ?x26222) ?x26224) 0.0)))))))))))))))))
(assert
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26277 (* ?x26276 l_0_6_245)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26274 (* ?x26273 l_0_6_244)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26271 (* ?x26270 l_0_6_243)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26268 (* ?x26267 l_0_6_242)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26265 (* ?x26264 l_0_6_241)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x23769 (* ?x23768 l_0_6_155)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x23764 (* ?x23763 l_0_6_154)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x23761 (* ?x23760 l_0_6_153)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x23758 (* ?x23757 l_0_6_152)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x23755 (* ?x23754 l_0_6_151)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x23744 (* ?x23743 l_0_6_110)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x23741 (* ?x23740 l_0_6_109)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x23738 (* ?x23729 l_0_6_108)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x23726 (* ?x23724 l_0_6_107)))
 (let ((?x28692 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_106) ?x23726) ?x23738) ?x23741) ?x23744)))
 (let ((?x28699 (+ (+ (- (- (- (- (- ?x28692 ?x23755) ?x23758) ?x23761) ?x23764) ?x23769) ?x26265) ?x26268)))
 (= (+ (+ (+ ?x28699 ?x26271) ?x26274) ?x26277) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26336 (* ?x26276 l_0_6_251)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26334 (* ?x26273 l_0_6_250)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26332 (* ?x26270 l_0_6_249)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26330 (* ?x26267 l_0_6_248)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26328 (* ?x26264 l_0_6_247)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24840 (* ?x23768 l_0_6_161)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24838 (* ?x23763 l_0_6_160)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24836 (* ?x23760 l_0_6_159)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24834 (* ?x23757 l_0_6_158)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24832 (* ?x23754 l_0_6_157)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24830 (* ?x23743 l_0_6_116)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24828 (* ?x23740 l_0_6_115)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24826 (* ?x23729 l_0_6_114)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x6990 (* ?x23724 l_0_6_113)))
 (let ((?x28716 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_112) ?x6990) ?x24826) ?x24828) ?x24830)))
 (let ((?x28723 (+ (+ (- (- (- (- (- ?x28716 ?x24832) ?x24834) ?x24836) ?x24838) ?x24840) ?x26328) ?x26330)))
 (= (+ (+ (+ ?x28723 ?x26332) ?x26334) ?x26336) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26368 (* ?x26276 l_0_6_258)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26366 (* ?x26273 l_0_6_257)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26364 (* ?x26270 l_0_6_256)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x26362 (* ?x26267 l_0_6_255)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x26360 (* ?x26264 l_0_6_254)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24885 (* ?x23768 l_0_6_168)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24883 (* ?x23763 l_0_6_167)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24881 (* ?x23760 l_0_6_166)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24879 (* ?x23757 l_0_6_165)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24877 (* ?x23754 l_0_6_164)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24875 (* ?x23743 l_0_6_123)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24873 (* ?x23740 l_0_6_122)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24871 (* ?x23729 l_0_6_121)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24869 (* ?x23724 l_0_6_120)))
 (let ((?x28736 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_119) ?x24869) ?x24871) ?x24873) ?x24875)))
 (let ((?x28743 (+ (+ (- (- (- (- (- ?x28736 ?x24877) ?x24879) ?x24881) ?x24883) ?x24885) ?x26360) ?x26362)))
 (= (+ (+ (+ ?x28743 ?x26364) ?x26366) ?x26368) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26276 (* 2.0 l_0_6_240)))
 (let ((?x26384 (* ?x26276 l_0_6_266)))
 (let ((?x26273 (* 2.0 l_0_6_239)))
 (let ((?x26382 (* ?x26273 l_0_6_265)))
 (let ((?x26270 (* 2.0 l_0_6_238)))
 (let ((?x26380 (* ?x26270 l_0_6_264)))
 (let ((?x26267 (* 2.0 l_0_6_237)))
 (let ((?x9642 (* ?x26267 l_0_6_263)))
 (let ((?x26264 (* 2.0 l_0_6_236)))
 (let ((?x9645 (* ?x26264 l_0_6_262)))
 (let ((?x23768 (* 2.0 l_0_6_150)))
 (let ((?x24946 (* ?x23768 l_0_6_176)))
 (let ((?x23763 (* 2.0 l_0_6_149)))
 (let ((?x24944 (* ?x23763 l_0_6_175)))
 (let ((?x23760 (* 2.0 l_0_6_148)))
 (let ((?x24942 (* ?x23760 l_0_6_174)))
 (let ((?x23757 (* 2.0 l_0_6_147)))
 (let ((?x24940 (* ?x23757 l_0_6_173)))
 (let ((?x23754 (* 2.0 l_0_6_146)))
 (let ((?x24938 (* ?x23754 l_0_6_172)))
 (let ((?x23743 (* 2.0 l_0_6_105)))
 (let ((?x24936 (* ?x23743 l_0_6_131)))
 (let ((?x23740 (* 2.0 l_0_6_104)))
 (let ((?x24934 (* ?x23740 l_0_6_130)))
 (let ((?x23729 (* 2.0 l_0_6_103)))
 (let ((?x24932 (* ?x23729 l_0_6_129)))
 (let ((?x23724 (* 2.0 l_0_6_102)))
 (let ((?x24930 (* ?x23724 l_0_6_128)))
 (let ((?x14162 (+ (+ (+ (+ (* (* 2.0 l_0_6_101) l_0_6_127) ?x24930) ?x24932) ?x24934) ?x24936)))
 (let ((?x28761 (+ (+ (- (- (- (- (- ?x14162 ?x24938) ?x24940) ?x24942) ?x24944) ?x24946) ?x9645) ?x9642)))
 (= (+ (+ (+ ?x28761 ?x26380) ?x26382) ?x26384) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x26425 (* l_0_6_246 l_0_6_246)))
 (let ((?x26423 (* l_0_6_245 l_0_6_245)))
 (let ((?x26421 (* l_0_6_244 l_0_6_244)))
 (let ((?x26419 (* l_0_6_243 l_0_6_243)))
 (let ((?x26417 (* l_0_6_242 l_0_6_242)))
 (let ((?x26415 (* l_0_6_241 l_0_6_241)))
 (let ((?x24012 (* l_0_6_156 l_0_6_156)))
 (let ((?x24010 (* l_0_6_155 l_0_6_155)))
 (let ((?x24008 (* l_0_6_154 l_0_6_154)))
 (let ((?x24006 (* l_0_6_153 l_0_6_153)))
 (let ((?x24004 (* l_0_6_152 l_0_6_152)))
 (let ((?x24002 (* l_0_6_151 l_0_6_151)))
 (let ((?x24000 (* l_0_6_111 l_0_6_111)))
 (let ((?x23998 (* l_0_6_110 l_0_6_110)))
 (let ((?x23987 (* l_0_6_109 l_0_6_109)))
 (let ((?x23984 (* l_0_6_108 l_0_6_108)))
 (let ((?x14385 (+ (+ (+ (* l_0_6_106 l_0_6_106) (* l_0_6_107 l_0_6_107)) ?x23984) ?x23987)))
 (let ((?x28782 (- (- (- (- (- (+ (+ ?x14385 ?x23998) ?x24000) ?x24002) ?x24004) ?x24006) ?x24008) ?x24010)))
 (let ((?x28789 (+ (+ (+ (+ (+ (+ (- ?x28782 ?x24012) ?x26415) ?x26417) ?x26419) ?x26421) ?x26423) ?x26425)))
 (= ?x28789 0.0)))))))))))))))))))))
(assert
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x26484 (* ?x22504 l_0_6_259)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x26482 (* ?x22501 l_0_6_258)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x26480 (* ?x22498 l_0_6_257)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x26478 (* ?x22495 l_0_6_256)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x26476 (* ?x22492 l_0_6_255)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x26474 (* ?x22489 l_0_6_254)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24364 (* ?x22646 l_0_6_169)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24362 (* ?x22643 l_0_6_168)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24360 (* ?x22640 l_0_6_167)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24358 (* ?x22637 l_0_6_166)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24356 (* ?x22634 l_0_6_165)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24354 (* ?x22631 l_0_6_164)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24352 (* ?x22628 l_0_6_124)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24350 (* ?x22625 l_0_6_123)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24348 (* ?x22622 l_0_6_122)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24346 (* ?x22619 l_0_6_121)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24344 (* ?x22616 l_0_6_120)))
 (let ((?x28802 (+ (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_119) ?x24344) ?x24346) ?x24348) ?x24350)))
 (let ((?x28809 (- (- (- (- (- (- (+ ?x28802 ?x24352) ?x24354) ?x24356) ?x24358) ?x24360) ?x24362) ?x24364)))
 (= (+ (+ (+ (+ (+ (+ ?x28809 ?x26474) ?x26476) ?x26478) ?x26480) ?x26482) ?x26484) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x22504 (* 2.0 l_0_6_246)))
 (let ((?x26502 (* ?x22504 l_0_6_267)))
 (let ((?x22501 (* 2.0 l_0_6_245)))
 (let ((?x26500 (* ?x22501 l_0_6_266)))
 (let ((?x22498 (* 2.0 l_0_6_244)))
 (let ((?x26498 (* ?x22498 l_0_6_265)))
 (let ((?x22495 (* 2.0 l_0_6_243)))
 (let ((?x26496 (* ?x22495 l_0_6_264)))
 (let ((?x22492 (* 2.0 l_0_6_242)))
 (let ((?x26494 (* ?x22492 l_0_6_263)))
 (let ((?x22489 (* 2.0 l_0_6_241)))
 (let ((?x10067 (* ?x22489 l_0_6_262)))
 (let ((?x22646 (* 2.0 l_0_6_156)))
 (let ((?x24517 (* ?x22646 l_0_6_177)))
 (let ((?x22643 (* 2.0 l_0_6_155)))
 (let ((?x24515 (* ?x22643 l_0_6_176)))
 (let ((?x22640 (* 2.0 l_0_6_154)))
 (let ((?x24513 (* ?x22640 l_0_6_175)))
 (let ((?x22637 (* 2.0 l_0_6_153)))
 (let ((?x24511 (* ?x22637 l_0_6_174)))
 (let ((?x22634 (* 2.0 l_0_6_152)))
 (let ((?x24509 (* ?x22634 l_0_6_173)))
 (let ((?x22631 (* 2.0 l_0_6_151)))
 (let ((?x24507 (* ?x22631 l_0_6_172)))
 (let ((?x22628 (* 2.0 l_0_6_111)))
 (let ((?x24505 (* ?x22628 l_0_6_132)))
 (let ((?x22625 (* 2.0 l_0_6_110)))
 (let ((?x24486 (* ?x22625 l_0_6_131)))
 (let ((?x22622 (* 2.0 l_0_6_109)))
 (let ((?x24482 (* ?x22622 l_0_6_130)))
 (let ((?x22619 (* 2.0 l_0_6_108)))
 (let ((?x24478 (* ?x22619 l_0_6_129)))
 (let ((?x22616 (* 2.0 l_0_6_107)))
 (let ((?x24474 (* ?x22616 l_0_6_128)))
 (let ((?x14604 (+ (+ (+ (+ (* (* 2.0 l_0_6_106) l_0_6_127) ?x24474) ?x24478) ?x24482) ?x24486)))
 (let ((?x14568 (- (- (- (- (- (- (+ ?x14604 ?x24505) ?x24507) ?x24509) ?x24511) ?x24513) ?x24515) ?x24517)))
 (= (+ (+ (+ (+ (+ (+ ?x14568 ?x10067) ?x26494) ?x26496) ?x26498) ?x26500) ?x26502) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26558 (* l_0_6_253 l_0_6_253)))
 (let ((?x26556 (* l_0_6_252 l_0_6_252)))
 (let ((?x26554 (* l_0_6_251 l_0_6_251)))
 (let ((?x26552 (* l_0_6_250 l_0_6_250)))
 (let ((?x26549 (* l_0_6_249 l_0_6_249)))
 (let ((?x26547 (* l_0_6_248 l_0_6_248)))
 (let ((?x26545 (* l_0_6_247 l_0_6_247)))
 (let ((?x27439 (* l_0_6_163 l_0_6_163)))
 (let ((?x27437 (* l_0_6_162 l_0_6_162)))
 (let ((?x27435 (* l_0_6_161 l_0_6_161)))
 (let ((?x27433 (* l_0_6_160 l_0_6_160)))
 (let ((?x27431 (* l_0_6_159 l_0_6_159)))
 (let ((?x27429 (* l_0_6_158 l_0_6_158)))
 (let ((?x27427 (* l_0_6_157 l_0_6_157)))
 (let ((?x27425 (* l_0_6_118 l_0_6_118)))
 (let ((?x27423 (* l_0_6_117 l_0_6_117)))
 (let ((?x27421 (* l_0_6_116 l_0_6_116)))
 (let ((?x27419 (* l_0_6_115 l_0_6_115)))
 (let ((?x27417 (* l_0_6_114 l_0_6_114)))
 (let ((?x14726 (+ (+ (+ (* l_0_6_112 l_0_6_112) (* l_0_6_113 l_0_6_113)) ?x27417) ?x27419)))
 (let ((?x14680 (- (- (- (- (+ (+ (+ ?x14726 ?x27421) ?x27423) ?x27425) ?x27427) ?x27429) ?x27431) ?x27433)))
 (let ((?x28829 (+ (+ (+ (+ (- (- (- ?x14680 ?x27435) ?x27437) ?x27439) ?x26545) ?x26547) ?x26549) ?x26552)))
 (= (+ (+ (+ ?x28829 ?x26554) ?x26556) ?x26558) 0.0))))))))))))))))))))))))
(assert
 (let ((?x26631 (* 2.0 l_0_6_253)))
 (let ((?x26632 (* ?x26631 l_0_6_260)))
 (let ((?x26628 (* 2.0 l_0_6_252)))
 (let ((?x26629 (* ?x26628 l_0_6_259)))
 (let ((?x26625 (* 2.0 l_0_6_251)))
 (let ((?x26626 (* ?x26625 l_0_6_258)))
 (let ((?x26622 (* 2.0 l_0_6_250)))
 (let ((?x26623 (* ?x26622 l_0_6_257)))
 (let ((?x26618 (* 2.0 l_0_6_249)))
 (let ((?x26619 (* ?x26618 l_0_6_256)))
 (let ((?x26615 (* 2.0 l_0_6_248)))
 (let ((?x26616 (* ?x26615 l_0_6_255)))
 (let ((?x26612 (* 2.0 l_0_6_247)))
 (let ((?x26613 (* ?x26612 l_0_6_254)))
 (let ((?x27505 (* 2.0 l_0_6_163)))
 (let ((?x27506 (* ?x27505 l_0_6_170)))
 (let ((?x27502 (* 2.0 l_0_6_162)))
 (let ((?x27503 (* ?x27502 l_0_6_169)))
 (let ((?x27499 (* 2.0 l_0_6_161)))
 (let ((?x27500 (* ?x27499 l_0_6_168)))
 (let ((?x27496 (* 2.0 l_0_6_160)))
 (let ((?x27497 (* ?x27496 l_0_6_167)))
 (let ((?x27493 (* 2.0 l_0_6_159)))
 (let ((?x27494 (* ?x27493 l_0_6_166)))
 (let ((?x27490 (* 2.0 l_0_6_158)))
 (let ((?x27491 (* ?x27490 l_0_6_165)))
 (let ((?x27487 (* 2.0 l_0_6_157)))
 (let ((?x27488 (* ?x27487 l_0_6_164)))
 (let ((?x27484 (* 2.0 l_0_6_118)))
 (let ((?x27485 (* ?x27484 l_0_6_125)))
 (let ((?x27481 (* 2.0 l_0_6_117)))
 (let ((?x27482 (* ?x27481 l_0_6_124)))
 (let ((?x27478 (* 2.0 l_0_6_116)))
 (let ((?x27479 (* ?x27478 l_0_6_123)))
 (let ((?x27475 (* 2.0 l_0_6_115)))
 (let ((?x27476 (* ?x27475 l_0_6_122)))
 (let ((?x26596 (* 2.0 l_0_6_114)))
 (let ((?x27473 (* ?x26596 l_0_6_121)))
 (let ((?x26593 (* 2.0 l_0_6_113)))
 (let ((?x27471 (* ?x26593 l_0_6_120)))
 (let ((?x28847 (+ (+ (+ (+ (* (* 2.0 l_0_6_112) l_0_6_119) ?x27471) ?x27473) ?x27476) ?x27479)))
 (let ((?x28854 (- (- (- (- (- (+ (+ ?x28847 ?x27482) ?x27485) ?x27488) ?x27491) ?x27494) ?x27497) ?x27500)))
 (let ((?x28861 (+ (+ (+ (+ (+ (- (- ?x28854 ?x27503) ?x27506) ?x26613) ?x26616) ?x26619) ?x26623) ?x26626)))
 (= (+ (+ ?x28861 ?x26629) ?x26632) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x26788 (* l_0_6_261 l_0_6_261)))
 (let ((?x26786 (* l_0_6_260 l_0_6_260)))
 (let ((?x26784 (* l_0_6_259 l_0_6_259)))
 (let ((?x26782 (* l_0_6_258 l_0_6_258)))
 (let ((?x26780 (* l_0_6_257 l_0_6_257)))
 (let ((?x26778 (* l_0_6_256 l_0_6_256)))
 (let ((?x26776 (* l_0_6_255 l_0_6_255)))
 (let ((?x26774 (* l_0_6_254 l_0_6_254)))
 (let ((?x27634 (* l_0_6_171 l_0_6_171)))
 (let ((?x27632 (* l_0_6_170 l_0_6_170)))
 (let ((?x27630 (* l_0_6_169 l_0_6_169)))
 (let ((?x27628 (* l_0_6_168 l_0_6_168)))
 (let ((?x27626 (* l_0_6_167 l_0_6_167)))
 (let ((?x27624 (* l_0_6_166 l_0_6_166)))
 (let ((?x27622 (* l_0_6_165 l_0_6_165)))
 (let ((?x27620 (* l_0_6_164 l_0_6_164)))
 (let ((?x27618 (* l_0_6_126 l_0_6_126)))
 (let ((?x27616 (* l_0_6_125 l_0_6_125)))
 (let ((?x27614 (* l_0_6_124 l_0_6_124)))
 (let ((?x27612 (* l_0_6_123 l_0_6_123)))
 (let ((?x27610 (* l_0_6_122 l_0_6_122)))
 (let ((?x27608 (* l_0_6_121 l_0_6_121)))
 (let ((?x14940 (+ (+ (+ (* l_0_6_119 l_0_6_119) (* l_0_6_120 l_0_6_120)) ?x27608) ?x27610)))
 (let ((?x28876 (- (- (- (+ (+ (+ (+ ?x14940 ?x27612) ?x27614) ?x27616) ?x27618) ?x27620) ?x27622) ?x27624)))
 (let ((?x28883 (+ (+ (- (- (- (- (- ?x28876 ?x27626) ?x27628) ?x27630) ?x27632) ?x27634) ?x26774) ?x26776)))
 (= (+ (+ (+ (+ (+ (+ ?x28883 ?x26778) ?x26780) ?x26782) ?x26784) ?x26786) ?x26788) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x26891 (* (* 2.0 l_0_6_261) l_0_6_269)))
 (let ((?x26888 (* (* 2.0 l_0_6_260) l_0_6_268)))
 (let ((?x26885 (* (* 2.0 l_0_6_259) l_0_6_267)))
 (let ((?x26882 (* (* 2.0 l_0_6_258) l_0_6_266)))
 (let ((?x26879 (* (* 2.0 l_0_6_257) l_0_6_265)))
 (let ((?x26876 (* (* 2.0 l_0_6_256) l_0_6_264)))
 (let ((?x26873 (* (* 2.0 l_0_6_255) l_0_6_263)))
 (let ((?x26870 (* (* 2.0 l_0_6_254) l_0_6_262)))
 (let ((?x27697 (* (* 2.0 l_0_6_171) l_0_6_179)))
 (let ((?x27694 (* (* 2.0 l_0_6_170) l_0_6_178)))
 (let ((?x27691 (* (* 2.0 l_0_6_169) l_0_6_177)))
 (let ((?x27688 (* (* 2.0 l_0_6_168) l_0_6_176)))
 (let ((?x27685 (* (* 2.0 l_0_6_167) l_0_6_175)))
 (let ((?x27682 (* (* 2.0 l_0_6_166) l_0_6_174)))
 (let ((?x27679 (* (* 2.0 l_0_6_165) l_0_6_173)))
 (let ((?x27676 (* (* 2.0 l_0_6_164) l_0_6_172)))
 (let ((?x27673 (* (* 2.0 l_0_6_126) l_0_6_134)))
 (let ((?x27670 (* (* 2.0 l_0_6_125) l_0_6_133)))
 (let ((?x27667 (* (* 2.0 l_0_6_124) l_0_6_132)))
 (let ((?x27664 (* (* 2.0 l_0_6_123) l_0_6_131)))
 (let ((?x27661 (* (* 2.0 l_0_6_122) l_0_6_130)))
 (let ((?x26762 (* 2.0 l_0_6_121)))
 (let ((?x27658 (* ?x26762 l_0_6_129)))
 (let ((?x26759 (* 2.0 l_0_6_120)))
 (let ((?x27656 (* ?x26759 l_0_6_128)))
 (let ((?x28906 (+ (+ (+ (+ (* (* 2.0 l_0_6_119) l_0_6_127) ?x27656) ?x27658) ?x27661) ?x27664)))
 (let ((?x28913 (- (- (- (- (+ (+ (+ ?x28906 ?x27667) ?x27670) ?x27673) ?x27676) ?x27679) ?x27682) ?x27685)))
 (let ((?x28920 (+ (+ (+ (- (- (- (- ?x28913 ?x27688) ?x27691) ?x27694) ?x27697) ?x26870) ?x26873) ?x26876)))
 (= (+ (+ (+ (+ (+ ?x28920 ?x26879) ?x26882) ?x26885) ?x26888) ?x26891) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x26983 (* l_0_6_270 l_0_6_270)))
 (let ((?x26981 (* l_0_6_269 l_0_6_269)))
 (let ((?x26979 (* l_0_6_268 l_0_6_268)))
 (let ((?x26977 (* l_0_6_267 l_0_6_267)))
 (let ((?x26975 (* l_0_6_266 l_0_6_266)))
 (let ((?x26973 (* l_0_6_265 l_0_6_265)))
 (let ((?x26971 (* l_0_6_264 l_0_6_264)))
 (let ((?x26969 (* l_0_6_263 l_0_6_263)))
 (let ((?x27005 (* l_0_6_262 l_0_6_262)))
 (let ((?x27769 (* l_0_6_180 l_0_6_180)))
 (let ((?x27767 (* l_0_6_179 l_0_6_179)))
 (let ((?x27765 (* l_0_6_178 l_0_6_178)))
 (let ((?x27763 (* l_0_6_177 l_0_6_177)))
 (let ((?x27761 (* l_0_6_176 l_0_6_176)))
 (let ((?x27759 (* l_0_6_175 l_0_6_175)))
 (let ((?x27757 (* l_0_6_174 l_0_6_174)))
 (let ((?x27755 (* l_0_6_173 l_0_6_173)))
 (let ((?x27753 (* l_0_6_172 l_0_6_172)))
 (let ((?x27751 (* l_0_6_135 l_0_6_135)))
 (let ((?x27749 (* l_0_6_134 l_0_6_134)))
 (let ((?x27747 (* l_0_6_133 l_0_6_133)))
 (let ((?x27745 (* l_0_6_132 l_0_6_132)))
 (let ((?x27732 (* l_0_6_131 l_0_6_131)))
 (let ((?x27729 (* l_0_6_130 l_0_6_130)))
 (let ((?x27725 (* l_0_6_129 l_0_6_129)))
 (let ((?x13659 (+ (+ (+ (* l_0_6_127 l_0_6_127) (* l_0_6_128 l_0_6_128)) ?x27725) ?x27729)))
 (let ((?x15232 (- (- (+ (+ (+ (+ (+ ?x13659 ?x27732) ?x27745) ?x27747) ?x27749) ?x27751) ?x27753) ?x27755)))
 (let ((?x28934 (- (- (- (- (- (- (- ?x15232 ?x27757) ?x27759) ?x27761) ?x27763) ?x27765) ?x27767) ?x27769)))
 (let ((?x28941 (+ (+ (+ (+ (+ (+ (+ ?x28934 ?x27005) ?x26969) ?x26971) ?x26973) ?x26975) ?x26977) ?x26979)))
 (= (+ (+ ?x28941 ?x26981) ?x26983) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x15291 (- (* (* (- 2.0) l_0_6_181) l_0_6_182) (* (* 2.0 l_0_6_271) l_0_6_272))))
 (= (- ?x15291 (* (* 2.0 l_0_6_316) l_0_6_317)) 0.0)))
(assert
 (let ((?x28966 (- (* (* (- 2.0) l_0_6_181) l_0_6_191) (* (* 2.0 l_0_6_271) l_0_6_281))))
 (= (- ?x28966 (* (* 2.0 l_0_6_316) l_0_6_326)) 0.0)))
(assert
 (let ((?x28979 (- (* (* (- 2.0) l_0_6_181) l_0_6_196) (* (* 2.0 l_0_6_271) l_0_6_286))))
 (= (- ?x28979 (* (* 2.0 l_0_6_316) l_0_6_331)) 0.0)))
(assert
 (let ((?x28997 (- (* (* (- 2.0) l_0_6_181) l_0_6_202) (* (* 2.0 l_0_6_271) l_0_6_292))))
 (= (- ?x28997 (* (* 2.0 l_0_6_316) l_0_6_337)) 0.0)))
(assert
 (let ((?x29014 (- (* (* (- 2.0) l_0_6_181) l_0_6_217) (* (* 2.0 l_0_6_271) l_0_6_307))))
 (= (- ?x29014 (* (* 2.0 l_0_6_316) l_0_6_352)) 0.0)))
(assert
 (let ((?x29036 (* l_0_6_318 l_0_6_318)))
 (let ((?x29034 (* l_0_6_317 l_0_6_317)))
 (let ((?x29032 (* l_0_6_273 l_0_6_273)))
 (let ((?x29030 (* l_0_6_272 l_0_6_272)))
 (let ((?x29029 (- (* (* (- 1.0) l_0_6_182) l_0_6_182) (* (* 1.0 l_0_6_183) l_0_6_183))))
 (= (- (- (- (- ?x29029 ?x29030) ?x29032) ?x29034) ?x29036) 0.0)))))))
(assert
 (let ((?x29059 (- (* (* (- 2.0) l_0_6_182) l_0_6_191) (* (* 2.0 l_0_6_183) l_0_6_192))))
 (let ((?x29063 (- (- ?x29059 (* (* 2.0 l_0_6_272) l_0_6_281)) (* (* 2.0 l_0_6_273) l_0_6_282))))
 (let ((?x29067 (- (- ?x29063 (* (* 2.0 l_0_6_317) l_0_6_326)) (* (* 2.0 l_0_6_318) l_0_6_327))))
 (= ?x29067 0.0)))))
(assert
 (let ((?x15390 (- (* (* (- 2.0) l_0_6_182) l_0_6_196) (* (* 2.0 l_0_6_183) l_0_6_197))))
 (let ((?x29090 (- (- ?x15390 (* (* 2.0 l_0_6_272) l_0_6_286)) (* (* 2.0 l_0_6_273) l_0_6_287))))
 (let ((?x29094 (- (- ?x29090 (* (* 2.0 l_0_6_317) l_0_6_331)) (* (* 2.0 l_0_6_318) l_0_6_332))))
 (= ?x29094 0.0)))))
(assert
 (let ((?x29115 (- (* (* (- 2.0) l_0_6_182) l_0_6_202) (* (* 2.0 l_0_6_183) l_0_6_203))))
 (let ((?x29119 (- (- ?x29115 (* (* 2.0 l_0_6_272) l_0_6_292)) (* (* 2.0 l_0_6_273) l_0_6_293))))
 (let ((?x29123 (- (- ?x29119 (* (* 2.0 l_0_6_317) l_0_6_337)) (* (* 2.0 l_0_6_318) l_0_6_338))))
 (= ?x29123 0.0)))))
(assert
 (let ((?x29147 (- (* (* (- 2.0) l_0_6_182) l_0_6_217) (* (* 2.0 l_0_6_183) l_0_6_218))))
 (let ((?x29151 (- (- ?x29147 (* (* 2.0 l_0_6_272) l_0_6_307)) (* (* 2.0 l_0_6_273) l_0_6_308))))
 (let ((?x29155 (- (- ?x29151 (* (* 2.0 l_0_6_317) l_0_6_352)) (* (* 2.0 l_0_6_318) l_0_6_353))))
 (= ?x29155 0.0)))))
(assert
 (let ((?x29200 (* l_0_6_325 l_0_6_325)))
 (let ((?x29198 (* l_0_6_324 l_0_6_324)))
 (let ((?x29196 (* l_0_6_323 l_0_6_323)))
 (let ((?x29194 (* l_0_6_322 l_0_6_322)))
 (let ((?x29192 (* l_0_6_280 l_0_6_280)))
 (let ((?x29190 (* l_0_6_279 l_0_6_279)))
 (let ((?x29188 (* l_0_6_278 l_0_6_278)))
 (let ((?x29186 (* l_0_6_277 l_0_6_277)))
 (let ((?x29179 (- (* (* (- 1.0) l_0_6_187) l_0_6_187) (* (* 1.0 l_0_6_188) l_0_6_188))))
 (let ((?x29185 (- (- ?x29179 (* (* 1.0 l_0_6_189) l_0_6_189)) (* (* 1.0 l_0_6_190) l_0_6_190))))
 (let ((?x29199 (- (- (- (- (- (- (- ?x29185 ?x29186) ?x29188) ?x29190) ?x29192) ?x29194) ?x29196) ?x29198)))
 (= (- ?x29199 ?x29200) 0.0)))))))))))))
(assert
 (let ((?x29226 (- (* (* (- 2.0) l_0_6_187) l_0_6_196) (* (* 2.0 l_0_6_188) l_0_6_197))))
 (let ((?x29230 (- (- ?x29226 (* (* 2.0 l_0_6_189) l_0_6_198)) (* (* 2.0 l_0_6_190) l_0_6_199))))
 (let ((?x29234 (- (- ?x29230 (* (* 2.0 l_0_6_277) l_0_6_286)) (* (* 2.0 l_0_6_278) l_0_6_287))))
 (let ((?x29238 (- (- ?x29234 (* (* 2.0 l_0_6_279) l_0_6_288)) (* (* 2.0 l_0_6_280) l_0_6_289))))
 (let ((?x29242 (- (- ?x29238 (* (* 2.0 l_0_6_322) l_0_6_331)) (* (* 2.0 l_0_6_323) l_0_6_332))))
 (let ((?x29246 (- (- ?x29242 (* (* 2.0 l_0_6_324) l_0_6_333)) (* (* 2.0 l_0_6_325) l_0_6_334))))
 (= ?x29246 0.0))))))))
(assert
 (let ((?x29294 (- (* (* (- 2.0) l_0_6_187) l_0_6_202) (* (* 2.0 l_0_6_188) l_0_6_203))))
 (let ((?x29298 (- (- ?x29294 (* (* 2.0 l_0_6_189) l_0_6_204)) (* (* 2.0 l_0_6_190) l_0_6_205))))
 (let ((?x29302 (- (- ?x29298 (* (* 2.0 l_0_6_277) l_0_6_292)) (* (* 2.0 l_0_6_278) l_0_6_293))))
 (let ((?x29306 (- (- ?x29302 (* (* 2.0 l_0_6_279) l_0_6_294)) (* (* 2.0 l_0_6_280) l_0_6_295))))
 (let ((?x29310 (- (- ?x29306 (* (* 2.0 l_0_6_322) l_0_6_337)) (* (* 2.0 l_0_6_323) l_0_6_338))))
 (let ((?x29314 (- (- ?x29310 (* (* 2.0 l_0_6_324) l_0_6_339)) (* (* 2.0 l_0_6_325) l_0_6_340))))
 (= ?x29314 0.0))))))))
(assert
 (let ((?x29348 (- (* (* (- 2.0) l_0_6_187) l_0_6_217) (* (* 2.0 l_0_6_188) l_0_6_218))))
 (let ((?x29352 (- (- ?x29348 (* (* 2.0 l_0_6_189) l_0_6_219)) (* (* 2.0 l_0_6_190) l_0_6_220))))
 (let ((?x29356 (- (- ?x29352 (* (* 2.0 l_0_6_277) l_0_6_307)) (* (* 2.0 l_0_6_278) l_0_6_308))))
 (let ((?x29360 (- (- ?x29356 (* (* 2.0 l_0_6_279) l_0_6_309)) (* (* 2.0 l_0_6_280) l_0_6_310))))
 (let ((?x29364 (- (- ?x29360 (* (* 2.0 l_0_6_322) l_0_6_352)) (* (* 2.0 l_0_6_323) l_0_6_353))))
 (let ((?x29368 (- (- ?x29364 (* (* 2.0 l_0_6_324) l_0_6_354)) (* (* 2.0 l_0_6_325) l_0_6_355))))
 (= ?x29368 0.0))))))))
(assert
 (let ((?x29436 (* l_0_6_330 l_0_6_330)))
 (let ((?x29434 (* l_0_6_329 l_0_6_329)))
 (let ((?x29432 (* l_0_6_328 l_0_6_328)))
 (let ((?x29430 (* l_0_6_327 l_0_6_327)))
 (let ((?x29428 (* l_0_6_326 l_0_6_326)))
 (let ((?x29426 (* l_0_6_285 l_0_6_285)))
 (let ((?x29424 (* l_0_6_284 l_0_6_284)))
 (let ((?x29422 (* l_0_6_283 l_0_6_283)))
 (let ((?x29420 (* l_0_6_282 l_0_6_282)))
 (let ((?x29418 (* l_0_6_281 l_0_6_281)))
 (let ((?x29408 (- (* (* (- 1.0) l_0_6_191) l_0_6_191) (* (* 1.0 l_0_6_192) l_0_6_192))))
 (let ((?x29414 (- (- ?x29408 (* (* 1.0 l_0_6_193) l_0_6_193)) (* (* 1.0 l_0_6_194) l_0_6_194))))
 (let ((?x29423 (- (- (- (- ?x29414 (* (* 1.0 l_0_6_195) l_0_6_195)) ?x29418) ?x29420) ?x29422)))
 (let ((?x29437 (- (- (- (- (- (- (- ?x29423 ?x29424) ?x29426) ?x29428) ?x29430) ?x29432) ?x29434) ?x29436)))
 (= ?x29437 0.0))))))))))))))))
(assert
 (let ((?x29464 (- (* (* (- 2.0) l_0_6_191) l_0_6_196) (* (* 2.0 l_0_6_192) l_0_6_197))))
 (let ((?x29468 (- (- ?x29464 (* (* 2.0 l_0_6_193) l_0_6_198)) (* (* 2.0 l_0_6_194) l_0_6_199))))
 (let ((?x29472 (- (- ?x29468 (* (* 2.0 l_0_6_195) l_0_6_200)) (* (* 2.0 l_0_6_281) l_0_6_286))))
 (let ((?x29476 (- (- ?x29472 (* (* 2.0 l_0_6_282) l_0_6_287)) (* (* 2.0 l_0_6_283) l_0_6_288))))
 (let ((?x29480 (- (- ?x29476 (* (* 2.0 l_0_6_284) l_0_6_289)) (* (* 2.0 l_0_6_285) l_0_6_290))))
 (let ((?x29484 (- (- ?x29480 (* (* 2.0 l_0_6_326) l_0_6_331)) (* (* 2.0 l_0_6_327) l_0_6_332))))
 (let ((?x29488 (- (- ?x29484 (* (* 2.0 l_0_6_328) l_0_6_333)) (* (* 2.0 l_0_6_329) l_0_6_334))))
 (= (- ?x29488 (* (* 2.0 l_0_6_330) l_0_6_335)) 0.0)))))))))
(assert
 (let ((?x29526 (- (* (* (- 2.0) l_0_6_191) l_0_6_202) (* (* 2.0 l_0_6_192) l_0_6_203))))
 (let ((?x29530 (- (- ?x29526 (* (* 2.0 l_0_6_193) l_0_6_204)) (* (* 2.0 l_0_6_194) l_0_6_205))))
 (let ((?x29534 (- (- ?x29530 (* (* 2.0 l_0_6_195) l_0_6_206)) (* (* 2.0 l_0_6_281) l_0_6_292))))
 (let ((?x29538 (- (- ?x29534 (* (* 2.0 l_0_6_282) l_0_6_293)) (* (* 2.0 l_0_6_283) l_0_6_294))))
 (let ((?x29542 (- (- ?x29538 (* (* 2.0 l_0_6_284) l_0_6_295)) (* (* 2.0 l_0_6_285) l_0_6_296))))
 (let ((?x29546 (- (- ?x29542 (* (* 2.0 l_0_6_326) l_0_6_337)) (* (* 2.0 l_0_6_327) l_0_6_338))))
 (let ((?x29550 (- (- ?x29546 (* (* 2.0 l_0_6_328) l_0_6_339)) (* (* 2.0 l_0_6_329) l_0_6_340))))
 (= (- ?x29550 (* (* 2.0 l_0_6_330) l_0_6_341)) 0.0)))))))))
(assert
 (let ((?x29612 (- (* (* (- 2.0) l_0_6_191) l_0_6_217) (* (* 2.0 l_0_6_192) l_0_6_218))))
 (let ((?x29616 (- (- ?x29612 (* (* 2.0 l_0_6_193) l_0_6_219)) (* (* 2.0 l_0_6_194) l_0_6_220))))
 (let ((?x29620 (- (- ?x29616 (* (* 2.0 l_0_6_195) l_0_6_221)) (* (* 2.0 l_0_6_281) l_0_6_307))))
 (let ((?x29624 (- (- ?x29620 (* (* 2.0 l_0_6_282) l_0_6_308)) (* (* 2.0 l_0_6_283) l_0_6_309))))
 (let ((?x29628 (- (- ?x29624 (* (* 2.0 l_0_6_284) l_0_6_310)) (* (* 2.0 l_0_6_285) l_0_6_311))))
 (let ((?x29632 (- (- ?x29628 (* (* 2.0 l_0_6_326) l_0_6_352)) (* (* 2.0 l_0_6_327) l_0_6_353))))
 (let ((?x29636 (- (- ?x29632 (* (* 2.0 l_0_6_328) l_0_6_354)) (* (* 2.0 l_0_6_329) l_0_6_355))))
 (= (- ?x29636 (* (* 2.0 l_0_6_330) l_0_6_356)) 0.0)))))))))
(assert
 (let ((?x29712 (* l_0_6_336 l_0_6_336)))
 (let ((?x29710 (* l_0_6_335 l_0_6_335)))
 (let ((?x29708 (* l_0_6_334 l_0_6_334)))
 (let ((?x29706 (* l_0_6_333 l_0_6_333)))
 (let ((?x29704 (* l_0_6_332 l_0_6_332)))
 (let ((?x29702 (* l_0_6_331 l_0_6_331)))
 (let ((?x29700 (* l_0_6_291 l_0_6_291)))
 (let ((?x29698 (* l_0_6_290 l_0_6_290)))
 (let ((?x29696 (* l_0_6_289 l_0_6_289)))
 (let ((?x29694 (* l_0_6_288 l_0_6_288)))
 (let ((?x29692 (* l_0_6_287 l_0_6_287)))
 (let ((?x29690 (* l_0_6_286 l_0_6_286)))
 (let ((?x29677 (- (* (* (- 1.0) l_0_6_196) l_0_6_196) (* (* 1.0 l_0_6_197) l_0_6_197))))
 (let ((?x29683 (- (- ?x29677 (* (* 1.0 l_0_6_198) l_0_6_198)) (* (* 1.0 l_0_6_199) l_0_6_199))))
 (let ((?x29689 (- (- ?x29683 (* (* 1.0 l_0_6_200) l_0_6_200)) (* (* 1.0 l_0_6_201) l_0_6_201))))
 (let ((?x29703 (- (- (- (- (- (- (- ?x29689 ?x29690) ?x29692) ?x29694) ?x29696) ?x29698) ?x29700) ?x29702)))
 (= (- (- (- (- (- ?x29703 ?x29704) ?x29706) ?x29708) ?x29710) ?x29712) 0.0))))))))))))))))))
(assert
 (let ((?x29753 (- (* (* (- 2.0) l_0_6_196) l_0_6_217) (* (* 2.0 l_0_6_197) l_0_6_218))))
 (let ((?x29757 (- (- ?x29753 (* (* 2.0 l_0_6_198) l_0_6_219)) (* (* 2.0 l_0_6_199) l_0_6_220))))
 (let ((?x29761 (- (- ?x29757 (* (* 2.0 l_0_6_200) l_0_6_221)) (* (* 2.0 l_0_6_201) l_0_6_222))))
 (let ((?x29765 (- (- ?x29761 (* (* 2.0 l_0_6_286) l_0_6_307)) (* (* 2.0 l_0_6_287) l_0_6_308))))
 (let ((?x29769 (- (- ?x29765 (* (* 2.0 l_0_6_288) l_0_6_309)) (* (* 2.0 l_0_6_289) l_0_6_310))))
 (let ((?x29773 (- (- ?x29769 (* (* 2.0 l_0_6_290) l_0_6_311)) (* (* 2.0 l_0_6_291) l_0_6_312))))
 (let ((?x29777 (- (- ?x29773 (* (* 2.0 l_0_6_331) l_0_6_352)) (* (* 2.0 l_0_6_332) l_0_6_353))))
 (let ((?x29781 (- (- ?x29777 (* (* 2.0 l_0_6_333) l_0_6_354)) (* (* 2.0 l_0_6_334) l_0_6_355))))
 (let ((?x29785 (- (- ?x29781 (* (* 2.0 l_0_6_335) l_0_6_356)) (* (* 2.0 l_0_6_336) l_0_6_357))))
 (= ?x29785 0.0)))))))))))
(assert
 (let ((?x29901 (* l_0_6_343 l_0_6_343)))
 (let ((?x29899 (* l_0_6_342 l_0_6_342)))
 (let ((?x29897 (* l_0_6_341 l_0_6_341)))
 (let ((?x29895 (* l_0_6_340 l_0_6_340)))
 (let ((?x29893 (* l_0_6_339 l_0_6_339)))
 (let ((?x29891 (* l_0_6_338 l_0_6_338)))
 (let ((?x29889 (* l_0_6_337 l_0_6_337)))
 (let ((?x29887 (* l_0_6_298 l_0_6_298)))
 (let ((?x29885 (* l_0_6_297 l_0_6_297)))
 (let ((?x29883 (* l_0_6_296 l_0_6_296)))
 (let ((?x29881 (* l_0_6_295 l_0_6_295)))
 (let ((?x29879 (* l_0_6_294 l_0_6_294)))
 (let ((?x29877 (* l_0_6_293 l_0_6_293)))
 (let ((?x29875 (* l_0_6_292 l_0_6_292)))
 (let ((?x29859 (- (* (* (- 1.0) l_0_6_202) l_0_6_202) (* (* 1.0 l_0_6_203) l_0_6_203))))
 (let ((?x29865 (- (- ?x29859 (* (* 1.0 l_0_6_204) l_0_6_204)) (* (* 1.0 l_0_6_205) l_0_6_205))))
 (let ((?x29871 (- (- ?x29865 (* (* 1.0 l_0_6_206) l_0_6_206)) (* (* 1.0 l_0_6_207) l_0_6_207))))
 (let ((?x29880 (- (- (- (- ?x29871 (* (* 1.0 l_0_6_208) l_0_6_208)) ?x29875) ?x29877) ?x29879)))
 (let ((?x29894 (- (- (- (- (- (- (- ?x29880 ?x29881) ?x29883) ?x29885) ?x29887) ?x29889) ?x29891) ?x29893)))
 (= (- (- (- (- ?x29894 ?x29895) ?x29897) ?x29899) ?x29901) 0.0)))))))))))))))))))))
(assert
 (let ((?x30001 (* l_0_6_360 l_0_6_360)))
 (let ((?x29999 (* l_0_6_359 l_0_6_359)))
 (let ((?x29997 (* l_0_6_358 l_0_6_358)))
 (let ((?x29995 (* l_0_6_357 l_0_6_357)))
 (let ((?x29993 (* l_0_6_356 l_0_6_356)))
 (let ((?x29991 (* l_0_6_355 l_0_6_355)))
 (let ((?x29989 (* l_0_6_354 l_0_6_354)))
 (let ((?x29987 (* l_0_6_353 l_0_6_353)))
 (let ((?x29985 (* l_0_6_352 l_0_6_352)))
 (let ((?x29983 (* l_0_6_315 l_0_6_315)))
 (let ((?x29981 (* l_0_6_314 l_0_6_314)))
 (let ((?x29979 (* l_0_6_313 l_0_6_313)))
 (let ((?x29977 (* l_0_6_312 l_0_6_312)))
 (let ((?x29975 (* l_0_6_311 l_0_6_311)))
 (let ((?x29973 (* l_0_6_310 l_0_6_310)))
 (let ((?x29971 (* l_0_6_309 l_0_6_309)))
 (let ((?x29969 (* l_0_6_308 l_0_6_308)))
 (let ((?x29967 (* l_0_6_307 l_0_6_307)))
 (let ((?x29945 (- (* (* (- 1.0) l_0_6_217) l_0_6_217) (* (* 1.0 l_0_6_218) l_0_6_218))))
 (let ((?x29951 (- (- ?x29945 (* (* 1.0 l_0_6_219) l_0_6_219)) (* (* 1.0 l_0_6_220) l_0_6_220))))
 (let ((?x29957 (- (- ?x29951 (* (* 1.0 l_0_6_221) l_0_6_221)) (* (* 1.0 l_0_6_222) l_0_6_222))))
 (let ((?x29963 (- (- ?x29957 (* (* 1.0 l_0_6_223) l_0_6_223)) (* (* 1.0 l_0_6_224) l_0_6_224))))
 (let ((?x29972 (- (- (- (- ?x29963 (* (* 1.0 l_0_6_225) l_0_6_225)) ?x29967) ?x29969) ?x29971)))
 (let ((?x29986 (- (- (- (- (- (- (- ?x29972 ?x29973) ?x29975) ?x29977) ?x29979) ?x29981) ?x29983) ?x29985)))
 (let ((?x30000 (- (- (- (- (- (- (- ?x29986 ?x29987) ?x29989) ?x29991) ?x29993) ?x29995) ?x29997) ?x29999)))
 (= (- ?x30000 ?x30001) 0.0)))))))))))))))))))))))))))
(assert
 (>= l_0_6_1 0.0))
(assert
 (>= l_0_6_3 0.0))
(assert
 (>= l_0_6_6 0.0))
(assert
 (>= l_0_6_10 0.0))
(assert
 (>= l_0_6_15 0.0))
(assert
 (>= l_0_6_21 0.0))
(assert
 (>= l_0_6_28 0.0))
(assert
 (>= l_0_6_36 0.0))
(assert
 (>= l_0_6_45 0.0))
(assert
 (>= l_0_6_46 0.0))
(assert
 (>= l_0_6_48 0.0))
(assert
 (>= l_0_6_51 0.0))
(assert
 (>= l_0_6_55 0.0))
(assert
 (>= l_0_6_60 0.0))
(assert
 (>= l_0_6_66 0.0))
(assert
 (>= l_0_6_73 0.0))
(assert
 (>= l_0_6_81 0.0))
(assert
 (>= l_0_6_90 0.0))
(assert
 (>= l_0_6_91 0.0))
(assert
 (>= l_0_6_93 0.0))
(assert
 (>= l_0_6_96 0.0))
(assert
 (>= l_0_6_100 0.0))
(assert
 (>= l_0_6_105 0.0))
(assert
 (>= l_0_6_111 0.0))
(assert
 (>= l_0_6_118 0.0))
(assert
 (>= l_0_6_126 0.0))
(assert
 (>= l_0_6_135 0.0))
(assert
 (>= l_0_6_136 0.0))
(assert
 (>= l_0_6_138 0.0))
(assert
 (>= l_0_6_141 0.0))
(assert
 (>= l_0_6_145 0.0))
(assert
 (>= l_0_6_150 0.0))
(assert
 (>= l_0_6_156 0.0))
(assert
 (>= l_0_6_163 0.0))
(assert
 (>= l_0_6_171 0.0))
(assert
 (>= l_0_6_180 0.0))
(assert
 (>= l_0_6_181 0.0))
(assert
 (>= l_0_6_183 0.0))
(assert
 (>= l_0_6_186 0.0))
(assert
 (>= l_0_6_190 0.0))
(assert
 (>= l_0_6_195 0.0))
(assert
 (>= l_0_6_201 0.0))
(assert
 (>= l_0_6_208 0.0))
(assert
 (>= l_0_6_216 0.0))
(assert
 (>= l_0_6_225 0.0))
(assert
 (>= l_0_6_226 0.0))
(assert
 (>= l_0_6_228 0.0))
(assert
 (>= l_0_6_231 0.0))
(assert
 (>= l_0_6_235 0.0))
(assert
 (>= l_0_6_240 0.0))
(assert
 (>= l_0_6_246 0.0))
(assert
 (>= l_0_6_253 0.0))
(assert
 (>= l_0_6_261 0.0))
(assert
 (>= l_0_6_270 0.0))
(assert
 (>= l_0_6_271 0.0))
(assert
 (>= l_0_6_273 0.0))
(assert
 (>= l_0_6_276 0.0))
(assert
 (>= l_0_6_280 0.0))
(assert
 (>= l_0_6_285 0.0))
(assert
 (>= l_0_6_291 0.0))
(assert
 (>= l_0_6_298 0.0))
(assert
 (>= l_0_6_306 0.0))
(assert
 (>= l_0_6_315 0.0))
(assert
 (>= l_0_6_316 0.0))
(assert
 (>= l_0_6_318 0.0))
(assert
 (>= l_0_6_321 0.0))
(assert
 (>= l_0_6_325 0.0))
(assert
 (>= l_0_6_330 0.0))
(assert
 (>= l_0_6_336 0.0))
(assert
 (>= l_0_6_343 0.0))
(assert
 (>= l_0_6_351 0.0))
(assert
 (>= l_0_6_360 0.0))
(assert
 (let ((?x30143 (* l_0_7_91 l_0_7_91)))
 (let ((?x30124 (- (- (* l_0_7_136 l_0_7_136) (* (* 2.0 l_0_7_182) l_0_7_187)) (* (* 2.0 l_0_7_183) l_0_7_188))))
 (let ((?x30130 (- (- ?x30124 (* (* 2.0 l_0_7_272) l_0_7_277)) (* (* 2.0 l_0_7_273) l_0_7_278))))
 (let ((?x30136 (- (- ?x30130 (* (* 2.0 l_0_7_317) l_0_7_322)) (* (* 2.0 l_0_7_318) l_0_7_323))))
 (let ((?x30142 (- (- ?x30136 (* (* 2.0 l_0_7_362) l_0_7_367)) (* (* 2.0 l_0_7_363) l_0_7_368))))
 (= (+ (- ?x30142 ?x30143) 1.0) 0.0)))))))
(assert
 (let ((?x30143 (* l_0_7_91 l_0_7_91)))
 (let ((?x30181 (- (- (* l_0_7_136 l_0_7_136) (* (* 2.0 l_0_7_202) l_0_7_217)) (* (* 2.0 l_0_7_203) l_0_7_218))))
 (let ((?x30187 (- (- ?x30181 (* (* 2.0 l_0_7_204) l_0_7_219)) (* (* 2.0 l_0_7_205) l_0_7_220))))
 (let ((?x30193 (- (- ?x30187 (* (* 2.0 l_0_7_206) l_0_7_221)) (* (* 2.0 l_0_7_207) l_0_7_222))))
 (let ((?x30199 (- (- ?x30193 (* (* 2.0 l_0_7_208) l_0_7_223)) (* (* 2.0 l_0_7_292) l_0_7_307))))
 (let ((?x30205 (- (- ?x30199 (* (* 2.0 l_0_7_293) l_0_7_308)) (* (* 2.0 l_0_7_294) l_0_7_309))))
 (let ((?x30211 (- (- ?x30205 (* (* 2.0 l_0_7_295) l_0_7_310)) (* (* 2.0 l_0_7_296) l_0_7_311))))
 (let ((?x30217 (- (- ?x30211 (* (* 2.0 l_0_7_297) l_0_7_312)) (* (* 2.0 l_0_7_298) l_0_7_313))))
 (let ((?x30223 (- (- ?x30217 (* (* 2.0 l_0_7_337) l_0_7_352)) (* (* 2.0 l_0_7_338) l_0_7_353))))
 (let ((?x30229 (- (- ?x30223 (* (* 2.0 l_0_7_339) l_0_7_354)) (* (* 2.0 l_0_7_340) l_0_7_355))))
 (let ((?x30235 (- (- ?x30229 (* (* 2.0 l_0_7_341) l_0_7_356)) (* (* 2.0 l_0_7_342) l_0_7_357))))
 (let ((?x30241 (- (- ?x30235 (* (* 2.0 l_0_7_343) l_0_7_358)) (* (* 2.0 l_0_7_382) l_0_7_397))))
 (let ((?x30247 (- (- ?x30241 (* (* 2.0 l_0_7_383) l_0_7_398)) (* (* 2.0 l_0_7_384) l_0_7_399))))
 (let ((?x30253 (- (- ?x30247 (* (* 2.0 l_0_7_385) l_0_7_400)) (* (* 2.0 l_0_7_386) l_0_7_401))))
 (let ((?x30259 (- (- ?x30253 (* (* 2.0 l_0_7_387) l_0_7_402)) (* (* 2.0 l_0_7_388) l_0_7_403))))
 (= (+ (- ?x30259 ?x30143) 1.0) 0.0)))))))))))))))))
(assert
 (let ((?x30143 (* l_0_7_91 l_0_7_91)))
 (let ((?x30349 (* l_0_7_226 l_0_7_226)))
 (let ((?x30348 (- (* (- l_0_7_136) l_0_7_136) (* (* 2.0 l_0_7_181) l_0_7_209))))
 (let ((?x30356 (- (- (+ ?x30348 ?x30349) (* (* 2.0 l_0_7_271) l_0_7_299)) (* (* 2.0 l_0_7_316) l_0_7_344))))
 (= (- (+ (- ?x30356 (* (* 2.0 l_0_7_361) l_0_7_389)) ?x30143) 1.0) 0.0))))))
(assert
 (let ((?x30457 (* l_0_7_46 l_0_7_46)))
 (let ((?x30390 (- (- (* (- l_0_7_1) l_0_7_1) (* (* 2.0 l_0_7_196) l_0_7_202)) (* (* 2.0 l_0_7_197) l_0_7_203))))
 (let ((?x30396 (- (- ?x30390 (* (* 2.0 l_0_7_198) l_0_7_204)) (* (* 2.0 l_0_7_199) l_0_7_205))))
 (let ((?x30402 (- (- ?x30396 (* (* 2.0 l_0_7_200) l_0_7_206)) (* (* 2.0 l_0_7_201) l_0_7_207))))
 (let ((?x30408 (- (- ?x30402 (* (* 2.0 l_0_7_286) l_0_7_292)) (* (* 2.0 l_0_7_287) l_0_7_293))))
 (let ((?x30414 (- (- ?x30408 (* (* 2.0 l_0_7_288) l_0_7_294)) (* (* 2.0 l_0_7_289) l_0_7_295))))
 (let ((?x30420 (- (- ?x30414 (* (* 2.0 l_0_7_290) l_0_7_296)) (* (* 2.0 l_0_7_291) l_0_7_297))))
 (let ((?x30426 (- (- ?x30420 (* (* 2.0 l_0_7_331) l_0_7_337)) (* (* 2.0 l_0_7_332) l_0_7_338))))
 (let ((?x30432 (- (- ?x30426 (* (* 2.0 l_0_7_333) l_0_7_339)) (* (* 2.0 l_0_7_334) l_0_7_340))))
 (let ((?x30438 (- (- ?x30432 (* (* 2.0 l_0_7_335) l_0_7_341)) (* (* 2.0 l_0_7_336) l_0_7_342))))
 (let ((?x30444 (- (- ?x30438 (* (* 2.0 l_0_7_376) l_0_7_382)) (* (* 2.0 l_0_7_377) l_0_7_383))))
 (let ((?x30450 (- (- ?x30444 (* (* 2.0 l_0_7_378) l_0_7_384)) (* (* 2.0 l_0_7_379) l_0_7_385))))
 (let ((?x30456 (- (- ?x30450 (* (* 2.0 l_0_7_380) l_0_7_386)) (* (* 2.0 l_0_7_381) l_0_7_387))))
 (= (+ ?x30456 ?x30457) 0.0)))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30545 (* ?x30544 l_0_7_47)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30543 (* ?x16979 l_0_7_2)))
 (= (+ ?x30543 ?x30545) 0.0))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x30609 (* ?x30608 l_0_7_72)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x30606 (* ?x30605 l_0_7_71)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x30603 (* ?x30602 l_0_7_70)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x30600 (* ?x30599 l_0_7_69)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x30597 (* ?x30596 l_0_7_68)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x30594 (* ?x30593 l_0_7_67)))
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30591 (* ?x30544 l_0_7_49)))
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x30589 (* ?x30588 l_0_7_252)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x30586 (* ?x30585 l_0_7_251)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x30583 (* ?x30582 l_0_7_250)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x30580 (* ?x30579 l_0_7_249)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x30577 (* ?x30576 l_0_7_248)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x30574 (* ?x30573 l_0_7_247)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x30571 (* ?x30570 l_0_7_27)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x30568 (* ?x30567 l_0_7_26)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x30565 (* ?x30564 l_0_7_25)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x30562 (* ?x30561 l_0_7_24)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30559 (* ?x30558 l_0_7_23)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x30552 (* ?x30551 l_0_7_22)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30549 (* ?x16979 l_0_7_4)))
 (let ((?x30575 (- (+ (+ (+ (+ (+ (+ ?x30549 ?x30552) ?x30559) ?x30562) ?x30565) ?x30568) ?x30571) ?x30574)))
 (let ((?x30595 (- (+ (- (- (- (- (- ?x30575 ?x30577) ?x30580) ?x30583) ?x30586) ?x30589) ?x30591) ?x30594)))
 (= (- (- (- (- (- ?x30595 ?x30597) ?x30600) ?x30603) ?x30606) ?x30609) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30679 (* ?x30544 l_0_7_52)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) ?x30679) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30685 (* ?x30544 l_0_7_56)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_11) ?x30685) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30695 (* ?x30544 l_0_7_61)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x30695) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30705 (* ?x30544 l_0_7_67)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_22) ?x30705) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30761 (* ?x30544 l_0_7_74)))
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x30589 (* ?x30588 l_0_7_252)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x30586 (* ?x30585 l_0_7_251)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x30583 (* ?x30582 l_0_7_250)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x30580 (* ?x30579 l_0_7_249)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x30577 (* ?x30576 l_0_7_248)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x30574 (* ?x30573 l_0_7_247)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x30753 (* ?x30752 l_0_7_162)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x30750 (* ?x30749 l_0_7_161)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x30747 (* ?x30746 l_0_7_160)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x30744 (* ?x30743 l_0_7_159)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x30741 (* ?x30740 l_0_7_158)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x30738 (* ?x30737 l_0_7_157)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x30735 (* ?x30734 l_0_7_117)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x30732 (* ?x30731 l_0_7_116)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x30729 (* ?x30728 l_0_7_115)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x30726 (* ?x30725 l_0_7_114)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30723 (* ?x30722 l_0_7_113)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30713 (* ?x16979 l_0_7_29)))
 (let ((?x30730 (+ (+ (+ (+ ?x30713 (* (* 2.0 l_0_7_106) l_0_7_112)) ?x30723) ?x30726) ?x30729)))
 (let ((?x30751 (- (- (- (- (- (+ (+ ?x30730 ?x30732) ?x30735) ?x30738) ?x30741) ?x30744) ?x30747) ?x30750)))
 (let ((?x30760 (+ (+ (+ (+ (+ (+ (- ?x30751 ?x30753) ?x30574) ?x30577) ?x30580) ?x30583) ?x30586) ?x30589)))
 (= (+ ?x30760 ?x30761) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30802 (* ?x30544 l_0_7_82)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x30800 (* ?x30799 l_0_7_151)))
 (let ((?x30715 (* 2.0 l_0_7_106)))
 (let ((?x17082 (* ?x30715 l_0_7_91)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x17081 (* ?x16979 l_0_7_37)))
 (= (+ (+ (- ?x17081 ?x17082) ?x30800) ?x30802) 0.0))))))))))
(assert
 (let ((?x30822 (* l_0_7_48 l_0_7_48)))
 (let ((?x30820 (* l_0_7_47 l_0_7_47)))
 (let ((?x30823 (+ (+ (- (* (- l_0_7_2) l_0_7_2) (* l_0_7_3 l_0_7_3)) ?x30820) ?x30822)))
 (= ?x30823 0.0)))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30841 (* ?x30840 l_0_7_50)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30838 (* ?x30837 l_0_7_49)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30835 (* ?x30834 l_0_7_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_4) ?x30835) ?x30838) ?x30841) 0.0))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30879 (* ?x30840 l_0_7_53)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30877 (* ?x30837 l_0_7_52)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30875 (* ?x30834 l_0_7_8)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30873 (* ?x30872 l_0_7_7)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x30753 (* ?x30752 l_0_7_162)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x30750 (* ?x30749 l_0_7_161)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x30747 (* ?x30746 l_0_7_160)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x30744 (* ?x30743 l_0_7_159)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x30741 (* ?x30740 l_0_7_158)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x30738 (* ?x30737 l_0_7_157)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x30735 (* ?x30734 l_0_7_117)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x30732 (* ?x30731 l_0_7_116)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x30729 (* ?x30728 l_0_7_115)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x30726 (* ?x30725 l_0_7_114)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30723 (* ?x30722 l_0_7_113)))
 (let ((?x30864 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x30723) ?x30726) ?x30729) ?x30732)))
 (let ((?x30871 (+ (+ (+ (+ (+ (+ (- ?x30864 ?x30735) ?x30738) ?x30741) ?x30744) ?x30747) ?x30750) ?x30753)))
 (= (+ (+ (- (- ?x30871 ?x30873) ?x30875) ?x30877) ?x30879) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30894 (* ?x30840 l_0_7_57)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30892 (* ?x30837 l_0_7_56)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x30890 (* ?x30889 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_11) l_0_7_2) ?x30890) ?x30892) ?x30894) 0.0))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30915 (* ?x30840 l_0_7_62)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30913 (* ?x30837 l_0_7_61)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30911 (* ?x30558 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_16) l_0_7_2) ?x30911) ?x30913) ?x30915) 0.0))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30939 (* ?x30840 l_0_7_68)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30937 (* ?x30837 l_0_7_67)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x30930 (* ?x30929 l_0_7_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_22) ?x30930) ?x30937) ?x30939) 0.0))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30958 (* ?x30840 l_0_7_75)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30956 (* ?x30837 l_0_7_74)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30949 (* ?x30834 l_0_7_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_2) l_0_7_29) ?x30949) ?x30956) ?x30958) 0.0))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30991 (* ?x30840 l_0_7_83)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30989 (* ?x30837 l_0_7_82)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30987 (* ?x30834 l_0_7_38)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30985 (* ?x30872 l_0_7_37)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x30983 (* ?x30982 l_0_7_152)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x30980 (* ?x30979 l_0_7_151)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30972 (* ?x30722 l_0_7_93)))
 (let ((?x30984 (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_92) ?x30972) ?x30980) ?x30983)))
 (= (+ (+ (- (- ?x30984 ?x30985) ?x30987) ?x30989) ?x30991) 0.0)))))))))))))))))
(assert
 (let ((?x31028 (* l_0_7_6 l_0_7_6)))
 (let ((?x31026 (* l_0_7_51 l_0_7_51)))
 (let ((?x31024 (* l_0_7_50 l_0_7_50)))
 (let ((?x31022 (* l_0_7_5 l_0_7_5)))
 (let ((?x31025 (+ (- (+ (* (- l_0_7_4) l_0_7_4) (* l_0_7_49 l_0_7_49)) ?x31022) ?x31024)))
 (= (- (+ ?x31025 ?x31026) ?x31028) 0.0)))))))
(assert
 (let ((?x31055 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31052 (* ?x31051 l_0_7_54)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31049 (* ?x31048 l_0_7_53)))
 (let ((?x31046 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31043 (* ?x31042 l_0_7_52)))
 (let ((?x31053 (+ (+ (- (+ (* (* (- 2.0) l_0_7_4) l_0_7_7) ?x31043) ?x31046) ?x31049) ?x31052)))
 (= (- ?x31053 ?x31055) 0.0)))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31096 (* ?x31051 l_0_7_58)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31094 (* ?x31048 l_0_7_57)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31092 (* ?x31042 l_0_7_56)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31090 (* ?x31089 l_0_7_6)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31087 (* ?x30889 l_0_7_5)))
 (let ((?x31095 (+ (+ (- (- (* (* (- 2.0) l_0_7_11) l_0_7_4) ?x31087) ?x31090) ?x31092) ?x31094)))
 (= (+ ?x31095 ?x31096) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31125 (* ?x31051 l_0_7_63)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31123 (* ?x31048 l_0_7_62)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31121 (* ?x31042 l_0_7_61)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31113 (* ?x30561 l_0_7_6)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31110 (* ?x30558 l_0_7_5)))
 (let ((?x31124 (+ (+ (- (- (* (* (- 2.0) l_0_7_16) l_0_7_4) ?x31110) ?x31113) ?x31121) ?x31123)))
 (= (+ ?x31124 ?x31125) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31156 (* ?x31051 l_0_7_69)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31154 (* ?x31048 l_0_7_68)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31152 (* ?x31042 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31150 (* ?x31149 l_0_7_6)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31141 (* ?x30929 l_0_7_5)))
 (let ((?x31155 (+ (+ (- (- (* (* (- 2.0) l_0_7_22) l_0_7_4) ?x31141) ?x31150) ?x31152) ?x31154)))
 (= (+ ?x31155 ?x31156) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31188 (* ?x31051 l_0_7_76)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31186 (* ?x31048 l_0_7_75)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31184 (* ?x31042 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31182 (* ?x31181 l_0_7_6)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31173 (* ?x31172 l_0_7_5)))
 (let ((?x31187 (+ (+ (- (- (* (* (- 2.0) l_0_7_29) l_0_7_4) ?x31173) ?x31182) ?x31184) ?x31186)))
 (= (+ ?x31187 ?x31188) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31236 (* ?x31051 l_0_7_84)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31234 (* ?x31048 l_0_7_83)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31232 (* ?x31042 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31230 (* ?x31229 l_0_7_6)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31227 (* ?x31226 l_0_7_5)))
 (let ((?x31223 (* 2.0 l_0_7_37)))
 (let ((?x31224 (* ?x31223 l_0_7_4)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x31221 (* ?x31220 l_0_7_153)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x31218 (* ?x31217 l_0_7_152)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x31215 (* ?x31214 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31212 (* ?x30725 l_0_7_96)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31210 (* ?x30722 l_0_7_95)))
 (let ((?x31219 (+ (+ (- (- (* (* (- 2.0) l_0_7_106) l_0_7_94) ?x31210) ?x31212) ?x31215) ?x31218)))
 (let ((?x31222 (+ ?x31219 ?x31221)))
 (= (+ (+ (+ (- (- (- ?x31222 ?x31224) ?x31227) ?x31230) ?x31232) ?x31234) ?x31236) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31288 (* l_0_7_9 l_0_7_9)))
 (let ((?x31286 (* l_0_7_8 l_0_7_8)))
 (let ((?x31284 (* l_0_7_7 l_0_7_7)))
 (let ((?x31282 (* l_0_7_55 l_0_7_55)))
 (let ((?x31280 (* l_0_7_54 l_0_7_54)))
 (let ((?x31278 (* l_0_7_53 l_0_7_53)))
 (let ((?x31281 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_52 l_0_7_52)) ?x31278) ?x31280)))
 (= (- (- (- (+ ?x31281 ?x31282) ?x31284) ?x31286) ?x31288) 0.0)))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x30609 (* ?x30608 l_0_7_72)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x30606 (* ?x30605 l_0_7_71)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x30603 (* ?x30602 l_0_7_70)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x30600 (* ?x30599 l_0_7_69)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x30597 (* ?x30596 l_0_7_68)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x30594 (* ?x30593 l_0_7_67)))
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31327 (* ?x31326 l_0_7_59)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31324 (* ?x31323 l_0_7_58)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31321 (* ?x31320 l_0_7_57)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31318 (* ?x31317 l_0_7_56)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x30571 (* ?x30570 l_0_7_27)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x30568 (* ?x30567 l_0_7_26)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x30565 (* ?x30564 l_0_7_25)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x30562 (* ?x30561 l_0_7_24)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30559 (* ?x30558 l_0_7_23)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x30552 (* ?x30551 l_0_7_22)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31309 (* ?x31089 l_0_7_9)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31307 (* ?x30889 l_0_7_8)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x31305 (* ?x31304 l_0_7_7)))
 (let ((?x31310 (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_14) ?x31305) ?x31307) ?x31309)))
 (let ((?x31319 (+ (- (- (- (- (- (- ?x31310 ?x30552) ?x30559) ?x30562) ?x30565) ?x30568) ?x30571) ?x31318)))
 (let ((?x31332 (+ (+ (+ (+ (+ (+ (+ ?x31319 ?x31321) ?x31324) ?x31327) ?x30594) ?x30597) ?x30600) ?x30603)))
 (= (+ (+ ?x31332 ?x30606) ?x30609) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31364 (* ?x31326 l_0_7_64)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31362 (* ?x31323 l_0_7_63)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31360 (* ?x31320 l_0_7_62)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31358 (* ?x31317 l_0_7_61)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31356 (* ?x30561 l_0_7_9)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31354 (* ?x30558 l_0_7_8)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x31352 (* ?x30551 l_0_7_7)))
 (let ((?x31359 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) ?x31352) ?x31354) ?x31356) ?x31358)))
 (= (+ (+ (+ ?x31359 ?x31360) ?x31362) ?x31364) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31391 (* ?x31326 l_0_7_70)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31389 (* ?x31323 l_0_7_69)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31387 (* ?x31320 l_0_7_68)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31385 (* ?x31317 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31383 (* ?x31149 l_0_7_9)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31374 (* ?x30929 l_0_7_8)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17443 (* ?x17439 l_0_7_7)))
 (let ((?x31386 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_25) ?x17443) ?x31374) ?x31383) ?x31385)))
 (= (+ (+ (+ ?x31386 ?x31387) ?x31389) ?x31391) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31433 (* ?x31326 l_0_7_77)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31431 (* ?x31323 l_0_7_76)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31429 (* ?x31320 l_0_7_75)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31427 (* ?x31317 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31425 (* ?x31181 l_0_7_9)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31416 (* ?x31172 l_0_7_8)))
 (let ((?x31411 (* 2.0 l_0_7_29)))
 (let ((?x31413 (* ?x31411 l_0_7_7)))
 (let ((?x31428 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_32) ?x31413) ?x31416) ?x31425) ?x31427)))
 (= (+ (+ (+ ?x31428 ?x31429) ?x31431) ?x31433) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31495 (* ?x31326 l_0_7_85)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31493 (* ?x31323 l_0_7_84)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31491 (* ?x31320 l_0_7_83)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31489 (* ?x31317 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31487 (* ?x31229 l_0_7_9)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31485 (* ?x31226 l_0_7_8)))
 (let ((?x31223 (* 2.0 l_0_7_37)))
 (let ((?x31483 (* ?x31223 l_0_7_7)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x31481 (* ?x31480 l_0_7_154)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x31478 (* ?x31477 l_0_7_153)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x31475 (* ?x31474 l_0_7_152)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x31472 (* ?x31471 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31469 (* ?x30725 l_0_7_99)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31467 (* ?x30722 l_0_7_98)))
 (let ((?x30715 (* 2.0 l_0_7_106)))
 (let ((?x31458 (* ?x30715 l_0_7_97)))
 (let ((?x31453 (* 2.0 l_0_7_100)))
 (let ((?x31455 (* ?x31453 l_0_7_109)))
 (let ((?x31302 (* (- 2.0) l_0_7_10)))
 (let ((?x31451 (* ?x31302 l_0_7_40)))
 (let ((?x31479 (+ (+ (+ (- (- (- (- ?x31451 ?x31455) ?x31458) ?x31467) ?x31469) ?x31472) ?x31475) ?x31478)))
 (let ((?x31494 (+ (+ (+ (- (- (- (+ ?x31479 ?x31481) ?x31483) ?x31485) ?x31487) ?x31489) ?x31491) ?x31493)))
 (= (+ ?x31494 ?x31495) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31565 (* l_0_7_60 l_0_7_60)))
 (let ((?x31563 (* l_0_7_59 l_0_7_59)))
 (let ((?x31561 (* l_0_7_58 l_0_7_58)))
 (let ((?x31559 (* l_0_7_57 l_0_7_57)))
 (let ((?x31557 (* l_0_7_56 l_0_7_56)))
 (let ((?x31555 (* l_0_7_15 l_0_7_15)))
 (let ((?x31553 (* l_0_7_14 l_0_7_14)))
 (let ((?x31540 (* l_0_7_13 l_0_7_13)))
 (let ((?x31554 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x31540) ?x31553)))
 (= (+ (+ (+ (+ (+ (- ?x31554 ?x31555) ?x31557) ?x31559) ?x31561) ?x31563) ?x31565) 0.0)))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31608 (* ?x31607 l_0_7_65)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31605 (* ?x31604 l_0_7_64)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31602 (* ?x31601 l_0_7_63)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31599 (* ?x31598 l_0_7_62)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31596 (* ?x31595 l_0_7_61)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31593 (* ?x31592 l_0_7_20)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31590 (* ?x31589 l_0_7_19)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31587 (* ?x31089 l_0_7_18)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31585 (* ?x30889 l_0_7_17)))
 (let ((?x31594 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_16) ?x31585) ?x31587) ?x31590) ?x31593)))
 (= (+ (+ (+ (+ (+ ?x31594 ?x31596) ?x31599) ?x31602) ?x31605) ?x31608) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31660 (* ?x31607 l_0_7_71)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31658 (* ?x31604 l_0_7_70)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31656 (* ?x31601 l_0_7_69)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31654 (* ?x31598 l_0_7_68)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31652 (* ?x31595 l_0_7_67)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31650 (* ?x31592 l_0_7_26)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31640 (* ?x31589 l_0_7_25)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31637 (* ?x31089 l_0_7_24)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31633 (* ?x30889 l_0_7_23)))
 (let ((?x31651 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_22) ?x31633) ?x31637) ?x31640) ?x31650)))
 (= (+ (+ (+ (+ (+ ?x31651 ?x31652) ?x31654) ?x31656) ?x31658) ?x31660) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31699 (* ?x31607 l_0_7_78)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31697 (* ?x31604 l_0_7_77)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31695 (* ?x31601 l_0_7_76)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31693 (* ?x31598 l_0_7_75)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31691 (* ?x31595 l_0_7_74)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31689 (* ?x31592 l_0_7_33)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31679 (* ?x31589 l_0_7_32)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x17605 (* ?x31089 l_0_7_31)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31676 (* ?x30889 l_0_7_30)))
 (let ((?x31690 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_29) ?x31676) ?x17605) ?x31679) ?x31689)))
 (= (+ (+ (+ (+ (+ ?x31690 ?x31691) ?x31693) ?x31695) ?x31697) ?x31699) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31777 (* ?x31607 l_0_7_86)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31775 (* ?x31604 l_0_7_85)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31773 (* ?x31601 l_0_7_84)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31771 (* ?x31598 l_0_7_83)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31769 (* ?x31595 l_0_7_82)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x31767 (* ?x31766 l_0_7_155)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31764 (* ?x31592 l_0_7_41)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x31762 (* ?x31761 l_0_7_154)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x31759 (* ?x31758 l_0_7_153)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x31756 (* ?x31755 l_0_7_152)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x31753 (* ?x31752 l_0_7_151)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31750 (* ?x31589 l_0_7_40)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31748 (* ?x31089 l_0_7_39)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31746 (* ?x30889 l_0_7_38)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x31744 (* ?x31304 l_0_7_37)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x31742 (* ?x31741 l_0_7_110)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x31739 (* ?x31738 l_0_7_109)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x31736 (* ?x31727 l_0_7_108)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x31724 (* ?x31722 l_0_7_107)))
 (let ((?x31743 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_106) ?x31724) ?x31736) ?x31739) ?x31742)))
 (let ((?x31760 (+ (+ (+ (- (- (- (- ?x31743 ?x31744) ?x31746) ?x31748) ?x31750) ?x31753) ?x31756) ?x31759)))
 (let ((?x31776 (+ (+ (+ (+ (+ (- (+ ?x31760 ?x31762) ?x31764) ?x31767) ?x31769) ?x31771) ?x31773) ?x31775)))
 (= (+ ?x31776 ?x31777) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31860 (* l_0_7_66 l_0_7_66)))
 (let ((?x31858 (* l_0_7_65 l_0_7_65)))
 (let ((?x31856 (* l_0_7_64 l_0_7_64)))
 (let ((?x31854 (* l_0_7_63 l_0_7_63)))
 (let ((?x31852 (* l_0_7_62 l_0_7_62)))
 (let ((?x31850 (* l_0_7_61 l_0_7_61)))
 (let ((?x31848 (* l_0_7_21 l_0_7_21)))
 (let ((?x31846 (* l_0_7_20 l_0_7_20)))
 (let ((?x31831 (* l_0_7_19 l_0_7_19)))
 (let ((?x31828 (* l_0_7_18 l_0_7_18)))
 (let ((?x31845 (- (- (- (* (- l_0_7_16) l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31828) ?x31831)))
 (let ((?x31859 (+ (+ (+ (+ (+ (- (- ?x31845 ?x31846) ?x31848) ?x31850) ?x31852) ?x31854) ?x31856) ?x31858)))
 (= (+ ?x31859 ?x31860) 0.0))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x30609 (* ?x30608 l_0_7_72)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x30606 (* ?x30605 l_0_7_71)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x30603 (* ?x30602 l_0_7_70)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x30600 (* ?x30599 l_0_7_69)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x30597 (* ?x30596 l_0_7_68)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x30594 (* ?x30593 l_0_7_67)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x30571 (* ?x30570 l_0_7_27)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x30568 (* ?x30567 l_0_7_26)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x30565 (* ?x30564 l_0_7_25)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x30562 (* ?x30561 l_0_7_24)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30559 (* ?x30558 l_0_7_23)))
 (let ((?x31887 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_22) ?x30559) ?x30562) ?x30565) ?x30568)))
 (let ((?x31894 (+ (+ (+ (+ (+ (+ (- ?x31887 ?x30571) ?x30594) ?x30597) ?x30600) ?x30603) ?x30606) ?x30609)))
 (= ?x31894 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x31926 (* ?x30608 l_0_7_79)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x31924 (* ?x30605 l_0_7_78)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x31922 (* ?x30602 l_0_7_77)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31920 (* ?x30599 l_0_7_76)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31918 (* ?x30596 l_0_7_75)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31916 (* ?x30593 l_0_7_74)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31914 (* ?x30570 l_0_7_34)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31912 (* ?x30567 l_0_7_33)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31910 (* ?x30564 l_0_7_32)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31908 (* ?x30561 l_0_7_31)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31906 (* ?x30558 l_0_7_30)))
 (let ((?x31913 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_29) ?x31906) ?x31908) ?x31910) ?x31912)))
 (let ((?x31927 (+ (+ (+ (+ (+ (+ (- ?x31913 ?x31914) ?x31916) ?x31918) ?x31920) ?x31922) ?x31924) ?x31926)))
 (= ?x31927 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x32004 (* ?x30608 l_0_7_87)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x32002 (* ?x30605 l_0_7_86)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x32000 (* ?x30602 l_0_7_85)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31998 (* ?x30599 l_0_7_84)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31996 (* ?x30596 l_0_7_83)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31994 (* ?x30593 l_0_7_82)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31992 (* ?x30570 l_0_7_42)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31990 (* ?x30567 l_0_7_41)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31988 (* ?x30564 l_0_7_40)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31986 (* ?x30561 l_0_7_39)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31984 (* ?x30558 l_0_7_38)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x31982 (* ?x30551 l_0_7_37)))
 (let ((?x31980 (* l_0_7_156 l_0_7_156)))
 (let ((?x31978 (* l_0_7_155 l_0_7_155)))
 (let ((?x31976 (* l_0_7_154 l_0_7_154)))
 (let ((?x31974 (* l_0_7_153 l_0_7_153)))
 (let ((?x31972 (* l_0_7_152 l_0_7_152)))
 (let ((?x31970 (* l_0_7_151 l_0_7_151)))
 (let ((?x31968 (* l_0_7_111 l_0_7_111)))
 (let ((?x31966 (* l_0_7_110 l_0_7_110)))
 (let ((?x31955 (* l_0_7_109 l_0_7_109)))
 (let ((?x31951 (* l_0_7_108 l_0_7_108)))
 (let ((?x31953 (- (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31951)))
 (let ((?x31977 (+ (+ (+ (+ (- (- (- ?x31953 ?x31955) ?x31966) ?x31968) ?x31970) ?x31972) ?x31974) ?x31976)))
 (let ((?x31981 (+ (+ ?x31977 ?x31978) ?x31980)))
 (let ((?x31995 (+ (- (- (- (- (- (- ?x31981 ?x31982) ?x31984) ?x31986) ?x31988) ?x31990) ?x31992) ?x31994)))
 (= (+ (+ (+ (+ (+ ?x31995 ?x31996) ?x31998) ?x32000) ?x32002) ?x32004) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32083 (* l_0_7_73 l_0_7_73)))
 (let ((?x32081 (* l_0_7_72 l_0_7_72)))
 (let ((?x32079 (* l_0_7_71 l_0_7_71)))
 (let ((?x32077 (* l_0_7_70 l_0_7_70)))
 (let ((?x32075 (* l_0_7_69 l_0_7_69)))
 (let ((?x32073 (* l_0_7_68 l_0_7_68)))
 (let ((?x32071 (* l_0_7_67 l_0_7_67)))
 (let ((?x32069 (* l_0_7_28 l_0_7_28)))
 (let ((?x32067 (* l_0_7_27 l_0_7_27)))
 (let ((?x32065 (* l_0_7_26 l_0_7_26)))
 (let ((?x32049 (* l_0_7_25 l_0_7_25)))
 (let ((?x32046 (* l_0_7_24 l_0_7_24)))
 (let ((?x32064 (- (- (- (* (- l_0_7_22) l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32046) ?x32049)))
 (let ((?x32078 (+ (+ (+ (+ (- (- (- ?x32064 ?x32065) ?x32067) ?x32069) ?x32071) ?x32073) ?x32075) ?x32077)))
 (= (+ (+ (+ ?x32078 ?x32079) ?x32081) ?x32083) 0.0))))))))))))))))
(assert
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32148 (* ?x32147 l_0_7_80)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32145 (* ?x32144 l_0_7_79)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32142 (* ?x32141 l_0_7_78)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32139 (* ?x32138 l_0_7_77)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32136 (* ?x32135 l_0_7_76)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32133 (* ?x32132 l_0_7_75)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32130 (* ?x32129 l_0_7_74)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32127 (* ?x32126 l_0_7_35)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32124 (* ?x32123 l_0_7_34)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32121 (* ?x32120 l_0_7_33)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32118 (* ?x32117 l_0_7_32)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32115 (* ?x31149 l_0_7_31)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32113 (* ?x30929 l_0_7_30)))
 (let ((?x32122 (- (- (- (- (* (* (- 2.0) l_0_7_22) l_0_7_29) ?x32113) ?x32115) ?x32118) ?x32121)))
 (let ((?x32143 (+ (+ (+ (+ (+ (- (- ?x32122 ?x32124) ?x32127) ?x32130) ?x32133) ?x32136) ?x32139) ?x32142)))
 (= (+ (+ ?x32143 ?x32145) ?x32148) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32216 (* ?x32147 l_0_7_88)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32214 (* ?x32144 l_0_7_87)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32212 (* ?x32141 l_0_7_86)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32210 (* ?x32138 l_0_7_85)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32208 (* ?x32135 l_0_7_84)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32206 (* ?x32132 l_0_7_83)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32204 (* ?x32129 l_0_7_82)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32202 (* ?x32126 l_0_7_43)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32200 (* ?x32123 l_0_7_42)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32198 (* ?x32120 l_0_7_41)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32186 (* ?x32117 l_0_7_40)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32182 (* ?x31149 l_0_7_39)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32178 (* ?x30929 l_0_7_38)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17922 (* ?x17439 l_0_7_37)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x30753 (* ?x30752 l_0_7_162)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x30750 (* ?x30749 l_0_7_161)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x30747 (* ?x30746 l_0_7_160)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x30744 (* ?x30743 l_0_7_159)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x30741 (* ?x30740 l_0_7_158)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x30738 (* ?x30737 l_0_7_157)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x30735 (* ?x30734 l_0_7_117)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x30732 (* ?x30731 l_0_7_116)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x30729 (* ?x30728 l_0_7_115)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x30726 (* ?x30725 l_0_7_114)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30723 (* ?x30722 l_0_7_113)))
 (let ((?x30864 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_112) ?x30723) ?x30726) ?x30729) ?x30732)))
 (let ((?x30871 (+ (+ (+ (+ (+ (+ (- ?x30864 ?x30735) ?x30738) ?x30741) ?x30744) ?x30747) ?x30750) ?x30753)))
 (let ((?x32203 (- (- (- (- (- (- (- ?x30871 ?x17922) ?x32178) ?x32182) ?x32186) ?x32198) ?x32200) ?x32202)))
 (let ((?x32217 (+ (+ (+ (+ (+ (+ (+ ?x32203 ?x32204) ?x32206) ?x32208) ?x32210) ?x32212) ?x32214) ?x32216)))
 (= ?x32217 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32289 (* l_0_7_81 l_0_7_81)))
 (let ((?x32287 (* l_0_7_80 l_0_7_80)))
 (let ((?x32285 (* l_0_7_79 l_0_7_79)))
 (let ((?x32283 (* l_0_7_78 l_0_7_78)))
 (let ((?x32281 (* l_0_7_77 l_0_7_77)))
 (let ((?x32279 (* l_0_7_76 l_0_7_76)))
 (let ((?x32277 (* l_0_7_75 l_0_7_75)))
 (let ((?x32275 (* l_0_7_74 l_0_7_74)))
 (let ((?x32273 (* l_0_7_36 l_0_7_36)))
 (let ((?x32271 (* l_0_7_35 l_0_7_35)))
 (let ((?x32269 (* l_0_7_34 l_0_7_34)))
 (let ((?x32267 (* l_0_7_33 l_0_7_33)))
 (let ((?x32265 (* l_0_7_32 l_0_7_32)))
 (let ((?x32263 (* l_0_7_31 l_0_7_31)))
 (let ((?x32266 (- (- (- (* (- l_0_7_29) l_0_7_29) (* l_0_7_30 l_0_7_30)) ?x32263) ?x32265)))
 (let ((?x32280 (+ (+ (+ (- (- (- (- ?x32266 ?x32267) ?x32269) ?x32271) ?x32273) ?x32275) ?x32277) ?x32279)))
 (= (+ (+ (+ (+ (+ ?x32280 ?x32281) ?x32283) ?x32285) ?x32287) ?x32289) 0.0))))))))))))))))))
(assert
 (let ((?x32379 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32376 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32373 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32370 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32367 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32364 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32361 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32358 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32355 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32352 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32349 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32346 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32343 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x32340 (* ?x31181 l_0_7_39)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x32338 (* ?x31172 l_0_7_38)))
 (let ((?x31411 (* 2.0 l_0_7_29)))
 (let ((?x32336 (* ?x31411 l_0_7_37)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32334 (* ?x30752 l_0_7_169)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32332 (* ?x30749 l_0_7_168)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32330 (* ?x30746 l_0_7_167)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32328 (* ?x30743 l_0_7_166)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32326 (* ?x30740 l_0_7_165)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32324 (* ?x30737 l_0_7_164)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32322 (* ?x30734 l_0_7_124)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32320 (* ?x30731 l_0_7_123)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32318 (* ?x30728 l_0_7_122)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32316 (* ?x30725 l_0_7_121)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32314 (* ?x30722 l_0_7_120)))
 (let ((?x32321 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_119) ?x32314) ?x32316) ?x32318) ?x32320)))
 (let ((?x32335 (+ (+ (+ (+ (+ (+ (- ?x32321 ?x32322) ?x32324) ?x32326) ?x32328) ?x32330) ?x32332) ?x32334)))
 (let ((?x32353 (- (- (- (- (- (- (- ?x32335 ?x32336) ?x32338) ?x32340) ?x32343) ?x32346) ?x32349) ?x32352)))
 (let ((?x32374 (+ (+ (+ (+ (+ (+ (- ?x32353 ?x32355) ?x32358) ?x32361) ?x32364) ?x32367) ?x32370) ?x32373)))
 (= (+ (+ ?x32374 ?x32376) ?x32379) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32511 (* l_0_7_90 l_0_7_90)))
 (let ((?x32509 (* l_0_7_89 l_0_7_89)))
 (let ((?x32507 (* l_0_7_88 l_0_7_88)))
 (let ((?x32505 (* l_0_7_87 l_0_7_87)))
 (let ((?x32503 (* l_0_7_86 l_0_7_86)))
 (let ((?x32501 (* l_0_7_85 l_0_7_85)))
 (let ((?x32499 (* l_0_7_84 l_0_7_84)))
 (let ((?x32497 (* l_0_7_83 l_0_7_83)))
 (let ((?x32495 (* l_0_7_82 l_0_7_82)))
 (let ((?x32493 (* l_0_7_45 l_0_7_45)))
 (let ((?x32491 (* l_0_7_44 l_0_7_44)))
 (let ((?x32489 (* l_0_7_43 l_0_7_43)))
 (let ((?x32487 (* l_0_7_42 l_0_7_42)))
 (let ((?x32485 (* l_0_7_41 l_0_7_41)))
 (let ((?x32483 (* l_0_7_40 l_0_7_40)))
 (let ((?x32481 (* l_0_7_39 l_0_7_39)))
 (let ((?x32479 (* l_0_7_38 l_0_7_38)))
 (let ((?x32477 (* l_0_7_37 l_0_7_37)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32475 (* ?x30752 l_0_7_177)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32473 (* ?x30749 l_0_7_176)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32471 (* ?x30746 l_0_7_175)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32469 (* ?x30743 l_0_7_174)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32467 (* ?x30740 l_0_7_173)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32465 (* ?x30737 l_0_7_172)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32463 (* ?x30734 l_0_7_132)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32444 (* ?x30731 l_0_7_131)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32440 (* ?x30728 l_0_7_130)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32436 (* ?x30725 l_0_7_129)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32432 (* ?x30722 l_0_7_128)))
 (let ((?x32445 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_127) ?x32432) ?x32436) ?x32440) ?x32444)))
 (let ((?x32476 (+ (+ (+ (+ (+ (+ (- ?x32445 ?x32463) ?x32465) ?x32467) ?x32469) ?x32471) ?x32473) ?x32475)))
 (let ((?x32490 (- (- (- (- (- (- (- ?x32476 ?x32477) ?x32479) ?x32481) ?x32483) ?x32485) ?x32487) ?x32489)))
 (let ((?x32504 (+ (+ (+ (+ (+ (- (- ?x32490 ?x32491) ?x32493) ?x32495) ?x32497) ?x32499) ?x32501) ?x32503)))
 (= (+ (+ (+ (+ ?x32504 ?x32505) ?x32507) ?x32509) ?x32511) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30457 (* l_0_7_46 l_0_7_46)))
 (let ((?x32596 (- (- (* (- l_0_7_1) l_0_7_1) (* (* 2.0 l_0_7_187) l_0_7_191)) (* (* 2.0 l_0_7_188) l_0_7_192))))
 (let ((?x32602 (- (- ?x32596 (* (* 2.0 l_0_7_189) l_0_7_193)) (* (* 2.0 l_0_7_190) l_0_7_194))))
 (let ((?x32608 (- (- ?x32602 (* (* 2.0 l_0_7_277) l_0_7_281)) (* (* 2.0 l_0_7_278) l_0_7_282))))
 (let ((?x32614 (- (- ?x32608 (* (* 2.0 l_0_7_279) l_0_7_283)) (* (* 2.0 l_0_7_280) l_0_7_284))))
 (let ((?x32620 (- (- ?x32614 (* (* 2.0 l_0_7_322) l_0_7_326)) (* (* 2.0 l_0_7_323) l_0_7_327))))
 (let ((?x32626 (- (- ?x32620 (* (* 2.0 l_0_7_324) l_0_7_328)) (* (* 2.0 l_0_7_325) l_0_7_329))))
 (let ((?x32632 (- (- ?x32626 (* (* 2.0 l_0_7_367) l_0_7_371)) (* (* 2.0 l_0_7_368) l_0_7_372))))
 (let ((?x32638 (- (- ?x32632 (* (* 2.0 l_0_7_369) l_0_7_373)) (* (* 2.0 l_0_7_370) l_0_7_374))))
 (= (+ ?x32638 ?x30457) 0.0)))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30545 (* ?x30544 l_0_7_47)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x32729 (* ?x30799 l_0_7_146)))
 (let ((?x32724 (* 2.0 l_0_7_101)))
 (let ((?x32727 (* ?x32724 l_0_7_91)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30543 (* ?x16979 l_0_7_2)))
 (= (+ (+ (- ?x30543 ?x32727) ?x32729) ?x30545) 0.0))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31327 (* ?x31326 l_0_7_59)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31324 (* ?x31323 l_0_7_58)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31321 (* ?x31320 l_0_7_57)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31318 (* ?x31317 l_0_7_56)))
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30591 (* ?x30544 l_0_7_49)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x32758 (* ?x32757 l_0_7_239)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x32755 (* ?x32754 l_0_7_238)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x32752 (* ?x32751 l_0_7_237)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x32749 (* ?x32748 l_0_7_236)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31309 (* ?x31089 l_0_7_9)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31307 (* ?x30889 l_0_7_8)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x31305 (* ?x31304 l_0_7_7)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30549 (* ?x16979 l_0_7_4)))
 (let ((?x32747 (+ (+ (+ (+ ?x30549 (* (* 2.0 l_0_7_10) l_0_7_14)) ?x31305) ?x31307) ?x31309)))
 (let ((?x32762 (- (- (+ (- (- (- (- ?x32747 ?x32749) ?x32752) ?x32755) ?x32758) ?x30591) ?x31318) ?x31321)))
 (= (- (- ?x32762 ?x31324) ?x31327) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30679 (* ?x30544 l_0_7_52)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_7) ?x30679) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30685 (* ?x30544 l_0_7_56)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_11) ?x30685) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30695 (* ?x30544 l_0_7_61)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_16) ?x30695) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30705 (* ?x30544 l_0_7_67)))
 (= (+ (* (* (- 2.0) l_0_7_1) l_0_7_22) ?x30705) 0.0))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30761 (* ?x30544 l_0_7_74)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x32758 (* ?x32757 l_0_7_239)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x32755 (* ?x32754 l_0_7_238)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x32752 (* ?x32751 l_0_7_237)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x32749 (* ?x32748 l_0_7_236)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x32824 (* ?x31480 l_0_7_149)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x32822 (* ?x31477 l_0_7_148)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x32820 (* ?x31474 l_0_7_147)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x32818 (* ?x31471 l_0_7_146)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32816 (* ?x31727 l_0_7_99)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32814 (* ?x31722 l_0_7_98)))
 (let ((?x32724 (* 2.0 l_0_7_101)))
 (let ((?x32812 (* ?x32724 l_0_7_97)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x30713 (* ?x16979 l_0_7_29)))
 (let ((?x32817 (+ (+ (+ (+ ?x30713 (* (* 2.0 l_0_7_100) l_0_7_104)) ?x32812) ?x32814) ?x32816)))
 (let ((?x32828 (+ (+ (+ (- (- (- (- ?x32817 ?x32818) ?x32820) ?x32822) ?x32824) ?x32749) ?x32752) ?x32755)))
 (= (+ (+ ?x32828 ?x32758) ?x30761) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30802 (* ?x30544 l_0_7_82)))
 (let ((?x16979 (* (- 2.0) l_0_7_1)))
 (let ((?x17081 (* ?x16979 l_0_7_37)))
 (= (+ ?x17081 ?x30802) 0.0))))))
(assert
 (let ((?x30822 (* l_0_7_48 l_0_7_48)))
 (let ((?x30820 (* l_0_7_47 l_0_7_47)))
 (let ((?x30818 (* l_0_7_3 l_0_7_3)))
 (let ((?x30826 (* l_0_7_2 l_0_7_2)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x32872 (* ?x30982 l_0_7_147)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x32870 (* ?x30979 l_0_7_146)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32868 (* ?x31722 l_0_7_93)))
 (let ((?x32873 (+ (+ (- (* (* (- 2.0) l_0_7_101) l_0_7_92) ?x32868) ?x32870) ?x32872)))
 (= (+ (+ (- (- ?x32873 ?x30826) ?x30818) ?x30820) ?x30822) 0.0)))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30841 (* ?x30840 l_0_7_50)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30838 (* ?x30837 l_0_7_49)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30835 (* ?x30834 l_0_7_5)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x32905 (* ?x30872 l_0_7_4)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x32903 (* ?x31220 l_0_7_148)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x32901 (* ?x31217 l_0_7_147)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x32899 (* ?x31214 l_0_7_146)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32897 (* ?x31727 l_0_7_96)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32895 (* ?x31722 l_0_7_95)))
 (let ((?x32902 (+ (+ (- (- (* (* (- 2.0) l_0_7_101) l_0_7_94) ?x32895) ?x32897) ?x32899) ?x32901)))
 (let ((?x32904 (+ ?x32902 ?x32903)))
 (= (+ (+ (- (- ?x32904 ?x32905) ?x30835) ?x30838) ?x30841) 0.0))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30879 (* ?x30840 l_0_7_53)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30877 (* ?x30837 l_0_7_52)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30875 (* ?x30834 l_0_7_8)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30873 (* ?x30872 l_0_7_7)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x32824 (* ?x31480 l_0_7_149)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x32822 (* ?x31477 l_0_7_148)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x32820 (* ?x31474 l_0_7_147)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x32818 (* ?x31471 l_0_7_146)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32816 (* ?x31727 l_0_7_99)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32814 (* ?x31722 l_0_7_98)))
 (let ((?x32724 (* 2.0 l_0_7_101)))
 (let ((?x32812 (* ?x32724 l_0_7_97)))
 (let ((?x32937 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_104) ?x32812) ?x32814) ?x32816) ?x32818)))
 (let ((?x32940 (+ (+ (+ ?x32937 ?x32820) ?x32822) ?x32824)))
 (= (+ (+ (- (- ?x32940 ?x30873) ?x30875) ?x30877) ?x30879) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30894 (* ?x30840 l_0_7_57)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30892 (* ?x30837 l_0_7_56)))
 (let ((?x32976 (* l_0_7_150 l_0_7_150)))
 (let ((?x32974 (* l_0_7_149 l_0_7_149)))
 (let ((?x32972 (* l_0_7_148 l_0_7_148)))
 (let ((?x32970 (* l_0_7_147 l_0_7_147)))
 (let ((?x32968 (* l_0_7_146 l_0_7_146)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x30890 (* ?x30889 l_0_7_3)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x32965 (* ?x31304 l_0_7_2)))
 (let ((?x32963 (* l_0_7_105 l_0_7_105)))
 (let ((?x32961 (* l_0_7_104 l_0_7_104)))
 (let ((?x32959 (* l_0_7_103 l_0_7_103)))
 (let ((?x32960 (- (- (* (- l_0_7_101) l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x32959)))
 (let ((?x32964 (- (- ?x32960 ?x32961) ?x32963)))
 (let ((?x32977 (+ (+ (+ (+ (+ (- (- ?x32964 ?x32965) ?x30890) ?x32968) ?x32970) ?x32972) ?x32974) ?x32976)))
 (= (+ (+ ?x32977 ?x30892) ?x30894) 0.0)))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30915 (* ?x30840 l_0_7_62)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30913 (* ?x30837 l_0_7_61)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30911 (* ?x30558 l_0_7_3)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x33001 (* ?x30551 l_0_7_2)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x31767 (* ?x31766 l_0_7_155)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x31762 (* ?x31761 l_0_7_154)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x31759 (* ?x31758 l_0_7_153)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x31756 (* ?x31755 l_0_7_152)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x31753 (* ?x31752 l_0_7_151)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x31742 (* ?x31741 l_0_7_110)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x31739 (* ?x31738 l_0_7_109)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x31736 (* ?x31727 l_0_7_108)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x31724 (* ?x31722 l_0_7_107)))
 (let ((?x31743 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_106) ?x31724) ?x31736) ?x31739) ?x31742)))
 (let ((?x33003 (- (- (+ (+ (+ (+ (+ ?x31743 ?x31753) ?x31756) ?x31759) ?x31762) ?x31767) ?x33001) ?x30911)))
 (= (+ (+ ?x33003 ?x30913) ?x30915) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30939 (* ?x30840 l_0_7_68)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30937 (* ?x30837 l_0_7_67)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x30930 (* ?x30929 l_0_7_3)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x33029 (* ?x30872 l_0_7_22)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33027 (* ?x31766 l_0_7_161)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33025 (* ?x31761 l_0_7_160)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33023 (* ?x31758 l_0_7_159)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33021 (* ?x31755 l_0_7_158)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33019 (* ?x31752 l_0_7_157)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33017 (* ?x31741 l_0_7_116)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33015 (* ?x31738 l_0_7_115)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33013 (* ?x31727 l_0_7_114)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33011 (* ?x31722 l_0_7_113)))
 (let ((?x33018 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_112) ?x33011) ?x33013) ?x33015) ?x33017)))
 (let ((?x33028 (+ (+ (+ (+ (+ ?x33018 ?x33019) ?x33021) ?x33023) ?x33025) ?x33027)))
 (= (+ (+ (- (- ?x33028 ?x33029) ?x30930) ?x30937) ?x30939) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30958 (* ?x30840 l_0_7_75)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30956 (* ?x30837 l_0_7_74)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30949 (* ?x30834 l_0_7_30)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x33076 (* ?x30872 l_0_7_29)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33074 (* ?x31766 l_0_7_168)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33072 (* ?x31761 l_0_7_167)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33070 (* ?x31758 l_0_7_166)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33068 (* ?x31755 l_0_7_165)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33066 (* ?x31752 l_0_7_164)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33064 (* ?x31741 l_0_7_123)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33062 (* ?x31738 l_0_7_122)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33060 (* ?x31727 l_0_7_121)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33058 (* ?x31722 l_0_7_120)))
 (let ((?x33065 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_119) ?x33058) ?x33060) ?x33062) ?x33064)))
 (let ((?x33075 (+ (+ (+ (+ (+ ?x33065 ?x33066) ?x33068) ?x33070) ?x33072) ?x33074)))
 (= (+ (+ (- (- ?x33075 ?x33076) ?x30949) ?x30956) ?x30958) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30991 (* ?x30840 l_0_7_83)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30989 (* ?x30837 l_0_7_82)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30987 (* ?x30834 l_0_7_38)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30985 (* ?x30872 l_0_7_37)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33138 (* ?x31766 l_0_7_176)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33136 (* ?x31761 l_0_7_175)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33134 (* ?x31758 l_0_7_174)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33132 (* ?x31755 l_0_7_173)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33130 (* ?x31752 l_0_7_172)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33128 (* ?x31741 l_0_7_131)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33126 (* ?x31738 l_0_7_130)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33124 (* ?x31727 l_0_7_129)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33122 (* ?x31722 l_0_7_128)))
 (let ((?x33129 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_127) ?x33122) ?x33124) ?x33126) ?x33128)))
 (let ((?x33139 (+ (+ (+ (+ (+ ?x33129 ?x33130) ?x33132) ?x33134) ?x33136) ?x33138)))
 (= (+ (+ (- (- ?x33139 ?x30985) ?x30987) ?x30989) ?x30991) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x31028 (* l_0_7_6 l_0_7_6)))
 (let ((?x31026 (* l_0_7_51 l_0_7_51)))
 (let ((?x31024 (* l_0_7_50 l_0_7_50)))
 (let ((?x31022 (* l_0_7_5 l_0_7_5)))
 (let ((?x31025 (+ (- (+ (* (- l_0_7_4) l_0_7_4) (* l_0_7_49 l_0_7_49)) ?x31022) ?x31024)))
 (= (- (+ ?x31025 ?x31026) ?x31028) 0.0)))))))
(assert
 (let ((?x31055 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31052 (* ?x31051 l_0_7_54)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31049 (* ?x31048 l_0_7_53)))
 (let ((?x31046 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31043 (* ?x31042 l_0_7_52)))
 (let ((?x31053 (+ (+ (- (+ (* (* (- 2.0) l_0_7_4) l_0_7_7) ?x31043) ?x31046) ?x31049) ?x31052)))
 (= (- ?x31053 ?x31055) 0.0)))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31096 (* ?x31051 l_0_7_58)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31094 (* ?x31048 l_0_7_57)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31092 (* ?x31042 l_0_7_56)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31090 (* ?x31089 l_0_7_6)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31087 (* ?x30889 l_0_7_5)))
 (let ((?x31095 (+ (+ (- (- (* (* (- 2.0) l_0_7_11) l_0_7_4) ?x31087) ?x31090) ?x31092) ?x31094)))
 (= (+ ?x31095 ?x31096) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31125 (* ?x31051 l_0_7_63)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31123 (* ?x31048 l_0_7_62)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31121 (* ?x31042 l_0_7_61)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31113 (* ?x30561 l_0_7_6)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31110 (* ?x30558 l_0_7_5)))
 (let ((?x31124 (+ (+ (- (- (* (* (- 2.0) l_0_7_16) l_0_7_4) ?x31110) ?x31113) ?x31121) ?x31123)))
 (= (+ ?x31124 ?x31125) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31156 (* ?x31051 l_0_7_69)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31154 (* ?x31048 l_0_7_68)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31152 (* ?x31042 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31150 (* ?x31149 l_0_7_6)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31141 (* ?x30929 l_0_7_5)))
 (let ((?x31155 (+ (+ (- (- (* (* (- 2.0) l_0_7_22) l_0_7_4) ?x31141) ?x31150) ?x31152) ?x31154)))
 (= (+ ?x31155 ?x31156) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31188 (* ?x31051 l_0_7_76)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31186 (* ?x31048 l_0_7_75)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31184 (* ?x31042 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31182 (* ?x31181 l_0_7_6)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31173 (* ?x31172 l_0_7_5)))
 (let ((?x31187 (+ (+ (- (- (* (* (- 2.0) l_0_7_29) l_0_7_4) ?x31173) ?x31182) ?x31184) ?x31186)))
 (= (+ ?x31187 ?x31188) 0.0)))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31236 (* ?x31051 l_0_7_84)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31234 (* ?x31048 l_0_7_83)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31232 (* ?x31042 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31230 (* ?x31229 l_0_7_6)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31227 (* ?x31226 l_0_7_5)))
 (let ((?x33176 (+ (+ (- (- (* (* (- 2.0) l_0_7_37) l_0_7_4) ?x31227) ?x31230) ?x31232) ?x31234)))
 (= (+ ?x33176 ?x31236) 0.0)))))))))))))
(assert
 (let ((?x31288 (* l_0_7_9 l_0_7_9)))
 (let ((?x31286 (* l_0_7_8 l_0_7_8)))
 (let ((?x31284 (* l_0_7_7 l_0_7_7)))
 (let ((?x31282 (* l_0_7_55 l_0_7_55)))
 (let ((?x31280 (* l_0_7_54 l_0_7_54)))
 (let ((?x31278 (* l_0_7_53 l_0_7_53)))
 (let ((?x31281 (+ (+ (+ (* (- l_0_7_10) l_0_7_10) (* l_0_7_52 l_0_7_52)) ?x31278) ?x31280)))
 (= (- (- (- (+ ?x31281 ?x31282) ?x31284) ?x31286) ?x31288) 0.0)))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31327 (* ?x31326 l_0_7_59)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31324 (* ?x31323 l_0_7_58)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31321 (* ?x31320 l_0_7_57)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31318 (* ?x31317 l_0_7_56)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31309 (* ?x31089 l_0_7_9)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31307 (* ?x30889 l_0_7_8)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x31305 (* ?x31304 l_0_7_7)))
 (let ((?x31310 (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_14) ?x31305) ?x31307) ?x31309)))
 (= (+ (+ (+ (+ ?x31310 ?x31318) ?x31321) ?x31324) ?x31327) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31364 (* ?x31326 l_0_7_64)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31362 (* ?x31323 l_0_7_63)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31360 (* ?x31320 l_0_7_62)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31358 (* ?x31317 l_0_7_61)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31356 (* ?x30561 l_0_7_9)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31354 (* ?x30558 l_0_7_8)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x31352 (* ?x30551 l_0_7_7)))
 (let ((?x31359 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_19) ?x31352) ?x31354) ?x31356) ?x31358)))
 (= (+ (+ (+ ?x31359 ?x31360) ?x31362) ?x31364) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31391 (* ?x31326 l_0_7_70)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31389 (* ?x31323 l_0_7_69)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31387 (* ?x31320 l_0_7_68)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31385 (* ?x31317 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31383 (* ?x31149 l_0_7_9)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31374 (* ?x30929 l_0_7_8)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17443 (* ?x17439 l_0_7_7)))
 (let ((?x31386 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_25) ?x17443) ?x31374) ?x31383) ?x31385)))
 (= (+ (+ (+ ?x31386 ?x31387) ?x31389) ?x31391) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31433 (* ?x31326 l_0_7_77)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31431 (* ?x31323 l_0_7_76)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31429 (* ?x31320 l_0_7_75)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31427 (* ?x31317 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31425 (* ?x31181 l_0_7_9)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31416 (* ?x31172 l_0_7_8)))
 (let ((?x31411 (* 2.0 l_0_7_29)))
 (let ((?x31413 (* ?x31411 l_0_7_7)))
 (let ((?x31428 (+ (- (- (- (* (* (- 2.0) l_0_7_10) l_0_7_32) ?x31413) ?x31416) ?x31425) ?x31427)))
 (= (+ (+ (+ ?x31428 ?x31429) ?x31431) ?x31433) 0.0)))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31495 (* ?x31326 l_0_7_85)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31493 (* ?x31323 l_0_7_84)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31491 (* ?x31320 l_0_7_83)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31489 (* ?x31317 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31487 (* ?x31229 l_0_7_9)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31485 (* ?x31226 l_0_7_8)))
 (let ((?x31223 (* 2.0 l_0_7_37)))
 (let ((?x31483 (* ?x31223 l_0_7_7)))
 (let ((?x31302 (* (- 2.0) l_0_7_10)))
 (let ((?x31451 (* ?x31302 l_0_7_40)))
 (let ((?x33201 (+ (+ (+ (+ (- (- (- ?x31451 ?x31483) ?x31485) ?x31487) ?x31489) ?x31491) ?x31493) ?x31495)))
 (= ?x33201 0.0)))))))))))))))))))
(assert
 (let ((?x31565 (* l_0_7_60 l_0_7_60)))
 (let ((?x31563 (* l_0_7_59 l_0_7_59)))
 (let ((?x31561 (* l_0_7_58 l_0_7_58)))
 (let ((?x31559 (* l_0_7_57 l_0_7_57)))
 (let ((?x31557 (* l_0_7_56 l_0_7_56)))
 (let ((?x31555 (* l_0_7_15 l_0_7_15)))
 (let ((?x31553 (* l_0_7_14 l_0_7_14)))
 (let ((?x31540 (* l_0_7_13 l_0_7_13)))
 (let ((?x31554 (- (- (- (* (- l_0_7_11) l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x31540) ?x31553)))
 (= (+ (+ (+ (+ (+ (- ?x31554 ?x31555) ?x31557) ?x31559) ?x31561) ?x31563) ?x31565) 0.0)))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31608 (* ?x31607 l_0_7_65)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31605 (* ?x31604 l_0_7_64)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31602 (* ?x31601 l_0_7_63)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31599 (* ?x31598 l_0_7_62)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31596 (* ?x31595 l_0_7_61)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31593 (* ?x31592 l_0_7_20)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31590 (* ?x31589 l_0_7_19)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31587 (* ?x31089 l_0_7_18)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31585 (* ?x30889 l_0_7_17)))
 (let ((?x31594 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_16) ?x31585) ?x31587) ?x31590) ?x31593)))
 (= (+ (+ (+ (+ (+ ?x31594 ?x31596) ?x31599) ?x31602) ?x31605) ?x31608) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31660 (* ?x31607 l_0_7_71)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31658 (* ?x31604 l_0_7_70)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31656 (* ?x31601 l_0_7_69)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31654 (* ?x31598 l_0_7_68)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31652 (* ?x31595 l_0_7_67)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31650 (* ?x31592 l_0_7_26)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31640 (* ?x31589 l_0_7_25)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31637 (* ?x31089 l_0_7_24)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31633 (* ?x30889 l_0_7_23)))
 (let ((?x31651 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_22) ?x31633) ?x31637) ?x31640) ?x31650)))
 (= (+ (+ (+ (+ (+ ?x31651 ?x31652) ?x31654) ?x31656) ?x31658) ?x31660) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31699 (* ?x31607 l_0_7_78)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31697 (* ?x31604 l_0_7_77)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31695 (* ?x31601 l_0_7_76)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31693 (* ?x31598 l_0_7_75)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31691 (* ?x31595 l_0_7_74)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31689 (* ?x31592 l_0_7_33)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31679 (* ?x31589 l_0_7_32)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x17605 (* ?x31089 l_0_7_31)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31676 (* ?x30889 l_0_7_30)))
 (let ((?x31690 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_29) ?x31676) ?x17605) ?x31679) ?x31689)))
 (= (+ (+ (+ (+ (+ ?x31690 ?x31691) ?x31693) ?x31695) ?x31697) ?x31699) 0.0)))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31777 (* ?x31607 l_0_7_86)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31775 (* ?x31604 l_0_7_85)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31773 (* ?x31601 l_0_7_84)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31771 (* ?x31598 l_0_7_83)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31769 (* ?x31595 l_0_7_82)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31764 (* ?x31592 l_0_7_41)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31750 (* ?x31589 l_0_7_40)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31748 (* ?x31089 l_0_7_39)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31746 (* ?x30889 l_0_7_38)))
 (let ((?x33217 (- (- (- (- (* (* (- 2.0) l_0_7_11) l_0_7_37) ?x31746) ?x31748) ?x31750) ?x31764)))
 (= (+ (+ (+ (+ (+ ?x33217 ?x31769) ?x31771) ?x31773) ?x31775) ?x31777) 0.0)))))))))))))))))))))
(assert
 (let ((?x31860 (* l_0_7_66 l_0_7_66)))
 (let ((?x31858 (* l_0_7_65 l_0_7_65)))
 (let ((?x31856 (* l_0_7_64 l_0_7_64)))
 (let ((?x31854 (* l_0_7_63 l_0_7_63)))
 (let ((?x31852 (* l_0_7_62 l_0_7_62)))
 (let ((?x31850 (* l_0_7_61 l_0_7_61)))
 (let ((?x31848 (* l_0_7_21 l_0_7_21)))
 (let ((?x31846 (* l_0_7_20 l_0_7_20)))
 (let ((?x31831 (* l_0_7_19 l_0_7_19)))
 (let ((?x31828 (* l_0_7_18 l_0_7_18)))
 (let ((?x31845 (- (- (- (* (- l_0_7_16) l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31828) ?x31831)))
 (let ((?x31859 (+ (+ (+ (+ (+ (- (- ?x31845 ?x31846) ?x31848) ?x31850) ?x31852) ?x31854) ?x31856) ?x31858)))
 (= (+ ?x31859 ?x31860) 0.0))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x31926 (* ?x30608 l_0_7_79)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x31924 (* ?x30605 l_0_7_78)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x31922 (* ?x30602 l_0_7_77)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31920 (* ?x30599 l_0_7_76)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31918 (* ?x30596 l_0_7_75)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31916 (* ?x30593 l_0_7_74)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31914 (* ?x30570 l_0_7_34)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31912 (* ?x30567 l_0_7_33)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31910 (* ?x30564 l_0_7_32)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31908 (* ?x30561 l_0_7_31)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31906 (* ?x30558 l_0_7_30)))
 (let ((?x31913 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_29) ?x31906) ?x31908) ?x31910) ?x31912)))
 (let ((?x31927 (+ (+ (+ (+ (+ (+ (- ?x31913 ?x31914) ?x31916) ?x31918) ?x31920) ?x31922) ?x31924) ?x31926)))
 (= ?x31927 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x32004 (* ?x30608 l_0_7_87)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x32002 (* ?x30605 l_0_7_86)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x32000 (* ?x30602 l_0_7_85)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31998 (* ?x30599 l_0_7_84)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31996 (* ?x30596 l_0_7_83)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31994 (* ?x30593 l_0_7_82)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31992 (* ?x30570 l_0_7_42)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31990 (* ?x30567 l_0_7_41)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31988 (* ?x30564 l_0_7_40)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31986 (* ?x30561 l_0_7_39)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31984 (* ?x30558 l_0_7_38)))
 (let ((?x33243 (- (- (- (- (* (* (- 2.0) l_0_7_16) l_0_7_37) ?x31984) ?x31986) ?x31988) ?x31990)))
 (let ((?x33252 (+ (+ (+ (+ (+ (+ (- ?x33243 ?x31992) ?x31994) ?x31996) ?x31998) ?x32000) ?x32002) ?x32004)))
 (= ?x33252 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32083 (* l_0_7_73 l_0_7_73)))
 (let ((?x32081 (* l_0_7_72 l_0_7_72)))
 (let ((?x32079 (* l_0_7_71 l_0_7_71)))
 (let ((?x32077 (* l_0_7_70 l_0_7_70)))
 (let ((?x32075 (* l_0_7_69 l_0_7_69)))
 (let ((?x32073 (* l_0_7_68 l_0_7_68)))
 (let ((?x32071 (* l_0_7_67 l_0_7_67)))
 (let ((?x32069 (* l_0_7_28 l_0_7_28)))
 (let ((?x32067 (* l_0_7_27 l_0_7_27)))
 (let ((?x32065 (* l_0_7_26 l_0_7_26)))
 (let ((?x32049 (* l_0_7_25 l_0_7_25)))
 (let ((?x32046 (* l_0_7_24 l_0_7_24)))
 (let ((?x32064 (- (- (- (* (- l_0_7_22) l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32046) ?x32049)))
 (let ((?x32078 (+ (+ (+ (+ (- (- (- ?x32064 ?x32065) ?x32067) ?x32069) ?x32071) ?x32073) ?x32075) ?x32077)))
 (= (+ (+ (+ ?x32078 ?x32079) ?x32081) ?x32083) 0.0))))))))))))))))
(assert
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32148 (* ?x32147 l_0_7_80)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32145 (* ?x32144 l_0_7_79)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32142 (* ?x32141 l_0_7_78)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32139 (* ?x32138 l_0_7_77)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32136 (* ?x32135 l_0_7_76)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32133 (* ?x32132 l_0_7_75)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32130 (* ?x32129 l_0_7_74)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32127 (* ?x32126 l_0_7_35)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32124 (* ?x32123 l_0_7_34)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32121 (* ?x32120 l_0_7_33)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32118 (* ?x32117 l_0_7_32)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32115 (* ?x31149 l_0_7_31)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32113 (* ?x30929 l_0_7_30)))
 (let ((?x32122 (- (- (- (- (* (* (- 2.0) l_0_7_22) l_0_7_29) ?x32113) ?x32115) ?x32118) ?x32121)))
 (let ((?x32143 (+ (+ (+ (+ (+ (- (- ?x32122 ?x32124) ?x32127) ?x32130) ?x32133) ?x32136) ?x32139) ?x32142)))
 (= (+ (+ ?x32143 ?x32145) ?x32148) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32216 (* ?x32147 l_0_7_88)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32214 (* ?x32144 l_0_7_87)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32212 (* ?x32141 l_0_7_86)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32210 (* ?x32138 l_0_7_85)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32208 (* ?x32135 l_0_7_84)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32206 (* ?x32132 l_0_7_83)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32204 (* ?x32129 l_0_7_82)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32202 (* ?x32126 l_0_7_43)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32200 (* ?x32123 l_0_7_42)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32198 (* ?x32120 l_0_7_41)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32186 (* ?x32117 l_0_7_40)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32182 (* ?x31149 l_0_7_39)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32178 (* ?x30929 l_0_7_38)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17922 (* ?x17439 l_0_7_37)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x32824 (* ?x31480 l_0_7_149)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x32822 (* ?x31477 l_0_7_148)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x32820 (* ?x31474 l_0_7_147)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x32818 (* ?x31471 l_0_7_146)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32816 (* ?x31727 l_0_7_99)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32814 (* ?x31722 l_0_7_98)))
 (let ((?x32724 (* 2.0 l_0_7_101)))
 (let ((?x32812 (* ?x32724 l_0_7_97)))
 (let ((?x32937 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_104) ?x32812) ?x32814) ?x32816) ?x32818)))
 (let ((?x32940 (+ (+ (+ ?x32937 ?x32820) ?x32822) ?x32824)))
 (let ((?x19415 (- (- (- (- (- (- (- ?x32940 ?x17922) ?x32178) ?x32182) ?x32186) ?x32198) ?x32200) ?x32202)))
 (let ((?x33268 (+ (+ (+ (+ (+ (+ (+ ?x19415 ?x32204) ?x32206) ?x32208) ?x32210) ?x32212) ?x32214) ?x32216)))
 (= ?x33268 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32289 (* l_0_7_81 l_0_7_81)))
 (let ((?x32287 (* l_0_7_80 l_0_7_80)))
 (let ((?x32285 (* l_0_7_79 l_0_7_79)))
 (let ((?x32283 (* l_0_7_78 l_0_7_78)))
 (let ((?x32281 (* l_0_7_77 l_0_7_77)))
 (let ((?x32279 (* l_0_7_76 l_0_7_76)))
 (let ((?x32277 (* l_0_7_75 l_0_7_75)))
 (let ((?x32275 (* l_0_7_74 l_0_7_74)))
 (let ((?x32273 (* l_0_7_36 l_0_7_36)))
 (let ((?x32271 (* l_0_7_35 l_0_7_35)))
 (let ((?x32269 (* l_0_7_34 l_0_7_34)))
 (let ((?x32267 (* l_0_7_33 l_0_7_33)))
 (let ((?x32265 (* l_0_7_32 l_0_7_32)))
 (let ((?x32263 (* l_0_7_31 l_0_7_31)))
 (let ((?x32266 (- (- (- (* (- l_0_7_29) l_0_7_29) (* l_0_7_30 l_0_7_30)) ?x32263) ?x32265)))
 (let ((?x32280 (+ (+ (+ (- (- (- (- ?x32266 ?x32267) ?x32269) ?x32271) ?x32273) ?x32275) ?x32277) ?x32279)))
 (= (+ (+ (+ (+ (+ ?x32280 ?x32281) ?x32283) ?x32285) ?x32287) ?x32289) 0.0))))))))))))))))))
(assert
 (let ((?x32379 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32376 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32373 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32370 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32367 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32364 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32361 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32358 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32355 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32352 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32349 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32346 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32343 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x32340 (* ?x31181 l_0_7_39)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x32338 (* ?x31172 l_0_7_38)))
 (let ((?x19424 (- (- (- (- (* (* (- 2.0) l_0_7_29) l_0_7_37) ?x32338) ?x32340) ?x32343) ?x32346)))
 (let ((?x33296 (+ (+ (+ (+ (- (- (- ?x19424 ?x32349) ?x32352) ?x32355) ?x32358) ?x32361) ?x32364) ?x32367)))
 (= (+ (+ (+ (+ ?x33296 ?x32370) ?x32373) ?x32376) ?x32379) 0.0)))))))))))))))))))))
(assert
 (let ((?x32511 (* l_0_7_90 l_0_7_90)))
 (let ((?x32509 (* l_0_7_89 l_0_7_89)))
 (let ((?x32507 (* l_0_7_88 l_0_7_88)))
 (let ((?x32505 (* l_0_7_87 l_0_7_87)))
 (let ((?x32503 (* l_0_7_86 l_0_7_86)))
 (let ((?x32501 (* l_0_7_85 l_0_7_85)))
 (let ((?x32499 (* l_0_7_84 l_0_7_84)))
 (let ((?x32497 (* l_0_7_83 l_0_7_83)))
 (let ((?x32495 (* l_0_7_82 l_0_7_82)))
 (let ((?x32493 (* l_0_7_45 l_0_7_45)))
 (let ((?x32491 (* l_0_7_44 l_0_7_44)))
 (let ((?x32489 (* l_0_7_43 l_0_7_43)))
 (let ((?x32487 (* l_0_7_42 l_0_7_42)))
 (let ((?x32485 (* l_0_7_41 l_0_7_41)))
 (let ((?x32483 (* l_0_7_40 l_0_7_40)))
 (let ((?x32481 (* l_0_7_39 l_0_7_39)))
 (let ((?x19440 (- (- (- (* (- l_0_7_37) l_0_7_37) (* l_0_7_38 l_0_7_38)) ?x32481) ?x32483)))
 (let ((?x33308 (+ (+ (- (- (- (- (- ?x19440 ?x32485) ?x32487) ?x32489) ?x32491) ?x32493) ?x32495) ?x32497)))
 (let ((?x33315 (+ (+ (+ (+ (+ (+ (+ ?x33308 ?x32499) ?x32501) ?x32503) ?x32505) ?x32507) ?x32509) ?x32511)))
 (= ?x33315 0.0)))))))))))))))))))))
(assert
 (let ((?x30457 (* l_0_7_46 l_0_7_46)))
 (let ((?x30349 (* l_0_7_226 l_0_7_226)))
 (let ((?x19555 (- (- (* l_0_7_1 l_0_7_1) (* (* 2.0 l_0_7_181) l_0_7_184)) ?x30349)))
 (let ((?x19549 (- (- ?x19555 (* (* 2.0 l_0_7_271) l_0_7_274)) (* (* 2.0 l_0_7_316) l_0_7_319))))
 (= (- (- ?x19549 (* (* 2.0 l_0_7_361) l_0_7_364)) ?x30457) 0.0))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30545 (* ?x30544 l_0_7_47)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33332 (* ?x33331 l_0_7_227)))
 (let ((?x33328 (- (* (* 2.0 l_0_7_1) l_0_7_2) (* (* 2.0 l_0_7_182) l_0_7_184))))
 (let ((?x33335 (- (- (- ?x33328 (* (* 2.0 l_0_7_183) l_0_7_185)) ?x33332) (* (* 2.0 l_0_7_272) l_0_7_274))))
 (let ((?x33339 (- (- ?x33335 (* (* 2.0 l_0_7_273) l_0_7_275)) (* (* 2.0 l_0_7_317) l_0_7_319))))
 (let ((?x33343 (- (- ?x33339 (* (* 2.0 l_0_7_318) l_0_7_320)) (* (* 2.0 l_0_7_362) l_0_7_364))))
 (= (- (- ?x33343 (* (* 2.0 l_0_7_363) l_0_7_365)) ?x30545) 0.0))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30591 (* ?x30544 l_0_7_49)))
 (let ((?x33392 (* l_0_7_366 l_0_7_366)))
 (let ((?x33390 (* l_0_7_365 l_0_7_365)))
 (let ((?x33388 (* l_0_7_364 l_0_7_364)))
 (let ((?x33386 (* l_0_7_321 l_0_7_321)))
 (let ((?x33384 (* l_0_7_320 l_0_7_320)))
 (let ((?x33382 (* l_0_7_319 l_0_7_319)))
 (let ((?x33380 (* l_0_7_276 l_0_7_276)))
 (let ((?x33378 (* l_0_7_275 l_0_7_275)))
 (let ((?x33376 (* l_0_7_274 l_0_7_274)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33374 (* ?x33331 l_0_7_229)))
 (let ((?x33367 (- (* (* 2.0 l_0_7_1) l_0_7_4) (* (* 1.0 l_0_7_184) l_0_7_184))))
 (let ((?x33373 (- (- ?x33367 (* (* 1.0 l_0_7_185) l_0_7_185)) (* (* 1.0 l_0_7_186) l_0_7_186))))
 (let ((?x33387 (- (- (- (- (- (- (- ?x33373 ?x33374) ?x33376) ?x33378) ?x33380) ?x33382) ?x33384) ?x33386)))
 (= (- (- (- (- ?x33387 ?x33388) ?x33390) ?x33392) ?x30591) 0.0))))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30679 (* ?x30544 l_0_7_52)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33425 (* ?x33331 l_0_7_232)))
 (let ((?x33418 (- (* (* 2.0 l_0_7_1) l_0_7_7) (* (* 2.0 l_0_7_184) l_0_7_187))))
 (let ((?x33424 (- (- ?x33418 (* (* 2.0 l_0_7_185) l_0_7_188)) (* (* 2.0 l_0_7_186) l_0_7_189))))
 (let ((?x33432 (- (- (- ?x33424 ?x33425) (* (* 2.0 l_0_7_274) l_0_7_277)) (* (* 2.0 l_0_7_275) l_0_7_278))))
 (let ((?x33438 (- (- ?x33432 (* (* 2.0 l_0_7_276) l_0_7_279)) (* (* 2.0 l_0_7_319) l_0_7_322))))
 (let ((?x33444 (- (- ?x33438 (* (* 2.0 l_0_7_320) l_0_7_323)) (* (* 2.0 l_0_7_321) l_0_7_324))))
 (let ((?x33450 (- (- ?x33444 (* (* 2.0 l_0_7_364) l_0_7_367)) (* (* 2.0 l_0_7_365) l_0_7_368))))
 (= (- (- ?x33450 (* (* 2.0 l_0_7_366) l_0_7_369)) ?x30679) 0.0))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30685 (* ?x30544 l_0_7_56)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33501 (* ?x33331 l_0_7_236)))
 (let ((?x33496 (- (* (* 2.0 l_0_7_1) l_0_7_11) (* (* 2.0 l_0_7_184) l_0_7_191))))
 (let ((?x33500 (- (- ?x33496 (* (* 2.0 l_0_7_185) l_0_7_192)) (* (* 2.0 l_0_7_186) l_0_7_193))))
 (let ((?x33506 (- (- (- ?x33500 ?x33501) (* (* 2.0 l_0_7_274) l_0_7_281)) (* (* 2.0 l_0_7_275) l_0_7_282))))
 (let ((?x33510 (- (- ?x33506 (* (* 2.0 l_0_7_276) l_0_7_283)) (* (* 2.0 l_0_7_319) l_0_7_326))))
 (let ((?x33514 (- (- ?x33510 (* (* 2.0 l_0_7_320) l_0_7_327)) (* (* 2.0 l_0_7_321) l_0_7_328))))
 (let ((?x33518 (- (- ?x33514 (* (* 2.0 l_0_7_364) l_0_7_371)) (* (* 2.0 l_0_7_365) l_0_7_372))))
 (= (- (- ?x33518 (* (* 2.0 l_0_7_366) l_0_7_373)) ?x30685) 0.0))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30695 (* ?x30544 l_0_7_61)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33566 (* ?x33331 l_0_7_241)))
 (let ((?x33561 (- (* (* 2.0 l_0_7_1) l_0_7_16) (* (* 2.0 l_0_7_184) l_0_7_196))))
 (let ((?x33565 (- (- ?x33561 (* (* 2.0 l_0_7_185) l_0_7_197)) (* (* 2.0 l_0_7_186) l_0_7_198))))
 (let ((?x33571 (- (- (- ?x33565 ?x33566) (* (* 2.0 l_0_7_274) l_0_7_286)) (* (* 2.0 l_0_7_275) l_0_7_287))))
 (let ((?x33575 (- (- ?x33571 (* (* 2.0 l_0_7_276) l_0_7_288)) (* (* 2.0 l_0_7_319) l_0_7_331))))
 (let ((?x33579 (- (- ?x33575 (* (* 2.0 l_0_7_320) l_0_7_332)) (* (* 2.0 l_0_7_321) l_0_7_333))))
 (let ((?x33583 (- (- ?x33579 (* (* 2.0 l_0_7_364) l_0_7_376)) (* (* 2.0 l_0_7_365) l_0_7_377))))
 (= (- (- ?x33583 (* (* 2.0 l_0_7_366) l_0_7_378)) ?x30695) 0.0))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30705 (* ?x30544 l_0_7_67)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33657 (* ?x33331 l_0_7_247)))
 (let ((?x33652 (- (* (* 2.0 l_0_7_1) l_0_7_22) (* (* 2.0 l_0_7_184) l_0_7_202))))
 (let ((?x33656 (- (- ?x33652 (* (* 2.0 l_0_7_185) l_0_7_203)) (* (* 2.0 l_0_7_186) l_0_7_204))))
 (let ((?x33662 (- (- (- ?x33656 ?x33657) (* (* 2.0 l_0_7_274) l_0_7_292)) (* (* 2.0 l_0_7_275) l_0_7_293))))
 (let ((?x33666 (- (- ?x33662 (* (* 2.0 l_0_7_276) l_0_7_294)) (* (* 2.0 l_0_7_319) l_0_7_337))))
 (let ((?x33670 (- (- ?x33666 (* (* 2.0 l_0_7_320) l_0_7_338)) (* (* 2.0 l_0_7_321) l_0_7_339))))
 (let ((?x33674 (- (- ?x33670 (* (* 2.0 l_0_7_364) l_0_7_382)) (* (* 2.0 l_0_7_365) l_0_7_383))))
 (= (- (- ?x33674 (* (* 2.0 l_0_7_366) l_0_7_384)) ?x30705) 0.0))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x33758 (* ?x33757 l_0_7_94)))
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30761 (* ?x30544 l_0_7_74)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33736 (* ?x33331 l_0_7_254)))
 (let ((?x33374 (* ?x33331 l_0_7_229)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x33727 (* ?x30799 l_0_7_139)))
 (let ((?x33730 (- (- (* (* 2.0 l_0_7_1) l_0_7_29) ?x33727) (* (* 2.0 l_0_7_184) l_0_7_209))))
 (let ((?x33734 (- (- ?x33730 (* (* 2.0 l_0_7_185) l_0_7_210)) (* (* 2.0 l_0_7_186) l_0_7_211))))
 (let ((?x33741 (- (- (- (+ ?x33734 ?x33374) ?x33736) (* (* 2.0 l_0_7_274) l_0_7_299)) (* (* 2.0 l_0_7_275) l_0_7_300))))
 (let ((?x33745 (- (- ?x33741 (* (* 2.0 l_0_7_276) l_0_7_301)) (* (* 2.0 l_0_7_319) l_0_7_344))))
 (let ((?x33749 (- (- ?x33745 (* (* 2.0 l_0_7_320) l_0_7_345)) (* (* 2.0 l_0_7_321) l_0_7_346))))
 (let ((?x33753 (- (- ?x33749 (* (* 2.0 l_0_7_364) l_0_7_389)) (* (* 2.0 l_0_7_365) l_0_7_390))))
 (= (+ (- (- ?x33753 (* (* 2.0 l_0_7_366) l_0_7_391)) ?x30761) ?x33758) 0.0)))))))))))))))))
(assert
 (let ((?x30544 (* 2.0 l_0_7_46)))
 (let ((?x30802 (* ?x30544 l_0_7_82)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33830 (* ?x33331 l_0_7_262)))
 (let ((?x33825 (- (* (* 2.0 l_0_7_1) l_0_7_37) (* (* 2.0 l_0_7_184) l_0_7_217))))
 (let ((?x33829 (- (- ?x33825 (* (* 2.0 l_0_7_185) l_0_7_218)) (* (* 2.0 l_0_7_186) l_0_7_219))))
 (let ((?x33835 (- (- (- ?x33829 ?x33830) (* (* 2.0 l_0_7_274) l_0_7_307)) (* (* 2.0 l_0_7_275) l_0_7_308))))
 (let ((?x33839 (- (- ?x33835 (* (* 2.0 l_0_7_276) l_0_7_309)) (* (* 2.0 l_0_7_319) l_0_7_352))))
 (let ((?x33843 (- (- ?x33839 (* (* 2.0 l_0_7_320) l_0_7_353)) (* (* 2.0 l_0_7_321) l_0_7_354))))
 (let ((?x33847 (- (- ?x33843 (* (* 2.0 l_0_7_364) l_0_7_397)) (* (* 2.0 l_0_7_365) l_0_7_398))))
 (= (- (- ?x33847 (* (* 2.0 l_0_7_366) l_0_7_399)) ?x30802) 0.0))))))))))))
(assert
 (let ((?x30822 (* l_0_7_48 l_0_7_48)))
 (let ((?x30820 (* l_0_7_47 l_0_7_47)))
 (let ((?x30818 (* l_0_7_3 l_0_7_3)))
 (let ((?x33905 (* l_0_7_228 l_0_7_228)))
 (let ((?x33907 (+ (- (- (* l_0_7_2 l_0_7_2) (* l_0_7_227 l_0_7_227)) ?x33905) ?x30818)))
 (= (- (- ?x33907 ?x30820) ?x30822) 0.0)))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30841 (* ?x30840 l_0_7_50)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30838 (* ?x30837 l_0_7_49)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30835 (* ?x30834 l_0_7_5)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33924 (* ?x33923 l_0_7_230)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x20251 (* ?x20250 l_0_7_229)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x32905 (* ?x30872 l_0_7_4)))
 (= (- (- (+ (- (- ?x32905 ?x20251) ?x33924) ?x30835) ?x30838) ?x30841) 0.0))))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x33758 (* ?x33757 l_0_7_94)))
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30879 (* ?x30840 l_0_7_53)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30877 (* ?x30837 l_0_7_52)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30875 (* ?x30834 l_0_7_8)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33946 (* ?x33923 l_0_7_233)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33944 (* ?x20250 l_0_7_232)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30873 (* ?x30872 l_0_7_7)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x33727 (* ?x30799 l_0_7_139)))
 (let ((?x33951 (- (- (- (+ (- (- (+ ?x33727 ?x30873) ?x33944) ?x33946) ?x30875) ?x30877) ?x30879) ?x33758)))
 (= ?x33951 0.0)))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30894 (* ?x30840 l_0_7_57)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30892 (* ?x30837 l_0_7_56)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33972 (* ?x33923 l_0_7_237)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33970 (* ?x20250 l_0_7_236)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x30890 (* ?x30889 l_0_7_3)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x32965 (* ?x31304 l_0_7_2)))
 (= (- (- (- (- (+ ?x32965 ?x30890) ?x33970) ?x33972) ?x30892) ?x30894) 0.0))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30915 (* ?x30840 l_0_7_62)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30913 (* ?x30837 l_0_7_61)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33999 (* ?x33923 l_0_7_242)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33997 (* ?x20250 l_0_7_241)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x30911 (* ?x30558 l_0_7_3)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x33001 (* ?x30551 l_0_7_2)))
 (= (- (- (- (- (+ ?x33001 ?x30911) ?x33997) ?x33999) ?x30913) ?x30915) 0.0))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30939 (* ?x30840 l_0_7_68)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30937 (* ?x30837 l_0_7_67)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x30930 (* ?x30929 l_0_7_3)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34018 (* ?x33923 l_0_7_248)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x20315 (* ?x20250 l_0_7_247)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x33029 (* ?x30872 l_0_7_22)))
 (= (- (- (+ (- (- ?x33029 ?x20315) ?x34018) ?x30930) ?x30937) ?x30939) 0.0))))))))))))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x34051 (* ?x34050 l_0_7_95)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x34048 (* ?x34047 l_0_7_94)))
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30958 (* ?x30840 l_0_7_75)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30956 (* ?x30837 l_0_7_74)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30949 (* ?x30834 l_0_7_30)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34042 (* ?x33923 l_0_7_255)))
 (let ((?x33924 (* ?x33923 l_0_7_230)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x34039 (* ?x20250 l_0_7_254)))
 (let ((?x20251 (* ?x20250 l_0_7_229)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x33076 (* ?x30872 l_0_7_29)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x34035 (* ?x30982 l_0_7_140)))
 (let ((?x34040 (- (+ (+ (- (* (* (- 2.0) l_0_7_137) l_0_7_139) ?x34035) ?x33076) ?x20251) ?x34039)))
 (let ((?x34052 (+ (+ (- (- (+ (- (+ ?x34040 ?x33924) ?x34042) ?x30949) ?x30956) ?x30958) ?x34048) ?x34051)))
 (= ?x34052 0.0))))))))))))))))))))))))
(assert
 (let ((?x30840 (* 2.0 l_0_7_48)))
 (let ((?x30991 (* ?x30840 l_0_7_83)))
 (let ((?x30837 (* 2.0 l_0_7_47)))
 (let ((?x30989 (* ?x30837 l_0_7_82)))
 (let ((?x30834 (* 2.0 l_0_7_3)))
 (let ((?x30987 (* ?x30834 l_0_7_38)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34087 (* ?x33923 l_0_7_263)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x34085 (* ?x20250 l_0_7_262)))
 (let ((?x30872 (* 2.0 l_0_7_2)))
 (let ((?x30985 (* ?x30872 l_0_7_37)))
 (= (- (- (+ (- (- ?x30985 ?x34085) ?x34087) ?x30987) ?x30989) ?x30991) 0.0))))))))))))))
(assert
 (let ((?x31028 (* l_0_7_6 l_0_7_6)))
 (let ((?x31026 (* l_0_7_51 l_0_7_51)))
 (let ((?x31024 (* l_0_7_50 l_0_7_50)))
 (let ((?x31022 (* l_0_7_5 l_0_7_5)))
 (let ((?x31013 (* l_0_7_49 l_0_7_49)))
 (let ((?x31032 (* l_0_7_4 l_0_7_4)))
 (let ((?x34109 (* l_0_7_231 l_0_7_231)))
 (let ((?x34110 (- (- (* (- l_0_7_229) l_0_7_229) (* l_0_7_230 l_0_7_230)) ?x34109)))
 (= (+ (- (- (+ (- (+ ?x34110 ?x31032) ?x31013) ?x31022) ?x31024) ?x31026) ?x31028) 0.0))))))))))
(assert
 (let ((?x31055 (* (* 2.0 l_0_7_6) l_0_7_9)))
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31052 (* ?x31051 l_0_7_54)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31049 (* ?x31048 l_0_7_53)))
 (let ((?x31046 (* (* 2.0 l_0_7_5) l_0_7_8)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31043 (* ?x31042 l_0_7_52)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34142 (* ?x34141 l_0_7_234)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34139 (* ?x34138 l_0_7_233)))
 (let ((?x34146 (+ (- (- (* (* (- 2.0) l_0_7_229) l_0_7_232) ?x34139) ?x34142) (* (* 2.0 l_0_7_4) l_0_7_7))))
 (= (+ (- (- (+ (- ?x34146 ?x31043) ?x31046) ?x31049) ?x31052) ?x31055) 0.0)))))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31096 (* ?x31051 l_0_7_58)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31094 (* ?x31048 l_0_7_57)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31092 (* ?x31042 l_0_7_56)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34176 (* ?x34141 l_0_7_238)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34174 (* ?x34138 l_0_7_237)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34172 (* ?x34171 l_0_7_236)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31090 (* ?x31089 l_0_7_6)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31087 (* ?x30889 l_0_7_5)))
 (let ((?x34175 (- (- (+ (+ (* (* 2.0 l_0_7_11) l_0_7_4) ?x31087) ?x31090) ?x34172) ?x34174)))
 (= (- (- (- (- ?x34175 ?x34176) ?x31092) ?x31094) ?x31096) 0.0)))))))))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31125 (* ?x31051 l_0_7_63)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31123 (* ?x31048 l_0_7_62)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31121 (* ?x31042 l_0_7_61)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34207 (* ?x34141 l_0_7_243)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34205 (* ?x34138 l_0_7_242)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34203 (* ?x34171 l_0_7_241)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31113 (* ?x30561 l_0_7_6)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31110 (* ?x30558 l_0_7_5)))
 (let ((?x34206 (- (- (+ (+ (* (* 2.0 l_0_7_16) l_0_7_4) ?x31110) ?x31113) ?x34203) ?x34205)))
 (= (- (- (- (- ?x34206 ?x34207) ?x31121) ?x31123) ?x31125) 0.0)))))))))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31156 (* ?x31051 l_0_7_69)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31154 (* ?x31048 l_0_7_68)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31152 (* ?x31042 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31150 (* ?x31149 l_0_7_6)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34231 (* ?x34141 l_0_7_249)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34229 (* ?x34138 l_0_7_248)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31141 (* ?x30929 l_0_7_5)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x20447 (* ?x34171 l_0_7_247)))
 (let ((?x34232 (- (- (+ (- (* (* 2.0 l_0_7_22) l_0_7_4) ?x20447) ?x31141) ?x34229) ?x34231)))
 (= (- (- (- (+ ?x34232 ?x31150) ?x31152) ?x31154) ?x31156) 0.0)))))))))))))))))))
(assert
 (let ((?x34283 (* l_0_7_96 l_0_7_96)))
 (let ((?x34281 (* l_0_7_95 l_0_7_95)))
 (let ((?x34279 (* l_0_7_94 l_0_7_94)))
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31188 (* ?x31051 l_0_7_76)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31186 (* ?x31048 l_0_7_75)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31184 (* ?x31042 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31182 (* ?x31181 l_0_7_6)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31173 (* ?x31172 l_0_7_5)))
 (let ((?x34109 (* l_0_7_231 l_0_7_231)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34269 (* ?x34141 l_0_7_256)))
 (let ((?x34107 (* l_0_7_230 l_0_7_230)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34266 (* ?x34138 l_0_7_255)))
 (let ((?x34119 (* l_0_7_229 l_0_7_229)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34263 (* ?x34171 l_0_7_254)))
 (let ((?x34261 (* l_0_7_141 l_0_7_141)))
 (let ((?x34262 (- (- (* (- l_0_7_139) l_0_7_139) (* l_0_7_140 l_0_7_140)) ?x34261)))
 (let ((?x34273 (+ (+ (- (+ (- (+ (- ?x34262 ?x34263) ?x34119) ?x34266) ?x34107) ?x34269) ?x34109) (* (* 2.0 l_0_7_29) l_0_7_4))))
 (let ((?x34282 (+ (+ (- (- (- (+ (+ ?x34273 ?x31173) ?x31182) ?x31184) ?x31186) ?x31188) ?x34279) ?x34281)))
 (= (+ ?x34282 ?x34283) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x31051 (* 2.0 l_0_7_51)))
 (let ((?x31236 (* ?x31051 l_0_7_84)))
 (let ((?x31048 (* 2.0 l_0_7_50)))
 (let ((?x31234 (* ?x31048 l_0_7_83)))
 (let ((?x31042 (* 2.0 l_0_7_49)))
 (let ((?x31232 (* ?x31042 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31230 (* ?x31229 l_0_7_6)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31227 (* ?x31226 l_0_7_5)))
 (let ((?x31223 (* 2.0 l_0_7_37)))
 (let ((?x31224 (* ?x31223 l_0_7_4)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34327 (* ?x34141 l_0_7_264)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34325 (* ?x34138 l_0_7_263)))
 (let ((?x34330 (+ (+ (- (- (* (* (- 2.0) l_0_7_229) l_0_7_262) ?x34325) ?x34327) ?x31224) ?x31227)))
 (= (- (- (- (+ ?x34330 ?x31230) ?x31232) ?x31234) ?x31236) 0.0)))))))))))))))))))
(assert
 (let ((?x31288 (* l_0_7_9 l_0_7_9)))
 (let ((?x31286 (* l_0_7_8 l_0_7_8)))
 (let ((?x31284 (* l_0_7_7 l_0_7_7)))
 (let ((?x31282 (* l_0_7_55 l_0_7_55)))
 (let ((?x31280 (* l_0_7_54 l_0_7_54)))
 (let ((?x31278 (* l_0_7_53 l_0_7_53)))
 (let ((?x31276 (* l_0_7_52 l_0_7_52)))
 (let ((?x34355 (* l_0_7_235 l_0_7_235)))
 (let ((?x34353 (* l_0_7_234 l_0_7_234)))
 (let ((?x34351 (* l_0_7_233 l_0_7_233)))
 (let ((?x34354 (- (- (- (* l_0_7_10 l_0_7_10) (* l_0_7_232 l_0_7_232)) ?x34351) ?x34353)))
 (let ((?x34362 (+ (+ (- (- (- (- (- ?x34354 ?x34355) ?x31276) ?x31278) ?x31280) ?x31282) ?x31284) ?x31286)))
 (= (+ ?x34362 ?x31288) 0.0))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31364 (* ?x31326 l_0_7_64)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31362 (* ?x31323 l_0_7_63)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31360 (* ?x31320 l_0_7_62)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31358 (* ?x31317 l_0_7_61)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34384 (* ?x32757 l_0_7_244)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x34382 (* ?x32754 l_0_7_243)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x34380 (* ?x32751 l_0_7_242)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x34378 (* ?x32748 l_0_7_241)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31356 (* ?x30561 l_0_7_9)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31354 (* ?x30558 l_0_7_8)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x31352 (* ?x30551 l_0_7_7)))
 (let ((?x34379 (- (+ (+ (+ (* (* 2.0 l_0_7_10) l_0_7_19) ?x31352) ?x31354) ?x31356) ?x34378)))
 (let ((?x34389 (- (- (- (- (- (- (- ?x34379 ?x34380) ?x34382) ?x34384) ?x31358) ?x31360) ?x31362) ?x31364)))
 (= ?x34389 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31391 (* ?x31326 l_0_7_70)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31389 (* ?x31323 l_0_7_69)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31387 (* ?x31320 l_0_7_68)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31385 (* ?x31317 l_0_7_67)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x31383 (* ?x31149 l_0_7_9)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34418 (* ?x32757 l_0_7_250)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x34416 (* ?x32754 l_0_7_249)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x34414 (* ?x32751 l_0_7_248)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x34412 (* ?x32748 l_0_7_247)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x31374 (* ?x30929 l_0_7_8)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17443 (* ?x17439 l_0_7_7)))
 (let ((?x34415 (- (- (+ (+ (* (* 2.0 l_0_7_10) l_0_7_25) ?x17443) ?x31374) ?x34412) ?x34414)))
 (let ((?x34424 (- (- (- (- (+ (- (- ?x34415 ?x34416) ?x34418) ?x31383) ?x31385) ?x31387) ?x31389) ?x31391)))
 (= ?x34424 0.0))))))))))))))))))))))))))
(assert
 (let ((?x34469 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x34466 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x34463 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31433 (* ?x31326 l_0_7_77)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31431 (* ?x31323 l_0_7_76)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31429 (* ?x31320 l_0_7_75)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31427 (* ?x31317 l_0_7_74)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x31425 (* ?x31181 l_0_7_9)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x31416 (* ?x31172 l_0_7_8)))
 (let ((?x31411 (* 2.0 l_0_7_29)))
 (let ((?x31413 (* ?x31411 l_0_7_7)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34453 (* ?x32757 l_0_7_257)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x20616 (* ?x32754 l_0_7_256)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x20632 (* ?x32751 l_0_7_255)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x20634 (* ?x32748 l_0_7_254)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34142 (* ?x34141 l_0_7_234)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34139 (* ?x34138 l_0_7_233)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x20677 (* ?x31220 l_0_7_144)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x20679 (* ?x31217 l_0_7_143)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x20700 (* ?x31214 l_0_7_142)))
 (let ((?x20661 (+ (- (- (- (* (* 2.0 l_0_7_10) l_0_7_32) ?x20700) ?x20679) ?x20677) (* (* 2.0 l_0_7_229) l_0_7_232))))
 (let ((?x34455 (+ (- (- (- (- (+ (+ ?x20661 ?x34139) ?x34142) ?x20634) ?x20632) ?x20616) ?x34453) ?x31413)))
 (let ((?x34464 (+ (- (- (- (- (+ (+ ?x34455 ?x31416) ?x31425) ?x31427) ?x31429) ?x31431) ?x31433) ?x34463)))
 (= (+ (+ ?x34464 ?x34466) ?x34469) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31326 (* 2.0 l_0_7_55)))
 (let ((?x31495 (* ?x31326 l_0_7_85)))
 (let ((?x31323 (* 2.0 l_0_7_54)))
 (let ((?x31493 (* ?x31323 l_0_7_84)))
 (let ((?x31320 (* 2.0 l_0_7_53)))
 (let ((?x31491 (* ?x31320 l_0_7_83)))
 (let ((?x31317 (* 2.0 l_0_7_52)))
 (let ((?x31489 (* ?x31317 l_0_7_82)))
 (let ((?x31229 (* 2.0 l_0_7_39)))
 (let ((?x31487 (* ?x31229 l_0_7_9)))
 (let ((?x31226 (* 2.0 l_0_7_38)))
 (let ((?x31485 (* ?x31226 l_0_7_8)))
 (let ((?x31223 (* 2.0 l_0_7_37)))
 (let ((?x31483 (* ?x31223 l_0_7_7)))
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34491 (* ?x32757 l_0_7_265)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x20762 (* ?x32754 l_0_7_264)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x20793 (* ?x32751 l_0_7_263)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x20796 (* ?x32748 l_0_7_262)))
 (let ((?x34492 (- (- (- (- (* (* 2.0 l_0_7_10) l_0_7_40) ?x20796) ?x20793) ?x20762) ?x34491)))
 (let ((?x34499 (- (- (- (- (+ (+ (+ ?x34492 ?x31483) ?x31485) ?x31487) ?x31489) ?x31491) ?x31493) ?x31495)))
 (= ?x34499 0.0))))))))))))))))))))))))))
(assert
 (let ((?x31565 (* l_0_7_60 l_0_7_60)))
 (let ((?x31563 (* l_0_7_59 l_0_7_59)))
 (let ((?x31561 (* l_0_7_58 l_0_7_58)))
 (let ((?x31559 (* l_0_7_57 l_0_7_57)))
 (let ((?x31557 (* l_0_7_56 l_0_7_56)))
 (let ((?x34524 (* l_0_7_240 l_0_7_240)))
 (let ((?x34522 (* l_0_7_239 l_0_7_239)))
 (let ((?x34520 (* l_0_7_238 l_0_7_238)))
 (let ((?x34518 (* l_0_7_237 l_0_7_237)))
 (let ((?x34516 (* l_0_7_236 l_0_7_236)))
 (let ((?x31555 (* l_0_7_15 l_0_7_15)))
 (let ((?x31553 (* l_0_7_14 l_0_7_14)))
 (let ((?x31540 (* l_0_7_13 l_0_7_13)))
 (let ((?x34514 (+ (+ (+ (* l_0_7_11 l_0_7_11) (* l_0_7_12 l_0_7_12)) ?x31540) ?x31553)))
 (let ((?x34526 (- (- (- (- (- (- (+ ?x34514 ?x31555) ?x34516) ?x34518) ?x34520) ?x34522) ?x34524) ?x31557)))
 (= (- (- (- (- ?x34526 ?x31559) ?x31561) ?x31563) ?x31565) 0.0)))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31608 (* ?x31607 l_0_7_65)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31605 (* ?x31604 l_0_7_64)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31602 (* ?x31601 l_0_7_63)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31599 (* ?x31598 l_0_7_62)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31596 (* ?x31595 l_0_7_61)))
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34557 (* ?x34556 l_0_7_245)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34554 (* ?x34553 l_0_7_244)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34551 (* ?x34550 l_0_7_243)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34548 (* ?x34547 l_0_7_242)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x20935 (* ?x20932 l_0_7_241)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31593 (* ?x31592 l_0_7_20)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31590 (* ?x31589 l_0_7_19)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31587 (* ?x31089 l_0_7_18)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31585 (* ?x30889 l_0_7_17)))
 (let ((?x20938 (+ (+ (+ (+ (* (* 2.0 l_0_7_11) l_0_7_16) ?x31585) ?x31587) ?x31590) ?x31593)))
 (let ((?x34560 (- (- (- (- (- (- (- ?x20938 ?x20935) ?x34548) ?x34551) ?x34554) ?x34557) ?x31596) ?x31599)))
 (= (- (- (- ?x34560 ?x31602) ?x31605) ?x31608) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31660 (* ?x31607 l_0_7_71)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31658 (* ?x31604 l_0_7_70)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31656 (* ?x31601 l_0_7_69)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31654 (* ?x31598 l_0_7_68)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31652 (* ?x31595 l_0_7_67)))
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x20998 (* ?x34556 l_0_7_251)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x21001 (* ?x34553 l_0_7_250)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x21061 (* ?x34550 l_0_7_249)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x21064 (* ?x34547 l_0_7_248)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x21057 (* ?x20932 l_0_7_247)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31650 (* ?x31592 l_0_7_26)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31640 (* ?x31589 l_0_7_25)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31637 (* ?x31089 l_0_7_24)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31633 (* ?x30889 l_0_7_23)))
 (let ((?x21051 (+ (+ (+ (+ (* (* 2.0 l_0_7_11) l_0_7_22) ?x31633) ?x31637) ?x31640) ?x31650)))
 (let ((?x34579 (- (- (- (- (- (- (- ?x21051 ?x21057) ?x21064) ?x21061) ?x21001) ?x20998) ?x31652) ?x31654)))
 (= (- (- (- ?x34579 ?x31656) ?x31658) ?x31660) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31699 (* ?x31607 l_0_7_78)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31697 (* ?x31604 l_0_7_77)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31695 (* ?x31601 l_0_7_76)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31693 (* ?x31598 l_0_7_75)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31691 (* ?x31595 l_0_7_74)))
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34597 (* ?x34556 l_0_7_258)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34595 (* ?x34553 l_0_7_257)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34593 (* ?x34550 l_0_7_256)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34591 (* ?x34547 l_0_7_255)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x34589 (* ?x20932 l_0_7_254)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34176 (* ?x34141 l_0_7_238)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34174 (* ?x34138 l_0_7_237)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34172 (* ?x34171 l_0_7_236)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31689 (* ?x31592 l_0_7_33)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x32903 (* ?x31220 l_0_7_148)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x32901 (* ?x31217 l_0_7_147)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31679 (* ?x31589 l_0_7_32)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x32899 (* ?x31214 l_0_7_146)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x17605 (* ?x31089 l_0_7_31)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31676 (* ?x30889 l_0_7_30)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32897 (* ?x31727 l_0_7_96)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32895 (* ?x31722 l_0_7_95)))
 (let ((?x21190 (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_94) ?x32895) ?x32897) (* (* 2.0 l_0_7_11) l_0_7_29))))
 (let ((?x21189 (+ (- (- (+ (- (+ (+ ?x21190 ?x31676) ?x17605) ?x32899) ?x31679) ?x32901) ?x32903) ?x31689)))
 (let ((?x34596 (- (- (- (- (+ (+ (+ ?x21189 ?x34172) ?x34174) ?x34176) ?x34589) ?x34591) ?x34593) ?x34595)))
 (= (- (- (- (- (- (- ?x34596 ?x34597) ?x31691) ?x31693) ?x31695) ?x31697) ?x31699) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31607 (* 2.0 l_0_7_60)))
 (let ((?x31777 (* ?x31607 l_0_7_86)))
 (let ((?x31604 (* 2.0 l_0_7_59)))
 (let ((?x31775 (* ?x31604 l_0_7_85)))
 (let ((?x31601 (* 2.0 l_0_7_58)))
 (let ((?x31773 (* ?x31601 l_0_7_84)))
 (let ((?x31598 (* 2.0 l_0_7_57)))
 (let ((?x31771 (* ?x31598 l_0_7_83)))
 (let ((?x31595 (* 2.0 l_0_7_56)))
 (let ((?x31769 (* ?x31595 l_0_7_82)))
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34626 (* ?x34556 l_0_7_266)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34624 (* ?x34553 l_0_7_265)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34622 (* ?x34550 l_0_7_264)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34620 (* ?x34547 l_0_7_263)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x34618 (* ?x20932 l_0_7_262)))
 (let ((?x31592 (* 2.0 l_0_7_15)))
 (let ((?x31764 (* ?x31592 l_0_7_41)))
 (let ((?x31589 (* 2.0 l_0_7_14)))
 (let ((?x31750 (* ?x31589 l_0_7_40)))
 (let ((?x31089 (* 2.0 l_0_7_13)))
 (let ((?x31748 (* ?x31089 l_0_7_39)))
 (let ((?x30889 (* 2.0 l_0_7_12)))
 (let ((?x31746 (* ?x30889 l_0_7_38)))
 (let ((?x31304 (* 2.0 l_0_7_11)))
 (let ((?x31744 (* ?x31304 l_0_7_37)))
 (let ((?x34623 (- (- (- (+ (+ (+ (+ ?x31744 ?x31746) ?x31748) ?x31750) ?x31764) ?x34618) ?x34620) ?x34622)))
 (let ((?x34632 (- (- (- (- (- (- (- ?x34623 ?x34624) ?x34626) ?x31769) ?x31771) ?x31773) ?x31775) ?x31777)))
 (= ?x34632 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x31860 (* l_0_7_66 l_0_7_66)))
 (let ((?x31858 (* l_0_7_65 l_0_7_65)))
 (let ((?x31856 (* l_0_7_64 l_0_7_64)))
 (let ((?x31854 (* l_0_7_63 l_0_7_63)))
 (let ((?x31852 (* l_0_7_62 l_0_7_62)))
 (let ((?x31850 (* l_0_7_61 l_0_7_61)))
 (let ((?x34647 (* l_0_7_246 l_0_7_246)))
 (let ((?x21358 (* l_0_7_245 l_0_7_245)))
 (let ((?x21361 (* l_0_7_244 l_0_7_244)))
 (let ((?x21432 (* l_0_7_243 l_0_7_243)))
 (let ((?x21433 (* l_0_7_242 l_0_7_242)))
 (let ((?x21409 (* l_0_7_241 l_0_7_241)))
 (let ((?x31848 (* l_0_7_21 l_0_7_21)))
 (let ((?x31846 (* l_0_7_20 l_0_7_20)))
 (let ((?x31831 (* l_0_7_19 l_0_7_19)))
 (let ((?x31828 (* l_0_7_18 l_0_7_18)))
 (let ((?x21431 (+ (+ (+ (* l_0_7_16 l_0_7_16) (* l_0_7_17 l_0_7_17)) ?x31828) ?x31831)))
 (let ((?x21359 (- (- (- (- (- (+ (+ ?x21431 ?x31846) ?x31848) ?x21409) ?x21433) ?x21432) ?x21361) ?x21358)))
 (let ((?x34654 (- (- (- (- (- (- (- ?x21359 ?x34647) ?x31850) ?x31852) ?x31854) ?x31856) ?x31858) ?x31860)))
 (= ?x34654 0.0)))))))))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x31926 (* ?x30608 l_0_7_79)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x31924 (* ?x30605 l_0_7_78)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x31922 (* ?x30602 l_0_7_77)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31920 (* ?x30599 l_0_7_76)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31918 (* ?x30596 l_0_7_75)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31916 (* ?x30593 l_0_7_74)))
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x34700 (* ?x30588 l_0_7_259)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x34698 (* ?x30585 l_0_7_258)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x34696 (* ?x30582 l_0_7_257)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x34694 (* ?x30579 l_0_7_256)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x34692 (* ?x30576 l_0_7_255)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x34690 (* ?x30573 l_0_7_254)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34207 (* ?x34141 l_0_7_243)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34205 (* ?x34138 l_0_7_242)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34203 (* ?x34171 l_0_7_241)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31914 (* ?x30570 l_0_7_34)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31912 (* ?x30567 l_0_7_33)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31910 (* ?x30564 l_0_7_32)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31908 (* ?x30561 l_0_7_31)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31906 (* ?x30558 l_0_7_30)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x31221 (* ?x31220 l_0_7_153)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x31218 (* ?x31217 l_0_7_152)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x31215 (* ?x31214 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31212 (* ?x30725 l_0_7_96)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31210 (* ?x30722 l_0_7_95)))
 (let ((?x34678 (- (- (+ (+ (* (* 2.0 l_0_7_106) l_0_7_94) ?x31210) ?x31212) ?x31215) ?x31218)))
 (let ((?x34683 (+ (+ (+ (- ?x34678 ?x31221) (* (* 2.0 l_0_7_16) l_0_7_29)) ?x31906) ?x31908)))
 (let ((?x34691 (- (+ (+ (+ (+ (+ (+ ?x34683 ?x31910) ?x31912) ?x31914) ?x34203) ?x34205) ?x34207) ?x34690)))
 (let ((?x34703 (- (- (- (- (- (- (- ?x34691 ?x34692) ?x34694) ?x34696) ?x34698) ?x34700) ?x31916) ?x31918)))
 (= (- (- (- (- ?x34703 ?x31920) ?x31922) ?x31924) ?x31926) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30608 (* 2.0 l_0_7_66)))
 (let ((?x32004 (* ?x30608 l_0_7_87)))
 (let ((?x30605 (* 2.0 l_0_7_65)))
 (let ((?x32002 (* ?x30605 l_0_7_86)))
 (let ((?x30602 (* 2.0 l_0_7_64)))
 (let ((?x32000 (* ?x30602 l_0_7_85)))
 (let ((?x30599 (* 2.0 l_0_7_63)))
 (let ((?x31998 (* ?x30599 l_0_7_84)))
 (let ((?x30596 (* 2.0 l_0_7_62)))
 (let ((?x31996 (* ?x30596 l_0_7_83)))
 (let ((?x30593 (* 2.0 l_0_7_61)))
 (let ((?x31994 (* ?x30593 l_0_7_82)))
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x21666 (* ?x30588 l_0_7_267)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x21714 (* ?x30585 l_0_7_266)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x21708 (* ?x30582 l_0_7_265)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x21702 (* ?x30579 l_0_7_264)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x21696 (* ?x30576 l_0_7_263)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x21823 (* ?x30573 l_0_7_262)))
 (let ((?x30570 (* 2.0 l_0_7_21)))
 (let ((?x31992 (* ?x30570 l_0_7_42)))
 (let ((?x30567 (* 2.0 l_0_7_20)))
 (let ((?x31990 (* ?x30567 l_0_7_41)))
 (let ((?x30564 (* 2.0 l_0_7_19)))
 (let ((?x31988 (* ?x30564 l_0_7_40)))
 (let ((?x30561 (* 2.0 l_0_7_18)))
 (let ((?x31986 (* ?x30561 l_0_7_39)))
 (let ((?x30558 (* 2.0 l_0_7_17)))
 (let ((?x31984 (* ?x30558 l_0_7_38)))
 (let ((?x30551 (* 2.0 l_0_7_16)))
 (let ((?x31982 (* ?x30551 l_0_7_37)))
 (let ((?x21699 (- (- (+ (+ (+ (+ (+ ?x31982 ?x31984) ?x31986) ?x31988) ?x31990) ?x31992) ?x21823) ?x21696)))
 (let ((?x21682 (- (- (- (- (- (- (- ?x21699 ?x21702) ?x21708) ?x21714) ?x21666) ?x31994) ?x31996) ?x31998)))
 (= (- (- (- ?x21682 ?x32000) ?x32002) ?x32004) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32083 (* l_0_7_73 l_0_7_73)))
 (let ((?x32081 (* l_0_7_72 l_0_7_72)))
 (let ((?x32079 (* l_0_7_71 l_0_7_71)))
 (let ((?x32077 (* l_0_7_70 l_0_7_70)))
 (let ((?x32075 (* l_0_7_69 l_0_7_69)))
 (let ((?x32073 (* l_0_7_68 l_0_7_68)))
 (let ((?x32071 (* l_0_7_67 l_0_7_67)))
 (let ((?x32069 (* l_0_7_28 l_0_7_28)))
 (let ((?x32067 (* l_0_7_27 l_0_7_27)))
 (let ((?x32065 (* l_0_7_26 l_0_7_26)))
 (let ((?x34731 (* l_0_7_253 l_0_7_253)))
 (let ((?x34729 (* l_0_7_252 l_0_7_252)))
 (let ((?x34727 (* l_0_7_251 l_0_7_251)))
 (let ((?x34725 (* l_0_7_250 l_0_7_250)))
 (let ((?x32049 (* l_0_7_25 l_0_7_25)))
 (let ((?x34722 (* l_0_7_249 l_0_7_249)))
 (let ((?x34720 (* l_0_7_248 l_0_7_248)))
 (let ((?x34718 (* l_0_7_247 l_0_7_247)))
 (let ((?x32046 (* l_0_7_24 l_0_7_24)))
 (let ((?x34719 (- (+ (+ (* l_0_7_22 l_0_7_22) (* l_0_7_23 l_0_7_23)) ?x32046) ?x34718)))
 (let ((?x34732 (- (- (- (- (+ (- (- ?x34719 ?x34720) ?x34722) ?x32049) ?x34725) ?x34727) ?x34729) ?x34731)))
 (let ((?x34739 (- (- (- (- (+ (+ (+ ?x34732 ?x32065) ?x32067) ?x32069) ?x32071) ?x32073) ?x32075) ?x32077)))
 (= (- (- (- ?x34739 ?x32079) ?x32081) ?x32083) 0.0))))))))))))))))))))))))
(assert
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32148 (* ?x32147 l_0_7_80)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32145 (* ?x32144 l_0_7_79)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32142 (* ?x32141 l_0_7_78)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32139 (* ?x32138 l_0_7_77)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32136 (* ?x32135 l_0_7_76)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32133 (* ?x32132 l_0_7_75)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32130 (* ?x32129 l_0_7_74)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32127 (* ?x32126 l_0_7_35)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32124 (* ?x32123 l_0_7_34)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32121 (* ?x32120 l_0_7_33)))
 (let ((?x34808 (* 2.0 l_0_7_253)))
 (let ((?x34809 (* ?x34808 l_0_7_260)))
 (let ((?x34805 (* 2.0 l_0_7_252)))
 (let ((?x34806 (* ?x34805 l_0_7_259)))
 (let ((?x34802 (* 2.0 l_0_7_251)))
 (let ((?x34803 (* ?x34802 l_0_7_258)))
 (let ((?x34799 (* 2.0 l_0_7_250)))
 (let ((?x34800 (* ?x34799 l_0_7_257)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32118 (* ?x32117 l_0_7_32)))
 (let ((?x34795 (* 2.0 l_0_7_249)))
 (let ((?x34796 (* ?x34795 l_0_7_256)))
 (let ((?x34792 (* 2.0 l_0_7_248)))
 (let ((?x34793 (* ?x34792 l_0_7_255)))
 (let ((?x34789 (* 2.0 l_0_7_247)))
 (let ((?x34790 (* ?x34789 l_0_7_254)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32115 (* ?x31149 l_0_7_31)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34231 (* ?x34141 l_0_7_249)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34229 (* ?x34138 l_0_7_248)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32113 (* ?x30929 l_0_7_30)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x20447 (* ?x34171 l_0_7_247)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34780 (* ?x31220 l_0_7_159)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34778 (* ?x31217 l_0_7_158)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34776 (* ?x31214 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x34774 (* ?x34773 l_0_7_96)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x34771 (* ?x34770 l_0_7_95)))
 (let ((?x34779 (- (- (+ (+ (* (* 2.0 l_0_7_112) l_0_7_94) ?x34771) ?x34774) ?x34776) ?x34778)))
 (let ((?x34785 (+ (+ (+ (- ?x34779 ?x34780) (* (* 2.0 l_0_7_22) l_0_7_29)) ?x20447) ?x32113)))
 (let ((?x34798 (+ (- (- (- (+ (+ (+ ?x34785 ?x34229) ?x34231) ?x32115) ?x34790) ?x34793) ?x34796) ?x32118)))
 (let ((?x34813 (+ (+ (+ (- (- (- (- ?x34798 ?x34800) ?x34803) ?x34806) ?x34809) ?x32121) ?x32124) ?x32127)))
 (let ((?x34820 (- (- (- (- (- (- (- ?x34813 ?x32130) ?x32133) ?x32136) ?x32139) ?x32142) ?x32145) ?x32148)))
 (= ?x34820 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x33758 (* ?x33757 l_0_7_94)))
 (let ((?x32147 (* 2.0 l_0_7_73)))
 (let ((?x32216 (* ?x32147 l_0_7_88)))
 (let ((?x32144 (* 2.0 l_0_7_72)))
 (let ((?x32214 (* ?x32144 l_0_7_87)))
 (let ((?x32141 (* 2.0 l_0_7_71)))
 (let ((?x32212 (* ?x32141 l_0_7_86)))
 (let ((?x32138 (* 2.0 l_0_7_70)))
 (let ((?x32210 (* ?x32138 l_0_7_85)))
 (let ((?x32135 (* 2.0 l_0_7_69)))
 (let ((?x32208 (* ?x32135 l_0_7_84)))
 (let ((?x32132 (* 2.0 l_0_7_68)))
 (let ((?x32206 (* ?x32132 l_0_7_83)))
 (let ((?x32129 (* 2.0 l_0_7_67)))
 (let ((?x32204 (* ?x32129 l_0_7_82)))
 (let ((?x32126 (* 2.0 l_0_7_28)))
 (let ((?x32202 (* ?x32126 l_0_7_43)))
 (let ((?x32123 (* 2.0 l_0_7_27)))
 (let ((?x32200 (* ?x32123 l_0_7_42)))
 (let ((?x32120 (* 2.0 l_0_7_26)))
 (let ((?x32198 (* ?x32120 l_0_7_41)))
 (let ((?x34808 (* 2.0 l_0_7_253)))
 (let ((?x22022 (* ?x34808 l_0_7_268)))
 (let ((?x34805 (* 2.0 l_0_7_252)))
 (let ((?x22010 (* ?x34805 l_0_7_267)))
 (let ((?x34802 (* 2.0 l_0_7_251)))
 (let ((?x21998 (* ?x34802 l_0_7_266)))
 (let ((?x34799 (* 2.0 l_0_7_250)))
 (let ((?x21986 (* ?x34799 l_0_7_265)))
 (let ((?x32117 (* 2.0 l_0_7_25)))
 (let ((?x32186 (* ?x32117 l_0_7_40)))
 (let ((?x34795 (* 2.0 l_0_7_249)))
 (let ((?x22122 (* ?x34795 l_0_7_264)))
 (let ((?x34792 (* 2.0 l_0_7_248)))
 (let ((?x22152 (* ?x34792 l_0_7_263)))
 (let ((?x34789 (* 2.0 l_0_7_247)))
 (let ((?x22158 (* ?x34789 l_0_7_262)))
 (let ((?x31149 (* 2.0 l_0_7_24)))
 (let ((?x32182 (* ?x31149 l_0_7_39)))
 (let ((?x30929 (* 2.0 l_0_7_23)))
 (let ((?x32178 (* ?x30929 l_0_7_38)))
 (let ((?x17439 (* 2.0 l_0_7_22)))
 (let ((?x17922 (* ?x17439 l_0_7_37)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x33727 (* ?x30799 l_0_7_139)))
 (let ((?x21980 (+ (- (- (- (+ (+ (+ ?x33727 ?x17922) ?x32178) ?x32182) ?x22158) ?x22152) ?x22122) ?x32186)))
 (let ((?x22046 (+ (+ (+ (- (- (- (- ?x21980 ?x21986) ?x21998) ?x22010) ?x22022) ?x32198) ?x32200) ?x32202)))
 (let ((?x34857 (- (- (- (- (- (- (- ?x22046 ?x32204) ?x32206) ?x32208) ?x32210) ?x32212) ?x32214) ?x32216)))
 (= (- ?x34857 ?x33758) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32289 (* l_0_7_81 l_0_7_81)))
 (let ((?x32287 (* l_0_7_80 l_0_7_80)))
 (let ((?x32285 (* l_0_7_79 l_0_7_79)))
 (let ((?x32283 (* l_0_7_78 l_0_7_78)))
 (let ((?x32281 (* l_0_7_77 l_0_7_77)))
 (let ((?x32279 (* l_0_7_76 l_0_7_76)))
 (let ((?x32277 (* l_0_7_75 l_0_7_75)))
 (let ((?x32275 (* l_0_7_74 l_0_7_74)))
 (let ((?x32273 (* l_0_7_36 l_0_7_36)))
 (let ((?x32271 (* l_0_7_35 l_0_7_35)))
 (let ((?x32269 (* l_0_7_34 l_0_7_34)))
 (let ((?x32267 (* l_0_7_33 l_0_7_33)))
 (let ((?x32265 (* l_0_7_32 l_0_7_32)))
 (let ((?x32263 (* l_0_7_31 l_0_7_31)))
 (let ((?x32261 (* l_0_7_30 l_0_7_30)))
 (let ((?x32293 (* l_0_7_29 l_0_7_29)))
 (let ((?x34915 (* l_0_7_261 l_0_7_261)))
 (let ((?x34913 (* l_0_7_260 l_0_7_260)))
 (let ((?x34911 (* l_0_7_259 l_0_7_259)))
 (let ((?x34909 (* l_0_7_258 l_0_7_258)))
 (let ((?x34907 (* l_0_7_257 l_0_7_257)))
 (let ((?x34905 (* l_0_7_256 l_0_7_256)))
 (let ((?x34903 (* l_0_7_255 l_0_7_255)))
 (let ((?x34901 (* l_0_7_254 l_0_7_254)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34269 (* ?x34141 l_0_7_256)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34266 (* ?x34138 l_0_7_255)))
 (let ((?x34171 (* 2.0 l_0_7_229)))
 (let ((?x34263 (* ?x34171 l_0_7_254)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34896 (* ?x31220 l_0_7_166)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34894 (* ?x31217 l_0_7_165)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34892 (* ?x31214 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x34890 (* ?x34889 l_0_7_96)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x34887 (* ?x34886 l_0_7_95)))
 (let ((?x34895 (- (- (+ (+ (* (* 2.0 l_0_7_119) l_0_7_94) ?x34887) ?x34890) ?x34892) ?x34894)))
 (let ((?x34906 (- (- (- (+ (+ (+ (- ?x34895 ?x34896) ?x34263) ?x34266) ?x34269) ?x34901) ?x34903) ?x34905)))
 (let ((?x34918 (+ (+ (- (- (- (- (- ?x34906 ?x34907) ?x34909) ?x34911) ?x34913) ?x34915) ?x32293) ?x32261)))
 (let ((?x34925 (- (+ (+ (+ (+ (+ (+ ?x34918 ?x32263) ?x32265) ?x32267) ?x32269) ?x32271) ?x32273) ?x32275)))
 (let ((?x34932 (- (- (- (- (- (- (- ?x34925 ?x32277) ?x32279) ?x32281) ?x32283) ?x32285) ?x32287) ?x32289)))
 (= ?x34932 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32379 (* (* 2.0 l_0_7_81) l_0_7_89)))
 (let ((?x32376 (* (* 2.0 l_0_7_80) l_0_7_88)))
 (let ((?x32373 (* (* 2.0 l_0_7_79) l_0_7_87)))
 (let ((?x32370 (* (* 2.0 l_0_7_78) l_0_7_86)))
 (let ((?x32367 (* (* 2.0 l_0_7_77) l_0_7_85)))
 (let ((?x32364 (* (* 2.0 l_0_7_76) l_0_7_84)))
 (let ((?x32361 (* (* 2.0 l_0_7_75) l_0_7_83)))
 (let ((?x32358 (* (* 2.0 l_0_7_74) l_0_7_82)))
 (let ((?x32355 (* (* 2.0 l_0_7_36) l_0_7_44)))
 (let ((?x32352 (* (* 2.0 l_0_7_35) l_0_7_43)))
 (let ((?x32349 (* (* 2.0 l_0_7_34) l_0_7_42)))
 (let ((?x32346 (* (* 2.0 l_0_7_33) l_0_7_41)))
 (let ((?x32343 (* (* 2.0 l_0_7_32) l_0_7_40)))
 (let ((?x31181 (* 2.0 l_0_7_31)))
 (let ((?x32340 (* ?x31181 l_0_7_39)))
 (let ((?x31172 (* 2.0 l_0_7_30)))
 (let ((?x32338 (* ?x31172 l_0_7_38)))
 (let ((?x31411 (* 2.0 l_0_7_29)))
 (let ((?x32336 (* ?x31411 l_0_7_37)))
 (let ((?x35010 (* (* 2.0 l_0_7_261) l_0_7_269)))
 (let ((?x35007 (* (* 2.0 l_0_7_260) l_0_7_268)))
 (let ((?x35004 (* (* 2.0 l_0_7_259) l_0_7_267)))
 (let ((?x35001 (* (* 2.0 l_0_7_258) l_0_7_266)))
 (let ((?x34998 (* (* 2.0 l_0_7_257) l_0_7_265)))
 (let ((?x34995 (* (* 2.0 l_0_7_256) l_0_7_264)))
 (let ((?x34992 (* (* 2.0 l_0_7_255) l_0_7_263)))
 (let ((?x34989 (* (* 2.0 l_0_7_254) l_0_7_262)))
 (let ((?x34141 (* 2.0 l_0_7_231)))
 (let ((?x34327 (* ?x34141 l_0_7_264)))
 (let ((?x34138 (* 2.0 l_0_7_230)))
 (let ((?x34325 (* ?x34138 l_0_7_263)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34982 (* ?x31220 l_0_7_174)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34980 (* ?x31217 l_0_7_173)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34978 (* ?x31214 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x34976 (* ?x34975 l_0_7_96)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x34973 (* ?x34972 l_0_7_95)))
 (let ((?x34981 (- (- (+ (+ (* (* 2.0 l_0_7_127) l_0_7_94) ?x34973) ?x34976) ?x34978) ?x34980)))
 (let ((?x34987 (+ (+ (+ (- ?x34981 ?x34982) (* (* 2.0 l_0_7_229) l_0_7_262)) ?x34325) ?x34327)))
 (let ((?x35008 (- (- (- (- (- (- (- ?x34987 ?x34989) ?x34992) ?x34995) ?x34998) ?x35001) ?x35004) ?x35007)))
 (let ((?x35017 (+ (+ (+ (+ (+ (+ (- ?x35008 ?x35010) ?x32336) ?x32338) ?x32340) ?x32343) ?x32346) ?x32349)))
 (let ((?x35024 (- (- (- (- (- (+ (+ ?x35017 ?x32352) ?x32355) ?x32358) ?x32361) ?x32364) ?x32367) ?x32370)))
 (= (- (- (- ?x35024 ?x32373) ?x32376) ?x32379) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x32511 (* l_0_7_90 l_0_7_90)))
 (let ((?x32509 (* l_0_7_89 l_0_7_89)))
 (let ((?x32507 (* l_0_7_88 l_0_7_88)))
 (let ((?x32505 (* l_0_7_87 l_0_7_87)))
 (let ((?x32503 (* l_0_7_86 l_0_7_86)))
 (let ((?x32501 (* l_0_7_85 l_0_7_85)))
 (let ((?x32499 (* l_0_7_84 l_0_7_84)))
 (let ((?x32497 (* l_0_7_83 l_0_7_83)))
 (let ((?x32495 (* l_0_7_82 l_0_7_82)))
 (let ((?x32493 (* l_0_7_45 l_0_7_45)))
 (let ((?x32491 (* l_0_7_44 l_0_7_44)))
 (let ((?x32489 (* l_0_7_43 l_0_7_43)))
 (let ((?x32487 (* l_0_7_42 l_0_7_42)))
 (let ((?x32485 (* l_0_7_41 l_0_7_41)))
 (let ((?x32483 (* l_0_7_40 l_0_7_40)))
 (let ((?x32481 (* l_0_7_39 l_0_7_39)))
 (let ((?x32479 (* l_0_7_38 l_0_7_38)))
 (let ((?x32477 (* l_0_7_37 l_0_7_37)))
 (let ((?x35081 (* l_0_7_270 l_0_7_270)))
 (let ((?x35079 (* l_0_7_269 l_0_7_269)))
 (let ((?x35077 (* l_0_7_268 l_0_7_268)))
 (let ((?x35075 (* l_0_7_267 l_0_7_267)))
 (let ((?x35073 (* l_0_7_266 l_0_7_266)))
 (let ((?x35071 (* l_0_7_265 l_0_7_265)))
 (let ((?x22454 (* l_0_7_264 l_0_7_264)))
 (let ((?x35070 (- (- (* (- l_0_7_262) l_0_7_262) (* l_0_7_263 l_0_7_263)) ?x22454)))
 (let ((?x35083 (+ (- (- (- (- (- (- ?x35070 ?x35071) ?x35073) ?x35075) ?x35077) ?x35079) ?x35081) ?x32477)))
 (let ((?x35090 (+ (+ (+ (+ (+ (+ (+ ?x35083 ?x32479) ?x32481) ?x32483) ?x32485) ?x32487) ?x32489) ?x32491)))
 (let ((?x35097 (- (- (- (- (- (- (+ ?x35090 ?x32493) ?x32495) ?x32497) ?x32499) ?x32501) ?x32503) ?x32505)))
 (= (- (- (- ?x35097 ?x32507) ?x32509) ?x32511) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x35128 (* ?x33757 l_0_7_92)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_137) ?x35128) 0.0))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x22561 (* ?x33757 l_0_7_97)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_142) ?x22561) 0.0))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x30800 (* ?x30799 l_0_7_151)))
 (= (+ (* (* (- 2.0) l_0_7_106) l_0_7_91) ?x30800) 0.0))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35157 (* ?x30799 l_0_7_157)))
 (= (+ (* (* (- 2.0) l_0_7_112) l_0_7_91) ?x35157) 0.0))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x35178 (* ?x34050 l_0_7_98)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x35176 (* ?x34047 l_0_7_97)))
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33946 (* ?x33923 l_0_7_233)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33944 (* ?x20250 l_0_7_232)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35172 (* ?x30982 l_0_7_143)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35170 (* ?x30979 l_0_7_142)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35164 (* ?x30799 l_0_7_164)))
 (let ((?x35174 (+ (- (- (+ (* (* (- 2.0) l_0_7_119) l_0_7_91) ?x35164) ?x35170) ?x35172) ?x33944)))
 (= (+ (+ (+ ?x35174 ?x33946) ?x35176) ?x35178) 0.0)))))))))))))))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x22676 (* ?x30799 l_0_7_172)))
 (= (+ (* (* (- 2.0) l_0_7_127) l_0_7_91) ?x22676) 0.0))))
(assert
 (let ((?x35200 (* l_0_7_93 l_0_7_93)))
 (let ((?x35198 (* l_0_7_92 l_0_7_92)))
 (let ((?x35192 (* l_0_7_138 l_0_7_138)))
 (let ((?x22563 (* l_0_7_137 l_0_7_137)))
 (let ((?x35193 (+ ?x22563 ?x35192)))
 (= (- (- ?x35193 ?x35198) ?x35200) 0.0)))))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x34051 (* ?x34050 l_0_7_95)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x34048 (* ?x34047 l_0_7_94)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x34035 (* ?x30982 l_0_7_140)))
 (= (- (- (+ (* (* 2.0 l_0_7_137) l_0_7_139) ?x34035) ?x34048) ?x34051) 0.0))))))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x35178 (* ?x34050 l_0_7_98)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x35176 (* ?x34047 l_0_7_97)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35172 (* ?x30982 l_0_7_143)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35170 (* ?x30979 l_0_7_142)))
 (= (- (- (+ ?x35170 ?x35172) ?x35176) ?x35178) 0.0))))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x30983 (* ?x30982 l_0_7_152)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x30980 (* ?x30979 l_0_7_151)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30972 (* ?x30722 l_0_7_93)))
 (let ((?x30984 (+ (+ (- (* (* (- 2.0) l_0_7_106) l_0_7_92) ?x30972) ?x30980) ?x30983)))
 (= ?x30984 0.0)))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35232 (* ?x30982 l_0_7_158)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35230 (* ?x30979 l_0_7_157)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35228 (* ?x34770 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_112) l_0_7_92) ?x35228) ?x35230) ?x35232) 0.0))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35250 (* ?x30982 l_0_7_165)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35248 (* ?x30979 l_0_7_164)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35241 (* ?x34886 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_119) l_0_7_92) ?x35241) ?x35248) ?x35250) 0.0))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35273 (* ?x30982 l_0_7_173)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35271 (* ?x30979 l_0_7_172)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35264 (* ?x34972 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_127) l_0_7_92) ?x35264) ?x35271) ?x35273) 0.0))))))))
(assert
 (let ((?x34283 (* l_0_7_96 l_0_7_96)))
 (let ((?x34281 (* l_0_7_95 l_0_7_95)))
 (let ((?x34279 (* l_0_7_94 l_0_7_94)))
 (let ((?x34261 (* l_0_7_141 l_0_7_141)))
 (let ((?x35288 (- (+ (+ (* l_0_7_139 l_0_7_139) (* l_0_7_140 l_0_7_140)) ?x34261) ?x34279)))
 (= (- (- ?x35288 ?x34281) ?x34283) 0.0)))))))
(assert
 (let ((?x34469 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x34466 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x34463 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x20677 (* ?x31220 l_0_7_144)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x20679 (* ?x31217 l_0_7_143)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x20700 (* ?x31214 l_0_7_142)))
 (= (- (- (- (+ (+ ?x20700 ?x20679) ?x20677) ?x34463) ?x34466) ?x34469) 0.0)))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x31221 (* ?x31220 l_0_7_153)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x31218 (* ?x31217 l_0_7_152)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x31215 (* ?x31214 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31212 (* ?x30725 l_0_7_96)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31210 (* ?x30722 l_0_7_95)))
 (let ((?x31219 (+ (+ (- (- (* (* (- 2.0) l_0_7_106) l_0_7_94) ?x31210) ?x31212) ?x31215) ?x31218)))
 (let ((?x31222 (+ ?x31219 ?x31221)))
 (= ?x31222 0.0))))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34780 (* ?x31220 l_0_7_159)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34778 (* ?x31217 l_0_7_158)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34776 (* ?x31214 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x34774 (* ?x34773 l_0_7_96)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x34771 (* ?x34770 l_0_7_95)))
 (let ((?x35315 (+ (+ (- (- (* (* (- 2.0) l_0_7_112) l_0_7_94) ?x34771) ?x34774) ?x34776) ?x34778)))
 (= (+ ?x35315 ?x34780) 0.0)))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34896 (* ?x31220 l_0_7_166)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34894 (* ?x31217 l_0_7_165)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34892 (* ?x31214 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x34890 (* ?x34889 l_0_7_96)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x34887 (* ?x34886 l_0_7_95)))
 (let ((?x35333 (+ (+ (- (- (* (* (- 2.0) l_0_7_119) l_0_7_94) ?x34887) ?x34890) ?x34892) ?x34894)))
 (= (+ ?x35333 ?x34896) 0.0)))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34982 (* ?x31220 l_0_7_174)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34980 (* ?x31217 l_0_7_173)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34978 (* ?x31214 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x34976 (* ?x34975 l_0_7_96)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x34973 (* ?x34972 l_0_7_95)))
 (let ((?x35351 (+ (+ (- (- (* (* (- 2.0) l_0_7_127) l_0_7_94) ?x34973) ?x34976) ?x34978) ?x34980)))
 (= (+ ?x35351 ?x34982) 0.0)))))))))))))
(assert
 (let ((?x35377 (* l_0_7_99 l_0_7_99)))
 (let ((?x35375 (* l_0_7_98 l_0_7_98)))
 (let ((?x35373 (* l_0_7_97 l_0_7_97)))
 (let ((?x35371 (* l_0_7_145 l_0_7_145)))
 (let ((?x35369 (* l_0_7_144 l_0_7_144)))
 (let ((?x35367 (* l_0_7_143 l_0_7_143)))
 (let ((?x35368 (+ (+ (* (- l_0_7_100) l_0_7_100) (* l_0_7_142 l_0_7_142)) ?x35367)))
 (= (- (- (- (+ (+ ?x35368 ?x35369) ?x35371) ?x35373) ?x35375) ?x35377) 0.0)))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x31481 (* ?x31480 l_0_7_154)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x31478 (* ?x31477 l_0_7_153)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x31475 (* ?x31474 l_0_7_152)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x31472 (* ?x31471 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31469 (* ?x30725 l_0_7_99)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31467 (* ?x30722 l_0_7_98)))
 (let ((?x30715 (* 2.0 l_0_7_106)))
 (let ((?x31458 (* ?x30715 l_0_7_97)))
 (let ((?x35393 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_109) ?x31458) ?x31467) ?x31469) ?x31472)))
 (= (+ (+ (+ ?x35393 ?x31475) ?x31478) ?x31481) 0.0)))))))))))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35419 (* ?x31480 l_0_7_160)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35417 (* ?x31477 l_0_7_159)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35415 (* ?x31474 l_0_7_158)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35413 (* ?x31471 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35411 (* ?x34773 l_0_7_99)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35409 (* ?x34770 l_0_7_98)))
 (let ((?x34768 (* 2.0 l_0_7_112)))
 (let ((?x35407 (* ?x34768 l_0_7_97)))
 (let ((?x35414 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_115) ?x35407) ?x35409) ?x35411) ?x35413)))
 (= (+ (+ (+ ?x35414 ?x35415) ?x35417) ?x35419) 0.0)))))))))))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35457 (* ?x31480 l_0_7_167)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35455 (* ?x31477 l_0_7_166)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35453 (* ?x31474 l_0_7_165)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35451 (* ?x31471 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35449 (* ?x34889 l_0_7_99)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35440 (* ?x34886 l_0_7_98)))
 (let ((?x34884 (* 2.0 l_0_7_119)))
 (let ((?x35436 (* ?x34884 l_0_7_97)))
 (let ((?x35452 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_122) ?x35436) ?x35440) ?x35449) ?x35451)))
 (= (+ (+ (+ ?x35452 ?x35453) ?x35455) ?x35457) 0.0)))))))))))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35499 (* ?x31480 l_0_7_175)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35497 (* ?x31477 l_0_7_174)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35495 (* ?x31474 l_0_7_173)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35493 (* ?x31471 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x35491 (* ?x34975 l_0_7_99)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35482 (* ?x34972 l_0_7_98)))
 (let ((?x22358 (* 2.0 l_0_7_127)))
 (let ((?x35478 (* ?x22358 l_0_7_97)))
 (let ((?x35494 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_130) ?x35478) ?x35482) ?x35491) ?x35493)))
 (= (+ (+ (+ ?x35494 ?x35495) ?x35497) ?x35499) 0.0)))))))))))))))))
(assert
 (let ((?x31980 (* l_0_7_156 l_0_7_156)))
 (let ((?x31978 (* l_0_7_155 l_0_7_155)))
 (let ((?x31976 (* l_0_7_154 l_0_7_154)))
 (let ((?x31974 (* l_0_7_153 l_0_7_153)))
 (let ((?x31972 (* l_0_7_152 l_0_7_152)))
 (let ((?x31970 (* l_0_7_151 l_0_7_151)))
 (let ((?x31968 (* l_0_7_111 l_0_7_111)))
 (let ((?x31966 (* l_0_7_110 l_0_7_110)))
 (let ((?x31955 (* l_0_7_109 l_0_7_109)))
 (let ((?x31951 (* l_0_7_108 l_0_7_108)))
 (let ((?x31953 (- (- (* (- l_0_7_106) l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31951)))
 (let ((?x31977 (+ (+ (+ (+ (- (- (- ?x31953 ?x31955) ?x31966) ?x31968) ?x31970) ?x31972) ?x31974) ?x31976)))
 (let ((?x31981 (+ (+ ?x31977 ?x31978) ?x31980)))
 (= ?x31981 0.0)))))))))))))))
(assert
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32334 (* ?x30752 l_0_7_169)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32332 (* ?x30749 l_0_7_168)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32330 (* ?x30746 l_0_7_167)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32328 (* ?x30743 l_0_7_166)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32326 (* ?x30740 l_0_7_165)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32324 (* ?x30737 l_0_7_164)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32322 (* ?x30734 l_0_7_124)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32320 (* ?x30731 l_0_7_123)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32318 (* ?x30728 l_0_7_122)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32316 (* ?x30725 l_0_7_121)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32314 (* ?x30722 l_0_7_120)))
 (let ((?x32321 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_119) ?x32314) ?x32316) ?x32318) ?x32320)))
 (let ((?x32335 (+ (+ (+ (+ (+ (+ (- ?x32321 ?x32322) ?x32324) ?x32326) ?x32328) ?x32330) ?x32332) ?x32334)))
 (= ?x32335 0.0))))))))))))))))))))))))))
(assert
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32475 (* ?x30752 l_0_7_177)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32473 (* ?x30749 l_0_7_176)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32471 (* ?x30746 l_0_7_175)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32469 (* ?x30743 l_0_7_174)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32467 (* ?x30740 l_0_7_173)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32465 (* ?x30737 l_0_7_172)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32463 (* ?x30734 l_0_7_132)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32444 (* ?x30731 l_0_7_131)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32440 (* ?x30728 l_0_7_130)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32436 (* ?x30725 l_0_7_129)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32432 (* ?x30722 l_0_7_128)))
 (let ((?x32445 (- (- (- (- (* (* (- 2.0) l_0_7_106) l_0_7_127) ?x32432) ?x32436) ?x32440) ?x32444)))
 (let ((?x32476 (+ (+ (+ (+ (+ (+ (- ?x32445 ?x32463) ?x32465) ?x32467) ?x32469) ?x32471) ?x32473) ?x32475)))
 (= ?x32476 0.0))))))))))))))))))))))))))
(assert
 (let ((?x35566 (* l_0_7_163 l_0_7_163)))
 (let ((?x35564 (* l_0_7_162 l_0_7_162)))
 (let ((?x35562 (* l_0_7_161 l_0_7_161)))
 (let ((?x35560 (* l_0_7_160 l_0_7_160)))
 (let ((?x35558 (* l_0_7_159 l_0_7_159)))
 (let ((?x35556 (* l_0_7_158 l_0_7_158)))
 (let ((?x35554 (* l_0_7_157 l_0_7_157)))
 (let ((?x35552 (* l_0_7_118 l_0_7_118)))
 (let ((?x35550 (* l_0_7_117 l_0_7_117)))
 (let ((?x35548 (* l_0_7_116 l_0_7_116)))
 (let ((?x35546 (* l_0_7_115 l_0_7_115)))
 (let ((?x35544 (* l_0_7_114 l_0_7_114)))
 (let ((?x35545 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35544)))
 (let ((?x35559 (+ (+ (+ (- (- (- (- ?x35545 ?x35546) ?x35548) ?x35550) ?x35552) ?x35554) ?x35556) ?x35558)))
 (= (+ (+ (+ (+ ?x35559 ?x35560) ?x35562) ?x35564) ?x35566) 0.0))))))))))))))))
(assert
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35631 (* ?x35630 l_0_7_170)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35628 (* ?x35627 l_0_7_169)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35625 (* ?x35624 l_0_7_168)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35622 (* ?x35621 l_0_7_167)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35619 (* ?x35618 l_0_7_166)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35616 (* ?x35615 l_0_7_165)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35613 (* ?x35612 l_0_7_164)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35610 (* ?x35609 l_0_7_125)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35607 (* ?x35606 l_0_7_124)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35604 (* ?x35603 l_0_7_123)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35601 (* ?x35600 l_0_7_122)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35598 (* ?x34773 l_0_7_121)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35596 (* ?x34770 l_0_7_120)))
 (let ((?x35605 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_119) ?x35596) ?x35598) ?x35601) ?x35604)))
 (let ((?x35626 (+ (+ (+ (+ (+ (- (- ?x35605 ?x35607) ?x35610) ?x35613) ?x35616) ?x35619) ?x35622) ?x35625)))
 (= (+ (+ ?x35626 ?x35628) ?x35631) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x35178 (* ?x34050 l_0_7_98)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x35176 (* ?x34047 l_0_7_97)))
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35706 (* ?x35630 l_0_7_178)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35704 (* ?x35627 l_0_7_177)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35702 (* ?x35624 l_0_7_176)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35700 (* ?x35621 l_0_7_175)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35698 (* ?x35618 l_0_7_174)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35696 (* ?x35615 l_0_7_173)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35694 (* ?x35612 l_0_7_172)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35172 (* ?x30982 l_0_7_143)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35170 (* ?x30979 l_0_7_142)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35690 (* ?x35609 l_0_7_133)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35688 (* ?x35606 l_0_7_132)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35676 (* ?x35603 l_0_7_131)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35673 (* ?x35600 l_0_7_130)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35669 (* ?x34773 l_0_7_129)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35665 (* ?x34770 l_0_7_128)))
 (let ((?x35687 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_127) ?x35665) ?x35669) ?x35673) ?x35676)))
 (let ((?x35691 (- (- ?x35687 ?x35688) ?x35690)))
 (let ((?x35703 (+ (+ (+ (+ (+ (+ (+ ?x35691 ?x35170) ?x35172) ?x35694) ?x35696) ?x35698) ?x35700) ?x35702)))
 (= (- (- (+ (+ ?x35703 ?x35704) ?x35706) ?x35176) ?x35178) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x35799 (* l_0_7_171 l_0_7_171)))
 (let ((?x35797 (* l_0_7_170 l_0_7_170)))
 (let ((?x35795 (* l_0_7_169 l_0_7_169)))
 (let ((?x35793 (* l_0_7_168 l_0_7_168)))
 (let ((?x35791 (* l_0_7_167 l_0_7_167)))
 (let ((?x35789 (* l_0_7_166 l_0_7_166)))
 (let ((?x35787 (* l_0_7_165 l_0_7_165)))
 (let ((?x35785 (* l_0_7_164 l_0_7_164)))
 (let ((?x35783 (* l_0_7_126 l_0_7_126)))
 (let ((?x35781 (* l_0_7_125 l_0_7_125)))
 (let ((?x35779 (* l_0_7_124 l_0_7_124)))
 (let ((?x35777 (* l_0_7_123 l_0_7_123)))
 (let ((?x35775 (* l_0_7_122 l_0_7_122)))
 (let ((?x35773 (* l_0_7_121 l_0_7_121)))
 (let ((?x35774 (- (- (* (- l_0_7_119) l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35773)))
 (let ((?x35788 (+ (+ (- (- (- (- (- ?x35774 ?x35775) ?x35777) ?x35779) ?x35781) ?x35783) ?x35785) ?x35787)))
 (= (+ (+ (+ (+ (+ (+ ?x35788 ?x35789) ?x35791) ?x35793) ?x35795) ?x35797) ?x35799) 0.0))))))))))))))))))
(assert
 (let ((?x35869 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35866 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35863 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35860 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35857 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35854 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35851 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35848 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35845 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35842 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35839 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35836 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35833 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35830 (* ?x34889 l_0_7_129)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35828 (* ?x34886 l_0_7_128)))
 (let ((?x35837 (- (- (- (- (* (* (- 2.0) l_0_7_119) l_0_7_127) ?x35828) ?x35830) ?x35833) ?x35836)))
 (let ((?x35858 (+ (+ (+ (+ (- (- (- ?x35837 ?x35839) ?x35842) ?x35845) ?x35848) ?x35851) ?x35854) ?x35857)))
 (= (+ (+ (+ (+ ?x35858 ?x35860) ?x35863) ?x35866) ?x35869) 0.0)))))))))))))))))))))
(assert
 (let ((?x35951 (* l_0_7_180 l_0_7_180)))
 (let ((?x35949 (* l_0_7_179 l_0_7_179)))
 (let ((?x35947 (* l_0_7_178 l_0_7_178)))
 (let ((?x35945 (* l_0_7_177 l_0_7_177)))
 (let ((?x35943 (* l_0_7_176 l_0_7_176)))
 (let ((?x35941 (* l_0_7_175 l_0_7_175)))
 (let ((?x35939 (* l_0_7_174 l_0_7_174)))
 (let ((?x35937 (* l_0_7_173 l_0_7_173)))
 (let ((?x35935 (* l_0_7_172 l_0_7_172)))
 (let ((?x35933 (* l_0_7_135 l_0_7_135)))
 (let ((?x35931 (* l_0_7_134 l_0_7_134)))
 (let ((?x35929 (* l_0_7_133 l_0_7_133)))
 (let ((?x35927 (* l_0_7_132 l_0_7_132)))
 (let ((?x35914 (* l_0_7_131 l_0_7_131)))
 (let ((?x35911 (* l_0_7_130 l_0_7_130)))
 (let ((?x35907 (* l_0_7_129 l_0_7_129)))
 (let ((?x35909 (- (- (* (- l_0_7_127) l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35907)))
 (let ((?x35936 (+ (- (- (- (- (- (- ?x35909 ?x35911) ?x35914) ?x35927) ?x35929) ?x35931) ?x35933) ?x35935)))
 (let ((?x35950 (+ (+ (+ (+ (+ (+ (+ ?x35936 ?x35937) ?x35939) ?x35941) ?x35943) ?x35945) ?x35947) ?x35949)))
 (= (+ ?x35950 ?x35951) 0.0)))))))))))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x35128 (* ?x33757 l_0_7_92)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_137) ?x35128) 0.0))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x22561 (* ?x33757 l_0_7_97)))
 (= (- (* (* 2.0 l_0_7_136) l_0_7_142) ?x22561) 0.0))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x32729 (* ?x30799 l_0_7_146)))
 (= (+ (* (* (- 2.0) l_0_7_101) l_0_7_91) ?x32729) 0.0))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35157 (* ?x30799 l_0_7_157)))
 (= (+ (* (* (- 2.0) l_0_7_112) l_0_7_91) ?x35157) 0.0))))
(assert
 (let ((?x34808 (* 2.0 l_0_7_253)))
 (let ((?x22022 (* ?x34808 l_0_7_268)))
 (let ((?x34805 (* 2.0 l_0_7_252)))
 (let ((?x22010 (* ?x34805 l_0_7_267)))
 (let ((?x34802 (* 2.0 l_0_7_251)))
 (let ((?x21998 (* ?x34802 l_0_7_266)))
 (let ((?x34799 (* 2.0 l_0_7_250)))
 (let ((?x21986 (* ?x34799 l_0_7_265)))
 (let ((?x34795 (* 2.0 l_0_7_249)))
 (let ((?x22122 (* ?x34795 l_0_7_264)))
 (let ((?x34792 (* 2.0 l_0_7_248)))
 (let ((?x22152 (* ?x34792 l_0_7_263)))
 (let ((?x34789 (* 2.0 l_0_7_247)))
 (let ((?x22158 (* ?x34789 l_0_7_262)))
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35706 (* ?x35630 l_0_7_178)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35704 (* ?x35627 l_0_7_177)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35702 (* ?x35624 l_0_7_176)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35700 (* ?x35621 l_0_7_175)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35698 (* ?x35618 l_0_7_174)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35696 (* ?x35615 l_0_7_173)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35694 (* ?x35612 l_0_7_172)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35164 (* ?x30799 l_0_7_164)))
 (let ((?x34884 (* 2.0 l_0_7_119)))
 (let ((?x36002 (* ?x34884 l_0_7_91)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35690 (* ?x35609 l_0_7_133)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35688 (* ?x35606 l_0_7_132)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35676 (* ?x35603 l_0_7_131)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35673 (* ?x35600 l_0_7_130)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35669 (* ?x34773 l_0_7_129)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35665 (* ?x34770 l_0_7_128)))
 (let ((?x35999 (+ (+ (+ (+ (* (* 2.0 l_0_7_112) l_0_7_127) ?x35665) ?x35669) ?x35673) ?x35676)))
 (let ((?x36007 (- (- (- (+ (- (+ (+ ?x35999 ?x35688) ?x35690) ?x36002) ?x35164) ?x35694) ?x35696) ?x35698)))
 (let ((?x36014 (+ (+ (+ (- (- (- (- ?x36007 ?x35700) ?x35702) ?x35704) ?x35706) ?x22158) ?x22152) ?x22122)))
 (= (+ (+ (+ (+ ?x36014 ?x21986) ?x21998) ?x22010) ?x22022) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x22676 (* ?x30799 l_0_7_172)))
 (= (+ (* (* (- 2.0) l_0_7_127) l_0_7_91) ?x22676) 0.0))))
(assert
 (let ((?x35200 (* l_0_7_93 l_0_7_93)))
 (let ((?x35198 (* l_0_7_92 l_0_7_92)))
 (let ((?x35192 (* l_0_7_138 l_0_7_138)))
 (let ((?x22563 (* l_0_7_137 l_0_7_137)))
 (let ((?x35193 (+ ?x22563 ?x35192)))
 (= (- (- ?x35193 ?x35198) ?x35200) 0.0)))))))
(assert
 (let ((?x34050 (* 2.0 l_0_7_93)))
 (let ((?x34051 (* ?x34050 l_0_7_95)))
 (let ((?x34047 (* 2.0 l_0_7_92)))
 (let ((?x34048 (* ?x34047 l_0_7_94)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x34035 (* ?x30982 l_0_7_140)))
 (= (- (- (+ (* (* 2.0 l_0_7_137) l_0_7_139) ?x34035) ?x34048) ?x34051) 0.0))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x32872 (* ?x30982 l_0_7_147)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x32870 (* ?x30979 l_0_7_146)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32868 (* ?x31722 l_0_7_93)))
 (let ((?x32873 (+ (+ (- (* (* (- 2.0) l_0_7_101) l_0_7_92) ?x32868) ?x32870) ?x32872)))
 (= ?x32873 0.0)))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35232 (* ?x30982 l_0_7_158)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35230 (* ?x30979 l_0_7_157)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35228 (* ?x34770 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_112) l_0_7_92) ?x35228) ?x35230) ?x35232) 0.0))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35250 (* ?x30982 l_0_7_165)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35248 (* ?x30979 l_0_7_164)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35241 (* ?x34886 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_119) l_0_7_92) ?x35241) ?x35248) ?x35250) 0.0))))))))
(assert
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35273 (* ?x30982 l_0_7_173)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35271 (* ?x30979 l_0_7_172)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35264 (* ?x34972 l_0_7_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_7_127) l_0_7_92) ?x35264) ?x35271) ?x35273) 0.0))))))))
(assert
 (let ((?x34283 (* l_0_7_96 l_0_7_96)))
 (let ((?x34281 (* l_0_7_95 l_0_7_95)))
 (let ((?x34279 (* l_0_7_94 l_0_7_94)))
 (let ((?x34261 (* l_0_7_141 l_0_7_141)))
 (let ((?x35288 (- (+ (+ (* l_0_7_139 l_0_7_139) (* l_0_7_140 l_0_7_140)) ?x34261) ?x34279)))
 (= (- (- ?x35288 ?x34281) ?x34283) 0.0)))))))
(assert
 (let ((?x34469 (* (* 2.0 l_0_7_96) l_0_7_99)))
 (let ((?x34466 (* (* 2.0 l_0_7_95) l_0_7_98)))
 (let ((?x34463 (* (* 2.0 l_0_7_94) l_0_7_97)))
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x20677 (* ?x31220 l_0_7_144)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x20679 (* ?x31217 l_0_7_143)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x20700 (* ?x31214 l_0_7_142)))
 (= (- (- (- (+ (+ ?x20700 ?x20679) ?x20677) ?x34463) ?x34466) ?x34469) 0.0)))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x32903 (* ?x31220 l_0_7_148)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x32901 (* ?x31217 l_0_7_147)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x32899 (* ?x31214 l_0_7_146)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x32897 (* ?x31727 l_0_7_96)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32895 (* ?x31722 l_0_7_95)))
 (let ((?x32902 (+ (+ (- (- (* (* (- 2.0) l_0_7_101) l_0_7_94) ?x32895) ?x32897) ?x32899) ?x32901)))
 (let ((?x32904 (+ ?x32902 ?x32903)))
 (= ?x32904 0.0))))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34780 (* ?x31220 l_0_7_159)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34778 (* ?x31217 l_0_7_158)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34776 (* ?x31214 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x34774 (* ?x34773 l_0_7_96)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x34771 (* ?x34770 l_0_7_95)))
 (let ((?x35315 (+ (+ (- (- (* (* (- 2.0) l_0_7_112) l_0_7_94) ?x34771) ?x34774) ?x34776) ?x34778)))
 (= (+ ?x35315 ?x34780) 0.0)))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34896 (* ?x31220 l_0_7_166)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34894 (* ?x31217 l_0_7_165)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34892 (* ?x31214 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x34890 (* ?x34889 l_0_7_96)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x34887 (* ?x34886 l_0_7_95)))
 (let ((?x35333 (+ (+ (- (- (* (* (- 2.0) l_0_7_119) l_0_7_94) ?x34887) ?x34890) ?x34892) ?x34894)))
 (= (+ ?x35333 ?x34896) 0.0)))))))))))))
(assert
 (let ((?x31220 (* 2.0 l_0_7_141)))
 (let ((?x34982 (* ?x31220 l_0_7_174)))
 (let ((?x31217 (* 2.0 l_0_7_140)))
 (let ((?x34980 (* ?x31217 l_0_7_173)))
 (let ((?x31214 (* 2.0 l_0_7_139)))
 (let ((?x34978 (* ?x31214 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x34976 (* ?x34975 l_0_7_96)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x34973 (* ?x34972 l_0_7_95)))
 (let ((?x35351 (+ (+ (- (- (* (* (- 2.0) l_0_7_127) l_0_7_94) ?x34973) ?x34976) ?x34978) ?x34980)))
 (= (+ ?x35351 ?x34982) 0.0)))))))))))))
(assert
 (let ((?x35377 (* l_0_7_99 l_0_7_99)))
 (let ((?x35375 (* l_0_7_98 l_0_7_98)))
 (let ((?x35373 (* l_0_7_97 l_0_7_97)))
 (let ((?x35371 (* l_0_7_145 l_0_7_145)))
 (let ((?x35369 (* l_0_7_144 l_0_7_144)))
 (let ((?x35367 (* l_0_7_143 l_0_7_143)))
 (let ((?x35368 (+ (+ (* (- l_0_7_100) l_0_7_100) (* l_0_7_142 l_0_7_142)) ?x35367)))
 (= (- (- (- (+ (+ ?x35368 ?x35369) ?x35371) ?x35373) ?x35375) ?x35377) 0.0)))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35419 (* ?x31480 l_0_7_160)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35417 (* ?x31477 l_0_7_159)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35415 (* ?x31474 l_0_7_158)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35413 (* ?x31471 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35411 (* ?x34773 l_0_7_99)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35409 (* ?x34770 l_0_7_98)))
 (let ((?x34768 (* 2.0 l_0_7_112)))
 (let ((?x35407 (* ?x34768 l_0_7_97)))
 (let ((?x35414 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_115) ?x35407) ?x35409) ?x35411) ?x35413)))
 (= (+ (+ (+ ?x35414 ?x35415) ?x35417) ?x35419) 0.0)))))))))))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35457 (* ?x31480 l_0_7_167)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35455 (* ?x31477 l_0_7_166)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35453 (* ?x31474 l_0_7_165)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35451 (* ?x31471 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35449 (* ?x34889 l_0_7_99)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35440 (* ?x34886 l_0_7_98)))
 (let ((?x34884 (* 2.0 l_0_7_119)))
 (let ((?x35436 (* ?x34884 l_0_7_97)))
 (let ((?x35452 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_122) ?x35436) ?x35440) ?x35449) ?x35451)))
 (= (+ (+ (+ ?x35452 ?x35453) ?x35455) ?x35457) 0.0)))))))))))))))))
(assert
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35499 (* ?x31480 l_0_7_175)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35497 (* ?x31477 l_0_7_174)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35495 (* ?x31474 l_0_7_173)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35493 (* ?x31471 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x35491 (* ?x34975 l_0_7_99)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35482 (* ?x34972 l_0_7_98)))
 (let ((?x22358 (* 2.0 l_0_7_127)))
 (let ((?x35478 (* ?x22358 l_0_7_97)))
 (let ((?x35494 (+ (- (- (- (* (* (- 2.0) l_0_7_100) l_0_7_130) ?x35478) ?x35482) ?x35491) ?x35493)))
 (= (+ (+ (+ ?x35494 ?x35495) ?x35497) ?x35499) 0.0)))))))))))))))))
(assert
 (let ((?x32976 (* l_0_7_150 l_0_7_150)))
 (let ((?x32974 (* l_0_7_149 l_0_7_149)))
 (let ((?x32972 (* l_0_7_148 l_0_7_148)))
 (let ((?x32970 (* l_0_7_147 l_0_7_147)))
 (let ((?x32968 (* l_0_7_146 l_0_7_146)))
 (let ((?x32963 (* l_0_7_105 l_0_7_105)))
 (let ((?x32961 (* l_0_7_104 l_0_7_104)))
 (let ((?x32959 (* l_0_7_103 l_0_7_103)))
 (let ((?x32960 (- (- (* (- l_0_7_101) l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x32959)))
 (let ((?x32964 (- (- ?x32960 ?x32961) ?x32963)))
 (= (+ (+ (+ (+ (+ ?x32964 ?x32968) ?x32970) ?x32972) ?x32974) ?x32976) 0.0))))))))))))
(assert
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33027 (* ?x31766 l_0_7_161)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33025 (* ?x31761 l_0_7_160)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33023 (* ?x31758 l_0_7_159)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33021 (* ?x31755 l_0_7_158)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33019 (* ?x31752 l_0_7_157)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33017 (* ?x31741 l_0_7_116)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33015 (* ?x31738 l_0_7_115)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33013 (* ?x31727 l_0_7_114)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33011 (* ?x31722 l_0_7_113)))
 (let ((?x33018 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_112) ?x33011) ?x33013) ?x33015) ?x33017)))
 (let ((?x33028 (+ (+ (+ (+ (+ ?x33018 ?x33019) ?x33021) ?x33023) ?x33025) ?x33027)))
 (= ?x33028 0.0))))))))))))))))))))))
(assert
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33074 (* ?x31766 l_0_7_168)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33072 (* ?x31761 l_0_7_167)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33070 (* ?x31758 l_0_7_166)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33068 (* ?x31755 l_0_7_165)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33066 (* ?x31752 l_0_7_164)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33064 (* ?x31741 l_0_7_123)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33062 (* ?x31738 l_0_7_122)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33060 (* ?x31727 l_0_7_121)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33058 (* ?x31722 l_0_7_120)))
 (let ((?x33065 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_119) ?x33058) ?x33060) ?x33062) ?x33064)))
 (let ((?x33075 (+ (+ (+ (+ (+ ?x33065 ?x33066) ?x33068) ?x33070) ?x33072) ?x33074)))
 (= ?x33075 0.0))))))))))))))))))))))
(assert
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33138 (* ?x31766 l_0_7_176)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33136 (* ?x31761 l_0_7_175)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33134 (* ?x31758 l_0_7_174)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33132 (* ?x31755 l_0_7_173)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33130 (* ?x31752 l_0_7_172)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33128 (* ?x31741 l_0_7_131)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33126 (* ?x31738 l_0_7_130)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33124 (* ?x31727 l_0_7_129)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33122 (* ?x31722 l_0_7_128)))
 (let ((?x33129 (- (- (- (- (* (* (- 2.0) l_0_7_101) l_0_7_127) ?x33122) ?x33124) ?x33126) ?x33128)))
 (let ((?x33139 (+ (+ (+ (+ (+ ?x33129 ?x33130) ?x33132) ?x33134) ?x33136) ?x33138)))
 (= ?x33139 0.0))))))))))))))))))))))
(assert
 (let ((?x35566 (* l_0_7_163 l_0_7_163)))
 (let ((?x35564 (* l_0_7_162 l_0_7_162)))
 (let ((?x35562 (* l_0_7_161 l_0_7_161)))
 (let ((?x35560 (* l_0_7_160 l_0_7_160)))
 (let ((?x35558 (* l_0_7_159 l_0_7_159)))
 (let ((?x35556 (* l_0_7_158 l_0_7_158)))
 (let ((?x35554 (* l_0_7_157 l_0_7_157)))
 (let ((?x35552 (* l_0_7_118 l_0_7_118)))
 (let ((?x35550 (* l_0_7_117 l_0_7_117)))
 (let ((?x35548 (* l_0_7_116 l_0_7_116)))
 (let ((?x35546 (* l_0_7_115 l_0_7_115)))
 (let ((?x35544 (* l_0_7_114 l_0_7_114)))
 (let ((?x35545 (- (- (* (- l_0_7_112) l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35544)))
 (let ((?x35559 (+ (+ (+ (- (- (- (- ?x35545 ?x35546) ?x35548) ?x35550) ?x35552) ?x35554) ?x35556) ?x35558)))
 (= (+ (+ (+ (+ ?x35559 ?x35560) ?x35562) ?x35564) ?x35566) 0.0))))))))))))))))
(assert
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35631 (* ?x35630 l_0_7_170)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35628 (* ?x35627 l_0_7_169)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35625 (* ?x35624 l_0_7_168)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35622 (* ?x35621 l_0_7_167)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35619 (* ?x35618 l_0_7_166)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35616 (* ?x35615 l_0_7_165)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35613 (* ?x35612 l_0_7_164)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35610 (* ?x35609 l_0_7_125)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35607 (* ?x35606 l_0_7_124)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35604 (* ?x35603 l_0_7_123)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35601 (* ?x35600 l_0_7_122)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35598 (* ?x34773 l_0_7_121)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35596 (* ?x34770 l_0_7_120)))
 (let ((?x35605 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_119) ?x35596) ?x35598) ?x35601) ?x35604)))
 (let ((?x35626 (+ (+ (+ (+ (+ (- (- ?x35605 ?x35607) ?x35610) ?x35613) ?x35616) ?x35619) ?x35622) ?x35625)))
 (= (+ (+ ?x35626 ?x35628) ?x35631) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35706 (* ?x35630 l_0_7_178)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35704 (* ?x35627 l_0_7_177)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35702 (* ?x35624 l_0_7_176)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35700 (* ?x35621 l_0_7_175)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35698 (* ?x35618 l_0_7_174)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35696 (* ?x35615 l_0_7_173)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35694 (* ?x35612 l_0_7_172)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35690 (* ?x35609 l_0_7_133)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35688 (* ?x35606 l_0_7_132)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35676 (* ?x35603 l_0_7_131)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35673 (* ?x35600 l_0_7_130)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35669 (* ?x34773 l_0_7_129)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35665 (* ?x34770 l_0_7_128)))
 (let ((?x35687 (- (- (- (- (* (* (- 2.0) l_0_7_112) l_0_7_127) ?x35665) ?x35669) ?x35673) ?x35676)))
 (let ((?x35691 (- (- ?x35687 ?x35688) ?x35690)))
 (let ((?x36073 (+ (+ (+ (+ (+ (+ (+ ?x35691 ?x35694) ?x35696) ?x35698) ?x35700) ?x35702) ?x35704) ?x35706)))
 (= ?x36073 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x35799 (* l_0_7_171 l_0_7_171)))
 (let ((?x35797 (* l_0_7_170 l_0_7_170)))
 (let ((?x35795 (* l_0_7_169 l_0_7_169)))
 (let ((?x35793 (* l_0_7_168 l_0_7_168)))
 (let ((?x35791 (* l_0_7_167 l_0_7_167)))
 (let ((?x35789 (* l_0_7_166 l_0_7_166)))
 (let ((?x35787 (* l_0_7_165 l_0_7_165)))
 (let ((?x35785 (* l_0_7_164 l_0_7_164)))
 (let ((?x35783 (* l_0_7_126 l_0_7_126)))
 (let ((?x35781 (* l_0_7_125 l_0_7_125)))
 (let ((?x35779 (* l_0_7_124 l_0_7_124)))
 (let ((?x35777 (* l_0_7_123 l_0_7_123)))
 (let ((?x35775 (* l_0_7_122 l_0_7_122)))
 (let ((?x35773 (* l_0_7_121 l_0_7_121)))
 (let ((?x35774 (- (- (* (- l_0_7_119) l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35773)))
 (let ((?x35788 (+ (+ (- (- (- (- (- ?x35774 ?x35775) ?x35777) ?x35779) ?x35781) ?x35783) ?x35785) ?x35787)))
 (= (+ (+ (+ (+ (+ (+ ?x35788 ?x35789) ?x35791) ?x35793) ?x35795) ?x35797) ?x35799) 0.0))))))))))))))))))
(assert
 (let ((?x35869 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35866 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35863 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35860 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35857 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35854 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35851 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35848 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35845 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35842 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35839 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35836 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35833 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35830 (* ?x34889 l_0_7_129)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35828 (* ?x34886 l_0_7_128)))
 (let ((?x35837 (- (- (- (- (* (* (- 2.0) l_0_7_119) l_0_7_127) ?x35828) ?x35830) ?x35833) ?x35836)))
 (let ((?x35858 (+ (+ (+ (+ (- (- (- ?x35837 ?x35839) ?x35842) ?x35845) ?x35848) ?x35851) ?x35854) ?x35857)))
 (= (+ (+ (+ (+ ?x35858 ?x35860) ?x35863) ?x35866) ?x35869) 0.0)))))))))))))))))))))
(assert
 (let ((?x35951 (* l_0_7_180 l_0_7_180)))
 (let ((?x35949 (* l_0_7_179 l_0_7_179)))
 (let ((?x35947 (* l_0_7_178 l_0_7_178)))
 (let ((?x35945 (* l_0_7_177 l_0_7_177)))
 (let ((?x35943 (* l_0_7_176 l_0_7_176)))
 (let ((?x35941 (* l_0_7_175 l_0_7_175)))
 (let ((?x35939 (* l_0_7_174 l_0_7_174)))
 (let ((?x35937 (* l_0_7_173 l_0_7_173)))
 (let ((?x35935 (* l_0_7_172 l_0_7_172)))
 (let ((?x35933 (* l_0_7_135 l_0_7_135)))
 (let ((?x35931 (* l_0_7_134 l_0_7_134)))
 (let ((?x35929 (* l_0_7_133 l_0_7_133)))
 (let ((?x35927 (* l_0_7_132 l_0_7_132)))
 (let ((?x35914 (* l_0_7_131 l_0_7_131)))
 (let ((?x35911 (* l_0_7_130 l_0_7_130)))
 (let ((?x35907 (* l_0_7_129 l_0_7_129)))
 (let ((?x35909 (- (- (* (- l_0_7_127) l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35907)))
 (let ((?x35936 (+ (- (- (- (- (- (- ?x35909 ?x35911) ?x35914) ?x35927) ?x35929) ?x35931) ?x35933) ?x35935)))
 (let ((?x35950 (+ (+ (+ (+ (+ (+ (+ ?x35936 ?x35937) ?x35939) ?x35941) ?x35943) ?x35945) ?x35947) ?x35949)))
 (= (+ ?x35950 ?x35951) 0.0)))))))))))))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x35128 (* ?x33757 l_0_7_92)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33332 (* ?x33331 l_0_7_227)))
 (let ((?x36080 (- (* (* (- 2.0) l_0_7_136) l_0_7_137) (* (* 2.0 l_0_7_182) l_0_7_209))))
 (let ((?x36085 (- (+ (- ?x36080 (* (* 2.0 l_0_7_183) l_0_7_210)) ?x33332) (* (* 2.0 l_0_7_272) l_0_7_299))))
 (let ((?x36089 (- (- ?x36085 (* (* 2.0 l_0_7_273) l_0_7_300)) (* (* 2.0 l_0_7_317) l_0_7_344))))
 (let ((?x36093 (- (- ?x36089 (* (* 2.0 l_0_7_318) l_0_7_345)) (* (* 2.0 l_0_7_362) l_0_7_389))))
 (= (+ (- ?x36093 (* (* 2.0 l_0_7_363) l_0_7_390)) ?x35128) 0.0))))))))))
(assert
 (let ((?x33757 (* 2.0 l_0_7_91)))
 (let ((?x22561 (* ?x33757 l_0_7_97)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33425 (* ?x33331 l_0_7_232)))
 (let ((?x36152 (- (* (* (- 2.0) l_0_7_136) l_0_7_142) (* (* 2.0 l_0_7_187) l_0_7_209))))
 (let ((?x36156 (- (- ?x36152 (* (* 2.0 l_0_7_188) l_0_7_210)) (* (* 2.0 l_0_7_189) l_0_7_211))))
 (let ((?x36161 (- (+ (- ?x36156 (* (* 2.0 l_0_7_190) l_0_7_212)) ?x33425) (* (* 2.0 l_0_7_277) l_0_7_299))))
 (let ((?x36165 (- (- ?x36161 (* (* 2.0 l_0_7_278) l_0_7_300)) (* (* 2.0 l_0_7_279) l_0_7_301))))
 (let ((?x36169 (- (- ?x36165 (* (* 2.0 l_0_7_280) l_0_7_302)) (* (* 2.0 l_0_7_322) l_0_7_344))))
 (let ((?x36173 (- (- ?x36169 (* (* 2.0 l_0_7_323) l_0_7_345)) (* (* 2.0 l_0_7_324) l_0_7_346))))
 (let ((?x36177 (- (- ?x36173 (* (* 2.0 l_0_7_325) l_0_7_347)) (* (* 2.0 l_0_7_367) l_0_7_389))))
 (let ((?x36181 (- (- ?x36177 (* (* 2.0 l_0_7_368) l_0_7_390)) (* (* 2.0 l_0_7_369) l_0_7_391))))
 (= (+ (- ?x36181 (* (* 2.0 l_0_7_370) l_0_7_392)) ?x22561) 0.0))))))))))))))
(assert
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33501 (* ?x33331 l_0_7_236)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x32729 (* ?x30799 l_0_7_146)))
 (let ((?x32724 (* 2.0 l_0_7_101)))
 (let ((?x32727 (* ?x32724 l_0_7_91)))
 (let ((?x36277 (- (- (- ?x32727 ?x32729) (* (* 2.0 l_0_7_191) l_0_7_209)) (* (* 2.0 l_0_7_192) l_0_7_210))))
 (let ((?x36283 (- (- ?x36277 (* (* 2.0 l_0_7_193) l_0_7_211)) (* (* 2.0 l_0_7_194) l_0_7_212))))
 (let ((?x36290 (- (+ (- ?x36283 (* (* 2.0 l_0_7_195) l_0_7_213)) ?x33501) (* (* 2.0 l_0_7_281) l_0_7_299))))
 (let ((?x36296 (- (- ?x36290 (* (* 2.0 l_0_7_282) l_0_7_300)) (* (* 2.0 l_0_7_283) l_0_7_301))))
 (let ((?x36302 (- (- ?x36296 (* (* 2.0 l_0_7_284) l_0_7_302)) (* (* 2.0 l_0_7_285) l_0_7_303))))
 (let ((?x36308 (- (- ?x36302 (* (* 2.0 l_0_7_326) l_0_7_344)) (* (* 2.0 l_0_7_327) l_0_7_345))))
 (let ((?x36314 (- (- ?x36308 (* (* 2.0 l_0_7_328) l_0_7_346)) (* (* 2.0 l_0_7_329) l_0_7_347))))
 (let ((?x36320 (- (- ?x36314 (* (* 2.0 l_0_7_330) l_0_7_348)) (* (* 2.0 l_0_7_371) l_0_7_389))))
 (let ((?x36326 (- (- ?x36320 (* (* 2.0 l_0_7_372) l_0_7_390)) (* (* 2.0 l_0_7_373) l_0_7_391))))
 (let ((?x36332 (- (- ?x36326 (* (* 2.0 l_0_7_374) l_0_7_392)) (* (* 2.0 l_0_7_375) l_0_7_393))))
 (= ?x36332 0.0))))))))))))))))))
(assert
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33566 (* ?x33331 l_0_7_241)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x30800 (* ?x30799 l_0_7_151)))
 (let ((?x30715 (* 2.0 l_0_7_106)))
 (let ((?x17082 (* ?x30715 l_0_7_91)))
 (let ((?x36421 (- (- (- ?x17082 ?x30800) (* (* 2.0 l_0_7_196) l_0_7_209)) (* (* 2.0 l_0_7_197) l_0_7_210))))
 (let ((?x36425 (- (- ?x36421 (* (* 2.0 l_0_7_198) l_0_7_211)) (* (* 2.0 l_0_7_199) l_0_7_212))))
 (let ((?x36429 (- (- ?x36425 (* (* 2.0 l_0_7_200) l_0_7_213)) (* (* 2.0 l_0_7_201) l_0_7_214))))
 (let ((?x36434 (- (- (+ ?x36429 ?x33566) (* (* 2.0 l_0_7_286) l_0_7_299)) (* (* 2.0 l_0_7_287) l_0_7_300))))
 (let ((?x36438 (- (- ?x36434 (* (* 2.0 l_0_7_288) l_0_7_301)) (* (* 2.0 l_0_7_289) l_0_7_302))))
 (let ((?x36442 (- (- ?x36438 (* (* 2.0 l_0_7_290) l_0_7_303)) (* (* 2.0 l_0_7_291) l_0_7_304))))
 (let ((?x36446 (- (- ?x36442 (* (* 2.0 l_0_7_331) l_0_7_344)) (* (* 2.0 l_0_7_332) l_0_7_345))))
 (let ((?x36450 (- (- ?x36446 (* (* 2.0 l_0_7_333) l_0_7_346)) (* (* 2.0 l_0_7_334) l_0_7_347))))
 (let ((?x36454 (- (- ?x36450 (* (* 2.0 l_0_7_335) l_0_7_348)) (* (* 2.0 l_0_7_336) l_0_7_349))))
 (let ((?x36458 (- (- ?x36454 (* (* 2.0 l_0_7_376) l_0_7_389)) (* (* 2.0 l_0_7_377) l_0_7_390))))
 (let ((?x36462 (- (- ?x36458 (* (* 2.0 l_0_7_378) l_0_7_391)) (* (* 2.0 l_0_7_379) l_0_7_392))))
 (let ((?x36466 (- (- ?x36462 (* (* 2.0 l_0_7_380) l_0_7_393)) (* (* 2.0 l_0_7_381) l_0_7_394))))
 (= ?x36466 0.0))))))))))))))))))))
(assert
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33657 (* ?x33331 l_0_7_247)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35157 (* ?x30799 l_0_7_157)))
 (let ((?x36552 (- (- (* (* 2.0 l_0_7_112) l_0_7_91) ?x35157) (* (* 2.0 l_0_7_202) l_0_7_209))))
 (let ((?x36556 (- (- ?x36552 (* (* 2.0 l_0_7_203) l_0_7_210)) (* (* 2.0 l_0_7_204) l_0_7_211))))
 (let ((?x36560 (- (- ?x36556 (* (* 2.0 l_0_7_205) l_0_7_212)) (* (* 2.0 l_0_7_206) l_0_7_213))))
 (let ((?x36564 (- (- ?x36560 (* (* 2.0 l_0_7_207) l_0_7_214)) (* (* 2.0 l_0_7_208) l_0_7_215))))
 (let ((?x36569 (- (- (+ ?x36564 ?x33657) (* (* 2.0 l_0_7_292) l_0_7_299)) (* (* 2.0 l_0_7_293) l_0_7_300))))
 (let ((?x36573 (- (- ?x36569 (* (* 2.0 l_0_7_294) l_0_7_301)) (* (* 2.0 l_0_7_295) l_0_7_302))))
 (let ((?x36577 (- (- ?x36573 (* (* 2.0 l_0_7_296) l_0_7_303)) (* (* 2.0 l_0_7_297) l_0_7_304))))
 (let ((?x36581 (- (- ?x36577 (* (* 2.0 l_0_7_298) l_0_7_305)) (* (* 2.0 l_0_7_337) l_0_7_344))))
 (let ((?x36585 (- (- ?x36581 (* (* 2.0 l_0_7_338) l_0_7_345)) (* (* 2.0 l_0_7_339) l_0_7_346))))
 (let ((?x36589 (- (- ?x36585 (* (* 2.0 l_0_7_340) l_0_7_347)) (* (* 2.0 l_0_7_341) l_0_7_348))))
 (let ((?x36593 (- (- ?x36589 (* (* 2.0 l_0_7_342) l_0_7_349)) (* (* 2.0 l_0_7_343) l_0_7_350))))
 (let ((?x36597 (- (- ?x36593 (* (* 2.0 l_0_7_382) l_0_7_389)) (* (* 2.0 l_0_7_383) l_0_7_390))))
 (let ((?x36601 (- (- ?x36597 (* (* 2.0 l_0_7_384) l_0_7_391)) (* (* 2.0 l_0_7_385) l_0_7_392))))
 (let ((?x36605 (- (- ?x36601 (* (* 2.0 l_0_7_386) l_0_7_393)) (* (* 2.0 l_0_7_387) l_0_7_394))))
 (= (- ?x36605 (* (* 2.0 l_0_7_388) l_0_7_395)) 0.0))))))))))))))))))))
(assert
 (let ((?x36723 (* l_0_7_396 l_0_7_396)))
 (let ((?x36721 (* l_0_7_395 l_0_7_395)))
 (let ((?x36719 (* l_0_7_394 l_0_7_394)))
 (let ((?x36717 (* l_0_7_393 l_0_7_393)))
 (let ((?x36715 (* l_0_7_392 l_0_7_392)))
 (let ((?x36713 (* l_0_7_391 l_0_7_391)))
 (let ((?x36711 (* l_0_7_390 l_0_7_390)))
 (let ((?x36709 (* l_0_7_389 l_0_7_389)))
 (let ((?x36707 (* l_0_7_351 l_0_7_351)))
 (let ((?x36705 (* l_0_7_350 l_0_7_350)))
 (let ((?x36703 (* l_0_7_349 l_0_7_349)))
 (let ((?x36701 (* l_0_7_348 l_0_7_348)))
 (let ((?x36699 (* l_0_7_347 l_0_7_347)))
 (let ((?x36697 (* l_0_7_346 l_0_7_346)))
 (let ((?x36695 (* l_0_7_345 l_0_7_345)))
 (let ((?x36693 (* l_0_7_344 l_0_7_344)))
 (let ((?x36691 (* l_0_7_306 l_0_7_306)))
 (let ((?x36689 (* l_0_7_305 l_0_7_305)))
 (let ((?x36687 (* l_0_7_304 l_0_7_304)))
 (let ((?x36685 (* l_0_7_303 l_0_7_303)))
 (let ((?x36683 (* l_0_7_302 l_0_7_302)))
 (let ((?x36681 (* l_0_7_301 l_0_7_301)))
 (let ((?x36679 (* l_0_7_300 l_0_7_300)))
 (let ((?x36677 (* l_0_7_299 l_0_7_299)))
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33736 (* ?x33331 l_0_7_254)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x35164 (* ?x30799 l_0_7_164)))
 (let ((?x34884 (* 2.0 l_0_7_119)))
 (let ((?x36002 (* ?x34884 l_0_7_91)))
 (let ((?x36657 (- (- (- ?x36002 ?x35164) (* (* 1.0 l_0_7_209) l_0_7_209)) (* (* 1.0 l_0_7_210) l_0_7_210))))
 (let ((?x36663 (- (- ?x36657 (* (* 1.0 l_0_7_211) l_0_7_211)) (* (* 1.0 l_0_7_212) l_0_7_212))))
 (let ((?x36669 (- (- ?x36663 (* (* 1.0 l_0_7_213) l_0_7_213)) (* (* 1.0 l_0_7_214) l_0_7_214))))
 (let ((?x36675 (- (- ?x36669 (* (* 1.0 l_0_7_215) l_0_7_215)) (* (* 1.0 l_0_7_216) l_0_7_216))))
 (let ((?x36688 (- (- (- (- (- (- (+ ?x36675 ?x33736) ?x36677) ?x36679) ?x36681) ?x36683) ?x36685) ?x36687)))
 (let ((?x36702 (- (- (- (- (- (- (- ?x36688 ?x36689) ?x36691) ?x36693) ?x36695) ?x36697) ?x36699) ?x36701)))
 (let ((?x36716 (- (- (- (- (- (- (- ?x36702 ?x36703) ?x36705) ?x36707) ?x36709) ?x36711) ?x36713) ?x36715)))
 (= (- (- (- (- ?x36716 ?x36717) ?x36719) ?x36721) ?x36723) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x33331 (* 2.0 l_0_7_226)))
 (let ((?x33830 (* ?x33331 l_0_7_262)))
 (let ((?x30799 (* 2.0 l_0_7_136)))
 (let ((?x22676 (* ?x30799 l_0_7_172)))
 (let ((?x36770 (- (- (* (* 2.0 l_0_7_127) l_0_7_91) ?x22676) (* (* 2.0 l_0_7_209) l_0_7_217))))
 (let ((?x36776 (- (- ?x36770 (* (* 2.0 l_0_7_210) l_0_7_218)) (* (* 2.0 l_0_7_211) l_0_7_219))))
 (let ((?x36782 (- (- ?x36776 (* (* 2.0 l_0_7_212) l_0_7_220)) (* (* 2.0 l_0_7_213) l_0_7_221))))
 (let ((?x36788 (- (- ?x36782 (* (* 2.0 l_0_7_214) l_0_7_222)) (* (* 2.0 l_0_7_215) l_0_7_223))))
 (let ((?x36795 (- (+ (- ?x36788 (* (* 2.0 l_0_7_216) l_0_7_224)) ?x33830) (* (* 2.0 l_0_7_299) l_0_7_307))))
 (let ((?x36801 (- (- ?x36795 (* (* 2.0 l_0_7_300) l_0_7_308)) (* (* 2.0 l_0_7_301) l_0_7_309))))
 (let ((?x36807 (- (- ?x36801 (* (* 2.0 l_0_7_302) l_0_7_310)) (* (* 2.0 l_0_7_303) l_0_7_311))))
 (let ((?x36813 (- (- ?x36807 (* (* 2.0 l_0_7_304) l_0_7_312)) (* (* 2.0 l_0_7_305) l_0_7_313))))
 (let ((?x36819 (- (- ?x36813 (* (* 2.0 l_0_7_306) l_0_7_314)) (* (* 2.0 l_0_7_344) l_0_7_352))))
 (let ((?x36825 (- (- ?x36819 (* (* 2.0 l_0_7_345) l_0_7_353)) (* (* 2.0 l_0_7_346) l_0_7_354))))
 (let ((?x36831 (- (- ?x36825 (* (* 2.0 l_0_7_347) l_0_7_355)) (* (* 2.0 l_0_7_348) l_0_7_356))))
 (let ((?x36837 (- (- ?x36831 (* (* 2.0 l_0_7_349) l_0_7_357)) (* (* 2.0 l_0_7_350) l_0_7_358))))
 (let ((?x36843 (- (- ?x36837 (* (* 2.0 l_0_7_351) l_0_7_359)) (* (* 2.0 l_0_7_389) l_0_7_397))))
 (let ((?x36849 (- (- ?x36843 (* (* 2.0 l_0_7_390) l_0_7_398)) (* (* 2.0 l_0_7_391) l_0_7_399))))
 (let ((?x36855 (- (- ?x36849 (* (* 2.0 l_0_7_392) l_0_7_400)) (* (* 2.0 l_0_7_393) l_0_7_401))))
 (let ((?x36861 (- (- ?x36855 (* (* 2.0 l_0_7_394) l_0_7_402)) (* (* 2.0 l_0_7_395) l_0_7_403))))
 (= (- ?x36861 (* (* 2.0 l_0_7_396) l_0_7_404)) 0.0))))))))))))))))))))))
(assert
 (let ((?x35200 (* l_0_7_93 l_0_7_93)))
 (let ((?x35198 (* l_0_7_92 l_0_7_92)))
 (let ((?x33905 (* l_0_7_228 l_0_7_228)))
 (let ((?x20248 (* l_0_7_227 l_0_7_227)))
 (let ((?x36942 (+ (- (* (- l_0_7_137) l_0_7_137) (* l_0_7_138 l_0_7_138)) ?x20248)))
 (= (+ (+ (+ ?x36942 ?x33905) ?x35198) ?x35200) 0.0)))))))
(assert
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33972 (* ?x33923 l_0_7_237)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33970 (* ?x20250 l_0_7_236)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x32872 (* ?x30982 l_0_7_147)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x32870 (* ?x30979 l_0_7_146)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x32868 (* ?x31722 l_0_7_93)))
 (let ((?x36954 (+ (- (- (+ (* (* 2.0 l_0_7_101) l_0_7_92) ?x32868) ?x32870) ?x32872) ?x33970)))
 (= (+ ?x36954 ?x33972) 0.0)))))))))))))
(assert
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x33999 (* ?x33923 l_0_7_242)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x33997 (* ?x20250 l_0_7_241)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x30983 (* ?x30982 l_0_7_152)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x30980 (* ?x30979 l_0_7_151)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x30972 (* ?x30722 l_0_7_93)))
 (let ((?x25414 (+ (- (- (+ (* (* 2.0 l_0_7_106) l_0_7_92) ?x30972) ?x30980) ?x30983) ?x33997)))
 (= (+ ?x25414 ?x33999) 0.0)))))))))))))
(assert
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34018 (* ?x33923 l_0_7_248)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x20315 (* ?x20250 l_0_7_247)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35232 (* ?x30982 l_0_7_158)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35230 (* ?x30979 l_0_7_157)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35228 (* ?x34770 l_0_7_93)))
 (let ((?x7750 (+ (- (- (+ (* (* 2.0 l_0_7_112) l_0_7_92) ?x35228) ?x35230) ?x35232) ?x20315)))
 (= (+ ?x7750 ?x34018) 0.0)))))))))))))
(assert
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34042 (* ?x33923 l_0_7_255)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x34039 (* ?x20250 l_0_7_254)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35250 (* ?x30982 l_0_7_165)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35248 (* ?x30979 l_0_7_164)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35241 (* ?x34886 l_0_7_93)))
 (let ((?x36964 (+ (- (- (+ (* (* 2.0 l_0_7_119) l_0_7_92) ?x35241) ?x35248) ?x35250) ?x34039)))
 (= (+ ?x36964 ?x34042) 0.0)))))))))))))
(assert
 (let ((?x33923 (* 2.0 l_0_7_228)))
 (let ((?x34087 (* ?x33923 l_0_7_263)))
 (let ((?x20250 (* 2.0 l_0_7_227)))
 (let ((?x34085 (* ?x20250 l_0_7_262)))
 (let ((?x30982 (* 2.0 l_0_7_138)))
 (let ((?x35273 (* ?x30982 l_0_7_173)))
 (let ((?x30979 (* 2.0 l_0_7_137)))
 (let ((?x35271 (* ?x30979 l_0_7_172)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35264 (* ?x34972 l_0_7_93)))
 (let ((?x36972 (+ (- (- (+ (* (* 2.0 l_0_7_127) l_0_7_92) ?x35264) ?x35271) ?x35273) ?x34085)))
 (= (+ ?x36972 ?x34087) 0.0)))))))))))))
(assert
 (let ((?x35377 (* l_0_7_99 l_0_7_99)))
 (let ((?x35375 (* l_0_7_98 l_0_7_98)))
 (let ((?x35373 (* l_0_7_97 l_0_7_97)))
 (let ((?x34355 (* l_0_7_235 l_0_7_235)))
 (let ((?x34353 (* l_0_7_234 l_0_7_234)))
 (let ((?x34351 (* l_0_7_233 l_0_7_233)))
 (let ((?x34349 (* l_0_7_232 l_0_7_232)))
 (let ((?x35371 (* l_0_7_145 l_0_7_145)))
 (let ((?x35369 (* l_0_7_144 l_0_7_144)))
 (let ((?x35367 (* l_0_7_143 l_0_7_143)))
 (let ((?x25468 (- (- (- (* l_0_7_100 l_0_7_100) (* l_0_7_142 l_0_7_142)) ?x35367) ?x35369)))
 (let ((?x7806 (+ (+ (+ (+ (+ (+ (- ?x25468 ?x35371) ?x34349) ?x34351) ?x34353) ?x34355) ?x35373) ?x35375)))
 (= (+ ?x7806 ?x35377) 0.0))))))))))))))
(assert
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34384 (* ?x32757 l_0_7_244)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x34382 (* ?x32754 l_0_7_243)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x34380 (* ?x32751 l_0_7_242)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x34378 (* ?x32748 l_0_7_241)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x31481 (* ?x31480 l_0_7_154)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x31478 (* ?x31477 l_0_7_153)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x31475 (* ?x31474 l_0_7_152)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x31472 (* ?x31471 l_0_7_151)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x31469 (* ?x30725 l_0_7_99)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x31467 (* ?x30722 l_0_7_98)))
 (let ((?x30715 (* 2.0 l_0_7_106)))
 (let ((?x31458 (* ?x30715 l_0_7_97)))
 (let ((?x31453 (* 2.0 l_0_7_100)))
 (let ((?x31455 (* ?x31453 l_0_7_109)))
 (let ((?x36990 (- (- (- (- (+ (+ (+ ?x31455 ?x31458) ?x31467) ?x31469) ?x31472) ?x31475) ?x31478) ?x31481)))
 (= (+ (+ (+ (+ ?x36990 ?x34378) ?x34380) ?x34382) ?x34384) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34418 (* ?x32757 l_0_7_250)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x34416 (* ?x32754 l_0_7_249)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x34414 (* ?x32751 l_0_7_248)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x34412 (* ?x32748 l_0_7_247)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35419 (* ?x31480 l_0_7_160)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35417 (* ?x31477 l_0_7_159)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35415 (* ?x31474 l_0_7_158)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35413 (* ?x31471 l_0_7_157)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35411 (* ?x34773 l_0_7_99)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35409 (* ?x34770 l_0_7_98)))
 (let ((?x34768 (* 2.0 l_0_7_112)))
 (let ((?x35407 (* ?x34768 l_0_7_97)))
 (let ((?x37008 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_115) ?x35407) ?x35409) ?x35411) ?x35413)))
 (let ((?x37015 (+ (+ (+ (+ (- (- (- ?x37008 ?x35415) ?x35417) ?x35419) ?x34412) ?x34414) ?x34416) ?x34418)))
 (= ?x37015 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34453 (* ?x32757 l_0_7_257)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x20616 (* ?x32754 l_0_7_256)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x20632 (* ?x32751 l_0_7_255)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x20634 (* ?x32748 l_0_7_254)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35457 (* ?x31480 l_0_7_167)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35455 (* ?x31477 l_0_7_166)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35453 (* ?x31474 l_0_7_165)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35451 (* ?x31471 l_0_7_164)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35449 (* ?x34889 l_0_7_99)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35440 (* ?x34886 l_0_7_98)))
 (let ((?x34884 (* 2.0 l_0_7_119)))
 (let ((?x35436 (* ?x34884 l_0_7_97)))
 (let ((?x37021 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_122) ?x35436) ?x35440) ?x35449) ?x35451)))
 (let ((?x37028 (+ (+ (+ (+ (- (- (- ?x37021 ?x35453) ?x35455) ?x35457) ?x20634) ?x20632) ?x20616) ?x34453)))
 (= ?x37028 0.0))))))))))))))))))))))))))
(assert
 (let ((?x32757 (* 2.0 l_0_7_235)))
 (let ((?x34491 (* ?x32757 l_0_7_265)))
 (let ((?x32754 (* 2.0 l_0_7_234)))
 (let ((?x20762 (* ?x32754 l_0_7_264)))
 (let ((?x32751 (* 2.0 l_0_7_233)))
 (let ((?x20793 (* ?x32751 l_0_7_263)))
 (let ((?x32748 (* 2.0 l_0_7_232)))
 (let ((?x20796 (* ?x32748 l_0_7_262)))
 (let ((?x31480 (* 2.0 l_0_7_145)))
 (let ((?x35499 (* ?x31480 l_0_7_175)))
 (let ((?x31477 (* 2.0 l_0_7_144)))
 (let ((?x35497 (* ?x31477 l_0_7_174)))
 (let ((?x31474 (* 2.0 l_0_7_143)))
 (let ((?x35495 (* ?x31474 l_0_7_173)))
 (let ((?x31471 (* 2.0 l_0_7_142)))
 (let ((?x35493 (* ?x31471 l_0_7_172)))
 (let ((?x34975 (* 2.0 l_0_7_129)))
 (let ((?x35491 (* ?x34975 l_0_7_99)))
 (let ((?x34972 (* 2.0 l_0_7_128)))
 (let ((?x35482 (* ?x34972 l_0_7_98)))
 (let ((?x22358 (* 2.0 l_0_7_127)))
 (let ((?x35478 (* ?x22358 l_0_7_97)))
 (let ((?x25579 (- (+ (+ (+ (* (* 2.0 l_0_7_100) l_0_7_130) ?x35478) ?x35482) ?x35491) ?x35493)))
 (let ((?x25531 (+ (+ (+ (+ (- (- (- ?x25579 ?x35495) ?x35497) ?x35499) ?x20796) ?x20793) ?x20762) ?x34491)))
 (= ?x25531 0.0))))))))))))))))))))))))))
(assert
 (let ((?x34524 (* l_0_7_240 l_0_7_240)))
 (let ((?x34522 (* l_0_7_239 l_0_7_239)))
 (let ((?x34520 (* l_0_7_238 l_0_7_238)))
 (let ((?x34518 (* l_0_7_237 l_0_7_237)))
 (let ((?x34516 (* l_0_7_236 l_0_7_236)))
 (let ((?x32976 (* l_0_7_150 l_0_7_150)))
 (let ((?x32974 (* l_0_7_149 l_0_7_149)))
 (let ((?x32972 (* l_0_7_148 l_0_7_148)))
 (let ((?x32970 (* l_0_7_147 l_0_7_147)))
 (let ((?x32968 (* l_0_7_146 l_0_7_146)))
 (let ((?x32963 (* l_0_7_105 l_0_7_105)))
 (let ((?x32961 (* l_0_7_104 l_0_7_104)))
 (let ((?x32959 (* l_0_7_103 l_0_7_103)))
 (let ((?x25623 (+ (+ (+ (* l_0_7_101 l_0_7_101) (* l_0_7_102 l_0_7_102)) ?x32959) ?x32961)))
 (let ((?x7878 (+ (- (- (- (- (- (+ ?x25623 ?x32963) ?x32968) ?x32970) ?x32972) ?x32974) ?x32976) ?x34516)))
 (= (+ (+ (+ (+ ?x7878 ?x34518) ?x34520) ?x34522) ?x34524) 0.0)))))))))))))))))
(assert
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34557 (* ?x34556 l_0_7_245)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34554 (* ?x34553 l_0_7_244)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34551 (* ?x34550 l_0_7_243)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34548 (* ?x34547 l_0_7_242)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x20935 (* ?x20932 l_0_7_241)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x31767 (* ?x31766 l_0_7_155)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x31762 (* ?x31761 l_0_7_154)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x31759 (* ?x31758 l_0_7_153)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x31756 (* ?x31755 l_0_7_152)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x31753 (* ?x31752 l_0_7_151)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x31742 (* ?x31741 l_0_7_110)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x31739 (* ?x31738 l_0_7_109)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x31736 (* ?x31727 l_0_7_108)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x31724 (* ?x31722 l_0_7_107)))
 (let ((?x25626 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_106) ?x31724) ?x31736) ?x31739) ?x31742)))
 (let ((?x37048 (+ (+ (- (- (- (- (- ?x25626 ?x31753) ?x31756) ?x31759) ?x31762) ?x31767) ?x20935) ?x34548)))
 (= (+ (+ (+ ?x37048 ?x34551) ?x34554) ?x34557) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x20998 (* ?x34556 l_0_7_251)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x21001 (* ?x34553 l_0_7_250)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x21061 (* ?x34550 l_0_7_249)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x21064 (* ?x34547 l_0_7_248)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x21057 (* ?x20932 l_0_7_247)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33027 (* ?x31766 l_0_7_161)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33025 (* ?x31761 l_0_7_160)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33023 (* ?x31758 l_0_7_159)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33021 (* ?x31755 l_0_7_158)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33019 (* ?x31752 l_0_7_157)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33017 (* ?x31741 l_0_7_116)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33015 (* ?x31738 l_0_7_115)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33013 (* ?x31727 l_0_7_114)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33011 (* ?x31722 l_0_7_113)))
 (let ((?x25663 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_112) ?x33011) ?x33013) ?x33015) ?x33017)))
 (let ((?x37058 (+ (+ (- (- (- (- (- ?x25663 ?x33019) ?x33021) ?x33023) ?x33025) ?x33027) ?x21057) ?x21064)))
 (= (+ (+ (+ ?x37058 ?x21061) ?x21001) ?x20998) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34597 (* ?x34556 l_0_7_258)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34595 (* ?x34553 l_0_7_257)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34593 (* ?x34550 l_0_7_256)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34591 (* ?x34547 l_0_7_255)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x34589 (* ?x20932 l_0_7_254)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33074 (* ?x31766 l_0_7_168)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33072 (* ?x31761 l_0_7_167)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33070 (* ?x31758 l_0_7_166)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33068 (* ?x31755 l_0_7_165)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33066 (* ?x31752 l_0_7_164)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33064 (* ?x31741 l_0_7_123)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33062 (* ?x31738 l_0_7_122)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33060 (* ?x31727 l_0_7_121)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33058 (* ?x31722 l_0_7_120)))
 (let ((?x25727 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_119) ?x33058) ?x33060) ?x33062) ?x33064)))
 (let ((?x25697 (+ (+ (- (- (- (- (- ?x25727 ?x33066) ?x33068) ?x33070) ?x33072) ?x33074) ?x34589) ?x34591)))
 (= (+ (+ (+ ?x25697 ?x34593) ?x34595) ?x34597) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34556 (* 2.0 l_0_7_240)))
 (let ((?x34626 (* ?x34556 l_0_7_266)))
 (let ((?x34553 (* 2.0 l_0_7_239)))
 (let ((?x34624 (* ?x34553 l_0_7_265)))
 (let ((?x34550 (* 2.0 l_0_7_238)))
 (let ((?x34622 (* ?x34550 l_0_7_264)))
 (let ((?x34547 (* 2.0 l_0_7_237)))
 (let ((?x34620 (* ?x34547 l_0_7_263)))
 (let ((?x20932 (* 2.0 l_0_7_236)))
 (let ((?x34618 (* ?x20932 l_0_7_262)))
 (let ((?x31766 (* 2.0 l_0_7_150)))
 (let ((?x33138 (* ?x31766 l_0_7_176)))
 (let ((?x31761 (* 2.0 l_0_7_149)))
 (let ((?x33136 (* ?x31761 l_0_7_175)))
 (let ((?x31758 (* 2.0 l_0_7_148)))
 (let ((?x33134 (* ?x31758 l_0_7_174)))
 (let ((?x31755 (* 2.0 l_0_7_147)))
 (let ((?x33132 (* ?x31755 l_0_7_173)))
 (let ((?x31752 (* 2.0 l_0_7_146)))
 (let ((?x33130 (* ?x31752 l_0_7_172)))
 (let ((?x31741 (* 2.0 l_0_7_105)))
 (let ((?x33128 (* ?x31741 l_0_7_131)))
 (let ((?x31738 (* 2.0 l_0_7_104)))
 (let ((?x33126 (* ?x31738 l_0_7_130)))
 (let ((?x31727 (* 2.0 l_0_7_103)))
 (let ((?x33124 (* ?x31727 l_0_7_129)))
 (let ((?x31722 (* 2.0 l_0_7_102)))
 (let ((?x33122 (* ?x31722 l_0_7_128)))
 (let ((?x8055 (+ (+ (+ (+ (* (* 2.0 l_0_7_101) l_0_7_127) ?x33122) ?x33124) ?x33126) ?x33128)))
 (let ((?x25787 (+ (+ (- (- (- (- (- ?x8055 ?x33130) ?x33132) ?x33134) ?x33136) ?x33138) ?x34618) ?x34620)))
 (= (+ (+ (+ ?x25787 ?x34622) ?x34624) ?x34626) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x34647 (* l_0_7_246 l_0_7_246)))
 (let ((?x21358 (* l_0_7_245 l_0_7_245)))
 (let ((?x21361 (* l_0_7_244 l_0_7_244)))
 (let ((?x21432 (* l_0_7_243 l_0_7_243)))
 (let ((?x21433 (* l_0_7_242 l_0_7_242)))
 (let ((?x21409 (* l_0_7_241 l_0_7_241)))
 (let ((?x31980 (* l_0_7_156 l_0_7_156)))
 (let ((?x31978 (* l_0_7_155 l_0_7_155)))
 (let ((?x31976 (* l_0_7_154 l_0_7_154)))
 (let ((?x31974 (* l_0_7_153 l_0_7_153)))
 (let ((?x31972 (* l_0_7_152 l_0_7_152)))
 (let ((?x31970 (* l_0_7_151 l_0_7_151)))
 (let ((?x31968 (* l_0_7_111 l_0_7_111)))
 (let ((?x31966 (* l_0_7_110 l_0_7_110)))
 (let ((?x31955 (* l_0_7_109 l_0_7_109)))
 (let ((?x31951 (* l_0_7_108 l_0_7_108)))
 (let ((?x8077 (+ (+ (+ (* l_0_7_106 l_0_7_106) (* l_0_7_107 l_0_7_107)) ?x31951) ?x31955)))
 (let ((?x25724 (- (- (- (- (- (+ (+ ?x8077 ?x31966) ?x31968) ?x31970) ?x31972) ?x31974) ?x31976) ?x31978)))
 (let ((?x37068 (+ (+ (+ (+ (+ (+ (- ?x25724 ?x31980) ?x21409) ?x21433) ?x21432) ?x21361) ?x21358) ?x34647)))
 (= ?x37068 0.0)))))))))))))))))))))
(assert
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x34700 (* ?x30588 l_0_7_259)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x34698 (* ?x30585 l_0_7_258)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x34696 (* ?x30582 l_0_7_257)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x34694 (* ?x30579 l_0_7_256)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x34692 (* ?x30576 l_0_7_255)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x34690 (* ?x30573 l_0_7_254)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32334 (* ?x30752 l_0_7_169)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32332 (* ?x30749 l_0_7_168)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32330 (* ?x30746 l_0_7_167)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32328 (* ?x30743 l_0_7_166)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32326 (* ?x30740 l_0_7_165)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32324 (* ?x30737 l_0_7_164)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32322 (* ?x30734 l_0_7_124)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32320 (* ?x30731 l_0_7_123)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32318 (* ?x30728 l_0_7_122)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32316 (* ?x30725 l_0_7_121)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32314 (* ?x30722 l_0_7_120)))
 (let ((?x37079 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_119) ?x32314) ?x32316) ?x32318) ?x32320)))
 (let ((?x37086 (- (- (- (- (- (- (+ ?x37079 ?x32322) ?x32324) ?x32326) ?x32328) ?x32330) ?x32332) ?x32334)))
 (= (+ (+ (+ (+ (+ (+ ?x37086 ?x34690) ?x34692) ?x34694) ?x34696) ?x34698) ?x34700) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x30588 (* 2.0 l_0_7_246)))
 (let ((?x21666 (* ?x30588 l_0_7_267)))
 (let ((?x30585 (* 2.0 l_0_7_245)))
 (let ((?x21714 (* ?x30585 l_0_7_266)))
 (let ((?x30582 (* 2.0 l_0_7_244)))
 (let ((?x21708 (* ?x30582 l_0_7_265)))
 (let ((?x30579 (* 2.0 l_0_7_243)))
 (let ((?x21702 (* ?x30579 l_0_7_264)))
 (let ((?x30576 (* 2.0 l_0_7_242)))
 (let ((?x21696 (* ?x30576 l_0_7_263)))
 (let ((?x30573 (* 2.0 l_0_7_241)))
 (let ((?x21823 (* ?x30573 l_0_7_262)))
 (let ((?x30752 (* 2.0 l_0_7_156)))
 (let ((?x32475 (* ?x30752 l_0_7_177)))
 (let ((?x30749 (* 2.0 l_0_7_155)))
 (let ((?x32473 (* ?x30749 l_0_7_176)))
 (let ((?x30746 (* 2.0 l_0_7_154)))
 (let ((?x32471 (* ?x30746 l_0_7_175)))
 (let ((?x30743 (* 2.0 l_0_7_153)))
 (let ((?x32469 (* ?x30743 l_0_7_174)))
 (let ((?x30740 (* 2.0 l_0_7_152)))
 (let ((?x32467 (* ?x30740 l_0_7_173)))
 (let ((?x30737 (* 2.0 l_0_7_151)))
 (let ((?x32465 (* ?x30737 l_0_7_172)))
 (let ((?x30734 (* 2.0 l_0_7_111)))
 (let ((?x32463 (* ?x30734 l_0_7_132)))
 (let ((?x30731 (* 2.0 l_0_7_110)))
 (let ((?x32444 (* ?x30731 l_0_7_131)))
 (let ((?x30728 (* 2.0 l_0_7_109)))
 (let ((?x32440 (* ?x30728 l_0_7_130)))
 (let ((?x30725 (* 2.0 l_0_7_108)))
 (let ((?x32436 (* ?x30725 l_0_7_129)))
 (let ((?x30722 (* 2.0 l_0_7_107)))
 (let ((?x32432 (* ?x30722 l_0_7_128)))
 (let ((?x8185 (+ (+ (+ (+ (* (* 2.0 l_0_7_106) l_0_7_127) ?x32432) ?x32436) ?x32440) ?x32444)))
 (let ((?x25864 (- (- (- (- (- (- (+ ?x8185 ?x32463) ?x32465) ?x32467) ?x32469) ?x32471) ?x32473) ?x32475)))
 (= (+ (+ (+ (+ (+ (+ ?x25864 ?x21823) ?x21696) ?x21702) ?x21708) ?x21714) ?x21666) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34731 (* l_0_7_253 l_0_7_253)))
 (let ((?x34729 (* l_0_7_252 l_0_7_252)))
 (let ((?x34727 (* l_0_7_251 l_0_7_251)))
 (let ((?x34725 (* l_0_7_250 l_0_7_250)))
 (let ((?x34722 (* l_0_7_249 l_0_7_249)))
 (let ((?x34720 (* l_0_7_248 l_0_7_248)))
 (let ((?x34718 (* l_0_7_247 l_0_7_247)))
 (let ((?x35566 (* l_0_7_163 l_0_7_163)))
 (let ((?x35564 (* l_0_7_162 l_0_7_162)))
 (let ((?x35562 (* l_0_7_161 l_0_7_161)))
 (let ((?x35560 (* l_0_7_160 l_0_7_160)))
 (let ((?x35558 (* l_0_7_159 l_0_7_159)))
 (let ((?x35556 (* l_0_7_158 l_0_7_158)))
 (let ((?x35554 (* l_0_7_157 l_0_7_157)))
 (let ((?x35552 (* l_0_7_118 l_0_7_118)))
 (let ((?x35550 (* l_0_7_117 l_0_7_117)))
 (let ((?x35548 (* l_0_7_116 l_0_7_116)))
 (let ((?x35546 (* l_0_7_115 l_0_7_115)))
 (let ((?x35544 (* l_0_7_114 l_0_7_114)))
 (let ((?x25939 (+ (+ (+ (* l_0_7_112 l_0_7_112) (* l_0_7_113 l_0_7_113)) ?x35544) ?x35546)))
 (let ((?x37096 (- (- (- (- (+ (+ (+ ?x25939 ?x35548) ?x35550) ?x35552) ?x35554) ?x35556) ?x35558) ?x35560)))
 (let ((?x37103 (+ (+ (+ (+ (- (- (- ?x37096 ?x35562) ?x35564) ?x35566) ?x34718) ?x34720) ?x34722) ?x34725)))
 (= (+ (+ (+ ?x37103 ?x34727) ?x34729) ?x34731) 0.0))))))))))))))))))))))))
(assert
 (let ((?x34808 (* 2.0 l_0_7_253)))
 (let ((?x34809 (* ?x34808 l_0_7_260)))
 (let ((?x34805 (* 2.0 l_0_7_252)))
 (let ((?x34806 (* ?x34805 l_0_7_259)))
 (let ((?x34802 (* 2.0 l_0_7_251)))
 (let ((?x34803 (* ?x34802 l_0_7_258)))
 (let ((?x34799 (* 2.0 l_0_7_250)))
 (let ((?x34800 (* ?x34799 l_0_7_257)))
 (let ((?x34795 (* 2.0 l_0_7_249)))
 (let ((?x34796 (* ?x34795 l_0_7_256)))
 (let ((?x34792 (* 2.0 l_0_7_248)))
 (let ((?x34793 (* ?x34792 l_0_7_255)))
 (let ((?x34789 (* 2.0 l_0_7_247)))
 (let ((?x34790 (* ?x34789 l_0_7_254)))
 (let ((?x35630 (* 2.0 l_0_7_163)))
 (let ((?x35631 (* ?x35630 l_0_7_170)))
 (let ((?x35627 (* 2.0 l_0_7_162)))
 (let ((?x35628 (* ?x35627 l_0_7_169)))
 (let ((?x35624 (* 2.0 l_0_7_161)))
 (let ((?x35625 (* ?x35624 l_0_7_168)))
 (let ((?x35621 (* 2.0 l_0_7_160)))
 (let ((?x35622 (* ?x35621 l_0_7_167)))
 (let ((?x35618 (* 2.0 l_0_7_159)))
 (let ((?x35619 (* ?x35618 l_0_7_166)))
 (let ((?x35615 (* 2.0 l_0_7_158)))
 (let ((?x35616 (* ?x35615 l_0_7_165)))
 (let ((?x35612 (* 2.0 l_0_7_157)))
 (let ((?x35613 (* ?x35612 l_0_7_164)))
 (let ((?x35609 (* 2.0 l_0_7_118)))
 (let ((?x35610 (* ?x35609 l_0_7_125)))
 (let ((?x35606 (* 2.0 l_0_7_117)))
 (let ((?x35607 (* ?x35606 l_0_7_124)))
 (let ((?x35603 (* 2.0 l_0_7_116)))
 (let ((?x35604 (* ?x35603 l_0_7_123)))
 (let ((?x35600 (* 2.0 l_0_7_115)))
 (let ((?x35601 (* ?x35600 l_0_7_122)))
 (let ((?x34773 (* 2.0 l_0_7_114)))
 (let ((?x35598 (* ?x34773 l_0_7_121)))
 (let ((?x34770 (* 2.0 l_0_7_113)))
 (let ((?x35596 (* ?x34770 l_0_7_120)))
 (let ((?x8271 (+ (+ (+ (+ (* (* 2.0 l_0_7_112) l_0_7_119) ?x35596) ?x35598) ?x35601) ?x35604)))
 (let ((?x37121 (- (- (- (- (- (+ (+ ?x8271 ?x35607) ?x35610) ?x35613) ?x35616) ?x35619) ?x35622) ?x35625)))
 (let ((?x37128 (+ (+ (+ (+ (+ (- (- ?x37121 ?x35628) ?x35631) ?x34790) ?x34793) ?x34796) ?x34800) ?x34803)))
 (= (+ (+ ?x37128 ?x34806) ?x34809) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x34915 (* l_0_7_261 l_0_7_261)))
 (let ((?x34913 (* l_0_7_260 l_0_7_260)))
 (let ((?x34911 (* l_0_7_259 l_0_7_259)))
 (let ((?x34909 (* l_0_7_258 l_0_7_258)))
 (let ((?x34907 (* l_0_7_257 l_0_7_257)))
 (let ((?x34905 (* l_0_7_256 l_0_7_256)))
 (let ((?x34903 (* l_0_7_255 l_0_7_255)))
 (let ((?x34901 (* l_0_7_254 l_0_7_254)))
 (let ((?x35799 (* l_0_7_171 l_0_7_171)))
 (let ((?x35797 (* l_0_7_170 l_0_7_170)))
 (let ((?x35795 (* l_0_7_169 l_0_7_169)))
 (let ((?x35793 (* l_0_7_168 l_0_7_168)))
 (let ((?x35791 (* l_0_7_167 l_0_7_167)))
 (let ((?x35789 (* l_0_7_166 l_0_7_166)))
 (let ((?x35787 (* l_0_7_165 l_0_7_165)))
 (let ((?x35785 (* l_0_7_164 l_0_7_164)))
 (let ((?x35783 (* l_0_7_126 l_0_7_126)))
 (let ((?x35781 (* l_0_7_125 l_0_7_125)))
 (let ((?x35779 (* l_0_7_124 l_0_7_124)))
 (let ((?x35777 (* l_0_7_123 l_0_7_123)))
 (let ((?x35775 (* l_0_7_122 l_0_7_122)))
 (let ((?x35773 (* l_0_7_121 l_0_7_121)))
 (let ((?x8414 (+ (+ (+ (* l_0_7_119 l_0_7_119) (* l_0_7_120 l_0_7_120)) ?x35773) ?x35775)))
 (let ((?x8333 (- (- (- (+ (+ (+ (+ ?x8414 ?x35777) ?x35779) ?x35781) ?x35783) ?x35785) ?x35787) ?x35789)))
 (let ((?x8276 (+ (+ (- (- (- (- (- ?x8333 ?x35791) ?x35793) ?x35795) ?x35797) ?x35799) ?x34901) ?x34903)))
 (= (+ (+ (+ (+ (+ (+ ?x8276 ?x34905) ?x34907) ?x34909) ?x34911) ?x34913) ?x34915) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x35010 (* (* 2.0 l_0_7_261) l_0_7_269)))
 (let ((?x35007 (* (* 2.0 l_0_7_260) l_0_7_268)))
 (let ((?x35004 (* (* 2.0 l_0_7_259) l_0_7_267)))
 (let ((?x35001 (* (* 2.0 l_0_7_258) l_0_7_266)))
 (let ((?x34998 (* (* 2.0 l_0_7_257) l_0_7_265)))
 (let ((?x34995 (* (* 2.0 l_0_7_256) l_0_7_264)))
 (let ((?x34992 (* (* 2.0 l_0_7_255) l_0_7_263)))
 (let ((?x34989 (* (* 2.0 l_0_7_254) l_0_7_262)))
 (let ((?x35869 (* (* 2.0 l_0_7_171) l_0_7_179)))
 (let ((?x35866 (* (* 2.0 l_0_7_170) l_0_7_178)))
 (let ((?x35863 (* (* 2.0 l_0_7_169) l_0_7_177)))
 (let ((?x35860 (* (* 2.0 l_0_7_168) l_0_7_176)))
 (let ((?x35857 (* (* 2.0 l_0_7_167) l_0_7_175)))
 (let ((?x35854 (* (* 2.0 l_0_7_166) l_0_7_174)))
 (let ((?x35851 (* (* 2.0 l_0_7_165) l_0_7_173)))
 (let ((?x35848 (* (* 2.0 l_0_7_164) l_0_7_172)))
 (let ((?x35845 (* (* 2.0 l_0_7_126) l_0_7_134)))
 (let ((?x35842 (* (* 2.0 l_0_7_125) l_0_7_133)))
 (let ((?x35839 (* (* 2.0 l_0_7_124) l_0_7_132)))
 (let ((?x35836 (* (* 2.0 l_0_7_123) l_0_7_131)))
 (let ((?x35833 (* (* 2.0 l_0_7_122) l_0_7_130)))
 (let ((?x34889 (* 2.0 l_0_7_121)))
 (let ((?x35830 (* ?x34889 l_0_7_129)))
 (let ((?x34886 (* 2.0 l_0_7_120)))
 (let ((?x35828 (* ?x34886 l_0_7_128)))
 (let ((?x26043 (+ (+ (+ (+ (* (* 2.0 l_0_7_119) l_0_7_127) ?x35828) ?x35830) ?x35833) ?x35836)))
 (let ((?x37154 (- (- (- (- (+ (+ (+ ?x26043 ?x35839) ?x35842) ?x35845) ?x35848) ?x35851) ?x35854) ?x35857)))
 (let ((?x37161 (+ (+ (+ (- (- (- (- ?x37154 ?x35860) ?x35863) ?x35866) ?x35869) ?x34989) ?x34992) ?x34995)))
 (= (+ (+ (+ (+ (+ ?x37161 ?x34998) ?x35001) ?x35004) ?x35007) ?x35010) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x35081 (* l_0_7_270 l_0_7_270)))
 (let ((?x35079 (* l_0_7_269 l_0_7_269)))
 (let ((?x35077 (* l_0_7_268 l_0_7_268)))
 (let ((?x35075 (* l_0_7_267 l_0_7_267)))
 (let ((?x35073 (* l_0_7_266 l_0_7_266)))
 (let ((?x35071 (* l_0_7_265 l_0_7_265)))
 (let ((?x22454 (* l_0_7_264 l_0_7_264)))
 (let ((?x22455 (* l_0_7_263 l_0_7_263)))
 (let ((?x3449 (* l_0_7_262 l_0_7_262)))
 (let ((?x35951 (* l_0_7_180 l_0_7_180)))
 (let ((?x35949 (* l_0_7_179 l_0_7_179)))
 (let ((?x35947 (* l_0_7_178 l_0_7_178)))
 (let ((?x35945 (* l_0_7_177 l_0_7_177)))
 (let ((?x35943 (* l_0_7_176 l_0_7_176)))
 (let ((?x35941 (* l_0_7_175 l_0_7_175)))
 (let ((?x35939 (* l_0_7_174 l_0_7_174)))
 (let ((?x35937 (* l_0_7_173 l_0_7_173)))
 (let ((?x35935 (* l_0_7_172 l_0_7_172)))
 (let ((?x35933 (* l_0_7_135 l_0_7_135)))
 (let ((?x35931 (* l_0_7_134 l_0_7_134)))
 (let ((?x35929 (* l_0_7_133 l_0_7_133)))
 (let ((?x35927 (* l_0_7_132 l_0_7_132)))
 (let ((?x35914 (* l_0_7_131 l_0_7_131)))
 (let ((?x35911 (* l_0_7_130 l_0_7_130)))
 (let ((?x35907 (* l_0_7_129 l_0_7_129)))
 (let ((?x4752 (+ (+ (+ (* l_0_7_127 l_0_7_127) (* l_0_7_128 l_0_7_128)) ?x35907) ?x35911)))
 (let ((?x37172 (- (- (+ (+ (+ (+ (+ ?x4752 ?x35914) ?x35927) ?x35929) ?x35931) ?x35933) ?x35935) ?x35937)))
 (let ((?x37179 (- (- (- (- (- (- (- ?x37172 ?x35939) ?x35941) ?x35943) ?x35945) ?x35947) ?x35949) ?x35951)))
 (let ((?x37186 (+ (+ (+ (+ (+ (+ (+ ?x37179 ?x3449) ?x22455) ?x22454) ?x35071) ?x35073) ?x35075) ?x35077)))
 (= (+ (+ ?x37186 ?x35079) ?x35081) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x26146 (* l_0_7_361 l_0_7_361)))
 (let ((?x26144 (* l_0_7_316 l_0_7_316)))
 (let ((?x26145 (- (- (* (* (- 1.0) l_0_7_181) l_0_7_181) (* l_0_7_271 l_0_7_271)) ?x26144)))
 (= (- ?x26145 ?x26146) 0.0)))))
(assert
 (let ((?x37216 (- (* (* (- 2.0) l_0_7_181) l_0_7_182) (* (* 2.0 l_0_7_271) l_0_7_272))))
 (let ((?x37220 (- (- ?x37216 (* (* 2.0 l_0_7_316) l_0_7_317)) (* (* 2.0 l_0_7_361) l_0_7_362))))
 (= ?x37220 0.0))))
(assert
 (let ((?x37241 (- (* (* (- 2.0) l_0_7_181) l_0_7_187) (* (* 2.0 l_0_7_271) l_0_7_277))))
 (let ((?x37245 (- (- ?x37241 (* (* 2.0 l_0_7_316) l_0_7_322)) (* (* 2.0 l_0_7_361) l_0_7_367))))
 (= ?x37245 0.0))))
(assert
 (let ((?x37259 (- (* (* (- 2.0) l_0_7_181) l_0_7_191) (* (* 2.0 l_0_7_271) l_0_7_281))))
 (let ((?x37263 (- (- ?x37259 (* (* 2.0 l_0_7_316) l_0_7_326)) (* (* 2.0 l_0_7_361) l_0_7_371))))
 (= ?x37263 0.0))))
(assert
 (let ((?x37281 (- (* (* (- 2.0) l_0_7_181) l_0_7_196) (* (* 2.0 l_0_7_271) l_0_7_286))))
 (let ((?x37285 (- (- ?x37281 (* (* 2.0 l_0_7_316) l_0_7_331)) (* (* 2.0 l_0_7_361) l_0_7_376))))
 (= ?x37285 0.0))))
(assert
 (let ((?x37304 (- (* (* (- 2.0) l_0_7_181) l_0_7_202) (* (* 2.0 l_0_7_271) l_0_7_292))))
 (let ((?x37308 (- (- ?x37304 (* (* 2.0 l_0_7_316) l_0_7_337)) (* (* 2.0 l_0_7_361) l_0_7_382))))
 (= ?x37308 0.0))))
(assert
 (let ((?x37329 (- (* (* (- 2.0) l_0_7_181) l_0_7_217) (* (* 2.0 l_0_7_271) l_0_7_307))))
 (let ((?x37333 (- (- ?x37329 (* (* 2.0 l_0_7_316) l_0_7_352)) (* (* 2.0 l_0_7_361) l_0_7_397))))
 (= ?x37333 0.0))))
(assert
 (let ((?x37367 (* l_0_7_363 l_0_7_363)))
 (let ((?x37365 (* l_0_7_362 l_0_7_362)))
 (let ((?x37363 (* l_0_7_318 l_0_7_318)))
 (let ((?x37361 (* l_0_7_317 l_0_7_317)))
 (let ((?x37359 (* l_0_7_273 l_0_7_273)))
 (let ((?x37357 (* l_0_7_272 l_0_7_272)))
 (let ((?x37356 (- (* (* (- 1.0) l_0_7_182) l_0_7_182) (* (* 1.0 l_0_7_183) l_0_7_183))))
 (= (- (- (- (- (- (- ?x37356 ?x37357) ?x37359) ?x37361) ?x37363) ?x37365) ?x37367) 0.0)))))))))
(assert
 (let ((?x37389 (- (* (* (- 2.0) l_0_7_182) l_0_7_191) (* (* 2.0 l_0_7_183) l_0_7_192))))
 (let ((?x37393 (- (- ?x37389 (* (* 2.0 l_0_7_272) l_0_7_281)) (* (* 2.0 l_0_7_273) l_0_7_282))))
 (let ((?x37397 (- (- ?x37393 (* (* 2.0 l_0_7_317) l_0_7_326)) (* (* 2.0 l_0_7_318) l_0_7_327))))
 (let ((?x37401 (- (- ?x37397 (* (* 2.0 l_0_7_362) l_0_7_371)) (* (* 2.0 l_0_7_363) l_0_7_372))))
 (= ?x37401 0.0))))))
(assert
 (let ((?x37432 (- (* (* (- 2.0) l_0_7_182) l_0_7_196) (* (* 2.0 l_0_7_183) l_0_7_197))))
 (let ((?x37436 (- (- ?x37432 (* (* 2.0 l_0_7_272) l_0_7_286)) (* (* 2.0 l_0_7_273) l_0_7_287))))
 (let ((?x37440 (- (- ?x37436 (* (* 2.0 l_0_7_317) l_0_7_331)) (* (* 2.0 l_0_7_318) l_0_7_332))))
 (let ((?x37444 (- (- ?x37440 (* (* 2.0 l_0_7_362) l_0_7_376)) (* (* 2.0 l_0_7_363) l_0_7_377))))
 (= ?x37444 0.0))))))
(assert
 (let ((?x37476 (- (* (* (- 2.0) l_0_7_182) l_0_7_202) (* (* 2.0 l_0_7_183) l_0_7_203))))
 (let ((?x37480 (- (- ?x37476 (* (* 2.0 l_0_7_272) l_0_7_292)) (* (* 2.0 l_0_7_273) l_0_7_293))))
 (let ((?x37484 (- (- ?x37480 (* (* 2.0 l_0_7_317) l_0_7_337)) (* (* 2.0 l_0_7_318) l_0_7_338))))
 (let ((?x37488 (- (- ?x37484 (* (* 2.0 l_0_7_362) l_0_7_382)) (* (* 2.0 l_0_7_363) l_0_7_383))))
 (= ?x37488 0.0))))))
(assert
 (let ((?x37516 (- (* (* (- 2.0) l_0_7_182) l_0_7_217) (* (* 2.0 l_0_7_183) l_0_7_218))))
 (let ((?x37520 (- (- ?x37516 (* (* 2.0 l_0_7_272) l_0_7_307)) (* (* 2.0 l_0_7_273) l_0_7_308))))
 (let ((?x37524 (- (- ?x37520 (* (* 2.0 l_0_7_317) l_0_7_352)) (* (* 2.0 l_0_7_318) l_0_7_353))))
 (let ((?x37528 (- (- ?x37524 (* (* 2.0 l_0_7_362) l_0_7_397)) (* (* 2.0 l_0_7_363) l_0_7_398))))
 (= ?x37528 0.0))))))
(assert
 (let ((?x37591 (* l_0_7_370 l_0_7_370)))
 (let ((?x37589 (* l_0_7_369 l_0_7_369)))
 (let ((?x37587 (* l_0_7_368 l_0_7_368)))
 (let ((?x37585 (* l_0_7_367 l_0_7_367)))
 (let ((?x37583 (* l_0_7_325 l_0_7_325)))
 (let ((?x37581 (* l_0_7_324 l_0_7_324)))
 (let ((?x37579 (* l_0_7_323 l_0_7_323)))
 (let ((?x37577 (* l_0_7_322 l_0_7_322)))
 (let ((?x37575 (* l_0_7_280 l_0_7_280)))
 (let ((?x37573 (* l_0_7_279 l_0_7_279)))
 (let ((?x37571 (* l_0_7_278 l_0_7_278)))
 (let ((?x37569 (* l_0_7_277 l_0_7_277)))
 (let ((?x37562 (- (* (* (- 1.0) l_0_7_187) l_0_7_187) (* (* 1.0 l_0_7_188) l_0_7_188))))
 (let ((?x37568 (- (- ?x37562 (* (* 1.0 l_0_7_189) l_0_7_189)) (* (* 1.0 l_0_7_190) l_0_7_190))))
 (let ((?x37582 (- (- (- (- (- (- (- ?x37568 ?x37569) ?x37571) ?x37573) ?x37575) ?x37577) ?x37579) ?x37581)))
 (= (- (- (- (- (- ?x37582 ?x37583) ?x37585) ?x37587) ?x37589) ?x37591) 0.0)))))))))))))))))
(assert
 (let ((?x37628 (- (* (* (- 2.0) l_0_7_187) l_0_7_196) (* (* 2.0 l_0_7_188) l_0_7_197))))
 (let ((?x37632 (- (- ?x37628 (* (* 2.0 l_0_7_189) l_0_7_198)) (* (* 2.0 l_0_7_190) l_0_7_199))))
 (let ((?x37636 (- (- ?x37632 (* (* 2.0 l_0_7_277) l_0_7_286)) (* (* 2.0 l_0_7_278) l_0_7_287))))
 (let ((?x37640 (- (- ?x37636 (* (* 2.0 l_0_7_279) l_0_7_288)) (* (* 2.0 l_0_7_280) l_0_7_289))))
 (let ((?x37644 (- (- ?x37640 (* (* 2.0 l_0_7_322) l_0_7_331)) (* (* 2.0 l_0_7_323) l_0_7_332))))
 (let ((?x37648 (- (- ?x37644 (* (* 2.0 l_0_7_324) l_0_7_333)) (* (* 2.0 l_0_7_325) l_0_7_334))))
 (let ((?x37652 (- (- ?x37648 (* (* 2.0 l_0_7_367) l_0_7_376)) (* (* 2.0 l_0_7_368) l_0_7_377))))
 (let ((?x37656 (- (- ?x37652 (* (* 2.0 l_0_7_369) l_0_7_378)) (* (* 2.0 l_0_7_370) l_0_7_379))))
 (= ?x37656 0.0))))))))))
(assert
 (let ((?x37719 (- (* (* (- 2.0) l_0_7_187) l_0_7_202) (* (* 2.0 l_0_7_188) l_0_7_203))))
 (let ((?x37723 (- (- ?x37719 (* (* 2.0 l_0_7_189) l_0_7_204)) (* (* 2.0 l_0_7_190) l_0_7_205))))
 (let ((?x37727 (- (- ?x37723 (* (* 2.0 l_0_7_277) l_0_7_292)) (* (* 2.0 l_0_7_278) l_0_7_293))))
 (let ((?x37731 (- (- ?x37727 (* (* 2.0 l_0_7_279) l_0_7_294)) (* (* 2.0 l_0_7_280) l_0_7_295))))
 (let ((?x37735 (- (- ?x37731 (* (* 2.0 l_0_7_322) l_0_7_337)) (* (* 2.0 l_0_7_323) l_0_7_338))))
 (let ((?x37739 (- (- ?x37735 (* (* 2.0 l_0_7_324) l_0_7_339)) (* (* 2.0 l_0_7_325) l_0_7_340))))
 (let ((?x37743 (- (- ?x37739 (* (* 2.0 l_0_7_367) l_0_7_382)) (* (* 2.0 l_0_7_368) l_0_7_383))))
 (let ((?x37747 (- (- ?x37743 (* (* 2.0 l_0_7_369) l_0_7_384)) (* (* 2.0 l_0_7_370) l_0_7_385))))
 (= ?x37747 0.0))))))))))
(assert
 (let ((?x37807 (- (* (* (- 2.0) l_0_7_187) l_0_7_217) (* (* 2.0 l_0_7_188) l_0_7_218))))
 (let ((?x37811 (- (- ?x37807 (* (* 2.0 l_0_7_189) l_0_7_219)) (* (* 2.0 l_0_7_190) l_0_7_220))))
 (let ((?x37815 (- (- ?x37811 (* (* 2.0 l_0_7_277) l_0_7_307)) (* (* 2.0 l_0_7_278) l_0_7_308))))
 (let ((?x37819 (- (- ?x37815 (* (* 2.0 l_0_7_279) l_0_7_309)) (* (* 2.0 l_0_7_280) l_0_7_310))))
 (let ((?x37823 (- (- ?x37819 (* (* 2.0 l_0_7_322) l_0_7_352)) (* (* 2.0 l_0_7_323) l_0_7_353))))
 (let ((?x37827 (- (- ?x37823 (* (* 2.0 l_0_7_324) l_0_7_354)) (* (* 2.0 l_0_7_325) l_0_7_355))))
 (let ((?x37831 (- (- ?x37827 (* (* 2.0 l_0_7_367) l_0_7_397)) (* (* 2.0 l_0_7_368) l_0_7_398))))
 (let ((?x37835 (- (- ?x37831 (* (* 2.0 l_0_7_369) l_0_7_399)) (* (* 2.0 l_0_7_370) l_0_7_400))))
 (= ?x37835 0.0))))))))))
(assert
 (let ((?x37929 (* l_0_7_375 l_0_7_375)))
 (let ((?x37927 (* l_0_7_374 l_0_7_374)))
 (let ((?x37925 (* l_0_7_373 l_0_7_373)))
 (let ((?x37923 (* l_0_7_372 l_0_7_372)))
 (let ((?x37921 (* l_0_7_371 l_0_7_371)))
 (let ((?x37919 (* l_0_7_330 l_0_7_330)))
 (let ((?x37917 (* l_0_7_329 l_0_7_329)))
 (let ((?x37915 (* l_0_7_328 l_0_7_328)))
 (let ((?x37913 (* l_0_7_327 l_0_7_327)))
 (let ((?x37911 (* l_0_7_326 l_0_7_326)))
 (let ((?x37909 (* l_0_7_285 l_0_7_285)))
 (let ((?x37907 (* l_0_7_284 l_0_7_284)))
 (let ((?x37905 (* l_0_7_283 l_0_7_283)))
 (let ((?x37903 (* l_0_7_282 l_0_7_282)))
 (let ((?x37901 (* l_0_7_281 l_0_7_281)))
 (let ((?x37891 (- (* (* (- 1.0) l_0_7_191) l_0_7_191) (* (* 1.0 l_0_7_192) l_0_7_192))))
 (let ((?x37897 (- (- ?x37891 (* (* 1.0 l_0_7_193) l_0_7_193)) (* (* 1.0 l_0_7_194) l_0_7_194))))
 (let ((?x37906 (- (- (- (- ?x37897 (* (* 1.0 l_0_7_195) l_0_7_195)) ?x37901) ?x37903) ?x37905)))
 (let ((?x37920 (- (- (- (- (- (- (- ?x37906 ?x37907) ?x37909) ?x37911) ?x37913) ?x37915) ?x37917) ?x37919)))
 (= (- (- (- (- (- ?x37920 ?x37921) ?x37923) ?x37925) ?x37927) ?x37929) 0.0)))))))))))))))))))))
(assert
 (let ((?x37967 (- (* (* (- 2.0) l_0_7_191) l_0_7_196) (* (* 2.0 l_0_7_192) l_0_7_197))))
 (let ((?x37971 (- (- ?x37967 (* (* 2.0 l_0_7_193) l_0_7_198)) (* (* 2.0 l_0_7_194) l_0_7_199))))
 (let ((?x37975 (- (- ?x37971 (* (* 2.0 l_0_7_195) l_0_7_200)) (* (* 2.0 l_0_7_281) l_0_7_286))))
 (let ((?x37979 (- (- ?x37975 (* (* 2.0 l_0_7_282) l_0_7_287)) (* (* 2.0 l_0_7_283) l_0_7_288))))
 (let ((?x37983 (- (- ?x37979 (* (* 2.0 l_0_7_284) l_0_7_289)) (* (* 2.0 l_0_7_285) l_0_7_290))))
 (let ((?x37987 (- (- ?x37983 (* (* 2.0 l_0_7_326) l_0_7_331)) (* (* 2.0 l_0_7_327) l_0_7_332))))
 (let ((?x37991 (- (- ?x37987 (* (* 2.0 l_0_7_328) l_0_7_333)) (* (* 2.0 l_0_7_329) l_0_7_334))))
 (let ((?x37995 (- (- ?x37991 (* (* 2.0 l_0_7_330) l_0_7_335)) (* (* 2.0 l_0_7_371) l_0_7_376))))
 (let ((?x37999 (- (- ?x37995 (* (* 2.0 l_0_7_372) l_0_7_377)) (* (* 2.0 l_0_7_373) l_0_7_378))))
 (let ((?x38003 (- (- ?x37999 (* (* 2.0 l_0_7_374) l_0_7_379)) (* (* 2.0 l_0_7_375) l_0_7_380))))
 (= ?x38003 0.0))))))))))))
(assert
 (let ((?x38054 (- (* (* (- 2.0) l_0_7_191) l_0_7_202) (* (* 2.0 l_0_7_192) l_0_7_203))))
 (let ((?x38058 (- (- ?x38054 (* (* 2.0 l_0_7_193) l_0_7_204)) (* (* 2.0 l_0_7_194) l_0_7_205))))
 (let ((?x38062 (- (- ?x38058 (* (* 2.0 l_0_7_195) l_0_7_206)) (* (* 2.0 l_0_7_281) l_0_7_292))))
 (let ((?x38066 (- (- ?x38062 (* (* 2.0 l_0_7_282) l_0_7_293)) (* (* 2.0 l_0_7_283) l_0_7_294))))
 (let ((?x38070 (- (- ?x38066 (* (* 2.0 l_0_7_284) l_0_7_295)) (* (* 2.0 l_0_7_285) l_0_7_296))))
 (let ((?x38074 (- (- ?x38070 (* (* 2.0 l_0_7_326) l_0_7_337)) (* (* 2.0 l_0_7_327) l_0_7_338))))
 (let ((?x38078 (- (- ?x38074 (* (* 2.0 l_0_7_328) l_0_7_339)) (* (* 2.0 l_0_7_329) l_0_7_340))))
 (let ((?x38082 (- (- ?x38078 (* (* 2.0 l_0_7_330) l_0_7_341)) (* (* 2.0 l_0_7_371) l_0_7_382))))
 (let ((?x38086 (- (- ?x38082 (* (* 2.0 l_0_7_372) l_0_7_383)) (* (* 2.0 l_0_7_373) l_0_7_384))))
 (let ((?x38090 (- (- ?x38086 (* (* 2.0 l_0_7_374) l_0_7_385)) (* (* 2.0 l_0_7_375) l_0_7_386))))
 (= ?x38090 0.0))))))))))))
(assert
 (let ((?x38167 (- (* (* (- 2.0) l_0_7_191) l_0_7_217) (* (* 2.0 l_0_7_192) l_0_7_218))))
 (let ((?x38171 (- (- ?x38167 (* (* 2.0 l_0_7_193) l_0_7_219)) (* (* 2.0 l_0_7_194) l_0_7_220))))
 (let ((?x38175 (- (- ?x38171 (* (* 2.0 l_0_7_195) l_0_7_221)) (* (* 2.0 l_0_7_281) l_0_7_307))))
 (let ((?x38179 (- (- ?x38175 (* (* 2.0 l_0_7_282) l_0_7_308)) (* (* 2.0 l_0_7_283) l_0_7_309))))
 (let ((?x38183 (- (- ?x38179 (* (* 2.0 l_0_7_284) l_0_7_310)) (* (* 2.0 l_0_7_285) l_0_7_311))))
 (let ((?x38187 (- (- ?x38183 (* (* 2.0 l_0_7_326) l_0_7_352)) (* (* 2.0 l_0_7_327) l_0_7_353))))
 (let ((?x38191 (- (- ?x38187 (* (* 2.0 l_0_7_328) l_0_7_354)) (* (* 2.0 l_0_7_329) l_0_7_355))))
 (let ((?x38195 (- (- ?x38191 (* (* 2.0 l_0_7_330) l_0_7_356)) (* (* 2.0 l_0_7_371) l_0_7_397))))
 (let ((?x38199 (- (- ?x38195 (* (* 2.0 l_0_7_372) l_0_7_398)) (* (* 2.0 l_0_7_373) l_0_7_399))))
 (let ((?x38203 (- (- ?x38199 (* (* 2.0 l_0_7_374) l_0_7_400)) (* (* 2.0 l_0_7_375) l_0_7_401))))
 (= ?x38203 0.0))))))))))))
(assert
 (let ((?x38285 (* l_0_7_381 l_0_7_381)))
 (let ((?x38283 (* l_0_7_380 l_0_7_380)))
 (let ((?x38281 (* l_0_7_379 l_0_7_379)))
 (let ((?x38279 (* l_0_7_378 l_0_7_378)))
 (let ((?x38277 (* l_0_7_377 l_0_7_377)))
 (let ((?x38275 (* l_0_7_376 l_0_7_376)))
 (let ((?x38273 (* l_0_7_336 l_0_7_336)))
 (let ((?x38271 (* l_0_7_335 l_0_7_335)))
 (let ((?x38269 (* l_0_7_334 l_0_7_334)))
 (let ((?x38267 (* l_0_7_333 l_0_7_333)))
 (let ((?x38265 (* l_0_7_332 l_0_7_332)))
 (let ((?x38263 (* l_0_7_331 l_0_7_331)))
 (let ((?x38261 (* l_0_7_291 l_0_7_291)))
 (let ((?x38259 (* l_0_7_290 l_0_7_290)))
 (let ((?x38257 (* l_0_7_289 l_0_7_289)))
 (let ((?x38255 (* l_0_7_288 l_0_7_288)))
 (let ((?x38253 (* l_0_7_287 l_0_7_287)))
 (let ((?x38251 (* l_0_7_286 l_0_7_286)))
 (let ((?x38238 (- (* (* (- 1.0) l_0_7_196) l_0_7_196) (* (* 1.0 l_0_7_197) l_0_7_197))))
 (let ((?x38244 (- (- ?x38238 (* (* 1.0 l_0_7_198) l_0_7_198)) (* (* 1.0 l_0_7_199) l_0_7_199))))
 (let ((?x38250 (- (- ?x38244 (* (* 1.0 l_0_7_200) l_0_7_200)) (* (* 1.0 l_0_7_201) l_0_7_201))))
 (let ((?x38264 (- (- (- (- (- (- (- ?x38250 ?x38251) ?x38253) ?x38255) ?x38257) ?x38259) ?x38261) ?x38263)))
 (let ((?x38278 (- (- (- (- (- (- (- ?x38264 ?x38265) ?x38267) ?x38269) ?x38271) ?x38273) ?x38275) ?x38277)))
 (= (- (- (- (- ?x38278 ?x38279) ?x38281) ?x38283) ?x38285) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x38334 (- (* (* (- 2.0) l_0_7_196) l_0_7_217) (* (* 2.0 l_0_7_197) l_0_7_218))))
 (let ((?x38338 (- (- ?x38334 (* (* 2.0 l_0_7_198) l_0_7_219)) (* (* 2.0 l_0_7_199) l_0_7_220))))
 (let ((?x38342 (- (- ?x38338 (* (* 2.0 l_0_7_200) l_0_7_221)) (* (* 2.0 l_0_7_201) l_0_7_222))))
 (let ((?x38346 (- (- ?x38342 (* (* 2.0 l_0_7_286) l_0_7_307)) (* (* 2.0 l_0_7_287) l_0_7_308))))
 (let ((?x38350 (- (- ?x38346 (* (* 2.0 l_0_7_288) l_0_7_309)) (* (* 2.0 l_0_7_289) l_0_7_310))))
 (let ((?x38354 (- (- ?x38350 (* (* 2.0 l_0_7_290) l_0_7_311)) (* (* 2.0 l_0_7_291) l_0_7_312))))
 (let ((?x38358 (- (- ?x38354 (* (* 2.0 l_0_7_331) l_0_7_352)) (* (* 2.0 l_0_7_332) l_0_7_353))))
 (let ((?x38362 (- (- ?x38358 (* (* 2.0 l_0_7_333) l_0_7_354)) (* (* 2.0 l_0_7_334) l_0_7_355))))
 (let ((?x38366 (- (- ?x38362 (* (* 2.0 l_0_7_335) l_0_7_356)) (* (* 2.0 l_0_7_336) l_0_7_357))))
 (let ((?x38370 (- (- ?x38366 (* (* 2.0 l_0_7_376) l_0_7_397)) (* (* 2.0 l_0_7_377) l_0_7_398))))
 (let ((?x38374 (- (- ?x38370 (* (* 2.0 l_0_7_378) l_0_7_399)) (* (* 2.0 l_0_7_379) l_0_7_400))))
 (let ((?x38378 (- (- ?x38374 (* (* 2.0 l_0_7_380) l_0_7_401)) (* (* 2.0 l_0_7_381) l_0_7_402))))
 (= ?x38378 0.0))))))))))))))
(assert
 (let ((?x38533 (* l_0_7_388 l_0_7_388)))
 (let ((?x38531 (* l_0_7_387 l_0_7_387)))
 (let ((?x38529 (* l_0_7_386 l_0_7_386)))
 (let ((?x38527 (* l_0_7_385 l_0_7_385)))
 (let ((?x38525 (* l_0_7_384 l_0_7_384)))
 (let ((?x38523 (* l_0_7_383 l_0_7_383)))
 (let ((?x38521 (* l_0_7_382 l_0_7_382)))
 (let ((?x38519 (* l_0_7_343 l_0_7_343)))
 (let ((?x38517 (* l_0_7_342 l_0_7_342)))
 (let ((?x38515 (* l_0_7_341 l_0_7_341)))
 (let ((?x38513 (* l_0_7_340 l_0_7_340)))
 (let ((?x38511 (* l_0_7_339 l_0_7_339)))
 (let ((?x38509 (* l_0_7_338 l_0_7_338)))
 (let ((?x38507 (* l_0_7_337 l_0_7_337)))
 (let ((?x38505 (* l_0_7_298 l_0_7_298)))
 (let ((?x38503 (* l_0_7_297 l_0_7_297)))
 (let ((?x38501 (* l_0_7_296 l_0_7_296)))
 (let ((?x38499 (* l_0_7_295 l_0_7_295)))
 (let ((?x38497 (* l_0_7_294 l_0_7_294)))
 (let ((?x38495 (* l_0_7_293 l_0_7_293)))
 (let ((?x38493 (* l_0_7_292 l_0_7_292)))
 (let ((?x38477 (- (* (* (- 1.0) l_0_7_202) l_0_7_202) (* (* 1.0 l_0_7_203) l_0_7_203))))
 (let ((?x38483 (- (- ?x38477 (* (* 1.0 l_0_7_204) l_0_7_204)) (* (* 1.0 l_0_7_205) l_0_7_205))))
 (let ((?x38489 (- (- ?x38483 (* (* 1.0 l_0_7_206) l_0_7_206)) (* (* 1.0 l_0_7_207) l_0_7_207))))
 (let ((?x38498 (- (- (- (- ?x38489 (* (* 1.0 l_0_7_208) l_0_7_208)) ?x38493) ?x38495) ?x38497)))
 (let ((?x38512 (- (- (- (- (- (- (- ?x38498 ?x38499) ?x38501) ?x38503) ?x38505) ?x38507) ?x38509) ?x38511)))
 (let ((?x38526 (- (- (- (- (- (- (- ?x38512 ?x38513) ?x38515) ?x38517) ?x38519) ?x38521) ?x38523) ?x38525)))
 (= (- (- (- (- ?x38526 ?x38527) ?x38529) ?x38531) ?x38533) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x38687 (* l_0_7_405 l_0_7_405)))
 (let ((?x38685 (* l_0_7_404 l_0_7_404)))
 (let ((?x38683 (* l_0_7_403 l_0_7_403)))
 (let ((?x38681 (* l_0_7_402 l_0_7_402)))
 (let ((?x38679 (* l_0_7_401 l_0_7_401)))
 (let ((?x38677 (* l_0_7_400 l_0_7_400)))
 (let ((?x38675 (* l_0_7_399 l_0_7_399)))
 (let ((?x38673 (* l_0_7_398 l_0_7_398)))
 (let ((?x38671 (* l_0_7_397 l_0_7_397)))
 (let ((?x38669 (* l_0_7_360 l_0_7_360)))
 (let ((?x38667 (* l_0_7_359 l_0_7_359)))
 (let ((?x38665 (* l_0_7_358 l_0_7_358)))
 (let ((?x38663 (* l_0_7_357 l_0_7_357)))
 (let ((?x38661 (* l_0_7_356 l_0_7_356)))
 (let ((?x38659 (* l_0_7_355 l_0_7_355)))
 (let ((?x38657 (* l_0_7_354 l_0_7_354)))
 (let ((?x38655 (* l_0_7_353 l_0_7_353)))
 (let ((?x38653 (* l_0_7_352 l_0_7_352)))
 (let ((?x38651 (* l_0_7_315 l_0_7_315)))
 (let ((?x38649 (* l_0_7_314 l_0_7_314)))
 (let ((?x38647 (* l_0_7_313 l_0_7_313)))
 (let ((?x38645 (* l_0_7_312 l_0_7_312)))
 (let ((?x38643 (* l_0_7_311 l_0_7_311)))
 (let ((?x38641 (* l_0_7_310 l_0_7_310)))
 (let ((?x38639 (* l_0_7_309 l_0_7_309)))
 (let ((?x38637 (* l_0_7_308 l_0_7_308)))
 (let ((?x38635 (* l_0_7_307 l_0_7_307)))
 (let ((?x38613 (- (* (* (- 1.0) l_0_7_217) l_0_7_217) (* (* 1.0 l_0_7_218) l_0_7_218))))
 (let ((?x38619 (- (- ?x38613 (* (* 1.0 l_0_7_219) l_0_7_219)) (* (* 1.0 l_0_7_220) l_0_7_220))))
 (let ((?x38625 (- (- ?x38619 (* (* 1.0 l_0_7_221) l_0_7_221)) (* (* 1.0 l_0_7_222) l_0_7_222))))
 (let ((?x38631 (- (- ?x38625 (* (* 1.0 l_0_7_223) l_0_7_223)) (* (* 1.0 l_0_7_224) l_0_7_224))))
 (let ((?x38640 (- (- (- (- ?x38631 (* (* 1.0 l_0_7_225) l_0_7_225)) ?x38635) ?x38637) ?x38639)))
 (let ((?x38654 (- (- (- (- (- (- (- ?x38640 ?x38641) ?x38643) ?x38645) ?x38647) ?x38649) ?x38651) ?x38653)))
 (let ((?x38668 (- (- (- (- (- (- (- ?x38654 ?x38655) ?x38657) ?x38659) ?x38661) ?x38663) ?x38665) ?x38667)))
 (let ((?x38682 (- (- (- (- (- (- (- ?x38668 ?x38669) ?x38671) ?x38673) ?x38675) ?x38677) ?x38679) ?x38681)))
 (= (- (- (- ?x38682 ?x38683) ?x38685) ?x38687) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_7_1 0.0))
(assert
 (>= l_0_7_3 0.0))
(assert
 (>= l_0_7_6 0.0))
(assert
 (>= l_0_7_10 0.0))
(assert
 (>= l_0_7_15 0.0))
(assert
 (>= l_0_7_21 0.0))
(assert
 (>= l_0_7_28 0.0))
(assert
 (>= l_0_7_36 0.0))
(assert
 (>= l_0_7_45 0.0))
(assert
 (>= l_0_7_46 0.0))
(assert
 (>= l_0_7_48 0.0))
(assert
 (>= l_0_7_51 0.0))
(assert
 (>= l_0_7_55 0.0))
(assert
 (>= l_0_7_60 0.0))
(assert
 (>= l_0_7_66 0.0))
(assert
 (>= l_0_7_73 0.0))
(assert
 (>= l_0_7_81 0.0))
(assert
 (>= l_0_7_90 0.0))
(assert
 (>= l_0_7_91 0.0))
(assert
 (>= l_0_7_93 0.0))
(assert
 (>= l_0_7_96 0.0))
(assert
 (>= l_0_7_100 0.0))
(assert
 (>= l_0_7_105 0.0))
(assert
 (>= l_0_7_111 0.0))
(assert
 (>= l_0_7_118 0.0))
(assert
 (>= l_0_7_126 0.0))
(assert
 (>= l_0_7_135 0.0))
(assert
 (>= l_0_7_136 0.0))
(assert
 (>= l_0_7_138 0.0))
(assert
 (>= l_0_7_141 0.0))
(assert
 (>= l_0_7_145 0.0))
(assert
 (>= l_0_7_150 0.0))
(assert
 (>= l_0_7_156 0.0))
(assert
 (>= l_0_7_163 0.0))
(assert
 (>= l_0_7_171 0.0))
(assert
 (>= l_0_7_180 0.0))
(assert
 (>= l_0_7_181 0.0))
(assert
 (>= l_0_7_183 0.0))
(assert
 (>= l_0_7_186 0.0))
(assert
 (>= l_0_7_190 0.0))
(assert
 (>= l_0_7_195 0.0))
(assert
 (>= l_0_7_201 0.0))
(assert
 (>= l_0_7_208 0.0))
(assert
 (>= l_0_7_216 0.0))
(assert
 (>= l_0_7_225 0.0))
(assert
 (>= l_0_7_226 0.0))
(assert
 (>= l_0_7_228 0.0))
(assert
 (>= l_0_7_231 0.0))
(assert
 (>= l_0_7_235 0.0))
(assert
 (>= l_0_7_240 0.0))
(assert
 (>= l_0_7_246 0.0))
(assert
 (>= l_0_7_253 0.0))
(assert
 (>= l_0_7_261 0.0))
(assert
 (>= l_0_7_270 0.0))
(assert
 (>= l_0_7_271 0.0))
(assert
 (>= l_0_7_273 0.0))
(assert
 (>= l_0_7_276 0.0))
(assert
 (>= l_0_7_280 0.0))
(assert
 (>= l_0_7_285 0.0))
(assert
 (>= l_0_7_291 0.0))
(assert
 (>= l_0_7_298 0.0))
(assert
 (>= l_0_7_306 0.0))
(assert
 (>= l_0_7_315 0.0))
(assert
 (>= l_0_7_316 0.0))
(assert
 (>= l_0_7_318 0.0))
(assert
 (>= l_0_7_321 0.0))
(assert
 (>= l_0_7_325 0.0))
(assert
 (>= l_0_7_330 0.0))
(assert
 (>= l_0_7_336 0.0))
(assert
 (>= l_0_7_343 0.0))
(assert
 (>= l_0_7_351 0.0))
(assert
 (>= l_0_7_360 0.0))
(assert
 (>= l_0_7_361 0.0))
(assert
 (>= l_0_7_363 0.0))
(assert
 (>= l_0_7_366 0.0))
(assert
 (>= l_0_7_370 0.0))
(assert
 (>= l_0_7_375 0.0))
(assert
 (>= l_0_7_381 0.0))
(assert
 (>= l_0_7_388 0.0))
(assert
 (>= l_0_7_396 0.0))
(assert
 (>= l_0_7_405 0.0))
(assert
 (let ((?x38894 (* l_0_8_91 l_0_8_91)))
 (let ((?x38880 (* l_0_8_226 l_0_8_226)))
 (let ((?x38879 (- (* (- l_0_8_136) l_0_8_136) (* (* 2.0 l_0_8_181) l_0_8_209))))
 (let ((?x38887 (- (- (+ ?x38879 ?x38880) (* (* 2.0 l_0_8_271) l_0_8_299)) (* (* 2.0 l_0_8_316) l_0_8_344))))
 (let ((?x38893 (- (- ?x38887 (* (* 2.0 l_0_8_361) l_0_8_389)) (* (* 2.0 l_0_8_406) l_0_8_434))))
 (= (+ (+ ?x38893 ?x38894) 1.0) 0.0)))))))
(assert
 (let ((?x38894 (* l_0_8_91 l_0_8_91)))
 (let ((?x38933 (- (- (* l_0_8_136 l_0_8_136) (* (* 2.0 l_0_8_182) l_0_8_187)) (* (* 2.0 l_0_8_183) l_0_8_188))))
 (let ((?x38939 (- (- ?x38933 (* (* 2.0 l_0_8_272) l_0_8_277)) (* (* 2.0 l_0_8_273) l_0_8_278))))
 (let ((?x38945 (- (- ?x38939 (* (* 2.0 l_0_8_317) l_0_8_322)) (* (* 2.0 l_0_8_318) l_0_8_323))))
 (let ((?x38951 (- (- ?x38945 (* (* 2.0 l_0_8_362) l_0_8_367)) (* (* 2.0 l_0_8_363) l_0_8_368))))
 (let ((?x38957 (- (- ?x38951 (* (* 2.0 l_0_8_407) l_0_8_412)) (* (* 2.0 l_0_8_408) l_0_8_413))))
 (= (- (- ?x38957 ?x38894) 1.0) 0.0))))))))
(assert
 (let ((?x38894 (* l_0_8_91 l_0_8_91)))
 (let ((?x39023 (- (- (* l_0_8_136 l_0_8_136) (* (* 2.0 l_0_8_202) l_0_8_217)) (* (* 2.0 l_0_8_203) l_0_8_218))))
 (let ((?x39029 (- (- ?x39023 (* (* 2.0 l_0_8_204) l_0_8_219)) (* (* 2.0 l_0_8_205) l_0_8_220))))
 (let ((?x39035 (- (- ?x39029 (* (* 2.0 l_0_8_206) l_0_8_221)) (* (* 2.0 l_0_8_207) l_0_8_222))))
 (let ((?x39041 (- (- ?x39035 (* (* 2.0 l_0_8_208) l_0_8_223)) (* (* 2.0 l_0_8_292) l_0_8_307))))
 (let ((?x39047 (- (- ?x39041 (* (* 2.0 l_0_8_293) l_0_8_308)) (* (* 2.0 l_0_8_294) l_0_8_309))))
 (let ((?x39053 (- (- ?x39047 (* (* 2.0 l_0_8_295) l_0_8_310)) (* (* 2.0 l_0_8_296) l_0_8_311))))
 (let ((?x39059 (- (- ?x39053 (* (* 2.0 l_0_8_297) l_0_8_312)) (* (* 2.0 l_0_8_298) l_0_8_313))))
 (let ((?x39065 (- (- ?x39059 (* (* 2.0 l_0_8_337) l_0_8_352)) (* (* 2.0 l_0_8_338) l_0_8_353))))
 (let ((?x39071 (- (- ?x39065 (* (* 2.0 l_0_8_339) l_0_8_354)) (* (* 2.0 l_0_8_340) l_0_8_355))))
 (let ((?x39077 (- (- ?x39071 (* (* 2.0 l_0_8_341) l_0_8_356)) (* (* 2.0 l_0_8_342) l_0_8_357))))
 (let ((?x39083 (- (- ?x39077 (* (* 2.0 l_0_8_343) l_0_8_358)) (* (* 2.0 l_0_8_382) l_0_8_397))))
 (let ((?x39089 (- (- ?x39083 (* (* 2.0 l_0_8_383) l_0_8_398)) (* (* 2.0 l_0_8_384) l_0_8_399))))
 (let ((?x39095 (- (- ?x39089 (* (* 2.0 l_0_8_385) l_0_8_400)) (* (* 2.0 l_0_8_386) l_0_8_401))))
 (let ((?x39101 (- (- ?x39095 (* (* 2.0 l_0_8_387) l_0_8_402)) (* (* 2.0 l_0_8_388) l_0_8_403))))
 (let ((?x39107 (- (- ?x39101 (* (* 2.0 l_0_8_427) l_0_8_442)) (* (* 2.0 l_0_8_428) l_0_8_443))))
 (let ((?x39113 (- (- ?x39107 (* (* 2.0 l_0_8_429) l_0_8_444)) (* (* 2.0 l_0_8_430) l_0_8_445))))
 (let ((?x39119 (- (- ?x39113 (* (* 2.0 l_0_8_431) l_0_8_446)) (* (* 2.0 l_0_8_432) l_0_8_447))))
 (= (- (- (- ?x39119 (* (* 2.0 l_0_8_433) l_0_8_448)) ?x38894) 1.0) 0.0))))))))))))))))))))
(assert
 (let ((?x39317 (* l_0_8_46 l_0_8_46)))
 (let ((?x39232 (- (- (* (- l_0_8_1) l_0_8_1) (* (* 2.0 l_0_8_196) l_0_8_202)) (* (* 2.0 l_0_8_197) l_0_8_203))))
 (let ((?x39238 (- (- ?x39232 (* (* 2.0 l_0_8_198) l_0_8_204)) (* (* 2.0 l_0_8_199) l_0_8_205))))
 (let ((?x39244 (- (- ?x39238 (* (* 2.0 l_0_8_200) l_0_8_206)) (* (* 2.0 l_0_8_201) l_0_8_207))))
 (let ((?x39250 (- (- ?x39244 (* (* 2.0 l_0_8_286) l_0_8_292)) (* (* 2.0 l_0_8_287) l_0_8_293))))
 (let ((?x39256 (- (- ?x39250 (* (* 2.0 l_0_8_288) l_0_8_294)) (* (* 2.0 l_0_8_289) l_0_8_295))))
 (let ((?x39262 (- (- ?x39256 (* (* 2.0 l_0_8_290) l_0_8_296)) (* (* 2.0 l_0_8_291) l_0_8_297))))
 (let ((?x39268 (- (- ?x39262 (* (* 2.0 l_0_8_331) l_0_8_337)) (* (* 2.0 l_0_8_332) l_0_8_338))))
 (let ((?x39274 (- (- ?x39268 (* (* 2.0 l_0_8_333) l_0_8_339)) (* (* 2.0 l_0_8_334) l_0_8_340))))
 (let ((?x39280 (- (- ?x39274 (* (* 2.0 l_0_8_335) l_0_8_341)) (* (* 2.0 l_0_8_336) l_0_8_342))))
 (let ((?x39286 (- (- ?x39280 (* (* 2.0 l_0_8_376) l_0_8_382)) (* (* 2.0 l_0_8_377) l_0_8_383))))
 (let ((?x39292 (- (- ?x39286 (* (* 2.0 l_0_8_378) l_0_8_384)) (* (* 2.0 l_0_8_379) l_0_8_385))))
 (let ((?x39298 (- (- ?x39292 (* (* 2.0 l_0_8_380) l_0_8_386)) (* (* 2.0 l_0_8_381) l_0_8_387))))
 (let ((?x39304 (- (- ?x39298 (* (* 2.0 l_0_8_421) l_0_8_427)) (* (* 2.0 l_0_8_422) l_0_8_428))))
 (let ((?x39310 (- (- ?x39304 (* (* 2.0 l_0_8_423) l_0_8_429)) (* (* 2.0 l_0_8_424) l_0_8_430))))
 (let ((?x39316 (- (- ?x39310 (* (* 2.0 l_0_8_425) l_0_8_431)) (* (* 2.0 l_0_8_426) l_0_8_432))))
 (= (+ ?x39316 ?x39317) 0.0))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x11697 (* ?x11699 l_0_8_47)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x22701 (* ?x28152 l_0_8_2)))
 (= (+ ?x22701 ?x11697) 0.0))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x39451 (* ?x39450 l_0_8_72)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x39448 (* ?x39447 l_0_8_71)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x39445 (* ?x39444 l_0_8_70)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x39442 (* ?x39441 l_0_8_69)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x39439 (* ?x39438 l_0_8_68)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x39436 (* ?x39435 l_0_8_67)))
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39433 (* ?x11699 l_0_8_49)))
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x39431 (* ?x39430 l_0_8_252)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x39428 (* ?x39427 l_0_8_251)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x39425 (* ?x39424 l_0_8_250)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x39422 (* ?x39421 l_0_8_249)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x39419 (* ?x39418 l_0_8_248)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x39416 (* ?x39415 l_0_8_247)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x39413 (* ?x39412 l_0_8_27)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x39410 (* ?x39409 l_0_8_26)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x39407 (* ?x39406 l_0_8_25)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x39404 (* ?x39403 l_0_8_24)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x39401 (* ?x39400 l_0_8_23)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x39394 (* ?x39393 l_0_8_22)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x39391 (* ?x28152 l_0_8_4)))
 (let ((?x39417 (- (+ (+ (+ (+ (+ (+ ?x39391 ?x39394) ?x39401) ?x39404) ?x39407) ?x39410) ?x39413) ?x39416)))
 (let ((?x39437 (- (+ (- (- (- (- (- ?x39417 ?x39419) ?x39422) ?x39425) ?x39428) ?x39431) ?x39433) ?x39436)))
 (= (- (- (- (- (- ?x39437 ?x39439) ?x39442) ?x39445) ?x39448) ?x39451) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39524 (* ?x11699 l_0_8_52)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) ?x39524) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39530 (* ?x11699 l_0_8_56)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_11) ?x39530) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39540 (* ?x11699 l_0_8_61)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x39540) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39550 (* ?x11699 l_0_8_67)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_22) ?x39550) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39606 (* ?x11699 l_0_8_74)))
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x39431 (* ?x39430 l_0_8_252)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x39428 (* ?x39427 l_0_8_251)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x39425 (* ?x39424 l_0_8_250)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x39422 (* ?x39421 l_0_8_249)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x39419 (* ?x39418 l_0_8_248)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x39416 (* ?x39415 l_0_8_247)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x39598 (* ?x39597 l_0_8_162)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x39595 (* ?x39594 l_0_8_161)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x39592 (* ?x39591 l_0_8_160)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x39589 (* ?x39588 l_0_8_159)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x39586 (* ?x39585 l_0_8_158)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x39583 (* ?x39582 l_0_8_157)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x39580 (* ?x39579 l_0_8_117)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x39577 (* ?x39576 l_0_8_116)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x39574 (* ?x39573 l_0_8_115)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x39571 (* ?x39570 l_0_8_114)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39568 (* ?x39567 l_0_8_113)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x39558 (* ?x28152 l_0_8_29)))
 (let ((?x39575 (+ (+ (+ (+ ?x39558 (* (* 2.0 l_0_8_106) l_0_8_112)) ?x39568) ?x39571) ?x39574)))
 (let ((?x39596 (- (- (- (- (- (+ (+ ?x39575 ?x39577) ?x39580) ?x39583) ?x39586) ?x39589) ?x39592) ?x39595)))
 (let ((?x39605 (+ (+ (+ (+ (+ (+ (- ?x39596 ?x39598) ?x39416) ?x39419) ?x39422) ?x39425) ?x39428) ?x39431)))
 (= (+ ?x39605 ?x39606) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39655 (* ?x11699 l_0_8_82)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x39653 (* ?x39652 l_0_8_151)))
 (let ((?x39560 (* 2.0 l_0_8_106)))
 (let ((?x39650 (* ?x39560 l_0_8_91)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x28217 (* ?x28152 l_0_8_37)))
 (= (+ (+ (- ?x28217 ?x39650) ?x39653) ?x39655) 0.0))))))))))
(assert
 (let ((?x39675 (* l_0_8_48 l_0_8_48)))
 (let ((?x39673 (* l_0_8_47 l_0_8_47)))
 (let ((?x39676 (+ (+ (- (* (- l_0_8_2) l_0_8_2) (* l_0_8_3 l_0_8_3)) ?x39673) ?x39675)))
 (= ?x39676 0.0)))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39697 (* ?x39696 l_0_8_50)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39694 (* ?x39693 l_0_8_49)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39691 (* ?x39690 l_0_8_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_4) ?x39691) ?x39694) ?x39697) 0.0))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39731 (* ?x39696 l_0_8_53)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39729 (* ?x39693 l_0_8_52)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39727 (* ?x39690 l_0_8_8)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39725 (* ?x39724 l_0_8_7)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x39598 (* ?x39597 l_0_8_162)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x39595 (* ?x39594 l_0_8_161)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x39592 (* ?x39591 l_0_8_160)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x39589 (* ?x39588 l_0_8_159)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x39586 (* ?x39585 l_0_8_158)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x39583 (* ?x39582 l_0_8_157)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x39580 (* ?x39579 l_0_8_117)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x39577 (* ?x39576 l_0_8_116)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x39574 (* ?x39573 l_0_8_115)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x39571 (* ?x39570 l_0_8_114)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39568 (* ?x39567 l_0_8_113)))
 (let ((?x39716 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x39568) ?x39571) ?x39574) ?x39577)))
 (let ((?x39723 (+ (+ (+ (+ (+ (+ (- ?x39716 ?x39580) ?x39583) ?x39586) ?x39589) ?x39592) ?x39595) ?x39598)))
 (= (+ (+ (- (- ?x39723 ?x39725) ?x39727) ?x39729) ?x39731) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x11846 (* ?x39696 l_0_8_57)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x11828 (* ?x39693 l_0_8_56)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x28207 (* ?x11801 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_11) l_0_8_2) ?x28207) ?x11828) ?x11846) 0.0))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39747 (* ?x39696 l_0_8_62)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39745 (* ?x39693 l_0_8_61)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x11975 (* ?x39400 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_16) l_0_8_2) ?x11975) ?x39745) ?x39747) 0.0))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39768 (* ?x39696 l_0_8_68)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39766 (* ?x39693 l_0_8_67)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39764 (* ?x39763 l_0_8_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_22) ?x39764) ?x39766) ?x39768) 0.0))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39787 (* ?x39696 l_0_8_75)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39785 (* ?x39693 l_0_8_74)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39778 (* ?x39690 l_0_8_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_2) l_0_8_29) ?x39778) ?x39785) ?x39787) 0.0))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39817 (* ?x39696 l_0_8_83)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39815 (* ?x39693 l_0_8_82)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39813 (* ?x39690 l_0_8_38)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39811 (* ?x39724 l_0_8_37)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x39809 (* ?x39808 l_0_8_152)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x39806 (* ?x39805 l_0_8_151)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39803 (* ?x39567 l_0_8_93)))
 (let ((?x39810 (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_92) ?x39803) ?x39806) ?x39809)))
 (= (+ (+ (- (- ?x39810 ?x39811) ?x39813) ?x39815) ?x39817) 0.0)))))))))))))))))
(assert
 (let ((?x39852 (* l_0_8_6 l_0_8_6)))
 (let ((?x39850 (* l_0_8_51 l_0_8_51)))
 (let ((?x39848 (* l_0_8_50 l_0_8_50)))
 (let ((?x39846 (* l_0_8_5 l_0_8_5)))
 (let ((?x39849 (+ (- (+ (* (- l_0_8_4) l_0_8_4) (* l_0_8_49 l_0_8_49)) ?x39846) ?x39848)))
 (= (- (+ ?x39849 ?x39850) ?x39852) 0.0)))))))
(assert
 (let ((?x39882 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39879 (* ?x39878 l_0_8_54)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39876 (* ?x39875 l_0_8_53)))
 (let ((?x39873 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39870 (* ?x39869 l_0_8_52)))
 (let ((?x39880 (+ (+ (- (+ (* (* (- 2.0) l_0_8_4) l_0_8_7) ?x39870) ?x39873) ?x39876) ?x39879)))
 (= (- ?x39880 ?x39882) 0.0)))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39920 (* ?x39878 l_0_8_58)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39918 (* ?x39875 l_0_8_57)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39916 (* ?x39869 l_0_8_56)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x39914 (* ?x39913 l_0_8_6)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x39911 (* ?x11801 l_0_8_5)))
 (let ((?x39919 (+ (+ (- (- (* (* (- 2.0) l_0_8_11) l_0_8_4) ?x39911) ?x39914) ?x39916) ?x39918)))
 (= (+ ?x39919 ?x39920) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39944 (* ?x39878 l_0_8_63)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39942 (* ?x39875 l_0_8_62)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39940 (* ?x39869 l_0_8_61)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28397 (* ?x39403 l_0_8_6)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28396 (* ?x39400 l_0_8_5)))
 (let ((?x39943 (+ (+ (- (- (* (* (- 2.0) l_0_8_16) l_0_8_4) ?x28396) ?x28397) ?x39940) ?x39942)))
 (= (+ ?x39943 ?x39944) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39973 (* ?x39878 l_0_8_69)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39971 (* ?x39875 l_0_8_68)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39969 (* ?x39869 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x39967 (* ?x39966 l_0_8_6)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39958 (* ?x39763 l_0_8_5)))
 (let ((?x39972 (+ (+ (- (- (* (* (- 2.0) l_0_8_22) l_0_8_4) ?x39958) ?x39967) ?x39969) ?x39971)))
 (= (+ ?x39972 ?x39973) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40006 (* ?x39878 l_0_8_76)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40004 (* ?x39875 l_0_8_75)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40002 (* ?x39869 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40000 (* ?x39999 l_0_8_6)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x39997 (* ?x39996 l_0_8_5)))
 (let ((?x40005 (+ (+ (- (- (* (* (- 2.0) l_0_8_29) l_0_8_4) ?x39997) ?x40000) ?x40002) ?x40004)))
 (= (+ ?x40005 ?x40006) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40049 (* ?x39878 l_0_8_84)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40047 (* ?x39875 l_0_8_83)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40045 (* ?x39869 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40043 (* ?x40042 l_0_8_6)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40040 (* ?x40039 l_0_8_5)))
 (let ((?x40036 (* 2.0 l_0_8_37)))
 (let ((?x40037 (* ?x40036 l_0_8_4)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x40034 (* ?x40033 l_0_8_153)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x40031 (* ?x40030 l_0_8_152)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x40028 (* ?x40027 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40025 (* ?x39570 l_0_8_96)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40023 (* ?x39567 l_0_8_95)))
 (let ((?x40032 (+ (+ (- (- (* (* (- 2.0) l_0_8_106) l_0_8_94) ?x40023) ?x40025) ?x40028) ?x40031)))
 (let ((?x40035 (+ ?x40032 ?x40034)))
 (= (+ (+ (+ (- (- (- ?x40035 ?x40037) ?x40040) ?x40043) ?x40045) ?x40047) ?x40049) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40101 (* l_0_8_9 l_0_8_9)))
 (let ((?x40099 (* l_0_8_8 l_0_8_8)))
 (let ((?x40097 (* l_0_8_7 l_0_8_7)))
 (let ((?x40095 (* l_0_8_55 l_0_8_55)))
 (let ((?x40093 (* l_0_8_54 l_0_8_54)))
 (let ((?x40091 (* l_0_8_53 l_0_8_53)))
 (let ((?x40094 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_52 l_0_8_52)) ?x40091) ?x40093)))
 (= (- (- (- (+ ?x40094 ?x40095) ?x40097) ?x40099) ?x40101) 0.0)))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x39451 (* ?x39450 l_0_8_72)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x39448 (* ?x39447 l_0_8_71)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x39445 (* ?x39444 l_0_8_70)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x39442 (* ?x39441 l_0_8_69)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x39439 (* ?x39438 l_0_8_68)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x39436 (* ?x39435 l_0_8_67)))
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40135 (* ?x40134 l_0_8_59)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40132 (* ?x40131 l_0_8_58)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40129 (* ?x40128 l_0_8_57)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40126 (* ?x40125 l_0_8_56)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x39413 (* ?x39412 l_0_8_27)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x39410 (* ?x39409 l_0_8_26)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x39407 (* ?x39406 l_0_8_25)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x39404 (* ?x39403 l_0_8_24)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x39401 (* ?x39400 l_0_8_23)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x39394 (* ?x39393 l_0_8_22)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40117 (* ?x39913 l_0_8_9)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40115 (* ?x11801 l_0_8_8)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x40113 (* ?x12393 l_0_8_7)))
 (let ((?x40118 (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_14) ?x40113) ?x40115) ?x40117)))
 (let ((?x40127 (+ (- (- (- (- (- (- ?x40118 ?x39394) ?x39401) ?x39404) ?x39407) ?x39410) ?x39413) ?x40126)))
 (let ((?x40140 (+ (+ (+ (+ (+ (+ (+ ?x40127 ?x40129) ?x40132) ?x40135) ?x39436) ?x39439) ?x39442) ?x39445)))
 (= (+ (+ ?x40140 ?x39448) ?x39451) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40163 (* ?x40134 l_0_8_64)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40161 (* ?x40131 l_0_8_63)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40159 (* ?x40128 l_0_8_62)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x28435 (* ?x40125 l_0_8_61)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28441 (* ?x39403 l_0_8_9)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28446 (* ?x39400 l_0_8_8)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x28451 (* ?x39393 l_0_8_7)))
 (let ((?x40158 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) ?x28451) ?x28446) ?x28441) ?x28435)))
 (= (+ (+ (+ ?x40158 ?x40159) ?x40161) ?x40163) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40197 (* ?x40134 l_0_8_70)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40195 (* ?x40131 l_0_8_69)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40193 (* ?x40128 l_0_8_68)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40191 (* ?x40125 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40189 (* ?x39966 l_0_8_9)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40180 (* ?x39763 l_0_8_8)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x28513 (* ?x4134 l_0_8_7)))
 (let ((?x40192 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_25) ?x28513) ?x40180) ?x40189) ?x40191)))
 (= (+ (+ (+ ?x40192 ?x40193) ?x40195) ?x40197) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40241 (* ?x40134 l_0_8_77)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40239 (* ?x40131 l_0_8_76)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40237 (* ?x40128 l_0_8_75)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40235 (* ?x40125 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40233 (* ?x39999 l_0_8_9)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x40224 (* ?x39996 l_0_8_8)))
 (let ((?x40219 (* 2.0 l_0_8_29)))
 (let ((?x40221 (* ?x40219 l_0_8_7)))
 (let ((?x40236 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_32) ?x40221) ?x40224) ?x40233) ?x40235)))
 (= (+ (+ (+ ?x40236 ?x40237) ?x40239) ?x40241) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40301 (* ?x40134 l_0_8_85)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40299 (* ?x40131 l_0_8_84)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40297 (* ?x40128 l_0_8_83)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40295 (* ?x40125 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40293 (* ?x40042 l_0_8_9)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40291 (* ?x40039 l_0_8_8)))
 (let ((?x40036 (* 2.0 l_0_8_37)))
 (let ((?x40289 (* ?x40036 l_0_8_7)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x40287 (* ?x40286 l_0_8_154)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x40284 (* ?x40283 l_0_8_153)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x40281 (* ?x40280 l_0_8_152)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x40278 (* ?x40277 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40275 (* ?x39570 l_0_8_99)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40273 (* ?x39567 l_0_8_98)))
 (let ((?x39560 (* 2.0 l_0_8_106)))
 (let ((?x40264 (* ?x39560 l_0_8_97)))
 (let ((?x40259 (* 2.0 l_0_8_100)))
 (let ((?x40261 (* ?x40259 l_0_8_109)))
 (let ((?x12413 (* (- 2.0) l_0_8_10)))
 (let ((?x28526 (* ?x12413 l_0_8_40)))
 (let ((?x40285 (+ (+ (+ (- (- (- (- ?x28526 ?x40261) ?x40264) ?x40273) ?x40275) ?x40278) ?x40281) ?x40284)))
 (let ((?x40300 (+ (+ (+ (- (- (- (+ ?x40285 ?x40287) ?x40289) ?x40291) ?x40293) ?x40295) ?x40297) ?x40299)))
 (= (+ ?x40300 ?x40301) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40374 (* l_0_8_60 l_0_8_60)))
 (let ((?x40372 (* l_0_8_59 l_0_8_59)))
 (let ((?x40370 (* l_0_8_58 l_0_8_58)))
 (let ((?x40368 (* l_0_8_57 l_0_8_57)))
 (let ((?x40366 (* l_0_8_56 l_0_8_56)))
 (let ((?x40364 (* l_0_8_15 l_0_8_15)))
 (let ((?x40362 (* l_0_8_14 l_0_8_14)))
 (let ((?x40349 (* l_0_8_13 l_0_8_13)))
 (let ((?x40363 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x40349) ?x40362)))
 (= (+ (+ (+ (+ (+ (- ?x40363 ?x40364) ?x40366) ?x40368) ?x40370) ?x40372) ?x40374) 0.0)))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40418 (* ?x40417 l_0_8_65)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40415 (* ?x40414 l_0_8_64)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40412 (* ?x40411 l_0_8_63)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40409 (* ?x40408 l_0_8_62)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40406 (* ?x40405 l_0_8_61)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40403 (* ?x40402 l_0_8_20)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40400 (* ?x40399 l_0_8_19)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40397 (* ?x39913 l_0_8_18)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40395 (* ?x11801 l_0_8_17)))
 (let ((?x40404 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_16) ?x40395) ?x40397) ?x40400) ?x40403)))
 (= (+ (+ (+ (+ (+ ?x40404 ?x40406) ?x40409) ?x40412) ?x40415) ?x40418) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40468 (* ?x40417 l_0_8_71)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40466 (* ?x40414 l_0_8_70)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40464 (* ?x40411 l_0_8_69)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40462 (* ?x40408 l_0_8_68)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40460 (* ?x40405 l_0_8_67)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40458 (* ?x40402 l_0_8_26)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40448 (* ?x40399 l_0_8_25)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40445 (* ?x39913 l_0_8_24)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40441 (* ?x11801 l_0_8_23)))
 (let ((?x40459 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_22) ?x40441) ?x40445) ?x40448) ?x40458)))
 (= (+ (+ (+ (+ (+ ?x40459 ?x40460) ?x40462) ?x40464) ?x40466) ?x40468) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40517 (* ?x40417 l_0_8_78)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40515 (* ?x40414 l_0_8_77)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40513 (* ?x40411 l_0_8_76)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40511 (* ?x40408 l_0_8_75)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40509 (* ?x40405 l_0_8_74)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40507 (* ?x40402 l_0_8_33)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40505 (* ?x40399 l_0_8_32)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40503 (* ?x39913 l_0_8_31)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40501 (* ?x11801 l_0_8_30)))
 (let ((?x40508 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_29) ?x40501) ?x40503) ?x40505) ?x40507)))
 (= (+ (+ (+ (+ (+ ?x40508 ?x40509) ?x40511) ?x40513) ?x40515) ?x40517) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40599 (* ?x40417 l_0_8_86)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40597 (* ?x40414 l_0_8_85)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40595 (* ?x40411 l_0_8_84)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40593 (* ?x40408 l_0_8_83)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40591 (* ?x40405 l_0_8_82)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x40589 (* ?x40588 l_0_8_155)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40586 (* ?x40402 l_0_8_41)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x40584 (* ?x40583 l_0_8_154)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x40581 (* ?x40580 l_0_8_153)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x40578 (* ?x40577 l_0_8_152)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x40575 (* ?x40574 l_0_8_151)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40572 (* ?x40399 l_0_8_40)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40570 (* ?x39913 l_0_8_39)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40568 (* ?x11801 l_0_8_38)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x40566 (* ?x12393 l_0_8_37)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x40564 (* ?x40563 l_0_8_110)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x40561 (* ?x40560 l_0_8_109)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x40558 (* ?x40549 l_0_8_108)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x40546 (* ?x40544 l_0_8_107)))
 (let ((?x40565 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_106) ?x40546) ?x40558) ?x40561) ?x40564)))
 (let ((?x40582 (+ (+ (+ (- (- (- (- ?x40565 ?x40566) ?x40568) ?x40570) ?x40572) ?x40575) ?x40578) ?x40581)))
 (let ((?x40598 (+ (+ (+ (+ (+ (- (+ ?x40582 ?x40584) ?x40586) ?x40589) ?x40591) ?x40593) ?x40595) ?x40597)))
 (= (+ ?x40598 ?x40599) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40692 (* l_0_8_66 l_0_8_66)))
 (let ((?x40690 (* l_0_8_65 l_0_8_65)))
 (let ((?x40688 (* l_0_8_64 l_0_8_64)))
 (let ((?x40686 (* l_0_8_63 l_0_8_63)))
 (let ((?x40684 (* l_0_8_62 l_0_8_62)))
 (let ((?x40682 (* l_0_8_61 l_0_8_61)))
 (let ((?x40680 (* l_0_8_21 l_0_8_21)))
 (let ((?x40678 (* l_0_8_20 l_0_8_20)))
 (let ((?x40663 (* l_0_8_19 l_0_8_19)))
 (let ((?x40660 (* l_0_8_18 l_0_8_18)))
 (let ((?x40677 (- (- (- (* (- l_0_8_16) l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40660) ?x40663)))
 (let ((?x40691 (+ (+ (+ (+ (+ (- (- ?x40677 ?x40678) ?x40680) ?x40682) ?x40684) ?x40686) ?x40688) ?x40690)))
 (= (+ ?x40691 ?x40692) 0.0))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x39451 (* ?x39450 l_0_8_72)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x39448 (* ?x39447 l_0_8_71)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x39445 (* ?x39444 l_0_8_70)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x39442 (* ?x39441 l_0_8_69)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x39439 (* ?x39438 l_0_8_68)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x39436 (* ?x39435 l_0_8_67)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x39413 (* ?x39412 l_0_8_27)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x39410 (* ?x39409 l_0_8_26)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x39407 (* ?x39406 l_0_8_25)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x39404 (* ?x39403 l_0_8_24)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x39401 (* ?x39400 l_0_8_23)))
 (let ((?x40717 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_22) ?x39401) ?x39404) ?x39407) ?x39410)))
 (let ((?x40724 (+ (+ (+ (+ (+ (+ (- ?x40717 ?x39413) ?x39436) ?x39439) ?x39442) ?x39445) ?x39448) ?x39451)))
 (= ?x40724 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40755 (* ?x39450 l_0_8_79)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40753 (* ?x39447 l_0_8_78)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40751 (* ?x39444 l_0_8_77)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40749 (* ?x39441 l_0_8_76)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40747 (* ?x39438 l_0_8_75)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40745 (* ?x39435 l_0_8_74)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40743 (* ?x39412 l_0_8_34)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40741 (* ?x39409 l_0_8_33)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40739 (* ?x39406 l_0_8_32)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40737 (* ?x39403 l_0_8_31)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28671 (* ?x39400 l_0_8_30)))
 (let ((?x40742 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_29) ?x28671) ?x40737) ?x40739) ?x40741)))
 (let ((?x40756 (+ (+ (+ (+ (+ (+ (- ?x40742 ?x40743) ?x40745) ?x40747) ?x40749) ?x40751) ?x40753) ?x40755)))
 (= ?x40756 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40839 (* ?x39450 l_0_8_87)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40837 (* ?x39447 l_0_8_86)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40835 (* ?x39444 l_0_8_85)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40833 (* ?x39441 l_0_8_84)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40831 (* ?x39438 l_0_8_83)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40829 (* ?x39435 l_0_8_82)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40827 (* ?x39412 l_0_8_42)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40825 (* ?x39409 l_0_8_41)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40823 (* ?x39406 l_0_8_40)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40821 (* ?x39403 l_0_8_39)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x40819 (* ?x39400 l_0_8_38)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x40817 (* ?x39393 l_0_8_37)))
 (let ((?x40815 (* l_0_8_156 l_0_8_156)))
 (let ((?x40813 (* l_0_8_155 l_0_8_155)))
 (let ((?x40811 (* l_0_8_154 l_0_8_154)))
 (let ((?x40809 (* l_0_8_153 l_0_8_153)))
 (let ((?x40807 (* l_0_8_152 l_0_8_152)))
 (let ((?x40805 (* l_0_8_151 l_0_8_151)))
 (let ((?x40803 (* l_0_8_111 l_0_8_111)))
 (let ((?x40801 (* l_0_8_110 l_0_8_110)))
 (let ((?x40790 (* l_0_8_109 l_0_8_109)))
 (let ((?x40787 (* l_0_8_108 l_0_8_108)))
 (let ((?x40789 (- (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x40787)))
 (let ((?x40812 (+ (+ (+ (+ (- (- (- ?x40789 ?x40790) ?x40801) ?x40803) ?x40805) ?x40807) ?x40809) ?x40811)))
 (let ((?x40816 (+ (+ ?x40812 ?x40813) ?x40815)))
 (let ((?x40830 (+ (- (- (- (- (- (- ?x40816 ?x40817) ?x40819) ?x40821) ?x40823) ?x40825) ?x40827) ?x40829)))
 (= (+ (+ (+ (+ (+ ?x40830 ?x40831) ?x40833) ?x40835) ?x40837) ?x40839) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40929 (* l_0_8_73 l_0_8_73)))
 (let ((?x40927 (* l_0_8_72 l_0_8_72)))
 (let ((?x40925 (* l_0_8_71 l_0_8_71)))
 (let ((?x40923 (* l_0_8_70 l_0_8_70)))
 (let ((?x40921 (* l_0_8_69 l_0_8_69)))
 (let ((?x40919 (* l_0_8_68 l_0_8_68)))
 (let ((?x40917 (* l_0_8_67 l_0_8_67)))
 (let ((?x40915 (* l_0_8_28 l_0_8_28)))
 (let ((?x40913 (* l_0_8_27 l_0_8_27)))
 (let ((?x40911 (* l_0_8_26 l_0_8_26)))
 (let ((?x40895 (* l_0_8_25 l_0_8_25)))
 (let ((?x40892 (* l_0_8_24 l_0_8_24)))
 (let ((?x40910 (- (- (- (* (- l_0_8_22) l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40892) ?x40895)))
 (let ((?x40924 (+ (+ (+ (+ (- (- (- ?x40910 ?x40911) ?x40913) ?x40915) ?x40917) ?x40919) ?x40921) ?x40923)))
 (= (+ (+ (+ ?x40924 ?x40925) ?x40927) ?x40929) 0.0))))))))))))))))
(assert
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x40989 (* ?x40988 l_0_8_80)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x40986 (* ?x40985 l_0_8_79)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x40983 (* ?x40982 l_0_8_78)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x40980 (* ?x40979 l_0_8_77)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x40977 (* ?x40976 l_0_8_76)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x40974 (* ?x40973 l_0_8_75)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x40971 (* ?x40970 l_0_8_74)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x40968 (* ?x40967 l_0_8_35)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x40965 (* ?x40964 l_0_8_34)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x40962 (* ?x40961 l_0_8_33)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x40959 (* ?x40958 l_0_8_32)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40956 (* ?x39966 l_0_8_31)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40954 (* ?x39763 l_0_8_30)))
 (let ((?x40963 (- (- (- (- (* (* (- 2.0) l_0_8_22) l_0_8_29) ?x40954) ?x40956) ?x40959) ?x40962)))
 (let ((?x40984 (+ (+ (+ (+ (+ (- (- ?x40963 ?x40965) ?x40968) ?x40971) ?x40974) ?x40977) ?x40980) ?x40983)))
 (= (+ (+ ?x40984 ?x40986) ?x40989) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x41057 (* ?x40988 l_0_8_88)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x41055 (* ?x40985 l_0_8_87)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x41053 (* ?x40982 l_0_8_86)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x41051 (* ?x40979 l_0_8_85)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x41049 (* ?x40976 l_0_8_84)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x41047 (* ?x40973 l_0_8_83)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x41045 (* ?x40970 l_0_8_82)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x41043 (* ?x40967 l_0_8_43)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x41041 (* ?x40964 l_0_8_42)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x41039 (* ?x40961 l_0_8_41)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x41027 (* ?x40958 l_0_8_40)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x41023 (* ?x39966 l_0_8_39)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x41019 (* ?x39763 l_0_8_38)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x7079 (* ?x4134 l_0_8_37)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x39598 (* ?x39597 l_0_8_162)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x39595 (* ?x39594 l_0_8_161)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x39592 (* ?x39591 l_0_8_160)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x39589 (* ?x39588 l_0_8_159)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x39586 (* ?x39585 l_0_8_158)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x39583 (* ?x39582 l_0_8_157)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x39580 (* ?x39579 l_0_8_117)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x39577 (* ?x39576 l_0_8_116)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x39574 (* ?x39573 l_0_8_115)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x39571 (* ?x39570 l_0_8_114)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39568 (* ?x39567 l_0_8_113)))
 (let ((?x39716 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_112) ?x39568) ?x39571) ?x39574) ?x39577)))
 (let ((?x39723 (+ (+ (+ (+ (+ (+ (- ?x39716 ?x39580) ?x39583) ?x39586) ?x39589) ?x39592) ?x39595) ?x39598)))
 (let ((?x41044 (- (- (- (- (- (- (- ?x39723 ?x7079) ?x41019) ?x41023) ?x41027) ?x41039) ?x41041) ?x41043)))
 (let ((?x41058 (+ (+ (+ (+ (+ (+ (+ ?x41044 ?x41045) ?x41047) ?x41049) ?x41051) ?x41053) ?x41055) ?x41057)))
 (= ?x41058 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41136 (* l_0_8_81 l_0_8_81)))
 (let ((?x41134 (* l_0_8_80 l_0_8_80)))
 (let ((?x41132 (* l_0_8_79 l_0_8_79)))
 (let ((?x41130 (* l_0_8_78 l_0_8_78)))
 (let ((?x41128 (* l_0_8_77 l_0_8_77)))
 (let ((?x41126 (* l_0_8_76 l_0_8_76)))
 (let ((?x41124 (* l_0_8_75 l_0_8_75)))
 (let ((?x41122 (* l_0_8_74 l_0_8_74)))
 (let ((?x41120 (* l_0_8_36 l_0_8_36)))
 (let ((?x41118 (* l_0_8_35 l_0_8_35)))
 (let ((?x41116 (* l_0_8_34 l_0_8_34)))
 (let ((?x41114 (* l_0_8_33 l_0_8_33)))
 (let ((?x41112 (* l_0_8_32 l_0_8_32)))
 (let ((?x41110 (* l_0_8_31 l_0_8_31)))
 (let ((?x41113 (- (- (- (* (- l_0_8_29) l_0_8_29) (* l_0_8_30 l_0_8_30)) ?x41110) ?x41112)))
 (let ((?x41127 (+ (+ (+ (- (- (- (- ?x41113 ?x41114) ?x41116) ?x41118) ?x41120) ?x41122) ?x41124) ?x41126)))
 (= (+ (+ (+ (+ (+ ?x41127 ?x41128) ?x41130) ?x41132) ?x41134) ?x41136) 0.0))))))))))))))))))
(assert
 (let ((?x41227 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41224 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41221 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41218 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41215 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41212 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41209 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41206 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41203 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41200 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41197 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41194 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41191 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x41188 (* ?x39999 l_0_8_39)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x41186 (* ?x39996 l_0_8_38)))
 (let ((?x40219 (* 2.0 l_0_8_29)))
 (let ((?x41184 (* ?x40219 l_0_8_37)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41182 (* ?x39597 l_0_8_169)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41180 (* ?x39594 l_0_8_168)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41178 (* ?x39591 l_0_8_167)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41176 (* ?x39588 l_0_8_166)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41174 (* ?x39585 l_0_8_165)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41172 (* ?x39582 l_0_8_164)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41170 (* ?x39579 l_0_8_124)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41168 (* ?x39576 l_0_8_123)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41166 (* ?x39573 l_0_8_122)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41164 (* ?x39570 l_0_8_121)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41162 (* ?x39567 l_0_8_120)))
 (let ((?x41169 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_119) ?x41162) ?x41164) ?x41166) ?x41168)))
 (let ((?x41183 (+ (+ (+ (+ (+ (+ (- ?x41169 ?x41170) ?x41172) ?x41174) ?x41176) ?x41178) ?x41180) ?x41182)))
 (let ((?x41201 (- (- (- (- (- (- (- ?x41183 ?x41184) ?x41186) ?x41188) ?x41191) ?x41194) ?x41197) ?x41200)))
 (let ((?x41222 (+ (+ (+ (+ (+ (+ (- ?x41201 ?x41203) ?x41206) ?x41209) ?x41212) ?x41215) ?x41218) ?x41221)))
 (= (+ (+ ?x41222 ?x41224) ?x41227) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41373 (* l_0_8_90 l_0_8_90)))
 (let ((?x41371 (* l_0_8_89 l_0_8_89)))
 (let ((?x41369 (* l_0_8_88 l_0_8_88)))
 (let ((?x41367 (* l_0_8_87 l_0_8_87)))
 (let ((?x41365 (* l_0_8_86 l_0_8_86)))
 (let ((?x41363 (* l_0_8_85 l_0_8_85)))
 (let ((?x41361 (* l_0_8_84 l_0_8_84)))
 (let ((?x41359 (* l_0_8_83 l_0_8_83)))
 (let ((?x41357 (* l_0_8_82 l_0_8_82)))
 (let ((?x41355 (* l_0_8_45 l_0_8_45)))
 (let ((?x41353 (* l_0_8_44 l_0_8_44)))
 (let ((?x41351 (* l_0_8_43 l_0_8_43)))
 (let ((?x41349 (* l_0_8_42 l_0_8_42)))
 (let ((?x41347 (* l_0_8_41 l_0_8_41)))
 (let ((?x41345 (* l_0_8_40 l_0_8_40)))
 (let ((?x41343 (* l_0_8_39 l_0_8_39)))
 (let ((?x41341 (* l_0_8_38 l_0_8_38)))
 (let ((?x41339 (* l_0_8_37 l_0_8_37)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41337 (* ?x39597 l_0_8_177)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41335 (* ?x39594 l_0_8_176)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41333 (* ?x39591 l_0_8_175)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41331 (* ?x39588 l_0_8_174)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41329 (* ?x39585 l_0_8_173)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41327 (* ?x39582 l_0_8_172)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41325 (* ?x39579 l_0_8_132)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41306 (* ?x39576 l_0_8_131)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41302 (* ?x39573 l_0_8_130)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41298 (* ?x39570 l_0_8_129)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41294 (* ?x39567 l_0_8_128)))
 (let ((?x41307 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_127) ?x41294) ?x41298) ?x41302) ?x41306)))
 (let ((?x41338 (+ (+ (+ (+ (+ (+ (- ?x41307 ?x41325) ?x41327) ?x41329) ?x41331) ?x41333) ?x41335) ?x41337)))
 (let ((?x41352 (- (- (- (- (- (- (- ?x41338 ?x41339) ?x41341) ?x41343) ?x41345) ?x41347) ?x41349) ?x41351)))
 (let ((?x41366 (+ (+ (+ (+ (+ (- (- ?x41352 ?x41353) ?x41355) ?x41357) ?x41359) ?x41361) ?x41363) ?x41365)))
 (= (+ (+ (+ (+ ?x41366 ?x41367) ?x41369) ?x41371) ?x41373) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39317 (* l_0_8_46 l_0_8_46)))
 (let ((?x41455 (- (- (* (- l_0_8_1) l_0_8_1) (* (* 2.0 l_0_8_187) l_0_8_191)) (* (* 2.0 l_0_8_188) l_0_8_192))))
 (let ((?x41461 (- (- ?x41455 (* (* 2.0 l_0_8_189) l_0_8_193)) (* (* 2.0 l_0_8_190) l_0_8_194))))
 (let ((?x41467 (- (- ?x41461 (* (* 2.0 l_0_8_277) l_0_8_281)) (* (* 2.0 l_0_8_278) l_0_8_282))))
 (let ((?x41473 (- (- ?x41467 (* (* 2.0 l_0_8_279) l_0_8_283)) (* (* 2.0 l_0_8_280) l_0_8_284))))
 (let ((?x41479 (- (- ?x41473 (* (* 2.0 l_0_8_322) l_0_8_326)) (* (* 2.0 l_0_8_323) l_0_8_327))))
 (let ((?x41485 (- (- ?x41479 (* (* 2.0 l_0_8_324) l_0_8_328)) (* (* 2.0 l_0_8_325) l_0_8_329))))
 (let ((?x41491 (- (- ?x41485 (* (* 2.0 l_0_8_367) l_0_8_371)) (* (* 2.0 l_0_8_368) l_0_8_372))))
 (let ((?x41497 (- (- ?x41491 (* (* 2.0 l_0_8_369) l_0_8_373)) (* (* 2.0 l_0_8_370) l_0_8_374))))
 (let ((?x41503 (- (- ?x41497 (* (* 2.0 l_0_8_412) l_0_8_416)) (* (* 2.0 l_0_8_413) l_0_8_417))))
 (let ((?x41509 (- (- ?x41503 (* (* 2.0 l_0_8_414) l_0_8_418)) (* (* 2.0 l_0_8_415) l_0_8_419))))
 (= (+ ?x41509 ?x39317) 0.0)))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x11697 (* ?x11699 l_0_8_47)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x41591 (* ?x39652 l_0_8_146)))
 (let ((?x41586 (* 2.0 l_0_8_101)))
 (let ((?x41589 (* ?x41586 l_0_8_91)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x22701 (* ?x28152 l_0_8_2)))
 (= (+ (+ (- ?x22701 ?x41589) ?x41591) ?x11697) 0.0))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40135 (* ?x40134 l_0_8_59)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40132 (* ?x40131 l_0_8_58)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40129 (* ?x40128 l_0_8_57)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40126 (* ?x40125 l_0_8_56)))
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39433 (* ?x11699 l_0_8_49)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x41623 (* ?x41622 l_0_8_239)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x41620 (* ?x41619 l_0_8_238)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x41617 (* ?x41616 l_0_8_237)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x41614 (* ?x41613 l_0_8_236)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40117 (* ?x39913 l_0_8_9)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40115 (* ?x11801 l_0_8_8)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x40113 (* ?x12393 l_0_8_7)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x39391 (* ?x28152 l_0_8_4)))
 (let ((?x41612 (+ (+ (+ (+ ?x39391 (* (* 2.0 l_0_8_10) l_0_8_14)) ?x40113) ?x40115) ?x40117)))
 (let ((?x41627 (- (- (+ (- (- (- (- ?x41612 ?x41614) ?x41617) ?x41620) ?x41623) ?x39433) ?x40126) ?x40129)))
 (= (- (- ?x41627 ?x40132) ?x40135) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39524 (* ?x11699 l_0_8_52)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_7) ?x39524) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39530 (* ?x11699 l_0_8_56)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_11) ?x39530) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39540 (* ?x11699 l_0_8_61)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_16) ?x39540) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39550 (* ?x11699 l_0_8_67)))
 (= (+ (* (* (- 2.0) l_0_8_1) l_0_8_22) ?x39550) 0.0))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39606 (* ?x11699 l_0_8_74)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x41623 (* ?x41622 l_0_8_239)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x41620 (* ?x41619 l_0_8_238)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x41617 (* ?x41616 l_0_8_237)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x41614 (* ?x41613 l_0_8_236)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x41661 (* ?x40286 l_0_8_149)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x41659 (* ?x40283 l_0_8_148)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x41657 (* ?x40280 l_0_8_147)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x41655 (* ?x40277 l_0_8_146)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41653 (* ?x40549 l_0_8_99)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41651 (* ?x40544 l_0_8_98)))
 (let ((?x41586 (* 2.0 l_0_8_101)))
 (let ((?x41649 (* ?x41586 l_0_8_97)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x39558 (* ?x28152 l_0_8_29)))
 (let ((?x41654 (+ (+ (+ (+ ?x39558 (* (* 2.0 l_0_8_100) l_0_8_104)) ?x41649) ?x41651) ?x41653)))
 (let ((?x41665 (+ (+ (+ (- (- (- (- ?x41654 ?x41655) ?x41657) ?x41659) ?x41661) ?x41614) ?x41617) ?x41620)))
 (= (+ (+ ?x41665 ?x41623) ?x39606) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39655 (* ?x11699 l_0_8_82)))
 (let ((?x28152 (* (- 2.0) l_0_8_1)))
 (let ((?x28217 (* ?x28152 l_0_8_37)))
 (= (+ ?x28217 ?x39655) 0.0))))))
(assert
 (let ((?x39675 (* l_0_8_48 l_0_8_48)))
 (let ((?x39673 (* l_0_8_47 l_0_8_47)))
 (let ((?x39671 (* l_0_8_3 l_0_8_3)))
 (let ((?x39679 (* l_0_8_2 l_0_8_2)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x41699 (* ?x39808 l_0_8_147)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x41697 (* ?x39805 l_0_8_146)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41695 (* ?x40544 l_0_8_93)))
 (let ((?x41700 (+ (+ (- (* (* (- 2.0) l_0_8_101) l_0_8_92) ?x41695) ?x41697) ?x41699)))
 (= (+ (+ (- (- ?x41700 ?x39679) ?x39671) ?x39673) ?x39675) 0.0)))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39697 (* ?x39696 l_0_8_50)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39694 (* ?x39693 l_0_8_49)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39691 (* ?x39690 l_0_8_5)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41739 (* ?x39724 l_0_8_4)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x41737 (* ?x40033 l_0_8_148)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x41735 (* ?x40030 l_0_8_147)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x41733 (* ?x40027 l_0_8_146)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41731 (* ?x40549 l_0_8_96)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41729 (* ?x40544 l_0_8_95)))
 (let ((?x41736 (+ (+ (- (- (* (* (- 2.0) l_0_8_101) l_0_8_94) ?x41729) ?x41731) ?x41733) ?x41735)))
 (let ((?x41738 (+ ?x41736 ?x41737)))
 (= (+ (+ (- (- ?x41738 ?x41739) ?x39691) ?x39694) ?x39697) 0.0))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39731 (* ?x39696 l_0_8_53)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39729 (* ?x39693 l_0_8_52)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39727 (* ?x39690 l_0_8_8)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39725 (* ?x39724 l_0_8_7)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x41661 (* ?x40286 l_0_8_149)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x41659 (* ?x40283 l_0_8_148)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x41657 (* ?x40280 l_0_8_147)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x41655 (* ?x40277 l_0_8_146)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41653 (* ?x40549 l_0_8_99)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41651 (* ?x40544 l_0_8_98)))
 (let ((?x41586 (* 2.0 l_0_8_101)))
 (let ((?x41649 (* ?x41586 l_0_8_97)))
 (let ((?x41767 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_104) ?x41649) ?x41651) ?x41653) ?x41655)))
 (let ((?x41770 (+ (+ (+ ?x41767 ?x41657) ?x41659) ?x41661)))
 (= (+ (+ (- (- ?x41770 ?x39725) ?x39727) ?x39729) ?x39731) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x11846 (* ?x39696 l_0_8_57)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x11828 (* ?x39693 l_0_8_56)))
 (let ((?x41803 (* l_0_8_150 l_0_8_150)))
 (let ((?x41801 (* l_0_8_149 l_0_8_149)))
 (let ((?x41799 (* l_0_8_148 l_0_8_148)))
 (let ((?x41797 (* l_0_8_147 l_0_8_147)))
 (let ((?x41795 (* l_0_8_146 l_0_8_146)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x28207 (* ?x11801 l_0_8_3)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x41792 (* ?x12393 l_0_8_2)))
 (let ((?x41790 (* l_0_8_105 l_0_8_105)))
 (let ((?x41788 (* l_0_8_104 l_0_8_104)))
 (let ((?x41786 (* l_0_8_103 l_0_8_103)))
 (let ((?x41787 (- (- (* (- l_0_8_101) l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x41786)))
 (let ((?x41791 (- (- ?x41787 ?x41788) ?x41790)))
 (let ((?x41804 (+ (+ (+ (+ (+ (- (- ?x41791 ?x41792) ?x28207) ?x41795) ?x41797) ?x41799) ?x41801) ?x41803)))
 (= (+ (+ ?x41804 ?x11828) ?x11846) 0.0)))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39747 (* ?x39696 l_0_8_62)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39745 (* ?x39693 l_0_8_61)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x11975 (* ?x39400 l_0_8_3)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x41834 (* ?x39393 l_0_8_2)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x40589 (* ?x40588 l_0_8_155)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x40584 (* ?x40583 l_0_8_154)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x40581 (* ?x40580 l_0_8_153)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x40578 (* ?x40577 l_0_8_152)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x40575 (* ?x40574 l_0_8_151)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x40564 (* ?x40563 l_0_8_110)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x40561 (* ?x40560 l_0_8_109)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x40558 (* ?x40549 l_0_8_108)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x40546 (* ?x40544 l_0_8_107)))
 (let ((?x40565 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_106) ?x40546) ?x40558) ?x40561) ?x40564)))
 (let ((?x41836 (- (- (+ (+ (+ (+ (+ ?x40565 ?x40575) ?x40578) ?x40581) ?x40584) ?x40589) ?x41834) ?x11975)))
 (= (+ (+ ?x41836 ?x39745) ?x39747) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39768 (* ?x39696 l_0_8_68)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39766 (* ?x39693 l_0_8_67)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39764 (* ?x39763 l_0_8_3)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41863 (* ?x39724 l_0_8_22)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41861 (* ?x40588 l_0_8_161)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41859 (* ?x40583 l_0_8_160)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41857 (* ?x40580 l_0_8_159)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41855 (* ?x40577 l_0_8_158)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41853 (* ?x40574 l_0_8_157)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41851 (* ?x40563 l_0_8_116)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41849 (* ?x40560 l_0_8_115)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41847 (* ?x40549 l_0_8_114)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41845 (* ?x40544 l_0_8_113)))
 (let ((?x41852 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_112) ?x41845) ?x41847) ?x41849) ?x41851)))
 (let ((?x41862 (+ (+ (+ (+ (+ ?x41852 ?x41853) ?x41855) ?x41857) ?x41859) ?x41861)))
 (= (+ (+ (- (- ?x41862 ?x41863) ?x39764) ?x39766) ?x39768) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39787 (* ?x39696 l_0_8_75)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39785 (* ?x39693 l_0_8_74)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39778 (* ?x39690 l_0_8_30)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41921 (* ?x39724 l_0_8_29)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41919 (* ?x40588 l_0_8_168)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41917 (* ?x40583 l_0_8_167)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41915 (* ?x40580 l_0_8_166)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41913 (* ?x40577 l_0_8_165)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41911 (* ?x40574 l_0_8_164)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41909 (* ?x40563 l_0_8_123)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41907 (* ?x40560 l_0_8_122)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41905 (* ?x40549 l_0_8_121)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41903 (* ?x40544 l_0_8_120)))
 (let ((?x41910 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_119) ?x41903) ?x41905) ?x41907) ?x41909)))
 (let ((?x41920 (+ (+ (+ (+ (+ ?x41910 ?x41911) ?x41913) ?x41915) ?x41917) ?x41919)))
 (= (+ (+ (- (- ?x41920 ?x41921) ?x39778) ?x39785) ?x39787) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39817 (* ?x39696 l_0_8_83)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39815 (* ?x39693 l_0_8_82)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39813 (* ?x39690 l_0_8_38)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39811 (* ?x39724 l_0_8_37)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41971 (* ?x40588 l_0_8_176)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41969 (* ?x40583 l_0_8_175)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41967 (* ?x40580 l_0_8_174)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41965 (* ?x40577 l_0_8_173)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41963 (* ?x40574 l_0_8_172)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41961 (* ?x40563 l_0_8_131)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41959 (* ?x40560 l_0_8_130)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41957 (* ?x40549 l_0_8_129)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41955 (* ?x40544 l_0_8_128)))
 (let ((?x41962 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_127) ?x41955) ?x41957) ?x41959) ?x41961)))
 (let ((?x41972 (+ (+ (+ (+ (+ ?x41962 ?x41963) ?x41965) ?x41967) ?x41969) ?x41971)))
 (= (+ (+ (- (- ?x41972 ?x39811) ?x39813) ?x39815) ?x39817) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x39852 (* l_0_8_6 l_0_8_6)))
 (let ((?x39850 (* l_0_8_51 l_0_8_51)))
 (let ((?x39848 (* l_0_8_50 l_0_8_50)))
 (let ((?x39846 (* l_0_8_5 l_0_8_5)))
 (let ((?x39849 (+ (- (+ (* (- l_0_8_4) l_0_8_4) (* l_0_8_49 l_0_8_49)) ?x39846) ?x39848)))
 (= (- (+ ?x39849 ?x39850) ?x39852) 0.0)))))))
(assert
 (let ((?x39882 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39879 (* ?x39878 l_0_8_54)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39876 (* ?x39875 l_0_8_53)))
 (let ((?x39873 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39870 (* ?x39869 l_0_8_52)))
 (let ((?x39880 (+ (+ (- (+ (* (* (- 2.0) l_0_8_4) l_0_8_7) ?x39870) ?x39873) ?x39876) ?x39879)))
 (= (- ?x39880 ?x39882) 0.0)))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39920 (* ?x39878 l_0_8_58)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39918 (* ?x39875 l_0_8_57)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39916 (* ?x39869 l_0_8_56)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x39914 (* ?x39913 l_0_8_6)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x39911 (* ?x11801 l_0_8_5)))
 (let ((?x39919 (+ (+ (- (- (* (* (- 2.0) l_0_8_11) l_0_8_4) ?x39911) ?x39914) ?x39916) ?x39918)))
 (= (+ ?x39919 ?x39920) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39944 (* ?x39878 l_0_8_63)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39942 (* ?x39875 l_0_8_62)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39940 (* ?x39869 l_0_8_61)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28397 (* ?x39403 l_0_8_6)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28396 (* ?x39400 l_0_8_5)))
 (let ((?x39943 (+ (+ (- (- (* (* (- 2.0) l_0_8_16) l_0_8_4) ?x28396) ?x28397) ?x39940) ?x39942)))
 (= (+ ?x39943 ?x39944) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39973 (* ?x39878 l_0_8_69)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39971 (* ?x39875 l_0_8_68)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39969 (* ?x39869 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x39967 (* ?x39966 l_0_8_6)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39958 (* ?x39763 l_0_8_5)))
 (let ((?x39972 (+ (+ (- (- (* (* (- 2.0) l_0_8_22) l_0_8_4) ?x39958) ?x39967) ?x39969) ?x39971)))
 (= (+ ?x39972 ?x39973) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40006 (* ?x39878 l_0_8_76)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40004 (* ?x39875 l_0_8_75)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40002 (* ?x39869 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40000 (* ?x39999 l_0_8_6)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x39997 (* ?x39996 l_0_8_5)))
 (let ((?x40005 (+ (+ (- (- (* (* (- 2.0) l_0_8_29) l_0_8_4) ?x39997) ?x40000) ?x40002) ?x40004)))
 (= (+ ?x40005 ?x40006) 0.0)))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40049 (* ?x39878 l_0_8_84)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40047 (* ?x39875 l_0_8_83)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40045 (* ?x39869 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40043 (* ?x40042 l_0_8_6)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40040 (* ?x40039 l_0_8_5)))
 (let ((?x42001 (+ (+ (- (- (* (* (- 2.0) l_0_8_37) l_0_8_4) ?x40040) ?x40043) ?x40045) ?x40047)))
 (= (+ ?x42001 ?x40049) 0.0)))))))))))))
(assert
 (let ((?x40101 (* l_0_8_9 l_0_8_9)))
 (let ((?x40099 (* l_0_8_8 l_0_8_8)))
 (let ((?x40097 (* l_0_8_7 l_0_8_7)))
 (let ((?x40095 (* l_0_8_55 l_0_8_55)))
 (let ((?x40093 (* l_0_8_54 l_0_8_54)))
 (let ((?x40091 (* l_0_8_53 l_0_8_53)))
 (let ((?x40094 (+ (+ (+ (* (- l_0_8_10) l_0_8_10) (* l_0_8_52 l_0_8_52)) ?x40091) ?x40093)))
 (= (- (- (- (+ ?x40094 ?x40095) ?x40097) ?x40099) ?x40101) 0.0)))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40135 (* ?x40134 l_0_8_59)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40132 (* ?x40131 l_0_8_58)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40129 (* ?x40128 l_0_8_57)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40126 (* ?x40125 l_0_8_56)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40117 (* ?x39913 l_0_8_9)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40115 (* ?x11801 l_0_8_8)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x40113 (* ?x12393 l_0_8_7)))
 (let ((?x40118 (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_14) ?x40113) ?x40115) ?x40117)))
 (= (+ (+ (+ (+ ?x40118 ?x40126) ?x40129) ?x40132) ?x40135) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40163 (* ?x40134 l_0_8_64)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40161 (* ?x40131 l_0_8_63)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40159 (* ?x40128 l_0_8_62)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x28435 (* ?x40125 l_0_8_61)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28441 (* ?x39403 l_0_8_9)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28446 (* ?x39400 l_0_8_8)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x28451 (* ?x39393 l_0_8_7)))
 (let ((?x40158 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_19) ?x28451) ?x28446) ?x28441) ?x28435)))
 (= (+ (+ (+ ?x40158 ?x40159) ?x40161) ?x40163) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40197 (* ?x40134 l_0_8_70)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40195 (* ?x40131 l_0_8_69)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40193 (* ?x40128 l_0_8_68)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40191 (* ?x40125 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40189 (* ?x39966 l_0_8_9)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40180 (* ?x39763 l_0_8_8)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x28513 (* ?x4134 l_0_8_7)))
 (let ((?x40192 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_25) ?x28513) ?x40180) ?x40189) ?x40191)))
 (= (+ (+ (+ ?x40192 ?x40193) ?x40195) ?x40197) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40241 (* ?x40134 l_0_8_77)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40239 (* ?x40131 l_0_8_76)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40237 (* ?x40128 l_0_8_75)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40235 (* ?x40125 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40233 (* ?x39999 l_0_8_9)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x40224 (* ?x39996 l_0_8_8)))
 (let ((?x40219 (* 2.0 l_0_8_29)))
 (let ((?x40221 (* ?x40219 l_0_8_7)))
 (let ((?x40236 (+ (- (- (- (* (* (- 2.0) l_0_8_10) l_0_8_32) ?x40221) ?x40224) ?x40233) ?x40235)))
 (= (+ (+ (+ ?x40236 ?x40237) ?x40239) ?x40241) 0.0)))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40301 (* ?x40134 l_0_8_85)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40299 (* ?x40131 l_0_8_84)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40297 (* ?x40128 l_0_8_83)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40295 (* ?x40125 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40293 (* ?x40042 l_0_8_9)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40291 (* ?x40039 l_0_8_8)))
 (let ((?x40036 (* 2.0 l_0_8_37)))
 (let ((?x40289 (* ?x40036 l_0_8_7)))
 (let ((?x12413 (* (- 2.0) l_0_8_10)))
 (let ((?x28526 (* ?x12413 l_0_8_40)))
 (let ((?x42026 (+ (+ (+ (+ (- (- (- ?x28526 ?x40289) ?x40291) ?x40293) ?x40295) ?x40297) ?x40299) ?x40301)))
 (= ?x42026 0.0)))))))))))))))))))
(assert
 (let ((?x40374 (* l_0_8_60 l_0_8_60)))
 (let ((?x40372 (* l_0_8_59 l_0_8_59)))
 (let ((?x40370 (* l_0_8_58 l_0_8_58)))
 (let ((?x40368 (* l_0_8_57 l_0_8_57)))
 (let ((?x40366 (* l_0_8_56 l_0_8_56)))
 (let ((?x40364 (* l_0_8_15 l_0_8_15)))
 (let ((?x40362 (* l_0_8_14 l_0_8_14)))
 (let ((?x40349 (* l_0_8_13 l_0_8_13)))
 (let ((?x40363 (- (- (- (* (- l_0_8_11) l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x40349) ?x40362)))
 (= (+ (+ (+ (+ (+ (- ?x40363 ?x40364) ?x40366) ?x40368) ?x40370) ?x40372) ?x40374) 0.0)))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40418 (* ?x40417 l_0_8_65)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40415 (* ?x40414 l_0_8_64)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40412 (* ?x40411 l_0_8_63)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40409 (* ?x40408 l_0_8_62)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40406 (* ?x40405 l_0_8_61)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40403 (* ?x40402 l_0_8_20)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40400 (* ?x40399 l_0_8_19)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40397 (* ?x39913 l_0_8_18)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40395 (* ?x11801 l_0_8_17)))
 (let ((?x40404 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_16) ?x40395) ?x40397) ?x40400) ?x40403)))
 (= (+ (+ (+ (+ (+ ?x40404 ?x40406) ?x40409) ?x40412) ?x40415) ?x40418) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40468 (* ?x40417 l_0_8_71)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40466 (* ?x40414 l_0_8_70)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40464 (* ?x40411 l_0_8_69)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40462 (* ?x40408 l_0_8_68)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40460 (* ?x40405 l_0_8_67)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40458 (* ?x40402 l_0_8_26)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40448 (* ?x40399 l_0_8_25)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40445 (* ?x39913 l_0_8_24)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40441 (* ?x11801 l_0_8_23)))
 (let ((?x40459 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_22) ?x40441) ?x40445) ?x40448) ?x40458)))
 (= (+ (+ (+ (+ (+ ?x40459 ?x40460) ?x40462) ?x40464) ?x40466) ?x40468) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40517 (* ?x40417 l_0_8_78)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40515 (* ?x40414 l_0_8_77)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40513 (* ?x40411 l_0_8_76)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40511 (* ?x40408 l_0_8_75)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40509 (* ?x40405 l_0_8_74)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40507 (* ?x40402 l_0_8_33)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40505 (* ?x40399 l_0_8_32)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40503 (* ?x39913 l_0_8_31)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40501 (* ?x11801 l_0_8_30)))
 (let ((?x40508 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_29) ?x40501) ?x40503) ?x40505) ?x40507)))
 (= (+ (+ (+ (+ (+ ?x40508 ?x40509) ?x40511) ?x40513) ?x40515) ?x40517) 0.0)))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40599 (* ?x40417 l_0_8_86)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40597 (* ?x40414 l_0_8_85)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40595 (* ?x40411 l_0_8_84)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40593 (* ?x40408 l_0_8_83)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40591 (* ?x40405 l_0_8_82)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40586 (* ?x40402 l_0_8_41)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40572 (* ?x40399 l_0_8_40)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40570 (* ?x39913 l_0_8_39)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40568 (* ?x11801 l_0_8_38)))
 (let ((?x42044 (- (- (- (- (* (* (- 2.0) l_0_8_11) l_0_8_37) ?x40568) ?x40570) ?x40572) ?x40586)))
 (= (+ (+ (+ (+ (+ ?x42044 ?x40591) ?x40593) ?x40595) ?x40597) ?x40599) 0.0)))))))))))))))))))))
(assert
 (let ((?x40692 (* l_0_8_66 l_0_8_66)))
 (let ((?x40690 (* l_0_8_65 l_0_8_65)))
 (let ((?x40688 (* l_0_8_64 l_0_8_64)))
 (let ((?x40686 (* l_0_8_63 l_0_8_63)))
 (let ((?x40684 (* l_0_8_62 l_0_8_62)))
 (let ((?x40682 (* l_0_8_61 l_0_8_61)))
 (let ((?x40680 (* l_0_8_21 l_0_8_21)))
 (let ((?x40678 (* l_0_8_20 l_0_8_20)))
 (let ((?x40663 (* l_0_8_19 l_0_8_19)))
 (let ((?x40660 (* l_0_8_18 l_0_8_18)))
 (let ((?x40677 (- (- (- (* (- l_0_8_16) l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40660) ?x40663)))
 (let ((?x40691 (+ (+ (+ (+ (+ (- (- ?x40677 ?x40678) ?x40680) ?x40682) ?x40684) ?x40686) ?x40688) ?x40690)))
 (= (+ ?x40691 ?x40692) 0.0))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40755 (* ?x39450 l_0_8_79)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40753 (* ?x39447 l_0_8_78)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40751 (* ?x39444 l_0_8_77)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40749 (* ?x39441 l_0_8_76)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40747 (* ?x39438 l_0_8_75)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40745 (* ?x39435 l_0_8_74)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40743 (* ?x39412 l_0_8_34)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40741 (* ?x39409 l_0_8_33)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40739 (* ?x39406 l_0_8_32)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40737 (* ?x39403 l_0_8_31)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28671 (* ?x39400 l_0_8_30)))
 (let ((?x40742 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_29) ?x28671) ?x40737) ?x40739) ?x40741)))
 (let ((?x40756 (+ (+ (+ (+ (+ (+ (- ?x40742 ?x40743) ?x40745) ?x40747) ?x40749) ?x40751) ?x40753) ?x40755)))
 (= ?x40756 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40839 (* ?x39450 l_0_8_87)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40837 (* ?x39447 l_0_8_86)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40835 (* ?x39444 l_0_8_85)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40833 (* ?x39441 l_0_8_84)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40831 (* ?x39438 l_0_8_83)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40829 (* ?x39435 l_0_8_82)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40827 (* ?x39412 l_0_8_42)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40825 (* ?x39409 l_0_8_41)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40823 (* ?x39406 l_0_8_40)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40821 (* ?x39403 l_0_8_39)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x40819 (* ?x39400 l_0_8_38)))
 (let ((?x42069 (- (- (- (- (* (* (- 2.0) l_0_8_16) l_0_8_37) ?x40819) ?x40821) ?x40823) ?x40825)))
 (let ((?x42077 (+ (+ (+ (+ (+ (+ (- ?x42069 ?x40827) ?x40829) ?x40831) ?x40833) ?x40835) ?x40837) ?x40839)))
 (= ?x42077 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40929 (* l_0_8_73 l_0_8_73)))
 (let ((?x40927 (* l_0_8_72 l_0_8_72)))
 (let ((?x40925 (* l_0_8_71 l_0_8_71)))
 (let ((?x40923 (* l_0_8_70 l_0_8_70)))
 (let ((?x40921 (* l_0_8_69 l_0_8_69)))
 (let ((?x40919 (* l_0_8_68 l_0_8_68)))
 (let ((?x40917 (* l_0_8_67 l_0_8_67)))
 (let ((?x40915 (* l_0_8_28 l_0_8_28)))
 (let ((?x40913 (* l_0_8_27 l_0_8_27)))
 (let ((?x40911 (* l_0_8_26 l_0_8_26)))
 (let ((?x40895 (* l_0_8_25 l_0_8_25)))
 (let ((?x40892 (* l_0_8_24 l_0_8_24)))
 (let ((?x40910 (- (- (- (* (- l_0_8_22) l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40892) ?x40895)))
 (let ((?x40924 (+ (+ (+ (+ (- (- (- ?x40910 ?x40911) ?x40913) ?x40915) ?x40917) ?x40919) ?x40921) ?x40923)))
 (= (+ (+ (+ ?x40924 ?x40925) ?x40927) ?x40929) 0.0))))))))))))))))
(assert
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x40989 (* ?x40988 l_0_8_80)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x40986 (* ?x40985 l_0_8_79)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x40983 (* ?x40982 l_0_8_78)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x40980 (* ?x40979 l_0_8_77)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x40977 (* ?x40976 l_0_8_76)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x40974 (* ?x40973 l_0_8_75)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x40971 (* ?x40970 l_0_8_74)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x40968 (* ?x40967 l_0_8_35)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x40965 (* ?x40964 l_0_8_34)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x40962 (* ?x40961 l_0_8_33)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x40959 (* ?x40958 l_0_8_32)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40956 (* ?x39966 l_0_8_31)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40954 (* ?x39763 l_0_8_30)))
 (let ((?x40963 (- (- (- (- (* (* (- 2.0) l_0_8_22) l_0_8_29) ?x40954) ?x40956) ?x40959) ?x40962)))
 (let ((?x40984 (+ (+ (+ (+ (+ (- (- ?x40963 ?x40965) ?x40968) ?x40971) ?x40974) ?x40977) ?x40980) ?x40983)))
 (= (+ (+ ?x40984 ?x40986) ?x40989) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x41057 (* ?x40988 l_0_8_88)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x41055 (* ?x40985 l_0_8_87)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x41053 (* ?x40982 l_0_8_86)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x41051 (* ?x40979 l_0_8_85)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x41049 (* ?x40976 l_0_8_84)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x41047 (* ?x40973 l_0_8_83)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x41045 (* ?x40970 l_0_8_82)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x41043 (* ?x40967 l_0_8_43)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x41041 (* ?x40964 l_0_8_42)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x41039 (* ?x40961 l_0_8_41)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x41027 (* ?x40958 l_0_8_40)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x41023 (* ?x39966 l_0_8_39)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x41019 (* ?x39763 l_0_8_38)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x7079 (* ?x4134 l_0_8_37)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x41661 (* ?x40286 l_0_8_149)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x41659 (* ?x40283 l_0_8_148)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x41657 (* ?x40280 l_0_8_147)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x41655 (* ?x40277 l_0_8_146)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41653 (* ?x40549 l_0_8_99)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41651 (* ?x40544 l_0_8_98)))
 (let ((?x41586 (* 2.0 l_0_8_101)))
 (let ((?x41649 (* ?x41586 l_0_8_97)))
 (let ((?x41767 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_104) ?x41649) ?x41651) ?x41653) ?x41655)))
 (let ((?x41770 (+ (+ (+ ?x41767 ?x41657) ?x41659) ?x41661)))
 (let ((?x14558 (- (- (- (- (- (- (- ?x41770 ?x7079) ?x41019) ?x41023) ?x41027) ?x41039) ?x41041) ?x41043)))
 (let ((?x42086 (+ (+ (+ (+ (+ (+ (+ ?x14558 ?x41045) ?x41047) ?x41049) ?x41051) ?x41053) ?x41055) ?x41057)))
 (= ?x42086 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41136 (* l_0_8_81 l_0_8_81)))
 (let ((?x41134 (* l_0_8_80 l_0_8_80)))
 (let ((?x41132 (* l_0_8_79 l_0_8_79)))
 (let ((?x41130 (* l_0_8_78 l_0_8_78)))
 (let ((?x41128 (* l_0_8_77 l_0_8_77)))
 (let ((?x41126 (* l_0_8_76 l_0_8_76)))
 (let ((?x41124 (* l_0_8_75 l_0_8_75)))
 (let ((?x41122 (* l_0_8_74 l_0_8_74)))
 (let ((?x41120 (* l_0_8_36 l_0_8_36)))
 (let ((?x41118 (* l_0_8_35 l_0_8_35)))
 (let ((?x41116 (* l_0_8_34 l_0_8_34)))
 (let ((?x41114 (* l_0_8_33 l_0_8_33)))
 (let ((?x41112 (* l_0_8_32 l_0_8_32)))
 (let ((?x41110 (* l_0_8_31 l_0_8_31)))
 (let ((?x41113 (- (- (- (* (- l_0_8_29) l_0_8_29) (* l_0_8_30 l_0_8_30)) ?x41110) ?x41112)))
 (let ((?x41127 (+ (+ (+ (- (- (- (- ?x41113 ?x41114) ?x41116) ?x41118) ?x41120) ?x41122) ?x41124) ?x41126)))
 (= (+ (+ (+ (+ (+ ?x41127 ?x41128) ?x41130) ?x41132) ?x41134) ?x41136) 0.0))))))))))))))))))
(assert
 (let ((?x41227 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41224 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41221 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41218 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41215 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41212 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41209 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41206 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41203 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41200 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41197 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41194 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41191 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x41188 (* ?x39999 l_0_8_39)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x41186 (* ?x39996 l_0_8_38)))
 (let ((?x15431 (- (- (- (- (* (* (- 2.0) l_0_8_29) l_0_8_37) ?x41186) ?x41188) ?x41191) ?x41194)))
 (let ((?x29108 (+ (+ (+ (+ (- (- (- ?x15431 ?x41197) ?x41200) ?x41203) ?x41206) ?x41209) ?x41212) ?x41215)))
 (= (+ (+ (+ (+ ?x29108 ?x41218) ?x41221) ?x41224) ?x41227) 0.0)))))))))))))))))))))
(assert
 (let ((?x41373 (* l_0_8_90 l_0_8_90)))
 (let ((?x41371 (* l_0_8_89 l_0_8_89)))
 (let ((?x41369 (* l_0_8_88 l_0_8_88)))
 (let ((?x41367 (* l_0_8_87 l_0_8_87)))
 (let ((?x41365 (* l_0_8_86 l_0_8_86)))
 (let ((?x41363 (* l_0_8_85 l_0_8_85)))
 (let ((?x41361 (* l_0_8_84 l_0_8_84)))
 (let ((?x41359 (* l_0_8_83 l_0_8_83)))
 (let ((?x41357 (* l_0_8_82 l_0_8_82)))
 (let ((?x41355 (* l_0_8_45 l_0_8_45)))
 (let ((?x41353 (* l_0_8_44 l_0_8_44)))
 (let ((?x41351 (* l_0_8_43 l_0_8_43)))
 (let ((?x41349 (* l_0_8_42 l_0_8_42)))
 (let ((?x41347 (* l_0_8_41 l_0_8_41)))
 (let ((?x41345 (* l_0_8_40 l_0_8_40)))
 (let ((?x41343 (* l_0_8_39 l_0_8_39)))
 (let ((?x42117 (- (- (- (* (- l_0_8_37) l_0_8_37) (* l_0_8_38 l_0_8_38)) ?x41343) ?x41345)))
 (let ((?x42124 (+ (+ (- (- (- (- (- ?x42117 ?x41347) ?x41349) ?x41351) ?x41353) ?x41355) ?x41357) ?x41359)))
 (let ((?x42131 (+ (+ (+ (+ (+ (+ (+ ?x42124 ?x41361) ?x41363) ?x41365) ?x41367) ?x41369) ?x41371) ?x41373)))
 (= ?x42131 0.0)))))))))))))))))))))
(assert
 (let ((?x39317 (* l_0_8_46 l_0_8_46)))
 (let ((?x38880 (* l_0_8_226 l_0_8_226)))
 (let ((?x29258 (- (- (* l_0_8_1 l_0_8_1) (* (* 2.0 l_0_8_181) l_0_8_184)) ?x38880)))
 (let ((?x15546 (- (- ?x29258 (* (* 2.0 l_0_8_271) l_0_8_274)) (* (* 2.0 l_0_8_316) l_0_8_319))))
 (let ((?x15556 (- (- ?x15546 (* (* 2.0 l_0_8_361) l_0_8_364)) (* (* 2.0 l_0_8_406) l_0_8_409))))
 (= (- ?x15556 ?x39317) 0.0)))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x11697 (* ?x11699 l_0_8_47)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x29167 (* ?x29172 l_0_8_227)))
 (let ((?x15532 (- (* (* 2.0 l_0_8_1) l_0_8_2) (* (* 2.0 l_0_8_182) l_0_8_184))))
 (let ((?x42135 (- (- (- ?x15532 (* (* 2.0 l_0_8_183) l_0_8_185)) ?x29167) (* (* 2.0 l_0_8_272) l_0_8_274))))
 (let ((?x42139 (- (- ?x42135 (* (* 2.0 l_0_8_273) l_0_8_275)) (* (* 2.0 l_0_8_317) l_0_8_319))))
 (let ((?x42143 (- (- ?x42139 (* (* 2.0 l_0_8_318) l_0_8_320)) (* (* 2.0 l_0_8_362) l_0_8_364))))
 (let ((?x42147 (- (- ?x42143 (* (* 2.0 l_0_8_363) l_0_8_365)) (* (* 2.0 l_0_8_407) l_0_8_409))))
 (= (- (- ?x42147 (* (* 2.0 l_0_8_408) l_0_8_410)) ?x11697) 0.0)))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39433 (* ?x11699 l_0_8_49)))
 (let ((?x42188 (* l_0_8_411 l_0_8_411)))
 (let ((?x42186 (* l_0_8_410 l_0_8_410)))
 (let ((?x42184 (* l_0_8_409 l_0_8_409)))
 (let ((?x42182 (* l_0_8_366 l_0_8_366)))
 (let ((?x42180 (* l_0_8_365 l_0_8_365)))
 (let ((?x42178 (* l_0_8_364 l_0_8_364)))
 (let ((?x42176 (* l_0_8_321 l_0_8_321)))
 (let ((?x42174 (* l_0_8_320 l_0_8_320)))
 (let ((?x42172 (* l_0_8_319 l_0_8_319)))
 (let ((?x42170 (* l_0_8_276 l_0_8_276)))
 (let ((?x42168 (* l_0_8_275 l_0_8_275)))
 (let ((?x42166 (* l_0_8_274 l_0_8_274)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42164 (* ?x29172 l_0_8_229)))
 (let ((?x15718 (- (* (* 2.0 l_0_8_1) l_0_8_4) (* (* 1.0 l_0_8_184) l_0_8_184))))
 (let ((?x42163 (- (- ?x15718 (* (* 1.0 l_0_8_185) l_0_8_185)) (* (* 1.0 l_0_8_186) l_0_8_186))))
 (let ((?x42177 (- (- (- (- (- (- (- ?x42163 ?x42164) ?x42166) ?x42168) ?x42170) ?x42172) ?x42174) ?x42176)))
 (let ((?x42190 (- (- (- (- (- (- (- ?x42177 ?x42178) ?x42180) ?x42182) ?x42184) ?x42186) ?x42188) ?x39433)))
 (= ?x42190 0.0))))))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39524 (* ?x11699 l_0_8_52)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x15798 (* ?x29172 l_0_8_232)))
 (let ((?x15801 (- (* (* 2.0 l_0_8_1) l_0_8_7) (* (* 2.0 l_0_8_184) l_0_8_187))))
 (let ((?x15794 (- (- ?x15801 (* (* 2.0 l_0_8_185) l_0_8_188)) (* (* 2.0 l_0_8_186) l_0_8_189))))
 (let ((?x42225 (- (- (- ?x15794 ?x15798) (* (* 2.0 l_0_8_274) l_0_8_277)) (* (* 2.0 l_0_8_275) l_0_8_278))))
 (let ((?x42231 (- (- ?x42225 (* (* 2.0 l_0_8_276) l_0_8_279)) (* (* 2.0 l_0_8_319) l_0_8_322))))
 (let ((?x42237 (- (- ?x42231 (* (* 2.0 l_0_8_320) l_0_8_323)) (* (* 2.0 l_0_8_321) l_0_8_324))))
 (let ((?x42243 (- (- ?x42237 (* (* 2.0 l_0_8_364) l_0_8_367)) (* (* 2.0 l_0_8_365) l_0_8_368))))
 (let ((?x42249 (- (- ?x42243 (* (* 2.0 l_0_8_366) l_0_8_369)) (* (* 2.0 l_0_8_409) l_0_8_412))))
 (let ((?x42255 (- (- ?x42249 (* (* 2.0 l_0_8_410) l_0_8_413)) (* (* 2.0 l_0_8_411) l_0_8_414))))
 (= (- ?x42255 ?x39524) 0.0))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39530 (* ?x11699 l_0_8_56)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42299 (* ?x29172 l_0_8_236)))
 (let ((?x42294 (- (* (* 2.0 l_0_8_1) l_0_8_11) (* (* 2.0 l_0_8_184) l_0_8_191))))
 (let ((?x42298 (- (- ?x42294 (* (* 2.0 l_0_8_185) l_0_8_192)) (* (* 2.0 l_0_8_186) l_0_8_193))))
 (let ((?x42304 (- (- (- ?x42298 ?x42299) (* (* 2.0 l_0_8_274) l_0_8_281)) (* (* 2.0 l_0_8_275) l_0_8_282))))
 (let ((?x42308 (- (- ?x42304 (* (* 2.0 l_0_8_276) l_0_8_283)) (* (* 2.0 l_0_8_319) l_0_8_326))))
 (let ((?x42312 (- (- ?x42308 (* (* 2.0 l_0_8_320) l_0_8_327)) (* (* 2.0 l_0_8_321) l_0_8_328))))
 (let ((?x42316 (- (- ?x42312 (* (* 2.0 l_0_8_364) l_0_8_371)) (* (* 2.0 l_0_8_365) l_0_8_372))))
 (let ((?x42320 (- (- ?x42316 (* (* 2.0 l_0_8_366) l_0_8_373)) (* (* 2.0 l_0_8_409) l_0_8_416))))
 (let ((?x42324 (- (- ?x42320 (* (* 2.0 l_0_8_410) l_0_8_417)) (* (* 2.0 l_0_8_411) l_0_8_418))))
 (= (- ?x42324 ?x39530) 0.0))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39540 (* ?x11699 l_0_8_61)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42344 (* ?x29172 l_0_8_241)))
 (let ((?x29600 (- (* (* 2.0 l_0_8_1) l_0_8_16) (* (* 2.0 l_0_8_184) l_0_8_196))))
 (let ((?x29607 (- (- ?x29600 (* (* 2.0 l_0_8_185) l_0_8_197)) (* (* 2.0 l_0_8_186) l_0_8_198))))
 (let ((?x42349 (- (- (- ?x29607 ?x42344) (* (* 2.0 l_0_8_274) l_0_8_286)) (* (* 2.0 l_0_8_275) l_0_8_287))))
 (let ((?x42353 (- (- ?x42349 (* (* 2.0 l_0_8_276) l_0_8_288)) (* (* 2.0 l_0_8_319) l_0_8_331))))
 (let ((?x42357 (- (- ?x42353 (* (* 2.0 l_0_8_320) l_0_8_332)) (* (* 2.0 l_0_8_321) l_0_8_333))))
 (let ((?x42361 (- (- ?x42357 (* (* 2.0 l_0_8_364) l_0_8_376)) (* (* 2.0 l_0_8_365) l_0_8_377))))
 (let ((?x42365 (- (- ?x42361 (* (* 2.0 l_0_8_366) l_0_8_378)) (* (* 2.0 l_0_8_409) l_0_8_421))))
 (let ((?x42369 (- (- ?x42365 (* (* 2.0 l_0_8_410) l_0_8_422)) (* (* 2.0 l_0_8_411) l_0_8_423))))
 (= (- ?x42369 ?x39540) 0.0))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39550 (* ?x11699 l_0_8_67)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42418 (* ?x29172 l_0_8_247)))
 (let ((?x42413 (- (* (* 2.0 l_0_8_1) l_0_8_22) (* (* 2.0 l_0_8_184) l_0_8_202))))
 (let ((?x42417 (- (- ?x42413 (* (* 2.0 l_0_8_185) l_0_8_203)) (* (* 2.0 l_0_8_186) l_0_8_204))))
 (let ((?x42423 (- (- (- ?x42417 ?x42418) (* (* 2.0 l_0_8_274) l_0_8_292)) (* (* 2.0 l_0_8_275) l_0_8_293))))
 (let ((?x42427 (- (- ?x42423 (* (* 2.0 l_0_8_276) l_0_8_294)) (* (* 2.0 l_0_8_319) l_0_8_337))))
 (let ((?x42431 (- (- ?x42427 (* (* 2.0 l_0_8_320) l_0_8_338)) (* (* 2.0 l_0_8_321) l_0_8_339))))
 (let ((?x42435 (- (- ?x42431 (* (* 2.0 l_0_8_364) l_0_8_382)) (* (* 2.0 l_0_8_365) l_0_8_383))))
 (let ((?x42439 (- (- ?x42435 (* (* 2.0 l_0_8_366) l_0_8_384)) (* (* 2.0 l_0_8_409) l_0_8_427))))
 (let ((?x42443 (- (- ?x42439 (* (* 2.0 l_0_8_410) l_0_8_428)) (* (* 2.0 l_0_8_411) l_0_8_429))))
 (= (- ?x42443 ?x39550) 0.0))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x42516 (* ?x42515 l_0_8_94)))
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39606 (* ?x11699 l_0_8_74)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42488 (* ?x29172 l_0_8_254)))
 (let ((?x42164 (* ?x29172 l_0_8_229)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x42479 (* ?x39652 l_0_8_139)))
 (let ((?x42482 (- (- (* (* 2.0 l_0_8_1) l_0_8_29) ?x42479) (* (* 2.0 l_0_8_184) l_0_8_209))))
 (let ((?x42486 (- (- ?x42482 (* (* 2.0 l_0_8_185) l_0_8_210)) (* (* 2.0 l_0_8_186) l_0_8_211))))
 (let ((?x42493 (- (- (- (+ ?x42486 ?x42164) ?x42488) (* (* 2.0 l_0_8_274) l_0_8_299)) (* (* 2.0 l_0_8_275) l_0_8_300))))
 (let ((?x42497 (- (- ?x42493 (* (* 2.0 l_0_8_276) l_0_8_301)) (* (* 2.0 l_0_8_319) l_0_8_344))))
 (let ((?x42501 (- (- ?x42497 (* (* 2.0 l_0_8_320) l_0_8_345)) (* (* 2.0 l_0_8_321) l_0_8_346))))
 (let ((?x42505 (- (- ?x42501 (* (* 2.0 l_0_8_364) l_0_8_389)) (* (* 2.0 l_0_8_365) l_0_8_390))))
 (let ((?x42509 (- (- ?x42505 (* (* 2.0 l_0_8_366) l_0_8_391)) (* (* 2.0 l_0_8_409) l_0_8_434))))
 (let ((?x42513 (- (- ?x42509 (* (* 2.0 l_0_8_410) l_0_8_435)) (* (* 2.0 l_0_8_411) l_0_8_436))))
 (= (+ (- ?x42513 ?x39606) ?x42516) 0.0)))))))))))))))))))
(assert
 (let ((?x11699 (* 2.0 l_0_8_46)))
 (let ((?x39655 (* ?x11699 l_0_8_82)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x29853 (* ?x29172 l_0_8_262)))
 (let ((?x29922 (- (* (* 2.0 l_0_8_1) l_0_8_37) (* (* 2.0 l_0_8_184) l_0_8_217))))
 (let ((?x16424 (- (- ?x29922 (* (* 2.0 l_0_8_185) l_0_8_218)) (* (* 2.0 l_0_8_186) l_0_8_219))))
 (let ((?x42538 (- (- (- ?x16424 ?x29853) (* (* 2.0 l_0_8_274) l_0_8_307)) (* (* 2.0 l_0_8_275) l_0_8_308))))
 (let ((?x42542 (- (- ?x42538 (* (* 2.0 l_0_8_276) l_0_8_309)) (* (* 2.0 l_0_8_319) l_0_8_352))))
 (let ((?x42546 (- (- ?x42542 (* (* 2.0 l_0_8_320) l_0_8_353)) (* (* 2.0 l_0_8_321) l_0_8_354))))
 (let ((?x42550 (- (- ?x42546 (* (* 2.0 l_0_8_364) l_0_8_397)) (* (* 2.0 l_0_8_365) l_0_8_398))))
 (let ((?x42554 (- (- ?x42550 (* (* 2.0 l_0_8_366) l_0_8_399)) (* (* 2.0 l_0_8_409) l_0_8_442))))
 (let ((?x42558 (- (- ?x42554 (* (* 2.0 l_0_8_410) l_0_8_443)) (* (* 2.0 l_0_8_411) l_0_8_444))))
 (= (- ?x42558 ?x39655) 0.0))))))))))))))
(assert
 (let ((?x39675 (* l_0_8_48 l_0_8_48)))
 (let ((?x39673 (* l_0_8_47 l_0_8_47)))
 (let ((?x39671 (* l_0_8_3 l_0_8_3)))
 (let ((?x30172 (* l_0_8_228 l_0_8_228)))
 (let ((?x16511 (+ (- (- (* l_0_8_2 l_0_8_2) (* l_0_8_227 l_0_8_227)) ?x30172) ?x39671)))
 (= (- (- ?x16511 ?x39673) ?x39675) 0.0)))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39697 (* ?x39696 l_0_8_50)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39694 (* ?x39693 l_0_8_49)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39691 (* ?x39690 l_0_8_5)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42593 (* ?x42592 l_0_8_230)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42590 (* ?x42589 l_0_8_229)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41739 (* ?x39724 l_0_8_4)))
 (= (- (- (+ (- (- ?x41739 ?x42590) ?x42593) ?x39691) ?x39694) ?x39697) 0.0))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x42516 (* ?x42515 l_0_8_94)))
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39731 (* ?x39696 l_0_8_53)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39729 (* ?x39693 l_0_8_52)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39727 (* ?x39690 l_0_8_8)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42616 (* ?x42592 l_0_8_233)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42614 (* ?x42589 l_0_8_232)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39725 (* ?x39724 l_0_8_7)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x42479 (* ?x39652 l_0_8_139)))
 (let ((?x42621 (- (- (- (+ (- (- (+ ?x42479 ?x39725) ?x42614) ?x42616) ?x39727) ?x39729) ?x39731) ?x42516)))
 (= ?x42621 0.0)))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x11846 (* ?x39696 l_0_8_57)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x11828 (* ?x39693 l_0_8_56)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42636 (* ?x42592 l_0_8_237)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42634 (* ?x42589 l_0_8_236)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x28207 (* ?x11801 l_0_8_3)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x41792 (* ?x12393 l_0_8_2)))
 (= (- (- (- (- (+ ?x41792 ?x28207) ?x42634) ?x42636) ?x11828) ?x11846) 0.0))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39747 (* ?x39696 l_0_8_62)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39745 (* ?x39693 l_0_8_61)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42655 (* ?x42592 l_0_8_242)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x30306 (* ?x42589 l_0_8_241)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x11975 (* ?x39400 l_0_8_3)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x41834 (* ?x39393 l_0_8_2)))
 (= (- (- (- (- (+ ?x41834 ?x11975) ?x30306) ?x42655) ?x39745) ?x39747) 0.0))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39768 (* ?x39696 l_0_8_68)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39766 (* ?x39693 l_0_8_67)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39764 (* ?x39763 l_0_8_3)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42676 (* ?x42592 l_0_8_248)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42674 (* ?x42589 l_0_8_247)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41863 (* ?x39724 l_0_8_22)))
 (= (- (- (+ (- (- ?x41863 ?x42674) ?x42676) ?x39764) ?x39766) ?x39768) 0.0))))))))))))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x42711 (* ?x42710 l_0_8_95)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x42708 (* ?x42707 l_0_8_94)))
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39787 (* ?x39696 l_0_8_75)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39785 (* ?x39693 l_0_8_74)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39778 (* ?x39690 l_0_8_30)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42702 (* ?x42592 l_0_8_255)))
 (let ((?x42593 (* ?x42592 l_0_8_230)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42699 (* ?x42589 l_0_8_254)))
 (let ((?x42590 (* ?x42589 l_0_8_229)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x41921 (* ?x39724 l_0_8_29)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x42695 (* ?x39808 l_0_8_140)))
 (let ((?x42700 (- (+ (+ (- (* (* (- 2.0) l_0_8_137) l_0_8_139) ?x42695) ?x41921) ?x42590) ?x42699)))
 (let ((?x42712 (+ (+ (- (- (+ (- (+ ?x42700 ?x42593) ?x42702) ?x39778) ?x39785) ?x39787) ?x42708) ?x42711)))
 (= ?x42712 0.0))))))))))))))))))))))))
(assert
 (let ((?x39696 (* 2.0 l_0_8_48)))
 (let ((?x39817 (* ?x39696 l_0_8_83)))
 (let ((?x39693 (* 2.0 l_0_8_47)))
 (let ((?x39815 (* ?x39693 l_0_8_82)))
 (let ((?x39690 (* 2.0 l_0_8_3)))
 (let ((?x39813 (* ?x39690 l_0_8_38)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42737 (* ?x42592 l_0_8_263)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x30334 (* ?x42589 l_0_8_262)))
 (let ((?x39724 (* 2.0 l_0_8_2)))
 (let ((?x39811 (* ?x39724 l_0_8_37)))
 (= (- (- (+ (- (- ?x39811 ?x30334) ?x42737) ?x39813) ?x39815) ?x39817) 0.0))))))))))))))
(assert
 (let ((?x39852 (* l_0_8_6 l_0_8_6)))
 (let ((?x39850 (* l_0_8_51 l_0_8_51)))
 (let ((?x39848 (* l_0_8_50 l_0_8_50)))
 (let ((?x39846 (* l_0_8_5 l_0_8_5)))
 (let ((?x39837 (* l_0_8_49 l_0_8_49)))
 (let ((?x12177 (* l_0_8_4 l_0_8_4)))
 (let ((?x42763 (* l_0_8_231 l_0_8_231)))
 (let ((?x42764 (- (- (* (- l_0_8_229) l_0_8_229) (* l_0_8_230 l_0_8_230)) ?x42763)))
 (= (+ (- (- (+ (- (+ ?x42764 ?x12177) ?x39837) ?x39846) ?x39848) ?x39850) ?x39852) 0.0))))))))))
(assert
 (let ((?x39882 (* (* 2.0 l_0_8_6) l_0_8_9)))
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39879 (* ?x39878 l_0_8_54)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39876 (* ?x39875 l_0_8_53)))
 (let ((?x39873 (* (* 2.0 l_0_8_5) l_0_8_8)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39870 (* ?x39869 l_0_8_52)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x30296 (* ?x30293 l_0_8_234)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30287 (* ?x30285 l_0_8_233)))
 (let ((?x16713 (+ (- (- (* (* (- 2.0) l_0_8_229) l_0_8_232) ?x30287) ?x30296) (* (* 2.0 l_0_8_4) l_0_8_7))))
 (= (+ (- (- (+ (- ?x16713 ?x39870) ?x39873) ?x39876) ?x39879) ?x39882) 0.0)))))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39920 (* ?x39878 l_0_8_58)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39918 (* ?x39875 l_0_8_57)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39916 (* ?x39869 l_0_8_56)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42787 (* ?x30293 l_0_8_238)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30376 (* ?x30285 l_0_8_237)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x16829 (* ?x16831 l_0_8_236)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x39914 (* ?x39913 l_0_8_6)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x39911 (* ?x11801 l_0_8_5)))
 (let ((?x42786 (- (- (+ (+ (* (* 2.0 l_0_8_11) l_0_8_4) ?x39911) ?x39914) ?x16829) ?x30376)))
 (= (- (- (- (- ?x42786 ?x42787) ?x39916) ?x39918) ?x39920) 0.0)))))))))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39944 (* ?x39878 l_0_8_63)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39942 (* ?x39875 l_0_8_62)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39940 (* ?x39869 l_0_8_61)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42808 (* ?x30293 l_0_8_243)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42806 (* ?x30285 l_0_8_242)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42804 (* ?x16831 l_0_8_241)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28397 (* ?x39403 l_0_8_6)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28396 (* ?x39400 l_0_8_5)))
 (let ((?x42807 (- (- (+ (+ (* (* 2.0 l_0_8_16) l_0_8_4) ?x28396) ?x28397) ?x42804) ?x42806)))
 (= (- (- (- (- ?x42807 ?x42808) ?x39940) ?x39942) ?x39944) 0.0)))))))))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x39973 (* ?x39878 l_0_8_69)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x39971 (* ?x39875 l_0_8_68)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x39969 (* ?x39869 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x39967 (* ?x39966 l_0_8_6)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42834 (* ?x30293 l_0_8_249)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42832 (* ?x30285 l_0_8_248)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x39958 (* ?x39763 l_0_8_5)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42829 (* ?x16831 l_0_8_247)))
 (let ((?x42835 (- (- (+ (- (* (* 2.0 l_0_8_22) l_0_8_4) ?x42829) ?x39958) ?x42832) ?x42834)))
 (= (- (- (- (+ ?x42835 ?x39967) ?x39969) ?x39971) ?x39973) 0.0)))))))))))))))))))
(assert
 (let ((?x42881 (* l_0_8_96 l_0_8_96)))
 (let ((?x42879 (* l_0_8_95 l_0_8_95)))
 (let ((?x42877 (* l_0_8_94 l_0_8_94)))
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40006 (* ?x39878 l_0_8_76)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40004 (* ?x39875 l_0_8_75)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40002 (* ?x39869 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40000 (* ?x39999 l_0_8_6)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x39997 (* ?x39996 l_0_8_5)))
 (let ((?x42763 (* l_0_8_231 l_0_8_231)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42867 (* ?x30293 l_0_8_256)))
 (let ((?x42761 (* l_0_8_230 l_0_8_230)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42864 (* ?x30285 l_0_8_255)))
 (let ((?x42773 (* l_0_8_229 l_0_8_229)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42861 (* ?x16831 l_0_8_254)))
 (let ((?x42859 (* l_0_8_141 l_0_8_141)))
 (let ((?x42860 (- (- (* (- l_0_8_139) l_0_8_139) (* l_0_8_140 l_0_8_140)) ?x42859)))
 (let ((?x42871 (+ (+ (- (+ (- (+ (- ?x42860 ?x42861) ?x42773) ?x42864) ?x42761) ?x42867) ?x42763) (* (* 2.0 l_0_8_29) l_0_8_4))))
 (let ((?x42880 (+ (+ (- (- (- (+ (+ ?x42871 ?x39997) ?x40000) ?x40002) ?x40004) ?x40006) ?x42877) ?x42879)))
 (= (+ ?x42880 ?x42881) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x39878 (* 2.0 l_0_8_51)))
 (let ((?x40049 (* ?x39878 l_0_8_84)))
 (let ((?x39875 (* 2.0 l_0_8_50)))
 (let ((?x40047 (* ?x39875 l_0_8_83)))
 (let ((?x39869 (* 2.0 l_0_8_49)))
 (let ((?x40045 (* ?x39869 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40043 (* ?x40042 l_0_8_6)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40040 (* ?x40039 l_0_8_5)))
 (let ((?x40036 (* 2.0 l_0_8_37)))
 (let ((?x40037 (* ?x40036 l_0_8_4)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x30533 (* ?x30293 l_0_8_264)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30528 (* ?x30285 l_0_8_263)))
 (let ((?x30479 (+ (+ (- (- (* (* (- 2.0) l_0_8_229) l_0_8_262) ?x30528) ?x30533) ?x40037) ?x40040)))
 (= (- (- (- (+ ?x30479 ?x40043) ?x40045) ?x40047) ?x40049) 0.0)))))))))))))))))))
(assert
 (let ((?x40101 (* l_0_8_9 l_0_8_9)))
 (let ((?x40099 (* l_0_8_8 l_0_8_8)))
 (let ((?x40097 (* l_0_8_7 l_0_8_7)))
 (let ((?x40095 (* l_0_8_55 l_0_8_55)))
 (let ((?x40093 (* l_0_8_54 l_0_8_54)))
 (let ((?x40091 (* l_0_8_53 l_0_8_53)))
 (let ((?x40080 (* l_0_8_52 l_0_8_52)))
 (let ((?x42913 (* l_0_8_235 l_0_8_235)))
 (let ((?x42911 (* l_0_8_234 l_0_8_234)))
 (let ((?x42909 (* l_0_8_233 l_0_8_233)))
 (let ((?x42912 (- (- (- (* l_0_8_10 l_0_8_10) (* l_0_8_232 l_0_8_232)) ?x42909) ?x42911)))
 (let ((?x42920 (+ (+ (- (- (- (- (- ?x42912 ?x42913) ?x40080) ?x40091) ?x40093) ?x40095) ?x40097) ?x40099)))
 (= (+ ?x42920 ?x40101) 0.0))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40163 (* ?x40134 l_0_8_64)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40161 (* ?x40131 l_0_8_63)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40159 (* ?x40128 l_0_8_62)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x28435 (* ?x40125 l_0_8_61)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x42937 (* ?x41622 l_0_8_244)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x42935 (* ?x41619 l_0_8_243)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x42933 (* ?x41616 l_0_8_242)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x42931 (* ?x41613 l_0_8_241)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x28441 (* ?x39403 l_0_8_9)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28446 (* ?x39400 l_0_8_8)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x28451 (* ?x39393 l_0_8_7)))
 (let ((?x42932 (- (+ (+ (+ (* (* 2.0 l_0_8_10) l_0_8_19) ?x28451) ?x28446) ?x28441) ?x42931)))
 (let ((?x42942 (- (- (- (- (- (- (- ?x42932 ?x42933) ?x42935) ?x42937) ?x28435) ?x40159) ?x40161) ?x40163)))
 (= ?x42942 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40197 (* ?x40134 l_0_8_70)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40195 (* ?x40131 l_0_8_69)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40193 (* ?x40128 l_0_8_68)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40191 (* ?x40125 l_0_8_67)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40189 (* ?x39966 l_0_8_9)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x42972 (* ?x41622 l_0_8_250)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x42970 (* ?x41619 l_0_8_249)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x42968 (* ?x41616 l_0_8_248)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x42966 (* ?x41613 l_0_8_247)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40180 (* ?x39763 l_0_8_8)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x28513 (* ?x4134 l_0_8_7)))
 (let ((?x42969 (- (- (+ (+ (* (* 2.0 l_0_8_10) l_0_8_25) ?x28513) ?x40180) ?x42966) ?x42968)))
 (let ((?x42978 (- (- (- (- (+ (- (- ?x42969 ?x42970) ?x42972) ?x40189) ?x40191) ?x40193) ?x40195) ?x40197)))
 (= ?x42978 0.0))))))))))))))))))))))))))
(assert
 (let ((?x43040 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x43037 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x43034 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40241 (* ?x40134 l_0_8_77)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40239 (* ?x40131 l_0_8_76)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40237 (* ?x40128 l_0_8_75)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40235 (* ?x40125 l_0_8_74)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x40233 (* ?x39999 l_0_8_9)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x40224 (* ?x39996 l_0_8_8)))
 (let ((?x40219 (* 2.0 l_0_8_29)))
 (let ((?x40221 (* ?x40219 l_0_8_7)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x43024 (* ?x41622 l_0_8_257)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x43022 (* ?x41619 l_0_8_256)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x43020 (* ?x41616 l_0_8_255)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x43018 (* ?x41613 l_0_8_254)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x30296 (* ?x30293 l_0_8_234)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30287 (* ?x30285 l_0_8_233)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43012 (* ?x40033 l_0_8_144)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43010 (* ?x40030 l_0_8_143)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43008 (* ?x40027 l_0_8_142)))
 (let ((?x43015 (+ (- (- (- (* (* 2.0 l_0_8_10) l_0_8_32) ?x43008) ?x43010) ?x43012) (* (* 2.0 l_0_8_229) l_0_8_232))))
 (let ((?x43026 (+ (- (- (- (- (+ (+ ?x43015 ?x30287) ?x30296) ?x43018) ?x43020) ?x43022) ?x43024) ?x40221)))
 (let ((?x43035 (+ (- (- (- (- (+ (+ ?x43026 ?x40224) ?x40233) ?x40235) ?x40237) ?x40239) ?x40241) ?x43034)))
 (= (+ (+ ?x43035 ?x43037) ?x43040) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40134 (* 2.0 l_0_8_55)))
 (let ((?x40301 (* ?x40134 l_0_8_85)))
 (let ((?x40131 (* 2.0 l_0_8_54)))
 (let ((?x40299 (* ?x40131 l_0_8_84)))
 (let ((?x40128 (* 2.0 l_0_8_53)))
 (let ((?x40297 (* ?x40128 l_0_8_83)))
 (let ((?x40125 (* 2.0 l_0_8_52)))
 (let ((?x40295 (* ?x40125 l_0_8_82)))
 (let ((?x40042 (* 2.0 l_0_8_39)))
 (let ((?x40293 (* ?x40042 l_0_8_9)))
 (let ((?x40039 (* 2.0 l_0_8_38)))
 (let ((?x40291 (* ?x40039 l_0_8_8)))
 (let ((?x40036 (* 2.0 l_0_8_37)))
 (let ((?x40289 (* ?x40036 l_0_8_7)))
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x43106 (* ?x41622 l_0_8_265)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x43104 (* ?x41619 l_0_8_264)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x43102 (* ?x41616 l_0_8_263)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x43100 (* ?x41613 l_0_8_262)))
 (let ((?x43107 (- (- (- (- (* (* 2.0 l_0_8_10) l_0_8_40) ?x43100) ?x43102) ?x43104) ?x43106)))
 (let ((?x43114 (- (- (- (- (+ (+ (+ ?x43107 ?x40289) ?x40291) ?x40293) ?x40295) ?x40297) ?x40299) ?x40301)))
 (= ?x43114 0.0))))))))))))))))))))))))))
(assert
 (let ((?x40374 (* l_0_8_60 l_0_8_60)))
 (let ((?x40372 (* l_0_8_59 l_0_8_59)))
 (let ((?x40370 (* l_0_8_58 l_0_8_58)))
 (let ((?x40368 (* l_0_8_57 l_0_8_57)))
 (let ((?x40366 (* l_0_8_56 l_0_8_56)))
 (let ((?x43157 (* l_0_8_240 l_0_8_240)))
 (let ((?x43155 (* l_0_8_239 l_0_8_239)))
 (let ((?x43153 (* l_0_8_238 l_0_8_238)))
 (let ((?x43151 (* l_0_8_237 l_0_8_237)))
 (let ((?x43149 (* l_0_8_236 l_0_8_236)))
 (let ((?x40364 (* l_0_8_15 l_0_8_15)))
 (let ((?x40362 (* l_0_8_14 l_0_8_14)))
 (let ((?x40349 (* l_0_8_13 l_0_8_13)))
 (let ((?x43147 (+ (+ (+ (* l_0_8_11 l_0_8_11) (* l_0_8_12 l_0_8_12)) ?x40349) ?x40362)))
 (let ((?x43159 (- (- (- (- (- (- (+ ?x43147 ?x40364) ?x43149) ?x43151) ?x43153) ?x43155) ?x43157) ?x40366)))
 (= (- (- (- (- ?x43159 ?x40368) ?x40370) ?x40372) ?x40374) 0.0)))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40418 (* ?x40417 l_0_8_65)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40415 (* ?x40414 l_0_8_64)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40412 (* ?x40411 l_0_8_63)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40409 (* ?x40408 l_0_8_62)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40406 (* ?x40405 l_0_8_61)))
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43206 (* ?x43205 l_0_8_245)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43203 (* ?x43202 l_0_8_244)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43200 (* ?x43199 l_0_8_243)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43197 (* ?x43196 l_0_8_242)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43194 (* ?x43193 l_0_8_241)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40403 (* ?x40402 l_0_8_20)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40400 (* ?x40399 l_0_8_19)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40397 (* ?x39913 l_0_8_18)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40395 (* ?x11801 l_0_8_17)))
 (let ((?x43192 (+ (+ (+ (+ (* (* 2.0 l_0_8_11) l_0_8_16) ?x40395) ?x40397) ?x40400) ?x40403)))
 (let ((?x43209 (- (- (- (- (- (- (- ?x43192 ?x43194) ?x43197) ?x43200) ?x43203) ?x43206) ?x40406) ?x40409)))
 (= (- (- (- ?x43209 ?x40412) ?x40415) ?x40418) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40468 (* ?x40417 l_0_8_71)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40466 (* ?x40414 l_0_8_70)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40464 (* ?x40411 l_0_8_69)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40462 (* ?x40408 l_0_8_68)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40460 (* ?x40405 l_0_8_67)))
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43267 (* ?x43205 l_0_8_251)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43265 (* ?x43202 l_0_8_250)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43263 (* ?x43199 l_0_8_249)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43261 (* ?x43196 l_0_8_248)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43259 (* ?x43193 l_0_8_247)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40458 (* ?x40402 l_0_8_26)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40448 (* ?x40399 l_0_8_25)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40445 (* ?x39913 l_0_8_24)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40441 (* ?x11801 l_0_8_23)))
 (let ((?x43258 (+ (+ (+ (+ (* (* 2.0 l_0_8_11) l_0_8_22) ?x40441) ?x40445) ?x40448) ?x40458)))
 (let ((?x43270 (- (- (- (- (- (- (- ?x43258 ?x43259) ?x43261) ?x43263) ?x43265) ?x43267) ?x40460) ?x40462)))
 (= (- (- (- ?x43270 ?x40464) ?x40466) ?x40468) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40517 (* ?x40417 l_0_8_78)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40515 (* ?x40414 l_0_8_77)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40513 (* ?x40411 l_0_8_76)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40511 (* ?x40408 l_0_8_75)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40509 (* ?x40405 l_0_8_74)))
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43325 (* ?x43205 l_0_8_258)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43323 (* ?x43202 l_0_8_257)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43321 (* ?x43199 l_0_8_256)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43319 (* ?x43196 l_0_8_255)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43317 (* ?x43193 l_0_8_254)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42787 (* ?x30293 l_0_8_238)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30376 (* ?x30285 l_0_8_237)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x16829 (* ?x16831 l_0_8_236)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40507 (* ?x40402 l_0_8_33)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x41737 (* ?x40033 l_0_8_148)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x41735 (* ?x40030 l_0_8_147)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40505 (* ?x40399 l_0_8_32)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x41733 (* ?x40027 l_0_8_146)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40503 (* ?x39913 l_0_8_31)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40501 (* ?x11801 l_0_8_30)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41731 (* ?x40549 l_0_8_96)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41729 (* ?x40544 l_0_8_95)))
 (let ((?x43306 (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_94) ?x41729) ?x41731) (* (* 2.0 l_0_8_11) l_0_8_29))))
 (let ((?x43313 (+ (- (- (+ (- (+ (+ ?x43306 ?x40501) ?x40503) ?x41733) ?x40505) ?x41735) ?x41737) ?x40507)))
 (let ((?x43324 (- (- (- (- (+ (+ (+ ?x43313 ?x16829) ?x30376) ?x42787) ?x43317) ?x43319) ?x43321) ?x43323)))
 (= (- (- (- (- (- (- ?x43324 ?x43325) ?x40509) ?x40511) ?x40513) ?x40515) ?x40517) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40417 (* 2.0 l_0_8_60)))
 (let ((?x40599 (* ?x40417 l_0_8_86)))
 (let ((?x40414 (* 2.0 l_0_8_59)))
 (let ((?x40597 (* ?x40414 l_0_8_85)))
 (let ((?x40411 (* 2.0 l_0_8_58)))
 (let ((?x40595 (* ?x40411 l_0_8_84)))
 (let ((?x40408 (* 2.0 l_0_8_57)))
 (let ((?x40593 (* ?x40408 l_0_8_83)))
 (let ((?x40405 (* 2.0 l_0_8_56)))
 (let ((?x40591 (* ?x40405 l_0_8_82)))
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43393 (* ?x43205 l_0_8_266)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43391 (* ?x43202 l_0_8_265)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43389 (* ?x43199 l_0_8_264)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43387 (* ?x43196 l_0_8_263)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43385 (* ?x43193 l_0_8_262)))
 (let ((?x40402 (* 2.0 l_0_8_15)))
 (let ((?x40586 (* ?x40402 l_0_8_41)))
 (let ((?x40399 (* 2.0 l_0_8_14)))
 (let ((?x40572 (* ?x40399 l_0_8_40)))
 (let ((?x39913 (* 2.0 l_0_8_13)))
 (let ((?x40570 (* ?x39913 l_0_8_39)))
 (let ((?x11801 (* 2.0 l_0_8_12)))
 (let ((?x40568 (* ?x11801 l_0_8_38)))
 (let ((?x12393 (* 2.0 l_0_8_11)))
 (let ((?x40566 (* ?x12393 l_0_8_37)))
 (let ((?x43390 (- (- (- (+ (+ (+ (+ ?x40566 ?x40568) ?x40570) ?x40572) ?x40586) ?x43385) ?x43387) ?x43389)))
 (let ((?x43399 (- (- (- (- (- (- (- ?x43390 ?x43391) ?x43393) ?x40591) ?x40593) ?x40595) ?x40597) ?x40599)))
 (= ?x43399 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40692 (* l_0_8_66 l_0_8_66)))
 (let ((?x40690 (* l_0_8_65 l_0_8_65)))
 (let ((?x40688 (* l_0_8_64 l_0_8_64)))
 (let ((?x40686 (* l_0_8_63 l_0_8_63)))
 (let ((?x40684 (* l_0_8_62 l_0_8_62)))
 (let ((?x40682 (* l_0_8_61 l_0_8_61)))
 (let ((?x43455 (* l_0_8_246 l_0_8_246)))
 (let ((?x43453 (* l_0_8_245 l_0_8_245)))
 (let ((?x43451 (* l_0_8_244 l_0_8_244)))
 (let ((?x43449 (* l_0_8_243 l_0_8_243)))
 (let ((?x43447 (* l_0_8_242 l_0_8_242)))
 (let ((?x43445 (* l_0_8_241 l_0_8_241)))
 (let ((?x40680 (* l_0_8_21 l_0_8_21)))
 (let ((?x40678 (* l_0_8_20 l_0_8_20)))
 (let ((?x40663 (* l_0_8_19 l_0_8_19)))
 (let ((?x40660 (* l_0_8_18 l_0_8_18)))
 (let ((?x43442 (+ (+ (+ (* l_0_8_16 l_0_8_16) (* l_0_8_17 l_0_8_17)) ?x40660) ?x40663)))
 (let ((?x43454 (- (- (- (- (- (+ (+ ?x43442 ?x40678) ?x40680) ?x43445) ?x43447) ?x43449) ?x43451) ?x43453)))
 (let ((?x43462 (- (- (- (- (- (- (- ?x43454 ?x43455) ?x40682) ?x40684) ?x40686) ?x40688) ?x40690) ?x40692)))
 (= ?x43462 0.0)))))))))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40755 (* ?x39450 l_0_8_79)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40753 (* ?x39447 l_0_8_78)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40751 (* ?x39444 l_0_8_77)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40749 (* ?x39441 l_0_8_76)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40747 (* ?x39438 l_0_8_75)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40745 (* ?x39435 l_0_8_74)))
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x43508 (* ?x39430 l_0_8_259)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x43506 (* ?x39427 l_0_8_258)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x43504 (* ?x39424 l_0_8_257)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x43502 (* ?x39421 l_0_8_256)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x43500 (* ?x39418 l_0_8_255)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x43498 (* ?x39415 l_0_8_254)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42808 (* ?x30293 l_0_8_243)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42806 (* ?x30285 l_0_8_242)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42804 (* ?x16831 l_0_8_241)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40743 (* ?x39412 l_0_8_34)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40741 (* ?x39409 l_0_8_33)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40739 (* ?x39406 l_0_8_32)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40737 (* ?x39403 l_0_8_31)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x28671 (* ?x39400 l_0_8_30)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x40034 (* ?x40033 l_0_8_153)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x40031 (* ?x40030 l_0_8_152)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x40028 (* ?x40027 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40025 (* ?x39570 l_0_8_96)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40023 (* ?x39567 l_0_8_95)))
 (let ((?x43486 (- (- (+ (+ (* (* 2.0 l_0_8_106) l_0_8_94) ?x40023) ?x40025) ?x40028) ?x40031)))
 (let ((?x43491 (+ (+ (+ (- ?x43486 ?x40034) (* (* 2.0 l_0_8_16) l_0_8_29)) ?x28671) ?x40737)))
 (let ((?x43499 (- (+ (+ (+ (+ (+ (+ ?x43491 ?x40739) ?x40741) ?x40743) ?x42804) ?x42806) ?x42808) ?x43498)))
 (let ((?x43511 (- (- (- (- (- (- (- ?x43499 ?x43500) ?x43502) ?x43504) ?x43506) ?x43508) ?x40745) ?x40747)))
 (= (- (- (- (- ?x43511 ?x40749) ?x40751) ?x40753) ?x40755) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39450 (* 2.0 l_0_8_66)))
 (let ((?x40839 (* ?x39450 l_0_8_87)))
 (let ((?x39447 (* 2.0 l_0_8_65)))
 (let ((?x40837 (* ?x39447 l_0_8_86)))
 (let ((?x39444 (* 2.0 l_0_8_64)))
 (let ((?x40835 (* ?x39444 l_0_8_85)))
 (let ((?x39441 (* 2.0 l_0_8_63)))
 (let ((?x40833 (* ?x39441 l_0_8_84)))
 (let ((?x39438 (* 2.0 l_0_8_62)))
 (let ((?x40831 (* ?x39438 l_0_8_83)))
 (let ((?x39435 (* 2.0 l_0_8_61)))
 (let ((?x40829 (* ?x39435 l_0_8_82)))
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x43549 (* ?x39430 l_0_8_267)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x43547 (* ?x39427 l_0_8_266)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x43545 (* ?x39424 l_0_8_265)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x43543 (* ?x39421 l_0_8_264)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x43541 (* ?x39418 l_0_8_263)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x43539 (* ?x39415 l_0_8_262)))
 (let ((?x39412 (* 2.0 l_0_8_21)))
 (let ((?x40827 (* ?x39412 l_0_8_42)))
 (let ((?x39409 (* 2.0 l_0_8_20)))
 (let ((?x40825 (* ?x39409 l_0_8_41)))
 (let ((?x39406 (* 2.0 l_0_8_19)))
 (let ((?x40823 (* ?x39406 l_0_8_40)))
 (let ((?x39403 (* 2.0 l_0_8_18)))
 (let ((?x40821 (* ?x39403 l_0_8_39)))
 (let ((?x39400 (* 2.0 l_0_8_17)))
 (let ((?x40819 (* ?x39400 l_0_8_38)))
 (let ((?x39393 (* 2.0 l_0_8_16)))
 (let ((?x40817 (* ?x39393 l_0_8_37)))
 (let ((?x43542 (- (- (+ (+ (+ (+ (+ ?x40817 ?x40819) ?x40821) ?x40823) ?x40825) ?x40827) ?x43539) ?x43541)))
 (let ((?x43553 (- (- (- (- (- (- (- ?x43542 ?x43543) ?x43545) ?x43547) ?x43549) ?x40829) ?x40831) ?x40833)))
 (= (- (- (- ?x43553 ?x40835) ?x40837) ?x40839) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x40929 (* l_0_8_73 l_0_8_73)))
 (let ((?x40927 (* l_0_8_72 l_0_8_72)))
 (let ((?x40925 (* l_0_8_71 l_0_8_71)))
 (let ((?x40923 (* l_0_8_70 l_0_8_70)))
 (let ((?x40921 (* l_0_8_69 l_0_8_69)))
 (let ((?x40919 (* l_0_8_68 l_0_8_68)))
 (let ((?x40917 (* l_0_8_67 l_0_8_67)))
 (let ((?x40915 (* l_0_8_28 l_0_8_28)))
 (let ((?x40913 (* l_0_8_27 l_0_8_27)))
 (let ((?x40911 (* l_0_8_26 l_0_8_26)))
 (let ((?x43591 (* l_0_8_253 l_0_8_253)))
 (let ((?x43589 (* l_0_8_252 l_0_8_252)))
 (let ((?x32720 (* l_0_8_251 l_0_8_251)))
 (let ((?x32723 (* l_0_8_250 l_0_8_250)))
 (let ((?x40895 (* l_0_8_25 l_0_8_25)))
 (let ((?x32710 (* l_0_8_249 l_0_8_249)))
 (let ((?x32689 (* l_0_8_248 l_0_8_248)))
 (let ((?x32677 (* l_0_8_247 l_0_8_247)))
 (let ((?x40892 (* l_0_8_24 l_0_8_24)))
 (let ((?x32683 (- (+ (+ (* l_0_8_22 l_0_8_22) (* l_0_8_23 l_0_8_23)) ?x40892) ?x32677)))
 (let ((?x43592 (- (- (- (- (+ (- (- ?x32683 ?x32689) ?x32710) ?x40895) ?x32723) ?x32720) ?x43589) ?x43591)))
 (let ((?x43599 (- (- (- (- (+ (+ (+ ?x43592 ?x40911) ?x40913) ?x40915) ?x40917) ?x40919) ?x40921) ?x40923)))
 (= (- (- (- ?x43599 ?x40925) ?x40927) ?x40929) 0.0))))))))))))))))))))))))
(assert
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x40989 (* ?x40988 l_0_8_80)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x40986 (* ?x40985 l_0_8_79)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x40983 (* ?x40982 l_0_8_78)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x40980 (* ?x40979 l_0_8_77)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x40977 (* ?x40976 l_0_8_76)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x40974 (* ?x40973 l_0_8_75)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x40971 (* ?x40970 l_0_8_74)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x40968 (* ?x40967 l_0_8_35)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x40965 (* ?x40964 l_0_8_34)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x40962 (* ?x40961 l_0_8_33)))
 (let ((?x43668 (* 2.0 l_0_8_253)))
 (let ((?x43669 (* ?x43668 l_0_8_260)))
 (let ((?x43665 (* 2.0 l_0_8_252)))
 (let ((?x43666 (* ?x43665 l_0_8_259)))
 (let ((?x43662 (* 2.0 l_0_8_251)))
 (let ((?x43663 (* ?x43662 l_0_8_258)))
 (let ((?x43659 (* 2.0 l_0_8_250)))
 (let ((?x43660 (* ?x43659 l_0_8_257)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x40959 (* ?x40958 l_0_8_32)))
 (let ((?x43655 (* 2.0 l_0_8_249)))
 (let ((?x43656 (* ?x43655 l_0_8_256)))
 (let ((?x43652 (* 2.0 l_0_8_248)))
 (let ((?x43653 (* ?x43652 l_0_8_255)))
 (let ((?x43649 (* 2.0 l_0_8_247)))
 (let ((?x43650 (* ?x43649 l_0_8_254)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x40956 (* ?x39966 l_0_8_31)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42834 (* ?x30293 l_0_8_249)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42832 (* ?x30285 l_0_8_248)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x40954 (* ?x39763 l_0_8_30)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42829 (* ?x16831 l_0_8_247)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43640 (* ?x40033 l_0_8_159)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43638 (* ?x40030 l_0_8_158)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43636 (* ?x40027 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x43634 (* ?x43633 l_0_8_96)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x43631 (* ?x43630 l_0_8_95)))
 (let ((?x43639 (- (- (+ (+ (* (* 2.0 l_0_8_112) l_0_8_94) ?x43631) ?x43634) ?x43636) ?x43638)))
 (let ((?x43645 (+ (+ (+ (- ?x43639 ?x43640) (* (* 2.0 l_0_8_22) l_0_8_29)) ?x42829) ?x40954)))
 (let ((?x43658 (+ (- (- (- (+ (+ (+ ?x43645 ?x42832) ?x42834) ?x40956) ?x43650) ?x43653) ?x43656) ?x40959)))
 (let ((?x43673 (+ (+ (+ (- (- (- (- ?x43658 ?x43660) ?x43663) ?x43666) ?x43669) ?x40962) ?x40965) ?x40968)))
 (let ((?x43680 (- (- (- (- (- (- (- ?x43673 ?x40971) ?x40974) ?x40977) ?x40980) ?x40983) ?x40986) ?x40989)))
 (= ?x43680 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x42516 (* ?x42515 l_0_8_94)))
 (let ((?x40988 (* 2.0 l_0_8_73)))
 (let ((?x41057 (* ?x40988 l_0_8_88)))
 (let ((?x40985 (* 2.0 l_0_8_72)))
 (let ((?x41055 (* ?x40985 l_0_8_87)))
 (let ((?x40982 (* 2.0 l_0_8_71)))
 (let ((?x41053 (* ?x40982 l_0_8_86)))
 (let ((?x40979 (* 2.0 l_0_8_70)))
 (let ((?x41051 (* ?x40979 l_0_8_85)))
 (let ((?x40976 (* 2.0 l_0_8_69)))
 (let ((?x41049 (* ?x40976 l_0_8_84)))
 (let ((?x40973 (* 2.0 l_0_8_68)))
 (let ((?x41047 (* ?x40973 l_0_8_83)))
 (let ((?x40970 (* 2.0 l_0_8_67)))
 (let ((?x41045 (* ?x40970 l_0_8_82)))
 (let ((?x40967 (* 2.0 l_0_8_28)))
 (let ((?x41043 (* ?x40967 l_0_8_43)))
 (let ((?x40964 (* 2.0 l_0_8_27)))
 (let ((?x41041 (* ?x40964 l_0_8_42)))
 (let ((?x40961 (* 2.0 l_0_8_26)))
 (let ((?x41039 (* ?x40961 l_0_8_41)))
 (let ((?x43668 (* 2.0 l_0_8_253)))
 (let ((?x43751 (* ?x43668 l_0_8_268)))
 (let ((?x43665 (* 2.0 l_0_8_252)))
 (let ((?x43749 (* ?x43665 l_0_8_267)))
 (let ((?x43662 (* 2.0 l_0_8_251)))
 (let ((?x43747 (* ?x43662 l_0_8_266)))
 (let ((?x43659 (* 2.0 l_0_8_250)))
 (let ((?x43745 (* ?x43659 l_0_8_265)))
 (let ((?x40958 (* 2.0 l_0_8_25)))
 (let ((?x41027 (* ?x40958 l_0_8_40)))
 (let ((?x43655 (* 2.0 l_0_8_249)))
 (let ((?x43742 (* ?x43655 l_0_8_264)))
 (let ((?x43652 (* 2.0 l_0_8_248)))
 (let ((?x43740 (* ?x43652 l_0_8_263)))
 (let ((?x43649 (* 2.0 l_0_8_247)))
 (let ((?x43738 (* ?x43649 l_0_8_262)))
 (let ((?x39966 (* 2.0 l_0_8_24)))
 (let ((?x41023 (* ?x39966 l_0_8_39)))
 (let ((?x39763 (* 2.0 l_0_8_23)))
 (let ((?x41019 (* ?x39763 l_0_8_38)))
 (let ((?x4134 (* 2.0 l_0_8_22)))
 (let ((?x7079 (* ?x4134 l_0_8_37)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x42479 (* ?x39652 l_0_8_139)))
 (let ((?x43744 (+ (- (- (- (+ (+ (+ ?x42479 ?x7079) ?x41019) ?x41023) ?x43738) ?x43740) ?x43742) ?x41027)))
 (let ((?x43755 (+ (+ (+ (- (- (- (- ?x43744 ?x43745) ?x43747) ?x43749) ?x43751) ?x41039) ?x41041) ?x41043)))
 (let ((?x43762 (- (- (- (- (- (- (- ?x43755 ?x41045) ?x41047) ?x41049) ?x41051) ?x41053) ?x41055) ?x41057)))
 (= (- ?x43762 ?x42516) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41136 (* l_0_8_81 l_0_8_81)))
 (let ((?x41134 (* l_0_8_80 l_0_8_80)))
 (let ((?x41132 (* l_0_8_79 l_0_8_79)))
 (let ((?x41130 (* l_0_8_78 l_0_8_78)))
 (let ((?x41128 (* l_0_8_77 l_0_8_77)))
 (let ((?x41126 (* l_0_8_76 l_0_8_76)))
 (let ((?x41124 (* l_0_8_75 l_0_8_75)))
 (let ((?x41122 (* l_0_8_74 l_0_8_74)))
 (let ((?x41120 (* l_0_8_36 l_0_8_36)))
 (let ((?x41118 (* l_0_8_35 l_0_8_35)))
 (let ((?x41116 (* l_0_8_34 l_0_8_34)))
 (let ((?x41114 (* l_0_8_33 l_0_8_33)))
 (let ((?x41112 (* l_0_8_32 l_0_8_32)))
 (let ((?x41110 (* l_0_8_31 l_0_8_31)))
 (let ((?x41108 (* l_0_8_30 l_0_8_30)))
 (let ((?x41140 (* l_0_8_29 l_0_8_29)))
 (let ((?x43840 (* l_0_8_261 l_0_8_261)))
 (let ((?x43838 (* l_0_8_260 l_0_8_260)))
 (let ((?x43836 (* l_0_8_259 l_0_8_259)))
 (let ((?x43834 (* l_0_8_258 l_0_8_258)))
 (let ((?x43832 (* l_0_8_257 l_0_8_257)))
 (let ((?x43830 (* l_0_8_256 l_0_8_256)))
 (let ((?x43828 (* l_0_8_255 l_0_8_255)))
 (let ((?x43826 (* l_0_8_254 l_0_8_254)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x42867 (* ?x30293 l_0_8_256)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x42864 (* ?x30285 l_0_8_255)))
 (let ((?x16831 (* 2.0 l_0_8_229)))
 (let ((?x42861 (* ?x16831 l_0_8_254)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43821 (* ?x40033 l_0_8_166)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43819 (* ?x40030 l_0_8_165)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43817 (* ?x40027 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x43815 (* ?x43814 l_0_8_96)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x43812 (* ?x43811 l_0_8_95)))
 (let ((?x43820 (- (- (+ (+ (* (* 2.0 l_0_8_119) l_0_8_94) ?x43812) ?x43815) ?x43817) ?x43819)))
 (let ((?x43831 (- (- (- (+ (+ (+ (- ?x43820 ?x43821) ?x42861) ?x42864) ?x42867) ?x43826) ?x43828) ?x43830)))
 (let ((?x43843 (+ (+ (- (- (- (- (- ?x43831 ?x43832) ?x43834) ?x43836) ?x43838) ?x43840) ?x41140) ?x41108)))
 (let ((?x43850 (- (+ (+ (+ (+ (+ (+ ?x43843 ?x41110) ?x41112) ?x41114) ?x41116) ?x41118) ?x41120) ?x41122)))
 (let ((?x43857 (- (- (- (- (- (- (- ?x43850 ?x41124) ?x41126) ?x41128) ?x41130) ?x41132) ?x41134) ?x41136)))
 (= ?x43857 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41227 (* (* 2.0 l_0_8_81) l_0_8_89)))
 (let ((?x41224 (* (* 2.0 l_0_8_80) l_0_8_88)))
 (let ((?x41221 (* (* 2.0 l_0_8_79) l_0_8_87)))
 (let ((?x41218 (* (* 2.0 l_0_8_78) l_0_8_86)))
 (let ((?x41215 (* (* 2.0 l_0_8_77) l_0_8_85)))
 (let ((?x41212 (* (* 2.0 l_0_8_76) l_0_8_84)))
 (let ((?x41209 (* (* 2.0 l_0_8_75) l_0_8_83)))
 (let ((?x41206 (* (* 2.0 l_0_8_74) l_0_8_82)))
 (let ((?x41203 (* (* 2.0 l_0_8_36) l_0_8_44)))
 (let ((?x41200 (* (* 2.0 l_0_8_35) l_0_8_43)))
 (let ((?x41197 (* (* 2.0 l_0_8_34) l_0_8_42)))
 (let ((?x41194 (* (* 2.0 l_0_8_33) l_0_8_41)))
 (let ((?x41191 (* (* 2.0 l_0_8_32) l_0_8_40)))
 (let ((?x39999 (* 2.0 l_0_8_31)))
 (let ((?x41188 (* ?x39999 l_0_8_39)))
 (let ((?x39996 (* 2.0 l_0_8_30)))
 (let ((?x41186 (* ?x39996 l_0_8_38)))
 (let ((?x40219 (* 2.0 l_0_8_29)))
 (let ((?x41184 (* ?x40219 l_0_8_37)))
 (let ((?x43931 (* (* 2.0 l_0_8_261) l_0_8_269)))
 (let ((?x43928 (* (* 2.0 l_0_8_260) l_0_8_268)))
 (let ((?x43925 (* (* 2.0 l_0_8_259) l_0_8_267)))
 (let ((?x43922 (* (* 2.0 l_0_8_258) l_0_8_266)))
 (let ((?x43919 (* (* 2.0 l_0_8_257) l_0_8_265)))
 (let ((?x43916 (* (* 2.0 l_0_8_256) l_0_8_264)))
 (let ((?x43913 (* (* 2.0 l_0_8_255) l_0_8_263)))
 (let ((?x43910 (* (* 2.0 l_0_8_254) l_0_8_262)))
 (let ((?x30293 (* 2.0 l_0_8_231)))
 (let ((?x30533 (* ?x30293 l_0_8_264)))
 (let ((?x30285 (* 2.0 l_0_8_230)))
 (let ((?x30528 (* ?x30285 l_0_8_263)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43903 (* ?x40033 l_0_8_174)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43901 (* ?x40030 l_0_8_173)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43899 (* ?x40027 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x43897 (* ?x43896 l_0_8_96)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x43894 (* ?x43893 l_0_8_95)))
 (let ((?x43902 (- (- (+ (+ (* (* 2.0 l_0_8_127) l_0_8_94) ?x43894) ?x43897) ?x43899) ?x43901)))
 (let ((?x43908 (+ (+ (+ (- ?x43902 ?x43903) (* (* 2.0 l_0_8_229) l_0_8_262)) ?x30528) ?x30533)))
 (let ((?x43929 (- (- (- (- (- (- (- ?x43908 ?x43910) ?x43913) ?x43916) ?x43919) ?x43922) ?x43925) ?x43928)))
 (let ((?x43938 (+ (+ (+ (+ (+ (+ (- ?x43929 ?x43931) ?x41184) ?x41186) ?x41188) ?x41191) ?x41194) ?x41197)))
 (let ((?x43945 (- (- (- (- (- (+ (+ ?x43938 ?x41200) ?x41203) ?x41206) ?x41209) ?x41212) ?x41215) ?x41218)))
 (= (- (- (- ?x43945 ?x41221) ?x41224) ?x41227) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x41373 (* l_0_8_90 l_0_8_90)))
 (let ((?x41371 (* l_0_8_89 l_0_8_89)))
 (let ((?x41369 (* l_0_8_88 l_0_8_88)))
 (let ((?x41367 (* l_0_8_87 l_0_8_87)))
 (let ((?x41365 (* l_0_8_86 l_0_8_86)))
 (let ((?x41363 (* l_0_8_85 l_0_8_85)))
 (let ((?x41361 (* l_0_8_84 l_0_8_84)))
 (let ((?x41359 (* l_0_8_83 l_0_8_83)))
 (let ((?x41357 (* l_0_8_82 l_0_8_82)))
 (let ((?x41355 (* l_0_8_45 l_0_8_45)))
 (let ((?x41353 (* l_0_8_44 l_0_8_44)))
 (let ((?x41351 (* l_0_8_43 l_0_8_43)))
 (let ((?x41349 (* l_0_8_42 l_0_8_42)))
 (let ((?x41347 (* l_0_8_41 l_0_8_41)))
 (let ((?x41345 (* l_0_8_40 l_0_8_40)))
 (let ((?x41343 (* l_0_8_39 l_0_8_39)))
 (let ((?x41341 (* l_0_8_38 l_0_8_38)))
 (let ((?x41339 (* l_0_8_37 l_0_8_37)))
 (let ((?x44015 (* l_0_8_270 l_0_8_270)))
 (let ((?x44013 (* l_0_8_269 l_0_8_269)))
 (let ((?x44011 (* l_0_8_268 l_0_8_268)))
 (let ((?x44009 (* l_0_8_267 l_0_8_267)))
 (let ((?x44007 (* l_0_8_266 l_0_8_266)))
 (let ((?x44005 (* l_0_8_265 l_0_8_265)))
 (let ((?x44003 (* l_0_8_264 l_0_8_264)))
 (let ((?x44004 (- (- (* (- l_0_8_262) l_0_8_262) (* l_0_8_263 l_0_8_263)) ?x44003)))
 (let ((?x44017 (+ (- (- (- (- (- (- ?x44004 ?x44005) ?x44007) ?x44009) ?x44011) ?x44013) ?x44015) ?x41339)))
 (let ((?x44024 (+ (+ (+ (+ (+ (+ (+ ?x44017 ?x41341) ?x41343) ?x41345) ?x41347) ?x41349) ?x41351) ?x41353)))
 (let ((?x44031 (- (- (- (- (- (- (+ ?x44024 ?x41355) ?x41357) ?x41359) ?x41361) ?x41363) ?x41365) ?x41367)))
 (= (- (- (- ?x44031 ?x41369) ?x41371) ?x41373) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x33323 (* ?x42515 l_0_8_92)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_137) ?x33323) 0.0))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x44072 (* ?x42515 l_0_8_97)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_142) ?x44072) 0.0))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x39653 (* ?x39652 l_0_8_151)))
 (= (+ (* (* (- 2.0) l_0_8_106) l_0_8_91) ?x39653) 0.0))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44091 (* ?x39652 l_0_8_157)))
 (= (+ (* (* (- 2.0) l_0_8_112) l_0_8_91) ?x44091) 0.0))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x44112 (* ?x42710 l_0_8_98)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x44110 (* ?x42707 l_0_8_97)))
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42616 (* ?x42592 l_0_8_233)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42614 (* ?x42589 l_0_8_232)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44106 (* ?x39808 l_0_8_143)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44104 (* ?x39805 l_0_8_142)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44098 (* ?x39652 l_0_8_164)))
 (let ((?x44108 (+ (- (- (+ (* (* (- 2.0) l_0_8_119) l_0_8_91) ?x44098) ?x44104) ?x44106) ?x42614)))
 (= (+ (+ (+ ?x44108 ?x42616) ?x44110) ?x44112) 0.0)))))))))))))))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44131 (* ?x39652 l_0_8_172)))
 (= (+ (* (* (- 2.0) l_0_8_127) l_0_8_91) ?x44131) 0.0))))
(assert
 (let ((?x44145 (* l_0_8_93 l_0_8_93)))
 (let ((?x44143 (* l_0_8_92 l_0_8_92)))
 (let ((?x44137 (* l_0_8_138 l_0_8_138)))
 (let ((?x44135 (* l_0_8_137 l_0_8_137)))
 (let ((?x44138 (+ ?x44135 ?x44137)))
 (= (- (- ?x44138 ?x44143) ?x44145) 0.0)))))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x42711 (* ?x42710 l_0_8_95)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x42708 (* ?x42707 l_0_8_94)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x42695 (* ?x39808 l_0_8_140)))
 (= (- (- (+ (* (* 2.0 l_0_8_137) l_0_8_139) ?x42695) ?x42708) ?x42711) 0.0))))))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x44112 (* ?x42710 l_0_8_98)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x44110 (* ?x42707 l_0_8_97)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44106 (* ?x39808 l_0_8_143)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44104 (* ?x39805 l_0_8_142)))
 (= (- (- (+ ?x44104 ?x44106) ?x44110) ?x44112) 0.0))))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x39809 (* ?x39808 l_0_8_152)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x39806 (* ?x39805 l_0_8_151)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39803 (* ?x39567 l_0_8_93)))
 (let ((?x39810 (+ (+ (- (* (* (- 2.0) l_0_8_106) l_0_8_92) ?x39803) ?x39806) ?x39809)))
 (= ?x39810 0.0)))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x19702 (* ?x39808 l_0_8_158)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x19696 (* ?x39805 l_0_8_157)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x19681 (* ?x43630 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_112) l_0_8_92) ?x19681) ?x19696) ?x19702) 0.0))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44185 (* ?x39808 l_0_8_165)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44183 (* ?x39805 l_0_8_164)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44176 (* ?x43811 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_119) l_0_8_92) ?x44176) ?x44183) ?x44185) 0.0))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44202 (* ?x39808 l_0_8_173)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44200 (* ?x39805 l_0_8_172)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44198 (* ?x43893 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_127) l_0_8_92) ?x44198) ?x44200) ?x44202) 0.0))))))))
(assert
 (let ((?x42881 (* l_0_8_96 l_0_8_96)))
 (let ((?x42879 (* l_0_8_95 l_0_8_95)))
 (let ((?x42877 (* l_0_8_94 l_0_8_94)))
 (let ((?x42859 (* l_0_8_141 l_0_8_141)))
 (let ((?x44213 (- (+ (+ (* l_0_8_139 l_0_8_139) (* l_0_8_140 l_0_8_140)) ?x42859) ?x42877)))
 (= (- (- ?x44213 ?x42879) ?x42881) 0.0)))))))
(assert
 (let ((?x43040 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x43037 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x43034 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43012 (* ?x40033 l_0_8_144)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43010 (* ?x40030 l_0_8_143)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43008 (* ?x40027 l_0_8_142)))
 (= (- (- (- (+ (+ ?x43008 ?x43010) ?x43012) ?x43034) ?x43037) ?x43040) 0.0)))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x40034 (* ?x40033 l_0_8_153)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x40031 (* ?x40030 l_0_8_152)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x40028 (* ?x40027 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40025 (* ?x39570 l_0_8_96)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40023 (* ?x39567 l_0_8_95)))
 (let ((?x40032 (+ (+ (- (- (* (* (- 2.0) l_0_8_106) l_0_8_94) ?x40023) ?x40025) ?x40028) ?x40031)))
 (let ((?x40035 (+ ?x40032 ?x40034)))
 (= ?x40035 0.0))))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43640 (* ?x40033 l_0_8_159)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43638 (* ?x40030 l_0_8_158)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43636 (* ?x40027 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x43634 (* ?x43633 l_0_8_96)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x43631 (* ?x43630 l_0_8_95)))
 (let ((?x33401 (+ (+ (- (- (* (* (- 2.0) l_0_8_112) l_0_8_94) ?x43631) ?x43634) ?x43636) ?x43638)))
 (= (+ ?x33401 ?x43640) 0.0)))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43821 (* ?x40033 l_0_8_166)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43819 (* ?x40030 l_0_8_165)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43817 (* ?x40027 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x43815 (* ?x43814 l_0_8_96)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x43812 (* ?x43811 l_0_8_95)))
 (let ((?x44234 (+ (+ (- (- (* (* (- 2.0) l_0_8_119) l_0_8_94) ?x43812) ?x43815) ?x43817) ?x43819)))
 (= (+ ?x44234 ?x43821) 0.0)))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43903 (* ?x40033 l_0_8_174)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43901 (* ?x40030 l_0_8_173)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43899 (* ?x40027 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x43897 (* ?x43896 l_0_8_96)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x43894 (* ?x43893 l_0_8_95)))
 (let ((?x44243 (+ (+ (- (- (* (* (- 2.0) l_0_8_127) l_0_8_94) ?x43894) ?x43897) ?x43899) ?x43901)))
 (= (+ ?x44243 ?x43903) 0.0)))))))))))))
(assert
 (let ((?x44262 (* l_0_8_99 l_0_8_99)))
 (let ((?x44260 (* l_0_8_98 l_0_8_98)))
 (let ((?x44258 (* l_0_8_97 l_0_8_97)))
 (let ((?x44256 (* l_0_8_145 l_0_8_145)))
 (let ((?x44254 (* l_0_8_144 l_0_8_144)))
 (let ((?x44252 (* l_0_8_143 l_0_8_143)))
 (let ((?x44253 (+ (+ (* (- l_0_8_100) l_0_8_100) (* l_0_8_142 l_0_8_142)) ?x44252)))
 (= (- (- (- (+ (+ ?x44253 ?x44254) ?x44256) ?x44258) ?x44260) ?x44262) 0.0)))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x40287 (* ?x40286 l_0_8_154)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x40284 (* ?x40283 l_0_8_153)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x40281 (* ?x40280 l_0_8_152)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x40278 (* ?x40277 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40275 (* ?x39570 l_0_8_99)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40273 (* ?x39567 l_0_8_98)))
 (let ((?x39560 (* 2.0 l_0_8_106)))
 (let ((?x40264 (* ?x39560 l_0_8_97)))
 (let ((?x44280 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_109) ?x40264) ?x40273) ?x40275) ?x40278)))
 (= (+ (+ (+ ?x44280 ?x40281) ?x40284) ?x40287) 0.0)))))))))))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x14775 (* ?x40286 l_0_8_160)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x33490 (* ?x40283 l_0_8_159)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x33487 (* ?x40280 l_0_8_158)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x33460 (* ?x40277 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x19871 (* ?x43633 l_0_8_99)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x33479 (* ?x43630 l_0_8_98)))
 (let ((?x43628 (* 2.0 l_0_8_112)))
 (let ((?x33475 (* ?x43628 l_0_8_97)))
 (let ((?x19809 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_115) ?x33475) ?x33479) ?x19871) ?x33460)))
 (= (+ (+ (+ ?x19809 ?x33487) ?x33490) ?x14775) 0.0)))))))))))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44323 (* ?x40286 l_0_8_167)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44321 (* ?x40283 l_0_8_166)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44319 (* ?x40280 l_0_8_165)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44317 (* ?x40277 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44315 (* ?x43814 l_0_8_99)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44306 (* ?x43811 l_0_8_98)))
 (let ((?x33167 (* 2.0 l_0_8_119)))
 (let ((?x44302 (* ?x33167 l_0_8_97)))
 (let ((?x44318 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_122) ?x44302) ?x44306) ?x44315) ?x44317)))
 (= (+ (+ (+ ?x44318 ?x44319) ?x44321) ?x44323) 0.0)))))))))))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44361 (* ?x40286 l_0_8_175)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44359 (* ?x40283 l_0_8_174)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44357 (* ?x40280 l_0_8_173)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44355 (* ?x40277 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x44353 (* ?x43896 l_0_8_99)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44344 (* ?x43893 l_0_8_98)))
 (let ((?x43891 (* 2.0 l_0_8_127)))
 (let ((?x44340 (* ?x43891 l_0_8_97)))
 (let ((?x44356 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_130) ?x44340) ?x44344) ?x44353) ?x44355)))
 (= (+ (+ (+ ?x44356 ?x44357) ?x44359) ?x44361) 0.0)))))))))))))))))
(assert
 (let ((?x40815 (* l_0_8_156 l_0_8_156)))
 (let ((?x40813 (* l_0_8_155 l_0_8_155)))
 (let ((?x40811 (* l_0_8_154 l_0_8_154)))
 (let ((?x40809 (* l_0_8_153 l_0_8_153)))
 (let ((?x40807 (* l_0_8_152 l_0_8_152)))
 (let ((?x40805 (* l_0_8_151 l_0_8_151)))
 (let ((?x40803 (* l_0_8_111 l_0_8_111)))
 (let ((?x40801 (* l_0_8_110 l_0_8_110)))
 (let ((?x40790 (* l_0_8_109 l_0_8_109)))
 (let ((?x40787 (* l_0_8_108 l_0_8_108)))
 (let ((?x40789 (- (- (* (- l_0_8_106) l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x40787)))
 (let ((?x40812 (+ (+ (+ (+ (- (- (- ?x40789 ?x40790) ?x40801) ?x40803) ?x40805) ?x40807) ?x40809) ?x40811)))
 (let ((?x40816 (+ (+ ?x40812 ?x40813) ?x40815)))
 (= ?x40816 0.0)))))))))))))))
(assert
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41182 (* ?x39597 l_0_8_169)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41180 (* ?x39594 l_0_8_168)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41178 (* ?x39591 l_0_8_167)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41176 (* ?x39588 l_0_8_166)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41174 (* ?x39585 l_0_8_165)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41172 (* ?x39582 l_0_8_164)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41170 (* ?x39579 l_0_8_124)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41168 (* ?x39576 l_0_8_123)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41166 (* ?x39573 l_0_8_122)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41164 (* ?x39570 l_0_8_121)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41162 (* ?x39567 l_0_8_120)))
 (let ((?x41169 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_119) ?x41162) ?x41164) ?x41166) ?x41168)))
 (let ((?x41183 (+ (+ (+ (+ (+ (+ (- ?x41169 ?x41170) ?x41172) ?x41174) ?x41176) ?x41178) ?x41180) ?x41182)))
 (= ?x41183 0.0))))))))))))))))))))))))))
(assert
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41337 (* ?x39597 l_0_8_177)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41335 (* ?x39594 l_0_8_176)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41333 (* ?x39591 l_0_8_175)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41331 (* ?x39588 l_0_8_174)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41329 (* ?x39585 l_0_8_173)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41327 (* ?x39582 l_0_8_172)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41325 (* ?x39579 l_0_8_132)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41306 (* ?x39576 l_0_8_131)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41302 (* ?x39573 l_0_8_130)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41298 (* ?x39570 l_0_8_129)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41294 (* ?x39567 l_0_8_128)))
 (let ((?x41307 (- (- (- (- (* (* (- 2.0) l_0_8_106) l_0_8_127) ?x41294) ?x41298) ?x41302) ?x41306)))
 (let ((?x41338 (+ (+ (+ (+ (+ (+ (- ?x41307 ?x41325) ?x41327) ?x41329) ?x41331) ?x41333) ?x41335) ?x41337)))
 (= ?x41338 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x44394 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393)))
 (let ((?x44408 (+ (+ (+ (- (- (- (- ?x44394 ?x44395) ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407)))
 (= (+ (+ (+ (+ ?x44408 ?x44409) ?x44411) ?x44413) ?x44415) 0.0))))))))))))))))
(assert
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44481 (* ?x44480 l_0_8_170)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44478 (* ?x44477 l_0_8_169)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44475 (* ?x44474 l_0_8_168)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44472 (* ?x44471 l_0_8_167)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44469 (* ?x44468 l_0_8_166)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44466 (* ?x44465 l_0_8_165)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44463 (* ?x44462 l_0_8_164)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44460 (* ?x44459 l_0_8_125)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44457 (* ?x44456 l_0_8_124)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44454 (* ?x44453 l_0_8_123)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44451 (* ?x44450 l_0_8_122)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x43633 l_0_8_121)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x43630 l_0_8_120)))
 (let ((?x44455 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44451) ?x44454)))
 (let ((?x44476 (+ (+ (+ (+ (+ (- (- ?x44455 ?x44457) ?x44460) ?x44463) ?x44466) ?x44469) ?x44472) ?x44475)))
 (= (+ (+ ?x44476 ?x44478) ?x44481) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x44112 (* ?x42710 l_0_8_98)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x44110 (* ?x42707 l_0_8_97)))
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44538 (* ?x44480 l_0_8_178)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44536 (* ?x44477 l_0_8_177)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44534 (* ?x44474 l_0_8_176)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44532 (* ?x44471 l_0_8_175)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44530 (* ?x44468 l_0_8_174)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44528 (* ?x44465 l_0_8_173)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44526 (* ?x44462 l_0_8_172)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44106 (* ?x39808 l_0_8_143)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44104 (* ?x39805 l_0_8_142)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44522 (* ?x44459 l_0_8_133)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44520 (* ?x44456 l_0_8_132)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44518 (* ?x44453 l_0_8_131)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44516 (* ?x44450 l_0_8_130)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44514 (* ?x43633 l_0_8_129)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44512 (* ?x43630 l_0_8_128)))
 (let ((?x44519 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_127) ?x44512) ?x44514) ?x44516) ?x44518)))
 (let ((?x44523 (- (- ?x44519 ?x44520) ?x44522)))
 (let ((?x44535 (+ (+ (+ (+ (+ (+ (+ ?x44523 ?x44104) ?x44106) ?x44526) ?x44528) ?x44530) ?x44532) ?x44534)))
 (= (- (- (+ (+ ?x44535 ?x44536) ?x44538) ?x44110) ?x44112) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x44604 (* l_0_8_171 l_0_8_171)))
 (let ((?x44602 (* l_0_8_170 l_0_8_170)))
 (let ((?x44600 (* l_0_8_169 l_0_8_169)))
 (let ((?x44598 (* l_0_8_168 l_0_8_168)))
 (let ((?x44596 (* l_0_8_167 l_0_8_167)))
 (let ((?x44594 (* l_0_8_166 l_0_8_166)))
 (let ((?x44592 (* l_0_8_165 l_0_8_165)))
 (let ((?x44590 (* l_0_8_164 l_0_8_164)))
 (let ((?x44588 (* l_0_8_126 l_0_8_126)))
 (let ((?x44586 (* l_0_8_125 l_0_8_125)))
 (let ((?x44584 (* l_0_8_124 l_0_8_124)))
 (let ((?x44582 (* l_0_8_123 l_0_8_123)))
 (let ((?x44580 (* l_0_8_122 l_0_8_122)))
 (let ((?x44578 (* l_0_8_121 l_0_8_121)))
 (let ((?x44579 (- (- (* (- l_0_8_119) l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44578)))
 (let ((?x44593 (+ (+ (- (- (- (- (- ?x44579 ?x44580) ?x44582) ?x44584) ?x44586) ?x44588) ?x44590) ?x44592)))
 (= (+ (+ (+ (+ (+ (+ ?x44593 ?x44594) ?x44596) ?x44598) ?x44600) ?x44602) ?x44604) 0.0))))))))))))))))))
(assert
 (let ((?x44662 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44659 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44656 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44653 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44650 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44647 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44644 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44641 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44638 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44635 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44632 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44629 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44626 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44623 (* ?x43814 l_0_8_129)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44621 (* ?x43811 l_0_8_128)))
 (let ((?x44630 (- (- (- (- (* (* (- 2.0) l_0_8_119) l_0_8_127) ?x44621) ?x44623) ?x44626) ?x44629)))
 (let ((?x44651 (+ (+ (+ (+ (- (- (- ?x44630 ?x44632) ?x44635) ?x44638) ?x44641) ?x44644) ?x44647) ?x44650)))
 (= (+ (+ (+ (+ ?x44651 ?x44653) ?x44656) ?x44659) ?x44662) 0.0)))))))))))))))))))))
(assert
 (let ((?x44744 (* l_0_8_180 l_0_8_180)))
 (let ((?x44742 (* l_0_8_179 l_0_8_179)))
 (let ((?x44740 (* l_0_8_178 l_0_8_178)))
 (let ((?x44738 (* l_0_8_177 l_0_8_177)))
 (let ((?x44736 (* l_0_8_176 l_0_8_176)))
 (let ((?x44734 (* l_0_8_175 l_0_8_175)))
 (let ((?x44732 (* l_0_8_174 l_0_8_174)))
 (let ((?x44730 (* l_0_8_173 l_0_8_173)))
 (let ((?x44728 (* l_0_8_172 l_0_8_172)))
 (let ((?x44726 (* l_0_8_135 l_0_8_135)))
 (let ((?x44724 (* l_0_8_134 l_0_8_134)))
 (let ((?x44722 (* l_0_8_133 l_0_8_133)))
 (let ((?x44720 (* l_0_8_132 l_0_8_132)))
 (let ((?x44707 (* l_0_8_131 l_0_8_131)))
 (let ((?x44704 (* l_0_8_130 l_0_8_130)))
 (let ((?x44700 (* l_0_8_129 l_0_8_129)))
 (let ((?x44702 (- (- (* (- l_0_8_127) l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44700)))
 (let ((?x44729 (+ (- (- (- (- (- (- ?x44702 ?x44704) ?x44707) ?x44720) ?x44722) ?x44724) ?x44726) ?x44728)))
 (let ((?x44743 (+ (+ (+ (+ (+ (+ (+ ?x44729 ?x44730) ?x44732) ?x44734) ?x44736) ?x44738) ?x44740) ?x44742)))
 (= (+ ?x44743 ?x44744) 0.0)))))))))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x33323 (* ?x42515 l_0_8_92)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_137) ?x33323) 0.0))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x44072 (* ?x42515 l_0_8_97)))
 (= (- (* (* 2.0 l_0_8_136) l_0_8_142) ?x44072) 0.0))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x41591 (* ?x39652 l_0_8_146)))
 (= (+ (* (* (- 2.0) l_0_8_101) l_0_8_91) ?x41591) 0.0))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44091 (* ?x39652 l_0_8_157)))
 (= (+ (* (* (- 2.0) l_0_8_112) l_0_8_91) ?x44091) 0.0))))
(assert
 (let ((?x43668 (* 2.0 l_0_8_253)))
 (let ((?x43751 (* ?x43668 l_0_8_268)))
 (let ((?x43665 (* 2.0 l_0_8_252)))
 (let ((?x43749 (* ?x43665 l_0_8_267)))
 (let ((?x43662 (* 2.0 l_0_8_251)))
 (let ((?x43747 (* ?x43662 l_0_8_266)))
 (let ((?x43659 (* 2.0 l_0_8_250)))
 (let ((?x43745 (* ?x43659 l_0_8_265)))
 (let ((?x43655 (* 2.0 l_0_8_249)))
 (let ((?x43742 (* ?x43655 l_0_8_264)))
 (let ((?x43652 (* 2.0 l_0_8_248)))
 (let ((?x43740 (* ?x43652 l_0_8_263)))
 (let ((?x43649 (* 2.0 l_0_8_247)))
 (let ((?x43738 (* ?x43649 l_0_8_262)))
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44538 (* ?x44480 l_0_8_178)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44536 (* ?x44477 l_0_8_177)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44534 (* ?x44474 l_0_8_176)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44532 (* ?x44471 l_0_8_175)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44530 (* ?x44468 l_0_8_174)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44528 (* ?x44465 l_0_8_173)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44526 (* ?x44462 l_0_8_172)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44098 (* ?x39652 l_0_8_164)))
 (let ((?x33167 (* 2.0 l_0_8_119)))
 (let ((?x44785 (* ?x33167 l_0_8_91)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44522 (* ?x44459 l_0_8_133)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44520 (* ?x44456 l_0_8_132)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44518 (* ?x44453 l_0_8_131)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44516 (* ?x44450 l_0_8_130)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44514 (* ?x43633 l_0_8_129)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44512 (* ?x43630 l_0_8_128)))
 (let ((?x44782 (+ (+ (+ (+ (* (* 2.0 l_0_8_112) l_0_8_127) ?x44512) ?x44514) ?x44516) ?x44518)))
 (let ((?x44790 (- (- (- (+ (- (+ (+ ?x44782 ?x44520) ?x44522) ?x44785) ?x44098) ?x44526) ?x44528) ?x44530)))
 (let ((?x44797 (+ (+ (+ (- (- (- (- ?x44790 ?x44532) ?x44534) ?x44536) ?x44538) ?x43738) ?x43740) ?x43742)))
 (= (+ (+ (+ (+ ?x44797 ?x43745) ?x43747) ?x43749) ?x43751) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44131 (* ?x39652 l_0_8_172)))
 (= (+ (* (* (- 2.0) l_0_8_127) l_0_8_91) ?x44131) 0.0))))
(assert
 (let ((?x44145 (* l_0_8_93 l_0_8_93)))
 (let ((?x44143 (* l_0_8_92 l_0_8_92)))
 (let ((?x44137 (* l_0_8_138 l_0_8_138)))
 (let ((?x44135 (* l_0_8_137 l_0_8_137)))
 (let ((?x44138 (+ ?x44135 ?x44137)))
 (= (- (- ?x44138 ?x44143) ?x44145) 0.0)))))))
(assert
 (let ((?x42710 (* 2.0 l_0_8_93)))
 (let ((?x42711 (* ?x42710 l_0_8_95)))
 (let ((?x42707 (* 2.0 l_0_8_92)))
 (let ((?x42708 (* ?x42707 l_0_8_94)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x42695 (* ?x39808 l_0_8_140)))
 (= (- (- (+ (* (* 2.0 l_0_8_137) l_0_8_139) ?x42695) ?x42708) ?x42711) 0.0))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x41699 (* ?x39808 l_0_8_147)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x41697 (* ?x39805 l_0_8_146)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41695 (* ?x40544 l_0_8_93)))
 (let ((?x41700 (+ (+ (- (* (* (- 2.0) l_0_8_101) l_0_8_92) ?x41695) ?x41697) ?x41699)))
 (= ?x41700 0.0)))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x19702 (* ?x39808 l_0_8_158)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x19696 (* ?x39805 l_0_8_157)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x19681 (* ?x43630 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_112) l_0_8_92) ?x19681) ?x19696) ?x19702) 0.0))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44185 (* ?x39808 l_0_8_165)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44183 (* ?x39805 l_0_8_164)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44176 (* ?x43811 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_119) l_0_8_92) ?x44176) ?x44183) ?x44185) 0.0))))))))
(assert
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44202 (* ?x39808 l_0_8_173)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44200 (* ?x39805 l_0_8_172)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44198 (* ?x43893 l_0_8_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_8_127) l_0_8_92) ?x44198) ?x44200) ?x44202) 0.0))))))))
(assert
 (let ((?x42881 (* l_0_8_96 l_0_8_96)))
 (let ((?x42879 (* l_0_8_95 l_0_8_95)))
 (let ((?x42877 (* l_0_8_94 l_0_8_94)))
 (let ((?x42859 (* l_0_8_141 l_0_8_141)))
 (let ((?x44213 (- (+ (+ (* l_0_8_139 l_0_8_139) (* l_0_8_140 l_0_8_140)) ?x42859) ?x42877)))
 (= (- (- ?x44213 ?x42879) ?x42881) 0.0)))))))
(assert
 (let ((?x43040 (* (* 2.0 l_0_8_96) l_0_8_99)))
 (let ((?x43037 (* (* 2.0 l_0_8_95) l_0_8_98)))
 (let ((?x43034 (* (* 2.0 l_0_8_94) l_0_8_97)))
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43012 (* ?x40033 l_0_8_144)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43010 (* ?x40030 l_0_8_143)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43008 (* ?x40027 l_0_8_142)))
 (= (- (- (- (+ (+ ?x43008 ?x43010) ?x43012) ?x43034) ?x43037) ?x43040) 0.0)))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x41737 (* ?x40033 l_0_8_148)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x41735 (* ?x40030 l_0_8_147)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x41733 (* ?x40027 l_0_8_146)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41731 (* ?x40549 l_0_8_96)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41729 (* ?x40544 l_0_8_95)))
 (let ((?x41736 (+ (+ (- (- (* (* (- 2.0) l_0_8_101) l_0_8_94) ?x41729) ?x41731) ?x41733) ?x41735)))
 (let ((?x41738 (+ ?x41736 ?x41737)))
 (= ?x41738 0.0))))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43640 (* ?x40033 l_0_8_159)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43638 (* ?x40030 l_0_8_158)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43636 (* ?x40027 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x43634 (* ?x43633 l_0_8_96)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x43631 (* ?x43630 l_0_8_95)))
 (let ((?x33401 (+ (+ (- (- (* (* (- 2.0) l_0_8_112) l_0_8_94) ?x43631) ?x43634) ?x43636) ?x43638)))
 (= (+ ?x33401 ?x43640) 0.0)))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43821 (* ?x40033 l_0_8_166)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43819 (* ?x40030 l_0_8_165)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43817 (* ?x40027 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x43815 (* ?x43814 l_0_8_96)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x43812 (* ?x43811 l_0_8_95)))
 (let ((?x44234 (+ (+ (- (- (* (* (- 2.0) l_0_8_119) l_0_8_94) ?x43812) ?x43815) ?x43817) ?x43819)))
 (= (+ ?x44234 ?x43821) 0.0)))))))))))))
(assert
 (let ((?x40033 (* 2.0 l_0_8_141)))
 (let ((?x43903 (* ?x40033 l_0_8_174)))
 (let ((?x40030 (* 2.0 l_0_8_140)))
 (let ((?x43901 (* ?x40030 l_0_8_173)))
 (let ((?x40027 (* 2.0 l_0_8_139)))
 (let ((?x43899 (* ?x40027 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x43897 (* ?x43896 l_0_8_96)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x43894 (* ?x43893 l_0_8_95)))
 (let ((?x44243 (+ (+ (- (- (* (* (- 2.0) l_0_8_127) l_0_8_94) ?x43894) ?x43897) ?x43899) ?x43901)))
 (= (+ ?x44243 ?x43903) 0.0)))))))))))))
(assert
 (let ((?x44262 (* l_0_8_99 l_0_8_99)))
 (let ((?x44260 (* l_0_8_98 l_0_8_98)))
 (let ((?x44258 (* l_0_8_97 l_0_8_97)))
 (let ((?x44256 (* l_0_8_145 l_0_8_145)))
 (let ((?x44254 (* l_0_8_144 l_0_8_144)))
 (let ((?x44252 (* l_0_8_143 l_0_8_143)))
 (let ((?x44253 (+ (+ (* (- l_0_8_100) l_0_8_100) (* l_0_8_142 l_0_8_142)) ?x44252)))
 (= (- (- (- (+ (+ ?x44253 ?x44254) ?x44256) ?x44258) ?x44260) ?x44262) 0.0)))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x14775 (* ?x40286 l_0_8_160)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x33490 (* ?x40283 l_0_8_159)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x33487 (* ?x40280 l_0_8_158)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x33460 (* ?x40277 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x19871 (* ?x43633 l_0_8_99)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x33479 (* ?x43630 l_0_8_98)))
 (let ((?x43628 (* 2.0 l_0_8_112)))
 (let ((?x33475 (* ?x43628 l_0_8_97)))
 (let ((?x19809 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_115) ?x33475) ?x33479) ?x19871) ?x33460)))
 (= (+ (+ (+ ?x19809 ?x33487) ?x33490) ?x14775) 0.0)))))))))))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44323 (* ?x40286 l_0_8_167)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44321 (* ?x40283 l_0_8_166)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44319 (* ?x40280 l_0_8_165)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44317 (* ?x40277 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44315 (* ?x43814 l_0_8_99)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44306 (* ?x43811 l_0_8_98)))
 (let ((?x33167 (* 2.0 l_0_8_119)))
 (let ((?x44302 (* ?x33167 l_0_8_97)))
 (let ((?x44318 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_122) ?x44302) ?x44306) ?x44315) ?x44317)))
 (= (+ (+ (+ ?x44318 ?x44319) ?x44321) ?x44323) 0.0)))))))))))))))))
(assert
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44361 (* ?x40286 l_0_8_175)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44359 (* ?x40283 l_0_8_174)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44357 (* ?x40280 l_0_8_173)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44355 (* ?x40277 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x44353 (* ?x43896 l_0_8_99)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44344 (* ?x43893 l_0_8_98)))
 (let ((?x43891 (* 2.0 l_0_8_127)))
 (let ((?x44340 (* ?x43891 l_0_8_97)))
 (let ((?x44356 (+ (- (- (- (* (* (- 2.0) l_0_8_100) l_0_8_130) ?x44340) ?x44344) ?x44353) ?x44355)))
 (= (+ (+ (+ ?x44356 ?x44357) ?x44359) ?x44361) 0.0)))))))))))))))))
(assert
 (let ((?x41803 (* l_0_8_150 l_0_8_150)))
 (let ((?x41801 (* l_0_8_149 l_0_8_149)))
 (let ((?x41799 (* l_0_8_148 l_0_8_148)))
 (let ((?x41797 (* l_0_8_147 l_0_8_147)))
 (let ((?x41795 (* l_0_8_146 l_0_8_146)))
 (let ((?x41790 (* l_0_8_105 l_0_8_105)))
 (let ((?x41788 (* l_0_8_104 l_0_8_104)))
 (let ((?x41786 (* l_0_8_103 l_0_8_103)))
 (let ((?x41787 (- (- (* (- l_0_8_101) l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x41786)))
 (let ((?x41791 (- (- ?x41787 ?x41788) ?x41790)))
 (= (+ (+ (+ (+ (+ ?x41791 ?x41795) ?x41797) ?x41799) ?x41801) ?x41803) 0.0))))))))))))
(assert
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41861 (* ?x40588 l_0_8_161)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41859 (* ?x40583 l_0_8_160)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41857 (* ?x40580 l_0_8_159)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41855 (* ?x40577 l_0_8_158)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41853 (* ?x40574 l_0_8_157)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41851 (* ?x40563 l_0_8_116)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41849 (* ?x40560 l_0_8_115)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41847 (* ?x40549 l_0_8_114)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41845 (* ?x40544 l_0_8_113)))
 (let ((?x41852 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_112) ?x41845) ?x41847) ?x41849) ?x41851)))
 (let ((?x41862 (+ (+ (+ (+ (+ ?x41852 ?x41853) ?x41855) ?x41857) ?x41859) ?x41861)))
 (= ?x41862 0.0))))))))))))))))))))))
(assert
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41919 (* ?x40588 l_0_8_168)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41917 (* ?x40583 l_0_8_167)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41915 (* ?x40580 l_0_8_166)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41913 (* ?x40577 l_0_8_165)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41911 (* ?x40574 l_0_8_164)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41909 (* ?x40563 l_0_8_123)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41907 (* ?x40560 l_0_8_122)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41905 (* ?x40549 l_0_8_121)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41903 (* ?x40544 l_0_8_120)))
 (let ((?x41910 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_119) ?x41903) ?x41905) ?x41907) ?x41909)))
 (let ((?x41920 (+ (+ (+ (+ (+ ?x41910 ?x41911) ?x41913) ?x41915) ?x41917) ?x41919)))
 (= ?x41920 0.0))))))))))))))))))))))
(assert
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41971 (* ?x40588 l_0_8_176)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41969 (* ?x40583 l_0_8_175)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41967 (* ?x40580 l_0_8_174)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41965 (* ?x40577 l_0_8_173)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41963 (* ?x40574 l_0_8_172)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41961 (* ?x40563 l_0_8_131)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41959 (* ?x40560 l_0_8_130)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41957 (* ?x40549 l_0_8_129)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41955 (* ?x40544 l_0_8_128)))
 (let ((?x41962 (- (- (- (- (* (* (- 2.0) l_0_8_101) l_0_8_127) ?x41955) ?x41957) ?x41959) ?x41961)))
 (let ((?x41972 (+ (+ (+ (+ (+ ?x41962 ?x41963) ?x41965) ?x41967) ?x41969) ?x41971)))
 (= ?x41972 0.0))))))))))))))))))))))
(assert
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x44394 (- (- (* (- l_0_8_112) l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393)))
 (let ((?x44408 (+ (+ (+ (- (- (- (- ?x44394 ?x44395) ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407)))
 (= (+ (+ (+ (+ ?x44408 ?x44409) ?x44411) ?x44413) ?x44415) 0.0))))))))))))))))
(assert
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44481 (* ?x44480 l_0_8_170)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44478 (* ?x44477 l_0_8_169)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44475 (* ?x44474 l_0_8_168)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44472 (* ?x44471 l_0_8_167)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44469 (* ?x44468 l_0_8_166)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44466 (* ?x44465 l_0_8_165)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44463 (* ?x44462 l_0_8_164)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44460 (* ?x44459 l_0_8_125)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44457 (* ?x44456 l_0_8_124)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44454 (* ?x44453 l_0_8_123)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44451 (* ?x44450 l_0_8_122)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x43633 l_0_8_121)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x43630 l_0_8_120)))
 (let ((?x44455 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44451) ?x44454)))
 (let ((?x44476 (+ (+ (+ (+ (+ (- (- ?x44455 ?x44457) ?x44460) ?x44463) ?x44466) ?x44469) ?x44472) ?x44475)))
 (= (+ (+ ?x44476 ?x44478) ?x44481) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44538 (* ?x44480 l_0_8_178)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44536 (* ?x44477 l_0_8_177)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44534 (* ?x44474 l_0_8_176)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44532 (* ?x44471 l_0_8_175)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44530 (* ?x44468 l_0_8_174)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44528 (* ?x44465 l_0_8_173)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44526 (* ?x44462 l_0_8_172)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44522 (* ?x44459 l_0_8_133)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44520 (* ?x44456 l_0_8_132)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44518 (* ?x44453 l_0_8_131)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44516 (* ?x44450 l_0_8_130)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44514 (* ?x43633 l_0_8_129)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44512 (* ?x43630 l_0_8_128)))
 (let ((?x44519 (- (- (- (- (* (* (- 2.0) l_0_8_112) l_0_8_127) ?x44512) ?x44514) ?x44516) ?x44518)))
 (let ((?x44523 (- (- ?x44519 ?x44520) ?x44522)))
 (let ((?x44832 (+ (+ (+ (+ (+ (+ (+ ?x44523 ?x44526) ?x44528) ?x44530) ?x44532) ?x44534) ?x44536) ?x44538)))
 (= ?x44832 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x44604 (* l_0_8_171 l_0_8_171)))
 (let ((?x44602 (* l_0_8_170 l_0_8_170)))
 (let ((?x44600 (* l_0_8_169 l_0_8_169)))
 (let ((?x44598 (* l_0_8_168 l_0_8_168)))
 (let ((?x44596 (* l_0_8_167 l_0_8_167)))
 (let ((?x44594 (* l_0_8_166 l_0_8_166)))
 (let ((?x44592 (* l_0_8_165 l_0_8_165)))
 (let ((?x44590 (* l_0_8_164 l_0_8_164)))
 (let ((?x44588 (* l_0_8_126 l_0_8_126)))
 (let ((?x44586 (* l_0_8_125 l_0_8_125)))
 (let ((?x44584 (* l_0_8_124 l_0_8_124)))
 (let ((?x44582 (* l_0_8_123 l_0_8_123)))
 (let ((?x44580 (* l_0_8_122 l_0_8_122)))
 (let ((?x44578 (* l_0_8_121 l_0_8_121)))
 (let ((?x44579 (- (- (* (- l_0_8_119) l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44578)))
 (let ((?x44593 (+ (+ (- (- (- (- (- ?x44579 ?x44580) ?x44582) ?x44584) ?x44586) ?x44588) ?x44590) ?x44592)))
 (= (+ (+ (+ (+ (+ (+ ?x44593 ?x44594) ?x44596) ?x44598) ?x44600) ?x44602) ?x44604) 0.0))))))))))))))))))
(assert
 (let ((?x44662 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44659 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44656 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44653 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44650 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44647 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44644 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44641 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44638 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44635 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44632 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44629 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44626 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44623 (* ?x43814 l_0_8_129)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44621 (* ?x43811 l_0_8_128)))
 (let ((?x44630 (- (- (- (- (* (* (- 2.0) l_0_8_119) l_0_8_127) ?x44621) ?x44623) ?x44626) ?x44629)))
 (let ((?x44651 (+ (+ (+ (+ (- (- (- ?x44630 ?x44632) ?x44635) ?x44638) ?x44641) ?x44644) ?x44647) ?x44650)))
 (= (+ (+ (+ (+ ?x44651 ?x44653) ?x44656) ?x44659) ?x44662) 0.0)))))))))))))))))))))
(assert
 (let ((?x44744 (* l_0_8_180 l_0_8_180)))
 (let ((?x44742 (* l_0_8_179 l_0_8_179)))
 (let ((?x44740 (* l_0_8_178 l_0_8_178)))
 (let ((?x44738 (* l_0_8_177 l_0_8_177)))
 (let ((?x44736 (* l_0_8_176 l_0_8_176)))
 (let ((?x44734 (* l_0_8_175 l_0_8_175)))
 (let ((?x44732 (* l_0_8_174 l_0_8_174)))
 (let ((?x44730 (* l_0_8_173 l_0_8_173)))
 (let ((?x44728 (* l_0_8_172 l_0_8_172)))
 (let ((?x44726 (* l_0_8_135 l_0_8_135)))
 (let ((?x44724 (* l_0_8_134 l_0_8_134)))
 (let ((?x44722 (* l_0_8_133 l_0_8_133)))
 (let ((?x44720 (* l_0_8_132 l_0_8_132)))
 (let ((?x44707 (* l_0_8_131 l_0_8_131)))
 (let ((?x44704 (* l_0_8_130 l_0_8_130)))
 (let ((?x44700 (* l_0_8_129 l_0_8_129)))
 (let ((?x44702 (- (- (* (- l_0_8_127) l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44700)))
 (let ((?x44729 (+ (- (- (- (- (- (- ?x44702 ?x44704) ?x44707) ?x44720) ?x44722) ?x44724) ?x44726) ?x44728)))
 (let ((?x44743 (+ (+ (+ (+ (+ (+ (+ ?x44729 ?x44730) ?x44732) ?x44734) ?x44736) ?x44738) ?x44740) ?x44742)))
 (= (+ ?x44743 ?x44744) 0.0)))))))))))))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x33323 (* ?x42515 l_0_8_92)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x29167 (* ?x29172 l_0_8_227)))
 (let ((?x44839 (- (* (* (- 2.0) l_0_8_136) l_0_8_137) (* (* 2.0 l_0_8_182) l_0_8_209))))
 (let ((?x44844 (- (+ (- ?x44839 (* (* 2.0 l_0_8_183) l_0_8_210)) ?x29167) (* (* 2.0 l_0_8_272) l_0_8_299))))
 (let ((?x44848 (- (- ?x44844 (* (* 2.0 l_0_8_273) l_0_8_300)) (* (* 2.0 l_0_8_317) l_0_8_344))))
 (let ((?x44852 (- (- ?x44848 (* (* 2.0 l_0_8_318) l_0_8_345)) (* (* 2.0 l_0_8_362) l_0_8_389))))
 (let ((?x44856 (- (- ?x44852 (* (* 2.0 l_0_8_363) l_0_8_390)) (* (* 2.0 l_0_8_407) l_0_8_434))))
 (= (+ (- ?x44856 (* (* 2.0 l_0_8_408) l_0_8_435)) ?x33323) 0.0)))))))))))
(assert
 (let ((?x42515 (* 2.0 l_0_8_91)))
 (let ((?x44072 (* ?x42515 l_0_8_97)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x15798 (* ?x29172 l_0_8_232)))
 (let ((?x44927 (- (* (* (- 2.0) l_0_8_136) l_0_8_142) (* (* 2.0 l_0_8_187) l_0_8_209))))
 (let ((?x44931 (- (- ?x44927 (* (* 2.0 l_0_8_188) l_0_8_210)) (* (* 2.0 l_0_8_189) l_0_8_211))))
 (let ((?x44936 (- (+ (- ?x44931 (* (* 2.0 l_0_8_190) l_0_8_212)) ?x15798) (* (* 2.0 l_0_8_277) l_0_8_299))))
 (let ((?x44940 (- (- ?x44936 (* (* 2.0 l_0_8_278) l_0_8_300)) (* (* 2.0 l_0_8_279) l_0_8_301))))
 (let ((?x44944 (- (- ?x44940 (* (* 2.0 l_0_8_280) l_0_8_302)) (* (* 2.0 l_0_8_322) l_0_8_344))))
 (let ((?x44948 (- (- ?x44944 (* (* 2.0 l_0_8_323) l_0_8_345)) (* (* 2.0 l_0_8_324) l_0_8_346))))
 (let ((?x44952 (- (- ?x44948 (* (* 2.0 l_0_8_325) l_0_8_347)) (* (* 2.0 l_0_8_367) l_0_8_389))))
 (let ((?x44956 (- (- ?x44952 (* (* 2.0 l_0_8_368) l_0_8_390)) (* (* 2.0 l_0_8_369) l_0_8_391))))
 (let ((?x44960 (- (- ?x44956 (* (* 2.0 l_0_8_370) l_0_8_392)) (* (* 2.0 l_0_8_412) l_0_8_434))))
 (let ((?x44964 (- (- ?x44960 (* (* 2.0 l_0_8_413) l_0_8_435)) (* (* 2.0 l_0_8_414) l_0_8_436))))
 (= (+ (- ?x44964 (* (* 2.0 l_0_8_415) l_0_8_437)) ?x44072) 0.0))))))))))))))))
(assert
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42299 (* ?x29172 l_0_8_236)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x41591 (* ?x39652 l_0_8_146)))
 (let ((?x41586 (* 2.0 l_0_8_101)))
 (let ((?x41589 (* ?x41586 l_0_8_91)))
 (let ((?x20185 (- (- (- ?x41589 ?x41591) (* (* 2.0 l_0_8_191) l_0_8_209)) (* (* 2.0 l_0_8_192) l_0_8_210))))
 (let ((?x45049 (- (- ?x20185 (* (* 2.0 l_0_8_193) l_0_8_211)) (* (* 2.0 l_0_8_194) l_0_8_212))))
 (let ((?x45056 (- (+ (- ?x45049 (* (* 2.0 l_0_8_195) l_0_8_213)) ?x42299) (* (* 2.0 l_0_8_281) l_0_8_299))))
 (let ((?x45062 (- (- ?x45056 (* (* 2.0 l_0_8_282) l_0_8_300)) (* (* 2.0 l_0_8_283) l_0_8_301))))
 (let ((?x45068 (- (- ?x45062 (* (* 2.0 l_0_8_284) l_0_8_302)) (* (* 2.0 l_0_8_285) l_0_8_303))))
 (let ((?x45074 (- (- ?x45068 (* (* 2.0 l_0_8_326) l_0_8_344)) (* (* 2.0 l_0_8_327) l_0_8_345))))
 (let ((?x45080 (- (- ?x45074 (* (* 2.0 l_0_8_328) l_0_8_346)) (* (* 2.0 l_0_8_329) l_0_8_347))))
 (let ((?x45086 (- (- ?x45080 (* (* 2.0 l_0_8_330) l_0_8_348)) (* (* 2.0 l_0_8_371) l_0_8_389))))
 (let ((?x45092 (- (- ?x45086 (* (* 2.0 l_0_8_372) l_0_8_390)) (* (* 2.0 l_0_8_373) l_0_8_391))))
 (let ((?x45098 (- (- ?x45092 (* (* 2.0 l_0_8_374) l_0_8_392)) (* (* 2.0 l_0_8_375) l_0_8_393))))
 (let ((?x45104 (- (- ?x45098 (* (* 2.0 l_0_8_416) l_0_8_434)) (* (* 2.0 l_0_8_417) l_0_8_435))))
 (let ((?x45110 (- (- ?x45104 (* (* 2.0 l_0_8_418) l_0_8_436)) (* (* 2.0 l_0_8_419) l_0_8_437))))
 (= (- ?x45110 (* (* 2.0 l_0_8_420) l_0_8_438)) 0.0))))))))))))))))))))
(assert
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42344 (* ?x29172 l_0_8_241)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x39653 (* ?x39652 l_0_8_151)))
 (let ((?x39560 (* 2.0 l_0_8_106)))
 (let ((?x39650 (* ?x39560 l_0_8_91)))
 (let ((?x45167 (- (- (- ?x39650 ?x39653) (* (* 2.0 l_0_8_196) l_0_8_209)) (* (* 2.0 l_0_8_197) l_0_8_210))))
 (let ((?x45171 (- (- ?x45167 (* (* 2.0 l_0_8_198) l_0_8_211)) (* (* 2.0 l_0_8_199) l_0_8_212))))
 (let ((?x45175 (- (- ?x45171 (* (* 2.0 l_0_8_200) l_0_8_213)) (* (* 2.0 l_0_8_201) l_0_8_214))))
 (let ((?x45180 (- (- (+ ?x45175 ?x42344) (* (* 2.0 l_0_8_286) l_0_8_299)) (* (* 2.0 l_0_8_287) l_0_8_300))))
 (let ((?x45184 (- (- ?x45180 (* (* 2.0 l_0_8_288) l_0_8_301)) (* (* 2.0 l_0_8_289) l_0_8_302))))
 (let ((?x45188 (- (- ?x45184 (* (* 2.0 l_0_8_290) l_0_8_303)) (* (* 2.0 l_0_8_291) l_0_8_304))))
 (let ((?x45192 (- (- ?x45188 (* (* 2.0 l_0_8_331) l_0_8_344)) (* (* 2.0 l_0_8_332) l_0_8_345))))
 (let ((?x45196 (- (- ?x45192 (* (* 2.0 l_0_8_333) l_0_8_346)) (* (* 2.0 l_0_8_334) l_0_8_347))))
 (let ((?x45200 (- (- ?x45196 (* (* 2.0 l_0_8_335) l_0_8_348)) (* (* 2.0 l_0_8_336) l_0_8_349))))
 (let ((?x45204 (- (- ?x45200 (* (* 2.0 l_0_8_376) l_0_8_389)) (* (* 2.0 l_0_8_377) l_0_8_390))))
 (let ((?x45208 (- (- ?x45204 (* (* 2.0 l_0_8_378) l_0_8_391)) (* (* 2.0 l_0_8_379) l_0_8_392))))
 (let ((?x45212 (- (- ?x45208 (* (* 2.0 l_0_8_380) l_0_8_393)) (* (* 2.0 l_0_8_381) l_0_8_394))))
 (let ((?x45216 (- (- ?x45212 (* (* 2.0 l_0_8_421) l_0_8_434)) (* (* 2.0 l_0_8_422) l_0_8_435))))
 (let ((?x45220 (- (- ?x45216 (* (* 2.0 l_0_8_423) l_0_8_436)) (* (* 2.0 l_0_8_424) l_0_8_437))))
 (let ((?x45224 (- (- ?x45220 (* (* 2.0 l_0_8_425) l_0_8_438)) (* (* 2.0 l_0_8_426) l_0_8_439))))
 (= ?x45224 0.0)))))))))))))))))))))))
(assert
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42418 (* ?x29172 l_0_8_247)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44091 (* ?x39652 l_0_8_157)))
 (let ((?x45284 (- (- (* (* 2.0 l_0_8_112) l_0_8_91) ?x44091) (* (* 2.0 l_0_8_202) l_0_8_209))))
 (let ((?x45288 (- (- ?x45284 (* (* 2.0 l_0_8_203) l_0_8_210)) (* (* 2.0 l_0_8_204) l_0_8_211))))
 (let ((?x45292 (- (- ?x45288 (* (* 2.0 l_0_8_205) l_0_8_212)) (* (* 2.0 l_0_8_206) l_0_8_213))))
 (let ((?x45296 (- (- ?x45292 (* (* 2.0 l_0_8_207) l_0_8_214)) (* (* 2.0 l_0_8_208) l_0_8_215))))
 (let ((?x45301 (- (- (+ ?x45296 ?x42418) (* (* 2.0 l_0_8_292) l_0_8_299)) (* (* 2.0 l_0_8_293) l_0_8_300))))
 (let ((?x45305 (- (- ?x45301 (* (* 2.0 l_0_8_294) l_0_8_301)) (* (* 2.0 l_0_8_295) l_0_8_302))))
 (let ((?x45309 (- (- ?x45305 (* (* 2.0 l_0_8_296) l_0_8_303)) (* (* 2.0 l_0_8_297) l_0_8_304))))
 (let ((?x45313 (- (- ?x45309 (* (* 2.0 l_0_8_298) l_0_8_305)) (* (* 2.0 l_0_8_337) l_0_8_344))))
 (let ((?x45317 (- (- ?x45313 (* (* 2.0 l_0_8_338) l_0_8_345)) (* (* 2.0 l_0_8_339) l_0_8_346))))
 (let ((?x45321 (- (- ?x45317 (* (* 2.0 l_0_8_340) l_0_8_347)) (* (* 2.0 l_0_8_341) l_0_8_348))))
 (let ((?x45325 (- (- ?x45321 (* (* 2.0 l_0_8_342) l_0_8_349)) (* (* 2.0 l_0_8_343) l_0_8_350))))
 (let ((?x45329 (- (- ?x45325 (* (* 2.0 l_0_8_382) l_0_8_389)) (* (* 2.0 l_0_8_383) l_0_8_390))))
 (let ((?x45333 (- (- ?x45329 (* (* 2.0 l_0_8_384) l_0_8_391)) (* (* 2.0 l_0_8_385) l_0_8_392))))
 (let ((?x45337 (- (- ?x45333 (* (* 2.0 l_0_8_386) l_0_8_393)) (* (* 2.0 l_0_8_387) l_0_8_394))))
 (let ((?x45341 (- (- ?x45337 (* (* 2.0 l_0_8_388) l_0_8_395)) (* (* 2.0 l_0_8_427) l_0_8_434))))
 (let ((?x45345 (- (- ?x45341 (* (* 2.0 l_0_8_428) l_0_8_435)) (* (* 2.0 l_0_8_429) l_0_8_436))))
 (let ((?x45349 (- (- ?x45345 (* (* 2.0 l_0_8_430) l_0_8_437)) (* (* 2.0 l_0_8_431) l_0_8_438))))
 (let ((?x45353 (- (- ?x45349 (* (* 2.0 l_0_8_432) l_0_8_439)) (* (* 2.0 l_0_8_433) l_0_8_440))))
 (= ?x45353 0.0))))))))))))))))))))))))
(assert
 (let ((?x45508 (* l_0_8_441 l_0_8_441)))
 (let ((?x45506 (* l_0_8_440 l_0_8_440)))
 (let ((?x45504 (* l_0_8_439 l_0_8_439)))
 (let ((?x45502 (* l_0_8_438 l_0_8_438)))
 (let ((?x45500 (* l_0_8_437 l_0_8_437)))
 (let ((?x45498 (* l_0_8_436 l_0_8_436)))
 (let ((?x45496 (* l_0_8_435 l_0_8_435)))
 (let ((?x45494 (* l_0_8_434 l_0_8_434)))
 (let ((?x45492 (* l_0_8_396 l_0_8_396)))
 (let ((?x45490 (* l_0_8_395 l_0_8_395)))
 (let ((?x45488 (* l_0_8_394 l_0_8_394)))
 (let ((?x45486 (* l_0_8_393 l_0_8_393)))
 (let ((?x45484 (* l_0_8_392 l_0_8_392)))
 (let ((?x45482 (* l_0_8_391 l_0_8_391)))
 (let ((?x45480 (* l_0_8_390 l_0_8_390)))
 (let ((?x45478 (* l_0_8_389 l_0_8_389)))
 (let ((?x45476 (* l_0_8_351 l_0_8_351)))
 (let ((?x45474 (* l_0_8_350 l_0_8_350)))
 (let ((?x45472 (* l_0_8_349 l_0_8_349)))
 (let ((?x45470 (* l_0_8_348 l_0_8_348)))
 (let ((?x45468 (* l_0_8_347 l_0_8_347)))
 (let ((?x45466 (* l_0_8_346 l_0_8_346)))
 (let ((?x45464 (* l_0_8_345 l_0_8_345)))
 (let ((?x45462 (* l_0_8_344 l_0_8_344)))
 (let ((?x45460 (* l_0_8_306 l_0_8_306)))
 (let ((?x45458 (* l_0_8_305 l_0_8_305)))
 (let ((?x45456 (* l_0_8_304 l_0_8_304)))
 (let ((?x45454 (* l_0_8_303 l_0_8_303)))
 (let ((?x45452 (* l_0_8_302 l_0_8_302)))
 (let ((?x45450 (* l_0_8_301 l_0_8_301)))
 (let ((?x45448 (* l_0_8_300 l_0_8_300)))
 (let ((?x45446 (* l_0_8_299 l_0_8_299)))
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x42488 (* ?x29172 l_0_8_254)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44098 (* ?x39652 l_0_8_164)))
 (let ((?x33167 (* 2.0 l_0_8_119)))
 (let ((?x44785 (* ?x33167 l_0_8_91)))
 (let ((?x45426 (- (- (- ?x44785 ?x44098) (* (* 1.0 l_0_8_209) l_0_8_209)) (* (* 1.0 l_0_8_210) l_0_8_210))))
 (let ((?x45432 (- (- ?x45426 (* (* 1.0 l_0_8_211) l_0_8_211)) (* (* 1.0 l_0_8_212) l_0_8_212))))
 (let ((?x45438 (- (- ?x45432 (* (* 1.0 l_0_8_213) l_0_8_213)) (* (* 1.0 l_0_8_214) l_0_8_214))))
 (let ((?x45444 (- (- ?x45438 (* (* 1.0 l_0_8_215) l_0_8_215)) (* (* 1.0 l_0_8_216) l_0_8_216))))
 (let ((?x45457 (- (- (- (- (- (- (+ ?x45444 ?x42488) ?x45446) ?x45448) ?x45450) ?x45452) ?x45454) ?x45456)))
 (let ((?x45471 (- (- (- (- (- (- (- ?x45457 ?x45458) ?x45460) ?x45462) ?x45464) ?x45466) ?x45468) ?x45470)))
 (let ((?x45485 (- (- (- (- (- (- (- ?x45471 ?x45472) ?x45474) ?x45476) ?x45478) ?x45480) ?x45482) ?x45484)))
 (let ((?x45499 (- (- (- (- (- (- (- ?x45485 ?x45486) ?x45488) ?x45490) ?x45492) ?x45494) ?x45496) ?x45498)))
 (= (- (- (- (- (- ?x45499 ?x45500) ?x45502) ?x45504) ?x45506) ?x45508) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x29172 (* 2.0 l_0_8_226)))
 (let ((?x29853 (* ?x29172 l_0_8_262)))
 (let ((?x39652 (* 2.0 l_0_8_136)))
 (let ((?x44131 (* ?x39652 l_0_8_172)))
 (let ((?x45581 (- (- (* (* 2.0 l_0_8_127) l_0_8_91) ?x44131) (* (* 2.0 l_0_8_209) l_0_8_217))))
 (let ((?x45587 (- (- ?x45581 (* (* 2.0 l_0_8_210) l_0_8_218)) (* (* 2.0 l_0_8_211) l_0_8_219))))
 (let ((?x45593 (- (- ?x45587 (* (* 2.0 l_0_8_212) l_0_8_220)) (* (* 2.0 l_0_8_213) l_0_8_221))))
 (let ((?x45599 (- (- ?x45593 (* (* 2.0 l_0_8_214) l_0_8_222)) (* (* 2.0 l_0_8_215) l_0_8_223))))
 (let ((?x45606 (- (+ (- ?x45599 (* (* 2.0 l_0_8_216) l_0_8_224)) ?x29853) (* (* 2.0 l_0_8_299) l_0_8_307))))
 (let ((?x45612 (- (- ?x45606 (* (* 2.0 l_0_8_300) l_0_8_308)) (* (* 2.0 l_0_8_301) l_0_8_309))))
 (let ((?x45618 (- (- ?x45612 (* (* 2.0 l_0_8_302) l_0_8_310)) (* (* 2.0 l_0_8_303) l_0_8_311))))
 (let ((?x45624 (- (- ?x45618 (* (* 2.0 l_0_8_304) l_0_8_312)) (* (* 2.0 l_0_8_305) l_0_8_313))))
 (let ((?x45630 (- (- ?x45624 (* (* 2.0 l_0_8_306) l_0_8_314)) (* (* 2.0 l_0_8_344) l_0_8_352))))
 (let ((?x45636 (- (- ?x45630 (* (* 2.0 l_0_8_345) l_0_8_353)) (* (* 2.0 l_0_8_346) l_0_8_354))))
 (let ((?x45642 (- (- ?x45636 (* (* 2.0 l_0_8_347) l_0_8_355)) (* (* 2.0 l_0_8_348) l_0_8_356))))
 (let ((?x45648 (- (- ?x45642 (* (* 2.0 l_0_8_349) l_0_8_357)) (* (* 2.0 l_0_8_350) l_0_8_358))))
 (let ((?x45654 (- (- ?x45648 (* (* 2.0 l_0_8_351) l_0_8_359)) (* (* 2.0 l_0_8_389) l_0_8_397))))
 (let ((?x45660 (- (- ?x45654 (* (* 2.0 l_0_8_390) l_0_8_398)) (* (* 2.0 l_0_8_391) l_0_8_399))))
 (let ((?x45666 (- (- ?x45660 (* (* 2.0 l_0_8_392) l_0_8_400)) (* (* 2.0 l_0_8_393) l_0_8_401))))
 (let ((?x45672 (- (- ?x45666 (* (* 2.0 l_0_8_394) l_0_8_402)) (* (* 2.0 l_0_8_395) l_0_8_403))))
 (let ((?x45678 (- (- ?x45672 (* (* 2.0 l_0_8_396) l_0_8_404)) (* (* 2.0 l_0_8_434) l_0_8_442))))
 (let ((?x45684 (- (- ?x45678 (* (* 2.0 l_0_8_435) l_0_8_443)) (* (* 2.0 l_0_8_436) l_0_8_444))))
 (let ((?x45690 (- (- ?x45684 (* (* 2.0 l_0_8_437) l_0_8_445)) (* (* 2.0 l_0_8_438) l_0_8_446))))
 (let ((?x45696 (- (- ?x45690 (* (* 2.0 l_0_8_439) l_0_8_447)) (* (* 2.0 l_0_8_440) l_0_8_448))))
 (= (- ?x45696 (* (* 2.0 l_0_8_441) l_0_8_449)) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x44145 (* l_0_8_93 l_0_8_93)))
 (let ((?x44143 (* l_0_8_92 l_0_8_92)))
 (let ((?x30172 (* l_0_8_228 l_0_8_228)))
 (let ((?x16560 (* l_0_8_227 l_0_8_227)))
 (let ((?x45829 (+ (- (* (- l_0_8_137) l_0_8_137) (* l_0_8_138 l_0_8_138)) ?x16560)))
 (= (+ (+ (+ ?x45829 ?x30172) ?x44143) ?x44145) 0.0)))))))
(assert
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42636 (* ?x42592 l_0_8_237)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42634 (* ?x42589 l_0_8_236)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x41699 (* ?x39808 l_0_8_147)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x41697 (* ?x39805 l_0_8_146)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41695 (* ?x40544 l_0_8_93)))
 (let ((?x45841 (+ (- (- (+ (* (* 2.0 l_0_8_101) l_0_8_92) ?x41695) ?x41697) ?x41699) ?x42634)))
 (= (+ ?x45841 ?x42636) 0.0)))))))))))))
(assert
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42655 (* ?x42592 l_0_8_242)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x30306 (* ?x42589 l_0_8_241)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x39809 (* ?x39808 l_0_8_152)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x39806 (* ?x39805 l_0_8_151)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x39803 (* ?x39567 l_0_8_93)))
 (let ((?x45850 (+ (- (- (+ (* (* 2.0 l_0_8_106) l_0_8_92) ?x39803) ?x39806) ?x39809) ?x30306)))
 (= (+ ?x45850 ?x42655) 0.0)))))))))))))
(assert
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42676 (* ?x42592 l_0_8_248)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42674 (* ?x42589 l_0_8_247)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x19702 (* ?x39808 l_0_8_158)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x19696 (* ?x39805 l_0_8_157)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x19681 (* ?x43630 l_0_8_93)))
 (let ((?x45856 (+ (- (- (+ (* (* 2.0 l_0_8_112) l_0_8_92) ?x19681) ?x19696) ?x19702) ?x42674)))
 (= (+ ?x45856 ?x42676) 0.0)))))))))))))
(assert
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42702 (* ?x42592 l_0_8_255)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x42699 (* ?x42589 l_0_8_254)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44185 (* ?x39808 l_0_8_165)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44183 (* ?x39805 l_0_8_164)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44176 (* ?x43811 l_0_8_93)))
 (let ((?x45864 (+ (- (- (+ (* (* 2.0 l_0_8_119) l_0_8_92) ?x44176) ?x44183) ?x44185) ?x42699)))
 (= (+ ?x45864 ?x42702) 0.0)))))))))))))
(assert
 (let ((?x42592 (* 2.0 l_0_8_228)))
 (let ((?x42737 (* ?x42592 l_0_8_263)))
 (let ((?x42589 (* 2.0 l_0_8_227)))
 (let ((?x30334 (* ?x42589 l_0_8_262)))
 (let ((?x39808 (* 2.0 l_0_8_138)))
 (let ((?x44202 (* ?x39808 l_0_8_173)))
 (let ((?x39805 (* 2.0 l_0_8_137)))
 (let ((?x44200 (* ?x39805 l_0_8_172)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44198 (* ?x43893 l_0_8_93)))
 (let ((?x45870 (+ (- (- (+ (* (* 2.0 l_0_8_127) l_0_8_92) ?x44198) ?x44200) ?x44202) ?x30334)))
 (= (+ ?x45870 ?x42737) 0.0)))))))))))))
(assert
 (let ((?x44262 (* l_0_8_99 l_0_8_99)))
 (let ((?x44260 (* l_0_8_98 l_0_8_98)))
 (let ((?x44258 (* l_0_8_97 l_0_8_97)))
 (let ((?x42913 (* l_0_8_235 l_0_8_235)))
 (let ((?x42911 (* l_0_8_234 l_0_8_234)))
 (let ((?x42909 (* l_0_8_233 l_0_8_233)))
 (let ((?x30659 (* l_0_8_232 l_0_8_232)))
 (let ((?x44256 (* l_0_8_145 l_0_8_145)))
 (let ((?x44254 (* l_0_8_144 l_0_8_144)))
 (let ((?x44252 (* l_0_8_143 l_0_8_143)))
 (let ((?x45877 (- (- (- (* l_0_8_100 l_0_8_100) (* l_0_8_142 l_0_8_142)) ?x44252) ?x44254)))
 (let ((?x45884 (+ (+ (+ (+ (+ (+ (- ?x45877 ?x44256) ?x30659) ?x42909) ?x42911) ?x42913) ?x44258) ?x44260)))
 (= (+ ?x45884 ?x44262) 0.0))))))))))))))
(assert
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x42937 (* ?x41622 l_0_8_244)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x42935 (* ?x41619 l_0_8_243)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x42933 (* ?x41616 l_0_8_242)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x42931 (* ?x41613 l_0_8_241)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x40287 (* ?x40286 l_0_8_154)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x40284 (* ?x40283 l_0_8_153)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x40281 (* ?x40280 l_0_8_152)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x40278 (* ?x40277 l_0_8_151)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x40275 (* ?x39570 l_0_8_99)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x40273 (* ?x39567 l_0_8_98)))
 (let ((?x39560 (* 2.0 l_0_8_106)))
 (let ((?x40264 (* ?x39560 l_0_8_97)))
 (let ((?x40259 (* 2.0 l_0_8_100)))
 (let ((?x40261 (* ?x40259 l_0_8_109)))
 (let ((?x21496 (- (- (- (- (+ (+ (+ ?x40261 ?x40264) ?x40273) ?x40275) ?x40278) ?x40281) ?x40284) ?x40287)))
 (= (+ (+ (+ (+ ?x21496 ?x42931) ?x42933) ?x42935) ?x42937) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x42972 (* ?x41622 l_0_8_250)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x42970 (* ?x41619 l_0_8_249)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x42968 (* ?x41616 l_0_8_248)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x42966 (* ?x41613 l_0_8_247)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x14775 (* ?x40286 l_0_8_160)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x33490 (* ?x40283 l_0_8_159)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x33487 (* ?x40280 l_0_8_158)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x33460 (* ?x40277 l_0_8_157)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x19871 (* ?x43633 l_0_8_99)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x33479 (* ?x43630 l_0_8_98)))
 (let ((?x43628 (* 2.0 l_0_8_112)))
 (let ((?x33475 (* ?x43628 l_0_8_97)))
 (let ((?x45912 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_115) ?x33475) ?x33479) ?x19871) ?x33460)))
 (let ((?x45919 (+ (+ (+ (+ (- (- (- ?x45912 ?x33487) ?x33490) ?x14775) ?x42966) ?x42968) ?x42970) ?x42972)))
 (= ?x45919 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x43024 (* ?x41622 l_0_8_257)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x43022 (* ?x41619 l_0_8_256)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x43020 (* ?x41616 l_0_8_255)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x43018 (* ?x41613 l_0_8_254)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44323 (* ?x40286 l_0_8_167)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44321 (* ?x40283 l_0_8_166)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44319 (* ?x40280 l_0_8_165)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44317 (* ?x40277 l_0_8_164)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44315 (* ?x43814 l_0_8_99)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44306 (* ?x43811 l_0_8_98)))
 (let ((?x33167 (* 2.0 l_0_8_119)))
 (let ((?x44302 (* ?x33167 l_0_8_97)))
 (let ((?x45927 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_122) ?x44302) ?x44306) ?x44315) ?x44317)))
 (let ((?x45934 (+ (+ (+ (+ (- (- (- ?x45927 ?x44319) ?x44321) ?x44323) ?x43018) ?x43020) ?x43022) ?x43024)))
 (= ?x45934 0.0))))))))))))))))))))))))))
(assert
 (let ((?x41622 (* 2.0 l_0_8_235)))
 (let ((?x43106 (* ?x41622 l_0_8_265)))
 (let ((?x41619 (* 2.0 l_0_8_234)))
 (let ((?x43104 (* ?x41619 l_0_8_264)))
 (let ((?x41616 (* 2.0 l_0_8_233)))
 (let ((?x43102 (* ?x41616 l_0_8_263)))
 (let ((?x41613 (* 2.0 l_0_8_232)))
 (let ((?x43100 (* ?x41613 l_0_8_262)))
 (let ((?x40286 (* 2.0 l_0_8_145)))
 (let ((?x44361 (* ?x40286 l_0_8_175)))
 (let ((?x40283 (* 2.0 l_0_8_144)))
 (let ((?x44359 (* ?x40283 l_0_8_174)))
 (let ((?x40280 (* 2.0 l_0_8_143)))
 (let ((?x44357 (* ?x40280 l_0_8_173)))
 (let ((?x40277 (* 2.0 l_0_8_142)))
 (let ((?x44355 (* ?x40277 l_0_8_172)))
 (let ((?x43896 (* 2.0 l_0_8_129)))
 (let ((?x44353 (* ?x43896 l_0_8_99)))
 (let ((?x43893 (* 2.0 l_0_8_128)))
 (let ((?x44344 (* ?x43893 l_0_8_98)))
 (let ((?x43891 (* 2.0 l_0_8_127)))
 (let ((?x44340 (* ?x43891 l_0_8_97)))
 (let ((?x45940 (- (+ (+ (+ (* (* 2.0 l_0_8_100) l_0_8_130) ?x44340) ?x44344) ?x44353) ?x44355)))
 (let ((?x45947 (+ (+ (+ (+ (- (- (- ?x45940 ?x44357) ?x44359) ?x44361) ?x43100) ?x43102) ?x43104) ?x43106)))
 (= ?x45947 0.0))))))))))))))))))))))))))
(assert
 (let ((?x43157 (* l_0_8_240 l_0_8_240)))
 (let ((?x43155 (* l_0_8_239 l_0_8_239)))
 (let ((?x43153 (* l_0_8_238 l_0_8_238)))
 (let ((?x43151 (* l_0_8_237 l_0_8_237)))
 (let ((?x43149 (* l_0_8_236 l_0_8_236)))
 (let ((?x41803 (* l_0_8_150 l_0_8_150)))
 (let ((?x41801 (* l_0_8_149 l_0_8_149)))
 (let ((?x41799 (* l_0_8_148 l_0_8_148)))
 (let ((?x41797 (* l_0_8_147 l_0_8_147)))
 (let ((?x41795 (* l_0_8_146 l_0_8_146)))
 (let ((?x41790 (* l_0_8_105 l_0_8_105)))
 (let ((?x41788 (* l_0_8_104 l_0_8_104)))
 (let ((?x41786 (* l_0_8_103 l_0_8_103)))
 (let ((?x21612 (+ (+ (+ (* l_0_8_101 l_0_8_101) (* l_0_8_102 l_0_8_102)) ?x41786) ?x41788)))
 (let ((?x45955 (+ (- (- (- (- (- (+ ?x21612 ?x41790) ?x41795) ?x41797) ?x41799) ?x41801) ?x41803) ?x43149)))
 (= (+ (+ (+ (+ ?x45955 ?x43151) ?x43153) ?x43155) ?x43157) 0.0)))))))))))))))))
(assert
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43206 (* ?x43205 l_0_8_245)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43203 (* ?x43202 l_0_8_244)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43200 (* ?x43199 l_0_8_243)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43197 (* ?x43196 l_0_8_242)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43194 (* ?x43193 l_0_8_241)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x40589 (* ?x40588 l_0_8_155)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x40584 (* ?x40583 l_0_8_154)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x40581 (* ?x40580 l_0_8_153)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x40578 (* ?x40577 l_0_8_152)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x40575 (* ?x40574 l_0_8_151)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x40564 (* ?x40563 l_0_8_110)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x40561 (* ?x40560 l_0_8_109)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x40558 (* ?x40549 l_0_8_108)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x40546 (* ?x40544 l_0_8_107)))
 (let ((?x45968 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_106) ?x40546) ?x40558) ?x40561) ?x40564)))
 (let ((?x45975 (+ (+ (- (- (- (- (- ?x45968 ?x40575) ?x40578) ?x40581) ?x40584) ?x40589) ?x43194) ?x43197)))
 (= (+ (+ (+ ?x45975 ?x43200) ?x43203) ?x43206) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43267 (* ?x43205 l_0_8_251)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43265 (* ?x43202 l_0_8_250)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43263 (* ?x43199 l_0_8_249)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43261 (* ?x43196 l_0_8_248)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43259 (* ?x43193 l_0_8_247)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41861 (* ?x40588 l_0_8_161)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41859 (* ?x40583 l_0_8_160)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41857 (* ?x40580 l_0_8_159)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41855 (* ?x40577 l_0_8_158)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41853 (* ?x40574 l_0_8_157)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41851 (* ?x40563 l_0_8_116)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41849 (* ?x40560 l_0_8_115)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41847 (* ?x40549 l_0_8_114)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41845 (* ?x40544 l_0_8_113)))
 (let ((?x45984 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_112) ?x41845) ?x41847) ?x41849) ?x41851)))
 (let ((?x45991 (+ (+ (- (- (- (- (- ?x45984 ?x41853) ?x41855) ?x41857) ?x41859) ?x41861) ?x43259) ?x43261)))
 (= (+ (+ (+ ?x45991 ?x43263) ?x43265) ?x43267) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43325 (* ?x43205 l_0_8_258)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43323 (* ?x43202 l_0_8_257)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43321 (* ?x43199 l_0_8_256)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43319 (* ?x43196 l_0_8_255)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43317 (* ?x43193 l_0_8_254)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41919 (* ?x40588 l_0_8_168)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41917 (* ?x40583 l_0_8_167)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41915 (* ?x40580 l_0_8_166)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41913 (* ?x40577 l_0_8_165)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41911 (* ?x40574 l_0_8_164)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41909 (* ?x40563 l_0_8_123)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41907 (* ?x40560 l_0_8_122)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41905 (* ?x40549 l_0_8_121)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41903 (* ?x40544 l_0_8_120)))
 (let ((?x34763 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_119) ?x41903) ?x41905) ?x41907) ?x41909)))
 (let ((?x34744 (+ (+ (- (- (- (- (- ?x34763 ?x41911) ?x41913) ?x41915) ?x41917) ?x41919) ?x43317) ?x43319)))
 (= (+ (+ (+ ?x34744 ?x43321) ?x43323) ?x43325) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43205 (* 2.0 l_0_8_240)))
 (let ((?x43393 (* ?x43205 l_0_8_266)))
 (let ((?x43202 (* 2.0 l_0_8_239)))
 (let ((?x43391 (* ?x43202 l_0_8_265)))
 (let ((?x43199 (* 2.0 l_0_8_238)))
 (let ((?x43389 (* ?x43199 l_0_8_264)))
 (let ((?x43196 (* 2.0 l_0_8_237)))
 (let ((?x43387 (* ?x43196 l_0_8_263)))
 (let ((?x43193 (* 2.0 l_0_8_236)))
 (let ((?x43385 (* ?x43193 l_0_8_262)))
 (let ((?x40588 (* 2.0 l_0_8_150)))
 (let ((?x41971 (* ?x40588 l_0_8_176)))
 (let ((?x40583 (* 2.0 l_0_8_149)))
 (let ((?x41969 (* ?x40583 l_0_8_175)))
 (let ((?x40580 (* 2.0 l_0_8_148)))
 (let ((?x41967 (* ?x40580 l_0_8_174)))
 (let ((?x40577 (* 2.0 l_0_8_147)))
 (let ((?x41965 (* ?x40577 l_0_8_173)))
 (let ((?x40574 (* 2.0 l_0_8_146)))
 (let ((?x41963 (* ?x40574 l_0_8_172)))
 (let ((?x40563 (* 2.0 l_0_8_105)))
 (let ((?x41961 (* ?x40563 l_0_8_131)))
 (let ((?x40560 (* 2.0 l_0_8_104)))
 (let ((?x41959 (* ?x40560 l_0_8_130)))
 (let ((?x40549 (* 2.0 l_0_8_103)))
 (let ((?x41957 (* ?x40549 l_0_8_129)))
 (let ((?x40544 (* 2.0 l_0_8_102)))
 (let ((?x41955 (* ?x40544 l_0_8_128)))
 (let ((?x46004 (+ (+ (+ (+ (* (* 2.0 l_0_8_101) l_0_8_127) ?x41955) ?x41957) ?x41959) ?x41961)))
 (let ((?x46011 (+ (+ (- (- (- (- (- ?x46004 ?x41963) ?x41965) ?x41967) ?x41969) ?x41971) ?x43385) ?x43387)))
 (= (+ (+ (+ ?x46011 ?x43389) ?x43391) ?x43393) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x43455 (* l_0_8_246 l_0_8_246)))
 (let ((?x43453 (* l_0_8_245 l_0_8_245)))
 (let ((?x43451 (* l_0_8_244 l_0_8_244)))
 (let ((?x43449 (* l_0_8_243 l_0_8_243)))
 (let ((?x43447 (* l_0_8_242 l_0_8_242)))
 (let ((?x43445 (* l_0_8_241 l_0_8_241)))
 (let ((?x40815 (* l_0_8_156 l_0_8_156)))
 (let ((?x40813 (* l_0_8_155 l_0_8_155)))
 (let ((?x40811 (* l_0_8_154 l_0_8_154)))
 (let ((?x40809 (* l_0_8_153 l_0_8_153)))
 (let ((?x40807 (* l_0_8_152 l_0_8_152)))
 (let ((?x40805 (* l_0_8_151 l_0_8_151)))
 (let ((?x40803 (* l_0_8_111 l_0_8_111)))
 (let ((?x40801 (* l_0_8_110 l_0_8_110)))
 (let ((?x40790 (* l_0_8_109 l_0_8_109)))
 (let ((?x40787 (* l_0_8_108 l_0_8_108)))
 (let ((?x22138 (+ (+ (+ (* l_0_8_106 l_0_8_106) (* l_0_8_107 l_0_8_107)) ?x40787) ?x40790)))
 (let ((?x46017 (- (- (- (- (- (+ (+ ?x22138 ?x40801) ?x40803) ?x40805) ?x40807) ?x40809) ?x40811) ?x40813)))
 (let ((?x46024 (+ (+ (+ (+ (+ (+ (- ?x46017 ?x40815) ?x43445) ?x43447) ?x43449) ?x43451) ?x43453) ?x43455)))
 (= ?x46024 0.0)))))))))))))))))))))
(assert
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x43508 (* ?x39430 l_0_8_259)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x43506 (* ?x39427 l_0_8_258)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x43504 (* ?x39424 l_0_8_257)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x43502 (* ?x39421 l_0_8_256)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x43500 (* ?x39418 l_0_8_255)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x43498 (* ?x39415 l_0_8_254)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41182 (* ?x39597 l_0_8_169)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41180 (* ?x39594 l_0_8_168)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41178 (* ?x39591 l_0_8_167)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41176 (* ?x39588 l_0_8_166)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41174 (* ?x39585 l_0_8_165)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41172 (* ?x39582 l_0_8_164)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41170 (* ?x39579 l_0_8_124)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41168 (* ?x39576 l_0_8_123)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41166 (* ?x39573 l_0_8_122)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41164 (* ?x39570 l_0_8_121)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41162 (* ?x39567 l_0_8_120)))
 (let ((?x22162 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_119) ?x41162) ?x41164) ?x41166) ?x41168)))
 (let ((?x46039 (- (- (- (- (- (- (+ ?x22162 ?x41170) ?x41172) ?x41174) ?x41176) ?x41178) ?x41180) ?x41182)))
 (= (+ (+ (+ (+ (+ (+ ?x46039 ?x43498) ?x43500) ?x43502) ?x43504) ?x43506) ?x43508) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39430 (* 2.0 l_0_8_246)))
 (let ((?x43549 (* ?x39430 l_0_8_267)))
 (let ((?x39427 (* 2.0 l_0_8_245)))
 (let ((?x43547 (* ?x39427 l_0_8_266)))
 (let ((?x39424 (* 2.0 l_0_8_244)))
 (let ((?x43545 (* ?x39424 l_0_8_265)))
 (let ((?x39421 (* 2.0 l_0_8_243)))
 (let ((?x43543 (* ?x39421 l_0_8_264)))
 (let ((?x39418 (* 2.0 l_0_8_242)))
 (let ((?x43541 (* ?x39418 l_0_8_263)))
 (let ((?x39415 (* 2.0 l_0_8_241)))
 (let ((?x43539 (* ?x39415 l_0_8_262)))
 (let ((?x39597 (* 2.0 l_0_8_156)))
 (let ((?x41337 (* ?x39597 l_0_8_177)))
 (let ((?x39594 (* 2.0 l_0_8_155)))
 (let ((?x41335 (* ?x39594 l_0_8_176)))
 (let ((?x39591 (* 2.0 l_0_8_154)))
 (let ((?x41333 (* ?x39591 l_0_8_175)))
 (let ((?x39588 (* 2.0 l_0_8_153)))
 (let ((?x41331 (* ?x39588 l_0_8_174)))
 (let ((?x39585 (* 2.0 l_0_8_152)))
 (let ((?x41329 (* ?x39585 l_0_8_173)))
 (let ((?x39582 (* 2.0 l_0_8_151)))
 (let ((?x41327 (* ?x39582 l_0_8_172)))
 (let ((?x39579 (* 2.0 l_0_8_111)))
 (let ((?x41325 (* ?x39579 l_0_8_132)))
 (let ((?x39576 (* 2.0 l_0_8_110)))
 (let ((?x41306 (* ?x39576 l_0_8_131)))
 (let ((?x39573 (* 2.0 l_0_8_109)))
 (let ((?x41302 (* ?x39573 l_0_8_130)))
 (let ((?x39570 (* 2.0 l_0_8_108)))
 (let ((?x41298 (* ?x39570 l_0_8_129)))
 (let ((?x39567 (* 2.0 l_0_8_107)))
 (let ((?x41294 (* ?x39567 l_0_8_128)))
 (let ((?x22218 (+ (+ (+ (+ (* (* 2.0 l_0_8_106) l_0_8_127) ?x41294) ?x41298) ?x41302) ?x41306)))
 (let ((?x22188 (- (- (- (- (- (- (+ ?x22218 ?x41325) ?x41327) ?x41329) ?x41331) ?x41333) ?x41335) ?x41337)))
 (= (+ (+ (+ (+ (+ (+ ?x22188 ?x43539) ?x43541) ?x43543) ?x43545) ?x43547) ?x43549) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43591 (* l_0_8_253 l_0_8_253)))
 (let ((?x43589 (* l_0_8_252 l_0_8_252)))
 (let ((?x32720 (* l_0_8_251 l_0_8_251)))
 (let ((?x32723 (* l_0_8_250 l_0_8_250)))
 (let ((?x32710 (* l_0_8_249 l_0_8_249)))
 (let ((?x32689 (* l_0_8_248 l_0_8_248)))
 (let ((?x32677 (* l_0_8_247 l_0_8_247)))
 (let ((?x44415 (* l_0_8_163 l_0_8_163)))
 (let ((?x44413 (* l_0_8_162 l_0_8_162)))
 (let ((?x44411 (* l_0_8_161 l_0_8_161)))
 (let ((?x44409 (* l_0_8_160 l_0_8_160)))
 (let ((?x44407 (* l_0_8_159 l_0_8_159)))
 (let ((?x44405 (* l_0_8_158 l_0_8_158)))
 (let ((?x44403 (* l_0_8_157 l_0_8_157)))
 (let ((?x44401 (* l_0_8_118 l_0_8_118)))
 (let ((?x44399 (* l_0_8_117 l_0_8_117)))
 (let ((?x44397 (* l_0_8_116 l_0_8_116)))
 (let ((?x44395 (* l_0_8_115 l_0_8_115)))
 (let ((?x44393 (* l_0_8_114 l_0_8_114)))
 (let ((?x22272 (+ (+ (+ (* l_0_8_112 l_0_8_112) (* l_0_8_113 l_0_8_113)) ?x44393) ?x44395)))
 (let ((?x34944 (- (- (- (- (+ (+ (+ ?x22272 ?x44397) ?x44399) ?x44401) ?x44403) ?x44405) ?x44407) ?x44409)))
 (let ((?x22241 (+ (+ (+ (+ (- (- (- ?x34944 ?x44411) ?x44413) ?x44415) ?x32677) ?x32689) ?x32710) ?x32723)))
 (= (+ (+ (+ ?x22241 ?x32720) ?x43589) ?x43591) 0.0))))))))))))))))))))))))
(assert
 (let ((?x43668 (* 2.0 l_0_8_253)))
 (let ((?x43669 (* ?x43668 l_0_8_260)))
 (let ((?x43665 (* 2.0 l_0_8_252)))
 (let ((?x43666 (* ?x43665 l_0_8_259)))
 (let ((?x43662 (* 2.0 l_0_8_251)))
 (let ((?x43663 (* ?x43662 l_0_8_258)))
 (let ((?x43659 (* 2.0 l_0_8_250)))
 (let ((?x43660 (* ?x43659 l_0_8_257)))
 (let ((?x43655 (* 2.0 l_0_8_249)))
 (let ((?x43656 (* ?x43655 l_0_8_256)))
 (let ((?x43652 (* 2.0 l_0_8_248)))
 (let ((?x43653 (* ?x43652 l_0_8_255)))
 (let ((?x43649 (* 2.0 l_0_8_247)))
 (let ((?x43650 (* ?x43649 l_0_8_254)))
 (let ((?x44480 (* 2.0 l_0_8_163)))
 (let ((?x44481 (* ?x44480 l_0_8_170)))
 (let ((?x44477 (* 2.0 l_0_8_162)))
 (let ((?x44478 (* ?x44477 l_0_8_169)))
 (let ((?x44474 (* 2.0 l_0_8_161)))
 (let ((?x44475 (* ?x44474 l_0_8_168)))
 (let ((?x44471 (* 2.0 l_0_8_160)))
 (let ((?x44472 (* ?x44471 l_0_8_167)))
 (let ((?x44468 (* 2.0 l_0_8_159)))
 (let ((?x44469 (* ?x44468 l_0_8_166)))
 (let ((?x44465 (* 2.0 l_0_8_158)))
 (let ((?x44466 (* ?x44465 l_0_8_165)))
 (let ((?x44462 (* 2.0 l_0_8_157)))
 (let ((?x44463 (* ?x44462 l_0_8_164)))
 (let ((?x44459 (* 2.0 l_0_8_118)))
 (let ((?x44460 (* ?x44459 l_0_8_125)))
 (let ((?x44456 (* 2.0 l_0_8_117)))
 (let ((?x44457 (* ?x44456 l_0_8_124)))
 (let ((?x44453 (* 2.0 l_0_8_116)))
 (let ((?x44454 (* ?x44453 l_0_8_123)))
 (let ((?x44450 (* 2.0 l_0_8_115)))
 (let ((?x44451 (* ?x44450 l_0_8_122)))
 (let ((?x43633 (* 2.0 l_0_8_114)))
 (let ((?x44448 (* ?x43633 l_0_8_121)))
 (let ((?x43630 (* 2.0 l_0_8_113)))
 (let ((?x44446 (* ?x43630 l_0_8_120)))
 (let ((?x22341 (+ (+ (+ (+ (* (* 2.0 l_0_8_112) l_0_8_119) ?x44446) ?x44448) ?x44451) ?x44454)))
 (let ((?x46066 (- (- (- (- (- (+ (+ ?x22341 ?x44457) ?x44460) ?x44463) ?x44466) ?x44469) ?x44472) ?x44475)))
 (let ((?x46073 (+ (+ (+ (+ (+ (- (- ?x46066 ?x44478) ?x44481) ?x43650) ?x43653) ?x43656) ?x43660) ?x43663)))
 (= (+ (+ ?x46073 ?x43666) ?x43669) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x43840 (* l_0_8_261 l_0_8_261)))
 (let ((?x43838 (* l_0_8_260 l_0_8_260)))
 (let ((?x43836 (* l_0_8_259 l_0_8_259)))
 (let ((?x43834 (* l_0_8_258 l_0_8_258)))
 (let ((?x43832 (* l_0_8_257 l_0_8_257)))
 (let ((?x43830 (* l_0_8_256 l_0_8_256)))
 (let ((?x43828 (* l_0_8_255 l_0_8_255)))
 (let ((?x43826 (* l_0_8_254 l_0_8_254)))
 (let ((?x44604 (* l_0_8_171 l_0_8_171)))
 (let ((?x44602 (* l_0_8_170 l_0_8_170)))
 (let ((?x44600 (* l_0_8_169 l_0_8_169)))
 (let ((?x44598 (* l_0_8_168 l_0_8_168)))
 (let ((?x44596 (* l_0_8_167 l_0_8_167)))
 (let ((?x44594 (* l_0_8_166 l_0_8_166)))
 (let ((?x44592 (* l_0_8_165 l_0_8_165)))
 (let ((?x44590 (* l_0_8_164 l_0_8_164)))
 (let ((?x44588 (* l_0_8_126 l_0_8_126)))
 (let ((?x44586 (* l_0_8_125 l_0_8_125)))
 (let ((?x44584 (* l_0_8_124 l_0_8_124)))
 (let ((?x44582 (* l_0_8_123 l_0_8_123)))
 (let ((?x44580 (* l_0_8_122 l_0_8_122)))
 (let ((?x44578 (* l_0_8_121 l_0_8_121)))
 (let ((?x22421 (+ (+ (+ (* l_0_8_119 l_0_8_119) (* l_0_8_120 l_0_8_120)) ?x44578) ?x44580)))
 (let ((?x46083 (- (- (- (+ (+ (+ (+ ?x22421 ?x44582) ?x44584) ?x44586) ?x44588) ?x44590) ?x44592) ?x44594)))
 (let ((?x46090 (+ (+ (- (- (- (- (- ?x46083 ?x44596) ?x44598) ?x44600) ?x44602) ?x44604) ?x43826) ?x43828)))
 (= (+ (+ (+ (+ (+ (+ ?x46090 ?x43830) ?x43832) ?x43834) ?x43836) ?x43838) ?x43840) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x43931 (* (* 2.0 l_0_8_261) l_0_8_269)))
 (let ((?x43928 (* (* 2.0 l_0_8_260) l_0_8_268)))
 (let ((?x43925 (* (* 2.0 l_0_8_259) l_0_8_267)))
 (let ((?x43922 (* (* 2.0 l_0_8_258) l_0_8_266)))
 (let ((?x43919 (* (* 2.0 l_0_8_257) l_0_8_265)))
 (let ((?x43916 (* (* 2.0 l_0_8_256) l_0_8_264)))
 (let ((?x43913 (* (* 2.0 l_0_8_255) l_0_8_263)))
 (let ((?x43910 (* (* 2.0 l_0_8_254) l_0_8_262)))
 (let ((?x44662 (* (* 2.0 l_0_8_171) l_0_8_179)))
 (let ((?x44659 (* (* 2.0 l_0_8_170) l_0_8_178)))
 (let ((?x44656 (* (* 2.0 l_0_8_169) l_0_8_177)))
 (let ((?x44653 (* (* 2.0 l_0_8_168) l_0_8_176)))
 (let ((?x44650 (* (* 2.0 l_0_8_167) l_0_8_175)))
 (let ((?x44647 (* (* 2.0 l_0_8_166) l_0_8_174)))
 (let ((?x44644 (* (* 2.0 l_0_8_165) l_0_8_173)))
 (let ((?x44641 (* (* 2.0 l_0_8_164) l_0_8_172)))
 (let ((?x44638 (* (* 2.0 l_0_8_126) l_0_8_134)))
 (let ((?x44635 (* (* 2.0 l_0_8_125) l_0_8_133)))
 (let ((?x44632 (* (* 2.0 l_0_8_124) l_0_8_132)))
 (let ((?x44629 (* (* 2.0 l_0_8_123) l_0_8_131)))
 (let ((?x44626 (* (* 2.0 l_0_8_122) l_0_8_130)))
 (let ((?x43814 (* 2.0 l_0_8_121)))
 (let ((?x44623 (* ?x43814 l_0_8_129)))
 (let ((?x43811 (* 2.0 l_0_8_120)))
 (let ((?x44621 (* ?x43811 l_0_8_128)))
 (let ((?x35058 (+ (+ (+ (+ (* (* 2.0 l_0_8_119) l_0_8_127) ?x44621) ?x44623) ?x44626) ?x44629)))
 (let ((?x46114 (- (- (- (- (+ (+ (+ ?x35058 ?x44632) ?x44635) ?x44638) ?x44641) ?x44644) ?x44647) ?x44650)))
 (let ((?x46121 (+ (+ (+ (- (- (- (- ?x46114 ?x44653) ?x44656) ?x44659) ?x44662) ?x43910) ?x43913) ?x43916)))
 (= (+ (+ (+ (+ (+ ?x46121 ?x43919) ?x43922) ?x43925) ?x43928) ?x43931) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x44015 (* l_0_8_270 l_0_8_270)))
 (let ((?x44013 (* l_0_8_269 l_0_8_269)))
 (let ((?x44011 (* l_0_8_268 l_0_8_268)))
 (let ((?x44009 (* l_0_8_267 l_0_8_267)))
 (let ((?x44007 (* l_0_8_266 l_0_8_266)))
 (let ((?x44005 (* l_0_8_265 l_0_8_265)))
 (let ((?x44003 (* l_0_8_264 l_0_8_264)))
 (let ((?x44001 (* l_0_8_263 l_0_8_263)))
 (let ((?x19541 (* l_0_8_262 l_0_8_262)))
 (let ((?x44744 (* l_0_8_180 l_0_8_180)))
 (let ((?x44742 (* l_0_8_179 l_0_8_179)))
 (let ((?x44740 (* l_0_8_178 l_0_8_178)))
 (let ((?x44738 (* l_0_8_177 l_0_8_177)))
 (let ((?x44736 (* l_0_8_176 l_0_8_176)))
 (let ((?x44734 (* l_0_8_175 l_0_8_175)))
 (let ((?x44732 (* l_0_8_174 l_0_8_174)))
 (let ((?x44730 (* l_0_8_173 l_0_8_173)))
 (let ((?x44728 (* l_0_8_172 l_0_8_172)))
 (let ((?x44726 (* l_0_8_135 l_0_8_135)))
 (let ((?x44724 (* l_0_8_134 l_0_8_134)))
 (let ((?x44722 (* l_0_8_133 l_0_8_133)))
 (let ((?x44720 (* l_0_8_132 l_0_8_132)))
 (let ((?x44707 (* l_0_8_131 l_0_8_131)))
 (let ((?x44704 (* l_0_8_130 l_0_8_130)))
 (let ((?x44700 (* l_0_8_129 l_0_8_129)))
 (let ((?x35117 (+ (+ (+ (* l_0_8_127 l_0_8_127) (* l_0_8_128 l_0_8_128)) ?x44700) ?x44704)))
 (let ((?x22546 (- (- (+ (+ (+ (+ (+ ?x35117 ?x44707) ?x44720) ?x44722) ?x44724) ?x44726) ?x44728) ?x44730)))
 (let ((?x46134 (- (- (- (- (- (- (- ?x22546 ?x44732) ?x44734) ?x44736) ?x44738) ?x44740) ?x44742) ?x44744)))
 (let ((?x46141 (+ (+ (+ (+ (+ (+ (+ ?x46134 ?x19541) ?x44001) ?x44003) ?x44005) ?x44007) ?x44009) ?x44011)))
 (= (+ (+ ?x46141 ?x44013) ?x44015) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x35126 (* l_0_8_406 l_0_8_406)))
 (let ((?x3582 (* l_0_8_361 l_0_8_361)))
 (let ((?x3492 (* l_0_8_316 l_0_8_316)))
 (let ((?x35127 (- (- (* (* (- 1.0) l_0_8_181) l_0_8_181) (* l_0_8_271 l_0_8_271)) ?x3492)))
 (= (- (- ?x35127 ?x3582) ?x35126) 0.0))))))
(assert
 (let ((?x46168 (- (* (* (- 2.0) l_0_8_181) l_0_8_182) (* (* 2.0 l_0_8_271) l_0_8_272))))
 (let ((?x46172 (- (- ?x46168 (* (* 2.0 l_0_8_316) l_0_8_317)) (* (* 2.0 l_0_8_361) l_0_8_362))))
 (= (- ?x46172 (* (* 2.0 l_0_8_406) l_0_8_407)) 0.0))))
(assert
 (let ((?x46203 (- (* (* (- 2.0) l_0_8_181) l_0_8_187) (* (* 2.0 l_0_8_271) l_0_8_277))))
 (let ((?x46207 (- (- ?x46203 (* (* 2.0 l_0_8_316) l_0_8_322)) (* (* 2.0 l_0_8_361) l_0_8_367))))
 (= (- ?x46207 (* (* 2.0 l_0_8_406) l_0_8_412)) 0.0))))
(assert
 (let ((?x46241 (- (* (* (- 2.0) l_0_8_181) l_0_8_191) (* (* 2.0 l_0_8_271) l_0_8_281))))
 (let ((?x46245 (- (- ?x46241 (* (* 2.0 l_0_8_316) l_0_8_326)) (* (* 2.0 l_0_8_361) l_0_8_371))))
 (= (- ?x46245 (* (* 2.0 l_0_8_406) l_0_8_416)) 0.0))))
(assert
 (let ((?x46280 (- (* (* (- 2.0) l_0_8_181) l_0_8_196) (* (* 2.0 l_0_8_271) l_0_8_286))))
 (let ((?x46284 (- (- ?x46280 (* (* 2.0 l_0_8_316) l_0_8_331)) (* (* 2.0 l_0_8_361) l_0_8_376))))
 (= (- ?x46284 (* (* 2.0 l_0_8_406) l_0_8_421)) 0.0))))
(assert
 (let ((?x46314 (- (* (* (- 2.0) l_0_8_181) l_0_8_202) (* (* 2.0 l_0_8_271) l_0_8_292))))
 (let ((?x46318 (- (- ?x46314 (* (* 2.0 l_0_8_316) l_0_8_337)) (* (* 2.0 l_0_8_361) l_0_8_382))))
 (= (- ?x46318 (* (* 2.0 l_0_8_406) l_0_8_427)) 0.0))))
(assert
 (let ((?x46349 (- (* (* (- 2.0) l_0_8_181) l_0_8_217) (* (* 2.0 l_0_8_271) l_0_8_307))))
 (let ((?x46353 (- (- ?x46349 (* (* 2.0 l_0_8_316) l_0_8_352)) (* (* 2.0 l_0_8_361) l_0_8_397))))
 (= (- ?x46353 (* (* 2.0 l_0_8_406) l_0_8_442)) 0.0))))
(assert
 (let ((?x46402 (* l_0_8_408 l_0_8_408)))
 (let ((?x46400 (* l_0_8_407 l_0_8_407)))
 (let ((?x46398 (* l_0_8_363 l_0_8_363)))
 (let ((?x46396 (* l_0_8_362 l_0_8_362)))
 (let ((?x46394 (* l_0_8_318 l_0_8_318)))
 (let ((?x46392 (* l_0_8_317 l_0_8_317)))
 (let ((?x46390 (* l_0_8_273 l_0_8_273)))
 (let ((?x46388 (* l_0_8_272 l_0_8_272)))
 (let ((?x46387 (- (* (* (- 1.0) l_0_8_182) l_0_8_182) (* (* 1.0 l_0_8_183) l_0_8_183))))
 (let ((?x46401 (- (- (- (- (- (- (- ?x46387 ?x46388) ?x46390) ?x46392) ?x46394) ?x46396) ?x46398) ?x46400)))
 (= (- ?x46401 ?x46402) 0.0))))))))))))
(assert
 (let ((?x46439 (- (* (* (- 2.0) l_0_8_182) l_0_8_191) (* (* 2.0 l_0_8_183) l_0_8_192))))
 (let ((?x46443 (- (- ?x46439 (* (* 2.0 l_0_8_272) l_0_8_281)) (* (* 2.0 l_0_8_273) l_0_8_282))))
 (let ((?x46447 (- (- ?x46443 (* (* 2.0 l_0_8_317) l_0_8_326)) (* (* 2.0 l_0_8_318) l_0_8_327))))
 (let ((?x46451 (- (- ?x46447 (* (* 2.0 l_0_8_362) l_0_8_371)) (* (* 2.0 l_0_8_363) l_0_8_372))))
 (let ((?x46455 (- (- ?x46451 (* (* 2.0 l_0_8_407) l_0_8_416)) (* (* 2.0 l_0_8_408) l_0_8_417))))
 (= ?x46455 0.0)))))))
(assert
 (let ((?x46512 (- (* (* (- 2.0) l_0_8_182) l_0_8_196) (* (* 2.0 l_0_8_183) l_0_8_197))))
 (let ((?x46516 (- (- ?x46512 (* (* 2.0 l_0_8_272) l_0_8_286)) (* (* 2.0 l_0_8_273) l_0_8_287))))
 (let ((?x46520 (- (- ?x46516 (* (* 2.0 l_0_8_317) l_0_8_331)) (* (* 2.0 l_0_8_318) l_0_8_332))))
 (let ((?x46524 (- (- ?x46520 (* (* 2.0 l_0_8_362) l_0_8_376)) (* (* 2.0 l_0_8_363) l_0_8_377))))
 (let ((?x46528 (- (- ?x46524 (* (* 2.0 l_0_8_407) l_0_8_421)) (* (* 2.0 l_0_8_408) l_0_8_422))))
 (= ?x46528 0.0)))))))
(assert
 (let ((?x46581 (- (* (* (- 2.0) l_0_8_182) l_0_8_202) (* (* 2.0 l_0_8_183) l_0_8_203))))
 (let ((?x46585 (- (- ?x46581 (* (* 2.0 l_0_8_272) l_0_8_292)) (* (* 2.0 l_0_8_273) l_0_8_293))))
 (let ((?x46589 (- (- ?x46585 (* (* 2.0 l_0_8_317) l_0_8_337)) (* (* 2.0 l_0_8_318) l_0_8_338))))
 (let ((?x46593 (- (- ?x46589 (* (* 2.0 l_0_8_362) l_0_8_382)) (* (* 2.0 l_0_8_363) l_0_8_383))))
 (let ((?x46597 (- (- ?x46593 (* (* 2.0 l_0_8_407) l_0_8_427)) (* (* 2.0 l_0_8_408) l_0_8_428))))
 (= ?x46597 0.0)))))))
(assert
 (let ((?x46640 (- (* (* (- 2.0) l_0_8_182) l_0_8_217) (* (* 2.0 l_0_8_183) l_0_8_218))))
 (let ((?x46644 (- (- ?x46640 (* (* 2.0 l_0_8_272) l_0_8_307)) (* (* 2.0 l_0_8_273) l_0_8_308))))
 (let ((?x46648 (- (- ?x46644 (* (* 2.0 l_0_8_317) l_0_8_352)) (* (* 2.0 l_0_8_318) l_0_8_353))))
 (let ((?x46652 (- (- ?x46648 (* (* 2.0 l_0_8_362) l_0_8_397)) (* (* 2.0 l_0_8_363) l_0_8_398))))
 (let ((?x46656 (- (- ?x46652 (* (* 2.0 l_0_8_407) l_0_8_442)) (* (* 2.0 l_0_8_408) l_0_8_443))))
 (= ?x46656 0.0)))))))
(assert
 (let ((?x46725 (* l_0_8_415 l_0_8_415)))
 (let ((?x46723 (* l_0_8_414 l_0_8_414)))
 (let ((?x46721 (* l_0_8_413 l_0_8_413)))
 (let ((?x46719 (* l_0_8_412 l_0_8_412)))
 (let ((?x46717 (* l_0_8_370 l_0_8_370)))
 (let ((?x46715 (* l_0_8_369 l_0_8_369)))
 (let ((?x46713 (* l_0_8_368 l_0_8_368)))
 (let ((?x46711 (* l_0_8_367 l_0_8_367)))
 (let ((?x46709 (* l_0_8_325 l_0_8_325)))
 (let ((?x46707 (* l_0_8_324 l_0_8_324)))
 (let ((?x46705 (* l_0_8_323 l_0_8_323)))
 (let ((?x46703 (* l_0_8_322 l_0_8_322)))
 (let ((?x46701 (* l_0_8_280 l_0_8_280)))
 (let ((?x46699 (* l_0_8_279 l_0_8_279)))
 (let ((?x46697 (* l_0_8_278 l_0_8_278)))
 (let ((?x46695 (* l_0_8_277 l_0_8_277)))
 (let ((?x46688 (- (* (* (- 1.0) l_0_8_187) l_0_8_187) (* (* 1.0 l_0_8_188) l_0_8_188))))
 (let ((?x46694 (- (- ?x46688 (* (* 1.0 l_0_8_189) l_0_8_189)) (* (* 1.0 l_0_8_190) l_0_8_190))))
 (let ((?x46708 (- (- (- (- (- (- (- ?x46694 ?x46695) ?x46697) ?x46699) ?x46701) ?x46703) ?x46705) ?x46707)))
 (let ((?x46722 (- (- (- (- (- (- (- ?x46708 ?x46709) ?x46711) ?x46713) ?x46715) ?x46717) ?x46719) ?x46721)))
 (= (- (- ?x46722 ?x46723) ?x46725) 0.0))))))))))))))))))))))
(assert
 (let ((?x46767 (- (* (* (- 2.0) l_0_8_187) l_0_8_196) (* (* 2.0 l_0_8_188) l_0_8_197))))
 (let ((?x46771 (- (- ?x46767 (* (* 2.0 l_0_8_189) l_0_8_198)) (* (* 2.0 l_0_8_190) l_0_8_199))))
 (let ((?x46775 (- (- ?x46771 (* (* 2.0 l_0_8_277) l_0_8_286)) (* (* 2.0 l_0_8_278) l_0_8_287))))
 (let ((?x46779 (- (- ?x46775 (* (* 2.0 l_0_8_279) l_0_8_288)) (* (* 2.0 l_0_8_280) l_0_8_289))))
 (let ((?x46783 (- (- ?x46779 (* (* 2.0 l_0_8_322) l_0_8_331)) (* (* 2.0 l_0_8_323) l_0_8_332))))
 (let ((?x46787 (- (- ?x46783 (* (* 2.0 l_0_8_324) l_0_8_333)) (* (* 2.0 l_0_8_325) l_0_8_334))))
 (let ((?x46791 (- (- ?x46787 (* (* 2.0 l_0_8_367) l_0_8_376)) (* (* 2.0 l_0_8_368) l_0_8_377))))
 (let ((?x46795 (- (- ?x46791 (* (* 2.0 l_0_8_369) l_0_8_378)) (* (* 2.0 l_0_8_370) l_0_8_379))))
 (let ((?x46799 (- (- ?x46795 (* (* 2.0 l_0_8_412) l_0_8_421)) (* (* 2.0 l_0_8_413) l_0_8_422))))
 (let ((?x46803 (- (- ?x46799 (* (* 2.0 l_0_8_414) l_0_8_423)) (* (* 2.0 l_0_8_415) l_0_8_424))))
 (= ?x46803 0.0))))))))))))
(assert
 (let ((?x46866 (- (* (* (- 2.0) l_0_8_187) l_0_8_202) (* (* 2.0 l_0_8_188) l_0_8_203))))
 (let ((?x46870 (- (- ?x46866 (* (* 2.0 l_0_8_189) l_0_8_204)) (* (* 2.0 l_0_8_190) l_0_8_205))))
 (let ((?x46874 (- (- ?x46870 (* (* 2.0 l_0_8_277) l_0_8_292)) (* (* 2.0 l_0_8_278) l_0_8_293))))
 (let ((?x46878 (- (- ?x46874 (* (* 2.0 l_0_8_279) l_0_8_294)) (* (* 2.0 l_0_8_280) l_0_8_295))))
 (let ((?x46882 (- (- ?x46878 (* (* 2.0 l_0_8_322) l_0_8_337)) (* (* 2.0 l_0_8_323) l_0_8_338))))
 (let ((?x46886 (- (- ?x46882 (* (* 2.0 l_0_8_324) l_0_8_339)) (* (* 2.0 l_0_8_325) l_0_8_340))))
 (let ((?x46890 (- (- ?x46886 (* (* 2.0 l_0_8_367) l_0_8_382)) (* (* 2.0 l_0_8_368) l_0_8_383))))
 (let ((?x46894 (- (- ?x46890 (* (* 2.0 l_0_8_369) l_0_8_384)) (* (* 2.0 l_0_8_370) l_0_8_385))))
 (let ((?x46898 (- (- ?x46894 (* (* 2.0 l_0_8_412) l_0_8_427)) (* (* 2.0 l_0_8_413) l_0_8_428))))
 (let ((?x46902 (- (- ?x46898 (* (* 2.0 l_0_8_414) l_0_8_429)) (* (* 2.0 l_0_8_415) l_0_8_430))))
 (= ?x46902 0.0))))))))))))
(assert
 (let ((?x24678 (- (* (* (- 2.0) l_0_8_187) l_0_8_217) (* (* 2.0 l_0_8_188) l_0_8_218))))
 (let ((?x46953 (- (- ?x24678 (* (* 2.0 l_0_8_189) l_0_8_219)) (* (* 2.0 l_0_8_190) l_0_8_220))))
 (let ((?x46957 (- (- ?x46953 (* (* 2.0 l_0_8_277) l_0_8_307)) (* (* 2.0 l_0_8_278) l_0_8_308))))
 (let ((?x46961 (- (- ?x46957 (* (* 2.0 l_0_8_279) l_0_8_309)) (* (* 2.0 l_0_8_280) l_0_8_310))))
 (let ((?x46965 (- (- ?x46961 (* (* 2.0 l_0_8_322) l_0_8_352)) (* (* 2.0 l_0_8_323) l_0_8_353))))
 (let ((?x46969 (- (- ?x46965 (* (* 2.0 l_0_8_324) l_0_8_354)) (* (* 2.0 l_0_8_325) l_0_8_355))))
 (let ((?x46973 (- (- ?x46969 (* (* 2.0 l_0_8_367) l_0_8_397)) (* (* 2.0 l_0_8_368) l_0_8_398))))
 (let ((?x46977 (- (- ?x46973 (* (* 2.0 l_0_8_369) l_0_8_399)) (* (* 2.0 l_0_8_370) l_0_8_400))))
 (let ((?x46981 (- (- ?x46977 (* (* 2.0 l_0_8_412) l_0_8_442)) (* (* 2.0 l_0_8_413) l_0_8_443))))
 (let ((?x46985 (- (- ?x46981 (* (* 2.0 l_0_8_414) l_0_8_444)) (* (* 2.0 l_0_8_415) l_0_8_445))))
 (= ?x46985 0.0))))))))))))
(assert
 (let ((?x47100 (* l_0_8_420 l_0_8_420)))
 (let ((?x47098 (* l_0_8_419 l_0_8_419)))
 (let ((?x47096 (* l_0_8_418 l_0_8_418)))
 (let ((?x47094 (* l_0_8_417 l_0_8_417)))
 (let ((?x47092 (* l_0_8_416 l_0_8_416)))
 (let ((?x47090 (* l_0_8_375 l_0_8_375)))
 (let ((?x47088 (* l_0_8_374 l_0_8_374)))
 (let ((?x47086 (* l_0_8_373 l_0_8_373)))
 (let ((?x47084 (* l_0_8_372 l_0_8_372)))
 (let ((?x47082 (* l_0_8_371 l_0_8_371)))
 (let ((?x47080 (* l_0_8_330 l_0_8_330)))
 (let ((?x47078 (* l_0_8_329 l_0_8_329)))
 (let ((?x47076 (* l_0_8_328 l_0_8_328)))
 (let ((?x47074 (* l_0_8_327 l_0_8_327)))
 (let ((?x47072 (* l_0_8_326 l_0_8_326)))
 (let ((?x47070 (* l_0_8_285 l_0_8_285)))
 (let ((?x47068 (* l_0_8_284 l_0_8_284)))
 (let ((?x47066 (* l_0_8_283 l_0_8_283)))
 (let ((?x47064 (* l_0_8_282 l_0_8_282)))
 (let ((?x47062 (* l_0_8_281 l_0_8_281)))
 (let ((?x47052 (- (* (* (- 1.0) l_0_8_191) l_0_8_191) (* (* 1.0 l_0_8_192) l_0_8_192))))
 (let ((?x47058 (- (- ?x47052 (* (* 1.0 l_0_8_193) l_0_8_193)) (* (* 1.0 l_0_8_194) l_0_8_194))))
 (let ((?x47067 (- (- (- (- ?x47058 (* (* 1.0 l_0_8_195) l_0_8_195)) ?x47062) ?x47064) ?x47066)))
 (let ((?x47081 (- (- (- (- (- (- (- ?x47067 ?x47068) ?x47070) ?x47072) ?x47074) ?x47076) ?x47078) ?x47080)))
 (let ((?x47095 (- (- (- (- (- (- (- ?x47081 ?x47082) ?x47084) ?x47086) ?x47088) ?x47090) ?x47092) ?x47094)))
 (= (- (- (- ?x47095 ?x47096) ?x47098) ?x47100) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x47133 (- (* (* (- 2.0) l_0_8_191) l_0_8_196) (* (* 2.0 l_0_8_192) l_0_8_197))))
 (let ((?x47137 (- (- ?x47133 (* (* 2.0 l_0_8_193) l_0_8_198)) (* (* 2.0 l_0_8_194) l_0_8_199))))
 (let ((?x47141 (- (- ?x47137 (* (* 2.0 l_0_8_195) l_0_8_200)) (* (* 2.0 l_0_8_281) l_0_8_286))))
 (let ((?x47145 (- (- ?x47141 (* (* 2.0 l_0_8_282) l_0_8_287)) (* (* 2.0 l_0_8_283) l_0_8_288))))
 (let ((?x47149 (- (- ?x47145 (* (* 2.0 l_0_8_284) l_0_8_289)) (* (* 2.0 l_0_8_285) l_0_8_290))))
 (let ((?x47153 (- (- ?x47149 (* (* 2.0 l_0_8_326) l_0_8_331)) (* (* 2.0 l_0_8_327) l_0_8_332))))
 (let ((?x47157 (- (- ?x47153 (* (* 2.0 l_0_8_328) l_0_8_333)) (* (* 2.0 l_0_8_329) l_0_8_334))))
 (let ((?x47161 (- (- ?x47157 (* (* 2.0 l_0_8_330) l_0_8_335)) (* (* 2.0 l_0_8_371) l_0_8_376))))
 (let ((?x47165 (- (- ?x47161 (* (* 2.0 l_0_8_372) l_0_8_377)) (* (* 2.0 l_0_8_373) l_0_8_378))))
 (let ((?x47169 (- (- ?x47165 (* (* 2.0 l_0_8_374) l_0_8_379)) (* (* 2.0 l_0_8_375) l_0_8_380))))
 (let ((?x47173 (- (- ?x47169 (* (* 2.0 l_0_8_416) l_0_8_421)) (* (* 2.0 l_0_8_417) l_0_8_422))))
 (let ((?x47177 (- (- ?x47173 (* (* 2.0 l_0_8_418) l_0_8_423)) (* (* 2.0 l_0_8_419) l_0_8_424))))
 (= (- ?x47177 (* (* 2.0 l_0_8_420) l_0_8_425)) 0.0))))))))))))))
(assert
 (let ((?x36649 (- (* (* (- 2.0) l_0_8_191) l_0_8_202) (* (* 2.0 l_0_8_192) l_0_8_203))))
 (let ((?x23513 (- (- ?x36649 (* (* 2.0 l_0_8_193) l_0_8_204)) (* (* 2.0 l_0_8_194) l_0_8_205))))
 (let ((?x36624 (- (- ?x23513 (* (* 2.0 l_0_8_195) l_0_8_206)) (* (* 2.0 l_0_8_281) l_0_8_292))))
 (let ((?x25064 (- (- ?x36624 (* (* 2.0 l_0_8_282) l_0_8_293)) (* (* 2.0 l_0_8_283) l_0_8_294))))
 (let ((?x25101 (- (- ?x25064 (* (* 2.0 l_0_8_284) l_0_8_295)) (* (* 2.0 l_0_8_285) l_0_8_296))))
 (let ((?x25133 (- (- ?x25101 (* (* 2.0 l_0_8_326) l_0_8_337)) (* (* 2.0 l_0_8_327) l_0_8_338))))
 (let ((?x47252 (- (- ?x25133 (* (* 2.0 l_0_8_328) l_0_8_339)) (* (* 2.0 l_0_8_329) l_0_8_340))))
 (let ((?x47256 (- (- ?x47252 (* (* 2.0 l_0_8_330) l_0_8_341)) (* (* 2.0 l_0_8_371) l_0_8_382))))
 (let ((?x47260 (- (- ?x47256 (* (* 2.0 l_0_8_372) l_0_8_383)) (* (* 2.0 l_0_8_373) l_0_8_384))))
 (let ((?x47264 (- (- ?x47260 (* (* 2.0 l_0_8_374) l_0_8_385)) (* (* 2.0 l_0_8_375) l_0_8_386))))
 (let ((?x47268 (- (- ?x47264 (* (* 2.0 l_0_8_416) l_0_8_427)) (* (* 2.0 l_0_8_417) l_0_8_428))))
 (let ((?x47272 (- (- ?x47268 (* (* 2.0 l_0_8_418) l_0_8_429)) (* (* 2.0 l_0_8_419) l_0_8_430))))
 (= (- ?x47272 (* (* 2.0 l_0_8_420) l_0_8_431)) 0.0))))))))))))))
(assert
 (let ((?x25227 (- (* (* (- 2.0) l_0_8_191) l_0_8_217) (* (* 2.0 l_0_8_192) l_0_8_218))))
 (let ((?x7527 (- (- ?x25227 (* (* 2.0 l_0_8_193) l_0_8_219)) (* (* 2.0 l_0_8_194) l_0_8_220))))
 (let ((?x7539 (- (- ?x7527 (* (* 2.0 l_0_8_195) l_0_8_221)) (* (* 2.0 l_0_8_281) l_0_8_307))))
 (let ((?x36766 (- (- ?x7539 (* (* 2.0 l_0_8_282) l_0_8_308)) (* (* 2.0 l_0_8_283) l_0_8_309))))
 (let ((?x47341 (- (- ?x36766 (* (* 2.0 l_0_8_284) l_0_8_310)) (* (* 2.0 l_0_8_285) l_0_8_311))))
 (let ((?x47345 (- (- ?x47341 (* (* 2.0 l_0_8_326) l_0_8_352)) (* (* 2.0 l_0_8_327) l_0_8_353))))
 (let ((?x47349 (- (- ?x47345 (* (* 2.0 l_0_8_328) l_0_8_354)) (* (* 2.0 l_0_8_329) l_0_8_355))))
 (let ((?x47353 (- (- ?x47349 (* (* 2.0 l_0_8_330) l_0_8_356)) (* (* 2.0 l_0_8_371) l_0_8_397))))
 (let ((?x47357 (- (- ?x47353 (* (* 2.0 l_0_8_372) l_0_8_398)) (* (* 2.0 l_0_8_373) l_0_8_399))))
 (let ((?x47361 (- (- ?x47357 (* (* 2.0 l_0_8_374) l_0_8_400)) (* (* 2.0 l_0_8_375) l_0_8_401))))
 (let ((?x47365 (- (- ?x47361 (* (* 2.0 l_0_8_416) l_0_8_442)) (* (* 2.0 l_0_8_417) l_0_8_443))))
 (let ((?x47369 (- (- ?x47365 (* (* 2.0 l_0_8_418) l_0_8_444)) (* (* 2.0 l_0_8_419) l_0_8_445))))
 (= (- ?x47369 (* (* 2.0 l_0_8_420) l_0_8_446)) 0.0))))))))))))))
(assert
 (let ((?x47492 (* l_0_8_426 l_0_8_426)))
 (let ((?x47490 (* l_0_8_425 l_0_8_425)))
 (let ((?x47488 (* l_0_8_424 l_0_8_424)))
 (let ((?x47486 (* l_0_8_423 l_0_8_423)))
 (let ((?x47484 (* l_0_8_422 l_0_8_422)))
 (let ((?x47482 (* l_0_8_421 l_0_8_421)))
 (let ((?x47480 (* l_0_8_381 l_0_8_381)))
 (let ((?x47478 (* l_0_8_380 l_0_8_380)))
 (let ((?x47476 (* l_0_8_379 l_0_8_379)))
 (let ((?x47474 (* l_0_8_378 l_0_8_378)))
 (let ((?x47472 (* l_0_8_377 l_0_8_377)))
 (let ((?x47470 (* l_0_8_376 l_0_8_376)))
 (let ((?x47468 (* l_0_8_336 l_0_8_336)))
 (let ((?x47466 (* l_0_8_335 l_0_8_335)))
 (let ((?x47464 (* l_0_8_334 l_0_8_334)))
 (let ((?x47462 (* l_0_8_333 l_0_8_333)))
 (let ((?x47460 (* l_0_8_332 l_0_8_332)))
 (let ((?x47458 (* l_0_8_331 l_0_8_331)))
 (let ((?x47456 (* l_0_8_291 l_0_8_291)))
 (let ((?x47454 (* l_0_8_290 l_0_8_290)))
 (let ((?x47452 (* l_0_8_289 l_0_8_289)))
 (let ((?x47450 (* l_0_8_288 l_0_8_288)))
 (let ((?x47448 (* l_0_8_287 l_0_8_287)))
 (let ((?x47446 (* l_0_8_286 l_0_8_286)))
 (let ((?x47433 (- (* (* (- 1.0) l_0_8_196) l_0_8_196) (* (* 1.0 l_0_8_197) l_0_8_197))))
 (let ((?x47439 (- (- ?x47433 (* (* 1.0 l_0_8_198) l_0_8_198)) (* (* 1.0 l_0_8_199) l_0_8_199))))
 (let ((?x47445 (- (- ?x47439 (* (* 1.0 l_0_8_200) l_0_8_200)) (* (* 1.0 l_0_8_201) l_0_8_201))))
 (let ((?x47459 (- (- (- (- (- (- (- ?x47445 ?x47446) ?x47448) ?x47450) ?x47452) ?x47454) ?x47456) ?x47458)))
 (let ((?x47473 (- (- (- (- (- (- (- ?x47459 ?x47460) ?x47462) ?x47464) ?x47466) ?x47468) ?x47470) ?x47472)))
 (let ((?x47487 (- (- (- (- (- (- (- ?x47473 ?x47474) ?x47476) ?x47478) ?x47480) ?x47482) ?x47484) ?x47486)))
 (= (- (- (- ?x47487 ?x47488) ?x47490) ?x47492) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x47547 (- (* (* (- 2.0) l_0_8_196) l_0_8_217) (* (* 2.0 l_0_8_197) l_0_8_218))))
 (let ((?x47551 (- (- ?x47547 (* (* 2.0 l_0_8_198) l_0_8_219)) (* (* 2.0 l_0_8_199) l_0_8_220))))
 (let ((?x47555 (- (- ?x47551 (* (* 2.0 l_0_8_200) l_0_8_221)) (* (* 2.0 l_0_8_201) l_0_8_222))))
 (let ((?x47559 (- (- ?x47555 (* (* 2.0 l_0_8_286) l_0_8_307)) (* (* 2.0 l_0_8_287) l_0_8_308))))
 (let ((?x47563 (- (- ?x47559 (* (* 2.0 l_0_8_288) l_0_8_309)) (* (* 2.0 l_0_8_289) l_0_8_310))))
 (let ((?x47567 (- (- ?x47563 (* (* 2.0 l_0_8_290) l_0_8_311)) (* (* 2.0 l_0_8_291) l_0_8_312))))
 (let ((?x47571 (- (- ?x47567 (* (* 2.0 l_0_8_331) l_0_8_352)) (* (* 2.0 l_0_8_332) l_0_8_353))))
 (let ((?x47575 (- (- ?x47571 (* (* 2.0 l_0_8_333) l_0_8_354)) (* (* 2.0 l_0_8_334) l_0_8_355))))
 (let ((?x47579 (- (- ?x47575 (* (* 2.0 l_0_8_335) l_0_8_356)) (* (* 2.0 l_0_8_336) l_0_8_357))))
 (let ((?x47583 (- (- ?x47579 (* (* 2.0 l_0_8_376) l_0_8_397)) (* (* 2.0 l_0_8_377) l_0_8_398))))
 (let ((?x47587 (- (- ?x47583 (* (* 2.0 l_0_8_378) l_0_8_399)) (* (* 2.0 l_0_8_379) l_0_8_400))))
 (let ((?x47591 (- (- ?x47587 (* (* 2.0 l_0_8_380) l_0_8_401)) (* (* 2.0 l_0_8_381) l_0_8_402))))
 (let ((?x47595 (- (- ?x47591 (* (* 2.0 l_0_8_421) l_0_8_442)) (* (* 2.0 l_0_8_422) l_0_8_443))))
 (let ((?x47599 (- (- ?x47595 (* (* 2.0 l_0_8_423) l_0_8_444)) (* (* 2.0 l_0_8_424) l_0_8_445))))
 (let ((?x47603 (- (- ?x47599 (* (* 2.0 l_0_8_425) l_0_8_446)) (* (* 2.0 l_0_8_426) l_0_8_447))))
 (= ?x47603 0.0)))))))))))))))))
(assert
 (let ((?x47802 (* l_0_8_433 l_0_8_433)))
 (let ((?x47800 (* l_0_8_432 l_0_8_432)))
 (let ((?x47798 (* l_0_8_431 l_0_8_431)))
 (let ((?x47796 (* l_0_8_430 l_0_8_430)))
 (let ((?x47794 (* l_0_8_429 l_0_8_429)))
 (let ((?x47792 (* l_0_8_428 l_0_8_428)))
 (let ((?x47790 (* l_0_8_427 l_0_8_427)))
 (let ((?x47788 (* l_0_8_388 l_0_8_388)))
 (let ((?x47786 (* l_0_8_387 l_0_8_387)))
 (let ((?x47784 (* l_0_8_386 l_0_8_386)))
 (let ((?x47782 (* l_0_8_385 l_0_8_385)))
 (let ((?x47780 (* l_0_8_384 l_0_8_384)))
 (let ((?x47778 (* l_0_8_383 l_0_8_383)))
 (let ((?x47776 (* l_0_8_382 l_0_8_382)))
 (let ((?x47774 (* l_0_8_343 l_0_8_343)))
 (let ((?x47772 (* l_0_8_342 l_0_8_342)))
 (let ((?x47770 (* l_0_8_341 l_0_8_341)))
 (let ((?x47768 (* l_0_8_340 l_0_8_340)))
 (let ((?x47766 (* l_0_8_339 l_0_8_339)))
 (let ((?x47764 (* l_0_8_338 l_0_8_338)))
 (let ((?x47762 (* l_0_8_337 l_0_8_337)))
 (let ((?x47760 (* l_0_8_298 l_0_8_298)))
 (let ((?x47758 (* l_0_8_297 l_0_8_297)))
 (let ((?x47756 (* l_0_8_296 l_0_8_296)))
 (let ((?x47754 (* l_0_8_295 l_0_8_295)))
 (let ((?x47752 (* l_0_8_294 l_0_8_294)))
 (let ((?x47750 (* l_0_8_293 l_0_8_293)))
 (let ((?x47748 (* l_0_8_292 l_0_8_292)))
 (let ((?x47732 (- (* (* (- 1.0) l_0_8_202) l_0_8_202) (* (* 1.0 l_0_8_203) l_0_8_203))))
 (let ((?x47738 (- (- ?x47732 (* (* 1.0 l_0_8_204) l_0_8_204)) (* (* 1.0 l_0_8_205) l_0_8_205))))
 (let ((?x47744 (- (- ?x47738 (* (* 1.0 l_0_8_206) l_0_8_206)) (* (* 1.0 l_0_8_207) l_0_8_207))))
 (let ((?x47753 (- (- (- (- ?x47744 (* (* 1.0 l_0_8_208) l_0_8_208)) ?x47748) ?x47750) ?x47752)))
 (let ((?x47767 (- (- (- (- (- (- (- ?x47753 ?x47754) ?x47756) ?x47758) ?x47760) ?x47762) ?x47764) ?x47766)))
 (let ((?x47781 (- (- (- (- (- (- (- ?x47767 ?x47768) ?x47770) ?x47772) ?x47774) ?x47776) ?x47778) ?x47780)))
 (let ((?x47795 (- (- (- (- (- (- (- ?x47781 ?x47782) ?x47784) ?x47786) ?x47788) ?x47790) ?x47792) ?x47794)))
 (= (- (- (- (- ?x47795 ?x47796) ?x47798) ?x47800) ?x47802) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x47972 (* l_0_8_450 l_0_8_450)))
 (let ((?x47970 (* l_0_8_449 l_0_8_449)))
 (let ((?x47968 (* l_0_8_448 l_0_8_448)))
 (let ((?x47966 (* l_0_8_447 l_0_8_447)))
 (let ((?x47964 (* l_0_8_446 l_0_8_446)))
 (let ((?x47962 (* l_0_8_445 l_0_8_445)))
 (let ((?x47960 (* l_0_8_444 l_0_8_444)))
 (let ((?x47958 (* l_0_8_443 l_0_8_443)))
 (let ((?x47956 (* l_0_8_442 l_0_8_442)))
 (let ((?x47954 (* l_0_8_405 l_0_8_405)))
 (let ((?x47952 (* l_0_8_404 l_0_8_404)))
 (let ((?x47950 (* l_0_8_403 l_0_8_403)))
 (let ((?x47948 (* l_0_8_402 l_0_8_402)))
 (let ((?x47946 (* l_0_8_401 l_0_8_401)))
 (let ((?x47944 (* l_0_8_400 l_0_8_400)))
 (let ((?x47942 (* l_0_8_399 l_0_8_399)))
 (let ((?x47940 (* l_0_8_398 l_0_8_398)))
 (let ((?x47938 (* l_0_8_397 l_0_8_397)))
 (let ((?x47936 (* l_0_8_360 l_0_8_360)))
 (let ((?x47934 (* l_0_8_359 l_0_8_359)))
 (let ((?x47932 (* l_0_8_358 l_0_8_358)))
 (let ((?x47930 (* l_0_8_357 l_0_8_357)))
 (let ((?x47928 (* l_0_8_356 l_0_8_356)))
 (let ((?x47926 (* l_0_8_355 l_0_8_355)))
 (let ((?x47924 (* l_0_8_354 l_0_8_354)))
 (let ((?x47922 (* l_0_8_353 l_0_8_353)))
 (let ((?x47920 (* l_0_8_352 l_0_8_352)))
 (let ((?x47918 (* l_0_8_315 l_0_8_315)))
 (let ((?x47916 (* l_0_8_314 l_0_8_314)))
 (let ((?x47914 (* l_0_8_313 l_0_8_313)))
 (let ((?x47912 (* l_0_8_312 l_0_8_312)))
 (let ((?x47910 (* l_0_8_311 l_0_8_311)))
 (let ((?x47908 (* l_0_8_310 l_0_8_310)))
 (let ((?x47906 (* l_0_8_309 l_0_8_309)))
 (let ((?x47904 (* l_0_8_308 l_0_8_308)))
 (let ((?x47902 (* l_0_8_307 l_0_8_307)))
 (let ((?x47880 (- (* (* (- 1.0) l_0_8_217) l_0_8_217) (* (* 1.0 l_0_8_218) l_0_8_218))))
 (let ((?x47886 (- (- ?x47880 (* (* 1.0 l_0_8_219) l_0_8_219)) (* (* 1.0 l_0_8_220) l_0_8_220))))
 (let ((?x47892 (- (- ?x47886 (* (* 1.0 l_0_8_221) l_0_8_221)) (* (* 1.0 l_0_8_222) l_0_8_222))))
 (let ((?x47898 (- (- ?x47892 (* (* 1.0 l_0_8_223) l_0_8_223)) (* (* 1.0 l_0_8_224) l_0_8_224))))
 (let ((?x47907 (- (- (- (- ?x47898 (* (* 1.0 l_0_8_225) l_0_8_225)) ?x47902) ?x47904) ?x47906)))
 (let ((?x47921 (- (- (- (- (- (- (- ?x47907 ?x47908) ?x47910) ?x47912) ?x47914) ?x47916) ?x47918) ?x47920)))
 (let ((?x47935 (- (- (- (- (- (- (- ?x47921 ?x47922) ?x47924) ?x47926) ?x47928) ?x47930) ?x47932) ?x47934)))
 (let ((?x47949 (- (- (- (- (- (- (- ?x47935 ?x47936) ?x47938) ?x47940) ?x47942) ?x47944) ?x47946) ?x47948)))
 (let ((?x47963 (- (- (- (- (- (- (- ?x47949 ?x47950) ?x47952) ?x47954) ?x47956) ?x47958) ?x47960) ?x47962)))
 (= (- (- (- (- (- ?x47963 ?x47964) ?x47966) ?x47968) ?x47970) ?x47972) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_8_1 0.0))
(assert
 (>= l_0_8_3 0.0))
(assert
 (>= l_0_8_6 0.0))
(assert
 (>= l_0_8_10 0.0))
(assert
 (>= l_0_8_15 0.0))
(assert
 (>= l_0_8_21 0.0))
(assert
 (>= l_0_8_28 0.0))
(assert
 (>= l_0_8_36 0.0))
(assert
 (>= l_0_8_45 0.0))
(assert
 (>= l_0_8_46 0.0))
(assert
 (>= l_0_8_48 0.0))
(assert
 (>= l_0_8_51 0.0))
(assert
 (>= l_0_8_55 0.0))
(assert
 (>= l_0_8_60 0.0))
(assert
 (>= l_0_8_66 0.0))
(assert
 (>= l_0_8_73 0.0))
(assert
 (>= l_0_8_81 0.0))
(assert
 (>= l_0_8_90 0.0))
(assert
 (>= l_0_8_91 0.0))
(assert
 (>= l_0_8_93 0.0))
(assert
 (>= l_0_8_96 0.0))
(assert
 (>= l_0_8_100 0.0))
(assert
 (>= l_0_8_105 0.0))
(assert
 (>= l_0_8_111 0.0))
(assert
 (>= l_0_8_118 0.0))
(assert
 (>= l_0_8_126 0.0))
(assert
 (>= l_0_8_135 0.0))
(assert
 (>= l_0_8_136 0.0))
(assert
 (>= l_0_8_138 0.0))
(assert
 (>= l_0_8_141 0.0))
(assert
 (>= l_0_8_145 0.0))
(assert
 (>= l_0_8_150 0.0))
(assert
 (>= l_0_8_156 0.0))
(assert
 (>= l_0_8_163 0.0))
(assert
 (>= l_0_8_171 0.0))
(assert
 (>= l_0_8_180 0.0))
(assert
 (>= l_0_8_181 0.0))
(assert
 (>= l_0_8_183 0.0))
(assert
 (>= l_0_8_186 0.0))
(assert
 (>= l_0_8_190 0.0))
(assert
 (>= l_0_8_195 0.0))
(assert
 (>= l_0_8_201 0.0))
(assert
 (>= l_0_8_208 0.0))
(assert
 (>= l_0_8_216 0.0))
(assert
 (>= l_0_8_225 0.0))
(assert
 (>= l_0_8_226 0.0))
(assert
 (>= l_0_8_228 0.0))
(assert
 (>= l_0_8_231 0.0))
(assert
 (>= l_0_8_235 0.0))
(assert
 (>= l_0_8_240 0.0))
(assert
 (>= l_0_8_246 0.0))
(assert
 (>= l_0_8_253 0.0))
(assert
 (>= l_0_8_261 0.0))
(assert
 (>= l_0_8_270 0.0))
(assert
 (>= l_0_8_271 0.0))
(assert
 (>= l_0_8_273 0.0))
(assert
 (>= l_0_8_276 0.0))
(assert
 (>= l_0_8_280 0.0))
(assert
 (>= l_0_8_285 0.0))
(assert
 (>= l_0_8_291 0.0))
(assert
 (>= l_0_8_298 0.0))
(assert
 (>= l_0_8_306 0.0))
(assert
 (>= l_0_8_315 0.0))
(assert
 (>= l_0_8_316 0.0))
(assert
 (>= l_0_8_318 0.0))
(assert
 (>= l_0_8_321 0.0))
(assert
 (>= l_0_8_325 0.0))
(assert
 (>= l_0_8_330 0.0))
(assert
 (>= l_0_8_336 0.0))
(assert
 (>= l_0_8_343 0.0))
(assert
 (>= l_0_8_351 0.0))
(assert
 (>= l_0_8_360 0.0))
(assert
 (>= l_0_8_361 0.0))
(assert
 (>= l_0_8_363 0.0))
(assert
 (>= l_0_8_366 0.0))
(assert
 (>= l_0_8_370 0.0))
(assert
 (>= l_0_8_375 0.0))
(assert
 (>= l_0_8_381 0.0))
(assert
 (>= l_0_8_388 0.0))
(assert
 (>= l_0_8_396 0.0))
(assert
 (>= l_0_8_405 0.0))
(assert
 (>= l_0_8_406 0.0))
(assert
 (>= l_0_8_408 0.0))
(assert
 (>= l_0_8_411 0.0))
(assert
 (>= l_0_8_415 0.0))
(assert
 (>= l_0_8_420 0.0))
(assert
 (>= l_0_8_426 0.0))
(assert
 (>= l_0_8_433 0.0))
(assert
 (>= l_0_8_441 0.0))
(assert
 (>= l_0_8_450 0.0))
(assert
 (let ((?x48200 (* l_0_9_46 l_0_9_46)))
 (let ((?x48169 (- (- (* (- l_0_9_1) l_0_9_1) (* (* 2.0 l_0_9_196) l_0_9_202)) (* (* 2.0 l_0_9_197) l_0_9_203))))
 (let ((?x48175 (- (- ?x48169 (* (* 2.0 l_0_9_198) l_0_9_204)) (* (* 2.0 l_0_9_199) l_0_9_205))))
 (let ((?x48181 (- (- ?x48175 (* (* 2.0 l_0_9_200) l_0_9_206)) (* (* 2.0 l_0_9_201) l_0_9_207))))
 (let ((?x48187 (- (- ?x48181 (* (* 2.0 l_0_9_286) l_0_9_292)) (* (* 2.0 l_0_9_287) l_0_9_293))))
 (let ((?x48193 (- (- ?x48187 (* (* 2.0 l_0_9_288) l_0_9_294)) (* (* 2.0 l_0_9_289) l_0_9_295))))
 (let ((?x48199 (- (- ?x48193 (* (* 2.0 l_0_9_290) l_0_9_296)) (* (* 2.0 l_0_9_291) l_0_9_297))))
 (= (+ (+ ?x48199 ?x48200) 1.0) 0.0)))))))))
(assert
 (let ((?x48200 (* l_0_9_46 l_0_9_46)))
 (let ((?x48255 (- (- (* (- l_0_9_1) l_0_9_1) (* (* 2.0 l_0_9_187) l_0_9_191)) (* (* 2.0 l_0_9_188) l_0_9_192))))
 (let ((?x48261 (- (- ?x48255 (* (* 2.0 l_0_9_189) l_0_9_193)) (* (* 2.0 l_0_9_190) l_0_9_194))))
 (let ((?x48267 (- (- ?x48261 (* (* 2.0 l_0_9_277) l_0_9_281)) (* (* 2.0 l_0_9_278) l_0_9_282))))
 (let ((?x48273 (- (- ?x48267 (* (* 2.0 l_0_9_279) l_0_9_283)) (* (* 2.0 l_0_9_280) l_0_9_284))))
 (= (+ (+ ?x48273 ?x48200) 1.0) 0.0)))))))
(assert
 (let ((?x48200 (* l_0_9_46 l_0_9_46)))
 (let ((?x48314 (* l_0_9_226 l_0_9_226)))
 (let ((?x48315 (+ (- (* l_0_9_1 l_0_9_1) (* (* 2.0 l_0_9_181) l_0_9_184)) ?x48314)))
 (= (- (- (- ?x48315 (* (* 2.0 l_0_9_271) l_0_9_274)) ?x48200) 1.0) 0.0)))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48341 (* ?x48340 l_0_9_47)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48339 (* ?x48338 l_0_9_2)))
 (= (+ ?x48339 ?x48341) 0.0))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x48405 (* ?x48404 l_0_9_72)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x48402 (* ?x48401 l_0_9_71)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x48399 (* ?x48398 l_0_9_70)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x48396 (* ?x48395 l_0_9_69)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x48393 (* ?x48392 l_0_9_68)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x48390 (* ?x48389 l_0_9_67)))
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48387 (* ?x48340 l_0_9_49)))
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x48385 (* ?x48384 l_0_9_252)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x48382 (* ?x48381 l_0_9_251)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x48379 (* ?x48378 l_0_9_250)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x48376 (* ?x48375 l_0_9_249)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x48373 (* ?x48372 l_0_9_248)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x48370 (* ?x48369 l_0_9_247)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x48367 (* ?x48366 l_0_9_27)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x48364 (* ?x48363 l_0_9_26)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x48361 (* ?x48360 l_0_9_25)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48358 (* ?x48357 l_0_9_24)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48355 (* ?x48354 l_0_9_23)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x48348 (* ?x48347 l_0_9_22)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48345 (* ?x48338 l_0_9_4)))
 (let ((?x48371 (+ (+ (+ (+ (+ (+ (+ ?x48345 ?x48348) ?x48355) ?x48358) ?x48361) ?x48364) ?x48367) ?x48370)))
 (let ((?x48391 (- (+ (+ (+ (+ (+ (+ ?x48371 ?x48373) ?x48376) ?x48379) ?x48382) ?x48385) ?x48387) ?x48390)))
 (= (- (- (- (- (- ?x48391 ?x48393) ?x48396) ?x48399) ?x48402) ?x48405) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48340 l_0_9_52)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) ?x48470) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48476 (* ?x48340 l_0_9_56)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_11) ?x48476) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48486 (* ?x48340 l_0_9_61)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x48486) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48496 (* ?x48340 l_0_9_67)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_22) ?x48496) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48552 (* ?x48340 l_0_9_74)))
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x48385 (* ?x48384 l_0_9_252)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x48382 (* ?x48381 l_0_9_251)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x48379 (* ?x48378 l_0_9_250)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x48376 (* ?x48375 l_0_9_249)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x48373 (* ?x48372 l_0_9_248)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x48370 (* ?x48369 l_0_9_247)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x48544 (* ?x48543 l_0_9_162)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x48541 (* ?x48540 l_0_9_161)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x48538 (* ?x48537 l_0_9_160)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x48535 (* ?x48534 l_0_9_159)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x48532 (* ?x48531 l_0_9_158)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x48529 (* ?x48528 l_0_9_157)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x48526 (* ?x48525 l_0_9_117)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x48523 (* ?x48522 l_0_9_116)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x48520 (* ?x48519 l_0_9_115)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x48517 (* ?x48516 l_0_9_114)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48514 (* ?x48513 l_0_9_113)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48504 (* ?x48338 l_0_9_29)))
 (let ((?x48521 (+ (+ (+ (+ ?x48504 (* (* 2.0 l_0_9_106) l_0_9_112)) ?x48514) ?x48517) ?x48520)))
 (let ((?x48542 (- (- (- (- (- (+ (+ ?x48521 ?x48523) ?x48526) ?x48529) ?x48532) ?x48535) ?x48538) ?x48541)))
 (let ((?x48551 (- (- (- (- (- (- (- ?x48542 ?x48544) ?x48370) ?x48373) ?x48376) ?x48379) ?x48382) ?x48385)))
 (= (+ ?x48551 ?x48552) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48613 (* ?x48340 l_0_9_82)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x48611 (* ?x48610 l_0_9_151)))
 (let ((?x48506 (* 2.0 l_0_9_106)))
 (let ((?x48598 (* ?x48506 l_0_9_91)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x25916 (* ?x48338 l_0_9_37)))
 (= (+ (+ (- ?x25916 ?x48598) ?x48611) ?x48613) 0.0))))))))))
(assert
 (let ((?x48633 (* l_0_9_48 l_0_9_48)))
 (let ((?x48631 (* l_0_9_47 l_0_9_47)))
 (let ((?x48634 (+ (+ (- (* (- l_0_9_2) l_0_9_2) (* l_0_9_3 l_0_9_3)) ?x48631) ?x48633)))
 (= ?x48634 0.0)))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48655 (* ?x48654 l_0_9_50)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48652 (* ?x48651 l_0_9_49)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48649 (* ?x48648 l_0_9_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_4) ?x48649) ?x48652) ?x48655) 0.0))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48690 (* ?x48654 l_0_9_53)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48688 (* ?x48651 l_0_9_52)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48686 (* ?x48648 l_0_9_8)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48684 (* ?x48683 l_0_9_7)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x48544 (* ?x48543 l_0_9_162)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x48541 (* ?x48540 l_0_9_161)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x48538 (* ?x48537 l_0_9_160)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x48535 (* ?x48534 l_0_9_159)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x48532 (* ?x48531 l_0_9_158)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x48529 (* ?x48528 l_0_9_157)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x48526 (* ?x48525 l_0_9_117)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x48523 (* ?x48522 l_0_9_116)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x48520 (* ?x48519 l_0_9_115)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x48517 (* ?x48516 l_0_9_114)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48514 (* ?x48513 l_0_9_113)))
 (let ((?x48675 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x48514) ?x48517) ?x48520) ?x48523)))
 (let ((?x48682 (+ (+ (+ (+ (+ (+ (- ?x48675 ?x48526) ?x48529) ?x48532) ?x48535) ?x48538) ?x48541) ?x48544)))
 (= (+ (+ (- (- ?x48682 ?x48684) ?x48686) ?x48688) ?x48690) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48710 (* ?x48654 l_0_9_57)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48708 (* ?x48651 l_0_9_56)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48706 (* ?x48705 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_11) l_0_9_2) ?x48706) ?x48708) ?x48710) 0.0))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48734 (* ?x48654 l_0_9_62)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48732 (* ?x48651 l_0_9_61)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48725 (* ?x48354 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_16) l_0_9_2) ?x48725) ?x48732) ?x48734) 0.0))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48753 (* ?x48654 l_0_9_68)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48751 (* ?x48651 l_0_9_67)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48749 (* ?x48748 l_0_9_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_22) ?x48749) ?x48751) ?x48753) 0.0))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48776 (* ?x48654 l_0_9_75)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48774 (* ?x48651 l_0_9_74)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48767 (* ?x48648 l_0_9_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_2) l_0_9_29) ?x48767) ?x48774) ?x48776) 0.0))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48804 (* ?x48654 l_0_9_83)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48802 (* ?x48651 l_0_9_82)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48800 (* ?x48648 l_0_9_38)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48798 (* ?x48683 l_0_9_37)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x48796 (* ?x48795 l_0_9_152)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x48793 (* ?x48792 l_0_9_151)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48790 (* ?x48513 l_0_9_93)))
 (let ((?x48797 (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_92) ?x48790) ?x48793) ?x48796)))
 (= (+ (+ (- (- ?x48797 ?x48798) ?x48800) ?x48802) ?x48804) 0.0)))))))))))))))))
(assert
 (let ((?x48844 (* l_0_9_6 l_0_9_6)))
 (let ((?x48842 (* l_0_9_51 l_0_9_51)))
 (let ((?x48840 (* l_0_9_50 l_0_9_50)))
 (let ((?x48838 (* l_0_9_5 l_0_9_5)))
 (let ((?x48841 (+ (- (+ (* (- l_0_9_4) l_0_9_4) (* l_0_9_49 l_0_9_49)) ?x48838) ?x48840)))
 (= (- (+ ?x48841 ?x48842) ?x48844) 0.0)))))))
(assert
 (let ((?x48872 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48869 (* ?x48868 l_0_9_54)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48866 (* ?x48865 l_0_9_53)))
 (let ((?x48863 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48860 (* ?x48859 l_0_9_52)))
 (let ((?x48870 (+ (+ (- (+ (* (* (- 2.0) l_0_9_4) l_0_9_7) ?x48860) ?x48863) ?x48866) ?x48869)))
 (= (- ?x48870 ?x48872) 0.0)))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48904 (* ?x48868 l_0_9_58)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48902 (* ?x48865 l_0_9_57)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48900 (* ?x48859 l_0_9_56)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x48898 (* ?x48897 l_0_9_6)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48895 (* ?x48705 l_0_9_5)))
 (let ((?x48903 (+ (+ (- (- (* (* (- 2.0) l_0_9_11) l_0_9_4) ?x48895) ?x48898) ?x48900) ?x48902)))
 (= (+ ?x48903 ?x48904) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48932 (* ?x48868 l_0_9_63)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48930 (* ?x48865 l_0_9_62)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48928 (* ?x48859 l_0_9_61)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48926 (* ?x48357 l_0_9_6)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48924 (* ?x48354 l_0_9_5)))
 (let ((?x48931 (+ (+ (- (- (* (* (- 2.0) l_0_9_16) l_0_9_4) ?x48924) ?x48926) ?x48928) ?x48930)))
 (= (+ ?x48931 ?x48932) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48969 (* ?x48868 l_0_9_69)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48967 (* ?x48865 l_0_9_68)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48965 (* ?x48859 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x48963 (* ?x48962 l_0_9_6)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48954 (* ?x48748 l_0_9_5)))
 (let ((?x48968 (+ (+ (- (- (* (* (- 2.0) l_0_9_22) l_0_9_4) ?x48954) ?x48963) ?x48965) ?x48967)))
 (= (+ ?x48968 ?x48969) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49007 (* ?x48868 l_0_9_76)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49005 (* ?x48865 l_0_9_75)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49003 (* ?x48859 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49001 (* ?x49000 l_0_9_6)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x48992 (* ?x48991 l_0_9_5)))
 (let ((?x49006 (+ (+ (- (- (* (* (- 2.0) l_0_9_29) l_0_9_4) ?x48992) ?x49001) ?x49003) ?x49005)))
 (= (+ ?x49006 ?x49007) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49056 (* ?x48868 l_0_9_84)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49054 (* ?x48865 l_0_9_83)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49052 (* ?x48859 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49050 (* ?x49049 l_0_9_6)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49047 (* ?x49046 l_0_9_5)))
 (let ((?x49043 (* 2.0 l_0_9_37)))
 (let ((?x49044 (* ?x49043 l_0_9_4)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x49041 (* ?x49040 l_0_9_153)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x49038 (* ?x49037 l_0_9_152)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x49035 (* ?x49034 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49026 (* ?x48516 l_0_9_96)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49023 (* ?x48513 l_0_9_95)))
 (let ((?x49039 (+ (+ (- (- (* (* (- 2.0) l_0_9_106) l_0_9_94) ?x49023) ?x49026) ?x49035) ?x49038)))
 (let ((?x49042 (+ ?x49039 ?x49041)))
 (= (+ (+ (+ (- (- (- ?x49042 ?x49044) ?x49047) ?x49050) ?x49052) ?x49054) ?x49056) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49108 (* l_0_9_9 l_0_9_9)))
 (let ((?x49106 (* l_0_9_8 l_0_9_8)))
 (let ((?x49104 (* l_0_9_7 l_0_9_7)))
 (let ((?x49102 (* l_0_9_55 l_0_9_55)))
 (let ((?x49100 (* l_0_9_54 l_0_9_54)))
 (let ((?x49098 (* l_0_9_53 l_0_9_53)))
 (let ((?x49101 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_52 l_0_9_52)) ?x49098) ?x49100)))
 (= (- (- (- (+ ?x49101 ?x49102) ?x49104) ?x49106) ?x49108) 0.0)))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x48405 (* ?x48404 l_0_9_72)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x48402 (* ?x48401 l_0_9_71)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x48399 (* ?x48398 l_0_9_70)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x48396 (* ?x48395 l_0_9_69)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x48393 (* ?x48392 l_0_9_68)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x48390 (* ?x48389 l_0_9_67)))
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49146 (* ?x49145 l_0_9_59)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49143 (* ?x49142 l_0_9_58)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49140 (* ?x49139 l_0_9_57)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49137 (* ?x49136 l_0_9_56)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x48367 (* ?x48366 l_0_9_27)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x48364 (* ?x48363 l_0_9_26)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x48361 (* ?x48360 l_0_9_25)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48358 (* ?x48357 l_0_9_24)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48355 (* ?x48354 l_0_9_23)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x48348 (* ?x48347 l_0_9_22)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49128 (* ?x48897 l_0_9_9)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49126 (* ?x48705 l_0_9_8)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x49124 (* ?x49123 l_0_9_7)))
 (let ((?x49129 (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_14) ?x49124) ?x49126) ?x49128)))
 (let ((?x49138 (+ (- (- (- (- (- (- ?x49129 ?x48348) ?x48355) ?x48358) ?x48361) ?x48364) ?x48367) ?x49137)))
 (let ((?x49151 (+ (+ (+ (+ (+ (+ (+ ?x49138 ?x49140) ?x49143) ?x49146) ?x48390) ?x48393) ?x48396) ?x48399)))
 (= (+ (+ ?x49151 ?x48402) ?x48405) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49190 (* ?x49145 l_0_9_64)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49188 (* ?x49142 l_0_9_63)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49186 (* ?x49139 l_0_9_62)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49184 (* ?x49136 l_0_9_61)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49182 (* ?x48357 l_0_9_9)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49180 (* ?x48354 l_0_9_8)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x49178 (* ?x48347 l_0_9_7)))
 (let ((?x49185 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) ?x49178) ?x49180) ?x49182) ?x49184)))
 (= (+ (+ (+ ?x49185 ?x49186) ?x49188) ?x49190) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49225 (* ?x49145 l_0_9_70)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49223 (* ?x49142 l_0_9_69)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49221 (* ?x49139 l_0_9_68)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49219 (* ?x49136 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49217 (* ?x48962 l_0_9_9)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49215 (* ?x48748 l_0_9_8)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49213 (* ?x49212 l_0_9_7)))
 (let ((?x49220 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_25) ?x49213) ?x49215) ?x49217) ?x49219)))
 (= (+ (+ (+ ?x49220 ?x49221) ?x49223) ?x49225) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49259 (* ?x49145 l_0_9_77)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49257 (* ?x49142 l_0_9_76)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49255 (* ?x49139 l_0_9_75)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49253 (* ?x49136 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49251 (* ?x49000 l_0_9_9)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x49249 (* ?x48991 l_0_9_8)))
 (let ((?x49246 (* 2.0 l_0_9_29)))
 (let ((?x49247 (* ?x49246 l_0_9_7)))
 (let ((?x49254 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_32) ?x49247) ?x49249) ?x49251) ?x49253)))
 (= (+ (+ (+ ?x49254 ?x49255) ?x49257) ?x49259) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49314 (* ?x49145 l_0_9_85)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49312 (* ?x49142 l_0_9_84)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49310 (* ?x49139 l_0_9_83)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49308 (* ?x49136 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49306 (* ?x49049 l_0_9_9)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49304 (* ?x49046 l_0_9_8)))
 (let ((?x49043 (* 2.0 l_0_9_37)))
 (let ((?x49302 (* ?x49043 l_0_9_7)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x49300 (* ?x49299 l_0_9_154)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x49297 (* ?x49296 l_0_9_153)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x49294 (* ?x49293 l_0_9_152)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x49291 (* ?x49290 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49288 (* ?x48516 l_0_9_99)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49286 (* ?x48513 l_0_9_98)))
 (let ((?x48506 (* 2.0 l_0_9_106)))
 (let ((?x49277 (* ?x48506 l_0_9_97)))
 (let ((?x37255 (* 2.0 l_0_9_100)))
 (let ((?x37253 (* ?x37255 l_0_9_109)))
 (let ((?x49121 (* (- 2.0) l_0_9_10)))
 (let ((?x37254 (* ?x49121 l_0_9_40)))
 (let ((?x49298 (+ (+ (+ (- (- (- (- ?x37254 ?x37253) ?x49277) ?x49286) ?x49288) ?x49291) ?x49294) ?x49297)))
 (let ((?x49313 (+ (+ (+ (- (- (- (+ ?x49298 ?x49300) ?x49302) ?x49304) ?x49306) ?x49308) ?x49310) ?x49312)))
 (= (+ ?x49313 ?x49314) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49369 (* l_0_9_60 l_0_9_60)))
 (let ((?x49367 (* l_0_9_59 l_0_9_59)))
 (let ((?x49365 (* l_0_9_58 l_0_9_58)))
 (let ((?x49363 (* l_0_9_57 l_0_9_57)))
 (let ((?x49361 (* l_0_9_56 l_0_9_56)))
 (let ((?x49359 (* l_0_9_15 l_0_9_15)))
 (let ((?x49357 (* l_0_9_14 l_0_9_14)))
 (let ((?x49355 (* l_0_9_13 l_0_9_13)))
 (let ((?x49358 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x49355) ?x49357)))
 (= (+ (+ (+ (+ (+ (- ?x49358 ?x49359) ?x49361) ?x49363) ?x49365) ?x49367) ?x49369) 0.0)))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49408 (* ?x49407 l_0_9_65)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49405 (* ?x49404 l_0_9_64)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49402 (* ?x49401 l_0_9_63)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49399 (* ?x49398 l_0_9_62)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49396 (* ?x49395 l_0_9_61)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49393 (* ?x49392 l_0_9_20)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49390 (* ?x49389 l_0_9_19)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49387 (* ?x48897 l_0_9_18)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49385 (* ?x48705 l_0_9_17)))
 (let ((?x49394 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_16) ?x49385) ?x49387) ?x49390) ?x49393)))
 (= (+ (+ (+ (+ (+ ?x49394 ?x49396) ?x49399) ?x49402) ?x49405) ?x49408) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49448 (* ?x49407 l_0_9_71)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49446 (* ?x49404 l_0_9_70)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49444 (* ?x49401 l_0_9_69)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49442 (* ?x49398 l_0_9_68)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49440 (* ?x49395 l_0_9_67)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49438 (* ?x49392 l_0_9_26)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49436 (* ?x49389 l_0_9_25)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49434 (* ?x48897 l_0_9_24)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49432 (* ?x48705 l_0_9_23)))
 (let ((?x49439 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_22) ?x49432) ?x49434) ?x49436) ?x49438)))
 (= (+ (+ (+ (+ (+ ?x49439 ?x49440) ?x49442) ?x49444) ?x49446) ?x49448) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49485 (* ?x49407 l_0_9_78)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49483 (* ?x49404 l_0_9_77)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49481 (* ?x49401 l_0_9_76)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49479 (* ?x49398 l_0_9_75)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49477 (* ?x49395 l_0_9_74)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49475 (* ?x49392 l_0_9_33)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49465 (* ?x49389 l_0_9_32)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49462 (* ?x48897 l_0_9_31)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x37416 (* ?x48705 l_0_9_30)))
 (let ((?x49476 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_29) ?x37416) ?x49462) ?x49465) ?x49475)))
 (= (+ (+ (+ (+ (+ ?x49476 ?x49477) ?x49479) ?x49481) ?x49483) ?x49485) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49553 (* ?x49407 l_0_9_86)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49551 (* ?x49404 l_0_9_85)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49549 (* ?x49401 l_0_9_84)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49547 (* ?x49398 l_0_9_83)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49545 (* ?x49395 l_0_9_82)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x49543 (* ?x49542 l_0_9_155)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49540 (* ?x49392 l_0_9_41)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x49538 (* ?x49537 l_0_9_154)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x49535 (* ?x49534 l_0_9_153)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x49532 (* ?x49531 l_0_9_152)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x49529 (* ?x49528 l_0_9_151)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49526 (* ?x49389 l_0_9_40)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49524 (* ?x48897 l_0_9_39)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49522 (* ?x48705 l_0_9_38)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x49520 (* ?x49123 l_0_9_37)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x49518 (* ?x49517 l_0_9_110)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x49515 (* ?x49514 l_0_9_109)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x49512 (* ?x49511 l_0_9_108)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x49509 (* ?x49508 l_0_9_107)))
 (let ((?x49519 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_106) ?x49509) ?x49512) ?x49515) ?x49518)))
 (let ((?x49536 (+ (+ (+ (- (- (- (- ?x49519 ?x49520) ?x49522) ?x49524) ?x49526) ?x49529) ?x49532) ?x49535)))
 (let ((?x49552 (+ (+ (+ (+ (+ (- (+ ?x49536 ?x49538) ?x49540) ?x49543) ?x49545) ?x49547) ?x49549) ?x49551)))
 (= (+ ?x49552 ?x49553) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49630 (* l_0_9_66 l_0_9_66)))
 (let ((?x49628 (* l_0_9_65 l_0_9_65)))
 (let ((?x49626 (* l_0_9_64 l_0_9_64)))
 (let ((?x49624 (* l_0_9_63 l_0_9_63)))
 (let ((?x49622 (* l_0_9_62 l_0_9_62)))
 (let ((?x49620 (* l_0_9_61 l_0_9_61)))
 (let ((?x49618 (* l_0_9_21 l_0_9_21)))
 (let ((?x49616 (* l_0_9_20 l_0_9_20)))
 (let ((?x49601 (* l_0_9_19 l_0_9_19)))
 (let ((?x49598 (* l_0_9_18 l_0_9_18)))
 (let ((?x49615 (- (- (- (* (- l_0_9_16) l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49598) ?x49601)))
 (let ((?x49629 (+ (+ (+ (+ (+ (- (- ?x49615 ?x49616) ?x49618) ?x49620) ?x49622) ?x49624) ?x49626) ?x49628)))
 (= (+ ?x49629 ?x49630) 0.0))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x48405 (* ?x48404 l_0_9_72)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x48402 (* ?x48401 l_0_9_71)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x48399 (* ?x48398 l_0_9_70)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x48396 (* ?x48395 l_0_9_69)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x48393 (* ?x48392 l_0_9_68)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x48390 (* ?x48389 l_0_9_67)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x48367 (* ?x48366 l_0_9_27)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x48364 (* ?x48363 l_0_9_26)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x48361 (* ?x48360 l_0_9_25)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48358 (* ?x48357 l_0_9_24)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48355 (* ?x48354 l_0_9_23)))
 (let ((?x49657 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_22) ?x48355) ?x48358) ?x48361) ?x48364)))
 (let ((?x49664 (+ (+ (+ (+ (+ (+ (- ?x49657 ?x48367) ?x48390) ?x48393) ?x48396) ?x48399) ?x48402) ?x48405)))
 (= ?x49664 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49696 (* ?x48404 l_0_9_79)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49694 (* ?x48401 l_0_9_78)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49692 (* ?x48398 l_0_9_77)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49690 (* ?x48395 l_0_9_76)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49688 (* ?x48392 l_0_9_75)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49686 (* ?x48389 l_0_9_74)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49684 (* ?x48366 l_0_9_34)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49682 (* ?x48363 l_0_9_33)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49680 (* ?x48360 l_0_9_32)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49678 (* ?x48357 l_0_9_31)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49676 (* ?x48354 l_0_9_30)))
 (let ((?x49683 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_29) ?x49676) ?x49678) ?x49680) ?x49682)))
 (let ((?x49697 (+ (+ (+ (+ (+ (+ (- ?x49683 ?x49684) ?x49686) ?x49688) ?x49690) ?x49692) ?x49694) ?x49696)))
 (= ?x49697 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49768 (* ?x48404 l_0_9_87)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49766 (* ?x48401 l_0_9_86)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49764 (* ?x48398 l_0_9_85)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49762 (* ?x48395 l_0_9_84)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49760 (* ?x48392 l_0_9_83)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49758 (* ?x48389 l_0_9_82)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49756 (* ?x48366 l_0_9_42)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49754 (* ?x48363 l_0_9_41)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49752 (* ?x48360 l_0_9_40)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49750 (* ?x48357 l_0_9_39)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49748 (* ?x48354 l_0_9_38)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x49746 (* ?x48347 l_0_9_37)))
 (let ((?x49744 (* l_0_9_156 l_0_9_156)))
 (let ((?x49742 (* l_0_9_155 l_0_9_155)))
 (let ((?x49740 (* l_0_9_154 l_0_9_154)))
 (let ((?x49738 (* l_0_9_153 l_0_9_153)))
 (let ((?x49736 (* l_0_9_152 l_0_9_152)))
 (let ((?x49734 (* l_0_9_151 l_0_9_151)))
 (let ((?x49732 (* l_0_9_111 l_0_9_111)))
 (let ((?x49730 (* l_0_9_110 l_0_9_110)))
 (let ((?x49728 (* l_0_9_109 l_0_9_109)))
 (let ((?x49726 (* l_0_9_108 l_0_9_108)))
 (let ((?x49727 (- (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x49726)))
 (let ((?x49741 (+ (+ (+ (+ (- (- (- ?x49727 ?x49728) ?x49730) ?x49732) ?x49734) ?x49736) ?x49738) ?x49740)))
 (let ((?x49745 (+ (+ ?x49741 ?x49742) ?x49744)))
 (let ((?x49759 (+ (- (- (- (- (- (- ?x49745 ?x49746) ?x49748) ?x49750) ?x49752) ?x49754) ?x49756) ?x49758)))
 (= (+ (+ (+ (+ (+ ?x49759 ?x49760) ?x49762) ?x49764) ?x49766) ?x49768) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49837 (* l_0_9_73 l_0_9_73)))
 (let ((?x49835 (* l_0_9_72 l_0_9_72)))
 (let ((?x49833 (* l_0_9_71 l_0_9_71)))
 (let ((?x49831 (* l_0_9_70 l_0_9_70)))
 (let ((?x49829 (* l_0_9_69 l_0_9_69)))
 (let ((?x49827 (* l_0_9_68 l_0_9_68)))
 (let ((?x49825 (* l_0_9_67 l_0_9_67)))
 (let ((?x49823 (* l_0_9_28 l_0_9_28)))
 (let ((?x49821 (* l_0_9_27 l_0_9_27)))
 (let ((?x49819 (* l_0_9_26 l_0_9_26)))
 (let ((?x49803 (* l_0_9_25 l_0_9_25)))
 (let ((?x49800 (* l_0_9_24 l_0_9_24)))
 (let ((?x49818 (- (- (- (* (- l_0_9_22) l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x49800) ?x49803)))
 (let ((?x49832 (+ (+ (+ (+ (- (- (- ?x49818 ?x49819) ?x49821) ?x49823) ?x49825) ?x49827) ?x49829) ?x49831)))
 (= (+ (+ (+ ?x49832 ?x49833) ?x49835) ?x49837) 0.0))))))))))))))))
(assert
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49900 (* ?x49899 l_0_9_80)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49897 (* ?x49896 l_0_9_79)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49894 (* ?x49893 l_0_9_78)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49891 (* ?x49890 l_0_9_77)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49888 (* ?x49887 l_0_9_76)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49885 (* ?x49884 l_0_9_75)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49882 (* ?x49881 l_0_9_74)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49879 (* ?x49878 l_0_9_35)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49876 (* ?x49875 l_0_9_34)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49873 (* ?x49872 l_0_9_33)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49870 (* ?x49869 l_0_9_32)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49867 (* ?x48962 l_0_9_31)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49865 (* ?x48748 l_0_9_30)))
 (let ((?x49874 (- (- (- (- (* (* (- 2.0) l_0_9_22) l_0_9_29) ?x49865) ?x49867) ?x49870) ?x49873)))
 (let ((?x49895 (+ (+ (+ (+ (+ (- (- ?x49874 ?x49876) ?x49879) ?x49882) ?x49885) ?x49888) ?x49891) ?x49894)))
 (= (+ (+ ?x49895 ?x49897) ?x49900) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49949 (* ?x49899 l_0_9_88)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49947 (* ?x49896 l_0_9_87)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49945 (* ?x49893 l_0_9_86)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49943 (* ?x49890 l_0_9_85)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49941 (* ?x49887 l_0_9_84)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49939 (* ?x49884 l_0_9_83)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49937 (* ?x49881 l_0_9_82)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49935 (* ?x49878 l_0_9_43)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49933 (* ?x49875 l_0_9_42)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49931 (* ?x49872 l_0_9_41)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49929 (* ?x49869 l_0_9_40)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49927 (* ?x48962 l_0_9_39)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49925 (* ?x48748 l_0_9_38)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49923 (* ?x49212 l_0_9_37)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x48544 (* ?x48543 l_0_9_162)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x48541 (* ?x48540 l_0_9_161)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x48538 (* ?x48537 l_0_9_160)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x48535 (* ?x48534 l_0_9_159)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x48532 (* ?x48531 l_0_9_158)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x48529 (* ?x48528 l_0_9_157)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x48526 (* ?x48525 l_0_9_117)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x48523 (* ?x48522 l_0_9_116)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x48520 (* ?x48519 l_0_9_115)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x48517 (* ?x48516 l_0_9_114)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48514 (* ?x48513 l_0_9_113)))
 (let ((?x48675 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_112) ?x48514) ?x48517) ?x48520) ?x48523)))
 (let ((?x48682 (+ (+ (+ (+ (+ (+ (- ?x48675 ?x48526) ?x48529) ?x48532) ?x48535) ?x48538) ?x48541) ?x48544)))
 (let ((?x49936 (- (- (- (- (- (- (- ?x48682 ?x49923) ?x49925) ?x49927) ?x49929) ?x49931) ?x49933) ?x49935)))
 (let ((?x49950 (+ (+ (+ (+ (+ (+ (+ ?x49936 ?x49937) ?x49939) ?x49941) ?x49943) ?x49945) ?x49947) ?x49949)))
 (= ?x49950 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50022 (* l_0_9_81 l_0_9_81)))
 (let ((?x50020 (* l_0_9_80 l_0_9_80)))
 (let ((?x50018 (* l_0_9_79 l_0_9_79)))
 (let ((?x50016 (* l_0_9_78 l_0_9_78)))
 (let ((?x50014 (* l_0_9_77 l_0_9_77)))
 (let ((?x50012 (* l_0_9_76 l_0_9_76)))
 (let ((?x50010 (* l_0_9_75 l_0_9_75)))
 (let ((?x50008 (* l_0_9_74 l_0_9_74)))
 (let ((?x50006 (* l_0_9_36 l_0_9_36)))
 (let ((?x50004 (* l_0_9_35 l_0_9_35)))
 (let ((?x50002 (* l_0_9_34 l_0_9_34)))
 (let ((?x50000 (* l_0_9_33 l_0_9_33)))
 (let ((?x49989 (* l_0_9_32 l_0_9_32)))
 (let ((?x49984 (* l_0_9_31 l_0_9_31)))
 (let ((?x49990 (- (- (- (* (- l_0_9_29) l_0_9_29) (* l_0_9_30 l_0_9_30)) ?x49984) ?x49989)))
 (let ((?x50013 (+ (+ (+ (- (- (- (- ?x49990 ?x50000) ?x50002) ?x50004) ?x50006) ?x50008) ?x50010) ?x50012)))
 (= (+ (+ (+ (+ (+ ?x50013 ?x50014) ?x50016) ?x50018) ?x50020) ?x50022) 0.0))))))))))))))))))
(assert
 (let ((?x50113 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50110 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50107 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50104 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50101 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50098 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50095 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50092 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50089 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50086 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50083 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50080 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50077 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x50074 (* ?x49000 l_0_9_39)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x50072 (* ?x48991 l_0_9_38)))
 (let ((?x49246 (* 2.0 l_0_9_29)))
 (let ((?x50070 (* ?x49246 l_0_9_37)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50068 (* ?x48543 l_0_9_169)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50066 (* ?x48540 l_0_9_168)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50064 (* ?x48537 l_0_9_167)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50062 (* ?x48534 l_0_9_166)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50060 (* ?x48531 l_0_9_165)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50058 (* ?x48528 l_0_9_164)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50056 (* ?x48525 l_0_9_124)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50054 (* ?x48522 l_0_9_123)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50052 (* ?x48519 l_0_9_122)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50050 (* ?x48516 l_0_9_121)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50048 (* ?x48513 l_0_9_120)))
 (let ((?x50055 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_119) ?x50048) ?x50050) ?x50052) ?x50054)))
 (let ((?x50069 (+ (+ (+ (+ (+ (+ (- ?x50055 ?x50056) ?x50058) ?x50060) ?x50062) ?x50064) ?x50066) ?x50068)))
 (let ((?x50087 (- (- (- (- (- (- (- ?x50069 ?x50070) ?x50072) ?x50074) ?x50077) ?x50080) ?x50083) ?x50086)))
 (let ((?x50108 (+ (+ (+ (+ (+ (+ (- ?x50087 ?x50089) ?x50092) ?x50095) ?x50098) ?x50101) ?x50104) ?x50107)))
 (= (+ (+ ?x50108 ?x50110) ?x50113) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50226 (* l_0_9_90 l_0_9_90)))
 (let ((?x50224 (* l_0_9_89 l_0_9_89)))
 (let ((?x50222 (* l_0_9_88 l_0_9_88)))
 (let ((?x50220 (* l_0_9_87 l_0_9_87)))
 (let ((?x50218 (* l_0_9_86 l_0_9_86)))
 (let ((?x50216 (* l_0_9_85 l_0_9_85)))
 (let ((?x50214 (* l_0_9_84 l_0_9_84)))
 (let ((?x50212 (* l_0_9_83 l_0_9_83)))
 (let ((?x50210 (* l_0_9_82 l_0_9_82)))
 (let ((?x50208 (* l_0_9_45 l_0_9_45)))
 (let ((?x50206 (* l_0_9_44 l_0_9_44)))
 (let ((?x50204 (* l_0_9_43 l_0_9_43)))
 (let ((?x50202 (* l_0_9_42 l_0_9_42)))
 (let ((?x50200 (* l_0_9_41 l_0_9_41)))
 (let ((?x50198 (* l_0_9_40 l_0_9_40)))
 (let ((?x50196 (* l_0_9_39 l_0_9_39)))
 (let ((?x50194 (* l_0_9_38 l_0_9_38)))
 (let ((?x50192 (* l_0_9_37 l_0_9_37)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50190 (* ?x48543 l_0_9_177)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50188 (* ?x48540 l_0_9_176)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50186 (* ?x48537 l_0_9_175)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50184 (* ?x48534 l_0_9_174)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50182 (* ?x48531 l_0_9_173)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50180 (* ?x48528 l_0_9_172)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50178 (* ?x48525 l_0_9_132)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50176 (* ?x48522 l_0_9_131)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50174 (* ?x48519 l_0_9_130)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50172 (* ?x48516 l_0_9_129)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50170 (* ?x48513 l_0_9_128)))
 (let ((?x50177 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_127) ?x50170) ?x50172) ?x50174) ?x50176)))
 (let ((?x50191 (+ (+ (+ (+ (+ (+ (- ?x50177 ?x50178) ?x50180) ?x50182) ?x50184) ?x50186) ?x50188) ?x50190)))
 (let ((?x50205 (- (- (- (- (- (- (- ?x50191 ?x50192) ?x50194) ?x50196) ?x50198) ?x50200) ?x50202) ?x50204)))
 (let ((?x50219 (+ (+ (+ (+ (+ (- (- ?x50205 ?x50206) ?x50208) ?x50210) ?x50212) ?x50214) ?x50216) ?x50218)))
 (= (+ (+ (+ (+ ?x50219 ?x50220) ?x50222) ?x50224) ?x50226) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48341 (* ?x48340 l_0_9_47)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50269 (* ?x48610 l_0_9_146)))
 (let ((?x50266 (* 2.0 l_0_9_101)))
 (let ((?x50267 (* ?x50266 l_0_9_91)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48339 (* ?x48338 l_0_9_2)))
 (= (+ (+ (- ?x48339 ?x50267) ?x50269) ?x48341) 0.0))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49146 (* ?x49145 l_0_9_59)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49143 (* ?x49142 l_0_9_58)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49140 (* ?x49139 l_0_9_57)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49137 (* ?x49136 l_0_9_56)))
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48387 (* ?x48340 l_0_9_49)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x50295 (* ?x50294 l_0_9_239)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x50292 (* ?x50291 l_0_9_238)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x50289 (* ?x50288 l_0_9_237)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x50286 (* ?x50285 l_0_9_236)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49128 (* ?x48897 l_0_9_9)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49126 (* ?x48705 l_0_9_8)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x49124 (* ?x49123 l_0_9_7)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48345 (* ?x48338 l_0_9_4)))
 (let ((?x50284 (+ (+ (+ (+ ?x48345 (* (* 2.0 l_0_9_10) l_0_9_14)) ?x49124) ?x49126) ?x49128)))
 (let ((?x50299 (- (- (+ (+ (+ (+ (+ ?x50284 ?x50286) ?x50289) ?x50292) ?x50295) ?x48387) ?x49137) ?x49140)))
 (= (- (- ?x50299 ?x49143) ?x49146) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48340 l_0_9_52)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_7) ?x48470) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48476 (* ?x48340 l_0_9_56)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_11) ?x48476) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48486 (* ?x48340 l_0_9_61)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_16) ?x48486) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48496 (* ?x48340 l_0_9_67)))
 (= (+ (* (* (- 2.0) l_0_9_1) l_0_9_22) ?x48496) 0.0))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48552 (* ?x48340 l_0_9_74)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x50295 (* ?x50294 l_0_9_239)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x50292 (* ?x50291 l_0_9_238)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x50289 (* ?x50288 l_0_9_237)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x50286 (* ?x50285 l_0_9_236)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x50326 (* ?x49299 l_0_9_149)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x50324 (* ?x49296 l_0_9_148)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x50322 (* ?x49293 l_0_9_147)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x50320 (* ?x49290 l_0_9_146)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50318 (* ?x49511 l_0_9_99)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50316 (* ?x49508 l_0_9_98)))
 (let ((?x50266 (* 2.0 l_0_9_101)))
 (let ((?x50314 (* ?x50266 l_0_9_97)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x48504 (* ?x48338 l_0_9_29)))
 (let ((?x50319 (+ (+ (+ (+ ?x48504 (* (* 2.0 l_0_9_100) l_0_9_104)) ?x50314) ?x50316) ?x50318)))
 (let ((?x50330 (- (- (- (- (- (- (- ?x50319 ?x50320) ?x50322) ?x50324) ?x50326) ?x50286) ?x50289) ?x50292)))
 (= (+ (- ?x50330 ?x50295) ?x48552) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48613 (* ?x48340 l_0_9_82)))
 (let ((?x48338 (* (- 2.0) l_0_9_1)))
 (let ((?x25916 (* ?x48338 l_0_9_37)))
 (= (+ ?x25916 ?x48613) 0.0))))))
(assert
 (let ((?x48633 (* l_0_9_48 l_0_9_48)))
 (let ((?x48631 (* l_0_9_47 l_0_9_47)))
 (let ((?x48624 (* l_0_9_3 l_0_9_3)))
 (let ((?x48637 (* l_0_9_2 l_0_9_2)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x37939 (* ?x48795 l_0_9_147)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x26576 (* ?x48792 l_0_9_146)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x10139 (* ?x49508 l_0_9_93)))
 (let ((?x37943 (+ (+ (- (* (* (- 2.0) l_0_9_101) l_0_9_92) ?x10139) ?x26576) ?x37939)))
 (= (+ (+ (- (- ?x37943 ?x48637) ?x48624) ?x48631) ?x48633) 0.0)))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48655 (* ?x48654 l_0_9_50)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48652 (* ?x48651 l_0_9_49)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48649 (* ?x48648 l_0_9_5)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x50346 (* ?x48683 l_0_9_4)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x37884 (* ?x49040 l_0_9_148)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x10106 (* ?x49037 l_0_9_147)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x10081 (* ?x49034 l_0_9_146)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x37843 (* ?x49511 l_0_9_96)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x38014 (* ?x49508 l_0_9_95)))
 (let ((?x37883 (+ (+ (- (- (* (* (- 2.0) l_0_9_101) l_0_9_94) ?x38014) ?x37843) ?x10081) ?x10106)))
 (let ((?x50345 (+ ?x37883 ?x37884)))
 (= (+ (+ (- (- ?x50345 ?x50346) ?x48649) ?x48652) ?x48655) 0.0))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48690 (* ?x48654 l_0_9_53)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48688 (* ?x48651 l_0_9_52)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48686 (* ?x48648 l_0_9_8)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48684 (* ?x48683 l_0_9_7)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x50326 (* ?x49299 l_0_9_149)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x50324 (* ?x49296 l_0_9_148)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x50322 (* ?x49293 l_0_9_147)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x50320 (* ?x49290 l_0_9_146)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50318 (* ?x49511 l_0_9_99)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50316 (* ?x49508 l_0_9_98)))
 (let ((?x50266 (* 2.0 l_0_9_101)))
 (let ((?x50314 (* ?x50266 l_0_9_97)))
 (let ((?x50377 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_104) ?x50314) ?x50316) ?x50318) ?x50320)))
 (let ((?x50380 (+ (+ (+ ?x50377 ?x50322) ?x50324) ?x50326)))
 (= (+ (+ (- (- ?x50380 ?x48684) ?x48686) ?x48688) ?x48690) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48710 (* ?x48654 l_0_9_57)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48708 (* ?x48651 l_0_9_56)))
 (let ((?x50405 (* l_0_9_150 l_0_9_150)))
 (let ((?x50403 (* l_0_9_149 l_0_9_149)))
 (let ((?x50401 (* l_0_9_148 l_0_9_148)))
 (let ((?x50399 (* l_0_9_147 l_0_9_147)))
 (let ((?x50397 (* l_0_9_146 l_0_9_146)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48706 (* ?x48705 l_0_9_3)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x50394 (* ?x49123 l_0_9_2)))
 (let ((?x50392 (* l_0_9_105 l_0_9_105)))
 (let ((?x50390 (* l_0_9_104 l_0_9_104)))
 (let ((?x50388 (* l_0_9_103 l_0_9_103)))
 (let ((?x50389 (- (- (* (- l_0_9_101) l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x50388)))
 (let ((?x50393 (- (- ?x50389 ?x50390) ?x50392)))
 (let ((?x50406 (+ (+ (+ (+ (+ (- (- ?x50393 ?x50394) ?x48706) ?x50397) ?x50399) ?x50401) ?x50403) ?x50405)))
 (= (+ (+ ?x50406 ?x48708) ?x48710) 0.0)))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48734 (* ?x48654 l_0_9_62)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48732 (* ?x48651 l_0_9_61)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48725 (* ?x48354 l_0_9_3)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x50432 (* ?x48347 l_0_9_2)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x49543 (* ?x49542 l_0_9_155)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x49538 (* ?x49537 l_0_9_154)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x49535 (* ?x49534 l_0_9_153)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x49532 (* ?x49531 l_0_9_152)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x49529 (* ?x49528 l_0_9_151)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x49518 (* ?x49517 l_0_9_110)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x49515 (* ?x49514 l_0_9_109)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x49512 (* ?x49511 l_0_9_108)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x49509 (* ?x49508 l_0_9_107)))
 (let ((?x49519 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_106) ?x49509) ?x49512) ?x49515) ?x49518)))
 (let ((?x50434 (- (- (+ (+ (+ (+ (+ ?x49519 ?x49529) ?x49532) ?x49535) ?x49538) ?x49543) ?x50432) ?x48725)))
 (= (+ (+ ?x50434 ?x48732) ?x48734) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48753 (* ?x48654 l_0_9_68)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48751 (* ?x48651 l_0_9_67)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48749 (* ?x48748 l_0_9_3)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x38030 (* ?x48683 l_0_9_22)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x38043 (* ?x49542 l_0_9_161)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x38024 (* ?x49537 l_0_9_160)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x26590 (* ?x49534 l_0_9_159)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x38009 (* ?x49531 l_0_9_158)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x38049 (* ?x49528 l_0_9_157)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x38045 (* ?x49517 l_0_9_116)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x38035 (* ?x49514 l_0_9_115)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x26658 (* ?x49511 l_0_9_114)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x26651 (* ?x49508 l_0_9_113)))
 (let ((?x38047 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_112) ?x26651) ?x26658) ?x38035) ?x38045)))
 (let ((?x38006 (+ (+ (+ (+ (+ ?x38047 ?x38049) ?x38009) ?x26590) ?x38024) ?x38043)))
 (= (+ (+ (- (- ?x38006 ?x38030) ?x48749) ?x48751) ?x48753) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48776 (* ?x48654 l_0_9_75)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48774 (* ?x48651 l_0_9_74)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48767 (* ?x48648 l_0_9_30)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x50488 (* ?x48683 l_0_9_29)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50486 (* ?x49542 l_0_9_168)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50484 (* ?x49537 l_0_9_167)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50482 (* ?x49534 l_0_9_166)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50480 (* ?x49531 l_0_9_165)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50478 (* ?x49528 l_0_9_164)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50476 (* ?x49517 l_0_9_123)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50474 (* ?x49514 l_0_9_122)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50472 (* ?x49511 l_0_9_121)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50470 (* ?x49508 l_0_9_120)))
 (let ((?x50477 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_119) ?x50470) ?x50472) ?x50474) ?x50476)))
 (let ((?x50487 (+ (+ (+ (+ (+ ?x50477 ?x50478) ?x50480) ?x50482) ?x50484) ?x50486)))
 (= (+ (+ (- (- ?x50487 ?x50488) ?x48767) ?x48774) ?x48776) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48804 (* ?x48654 l_0_9_83)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48802 (* ?x48651 l_0_9_82)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48800 (* ?x48648 l_0_9_38)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48798 (* ?x48683 l_0_9_37)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50544 (* ?x49542 l_0_9_176)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50542 (* ?x49537 l_0_9_175)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50540 (* ?x49534 l_0_9_174)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50538 (* ?x49531 l_0_9_173)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50536 (* ?x49528 l_0_9_172)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50534 (* ?x49517 l_0_9_131)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50532 (* ?x49514 l_0_9_130)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50530 (* ?x49511 l_0_9_129)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50528 (* ?x49508 l_0_9_128)))
 (let ((?x50535 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_127) ?x50528) ?x50530) ?x50532) ?x50534)))
 (let ((?x50545 (+ (+ (+ (+ (+ ?x50535 ?x50536) ?x50538) ?x50540) ?x50542) ?x50544)))
 (= (+ (+ (- (- ?x50545 ?x48798) ?x48800) ?x48802) ?x48804) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x48844 (* l_0_9_6 l_0_9_6)))
 (let ((?x48842 (* l_0_9_51 l_0_9_51)))
 (let ((?x48840 (* l_0_9_50 l_0_9_50)))
 (let ((?x48838 (* l_0_9_5 l_0_9_5)))
 (let ((?x48841 (+ (- (+ (* (- l_0_9_4) l_0_9_4) (* l_0_9_49 l_0_9_49)) ?x48838) ?x48840)))
 (= (- (+ ?x48841 ?x48842) ?x48844) 0.0)))))))
(assert
 (let ((?x48872 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48869 (* ?x48868 l_0_9_54)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48866 (* ?x48865 l_0_9_53)))
 (let ((?x48863 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48860 (* ?x48859 l_0_9_52)))
 (let ((?x48870 (+ (+ (- (+ (* (* (- 2.0) l_0_9_4) l_0_9_7) ?x48860) ?x48863) ?x48866) ?x48869)))
 (= (- ?x48870 ?x48872) 0.0)))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48904 (* ?x48868 l_0_9_58)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48902 (* ?x48865 l_0_9_57)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48900 (* ?x48859 l_0_9_56)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x48898 (* ?x48897 l_0_9_6)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48895 (* ?x48705 l_0_9_5)))
 (let ((?x48903 (+ (+ (- (- (* (* (- 2.0) l_0_9_11) l_0_9_4) ?x48895) ?x48898) ?x48900) ?x48902)))
 (= (+ ?x48903 ?x48904) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48932 (* ?x48868 l_0_9_63)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48930 (* ?x48865 l_0_9_62)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48928 (* ?x48859 l_0_9_61)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48926 (* ?x48357 l_0_9_6)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48924 (* ?x48354 l_0_9_5)))
 (let ((?x48931 (+ (+ (- (- (* (* (- 2.0) l_0_9_16) l_0_9_4) ?x48924) ?x48926) ?x48928) ?x48930)))
 (= (+ ?x48931 ?x48932) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48969 (* ?x48868 l_0_9_69)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48967 (* ?x48865 l_0_9_68)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48965 (* ?x48859 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x48963 (* ?x48962 l_0_9_6)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48954 (* ?x48748 l_0_9_5)))
 (let ((?x48968 (+ (+ (- (- (* (* (- 2.0) l_0_9_22) l_0_9_4) ?x48954) ?x48963) ?x48965) ?x48967)))
 (= (+ ?x48968 ?x48969) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49007 (* ?x48868 l_0_9_76)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49005 (* ?x48865 l_0_9_75)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49003 (* ?x48859 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49001 (* ?x49000 l_0_9_6)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x48992 (* ?x48991 l_0_9_5)))
 (let ((?x49006 (+ (+ (- (- (* (* (- 2.0) l_0_9_29) l_0_9_4) ?x48992) ?x49001) ?x49003) ?x49005)))
 (= (+ ?x49006 ?x49007) 0.0)))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49056 (* ?x48868 l_0_9_84)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49054 (* ?x48865 l_0_9_83)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49052 (* ?x48859 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49050 (* ?x49049 l_0_9_6)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49047 (* ?x49046 l_0_9_5)))
 (let ((?x38154 (+ (+ (- (- (* (* (- 2.0) l_0_9_37) l_0_9_4) ?x49047) ?x49050) ?x49052) ?x49054)))
 (= (+ ?x38154 ?x49056) 0.0)))))))))))))
(assert
 (let ((?x49108 (* l_0_9_9 l_0_9_9)))
 (let ((?x49106 (* l_0_9_8 l_0_9_8)))
 (let ((?x49104 (* l_0_9_7 l_0_9_7)))
 (let ((?x49102 (* l_0_9_55 l_0_9_55)))
 (let ((?x49100 (* l_0_9_54 l_0_9_54)))
 (let ((?x49098 (* l_0_9_53 l_0_9_53)))
 (let ((?x49101 (+ (+ (+ (* (- l_0_9_10) l_0_9_10) (* l_0_9_52 l_0_9_52)) ?x49098) ?x49100)))
 (= (- (- (- (+ ?x49101 ?x49102) ?x49104) ?x49106) ?x49108) 0.0)))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49146 (* ?x49145 l_0_9_59)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49143 (* ?x49142 l_0_9_58)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49140 (* ?x49139 l_0_9_57)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49137 (* ?x49136 l_0_9_56)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49128 (* ?x48897 l_0_9_9)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49126 (* ?x48705 l_0_9_8)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x49124 (* ?x49123 l_0_9_7)))
 (let ((?x49129 (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_14) ?x49124) ?x49126) ?x49128)))
 (= (+ (+ (+ (+ ?x49129 ?x49137) ?x49140) ?x49143) ?x49146) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49190 (* ?x49145 l_0_9_64)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49188 (* ?x49142 l_0_9_63)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49186 (* ?x49139 l_0_9_62)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49184 (* ?x49136 l_0_9_61)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49182 (* ?x48357 l_0_9_9)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49180 (* ?x48354 l_0_9_8)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x49178 (* ?x48347 l_0_9_7)))
 (let ((?x49185 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_19) ?x49178) ?x49180) ?x49182) ?x49184)))
 (= (+ (+ (+ ?x49185 ?x49186) ?x49188) ?x49190) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49225 (* ?x49145 l_0_9_70)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49223 (* ?x49142 l_0_9_69)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49221 (* ?x49139 l_0_9_68)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49219 (* ?x49136 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49217 (* ?x48962 l_0_9_9)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49215 (* ?x48748 l_0_9_8)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49213 (* ?x49212 l_0_9_7)))
 (let ((?x49220 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_25) ?x49213) ?x49215) ?x49217) ?x49219)))
 (= (+ (+ (+ ?x49220 ?x49221) ?x49223) ?x49225) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49259 (* ?x49145 l_0_9_77)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49257 (* ?x49142 l_0_9_76)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49255 (* ?x49139 l_0_9_75)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49253 (* ?x49136 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49251 (* ?x49000 l_0_9_9)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x49249 (* ?x48991 l_0_9_8)))
 (let ((?x49246 (* 2.0 l_0_9_29)))
 (let ((?x49247 (* ?x49246 l_0_9_7)))
 (let ((?x49254 (+ (- (- (- (* (* (- 2.0) l_0_9_10) l_0_9_32) ?x49247) ?x49249) ?x49251) ?x49253)))
 (= (+ (+ (+ ?x49254 ?x49255) ?x49257) ?x49259) 0.0)))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49314 (* ?x49145 l_0_9_85)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49312 (* ?x49142 l_0_9_84)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49310 (* ?x49139 l_0_9_83)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49308 (* ?x49136 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49306 (* ?x49049 l_0_9_9)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49304 (* ?x49046 l_0_9_8)))
 (let ((?x49043 (* 2.0 l_0_9_37)))
 (let ((?x49302 (* ?x49043 l_0_9_7)))
 (let ((?x49121 (* (- 2.0) l_0_9_10)))
 (let ((?x37254 (* ?x49121 l_0_9_40)))
 (let ((?x50591 (+ (+ (+ (+ (- (- (- ?x37254 ?x49302) ?x49304) ?x49306) ?x49308) ?x49310) ?x49312) ?x49314)))
 (= ?x50591 0.0)))))))))))))))))))
(assert
 (let ((?x49369 (* l_0_9_60 l_0_9_60)))
 (let ((?x49367 (* l_0_9_59 l_0_9_59)))
 (let ((?x49365 (* l_0_9_58 l_0_9_58)))
 (let ((?x49363 (* l_0_9_57 l_0_9_57)))
 (let ((?x49361 (* l_0_9_56 l_0_9_56)))
 (let ((?x49359 (* l_0_9_15 l_0_9_15)))
 (let ((?x49357 (* l_0_9_14 l_0_9_14)))
 (let ((?x49355 (* l_0_9_13 l_0_9_13)))
 (let ((?x49358 (- (- (- (* (- l_0_9_11) l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x49355) ?x49357)))
 (= (+ (+ (+ (+ (+ (- ?x49358 ?x49359) ?x49361) ?x49363) ?x49365) ?x49367) ?x49369) 0.0)))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49408 (* ?x49407 l_0_9_65)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49405 (* ?x49404 l_0_9_64)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49402 (* ?x49401 l_0_9_63)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49399 (* ?x49398 l_0_9_62)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49396 (* ?x49395 l_0_9_61)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49393 (* ?x49392 l_0_9_20)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49390 (* ?x49389 l_0_9_19)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49387 (* ?x48897 l_0_9_18)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49385 (* ?x48705 l_0_9_17)))
 (let ((?x49394 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_16) ?x49385) ?x49387) ?x49390) ?x49393)))
 (= (+ (+ (+ (+ (+ ?x49394 ?x49396) ?x49399) ?x49402) ?x49405) ?x49408) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49448 (* ?x49407 l_0_9_71)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49446 (* ?x49404 l_0_9_70)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49444 (* ?x49401 l_0_9_69)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49442 (* ?x49398 l_0_9_68)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49440 (* ?x49395 l_0_9_67)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49438 (* ?x49392 l_0_9_26)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49436 (* ?x49389 l_0_9_25)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49434 (* ?x48897 l_0_9_24)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49432 (* ?x48705 l_0_9_23)))
 (let ((?x49439 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_22) ?x49432) ?x49434) ?x49436) ?x49438)))
 (= (+ (+ (+ (+ (+ ?x49439 ?x49440) ?x49442) ?x49444) ?x49446) ?x49448) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49485 (* ?x49407 l_0_9_78)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49483 (* ?x49404 l_0_9_77)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49481 (* ?x49401 l_0_9_76)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49479 (* ?x49398 l_0_9_75)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49477 (* ?x49395 l_0_9_74)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49475 (* ?x49392 l_0_9_33)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49465 (* ?x49389 l_0_9_32)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49462 (* ?x48897 l_0_9_31)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x37416 (* ?x48705 l_0_9_30)))
 (let ((?x49476 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_29) ?x37416) ?x49462) ?x49465) ?x49475)))
 (= (+ (+ (+ (+ (+ ?x49476 ?x49477) ?x49479) ?x49481) ?x49483) ?x49485) 0.0)))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49553 (* ?x49407 l_0_9_86)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49551 (* ?x49404 l_0_9_85)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49549 (* ?x49401 l_0_9_84)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49547 (* ?x49398 l_0_9_83)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49545 (* ?x49395 l_0_9_82)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49540 (* ?x49392 l_0_9_41)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49526 (* ?x49389 l_0_9_40)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49524 (* ?x48897 l_0_9_39)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49522 (* ?x48705 l_0_9_38)))
 (let ((?x50605 (- (- (- (- (* (* (- 2.0) l_0_9_11) l_0_9_37) ?x49522) ?x49524) ?x49526) ?x49540)))
 (= (+ (+ (+ (+ (+ ?x50605 ?x49545) ?x49547) ?x49549) ?x49551) ?x49553) 0.0)))))))))))))))))))))
(assert
 (let ((?x49630 (* l_0_9_66 l_0_9_66)))
 (let ((?x49628 (* l_0_9_65 l_0_9_65)))
 (let ((?x49626 (* l_0_9_64 l_0_9_64)))
 (let ((?x49624 (* l_0_9_63 l_0_9_63)))
 (let ((?x49622 (* l_0_9_62 l_0_9_62)))
 (let ((?x49620 (* l_0_9_61 l_0_9_61)))
 (let ((?x49618 (* l_0_9_21 l_0_9_21)))
 (let ((?x49616 (* l_0_9_20 l_0_9_20)))
 (let ((?x49601 (* l_0_9_19 l_0_9_19)))
 (let ((?x49598 (* l_0_9_18 l_0_9_18)))
 (let ((?x49615 (- (- (- (* (- l_0_9_16) l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49598) ?x49601)))
 (let ((?x49629 (+ (+ (+ (+ (+ (- (- ?x49615 ?x49616) ?x49618) ?x49620) ?x49622) ?x49624) ?x49626) ?x49628)))
 (= (+ ?x49629 ?x49630) 0.0))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49696 (* ?x48404 l_0_9_79)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49694 (* ?x48401 l_0_9_78)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49692 (* ?x48398 l_0_9_77)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49690 (* ?x48395 l_0_9_76)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49688 (* ?x48392 l_0_9_75)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49686 (* ?x48389 l_0_9_74)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49684 (* ?x48366 l_0_9_34)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49682 (* ?x48363 l_0_9_33)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49680 (* ?x48360 l_0_9_32)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49678 (* ?x48357 l_0_9_31)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49676 (* ?x48354 l_0_9_30)))
 (let ((?x49683 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_29) ?x49676) ?x49678) ?x49680) ?x49682)))
 (let ((?x49697 (+ (+ (+ (+ (+ (+ (- ?x49683 ?x49684) ?x49686) ?x49688) ?x49690) ?x49692) ?x49694) ?x49696)))
 (= ?x49697 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49768 (* ?x48404 l_0_9_87)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49766 (* ?x48401 l_0_9_86)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49764 (* ?x48398 l_0_9_85)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49762 (* ?x48395 l_0_9_84)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49760 (* ?x48392 l_0_9_83)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49758 (* ?x48389 l_0_9_82)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49756 (* ?x48366 l_0_9_42)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49754 (* ?x48363 l_0_9_41)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49752 (* ?x48360 l_0_9_40)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49750 (* ?x48357 l_0_9_39)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49748 (* ?x48354 l_0_9_38)))
 (let ((?x50631 (- (- (- (- (* (* (- 2.0) l_0_9_16) l_0_9_37) ?x49748) ?x49750) ?x49752) ?x49754)))
 (let ((?x50638 (+ (+ (+ (+ (+ (+ (- ?x50631 ?x49756) ?x49758) ?x49760) ?x49762) ?x49764) ?x49766) ?x49768)))
 (= ?x50638 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49837 (* l_0_9_73 l_0_9_73)))
 (let ((?x49835 (* l_0_9_72 l_0_9_72)))
 (let ((?x49833 (* l_0_9_71 l_0_9_71)))
 (let ((?x49831 (* l_0_9_70 l_0_9_70)))
 (let ((?x49829 (* l_0_9_69 l_0_9_69)))
 (let ((?x49827 (* l_0_9_68 l_0_9_68)))
 (let ((?x49825 (* l_0_9_67 l_0_9_67)))
 (let ((?x49823 (* l_0_9_28 l_0_9_28)))
 (let ((?x49821 (* l_0_9_27 l_0_9_27)))
 (let ((?x49819 (* l_0_9_26 l_0_9_26)))
 (let ((?x49803 (* l_0_9_25 l_0_9_25)))
 (let ((?x49800 (* l_0_9_24 l_0_9_24)))
 (let ((?x49818 (- (- (- (* (- l_0_9_22) l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x49800) ?x49803)))
 (let ((?x49832 (+ (+ (+ (+ (- (- (- ?x49818 ?x49819) ?x49821) ?x49823) ?x49825) ?x49827) ?x49829) ?x49831)))
 (= (+ (+ (+ ?x49832 ?x49833) ?x49835) ?x49837) 0.0))))))))))))))))
(assert
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49900 (* ?x49899 l_0_9_80)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49897 (* ?x49896 l_0_9_79)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49894 (* ?x49893 l_0_9_78)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49891 (* ?x49890 l_0_9_77)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49888 (* ?x49887 l_0_9_76)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49885 (* ?x49884 l_0_9_75)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49882 (* ?x49881 l_0_9_74)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49879 (* ?x49878 l_0_9_35)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49876 (* ?x49875 l_0_9_34)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49873 (* ?x49872 l_0_9_33)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49870 (* ?x49869 l_0_9_32)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49867 (* ?x48962 l_0_9_31)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49865 (* ?x48748 l_0_9_30)))
 (let ((?x49874 (- (- (- (- (* (* (- 2.0) l_0_9_22) l_0_9_29) ?x49865) ?x49867) ?x49870) ?x49873)))
 (let ((?x49895 (+ (+ (+ (+ (+ (- (- ?x49874 ?x49876) ?x49879) ?x49882) ?x49885) ?x49888) ?x49891) ?x49894)))
 (= (+ (+ ?x49895 ?x49897) ?x49900) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49949 (* ?x49899 l_0_9_88)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49947 (* ?x49896 l_0_9_87)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49945 (* ?x49893 l_0_9_86)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49943 (* ?x49890 l_0_9_85)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49941 (* ?x49887 l_0_9_84)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49939 (* ?x49884 l_0_9_83)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49937 (* ?x49881 l_0_9_82)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49935 (* ?x49878 l_0_9_43)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49933 (* ?x49875 l_0_9_42)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49931 (* ?x49872 l_0_9_41)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49929 (* ?x49869 l_0_9_40)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49927 (* ?x48962 l_0_9_39)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49925 (* ?x48748 l_0_9_38)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49923 (* ?x49212 l_0_9_37)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x50326 (* ?x49299 l_0_9_149)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x50324 (* ?x49296 l_0_9_148)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x50322 (* ?x49293 l_0_9_147)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x50320 (* ?x49290 l_0_9_146)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50318 (* ?x49511 l_0_9_99)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50316 (* ?x49508 l_0_9_98)))
 (let ((?x50266 (* 2.0 l_0_9_101)))
 (let ((?x50314 (* ?x50266 l_0_9_97)))
 (let ((?x50377 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_104) ?x50314) ?x50316) ?x50318) ?x50320)))
 (let ((?x50380 (+ (+ (+ ?x50377 ?x50322) ?x50324) ?x50326)))
 (let ((?x50647 (- (- (- (- (- (- (- ?x50380 ?x49923) ?x49925) ?x49927) ?x49929) ?x49931) ?x49933) ?x49935)))
 (let ((?x50656 (+ (+ (+ (+ (+ (+ (+ ?x50647 ?x49937) ?x49939) ?x49941) ?x49943) ?x49945) ?x49947) ?x49949)))
 (= ?x50656 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50022 (* l_0_9_81 l_0_9_81)))
 (let ((?x50020 (* l_0_9_80 l_0_9_80)))
 (let ((?x50018 (* l_0_9_79 l_0_9_79)))
 (let ((?x50016 (* l_0_9_78 l_0_9_78)))
 (let ((?x50014 (* l_0_9_77 l_0_9_77)))
 (let ((?x50012 (* l_0_9_76 l_0_9_76)))
 (let ((?x50010 (* l_0_9_75 l_0_9_75)))
 (let ((?x50008 (* l_0_9_74 l_0_9_74)))
 (let ((?x50006 (* l_0_9_36 l_0_9_36)))
 (let ((?x50004 (* l_0_9_35 l_0_9_35)))
 (let ((?x50002 (* l_0_9_34 l_0_9_34)))
 (let ((?x50000 (* l_0_9_33 l_0_9_33)))
 (let ((?x49989 (* l_0_9_32 l_0_9_32)))
 (let ((?x49984 (* l_0_9_31 l_0_9_31)))
 (let ((?x49990 (- (- (- (* (- l_0_9_29) l_0_9_29) (* l_0_9_30 l_0_9_30)) ?x49984) ?x49989)))
 (let ((?x50013 (+ (+ (+ (- (- (- (- ?x49990 ?x50000) ?x50002) ?x50004) ?x50006) ?x50008) ?x50010) ?x50012)))
 (= (+ (+ (+ (+ (+ ?x50013 ?x50014) ?x50016) ?x50018) ?x50020) ?x50022) 0.0))))))))))))))))))
(assert
 (let ((?x50113 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50110 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50107 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50104 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50101 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50098 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50095 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50092 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50089 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50086 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50083 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50080 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50077 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x50074 (* ?x49000 l_0_9_39)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x50072 (* ?x48991 l_0_9_38)))
 (let ((?x26720 (- (- (- (- (* (* (- 2.0) l_0_9_29) l_0_9_37) ?x50072) ?x50074) ?x50077) ?x50080)))
 (let ((?x50686 (+ (+ (+ (+ (- (- (- ?x26720 ?x50083) ?x50086) ?x50089) ?x50092) ?x50095) ?x50098) ?x50101)))
 (= (+ (+ (+ (+ ?x50686 ?x50104) ?x50107) ?x50110) ?x50113) 0.0)))))))))))))))))))))
(assert
 (let ((?x50226 (* l_0_9_90 l_0_9_90)))
 (let ((?x50224 (* l_0_9_89 l_0_9_89)))
 (let ((?x50222 (* l_0_9_88 l_0_9_88)))
 (let ((?x50220 (* l_0_9_87 l_0_9_87)))
 (let ((?x50218 (* l_0_9_86 l_0_9_86)))
 (let ((?x50216 (* l_0_9_85 l_0_9_85)))
 (let ((?x50214 (* l_0_9_84 l_0_9_84)))
 (let ((?x50212 (* l_0_9_83 l_0_9_83)))
 (let ((?x50210 (* l_0_9_82 l_0_9_82)))
 (let ((?x50208 (* l_0_9_45 l_0_9_45)))
 (let ((?x50206 (* l_0_9_44 l_0_9_44)))
 (let ((?x50204 (* l_0_9_43 l_0_9_43)))
 (let ((?x50202 (* l_0_9_42 l_0_9_42)))
 (let ((?x50200 (* l_0_9_41 l_0_9_41)))
 (let ((?x50198 (* l_0_9_40 l_0_9_40)))
 (let ((?x50196 (* l_0_9_39 l_0_9_39)))
 (let ((?x50699 (- (- (- (* (- l_0_9_37) l_0_9_37) (* l_0_9_38 l_0_9_38)) ?x50196) ?x50198)))
 (let ((?x50706 (+ (+ (- (- (- (- (- ?x50699 ?x50200) ?x50202) ?x50204) ?x50206) ?x50208) ?x50210) ?x50212)))
 (let ((?x50713 (+ (+ (+ (+ (+ (+ (+ ?x50706 ?x50214) ?x50216) ?x50218) ?x50220) ?x50222) ?x50224) ?x50226)))
 (= ?x50713 0.0)))))))))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48341 (* ?x48340 l_0_9_47)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38220 (* ?x6512 l_0_9_227)))
 (let ((?x26932 (- (* (* 2.0 l_0_9_1) l_0_9_2) (* (* 2.0 l_0_9_182) l_0_9_184))))
 (let ((?x26819 (- (+ (- ?x26932 (* (* 2.0 l_0_9_183) l_0_9_185)) ?x38220) (* (* 2.0 l_0_9_272) l_0_9_274))))
 (= (- (- ?x26819 (* (* 2.0 l_0_9_273) l_0_9_275)) ?x48341) 0.0))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48387 (* ?x48340 l_0_9_49)))
 (let ((?x38329 (* l_0_9_276 l_0_9_276)))
 (let ((?x38326 (* l_0_9_275 l_0_9_275)))
 (let ((?x26954 (* l_0_9_274 l_0_9_274)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38321 (* ?x6512 l_0_9_229)))
 (let ((?x10386 (- (* (* 2.0 l_0_9_1) l_0_9_4) (* (* 1.0 l_0_9_184) l_0_9_184))))
 (let ((?x6663 (- (- ?x10386 (* (* 1.0 l_0_9_185) l_0_9_185)) (* (* 1.0 l_0_9_186) l_0_9_186))))
 (= (- (- (- (- (+ ?x6663 ?x38321) ?x26954) ?x38326) ?x38329) ?x48387) 0.0)))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48470 (* ?x48340 l_0_9_52)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50742 (* ?x6512 l_0_9_232)))
 (let ((?x50735 (- (* (* 2.0 l_0_9_1) l_0_9_7) (* (* 2.0 l_0_9_184) l_0_9_187))))
 (let ((?x50741 (- (- ?x50735 (* (* 2.0 l_0_9_185) l_0_9_188)) (* (* 2.0 l_0_9_186) l_0_9_189))))
 (let ((?x50749 (- (- (+ ?x50741 ?x50742) (* (* 2.0 l_0_9_274) l_0_9_277)) (* (* 2.0 l_0_9_275) l_0_9_278))))
 (= (- (- ?x50749 (* (* 2.0 l_0_9_276) l_0_9_279)) ?x48470) 0.0)))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48476 (* ?x48340 l_0_9_56)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50788 (* ?x6512 l_0_9_236)))
 (let ((?x50783 (- (* (* 2.0 l_0_9_1) l_0_9_11) (* (* 2.0 l_0_9_184) l_0_9_191))))
 (let ((?x50787 (- (- ?x50783 (* (* 2.0 l_0_9_185) l_0_9_192)) (* (* 2.0 l_0_9_186) l_0_9_193))))
 (let ((?x50793 (- (- (+ ?x50787 ?x50788) (* (* 2.0 l_0_9_274) l_0_9_281)) (* (* 2.0 l_0_9_275) l_0_9_282))))
 (= (- (- ?x50793 (* (* 2.0 l_0_9_276) l_0_9_283)) ?x48476) 0.0)))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48486 (* ?x48340 l_0_9_61)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50828 (* ?x6512 l_0_9_241)))
 (let ((?x50823 (- (* (* 2.0 l_0_9_1) l_0_9_16) (* (* 2.0 l_0_9_184) l_0_9_196))))
 (let ((?x50827 (- (- ?x50823 (* (* 2.0 l_0_9_185) l_0_9_197)) (* (* 2.0 l_0_9_186) l_0_9_198))))
 (let ((?x50833 (- (- (+ ?x50827 ?x50828) (* (* 2.0 l_0_9_274) l_0_9_286)) (* (* 2.0 l_0_9_275) l_0_9_287))))
 (= (- (- ?x50833 (* (* 2.0 l_0_9_276) l_0_9_288)) ?x48486) 0.0)))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48496 (* ?x48340 l_0_9_67)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38436 (* ?x6512 l_0_9_247)))
 (let ((?x38417 (- (* (* 2.0 l_0_9_1) l_0_9_22) (* (* 2.0 l_0_9_184) l_0_9_202))))
 (let ((?x38432 (- (- ?x38417 (* (* 2.0 l_0_9_185) l_0_9_203)) (* (* 2.0 l_0_9_186) l_0_9_204))))
 (let ((?x38456 (- (- (+ ?x38432 ?x38436) (* (* 2.0 l_0_9_274) l_0_9_292)) (* (* 2.0 l_0_9_275) l_0_9_293))))
 (= (- (- ?x38456 (* (* 2.0 l_0_9_276) l_0_9_294)) ?x48496) 0.0)))))))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x50897 (* ?x50896 l_0_9_94)))
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48552 (* ?x48340 l_0_9_74)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50887 (* ?x6512 l_0_9_254)))
 (let ((?x38321 (* ?x6512 l_0_9_229)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50878 (* ?x48610 l_0_9_139)))
 (let ((?x50881 (- (- (* (* 2.0 l_0_9_1) l_0_9_29) ?x50878) (* (* 2.0 l_0_9_184) l_0_9_209))))
 (let ((?x50885 (- (- ?x50881 (* (* 2.0 l_0_9_185) l_0_9_210)) (* (* 2.0 l_0_9_186) l_0_9_211))))
 (let ((?x50892 (- (- (+ (- ?x50885 ?x38321) ?x50887) (* (* 2.0 l_0_9_274) l_0_9_299)) (* (* 2.0 l_0_9_275) l_0_9_300))))
 (= (+ (- (- ?x50892 (* (* 2.0 l_0_9_276) l_0_9_301)) ?x48552) ?x50897) 0.0))))))))))))))
(assert
 (let ((?x48340 (* 2.0 l_0_9_46)))
 (let ((?x48613 (* ?x48340 l_0_9_82)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38598 (* ?x6512 l_0_9_262)))
 (let ((?x38584 (- (* (* 2.0 l_0_9_1) l_0_9_37) (* (* 2.0 l_0_9_184) l_0_9_217))))
 (let ((?x38595 (- (- ?x38584 (* (* 2.0 l_0_9_185) l_0_9_218)) (* (* 2.0 l_0_9_186) l_0_9_219))))
 (let ((?x38551 (- (- (+ ?x38595 ?x38598) (* (* 2.0 l_0_9_274) l_0_9_307)) (* (* 2.0 l_0_9_275) l_0_9_308))))
 (= (- (- ?x38551 (* (* 2.0 l_0_9_276) l_0_9_309)) ?x48613) 0.0)))))))))
(assert
 (let ((?x48633 (* l_0_9_48 l_0_9_48)))
 (let ((?x48631 (* l_0_9_47 l_0_9_47)))
 (let ((?x48624 (* l_0_9_3 l_0_9_3)))
 (let ((?x50932 (* l_0_9_228 l_0_9_228)))
 (let ((?x50934 (+ (+ (+ (* l_0_9_2 l_0_9_2) (* l_0_9_227 l_0_9_227)) ?x50932) ?x48624)))
 (= (- (- ?x50934 ?x48631) ?x48633) 0.0)))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48655 (* ?x48654 l_0_9_50)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48652 (* ?x48651 l_0_9_49)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48649 (* ?x48648 l_0_9_5)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x50948 (* ?x50947 l_0_9_230)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x50945 (* ?x50944 l_0_9_229)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x50346 (* ?x48683 l_0_9_4)))
 (= (- (- (+ (+ (+ ?x50346 ?x50945) ?x50948) ?x48649) ?x48652) ?x48655) 0.0))))))))))))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x50897 (* ?x50896 l_0_9_94)))
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48690 (* ?x48654 l_0_9_53)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48688 (* ?x48651 l_0_9_52)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48686 (* ?x48648 l_0_9_8)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x50968 (* ?x50947 l_0_9_233)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x50966 (* ?x50944 l_0_9_232)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48684 (* ?x48683 l_0_9_7)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50878 (* ?x48610 l_0_9_139)))
 (let ((?x50973 (- (- (- (+ (+ (+ (+ ?x50878 ?x48684) ?x50966) ?x50968) ?x48686) ?x48688) ?x48690) ?x50897)))
 (= ?x50973 0.0)))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48710 (* ?x48654 l_0_9_57)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48708 (* ?x48651 l_0_9_56)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x50989 (* ?x50947 l_0_9_237)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x50987 (* ?x50944 l_0_9_236)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48706 (* ?x48705 l_0_9_3)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x50394 (* ?x49123 l_0_9_2)))
 (= (- (- (+ (+ (+ ?x50394 ?x48706) ?x50987) ?x50989) ?x48708) ?x48710) 0.0))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48734 (* ?x48654 l_0_9_62)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48732 (* ?x48651 l_0_9_61)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x51005 (* ?x50947 l_0_9_242)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x51003 (* ?x50944 l_0_9_241)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48725 (* ?x48354 l_0_9_3)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x50432 (* ?x48347 l_0_9_2)))
 (= (- (- (+ (+ (+ ?x50432 ?x48725) ?x51003) ?x51005) ?x48732) ?x48734) 0.0))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48753 (* ?x48654 l_0_9_68)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48751 (* ?x48651 l_0_9_67)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48749 (* ?x48748 l_0_9_3)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x38738 (* ?x50947 l_0_9_248)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x38732 (* ?x50944 l_0_9_247)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x38030 (* ?x48683 l_0_9_22)))
 (= (- (- (+ (+ (+ ?x38030 ?x38732) ?x38738) ?x48749) ?x48751) ?x48753) 0.0))))))))))))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x51019 (* ?x38790 l_0_9_95)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x38791 (* ?x38718 l_0_9_94)))
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48776 (* ?x48654 l_0_9_75)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48774 (* ?x48651 l_0_9_74)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48767 (* ?x48648 l_0_9_30)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x38696 (* ?x50947 l_0_9_255)))
 (let ((?x50948 (* ?x50947 l_0_9_230)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x38783 (* ?x50944 l_0_9_254)))
 (let ((?x50945 (* ?x50944 l_0_9_229)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x50488 (* ?x48683 l_0_9_29)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x38771 (* ?x48795 l_0_9_140)))
 (let ((?x38786 (+ (- (+ (- (* (* (- 2.0) l_0_9_137) l_0_9_139) ?x38771) ?x50488) ?x50945) ?x38783)))
 (let ((?x51020 (+ (+ (- (- (+ (+ (- ?x38786 ?x50948) ?x38696) ?x48767) ?x48774) ?x48776) ?x38791) ?x51019)))
 (= ?x51020 0.0))))))))))))))))))))))))
(assert
 (let ((?x48654 (* 2.0 l_0_9_48)))
 (let ((?x48804 (* ?x48654 l_0_9_83)))
 (let ((?x48651 (* 2.0 l_0_9_47)))
 (let ((?x48802 (* ?x48651 l_0_9_82)))
 (let ((?x48648 (* 2.0 l_0_9_3)))
 (let ((?x48800 (* ?x48648 l_0_9_38)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x51040 (* ?x50947 l_0_9_263)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x51037 (* ?x50944 l_0_9_262)))
 (let ((?x48683 (* 2.0 l_0_9_2)))
 (let ((?x48798 (* ?x48683 l_0_9_37)))
 (= (- (- (+ (+ (+ ?x48798 ?x51037) ?x51040) ?x48800) ?x48802) ?x48804) 0.0))))))))))))))
(assert
 (let ((?x48844 (* l_0_9_6 l_0_9_6)))
 (let ((?x48842 (* l_0_9_51 l_0_9_51)))
 (let ((?x48840 (* l_0_9_50 l_0_9_50)))
 (let ((?x48838 (* l_0_9_5 l_0_9_5)))
 (let ((?x48836 (* l_0_9_49 l_0_9_49)))
 (let ((?x48848 (* l_0_9_4 l_0_9_4)))
 (let ((?x51068 (* l_0_9_231 l_0_9_231)))
 (let ((?x51070 (+ (+ (+ (* l_0_9_229 l_0_9_229) (* l_0_9_230 l_0_9_230)) ?x51068) ?x48848)))
 (= (+ (- (- (+ (- ?x51070 ?x48836) ?x48838) ?x48840) ?x48842) ?x48844) 0.0))))))))))
(assert
 (let ((?x48872 (* (* 2.0 l_0_9_6) l_0_9_9)))
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48869 (* ?x48868 l_0_9_54)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48866 (* ?x48865 l_0_9_53)))
 (let ((?x48863 (* (* 2.0 l_0_9_5) l_0_9_8)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48860 (* ?x48859 l_0_9_52)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51099 (* ?x51098 l_0_9_234)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51096 (* ?x51095 l_0_9_233)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51094 (* ?x51088 l_0_9_232)))
 (let ((?x51104 (- (+ (+ (+ ?x51094 ?x51096) ?x51099) (* (* 2.0 l_0_9_4) l_0_9_7)) ?x48860)))
 (= (+ (- (- (+ ?x51104 ?x48863) ?x48866) ?x48869) ?x48872) 0.0)))))))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48904 (* ?x48868 l_0_9_58)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48902 (* ?x48865 l_0_9_57)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48900 (* ?x48859 l_0_9_56)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51134 (* ?x51098 l_0_9_238)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51132 (* ?x51095 l_0_9_237)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51130 (* ?x51088 l_0_9_236)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x48898 (* ?x48897 l_0_9_6)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x48895 (* ?x48705 l_0_9_5)))
 (let ((?x51133 (+ (+ (+ (+ (* (* 2.0 l_0_9_11) l_0_9_4) ?x48895) ?x48898) ?x51130) ?x51132)))
 (= (- (- (- (+ ?x51133 ?x51134) ?x48900) ?x48902) ?x48904) 0.0)))))))))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48932 (* ?x48868 l_0_9_63)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48930 (* ?x48865 l_0_9_62)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48928 (* ?x48859 l_0_9_61)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51155 (* ?x51098 l_0_9_243)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51153 (* ?x51095 l_0_9_242)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51151 (* ?x51088 l_0_9_241)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x48926 (* ?x48357 l_0_9_6)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x48924 (* ?x48354 l_0_9_5)))
 (let ((?x51154 (+ (+ (+ (+ (* (* 2.0 l_0_9_16) l_0_9_4) ?x48924) ?x48926) ?x51151) ?x51153)))
 (= (- (- (- (+ ?x51154 ?x51155) ?x48928) ?x48930) ?x48932) 0.0)))))))))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x48969 (* ?x48868 l_0_9_69)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x48967 (* ?x48865 l_0_9_68)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x48965 (* ?x48859 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x48963 (* ?x48962 l_0_9_6)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51166 (* ?x51098 l_0_9_249)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51164 (* ?x51095 l_0_9_248)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x48954 (* ?x48748 l_0_9_5)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x39135 (* ?x51088 l_0_9_247)))
 (let ((?x51167 (+ (+ (+ (+ (* (* 2.0 l_0_9_22) l_0_9_4) ?x39135) ?x48954) ?x51164) ?x51166)))
 (= (- (- (- (+ ?x51167 ?x48963) ?x48965) ?x48967) ?x48969) 0.0)))))))))))))))))))
(assert
 (let ((?x51207 (* l_0_9_96 l_0_9_96)))
 (let ((?x51205 (* l_0_9_95 l_0_9_95)))
 (let ((?x51203 (* l_0_9_94 l_0_9_94)))
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49007 (* ?x48868 l_0_9_76)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49005 (* ?x48865 l_0_9_75)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49003 (* ?x48859 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49001 (* ?x49000 l_0_9_6)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x48992 (* ?x48991 l_0_9_5)))
 (let ((?x51068 (* l_0_9_231 l_0_9_231)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51193 (* ?x51098 l_0_9_256)))
 (let ((?x51066 (* l_0_9_230 l_0_9_230)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51190 (* ?x51095 l_0_9_255)))
 (let ((?x51065 (* l_0_9_229 l_0_9_229)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51187 (* ?x51088 l_0_9_254)))
 (let ((?x51185 (* l_0_9_141 l_0_9_141)))
 (let ((?x51186 (- (- (* (- l_0_9_139) l_0_9_139) (* l_0_9_140 l_0_9_140)) ?x51185)))
 (let ((?x51197 (+ (- (+ (- (+ (- (+ ?x51186 ?x51187) ?x51065) ?x51190) ?x51066) ?x51193) ?x51068) (* (* 2.0 l_0_9_29) l_0_9_4))))
 (let ((?x51206 (+ (+ (- (- (- (+ (+ ?x51197 ?x48992) ?x49001) ?x49003) ?x49005) ?x49007) ?x51203) ?x51205)))
 (= (+ ?x51206 ?x51207) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x48868 (* 2.0 l_0_9_51)))
 (let ((?x49056 (* ?x48868 l_0_9_84)))
 (let ((?x48865 (* 2.0 l_0_9_50)))
 (let ((?x49054 (* ?x48865 l_0_9_83)))
 (let ((?x48859 (* 2.0 l_0_9_49)))
 (let ((?x49052 (* ?x48859 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49050 (* ?x49049 l_0_9_6)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49047 (* ?x49046 l_0_9_5)))
 (let ((?x49043 (* 2.0 l_0_9_37)))
 (let ((?x49044 (* ?x49043 l_0_9_4)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51231 (* ?x51098 l_0_9_264)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51229 (* ?x51095 l_0_9_263)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51228 (* ?x51088 l_0_9_262)))
 (let ((?x51237 (- (- (+ (+ (+ (+ (+ ?x51228 ?x51229) ?x51231) ?x49044) ?x49047) ?x49050) ?x49052) ?x49054)))
 (= (- ?x51237 ?x49056) 0.0)))))))))))))))))))))
(assert
 (let ((?x49108 (* l_0_9_9 l_0_9_9)))
 (let ((?x49106 (* l_0_9_8 l_0_9_8)))
 (let ((?x49104 (* l_0_9_7 l_0_9_7)))
 (let ((?x49102 (* l_0_9_55 l_0_9_55)))
 (let ((?x49100 (* l_0_9_54 l_0_9_54)))
 (let ((?x49098 (* l_0_9_53 l_0_9_53)))
 (let ((?x49087 (* l_0_9_52 l_0_9_52)))
 (let ((?x51257 (* l_0_9_235 l_0_9_235)))
 (let ((?x51255 (* l_0_9_234 l_0_9_234)))
 (let ((?x51253 (* l_0_9_233 l_0_9_233)))
 (let ((?x51256 (+ (+ (+ (* l_0_9_10 l_0_9_10) (* l_0_9_232 l_0_9_232)) ?x51253) ?x51255)))
 (let ((?x51264 (+ (+ (- (- (- (- (+ ?x51256 ?x51257) ?x49087) ?x49098) ?x49100) ?x49102) ?x49104) ?x49106)))
 (= (+ ?x51264 ?x49108) 0.0))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49190 (* ?x49145 l_0_9_64)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49188 (* ?x49142 l_0_9_63)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49186 (* ?x49139 l_0_9_62)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49184 (* ?x49136 l_0_9_61)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51289 (* ?x50294 l_0_9_244)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51287 (* ?x50291 l_0_9_243)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51285 (* ?x50288 l_0_9_242)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51283 (* ?x50285 l_0_9_241)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49182 (* ?x48357 l_0_9_9)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49180 (* ?x48354 l_0_9_8)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x49178 (* ?x48347 l_0_9_7)))
 (let ((?x51284 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_19) ?x49178) ?x49180) ?x49182) ?x51283)))
 (let ((?x51294 (- (- (- (- (+ (+ (+ ?x51284 ?x51285) ?x51287) ?x51289) ?x49184) ?x49186) ?x49188) ?x49190)))
 (= ?x51294 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49225 (* ?x49145 l_0_9_70)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49223 (* ?x49142 l_0_9_69)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49221 (* ?x49139 l_0_9_68)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49219 (* ?x49136 l_0_9_67)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49217 (* ?x48962 l_0_9_9)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51319 (* ?x50294 l_0_9_250)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51317 (* ?x50291 l_0_9_249)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51315 (* ?x50288 l_0_9_248)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51313 (* ?x50285 l_0_9_247)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49215 (* ?x48748 l_0_9_8)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49213 (* ?x49212 l_0_9_7)))
 (let ((?x51316 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_25) ?x49213) ?x49215) ?x51313) ?x51315)))
 (let ((?x51325 (- (- (- (- (+ (+ (+ ?x51316 ?x51317) ?x51319) ?x49217) ?x49219) ?x49221) ?x49223) ?x49225)))
 (= ?x51325 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51379 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x51376 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x51373 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49259 (* ?x49145 l_0_9_77)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49257 (* ?x49142 l_0_9_76)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49255 (* ?x49139 l_0_9_75)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49253 (* ?x49136 l_0_9_74)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x49251 (* ?x49000 l_0_9_9)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x49249 (* ?x48991 l_0_9_8)))
 (let ((?x49246 (* 2.0 l_0_9_29)))
 (let ((?x49247 (* ?x49246 l_0_9_7)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51363 (* ?x50294 l_0_9_257)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51361 (* ?x50291 l_0_9_256)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51359 (* ?x50288 l_0_9_255)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51357 (* ?x50285 l_0_9_254)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51099 (* ?x51098 l_0_9_234)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51096 (* ?x51095 l_0_9_233)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51094 (* ?x51088 l_0_9_232)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51352 (* ?x49040 l_0_9_144)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51350 (* ?x49037 l_0_9_143)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51348 (* ?x49034 l_0_9_142)))
 (let ((?x51354 (- (- (- (- (* (* 2.0 l_0_9_10) l_0_9_32) ?x51348) ?x51350) ?x51352) ?x51094)))
 (let ((?x51365 (+ (+ (+ (+ (+ (- (- ?x51354 ?x51096) ?x51099) ?x51357) ?x51359) ?x51361) ?x51363) ?x49247)))
 (let ((?x51374 (+ (- (- (- (- (+ (+ ?x51365 ?x49249) ?x49251) ?x49253) ?x49255) ?x49257) ?x49259) ?x51373)))
 (= (+ (+ ?x51374 ?x51376) ?x51379) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49145 (* 2.0 l_0_9_55)))
 (let ((?x49314 (* ?x49145 l_0_9_85)))
 (let ((?x49142 (* 2.0 l_0_9_54)))
 (let ((?x49312 (* ?x49142 l_0_9_84)))
 (let ((?x49139 (* 2.0 l_0_9_53)))
 (let ((?x49310 (* ?x49139 l_0_9_83)))
 (let ((?x49136 (* 2.0 l_0_9_52)))
 (let ((?x49308 (* ?x49136 l_0_9_82)))
 (let ((?x49049 (* 2.0 l_0_9_39)))
 (let ((?x49306 (* ?x49049 l_0_9_9)))
 (let ((?x49046 (* 2.0 l_0_9_38)))
 (let ((?x49304 (* ?x49046 l_0_9_8)))
 (let ((?x49043 (* 2.0 l_0_9_37)))
 (let ((?x49302 (* ?x49043 l_0_9_7)))
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x39185 (* ?x50294 l_0_9_265)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x39182 (* ?x50291 l_0_9_264)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x39178 (* ?x50288 l_0_9_263)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x27918 (* ?x50285 l_0_9_262)))
 (let ((?x39187 (+ (+ (+ (+ (* (* 2.0 l_0_9_10) l_0_9_40) ?x27918) ?x39178) ?x39182) ?x39185)))
 (let ((?x11199 (- (- (- (- (+ (+ (+ ?x39187 ?x49302) ?x49304) ?x49306) ?x49308) ?x49310) ?x49312) ?x49314)))
 (= ?x11199 0.0))))))))))))))))))))))))))
(assert
 (let ((?x49369 (* l_0_9_60 l_0_9_60)))
 (let ((?x49367 (* l_0_9_59 l_0_9_59)))
 (let ((?x49365 (* l_0_9_58 l_0_9_58)))
 (let ((?x49363 (* l_0_9_57 l_0_9_57)))
 (let ((?x49361 (* l_0_9_56 l_0_9_56)))
 (let ((?x51422 (* l_0_9_240 l_0_9_240)))
 (let ((?x51420 (* l_0_9_239 l_0_9_239)))
 (let ((?x51418 (* l_0_9_238 l_0_9_238)))
 (let ((?x51416 (* l_0_9_237 l_0_9_237)))
 (let ((?x51414 (* l_0_9_236 l_0_9_236)))
 (let ((?x49359 (* l_0_9_15 l_0_9_15)))
 (let ((?x49357 (* l_0_9_14 l_0_9_14)))
 (let ((?x49355 (* l_0_9_13 l_0_9_13)))
 (let ((?x51412 (+ (+ (+ (* l_0_9_11 l_0_9_11) (* l_0_9_12 l_0_9_12)) ?x49355) ?x49357)))
 (let ((?x51424 (- (+ (+ (+ (+ (+ (+ ?x51412 ?x49359) ?x51414) ?x51416) ?x51418) ?x51420) ?x51422) ?x49361)))
 (= (- (- (- (- ?x51424 ?x49363) ?x49365) ?x49367) ?x49369) 0.0)))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49408 (* ?x49407 l_0_9_65)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49405 (* ?x49404 l_0_9_64)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49402 (* ?x49401 l_0_9_63)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49399 (* ?x49398 l_0_9_62)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49396 (* ?x49395 l_0_9_61)))
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51454 (* ?x51453 l_0_9_245)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51451 (* ?x51450 l_0_9_244)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51448 (* ?x51447 l_0_9_243)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51445 (* ?x51444 l_0_9_242)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51442 (* ?x51441 l_0_9_241)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49393 (* ?x49392 l_0_9_20)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49390 (* ?x49389 l_0_9_19)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49387 (* ?x48897 l_0_9_18)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49385 (* ?x48705 l_0_9_17)))
 (let ((?x51440 (+ (+ (+ (+ (* (* 2.0 l_0_9_11) l_0_9_16) ?x49385) ?x49387) ?x49390) ?x49393)))
 (let ((?x51457 (- (- (+ (+ (+ (+ (+ ?x51440 ?x51442) ?x51445) ?x51448) ?x51451) ?x51454) ?x49396) ?x49399)))
 (= (- (- (- ?x51457 ?x49402) ?x49405) ?x49408) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49448 (* ?x49407 l_0_9_71)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49446 (* ?x49404 l_0_9_70)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49444 (* ?x49401 l_0_9_69)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49442 (* ?x49398 l_0_9_68)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49440 (* ?x49395 l_0_9_67)))
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51487 (* ?x51453 l_0_9_251)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51485 (* ?x51450 l_0_9_250)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51483 (* ?x51447 l_0_9_249)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51481 (* ?x51444 l_0_9_248)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51479 (* ?x51441 l_0_9_247)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49438 (* ?x49392 l_0_9_26)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49436 (* ?x49389 l_0_9_25)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49434 (* ?x48897 l_0_9_24)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49432 (* ?x48705 l_0_9_23)))
 (let ((?x51478 (+ (+ (+ (+ (* (* 2.0 l_0_9_11) l_0_9_22) ?x49432) ?x49434) ?x49436) ?x49438)))
 (let ((?x51490 (- (- (+ (+ (+ (+ (+ ?x51478 ?x51479) ?x51481) ?x51483) ?x51485) ?x51487) ?x49440) ?x49442)))
 (= (- (- (- ?x51490 ?x49444) ?x49446) ?x49448) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49485 (* ?x49407 l_0_9_78)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49483 (* ?x49404 l_0_9_77)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49481 (* ?x49401 l_0_9_76)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49479 (* ?x49398 l_0_9_75)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49477 (* ?x49395 l_0_9_74)))
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51526 (* ?x51453 l_0_9_258)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51524 (* ?x51450 l_0_9_257)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51522 (* ?x51447 l_0_9_256)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51520 (* ?x51444 l_0_9_255)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51518 (* ?x51441 l_0_9_254)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51134 (* ?x51098 l_0_9_238)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51132 (* ?x51095 l_0_9_237)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51130 (* ?x51088 l_0_9_236)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49475 (* ?x49392 l_0_9_33)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x37884 (* ?x49040 l_0_9_148)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x10106 (* ?x49037 l_0_9_147)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49465 (* ?x49389 l_0_9_32)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x10081 (* ?x49034 l_0_9_146)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49462 (* ?x48897 l_0_9_31)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x37416 (* ?x48705 l_0_9_30)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x37843 (* ?x49511 l_0_9_96)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x38014 (* ?x49508 l_0_9_95)))
 (let ((?x51507 (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_94) ?x38014) ?x37843) (* (* 2.0 l_0_9_11) l_0_9_29))))
 (let ((?x51514 (+ (- (- (+ (- (+ (+ ?x51507 ?x37416) ?x49462) ?x10081) ?x49465) ?x10106) ?x37884) ?x49475)))
 (let ((?x51525 (+ (+ (+ (+ (- (- (- ?x51514 ?x51130) ?x51132) ?x51134) ?x51518) ?x51520) ?x51522) ?x51524)))
 (= (- (- (- (- (- (+ ?x51525 ?x51526) ?x49477) ?x49479) ?x49481) ?x49483) ?x49485) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49407 (* 2.0 l_0_9_60)))
 (let ((?x49553 (* ?x49407 l_0_9_86)))
 (let ((?x49404 (* 2.0 l_0_9_59)))
 (let ((?x49551 (* ?x49404 l_0_9_85)))
 (let ((?x49401 (* 2.0 l_0_9_58)))
 (let ((?x49549 (* ?x49401 l_0_9_84)))
 (let ((?x49398 (* 2.0 l_0_9_57)))
 (let ((?x49547 (* ?x49398 l_0_9_83)))
 (let ((?x49395 (* 2.0 l_0_9_56)))
 (let ((?x49545 (* ?x49395 l_0_9_82)))
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x11273 (* ?x51453 l_0_9_266)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x39324 (* ?x51450 l_0_9_265)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x39389 (* ?x51447 l_0_9_264)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x39383 (* ?x51444 l_0_9_263)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x39377 (* ?x51441 l_0_9_262)))
 (let ((?x49392 (* 2.0 l_0_9_15)))
 (let ((?x49540 (* ?x49392 l_0_9_41)))
 (let ((?x49389 (* 2.0 l_0_9_14)))
 (let ((?x49526 (* ?x49389 l_0_9_40)))
 (let ((?x48897 (* 2.0 l_0_9_13)))
 (let ((?x49524 (* ?x48897 l_0_9_39)))
 (let ((?x48705 (* 2.0 l_0_9_12)))
 (let ((?x49522 (* ?x48705 l_0_9_38)))
 (let ((?x49123 (* 2.0 l_0_9_11)))
 (let ((?x49520 (* ?x49123 l_0_9_37)))
 (let ((?x28084 (+ (+ (+ (+ (+ (+ (+ ?x49520 ?x49522) ?x49524) ?x49526) ?x49540) ?x39377) ?x39383) ?x39389)))
 (let ((?x11766 (- (- (- (- (- (+ (+ ?x28084 ?x39324) ?x11273) ?x49545) ?x49547) ?x49549) ?x49551) ?x49553)))
 (= ?x11766 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49630 (* l_0_9_66 l_0_9_66)))
 (let ((?x49628 (* l_0_9_65 l_0_9_65)))
 (let ((?x49626 (* l_0_9_64 l_0_9_64)))
 (let ((?x49624 (* l_0_9_63 l_0_9_63)))
 (let ((?x49622 (* l_0_9_62 l_0_9_62)))
 (let ((?x49620 (* l_0_9_61 l_0_9_61)))
 (let ((?x51580 (* l_0_9_246 l_0_9_246)))
 (let ((?x51578 (* l_0_9_245 l_0_9_245)))
 (let ((?x51576 (* l_0_9_244 l_0_9_244)))
 (let ((?x51574 (* l_0_9_243 l_0_9_243)))
 (let ((?x51572 (* l_0_9_242 l_0_9_242)))
 (let ((?x51570 (* l_0_9_241 l_0_9_241)))
 (let ((?x49618 (* l_0_9_21 l_0_9_21)))
 (let ((?x49616 (* l_0_9_20 l_0_9_20)))
 (let ((?x49601 (* l_0_9_19 l_0_9_19)))
 (let ((?x49598 (* l_0_9_18 l_0_9_18)))
 (let ((?x51567 (+ (+ (+ (* l_0_9_16 l_0_9_16) (* l_0_9_17 l_0_9_17)) ?x49598) ?x49601)))
 (let ((?x51579 (+ (+ (+ (+ (+ (+ (+ ?x51567 ?x49616) ?x49618) ?x51570) ?x51572) ?x51574) ?x51576) ?x51578)))
 (let ((?x51587 (- (- (- (- (- (- (+ ?x51579 ?x51580) ?x49620) ?x49622) ?x49624) ?x49626) ?x49628) ?x49630)))
 (= ?x51587 0.0)))))))))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49696 (* ?x48404 l_0_9_79)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49694 (* ?x48401 l_0_9_78)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49692 (* ?x48398 l_0_9_77)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49690 (* ?x48395 l_0_9_76)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49688 (* ?x48392 l_0_9_75)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49686 (* ?x48389 l_0_9_74)))
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x51623 (* ?x48384 l_0_9_259)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x51621 (* ?x48381 l_0_9_258)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x51619 (* ?x48378 l_0_9_257)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x51617 (* ?x48375 l_0_9_256)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x51615 (* ?x48372 l_0_9_255)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x51613 (* ?x48369 l_0_9_254)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51155 (* ?x51098 l_0_9_243)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51153 (* ?x51095 l_0_9_242)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51151 (* ?x51088 l_0_9_241)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49684 (* ?x48366 l_0_9_34)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49682 (* ?x48363 l_0_9_33)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49680 (* ?x48360 l_0_9_32)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49678 (* ?x48357 l_0_9_31)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49676 (* ?x48354 l_0_9_30)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x49041 (* ?x49040 l_0_9_153)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x49038 (* ?x49037 l_0_9_152)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x49035 (* ?x49034 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49026 (* ?x48516 l_0_9_96)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49023 (* ?x48513 l_0_9_95)))
 (let ((?x51601 (- (- (+ (+ (* (* 2.0 l_0_9_106) l_0_9_94) ?x49023) ?x49026) ?x49035) ?x49038)))
 (let ((?x51606 (+ (+ (+ (- ?x51601 ?x49041) (* (* 2.0 l_0_9_16) l_0_9_29)) ?x49676) ?x49678)))
 (let ((?x51614 (+ (- (- (- (+ (+ (+ ?x51606 ?x49680) ?x49682) ?x49684) ?x51151) ?x51153) ?x51155) ?x51613)))
 (let ((?x51626 (- (- (+ (+ (+ (+ (+ ?x51614 ?x51615) ?x51617) ?x51619) ?x51621) ?x51623) ?x49686) ?x49688)))
 (= (- (- (- (- ?x51626 ?x49690) ?x49692) ?x49694) ?x49696) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48404 (* 2.0 l_0_9_66)))
 (let ((?x49768 (* ?x48404 l_0_9_87)))
 (let ((?x48401 (* 2.0 l_0_9_65)))
 (let ((?x49766 (* ?x48401 l_0_9_86)))
 (let ((?x48398 (* 2.0 l_0_9_64)))
 (let ((?x49764 (* ?x48398 l_0_9_85)))
 (let ((?x48395 (* 2.0 l_0_9_63)))
 (let ((?x49762 (* ?x48395 l_0_9_84)))
 (let ((?x48392 (* 2.0 l_0_9_62)))
 (let ((?x49760 (* ?x48392 l_0_9_83)))
 (let ((?x48389 (* 2.0 l_0_9_61)))
 (let ((?x49758 (* ?x48389 l_0_9_82)))
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x51659 (* ?x48384 l_0_9_267)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x51657 (* ?x48381 l_0_9_266)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x51655 (* ?x48378 l_0_9_265)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x51653 (* ?x48375 l_0_9_264)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x51651 (* ?x48372 l_0_9_263)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x51649 (* ?x48369 l_0_9_262)))
 (let ((?x48366 (* 2.0 l_0_9_21)))
 (let ((?x49756 (* ?x48366 l_0_9_42)))
 (let ((?x48363 (* 2.0 l_0_9_20)))
 (let ((?x49754 (* ?x48363 l_0_9_41)))
 (let ((?x48360 (* 2.0 l_0_9_19)))
 (let ((?x49752 (* ?x48360 l_0_9_40)))
 (let ((?x48357 (* 2.0 l_0_9_18)))
 (let ((?x49750 (* ?x48357 l_0_9_39)))
 (let ((?x48354 (* 2.0 l_0_9_17)))
 (let ((?x49748 (* ?x48354 l_0_9_38)))
 (let ((?x48347 (* 2.0 l_0_9_16)))
 (let ((?x49746 (* ?x48347 l_0_9_37)))
 (let ((?x51652 (+ (+ (+ (+ (+ (+ (+ ?x49746 ?x49748) ?x49750) ?x49752) ?x49754) ?x49756) ?x51649) ?x51651)))
 (let ((?x51663 (- (- (- (+ (+ (+ (+ ?x51652 ?x51653) ?x51655) ?x51657) ?x51659) ?x49758) ?x49760) ?x49762)))
 (= (- (- (- ?x51663 ?x49764) ?x49766) ?x49768) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x49837 (* l_0_9_73 l_0_9_73)))
 (let ((?x49835 (* l_0_9_72 l_0_9_72)))
 (let ((?x49833 (* l_0_9_71 l_0_9_71)))
 (let ((?x49831 (* l_0_9_70 l_0_9_70)))
 (let ((?x49829 (* l_0_9_69 l_0_9_69)))
 (let ((?x49827 (* l_0_9_68 l_0_9_68)))
 (let ((?x49825 (* l_0_9_67 l_0_9_67)))
 (let ((?x49823 (* l_0_9_28 l_0_9_28)))
 (let ((?x49821 (* l_0_9_27 l_0_9_27)))
 (let ((?x49819 (* l_0_9_26 l_0_9_26)))
 (let ((?x51710 (* l_0_9_253 l_0_9_253)))
 (let ((?x51708 (* l_0_9_252 l_0_9_252)))
 (let ((?x51706 (* l_0_9_251 l_0_9_251)))
 (let ((?x51704 (* l_0_9_250 l_0_9_250)))
 (let ((?x49803 (* l_0_9_25 l_0_9_25)))
 (let ((?x51701 (* l_0_9_249 l_0_9_249)))
 (let ((?x51699 (* l_0_9_248 l_0_9_248)))
 (let ((?x51697 (* l_0_9_247 l_0_9_247)))
 (let ((?x49800 (* l_0_9_24 l_0_9_24)))
 (let ((?x51698 (+ (+ (+ (* l_0_9_22 l_0_9_22) (* l_0_9_23 l_0_9_23)) ?x49800) ?x51697)))
 (let ((?x51711 (+ (+ (+ (+ (+ (+ (+ ?x51698 ?x51699) ?x51701) ?x49803) ?x51704) ?x51706) ?x51708) ?x51710)))
 (let ((?x51718 (- (- (- (- (+ (+ (+ ?x51711 ?x49819) ?x49821) ?x49823) ?x49825) ?x49827) ?x49829) ?x49831)))
 (= (- (- (- ?x51718 ?x49833) ?x49835) ?x49837) 0.0))))))))))))))))))))))))
(assert
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49900 (* ?x49899 l_0_9_80)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49897 (* ?x49896 l_0_9_79)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49894 (* ?x49893 l_0_9_78)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49891 (* ?x49890 l_0_9_77)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49888 (* ?x49887 l_0_9_76)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49885 (* ?x49884 l_0_9_75)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49882 (* ?x49881 l_0_9_74)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49879 (* ?x49878 l_0_9_35)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49876 (* ?x49875 l_0_9_34)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49873 (* ?x49872 l_0_9_33)))
 (let ((?x51776 (* 2.0 l_0_9_253)))
 (let ((?x51777 (* ?x51776 l_0_9_260)))
 (let ((?x51773 (* 2.0 l_0_9_252)))
 (let ((?x51774 (* ?x51773 l_0_9_259)))
 (let ((?x51770 (* 2.0 l_0_9_251)))
 (let ((?x51771 (* ?x51770 l_0_9_258)))
 (let ((?x51767 (* 2.0 l_0_9_250)))
 (let ((?x51768 (* ?x51767 l_0_9_257)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49870 (* ?x49869 l_0_9_32)))
 (let ((?x51763 (* 2.0 l_0_9_249)))
 (let ((?x51764 (* ?x51763 l_0_9_256)))
 (let ((?x51760 (* 2.0 l_0_9_248)))
 (let ((?x51761 (* ?x51760 l_0_9_255)))
 (let ((?x51757 (* 2.0 l_0_9_247)))
 (let ((?x51758 (* ?x51757 l_0_9_254)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49867 (* ?x48962 l_0_9_31)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51166 (* ?x51098 l_0_9_249)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51164 (* ?x51095 l_0_9_248)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49865 (* ?x48748 l_0_9_30)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x39135 (* ?x51088 l_0_9_247)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51748 (* ?x49040 l_0_9_159)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51746 (* ?x49037 l_0_9_158)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51744 (* ?x49034 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x51742 (* ?x51741 l_0_9_96)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x51739 (* ?x51738 l_0_9_95)))
 (let ((?x51747 (- (- (+ (+ (* (* 2.0 l_0_9_112) l_0_9_94) ?x51739) ?x51742) ?x51744) ?x51746)))
 (let ((?x51753 (+ (- (+ (- ?x51747 ?x51748) (* (* 2.0 l_0_9_22) l_0_9_29)) ?x39135) ?x49865)))
 (let ((?x51766 (+ (+ (+ (+ (+ (- (- ?x51753 ?x51164) ?x51166) ?x49867) ?x51758) ?x51761) ?x51764) ?x49870)))
 (let ((?x51781 (+ (+ (+ (+ (+ (+ (+ ?x51766 ?x51768) ?x51771) ?x51774) ?x51777) ?x49873) ?x49876) ?x49879)))
 (let ((?x51788 (- (- (- (- (- (- (- ?x51781 ?x49882) ?x49885) ?x49888) ?x49891) ?x49894) ?x49897) ?x49900)))
 (= ?x51788 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x50897 (* ?x50896 l_0_9_94)))
 (let ((?x49899 (* 2.0 l_0_9_73)))
 (let ((?x49949 (* ?x49899 l_0_9_88)))
 (let ((?x49896 (* 2.0 l_0_9_72)))
 (let ((?x49947 (* ?x49896 l_0_9_87)))
 (let ((?x49893 (* 2.0 l_0_9_71)))
 (let ((?x49945 (* ?x49893 l_0_9_86)))
 (let ((?x49890 (* 2.0 l_0_9_70)))
 (let ((?x49943 (* ?x49890 l_0_9_85)))
 (let ((?x49887 (* 2.0 l_0_9_69)))
 (let ((?x49941 (* ?x49887 l_0_9_84)))
 (let ((?x49884 (* 2.0 l_0_9_68)))
 (let ((?x49939 (* ?x49884 l_0_9_83)))
 (let ((?x49881 (* 2.0 l_0_9_67)))
 (let ((?x49937 (* ?x49881 l_0_9_82)))
 (let ((?x49878 (* 2.0 l_0_9_28)))
 (let ((?x49935 (* ?x49878 l_0_9_43)))
 (let ((?x49875 (* 2.0 l_0_9_27)))
 (let ((?x49933 (* ?x49875 l_0_9_42)))
 (let ((?x49872 (* 2.0 l_0_9_26)))
 (let ((?x49931 (* ?x49872 l_0_9_41)))
 (let ((?x51776 (* 2.0 l_0_9_253)))
 (let ((?x51880 (* ?x51776 l_0_9_268)))
 (let ((?x51773 (* 2.0 l_0_9_252)))
 (let ((?x51878 (* ?x51773 l_0_9_267)))
 (let ((?x51770 (* 2.0 l_0_9_251)))
 (let ((?x51876 (* ?x51770 l_0_9_266)))
 (let ((?x51767 (* 2.0 l_0_9_250)))
 (let ((?x51874 (* ?x51767 l_0_9_265)))
 (let ((?x49869 (* 2.0 l_0_9_25)))
 (let ((?x49929 (* ?x49869 l_0_9_40)))
 (let ((?x51763 (* 2.0 l_0_9_249)))
 (let ((?x51871 (* ?x51763 l_0_9_264)))
 (let ((?x51760 (* 2.0 l_0_9_248)))
 (let ((?x51869 (* ?x51760 l_0_9_263)))
 (let ((?x51757 (* 2.0 l_0_9_247)))
 (let ((?x51867 (* ?x51757 l_0_9_262)))
 (let ((?x48962 (* 2.0 l_0_9_24)))
 (let ((?x49927 (* ?x48962 l_0_9_39)))
 (let ((?x48748 (* 2.0 l_0_9_23)))
 (let ((?x49925 (* ?x48748 l_0_9_38)))
 (let ((?x49212 (* 2.0 l_0_9_22)))
 (let ((?x49923 (* ?x49212 l_0_9_37)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50878 (* ?x48610 l_0_9_139)))
 (let ((?x51873 (+ (+ (+ (+ (+ (+ (+ ?x50878 ?x49923) ?x49925) ?x49927) ?x51867) ?x51869) ?x51871) ?x49929)))
 (let ((?x51884 (+ (+ (+ (+ (+ (+ (+ ?x51873 ?x51874) ?x51876) ?x51878) ?x51880) ?x49931) ?x49933) ?x49935)))
 (let ((?x51891 (- (- (- (- (- (- (- ?x51884 ?x49937) ?x49939) ?x49941) ?x49943) ?x49945) ?x49947) ?x49949)))
 (= (- ?x51891 ?x50897) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50022 (* l_0_9_81 l_0_9_81)))
 (let ((?x50020 (* l_0_9_80 l_0_9_80)))
 (let ((?x50018 (* l_0_9_79 l_0_9_79)))
 (let ((?x50016 (* l_0_9_78 l_0_9_78)))
 (let ((?x50014 (* l_0_9_77 l_0_9_77)))
 (let ((?x50012 (* l_0_9_76 l_0_9_76)))
 (let ((?x50010 (* l_0_9_75 l_0_9_75)))
 (let ((?x50008 (* l_0_9_74 l_0_9_74)))
 (let ((?x50006 (* l_0_9_36 l_0_9_36)))
 (let ((?x50004 (* l_0_9_35 l_0_9_35)))
 (let ((?x50002 (* l_0_9_34 l_0_9_34)))
 (let ((?x50000 (* l_0_9_33 l_0_9_33)))
 (let ((?x49989 (* l_0_9_32 l_0_9_32)))
 (let ((?x49984 (* l_0_9_31 l_0_9_31)))
 (let ((?x37690 (* l_0_9_30 l_0_9_30)))
 (let ((?x50026 (* l_0_9_29 l_0_9_29)))
 (let ((?x51964 (* l_0_9_261 l_0_9_261)))
 (let ((?x51962 (* l_0_9_260 l_0_9_260)))
 (let ((?x51960 (* l_0_9_259 l_0_9_259)))
 (let ((?x51958 (* l_0_9_258 l_0_9_258)))
 (let ((?x51956 (* l_0_9_257 l_0_9_257)))
 (let ((?x51954 (* l_0_9_256 l_0_9_256)))
 (let ((?x51952 (* l_0_9_255 l_0_9_255)))
 (let ((?x51950 (* l_0_9_254 l_0_9_254)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51193 (* ?x51098 l_0_9_256)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51190 (* ?x51095 l_0_9_255)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51187 (* ?x51088 l_0_9_254)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51945 (* ?x49040 l_0_9_166)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51943 (* ?x49037 l_0_9_165)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51941 (* ?x49034 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x51939 (* ?x51938 l_0_9_96)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x51936 (* ?x51935 l_0_9_95)))
 (let ((?x51944 (- (- (+ (+ (* (* 2.0 l_0_9_119) l_0_9_94) ?x51936) ?x51939) ?x51941) ?x51943)))
 (let ((?x51955 (+ (+ (+ (- (- (- (- ?x51944 ?x51945) ?x51187) ?x51190) ?x51193) ?x51950) ?x51952) ?x51954)))
 (let ((?x51967 (+ (+ (+ (+ (+ (+ (+ ?x51955 ?x51956) ?x51958) ?x51960) ?x51962) ?x51964) ?x50026) ?x37690)))
 (let ((?x51974 (- (+ (+ (+ (+ (+ (+ ?x51967 ?x49984) ?x49989) ?x50000) ?x50002) ?x50004) ?x50006) ?x50008)))
 (let ((?x51981 (- (- (- (- (- (- (- ?x51974 ?x50010) ?x50012) ?x50014) ?x50016) ?x50018) ?x50020) ?x50022)))
 (= ?x51981 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50113 (* (* 2.0 l_0_9_81) l_0_9_89)))
 (let ((?x50110 (* (* 2.0 l_0_9_80) l_0_9_88)))
 (let ((?x50107 (* (* 2.0 l_0_9_79) l_0_9_87)))
 (let ((?x50104 (* (* 2.0 l_0_9_78) l_0_9_86)))
 (let ((?x50101 (* (* 2.0 l_0_9_77) l_0_9_85)))
 (let ((?x50098 (* (* 2.0 l_0_9_76) l_0_9_84)))
 (let ((?x50095 (* (* 2.0 l_0_9_75) l_0_9_83)))
 (let ((?x50092 (* (* 2.0 l_0_9_74) l_0_9_82)))
 (let ((?x50089 (* (* 2.0 l_0_9_36) l_0_9_44)))
 (let ((?x50086 (* (* 2.0 l_0_9_35) l_0_9_43)))
 (let ((?x50083 (* (* 2.0 l_0_9_34) l_0_9_42)))
 (let ((?x50080 (* (* 2.0 l_0_9_33) l_0_9_41)))
 (let ((?x50077 (* (* 2.0 l_0_9_32) l_0_9_40)))
 (let ((?x49000 (* 2.0 l_0_9_31)))
 (let ((?x50074 (* ?x49000 l_0_9_39)))
 (let ((?x48991 (* 2.0 l_0_9_30)))
 (let ((?x50072 (* ?x48991 l_0_9_38)))
 (let ((?x49246 (* 2.0 l_0_9_29)))
 (let ((?x50070 (* ?x49246 l_0_9_37)))
 (let ((?x52061 (* (* 2.0 l_0_9_261) l_0_9_269)))
 (let ((?x52058 (* (* 2.0 l_0_9_260) l_0_9_268)))
 (let ((?x52055 (* (* 2.0 l_0_9_259) l_0_9_267)))
 (let ((?x52052 (* (* 2.0 l_0_9_258) l_0_9_266)))
 (let ((?x52049 (* (* 2.0 l_0_9_257) l_0_9_265)))
 (let ((?x52046 (* (* 2.0 l_0_9_256) l_0_9_264)))
 (let ((?x52043 (* (* 2.0 l_0_9_255) l_0_9_263)))
 (let ((?x52040 (* (* 2.0 l_0_9_254) l_0_9_262)))
 (let ((?x51098 (* 2.0 l_0_9_231)))
 (let ((?x51231 (* ?x51098 l_0_9_264)))
 (let ((?x51095 (* 2.0 l_0_9_230)))
 (let ((?x51229 (* ?x51095 l_0_9_263)))
 (let ((?x51088 (* 2.0 l_0_9_229)))
 (let ((?x51228 (* ?x51088 l_0_9_262)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x52034 (* ?x49040 l_0_9_174)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x52032 (* ?x49037 l_0_9_173)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x52030 (* ?x49034 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52028 (* ?x52027 l_0_9_96)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52025 (* ?x52024 l_0_9_95)))
 (let ((?x52033 (- (- (+ (+ (* (* 2.0 l_0_9_127) l_0_9_94) ?x52025) ?x52028) ?x52030) ?x52032)))
 (let ((?x52047 (+ (+ (+ (- (- (- (- ?x52033 ?x52034) ?x51228) ?x51229) ?x51231) ?x52040) ?x52043) ?x52046)))
 (let ((?x52064 (+ (+ (+ (+ (+ (+ (+ ?x52047 ?x52049) ?x52052) ?x52055) ?x52058) ?x52061) ?x50070) ?x50072)))
 (let ((?x52071 (- (+ (+ (+ (+ (+ (+ ?x52064 ?x50074) ?x50077) ?x50080) ?x50083) ?x50086) ?x50089) ?x50092)))
 (let ((?x52078 (- (- (- (- (- (- (- ?x52071 ?x50095) ?x50098) ?x50101) ?x50104) ?x50107) ?x50110) ?x50113)))
 (= ?x52078 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x50226 (* l_0_9_90 l_0_9_90)))
 (let ((?x50224 (* l_0_9_89 l_0_9_89)))
 (let ((?x50222 (* l_0_9_88 l_0_9_88)))
 (let ((?x50220 (* l_0_9_87 l_0_9_87)))
 (let ((?x50218 (* l_0_9_86 l_0_9_86)))
 (let ((?x50216 (* l_0_9_85 l_0_9_85)))
 (let ((?x50214 (* l_0_9_84 l_0_9_84)))
 (let ((?x50212 (* l_0_9_83 l_0_9_83)))
 (let ((?x50210 (* l_0_9_82 l_0_9_82)))
 (let ((?x50208 (* l_0_9_45 l_0_9_45)))
 (let ((?x50206 (* l_0_9_44 l_0_9_44)))
 (let ((?x50204 (* l_0_9_43 l_0_9_43)))
 (let ((?x50202 (* l_0_9_42 l_0_9_42)))
 (let ((?x50200 (* l_0_9_41 l_0_9_41)))
 (let ((?x50198 (* l_0_9_40 l_0_9_40)))
 (let ((?x50196 (* l_0_9_39 l_0_9_39)))
 (let ((?x50194 (* l_0_9_38 l_0_9_38)))
 (let ((?x50192 (* l_0_9_37 l_0_9_37)))
 (let ((?x52168 (* l_0_9_270 l_0_9_270)))
 (let ((?x52166 (* l_0_9_269 l_0_9_269)))
 (let ((?x52164 (* l_0_9_268 l_0_9_268)))
 (let ((?x52162 (* l_0_9_267 l_0_9_267)))
 (let ((?x52160 (* l_0_9_266 l_0_9_266)))
 (let ((?x52158 (* l_0_9_265 l_0_9_265)))
 (let ((?x52156 (* l_0_9_264 l_0_9_264)))
 (let ((?x52159 (+ (+ (+ (* l_0_9_262 l_0_9_262) (* l_0_9_263 l_0_9_263)) ?x52156) ?x52158)))
 (let ((?x52171 (+ (+ (+ (+ (+ (+ (+ ?x52159 ?x52160) ?x52162) ?x52164) ?x52166) ?x52168) ?x50192) ?x50194)))
 (let ((?x52178 (+ (+ (+ (+ (+ (+ (+ ?x52171 ?x50196) ?x50198) ?x50200) ?x50202) ?x50204) ?x50206) ?x50208)))
 (let ((?x52185 (- (- (- (- (- (- (- ?x52178 ?x50210) ?x50212) ?x50214) ?x50216) ?x50218) ?x50220) ?x50222)))
 (= (- (- ?x52185 ?x50224) ?x50226) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x52210 (* l_0_9_91 l_0_9_91)))
 (let ((?x52205 (- (- (* l_0_9_136 l_0_9_136) (* (* 2.0 l_0_9_182) l_0_9_187)) (* (* 2.0 l_0_9_183) l_0_9_188))))
 (let ((?x52209 (- (- ?x52205 (* (* 2.0 l_0_9_272) l_0_9_277)) (* (* 2.0 l_0_9_273) l_0_9_278))))
 (= (- ?x52209 ?x52210) 0.0)))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52231 (* ?x50896 l_0_9_92)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_137) ?x52231) 0.0))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52244 (* ?x50896 l_0_9_97)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_142) ?x52244) 0.0))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x48611 (* ?x48610 l_0_9_151)))
 (= (+ (* (* (- 2.0) l_0_9_106) l_0_9_91) ?x48611) 0.0))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52264 (* ?x48610 l_0_9_157)))
 (= (+ (* (* (- 2.0) l_0_9_112) l_0_9_91) ?x52264) 0.0))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x52285 (* ?x38790 l_0_9_98)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x52283 (* ?x38718 l_0_9_97)))
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x50968 (* ?x50947 l_0_9_233)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x50966 (* ?x50944 l_0_9_232)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52279 (* ?x48795 l_0_9_143)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52277 (* ?x48792 l_0_9_142)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52271 (* ?x48610 l_0_9_164)))
 (let ((?x52281 (- (- (- (+ (* (* (- 2.0) l_0_9_119) l_0_9_91) ?x52271) ?x52277) ?x52279) ?x50966)))
 (= (+ (+ (- ?x52281 ?x50968) ?x52283) ?x52285) 0.0)))))))))))))))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x40871 (* ?x48610 l_0_9_172)))
 (= (+ (* (* (- 2.0) l_0_9_127) l_0_9_91) ?x40871) 0.0))))
(assert
 (let ((?x52322 (* l_0_9_93 l_0_9_93)))
 (let ((?x52320 (* l_0_9_92 l_0_9_92)))
 (let ((?x52314 (* l_0_9_138 l_0_9_138)))
 (let ((?x52312 (* l_0_9_137 l_0_9_137)))
 (let ((?x52315 (+ ?x52312 ?x52314)))
 (= (- (- ?x52315 ?x52320) ?x52322) 0.0)))))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x51019 (* ?x38790 l_0_9_95)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x38791 (* ?x38718 l_0_9_94)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x38771 (* ?x48795 l_0_9_140)))
 (= (- (- (+ (* (* 2.0 l_0_9_137) l_0_9_139) ?x38771) ?x38791) ?x51019) 0.0))))))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x52285 (* ?x38790 l_0_9_98)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x52283 (* ?x38718 l_0_9_97)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52279 (* ?x48795 l_0_9_143)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52277 (* ?x48792 l_0_9_142)))
 (= (- (- (+ ?x52277 ?x52279) ?x52283) ?x52285) 0.0))))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x48796 (* ?x48795 l_0_9_152)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x48793 (* ?x48792 l_0_9_151)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48790 (* ?x48513 l_0_9_93)))
 (let ((?x48797 (+ (+ (- (* (* (- 2.0) l_0_9_106) l_0_9_92) ?x48790) ?x48793) ?x48796)))
 (= ?x48797 0.0)))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52373 (* ?x48795 l_0_9_158)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52371 (* ?x48792 l_0_9_157)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52369 (* ?x51738 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_112) l_0_9_92) ?x52369) ?x52371) ?x52373) 0.0))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52392 (* ?x48795 l_0_9_165)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52390 (* ?x48792 l_0_9_164)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52383 (* ?x51935 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_119) l_0_9_92) ?x52383) ?x52390) ?x52392) 0.0))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52412 (* ?x48795 l_0_9_173)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52410 (* ?x48792 l_0_9_172)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52408 (* ?x52024 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_127) l_0_9_92) ?x52408) ?x52410) ?x52412) 0.0))))))))
(assert
 (let ((?x51207 (* l_0_9_96 l_0_9_96)))
 (let ((?x51205 (* l_0_9_95 l_0_9_95)))
 (let ((?x51203 (* l_0_9_94 l_0_9_94)))
 (let ((?x51185 (* l_0_9_141 l_0_9_141)))
 (let ((?x52423 (- (+ (+ (* l_0_9_139 l_0_9_139) (* l_0_9_140 l_0_9_140)) ?x51185) ?x51203)))
 (= (- (- ?x52423 ?x51205) ?x51207) 0.0)))))))
(assert
 (let ((?x51379 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x51376 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x51373 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51352 (* ?x49040 l_0_9_144)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51350 (* ?x49037 l_0_9_143)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51348 (* ?x49034 l_0_9_142)))
 (= (- (- (- (+ (+ ?x51348 ?x51350) ?x51352) ?x51373) ?x51376) ?x51379) 0.0)))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x49041 (* ?x49040 l_0_9_153)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x49038 (* ?x49037 l_0_9_152)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x49035 (* ?x49034 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49026 (* ?x48516 l_0_9_96)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49023 (* ?x48513 l_0_9_95)))
 (let ((?x49039 (+ (+ (- (- (* (* (- 2.0) l_0_9_106) l_0_9_94) ?x49023) ?x49026) ?x49035) ?x49038)))
 (let ((?x49042 (+ ?x49039 ?x49041)))
 (= ?x49042 0.0))))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51748 (* ?x49040 l_0_9_159)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51746 (* ?x49037 l_0_9_158)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51744 (* ?x49034 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x51742 (* ?x51741 l_0_9_96)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x51739 (* ?x51738 l_0_9_95)))
 (let ((?x52463 (+ (+ (- (- (* (* (- 2.0) l_0_9_112) l_0_9_94) ?x51739) ?x51742) ?x51744) ?x51746)))
 (= (+ ?x52463 ?x51748) 0.0)))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51945 (* ?x49040 l_0_9_166)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51943 (* ?x49037 l_0_9_165)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51941 (* ?x49034 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x51939 (* ?x51938 l_0_9_96)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x51936 (* ?x51935 l_0_9_95)))
 (let ((?x52473 (+ (+ (- (- (* (* (- 2.0) l_0_9_119) l_0_9_94) ?x51936) ?x51939) ?x51941) ?x51943)))
 (= (+ ?x52473 ?x51945) 0.0)))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x52034 (* ?x49040 l_0_9_174)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x52032 (* ?x49037 l_0_9_173)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x52030 (* ?x49034 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52028 (* ?x52027 l_0_9_96)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52025 (* ?x52024 l_0_9_95)))
 (let ((?x52485 (+ (+ (- (- (* (* (- 2.0) l_0_9_127) l_0_9_94) ?x52025) ?x52028) ?x52030) ?x52032)))
 (= (+ ?x52485 ?x52034) 0.0)))))))))))))
(assert
 (let ((?x52507 (* l_0_9_99 l_0_9_99)))
 (let ((?x52505 (* l_0_9_98 l_0_9_98)))
 (let ((?x52503 (* l_0_9_97 l_0_9_97)))
 (let ((?x52501 (* l_0_9_145 l_0_9_145)))
 (let ((?x52499 (* l_0_9_144 l_0_9_144)))
 (let ((?x52497 (* l_0_9_143 l_0_9_143)))
 (let ((?x52498 (+ (+ (* (- l_0_9_100) l_0_9_100) (* l_0_9_142 l_0_9_142)) ?x52497)))
 (= (- (- (- (+ (+ ?x52498 ?x52499) ?x52501) ?x52503) ?x52505) ?x52507) 0.0)))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x49300 (* ?x49299 l_0_9_154)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x49297 (* ?x49296 l_0_9_153)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x49294 (* ?x49293 l_0_9_152)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x49291 (* ?x49290 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49288 (* ?x48516 l_0_9_99)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49286 (* ?x48513 l_0_9_98)))
 (let ((?x48506 (* 2.0 l_0_9_106)))
 (let ((?x49277 (* ?x48506 l_0_9_97)))
 (let ((?x52528 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_109) ?x49277) ?x49286) ?x49288) ?x49291)))
 (= (+ (+ (+ ?x52528 ?x49294) ?x49297) ?x49300) 0.0)))))))))))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52545 (* ?x49299 l_0_9_160)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52543 (* ?x49296 l_0_9_159)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52541 (* ?x49293 l_0_9_158)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52539 (* ?x49290 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52537 (* ?x51741 l_0_9_99)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x41424 (* ?x51738 l_0_9_98)))
 (let ((?x51736 (* 2.0 l_0_9_112)))
 (let ((?x41427 (* ?x51736 l_0_9_97)))
 (let ((?x52540 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_115) ?x41427) ?x41424) ?x52537) ?x52539)))
 (= (+ (+ (+ ?x52540 ?x52541) ?x52543) ?x52545) 0.0)))))))))))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52583 (* ?x49299 l_0_9_167)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52581 (* ?x49296 l_0_9_166)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52579 (* ?x49293 l_0_9_165)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52577 (* ?x49290 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52575 (* ?x51938 l_0_9_99)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52566 (* ?x51935 l_0_9_98)))
 (let ((?x51933 (* 2.0 l_0_9_119)))
 (let ((?x52562 (* ?x51933 l_0_9_97)))
 (let ((?x52578 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_122) ?x52562) ?x52566) ?x52575) ?x52577)))
 (= (+ (+ (+ ?x52578 ?x52579) ?x52581) ?x52583) 0.0)))))))))))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52618 (* ?x49299 l_0_9_175)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52616 (* ?x49296 l_0_9_174)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52614 (* ?x49293 l_0_9_173)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52612 (* ?x49290 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52610 (* ?x52027 l_0_9_99)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52608 (* ?x52024 l_0_9_98)))
 (let ((?x52022 (* 2.0 l_0_9_127)))
 (let ((?x52606 (* ?x52022 l_0_9_97)))
 (let ((?x52613 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_130) ?x52606) ?x52608) ?x52610) ?x52612)))
 (= (+ (+ (+ ?x52613 ?x52614) ?x52616) ?x52618) 0.0)))))))))))))))))
(assert
 (let ((?x49744 (* l_0_9_156 l_0_9_156)))
 (let ((?x49742 (* l_0_9_155 l_0_9_155)))
 (let ((?x49740 (* l_0_9_154 l_0_9_154)))
 (let ((?x49738 (* l_0_9_153 l_0_9_153)))
 (let ((?x49736 (* l_0_9_152 l_0_9_152)))
 (let ((?x49734 (* l_0_9_151 l_0_9_151)))
 (let ((?x49732 (* l_0_9_111 l_0_9_111)))
 (let ((?x49730 (* l_0_9_110 l_0_9_110)))
 (let ((?x49728 (* l_0_9_109 l_0_9_109)))
 (let ((?x49726 (* l_0_9_108 l_0_9_108)))
 (let ((?x49727 (- (- (* (- l_0_9_106) l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x49726)))
 (let ((?x49741 (+ (+ (+ (+ (- (- (- ?x49727 ?x49728) ?x49730) ?x49732) ?x49734) ?x49736) ?x49738) ?x49740)))
 (let ((?x49745 (+ (+ ?x49741 ?x49742) ?x49744)))
 (= ?x49745 0.0)))))))))))))))
(assert
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50068 (* ?x48543 l_0_9_169)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50066 (* ?x48540 l_0_9_168)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50064 (* ?x48537 l_0_9_167)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50062 (* ?x48534 l_0_9_166)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50060 (* ?x48531 l_0_9_165)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50058 (* ?x48528 l_0_9_164)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50056 (* ?x48525 l_0_9_124)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50054 (* ?x48522 l_0_9_123)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50052 (* ?x48519 l_0_9_122)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50050 (* ?x48516 l_0_9_121)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50048 (* ?x48513 l_0_9_120)))
 (let ((?x50055 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_119) ?x50048) ?x50050) ?x50052) ?x50054)))
 (let ((?x50069 (+ (+ (+ (+ (+ (+ (- ?x50055 ?x50056) ?x50058) ?x50060) ?x50062) ?x50064) ?x50066) ?x50068)))
 (= ?x50069 0.0))))))))))))))))))))))))))
(assert
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50190 (* ?x48543 l_0_9_177)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50188 (* ?x48540 l_0_9_176)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50186 (* ?x48537 l_0_9_175)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50184 (* ?x48534 l_0_9_174)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50182 (* ?x48531 l_0_9_173)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50180 (* ?x48528 l_0_9_172)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50178 (* ?x48525 l_0_9_132)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50176 (* ?x48522 l_0_9_131)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50174 (* ?x48519 l_0_9_130)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50172 (* ?x48516 l_0_9_129)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50170 (* ?x48513 l_0_9_128)))
 (let ((?x50177 (- (- (- (- (* (* (- 2.0) l_0_9_106) l_0_9_127) ?x50170) ?x50172) ?x50174) ?x50176)))
 (let ((?x50191 (+ (+ (+ (+ (+ (+ (- ?x50177 ?x50178) ?x50180) ?x50182) ?x50184) ?x50186) ?x50188) ?x50190)))
 (= ?x50191 0.0))))))))))))))))))))))))))
(assert
 (let ((?x52670 (* l_0_9_163 l_0_9_163)))
 (let ((?x52668 (* l_0_9_162 l_0_9_162)))
 (let ((?x52666 (* l_0_9_161 l_0_9_161)))
 (let ((?x52664 (* l_0_9_160 l_0_9_160)))
 (let ((?x52662 (* l_0_9_159 l_0_9_159)))
 (let ((?x52660 (* l_0_9_158 l_0_9_158)))
 (let ((?x52658 (* l_0_9_157 l_0_9_157)))
 (let ((?x52656 (* l_0_9_118 l_0_9_118)))
 (let ((?x52654 (* l_0_9_117 l_0_9_117)))
 (let ((?x52652 (* l_0_9_116 l_0_9_116)))
 (let ((?x52650 (* l_0_9_115 l_0_9_115)))
 (let ((?x52648 (* l_0_9_114 l_0_9_114)))
 (let ((?x52649 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52648)))
 (let ((?x52663 (+ (+ (+ (- (- (- (- ?x52649 ?x52650) ?x52652) ?x52654) ?x52656) ?x52658) ?x52660) ?x52662)))
 (= (+ (+ (+ (+ ?x52663 ?x52664) ?x52666) ?x52668) ?x52670) 0.0))))))))))))))))
(assert
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52736 (* ?x52735 l_0_9_170)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52733 (* ?x52732 l_0_9_169)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52730 (* ?x52729 l_0_9_168)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52727 (* ?x52726 l_0_9_167)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52724 (* ?x52723 l_0_9_166)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52721 (* ?x52720 l_0_9_165)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52718 (* ?x52717 l_0_9_164)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52715 (* ?x52714 l_0_9_125)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52712 (* ?x52711 l_0_9_124)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52709 (* ?x52708 l_0_9_123)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52706 (* ?x52705 l_0_9_122)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52703 (* ?x51741 l_0_9_121)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52701 (* ?x51738 l_0_9_120)))
 (let ((?x52710 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_119) ?x52701) ?x52703) ?x52706) ?x52709)))
 (let ((?x52731 (+ (+ (+ (+ (+ (- (- ?x52710 ?x52712) ?x52715) ?x52718) ?x52721) ?x52724) ?x52727) ?x52730)))
 (= (+ (+ ?x52731 ?x52733) ?x52736) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x52285 (* ?x38790 l_0_9_98)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x52283 (* ?x38718 l_0_9_97)))
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52806 (* ?x52735 l_0_9_178)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52804 (* ?x52732 l_0_9_177)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52802 (* ?x52729 l_0_9_176)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52800 (* ?x52726 l_0_9_175)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52798 (* ?x52723 l_0_9_174)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52796 (* ?x52720 l_0_9_173)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52794 (* ?x52717 l_0_9_172)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52279 (* ?x48795 l_0_9_143)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52277 (* ?x48792 l_0_9_142)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52790 (* ?x52714 l_0_9_133)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52788 (* ?x52711 l_0_9_132)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52776 (* ?x52708 l_0_9_131)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52773 (* ?x52705 l_0_9_130)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52769 (* ?x51741 l_0_9_129)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52765 (* ?x51738 l_0_9_128)))
 (let ((?x52787 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_127) ?x52765) ?x52769) ?x52773) ?x52776)))
 (let ((?x52791 (- (- ?x52787 ?x52788) ?x52790)))
 (let ((?x52803 (+ (+ (+ (+ (+ (+ (+ ?x52791 ?x52277) ?x52279) ?x52794) ?x52796) ?x52798) ?x52800) ?x52802)))
 (= (- (- (+ (+ ?x52803 ?x52804) ?x52806) ?x52283) ?x52285) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x52853 (* l_0_9_171 l_0_9_171)))
 (let ((?x52851 (* l_0_9_170 l_0_9_170)))
 (let ((?x52849 (* l_0_9_169 l_0_9_169)))
 (let ((?x52847 (* l_0_9_168 l_0_9_168)))
 (let ((?x52845 (* l_0_9_167 l_0_9_167)))
 (let ((?x52843 (* l_0_9_166 l_0_9_166)))
 (let ((?x52841 (* l_0_9_165 l_0_9_165)))
 (let ((?x52839 (* l_0_9_164 l_0_9_164)))
 (let ((?x52837 (* l_0_9_126 l_0_9_126)))
 (let ((?x52835 (* l_0_9_125 l_0_9_125)))
 (let ((?x52833 (* l_0_9_124 l_0_9_124)))
 (let ((?x52831 (* l_0_9_123 l_0_9_123)))
 (let ((?x52829 (* l_0_9_122 l_0_9_122)))
 (let ((?x52827 (* l_0_9_121 l_0_9_121)))
 (let ((?x52828 (- (- (* (- l_0_9_119) l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52827)))
 (let ((?x52842 (+ (+ (- (- (- (- (- ?x52828 ?x52829) ?x52831) ?x52833) ?x52835) ?x52837) ?x52839) ?x52841)))
 (= (+ (+ (+ (+ (+ (+ ?x52842 ?x52843) ?x52845) ?x52847) ?x52849) ?x52851) ?x52853) 0.0))))))))))))))))))
(assert
 (let ((?x52919 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52916 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52913 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52910 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52907 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52904 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52901 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52898 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52895 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52892 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52889 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52886 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52883 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52880 (* ?x51938 l_0_9_129)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52878 (* ?x51935 l_0_9_128)))
 (let ((?x52887 (- (- (- (- (* (* (- 2.0) l_0_9_119) l_0_9_127) ?x52878) ?x52880) ?x52883) ?x52886)))
 (let ((?x52908 (+ (+ (+ (+ (- (- (- ?x52887 ?x52889) ?x52892) ?x52895) ?x52898) ?x52901) ?x52904) ?x52907)))
 (= (+ (+ (+ (+ ?x52908 ?x52910) ?x52913) ?x52916) ?x52919) 0.0)))))))))))))))))))))
(assert
 (let ((?x53000 (* l_0_9_180 l_0_9_180)))
 (let ((?x52998 (* l_0_9_179 l_0_9_179)))
 (let ((?x52996 (* l_0_9_178 l_0_9_178)))
 (let ((?x52994 (* l_0_9_177 l_0_9_177)))
 (let ((?x52992 (* l_0_9_176 l_0_9_176)))
 (let ((?x52990 (* l_0_9_175 l_0_9_175)))
 (let ((?x52988 (* l_0_9_174 l_0_9_174)))
 (let ((?x52986 (* l_0_9_173 l_0_9_173)))
 (let ((?x52984 (* l_0_9_172 l_0_9_172)))
 (let ((?x52982 (* l_0_9_135 l_0_9_135)))
 (let ((?x52980 (* l_0_9_134 l_0_9_134)))
 (let ((?x52978 (* l_0_9_133 l_0_9_133)))
 (let ((?x52976 (* l_0_9_132 l_0_9_132)))
 (let ((?x52963 (* l_0_9_131 l_0_9_131)))
 (let ((?x52960 (* l_0_9_130 l_0_9_130)))
 (let ((?x52956 (* l_0_9_129 l_0_9_129)))
 (let ((?x52958 (- (- (* (- l_0_9_127) l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52956)))
 (let ((?x52985 (+ (- (- (- (- (- (- ?x52958 ?x52960) ?x52963) ?x52976) ?x52978) ?x52980) ?x52982) ?x52984)))
 (let ((?x52999 (+ (+ (+ (+ (+ (+ (+ ?x52985 ?x52986) ?x52988) ?x52990) ?x52992) ?x52994) ?x52996) ?x52998)))
 (= (+ ?x52999 ?x53000) 0.0)))))))))))))))))))))
(assert
 (let ((?x52210 (* l_0_9_91 l_0_9_91)))
 (let ((?x53042 (- (- (* l_0_9_136 l_0_9_136) (* (* 2.0 l_0_9_202) l_0_9_217)) (* (* 2.0 l_0_9_203) l_0_9_218))))
 (let ((?x53048 (- (- ?x53042 (* (* 2.0 l_0_9_204) l_0_9_219)) (* (* 2.0 l_0_9_205) l_0_9_220))))
 (let ((?x53054 (- (- ?x53048 (* (* 2.0 l_0_9_206) l_0_9_221)) (* (* 2.0 l_0_9_207) l_0_9_222))))
 (let ((?x53060 (- (- ?x53054 (* (* 2.0 l_0_9_208) l_0_9_223)) (* (* 2.0 l_0_9_292) l_0_9_307))))
 (let ((?x53066 (- (- ?x53060 (* (* 2.0 l_0_9_293) l_0_9_308)) (* (* 2.0 l_0_9_294) l_0_9_309))))
 (let ((?x53072 (- (- ?x53066 (* (* 2.0 l_0_9_295) l_0_9_310)) (* (* 2.0 l_0_9_296) l_0_9_311))))
 (let ((?x53078 (- (- ?x53072 (* (* 2.0 l_0_9_297) l_0_9_312)) (* (* 2.0 l_0_9_298) l_0_9_313))))
 (= (- ?x53078 ?x52210) 0.0))))))))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52231 (* ?x50896 l_0_9_92)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_137) ?x52231) 0.0))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52244 (* ?x50896 l_0_9_97)))
 (= (- (* (* 2.0 l_0_9_136) l_0_9_142) ?x52244) 0.0))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50269 (* ?x48610 l_0_9_146)))
 (= (+ (* (* (- 2.0) l_0_9_101) l_0_9_91) ?x50269) 0.0))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52264 (* ?x48610 l_0_9_157)))
 (= (+ (* (* (- 2.0) l_0_9_112) l_0_9_91) ?x52264) 0.0))))
(assert
 (let ((?x51776 (* 2.0 l_0_9_253)))
 (let ((?x51880 (* ?x51776 l_0_9_268)))
 (let ((?x51773 (* 2.0 l_0_9_252)))
 (let ((?x51878 (* ?x51773 l_0_9_267)))
 (let ((?x51770 (* 2.0 l_0_9_251)))
 (let ((?x51876 (* ?x51770 l_0_9_266)))
 (let ((?x51767 (* 2.0 l_0_9_250)))
 (let ((?x51874 (* ?x51767 l_0_9_265)))
 (let ((?x51763 (* 2.0 l_0_9_249)))
 (let ((?x51871 (* ?x51763 l_0_9_264)))
 (let ((?x51760 (* 2.0 l_0_9_248)))
 (let ((?x51869 (* ?x51760 l_0_9_263)))
 (let ((?x51757 (* 2.0 l_0_9_247)))
 (let ((?x51867 (* ?x51757 l_0_9_262)))
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52806 (* ?x52735 l_0_9_178)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52804 (* ?x52732 l_0_9_177)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52802 (* ?x52729 l_0_9_176)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52800 (* ?x52726 l_0_9_175)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52798 (* ?x52723 l_0_9_174)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52796 (* ?x52720 l_0_9_173)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52794 (* ?x52717 l_0_9_172)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52271 (* ?x48610 l_0_9_164)))
 (let ((?x51933 (* 2.0 l_0_9_119)))
 (let ((?x53149 (* ?x51933 l_0_9_91)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52790 (* ?x52714 l_0_9_133)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52788 (* ?x52711 l_0_9_132)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52776 (* ?x52708 l_0_9_131)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52773 (* ?x52705 l_0_9_130)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52769 (* ?x51741 l_0_9_129)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52765 (* ?x51738 l_0_9_128)))
 (let ((?x53146 (+ (+ (+ (+ (* (* 2.0 l_0_9_112) l_0_9_127) ?x52765) ?x52769) ?x52773) ?x52776)))
 (let ((?x53154 (- (- (- (+ (- (+ (+ ?x53146 ?x52788) ?x52790) ?x53149) ?x52271) ?x52794) ?x52796) ?x52798)))
 (let ((?x53161 (- (- (- (- (- (- (- ?x53154 ?x52800) ?x52802) ?x52804) ?x52806) ?x51867) ?x51869) ?x51871)))
 (= (- (- (- (- ?x53161 ?x51874) ?x51876) ?x51878) ?x51880) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x40871 (* ?x48610 l_0_9_172)))
 (= (+ (* (* (- 2.0) l_0_9_127) l_0_9_91) ?x40871) 0.0))))
(assert
 (let ((?x52322 (* l_0_9_93 l_0_9_93)))
 (let ((?x52320 (* l_0_9_92 l_0_9_92)))
 (let ((?x52314 (* l_0_9_138 l_0_9_138)))
 (let ((?x52312 (* l_0_9_137 l_0_9_137)))
 (let ((?x52315 (+ ?x52312 ?x52314)))
 (= (- (- ?x52315 ?x52320) ?x52322) 0.0)))))))
(assert
 (let ((?x38790 (* 2.0 l_0_9_93)))
 (let ((?x51019 (* ?x38790 l_0_9_95)))
 (let ((?x38718 (* 2.0 l_0_9_92)))
 (let ((?x38791 (* ?x38718 l_0_9_94)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x38771 (* ?x48795 l_0_9_140)))
 (= (- (- (+ (* (* 2.0 l_0_9_137) l_0_9_139) ?x38771) ?x38791) ?x51019) 0.0))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x37939 (* ?x48795 l_0_9_147)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x26576 (* ?x48792 l_0_9_146)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x10139 (* ?x49508 l_0_9_93)))
 (let ((?x37943 (+ (+ (- (* (* (- 2.0) l_0_9_101) l_0_9_92) ?x10139) ?x26576) ?x37939)))
 (= ?x37943 0.0)))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52373 (* ?x48795 l_0_9_158)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52371 (* ?x48792 l_0_9_157)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52369 (* ?x51738 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_112) l_0_9_92) ?x52369) ?x52371) ?x52373) 0.0))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52392 (* ?x48795 l_0_9_165)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52390 (* ?x48792 l_0_9_164)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52383 (* ?x51935 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_119) l_0_9_92) ?x52383) ?x52390) ?x52392) 0.0))))))))
(assert
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52412 (* ?x48795 l_0_9_173)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52410 (* ?x48792 l_0_9_172)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52408 (* ?x52024 l_0_9_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_9_127) l_0_9_92) ?x52408) ?x52410) ?x52412) 0.0))))))))
(assert
 (let ((?x51207 (* l_0_9_96 l_0_9_96)))
 (let ((?x51205 (* l_0_9_95 l_0_9_95)))
 (let ((?x51203 (* l_0_9_94 l_0_9_94)))
 (let ((?x51185 (* l_0_9_141 l_0_9_141)))
 (let ((?x52423 (- (+ (+ (* l_0_9_139 l_0_9_139) (* l_0_9_140 l_0_9_140)) ?x51185) ?x51203)))
 (= (- (- ?x52423 ?x51205) ?x51207) 0.0)))))))
(assert
 (let ((?x51379 (* (* 2.0 l_0_9_96) l_0_9_99)))
 (let ((?x51376 (* (* 2.0 l_0_9_95) l_0_9_98)))
 (let ((?x51373 (* (* 2.0 l_0_9_94) l_0_9_97)))
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51352 (* ?x49040 l_0_9_144)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51350 (* ?x49037 l_0_9_143)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51348 (* ?x49034 l_0_9_142)))
 (= (- (- (- (+ (+ ?x51348 ?x51350) ?x51352) ?x51373) ?x51376) ?x51379) 0.0)))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x37884 (* ?x49040 l_0_9_148)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x10106 (* ?x49037 l_0_9_147)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x10081 (* ?x49034 l_0_9_146)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x37843 (* ?x49511 l_0_9_96)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x38014 (* ?x49508 l_0_9_95)))
 (let ((?x37883 (+ (+ (- (- (* (* (- 2.0) l_0_9_101) l_0_9_94) ?x38014) ?x37843) ?x10081) ?x10106)))
 (let ((?x50345 (+ ?x37883 ?x37884)))
 (= ?x50345 0.0))))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51748 (* ?x49040 l_0_9_159)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51746 (* ?x49037 l_0_9_158)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51744 (* ?x49034 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x51742 (* ?x51741 l_0_9_96)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x51739 (* ?x51738 l_0_9_95)))
 (let ((?x52463 (+ (+ (- (- (* (* (- 2.0) l_0_9_112) l_0_9_94) ?x51739) ?x51742) ?x51744) ?x51746)))
 (= (+ ?x52463 ?x51748) 0.0)))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x51945 (* ?x49040 l_0_9_166)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x51943 (* ?x49037 l_0_9_165)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x51941 (* ?x49034 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x51939 (* ?x51938 l_0_9_96)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x51936 (* ?x51935 l_0_9_95)))
 (let ((?x52473 (+ (+ (- (- (* (* (- 2.0) l_0_9_119) l_0_9_94) ?x51936) ?x51939) ?x51941) ?x51943)))
 (= (+ ?x52473 ?x51945) 0.0)))))))))))))
(assert
 (let ((?x49040 (* 2.0 l_0_9_141)))
 (let ((?x52034 (* ?x49040 l_0_9_174)))
 (let ((?x49037 (* 2.0 l_0_9_140)))
 (let ((?x52032 (* ?x49037 l_0_9_173)))
 (let ((?x49034 (* 2.0 l_0_9_139)))
 (let ((?x52030 (* ?x49034 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52028 (* ?x52027 l_0_9_96)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52025 (* ?x52024 l_0_9_95)))
 (let ((?x52485 (+ (+ (- (- (* (* (- 2.0) l_0_9_127) l_0_9_94) ?x52025) ?x52028) ?x52030) ?x52032)))
 (= (+ ?x52485 ?x52034) 0.0)))))))))))))
(assert
 (let ((?x52507 (* l_0_9_99 l_0_9_99)))
 (let ((?x52505 (* l_0_9_98 l_0_9_98)))
 (let ((?x52503 (* l_0_9_97 l_0_9_97)))
 (let ((?x52501 (* l_0_9_145 l_0_9_145)))
 (let ((?x52499 (* l_0_9_144 l_0_9_144)))
 (let ((?x52497 (* l_0_9_143 l_0_9_143)))
 (let ((?x52498 (+ (+ (* (- l_0_9_100) l_0_9_100) (* l_0_9_142 l_0_9_142)) ?x52497)))
 (= (- (- (- (+ (+ ?x52498 ?x52499) ?x52501) ?x52503) ?x52505) ?x52507) 0.0)))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52545 (* ?x49299 l_0_9_160)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52543 (* ?x49296 l_0_9_159)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52541 (* ?x49293 l_0_9_158)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52539 (* ?x49290 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52537 (* ?x51741 l_0_9_99)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x41424 (* ?x51738 l_0_9_98)))
 (let ((?x51736 (* 2.0 l_0_9_112)))
 (let ((?x41427 (* ?x51736 l_0_9_97)))
 (let ((?x52540 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_115) ?x41427) ?x41424) ?x52537) ?x52539)))
 (= (+ (+ (+ ?x52540 ?x52541) ?x52543) ?x52545) 0.0)))))))))))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52583 (* ?x49299 l_0_9_167)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52581 (* ?x49296 l_0_9_166)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52579 (* ?x49293 l_0_9_165)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52577 (* ?x49290 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52575 (* ?x51938 l_0_9_99)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52566 (* ?x51935 l_0_9_98)))
 (let ((?x51933 (* 2.0 l_0_9_119)))
 (let ((?x52562 (* ?x51933 l_0_9_97)))
 (let ((?x52578 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_122) ?x52562) ?x52566) ?x52575) ?x52577)))
 (= (+ (+ (+ ?x52578 ?x52579) ?x52581) ?x52583) 0.0)))))))))))))))))
(assert
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52618 (* ?x49299 l_0_9_175)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52616 (* ?x49296 l_0_9_174)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52614 (* ?x49293 l_0_9_173)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52612 (* ?x49290 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52610 (* ?x52027 l_0_9_99)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52608 (* ?x52024 l_0_9_98)))
 (let ((?x52022 (* 2.0 l_0_9_127)))
 (let ((?x52606 (* ?x52022 l_0_9_97)))
 (let ((?x52613 (+ (- (- (- (* (* (- 2.0) l_0_9_100) l_0_9_130) ?x52606) ?x52608) ?x52610) ?x52612)))
 (= (+ (+ (+ ?x52613 ?x52614) ?x52616) ?x52618) 0.0)))))))))))))))))
(assert
 (let ((?x50405 (* l_0_9_150 l_0_9_150)))
 (let ((?x50403 (* l_0_9_149 l_0_9_149)))
 (let ((?x50401 (* l_0_9_148 l_0_9_148)))
 (let ((?x50399 (* l_0_9_147 l_0_9_147)))
 (let ((?x50397 (* l_0_9_146 l_0_9_146)))
 (let ((?x50392 (* l_0_9_105 l_0_9_105)))
 (let ((?x50390 (* l_0_9_104 l_0_9_104)))
 (let ((?x50388 (* l_0_9_103 l_0_9_103)))
 (let ((?x50389 (- (- (* (- l_0_9_101) l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x50388)))
 (let ((?x50393 (- (- ?x50389 ?x50390) ?x50392)))
 (= (+ (+ (+ (+ (+ ?x50393 ?x50397) ?x50399) ?x50401) ?x50403) ?x50405) 0.0))))))))))))
(assert
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x38043 (* ?x49542 l_0_9_161)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x38024 (* ?x49537 l_0_9_160)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x26590 (* ?x49534 l_0_9_159)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x38009 (* ?x49531 l_0_9_158)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x38049 (* ?x49528 l_0_9_157)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x38045 (* ?x49517 l_0_9_116)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x38035 (* ?x49514 l_0_9_115)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x26658 (* ?x49511 l_0_9_114)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x26651 (* ?x49508 l_0_9_113)))
 (let ((?x38047 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_112) ?x26651) ?x26658) ?x38035) ?x38045)))
 (let ((?x38006 (+ (+ (+ (+ (+ ?x38047 ?x38049) ?x38009) ?x26590) ?x38024) ?x38043)))
 (= ?x38006 0.0))))))))))))))))))))))
(assert
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50486 (* ?x49542 l_0_9_168)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50484 (* ?x49537 l_0_9_167)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50482 (* ?x49534 l_0_9_166)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50480 (* ?x49531 l_0_9_165)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50478 (* ?x49528 l_0_9_164)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50476 (* ?x49517 l_0_9_123)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50474 (* ?x49514 l_0_9_122)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50472 (* ?x49511 l_0_9_121)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50470 (* ?x49508 l_0_9_120)))
 (let ((?x50477 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_119) ?x50470) ?x50472) ?x50474) ?x50476)))
 (let ((?x50487 (+ (+ (+ (+ (+ ?x50477 ?x50478) ?x50480) ?x50482) ?x50484) ?x50486)))
 (= ?x50487 0.0))))))))))))))))))))))
(assert
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50544 (* ?x49542 l_0_9_176)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50542 (* ?x49537 l_0_9_175)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50540 (* ?x49534 l_0_9_174)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50538 (* ?x49531 l_0_9_173)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50536 (* ?x49528 l_0_9_172)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50534 (* ?x49517 l_0_9_131)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50532 (* ?x49514 l_0_9_130)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50530 (* ?x49511 l_0_9_129)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50528 (* ?x49508 l_0_9_128)))
 (let ((?x50535 (- (- (- (- (* (* (- 2.0) l_0_9_101) l_0_9_127) ?x50528) ?x50530) ?x50532) ?x50534)))
 (let ((?x50545 (+ (+ (+ (+ (+ ?x50535 ?x50536) ?x50538) ?x50540) ?x50542) ?x50544)))
 (= ?x50545 0.0))))))))))))))))))))))
(assert
 (let ((?x52670 (* l_0_9_163 l_0_9_163)))
 (let ((?x52668 (* l_0_9_162 l_0_9_162)))
 (let ((?x52666 (* l_0_9_161 l_0_9_161)))
 (let ((?x52664 (* l_0_9_160 l_0_9_160)))
 (let ((?x52662 (* l_0_9_159 l_0_9_159)))
 (let ((?x52660 (* l_0_9_158 l_0_9_158)))
 (let ((?x52658 (* l_0_9_157 l_0_9_157)))
 (let ((?x52656 (* l_0_9_118 l_0_9_118)))
 (let ((?x52654 (* l_0_9_117 l_0_9_117)))
 (let ((?x52652 (* l_0_9_116 l_0_9_116)))
 (let ((?x52650 (* l_0_9_115 l_0_9_115)))
 (let ((?x52648 (* l_0_9_114 l_0_9_114)))
 (let ((?x52649 (- (- (* (- l_0_9_112) l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52648)))
 (let ((?x52663 (+ (+ (+ (- (- (- (- ?x52649 ?x52650) ?x52652) ?x52654) ?x52656) ?x52658) ?x52660) ?x52662)))
 (= (+ (+ (+ (+ ?x52663 ?x52664) ?x52666) ?x52668) ?x52670) 0.0))))))))))))))))
(assert
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52736 (* ?x52735 l_0_9_170)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52733 (* ?x52732 l_0_9_169)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52730 (* ?x52729 l_0_9_168)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52727 (* ?x52726 l_0_9_167)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52724 (* ?x52723 l_0_9_166)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52721 (* ?x52720 l_0_9_165)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52718 (* ?x52717 l_0_9_164)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52715 (* ?x52714 l_0_9_125)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52712 (* ?x52711 l_0_9_124)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52709 (* ?x52708 l_0_9_123)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52706 (* ?x52705 l_0_9_122)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52703 (* ?x51741 l_0_9_121)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52701 (* ?x51738 l_0_9_120)))
 (let ((?x52710 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_119) ?x52701) ?x52703) ?x52706) ?x52709)))
 (let ((?x52731 (+ (+ (+ (+ (+ (- (- ?x52710 ?x52712) ?x52715) ?x52718) ?x52721) ?x52724) ?x52727) ?x52730)))
 (= (+ (+ ?x52731 ?x52733) ?x52736) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52806 (* ?x52735 l_0_9_178)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52804 (* ?x52732 l_0_9_177)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52802 (* ?x52729 l_0_9_176)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52800 (* ?x52726 l_0_9_175)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52798 (* ?x52723 l_0_9_174)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52796 (* ?x52720 l_0_9_173)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52794 (* ?x52717 l_0_9_172)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52790 (* ?x52714 l_0_9_133)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52788 (* ?x52711 l_0_9_132)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52776 (* ?x52708 l_0_9_131)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52773 (* ?x52705 l_0_9_130)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52769 (* ?x51741 l_0_9_129)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52765 (* ?x51738 l_0_9_128)))
 (let ((?x52787 (- (- (- (- (* (* (- 2.0) l_0_9_112) l_0_9_127) ?x52765) ?x52769) ?x52773) ?x52776)))
 (let ((?x52791 (- (- ?x52787 ?x52788) ?x52790)))
 (let ((?x53218 (+ (+ (+ (+ (+ (+ (+ ?x52791 ?x52794) ?x52796) ?x52798) ?x52800) ?x52802) ?x52804) ?x52806)))
 (= ?x53218 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x52853 (* l_0_9_171 l_0_9_171)))
 (let ((?x52851 (* l_0_9_170 l_0_9_170)))
 (let ((?x52849 (* l_0_9_169 l_0_9_169)))
 (let ((?x52847 (* l_0_9_168 l_0_9_168)))
 (let ((?x52845 (* l_0_9_167 l_0_9_167)))
 (let ((?x52843 (* l_0_9_166 l_0_9_166)))
 (let ((?x52841 (* l_0_9_165 l_0_9_165)))
 (let ((?x52839 (* l_0_9_164 l_0_9_164)))
 (let ((?x52837 (* l_0_9_126 l_0_9_126)))
 (let ((?x52835 (* l_0_9_125 l_0_9_125)))
 (let ((?x52833 (* l_0_9_124 l_0_9_124)))
 (let ((?x52831 (* l_0_9_123 l_0_9_123)))
 (let ((?x52829 (* l_0_9_122 l_0_9_122)))
 (let ((?x52827 (* l_0_9_121 l_0_9_121)))
 (let ((?x52828 (- (- (* (- l_0_9_119) l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52827)))
 (let ((?x52842 (+ (+ (- (- (- (- (- ?x52828 ?x52829) ?x52831) ?x52833) ?x52835) ?x52837) ?x52839) ?x52841)))
 (= (+ (+ (+ (+ (+ (+ ?x52842 ?x52843) ?x52845) ?x52847) ?x52849) ?x52851) ?x52853) 0.0))))))))))))))))))
(assert
 (let ((?x52919 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52916 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52913 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52910 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52907 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52904 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52901 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52898 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52895 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52892 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52889 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52886 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52883 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52880 (* ?x51938 l_0_9_129)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52878 (* ?x51935 l_0_9_128)))
 (let ((?x52887 (- (- (- (- (* (* (- 2.0) l_0_9_119) l_0_9_127) ?x52878) ?x52880) ?x52883) ?x52886)))
 (let ((?x52908 (+ (+ (+ (+ (- (- (- ?x52887 ?x52889) ?x52892) ?x52895) ?x52898) ?x52901) ?x52904) ?x52907)))
 (= (+ (+ (+ (+ ?x52908 ?x52910) ?x52913) ?x52916) ?x52919) 0.0)))))))))))))))))))))
(assert
 (let ((?x53000 (* l_0_9_180 l_0_9_180)))
 (let ((?x52998 (* l_0_9_179 l_0_9_179)))
 (let ((?x52996 (* l_0_9_178 l_0_9_178)))
 (let ((?x52994 (* l_0_9_177 l_0_9_177)))
 (let ((?x52992 (* l_0_9_176 l_0_9_176)))
 (let ((?x52990 (* l_0_9_175 l_0_9_175)))
 (let ((?x52988 (* l_0_9_174 l_0_9_174)))
 (let ((?x52986 (* l_0_9_173 l_0_9_173)))
 (let ((?x52984 (* l_0_9_172 l_0_9_172)))
 (let ((?x52982 (* l_0_9_135 l_0_9_135)))
 (let ((?x52980 (* l_0_9_134 l_0_9_134)))
 (let ((?x52978 (* l_0_9_133 l_0_9_133)))
 (let ((?x52976 (* l_0_9_132 l_0_9_132)))
 (let ((?x52963 (* l_0_9_131 l_0_9_131)))
 (let ((?x52960 (* l_0_9_130 l_0_9_130)))
 (let ((?x52956 (* l_0_9_129 l_0_9_129)))
 (let ((?x52958 (- (- (* (- l_0_9_127) l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52956)))
 (let ((?x52985 (+ (- (- (- (- (- (- ?x52958 ?x52960) ?x52963) ?x52976) ?x52978) ?x52980) ?x52982) ?x52984)))
 (let ((?x52999 (+ (+ (+ (+ (+ (+ (+ ?x52985 ?x52986) ?x52988) ?x52990) ?x52992) ?x52994) ?x52996) ?x52998)))
 (= (+ ?x52999 ?x53000) 0.0)))))))))))))))))))))
(assert
 (let ((?x52210 (* l_0_9_91 l_0_9_91)))
 (let ((?x48314 (* l_0_9_226 l_0_9_226)))
 (let ((?x53225 (- (* (- l_0_9_136) l_0_9_136) (* (* 2.0 l_0_9_181) l_0_9_209))))
 (= (+ (- (- ?x53225 ?x48314) (* (* 2.0 l_0_9_271) l_0_9_299)) ?x52210) 0.0)))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52231 (* ?x50896 l_0_9_92)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38220 (* ?x6512 l_0_9_227)))
 (let ((?x53251 (- (* (* (- 2.0) l_0_9_136) l_0_9_137) (* (* 2.0 l_0_9_182) l_0_9_209))))
 (let ((?x53256 (- (- (- ?x53251 (* (* 2.0 l_0_9_183) l_0_9_210)) ?x38220) (* (* 2.0 l_0_9_272) l_0_9_299))))
 (= (+ (- ?x53256 (* (* 2.0 l_0_9_273) l_0_9_300)) ?x52231) 0.0))))))))
(assert
 (let ((?x50896 (* 2.0 l_0_9_91)))
 (let ((?x52244 (* ?x50896 l_0_9_97)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50742 (* ?x6512 l_0_9_232)))
 (let ((?x53294 (- (* (* (- 2.0) l_0_9_136) l_0_9_142) (* (* 2.0 l_0_9_187) l_0_9_209))))
 (let ((?x53298 (- (- ?x53294 (* (* 2.0 l_0_9_188) l_0_9_210)) (* (* 2.0 l_0_9_189) l_0_9_211))))
 (let ((?x53303 (- (- (- ?x53298 (* (* 2.0 l_0_9_190) l_0_9_212)) ?x50742) (* (* 2.0 l_0_9_277) l_0_9_299))))
 (let ((?x53307 (- (- ?x53303 (* (* 2.0 l_0_9_278) l_0_9_300)) (* (* 2.0 l_0_9_279) l_0_9_301))))
 (= (+ (- ?x53307 (* (* 2.0 l_0_9_280) l_0_9_302)) ?x52244) 0.0))))))))))
(assert
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50788 (* ?x6512 l_0_9_236)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x50269 (* ?x48610 l_0_9_146)))
 (let ((?x50266 (* 2.0 l_0_9_101)))
 (let ((?x50267 (* ?x50266 l_0_9_91)))
 (let ((?x53372 (- (- (- ?x50267 ?x50269) (* (* 2.0 l_0_9_191) l_0_9_209)) (* (* 2.0 l_0_9_192) l_0_9_210))))
 (let ((?x53378 (- (- ?x53372 (* (* 2.0 l_0_9_193) l_0_9_211)) (* (* 2.0 l_0_9_194) l_0_9_212))))
 (let ((?x53385 (- (- (- ?x53378 (* (* 2.0 l_0_9_195) l_0_9_213)) ?x50788) (* (* 2.0 l_0_9_281) l_0_9_299))))
 (let ((?x53391 (- (- ?x53385 (* (* 2.0 l_0_9_282) l_0_9_300)) (* (* 2.0 l_0_9_283) l_0_9_301))))
 (let ((?x53397 (- (- ?x53391 (* (* 2.0 l_0_9_284) l_0_9_302)) (* (* 2.0 l_0_9_285) l_0_9_303))))
 (= ?x53397 0.0)))))))))))))
(assert
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50828 (* ?x6512 l_0_9_241)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x48611 (* ?x48610 l_0_9_151)))
 (let ((?x48506 (* 2.0 l_0_9_106)))
 (let ((?x48598 (* ?x48506 l_0_9_91)))
 (let ((?x53420 (- (- (- ?x48598 ?x48611) (* (* 2.0 l_0_9_196) l_0_9_209)) (* (* 2.0 l_0_9_197) l_0_9_210))))
 (let ((?x53424 (- (- ?x53420 (* (* 2.0 l_0_9_198) l_0_9_211)) (* (* 2.0 l_0_9_199) l_0_9_212))))
 (let ((?x53428 (- (- ?x53424 (* (* 2.0 l_0_9_200) l_0_9_213)) (* (* 2.0 l_0_9_201) l_0_9_214))))
 (let ((?x53433 (- (- (- ?x53428 ?x50828) (* (* 2.0 l_0_9_286) l_0_9_299)) (* (* 2.0 l_0_9_287) l_0_9_300))))
 (let ((?x53437 (- (- ?x53433 (* (* 2.0 l_0_9_288) l_0_9_301)) (* (* 2.0 l_0_9_289) l_0_9_302))))
 (let ((?x53441 (- (- ?x53437 (* (* 2.0 l_0_9_290) l_0_9_303)) (* (* 2.0 l_0_9_291) l_0_9_304))))
 (= ?x53441 0.0))))))))))))))
(assert
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38436 (* ?x6512 l_0_9_247)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52264 (* ?x48610 l_0_9_157)))
 (let ((?x53472 (- (- (* (* 2.0 l_0_9_112) l_0_9_91) ?x52264) (* (* 2.0 l_0_9_202) l_0_9_209))))
 (let ((?x53476 (- (- ?x53472 (* (* 2.0 l_0_9_203) l_0_9_210)) (* (* 2.0 l_0_9_204) l_0_9_211))))
 (let ((?x53480 (- (- ?x53476 (* (* 2.0 l_0_9_205) l_0_9_212)) (* (* 2.0 l_0_9_206) l_0_9_213))))
 (let ((?x53484 (- (- ?x53480 (* (* 2.0 l_0_9_207) l_0_9_214)) (* (* 2.0 l_0_9_208) l_0_9_215))))
 (let ((?x53489 (- (- (- ?x53484 ?x38436) (* (* 2.0 l_0_9_292) l_0_9_299)) (* (* 2.0 l_0_9_293) l_0_9_300))))
 (let ((?x53493 (- (- ?x53489 (* (* 2.0 l_0_9_294) l_0_9_301)) (* (* 2.0 l_0_9_295) l_0_9_302))))
 (let ((?x53497 (- (- ?x53493 (* (* 2.0 l_0_9_296) l_0_9_303)) (* (* 2.0 l_0_9_297) l_0_9_304))))
 (= (- ?x53497 (* (* 2.0 l_0_9_298) l_0_9_305)) 0.0)))))))))))))
(assert
 (let ((?x53543 (* l_0_9_306 l_0_9_306)))
 (let ((?x53541 (* l_0_9_305 l_0_9_305)))
 (let ((?x53539 (* l_0_9_304 l_0_9_304)))
 (let ((?x53537 (* l_0_9_303 l_0_9_303)))
 (let ((?x53535 (* l_0_9_302 l_0_9_302)))
 (let ((?x53533 (* l_0_9_301 l_0_9_301)))
 (let ((?x53531 (* l_0_9_300 l_0_9_300)))
 (let ((?x53529 (* l_0_9_299 l_0_9_299)))
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x50887 (* ?x6512 l_0_9_254)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x52271 (* ?x48610 l_0_9_164)))
 (let ((?x51933 (* 2.0 l_0_9_119)))
 (let ((?x53149 (* ?x51933 l_0_9_91)))
 (let ((?x29380 (- (- (- ?x53149 ?x52271) (* (* 1.0 l_0_9_209) l_0_9_209)) (* (* 1.0 l_0_9_210) l_0_9_210))))
 (let ((?x53515 (- (- ?x29380 (* (* 1.0 l_0_9_211) l_0_9_211)) (* (* 1.0 l_0_9_212) l_0_9_212))))
 (let ((?x53521 (- (- ?x53515 (* (* 1.0 l_0_9_213) l_0_9_213)) (* (* 1.0 l_0_9_214) l_0_9_214))))
 (let ((?x53527 (- (- ?x53521 (* (* 1.0 l_0_9_215) l_0_9_215)) (* (* 1.0 l_0_9_216) l_0_9_216))))
 (let ((?x53540 (- (- (- (- (- (- (- ?x53527 ?x50887) ?x53529) ?x53531) ?x53533) ?x53535) ?x53537) ?x53539)))
 (= (- (- ?x53540 ?x53541) ?x53543) 0.0)))))))))))))))))))))
(assert
 (let ((?x6512 (* 2.0 l_0_9_226)))
 (let ((?x38598 (* ?x6512 l_0_9_262)))
 (let ((?x48610 (* 2.0 l_0_9_136)))
 (let ((?x40871 (* ?x48610 l_0_9_172)))
 (let ((?x53584 (- (- (* (* 2.0 l_0_9_127) l_0_9_91) ?x40871) (* (* 2.0 l_0_9_209) l_0_9_217))))
 (let ((?x53590 (- (- ?x53584 (* (* 2.0 l_0_9_210) l_0_9_218)) (* (* 2.0 l_0_9_211) l_0_9_219))))
 (let ((?x53596 (- (- ?x53590 (* (* 2.0 l_0_9_212) l_0_9_220)) (* (* 2.0 l_0_9_213) l_0_9_221))))
 (let ((?x53602 (- (- ?x53596 (* (* 2.0 l_0_9_214) l_0_9_222)) (* (* 2.0 l_0_9_215) l_0_9_223))))
 (let ((?x53609 (- (- (- ?x53602 (* (* 2.0 l_0_9_216) l_0_9_224)) ?x38598) (* (* 2.0 l_0_9_299) l_0_9_307))))
 (let ((?x53615 (- (- ?x53609 (* (* 2.0 l_0_9_300) l_0_9_308)) (* (* 2.0 l_0_9_301) l_0_9_309))))
 (let ((?x53621 (- (- ?x53615 (* (* 2.0 l_0_9_302) l_0_9_310)) (* (* 2.0 l_0_9_303) l_0_9_311))))
 (let ((?x53627 (- (- ?x53621 (* (* 2.0 l_0_9_304) l_0_9_312)) (* (* 2.0 l_0_9_305) l_0_9_313))))
 (= (- ?x53627 (* (* 2.0 l_0_9_306) l_0_9_314)) 0.0))))))))))))))
(assert
 (let ((?x52322 (* l_0_9_93 l_0_9_93)))
 (let ((?x52320 (* l_0_9_92 l_0_9_92)))
 (let ((?x50932 (* l_0_9_228 l_0_9_228)))
 (let ((?x50930 (* l_0_9_227 l_0_9_227)))
 (let ((?x53667 (- (- (* (- l_0_9_137) l_0_9_137) (* l_0_9_138 l_0_9_138)) ?x50930)))
 (= (+ (+ (- ?x53667 ?x50932) ?x52320) ?x52322) 0.0)))))))
(assert
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x50989 (* ?x50947 l_0_9_237)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x50987 (* ?x50944 l_0_9_236)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x37939 (* ?x48795 l_0_9_147)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x26576 (* ?x48792 l_0_9_146)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x10139 (* ?x49508 l_0_9_93)))
 (let ((?x53685 (- (- (- (+ (* (* 2.0 l_0_9_101) l_0_9_92) ?x10139) ?x26576) ?x37939) ?x50987)))
 (= (- ?x53685 ?x50989) 0.0)))))))))))))
(assert
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x51005 (* ?x50947 l_0_9_242)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x51003 (* ?x50944 l_0_9_241)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x48796 (* ?x48795 l_0_9_152)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x48793 (* ?x48792 l_0_9_151)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x48790 (* ?x48513 l_0_9_93)))
 (let ((?x42334 (- (- (- (+ (* (* 2.0 l_0_9_106) l_0_9_92) ?x48790) ?x48793) ?x48796) ?x51003)))
 (= (- ?x42334 ?x51005) 0.0)))))))))))))
(assert
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x38738 (* ?x50947 l_0_9_248)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x38732 (* ?x50944 l_0_9_247)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52373 (* ?x48795 l_0_9_158)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52371 (* ?x48792 l_0_9_157)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52369 (* ?x51738 l_0_9_93)))
 (let ((?x42393 (- (- (- (+ (* (* 2.0 l_0_9_112) l_0_9_92) ?x52369) ?x52371) ?x52373) ?x38732)))
 (= (- ?x42393 ?x38738) 0.0)))))))))))))
(assert
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x38696 (* ?x50947 l_0_9_255)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x38783 (* ?x50944 l_0_9_254)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52392 (* ?x48795 l_0_9_165)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52390 (* ?x48792 l_0_9_164)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52383 (* ?x51935 l_0_9_93)))
 (let ((?x53696 (- (- (- (+ (* (* 2.0 l_0_9_119) l_0_9_92) ?x52383) ?x52390) ?x52392) ?x38783)))
 (= (- ?x53696 ?x38696) 0.0)))))))))))))
(assert
 (let ((?x50947 (* 2.0 l_0_9_228)))
 (let ((?x51040 (* ?x50947 l_0_9_263)))
 (let ((?x50944 (* 2.0 l_0_9_227)))
 (let ((?x51037 (* ?x50944 l_0_9_262)))
 (let ((?x48795 (* 2.0 l_0_9_138)))
 (let ((?x52412 (* ?x48795 l_0_9_173)))
 (let ((?x48792 (* 2.0 l_0_9_137)))
 (let ((?x52410 (* ?x48792 l_0_9_172)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52408 (* ?x52024 l_0_9_93)))
 (let ((?x42388 (- (- (- (+ (* (* 2.0 l_0_9_127) l_0_9_92) ?x52408) ?x52410) ?x52412) ?x51037)))
 (= (- ?x42388 ?x51040) 0.0)))))))))))))
(assert
 (let ((?x52507 (* l_0_9_99 l_0_9_99)))
 (let ((?x52505 (* l_0_9_98 l_0_9_98)))
 (let ((?x52503 (* l_0_9_97 l_0_9_97)))
 (let ((?x51257 (* l_0_9_235 l_0_9_235)))
 (let ((?x51255 (* l_0_9_234 l_0_9_234)))
 (let ((?x51253 (* l_0_9_233 l_0_9_233)))
 (let ((?x27916 (* l_0_9_232 l_0_9_232)))
 (let ((?x52501 (* l_0_9_145 l_0_9_145)))
 (let ((?x52499 (* l_0_9_144 l_0_9_144)))
 (let ((?x52497 (* l_0_9_143 l_0_9_143)))
 (let ((?x42394 (- (- (- (* l_0_9_100 l_0_9_100) (* l_0_9_142 l_0_9_142)) ?x52497) ?x52499)))
 (let ((?x53706 (+ (+ (- (- (- (- (- ?x42394 ?x52501) ?x27916) ?x51253) ?x51255) ?x51257) ?x52503) ?x52505)))
 (= (+ ?x53706 ?x52507) 0.0))))))))))))))
(assert
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51289 (* ?x50294 l_0_9_244)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51287 (* ?x50291 l_0_9_243)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51285 (* ?x50288 l_0_9_242)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51283 (* ?x50285 l_0_9_241)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x49300 (* ?x49299 l_0_9_154)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x49297 (* ?x49296 l_0_9_153)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x49294 (* ?x49293 l_0_9_152)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x49291 (* ?x49290 l_0_9_151)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x49288 (* ?x48516 l_0_9_99)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x49286 (* ?x48513 l_0_9_98)))
 (let ((?x48506 (* 2.0 l_0_9_106)))
 (let ((?x49277 (* ?x48506 l_0_9_97)))
 (let ((?x37255 (* 2.0 l_0_9_100)))
 (let ((?x37253 (* ?x37255 l_0_9_109)))
 (let ((?x53729 (- (- (- (- (+ (+ (+ ?x37253 ?x49277) ?x49286) ?x49288) ?x49291) ?x49294) ?x49297) ?x49300)))
 (= (- (- (- (- ?x53729 ?x51283) ?x51285) ?x51287) ?x51289) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51319 (* ?x50294 l_0_9_250)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51317 (* ?x50291 l_0_9_249)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51315 (* ?x50288 l_0_9_248)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51313 (* ?x50285 l_0_9_247)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52545 (* ?x49299 l_0_9_160)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52543 (* ?x49296 l_0_9_159)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52541 (* ?x49293 l_0_9_158)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52539 (* ?x49290 l_0_9_157)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52537 (* ?x51741 l_0_9_99)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x41424 (* ?x51738 l_0_9_98)))
 (let ((?x51736 (* 2.0 l_0_9_112)))
 (let ((?x41427 (* ?x51736 l_0_9_97)))
 (let ((?x53752 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_115) ?x41427) ?x41424) ?x52537) ?x52539)))
 (let ((?x53759 (- (- (- (- (- (- (- ?x53752 ?x52541) ?x52543) ?x52545) ?x51313) ?x51315) ?x51317) ?x51319)))
 (= ?x53759 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x51363 (* ?x50294 l_0_9_257)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x51361 (* ?x50291 l_0_9_256)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x51359 (* ?x50288 l_0_9_255)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x51357 (* ?x50285 l_0_9_254)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52583 (* ?x49299 l_0_9_167)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52581 (* ?x49296 l_0_9_166)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52579 (* ?x49293 l_0_9_165)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52577 (* ?x49290 l_0_9_164)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52575 (* ?x51938 l_0_9_99)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52566 (* ?x51935 l_0_9_98)))
 (let ((?x51933 (* 2.0 l_0_9_119)))
 (let ((?x52562 (* ?x51933 l_0_9_97)))
 (let ((?x29824 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_122) ?x52562) ?x52566) ?x52575) ?x52577)))
 (let ((?x29817 (- (- (- (- (- (- (- ?x29824 ?x52579) ?x52581) ?x52583) ?x51357) ?x51359) ?x51361) ?x51363)))
 (= ?x29817 0.0))))))))))))))))))))))))))
(assert
 (let ((?x50294 (* 2.0 l_0_9_235)))
 (let ((?x39185 (* ?x50294 l_0_9_265)))
 (let ((?x50291 (* 2.0 l_0_9_234)))
 (let ((?x39182 (* ?x50291 l_0_9_264)))
 (let ((?x50288 (* 2.0 l_0_9_233)))
 (let ((?x39178 (* ?x50288 l_0_9_263)))
 (let ((?x50285 (* 2.0 l_0_9_232)))
 (let ((?x27918 (* ?x50285 l_0_9_262)))
 (let ((?x49299 (* 2.0 l_0_9_145)))
 (let ((?x52618 (* ?x49299 l_0_9_175)))
 (let ((?x49296 (* 2.0 l_0_9_144)))
 (let ((?x52616 (* ?x49296 l_0_9_174)))
 (let ((?x49293 (* 2.0 l_0_9_143)))
 (let ((?x52614 (* ?x49293 l_0_9_173)))
 (let ((?x49290 (* 2.0 l_0_9_142)))
 (let ((?x52612 (* ?x49290 l_0_9_172)))
 (let ((?x52027 (* 2.0 l_0_9_129)))
 (let ((?x52610 (* ?x52027 l_0_9_99)))
 (let ((?x52024 (* 2.0 l_0_9_128)))
 (let ((?x52608 (* ?x52024 l_0_9_98)))
 (let ((?x52022 (* 2.0 l_0_9_127)))
 (let ((?x52606 (* ?x52022 l_0_9_97)))
 (let ((?x29932 (- (+ (+ (+ (* (* 2.0 l_0_9_100) l_0_9_130) ?x52606) ?x52608) ?x52610) ?x52612)))
 (let ((?x42524 (- (- (- (- (- (- (- ?x29932 ?x52614) ?x52616) ?x52618) ?x27918) ?x39178) ?x39182) ?x39185)))
 (= ?x42524 0.0))))))))))))))))))))))))))
(assert
 (let ((?x51422 (* l_0_9_240 l_0_9_240)))
 (let ((?x51420 (* l_0_9_239 l_0_9_239)))
 (let ((?x51418 (* l_0_9_238 l_0_9_238)))
 (let ((?x51416 (* l_0_9_237 l_0_9_237)))
 (let ((?x51414 (* l_0_9_236 l_0_9_236)))
 (let ((?x50405 (* l_0_9_150 l_0_9_150)))
 (let ((?x50403 (* l_0_9_149 l_0_9_149)))
 (let ((?x50401 (* l_0_9_148 l_0_9_148)))
 (let ((?x50399 (* l_0_9_147 l_0_9_147)))
 (let ((?x50397 (* l_0_9_146 l_0_9_146)))
 (let ((?x50392 (* l_0_9_105 l_0_9_105)))
 (let ((?x50390 (* l_0_9_104 l_0_9_104)))
 (let ((?x50388 (* l_0_9_103 l_0_9_103)))
 (let ((?x30033 (+ (+ (+ (* l_0_9_101 l_0_9_101) (* l_0_9_102 l_0_9_102)) ?x50388) ?x50390)))
 (let ((?x53763 (- (- (- (- (- (- (+ ?x30033 ?x50392) ?x50397) ?x50399) ?x50401) ?x50403) ?x50405) ?x51414)))
 (= (- (- (- (- ?x53763 ?x51416) ?x51418) ?x51420) ?x51422) 0.0)))))))))))))))))
(assert
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51454 (* ?x51453 l_0_9_245)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51451 (* ?x51450 l_0_9_244)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51448 (* ?x51447 l_0_9_243)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51445 (* ?x51444 l_0_9_242)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51442 (* ?x51441 l_0_9_241)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x49543 (* ?x49542 l_0_9_155)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x49538 (* ?x49537 l_0_9_154)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x49535 (* ?x49534 l_0_9_153)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x49532 (* ?x49531 l_0_9_152)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x49529 (* ?x49528 l_0_9_151)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x49518 (* ?x49517 l_0_9_110)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x49515 (* ?x49514 l_0_9_109)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x49512 (* ?x49511 l_0_9_108)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x49509 (* ?x49508 l_0_9_107)))
 (let ((?x16535 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_106) ?x49509) ?x49512) ?x49515) ?x49518)))
 (let ((?x16502 (- (- (- (- (- (- (- ?x16535 ?x49529) ?x49532) ?x49535) ?x49538) ?x49543) ?x51442) ?x51445)))
 (= (- (- (- ?x16502 ?x51448) ?x51451) ?x51454) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51487 (* ?x51453 l_0_9_251)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51485 (* ?x51450 l_0_9_250)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51483 (* ?x51447 l_0_9_249)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51481 (* ?x51444 l_0_9_248)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51479 (* ?x51441 l_0_9_247)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x38043 (* ?x49542 l_0_9_161)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x38024 (* ?x49537 l_0_9_160)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x26590 (* ?x49534 l_0_9_159)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x38009 (* ?x49531 l_0_9_158)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x38049 (* ?x49528 l_0_9_157)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x38045 (* ?x49517 l_0_9_116)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x38035 (* ?x49514 l_0_9_115)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x26658 (* ?x49511 l_0_9_114)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x26651 (* ?x49508 l_0_9_113)))
 (let ((?x16617 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_112) ?x26651) ?x26658) ?x38035) ?x38045)))
 (let ((?x53784 (- (- (- (- (- (- (- ?x16617 ?x38049) ?x38009) ?x26590) ?x38024) ?x38043) ?x51479) ?x51481)))
 (= (- (- (- ?x53784 ?x51483) ?x51485) ?x51487) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x51526 (* ?x51453 l_0_9_258)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x51524 (* ?x51450 l_0_9_257)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x51522 (* ?x51447 l_0_9_256)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x51520 (* ?x51444 l_0_9_255)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x51518 (* ?x51441 l_0_9_254)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50486 (* ?x49542 l_0_9_168)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50484 (* ?x49537 l_0_9_167)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50482 (* ?x49534 l_0_9_166)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50480 (* ?x49531 l_0_9_165)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50478 (* ?x49528 l_0_9_164)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50476 (* ?x49517 l_0_9_123)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50474 (* ?x49514 l_0_9_122)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50472 (* ?x49511 l_0_9_121)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50470 (* ?x49508 l_0_9_120)))
 (let ((?x30311 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_119) ?x50470) ?x50472) ?x50474) ?x50476)))
 (let ((?x53797 (- (- (- (- (- (- (- ?x30311 ?x50478) ?x50480) ?x50482) ?x50484) ?x50486) ?x51518) ?x51520)))
 (= (- (- (- ?x53797 ?x51522) ?x51524) ?x51526) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51453 (* 2.0 l_0_9_240)))
 (let ((?x11273 (* ?x51453 l_0_9_266)))
 (let ((?x51450 (* 2.0 l_0_9_239)))
 (let ((?x39324 (* ?x51450 l_0_9_265)))
 (let ((?x51447 (* 2.0 l_0_9_238)))
 (let ((?x39389 (* ?x51447 l_0_9_264)))
 (let ((?x51444 (* 2.0 l_0_9_237)))
 (let ((?x39383 (* ?x51444 l_0_9_263)))
 (let ((?x51441 (* 2.0 l_0_9_236)))
 (let ((?x39377 (* ?x51441 l_0_9_262)))
 (let ((?x49542 (* 2.0 l_0_9_150)))
 (let ((?x50544 (* ?x49542 l_0_9_176)))
 (let ((?x49537 (* 2.0 l_0_9_149)))
 (let ((?x50542 (* ?x49537 l_0_9_175)))
 (let ((?x49534 (* 2.0 l_0_9_148)))
 (let ((?x50540 (* ?x49534 l_0_9_174)))
 (let ((?x49531 (* 2.0 l_0_9_147)))
 (let ((?x50538 (* ?x49531 l_0_9_173)))
 (let ((?x49528 (* 2.0 l_0_9_146)))
 (let ((?x50536 (* ?x49528 l_0_9_172)))
 (let ((?x49517 (* 2.0 l_0_9_105)))
 (let ((?x50534 (* ?x49517 l_0_9_131)))
 (let ((?x49514 (* 2.0 l_0_9_104)))
 (let ((?x50532 (* ?x49514 l_0_9_130)))
 (let ((?x49511 (* 2.0 l_0_9_103)))
 (let ((?x50530 (* ?x49511 l_0_9_129)))
 (let ((?x49508 (* 2.0 l_0_9_102)))
 (let ((?x50528 (* ?x49508 l_0_9_128)))
 (let ((?x30344 (+ (+ (+ (+ (* (* 2.0 l_0_9_101) l_0_9_127) ?x50528) ?x50530) ?x50532) ?x50534)))
 (let ((?x42754 (- (- (- (- (- (- (- ?x30344 ?x50536) ?x50538) ?x50540) ?x50542) ?x50544) ?x39377) ?x39383)))
 (= (- (- (- ?x42754 ?x39389) ?x39324) ?x11273) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x51580 (* l_0_9_246 l_0_9_246)))
 (let ((?x51578 (* l_0_9_245 l_0_9_245)))
 (let ((?x51576 (* l_0_9_244 l_0_9_244)))
 (let ((?x51574 (* l_0_9_243 l_0_9_243)))
 (let ((?x51572 (* l_0_9_242 l_0_9_242)))
 (let ((?x51570 (* l_0_9_241 l_0_9_241)))
 (let ((?x49744 (* l_0_9_156 l_0_9_156)))
 (let ((?x49742 (* l_0_9_155 l_0_9_155)))
 (let ((?x49740 (* l_0_9_154 l_0_9_154)))
 (let ((?x49738 (* l_0_9_153 l_0_9_153)))
 (let ((?x49736 (* l_0_9_152 l_0_9_152)))
 (let ((?x49734 (* l_0_9_151 l_0_9_151)))
 (let ((?x49732 (* l_0_9_111 l_0_9_111)))
 (let ((?x49730 (* l_0_9_110 l_0_9_110)))
 (let ((?x49728 (* l_0_9_109 l_0_9_109)))
 (let ((?x49726 (* l_0_9_108 l_0_9_108)))
 (let ((?x42803 (+ (+ (+ (* l_0_9_106 l_0_9_106) (* l_0_9_107 l_0_9_107)) ?x49726) ?x49728)))
 (let ((?x42732 (- (- (- (- (- (+ (+ ?x42803 ?x49730) ?x49732) ?x49734) ?x49736) ?x49738) ?x49740) ?x49742)))
 (let ((?x53807 (- (- (- (- (- (- (- ?x42732 ?x49744) ?x51570) ?x51572) ?x51574) ?x51576) ?x51578) ?x51580)))
 (= ?x53807 0.0)))))))))))))))))))))
(assert
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x51623 (* ?x48384 l_0_9_259)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x51621 (* ?x48381 l_0_9_258)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x51619 (* ?x48378 l_0_9_257)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x51617 (* ?x48375 l_0_9_256)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x51615 (* ?x48372 l_0_9_255)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x51613 (* ?x48369 l_0_9_254)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50068 (* ?x48543 l_0_9_169)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50066 (* ?x48540 l_0_9_168)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50064 (* ?x48537 l_0_9_167)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50062 (* ?x48534 l_0_9_166)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50060 (* ?x48531 l_0_9_165)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50058 (* ?x48528 l_0_9_164)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50056 (* ?x48525 l_0_9_124)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50054 (* ?x48522 l_0_9_123)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50052 (* ?x48519 l_0_9_122)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50050 (* ?x48516 l_0_9_121)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50048 (* ?x48513 l_0_9_120)))
 (let ((?x53827 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_119) ?x50048) ?x50050) ?x50052) ?x50054)))
 (let ((?x53834 (- (- (- (- (- (- (+ ?x53827 ?x50056) ?x50058) ?x50060) ?x50062) ?x50064) ?x50066) ?x50068)))
 (= (- (- (- (- (- (- ?x53834 ?x51613) ?x51615) ?x51617) ?x51619) ?x51621) ?x51623) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x48384 (* 2.0 l_0_9_246)))
 (let ((?x51659 (* ?x48384 l_0_9_267)))
 (let ((?x48381 (* 2.0 l_0_9_245)))
 (let ((?x51657 (* ?x48381 l_0_9_266)))
 (let ((?x48378 (* 2.0 l_0_9_244)))
 (let ((?x51655 (* ?x48378 l_0_9_265)))
 (let ((?x48375 (* 2.0 l_0_9_243)))
 (let ((?x51653 (* ?x48375 l_0_9_264)))
 (let ((?x48372 (* 2.0 l_0_9_242)))
 (let ((?x51651 (* ?x48372 l_0_9_263)))
 (let ((?x48369 (* 2.0 l_0_9_241)))
 (let ((?x51649 (* ?x48369 l_0_9_262)))
 (let ((?x48543 (* 2.0 l_0_9_156)))
 (let ((?x50190 (* ?x48543 l_0_9_177)))
 (let ((?x48540 (* 2.0 l_0_9_155)))
 (let ((?x50188 (* ?x48540 l_0_9_176)))
 (let ((?x48537 (* 2.0 l_0_9_154)))
 (let ((?x50186 (* ?x48537 l_0_9_175)))
 (let ((?x48534 (* 2.0 l_0_9_153)))
 (let ((?x50184 (* ?x48534 l_0_9_174)))
 (let ((?x48531 (* 2.0 l_0_9_152)))
 (let ((?x50182 (* ?x48531 l_0_9_173)))
 (let ((?x48528 (* 2.0 l_0_9_151)))
 (let ((?x50180 (* ?x48528 l_0_9_172)))
 (let ((?x48525 (* 2.0 l_0_9_111)))
 (let ((?x50178 (* ?x48525 l_0_9_132)))
 (let ((?x48522 (* 2.0 l_0_9_110)))
 (let ((?x50176 (* ?x48522 l_0_9_131)))
 (let ((?x48519 (* 2.0 l_0_9_109)))
 (let ((?x50174 (* ?x48519 l_0_9_130)))
 (let ((?x48516 (* 2.0 l_0_9_108)))
 (let ((?x50172 (* ?x48516 l_0_9_129)))
 (let ((?x48513 (* 2.0 l_0_9_107)))
 (let ((?x50170 (* ?x48513 l_0_9_128)))
 (let ((?x30656 (+ (+ (+ (+ (* (* 2.0 l_0_9_106) l_0_9_127) ?x50170) ?x50172) ?x50174) ?x50176)))
 (let ((?x17023 (- (- (- (- (- (- (+ ?x30656 ?x50178) ?x50180) ?x50182) ?x50184) ?x50186) ?x50188) ?x50190)))
 (= (- (- (- (- (- (- ?x17023 ?x51649) ?x51651) ?x51653) ?x51655) ?x51657) ?x51659) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51710 (* l_0_9_253 l_0_9_253)))
 (let ((?x51708 (* l_0_9_252 l_0_9_252)))
 (let ((?x51706 (* l_0_9_251 l_0_9_251)))
 (let ((?x51704 (* l_0_9_250 l_0_9_250)))
 (let ((?x51701 (* l_0_9_249 l_0_9_249)))
 (let ((?x51699 (* l_0_9_248 l_0_9_248)))
 (let ((?x51697 (* l_0_9_247 l_0_9_247)))
 (let ((?x52670 (* l_0_9_163 l_0_9_163)))
 (let ((?x52668 (* l_0_9_162 l_0_9_162)))
 (let ((?x52666 (* l_0_9_161 l_0_9_161)))
 (let ((?x52664 (* l_0_9_160 l_0_9_160)))
 (let ((?x52662 (* l_0_9_159 l_0_9_159)))
 (let ((?x52660 (* l_0_9_158 l_0_9_158)))
 (let ((?x52658 (* l_0_9_157 l_0_9_157)))
 (let ((?x52656 (* l_0_9_118 l_0_9_118)))
 (let ((?x52654 (* l_0_9_117 l_0_9_117)))
 (let ((?x52652 (* l_0_9_116 l_0_9_116)))
 (let ((?x52650 (* l_0_9_115 l_0_9_115)))
 (let ((?x52648 (* l_0_9_114 l_0_9_114)))
 (let ((?x30666 (+ (+ (+ (* l_0_9_112 l_0_9_112) (* l_0_9_113 l_0_9_113)) ?x52648) ?x52650)))
 (let ((?x53844 (- (- (- (- (+ (+ (+ ?x30666 ?x52652) ?x52654) ?x52656) ?x52658) ?x52660) ?x52662) ?x52664)))
 (let ((?x53851 (- (- (- (- (- (- (- ?x53844 ?x52666) ?x52668) ?x52670) ?x51697) ?x51699) ?x51701) ?x51704)))
 (= (- (- (- ?x53851 ?x51706) ?x51708) ?x51710) 0.0))))))))))))))))))))))))
(assert
 (let ((?x51776 (* 2.0 l_0_9_253)))
 (let ((?x51777 (* ?x51776 l_0_9_260)))
 (let ((?x51773 (* 2.0 l_0_9_252)))
 (let ((?x51774 (* ?x51773 l_0_9_259)))
 (let ((?x51770 (* 2.0 l_0_9_251)))
 (let ((?x51771 (* ?x51770 l_0_9_258)))
 (let ((?x51767 (* 2.0 l_0_9_250)))
 (let ((?x51768 (* ?x51767 l_0_9_257)))
 (let ((?x51763 (* 2.0 l_0_9_249)))
 (let ((?x51764 (* ?x51763 l_0_9_256)))
 (let ((?x51760 (* 2.0 l_0_9_248)))
 (let ((?x51761 (* ?x51760 l_0_9_255)))
 (let ((?x51757 (* 2.0 l_0_9_247)))
 (let ((?x51758 (* ?x51757 l_0_9_254)))
 (let ((?x52735 (* 2.0 l_0_9_163)))
 (let ((?x52736 (* ?x52735 l_0_9_170)))
 (let ((?x52732 (* 2.0 l_0_9_162)))
 (let ((?x52733 (* ?x52732 l_0_9_169)))
 (let ((?x52729 (* 2.0 l_0_9_161)))
 (let ((?x52730 (* ?x52729 l_0_9_168)))
 (let ((?x52726 (* 2.0 l_0_9_160)))
 (let ((?x52727 (* ?x52726 l_0_9_167)))
 (let ((?x52723 (* 2.0 l_0_9_159)))
 (let ((?x52724 (* ?x52723 l_0_9_166)))
 (let ((?x52720 (* 2.0 l_0_9_158)))
 (let ((?x52721 (* ?x52720 l_0_9_165)))
 (let ((?x52717 (* 2.0 l_0_9_157)))
 (let ((?x52718 (* ?x52717 l_0_9_164)))
 (let ((?x52714 (* 2.0 l_0_9_118)))
 (let ((?x52715 (* ?x52714 l_0_9_125)))
 (let ((?x52711 (* 2.0 l_0_9_117)))
 (let ((?x52712 (* ?x52711 l_0_9_124)))
 (let ((?x52708 (* 2.0 l_0_9_116)))
 (let ((?x52709 (* ?x52708 l_0_9_123)))
 (let ((?x52705 (* 2.0 l_0_9_115)))
 (let ((?x52706 (* ?x52705 l_0_9_122)))
 (let ((?x51741 (* 2.0 l_0_9_114)))
 (let ((?x52703 (* ?x51741 l_0_9_121)))
 (let ((?x51738 (* 2.0 l_0_9_113)))
 (let ((?x52701 (* ?x51738 l_0_9_120)))
 (let ((?x53872 (+ (+ (+ (+ (* (* 2.0 l_0_9_112) l_0_9_119) ?x52701) ?x52703) ?x52706) ?x52709)))
 (let ((?x53879 (- (- (- (- (- (+ (+ ?x53872 ?x52712) ?x52715) ?x52718) ?x52721) ?x52724) ?x52727) ?x52730)))
 (let ((?x53886 (- (- (- (- (- (- (- ?x53879 ?x52733) ?x52736) ?x51758) ?x51761) ?x51764) ?x51768) ?x51771)))
 (= (- (- ?x53886 ?x51774) ?x51777) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x51964 (* l_0_9_261 l_0_9_261)))
 (let ((?x51962 (* l_0_9_260 l_0_9_260)))
 (let ((?x51960 (* l_0_9_259 l_0_9_259)))
 (let ((?x51958 (* l_0_9_258 l_0_9_258)))
 (let ((?x51956 (* l_0_9_257 l_0_9_257)))
 (let ((?x51954 (* l_0_9_256 l_0_9_256)))
 (let ((?x51952 (* l_0_9_255 l_0_9_255)))
 (let ((?x51950 (* l_0_9_254 l_0_9_254)))
 (let ((?x52853 (* l_0_9_171 l_0_9_171)))
 (let ((?x52851 (* l_0_9_170 l_0_9_170)))
 (let ((?x52849 (* l_0_9_169 l_0_9_169)))
 (let ((?x52847 (* l_0_9_168 l_0_9_168)))
 (let ((?x52845 (* l_0_9_167 l_0_9_167)))
 (let ((?x52843 (* l_0_9_166 l_0_9_166)))
 (let ((?x52841 (* l_0_9_165 l_0_9_165)))
 (let ((?x52839 (* l_0_9_164 l_0_9_164)))
 (let ((?x52837 (* l_0_9_126 l_0_9_126)))
 (let ((?x52835 (* l_0_9_125 l_0_9_125)))
 (let ((?x52833 (* l_0_9_124 l_0_9_124)))
 (let ((?x52831 (* l_0_9_123 l_0_9_123)))
 (let ((?x52829 (* l_0_9_122 l_0_9_122)))
 (let ((?x52827 (* l_0_9_121 l_0_9_121)))
 (let ((?x43132 (+ (+ (+ (* l_0_9_119 l_0_9_119) (* l_0_9_120 l_0_9_120)) ?x52827) ?x52829)))
 (let ((?x43089 (- (- (- (+ (+ (+ (+ ?x43132 ?x52831) ?x52833) ?x52835) ?x52837) ?x52839) ?x52841) ?x52843)))
 (let ((?x53898 (- (- (- (- (- (- (- ?x43089 ?x52845) ?x52847) ?x52849) ?x52851) ?x52853) ?x51950) ?x51952)))
 (= (- (- (- (- (- (- ?x53898 ?x51954) ?x51956) ?x51958) ?x51960) ?x51962) ?x51964) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x52061 (* (* 2.0 l_0_9_261) l_0_9_269)))
 (let ((?x52058 (* (* 2.0 l_0_9_260) l_0_9_268)))
 (let ((?x52055 (* (* 2.0 l_0_9_259) l_0_9_267)))
 (let ((?x52052 (* (* 2.0 l_0_9_258) l_0_9_266)))
 (let ((?x52049 (* (* 2.0 l_0_9_257) l_0_9_265)))
 (let ((?x52046 (* (* 2.0 l_0_9_256) l_0_9_264)))
 (let ((?x52043 (* (* 2.0 l_0_9_255) l_0_9_263)))
 (let ((?x52040 (* (* 2.0 l_0_9_254) l_0_9_262)))
 (let ((?x52919 (* (* 2.0 l_0_9_171) l_0_9_179)))
 (let ((?x52916 (* (* 2.0 l_0_9_170) l_0_9_178)))
 (let ((?x52913 (* (* 2.0 l_0_9_169) l_0_9_177)))
 (let ((?x52910 (* (* 2.0 l_0_9_168) l_0_9_176)))
 (let ((?x52907 (* (* 2.0 l_0_9_167) l_0_9_175)))
 (let ((?x52904 (* (* 2.0 l_0_9_166) l_0_9_174)))
 (let ((?x52901 (* (* 2.0 l_0_9_165) l_0_9_173)))
 (let ((?x52898 (* (* 2.0 l_0_9_164) l_0_9_172)))
 (let ((?x52895 (* (* 2.0 l_0_9_126) l_0_9_134)))
 (let ((?x52892 (* (* 2.0 l_0_9_125) l_0_9_133)))
 (let ((?x52889 (* (* 2.0 l_0_9_124) l_0_9_132)))
 (let ((?x52886 (* (* 2.0 l_0_9_123) l_0_9_131)))
 (let ((?x52883 (* (* 2.0 l_0_9_122) l_0_9_130)))
 (let ((?x51938 (* 2.0 l_0_9_121)))
 (let ((?x52880 (* ?x51938 l_0_9_129)))
 (let ((?x51935 (* 2.0 l_0_9_120)))
 (let ((?x52878 (* ?x51935 l_0_9_128)))
 (let ((?x53928 (+ (+ (+ (+ (* (* 2.0 l_0_9_119) l_0_9_127) ?x52878) ?x52880) ?x52883) ?x52886)))
 (let ((?x53935 (- (- (- (- (+ (+ (+ ?x53928 ?x52889) ?x52892) ?x52895) ?x52898) ?x52901) ?x52904) ?x52907)))
 (let ((?x53942 (- (- (- (- (- (- (- ?x53935 ?x52910) ?x52913) ?x52916) ?x52919) ?x52040) ?x52043) ?x52046)))
 (= (- (- (- (- (- ?x53942 ?x52049) ?x52052) ?x52055) ?x52058) ?x52061) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x52168 (* l_0_9_270 l_0_9_270)))
 (let ((?x52166 (* l_0_9_269 l_0_9_269)))
 (let ((?x52164 (* l_0_9_268 l_0_9_268)))
 (let ((?x52162 (* l_0_9_267 l_0_9_267)))
 (let ((?x52160 (* l_0_9_266 l_0_9_266)))
 (let ((?x52158 (* l_0_9_265 l_0_9_265)))
 (let ((?x52156 (* l_0_9_264 l_0_9_264)))
 (let ((?x52154 (* l_0_9_263 l_0_9_263)))
 (let ((?x52153 (* l_0_9_262 l_0_9_262)))
 (let ((?x53000 (* l_0_9_180 l_0_9_180)))
 (let ((?x52998 (* l_0_9_179 l_0_9_179)))
 (let ((?x52996 (* l_0_9_178 l_0_9_178)))
 (let ((?x52994 (* l_0_9_177 l_0_9_177)))
 (let ((?x52992 (* l_0_9_176 l_0_9_176)))
 (let ((?x52990 (* l_0_9_175 l_0_9_175)))
 (let ((?x52988 (* l_0_9_174 l_0_9_174)))
 (let ((?x52986 (* l_0_9_173 l_0_9_173)))
 (let ((?x52984 (* l_0_9_172 l_0_9_172)))
 (let ((?x52982 (* l_0_9_135 l_0_9_135)))
 (let ((?x52980 (* l_0_9_134 l_0_9_134)))
 (let ((?x52978 (* l_0_9_133 l_0_9_133)))
 (let ((?x52976 (* l_0_9_132 l_0_9_132)))
 (let ((?x52963 (* l_0_9_131 l_0_9_131)))
 (let ((?x52960 (* l_0_9_130 l_0_9_130)))
 (let ((?x52956 (* l_0_9_129 l_0_9_129)))
 (let ((?x53957 (+ (+ (+ (* l_0_9_127 l_0_9_127) (* l_0_9_128 l_0_9_128)) ?x52956) ?x52960)))
 (let ((?x53964 (- (- (+ (+ (+ (+ (+ ?x53957 ?x52963) ?x52976) ?x52978) ?x52980) ?x52982) ?x52984) ?x52986)))
 (let ((?x53971 (- (- (- (- (- (- (- ?x53964 ?x52988) ?x52990) ?x52992) ?x52994) ?x52996) ?x52998) ?x53000)))
 (let ((?x53978 (- (- (- (- (- (- (- ?x53971 ?x52153) ?x52154) ?x52156) ?x52158) ?x52160) ?x52162) ?x52164)))
 (= (- (- ?x53978 ?x52166) ?x52168) 0.0)))))))))))))))))))))))))))))))
(assert
 (= (- (* (* (- 1.0) l_0_9_181) l_0_9_181) (* l_0_9_271 l_0_9_271)) 0.0))
(assert
 (let ((?x54003 (- (* (* (- 2.0) l_0_9_181) l_0_9_182) (* (* 2.0 l_0_9_271) l_0_9_272))))
 (= ?x54003 0.0)))
(assert
 (let ((?x54018 (- (* (* (- 2.0) l_0_9_181) l_0_9_187) (* (* 2.0 l_0_9_271) l_0_9_277))))
 (= ?x54018 0.0)))
(assert
 (let ((?x54029 (- (* (* (- 2.0) l_0_9_181) l_0_9_191) (* (* 2.0 l_0_9_271) l_0_9_281))))
 (= ?x54029 0.0)))
(assert
 (let ((?x54044 (- (* (* (- 2.0) l_0_9_181) l_0_9_196) (* (* 2.0 l_0_9_271) l_0_9_286))))
 (= ?x54044 0.0)))
(assert
 (let ((?x54055 (- (* (* (- 2.0) l_0_9_181) l_0_9_202) (* (* 2.0 l_0_9_271) l_0_9_292))))
 (= ?x54055 0.0)))
(assert
 (let ((?x54066 (- (* (* (- 2.0) l_0_9_181) l_0_9_217) (* (* 2.0 l_0_9_271) l_0_9_307))))
 (= ?x54066 0.0)))
(assert
 (let ((?x54086 (* l_0_9_273 l_0_9_273)))
 (let ((?x54084 (* l_0_9_272 l_0_9_272)))
 (let ((?x54083 (- (* (* (- 1.0) l_0_9_182) l_0_9_182) (* (* 1.0 l_0_9_183) l_0_9_183))))
 (= (- (- ?x54083 ?x54084) ?x54086) 0.0)))))
(assert
 (let ((?x54101 (- (* (* (- 2.0) l_0_9_182) l_0_9_191) (* (* 2.0 l_0_9_183) l_0_9_192))))
 (let ((?x54105 (- (- ?x54101 (* (* 2.0 l_0_9_272) l_0_9_281)) (* (* 2.0 l_0_9_273) l_0_9_282))))
 (= ?x54105 0.0))))
(assert
 (let ((?x54125 (- (* (* (- 2.0) l_0_9_182) l_0_9_196) (* (* 2.0 l_0_9_183) l_0_9_197))))
 (let ((?x54129 (- (- ?x54125 (* (* 2.0 l_0_9_272) l_0_9_286)) (* (* 2.0 l_0_9_273) l_0_9_287))))
 (= ?x54129 0.0))))
(assert
 (let ((?x54147 (- (* (* (- 2.0) l_0_9_182) l_0_9_202) (* (* 2.0 l_0_9_183) l_0_9_203))))
 (let ((?x54151 (- (- ?x54147 (* (* 2.0 l_0_9_272) l_0_9_292)) (* (* 2.0 l_0_9_273) l_0_9_293))))
 (= ?x54151 0.0))))
(assert
 (let ((?x54169 (- (* (* (- 2.0) l_0_9_182) l_0_9_217) (* (* 2.0 l_0_9_183) l_0_9_218))))
 (let ((?x54173 (- (- ?x54169 (* (* 2.0 l_0_9_272) l_0_9_307)) (* (* 2.0 l_0_9_273) l_0_9_308))))
 (= ?x54173 0.0))))
(assert
 (let ((?x54205 (* l_0_9_280 l_0_9_280)))
 (let ((?x54203 (* l_0_9_279 l_0_9_279)))
 (let ((?x54201 (* l_0_9_278 l_0_9_278)))
 (let ((?x54199 (* l_0_9_277 l_0_9_277)))
 (let ((?x54192 (- (* (* (- 1.0) l_0_9_187) l_0_9_187) (* (* 1.0 l_0_9_188) l_0_9_188))))
 (let ((?x54198 (- (- ?x54192 (* (* 1.0 l_0_9_189) l_0_9_189)) (* (* 1.0 l_0_9_190) l_0_9_190))))
 (= (- (- (- (- ?x54198 ?x54199) ?x54201) ?x54203) ?x54205) 0.0))))))))
(assert
 (let ((?x54228 (- (* (* (- 2.0) l_0_9_187) l_0_9_196) (* (* 2.0 l_0_9_188) l_0_9_197))))
 (let ((?x54232 (- (- ?x54228 (* (* 2.0 l_0_9_189) l_0_9_198)) (* (* 2.0 l_0_9_190) l_0_9_199))))
 (let ((?x54236 (- (- ?x54232 (* (* 2.0 l_0_9_277) l_0_9_286)) (* (* 2.0 l_0_9_278) l_0_9_287))))
 (let ((?x54240 (- (- ?x54236 (* (* 2.0 l_0_9_279) l_0_9_288)) (* (* 2.0 l_0_9_280) l_0_9_289))))
 (= ?x54240 0.0))))))
(assert
 (let ((?x54277 (- (* (* (- 2.0) l_0_9_187) l_0_9_202) (* (* 2.0 l_0_9_188) l_0_9_203))))
 (let ((?x54281 (- (- ?x54277 (* (* 2.0 l_0_9_189) l_0_9_204)) (* (* 2.0 l_0_9_190) l_0_9_205))))
 (let ((?x54285 (- (- ?x54281 (* (* 2.0 l_0_9_277) l_0_9_292)) (* (* 2.0 l_0_9_278) l_0_9_293))))
 (let ((?x54289 (- (- ?x54285 (* (* 2.0 l_0_9_279) l_0_9_294)) (* (* 2.0 l_0_9_280) l_0_9_295))))
 (= ?x54289 0.0))))))
(assert
 (let ((?x54324 (- (* (* (- 2.0) l_0_9_187) l_0_9_217) (* (* 2.0 l_0_9_188) l_0_9_218))))
 (let ((?x54328 (- (- ?x54324 (* (* 2.0 l_0_9_189) l_0_9_219)) (* (* 2.0 l_0_9_190) l_0_9_220))))
 (let ((?x54332 (- (- ?x54328 (* (* 2.0 l_0_9_277) l_0_9_307)) (* (* 2.0 l_0_9_278) l_0_9_308))))
 (let ((?x54336 (- (- ?x54332 (* (* 2.0 l_0_9_279) l_0_9_309)) (* (* 2.0 l_0_9_280) l_0_9_310))))
 (= ?x54336 0.0))))))
(assert
 (let ((?x54389 (* l_0_9_285 l_0_9_285)))
 (let ((?x54387 (* l_0_9_284 l_0_9_284)))
 (let ((?x54385 (* l_0_9_283 l_0_9_283)))
 (let ((?x54383 (* l_0_9_282 l_0_9_282)))
 (let ((?x54381 (* l_0_9_281 l_0_9_281)))
 (let ((?x54371 (- (* (* (- 1.0) l_0_9_191) l_0_9_191) (* (* 1.0 l_0_9_192) l_0_9_192))))
 (let ((?x54377 (- (- ?x54371 (* (* 1.0 l_0_9_193) l_0_9_193)) (* (* 1.0 l_0_9_194) l_0_9_194))))
 (let ((?x54386 (- (- (- (- ?x54377 (* (* 1.0 l_0_9_195) l_0_9_195)) ?x54381) ?x54383) ?x54385)))
 (= (- (- ?x54386 ?x54387) ?x54389) 0.0))))))))))
(assert
 (let ((?x54420 (- (* (* (- 2.0) l_0_9_191) l_0_9_196) (* (* 2.0 l_0_9_192) l_0_9_197))))
 (let ((?x54424 (- (- ?x54420 (* (* 2.0 l_0_9_193) l_0_9_198)) (* (* 2.0 l_0_9_194) l_0_9_199))))
 (let ((?x54428 (- (- ?x54424 (* (* 2.0 l_0_9_195) l_0_9_200)) (* (* 2.0 l_0_9_281) l_0_9_286))))
 (let ((?x54432 (- (- ?x54428 (* (* 2.0 l_0_9_282) l_0_9_287)) (* (* 2.0 l_0_9_283) l_0_9_288))))
 (let ((?x54436 (- (- ?x54432 (* (* 2.0 l_0_9_284) l_0_9_289)) (* (* 2.0 l_0_9_285) l_0_9_290))))
 (= ?x54436 0.0)))))))
(assert
 (let ((?x54456 (- (* (* (- 2.0) l_0_9_191) l_0_9_202) (* (* 2.0 l_0_9_192) l_0_9_203))))
 (let ((?x54460 (- (- ?x54456 (* (* 2.0 l_0_9_193) l_0_9_204)) (* (* 2.0 l_0_9_194) l_0_9_205))))
 (let ((?x54464 (- (- ?x54460 (* (* 2.0 l_0_9_195) l_0_9_206)) (* (* 2.0 l_0_9_281) l_0_9_292))))
 (let ((?x54468 (- (- ?x54464 (* (* 2.0 l_0_9_282) l_0_9_293)) (* (* 2.0 l_0_9_283) l_0_9_294))))
 (let ((?x54472 (- (- ?x54468 (* (* 2.0 l_0_9_284) l_0_9_295)) (* (* 2.0 l_0_9_285) l_0_9_296))))
 (= ?x54472 0.0)))))))
(assert
 (let ((?x54507 (- (* (* (- 2.0) l_0_9_191) l_0_9_217) (* (* 2.0 l_0_9_192) l_0_9_218))))
 (let ((?x54511 (- (- ?x54507 (* (* 2.0 l_0_9_193) l_0_9_219)) (* (* 2.0 l_0_9_194) l_0_9_220))))
 (let ((?x54515 (- (- ?x54511 (* (* 2.0 l_0_9_195) l_0_9_221)) (* (* 2.0 l_0_9_281) l_0_9_307))))
 (let ((?x54519 (- (- ?x54515 (* (* 2.0 l_0_9_282) l_0_9_308)) (* (* 2.0 l_0_9_283) l_0_9_309))))
 (let ((?x54523 (- (- ?x54519 (* (* 2.0 l_0_9_284) l_0_9_310)) (* (* 2.0 l_0_9_285) l_0_9_311))))
 (= ?x54523 0.0)))))))
(assert
 (let ((?x54582 (* l_0_9_291 l_0_9_291)))
 (let ((?x54580 (* l_0_9_290 l_0_9_290)))
 (let ((?x54578 (* l_0_9_289 l_0_9_289)))
 (let ((?x54576 (* l_0_9_288 l_0_9_288)))
 (let ((?x54574 (* l_0_9_287 l_0_9_287)))
 (let ((?x54572 (* l_0_9_286 l_0_9_286)))
 (let ((?x54559 (- (* (* (- 1.0) l_0_9_196) l_0_9_196) (* (* 1.0 l_0_9_197) l_0_9_197))))
 (let ((?x54565 (- (- ?x54559 (* (* 1.0 l_0_9_198) l_0_9_198)) (* (* 1.0 l_0_9_199) l_0_9_199))))
 (let ((?x54571 (- (- ?x54565 (* (* 1.0 l_0_9_200) l_0_9_200)) (* (* 1.0 l_0_9_201) l_0_9_201))))
 (= (- (- (- (- (- (- ?x54571 ?x54572) ?x54574) ?x54576) ?x54578) ?x54580) ?x54582) 0.0)))))))))))
(assert
 (let ((?x54613 (- (* (* (- 2.0) l_0_9_196) l_0_9_217) (* (* 2.0 l_0_9_197) l_0_9_218))))
 (let ((?x54617 (- (- ?x54613 (* (* 2.0 l_0_9_198) l_0_9_219)) (* (* 2.0 l_0_9_199) l_0_9_220))))
 (let ((?x54621 (- (- ?x54617 (* (* 2.0 l_0_9_200) l_0_9_221)) (* (* 2.0 l_0_9_201) l_0_9_222))))
 (let ((?x54625 (- (- ?x54621 (* (* 2.0 l_0_9_286) l_0_9_307)) (* (* 2.0 l_0_9_287) l_0_9_308))))
 (let ((?x54629 (- (- ?x54625 (* (* 2.0 l_0_9_288) l_0_9_309)) (* (* 2.0 l_0_9_289) l_0_9_310))))
 (let ((?x54633 (- (- ?x54629 (* (* 2.0 l_0_9_290) l_0_9_311)) (* (* 2.0 l_0_9_291) l_0_9_312))))
 (= ?x54633 0.0))))))))
(assert
 (let ((?x54714 (* l_0_9_298 l_0_9_298)))
 (let ((?x54712 (* l_0_9_297 l_0_9_297)))
 (let ((?x54710 (* l_0_9_296 l_0_9_296)))
 (let ((?x54708 (* l_0_9_295 l_0_9_295)))
 (let ((?x54706 (* l_0_9_294 l_0_9_294)))
 (let ((?x54704 (* l_0_9_293 l_0_9_293)))
 (let ((?x54702 (* l_0_9_292 l_0_9_292)))
 (let ((?x54686 (- (* (* (- 1.0) l_0_9_202) l_0_9_202) (* (* 1.0 l_0_9_203) l_0_9_203))))
 (let ((?x54692 (- (- ?x54686 (* (* 1.0 l_0_9_204) l_0_9_204)) (* (* 1.0 l_0_9_205) l_0_9_205))))
 (let ((?x54698 (- (- ?x54692 (* (* 1.0 l_0_9_206) l_0_9_206)) (* (* 1.0 l_0_9_207) l_0_9_207))))
 (let ((?x54707 (- (- (- (- ?x54698 (* (* 1.0 l_0_9_208) l_0_9_208)) ?x54702) ?x54704) ?x54706)))
 (= (- (- (- (- ?x54707 ?x54708) ?x54710) ?x54712) ?x54714) 0.0)))))))))))))
(assert
 (let ((?x54786 (* l_0_9_315 l_0_9_315)))
 (let ((?x54784 (* l_0_9_314 l_0_9_314)))
 (let ((?x54782 (* l_0_9_313 l_0_9_313)))
 (let ((?x54780 (* l_0_9_312 l_0_9_312)))
 (let ((?x54778 (* l_0_9_311 l_0_9_311)))
 (let ((?x54776 (* l_0_9_310 l_0_9_310)))
 (let ((?x54774 (* l_0_9_309 l_0_9_309)))
 (let ((?x54772 (* l_0_9_308 l_0_9_308)))
 (let ((?x54770 (* l_0_9_307 l_0_9_307)))
 (let ((?x54748 (- (* (* (- 1.0) l_0_9_217) l_0_9_217) (* (* 1.0 l_0_9_218) l_0_9_218))))
 (let ((?x54754 (- (- ?x54748 (* (* 1.0 l_0_9_219) l_0_9_219)) (* (* 1.0 l_0_9_220) l_0_9_220))))
 (let ((?x54760 (- (- ?x54754 (* (* 1.0 l_0_9_221) l_0_9_221)) (* (* 1.0 l_0_9_222) l_0_9_222))))
 (let ((?x54766 (- (- ?x54760 (* (* 1.0 l_0_9_223) l_0_9_223)) (* (* 1.0 l_0_9_224) l_0_9_224))))
 (let ((?x54775 (- (- (- (- ?x54766 (* (* 1.0 l_0_9_225) l_0_9_225)) ?x54770) ?x54772) ?x54774)))
 (= (- (- (- (- (- (- ?x54775 ?x54776) ?x54778) ?x54780) ?x54782) ?x54784) ?x54786) 0.0))))))))))))))))
(assert
 (>= l_0_9_1 0.0))
(assert
 (>= l_0_9_3 0.0))
(assert
 (>= l_0_9_6 0.0))
(assert
 (>= l_0_9_10 0.0))
(assert
 (>= l_0_9_15 0.0))
(assert
 (>= l_0_9_21 0.0))
(assert
 (>= l_0_9_28 0.0))
(assert
 (>= l_0_9_36 0.0))
(assert
 (>= l_0_9_45 0.0))
(assert
 (>= l_0_9_46 0.0))
(assert
 (>= l_0_9_48 0.0))
(assert
 (>= l_0_9_51 0.0))
(assert
 (>= l_0_9_55 0.0))
(assert
 (>= l_0_9_60 0.0))
(assert
 (>= l_0_9_66 0.0))
(assert
 (>= l_0_9_73 0.0))
(assert
 (>= l_0_9_81 0.0))
(assert
 (>= l_0_9_90 0.0))
(assert
 (>= l_0_9_91 0.0))
(assert
 (>= l_0_9_93 0.0))
(assert
 (>= l_0_9_96 0.0))
(assert
 (>= l_0_9_100 0.0))
(assert
 (>= l_0_9_105 0.0))
(assert
 (>= l_0_9_111 0.0))
(assert
 (>= l_0_9_118 0.0))
(assert
 (>= l_0_9_126 0.0))
(assert
 (>= l_0_9_135 0.0))
(assert
 (>= l_0_9_136 0.0))
(assert
 (>= l_0_9_138 0.0))
(assert
 (>= l_0_9_141 0.0))
(assert
 (>= l_0_9_145 0.0))
(assert
 (>= l_0_9_150 0.0))
(assert
 (>= l_0_9_156 0.0))
(assert
 (>= l_0_9_163 0.0))
(assert
 (>= l_0_9_171 0.0))
(assert
 (>= l_0_9_180 0.0))
(assert
 (>= l_0_9_181 0.0))
(assert
 (>= l_0_9_183 0.0))
(assert
 (>= l_0_9_186 0.0))
(assert
 (>= l_0_9_190 0.0))
(assert
 (>= l_0_9_195 0.0))
(assert
 (>= l_0_9_201 0.0))
(assert
 (>= l_0_9_208 0.0))
(assert
 (>= l_0_9_216 0.0))
(assert
 (>= l_0_9_225 0.0))
(assert
 (>= l_0_9_226 0.0))
(assert
 (>= l_0_9_228 0.0))
(assert
 (>= l_0_9_231 0.0))
(assert
 (>= l_0_9_235 0.0))
(assert
 (>= l_0_9_240 0.0))
(assert
 (>= l_0_9_246 0.0))
(assert
 (>= l_0_9_253 0.0))
(assert
 (>= l_0_9_261 0.0))
(assert
 (>= l_0_9_270 0.0))
(assert
 (>= l_0_9_271 0.0))
(assert
 (>= l_0_9_273 0.0))
(assert
 (>= l_0_9_276 0.0))
(assert
 (>= l_0_9_280 0.0))
(assert
 (>= l_0_9_285 0.0))
(assert
 (>= l_0_9_291 0.0))
(assert
 (>= l_0_9_298 0.0))
(assert
 (>= l_0_9_306 0.0))
(assert
 (>= l_0_9_315 0.0))
(assert
 (let ((?x54901 (* l_0_10_46 l_0_10_46)))
 (let ((?x54893 (* l_0_10_226 l_0_10_226)))
 (let ((?x54894 (+ (- (* l_0_10_1 l_0_10_1) (* (* 2.0 l_0_10_181) l_0_10_184)) ?x54893)))
 (let ((?x54900 (- (- ?x54894 (* (* 2.0 l_0_10_271) l_0_10_274)) (* (* 2.0 l_0_10_316) l_0_10_319))))
 (= (+ (- ?x54900 ?x54901) 1.0) 0.0))))))
(assert
 (let ((?x54901 (* l_0_10_46 l_0_10_46)))
 (let ((?x54920 (* (- l_0_10_1) l_0_10_1)))
 (let ((?x54926 (- (- ?x54920 (* (* 2.0 l_0_10_196) l_0_10_202)) (* (* 2.0 l_0_10_197) l_0_10_203))))
 (let ((?x54932 (- (- ?x54926 (* (* 2.0 l_0_10_198) l_0_10_204)) (* (* 2.0 l_0_10_199) l_0_10_205))))
 (let ((?x54938 (- (- ?x54932 (* (* 2.0 l_0_10_200) l_0_10_206)) (* (* 2.0 l_0_10_201) l_0_10_207))))
 (let ((?x54944 (- (- ?x54938 (* (* 2.0 l_0_10_286) l_0_10_292)) (* (* 2.0 l_0_10_287) l_0_10_293))))
 (let ((?x54950 (- (- ?x54944 (* (* 2.0 l_0_10_288) l_0_10_294)) (* (* 2.0 l_0_10_289) l_0_10_295))))
 (let ((?x54956 (- (- ?x54950 (* (* 2.0 l_0_10_290) l_0_10_296)) (* (* 2.0 l_0_10_291) l_0_10_297))))
 (let ((?x54962 (- (- ?x54956 (* (* 2.0 l_0_10_331) l_0_10_337)) (* (* 2.0 l_0_10_332) l_0_10_338))))
 (let ((?x54968 (- (- ?x54962 (* (* 2.0 l_0_10_333) l_0_10_339)) (* (* 2.0 l_0_10_334) l_0_10_340))))
 (let ((?x54974 (- (- ?x54968 (* (* 2.0 l_0_10_335) l_0_10_341)) (* (* 2.0 l_0_10_336) l_0_10_342))))
 (= (- (+ ?x54974 ?x54901) 1.0) 0.0)))))))))))))
(assert
 (let ((?x54901 (* l_0_10_46 l_0_10_46)))
 (let ((?x54920 (* (- l_0_10_1) l_0_10_1)))
 (let ((?x55025 (- (- ?x54920 (* (* 2.0 l_0_10_187) l_0_10_191)) (* (* 2.0 l_0_10_188) l_0_10_192))))
 (let ((?x55031 (- (- ?x55025 (* (* 2.0 l_0_10_189) l_0_10_193)) (* (* 2.0 l_0_10_190) l_0_10_194))))
 (let ((?x55037 (- (- ?x55031 (* (* 2.0 l_0_10_277) l_0_10_281)) (* (* 2.0 l_0_10_278) l_0_10_282))))
 (let ((?x55043 (- (- ?x55037 (* (* 2.0 l_0_10_279) l_0_10_283)) (* (* 2.0 l_0_10_280) l_0_10_284))))
 (let ((?x55049 (- (- ?x55043 (* (* 2.0 l_0_10_322) l_0_10_326)) (* (* 2.0 l_0_10_323) l_0_10_327))))
 (let ((?x55055 (- (- ?x55049 (* (* 2.0 l_0_10_324) l_0_10_328)) (* (* 2.0 l_0_10_325) l_0_10_329))))
 (= (- (+ ?x55055 ?x54901) 1.0) 0.0))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55102 (* ?x55101 l_0_10_47)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55100 (* ?x55099 l_0_10_2)))
 (= (+ ?x55100 ?x55102) 0.0))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x55166 (* ?x55165 l_0_10_72)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x55163 (* ?x55162 l_0_10_71)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x55160 (* ?x55159 l_0_10_70)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x55157 (* ?x55156 l_0_10_69)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x55154 (* ?x55153 l_0_10_68)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x55151 (* ?x55150 l_0_10_67)))
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55148 (* ?x55101 l_0_10_49)))
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x55146 (* ?x55145 l_0_10_252)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x55143 (* ?x55142 l_0_10_251)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x55140 (* ?x55139 l_0_10_250)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x55137 (* ?x55136 l_0_10_249)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x55134 (* ?x55133 l_0_10_248)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x55131 (* ?x55130 l_0_10_247)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x55128 (* ?x55127 l_0_10_27)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x55125 (* ?x55124 l_0_10_26)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x55122 (* ?x55121 l_0_10_25)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55119 (* ?x55118 l_0_10_24)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55116 (* ?x55115 l_0_10_23)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x55109 (* ?x55108 l_0_10_22)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55106 (* ?x55099 l_0_10_4)))
 (let ((?x55132 (+ (+ (+ (+ (+ (+ (+ ?x55106 ?x55109) ?x55116) ?x55119) ?x55122) ?x55125) ?x55128) ?x55131)))
 (let ((?x55152 (- (+ (+ (+ (+ (+ (+ ?x55132 ?x55134) ?x55137) ?x55140) ?x55143) ?x55146) ?x55148) ?x55151)))
 (= (- (- (- (- (- ?x55152 ?x55154) ?x55157) ?x55160) ?x55163) ?x55166) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55229 (* ?x55101 l_0_10_52)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) ?x55229) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55235 (* ?x55101 l_0_10_56)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_11) ?x55235) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55245 (* ?x55101 l_0_10_61)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x55245) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55255 (* ?x55101 l_0_10_67)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_22) ?x55255) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55311 (* ?x55101 l_0_10_74)))
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x55146 (* ?x55145 l_0_10_252)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x55143 (* ?x55142 l_0_10_251)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x55140 (* ?x55139 l_0_10_250)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x55137 (* ?x55136 l_0_10_249)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x55134 (* ?x55133 l_0_10_248)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x55131 (* ?x55130 l_0_10_247)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x55303 (* ?x55302 l_0_10_162)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x55300 (* ?x55299 l_0_10_161)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x55297 (* ?x55296 l_0_10_160)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x55294 (* ?x55293 l_0_10_159)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x55291 (* ?x55290 l_0_10_158)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x55288 (* ?x55287 l_0_10_157)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x55285 (* ?x55284 l_0_10_117)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x55282 (* ?x55281 l_0_10_116)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x55279 (* ?x55278 l_0_10_115)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55276 (* ?x55275 l_0_10_114)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55273 (* ?x55272 l_0_10_113)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55263 (* ?x55099 l_0_10_29)))
 (let ((?x55280 (+ (+ (+ (+ ?x55263 (* (* 2.0 l_0_10_106) l_0_10_112)) ?x55273) ?x55276) ?x55279)))
 (let ((?x55301 (- (- (- (- (- (+ (+ ?x55280 ?x55282) ?x55285) ?x55288) ?x55291) ?x55294) ?x55297) ?x55300)))
 (let ((?x55310 (- (- (- (- (- (- (- ?x55301 ?x55303) ?x55131) ?x55134) ?x55137) ?x55140) ?x55143) ?x55146)))
 (= (+ ?x55310 ?x55311) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55366 (* ?x55101 l_0_10_82)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x55364 (* ?x55363 l_0_10_151)))
 (let ((?x55265 (* 2.0 l_0_10_106)))
 (let ((?x19579 (* ?x55265 l_0_10_91)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x33322 (* ?x55099 l_0_10_37)))
 (= (+ (+ (- ?x33322 ?x19579) ?x55364) ?x55366) 0.0))))))))))
(assert
 (let ((?x55390 (* l_0_10_48 l_0_10_48)))
 (let ((?x55388 (* l_0_10_47 l_0_10_47)))
 (let ((?x55391 (+ (+ (- (* (- l_0_10_2) l_0_10_2) (* l_0_10_3 l_0_10_3)) ?x55388) ?x55390)))
 (= ?x55391 0.0)))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55412 (* ?x55411 l_0_10_50)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55409 (* ?x55408 l_0_10_49)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55406 (* ?x55405 l_0_10_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_4) ?x55406) ?x55409) ?x55412) 0.0))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55450 (* ?x55411 l_0_10_53)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55448 (* ?x55408 l_0_10_52)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55446 (* ?x55405 l_0_10_8)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55444 (* ?x55443 l_0_10_7)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x55303 (* ?x55302 l_0_10_162)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x55300 (* ?x55299 l_0_10_161)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x55297 (* ?x55296 l_0_10_160)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x55294 (* ?x55293 l_0_10_159)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x55291 (* ?x55290 l_0_10_158)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x55288 (* ?x55287 l_0_10_157)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x55285 (* ?x55284 l_0_10_117)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x55282 (* ?x55281 l_0_10_116)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x55279 (* ?x55278 l_0_10_115)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55276 (* ?x55275 l_0_10_114)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55273 (* ?x55272 l_0_10_113)))
 (let ((?x55435 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x55273) ?x55276) ?x55279) ?x55282)))
 (let ((?x55442 (+ (+ (+ (+ (+ (+ (- ?x55435 ?x55285) ?x55288) ?x55291) ?x55294) ?x55297) ?x55300) ?x55303)))
 (= (+ (+ (- (- ?x55442 ?x55444) ?x55446) ?x55448) ?x55450) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55485 (* ?x55411 l_0_10_57)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55483 (* ?x55408 l_0_10_56)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55481 (* ?x55480 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_11) l_0_10_2) ?x55481) ?x55483) ?x55485) 0.0))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55509 (* ?x55411 l_0_10_62)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55507 (* ?x55408 l_0_10_61)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55500 (* ?x55115 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_16) l_0_10_2) ?x55500) ?x55507) ?x55509) 0.0))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55533 (* ?x55411 l_0_10_68)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55531 (* ?x55408 l_0_10_67)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55524 (* ?x55523 l_0_10_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_22) ?x55524) ?x55531) ?x55533) 0.0))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55556 (* ?x55411 l_0_10_75)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55554 (* ?x55408 l_0_10_74)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55547 (* ?x55405 l_0_10_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_2) l_0_10_29) ?x55547) ?x55554) ?x55556) 0.0))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55589 (* ?x55411 l_0_10_83)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55587 (* ?x55408 l_0_10_82)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55585 (* ?x55405 l_0_10_38)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55583 (* ?x55443 l_0_10_37)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x55581 (* ?x55580 l_0_10_152)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x55578 (* ?x55577 l_0_10_151)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55570 (* ?x55272 l_0_10_93)))
 (let ((?x55582 (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_92) ?x55570) ?x55578) ?x55581)))
 (= (+ (+ (- (- ?x55582 ?x55583) ?x55585) ?x55587) ?x55589) 0.0)))))))))))))))))
(assert
 (let ((?x55630 (* l_0_10_6 l_0_10_6)))
 (let ((?x55628 (* l_0_10_51 l_0_10_51)))
 (let ((?x55626 (* l_0_10_50 l_0_10_50)))
 (let ((?x55624 (* l_0_10_5 l_0_10_5)))
 (let ((?x55627 (+ (- (+ (* (- l_0_10_4) l_0_10_4) (* l_0_10_49 l_0_10_49)) ?x55624) ?x55626)))
 (= (- (+ ?x55627 ?x55628) ?x55630) 0.0)))))))
(assert
 (let ((?x55660 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55657 (* ?x55656 l_0_10_54)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55654 (* ?x55653 l_0_10_53)))
 (let ((?x55651 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55648 (* ?x55647 l_0_10_52)))
 (let ((?x55658 (+ (+ (- (+ (* (* (- 2.0) l_0_10_4) l_0_10_7) ?x55648) ?x55651) ?x55654) ?x55657)))
 (= (- ?x55658 ?x55660) 0.0)))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55701 (* ?x55656 l_0_10_58)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55699 (* ?x55653 l_0_10_57)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55697 (* ?x55647 l_0_10_56)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55695 (* ?x55694 l_0_10_6)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55692 (* ?x55480 l_0_10_5)))
 (let ((?x55700 (+ (+ (- (- (* (* (- 2.0) l_0_10_11) l_0_10_4) ?x55692) ?x55695) ?x55697) ?x55699)))
 (= (+ ?x55700 ?x55701) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55736 (* ?x55656 l_0_10_63)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55734 (* ?x55653 l_0_10_62)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55732 (* ?x55647 l_0_10_61)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55724 (* ?x55118 l_0_10_6)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55721 (* ?x55115 l_0_10_5)))
 (let ((?x55735 (+ (+ (- (- (* (* (- 2.0) l_0_10_16) l_0_10_4) ?x55721) ?x55724) ?x55732) ?x55734)))
 (= (+ ?x55735 ?x55736) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55773 (* ?x55656 l_0_10_69)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55771 (* ?x55653 l_0_10_68)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55769 (* ?x55647 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x55767 (* ?x55766 l_0_10_6)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55758 (* ?x55523 l_0_10_5)))
 (let ((?x55772 (+ (+ (- (- (* (* (- 2.0) l_0_10_22) l_0_10_4) ?x55758) ?x55767) ?x55769) ?x55771)))
 (= (+ ?x55772 ?x55773) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55811 (* ?x55656 l_0_10_76)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55809 (* ?x55653 l_0_10_75)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55807 (* ?x55647 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x55805 (* ?x55804 l_0_10_6)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x55796 (* ?x55795 l_0_10_5)))
 (let ((?x55810 (+ (+ (- (- (* (* (- 2.0) l_0_10_29) l_0_10_4) ?x55796) ?x55805) ?x55807) ?x55809)))
 (= (+ ?x55810 ?x55811) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55858 (* ?x55656 l_0_10_84)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55856 (* ?x55653 l_0_10_83)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55854 (* ?x55647 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x55852 (* ?x55851 l_0_10_6)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x55849 (* ?x55848 l_0_10_5)))
 (let ((?x55845 (* 2.0 l_0_10_37)))
 (let ((?x55846 (* ?x55845 l_0_10_4)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x55843 (* ?x55842 l_0_10_153)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x55840 (* ?x55839 l_0_10_152)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x55837 (* ?x55836 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55828 (* ?x55275 l_0_10_96)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55825 (* ?x55272 l_0_10_95)))
 (let ((?x55841 (+ (+ (- (- (* (* (- 2.0) l_0_10_106) l_0_10_94) ?x55825) ?x55828) ?x55837) ?x55840)))
 (let ((?x55844 (+ ?x55841 ?x55843)))
 (= (+ (+ (+ (- (- (- ?x55844 ?x55846) ?x55849) ?x55852) ?x55854) ?x55856) ?x55858) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55926 (* l_0_10_9 l_0_10_9)))
 (let ((?x55924 (* l_0_10_8 l_0_10_8)))
 (let ((?x55922 (* l_0_10_7 l_0_10_7)))
 (let ((?x55920 (* l_0_10_55 l_0_10_55)))
 (let ((?x55918 (* l_0_10_54 l_0_10_54)))
 (let ((?x55916 (* l_0_10_53 l_0_10_53)))
 (let ((?x55917 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_52 l_0_10_52)) ?x55916)))
 (= (- (- (- (+ (+ ?x55917 ?x55918) ?x55920) ?x55922) ?x55924) ?x55926) 0.0)))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x55166 (* ?x55165 l_0_10_72)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x55163 (* ?x55162 l_0_10_71)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x55160 (* ?x55159 l_0_10_70)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x55157 (* ?x55156 l_0_10_69)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x55154 (* ?x55153 l_0_10_68)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x55151 (* ?x55150 l_0_10_67)))
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x55968 (* ?x55967 l_0_10_59)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x55965 (* ?x55964 l_0_10_58)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x55962 (* ?x55961 l_0_10_57)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x55959 (* ?x55958 l_0_10_56)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x55128 (* ?x55127 l_0_10_27)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x55125 (* ?x55124 l_0_10_26)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x55122 (* ?x55121 l_0_10_25)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55119 (* ?x55118 l_0_10_24)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55116 (* ?x55115 l_0_10_23)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x55109 (* ?x55108 l_0_10_22)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55950 (* ?x55694 l_0_10_9)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55948 (* ?x55480 l_0_10_8)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x55946 (* ?x55945 l_0_10_7)))
 (let ((?x55951 (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_14) ?x55946) ?x55948) ?x55950)))
 (let ((?x55960 (+ (- (- (- (- (- (- ?x55951 ?x55109) ?x55116) ?x55119) ?x55122) ?x55125) ?x55128) ?x55959)))
 (let ((?x55973 (+ (+ (+ (+ (+ (+ (+ ?x55960 ?x55962) ?x55965) ?x55968) ?x55151) ?x55154) ?x55157) ?x55160)))
 (= (+ (+ ?x55973 ?x55163) ?x55166) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56011 (* ?x55967 l_0_10_64)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56009 (* ?x55964 l_0_10_63)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56007 (* ?x55961 l_0_10_62)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56005 (* ?x55958 l_0_10_61)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56003 (* ?x55118 l_0_10_9)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56001 (* ?x55115 l_0_10_8)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x55999 (* ?x55108 l_0_10_7)))
 (let ((?x56006 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x55999) ?x56001) ?x56003) ?x56005)))
 (= (+ (+ (+ ?x56006 ?x56007) ?x56009) ?x56011) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56049 (* ?x55967 l_0_10_70)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56047 (* ?x55964 l_0_10_69)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56045 (* ?x55961 l_0_10_68)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56043 (* ?x55958 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56041 (* ?x55766 l_0_10_9)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56032 (* ?x55523 l_0_10_8)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x44871 (* ?x44877 l_0_10_7)))
 (let ((?x56044 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_25) ?x44871) ?x56032) ?x56041) ?x56043)))
 (= (+ (+ (+ ?x56044 ?x56045) ?x56047) ?x56049) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56088 (* ?x55967 l_0_10_77)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56086 (* ?x55964 l_0_10_76)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56084 (* ?x55961 l_0_10_75)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56082 (* ?x55958 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56080 (* ?x55804 l_0_10_9)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56071 (* ?x55795 l_0_10_8)))
 (let ((?x56066 (* 2.0 l_0_10_29)))
 (let ((?x56068 (* ?x56066 l_0_10_7)))
 (let ((?x56083 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_32) ?x56068) ?x56071) ?x56080) ?x56082)))
 (= (+ (+ (+ ?x56083 ?x56084) ?x56086) ?x56088) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x55967 l_0_10_85)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56148 (* ?x55964 l_0_10_84)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56146 (* ?x55961 l_0_10_83)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56144 (* ?x55958 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x56142 (* ?x55851 l_0_10_9)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x56140 (* ?x55848 l_0_10_8)))
 (let ((?x55845 (* 2.0 l_0_10_37)))
 (let ((?x56138 (* ?x55845 l_0_10_7)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x56136 (* ?x56135 l_0_10_154)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x56133 (* ?x56132 l_0_10_153)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x56130 (* ?x56129 l_0_10_152)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x56127 (* ?x56126 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56124 (* ?x55275 l_0_10_99)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56122 (* ?x55272 l_0_10_98)))
 (let ((?x55265 (* 2.0 l_0_10_106)))
 (let ((?x56113 (* ?x55265 l_0_10_97)))
 (let ((?x56108 (* 2.0 l_0_10_100)))
 (let ((?x56110 (* ?x56108 l_0_10_109)))
 (let ((?x55943 (* (- 2.0) l_0_10_10)))
 (let ((?x44908 (* ?x55943 l_0_10_40)))
 (let ((?x56134 (+ (+ (+ (- (- (- (- ?x44908 ?x56110) ?x56113) ?x56122) ?x56124) ?x56127) ?x56130) ?x56133)))
 (let ((?x56149 (+ (+ (+ (- (- (- (+ ?x56134 ?x56136) ?x56138) ?x56140) ?x56142) ?x56144) ?x56146) ?x56148)))
 (= (+ ?x56149 ?x56150) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56205 (* l_0_10_60 l_0_10_60)))
 (let ((?x56203 (* l_0_10_59 l_0_10_59)))
 (let ((?x56201 (* l_0_10_58 l_0_10_58)))
 (let ((?x56199 (* l_0_10_57 l_0_10_57)))
 (let ((?x56197 (* l_0_10_56 l_0_10_56)))
 (let ((?x56195 (* l_0_10_15 l_0_10_15)))
 (let ((?x56193 (* l_0_10_14 l_0_10_14)))
 (let ((?x56180 (* l_0_10_13 l_0_10_13)))
 (let ((?x56192 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x56180)))
 (let ((?x56206 (+ (+ (+ (+ (+ (- (- ?x56192 ?x56193) ?x56195) ?x56197) ?x56199) ?x56201) ?x56203) ?x56205)))
 (= ?x56206 0.0))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56246 (* ?x56245 l_0_10_65)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56243 (* ?x56242 l_0_10_64)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56240 (* ?x56239 l_0_10_63)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56237 (* ?x56236 l_0_10_62)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56234 (* ?x56233 l_0_10_61)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56231 (* ?x56230 l_0_10_20)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56228 (* ?x56227 l_0_10_19)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56225 (* ?x55694 l_0_10_18)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56223 (* ?x55480 l_0_10_17)))
 (let ((?x56232 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_16) ?x56223) ?x56225) ?x56228) ?x56231)))
 (= (+ (+ (+ (+ (+ ?x56232 ?x56234) ?x56237) ?x56240) ?x56243) ?x56246) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56293 (* ?x56245 l_0_10_71)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56291 (* ?x56242 l_0_10_70)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56289 (* ?x56239 l_0_10_69)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56287 (* ?x56236 l_0_10_68)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56285 (* ?x56233 l_0_10_67)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56283 (* ?x56230 l_0_10_26)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56273 (* ?x56227 l_0_10_25)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56270 (* ?x55694 l_0_10_24)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56266 (* ?x55480 l_0_10_23)))
 (let ((?x56284 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_22) ?x56266) ?x56270) ?x56273) ?x56283)))
 (= (+ (+ (+ (+ (+ ?x56284 ?x56285) ?x56287) ?x56289) ?x56291) ?x56293) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56328 (* ?x56245 l_0_10_78)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56326 (* ?x56242 l_0_10_77)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56324 (* ?x56239 l_0_10_76)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56322 (* ?x56236 l_0_10_75)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56320 (* ?x56233 l_0_10_74)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56318 (* ?x56230 l_0_10_33)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56308 (* ?x56227 l_0_10_32)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x33809 (* ?x55694 l_0_10_31)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x33798 (* ?x55480 l_0_10_30)))
 (let ((?x56319 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_29) ?x33798) ?x33809) ?x56308) ?x56318)))
 (= (+ (+ (+ (+ (+ ?x56319 ?x56320) ?x56322) ?x56324) ?x56326) ?x56328) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56404 (* ?x56245 l_0_10_86)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56402 (* ?x56242 l_0_10_85)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56400 (* ?x56239 l_0_10_84)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56398 (* ?x56236 l_0_10_83)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56396 (* ?x56233 l_0_10_82)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x56394 (* ?x56393 l_0_10_155)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56391 (* ?x56230 l_0_10_41)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x56389 (* ?x56388 l_0_10_154)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x56386 (* ?x56385 l_0_10_153)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x56383 (* ?x56382 l_0_10_152)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x56380 (* ?x56379 l_0_10_151)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56377 (* ?x56227 l_0_10_40)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56375 (* ?x55694 l_0_10_39)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56373 (* ?x55480 l_0_10_38)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x56371 (* ?x55945 l_0_10_37)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x56369 (* ?x56368 l_0_10_110)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x56366 (* ?x56365 l_0_10_109)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x56363 (* ?x56362 l_0_10_108)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x56360 (* ?x56359 l_0_10_107)))
 (let ((?x56370 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_106) ?x56360) ?x56363) ?x56366) ?x56369)))
 (let ((?x56387 (+ (+ (+ (- (- (- (- ?x56370 ?x56371) ?x56373) ?x56375) ?x56377) ?x56380) ?x56383) ?x56386)))
 (let ((?x56403 (+ (+ (+ (+ (+ (- (+ ?x56387 ?x56389) ?x56391) ?x56394) ?x56396) ?x56398) ?x56400) ?x56402)))
 (= (+ ?x56403 ?x56404) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56491 (* l_0_10_66 l_0_10_66)))
 (let ((?x56489 (* l_0_10_65 l_0_10_65)))
 (let ((?x56487 (* l_0_10_64 l_0_10_64)))
 (let ((?x56485 (* l_0_10_63 l_0_10_63)))
 (let ((?x56483 (* l_0_10_62 l_0_10_62)))
 (let ((?x56481 (* l_0_10_61 l_0_10_61)))
 (let ((?x56479 (* l_0_10_21 l_0_10_21)))
 (let ((?x56477 (* l_0_10_20 l_0_10_20)))
 (let ((?x56462 (* l_0_10_19 l_0_10_19)))
 (let ((?x56459 (* l_0_10_18 l_0_10_18)))
 (let ((?x56461 (- (- (* (- l_0_10_16) l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56459)))
 (let ((?x56488 (+ (+ (+ (+ (- (- (- ?x56461 ?x56462) ?x56477) ?x56479) ?x56481) ?x56483) ?x56485) ?x56487)))
 (= (+ (+ ?x56488 ?x56489) ?x56491) 0.0))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x55166 (* ?x55165 l_0_10_72)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x55163 (* ?x55162 l_0_10_71)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x55160 (* ?x55159 l_0_10_70)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x55157 (* ?x55156 l_0_10_69)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x55154 (* ?x55153 l_0_10_68)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x55151 (* ?x55150 l_0_10_67)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x55128 (* ?x55127 l_0_10_27)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x55125 (* ?x55124 l_0_10_26)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x55122 (* ?x55121 l_0_10_25)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55119 (* ?x55118 l_0_10_24)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55116 (* ?x55115 l_0_10_23)))
 (let ((?x56514 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_22) ?x55116) ?x55119) ?x55122) ?x55125)))
 (let ((?x56521 (+ (+ (+ (+ (+ (+ (- ?x56514 ?x55128) ?x55151) ?x55154) ?x55157) ?x55160) ?x55163) ?x55166)))
 (= ?x56521 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56556 (* ?x55165 l_0_10_79)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56554 (* ?x55162 l_0_10_78)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56552 (* ?x55159 l_0_10_77)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56550 (* ?x55156 l_0_10_76)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56548 (* ?x55153 l_0_10_75)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56546 (* ?x55150 l_0_10_74)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56544 (* ?x55127 l_0_10_34)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56542 (* ?x55124 l_0_10_33)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56540 (* ?x55121 l_0_10_32)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56538 (* ?x55118 l_0_10_31)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56536 (* ?x55115 l_0_10_30)))
 (let ((?x56543 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_29) ?x56536) ?x56538) ?x56540) ?x56542)))
 (let ((?x56557 (+ (+ (+ (+ (+ (+ (- ?x56543 ?x56544) ?x56546) ?x56548) ?x56550) ?x56552) ?x56554) ?x56556)))
 (= ?x56557 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56633 (* ?x55165 l_0_10_87)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56631 (* ?x55162 l_0_10_86)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56629 (* ?x55159 l_0_10_85)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56627 (* ?x55156 l_0_10_84)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56625 (* ?x55153 l_0_10_83)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56623 (* ?x55150 l_0_10_82)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56621 (* ?x55127 l_0_10_42)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56619 (* ?x55124 l_0_10_41)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56617 (* ?x55121 l_0_10_40)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56615 (* ?x55118 l_0_10_39)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56613 (* ?x55115 l_0_10_38)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x56611 (* ?x55108 l_0_10_37)))
 (let ((?x56609 (* l_0_10_156 l_0_10_156)))
 (let ((?x56607 (* l_0_10_155 l_0_10_155)))
 (let ((?x56605 (* l_0_10_154 l_0_10_154)))
 (let ((?x56603 (* l_0_10_153 l_0_10_153)))
 (let ((?x56601 (* l_0_10_152 l_0_10_152)))
 (let ((?x56599 (* l_0_10_151 l_0_10_151)))
 (let ((?x56597 (* l_0_10_111 l_0_10_111)))
 (let ((?x56595 (* l_0_10_110 l_0_10_110)))
 (let ((?x56593 (* l_0_10_109 l_0_10_109)))
 (let ((?x56591 (* l_0_10_108 l_0_10_108)))
 (let ((?x56592 (- (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x56591)))
 (let ((?x56606 (+ (+ (+ (+ (- (- (- ?x56592 ?x56593) ?x56595) ?x56597) ?x56599) ?x56601) ?x56603) ?x56605)))
 (let ((?x56610 (+ (+ ?x56606 ?x56607) ?x56609)))
 (let ((?x56624 (+ (- (- (- (- (- (- ?x56610 ?x56611) ?x56613) ?x56615) ?x56617) ?x56619) ?x56621) ?x56623)))
 (= (+ (+ (+ (+ (+ ?x56624 ?x56625) ?x56627) ?x56629) ?x56631) ?x56633) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56716 (* l_0_10_73 l_0_10_73)))
 (let ((?x56714 (* l_0_10_72 l_0_10_72)))
 (let ((?x56712 (* l_0_10_71 l_0_10_71)))
 (let ((?x56710 (* l_0_10_70 l_0_10_70)))
 (let ((?x56708 (* l_0_10_69 l_0_10_69)))
 (let ((?x56706 (* l_0_10_68 l_0_10_68)))
 (let ((?x56704 (* l_0_10_67 l_0_10_67)))
 (let ((?x56702 (* l_0_10_28 l_0_10_28)))
 (let ((?x56700 (* l_0_10_27 l_0_10_27)))
 (let ((?x56698 (* l_0_10_26 l_0_10_26)))
 (let ((?x56682 (* l_0_10_25 l_0_10_25)))
 (let ((?x56679 (* l_0_10_24 l_0_10_24)))
 (let ((?x56681 (- (- (* (- l_0_10_22) l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56679)))
 (let ((?x56709 (+ (+ (+ (- (- (- (- ?x56681 ?x56682) ?x56698) ?x56700) ?x56702) ?x56704) ?x56706) ?x56708)))
 (= (+ (+ (+ (+ ?x56709 ?x56710) ?x56712) ?x56714) ?x56716) 0.0))))))))))))))))
(assert
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56782 (* ?x56781 l_0_10_80)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56779 (* ?x56778 l_0_10_79)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56776 (* ?x56775 l_0_10_78)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56773 (* ?x56772 l_0_10_77)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56770 (* ?x56769 l_0_10_76)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56767 (* ?x56766 l_0_10_75)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56764 (* ?x56763 l_0_10_74)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56761 (* ?x56760 l_0_10_35)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56758 (* ?x56757 l_0_10_34)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56755 (* ?x56754 l_0_10_33)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56752 (* ?x56751 l_0_10_32)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56749 (* ?x55766 l_0_10_31)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56747 (* ?x55523 l_0_10_30)))
 (let ((?x56756 (- (- (- (- (* (* (- 2.0) l_0_10_22) l_0_10_29) ?x56747) ?x56749) ?x56752) ?x56755)))
 (let ((?x56777 (+ (+ (+ (+ (+ (- (- ?x56756 ?x56758) ?x56761) ?x56764) ?x56767) ?x56770) ?x56773) ?x56776)))
 (= (+ (+ ?x56777 ?x56779) ?x56782) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56822 (* ?x56781 l_0_10_88)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56820 (* ?x56778 l_0_10_87)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56818 (* ?x56775 l_0_10_86)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56816 (* ?x56772 l_0_10_85)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56814 (* ?x56769 l_0_10_84)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56812 (* ?x56766 l_0_10_83)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56810 (* ?x56763 l_0_10_82)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56808 (* ?x56760 l_0_10_43)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56806 (* ?x56757 l_0_10_42)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56804 (* ?x56754 l_0_10_41)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56802 (* ?x56751 l_0_10_40)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x33991 (* ?x55766 l_0_10_39)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x33986 (* ?x55523 l_0_10_38)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x33887 (* ?x44877 l_0_10_37)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x55303 (* ?x55302 l_0_10_162)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x55300 (* ?x55299 l_0_10_161)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x55297 (* ?x55296 l_0_10_160)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x55294 (* ?x55293 l_0_10_159)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x55291 (* ?x55290 l_0_10_158)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x55288 (* ?x55287 l_0_10_157)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x55285 (* ?x55284 l_0_10_117)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x55282 (* ?x55281 l_0_10_116)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x55279 (* ?x55278 l_0_10_115)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55276 (* ?x55275 l_0_10_114)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55273 (* ?x55272 l_0_10_113)))
 (let ((?x55435 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_112) ?x55273) ?x55276) ?x55279) ?x55282)))
 (let ((?x55442 (+ (+ (+ (+ (+ (+ (- ?x55435 ?x55285) ?x55288) ?x55291) ?x55294) ?x55297) ?x55300) ?x55303)))
 (let ((?x56809 (- (- (- (- (- (- (- ?x55442 ?x33887) ?x33986) ?x33991) ?x56802) ?x56804) ?x56806) ?x56808)))
 (let ((?x56823 (+ (+ (+ (+ (+ (+ (+ ?x56809 ?x56810) ?x56812) ?x56814) ?x56816) ?x56818) ?x56820) ?x56822)))
 (= ?x56823 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56894 (* l_0_10_81 l_0_10_81)))
 (let ((?x56892 (* l_0_10_80 l_0_10_80)))
 (let ((?x56890 (* l_0_10_79 l_0_10_79)))
 (let ((?x56888 (* l_0_10_78 l_0_10_78)))
 (let ((?x56886 (* l_0_10_77 l_0_10_77)))
 (let ((?x56884 (* l_0_10_76 l_0_10_76)))
 (let ((?x56882 (* l_0_10_75 l_0_10_75)))
 (let ((?x56880 (* l_0_10_74 l_0_10_74)))
 (let ((?x56878 (* l_0_10_36 l_0_10_36)))
 (let ((?x56876 (* l_0_10_35 l_0_10_35)))
 (let ((?x56874 (* l_0_10_34 l_0_10_34)))
 (let ((?x56872 (* l_0_10_33 l_0_10_33)))
 (let ((?x56860 (* l_0_10_32 l_0_10_32)))
 (let ((?x45239 (* l_0_10_31 l_0_10_31)))
 (let ((?x56858 (- (- (* (- l_0_10_29) l_0_10_29) (* l_0_10_30 l_0_10_30)) ?x45239)))
 (let ((?x56883 (+ (+ (- (- (- (- (- ?x56858 ?x56860) ?x56872) ?x56874) ?x56876) ?x56878) ?x56880) ?x56882)))
 (= (+ (+ (+ (+ (+ (+ ?x56883 ?x56884) ?x56886) ?x56888) ?x56890) ?x56892) ?x56894) 0.0))))))))))))))))))
(assert
 (let ((?x56988 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56985 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56982 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56979 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56976 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56973 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56970 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56967 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56964 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56961 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56958 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56955 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56952 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56949 (* ?x55804 l_0_10_39)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56947 (* ?x55795 l_0_10_38)))
 (let ((?x56066 (* 2.0 l_0_10_29)))
 (let ((?x56945 (* ?x56066 l_0_10_37)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x56943 (* ?x55302 l_0_10_169)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x56941 (* ?x55299 l_0_10_168)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x56939 (* ?x55296 l_0_10_167)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x56937 (* ?x55293 l_0_10_166)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x56935 (* ?x55290 l_0_10_165)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x56933 (* ?x55287 l_0_10_164)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x56931 (* ?x55284 l_0_10_124)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x56929 (* ?x55281 l_0_10_123)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x56927 (* ?x55278 l_0_10_122)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56925 (* ?x55275 l_0_10_121)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56923 (* ?x55272 l_0_10_120)))
 (let ((?x56930 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_119) ?x56923) ?x56925) ?x56927) ?x56929)))
 (let ((?x56944 (+ (+ (+ (+ (+ (+ (- ?x56930 ?x56931) ?x56933) ?x56935) ?x56937) ?x56939) ?x56941) ?x56943)))
 (let ((?x56962 (- (- (- (- (- (- (- ?x56944 ?x56945) ?x56947) ?x56949) ?x56952) ?x56955) ?x56958) ?x56961)))
 (let ((?x56983 (+ (+ (+ (+ (+ (+ (- ?x56962 ?x56964) ?x56967) ?x56970) ?x56973) ?x56976) ?x56979) ?x56982)))
 (= (+ (+ ?x56983 ?x56985) ?x56988) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57114 (* l_0_10_90 l_0_10_90)))
 (let ((?x57112 (* l_0_10_89 l_0_10_89)))
 (let ((?x57110 (* l_0_10_88 l_0_10_88)))
 (let ((?x57108 (* l_0_10_87 l_0_10_87)))
 (let ((?x57106 (* l_0_10_86 l_0_10_86)))
 (let ((?x57104 (* l_0_10_85 l_0_10_85)))
 (let ((?x57102 (* l_0_10_84 l_0_10_84)))
 (let ((?x57100 (* l_0_10_83 l_0_10_83)))
 (let ((?x57098 (* l_0_10_82 l_0_10_82)))
 (let ((?x57096 (* l_0_10_45 l_0_10_45)))
 (let ((?x57094 (* l_0_10_44 l_0_10_44)))
 (let ((?x57092 (* l_0_10_43 l_0_10_43)))
 (let ((?x57090 (* l_0_10_42 l_0_10_42)))
 (let ((?x57088 (* l_0_10_41 l_0_10_41)))
 (let ((?x57086 (* l_0_10_40 l_0_10_40)))
 (let ((?x57084 (* l_0_10_39 l_0_10_39)))
 (let ((?x57082 (* l_0_10_38 l_0_10_38)))
 (let ((?x57080 (* l_0_10_37 l_0_10_37)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x57078 (* ?x55302 l_0_10_177)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x57076 (* ?x55299 l_0_10_176)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x57074 (* ?x55296 l_0_10_175)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x57072 (* ?x55293 l_0_10_174)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x57070 (* ?x55290 l_0_10_173)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x57068 (* ?x55287 l_0_10_172)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x57066 (* ?x55284 l_0_10_132)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x57064 (* ?x55281 l_0_10_131)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x57062 (* ?x55278 l_0_10_130)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x57060 (* ?x55275 l_0_10_129)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x57058 (* ?x55272 l_0_10_128)))
 (let ((?x57065 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_127) ?x57058) ?x57060) ?x57062) ?x57064)))
 (let ((?x57079 (+ (+ (+ (+ (+ (+ (- ?x57065 ?x57066) ?x57068) ?x57070) ?x57072) ?x57074) ?x57076) ?x57078)))
 (let ((?x57093 (- (- (- (- (- (- (- ?x57079 ?x57080) ?x57082) ?x57084) ?x57086) ?x57088) ?x57090) ?x57092)))
 (let ((?x57107 (+ (+ (+ (+ (+ (- (- ?x57093 ?x57094) ?x57096) ?x57098) ?x57100) ?x57102) ?x57104) ?x57106)))
 (= (+ (+ (+ (+ ?x57107 ?x57108) ?x57110) ?x57112) ?x57114) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55102 (* ?x55101 l_0_10_47)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x39661 (* ?x55363 l_0_10_146)))
 (let ((?x45259 (* 2.0 l_0_10_101)))
 (let ((?x45268 (* ?x45259 l_0_10_91)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55100 (* ?x55099 l_0_10_2)))
 (= (+ (+ (- ?x55100 ?x45268) ?x39661) ?x55102) 0.0))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x55968 (* ?x55967 l_0_10_59)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x55965 (* ?x55964 l_0_10_58)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x55962 (* ?x55961 l_0_10_57)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x55959 (* ?x55958 l_0_10_56)))
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55148 (* ?x55101 l_0_10_49)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x57184 (* ?x57183 l_0_10_239)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x57181 (* ?x57180 l_0_10_238)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x57178 (* ?x57177 l_0_10_237)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x57175 (* ?x57174 l_0_10_236)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55950 (* ?x55694 l_0_10_9)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55948 (* ?x55480 l_0_10_8)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x55946 (* ?x55945 l_0_10_7)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55106 (* ?x55099 l_0_10_4)))
 (let ((?x57173 (+ (+ (+ (+ ?x55106 (* (* 2.0 l_0_10_10) l_0_10_14)) ?x55946) ?x55948) ?x55950)))
 (let ((?x57188 (- (- (+ (+ (+ (+ (+ ?x57173 ?x57175) ?x57178) ?x57181) ?x57184) ?x55148) ?x55959) ?x55962)))
 (= (- (- ?x57188 ?x55965) ?x55968) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55229 (* ?x55101 l_0_10_52)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_7) ?x55229) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55235 (* ?x55101 l_0_10_56)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_11) ?x55235) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55245 (* ?x55101 l_0_10_61)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_16) ?x55245) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55255 (* ?x55101 l_0_10_67)))
 (= (+ (* (* (- 2.0) l_0_10_1) l_0_10_22) ?x55255) 0.0))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55311 (* ?x55101 l_0_10_74)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x57184 (* ?x57183 l_0_10_239)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x57181 (* ?x57180 l_0_10_238)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x57178 (* ?x57177 l_0_10_237)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x57175 (* ?x57174 l_0_10_236)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x57222 (* ?x56135 l_0_10_149)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x57220 (* ?x56132 l_0_10_148)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x57218 (* ?x56129 l_0_10_147)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x57216 (* ?x56126 l_0_10_146)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57214 (* ?x56362 l_0_10_99)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57212 (* ?x56359 l_0_10_98)))
 (let ((?x45259 (* 2.0 l_0_10_101)))
 (let ((?x57210 (* ?x45259 l_0_10_97)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x55263 (* ?x55099 l_0_10_29)))
 (let ((?x57215 (+ (+ (+ (+ ?x55263 (* (* 2.0 l_0_10_100) l_0_10_104)) ?x57210) ?x57212) ?x57214)))
 (let ((?x57226 (- (- (- (- (- (- (- ?x57215 ?x57216) ?x57218) ?x57220) ?x57222) ?x57175) ?x57178) ?x57181)))
 (= (+ (- ?x57226 ?x57184) ?x55311) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55366 (* ?x55101 l_0_10_82)))
 (let ((?x55099 (* (- 2.0) l_0_10_1)))
 (let ((?x33322 (* ?x55099 l_0_10_37)))
 (= (+ ?x33322 ?x55366) 0.0))))))
(assert
 (let ((?x55390 (* l_0_10_48 l_0_10_48)))
 (let ((?x55388 (* l_0_10_47 l_0_10_47)))
 (let ((?x55381 (* l_0_10_3 l_0_10_3)))
 (let ((?x55394 (* l_0_10_2 l_0_10_2)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x57247 (* ?x55580 l_0_10_147)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x57245 (* ?x55577 l_0_10_146)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x34315 (* ?x56359 l_0_10_93)))
 (let ((?x57248 (+ (+ (- (* (* (- 2.0) l_0_10_101) l_0_10_92) ?x34315) ?x57245) ?x57247)))
 (= (+ (+ (- (- ?x57248 ?x55394) ?x55381) ?x55388) ?x55390) 0.0)))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55412 (* ?x55411 l_0_10_50)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55409 (* ?x55408 l_0_10_49)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55406 (* ?x55405 l_0_10_5)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57276 (* ?x55443 l_0_10_4)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x57274 (* ?x55842 l_0_10_148)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x57272 (* ?x55839 l_0_10_147)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x57270 (* ?x55836 l_0_10_146)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57268 (* ?x56362 l_0_10_96)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57266 (* ?x56359 l_0_10_95)))
 (let ((?x57273 (+ (+ (- (- (* (* (- 2.0) l_0_10_101) l_0_10_94) ?x57266) ?x57268) ?x57270) ?x57272)))
 (let ((?x57275 (+ ?x57273 ?x57274)))
 (= (+ (+ (- (- ?x57275 ?x57276) ?x55406) ?x55409) ?x55412) 0.0))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55450 (* ?x55411 l_0_10_53)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55448 (* ?x55408 l_0_10_52)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55446 (* ?x55405 l_0_10_8)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55444 (* ?x55443 l_0_10_7)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x57222 (* ?x56135 l_0_10_149)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x57220 (* ?x56132 l_0_10_148)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x57218 (* ?x56129 l_0_10_147)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x57216 (* ?x56126 l_0_10_146)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57214 (* ?x56362 l_0_10_99)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57212 (* ?x56359 l_0_10_98)))
 (let ((?x45259 (* 2.0 l_0_10_101)))
 (let ((?x57210 (* ?x45259 l_0_10_97)))
 (let ((?x57309 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_104) ?x57210) ?x57212) ?x57214) ?x57216)))
 (let ((?x57312 (+ (+ (+ ?x57309 ?x57218) ?x57220) ?x57222)))
 (= (+ (+ (- (- ?x57312 ?x55444) ?x55446) ?x55448) ?x55450) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55485 (* ?x55411 l_0_10_57)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55483 (* ?x55408 l_0_10_56)))
 (let ((?x57345 (* l_0_10_150 l_0_10_150)))
 (let ((?x57343 (* l_0_10_149 l_0_10_149)))
 (let ((?x57341 (* l_0_10_148 l_0_10_148)))
 (let ((?x57339 (* l_0_10_147 l_0_10_147)))
 (let ((?x57337 (* l_0_10_146 l_0_10_146)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55481 (* ?x55480 l_0_10_3)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x57334 (* ?x55945 l_0_10_2)))
 (let ((?x57332 (* l_0_10_105 l_0_10_105)))
 (let ((?x57330 (* l_0_10_104 l_0_10_104)))
 (let ((?x57328 (* l_0_10_103 l_0_10_103)))
 (let ((?x57329 (- (- (* (- l_0_10_101) l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x57328)))
 (let ((?x57333 (- (- ?x57329 ?x57330) ?x57332)))
 (let ((?x57346 (+ (+ (+ (+ (+ (- (- ?x57333 ?x57334) ?x55481) ?x57337) ?x57339) ?x57341) ?x57343) ?x57345)))
 (= (+ (+ ?x57346 ?x55483) ?x55485) 0.0)))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55509 (* ?x55411 l_0_10_62)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55507 (* ?x55408 l_0_10_61)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55500 (* ?x55115 l_0_10_3)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x57371 (* ?x55108 l_0_10_2)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x56394 (* ?x56393 l_0_10_155)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x56389 (* ?x56388 l_0_10_154)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x56386 (* ?x56385 l_0_10_153)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x56383 (* ?x56382 l_0_10_152)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x56380 (* ?x56379 l_0_10_151)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x56369 (* ?x56368 l_0_10_110)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x56366 (* ?x56365 l_0_10_109)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x56363 (* ?x56362 l_0_10_108)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x56360 (* ?x56359 l_0_10_107)))
 (let ((?x56370 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_106) ?x56360) ?x56363) ?x56366) ?x56369)))
 (let ((?x57373 (- (- (+ (+ (+ (+ (+ ?x56370 ?x56380) ?x56383) ?x56386) ?x56389) ?x56394) ?x57371) ?x55500)))
 (= (+ (+ ?x57373 ?x55507) ?x55509) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55533 (* ?x55411 l_0_10_68)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55531 (* ?x55408 l_0_10_67)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55524 (* ?x55523 l_0_10_3)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57399 (* ?x55443 l_0_10_22)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57397 (* ?x56393 l_0_10_161)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57395 (* ?x56388 l_0_10_160)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57393 (* ?x56385 l_0_10_159)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57391 (* ?x56382 l_0_10_158)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57389 (* ?x56379 l_0_10_157)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57387 (* ?x56368 l_0_10_116)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57385 (* ?x56365 l_0_10_115)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57383 (* ?x56362 l_0_10_114)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57381 (* ?x56359 l_0_10_113)))
 (let ((?x57388 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_112) ?x57381) ?x57383) ?x57385) ?x57387)))
 (let ((?x57398 (+ (+ (+ (+ (+ ?x57388 ?x57389) ?x57391) ?x57393) ?x57395) ?x57397)))
 (= (+ (+ (- (- ?x57398 ?x57399) ?x55524) ?x55531) ?x55533) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55556 (* ?x55411 l_0_10_75)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55554 (* ?x55408 l_0_10_74)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55547 (* ?x55405 l_0_10_30)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57450 (* ?x55443 l_0_10_29)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57448 (* ?x56393 l_0_10_168)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57446 (* ?x56388 l_0_10_167)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57444 (* ?x56385 l_0_10_166)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57442 (* ?x56382 l_0_10_165)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57440 (* ?x56379 l_0_10_164)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57438 (* ?x56368 l_0_10_123)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57436 (* ?x56365 l_0_10_122)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57434 (* ?x56362 l_0_10_121)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57432 (* ?x56359 l_0_10_120)))
 (let ((?x57439 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_119) ?x57432) ?x57434) ?x57436) ?x57438)))
 (let ((?x57449 (+ (+ (+ (+ (+ ?x57439 ?x57440) ?x57442) ?x57444) ?x57446) ?x57448)))
 (= (+ (+ (- (- ?x57449 ?x57450) ?x55547) ?x55554) ?x55556) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55589 (* ?x55411 l_0_10_83)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55587 (* ?x55408 l_0_10_82)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55585 (* ?x55405 l_0_10_38)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55583 (* ?x55443 l_0_10_37)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57508 (* ?x56393 l_0_10_176)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57506 (* ?x56388 l_0_10_175)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57504 (* ?x56385 l_0_10_174)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57502 (* ?x56382 l_0_10_173)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57500 (* ?x56379 l_0_10_172)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57498 (* ?x56368 l_0_10_131)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57496 (* ?x56365 l_0_10_130)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57494 (* ?x56362 l_0_10_129)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57492 (* ?x56359 l_0_10_128)))
 (let ((?x57499 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_127) ?x57492) ?x57494) ?x57496) ?x57498)))
 (let ((?x57509 (+ (+ (+ (+ (+ ?x57499 ?x57500) ?x57502) ?x57504) ?x57506) ?x57508)))
 (= (+ (+ (- (- ?x57509 ?x55583) ?x55585) ?x55587) ?x55589) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x55630 (* l_0_10_6 l_0_10_6)))
 (let ((?x55628 (* l_0_10_51 l_0_10_51)))
 (let ((?x55626 (* l_0_10_50 l_0_10_50)))
 (let ((?x55624 (* l_0_10_5 l_0_10_5)))
 (let ((?x55627 (+ (- (+ (* (- l_0_10_4) l_0_10_4) (* l_0_10_49 l_0_10_49)) ?x55624) ?x55626)))
 (= (- (+ ?x55627 ?x55628) ?x55630) 0.0)))))))
(assert
 (let ((?x55660 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55657 (* ?x55656 l_0_10_54)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55654 (* ?x55653 l_0_10_53)))
 (let ((?x55651 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55648 (* ?x55647 l_0_10_52)))
 (let ((?x55658 (+ (+ (- (+ (* (* (- 2.0) l_0_10_4) l_0_10_7) ?x55648) ?x55651) ?x55654) ?x55657)))
 (= (- ?x55658 ?x55660) 0.0)))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55701 (* ?x55656 l_0_10_58)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55699 (* ?x55653 l_0_10_57)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55697 (* ?x55647 l_0_10_56)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55695 (* ?x55694 l_0_10_6)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55692 (* ?x55480 l_0_10_5)))
 (let ((?x55700 (+ (+ (- (- (* (* (- 2.0) l_0_10_11) l_0_10_4) ?x55692) ?x55695) ?x55697) ?x55699)))
 (= (+ ?x55700 ?x55701) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55736 (* ?x55656 l_0_10_63)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55734 (* ?x55653 l_0_10_62)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55732 (* ?x55647 l_0_10_61)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55724 (* ?x55118 l_0_10_6)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55721 (* ?x55115 l_0_10_5)))
 (let ((?x55735 (+ (+ (- (- (* (* (- 2.0) l_0_10_16) l_0_10_4) ?x55721) ?x55724) ?x55732) ?x55734)))
 (= (+ ?x55735 ?x55736) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55773 (* ?x55656 l_0_10_69)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55771 (* ?x55653 l_0_10_68)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55769 (* ?x55647 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x55767 (* ?x55766 l_0_10_6)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55758 (* ?x55523 l_0_10_5)))
 (let ((?x55772 (+ (+ (- (- (* (* (- 2.0) l_0_10_22) l_0_10_4) ?x55758) ?x55767) ?x55769) ?x55771)))
 (= (+ ?x55772 ?x55773) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55811 (* ?x55656 l_0_10_76)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55809 (* ?x55653 l_0_10_75)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55807 (* ?x55647 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x55805 (* ?x55804 l_0_10_6)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x55796 (* ?x55795 l_0_10_5)))
 (let ((?x55810 (+ (+ (- (- (* (* (- 2.0) l_0_10_29) l_0_10_4) ?x55796) ?x55805) ?x55807) ?x55809)))
 (= (+ ?x55810 ?x55811) 0.0)))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55858 (* ?x55656 l_0_10_84)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55856 (* ?x55653 l_0_10_83)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55854 (* ?x55647 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x55852 (* ?x55851 l_0_10_6)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x55849 (* ?x55848 l_0_10_5)))
 (let ((?x57539 (+ (+ (- (- (* (* (- 2.0) l_0_10_37) l_0_10_4) ?x55849) ?x55852) ?x55854) ?x55856)))
 (= (+ ?x57539 ?x55858) 0.0)))))))))))))
(assert
 (let ((?x55926 (* l_0_10_9 l_0_10_9)))
 (let ((?x55924 (* l_0_10_8 l_0_10_8)))
 (let ((?x55922 (* l_0_10_7 l_0_10_7)))
 (let ((?x55920 (* l_0_10_55 l_0_10_55)))
 (let ((?x55918 (* l_0_10_54 l_0_10_54)))
 (let ((?x55916 (* l_0_10_53 l_0_10_53)))
 (let ((?x55917 (+ (+ (* (- l_0_10_10) l_0_10_10) (* l_0_10_52 l_0_10_52)) ?x55916)))
 (= (- (- (- (+ (+ ?x55917 ?x55918) ?x55920) ?x55922) ?x55924) ?x55926) 0.0)))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x55968 (* ?x55967 l_0_10_59)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x55965 (* ?x55964 l_0_10_58)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x55962 (* ?x55961 l_0_10_57)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x55959 (* ?x55958 l_0_10_56)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55950 (* ?x55694 l_0_10_9)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55948 (* ?x55480 l_0_10_8)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x55946 (* ?x55945 l_0_10_7)))
 (let ((?x55951 (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_14) ?x55946) ?x55948) ?x55950)))
 (= (+ (+ (+ (+ ?x55951 ?x55959) ?x55962) ?x55965) ?x55968) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56011 (* ?x55967 l_0_10_64)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56009 (* ?x55964 l_0_10_63)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56007 (* ?x55961 l_0_10_62)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56005 (* ?x55958 l_0_10_61)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56003 (* ?x55118 l_0_10_9)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56001 (* ?x55115 l_0_10_8)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x55999 (* ?x55108 l_0_10_7)))
 (let ((?x56006 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_19) ?x55999) ?x56001) ?x56003) ?x56005)))
 (= (+ (+ (+ ?x56006 ?x56007) ?x56009) ?x56011) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56049 (* ?x55967 l_0_10_70)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56047 (* ?x55964 l_0_10_69)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56045 (* ?x55961 l_0_10_68)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56043 (* ?x55958 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56041 (* ?x55766 l_0_10_9)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56032 (* ?x55523 l_0_10_8)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x44871 (* ?x44877 l_0_10_7)))
 (let ((?x56044 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_25) ?x44871) ?x56032) ?x56041) ?x56043)))
 (= (+ (+ (+ ?x56044 ?x56045) ?x56047) ?x56049) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56088 (* ?x55967 l_0_10_77)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56086 (* ?x55964 l_0_10_76)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56084 (* ?x55961 l_0_10_75)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56082 (* ?x55958 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56080 (* ?x55804 l_0_10_9)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56071 (* ?x55795 l_0_10_8)))
 (let ((?x56066 (* 2.0 l_0_10_29)))
 (let ((?x56068 (* ?x56066 l_0_10_7)))
 (let ((?x56083 (+ (- (- (- (* (* (- 2.0) l_0_10_10) l_0_10_32) ?x56068) ?x56071) ?x56080) ?x56082)))
 (= (+ (+ (+ ?x56083 ?x56084) ?x56086) ?x56088) 0.0)))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x55967 l_0_10_85)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56148 (* ?x55964 l_0_10_84)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56146 (* ?x55961 l_0_10_83)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56144 (* ?x55958 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x56142 (* ?x55851 l_0_10_9)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x56140 (* ?x55848 l_0_10_8)))
 (let ((?x55845 (* 2.0 l_0_10_37)))
 (let ((?x56138 (* ?x55845 l_0_10_7)))
 (let ((?x55943 (* (- 2.0) l_0_10_10)))
 (let ((?x44908 (* ?x55943 l_0_10_40)))
 (let ((?x57564 (+ (+ (+ (+ (- (- (- ?x44908 ?x56138) ?x56140) ?x56142) ?x56144) ?x56146) ?x56148) ?x56150)))
 (= ?x57564 0.0)))))))))))))))))))
(assert
 (let ((?x56205 (* l_0_10_60 l_0_10_60)))
 (let ((?x56203 (* l_0_10_59 l_0_10_59)))
 (let ((?x56201 (* l_0_10_58 l_0_10_58)))
 (let ((?x56199 (* l_0_10_57 l_0_10_57)))
 (let ((?x56197 (* l_0_10_56 l_0_10_56)))
 (let ((?x56195 (* l_0_10_15 l_0_10_15)))
 (let ((?x56193 (* l_0_10_14 l_0_10_14)))
 (let ((?x56180 (* l_0_10_13 l_0_10_13)))
 (let ((?x56192 (- (- (* (- l_0_10_11) l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x56180)))
 (let ((?x56206 (+ (+ (+ (+ (+ (- (- ?x56192 ?x56193) ?x56195) ?x56197) ?x56199) ?x56201) ?x56203) ?x56205)))
 (= ?x56206 0.0))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56246 (* ?x56245 l_0_10_65)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56243 (* ?x56242 l_0_10_64)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56240 (* ?x56239 l_0_10_63)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56237 (* ?x56236 l_0_10_62)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56234 (* ?x56233 l_0_10_61)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56231 (* ?x56230 l_0_10_20)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56228 (* ?x56227 l_0_10_19)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56225 (* ?x55694 l_0_10_18)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56223 (* ?x55480 l_0_10_17)))
 (let ((?x56232 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_16) ?x56223) ?x56225) ?x56228) ?x56231)))
 (= (+ (+ (+ (+ (+ ?x56232 ?x56234) ?x56237) ?x56240) ?x56243) ?x56246) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56293 (* ?x56245 l_0_10_71)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56291 (* ?x56242 l_0_10_70)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56289 (* ?x56239 l_0_10_69)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56287 (* ?x56236 l_0_10_68)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56285 (* ?x56233 l_0_10_67)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56283 (* ?x56230 l_0_10_26)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56273 (* ?x56227 l_0_10_25)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56270 (* ?x55694 l_0_10_24)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56266 (* ?x55480 l_0_10_23)))
 (let ((?x56284 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_22) ?x56266) ?x56270) ?x56273) ?x56283)))
 (= (+ (+ (+ (+ (+ ?x56284 ?x56285) ?x56287) ?x56289) ?x56291) ?x56293) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56328 (* ?x56245 l_0_10_78)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56326 (* ?x56242 l_0_10_77)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56324 (* ?x56239 l_0_10_76)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56322 (* ?x56236 l_0_10_75)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56320 (* ?x56233 l_0_10_74)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56318 (* ?x56230 l_0_10_33)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56308 (* ?x56227 l_0_10_32)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x33809 (* ?x55694 l_0_10_31)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x33798 (* ?x55480 l_0_10_30)))
 (let ((?x56319 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_29) ?x33798) ?x33809) ?x56308) ?x56318)))
 (= (+ (+ (+ (+ (+ ?x56319 ?x56320) ?x56322) ?x56324) ?x56326) ?x56328) 0.0)))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56404 (* ?x56245 l_0_10_86)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56402 (* ?x56242 l_0_10_85)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56400 (* ?x56239 l_0_10_84)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56398 (* ?x56236 l_0_10_83)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56396 (* ?x56233 l_0_10_82)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56391 (* ?x56230 l_0_10_41)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56377 (* ?x56227 l_0_10_40)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56375 (* ?x55694 l_0_10_39)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56373 (* ?x55480 l_0_10_38)))
 (let ((?x57580 (- (- (- (- (* (* (- 2.0) l_0_10_11) l_0_10_37) ?x56373) ?x56375) ?x56377) ?x56391)))
 (= (+ (+ (+ (+ (+ ?x57580 ?x56396) ?x56398) ?x56400) ?x56402) ?x56404) 0.0)))))))))))))))))))))
(assert
 (let ((?x56491 (* l_0_10_66 l_0_10_66)))
 (let ((?x56489 (* l_0_10_65 l_0_10_65)))
 (let ((?x56487 (* l_0_10_64 l_0_10_64)))
 (let ((?x56485 (* l_0_10_63 l_0_10_63)))
 (let ((?x56483 (* l_0_10_62 l_0_10_62)))
 (let ((?x56481 (* l_0_10_61 l_0_10_61)))
 (let ((?x56479 (* l_0_10_21 l_0_10_21)))
 (let ((?x56477 (* l_0_10_20 l_0_10_20)))
 (let ((?x56462 (* l_0_10_19 l_0_10_19)))
 (let ((?x56459 (* l_0_10_18 l_0_10_18)))
 (let ((?x56461 (- (- (* (- l_0_10_16) l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56459)))
 (let ((?x56488 (+ (+ (+ (+ (- (- (- ?x56461 ?x56462) ?x56477) ?x56479) ?x56481) ?x56483) ?x56485) ?x56487)))
 (= (+ (+ ?x56488 ?x56489) ?x56491) 0.0))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56556 (* ?x55165 l_0_10_79)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56554 (* ?x55162 l_0_10_78)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56552 (* ?x55159 l_0_10_77)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56550 (* ?x55156 l_0_10_76)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56548 (* ?x55153 l_0_10_75)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56546 (* ?x55150 l_0_10_74)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56544 (* ?x55127 l_0_10_34)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56542 (* ?x55124 l_0_10_33)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56540 (* ?x55121 l_0_10_32)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56538 (* ?x55118 l_0_10_31)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56536 (* ?x55115 l_0_10_30)))
 (let ((?x56543 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_29) ?x56536) ?x56538) ?x56540) ?x56542)))
 (let ((?x56557 (+ (+ (+ (+ (+ (+ (- ?x56543 ?x56544) ?x56546) ?x56548) ?x56550) ?x56552) ?x56554) ?x56556)))
 (= ?x56557 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56633 (* ?x55165 l_0_10_87)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56631 (* ?x55162 l_0_10_86)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56629 (* ?x55159 l_0_10_85)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56627 (* ?x55156 l_0_10_84)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56625 (* ?x55153 l_0_10_83)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56623 (* ?x55150 l_0_10_82)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56621 (* ?x55127 l_0_10_42)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56619 (* ?x55124 l_0_10_41)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56617 (* ?x55121 l_0_10_40)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56615 (* ?x55118 l_0_10_39)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56613 (* ?x55115 l_0_10_38)))
 (let ((?x57606 (- (- (- (- (* (* (- 2.0) l_0_10_16) l_0_10_37) ?x56613) ?x56615) ?x56617) ?x56619)))
 (let ((?x57613 (+ (+ (+ (+ (+ (+ (- ?x57606 ?x56621) ?x56623) ?x56625) ?x56627) ?x56629) ?x56631) ?x56633)))
 (= ?x57613 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56716 (* l_0_10_73 l_0_10_73)))
 (let ((?x56714 (* l_0_10_72 l_0_10_72)))
 (let ((?x56712 (* l_0_10_71 l_0_10_71)))
 (let ((?x56710 (* l_0_10_70 l_0_10_70)))
 (let ((?x56708 (* l_0_10_69 l_0_10_69)))
 (let ((?x56706 (* l_0_10_68 l_0_10_68)))
 (let ((?x56704 (* l_0_10_67 l_0_10_67)))
 (let ((?x56702 (* l_0_10_28 l_0_10_28)))
 (let ((?x56700 (* l_0_10_27 l_0_10_27)))
 (let ((?x56698 (* l_0_10_26 l_0_10_26)))
 (let ((?x56682 (* l_0_10_25 l_0_10_25)))
 (let ((?x56679 (* l_0_10_24 l_0_10_24)))
 (let ((?x56681 (- (- (* (- l_0_10_22) l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56679)))
 (let ((?x56709 (+ (+ (+ (- (- (- (- ?x56681 ?x56682) ?x56698) ?x56700) ?x56702) ?x56704) ?x56706) ?x56708)))
 (= (+ (+ (+ (+ ?x56709 ?x56710) ?x56712) ?x56714) ?x56716) 0.0))))))))))))))))
(assert
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56782 (* ?x56781 l_0_10_80)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56779 (* ?x56778 l_0_10_79)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56776 (* ?x56775 l_0_10_78)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56773 (* ?x56772 l_0_10_77)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56770 (* ?x56769 l_0_10_76)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56767 (* ?x56766 l_0_10_75)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56764 (* ?x56763 l_0_10_74)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56761 (* ?x56760 l_0_10_35)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56758 (* ?x56757 l_0_10_34)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56755 (* ?x56754 l_0_10_33)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56752 (* ?x56751 l_0_10_32)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56749 (* ?x55766 l_0_10_31)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56747 (* ?x55523 l_0_10_30)))
 (let ((?x56756 (- (- (- (- (* (* (- 2.0) l_0_10_22) l_0_10_29) ?x56747) ?x56749) ?x56752) ?x56755)))
 (let ((?x56777 (+ (+ (+ (+ (+ (- (- ?x56756 ?x56758) ?x56761) ?x56764) ?x56767) ?x56770) ?x56773) ?x56776)))
 (= (+ (+ ?x56777 ?x56779) ?x56782) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56822 (* ?x56781 l_0_10_88)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56820 (* ?x56778 l_0_10_87)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56818 (* ?x56775 l_0_10_86)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56816 (* ?x56772 l_0_10_85)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56814 (* ?x56769 l_0_10_84)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56812 (* ?x56766 l_0_10_83)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56810 (* ?x56763 l_0_10_82)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56808 (* ?x56760 l_0_10_43)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56806 (* ?x56757 l_0_10_42)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56804 (* ?x56754 l_0_10_41)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56802 (* ?x56751 l_0_10_40)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x33991 (* ?x55766 l_0_10_39)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x33986 (* ?x55523 l_0_10_38)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x33887 (* ?x44877 l_0_10_37)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x57222 (* ?x56135 l_0_10_149)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x57220 (* ?x56132 l_0_10_148)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x57218 (* ?x56129 l_0_10_147)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x57216 (* ?x56126 l_0_10_146)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57214 (* ?x56362 l_0_10_99)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57212 (* ?x56359 l_0_10_98)))
 (let ((?x45259 (* 2.0 l_0_10_101)))
 (let ((?x57210 (* ?x45259 l_0_10_97)))
 (let ((?x57309 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_104) ?x57210) ?x57212) ?x57214) ?x57216)))
 (let ((?x57312 (+ (+ (+ ?x57309 ?x57218) ?x57220) ?x57222)))
 (let ((?x45562 (- (- (- (- (- (- (- ?x57312 ?x33887) ?x33986) ?x33991) ?x56802) ?x56804) ?x56806) ?x56808)))
 (let ((?x57626 (+ (+ (+ (+ (+ (+ (+ ?x45562 ?x56810) ?x56812) ?x56814) ?x56816) ?x56818) ?x56820) ?x56822)))
 (= ?x57626 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56894 (* l_0_10_81 l_0_10_81)))
 (let ((?x56892 (* l_0_10_80 l_0_10_80)))
 (let ((?x56890 (* l_0_10_79 l_0_10_79)))
 (let ((?x56888 (* l_0_10_78 l_0_10_78)))
 (let ((?x56886 (* l_0_10_77 l_0_10_77)))
 (let ((?x56884 (* l_0_10_76 l_0_10_76)))
 (let ((?x56882 (* l_0_10_75 l_0_10_75)))
 (let ((?x56880 (* l_0_10_74 l_0_10_74)))
 (let ((?x56878 (* l_0_10_36 l_0_10_36)))
 (let ((?x56876 (* l_0_10_35 l_0_10_35)))
 (let ((?x56874 (* l_0_10_34 l_0_10_34)))
 (let ((?x56872 (* l_0_10_33 l_0_10_33)))
 (let ((?x56860 (* l_0_10_32 l_0_10_32)))
 (let ((?x45239 (* l_0_10_31 l_0_10_31)))
 (let ((?x56858 (- (- (* (- l_0_10_29) l_0_10_29) (* l_0_10_30 l_0_10_30)) ?x45239)))
 (let ((?x56883 (+ (+ (- (- (- (- (- ?x56858 ?x56860) ?x56872) ?x56874) ?x56876) ?x56878) ?x56880) ?x56882)))
 (= (+ (+ (+ (+ (+ (+ ?x56883 ?x56884) ?x56886) ?x56888) ?x56890) ?x56892) ?x56894) 0.0))))))))))))))))))
(assert
 (let ((?x56988 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56985 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56982 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56979 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56976 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56973 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56970 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56967 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56964 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56961 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56958 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56955 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56952 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56949 (* ?x55804 l_0_10_39)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56947 (* ?x55795 l_0_10_38)))
 (let ((?x34535 (- (- (- (- (* (* (- 2.0) l_0_10_29) l_0_10_37) ?x56947) ?x56949) ?x56952) ?x56955)))
 (let ((?x57654 (+ (+ (+ (+ (- (- (- ?x34535 ?x56958) ?x56961) ?x56964) ?x56967) ?x56970) ?x56973) ?x56976)))
 (= (+ (+ (+ (+ ?x57654 ?x56979) ?x56982) ?x56985) ?x56988) 0.0)))))))))))))))))))))
(assert
 (let ((?x57114 (* l_0_10_90 l_0_10_90)))
 (let ((?x57112 (* l_0_10_89 l_0_10_89)))
 (let ((?x57110 (* l_0_10_88 l_0_10_88)))
 (let ((?x57108 (* l_0_10_87 l_0_10_87)))
 (let ((?x57106 (* l_0_10_86 l_0_10_86)))
 (let ((?x57104 (* l_0_10_85 l_0_10_85)))
 (let ((?x57102 (* l_0_10_84 l_0_10_84)))
 (let ((?x57100 (* l_0_10_83 l_0_10_83)))
 (let ((?x57098 (* l_0_10_82 l_0_10_82)))
 (let ((?x57096 (* l_0_10_45 l_0_10_45)))
 (let ((?x57094 (* l_0_10_44 l_0_10_44)))
 (let ((?x57092 (* l_0_10_43 l_0_10_43)))
 (let ((?x57090 (* l_0_10_42 l_0_10_42)))
 (let ((?x57088 (* l_0_10_41 l_0_10_41)))
 (let ((?x57086 (* l_0_10_40 l_0_10_40)))
 (let ((?x57084 (* l_0_10_39 l_0_10_39)))
 (let ((?x57668 (- (- (* (- l_0_10_37) l_0_10_37) (* l_0_10_38 l_0_10_38)) ?x57084)))
 (let ((?x57675 (+ (- (- (- (- (- (- ?x57668 ?x57086) ?x57088) ?x57090) ?x57092) ?x57094) ?x57096) ?x57098)))
 (let ((?x57682 (+ (+ (+ (+ (+ (+ (+ ?x57675 ?x57100) ?x57102) ?x57104) ?x57106) ?x57108) ?x57110) ?x57112)))
 (= (+ ?x57682 ?x57114) 0.0)))))))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55102 (* ?x55101 l_0_10_47)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x45727 (* ?x45731 l_0_10_227)))
 (let ((?x45740 (- (* (* 2.0 l_0_10_1) l_0_10_2) (* (* 2.0 l_0_10_182) l_0_10_184))))
 (let ((?x45719 (- (+ (- ?x45740 (* (* 2.0 l_0_10_183) l_0_10_185)) ?x45727) (* (* 2.0 l_0_10_272) l_0_10_274))))
 (let ((?x57691 (- (- ?x45719 (* (* 2.0 l_0_10_273) l_0_10_275)) (* (* 2.0 l_0_10_317) l_0_10_319))))
 (= (- (- ?x57691 (* (* 2.0 l_0_10_318) l_0_10_320)) ?x55102) 0.0)))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55148 (* ?x55101 l_0_10_49)))
 (let ((?x57743 (* l_0_10_321 l_0_10_321)))
 (let ((?x57741 (* l_0_10_320 l_0_10_320)))
 (let ((?x57739 (* l_0_10_319 l_0_10_319)))
 (let ((?x57737 (* l_0_10_276 l_0_10_276)))
 (let ((?x57735 (* l_0_10_275 l_0_10_275)))
 (let ((?x57733 (* l_0_10_274 l_0_10_274)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57731 (* ?x45731 l_0_10_229)))
 (let ((?x57724 (- (* (* 2.0 l_0_10_1) l_0_10_4) (* (* 1.0 l_0_10_184) l_0_10_184))))
 (let ((?x57730 (- (- ?x57724 (* (* 1.0 l_0_10_185) l_0_10_185)) (* (* 1.0 l_0_10_186) l_0_10_186))))
 (let ((?x57744 (- (- (- (- (- (- (+ ?x57730 ?x57731) ?x57733) ?x57735) ?x57737) ?x57739) ?x57741) ?x57743)))
 (= (- ?x57744 ?x55148) 0.0)))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55229 (* ?x55101 l_0_10_52)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57778 (* ?x45731 l_0_10_232)))
 (let ((?x57771 (- (* (* 2.0 l_0_10_1) l_0_10_7) (* (* 2.0 l_0_10_184) l_0_10_187))))
 (let ((?x57777 (- (- ?x57771 (* (* 2.0 l_0_10_185) l_0_10_188)) (* (* 2.0 l_0_10_186) l_0_10_189))))
 (let ((?x57785 (- (- (+ ?x57777 ?x57778) (* (* 2.0 l_0_10_274) l_0_10_277)) (* (* 2.0 l_0_10_275) l_0_10_278))))
 (let ((?x57791 (- (- ?x57785 (* (* 2.0 l_0_10_276) l_0_10_279)) (* (* 2.0 l_0_10_319) l_0_10_322))))
 (let ((?x57797 (- (- ?x57791 (* (* 2.0 l_0_10_320) l_0_10_323)) (* (* 2.0 l_0_10_321) l_0_10_324))))
 (= (- ?x57797 ?x55229) 0.0)))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55235 (* ?x55101 l_0_10_56)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57845 (* ?x45731 l_0_10_236)))
 (let ((?x57840 (- (* (* 2.0 l_0_10_1) l_0_10_11) (* (* 2.0 l_0_10_184) l_0_10_191))))
 (let ((?x57844 (- (- ?x57840 (* (* 2.0 l_0_10_185) l_0_10_192)) (* (* 2.0 l_0_10_186) l_0_10_193))))
 (let ((?x57850 (- (- (+ ?x57844 ?x57845) (* (* 2.0 l_0_10_274) l_0_10_281)) (* (* 2.0 l_0_10_275) l_0_10_282))))
 (let ((?x57854 (- (- ?x57850 (* (* 2.0 l_0_10_276) l_0_10_283)) (* (* 2.0 l_0_10_319) l_0_10_326))))
 (let ((?x57858 (- (- ?x57854 (* (* 2.0 l_0_10_320) l_0_10_327)) (* (* 2.0 l_0_10_321) l_0_10_328))))
 (= (- ?x57858 ?x55235) 0.0)))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55245 (* ?x55101 l_0_10_61)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x45811 (* ?x45731 l_0_10_241)))
 (let ((?x45781 (- (* (* 2.0 l_0_10_1) l_0_10_16) (* (* 2.0 l_0_10_184) l_0_10_196))))
 (let ((?x45799 (- (- ?x45781 (* (* 2.0 l_0_10_185) l_0_10_197)) (* (* 2.0 l_0_10_186) l_0_10_198))))
 (let ((?x45717 (- (- (+ ?x45799 ?x45811) (* (* 2.0 l_0_10_274) l_0_10_286)) (* (* 2.0 l_0_10_275) l_0_10_287))))
 (let ((?x45714 (- (- ?x45717 (* (* 2.0 l_0_10_276) l_0_10_288)) (* (* 2.0 l_0_10_319) l_0_10_331))))
 (let ((?x45796 (- (- ?x45714 (* (* 2.0 l_0_10_320) l_0_10_332)) (* (* 2.0 l_0_10_321) l_0_10_333))))
 (= (- ?x45796 ?x55245) 0.0)))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55255 (* ?x55101 l_0_10_67)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57925 (* ?x45731 l_0_10_247)))
 (let ((?x57920 (- (* (* 2.0 l_0_10_1) l_0_10_22) (* (* 2.0 l_0_10_184) l_0_10_202))))
 (let ((?x57924 (- (- ?x57920 (* (* 2.0 l_0_10_185) l_0_10_203)) (* (* 2.0 l_0_10_186) l_0_10_204))))
 (let ((?x57930 (- (- (+ ?x57924 ?x57925) (* (* 2.0 l_0_10_274) l_0_10_292)) (* (* 2.0 l_0_10_275) l_0_10_293))))
 (let ((?x57934 (- (- ?x57930 (* (* 2.0 l_0_10_276) l_0_10_294)) (* (* 2.0 l_0_10_319) l_0_10_337))))
 (let ((?x57938 (- (- ?x57934 (* (* 2.0 l_0_10_320) l_0_10_338)) (* (* 2.0 l_0_10_321) l_0_10_339))))
 (= (- ?x57938 ?x55255) 0.0)))))))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x58008 (* ?x58007 l_0_10_94)))
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55311 (* ?x55101 l_0_10_74)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57992 (* ?x45731 l_0_10_254)))
 (let ((?x57731 (* ?x45731 l_0_10_229)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x57983 (* ?x55363 l_0_10_139)))
 (let ((?x57986 (- (- (* (* 2.0 l_0_10_1) l_0_10_29) ?x57983) (* (* 2.0 l_0_10_184) l_0_10_209))))
 (let ((?x57990 (- (- ?x57986 (* (* 2.0 l_0_10_185) l_0_10_210)) (* (* 2.0 l_0_10_186) l_0_10_211))))
 (let ((?x57997 (- (- (+ (- ?x57990 ?x57731) ?x57992) (* (* 2.0 l_0_10_274) l_0_10_299)) (* (* 2.0 l_0_10_275) l_0_10_300))))
 (let ((?x58001 (- (- ?x57997 (* (* 2.0 l_0_10_276) l_0_10_301)) (* (* 2.0 l_0_10_319) l_0_10_344))))
 (let ((?x58005 (- (- ?x58001 (* (* 2.0 l_0_10_320) l_0_10_345)) (* (* 2.0 l_0_10_321) l_0_10_346))))
 (= (+ (- ?x58005 ?x55311) ?x58008) 0.0))))))))))))))))
(assert
 (let ((?x55101 (* 2.0 l_0_10_46)))
 (let ((?x55366 (* ?x55101 l_0_10_82)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x58061 (* ?x45731 l_0_10_262)))
 (let ((?x58056 (- (* (* 2.0 l_0_10_1) l_0_10_37) (* (* 2.0 l_0_10_184) l_0_10_217))))
 (let ((?x58060 (- (- ?x58056 (* (* 2.0 l_0_10_185) l_0_10_218)) (* (* 2.0 l_0_10_186) l_0_10_219))))
 (let ((?x58066 (- (- (+ ?x58060 ?x58061) (* (* 2.0 l_0_10_274) l_0_10_307)) (* (* 2.0 l_0_10_275) l_0_10_308))))
 (let ((?x58070 (- (- ?x58066 (* (* 2.0 l_0_10_276) l_0_10_309)) (* (* 2.0 l_0_10_319) l_0_10_352))))
 (let ((?x58074 (- (- ?x58070 (* (* 2.0 l_0_10_320) l_0_10_353)) (* (* 2.0 l_0_10_321) l_0_10_354))))
 (= (- ?x58074 ?x55366) 0.0)))))))))))
(assert
 (let ((?x55390 (* l_0_10_48 l_0_10_48)))
 (let ((?x55388 (* l_0_10_47 l_0_10_47)))
 (let ((?x55381 (* l_0_10_3 l_0_10_3)))
 (let ((?x58118 (* l_0_10_228 l_0_10_228)))
 (let ((?x58120 (+ (+ (+ (* l_0_10_2 l_0_10_2) (* l_0_10_227 l_0_10_227)) ?x58118) ?x55381)))
 (= (- (- ?x58120 ?x55388) ?x55390) 0.0)))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55412 (* ?x55411 l_0_10_50)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55409 (* ?x55408 l_0_10_49)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55406 (* ?x55405 l_0_10_5)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58134 (* ?x58133 l_0_10_230)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58131 (* ?x58130 l_0_10_229)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57276 (* ?x55443 l_0_10_4)))
 (= (- (- (+ (+ (+ ?x57276 ?x58131) ?x58134) ?x55406) ?x55409) ?x55412) 0.0))))))))))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x58008 (* ?x58007 l_0_10_94)))
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55450 (* ?x55411 l_0_10_53)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55448 (* ?x55408 l_0_10_52)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55446 (* ?x55405 l_0_10_8)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58153 (* ?x58133 l_0_10_233)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58151 (* ?x58130 l_0_10_232)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55444 (* ?x55443 l_0_10_7)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x57983 (* ?x55363 l_0_10_139)))
 (let ((?x58158 (- (- (- (+ (+ (+ (+ ?x57983 ?x55444) ?x58151) ?x58153) ?x55446) ?x55448) ?x55450) ?x58008)))
 (= ?x58158 0.0)))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55485 (* ?x55411 l_0_10_57)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55483 (* ?x55408 l_0_10_56)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58176 (* ?x58133 l_0_10_237)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58174 (* ?x58130 l_0_10_236)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55481 (* ?x55480 l_0_10_3)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x57334 (* ?x55945 l_0_10_2)))
 (= (- (- (+ (+ (+ ?x57334 ?x55481) ?x58174) ?x58176) ?x55483) ?x55485) 0.0))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55509 (* ?x55411 l_0_10_62)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55507 (* ?x55408 l_0_10_61)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58193 (* ?x58133 l_0_10_242)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58191 (* ?x58130 l_0_10_241)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55500 (* ?x55115 l_0_10_3)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x57371 (* ?x55108 l_0_10_2)))
 (= (- (- (+ (+ (+ ?x57371 ?x55500) ?x58191) ?x58193) ?x55507) ?x55509) 0.0))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55533 (* ?x55411 l_0_10_68)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55531 (* ?x55408 l_0_10_67)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55524 (* ?x55523 l_0_10_3)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58209 (* ?x58133 l_0_10_248)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x45982 (* ?x58130 l_0_10_247)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57399 (* ?x55443 l_0_10_22)))
 (= (- (- (+ (+ (+ ?x57399 ?x45982) ?x58209) ?x55524) ?x55531) ?x55533) 0.0))))))))))))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x58242 (* ?x58241 l_0_10_95)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x58239 (* ?x58238 l_0_10_94)))
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55556 (* ?x55411 l_0_10_75)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55554 (* ?x55408 l_0_10_74)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55547 (* ?x55405 l_0_10_30)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58233 (* ?x58133 l_0_10_255)))
 (let ((?x58134 (* ?x58133 l_0_10_230)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58230 (* ?x58130 l_0_10_254)))
 (let ((?x58131 (* ?x58130 l_0_10_229)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x57450 (* ?x55443 l_0_10_29)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x58226 (* ?x55580 l_0_10_140)))
 (let ((?x58231 (+ (- (+ (- (* (* (- 2.0) l_0_10_137) l_0_10_139) ?x58226) ?x57450) ?x58131) ?x58230)))
 (let ((?x58243 (+ (+ (- (- (+ (+ (- ?x58231 ?x58134) ?x58233) ?x55547) ?x55554) ?x55556) ?x58239) ?x58242)))
 (= ?x58243 0.0))))))))))))))))))))))))
(assert
 (let ((?x55411 (* 2.0 l_0_10_48)))
 (let ((?x55589 (* ?x55411 l_0_10_83)))
 (let ((?x55408 (* 2.0 l_0_10_47)))
 (let ((?x55587 (* ?x55408 l_0_10_82)))
 (let ((?x55405 (* 2.0 l_0_10_3)))
 (let ((?x55585 (* ?x55405 l_0_10_38)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58274 (* ?x58133 l_0_10_263)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58272 (* ?x58130 l_0_10_262)))
 (let ((?x55443 (* 2.0 l_0_10_2)))
 (let ((?x55583 (* ?x55443 l_0_10_37)))
 (= (- (- (+ (+ (+ ?x55583 ?x58272) ?x58274) ?x55585) ?x55587) ?x55589) 0.0))))))))))))))
(assert
 (let ((?x55630 (* l_0_10_6 l_0_10_6)))
 (let ((?x55628 (* l_0_10_51 l_0_10_51)))
 (let ((?x55626 (* l_0_10_50 l_0_10_50)))
 (let ((?x55624 (* l_0_10_5 l_0_10_5)))
 (let ((?x55622 (* l_0_10_49 l_0_10_49)))
 (let ((?x55634 (* l_0_10_4 l_0_10_4)))
 (let ((?x58297 (* l_0_10_231 l_0_10_231)))
 (let ((?x58298 (+ (+ (* l_0_10_229 l_0_10_229) (* l_0_10_230 l_0_10_230)) ?x58297)))
 (= (+ (- (- (+ (- (+ ?x58298 ?x55634) ?x55622) ?x55624) ?x55626) ?x55628) ?x55630) 0.0))))))))))
(assert
 (let ((?x55660 (* (* 2.0 l_0_10_6) l_0_10_9)))
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55657 (* ?x55656 l_0_10_54)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55654 (* ?x55653 l_0_10_53)))
 (let ((?x55651 (* (* 2.0 l_0_10_5) l_0_10_8)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55648 (* ?x55647 l_0_10_52)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58324 (* ?x58323 l_0_10_234)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58321 (* ?x58320 l_0_10_233)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58319 (* ?x58313 l_0_10_232)))
 (let ((?x58329 (- (+ (+ (+ ?x58319 ?x58321) ?x58324) (* (* 2.0 l_0_10_4) l_0_10_7)) ?x55648)))
 (= (+ (- (- (+ ?x58329 ?x55651) ?x55654) ?x55657) ?x55660) 0.0)))))))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55701 (* ?x55656 l_0_10_58)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55699 (* ?x55653 l_0_10_57)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55697 (* ?x55647 l_0_10_56)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58353 (* ?x58323 l_0_10_238)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58351 (* ?x58320 l_0_10_237)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58349 (* ?x58313 l_0_10_236)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x55695 (* ?x55694 l_0_10_6)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x55692 (* ?x55480 l_0_10_5)))
 (let ((?x58352 (+ (+ (+ (+ (* (* 2.0 l_0_10_11) l_0_10_4) ?x55692) ?x55695) ?x58349) ?x58351)))
 (= (- (- (- (+ ?x58352 ?x58353) ?x55697) ?x55699) ?x55701) 0.0)))))))))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55736 (* ?x55656 l_0_10_63)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55734 (* ?x55653 l_0_10_62)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55732 (* ?x55647 l_0_10_61)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58376 (* ?x58323 l_0_10_243)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58374 (* ?x58320 l_0_10_242)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58372 (* ?x58313 l_0_10_241)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x55724 (* ?x55118 l_0_10_6)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x55721 (* ?x55115 l_0_10_5)))
 (let ((?x58375 (+ (+ (+ (+ (* (* 2.0 l_0_10_16) l_0_10_4) ?x55721) ?x55724) ?x58372) ?x58374)))
 (= (- (- (- (+ ?x58375 ?x58376) ?x55732) ?x55734) ?x55736) 0.0)))))))))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55773 (* ?x55656 l_0_10_69)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55771 (* ?x55653 l_0_10_68)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55769 (* ?x55647 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x55767 (* ?x55766 l_0_10_6)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58402 (* ?x58323 l_0_10_249)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58400 (* ?x58320 l_0_10_248)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x55758 (* ?x55523 l_0_10_5)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58397 (* ?x58313 l_0_10_247)))
 (let ((?x58403 (+ (+ (+ (+ (* (* 2.0 l_0_10_22) l_0_10_4) ?x58397) ?x55758) ?x58400) ?x58402)))
 (= (- (- (- (+ ?x58403 ?x55767) ?x55769) ?x55771) ?x55773) 0.0)))))))))))))))))))
(assert
 (let ((?x58437 (* l_0_10_96 l_0_10_96)))
 (let ((?x58435 (* l_0_10_95 l_0_10_95)))
 (let ((?x58433 (* l_0_10_94 l_0_10_94)))
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55811 (* ?x55656 l_0_10_76)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55809 (* ?x55653 l_0_10_75)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55807 (* ?x55647 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x55805 (* ?x55804 l_0_10_6)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x55796 (* ?x55795 l_0_10_5)))
 (let ((?x58297 (* l_0_10_231 l_0_10_231)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58423 (* ?x58323 l_0_10_256)))
 (let ((?x58295 (* l_0_10_230 l_0_10_230)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58420 (* ?x58320 l_0_10_255)))
 (let ((?x58294 (* l_0_10_229 l_0_10_229)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58417 (* ?x58313 l_0_10_254)))
 (let ((?x58415 (* l_0_10_141 l_0_10_141)))
 (let ((?x58416 (- (- (* (- l_0_10_139) l_0_10_139) (* l_0_10_140 l_0_10_140)) ?x58415)))
 (let ((?x58427 (+ (- (+ (- (+ (- (+ ?x58416 ?x58417) ?x58294) ?x58420) ?x58295) ?x58423) ?x58297) (* (* 2.0 l_0_10_29) l_0_10_4))))
 (let ((?x58436 (+ (+ (- (- (- (+ (+ ?x58427 ?x55796) ?x55805) ?x55807) ?x55809) ?x55811) ?x58433) ?x58435)))
 (= (+ ?x58436 ?x58437) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x55656 (* 2.0 l_0_10_51)))
 (let ((?x55858 (* ?x55656 l_0_10_84)))
 (let ((?x55653 (* 2.0 l_0_10_50)))
 (let ((?x55856 (* ?x55653 l_0_10_83)))
 (let ((?x55647 (* 2.0 l_0_10_49)))
 (let ((?x55854 (* ?x55647 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x55852 (* ?x55851 l_0_10_6)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x55849 (* ?x55848 l_0_10_5)))
 (let ((?x55845 (* 2.0 l_0_10_37)))
 (let ((?x55846 (* ?x55845 l_0_10_4)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58467 (* ?x58323 l_0_10_264)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58465 (* ?x58320 l_0_10_263)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58464 (* ?x58313 l_0_10_262)))
 (let ((?x58473 (- (- (+ (+ (+ (+ (+ ?x58464 ?x58465) ?x58467) ?x55846) ?x55849) ?x55852) ?x55854) ?x55856)))
 (= (- ?x58473 ?x55858) 0.0)))))))))))))))))))))
(assert
 (let ((?x55926 (* l_0_10_9 l_0_10_9)))
 (let ((?x55924 (* l_0_10_8 l_0_10_8)))
 (let ((?x55922 (* l_0_10_7 l_0_10_7)))
 (let ((?x55920 (* l_0_10_55 l_0_10_55)))
 (let ((?x55918 (* l_0_10_54 l_0_10_54)))
 (let ((?x55916 (* l_0_10_53 l_0_10_53)))
 (let ((?x55905 (* l_0_10_52 l_0_10_52)))
 (let ((?x58493 (* l_0_10_235 l_0_10_235)))
 (let ((?x58491 (* l_0_10_234 l_0_10_234)))
 (let ((?x58489 (* l_0_10_233 l_0_10_233)))
 (let ((?x58492 (+ (+ (+ (* l_0_10_10 l_0_10_10) (* l_0_10_232 l_0_10_232)) ?x58489) ?x58491)))
 (let ((?x58500 (+ (+ (- (- (- (- (+ ?x58492 ?x58493) ?x55905) ?x55916) ?x55918) ?x55920) ?x55922) ?x55924)))
 (= (+ ?x58500 ?x55926) 0.0))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56011 (* ?x55967 l_0_10_64)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56009 (* ?x55964 l_0_10_63)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56007 (* ?x55961 l_0_10_62)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56005 (* ?x55958 l_0_10_61)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58526 (* ?x57183 l_0_10_244)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58524 (* ?x57180 l_0_10_243)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58522 (* ?x57177 l_0_10_242)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58520 (* ?x57174 l_0_10_241)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56003 (* ?x55118 l_0_10_9)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56001 (* ?x55115 l_0_10_8)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x55999 (* ?x55108 l_0_10_7)))
 (let ((?x58521 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_19) ?x55999) ?x56001) ?x56003) ?x58520)))
 (let ((?x58531 (- (- (- (- (+ (+ (+ ?x58521 ?x58522) ?x58524) ?x58526) ?x56005) ?x56007) ?x56009) ?x56011)))
 (= ?x58531 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56049 (* ?x55967 l_0_10_70)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56047 (* ?x55964 l_0_10_69)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56045 (* ?x55961 l_0_10_68)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56043 (* ?x55958 l_0_10_67)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56041 (* ?x55766 l_0_10_9)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58558 (* ?x57183 l_0_10_250)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58556 (* ?x57180 l_0_10_249)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58554 (* ?x57177 l_0_10_248)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58552 (* ?x57174 l_0_10_247)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56032 (* ?x55523 l_0_10_8)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x44871 (* ?x44877 l_0_10_7)))
 (let ((?x58555 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_25) ?x44871) ?x56032) ?x58552) ?x58554)))
 (let ((?x58564 (- (- (- (- (+ (+ (+ ?x58555 ?x58556) ?x58558) ?x56041) ?x56043) ?x56045) ?x56047) ?x56049)))
 (= ?x58564 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58612 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x58609 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x58606 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56088 (* ?x55967 l_0_10_77)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56086 (* ?x55964 l_0_10_76)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56084 (* ?x55961 l_0_10_75)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56082 (* ?x55958 l_0_10_74)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56080 (* ?x55804 l_0_10_9)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56071 (* ?x55795 l_0_10_8)))
 (let ((?x56066 (* 2.0 l_0_10_29)))
 (let ((?x56068 (* ?x56066 l_0_10_7)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58596 (* ?x57183 l_0_10_257)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58594 (* ?x57180 l_0_10_256)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58592 (* ?x57177 l_0_10_255)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58590 (* ?x57174 l_0_10_254)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58324 (* ?x58323 l_0_10_234)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58321 (* ?x58320 l_0_10_233)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58319 (* ?x58313 l_0_10_232)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x58585 (* ?x55842 l_0_10_144)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x58583 (* ?x55839 l_0_10_143)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x58581 (* ?x55836 l_0_10_142)))
 (let ((?x58587 (- (- (- (- (* (* 2.0 l_0_10_10) l_0_10_32) ?x58581) ?x58583) ?x58585) ?x58319)))
 (let ((?x58598 (+ (+ (+ (+ (+ (- (- ?x58587 ?x58321) ?x58324) ?x58590) ?x58592) ?x58594) ?x58596) ?x56068)))
 (let ((?x58607 (+ (- (- (- (- (+ (+ ?x58598 ?x56071) ?x56080) ?x56082) ?x56084) ?x56086) ?x56088) ?x58606)))
 (= (+ (+ ?x58607 ?x58609) ?x58612) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55967 (* 2.0 l_0_10_55)))
 (let ((?x56150 (* ?x55967 l_0_10_85)))
 (let ((?x55964 (* 2.0 l_0_10_54)))
 (let ((?x56148 (* ?x55964 l_0_10_84)))
 (let ((?x55961 (* 2.0 l_0_10_53)))
 (let ((?x56146 (* ?x55961 l_0_10_83)))
 (let ((?x55958 (* 2.0 l_0_10_52)))
 (let ((?x56144 (* ?x55958 l_0_10_82)))
 (let ((?x55851 (* 2.0 l_0_10_39)))
 (let ((?x56142 (* ?x55851 l_0_10_9)))
 (let ((?x55848 (* 2.0 l_0_10_38)))
 (let ((?x56140 (* ?x55848 l_0_10_8)))
 (let ((?x55845 (* 2.0 l_0_10_37)))
 (let ((?x56138 (* ?x55845 l_0_10_7)))
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58657 (* ?x57183 l_0_10_265)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58655 (* ?x57180 l_0_10_264)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58653 (* ?x57177 l_0_10_263)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58651 (* ?x57174 l_0_10_262)))
 (let ((?x58658 (+ (+ (+ (+ (* (* 2.0 l_0_10_10) l_0_10_40) ?x58651) ?x58653) ?x58655) ?x58657)))
 (let ((?x58665 (- (- (- (- (+ (+ (+ ?x58658 ?x56138) ?x56140) ?x56142) ?x56144) ?x56146) ?x56148) ?x56150)))
 (= ?x58665 0.0))))))))))))))))))))))))))
(assert
 (let ((?x56205 (* l_0_10_60 l_0_10_60)))
 (let ((?x56203 (* l_0_10_59 l_0_10_59)))
 (let ((?x56201 (* l_0_10_58 l_0_10_58)))
 (let ((?x56199 (* l_0_10_57 l_0_10_57)))
 (let ((?x56197 (* l_0_10_56 l_0_10_56)))
 (let ((?x58697 (* l_0_10_240 l_0_10_240)))
 (let ((?x58695 (* l_0_10_239 l_0_10_239)))
 (let ((?x58693 (* l_0_10_238 l_0_10_238)))
 (let ((?x58691 (* l_0_10_237 l_0_10_237)))
 (let ((?x58689 (* l_0_10_236 l_0_10_236)))
 (let ((?x56195 (* l_0_10_15 l_0_10_15)))
 (let ((?x56193 (* l_0_10_14 l_0_10_14)))
 (let ((?x56180 (* l_0_10_13 l_0_10_13)))
 (let ((?x58687 (+ (+ (+ (* l_0_10_11 l_0_10_11) (* l_0_10_12 l_0_10_12)) ?x56180) ?x56193)))
 (let ((?x58699 (- (+ (+ (+ (+ (+ (+ ?x58687 ?x56195) ?x58689) ?x58691) ?x58693) ?x58695) ?x58697) ?x56197)))
 (= (- (- (- (- ?x58699 ?x56199) ?x56201) ?x56203) ?x56205) 0.0)))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56246 (* ?x56245 l_0_10_65)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56243 (* ?x56242 l_0_10_64)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56240 (* ?x56239 l_0_10_63)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56237 (* ?x56236 l_0_10_62)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56234 (* ?x56233 l_0_10_61)))
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58731 (* ?x58730 l_0_10_245)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58728 (* ?x58727 l_0_10_244)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58725 (* ?x58724 l_0_10_243)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58722 (* ?x58721 l_0_10_242)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58719 (* ?x58718 l_0_10_241)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56231 (* ?x56230 l_0_10_20)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56228 (* ?x56227 l_0_10_19)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56225 (* ?x55694 l_0_10_18)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56223 (* ?x55480 l_0_10_17)))
 (let ((?x58717 (+ (+ (+ (+ (* (* 2.0 l_0_10_11) l_0_10_16) ?x56223) ?x56225) ?x56228) ?x56231)))
 (let ((?x58734 (- (- (+ (+ (+ (+ (+ ?x58717 ?x58719) ?x58722) ?x58725) ?x58728) ?x58731) ?x56234) ?x56237)))
 (= (- (- (- ?x58734 ?x56240) ?x56243) ?x56246) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56293 (* ?x56245 l_0_10_71)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56291 (* ?x56242 l_0_10_70)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56289 (* ?x56239 l_0_10_69)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56287 (* ?x56236 l_0_10_68)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56285 (* ?x56233 l_0_10_67)))
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58775 (* ?x58730 l_0_10_251)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58773 (* ?x58727 l_0_10_250)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58771 (* ?x58724 l_0_10_249)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58769 (* ?x58721 l_0_10_248)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58767 (* ?x58718 l_0_10_247)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56283 (* ?x56230 l_0_10_26)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56273 (* ?x56227 l_0_10_25)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56270 (* ?x55694 l_0_10_24)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56266 (* ?x55480 l_0_10_23)))
 (let ((?x58766 (+ (+ (+ (+ (* (* 2.0 l_0_10_11) l_0_10_22) ?x56266) ?x56270) ?x56273) ?x56283)))
 (let ((?x58778 (- (- (+ (+ (+ (+ (+ ?x58766 ?x58767) ?x58769) ?x58771) ?x58773) ?x58775) ?x56285) ?x56287)))
 (= (- (- (- ?x58778 ?x56289) ?x56291) ?x56293) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56328 (* ?x56245 l_0_10_78)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56326 (* ?x56242 l_0_10_77)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56324 (* ?x56239 l_0_10_76)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56322 (* ?x56236 l_0_10_75)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56320 (* ?x56233 l_0_10_74)))
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58805 (* ?x58730 l_0_10_258)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58803 (* ?x58727 l_0_10_257)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58801 (* ?x58724 l_0_10_256)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58799 (* ?x58721 l_0_10_255)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58797 (* ?x58718 l_0_10_254)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58353 (* ?x58323 l_0_10_238)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58351 (* ?x58320 l_0_10_237)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58349 (* ?x58313 l_0_10_236)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56318 (* ?x56230 l_0_10_33)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x57274 (* ?x55842 l_0_10_148)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x57272 (* ?x55839 l_0_10_147)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56308 (* ?x56227 l_0_10_32)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x57270 (* ?x55836 l_0_10_146)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x33809 (* ?x55694 l_0_10_31)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x33798 (* ?x55480 l_0_10_30)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57268 (* ?x56362 l_0_10_96)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57266 (* ?x56359 l_0_10_95)))
 (let ((?x35045 (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_94) ?x57266) ?x57268) (* (* 2.0 l_0_10_11) l_0_10_29))))
 (let ((?x35053 (+ (- (- (+ (- (+ (+ ?x35045 ?x33798) ?x33809) ?x57270) ?x56308) ?x57272) ?x57274) ?x56318)))
 (let ((?x58804 (+ (+ (+ (+ (- (- (- ?x35053 ?x58349) ?x58351) ?x58353) ?x58797) ?x58799) ?x58801) ?x58803)))
 (= (- (- (- (- (- (+ ?x58804 ?x58805) ?x56320) ?x56322) ?x56324) ?x56326) ?x56328) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56245 (* 2.0 l_0_10_60)))
 (let ((?x56404 (* ?x56245 l_0_10_86)))
 (let ((?x56242 (* 2.0 l_0_10_59)))
 (let ((?x56402 (* ?x56242 l_0_10_85)))
 (let ((?x56239 (* 2.0 l_0_10_58)))
 (let ((?x56400 (* ?x56239 l_0_10_84)))
 (let ((?x56236 (* 2.0 l_0_10_57)))
 (let ((?x56398 (* ?x56236 l_0_10_83)))
 (let ((?x56233 (* 2.0 l_0_10_56)))
 (let ((?x56396 (* ?x56233 l_0_10_82)))
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58863 (* ?x58730 l_0_10_266)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58861 (* ?x58727 l_0_10_265)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58859 (* ?x58724 l_0_10_264)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58857 (* ?x58721 l_0_10_263)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58855 (* ?x58718 l_0_10_262)))
 (let ((?x56230 (* 2.0 l_0_10_15)))
 (let ((?x56391 (* ?x56230 l_0_10_41)))
 (let ((?x56227 (* 2.0 l_0_10_14)))
 (let ((?x56377 (* ?x56227 l_0_10_40)))
 (let ((?x55694 (* 2.0 l_0_10_13)))
 (let ((?x56375 (* ?x55694 l_0_10_39)))
 (let ((?x55480 (* 2.0 l_0_10_12)))
 (let ((?x56373 (* ?x55480 l_0_10_38)))
 (let ((?x55945 (* 2.0 l_0_10_11)))
 (let ((?x56371 (* ?x55945 l_0_10_37)))
 (let ((?x58860 (+ (+ (+ (+ (+ (+ (+ ?x56371 ?x56373) ?x56375) ?x56377) ?x56391) ?x58855) ?x58857) ?x58859)))
 (let ((?x58869 (- (- (- (- (- (+ (+ ?x58860 ?x58861) ?x58863) ?x56396) ?x56398) ?x56400) ?x56402) ?x56404)))
 (= ?x58869 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56491 (* l_0_10_66 l_0_10_66)))
 (let ((?x56489 (* l_0_10_65 l_0_10_65)))
 (let ((?x56487 (* l_0_10_64 l_0_10_64)))
 (let ((?x56485 (* l_0_10_63 l_0_10_63)))
 (let ((?x56483 (* l_0_10_62 l_0_10_62)))
 (let ((?x56481 (* l_0_10_61 l_0_10_61)))
 (let ((?x58905 (* l_0_10_246 l_0_10_246)))
 (let ((?x58903 (* l_0_10_245 l_0_10_245)))
 (let ((?x58901 (* l_0_10_244 l_0_10_244)))
 (let ((?x58899 (* l_0_10_243 l_0_10_243)))
 (let ((?x58897 (* l_0_10_242 l_0_10_242)))
 (let ((?x58895 (* l_0_10_241 l_0_10_241)))
 (let ((?x56479 (* l_0_10_21 l_0_10_21)))
 (let ((?x56477 (* l_0_10_20 l_0_10_20)))
 (let ((?x56462 (* l_0_10_19 l_0_10_19)))
 (let ((?x56459 (* l_0_10_18 l_0_10_18)))
 (let ((?x58892 (+ (+ (+ (* l_0_10_16 l_0_10_16) (* l_0_10_17 l_0_10_17)) ?x56459) ?x56462)))
 (let ((?x58904 (+ (+ (+ (+ (+ (+ (+ ?x58892 ?x56477) ?x56479) ?x58895) ?x58897) ?x58899) ?x58901) ?x58903)))
 (let ((?x58912 (- (- (- (- (- (- (+ ?x58904 ?x58905) ?x56481) ?x56483) ?x56485) ?x56487) ?x56489) ?x56491)))
 (= ?x58912 0.0)))))))))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56556 (* ?x55165 l_0_10_79)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56554 (* ?x55162 l_0_10_78)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56552 (* ?x55159 l_0_10_77)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56550 (* ?x55156 l_0_10_76)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56548 (* ?x55153 l_0_10_75)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56546 (* ?x55150 l_0_10_74)))
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x58946 (* ?x55145 l_0_10_259)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x58944 (* ?x55142 l_0_10_258)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x58942 (* ?x55139 l_0_10_257)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x58940 (* ?x55136 l_0_10_256)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x58938 (* ?x55133 l_0_10_255)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x58936 (* ?x55130 l_0_10_254)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58376 (* ?x58323 l_0_10_243)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58374 (* ?x58320 l_0_10_242)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58372 (* ?x58313 l_0_10_241)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56544 (* ?x55127 l_0_10_34)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56542 (* ?x55124 l_0_10_33)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56540 (* ?x55121 l_0_10_32)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56538 (* ?x55118 l_0_10_31)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56536 (* ?x55115 l_0_10_30)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x55843 (* ?x55842 l_0_10_153)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x55840 (* ?x55839 l_0_10_152)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x55837 (* ?x55836 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55828 (* ?x55275 l_0_10_96)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55825 (* ?x55272 l_0_10_95)))
 (let ((?x58924 (- (- (+ (+ (* (* 2.0 l_0_10_106) l_0_10_94) ?x55825) ?x55828) ?x55837) ?x55840)))
 (let ((?x58929 (+ (+ (+ (- ?x58924 ?x55843) (* (* 2.0 l_0_10_16) l_0_10_29)) ?x56536) ?x56538)))
 (let ((?x58937 (+ (- (- (- (+ (+ (+ ?x58929 ?x56540) ?x56542) ?x56544) ?x58372) ?x58374) ?x58376) ?x58936)))
 (let ((?x58949 (- (- (+ (+ (+ (+ (+ ?x58937 ?x58938) ?x58940) ?x58942) ?x58944) ?x58946) ?x56546) ?x56548)))
 (= (- (- (- (- ?x58949 ?x56550) ?x56552) ?x56554) ?x56556) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55165 (* 2.0 l_0_10_66)))
 (let ((?x56633 (* ?x55165 l_0_10_87)))
 (let ((?x55162 (* 2.0 l_0_10_65)))
 (let ((?x56631 (* ?x55162 l_0_10_86)))
 (let ((?x55159 (* 2.0 l_0_10_64)))
 (let ((?x56629 (* ?x55159 l_0_10_85)))
 (let ((?x55156 (* 2.0 l_0_10_63)))
 (let ((?x56627 (* ?x55156 l_0_10_84)))
 (let ((?x55153 (* 2.0 l_0_10_62)))
 (let ((?x56625 (* ?x55153 l_0_10_83)))
 (let ((?x55150 (* 2.0 l_0_10_61)))
 (let ((?x56623 (* ?x55150 l_0_10_82)))
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x58988 (* ?x55145 l_0_10_267)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x58986 (* ?x55142 l_0_10_266)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x58984 (* ?x55139 l_0_10_265)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x58982 (* ?x55136 l_0_10_264)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x58980 (* ?x55133 l_0_10_263)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x58978 (* ?x55130 l_0_10_262)))
 (let ((?x55127 (* 2.0 l_0_10_21)))
 (let ((?x56621 (* ?x55127 l_0_10_42)))
 (let ((?x55124 (* 2.0 l_0_10_20)))
 (let ((?x56619 (* ?x55124 l_0_10_41)))
 (let ((?x55121 (* 2.0 l_0_10_19)))
 (let ((?x56617 (* ?x55121 l_0_10_40)))
 (let ((?x55118 (* 2.0 l_0_10_18)))
 (let ((?x56615 (* ?x55118 l_0_10_39)))
 (let ((?x55115 (* 2.0 l_0_10_17)))
 (let ((?x56613 (* ?x55115 l_0_10_38)))
 (let ((?x55108 (* 2.0 l_0_10_16)))
 (let ((?x56611 (* ?x55108 l_0_10_37)))
 (let ((?x58981 (+ (+ (+ (+ (+ (+ (+ ?x56611 ?x56613) ?x56615) ?x56617) ?x56619) ?x56621) ?x58978) ?x58980)))
 (let ((?x58992 (- (- (- (+ (+ (+ (+ ?x58981 ?x58982) ?x58984) ?x58986) ?x58988) ?x56623) ?x56625) ?x56627)))
 (= (- (- (- ?x58992 ?x56629) ?x56631) ?x56633) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56716 (* l_0_10_73 l_0_10_73)))
 (let ((?x56714 (* l_0_10_72 l_0_10_72)))
 (let ((?x56712 (* l_0_10_71 l_0_10_71)))
 (let ((?x56710 (* l_0_10_70 l_0_10_70)))
 (let ((?x56708 (* l_0_10_69 l_0_10_69)))
 (let ((?x56706 (* l_0_10_68 l_0_10_68)))
 (let ((?x56704 (* l_0_10_67 l_0_10_67)))
 (let ((?x56702 (* l_0_10_28 l_0_10_28)))
 (let ((?x56700 (* l_0_10_27 l_0_10_27)))
 (let ((?x56698 (* l_0_10_26 l_0_10_26)))
 (let ((?x59032 (* l_0_10_253 l_0_10_253)))
 (let ((?x59030 (* l_0_10_252 l_0_10_252)))
 (let ((?x59028 (* l_0_10_251 l_0_10_251)))
 (let ((?x59026 (* l_0_10_250 l_0_10_250)))
 (let ((?x56682 (* l_0_10_25 l_0_10_25)))
 (let ((?x46197 (* l_0_10_249 l_0_10_249)))
 (let ((?x46195 (* l_0_10_248 l_0_10_248)))
 (let ((?x46194 (* l_0_10_247 l_0_10_247)))
 (let ((?x56679 (* l_0_10_24 l_0_10_24)))
 (let ((?x46199 (+ (+ (+ (* l_0_10_22 l_0_10_22) (* l_0_10_23 l_0_10_23)) ?x56679) ?x46194)))
 (let ((?x59033 (+ (+ (+ (+ (+ (+ (+ ?x46199 ?x46195) ?x46197) ?x56682) ?x59026) ?x59028) ?x59030) ?x59032)))
 (let ((?x59040 (- (- (- (- (+ (+ (+ ?x59033 ?x56698) ?x56700) ?x56702) ?x56704) ?x56706) ?x56708) ?x56710)))
 (= (- (- (- ?x59040 ?x56712) ?x56714) ?x56716) 0.0))))))))))))))))))))))))
(assert
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56782 (* ?x56781 l_0_10_80)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56779 (* ?x56778 l_0_10_79)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56776 (* ?x56775 l_0_10_78)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56773 (* ?x56772 l_0_10_77)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56770 (* ?x56769 l_0_10_76)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56767 (* ?x56766 l_0_10_75)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56764 (* ?x56763 l_0_10_74)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56761 (* ?x56760 l_0_10_35)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56758 (* ?x56757 l_0_10_34)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56755 (* ?x56754 l_0_10_33)))
 (let ((?x59096 (* 2.0 l_0_10_253)))
 (let ((?x59097 (* ?x59096 l_0_10_260)))
 (let ((?x59093 (* 2.0 l_0_10_252)))
 (let ((?x59094 (* ?x59093 l_0_10_259)))
 (let ((?x59090 (* 2.0 l_0_10_251)))
 (let ((?x59091 (* ?x59090 l_0_10_258)))
 (let ((?x59087 (* 2.0 l_0_10_250)))
 (let ((?x59088 (* ?x59087 l_0_10_257)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56752 (* ?x56751 l_0_10_32)))
 (let ((?x59083 (* 2.0 l_0_10_249)))
 (let ((?x59084 (* ?x59083 l_0_10_256)))
 (let ((?x59080 (* 2.0 l_0_10_248)))
 (let ((?x59081 (* ?x59080 l_0_10_255)))
 (let ((?x59077 (* 2.0 l_0_10_247)))
 (let ((?x59078 (* ?x59077 l_0_10_254)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x56749 (* ?x55766 l_0_10_31)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58402 (* ?x58323 l_0_10_249)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58400 (* ?x58320 l_0_10_248)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x56747 (* ?x55523 l_0_10_30)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58397 (* ?x58313 l_0_10_247)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59068 (* ?x55842 l_0_10_159)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59066 (* ?x55839 l_0_10_158)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59064 (* ?x55836 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59062 (* ?x59061 l_0_10_96)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59059 (* ?x59058 l_0_10_95)))
 (let ((?x59067 (- (- (+ (+ (* (* 2.0 l_0_10_112) l_0_10_94) ?x59059) ?x59062) ?x59064) ?x59066)))
 (let ((?x59073 (+ (- (+ (- ?x59067 ?x59068) (* (* 2.0 l_0_10_22) l_0_10_29)) ?x58397) ?x56747)))
 (let ((?x59086 (+ (+ (+ (+ (+ (- (- ?x59073 ?x58400) ?x58402) ?x56749) ?x59078) ?x59081) ?x59084) ?x56752)))
 (let ((?x59101 (+ (+ (+ (+ (+ (+ (+ ?x59086 ?x59088) ?x59091) ?x59094) ?x59097) ?x56755) ?x56758) ?x56761)))
 (let ((?x59108 (- (- (- (- (- (- (- ?x59101 ?x56764) ?x56767) ?x56770) ?x56773) ?x56776) ?x56779) ?x56782)))
 (= ?x59108 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x58008 (* ?x58007 l_0_10_94)))
 (let ((?x56781 (* 2.0 l_0_10_73)))
 (let ((?x56822 (* ?x56781 l_0_10_88)))
 (let ((?x56778 (* 2.0 l_0_10_72)))
 (let ((?x56820 (* ?x56778 l_0_10_87)))
 (let ((?x56775 (* 2.0 l_0_10_71)))
 (let ((?x56818 (* ?x56775 l_0_10_86)))
 (let ((?x56772 (* 2.0 l_0_10_70)))
 (let ((?x56816 (* ?x56772 l_0_10_85)))
 (let ((?x56769 (* 2.0 l_0_10_69)))
 (let ((?x56814 (* ?x56769 l_0_10_84)))
 (let ((?x56766 (* 2.0 l_0_10_68)))
 (let ((?x56812 (* ?x56766 l_0_10_83)))
 (let ((?x56763 (* 2.0 l_0_10_67)))
 (let ((?x56810 (* ?x56763 l_0_10_82)))
 (let ((?x56760 (* 2.0 l_0_10_28)))
 (let ((?x56808 (* ?x56760 l_0_10_43)))
 (let ((?x56757 (* 2.0 l_0_10_27)))
 (let ((?x56806 (* ?x56757 l_0_10_42)))
 (let ((?x56754 (* 2.0 l_0_10_26)))
 (let ((?x56804 (* ?x56754 l_0_10_41)))
 (let ((?x59096 (* 2.0 l_0_10_253)))
 (let ((?x59150 (* ?x59096 l_0_10_268)))
 (let ((?x59093 (* 2.0 l_0_10_252)))
 (let ((?x59148 (* ?x59093 l_0_10_267)))
 (let ((?x59090 (* 2.0 l_0_10_251)))
 (let ((?x59146 (* ?x59090 l_0_10_266)))
 (let ((?x59087 (* 2.0 l_0_10_250)))
 (let ((?x59144 (* ?x59087 l_0_10_265)))
 (let ((?x56751 (* 2.0 l_0_10_25)))
 (let ((?x56802 (* ?x56751 l_0_10_40)))
 (let ((?x59083 (* 2.0 l_0_10_249)))
 (let ((?x59141 (* ?x59083 l_0_10_264)))
 (let ((?x59080 (* 2.0 l_0_10_248)))
 (let ((?x59139 (* ?x59080 l_0_10_263)))
 (let ((?x59077 (* 2.0 l_0_10_247)))
 (let ((?x59137 (* ?x59077 l_0_10_262)))
 (let ((?x55766 (* 2.0 l_0_10_24)))
 (let ((?x33991 (* ?x55766 l_0_10_39)))
 (let ((?x55523 (* 2.0 l_0_10_23)))
 (let ((?x33986 (* ?x55523 l_0_10_38)))
 (let ((?x44877 (* 2.0 l_0_10_22)))
 (let ((?x33887 (* ?x44877 l_0_10_37)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x57983 (* ?x55363 l_0_10_139)))
 (let ((?x59143 (+ (+ (+ (+ (+ (+ (+ ?x57983 ?x33887) ?x33986) ?x33991) ?x59137) ?x59139) ?x59141) ?x56802)))
 (let ((?x59154 (+ (+ (+ (+ (+ (+ (+ ?x59143 ?x59144) ?x59146) ?x59148) ?x59150) ?x56804) ?x56806) ?x56808)))
 (let ((?x59161 (- (- (- (- (- (- (- ?x59154 ?x56810) ?x56812) ?x56814) ?x56816) ?x56818) ?x56820) ?x56822)))
 (= (- ?x59161 ?x58008) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56894 (* l_0_10_81 l_0_10_81)))
 (let ((?x56892 (* l_0_10_80 l_0_10_80)))
 (let ((?x56890 (* l_0_10_79 l_0_10_79)))
 (let ((?x56888 (* l_0_10_78 l_0_10_78)))
 (let ((?x56886 (* l_0_10_77 l_0_10_77)))
 (let ((?x56884 (* l_0_10_76 l_0_10_76)))
 (let ((?x56882 (* l_0_10_75 l_0_10_75)))
 (let ((?x56880 (* l_0_10_74 l_0_10_74)))
 (let ((?x56878 (* l_0_10_36 l_0_10_36)))
 (let ((?x56876 (* l_0_10_35 l_0_10_35)))
 (let ((?x56874 (* l_0_10_34 l_0_10_34)))
 (let ((?x56872 (* l_0_10_33 l_0_10_33)))
 (let ((?x56860 (* l_0_10_32 l_0_10_32)))
 (let ((?x45239 (* l_0_10_31 l_0_10_31)))
 (let ((?x56861 (* l_0_10_30 l_0_10_30)))
 (let ((?x56898 (* l_0_10_29 l_0_10_29)))
 (let ((?x59199 (* l_0_10_261 l_0_10_261)))
 (let ((?x59197 (* l_0_10_260 l_0_10_260)))
 (let ((?x59195 (* l_0_10_259 l_0_10_259)))
 (let ((?x59193 (* l_0_10_258 l_0_10_258)))
 (let ((?x59191 (* l_0_10_257 l_0_10_257)))
 (let ((?x59189 (* l_0_10_256 l_0_10_256)))
 (let ((?x59187 (* l_0_10_255 l_0_10_255)))
 (let ((?x59185 (* l_0_10_254 l_0_10_254)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58423 (* ?x58323 l_0_10_256)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58420 (* ?x58320 l_0_10_255)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58417 (* ?x58313 l_0_10_254)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59180 (* ?x55842 l_0_10_166)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59178 (* ?x55839 l_0_10_165)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59176 (* ?x55836 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x46432 (* ?x46430 l_0_10_96)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x46431 (* ?x46428 l_0_10_95)))
 (let ((?x59179 (- (- (+ (+ (* (* 2.0 l_0_10_119) l_0_10_94) ?x46431) ?x46432) ?x59176) ?x59178)))
 (let ((?x59190 (+ (+ (+ (- (- (- (- ?x59179 ?x59180) ?x58417) ?x58420) ?x58423) ?x59185) ?x59187) ?x59189)))
 (let ((?x59202 (+ (+ (+ (+ (+ (+ (+ ?x59190 ?x59191) ?x59193) ?x59195) ?x59197) ?x59199) ?x56898) ?x56861)))
 (let ((?x59209 (- (+ (+ (+ (+ (+ (+ ?x59202 ?x45239) ?x56860) ?x56872) ?x56874) ?x56876) ?x56878) ?x56880)))
 (let ((?x59216 (- (- (- (- (- (- (- ?x59209 ?x56882) ?x56884) ?x56886) ?x56888) ?x56890) ?x56892) ?x56894)))
 (= ?x59216 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x56988 (* (* 2.0 l_0_10_81) l_0_10_89)))
 (let ((?x56985 (* (* 2.0 l_0_10_80) l_0_10_88)))
 (let ((?x56982 (* (* 2.0 l_0_10_79) l_0_10_87)))
 (let ((?x56979 (* (* 2.0 l_0_10_78) l_0_10_86)))
 (let ((?x56976 (* (* 2.0 l_0_10_77) l_0_10_85)))
 (let ((?x56973 (* (* 2.0 l_0_10_76) l_0_10_84)))
 (let ((?x56970 (* (* 2.0 l_0_10_75) l_0_10_83)))
 (let ((?x56967 (* (* 2.0 l_0_10_74) l_0_10_82)))
 (let ((?x56964 (* (* 2.0 l_0_10_36) l_0_10_44)))
 (let ((?x56961 (* (* 2.0 l_0_10_35) l_0_10_43)))
 (let ((?x56958 (* (* 2.0 l_0_10_34) l_0_10_42)))
 (let ((?x56955 (* (* 2.0 l_0_10_33) l_0_10_41)))
 (let ((?x56952 (* (* 2.0 l_0_10_32) l_0_10_40)))
 (let ((?x55804 (* 2.0 l_0_10_31)))
 (let ((?x56949 (* ?x55804 l_0_10_39)))
 (let ((?x55795 (* 2.0 l_0_10_30)))
 (let ((?x56947 (* ?x55795 l_0_10_38)))
 (let ((?x56066 (* 2.0 l_0_10_29)))
 (let ((?x56945 (* ?x56066 l_0_10_37)))
 (let ((?x59287 (* (* 2.0 l_0_10_261) l_0_10_269)))
 (let ((?x59284 (* (* 2.0 l_0_10_260) l_0_10_268)))
 (let ((?x59281 (* (* 2.0 l_0_10_259) l_0_10_267)))
 (let ((?x59278 (* (* 2.0 l_0_10_258) l_0_10_266)))
 (let ((?x59275 (* (* 2.0 l_0_10_257) l_0_10_265)))
 (let ((?x59272 (* (* 2.0 l_0_10_256) l_0_10_264)))
 (let ((?x59269 (* (* 2.0 l_0_10_255) l_0_10_263)))
 (let ((?x59266 (* (* 2.0 l_0_10_254) l_0_10_262)))
 (let ((?x58323 (* 2.0 l_0_10_231)))
 (let ((?x58467 (* ?x58323 l_0_10_264)))
 (let ((?x58320 (* 2.0 l_0_10_230)))
 (let ((?x58465 (* ?x58320 l_0_10_263)))
 (let ((?x58313 (* 2.0 l_0_10_229)))
 (let ((?x58464 (* ?x58313 l_0_10_262)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59260 (* ?x55842 l_0_10_174)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59258 (* ?x55839 l_0_10_173)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59256 (* ?x55836 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59254 (* ?x59253 l_0_10_96)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59251 (* ?x59250 l_0_10_95)))
 (let ((?x59259 (- (- (+ (+ (* (* 2.0 l_0_10_127) l_0_10_94) ?x59251) ?x59254) ?x59256) ?x59258)))
 (let ((?x59273 (+ (+ (+ (- (- (- (- ?x59259 ?x59260) ?x58464) ?x58465) ?x58467) ?x59266) ?x59269) ?x59272)))
 (let ((?x59290 (+ (+ (+ (+ (+ (+ (+ ?x59273 ?x59275) ?x59278) ?x59281) ?x59284) ?x59287) ?x56945) ?x56947)))
 (let ((?x59297 (- (+ (+ (+ (+ (+ (+ ?x59290 ?x56949) ?x56952) ?x56955) ?x56958) ?x56961) ?x56964) ?x56967)))
 (let ((?x59304 (- (- (- (- (- (- (- ?x59297 ?x56970) ?x56973) ?x56976) ?x56979) ?x56982) ?x56985) ?x56988)))
 (= ?x59304 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x57114 (* l_0_10_90 l_0_10_90)))
 (let ((?x57112 (* l_0_10_89 l_0_10_89)))
 (let ((?x57110 (* l_0_10_88 l_0_10_88)))
 (let ((?x57108 (* l_0_10_87 l_0_10_87)))
 (let ((?x57106 (* l_0_10_86 l_0_10_86)))
 (let ((?x57104 (* l_0_10_85 l_0_10_85)))
 (let ((?x57102 (* l_0_10_84 l_0_10_84)))
 (let ((?x57100 (* l_0_10_83 l_0_10_83)))
 (let ((?x57098 (* l_0_10_82 l_0_10_82)))
 (let ((?x57096 (* l_0_10_45 l_0_10_45)))
 (let ((?x57094 (* l_0_10_44 l_0_10_44)))
 (let ((?x57092 (* l_0_10_43 l_0_10_43)))
 (let ((?x57090 (* l_0_10_42 l_0_10_42)))
 (let ((?x57088 (* l_0_10_41 l_0_10_41)))
 (let ((?x57086 (* l_0_10_40 l_0_10_40)))
 (let ((?x57084 (* l_0_10_39 l_0_10_39)))
 (let ((?x57082 (* l_0_10_38 l_0_10_38)))
 (let ((?x57080 (* l_0_10_37 l_0_10_37)))
 (let ((?x59357 (* l_0_10_270 l_0_10_270)))
 (let ((?x59355 (* l_0_10_269 l_0_10_269)))
 (let ((?x59353 (* l_0_10_268 l_0_10_268)))
 (let ((?x59351 (* l_0_10_267 l_0_10_267)))
 (let ((?x46575 (* l_0_10_266 l_0_10_266)))
 (let ((?x24060 (* l_0_10_265 l_0_10_265)))
 (let ((?x46566 (* l_0_10_264 l_0_10_264)))
 (let ((?x46572 (+ (+ (* l_0_10_262 l_0_10_262) (* l_0_10_263 l_0_10_263)) ?x46566)))
 (let ((?x59359 (+ (+ (+ (+ (+ (+ (+ ?x46572 ?x24060) ?x46575) ?x59351) ?x59353) ?x59355) ?x59357) ?x57080)))
 (let ((?x59366 (+ (+ (+ (+ (+ (+ (+ ?x59359 ?x57082) ?x57084) ?x57086) ?x57088) ?x57090) ?x57092) ?x57094)))
 (let ((?x59373 (- (- (- (- (- (- (+ ?x59366 ?x57096) ?x57098) ?x57100) ?x57102) ?x57104) ?x57106) ?x57108)))
 (= (- (- (- ?x59373 ?x57110) ?x57112) ?x57114) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59405 (* l_0_10_91 l_0_10_91)))
 (let ((?x59392 (* l_0_10_136 l_0_10_136)))
 (let ((?x59396 (- (- ?x59392 (* (* 2.0 l_0_10_182) l_0_10_187)) (* (* 2.0 l_0_10_183) l_0_10_188))))
 (let ((?x59400 (- (- ?x59396 (* (* 2.0 l_0_10_272) l_0_10_277)) (* (* 2.0 l_0_10_273) l_0_10_278))))
 (let ((?x59404 (- (- ?x59400 (* (* 2.0 l_0_10_317) l_0_10_322)) (* (* 2.0 l_0_10_318) l_0_10_323))))
 (= (- ?x59404 ?x59405) 0.0)))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46633 (* ?x58007 l_0_10_92)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_137) ?x46633) 0.0))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46673 (* ?x58007 l_0_10_97)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_142) ?x46673) 0.0))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x55364 (* ?x55363 l_0_10_151)))
 (= (+ (* (* (- 2.0) l_0_10_106) l_0_10_91) ?x55364) 0.0))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59444 (* ?x55363 l_0_10_157)))
 (= (+ (* (* (- 2.0) l_0_10_112) l_0_10_91) ?x59444) 0.0))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x59465 (* ?x58241 l_0_10_98)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x59463 (* ?x58238 l_0_10_97)))
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58153 (* ?x58133 l_0_10_233)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58151 (* ?x58130 l_0_10_232)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59459 (* ?x55580 l_0_10_143)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59457 (* ?x55577 l_0_10_142)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59451 (* ?x55363 l_0_10_164)))
 (let ((?x59461 (- (- (- (+ (* (* (- 2.0) l_0_10_119) l_0_10_91) ?x59451) ?x59457) ?x59459) ?x58151)))
 (= (+ (+ (- ?x59461 ?x58153) ?x59463) ?x59465) 0.0)))))))))))))))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x46740 (* ?x55363 l_0_10_172)))
 (= (+ (* (* (- 2.0) l_0_10_127) l_0_10_91) ?x46740) 0.0))))
(assert
 (let ((?x59488 (* l_0_10_93 l_0_10_93)))
 (let ((?x59486 (* l_0_10_92 l_0_10_92)))
 (let ((?x59484 (* l_0_10_138 l_0_10_138)))
 (let ((?x59483 (* l_0_10_137 l_0_10_137)))
 (let ((?x59485 (+ ?x59483 ?x59484)))
 (= (- (- ?x59485 ?x59486) ?x59488) 0.0)))))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x58242 (* ?x58241 l_0_10_95)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x58239 (* ?x58238 l_0_10_94)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x58226 (* ?x55580 l_0_10_140)))
 (= (- (- (+ (* (* 2.0 l_0_10_137) l_0_10_139) ?x58226) ?x58239) ?x58242) 0.0))))))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x59465 (* ?x58241 l_0_10_98)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x59463 (* ?x58238 l_0_10_97)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59459 (* ?x55580 l_0_10_143)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59457 (* ?x55577 l_0_10_142)))
 (= (- (- (+ ?x59457 ?x59459) ?x59463) ?x59465) 0.0))))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x55581 (* ?x55580 l_0_10_152)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x55578 (* ?x55577 l_0_10_151)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55570 (* ?x55272 l_0_10_93)))
 (let ((?x55582 (+ (+ (- (* (* (- 2.0) l_0_10_106) l_0_10_92) ?x55570) ?x55578) ?x55581)))
 (= ?x55582 0.0)))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59514 (* ?x55580 l_0_10_158)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59512 (* ?x55577 l_0_10_157)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59510 (* ?x59058 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_112) l_0_10_92) ?x59510) ?x59512) ?x59514) 0.0))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x46756 (* ?x55580 l_0_10_165)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x46753 (* ?x55577 l_0_10_164)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x36198 (* ?x46428 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_119) l_0_10_92) ?x36198) ?x46753) ?x46756) 0.0))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59532 (* ?x55580 l_0_10_173)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59530 (* ?x55577 l_0_10_172)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59523 (* ?x59250 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_127) l_0_10_92) ?x59523) ?x59530) ?x59532) 0.0))))))))
(assert
 (let ((?x58437 (* l_0_10_96 l_0_10_96)))
 (let ((?x58435 (* l_0_10_95 l_0_10_95)))
 (let ((?x58433 (* l_0_10_94 l_0_10_94)))
 (let ((?x58415 (* l_0_10_141 l_0_10_141)))
 (let ((?x59547 (+ (+ (* l_0_10_139 l_0_10_139) (* l_0_10_140 l_0_10_140)) ?x58415)))
 (= (- (- (- ?x59547 ?x58433) ?x58435) ?x58437) 0.0)))))))
(assert
 (let ((?x58612 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x58609 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x58606 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x58585 (* ?x55842 l_0_10_144)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x58583 (* ?x55839 l_0_10_143)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x58581 (* ?x55836 l_0_10_142)))
 (= (- (- (- (+ (+ ?x58581 ?x58583) ?x58585) ?x58606) ?x58609) ?x58612) 0.0)))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x55843 (* ?x55842 l_0_10_153)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x55840 (* ?x55839 l_0_10_152)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x55837 (* ?x55836 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x55828 (* ?x55275 l_0_10_96)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55825 (* ?x55272 l_0_10_95)))
 (let ((?x55841 (+ (+ (- (- (* (* (- 2.0) l_0_10_106) l_0_10_94) ?x55825) ?x55828) ?x55837) ?x55840)))
 (let ((?x55844 (+ ?x55841 ?x55843)))
 (= ?x55844 0.0))))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59068 (* ?x55842 l_0_10_159)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59066 (* ?x55839 l_0_10_158)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59064 (* ?x55836 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59062 (* ?x59061 l_0_10_96)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59059 (* ?x59058 l_0_10_95)))
 (let ((?x59568 (+ (+ (- (- (* (* (- 2.0) l_0_10_112) l_0_10_94) ?x59059) ?x59062) ?x59064) ?x59066)))
 (= (+ ?x59568 ?x59068) 0.0)))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59180 (* ?x55842 l_0_10_166)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59178 (* ?x55839 l_0_10_165)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59176 (* ?x55836 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x46432 (* ?x46430 l_0_10_96)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x46431 (* ?x46428 l_0_10_95)))
 (let ((?x59580 (+ (+ (- (- (* (* (- 2.0) l_0_10_119) l_0_10_94) ?x46431) ?x46432) ?x59176) ?x59178)))
 (= (+ ?x59580 ?x59180) 0.0)))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59260 (* ?x55842 l_0_10_174)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59258 (* ?x55839 l_0_10_173)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59256 (* ?x55836 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59254 (* ?x59253 l_0_10_96)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59251 (* ?x59250 l_0_10_95)))
 (let ((?x59586 (+ (+ (- (- (* (* (- 2.0) l_0_10_127) l_0_10_94) ?x59251) ?x59254) ?x59256) ?x59258)))
 (= (+ ?x59586 ?x59260) 0.0)))))))))))))
(assert
 (let ((?x59608 (* l_0_10_99 l_0_10_99)))
 (let ((?x59606 (* l_0_10_98 l_0_10_98)))
 (let ((?x59604 (* l_0_10_97 l_0_10_97)))
 (let ((?x59602 (* l_0_10_145 l_0_10_145)))
 (let ((?x59600 (* l_0_10_144 l_0_10_144)))
 (let ((?x59598 (* l_0_10_143 l_0_10_143)))
 (let ((?x59599 (+ (+ (* (- l_0_10_100) l_0_10_100) (* l_0_10_142 l_0_10_142)) ?x59598)))
 (= (- (- (- (+ (+ ?x59599 ?x59600) ?x59602) ?x59604) ?x59606) ?x59608) 0.0)))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x56136 (* ?x56135 l_0_10_154)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x56133 (* ?x56132 l_0_10_153)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x56130 (* ?x56129 l_0_10_152)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x56127 (* ?x56126 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56124 (* ?x55275 l_0_10_99)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56122 (* ?x55272 l_0_10_98)))
 (let ((?x55265 (* 2.0 l_0_10_106)))
 (let ((?x56113 (* ?x55265 l_0_10_97)))
 (let ((?x59628 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_109) ?x56113) ?x56122) ?x56124) ?x56127)))
 (= (+ (+ (+ ?x59628 ?x56130) ?x56133) ?x56136) 0.0)))))))))))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x46860 (* ?x56135 l_0_10_160)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x46848 (* ?x56132 l_0_10_159)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x36246 (* ?x56129 l_0_10_158)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x36186 (* ?x56126 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36269 (* ?x59061 l_0_10_99)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x46823 (* ?x59058 l_0_10_98)))
 (let ((?x59056 (* 2.0 l_0_10_112)))
 (let ((?x36222 (* ?x59056 l_0_10_97)))
 (let ((?x46841 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_115) ?x36222) ?x46823) ?x36269) ?x36186)))
 (= (+ (+ (+ ?x46841 ?x36246) ?x46848) ?x46860) 0.0)))))))))))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59663 (* ?x56135 l_0_10_167)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59661 (* ?x56132 l_0_10_166)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59659 (* ?x56129 l_0_10_165)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59657 (* ?x56126 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59655 (* ?x46430 l_0_10_99)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59646 (* ?x46428 l_0_10_98)))
 (let ((?x46422 (* 2.0 l_0_10_119)))
 (let ((?x59642 (* ?x46422 l_0_10_97)))
 (let ((?x59658 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_122) ?x59642) ?x59646) ?x59655) ?x59657)))
 (= (+ (+ (+ ?x59658 ?x59659) ?x59661) ?x59663) 0.0)))))))))))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59701 (* ?x56135 l_0_10_175)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59699 (* ?x56132 l_0_10_174)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59697 (* ?x56129 l_0_10_173)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59695 (* ?x56126 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59693 (* ?x59253 l_0_10_99)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59684 (* ?x59250 l_0_10_98)))
 (let ((?x59248 (* 2.0 l_0_10_127)))
 (let ((?x59680 (* ?x59248 l_0_10_97)))
 (let ((?x59696 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_130) ?x59680) ?x59684) ?x59693) ?x59695)))
 (= (+ (+ (+ ?x59696 ?x59697) ?x59699) ?x59701) 0.0)))))))))))))))))
(assert
 (let ((?x56609 (* l_0_10_156 l_0_10_156)))
 (let ((?x56607 (* l_0_10_155 l_0_10_155)))
 (let ((?x56605 (* l_0_10_154 l_0_10_154)))
 (let ((?x56603 (* l_0_10_153 l_0_10_153)))
 (let ((?x56601 (* l_0_10_152 l_0_10_152)))
 (let ((?x56599 (* l_0_10_151 l_0_10_151)))
 (let ((?x56597 (* l_0_10_111 l_0_10_111)))
 (let ((?x56595 (* l_0_10_110 l_0_10_110)))
 (let ((?x56593 (* l_0_10_109 l_0_10_109)))
 (let ((?x56591 (* l_0_10_108 l_0_10_108)))
 (let ((?x56592 (- (- (* (- l_0_10_106) l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x56591)))
 (let ((?x56606 (+ (+ (+ (+ (- (- (- ?x56592 ?x56593) ?x56595) ?x56597) ?x56599) ?x56601) ?x56603) ?x56605)))
 (let ((?x56610 (+ (+ ?x56606 ?x56607) ?x56609)))
 (= ?x56610 0.0)))))))))))))))
(assert
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x56943 (* ?x55302 l_0_10_169)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x56941 (* ?x55299 l_0_10_168)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x56939 (* ?x55296 l_0_10_167)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x56937 (* ?x55293 l_0_10_166)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x56935 (* ?x55290 l_0_10_165)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x56933 (* ?x55287 l_0_10_164)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x56931 (* ?x55284 l_0_10_124)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x56929 (* ?x55281 l_0_10_123)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x56927 (* ?x55278 l_0_10_122)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56925 (* ?x55275 l_0_10_121)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56923 (* ?x55272 l_0_10_120)))
 (let ((?x56930 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_119) ?x56923) ?x56925) ?x56927) ?x56929)))
 (let ((?x56944 (+ (+ (+ (+ (+ (+ (- ?x56930 ?x56931) ?x56933) ?x56935) ?x56937) ?x56939) ?x56941) ?x56943)))
 (= ?x56944 0.0))))))))))))))))))))))))))
(assert
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x57078 (* ?x55302 l_0_10_177)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x57076 (* ?x55299 l_0_10_176)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x57074 (* ?x55296 l_0_10_175)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x57072 (* ?x55293 l_0_10_174)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x57070 (* ?x55290 l_0_10_173)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x57068 (* ?x55287 l_0_10_172)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x57066 (* ?x55284 l_0_10_132)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x57064 (* ?x55281 l_0_10_131)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x57062 (* ?x55278 l_0_10_130)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x57060 (* ?x55275 l_0_10_129)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x57058 (* ?x55272 l_0_10_128)))
 (let ((?x57065 (- (- (- (- (* (* (- 2.0) l_0_10_106) l_0_10_127) ?x57058) ?x57060) ?x57062) ?x57064)))
 (let ((?x57079 (+ (+ (+ (+ (+ (+ (- ?x57065 ?x57066) ?x57068) ?x57070) ?x57072) ?x57074) ?x57076) ?x57078)))
 (= ?x57079 0.0))))))))))))))))))))))))))
(assert
 (let ((?x59754 (* l_0_10_163 l_0_10_163)))
 (let ((?x59752 (* l_0_10_162 l_0_10_162)))
 (let ((?x59750 (* l_0_10_161 l_0_10_161)))
 (let ((?x59748 (* l_0_10_160 l_0_10_160)))
 (let ((?x59746 (* l_0_10_159 l_0_10_159)))
 (let ((?x59744 (* l_0_10_158 l_0_10_158)))
 (let ((?x59742 (* l_0_10_157 l_0_10_157)))
 (let ((?x59740 (* l_0_10_118 l_0_10_118)))
 (let ((?x59738 (* l_0_10_117 l_0_10_117)))
 (let ((?x59736 (* l_0_10_116 l_0_10_116)))
 (let ((?x59734 (* l_0_10_115 l_0_10_115)))
 (let ((?x59732 (* l_0_10_114 l_0_10_114)))
 (let ((?x59733 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59732)))
 (let ((?x59747 (+ (+ (+ (- (- (- (- ?x59733 ?x59734) ?x59736) ?x59738) ?x59740) ?x59742) ?x59744) ?x59746)))
 (= (+ (+ (+ (+ ?x59747 ?x59748) ?x59750) ?x59752) ?x59754) 0.0))))))))))))))))
(assert
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59820 (* ?x59819 l_0_10_170)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59817 (* ?x59816 l_0_10_169)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59814 (* ?x59813 l_0_10_168)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59811 (* ?x59810 l_0_10_167)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59808 (* ?x59807 l_0_10_166)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59805 (* ?x59804 l_0_10_165)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59802 (* ?x59801 l_0_10_164)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59799 (* ?x59798 l_0_10_125)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59796 (* ?x59795 l_0_10_124)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59793 (* ?x59792 l_0_10_123)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59790 (* ?x59789 l_0_10_122)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59787 (* ?x59061 l_0_10_121)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59785 (* ?x59058 l_0_10_120)))
 (let ((?x59794 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_119) ?x59785) ?x59787) ?x59790) ?x59793)))
 (let ((?x59815 (+ (+ (+ (+ (+ (- (- ?x59794 ?x59796) ?x59799) ?x59802) ?x59805) ?x59808) ?x59811) ?x59814)))
 (= (+ (+ ?x59815 ?x59817) ?x59820) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x59465 (* ?x58241 l_0_10_98)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x59463 (* ?x58238 l_0_10_97)))
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59866 (* ?x59819 l_0_10_178)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59864 (* ?x59816 l_0_10_177)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59862 (* ?x59813 l_0_10_176)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59860 (* ?x59810 l_0_10_175)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59858 (* ?x59807 l_0_10_174)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59856 (* ?x59804 l_0_10_173)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59854 (* ?x59801 l_0_10_172)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59459 (* ?x55580 l_0_10_143)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59457 (* ?x55577 l_0_10_142)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59850 (* ?x59798 l_0_10_133)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59848 (* ?x59795 l_0_10_132)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59846 (* ?x59792 l_0_10_131)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59844 (* ?x59789 l_0_10_130)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36392 (* ?x59061 l_0_10_129)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x4779 (* ?x59058 l_0_10_128)))
 (let ((?x59847 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_127) ?x4779) ?x36392) ?x59844) ?x59846)))
 (let ((?x59851 (- (- ?x59847 ?x59848) ?x59850)))
 (let ((?x59863 (+ (+ (+ (+ (+ (+ (+ ?x59851 ?x59457) ?x59459) ?x59854) ?x59856) ?x59858) ?x59860) ?x59862)))
 (= (- (- (+ (+ ?x59863 ?x59864) ?x59866) ?x59463) ?x59465) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59935 (* l_0_10_171 l_0_10_171)))
 (let ((?x59933 (* l_0_10_170 l_0_10_170)))
 (let ((?x59931 (* l_0_10_169 l_0_10_169)))
 (let ((?x59929 (* l_0_10_168 l_0_10_168)))
 (let ((?x59927 (* l_0_10_167 l_0_10_167)))
 (let ((?x59925 (* l_0_10_166 l_0_10_166)))
 (let ((?x59923 (* l_0_10_165 l_0_10_165)))
 (let ((?x59921 (* l_0_10_164 l_0_10_164)))
 (let ((?x59919 (* l_0_10_126 l_0_10_126)))
 (let ((?x59917 (* l_0_10_125 l_0_10_125)))
 (let ((?x59915 (* l_0_10_124 l_0_10_124)))
 (let ((?x59913 (* l_0_10_123 l_0_10_123)))
 (let ((?x59911 (* l_0_10_122 l_0_10_122)))
 (let ((?x59909 (* l_0_10_121 l_0_10_121)))
 (let ((?x59910 (- (- (* (- l_0_10_119) l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59909)))
 (let ((?x59924 (+ (+ (- (- (- (- (- ?x59910 ?x59911) ?x59913) ?x59915) ?x59917) ?x59919) ?x59921) ?x59923)))
 (= (+ (+ (+ (+ (+ (+ ?x59924 ?x59925) ?x59927) ?x59929) ?x59931) ?x59933) ?x59935) 0.0))))))))))))))))))
(assert
 (let ((?x60002 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59999 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59996 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59993 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59990 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59987 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59984 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59981 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59978 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59975 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59972 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59969 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59966 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59963 (* ?x46430 l_0_10_129)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59961 (* ?x46428 l_0_10_128)))
 (let ((?x59970 (- (- (- (- (* (* (- 2.0) l_0_10_119) l_0_10_127) ?x59961) ?x59963) ?x59966) ?x59969)))
 (let ((?x59991 (+ (+ (+ (+ (- (- (- ?x59970 ?x59972) ?x59975) ?x59978) ?x59981) ?x59984) ?x59987) ?x59990)))
 (= (+ (+ (+ (+ ?x59991 ?x59993) ?x59996) ?x59999) ?x60002) 0.0)))))))))))))))))))))
(assert
 (let ((?x60062 (* l_0_10_180 l_0_10_180)))
 (let ((?x60060 (* l_0_10_179 l_0_10_179)))
 (let ((?x60058 (* l_0_10_178 l_0_10_178)))
 (let ((?x60056 (* l_0_10_177 l_0_10_177)))
 (let ((?x60054 (* l_0_10_176 l_0_10_176)))
 (let ((?x60052 (* l_0_10_175 l_0_10_175)))
 (let ((?x60050 (* l_0_10_174 l_0_10_174)))
 (let ((?x60048 (* l_0_10_173 l_0_10_173)))
 (let ((?x60046 (* l_0_10_172 l_0_10_172)))
 (let ((?x60044 (* l_0_10_135 l_0_10_135)))
 (let ((?x60042 (* l_0_10_134 l_0_10_134)))
 (let ((?x60040 (* l_0_10_133 l_0_10_133)))
 (let ((?x60038 (* l_0_10_132 l_0_10_132)))
 (let ((?x47043 (* l_0_10_131 l_0_10_131)))
 (let ((?x47037 (* l_0_10_130 l_0_10_130)))
 (let ((?x47034 (* l_0_10_129 l_0_10_129)))
 (let ((?x46999 (- (- (* (- l_0_10_127) l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47034)))
 (let ((?x60047 (+ (- (- (- (- (- (- ?x46999 ?x47037) ?x47043) ?x60038) ?x60040) ?x60042) ?x60044) ?x60046)))
 (let ((?x60061 (+ (+ (+ (+ (+ (+ (+ ?x60047 ?x60048) ?x60050) ?x60052) ?x60054) ?x60056) ?x60058) ?x60060)))
 (= (+ ?x60061 ?x60062) 0.0)))))))))))))))))))))
(assert
 (let ((?x59405 (* l_0_10_91 l_0_10_91)))
 (let ((?x59392 (* l_0_10_136 l_0_10_136)))
 (let ((?x60092 (- (- ?x59392 (* (* 2.0 l_0_10_202) l_0_10_217)) (* (* 2.0 l_0_10_203) l_0_10_218))))
 (let ((?x60098 (- (- ?x60092 (* (* 2.0 l_0_10_204) l_0_10_219)) (* (* 2.0 l_0_10_205) l_0_10_220))))
 (let ((?x60104 (- (- ?x60098 (* (* 2.0 l_0_10_206) l_0_10_221)) (* (* 2.0 l_0_10_207) l_0_10_222))))
 (let ((?x60110 (- (- ?x60104 (* (* 2.0 l_0_10_208) l_0_10_223)) (* (* 2.0 l_0_10_292) l_0_10_307))))
 (let ((?x60116 (- (- ?x60110 (* (* 2.0 l_0_10_293) l_0_10_308)) (* (* 2.0 l_0_10_294) l_0_10_309))))
 (let ((?x60122 (- (- ?x60116 (* (* 2.0 l_0_10_295) l_0_10_310)) (* (* 2.0 l_0_10_296) l_0_10_311))))
 (let ((?x60128 (- (- ?x60122 (* (* 2.0 l_0_10_297) l_0_10_312)) (* (* 2.0 l_0_10_298) l_0_10_313))))
 (let ((?x60134 (- (- ?x60128 (* (* 2.0 l_0_10_337) l_0_10_352)) (* (* 2.0 l_0_10_338) l_0_10_353))))
 (let ((?x60140 (- (- ?x60134 (* (* 2.0 l_0_10_339) l_0_10_354)) (* (* 2.0 l_0_10_340) l_0_10_355))))
 (let ((?x60146 (- (- ?x60140 (* (* 2.0 l_0_10_341) l_0_10_356)) (* (* 2.0 l_0_10_342) l_0_10_357))))
 (= (- (- ?x60146 (* (* 2.0 l_0_10_343) l_0_10_358)) ?x59405) 0.0))))))))))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46633 (* ?x58007 l_0_10_92)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_137) ?x46633) 0.0))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46673 (* ?x58007 l_0_10_97)))
 (= (- (* (* 2.0 l_0_10_136) l_0_10_142) ?x46673) 0.0))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x39661 (* ?x55363 l_0_10_146)))
 (= (+ (* (* (- 2.0) l_0_10_101) l_0_10_91) ?x39661) 0.0))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59444 (* ?x55363 l_0_10_157)))
 (= (+ (* (* (- 2.0) l_0_10_112) l_0_10_91) ?x59444) 0.0))))
(assert
 (let ((?x59096 (* 2.0 l_0_10_253)))
 (let ((?x59150 (* ?x59096 l_0_10_268)))
 (let ((?x59093 (* 2.0 l_0_10_252)))
 (let ((?x59148 (* ?x59093 l_0_10_267)))
 (let ((?x59090 (* 2.0 l_0_10_251)))
 (let ((?x59146 (* ?x59090 l_0_10_266)))
 (let ((?x59087 (* 2.0 l_0_10_250)))
 (let ((?x59144 (* ?x59087 l_0_10_265)))
 (let ((?x59083 (* 2.0 l_0_10_249)))
 (let ((?x59141 (* ?x59083 l_0_10_264)))
 (let ((?x59080 (* 2.0 l_0_10_248)))
 (let ((?x59139 (* ?x59080 l_0_10_263)))
 (let ((?x59077 (* 2.0 l_0_10_247)))
 (let ((?x59137 (* ?x59077 l_0_10_262)))
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59866 (* ?x59819 l_0_10_178)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59864 (* ?x59816 l_0_10_177)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59862 (* ?x59813 l_0_10_176)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59860 (* ?x59810 l_0_10_175)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59858 (* ?x59807 l_0_10_174)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59856 (* ?x59804 l_0_10_173)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59854 (* ?x59801 l_0_10_172)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59451 (* ?x55363 l_0_10_164)))
 (let ((?x46422 (* 2.0 l_0_10_119)))
 (let ((?x60198 (* ?x46422 l_0_10_91)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59850 (* ?x59798 l_0_10_133)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59848 (* ?x59795 l_0_10_132)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59846 (* ?x59792 l_0_10_131)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59844 (* ?x59789 l_0_10_130)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36392 (* ?x59061 l_0_10_129)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x4779 (* ?x59058 l_0_10_128)))
 (let ((?x60195 (+ (+ (+ (+ (* (* 2.0 l_0_10_112) l_0_10_127) ?x4779) ?x36392) ?x59844) ?x59846)))
 (let ((?x60203 (- (- (- (+ (- (+ (+ ?x60195 ?x59848) ?x59850) ?x60198) ?x59451) ?x59854) ?x59856) ?x59858)))
 (let ((?x60210 (- (- (- (- (- (- (- ?x60203 ?x59860) ?x59862) ?x59864) ?x59866) ?x59137) ?x59139) ?x59141)))
 (= (- (- (- (- ?x60210 ?x59144) ?x59146) ?x59148) ?x59150) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x46740 (* ?x55363 l_0_10_172)))
 (= (+ (* (* (- 2.0) l_0_10_127) l_0_10_91) ?x46740) 0.0))))
(assert
 (let ((?x59488 (* l_0_10_93 l_0_10_93)))
 (let ((?x59486 (* l_0_10_92 l_0_10_92)))
 (let ((?x59484 (* l_0_10_138 l_0_10_138)))
 (let ((?x59483 (* l_0_10_137 l_0_10_137)))
 (let ((?x59485 (+ ?x59483 ?x59484)))
 (= (- (- ?x59485 ?x59486) ?x59488) 0.0)))))))
(assert
 (let ((?x58241 (* 2.0 l_0_10_93)))
 (let ((?x58242 (* ?x58241 l_0_10_95)))
 (let ((?x58238 (* 2.0 l_0_10_92)))
 (let ((?x58239 (* ?x58238 l_0_10_94)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x58226 (* ?x55580 l_0_10_140)))
 (= (- (- (+ (* (* 2.0 l_0_10_137) l_0_10_139) ?x58226) ?x58239) ?x58242) 0.0))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x57247 (* ?x55580 l_0_10_147)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x57245 (* ?x55577 l_0_10_146)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x34315 (* ?x56359 l_0_10_93)))
 (let ((?x57248 (+ (+ (- (* (* (- 2.0) l_0_10_101) l_0_10_92) ?x34315) ?x57245) ?x57247)))
 (= ?x57248 0.0)))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59514 (* ?x55580 l_0_10_158)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59512 (* ?x55577 l_0_10_157)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59510 (* ?x59058 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_112) l_0_10_92) ?x59510) ?x59512) ?x59514) 0.0))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x46756 (* ?x55580 l_0_10_165)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x46753 (* ?x55577 l_0_10_164)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x36198 (* ?x46428 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_119) l_0_10_92) ?x36198) ?x46753) ?x46756) 0.0))))))))
(assert
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59532 (* ?x55580 l_0_10_173)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59530 (* ?x55577 l_0_10_172)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59523 (* ?x59250 l_0_10_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_10_127) l_0_10_92) ?x59523) ?x59530) ?x59532) 0.0))))))))
(assert
 (let ((?x58437 (* l_0_10_96 l_0_10_96)))
 (let ((?x58435 (* l_0_10_95 l_0_10_95)))
 (let ((?x58433 (* l_0_10_94 l_0_10_94)))
 (let ((?x58415 (* l_0_10_141 l_0_10_141)))
 (let ((?x59547 (+ (+ (* l_0_10_139 l_0_10_139) (* l_0_10_140 l_0_10_140)) ?x58415)))
 (= (- (- (- ?x59547 ?x58433) ?x58435) ?x58437) 0.0)))))))
(assert
 (let ((?x58612 (* (* 2.0 l_0_10_96) l_0_10_99)))
 (let ((?x58609 (* (* 2.0 l_0_10_95) l_0_10_98)))
 (let ((?x58606 (* (* 2.0 l_0_10_94) l_0_10_97)))
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x58585 (* ?x55842 l_0_10_144)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x58583 (* ?x55839 l_0_10_143)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x58581 (* ?x55836 l_0_10_142)))
 (= (- (- (- (+ (+ ?x58581 ?x58583) ?x58585) ?x58606) ?x58609) ?x58612) 0.0)))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x57274 (* ?x55842 l_0_10_148)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x57272 (* ?x55839 l_0_10_147)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x57270 (* ?x55836 l_0_10_146)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57268 (* ?x56362 l_0_10_96)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57266 (* ?x56359 l_0_10_95)))
 (let ((?x57273 (+ (+ (- (- (* (* (- 2.0) l_0_10_101) l_0_10_94) ?x57266) ?x57268) ?x57270) ?x57272)))
 (let ((?x57275 (+ ?x57273 ?x57274)))
 (= ?x57275 0.0))))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59068 (* ?x55842 l_0_10_159)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59066 (* ?x55839 l_0_10_158)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59064 (* ?x55836 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59062 (* ?x59061 l_0_10_96)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59059 (* ?x59058 l_0_10_95)))
 (let ((?x59568 (+ (+ (- (- (* (* (- 2.0) l_0_10_112) l_0_10_94) ?x59059) ?x59062) ?x59064) ?x59066)))
 (= (+ ?x59568 ?x59068) 0.0)))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59180 (* ?x55842 l_0_10_166)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59178 (* ?x55839 l_0_10_165)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59176 (* ?x55836 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x46432 (* ?x46430 l_0_10_96)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x46431 (* ?x46428 l_0_10_95)))
 (let ((?x59580 (+ (+ (- (- (* (* (- 2.0) l_0_10_119) l_0_10_94) ?x46431) ?x46432) ?x59176) ?x59178)))
 (= (+ ?x59580 ?x59180) 0.0)))))))))))))
(assert
 (let ((?x55842 (* 2.0 l_0_10_141)))
 (let ((?x59260 (* ?x55842 l_0_10_174)))
 (let ((?x55839 (* 2.0 l_0_10_140)))
 (let ((?x59258 (* ?x55839 l_0_10_173)))
 (let ((?x55836 (* 2.0 l_0_10_139)))
 (let ((?x59256 (* ?x55836 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59254 (* ?x59253 l_0_10_96)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59251 (* ?x59250 l_0_10_95)))
 (let ((?x59586 (+ (+ (- (- (* (* (- 2.0) l_0_10_127) l_0_10_94) ?x59251) ?x59254) ?x59256) ?x59258)))
 (= (+ ?x59586 ?x59260) 0.0)))))))))))))
(assert
 (let ((?x59608 (* l_0_10_99 l_0_10_99)))
 (let ((?x59606 (* l_0_10_98 l_0_10_98)))
 (let ((?x59604 (* l_0_10_97 l_0_10_97)))
 (let ((?x59602 (* l_0_10_145 l_0_10_145)))
 (let ((?x59600 (* l_0_10_144 l_0_10_144)))
 (let ((?x59598 (* l_0_10_143 l_0_10_143)))
 (let ((?x59599 (+ (+ (* (- l_0_10_100) l_0_10_100) (* l_0_10_142 l_0_10_142)) ?x59598)))
 (= (- (- (- (+ (+ ?x59599 ?x59600) ?x59602) ?x59604) ?x59606) ?x59608) 0.0)))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x46860 (* ?x56135 l_0_10_160)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x46848 (* ?x56132 l_0_10_159)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x36246 (* ?x56129 l_0_10_158)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x36186 (* ?x56126 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36269 (* ?x59061 l_0_10_99)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x46823 (* ?x59058 l_0_10_98)))
 (let ((?x59056 (* 2.0 l_0_10_112)))
 (let ((?x36222 (* ?x59056 l_0_10_97)))
 (let ((?x46841 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_115) ?x36222) ?x46823) ?x36269) ?x36186)))
 (= (+ (+ (+ ?x46841 ?x36246) ?x46848) ?x46860) 0.0)))))))))))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59663 (* ?x56135 l_0_10_167)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59661 (* ?x56132 l_0_10_166)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59659 (* ?x56129 l_0_10_165)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59657 (* ?x56126 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59655 (* ?x46430 l_0_10_99)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59646 (* ?x46428 l_0_10_98)))
 (let ((?x46422 (* 2.0 l_0_10_119)))
 (let ((?x59642 (* ?x46422 l_0_10_97)))
 (let ((?x59658 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_122) ?x59642) ?x59646) ?x59655) ?x59657)))
 (= (+ (+ (+ ?x59658 ?x59659) ?x59661) ?x59663) 0.0)))))))))))))))))
(assert
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59701 (* ?x56135 l_0_10_175)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59699 (* ?x56132 l_0_10_174)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59697 (* ?x56129 l_0_10_173)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59695 (* ?x56126 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59693 (* ?x59253 l_0_10_99)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59684 (* ?x59250 l_0_10_98)))
 (let ((?x59248 (* 2.0 l_0_10_127)))
 (let ((?x59680 (* ?x59248 l_0_10_97)))
 (let ((?x59696 (+ (- (- (- (* (* (- 2.0) l_0_10_100) l_0_10_130) ?x59680) ?x59684) ?x59693) ?x59695)))
 (= (+ (+ (+ ?x59696 ?x59697) ?x59699) ?x59701) 0.0)))))))))))))))))
(assert
 (let ((?x57345 (* l_0_10_150 l_0_10_150)))
 (let ((?x57343 (* l_0_10_149 l_0_10_149)))
 (let ((?x57341 (* l_0_10_148 l_0_10_148)))
 (let ((?x57339 (* l_0_10_147 l_0_10_147)))
 (let ((?x57337 (* l_0_10_146 l_0_10_146)))
 (let ((?x57332 (* l_0_10_105 l_0_10_105)))
 (let ((?x57330 (* l_0_10_104 l_0_10_104)))
 (let ((?x57328 (* l_0_10_103 l_0_10_103)))
 (let ((?x57329 (- (- (* (- l_0_10_101) l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x57328)))
 (let ((?x57333 (- (- ?x57329 ?x57330) ?x57332)))
 (= (+ (+ (+ (+ (+ ?x57333 ?x57337) ?x57339) ?x57341) ?x57343) ?x57345) 0.0))))))))))))
(assert
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57397 (* ?x56393 l_0_10_161)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57395 (* ?x56388 l_0_10_160)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57393 (* ?x56385 l_0_10_159)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57391 (* ?x56382 l_0_10_158)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57389 (* ?x56379 l_0_10_157)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57387 (* ?x56368 l_0_10_116)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57385 (* ?x56365 l_0_10_115)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57383 (* ?x56362 l_0_10_114)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57381 (* ?x56359 l_0_10_113)))
 (let ((?x57388 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_112) ?x57381) ?x57383) ?x57385) ?x57387)))
 (let ((?x57398 (+ (+ (+ (+ (+ ?x57388 ?x57389) ?x57391) ?x57393) ?x57395) ?x57397)))
 (= ?x57398 0.0))))))))))))))))))))))
(assert
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57448 (* ?x56393 l_0_10_168)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57446 (* ?x56388 l_0_10_167)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57444 (* ?x56385 l_0_10_166)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57442 (* ?x56382 l_0_10_165)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57440 (* ?x56379 l_0_10_164)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57438 (* ?x56368 l_0_10_123)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57436 (* ?x56365 l_0_10_122)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57434 (* ?x56362 l_0_10_121)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57432 (* ?x56359 l_0_10_120)))
 (let ((?x57439 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_119) ?x57432) ?x57434) ?x57436) ?x57438)))
 (let ((?x57449 (+ (+ (+ (+ (+ ?x57439 ?x57440) ?x57442) ?x57444) ?x57446) ?x57448)))
 (= ?x57449 0.0))))))))))))))))))))))
(assert
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57508 (* ?x56393 l_0_10_176)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57506 (* ?x56388 l_0_10_175)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57504 (* ?x56385 l_0_10_174)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57502 (* ?x56382 l_0_10_173)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57500 (* ?x56379 l_0_10_172)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57498 (* ?x56368 l_0_10_131)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57496 (* ?x56365 l_0_10_130)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57494 (* ?x56362 l_0_10_129)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57492 (* ?x56359 l_0_10_128)))
 (let ((?x57499 (- (- (- (- (* (* (- 2.0) l_0_10_101) l_0_10_127) ?x57492) ?x57494) ?x57496) ?x57498)))
 (let ((?x57509 (+ (+ (+ (+ (+ ?x57499 ?x57500) ?x57502) ?x57504) ?x57506) ?x57508)))
 (= ?x57509 0.0))))))))))))))))))))))
(assert
 (let ((?x59754 (* l_0_10_163 l_0_10_163)))
 (let ((?x59752 (* l_0_10_162 l_0_10_162)))
 (let ((?x59750 (* l_0_10_161 l_0_10_161)))
 (let ((?x59748 (* l_0_10_160 l_0_10_160)))
 (let ((?x59746 (* l_0_10_159 l_0_10_159)))
 (let ((?x59744 (* l_0_10_158 l_0_10_158)))
 (let ((?x59742 (* l_0_10_157 l_0_10_157)))
 (let ((?x59740 (* l_0_10_118 l_0_10_118)))
 (let ((?x59738 (* l_0_10_117 l_0_10_117)))
 (let ((?x59736 (* l_0_10_116 l_0_10_116)))
 (let ((?x59734 (* l_0_10_115 l_0_10_115)))
 (let ((?x59732 (* l_0_10_114 l_0_10_114)))
 (let ((?x59733 (- (- (* (- l_0_10_112) l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59732)))
 (let ((?x59747 (+ (+ (+ (- (- (- (- ?x59733 ?x59734) ?x59736) ?x59738) ?x59740) ?x59742) ?x59744) ?x59746)))
 (= (+ (+ (+ (+ ?x59747 ?x59748) ?x59750) ?x59752) ?x59754) 0.0))))))))))))))))
(assert
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59820 (* ?x59819 l_0_10_170)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59817 (* ?x59816 l_0_10_169)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59814 (* ?x59813 l_0_10_168)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59811 (* ?x59810 l_0_10_167)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59808 (* ?x59807 l_0_10_166)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59805 (* ?x59804 l_0_10_165)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59802 (* ?x59801 l_0_10_164)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59799 (* ?x59798 l_0_10_125)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59796 (* ?x59795 l_0_10_124)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59793 (* ?x59792 l_0_10_123)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59790 (* ?x59789 l_0_10_122)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59787 (* ?x59061 l_0_10_121)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59785 (* ?x59058 l_0_10_120)))
 (let ((?x59794 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_119) ?x59785) ?x59787) ?x59790) ?x59793)))
 (let ((?x59815 (+ (+ (+ (+ (+ (- (- ?x59794 ?x59796) ?x59799) ?x59802) ?x59805) ?x59808) ?x59811) ?x59814)))
 (= (+ (+ ?x59815 ?x59817) ?x59820) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59866 (* ?x59819 l_0_10_178)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59864 (* ?x59816 l_0_10_177)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59862 (* ?x59813 l_0_10_176)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59860 (* ?x59810 l_0_10_175)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59858 (* ?x59807 l_0_10_174)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59856 (* ?x59804 l_0_10_173)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59854 (* ?x59801 l_0_10_172)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59850 (* ?x59798 l_0_10_133)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59848 (* ?x59795 l_0_10_132)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59846 (* ?x59792 l_0_10_131)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59844 (* ?x59789 l_0_10_130)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36392 (* ?x59061 l_0_10_129)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x4779 (* ?x59058 l_0_10_128)))
 (let ((?x59847 (- (- (- (- (* (* (- 2.0) l_0_10_112) l_0_10_127) ?x4779) ?x36392) ?x59844) ?x59846)))
 (let ((?x59851 (- (- ?x59847 ?x59848) ?x59850)))
 (let ((?x60240 (+ (+ (+ (+ (+ (+ (+ ?x59851 ?x59854) ?x59856) ?x59858) ?x59860) ?x59862) ?x59864) ?x59866)))
 (= ?x60240 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x59935 (* l_0_10_171 l_0_10_171)))
 (let ((?x59933 (* l_0_10_170 l_0_10_170)))
 (let ((?x59931 (* l_0_10_169 l_0_10_169)))
 (let ((?x59929 (* l_0_10_168 l_0_10_168)))
 (let ((?x59927 (* l_0_10_167 l_0_10_167)))
 (let ((?x59925 (* l_0_10_166 l_0_10_166)))
 (let ((?x59923 (* l_0_10_165 l_0_10_165)))
 (let ((?x59921 (* l_0_10_164 l_0_10_164)))
 (let ((?x59919 (* l_0_10_126 l_0_10_126)))
 (let ((?x59917 (* l_0_10_125 l_0_10_125)))
 (let ((?x59915 (* l_0_10_124 l_0_10_124)))
 (let ((?x59913 (* l_0_10_123 l_0_10_123)))
 (let ((?x59911 (* l_0_10_122 l_0_10_122)))
 (let ((?x59909 (* l_0_10_121 l_0_10_121)))
 (let ((?x59910 (- (- (* (- l_0_10_119) l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59909)))
 (let ((?x59924 (+ (+ (- (- (- (- (- ?x59910 ?x59911) ?x59913) ?x59915) ?x59917) ?x59919) ?x59921) ?x59923)))
 (= (+ (+ (+ (+ (+ (+ ?x59924 ?x59925) ?x59927) ?x59929) ?x59931) ?x59933) ?x59935) 0.0))))))))))))))))))
(assert
 (let ((?x60002 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59999 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59996 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59993 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59990 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59987 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59984 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59981 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59978 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59975 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59972 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59969 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59966 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59963 (* ?x46430 l_0_10_129)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59961 (* ?x46428 l_0_10_128)))
 (let ((?x59970 (- (- (- (- (* (* (- 2.0) l_0_10_119) l_0_10_127) ?x59961) ?x59963) ?x59966) ?x59969)))
 (let ((?x59991 (+ (+ (+ (+ (- (- (- ?x59970 ?x59972) ?x59975) ?x59978) ?x59981) ?x59984) ?x59987) ?x59990)))
 (= (+ (+ (+ (+ ?x59991 ?x59993) ?x59996) ?x59999) ?x60002) 0.0)))))))))))))))))))))
(assert
 (let ((?x60062 (* l_0_10_180 l_0_10_180)))
 (let ((?x60060 (* l_0_10_179 l_0_10_179)))
 (let ((?x60058 (* l_0_10_178 l_0_10_178)))
 (let ((?x60056 (* l_0_10_177 l_0_10_177)))
 (let ((?x60054 (* l_0_10_176 l_0_10_176)))
 (let ((?x60052 (* l_0_10_175 l_0_10_175)))
 (let ((?x60050 (* l_0_10_174 l_0_10_174)))
 (let ((?x60048 (* l_0_10_173 l_0_10_173)))
 (let ((?x60046 (* l_0_10_172 l_0_10_172)))
 (let ((?x60044 (* l_0_10_135 l_0_10_135)))
 (let ((?x60042 (* l_0_10_134 l_0_10_134)))
 (let ((?x60040 (* l_0_10_133 l_0_10_133)))
 (let ((?x60038 (* l_0_10_132 l_0_10_132)))
 (let ((?x47043 (* l_0_10_131 l_0_10_131)))
 (let ((?x47037 (* l_0_10_130 l_0_10_130)))
 (let ((?x47034 (* l_0_10_129 l_0_10_129)))
 (let ((?x46999 (- (- (* (- l_0_10_127) l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47034)))
 (let ((?x60047 (+ (- (- (- (- (- (- ?x46999 ?x47037) ?x47043) ?x60038) ?x60040) ?x60042) ?x60044) ?x60046)))
 (let ((?x60061 (+ (+ (+ (+ (+ (+ (+ ?x60047 ?x60048) ?x60050) ?x60052) ?x60054) ?x60056) ?x60058) ?x60060)))
 (= (+ ?x60061 ?x60062) 0.0)))))))))))))))))))))
(assert
 (let ((?x59405 (* l_0_10_91 l_0_10_91)))
 (let ((?x54893 (* l_0_10_226 l_0_10_226)))
 (let ((?x60250 (- (* (- l_0_10_136) l_0_10_136) (* (* 2.0 l_0_10_181) l_0_10_209))))
 (let ((?x60252 (- (- (- ?x60250 ?x54893) (* (* 2.0 l_0_10_271) l_0_10_299)) (* (* 2.0 l_0_10_316) l_0_10_344))))
 (= (+ ?x60252 ?x59405) 0.0))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46633 (* ?x58007 l_0_10_92)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x45727 (* ?x45731 l_0_10_227)))
 (let ((?x60281 (- (* (* (- 2.0) l_0_10_136) l_0_10_137) (* (* 2.0 l_0_10_182) l_0_10_209))))
 (let ((?x60286 (- (- (- ?x60281 (* (* 2.0 l_0_10_183) l_0_10_210)) ?x45727) (* (* 2.0 l_0_10_272) l_0_10_299))))
 (let ((?x60290 (- (- ?x60286 (* (* 2.0 l_0_10_273) l_0_10_300)) (* (* 2.0 l_0_10_317) l_0_10_344))))
 (= (+ (- ?x60290 (* (* 2.0 l_0_10_318) l_0_10_345)) ?x46633) 0.0)))))))))
(assert
 (let ((?x58007 (* 2.0 l_0_10_91)))
 (let ((?x46673 (* ?x58007 l_0_10_97)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57778 (* ?x45731 l_0_10_232)))
 (let ((?x60339 (- (* (* (- 2.0) l_0_10_136) l_0_10_142) (* (* 2.0 l_0_10_187) l_0_10_209))))
 (let ((?x60343 (- (- ?x60339 (* (* 2.0 l_0_10_188) l_0_10_210)) (* (* 2.0 l_0_10_189) l_0_10_211))))
 (let ((?x60348 (- (- (- ?x60343 (* (* 2.0 l_0_10_190) l_0_10_212)) ?x57778) (* (* 2.0 l_0_10_277) l_0_10_299))))
 (let ((?x60352 (- (- ?x60348 (* (* 2.0 l_0_10_278) l_0_10_300)) (* (* 2.0 l_0_10_279) l_0_10_301))))
 (let ((?x60356 (- (- ?x60352 (* (* 2.0 l_0_10_280) l_0_10_302)) (* (* 2.0 l_0_10_322) l_0_10_344))))
 (let ((?x60360 (- (- ?x60356 (* (* 2.0 l_0_10_323) l_0_10_345)) (* (* 2.0 l_0_10_324) l_0_10_346))))
 (= (+ (- ?x60360 (* (* 2.0 l_0_10_325) l_0_10_347)) ?x46673) 0.0))))))))))))
(assert
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57845 (* ?x45731 l_0_10_236)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x39661 (* ?x55363 l_0_10_146)))
 (let ((?x45259 (* 2.0 l_0_10_101)))
 (let ((?x45268 (* ?x45259 l_0_10_91)))
 (let ((?x60422 (- (- (- ?x45268 ?x39661) (* (* 2.0 l_0_10_191) l_0_10_209)) (* (* 2.0 l_0_10_192) l_0_10_210))))
 (let ((?x60428 (- (- ?x60422 (* (* 2.0 l_0_10_193) l_0_10_211)) (* (* 2.0 l_0_10_194) l_0_10_212))))
 (let ((?x60435 (- (- (- ?x60428 (* (* 2.0 l_0_10_195) l_0_10_213)) ?x57845) (* (* 2.0 l_0_10_281) l_0_10_299))))
 (let ((?x60441 (- (- ?x60435 (* (* 2.0 l_0_10_282) l_0_10_300)) (* (* 2.0 l_0_10_283) l_0_10_301))))
 (let ((?x60447 (- (- ?x60441 (* (* 2.0 l_0_10_284) l_0_10_302)) (* (* 2.0 l_0_10_285) l_0_10_303))))
 (let ((?x60453 (- (- ?x60447 (* (* 2.0 l_0_10_326) l_0_10_344)) (* (* 2.0 l_0_10_327) l_0_10_345))))
 (let ((?x60459 (- (- ?x60453 (* (* 2.0 l_0_10_328) l_0_10_346)) (* (* 2.0 l_0_10_329) l_0_10_347))))
 (= (- ?x60459 (* (* 2.0 l_0_10_330) l_0_10_348)) 0.0)))))))))))))))
(assert
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x45811 (* ?x45731 l_0_10_241)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x55364 (* ?x55363 l_0_10_151)))
 (let ((?x55265 (* 2.0 l_0_10_106)))
 (let ((?x19579 (* ?x55265 l_0_10_91)))
 (let ((?x60492 (- (- (- ?x19579 ?x55364) (* (* 2.0 l_0_10_196) l_0_10_209)) (* (* 2.0 l_0_10_197) l_0_10_210))))
 (let ((?x60496 (- (- ?x60492 (* (* 2.0 l_0_10_198) l_0_10_211)) (* (* 2.0 l_0_10_199) l_0_10_212))))
 (let ((?x60500 (- (- ?x60496 (* (* 2.0 l_0_10_200) l_0_10_213)) (* (* 2.0 l_0_10_201) l_0_10_214))))
 (let ((?x60505 (- (- (- ?x60500 ?x45811) (* (* 2.0 l_0_10_286) l_0_10_299)) (* (* 2.0 l_0_10_287) l_0_10_300))))
 (let ((?x60509 (- (- ?x60505 (* (* 2.0 l_0_10_288) l_0_10_301)) (* (* 2.0 l_0_10_289) l_0_10_302))))
 (let ((?x60513 (- (- ?x60509 (* (* 2.0 l_0_10_290) l_0_10_303)) (* (* 2.0 l_0_10_291) l_0_10_304))))
 (let ((?x60517 (- (- ?x60513 (* (* 2.0 l_0_10_331) l_0_10_344)) (* (* 2.0 l_0_10_332) l_0_10_345))))
 (let ((?x60521 (- (- ?x60517 (* (* 2.0 l_0_10_333) l_0_10_346)) (* (* 2.0 l_0_10_334) l_0_10_347))))
 (let ((?x60525 (- (- ?x60521 (* (* 2.0 l_0_10_335) l_0_10_348)) (* (* 2.0 l_0_10_336) l_0_10_349))))
 (= ?x60525 0.0)))))))))))))))))
(assert
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57925 (* ?x45731 l_0_10_247)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59444 (* ?x55363 l_0_10_157)))
 (let ((?x36892 (- (- (* (* 2.0 l_0_10_112) l_0_10_91) ?x59444) (* (* 2.0 l_0_10_202) l_0_10_209))))
 (let ((?x25274 (- (- ?x36892 (* (* 2.0 l_0_10_203) l_0_10_210)) (* (* 2.0 l_0_10_204) l_0_10_211))))
 (let ((?x25343 (- (- ?x25274 (* (* 2.0 l_0_10_205) l_0_10_212)) (* (* 2.0 l_0_10_206) l_0_10_213))))
 (let ((?x47374 (- (- ?x25343 (* (* 2.0 l_0_10_207) l_0_10_214)) (* (* 2.0 l_0_10_208) l_0_10_215))))
 (let ((?x47426 (- (- (- ?x47374 ?x57925) (* (* 2.0 l_0_10_292) l_0_10_299)) (* (* 2.0 l_0_10_293) l_0_10_300))))
 (let ((?x60556 (- (- ?x47426 (* (* 2.0 l_0_10_294) l_0_10_301)) (* (* 2.0 l_0_10_295) l_0_10_302))))
 (let ((?x60560 (- (- ?x60556 (* (* 2.0 l_0_10_296) l_0_10_303)) (* (* 2.0 l_0_10_297) l_0_10_304))))
 (let ((?x60564 (- (- ?x60560 (* (* 2.0 l_0_10_298) l_0_10_305)) (* (* 2.0 l_0_10_337) l_0_10_344))))
 (let ((?x60568 (- (- ?x60564 (* (* 2.0 l_0_10_338) l_0_10_345)) (* (* 2.0 l_0_10_339) l_0_10_346))))
 (let ((?x60572 (- (- ?x60568 (* (* 2.0 l_0_10_340) l_0_10_347)) (* (* 2.0 l_0_10_341) l_0_10_348))))
 (let ((?x60576 (- (- ?x60572 (* (* 2.0 l_0_10_342) l_0_10_349)) (* (* 2.0 l_0_10_343) l_0_10_350))))
 (= ?x60576 0.0)))))))))))))))))
(assert
 (let ((?x60650 (* l_0_10_351 l_0_10_351)))
 (let ((?x60648 (* l_0_10_350 l_0_10_350)))
 (let ((?x60646 (* l_0_10_349 l_0_10_349)))
 (let ((?x60644 (* l_0_10_348 l_0_10_348)))
 (let ((?x60642 (* l_0_10_347 l_0_10_347)))
 (let ((?x60640 (* l_0_10_346 l_0_10_346)))
 (let ((?x60638 (* l_0_10_345 l_0_10_345)))
 (let ((?x60636 (* l_0_10_344 l_0_10_344)))
 (let ((?x60634 (* l_0_10_306 l_0_10_306)))
 (let ((?x60632 (* l_0_10_305 l_0_10_305)))
 (let ((?x60630 (* l_0_10_304 l_0_10_304)))
 (let ((?x60628 (* l_0_10_303 l_0_10_303)))
 (let ((?x60626 (* l_0_10_302 l_0_10_302)))
 (let ((?x60624 (* l_0_10_301 l_0_10_301)))
 (let ((?x60622 (* l_0_10_300 l_0_10_300)))
 (let ((?x60620 (* l_0_10_299 l_0_10_299)))
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x57992 (* ?x45731 l_0_10_254)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x59451 (* ?x55363 l_0_10_164)))
 (let ((?x46422 (* 2.0 l_0_10_119)))
 (let ((?x60198 (* ?x46422 l_0_10_91)))
 (let ((?x60600 (- (- (- ?x60198 ?x59451) (* (* 1.0 l_0_10_209) l_0_10_209)) (* (* 1.0 l_0_10_210) l_0_10_210))))
 (let ((?x60606 (- (- ?x60600 (* (* 1.0 l_0_10_211) l_0_10_211)) (* (* 1.0 l_0_10_212) l_0_10_212))))
 (let ((?x60612 (- (- ?x60606 (* (* 1.0 l_0_10_213) l_0_10_213)) (* (* 1.0 l_0_10_214) l_0_10_214))))
 (let ((?x60618 (- (- ?x60612 (* (* 1.0 l_0_10_215) l_0_10_215)) (* (* 1.0 l_0_10_216) l_0_10_216))))
 (let ((?x60631 (- (- (- (- (- (- (- ?x60618 ?x57992) ?x60620) ?x60622) ?x60624) ?x60626) ?x60628) ?x60630)))
 (let ((?x60645 (- (- (- (- (- (- (- ?x60631 ?x60632) ?x60634) ?x60636) ?x60638) ?x60640) ?x60642) ?x60644)))
 (= (- (- (- ?x60645 ?x60646) ?x60648) ?x60650) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x45731 (* 2.0 l_0_10_226)))
 (let ((?x58061 (* ?x45731 l_0_10_262)))
 (let ((?x55363 (* 2.0 l_0_10_136)))
 (let ((?x46740 (* ?x55363 l_0_10_172)))
 (let ((?x47633 (- (- (* (* 2.0 l_0_10_127) l_0_10_91) ?x46740) (* (* 2.0 l_0_10_209) l_0_10_217))))
 (let ((?x47699 (- (- ?x47633 (* (* 2.0 l_0_10_210) l_0_10_218)) (* (* 2.0 l_0_10_211) l_0_10_219))))
 (let ((?x25530 (- (- ?x47699 (* (* 2.0 l_0_10_212) l_0_10_220)) (* (* 2.0 l_0_10_213) l_0_10_221))))
 (let ((?x60679 (- (- ?x25530 (* (* 2.0 l_0_10_214) l_0_10_222)) (* (* 2.0 l_0_10_215) l_0_10_223))))
 (let ((?x60686 (- (- (- ?x60679 (* (* 2.0 l_0_10_216) l_0_10_224)) ?x58061) (* (* 2.0 l_0_10_299) l_0_10_307))))
 (let ((?x60692 (- (- ?x60686 (* (* 2.0 l_0_10_300) l_0_10_308)) (* (* 2.0 l_0_10_301) l_0_10_309))))
 (let ((?x60698 (- (- ?x60692 (* (* 2.0 l_0_10_302) l_0_10_310)) (* (* 2.0 l_0_10_303) l_0_10_311))))
 (let ((?x60704 (- (- ?x60698 (* (* 2.0 l_0_10_304) l_0_10_312)) (* (* 2.0 l_0_10_305) l_0_10_313))))
 (let ((?x60710 (- (- ?x60704 (* (* 2.0 l_0_10_306) l_0_10_314)) (* (* 2.0 l_0_10_344) l_0_10_352))))
 (let ((?x60716 (- (- ?x60710 (* (* 2.0 l_0_10_345) l_0_10_353)) (* (* 2.0 l_0_10_346) l_0_10_354))))
 (let ((?x60722 (- (- ?x60716 (* (* 2.0 l_0_10_347) l_0_10_355)) (* (* 2.0 l_0_10_348) l_0_10_356))))
 (let ((?x60728 (- (- ?x60722 (* (* 2.0 l_0_10_349) l_0_10_357)) (* (* 2.0 l_0_10_350) l_0_10_358))))
 (= (- ?x60728 (* (* 2.0 l_0_10_351) l_0_10_359)) 0.0))))))))))))))))))
(assert
 (let ((?x59488 (* l_0_10_93 l_0_10_93)))
 (let ((?x59486 (* l_0_10_92 l_0_10_92)))
 (let ((?x58118 (* l_0_10_228 l_0_10_228)))
 (let ((?x58116 (* l_0_10_227 l_0_10_227)))
 (let ((?x60751 (- (- (* (- l_0_10_137) l_0_10_137) (* l_0_10_138 l_0_10_138)) ?x58116)))
 (= (+ (+ (- ?x60751 ?x58118) ?x59486) ?x59488) 0.0)))))))
(assert
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58176 (* ?x58133 l_0_10_237)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58174 (* ?x58130 l_0_10_236)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x57247 (* ?x55580 l_0_10_147)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x57245 (* ?x55577 l_0_10_146)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x34315 (* ?x56359 l_0_10_93)))
 (let ((?x60766 (- (- (- (+ (* (* 2.0 l_0_10_101) l_0_10_92) ?x34315) ?x57245) ?x57247) ?x58174)))
 (= (- ?x60766 ?x58176) 0.0)))))))))))))
(assert
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58193 (* ?x58133 l_0_10_242)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58191 (* ?x58130 l_0_10_241)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x55581 (* ?x55580 l_0_10_152)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x55578 (* ?x55577 l_0_10_151)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x55570 (* ?x55272 l_0_10_93)))
 (let ((?x7934 (- (- (- (+ (* (* 2.0 l_0_10_106) l_0_10_92) ?x55570) ?x55578) ?x55581) ?x58191)))
 (= (- ?x7934 ?x58193) 0.0)))))))))))))
(assert
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58209 (* ?x58133 l_0_10_248)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x45982 (* ?x58130 l_0_10_247)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59514 (* ?x55580 l_0_10_158)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59512 (* ?x55577 l_0_10_157)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59510 (* ?x59058 l_0_10_93)))
 (let ((?x48034 (- (- (- (+ (* (* 2.0 l_0_10_112) l_0_10_92) ?x59510) ?x59512) ?x59514) ?x45982)))
 (= (- ?x48034 ?x58209) 0.0)))))))))))))
(assert
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58233 (* ?x58133 l_0_10_255)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58230 (* ?x58130 l_0_10_254)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x46756 (* ?x55580 l_0_10_165)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x46753 (* ?x55577 l_0_10_164)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x36198 (* ?x46428 l_0_10_93)))
 (let ((?x48231 (- (- (- (+ (* (* 2.0 l_0_10_119) l_0_10_92) ?x36198) ?x46753) ?x46756) ?x58230)))
 (= (- ?x48231 ?x58233) 0.0)))))))))))))
(assert
 (let ((?x58133 (* 2.0 l_0_10_228)))
 (let ((?x58274 (* ?x58133 l_0_10_263)))
 (let ((?x58130 (* 2.0 l_0_10_227)))
 (let ((?x58272 (* ?x58130 l_0_10_262)))
 (let ((?x55580 (* 2.0 l_0_10_138)))
 (let ((?x59532 (* ?x55580 l_0_10_173)))
 (let ((?x55577 (* 2.0 l_0_10_137)))
 (let ((?x59530 (* ?x55577 l_0_10_172)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59523 (* ?x59250 l_0_10_93)))
 (let ((?x48049 (- (- (- (+ (* (* 2.0 l_0_10_127) l_0_10_92) ?x59523) ?x59530) ?x59532) ?x58272)))
 (= (- ?x48049 ?x58274) 0.0)))))))))))))
(assert
 (let ((?x59608 (* l_0_10_99 l_0_10_99)))
 (let ((?x59606 (* l_0_10_98 l_0_10_98)))
 (let ((?x59604 (* l_0_10_97 l_0_10_97)))
 (let ((?x58493 (* l_0_10_235 l_0_10_235)))
 (let ((?x58491 (* l_0_10_234 l_0_10_234)))
 (let ((?x58489 (* l_0_10_233 l_0_10_233)))
 (let ((?x46033 (* l_0_10_232 l_0_10_232)))
 (let ((?x59602 (* l_0_10_145 l_0_10_145)))
 (let ((?x59600 (* l_0_10_144 l_0_10_144)))
 (let ((?x59598 (* l_0_10_143 l_0_10_143)))
 (let ((?x17988 (- (- (* l_0_10_100 l_0_10_100) (* l_0_10_142 l_0_10_142)) ?x59598)))
 (let ((?x48289 (+ (- (- (- (- (- (- ?x17988 ?x59600) ?x59602) ?x46033) ?x58489) ?x58491) ?x58493) ?x59604)))
 (= (+ (+ ?x48289 ?x59606) ?x59608) 0.0))))))))))))))
(assert
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58526 (* ?x57183 l_0_10_244)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58524 (* ?x57180 l_0_10_243)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58522 (* ?x57177 l_0_10_242)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58520 (* ?x57174 l_0_10_241)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x56136 (* ?x56135 l_0_10_154)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x56133 (* ?x56132 l_0_10_153)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x56130 (* ?x56129 l_0_10_152)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x56127 (* ?x56126 l_0_10_151)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56124 (* ?x55275 l_0_10_99)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56122 (* ?x55272 l_0_10_98)))
 (let ((?x55265 (* 2.0 l_0_10_106)))
 (let ((?x56113 (* ?x55265 l_0_10_97)))
 (let ((?x56108 (* 2.0 l_0_10_100)))
 (let ((?x56110 (* ?x56108 l_0_10_109)))
 (let ((?x60774 (- (- (- (- (+ (+ (+ ?x56110 ?x56113) ?x56122) ?x56124) ?x56127) ?x56130) ?x56133) ?x56136)))
 (= (- (- (- (- ?x60774 ?x58520) ?x58522) ?x58524) ?x58526) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58558 (* ?x57183 l_0_10_250)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58556 (* ?x57180 l_0_10_249)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58554 (* ?x57177 l_0_10_248)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58552 (* ?x57174 l_0_10_247)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x46860 (* ?x56135 l_0_10_160)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x46848 (* ?x56132 l_0_10_159)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x36246 (* ?x56129 l_0_10_158)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x36186 (* ?x56126 l_0_10_157)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x36269 (* ?x59061 l_0_10_99)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x46823 (* ?x59058 l_0_10_98)))
 (let ((?x59056 (* 2.0 l_0_10_112)))
 (let ((?x36222 (* ?x59056 l_0_10_97)))
 (let ((?x18043 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_115) ?x36222) ?x46823) ?x36269) ?x36186)))
 (let ((?x60793 (- (- (- (- (- (- (- ?x18043 ?x36246) ?x46848) ?x46860) ?x58552) ?x58554) ?x58556) ?x58558)))
 (= ?x60793 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58596 (* ?x57183 l_0_10_257)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58594 (* ?x57180 l_0_10_256)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58592 (* ?x57177 l_0_10_255)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58590 (* ?x57174 l_0_10_254)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59663 (* ?x56135 l_0_10_167)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59661 (* ?x56132 l_0_10_166)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59659 (* ?x56129 l_0_10_165)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59657 (* ?x56126 l_0_10_164)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59655 (* ?x46430 l_0_10_99)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59646 (* ?x46428 l_0_10_98)))
 (let ((?x46422 (* 2.0 l_0_10_119)))
 (let ((?x59642 (* ?x46422 l_0_10_97)))
 (let ((?x60805 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_122) ?x59642) ?x59646) ?x59655) ?x59657)))
 (let ((?x60812 (- (- (- (- (- (- (- ?x60805 ?x59659) ?x59661) ?x59663) ?x58590) ?x58592) ?x58594) ?x58596)))
 (= ?x60812 0.0))))))))))))))))))))))))))
(assert
 (let ((?x57183 (* 2.0 l_0_10_235)))
 (let ((?x58657 (* ?x57183 l_0_10_265)))
 (let ((?x57180 (* 2.0 l_0_10_234)))
 (let ((?x58655 (* ?x57180 l_0_10_264)))
 (let ((?x57177 (* 2.0 l_0_10_233)))
 (let ((?x58653 (* ?x57177 l_0_10_263)))
 (let ((?x57174 (* 2.0 l_0_10_232)))
 (let ((?x58651 (* ?x57174 l_0_10_262)))
 (let ((?x56135 (* 2.0 l_0_10_145)))
 (let ((?x59701 (* ?x56135 l_0_10_175)))
 (let ((?x56132 (* 2.0 l_0_10_144)))
 (let ((?x59699 (* ?x56132 l_0_10_174)))
 (let ((?x56129 (* 2.0 l_0_10_143)))
 (let ((?x59697 (* ?x56129 l_0_10_173)))
 (let ((?x56126 (* 2.0 l_0_10_142)))
 (let ((?x59695 (* ?x56126 l_0_10_172)))
 (let ((?x59253 (* 2.0 l_0_10_129)))
 (let ((?x59693 (* ?x59253 l_0_10_99)))
 (let ((?x59250 (* 2.0 l_0_10_128)))
 (let ((?x59684 (* ?x59250 l_0_10_98)))
 (let ((?x59248 (* 2.0 l_0_10_127)))
 (let ((?x59680 (* ?x59248 l_0_10_97)))
 (let ((?x60836 (- (+ (+ (+ (* (* 2.0 l_0_10_100) l_0_10_130) ?x59680) ?x59684) ?x59693) ?x59695)))
 (let ((?x60843 (- (- (- (- (- (- (- ?x60836 ?x59697) ?x59699) ?x59701) ?x58651) ?x58653) ?x58655) ?x58657)))
 (= ?x60843 0.0))))))))))))))))))))))))))
(assert
 (let ((?x58697 (* l_0_10_240 l_0_10_240)))
 (let ((?x58695 (* l_0_10_239 l_0_10_239)))
 (let ((?x58693 (* l_0_10_238 l_0_10_238)))
 (let ((?x58691 (* l_0_10_237 l_0_10_237)))
 (let ((?x58689 (* l_0_10_236 l_0_10_236)))
 (let ((?x57345 (* l_0_10_150 l_0_10_150)))
 (let ((?x57343 (* l_0_10_149 l_0_10_149)))
 (let ((?x57341 (* l_0_10_148 l_0_10_148)))
 (let ((?x57339 (* l_0_10_147 l_0_10_147)))
 (let ((?x57337 (* l_0_10_146 l_0_10_146)))
 (let ((?x57332 (* l_0_10_105 l_0_10_105)))
 (let ((?x57330 (* l_0_10_104 l_0_10_104)))
 (let ((?x57328 (* l_0_10_103 l_0_10_103)))
 (let ((?x26129 (+ (+ (* l_0_10_101 l_0_10_101) (* l_0_10_102 l_0_10_102)) ?x57328)))
 (let ((?x60874 (- (- (- (- (- (+ (+ ?x26129 ?x57330) ?x57332) ?x57337) ?x57339) ?x57341) ?x57343) ?x57345)))
 (= (- (- (- (- (- ?x60874 ?x58689) ?x58691) ?x58693) ?x58695) ?x58697) 0.0)))))))))))))))))
(assert
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58731 (* ?x58730 l_0_10_245)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58728 (* ?x58727 l_0_10_244)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58725 (* ?x58724 l_0_10_243)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58722 (* ?x58721 l_0_10_242)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58719 (* ?x58718 l_0_10_241)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x56394 (* ?x56393 l_0_10_155)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x56389 (* ?x56388 l_0_10_154)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x56386 (* ?x56385 l_0_10_153)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x56383 (* ?x56382 l_0_10_152)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x56380 (* ?x56379 l_0_10_151)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x56369 (* ?x56368 l_0_10_110)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x56366 (* ?x56365 l_0_10_109)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x56363 (* ?x56362 l_0_10_108)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x56360 (* ?x56359 l_0_10_107)))
 (let ((?x60902 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_106) ?x56360) ?x56363) ?x56366) ?x56369)))
 (let ((?x60909 (- (- (- (- (- (- (- ?x60902 ?x56380) ?x56383) ?x56386) ?x56389) ?x56394) ?x58719) ?x58722)))
 (= (- (- (- ?x60909 ?x58725) ?x58728) ?x58731) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58775 (* ?x58730 l_0_10_251)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58773 (* ?x58727 l_0_10_250)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58771 (* ?x58724 l_0_10_249)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58769 (* ?x58721 l_0_10_248)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58767 (* ?x58718 l_0_10_247)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57397 (* ?x56393 l_0_10_161)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57395 (* ?x56388 l_0_10_160)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57393 (* ?x56385 l_0_10_159)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57391 (* ?x56382 l_0_10_158)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57389 (* ?x56379 l_0_10_157)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57387 (* ?x56368 l_0_10_116)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57385 (* ?x56365 l_0_10_115)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57383 (* ?x56362 l_0_10_114)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57381 (* ?x56359 l_0_10_113)))
 (let ((?x60939 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_112) ?x57381) ?x57383) ?x57385) ?x57387)))
 (let ((?x60946 (- (- (- (- (- (- (- ?x60939 ?x57389) ?x57391) ?x57393) ?x57395) ?x57397) ?x58767) ?x58769)))
 (= (- (- (- ?x60946 ?x58771) ?x58773) ?x58775) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58805 (* ?x58730 l_0_10_258)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58803 (* ?x58727 l_0_10_257)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58801 (* ?x58724 l_0_10_256)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58799 (* ?x58721 l_0_10_255)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58797 (* ?x58718 l_0_10_254)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57448 (* ?x56393 l_0_10_168)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57446 (* ?x56388 l_0_10_167)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57444 (* ?x56385 l_0_10_166)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57442 (* ?x56382 l_0_10_165)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57440 (* ?x56379 l_0_10_164)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57438 (* ?x56368 l_0_10_123)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57436 (* ?x56365 l_0_10_122)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57434 (* ?x56362 l_0_10_121)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57432 (* ?x56359 l_0_10_120)))
 (let ((?x60979 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_119) ?x57432) ?x57434) ?x57436) ?x57438)))
 (let ((?x60986 (- (- (- (- (- (- (- ?x60979 ?x57440) ?x57442) ?x57444) ?x57446) ?x57448) ?x58797) ?x58799)))
 (= (- (- (- ?x60986 ?x58801) ?x58803) ?x58805) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58730 (* 2.0 l_0_10_240)))
 (let ((?x58863 (* ?x58730 l_0_10_266)))
 (let ((?x58727 (* 2.0 l_0_10_239)))
 (let ((?x58861 (* ?x58727 l_0_10_265)))
 (let ((?x58724 (* 2.0 l_0_10_238)))
 (let ((?x58859 (* ?x58724 l_0_10_264)))
 (let ((?x58721 (* 2.0 l_0_10_237)))
 (let ((?x58857 (* ?x58721 l_0_10_263)))
 (let ((?x58718 (* 2.0 l_0_10_236)))
 (let ((?x58855 (* ?x58718 l_0_10_262)))
 (let ((?x56393 (* 2.0 l_0_10_150)))
 (let ((?x57508 (* ?x56393 l_0_10_176)))
 (let ((?x56388 (* 2.0 l_0_10_149)))
 (let ((?x57506 (* ?x56388 l_0_10_175)))
 (let ((?x56385 (* 2.0 l_0_10_148)))
 (let ((?x57504 (* ?x56385 l_0_10_174)))
 (let ((?x56382 (* 2.0 l_0_10_147)))
 (let ((?x57502 (* ?x56382 l_0_10_173)))
 (let ((?x56379 (* 2.0 l_0_10_146)))
 (let ((?x57500 (* ?x56379 l_0_10_172)))
 (let ((?x56368 (* 2.0 l_0_10_105)))
 (let ((?x57498 (* ?x56368 l_0_10_131)))
 (let ((?x56365 (* 2.0 l_0_10_104)))
 (let ((?x57496 (* ?x56365 l_0_10_130)))
 (let ((?x56362 (* 2.0 l_0_10_103)))
 (let ((?x57494 (* ?x56362 l_0_10_129)))
 (let ((?x56359 (* 2.0 l_0_10_102)))
 (let ((?x57492 (* ?x56359 l_0_10_128)))
 (let ((?x60998 (+ (+ (+ (+ (* (* 2.0 l_0_10_101) l_0_10_127) ?x57492) ?x57494) ?x57496) ?x57498)))
 (let ((?x61005 (- (- (- (- (- (- (- ?x60998 ?x57500) ?x57502) ?x57504) ?x57506) ?x57508) ?x58855) ?x58857)))
 (= (- (- (- ?x61005 ?x58859) ?x58861) ?x58863) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x58905 (* l_0_10_246 l_0_10_246)))
 (let ((?x58903 (* l_0_10_245 l_0_10_245)))
 (let ((?x58901 (* l_0_10_244 l_0_10_244)))
 (let ((?x58899 (* l_0_10_243 l_0_10_243)))
 (let ((?x58897 (* l_0_10_242 l_0_10_242)))
 (let ((?x58895 (* l_0_10_241 l_0_10_241)))
 (let ((?x56609 (* l_0_10_156 l_0_10_156)))
 (let ((?x56607 (* l_0_10_155 l_0_10_155)))
 (let ((?x56605 (* l_0_10_154 l_0_10_154)))
 (let ((?x56603 (* l_0_10_153 l_0_10_153)))
 (let ((?x56601 (* l_0_10_152 l_0_10_152)))
 (let ((?x56599 (* l_0_10_151 l_0_10_151)))
 (let ((?x56597 (* l_0_10_111 l_0_10_111)))
 (let ((?x56595 (* l_0_10_110 l_0_10_110)))
 (let ((?x56593 (* l_0_10_109 l_0_10_109)))
 (let ((?x56591 (* l_0_10_108 l_0_10_108)))
 (let ((?x61040 (+ (+ (* l_0_10_106 l_0_10_106) (* l_0_10_107 l_0_10_107)) ?x56591)))
 (let ((?x61047 (- (- (- (- (+ (+ (+ ?x61040 ?x56593) ?x56595) ?x56597) ?x56599) ?x56601) ?x56603) ?x56605)))
 (let ((?x61054 (- (- (- (- (- (- (- ?x61047 ?x56607) ?x56609) ?x58895) ?x58897) ?x58899) ?x58901) ?x58903)))
 (= (- ?x61054 ?x58905) 0.0)))))))))))))))))))))
(assert
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x58946 (* ?x55145 l_0_10_259)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x58944 (* ?x55142 l_0_10_258)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x58942 (* ?x55139 l_0_10_257)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x58940 (* ?x55136 l_0_10_256)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x58938 (* ?x55133 l_0_10_255)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x58936 (* ?x55130 l_0_10_254)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x56943 (* ?x55302 l_0_10_169)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x56941 (* ?x55299 l_0_10_168)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x56939 (* ?x55296 l_0_10_167)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x56937 (* ?x55293 l_0_10_166)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x56935 (* ?x55290 l_0_10_165)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x56933 (* ?x55287 l_0_10_164)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x56931 (* ?x55284 l_0_10_124)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x56929 (* ?x55281 l_0_10_123)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x56927 (* ?x55278 l_0_10_122)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x56925 (* ?x55275 l_0_10_121)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x56923 (* ?x55272 l_0_10_120)))
 (let ((?x61082 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_119) ?x56923) ?x56925) ?x56927) ?x56929)))
 (let ((?x61089 (- (- (- (- (- (- (+ ?x61082 ?x56931) ?x56933) ?x56935) ?x56937) ?x56939) ?x56941) ?x56943)))
 (= (- (- (- (- (- (- ?x61089 ?x58936) ?x58938) ?x58940) ?x58942) ?x58944) ?x58946) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x55145 (* 2.0 l_0_10_246)))
 (let ((?x58988 (* ?x55145 l_0_10_267)))
 (let ((?x55142 (* 2.0 l_0_10_245)))
 (let ((?x58986 (* ?x55142 l_0_10_266)))
 (let ((?x55139 (* 2.0 l_0_10_244)))
 (let ((?x58984 (* ?x55139 l_0_10_265)))
 (let ((?x55136 (* 2.0 l_0_10_243)))
 (let ((?x58982 (* ?x55136 l_0_10_264)))
 (let ((?x55133 (* 2.0 l_0_10_242)))
 (let ((?x58980 (* ?x55133 l_0_10_263)))
 (let ((?x55130 (* 2.0 l_0_10_241)))
 (let ((?x58978 (* ?x55130 l_0_10_262)))
 (let ((?x55302 (* 2.0 l_0_10_156)))
 (let ((?x57078 (* ?x55302 l_0_10_177)))
 (let ((?x55299 (* 2.0 l_0_10_155)))
 (let ((?x57076 (* ?x55299 l_0_10_176)))
 (let ((?x55296 (* 2.0 l_0_10_154)))
 (let ((?x57074 (* ?x55296 l_0_10_175)))
 (let ((?x55293 (* 2.0 l_0_10_153)))
 (let ((?x57072 (* ?x55293 l_0_10_174)))
 (let ((?x55290 (* 2.0 l_0_10_152)))
 (let ((?x57070 (* ?x55290 l_0_10_173)))
 (let ((?x55287 (* 2.0 l_0_10_151)))
 (let ((?x57068 (* ?x55287 l_0_10_172)))
 (let ((?x55284 (* 2.0 l_0_10_111)))
 (let ((?x57066 (* ?x55284 l_0_10_132)))
 (let ((?x55281 (* 2.0 l_0_10_110)))
 (let ((?x57064 (* ?x55281 l_0_10_131)))
 (let ((?x55278 (* 2.0 l_0_10_109)))
 (let ((?x57062 (* ?x55278 l_0_10_130)))
 (let ((?x55275 (* 2.0 l_0_10_108)))
 (let ((?x57060 (* ?x55275 l_0_10_129)))
 (let ((?x55272 (* 2.0 l_0_10_107)))
 (let ((?x57058 (* ?x55272 l_0_10_128)))
 (let ((?x61108 (+ (+ (+ (+ (* (* 2.0 l_0_10_106) l_0_10_127) ?x57058) ?x57060) ?x57062) ?x57064)))
 (let ((?x61115 (- (- (- (- (- (- (+ ?x61108 ?x57066) ?x57068) ?x57070) ?x57072) ?x57074) ?x57076) ?x57078)))
 (= (- (- (- (- (- (- ?x61115 ?x58978) ?x58980) ?x58982) ?x58984) ?x58986) ?x58988) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59032 (* l_0_10_253 l_0_10_253)))
 (let ((?x59030 (* l_0_10_252 l_0_10_252)))
 (let ((?x59028 (* l_0_10_251 l_0_10_251)))
 (let ((?x59026 (* l_0_10_250 l_0_10_250)))
 (let ((?x46197 (* l_0_10_249 l_0_10_249)))
 (let ((?x46195 (* l_0_10_248 l_0_10_248)))
 (let ((?x46194 (* l_0_10_247 l_0_10_247)))
 (let ((?x59754 (* l_0_10_163 l_0_10_163)))
 (let ((?x59752 (* l_0_10_162 l_0_10_162)))
 (let ((?x59750 (* l_0_10_161 l_0_10_161)))
 (let ((?x59748 (* l_0_10_160 l_0_10_160)))
 (let ((?x59746 (* l_0_10_159 l_0_10_159)))
 (let ((?x59744 (* l_0_10_158 l_0_10_158)))
 (let ((?x59742 (* l_0_10_157 l_0_10_157)))
 (let ((?x59740 (* l_0_10_118 l_0_10_118)))
 (let ((?x59738 (* l_0_10_117 l_0_10_117)))
 (let ((?x59736 (* l_0_10_116 l_0_10_116)))
 (let ((?x59734 (* l_0_10_115 l_0_10_115)))
 (let ((?x59732 (* l_0_10_114 l_0_10_114)))
 (let ((?x48701 (+ (+ (* l_0_10_112 l_0_10_112) (* l_0_10_113 l_0_10_113)) ?x59732)))
 (let ((?x61132 (- (- (- (+ (+ (+ (+ ?x48701 ?x59734) ?x59736) ?x59738) ?x59740) ?x59742) ?x59744) ?x59746)))
 (let ((?x61139 (- (- (- (- (- (- (- ?x61132 ?x59748) ?x59750) ?x59752) ?x59754) ?x46194) ?x46195) ?x46197)))
 (= (- (- (- (- ?x61139 ?x59026) ?x59028) ?x59030) ?x59032) 0.0))))))))))))))))))))))))
(assert
 (let ((?x59096 (* 2.0 l_0_10_253)))
 (let ((?x59097 (* ?x59096 l_0_10_260)))
 (let ((?x59093 (* 2.0 l_0_10_252)))
 (let ((?x59094 (* ?x59093 l_0_10_259)))
 (let ((?x59090 (* 2.0 l_0_10_251)))
 (let ((?x59091 (* ?x59090 l_0_10_258)))
 (let ((?x59087 (* 2.0 l_0_10_250)))
 (let ((?x59088 (* ?x59087 l_0_10_257)))
 (let ((?x59083 (* 2.0 l_0_10_249)))
 (let ((?x59084 (* ?x59083 l_0_10_256)))
 (let ((?x59080 (* 2.0 l_0_10_248)))
 (let ((?x59081 (* ?x59080 l_0_10_255)))
 (let ((?x59077 (* 2.0 l_0_10_247)))
 (let ((?x59078 (* ?x59077 l_0_10_254)))
 (let ((?x59819 (* 2.0 l_0_10_163)))
 (let ((?x59820 (* ?x59819 l_0_10_170)))
 (let ((?x59816 (* 2.0 l_0_10_162)))
 (let ((?x59817 (* ?x59816 l_0_10_169)))
 (let ((?x59813 (* 2.0 l_0_10_161)))
 (let ((?x59814 (* ?x59813 l_0_10_168)))
 (let ((?x59810 (* 2.0 l_0_10_160)))
 (let ((?x59811 (* ?x59810 l_0_10_167)))
 (let ((?x59807 (* 2.0 l_0_10_159)))
 (let ((?x59808 (* ?x59807 l_0_10_166)))
 (let ((?x59804 (* 2.0 l_0_10_158)))
 (let ((?x59805 (* ?x59804 l_0_10_165)))
 (let ((?x59801 (* 2.0 l_0_10_157)))
 (let ((?x59802 (* ?x59801 l_0_10_164)))
 (let ((?x59798 (* 2.0 l_0_10_118)))
 (let ((?x59799 (* ?x59798 l_0_10_125)))
 (let ((?x59795 (* 2.0 l_0_10_117)))
 (let ((?x59796 (* ?x59795 l_0_10_124)))
 (let ((?x59792 (* 2.0 l_0_10_116)))
 (let ((?x59793 (* ?x59792 l_0_10_123)))
 (let ((?x59789 (* 2.0 l_0_10_115)))
 (let ((?x59790 (* ?x59789 l_0_10_122)))
 (let ((?x59061 (* 2.0 l_0_10_114)))
 (let ((?x59787 (* ?x59061 l_0_10_121)))
 (let ((?x59058 (* 2.0 l_0_10_113)))
 (let ((?x59785 (* ?x59058 l_0_10_120)))
 (let ((?x61172 (+ (+ (+ (+ (* (* 2.0 l_0_10_112) l_0_10_119) ?x59785) ?x59787) ?x59790) ?x59793)))
 (let ((?x61179 (- (- (- (- (- (+ (+ ?x61172 ?x59796) ?x59799) ?x59802) ?x59805) ?x59808) ?x59811) ?x59814)))
 (let ((?x61186 (- (- (- (- (- (- (- ?x61179 ?x59817) ?x59820) ?x59078) ?x59081) ?x59084) ?x59088) ?x59091)))
 (= (- (- ?x61186 ?x59094) ?x59097) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x59199 (* l_0_10_261 l_0_10_261)))
 (let ((?x59197 (* l_0_10_260 l_0_10_260)))
 (let ((?x59195 (* l_0_10_259 l_0_10_259)))
 (let ((?x59193 (* l_0_10_258 l_0_10_258)))
 (let ((?x59191 (* l_0_10_257 l_0_10_257)))
 (let ((?x59189 (* l_0_10_256 l_0_10_256)))
 (let ((?x59187 (* l_0_10_255 l_0_10_255)))
 (let ((?x59185 (* l_0_10_254 l_0_10_254)))
 (let ((?x59935 (* l_0_10_171 l_0_10_171)))
 (let ((?x59933 (* l_0_10_170 l_0_10_170)))
 (let ((?x59931 (* l_0_10_169 l_0_10_169)))
 (let ((?x59929 (* l_0_10_168 l_0_10_168)))
 (let ((?x59927 (* l_0_10_167 l_0_10_167)))
 (let ((?x59925 (* l_0_10_166 l_0_10_166)))
 (let ((?x59923 (* l_0_10_165 l_0_10_165)))
 (let ((?x59921 (* l_0_10_164 l_0_10_164)))
 (let ((?x59919 (* l_0_10_126 l_0_10_126)))
 (let ((?x59917 (* l_0_10_125 l_0_10_125)))
 (let ((?x59915 (* l_0_10_124 l_0_10_124)))
 (let ((?x59913 (* l_0_10_123 l_0_10_123)))
 (let ((?x59911 (* l_0_10_122 l_0_10_122)))
 (let ((?x59909 (* l_0_10_121 l_0_10_121)))
 (let ((?x50640 (+ (+ (* l_0_10_119 l_0_10_119) (* l_0_10_120 l_0_10_120)) ?x59909)))
 (let ((?x50597 (- (- (+ (+ (+ (+ (+ ?x50640 ?x59911) ?x59913) ?x59915) ?x59917) ?x59919) ?x59921) ?x59923)))
 (let ((?x61205 (- (- (- (- (- (- (- ?x50597 ?x59925) ?x59927) ?x59929) ?x59931) ?x59933) ?x59935) ?x59185)))
 (let ((?x61212 (- (- (- (- (- (- (- ?x61205 ?x59187) ?x59189) ?x59191) ?x59193) ?x59195) ?x59197) ?x59199)))
 (= ?x61212 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x59287 (* (* 2.0 l_0_10_261) l_0_10_269)))
 (let ((?x59284 (* (* 2.0 l_0_10_260) l_0_10_268)))
 (let ((?x59281 (* (* 2.0 l_0_10_259) l_0_10_267)))
 (let ((?x59278 (* (* 2.0 l_0_10_258) l_0_10_266)))
 (let ((?x59275 (* (* 2.0 l_0_10_257) l_0_10_265)))
 (let ((?x59272 (* (* 2.0 l_0_10_256) l_0_10_264)))
 (let ((?x59269 (* (* 2.0 l_0_10_255) l_0_10_263)))
 (let ((?x59266 (* (* 2.0 l_0_10_254) l_0_10_262)))
 (let ((?x60002 (* (* 2.0 l_0_10_171) l_0_10_179)))
 (let ((?x59999 (* (* 2.0 l_0_10_170) l_0_10_178)))
 (let ((?x59996 (* (* 2.0 l_0_10_169) l_0_10_177)))
 (let ((?x59993 (* (* 2.0 l_0_10_168) l_0_10_176)))
 (let ((?x59990 (* (* 2.0 l_0_10_167) l_0_10_175)))
 (let ((?x59987 (* (* 2.0 l_0_10_166) l_0_10_174)))
 (let ((?x59984 (* (* 2.0 l_0_10_165) l_0_10_173)))
 (let ((?x59981 (* (* 2.0 l_0_10_164) l_0_10_172)))
 (let ((?x59978 (* (* 2.0 l_0_10_126) l_0_10_134)))
 (let ((?x59975 (* (* 2.0 l_0_10_125) l_0_10_133)))
 (let ((?x59972 (* (* 2.0 l_0_10_124) l_0_10_132)))
 (let ((?x59969 (* (* 2.0 l_0_10_123) l_0_10_131)))
 (let ((?x59966 (* (* 2.0 l_0_10_122) l_0_10_130)))
 (let ((?x46430 (* 2.0 l_0_10_121)))
 (let ((?x59963 (* ?x46430 l_0_10_129)))
 (let ((?x46428 (* 2.0 l_0_10_120)))
 (let ((?x59961 (* ?x46428 l_0_10_128)))
 (let ((?x7917 (+ (+ (+ (+ (* (* 2.0 l_0_10_119) l_0_10_127) ?x59961) ?x59963) ?x59966) ?x59969)))
 (let ((?x49972 (- (- (- (- (+ (+ (+ ?x7917 ?x59972) ?x59975) ?x59978) ?x59981) ?x59984) ?x59987) ?x59990)))
 (let ((?x61223 (- (- (- (- (- (- (- ?x49972 ?x59993) ?x59996) ?x59999) ?x60002) ?x59266) ?x59269) ?x59272)))
 (= (- (- (- (- (- ?x61223 ?x59275) ?x59278) ?x59281) ?x59284) ?x59287) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x59357 (* l_0_10_270 l_0_10_270)))
 (let ((?x59355 (* l_0_10_269 l_0_10_269)))
 (let ((?x59353 (* l_0_10_268 l_0_10_268)))
 (let ((?x59351 (* l_0_10_267 l_0_10_267)))
 (let ((?x46575 (* l_0_10_266 l_0_10_266)))
 (let ((?x24060 (* l_0_10_265 l_0_10_265)))
 (let ((?x46566 (* l_0_10_264 l_0_10_264)))
 (let ((?x46554 (* l_0_10_263 l_0_10_263)))
 (let ((?x46613 (* l_0_10_262 l_0_10_262)))
 (let ((?x60062 (* l_0_10_180 l_0_10_180)))
 (let ((?x60060 (* l_0_10_179 l_0_10_179)))
 (let ((?x60058 (* l_0_10_178 l_0_10_178)))
 (let ((?x60056 (* l_0_10_177 l_0_10_177)))
 (let ((?x60054 (* l_0_10_176 l_0_10_176)))
 (let ((?x60052 (* l_0_10_175 l_0_10_175)))
 (let ((?x60050 (* l_0_10_174 l_0_10_174)))
 (let ((?x60048 (* l_0_10_173 l_0_10_173)))
 (let ((?x60046 (* l_0_10_172 l_0_10_172)))
 (let ((?x60044 (* l_0_10_135 l_0_10_135)))
 (let ((?x60042 (* l_0_10_134 l_0_10_134)))
 (let ((?x60040 (* l_0_10_133 l_0_10_133)))
 (let ((?x60038 (* l_0_10_132 l_0_10_132)))
 (let ((?x47043 (* l_0_10_131 l_0_10_131)))
 (let ((?x47037 (* l_0_10_130 l_0_10_130)))
 (let ((?x47034 (* l_0_10_129 l_0_10_129)))
 (let ((?x50779 (+ (+ (* l_0_10_127 l_0_10_127) (* l_0_10_128 l_0_10_128)) ?x47034)))
 (let ((?x50730 (- (+ (+ (+ (+ (+ (+ ?x50779 ?x47037) ?x47043) ?x60038) ?x60040) ?x60042) ?x60044) ?x60046)))
 (let ((?x38206 (- (- (- (- (- (- (- ?x50730 ?x60048) ?x60050) ?x60052) ?x60054) ?x60056) ?x60058) ?x60060)))
 (let ((?x61236 (- (- (- (- (- (- (- ?x38206 ?x60062) ?x46613) ?x46554) ?x46566) ?x24060) ?x46575) ?x59351)))
 (= (- (- (- ?x61236 ?x59353) ?x59355) ?x59357) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x38447 (* l_0_10_316 l_0_10_316)))
 (let ((?x27031 (* l_0_10_271 l_0_10_271)))
 (= (- (- (* (* (- 1.0) l_0_10_181) l_0_10_181) ?x27031) ?x38447) 0.0))))
(assert
 (let ((?x61268 (- (* (* (- 2.0) l_0_10_181) l_0_10_182) (* (* 2.0 l_0_10_271) l_0_10_272))))
 (= (- ?x61268 (* (* 2.0 l_0_10_316) l_0_10_317)) 0.0)))
(assert
 (let ((?x61284 (- (* (* (- 2.0) l_0_10_181) l_0_10_187) (* (* 2.0 l_0_10_271) l_0_10_277))))
 (= (- ?x61284 (* (* 2.0 l_0_10_316) l_0_10_322)) 0.0)))
(assert
 (let ((?x61301 (- (* (* (- 2.0) l_0_10_181) l_0_10_191) (* (* 2.0 l_0_10_271) l_0_10_281))))
 (= (- ?x61301 (* (* 2.0 l_0_10_316) l_0_10_326)) 0.0)))
(assert
 (let ((?x61321 (- (* (* (- 2.0) l_0_10_181) l_0_10_196) (* (* 2.0 l_0_10_271) l_0_10_286))))
 (= (- ?x61321 (* (* 2.0 l_0_10_316) l_0_10_331)) 0.0)))
(assert
 (let ((?x61332 (- (* (* (- 2.0) l_0_10_181) l_0_10_202) (* (* 2.0 l_0_10_271) l_0_10_292))))
 (= (- ?x61332 (* (* 2.0 l_0_10_316) l_0_10_337)) 0.0)))
(assert
 (let ((?x61348 (- (* (* (- 2.0) l_0_10_181) l_0_10_217) (* (* 2.0 l_0_10_271) l_0_10_307))))
 (= (- ?x61348 (* (* 2.0 l_0_10_316) l_0_10_352)) 0.0)))
(assert
 (let ((?x61374 (* l_0_10_318 l_0_10_318)))
 (let ((?x61372 (* l_0_10_317 l_0_10_317)))
 (let ((?x61370 (* l_0_10_273 l_0_10_273)))
 (let ((?x61368 (* l_0_10_272 l_0_10_272)))
 (let ((?x61367 (- (* (* (- 1.0) l_0_10_182) l_0_10_182) (* (* 1.0 l_0_10_183) l_0_10_183))))
 (= (- (- (- (- ?x61367 ?x61368) ?x61370) ?x61372) ?x61374) 0.0)))))))
(assert
 (let ((?x61396 (- (* (* (- 2.0) l_0_10_182) l_0_10_191) (* (* 2.0 l_0_10_183) l_0_10_192))))
 (let ((?x61400 (- (- ?x61396 (* (* 2.0 l_0_10_272) l_0_10_281)) (* (* 2.0 l_0_10_273) l_0_10_282))))
 (let ((?x61404 (- (- ?x61400 (* (* 2.0 l_0_10_317) l_0_10_326)) (* (* 2.0 l_0_10_318) l_0_10_327))))
 (= ?x61404 0.0)))))
(assert
 (let ((?x61422 (- (* (* (- 2.0) l_0_10_182) l_0_10_196) (* (* 2.0 l_0_10_183) l_0_10_197))))
 (let ((?x61426 (- (- ?x61422 (* (* 2.0 l_0_10_272) l_0_10_286)) (* (* 2.0 l_0_10_273) l_0_10_287))))
 (let ((?x61430 (- (- ?x61426 (* (* 2.0 l_0_10_317) l_0_10_331)) (* (* 2.0 l_0_10_318) l_0_10_332))))
 (= ?x61430 0.0)))))
(assert
 (let ((?x38720 (- (* (* (- 2.0) l_0_10_182) l_0_10_202) (* (* 2.0 l_0_10_183) l_0_10_203))))
 (let ((?x61450 (- (- ?x38720 (* (* 2.0 l_0_10_272) l_0_10_292)) (* (* 2.0 l_0_10_273) l_0_10_293))))
 (let ((?x61454 (- (- ?x61450 (* (* 2.0 l_0_10_317) l_0_10_337)) (* (* 2.0 l_0_10_318) l_0_10_338))))
 (= ?x61454 0.0)))))
(assert
 (let ((?x61478 (- (* (* (- 2.0) l_0_10_182) l_0_10_217) (* (* 2.0 l_0_10_183) l_0_10_218))))
 (let ((?x61482 (- (- ?x61478 (* (* 2.0 l_0_10_272) l_0_10_307)) (* (* 2.0 l_0_10_273) l_0_10_308))))
 (let ((?x61486 (- (- ?x61482 (* (* 2.0 l_0_10_317) l_0_10_352)) (* (* 2.0 l_0_10_318) l_0_10_353))))
 (= ?x61486 0.0)))))
(assert
 (let ((?x61528 (* l_0_10_325 l_0_10_325)))
 (let ((?x61526 (* l_0_10_324 l_0_10_324)))
 (let ((?x61524 (* l_0_10_323 l_0_10_323)))
 (let ((?x61522 (* l_0_10_322 l_0_10_322)))
 (let ((?x61520 (* l_0_10_280 l_0_10_280)))
 (let ((?x61518 (* l_0_10_279 l_0_10_279)))
 (let ((?x61516 (* l_0_10_278 l_0_10_278)))
 (let ((?x61514 (* l_0_10_277 l_0_10_277)))
 (let ((?x61507 (- (* (* (- 1.0) l_0_10_187) l_0_10_187) (* (* 1.0 l_0_10_188) l_0_10_188))))
 (let ((?x61513 (- (- ?x61507 (* (* 1.0 l_0_10_189) l_0_10_189)) (* (* 1.0 l_0_10_190) l_0_10_190))))
 (let ((?x61527 (- (- (- (- (- (- (- ?x61513 ?x61514) ?x61516) ?x61518) ?x61520) ?x61522) ?x61524) ?x61526)))
 (= (- ?x61527 ?x61528) 0.0)))))))))))))
(assert
 (let ((?x61552 (- (* (* (- 2.0) l_0_10_187) l_0_10_196) (* (* 2.0 l_0_10_188) l_0_10_197))))
 (let ((?x61556 (- (- ?x61552 (* (* 2.0 l_0_10_189) l_0_10_198)) (* (* 2.0 l_0_10_190) l_0_10_199))))
 (let ((?x61560 (- (- ?x61556 (* (* 2.0 l_0_10_277) l_0_10_286)) (* (* 2.0 l_0_10_278) l_0_10_287))))
 (let ((?x61564 (- (- ?x61560 (* (* 2.0 l_0_10_279) l_0_10_288)) (* (* 2.0 l_0_10_280) l_0_10_289))))
 (let ((?x61568 (- (- ?x61564 (* (* 2.0 l_0_10_322) l_0_10_331)) (* (* 2.0 l_0_10_323) l_0_10_332))))
 (let ((?x61572 (- (- ?x61568 (* (* 2.0 l_0_10_324) l_0_10_333)) (* (* 2.0 l_0_10_325) l_0_10_334))))
 (= ?x61572 0.0))))))))
(assert
 (let ((?x61614 (- (* (* (- 2.0) l_0_10_187) l_0_10_202) (* (* 2.0 l_0_10_188) l_0_10_203))))
 (let ((?x61618 (- (- ?x61614 (* (* 2.0 l_0_10_189) l_0_10_204)) (* (* 2.0 l_0_10_190) l_0_10_205))))
 (let ((?x61622 (- (- ?x61618 (* (* 2.0 l_0_10_277) l_0_10_292)) (* (* 2.0 l_0_10_278) l_0_10_293))))
 (let ((?x61626 (- (- ?x61622 (* (* 2.0 l_0_10_279) l_0_10_294)) (* (* 2.0 l_0_10_280) l_0_10_295))))
 (let ((?x61630 (- (- ?x61626 (* (* 2.0 l_0_10_322) l_0_10_337)) (* (* 2.0 l_0_10_323) l_0_10_338))))
 (let ((?x61634 (- (- ?x61630 (* (* 2.0 l_0_10_324) l_0_10_339)) (* (* 2.0 l_0_10_325) l_0_10_340))))
 (= ?x61634 0.0))))))))
(assert
 (let ((?x61663 (- (* (* (- 2.0) l_0_10_187) l_0_10_217) (* (* 2.0 l_0_10_188) l_0_10_218))))
 (let ((?x61667 (- (- ?x61663 (* (* 2.0 l_0_10_189) l_0_10_219)) (* (* 2.0 l_0_10_190) l_0_10_220))))
 (let ((?x61671 (- (- ?x61667 (* (* 2.0 l_0_10_277) l_0_10_307)) (* (* 2.0 l_0_10_278) l_0_10_308))))
 (let ((?x61675 (- (- ?x61671 (* (* 2.0 l_0_10_279) l_0_10_309)) (* (* 2.0 l_0_10_280) l_0_10_310))))
 (let ((?x61679 (- (- ?x61675 (* (* 2.0 l_0_10_322) l_0_10_352)) (* (* 2.0 l_0_10_323) l_0_10_353))))
 (let ((?x61683 (- (- ?x61679 (* (* 2.0 l_0_10_324) l_0_10_354)) (* (* 2.0 l_0_10_325) l_0_10_355))))
 (= ?x61683 0.0))))))))
(assert
 (let ((?x61748 (* l_0_10_330 l_0_10_330)))
 (let ((?x61746 (* l_0_10_329 l_0_10_329)))
 (let ((?x61744 (* l_0_10_328 l_0_10_328)))
 (let ((?x61742 (* l_0_10_327 l_0_10_327)))
 (let ((?x61740 (* l_0_10_326 l_0_10_326)))
 (let ((?x61738 (* l_0_10_285 l_0_10_285)))
 (let ((?x61736 (* l_0_10_284 l_0_10_284)))
 (let ((?x61734 (* l_0_10_283 l_0_10_283)))
 (let ((?x61732 (* l_0_10_282 l_0_10_282)))
 (let ((?x61730 (* l_0_10_281 l_0_10_281)))
 (let ((?x61720 (- (* (* (- 1.0) l_0_10_191) l_0_10_191) (* (* 1.0 l_0_10_192) l_0_10_192))))
 (let ((?x61726 (- (- ?x61720 (* (* 1.0 l_0_10_193) l_0_10_193)) (* (* 1.0 l_0_10_194) l_0_10_194))))
 (let ((?x61735 (- (- (- (- ?x61726 (* (* 1.0 l_0_10_195) l_0_10_195)) ?x61730) ?x61732) ?x61734)))
 (let ((?x61749 (- (- (- (- (- (- (- ?x61735 ?x61736) ?x61738) ?x61740) ?x61742) ?x61744) ?x61746) ?x61748)))
 (= ?x61749 0.0))))))))))))))))
(assert
 (let ((?x61784 (- (* (* (- 2.0) l_0_10_191) l_0_10_196) (* (* 2.0 l_0_10_192) l_0_10_197))))
 (let ((?x61788 (- (- ?x61784 (* (* 2.0 l_0_10_193) l_0_10_198)) (* (* 2.0 l_0_10_194) l_0_10_199))))
 (let ((?x61792 (- (- ?x61788 (* (* 2.0 l_0_10_195) l_0_10_200)) (* (* 2.0 l_0_10_281) l_0_10_286))))
 (let ((?x61796 (- (- ?x61792 (* (* 2.0 l_0_10_282) l_0_10_287)) (* (* 2.0 l_0_10_283) l_0_10_288))))
 (let ((?x61800 (- (- ?x61796 (* (* 2.0 l_0_10_284) l_0_10_289)) (* (* 2.0 l_0_10_285) l_0_10_290))))
 (let ((?x61804 (- (- ?x61800 (* (* 2.0 l_0_10_326) l_0_10_331)) (* (* 2.0 l_0_10_327) l_0_10_332))))
 (let ((?x61808 (- (- ?x61804 (* (* 2.0 l_0_10_328) l_0_10_333)) (* (* 2.0 l_0_10_329) l_0_10_334))))
 (= (- ?x61808 (* (* 2.0 l_0_10_330) l_0_10_335)) 0.0)))))))))
(assert
 (let ((?x28008 (- (* (* (- 2.0) l_0_10_191) l_0_10_202) (* (* 2.0 l_0_10_192) l_0_10_203))))
 (let ((?x61848 (- (- ?x28008 (* (* 2.0 l_0_10_193) l_0_10_204)) (* (* 2.0 l_0_10_194) l_0_10_205))))
 (let ((?x61852 (- (- ?x61848 (* (* 2.0 l_0_10_195) l_0_10_206)) (* (* 2.0 l_0_10_281) l_0_10_292))))
 (let ((?x61856 (- (- ?x61852 (* (* 2.0 l_0_10_282) l_0_10_293)) (* (* 2.0 l_0_10_283) l_0_10_294))))
 (let ((?x61860 (- (- ?x61856 (* (* 2.0 l_0_10_284) l_0_10_295)) (* (* 2.0 l_0_10_285) l_0_10_296))))
 (let ((?x61864 (- (- ?x61860 (* (* 2.0 l_0_10_326) l_0_10_337)) (* (* 2.0 l_0_10_327) l_0_10_338))))
 (let ((?x61868 (- (- ?x61864 (* (* 2.0 l_0_10_328) l_0_10_339)) (* (* 2.0 l_0_10_329) l_0_10_340))))
 (= (- ?x61868 (* (* 2.0 l_0_10_330) l_0_10_341)) 0.0)))))))))
(assert
 (let ((?x61930 (- (* (* (- 2.0) l_0_10_191) l_0_10_217) (* (* 2.0 l_0_10_192) l_0_10_218))))
 (let ((?x61934 (- (- ?x61930 (* (* 2.0 l_0_10_193) l_0_10_219)) (* (* 2.0 l_0_10_194) l_0_10_220))))
 (let ((?x61938 (- (- ?x61934 (* (* 2.0 l_0_10_195) l_0_10_221)) (* (* 2.0 l_0_10_281) l_0_10_307))))
 (let ((?x61942 (- (- ?x61938 (* (* 2.0 l_0_10_282) l_0_10_308)) (* (* 2.0 l_0_10_283) l_0_10_309))))
 (let ((?x61946 (- (- ?x61942 (* (* 2.0 l_0_10_284) l_0_10_310)) (* (* 2.0 l_0_10_285) l_0_10_311))))
 (let ((?x61950 (- (- ?x61946 (* (* 2.0 l_0_10_326) l_0_10_352)) (* (* 2.0 l_0_10_327) l_0_10_353))))
 (let ((?x61954 (- (- ?x61950 (* (* 2.0 l_0_10_328) l_0_10_354)) (* (* 2.0 l_0_10_329) l_0_10_355))))
 (= (- ?x61954 (* (* 2.0 l_0_10_330) l_0_10_356)) 0.0)))))))))
(assert
 (let ((?x62052 (* l_0_10_336 l_0_10_336)))
 (let ((?x62050 (* l_0_10_335 l_0_10_335)))
 (let ((?x62048 (* l_0_10_334 l_0_10_334)))
 (let ((?x62046 (* l_0_10_333 l_0_10_333)))
 (let ((?x62044 (* l_0_10_332 l_0_10_332)))
 (let ((?x62042 (* l_0_10_331 l_0_10_331)))
 (let ((?x62040 (* l_0_10_291 l_0_10_291)))
 (let ((?x62038 (* l_0_10_290 l_0_10_290)))
 (let ((?x62036 (* l_0_10_289 l_0_10_289)))
 (let ((?x62034 (* l_0_10_288 l_0_10_288)))
 (let ((?x62032 (* l_0_10_287 l_0_10_287)))
 (let ((?x62030 (* l_0_10_286 l_0_10_286)))
 (let ((?x62017 (- (* (* (- 1.0) l_0_10_196) l_0_10_196) (* (* 1.0 l_0_10_197) l_0_10_197))))
 (let ((?x62023 (- (- ?x62017 (* (* 1.0 l_0_10_198) l_0_10_198)) (* (* 1.0 l_0_10_199) l_0_10_199))))
 (let ((?x62029 (- (- ?x62023 (* (* 1.0 l_0_10_200) l_0_10_200)) (* (* 1.0 l_0_10_201) l_0_10_201))))
 (let ((?x62043 (- (- (- (- (- (- (- ?x62029 ?x62030) ?x62032) ?x62034) ?x62036) ?x62038) ?x62040) ?x62042)))
 (= (- (- (- (- (- ?x62043 ?x62044) ?x62046) ?x62048) ?x62050) ?x62052) 0.0))))))))))))))))))
(assert
 (let ((?x62094 (- (* (* (- 2.0) l_0_10_196) l_0_10_217) (* (* 2.0 l_0_10_197) l_0_10_218))))
 (let ((?x62098 (- (- ?x62094 (* (* 2.0 l_0_10_198) l_0_10_219)) (* (* 2.0 l_0_10_199) l_0_10_220))))
 (let ((?x62102 (- (- ?x62098 (* (* 2.0 l_0_10_200) l_0_10_221)) (* (* 2.0 l_0_10_201) l_0_10_222))))
 (let ((?x62106 (- (- ?x62102 (* (* 2.0 l_0_10_286) l_0_10_307)) (* (* 2.0 l_0_10_287) l_0_10_308))))
 (let ((?x62110 (- (- ?x62106 (* (* 2.0 l_0_10_288) l_0_10_309)) (* (* 2.0 l_0_10_289) l_0_10_310))))
 (let ((?x62114 (- (- ?x62110 (* (* 2.0 l_0_10_290) l_0_10_311)) (* (* 2.0 l_0_10_291) l_0_10_312))))
 (let ((?x62118 (- (- ?x62114 (* (* 2.0 l_0_10_331) l_0_10_352)) (* (* 2.0 l_0_10_332) l_0_10_353))))
 (let ((?x62122 (- (- ?x62118 (* (* 2.0 l_0_10_333) l_0_10_354)) (* (* 2.0 l_0_10_334) l_0_10_355))))
 (let ((?x62126 (- (- ?x62122 (* (* 2.0 l_0_10_335) l_0_10_356)) (* (* 2.0 l_0_10_336) l_0_10_357))))
 (= ?x62126 0.0)))))))))))
(assert
 (let ((?x62248 (* l_0_10_343 l_0_10_343)))
 (let ((?x62246 (* l_0_10_342 l_0_10_342)))
 (let ((?x62244 (* l_0_10_341 l_0_10_341)))
 (let ((?x62242 (* l_0_10_340 l_0_10_340)))
 (let ((?x62240 (* l_0_10_339 l_0_10_339)))
 (let ((?x62238 (* l_0_10_338 l_0_10_338)))
 (let ((?x62236 (* l_0_10_337 l_0_10_337)))
 (let ((?x62234 (* l_0_10_298 l_0_10_298)))
 (let ((?x62232 (* l_0_10_297 l_0_10_297)))
 (let ((?x62230 (* l_0_10_296 l_0_10_296)))
 (let ((?x62228 (* l_0_10_295 l_0_10_295)))
 (let ((?x62226 (* l_0_10_294 l_0_10_294)))
 (let ((?x62224 (* l_0_10_293 l_0_10_293)))
 (let ((?x62222 (* l_0_10_292 l_0_10_292)))
 (let ((?x62206 (- (* (* (- 1.0) l_0_10_202) l_0_10_202) (* (* 1.0 l_0_10_203) l_0_10_203))))
 (let ((?x62212 (- (- ?x62206 (* (* 1.0 l_0_10_204) l_0_10_204)) (* (* 1.0 l_0_10_205) l_0_10_205))))
 (let ((?x62218 (- (- ?x62212 (* (* 1.0 l_0_10_206) l_0_10_206)) (* (* 1.0 l_0_10_207) l_0_10_207))))
 (let ((?x62227 (- (- (- (- ?x62218 (* (* 1.0 l_0_10_208) l_0_10_208)) ?x62222) ?x62224) ?x62226)))
 (let ((?x62241 (- (- (- (- (- (- (- ?x62227 ?x62228) ?x62230) ?x62232) ?x62234) ?x62236) ?x62238) ?x62240)))
 (= (- (- (- (- ?x62241 ?x62242) ?x62244) ?x62246) ?x62248) 0.0)))))))))))))))))))))
(assert
 (let ((?x62341 (* l_0_10_360 l_0_10_360)))
 (let ((?x62339 (* l_0_10_359 l_0_10_359)))
 (let ((?x62337 (* l_0_10_358 l_0_10_358)))
 (let ((?x62335 (* l_0_10_357 l_0_10_357)))
 (let ((?x62333 (* l_0_10_356 l_0_10_356)))
 (let ((?x62331 (* l_0_10_355 l_0_10_355)))
 (let ((?x62329 (* l_0_10_354 l_0_10_354)))
 (let ((?x62327 (* l_0_10_353 l_0_10_353)))
 (let ((?x62325 (* l_0_10_352 l_0_10_352)))
 (let ((?x62323 (* l_0_10_315 l_0_10_315)))
 (let ((?x62321 (* l_0_10_314 l_0_10_314)))
 (let ((?x62319 (* l_0_10_313 l_0_10_313)))
 (let ((?x62317 (* l_0_10_312 l_0_10_312)))
 (let ((?x62315 (* l_0_10_311 l_0_10_311)))
 (let ((?x62313 (* l_0_10_310 l_0_10_310)))
 (let ((?x62311 (* l_0_10_309 l_0_10_309)))
 (let ((?x62309 (* l_0_10_308 l_0_10_308)))
 (let ((?x62307 (* l_0_10_307 l_0_10_307)))
 (let ((?x62285 (- (* (* (- 1.0) l_0_10_217) l_0_10_217) (* (* 1.0 l_0_10_218) l_0_10_218))))
 (let ((?x62291 (- (- ?x62285 (* (* 1.0 l_0_10_219) l_0_10_219)) (* (* 1.0 l_0_10_220) l_0_10_220))))
 (let ((?x62297 (- (- ?x62291 (* (* 1.0 l_0_10_221) l_0_10_221)) (* (* 1.0 l_0_10_222) l_0_10_222))))
 (let ((?x62303 (- (- ?x62297 (* (* 1.0 l_0_10_223) l_0_10_223)) (* (* 1.0 l_0_10_224) l_0_10_224))))
 (let ((?x62312 (- (- (- (- ?x62303 (* (* 1.0 l_0_10_225) l_0_10_225)) ?x62307) ?x62309) ?x62311)))
 (let ((?x62326 (- (- (- (- (- (- (- ?x62312 ?x62313) ?x62315) ?x62317) ?x62319) ?x62321) ?x62323) ?x62325)))
 (let ((?x62340 (- (- (- (- (- (- (- ?x62326 ?x62327) ?x62329) ?x62331) ?x62333) ?x62335) ?x62337) ?x62339)))
 (= (- ?x62340 ?x62341) 0.0)))))))))))))))))))))))))))
(assert
 (>= l_0_10_1 0.0))
(assert
 (>= l_0_10_3 0.0))
(assert
 (>= l_0_10_6 0.0))
(assert
 (>= l_0_10_10 0.0))
(assert
 (>= l_0_10_15 0.0))
(assert
 (>= l_0_10_21 0.0))
(assert
 (>= l_0_10_28 0.0))
(assert
 (>= l_0_10_36 0.0))
(assert
 (>= l_0_10_45 0.0))
(assert
 (>= l_0_10_46 0.0))
(assert
 (>= l_0_10_48 0.0))
(assert
 (>= l_0_10_51 0.0))
(assert
 (>= l_0_10_55 0.0))
(assert
 (>= l_0_10_60 0.0))
(assert
 (>= l_0_10_66 0.0))
(assert
 (>= l_0_10_73 0.0))
(assert
 (>= l_0_10_81 0.0))
(assert
 (>= l_0_10_90 0.0))
(assert
 (>= l_0_10_91 0.0))
(assert
 (>= l_0_10_93 0.0))
(assert
 (>= l_0_10_96 0.0))
(assert
 (>= l_0_10_100 0.0))
(assert
 (>= l_0_10_105 0.0))
(assert
 (>= l_0_10_111 0.0))
(assert
 (>= l_0_10_118 0.0))
(assert
 (>= l_0_10_126 0.0))
(assert
 (>= l_0_10_135 0.0))
(assert
 (>= l_0_10_136 0.0))
(assert
 (>= l_0_10_138 0.0))
(assert
 (>= l_0_10_141 0.0))
(assert
 (>= l_0_10_145 0.0))
(assert
 (>= l_0_10_150 0.0))
(assert
 (>= l_0_10_156 0.0))
(assert
 (>= l_0_10_163 0.0))
(assert
 (>= l_0_10_171 0.0))
(assert
 (>= l_0_10_180 0.0))
(assert
 (>= l_0_10_181 0.0))
(assert
 (>= l_0_10_183 0.0))
(assert
 (>= l_0_10_186 0.0))
(assert
 (>= l_0_10_190 0.0))
(assert
 (>= l_0_10_195 0.0))
(assert
 (>= l_0_10_201 0.0))
(assert
 (>= l_0_10_208 0.0))
(assert
 (>= l_0_10_216 0.0))
(assert
 (>= l_0_10_225 0.0))
(assert
 (>= l_0_10_226 0.0))
(assert
 (>= l_0_10_228 0.0))
(assert
 (>= l_0_10_231 0.0))
(assert
 (>= l_0_10_235 0.0))
(assert
 (>= l_0_10_240 0.0))
(assert
 (>= l_0_10_246 0.0))
(assert
 (>= l_0_10_253 0.0))
(assert
 (>= l_0_10_261 0.0))
(assert
 (>= l_0_10_270 0.0))
(assert
 (>= l_0_10_271 0.0))
(assert
 (>= l_0_10_273 0.0))
(assert
 (>= l_0_10_276 0.0))
(assert
 (>= l_0_10_280 0.0))
(assert
 (>= l_0_10_285 0.0))
(assert
 (>= l_0_10_291 0.0))
(assert
 (>= l_0_10_298 0.0))
(assert
 (>= l_0_10_306 0.0))
(assert
 (>= l_0_10_315 0.0))
(assert
 (>= l_0_10_316 0.0))
(assert
 (>= l_0_10_318 0.0))
(assert
 (>= l_0_10_321 0.0))
(assert
 (>= l_0_10_325 0.0))
(assert
 (>= l_0_10_330 0.0))
(assert
 (>= l_0_10_336 0.0))
(assert
 (>= l_0_10_343 0.0))
(assert
 (>= l_0_10_351 0.0))
(assert
 (>= l_0_10_360 0.0))
(assert
 (let ((?x62500 (* l_0_11_91 l_0_11_91)))
 (let ((?x62475 (* l_0_11_136 l_0_11_136)))
 (let ((?x62481 (- (- ?x62475 (* (* 2.0 l_0_11_182) l_0_11_187)) (* (* 2.0 l_0_11_183) l_0_11_188))))
 (let ((?x62487 (- (- ?x62481 (* (* 2.0 l_0_11_272) l_0_11_277)) (* (* 2.0 l_0_11_273) l_0_11_278))))
 (let ((?x62493 (- (- ?x62487 (* (* 2.0 l_0_11_317) l_0_11_322)) (* (* 2.0 l_0_11_318) l_0_11_323))))
 (let ((?x62499 (- (- ?x62493 (* (* 2.0 l_0_11_362) l_0_11_367)) (* (* 2.0 l_0_11_363) l_0_11_368))))
 (= (+ (- ?x62499 ?x62500) 1.0) 0.0))))))))
(assert
 (let ((?x62573 (* l_0_11_46 l_0_11_46)))
 (let ((?x62527 (- (* (- l_0_11_1) l_0_11_1) (* (* 2.0 l_0_11_187) l_0_11_191))))
 (let ((?x62533 (- (- ?x62527 (* (* 2.0 l_0_11_188) l_0_11_192)) (* (* 2.0 l_0_11_189) l_0_11_193))))
 (let ((?x62539 (- (- ?x62533 (* (* 2.0 l_0_11_190) l_0_11_194)) (* (* 2.0 l_0_11_277) l_0_11_281))))
 (let ((?x62545 (- (- ?x62539 (* (* 2.0 l_0_11_278) l_0_11_282)) (* (* 2.0 l_0_11_279) l_0_11_283))))
 (let ((?x62551 (- (- ?x62545 (* (* 2.0 l_0_11_280) l_0_11_284)) (* (* 2.0 l_0_11_322) l_0_11_326))))
 (let ((?x62557 (- (- ?x62551 (* (* 2.0 l_0_11_323) l_0_11_327)) (* (* 2.0 l_0_11_324) l_0_11_328))))
 (let ((?x62563 (- (- ?x62557 (* (* 2.0 l_0_11_325) l_0_11_329)) (* (* 2.0 l_0_11_367) l_0_11_371))))
 (let ((?x62569 (- (- ?x62563 (* (* 2.0 l_0_11_368) l_0_11_372)) (* (* 2.0 l_0_11_369) l_0_11_373))))
 (= (- (+ (- ?x62569 (* (* 2.0 l_0_11_370) l_0_11_374)) ?x62573) 1.0) 0.0)))))))))))
(assert
 (let ((?x62644 (- (- _a_9_ (* (* 2.0 l_0_11_181) l_0_11_202)) (* (* 2.0 l_0_11_271) l_0_11_292))))
 (let ((?x62650 (- (- ?x62644 (* (* 2.0 l_0_11_316) l_0_11_337)) (* (* 2.0 l_0_11_361) l_0_11_382))))
 (= ?x62650 0.0))))
(assert
 (let ((?x62573 (* l_0_11_46 l_0_11_46)))
 (let ((?x62671 (- (- _a_10_ (* l_0_11_1 l_0_11_1)) (* (* 2.0 l_0_11_196) l_0_11_202))))
 (let ((?x62677 (- (- ?x62671 (* (* 2.0 l_0_11_197) l_0_11_203)) (* (* 2.0 l_0_11_198) l_0_11_204))))
 (let ((?x62683 (- (- ?x62677 (* (* 2.0 l_0_11_199) l_0_11_205)) (* (* 2.0 l_0_11_200) l_0_11_206))))
 (let ((?x62689 (- (- ?x62683 (* (* 2.0 l_0_11_201) l_0_11_207)) (* (* 2.0 l_0_11_286) l_0_11_292))))
 (let ((?x62695 (- (- ?x62689 (* (* 2.0 l_0_11_287) l_0_11_293)) (* (* 2.0 l_0_11_288) l_0_11_294))))
 (let ((?x62701 (- (- ?x62695 (* (* 2.0 l_0_11_289) l_0_11_295)) (* (* 2.0 l_0_11_290) l_0_11_296))))
 (let ((?x62707 (- (- ?x62701 (* (* 2.0 l_0_11_291) l_0_11_297)) (* (* 2.0 l_0_11_331) l_0_11_337))))
 (let ((?x62713 (- (- ?x62707 (* (* 2.0 l_0_11_332) l_0_11_338)) (* (* 2.0 l_0_11_333) l_0_11_339))))
 (let ((?x62719 (- (- ?x62713 (* (* 2.0 l_0_11_334) l_0_11_340)) (* (* 2.0 l_0_11_335) l_0_11_341))))
 (let ((?x62725 (- (- ?x62719 (* (* 2.0 l_0_11_336) l_0_11_342)) (* (* 2.0 l_0_11_376) l_0_11_382))))
 (let ((?x62731 (- (- ?x62725 (* (* 2.0 l_0_11_377) l_0_11_383)) (* (* 2.0 l_0_11_378) l_0_11_384))))
 (let ((?x62737 (- (- ?x62731 (* (* 2.0 l_0_11_379) l_0_11_385)) (* (* 2.0 l_0_11_380) l_0_11_386))))
 (= (+ (- ?x62737 (* (* 2.0 l_0_11_381) l_0_11_387)) ?x62573) 0.0)))))))))))))))
(assert
 (let ((?x62500 (* l_0_11_91 l_0_11_91)))
 (let ((?x62810 (- (+ _a_11_ (* l_0_11_136 l_0_11_136)) (* (* 2.0 l_0_11_202) l_0_11_217))))
 (let ((?x62816 (- (- ?x62810 (* (* 2.0 l_0_11_203) l_0_11_218)) (* (* 2.0 l_0_11_204) l_0_11_219))))
 (let ((?x62822 (- (- ?x62816 (* (* 2.0 l_0_11_205) l_0_11_220)) (* (* 2.0 l_0_11_206) l_0_11_221))))
 (let ((?x62828 (- (- ?x62822 (* (* 2.0 l_0_11_207) l_0_11_222)) (* (* 2.0 l_0_11_208) l_0_11_223))))
 (let ((?x62834 (- (- ?x62828 (* (* 2.0 l_0_11_292) l_0_11_307)) (* (* 2.0 l_0_11_293) l_0_11_308))))
 (let ((?x62840 (- (- ?x62834 (* (* 2.0 l_0_11_294) l_0_11_309)) (* (* 2.0 l_0_11_295) l_0_11_310))))
 (let ((?x62846 (- (- ?x62840 (* (* 2.0 l_0_11_296) l_0_11_311)) (* (* 2.0 l_0_11_297) l_0_11_312))))
 (let ((?x62852 (- (- ?x62846 (* (* 2.0 l_0_11_298) l_0_11_313)) (* (* 2.0 l_0_11_337) l_0_11_352))))
 (let ((?x62858 (- (- ?x62852 (* (* 2.0 l_0_11_338) l_0_11_353)) (* (* 2.0 l_0_11_339) l_0_11_354))))
 (let ((?x62864 (- (- ?x62858 (* (* 2.0 l_0_11_340) l_0_11_355)) (* (* 2.0 l_0_11_341) l_0_11_356))))
 (let ((?x62870 (- (- ?x62864 (* (* 2.0 l_0_11_342) l_0_11_357)) (* (* 2.0 l_0_11_343) l_0_11_358))))
 (let ((?x62876 (- (- ?x62870 (* (* 2.0 l_0_11_382) l_0_11_397)) (* (* 2.0 l_0_11_383) l_0_11_398))))
 (let ((?x62882 (- (- ?x62876 (* (* 2.0 l_0_11_384) l_0_11_399)) (* (* 2.0 l_0_11_385) l_0_11_400))))
 (let ((?x62888 (- (- ?x62882 (* (* 2.0 l_0_11_386) l_0_11_401)) (* (* 2.0 l_0_11_387) l_0_11_402))))
 (= (- (- ?x62888 (* (* 2.0 l_0_11_388) l_0_11_403)) ?x62500) 0.0)))))))))))))))))
(assert
 (let ((?x62986 (* l_0_11_361 l_0_11_361)))
 (let ((?x62984 (* l_0_11_316 l_0_11_316)))
 (let ((?x62982 (* l_0_11_271 l_0_11_271)))
 (let ((?x62985 (- (- (- (- _a_6_) (* (* 1.0 l_0_11_181) l_0_11_181)) ?x62982) ?x62984)))
 (= (- ?x62985 ?x62986) 0.0))))))
(assert
 (let ((?x62500 (* l_0_11_91 l_0_11_91)))
 (let ((?x63008 (* l_0_11_226 l_0_11_226)))
 (let ((?x63007 (- (- (- _a_7_) (* l_0_11_136 l_0_11_136)) (* (* 2.0 l_0_11_181) l_0_11_209))))
 (let ((?x63013 (- (- (- ?x63007 ?x63008) (* (* 2.0 l_0_11_271) l_0_11_299)) (* (* 2.0 l_0_11_316) l_0_11_344))))
 (= (+ (- ?x63013 (* (* 2.0 l_0_11_361) l_0_11_389)) ?x62500) 0.0))))))
(assert
 (let ((?x62573 (* l_0_11_46 l_0_11_46)))
 (let ((?x63008 (* l_0_11_226 l_0_11_226)))
 (let ((?x63046 (- (+ (- _a_8_) (* l_0_11_1 l_0_11_1)) (* (* 2.0 l_0_11_181) l_0_11_184))))
 (let ((?x63051 (- (- (+ ?x63046 ?x63008) (* (* 2.0 l_0_11_271) l_0_11_274)) (* (* 2.0 l_0_11_316) l_0_11_319))))
 (= (- (- ?x63051 (* (* 2.0 l_0_11_361) l_0_11_364)) ?x62573) 0.0))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63090 (* ?x63089 l_0_11_47)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63088 (* ?x63087 l_0_11_2)))
 (= (+ ?x63088 ?x63090) 0.0))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x63154 (* ?x63153 l_0_11_72)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x63151 (* ?x63150 l_0_11_71)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x63148 (* ?x63147 l_0_11_70)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x63145 (* ?x63144 l_0_11_69)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x63142 (* ?x63141 l_0_11_68)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x63139 (* ?x63138 l_0_11_67)))
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63136 (* ?x63089 l_0_11_49)))
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x63134 (* ?x63133 l_0_11_252)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x63131 (* ?x63130 l_0_11_251)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x63128 (* ?x63127 l_0_11_250)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x63125 (* ?x63124 l_0_11_249)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x63122 (* ?x63121 l_0_11_248)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x63119 (* ?x63118 l_0_11_247)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x63116 (* ?x63115 l_0_11_27)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x63113 (* ?x63112 l_0_11_26)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x63110 (* ?x63109 l_0_11_25)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63107 (* ?x63106 l_0_11_24)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63104 (* ?x63103 l_0_11_23)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x63097 (* ?x63096 l_0_11_22)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63094 (* ?x63087 l_0_11_4)))
 (let ((?x63120 (+ (+ (+ (+ (+ (+ (+ ?x63094 ?x63097) ?x63104) ?x63107) ?x63110) ?x63113) ?x63116) ?x63119)))
 (let ((?x63140 (- (+ (+ (+ (+ (+ (+ ?x63120 ?x63122) ?x63125) ?x63128) ?x63131) ?x63134) ?x63136) ?x63139)))
 (= (- (- (- (- (- ?x63140 ?x63142) ?x63145) ?x63148) ?x63151) ?x63154) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63230 (* ?x63089 l_0_11_52)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) ?x63230) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63236 (* ?x63089 l_0_11_56)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_11) ?x63236) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63246 (* ?x63089 l_0_11_61)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x63246) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63256 (* ?x63089 l_0_11_67)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_22) ?x63256) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63312 (* ?x63089 l_0_11_74)))
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x63134 (* ?x63133 l_0_11_252)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x63131 (* ?x63130 l_0_11_251)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x63128 (* ?x63127 l_0_11_250)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x63125 (* ?x63124 l_0_11_249)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x63122 (* ?x63121 l_0_11_248)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x63119 (* ?x63118 l_0_11_247)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x63304 (* ?x63303 l_0_11_162)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x63301 (* ?x63300 l_0_11_161)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x63298 (* ?x63297 l_0_11_160)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x63295 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x63292 (* ?x63291 l_0_11_158)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x63289 (* ?x63288 l_0_11_157)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x63286 (* ?x63285 l_0_11_117)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x63283 (* ?x63282 l_0_11_116)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x63280 (* ?x63279 l_0_11_115)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63277 (* ?x63276 l_0_11_114)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63274 (* ?x63273 l_0_11_113)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63264 (* ?x63087 l_0_11_29)))
 (let ((?x63281 (+ (+ (+ (+ ?x63264 (* (* 2.0 l_0_11_106) l_0_11_112)) ?x63274) ?x63277) ?x63280)))
 (let ((?x63302 (- (- (- (- (- (+ (+ ?x63281 ?x63283) ?x63286) ?x63289) ?x63292) ?x63295) ?x63298) ?x63301)))
 (let ((?x63311 (- (- (- (- (- (- (- ?x63302 ?x63304) ?x63119) ?x63122) ?x63125) ?x63128) ?x63131) ?x63134)))
 (= (+ ?x63311 ?x63312) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63400 (* ?x63089 l_0_11_82)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x63398 (* ?x63397 l_0_11_151)))
 (let ((?x63266 (* 2.0 l_0_11_106)))
 (let ((?x63385 (* ?x63266 l_0_11_91)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63384 (* ?x63087 l_0_11_37)))
 (= (+ (+ (- ?x63384 ?x63385) ?x63398) ?x63400) 0.0))))))))))
(assert
 (let ((?x63424 (* l_0_11_48 l_0_11_48)))
 (let ((?x63422 (* l_0_11_47 l_0_11_47)))
 (let ((?x63425 (+ (+ (- (* (- l_0_11_2) l_0_11_2) (* l_0_11_3 l_0_11_3)) ?x63422) ?x63424)))
 (= ?x63425 0.0)))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63443 (* ?x63442 l_0_11_50)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63440 (* ?x63439 l_0_11_49)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63437 (* ?x63436 l_0_11_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_4) ?x63437) ?x63440) ?x63443) 0.0))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63477 (* ?x63442 l_0_11_53)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63475 (* ?x63439 l_0_11_52)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63473 (* ?x63436 l_0_11_8)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63471 (* ?x63470 l_0_11_7)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x63304 (* ?x63303 l_0_11_162)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x63301 (* ?x63300 l_0_11_161)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x63298 (* ?x63297 l_0_11_160)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x63295 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x63292 (* ?x63291 l_0_11_158)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x63289 (* ?x63288 l_0_11_157)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x63286 (* ?x63285 l_0_11_117)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x63283 (* ?x63282 l_0_11_116)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x63280 (* ?x63279 l_0_11_115)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63277 (* ?x63276 l_0_11_114)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63274 (* ?x63273 l_0_11_113)))
 (let ((?x63462 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x63274) ?x63277) ?x63280) ?x63283)))
 (let ((?x63469 (+ (+ (+ (+ (+ (+ (- ?x63462 ?x63286) ?x63289) ?x63292) ?x63295) ?x63298) ?x63301) ?x63304)))
 (= (+ (+ (- (- ?x63469 ?x63471) ?x63473) ?x63475) ?x63477) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63516 (* ?x63442 l_0_11_57)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63514 (* ?x63439 l_0_11_56)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63512 (* ?x63511 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_11) l_0_11_2) ?x63512) ?x63514) ?x63516) 0.0))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63536 (* ?x63442 l_0_11_62)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63534 (* ?x63439 l_0_11_61)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63532 (* ?x63103 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_16) l_0_11_2) ?x63532) ?x63534) ?x63536) 0.0))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63560 (* ?x63442 l_0_11_68)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63558 (* ?x63439 l_0_11_67)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63551 (* ?x63550 l_0_11_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_22) ?x63551) ?x63558) ?x63560) 0.0))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63579 (* ?x63442 l_0_11_75)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63577 (* ?x63439 l_0_11_74)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63575 (* ?x63436 l_0_11_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_2) l_0_11_29) ?x63575) ?x63577) ?x63579) 0.0))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63612 (* ?x63442 l_0_11_83)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63610 (* ?x63439 l_0_11_82)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63608 (* ?x63436 l_0_11_38)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63606 (* ?x63470 l_0_11_37)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x63604 (* ?x63603 l_0_11_152)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x63601 (* ?x63600 l_0_11_151)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63273 l_0_11_93)))
 (let ((?x63605 (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_92) ?x63593) ?x63601) ?x63604)))
 (= (+ (+ (- (- ?x63605 ?x63606) ?x63608) ?x63610) ?x63612) 0.0)))))))))))))))))
(assert
 (let ((?x63644 (* l_0_11_6 l_0_11_6)))
 (let ((?x63642 (* l_0_11_51 l_0_11_51)))
 (let ((?x63640 (* l_0_11_50 l_0_11_50)))
 (let ((?x63638 (* l_0_11_5 l_0_11_5)))
 (let ((?x63641 (+ (- (+ (* (- l_0_11_4) l_0_11_4) (* l_0_11_49 l_0_11_49)) ?x63638) ?x63640)))
 (= (- (+ ?x63641 ?x63642) ?x63644) 0.0)))))))
(assert
 (let ((?x63674 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63671 (* ?x63670 l_0_11_54)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63668 (* ?x63667 l_0_11_53)))
 (let ((?x63665 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63662 (* ?x63661 l_0_11_52)))
 (let ((?x63672 (+ (+ (- (+ (* (* (- 2.0) l_0_11_4) l_0_11_7) ?x63662) ?x63665) ?x63668) ?x63671)))
 (= (- ?x63672 ?x63674) 0.0)))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63704 (* ?x63670 l_0_11_58)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63702 (* ?x63667 l_0_11_57)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63700 (* ?x63661 l_0_11_56)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63698 (* ?x63697 l_0_11_6)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63695 (* ?x63511 l_0_11_5)))
 (let ((?x63703 (+ (+ (- (- (* (* (- 2.0) l_0_11_11) l_0_11_4) ?x63695) ?x63698) ?x63700) ?x63702)))
 (= (+ ?x63703 ?x63704) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63730 (* ?x63670 l_0_11_63)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63728 (* ?x63667 l_0_11_62)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63726 (* ?x63661 l_0_11_61)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63718 (* ?x63106 l_0_11_6)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x53129 (* ?x63103 l_0_11_5)))
 (let ((?x63729 (+ (+ (- (- (* (* (- 2.0) l_0_11_16) l_0_11_4) ?x53129) ?x63718) ?x63726) ?x63728)))
 (= (+ ?x63729 ?x63730) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63746 (* ?x63670 l_0_11_69)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63744 (* ?x63667 l_0_11_68)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x28957 (* ?x63661 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x39773 (* ?x53131 l_0_11_6)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x53119 (* ?x63550 l_0_11_5)))
 (let ((?x63745 (+ (+ (- (- (* (* (- 2.0) l_0_11_22) l_0_11_4) ?x53119) ?x39773) ?x28957) ?x63744)))
 (= (+ ?x63745 ?x63746) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63777 (* ?x63670 l_0_11_76)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63775 (* ?x63667 l_0_11_75)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63773 (* ?x63661 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x63771 (* ?x63770 l_0_11_6)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63762 (* ?x63761 l_0_11_5)))
 (let ((?x63776 (+ (+ (- (- (* (* (- 2.0) l_0_11_29) l_0_11_4) ?x63762) ?x63771) ?x63773) ?x63775)))
 (= (+ ?x63776 ?x63777) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63823 (* ?x63670 l_0_11_84)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63821 (* ?x63667 l_0_11_83)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63819 (* ?x63661 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x63817 (* ?x63816 l_0_11_6)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x63814 (* ?x63813 l_0_11_5)))
 (let ((?x63810 (* 2.0 l_0_11_37)))
 (let ((?x63811 (* ?x63810 l_0_11_4)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x63808 (* ?x63807 l_0_11_153)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x63805 (* ?x63804 l_0_11_152)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x63802 (* ?x63801 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63799 (* ?x63276 l_0_11_96)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63797 (* ?x63273 l_0_11_95)))
 (let ((?x63806 (+ (+ (- (- (* (* (- 2.0) l_0_11_106) l_0_11_94) ?x63797) ?x63799) ?x63802) ?x63805)))
 (let ((?x63809 (+ ?x63806 ?x63808)))
 (= (+ (+ (+ (- (- (- ?x63809 ?x63811) ?x63814) ?x63817) ?x63819) ?x63821) ?x63823) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63875 (* l_0_11_9 l_0_11_9)))
 (let ((?x63873 (* l_0_11_8 l_0_11_8)))
 (let ((?x63871 (* l_0_11_7 l_0_11_7)))
 (let ((?x63869 (* l_0_11_55 l_0_11_55)))
 (let ((?x63867 (* l_0_11_54 l_0_11_54)))
 (let ((?x63865 (* l_0_11_53 l_0_11_53)))
 (let ((?x63866 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_52 l_0_11_52)) ?x63865)))
 (= (- (- (- (+ (+ ?x63866 ?x63867) ?x63869) ?x63871) ?x63873) ?x63875) 0.0)))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x63154 (* ?x63153 l_0_11_72)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x63151 (* ?x63150 l_0_11_71)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x63148 (* ?x63147 l_0_11_70)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x63145 (* ?x63144 l_0_11_69)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x63142 (* ?x63141 l_0_11_68)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x63139 (* ?x63138 l_0_11_67)))
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63914 (* ?x63913 l_0_11_59)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63911 (* ?x63910 l_0_11_58)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63908 (* ?x63907 l_0_11_57)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63905 (* ?x63904 l_0_11_56)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x63116 (* ?x63115 l_0_11_27)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x63113 (* ?x63112 l_0_11_26)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x63110 (* ?x63109 l_0_11_25)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63107 (* ?x63106 l_0_11_24)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63104 (* ?x63103 l_0_11_23)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x63097 (* ?x63096 l_0_11_22)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63896 (* ?x63697 l_0_11_9)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63894 (* ?x63511 l_0_11_8)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x63892 (* ?x63891 l_0_11_7)))
 (let ((?x63897 (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_14) ?x63892) ?x63894) ?x63896)))
 (let ((?x63906 (+ (- (- (- (- (- (- ?x63897 ?x63097) ?x63104) ?x63107) ?x63110) ?x63113) ?x63116) ?x63905)))
 (let ((?x63919 (+ (+ (+ (+ (+ (+ (+ ?x63906 ?x63908) ?x63911) ?x63914) ?x63139) ?x63142) ?x63145) ?x63148)))
 (= (+ (+ ?x63919 ?x63151) ?x63154) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63943 (* ?x63913 l_0_11_64)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63941 (* ?x63910 l_0_11_63)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63939 (* ?x63907 l_0_11_62)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x42056 (* ?x63904 l_0_11_61)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x42079 (* ?x63106 l_0_11_9)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x40867 (* ?x63103 l_0_11_8)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x53235 (* ?x63096 l_0_11_7)))
 (let ((?x40647 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x53235) ?x40867) ?x42079) ?x42056)))
 (= (+ (+ (+ ?x40647 ?x63939) ?x63941) ?x63943) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63977 (* ?x63913 l_0_11_70)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63975 (* ?x63910 l_0_11_69)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63973 (* ?x63907 l_0_11_68)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63971 (* ?x63904 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x63969 (* ?x53131 l_0_11_9)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63960 (* ?x63550 l_0_11_8)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x63957 (* ?x53274 l_0_11_7)))
 (let ((?x63972 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_25) ?x63957) ?x63960) ?x63969) ?x63971)))
 (= (+ (+ (+ ?x63972 ?x63973) ?x63975) ?x63977) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64012 (* ?x63913 l_0_11_77)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64010 (* ?x63910 l_0_11_76)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64008 (* ?x63907 l_0_11_75)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64006 (* ?x63904 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64004 (* ?x63770 l_0_11_9)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63995 (* ?x63761 l_0_11_8)))
 (let ((?x53283 (* 2.0 l_0_11_29)))
 (let ((?x63992 (* ?x53283 l_0_11_7)))
 (let ((?x64007 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_32) ?x63992) ?x63995) ?x64004) ?x64006)))
 (= (+ (+ (+ ?x64007 ?x64008) ?x64010) ?x64012) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64075 (* ?x63913 l_0_11_85)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64073 (* ?x63910 l_0_11_84)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64071 (* ?x63907 l_0_11_83)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64069 (* ?x63904 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x64067 (* ?x63816 l_0_11_9)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x64065 (* ?x63813 l_0_11_8)))
 (let ((?x63810 (* 2.0 l_0_11_37)))
 (let ((?x64063 (* ?x63810 l_0_11_7)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x64061 (* ?x64060 l_0_11_154)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x64058 (* ?x64057 l_0_11_153)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x64055 (* ?x64054 l_0_11_152)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x64052 (* ?x64051 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64049 (* ?x63276 l_0_11_99)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64047 (* ?x63273 l_0_11_98)))
 (let ((?x63266 (* 2.0 l_0_11_106)))
 (let ((?x64038 (* ?x63266 l_0_11_97)))
 (let ((?x64033 (* 2.0 l_0_11_100)))
 (let ((?x64035 (* ?x64033 l_0_11_109)))
 (let ((?x63889 (* (- 2.0) l_0_11_10)))
 (let ((?x64031 (* ?x63889 l_0_11_40)))
 (let ((?x64059 (+ (+ (+ (- (- (- (- ?x64031 ?x64035) ?x64038) ?x64047) ?x64049) ?x64052) ?x64055) ?x64058)))
 (let ((?x64074 (+ (+ (+ (- (- (- (+ ?x64059 ?x64061) ?x64063) ?x64065) ?x64067) ?x64069) ?x64071) ?x64073)))
 (= (+ ?x64074 ?x64075) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64128 (* l_0_11_60 l_0_11_60)))
 (let ((?x64126 (* l_0_11_59 l_0_11_59)))
 (let ((?x64124 (* l_0_11_58 l_0_11_58)))
 (let ((?x64122 (* l_0_11_57 l_0_11_57)))
 (let ((?x64120 (* l_0_11_56 l_0_11_56)))
 (let ((?x64118 (* l_0_11_15 l_0_11_15)))
 (let ((?x64116 (* l_0_11_14 l_0_11_14)))
 (let ((?x64114 (* l_0_11_13 l_0_11_13)))
 (let ((?x64115 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x64114)))
 (let ((?x64129 (+ (+ (+ (+ (+ (- (- ?x64115 ?x64116) ?x64118) ?x64120) ?x64122) ?x64124) ?x64126) ?x64128)))
 (= ?x64129 0.0))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64175 (* ?x64174 l_0_11_65)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64172 (* ?x64171 l_0_11_64)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64169 (* ?x64168 l_0_11_63)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64166 (* ?x64165 l_0_11_62)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64163 (* ?x64162 l_0_11_61)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64160 (* ?x64159 l_0_11_20)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64157 (* ?x64156 l_0_11_19)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64154 (* ?x63697 l_0_11_18)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64152 (* ?x63511 l_0_11_17)))
 (let ((?x64161 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_16) ?x64152) ?x64154) ?x64157) ?x64160)))
 (= (+ (+ (+ (+ (+ ?x64161 ?x64163) ?x64166) ?x64169) ?x64172) ?x64175) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64219 (* ?x64174 l_0_11_71)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64217 (* ?x64171 l_0_11_70)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64215 (* ?x64168 l_0_11_69)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64213 (* ?x64165 l_0_11_68)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64211 (* ?x64162 l_0_11_67)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64209 (* ?x64159 l_0_11_26)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64199 (* ?x64156 l_0_11_25)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64196 (* ?x63697 l_0_11_24)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x53406 (* ?x63511 l_0_11_23)))
 (let ((?x64210 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_22) ?x53406) ?x64196) ?x64199) ?x64209)))
 (= (+ (+ (+ (+ (+ ?x64210 ?x64211) ?x64213) ?x64215) ?x64217) ?x64219) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64257 (* ?x64174 l_0_11_78)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64255 (* ?x64171 l_0_11_77)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64253 (* ?x64168 l_0_11_76)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64251 (* ?x64165 l_0_11_75)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64249 (* ?x64162 l_0_11_74)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64247 (* ?x64159 l_0_11_33)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64245 (* ?x64156 l_0_11_32)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64243 (* ?x63697 l_0_11_31)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64241 (* ?x63511 l_0_11_30)))
 (let ((?x64248 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_29) ?x64241) ?x64243) ?x64245) ?x64247)))
 (= (+ (+ (+ (+ (+ ?x64248 ?x64249) ?x64251) ?x64253) ?x64255) ?x64257) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64336 (* ?x64174 l_0_11_86)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64334 (* ?x64171 l_0_11_85)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64332 (* ?x64168 l_0_11_84)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64330 (* ?x64165 l_0_11_83)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64328 (* ?x64162 l_0_11_82)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x64326 (* ?x64325 l_0_11_155)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64323 (* ?x64159 l_0_11_41)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x64321 (* ?x64320 l_0_11_154)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x64318 (* ?x64317 l_0_11_153)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x64315 (* ?x64314 l_0_11_152)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x64312 (* ?x64311 l_0_11_151)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64309 (* ?x64156 l_0_11_40)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64307 (* ?x63697 l_0_11_39)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64305 (* ?x63511 l_0_11_38)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x64303 (* ?x63891 l_0_11_37)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x64301 (* ?x64300 l_0_11_110)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x64298 (* ?x64297 l_0_11_109)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x64295 (* ?x64286 l_0_11_108)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x64283 (* ?x64281 l_0_11_107)))
 (let ((?x64302 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_106) ?x64283) ?x64295) ?x64298) ?x64301)))
 (let ((?x64319 (+ (+ (+ (- (- (- (- ?x64302 ?x64303) ?x64305) ?x64307) ?x64309) ?x64312) ?x64315) ?x64318)))
 (let ((?x64335 (+ (+ (+ (+ (+ (- (+ ?x64319 ?x64321) ?x64323) ?x64326) ?x64328) ?x64330) ?x64332) ?x64334)))
 (= (+ ?x64335 ?x64336) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64425 (* l_0_11_66 l_0_11_66)))
 (let ((?x64423 (* l_0_11_65 l_0_11_65)))
 (let ((?x64421 (* l_0_11_64 l_0_11_64)))
 (let ((?x64419 (* l_0_11_63 l_0_11_63)))
 (let ((?x64417 (* l_0_11_62 l_0_11_62)))
 (let ((?x64415 (* l_0_11_61 l_0_11_61)))
 (let ((?x64413 (* l_0_11_21 l_0_11_21)))
 (let ((?x64411 (* l_0_11_20 l_0_11_20)))
 (let ((?x64396 (* l_0_11_19 l_0_11_19)))
 (let ((?x64393 (* l_0_11_18 l_0_11_18)))
 (let ((?x64395 (- (- (* (- l_0_11_16) l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64393)))
 (let ((?x64422 (+ (+ (+ (+ (- (- (- ?x64395 ?x64396) ?x64411) ?x64413) ?x64415) ?x64417) ?x64419) ?x64421)))
 (= (+ (+ ?x64422 ?x64423) ?x64425) 0.0))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x63154 (* ?x63153 l_0_11_72)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x63151 (* ?x63150 l_0_11_71)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x63148 (* ?x63147 l_0_11_70)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x63145 (* ?x63144 l_0_11_69)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x63142 (* ?x63141 l_0_11_68)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x63139 (* ?x63138 l_0_11_67)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x63116 (* ?x63115 l_0_11_27)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x63113 (* ?x63112 l_0_11_26)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x63110 (* ?x63109 l_0_11_25)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63107 (* ?x63106 l_0_11_24)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63104 (* ?x63103 l_0_11_23)))
 (let ((?x64452 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_22) ?x63104) ?x63107) ?x63110) ?x63113)))
 (let ((?x64459 (+ (+ (+ (+ (+ (+ (- ?x64452 ?x63116) ?x63139) ?x63142) ?x63145) ?x63148) ?x63151) ?x63154)))
 (= ?x64459 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64491 (* ?x63153 l_0_11_79)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64489 (* ?x63150 l_0_11_78)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64487 (* ?x63147 l_0_11_77)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64485 (* ?x63144 l_0_11_76)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64483 (* ?x63141 l_0_11_75)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64481 (* ?x63138 l_0_11_74)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64479 (* ?x63115 l_0_11_34)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64477 (* ?x63112 l_0_11_33)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64475 (* ?x63109 l_0_11_32)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64473 (* ?x63106 l_0_11_31)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64471 (* ?x63103 l_0_11_30)))
 (let ((?x64478 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_29) ?x64471) ?x64473) ?x64475) ?x64477)))
 (let ((?x64492 (+ (+ (+ (+ (+ (+ (- ?x64478 ?x64479) ?x64481) ?x64483) ?x64485) ?x64487) ?x64489) ?x64491)))
 (= ?x64492 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64560 (* ?x63153 l_0_11_87)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64558 (* ?x63150 l_0_11_86)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64556 (* ?x63147 l_0_11_85)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64554 (* ?x63144 l_0_11_84)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64552 (* ?x63141 l_0_11_83)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64550 (* ?x63138 l_0_11_82)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64548 (* ?x63115 l_0_11_42)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64546 (* ?x63112 l_0_11_41)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64544 (* ?x63109 l_0_11_40)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64542 (* ?x63106 l_0_11_39)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64540 (* ?x63103 l_0_11_38)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x64538 (* ?x63096 l_0_11_37)))
 (let ((?x64536 (* l_0_11_156 l_0_11_156)))
 (let ((?x64534 (* l_0_11_155 l_0_11_155)))
 (let ((?x64532 (* l_0_11_154 l_0_11_154)))
 (let ((?x64530 (* l_0_11_153 l_0_11_153)))
 (let ((?x64528 (* l_0_11_152 l_0_11_152)))
 (let ((?x64526 (* l_0_11_151 l_0_11_151)))
 (let ((?x64524 (* l_0_11_111 l_0_11_111)))
 (let ((?x64522 (* l_0_11_110 l_0_11_110)))
 (let ((?x64520 (* l_0_11_109 l_0_11_109)))
 (let ((?x64518 (* l_0_11_108 l_0_11_108)))
 (let ((?x64519 (- (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x64518)))
 (let ((?x64533 (+ (+ (+ (+ (- (- (- ?x64519 ?x64520) ?x64522) ?x64524) ?x64526) ?x64528) ?x64530) ?x64532)))
 (let ((?x64537 (+ (+ ?x64533 ?x64534) ?x64536)))
 (let ((?x64551 (+ (- (- (- (- (- (- ?x64537 ?x64538) ?x64540) ?x64542) ?x64544) ?x64546) ?x64548) ?x64550)))
 (= (+ (+ (+ (+ (+ ?x64551 ?x64552) ?x64554) ?x64556) ?x64558) ?x64560) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64640 (* l_0_11_73 l_0_11_73)))
 (let ((?x64638 (* l_0_11_72 l_0_11_72)))
 (let ((?x64636 (* l_0_11_71 l_0_11_71)))
 (let ((?x64634 (* l_0_11_70 l_0_11_70)))
 (let ((?x64632 (* l_0_11_69 l_0_11_69)))
 (let ((?x64630 (* l_0_11_68 l_0_11_68)))
 (let ((?x64628 (* l_0_11_67 l_0_11_67)))
 (let ((?x64626 (* l_0_11_28 l_0_11_28)))
 (let ((?x64624 (* l_0_11_27 l_0_11_27)))
 (let ((?x64622 (* l_0_11_26 l_0_11_26)))
 (let ((?x64620 (* l_0_11_25 l_0_11_25)))
 (let ((?x64618 (* l_0_11_24 l_0_11_24)))
 (let ((?x64619 (- (- (* (- l_0_11_22) l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64618)))
 (let ((?x64633 (+ (+ (+ (- (- (- (- ?x64619 ?x64620) ?x64622) ?x64624) ?x64626) ?x64628) ?x64630) ?x64632)))
 (= (+ (+ (+ (+ ?x64633 ?x64634) ?x64636) ?x64638) ?x64640) 0.0))))))))))))))))
(assert
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64706 (* ?x64705 l_0_11_80)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64703 (* ?x64702 l_0_11_79)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64700 (* ?x64699 l_0_11_78)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64697 (* ?x64696 l_0_11_77)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64694 (* ?x64693 l_0_11_76)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64691 (* ?x64690 l_0_11_75)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64688 (* ?x64687 l_0_11_74)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64685 (* ?x64684 l_0_11_35)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64682 (* ?x64681 l_0_11_34)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64679 (* ?x64678 l_0_11_33)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64676 (* ?x64675 l_0_11_32)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64673 (* ?x53131 l_0_11_31)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64671 (* ?x63550 l_0_11_30)))
 (let ((?x64680 (- (- (- (- (* (* (- 2.0) l_0_11_22) l_0_11_29) ?x64671) ?x64673) ?x64676) ?x64679)))
 (let ((?x64701 (+ (+ (+ (+ (+ (- (- ?x64680 ?x64682) ?x64685) ?x64688) ?x64691) ?x64694) ?x64697) ?x64700)))
 (= (+ (+ ?x64701 ?x64703) ?x64706) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64778 (* ?x64705 l_0_11_88)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64776 (* ?x64702 l_0_11_87)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64774 (* ?x64699 l_0_11_86)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64772 (* ?x64696 l_0_11_85)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64770 (* ?x64693 l_0_11_84)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64768 (* ?x64690 l_0_11_83)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64766 (* ?x64687 l_0_11_82)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64764 (* ?x64684 l_0_11_43)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64762 (* ?x64681 l_0_11_42)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64760 (* ?x64678 l_0_11_41)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64748 (* ?x64675 l_0_11_40)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64744 (* ?x53131 l_0_11_39)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64740 (* ?x63550 l_0_11_38)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x64736 (* ?x53274 l_0_11_37)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x63304 (* ?x63303 l_0_11_162)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x63301 (* ?x63300 l_0_11_161)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x63298 (* ?x63297 l_0_11_160)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x63295 (* ?x63294 l_0_11_159)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x63292 (* ?x63291 l_0_11_158)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x63289 (* ?x63288 l_0_11_157)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x63286 (* ?x63285 l_0_11_117)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x63283 (* ?x63282 l_0_11_116)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x63280 (* ?x63279 l_0_11_115)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63277 (* ?x63276 l_0_11_114)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63274 (* ?x63273 l_0_11_113)))
 (let ((?x63462 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_112) ?x63274) ?x63277) ?x63280) ?x63283)))
 (let ((?x63469 (+ (+ (+ (+ (+ (+ (- ?x63462 ?x63286) ?x63289) ?x63292) ?x63295) ?x63298) ?x63301) ?x63304)))
 (let ((?x64765 (- (- (- (- (- (- (- ?x63469 ?x64736) ?x64740) ?x64744) ?x64748) ?x64760) ?x64762) ?x64764)))
 (let ((?x64779 (+ (+ (+ (+ (+ (+ (+ ?x64765 ?x64766) ?x64768) ?x64770) ?x64772) ?x64774) ?x64776) ?x64778)))
 (= ?x64779 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64835 (* l_0_11_81 l_0_11_81)))
 (let ((?x64833 (* l_0_11_80 l_0_11_80)))
 (let ((?x64831 (* l_0_11_79 l_0_11_79)))
 (let ((?x64829 (* l_0_11_78 l_0_11_78)))
 (let ((?x64827 (* l_0_11_77 l_0_11_77)))
 (let ((?x64825 (* l_0_11_76 l_0_11_76)))
 (let ((?x64823 (* l_0_11_75 l_0_11_75)))
 (let ((?x64821 (* l_0_11_74 l_0_11_74)))
 (let ((?x64819 (* l_0_11_36 l_0_11_36)))
 (let ((?x64817 (* l_0_11_35 l_0_11_35)))
 (let ((?x64815 (* l_0_11_34 l_0_11_34)))
 (let ((?x64813 (* l_0_11_33 l_0_11_33)))
 (let ((?x42273 (* l_0_11_32 l_0_11_32)))
 (let ((?x42271 (* l_0_11_31 l_0_11_31)))
 (let ((?x53553 (- (- (* (- l_0_11_29) l_0_11_29) (* l_0_11_30 l_0_11_30)) ?x42271)))
 (let ((?x64824 (+ (+ (- (- (- (- (- ?x53553 ?x42273) ?x64813) ?x64815) ?x64817) ?x64819) ?x64821) ?x64823)))
 (= (+ (+ (+ (+ (+ (+ ?x64824 ?x64825) ?x64827) ?x64829) ?x64831) ?x64833) ?x64835) 0.0))))))))))))))))))
(assert
 (let ((?x64925 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64922 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64919 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64916 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64913 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64910 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64907 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64904 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64901 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64898 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64895 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64892 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64889 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64886 (* ?x63770 l_0_11_39)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x64884 (* ?x63761 l_0_11_38)))
 (let ((?x53283 (* 2.0 l_0_11_29)))
 (let ((?x64882 (* ?x53283 l_0_11_37)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x64880 (* ?x63303 l_0_11_169)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64878 (* ?x63300 l_0_11_168)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64876 (* ?x63297 l_0_11_167)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64874 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64872 (* ?x63291 l_0_11_165)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64870 (* ?x63288 l_0_11_164)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64868 (* ?x63285 l_0_11_124)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64866 (* ?x63282 l_0_11_123)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64864 (* ?x63279 l_0_11_122)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64862 (* ?x63276 l_0_11_121)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64860 (* ?x63273 l_0_11_120)))
 (let ((?x64867 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_119) ?x64860) ?x64862) ?x64864) ?x64866)))
 (let ((?x64881 (+ (+ (+ (+ (+ (+ (- ?x64867 ?x64868) ?x64870) ?x64872) ?x64874) ?x64876) ?x64878) ?x64880)))
 (let ((?x64899 (- (- (- (- (- (- (- ?x64881 ?x64882) ?x64884) ?x64886) ?x64889) ?x64892) ?x64895) ?x64898)))
 (let ((?x64920 (+ (+ (+ (+ (+ (+ (- ?x64899 ?x64901) ?x64904) ?x64907) ?x64910) ?x64913) ?x64916) ?x64919)))
 (= (+ (+ ?x64920 ?x64922) ?x64925) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65037 (* l_0_11_90 l_0_11_90)))
 (let ((?x65035 (* l_0_11_89 l_0_11_89)))
 (let ((?x65033 (* l_0_11_88 l_0_11_88)))
 (let ((?x65031 (* l_0_11_87 l_0_11_87)))
 (let ((?x65029 (* l_0_11_86 l_0_11_86)))
 (let ((?x65027 (* l_0_11_85 l_0_11_85)))
 (let ((?x65025 (* l_0_11_84 l_0_11_84)))
 (let ((?x65023 (* l_0_11_83 l_0_11_83)))
 (let ((?x65021 (* l_0_11_82 l_0_11_82)))
 (let ((?x65019 (* l_0_11_45 l_0_11_45)))
 (let ((?x65017 (* l_0_11_44 l_0_11_44)))
 (let ((?x65015 (* l_0_11_43 l_0_11_43)))
 (let ((?x65013 (* l_0_11_42 l_0_11_42)))
 (let ((?x65011 (* l_0_11_41 l_0_11_41)))
 (let ((?x65009 (* l_0_11_40 l_0_11_40)))
 (let ((?x65007 (* l_0_11_39 l_0_11_39)))
 (let ((?x65005 (* l_0_11_38 l_0_11_38)))
 (let ((?x65003 (* l_0_11_37 l_0_11_37)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x65001 (* ?x63303 l_0_11_177)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64999 (* ?x63300 l_0_11_176)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64997 (* ?x63297 l_0_11_175)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64995 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64993 (* ?x63291 l_0_11_173)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64991 (* ?x63288 l_0_11_172)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64989 (* ?x63285 l_0_11_132)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64987 (* ?x63282 l_0_11_131)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64985 (* ?x63279 l_0_11_130)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64983 (* ?x63276 l_0_11_129)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64981 (* ?x63273 l_0_11_128)))
 (let ((?x64988 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_127) ?x64981) ?x64983) ?x64985) ?x64987)))
 (let ((?x65002 (+ (+ (+ (+ (+ (+ (- ?x64988 ?x64989) ?x64991) ?x64993) ?x64995) ?x64997) ?x64999) ?x65001)))
 (let ((?x65016 (- (- (- (- (- (- (- ?x65002 ?x65003) ?x65005) ?x65007) ?x65009) ?x65011) ?x65013) ?x65015)))
 (let ((?x65030 (+ (+ (+ (+ (+ (- (- ?x65016 ?x65017) ?x65019) ?x65021) ?x65023) ?x65025) ?x65027) ?x65029)))
 (= (+ (+ (+ (+ ?x65030 ?x65031) ?x65033) ?x65035) ?x65037) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63090 (* ?x63089 l_0_11_47)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x65112 (* ?x63397 l_0_11_146)))
 (let ((?x42342 (* 2.0 l_0_11_101)))
 (let ((?x65110 (* ?x42342 l_0_11_91)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63088 (* ?x63087 l_0_11_2)))
 (= (+ (+ (- ?x63088 ?x65110) ?x65112) ?x63090) 0.0))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63914 (* ?x63913 l_0_11_59)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63911 (* ?x63910 l_0_11_58)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63908 (* ?x63907 l_0_11_57)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63905 (* ?x63904 l_0_11_56)))
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63136 (* ?x63089 l_0_11_49)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x65122 (* ?x53661 l_0_11_239)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x53660 (* ?x53663 l_0_11_238)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x53656 (* ?x29503 l_0_11_237)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x53633 (* ?x42329 l_0_11_236)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63896 (* ?x63697 l_0_11_9)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63894 (* ?x63511 l_0_11_8)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x63892 (* ?x63891 l_0_11_7)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63094 (* ?x63087 l_0_11_4)))
 (let ((?x53653 (+ (+ (+ (+ ?x63094 (* (* 2.0 l_0_11_10) l_0_11_14)) ?x63892) ?x63894) ?x63896)))
 (let ((?x65126 (- (- (+ (+ (+ (+ (+ ?x53653 ?x53633) ?x53656) ?x53660) ?x65122) ?x63136) ?x63905) ?x63908)))
 (= (- (- ?x65126 ?x63911) ?x63914) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63230 (* ?x63089 l_0_11_52)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_7) ?x63230) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63236 (* ?x63089 l_0_11_56)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_11) ?x63236) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63246 (* ?x63089 l_0_11_61)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_16) ?x63246) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63256 (* ?x63089 l_0_11_67)))
 (= (+ (* (* (- 2.0) l_0_11_1) l_0_11_22) ?x63256) 0.0))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63312 (* ?x63089 l_0_11_74)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x65122 (* ?x53661 l_0_11_239)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x53660 (* ?x53663 l_0_11_238)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x53656 (* ?x29503 l_0_11_237)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x53633 (* ?x42329 l_0_11_236)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x65148 (* ?x64060 l_0_11_149)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x65146 (* ?x64057 l_0_11_148)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x65144 (* ?x64054 l_0_11_147)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x65142 (* ?x64051 l_0_11_146)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x16131 (* ?x64286 l_0_11_99)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42378 (* ?x64281 l_0_11_98)))
 (let ((?x42342 (* 2.0 l_0_11_101)))
 (let ((?x16110 (* ?x42342 l_0_11_97)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63264 (* ?x63087 l_0_11_29)))
 (let ((?x42380 (+ (+ (+ (+ ?x63264 (* (* 2.0 l_0_11_100) l_0_11_104)) ?x16110) ?x42378) ?x16131)))
 (let ((?x65152 (- (- (- (- (- (- (- ?x42380 ?x65142) ?x65144) ?x65146) ?x65148) ?x53633) ?x53656) ?x53660)))
 (= (+ (- ?x65152 ?x65122) ?x63312) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63400 (* ?x63089 l_0_11_82)))
 (let ((?x63087 (* (- 2.0) l_0_11_1)))
 (let ((?x63384 (* ?x63087 l_0_11_37)))
 (= (+ ?x63384 ?x63400) 0.0))))))
(assert
 (let ((?x63424 (* l_0_11_48 l_0_11_48)))
 (let ((?x63422 (* l_0_11_47 l_0_11_47)))
 (let ((?x63415 (* l_0_11_3 l_0_11_3)))
 (let ((?x63428 (* l_0_11_2 l_0_11_2)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x65193 (* ?x63603 l_0_11_147)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x65191 (* ?x63600 l_0_11_146)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65189 (* ?x64281 l_0_11_93)))
 (let ((?x65194 (+ (+ (- (* (* (- 2.0) l_0_11_101) l_0_11_92) ?x65189) ?x65191) ?x65193)))
 (= (+ (+ (- (- ?x65194 ?x63428) ?x63415) ?x63422) ?x63424) 0.0)))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63443 (* ?x63442 l_0_11_50)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63440 (* ?x63439 l_0_11_49)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63437 (* ?x63436 l_0_11_5)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65217 (* ?x63470 l_0_11_4)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x65215 (* ?x63807 l_0_11_148)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x65213 (* ?x63804 l_0_11_147)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x29669 (* ?x63801 l_0_11_146)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x42400 (* ?x64286 l_0_11_96)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42448 (* ?x64281 l_0_11_95)))
 (let ((?x65214 (+ (+ (- (- (* (* (- 2.0) l_0_11_101) l_0_11_94) ?x42448) ?x42400) ?x29669) ?x65213)))
 (let ((?x65216 (+ ?x65214 ?x65215)))
 (= (+ (+ (- (- ?x65216 ?x65217) ?x63437) ?x63440) ?x63443) 0.0))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63477 (* ?x63442 l_0_11_53)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63475 (* ?x63439 l_0_11_52)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63473 (* ?x63436 l_0_11_8)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63471 (* ?x63470 l_0_11_7)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x65148 (* ?x64060 l_0_11_149)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x65146 (* ?x64057 l_0_11_148)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x65144 (* ?x64054 l_0_11_147)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x65142 (* ?x64051 l_0_11_146)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x16131 (* ?x64286 l_0_11_99)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42378 (* ?x64281 l_0_11_98)))
 (let ((?x42342 (* 2.0 l_0_11_101)))
 (let ((?x16110 (* ?x42342 l_0_11_97)))
 (let ((?x65246 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_104) ?x16110) ?x42378) ?x16131) ?x65142)))
 (let ((?x65249 (+ (+ (+ ?x65246 ?x65144) ?x65146) ?x65148)))
 (= (+ (+ (- (- ?x65249 ?x63471) ?x63473) ?x63475) ?x63477) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63516 (* ?x63442 l_0_11_57)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63514 (* ?x63439 l_0_11_56)))
 (let ((?x65275 (* l_0_11_150 l_0_11_150)))
 (let ((?x65273 (* l_0_11_149 l_0_11_149)))
 (let ((?x65271 (* l_0_11_148 l_0_11_148)))
 (let ((?x65269 (* l_0_11_147 l_0_11_147)))
 (let ((?x65267 (* l_0_11_146 l_0_11_146)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63512 (* ?x63511 l_0_11_3)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x65264 (* ?x63891 l_0_11_2)))
 (let ((?x65262 (* l_0_11_105 l_0_11_105)))
 (let ((?x65260 (* l_0_11_104 l_0_11_104)))
 (let ((?x65258 (* l_0_11_103 l_0_11_103)))
 (let ((?x65259 (- (- (* (- l_0_11_101) l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x65258)))
 (let ((?x65263 (- (- ?x65259 ?x65260) ?x65262)))
 (let ((?x65276 (+ (+ (+ (+ (+ (- (- ?x65263 ?x65264) ?x63512) ?x65267) ?x65269) ?x65271) ?x65273) ?x65275)))
 (= (+ (+ ?x65276 ?x63514) ?x63516) 0.0)))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63536 (* ?x63442 l_0_11_62)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63534 (* ?x63439 l_0_11_61)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63532 (* ?x63103 l_0_11_3)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x65295 (* ?x63096 l_0_11_2)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x64326 (* ?x64325 l_0_11_155)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x64321 (* ?x64320 l_0_11_154)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x64318 (* ?x64317 l_0_11_153)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x64315 (* ?x64314 l_0_11_152)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x64312 (* ?x64311 l_0_11_151)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x64301 (* ?x64300 l_0_11_110)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x64298 (* ?x64297 l_0_11_109)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x64295 (* ?x64286 l_0_11_108)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x64283 (* ?x64281 l_0_11_107)))
 (let ((?x64302 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_106) ?x64283) ?x64295) ?x64298) ?x64301)))
 (let ((?x65297 (- (- (+ (+ (+ (+ (+ ?x64302 ?x64312) ?x64315) ?x64318) ?x64321) ?x64326) ?x65295) ?x63532)))
 (= (+ (+ ?x65297 ?x63534) ?x63536) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63560 (* ?x63442 l_0_11_68)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63558 (* ?x63439 l_0_11_67)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63551 (* ?x63550 l_0_11_3)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65325 (* ?x63470 l_0_11_22)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65323 (* ?x64325 l_0_11_161)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65321 (* ?x64320 l_0_11_160)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65319 (* ?x64317 l_0_11_159)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65317 (* ?x64314 l_0_11_158)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65315 (* ?x64311 l_0_11_157)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65313 (* ?x64300 l_0_11_116)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65311 (* ?x64297 l_0_11_115)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65309 (* ?x64286 l_0_11_114)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65307 (* ?x64281 l_0_11_113)))
 (let ((?x65314 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_112) ?x65307) ?x65309) ?x65311) ?x65313)))
 (let ((?x65324 (+ (+ (+ (+ (+ ?x65314 ?x65315) ?x65317) ?x65319) ?x65321) ?x65323)))
 (= (+ (+ (- (- ?x65324 ?x65325) ?x63551) ?x63558) ?x63560) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63579 (* ?x63442 l_0_11_75)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63577 (* ?x63439 l_0_11_74)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63575 (* ?x63436 l_0_11_30)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65376 (* ?x63470 l_0_11_29)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65374 (* ?x64325 l_0_11_168)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65372 (* ?x64320 l_0_11_167)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65370 (* ?x64317 l_0_11_166)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65368 (* ?x64314 l_0_11_165)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65366 (* ?x64311 l_0_11_164)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65364 (* ?x64300 l_0_11_123)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65362 (* ?x64297 l_0_11_122)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65360 (* ?x64286 l_0_11_121)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65358 (* ?x64281 l_0_11_120)))
 (let ((?x65365 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_119) ?x65358) ?x65360) ?x65362) ?x65364)))
 (let ((?x65375 (+ (+ (+ (+ (+ ?x65365 ?x65366) ?x65368) ?x65370) ?x65372) ?x65374)))
 (= (+ (+ (- (- ?x65375 ?x65376) ?x63575) ?x63577) ?x63579) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63612 (* ?x63442 l_0_11_83)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63610 (* ?x63439 l_0_11_82)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63608 (* ?x63436 l_0_11_38)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63606 (* ?x63470 l_0_11_37)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65440 (* ?x64325 l_0_11_176)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65438 (* ?x64320 l_0_11_175)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65436 (* ?x64317 l_0_11_174)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65434 (* ?x64314 l_0_11_173)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65432 (* ?x64311 l_0_11_172)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65430 (* ?x64300 l_0_11_131)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65428 (* ?x64297 l_0_11_130)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65426 (* ?x64286 l_0_11_129)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65424 (* ?x64281 l_0_11_128)))
 (let ((?x65431 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_127) ?x65424) ?x65426) ?x65428) ?x65430)))
 (let ((?x65441 (+ (+ (+ (+ (+ ?x65431 ?x65432) ?x65434) ?x65436) ?x65438) ?x65440)))
 (= (+ (+ (- (- ?x65441 ?x63606) ?x63608) ?x63610) ?x63612) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x63644 (* l_0_11_6 l_0_11_6)))
 (let ((?x63642 (* l_0_11_51 l_0_11_51)))
 (let ((?x63640 (* l_0_11_50 l_0_11_50)))
 (let ((?x63638 (* l_0_11_5 l_0_11_5)))
 (let ((?x63641 (+ (- (+ (* (- l_0_11_4) l_0_11_4) (* l_0_11_49 l_0_11_49)) ?x63638) ?x63640)))
 (= (- (+ ?x63641 ?x63642) ?x63644) 0.0)))))))
(assert
 (let ((?x63674 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63671 (* ?x63670 l_0_11_54)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63668 (* ?x63667 l_0_11_53)))
 (let ((?x63665 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63662 (* ?x63661 l_0_11_52)))
 (let ((?x63672 (+ (+ (- (+ (* (* (- 2.0) l_0_11_4) l_0_11_7) ?x63662) ?x63665) ?x63668) ?x63671)))
 (= (- ?x63672 ?x63674) 0.0)))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63704 (* ?x63670 l_0_11_58)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63702 (* ?x63667 l_0_11_57)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63700 (* ?x63661 l_0_11_56)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63698 (* ?x63697 l_0_11_6)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63695 (* ?x63511 l_0_11_5)))
 (let ((?x63703 (+ (+ (- (- (* (* (- 2.0) l_0_11_11) l_0_11_4) ?x63695) ?x63698) ?x63700) ?x63702)))
 (= (+ ?x63703 ?x63704) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63730 (* ?x63670 l_0_11_63)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63728 (* ?x63667 l_0_11_62)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63726 (* ?x63661 l_0_11_61)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63718 (* ?x63106 l_0_11_6)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x53129 (* ?x63103 l_0_11_5)))
 (let ((?x63729 (+ (+ (- (- (* (* (- 2.0) l_0_11_16) l_0_11_4) ?x53129) ?x63718) ?x63726) ?x63728)))
 (= (+ ?x63729 ?x63730) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63746 (* ?x63670 l_0_11_69)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63744 (* ?x63667 l_0_11_68)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x28957 (* ?x63661 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x39773 (* ?x53131 l_0_11_6)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x53119 (* ?x63550 l_0_11_5)))
 (let ((?x63745 (+ (+ (- (- (* (* (- 2.0) l_0_11_22) l_0_11_4) ?x53119) ?x39773) ?x28957) ?x63744)))
 (= (+ ?x63745 ?x63746) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63777 (* ?x63670 l_0_11_76)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63775 (* ?x63667 l_0_11_75)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63773 (* ?x63661 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x63771 (* ?x63770 l_0_11_6)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63762 (* ?x63761 l_0_11_5)))
 (let ((?x63776 (+ (+ (- (- (* (* (- 2.0) l_0_11_29) l_0_11_4) ?x63762) ?x63771) ?x63773) ?x63775)))
 (= (+ ?x63776 ?x63777) 0.0)))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63823 (* ?x63670 l_0_11_84)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63821 (* ?x63667 l_0_11_83)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63819 (* ?x63661 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x63817 (* ?x63816 l_0_11_6)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x63814 (* ?x63813 l_0_11_5)))
 (let ((?x65486 (+ (+ (- (- (* (* (- 2.0) l_0_11_37) l_0_11_4) ?x63814) ?x63817) ?x63819) ?x63821)))
 (= (+ ?x65486 ?x63823) 0.0)))))))))))))
(assert
 (let ((?x63875 (* l_0_11_9 l_0_11_9)))
 (let ((?x63873 (* l_0_11_8 l_0_11_8)))
 (let ((?x63871 (* l_0_11_7 l_0_11_7)))
 (let ((?x63869 (* l_0_11_55 l_0_11_55)))
 (let ((?x63867 (* l_0_11_54 l_0_11_54)))
 (let ((?x63865 (* l_0_11_53 l_0_11_53)))
 (let ((?x63866 (+ (+ (* (- l_0_11_10) l_0_11_10) (* l_0_11_52 l_0_11_52)) ?x63865)))
 (= (- (- (- (+ (+ ?x63866 ?x63867) ?x63869) ?x63871) ?x63873) ?x63875) 0.0)))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63914 (* ?x63913 l_0_11_59)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63911 (* ?x63910 l_0_11_58)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63908 (* ?x63907 l_0_11_57)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63905 (* ?x63904 l_0_11_56)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63896 (* ?x63697 l_0_11_9)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63894 (* ?x63511 l_0_11_8)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x63892 (* ?x63891 l_0_11_7)))
 (let ((?x63897 (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_14) ?x63892) ?x63894) ?x63896)))
 (= (+ (+ (+ (+ ?x63897 ?x63905) ?x63908) ?x63911) ?x63914) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63943 (* ?x63913 l_0_11_64)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63941 (* ?x63910 l_0_11_63)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63939 (* ?x63907 l_0_11_62)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x42056 (* ?x63904 l_0_11_61)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x42079 (* ?x63106 l_0_11_9)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x40867 (* ?x63103 l_0_11_8)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x53235 (* ?x63096 l_0_11_7)))
 (let ((?x40647 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_19) ?x53235) ?x40867) ?x42079) ?x42056)))
 (= (+ (+ (+ ?x40647 ?x63939) ?x63941) ?x63943) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63977 (* ?x63913 l_0_11_70)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63975 (* ?x63910 l_0_11_69)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63973 (* ?x63907 l_0_11_68)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63971 (* ?x63904 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x63969 (* ?x53131 l_0_11_9)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63960 (* ?x63550 l_0_11_8)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x63957 (* ?x53274 l_0_11_7)))
 (let ((?x63972 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_25) ?x63957) ?x63960) ?x63969) ?x63971)))
 (= (+ (+ (+ ?x63972 ?x63973) ?x63975) ?x63977) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64012 (* ?x63913 l_0_11_77)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64010 (* ?x63910 l_0_11_76)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64008 (* ?x63907 l_0_11_75)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64006 (* ?x63904 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64004 (* ?x63770 l_0_11_9)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63995 (* ?x63761 l_0_11_8)))
 (let ((?x53283 (* 2.0 l_0_11_29)))
 (let ((?x63992 (* ?x53283 l_0_11_7)))
 (let ((?x64007 (+ (- (- (- (* (* (- 2.0) l_0_11_10) l_0_11_32) ?x63992) ?x63995) ?x64004) ?x64006)))
 (= (+ (+ (+ ?x64007 ?x64008) ?x64010) ?x64012) 0.0)))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64075 (* ?x63913 l_0_11_85)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64073 (* ?x63910 l_0_11_84)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64071 (* ?x63907 l_0_11_83)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64069 (* ?x63904 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x64067 (* ?x63816 l_0_11_9)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x64065 (* ?x63813 l_0_11_8)))
 (let ((?x63810 (* 2.0 l_0_11_37)))
 (let ((?x64063 (* ?x63810 l_0_11_7)))
 (let ((?x63889 (* (- 2.0) l_0_11_10)))
 (let ((?x64031 (* ?x63889 l_0_11_40)))
 (let ((?x65508 (+ (+ (+ (+ (- (- (- ?x64031 ?x64063) ?x64065) ?x64067) ?x64069) ?x64071) ?x64073) ?x64075)))
 (= ?x65508 0.0)))))))))))))))))))
(assert
 (let ((?x64128 (* l_0_11_60 l_0_11_60)))
 (let ((?x64126 (* l_0_11_59 l_0_11_59)))
 (let ((?x64124 (* l_0_11_58 l_0_11_58)))
 (let ((?x64122 (* l_0_11_57 l_0_11_57)))
 (let ((?x64120 (* l_0_11_56 l_0_11_56)))
 (let ((?x64118 (* l_0_11_15 l_0_11_15)))
 (let ((?x64116 (* l_0_11_14 l_0_11_14)))
 (let ((?x64114 (* l_0_11_13 l_0_11_13)))
 (let ((?x64115 (- (- (* (- l_0_11_11) l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x64114)))
 (let ((?x64129 (+ (+ (+ (+ (+ (- (- ?x64115 ?x64116) ?x64118) ?x64120) ?x64122) ?x64124) ?x64126) ?x64128)))
 (= ?x64129 0.0))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64175 (* ?x64174 l_0_11_65)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64172 (* ?x64171 l_0_11_64)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64169 (* ?x64168 l_0_11_63)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64166 (* ?x64165 l_0_11_62)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64163 (* ?x64162 l_0_11_61)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64160 (* ?x64159 l_0_11_20)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64157 (* ?x64156 l_0_11_19)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64154 (* ?x63697 l_0_11_18)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64152 (* ?x63511 l_0_11_17)))
 (let ((?x64161 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_16) ?x64152) ?x64154) ?x64157) ?x64160)))
 (= (+ (+ (+ (+ (+ ?x64161 ?x64163) ?x64166) ?x64169) ?x64172) ?x64175) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64219 (* ?x64174 l_0_11_71)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64217 (* ?x64171 l_0_11_70)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64215 (* ?x64168 l_0_11_69)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64213 (* ?x64165 l_0_11_68)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64211 (* ?x64162 l_0_11_67)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64209 (* ?x64159 l_0_11_26)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64199 (* ?x64156 l_0_11_25)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64196 (* ?x63697 l_0_11_24)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x53406 (* ?x63511 l_0_11_23)))
 (let ((?x64210 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_22) ?x53406) ?x64196) ?x64199) ?x64209)))
 (= (+ (+ (+ (+ (+ ?x64210 ?x64211) ?x64213) ?x64215) ?x64217) ?x64219) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64257 (* ?x64174 l_0_11_78)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64255 (* ?x64171 l_0_11_77)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64253 (* ?x64168 l_0_11_76)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64251 (* ?x64165 l_0_11_75)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64249 (* ?x64162 l_0_11_74)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64247 (* ?x64159 l_0_11_33)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64245 (* ?x64156 l_0_11_32)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64243 (* ?x63697 l_0_11_31)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64241 (* ?x63511 l_0_11_30)))
 (let ((?x64248 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_29) ?x64241) ?x64243) ?x64245) ?x64247)))
 (= (+ (+ (+ (+ (+ ?x64248 ?x64249) ?x64251) ?x64253) ?x64255) ?x64257) 0.0)))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64336 (* ?x64174 l_0_11_86)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64334 (* ?x64171 l_0_11_85)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64332 (* ?x64168 l_0_11_84)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64330 (* ?x64165 l_0_11_83)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64328 (* ?x64162 l_0_11_82)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64323 (* ?x64159 l_0_11_41)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64309 (* ?x64156 l_0_11_40)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64307 (* ?x63697 l_0_11_39)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64305 (* ?x63511 l_0_11_38)))
 (let ((?x65522 (- (- (- (- (* (* (- 2.0) l_0_11_11) l_0_11_37) ?x64305) ?x64307) ?x64309) ?x64323)))
 (= (+ (+ (+ (+ (+ ?x65522 ?x64328) ?x64330) ?x64332) ?x64334) ?x64336) 0.0)))))))))))))))))))))
(assert
 (let ((?x64425 (* l_0_11_66 l_0_11_66)))
 (let ((?x64423 (* l_0_11_65 l_0_11_65)))
 (let ((?x64421 (* l_0_11_64 l_0_11_64)))
 (let ((?x64419 (* l_0_11_63 l_0_11_63)))
 (let ((?x64417 (* l_0_11_62 l_0_11_62)))
 (let ((?x64415 (* l_0_11_61 l_0_11_61)))
 (let ((?x64413 (* l_0_11_21 l_0_11_21)))
 (let ((?x64411 (* l_0_11_20 l_0_11_20)))
 (let ((?x64396 (* l_0_11_19 l_0_11_19)))
 (let ((?x64393 (* l_0_11_18 l_0_11_18)))
 (let ((?x64395 (- (- (* (- l_0_11_16) l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64393)))
 (let ((?x64422 (+ (+ (+ (+ (- (- (- ?x64395 ?x64396) ?x64411) ?x64413) ?x64415) ?x64417) ?x64419) ?x64421)))
 (= (+ (+ ?x64422 ?x64423) ?x64425) 0.0))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64491 (* ?x63153 l_0_11_79)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64489 (* ?x63150 l_0_11_78)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64487 (* ?x63147 l_0_11_77)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64485 (* ?x63144 l_0_11_76)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64483 (* ?x63141 l_0_11_75)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64481 (* ?x63138 l_0_11_74)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64479 (* ?x63115 l_0_11_34)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64477 (* ?x63112 l_0_11_33)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64475 (* ?x63109 l_0_11_32)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64473 (* ?x63106 l_0_11_31)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64471 (* ?x63103 l_0_11_30)))
 (let ((?x64478 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_29) ?x64471) ?x64473) ?x64475) ?x64477)))
 (let ((?x64492 (+ (+ (+ (+ (+ (+ (- ?x64478 ?x64479) ?x64481) ?x64483) ?x64485) ?x64487) ?x64489) ?x64491)))
 (= ?x64492 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64560 (* ?x63153 l_0_11_87)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64558 (* ?x63150 l_0_11_86)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64556 (* ?x63147 l_0_11_85)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64554 (* ?x63144 l_0_11_84)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64552 (* ?x63141 l_0_11_83)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64550 (* ?x63138 l_0_11_82)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64548 (* ?x63115 l_0_11_42)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64546 (* ?x63112 l_0_11_41)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64544 (* ?x63109 l_0_11_40)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64542 (* ?x63106 l_0_11_39)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64540 (* ?x63103 l_0_11_38)))
 (let ((?x65548 (- (- (- (- (* (* (- 2.0) l_0_11_16) l_0_11_37) ?x64540) ?x64542) ?x64544) ?x64546)))
 (let ((?x65555 (+ (+ (+ (+ (+ (+ (- ?x65548 ?x64548) ?x64550) ?x64552) ?x64554) ?x64556) ?x64558) ?x64560)))
 (= ?x65555 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64640 (* l_0_11_73 l_0_11_73)))
 (let ((?x64638 (* l_0_11_72 l_0_11_72)))
 (let ((?x64636 (* l_0_11_71 l_0_11_71)))
 (let ((?x64634 (* l_0_11_70 l_0_11_70)))
 (let ((?x64632 (* l_0_11_69 l_0_11_69)))
 (let ((?x64630 (* l_0_11_68 l_0_11_68)))
 (let ((?x64628 (* l_0_11_67 l_0_11_67)))
 (let ((?x64626 (* l_0_11_28 l_0_11_28)))
 (let ((?x64624 (* l_0_11_27 l_0_11_27)))
 (let ((?x64622 (* l_0_11_26 l_0_11_26)))
 (let ((?x64620 (* l_0_11_25 l_0_11_25)))
 (let ((?x64618 (* l_0_11_24 l_0_11_24)))
 (let ((?x64619 (- (- (* (- l_0_11_22) l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64618)))
 (let ((?x64633 (+ (+ (+ (- (- (- (- ?x64619 ?x64620) ?x64622) ?x64624) ?x64626) ?x64628) ?x64630) ?x64632)))
 (= (+ (+ (+ (+ ?x64633 ?x64634) ?x64636) ?x64638) ?x64640) 0.0))))))))))))))))
(assert
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64706 (* ?x64705 l_0_11_80)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64703 (* ?x64702 l_0_11_79)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64700 (* ?x64699 l_0_11_78)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64697 (* ?x64696 l_0_11_77)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64694 (* ?x64693 l_0_11_76)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64691 (* ?x64690 l_0_11_75)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64688 (* ?x64687 l_0_11_74)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64685 (* ?x64684 l_0_11_35)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64682 (* ?x64681 l_0_11_34)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64679 (* ?x64678 l_0_11_33)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64676 (* ?x64675 l_0_11_32)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64673 (* ?x53131 l_0_11_31)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64671 (* ?x63550 l_0_11_30)))
 (let ((?x64680 (- (- (- (- (* (* (- 2.0) l_0_11_22) l_0_11_29) ?x64671) ?x64673) ?x64676) ?x64679)))
 (let ((?x64701 (+ (+ (+ (+ (+ (- (- ?x64680 ?x64682) ?x64685) ?x64688) ?x64691) ?x64694) ?x64697) ?x64700)))
 (= (+ (+ ?x64701 ?x64703) ?x64706) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64778 (* ?x64705 l_0_11_88)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64776 (* ?x64702 l_0_11_87)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64774 (* ?x64699 l_0_11_86)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64772 (* ?x64696 l_0_11_85)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64770 (* ?x64693 l_0_11_84)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64768 (* ?x64690 l_0_11_83)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64766 (* ?x64687 l_0_11_82)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64764 (* ?x64684 l_0_11_43)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64762 (* ?x64681 l_0_11_42)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64760 (* ?x64678 l_0_11_41)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64748 (* ?x64675 l_0_11_40)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64744 (* ?x53131 l_0_11_39)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64740 (* ?x63550 l_0_11_38)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x64736 (* ?x53274 l_0_11_37)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x65148 (* ?x64060 l_0_11_149)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x65146 (* ?x64057 l_0_11_148)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x65144 (* ?x64054 l_0_11_147)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x65142 (* ?x64051 l_0_11_146)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x16131 (* ?x64286 l_0_11_99)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42378 (* ?x64281 l_0_11_98)))
 (let ((?x42342 (* 2.0 l_0_11_101)))
 (let ((?x16110 (* ?x42342 l_0_11_97)))
 (let ((?x65246 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_104) ?x16110) ?x42378) ?x16131) ?x65142)))
 (let ((?x65249 (+ (+ (+ ?x65246 ?x65144) ?x65146) ?x65148)))
 (let ((?x30024 (- (- (- (- (- (- (- ?x65249 ?x64736) ?x64740) ?x64744) ?x64748) ?x64760) ?x64762) ?x64764)))
 (let ((?x65570 (+ (+ (+ (+ (+ (+ (+ ?x30024 ?x64766) ?x64768) ?x64770) ?x64772) ?x64774) ?x64776) ?x64778)))
 (= ?x65570 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64835 (* l_0_11_81 l_0_11_81)))
 (let ((?x64833 (* l_0_11_80 l_0_11_80)))
 (let ((?x64831 (* l_0_11_79 l_0_11_79)))
 (let ((?x64829 (* l_0_11_78 l_0_11_78)))
 (let ((?x64827 (* l_0_11_77 l_0_11_77)))
 (let ((?x64825 (* l_0_11_76 l_0_11_76)))
 (let ((?x64823 (* l_0_11_75 l_0_11_75)))
 (let ((?x64821 (* l_0_11_74 l_0_11_74)))
 (let ((?x64819 (* l_0_11_36 l_0_11_36)))
 (let ((?x64817 (* l_0_11_35 l_0_11_35)))
 (let ((?x64815 (* l_0_11_34 l_0_11_34)))
 (let ((?x64813 (* l_0_11_33 l_0_11_33)))
 (let ((?x42273 (* l_0_11_32 l_0_11_32)))
 (let ((?x42271 (* l_0_11_31 l_0_11_31)))
 (let ((?x53553 (- (- (* (- l_0_11_29) l_0_11_29) (* l_0_11_30 l_0_11_30)) ?x42271)))
 (let ((?x64824 (+ (+ (- (- (- (- (- ?x53553 ?x42273) ?x64813) ?x64815) ?x64817) ?x64819) ?x64821) ?x64823)))
 (= (+ (+ (+ (+ (+ (+ ?x64824 ?x64825) ?x64827) ?x64829) ?x64831) ?x64833) ?x64835) 0.0))))))))))))))))))
(assert
 (let ((?x64925 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64922 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64919 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64916 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64913 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64910 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64907 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64904 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64901 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64898 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64895 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64892 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64889 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64886 (* ?x63770 l_0_11_39)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x64884 (* ?x63761 l_0_11_38)))
 (let ((?x29852 (- (- (- (- (* (* (- 2.0) l_0_11_29) l_0_11_37) ?x64884) ?x64886) ?x64889) ?x64892)))
 (let ((?x42564 (+ (+ (+ (+ (- (- (- ?x29852 ?x64895) ?x64898) ?x64901) ?x64904) ?x64907) ?x64910) ?x64913)))
 (= (+ (+ (+ (+ ?x42564 ?x64916) ?x64919) ?x64922) ?x64925) 0.0)))))))))))))))))))))
(assert
 (let ((?x65037 (* l_0_11_90 l_0_11_90)))
 (let ((?x65035 (* l_0_11_89 l_0_11_89)))
 (let ((?x65033 (* l_0_11_88 l_0_11_88)))
 (let ((?x65031 (* l_0_11_87 l_0_11_87)))
 (let ((?x65029 (* l_0_11_86 l_0_11_86)))
 (let ((?x65027 (* l_0_11_85 l_0_11_85)))
 (let ((?x65025 (* l_0_11_84 l_0_11_84)))
 (let ((?x65023 (* l_0_11_83 l_0_11_83)))
 (let ((?x65021 (* l_0_11_82 l_0_11_82)))
 (let ((?x65019 (* l_0_11_45 l_0_11_45)))
 (let ((?x65017 (* l_0_11_44 l_0_11_44)))
 (let ((?x65015 (* l_0_11_43 l_0_11_43)))
 (let ((?x65013 (* l_0_11_42 l_0_11_42)))
 (let ((?x65011 (* l_0_11_41 l_0_11_41)))
 (let ((?x65009 (* l_0_11_40 l_0_11_40)))
 (let ((?x65007 (* l_0_11_39 l_0_11_39)))
 (let ((?x65609 (- (- (* (- l_0_11_37) l_0_11_37) (* l_0_11_38 l_0_11_38)) ?x65007)))
 (let ((?x65616 (+ (- (- (- (- (- (- ?x65609 ?x65009) ?x65011) ?x65013) ?x65015) ?x65017) ?x65019) ?x65021)))
 (let ((?x65623 (+ (+ (+ (+ (+ (+ (+ ?x65616 ?x65023) ?x65025) ?x65027) ?x65029) ?x65031) ?x65033) ?x65035)))
 (= (+ ?x65623 ?x65037) 0.0)))))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63090 (* ?x63089 l_0_11_47)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x16508 (* ?x53770 l_0_11_227)))
 (let ((?x30169 (- (* (* 2.0 l_0_11_1) l_0_11_2) (* (* 2.0 l_0_11_182) l_0_11_184))))
 (let ((?x16469 (- (+ (- ?x30169 (* (* 2.0 l_0_11_183) l_0_11_185)) ?x16508) (* (* 2.0 l_0_11_272) l_0_11_274))))
 (let ((?x65628 (- (- ?x16469 (* (* 2.0 l_0_11_273) l_0_11_275)) (* (* 2.0 l_0_11_317) l_0_11_319))))
 (let ((?x65632 (- (- ?x65628 (* (* 2.0 l_0_11_318) l_0_11_320)) (* (* 2.0 l_0_11_362) l_0_11_364))))
 (= (- (- ?x65632 (* (* 2.0 l_0_11_363) l_0_11_365)) ?x63090) 0.0))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63136 (* ?x63089 l_0_11_49)))
 (let ((?x65695 (* l_0_11_366 l_0_11_366)))
 (let ((?x65693 (* l_0_11_365 l_0_11_365)))
 (let ((?x65691 (* l_0_11_364 l_0_11_364)))
 (let ((?x65689 (* l_0_11_321 l_0_11_321)))
 (let ((?x65687 (* l_0_11_320 l_0_11_320)))
 (let ((?x65685 (* l_0_11_319 l_0_11_319)))
 (let ((?x65683 (* l_0_11_276 l_0_11_276)))
 (let ((?x65681 (* l_0_11_275 l_0_11_275)))
 (let ((?x65679 (* l_0_11_274 l_0_11_274)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65677 (* ?x53770 l_0_11_229)))
 (let ((?x65670 (- (* (* 2.0 l_0_11_1) l_0_11_4) (* (* 1.0 l_0_11_184) l_0_11_184))))
 (let ((?x65676 (- (- ?x65670 (* (* 1.0 l_0_11_185) l_0_11_185)) (* (* 1.0 l_0_11_186) l_0_11_186))))
 (let ((?x65690 (- (- (- (- (- (- (+ ?x65676 ?x65677) ?x65679) ?x65681) ?x65683) ?x65685) ?x65687) ?x65689)))
 (= (- (- (- (- ?x65690 ?x65691) ?x65693) ?x65695) ?x63136) 0.0))))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63230 (* ?x63089 l_0_11_52)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65736 (* ?x53770 l_0_11_232)))
 (let ((?x65729 (- (* (* 2.0 l_0_11_1) l_0_11_7) (* (* 2.0 l_0_11_184) l_0_11_187))))
 (let ((?x65735 (- (- ?x65729 (* (* 2.0 l_0_11_185) l_0_11_188)) (* (* 2.0 l_0_11_186) l_0_11_189))))
 (let ((?x65743 (- (- (+ ?x65735 ?x65736) (* (* 2.0 l_0_11_274) l_0_11_277)) (* (* 2.0 l_0_11_275) l_0_11_278))))
 (let ((?x65749 (- (- ?x65743 (* (* 2.0 l_0_11_276) l_0_11_279)) (* (* 2.0 l_0_11_319) l_0_11_322))))
 (let ((?x65755 (- (- ?x65749 (* (* 2.0 l_0_11_320) l_0_11_323)) (* (* 2.0 l_0_11_321) l_0_11_324))))
 (let ((?x65761 (- (- ?x65755 (* (* 2.0 l_0_11_364) l_0_11_367)) (* (* 2.0 l_0_11_365) l_0_11_368))))
 (= (- (- ?x65761 (* (* 2.0 l_0_11_366) l_0_11_369)) ?x63230) 0.0))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63236 (* ?x63089 l_0_11_56)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65815 (* ?x53770 l_0_11_236)))
 (let ((?x65810 (- (* (* 2.0 l_0_11_1) l_0_11_11) (* (* 2.0 l_0_11_184) l_0_11_191))))
 (let ((?x65814 (- (- ?x65810 (* (* 2.0 l_0_11_185) l_0_11_192)) (* (* 2.0 l_0_11_186) l_0_11_193))))
 (let ((?x65820 (- (- (+ ?x65814 ?x65815) (* (* 2.0 l_0_11_274) l_0_11_281)) (* (* 2.0 l_0_11_275) l_0_11_282))))
 (let ((?x65824 (- (- ?x65820 (* (* 2.0 l_0_11_276) l_0_11_283)) (* (* 2.0 l_0_11_319) l_0_11_326))))
 (let ((?x65828 (- (- ?x65824 (* (* 2.0 l_0_11_320) l_0_11_327)) (* (* 2.0 l_0_11_321) l_0_11_328))))
 (let ((?x65832 (- (- ?x65828 (* (* 2.0 l_0_11_364) l_0_11_371)) (* (* 2.0 l_0_11_365) l_0_11_372))))
 (= (- (- ?x65832 (* (* 2.0 l_0_11_366) l_0_11_373)) ?x63236) 0.0))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63246 (* ?x63089 l_0_11_61)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65887 (* ?x53770 l_0_11_241)))
 (let ((?x65882 (- (* (* 2.0 l_0_11_1) l_0_11_16) (* (* 2.0 l_0_11_184) l_0_11_196))))
 (let ((?x65886 (- (- ?x65882 (* (* 2.0 l_0_11_185) l_0_11_197)) (* (* 2.0 l_0_11_186) l_0_11_198))))
 (let ((?x65892 (- (- (+ ?x65886 ?x65887) (* (* 2.0 l_0_11_274) l_0_11_286)) (* (* 2.0 l_0_11_275) l_0_11_287))))
 (let ((?x65896 (- (- ?x65892 (* (* 2.0 l_0_11_276) l_0_11_288)) (* (* 2.0 l_0_11_319) l_0_11_331))))
 (let ((?x65900 (- (- ?x65896 (* (* 2.0 l_0_11_320) l_0_11_332)) (* (* 2.0 l_0_11_321) l_0_11_333))))
 (let ((?x65904 (- (- ?x65900 (* (* 2.0 l_0_11_364) l_0_11_376)) (* (* 2.0 l_0_11_365) l_0_11_377))))
 (= (- (- ?x65904 (* (* 2.0 l_0_11_366) l_0_11_378)) ?x63246) 0.0))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63256 (* ?x63089 l_0_11_67)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65969 (* ?x53770 l_0_11_247)))
 (let ((?x65964 (- (* (* 2.0 l_0_11_1) l_0_11_22) (* (* 2.0 l_0_11_184) l_0_11_202))))
 (let ((?x65968 (- (- ?x65964 (* (* 2.0 l_0_11_185) l_0_11_203)) (* (* 2.0 l_0_11_186) l_0_11_204))))
 (let ((?x65974 (- (- (+ ?x65968 ?x65969) (* (* 2.0 l_0_11_274) l_0_11_292)) (* (* 2.0 l_0_11_275) l_0_11_293))))
 (let ((?x65978 (- (- ?x65974 (* (* 2.0 l_0_11_276) l_0_11_294)) (* (* 2.0 l_0_11_319) l_0_11_337))))
 (let ((?x65982 (- (- ?x65978 (* (* 2.0 l_0_11_320) l_0_11_338)) (* (* 2.0 l_0_11_321) l_0_11_339))))
 (let ((?x65986 (- (- ?x65982 (* (* 2.0 l_0_11_364) l_0_11_382)) (* (* 2.0 l_0_11_365) l_0_11_383))))
 (= (- (- ?x65986 (* (* 2.0 l_0_11_366) l_0_11_384)) ?x63256) 0.0))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x66078 (* ?x66077 l_0_11_94)))
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63312 (* ?x63089 l_0_11_74)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x66056 (* ?x53770 l_0_11_254)))
 (let ((?x65677 (* ?x53770 l_0_11_229)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x66047 (* ?x63397 l_0_11_139)))
 (let ((?x66050 (- (- (* (* 2.0 l_0_11_1) l_0_11_29) ?x66047) (* (* 2.0 l_0_11_184) l_0_11_209))))
 (let ((?x66054 (- (- ?x66050 (* (* 2.0 l_0_11_185) l_0_11_210)) (* (* 2.0 l_0_11_186) l_0_11_211))))
 (let ((?x66061 (- (- (+ (- ?x66054 ?x65677) ?x66056) (* (* 2.0 l_0_11_274) l_0_11_299)) (* (* 2.0 l_0_11_275) l_0_11_300))))
 (let ((?x66065 (- (- ?x66061 (* (* 2.0 l_0_11_276) l_0_11_301)) (* (* 2.0 l_0_11_319) l_0_11_344))))
 (let ((?x66069 (- (- ?x66065 (* (* 2.0 l_0_11_320) l_0_11_345)) (* (* 2.0 l_0_11_321) l_0_11_346))))
 (let ((?x66073 (- (- ?x66069 (* (* 2.0 l_0_11_364) l_0_11_389)) (* (* 2.0 l_0_11_365) l_0_11_390))))
 (= (+ (- (- ?x66073 (* (* 2.0 l_0_11_366) l_0_11_391)) ?x63312) ?x66078) 0.0)))))))))))))))))
(assert
 (let ((?x63089 (* 2.0 l_0_11_46)))
 (let ((?x63400 (* ?x63089 l_0_11_82)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x66140 (* ?x53770 l_0_11_262)))
 (let ((?x66135 (- (* (* 2.0 l_0_11_1) l_0_11_37) (* (* 2.0 l_0_11_184) l_0_11_217))))
 (let ((?x66139 (- (- ?x66135 (* (* 2.0 l_0_11_185) l_0_11_218)) (* (* 2.0 l_0_11_186) l_0_11_219))))
 (let ((?x66145 (- (- (+ ?x66139 ?x66140) (* (* 2.0 l_0_11_274) l_0_11_307)) (* (* 2.0 l_0_11_275) l_0_11_308))))
 (let ((?x66149 (- (- ?x66145 (* (* 2.0 l_0_11_276) l_0_11_309)) (* (* 2.0 l_0_11_319) l_0_11_352))))
 (let ((?x66153 (- (- ?x66149 (* (* 2.0 l_0_11_320) l_0_11_353)) (* (* 2.0 l_0_11_321) l_0_11_354))))
 (let ((?x66157 (- (- ?x66153 (* (* 2.0 l_0_11_364) l_0_11_397)) (* (* 2.0 l_0_11_365) l_0_11_398))))
 (= (- (- ?x66157 (* (* 2.0 l_0_11_366) l_0_11_399)) ?x63400) 0.0))))))))))))
(assert
 (let ((?x63424 (* l_0_11_48 l_0_11_48)))
 (let ((?x63422 (* l_0_11_47 l_0_11_47)))
 (let ((?x63415 (* l_0_11_3 l_0_11_3)))
 (let ((?x42960 (* l_0_11_228 l_0_11_228)))
 (let ((?x42995 (+ (+ (+ (* l_0_11_2 l_0_11_2) (* l_0_11_227 l_0_11_227)) ?x42960) ?x63415)))
 (= (- (- ?x42995 ?x63422) ?x63424) 0.0)))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63443 (* ?x63442 l_0_11_50)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63440 (* ?x63439 l_0_11_49)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63437 (* ?x63436 l_0_11_5)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66213 (* ?x66212 l_0_11_230)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66210 (* ?x66209 l_0_11_229)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65217 (* ?x63470 l_0_11_4)))
 (= (- (- (+ (+ (+ ?x65217 ?x66210) ?x66213) ?x63437) ?x63440) ?x63443) 0.0))))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x66078 (* ?x66077 l_0_11_94)))
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63477 (* ?x63442 l_0_11_53)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63475 (* ?x63439 l_0_11_52)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63473 (* ?x63436 l_0_11_8)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66235 (* ?x66212 l_0_11_233)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66233 (* ?x66209 l_0_11_232)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63471 (* ?x63470 l_0_11_7)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x66047 (* ?x63397 l_0_11_139)))
 (let ((?x66240 (- (- (- (+ (+ (+ (+ ?x66047 ?x63471) ?x66233) ?x66235) ?x63473) ?x63475) ?x63477) ?x66078)))
 (= ?x66240 0.0)))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63516 (* ?x63442 l_0_11_57)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63514 (* ?x63439 l_0_11_56)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66259 (* ?x66212 l_0_11_237)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66257 (* ?x66209 l_0_11_236)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63512 (* ?x63511 l_0_11_3)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x65264 (* ?x63891 l_0_11_2)))
 (= (- (- (+ (+ (+ ?x65264 ?x63512) ?x66257) ?x66259) ?x63514) ?x63516) 0.0))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63536 (* ?x63442 l_0_11_62)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63534 (* ?x63439 l_0_11_61)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66280 (* ?x66212 l_0_11_242)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66278 (* ?x66209 l_0_11_241)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x63532 (* ?x63103 l_0_11_3)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x65295 (* ?x63096 l_0_11_2)))
 (= (- (- (+ (+ (+ ?x65295 ?x63532) ?x66278) ?x66280) ?x63534) ?x63536) 0.0))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63560 (* ?x63442 l_0_11_68)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63558 (* ?x63439 l_0_11_67)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63551 (* ?x63550 l_0_11_3)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66297 (* ?x66212 l_0_11_248)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66295 (* ?x66209 l_0_11_247)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65325 (* ?x63470 l_0_11_22)))
 (= (- (- (+ (+ (+ ?x65325 ?x66295) ?x66297) ?x63551) ?x63558) ?x63560) 0.0))))))))))))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x66321 (* ?x66320 l_0_11_95)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x66318 (* ?x66317 l_0_11_94)))
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63579 (* ?x63442 l_0_11_75)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63577 (* ?x63439 l_0_11_74)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63575 (* ?x63436 l_0_11_30)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66312 (* ?x66212 l_0_11_255)))
 (let ((?x66213 (* ?x66212 l_0_11_230)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x43045 (* ?x66209 l_0_11_254)))
 (let ((?x66210 (* ?x66209 l_0_11_229)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x65376 (* ?x63470 l_0_11_29)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x17247 (* ?x63603 l_0_11_140)))
 (let ((?x53867 (+ (- (+ (- (* (* (- 2.0) l_0_11_137) l_0_11_139) ?x17247) ?x65376) ?x66210) ?x43045)))
 (let ((?x66322 (+ (+ (- (- (+ (+ (- ?x53867 ?x66213) ?x66312) ?x63575) ?x63577) ?x63579) ?x66318) ?x66321)))
 (= ?x66322 0.0))))))))))))))))))))))))
(assert
 (let ((?x63442 (* 2.0 l_0_11_48)))
 (let ((?x63612 (* ?x63442 l_0_11_83)))
 (let ((?x63439 (* 2.0 l_0_11_47)))
 (let ((?x63610 (* ?x63439 l_0_11_82)))
 (let ((?x63436 (* 2.0 l_0_11_3)))
 (let ((?x63608 (* ?x63436 l_0_11_38)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66351 (* ?x66212 l_0_11_263)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66349 (* ?x66209 l_0_11_262)))
 (let ((?x63470 (* 2.0 l_0_11_2)))
 (let ((?x63606 (* ?x63470 l_0_11_37)))
 (= (- (- (+ (+ (+ ?x63606 ?x66349) ?x66351) ?x63608) ?x63610) ?x63612) 0.0))))))))))))))
(assert
 (let ((?x63644 (* l_0_11_6 l_0_11_6)))
 (let ((?x63642 (* l_0_11_51 l_0_11_51)))
 (let ((?x63640 (* l_0_11_50 l_0_11_50)))
 (let ((?x63638 (* l_0_11_5 l_0_11_5)))
 (let ((?x63636 (* l_0_11_49 l_0_11_49)))
 (let ((?x63648 (* l_0_11_4 l_0_11_4)))
 (let ((?x66375 (* l_0_11_231 l_0_11_231)))
 (let ((?x66376 (+ (+ (* l_0_11_229 l_0_11_229) (* l_0_11_230 l_0_11_230)) ?x66375)))
 (= (+ (- (- (+ (- (+ ?x66376 ?x63648) ?x63636) ?x63638) ?x63640) ?x63642) ?x63644) 0.0))))))))))
(assert
 (let ((?x63674 (* (* 2.0 l_0_11_6) l_0_11_9)))
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63671 (* ?x63670 l_0_11_54)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63668 (* ?x63667 l_0_11_53)))
 (let ((?x63665 (* (* 2.0 l_0_11_5) l_0_11_8)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63662 (* ?x63661 l_0_11_52)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66402 (* ?x66401 l_0_11_234)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66399 (* ?x66398 l_0_11_233)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66397 (* ?x66391 l_0_11_232)))
 (let ((?x66407 (- (+ (+ (+ ?x66397 ?x66399) ?x66402) (* (* 2.0 l_0_11_4) l_0_11_7)) ?x63662)))
 (= (+ (- (- (+ ?x66407 ?x63665) ?x63668) ?x63671) ?x63674) 0.0)))))))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63704 (* ?x63670 l_0_11_58)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63702 (* ?x63667 l_0_11_57)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63700 (* ?x63661 l_0_11_56)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66438 (* ?x66401 l_0_11_238)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66436 (* ?x66398 l_0_11_237)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66434 (* ?x66391 l_0_11_236)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x63698 (* ?x63697 l_0_11_6)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x63695 (* ?x63511 l_0_11_5)))
 (let ((?x66437 (+ (+ (+ (+ (* (* 2.0 l_0_11_11) l_0_11_4) ?x63695) ?x63698) ?x66434) ?x66436)))
 (= (- (- (- (+ ?x66437 ?x66438) ?x63700) ?x63702) ?x63704) 0.0)))))))))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63730 (* ?x63670 l_0_11_63)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63728 (* ?x63667 l_0_11_62)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63726 (* ?x63661 l_0_11_61)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66456 (* ?x66401 l_0_11_243)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66454 (* ?x66398 l_0_11_242)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66452 (* ?x66391 l_0_11_241)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x63718 (* ?x63106 l_0_11_6)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x53129 (* ?x63103 l_0_11_5)))
 (let ((?x66455 (+ (+ (+ (+ (* (* 2.0 l_0_11_16) l_0_11_4) ?x53129) ?x63718) ?x66452) ?x66454)))
 (= (- (- (- (+ ?x66455 ?x66456) ?x63726) ?x63728) ?x63730) 0.0)))))))))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63746 (* ?x63670 l_0_11_69)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63744 (* ?x63667 l_0_11_68)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x28957 (* ?x63661 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x39773 (* ?x53131 l_0_11_6)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66477 (* ?x66401 l_0_11_249)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66475 (* ?x66398 l_0_11_248)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x53119 (* ?x63550 l_0_11_5)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x43127 (* ?x66391 l_0_11_247)))
 (let ((?x66478 (+ (+ (+ (+ (* (* 2.0 l_0_11_22) l_0_11_4) ?x43127) ?x53119) ?x66475) ?x66477)))
 (= (- (- (- (+ ?x66478 ?x39773) ?x28957) ?x63744) ?x63746) 0.0)))))))))))))))))))
(assert
 (let ((?x66518 (* l_0_11_96 l_0_11_96)))
 (let ((?x66516 (* l_0_11_95 l_0_11_95)))
 (let ((?x66514 (* l_0_11_94 l_0_11_94)))
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63777 (* ?x63670 l_0_11_76)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63775 (* ?x63667 l_0_11_75)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63773 (* ?x63661 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x63771 (* ?x63770 l_0_11_6)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63762 (* ?x63761 l_0_11_5)))
 (let ((?x66375 (* l_0_11_231 l_0_11_231)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66504 (* ?x66401 l_0_11_256)))
 (let ((?x66373 (* l_0_11_230 l_0_11_230)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66501 (* ?x66398 l_0_11_255)))
 (let ((?x66372 (* l_0_11_229 l_0_11_229)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66498 (* ?x66391 l_0_11_254)))
 (let ((?x66496 (* l_0_11_141 l_0_11_141)))
 (let ((?x66497 (- (- (* (- l_0_11_139) l_0_11_139) (* l_0_11_140 l_0_11_140)) ?x66496)))
 (let ((?x66508 (+ (- (+ (- (+ (- (+ ?x66497 ?x66498) ?x66372) ?x66501) ?x66373) ?x66504) ?x66375) (* (* 2.0 l_0_11_29) l_0_11_4))))
 (let ((?x66517 (+ (+ (- (- (- (+ (+ ?x66508 ?x63762) ?x63771) ?x63773) ?x63775) ?x63777) ?x66514) ?x66516)))
 (= (+ ?x66517 ?x66518) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x63670 (* 2.0 l_0_11_51)))
 (let ((?x63823 (* ?x63670 l_0_11_84)))
 (let ((?x63667 (* 2.0 l_0_11_50)))
 (let ((?x63821 (* ?x63667 l_0_11_83)))
 (let ((?x63661 (* 2.0 l_0_11_49)))
 (let ((?x63819 (* ?x63661 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x63817 (* ?x63816 l_0_11_6)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x63814 (* ?x63813 l_0_11_5)))
 (let ((?x63810 (* 2.0 l_0_11_37)))
 (let ((?x63811 (* ?x63810 l_0_11_4)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66551 (* ?x66401 l_0_11_264)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66549 (* ?x66398 l_0_11_263)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x53916 (* ?x66391 l_0_11_262)))
 (let ((?x66557 (- (- (+ (+ (+ (+ (+ ?x53916 ?x66549) ?x66551) ?x63811) ?x63814) ?x63817) ?x63819) ?x63821)))
 (= (- ?x66557 ?x63823) 0.0)))))))))))))))))))))
(assert
 (let ((?x63875 (* l_0_11_9 l_0_11_9)))
 (let ((?x63873 (* l_0_11_8 l_0_11_8)))
 (let ((?x63871 (* l_0_11_7 l_0_11_7)))
 (let ((?x63869 (* l_0_11_55 l_0_11_55)))
 (let ((?x63867 (* l_0_11_54 l_0_11_54)))
 (let ((?x63865 (* l_0_11_53 l_0_11_53)))
 (let ((?x63863 (* l_0_11_52 l_0_11_52)))
 (let ((?x66586 (* l_0_11_235 l_0_11_235)))
 (let ((?x66584 (* l_0_11_234 l_0_11_234)))
 (let ((?x66582 (* l_0_11_233 l_0_11_233)))
 (let ((?x66585 (+ (+ (+ (* l_0_11_10 l_0_11_10) (* l_0_11_232 l_0_11_232)) ?x66582) ?x66584)))
 (let ((?x66593 (+ (+ (- (- (- (- (+ ?x66585 ?x66586) ?x63863) ?x63865) ?x63867) ?x63869) ?x63871) ?x63873)))
 (= (+ ?x66593 ?x63875) 0.0))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63943 (* ?x63913 l_0_11_64)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63941 (* ?x63910 l_0_11_63)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63939 (* ?x63907 l_0_11_62)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x42056 (* ?x63904 l_0_11_61)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66623 (* ?x53661 l_0_11_244)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66621 (* ?x53663 l_0_11_243)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66619 (* ?x29503 l_0_11_242)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66617 (* ?x42329 l_0_11_241)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x42079 (* ?x63106 l_0_11_9)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x40867 (* ?x63103 l_0_11_8)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x53235 (* ?x63096 l_0_11_7)))
 (let ((?x66618 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_19) ?x53235) ?x40867) ?x42079) ?x66617)))
 (let ((?x66628 (- (- (- (- (+ (+ (+ ?x66618 ?x66619) ?x66621) ?x66623) ?x42056) ?x63939) ?x63941) ?x63943)))
 (= ?x66628 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x63977 (* ?x63913 l_0_11_70)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x63975 (* ?x63910 l_0_11_69)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x63973 (* ?x63907 l_0_11_68)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x63971 (* ?x63904 l_0_11_67)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x63969 (* ?x53131 l_0_11_9)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66651 (* ?x53661 l_0_11_250)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66649 (* ?x53663 l_0_11_249)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66647 (* ?x29503 l_0_11_248)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66645 (* ?x42329 l_0_11_247)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x63960 (* ?x63550 l_0_11_8)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x63957 (* ?x53274 l_0_11_7)))
 (let ((?x66648 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_25) ?x63957) ?x63960) ?x66645) ?x66647)))
 (let ((?x66657 (- (- (- (- (+ (+ (+ ?x66648 ?x66649) ?x66651) ?x63969) ?x63971) ?x63973) ?x63975) ?x63977)))
 (= ?x66657 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66705 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x66702 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x66699 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64012 (* ?x63913 l_0_11_77)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64010 (* ?x63910 l_0_11_76)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64008 (* ?x63907 l_0_11_75)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64006 (* ?x63904 l_0_11_74)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64004 (* ?x63770 l_0_11_9)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x63995 (* ?x63761 l_0_11_8)))
 (let ((?x53283 (* 2.0 l_0_11_29)))
 (let ((?x63992 (* ?x53283 l_0_11_7)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66689 (* ?x53661 l_0_11_257)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66687 (* ?x53663 l_0_11_256)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66685 (* ?x29503 l_0_11_255)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66683 (* ?x42329 l_0_11_254)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66402 (* ?x66401 l_0_11_234)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66399 (* ?x66398 l_0_11_233)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66397 (* ?x66391 l_0_11_232)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x66678 (* ?x63807 l_0_11_144)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x66676 (* ?x63804 l_0_11_143)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x66674 (* ?x63801 l_0_11_142)))
 (let ((?x66680 (- (- (- (- (* (* 2.0 l_0_11_10) l_0_11_32) ?x66674) ?x66676) ?x66678) ?x66397)))
 (let ((?x66691 (+ (+ (+ (+ (+ (- (- ?x66680 ?x66399) ?x66402) ?x66683) ?x66685) ?x66687) ?x66689) ?x63992)))
 (let ((?x66700 (+ (- (- (- (- (+ (+ ?x66691 ?x63995) ?x64004) ?x64006) ?x64008) ?x64010) ?x64012) ?x66699)))
 (= (+ (+ ?x66700 ?x66702) ?x66705) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63913 (* 2.0 l_0_11_55)))
 (let ((?x64075 (* ?x63913 l_0_11_85)))
 (let ((?x63910 (* 2.0 l_0_11_54)))
 (let ((?x64073 (* ?x63910 l_0_11_84)))
 (let ((?x63907 (* 2.0 l_0_11_53)))
 (let ((?x64071 (* ?x63907 l_0_11_83)))
 (let ((?x63904 (* 2.0 l_0_11_52)))
 (let ((?x64069 (* ?x63904 l_0_11_82)))
 (let ((?x63816 (* 2.0 l_0_11_39)))
 (let ((?x64067 (* ?x63816 l_0_11_9)))
 (let ((?x63813 (* 2.0 l_0_11_38)))
 (let ((?x64065 (* ?x63813 l_0_11_8)))
 (let ((?x63810 (* 2.0 l_0_11_37)))
 (let ((?x64063 (* ?x63810 l_0_11_7)))
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66744 (* ?x53661 l_0_11_265)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66742 (* ?x53663 l_0_11_264)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66740 (* ?x29503 l_0_11_263)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66738 (* ?x42329 l_0_11_262)))
 (let ((?x66745 (+ (+ (+ (+ (* (* 2.0 l_0_11_10) l_0_11_40) ?x66738) ?x66740) ?x66742) ?x66744)))
 (let ((?x66752 (- (- (- (- (+ (+ (+ ?x66745 ?x64063) ?x64065) ?x64067) ?x64069) ?x64071) ?x64073) ?x64075)))
 (= ?x66752 0.0))))))))))))))))))))))))))
(assert
 (let ((?x64128 (* l_0_11_60 l_0_11_60)))
 (let ((?x64126 (* l_0_11_59 l_0_11_59)))
 (let ((?x64124 (* l_0_11_58 l_0_11_58)))
 (let ((?x64122 (* l_0_11_57 l_0_11_57)))
 (let ((?x64120 (* l_0_11_56 l_0_11_56)))
 (let ((?x66794 (* l_0_11_240 l_0_11_240)))
 (let ((?x66792 (* l_0_11_239 l_0_11_239)))
 (let ((?x66790 (* l_0_11_238 l_0_11_238)))
 (let ((?x66788 (* l_0_11_237 l_0_11_237)))
 (let ((?x66786 (* l_0_11_236 l_0_11_236)))
 (let ((?x64118 (* l_0_11_15 l_0_11_15)))
 (let ((?x64116 (* l_0_11_14 l_0_11_14)))
 (let ((?x64114 (* l_0_11_13 l_0_11_13)))
 (let ((?x66784 (+ (+ (+ (* l_0_11_11 l_0_11_11) (* l_0_11_12 l_0_11_12)) ?x64114) ?x64116)))
 (let ((?x66796 (- (+ (+ (+ (+ (+ (+ ?x66784 ?x64118) ?x66786) ?x66788) ?x66790) ?x66792) ?x66794) ?x64120)))
 (= (- (- (- (- ?x66796 ?x64122) ?x64124) ?x64126) ?x64128) 0.0)))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64175 (* ?x64174 l_0_11_65)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64172 (* ?x64171 l_0_11_64)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64169 (* ?x64168 l_0_11_63)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64166 (* ?x64165 l_0_11_62)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64163 (* ?x64162 l_0_11_61)))
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66828 (* ?x66827 l_0_11_245)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66825 (* ?x66824 l_0_11_244)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66822 (* ?x66821 l_0_11_243)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x66819 (* ?x66818 l_0_11_242)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x66816 (* ?x66815 l_0_11_241)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64160 (* ?x64159 l_0_11_20)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64157 (* ?x64156 l_0_11_19)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64154 (* ?x63697 l_0_11_18)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64152 (* ?x63511 l_0_11_17)))
 (let ((?x66814 (+ (+ (+ (+ (* (* 2.0 l_0_11_11) l_0_11_16) ?x64152) ?x64154) ?x64157) ?x64160)))
 (let ((?x66831 (- (- (+ (+ (+ (+ (+ ?x66814 ?x66816) ?x66819) ?x66822) ?x66825) ?x66828) ?x64163) ?x64166)))
 (= (- (- (- ?x66831 ?x64169) ?x64172) ?x64175) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64219 (* ?x64174 l_0_11_71)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64217 (* ?x64171 l_0_11_70)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64215 (* ?x64168 l_0_11_69)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64213 (* ?x64165 l_0_11_68)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64211 (* ?x64162 l_0_11_67)))
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66862 (* ?x66827 l_0_11_251)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66860 (* ?x66824 l_0_11_250)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66858 (* ?x66821 l_0_11_249)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x66856 (* ?x66818 l_0_11_248)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x66854 (* ?x66815 l_0_11_247)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64209 (* ?x64159 l_0_11_26)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64199 (* ?x64156 l_0_11_25)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64196 (* ?x63697 l_0_11_24)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x53406 (* ?x63511 l_0_11_23)))
 (let ((?x66853 (+ (+ (+ (+ (* (* 2.0 l_0_11_11) l_0_11_22) ?x53406) ?x64196) ?x64199) ?x64209)))
 (let ((?x66865 (- (- (+ (+ (+ (+ (+ ?x66853 ?x66854) ?x66856) ?x66858) ?x66860) ?x66862) ?x64211) ?x64213)))
 (= (- (- (- ?x66865 ?x64215) ?x64217) ?x64219) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64257 (* ?x64174 l_0_11_78)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64255 (* ?x64171 l_0_11_77)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64253 (* ?x64168 l_0_11_76)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64251 (* ?x64165 l_0_11_75)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64249 (* ?x64162 l_0_11_74)))
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66879 (* ?x66827 l_0_11_258)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x43353 (* ?x66824 l_0_11_257)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x43356 (* ?x66821 l_0_11_256)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x43350 (* ?x66818 l_0_11_255)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x32027 (* ?x66815 l_0_11_254)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66438 (* ?x66401 l_0_11_238)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66436 (* ?x66398 l_0_11_237)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66434 (* ?x66391 l_0_11_236)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64247 (* ?x64159 l_0_11_33)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x65215 (* ?x63807 l_0_11_148)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x65213 (* ?x63804 l_0_11_147)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64245 (* ?x64156 l_0_11_32)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x29669 (* ?x63801 l_0_11_146)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64243 (* ?x63697 l_0_11_31)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64241 (* ?x63511 l_0_11_30)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x42400 (* ?x64286 l_0_11_96)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42448 (* ?x64281 l_0_11_95)))
 (let ((?x54036 (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_94) ?x42448) ?x42400) (* (* 2.0 l_0_11_11) l_0_11_29))))
 (let ((?x53996 (+ (- (- (+ (- (+ (+ ?x54036 ?x64241) ?x64243) ?x29669) ?x64245) ?x65213) ?x65215) ?x64247)))
 (let ((?x43357 (+ (+ (+ (+ (- (- (- ?x53996 ?x66434) ?x66436) ?x66438) ?x32027) ?x43350) ?x43356) ?x43353)))
 (= (- (- (- (- (- (+ ?x43357 ?x66879) ?x64249) ?x64251) ?x64253) ?x64255) ?x64257) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64174 (* 2.0 l_0_11_60)))
 (let ((?x64336 (* ?x64174 l_0_11_86)))
 (let ((?x64171 (* 2.0 l_0_11_59)))
 (let ((?x64334 (* ?x64171 l_0_11_85)))
 (let ((?x64168 (* 2.0 l_0_11_58)))
 (let ((?x64332 (* ?x64168 l_0_11_84)))
 (let ((?x64165 (* 2.0 l_0_11_57)))
 (let ((?x64330 (* ?x64165 l_0_11_83)))
 (let ((?x64162 (* 2.0 l_0_11_56)))
 (let ((?x64328 (* ?x64162 l_0_11_82)))
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66901 (* ?x66827 l_0_11_266)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66899 (* ?x66824 l_0_11_265)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66897 (* ?x66821 l_0_11_264)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x54163 (* ?x66818 l_0_11_263)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x43425 (* ?x66815 l_0_11_262)))
 (let ((?x64159 (* 2.0 l_0_11_15)))
 (let ((?x64323 (* ?x64159 l_0_11_41)))
 (let ((?x64156 (* 2.0 l_0_11_14)))
 (let ((?x64309 (* ?x64156 l_0_11_40)))
 (let ((?x63697 (* 2.0 l_0_11_13)))
 (let ((?x64307 (* ?x63697 l_0_11_39)))
 (let ((?x63511 (* 2.0 l_0_11_12)))
 (let ((?x64305 (* ?x63511 l_0_11_38)))
 (let ((?x63891 (* 2.0 l_0_11_11)))
 (let ((?x64303 (* ?x63891 l_0_11_37)))
 (let ((?x66898 (+ (+ (+ (+ (+ (+ (+ ?x64303 ?x64305) ?x64307) ?x64309) ?x64323) ?x43425) ?x54163) ?x66897)))
 (let ((?x66907 (- (- (- (- (- (+ (+ ?x66898 ?x66899) ?x66901) ?x64328) ?x64330) ?x64332) ?x64334) ?x64336)))
 (= ?x66907 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64425 (* l_0_11_66 l_0_11_66)))
 (let ((?x64423 (* l_0_11_65 l_0_11_65)))
 (let ((?x64421 (* l_0_11_64 l_0_11_64)))
 (let ((?x64419 (* l_0_11_63 l_0_11_63)))
 (let ((?x64417 (* l_0_11_62 l_0_11_62)))
 (let ((?x64415 (* l_0_11_61 l_0_11_61)))
 (let ((?x66935 (* l_0_11_246 l_0_11_246)))
 (let ((?x66933 (* l_0_11_245 l_0_11_245)))
 (let ((?x66931 (* l_0_11_244 l_0_11_244)))
 (let ((?x66929 (* l_0_11_243 l_0_11_243)))
 (let ((?x66927 (* l_0_11_242 l_0_11_242)))
 (let ((?x54223 (* l_0_11_241 l_0_11_241)))
 (let ((?x64413 (* l_0_11_21 l_0_11_21)))
 (let ((?x64411 (* l_0_11_20 l_0_11_20)))
 (let ((?x64396 (* l_0_11_19 l_0_11_19)))
 (let ((?x64393 (* l_0_11_18 l_0_11_18)))
 (let ((?x54218 (+ (+ (+ (* l_0_11_16 l_0_11_16) (* l_0_11_17 l_0_11_17)) ?x64393) ?x64396)))
 (let ((?x66934 (+ (+ (+ (+ (+ (+ (+ ?x54218 ?x64411) ?x64413) ?x54223) ?x66927) ?x66929) ?x66931) ?x66933)))
 (let ((?x66942 (- (- (- (- (- (- (+ ?x66934 ?x66935) ?x64415) ?x64417) ?x64419) ?x64421) ?x64423) ?x64425)))
 (= ?x66942 0.0)))))))))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64491 (* ?x63153 l_0_11_79)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64489 (* ?x63150 l_0_11_78)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64487 (* ?x63147 l_0_11_77)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64485 (* ?x63144 l_0_11_76)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64483 (* ?x63141 l_0_11_75)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64481 (* ?x63138 l_0_11_74)))
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x66981 (* ?x63133 l_0_11_259)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x66979 (* ?x63130 l_0_11_258)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x66977 (* ?x63127 l_0_11_257)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x66975 (* ?x63124 l_0_11_256)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x66973 (* ?x63121 l_0_11_255)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x66971 (* ?x63118 l_0_11_254)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66456 (* ?x66401 l_0_11_243)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66454 (* ?x66398 l_0_11_242)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66452 (* ?x66391 l_0_11_241)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64479 (* ?x63115 l_0_11_34)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64477 (* ?x63112 l_0_11_33)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64475 (* ?x63109 l_0_11_32)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64473 (* ?x63106 l_0_11_31)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64471 (* ?x63103 l_0_11_30)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x63808 (* ?x63807 l_0_11_153)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x63805 (* ?x63804 l_0_11_152)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x63802 (* ?x63801 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63799 (* ?x63276 l_0_11_96)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63797 (* ?x63273 l_0_11_95)))
 (let ((?x66959 (- (- (+ (+ (* (* 2.0 l_0_11_106) l_0_11_94) ?x63797) ?x63799) ?x63802) ?x63805)))
 (let ((?x66964 (+ (+ (+ (- ?x66959 ?x63808) (* (* 2.0 l_0_11_16) l_0_11_29)) ?x64471) ?x64473)))
 (let ((?x66972 (+ (- (- (- (+ (+ (+ ?x66964 ?x64475) ?x64477) ?x64479) ?x66452) ?x66454) ?x66456) ?x66971)))
 (let ((?x66984 (- (- (+ (+ (+ (+ (+ ?x66972 ?x66973) ?x66975) ?x66977) ?x66979) ?x66981) ?x64481) ?x64483)))
 (= (- (- (- (- ?x66984 ?x64485) ?x64487) ?x64489) ?x64491) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63153 (* 2.0 l_0_11_66)))
 (let ((?x64560 (* ?x63153 l_0_11_87)))
 (let ((?x63150 (* 2.0 l_0_11_65)))
 (let ((?x64558 (* ?x63150 l_0_11_86)))
 (let ((?x63147 (* 2.0 l_0_11_64)))
 (let ((?x64556 (* ?x63147 l_0_11_85)))
 (let ((?x63144 (* 2.0 l_0_11_63)))
 (let ((?x64554 (* ?x63144 l_0_11_84)))
 (let ((?x63141 (* 2.0 l_0_11_62)))
 (let ((?x64552 (* ?x63141 l_0_11_83)))
 (let ((?x63138 (* 2.0 l_0_11_61)))
 (let ((?x64550 (* ?x63138 l_0_11_82)))
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x66996 (* ?x63133 l_0_11_267)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x66994 (* ?x63130 l_0_11_266)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x54271 (* ?x63127 l_0_11_265)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x32418 (* ?x63124 l_0_11_264)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x54248 (* ?x63121 l_0_11_263)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x54318 (* ?x63118 l_0_11_262)))
 (let ((?x63115 (* 2.0 l_0_11_21)))
 (let ((?x64548 (* ?x63115 l_0_11_42)))
 (let ((?x63112 (* 2.0 l_0_11_20)))
 (let ((?x64546 (* ?x63112 l_0_11_41)))
 (let ((?x63109 (* 2.0 l_0_11_19)))
 (let ((?x64544 (* ?x63109 l_0_11_40)))
 (let ((?x63106 (* 2.0 l_0_11_18)))
 (let ((?x64542 (* ?x63106 l_0_11_39)))
 (let ((?x63103 (* 2.0 l_0_11_17)))
 (let ((?x64540 (* ?x63103 l_0_11_38)))
 (let ((?x63096 (* 2.0 l_0_11_16)))
 (let ((?x64538 (* ?x63096 l_0_11_37)))
 (let ((?x18061 (+ (+ (+ (+ (+ (+ (+ ?x64538 ?x64540) ?x64542) ?x64544) ?x64546) ?x64548) ?x54318) ?x54248)))
 (let ((?x67000 (- (- (- (+ (+ (+ (+ ?x18061 ?x32418) ?x54271) ?x66994) ?x66996) ?x64550) ?x64552) ?x64554)))
 (= (- (- (- ?x67000 ?x64556) ?x64558) ?x64560) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64640 (* l_0_11_73 l_0_11_73)))
 (let ((?x64638 (* l_0_11_72 l_0_11_72)))
 (let ((?x64636 (* l_0_11_71 l_0_11_71)))
 (let ((?x64634 (* l_0_11_70 l_0_11_70)))
 (let ((?x64632 (* l_0_11_69 l_0_11_69)))
 (let ((?x64630 (* l_0_11_68 l_0_11_68)))
 (let ((?x64628 (* l_0_11_67 l_0_11_67)))
 (let ((?x64626 (* l_0_11_28 l_0_11_28)))
 (let ((?x64624 (* l_0_11_27 l_0_11_27)))
 (let ((?x64622 (* l_0_11_26 l_0_11_26)))
 (let ((?x67059 (* l_0_11_253 l_0_11_253)))
 (let ((?x67057 (* l_0_11_252 l_0_11_252)))
 (let ((?x67055 (* l_0_11_251 l_0_11_251)))
 (let ((?x67053 (* l_0_11_250 l_0_11_250)))
 (let ((?x64620 (* l_0_11_25 l_0_11_25)))
 (let ((?x67050 (* l_0_11_249 l_0_11_249)))
 (let ((?x67048 (* l_0_11_248 l_0_11_248)))
 (let ((?x67046 (* l_0_11_247 l_0_11_247)))
 (let ((?x64618 (* l_0_11_24 l_0_11_24)))
 (let ((?x67047 (+ (+ (+ (* l_0_11_22 l_0_11_22) (* l_0_11_23 l_0_11_23)) ?x64618) ?x67046)))
 (let ((?x67060 (+ (+ (+ (+ (+ (+ (+ ?x67047 ?x67048) ?x67050) ?x64620) ?x67053) ?x67055) ?x67057) ?x67059)))
 (let ((?x67067 (- (- (- (- (+ (+ (+ ?x67060 ?x64622) ?x64624) ?x64626) ?x64628) ?x64630) ?x64632) ?x64634)))
 (= (- (- (- ?x67067 ?x64636) ?x64638) ?x64640) 0.0))))))))))))))))))))))))
(assert
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64706 (* ?x64705 l_0_11_80)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64703 (* ?x64702 l_0_11_79)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64700 (* ?x64699 l_0_11_78)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64697 (* ?x64696 l_0_11_77)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64694 (* ?x64693 l_0_11_76)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64691 (* ?x64690 l_0_11_75)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64688 (* ?x64687 l_0_11_74)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64685 (* ?x64684 l_0_11_35)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64682 (* ?x64681 l_0_11_34)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64679 (* ?x64678 l_0_11_33)))
 (let ((?x67111 (* 2.0 l_0_11_253)))
 (let ((?x67112 (* ?x67111 l_0_11_260)))
 (let ((?x67108 (* 2.0 l_0_11_252)))
 (let ((?x67109 (* ?x67108 l_0_11_259)))
 (let ((?x67105 (* 2.0 l_0_11_251)))
 (let ((?x67106 (* ?x67105 l_0_11_258)))
 (let ((?x67102 (* 2.0 l_0_11_250)))
 (let ((?x67103 (* ?x67102 l_0_11_257)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64676 (* ?x64675 l_0_11_32)))
 (let ((?x67098 (* 2.0 l_0_11_249)))
 (let ((?x67099 (* ?x67098 l_0_11_256)))
 (let ((?x67095 (* 2.0 l_0_11_248)))
 (let ((?x67096 (* ?x67095 l_0_11_255)))
 (let ((?x67092 (* 2.0 l_0_11_247)))
 (let ((?x67093 (* ?x67092 l_0_11_254)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64673 (* ?x53131 l_0_11_31)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66477 (* ?x66401 l_0_11_249)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66475 (* ?x66398 l_0_11_248)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64671 (* ?x63550 l_0_11_30)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x43127 (* ?x66391 l_0_11_247)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67083 (* ?x63807 l_0_11_159)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67081 (* ?x63804 l_0_11_158)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x43535 (* ?x63801 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54414 (* ?x54402 l_0_11_96)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x32688 (* ?x54412 l_0_11_95)))
 (let ((?x67082 (- (- (+ (+ (* (* 2.0 l_0_11_112) l_0_11_94) ?x32688) ?x54414) ?x43535) ?x67081)))
 (let ((?x67088 (+ (- (+ (- ?x67082 ?x67083) (* (* 2.0 l_0_11_22) l_0_11_29)) ?x43127) ?x64671)))
 (let ((?x67101 (+ (+ (+ (+ (+ (- (- ?x67088 ?x66475) ?x66477) ?x64673) ?x67093) ?x67096) ?x67099) ?x64676)))
 (let ((?x67116 (+ (+ (+ (+ (+ (+ (+ ?x67101 ?x67103) ?x67106) ?x67109) ?x67112) ?x64679) ?x64682) ?x64685)))
 (let ((?x67123 (- (- (- (- (- (- (- ?x67116 ?x64688) ?x64691) ?x64694) ?x64697) ?x64700) ?x64703) ?x64706)))
 (= ?x67123 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x66078 (* ?x66077 l_0_11_94)))
 (let ((?x64705 (* 2.0 l_0_11_73)))
 (let ((?x64778 (* ?x64705 l_0_11_88)))
 (let ((?x64702 (* 2.0 l_0_11_72)))
 (let ((?x64776 (* ?x64702 l_0_11_87)))
 (let ((?x64699 (* 2.0 l_0_11_71)))
 (let ((?x64774 (* ?x64699 l_0_11_86)))
 (let ((?x64696 (* 2.0 l_0_11_70)))
 (let ((?x64772 (* ?x64696 l_0_11_85)))
 (let ((?x64693 (* 2.0 l_0_11_69)))
 (let ((?x64770 (* ?x64693 l_0_11_84)))
 (let ((?x64690 (* 2.0 l_0_11_68)))
 (let ((?x64768 (* ?x64690 l_0_11_83)))
 (let ((?x64687 (* 2.0 l_0_11_67)))
 (let ((?x64766 (* ?x64687 l_0_11_82)))
 (let ((?x64684 (* 2.0 l_0_11_28)))
 (let ((?x64764 (* ?x64684 l_0_11_43)))
 (let ((?x64681 (* 2.0 l_0_11_27)))
 (let ((?x64762 (* ?x64681 l_0_11_42)))
 (let ((?x64678 (* 2.0 l_0_11_26)))
 (let ((?x64760 (* ?x64678 l_0_11_41)))
 (let ((?x67111 (* 2.0 l_0_11_253)))
 (let ((?x67166 (* ?x67111 l_0_11_268)))
 (let ((?x67108 (* 2.0 l_0_11_252)))
 (let ((?x67164 (* ?x67108 l_0_11_267)))
 (let ((?x67105 (* 2.0 l_0_11_251)))
 (let ((?x67162 (* ?x67105 l_0_11_266)))
 (let ((?x67102 (* 2.0 l_0_11_250)))
 (let ((?x54451 (* ?x67102 l_0_11_265)))
 (let ((?x64675 (* 2.0 l_0_11_25)))
 (let ((?x64748 (* ?x64675 l_0_11_40)))
 (let ((?x67098 (* 2.0 l_0_11_249)))
 (let ((?x32739 (* ?x67098 l_0_11_264)))
 (let ((?x67095 (* 2.0 l_0_11_248)))
 (let ((?x54439 (* ?x67095 l_0_11_263)))
 (let ((?x67092 (* 2.0 l_0_11_247)))
 (let ((?x32705 (* ?x67092 l_0_11_262)))
 (let ((?x53131 (* 2.0 l_0_11_24)))
 (let ((?x64744 (* ?x53131 l_0_11_39)))
 (let ((?x63550 (* 2.0 l_0_11_23)))
 (let ((?x64740 (* ?x63550 l_0_11_38)))
 (let ((?x53274 (* 2.0 l_0_11_22)))
 (let ((?x64736 (* ?x53274 l_0_11_37)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x66047 (* ?x63397 l_0_11_139)))
 (let ((?x54450 (+ (+ (+ (+ (+ (+ (+ ?x66047 ?x64736) ?x64740) ?x64744) ?x32705) ?x54439) ?x32739) ?x64748)))
 (let ((?x67170 (+ (+ (+ (+ (+ (+ (+ ?x54450 ?x54451) ?x67162) ?x67164) ?x67166) ?x64760) ?x64762) ?x64764)))
 (let ((?x67177 (- (- (- (- (- (- (- ?x67170 ?x64766) ?x64768) ?x64770) ?x64772) ?x64774) ?x64776) ?x64778)))
 (= (- ?x67177 ?x66078) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64835 (* l_0_11_81 l_0_11_81)))
 (let ((?x64833 (* l_0_11_80 l_0_11_80)))
 (let ((?x64831 (* l_0_11_79 l_0_11_79)))
 (let ((?x64829 (* l_0_11_78 l_0_11_78)))
 (let ((?x64827 (* l_0_11_77 l_0_11_77)))
 (let ((?x64825 (* l_0_11_76 l_0_11_76)))
 (let ((?x64823 (* l_0_11_75 l_0_11_75)))
 (let ((?x64821 (* l_0_11_74 l_0_11_74)))
 (let ((?x64819 (* l_0_11_36 l_0_11_36)))
 (let ((?x64817 (* l_0_11_35 l_0_11_35)))
 (let ((?x64815 (* l_0_11_34 l_0_11_34)))
 (let ((?x64813 (* l_0_11_33 l_0_11_33)))
 (let ((?x42273 (* l_0_11_32 l_0_11_32)))
 (let ((?x42271 (* l_0_11_31 l_0_11_31)))
 (let ((?x53508 (* l_0_11_30 l_0_11_30)))
 (let ((?x53555 (* l_0_11_29 l_0_11_29)))
 (let ((?x67225 (* l_0_11_261 l_0_11_261)))
 (let ((?x67223 (* l_0_11_260 l_0_11_260)))
 (let ((?x67221 (* l_0_11_259 l_0_11_259)))
 (let ((?x67219 (* l_0_11_258 l_0_11_258)))
 (let ((?x67217 (* l_0_11_257 l_0_11_257)))
 (let ((?x67215 (* l_0_11_256 l_0_11_256)))
 (let ((?x67213 (* l_0_11_255 l_0_11_255)))
 (let ((?x67211 (* l_0_11_254 l_0_11_254)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66504 (* ?x66401 l_0_11_256)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66501 (* ?x66398 l_0_11_255)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x66498 (* ?x66391 l_0_11_254)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67206 (* ?x63807 l_0_11_166)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67204 (* ?x63804 l_0_11_165)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67202 (* ?x63801 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67200 (* ?x54501 l_0_11_96)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x54499 (* ?x54503 l_0_11_95)))
 (let ((?x67205 (- (- (+ (+ (* (* 2.0 l_0_11_119) l_0_11_94) ?x54499) ?x67200) ?x67202) ?x67204)))
 (let ((?x67216 (+ (+ (+ (- (- (- (- ?x67205 ?x67206) ?x66498) ?x66501) ?x66504) ?x67211) ?x67213) ?x67215)))
 (let ((?x67228 (+ (+ (+ (+ (+ (+ (+ ?x67216 ?x67217) ?x67219) ?x67221) ?x67223) ?x67225) ?x53555) ?x53508)))
 (let ((?x67235 (- (+ (+ (+ (+ (+ (+ ?x67228 ?x42271) ?x42273) ?x64813) ?x64815) ?x64817) ?x64819) ?x64821)))
 (let ((?x67242 (- (- (- (- (- (- (- ?x67235 ?x64823) ?x64825) ?x64827) ?x64829) ?x64831) ?x64833) ?x64835)))
 (= ?x67242 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x64925 (* (* 2.0 l_0_11_81) l_0_11_89)))
 (let ((?x64922 (* (* 2.0 l_0_11_80) l_0_11_88)))
 (let ((?x64919 (* (* 2.0 l_0_11_79) l_0_11_87)))
 (let ((?x64916 (* (* 2.0 l_0_11_78) l_0_11_86)))
 (let ((?x64913 (* (* 2.0 l_0_11_77) l_0_11_85)))
 (let ((?x64910 (* (* 2.0 l_0_11_76) l_0_11_84)))
 (let ((?x64907 (* (* 2.0 l_0_11_75) l_0_11_83)))
 (let ((?x64904 (* (* 2.0 l_0_11_74) l_0_11_82)))
 (let ((?x64901 (* (* 2.0 l_0_11_36) l_0_11_44)))
 (let ((?x64898 (* (* 2.0 l_0_11_35) l_0_11_43)))
 (let ((?x64895 (* (* 2.0 l_0_11_34) l_0_11_42)))
 (let ((?x64892 (* (* 2.0 l_0_11_33) l_0_11_41)))
 (let ((?x64889 (* (* 2.0 l_0_11_32) l_0_11_40)))
 (let ((?x63770 (* 2.0 l_0_11_31)))
 (let ((?x64886 (* ?x63770 l_0_11_39)))
 (let ((?x63761 (* 2.0 l_0_11_30)))
 (let ((?x64884 (* ?x63761 l_0_11_38)))
 (let ((?x53283 (* 2.0 l_0_11_29)))
 (let ((?x64882 (* ?x53283 l_0_11_37)))
 (let ((?x67304 (* (* 2.0 l_0_11_261) l_0_11_269)))
 (let ((?x67301 (* (* 2.0 l_0_11_260) l_0_11_268)))
 (let ((?x67298 (* (* 2.0 l_0_11_259) l_0_11_267)))
 (let ((?x67295 (* (* 2.0 l_0_11_258) l_0_11_266)))
 (let ((?x67292 (* (* 2.0 l_0_11_257) l_0_11_265)))
 (let ((?x67289 (* (* 2.0 l_0_11_256) l_0_11_264)))
 (let ((?x67286 (* (* 2.0 l_0_11_255) l_0_11_263)))
 (let ((?x67283 (* (* 2.0 l_0_11_254) l_0_11_262)))
 (let ((?x66401 (* 2.0 l_0_11_231)))
 (let ((?x66551 (* ?x66401 l_0_11_264)))
 (let ((?x66398 (* 2.0 l_0_11_230)))
 (let ((?x66549 (* ?x66398 l_0_11_263)))
 (let ((?x66391 (* 2.0 l_0_11_229)))
 (let ((?x53916 (* ?x66391 l_0_11_262)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67277 (* ?x63807 l_0_11_174)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67275 (* ?x63804 l_0_11_173)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67273 (* ?x63801 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67271 (* ?x67270 l_0_11_96)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67268 (* ?x67267 l_0_11_95)))
 (let ((?x67276 (- (- (+ (+ (* (* 2.0 l_0_11_127) l_0_11_94) ?x67268) ?x67271) ?x67273) ?x67275)))
 (let ((?x67290 (+ (+ (+ (- (- (- (- ?x67276 ?x67277) ?x53916) ?x66549) ?x66551) ?x67283) ?x67286) ?x67289)))
 (let ((?x67307 (+ (+ (+ (+ (+ (+ (+ ?x67290 ?x67292) ?x67295) ?x67298) ?x67301) ?x67304) ?x64882) ?x64884)))
 (let ((?x67314 (- (+ (+ (+ (+ (+ (+ ?x67307 ?x64886) ?x64889) ?x64892) ?x64895) ?x64898) ?x64901) ?x64904)))
 (let ((?x67321 (- (- (- (- (- (- (- ?x67314 ?x64907) ?x64910) ?x64913) ?x64916) ?x64919) ?x64922) ?x64925)))
 (= ?x67321 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x65037 (* l_0_11_90 l_0_11_90)))
 (let ((?x65035 (* l_0_11_89 l_0_11_89)))
 (let ((?x65033 (* l_0_11_88 l_0_11_88)))
 (let ((?x65031 (* l_0_11_87 l_0_11_87)))
 (let ((?x65029 (* l_0_11_86 l_0_11_86)))
 (let ((?x65027 (* l_0_11_85 l_0_11_85)))
 (let ((?x65025 (* l_0_11_84 l_0_11_84)))
 (let ((?x65023 (* l_0_11_83 l_0_11_83)))
 (let ((?x65021 (* l_0_11_82 l_0_11_82)))
 (let ((?x65019 (* l_0_11_45 l_0_11_45)))
 (let ((?x65017 (* l_0_11_44 l_0_11_44)))
 (let ((?x65015 (* l_0_11_43 l_0_11_43)))
 (let ((?x65013 (* l_0_11_42 l_0_11_42)))
 (let ((?x65011 (* l_0_11_41 l_0_11_41)))
 (let ((?x65009 (* l_0_11_40 l_0_11_40)))
 (let ((?x65007 (* l_0_11_39 l_0_11_39)))
 (let ((?x65005 (* l_0_11_38 l_0_11_38)))
 (let ((?x65003 (* l_0_11_37 l_0_11_37)))
 (let ((?x67372 (* l_0_11_270 l_0_11_270)))
 (let ((?x67370 (* l_0_11_269 l_0_11_269)))
 (let ((?x67368 (* l_0_11_268 l_0_11_268)))
 (let ((?x67366 (* l_0_11_267 l_0_11_267)))
 (let ((?x67364 (* l_0_11_266 l_0_11_266)))
 (let ((?x67362 (* l_0_11_265 l_0_11_265)))
 (let ((?x67360 (* l_0_11_264 l_0_11_264)))
 (let ((?x67361 (+ (+ (* l_0_11_262 l_0_11_262) (* l_0_11_263 l_0_11_263)) ?x67360)))
 (let ((?x67374 (+ (+ (+ (+ (+ (+ (+ ?x67361 ?x67362) ?x67364) ?x67366) ?x67368) ?x67370) ?x67372) ?x65003)))
 (let ((?x67381 (+ (+ (+ (+ (+ (+ (+ ?x67374 ?x65005) ?x65007) ?x65009) ?x65011) ?x65013) ?x65015) ?x65017)))
 (let ((?x67388 (- (- (- (- (- (- (+ ?x67381 ?x65019) ?x65021) ?x65023) ?x65025) ?x65027) ?x65029) ?x65031)))
 (= (- (- (- ?x67388 ?x65033) ?x65035) ?x65037) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54657 (* ?x66077 l_0_11_92)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_137) ?x54657) 0.0))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54678 (* ?x66077 l_0_11_97)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_142) ?x54678) 0.0))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x63398 (* ?x63397 l_0_11_151)))
 (= (+ (* (* (- 2.0) l_0_11_106) l_0_11_91) ?x63398) 0.0))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67416 (* ?x63397 l_0_11_157)))
 (= (+ (* (* (- 2.0) l_0_11_112) l_0_11_91) ?x67416) 0.0))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x67437 (* ?x66320 l_0_11_98)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x67435 (* ?x66317 l_0_11_97)))
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66235 (* ?x66212 l_0_11_233)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66233 (* ?x66209 l_0_11_232)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67431 (* ?x63603 l_0_11_143)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67429 (* ?x63600 l_0_11_142)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67423 (* ?x63397 l_0_11_164)))
 (let ((?x67433 (- (- (- (+ (* (* (- 2.0) l_0_11_119) l_0_11_91) ?x67423) ?x67429) ?x67431) ?x66233)))
 (= (+ (+ (- ?x67433 ?x66235) ?x67435) ?x67437) 0.0)))))))))))))))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x54801 (* ?x63397 l_0_11_172)))
 (= (+ (* (* (- 2.0) l_0_11_127) l_0_11_91) ?x54801) 0.0))))
(assert
 (let ((?x67457 (* l_0_11_93 l_0_11_93)))
 (let ((?x67455 (* l_0_11_92 l_0_11_92)))
 (let ((?x54731 (* l_0_11_138 l_0_11_138)))
 (let ((?x54723 (* l_0_11_137 l_0_11_137)))
 (let ((?x43782 (+ ?x54723 ?x54731)))
 (= (- (- ?x43782 ?x67455) ?x67457) 0.0)))))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x66321 (* ?x66320 l_0_11_95)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x66318 (* ?x66317 l_0_11_94)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x17247 (* ?x63603 l_0_11_140)))
 (= (- (- (+ (* (* 2.0 l_0_11_137) l_0_11_139) ?x17247) ?x66318) ?x66321) 0.0))))))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x67437 (* ?x66320 l_0_11_98)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x67435 (* ?x66317 l_0_11_97)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67431 (* ?x63603 l_0_11_143)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67429 (* ?x63600 l_0_11_142)))
 (= (- (- (+ ?x67429 ?x67431) ?x67435) ?x67437) 0.0))))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x63604 (* ?x63603 l_0_11_152)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x63601 (* ?x63600 l_0_11_151)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63273 l_0_11_93)))
 (let ((?x63605 (+ (+ (- (* (* (- 2.0) l_0_11_106) l_0_11_92) ?x63593) ?x63601) ?x63604)))
 (= ?x63605 0.0)))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x43805 (* ?x63603 l_0_11_158)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x43802 (* ?x63600 l_0_11_157)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x43799 (* ?x54412 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_112) l_0_11_92) ?x43799) ?x43802) ?x43805) 0.0))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67482 (* ?x63603 l_0_11_165)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67480 (* ?x63600 l_0_11_164)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67478 (* ?x54503 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_119) l_0_11_92) ?x67478) ?x67480) ?x67482) 0.0))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67501 (* ?x63603 l_0_11_173)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67499 (* ?x63600 l_0_11_172)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67497 (* ?x67267 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_127) l_0_11_92) ?x67497) ?x67499) ?x67501) 0.0))))))))
(assert
 (let ((?x66518 (* l_0_11_96 l_0_11_96)))
 (let ((?x66516 (* l_0_11_95 l_0_11_95)))
 (let ((?x66514 (* l_0_11_94 l_0_11_94)))
 (let ((?x66496 (* l_0_11_141 l_0_11_141)))
 (let ((?x67507 (+ (+ (* l_0_11_139 l_0_11_139) (* l_0_11_140 l_0_11_140)) ?x66496)))
 (= (- (- (- ?x67507 ?x66514) ?x66516) ?x66518) 0.0)))))))
(assert
 (let ((?x66705 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x66702 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x66699 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x66678 (* ?x63807 l_0_11_144)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x66676 (* ?x63804 l_0_11_143)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x66674 (* ?x63801 l_0_11_142)))
 (= (- (- (- (+ (+ ?x66674 ?x66676) ?x66678) ?x66699) ?x66702) ?x66705) 0.0)))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x63808 (* ?x63807 l_0_11_153)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x63805 (* ?x63804 l_0_11_152)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x63802 (* ?x63801 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x63799 (* ?x63276 l_0_11_96)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63797 (* ?x63273 l_0_11_95)))
 (let ((?x63806 (+ (+ (- (- (* (* (- 2.0) l_0_11_106) l_0_11_94) ?x63797) ?x63799) ?x63802) ?x63805)))
 (let ((?x63809 (+ ?x63806 ?x63808)))
 (= ?x63809 0.0))))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67083 (* ?x63807 l_0_11_159)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67081 (* ?x63804 l_0_11_158)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x43535 (* ?x63801 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54414 (* ?x54402 l_0_11_96)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x32688 (* ?x54412 l_0_11_95)))
 (let ((?x67528 (+ (+ (- (- (* (* (- 2.0) l_0_11_112) l_0_11_94) ?x32688) ?x54414) ?x43535) ?x67081)))
 (= (+ ?x67528 ?x67083) 0.0)))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67206 (* ?x63807 l_0_11_166)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67204 (* ?x63804 l_0_11_165)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67202 (* ?x63801 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67200 (* ?x54501 l_0_11_96)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x54499 (* ?x54503 l_0_11_95)))
 (let ((?x67543 (+ (+ (- (- (* (* (- 2.0) l_0_11_119) l_0_11_94) ?x54499) ?x67200) ?x67202) ?x67204)))
 (= (+ ?x67543 ?x67206) 0.0)))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67277 (* ?x63807 l_0_11_174)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67275 (* ?x63804 l_0_11_173)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67273 (* ?x63801 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67271 (* ?x67270 l_0_11_96)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67268 (* ?x67267 l_0_11_95)))
 (let ((?x67552 (+ (+ (- (- (* (* (- 2.0) l_0_11_127) l_0_11_94) ?x67268) ?x67271) ?x67273) ?x67275)))
 (= (+ ?x67552 ?x67277) 0.0)))))))))))))
(assert
 (let ((?x67571 (* l_0_11_99 l_0_11_99)))
 (let ((?x67569 (* l_0_11_98 l_0_11_98)))
 (let ((?x67567 (* l_0_11_97 l_0_11_97)))
 (let ((?x67565 (* l_0_11_145 l_0_11_145)))
 (let ((?x67563 (* l_0_11_144 l_0_11_144)))
 (let ((?x67561 (* l_0_11_143 l_0_11_143)))
 (let ((?x67562 (+ (+ (* (- l_0_11_100) l_0_11_100) (* l_0_11_142 l_0_11_142)) ?x67561)))
 (= (- (- (- (+ (+ ?x67562 ?x67563) ?x67565) ?x67567) ?x67569) ?x67571) 0.0)))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x64061 (* ?x64060 l_0_11_154)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x64058 (* ?x64057 l_0_11_153)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x64055 (* ?x64054 l_0_11_152)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x64052 (* ?x64051 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64049 (* ?x63276 l_0_11_99)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64047 (* ?x63273 l_0_11_98)))
 (let ((?x63266 (* 2.0 l_0_11_106)))
 (let ((?x64038 (* ?x63266 l_0_11_97)))
 (let ((?x67589 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_109) ?x64038) ?x64047) ?x64049) ?x64052)))
 (= (+ (+ (+ ?x67589 ?x64055) ?x64058) ?x64061) 0.0)))))))))))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x33283 (* ?x64060 l_0_11_160)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x54983 (* ?x64057 l_0_11_159)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x55009 (* ?x64054 l_0_11_158)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x43883 (* ?x64051 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54986 (* ?x54402 l_0_11_99)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x55013 (* ?x54412 l_0_11_98)))
 (let ((?x54443 (* 2.0 l_0_11_112)))
 (let ((?x43860 (* ?x54443 l_0_11_97)))
 (let ((?x55005 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_115) ?x43860) ?x55013) ?x54986) ?x43883)))
 (= (+ (+ (+ ?x55005 ?x55009) ?x54983) ?x33283) 0.0)))))))))))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67627 (* ?x64060 l_0_11_167)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67625 (* ?x64057 l_0_11_166)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67623 (* ?x64054 l_0_11_165)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67621 (* ?x64051 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67619 (* ?x54501 l_0_11_99)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67610 (* ?x54503 l_0_11_98)))
 (let ((?x54475 (* 2.0 l_0_11_119)))
 (let ((?x67606 (* ?x54475 l_0_11_97)))
 (let ((?x67622 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_122) ?x67606) ?x67610) ?x67619) ?x67621)))
 (= (+ (+ (+ ?x67622 ?x67623) ?x67625) ?x67627) 0.0)))))))))))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67665 (* ?x64060 l_0_11_175)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67663 (* ?x64057 l_0_11_174)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67661 (* ?x64054 l_0_11_173)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67659 (* ?x64051 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67657 (* ?x67270 l_0_11_99)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67648 (* ?x67267 l_0_11_98)))
 (let ((?x67265 (* 2.0 l_0_11_127)))
 (let ((?x67644 (* ?x67265 l_0_11_97)))
 (let ((?x67660 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_130) ?x67644) ?x67648) ?x67657) ?x67659)))
 (= (+ (+ (+ ?x67660 ?x67661) ?x67663) ?x67665) 0.0)))))))))))))))))
(assert
 (let ((?x64536 (* l_0_11_156 l_0_11_156)))
 (let ((?x64534 (* l_0_11_155 l_0_11_155)))
 (let ((?x64532 (* l_0_11_154 l_0_11_154)))
 (let ((?x64530 (* l_0_11_153 l_0_11_153)))
 (let ((?x64528 (* l_0_11_152 l_0_11_152)))
 (let ((?x64526 (* l_0_11_151 l_0_11_151)))
 (let ((?x64524 (* l_0_11_111 l_0_11_111)))
 (let ((?x64522 (* l_0_11_110 l_0_11_110)))
 (let ((?x64520 (* l_0_11_109 l_0_11_109)))
 (let ((?x64518 (* l_0_11_108 l_0_11_108)))
 (let ((?x64519 (- (- (* (- l_0_11_106) l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x64518)))
 (let ((?x64533 (+ (+ (+ (+ (- (- (- ?x64519 ?x64520) ?x64522) ?x64524) ?x64526) ?x64528) ?x64530) ?x64532)))
 (let ((?x64537 (+ (+ ?x64533 ?x64534) ?x64536)))
 (= ?x64537 0.0)))))))))))))))
(assert
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x64880 (* ?x63303 l_0_11_169)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64878 (* ?x63300 l_0_11_168)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64876 (* ?x63297 l_0_11_167)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64874 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64872 (* ?x63291 l_0_11_165)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64870 (* ?x63288 l_0_11_164)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64868 (* ?x63285 l_0_11_124)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64866 (* ?x63282 l_0_11_123)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64864 (* ?x63279 l_0_11_122)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64862 (* ?x63276 l_0_11_121)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64860 (* ?x63273 l_0_11_120)))
 (let ((?x64867 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_119) ?x64860) ?x64862) ?x64864) ?x64866)))
 (let ((?x64881 (+ (+ (+ (+ (+ (+ (- ?x64867 ?x64868) ?x64870) ?x64872) ?x64874) ?x64876) ?x64878) ?x64880)))
 (= ?x64881 0.0))))))))))))))))))))))))))
(assert
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x65001 (* ?x63303 l_0_11_177)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64999 (* ?x63300 l_0_11_176)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64997 (* ?x63297 l_0_11_175)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64995 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64993 (* ?x63291 l_0_11_173)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64991 (* ?x63288 l_0_11_172)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64989 (* ?x63285 l_0_11_132)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64987 (* ?x63282 l_0_11_131)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64985 (* ?x63279 l_0_11_130)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64983 (* ?x63276 l_0_11_129)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64981 (* ?x63273 l_0_11_128)))
 (let ((?x64988 (- (- (- (- (* (* (- 2.0) l_0_11_106) l_0_11_127) ?x64981) ?x64983) ?x64985) ?x64987)))
 (let ((?x65002 (+ (+ (+ (+ (+ (+ (- ?x64988 ?x64989) ?x64991) ?x64993) ?x64995) ?x64997) ?x64999) ?x65001)))
 (= ?x65002 0.0))))))))))))))))))))))))))
(assert
 (let ((?x67708 (* l_0_11_163 l_0_11_163)))
 (let ((?x67706 (* l_0_11_162 l_0_11_162)))
 (let ((?x67704 (* l_0_11_161 l_0_11_161)))
 (let ((?x67702 (* l_0_11_160 l_0_11_160)))
 (let ((?x67700 (* l_0_11_159 l_0_11_159)))
 (let ((?x67698 (* l_0_11_158 l_0_11_158)))
 (let ((?x67696 (* l_0_11_157 l_0_11_157)))
 (let ((?x67694 (* l_0_11_118 l_0_11_118)))
 (let ((?x67692 (* l_0_11_117 l_0_11_117)))
 (let ((?x67683 (* l_0_11_116 l_0_11_116)))
 (let ((?x67679 (* l_0_11_115 l_0_11_115)))
 (let ((?x43996 (* l_0_11_114 l_0_11_114)))
 (let ((?x55094 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x43996)))
 (let ((?x67701 (+ (+ (+ (- (- (- (- ?x55094 ?x67679) ?x67683) ?x67692) ?x67694) ?x67696) ?x67698) ?x67700)))
 (= (+ (+ (+ (+ ?x67701 ?x67702) ?x67704) ?x67706) ?x67708) 0.0))))))))))))))))
(assert
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67774 (* ?x67773 l_0_11_170)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67771 (* ?x67770 l_0_11_169)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67768 (* ?x67767 l_0_11_168)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67765 (* ?x67764 l_0_11_167)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67762 (* ?x67761 l_0_11_166)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67759 (* ?x67758 l_0_11_165)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67756 (* ?x67755 l_0_11_164)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67753 (* ?x67752 l_0_11_125)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67750 (* ?x67749 l_0_11_124)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67747 (* ?x67746 l_0_11_123)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67744 (* ?x67743 l_0_11_122)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x67741 (* ?x54402 l_0_11_121)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x67739 (* ?x54412 l_0_11_120)))
 (let ((?x67748 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_119) ?x67739) ?x67741) ?x67744) ?x67747)))
 (let ((?x67769 (+ (+ (+ (+ (+ (- (- ?x67748 ?x67750) ?x67753) ?x67756) ?x67759) ?x67762) ?x67765) ?x67768)))
 (= (+ (+ ?x67769 ?x67771) ?x67774) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x67437 (* ?x66320 l_0_11_98)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x67435 (* ?x66317 l_0_11_97)))
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67834 (* ?x67773 l_0_11_178)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67832 (* ?x67770 l_0_11_177)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67830 (* ?x67767 l_0_11_176)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67828 (* ?x67764 l_0_11_175)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67826 (* ?x67761 l_0_11_174)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67824 (* ?x67758 l_0_11_173)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67822 (* ?x67755 l_0_11_172)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67431 (* ?x63603 l_0_11_143)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67429 (* ?x63600 l_0_11_142)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67818 (* ?x67752 l_0_11_133)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67816 (* ?x67749 l_0_11_132)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67804 (* ?x67746 l_0_11_131)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67801 (* ?x67743 l_0_11_130)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x55332 (* ?x54402 l_0_11_129)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x44054 (* ?x54412 l_0_11_128)))
 (let ((?x67815 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_127) ?x44054) ?x55332) ?x67801) ?x67804)))
 (let ((?x67819 (- (- ?x67815 ?x67816) ?x67818)))
 (let ((?x67831 (+ (+ (+ (+ (+ (+ (+ ?x67819 ?x67429) ?x67431) ?x67822) ?x67824) ?x67826) ?x67828) ?x67830)))
 (= (- (- (+ (+ ?x67831 ?x67832) ?x67834) ?x67435) ?x67437) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67906 (* l_0_11_171 l_0_11_171)))
 (let ((?x67904 (* l_0_11_170 l_0_11_170)))
 (let ((?x67902 (* l_0_11_169 l_0_11_169)))
 (let ((?x67900 (* l_0_11_168 l_0_11_168)))
 (let ((?x67898 (* l_0_11_167 l_0_11_167)))
 (let ((?x67896 (* l_0_11_166 l_0_11_166)))
 (let ((?x67894 (* l_0_11_165 l_0_11_165)))
 (let ((?x67892 (* l_0_11_164 l_0_11_164)))
 (let ((?x67890 (* l_0_11_126 l_0_11_126)))
 (let ((?x67888 (* l_0_11_125 l_0_11_125)))
 (let ((?x67886 (* l_0_11_124 l_0_11_124)))
 (let ((?x67884 (* l_0_11_123 l_0_11_123)))
 (let ((?x67882 (* l_0_11_122 l_0_11_122)))
 (let ((?x67880 (* l_0_11_121 l_0_11_121)))
 (let ((?x67881 (- (- (* (- l_0_11_119) l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67880)))
 (let ((?x67895 (+ (+ (- (- (- (- (- ?x67881 ?x67882) ?x67884) ?x67886) ?x67888) ?x67890) ?x67892) ?x67894)))
 (= (+ (+ (+ (+ (+ (+ ?x67895 ?x67896) ?x67898) ?x67900) ?x67902) ?x67904) ?x67906) 0.0))))))))))))))))))
(assert
 (let ((?x67975 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67972 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67969 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67966 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67963 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67960 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67957 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67954 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67951 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67948 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67945 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67942 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67939 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67936 (* ?x54501 l_0_11_129)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67934 (* ?x54503 l_0_11_128)))
 (let ((?x67943 (- (- (- (- (* (* (- 2.0) l_0_11_119) l_0_11_127) ?x67934) ?x67936) ?x67939) ?x67942)))
 (let ((?x67964 (+ (+ (+ (+ (- (- (- ?x67943 ?x67945) ?x67948) ?x67951) ?x67954) ?x67957) ?x67960) ?x67963)))
 (= (+ (+ (+ (+ ?x67964 ?x67966) ?x67969) ?x67972) ?x67975) 0.0)))))))))))))))))))))
(assert
 (let ((?x68063 (* l_0_11_180 l_0_11_180)))
 (let ((?x68061 (* l_0_11_179 l_0_11_179)))
 (let ((?x68059 (* l_0_11_178 l_0_11_178)))
 (let ((?x68057 (* l_0_11_177 l_0_11_177)))
 (let ((?x68055 (* l_0_11_176 l_0_11_176)))
 (let ((?x68053 (* l_0_11_175 l_0_11_175)))
 (let ((?x68051 (* l_0_11_174 l_0_11_174)))
 (let ((?x68049 (* l_0_11_173 l_0_11_173)))
 (let ((?x68047 (* l_0_11_172 l_0_11_172)))
 (let ((?x68045 (* l_0_11_135 l_0_11_135)))
 (let ((?x68043 (* l_0_11_134 l_0_11_134)))
 (let ((?x68041 (* l_0_11_133 l_0_11_133)))
 (let ((?x68039 (* l_0_11_132 l_0_11_132)))
 (let ((?x68026 (* l_0_11_131 l_0_11_131)))
 (let ((?x68023 (* l_0_11_130 l_0_11_130)))
 (let ((?x68019 (* l_0_11_129 l_0_11_129)))
 (let ((?x68021 (- (- (* (- l_0_11_127) l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x68019)))
 (let ((?x68048 (+ (- (- (- (- (- (- ?x68021 ?x68023) ?x68026) ?x68039) ?x68041) ?x68043) ?x68045) ?x68047)))
 (let ((?x68062 (+ (+ (+ (+ (+ (+ (+ ?x68048 ?x68049) ?x68051) ?x68053) ?x68055) ?x68057) ?x68059) ?x68061)))
 (= (+ ?x68062 ?x68063) 0.0)))))))))))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54657 (* ?x66077 l_0_11_92)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_137) ?x54657) 0.0))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54678 (* ?x66077 l_0_11_97)))
 (= (- (* (* 2.0 l_0_11_136) l_0_11_142) ?x54678) 0.0))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x65112 (* ?x63397 l_0_11_146)))
 (= (+ (* (* (- 2.0) l_0_11_101) l_0_11_91) ?x65112) 0.0))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67416 (* ?x63397 l_0_11_157)))
 (= (+ (* (* (- 2.0) l_0_11_112) l_0_11_91) ?x67416) 0.0))))
(assert
 (let ((?x67111 (* 2.0 l_0_11_253)))
 (let ((?x67166 (* ?x67111 l_0_11_268)))
 (let ((?x67108 (* 2.0 l_0_11_252)))
 (let ((?x67164 (* ?x67108 l_0_11_267)))
 (let ((?x67105 (* 2.0 l_0_11_251)))
 (let ((?x67162 (* ?x67105 l_0_11_266)))
 (let ((?x67102 (* 2.0 l_0_11_250)))
 (let ((?x54451 (* ?x67102 l_0_11_265)))
 (let ((?x67098 (* 2.0 l_0_11_249)))
 (let ((?x32739 (* ?x67098 l_0_11_264)))
 (let ((?x67095 (* 2.0 l_0_11_248)))
 (let ((?x54439 (* ?x67095 l_0_11_263)))
 (let ((?x67092 (* 2.0 l_0_11_247)))
 (let ((?x32705 (* ?x67092 l_0_11_262)))
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67834 (* ?x67773 l_0_11_178)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67832 (* ?x67770 l_0_11_177)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67830 (* ?x67767 l_0_11_176)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67828 (* ?x67764 l_0_11_175)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67826 (* ?x67761 l_0_11_174)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67824 (* ?x67758 l_0_11_173)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67822 (* ?x67755 l_0_11_172)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67423 (* ?x63397 l_0_11_164)))
 (let ((?x54475 (* 2.0 l_0_11_119)))
 (let ((?x68104 (* ?x54475 l_0_11_91)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67818 (* ?x67752 l_0_11_133)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67816 (* ?x67749 l_0_11_132)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67804 (* ?x67746 l_0_11_131)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67801 (* ?x67743 l_0_11_130)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x55332 (* ?x54402 l_0_11_129)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x44054 (* ?x54412 l_0_11_128)))
 (let ((?x68101 (+ (+ (+ (+ (* (* 2.0 l_0_11_112) l_0_11_127) ?x44054) ?x55332) ?x67801) ?x67804)))
 (let ((?x68109 (- (- (- (+ (- (+ (+ ?x68101 ?x67816) ?x67818) ?x68104) ?x67423) ?x67822) ?x67824) ?x67826)))
 (let ((?x68116 (- (- (- (- (- (- (- ?x68109 ?x67828) ?x67830) ?x67832) ?x67834) ?x32705) ?x54439) ?x32739)))
 (= (- (- (- (- ?x68116 ?x54451) ?x67162) ?x67164) ?x67166) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x54801 (* ?x63397 l_0_11_172)))
 (= (+ (* (* (- 2.0) l_0_11_127) l_0_11_91) ?x54801) 0.0))))
(assert
 (let ((?x67457 (* l_0_11_93 l_0_11_93)))
 (let ((?x67455 (* l_0_11_92 l_0_11_92)))
 (let ((?x54731 (* l_0_11_138 l_0_11_138)))
 (let ((?x54723 (* l_0_11_137 l_0_11_137)))
 (let ((?x43782 (+ ?x54723 ?x54731)))
 (= (- (- ?x43782 ?x67455) ?x67457) 0.0)))))))
(assert
 (let ((?x66320 (* 2.0 l_0_11_93)))
 (let ((?x66321 (* ?x66320 l_0_11_95)))
 (let ((?x66317 (* 2.0 l_0_11_92)))
 (let ((?x66318 (* ?x66317 l_0_11_94)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x17247 (* ?x63603 l_0_11_140)))
 (= (- (- (+ (* (* 2.0 l_0_11_137) l_0_11_139) ?x17247) ?x66318) ?x66321) 0.0))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x65193 (* ?x63603 l_0_11_147)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x65191 (* ?x63600 l_0_11_146)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65189 (* ?x64281 l_0_11_93)))
 (let ((?x65194 (+ (+ (- (* (* (- 2.0) l_0_11_101) l_0_11_92) ?x65189) ?x65191) ?x65193)))
 (= ?x65194 0.0)))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x43805 (* ?x63603 l_0_11_158)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x43802 (* ?x63600 l_0_11_157)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x43799 (* ?x54412 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_112) l_0_11_92) ?x43799) ?x43802) ?x43805) 0.0))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67482 (* ?x63603 l_0_11_165)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67480 (* ?x63600 l_0_11_164)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67478 (* ?x54503 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_119) l_0_11_92) ?x67478) ?x67480) ?x67482) 0.0))))))))
(assert
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67501 (* ?x63603 l_0_11_173)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67499 (* ?x63600 l_0_11_172)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67497 (* ?x67267 l_0_11_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_11_127) l_0_11_92) ?x67497) ?x67499) ?x67501) 0.0))))))))
(assert
 (let ((?x66518 (* l_0_11_96 l_0_11_96)))
 (let ((?x66516 (* l_0_11_95 l_0_11_95)))
 (let ((?x66514 (* l_0_11_94 l_0_11_94)))
 (let ((?x66496 (* l_0_11_141 l_0_11_141)))
 (let ((?x67507 (+ (+ (* l_0_11_139 l_0_11_139) (* l_0_11_140 l_0_11_140)) ?x66496)))
 (= (- (- (- ?x67507 ?x66514) ?x66516) ?x66518) 0.0)))))))
(assert
 (let ((?x66705 (* (* 2.0 l_0_11_96) l_0_11_99)))
 (let ((?x66702 (* (* 2.0 l_0_11_95) l_0_11_98)))
 (let ((?x66699 (* (* 2.0 l_0_11_94) l_0_11_97)))
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x66678 (* ?x63807 l_0_11_144)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x66676 (* ?x63804 l_0_11_143)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x66674 (* ?x63801 l_0_11_142)))
 (= (- (- (- (+ (+ ?x66674 ?x66676) ?x66678) ?x66699) ?x66702) ?x66705) 0.0)))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x65215 (* ?x63807 l_0_11_148)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x65213 (* ?x63804 l_0_11_147)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x29669 (* ?x63801 l_0_11_146)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x42400 (* ?x64286 l_0_11_96)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x42448 (* ?x64281 l_0_11_95)))
 (let ((?x65214 (+ (+ (- (- (* (* (- 2.0) l_0_11_101) l_0_11_94) ?x42448) ?x42400) ?x29669) ?x65213)))
 (let ((?x65216 (+ ?x65214 ?x65215)))
 (= ?x65216 0.0))))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67083 (* ?x63807 l_0_11_159)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67081 (* ?x63804 l_0_11_158)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x43535 (* ?x63801 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54414 (* ?x54402 l_0_11_96)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x32688 (* ?x54412 l_0_11_95)))
 (let ((?x67528 (+ (+ (- (- (* (* (- 2.0) l_0_11_112) l_0_11_94) ?x32688) ?x54414) ?x43535) ?x67081)))
 (= (+ ?x67528 ?x67083) 0.0)))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67206 (* ?x63807 l_0_11_166)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67204 (* ?x63804 l_0_11_165)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67202 (* ?x63801 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67200 (* ?x54501 l_0_11_96)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x54499 (* ?x54503 l_0_11_95)))
 (let ((?x67543 (+ (+ (- (- (* (* (- 2.0) l_0_11_119) l_0_11_94) ?x54499) ?x67200) ?x67202) ?x67204)))
 (= (+ ?x67543 ?x67206) 0.0)))))))))))))
(assert
 (let ((?x63807 (* 2.0 l_0_11_141)))
 (let ((?x67277 (* ?x63807 l_0_11_174)))
 (let ((?x63804 (* 2.0 l_0_11_140)))
 (let ((?x67275 (* ?x63804 l_0_11_173)))
 (let ((?x63801 (* 2.0 l_0_11_139)))
 (let ((?x67273 (* ?x63801 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67271 (* ?x67270 l_0_11_96)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67268 (* ?x67267 l_0_11_95)))
 (let ((?x67552 (+ (+ (- (- (* (* (- 2.0) l_0_11_127) l_0_11_94) ?x67268) ?x67271) ?x67273) ?x67275)))
 (= (+ ?x67552 ?x67277) 0.0)))))))))))))
(assert
 (let ((?x67571 (* l_0_11_99 l_0_11_99)))
 (let ((?x67569 (* l_0_11_98 l_0_11_98)))
 (let ((?x67567 (* l_0_11_97 l_0_11_97)))
 (let ((?x67565 (* l_0_11_145 l_0_11_145)))
 (let ((?x67563 (* l_0_11_144 l_0_11_144)))
 (let ((?x67561 (* l_0_11_143 l_0_11_143)))
 (let ((?x67562 (+ (+ (* (- l_0_11_100) l_0_11_100) (* l_0_11_142 l_0_11_142)) ?x67561)))
 (= (- (- (- (+ (+ ?x67562 ?x67563) ?x67565) ?x67567) ?x67569) ?x67571) 0.0)))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x33283 (* ?x64060 l_0_11_160)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x54983 (* ?x64057 l_0_11_159)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x55009 (* ?x64054 l_0_11_158)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x43883 (* ?x64051 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54986 (* ?x54402 l_0_11_99)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x55013 (* ?x54412 l_0_11_98)))
 (let ((?x54443 (* 2.0 l_0_11_112)))
 (let ((?x43860 (* ?x54443 l_0_11_97)))
 (let ((?x55005 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_115) ?x43860) ?x55013) ?x54986) ?x43883)))
 (= (+ (+ (+ ?x55005 ?x55009) ?x54983) ?x33283) 0.0)))))))))))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67627 (* ?x64060 l_0_11_167)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67625 (* ?x64057 l_0_11_166)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67623 (* ?x64054 l_0_11_165)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67621 (* ?x64051 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67619 (* ?x54501 l_0_11_99)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67610 (* ?x54503 l_0_11_98)))
 (let ((?x54475 (* 2.0 l_0_11_119)))
 (let ((?x67606 (* ?x54475 l_0_11_97)))
 (let ((?x67622 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_122) ?x67606) ?x67610) ?x67619) ?x67621)))
 (= (+ (+ (+ ?x67622 ?x67623) ?x67625) ?x67627) 0.0)))))))))))))))))
(assert
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67665 (* ?x64060 l_0_11_175)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67663 (* ?x64057 l_0_11_174)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67661 (* ?x64054 l_0_11_173)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67659 (* ?x64051 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67657 (* ?x67270 l_0_11_99)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67648 (* ?x67267 l_0_11_98)))
 (let ((?x67265 (* 2.0 l_0_11_127)))
 (let ((?x67644 (* ?x67265 l_0_11_97)))
 (let ((?x67660 (+ (- (- (- (* (* (- 2.0) l_0_11_100) l_0_11_130) ?x67644) ?x67648) ?x67657) ?x67659)))
 (= (+ (+ (+ ?x67660 ?x67661) ?x67663) ?x67665) 0.0)))))))))))))))))
(assert
 (let ((?x65275 (* l_0_11_150 l_0_11_150)))
 (let ((?x65273 (* l_0_11_149 l_0_11_149)))
 (let ((?x65271 (* l_0_11_148 l_0_11_148)))
 (let ((?x65269 (* l_0_11_147 l_0_11_147)))
 (let ((?x65267 (* l_0_11_146 l_0_11_146)))
 (let ((?x65262 (* l_0_11_105 l_0_11_105)))
 (let ((?x65260 (* l_0_11_104 l_0_11_104)))
 (let ((?x65258 (* l_0_11_103 l_0_11_103)))
 (let ((?x65259 (- (- (* (- l_0_11_101) l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x65258)))
 (let ((?x65263 (- (- ?x65259 ?x65260) ?x65262)))
 (= (+ (+ (+ (+ (+ ?x65263 ?x65267) ?x65269) ?x65271) ?x65273) ?x65275) 0.0))))))))))))
(assert
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65323 (* ?x64325 l_0_11_161)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65321 (* ?x64320 l_0_11_160)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65319 (* ?x64317 l_0_11_159)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65317 (* ?x64314 l_0_11_158)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65315 (* ?x64311 l_0_11_157)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65313 (* ?x64300 l_0_11_116)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65311 (* ?x64297 l_0_11_115)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65309 (* ?x64286 l_0_11_114)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65307 (* ?x64281 l_0_11_113)))
 (let ((?x65314 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_112) ?x65307) ?x65309) ?x65311) ?x65313)))
 (let ((?x65324 (+ (+ (+ (+ (+ ?x65314 ?x65315) ?x65317) ?x65319) ?x65321) ?x65323)))
 (= ?x65324 0.0))))))))))))))))))))))
(assert
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65374 (* ?x64325 l_0_11_168)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65372 (* ?x64320 l_0_11_167)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65370 (* ?x64317 l_0_11_166)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65368 (* ?x64314 l_0_11_165)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65366 (* ?x64311 l_0_11_164)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65364 (* ?x64300 l_0_11_123)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65362 (* ?x64297 l_0_11_122)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65360 (* ?x64286 l_0_11_121)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65358 (* ?x64281 l_0_11_120)))
 (let ((?x65365 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_119) ?x65358) ?x65360) ?x65362) ?x65364)))
 (let ((?x65375 (+ (+ (+ (+ (+ ?x65365 ?x65366) ?x65368) ?x65370) ?x65372) ?x65374)))
 (= ?x65375 0.0))))))))))))))))))))))
(assert
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65440 (* ?x64325 l_0_11_176)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65438 (* ?x64320 l_0_11_175)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65436 (* ?x64317 l_0_11_174)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65434 (* ?x64314 l_0_11_173)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65432 (* ?x64311 l_0_11_172)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65430 (* ?x64300 l_0_11_131)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65428 (* ?x64297 l_0_11_130)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65426 (* ?x64286 l_0_11_129)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65424 (* ?x64281 l_0_11_128)))
 (let ((?x65431 (- (- (- (- (* (* (- 2.0) l_0_11_101) l_0_11_127) ?x65424) ?x65426) ?x65428) ?x65430)))
 (let ((?x65441 (+ (+ (+ (+ (+ ?x65431 ?x65432) ?x65434) ?x65436) ?x65438) ?x65440)))
 (= ?x65441 0.0))))))))))))))))))))))
(assert
 (let ((?x67708 (* l_0_11_163 l_0_11_163)))
 (let ((?x67706 (* l_0_11_162 l_0_11_162)))
 (let ((?x67704 (* l_0_11_161 l_0_11_161)))
 (let ((?x67702 (* l_0_11_160 l_0_11_160)))
 (let ((?x67700 (* l_0_11_159 l_0_11_159)))
 (let ((?x67698 (* l_0_11_158 l_0_11_158)))
 (let ((?x67696 (* l_0_11_157 l_0_11_157)))
 (let ((?x67694 (* l_0_11_118 l_0_11_118)))
 (let ((?x67692 (* l_0_11_117 l_0_11_117)))
 (let ((?x67683 (* l_0_11_116 l_0_11_116)))
 (let ((?x67679 (* l_0_11_115 l_0_11_115)))
 (let ((?x43996 (* l_0_11_114 l_0_11_114)))
 (let ((?x55094 (- (- (* (- l_0_11_112) l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x43996)))
 (let ((?x67701 (+ (+ (+ (- (- (- (- ?x55094 ?x67679) ?x67683) ?x67692) ?x67694) ?x67696) ?x67698) ?x67700)))
 (= (+ (+ (+ (+ ?x67701 ?x67702) ?x67704) ?x67706) ?x67708) 0.0))))))))))))))))
(assert
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67774 (* ?x67773 l_0_11_170)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67771 (* ?x67770 l_0_11_169)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67768 (* ?x67767 l_0_11_168)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67765 (* ?x67764 l_0_11_167)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67762 (* ?x67761 l_0_11_166)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67759 (* ?x67758 l_0_11_165)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67756 (* ?x67755 l_0_11_164)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67753 (* ?x67752 l_0_11_125)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67750 (* ?x67749 l_0_11_124)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67747 (* ?x67746 l_0_11_123)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67744 (* ?x67743 l_0_11_122)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x67741 (* ?x54402 l_0_11_121)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x67739 (* ?x54412 l_0_11_120)))
 (let ((?x67748 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_119) ?x67739) ?x67741) ?x67744) ?x67747)))
 (let ((?x67769 (+ (+ (+ (+ (+ (- (- ?x67748 ?x67750) ?x67753) ?x67756) ?x67759) ?x67762) ?x67765) ?x67768)))
 (= (+ (+ ?x67769 ?x67771) ?x67774) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67834 (* ?x67773 l_0_11_178)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67832 (* ?x67770 l_0_11_177)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67830 (* ?x67767 l_0_11_176)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67828 (* ?x67764 l_0_11_175)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67826 (* ?x67761 l_0_11_174)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67824 (* ?x67758 l_0_11_173)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67822 (* ?x67755 l_0_11_172)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67818 (* ?x67752 l_0_11_133)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67816 (* ?x67749 l_0_11_132)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67804 (* ?x67746 l_0_11_131)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67801 (* ?x67743 l_0_11_130)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x55332 (* ?x54402 l_0_11_129)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x44054 (* ?x54412 l_0_11_128)))
 (let ((?x67815 (- (- (- (- (* (* (- 2.0) l_0_11_112) l_0_11_127) ?x44054) ?x55332) ?x67801) ?x67804)))
 (let ((?x67819 (- (- ?x67815 ?x67816) ?x67818)))
 (let ((?x68197 (+ (+ (+ (+ (+ (+ (+ ?x67819 ?x67822) ?x67824) ?x67826) ?x67828) ?x67830) ?x67832) ?x67834)))
 (= ?x68197 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x67906 (* l_0_11_171 l_0_11_171)))
 (let ((?x67904 (* l_0_11_170 l_0_11_170)))
 (let ((?x67902 (* l_0_11_169 l_0_11_169)))
 (let ((?x67900 (* l_0_11_168 l_0_11_168)))
 (let ((?x67898 (* l_0_11_167 l_0_11_167)))
 (let ((?x67896 (* l_0_11_166 l_0_11_166)))
 (let ((?x67894 (* l_0_11_165 l_0_11_165)))
 (let ((?x67892 (* l_0_11_164 l_0_11_164)))
 (let ((?x67890 (* l_0_11_126 l_0_11_126)))
 (let ((?x67888 (* l_0_11_125 l_0_11_125)))
 (let ((?x67886 (* l_0_11_124 l_0_11_124)))
 (let ((?x67884 (* l_0_11_123 l_0_11_123)))
 (let ((?x67882 (* l_0_11_122 l_0_11_122)))
 (let ((?x67880 (* l_0_11_121 l_0_11_121)))
 (let ((?x67881 (- (- (* (- l_0_11_119) l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67880)))
 (let ((?x67895 (+ (+ (- (- (- (- (- ?x67881 ?x67882) ?x67884) ?x67886) ?x67888) ?x67890) ?x67892) ?x67894)))
 (= (+ (+ (+ (+ (+ (+ ?x67895 ?x67896) ?x67898) ?x67900) ?x67902) ?x67904) ?x67906) 0.0))))))))))))))))))
(assert
 (let ((?x67975 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67972 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67969 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67966 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67963 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67960 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67957 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67954 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67951 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67948 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67945 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67942 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67939 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67936 (* ?x54501 l_0_11_129)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67934 (* ?x54503 l_0_11_128)))
 (let ((?x67943 (- (- (- (- (* (* (- 2.0) l_0_11_119) l_0_11_127) ?x67934) ?x67936) ?x67939) ?x67942)))
 (let ((?x67964 (+ (+ (+ (+ (- (- (- ?x67943 ?x67945) ?x67948) ?x67951) ?x67954) ?x67957) ?x67960) ?x67963)))
 (= (+ (+ (+ (+ ?x67964 ?x67966) ?x67969) ?x67972) ?x67975) 0.0)))))))))))))))))))))
(assert
 (let ((?x68063 (* l_0_11_180 l_0_11_180)))
 (let ((?x68061 (* l_0_11_179 l_0_11_179)))
 (let ((?x68059 (* l_0_11_178 l_0_11_178)))
 (let ((?x68057 (* l_0_11_177 l_0_11_177)))
 (let ((?x68055 (* l_0_11_176 l_0_11_176)))
 (let ((?x68053 (* l_0_11_175 l_0_11_175)))
 (let ((?x68051 (* l_0_11_174 l_0_11_174)))
 (let ((?x68049 (* l_0_11_173 l_0_11_173)))
 (let ((?x68047 (* l_0_11_172 l_0_11_172)))
 (let ((?x68045 (* l_0_11_135 l_0_11_135)))
 (let ((?x68043 (* l_0_11_134 l_0_11_134)))
 (let ((?x68041 (* l_0_11_133 l_0_11_133)))
 (let ((?x68039 (* l_0_11_132 l_0_11_132)))
 (let ((?x68026 (* l_0_11_131 l_0_11_131)))
 (let ((?x68023 (* l_0_11_130 l_0_11_130)))
 (let ((?x68019 (* l_0_11_129 l_0_11_129)))
 (let ((?x68021 (- (- (* (- l_0_11_127) l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x68019)))
 (let ((?x68048 (+ (- (- (- (- (- (- ?x68021 ?x68023) ?x68026) ?x68039) ?x68041) ?x68043) ?x68045) ?x68047)))
 (let ((?x68062 (+ (+ (+ (+ (+ (+ (+ ?x68048 ?x68049) ?x68051) ?x68053) ?x68055) ?x68057) ?x68059) ?x68061)))
 (= (+ ?x68062 ?x68063) 0.0)))))))))))))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54657 (* ?x66077 l_0_11_92)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x16508 (* ?x53770 l_0_11_227)))
 (let ((?x68204 (- (* (* (- 2.0) l_0_11_136) l_0_11_137) (* (* 2.0 l_0_11_182) l_0_11_209))))
 (let ((?x68209 (- (- (- ?x68204 (* (* 2.0 l_0_11_183) l_0_11_210)) ?x16508) (* (* 2.0 l_0_11_272) l_0_11_299))))
 (let ((?x68213 (- (- ?x68209 (* (* 2.0 l_0_11_273) l_0_11_300)) (* (* 2.0 l_0_11_317) l_0_11_344))))
 (let ((?x68217 (- (- ?x68213 (* (* 2.0 l_0_11_318) l_0_11_345)) (* (* 2.0 l_0_11_362) l_0_11_389))))
 (= (+ (- ?x68217 (* (* 2.0 l_0_11_363) l_0_11_390)) ?x54657) 0.0))))))))))
(assert
 (let ((?x66077 (* 2.0 l_0_11_91)))
 (let ((?x54678 (* ?x66077 l_0_11_97)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65736 (* ?x53770 l_0_11_232)))
 (let ((?x68278 (- (* (* (- 2.0) l_0_11_136) l_0_11_142) (* (* 2.0 l_0_11_187) l_0_11_209))))
 (let ((?x68282 (- (- ?x68278 (* (* 2.0 l_0_11_188) l_0_11_210)) (* (* 2.0 l_0_11_189) l_0_11_211))))
 (let ((?x68287 (- (- (- ?x68282 (* (* 2.0 l_0_11_190) l_0_11_212)) ?x65736) (* (* 2.0 l_0_11_277) l_0_11_299))))
 (let ((?x68291 (- (- ?x68287 (* (* 2.0 l_0_11_278) l_0_11_300)) (* (* 2.0 l_0_11_279) l_0_11_301))))
 (let ((?x68295 (- (- ?x68291 (* (* 2.0 l_0_11_280) l_0_11_302)) (* (* 2.0 l_0_11_322) l_0_11_344))))
 (let ((?x68299 (- (- ?x68295 (* (* 2.0 l_0_11_323) l_0_11_345)) (* (* 2.0 l_0_11_324) l_0_11_346))))
 (let ((?x68303 (- (- ?x68299 (* (* 2.0 l_0_11_325) l_0_11_347)) (* (* 2.0 l_0_11_367) l_0_11_389))))
 (let ((?x68307 (- (- ?x68303 (* (* 2.0 l_0_11_368) l_0_11_390)) (* (* 2.0 l_0_11_369) l_0_11_391))))
 (= (+ (- ?x68307 (* (* 2.0 l_0_11_370) l_0_11_392)) ?x54678) 0.0))))))))))))))
(assert
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65815 (* ?x53770 l_0_11_236)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x65112 (* ?x63397 l_0_11_146)))
 (let ((?x42342 (* 2.0 l_0_11_101)))
 (let ((?x65110 (* ?x42342 l_0_11_91)))
 (let ((?x68409 (- (- (- ?x65110 ?x65112) (* (* 2.0 l_0_11_191) l_0_11_209)) (* (* 2.0 l_0_11_192) l_0_11_210))))
 (let ((?x68415 (- (- ?x68409 (* (* 2.0 l_0_11_193) l_0_11_211)) (* (* 2.0 l_0_11_194) l_0_11_212))))
 (let ((?x68422 (- (- (- ?x68415 (* (* 2.0 l_0_11_195) l_0_11_213)) ?x65815) (* (* 2.0 l_0_11_281) l_0_11_299))))
 (let ((?x68428 (- (- ?x68422 (* (* 2.0 l_0_11_282) l_0_11_300)) (* (* 2.0 l_0_11_283) l_0_11_301))))
 (let ((?x68434 (- (- ?x68428 (* (* 2.0 l_0_11_284) l_0_11_302)) (* (* 2.0 l_0_11_285) l_0_11_303))))
 (let ((?x68440 (- (- ?x68434 (* (* 2.0 l_0_11_326) l_0_11_344)) (* (* 2.0 l_0_11_327) l_0_11_345))))
 (let ((?x68446 (- (- ?x68440 (* (* 2.0 l_0_11_328) l_0_11_346)) (* (* 2.0 l_0_11_329) l_0_11_347))))
 (let ((?x68452 (- (- ?x68446 (* (* 2.0 l_0_11_330) l_0_11_348)) (* (* 2.0 l_0_11_371) l_0_11_389))))
 (let ((?x68458 (- (- ?x68452 (* (* 2.0 l_0_11_372) l_0_11_390)) (* (* 2.0 l_0_11_373) l_0_11_391))))
 (let ((?x68464 (- (- ?x68458 (* (* 2.0 l_0_11_374) l_0_11_392)) (* (* 2.0 l_0_11_375) l_0_11_393))))
 (= ?x68464 0.0))))))))))))))))))
(assert
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65887 (* ?x53770 l_0_11_241)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x63398 (* ?x63397 l_0_11_151)))
 (let ((?x63266 (* 2.0 l_0_11_106)))
 (let ((?x63385 (* ?x63266 l_0_11_91)))
 (let ((?x68565 (- (- (- ?x63385 ?x63398) (* (* 2.0 l_0_11_196) l_0_11_209)) (* (* 2.0 l_0_11_197) l_0_11_210))))
 (let ((?x68569 (- (- ?x68565 (* (* 2.0 l_0_11_198) l_0_11_211)) (* (* 2.0 l_0_11_199) l_0_11_212))))
 (let ((?x68573 (- (- ?x68569 (* (* 2.0 l_0_11_200) l_0_11_213)) (* (* 2.0 l_0_11_201) l_0_11_214))))
 (let ((?x68578 (- (- (- ?x68573 ?x65887) (* (* 2.0 l_0_11_286) l_0_11_299)) (* (* 2.0 l_0_11_287) l_0_11_300))))
 (let ((?x68582 (- (- ?x68578 (* (* 2.0 l_0_11_288) l_0_11_301)) (* (* 2.0 l_0_11_289) l_0_11_302))))
 (let ((?x68586 (- (- ?x68582 (* (* 2.0 l_0_11_290) l_0_11_303)) (* (* 2.0 l_0_11_291) l_0_11_304))))
 (let ((?x68590 (- (- ?x68586 (* (* 2.0 l_0_11_331) l_0_11_344)) (* (* 2.0 l_0_11_332) l_0_11_345))))
 (let ((?x68594 (- (- ?x68590 (* (* 2.0 l_0_11_333) l_0_11_346)) (* (* 2.0 l_0_11_334) l_0_11_347))))
 (let ((?x68598 (- (- ?x68594 (* (* 2.0 l_0_11_335) l_0_11_348)) (* (* 2.0 l_0_11_336) l_0_11_349))))
 (let ((?x68602 (- (- ?x68598 (* (* 2.0 l_0_11_376) l_0_11_389)) (* (* 2.0 l_0_11_377) l_0_11_390))))
 (let ((?x68606 (- (- ?x68602 (* (* 2.0 l_0_11_378) l_0_11_391)) (* (* 2.0 l_0_11_379) l_0_11_392))))
 (let ((?x68610 (- (- ?x68606 (* (* 2.0 l_0_11_380) l_0_11_393)) (* (* 2.0 l_0_11_381) l_0_11_394))))
 (= ?x68610 0.0))))))))))))))))))))
(assert
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x65969 (* ?x53770 l_0_11_247)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67416 (* ?x63397 l_0_11_157)))
 (let ((?x68714 (- (- (* (* 2.0 l_0_11_112) l_0_11_91) ?x67416) (* (* 2.0 l_0_11_202) l_0_11_209))))
 (let ((?x68718 (- (- ?x68714 (* (* 2.0 l_0_11_203) l_0_11_210)) (* (* 2.0 l_0_11_204) l_0_11_211))))
 (let ((?x68722 (- (- ?x68718 (* (* 2.0 l_0_11_205) l_0_11_212)) (* (* 2.0 l_0_11_206) l_0_11_213))))
 (let ((?x68726 (- (- ?x68722 (* (* 2.0 l_0_11_207) l_0_11_214)) (* (* 2.0 l_0_11_208) l_0_11_215))))
 (let ((?x68731 (- (- (- ?x68726 ?x65969) (* (* 2.0 l_0_11_292) l_0_11_299)) (* (* 2.0 l_0_11_293) l_0_11_300))))
 (let ((?x68735 (- (- ?x68731 (* (* 2.0 l_0_11_294) l_0_11_301)) (* (* 2.0 l_0_11_295) l_0_11_302))))
 (let ((?x68739 (- (- ?x68735 (* (* 2.0 l_0_11_296) l_0_11_303)) (* (* 2.0 l_0_11_297) l_0_11_304))))
 (let ((?x68743 (- (- ?x68739 (* (* 2.0 l_0_11_298) l_0_11_305)) (* (* 2.0 l_0_11_337) l_0_11_344))))
 (let ((?x68747 (- (- ?x68743 (* (* 2.0 l_0_11_338) l_0_11_345)) (* (* 2.0 l_0_11_339) l_0_11_346))))
 (let ((?x68751 (- (- ?x68747 (* (* 2.0 l_0_11_340) l_0_11_347)) (* (* 2.0 l_0_11_341) l_0_11_348))))
 (let ((?x68755 (- (- ?x68751 (* (* 2.0 l_0_11_342) l_0_11_349)) (* (* 2.0 l_0_11_343) l_0_11_350))))
 (let ((?x68759 (- (- ?x68755 (* (* 2.0 l_0_11_382) l_0_11_389)) (* (* 2.0 l_0_11_383) l_0_11_390))))
 (let ((?x68763 (- (- ?x68759 (* (* 2.0 l_0_11_384) l_0_11_391)) (* (* 2.0 l_0_11_385) l_0_11_392))))
 (let ((?x68767 (- (- ?x68763 (* (* 2.0 l_0_11_386) l_0_11_393)) (* (* 2.0 l_0_11_387) l_0_11_394))))
 (= (- ?x68767 (* (* 2.0 l_0_11_388) l_0_11_395)) 0.0))))))))))))))))))))
(assert
 (let ((?x68917 (* l_0_11_396 l_0_11_396)))
 (let ((?x68915 (* l_0_11_395 l_0_11_395)))
 (let ((?x68913 (* l_0_11_394 l_0_11_394)))
 (let ((?x68911 (* l_0_11_393 l_0_11_393)))
 (let ((?x68909 (* l_0_11_392 l_0_11_392)))
 (let ((?x68907 (* l_0_11_391 l_0_11_391)))
 (let ((?x68905 (* l_0_11_390 l_0_11_390)))
 (let ((?x68903 (* l_0_11_389 l_0_11_389)))
 (let ((?x68901 (* l_0_11_351 l_0_11_351)))
 (let ((?x68899 (* l_0_11_350 l_0_11_350)))
 (let ((?x68897 (* l_0_11_349 l_0_11_349)))
 (let ((?x68895 (* l_0_11_348 l_0_11_348)))
 (let ((?x68893 (* l_0_11_347 l_0_11_347)))
 (let ((?x68891 (* l_0_11_346 l_0_11_346)))
 (let ((?x68889 (* l_0_11_345 l_0_11_345)))
 (let ((?x68887 (* l_0_11_344 l_0_11_344)))
 (let ((?x68885 (* l_0_11_306 l_0_11_306)))
 (let ((?x68883 (* l_0_11_305 l_0_11_305)))
 (let ((?x68881 (* l_0_11_304 l_0_11_304)))
 (let ((?x68879 (* l_0_11_303 l_0_11_303)))
 (let ((?x68877 (* l_0_11_302 l_0_11_302)))
 (let ((?x68875 (* l_0_11_301 l_0_11_301)))
 (let ((?x68873 (* l_0_11_300 l_0_11_300)))
 (let ((?x68871 (* l_0_11_299 l_0_11_299)))
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x66056 (* ?x53770 l_0_11_254)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x67423 (* ?x63397 l_0_11_164)))
 (let ((?x54475 (* 2.0 l_0_11_119)))
 (let ((?x68104 (* ?x54475 l_0_11_91)))
 (let ((?x68851 (- (- (- ?x68104 ?x67423) (* (* 1.0 l_0_11_209) l_0_11_209)) (* (* 1.0 l_0_11_210) l_0_11_210))))
 (let ((?x68857 (- (- ?x68851 (* (* 1.0 l_0_11_211) l_0_11_211)) (* (* 1.0 l_0_11_212) l_0_11_212))))
 (let ((?x68863 (- (- ?x68857 (* (* 1.0 l_0_11_213) l_0_11_213)) (* (* 1.0 l_0_11_214) l_0_11_214))))
 (let ((?x68869 (- (- ?x68863 (* (* 1.0 l_0_11_215) l_0_11_215)) (* (* 1.0 l_0_11_216) l_0_11_216))))
 (let ((?x68882 (- (- (- (- (- (- (- ?x68869 ?x66056) ?x68871) ?x68873) ?x68875) ?x68877) ?x68879) ?x68881)))
 (let ((?x68896 (- (- (- (- (- (- (- ?x68882 ?x68883) ?x68885) ?x68887) ?x68889) ?x68891) ?x68893) ?x68895)))
 (let ((?x68910 (- (- (- (- (- (- (- ?x68896 ?x68897) ?x68899) ?x68901) ?x68903) ?x68905) ?x68907) ?x68909)))
 (= (- (- (- (- ?x68910 ?x68911) ?x68913) ?x68915) ?x68917) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x53770 (* 2.0 l_0_11_226)))
 (let ((?x66140 (* ?x53770 l_0_11_262)))
 (let ((?x63397 (* 2.0 l_0_11_136)))
 (let ((?x54801 (* ?x63397 l_0_11_172)))
 (let ((?x68979 (- (- (* (* 2.0 l_0_11_127) l_0_11_91) ?x54801) (* (* 2.0 l_0_11_209) l_0_11_217))))
 (let ((?x68985 (- (- ?x68979 (* (* 2.0 l_0_11_210) l_0_11_218)) (* (* 2.0 l_0_11_211) l_0_11_219))))
 (let ((?x68991 (- (- ?x68985 (* (* 2.0 l_0_11_212) l_0_11_220)) (* (* 2.0 l_0_11_213) l_0_11_221))))
 (let ((?x68997 (- (- ?x68991 (* (* 2.0 l_0_11_214) l_0_11_222)) (* (* 2.0 l_0_11_215) l_0_11_223))))
 (let ((?x69004 (- (- (- ?x68997 (* (* 2.0 l_0_11_216) l_0_11_224)) ?x66140) (* (* 2.0 l_0_11_299) l_0_11_307))))
 (let ((?x69010 (- (- ?x69004 (* (* 2.0 l_0_11_300) l_0_11_308)) (* (* 2.0 l_0_11_301) l_0_11_309))))
 (let ((?x69016 (- (- ?x69010 (* (* 2.0 l_0_11_302) l_0_11_310)) (* (* 2.0 l_0_11_303) l_0_11_311))))
 (let ((?x69022 (- (- ?x69016 (* (* 2.0 l_0_11_304) l_0_11_312)) (* (* 2.0 l_0_11_305) l_0_11_313))))
 (let ((?x69028 (- (- ?x69022 (* (* 2.0 l_0_11_306) l_0_11_314)) (* (* 2.0 l_0_11_344) l_0_11_352))))
 (let ((?x69034 (- (- ?x69028 (* (* 2.0 l_0_11_345) l_0_11_353)) (* (* 2.0 l_0_11_346) l_0_11_354))))
 (let ((?x69040 (- (- ?x69034 (* (* 2.0 l_0_11_347) l_0_11_355)) (* (* 2.0 l_0_11_348) l_0_11_356))))
 (let ((?x69046 (- (- ?x69040 (* (* 2.0 l_0_11_349) l_0_11_357)) (* (* 2.0 l_0_11_350) l_0_11_358))))
 (let ((?x69052 (- (- ?x69046 (* (* 2.0 l_0_11_351) l_0_11_359)) (* (* 2.0 l_0_11_389) l_0_11_397))))
 (let ((?x69058 (- (- ?x69052 (* (* 2.0 l_0_11_390) l_0_11_398)) (* (* 2.0 l_0_11_391) l_0_11_399))))
 (let ((?x69064 (- (- ?x69058 (* (* 2.0 l_0_11_392) l_0_11_400)) (* (* 2.0 l_0_11_393) l_0_11_401))))
 (let ((?x69070 (- (- ?x69064 (* (* 2.0 l_0_11_394) l_0_11_402)) (* (* 2.0 l_0_11_395) l_0_11_403))))
 (= (- ?x69070 (* (* 2.0 l_0_11_396) l_0_11_404)) 0.0))))))))))))))))))))))
(assert
 (let ((?x67457 (* l_0_11_93 l_0_11_93)))
 (let ((?x67455 (* l_0_11_92 l_0_11_92)))
 (let ((?x42960 (* l_0_11_228 l_0_11_228)))
 (let ((?x30782 (* l_0_11_227 l_0_11_227)))
 (let ((?x69146 (- (- (* (- l_0_11_137) l_0_11_137) (* l_0_11_138 l_0_11_138)) ?x30782)))
 (= (+ (+ (- ?x69146 ?x42960) ?x67455) ?x67457) 0.0)))))))
(assert
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66259 (* ?x66212 l_0_11_237)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66257 (* ?x66209 l_0_11_236)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x65193 (* ?x63603 l_0_11_147)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x65191 (* ?x63600 l_0_11_146)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65189 (* ?x64281 l_0_11_93)))
 (let ((?x69161 (- (- (- (+ (* (* 2.0 l_0_11_101) l_0_11_92) ?x65189) ?x65191) ?x65193) ?x66257)))
 (= (- ?x69161 ?x66259) 0.0)))))))))))))
(assert
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66280 (* ?x66212 l_0_11_242)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66278 (* ?x66209 l_0_11_241)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x63604 (* ?x63603 l_0_11_152)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x63601 (* ?x63600 l_0_11_151)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x63593 (* ?x63273 l_0_11_93)))
 (let ((?x57834 (- (- (- (+ (* (* 2.0 l_0_11_106) l_0_11_92) ?x63593) ?x63601) ?x63604) ?x66278)))
 (= (- ?x57834 ?x66280) 0.0)))))))))))))
(assert
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66297 (* ?x66212 l_0_11_248)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66295 (* ?x66209 l_0_11_247)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x43805 (* ?x63603 l_0_11_158)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x43802 (* ?x63600 l_0_11_157)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x43799 (* ?x54412 l_0_11_93)))
 (let ((?x45820 (- (- (- (+ (* (* 2.0 l_0_11_112) l_0_11_92) ?x43799) ?x43802) ?x43805) ?x66295)))
 (= (- ?x45820 ?x66297) 0.0)))))))))))))
(assert
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66312 (* ?x66212 l_0_11_255)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x43045 (* ?x66209 l_0_11_254)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67482 (* ?x63603 l_0_11_165)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67480 (* ?x63600 l_0_11_164)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67478 (* ?x54503 l_0_11_93)))
 (let ((?x69179 (- (- (- (+ (* (* 2.0 l_0_11_119) l_0_11_92) ?x67478) ?x67480) ?x67482) ?x43045)))
 (= (- ?x69179 ?x66312) 0.0)))))))))))))
(assert
 (let ((?x66212 (* 2.0 l_0_11_228)))
 (let ((?x66351 (* ?x66212 l_0_11_263)))
 (let ((?x66209 (* 2.0 l_0_11_227)))
 (let ((?x66349 (* ?x66209 l_0_11_262)))
 (let ((?x63603 (* 2.0 l_0_11_138)))
 (let ((?x67501 (* ?x63603 l_0_11_173)))
 (let ((?x63600 (* 2.0 l_0_11_137)))
 (let ((?x67499 (* ?x63600 l_0_11_172)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67497 (* ?x67267 l_0_11_93)))
 (let ((?x69190 (- (- (- (+ (* (* 2.0 l_0_11_127) l_0_11_92) ?x67497) ?x67499) ?x67501) ?x66349)))
 (= (- ?x69190 ?x66351) 0.0)))))))))))))
(assert
 (let ((?x67571 (* l_0_11_99 l_0_11_99)))
 (let ((?x67569 (* l_0_11_98 l_0_11_98)))
 (let ((?x67567 (* l_0_11_97 l_0_11_97)))
 (let ((?x66586 (* l_0_11_235 l_0_11_235)))
 (let ((?x66584 (* l_0_11_234 l_0_11_234)))
 (let ((?x66582 (* l_0_11_233 l_0_11_233)))
 (let ((?x66580 (* l_0_11_232 l_0_11_232)))
 (let ((?x67565 (* l_0_11_145 l_0_11_145)))
 (let ((?x67563 (* l_0_11_144 l_0_11_144)))
 (let ((?x67561 (* l_0_11_143 l_0_11_143)))
 (let ((?x57906 (- (- (* l_0_11_100 l_0_11_100) (* l_0_11_142 l_0_11_142)) ?x67561)))
 (let ((?x57913 (+ (- (- (- (- (- (- ?x57906 ?x67563) ?x67565) ?x66580) ?x66582) ?x66584) ?x66586) ?x67567)))
 (= (+ (+ ?x57913 ?x67569) ?x67571) 0.0))))))))))))))
(assert
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66623 (* ?x53661 l_0_11_244)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66621 (* ?x53663 l_0_11_243)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66619 (* ?x29503 l_0_11_242)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66617 (* ?x42329 l_0_11_241)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x64061 (* ?x64060 l_0_11_154)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x64058 (* ?x64057 l_0_11_153)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x64055 (* ?x64054 l_0_11_152)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x64052 (* ?x64051 l_0_11_151)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64049 (* ?x63276 l_0_11_99)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64047 (* ?x63273 l_0_11_98)))
 (let ((?x63266 (* 2.0 l_0_11_106)))
 (let ((?x64038 (* ?x63266 l_0_11_97)))
 (let ((?x64033 (* 2.0 l_0_11_100)))
 (let ((?x64035 (* ?x64033 l_0_11_109)))
 (let ((?x69208 (- (- (- (- (+ (+ (+ ?x64035 ?x64038) ?x64047) ?x64049) ?x64052) ?x64055) ?x64058) ?x64061)))
 (= (- (- (- (- ?x69208 ?x66617) ?x66619) ?x66621) ?x66623) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66651 (* ?x53661 l_0_11_250)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66649 (* ?x53663 l_0_11_249)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66647 (* ?x29503 l_0_11_248)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66645 (* ?x42329 l_0_11_247)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x33283 (* ?x64060 l_0_11_160)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x54983 (* ?x64057 l_0_11_159)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x55009 (* ?x64054 l_0_11_158)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x43883 (* ?x64051 l_0_11_157)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x54986 (* ?x54402 l_0_11_99)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x55013 (* ?x54412 l_0_11_98)))
 (let ((?x54443 (* 2.0 l_0_11_112)))
 (let ((?x43860 (* ?x54443 l_0_11_97)))
 (let ((?x57954 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_115) ?x43860) ?x55013) ?x54986) ?x43883)))
 (let ((?x69227 (- (- (- (- (- (- (- ?x57954 ?x55009) ?x54983) ?x33283) ?x66645) ?x66647) ?x66649) ?x66651)))
 (= ?x69227 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66689 (* ?x53661 l_0_11_257)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66687 (* ?x53663 l_0_11_256)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66685 (* ?x29503 l_0_11_255)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66683 (* ?x42329 l_0_11_254)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67627 (* ?x64060 l_0_11_167)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67625 (* ?x64057 l_0_11_166)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67623 (* ?x64054 l_0_11_165)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67621 (* ?x64051 l_0_11_164)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67619 (* ?x54501 l_0_11_99)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67610 (* ?x54503 l_0_11_98)))
 (let ((?x54475 (* 2.0 l_0_11_119)))
 (let ((?x67606 (* ?x54475 l_0_11_97)))
 (let ((?x58030 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_122) ?x67606) ?x67610) ?x67619) ?x67621)))
 (let ((?x45936 (- (- (- (- (- (- (- ?x58030 ?x67623) ?x67625) ?x67627) ?x66683) ?x66685) ?x66687) ?x66689)))
 (= ?x45936 0.0))))))))))))))))))))))))))
(assert
 (let ((?x53661 (* 2.0 l_0_11_235)))
 (let ((?x66744 (* ?x53661 l_0_11_265)))
 (let ((?x53663 (* 2.0 l_0_11_234)))
 (let ((?x66742 (* ?x53663 l_0_11_264)))
 (let ((?x29503 (* 2.0 l_0_11_233)))
 (let ((?x66740 (* ?x29503 l_0_11_263)))
 (let ((?x42329 (* 2.0 l_0_11_232)))
 (let ((?x66738 (* ?x42329 l_0_11_262)))
 (let ((?x64060 (* 2.0 l_0_11_145)))
 (let ((?x67665 (* ?x64060 l_0_11_175)))
 (let ((?x64057 (* 2.0 l_0_11_144)))
 (let ((?x67663 (* ?x64057 l_0_11_174)))
 (let ((?x64054 (* 2.0 l_0_11_143)))
 (let ((?x67661 (* ?x64054 l_0_11_173)))
 (let ((?x64051 (* 2.0 l_0_11_142)))
 (let ((?x67659 (* ?x64051 l_0_11_172)))
 (let ((?x67270 (* 2.0 l_0_11_129)))
 (let ((?x67657 (* ?x67270 l_0_11_99)))
 (let ((?x67267 (* 2.0 l_0_11_128)))
 (let ((?x67648 (* ?x67267 l_0_11_98)))
 (let ((?x67265 (* 2.0 l_0_11_127)))
 (let ((?x67644 (* ?x67265 l_0_11_97)))
 (let ((?x58087 (- (+ (+ (+ (* (* 2.0 l_0_11_100) l_0_11_130) ?x67644) ?x67648) ?x67657) ?x67659)))
 (let ((?x58103 (- (- (- (- (- (- (- ?x58087 ?x67661) ?x67663) ?x67665) ?x66738) ?x66740) ?x66742) ?x66744)))
 (= ?x58103 0.0))))))))))))))))))))))))))
(assert
 (let ((?x66794 (* l_0_11_240 l_0_11_240)))
 (let ((?x66792 (* l_0_11_239 l_0_11_239)))
 (let ((?x66790 (* l_0_11_238 l_0_11_238)))
 (let ((?x66788 (* l_0_11_237 l_0_11_237)))
 (let ((?x66786 (* l_0_11_236 l_0_11_236)))
 (let ((?x65275 (* l_0_11_150 l_0_11_150)))
 (let ((?x65273 (* l_0_11_149 l_0_11_149)))
 (let ((?x65271 (* l_0_11_148 l_0_11_148)))
 (let ((?x65269 (* l_0_11_147 l_0_11_147)))
 (let ((?x65267 (* l_0_11_146 l_0_11_146)))
 (let ((?x65262 (* l_0_11_105 l_0_11_105)))
 (let ((?x65260 (* l_0_11_104 l_0_11_104)))
 (let ((?x65258 (* l_0_11_103 l_0_11_103)))
 (let ((?x21874 (+ (+ (* l_0_11_101 l_0_11_101) (* l_0_11_102 l_0_11_102)) ?x65258)))
 (let ((?x69239 (- (- (- (- (- (+ (+ ?x21874 ?x65260) ?x65262) ?x65267) ?x65269) ?x65271) ?x65273) ?x65275)))
 (= (- (- (- (- (- ?x69239 ?x66786) ?x66788) ?x66790) ?x66792) ?x66794) 0.0)))))))))))))))))
(assert
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66828 (* ?x66827 l_0_11_245)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66825 (* ?x66824 l_0_11_244)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66822 (* ?x66821 l_0_11_243)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x66819 (* ?x66818 l_0_11_242)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x66816 (* ?x66815 l_0_11_241)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x64326 (* ?x64325 l_0_11_155)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x64321 (* ?x64320 l_0_11_154)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x64318 (* ?x64317 l_0_11_153)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x64315 (* ?x64314 l_0_11_152)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x64312 (* ?x64311 l_0_11_151)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x64301 (* ?x64300 l_0_11_110)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x64298 (* ?x64297 l_0_11_109)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x64295 (* ?x64286 l_0_11_108)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x64283 (* ?x64281 l_0_11_107)))
 (let ((?x69255 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_106) ?x64283) ?x64295) ?x64298) ?x64301)))
 (let ((?x69262 (- (- (- (- (- (- (- ?x69255 ?x64312) ?x64315) ?x64318) ?x64321) ?x64326) ?x66816) ?x66819)))
 (= (- (- (- ?x69262 ?x66822) ?x66825) ?x66828) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66862 (* ?x66827 l_0_11_251)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66860 (* ?x66824 l_0_11_250)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66858 (* ?x66821 l_0_11_249)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x66856 (* ?x66818 l_0_11_248)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x66854 (* ?x66815 l_0_11_247)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65323 (* ?x64325 l_0_11_161)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65321 (* ?x64320 l_0_11_160)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65319 (* ?x64317 l_0_11_159)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65317 (* ?x64314 l_0_11_158)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65315 (* ?x64311 l_0_11_157)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65313 (* ?x64300 l_0_11_116)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65311 (* ?x64297 l_0_11_115)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65309 (* ?x64286 l_0_11_114)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65307 (* ?x64281 l_0_11_113)))
 (let ((?x69271 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_112) ?x65307) ?x65309) ?x65311) ?x65313)))
 (let ((?x69278 (- (- (- (- (- (- (- ?x69271 ?x65315) ?x65317) ?x65319) ?x65321) ?x65323) ?x66854) ?x66856)))
 (= (- (- (- ?x69278 ?x66858) ?x66860) ?x66862) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66879 (* ?x66827 l_0_11_258)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x43353 (* ?x66824 l_0_11_257)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x43356 (* ?x66821 l_0_11_256)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x43350 (* ?x66818 l_0_11_255)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x32027 (* ?x66815 l_0_11_254)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65374 (* ?x64325 l_0_11_168)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65372 (* ?x64320 l_0_11_167)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65370 (* ?x64317 l_0_11_166)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65368 (* ?x64314 l_0_11_165)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65366 (* ?x64311 l_0_11_164)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65364 (* ?x64300 l_0_11_123)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65362 (* ?x64297 l_0_11_122)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65360 (* ?x64286 l_0_11_121)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65358 (* ?x64281 l_0_11_120)))
 (let ((?x58444 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_119) ?x65358) ?x65360) ?x65362) ?x65364)))
 (let ((?x46001 (- (- (- (- (- (- (- ?x58444 ?x65366) ?x65368) ?x65370) ?x65372) ?x65374) ?x32027) ?x43350)))
 (= (- (- (- ?x46001 ?x43356) ?x43353) ?x66879) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66827 (* 2.0 l_0_11_240)))
 (let ((?x66901 (* ?x66827 l_0_11_266)))
 (let ((?x66824 (* 2.0 l_0_11_239)))
 (let ((?x66899 (* ?x66824 l_0_11_265)))
 (let ((?x66821 (* 2.0 l_0_11_238)))
 (let ((?x66897 (* ?x66821 l_0_11_264)))
 (let ((?x66818 (* 2.0 l_0_11_237)))
 (let ((?x54163 (* ?x66818 l_0_11_263)))
 (let ((?x66815 (* 2.0 l_0_11_236)))
 (let ((?x43425 (* ?x66815 l_0_11_262)))
 (let ((?x64325 (* 2.0 l_0_11_150)))
 (let ((?x65440 (* ?x64325 l_0_11_176)))
 (let ((?x64320 (* 2.0 l_0_11_149)))
 (let ((?x65438 (* ?x64320 l_0_11_175)))
 (let ((?x64317 (* 2.0 l_0_11_148)))
 (let ((?x65436 (* ?x64317 l_0_11_174)))
 (let ((?x64314 (* 2.0 l_0_11_147)))
 (let ((?x65434 (* ?x64314 l_0_11_173)))
 (let ((?x64311 (* 2.0 l_0_11_146)))
 (let ((?x65432 (* ?x64311 l_0_11_172)))
 (let ((?x64300 (* 2.0 l_0_11_105)))
 (let ((?x65430 (* ?x64300 l_0_11_131)))
 (let ((?x64297 (* 2.0 l_0_11_104)))
 (let ((?x65428 (* ?x64297 l_0_11_130)))
 (let ((?x64286 (* 2.0 l_0_11_103)))
 (let ((?x65426 (* ?x64286 l_0_11_129)))
 (let ((?x64281 (* 2.0 l_0_11_102)))
 (let ((?x65424 (* ?x64281 l_0_11_128)))
 (let ((?x58508 (+ (+ (+ (+ (* (* 2.0 l_0_11_101) l_0_11_127) ?x65424) ?x65426) ?x65428) ?x65430)))
 (let ((?x58462 (- (- (- (- (- (- (- ?x58508 ?x65432) ?x65434) ?x65436) ?x65438) ?x65440) ?x43425) ?x54163)))
 (= (- (- (- ?x58462 ?x66897) ?x66899) ?x66901) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x66935 (* l_0_11_246 l_0_11_246)))
 (let ((?x66933 (* l_0_11_245 l_0_11_245)))
 (let ((?x66931 (* l_0_11_244 l_0_11_244)))
 (let ((?x66929 (* l_0_11_243 l_0_11_243)))
 (let ((?x66927 (* l_0_11_242 l_0_11_242)))
 (let ((?x54223 (* l_0_11_241 l_0_11_241)))
 (let ((?x64536 (* l_0_11_156 l_0_11_156)))
 (let ((?x64534 (* l_0_11_155 l_0_11_155)))
 (let ((?x64532 (* l_0_11_154 l_0_11_154)))
 (let ((?x64530 (* l_0_11_153 l_0_11_153)))
 (let ((?x64528 (* l_0_11_152 l_0_11_152)))
 (let ((?x64526 (* l_0_11_151 l_0_11_151)))
 (let ((?x64524 (* l_0_11_111 l_0_11_111)))
 (let ((?x64522 (* l_0_11_110 l_0_11_110)))
 (let ((?x64520 (* l_0_11_109 l_0_11_109)))
 (let ((?x64518 (* l_0_11_108 l_0_11_108)))
 (let ((?x34940 (+ (+ (* l_0_11_106 l_0_11_106) (* l_0_11_107 l_0_11_107)) ?x64518)))
 (let ((?x69298 (- (- (- (- (+ (+ (+ ?x34940 ?x64520) ?x64522) ?x64524) ?x64526) ?x64528) ?x64530) ?x64532)))
 (let ((?x69305 (- (- (- (- (- (- (- ?x69298 ?x64534) ?x64536) ?x54223) ?x66927) ?x66929) ?x66931) ?x66933)))
 (= (- ?x69305 ?x66935) 0.0)))))))))))))))))))))
(assert
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x66981 (* ?x63133 l_0_11_259)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x66979 (* ?x63130 l_0_11_258)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x66977 (* ?x63127 l_0_11_257)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x66975 (* ?x63124 l_0_11_256)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x66973 (* ?x63121 l_0_11_255)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x66971 (* ?x63118 l_0_11_254)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x64880 (* ?x63303 l_0_11_169)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64878 (* ?x63300 l_0_11_168)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64876 (* ?x63297 l_0_11_167)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64874 (* ?x63294 l_0_11_166)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64872 (* ?x63291 l_0_11_165)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64870 (* ?x63288 l_0_11_164)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64868 (* ?x63285 l_0_11_124)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64866 (* ?x63282 l_0_11_123)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64864 (* ?x63279 l_0_11_122)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64862 (* ?x63276 l_0_11_121)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64860 (* ?x63273 l_0_11_120)))
 (let ((?x69323 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_119) ?x64860) ?x64862) ?x64864) ?x64866)))
 (let ((?x69330 (- (- (- (- (- (- (+ ?x69323 ?x64868) ?x64870) ?x64872) ?x64874) ?x64876) ?x64878) ?x64880)))
 (= (- (- (- (- (- (- ?x69330 ?x66971) ?x66973) ?x66975) ?x66977) ?x66979) ?x66981) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x63133 (* 2.0 l_0_11_246)))
 (let ((?x66996 (* ?x63133 l_0_11_267)))
 (let ((?x63130 (* 2.0 l_0_11_245)))
 (let ((?x66994 (* ?x63130 l_0_11_266)))
 (let ((?x63127 (* 2.0 l_0_11_244)))
 (let ((?x54271 (* ?x63127 l_0_11_265)))
 (let ((?x63124 (* 2.0 l_0_11_243)))
 (let ((?x32418 (* ?x63124 l_0_11_264)))
 (let ((?x63121 (* 2.0 l_0_11_242)))
 (let ((?x54248 (* ?x63121 l_0_11_263)))
 (let ((?x63118 (* 2.0 l_0_11_241)))
 (let ((?x54318 (* ?x63118 l_0_11_262)))
 (let ((?x63303 (* 2.0 l_0_11_156)))
 (let ((?x65001 (* ?x63303 l_0_11_177)))
 (let ((?x63300 (* 2.0 l_0_11_155)))
 (let ((?x64999 (* ?x63300 l_0_11_176)))
 (let ((?x63297 (* 2.0 l_0_11_154)))
 (let ((?x64997 (* ?x63297 l_0_11_175)))
 (let ((?x63294 (* 2.0 l_0_11_153)))
 (let ((?x64995 (* ?x63294 l_0_11_174)))
 (let ((?x63291 (* 2.0 l_0_11_152)))
 (let ((?x64993 (* ?x63291 l_0_11_173)))
 (let ((?x63288 (* 2.0 l_0_11_151)))
 (let ((?x64991 (* ?x63288 l_0_11_172)))
 (let ((?x63285 (* 2.0 l_0_11_111)))
 (let ((?x64989 (* ?x63285 l_0_11_132)))
 (let ((?x63282 (* 2.0 l_0_11_110)))
 (let ((?x64987 (* ?x63282 l_0_11_131)))
 (let ((?x63279 (* 2.0 l_0_11_109)))
 (let ((?x64985 (* ?x63279 l_0_11_130)))
 (let ((?x63276 (* 2.0 l_0_11_108)))
 (let ((?x64983 (* ?x63276 l_0_11_129)))
 (let ((?x63273 (* 2.0 l_0_11_107)))
 (let ((?x64981 (* ?x63273 l_0_11_128)))
 (let ((?x58790 (+ (+ (+ (+ (* (* 2.0 l_0_11_106) l_0_11_127) ?x64981) ?x64983) ?x64985) ?x64987)))
 (let ((?x69349 (- (- (- (- (- (- (+ ?x58790 ?x64989) ?x64991) ?x64993) ?x64995) ?x64997) ?x64999) ?x65001)))
 (= (- (- (- (- (- (- ?x69349 ?x54318) ?x54248) ?x32418) ?x54271) ?x66994) ?x66996) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67059 (* l_0_11_253 l_0_11_253)))
 (let ((?x67057 (* l_0_11_252 l_0_11_252)))
 (let ((?x67055 (* l_0_11_251 l_0_11_251)))
 (let ((?x67053 (* l_0_11_250 l_0_11_250)))
 (let ((?x67050 (* l_0_11_249 l_0_11_249)))
 (let ((?x67048 (* l_0_11_248 l_0_11_248)))
 (let ((?x67046 (* l_0_11_247 l_0_11_247)))
 (let ((?x67708 (* l_0_11_163 l_0_11_163)))
 (let ((?x67706 (* l_0_11_162 l_0_11_162)))
 (let ((?x67704 (* l_0_11_161 l_0_11_161)))
 (let ((?x67702 (* l_0_11_160 l_0_11_160)))
 (let ((?x67700 (* l_0_11_159 l_0_11_159)))
 (let ((?x67698 (* l_0_11_158 l_0_11_158)))
 (let ((?x67696 (* l_0_11_157 l_0_11_157)))
 (let ((?x67694 (* l_0_11_118 l_0_11_118)))
 (let ((?x67692 (* l_0_11_117 l_0_11_117)))
 (let ((?x67683 (* l_0_11_116 l_0_11_116)))
 (let ((?x67679 (* l_0_11_115 l_0_11_115)))
 (let ((?x43996 (* l_0_11_114 l_0_11_114)))
 (let ((?x46109 (+ (+ (* l_0_11_112 l_0_11_112) (* l_0_11_113 l_0_11_113)) ?x43996)))
 (let ((?x35065 (- (- (- (+ (+ (+ (+ ?x46109 ?x67679) ?x67683) ?x67692) ?x67694) ?x67696) ?x67698) ?x67700)))
 (let ((?x58813 (- (- (- (- (- (- (- ?x35065 ?x67702) ?x67704) ?x67706) ?x67708) ?x67046) ?x67048) ?x67050)))
 (= (- (- (- (- ?x58813 ?x67053) ?x67055) ?x67057) ?x67059) 0.0))))))))))))))))))))))))
(assert
 (let ((?x67111 (* 2.0 l_0_11_253)))
 (let ((?x67112 (* ?x67111 l_0_11_260)))
 (let ((?x67108 (* 2.0 l_0_11_252)))
 (let ((?x67109 (* ?x67108 l_0_11_259)))
 (let ((?x67105 (* 2.0 l_0_11_251)))
 (let ((?x67106 (* ?x67105 l_0_11_258)))
 (let ((?x67102 (* 2.0 l_0_11_250)))
 (let ((?x67103 (* ?x67102 l_0_11_257)))
 (let ((?x67098 (* 2.0 l_0_11_249)))
 (let ((?x67099 (* ?x67098 l_0_11_256)))
 (let ((?x67095 (* 2.0 l_0_11_248)))
 (let ((?x67096 (* ?x67095 l_0_11_255)))
 (let ((?x67092 (* 2.0 l_0_11_247)))
 (let ((?x67093 (* ?x67092 l_0_11_254)))
 (let ((?x67773 (* 2.0 l_0_11_163)))
 (let ((?x67774 (* ?x67773 l_0_11_170)))
 (let ((?x67770 (* 2.0 l_0_11_162)))
 (let ((?x67771 (* ?x67770 l_0_11_169)))
 (let ((?x67767 (* 2.0 l_0_11_161)))
 (let ((?x67768 (* ?x67767 l_0_11_168)))
 (let ((?x67764 (* 2.0 l_0_11_160)))
 (let ((?x67765 (* ?x67764 l_0_11_167)))
 (let ((?x67761 (* 2.0 l_0_11_159)))
 (let ((?x67762 (* ?x67761 l_0_11_166)))
 (let ((?x67758 (* 2.0 l_0_11_158)))
 (let ((?x67759 (* ?x67758 l_0_11_165)))
 (let ((?x67755 (* 2.0 l_0_11_157)))
 (let ((?x67756 (* ?x67755 l_0_11_164)))
 (let ((?x67752 (* 2.0 l_0_11_118)))
 (let ((?x67753 (* ?x67752 l_0_11_125)))
 (let ((?x67749 (* 2.0 l_0_11_117)))
 (let ((?x67750 (* ?x67749 l_0_11_124)))
 (let ((?x67746 (* 2.0 l_0_11_116)))
 (let ((?x67747 (* ?x67746 l_0_11_123)))
 (let ((?x67743 (* 2.0 l_0_11_115)))
 (let ((?x67744 (* ?x67743 l_0_11_122)))
 (let ((?x54402 (* 2.0 l_0_11_114)))
 (let ((?x67741 (* ?x54402 l_0_11_121)))
 (let ((?x54412 (* 2.0 l_0_11_113)))
 (let ((?x67739 (* ?x54412 l_0_11_120)))
 (let ((?x69380 (+ (+ (+ (+ (* (* 2.0 l_0_11_112) l_0_11_119) ?x67739) ?x67741) ?x67744) ?x67747)))
 (let ((?x69387 (- (- (- (- (- (+ (+ ?x69380 ?x67750) ?x67753) ?x67756) ?x67759) ?x67762) ?x67765) ?x67768)))
 (let ((?x69394 (- (- (- (- (- (- (- ?x69387 ?x67771) ?x67774) ?x67093) ?x67096) ?x67099) ?x67103) ?x67106)))
 (= (- (- ?x69394 ?x67109) ?x67112) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x67225 (* l_0_11_261 l_0_11_261)))
 (let ((?x67223 (* l_0_11_260 l_0_11_260)))
 (let ((?x67221 (* l_0_11_259 l_0_11_259)))
 (let ((?x67219 (* l_0_11_258 l_0_11_258)))
 (let ((?x67217 (* l_0_11_257 l_0_11_257)))
 (let ((?x67215 (* l_0_11_256 l_0_11_256)))
 (let ((?x67213 (* l_0_11_255 l_0_11_255)))
 (let ((?x67211 (* l_0_11_254 l_0_11_254)))
 (let ((?x67906 (* l_0_11_171 l_0_11_171)))
 (let ((?x67904 (* l_0_11_170 l_0_11_170)))
 (let ((?x67902 (* l_0_11_169 l_0_11_169)))
 (let ((?x67900 (* l_0_11_168 l_0_11_168)))
 (let ((?x67898 (* l_0_11_167 l_0_11_167)))
 (let ((?x67896 (* l_0_11_166 l_0_11_166)))
 (let ((?x67894 (* l_0_11_165 l_0_11_165)))
 (let ((?x67892 (* l_0_11_164 l_0_11_164)))
 (let ((?x67890 (* l_0_11_126 l_0_11_126)))
 (let ((?x67888 (* l_0_11_125 l_0_11_125)))
 (let ((?x67886 (* l_0_11_124 l_0_11_124)))
 (let ((?x67884 (* l_0_11_123 l_0_11_123)))
 (let ((?x67882 (* l_0_11_122 l_0_11_122)))
 (let ((?x67880 (* l_0_11_121 l_0_11_121)))
 (let ((?x69408 (+ (+ (* l_0_11_119 l_0_11_119) (* l_0_11_120 l_0_11_120)) ?x67880)))
 (let ((?x69415 (- (- (+ (+ (+ (+ (+ ?x69408 ?x67882) ?x67884) ?x67886) ?x67888) ?x67890) ?x67892) ?x67894)))
 (let ((?x69422 (- (- (- (- (- (- (- ?x69415 ?x67896) ?x67898) ?x67900) ?x67902) ?x67904) ?x67906) ?x67211)))
 (let ((?x69429 (- (- (- (- (- (- (- ?x69422 ?x67213) ?x67215) ?x67217) ?x67219) ?x67221) ?x67223) ?x67225)))
 (= ?x69429 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x67304 (* (* 2.0 l_0_11_261) l_0_11_269)))
 (let ((?x67301 (* (* 2.0 l_0_11_260) l_0_11_268)))
 (let ((?x67298 (* (* 2.0 l_0_11_259) l_0_11_267)))
 (let ((?x67295 (* (* 2.0 l_0_11_258) l_0_11_266)))
 (let ((?x67292 (* (* 2.0 l_0_11_257) l_0_11_265)))
 (let ((?x67289 (* (* 2.0 l_0_11_256) l_0_11_264)))
 (let ((?x67286 (* (* 2.0 l_0_11_255) l_0_11_263)))
 (let ((?x67283 (* (* 2.0 l_0_11_254) l_0_11_262)))
 (let ((?x67975 (* (* 2.0 l_0_11_171) l_0_11_179)))
 (let ((?x67972 (* (* 2.0 l_0_11_170) l_0_11_178)))
 (let ((?x67969 (* (* 2.0 l_0_11_169) l_0_11_177)))
 (let ((?x67966 (* (* 2.0 l_0_11_168) l_0_11_176)))
 (let ((?x67963 (* (* 2.0 l_0_11_167) l_0_11_175)))
 (let ((?x67960 (* (* 2.0 l_0_11_166) l_0_11_174)))
 (let ((?x67957 (* (* 2.0 l_0_11_165) l_0_11_173)))
 (let ((?x67954 (* (* 2.0 l_0_11_164) l_0_11_172)))
 (let ((?x67951 (* (* 2.0 l_0_11_126) l_0_11_134)))
 (let ((?x67948 (* (* 2.0 l_0_11_125) l_0_11_133)))
 (let ((?x67945 (* (* 2.0 l_0_11_124) l_0_11_132)))
 (let ((?x67942 (* (* 2.0 l_0_11_123) l_0_11_131)))
 (let ((?x67939 (* (* 2.0 l_0_11_122) l_0_11_130)))
 (let ((?x54501 (* 2.0 l_0_11_121)))
 (let ((?x67936 (* ?x54501 l_0_11_129)))
 (let ((?x54503 (* 2.0 l_0_11_120)))
 (let ((?x67934 (* ?x54503 l_0_11_128)))
 (let ((?x46215 (+ (+ (+ (+ (* (* 2.0 l_0_11_119) l_0_11_127) ?x67934) ?x67936) ?x67939) ?x67942)))
 (let ((?x69446 (- (- (- (- (+ (+ (+ ?x46215 ?x67945) ?x67948) ?x67951) ?x67954) ?x67957) ?x67960) ?x67963)))
 (let ((?x69453 (- (- (- (- (- (- (- ?x69446 ?x67966) ?x67969) ?x67972) ?x67975) ?x67283) ?x67286) ?x67289)))
 (= (- (- (- (- (- ?x69453 ?x67292) ?x67295) ?x67298) ?x67301) ?x67304) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x67372 (* l_0_11_270 l_0_11_270)))
 (let ((?x67370 (* l_0_11_269 l_0_11_269)))
 (let ((?x67368 (* l_0_11_268 l_0_11_268)))
 (let ((?x67366 (* l_0_11_267 l_0_11_267)))
 (let ((?x67364 (* l_0_11_266 l_0_11_266)))
 (let ((?x67362 (* l_0_11_265 l_0_11_265)))
 (let ((?x67360 (* l_0_11_264 l_0_11_264)))
 (let ((?x67358 (* l_0_11_263 l_0_11_263)))
 (let ((?x54674 (* l_0_11_262 l_0_11_262)))
 (let ((?x68063 (* l_0_11_180 l_0_11_180)))
 (let ((?x68061 (* l_0_11_179 l_0_11_179)))
 (let ((?x68059 (* l_0_11_178 l_0_11_178)))
 (let ((?x68057 (* l_0_11_177 l_0_11_177)))
 (let ((?x68055 (* l_0_11_176 l_0_11_176)))
 (let ((?x68053 (* l_0_11_175 l_0_11_175)))
 (let ((?x68051 (* l_0_11_174 l_0_11_174)))
 (let ((?x68049 (* l_0_11_173 l_0_11_173)))
 (let ((?x68047 (* l_0_11_172 l_0_11_172)))
 (let ((?x68045 (* l_0_11_135 l_0_11_135)))
 (let ((?x68043 (* l_0_11_134 l_0_11_134)))
 (let ((?x68041 (* l_0_11_133 l_0_11_133)))
 (let ((?x68039 (* l_0_11_132 l_0_11_132)))
 (let ((?x68026 (* l_0_11_131 l_0_11_131)))
 (let ((?x68023 (* l_0_11_130 l_0_11_130)))
 (let ((?x68019 (* l_0_11_129 l_0_11_129)))
 (let ((?x46305 (+ (+ (* l_0_11_127 l_0_11_127) (* l_0_11_128 l_0_11_128)) ?x68019)))
 (let ((?x46233 (- (+ (+ (+ (+ (+ (+ ?x46305 ?x68023) ?x68026) ?x68039) ?x68041) ?x68043) ?x68045) ?x68047)))
 (let ((?x46368 (- (- (- (- (- (- (- ?x46233 ?x68049) ?x68051) ?x68053) ?x68055) ?x68057) ?x68059) ?x68061)))
 (let ((?x69472 (- (- (- (- (- (- (- ?x46368 ?x68063) ?x54674) ?x67358) ?x67360) ?x67362) ?x67364) ?x67366)))
 (= (- (- (- ?x69472 ?x67368) ?x67370) ?x67372) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x69500 (- (* (* (- 2.0) l_0_11_181) l_0_11_182) (* (* 2.0 l_0_11_271) l_0_11_272))))
 (let ((?x69504 (- (- ?x69500 (* (* 2.0 l_0_11_316) l_0_11_317)) (* (* 2.0 l_0_11_361) l_0_11_362))))
 (= ?x69504 0.0))))
(assert
 (let ((?x59219 (- (* (* (- 2.0) l_0_11_181) l_0_11_187) (* (* 2.0 l_0_11_271) l_0_11_277))))
 (let ((?x46463 (- (- ?x59219 (* (* 2.0 l_0_11_316) l_0_11_322)) (* (* 2.0 l_0_11_361) l_0_11_367))))
 (= ?x46463 0.0))))
(assert
 (let ((?x69537 (- (* (* (- 2.0) l_0_11_181) l_0_11_191) (* (* 2.0 l_0_11_271) l_0_11_281))))
 (let ((?x69541 (- (- ?x69537 (* (* 2.0 l_0_11_316) l_0_11_326)) (* (* 2.0 l_0_11_361) l_0_11_371))))
 (= ?x69541 0.0))))
(assert
 (let ((?x69562 (- (* (* (- 2.0) l_0_11_181) l_0_11_196) (* (* 2.0 l_0_11_271) l_0_11_286))))
 (let ((?x69566 (- (- ?x69562 (* (* 2.0 l_0_11_316) l_0_11_331)) (* (* 2.0 l_0_11_361) l_0_11_376))))
 (= ?x69566 0.0))))
(assert
 (let ((?x69586 (- (* (* (- 2.0) l_0_11_181) l_0_11_217) (* (* 2.0 l_0_11_271) l_0_11_307))))
 (let ((?x69590 (- (- ?x69586 (* (* 2.0 l_0_11_316) l_0_11_352)) (* (* 2.0 l_0_11_361) l_0_11_397))))
 (= ?x69590 0.0))))
(assert
 (let ((?x69621 (* l_0_11_363 l_0_11_363)))
 (let ((?x69619 (* l_0_11_362 l_0_11_362)))
 (let ((?x69617 (* l_0_11_318 l_0_11_318)))
 (let ((?x69615 (* l_0_11_317 l_0_11_317)))
 (let ((?x69613 (* l_0_11_273 l_0_11_273)))
 (let ((?x69611 (* l_0_11_272 l_0_11_272)))
 (let ((?x69610 (- (* (* (- 1.0) l_0_11_182) l_0_11_182) (* (* 1.0 l_0_11_183) l_0_11_183))))
 (= (- (- (- (- (- (- ?x69610 ?x69611) ?x69613) ?x69615) ?x69617) ?x69619) ?x69621) 0.0)))))))))
(assert
 (let ((?x69643 (- (* (* (- 2.0) l_0_11_182) l_0_11_191) (* (* 2.0 l_0_11_183) l_0_11_192))))
 (let ((?x69647 (- (- ?x69643 (* (* 2.0 l_0_11_272) l_0_11_281)) (* (* 2.0 l_0_11_273) l_0_11_282))))
 (let ((?x69651 (- (- ?x69647 (* (* 2.0 l_0_11_317) l_0_11_326)) (* (* 2.0 l_0_11_318) l_0_11_327))))
 (let ((?x69655 (- (- ?x69651 (* (* 2.0 l_0_11_362) l_0_11_371)) (* (* 2.0 l_0_11_363) l_0_11_372))))
 (= ?x69655 0.0))))))
(assert
 (let ((?x69687 (- (* (* (- 2.0) l_0_11_182) l_0_11_196) (* (* 2.0 l_0_11_183) l_0_11_197))))
 (let ((?x69691 (- (- ?x69687 (* (* 2.0 l_0_11_272) l_0_11_286)) (* (* 2.0 l_0_11_273) l_0_11_287))))
 (let ((?x69695 (- (- ?x69691 (* (* 2.0 l_0_11_317) l_0_11_331)) (* (* 2.0 l_0_11_318) l_0_11_332))))
 (let ((?x69699 (- (- ?x69695 (* (* 2.0 l_0_11_362) l_0_11_376)) (* (* 2.0 l_0_11_363) l_0_11_377))))
 (= ?x69699 0.0))))))
(assert
 (let ((?x36034 (- (* (* (- 2.0) l_0_11_182) l_0_11_202) (* (* 2.0 l_0_11_183) l_0_11_203))))
 (let ((?x46605 (- (- ?x36034 (* (* 2.0 l_0_11_272) l_0_11_292)) (* (* 2.0 l_0_11_273) l_0_11_293))))
 (let ((?x69730 (- (- ?x46605 (* (* 2.0 l_0_11_317) l_0_11_337)) (* (* 2.0 l_0_11_318) l_0_11_338))))
 (let ((?x69734 (- (- ?x69730 (* (* 2.0 l_0_11_362) l_0_11_382)) (* (* 2.0 l_0_11_363) l_0_11_383))))
 (= ?x69734 0.0))))))
(assert
 (let ((?x69768 (- (* (* (- 2.0) l_0_11_182) l_0_11_217) (* (* 2.0 l_0_11_183) l_0_11_218))))
 (let ((?x69772 (- (- ?x69768 (* (* 2.0 l_0_11_272) l_0_11_307)) (* (* 2.0 l_0_11_273) l_0_11_308))))
 (let ((?x69776 (- (- ?x69772 (* (* 2.0 l_0_11_317) l_0_11_352)) (* (* 2.0 l_0_11_318) l_0_11_353))))
 (let ((?x69780 (- (- ?x69776 (* (* 2.0 l_0_11_362) l_0_11_397)) (* (* 2.0 l_0_11_363) l_0_11_398))))
 (= ?x69780 0.0))))))
(assert
 (let ((?x69857 (* l_0_11_370 l_0_11_370)))
 (let ((?x69855 (* l_0_11_369 l_0_11_369)))
 (let ((?x69853 (* l_0_11_368 l_0_11_368)))
 (let ((?x69851 (* l_0_11_367 l_0_11_367)))
 (let ((?x69849 (* l_0_11_325 l_0_11_325)))
 (let ((?x69847 (* l_0_11_324 l_0_11_324)))
 (let ((?x69845 (* l_0_11_323 l_0_11_323)))
 (let ((?x69843 (* l_0_11_322 l_0_11_322)))
 (let ((?x69841 (* l_0_11_280 l_0_11_280)))
 (let ((?x69839 (* l_0_11_279 l_0_11_279)))
 (let ((?x69837 (* l_0_11_278 l_0_11_278)))
 (let ((?x69835 (* l_0_11_277 l_0_11_277)))
 (let ((?x69828 (- (* (* (- 1.0) l_0_11_187) l_0_11_187) (* (* 1.0 l_0_11_188) l_0_11_188))))
 (let ((?x69834 (- (- ?x69828 (* (* 1.0 l_0_11_189) l_0_11_189)) (* (* 1.0 l_0_11_190) l_0_11_190))))
 (let ((?x69848 (- (- (- (- (- (- (- ?x69834 ?x69835) ?x69837) ?x69839) ?x69841) ?x69843) ?x69845) ?x69847)))
 (= (- (- (- (- (- ?x69848 ?x69849) ?x69851) ?x69853) ?x69855) ?x69857) 0.0)))))))))))))))))
(assert
 (let ((?x69905 (- (* (* (- 2.0) l_0_11_187) l_0_11_196) (* (* 2.0 l_0_11_188) l_0_11_197))))
 (let ((?x69909 (- (- ?x69905 (* (* 2.0 l_0_11_189) l_0_11_198)) (* (* 2.0 l_0_11_190) l_0_11_199))))
 (let ((?x69913 (- (- ?x69909 (* (* 2.0 l_0_11_277) l_0_11_286)) (* (* 2.0 l_0_11_278) l_0_11_287))))
 (let ((?x69917 (- (- ?x69913 (* (* 2.0 l_0_11_279) l_0_11_288)) (* (* 2.0 l_0_11_280) l_0_11_289))))
 (let ((?x69921 (- (- ?x69917 (* (* 2.0 l_0_11_322) l_0_11_331)) (* (* 2.0 l_0_11_323) l_0_11_332))))
 (let ((?x69925 (- (- ?x69921 (* (* 2.0 l_0_11_324) l_0_11_333)) (* (* 2.0 l_0_11_325) l_0_11_334))))
 (let ((?x69929 (- (- ?x69925 (* (* 2.0 l_0_11_367) l_0_11_376)) (* (* 2.0 l_0_11_368) l_0_11_377))))
 (let ((?x69933 (- (- ?x69929 (* (* 2.0 l_0_11_369) l_0_11_378)) (* (* 2.0 l_0_11_370) l_0_11_379))))
 (= ?x69933 0.0))))))))))
(assert
 (let ((?x70030 (- (* (* (- 2.0) l_0_11_187) l_0_11_202) (* (* 2.0 l_0_11_188) l_0_11_203))))
 (let ((?x70034 (- (- ?x70030 (* (* 2.0 l_0_11_189) l_0_11_204)) (* (* 2.0 l_0_11_190) l_0_11_205))))
 (let ((?x70038 (- (- ?x70034 (* (* 2.0 l_0_11_277) l_0_11_292)) (* (* 2.0 l_0_11_278) l_0_11_293))))
 (let ((?x70042 (- (- ?x70038 (* (* 2.0 l_0_11_279) l_0_11_294)) (* (* 2.0 l_0_11_280) l_0_11_295))))
 (let ((?x70046 (- (- ?x70042 (* (* 2.0 l_0_11_322) l_0_11_337)) (* (* 2.0 l_0_11_323) l_0_11_338))))
 (let ((?x70050 (- (- ?x70046 (* (* 2.0 l_0_11_324) l_0_11_339)) (* (* 2.0 l_0_11_325) l_0_11_340))))
 (let ((?x70054 (- (- ?x70050 (* (* 2.0 l_0_11_367) l_0_11_382)) (* (* 2.0 l_0_11_368) l_0_11_383))))
 (let ((?x70058 (- (- ?x70054 (* (* 2.0 l_0_11_369) l_0_11_384)) (* (* 2.0 l_0_11_370) l_0_11_385))))
 (= ?x70058 0.0))))))))))
(assert
 (let ((?x70149 (- (* (* (- 2.0) l_0_11_187) l_0_11_217) (* (* 2.0 l_0_11_188) l_0_11_218))))
 (let ((?x70153 (- (- ?x70149 (* (* 2.0 l_0_11_189) l_0_11_219)) (* (* 2.0 l_0_11_190) l_0_11_220))))
 (let ((?x70157 (- (- ?x70153 (* (* 2.0 l_0_11_277) l_0_11_307)) (* (* 2.0 l_0_11_278) l_0_11_308))))
 (let ((?x70161 (- (- ?x70157 (* (* 2.0 l_0_11_279) l_0_11_309)) (* (* 2.0 l_0_11_280) l_0_11_310))))
 (let ((?x70165 (- (- ?x70161 (* (* 2.0 l_0_11_322) l_0_11_352)) (* (* 2.0 l_0_11_323) l_0_11_353))))
 (let ((?x70169 (- (- ?x70165 (* (* 2.0 l_0_11_324) l_0_11_354)) (* (* 2.0 l_0_11_325) l_0_11_355))))
 (let ((?x70173 (- (- ?x70169 (* (* 2.0 l_0_11_367) l_0_11_397)) (* (* 2.0 l_0_11_368) l_0_11_398))))
 (let ((?x70177 (- (- ?x70173 (* (* 2.0 l_0_11_369) l_0_11_399)) (* (* 2.0 l_0_11_370) l_0_11_400))))
 (= ?x70177 0.0))))))))))
(assert
 (let ((?x70274 (* l_0_11_375 l_0_11_375)))
 (let ((?x70272 (* l_0_11_374 l_0_11_374)))
 (let ((?x70270 (* l_0_11_373 l_0_11_373)))
 (let ((?x70268 (* l_0_11_372 l_0_11_372)))
 (let ((?x70266 (* l_0_11_371 l_0_11_371)))
 (let ((?x70264 (* l_0_11_330 l_0_11_330)))
 (let ((?x70262 (* l_0_11_329 l_0_11_329)))
 (let ((?x70260 (* l_0_11_328 l_0_11_328)))
 (let ((?x70258 (* l_0_11_327 l_0_11_327)))
 (let ((?x70256 (* l_0_11_326 l_0_11_326)))
 (let ((?x70254 (* l_0_11_285 l_0_11_285)))
 (let ((?x70252 (* l_0_11_284 l_0_11_284)))
 (let ((?x70250 (* l_0_11_283 l_0_11_283)))
 (let ((?x70248 (* l_0_11_282 l_0_11_282)))
 (let ((?x70246 (* l_0_11_281 l_0_11_281)))
 (let ((?x70236 (- (* (* (- 1.0) l_0_11_191) l_0_11_191) (* (* 1.0 l_0_11_192) l_0_11_192))))
 (let ((?x70242 (- (- ?x70236 (* (* 1.0 l_0_11_193) l_0_11_193)) (* (* 1.0 l_0_11_194) l_0_11_194))))
 (let ((?x70251 (- (- (- (- ?x70242 (* (* 1.0 l_0_11_195) l_0_11_195)) ?x70246) ?x70248) ?x70250)))
 (let ((?x70265 (- (- (- (- (- (- (- ?x70251 ?x70252) ?x70254) ?x70256) ?x70258) ?x70260) ?x70262) ?x70264)))
 (= (- (- (- (- (- ?x70265 ?x70266) ?x70268) ?x70270) ?x70272) ?x70274) 0.0)))))))))))))))))))))
(assert
 (let ((?x5134 (- (* (* (- 2.0) l_0_11_191) l_0_11_196) (* (* 2.0 l_0_11_192) l_0_11_197))))
 (let ((?x30808 (- (- ?x5134 (* (* 2.0 l_0_11_193) l_0_11_198)) (* (* 2.0 l_0_11_194) l_0_11_199))))
 (let ((?x36539 (- (- ?x30808 (* (* 2.0 l_0_11_195) l_0_11_200)) (* (* 2.0 l_0_11_281) l_0_11_286))))
 (let ((?x60187 (- (- ?x36539 (* (* 2.0 l_0_11_282) l_0_11_287)) (* (* 2.0 l_0_11_283) l_0_11_288))))
 (let ((?x70308 (- (- ?x60187 (* (* 2.0 l_0_11_284) l_0_11_289)) (* (* 2.0 l_0_11_285) l_0_11_290))))
 (let ((?x70312 (- (- ?x70308 (* (* 2.0 l_0_11_326) l_0_11_331)) (* (* 2.0 l_0_11_327) l_0_11_332))))
 (let ((?x70316 (- (- ?x70312 (* (* 2.0 l_0_11_328) l_0_11_333)) (* (* 2.0 l_0_11_329) l_0_11_334))))
 (let ((?x70320 (- (- ?x70316 (* (* 2.0 l_0_11_330) l_0_11_335)) (* (* 2.0 l_0_11_371) l_0_11_376))))
 (let ((?x70324 (- (- ?x70320 (* (* 2.0 l_0_11_372) l_0_11_377)) (* (* 2.0 l_0_11_373) l_0_11_378))))
 (let ((?x70328 (- (- ?x70324 (* (* 2.0 l_0_11_374) l_0_11_379)) (* (* 2.0 l_0_11_375) l_0_11_380))))
 (= ?x70328 0.0))))))))))))
(assert
 (let ((?x70381 (- (* (* (- 2.0) l_0_11_191) l_0_11_202) (* (* 2.0 l_0_11_192) l_0_11_203))))
 (let ((?x70385 (- (- ?x70381 (* (* 2.0 l_0_11_193) l_0_11_204)) (* (* 2.0 l_0_11_194) l_0_11_205))))
 (let ((?x70389 (- (- ?x70385 (* (* 2.0 l_0_11_195) l_0_11_206)) (* (* 2.0 l_0_11_281) l_0_11_292))))
 (let ((?x70393 (- (- ?x70389 (* (* 2.0 l_0_11_282) l_0_11_293)) (* (* 2.0 l_0_11_283) l_0_11_294))))
 (let ((?x70397 (- (- ?x70393 (* (* 2.0 l_0_11_284) l_0_11_295)) (* (* 2.0 l_0_11_285) l_0_11_296))))
 (let ((?x70401 (- (- ?x70397 (* (* 2.0 l_0_11_326) l_0_11_337)) (* (* 2.0 l_0_11_327) l_0_11_338))))
 (let ((?x70405 (- (- ?x70401 (* (* 2.0 l_0_11_328) l_0_11_339)) (* (* 2.0 l_0_11_329) l_0_11_340))))
 (let ((?x70409 (- (- ?x70405 (* (* 2.0 l_0_11_330) l_0_11_341)) (* (* 2.0 l_0_11_371) l_0_11_382))))
 (let ((?x70413 (- (- ?x70409 (* (* 2.0 l_0_11_372) l_0_11_383)) (* (* 2.0 l_0_11_373) l_0_11_384))))
 (let ((?x70417 (- (- ?x70413 (* (* 2.0 l_0_11_374) l_0_11_385)) (* (* 2.0 l_0_11_375) l_0_11_386))))
 (= ?x70417 0.0))))))))))))
(assert
 (let ((?x70491 (- (* (* (- 2.0) l_0_11_191) l_0_11_217) (* (* 2.0 l_0_11_192) l_0_11_218))))
 (let ((?x70495 (- (- ?x70491 (* (* 2.0 l_0_11_193) l_0_11_219)) (* (* 2.0 l_0_11_194) l_0_11_220))))
 (let ((?x70499 (- (- ?x70495 (* (* 2.0 l_0_11_195) l_0_11_221)) (* (* 2.0 l_0_11_281) l_0_11_307))))
 (let ((?x70503 (- (- ?x70499 (* (* 2.0 l_0_11_282) l_0_11_308)) (* (* 2.0 l_0_11_283) l_0_11_309))))
 (let ((?x70507 (- (- ?x70503 (* (* 2.0 l_0_11_284) l_0_11_310)) (* (* 2.0 l_0_11_285) l_0_11_311))))
 (let ((?x70511 (- (- ?x70507 (* (* 2.0 l_0_11_326) l_0_11_352)) (* (* 2.0 l_0_11_327) l_0_11_353))))
 (let ((?x70515 (- (- ?x70511 (* (* 2.0 l_0_11_328) l_0_11_354)) (* (* 2.0 l_0_11_329) l_0_11_355))))
 (let ((?x70519 (- (- ?x70515 (* (* 2.0 l_0_11_330) l_0_11_356)) (* (* 2.0 l_0_11_371) l_0_11_397))))
 (let ((?x70523 (- (- ?x70519 (* (* 2.0 l_0_11_372) l_0_11_398)) (* (* 2.0 l_0_11_373) l_0_11_399))))
 (let ((?x70527 (- (- ?x70523 (* (* 2.0 l_0_11_374) l_0_11_400)) (* (* 2.0 l_0_11_375) l_0_11_401))))
 (= ?x70527 0.0))))))))))))
(assert
 (let ((?x70635 (* l_0_11_381 l_0_11_381)))
 (let ((?x70633 (* l_0_11_380 l_0_11_380)))
 (let ((?x70631 (* l_0_11_379 l_0_11_379)))
 (let ((?x70629 (* l_0_11_378 l_0_11_378)))
 (let ((?x70627 (* l_0_11_377 l_0_11_377)))
 (let ((?x70625 (* l_0_11_376 l_0_11_376)))
 (let ((?x70623 (* l_0_11_336 l_0_11_336)))
 (let ((?x70621 (* l_0_11_335 l_0_11_335)))
 (let ((?x70619 (* l_0_11_334 l_0_11_334)))
 (let ((?x70617 (* l_0_11_333 l_0_11_333)))
 (let ((?x70615 (* l_0_11_332 l_0_11_332)))
 (let ((?x70613 (* l_0_11_331 l_0_11_331)))
 (let ((?x70611 (* l_0_11_291 l_0_11_291)))
 (let ((?x70609 (* l_0_11_290 l_0_11_290)))
 (let ((?x70607 (* l_0_11_289 l_0_11_289)))
 (let ((?x70605 (* l_0_11_288 l_0_11_288)))
 (let ((?x70603 (* l_0_11_287 l_0_11_287)))
 (let ((?x70601 (* l_0_11_286 l_0_11_286)))
 (let ((?x70588 (- (* (* (- 1.0) l_0_11_196) l_0_11_196) (* (* 1.0 l_0_11_197) l_0_11_197))))
 (let ((?x70594 (- (- ?x70588 (* (* 1.0 l_0_11_198) l_0_11_198)) (* (* 1.0 l_0_11_199) l_0_11_199))))
 (let ((?x70600 (- (- ?x70594 (* (* 1.0 l_0_11_200) l_0_11_200)) (* (* 1.0 l_0_11_201) l_0_11_201))))
 (let ((?x70614 (- (- (- (- (- (- (- ?x70600 ?x70601) ?x70603) ?x70605) ?x70607) ?x70609) ?x70611) ?x70613)))
 (let ((?x70628 (- (- (- (- (- (- (- ?x70614 ?x70615) ?x70617) ?x70619) ?x70621) ?x70623) ?x70625) ?x70627)))
 (= (- (- (- (- ?x70628 ?x70629) ?x70631) ?x70633) ?x70635) 0.0)))))))))))))))))))))))))
(assert
 (let ((?x70671 (- (* (* (- 2.0) l_0_11_196) l_0_11_217) (* (* 2.0 l_0_11_197) l_0_11_218))))
 (let ((?x70675 (- (- ?x70671 (* (* 2.0 l_0_11_198) l_0_11_219)) (* (* 2.0 l_0_11_199) l_0_11_220))))
 (let ((?x70679 (- (- ?x70675 (* (* 2.0 l_0_11_200) l_0_11_221)) (* (* 2.0 l_0_11_201) l_0_11_222))))
 (let ((?x70683 (- (- ?x70679 (* (* 2.0 l_0_11_286) l_0_11_307)) (* (* 2.0 l_0_11_287) l_0_11_308))))
 (let ((?x70687 (- (- ?x70683 (* (* 2.0 l_0_11_288) l_0_11_309)) (* (* 2.0 l_0_11_289) l_0_11_310))))
 (let ((?x70691 (- (- ?x70687 (* (* 2.0 l_0_11_290) l_0_11_311)) (* (* 2.0 l_0_11_291) l_0_11_312))))
 (let ((?x70695 (- (- ?x70691 (* (* 2.0 l_0_11_331) l_0_11_352)) (* (* 2.0 l_0_11_332) l_0_11_353))))
 (let ((?x70699 (- (- ?x70695 (* (* 2.0 l_0_11_333) l_0_11_354)) (* (* 2.0 l_0_11_334) l_0_11_355))))
 (let ((?x70703 (- (- ?x70699 (* (* 2.0 l_0_11_335) l_0_11_356)) (* (* 2.0 l_0_11_336) l_0_11_357))))
 (let ((?x70707 (- (- ?x70703 (* (* 2.0 l_0_11_376) l_0_11_397)) (* (* 2.0 l_0_11_377) l_0_11_398))))
 (let ((?x70711 (- (- ?x70707 (* (* 2.0 l_0_11_378) l_0_11_399)) (* (* 2.0 l_0_11_379) l_0_11_400))))
 (let ((?x70715 (- (- ?x70711 (* (* 2.0 l_0_11_380) l_0_11_401)) (* (* 2.0 l_0_11_381) l_0_11_402))))
 (= ?x70715 0.0))))))))))))))
(assert
 (let ((?x70855 (* l_0_11_388 l_0_11_388)))
 (let ((?x70853 (* l_0_11_387 l_0_11_387)))
 (let ((?x70851 (* l_0_11_386 l_0_11_386)))
 (let ((?x70849 (* l_0_11_385 l_0_11_385)))
 (let ((?x70847 (* l_0_11_384 l_0_11_384)))
 (let ((?x70845 (* l_0_11_383 l_0_11_383)))
 (let ((?x70843 (* l_0_11_382 l_0_11_382)))
 (let ((?x70841 (* l_0_11_343 l_0_11_343)))
 (let ((?x70839 (* l_0_11_342 l_0_11_342)))
 (let ((?x70837 (* l_0_11_341 l_0_11_341)))
 (let ((?x70835 (* l_0_11_340 l_0_11_340)))
 (let ((?x70833 (* l_0_11_339 l_0_11_339)))
 (let ((?x70831 (* l_0_11_338 l_0_11_338)))
 (let ((?x70829 (* l_0_11_337 l_0_11_337)))
 (let ((?x70827 (* l_0_11_298 l_0_11_298)))
 (let ((?x70825 (* l_0_11_297 l_0_11_297)))
 (let ((?x70823 (* l_0_11_296 l_0_11_296)))
 (let ((?x70821 (* l_0_11_295 l_0_11_295)))
 (let ((?x70819 (* l_0_11_294 l_0_11_294)))
 (let ((?x70817 (* l_0_11_293 l_0_11_293)))
 (let ((?x70815 (* l_0_11_292 l_0_11_292)))
 (let ((?x70799 (- (* (* (- 1.0) l_0_11_202) l_0_11_202) (* (* 1.0 l_0_11_203) l_0_11_203))))
 (let ((?x70805 (- (- ?x70799 (* (* 1.0 l_0_11_204) l_0_11_204)) (* (* 1.0 l_0_11_205) l_0_11_205))))
 (let ((?x70811 (- (- ?x70805 (* (* 1.0 l_0_11_206) l_0_11_206)) (* (* 1.0 l_0_11_207) l_0_11_207))))
 (let ((?x70820 (- (- (- (- ?x70811 (* (* 1.0 l_0_11_208) l_0_11_208)) ?x70815) ?x70817) ?x70819)))
 (let ((?x70834 (- (- (- (- (- (- (- ?x70820 ?x70821) ?x70823) ?x70825) ?x70827) ?x70829) ?x70831) ?x70833)))
 (let ((?x70848 (- (- (- (- (- (- (- ?x70834 ?x70835) ?x70837) ?x70839) ?x70841) ?x70843) ?x70845) ?x70847)))
 (= (- (- (- (- ?x70848 ?x70849) ?x70851) ?x70853) ?x70855) 0.0)))))))))))))))))))))))))))))
(assert
 (let ((?x70993 (* l_0_11_405 l_0_11_405)))
 (let ((?x70991 (* l_0_11_404 l_0_11_404)))
 (let ((?x70989 (* l_0_11_403 l_0_11_403)))
 (let ((?x70987 (* l_0_11_402 l_0_11_402)))
 (let ((?x70985 (* l_0_11_401 l_0_11_401)))
 (let ((?x70983 (* l_0_11_400 l_0_11_400)))
 (let ((?x70981 (* l_0_11_399 l_0_11_399)))
 (let ((?x70979 (* l_0_11_398 l_0_11_398)))
 (let ((?x70977 (* l_0_11_397 l_0_11_397)))
 (let ((?x70975 (* l_0_11_360 l_0_11_360)))
 (let ((?x70973 (* l_0_11_359 l_0_11_359)))
 (let ((?x70971 (* l_0_11_358 l_0_11_358)))
 (let ((?x70969 (* l_0_11_357 l_0_11_357)))
 (let ((?x70967 (* l_0_11_356 l_0_11_356)))
 (let ((?x70965 (* l_0_11_355 l_0_11_355)))
 (let ((?x70963 (* l_0_11_354 l_0_11_354)))
 (let ((?x70961 (* l_0_11_353 l_0_11_353)))
 (let ((?x70959 (* l_0_11_352 l_0_11_352)))
 (let ((?x70957 (* l_0_11_315 l_0_11_315)))
 (let ((?x70955 (* l_0_11_314 l_0_11_314)))
 (let ((?x70953 (* l_0_11_313 l_0_11_313)))
 (let ((?x70951 (* l_0_11_312 l_0_11_312)))
 (let ((?x70949 (* l_0_11_311 l_0_11_311)))
 (let ((?x70947 (* l_0_11_310 l_0_11_310)))
 (let ((?x70945 (* l_0_11_309 l_0_11_309)))
 (let ((?x70943 (* l_0_11_308 l_0_11_308)))
 (let ((?x70941 (* l_0_11_307 l_0_11_307)))
 (let ((?x70919 (- (* (* (- 1.0) l_0_11_217) l_0_11_217) (* (* 1.0 l_0_11_218) l_0_11_218))))
 (let ((?x70925 (- (- ?x70919 (* (* 1.0 l_0_11_219) l_0_11_219)) (* (* 1.0 l_0_11_220) l_0_11_220))))
 (let ((?x70931 (- (- ?x70925 (* (* 1.0 l_0_11_221) l_0_11_221)) (* (* 1.0 l_0_11_222) l_0_11_222))))
 (let ((?x70937 (- (- ?x70931 (* (* 1.0 l_0_11_223) l_0_11_223)) (* (* 1.0 l_0_11_224) l_0_11_224))))
 (let ((?x70946 (- (- (- (- ?x70937 (* (* 1.0 l_0_11_225) l_0_11_225)) ?x70941) ?x70943) ?x70945)))
 (let ((?x70960 (- (- (- (- (- (- (- ?x70946 ?x70947) ?x70949) ?x70951) ?x70953) ?x70955) ?x70957) ?x70959)))
 (let ((?x70974 (- (- (- (- (- (- (- ?x70960 ?x70961) ?x70963) ?x70965) ?x70967) ?x70969) ?x70971) ?x70973)))
 (let ((?x70988 (- (- (- (- (- (- (- ?x70974 ?x70975) ?x70977) ?x70979) ?x70981) ?x70983) ?x70985) ?x70987)))
 (= (- (- (- ?x70988 ?x70989) ?x70991) ?x70993) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_11_1 0.0))
(assert
 (>= l_0_11_3 0.0))
(assert
 (>= l_0_11_6 0.0))
(assert
 (>= l_0_11_10 0.0))
(assert
 (>= l_0_11_15 0.0))
(assert
 (>= l_0_11_21 0.0))
(assert
 (>= l_0_11_28 0.0))
(assert
 (>= l_0_11_36 0.0))
(assert
 (>= l_0_11_45 0.0))
(assert
 (>= l_0_11_46 0.0))
(assert
 (>= l_0_11_48 0.0))
(assert
 (>= l_0_11_51 0.0))
(assert
 (>= l_0_11_55 0.0))
(assert
 (>= l_0_11_60 0.0))
(assert
 (>= l_0_11_66 0.0))
(assert
 (>= l_0_11_73 0.0))
(assert
 (>= l_0_11_81 0.0))
(assert
 (>= l_0_11_90 0.0))
(assert
 (>= l_0_11_91 0.0))
(assert
 (>= l_0_11_93 0.0))
(assert
 (>= l_0_11_96 0.0))
(assert
 (>= l_0_11_100 0.0))
(assert
 (>= l_0_11_105 0.0))
(assert
 (>= l_0_11_111 0.0))
(assert
 (>= l_0_11_118 0.0))
(assert
 (>= l_0_11_126 0.0))
(assert
 (>= l_0_11_135 0.0))
(assert
 (>= l_0_11_136 0.0))
(assert
 (>= l_0_11_138 0.0))
(assert
 (>= l_0_11_141 0.0))
(assert
 (>= l_0_11_145 0.0))
(assert
 (>= l_0_11_150 0.0))
(assert
 (>= l_0_11_156 0.0))
(assert
 (>= l_0_11_163 0.0))
(assert
 (>= l_0_11_171 0.0))
(assert
 (>= l_0_11_180 0.0))
(assert
 (>= l_0_11_181 0.0))
(assert
 (>= l_0_11_183 0.0))
(assert
 (>= l_0_11_186 0.0))
(assert
 (>= l_0_11_190 0.0))
(assert
 (>= l_0_11_195 0.0))
(assert
 (>= l_0_11_201 0.0))
(assert
 (>= l_0_11_208 0.0))
(assert
 (>= l_0_11_216 0.0))
(assert
 (>= l_0_11_225 0.0))
(assert
 (>= l_0_11_226 0.0))
(assert
 (>= l_0_11_228 0.0))
(assert
 (>= l_0_11_231 0.0))
(assert
 (>= l_0_11_235 0.0))
(assert
 (>= l_0_11_240 0.0))
(assert
 (>= l_0_11_246 0.0))
(assert
 (>= l_0_11_253 0.0))
(assert
 (>= l_0_11_261 0.0))
(assert
 (>= l_0_11_270 0.0))
(assert
 (>= l_0_11_271 0.0))
(assert
 (>= l_0_11_273 0.0))
(assert
 (>= l_0_11_276 0.0))
(assert
 (>= l_0_11_280 0.0))
(assert
 (>= l_0_11_285 0.0))
(assert
 (>= l_0_11_291 0.0))
(assert
 (>= l_0_11_298 0.0))
(assert
 (>= l_0_11_306 0.0))
(assert
 (>= l_0_11_315 0.0))
(assert
 (>= l_0_11_316 0.0))
(assert
 (>= l_0_11_318 0.0))
(assert
 (>= l_0_11_321 0.0))
(assert
 (>= l_0_11_325 0.0))
(assert
 (>= l_0_11_330 0.0))
(assert
 (>= l_0_11_336 0.0))
(assert
 (>= l_0_11_343 0.0))
(assert
 (>= l_0_11_351 0.0))
(assert
 (>= l_0_11_360 0.0))
(assert
 (>= l_0_11_361 0.0))
(assert
 (>= l_0_11_363 0.0))
(assert
 (>= l_0_11_366 0.0))
(assert
 (>= l_0_11_370 0.0))
(assert
 (>= l_0_11_375 0.0))
(assert
 (>= l_0_11_381 0.0))
(assert
 (>= l_0_11_388 0.0))
(assert
 (>= l_0_11_396 0.0))
(assert
 (>= l_0_11_405 0.0))
(assert
 (let ((?x71135 (* l_0_12_406 l_0_12_406)))
 (let ((?x71133 (* l_0_12_361 l_0_12_361)))
 (let ((?x71131 (* l_0_12_316 l_0_12_316)))
 (let ((?x71129 (* l_0_12_271 l_0_12_271)))
 (let ((?x71132 (- (- (- _a_6_ (* (* 1.0 l_0_12_181) l_0_12_181)) ?x71129) ?x71131)))
 (= (- (- ?x71132 ?x71133) ?x71135) 0.0)))))))
(assert
 (let ((?x71168 (* l_0_12_91 l_0_12_91)))
 (let ((?x71154 (* l_0_12_226 l_0_12_226)))
 (let ((?x71153 (- (- _a_7_ (* l_0_12_136 l_0_12_136)) (* (* 2.0 l_0_12_181) l_0_12_209))))
 (let ((?x71161 (- (- (- ?x71153 ?x71154) (* (* 2.0 l_0_12_271) l_0_12_299)) (* (* 2.0 l_0_12_316) l_0_12_344))))
 (let ((?x71167 (- (- ?x71161 (* (* 2.0 l_0_12_361) l_0_12_389)) (* (* 2.0 l_0_12_406) l_0_12_434))))
 (= (+ ?x71167 ?x71168) 0.0)))))))
(assert
 (let ((?x71199 (* l_0_12_46 l_0_12_46)))
 (let ((?x71154 (* l_0_12_226 l_0_12_226)))
 (let ((?x47837 (* l_0_12_1 l_0_12_1)))
 (let ((?x71187 (+ _a_8_ ?x47837)))
 (let ((?x71192 (- (+ (- ?x71187 (* (* 2.0 l_0_12_181) l_0_12_184)) ?x71154) (* (* 2.0 l_0_12_271) l_0_12_274))))
 (let ((?x71196 (- (- ?x71192 (* (* 2.0 l_0_12_316) l_0_12_319)) (* (* 2.0 l_0_12_361) l_0_12_364))))
 (= (- (- ?x71196 (* (* 2.0 l_0_12_406) l_0_12_409)) ?x71199) 0.0))))))))
(assert
 (let ((?x71168 (* l_0_12_91 l_0_12_91)))
 (let ((?x71149 (* l_0_12_136 l_0_12_136)))
 (let ((?x25572 (- (- ?x71149 (* (* 2.0 l_0_12_182) l_0_12_187)) (* (* 2.0 l_0_12_183) l_0_12_188))))
 (let ((?x60669 (- (- ?x25572 (* (* 2.0 l_0_12_272) l_0_12_277)) (* (* 2.0 l_0_12_273) l_0_12_278))))
 (let ((?x71210 (- (- ?x60669 (* (* 2.0 l_0_12_317) l_0_12_322)) (* (* 2.0 l_0_12_318) l_0_12_323))))
 (let ((?x71216 (- (- ?x71210 (* (* 2.0 l_0_12_362) l_0_12_367)) (* (* 2.0 l_0_12_363) l_0_12_368))))
 (let ((?x71222 (- (- ?x71216 (* (* 2.0 l_0_12_407) l_0_12_412)) (* (* 2.0 l_0_12_408) l_0_12_413))))
 (= (- (- ?x71222 ?x71168) 1.0) 0.0)))))))))
(assert
 (let ((?x71199 (* l_0_12_46 l_0_12_46)))
 (let ((?x71264 (- (* (- l_0_12_1) l_0_12_1) (* (* 2.0 l_0_12_187) l_0_12_191))))
 (let ((?x71270 (- (- ?x71264 (* (* 2.0 l_0_12_188) l_0_12_192)) (* (* 2.0 l_0_12_189) l_0_12_193))))
 (let ((?x71276 (- (- ?x71270 (* (* 2.0 l_0_12_190) l_0_12_194)) (* (* 2.0 l_0_12_277) l_0_12_281))))
 (let ((?x71282 (- (- ?x71276 (* (* 2.0 l_0_12_278) l_0_12_282)) (* (* 2.0 l_0_12_279) l_0_12_283))))
 (let ((?x71288 (- (- ?x71282 (* (* 2.0 l_0_12_280) l_0_12_284)) (* (* 2.0 l_0_12_322) l_0_12_326))))
 (let ((?x71294 (- (- ?x71288 (* (* 2.0 l_0_12_323) l_0_12_327)) (* (* 2.0 l_0_12_324) l_0_12_328))))
 (let ((?x71300 (- (- ?x71294 (* (* 2.0 l_0_12_325) l_0_12_329)) (* (* 2.0 l_0_12_367) l_0_12_371))))
 (let ((?x71306 (- (- ?x71300 (* (* 2.0 l_0_12_368) l_0_12_372)) (* (* 2.0 l_0_12_369) l_0_12_373))))
 (let ((?x71312 (- (- ?x71306 (* (* 2.0 l_0_12_370) l_0_12_374)) (* (* 2.0 l_0_12_412) l_0_12_416))))
 (let ((?x71318 (- (- ?x71312 (* (* 2.0 l_0_12_413) l_0_12_417)) (* (* 2.0 l_0_12_414) l_0_12_418))))
 (= (+ (+ (- ?x71318 (* (* 2.0 l_0_12_415) l_0_12_419)) ?x71199) 1.0) 0.0)))))))))))))
(assert
 (let ((?x71362 (- (- (- _a_9_) (* (* 2.0 l_0_12_181) l_0_12_202)) (* (* 2.0 l_0_12_271) l_0_12_292))))
 (let ((?x71366 (- (- ?x71362 (* (* 2.0 l_0_12_316) l_0_12_337)) (* (* 2.0 l_0_12_361) l_0_12_382))))
 (= (- ?x71366 (* (* 2.0 l_0_12_406) l_0_12_427)) 0.0))))
(assert
 (let ((?x71199 (* l_0_12_46 l_0_12_46)))
 (let ((?x71391 (- (- (- _a_10_) (* l_0_12_1 l_0_12_1)) (* (* 2.0 l_0_12_196) l_0_12_202))))
 (let ((?x71397 (- (- ?x71391 (* (* 2.0 l_0_12_197) l_0_12_203)) (* (* 2.0 l_0_12_198) l_0_12_204))))
 (let ((?x71403 (- (- ?x71397 (* (* 2.0 l_0_12_199) l_0_12_205)) (* (* 2.0 l_0_12_200) l_0_12_206))))
 (let ((?x71409 (- (- ?x71403 (* (* 2.0 l_0_12_201) l_0_12_207)) (* (* 2.0 l_0_12_286) l_0_12_292))))
 (let ((?x71415 (- (- ?x71409 (* (* 2.0 l_0_12_287) l_0_12_293)) (* (* 2.0 l_0_12_288) l_0_12_294))))
 (let ((?x71421 (- (- ?x71415 (* (* 2.0 l_0_12_289) l_0_12_295)) (* (* 2.0 l_0_12_290) l_0_12_296))))
 (let ((?x71427 (- (- ?x71421 (* (* 2.0 l_0_12_291) l_0_12_297)) (* (* 2.0 l_0_12_331) l_0_12_337))))
 (let ((?x71433 (- (- ?x71427 (* (* 2.0 l_0_12_332) l_0_12_338)) (* (* 2.0 l_0_12_333) l_0_12_339))))
 (let ((?x71439 (- (- ?x71433 (* (* 2.0 l_0_12_334) l_0_12_340)) (* (* 2.0 l_0_12_335) l_0_12_341))))
 (let ((?x71445 (- (- ?x71439 (* (* 2.0 l_0_12_336) l_0_12_342)) (* (* 2.0 l_0_12_376) l_0_12_382))))
 (let ((?x71451 (- (- ?x71445 (* (* 2.0 l_0_12_377) l_0_12_383)) (* (* 2.0 l_0_12_378) l_0_12_384))))
 (let ((?x71457 (- (- ?x71451 (* (* 2.0 l_0_12_379) l_0_12_385)) (* (* 2.0 l_0_12_380) l_0_12_386))))
 (let ((?x71463 (- (- ?x71457 (* (* 2.0 l_0_12_381) l_0_12_387)) (* (* 2.0 l_0_12_421) l_0_12_427))))
 (let ((?x71469 (- (- ?x71463 (* (* 2.0 l_0_12_422) l_0_12_428)) (* (* 2.0 l_0_12_423) l_0_12_429))))
 (let ((?x71475 (- (- ?x71469 (* (* 2.0 l_0_12_424) l_0_12_430)) (* (* 2.0 l_0_12_425) l_0_12_431))))
 (= (+ (- ?x71475 (* (* 2.0 l_0_12_426) l_0_12_432)) ?x71199) 0.0))))))))))))))))))
(assert
 (let ((?x71168 (* l_0_12_91 l_0_12_91)))
 (let ((?x71579 (- (+ (- _a_11_) (* l_0_12_136 l_0_12_136)) (* (* 2.0 l_0_12_202) l_0_12_217))))
 (let ((?x71585 (- (- ?x71579 (* (* 2.0 l_0_12_203) l_0_12_218)) (* (* 2.0 l_0_12_204) l_0_12_219))))
 (let ((?x71591 (- (- ?x71585 (* (* 2.0 l_0_12_205) l_0_12_220)) (* (* 2.0 l_0_12_206) l_0_12_221))))
 (let ((?x71597 (- (- ?x71591 (* (* 2.0 l_0_12_207) l_0_12_222)) (* (* 2.0 l_0_12_208) l_0_12_223))))
 (let ((?x71603 (- (- ?x71597 (* (* 2.0 l_0_12_292) l_0_12_307)) (* (* 2.0 l_0_12_293) l_0_12_308))))
 (let ((?x71609 (- (- ?x71603 (* (* 2.0 l_0_12_294) l_0_12_309)) (* (* 2.0 l_0_12_295) l_0_12_310))))
 (let ((?x71615 (- (- ?x71609 (* (* 2.0 l_0_12_296) l_0_12_311)) (* (* 2.0 l_0_12_297) l_0_12_312))))
 (let ((?x71621 (- (- ?x71615 (* (* 2.0 l_0_12_298) l_0_12_313)) (* (* 2.0 l_0_12_337) l_0_12_352))))
 (let ((?x71627 (- (- ?x71621 (* (* 2.0 l_0_12_338) l_0_12_353)) (* (* 2.0 l_0_12_339) l_0_12_354))))
 (let ((?x71633 (- (- ?x71627 (* (* 2.0 l_0_12_340) l_0_12_355)) (* (* 2.0 l_0_12_341) l_0_12_356))))
 (let ((?x71639 (- (- ?x71633 (* (* 2.0 l_0_12_342) l_0_12_357)) (* (* 2.0 l_0_12_343) l_0_12_358))))
 (let ((?x71645 (- (- ?x71639 (* (* 2.0 l_0_12_382) l_0_12_397)) (* (* 2.0 l_0_12_383) l_0_12_398))))
 (let ((?x71651 (- (- ?x71645 (* (* 2.0 l_0_12_384) l_0_12_399)) (* (* 2.0 l_0_12_385) l_0_12_400))))
 (let ((?x71657 (- (- ?x71651 (* (* 2.0 l_0_12_386) l_0_12_401)) (* (* 2.0 l_0_12_387) l_0_12_402))))
 (let ((?x71663 (- (- ?x71657 (* (* 2.0 l_0_12_388) l_0_12_403)) (* (* 2.0 l_0_12_427) l_0_12_442))))
 (let ((?x71669 (- (- ?x71663 (* (* 2.0 l_0_12_428) l_0_12_443)) (* (* 2.0 l_0_12_429) l_0_12_444))))
 (let ((?x71675 (- (- ?x71669 (* (* 2.0 l_0_12_430) l_0_12_445)) (* (* 2.0 l_0_12_431) l_0_12_446))))
 (let ((?x71681 (- (- ?x71675 (* (* 2.0 l_0_12_432) l_0_12_447)) (* (* 2.0 l_0_12_433) l_0_12_448))))
 (= (- ?x71681 ?x71168) 0.0)))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71810 (* ?x71809 l_0_12_47)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71808 (* ?x71807 l_0_12_2)))
 (= (+ ?x71808 ?x71810) 0.0))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x71874 (* ?x71873 l_0_12_72)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x71871 (* ?x71870 l_0_12_71)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x71868 (* ?x71867 l_0_12_70)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x71865 (* ?x71864 l_0_12_69)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x71862 (* ?x71861 l_0_12_68)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x71859 (* ?x71858 l_0_12_67)))
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71856 (* ?x71809 l_0_12_49)))
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x71854 (* ?x71853 l_0_12_252)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x71851 (* ?x71850 l_0_12_251)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x71848 (* ?x71847 l_0_12_250)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x71845 (* ?x71844 l_0_12_249)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x71842 (* ?x71841 l_0_12_248)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x71839 (* ?x71838 l_0_12_247)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x71836 (* ?x71835 l_0_12_27)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x71833 (* ?x71832 l_0_12_26)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x71830 (* ?x71829 l_0_12_25)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x71827 (* ?x71826 l_0_12_24)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x71824 (* ?x71823 l_0_12_23)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x71817 (* ?x71816 l_0_12_22)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71814 (* ?x71807 l_0_12_4)))
 (let ((?x71840 (+ (+ (+ (+ (+ (+ (+ ?x71814 ?x71817) ?x71824) ?x71827) ?x71830) ?x71833) ?x71836) ?x71839)))
 (let ((?x71860 (- (+ (+ (+ (+ (+ (+ ?x71840 ?x71842) ?x71845) ?x71848) ?x71851) ?x71854) ?x71856) ?x71859)))
 (= (- (- (- (- (- ?x71860 ?x71862) ?x71865) ?x71868) ?x71871) ?x71874) 0.0))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71928 (* ?x71809 l_0_12_52)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) ?x71928) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71934 (* ?x71809 l_0_12_56)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_11) ?x71934) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71944 (* ?x71809 l_0_12_61)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x71944) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71954 (* ?x71809 l_0_12_67)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_22) ?x71954) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72010 (* ?x71809 l_0_12_74)))
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x71854 (* ?x71853 l_0_12_252)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x71851 (* ?x71850 l_0_12_251)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x71848 (* ?x71847 l_0_12_250)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x71845 (* ?x71844 l_0_12_249)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x71842 (* ?x71841 l_0_12_248)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x71839 (* ?x71838 l_0_12_247)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x72002 (* ?x72001 l_0_12_162)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x71999 (* ?x71998 l_0_12_161)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x71996 (* ?x71995 l_0_12_160)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x71993 (* ?x71992 l_0_12_159)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x71990 (* ?x71989 l_0_12_158)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x71987 (* ?x71986 l_0_12_157)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x71984 (* ?x71983 l_0_12_117)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x71981 (* ?x71980 l_0_12_116)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x71978 (* ?x71977 l_0_12_115)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x71975 (* ?x71974 l_0_12_114)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x71972 (* ?x71971 l_0_12_113)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71962 (* ?x71807 l_0_12_29)))
 (let ((?x71979 (+ (+ (+ (+ ?x71962 (* (* 2.0 l_0_12_106) l_0_12_112)) ?x71972) ?x71975) ?x71978)))
 (let ((?x72000 (- (- (- (- (- (+ (+ ?x71979 ?x71981) ?x71984) ?x71987) ?x71990) ?x71993) ?x71996) ?x71999)))
 (let ((?x72009 (- (- (- (- (- (- (- ?x72000 ?x72002) ?x71839) ?x71842) ?x71845) ?x71848) ?x71851) ?x71854)))
 (= (+ ?x72009 ?x72010) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72071 (* ?x71809 l_0_12_82)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x72069 (* ?x72068 l_0_12_151)))
 (let ((?x71964 (* 2.0 l_0_12_106)))
 (let ((?x60961 (* ?x71964 l_0_12_91)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x34479 (* ?x71807 l_0_12_37)))
 (= (+ (+ (- ?x34479 ?x60961) ?x72069) ?x72071) 0.0))))))))))
(assert
 (let ((?x72095 (* l_0_12_48 l_0_12_48)))
 (let ((?x72093 (* l_0_12_47 l_0_12_47)))
 (let ((?x72096 (+ (+ (- (* (- l_0_12_2) l_0_12_2) (* l_0_12_3 l_0_12_3)) ?x72093) ?x72095)))
 (= ?x72096 0.0)))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72112 (* ?x72111 l_0_12_50)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72109 (* ?x72108 l_0_12_49)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72106 (* ?x72105 l_0_12_5)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_4) ?x72106) ?x72109) ?x72112) 0.0))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72150 (* ?x72111 l_0_12_53)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72148 (* ?x72108 l_0_12_52)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72146 (* ?x72105 l_0_12_8)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72144 (* ?x72143 l_0_12_7)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x72002 (* ?x72001 l_0_12_162)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x71999 (* ?x71998 l_0_12_161)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x71996 (* ?x71995 l_0_12_160)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x71993 (* ?x71992 l_0_12_159)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x71990 (* ?x71989 l_0_12_158)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x71987 (* ?x71986 l_0_12_157)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x71984 (* ?x71983 l_0_12_117)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x71981 (* ?x71980 l_0_12_116)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x71978 (* ?x71977 l_0_12_115)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x71975 (* ?x71974 l_0_12_114)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x71972 (* ?x71971 l_0_12_113)))
 (let ((?x72135 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x71972) ?x71975) ?x71978) ?x71981)))
 (let ((?x72142 (+ (+ (+ (+ (+ (+ (- ?x72135 ?x71984) ?x71987) ?x71990) ?x71993) ?x71996) ?x71999) ?x72002)))
 (= (+ (+ (- (- ?x72142 ?x72144) ?x72146) ?x72148) ?x72150) 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72168 (* ?x72111 l_0_12_57)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72166 (* ?x72108 l_0_12_56)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72164 (* ?x72159 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_11) l_0_12_2) ?x72164) ?x72166) ?x72168) 0.0))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72187 (* ?x72111 l_0_12_62)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72185 (* ?x72108 l_0_12_61)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72183 (* ?x71823 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_16) l_0_12_2) ?x72183) ?x72185) ?x72187) 0.0))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72211 (* ?x72111 l_0_12_68)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72209 (* ?x72108 l_0_12_67)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72202 (* ?x72201 l_0_12_3)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_22) ?x72202) ?x72209) ?x72211) 0.0))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72229 (* ?x72111 l_0_12_75)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72227 (* ?x72108 l_0_12_74)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72225 (* ?x72105 l_0_12_30)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_2) l_0_12_29) ?x72225) ?x72227) ?x72229) 0.0))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72262 (* ?x72111 l_0_12_83)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72260 (* ?x72108 l_0_12_82)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72258 (* ?x72105 l_0_12_38)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72256 (* ?x72143 l_0_12_37)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x72254 (* ?x72253 l_0_12_152)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x72251 (* ?x72250 l_0_12_151)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72243 (* ?x71971 l_0_12_93)))
 (let ((?x72255 (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_92) ?x72243) ?x72251) ?x72254)))
 (= (+ (+ (- (- ?x72255 ?x72256) ?x72258) ?x72260) ?x72262) 0.0)))))))))))))))))
(assert
 (let ((?x72295 (* l_0_12_6 l_0_12_6)))
 (let ((?x72293 (* l_0_12_51 l_0_12_51)))
 (let ((?x72291 (* l_0_12_50 l_0_12_50)))
 (let ((?x72289 (* l_0_12_5 l_0_12_5)))
 (let ((?x72292 (+ (- (+ (* (- l_0_12_4) l_0_12_4) (* l_0_12_49 l_0_12_49)) ?x72289) ?x72291)))
 (= (- (+ ?x72292 ?x72293) ?x72295) 0.0)))))))
(assert
 (let ((?x72325 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72322 (* ?x72321 l_0_12_54)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72319 (* ?x72318 l_0_12_53)))
 (let ((?x72316 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72313 (* ?x72312 l_0_12_52)))
 (let ((?x72323 (+ (+ (- (+ (* (* (- 2.0) l_0_12_4) l_0_12_7) ?x72313) ?x72316) ?x72319) ?x72322)))
 (= (- ?x72323 ?x72325) 0.0)))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72357 (* ?x72321 l_0_12_58)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72355 (* ?x72318 l_0_12_57)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72353 (* ?x72312 l_0_12_56)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72351 (* ?x72350 l_0_12_6)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72348 (* ?x72159 l_0_12_5)))
 (let ((?x72356 (+ (+ (- (- (* (* (- 2.0) l_0_12_11) l_0_12_4) ?x72348) ?x72351) ?x72353) ?x72355)))
 (= (+ ?x72356 ?x72357) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72385 (* ?x72321 l_0_12_63)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72383 (* ?x72318 l_0_12_62)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72381 (* ?x72312 l_0_12_61)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72373 (* ?x71826 l_0_12_6)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72370 (* ?x71823 l_0_12_5)))
 (let ((?x72384 (+ (+ (- (- (* (* (- 2.0) l_0_12_16) l_0_12_4) ?x72370) ?x72373) ?x72381) ?x72383)))
 (= (+ ?x72384 ?x72385) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72416 (* ?x72321 l_0_12_69)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72414 (* ?x72318 l_0_12_68)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72412 (* ?x72312 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72410 (* ?x72409 l_0_12_6)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72401 (* ?x72201 l_0_12_5)))
 (let ((?x72415 (+ (+ (- (- (* (* (- 2.0) l_0_12_22) l_0_12_4) ?x72401) ?x72410) ?x72412) ?x72414)))
 (= (+ ?x72415 ?x72416) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72450 (* ?x72321 l_0_12_76)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72448 (* ?x72318 l_0_12_75)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72446 (* ?x72312 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72444 (* ?x72443 l_0_12_6)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72441 (* ?x72440 l_0_12_5)))
 (let ((?x72449 (+ (+ (- (- (* (* (- 2.0) l_0_12_29) l_0_12_4) ?x72441) ?x72444) ?x72446) ?x72448)))
 (= (+ ?x72449 ?x72450) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72499 (* ?x72321 l_0_12_84)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72497 (* ?x72318 l_0_12_83)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72495 (* ?x72312 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72493 (* ?x72492 l_0_12_6)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72490 (* ?x72489 l_0_12_5)))
 (let ((?x72486 (* 2.0 l_0_12_37)))
 (let ((?x72487 (* ?x72486 l_0_12_4)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x72484 (* ?x72483 l_0_12_153)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x72481 (* ?x72480 l_0_12_152)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x72478 (* ?x72477 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72475 (* ?x71974 l_0_12_96)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72473 (* ?x71971 l_0_12_95)))
 (let ((?x72482 (+ (+ (- (- (* (* (- 2.0) l_0_12_106) l_0_12_94) ?x72473) ?x72475) ?x72478) ?x72481)))
 (let ((?x72485 (+ ?x72482 ?x72484)))
 (= (+ (+ (+ (- (- (- ?x72485 ?x72487) ?x72490) ?x72493) ?x72495) ?x72497) ?x72499) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72555 (* l_0_12_9 l_0_12_9)))
 (let ((?x72553 (* l_0_12_8 l_0_12_8)))
 (let ((?x72551 (* l_0_12_7 l_0_12_7)))
 (let ((?x72549 (* l_0_12_55 l_0_12_55)))
 (let ((?x72547 (* l_0_12_54 l_0_12_54)))
 (let ((?x72545 (* l_0_12_53 l_0_12_53)))
 (let ((?x72546 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_52 l_0_12_52)) ?x72545)))
 (= (- (- (- (+ (+ ?x72546 ?x72547) ?x72549) ?x72551) ?x72553) ?x72555) 0.0)))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x71874 (* ?x71873 l_0_12_72)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x71871 (* ?x71870 l_0_12_71)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x71868 (* ?x71867 l_0_12_70)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x71865 (* ?x71864 l_0_12_69)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x71862 (* ?x71861 l_0_12_68)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x71859 (* ?x71858 l_0_12_67)))
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72582 (* ?x72581 l_0_12_59)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72579 (* ?x72578 l_0_12_58)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72576 (* ?x72575 l_0_12_57)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72573 (* ?x72572 l_0_12_56)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x71836 (* ?x71835 l_0_12_27)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x71833 (* ?x71832 l_0_12_26)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x71830 (* ?x71829 l_0_12_25)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x71827 (* ?x71826 l_0_12_24)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x71824 (* ?x71823 l_0_12_23)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x71817 (* ?x71816 l_0_12_22)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x61031 (* ?x72350 l_0_12_9)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x61030 (* ?x72159 l_0_12_8)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x61028 (* ?x61026 l_0_12_7)))
 (let ((?x61035 (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_14) ?x61028) ?x61030) ?x61031)))
 (let ((?x72574 (+ (- (- (- (- (- (- ?x61035 ?x71817) ?x71824) ?x71827) ?x71830) ?x71833) ?x71836) ?x72573)))
 (let ((?x72587 (+ (+ (+ (+ (+ (+ (+ ?x72574 ?x72576) ?x72579) ?x72582) ?x71859) ?x71862) ?x71865) ?x71868)))
 (= (+ (+ ?x72587 ?x71871) ?x71874) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72632 (* ?x72581 l_0_12_64)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72630 (* ?x72578 l_0_12_63)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72628 (* ?x72575 l_0_12_62)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72626 (* ?x72572 l_0_12_61)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72624 (* ?x71826 l_0_12_9)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72622 (* ?x71823 l_0_12_8)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x72620 (* ?x71816 l_0_12_7)))
 (let ((?x72627 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x72620) ?x72622) ?x72624) ?x72626)))
 (= (+ (+ (+ ?x72627 ?x72628) ?x72630) ?x72632) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72671 (* ?x72581 l_0_12_70)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72669 (* ?x72578 l_0_12_69)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72667 (* ?x72575 l_0_12_68)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72665 (* ?x72572 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72663 (* ?x72409 l_0_12_9)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72654 (* ?x72201 l_0_12_8)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x72651 (* ?x72649 l_0_12_7)))
 (let ((?x72666 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_25) ?x72651) ?x72654) ?x72663) ?x72665)))
 (= (+ (+ (+ ?x72666 ?x72667) ?x72669) ?x72671) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72713 (* ?x72581 l_0_12_77)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72711 (* ?x72578 l_0_12_76)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72709 (* ?x72575 l_0_12_75)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72707 (* ?x72572 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72705 (* ?x72443 l_0_12_9)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72696 (* ?x72440 l_0_12_8)))
 (let ((?x72691 (* 2.0 l_0_12_29)))
 (let ((?x72693 (* ?x72691 l_0_12_7)))
 (let ((?x72708 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_32) ?x72693) ?x72696) ?x72705) ?x72707)))
 (= (+ (+ (+ ?x72708 ?x72709) ?x72711) ?x72713) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72775 (* ?x72581 l_0_12_85)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72773 (* ?x72578 l_0_12_84)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72771 (* ?x72575 l_0_12_83)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72769 (* ?x72572 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72767 (* ?x72492 l_0_12_9)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72765 (* ?x72489 l_0_12_8)))
 (let ((?x72486 (* 2.0 l_0_12_37)))
 (let ((?x72763 (* ?x72486 l_0_12_7)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x72761 (* ?x72760 l_0_12_154)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x72758 (* ?x72757 l_0_12_153)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x72755 (* ?x72754 l_0_12_152)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x72752 (* ?x72751 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72749 (* ?x71974 l_0_12_99)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72747 (* ?x71971 l_0_12_98)))
 (let ((?x71964 (* 2.0 l_0_12_106)))
 (let ((?x72738 (* ?x71964 l_0_12_97)))
 (let ((?x72733 (* 2.0 l_0_12_100)))
 (let ((?x72735 (* ?x72733 l_0_12_109)))
 (let ((?x61018 (* (- 2.0) l_0_12_10)))
 (let ((?x72731 (* ?x61018 l_0_12_40)))
 (let ((?x72759 (+ (+ (+ (- (- (- (- ?x72731 ?x72735) ?x72738) ?x72747) ?x72749) ?x72752) ?x72755) ?x72758)))
 (let ((?x72774 (+ (+ (+ (- (- (- (+ ?x72759 ?x72761) ?x72763) ?x72765) ?x72767) ?x72769) ?x72771) ?x72773)))
 (= (+ ?x72774 ?x72775) 0.0))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72829 (* l_0_12_60 l_0_12_60)))
 (let ((?x72827 (* l_0_12_59 l_0_12_59)))
 (let ((?x72825 (* l_0_12_58 l_0_12_58)))
 (let ((?x72823 (* l_0_12_57 l_0_12_57)))
 (let ((?x72821 (* l_0_12_56 l_0_12_56)))
 (let ((?x72819 (* l_0_12_15 l_0_12_15)))
 (let ((?x72817 (* l_0_12_14 l_0_12_14)))
 (let ((?x72815 (* l_0_12_13 l_0_12_13)))
 (let ((?x72816 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x72815)))
 (let ((?x72830 (+ (+ (+ (+ (+ (- (- ?x72816 ?x72817) ?x72819) ?x72821) ?x72823) ?x72825) ?x72827) ?x72829)))
 (= ?x72830 0.0))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72874 (* ?x72873 l_0_12_65)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72871 (* ?x72870 l_0_12_64)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72868 (* ?x72867 l_0_12_63)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72865 (* ?x72864 l_0_12_62)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72862 (* ?x72861 l_0_12_61)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72859 (* ?x72858 l_0_12_20)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72856 (* ?x72855 l_0_12_19)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72853 (* ?x72350 l_0_12_18)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72851 (* ?x72159 l_0_12_17)))
 (let ((?x72860 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_16) ?x72851) ?x72853) ?x72856) ?x72859)))
 (= (+ (+ (+ (+ (+ ?x72860 ?x72862) ?x72865) ?x72868) ?x72871) ?x72874) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72921 (* ?x72873 l_0_12_71)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72919 (* ?x72870 l_0_12_70)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72917 (* ?x72867 l_0_12_69)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72915 (* ?x72864 l_0_12_68)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72913 (* ?x72861 l_0_12_67)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72911 (* ?x72858 l_0_12_26)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72901 (* ?x72855 l_0_12_25)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72898 (* ?x72350 l_0_12_24)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x37957 (* ?x72159 l_0_12_23)))
 (let ((?x72912 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_22) ?x37957) ?x72898) ?x72901) ?x72911)))
 (= (+ (+ (+ (+ (+ ?x72912 ?x72913) ?x72915) ?x72917) ?x72919) ?x72921) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72968 (* ?x72873 l_0_12_78)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72966 (* ?x72870 l_0_12_77)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72964 (* ?x72867 l_0_12_76)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72962 (* ?x72864 l_0_12_75)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72960 (* ?x72861 l_0_12_74)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72958 (* ?x72858 l_0_12_33)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72948 (* ?x72855 l_0_12_32)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72945 (* ?x72350 l_0_12_31)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72941 (* ?x72159 l_0_12_30)))
 (let ((?x72959 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_29) ?x72941) ?x72945) ?x72948) ?x72958)))
 (= (+ (+ (+ (+ (+ ?x72959 ?x72960) ?x72962) ?x72964) ?x72966) ?x72968) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x73048 (* ?x72873 l_0_12_86)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x73046 (* ?x72870 l_0_12_85)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x73044 (* ?x72867 l_0_12_84)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x73042 (* ?x72864 l_0_12_83)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x73040 (* ?x72861 l_0_12_82)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x73038 (* ?x73037 l_0_12_155)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x73035 (* ?x72858 l_0_12_41)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x73033 (* ?x73032 l_0_12_154)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x73030 (* ?x73029 l_0_12_153)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x73027 (* ?x73026 l_0_12_152)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x73024 (* ?x73023 l_0_12_151)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x73021 (* ?x72855 l_0_12_40)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x73019 (* ?x72350 l_0_12_39)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x73017 (* ?x72159 l_0_12_38)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x73015 (* ?x61026 l_0_12_37)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x73013 (* ?x73012 l_0_12_110)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x73010 (* ?x73009 l_0_12_109)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73007 (* ?x72998 l_0_12_108)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x72995 (* ?x72993 l_0_12_107)))
 (let ((?x73014 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_106) ?x72995) ?x73007) ?x73010) ?x73013)))
 (let ((?x73031 (+ (+ (+ (- (- (- (- ?x73014 ?x73015) ?x73017) ?x73019) ?x73021) ?x73024) ?x73027) ?x73030)))
 (let ((?x73047 (+ (+ (+ (+ (+ (- (+ ?x73031 ?x73033) ?x73035) ?x73038) ?x73040) ?x73042) ?x73044) ?x73046)))
 (= (+ ?x73047 ?x73048) 0.0)))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73133 (* l_0_12_66 l_0_12_66)))
 (let ((?x73131 (* l_0_12_65 l_0_12_65)))
 (let ((?x73129 (* l_0_12_64 l_0_12_64)))
 (let ((?x73127 (* l_0_12_63 l_0_12_63)))
 (let ((?x73125 (* l_0_12_62 l_0_12_62)))
 (let ((?x73123 (* l_0_12_61 l_0_12_61)))
 (let ((?x73121 (* l_0_12_21 l_0_12_21)))
 (let ((?x73119 (* l_0_12_20 l_0_12_20)))
 (let ((?x73117 (* l_0_12_19 l_0_12_19)))
 (let ((?x73115 (* l_0_12_18 l_0_12_18)))
 (let ((?x73116 (- (- (* (- l_0_12_16) l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73115)))
 (let ((?x73130 (+ (+ (+ (+ (- (- (- ?x73116 ?x73117) ?x73119) ?x73121) ?x73123) ?x73125) ?x73127) ?x73129)))
 (= (+ (+ ?x73130 ?x73131) ?x73133) 0.0))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x71874 (* ?x71873 l_0_12_72)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x71871 (* ?x71870 l_0_12_71)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x71868 (* ?x71867 l_0_12_70)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x71865 (* ?x71864 l_0_12_69)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x71862 (* ?x71861 l_0_12_68)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x71859 (* ?x71858 l_0_12_67)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x71836 (* ?x71835 l_0_12_27)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x71833 (* ?x71832 l_0_12_26)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x71830 (* ?x71829 l_0_12_25)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x71827 (* ?x71826 l_0_12_24)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x71824 (* ?x71823 l_0_12_23)))
 (let ((?x73159 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_22) ?x71824) ?x71827) ?x71830) ?x71833)))
 (let ((?x73166 (+ (+ (+ (+ (+ (+ (- ?x73159 ?x71836) ?x71859) ?x71862) ?x71865) ?x71868) ?x71871) ?x71874)))
 (= ?x73166 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73191 (* ?x71873 l_0_12_79)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73189 (* ?x71870 l_0_12_78)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73187 (* ?x71867 l_0_12_77)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73185 (* ?x71864 l_0_12_76)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73183 (* ?x71861 l_0_12_75)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73181 (* ?x71858 l_0_12_74)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73179 (* ?x71835 l_0_12_34)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x61164 (* ?x71832 l_0_12_33)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x61165 (* ?x71829 l_0_12_32)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x61160 (* ?x71826 l_0_12_31)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x38097 (* ?x71823 l_0_12_30)))
 (let ((?x73178 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_29) ?x38097) ?x61160) ?x61165) ?x61164)))
 (let ((?x73192 (+ (+ (+ (+ (+ (+ (- ?x73178 ?x73179) ?x73181) ?x73183) ?x73185) ?x73187) ?x73189) ?x73191)))
 (= ?x73192 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73278 (* ?x71873 l_0_12_87)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73276 (* ?x71870 l_0_12_86)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73274 (* ?x71867 l_0_12_85)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73272 (* ?x71864 l_0_12_84)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73270 (* ?x71861 l_0_12_83)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73268 (* ?x71858 l_0_12_82)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73266 (* ?x71835 l_0_12_42)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x73264 (* ?x71832 l_0_12_41)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x73262 (* ?x71829 l_0_12_40)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x73260 (* ?x71826 l_0_12_39)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x73258 (* ?x71823 l_0_12_38)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x73256 (* ?x71816 l_0_12_37)))
 (let ((?x73254 (* l_0_12_156 l_0_12_156)))
 (let ((?x73252 (* l_0_12_155 l_0_12_155)))
 (let ((?x73250 (* l_0_12_154 l_0_12_154)))
 (let ((?x73248 (* l_0_12_153 l_0_12_153)))
 (let ((?x73246 (* l_0_12_152 l_0_12_152)))
 (let ((?x73244 (* l_0_12_151 l_0_12_151)))
 (let ((?x73242 (* l_0_12_111 l_0_12_111)))
 (let ((?x73240 (* l_0_12_110 l_0_12_110)))
 (let ((?x73229 (* l_0_12_109 l_0_12_109)))
 (let ((?x73225 (* l_0_12_108 l_0_12_108)))
 (let ((?x73228 (- (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x73225)))
 (let ((?x73251 (+ (+ (+ (+ (- (- (- ?x73228 ?x73229) ?x73240) ?x73242) ?x73244) ?x73246) ?x73248) ?x73250)))
 (let ((?x73255 (+ (+ ?x73251 ?x73252) ?x73254)))
 (let ((?x73269 (+ (- (- (- (- (- (- ?x73255 ?x73256) ?x73258) ?x73260) ?x73262) ?x73264) ?x73266) ?x73268)))
 (= (+ (+ (+ (+ (+ ?x73269 ?x73270) ?x73272) ?x73274) ?x73276) ?x73278) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73358 (* l_0_12_73 l_0_12_73)))
 (let ((?x73356 (* l_0_12_72 l_0_12_72)))
 (let ((?x73354 (* l_0_12_71 l_0_12_71)))
 (let ((?x73352 (* l_0_12_70 l_0_12_70)))
 (let ((?x73350 (* l_0_12_69 l_0_12_69)))
 (let ((?x73348 (* l_0_12_68 l_0_12_68)))
 (let ((?x73346 (* l_0_12_67 l_0_12_67)))
 (let ((?x73344 (* l_0_12_28 l_0_12_28)))
 (let ((?x73342 (* l_0_12_27 l_0_12_27)))
 (let ((?x73340 (* l_0_12_26 l_0_12_26)))
 (let ((?x73338 (* l_0_12_25 l_0_12_25)))
 (let ((?x73336 (* l_0_12_24 l_0_12_24)))
 (let ((?x73337 (- (- (* (- l_0_12_22) l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x73336)))
 (let ((?x73351 (+ (+ (+ (- (- (- (- ?x73337 ?x73338) ?x73340) ?x73342) ?x73344) ?x73346) ?x73348) ?x73350)))
 (= (+ (+ (+ (+ ?x73351 ?x73352) ?x73354) ?x73356) ?x73358) 0.0))))))))))))))))
(assert
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73424 (* ?x73423 l_0_12_80)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73421 (* ?x73420 l_0_12_79)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73418 (* ?x73417 l_0_12_78)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73415 (* ?x73414 l_0_12_77)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73412 (* ?x73411 l_0_12_76)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73409 (* ?x73408 l_0_12_75)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73406 (* ?x73405 l_0_12_74)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73403 (* ?x73402 l_0_12_35)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73400 (* ?x73399 l_0_12_34)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73397 (* ?x73396 l_0_12_33)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73394 (* ?x73393 l_0_12_32)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73391 (* ?x72409 l_0_12_31)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73389 (* ?x72201 l_0_12_30)))
 (let ((?x73398 (- (- (- (- (* (* (- 2.0) l_0_12_22) l_0_12_29) ?x73389) ?x73391) ?x73394) ?x73397)))
 (let ((?x73419 (+ (+ (+ (+ (+ (- (- ?x73398 ?x73400) ?x73403) ?x73406) ?x73409) ?x73412) ?x73415) ?x73418)))
 (= (+ (+ ?x73419 ?x73421) ?x73424) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73484 (* ?x73423 l_0_12_88)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73482 (* ?x73420 l_0_12_87)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73480 (* ?x73417 l_0_12_86)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73478 (* ?x73414 l_0_12_85)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73476 (* ?x73411 l_0_12_84)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73474 (* ?x73408 l_0_12_83)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73472 (* ?x73405 l_0_12_82)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73470 (* ?x73402 l_0_12_43)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73468 (* ?x73399 l_0_12_42)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73466 (* ?x73396 l_0_12_41)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73464 (* ?x73393 l_0_12_40)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73462 (* ?x72409 l_0_12_39)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73460 (* ?x72201 l_0_12_38)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x73458 (* ?x72649 l_0_12_37)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x72002 (* ?x72001 l_0_12_162)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x71999 (* ?x71998 l_0_12_161)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x71996 (* ?x71995 l_0_12_160)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x71993 (* ?x71992 l_0_12_159)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x71990 (* ?x71989 l_0_12_158)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x71987 (* ?x71986 l_0_12_157)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x71984 (* ?x71983 l_0_12_117)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x71981 (* ?x71980 l_0_12_116)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x71978 (* ?x71977 l_0_12_115)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x71975 (* ?x71974 l_0_12_114)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x71972 (* ?x71971 l_0_12_113)))
 (let ((?x72135 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_112) ?x71972) ?x71975) ?x71978) ?x71981)))
 (let ((?x72142 (+ (+ (+ (+ (+ (+ (- ?x72135 ?x71984) ?x71987) ?x71990) ?x71993) ?x71996) ?x71999) ?x72002)))
 (let ((?x73471 (- (- (- (- (- (- (- ?x72142 ?x73458) ?x73460) ?x73462) ?x73464) ?x73466) ?x73468) ?x73470)))
 (let ((?x73485 (+ (+ (+ (+ (+ (+ (+ ?x73471 ?x73472) ?x73474) ?x73476) ?x73478) ?x73480) ?x73482) ?x73484)))
 (= ?x73485 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73560 (* l_0_12_81 l_0_12_81)))
 (let ((?x73558 (* l_0_12_80 l_0_12_80)))
 (let ((?x73556 (* l_0_12_79 l_0_12_79)))
 (let ((?x73554 (* l_0_12_78 l_0_12_78)))
 (let ((?x73552 (* l_0_12_77 l_0_12_77)))
 (let ((?x73550 (* l_0_12_76 l_0_12_76)))
 (let ((?x73548 (* l_0_12_75 l_0_12_75)))
 (let ((?x73546 (* l_0_12_74 l_0_12_74)))
 (let ((?x73544 (* l_0_12_36 l_0_12_36)))
 (let ((?x73542 (* l_0_12_35 l_0_12_35)))
 (let ((?x73540 (* l_0_12_34 l_0_12_34)))
 (let ((?x73538 (* l_0_12_33 l_0_12_33)))
 (let ((?x73536 (* l_0_12_32 l_0_12_32)))
 (let ((?x73534 (* l_0_12_31 l_0_12_31)))
 (let ((?x73535 (- (- (* (- l_0_12_29) l_0_12_29) (* l_0_12_30 l_0_12_30)) ?x73534)))
 (let ((?x73549 (+ (+ (- (- (- (- (- ?x73535 ?x73536) ?x73538) ?x73540) ?x73542) ?x73544) ?x73546) ?x73548)))
 (= (+ (+ (+ (+ (+ (+ ?x73549 ?x73550) ?x73552) ?x73554) ?x73556) ?x73558) ?x73560) 0.0))))))))))))))))))
(assert
 (let ((?x73655 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73652 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73649 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73646 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73643 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73640 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73637 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73634 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73631 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73628 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73625 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73622 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73619 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x73616 (* ?x72443 l_0_12_39)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x73614 (* ?x72440 l_0_12_38)))
 (let ((?x72691 (* 2.0 l_0_12_29)))
 (let ((?x73612 (* ?x72691 l_0_12_37)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73610 (* ?x72001 l_0_12_169)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73608 (* ?x71998 l_0_12_168)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73606 (* ?x71995 l_0_12_167)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73604 (* ?x71992 l_0_12_166)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73602 (* ?x71989 l_0_12_165)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73600 (* ?x71986 l_0_12_164)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73598 (* ?x71983 l_0_12_124)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73596 (* ?x71980 l_0_12_123)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73594 (* ?x71977 l_0_12_122)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73592 (* ?x71974 l_0_12_121)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x73590 (* ?x71971 l_0_12_120)))
 (let ((?x73597 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_119) ?x73590) ?x73592) ?x73594) ?x73596)))
 (let ((?x73611 (+ (+ (+ (+ (+ (+ (- ?x73597 ?x73598) ?x73600) ?x73602) ?x73604) ?x73606) ?x73608) ?x73610)))
 (let ((?x73629 (- (- (- (- (- (- (- ?x73611 ?x73612) ?x73614) ?x73616) ?x73619) ?x73622) ?x73625) ?x73628)))
 (let ((?x73650 (+ (+ (+ (+ (+ (+ (- ?x73629 ?x73631) ?x73634) ?x73637) ?x73640) ?x73643) ?x73646) ?x73649)))
 (= (+ (+ ?x73650 ?x73652) ?x73655) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73794 (* l_0_12_90 l_0_12_90)))
 (let ((?x73792 (* l_0_12_89 l_0_12_89)))
 (let ((?x73790 (* l_0_12_88 l_0_12_88)))
 (let ((?x73788 (* l_0_12_87 l_0_12_87)))
 (let ((?x73786 (* l_0_12_86 l_0_12_86)))
 (let ((?x73784 (* l_0_12_85 l_0_12_85)))
 (let ((?x73782 (* l_0_12_84 l_0_12_84)))
 (let ((?x73780 (* l_0_12_83 l_0_12_83)))
 (let ((?x73778 (* l_0_12_82 l_0_12_82)))
 (let ((?x73776 (* l_0_12_45 l_0_12_45)))
 (let ((?x73774 (* l_0_12_44 l_0_12_44)))
 (let ((?x73772 (* l_0_12_43 l_0_12_43)))
 (let ((?x73770 (* l_0_12_42 l_0_12_42)))
 (let ((?x73768 (* l_0_12_41 l_0_12_41)))
 (let ((?x73766 (* l_0_12_40 l_0_12_40)))
 (let ((?x73764 (* l_0_12_39 l_0_12_39)))
 (let ((?x73762 (* l_0_12_38 l_0_12_38)))
 (let ((?x73760 (* l_0_12_37 l_0_12_37)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73758 (* ?x72001 l_0_12_177)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73756 (* ?x71998 l_0_12_176)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73754 (* ?x71995 l_0_12_175)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73752 (* ?x71992 l_0_12_174)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73750 (* ?x71989 l_0_12_173)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73748 (* ?x71986 l_0_12_172)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73746 (* ?x71983 l_0_12_132)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73727 (* ?x71980 l_0_12_131)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73723 (* ?x71977 l_0_12_130)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73719 (* ?x71974 l_0_12_129)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x10346 (* ?x71971 l_0_12_128)))
 (let ((?x73728 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_127) ?x10346) ?x73719) ?x73723) ?x73727)))
 (let ((?x73759 (+ (+ (+ (+ (+ (+ (- ?x73728 ?x73746) ?x73748) ?x73750) ?x73752) ?x73754) ?x73756) ?x73758)))
 (let ((?x73773 (- (- (- (- (- (- (- ?x73759 ?x73760) ?x73762) ?x73764) ?x73766) ?x73768) ?x73770) ?x73772)))
 (let ((?x73787 (+ (+ (+ (+ (+ (- (- ?x73773 ?x73774) ?x73776) ?x73778) ?x73780) ?x73782) ?x73784) ?x73786)))
 (= (+ (+ (+ (+ ?x73787 ?x73788) ?x73790) ?x73792) ?x73794) 0.0))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71810 (* ?x71809 l_0_12_47)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x73876 (* ?x72068 l_0_12_146)))
 (let ((?x73855 (* 2.0 l_0_12_101)))
 (let ((?x73874 (* ?x73855 l_0_12_91)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71808 (* ?x71807 l_0_12_2)))
 (= (+ (+ (- ?x71808 ?x73874) ?x73876) ?x71810) 0.0))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72582 (* ?x72581 l_0_12_59)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72579 (* ?x72578 l_0_12_58)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72576 (* ?x72575 l_0_12_57)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72573 (* ?x72572 l_0_12_56)))
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71856 (* ?x71809 l_0_12_49)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x73905 (* ?x73904 l_0_12_239)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x73902 (* ?x73901 l_0_12_238)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x73899 (* ?x73898 l_0_12_237)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x73896 (* ?x73895 l_0_12_236)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x61031 (* ?x72350 l_0_12_9)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x61030 (* ?x72159 l_0_12_8)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x61028 (* ?x61026 l_0_12_7)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71814 (* ?x71807 l_0_12_4)))
 (let ((?x73894 (+ (+ (+ (+ ?x71814 (* (* 2.0 l_0_12_10) l_0_12_14)) ?x61028) ?x61030) ?x61031)))
 (let ((?x73909 (- (- (+ (+ (+ (+ (+ ?x73894 ?x73896) ?x73899) ?x73902) ?x73905) ?x71856) ?x72573) ?x72576)))
 (= (- (- ?x73909 ?x72579) ?x72582) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71928 (* ?x71809 l_0_12_52)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_7) ?x71928) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71934 (* ?x71809 l_0_12_56)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_11) ?x71934) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71944 (* ?x71809 l_0_12_61)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_16) ?x71944) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71954 (* ?x71809 l_0_12_67)))
 (= (+ (* (* (- 2.0) l_0_12_1) l_0_12_22) ?x71954) 0.0))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72010 (* ?x71809 l_0_12_74)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x73905 (* ?x73904 l_0_12_239)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x73902 (* ?x73901 l_0_12_238)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x73899 (* ?x73898 l_0_12_237)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x73896 (* ?x73895 l_0_12_236)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x73938 (* ?x72760 l_0_12_149)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x73936 (* ?x72757 l_0_12_148)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x73934 (* ?x72754 l_0_12_147)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x73932 (* ?x72751 l_0_12_146)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73930 (* ?x72998 l_0_12_99)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x73928 (* ?x72993 l_0_12_98)))
 (let ((?x73855 (* 2.0 l_0_12_101)))
 (let ((?x73926 (* ?x73855 l_0_12_97)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x71962 (* ?x71807 l_0_12_29)))
 (let ((?x73931 (+ (+ (+ (+ ?x71962 (* (* 2.0 l_0_12_100) l_0_12_104)) ?x73926) ?x73928) ?x73930)))
 (let ((?x73942 (- (- (- (- (- (- (- ?x73931 ?x73932) ?x73934) ?x73936) ?x73938) ?x73896) ?x73899) ?x73902)))
 (= (+ (- ?x73942 ?x73905) ?x72010) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72071 (* ?x71809 l_0_12_82)))
 (let ((?x71807 (* (- 2.0) l_0_12_1)))
 (let ((?x34479 (* ?x71807 l_0_12_37)))
 (= (+ ?x34479 ?x72071) 0.0))))))
(assert
 (let ((?x72095 (* l_0_12_48 l_0_12_48)))
 (let ((?x72093 (* l_0_12_47 l_0_12_47)))
 (let ((?x72086 (* l_0_12_3 l_0_12_3)))
 (let ((?x60963 (* l_0_12_2 l_0_12_2)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x50815 (* ?x72253 l_0_12_147)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x61279 (* ?x72250 l_0_12_146)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61282 (* ?x72993 l_0_12_93)))
 (let ((?x38415 (+ (+ (- (* (* (- 2.0) l_0_12_101) l_0_12_92) ?x61282) ?x61279) ?x50815)))
 (= (+ (+ (- (- ?x38415 ?x60963) ?x72086) ?x72093) ?x72095) 0.0)))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72112 (* ?x72111 l_0_12_50)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72109 (* ?x72108 l_0_12_49)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72106 (* ?x72105 l_0_12_5)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x73983 (* ?x72143 l_0_12_4)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x73981 (* ?x72483 l_0_12_148)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x61296 (* ?x72480 l_0_12_147)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x50852 (* ?x72477 l_0_12_146)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x61294 (* ?x72998 l_0_12_96)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61316 (* ?x72993 l_0_12_95)))
 (let ((?x73980 (+ (+ (- (- (* (* (- 2.0) l_0_12_101) l_0_12_94) ?x61316) ?x61294) ?x50852) ?x61296)))
 (let ((?x73982 (+ ?x73980 ?x73981)))
 (= (+ (+ (- (- ?x73982 ?x73983) ?x72106) ?x72109) ?x72112) 0.0))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72150 (* ?x72111 l_0_12_53)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72148 (* ?x72108 l_0_12_52)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72146 (* ?x72105 l_0_12_8)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72144 (* ?x72143 l_0_12_7)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x73938 (* ?x72760 l_0_12_149)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x73936 (* ?x72757 l_0_12_148)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x73934 (* ?x72754 l_0_12_147)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x73932 (* ?x72751 l_0_12_146)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73930 (* ?x72998 l_0_12_99)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x73928 (* ?x72993 l_0_12_98)))
 (let ((?x73855 (* 2.0 l_0_12_101)))
 (let ((?x73926 (* ?x73855 l_0_12_97)))
 (let ((?x74006 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_104) ?x73926) ?x73928) ?x73930) ?x73932)))
 (let ((?x74009 (+ (+ (+ ?x74006 ?x73934) ?x73936) ?x73938)))
 (= (+ (+ (- (- ?x74009 ?x72144) ?x72146) ?x72148) ?x72150) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72168 (* ?x72111 l_0_12_57)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72166 (* ?x72108 l_0_12_56)))
 (let ((?x74028 (* l_0_12_150 l_0_12_150)))
 (let ((?x74026 (* l_0_12_149 l_0_12_149)))
 (let ((?x74024 (* l_0_12_148 l_0_12_148)))
 (let ((?x74022 (* l_0_12_147 l_0_12_147)))
 (let ((?x74020 (* l_0_12_146 l_0_12_146)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72164 (* ?x72159 l_0_12_3)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x61360 (* ?x61026 l_0_12_2)))
 (let ((?x61359 (* l_0_12_105 l_0_12_105)))
 (let ((?x61358 (* l_0_12_104 l_0_12_104)))
 (let ((?x61361 (* l_0_12_103 l_0_12_103)))
 (let ((?x61353 (- (- (* (- l_0_12_101) l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x61361)))
 (let ((?x50870 (- (- ?x61353 ?x61358) ?x61359)))
 (let ((?x74029 (+ (+ (+ (+ (+ (- (- ?x50870 ?x61360) ?x72164) ?x74020) ?x74022) ?x74024) ?x74026) ?x74028)))
 (= (+ (+ ?x74029 ?x72166) ?x72168) 0.0)))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72187 (* ?x72111 l_0_12_62)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72185 (* ?x72108 l_0_12_61)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72183 (* ?x71823 l_0_12_3)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x61416 (* ?x71816 l_0_12_2)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x73038 (* ?x73037 l_0_12_155)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x73033 (* ?x73032 l_0_12_154)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x73030 (* ?x73029 l_0_12_153)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x73027 (* ?x73026 l_0_12_152)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x73024 (* ?x73023 l_0_12_151)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x73013 (* ?x73012 l_0_12_110)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x73010 (* ?x73009 l_0_12_109)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73007 (* ?x72998 l_0_12_108)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x72995 (* ?x72993 l_0_12_107)))
 (let ((?x73014 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_106) ?x72995) ?x73007) ?x73010) ?x73013)))
 (let ((?x74045 (- (- (+ (+ (+ (+ (+ ?x73014 ?x73024) ?x73027) ?x73030) ?x73033) ?x73038) ?x61416) ?x72183)))
 (= (+ (+ ?x74045 ?x72185) ?x72187) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72211 (* ?x72111 l_0_12_68)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72209 (* ?x72108 l_0_12_67)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72202 (* ?x72201 l_0_12_3)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x74069 (* ?x72143 l_0_12_22)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74067 (* ?x73037 l_0_12_161)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74065 (* ?x73032 l_0_12_160)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74063 (* ?x73029 l_0_12_159)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74061 (* ?x73026 l_0_12_158)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74059 (* ?x73023 l_0_12_157)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74057 (* ?x73012 l_0_12_116)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74055 (* ?x73009 l_0_12_115)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74053 (* ?x72998 l_0_12_114)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74051 (* ?x72993 l_0_12_113)))
 (let ((?x74058 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_112) ?x74051) ?x74053) ?x74055) ?x74057)))
 (let ((?x74068 (+ (+ (+ (+ (+ ?x74058 ?x74059) ?x74061) ?x74063) ?x74065) ?x74067)))
 (= (+ (+ (- (- ?x74068 ?x74069) ?x72202) ?x72209) ?x72211) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72229 (* ?x72111 l_0_12_75)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72227 (* ?x72108 l_0_12_74)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72225 (* ?x72105 l_0_12_30)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x74103 (* ?x72143 l_0_12_29)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74101 (* ?x73037 l_0_12_168)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74099 (* ?x73032 l_0_12_167)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74097 (* ?x73029 l_0_12_166)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74095 (* ?x73026 l_0_12_165)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74093 (* ?x73023 l_0_12_164)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74091 (* ?x73012 l_0_12_123)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74089 (* ?x73009 l_0_12_122)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x38730 (* ?x72998 l_0_12_121)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x38728 (* ?x72993 l_0_12_120)))
 (let ((?x74092 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_119) ?x38728) ?x38730) ?x74089) ?x74091)))
 (let ((?x74102 (+ (+ (+ (+ (+ ?x74092 ?x74093) ?x74095) ?x74097) ?x74099) ?x74101)))
 (= (+ (+ (- (- ?x74102 ?x74103) ?x72225) ?x72227) ?x72229) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72262 (* ?x72111 l_0_12_83)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72260 (* ?x72108 l_0_12_82)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72258 (* ?x72105 l_0_12_38)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72256 (* ?x72143 l_0_12_37)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74151 (* ?x73037 l_0_12_176)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74149 (* ?x73032 l_0_12_175)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74147 (* ?x73029 l_0_12_174)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74145 (* ?x73026 l_0_12_173)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74143 (* ?x73023 l_0_12_172)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74141 (* ?x73012 l_0_12_131)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74139 (* ?x73009 l_0_12_130)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74137 (* ?x72998 l_0_12_129)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74135 (* ?x72993 l_0_12_128)))
 (let ((?x74142 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_127) ?x74135) ?x74137) ?x74139) ?x74141)))
 (let ((?x74152 (+ (+ (+ (+ (+ ?x74142 ?x74143) ?x74145) ?x74147) ?x74149) ?x74151)))
 (= (+ (+ (- (- ?x74152 ?x72256) ?x72258) ?x72260) ?x72262) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x72295 (* l_0_12_6 l_0_12_6)))
 (let ((?x72293 (* l_0_12_51 l_0_12_51)))
 (let ((?x72291 (* l_0_12_50 l_0_12_50)))
 (let ((?x72289 (* l_0_12_5 l_0_12_5)))
 (let ((?x72292 (+ (- (+ (* (- l_0_12_4) l_0_12_4) (* l_0_12_49 l_0_12_49)) ?x72289) ?x72291)))
 (= (- (+ ?x72292 ?x72293) ?x72295) 0.0)))))))
(assert
 (let ((?x72325 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72322 (* ?x72321 l_0_12_54)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72319 (* ?x72318 l_0_12_53)))
 (let ((?x72316 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72313 (* ?x72312 l_0_12_52)))
 (let ((?x72323 (+ (+ (- (+ (* (* (- 2.0) l_0_12_4) l_0_12_7) ?x72313) ?x72316) ?x72319) ?x72322)))
 (= (- ?x72323 ?x72325) 0.0)))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72357 (* ?x72321 l_0_12_58)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72355 (* ?x72318 l_0_12_57)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72353 (* ?x72312 l_0_12_56)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72351 (* ?x72350 l_0_12_6)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72348 (* ?x72159 l_0_12_5)))
 (let ((?x72356 (+ (+ (- (- (* (* (- 2.0) l_0_12_11) l_0_12_4) ?x72348) ?x72351) ?x72353) ?x72355)))
 (= (+ ?x72356 ?x72357) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72385 (* ?x72321 l_0_12_63)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72383 (* ?x72318 l_0_12_62)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72381 (* ?x72312 l_0_12_61)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72373 (* ?x71826 l_0_12_6)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72370 (* ?x71823 l_0_12_5)))
 (let ((?x72384 (+ (+ (- (- (* (* (- 2.0) l_0_12_16) l_0_12_4) ?x72370) ?x72373) ?x72381) ?x72383)))
 (= (+ ?x72384 ?x72385) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72416 (* ?x72321 l_0_12_69)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72414 (* ?x72318 l_0_12_68)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72412 (* ?x72312 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72410 (* ?x72409 l_0_12_6)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72401 (* ?x72201 l_0_12_5)))
 (let ((?x72415 (+ (+ (- (- (* (* (- 2.0) l_0_12_22) l_0_12_4) ?x72401) ?x72410) ?x72412) ?x72414)))
 (= (+ ?x72415 ?x72416) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72450 (* ?x72321 l_0_12_76)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72448 (* ?x72318 l_0_12_75)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72446 (* ?x72312 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72444 (* ?x72443 l_0_12_6)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72441 (* ?x72440 l_0_12_5)))
 (let ((?x72449 (+ (+ (- (- (* (* (- 2.0) l_0_12_29) l_0_12_4) ?x72441) ?x72444) ?x72446) ?x72448)))
 (= (+ ?x72449 ?x72450) 0.0)))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72499 (* ?x72321 l_0_12_84)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72497 (* ?x72318 l_0_12_83)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72495 (* ?x72312 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72493 (* ?x72492 l_0_12_6)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72490 (* ?x72489 l_0_12_5)))
 (let ((?x74173 (+ (+ (- (- (* (* (- 2.0) l_0_12_37) l_0_12_4) ?x72490) ?x72493) ?x72495) ?x72497)))
 (= (+ ?x74173 ?x72499) 0.0)))))))))))))
(assert
 (let ((?x72555 (* l_0_12_9 l_0_12_9)))
 (let ((?x72553 (* l_0_12_8 l_0_12_8)))
 (let ((?x72551 (* l_0_12_7 l_0_12_7)))
 (let ((?x72549 (* l_0_12_55 l_0_12_55)))
 (let ((?x72547 (* l_0_12_54 l_0_12_54)))
 (let ((?x72545 (* l_0_12_53 l_0_12_53)))
 (let ((?x72546 (+ (+ (* (- l_0_12_10) l_0_12_10) (* l_0_12_52 l_0_12_52)) ?x72545)))
 (= (- (- (- (+ (+ ?x72546 ?x72547) ?x72549) ?x72551) ?x72553) ?x72555) 0.0)))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72582 (* ?x72581 l_0_12_59)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72579 (* ?x72578 l_0_12_58)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72576 (* ?x72575 l_0_12_57)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72573 (* ?x72572 l_0_12_56)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x61031 (* ?x72350 l_0_12_9)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x61030 (* ?x72159 l_0_12_8)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x61028 (* ?x61026 l_0_12_7)))
 (let ((?x61035 (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_14) ?x61028) ?x61030) ?x61031)))
 (= (+ (+ (+ (+ ?x61035 ?x72573) ?x72576) ?x72579) ?x72582) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72632 (* ?x72581 l_0_12_64)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72630 (* ?x72578 l_0_12_63)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72628 (* ?x72575 l_0_12_62)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72626 (* ?x72572 l_0_12_61)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72624 (* ?x71826 l_0_12_9)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72622 (* ?x71823 l_0_12_8)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x72620 (* ?x71816 l_0_12_7)))
 (let ((?x72627 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_19) ?x72620) ?x72622) ?x72624) ?x72626)))
 (= (+ (+ (+ ?x72627 ?x72628) ?x72630) ?x72632) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72671 (* ?x72581 l_0_12_70)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72669 (* ?x72578 l_0_12_69)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72667 (* ?x72575 l_0_12_68)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72665 (* ?x72572 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72663 (* ?x72409 l_0_12_9)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72654 (* ?x72201 l_0_12_8)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x72651 (* ?x72649 l_0_12_7)))
 (let ((?x72666 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_25) ?x72651) ?x72654) ?x72663) ?x72665)))
 (= (+ (+ (+ ?x72666 ?x72667) ?x72669) ?x72671) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72713 (* ?x72581 l_0_12_77)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72711 (* ?x72578 l_0_12_76)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72709 (* ?x72575 l_0_12_75)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72707 (* ?x72572 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72705 (* ?x72443 l_0_12_9)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72696 (* ?x72440 l_0_12_8)))
 (let ((?x72691 (* 2.0 l_0_12_29)))
 (let ((?x72693 (* ?x72691 l_0_12_7)))
 (let ((?x72708 (+ (- (- (- (* (* (- 2.0) l_0_12_10) l_0_12_32) ?x72693) ?x72696) ?x72705) ?x72707)))
 (= (+ (+ (+ ?x72708 ?x72709) ?x72711) ?x72713) 0.0)))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72775 (* ?x72581 l_0_12_85)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72773 (* ?x72578 l_0_12_84)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72771 (* ?x72575 l_0_12_83)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72769 (* ?x72572 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72767 (* ?x72492 l_0_12_9)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72765 (* ?x72489 l_0_12_8)))
 (let ((?x72486 (* 2.0 l_0_12_37)))
 (let ((?x72763 (* ?x72486 l_0_12_7)))
 (let ((?x61018 (* (- 2.0) l_0_12_10)))
 (let ((?x72731 (* ?x61018 l_0_12_40)))
 (let ((?x74198 (+ (+ (+ (+ (- (- (- ?x72731 ?x72763) ?x72765) ?x72767) ?x72769) ?x72771) ?x72773) ?x72775)))
 (= ?x74198 0.0)))))))))))))))))))
(assert
 (let ((?x72829 (* l_0_12_60 l_0_12_60)))
 (let ((?x72827 (* l_0_12_59 l_0_12_59)))
 (let ((?x72825 (* l_0_12_58 l_0_12_58)))
 (let ((?x72823 (* l_0_12_57 l_0_12_57)))
 (let ((?x72821 (* l_0_12_56 l_0_12_56)))
 (let ((?x72819 (* l_0_12_15 l_0_12_15)))
 (let ((?x72817 (* l_0_12_14 l_0_12_14)))
 (let ((?x72815 (* l_0_12_13 l_0_12_13)))
 (let ((?x72816 (- (- (* (- l_0_12_11) l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x72815)))
 (let ((?x72830 (+ (+ (+ (+ (+ (- (- ?x72816 ?x72817) ?x72819) ?x72821) ?x72823) ?x72825) ?x72827) ?x72829)))
 (= ?x72830 0.0))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72874 (* ?x72873 l_0_12_65)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72871 (* ?x72870 l_0_12_64)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72868 (* ?x72867 l_0_12_63)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72865 (* ?x72864 l_0_12_62)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72862 (* ?x72861 l_0_12_61)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72859 (* ?x72858 l_0_12_20)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72856 (* ?x72855 l_0_12_19)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72853 (* ?x72350 l_0_12_18)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72851 (* ?x72159 l_0_12_17)))
 (let ((?x72860 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_16) ?x72851) ?x72853) ?x72856) ?x72859)))
 (= (+ (+ (+ (+ (+ ?x72860 ?x72862) ?x72865) ?x72868) ?x72871) ?x72874) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72921 (* ?x72873 l_0_12_71)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72919 (* ?x72870 l_0_12_70)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72917 (* ?x72867 l_0_12_69)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72915 (* ?x72864 l_0_12_68)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72913 (* ?x72861 l_0_12_67)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72911 (* ?x72858 l_0_12_26)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72901 (* ?x72855 l_0_12_25)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72898 (* ?x72350 l_0_12_24)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x37957 (* ?x72159 l_0_12_23)))
 (let ((?x72912 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_22) ?x37957) ?x72898) ?x72901) ?x72911)))
 (= (+ (+ (+ (+ (+ ?x72912 ?x72913) ?x72915) ?x72917) ?x72919) ?x72921) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72968 (* ?x72873 l_0_12_78)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72966 (* ?x72870 l_0_12_77)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72964 (* ?x72867 l_0_12_76)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72962 (* ?x72864 l_0_12_75)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72960 (* ?x72861 l_0_12_74)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72958 (* ?x72858 l_0_12_33)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72948 (* ?x72855 l_0_12_32)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72945 (* ?x72350 l_0_12_31)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72941 (* ?x72159 l_0_12_30)))
 (let ((?x72959 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_29) ?x72941) ?x72945) ?x72948) ?x72958)))
 (= (+ (+ (+ (+ (+ ?x72959 ?x72960) ?x72962) ?x72964) ?x72966) ?x72968) 0.0)))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x73048 (* ?x72873 l_0_12_86)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x73046 (* ?x72870 l_0_12_85)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x73044 (* ?x72867 l_0_12_84)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x73042 (* ?x72864 l_0_12_83)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x73040 (* ?x72861 l_0_12_82)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x73035 (* ?x72858 l_0_12_41)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x73021 (* ?x72855 l_0_12_40)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x73019 (* ?x72350 l_0_12_39)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x73017 (* ?x72159 l_0_12_38)))
 (let ((?x74212 (- (- (- (- (* (* (- 2.0) l_0_12_11) l_0_12_37) ?x73017) ?x73019) ?x73021) ?x73035)))
 (= (+ (+ (+ (+ (+ ?x74212 ?x73040) ?x73042) ?x73044) ?x73046) ?x73048) 0.0)))))))))))))))))))))
(assert
 (let ((?x73133 (* l_0_12_66 l_0_12_66)))
 (let ((?x73131 (* l_0_12_65 l_0_12_65)))
 (let ((?x73129 (* l_0_12_64 l_0_12_64)))
 (let ((?x73127 (* l_0_12_63 l_0_12_63)))
 (let ((?x73125 (* l_0_12_62 l_0_12_62)))
 (let ((?x73123 (* l_0_12_61 l_0_12_61)))
 (let ((?x73121 (* l_0_12_21 l_0_12_21)))
 (let ((?x73119 (* l_0_12_20 l_0_12_20)))
 (let ((?x73117 (* l_0_12_19 l_0_12_19)))
 (let ((?x73115 (* l_0_12_18 l_0_12_18)))
 (let ((?x73116 (- (- (* (- l_0_12_16) l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73115)))
 (let ((?x73130 (+ (+ (+ (+ (- (- (- ?x73116 ?x73117) ?x73119) ?x73121) ?x73123) ?x73125) ?x73127) ?x73129)))
 (= (+ (+ ?x73130 ?x73131) ?x73133) 0.0))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73191 (* ?x71873 l_0_12_79)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73189 (* ?x71870 l_0_12_78)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73187 (* ?x71867 l_0_12_77)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73185 (* ?x71864 l_0_12_76)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73183 (* ?x71861 l_0_12_75)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73181 (* ?x71858 l_0_12_74)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73179 (* ?x71835 l_0_12_34)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x61164 (* ?x71832 l_0_12_33)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x61165 (* ?x71829 l_0_12_32)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x61160 (* ?x71826 l_0_12_31)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x38097 (* ?x71823 l_0_12_30)))
 (let ((?x73178 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_29) ?x38097) ?x61160) ?x61165) ?x61164)))
 (let ((?x73192 (+ (+ (+ (+ (+ (+ (- ?x73178 ?x73179) ?x73181) ?x73183) ?x73185) ?x73187) ?x73189) ?x73191)))
 (= ?x73192 0.0))))))))))))))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73278 (* ?x71873 l_0_12_87)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73276 (* ?x71870 l_0_12_86)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73274 (* ?x71867 l_0_12_85)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73272 (* ?x71864 l_0_12_84)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73270 (* ?x71861 l_0_12_83)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73268 (* ?x71858 l_0_12_82)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73266 (* ?x71835 l_0_12_42)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x73264 (* ?x71832 l_0_12_41)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x73262 (* ?x71829 l_0_12_40)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x73260 (* ?x71826 l_0_12_39)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x73258 (* ?x71823 l_0_12_38)))
 (let ((?x74236 (- (- (- (- (* (* (- 2.0) l_0_12_16) l_0_12_37) ?x73258) ?x73260) ?x73262) ?x73264)))
 (let ((?x74245 (+ (+ (+ (+ (+ (+ (- ?x74236 ?x73266) ?x73268) ?x73270) ?x73272) ?x73274) ?x73276) ?x73278)))
 (= ?x74245 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73358 (* l_0_12_73 l_0_12_73)))
 (let ((?x73356 (* l_0_12_72 l_0_12_72)))
 (let ((?x73354 (* l_0_12_71 l_0_12_71)))
 (let ((?x73352 (* l_0_12_70 l_0_12_70)))
 (let ((?x73350 (* l_0_12_69 l_0_12_69)))
 (let ((?x73348 (* l_0_12_68 l_0_12_68)))
 (let ((?x73346 (* l_0_12_67 l_0_12_67)))
 (let ((?x73344 (* l_0_12_28 l_0_12_28)))
 (let ((?x73342 (* l_0_12_27 l_0_12_27)))
 (let ((?x73340 (* l_0_12_26 l_0_12_26)))
 (let ((?x73338 (* l_0_12_25 l_0_12_25)))
 (let ((?x73336 (* l_0_12_24 l_0_12_24)))
 (let ((?x73337 (- (- (* (- l_0_12_22) l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x73336)))
 (let ((?x73351 (+ (+ (+ (- (- (- (- ?x73337 ?x73338) ?x73340) ?x73342) ?x73344) ?x73346) ?x73348) ?x73350)))
 (= (+ (+ (+ (+ ?x73351 ?x73352) ?x73354) ?x73356) ?x73358) 0.0))))))))))))))))
(assert
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73424 (* ?x73423 l_0_12_80)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73421 (* ?x73420 l_0_12_79)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73418 (* ?x73417 l_0_12_78)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73415 (* ?x73414 l_0_12_77)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73412 (* ?x73411 l_0_12_76)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73409 (* ?x73408 l_0_12_75)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73406 (* ?x73405 l_0_12_74)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73403 (* ?x73402 l_0_12_35)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73400 (* ?x73399 l_0_12_34)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73397 (* ?x73396 l_0_12_33)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73394 (* ?x73393 l_0_12_32)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73391 (* ?x72409 l_0_12_31)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73389 (* ?x72201 l_0_12_30)))
 (let ((?x73398 (- (- (- (- (* (* (- 2.0) l_0_12_22) l_0_12_29) ?x73389) ?x73391) ?x73394) ?x73397)))
 (let ((?x73419 (+ (+ (+ (+ (+ (- (- ?x73398 ?x73400) ?x73403) ?x73406) ?x73409) ?x73412) ?x73415) ?x73418)))
 (= (+ (+ ?x73419 ?x73421) ?x73424) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73484 (* ?x73423 l_0_12_88)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73482 (* ?x73420 l_0_12_87)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73480 (* ?x73417 l_0_12_86)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73478 (* ?x73414 l_0_12_85)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73476 (* ?x73411 l_0_12_84)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73474 (* ?x73408 l_0_12_83)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73472 (* ?x73405 l_0_12_82)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73470 (* ?x73402 l_0_12_43)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73468 (* ?x73399 l_0_12_42)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73466 (* ?x73396 l_0_12_41)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73464 (* ?x73393 l_0_12_40)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73462 (* ?x72409 l_0_12_39)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73460 (* ?x72201 l_0_12_38)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x73458 (* ?x72649 l_0_12_37)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x73938 (* ?x72760 l_0_12_149)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x73936 (* ?x72757 l_0_12_148)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x73934 (* ?x72754 l_0_12_147)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x73932 (* ?x72751 l_0_12_146)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73930 (* ?x72998 l_0_12_99)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x73928 (* ?x72993 l_0_12_98)))
 (let ((?x73855 (* 2.0 l_0_12_101)))
 (let ((?x73926 (* ?x73855 l_0_12_97)))
 (let ((?x74006 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_104) ?x73926) ?x73928) ?x73930) ?x73932)))
 (let ((?x74009 (+ (+ (+ ?x74006 ?x73934) ?x73936) ?x73938)))
 (let ((?x61593 (- (- (- (- (- (- (- ?x74009 ?x73458) ?x73460) ?x73462) ?x73464) ?x73466) ?x73468) ?x73470)))
 (let ((?x74257 (+ (+ (+ (+ (+ (+ (+ ?x61593 ?x73472) ?x73474) ?x73476) ?x73478) ?x73480) ?x73482) ?x73484)))
 (= ?x74257 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73560 (* l_0_12_81 l_0_12_81)))
 (let ((?x73558 (* l_0_12_80 l_0_12_80)))
 (let ((?x73556 (* l_0_12_79 l_0_12_79)))
 (let ((?x73554 (* l_0_12_78 l_0_12_78)))
 (let ((?x73552 (* l_0_12_77 l_0_12_77)))
 (let ((?x73550 (* l_0_12_76 l_0_12_76)))
 (let ((?x73548 (* l_0_12_75 l_0_12_75)))
 (let ((?x73546 (* l_0_12_74 l_0_12_74)))
 (let ((?x73544 (* l_0_12_36 l_0_12_36)))
 (let ((?x73542 (* l_0_12_35 l_0_12_35)))
 (let ((?x73540 (* l_0_12_34 l_0_12_34)))
 (let ((?x73538 (* l_0_12_33 l_0_12_33)))
 (let ((?x73536 (* l_0_12_32 l_0_12_32)))
 (let ((?x73534 (* l_0_12_31 l_0_12_31)))
 (let ((?x73535 (- (- (* (- l_0_12_29) l_0_12_29) (* l_0_12_30 l_0_12_30)) ?x73534)))
 (let ((?x73549 (+ (+ (- (- (- (- (- ?x73535 ?x73536) ?x73538) ?x73540) ?x73542) ?x73544) ?x73546) ?x73548)))
 (= (+ (+ (+ (+ (+ (+ ?x73549 ?x73550) ?x73552) ?x73554) ?x73556) ?x73558) ?x73560) 0.0))))))))))))))))))
(assert
 (let ((?x73655 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73652 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73649 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73646 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73643 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73640 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73637 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73634 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73631 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73628 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73625 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73622 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73619 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x73616 (* ?x72443 l_0_12_39)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x73614 (* ?x72440 l_0_12_38)))
 (let ((?x74273 (- (- (- (- (* (* (- 2.0) l_0_12_29) l_0_12_37) ?x73614) ?x73616) ?x73619) ?x73622)))
 (let ((?x74280 (+ (+ (+ (+ (- (- (- ?x74273 ?x73625) ?x73628) ?x73631) ?x73634) ?x73637) ?x73640) ?x73643)))
 (= (+ (+ (+ (+ ?x74280 ?x73646) ?x73649) ?x73652) ?x73655) 0.0)))))))))))))))))))))
(assert
 (let ((?x73794 (* l_0_12_90 l_0_12_90)))
 (let ((?x73792 (* l_0_12_89 l_0_12_89)))
 (let ((?x73790 (* l_0_12_88 l_0_12_88)))
 (let ((?x73788 (* l_0_12_87 l_0_12_87)))
 (let ((?x73786 (* l_0_12_86 l_0_12_86)))
 (let ((?x73784 (* l_0_12_85 l_0_12_85)))
 (let ((?x73782 (* l_0_12_84 l_0_12_84)))
 (let ((?x73780 (* l_0_12_83 l_0_12_83)))
 (let ((?x73778 (* l_0_12_82 l_0_12_82)))
 (let ((?x73776 (* l_0_12_45 l_0_12_45)))
 (let ((?x73774 (* l_0_12_44 l_0_12_44)))
 (let ((?x73772 (* l_0_12_43 l_0_12_43)))
 (let ((?x73770 (* l_0_12_42 l_0_12_42)))
 (let ((?x73768 (* l_0_12_41 l_0_12_41)))
 (let ((?x73766 (* l_0_12_40 l_0_12_40)))
 (let ((?x73764 (* l_0_12_39 l_0_12_39)))
 (let ((?x61610 (- (- (* (- l_0_12_37) l_0_12_37) (* l_0_12_38 l_0_12_38)) ?x73764)))
 (let ((?x38923 (+ (- (- (- (- (- (- ?x61610 ?x73766) ?x73768) ?x73770) ?x73772) ?x73774) ?x73776) ?x73778)))
 (let ((?x74291 (+ (+ (+ (+ (+ (+ (+ ?x38923 ?x73780) ?x73782) ?x73784) ?x73786) ?x73788) ?x73790) ?x73792)))
 (= (+ ?x74291 ?x73794) 0.0)))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71810 (* ?x71809 l_0_12_47)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x39008 (* ?x39012 l_0_12_227)))
 (let ((?x51161 (- (* (* 2.0 l_0_12_1) l_0_12_2) (* (* 2.0 l_0_12_182) l_0_12_184))))
 (let ((?x61644 (- (+ (- ?x51161 (* (* 2.0 l_0_12_183) l_0_12_185)) ?x39008) (* (* 2.0 l_0_12_272) l_0_12_274))))
 (let ((?x38978 (- (- ?x61644 (* (* 2.0 l_0_12_273) l_0_12_275)) (* (* 2.0 l_0_12_317) l_0_12_319))))
 (let ((?x61642 (- (- ?x38978 (* (* 2.0 l_0_12_318) l_0_12_320)) (* (* 2.0 l_0_12_362) l_0_12_364))))
 (let ((?x61658 (- (- ?x61642 (* (* 2.0 l_0_12_363) l_0_12_365)) (* (* 2.0 l_0_12_407) l_0_12_409))))
 (= (- (- ?x61658 (* (* 2.0 l_0_12_408) l_0_12_410)) ?x71810) 0.0)))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71856 (* ?x71809 l_0_12_49)))
 (let ((?x74328 (* l_0_12_411 l_0_12_411)))
 (let ((?x74326 (* l_0_12_410 l_0_12_410)))
 (let ((?x74324 (* l_0_12_409 l_0_12_409)))
 (let ((?x74322 (* l_0_12_366 l_0_12_366)))
 (let ((?x74320 (* l_0_12_365 l_0_12_365)))
 (let ((?x74318 (* l_0_12_364 l_0_12_364)))
 (let ((?x74316 (* l_0_12_321 l_0_12_321)))
 (let ((?x74314 (* l_0_12_320 l_0_12_320)))
 (let ((?x74312 (* l_0_12_319 l_0_12_319)))
 (let ((?x39143 (* l_0_12_276 l_0_12_276)))
 (let ((?x51215 (* l_0_12_275 l_0_12_275)))
 (let ((?x39128 (* l_0_12_274 l_0_12_274)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x61691 (* ?x39012 l_0_12_229)))
 (let ((?x39167 (- (* (* 2.0 l_0_12_1) l_0_12_4) (* (* 1.0 l_0_12_184) l_0_12_184))))
 (let ((?x61779 (- (- ?x39167 (* (* 1.0 l_0_12_185) l_0_12_185)) (* (* 1.0 l_0_12_186) l_0_12_186))))
 (let ((?x74317 (- (- (- (- (- (- (+ ?x61779 ?x61691) ?x39128) ?x51215) ?x39143) ?x74312) ?x74314) ?x74316)))
 (let ((?x74330 (- (- (- (- (- (- (- ?x74317 ?x74318) ?x74320) ?x74322) ?x74324) ?x74326) ?x74328) ?x71856)))
 (= ?x74330 0.0))))))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71928 (* ?x71809 l_0_12_52)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74376 (* ?x39012 l_0_12_232)))
 (let ((?x74369 (- (* (* 2.0 l_0_12_1) l_0_12_7) (* (* 2.0 l_0_12_184) l_0_12_187))))
 (let ((?x74375 (- (- ?x74369 (* (* 2.0 l_0_12_185) l_0_12_188)) (* (* 2.0 l_0_12_186) l_0_12_189))))
 (let ((?x74383 (- (- (+ ?x74375 ?x74376) (* (* 2.0 l_0_12_274) l_0_12_277)) (* (* 2.0 l_0_12_275) l_0_12_278))))
 (let ((?x74389 (- (- ?x74383 (* (* 2.0 l_0_12_276) l_0_12_279)) (* (* 2.0 l_0_12_319) l_0_12_322))))
 (let ((?x74395 (- (- ?x74389 (* (* 2.0 l_0_12_320) l_0_12_323)) (* (* 2.0 l_0_12_321) l_0_12_324))))
 (let ((?x74401 (- (- ?x74395 (* (* 2.0 l_0_12_364) l_0_12_367)) (* (* 2.0 l_0_12_365) l_0_12_368))))
 (let ((?x74407 (- (- ?x74401 (* (* 2.0 l_0_12_366) l_0_12_369)) (* (* 2.0 l_0_12_409) l_0_12_412))))
 (let ((?x74413 (- (- ?x74407 (* (* 2.0 l_0_12_410) l_0_12_413)) (* (* 2.0 l_0_12_411) l_0_12_414))))
 (= (- ?x74413 ?x71928) 0.0))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71934 (* ?x71809 l_0_12_56)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74464 (* ?x39012 l_0_12_236)))
 (let ((?x74459 (- (* (* 2.0 l_0_12_1) l_0_12_11) (* (* 2.0 l_0_12_184) l_0_12_191))))
 (let ((?x74463 (- (- ?x74459 (* (* 2.0 l_0_12_185) l_0_12_192)) (* (* 2.0 l_0_12_186) l_0_12_193))))
 (let ((?x74469 (- (- (+ ?x74463 ?x74464) (* (* 2.0 l_0_12_274) l_0_12_281)) (* (* 2.0 l_0_12_275) l_0_12_282))))
 (let ((?x74473 (- (- ?x74469 (* (* 2.0 l_0_12_276) l_0_12_283)) (* (* 2.0 l_0_12_319) l_0_12_326))))
 (let ((?x74477 (- (- ?x74473 (* (* 2.0 l_0_12_320) l_0_12_327)) (* (* 2.0 l_0_12_321) l_0_12_328))))
 (let ((?x74481 (- (- ?x74477 (* (* 2.0 l_0_12_364) l_0_12_371)) (* (* 2.0 l_0_12_365) l_0_12_372))))
 (let ((?x74485 (- (- ?x74481 (* (* 2.0 l_0_12_366) l_0_12_373)) (* (* 2.0 l_0_12_409) l_0_12_416))))
 (let ((?x74489 (- (- ?x74485 (* (* 2.0 l_0_12_410) l_0_12_417)) (* (* 2.0 l_0_12_411) l_0_12_418))))
 (= (- ?x74489 ?x71934) 0.0))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71944 (* ?x71809 l_0_12_61)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x61964 (* ?x39012 l_0_12_241)))
 (let ((?x51431 (- (* (* 2.0 l_0_12_1) l_0_12_16) (* (* 2.0 l_0_12_184) l_0_12_196))))
 (let ((?x61959 (- (- ?x51431 (* (* 2.0 l_0_12_185) l_0_12_197)) (* (* 2.0 l_0_12_186) l_0_12_198))))
 (let ((?x62009 (- (- (+ ?x61959 ?x61964) (* (* 2.0 l_0_12_274) l_0_12_286)) (* (* 2.0 l_0_12_275) l_0_12_287))))
 (let ((?x74512 (- (- ?x62009 (* (* 2.0 l_0_12_276) l_0_12_288)) (* (* 2.0 l_0_12_319) l_0_12_331))))
 (let ((?x74516 (- (- ?x74512 (* (* 2.0 l_0_12_320) l_0_12_332)) (* (* 2.0 l_0_12_321) l_0_12_333))))
 (let ((?x74520 (- (- ?x74516 (* (* 2.0 l_0_12_364) l_0_12_376)) (* (* 2.0 l_0_12_365) l_0_12_377))))
 (let ((?x74524 (- (- ?x74520 (* (* 2.0 l_0_12_366) l_0_12_378)) (* (* 2.0 l_0_12_409) l_0_12_421))))
 (let ((?x74528 (- (- ?x74524 (* (* 2.0 l_0_12_410) l_0_12_422)) (* (* 2.0 l_0_12_411) l_0_12_423))))
 (= (- ?x74528 ?x71944) 0.0))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x71954 (* ?x71809 l_0_12_67)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74580 (* ?x39012 l_0_12_247)))
 (let ((?x74575 (- (* (* 2.0 l_0_12_1) l_0_12_22) (* (* 2.0 l_0_12_184) l_0_12_202))))
 (let ((?x74579 (- (- ?x74575 (* (* 2.0 l_0_12_185) l_0_12_203)) (* (* 2.0 l_0_12_186) l_0_12_204))))
 (let ((?x74585 (- (- (+ ?x74579 ?x74580) (* (* 2.0 l_0_12_274) l_0_12_292)) (* (* 2.0 l_0_12_275) l_0_12_293))))
 (let ((?x74589 (- (- ?x74585 (* (* 2.0 l_0_12_276) l_0_12_294)) (* (* 2.0 l_0_12_319) l_0_12_337))))
 (let ((?x74593 (- (- ?x74589 (* (* 2.0 l_0_12_320) l_0_12_338)) (* (* 2.0 l_0_12_321) l_0_12_339))))
 (let ((?x74597 (- (- ?x74593 (* (* 2.0 l_0_12_364) l_0_12_382)) (* (* 2.0 l_0_12_365) l_0_12_383))))
 (let ((?x74601 (- (- ?x74597 (* (* 2.0 l_0_12_366) l_0_12_384)) (* (* 2.0 l_0_12_409) l_0_12_427))))
 (let ((?x74605 (- (- ?x74601 (* (* 2.0 l_0_12_410) l_0_12_428)) (* (* 2.0 l_0_12_411) l_0_12_429))))
 (= (- ?x74605 ?x71954) 0.0))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x74672 (* ?x74671 l_0_12_94)))
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72010 (* ?x71809 l_0_12_74)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74644 (* ?x39012 l_0_12_254)))
 (let ((?x61691 (* ?x39012 l_0_12_229)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x62191 (* ?x72068 l_0_12_139)))
 (let ((?x39475 (- (- (* (* 2.0 l_0_12_1) l_0_12_29) ?x62191) (* (* 2.0 l_0_12_184) l_0_12_209))))
 (let ((?x74642 (- (- ?x39475 (* (* 2.0 l_0_12_185) l_0_12_210)) (* (* 2.0 l_0_12_186) l_0_12_211))))
 (let ((?x74649 (- (- (+ (- ?x74642 ?x61691) ?x74644) (* (* 2.0 l_0_12_274) l_0_12_299)) (* (* 2.0 l_0_12_275) l_0_12_300))))
 (let ((?x74653 (- (- ?x74649 (* (* 2.0 l_0_12_276) l_0_12_301)) (* (* 2.0 l_0_12_319) l_0_12_344))))
 (let ((?x74657 (- (- ?x74653 (* (* 2.0 l_0_12_320) l_0_12_345)) (* (* 2.0 l_0_12_321) l_0_12_346))))
 (let ((?x74661 (- (- ?x74657 (* (* 2.0 l_0_12_364) l_0_12_389)) (* (* 2.0 l_0_12_365) l_0_12_390))))
 (let ((?x74665 (- (- ?x74661 (* (* 2.0 l_0_12_366) l_0_12_391)) (* (* 2.0 l_0_12_409) l_0_12_434))))
 (let ((?x74669 (- (- ?x74665 (* (* 2.0 l_0_12_410) l_0_12_435)) (* (* 2.0 l_0_12_411) l_0_12_436))))
 (= (+ (- ?x74669 ?x72010) ?x74672) 0.0)))))))))))))))))))
(assert
 (let ((?x71809 (* 2.0 l_0_12_46)))
 (let ((?x72071 (* ?x71809 l_0_12_82)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x62350 (* ?x39012 l_0_12_262)))
 (let ((?x62392 (- (* (* 2.0 l_0_12_1) l_0_12_37) (* (* 2.0 l_0_12_184) l_0_12_217))))
 (let ((?x39678 (- (- ?x62392 (* (* 2.0 l_0_12_185) l_0_12_218)) (* (* 2.0 l_0_12_186) l_0_12_219))))
 (let ((?x62400 (- (- (+ ?x39678 ?x62350) (* (* 2.0 l_0_12_274) l_0_12_307)) (* (* 2.0 l_0_12_275) l_0_12_308))))
 (let ((?x74690 (- (- ?x62400 (* (* 2.0 l_0_12_276) l_0_12_309)) (* (* 2.0 l_0_12_319) l_0_12_352))))
 (let ((?x74694 (- (- ?x74690 (* (* 2.0 l_0_12_320) l_0_12_353)) (* (* 2.0 l_0_12_321) l_0_12_354))))
 (let ((?x74698 (- (- ?x74694 (* (* 2.0 l_0_12_364) l_0_12_397)) (* (* 2.0 l_0_12_365) l_0_12_398))))
 (let ((?x74702 (- (- ?x74698 (* (* 2.0 l_0_12_366) l_0_12_399)) (* (* 2.0 l_0_12_409) l_0_12_442))))
 (let ((?x74706 (- (- ?x74702 (* (* 2.0 l_0_12_410) l_0_12_443)) (* (* 2.0 l_0_12_411) l_0_12_444))))
 (= (- ?x74706 ?x72071) 0.0))))))))))))))
(assert
 (let ((?x72095 (* l_0_12_48 l_0_12_48)))
 (let ((?x72093 (* l_0_12_47 l_0_12_47)))
 (let ((?x72086 (* l_0_12_3 l_0_12_3)))
 (let ((?x74754 (* l_0_12_228 l_0_12_228)))
 (let ((?x74756 (+ (+ (+ (* l_0_12_2 l_0_12_2) (* l_0_12_227 l_0_12_227)) ?x74754) ?x72086)))
 (= (- (- ?x74756 ?x72093) ?x72095) 0.0)))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72112 (* ?x72111 l_0_12_50)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72109 (* ?x72108 l_0_12_49)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72106 (* ?x72105 l_0_12_5)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74767 (* ?x74766 l_0_12_230)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x62613 (* ?x51818 l_0_12_229)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x73983 (* ?x72143 l_0_12_4)))
 (= (- (- (+ (+ (+ ?x73983 ?x62613) ?x74767) ?x72106) ?x72109) ?x72112) 0.0))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x74672 (* ?x74671 l_0_12_94)))
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72150 (* ?x72111 l_0_12_53)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72148 (* ?x72108 l_0_12_52)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72146 (* ?x72105 l_0_12_8)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74785 (* ?x74766 l_0_12_233)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74783 (* ?x51818 l_0_12_232)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72144 (* ?x72143 l_0_12_7)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x62191 (* ?x72068 l_0_12_139)))
 (let ((?x74790 (- (- (- (+ (+ (+ (+ ?x62191 ?x72144) ?x74783) ?x74785) ?x72146) ?x72148) ?x72150) ?x74672)))
 (= ?x74790 0.0)))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72168 (* ?x72111 l_0_12_57)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72166 (* ?x72108 l_0_12_56)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74802 (* ?x74766 l_0_12_237)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x62630 (* ?x51818 l_0_12_236)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72164 (* ?x72159 l_0_12_3)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x61360 (* ?x61026 l_0_12_2)))
 (= (- (- (+ (+ (+ ?x61360 ?x72164) ?x62630) ?x74802) ?x72166) ?x72168) 0.0))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72187 (* ?x72111 l_0_12_62)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72185 (* ?x72108 l_0_12_61)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74827 (* ?x74766 l_0_12_242)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74825 (* ?x51818 l_0_12_241)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72183 (* ?x71823 l_0_12_3)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x61416 (* ?x71816 l_0_12_2)))
 (= (- (- (+ (+ (+ ?x61416 ?x72183) ?x74825) ?x74827) ?x72185) ?x72187) 0.0))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72211 (* ?x72111 l_0_12_68)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72209 (* ?x72108 l_0_12_67)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72202 (* ?x72201 l_0_12_3)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x51725 (* ?x74766 l_0_12_248)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x62654 (* ?x51818 l_0_12_247)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x74069 (* ?x72143 l_0_12_22)))
 (= (- (- (+ (+ (+ ?x74069 ?x62654) ?x51725) ?x72202) ?x72209) ?x72211) 0.0))))))))))))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x74857 (* ?x74856 l_0_12_95)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x74854 (* ?x74853 l_0_12_94)))
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72229 (* ?x72111 l_0_12_75)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72227 (* ?x72108 l_0_12_74)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72225 (* ?x72105 l_0_12_30)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74848 (* ?x74766 l_0_12_255)))
 (let ((?x74767 (* ?x74766 l_0_12_230)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74845 (* ?x51818 l_0_12_254)))
 (let ((?x62613 (* ?x51818 l_0_12_229)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x74103 (* ?x72143 l_0_12_29)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x74841 (* ?x72253 l_0_12_140)))
 (let ((?x74846 (+ (- (+ (- (* (* (- 2.0) l_0_12_137) l_0_12_139) ?x74841) ?x74103) ?x62613) ?x74845)))
 (let ((?x74858 (+ (+ (- (- (+ (+ (- ?x74846 ?x74767) ?x74848) ?x72225) ?x72227) ?x72229) ?x74854) ?x74857)))
 (= ?x74858 0.0))))))))))))))))))))))))
(assert
 (let ((?x72111 (* 2.0 l_0_12_48)))
 (let ((?x72262 (* ?x72111 l_0_12_83)))
 (let ((?x72108 (* 2.0 l_0_12_47)))
 (let ((?x72260 (* ?x72108 l_0_12_82)))
 (let ((?x72105 (* 2.0 l_0_12_3)))
 (let ((?x72258 (* ?x72105 l_0_12_38)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74882 (* ?x74766 l_0_12_263)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74880 (* ?x51818 l_0_12_262)))
 (let ((?x72143 (* 2.0 l_0_12_2)))
 (let ((?x72256 (* ?x72143 l_0_12_37)))
 (= (- (- (+ (+ (+ ?x72256 ?x74880) ?x74882) ?x72258) ?x72260) ?x72262) 0.0))))))))))))))
(assert
 (let ((?x72295 (* l_0_12_6 l_0_12_6)))
 (let ((?x72293 (* l_0_12_51 l_0_12_51)))
 (let ((?x72291 (* l_0_12_50 l_0_12_50)))
 (let ((?x72289 (* l_0_12_5 l_0_12_5)))
 (let ((?x72287 (* l_0_12_49 l_0_12_49)))
 (let ((?x72299 (* l_0_12_4 l_0_12_4)))
 (let ((?x74908 (* l_0_12_231 l_0_12_231)))
 (let ((?x74909 (+ (+ (* l_0_12_229 l_0_12_229) (* l_0_12_230 l_0_12_230)) ?x74908)))
 (= (+ (- (- (+ (- (+ ?x74909 ?x72299) ?x72287) ?x72289) ?x72291) ?x72293) ?x72295) 0.0))))))))))
(assert
 (let ((?x72325 (* (* 2.0 l_0_12_6) l_0_12_9)))
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72322 (* ?x72321 l_0_12_54)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72319 (* ?x72318 l_0_12_53)))
 (let ((?x72316 (* (* 2.0 l_0_12_5) l_0_12_8)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72313 (* ?x72312 l_0_12_52)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74935 (* ?x74934 l_0_12_234)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74932 (* ?x74931 l_0_12_233)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x74930 (* ?x74924 l_0_12_232)))
 (let ((?x74940 (- (+ (+ (+ ?x74930 ?x74932) ?x74935) (* (* 2.0 l_0_12_4) l_0_12_7)) ?x72313)))
 (= (+ (- (- (+ ?x74940 ?x72316) ?x72319) ?x72322) ?x72325) 0.0)))))))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72357 (* ?x72321 l_0_12_58)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72355 (* ?x72318 l_0_12_57)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72353 (* ?x72312 l_0_12_56)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74967 (* ?x74934 l_0_12_238)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74965 (* ?x74931 l_0_12_237)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x74963 (* ?x74924 l_0_12_236)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72351 (* ?x72350 l_0_12_6)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72348 (* ?x72159 l_0_12_5)))
 (let ((?x74966 (+ (+ (+ (+ (* (* 2.0 l_0_12_11) l_0_12_4) ?x72348) ?x72351) ?x74963) ?x74965)))
 (= (- (- (- (+ ?x74966 ?x74967) ?x72353) ?x72355) ?x72357) 0.0)))))))))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72385 (* ?x72321 l_0_12_63)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72383 (* ?x72318 l_0_12_62)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72381 (* ?x72312 l_0_12_61)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74980 (* ?x74934 l_0_12_243)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74978 (* ?x74931 l_0_12_242)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62759 (* ?x74924 l_0_12_241)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72373 (* ?x71826 l_0_12_6)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72370 (* ?x71823 l_0_12_5)))
 (let ((?x74979 (+ (+ (+ (+ (* (* 2.0 l_0_12_16) l_0_12_4) ?x72370) ?x72373) ?x62759) ?x74978)))
 (= (- (- (- (+ ?x74979 ?x74980) ?x72381) ?x72383) ?x72385) 0.0)))))))))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72416 (* ?x72321 l_0_12_69)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72414 (* ?x72318 l_0_12_68)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72412 (* ?x72312 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72410 (* ?x72409 l_0_12_6)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75000 (* ?x74934 l_0_12_249)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74998 (* ?x74931 l_0_12_248)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72401 (* ?x72201 l_0_12_5)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62774 (* ?x74924 l_0_12_247)))
 (let ((?x75001 (+ (+ (+ (+ (* (* 2.0 l_0_12_22) l_0_12_4) ?x62774) ?x72401) ?x74998) ?x75000)))
 (= (- (- (- (+ ?x75001 ?x72410) ?x72412) ?x72414) ?x72416) 0.0)))))))))))))))))))
(assert
 (let ((?x75042 (* l_0_12_96 l_0_12_96)))
 (let ((?x75040 (* l_0_12_95 l_0_12_95)))
 (let ((?x75038 (* l_0_12_94 l_0_12_94)))
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72450 (* ?x72321 l_0_12_76)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72448 (* ?x72318 l_0_12_75)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72446 (* ?x72312 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72444 (* ?x72443 l_0_12_6)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72441 (* ?x72440 l_0_12_5)))
 (let ((?x74908 (* l_0_12_231 l_0_12_231)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75028 (* ?x74934 l_0_12_256)))
 (let ((?x74906 (* l_0_12_230 l_0_12_230)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x75025 (* ?x74931 l_0_12_255)))
 (let ((?x74905 (* l_0_12_229 l_0_12_229)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x75022 (* ?x74924 l_0_12_254)))
 (let ((?x75020 (* l_0_12_141 l_0_12_141)))
 (let ((?x75021 (- (- (* (- l_0_12_139) l_0_12_139) (* l_0_12_140 l_0_12_140)) ?x75020)))
 (let ((?x75032 (+ (- (+ (- (+ (- (+ ?x75021 ?x75022) ?x74905) ?x75025) ?x74906) ?x75028) ?x74908) (* (* 2.0 l_0_12_29) l_0_12_4))))
 (let ((?x75041 (+ (+ (- (- (- (+ (+ ?x75032 ?x72441) ?x72444) ?x72446) ?x72448) ?x72450) ?x75038) ?x75040)))
 (= (+ ?x75041 ?x75042) 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x72321 (* 2.0 l_0_12_51)))
 (let ((?x72499 (* ?x72321 l_0_12_84)))
 (let ((?x72318 (* 2.0 l_0_12_50)))
 (let ((?x72497 (* ?x72318 l_0_12_83)))
 (let ((?x72312 (* 2.0 l_0_12_49)))
 (let ((?x72495 (* ?x72312 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72493 (* ?x72492 l_0_12_6)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72490 (* ?x72489 l_0_12_5)))
 (let ((?x72486 (* 2.0 l_0_12_37)))
 (let ((?x72487 (* ?x72486 l_0_12_4)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75066 (* ?x74934 l_0_12_264)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x75064 (* ?x74931 l_0_12_263)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62897 (* ?x74924 l_0_12_262)))
 (let ((?x75072 (- (- (+ (+ (+ (+ (+ ?x62897 ?x75064) ?x75066) ?x72487) ?x72490) ?x72493) ?x72495) ?x72497)))
 (= (- ?x75072 ?x72499) 0.0)))))))))))))))))))))
(assert
 (let ((?x72555 (* l_0_12_9 l_0_12_9)))
 (let ((?x72553 (* l_0_12_8 l_0_12_8)))
 (let ((?x72551 (* l_0_12_7 l_0_12_7)))
 (let ((?x72549 (* l_0_12_55 l_0_12_55)))
 (let ((?x72547 (* l_0_12_54 l_0_12_54)))
 (let ((?x72545 (* l_0_12_53 l_0_12_53)))
 (let ((?x72534 (* l_0_12_52 l_0_12_52)))
 (let ((?x75090 (* l_0_12_235 l_0_12_235)))
 (let ((?x75088 (* l_0_12_234 l_0_12_234)))
 (let ((?x75086 (* l_0_12_233 l_0_12_233)))
 (let ((?x75089 (+ (+ (+ (* l_0_12_10 l_0_12_10) (* l_0_12_232 l_0_12_232)) ?x75086) ?x75088)))
 (let ((?x75097 (+ (+ (- (- (- (- (+ ?x75089 ?x75090) ?x72534) ?x72545) ?x72547) ?x72549) ?x72551) ?x72553)))
 (= (+ ?x75097 ?x72555) 0.0))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72632 (* ?x72581 l_0_12_64)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72630 (* ?x72578 l_0_12_63)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72628 (* ?x72575 l_0_12_62)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72626 (* ?x72572 l_0_12_61)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75121 (* ?x73904 l_0_12_244)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75119 (* ?x73901 l_0_12_243)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75117 (* ?x73898 l_0_12_242)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75115 (* ?x73895 l_0_12_241)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x72624 (* ?x71826 l_0_12_9)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x72622 (* ?x71823 l_0_12_8)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x72620 (* ?x71816 l_0_12_7)))
 (let ((?x75116 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_19) ?x72620) ?x72622) ?x72624) ?x75115)))
 (let ((?x75126 (- (- (- (- (+ (+ (+ ?x75116 ?x75117) ?x75119) ?x75121) ?x72626) ?x72628) ?x72630) ?x72632)))
 (= ?x75126 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72671 (* ?x72581 l_0_12_70)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72669 (* ?x72578 l_0_12_69)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72667 (* ?x72575 l_0_12_68)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72665 (* ?x72572 l_0_12_67)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x72663 (* ?x72409 l_0_12_9)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75139 (* ?x73904 l_0_12_250)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75137 (* ?x73901 l_0_12_249)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75135 (* ?x73898 l_0_12_248)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x62918 (* ?x73895 l_0_12_247)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x72654 (* ?x72201 l_0_12_8)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x72651 (* ?x72649 l_0_12_7)))
 (let ((?x75136 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_25) ?x72651) ?x72654) ?x62918) ?x75135)))
 (let ((?x75145 (- (- (- (- (+ (+ (+ ?x75136 ?x75137) ?x75139) ?x72663) ?x72665) ?x72667) ?x72669) ?x72671)))
 (= ?x75145 0.0))))))))))))))))))))))))))
(assert
 (let ((?x75189 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x75186 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x75183 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72713 (* ?x72581 l_0_12_77)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72711 (* ?x72578 l_0_12_76)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72709 (* ?x72575 l_0_12_75)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72707 (* ?x72572 l_0_12_74)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x72705 (* ?x72443 l_0_12_9)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x72696 (* ?x72440 l_0_12_8)))
 (let ((?x72691 (* 2.0 l_0_12_29)))
 (let ((?x72693 (* ?x72691 l_0_12_7)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75173 (* ?x73904 l_0_12_257)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75171 (* ?x73901 l_0_12_256)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75169 (* ?x73898 l_0_12_255)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75167 (* ?x73895 l_0_12_254)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74935 (* ?x74934 l_0_12_234)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74932 (* ?x74931 l_0_12_233)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x74930 (* ?x74924 l_0_12_232)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75162 (* ?x72483 l_0_12_144)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75160 (* ?x72480 l_0_12_143)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x62937 (* ?x72477 l_0_12_142)))
 (let ((?x75164 (- (- (- (- (* (* 2.0 l_0_12_10) l_0_12_32) ?x62937) ?x75160) ?x75162) ?x74930)))
 (let ((?x75175 (+ (+ (+ (+ (+ (- (- ?x75164 ?x74932) ?x74935) ?x75167) ?x75169) ?x75171) ?x75173) ?x72693)))
 (let ((?x75184 (+ (- (- (- (- (+ (+ ?x75175 ?x72696) ?x72705) ?x72707) ?x72709) ?x72711) ?x72713) ?x75183)))
 (= (+ (+ ?x75184 ?x75186) ?x75189) 0.0))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72581 (* 2.0 l_0_12_55)))
 (let ((?x72775 (* ?x72581 l_0_12_85)))
 (let ((?x72578 (* 2.0 l_0_12_54)))
 (let ((?x72773 (* ?x72578 l_0_12_84)))
 (let ((?x72575 (* 2.0 l_0_12_53)))
 (let ((?x72771 (* ?x72575 l_0_12_83)))
 (let ((?x72572 (* 2.0 l_0_12_52)))
 (let ((?x72769 (* ?x72572 l_0_12_82)))
 (let ((?x72492 (* 2.0 l_0_12_39)))
 (let ((?x72767 (* ?x72492 l_0_12_9)))
 (let ((?x72489 (* 2.0 l_0_12_38)))
 (let ((?x72765 (* ?x72489 l_0_12_8)))
 (let ((?x72486 (* 2.0 l_0_12_37)))
 (let ((?x72763 (* ?x72486 l_0_12_7)))
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75211 (* ?x73904 l_0_12_265)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75209 (* ?x73901 l_0_12_264)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75207 (* ?x73898 l_0_12_263)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75205 (* ?x73895 l_0_12_262)))
 (let ((?x75212 (+ (+ (+ (+ (* (* 2.0 l_0_12_10) l_0_12_40) ?x75205) ?x75207) ?x75209) ?x75211)))
 (let ((?x75219 (- (- (- (- (+ (+ (+ ?x75212 ?x72763) ?x72765) ?x72767) ?x72769) ?x72771) ?x72773) ?x72775)))
 (= ?x75219 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72829 (* l_0_12_60 l_0_12_60)))
 (let ((?x72827 (* l_0_12_59 l_0_12_59)))
 (let ((?x72825 (* l_0_12_58 l_0_12_58)))
 (let ((?x72823 (* l_0_12_57 l_0_12_57)))
 (let ((?x72821 (* l_0_12_56 l_0_12_56)))
 (let ((?x75257 (* l_0_12_240 l_0_12_240)))
 (let ((?x75255 (* l_0_12_239 l_0_12_239)))
 (let ((?x75253 (* l_0_12_238 l_0_12_238)))
 (let ((?x75251 (* l_0_12_237 l_0_12_237)))
 (let ((?x75249 (* l_0_12_236 l_0_12_236)))
 (let ((?x72819 (* l_0_12_15 l_0_12_15)))
 (let ((?x72817 (* l_0_12_14 l_0_12_14)))
 (let ((?x72815 (* l_0_12_13 l_0_12_13)))
 (let ((?x75247 (+ (+ (+ (* l_0_12_11 l_0_12_11) (* l_0_12_12 l_0_12_12)) ?x72815) ?x72817)))
 (let ((?x75259 (- (+ (+ (+ (+ (+ (+ ?x75247 ?x72819) ?x75249) ?x75251) ?x75253) ?x75255) ?x75257) ?x72821)))
 (= (- (- (- (- ?x75259 ?x72823) ?x72825) ?x72827) ?x72829) 0.0)))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72874 (* ?x72873 l_0_12_65)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72871 (* ?x72870 l_0_12_64)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72868 (* ?x72867 l_0_12_63)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72865 (* ?x72864 l_0_12_62)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72862 (* ?x72861 l_0_12_61)))
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75290 (* ?x75289 l_0_12_245)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75287 (* ?x75286 l_0_12_244)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75284 (* ?x75283 l_0_12_243)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75281 (* ?x75280 l_0_12_242)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75278 (* ?x75277 l_0_12_241)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72859 (* ?x72858 l_0_12_20)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72856 (* ?x72855 l_0_12_19)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72853 (* ?x72350 l_0_12_18)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72851 (* ?x72159 l_0_12_17)))
 (let ((?x75276 (+ (+ (+ (+ (* (* 2.0 l_0_12_11) l_0_12_16) ?x72851) ?x72853) ?x72856) ?x72859)))
 (let ((?x75293 (- (- (+ (+ (+ (+ (+ ?x75276 ?x75278) ?x75281) ?x75284) ?x75287) ?x75290) ?x72862) ?x72865)))
 (= (- (- (- ?x75293 ?x72868) ?x72871) ?x72874) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72921 (* ?x72873 l_0_12_71)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72919 (* ?x72870 l_0_12_70)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72917 (* ?x72867 l_0_12_69)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72915 (* ?x72864 l_0_12_68)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72913 (* ?x72861 l_0_12_67)))
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75312 (* ?x75289 l_0_12_251)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75310 (* ?x75286 l_0_12_250)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75308 (* ?x75283 l_0_12_249)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x63033 (* ?x75280 l_0_12_248)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x63038 (* ?x75277 l_0_12_247)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72911 (* ?x72858 l_0_12_26)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72901 (* ?x72855 l_0_12_25)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72898 (* ?x72350 l_0_12_24)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x37957 (* ?x72159 l_0_12_23)))
 (let ((?x63035 (+ (+ (+ (+ (* (* 2.0 l_0_12_11) l_0_12_22) ?x37957) ?x72898) ?x72901) ?x72911)))
 (let ((?x75315 (- (- (+ (+ (+ (+ (+ ?x63035 ?x63038) ?x63033) ?x75308) ?x75310) ?x75312) ?x72913) ?x72915)))
 (= (- (- (- ?x75315 ?x72917) ?x72919) ?x72921) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x72968 (* ?x72873 l_0_12_78)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x72966 (* ?x72870 l_0_12_77)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x72964 (* ?x72867 l_0_12_76)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x72962 (* ?x72864 l_0_12_75)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x72960 (* ?x72861 l_0_12_74)))
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75336 (* ?x75289 l_0_12_258)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75334 (* ?x75286 l_0_12_257)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75332 (* ?x75283 l_0_12_256)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75330 (* ?x75280 l_0_12_255)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75328 (* ?x75277 l_0_12_254)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74967 (* ?x74934 l_0_12_238)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74965 (* ?x74931 l_0_12_237)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x74963 (* ?x74924 l_0_12_236)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x72958 (* ?x72858 l_0_12_33)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x73981 (* ?x72483 l_0_12_148)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x61296 (* ?x72480 l_0_12_147)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x72948 (* ?x72855 l_0_12_32)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x50852 (* ?x72477 l_0_12_146)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x72945 (* ?x72350 l_0_12_31)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x72941 (* ?x72159 l_0_12_30)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x61294 (* ?x72998 l_0_12_96)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61316 (* ?x72993 l_0_12_95)))
 (let ((?x63211 (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_94) ?x61316) ?x61294) (* (* 2.0 l_0_12_11) l_0_12_29))))
 (let ((?x63082 (+ (- (- (+ (- (+ (+ ?x63211 ?x72941) ?x72945) ?x50852) ?x72948) ?x61296) ?x73981) ?x72958)))
 (let ((?x75335 (+ (+ (+ (+ (- (- (- ?x63082 ?x74963) ?x74965) ?x74967) ?x75328) ?x75330) ?x75332) ?x75334)))
 (= (- (- (- (- (- (+ ?x75335 ?x75336) ?x72960) ?x72962) ?x72964) ?x72966) ?x72968) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72873 (* 2.0 l_0_12_60)))
 (let ((?x73048 (* ?x72873 l_0_12_86)))
 (let ((?x72870 (* 2.0 l_0_12_59)))
 (let ((?x73046 (* ?x72870 l_0_12_85)))
 (let ((?x72867 (* 2.0 l_0_12_58)))
 (let ((?x73044 (* ?x72867 l_0_12_84)))
 (let ((?x72864 (* 2.0 l_0_12_57)))
 (let ((?x73042 (* ?x72864 l_0_12_83)))
 (let ((?x72861 (* 2.0 l_0_12_56)))
 (let ((?x73040 (* ?x72861 l_0_12_82)))
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75383 (* ?x75289 l_0_12_266)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75381 (* ?x75286 l_0_12_265)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75379 (* ?x75283 l_0_12_264)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75377 (* ?x75280 l_0_12_263)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75375 (* ?x75277 l_0_12_262)))
 (let ((?x72858 (* 2.0 l_0_12_15)))
 (let ((?x73035 (* ?x72858 l_0_12_41)))
 (let ((?x72855 (* 2.0 l_0_12_14)))
 (let ((?x73021 (* ?x72855 l_0_12_40)))
 (let ((?x72350 (* 2.0 l_0_12_13)))
 (let ((?x73019 (* ?x72350 l_0_12_39)))
 (let ((?x72159 (* 2.0 l_0_12_12)))
 (let ((?x73017 (* ?x72159 l_0_12_38)))
 (let ((?x61026 (* 2.0 l_0_12_11)))
 (let ((?x73015 (* ?x61026 l_0_12_37)))
 (let ((?x75380 (+ (+ (+ (+ (+ (+ (+ ?x73015 ?x73017) ?x73019) ?x73021) ?x73035) ?x75375) ?x75377) ?x75379)))
 (let ((?x75389 (- (- (- (- (- (+ (+ ?x75380 ?x75381) ?x75383) ?x73040) ?x73042) ?x73044) ?x73046) ?x73048)))
 (= ?x75389 0.0))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73133 (* l_0_12_66 l_0_12_66)))
 (let ((?x73131 (* l_0_12_65 l_0_12_65)))
 (let ((?x73129 (* l_0_12_64 l_0_12_64)))
 (let ((?x73127 (* l_0_12_63 l_0_12_63)))
 (let ((?x73125 (* l_0_12_62 l_0_12_62)))
 (let ((?x73123 (* l_0_12_61 l_0_12_61)))
 (let ((?x75421 (* l_0_12_246 l_0_12_246)))
 (let ((?x75419 (* l_0_12_245 l_0_12_245)))
 (let ((?x75417 (* l_0_12_244 l_0_12_244)))
 (let ((?x75415 (* l_0_12_243 l_0_12_243)))
 (let ((?x75413 (* l_0_12_242 l_0_12_242)))
 (let ((?x75411 (* l_0_12_241 l_0_12_241)))
 (let ((?x73121 (* l_0_12_21 l_0_12_21)))
 (let ((?x73119 (* l_0_12_20 l_0_12_20)))
 (let ((?x73117 (* l_0_12_19 l_0_12_19)))
 (let ((?x73115 (* l_0_12_18 l_0_12_18)))
 (let ((?x75408 (+ (+ (+ (* l_0_12_16 l_0_12_16) (* l_0_12_17 l_0_12_17)) ?x73115) ?x73117)))
 (let ((?x75420 (+ (+ (+ (+ (+ (+ (+ ?x75408 ?x73119) ?x73121) ?x75411) ?x75413) ?x75415) ?x75417) ?x75419)))
 (let ((?x75428 (- (- (- (- (- (- (+ ?x75420 ?x75421) ?x73123) ?x73125) ?x73127) ?x73129) ?x73131) ?x73133)))
 (= ?x75428 0.0)))))))))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73191 (* ?x71873 l_0_12_79)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73189 (* ?x71870 l_0_12_78)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73187 (* ?x71867 l_0_12_77)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73185 (* ?x71864 l_0_12_76)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73183 (* ?x71861 l_0_12_75)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73181 (* ?x71858 l_0_12_74)))
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x75470 (* ?x71853 l_0_12_259)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x75468 (* ?x71850 l_0_12_258)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x75466 (* ?x71847 l_0_12_257)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x75464 (* ?x71844 l_0_12_256)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x75462 (* ?x71841 l_0_12_255)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x75460 (* ?x71838 l_0_12_254)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x74980 (* ?x74934 l_0_12_243)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74978 (* ?x74931 l_0_12_242)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62759 (* ?x74924 l_0_12_241)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73179 (* ?x71835 l_0_12_34)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x61164 (* ?x71832 l_0_12_33)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x61165 (* ?x71829 l_0_12_32)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x61160 (* ?x71826 l_0_12_31)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x38097 (* ?x71823 l_0_12_30)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x72484 (* ?x72483 l_0_12_153)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x72481 (* ?x72480 l_0_12_152)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x72478 (* ?x72477 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72475 (* ?x71974 l_0_12_96)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72473 (* ?x71971 l_0_12_95)))
 (let ((?x75448 (- (- (+ (+ (* (* 2.0 l_0_12_106) l_0_12_94) ?x72473) ?x72475) ?x72478) ?x72481)))
 (let ((?x75453 (+ (+ (+ (- ?x75448 ?x72484) (* (* 2.0 l_0_12_16) l_0_12_29)) ?x38097) ?x61160)))
 (let ((?x75461 (+ (- (- (- (+ (+ (+ ?x75453 ?x61165) ?x61164) ?x73179) ?x62759) ?x74978) ?x74980) ?x75460)))
 (let ((?x75473 (- (- (+ (+ (+ (+ (+ ?x75461 ?x75462) ?x75464) ?x75466) ?x75468) ?x75470) ?x73181) ?x73183)))
 (= (- (- (- (- ?x75473 ?x73185) ?x73187) ?x73189) ?x73191) 0.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71873 (* 2.0 l_0_12_66)))
 (let ((?x73278 (* ?x71873 l_0_12_87)))
 (let ((?x71870 (* 2.0 l_0_12_65)))
 (let ((?x73276 (* ?x71870 l_0_12_86)))
 (let ((?x71867 (* 2.0 l_0_12_64)))
 (let ((?x73274 (* ?x71867 l_0_12_85)))
 (let ((?x71864 (* 2.0 l_0_12_63)))
 (let ((?x73272 (* ?x71864 l_0_12_84)))
 (let ((?x71861 (* 2.0 l_0_12_62)))
 (let ((?x73270 (* ?x71861 l_0_12_83)))
 (let ((?x71858 (* 2.0 l_0_12_61)))
 (let ((?x73268 (* ?x71858 l_0_12_82)))
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x75532 (* ?x71853 l_0_12_267)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x75530 (* ?x71850 l_0_12_266)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x75528 (* ?x71847 l_0_12_265)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x75526 (* ?x71844 l_0_12_264)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x75524 (* ?x71841 l_0_12_263)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x75522 (* ?x71838 l_0_12_262)))
 (let ((?x71835 (* 2.0 l_0_12_21)))
 (let ((?x73266 (* ?x71835 l_0_12_42)))
 (let ((?x71832 (* 2.0 l_0_12_20)))
 (let ((?x73264 (* ?x71832 l_0_12_41)))
 (let ((?x71829 (* 2.0 l_0_12_19)))
 (let ((?x73262 (* ?x71829 l_0_12_40)))
 (let ((?x71826 (* 2.0 l_0_12_18)))
 (let ((?x73260 (* ?x71826 l_0_12_39)))
 (let ((?x71823 (* 2.0 l_0_12_17)))
 (let ((?x73258 (* ?x71823 l_0_12_38)))
 (let ((?x71816 (* 2.0 l_0_12_16)))
 (let ((?x73256 (* ?x71816 l_0_12_37)))
 (let ((?x75525 (+ (+ (+ (+ (+ (+ (+ ?x73256 ?x73258) ?x73260) ?x73262) ?x73264) ?x73266) ?x75522) ?x75524)))
 (let ((?x75536 (- (- (- (+ (+ (+ (+ ?x75525 ?x75526) ?x75528) ?x75530) ?x75532) ?x73268) ?x73270) ?x73272)))
 (= (- (- (- ?x75536 ?x73274) ?x73276) ?x73278) 0.0))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73358 (* l_0_12_73 l_0_12_73)))
 (let ((?x73356 (* l_0_12_72 l_0_12_72)))
 (let ((?x73354 (* l_0_12_71 l_0_12_71)))
 (let ((?x73352 (* l_0_12_70 l_0_12_70)))
 (let ((?x73350 (* l_0_12_69 l_0_12_69)))
 (let ((?x73348 (* l_0_12_68 l_0_12_68)))
 (let ((?x73346 (* l_0_12_67 l_0_12_67)))
 (let ((?x73344 (* l_0_12_28 l_0_12_28)))
 (let ((?x73342 (* l_0_12_27 l_0_12_27)))
 (let ((?x73340 (* l_0_12_26 l_0_12_26)))
 (let ((?x75598 (* l_0_12_253 l_0_12_253)))
 (let ((?x75596 (* l_0_12_252 l_0_12_252)))
 (let ((?x75594 (* l_0_12_251 l_0_12_251)))
 (let ((?x75592 (* l_0_12_250 l_0_12_250)))
 (let ((?x73338 (* l_0_12_25 l_0_12_25)))
 (let ((?x75589 (* l_0_12_249 l_0_12_249)))
 (let ((?x75587 (* l_0_12_248 l_0_12_248)))
 (let ((?x75585 (* l_0_12_247 l_0_12_247)))
 (let ((?x73336 (* l_0_12_24 l_0_12_24)))
 (let ((?x75586 (+ (+ (+ (* l_0_12_22 l_0_12_22) (* l_0_12_23 l_0_12_23)) ?x73336) ?x75585)))
 (let ((?x75599 (+ (+ (+ (+ (+ (+ (+ ?x75586 ?x75587) ?x75589) ?x73338) ?x75592) ?x75594) ?x75596) ?x75598)))
 (let ((?x75606 (- (- (- (- (+ (+ (+ ?x75599 ?x73340) ?x73342) ?x73344) ?x73346) ?x73348) ?x73350) ?x73352)))
 (= (- (- (- ?x75606 ?x73354) ?x73356) ?x73358) 0.0))))))))))))))))))))))))
(assert
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73424 (* ?x73423 l_0_12_80)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73421 (* ?x73420 l_0_12_79)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73418 (* ?x73417 l_0_12_78)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73415 (* ?x73414 l_0_12_77)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73412 (* ?x73411 l_0_12_76)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73409 (* ?x73408 l_0_12_75)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73406 (* ?x73405 l_0_12_74)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73403 (* ?x73402 l_0_12_35)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73400 (* ?x73399 l_0_12_34)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73397 (* ?x73396 l_0_12_33)))
 (let ((?x75661 (* 2.0 l_0_12_253)))
 (let ((?x75662 (* ?x75661 l_0_12_260)))
 (let ((?x75658 (* 2.0 l_0_12_252)))
 (let ((?x75659 (* ?x75658 l_0_12_259)))
 (let ((?x75655 (* 2.0 l_0_12_251)))
 (let ((?x75656 (* ?x75655 l_0_12_258)))
 (let ((?x75652 (* 2.0 l_0_12_250)))
 (let ((?x75653 (* ?x75652 l_0_12_257)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73394 (* ?x73393 l_0_12_32)))
 (let ((?x75648 (* 2.0 l_0_12_249)))
 (let ((?x75649 (* ?x75648 l_0_12_256)))
 (let ((?x75645 (* 2.0 l_0_12_248)))
 (let ((?x75646 (* ?x75645 l_0_12_255)))
 (let ((?x75642 (* 2.0 l_0_12_247)))
 (let ((?x75643 (* ?x75642 l_0_12_254)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73391 (* ?x72409 l_0_12_31)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75000 (* ?x74934 l_0_12_249)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x74998 (* ?x74931 l_0_12_248)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73389 (* ?x72201 l_0_12_30)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62774 (* ?x74924 l_0_12_247)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75633 (* ?x72483 l_0_12_159)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75631 (* ?x72480 l_0_12_158)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75629 (* ?x72477 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x75627 (* ?x75626 l_0_12_96)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x75624 (* ?x75623 l_0_12_95)))
 (let ((?x75632 (- (- (+ (+ (* (* 2.0 l_0_12_112) l_0_12_94) ?x75624) ?x75627) ?x75629) ?x75631)))
 (let ((?x75638 (+ (- (+ (- ?x75632 ?x75633) (* (* 2.0 l_0_12_22) l_0_12_29)) ?x62774) ?x73389)))
 (let ((?x75651 (+ (+ (+ (+ (+ (- (- ?x75638 ?x74998) ?x75000) ?x73391) ?x75643) ?x75646) ?x75649) ?x73394)))
 (let ((?x75666 (+ (+ (+ (+ (+ (+ (+ ?x75651 ?x75653) ?x75656) ?x75659) ?x75662) ?x73397) ?x73400) ?x73403)))
 (let ((?x75673 (- (- (- (- (- (- (- ?x75666 ?x73406) ?x73409) ?x73412) ?x73415) ?x73418) ?x73421) ?x73424)))
 (= ?x75673 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x74672 (* ?x74671 l_0_12_94)))
 (let ((?x73423 (* 2.0 l_0_12_73)))
 (let ((?x73484 (* ?x73423 l_0_12_88)))
 (let ((?x73420 (* 2.0 l_0_12_72)))
 (let ((?x73482 (* ?x73420 l_0_12_87)))
 (let ((?x73417 (* 2.0 l_0_12_71)))
 (let ((?x73480 (* ?x73417 l_0_12_86)))
 (let ((?x73414 (* 2.0 l_0_12_70)))
 (let ((?x73478 (* ?x73414 l_0_12_85)))
 (let ((?x73411 (* 2.0 l_0_12_69)))
 (let ((?x73476 (* ?x73411 l_0_12_84)))
 (let ((?x73408 (* 2.0 l_0_12_68)))
 (let ((?x73474 (* ?x73408 l_0_12_83)))
 (let ((?x73405 (* 2.0 l_0_12_67)))
 (let ((?x73472 (* ?x73405 l_0_12_82)))
 (let ((?x73402 (* 2.0 l_0_12_28)))
 (let ((?x73470 (* ?x73402 l_0_12_43)))
 (let ((?x73399 (* 2.0 l_0_12_27)))
 (let ((?x73468 (* ?x73399 l_0_12_42)))
 (let ((?x73396 (* 2.0 l_0_12_26)))
 (let ((?x73466 (* ?x73396 l_0_12_41)))
 (let ((?x75661 (* 2.0 l_0_12_253)))
 (let ((?x75762 (* ?x75661 l_0_12_268)))
 (let ((?x75658 (* 2.0 l_0_12_252)))
 (let ((?x75760 (* ?x75658 l_0_12_267)))
 (let ((?x75655 (* 2.0 l_0_12_251)))
 (let ((?x75758 (* ?x75655 l_0_12_266)))
 (let ((?x75652 (* 2.0 l_0_12_250)))
 (let ((?x75756 (* ?x75652 l_0_12_265)))
 (let ((?x73393 (* 2.0 l_0_12_25)))
 (let ((?x73464 (* ?x73393 l_0_12_40)))
 (let ((?x75648 (* 2.0 l_0_12_249)))
 (let ((?x75753 (* ?x75648 l_0_12_264)))
 (let ((?x75645 (* 2.0 l_0_12_248)))
 (let ((?x75751 (* ?x75645 l_0_12_263)))
 (let ((?x75642 (* 2.0 l_0_12_247)))
 (let ((?x75749 (* ?x75642 l_0_12_262)))
 (let ((?x72409 (* 2.0 l_0_12_24)))
 (let ((?x73462 (* ?x72409 l_0_12_39)))
 (let ((?x72201 (* 2.0 l_0_12_23)))
 (let ((?x73460 (* ?x72201 l_0_12_38)))
 (let ((?x72649 (* 2.0 l_0_12_22)))
 (let ((?x73458 (* ?x72649 l_0_12_37)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x62191 (* ?x72068 l_0_12_139)))
 (let ((?x75755 (+ (+ (+ (+ (+ (+ (+ ?x62191 ?x73458) ?x73460) ?x73462) ?x75749) ?x75751) ?x75753) ?x73464)))
 (let ((?x75766 (+ (+ (+ (+ (+ (+ (+ ?x75755 ?x75756) ?x75758) ?x75760) ?x75762) ?x73466) ?x73468) ?x73470)))
 (let ((?x75773 (- (- (- (- (- (- (- ?x75766 ?x73472) ?x73474) ?x73476) ?x73478) ?x73480) ?x73482) ?x73484)))
 (= (- ?x75773 ?x74672) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73560 (* l_0_12_81 l_0_12_81)))
 (let ((?x73558 (* l_0_12_80 l_0_12_80)))
 (let ((?x73556 (* l_0_12_79 l_0_12_79)))
 (let ((?x73554 (* l_0_12_78 l_0_12_78)))
 (let ((?x73552 (* l_0_12_77 l_0_12_77)))
 (let ((?x73550 (* l_0_12_76 l_0_12_76)))
 (let ((?x73548 (* l_0_12_75 l_0_12_75)))
 (let ((?x73546 (* l_0_12_74 l_0_12_74)))
 (let ((?x73544 (* l_0_12_36 l_0_12_36)))
 (let ((?x73542 (* l_0_12_35 l_0_12_35)))
 (let ((?x73540 (* l_0_12_34 l_0_12_34)))
 (let ((?x73538 (* l_0_12_33 l_0_12_33)))
 (let ((?x73536 (* l_0_12_32 l_0_12_32)))
 (let ((?x73534 (* l_0_12_31 l_0_12_31)))
 (let ((?x73532 (* l_0_12_30 l_0_12_30)))
 (let ((?x73564 (* l_0_12_29 l_0_12_29)))
 (let ((?x75861 (* l_0_12_261 l_0_12_261)))
 (let ((?x75859 (* l_0_12_260 l_0_12_260)))
 (let ((?x75857 (* l_0_12_259 l_0_12_259)))
 (let ((?x75855 (* l_0_12_258 l_0_12_258)))
 (let ((?x75853 (* l_0_12_257 l_0_12_257)))
 (let ((?x75851 (* l_0_12_256 l_0_12_256)))
 (let ((?x75849 (* l_0_12_255 l_0_12_255)))
 (let ((?x75847 (* l_0_12_254 l_0_12_254)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75028 (* ?x74934 l_0_12_256)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x75025 (* ?x74931 l_0_12_255)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x75022 (* ?x74924 l_0_12_254)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75842 (* ?x72483 l_0_12_166)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75840 (* ?x72480 l_0_12_165)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75838 (* ?x72477 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x75836 (* ?x75835 l_0_12_96)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x75833 (* ?x75832 l_0_12_95)))
 (let ((?x75841 (- (- (+ (+ (* (* 2.0 l_0_12_119) l_0_12_94) ?x75833) ?x75836) ?x75838) ?x75840)))
 (let ((?x75852 (+ (+ (+ (- (- (- (- ?x75841 ?x75842) ?x75022) ?x75025) ?x75028) ?x75847) ?x75849) ?x75851)))
 (let ((?x75864 (+ (+ (+ (+ (+ (+ (+ ?x75852 ?x75853) ?x75855) ?x75857) ?x75859) ?x75861) ?x73564) ?x73532)))
 (let ((?x75871 (- (+ (+ (+ (+ (+ (+ ?x75864 ?x73534) ?x73536) ?x73538) ?x73540) ?x73542) ?x73544) ?x73546)))
 (let ((?x75878 (- (- (- (- (- (- (- ?x75871 ?x73548) ?x73550) ?x73552) ?x73554) ?x73556) ?x73558) ?x73560)))
 (= ?x75878 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73655 (* (* 2.0 l_0_12_81) l_0_12_89)))
 (let ((?x73652 (* (* 2.0 l_0_12_80) l_0_12_88)))
 (let ((?x73649 (* (* 2.0 l_0_12_79) l_0_12_87)))
 (let ((?x73646 (* (* 2.0 l_0_12_78) l_0_12_86)))
 (let ((?x73643 (* (* 2.0 l_0_12_77) l_0_12_85)))
 (let ((?x73640 (* (* 2.0 l_0_12_76) l_0_12_84)))
 (let ((?x73637 (* (* 2.0 l_0_12_75) l_0_12_83)))
 (let ((?x73634 (* (* 2.0 l_0_12_74) l_0_12_82)))
 (let ((?x73631 (* (* 2.0 l_0_12_36) l_0_12_44)))
 (let ((?x73628 (* (* 2.0 l_0_12_35) l_0_12_43)))
 (let ((?x73625 (* (* 2.0 l_0_12_34) l_0_12_42)))
 (let ((?x73622 (* (* 2.0 l_0_12_33) l_0_12_41)))
 (let ((?x73619 (* (* 2.0 l_0_12_32) l_0_12_40)))
 (let ((?x72443 (* 2.0 l_0_12_31)))
 (let ((?x73616 (* ?x72443 l_0_12_39)))
 (let ((?x72440 (* 2.0 l_0_12_30)))
 (let ((?x73614 (* ?x72440 l_0_12_38)))
 (let ((?x72691 (* 2.0 l_0_12_29)))
 (let ((?x73612 (* ?x72691 l_0_12_37)))
 (let ((?x75966 (* (* 2.0 l_0_12_261) l_0_12_269)))
 (let ((?x75963 (* (* 2.0 l_0_12_260) l_0_12_268)))
 (let ((?x75960 (* (* 2.0 l_0_12_259) l_0_12_267)))
 (let ((?x75957 (* (* 2.0 l_0_12_258) l_0_12_266)))
 (let ((?x75954 (* (* 2.0 l_0_12_257) l_0_12_265)))
 (let ((?x75951 (* (* 2.0 l_0_12_256) l_0_12_264)))
 (let ((?x75948 (* (* 2.0 l_0_12_255) l_0_12_263)))
 (let ((?x75945 (* (* 2.0 l_0_12_254) l_0_12_262)))
 (let ((?x74934 (* 2.0 l_0_12_231)))
 (let ((?x75066 (* ?x74934 l_0_12_264)))
 (let ((?x74931 (* 2.0 l_0_12_230)))
 (let ((?x75064 (* ?x74931 l_0_12_263)))
 (let ((?x74924 (* 2.0 l_0_12_229)))
 (let ((?x62897 (* ?x74924 l_0_12_262)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75939 (* ?x72483 l_0_12_174)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75937 (* ?x72480 l_0_12_173)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75935 (* ?x72477 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x75933 (* ?x75932 l_0_12_96)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x75930 (* ?x75929 l_0_12_95)))
 (let ((?x75938 (- (- (+ (+ (* (* 2.0 l_0_12_127) l_0_12_94) ?x75930) ?x75933) ?x75935) ?x75937)))
 (let ((?x75952 (+ (+ (+ (- (- (- (- ?x75938 ?x75939) ?x62897) ?x75064) ?x75066) ?x75945) ?x75948) ?x75951)))
 (let ((?x75969 (+ (+ (+ (+ (+ (+ (+ ?x75952 ?x75954) ?x75957) ?x75960) ?x75963) ?x75966) ?x73612) ?x73614)))
 (let ((?x75976 (- (+ (+ (+ (+ (+ (+ ?x75969 ?x73616) ?x73619) ?x73622) ?x73625) ?x73628) ?x73631) ?x73634)))
 (let ((?x75983 (- (- (- (- (- (- (- ?x75976 ?x73637) ?x73640) ?x73643) ?x73646) ?x73649) ?x73652) ?x73655)))
 (= ?x75983 0.0))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x73794 (* l_0_12_90 l_0_12_90)))
 (let ((?x73792 (* l_0_12_89 l_0_12_89)))
 (let ((?x73790 (* l_0_12_88 l_0_12_88)))
 (let ((?x73788 (* l_0_12_87 l_0_12_87)))
 (let ((?x73786 (* l_0_12_86 l_0_12_86)))
 (let ((?x73784 (* l_0_12_85 l_0_12_85)))
 (let ((?x73782 (* l_0_12_84 l_0_12_84)))
 (let ((?x73780 (* l_0_12_83 l_0_12_83)))
 (let ((?x73778 (* l_0_12_82 l_0_12_82)))
 (let ((?x73776 (* l_0_12_45 l_0_12_45)))
 (let ((?x73774 (* l_0_12_44 l_0_12_44)))
 (let ((?x73772 (* l_0_12_43 l_0_12_43)))
 (let ((?x73770 (* l_0_12_42 l_0_12_42)))
 (let ((?x73768 (* l_0_12_41 l_0_12_41)))
 (let ((?x73766 (* l_0_12_40 l_0_12_40)))
 (let ((?x73764 (* l_0_12_39 l_0_12_39)))
 (let ((?x73762 (* l_0_12_38 l_0_12_38)))
 (let ((?x73760 (* l_0_12_37 l_0_12_37)))
 (let ((?x76059 (* l_0_12_270 l_0_12_270)))
 (let ((?x76057 (* l_0_12_269 l_0_12_269)))
 (let ((?x76055 (* l_0_12_268 l_0_12_268)))
 (let ((?x76053 (* l_0_12_267 l_0_12_267)))
 (let ((?x76051 (* l_0_12_266 l_0_12_266)))
 (let ((?x76049 (* l_0_12_265 l_0_12_265)))
 (let ((?x76047 (* l_0_12_264 l_0_12_264)))
 (let ((?x76048 (+ (+ (* l_0_12_262 l_0_12_262) (* l_0_12_263 l_0_12_263)) ?x76047)))
 (let ((?x76061 (+ (+ (+ (+ (+ (+ (+ ?x76048 ?x76049) ?x76051) ?x76053) ?x76055) ?x76057) ?x76059) ?x73760)))
 (let ((?x76068 (+ (+ (+ (+ (+ (+ (+ ?x76061 ?x73762) ?x73764) ?x73766) ?x73768) ?x73770) ?x73772) ?x73774)))
 (let ((?x76075 (- (- (- (- (- (- (+ ?x76068 ?x73776) ?x73778) ?x73780) ?x73782) ?x73784) ?x73786) ?x73788)))
 (= (- (- (- ?x76075 ?x73790) ?x73792) ?x73794) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76098 (* ?x74671 l_0_12_92)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_137) ?x76098) 0.0))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76111 (* ?x74671 l_0_12_97)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_142) ?x76111) 0.0))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x72069 (* ?x72068 l_0_12_151)))
 (= (+ (* (* (- 2.0) l_0_12_106) l_0_12_91) ?x72069) 0.0))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76131 (* ?x72068 l_0_12_157)))
 (= (+ (* (* (- 2.0) l_0_12_112) l_0_12_91) ?x76131) 0.0))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x76152 (* ?x74856 l_0_12_98)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x76150 (* ?x74853 l_0_12_97)))
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74785 (* ?x74766 l_0_12_233)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74783 (* ?x51818 l_0_12_232)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x72253 l_0_12_143)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x72250 l_0_12_142)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76138 (* ?x72068 l_0_12_164)))
 (let ((?x76148 (- (- (- (+ (* (* (- 2.0) l_0_12_119) l_0_12_91) ?x76138) ?x76144) ?x76146) ?x74783)))
 (= (+ (+ (- ?x76148 ?x74785) ?x76150) ?x76152) 0.0)))))))))))))))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76182 (* ?x72068 l_0_12_172)))
 (= (+ (* (* (- 2.0) l_0_12_127) l_0_12_91) ?x76182) 0.0))))
(assert
 (let ((?x76196 (* l_0_12_93 l_0_12_93)))
 (let ((?x76194 (* l_0_12_92 l_0_12_92)))
 (let ((?x76188 (* l_0_12_138 l_0_12_138)))
 (let ((?x76186 (* l_0_12_137 l_0_12_137)))
 (let ((?x76189 (+ ?x76186 ?x76188)))
 (= (- (- ?x76189 ?x76194) ?x76196) 0.0)))))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x74857 (* ?x74856 l_0_12_95)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x74854 (* ?x74853 l_0_12_94)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x74841 (* ?x72253 l_0_12_140)))
 (= (- (- (+ (* (* 2.0 l_0_12_137) l_0_12_139) ?x74841) ?x74854) ?x74857) 0.0))))))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x76152 (* ?x74856 l_0_12_98)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x76150 (* ?x74853 l_0_12_97)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x72253 l_0_12_143)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x72250 l_0_12_142)))
 (= (- (- (+ ?x76144 ?x76146) ?x76150) ?x76152) 0.0))))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x72254 (* ?x72253 l_0_12_152)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x72251 (* ?x72250 l_0_12_151)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72243 (* ?x71971 l_0_12_93)))
 (let ((?x72255 (+ (+ (- (* (* (- 2.0) l_0_12_106) l_0_12_92) ?x72243) ?x72251) ?x72254)))
 (= ?x72255 0.0)))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76236 (* ?x72253 l_0_12_158)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76234 (* ?x72250 l_0_12_157)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76232 (* ?x75623 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_112) l_0_12_92) ?x76232) ?x76234) ?x76236) 0.0))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76259 (* ?x72253 l_0_12_165)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76257 (* ?x72250 l_0_12_164)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76250 (* ?x75832 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_119) l_0_12_92) ?x76250) ?x76257) ?x76259) 0.0))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76279 (* ?x72253 l_0_12_173)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76277 (* ?x72250 l_0_12_172)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76275 (* ?x75929 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_127) l_0_12_92) ?x76275) ?x76277) ?x76279) 0.0))))))))
(assert
 (let ((?x75042 (* l_0_12_96 l_0_12_96)))
 (let ((?x75040 (* l_0_12_95 l_0_12_95)))
 (let ((?x75038 (* l_0_12_94 l_0_12_94)))
 (let ((?x75020 (* l_0_12_141 l_0_12_141)))
 (let ((?x76289 (+ (+ (* l_0_12_139 l_0_12_139) (* l_0_12_140 l_0_12_140)) ?x75020)))
 (= (- (- (- ?x76289 ?x75038) ?x75040) ?x75042) 0.0)))))))
(assert
 (let ((?x75189 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x75186 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x75183 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75162 (* ?x72483 l_0_12_144)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75160 (* ?x72480 l_0_12_143)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x62937 (* ?x72477 l_0_12_142)))
 (= (- (- (- (+ (+ ?x62937 ?x75160) ?x75162) ?x75183) ?x75186) ?x75189) 0.0)))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x72484 (* ?x72483 l_0_12_153)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x72481 (* ?x72480 l_0_12_152)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x72478 (* ?x72477 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72475 (* ?x71974 l_0_12_96)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72473 (* ?x71971 l_0_12_95)))
 (let ((?x72482 (+ (+ (- (- (* (* (- 2.0) l_0_12_106) l_0_12_94) ?x72473) ?x72475) ?x72478) ?x72481)))
 (let ((?x72485 (+ ?x72482 ?x72484)))
 (= ?x72485 0.0))))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75633 (* ?x72483 l_0_12_159)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75631 (* ?x72480 l_0_12_158)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75629 (* ?x72477 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x75627 (* ?x75626 l_0_12_96)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x75624 (* ?x75623 l_0_12_95)))
 (let ((?x76322 (+ (+ (- (- (* (* (- 2.0) l_0_12_112) l_0_12_94) ?x75624) ?x75627) ?x75629) ?x75631)))
 (= (+ ?x76322 ?x75633) 0.0)))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75842 (* ?x72483 l_0_12_166)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75840 (* ?x72480 l_0_12_165)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75838 (* ?x72477 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x75836 (* ?x75835 l_0_12_96)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x75833 (* ?x75832 l_0_12_95)))
 (let ((?x76331 (+ (+ (- (- (* (* (- 2.0) l_0_12_119) l_0_12_94) ?x75833) ?x75836) ?x75838) ?x75840)))
 (= (+ ?x76331 ?x75842) 0.0)))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75939 (* ?x72483 l_0_12_174)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75937 (* ?x72480 l_0_12_173)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75935 (* ?x72477 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x75933 (* ?x75932 l_0_12_96)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x75930 (* ?x75929 l_0_12_95)))
 (let ((?x65089 (+ (+ (- (- (* (* (- 2.0) l_0_12_127) l_0_12_94) ?x75930) ?x75933) ?x75935) ?x75937)))
 (= (+ ?x65089 ?x75939) 0.0)))))))))))))
(assert
 (let ((?x76356 (* l_0_12_99 l_0_12_99)))
 (let ((?x76354 (* l_0_12_98 l_0_12_98)))
 (let ((?x76352 (* l_0_12_97 l_0_12_97)))
 (let ((?x76350 (* l_0_12_145 l_0_12_145)))
 (let ((?x76348 (* l_0_12_144 l_0_12_144)))
 (let ((?x76346 (* l_0_12_143 l_0_12_143)))
 (let ((?x76347 (+ (+ (* (- l_0_12_100) l_0_12_100) (* l_0_12_142 l_0_12_142)) ?x76346)))
 (= (- (- (- (+ (+ ?x76347 ?x76348) ?x76350) ?x76352) ?x76354) ?x76356) 0.0)))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x72761 (* ?x72760 l_0_12_154)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x72758 (* ?x72757 l_0_12_153)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x72755 (* ?x72754 l_0_12_152)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x72752 (* ?x72751 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72749 (* ?x71974 l_0_12_99)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72747 (* ?x71971 l_0_12_98)))
 (let ((?x71964 (* 2.0 l_0_12_106)))
 (let ((?x72738 (* ?x71964 l_0_12_97)))
 (let ((?x76371 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_109) ?x72738) ?x72747) ?x72749) ?x72752)))
 (= (+ (+ (+ ?x76371 ?x72755) ?x72758) ?x72761) 0.0)))))))))))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76388 (* ?x72760 l_0_12_160)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76386 (* ?x72757 l_0_12_159)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76384 (* ?x72754 l_0_12_158)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76382 (* ?x72751 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76380 (* ?x75626 l_0_12_99)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x65165 (* ?x75623 l_0_12_98)))
 (let ((?x28644 (* 2.0 l_0_12_112)))
 (let ((?x29594 (* ?x28644 l_0_12_97)))
 (let ((?x76383 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_115) ?x29594) ?x65165) ?x76380) ?x76382)))
 (= (+ (+ (+ ?x76383 ?x76384) ?x76386) ?x76388) 0.0)))))))))))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76429 (* ?x72760 l_0_12_167)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76427 (* ?x72757 l_0_12_166)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76425 (* ?x72754 l_0_12_165)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76423 (* ?x72751 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76421 (* ?x75835 l_0_12_99)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76412 (* ?x75832 l_0_12_98)))
 (let ((?x75830 (* 2.0 l_0_12_119)))
 (let ((?x76408 (* ?x75830 l_0_12_97)))
 (let ((?x76424 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_122) ?x76408) ?x76412) ?x76421) ?x76423)))
 (= (+ (+ (+ ?x76424 ?x76425) ?x76427) ?x76429) 0.0)))))))))))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76466 (* ?x72760 l_0_12_175)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76464 (* ?x72757 l_0_12_174)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76462 (* ?x72754 l_0_12_173)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76460 (* ?x72751 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x76458 (* ?x75932 l_0_12_99)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76456 (* ?x75929 l_0_12_98)))
 (let ((?x75927 (* 2.0 l_0_12_127)))
 (let ((?x76454 (* ?x75927 l_0_12_97)))
 (let ((?x76461 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_130) ?x76454) ?x76456) ?x76458) ?x76460)))
 (= (+ (+ (+ ?x76461 ?x76462) ?x76464) ?x76466) 0.0)))))))))))))))))
(assert
 (let ((?x73254 (* l_0_12_156 l_0_12_156)))
 (let ((?x73252 (* l_0_12_155 l_0_12_155)))
 (let ((?x73250 (* l_0_12_154 l_0_12_154)))
 (let ((?x73248 (* l_0_12_153 l_0_12_153)))
 (let ((?x73246 (* l_0_12_152 l_0_12_152)))
 (let ((?x73244 (* l_0_12_151 l_0_12_151)))
 (let ((?x73242 (* l_0_12_111 l_0_12_111)))
 (let ((?x73240 (* l_0_12_110 l_0_12_110)))
 (let ((?x73229 (* l_0_12_109 l_0_12_109)))
 (let ((?x73225 (* l_0_12_108 l_0_12_108)))
 (let ((?x73228 (- (- (* (- l_0_12_106) l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x73225)))
 (let ((?x73251 (+ (+ (+ (+ (- (- (- ?x73228 ?x73229) ?x73240) ?x73242) ?x73244) ?x73246) ?x73248) ?x73250)))
 (let ((?x73255 (+ (+ ?x73251 ?x73252) ?x73254)))
 (= ?x73255 0.0)))))))))))))))
(assert
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73610 (* ?x72001 l_0_12_169)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73608 (* ?x71998 l_0_12_168)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73606 (* ?x71995 l_0_12_167)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73604 (* ?x71992 l_0_12_166)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73602 (* ?x71989 l_0_12_165)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73600 (* ?x71986 l_0_12_164)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73598 (* ?x71983 l_0_12_124)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73596 (* ?x71980 l_0_12_123)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73594 (* ?x71977 l_0_12_122)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73592 (* ?x71974 l_0_12_121)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x73590 (* ?x71971 l_0_12_120)))
 (let ((?x73597 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_119) ?x73590) ?x73592) ?x73594) ?x73596)))
 (let ((?x73611 (+ (+ (+ (+ (+ (+ (- ?x73597 ?x73598) ?x73600) ?x73602) ?x73604) ?x73606) ?x73608) ?x73610)))
 (= ?x73611 0.0))))))))))))))))))))))))))
(assert
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73758 (* ?x72001 l_0_12_177)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73756 (* ?x71998 l_0_12_176)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73754 (* ?x71995 l_0_12_175)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73752 (* ?x71992 l_0_12_174)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73750 (* ?x71989 l_0_12_173)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73748 (* ?x71986 l_0_12_172)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73746 (* ?x71983 l_0_12_132)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73727 (* ?x71980 l_0_12_131)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73723 (* ?x71977 l_0_12_130)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73719 (* ?x71974 l_0_12_129)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x10346 (* ?x71971 l_0_12_128)))
 (let ((?x73728 (- (- (- (- (* (* (- 2.0) l_0_12_106) l_0_12_127) ?x10346) ?x73719) ?x73723) ?x73727)))
 (let ((?x73759 (+ (+ (+ (+ (+ (+ (- ?x73728 ?x73746) ?x73748) ?x73750) ?x73752) ?x73754) ?x73756) ?x73758)))
 (= ?x73759 0.0))))))))))))))))))))))))))
(assert
 (let ((?x76526 (* l_0_12_163 l_0_12_163)))
 (let ((?x76524 (* l_0_12_162 l_0_12_162)))
 (let ((?x76522 (* l_0_12_161 l_0_12_161)))
 (let ((?x76520 (* l_0_12_160 l_0_12_160)))
 (let ((?x76518 (* l_0_12_159 l_0_12_159)))
 (let ((?x76516 (* l_0_12_158 l_0_12_158)))
 (let ((?x76514 (* l_0_12_157 l_0_12_157)))
 (let ((?x76512 (* l_0_12_118 l_0_12_118)))
 (let ((?x76510 (* l_0_12_117 l_0_12_117)))
 (let ((?x76508 (* l_0_12_116 l_0_12_116)))
 (let ((?x76506 (* l_0_12_115 l_0_12_115)))
 (let ((?x76504 (* l_0_12_114 l_0_12_114)))
 (let ((?x76505 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76504)))
 (let ((?x76519 (+ (+ (+ (- (- (- (- ?x76505 ?x76506) ?x76508) ?x76510) ?x76512) ?x76514) ?x76516) ?x76518)))
 (= (+ (+ (+ (+ ?x76519 ?x76520) ?x76522) ?x76524) ?x76526) 0.0))))))))))))))))
(assert
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76591 (* ?x76590 l_0_12_170)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76588 (* ?x76587 l_0_12_169)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76585 (* ?x76584 l_0_12_168)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76582 (* ?x76581 l_0_12_167)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76579 (* ?x76578 l_0_12_166)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76576 (* ?x76575 l_0_12_165)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76573 (* ?x76572 l_0_12_164)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76570 (* ?x76569 l_0_12_125)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76567 (* ?x76566 l_0_12_124)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76564 (* ?x76563 l_0_12_123)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76561 (* ?x76560 l_0_12_122)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76558 (* ?x75626 l_0_12_121)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76556 (* ?x75623 l_0_12_120)))
 (let ((?x76565 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_119) ?x76556) ?x76558) ?x76561) ?x76564)))
 (let ((?x76586 (+ (+ (+ (+ (+ (- (- ?x76565 ?x76567) ?x76570) ?x76573) ?x76576) ?x76579) ?x76582) ?x76585)))
 (= (+ (+ ?x76586 ?x76588) ?x76591) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x76152 (* ?x74856 l_0_12_98)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x76150 (* ?x74853 l_0_12_97)))
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76667 (* ?x76590 l_0_12_178)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76665 (* ?x76587 l_0_12_177)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76663 (* ?x76584 l_0_12_176)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76661 (* ?x76581 l_0_12_175)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76659 (* ?x76578 l_0_12_174)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76657 (* ?x76575 l_0_12_173)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76655 (* ?x76572 l_0_12_172)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76146 (* ?x72253 l_0_12_143)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76144 (* ?x72250 l_0_12_142)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76651 (* ?x76569 l_0_12_133)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76649 (* ?x76566 l_0_12_132)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76647 (* ?x76563 l_0_12_131)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76645 (* ?x76560 l_0_12_130)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76643 (* ?x75626 l_0_12_129)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76641 (* ?x75623 l_0_12_128)))
 (let ((?x76648 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_127) ?x76641) ?x76643) ?x76645) ?x76647)))
 (let ((?x76652 (- (- ?x76648 ?x76649) ?x76651)))
 (let ((?x76664 (+ (+ (+ (+ (+ (+ (+ ?x76652 ?x76144) ?x76146) ?x76655) ?x76657) ?x76659) ?x76661) ?x76663)))
 (= (- (- (+ (+ ?x76664 ?x76665) ?x76667) ?x76150) ?x76152) 0.0)))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x76752 (* l_0_12_171 l_0_12_171)))
 (let ((?x76750 (* l_0_12_170 l_0_12_170)))
 (let ((?x76748 (* l_0_12_169 l_0_12_169)))
 (let ((?x76746 (* l_0_12_168 l_0_12_168)))
 (let ((?x76744 (* l_0_12_167 l_0_12_167)))
 (let ((?x76742 (* l_0_12_166 l_0_12_166)))
 (let ((?x76740 (* l_0_12_165 l_0_12_165)))
 (let ((?x76738 (* l_0_12_164 l_0_12_164)))
 (let ((?x76736 (* l_0_12_126 l_0_12_126)))
 (let ((?x76734 (* l_0_12_125 l_0_12_125)))
 (let ((?x76732 (* l_0_12_124 l_0_12_124)))
 (let ((?x76730 (* l_0_12_123 l_0_12_123)))
 (let ((?x76728 (* l_0_12_122 l_0_12_122)))
 (let ((?x76726 (* l_0_12_121 l_0_12_121)))
 (let ((?x76727 (- (- (* (- l_0_12_119) l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76726)))
 (let ((?x76741 (+ (+ (- (- (- (- (- ?x76727 ?x76728) ?x76730) ?x76732) ?x76734) ?x76736) ?x76738) ?x76740)))
 (= (+ (+ (+ (+ (+ (+ ?x76741 ?x76742) ?x76744) ?x76746) ?x76748) ?x76750) ?x76752) 0.0))))))))))))))))))
(assert
 (let ((?x76824 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76821 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76818 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76815 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76812 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76809 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76806 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76803 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76800 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76797 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76794 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76791 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76788 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76785 (* ?x75835 l_0_12_129)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76783 (* ?x75832 l_0_12_128)))
 (let ((?x76792 (- (- (- (- (* (* (- 2.0) l_0_12_119) l_0_12_127) ?x76783) ?x76785) ?x76788) ?x76791)))
 (let ((?x76813 (+ (+ (+ (+ (- (- (- ?x76792 ?x76794) ?x76797) ?x76800) ?x76803) ?x76806) ?x76809) ?x76812)))
 (= (+ (+ (+ (+ ?x76813 ?x76815) ?x76818) ?x76821) ?x76824) 0.0)))))))))))))))))))))
(assert
 (let ((?x76906 (* l_0_12_180 l_0_12_180)))
 (let ((?x76904 (* l_0_12_179 l_0_12_179)))
 (let ((?x76902 (* l_0_12_178 l_0_12_178)))
 (let ((?x76900 (* l_0_12_177 l_0_12_177)))
 (let ((?x76898 (* l_0_12_176 l_0_12_176)))
 (let ((?x76896 (* l_0_12_175 l_0_12_175)))
 (let ((?x76894 (* l_0_12_174 l_0_12_174)))
 (let ((?x76892 (* l_0_12_173 l_0_12_173)))
 (let ((?x76890 (* l_0_12_172 l_0_12_172)))
 (let ((?x76888 (* l_0_12_135 l_0_12_135)))
 (let ((?x76886 (* l_0_12_134 l_0_12_134)))
 (let ((?x76884 (* l_0_12_133 l_0_12_133)))
 (let ((?x76882 (* l_0_12_132 l_0_12_132)))
 (let ((?x76880 (* l_0_12_131 l_0_12_131)))
 (let ((?x76878 (* l_0_12_130 l_0_12_130)))
 (let ((?x76876 (* l_0_12_129 l_0_12_129)))
 (let ((?x76877 (- (- (* (- l_0_12_127) l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76876)))
 (let ((?x76891 (+ (- (- (- (- (- (- ?x76877 ?x76878) ?x76880) ?x76882) ?x76884) ?x76886) ?x76888) ?x76890)))
 (let ((?x76905 (+ (+ (+ (+ (+ (+ (+ ?x76891 ?x76892) ?x76894) ?x76896) ?x76898) ?x76900) ?x76902) ?x76904)))
 (= (+ ?x76905 ?x76906) 0.0)))))))))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76098 (* ?x74671 l_0_12_92)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_137) ?x76098) 0.0))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76111 (* ?x74671 l_0_12_97)))
 (= (- (* (* 2.0 l_0_12_136) l_0_12_142) ?x76111) 0.0))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x73876 (* ?x72068 l_0_12_146)))
 (= (+ (* (* (- 2.0) l_0_12_101) l_0_12_91) ?x73876) 0.0))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76131 (* ?x72068 l_0_12_157)))
 (= (+ (* (* (- 2.0) l_0_12_112) l_0_12_91) ?x76131) 0.0))))
(assert
 (let ((?x75661 (* 2.0 l_0_12_253)))
 (let ((?x75762 (* ?x75661 l_0_12_268)))
 (let ((?x75658 (* 2.0 l_0_12_252)))
 (let ((?x75760 (* ?x75658 l_0_12_267)))
 (let ((?x75655 (* 2.0 l_0_12_251)))
 (let ((?x75758 (* ?x75655 l_0_12_266)))
 (let ((?x75652 (* 2.0 l_0_12_250)))
 (let ((?x75756 (* ?x75652 l_0_12_265)))
 (let ((?x75648 (* 2.0 l_0_12_249)))
 (let ((?x75753 (* ?x75648 l_0_12_264)))
 (let ((?x75645 (* 2.0 l_0_12_248)))
 (let ((?x75751 (* ?x75645 l_0_12_263)))
 (let ((?x75642 (* 2.0 l_0_12_247)))
 (let ((?x75749 (* ?x75642 l_0_12_262)))
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76667 (* ?x76590 l_0_12_178)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76665 (* ?x76587 l_0_12_177)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76663 (* ?x76584 l_0_12_176)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76661 (* ?x76581 l_0_12_175)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76659 (* ?x76578 l_0_12_174)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76657 (* ?x76575 l_0_12_173)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76655 (* ?x76572 l_0_12_172)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76138 (* ?x72068 l_0_12_164)))
 (let ((?x75830 (* 2.0 l_0_12_119)))
 (let ((?x76940 (* ?x75830 l_0_12_91)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76651 (* ?x76569 l_0_12_133)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76649 (* ?x76566 l_0_12_132)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76647 (* ?x76563 l_0_12_131)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76645 (* ?x76560 l_0_12_130)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76643 (* ?x75626 l_0_12_129)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76641 (* ?x75623 l_0_12_128)))
 (let ((?x76937 (+ (+ (+ (+ (* (* 2.0 l_0_12_112) l_0_12_127) ?x76641) ?x76643) ?x76645) ?x76647)))
 (let ((?x76945 (- (- (- (+ (- (+ (+ ?x76937 ?x76649) ?x76651) ?x76940) ?x76138) ?x76655) ?x76657) ?x76659)))
 (let ((?x76952 (- (- (- (- (- (- (- ?x76945 ?x76661) ?x76663) ?x76665) ?x76667) ?x75749) ?x75751) ?x75753)))
 (= (- (- (- (- ?x76952 ?x75756) ?x75758) ?x75760) ?x75762) 0.0)))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76182 (* ?x72068 l_0_12_172)))
 (= (+ (* (* (- 2.0) l_0_12_127) l_0_12_91) ?x76182) 0.0))))
(assert
 (let ((?x76196 (* l_0_12_93 l_0_12_93)))
 (let ((?x76194 (* l_0_12_92 l_0_12_92)))
 (let ((?x76188 (* l_0_12_138 l_0_12_138)))
 (let ((?x76186 (* l_0_12_137 l_0_12_137)))
 (let ((?x76189 (+ ?x76186 ?x76188)))
 (= (- (- ?x76189 ?x76194) ?x76196) 0.0)))))))
(assert
 (let ((?x74856 (* 2.0 l_0_12_93)))
 (let ((?x74857 (* ?x74856 l_0_12_95)))
 (let ((?x74853 (* 2.0 l_0_12_92)))
 (let ((?x74854 (* ?x74853 l_0_12_94)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x74841 (* ?x72253 l_0_12_140)))
 (= (- (- (+ (* (* 2.0 l_0_12_137) l_0_12_139) ?x74841) ?x74854) ?x74857) 0.0))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x50815 (* ?x72253 l_0_12_147)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x61279 (* ?x72250 l_0_12_146)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61282 (* ?x72993 l_0_12_93)))
 (let ((?x38415 (+ (+ (- (* (* (- 2.0) l_0_12_101) l_0_12_92) ?x61282) ?x61279) ?x50815)))
 (= ?x38415 0.0)))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76236 (* ?x72253 l_0_12_158)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76234 (* ?x72250 l_0_12_157)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76232 (* ?x75623 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_112) l_0_12_92) ?x76232) ?x76234) ?x76236) 0.0))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76259 (* ?x72253 l_0_12_165)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76257 (* ?x72250 l_0_12_164)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76250 (* ?x75832 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_119) l_0_12_92) ?x76250) ?x76257) ?x76259) 0.0))))))))
(assert
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76279 (* ?x72253 l_0_12_173)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76277 (* ?x72250 l_0_12_172)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76275 (* ?x75929 l_0_12_93)))
 (= (+ (+ (- (* (* (- 2.0) l_0_12_127) l_0_12_92) ?x76275) ?x76277) ?x76279) 0.0))))))))
(assert
 (let ((?x75042 (* l_0_12_96 l_0_12_96)))
 (let ((?x75040 (* l_0_12_95 l_0_12_95)))
 (let ((?x75038 (* l_0_12_94 l_0_12_94)))
 (let ((?x75020 (* l_0_12_141 l_0_12_141)))
 (let ((?x76289 (+ (+ (* l_0_12_139 l_0_12_139) (* l_0_12_140 l_0_12_140)) ?x75020)))
 (= (- (- (- ?x76289 ?x75038) ?x75040) ?x75042) 0.0)))))))
(assert
 (let ((?x75189 (* (* 2.0 l_0_12_96) l_0_12_99)))
 (let ((?x75186 (* (* 2.0 l_0_12_95) l_0_12_98)))
 (let ((?x75183 (* (* 2.0 l_0_12_94) l_0_12_97)))
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75162 (* ?x72483 l_0_12_144)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75160 (* ?x72480 l_0_12_143)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x62937 (* ?x72477 l_0_12_142)))
 (= (- (- (- (+ (+ ?x62937 ?x75160) ?x75162) ?x75183) ?x75186) ?x75189) 0.0)))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x73981 (* ?x72483 l_0_12_148)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x61296 (* ?x72480 l_0_12_147)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x50852 (* ?x72477 l_0_12_146)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x61294 (* ?x72998 l_0_12_96)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61316 (* ?x72993 l_0_12_95)))
 (let ((?x73980 (+ (+ (- (- (* (* (- 2.0) l_0_12_101) l_0_12_94) ?x61316) ?x61294) ?x50852) ?x61296)))
 (let ((?x73982 (+ ?x73980 ?x73981)))
 (= ?x73982 0.0))))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75633 (* ?x72483 l_0_12_159)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75631 (* ?x72480 l_0_12_158)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75629 (* ?x72477 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x75627 (* ?x75626 l_0_12_96)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x75624 (* ?x75623 l_0_12_95)))
 (let ((?x76322 (+ (+ (- (- (* (* (- 2.0) l_0_12_112) l_0_12_94) ?x75624) ?x75627) ?x75629) ?x75631)))
 (= (+ ?x76322 ?x75633) 0.0)))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75842 (* ?x72483 l_0_12_166)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75840 (* ?x72480 l_0_12_165)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75838 (* ?x72477 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x75836 (* ?x75835 l_0_12_96)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x75833 (* ?x75832 l_0_12_95)))
 (let ((?x76331 (+ (+ (- (- (* (* (- 2.0) l_0_12_119) l_0_12_94) ?x75833) ?x75836) ?x75838) ?x75840)))
 (= (+ ?x76331 ?x75842) 0.0)))))))))))))
(assert
 (let ((?x72483 (* 2.0 l_0_12_141)))
 (let ((?x75939 (* ?x72483 l_0_12_174)))
 (let ((?x72480 (* 2.0 l_0_12_140)))
 (let ((?x75937 (* ?x72480 l_0_12_173)))
 (let ((?x72477 (* 2.0 l_0_12_139)))
 (let ((?x75935 (* ?x72477 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x75933 (* ?x75932 l_0_12_96)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x75930 (* ?x75929 l_0_12_95)))
 (let ((?x65089 (+ (+ (- (- (* (* (- 2.0) l_0_12_127) l_0_12_94) ?x75930) ?x75933) ?x75935) ?x75937)))
 (= (+ ?x65089 ?x75939) 0.0)))))))))))))
(assert
 (let ((?x76356 (* l_0_12_99 l_0_12_99)))
 (let ((?x76354 (* l_0_12_98 l_0_12_98)))
 (let ((?x76352 (* l_0_12_97 l_0_12_97)))
 (let ((?x76350 (* l_0_12_145 l_0_12_145)))
 (let ((?x76348 (* l_0_12_144 l_0_12_144)))
 (let ((?x76346 (* l_0_12_143 l_0_12_143)))
 (let ((?x76347 (+ (+ (* (- l_0_12_100) l_0_12_100) (* l_0_12_142 l_0_12_142)) ?x76346)))
 (= (- (- (- (+ (+ ?x76347 ?x76348) ?x76350) ?x76352) ?x76354) ?x76356) 0.0)))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76388 (* ?x72760 l_0_12_160)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76386 (* ?x72757 l_0_12_159)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76384 (* ?x72754 l_0_12_158)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76382 (* ?x72751 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76380 (* ?x75626 l_0_12_99)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x65165 (* ?x75623 l_0_12_98)))
 (let ((?x28644 (* 2.0 l_0_12_112)))
 (let ((?x29594 (* ?x28644 l_0_12_97)))
 (let ((?x76383 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_115) ?x29594) ?x65165) ?x76380) ?x76382)))
 (= (+ (+ (+ ?x76383 ?x76384) ?x76386) ?x76388) 0.0)))))))))))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76429 (* ?x72760 l_0_12_167)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76427 (* ?x72757 l_0_12_166)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76425 (* ?x72754 l_0_12_165)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76423 (* ?x72751 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76421 (* ?x75835 l_0_12_99)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76412 (* ?x75832 l_0_12_98)))
 (let ((?x75830 (* 2.0 l_0_12_119)))
 (let ((?x76408 (* ?x75830 l_0_12_97)))
 (let ((?x76424 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_122) ?x76408) ?x76412) ?x76421) ?x76423)))
 (= (+ (+ (+ ?x76424 ?x76425) ?x76427) ?x76429) 0.0)))))))))))))))))
(assert
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76466 (* ?x72760 l_0_12_175)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76464 (* ?x72757 l_0_12_174)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76462 (* ?x72754 l_0_12_173)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76460 (* ?x72751 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x76458 (* ?x75932 l_0_12_99)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76456 (* ?x75929 l_0_12_98)))
 (let ((?x75927 (* 2.0 l_0_12_127)))
 (let ((?x76454 (* ?x75927 l_0_12_97)))
 (let ((?x76461 (+ (- (- (- (* (* (- 2.0) l_0_12_100) l_0_12_130) ?x76454) ?x76456) ?x76458) ?x76460)))
 (= (+ (+ (+ ?x76461 ?x76462) ?x76464) ?x76466) 0.0)))))))))))))))))
(assert
 (let ((?x74028 (* l_0_12_150 l_0_12_150)))
 (let ((?x74026 (* l_0_12_149 l_0_12_149)))
 (let ((?x74024 (* l_0_12_148 l_0_12_148)))
 (let ((?x74022 (* l_0_12_147 l_0_12_147)))
 (let ((?x74020 (* l_0_12_146 l_0_12_146)))
 (let ((?x61359 (* l_0_12_105 l_0_12_105)))
 (let ((?x61358 (* l_0_12_104 l_0_12_104)))
 (let ((?x61361 (* l_0_12_103 l_0_12_103)))
 (let ((?x61353 (- (- (* (- l_0_12_101) l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x61361)))
 (let ((?x50870 (- (- ?x61353 ?x61358) ?x61359)))
 (= (+ (+ (+ (+ (+ ?x50870 ?x74020) ?x74022) ?x74024) ?x74026) ?x74028) 0.0))))))))))))
(assert
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74067 (* ?x73037 l_0_12_161)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74065 (* ?x73032 l_0_12_160)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74063 (* ?x73029 l_0_12_159)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74061 (* ?x73026 l_0_12_158)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74059 (* ?x73023 l_0_12_157)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74057 (* ?x73012 l_0_12_116)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74055 (* ?x73009 l_0_12_115)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74053 (* ?x72998 l_0_12_114)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74051 (* ?x72993 l_0_12_113)))
 (let ((?x74058 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_112) ?x74051) ?x74053) ?x74055) ?x74057)))
 (let ((?x74068 (+ (+ (+ (+ (+ ?x74058 ?x74059) ?x74061) ?x74063) ?x74065) ?x74067)))
 (= ?x74068 0.0))))))))))))))))))))))
(assert
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74101 (* ?x73037 l_0_12_168)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74099 (* ?x73032 l_0_12_167)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74097 (* ?x73029 l_0_12_166)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74095 (* ?x73026 l_0_12_165)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74093 (* ?x73023 l_0_12_164)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74091 (* ?x73012 l_0_12_123)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74089 (* ?x73009 l_0_12_122)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x38730 (* ?x72998 l_0_12_121)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x38728 (* ?x72993 l_0_12_120)))
 (let ((?x74092 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_119) ?x38728) ?x38730) ?x74089) ?x74091)))
 (let ((?x74102 (+ (+ (+ (+ (+ ?x74092 ?x74093) ?x74095) ?x74097) ?x74099) ?x74101)))
 (= ?x74102 0.0))))))))))))))))))))))
(assert
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74151 (* ?x73037 l_0_12_176)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74149 (* ?x73032 l_0_12_175)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74147 (* ?x73029 l_0_12_174)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74145 (* ?x73026 l_0_12_173)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74143 (* ?x73023 l_0_12_172)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74141 (* ?x73012 l_0_12_131)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74139 (* ?x73009 l_0_12_130)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74137 (* ?x72998 l_0_12_129)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74135 (* ?x72993 l_0_12_128)))
 (let ((?x74142 (- (- (- (- (* (* (- 2.0) l_0_12_101) l_0_12_127) ?x74135) ?x74137) ?x74139) ?x74141)))
 (let ((?x74152 (+ (+ (+ (+ (+ ?x74142 ?x74143) ?x74145) ?x74147) ?x74149) ?x74151)))
 (= ?x74152 0.0))))))))))))))))))))))
(assert
 (let ((?x76526 (* l_0_12_163 l_0_12_163)))
 (let ((?x76524 (* l_0_12_162 l_0_12_162)))
 (let ((?x76522 (* l_0_12_161 l_0_12_161)))
 (let ((?x76520 (* l_0_12_160 l_0_12_160)))
 (let ((?x76518 (* l_0_12_159 l_0_12_159)))
 (let ((?x76516 (* l_0_12_158 l_0_12_158)))
 (let ((?x76514 (* l_0_12_157 l_0_12_157)))
 (let ((?x76512 (* l_0_12_118 l_0_12_118)))
 (let ((?x76510 (* l_0_12_117 l_0_12_117)))
 (let ((?x76508 (* l_0_12_116 l_0_12_116)))
 (let ((?x76506 (* l_0_12_115 l_0_12_115)))
 (let ((?x76504 (* l_0_12_114 l_0_12_114)))
 (let ((?x76505 (- (- (* (- l_0_12_112) l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76504)))
 (let ((?x76519 (+ (+ (+ (- (- (- (- ?x76505 ?x76506) ?x76508) ?x76510) ?x76512) ?x76514) ?x76516) ?x76518)))
 (= (+ (+ (+ (+ ?x76519 ?x76520) ?x76522) ?x76524) ?x76526) 0.0))))))))))))))))
(assert
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76591 (* ?x76590 l_0_12_170)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76588 (* ?x76587 l_0_12_169)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76585 (* ?x76584 l_0_12_168)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76582 (* ?x76581 l_0_12_167)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76579 (* ?x76578 l_0_12_166)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76576 (* ?x76575 l_0_12_165)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76573 (* ?x76572 l_0_12_164)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76570 (* ?x76569 l_0_12_125)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76567 (* ?x76566 l_0_12_124)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76564 (* ?x76563 l_0_12_123)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76561 (* ?x76560 l_0_12_122)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76558 (* ?x75626 l_0_12_121)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76556 (* ?x75623 l_0_12_120)))
 (let ((?x76565 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_119) ?x76556) ?x76558) ?x76561) ?x76564)))
 (let ((?x76586 (+ (+ (+ (+ (+ (- (- ?x76565 ?x76567) ?x76570) ?x76573) ?x76576) ?x76579) ?x76582) ?x76585)))
 (= (+ (+ ?x76586 ?x76588) ?x76591) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76667 (* ?x76590 l_0_12_178)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76665 (* ?x76587 l_0_12_177)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76663 (* ?x76584 l_0_12_176)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76661 (* ?x76581 l_0_12_175)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76659 (* ?x76578 l_0_12_174)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76657 (* ?x76575 l_0_12_173)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76655 (* ?x76572 l_0_12_172)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76651 (* ?x76569 l_0_12_133)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76649 (* ?x76566 l_0_12_132)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76647 (* ?x76563 l_0_12_131)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76645 (* ?x76560 l_0_12_130)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76643 (* ?x75626 l_0_12_129)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76641 (* ?x75623 l_0_12_128)))
 (let ((?x76648 (- (- (- (- (* (* (- 2.0) l_0_12_112) l_0_12_127) ?x76641) ?x76643) ?x76645) ?x76647)))
 (let ((?x76652 (- (- ?x76648 ?x76649) ?x76651)))
 (let ((?x76986 (+ (+ (+ (+ (+ (+ (+ ?x76652 ?x76655) ?x76657) ?x76659) ?x76661) ?x76663) ?x76665) ?x76667)))
 (= ?x76986 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x76752 (* l_0_12_171 l_0_12_171)))
 (let ((?x76750 (* l_0_12_170 l_0_12_170)))
 (let ((?x76748 (* l_0_12_169 l_0_12_169)))
 (let ((?x76746 (* l_0_12_168 l_0_12_168)))
 (let ((?x76744 (* l_0_12_167 l_0_12_167)))
 (let ((?x76742 (* l_0_12_166 l_0_12_166)))
 (let ((?x76740 (* l_0_12_165 l_0_12_165)))
 (let ((?x76738 (* l_0_12_164 l_0_12_164)))
 (let ((?x76736 (* l_0_12_126 l_0_12_126)))
 (let ((?x76734 (* l_0_12_125 l_0_12_125)))
 (let ((?x76732 (* l_0_12_124 l_0_12_124)))
 (let ((?x76730 (* l_0_12_123 l_0_12_123)))
 (let ((?x76728 (* l_0_12_122 l_0_12_122)))
 (let ((?x76726 (* l_0_12_121 l_0_12_121)))
 (let ((?x76727 (- (- (* (- l_0_12_119) l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76726)))
 (let ((?x76741 (+ (+ (- (- (- (- (- ?x76727 ?x76728) ?x76730) ?x76732) ?x76734) ?x76736) ?x76738) ?x76740)))
 (= (+ (+ (+ (+ (+ (+ ?x76741 ?x76742) ?x76744) ?x76746) ?x76748) ?x76750) ?x76752) 0.0))))))))))))))))))
(assert
 (let ((?x76824 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76821 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76818 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76815 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76812 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76809 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76806 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76803 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76800 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76797 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76794 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76791 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76788 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76785 (* ?x75835 l_0_12_129)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76783 (* ?x75832 l_0_12_128)))
 (let ((?x76792 (- (- (- (- (* (* (- 2.0) l_0_12_119) l_0_12_127) ?x76783) ?x76785) ?x76788) ?x76791)))
 (let ((?x76813 (+ (+ (+ (+ (- (- (- ?x76792 ?x76794) ?x76797) ?x76800) ?x76803) ?x76806) ?x76809) ?x76812)))
 (= (+ (+ (+ (+ ?x76813 ?x76815) ?x76818) ?x76821) ?x76824) 0.0)))))))))))))))))))))
(assert
 (let ((?x76906 (* l_0_12_180 l_0_12_180)))
 (let ((?x76904 (* l_0_12_179 l_0_12_179)))
 (let ((?x76902 (* l_0_12_178 l_0_12_178)))
 (let ((?x76900 (* l_0_12_177 l_0_12_177)))
 (let ((?x76898 (* l_0_12_176 l_0_12_176)))
 (let ((?x76896 (* l_0_12_175 l_0_12_175)))
 (let ((?x76894 (* l_0_12_174 l_0_12_174)))
 (let ((?x76892 (* l_0_12_173 l_0_12_173)))
 (let ((?x76890 (* l_0_12_172 l_0_12_172)))
 (let ((?x76888 (* l_0_12_135 l_0_12_135)))
 (let ((?x76886 (* l_0_12_134 l_0_12_134)))
 (let ((?x76884 (* l_0_12_133 l_0_12_133)))
 (let ((?x76882 (* l_0_12_132 l_0_12_132)))
 (let ((?x76880 (* l_0_12_131 l_0_12_131)))
 (let ((?x76878 (* l_0_12_130 l_0_12_130)))
 (let ((?x76876 (* l_0_12_129 l_0_12_129)))
 (let ((?x76877 (- (- (* (- l_0_12_127) l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76876)))
 (let ((?x76891 (+ (- (- (- (- (- (- ?x76877 ?x76878) ?x76880) ?x76882) ?x76884) ?x76886) ?x76888) ?x76890)))
 (let ((?x76905 (+ (+ (+ (+ (+ (+ (+ ?x76891 ?x76892) ?x76894) ?x76896) ?x76898) ?x76900) ?x76902) ?x76904)))
 (= (+ ?x76905 ?x76906) 0.0)))))))))))))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76098 (* ?x74671 l_0_12_92)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x39008 (* ?x39012 l_0_12_227)))
 (let ((?x76993 (- (* (* (- 2.0) l_0_12_136) l_0_12_137) (* (* 2.0 l_0_12_182) l_0_12_209))))
 (let ((?x76998 (- (- (- ?x76993 (* (* 2.0 l_0_12_183) l_0_12_210)) ?x39008) (* (* 2.0 l_0_12_272) l_0_12_299))))
 (let ((?x77002 (- (- ?x76998 (* (* 2.0 l_0_12_273) l_0_12_300)) (* (* 2.0 l_0_12_317) l_0_12_344))))
 (let ((?x77006 (- (- ?x77002 (* (* 2.0 l_0_12_318) l_0_12_345)) (* (* 2.0 l_0_12_362) l_0_12_389))))
 (let ((?x77010 (- (- ?x77006 (* (* 2.0 l_0_12_363) l_0_12_390)) (* (* 2.0 l_0_12_407) l_0_12_434))))
 (= (+ (- ?x77010 (* (* 2.0 l_0_12_408) l_0_12_435)) ?x76098) 0.0)))))))))))
(assert
 (let ((?x74671 (* 2.0 l_0_12_91)))
 (let ((?x76111 (* ?x74671 l_0_12_97)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74376 (* ?x39012 l_0_12_232)))
 (let ((?x77083 (- (* (* (- 2.0) l_0_12_136) l_0_12_142) (* (* 2.0 l_0_12_187) l_0_12_209))))
 (let ((?x77087 (- (- ?x77083 (* (* 2.0 l_0_12_188) l_0_12_210)) (* (* 2.0 l_0_12_189) l_0_12_211))))
 (let ((?x77092 (- (- (- ?x77087 (* (* 2.0 l_0_12_190) l_0_12_212)) ?x74376) (* (* 2.0 l_0_12_277) l_0_12_299))))
 (let ((?x77096 (- (- ?x77092 (* (* 2.0 l_0_12_278) l_0_12_300)) (* (* 2.0 l_0_12_279) l_0_12_301))))
 (let ((?x77100 (- (- ?x77096 (* (* 2.0 l_0_12_280) l_0_12_302)) (* (* 2.0 l_0_12_322) l_0_12_344))))
 (let ((?x77104 (- (- ?x77100 (* (* 2.0 l_0_12_323) l_0_12_345)) (* (* 2.0 l_0_12_324) l_0_12_346))))
 (let ((?x77108 (- (- ?x77104 (* (* 2.0 l_0_12_325) l_0_12_347)) (* (* 2.0 l_0_12_367) l_0_12_389))))
 (let ((?x77112 (- (- ?x77108 (* (* 2.0 l_0_12_368) l_0_12_390)) (* (* 2.0 l_0_12_369) l_0_12_391))))
 (let ((?x77116 (- (- ?x77112 (* (* 2.0 l_0_12_370) l_0_12_392)) (* (* 2.0 l_0_12_412) l_0_12_434))))
 (let ((?x77120 (- (- ?x77116 (* (* 2.0 l_0_12_413) l_0_12_435)) (* (* 2.0 l_0_12_414) l_0_12_436))))
 (= (+ (- ?x77120 (* (* 2.0 l_0_12_415) l_0_12_437)) ?x76111) 0.0))))))))))))))))
(assert
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74464 (* ?x39012 l_0_12_236)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x73876 (* ?x72068 l_0_12_146)))
 (let ((?x73855 (* 2.0 l_0_12_101)))
 (let ((?x73874 (* ?x73855 l_0_12_91)))
 (let ((?x42630 (- (- (- ?x73874 ?x73876) (* (* 2.0 l_0_12_191) l_0_12_209)) (* (* 2.0 l_0_12_192) l_0_12_210))))
 (let ((?x77194 (- (- ?x42630 (* (* 2.0 l_0_12_193) l_0_12_211)) (* (* 2.0 l_0_12_194) l_0_12_212))))
 (let ((?x77201 (- (- (- ?x77194 (* (* 2.0 l_0_12_195) l_0_12_213)) ?x74464) (* (* 2.0 l_0_12_281) l_0_12_299))))
 (let ((?x77207 (- (- ?x77201 (* (* 2.0 l_0_12_282) l_0_12_300)) (* (* 2.0 l_0_12_283) l_0_12_301))))
 (let ((?x77213 (- (- ?x77207 (* (* 2.0 l_0_12_284) l_0_12_302)) (* (* 2.0 l_0_12_285) l_0_12_303))))
 (let ((?x77219 (- (- ?x77213 (* (* 2.0 l_0_12_326) l_0_12_344)) (* (* 2.0 l_0_12_327) l_0_12_345))))
 (let ((?x77225 (- (- ?x77219 (* (* 2.0 l_0_12_328) l_0_12_346)) (* (* 2.0 l_0_12_329) l_0_12_347))))
 (let ((?x77231 (- (- ?x77225 (* (* 2.0 l_0_12_330) l_0_12_348)) (* (* 2.0 l_0_12_371) l_0_12_389))))
 (let ((?x77237 (- (- ?x77231 (* (* 2.0 l_0_12_372) l_0_12_390)) (* (* 2.0 l_0_12_373) l_0_12_391))))
 (let ((?x77243 (- (- ?x77237 (* (* 2.0 l_0_12_374) l_0_12_392)) (* (* 2.0 l_0_12_375) l_0_12_393))))
 (let ((?x77249 (- (- ?x77243 (* (* 2.0 l_0_12_416) l_0_12_434)) (* (* 2.0 l_0_12_417) l_0_12_435))))
 (let ((?x77255 (- (- ?x77249 (* (* 2.0 l_0_12_418) l_0_12_436)) (* (* 2.0 l_0_12_419) l_0_12_437))))
 (= (- ?x77255 (* (* 2.0 l_0_12_420) l_0_12_438)) 0.0))))))))))))))))))))
(assert
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x61964 (* ?x39012 l_0_12_241)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x72069 (* ?x72068 l_0_12_151)))
 (let ((?x71964 (* 2.0 l_0_12_106)))
 (let ((?x60961 (* ?x71964 l_0_12_91)))
 (let ((?x77325 (- (- (- ?x60961 ?x72069) (* (* 2.0 l_0_12_196) l_0_12_209)) (* (* 2.0 l_0_12_197) l_0_12_210))))
 (let ((?x77329 (- (- ?x77325 (* (* 2.0 l_0_12_198) l_0_12_211)) (* (* 2.0 l_0_12_199) l_0_12_212))))
 (let ((?x77333 (- (- ?x77329 (* (* 2.0 l_0_12_200) l_0_12_213)) (* (* 2.0 l_0_12_201) l_0_12_214))))
 (let ((?x77338 (- (- (- ?x77333 ?x61964) (* (* 2.0 l_0_12_286) l_0_12_299)) (* (* 2.0 l_0_12_287) l_0_12_300))))
 (let ((?x77342 (- (- ?x77338 (* (* 2.0 l_0_12_288) l_0_12_301)) (* (* 2.0 l_0_12_289) l_0_12_302))))
 (let ((?x77346 (- (- ?x77342 (* (* 2.0 l_0_12_290) l_0_12_303)) (* (* 2.0 l_0_12_291) l_0_12_304))))
 (let ((?x77350 (- (- ?x77346 (* (* 2.0 l_0_12_331) l_0_12_344)) (* (* 2.0 l_0_12_332) l_0_12_345))))
 (let ((?x77354 (- (- ?x77350 (* (* 2.0 l_0_12_333) l_0_12_346)) (* (* 2.0 l_0_12_334) l_0_12_347))))
 (let ((?x77358 (- (- ?x77354 (* (* 2.0 l_0_12_335) l_0_12_348)) (* (* 2.0 l_0_12_336) l_0_12_349))))
 (let ((?x77362 (- (- ?x77358 (* (* 2.0 l_0_12_376) l_0_12_389)) (* (* 2.0 l_0_12_377) l_0_12_390))))
 (let ((?x77366 (- (- ?x77362 (* (* 2.0 l_0_12_378) l_0_12_391)) (* (* 2.0 l_0_12_379) l_0_12_392))))
 (let ((?x77370 (- (- ?x77366 (* (* 2.0 l_0_12_380) l_0_12_393)) (* (* 2.0 l_0_12_381) l_0_12_394))))
 (let ((?x77374 (- (- ?x77370 (* (* 2.0 l_0_12_421) l_0_12_434)) (* (* 2.0 l_0_12_422) l_0_12_435))))
 (let ((?x77378 (- (- ?x77374 (* (* 2.0 l_0_12_423) l_0_12_436)) (* (* 2.0 l_0_12_424) l_0_12_437))))
 (let ((?x77382 (- (- ?x77378 (* (* 2.0 l_0_12_425) l_0_12_438)) (* (* 2.0 l_0_12_426) l_0_12_439))))
 (= ?x77382 0.0)))))))))))))))))))))))
(assert
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74580 (* ?x39012 l_0_12_247)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76131 (* ?x72068 l_0_12_157)))
 (let ((?x77419 (- (- (* (* 2.0 l_0_12_112) l_0_12_91) ?x76131) (* (* 2.0 l_0_12_202) l_0_12_209))))
 (let ((?x77423 (- (- ?x77419 (* (* 2.0 l_0_12_203) l_0_12_210)) (* (* 2.0 l_0_12_204) l_0_12_211))))
 (let ((?x77427 (- (- ?x77423 (* (* 2.0 l_0_12_205) l_0_12_212)) (* (* 2.0 l_0_12_206) l_0_12_213))))
 (let ((?x77431 (- (- ?x77427 (* (* 2.0 l_0_12_207) l_0_12_214)) (* (* 2.0 l_0_12_208) l_0_12_215))))
 (let ((?x77436 (- (- (- ?x77431 ?x74580) (* (* 2.0 l_0_12_292) l_0_12_299)) (* (* 2.0 l_0_12_293) l_0_12_300))))
 (let ((?x77440 (- (- ?x77436 (* (* 2.0 l_0_12_294) l_0_12_301)) (* (* 2.0 l_0_12_295) l_0_12_302))))
 (let ((?x77444 (- (- ?x77440 (* (* 2.0 l_0_12_296) l_0_12_303)) (* (* 2.0 l_0_12_297) l_0_12_304))))
 (let ((?x77448 (- (- ?x77444 (* (* 2.0 l_0_12_298) l_0_12_305)) (* (* 2.0 l_0_12_337) l_0_12_344))))
 (let ((?x77452 (- (- ?x77448 (* (* 2.0 l_0_12_338) l_0_12_345)) (* (* 2.0 l_0_12_339) l_0_12_346))))
 (let ((?x77456 (- (- ?x77452 (* (* 2.0 l_0_12_340) l_0_12_347)) (* (* 2.0 l_0_12_341) l_0_12_348))))
 (let ((?x77460 (- (- ?x77456 (* (* 2.0 l_0_12_342) l_0_12_349)) (* (* 2.0 l_0_12_343) l_0_12_350))))
 (let ((?x77464 (- (- ?x77460 (* (* 2.0 l_0_12_382) l_0_12_389)) (* (* 2.0 l_0_12_383) l_0_12_390))))
 (let ((?x77468 (- (- ?x77464 (* (* 2.0 l_0_12_384) l_0_12_391)) (* (* 2.0 l_0_12_385) l_0_12_392))))
 (let ((?x77472 (- (- ?x77468 (* (* 2.0 l_0_12_386) l_0_12_393)) (* (* 2.0 l_0_12_387) l_0_12_394))))
 (let ((?x77476 (- (- ?x77472 (* (* 2.0 l_0_12_388) l_0_12_395)) (* (* 2.0 l_0_12_427) l_0_12_434))))
 (let ((?x77480 (- (- ?x77476 (* (* 2.0 l_0_12_428) l_0_12_435)) (* (* 2.0 l_0_12_429) l_0_12_436))))
 (let ((?x77484 (- (- ?x77480 (* (* 2.0 l_0_12_430) l_0_12_437)) (* (* 2.0 l_0_12_431) l_0_12_438))))
 (let ((?x77488 (- (- ?x77484 (* (* 2.0 l_0_12_432) l_0_12_439)) (* (* 2.0 l_0_12_433) l_0_12_440))))
 (= ?x77488 0.0))))))))))))))))))))))))
(assert
 (let ((?x77605 (* l_0_12_441 l_0_12_441)))
 (let ((?x77603 (* l_0_12_440 l_0_12_440)))
 (let ((?x77601 (* l_0_12_439 l_0_12_439)))
 (let ((?x77599 (* l_0_12_438 l_0_12_438)))
 (let ((?x77597 (* l_0_12_437 l_0_12_437)))
 (let ((?x77595 (* l_0_12_436 l_0_12_436)))
 (let ((?x77593 (* l_0_12_435 l_0_12_435)))
 (let ((?x77591 (* l_0_12_434 l_0_12_434)))
 (let ((?x77589 (* l_0_12_396 l_0_12_396)))
 (let ((?x77587 (* l_0_12_395 l_0_12_395)))
 (let ((?x77585 (* l_0_12_394 l_0_12_394)))
 (let ((?x77583 (* l_0_12_393 l_0_12_393)))
 (let ((?x77581 (* l_0_12_392 l_0_12_392)))
 (let ((?x77579 (* l_0_12_391 l_0_12_391)))
 (let ((?x77577 (* l_0_12_390 l_0_12_390)))
 (let ((?x77575 (* l_0_12_389 l_0_12_389)))
 (let ((?x77573 (* l_0_12_351 l_0_12_351)))
 (let ((?x77571 (* l_0_12_350 l_0_12_350)))
 (let ((?x77569 (* l_0_12_349 l_0_12_349)))
 (let ((?x77567 (* l_0_12_348 l_0_12_348)))
 (let ((?x77565 (* l_0_12_347 l_0_12_347)))
 (let ((?x77563 (* l_0_12_346 l_0_12_346)))
 (let ((?x77561 (* l_0_12_345 l_0_12_345)))
 (let ((?x77559 (* l_0_12_344 l_0_12_344)))
 (let ((?x77557 (* l_0_12_306 l_0_12_306)))
 (let ((?x77555 (* l_0_12_305 l_0_12_305)))
 (let ((?x77553 (* l_0_12_304 l_0_12_304)))
 (let ((?x77551 (* l_0_12_303 l_0_12_303)))
 (let ((?x77549 (* l_0_12_302 l_0_12_302)))
 (let ((?x77547 (* l_0_12_301 l_0_12_301)))
 (let ((?x77545 (* l_0_12_300 l_0_12_300)))
 (let ((?x77543 (* l_0_12_299 l_0_12_299)))
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x74644 (* ?x39012 l_0_12_254)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76138 (* ?x72068 l_0_12_164)))
 (let ((?x75830 (* 2.0 l_0_12_119)))
 (let ((?x76940 (* ?x75830 l_0_12_91)))
 (let ((?x77523 (- (- (- ?x76940 ?x76138) (* (* 1.0 l_0_12_209) l_0_12_209)) (* (* 1.0 l_0_12_210) l_0_12_210))))
 (let ((?x77529 (- (- ?x77523 (* (* 1.0 l_0_12_211) l_0_12_211)) (* (* 1.0 l_0_12_212) l_0_12_212))))
 (let ((?x77535 (- (- ?x77529 (* (* 1.0 l_0_12_213) l_0_12_213)) (* (* 1.0 l_0_12_214) l_0_12_214))))
 (let ((?x77541 (- (- ?x77535 (* (* 1.0 l_0_12_215) l_0_12_215)) (* (* 1.0 l_0_12_216) l_0_12_216))))
 (let ((?x77554 (- (- (- (- (- (- (- ?x77541 ?x74644) ?x77543) ?x77545) ?x77547) ?x77549) ?x77551) ?x77553)))
 (let ((?x77568 (- (- (- (- (- (- (- ?x77554 ?x77555) ?x77557) ?x77559) ?x77561) ?x77563) ?x77565) ?x77567)))
 (let ((?x77582 (- (- (- (- (- (- (- ?x77568 ?x77569) ?x77571) ?x77573) ?x77575) ?x77577) ?x77579) ?x77581)))
 (let ((?x77596 (- (- (- (- (- (- (- ?x77582 ?x77583) ?x77585) ?x77587) ?x77589) ?x77591) ?x77593) ?x77595)))
 (= (- (- (- (- (- ?x77596 ?x77597) ?x77599) ?x77601) ?x77603) ?x77605) 0.0))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x39012 (* 2.0 l_0_12_226)))
 (let ((?x62350 (* ?x39012 l_0_12_262)))
 (let ((?x72068 (* 2.0 l_0_12_136)))
 (let ((?x76182 (* ?x72068 l_0_12_172)))
 (let ((?x77664 (- (- (* (* 2.0 l_0_12_127) l_0_12_91) ?x76182) (* (* 2.0 l_0_12_209) l_0_12_217))))
 (let ((?x77670 (- (- ?x77664 (* (* 2.0 l_0_12_210) l_0_12_218)) (* (* 2.0 l_0_12_211) l_0_12_219))))
 (let ((?x77676 (- (- ?x77670 (* (* 2.0 l_0_12_212) l_0_12_220)) (* (* 2.0 l_0_12_213) l_0_12_221))))
 (let ((?x77682 (- (- ?x77676 (* (* 2.0 l_0_12_214) l_0_12_222)) (* (* 2.0 l_0_12_215) l_0_12_223))))
 (let ((?x77689 (- (- (- ?x77682 (* (* 2.0 l_0_12_216) l_0_12_224)) ?x62350) (* (* 2.0 l_0_12_299) l_0_12_307))))
 (let ((?x77695 (- (- ?x77689 (* (* 2.0 l_0_12_300) l_0_12_308)) (* (* 2.0 l_0_12_301) l_0_12_309))))
 (let ((?x77701 (- (- ?x77695 (* (* 2.0 l_0_12_302) l_0_12_310)) (* (* 2.0 l_0_12_303) l_0_12_311))))
 (let ((?x77707 (- (- ?x77701 (* (* 2.0 l_0_12_304) l_0_12_312)) (* (* 2.0 l_0_12_305) l_0_12_313))))
 (let ((?x77713 (- (- ?x77707 (* (* 2.0 l_0_12_306) l_0_12_314)) (* (* 2.0 l_0_12_344) l_0_12_352))))
 (let ((?x77719 (- (- ?x77713 (* (* 2.0 l_0_12_345) l_0_12_353)) (* (* 2.0 l_0_12_346) l_0_12_354))))
 (let ((?x77725 (- (- ?x77719 (* (* 2.0 l_0_12_347) l_0_12_355)) (* (* 2.0 l_0_12_348) l_0_12_356))))
 (let ((?x77731 (- (- ?x77725 (* (* 2.0 l_0_12_349) l_0_12_357)) (* (* 2.0 l_0_12_350) l_0_12_358))))
 (let ((?x77737 (- (- ?x77731 (* (* 2.0 l_0_12_351) l_0_12_359)) (* (* 2.0 l_0_12_389) l_0_12_397))))
 (let ((?x77743 (- (- ?x77737 (* (* 2.0 l_0_12_390) l_0_12_398)) (* (* 2.0 l_0_12_391) l_0_12_399))))
 (let ((?x77749 (- (- ?x77743 (* (* 2.0 l_0_12_392) l_0_12_400)) (* (* 2.0 l_0_12_393) l_0_12_401))))
 (let ((?x77755 (- (- ?x77749 (* (* 2.0 l_0_12_394) l_0_12_402)) (* (* 2.0 l_0_12_395) l_0_12_403))))
 (let ((?x77761 (- (- ?x77755 (* (* 2.0 l_0_12_396) l_0_12_404)) (* (* 2.0 l_0_12_434) l_0_12_442))))
 (let ((?x77767 (- (- ?x77761 (* (* 2.0 l_0_12_435) l_0_12_443)) (* (* 2.0 l_0_12_436) l_0_12_444))))
 (let ((?x77773 (- (- ?x77767 (* (* 2.0 l_0_12_437) l_0_12_445)) (* (* 2.0 l_0_12_438) l_0_12_446))))
 (let ((?x77779 (- (- ?x77773 (* (* 2.0 l_0_12_439) l_0_12_447)) (* (* 2.0 l_0_12_440) l_0_12_448))))
 (= (- ?x77779 (* (* 2.0 l_0_12_441) l_0_12_449)) 0.0))))))))))))))))))))))))))
(assert
 (let ((?x76196 (* l_0_12_93 l_0_12_93)))
 (let ((?x76194 (* l_0_12_92 l_0_12_92)))
 (let ((?x74754 (* l_0_12_228 l_0_12_228)))
 (let ((?x74752 (* l_0_12_227 l_0_12_227)))
 (let ((?x77901 (- (- (* (- l_0_12_137) l_0_12_137) (* l_0_12_138 l_0_12_138)) ?x74752)))
 (= (+ (+ (- ?x77901 ?x74754) ?x76194) ?x76196) 0.0)))))))
(assert
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74802 (* ?x74766 l_0_12_237)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x62630 (* ?x51818 l_0_12_236)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x50815 (* ?x72253 l_0_12_147)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x61279 (* ?x72250 l_0_12_146)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x61282 (* ?x72993 l_0_12_93)))
 (let ((?x77918 (- (- (- (+ (* (* 2.0 l_0_12_101) l_0_12_92) ?x61282) ?x61279) ?x50815) ?x62630)))
 (= (- ?x77918 ?x74802) 0.0)))))))))))))
(assert
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74827 (* ?x74766 l_0_12_242)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74825 (* ?x51818 l_0_12_241)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x72254 (* ?x72253 l_0_12_152)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x72251 (* ?x72250 l_0_12_151)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72243 (* ?x71971 l_0_12_93)))
 (let ((?x77927 (- (- (- (+ (* (* 2.0 l_0_12_106) l_0_12_92) ?x72243) ?x72251) ?x72254) ?x74825)))
 (= (- ?x77927 ?x74827) 0.0)))))))))))))
(assert
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x51725 (* ?x74766 l_0_12_248)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x62654 (* ?x51818 l_0_12_247)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76236 (* ?x72253 l_0_12_158)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76234 (* ?x72250 l_0_12_157)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76232 (* ?x75623 l_0_12_93)))
 (let ((?x54215 (- (- (- (+ (* (* 2.0 l_0_12_112) l_0_12_92) ?x76232) ?x76234) ?x76236) ?x62654)))
 (= (- ?x54215 ?x51725) 0.0)))))))))))))
(assert
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74848 (* ?x74766 l_0_12_255)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74845 (* ?x51818 l_0_12_254)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76259 (* ?x72253 l_0_12_165)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76257 (* ?x72250 l_0_12_164)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76250 (* ?x75832 l_0_12_93)))
 (let ((?x77940 (- (- (- (+ (* (* 2.0 l_0_12_119) l_0_12_92) ?x76250) ?x76257) ?x76259) ?x74845)))
 (= (- ?x77940 ?x74848) 0.0)))))))))))))
(assert
 (let ((?x74766 (* 2.0 l_0_12_228)))
 (let ((?x74882 (* ?x74766 l_0_12_263)))
 (let ((?x51818 (* 2.0 l_0_12_227)))
 (let ((?x74880 (* ?x51818 l_0_12_262)))
 (let ((?x72253 (* 2.0 l_0_12_138)))
 (let ((?x76279 (* ?x72253 l_0_12_173)))
 (let ((?x72250 (* 2.0 l_0_12_137)))
 (let ((?x76277 (* ?x72250 l_0_12_172)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76275 (* ?x75929 l_0_12_93)))
 (let ((?x77954 (- (- (- (+ (* (* 2.0 l_0_12_127) l_0_12_92) ?x76275) ?x76277) ?x76279) ?x74880)))
 (= (- ?x77954 ?x74882) 0.0)))))))))))))
(assert
 (let ((?x76356 (* l_0_12_99 l_0_12_99)))
 (let ((?x76354 (* l_0_12_98 l_0_12_98)))
 (let ((?x76352 (* l_0_12_97 l_0_12_97)))
 (let ((?x75090 (* l_0_12_235 l_0_12_235)))
 (let ((?x75088 (* l_0_12_234 l_0_12_234)))
 (let ((?x75086 (* l_0_12_233 l_0_12_233)))
 (let ((?x62903 (* l_0_12_232 l_0_12_232)))
 (let ((?x76350 (* l_0_12_145 l_0_12_145)))
 (let ((?x76348 (* l_0_12_144 l_0_12_144)))
 (let ((?x76346 (* l_0_12_143 l_0_12_143)))
 (let ((?x54302 (- (- (* l_0_12_100 l_0_12_100) (* l_0_12_142 l_0_12_142)) ?x76346)))
 (let ((?x77967 (+ (- (- (- (- (- (- ?x54302 ?x76348) ?x76350) ?x62903) ?x75086) ?x75088) ?x75090) ?x76352)))
 (= (+ (+ ?x77967 ?x76354) ?x76356) 0.0))))))))))))))
(assert
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75121 (* ?x73904 l_0_12_244)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75119 (* ?x73901 l_0_12_243)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75117 (* ?x73898 l_0_12_242)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75115 (* ?x73895 l_0_12_241)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x72761 (* ?x72760 l_0_12_154)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x72758 (* ?x72757 l_0_12_153)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x72755 (* ?x72754 l_0_12_152)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x72752 (* ?x72751 l_0_12_151)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x72749 (* ?x71974 l_0_12_99)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x72747 (* ?x71971 l_0_12_98)))
 (let ((?x71964 (* 2.0 l_0_12_106)))
 (let ((?x72738 (* ?x71964 l_0_12_97)))
 (let ((?x72733 (* 2.0 l_0_12_100)))
 (let ((?x72735 (* ?x72733 l_0_12_109)))
 (let ((?x77993 (- (- (- (- (+ (+ (+ ?x72735 ?x72738) ?x72747) ?x72749) ?x72752) ?x72755) ?x72758) ?x72761)))
 (= (- (- (- (- ?x77993 ?x75115) ?x75117) ?x75119) ?x75121) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75139 (* ?x73904 l_0_12_250)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75137 (* ?x73901 l_0_12_249)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75135 (* ?x73898 l_0_12_248)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x62918 (* ?x73895 l_0_12_247)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76388 (* ?x72760 l_0_12_160)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76386 (* ?x72757 l_0_12_159)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76384 (* ?x72754 l_0_12_158)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76382 (* ?x72751 l_0_12_157)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76380 (* ?x75626 l_0_12_99)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x65165 (* ?x75623 l_0_12_98)))
 (let ((?x28644 (* 2.0 l_0_12_112)))
 (let ((?x29594 (* ?x28644 l_0_12_97)))
 (let ((?x32556 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_115) ?x29594) ?x65165) ?x76380) ?x76382)))
 (let ((?x54357 (- (- (- (- (- (- (- ?x32556 ?x76384) ?x76386) ?x76388) ?x62918) ?x75135) ?x75137) ?x75139)))
 (= ?x54357 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75173 (* ?x73904 l_0_12_257)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75171 (* ?x73901 l_0_12_256)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75169 (* ?x73898 l_0_12_255)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75167 (* ?x73895 l_0_12_254)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76429 (* ?x72760 l_0_12_167)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76427 (* ?x72757 l_0_12_166)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76425 (* ?x72754 l_0_12_165)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76423 (* ?x72751 l_0_12_164)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76421 (* ?x75835 l_0_12_99)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76412 (* ?x75832 l_0_12_98)))
 (let ((?x75830 (* 2.0 l_0_12_119)))
 (let ((?x76408 (* ?x75830 l_0_12_97)))
 (let ((?x54404 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_122) ?x76408) ?x76412) ?x76421) ?x76423)))
 (let ((?x78021 (- (- (- (- (- (- (- ?x54404 ?x76425) ?x76427) ?x76429) ?x75167) ?x75169) ?x75171) ?x75173)))
 (= ?x78021 0.0))))))))))))))))))))))))))
(assert
 (let ((?x73904 (* 2.0 l_0_12_235)))
 (let ((?x75211 (* ?x73904 l_0_12_265)))
 (let ((?x73901 (* 2.0 l_0_12_234)))
 (let ((?x75209 (* ?x73901 l_0_12_264)))
 (let ((?x73898 (* 2.0 l_0_12_233)))
 (let ((?x75207 (* ?x73898 l_0_12_263)))
 (let ((?x73895 (* 2.0 l_0_12_232)))
 (let ((?x75205 (* ?x73895 l_0_12_262)))
 (let ((?x72760 (* 2.0 l_0_12_145)))
 (let ((?x76466 (* ?x72760 l_0_12_175)))
 (let ((?x72757 (* 2.0 l_0_12_144)))
 (let ((?x76464 (* ?x72757 l_0_12_174)))
 (let ((?x72754 (* 2.0 l_0_12_143)))
 (let ((?x76462 (* ?x72754 l_0_12_173)))
 (let ((?x72751 (* 2.0 l_0_12_142)))
 (let ((?x76460 (* ?x72751 l_0_12_172)))
 (let ((?x75932 (* 2.0 l_0_12_129)))
 (let ((?x76458 (* ?x75932 l_0_12_99)))
 (let ((?x75929 (* 2.0 l_0_12_128)))
 (let ((?x76456 (* ?x75929 l_0_12_98)))
 (let ((?x75927 (* 2.0 l_0_12_127)))
 (let ((?x76454 (* ?x75927 l_0_12_97)))
 (let ((?x78033 (- (+ (+ (+ (* (* 2.0 l_0_12_100) l_0_12_130) ?x76454) ?x76456) ?x76458) ?x76460)))
 (let ((?x78040 (- (- (- (- (- (- (- ?x78033 ?x76462) ?x76464) ?x76466) ?x75205) ?x75207) ?x75209) ?x75211)))
 (= ?x78040 0.0))))))))))))))))))))))))))
(assert
 (let ((?x75257 (* l_0_12_240 l_0_12_240)))
 (let ((?x75255 (* l_0_12_239 l_0_12_239)))
 (let ((?x75253 (* l_0_12_238 l_0_12_238)))
 (let ((?x75251 (* l_0_12_237 l_0_12_237)))
 (let ((?x75249 (* l_0_12_236 l_0_12_236)))
 (let ((?x74028 (* l_0_12_150 l_0_12_150)))
 (let ((?x74026 (* l_0_12_149 l_0_12_149)))
 (let ((?x74024 (* l_0_12_148 l_0_12_148)))
 (let ((?x74022 (* l_0_12_147 l_0_12_147)))
 (let ((?x74020 (* l_0_12_146 l_0_12_146)))
 (let ((?x61359 (* l_0_12_105 l_0_12_105)))
 (let ((?x61358 (* l_0_12_104 l_0_12_104)))
 (let ((?x61361 (* l_0_12_103 l_0_12_103)))
 (let ((?x54493 (+ (+ (* l_0_12_101 l_0_12_101) (* l_0_12_102 l_0_12_102)) ?x61361)))
 (let ((?x54496 (- (- (- (- (- (+ (+ ?x54493 ?x61358) ?x61359) ?x74020) ?x74022) ?x74024) ?x74026) ?x74028)))
 (= (- (- (- (- (- ?x54496 ?x75249) ?x75251) ?x75253) ?x75255) ?x75257) 0.0)))))))))))))))))
(assert
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75290 (* ?x75289 l_0_12_245)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75287 (* ?x75286 l_0_12_244)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75284 (* ?x75283 l_0_12_243)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75281 (* ?x75280 l_0_12_242)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75278 (* ?x75277 l_0_12_241)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x73038 (* ?x73037 l_0_12_155)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x73033 (* ?x73032 l_0_12_154)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x73030 (* ?x73029 l_0_12_153)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x73027 (* ?x73026 l_0_12_152)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x73024 (* ?x73023 l_0_12_151)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x73013 (* ?x73012 l_0_12_110)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x73010 (* ?x73009 l_0_12_109)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x73007 (* ?x72998 l_0_12_108)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x72995 (* ?x72993 l_0_12_107)))
 (let ((?x78067 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_106) ?x72995) ?x73007) ?x73010) ?x73013)))
 (let ((?x78074 (- (- (- (- (- (- (- ?x78067 ?x73024) ?x73027) ?x73030) ?x73033) ?x73038) ?x75278) ?x75281)))
 (= (- (- (- ?x78074 ?x75284) ?x75287) ?x75290) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75312 (* ?x75289 l_0_12_251)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75310 (* ?x75286 l_0_12_250)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75308 (* ?x75283 l_0_12_249)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x63033 (* ?x75280 l_0_12_248)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x63038 (* ?x75277 l_0_12_247)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74067 (* ?x73037 l_0_12_161)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74065 (* ?x73032 l_0_12_160)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74063 (* ?x73029 l_0_12_159)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74061 (* ?x73026 l_0_12_158)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74059 (* ?x73023 l_0_12_157)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74057 (* ?x73012 l_0_12_116)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74055 (* ?x73009 l_0_12_115)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74053 (* ?x72998 l_0_12_114)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74051 (* ?x72993 l_0_12_113)))
 (let ((?x54603 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_112) ?x74051) ?x74053) ?x74055) ?x74057)))
 (let ((?x78097 (- (- (- (- (- (- (- ?x54603 ?x74059) ?x74061) ?x74063) ?x74065) ?x74067) ?x63038) ?x63033)))
 (= (- (- (- ?x78097 ?x75308) ?x75310) ?x75312) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75336 (* ?x75289 l_0_12_258)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75334 (* ?x75286 l_0_12_257)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75332 (* ?x75283 l_0_12_256)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75330 (* ?x75280 l_0_12_255)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75328 (* ?x75277 l_0_12_254)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74101 (* ?x73037 l_0_12_168)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74099 (* ?x73032 l_0_12_167)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74097 (* ?x73029 l_0_12_166)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74095 (* ?x73026 l_0_12_165)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74093 (* ?x73023 l_0_12_164)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74091 (* ?x73012 l_0_12_123)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74089 (* ?x73009 l_0_12_122)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x38730 (* ?x72998 l_0_12_121)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x38728 (* ?x72993 l_0_12_120)))
 (let ((?x78110 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_119) ?x38728) ?x38730) ?x74089) ?x74091)))
 (let ((?x78117 (- (- (- (- (- (- (- ?x78110 ?x74093) ?x74095) ?x74097) ?x74099) ?x74101) ?x75328) ?x75330)))
 (= (- (- (- ?x78117 ?x75332) ?x75334) ?x75336) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75289 (* 2.0 l_0_12_240)))
 (let ((?x75383 (* ?x75289 l_0_12_266)))
 (let ((?x75286 (* 2.0 l_0_12_239)))
 (let ((?x75381 (* ?x75286 l_0_12_265)))
 (let ((?x75283 (* 2.0 l_0_12_238)))
 (let ((?x75379 (* ?x75283 l_0_12_264)))
 (let ((?x75280 (* 2.0 l_0_12_237)))
 (let ((?x75377 (* ?x75280 l_0_12_263)))
 (let ((?x75277 (* 2.0 l_0_12_236)))
 (let ((?x75375 (* ?x75277 l_0_12_262)))
 (let ((?x73037 (* 2.0 l_0_12_150)))
 (let ((?x74151 (* ?x73037 l_0_12_176)))
 (let ((?x73032 (* 2.0 l_0_12_149)))
 (let ((?x74149 (* ?x73032 l_0_12_175)))
 (let ((?x73029 (* 2.0 l_0_12_148)))
 (let ((?x74147 (* ?x73029 l_0_12_174)))
 (let ((?x73026 (* 2.0 l_0_12_147)))
 (let ((?x74145 (* ?x73026 l_0_12_173)))
 (let ((?x73023 (* 2.0 l_0_12_146)))
 (let ((?x74143 (* ?x73023 l_0_12_172)))
 (let ((?x73012 (* 2.0 l_0_12_105)))
 (let ((?x74141 (* ?x73012 l_0_12_131)))
 (let ((?x73009 (* 2.0 l_0_12_104)))
 (let ((?x74139 (* ?x73009 l_0_12_130)))
 (let ((?x72998 (* 2.0 l_0_12_103)))
 (let ((?x74137 (* ?x72998 l_0_12_129)))
 (let ((?x72993 (* 2.0 l_0_12_102)))
 (let ((?x74135 (* ?x72993 l_0_12_128)))
 (let ((?x78137 (+ (+ (+ (+ (* (* 2.0 l_0_12_101) l_0_12_127) ?x74135) ?x74137) ?x74139) ?x74141)))
 (let ((?x78144 (- (- (- (- (- (- (- ?x78137 ?x74143) ?x74145) ?x74147) ?x74149) ?x74151) ?x75375) ?x75377)))
 (= (- (- (- ?x78144 ?x75379) ?x75381) ?x75383) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x75421 (* l_0_12_246 l_0_12_246)))
 (let ((?x75419 (* l_0_12_245 l_0_12_245)))
 (let ((?x75417 (* l_0_12_244 l_0_12_244)))
 (let ((?x75415 (* l_0_12_243 l_0_12_243)))
 (let ((?x75413 (* l_0_12_242 l_0_12_242)))
 (let ((?x75411 (* l_0_12_241 l_0_12_241)))
 (let ((?x73254 (* l_0_12_156 l_0_12_156)))
 (let ((?x73252 (* l_0_12_155 l_0_12_155)))
 (let ((?x73250 (* l_0_12_154 l_0_12_154)))
 (let ((?x73248 (* l_0_12_153 l_0_12_153)))
 (let ((?x73246 (* l_0_12_152 l_0_12_152)))
 (let ((?x73244 (* l_0_12_151 l_0_12_151)))
 (let ((?x73242 (* l_0_12_111 l_0_12_111)))
 (let ((?x73240 (* l_0_12_110 l_0_12_110)))
 (let ((?x73229 (* l_0_12_109 l_0_12_109)))
 (let ((?x73225 (* l_0_12_108 l_0_12_108)))
 (let ((?x54990 (+ (+ (* l_0_12_106 l_0_12_106) (* l_0_12_107 l_0_12_107)) ?x73225)))
 (let ((?x78180 (- (- (- (- (+ (+ (+ ?x54990 ?x73229) ?x73240) ?x73242) ?x73244) ?x73246) ?x73248) ?x73250)))
 (let ((?x78187 (- (- (- (- (- (- (- ?x78180 ?x73252) ?x73254) ?x75411) ?x75413) ?x75415) ?x75417) ?x75419)))
 (= (- ?x78187 ?x75421) 0.0)))))))))))))))))))))
(assert
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x75470 (* ?x71853 l_0_12_259)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x75468 (* ?x71850 l_0_12_258)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x75466 (* ?x71847 l_0_12_257)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x75464 (* ?x71844 l_0_12_256)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x75462 (* ?x71841 l_0_12_255)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x75460 (* ?x71838 l_0_12_254)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73610 (* ?x72001 l_0_12_169)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73608 (* ?x71998 l_0_12_168)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73606 (* ?x71995 l_0_12_167)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73604 (* ?x71992 l_0_12_166)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73602 (* ?x71989 l_0_12_165)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73600 (* ?x71986 l_0_12_164)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73598 (* ?x71983 l_0_12_124)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73596 (* ?x71980 l_0_12_123)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73594 (* ?x71977 l_0_12_122)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73592 (* ?x71974 l_0_12_121)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x73590 (* ?x71971 l_0_12_120)))
 (let ((?x78223 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_119) ?x73590) ?x73592) ?x73594) ?x73596)))
 (let ((?x78230 (- (- (- (- (- (- (+ ?x78223 ?x73598) ?x73600) ?x73602) ?x73604) ?x73606) ?x73608) ?x73610)))
 (= (- (- (- (- (- (- ?x78230 ?x75460) ?x75462) ?x75464) ?x75466) ?x75468) ?x75470) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x71853 (* 2.0 l_0_12_246)))
 (let ((?x75532 (* ?x71853 l_0_12_267)))
 (let ((?x71850 (* 2.0 l_0_12_245)))
 (let ((?x75530 (* ?x71850 l_0_12_266)))
 (let ((?x71847 (* 2.0 l_0_12_244)))
 (let ((?x75528 (* ?x71847 l_0_12_265)))
 (let ((?x71844 (* 2.0 l_0_12_243)))
 (let ((?x75526 (* ?x71844 l_0_12_264)))
 (let ((?x71841 (* 2.0 l_0_12_242)))
 (let ((?x75524 (* ?x71841 l_0_12_263)))
 (let ((?x71838 (* 2.0 l_0_12_241)))
 (let ((?x75522 (* ?x71838 l_0_12_262)))
 (let ((?x72001 (* 2.0 l_0_12_156)))
 (let ((?x73758 (* ?x72001 l_0_12_177)))
 (let ((?x71998 (* 2.0 l_0_12_155)))
 (let ((?x73756 (* ?x71998 l_0_12_176)))
 (let ((?x71995 (* 2.0 l_0_12_154)))
 (let ((?x73754 (* ?x71995 l_0_12_175)))
 (let ((?x71992 (* 2.0 l_0_12_153)))
 (let ((?x73752 (* ?x71992 l_0_12_174)))
 (let ((?x71989 (* 2.0 l_0_12_152)))
 (let ((?x73750 (* ?x71989 l_0_12_173)))
 (let ((?x71986 (* 2.0 l_0_12_151)))
 (let ((?x73748 (* ?x71986 l_0_12_172)))
 (let ((?x71983 (* 2.0 l_0_12_111)))
 (let ((?x73746 (* ?x71983 l_0_12_132)))
 (let ((?x71980 (* 2.0 l_0_12_110)))
 (let ((?x73727 (* ?x71980 l_0_12_131)))
 (let ((?x71977 (* 2.0 l_0_12_109)))
 (let ((?x73723 (* ?x71977 l_0_12_130)))
 (let ((?x71974 (* 2.0 l_0_12_108)))
 (let ((?x73719 (* ?x71974 l_0_12_129)))
 (let ((?x71971 (* 2.0 l_0_12_107)))
 (let ((?x10346 (* ?x71971 l_0_12_128)))
 (let ((?x78279 (+ (+ (+ (+ (* (* 2.0 l_0_12_106) l_0_12_127) ?x10346) ?x73719) ?x73723) ?x73727)))
 (let ((?x78286 (- (- (- (- (- (- (+ ?x78279 ?x73746) ?x73748) ?x73750) ?x73752) ?x73754) ?x73756) ?x73758)))
 (= (- (- (- (- (- (- ?x78286 ?x75522) ?x75524) ?x75526) ?x75528) ?x75530) ?x75532) 0.0))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x75598 (* l_0_12_253 l_0_12_253)))
 (let ((?x75596 (* l_0_12_252 l_0_12_252)))
 (let ((?x75594 (* l_0_12_251 l_0_12_251)))
 (let ((?x75592 (* l_0_12_250 l_0_12_250)))
 (let ((?x75589 (* l_0_12_249 l_0_12_249)))
 (let ((?x75587 (* l_0_12_248 l_0_12_248)))
 (let ((?x75585 (* l_0_12_247 l_0_12_247)))
 (let ((?x76526 (* l_0_12_163 l_0_12_163)))
 (let ((?x76524 (* l_0_12_162 l_0_12_162)))
 (let ((?x76522 (* l_0_12_161 l_0_12_161)))
 (let ((?x76520 (* l_0_12_160 l_0_12_160)))
 (let ((?x76518 (* l_0_12_159 l_0_12_159)))
 (let ((?x76516 (* l_0_12_158 l_0_12_158)))
 (let ((?x76514 (* l_0_12_157 l_0_12_157)))
 (let ((?x76512 (* l_0_12_118 l_0_12_118)))
 (let ((?x76510 (* l_0_12_117 l_0_12_117)))
 (let ((?x76508 (* l_0_12_116 l_0_12_116)))
 (let ((?x76506 (* l_0_12_115 l_0_12_115)))
 (let ((?x76504 (* l_0_12_114 l_0_12_114)))
 (let ((?x68141 (+ (+ (* l_0_12_112 l_0_12_112) (* l_0_12_113 l_0_12_113)) ?x76504)))
 (let ((?x78302 (- (- (- (+ (+ (+ (+ ?x68141 ?x76506) ?x76508) ?x76510) ?x76512) ?x76514) ?x76516) ?x76518)))
 (let ((?x78309 (- (- (- (- (- (- (- ?x78302 ?x76520) ?x76522) ?x76524) ?x76526) ?x75585) ?x75587) ?x75589)))
 (= (- (- (- (- ?x78309 ?x75592) ?x75594) ?x75596) ?x75598) 0.0))))))))))))))))))))))))
(assert
 (let ((?x75661 (* 2.0 l_0_12_253)))
 (let ((?x75662 (* ?x75661 l_0_12_260)))
 (let ((?x75658 (* 2.0 l_0_12_252)))
 (let ((?x75659 (* ?x75658 l_0_12_259)))
 (let ((?x75655 (* 2.0 l_0_12_251)))
 (let ((?x75656 (* ?x75655 l_0_12_258)))
 (let ((?x75652 (* 2.0 l_0_12_250)))
 (let ((?x75653 (* ?x75652 l_0_12_257)))
 (let ((?x75648 (* 2.0 l_0_12_249)))
 (let ((?x75649 (* ?x75648 l_0_12_256)))
 (let ((?x75645 (* 2.0 l_0_12_248)))
 (let ((?x75646 (* ?x75645 l_0_12_255)))
 (let ((?x75642 (* 2.0 l_0_12_247)))
 (let ((?x75643 (* ?x75642 l_0_12_254)))
 (let ((?x76590 (* 2.0 l_0_12_163)))
 (let ((?x76591 (* ?x76590 l_0_12_170)))
 (let ((?x76587 (* 2.0 l_0_12_162)))
 (let ((?x76588 (* ?x76587 l_0_12_169)))
 (let ((?x76584 (* 2.0 l_0_12_161)))
 (let ((?x76585 (* ?x76584 l_0_12_168)))
 (let ((?x76581 (* 2.0 l_0_12_160)))
 (let ((?x76582 (* ?x76581 l_0_12_167)))
 (let ((?x76578 (* 2.0 l_0_12_159)))
 (let ((?x76579 (* ?x76578 l_0_12_166)))
 (let ((?x76575 (* 2.0 l_0_12_158)))
 (let ((?x76576 (* ?x76575 l_0_12_165)))
 (let ((?x76572 (* 2.0 l_0_12_157)))
 (let ((?x76573 (* ?x76572 l_0_12_164)))
 (let ((?x76569 (* 2.0 l_0_12_118)))
 (let ((?x76570 (* ?x76569 l_0_12_125)))
 (let ((?x76566 (* 2.0 l_0_12_117)))
 (let ((?x76567 (* ?x76566 l_0_12_124)))
 (let ((?x76563 (* 2.0 l_0_12_116)))
 (let ((?x76564 (* ?x76563 l_0_12_123)))
 (let ((?x76560 (* 2.0 l_0_12_115)))
 (let ((?x76561 (* ?x76560 l_0_12_122)))
 (let ((?x75626 (* 2.0 l_0_12_114)))
 (let ((?x76558 (* ?x75626 l_0_12_121)))
 (let ((?x75623 (* 2.0 l_0_12_113)))
 (let ((?x76556 (* ?x75623 l_0_12_120)))
 (let ((?x68150 (+ (+ (+ (+ (* (* 2.0 l_0_12_112) l_0_12_119) ?x76556) ?x76558) ?x76561) ?x76564)))
 (let ((?x78330 (- (- (- (- (- (+ (+ ?x68150 ?x76567) ?x76570) ?x76573) ?x76576) ?x76579) ?x76582) ?x76585)))
 (let ((?x78337 (- (- (- (- (- (- (- ?x78330 ?x76588) ?x76591) ?x75643) ?x75646) ?x75649) ?x75653) ?x75656)))
 (= (- (- ?x78337 ?x75659) ?x75662) 0.0)))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x75861 (* l_0_12_261 l_0_12_261)))
 (let ((?x75859 (* l_0_12_260 l_0_12_260)))
 (let ((?x75857 (* l_0_12_259 l_0_12_259)))
 (let ((?x75855 (* l_0_12_258 l_0_12_258)))
 (let ((?x75853 (* l_0_12_257 l_0_12_257)))
 (let ((?x75851 (* l_0_12_256 l_0_12_256)))
 (let ((?x75849 (* l_0_12_255 l_0_12_255)))
 (let ((?x75847 (* l_0_12_254 l_0_12_254)))
 (let ((?x76752 (* l_0_12_171 l_0_12_171)))
 (let ((?x76750 (* l_0_12_170 l_0_12_170)))
 (let ((?x76748 (* l_0_12_169 l_0_12_169)))
 (let ((?x76746 (* l_0_12_168 l_0_12_168)))
 (let ((?x76744 (* l_0_12_167 l_0_12_167)))
 (let ((?x76742 (* l_0_12_166 l_0_12_166)))
 (let ((?x76740 (* l_0_12_165 l_0_12_165)))
 (let ((?x76738 (* l_0_12_164 l_0_12_164)))
 (let ((?x76736 (* l_0_12_126 l_0_12_126)))
 (let ((?x76734 (* l_0_12_125 l_0_12_125)))
 (let ((?x76732 (* l_0_12_124 l_0_12_124)))
 (let ((?x76730 (* l_0_12_123 l_0_12_123)))
 (let ((?x76728 (* l_0_12_122 l_0_12_122)))
 (let ((?x76726 (* l_0_12_121 l_0_12_121)))
 (let ((?x68354 (+ (+ (* l_0_12_119 l_0_12_119) (* l_0_12_120 l_0_12_120)) ?x76726)))
 (let ((?x68273 (- (- (+ (+ (+ (+ (+ ?x68354 ?x76728) ?x76730) ?x76732) ?x76734) ?x76736) ?x76738) ?x76740)))
 (let ((?x78346 (- (- (- (- (- (- (- ?x68273 ?x76742) ?x76744) ?x76746) ?x76748) ?x76750) ?x76752) ?x75847)))
 (let ((?x78353 (- (- (- (- (- (- (- ?x78346 ?x75849) ?x75851) ?x75853) ?x75855) ?x75857) ?x75859) ?x75861)))
 (= ?x78353 0.0))))))))))))))))))))))))))))
(assert
 (let ((?x75966 (* (* 2.0 l_0_12_261) l_0_12_269)))
 (let ((?x75963 (* (* 2.0 l_0_12_260) l_0_12_268)))
 (let ((?x75960 (* (* 2.0 l_0_12_259) l_0_12_267)))
 (let ((?x75957 (* (* 2.0 l_0_12_258) l_0_12_266)))
 (let ((?x75954 (* (* 2.0 l_0_12_257) l_0_12_265)))
 (let ((?x75951 (* (* 2.0 l_0_12_256) l_0_12_264)))
 (let ((?x75948 (* (* 2.0 l_0_12_255) l_0_12_263)))
 (let ((?x75945 (* (* 2.0 l_0_12_254) l_0_12_262)))
 (let ((?x76824 (* (* 2.0 l_0_12_171) l_0_12_179)))
 (let ((?x76821 (* (* 2.0 l_0_12_170) l_0_12_178)))
 (let ((?x76818 (* (* 2.0 l_0_12_169) l_0_12_177)))
 (let ((?x76815 (* (* 2.0 l_0_12_168) l_0_12_176)))
 (let ((?x76812 (* (* 2.0 l_0_12_167) l_0_12_175)))
 (let ((?x76809 (* (* 2.0 l_0_12_166) l_0_12_174)))
 (let ((?x76806 (* (* 2.0 l_0_12_165) l_0_12_173)))
 (let ((?x76803 (* (* 2.0 l_0_12_164) l_0_12_172)))
 (let ((?x76800 (* (* 2.0 l_0_12_126) l_0_12_134)))
 (let ((?x76797 (* (* 2.0 l_0_12_125) l_0_12_133)))
 (let ((?x76794 (* (* 2.0 l_0_12_124) l_0_12_132)))
 (let ((?x76791 (* (* 2.0 l_0_12_123) l_0_12_131)))
 (let ((?x76788 (* (* 2.0 l_0_12_122) l_0_12_130)))
 (let ((?x75835 (* 2.0 l_0_12_121)))
 (let ((?x76785 (* ?x75835 l_0_12_129)))
 (let ((?x75832 (* 2.0 l_0_12_120)))
 (let ((?x76783 (* ?x75832 l_0_12_128)))
 (let ((?x68317 (+ (+ (+ (+ (* (* 2.0 l_0_12_119) l_0_12_127) ?x76783) ?x76785) ?x76788) ?x76791)))
 (let ((?x68362 (- (- (- (- (+ (+ (+ ?x68317 ?x76794) ?x76797) ?x76800) ?x76803) ?x76806) ?x76809) ?x76812)))
 (let ((?x68396 (- (- (- (- (- (- (- ?x68362 ?x76815) ?x76818) ?x76821) ?x76824) ?x75945) ?x75948) ?x75951)))
 (= (- (- (- (- (- ?x68396 ?x75954) ?x75957) ?x75960) ?x75963) ?x75966) 0.0))))))))))))))))))))))))))))))
(assert
 (let ((?x76059 (* l_0_12_270 l_0_12_270)))
 (let ((?x76057 (* l_0_12_269 l_0_12_269)))
 (let ((?x76055 (* l_0_12_268 l_0_12_268)))
 (let ((?x76053 (* l_0_12_267 l_0_12_267)))
 (let ((?x76051 (* l_0_12_266 l_0_12_266)))
 (let ((?x76049 (* l_0_12_265 l_0_12_265)))
 (let ((?x76047 (* l_0_12_264 l_0_12_264)))
 (let ((?x76045 (* l_0_12_263 l_0_12_263)))
 (let ((?x76044 (* l_0_12_262 l_0_12_262)))
 (let ((?x76906 (* l_0_12_180 l_0_12_180)))
 (let ((?x76904 (* l_0_12_179 l_0_12_179)))
 (let ((?x76902 (* l_0_12_178 l_0_12_178)))
 (let ((?x76900 (* l_0_12_177 l_0_12_177)))
 (let ((?x76898 (* l_0_12_176 l_0_12_176)))
 (let ((?x76896 (* l_0_12_175 l_0_12_175)))
 (let ((?x76894 (* l_0_12_174 l_0_12_174)))
 (let ((?x76892 (* l_0_12_173 l_0_12_173)))
 (let ((?x76890 (* l_0_12_172 l_0_12_172)))
 (let ((?x76888 (* l_0_12_135 l_0_12_135)))
 (let ((?x76886 (* l_0_12_134 l_0_12_134)))
 (let ((?x76884 (* l_0_12_133 l_0_12_133)))
 (let ((?x76882 (* l_0_12_132 l_0_12_132)))
 (let ((?x76880 (* l_0_12_131 l_0_12_131)))
 (let ((?x76878 (* l_0_12_130 l_0_12_130)))
 (let ((?x76876 (* l_0_12_129 l_0_12_129)))
 (let ((?x68560 (+ (+ (* l_0_12_127 l_0_12_127) (* l_0_12_128 l_0_12_128)) ?x76876)))
 (let ((?x68517 (- (+ (+ (+ (+ (+ (+ ?x68560 ?x76878) ?x76880) ?x76882) ?x76884) ?x76886) ?x76888) ?x76890)))
 (let ((?x56523 (- (- (- (- (- (- (- ?x68517 ?x76892) ?x76894) ?x76896) ?x76898) ?x76900) ?x76902) ?x76904)))
 (let ((?x78376 (- (- (- (- (- (- (- ?x56523 ?x76906) ?x76044) ?x76045) ?x76047) ?x76049) ?x76051) ?x76053)))
 (= (- (- (- ?x78376 ?x76055) ?x76057) ?x76059) 0.0)))))))))))))))))))))))))))))))
(assert
 (let ((?x78403 (- (* (* (- 2.0) l_0_12_181) l_0_12_182) (* (* 2.0 l_0_12_271) l_0_12_272))))
 (let ((?x78407 (- (- ?x78403 (* (* 2.0 l_0_12_316) l_0_12_317)) (* (* 2.0 l_0_12_361) l_0_12_362))))
 (= (- ?x78407 (* (* 2.0 l_0_12_406) l_0_12_407)) 0.0))))
(assert
 (let ((?x78430 (- (* (* (- 2.0) l_0_12_181) l_0_12_187) (* (* 2.0 l_0_12_271) l_0_12_277))))
 (let ((?x78434 (- (- ?x78430 (* (* 2.0 l_0_12_316) l_0_12_322)) (* (* 2.0 l_0_12_361) l_0_12_367))))
 (= (- ?x78434 (* (* 2.0 l_0_12_406) l_0_12_412)) 0.0))))
(assert
 (let ((?x78457 (- (* (* (- 2.0) l_0_12_181) l_0_12_191) (* (* 2.0 l_0_12_271) l_0_12_281))))
 (let ((?x78461 (- (- ?x78457 (* (* 2.0 l_0_12_316) l_0_12_326)) (* (* 2.0 l_0_12_361) l_0_12_371))))
 (= (- ?x78461 (* (* 2.0 l_0_12_406) l_0_12_416)) 0.0))))
(assert
 (let ((?x78484 (- (* (* (- 2.0) l_0_12_181) l_0_12_196) (* (* 2.0 l_0_12_271) l_0_12_286))))
 (let ((?x78488 (- (- ?x78484 (* (* 2.0 l_0_12_316) l_0_12_331)) (* (* 2.0 l_0_12_361) l_0_12_376))))
 (= (- ?x78488 (* (* 2.0 l_0_12_406) l_0_12_421)) 0.0))))
(assert
 (let ((?x56657 (- (* (* (- 2.0) l_0_12_181) l_0_12_217) (* (* 2.0 l_0_12_271) l_0_12_307))))
 (let ((?x68702 (- (- ?x56657 (* (* 2.0 l_0_12_316) l_0_12_352)) (* (* 2.0 l_0_12_361) l_0_12_397))))
 (= (- ?x68702 (* (* 2.0 l_0_12_406) l_0_12_442)) 0.0))))
(assert
 (let ((?x78538 (* l_0_12_408 l_0_12_408)))
 (let ((?x78536 (* l_0_12_407 l_0_12_407)))
 (let ((?x78534 (* l_0_12_363 l_0_12_363)))
 (let ((?x78532 (* l_0_12_362 l_0_12_362)))
 (let ((?x78530 (* l_0_12_318 l_0_12_318)))
 (let ((?x78528 (* l_0_12_317 l_0_12_317)))
 (let ((?x78526 (* l_0_12_273 l_0_12_273)))
 (let ((?x78524 (* l_0_12_272 l_0_12_272)))
 (let ((?x78523 (- (* (* (- 1.0) l_0_12_182) l_0_12_182) (* (* 1.0 l_0_12_183) l_0_12_183))))
 (let ((?x78537 (- (- (- (- (- (- (- ?x78523 ?x78524) ?x78526) ?x78528) ?x78530) ?x78532) ?x78534) ?x78536)))
 (= (- ?x78537 ?x78538) 0.0))))))))))))
(assert
 (let ((?x78566 (- (* (* (- 2.0) l_0_12_182) l_0_12_191) (* (* 2.0 l_0_12_183) l_0_12_192))))
 (let ((?x78570 (- (- ?x78566 (* (* 2.0 l_0_12_272) l_0_12_281)) (* (* 2.0 l_0_12_273) l_0_12_282))))
 (let ((?x78574 (- (- ?x78570 (* (* 2.0 l_0_12_317) l_0_12_326)) (* (* 2.0 l_0_12_318) l_0_12_327))))
 (let ((?x78578 (- (- ?x78574 (* (* 2.0 l_0_12_362) l_0_12_371)) (* (* 2.0 l_0_12_363) l_0_12_372))))
 (let ((?x78582 (- (- ?x78578 (* (* 2.0 l_0_12_407) l_0_12_416)) (* (* 2.0 l_0_12_408) l_0_12_417))))
 (= ?x78582 0.0)))))))
(assert
 (let ((?x78624 (- (* (* (- 2.0) l_0_12_182) l_0_12_196) (* (* 2.0 l_0_12_183) l_0_12_197))))
 (let ((?x78628 (- (- ?x78624 (* (* 2.0 l_0_12_272) l_0_12_286)) (* (* 2.0 l_0_12_273) l_0_12_287))))
 (let ((?x78632 (- (- ?x78628 (* (* 2.0 l_0_12_317) l_0_12_331)) (* (* 2.0 l_0_12_318) l_0_12_332))))
 (let ((?x78636 (- (- ?x78632 (* (* 2.0 l_0_12_362) l_0_12_376)) (* (* 2.0 l_0_12_363) l_0_12_377))))
 (let ((?x78640 (- (- ?x78636 (* (* 2.0 l_0_12_407) l_0_12_421)) (* (* 2.0 l_0_12_408) l_0_12_422))))
 (= ?x78640 0.0)))))))
(assert
 (let ((?x78682 (- (* (* (- 2.0) l_0_12_182) l_0_12_202) (* (* 2.0 l_0_12_183) l_0_12_203))))
 (let ((?x78686 (- (- ?x78682 (* (* 2.0 l_0_12_272) l_0_12_292)) (* (* 2.0 l_0_12_273) l_0_12_293))))
 (let ((?x78690 (- (- ?x78686 (* (* 2.0 l_0_12_317) l_0_12_337)) (* (* 2.0 l_0_12_318) l_0_12_338))))
 (let ((?x78694 (- (- ?x78690 (* (* 2.0 l_0_12_362) l_0_12_382)) (* (* 2.0 l_0_12_363) l_0_12_383))))
 (let ((?x78698 (- (- ?x78694 (* (* 2.0 l_0_12_407) l_0_12_427)) (* (* 2.0 l_0_12_408) l_0_12_428))))
 (= ?x78698 0.0)))))))
(assert
 (let ((?x78740 (- (* (* (- 2.0) l_0_12_182) l_0_12_217) (* (* 2.0 l_0_12_183) l_0_12_218))))
 (let ((?x78744 (- (- ?x78740 (* (* 2.0 l_0_12_272) l_0_12_307)) (* (* 2.0 l_0_12_273) l_0_12_308))))
 (let ((?x78748 (- (- ?x78744 (* (* 2.0 l_0_12_317) l_0_12_352)) (* (* 2.0 l_0_12_318) l_0_12_353))))
 (let ((?x78752 (- (- ?x78748 (* (* 2.0 l_0_12_362) l_0_12_397)) (* (* 2.0 l_0_12_363) l_0_12_398))))
 (let ((?x78756 (- (- ?x78752 (* (* 2.0 l_0_12_407) l_0_12_442)) (* (* 2.0 l_0_12_408) l_0_12_443))))
 (= ?x78756 0.0)))))))
(assert
 (let ((?x78802 (* l_0_12_415 l_0_12_415)))
 (let ((?x78800 (* l_0_12_414 l_0_12_414)))
 (let ((?x78798 (* l_0_12_413 l_0_12_413)))
 (let ((?x78796 (* l_0_12_412 l_0_12_412)))
 (let ((?x78794 (* l_0_12_370 l_0_12_370)))
 (let ((?x78792 (* l_0_12_369 l_0_12_369)))
 (let ((?x78790 (* l_0_12_368 l_0_12_368)))
 (let ((?x78788 (* l_0_12_367 l_0_12_367)))
 (let ((?x78786 (* l_0_12_325 l_0_12_325)))
 (let ((?x78784 (* l_0_12_324 l_0_12_324)))
 (let ((?x78782 (* l_0_12_323 l_0_12_323)))
 (let ((?x78780 (* l_0_12_322 l_0_12_322)))
 (let ((?x78778 (* l_0_12_280 l_0_12_280)))
 (let ((?x78776 (* l_0_12_279 l_0_12_279)))
 (let ((?x68840 (* l_0_12_278 l_0_12_278)))
 (let ((?x57422 (* l_0_12_277 l_0_12_277)))
 (let ((?x68810 (- (* (* (- 1.0) l_0_12_187) l_0_12_187) (* (* 1.0 l_0_12_188) l_0_12_188))))
 (let ((?x68842 (- (- ?x68810 (* (* 1.0 l_0_12_189) l_0_12_189)) (* (* 1.0 l_0_12_190) l_0_12_190))))
 (let ((?x78785 (- (- (- (- (- (- (- ?x68842 ?x57422) ?x68840) ?x78776) ?x78778) ?x78780) ?x78782) ?x78784)))
 (let ((?x78799 (- (- (- (- (- (- (- ?x78785 ?x78786) ?x78788) ?x78790) ?x78792) ?x78794) ?x78796) ?x78798)))
 (= (- (- ?x78799 ?x78800) ?x78802) 0.0))))))))))))))))))))))
(assert
 (let ((?x78836 (- (* (* (- 2.0) l_0_12_187) l_0_12_196) (* (* 2.0 l_0_12_188) l_0_12_197))))
 (let ((?x78840 (- (- ?x78836 (* (* 2.0 l_0_12_189) l_0_12_198)) (* (* 2.0 l_0_12_190) l_0_12_199))))
 (let ((?x78844 (- (- ?x78840 (* (* 2.0 l_0_12_277) l_0_12_286)) (* (* 2.0 l_0_12_278) l_0_12_287))))
 (let ((?x78848 (- (- ?x78844 (* (* 2.0 l_0_12_279) l_0_12_288)) (* (* 2.0 l_0_12_280) l_0_12_289))))
 (let ((?x78852 (- (- ?x78848 (* (* 2.0 l_0_12_322) l_0_12_331)) (* (* 2.0 l_0_12_323) l_0_12_332))))
 (let ((?x78856 (- (- ?x78852 (* (* 2.0 l_0_12_324) l_0_12_333)) (* (* 2.0 l_0_12_325) l_0_12_334))))
 (let ((?x78860 (- (- ?x78856 (* (* 2.0 l_0_12_367) l_0_12_376)) (* (* 2.0 l_0_12_368) l_0_12_377))))
 (let ((?x78864 (- (- ?x78860 (* (* 2.0 l_0_12_369) l_0_12_378)) (* (* 2.0 l_0_12_370) l_0_12_379))))
 (let ((?x78868 (- (- ?x78864 (* (* 2.0 l_0_12_412) l_0_12_421)) (* (* 2.0 l_0_12_413) l_0_12_422))))
 (let ((?x78872 (- (- ?x78868 (* (* 2.0 l_0_12_414) l_0_12_423)) (* (* 2.0 l_0_12_415) l_0_12_424))))
 (= ?x78872 0.0))))))))))))
(assert
 (let ((?x78921 (- (* (* (- 2.0) l_0_12_187) l_0_12_202) (* (* 2.0 l_0_12_188) l_0_12_203))))
 (let ((?x78925 (- (- ?x78921 (* (* 2.0 l_0_12_189) l_0_12_204)) (* (* 2.0 l_0_12_190) l_0_12_205))))
 (let ((?x78929 (- (- ?x78925 (* (* 2.0 l_0_12_277) l_0_12_292)) (* (* 2.0 l_0_12_278) l_0_12_293))))
 (let ((?x78933 (- (- ?x78929 (* (* 2.0 l_0_12_279) l_0_12_294)) (* (* 2.0 l_0_12_280) l_0_12_295))))
 (let ((?x78937 (- (- ?x78933 (* (* 2.0 l_0_12_322) l_0_12_337)) (* (* 2.0 l_0_12_323) l_0_12_338))))
 (let ((?x78941 (- (- ?x78937 (* (* 2.0 l_0_12_324) l_0_12_339)) (* (* 2.0 l_0_12_325) l_0_12_340))))
 (let ((?x78945 (- (- ?x78941 (* (* 2.0 l_0_12_367) l_0_12_382)) (* (* 2.0 l_0_12_368) l_0_12_383))))
 (let ((?x78949 (- (- ?x78945 (* (* 2.0 l_0_12_369) l_0_12_384)) (* (* 2.0 l_0_12_370) l_0_12_385))))
 (let ((?x78953 (- (- ?x78949 (* (* 2.0 l_0_12_412) l_0_12_427)) (* (* 2.0 l_0_12_413) l_0_12_428))))
 (let ((?x78957 (- (- ?x78953 (* (* 2.0 l_0_12_414) l_0_12_429)) (* (* 2.0 l_0_12_415) l_0_12_430))))
 (= ?x78957 0.0))))))))))))
(assert
 (let ((?x79023 (- (* (* (- 2.0) l_0_12_187) l_0_12_217) (* (* 2.0 l_0_12_188) l_0_12_218))))
 (let ((?x79027 (- (- ?x79023 (* (* 2.0 l_0_12_189) l_0_12_219)) (* (* 2.0 l_0_12_190) l_0_12_220))))
 (let ((?x79031 (- (- ?x79027 (* (* 2.0 l_0_12_277) l_0_12_307)) (* (* 2.0 l_0_12_278) l_0_12_308))))
 (let ((?x79035 (- (- ?x79031 (* (* 2.0 l_0_12_279) l_0_12_309)) (* (* 2.0 l_0_12_280) l_0_12_310))))
 (let ((?x79039 (- (- ?x79035 (* (* 2.0 l_0_12_322) l_0_12_352)) (* (* 2.0 l_0_12_323) l_0_12_353))))
 (let ((?x79043 (- (- ?x79039 (* (* 2.0 l_0_12_324) l_0_12_354)) (* (* 2.0 l_0_12_325) l_0_12_355))))
 (let ((?x79047 (- (- ?x79043 (* (* 2.0 l_0_12_367) l_0_12_397)) (* (* 2.0 l_0_12_368) l_0_12_398))))
 (let ((?x79051 (- (- ?x79047 (* (* 2.0 l_0_12_369) l_0_12_399)) (* (* 2.0 l_0_12_370) l_0_12_400))))
 (let ((?x79055 (- (- ?x79051 (* (* 2.0 l_0_12_412) l_0_12_442)) (* (* 2.0 l_0_12_413) l_0_12_443))))
 (let ((?x79059 (- (- ?x79055 (* (* 2.0 l_0_12_414) l_0_12_444)) (* (* 2.0 l_0_12_415) l_0_12_445))))
 (= ?x79059 0.0))))))))))))
(assert
 (let ((?x79136 (* l_0_12_420 l_0_12_420)))
 (let ((?x79134 (* l_0_12_419 l_0_12_419)))
 (let ((?x79132 (* l_0_12_418 l_0_12_418)))
 (let ((?x79130 (* l_0_12_417 l_0_12_417)))
 (let ((?x79128 (* l_0_12_416 l_0_12_416)))
 (let ((?x79126 (* l_0_12_375 l_0_12_375)))
 (let ((?x79124 (* l_0_12_374 l_0_12_374)))
 (let ((?x79122 (* l_0_12_373 l_0_12_373)))
 (let ((?x79120 (* l_0_12_372 l_0_12_372)))
 (let ((?x79118 (* l_0_12_371 l_0_12_371)))
 (let ((?x79116 (* l_0_12_330 l_0_12_330)))
 (let ((?x79114 (* l_0_12_329 l_0_12_329)))
 (let ((?x79112 (* l_0_12_328 l_0_12_328)))
 (let ((?x79110 (* l_0_12_327 l_0_12_327)))
 (let ((?x79108 (* l_0_12_326 l_0_12_326)))
 (let ((?x79106 (* l_0_12_285 l_0_12_285)))
 (let ((?x79104 (* l_0_12_284 l_0_12_284)))
 (let ((?x79102 (* l_0_12_283 l_0_12_283)))
 (let ((?x79100 (* l_0_12_282 l_0_12_282)))
 (let ((?x79098 (* l_0_12_281 l_0_12_281)))
 (let ((?x79088 (- (* (* (- 1.0) l_0_12_191) l_0_12_191) (* (* 1.0 l_0_12_192) l_0_12_192))))
 (let ((?x79094 (- (- ?x79088 (* (* 1.0 l_0_12_193) l_0_12_193)) (* (* 1.0 l_0_12_194) l_0_12_194))))
 (let ((?x79103 (- (- (- (- ?x79094 (* (* 1.0 l_0_12_195) l_0_12_195)) ?x79098) ?x79100) ?x79102)))
 (let ((?x79117 (- (- (- (- (- (- (- ?x79103 ?x79104) ?x79106) ?x79108) ?x79110) ?x79112) ?x79114) ?x79116)))
 (let ((?x79131 (- (- (- (- (- (- (- ?x79117 ?x79118) ?x79120) ?x79122) ?x79124) ?x79126) ?x79128) ?x79130)))
 (= (- (- (- ?x79131 ?x79132) ?x79134) ?x79136) 0.0)))))))))))))))))))))))))))
(assert
 (let ((?x79180 (- (* (* (- 2.0) l_0_12_191) l_0_12_196) (* (* 2.0 l_0_12_192) l_0_12_197))))
 (let ((?x79184 (- (- ?x79180 (* (* 2.0 l_0_12_193) l_0_12_198)) (* (* 2.0 l_0_12_194) l_0_12_199))))
 (let ((?x79188 (- (- ?x79184 (* (* 2.0 l_0_12_195) l_0_12_200)) (* (* 2.0 l_0_12_281) l_0_12_286))))
 (let ((?x79192 (- (- ?x79188 (* (* 2.0 l_0_12_282) l_0_12_287)) (* (* 2.0 l_0_12_283) l_0_12_288))))
 (let ((?x79196 (- (- ?x79192 (* (* 2.0 l_0_12_284) l_0_12_289)) (* (* 2.0 l_0_12_285) l_0_12_290))))
 (let ((?x79200 (- (- ?x79196 (* (* 2.0 l_0_12_326) l_0_12_331)) (* (* 2.0 l_0_12_327) l_0_12_332))))
 (let ((?x79204 (- (- ?x79200 (* (* 2.0 l_0_12_328) l_0_12_333)) (* (* 2.0 l_0_12_329) l_0_12_334))))
 (let ((?x79208 (- (- ?x79204 (* (* 2.0 l_0_12_330) l_0_12_335)) (* (* 2.0 l_0_12_371) l_0_12_376))))
 (let ((?x79212 (- (- ?x79208 (* (* 2.0 l_0_12_372) l_0_12_377)) (* (* 2.0 l_0_12_373) l_0_12_378))))
 (let ((?x79216 (- (- ?x79212 (* (* 2.0 l_0_12_374) l_0_12_379)) (* (* 2.0 l_0_12_375) l_0_12_380))))
 (let ((?x79220 (- (- ?x79216 (* (* 2.0 l_0_12_416) l_0_12_421)) (* (* 2.0 l_0_12_417) l_0_12_422))))
 (let ((?x79224 (- (- ?x79220 (* (* 2.0 l_0_12_418) l_0_12_423)) (* (* 2.0 l_0_12_419) l_0_12_424))))
 (= (- ?x79224 (* (* 2.0 l_0_12_420) l_0_12_425)) 0.0))))))))))))))
(assert
 (let ((?x79298 (- (* (* (- 2.0) l_0_12_191) l_0_12_202) (* (* 2.0 l_0_12_192) l_0_12_203))))
 (let ((?x79302 (- (- ?x79298 (* (* 2.0 l_0_12_193) l_0_12_204)) (* (* 2.0 l_0_12_194) l_0_12_205))))
 (let ((?x79306 (- (- ?x79302 (* (* 2.0 l_0_12_195) l_0_12_206)) (* (* 2.0 l_0_12_281) l_0_12_292))))
 (let ((?x79310 (- (- ?x79306 (* (* 2.0 l_0_12_282) l_0_12_293)) (* (* 2.0 l_0_12_283) l_0_12_294))))
 (let ((?x79314 (- (- ?x79310 (* (* 2.0 l_0_12_284) l_0_12_295)) (* (* 2.0 l_0_12_285) l_0_12_296))))
 (let ((?x79318 (- (- ?x79314 (* (* 2.0 l_0_12_326) l_0_12_337)) (* (* 2.0 l_0_12_327) l_0_12_338))))
 (let ((?x79322 (- (- ?x79318 (* (* 2.0 l_0_12_328) l_0_12_339)) (* (* 2.0 l_0_12_329) l_0_12_340))))
 (let ((?x79326 (- (- ?x79322 (* (* 2.0 l_0_12_330) l_0_12_341)) (* (* 2.0 l_0_12_371) l_0_12_382))))
 (let ((?x79330 (- (- ?x79326 (* (* 2.0 l_0_12_372) l_0_12_383)) (* (* 2.0 l_0_12_373) l_0_12_384))))
 (let ((?x79334 (- (- ?x79330 (* (* 2.0 l_0_12_374) l_0_12_385)) (* (* 2.0 l_0_12_375) l_0_12_386))))
 (let ((?x79338 (- (- ?x79334 (* (* 2.0 l_0_12_416) l_0_12_427)) (* (* 2.0 l_0_12_417) l_0_12_428))))
 (let ((?x79342 (- (- ?x79338 (* (* 2.0 l_0_12_418) l_0_12_429)) (* (* 2.0 l_0_12_419) l_0_12_430))))
 (= (- ?x79342 (* (* 2.0 l_0_12_420) l_0_12_431)) 0.0))))))))))))))
(assert
 (let ((?x79447 (- (* (* (- 2.0) l_0_12_191) l_0_12_217) (* (* 2.0 l_0_12_192) l_0_12_218))))
 (let ((?x79451 (- (- ?x79447 (* (* 2.0 l_0_12_193) l_0_12_219)) (* (* 2.0 l_0_12_194) l_0_12_220))))
 (let ((?x79455 (- (- ?x79451 (* (* 2.0 l_0_12_195) l_0_12_221)) (* (* 2.0 l_0_12_281) l_0_12_307))))
 (let ((?x79459 (- (- ?x79455 (* (* 2.0 l_0_12_282) l_0_12_308)) (* (* 2.0 l_0_12_283) l_0_12_309))))
 (let ((?x79463 (- (- ?x79459 (* (* 2.0 l_0_12_284) l_0_12_310)) (* (* 2.0 l_0_12_285) l_0_12_311))))
 (let ((?x79467 (- (- ?x79463 (* (* 2.0 l_0_12_326) l_0_12_352)) (* (* 2.0 l_0_12_327) l_0_12_353))))
 (let ((?x79471 (- (- ?x79467 (* (* 2.0 l_0_12_328) l_0_12_354)) (* (* 2.0 l_0_12_329) l_0_12_355))))
 (let ((?x79475 (- (- ?x79471 (* (* 2.0 l_0_12_330) l_0_12_356)) (* (* 2.0 l_0_12_371) l_0_12_397))))
 (let ((?x79479 (- (- ?x79475 (* (* 2.0 l_0_12_372) l_0_12_398)) (* (* 2.0 l_0_12_373) l_0_12_399))))
 (let ((?x79483 (- (- ?x79479 (* (* 2.0 l_0_12_374) l_0_12_400)) (* (* 2.0 l_0_12_375) l_0_12_401))))
 (let ((?x79487 (- (- ?x79483 (* (* 2.0 l_0_12_416) l_0_12_442)) (* (* 2.0 l_0_12_417) l_0_12_443))))
 (let ((?x79491 (- (- ?x79487 (* (* 2.0 l_0_12_418) l_0_12_444)) (* (* 2.0 l_0_12_419) l_0_12_445))))
 (= (- ?x79491 (* (* 2.0 l_0_12_420) l_0_12_446)) 0.0))))))))))))))
(assert
 (let ((?x79644 (* l_0_12_426 l_0_12_426)))
 (let ((?x79642 (* l_0_12_425 l_0_12_425)))
 (let ((?x79640 (* l_0_12_424 l_0_12_424)))
 (let ((?x79638 (* l_0_12_423 l_0_12_423)))
 (let ((?x79636 (* l_0_12_422 l_0_12_422)))
 (let ((?x79634 (* l_0_12_421 l_0_12_421)))
 (let ((?x79632 (* l_0_12_381 l_0_12_381)))
 (let ((?x79630 (* l_0_12_380 l_0_12_380)))
 (let ((?x79628 (* l_0_12_379 l_0_12_379)))
 (let ((?x79626 (* l_0_12_378 l_0_12_378)))
 (let ((?x79624 (* l_0_12_377 l_0_12_377)))
 (let ((?x79622 (* l_0_12_376 l_0_12_376)))
 (let ((?x79620 (* l_0_12_336 l_0_12_336)))
 (let ((?x79618 (* l_0_12_335 l_0_12_335)))
 (let ((?x79616 (* l_0_12_334 l_0_12_334)))
 (let ((?x79614 (* l_0_12_333 l_0_12_333)))
 (let ((?x79612 (* l_0_12_332 l_0_12_332)))
 (let ((?x79610 (* l_0_12_331 l_0_12_331)))
 (let ((?x79608 (* l_0_12_291 l_0_12_291)))
 (let ((?x79606 (* l_0_12_290 l_0_12_290)))
 (let ((?x79604 (* l_0_12_289 l_0_12_289)))
 (let ((?x79602 (* l_0_12_288 l_0_12_288)))
 (let ((?x79600 (* l_0_12_287 l_0_12_287)))
 (let ((?x79598 (* l_0_12_286 l_0_12_286)))
 (let ((?x79585 (- (* (* (- 1.0) l_0_12_196) l_0_12_196) (* (* 1.0 l_0_12_197) l_0_12_197))))
 (let ((?x79591 (- (- ?x79585 (* (* 1.0 l_0_12_198) l_0_12_198)) (* (* 1.0 l_0_12_199) l_0_12_199))))
 (let ((?x79597 (- (- ?x79591 (* (* 1.0 l_0_12_200) l_0_12_200)) (* (* 1.0 l_0_12_201) l_0_12_201))))
 (let ((?x79611 (- (- (- (- (- (- (- ?x79597 ?x79598) ?x79600) ?x79602) ?x79604) ?x79606) ?x79608) ?x79610)))
 (let ((?x79625 (- (- (- (- (- (- (- ?x79611 ?x79612) ?x79614) ?x79616) ?x79618) ?x79620) ?x79622) ?x79624)))
 (let ((?x79639 (- (- (- (- (- (- (- ?x79625 ?x79626) ?x79628) ?x79630) ?x79632) ?x79634) ?x79636) ?x79638)))
 (= (- (- (- ?x79639 ?x79640) ?x79642) ?x79644) 0.0))))))))))))))))))))))))))))))))
(assert
 (let ((?x79702 (- (* (* (- 2.0) l_0_12_196) l_0_12_217) (* (* 2.0 l_0_12_197) l_0_12_218))))
 (let ((?x79706 (- (- ?x79702 (* (* 2.0 l_0_12_198) l_0_12_219)) (* (* 2.0 l_0_12_199) l_0_12_220))))
 (let ((?x79710 (- (- ?x79706 (* (* 2.0 l_0_12_200) l_0_12_221)) (* (* 2.0 l_0_12_201) l_0_12_222))))
 (let ((?x79714 (- (- ?x79710 (* (* 2.0 l_0_12_286) l_0_12_307)) (* (* 2.0 l_0_12_287) l_0_12_308))))
 (let ((?x79718 (- (- ?x79714 (* (* 2.0 l_0_12_288) l_0_12_309)) (* (* 2.0 l_0_12_289) l_0_12_310))))
 (let ((?x79722 (- (- ?x79718 (* (* 2.0 l_0_12_290) l_0_12_311)) (* (* 2.0 l_0_12_291) l_0_12_312))))
 (let ((?x79726 (- (- ?x79722 (* (* 2.0 l_0_12_331) l_0_12_352)) (* (* 2.0 l_0_12_332) l_0_12_353))))
 (let ((?x79730 (- (- ?x79726 (* (* 2.0 l_0_12_333) l_0_12_354)) (* (* 2.0 l_0_12_334) l_0_12_355))))
 (let ((?x79734 (- (- ?x79730 (* (* 2.0 l_0_12_335) l_0_12_356)) (* (* 2.0 l_0_12_336) l_0_12_357))))
 (let ((?x79738 (- (- ?x79734 (* (* 2.0 l_0_12_376) l_0_12_397)) (* (* 2.0 l_0_12_377) l_0_12_398))))
 (let ((?x79742 (- (- ?x79738 (* (* 2.0 l_0_12_378) l_0_12_399)) (* (* 2.0 l_0_12_379) l_0_12_400))))
 (let ((?x79746 (- (- ?x79742 (* (* 2.0 l_0_12_380) l_0_12_401)) (* (* 2.0 l_0_12_381) l_0_12_402))))
 (let ((?x79750 (- (- ?x79746 (* (* 2.0 l_0_12_421) l_0_12_442)) (* (* 2.0 l_0_12_422) l_0_12_443))))
 (let ((?x79754 (- (- ?x79750 (* (* 2.0 l_0_12_423) l_0_12_444)) (* (* 2.0 l_0_12_424) l_0_12_445))))
 (let ((?x79758 (- (- ?x79754 (* (* 2.0 l_0_12_425) l_0_12_446)) (* (* 2.0 l_0_12_426) l_0_12_447))))
 (= ?x79758 0.0)))))))))))))))))
(assert
 (let ((?x79954 (* l_0_12_433 l_0_12_433)))
 (let ((?x79952 (* l_0_12_432 l_0_12_432)))
 (let ((?x79950 (* l_0_12_431 l_0_12_431)))
 (let ((?x79948 (* l_0_12_430 l_0_12_430)))
 (let ((?x79946 (* l_0_12_429 l_0_12_429)))
 (let ((?x79944 (* l_0_12_428 l_0_12_428)))
 (let ((?x79942 (* l_0_12_427 l_0_12_427)))
 (let ((?x79940 (* l_0_12_388 l_0_12_388)))
 (let ((?x79938 (* l_0_12_387 l_0_12_387)))
 (let ((?x79936 (* l_0_12_386 l_0_12_386)))
 (let ((?x79934 (* l_0_12_385 l_0_12_385)))
 (let ((?x79932 (* l_0_12_384 l_0_12_384)))
 (let ((?x79930 (* l_0_12_383 l_0_12_383)))
 (let ((?x79928 (* l_0_12_382 l_0_12_382)))
 (let ((?x79926 (* l_0_12_343 l_0_12_343)))
 (let ((?x79924 (* l_0_12_342 l_0_12_342)))
 (let ((?x79922 (* l_0_12_341 l_0_12_341)))
 (let ((?x79920 (* l_0_12_340 l_0_12_340)))
 (let ((?x79918 (* l_0_12_339 l_0_12_339)))
 (let ((?x79916 (* l_0_12_338 l_0_12_338)))
 (let ((?x79914 (* l_0_12_337 l_0_12_337)))
 (let ((?x79912 (* l_0_12_298 l_0_12_298)))
 (let ((?x79910 (* l_0_12_297 l_0_12_297)))
 (let ((?x79908 (* l_0_12_296 l_0_12_296)))
 (let ((?x79906 (* l_0_12_295 l_0_12_295)))
 (let ((?x79904 (* l_0_12_294 l_0_12_294)))
 (let ((?x79902 (* l_0_12_293 l_0_12_293)))
 (let ((?x79900 (* l_0_12_292 l_0_12_292)))
 (let ((?x79884 (- (* (* (- 1.0) l_0_12_202) l_0_12_202) (* (* 1.0 l_0_12_203) l_0_12_203))))
 (let ((?x79890 (- (- ?x79884 (* (* 1.0 l_0_12_204) l_0_12_204)) (* (* 1.0 l_0_12_205) l_0_12_205))))
 (let ((?x79896 (- (- ?x79890 (* (* 1.0 l_0_12_206) l_0_12_206)) (* (* 1.0 l_0_12_207) l_0_12_207))))
 (let ((?x79905 (- (- (- (- ?x79896 (* (* 1.0 l_0_12_208) l_0_12_208)) ?x79900) ?x79902) ?x79904)))
 (let ((?x79919 (- (- (- (- (- (- (- ?x79905 ?x79906) ?x79908) ?x79910) ?x79912) ?x79914) ?x79916) ?x79918)))
 (let ((?x79933 (- (- (- (- (- (- (- ?x79919 ?x79920) ?x79922) ?x79924) ?x79926) ?x79928) ?x79930) ?x79932)))
 (let ((?x79947 (- (- (- (- (- (- (- ?x79933 ?x79934) ?x79936) ?x79938) ?x79940) ?x79942) ?x79944) ?x79946)))
 (= (- (- (- (- ?x79947 ?x79948) ?x79950) ?x79952) ?x79954) 0.0)))))))))))))))))))))))))))))))))))))
(assert
 (let ((?x80119 (* l_0_12_450 l_0_12_450)))
 (let ((?x80117 (* l_0_12_449 l_0_12_449)))
 (let ((?x80115 (* l_0_12_448 l_0_12_448)))
 (let ((?x80113 (* l_0_12_447 l_0_12_447)))
 (let ((?x80111 (* l_0_12_446 l_0_12_446)))
 (let ((?x80109 (* l_0_12_445 l_0_12_445)))
 (let ((?x80107 (* l_0_12_444 l_0_12_444)))
 (let ((?x80105 (* l_0_12_443 l_0_12_443)))
 (let ((?x80103 (* l_0_12_442 l_0_12_442)))
 (let ((?x80101 (* l_0_12_405 l_0_12_405)))
 (let ((?x80099 (* l_0_12_404 l_0_12_404)))
 (let ((?x80097 (* l_0_12_403 l_0_12_403)))
 (let ((?x80095 (* l_0_12_402 l_0_12_402)))
 (let ((?x80093 (* l_0_12_401 l_0_12_401)))
 (let ((?x80091 (* l_0_12_400 l_0_12_400)))
 (let ((?x80089 (* l_0_12_399 l_0_12_399)))
 (let ((?x80087 (* l_0_12_398 l_0_12_398)))
 (let ((?x80085 (* l_0_12_397 l_0_12_397)))
 (let ((?x80083 (* l_0_12_360 l_0_12_360)))
 (let ((?x80081 (* l_0_12_359 l_0_12_359)))
 (let ((?x80079 (* l_0_12_358 l_0_12_358)))
 (let ((?x80077 (* l_0_12_357 l_0_12_357)))
 (let ((?x80075 (* l_0_12_356 l_0_12_356)))
 (let ((?x80073 (* l_0_12_355 l_0_12_355)))
 (let ((?x80071 (* l_0_12_354 l_0_12_354)))
 (let ((?x80069 (* l_0_12_353 l_0_12_353)))
 (let ((?x80067 (* l_0_12_352 l_0_12_352)))
 (let ((?x80065 (* l_0_12_315 l_0_12_315)))
 (let ((?x80063 (* l_0_12_314 l_0_12_314)))
 (let ((?x80061 (* l_0_12_313 l_0_12_313)))
 (let ((?x80059 (* l_0_12_312 l_0_12_312)))
 (let ((?x80057 (* l_0_12_311 l_0_12_311)))
 (let ((?x80055 (* l_0_12_310 l_0_12_310)))
 (let ((?x80053 (* l_0_12_309 l_0_12_309)))
 (let ((?x80051 (* l_0_12_308 l_0_12_308)))
 (let ((?x80049 (* l_0_12_307 l_0_12_307)))
 (let ((?x80027 (- (* (* (- 1.0) l_0_12_217) l_0_12_217) (* (* 1.0 l_0_12_218) l_0_12_218))))
 (let ((?x80033 (- (- ?x80027 (* (* 1.0 l_0_12_219) l_0_12_219)) (* (* 1.0 l_0_12_220) l_0_12_220))))
 (let ((?x80039 (- (- ?x80033 (* (* 1.0 l_0_12_221) l_0_12_221)) (* (* 1.0 l_0_12_222) l_0_12_222))))
 (let ((?x80045 (- (- ?x80039 (* (* 1.0 l_0_12_223) l_0_12_223)) (* (* 1.0 l_0_12_224) l_0_12_224))))
 (let ((?x80054 (- (- (- (- ?x80045 (* (* 1.0 l_0_12_225) l_0_12_225)) ?x80049) ?x80051) ?x80053)))
 (let ((?x80068 (- (- (- (- (- (- (- ?x80054 ?x80055) ?x80057) ?x80059) ?x80061) ?x80063) ?x80065) ?x80067)))
 (let ((?x80082 (- (- (- (- (- (- (- ?x80068 ?x80069) ?x80071) ?x80073) ?x80075) ?x80077) ?x80079) ?x80081)))
 (let ((?x80096 (- (- (- (- (- (- (- ?x80082 ?x80083) ?x80085) ?x80087) ?x80089) ?x80091) ?x80093) ?x80095)))
 (let ((?x80110 (- (- (- (- (- (- (- ?x80096 ?x80097) ?x80099) ?x80101) ?x80103) ?x80105) ?x80107) ?x80109)))
 (= (- (- (- (- (- ?x80110 ?x80111) ?x80113) ?x80115) ?x80117) ?x80119) 0.0)))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (>= l_0_12_1 0.0))
(assert
 (>= l_0_12_3 0.0))
(assert
 (>= l_0_12_6 0.0))
(assert
 (>= l_0_12_10 0.0))
(assert
 (>= l_0_12_15 0.0))
(assert
 (>= l_0_12_21 0.0))
(assert
 (>= l_0_12_28 0.0))
(assert
 (>= l_0_12_36 0.0))
(assert
 (>= l_0_12_45 0.0))
(assert
 (>= l_0_12_46 0.0))
(assert
 (>= l_0_12_48 0.0))
(assert
 (>= l_0_12_51 0.0))
(assert
 (>= l_0_12_55 0.0))
(assert
 (>= l_0_12_60 0.0))
(assert
 (>= l_0_12_66 0.0))
(assert
 (>= l_0_12_73 0.0))
(assert
 (>= l_0_12_81 0.0))
(assert
 (>= l_0_12_90 0.0))
(assert
 (>= l_0_12_91 0.0))
(assert
 (>= l_0_12_93 0.0))
(assert
 (>= l_0_12_96 0.0))
(assert
 (>= l_0_12_100 0.0))
(assert
 (>= l_0_12_105 0.0))
(assert
 (>= l_0_12_111 0.0))
(assert
 (>= l_0_12_118 0.0))
(assert
 (>= l_0_12_126 0.0))
(assert
 (>= l_0_12_135 0.0))
(assert
 (>= l_0_12_136 0.0))
(assert
 (>= l_0_12_138 0.0))
(assert
 (>= l_0_12_141 0.0))
(assert
 (>= l_0_12_145 0.0))
(assert
 (>= l_0_12_150 0.0))
(assert
 (>= l_0_12_156 0.0))
(assert
 (>= l_0_12_163 0.0))
(assert
 (>= l_0_12_171 0.0))
(assert
 (>= l_0_12_180 0.0))
(assert
 (>= l_0_12_181 0.0))
(assert
 (>= l_0_12_183 0.0))
(assert
 (>= l_0_12_186 0.0))
(assert
 (>= l_0_12_190 0.0))
(assert
 (>= l_0_12_195 0.0))
(assert
 (>= l_0_12_201 0.0))
(assert
 (>= l_0_12_208 0.0))
(assert
 (>= l_0_12_216 0.0))
(assert
 (>= l_0_12_225 0.0))
(assert
 (>= l_0_12_226 0.0))
(assert
 (>= l_0_12_228 0.0))
(assert
 (>= l_0_12_231 0.0))
(assert
 (>= l_0_12_235 0.0))
(assert
 (>= l_0_12_240 0.0))
(assert
 (>= l_0_12_246 0.0))
(assert
 (>= l_0_12_253 0.0))
(assert
 (>= l_0_12_261 0.0))
(assert
 (>= l_0_12_270 0.0))
(assert
 (>= l_0_12_271 0.0))
(assert
 (>= l_0_12_273 0.0))
(assert
 (>= l_0_12_276 0.0))
(assert
 (>= l_0_12_280 0.0))
(assert
 (>= l_0_12_285 0.0))
(assert
 (>= l_0_12_291 0.0))
(assert
 (>= l_0_12_298 0.0))
(assert
 (>= l_0_12_306 0.0))
(assert
 (>= l_0_12_315 0.0))
(assert
 (>= l_0_12_316 0.0))
(assert
 (>= l_0_12_318 0.0))
(assert
 (>= l_0_12_321 0.0))
(assert
 (>= l_0_12_325 0.0))
(assert
 (>= l_0_12_330 0.0))
(assert
 (>= l_0_12_336 0.0))
(assert
 (>= l_0_12_343 0.0))
(assert
 (>= l_0_12_351 0.0))
(assert
 (>= l_0_12_360 0.0))
(assert
 (>= l_0_12_361 0.0))
(assert
 (>= l_0_12_363 0.0))
(assert
 (>= l_0_12_366 0.0))
(assert
 (>= l_0_12_370 0.0))
(assert
 (>= l_0_12_375 0.0))
(assert
 (>= l_0_12_381 0.0))
(assert
 (>= l_0_12_388 0.0))
(assert
 (>= l_0_12_396 0.0))
(assert
 (>= l_0_12_405 0.0))
(assert
 (>= l_0_12_406 0.0))
(assert
 (>= l_0_12_408 0.0))
(assert
 (>= l_0_12_411 0.0))
(assert
 (>= l_0_12_415 0.0))
(assert
 (>= l_0_12_420 0.0))
(assert
 (>= l_0_12_426 0.0))
(assert
 (>= l_0_12_433 0.0))
(assert
 (>= l_0_12_441 0.0))
(assert
 (>= l_0_12_450 0.0))
(check-sat)
(get-model)