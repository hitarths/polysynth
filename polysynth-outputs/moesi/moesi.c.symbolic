real modified,shared,exclusive,invalid,owned,total;
@pre((invalid >= 1 and owned >= 1));
exclusive = 0;
modified = 0;
shared = 0;
total = (invalid + owned);
while (1 >= 0, (((modified >= 0 and shared >= 0) and ((exclusive >= 0 and invalid >= 0) and owned >= 0)) and (((modified + shared) + (exclusive + invalid)) + owned) == total)) {
ndif {
[assume (invalid >= 1) {
shared = ((shared + exclusive) + 1);
owned = (owned + modified);
invalid = (invalid - 1);
exclusive = 0;
modified = 0;
[assume (exclusive >= 1) {
exclusive = (exclusive - 1);
modified = (modified + 1);
[assume (shared >= 1) {
invalid = (_a_0_)*(1)+(_a_1_)*(shared)+(_a_2_)*(exclusive)+(_a_3_)*(modified)+(_a_4_)*(invalid)+(_a_5_)*(owned);
shared = 0;
exclusive = 1;
modified = 0;
owned = 0;
[assume (owned >= 1) {
invalid = (_a_6_)*(1)+(_a_7_)*(shared)+(_a_8_)*(exclusive)+(_a_9_)*(modified)+(_a_10_)*(invalid)+(_a_11_)*(owned);
shared = 0;
exclusive = 1;
modified = 0;
owned = 0;
[assume (invalid >= 1) {
invalid = (_a_12_)*(1)+(_a_13_)*(shared)+(_a_14_)*(exclusive)+(_a_15_)*(modified)+(_a_16_)*(invalid)+(_a_17_)*(owned);
shared = 0;
exclusive = 1;
modified = 0;
owned = 0;
}
@post(1 >= 0);
