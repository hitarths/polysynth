SKETCH version 1.7.6
Benchmark = miniTestb320_hole.sk
    [0;32m[1655146033.2860 - DEBUG] Running stage 'parse' -- Parse the program from a file[0m
    [0;32m[1655146033.4380 - DEBUG] Running stage 'preproc' -- Preprocessing (used for all further transformations)[0m
miniTes..0_hole.sk:21: Making final N
miniTes..0_hole.sk:21: Making final T
miniTes..0_hole.sk:21: Making final N
miniTes..0_hole.sk:21: Making final T
miniTes..0_hole.sk:21: Making final N
miniTes..0_hole.sk:21: Making final T
miniTes..0_hole.sk:11: Making final N
miniTes..0_hole.sk:11: Making final T
null: Making final N0
null: Making final T1
null: Making final N0
null: Making final T1
    [0;32m[1655146033.5030 - DEBUG] Running stage SpmdLowLevelCStage[0m
    [0;32m[1655146033.5060 - DEBUG]    Running visitor FlattenStmtBlocks2[0m
    [0;32m[1655146033.5070 - DEBUG]    Running visitor SplitAssignFromVarDef[0m
    [0;32m[1655146033.5080 - DEBUG]    Running visitor EliminateComplexForLoops[0m
    [0;32m[1655146033.5110 - DEBUG] Running stage 'lowering' -- Lower for SKETCH backend[0m
    [0;32m[1655146033.5190 - DEBUG] Running stage 'sten' -- Stencil transformations[0m

//// After stage lowering
/* BEGIN PACKAGE ANONYMOUS*/
/*miniTes..0_hole.sk:11*/

void cacheObv1d (int N_11, int T_12, bit[N_11] in_13, bit[N_11 * T_12] f_14, ref bit[N_11 * T_12] _out_15)/*miniTes..0_hole.sk:11*/
{
  {
    {
      int __sa23_16;
      if(0 < T_12)/*miniTes..0_hole.sk:11*/
      {
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:11: Either null pointer or Array out of bounds
      }
      for(__sa23_16 = 0; __sa23_16 < T_12; __sa23_16 = __sa23_16 + 1)/*Canonical*/
      {
        {
          for(int __sa31 = 0; __sa31 < N_11; __sa31 = __sa31 + 1)/*Canonical*/
          {
            _out_15[(N_11 * __sa23_16) + __sa31] = 0;
          }
        }
      }
      int __sa24_17;
      if(0 < T_12)/*miniTes..0_hole.sk:11*/
      {
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:12: Either null pointer or Array out of bounds
      }
      for(__sa24_17 = 0; __sa24_17 < T_12; __sa24_17 = __sa24_17 + 1)/*Canonical*/
      {
        {
          for(int __sa32 = 0; __sa32 < N_11; __sa32 = __sa32 + 1)/*Canonical*/
          {
            _out_15[(N_11 * __sa24_17) + __sa32] = 0;
          }
        }
      }
      int i_18;
      if(0 < T_12)/*miniTes..0_hole.sk:13*/
      {
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:15: Array out of bounds
        assert ((0 >= 0) && ((N_11 - 1) < N_11)); //miniTes..0_hole.sk:15: Array out of bounds
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:15: Array out of bounds
        assert ((0 >= 0) && ((N_11 - 1) < N_11)); //miniTes..0_hole.sk:15: Array out of bounds
        assert ((0 >= 0) && ((N_11 - 1) < N_11)); //miniTes..0_hole.sk:15: Either null pointer or Array out of bounds
      }
      for(i_18 = 0; i_18 < T_12; i_18 = i_18 + 1)/*Canonical*/
      {
        int j_1b;
        for(j_1b = 0; j_1b < N_11; j_1b = j_1b + 1)/*Canonical*/
        {
          _out_15[(N_11 * i_18) + j_1b] = (in_13[j_1b]) ^ (f_14[(N_11 * i_18) + j_1b]);
        }
      }
      return;
    }
  }
}
/*miniTes..0_hole.sk:21*/

void cacheObv1dSK (int N_11, int T_12, bit[N_11] in_13, bit[N_11 * T_12] f_14, ref bit[N_11 * T_12] _out_15)  implements cacheObv1d/*miniTes..0_hole.sk:21*/
{
  {
    {
      int __sa21_5;
      if(0 < T_12)/*miniTes..0_hole.sk:21*/
      {
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:21: Either null pointer or Array out of bounds
      }
      for(__sa21_5 = 0; __sa21_5 < T_12; __sa21_5 = __sa21_5 + 1)/*Canonical*/
      {
        {
          for(int __sa29 = 0; __sa29 < N_11; __sa29 = __sa29 + 1)/*Canonical*/
          {
            _out_15[(N_11 * __sa21_5) + __sa29] = 0;
          }
        }
      }
      int __sa22_6;
      if(0 < T_12)/*miniTes..0_hole.sk:21*/
      {
        assert ((0 >= 0) && ((T_12 - 1) < T_12)); //miniTes..0_hole.sk:24: Either null pointer or Array out of bounds
      }
      for(__sa22_6 = 0; __sa22_6 < T_12; __sa22_6 = __sa22_6 + 1)/*Canonical*/
      {
        {
          for(int __sa30 = 0; __sa30 < N_11; __sa30 = __sa30 + 1)/*Canonical*/
          {
            _out_15[(N_11 * __sa22_6) + __sa30] = 0;
          }
        }
      }
      int _out_s18_7;
      int T_8;
      T_8 = T_12;
      int N_9;
      N_9 = N_11;
      bit _has_out__a;
      _has_out__a = 0;
      _out_s18_7 = 0;
      int _whichexpr_s0_b;
      _whichexpr_s0_b = ??/* H__3_10int:2 */;
      assert ((0 <= _whichexpr_s0_b) && (_whichexpr_s0_b < 3)); //regen H__3
      _out_s18_7 = ((_whichexpr_s0_b == 0 ? N_9 : (_whichexpr_s0_b == 1 ? T_8 : 0))) + (??/* H__0_10int:5 */);
      _has_out__a = 1;
      int _out_s20_c;
      int T_d;
      T_d = T_12;
      int N_e;
      N_e = N_11;
      bit _has_out__f;
      _has_out__f = 0;
      _out_s20_c = 0;
      int _whichexpr_s0_10;
      _whichexpr_s0_10 = ??/* H__3_11int:2 */;
      assert ((0 <= _whichexpr_s0_10) && (_whichexpr_s0_10 < 3)); //regen H__3
      _out_s20_c = ((_whichexpr_s0_10 == 0 ? N_e : (_whichexpr_s0_10 == 1 ? T_d : 0))) + (??/* H__0_11int:5 */);
      _has_out__f = 1;
      forLoop_t12@ANONYMOUS(_out_s18_7, _out_s20_c, T_12, N_11, in_13, f_14, _out_15);
      return;
    }
  }
}
/*miniTes..0_hole.sk:4*/

void forLoop_t12 (int low_1c, int high_1d, int T1_1e, int N0_1f, bit[N0_1f] in3_0_20, bit[N0_1f * T1_1e] f4_1_21, ref bit[N0_1f * T1_1e] out2_22)/*miniTes..0_hole.sk:4*/
{
  {
    {
      assert (T1_1e >= 0); //Negative array lengths not allowed T1_1e  miniTes..0_hole.sk:4
      assert (N0_1f >= 0); //Negative array lengths not allowed N0_1f  miniTes..0_hole.sk:4
      bit[N0_1f * T1_1e] f4_23;
      if(0 < T1_1e)/*null*/
      {
        assert ((0 >= 0) && ((T1_1e - 1) < T1_1e)); //miniTes..0_hole.sk:4: Array out of bounds
        assert ((0 >= 0) && ((T1_1e - 1) < T1_1e)); //miniTes..0_hole.sk:4: Either null pointer or Array out of bounds
      }
      for(int __sa27 = 0; __sa27 < T1_1e; __sa27 = __sa27 + 1)/*Canonical*/
      {
        {
          for(int __sa33 = 0; __sa33 < N0_1f; __sa33 = __sa33 + 1)/*Canonical*/
          {
            f4_23[(N0_1f * __sa27) + __sa33] = f4_1_21[(N0_1f * __sa27) + __sa33];
          }
        }
      }
      assert (N0_1f >= 0); //Negative array lengths not allowed N0_1f  miniTes..0_hole.sk:4
      bit[N0_1f] in3_24;
      in3_24 = in3_0_20;
      if(low_1c < high_1d)/*miniTes..0_hole.sk:5*/
      {
        int i_25;
        i_25 = low_1c;
        int T_26;
        T_26 = T1_1e;
        int N_27;
        N_27 = N0_1f;
        bit _has_out__28;
        _has_out__28 = 0;
        int _out_s14_29;
        int T_2a;
        T_2a = T_26;
        int i_2b;
        i_2b = i_25;
        int N_2c;
        N_2c = N_27;
        bit _has_out__2d;
        _has_out__2d = 0;
        _out_s14_29 = 0;
        int _whichexpr_s1_2e;
        _whichexpr_s1_2e = ??/* H__4_0_7int:2 */;
        assert ((0 <= _whichexpr_s1_2e) && (_whichexpr_s1_2e < 4)); //regen H__4
        _out_s14_29 = ((_whichexpr_s1_2e == 0 ? N_2c : (_whichexpr_s1_2e == 1 ? T_2a : (_whichexpr_s1_2e == 2 ? i_2b : 0)))) + (??/* H__1_0_7int:5 */);
        _has_out__2d = 1;
        int _out_s16_2f;
        int T_30;
        T_30 = T_26;
        int i_31;
        i_31 = i_25;
        int N_32;
        N_32 = N_27;
        bit _has_out__33;
        _has_out__33 = 0;
        _out_s16_2f = 0;
        int _whichexpr_s1_34;
        _whichexpr_s1_34 = ??/* H__4_0_8int:2 */;
        assert ((0 <= _whichexpr_s1_34) && (_whichexpr_s1_34 < 4)); //regen H__4
        _out_s16_2f = ((_whichexpr_s1_34 == 0 ? N_32 : (_whichexpr_s1_34 == 1 ? T_30 : (_whichexpr_s1_34 == 2 ? i_31 : 0)))) + (??/* H__1_0_8int:5 */);
        _has_out__33 = 1;
        assert (N_27 >= N0_1f); //Array Length Mismatch miniTes..0_hole.sk:33
        assert (T_26 >= T1_1e); //Array Length Mismatch miniTes..0_hole.sk:33
        assert (N_27 >= N0_1f); //Array Length Mismatch miniTes..0_hole.sk:33
        assert (T_26 == T1_1e); //Array Length Mismatch miniTes..0_hole.sk:33
        assert (N_27 == N0_1f); //Array Length Mismatch miniTes..0_hole.sk:33
        forLoop_t24@ANONYMOUS(_out_s14_29, _out_s16_2f, T_26, i_25, N_27, in3_24, f4_23, out2_22);
        int low_1c_s25;
        low_1c_s25 = low_1c + 1;
        forLoop_t12@ANONYMOUS(low_1c_s25, high_1d, T1_1e, N0_1f, in3_24, f4_23, out2_22);
      }
    }
  }
}
/*miniTes..0_hole.sk:4*/

void forLoop_t24 (int low_35, int high_36, int T1_37, int i5_38, int N0_39, bit[N0_39] in3_0_3a, bit[N0_39 * T1_37] f4_1_3b, ref bit[N0_39 * T1_37] out2_3c)/*miniTes..0_hole.sk:4*/
{
  {
    {
      assert (T1_37 >= 0); //Negative array lengths not allowed T1_37  miniTes..0_hole.sk:4
      assert (N0_39 >= 0); //Negative array lengths not allowed N0_39  miniTes..0_hole.sk:4
      bit[N0_39 * T1_37] f4_3d;
      if(0 < T1_37)/*null*/
      {
        assert ((0 >= 0) && ((T1_37 - 1) < T1_37)); //miniTes..0_hole.sk:4: Array out of bounds
        assert ((0 >= 0) && ((T1_37 - 1) < T1_37)); //miniTes..0_hole.sk:4: Either null pointer or Array out of bounds
      }
      for(int __sa28 = 0; __sa28 < T1_37; __sa28 = __sa28 + 1)/*Canonical*/
      {
        {
          for(int __sa34 = 0; __sa34 < N0_39; __sa34 = __sa34 + 1)/*Canonical*/
          {
            f4_3d[(N0_39 * __sa28) + __sa34] = f4_1_3b[(N0_39 * __sa28) + __sa34];
          }
        }
      }
      assert (N0_39 >= 0); //Negative array lengths not allowed N0_39  miniTes..0_hole.sk:4
      bit[N0_39] in3_3e;
      in3_3e = in3_0_3a;
      if(low_35 < high_36)/*miniTes..0_hole.sk:5*/
      {
        int j_3f;
        j_3f = low_35;
        int T_40;
        T_40 = T1_37;
        int i_41;
        i_41 = i5_38;
        int N_42;
        N_42 = N0_39;
        bit _has_out__43;
        _has_out__43 = 0;
        int _out_s4_44;
        int T_45;
        T_45 = T_40;
        int i_46;
        i_46 = i_41;
        int j_47;
        j_47 = j_3f;
        int N_48;
        N_48 = N_42;
        bit _has_out__49;
        _has_out__49 = 0;
        _out_s4_44 = 0;
        int _whichexpr_s2_4a;
        _whichexpr_s2_4a = ??/* H__5_0_2int:3 */;
        assert ((0 <= _whichexpr_s2_4a) && (_whichexpr_s2_4a < 5)); //regen H__5
        _out_s4_44 = ((_whichexpr_s2_4a == 0 ? N_48 : (_whichexpr_s2_4a == 1 ? T_45 : (_whichexpr_s2_4a == 2 ? i_46 : (_whichexpr_s2_4a == 3 ? j_47 : 0))))) + (??/* H__2_0_2int:5 */);
        _has_out__49 = 1;
        int _out_s6_4b;
        int T_4c;
        T_4c = T_40;
        int i_4d;
        i_4d = i_41;
        int j_4e;
        j_4e = j_3f;
        int N_4f;
        N_4f = N_42;
        bit _has_out__50;
        _has_out__50 = 0;
        _out_s6_4b = 0;
        int _whichexpr_s2_51;
        _whichexpr_s2_51 = ??/* H__5_0_3int:3 */;
        assert ((0 <= _whichexpr_s2_51) && (_whichexpr_s2_51 < 5)); //regen H__5
        _out_s6_4b = ((_whichexpr_s2_51 == 0 ? N_4f : (_whichexpr_s2_51 == 1 ? T_4c : (_whichexpr_s2_51 == 2 ? i_4d : (_whichexpr_s2_51 == 3 ? j_4e : 0))))) + (??/* H__2_0_3int:5 */);
        _has_out__50 = 1;
        int _out_s8_52;
        int T_53;
        T_53 = T_40;
        int i_54;
        i_54 = i_41;
        int j_55;
        j_55 = j_3f;
        int N_56;
        N_56 = N_42;
        bit _has_out__57;
        _has_out__57 = 0;
        _out_s8_52 = 0;
        int _whichexpr_s2_58;
        _whichexpr_s2_58 = ??/* H__5_0_4int:3 */;
        assert ((0 <= _whichexpr_s2_58) && (_whichexpr_s2_58 < 5)); //regen H__5
        _out_s8_52 = ((_whichexpr_s2_58 == 0 ? N_56 : (_whichexpr_s2_58 == 1 ? T_53 : (_whichexpr_s2_58 == 2 ? i_54 : (_whichexpr_s2_58 == 3 ? j_55 : 0))))) + (??/* H__2_0_4int:5 */);
        _has_out__57 = 1;
        int _out_s10_59;
        int T_5a;
        T_5a = T_40;
        int i_5b;
        i_5b = i_41;
        int j_5c;
        j_5c = j_3f;
        int N_5d;
        N_5d = N_42;
        bit _has_out__5e;
        _has_out__5e = 0;
        _out_s10_59 = 0;
        int _whichexpr_s2_5f;
        _whichexpr_s2_5f = ??/* H__5_0_5int:3 */;
        assert ((0 <= _whichexpr_s2_5f) && (_whichexpr_s2_5f < 5)); //regen H__5
        _out_s10_59 = ((_whichexpr_s2_5f == 0 ? N_5d : (_whichexpr_s2_5f == 1 ? T_5a : (_whichexpr_s2_5f == 2 ? i_5b : (_whichexpr_s2_5f == 3 ? j_5c : 0))))) + (??/* H__2_0_5int:5 */);
        _has_out__5e = 1;
        int _out_s12_60;
        int T_61;
        T_61 = T_40;
        int i_62;
        i_62 = i_41;
        int j_63;
        j_63 = j_3f;
        int N_64;
        N_64 = N_42;
        bit _has_out__65;
        _has_out__65 = 0;
        _out_s12_60 = 0;
        int _whichexpr_s2_66;
        _whichexpr_s2_66 = ??/* H__5_0_6int:3 */;
        assert ((0 <= _whichexpr_s2_66) && (_whichexpr_s2_66 < 5)); //regen H__5
        _out_s12_60 = ((_whichexpr_s2_66 == 0 ? N_64 : (_whichexpr_s2_66 == 1 ? T_61 : (_whichexpr_s2_66 == 2 ? i_62 : (_whichexpr_s2_66 == 3 ? j_63 : 0))))) + (??/* H__2_0_6int:5 */);
        _has_out__65 = 1;
        assert ((_out_s4_44 >= 0) && (_out_s4_44 < T1_37)); //miniTes..0_hole.sk:30: Array out of bounds
        assert ((_out_s8_52 >= 0) && (_out_s8_52 < N0_39)); //miniTes..0_hole.sk:30: Array out of bounds
        assert ((_out_s10_59 >= 0) && (_out_s10_59 < T1_37)); //miniTes..0_hole.sk:30: Array out of bounds
        assert ((_out_s12_60 >= 0) && (_out_s12_60 < N0_39)); //miniTes..0_hole.sk:30: Array out of bounds
        assert ((_out_s6_4b >= 0) && (_out_s6_4b < N0_39)); //miniTes..0_hole.sk:30: Either null pointer or Array out of bounds
        out2_3c[(N0_39 * _out_s4_44) + _out_s6_4b] = (in3_3e[_out_s8_52]) ^ (f4_3d[(N0_39 * _out_s10_59) + _out_s12_60]);
        int low_35_s26;
        low_35_s26 = low_35 + 1;
        forLoop_t24@ANONYMOUS(low_35_s26, high_36, T1_37, i5_38, N0_39, in3_3e, f4_3d, out2_3c);
      }
    }
  }
}
/* END PACKAGE ANONYMOUS*/
------------------------------

[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 9
[SATBackend] MAX FUNC INLINING  = 9
[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = null
resolved cegis to path /Users/harshit/Google Drive/Projects/2022/Program Synthesis/sketch-1.7.6/sketch-backend/src/SketchSolver/cegis
    [0;32m[1655146033.6150 - DEBUG] executing /Users/harshit/Google Drive/Projects/2022/Program Synthesis/sketch-1.7.6/sketch-backend/src/SketchSolver/cegis --bnd-inbits 2 --boundmode CALLNAME --verbosity 5 --print-version -simiters 4 -synth MINI -verif MINI --assumebcheck --bnd-inline-amnt 9 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -numericalsolvermode ONLY_SMOOTHING -numtries 1 -conflictcutoff 1 -maxrestarts 10 -costoption 1 -o /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/solution0-0 /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/input0.tmp[0m
[SATBackend] Launching: /Users/harshit/Google Drive/Projects/2022/Program Synthesis/sketch-1.7.6/sketch-backend/src/SketchSolver/cegis --bnd-inbits 2 --boundmode CALLNAME --verbosity 5 --print-version -simiters 4 -synth MINI -verif MINI --assumebcheck --bnd-inline-amnt 9 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -numericalsolvermode ONLY_SMOOTHING -numtries 1 -conflictcutoff 1 -maxrestarts 10 -costoption 1 -o /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/solution0-0 /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/input0.tmp 
starting command line: [/Users/harshit/Google Drive/Projects/2022/Program Synthesis/sketch-1.7.6/sketch-backend/src/SketchSolver/cegis, --bnd-inbits, 2, --boundmode, CALLNAME, --verbosity, 5, --print-version, -simiters, 4, -synth, MINI, -verif, MINI, --assumebcheck, --bnd-inline-amnt, 9, -angelictupledepth, 1, -srctupledepth, 2, -sprandbias, 1, -numericalsolvermode, ONLY_SMOOTHING, -numtries, 1, -conflictcutoff, 1, -maxrestarts, 10, -costoption, 1, -o, /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/solution0-0, /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/input0.tmp]
Overriding inputs with 2
boundmode = CALLNAME
 synth = |MINI|
 verif = |MINI|
assuming  bounds checks
Unknown flag -numericalsolvermode
Unknown flag -numtries
Unknown flag -conflictcutoff
Unknown flag -maxrestarts
Unknown flag -costoption
SOLVER RAND SEED = 1655146033
 optimization level = 6
Reading SKETCH Program in File /Users/harshit/.sketch/tmp/miniTestb320_hole.sk/input0.tmp
* before  EVERYTHING: cacheObv1d::SPEC nodes = 561	 cacheObv1dSK::SKETCH nodes = 89
 INBITS = 2
 CBITS  = 5
 input_ints = 4 	 input_bits = 0
 Inlining amount = 9
 Inlining functions in the sketch.
 Inlining functions in the spec.
* Final Problem size: Problem nodes = 13129
  # OF CONTROLS:    18
 control_ints = 18 	 control_bits = 0
inputSize = 22	ctrlSize = 68
Random seeds = 1
BEG CHECK
 * After optims it became = 55 was 13129
regen H__3
END CHECK
********  0	ftime= 0	ctime= 0.009
BEG FIND
Level 1  intsize = 2
 * After optims it became = 1121 was 13129
* TIME TO ADD INPUT :  0.189 ms 
 Removed 733 clauses
DECISIONS START = 0
f# %assign: 0 clauses: 795734 learn: 166 restart: 2 decision: 2288 propagated: 904887
END FIND
BEG CHECK
 * After optims it became = 550 was 13129
The spec and sketch can not be made to be equal. _p_out_cacheObv1d_ANONYMOUS
END CHECK
********  1	ftime= 999.37	ctime= 0.011
BEG FIND
Level 1  intsize = 2
 * After optims it became = 3199 was 13129
* TIME TO ADD INPUT :  1000.38 ms 
DECISIONS START = 2288
f# %assign: 0 clauses: 7110815 learn: 221 restart: 3 decision: 8504 propagated: 1755539
END FIND
BEG CHECK
 * After optims it became = 3437 was 13129
miniTes..0_hole.sk:30: Array out of bounds
END CHECK
********  2	ftime= 2000.1	ctime= 0.014
BEG FIND
Level 1  intsize = 2
 * After optims it became = 1993 was 13129
* TIME TO ADD INPUT :  0.466 ms 
DECISIONS START = 8504
f# %assign: 0 clauses: 8700432 learn: 222 restart: 4 decision: 8531 propagated: 2044449
END FIND
BEG CHECK
 * After optims it became = 3749 was 13129
miniTes..0_hole.sk:30: Array out of bounds
END CHECK
********  3	ftime= 0.666	ctime= 0.017
BEG FIND
Level 1  intsize = 2
 * After optims it became = 2295 was 13129
* TIME TO ADD INPUT :  999.789 ms 
DECISIONS START = 8531
f# %assign: 0 clauses: 12293359 learn: 222 restart: 5 decision: 8555 propagated: 2383228
END FIND
BEG CHECK
 * After optims it became = 6532 was 13129
The spec and sketch can not be made to be equal. _p_out_cacheObv1d_ANONYMOUS
END CHECK
********  4	ftime= 1999.12	ctime= 0.024
BEG FIND
Level 1  intsize = 2
 * After optims it became = 3174 was 13129
* TIME TO ADD INPUT :  1000.45 ms 
DECISIONS START = 8555
 Removed 10990 clauses
f# %assign: 0 clauses: 18594734 learn: 260 restart: 6 decision: 8663 propagated: 5294794
END FIND
BEG CHECK
 * After optims it became = 6417 was 13129
c# %assign: 12 clauses: 9 learn: 0 restart: 0 decision: 0 propagated: 1
 reduced size from 6417 to 4379
c# %assign: 12 clauses: 9 learn: 0 restart: 0 decision: 0 propagated: 1
 reduced size from 4379 to 4092
c# %assign: 12 clauses: 9 learn: 0 restart: 0 decision: 0 propagated: 1
 reduced size from 4092 to 3805
c# %assign: 12 clauses: 9 learn: 0 restart: 0 decision: 0 propagated: 1
 reduced size from 3805 to 3518
After all optim
 Removed 0 clauses
DECISIONS START = 0
 Removed 2 clauses
c# %assign: 79 clauses: 38048 learn: 164 restart: 2 decision: 533 propagated: 206571
END CHECK
********  5	ftime= 4000.06	ctime= 0.077
 *GOT THE CORRECT ANSWER IN 6 iterations.
 *FIND TIME 8999.31 CHECK TIME 0.152 TOTAL TIME 8999.46
VALUES H__0_10: 0, H__0_11: 0, H__1_0_7: 0, H__1_0_8: 0, H__2_0_2: 0, H__2_0_3: 0, H__2_0_4: 0, H__2_0_5: 0, H__2_0_6: 0, H__3_10: 2, H__3_11: 0, H__4_0_7: 3, H__4_0_8: 1, H__5_0_2: 3, H__5_0_3: 2, H__5_0_4: 2, H__5_0_5: 3, H__5_0_6: 2, 
RESULT = 2  
**ROUND 0 : 0 Round time:  8999.55 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  9000.02
Model building time (ms): 0.013
Solution time (ms):       8999.55
Max virtual mem (bytes):  0
Max resident mem (bytes): 0
Max private mem (bytes):  0
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 9.097
      model building time (s) ---------> 0.0
      solution time (s) ---------------> 8.999
      max memory usage (MiB) ----------> 0.0
      [SAT-specific solution stats]
      initial number of nodes ---------> 89
      number of nodes after opts ------> 13129
      number of controls --------------> 18
      total number of control bits ----> 68

[SATBackend] Solver exit value: 0
    [0;32m[1655146042.7230 - DEBUG] Running stage 'subst' -- Substitute a solution (assignment to ??'s) into the sketch[0m
    [0;32m[1655146042.7270 - DEBUG] Running stage 'cleanup' -- Clean up sketch after substitutions for readability[0m
    [0;32m[1655146042.7570 - DEBUG] Running stage 'outputc' -- Output C code (to console or file)[0m
    [0;33m[1655146042.7730 - NOTE] Wrote test harness to ./miniTestb320_hole_test.cpp[0m
[SKETCH] DONE
Total time = 9577
